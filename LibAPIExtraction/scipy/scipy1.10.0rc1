
----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/__config__.py----------------------------------------
A:scipy.__config__.extra_dll_dir->os.path.join(os.path.dirname(__file__), '.libs')
A:scipy.__config__.g->globals()
A:scipy.__config__.v->str(v)
scipy.__config__.get_info(name)
scipy.__config__.show()
scipy.show_config()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_distributor_init.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/version.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/__init__.py----------------------------------------
A:scipy.__init__._fun->_deprecated(_msg.format(_key))(_fun)
A:scipy.__init__.rand->_deprecated(_msg.format('rand'))(rand)
A:scipy.__init__.randn->_deprecated(_msg.format('randn'))(randn)
A:scipy.__init__.ifft->_deprecated('scipy.ifft is deprecated and will be removed in SciPy 2.0.0, use scipy.fft.ifft instead')(ifft)
A:scipy.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/conftest.py----------------------------------------
A:scipy.conftest.mark->_get_mark(item, 'xfail_on_32bit')
A:scipy.conftest.v->int(os.environ.get('SCIPY_XSLOW', '0'))
A:scipy.conftest.xdist_worker_count->int(os.environ['PYTEST_XDIST_WORKER_COUNT'])
A:scipy.conftest.threads_per_worker->max(max_openmp_threads // xdist_worker_count, 1)
A:scipy.conftest.old_mode->get_fpu_mode()
A:scipy.conftest.new_mode->get_fpu_mode()
scipy.conftest._get_mark(item,name)
scipy.conftest.check_fpu_mode(request)
scipy.conftest.pytest_configure(config)
scipy.conftest.pytest_runtest_setup(item)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/misc/_common.py----------------------------------------
A:scipy.misc._common.fname->os.path.join(os.path.dirname(__file__), 'ascent.dat')
A:scipy.misc._common.ascent->array(pickle.load(f))
A:scipy.misc._common.rawdata->f.read()
A:scipy.misc._common.data->bz2.decompress(rawdata)
A:scipy.misc._common.face->(0.21 * face[:, :, 0] + 0.71 * face[:, :, 1] + 0.07 * face[:, :, 2]).astype('uint8')
A:scipy.misc._common.file_path->os.path.join(os.path.dirname(__file__), 'ecg.dat')
A:scipy.misc._common.ecg->file['ecg'].astype(int)
scipy.misc._common.ascent()
scipy.misc._common.central_diff_weights(Np,ndiv=1)
scipy.misc._common.derivative(func,x0,dx=1.0,n=1,args=(),order=3)
scipy.misc._common.electrocardiogram()
scipy.misc._common.face(gray=False)
scipy.misc.ascent()
scipy.misc.central_diff_weights(Np,ndiv=1)
scipy.misc.derivative(func,x0,dx=1.0,n=1,args=(),order=3)
scipy.misc.electrocardiogram()
scipy.misc.face(gray=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/misc/doccer.py----------------------------------------
scipy.misc.doccer.__dir__()
scipy.misc.doccer.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/misc/common.py----------------------------------------
scipy.misc.common.__dir__()
scipy.misc.common.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/misc/__init__.py----------------------------------------
A:scipy.misc.__init__.test->PytestTester(__name__)
scipy.misc.__init__.__dir__()
scipy.misc.__init__.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/misc/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/misc/tests/test_common.py----------------------------------------
A:scipy.misc.tests.test_common.ecg->electrocardiogram()
scipy.misc.tests.test_common.test_ascent()
scipy.misc.tests.test_common.test_electrocardiogram()
scipy.misc.tests.test_common.test_face()
scipy.misc.tests.testtest_ascent()
scipy.misc.tests.testtest_electrocardiogram()
scipy.misc.tests.testtest_face()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/misc/tests/test_doccer.py----------------------------------------
A:scipy.misc.tests.test_doccer.d2->scipy._lib.doccer.unindent_dict(doc_dict)
A:scipy.misc.tests.test_doccer.udd->scipy._lib.doccer.unindent_dict(doc_dict)
A:scipy.misc.tests.test_doccer.formatted->scipy._lib.doccer.docformat(single_doc, doc_dict)
A:scipy.misc.tests.test_doccer.decorator->scipy._lib.doccer.filldoc(doc_dict, False)
A:scipy.misc.tests.test_doccer.bar->Bar()
scipy.misc.tests.test_doccer.test_decorator()
scipy.misc.tests.test_doccer.test_docformat()
scipy.misc.tests.test_doccer.test_inherit_docstring_from()
scipy.misc.tests.test_doccer.test_unindent()
scipy.misc.tests.test_doccer.test_unindent_dict()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/cluster/vq.py----------------------------------------
A:scipy.cluster.vq.obs->_asarray_validated(obs, check_finite=check_finite)
A:scipy.cluster.vq.std_dev->_asarray_validated(obs, check_finite=check_finite).std(axis=0)
A:scipy.cluster.vq.code_book->init_meth(data, k, rng)
A:scipy.cluster.vq.ct->numpy.common_type(obs, code_book)
A:scipy.cluster.vq.c_obs->_asarray_validated(obs, check_finite=check_finite).astype(ct, copy=False)
A:scipy.cluster.vq.c_code_book->init_meth(data, k, rng).astype(ct, copy=False)
A:scipy.cluster.vq.dist->cdist(obs, code_book)
A:scipy.cluster.vq.code->cdist(obs, code_book).argmin(axis=1)
A:scipy.cluster.vq.prev_avg_dists->deque([diff], maxlen=2)
A:scipy.cluster.vq.(obs_code, distort)->vq(obs, code_book, check_finite=False)
A:scipy.cluster.vq.(code_book, has_members)->_vq.update_cluster_means(obs, obs_code, code_book.shape[0])
A:scipy.cluster.vq.guess->_kpoints(obs, k, rng)
A:scipy.cluster.vq.k->int(k_or_guess)
A:scipy.cluster.vq.rng->check_random_state(seed)
A:scipy.cluster.vq.(book, dist)->_kmeans(obs, guess, thresh=thresh)
A:scipy.cluster.vq.idx->check_random_state(seed).choice(data.shape[0], size=k, replace=False)
A:scipy.cluster.vq.mu->_asarray_validated(data, check_finite=check_finite).mean(axis=0)
A:scipy.cluster.vq.cov->numpy.atleast_2d(np.cov(data, rowvar=False))
A:scipy.cluster.vq.x->x.dot(np.linalg.cholesky(cov).T).dot(np.linalg.cholesky(cov).T)
A:scipy.cluster.vq.(_, s, vh)->numpy.linalg.svd(data - mu, full_matrices=False)
A:scipy.cluster.vq.init->numpy.ndarray((k, dims))
A:scipy.cluster.vq.D2->cdist(init[:i, :], data, metric='sqeuclidean').min(axis=0)
A:scipy.cluster.vq.cumprobs->probs.cumsum()
A:scipy.cluster.vq.r->check_random_state(seed).uniform()
A:scipy.cluster.vq.data->_asarray_validated(data, check_finite=check_finite)
A:scipy.cluster.vq.nc->int(k)
A:scipy.cluster.vq.(new_code_book, has_members)->_vq.update_cluster_means(data, label, nc)
scipy.cluster.vq.ClusterError(Exception)
scipy.cluster.vq._kmeans(obs,guess,thresh=1e-05)
scipy.cluster.vq._kpoints(data,k,rng)
scipy.cluster.vq._kpp(data,k,rng)
scipy.cluster.vq._krandinit(data,k,rng)
scipy.cluster.vq._missing_raise()
scipy.cluster.vq._missing_warn()
scipy.cluster.vq.kmeans(obs,k_or_guess,iter=20,thresh=1e-05,check_finite=True,*,seed=None)
scipy.cluster.vq.kmeans2(data,k,iter=10,thresh=1e-05,minit='random',missing='warn',check_finite=True,*,seed=None)
scipy.cluster.vq.py_vq(obs,code_book,check_finite=True)
scipy.cluster.vq.vq(obs,code_book,check_finite=True)
scipy.cluster.vq.whiten(obs,check_finite=True)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/cluster/hierarchy.py----------------------------------------
A:scipy.cluster.hierarchy.D->numpy.random.rand(pnts * (pnts - 1) / 2)
A:scipy.cluster.hierarchy.y->scipy.spatial.distance.pdist(X, metric=metric).mean()
A:scipy.cluster.hierarchy.[y]->_copy_arrays_if_base_present([y])
A:scipy.cluster.hierarchy.n->int(distance.num_obs_y(y))
A:scipy.cluster.hierarchy.result->_hierarchy.fast_linkage(y, n, method_code)
A:scipy.cluster.hierarchy.lvisited->set()
A:scipy.cluster.hierarchy.rvisited->set()
A:scipy.cluster.hierarchy._cnode_bare->ClusterNode(0)
A:scipy.cluster.hierarchy._cnode_type->type(ClusterNode)
A:scipy.cluster.hierarchy.q->deque()
A:scipy.cluster.hierarchy.tree->to_tree(Z)
A:scipy.cluster.hierarchy.node->deque().popleft()
A:scipy.cluster.hierarchy.nobs->num_obs_linkage(Z)
A:scipy.cluster.hierarchy.nodes->_order_cluster_tree(Z)
A:scipy.cluster.hierarchy.cols_idx->numpy.array([cols_idx])
A:scipy.cluster.hierarchy.heights->numpy.array([x.dist for x in nodes])
A:scipy.cluster.hierarchy.n_cols->len(cols_idx)
A:scipy.cluster.hierarchy.groups->numpy.zeros((n_cols, nobs), dtype=int)
A:scipy.cluster.hierarchy.last_group->numpy.arange(nobs)
A:scipy.cluster.hierarchy.idx->deque().popleft().pre_order()
A:scipy.cluster.hierarchy.this_group->numpy.arange(nobs).copy()
A:scipy.cluster.hierarchy.this_group[idx]->last_group[idx].min()
A:scipy.cluster.hierarchy.Z->numpy.asarray(Z, order='c')
A:scipy.cluster.hierarchy.d[i]->ClusterNode(i)
A:scipy.cluster.hierarchy.fi->int(row[0])
A:scipy.cluster.hierarchy.fj->int(row[1])
A:scipy.cluster.hierarchy.nd->ClusterNode(i + n, d[fi], d[fj], row[2])
A:scipy.cluster.hierarchy.X->numpy.asarray(X, order='c', dtype=np.double)
A:scipy.cluster.hierarchy.zz->numpy.zeros(n * (n - 1) // 2, dtype=np.double)
A:scipy.cluster.hierarchy.Y->scipy.spatial.distance.pdist(X, metric=metric)
A:scipy.cluster.hierarchy.z->numpy.zeros(n * (n - 1) // 2, dtype=np.double).mean()
A:scipy.cluster.hierarchy.[Z]->_copy_arrays_if_base_present([Z])
A:scipy.cluster.hierarchy.R->numpy.asarray(R, order='c')
A:scipy.cluster.hierarchy.Zpart->numpy.asarray(Z, order='c').copy()
A:scipy.cluster.hierarchy.CS->numpy.zeros((Zs[0],), dtype=np.double)
A:scipy.cluster.hierarchy.ZP->Z[:, 0:3].copy()
A:scipy.cluster.hierarchy.chosen->set([])
A:scipy.cluster.hierarchy.must_chosen->set(range(0, 2 * n - 2))
A:scipy.cluster.hierarchy.T->numpy.asarray(T, order='c')
A:scipy.cluster.hierarchy.[R]->_copy_arrays_if_base_present([R])
A:scipy.cluster.hierarchy.[monocrit]->_copy_arrays_if_base_present([monocrit])
A:scipy.cluster.hierarchy.ML->numpy.zeros((n,), dtype='i')
A:scipy.cluster.hierarchy._dtextsortedkeys->list(_dtextsizes.keys())
A:scipy.cluster.hierarchy._drotationsortedkeys->list(_drotation.keys())
A:scipy.cluster.hierarchy.seen_before->set([])
A:scipy.cluster.hierarchy.ax->matplotlib.pylab.gca()
A:scipy.cluster.hierarchy.iv_ticks->numpy.arange(5, len(ivl) * 10 + 5, 10)
A:scipy.cluster.hierarchy.colors_used->_remove_dups(color_list)
A:scipy.cluster.hierarchy.coll->matplotlib.collections.LineCollection(color_to_lines[color], colors=(color,))
A:scipy.cluster.hierarchy.e->Ellipse((x, y), width=1.0, height=dvw / 100)
A:scipy.cluster.hierarchy._link_line_colors->list(_link_line_colors_default)
A:scipy.cluster.hierarchy.p->int(p)
A:scipy.cluster.hierarchy.mh->max(Z[:, 2])
A:scipy.cluster.hierarchy.R['leaves_color_list']->_get_leaves_color_list(R)
A:scipy.cluster.hierarchy.aa->int(Z[i - n, 0])
A:scipy.cluster.hierarchy.ab->int(Z[i - n, 1])
A:scipy.cluster.hierarchy.(uiva, uwa, uah, uamd)->_dendrogram_calculate_info(Z=Z, p=p, truncate_mode=truncate_mode, color_threshold=color_threshold, get_leaves=get_leaves, orientation=orientation, labels=labels, count_sort=count_sort, distance_sort=distance_sort, show_leaf_counts=show_leaf_counts, i=ua, iv=iv, ivl=ivl, n=n, icoord_list=icoord_list, dcoord_list=dcoord_list, lvs=lvs, current_color=current_color, color_list=color_list, currently_below_threshold=currently_below_threshold, leaf_label_func=leaf_label_func, level=level + 1, contraction_marks=contraction_marks, link_color_func=link_color_func, above_threshold_color=above_threshold_color)
A:scipy.cluster.hierarchy.(uivb, uwb, ubh, ubmd)->_dendrogram_calculate_info(Z=Z, p=p, truncate_mode=truncate_mode, color_threshold=color_threshold, get_leaves=get_leaves, orientation=orientation, labels=labels, count_sort=count_sort, distance_sort=distance_sort, show_leaf_counts=show_leaf_counts, i=ub, iv=iv + uwa, ivl=ivl, n=n, icoord_list=icoord_list, dcoord_list=dcoord_list, lvs=lvs, current_color=current_color, color_list=color_list, currently_below_threshold=currently_below_threshold, leaf_label_func=leaf_label_func, level=level + 1, contraction_marks=contraction_marks, link_color_func=link_color_func, above_threshold_color=above_threshold_color)
A:scipy.cluster.hierarchy.max_dist->max(uamd, ubmd, h)
A:scipy.cluster.hierarchy.v->link_color_func(int(i))
A:scipy.cluster.hierarchy.T1->numpy.asarray(T1, order='c')
A:scipy.cluster.hierarchy.T2->numpy.asarray(T2, order='c')
A:scipy.cluster.hierarchy.MD->numpy.zeros((n - 1,))
A:scipy.cluster.hierarchy.MI->numpy.zeros((n - 1,))
A:scipy.cluster.hierarchy.[Z, R]->_copy_arrays_if_base_present([Z, R])
A:scipy.cluster.hierarchy.MR->numpy.zeros((n - 1,))
A:scipy.cluster.hierarchy.Cl->numpy.unique(T)
A:scipy.cluster.hierarchy.kk->len(Cl)
A:scipy.cluster.hierarchy.L->numpy.zeros((kk,), dtype='i')
A:scipy.cluster.hierarchy.M->numpy.zeros((kk,), dtype='i')
A:scipy.cluster.hierarchy.[Z, T]->_copy_arrays_if_base_present([Z, T])
A:scipy.cluster.hierarchy.s->_hierarchy.leaders(Z, T, L, M, int(kk), int(n))
scipy.cluster.hierarchy.ClusterNode(self,id,left=None,right=None,dist=0,count=1)
scipy.cluster.hierarchy.ClusterNode.__eq__(self,node)
scipy.cluster.hierarchy.ClusterNode.__gt__(self,node)
scipy.cluster.hierarchy.ClusterNode.__init__(self,id,left=None,right=None,dist=0,count=1)
scipy.cluster.hierarchy.ClusterNode.__lt__(self,node)
scipy.cluster.hierarchy.ClusterNode.get_count(self)
scipy.cluster.hierarchy.ClusterNode.get_id(self)
scipy.cluster.hierarchy.ClusterNode.get_left(self)
scipy.cluster.hierarchy.ClusterNode.get_right(self)
scipy.cluster.hierarchy.ClusterNode.is_leaf(self)
scipy.cluster.hierarchy.ClusterNode.pre_order(self,func=lambdax:x.id)
scipy.cluster.hierarchy.ClusterWarning(UserWarning)
scipy.cluster.hierarchy._append_contraction_marks(Z,iv,i,n,contraction_marks)
scipy.cluster.hierarchy._append_contraction_marks_sub(Z,iv,i,n,contraction_marks)
scipy.cluster.hierarchy._append_nonsingleton_leaf_node(Z,p,n,level,lvs,ivl,leaf_label_func,i,labels,show_leaf_counts)
scipy.cluster.hierarchy._append_singleton_leaf_node(Z,p,n,level,lvs,ivl,leaf_label_func,i,labels)
scipy.cluster.hierarchy._check_hierarchy_not_all_clusters_used(Z)
scipy.cluster.hierarchy._check_hierarchy_uses_cluster_before_formed(Z)
scipy.cluster.hierarchy._check_hierarchy_uses_cluster_more_than_once(Z)
scipy.cluster.hierarchy._convert_to_bool(X)
scipy.cluster.hierarchy._convert_to_double(X)
scipy.cluster.hierarchy._copy_array_if_base_present(a)
scipy.cluster.hierarchy._copy_arrays_if_base_present(T)
scipy.cluster.hierarchy._dendrogram_calculate_info(Z,p,truncate_mode,color_threshold=np.inf,get_leaves=True,orientation='top',labels=None,count_sort=False,distance_sort=False,show_leaf_counts=False,i=-1,iv=0.0,ivl=[],n=0,icoord_list=[],dcoord_list=[],lvs=None,mhr=False,current_color=[],color_list=[],currently_below_threshold=[],leaf_label_func=None,level=0,contraction_marks=None,link_color_func=None,above_threshold_color='C0')
scipy.cluster.hierarchy._get_leaves_color_list(R)
scipy.cluster.hierarchy._get_tick_rotation(p)
scipy.cluster.hierarchy._get_tick_text_size(p)
scipy.cluster.hierarchy._order_cluster_tree(Z)
scipy.cluster.hierarchy._plot_dendrogram(icoords,dcoords,ivl,p,n,mh,orientation,no_labels,color_list,leaf_font_size=None,leaf_rotation=None,contraction_marks=None,ax=None,above_threshold_color='C0')
scipy.cluster.hierarchy._randdm(pnts)
scipy.cluster.hierarchy._remove_dups(L)
scipy.cluster.hierarchy._warning(s)
scipy.cluster.hierarchy.average(y)
scipy.cluster.hierarchy.centroid(y)
scipy.cluster.hierarchy.complete(y)
scipy.cluster.hierarchy.cophenet(Z,Y=None)
scipy.cluster.hierarchy.correspond(Z,Y)
scipy.cluster.hierarchy.cut_tree(Z,n_clusters=None,height=None)
scipy.cluster.hierarchy.dendrogram(Z,p=30,truncate_mode=None,color_threshold=None,get_leaves=True,orientation='top',labels=None,count_sort=False,distance_sort=False,show_leaf_counts=True,no_plot=False,no_labels=False,leaf_font_size=None,leaf_rotation=None,leaf_label_func=None,show_contracted=False,link_color_func=None,ax=None,above_threshold_color='C0')
scipy.cluster.hierarchy.fcluster(Z,t,criterion='inconsistent',depth=2,R=None,monocrit=None)
scipy.cluster.hierarchy.fclusterdata(X,t,criterion='inconsistent',metric='euclidean',depth=2,method='single',R=None)
scipy.cluster.hierarchy.from_mlab_linkage(Z)
scipy.cluster.hierarchy.inconsistent(Z,d=2)
scipy.cluster.hierarchy.is_isomorphic(T1,T2)
scipy.cluster.hierarchy.is_monotonic(Z)
scipy.cluster.hierarchy.is_valid_im(R,warning=False,throw=False,name=None)
scipy.cluster.hierarchy.is_valid_linkage(Z,warning=False,throw=False,name=None)
scipy.cluster.hierarchy.leaders(Z,T)
scipy.cluster.hierarchy.leaves_list(Z)
scipy.cluster.hierarchy.linkage(y,method='single',metric='euclidean',optimal_ordering=False)
scipy.cluster.hierarchy.maxRstat(Z,R,i)
scipy.cluster.hierarchy.maxdists(Z)
scipy.cluster.hierarchy.maxinconsts(Z,R)
scipy.cluster.hierarchy.median(y)
scipy.cluster.hierarchy.num_obs_linkage(Z)
scipy.cluster.hierarchy.optimal_leaf_ordering(Z,y,metric='euclidean')
scipy.cluster.hierarchy.set_link_color_palette(palette)
scipy.cluster.hierarchy.single(y)
scipy.cluster.hierarchy.to_mlab_linkage(Z)
scipy.cluster.hierarchy.to_tree(Z,rd=False)
scipy.cluster.hierarchy.ward(y)
scipy.cluster.hierarchy.weighted(y)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/cluster/__init__.py----------------------------------------
A:scipy.cluster.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/cluster/tests/test_disjoint_set.py----------------------------------------
A:scipy.cluster.tests.test_disjoint_set.k->len(string.ascii_letters)
A:scipy.cluster.tests.test_disjoint_set.tokens->numpy.array(tokens, dtype=object)
A:scipy.cluster.tests.test_disjoint_set.rng->numpy.random.RandomState(seed=0)
A:scipy.cluster.tests.test_disjoint_set.size->numpy.random.RandomState(seed=0).randint(1, 3)
A:scipy.cluster.tests.test_disjoint_set.element->numpy.random.RandomState(seed=0).choice(tokens, size)
A:scipy.cluster.tests.test_disjoint_set.elements[element]->len(elements)
A:scipy.cluster.tests.test_disjoint_set.elements->get_elements(n)
A:scipy.cluster.tests.test_disjoint_set.dis->DisjointSet(elements)
A:scipy.cluster.tests.test_disjoint_set.dis1->DisjointSet(elements)
A:scipy.cluster.tests.test_disjoint_set.dis2->DisjointSet()
A:scipy.cluster.tests.test_disjoint_set.indices->numpy.arange(n)
A:scipy.cluster.tests.test_disjoint_set.(r1, r2)->numpy.random.RandomState(seed=0).randint(0, k, size=2)
A:scipy.cluster.tests.test_disjoint_set.expected->list(expected.values())
scipy.cluster.tests.test_disjoint_set.generate_random_token()
scipy.cluster.tests.test_disjoint_set.get_elements(n)
scipy.cluster.tests.test_disjoint_set.test_add(n)
scipy.cluster.tests.test_disjoint_set.test_binary_tree(kmax)
scipy.cluster.tests.test_disjoint_set.test_contains(n)
scipy.cluster.tests.test_disjoint_set.test_element_not_present()
scipy.cluster.tests.test_disjoint_set.test_equal_size_ordering(n,order)
scipy.cluster.tests.test_disjoint_set.test_init()
scipy.cluster.tests.test_disjoint_set.test_len()
scipy.cluster.tests.test_disjoint_set.test_linear_union_sequence(n,direction)
scipy.cluster.tests.test_disjoint_set.test_self_unions(n)
scipy.cluster.tests.test_disjoint_set.test_subsets(n)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/cluster/tests/test_vq.py----------------------------------------
A:scipy.cluster.tests.test_vq.TESTDATA_2D->numpy.array([-2.2, 1.17, -1.63, 1.69, -2.04, 4.38, -3.09, 0.95, -1.7, 4.79, -1.68, 0.68, -2.26, 3.34, -2.29, 2.55, -1.72, -0.72, -1.99, 2.34, -2.75, 3.43, -2.45, 2.41, -4.26, 3.65, -1.57, 1.87, -1.96, 4.03, -3.01, 3.86, -2.53, 1.28, -4.0, 3.95, -1.62, 1.25, -3.42, 3.17, -1.17, 0.12, -3.03, -0.27, -2.07, -0.55, -1.17, 1.34, -2.82, 3.08, -2.44, 0.24, -1.71, 2.48, -5.23, 4.29, -2.08, 3.69, -1.89, 3.62, -2.09, 0.26, -0.92, 1.07, -2.25, 0.88, -2.25, 2.02, -4.31, 3.86, -2.03, 3.42, -2.76, 0.3, -2.48, -0.29, -3.42, 3.21, -2.3, 1.73, -2.84, 0.69, -1.81, 2.48, -5.24, 4.52, -2.8, 1.31, -1.67, -2.34, -1.18, 2.17, -2.17, 2.82, -1.85, 2.25, -2.45, 1.86, -6.79, 3.94, -2.33, 1.89, -1.55, 2.08, -1.36, 0.93, -2.51, 2.74, -2.39, 3.92, -3.33, 2.99, -2.06, -0.9, -2.83, 3.35, -2.59, 3.05, -2.36, 1.85, -1.69, 1.8, -1.39, 0.66, -2.06, 0.38, -1.47, 0.44, -4.68, 3.77, -5.58, 3.44, -2.29, 2.24, -1.04, -0.38, -1.85, 4.23, -2.88, 0.73, -2.59, 1.39, -1.34, 1.75, -1.95, 1.3, -2.45, 3.09, -1.99, 3.41, -5.55, 5.21, -1.73, 2.52, -2.17, 0.85, -2.06, 0.49, -2.54, 2.07, -2.03, 1.3, -3.23, 3.09, -1.55, 1.44, -0.81, 1.1, -2.99, 2.92, -1.59, 2.18, -2.45, -0.73, -3.12, -1.3, -2.83, 0.2, -2.77, 3.24, -1.98, 1.6, -4.59, 3.39, -4.85, 3.75, -2.25, 1.71, -3.28, 3.38, -1.74, 0.88, -2.41, 1.92, -2.24, 1.19, -2.48, 1.06, -1.68, -0.62, -1.3, 0.39, -1.78, 2.35, -3.54, 2.44, -1.32, 0.66, -2.38, 2.76, -2.35, 3.95, -1.86, 4.32, -2.01, -1.23, -1.79, 2.76, -2.13, -0.13, -5.25, 3.84, -2.24, 1.59, -4.85, 2.96, -2.41, 0.01, -0.43, 0.13, -3.92, 2.91, -1.75, -0.53, -1.69, 1.69, -1.09, 0.15, -2.11, 2.17, -1.53, 1.22, -2.1, -0.86, -2.56, 2.28, -3.02, 3.33, -1.12, 3.86, -2.18, -1.19, -3.03, 0.79, -0.83, 0.97, -3.19, 1.45, -1.34, 1.28, -2.52, 4.22, -4.53, 3.22, -1.97, 1.75, -2.36, 3.19, -0.83, 1.53, -1.59, 1.86, -2.17, 2.3, -1.63, 2.71, -2.03, 3.75, -2.57, -0.6, -1.47, 1.33, -1.95, 0.7, -1.65, 1.27, -1.42, 1.09, -3.0, 3.87, -2.51, 3.06, -2.6, 0.74, -1.08, -0.03, -2.44, 1.31, -2.65, 2.99, -1.84, 1.65, -4.76, 3.75, -2.07, 3.98, -2.4, 2.67, -2.21, 1.49, -1.21, 1.22, -5.29, 2.38, -2.85, 2.28, -5.6, 3.78, -2.7, 0.8, -1.81, 3.5, -3.75, 4.17, -1.29, 2.99, -5.92, 3.43, -1.83, 1.23, -1.24, -1.04, -2.56, 2.37, -3.26, 0.39, -4.63, 2.51, -4.52, 3.04, -1.7, 0.36, -1.41, 0.04, -2.1, 1.0, -1.87, 3.78, -4.32, 3.59, -2.24, 1.38, -1.99, -0.22, -1.87, 1.95, -0.84, 2.17, -5.38, 3.56, -1.27, 2.9, -1.79, 3.31, -5.47, 3.85, -1.44, 3.69, -2.02, 0.37, -1.29, 0.33, -2.34, 2.56, -1.74, -1.27, -1.97, 1.22, -2.51, -0.16, -1.64, -0.96, -2.99, 1.4, -1.53, 3.31, -2.24, 0.45, -2.46, 1.71, -2.88, 1.56, -1.63, 1.46, -1.41, 0.68, -1.96, 2.76, -1.61, 2.11]).reshape((200, 2))
A:scipy.cluster.tests.test_vq.X->X.astype(np.float32).astype(np.float32)
A:scipy.cluster.tests.test_vq.CODET1->numpy.array([[3.0, 3.0], [6.2, 4.0], [5.8, 1.8]])
A:scipy.cluster.tests.test_vq.CODET2->numpy.array([[11.0 / 3, 8.0 / 3], [6.75, 4.25], [6.25, 1.75]])
A:scipy.cluster.tests.test_vq.LABEL1->numpy.array([0, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1])
A:scipy.cluster.tests.test_vq.desired->numpy.array([[0.0, 1.0, 2.86666544], [0.0, 1.0, 1.32460034], [0.0, 1.0, 3.74382172]])
A:scipy.cluster.tests.test_vq.obs->tp([[0.9874451, bad_value], [0.62093317, 0.19406729], [0.87545741, 0.00735733], [0.85124403, 0.26499712], [0.4506759, 0.45464607]])
A:scipy.cluster.tests.test_vq.initc->numpy.concatenate([[X[0]], [X[1]], [X[2]]])
A:scipy.cluster.tests.test_vq.(label1, dist)->scipy.cluster._vq.vq(tp(X), tp(initc))
A:scipy.cluster.tests.test_vq.(tlabel1, tdist)->vq(tp(X), tp(initc))
A:scipy.cluster.tests.test_vq.(a, b)->scipy.cluster._vq.vq(data, initc)
A:scipy.cluster.tests.test_vq.(ta, tb)->py_vq(data[:, np.newaxis], initc[:, np.newaxis])
A:scipy.cluster.tests.test_vq.a->numpy.array([1, 2], dtype=int)
A:scipy.cluster.tests.test_vq.b->numpy.array([1, 2], dtype=int).astype(np.float32)
A:scipy.cluster.tests.test_vq.code_book->code_book.astype(np.float32).astype(np.float32)
A:scipy.cluster.tests.test_vq.(codes0, dis0)->scipy.cluster._vq.vq(X, code_book)
A:scipy.cluster.tests.test_vq.(codes1, dis1)->py_vq(X, code_book)
A:scipy.cluster.tests.test_vq.m1->numpy.random.randn(d)
A:scipy.cluster.tests.test_vq.m2->numpy.random.randn(d)
A:scipy.cluster.tests.test_vq.data->numpy.vstack([np.random.multivariate_normal(centers[0], np.eye(n_dim), size=size), np.random.multivariate_normal(centers[1], np.eye(n_dim), size=size)])
A:scipy.cluster.tests.test_vq.initk->numpy.array([[-1.8127404, -0.67128041], [2.04621601, 0.07401111], [-2.31149087, -0.05160469]])
A:scipy.cluster.tests.test_vq.code->numpy.concatenate([[X[0]], [X[1]], [X[2]]]).copy()
A:scipy.cluster.tests.test_vq.k->int(1000000.0)
A:scipy.cluster.tests.test_vq.rng->numpy.random.RandomState(1234)
A:scipy.cluster.tests.test_vq.init->_krandinit(data, k, rng)
A:scipy.cluster.tests.test_vq.orig_cov->numpy.cov(data, rowvar=0)
A:scipy.cluster.tests.test_vq.init_cov->numpy.cov(init, rowvar=0)
A:scipy.cluster.tests.test_vq.x->numpy.array([1, 2, 3, 4, 10], dtype=float)
A:scipy.cluster.tests.test_vq.res->kmeans(x, 1, thresh=1e+16)
A:scipy.cluster.tests.test_vq.prev_res->numpy.array([[-1.95266667, 0.898], [-3.153375, 3.3945]])
A:scipy.cluster.tests.test_vq.(res, _)->kmeans2(data, 2, minit='++')
A:scipy.cluster.tests.test_vq.centers->numpy.vstack([5 * np.ones(n_dim), -5 * np.ones(n_dim)])
A:scipy.cluster.tests.test_vq.(res1, _)->kmeans2(TESTDATA_2D, 2, minit=minit, seed=seed)
A:scipy.cluster.tests.test_vq.(res2, _)->kmeans2(TESTDATA_2D, 2, minit=minit, seed=seed)
scipy.cluster.tests.test_vq.TestKMean
scipy.cluster.tests.test_vq.TestKMean.test_kmeans2_empty(self)
scipy.cluster.tests.test_vq.TestKMean.test_kmeans2_high_dim(self)
scipy.cluster.tests.test_vq.TestKMean.test_kmeans2_init(self)
scipy.cluster.tests.test_vq.TestKMean.test_kmeans2_kpp_high_dim(self)
scipy.cluster.tests.test_vq.TestKMean.test_kmeans2_kpp_low_dim(self)
scipy.cluster.tests.test_vq.TestKMean.test_kmeans2_rank1(self)
scipy.cluster.tests.test_vq.TestKMean.test_kmeans2_rank1_2(self)
scipy.cluster.tests.test_vq.TestKMean.test_kmeans2_simple(self)
scipy.cluster.tests.test_vq.TestKMean.test_kmeans_0k(self)
scipy.cluster.tests.test_vq.TestKMean.test_kmeans_and_kmeans2_random_seed(self)
scipy.cluster.tests.test_vq.TestKMean.test_kmeans_large_thres(self)
scipy.cluster.tests.test_vq.TestKMean.test_kmeans_lost_cluster(self)
scipy.cluster.tests.test_vq.TestKMean.test_kmeans_simple(self)
scipy.cluster.tests.test_vq.TestKMean.test_krandinit(self)
scipy.cluster.tests.test_vq.TestKMean.test_large_features(self)
scipy.cluster.tests.test_vq.TestVq
scipy.cluster.tests.test_vq.TestVq.test__vq_invalid_type(self)
scipy.cluster.tests.test_vq.TestVq.test__vq_sametype(self)
scipy.cluster.tests.test_vq.TestVq.test_py_vq(self)
scipy.cluster.tests.test_vq.TestVq.test_vq(self)
scipy.cluster.tests.test_vq.TestVq.test_vq_1d(self)
scipy.cluster.tests.test_vq.TestVq.test_vq_large_features(self)
scipy.cluster.tests.test_vq.TestVq.test_vq_large_nfeat(self)
scipy.cluster.tests.test_vq.TestWhiten
scipy.cluster.tests.test_vq.TestWhiten.test_whiten(self)
scipy.cluster.tests.test_vq.TestWhiten.test_whiten_not_finite(self)
scipy.cluster.tests.test_vq.TestWhiten.test_whiten_zero_std(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/cluster/tests/hierarchy_test_data.py----------------------------------------
A:scipy.cluster.tests.hierarchy_test_data.Q_X->array([[0.52656366, 0.31416019, 0.080065637], [0.75020518, 0.46029983, 0.89869646], [0.66546123, 0.69401142, 0.9104657], [0.96404759, 0.001430822, 0.73987422], [0.10815906, 0.55302879, 0.066380478], [0.93135913, 0.82542491, 0.95231544], [0.67808696, 0.34190397, 0.56148195], [0.98273094, 0.70460521, 0.087097863], [0.61469161, 0.046998923, 0.60240645], [0.58016126, 0.91735497, 0.58816385], [1.3824631, 1.9635816, 1.9443788], [2.1067586, 1.6714873, 1.3485448], [1.3988007, 1.6614205, 1.3222455], [1.7141046, 1.4917638, 1.4543217], [1.5410234, 1.8437495, 1.6465895], [2.0851248, 1.8452435, 2.1734085], [1.3074874, 1.5380165, 2.1600774], [1.414477, 1.9932907, 1.9910742], [1.6194349, 1.4770328, 1.8978816], [1.598806, 1.5498898, 1.5756335], [3.3724738, 2.6963531, 3.399817], [3.1370512, 3.3652809, 3.0608907], [3.2941325, 3.196195, 2.9070017], [2.6551051, 3.067859, 2.9719854], [3.3094104, 2.5928397, 2.5771411], [2.5955722, 3.3347737, 3.0879319], [2.5820618, 3.4161567, 3.2644199], [2.71127, 2.7703245, 2.634665], [2.7961785, 3.2547372, 3.4180156], [2.6474175, 2.5453804, 3.2535411]])
A:scipy.cluster.tests.hierarchy_test_data.ytdist->array([662.0, 877.0, 255.0, 412.0, 996.0, 295.0, 468.0, 268.0, 400.0, 754.0, 564.0, 138.0, 219.0, 869.0, 669.0])
A:scipy.cluster.tests.hierarchy_test_data.linkage_ytdist_single->array([[2.0, 5.0, 138.0, 2.0], [3.0, 4.0, 219.0, 2.0], [0.0, 7.0, 255.0, 3.0], [1.0, 8.0, 268.0, 4.0], [6.0, 9.0, 295.0, 6.0]])
A:scipy.cluster.tests.hierarchy_test_data.linkage_ytdist_complete->array([[2.0, 5.0, 138.0, 2.0], [3.0, 4.0, 219.0, 2.0], [1.0, 6.0, 400.0, 3.0], [0.0, 7.0, 412.0, 3.0], [8.0, 9.0, 996.0, 6.0]])
A:scipy.cluster.tests.hierarchy_test_data.linkage_ytdist_average->array([[2.0, 5.0, 138.0, 2.0], [3.0, 4.0, 219.0, 2.0], [0.0, 7.0, 333.5, 3.0], [1.0, 6.0, 347.5, 3.0], [8.0, 9.0, 680.77777778, 6.0]])
A:scipy.cluster.tests.hierarchy_test_data.linkage_ytdist_weighted->array([[2.0, 5.0, 138.0, 2.0], [3.0, 4.0, 219.0, 2.0], [0.0, 7.0, 333.5, 3.0], [1.0, 6.0, 347.5, 3.0], [8.0, 9.0, 670.125, 6.0]])
A:scipy.cluster.tests.hierarchy_test_data.linkage_ytdist_single_olo->array([[5.0, 2.0, 138.0, 2.0], [4.0, 3.0, 219.0, 2.0], [7.0, 0.0, 255.0, 3.0], [1.0, 8.0, 268.0, 4.0], [6.0, 9.0, 295.0, 6.0]])
A:scipy.cluster.tests.hierarchy_test_data.X->array([[1.43054825, -7.5693489], [6.95887839, 6.82293382], [2.87137846, -9.68248579], [7.87974764, -6.05485803], [8.24018364, -6.09495602], [7.39020262, 8.54004355]])
A:scipy.cluster.tests.hierarchy_test_data.linkage_X_centroid->array([[3.0, 4.0, 0.36265956, 2.0], [1.0, 5.0, 1.77045373, 2.0], [0.0, 2.0, 2.55760419, 2.0], [6.0, 8.0, 6.43614494, 4.0], [7.0, 9.0, 15.17363237, 6.0]])
A:scipy.cluster.tests.hierarchy_test_data.linkage_X_median->array([[3.0, 4.0, 0.36265956, 2.0], [1.0, 5.0, 1.77045373, 2.0], [0.0, 2.0, 2.55760419, 2.0], [6.0, 8.0, 6.43614494, 4.0], [7.0, 9.0, 15.17363237, 6.0]])
A:scipy.cluster.tests.hierarchy_test_data.linkage_X_ward->array([[3.0, 4.0, 0.36265956, 2.0], [1.0, 5.0, 1.77045373, 2.0], [0.0, 2.0, 2.55760419, 2.0], [6.0, 8.0, 9.10208346, 4.0], [7.0, 9.0, 24.7784379, 6.0]])
A:scipy.cluster.tests.hierarchy_test_data.linkage_X_ward_olo->array([[4.0, 3.0, 0.36265956, 2.0], [5.0, 1.0, 1.77045373, 2.0], [2.0, 0.0, 2.55760419, 2.0], [6.0, 8.0, 9.10208346, 4.0], [7.0, 9.0, 24.7784379, 6.0]])


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/cluster/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/cluster/tests/test_hierarchy.py----------------------------------------
A:scipy.cluster.tests.test_hierarchy.y->numpy.random.rand(i * (i - 1) // 2)
A:scipy.cluster.tests.test_hierarchy.Z->optimal_leaf_ordering(linkage(hierarchy_test_data.X, 'ward'), hierarchy_test_data.X)
A:scipy.cluster.tests.test_hierarchy.expectedZ->getattr(hierarchy_test_data, 'linkage_ytdist_single_olo')
A:scipy.cluster.tests.test_hierarchy.rng->numpy.random.RandomState(0)
A:scipy.cluster.tests.test_hierarchy.X->numpy.random.randn(nobs, 4)
A:scipy.cluster.tests.test_hierarchy.d->dendrogram(z, no_plot=True)
A:scipy.cluster.tests.test_hierarchy.Z_trivial->scipy.cluster.hierarchy._hierarchy.linkage(d, n, code)
A:scipy.cluster.tests.test_hierarchy.expectedM->numpy.array([268, 295, 255, 255, 295, 295, 268, 268, 295, 295, 295, 138, 219, 295, 295])
A:scipy.cluster.tests.test_hierarchy.M->cophenet(Z)
A:scipy.cluster.tests.test_hierarchy.(c, M)->cophenet(Z, hierarchy_test_data.ytdist)
A:scipy.cluster.tests.test_hierarchy.Zm->numpy.asarray([[3, 6, 138], [4, 5, 219], [1, 8, 255], [2, 9, 268], [7, 10, 295]])
A:scipy.cluster.tests.test_hierarchy.T->fcluster(Z, criterion='maxclust', t=3)
A:scipy.cluster.tests.test_hierarchy.Y->pdist(X)
A:scipy.cluster.tests.test_hierarchy.L->leaders(Z, T)
A:scipy.cluster.tests.test_hierarchy.a->numpy.int_(np.random.rand(nobs) * nclusters)
A:scipy.cluster.tests.test_hierarchy.b->numpy.zeros(a.size, dtype=np.int_)
A:scipy.cluster.tests.test_hierarchy.P->numpy.random.permutation(nclusters)
A:scipy.cluster.tests.test_hierarchy.Q->numpy.random.permutation(nobs)
A:scipy.cluster.tests.test_hierarchy.R->dendrogram(Z, no_plot=True, above_threshold_color='g', color_threshold=250)
A:scipy.cluster.tests.test_hierarchy.node->to_tree(Z)
A:scipy.cluster.tests.test_hierarchy.y2->numpy.random.rand(j * (j - 1) // 2)
A:scipy.cluster.tests.test_hierarchy.Z2->linkage([[0, 1], [0, 0]], method='single', metric='euclidean')
A:scipy.cluster.tests.test_hierarchy.MD->maxRstat(Z, R, 1)
A:scipy.cluster.tests.test_hierarchy.expectedMD->calculate_maximum_inconsistencies(Z, R, 1)
A:scipy.cluster.tests.test_hierarchy.labels->numpy.array([1, 3, 2, 6, 4, 5])
A:scipy.cluster.tests.test_hierarchy.result1->dendrogram(Z, labels=labels, no_plot=True)
A:scipy.cluster.tests.test_hierarchy.result2->dendrogram(Z, labels=labels.tolist(), no_plot=True)
A:scipy.cluster.tests.test_hierarchy.link->numpy.array([[0, 1, 1.0, 4], [2, 3, 1.0, 5], [4, 5, 2.0, 6]])
A:scipy.cluster.tests.test_hierarchy.fig->matplotlib.pyplot.figure()
A:scipy.cluster.tests.test_hierarchy.ax->matplotlib.pyplot.figure().add_subplot(221)
A:scipy.cluster.tests.test_hierarchy.R1->dendrogram(Z, ax=ax, orientation=orientation)
A:scipy.cluster.tests.test_hierarchy.R2->dendrogram(Z, orientation=orientation)
A:scipy.cluster.tests.test_hierarchy.x->numpy.array([[1, 0, 0], [0, 0, 1.1], [0, 2, 0], [0, 0, 1], [0, 1, 0], [0, 1, 0]])
A:scipy.cluster.tests.test_hierarchy.z->linkage(x, 'single')
A:scipy.cluster.tests.test_hierarchy.B->numpy.zeros((n - 1,))
A:scipy.cluster.tests.test_hierarchy.q->numpy.zeros((3,))
A:scipy.cluster.tests.test_hierarchy.B[i]->numpy.zeros((3,)).max()
A:scipy.cluster.tests.test_hierarchy.Z1->linkage([1], method='single', metric='euclidean')
A:scipy.cluster.tests.test_hierarchy.tree->to_tree(Z)
A:scipy.cluster.tests.test_hierarchy.cutree->cut_tree(Z)
A:scipy.cluster.tests.test_hierarchy.nodes->_order_cluster_tree(Z)
A:scipy.cluster.tests.test_hierarchy.heights->numpy.array([node.dist for node in nodes])
A:scipy.cluster.tests.test_hierarchy.values->numpy.array([2, -1, 0, -1.5, 3])
A:scipy.cluster.tests.test_hierarchy.heap->Heap(values)
A:scipy.cluster.tests.test_hierarchy.pair->Heap(values).get_min()
scipy.cluster.tests.test_hierarchy.TestCopheneticDistance
scipy.cluster.tests.test_hierarchy.TestCopheneticDistance.test_linkage_cophenet_tdist_Z(self)
scipy.cluster.tests.test_hierarchy.TestCopheneticDistance.test_linkage_cophenet_tdist_Z_Y(self)
scipy.cluster.tests.test_hierarchy.TestCorrespond
scipy.cluster.tests.test_hierarchy.TestCorrespond.test_correspond_2_and_up(self)
scipy.cluster.tests.test_hierarchy.TestCorrespond.test_correspond_4_and_up(self)
scipy.cluster.tests.test_hierarchy.TestCorrespond.test_correspond_4_and_up_2(self)
scipy.cluster.tests.test_hierarchy.TestCorrespond.test_correspond_empty(self)
scipy.cluster.tests.test_hierarchy.TestCorrespond.test_num_obs_linkage_multi_matrix(self)
scipy.cluster.tests.test_hierarchy.TestDendrogram
scipy.cluster.tests.test_hierarchy.TestDendrogram.check_dendrogram_plot(self,orientation)
scipy.cluster.tests.test_hierarchy.TestDendrogram.test_dendrogram_colors(self)
scipy.cluster.tests.test_hierarchy.TestDendrogram.test_dendrogram_leaf_colors(self)
scipy.cluster.tests.test_hierarchy.TestDendrogram.test_dendrogram_leaf_colors_zero_dist(self)
scipy.cluster.tests.test_hierarchy.TestDendrogram.test_dendrogram_plot(self)
scipy.cluster.tests.test_hierarchy.TestDendrogram.test_dendrogram_single_linkage_tdist(self)
scipy.cluster.tests.test_hierarchy.TestDendrogram.test_dendrogram_truncate_mode(self)
scipy.cluster.tests.test_hierarchy.TestDendrogram.test_labels_as_array_or_list(self)
scipy.cluster.tests.test_hierarchy.TestDendrogram.test_valid_label_size(self)
scipy.cluster.tests.test_hierarchy.TestDendrogram.test_valid_orientation(self)
scipy.cluster.tests.test_hierarchy.TestFcluster
scipy.cluster.tests.test_hierarchy.TestFcluster.check_fcluster(self,t,criterion)
scipy.cluster.tests.test_hierarchy.TestFcluster.check_fcluster_maxclust_monocrit(self,t)
scipy.cluster.tests.test_hierarchy.TestFcluster.check_fcluster_monocrit(self,t)
scipy.cluster.tests.test_hierarchy.TestFcluster.check_fclusterdata(self,t,criterion)
scipy.cluster.tests.test_hierarchy.TestFcluster.test_fcluster(self)
scipy.cluster.tests.test_hierarchy.TestFcluster.test_fcluster_monocrit(self)
scipy.cluster.tests.test_hierarchy.TestFcluster.test_fclusterdata(self)
scipy.cluster.tests.test_hierarchy.TestInconsistent
scipy.cluster.tests.test_hierarchy.TestInconsistent.check_inconsistent_tdist(self,depth)
scipy.cluster.tests.test_hierarchy.TestInconsistent.test_inconsistent_tdist(self)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.help_is_isomorphic_randperm(self,nobs,nclusters,noniso=False,nerrors=0)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.test_is_isomorphic_1(self)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.test_is_isomorphic_2(self)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.test_is_isomorphic_3(self)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.test_is_isomorphic_4A(self)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.test_is_isomorphic_4B(self)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.test_is_isomorphic_4C(self)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.test_is_isomorphic_5(self)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.test_is_isomorphic_6(self)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.test_is_isomorphic_7(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_1x4(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_2x4_F(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_2x4_T(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_3x4_F1(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_3x4_F2(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_3x4_F3(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_3x4_T(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_Q_linkage(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_empty(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_tdist_linkage1(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_tdist_linkage2(self)
scipy.cluster.tests.test_hierarchy.TestIsValidInconsistent
scipy.cluster.tests.test_hierarchy.TestIsValidInconsistent.check_is_valid_im_various_size(self,nrow,ncol,valid)
scipy.cluster.tests.test_hierarchy.TestIsValidInconsistent.test_is_valid_im_4_and_up(self)
scipy.cluster.tests.test_hierarchy.TestIsValidInconsistent.test_is_valid_im_4_and_up_neg_dist(self)
scipy.cluster.tests.test_hierarchy.TestIsValidInconsistent.test_is_valid_im_4_and_up_neg_index_left(self)
scipy.cluster.tests.test_hierarchy.TestIsValidInconsistent.test_is_valid_im_4_and_up_neg_index_right(self)
scipy.cluster.tests.test_hierarchy.TestIsValidInconsistent.test_is_valid_im_empty(self)
scipy.cluster.tests.test_hierarchy.TestIsValidInconsistent.test_is_valid_im_int_type(self)
scipy.cluster.tests.test_hierarchy.TestIsValidInconsistent.test_is_valid_im_various_size(self)
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage.check_is_valid_linkage_various_size(self,nrow,ncol,valid)
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage.test_is_valid_linkage_4_and_up(self)
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage.test_is_valid_linkage_4_and_up_neg_counts(self)
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage.test_is_valid_linkage_4_and_up_neg_dist(self)
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage.test_is_valid_linkage_4_and_up_neg_index_left(self)
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage.test_is_valid_linkage_4_and_up_neg_index_right(self)
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage.test_is_valid_linkage_empty(self)
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage.test_is_valid_linkage_int_type(self)
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage.test_is_valid_linkage_various_size(self)
scipy.cluster.tests.test_hierarchy.TestLeaders
scipy.cluster.tests.test_hierarchy.TestLeaders.test_leaders_single(self)
scipy.cluster.tests.test_hierarchy.TestLeavesList
scipy.cluster.tests.test_hierarchy.TestLeavesList.check_leaves_list_Q(self,method)
scipy.cluster.tests.test_hierarchy.TestLeavesList.test_Q_subtree_pre_order(self)
scipy.cluster.tests.test_hierarchy.TestLeavesList.test_leaves_list_1x4(self)
scipy.cluster.tests.test_hierarchy.TestLeavesList.test_leaves_list_2x4(self)
scipy.cluster.tests.test_hierarchy.TestLeavesList.test_leaves_list_Q(self)
scipy.cluster.tests.test_hierarchy.TestLinkage
scipy.cluster.tests.test_hierarchy.TestLinkage.check_linkage_q(self,method)
scipy.cluster.tests.test_hierarchy.TestLinkage.check_linkage_tdist(self,method)
scipy.cluster.tests.test_hierarchy.TestLinkage.test_compare_with_trivial(self)
scipy.cluster.tests.test_hierarchy.TestLinkage.test_linkage_X(self)
scipy.cluster.tests.test_hierarchy.TestLinkage.test_linkage_empty_distance_matrix(self)
scipy.cluster.tests.test_hierarchy.TestLinkage.test_linkage_non_finite_elements_in_distance_matrix(self)
scipy.cluster.tests.test_hierarchy.TestLinkage.test_linkage_tdist(self)
scipy.cluster.tests.test_hierarchy.TestLinkage.test_optimal_leaf_ordering(self)
scipy.cluster.tests.test_hierarchy.TestLinkageTies
scipy.cluster.tests.test_hierarchy.TestLinkageTies.check_linkage_ties(self,method)
scipy.cluster.tests.test_hierarchy.TestLinkageTies.test_linkage_ties(self)
scipy.cluster.tests.test_hierarchy.TestMLabLinkageConversion
scipy.cluster.tests.test_hierarchy.TestMLabLinkageConversion.test_mlab_linkage_conversion_empty(self)
scipy.cluster.tests.test_hierarchy.TestMLabLinkageConversion.test_mlab_linkage_conversion_multiple_rows(self)
scipy.cluster.tests.test_hierarchy.TestMLabLinkageConversion.test_mlab_linkage_conversion_single_row(self)
scipy.cluster.tests.test_hierarchy.TestMaxDists
scipy.cluster.tests.test_hierarchy.TestMaxDists.check_maxdists_Q_linkage(self,method)
scipy.cluster.tests.test_hierarchy.TestMaxDists.test_maxdists_Q_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxDists.test_maxdists_empty_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxDists.test_maxdists_one_cluster_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxInconsts
scipy.cluster.tests.test_hierarchy.TestMaxInconsts.check_maxinconsts_Q_linkage(self,method)
scipy.cluster.tests.test_hierarchy.TestMaxInconsts.test_maxinconsts_Q_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxInconsts.test_maxinconsts_difrow_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxInconsts.test_maxinconsts_empty_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxInconsts.test_maxinconsts_one_cluster_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat
scipy.cluster.tests.test_hierarchy.TestMaxRStat.check_maxRstat_Q_linkage(self,method,i)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.check_maxRstat_difrow_linkage(self,i)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.check_maxRstat_empty_linkage(self,i)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.check_maxRstat_invalid_index(self,i)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.check_maxRstat_one_cluster_linkage(self,i)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_Q_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_difrow_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_empty_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_invalid_index(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_one_cluster_linkage(self)
scipy.cluster.tests.test_hierarchy.TestNumObsLinkage
scipy.cluster.tests.test_hierarchy.TestNumObsLinkage.test_num_obs_linkage_1x4(self)
scipy.cluster.tests.test_hierarchy.TestNumObsLinkage.test_num_obs_linkage_2x4(self)
scipy.cluster.tests.test_hierarchy.TestNumObsLinkage.test_num_obs_linkage_4_and_up(self)
scipy.cluster.tests.test_hierarchy.TestNumObsLinkage.test_num_obs_linkage_empty(self)
scipy.cluster.tests.test_hierarchy.calculate_maximum_distances(Z)
scipy.cluster.tests.test_hierarchy.calculate_maximum_inconsistencies(Z,R,k=3)
scipy.cluster.tests.test_hierarchy.test_2x2_linkage()
scipy.cluster.tests.test_hierarchy.test_Heap()
scipy.cluster.tests.test_hierarchy.test_cut_tree()
scipy.cluster.tests.test_hierarchy.test_euclidean_linkage_value_error()
scipy.cluster.tests.test_hierarchy.test_node_compare()
scipy.cluster.tests.test_hierarchy.test_optimal_leaf_ordering()
scipy.cluster.tests.test_hierarchy.test_unsupported_uncondensed_distance_matrix_linkage_warning()
scipy.cluster.tests.test_hierarchy.within_tol(a,b,tol)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/_quadrature.py----------------------------------------
A:scipy.integrate._quadrature.g->functools.update_wrapper(g, f)
A:scipy.integrate._quadrature.trapezoid->_copy_func(trapezoid)
A:scipy.integrate._quadrature.trapezoid.__doc__->_copy_func(trapezoid).__doc__.replace('sum, cumsum', 'numpy.cumsum')
A:scipy.integrate._quadrature._cached_roots_legendre.cache[n]->roots_legendre(n)
A:scipy.integrate._quadrature._cached_roots_legendre.cache->dict()
A:scipy.integrate._quadrature.(x, w)->_cached_roots_legendre(n)
A:scipy.integrate._quadrature.x->scipy.stats.qmc.scale(sample, a, b)
A:scipy.integrate._quadrature.y0->func(x[0], *args)
A:scipy.integrate._quadrature.n->len(x)
A:scipy.integrate._quadrature.dtype->getattr(y0, 'dtype', type(y0))
A:scipy.integrate._quadrature.output->numpy.empty((n,), dtype=dtype)
A:scipy.integrate._quadrature.output[i]->func(x[i], *args)
A:scipy.integrate._quadrature.vfunc->vectorize1(function, args, vec_func=vec_func)
A:scipy.integrate._quadrature.maxiter->max(miniter + 1, maxiter)
A:scipy.integrate._quadrature.err->abs(result - lastresult)
A:scipy.integrate._quadrature.l->list(t)
A:scipy.integrate._quadrature.y->numpy.asarray(y)
A:scipy.integrate._quadrature.d->numpy.diff(x, axis=axis)
A:scipy.integrate._quadrature.nd->len(y.shape)
A:scipy.integrate._quadrature.slice1->tupleset(slice1, axis, 0)
A:scipy.integrate._quadrature.slice2->tupleset(slice2, axis, 1)
A:scipy.integrate._quadrature.res->numpy.concatenate([np.full(shape, initial, dtype=res.dtype), res], axis=axis)
A:scipy.integrate._quadrature.shape->list(res.shape)
A:scipy.integrate._quadrature.slice0->tupleset(slice_all, axis, 0)
A:scipy.integrate._quadrature.result->_basic_simpson(y, 0, N - 2, x, dx, axis)
A:scipy.integrate._quadrature.h->numpy.diff(x, axis=axis)
A:scipy.integrate._quadrature.sl0->tupleset(slice_all, axis, slice(start, stop, step))
A:scipy.integrate._quadrature.sl1->tupleset(slice_all, axis, slice(start + 1, stop + 1, step))
A:scipy.integrate._quadrature.h0->numpy.float64(h[sl0])
A:scipy.integrate._quadrature.h1->numpy.float64(h[sl1])
A:scipy.integrate._quadrature.h0divh1->numpy.true_divide(h0, h1, out=np.zeros_like(h0), where=h1 != 0)
A:scipy.integrate._quadrature.slicem1->tupleset(slice_all, axis, -1)
A:scipy.integrate._quadrature.slice_R->tupleset(slice_R, axis, slice(start, stop, step))
A:scipy.integrate._quadrature.s->numpy.sum(function(points), axis=0)
A:scipy.integrate._quadrature.ordsum->_difftrap(vfunc, interval, n)
A:scipy.integrate._quadrature.rn->numpy.arange(N + 1)
A:scipy.integrate._quadrature.nvec->numpy.arange(N + 1)
A:scipy.integrate._quadrature.Cinv->numpy.linalg.inv(C)
A:scipy.integrate._quadrature.fac->math.exp(fac)
A:scipy.integrate._quadrature.a->numpy.atleast_1d(a).copy()
A:scipy.integrate._quadrature.b->numpy.atleast_1d(b).copy()
A:scipy.integrate._quadrature.(a, b)->numpy.broadcast_arrays(a, b)
A:scipy.integrate._quadrature.n_points_int->numpy.int64(n_points)
A:scipy.integrate._quadrature.n_estimates_int->numpy.int64(n_estimates)
A:scipy.integrate._quadrature.qrng->type(qrng)(seed=rngs[i], **qrng._init_quad)
A:scipy.integrate._quadrature.rng_seed->getattr(qrng, 'rng_seed', None)
A:scipy.integrate._quadrature.rng->scipy.stats._qmc.check_random_state(rng_seed)
A:scipy.integrate._quadrature.QMCQuadResult->namedtuple('QMCQuadResult', ['integral', 'standard_error'])
A:scipy.integrate._quadrature.args->_qmc_quad_iv(func, a, b, n_points, n_estimates, qrng, log)
A:scipy.integrate._quadrature.A->numpy.prod(b - a)
A:scipy.integrate._quadrature.estimates->numpy.zeros(n_estimates)
A:scipy.integrate._quadrature.rngs->_rng_spawn(qrng.rng, n_estimates)
A:scipy.integrate._quadrature.sample->type(qrng)(seed=rngs[i], **qrng._init_quad).random(n_points)
A:scipy.integrate._quadrature.integrands->func(x)
A:scipy.integrate._quadrature.estimate->numpy.sum(integrands * dA)
A:scipy.integrate._quadrature.integral->numpy.mean(estimates)
A:scipy.integrate._quadrature.standard_error->scipy.stats.sem(estimates)
scipy.integrate.AccuracyWarning(Warning)
scipy.integrate._basic_simpson(y,start,stop,x,dx,axis)
scipy.integrate._cached_roots_legendre(n)
scipy.integrate._copy_func(f)
scipy.integrate._difftrap(function,interval,numtraps)
scipy.integrate._printresmat(function,interval,resmat)
scipy.integrate._qmc_quad_iv(func,a,b,n_points,n_estimates,qrng,log)
scipy.integrate._quadrature.AccuracyWarning(Warning)
scipy.integrate._quadrature._basic_simpson(y,start,stop,x,dx,axis)
scipy.integrate._quadrature._cached_roots_legendre(n)
scipy.integrate._quadrature._copy_func(f)
scipy.integrate._quadrature._difftrap(function,interval,numtraps)
scipy.integrate._quadrature._printresmat(function,interval,resmat)
scipy.integrate._quadrature._qmc_quad_iv(func,a,b,n_points,n_estimates,qrng,log)
scipy.integrate._quadrature._romberg_diff(b,c,k)
scipy.integrate._quadrature.cache_decorator(func:Callable)->CacheAttributes
scipy.integrate._quadrature.cumtrapz(y,x=None,dx=1.0,axis=-1,initial=None)
scipy.integrate._quadrature.cumulative_trapezoid(y,x=None,dx=1.0,axis=-1,initial=None)
scipy.integrate._quadrature.fixed_quad(func,a,b,args=(),n=5)
scipy.integrate._quadrature.newton_cotes(rn,equal=0)
scipy.integrate._quadrature.qmc_quad(func,a,b,*,n_points=1024,n_estimates=8,qrng=None,log=False,args=None)
scipy.integrate._quadrature.quadrature(func,a,b,args=(),tol=1.49e-08,rtol=1.49e-08,maxiter=50,vec_func=True,miniter=1)
scipy.integrate._quadrature.romb(y,dx=1.0,axis=-1,show=False)
scipy.integrate._quadrature.romberg(function,a,b,args=(),tol=1.48e-08,rtol=1.48e-08,show=False,divmax=10,vec_func=False)
scipy.integrate._quadrature.simps(y,x=None,dx=1.0,axis=-1,even='avg')
scipy.integrate._quadrature.simpson(y,x=None,dx=1.0,axis=-1,even='avg')
scipy.integrate._quadrature.trapz(y,x=None,dx=1.0,axis=-1)
scipy.integrate._quadrature.tupleset(t,i,value)
scipy.integrate._quadrature.vectorize1(func,args=(),vec_func=False)
scipy.integrate._romberg_diff(b,c,k)
scipy.integrate.cache_decorator(func:Callable)->CacheAttributes
scipy.integrate.cumtrapz(y,x=None,dx=1.0,axis=-1,initial=None)
scipy.integrate.cumulative_trapezoid(y,x=None,dx=1.0,axis=-1,initial=None)
scipy.integrate.fixed_quad(func,a,b,args=(),n=5)
scipy.integrate.newton_cotes(rn,equal=0)
scipy.integrate.qmc_quad(func,a,b,*,n_points=1024,n_estimates=8,qrng=None,log=False,args=None)
scipy.integrate.quadrature(func,a,b,args=(),tol=1.49e-08,rtol=1.49e-08,maxiter=50,vec_func=True,miniter=1)
scipy.integrate.romb(y,dx=1.0,axis=-1,show=False)
scipy.integrate.romberg(function,a,b,args=(),tol=1.48e-08,rtol=1.48e-08,show=False,divmax=10,vec_func=False)
scipy.integrate.simps(y,x=None,dx=1.0,axis=-1,even='avg')
scipy.integrate.simpson(y,x=None,dx=1.0,axis=-1,even='avg')
scipy.integrate.trapz(y,x=None,dx=1.0,axis=-1)
scipy.integrate.tupleset(t,i,value)
scipy.integrate.vectorize1(func,args=(),vec_func=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/_bvp.py----------------------------------------
A:scipy.integrate._bvp.f0->fun(x, y, p)
A:scipy.integrate._bvp.df_dy->numpy.transpose(df_dy, (2, 0, 1))
A:scipy.integrate._bvp.y_new->sol(x).copy()
A:scipy.integrate._bvp.f_new->fun(x, y, p_new)
A:scipy.integrate._bvp.df_dp->numpy.transpose(df_dp, (2, 0, 1))
A:scipy.integrate._bvp.p_new->numpy.asarray(p, dtype=dtype).copy()
A:scipy.integrate._bvp.bc0->bc(ya, yb, p)
A:scipy.integrate._bvp.dbc_dya->numpy.empty((n, n + k), dtype=dtype)
A:scipy.integrate._bvp.ya_new->ya.copy()
A:scipy.integrate._bvp.bc_new->bc(ya, yb, p_new)
A:scipy.integrate._bvp.dbc_dyb->numpy.empty((n, n + k), dtype=dtype)
A:scipy.integrate._bvp.yb_new->yb.copy()
A:scipy.integrate._bvp.dbc_dp->numpy.empty((k, n + k), dtype=dtype)
A:scipy.integrate._bvp.i_col->numpy.repeat(np.arange((m - 1) * n), n)
A:scipy.integrate._bvp.i_bc->numpy.repeat(np.arange((m - 1) * n, m * n + k), n)
A:scipy.integrate._bvp.j_bc->numpy.tile(np.arange(n), n + k)
A:scipy.integrate._bvp.i_p_col->numpy.repeat(np.arange((m - 1) * n), k)
A:scipy.integrate._bvp.j_p_col->numpy.tile(np.arange(m * n, m * n + k), (m - 1) * n)
A:scipy.integrate._bvp.i_p_bc->numpy.repeat(np.arange((m - 1) * n, m * n + k), k)
A:scipy.integrate._bvp.j_p_bc->numpy.tile(np.arange(m * n, m * n + k), n + k)
A:scipy.integrate._bvp.i->numpy.hstack((i_col, i_col, i_bc, i_bc, i_p_col, i_p_bc))
A:scipy.integrate._bvp.j->numpy.hstack((j_col, j_col + n, j_bc, j_bc + (m - 1) * n, j_p_col, j_p_bc))
A:scipy.integrate._bvp.out->numpy.empty((a.shape[0], a.shape[1], b.shape[2]))
A:scipy.integrate._bvp.out[i]->numpy.dot(a[i], b[i])
A:scipy.integrate._bvp.df_dy_middle->numpy.transpose(df_dy_middle, (2, 0, 1))
A:scipy.integrate._bvp.dPhi_dy_0->numpy.empty((m - 1, n, n), dtype=dtype)
A:scipy.integrate._bvp.T->stacked_matmul(df_dy_middle, df_dp[:-1] - df_dp[1:])
A:scipy.integrate._bvp.dPhi_dy_1->numpy.empty((m - 1, n, n), dtype=dtype)
A:scipy.integrate._bvp.dPhi_dy_1[:]->numpy.identity(n)
A:scipy.integrate._bvp.values->numpy.hstack((values, dPhi_dp.ravel(), dbc_dp.ravel()))
A:scipy.integrate._bvp.df_dp_middle->numpy.transpose(df_dp_middle, (2, 0, 1))
A:scipy.integrate._bvp.J->jac(y, p, y_middle, f, f_middle, bc_res)
A:scipy.integrate._bvp.f->fun_wrapped(x, y, p)
A:scipy.integrate._bvp.f_middle->fun(x[:-1] + 0.5 * h, y_middle, p)
A:scipy.integrate._bvp.(i_jac, j_jac)->compute_jac_indices(n, m, k)
A:scipy.integrate._bvp.(df_dy, df_dp)->fun_jac_p(x, y, p)
A:scipy.integrate._bvp.(df_dy_middle, df_dp_middle)->fun_jac(x_middle, y_middle, p)
A:scipy.integrate._bvp.(dbc_dya, dbc_dyb, dbc_dp)->bc_jac(ya, yb, p)
A:scipy.integrate._bvp.(col_res, y_middle, f, f_middle)->collocation_fun(fun_wrapped, y, p, x, h)
A:scipy.integrate._bvp.bc_res->bc_wrapped(y[:, 0], y[:, -1], p)
A:scipy.integrate._bvp.res->numpy.hstack((col_res.ravel(order='F'), bc_res))
A:scipy.integrate._bvp.LU->splu(J)
A:scipy.integrate._bvp.step->splu(J).solve(res)
A:scipy.integrate._bvp.cost->numpy.dot(step, step)
A:scipy.integrate._bvp.y_step->step[:m * n].reshape((n, m), order='F')
A:scipy.integrate._bvp.y_new[:, 0]->numpy.dot(B, y_new[:, 0])
A:scipy.integrate._bvp.step_new->splu(J).solve(res)
A:scipy.integrate._bvp.cost_new->numpy.dot(step_new, step_new)
A:scipy.integrate._bvp.y1->sol(x1)
A:scipy.integrate._bvp.y2->sol(x2)
A:scipy.integrate._bvp.y1_prime->sol(x1, 1)
A:scipy.integrate._bvp.y2_prime->sol(x2, 1)
A:scipy.integrate._bvp.f1->fun(x1, y1, p)
A:scipy.integrate._bvp.f2->fun(x2, y2, p)
A:scipy.integrate._bvp.r1->numpy.sum(np.real(r1 * np.conj(r1)), axis=0)
A:scipy.integrate._bvp.r2->numpy.sum(np.real(r2 * np.conj(r2)), axis=0)
A:scipy.integrate._bvp.r_middle->numpy.sum(np.real(r_middle * np.conj(r_middle)), axis=0)
A:scipy.integrate._bvp.c->numpy.moveaxis(c, 1, 0)
A:scipy.integrate._bvp.(dbc_dya, dbc_dyb)->bc_jac(ya, yb)
A:scipy.integrate._bvp.f[:, 0]->numpy.dot(D, f[:, 0])
A:scipy.integrate._bvp.df_dy[:, :, 0]->numpy.dot(D, df_dy[:, :, 0])
A:scipy.integrate._bvp.x->modify_mesh(x, insert_1, insert_2)
A:scipy.integrate._bvp.h->numpy.diff(x)
A:scipy.integrate._bvp.y->sol(x)
A:scipy.integrate._bvp.p->numpy.asarray(p, dtype=dtype)
A:scipy.integrate._bvp.S->numpy.asarray(S, dtype=dtype)
A:scipy.integrate._bvp.y[:, 0]->numpy.dot(B, y[:, 0])
A:scipy.integrate._bvp.D->pinv(np.identity(n) - S)
A:scipy.integrate._bvp.(fun_wrapped, bc_wrapped, fun_jac_wrapped, bc_jac_wrapped)->wrap_functions(fun, bc, fun_jac, bc_jac, k, a, S, D, dtype)
A:scipy.integrate._bvp.(col_fun, jac_sys)->prepare_sys(n, m, k, fun_wrapped, bc_wrapped, fun_jac_wrapped, bc_jac_wrapped, x, h)
A:scipy.integrate._bvp.(y, p, singular)->solve_newton(n, m, h, col_fun, bc_wrapped, jac_sys, y, p, B, tol, bc_tol)
A:scipy.integrate._bvp.max_bc_res->numpy.max(abs(bc_res))
A:scipy.integrate._bvp.sol->create_spline(y, f, x, h)
A:scipy.integrate._bvp.rms_res->estimate_rms_residuals(fun_wrapped, sol, x, h, p, r_middle, f_middle)
A:scipy.integrate._bvp.max_rms_res->numpy.max(rms_res)
A:scipy.integrate._bvp.(insert_1,)->numpy.nonzero((rms_res > tol) & (rms_res < 100 * tol))
A:scipy.integrate._bvp.(insert_2,)->numpy.nonzero(rms_res >= 100 * tol)
A:scipy.integrate._bvp.nodes_added->'({})'.format(nodes_added)
scipy.integrate._bvp.BVPResult(OptimizeResult)
scipy.integrate._bvp.collocation_fun(fun,y,p,x,h)
scipy.integrate._bvp.compute_jac_indices(n,m,k)
scipy.integrate._bvp.construct_global_jac(n,m,k,i_jac,j_jac,h,df_dy,df_dy_middle,df_dp,df_dp_middle,dbc_dya,dbc_dyb,dbc_dp)
scipy.integrate._bvp.create_spline(y,yp,x,h)
scipy.integrate._bvp.estimate_bc_jac(bc,ya,yb,p,bc0=None)
scipy.integrate._bvp.estimate_fun_jac(fun,x,y,p,f0=None)
scipy.integrate._bvp.estimate_rms_residuals(fun,sol,x,h,p,r_middle,f_middle)
scipy.integrate._bvp.modify_mesh(x,insert_1,insert_2)
scipy.integrate._bvp.prepare_sys(n,m,k,fun,bc,fun_jac,bc_jac,x,h)
scipy.integrate._bvp.print_iteration_header()
scipy.integrate._bvp.print_iteration_progress(iteration,residual,bc_residual,total_nodes,nodes_added)
scipy.integrate._bvp.solve_bvp(fun,bc,x,y,p=None,S=None,fun_jac=None,bc_jac=None,tol=0.001,max_nodes=1000,verbose=0,bc_tol=None)
scipy.integrate._bvp.solve_newton(n,m,h,col_fun,bc,jac,y,p,B,bvp_tol,bc_tol)
scipy.integrate._bvp.stacked_matmul(a,b)
scipy.integrate._bvp.wrap_functions(fun,bc,fun_jac,bc_jac,k,a,S,D,dtype)
scipy.integrate.solve_bvp(fun,bc,x,y,p=None,S=None,fun_jac=None,bc_jac=None,tol=0.001,max_nodes=1000,verbose=0,bc_tol=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/_quadpack_py.py----------------------------------------
A:scipy.integrate._quadpack_py.re_retval->quad(refunc, a, b, args, full_output, epsabs, epsrel, limit, points, weight, wvar, wopts, maxp1, limlst, complex_func=False)
A:scipy.integrate._quadpack_py.im_retval->quad(imfunc, a, b, args, full_output, epsabs, epsrel, limit, points, weight, wvar, wopts, maxp1, limlst, complex_func=False)
A:scipy.integrate._quadpack_py.retval->_quad_weight(func, a, b, args, full_output, epsabs, epsrel, limlst, limit, maxp1, weight, wvar, wopts)
A:scipy.integrate._quadpack_py.msg->'Number of break points ({:d}) must be less than subinterval limit ({:d})'.format(len(points), limit)
A:scipy.integrate._quadpack_py.the_points->numpy.concatenate((the_points, (0.0, 0.0)))
A:scipy.integrate._quadpack_py.depth->kwargs.pop('depth', 0)
A:scipy.integrate._quadpack_py.self.maxdepth->len(ranges)
A:scipy.integrate._quadpack_py.(low, high)->fn_range(*args)
A:scipy.integrate._quadpack_py.opt->dict(fn_opt(*args))
A:scipy.integrate._quadpack_py.f->partial(self.integrate, depth=depth + 1)
A:scipy.integrate._quadpack_py.quad_r->quad(f, low, high, args=args, full_output=self.full_output, **opt)
A:scipy.integrate._quadpack_py.self.abserr->max(self.abserr, abserr)
scipy.integrate.IntegrationWarning(UserWarning)
scipy.integrate._NQuad(self,func,ranges,opts,full_output)
scipy.integrate._NQuad.integrate(self,*args,**kwargs)
scipy.integrate._OptFunc(self,opt)
scipy.integrate._RangeFunc(self,range_)
scipy.integrate._quad(func,a,b,args,full_output,epsabs,epsrel,limit,points)
scipy.integrate._quad_weight(func,a,b,args,full_output,epsabs,epsrel,limlst,limit,maxp1,weight,wvar,wopts)
scipy.integrate._quadpack_py.IntegrationWarning(UserWarning)
scipy.integrate._quadpack_py._NQuad(self,func,ranges,opts,full_output)
scipy.integrate._quadpack_py._NQuad.__init__(self,func,ranges,opts,full_output)
scipy.integrate._quadpack_py._NQuad.integrate(self,*args,**kwargs)
scipy.integrate._quadpack_py._OptFunc(self,opt)
scipy.integrate._quadpack_py._OptFunc.__init__(self,opt)
scipy.integrate._quadpack_py._RangeFunc(self,range_)
scipy.integrate._quadpack_py._RangeFunc.__init__(self,range_)
scipy.integrate._quadpack_py._quad(func,a,b,args,full_output,epsabs,epsrel,limit,points)
scipy.integrate._quadpack_py._quad_weight(func,a,b,args,full_output,epsabs,epsrel,limlst,limit,maxp1,weight,wvar,wopts)
scipy.integrate._quadpack_py.dblquad(func,a,b,gfun,hfun,args=(),epsabs=1.49e-08,epsrel=1.49e-08)
scipy.integrate._quadpack_py.nquad(func,ranges,args=None,opts=None,full_output=False)
scipy.integrate._quadpack_py.quad(func,a,b,args=(),full_output=0,epsabs=1.49e-08,epsrel=1.49e-08,limit=50,points=None,weight=None,wvar=None,wopts=None,maxp1=50,limlst=50,complex_func=False)
scipy.integrate._quadpack_py.tplquad(func,a,b,gfun,hfun,qfun,rfun,args=(),epsabs=1.49e-08,epsrel=1.49e-08)
scipy.integrate.dblquad(func,a,b,gfun,hfun,args=(),epsabs=1.49e-08,epsrel=1.49e-08)
scipy.integrate.nquad(func,ranges,args=None,opts=None,full_output=False)
scipy.integrate.quad(func,a,b,args=(),full_output=0,epsabs=1.49e-08,epsrel=1.49e-08,limit=50,points=None,weight=None,wvar=None,wopts=None,maxp1=50,limlst=50,complex_func=False)
scipy.integrate.tplquad(func,a,b,gfun,hfun,qfun,rfun,args=(),epsabs=1.49e-08,epsrel=1.49e-08)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/_quad_vec.py----------------------------------------
A:scipy.integrate._quad_vec.f->functools.lru_cache(_quadrature.cache_size)(f)
A:scipy.integrate._quad_vec.self.__keys->dict(epsabs=epsabs, epsrel=epsrel, norm=norm, cache_size=cache_size, limit=limit, workers=workers, points=points, quadrature='gk15' if quadrature is None else quadrature, full_output=full_output).keys()
A:scipy.integrate._quad_vec.a->float(a)
A:scipy.integrate._quad_vec.b->float(b)
A:scipy.integrate._quad_vec.kwargs->dict(epsabs=epsabs, epsrel=epsrel, norm=norm, cache_size=cache_size, limit=limit, workers=workers, points=points, quadrature='gk15' if quadrature is None else quadrature, full_output=full_output)
A:scipy.integrate._quad_vec.f2->f(x2)
A:scipy.integrate._quad_vec.kwargs['points']->tuple((f2.get_t(xp) for xp in points))
A:scipy.integrate._quad_vec.res->quad_vec(f2, 1, 1, **kwargs)
A:scipy.integrate._quad_vec.p->float(p)
A:scipy.integrate._quad_vec.(ig, err, rnd)->_quadrature(x1, x2, f, norm_func)
A:scipy.integrate._quad_vec.global_error->float(err)
A:scipy.integrate._quad_vec.rounding_error->float(rnd)
A:scipy.integrate._quad_vec.interval_cache->LRUDict(cache_count)
A:scipy.integrate._quad_vec.interval_cache[x1, x2]->copy.copy(ig)
A:scipy.integrate._quad_vec.tol->max(epsabs, epsrel * norm_func(global_integral))
A:scipy.integrate._quad_vec.interval->heapq.heappop(intervals)
A:scipy.integrate._quad_vec.old_int->LRUDict(cache_count).pop((a, b), None)
A:scipy.integrate._quad_vec.res_arr->numpy.asarray(res)
A:scipy.integrate._quad_vec.dummy->numpy.full(res_arr.shape, np.nan, dtype=res_arr.dtype)
A:scipy.integrate._quad_vec.integrals->numpy.array([interval_cache.get((z[1], z[2]), dummy) for z in intervals], dtype=res_arr.dtype)
A:scipy.integrate._quad_vec.errors->numpy.array([-z[0] for z in intervals])
A:scipy.integrate._quad_vec.intervals->numpy.array([[z[1], z[2]] for z in intervals])
A:scipy.integrate._quad_vec.info->_Bunch(neval=neval, success=ier == CONVERGED, status=ier, message=status_msg[ier], intervals=intervals, integrals=integrals, errors=errors)
A:scipy.integrate._quad_vec.(s1, err1, round1)->_quadrature(a, c, f, norm_func)
A:scipy.integrate._quad_vec.(s2, err2, round2)->_quadrature(c, b, f, norm_func)
A:scipy.integrate._quad_vec.(old_int, _, _)->_quadrature(a, b, f, norm_func)
A:scipy.integrate._quad_vec.f1->f(x1)
A:scipy.integrate._quad_vec.f3->f(x3)
A:scipy.integrate._quad_vec.ff->f(c + h * x[i])
A:scipy.integrate._quad_vec.err->max(err, round_err)
A:scipy.integrate._quad_vec.dabs->float(norm_func(s_k_dabs * h))
A:scipy.integrate._quad_vec.round_err->float(norm_func(50 * eps * h * s_k_abs))
scipy.integrate._quad_vec.DoubleInfiniteFunc(self,func)
scipy.integrate._quad_vec.DoubleInfiniteFunc.__init__(self,func)
scipy.integrate._quad_vec.DoubleInfiniteFunc.get_t(self,x)
scipy.integrate._quad_vec.LRUDict(self,max_size)
scipy.integrate._quad_vec.LRUDict.__init__(self,max_size)
scipy.integrate._quad_vec.LRUDict.__setitem__(self,key,value)
scipy.integrate._quad_vec.LRUDict.update(self,other)
scipy.integrate._quad_vec.SemiInfiniteFunc(self,func,start,infty)
scipy.integrate._quad_vec.SemiInfiniteFunc.__init__(self,func,start,infty)
scipy.integrate._quad_vec.SemiInfiniteFunc.get_t(self,x)
scipy.integrate._quad_vec._Bunch(self,**kwargs)
scipy.integrate._quad_vec._Bunch.__init__(self,**kwargs)
scipy.integrate._quad_vec._Bunch.__repr__(self)
scipy.integrate._quad_vec._get_sizeof(obj)
scipy.integrate._quad_vec._max_norm(x)
scipy.integrate._quad_vec._quadrature_gk(a,b,f,norm_func,x,w,v)
scipy.integrate._quad_vec._quadrature_gk15(a,b,f,norm_func)
scipy.integrate._quad_vec._quadrature_gk21(a,b,f,norm_func)
scipy.integrate._quad_vec._quadrature_trapezoid(x1,x2,f,norm_func)
scipy.integrate._quad_vec._subdivide_interval(args)
scipy.integrate._quad_vec.quad_vec(f,a,b,epsabs=1e-200,epsrel=1e-08,norm='2',cache_size=100000000.0,limit=10000,workers=1,points=None,quadrature=None,full_output=False,*,args=())
scipy.integrate.quad_vec(f,a,b,epsabs=1e-200,epsrel=1e-08,norm='2',cache_size=100000000.0,limit=10000,workers=1,points=None,quadrature=None,full_output=False,*,args=())


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/_ode.py----------------------------------------
A:scipy.integrate._ode.n_prev->len(self._y)
A:scipy.integrate._ode.self._y->array([0.0], self._integrator.scalar)
A:scipy.integrate._ode.integrator->find_integrator(name)
A:scipy.integrate._ode.self._integrator->integrator(**integrator_params)
A:scipy.integrate._ode.(self._y, self.t)->mth(self.f, self.jac or (lambda : None), self._y, self.t, t, self.f_params, self.jac_params)
A:scipy.integrate._ode.newjac->zeros((bjac.shape[0] + 1, bjac.shape[1]))
A:scipy.integrate._ode.f->self.cf(*(t, y[::2] + 1j * y[1::2]) + f_args)
A:scipy.integrate._ode.self.tmp[::2]->real(y)
A:scipy.integrate._ode.self.tmp[1::2]->imag(y)
A:scipy.integrate._ode.jac->_vode_banded_jac_wrapper(jac, self.ml, jac_params)
A:scipy.integrate._ode.jac_tmp->_transform_banded_jac(jac_tmp)
A:scipy.integrate._ode.jac_tmp[1::2, 1::2]jac_tmp[::2, ::2]->real(jac)
A:scipy.integrate._ode.jac_tmp[1::2, ::2]->imag(jac)
A:scipy.integrate._ode.ml->getattr(self._integrator, 'ml', None)
A:scipy.integrate._ode.mu->getattr(self._integrator, 'mu', None)
A:scipy.integrate._ode.lband->integrator_params.get('lband')
A:scipy.integrate._ode.uband->integrator_params.get('uband')
A:scipy.integrate._ode.y->ode.integrate(self, t, step, relax)
A:scipy.integrate._ode.self.tmp->zeros(y.size * 2, 'float')
A:scipy.integrate._ode.padded_jac->vstack((jac, zeros((ml, jac.shape[1]))))
A:scipy.integrate._ode.runner->getattr(_lsoda, 'lsoda', None)
A:scipy.integrate._ode.mf->self._determine_mf_and_set_bands(has_jac)
A:scipy.integrate._ode.rwork->zeros((lrw,), float)
A:scipy.integrate._ode.iwork->zeros((liw,), _lsoda_int_dtype)
A:scipy.integrate._ode.(y1, t, istate)->self.runner(*args)
A:scipy.integrate._ode.unexpected_istate_msg->'Unexpected istate={:d}'.format(istate)
A:scipy.integrate._ode.r->self.run(*args)
A:scipy.integrate._ode.zwork->zeros((lzw,), complex)
A:scipy.integrate._ode.work->zeros((11 * n + 21,), float)
A:scipy.integrate._ode.(x, y, iwork, istate)->self.runner(*(f, t0, y0, t1) + tuple(self.call_args) + (f_params,))
A:scipy.integrate._ode.lrw->max(lrn, lrs)
scipy.integrate.IntegratorBase
scipy.integrate.IntegratorBase.acquire_new_handle(self)
scipy.integrate.IntegratorBase.check_handle(self)
scipy.integrate.IntegratorBase.reset(self,n,has_jac)
scipy.integrate.IntegratorBase.run(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate.IntegratorBase.run_relax(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate.IntegratorBase.step(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate.IntegratorConcurrencyError(self,name)
scipy.integrate._ode.IntegratorBase
scipy.integrate._ode.IntegratorBase.acquire_new_handle(self)
scipy.integrate._ode.IntegratorBase.check_handle(self)
scipy.integrate._ode.IntegratorBase.reset(self,n,has_jac)
scipy.integrate._ode.IntegratorBase.run(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate._ode.IntegratorBase.run_relax(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate._ode.IntegratorBase.step(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate._ode.IntegratorConcurrencyError(self,name)
scipy.integrate._ode.IntegratorConcurrencyError.__init__(self,name)
scipy.integrate._ode._transform_banded_jac(bjac)
scipy.integrate._ode._vode_banded_jac_wrapper(jacfunc,ml,jac_params)
scipy.integrate._ode.complex_ode(self,f,jac=None)
scipy.integrate._ode.complex_ode.__init__(self,f,jac=None)
scipy.integrate._ode.complex_ode._wrap(self,t,y,*f_args)
scipy.integrate._ode.complex_ode._wrap_jac(self,t,y,*jac_args)
scipy.integrate._ode.complex_ode.integrate(self,t,step=False,relax=False)
scipy.integrate._ode.complex_ode.set_initial_value(self,y,t=0.0)
scipy.integrate._ode.complex_ode.set_integrator(self,name,**integrator_params)
scipy.integrate._ode.complex_ode.set_solout(self,solout)
scipy.integrate._ode.complex_ode.y(self)
scipy.integrate._ode.dop853(self,rtol=1e-06,atol=1e-12,nsteps=500,max_step=0.0,first_step=0.0,safety=0.9,ifactor=6.0,dfactor=0.3,beta=0.0,method=None,verbosity=-1)
scipy.integrate._ode.dop853.__init__(self,rtol=1e-06,atol=1e-12,nsteps=500,max_step=0.0,first_step=0.0,safety=0.9,ifactor=6.0,dfactor=0.3,beta=0.0,method=None,verbosity=-1)
scipy.integrate._ode.dop853.reset(self,n,has_jac)
scipy.integrate._ode.dopri5(self,rtol=1e-06,atol=1e-12,nsteps=500,max_step=0.0,first_step=0.0,safety=0.9,ifactor=10.0,dfactor=0.2,beta=0.0,method=None,verbosity=-1)
scipy.integrate._ode.dopri5.__init__(self,rtol=1e-06,atol=1e-12,nsteps=500,max_step=0.0,first_step=0.0,safety=0.9,ifactor=10.0,dfactor=0.2,beta=0.0,method=None,verbosity=-1)
scipy.integrate._ode.dopri5._solout(self,nr,xold,x,y,nd,icomp,con)
scipy.integrate._ode.dopri5.reset(self,n,has_jac)
scipy.integrate._ode.dopri5.run(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate._ode.dopri5.set_solout(self,solout,complex=False)
scipy.integrate._ode.find_integrator(name)
scipy.integrate._ode.lsoda(self,with_jacobian=False,rtol=1e-06,atol=1e-12,lband=None,uband=None,nsteps=500,max_step=0.0,min_step=0.0,first_step=0.0,ixpr=0,max_hnil=0,max_order_ns=12,max_order_s=5,method=None)
scipy.integrate._ode.lsoda.__init__(self,with_jacobian=False,rtol=1e-06,atol=1e-12,lband=None,uband=None,nsteps=500,max_step=0.0,min_step=0.0,first_step=0.0,ixpr=0,max_hnil=0,max_order_ns=12,max_order_s=5,method=None)
scipy.integrate._ode.lsoda.reset(self,n,has_jac)
scipy.integrate._ode.lsoda.run(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate._ode.lsoda.run_relax(self,*args)
scipy.integrate._ode.lsoda.step(self,*args)
scipy.integrate._ode.ode(self,f,jac=None)
scipy.integrate._ode.ode.__init__(self,f,jac=None)
scipy.integrate._ode.ode.get_return_code(self)
scipy.integrate._ode.ode.integrate(self,t,step=False,relax=False)
scipy.integrate._ode.ode.set_f_params(self,*args)
scipy.integrate._ode.ode.set_initial_value(self,y,t=0.0)
scipy.integrate._ode.ode.set_integrator(self,name,**integrator_params)
scipy.integrate._ode.ode.set_jac_params(self,*args)
scipy.integrate._ode.ode.set_solout(self,solout)
scipy.integrate._ode.ode.successful(self)
scipy.integrate._ode.ode.y(self)
scipy.integrate._ode.vode(self,method='adams',with_jacobian=False,rtol=1e-06,atol=1e-12,lband=None,uband=None,order=12,nsteps=500,max_step=0.0,min_step=0.0,first_step=0.0)
scipy.integrate._ode.vode.__init__(self,method='adams',with_jacobian=False,rtol=1e-06,atol=1e-12,lband=None,uband=None,order=12,nsteps=500,max_step=0.0,min_step=0.0,first_step=0.0)
scipy.integrate._ode.vode._determine_mf_and_set_bands(self,has_jac)
scipy.integrate._ode.vode.reset(self,n,has_jac)
scipy.integrate._ode.vode.run(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate._ode.vode.run_relax(self,*args)
scipy.integrate._ode.vode.step(self,*args)
scipy.integrate._ode.zvode(vode)
scipy.integrate._ode.zvode.reset(self,n,has_jac)
scipy.integrate._transform_banded_jac(bjac)
scipy.integrate._vode_banded_jac_wrapper(jacfunc,ml,jac_params)
scipy.integrate.complex_ode(self,f,jac=None)
scipy.integrate.complex_wrap(self,t,y,*f_args)
scipy.integrate.complex_wrap_jac(self,t,y,*jac_args)
scipy.integrate.complexintegrate(self,t,step=False,relax=False)
scipy.integrate.complexset_initial_value(self,y,t=0.0)
scipy.integrate.complexset_integrator(self,name,**integrator_params)
scipy.integrate.complexset_solout(self,solout)
scipy.integrate.complexy(self)
scipy.integrate.dop853(self,rtol=1e-06,atol=1e-12,nsteps=500,max_step=0.0,first_step=0.0,safety=0.9,ifactor=6.0,dfactor=0.3,beta=0.0,method=None,verbosity=-1)
scipy.integrate.dop853.reset(self,n,has_jac)
scipy.integrate.dopri5(self,rtol=1e-06,atol=1e-12,nsteps=500,max_step=0.0,first_step=0.0,safety=0.9,ifactor=10.0,dfactor=0.2,beta=0.0,method=None,verbosity=-1)
scipy.integrate.dopri5._solout(self,nr,xold,x,y,nd,icomp,con)
scipy.integrate.dopri5.reset(self,n,has_jac)
scipy.integrate.dopri5.run(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate.dopri5.set_solout(self,solout,complex=False)
scipy.integrate.find_integrator(name)
scipy.integrate.lsoda(self,with_jacobian=False,rtol=1e-06,atol=1e-12,lband=None,uband=None,nsteps=500,max_step=0.0,min_step=0.0,first_step=0.0,ixpr=0,max_hnil=0,max_order_ns=12,max_order_s=5,method=None)
scipy.integrate.lsoda.reset(self,n,has_jac)
scipy.integrate.lsoda.run(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate.lsoda.run_relax(self,*args)
scipy.integrate.lsoda.step(self,*args)
scipy.integrate.ode(self,f,jac=None)
scipy.integrate.ode.get_return_code(self)
scipy.integrate.ode.integrate(self,t,step=False,relax=False)
scipy.integrate.ode.set_f_params(self,*args)
scipy.integrate.ode.set_initial_value(self,y,t=0.0)
scipy.integrate.ode.set_integrator(self,name,**integrator_params)
scipy.integrate.ode.set_jac_params(self,*args)
scipy.integrate.ode.set_solout(self,solout)
scipy.integrate.ode.successful(self)
scipy.integrate.ode.y(self)
scipy.integrate.vode(self,method='adams',with_jacobian=False,rtol=1e-06,atol=1e-12,lband=None,uband=None,order=12,nsteps=500,max_step=0.0,min_step=0.0,first_step=0.0)
scipy.integrate.vode._determine_mf_and_set_bands(self,has_jac)
scipy.integrate.vode.reset(self,n,has_jac)
scipy.integrate.vode.run(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate.vode.run_relax(self,*args)
scipy.integrate.vode.step(self,*args)
scipy.integrate.zvode(vode)
scipy.integrate.zvode.reset(self,n,has_jac)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/dop.py----------------------------------------
scipy.integrate.dop.__dir__()
scipy.integrate.dop.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/odepack.py----------------------------------------
scipy.integrate.odepack.__dir__()
scipy.integrate.odepack.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/lsoda.py----------------------------------------
scipy.integrate.lsoda.__dir__()
scipy.integrate.lsoda.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/_odepack_py.py----------------------------------------
A:scipy.integrate._odepack_py.dt->numpy.diff(t)
A:scipy.integrate._odepack_py.t->copy(t)
A:scipy.integrate._odepack_py.y0->copy(y0)
A:scipy.integrate._odepack_py.output->_odepack.odeint(func, y0, t, args, Dfun, col_deriv, ml, mu, full_output, rtol, atol, tcrit, h0, hmax, hmin, ixpr, mxstep, mxhnil, mxordn, mxords, int(bool(tfirst)))
scipy.integrate.ODEintWarning(Warning)
scipy.integrate._odepack_py.ODEintWarning(Warning)
scipy.integrate._odepack_py.odeint(func,y0,t,args=(),Dfun=None,col_deriv=0,full_output=0,ml=None,mu=None,rtol=None,atol=None,tcrit=None,h0=0.0,hmax=0.0,hmin=0.0,ixpr=0,mxstep=0,mxhnil=0,mxordn=12,mxords=5,printmessg=0,tfirst=False)
scipy.integrate.odeint(func,y0,t,args=(),Dfun=None,col_deriv=0,full_output=0,ml=None,mu=None,rtol=None,atol=None,tcrit=None,h0=0.0,hmax=0.0,hmin=0.0,ixpr=0,mxstep=0,mxhnil=0,mxordn=12,mxords=5,printmessg=0,tfirst=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/vode.py----------------------------------------
scipy.integrate.vode.__dir__()
scipy.integrate.vode.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/__init__.py----------------------------------------
A:scipy.integrate.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/quadpack.py----------------------------------------
scipy.integrate.quadpack.__dir__()
scipy.integrate.quadpack.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/tests/test_odeint_jac.py----------------------------------------
A:scipy.integrate.tests.test_odeint_jac.dydt->numpy.zeros_like(y)
A:scipy.integrate.tests.test_odeint_jac.n->len(y)
A:scipy.integrate.tests.test_odeint_jac.jac->numpy.zeros((n, n), order='F')
A:scipy.integrate.tests.test_odeint_jac.bjac->numpy.zeros((4, n), order='F')
A:scipy.integrate.tests.test_odeint_jac.y0->numpy.arange(1.0, 6.0)
A:scipy.integrate.tests.test_odeint_jac.(sol, info)->odeint(rhs, y0, t, Dfun=jacobian, ml=ml, mu=mu, atol=atol, rtol=rtol, full_output=True)
A:scipy.integrate.tests.test_odeint_jac.y1->numpy.arange(1.0, 6.0).copy()
A:scipy.integrate.tests.test_odeint_jac.(nst, nfe, nje)->scipy.integrate._test_odeint_banded.banded5x5_solve(y1, nsteps, dt, jactype)
scipy.integrate.tests.test_odeint_jac.bjac(y,t)
scipy.integrate.tests.test_odeint_jac.check_odeint(jactype)
scipy.integrate.tests.test_odeint_jac.jac(y,t)
scipy.integrate.tests.test_odeint_jac.rhs(y,t)
scipy.integrate.tests.test_odeint_jac.test_odeint_banded_jac()
scipy.integrate.tests.test_odeint_jac.test_odeint_full_jac()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/tests/test_quadpack.py----------------------------------------
A:scipy.integrate.tests.test_quadpack.ptr->getattr(clib_test, name)
A:scipy.integrate.tests.test_quadpack.self.lib->ctypes.CDLL(file)
A:scipy.integrate.tests.test_quadpack.func->get_clib_test_routine(name, restype, *argtypes)
A:scipy.integrate.tests.test_quadpack.sin_0->get_clib_test_routine('_sin_0', ctypes.c_double, ctypes.c_double, ctypes.c_void_p)
A:scipy.integrate.tests.test_quadpack.sin_1->get_clib_test_routine('_sin_1', ctypes.c_double, ctypes.c_int, ctypes.POINTER(ctypes.c_double), ctypes.c_void_p)
A:scipy.integrate.tests.test_quadpack.sin_2->get_clib_test_routine('_sin_2', ctypes.c_double, ctypes.c_double)
A:scipy.integrate.tests.test_quadpack.sin_3->get_clib_test_routine('_sin_3', ctypes.c_double, ctypes.c_int, ctypes.POINTER(ctypes.c_double))
A:scipy.integrate.tests.test_quadpack.sin_4->get_clib_test_routine('_sin_3', ctypes.c_double, ctypes.c_int, ctypes.c_double)
A:scipy.integrate.tests.test_quadpack.callback->LowLevelCallable(func)
A:scipy.integrate.tests.test_quadpack.(val_1, err_1)->quad(f, 0, 1, weight='alg', wvar=(0, 0))
A:scipy.integrate.tests.test_quadpack.(val_2, err_2)->quad(f, 1, 0, weight='alg', wvar=(0, 0))
A:scipy.integrate.tests.test_quadpack.res_1->quad(f, 0, 1, weight='alg', wvar=(0, 0), full_output=True)
A:scipy.integrate.tests.test_quadpack.res_2->quad(f, 1, 0, weight='alg', wvar=(0, 0), full_output=True)
A:scipy.integrate.tests.test_quadpack.err->max(res_1[1], res_2[1])
A:scipy.integrate.tests.test_quadpack.res_c->quad(tfunc, complex_func=True, **kwargs)
A:scipy.integrate.tests.test_quadpack.res_r->quad(lambda x: np.real(np.exp(1j * x)), complex_func=False, **kwargs)
A:scipy.integrate.tests.test_quadpack.res_i->quad(lambda x: np.imag(np.exp(1j * x)), complex_func=False, **kwargs)
A:scipy.integrate.tests.test_quadpack.res->tplquad(func3d, -1, 2, lambda x: -2, lambda x: 2, lambda x, y: -np.pi, lambda x, y: np.pi, args=(2, 3))
A:scipy.integrate.tests.test_quadpack.(res, reserr)->dblquad(func2d, -2, 2, lambda x: -3, lambda x: 3)
A:scipy.integrate.tests.test_quadpack.(res2, reserr2)->nquad(func2d, [[-3, 3], (-2, 2)])
A:scipy.integrate.tests.test_quadpack.res2->nquad(func3d, [[-np.pi, np.pi], [-2, 2], (-1, 2)], args=(2, 3))
scipy.integrate.tests.test_quadpack.TestCtypesQuad
scipy.integrate.tests.test_quadpack.TestCtypesQuad.setup_method(self)
scipy.integrate.tests.test_quadpack.TestCtypesQuad.test_ctypes_sine(self)
scipy.integrate.tests.test_quadpack.TestCtypesQuad.test_ctypes_variants(self)
scipy.integrate.tests.test_quadpack.TestCtypesQuad.test_typical(self)
scipy.integrate.tests.test_quadpack.TestMultivariateCtypesQuad
scipy.integrate.tests.test_quadpack.TestMultivariateCtypesQuad.setup_method(self)
scipy.integrate.tests.test_quadpack.TestMultivariateCtypesQuad.test_indefinite(self)
scipy.integrate.tests.test_quadpack.TestMultivariateCtypesQuad.test_threadsafety(self)
scipy.integrate.tests.test_quadpack.TestMultivariateCtypesQuad.test_typical(self)
scipy.integrate.tests.test_quadpack.TestNQuad
scipy.integrate.tests.test_quadpack.TestNQuad.test_dict_as_opts(self)
scipy.integrate.tests.test_quadpack.TestNQuad.test_fixed_limits(self)
scipy.integrate.tests.test_quadpack.TestNQuad.test_matching_dblquad(self)
scipy.integrate.tests.test_quadpack.TestNQuad.test_matching_quad(self)
scipy.integrate.tests.test_quadpack.TestNQuad.test_matching_tplquad(self)
scipy.integrate.tests.test_quadpack.TestNQuad.test_square_aliased_fn_ranges_and_opts(self)
scipy.integrate.tests.test_quadpack.TestNQuad.test_square_aliased_ranges_and_opts(self)
scipy.integrate.tests.test_quadpack.TestNQuad.test_square_separate_fn_ranges_and_opts(self)
scipy.integrate.tests.test_quadpack.TestNQuad.test_square_separate_ranges_and_opts(self)
scipy.integrate.tests.test_quadpack.TestNQuad.test_variable_limits(self)
scipy.integrate.tests.test_quadpack.TestQuad
scipy.integrate.tests.test_quadpack.TestQuad.test_algebraic_log_weight(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_b_less_than_a(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_b_less_than_a_2(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_b_less_than_a_3(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_b_less_than_a_full_output(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_cauchypv_weight(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_complex(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_cosine_weighted_infinite(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_double_integral(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_double_integral2(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_double_integral3(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_double_integral_improper(self,x_lower,x_upper,y_lower,y_upper,expected)
scipy.integrate.tests.test_quadpack.TestQuad.test_indefinite(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_sine_weighted_finite(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_sine_weighted_infinite(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_singular(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_triple_integral(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_triple_integral_improper(self,x_lower,x_upper,y_lower,y_upper,z_lower,z_upper,expected)
scipy.integrate.tests.test_quadpack.TestQuad.test_typical(self)
scipy.integrate.tests.test_quadpack.assert_quad(value_and_err,tabled_value,error_tolerance=1.5e-08)
scipy.integrate.tests.test_quadpack.get_clib_test_routine(name,restype,*argtypes)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/tests/test_integrate.py----------------------------------------
A:scipy.integrate.tests.test_integrate.t->numpy.zeros(10)
A:scipy.integrate.tests.test_integrate.(z, infodict)->odeint(lambda t, y: problem.f(y, t), problem.z0, t, Dfun=lambda t, y: problem.jac(y, t), full_output=True, tfirst=True)
A:scipy.integrate.tests.test_integrate.problem->problem_cls()
A:scipy.integrate.tests.test_integrate.ig->complex_ode(rhs).set_integrator(integrator)
A:scipy.integrate.tests.test_integrate.z->complex_ode(rhs).set_integrator(integrator).integrate(problem.stop_t)
A:scipy.integrate.tests.test_integrate.r->ode(f).set_integrator(sol)
A:scipy.integrate.tests.test_integrate.r2->ode(f).set_integrator(sol)
A:scipy.integrate.tests.test_integrate.ret->complex_ode(rhs).set_integrator(integrator).integrate(tend)
A:scipy.integrate.tests.test_integrate.z0->exp([1j, 2j, 3j, 4j, 5j])
A:scipy.integrate.tests.test_integrate.tmp->zeros((2, 2), float)
A:scipy.integrate.tests.test_integrate.omega->sqrt(self.k / self.m)
A:scipy.integrate.tests.test_integrate.j->array([[0.0, omega[0]], [-omega[1], 0.0]])
A:scipy.integrate.tests.test_integrate.lmbd->numpy.array(self.lmbd)
A:scipy.integrate.tests.test_integrate.e0->numpy.exp(-lmbd[0] * t)
A:scipy.integrate.tests.test_integrate.e1->numpy.exp(-lmbd[1] * t)
A:scipy.integrate.tests.test_integrate.e2->numpy.exp(-lmbd[2] * t)
A:scipy.integrate.tests.test_integrate.u->numpy.vstack((self.z0[0] * e0, self.z0[1] * e1 + self.z0[0] * lmbd[0] / d10 * (e0 - e1), self.z0[2] * e2 + self.z0[1] * lmbd[1] / d21 * (e1 - e2) + lmbd[1] * lmbd[0] * self.z0[0] / d10 * (1 / d20 * (e0 - e2) - 1 / d21 * (e1 - e2)))).transpose()
A:scipy.integrate.tests.test_integrate.solver->self._get_solver(f, jac)
A:scipy.integrate.tests.test_integrate.(y, info)->odeint(lambda y, t: -y, y0, t, full_output=True)
A:scipy.integrate.tests.test_integrate.jac->numpy.row_stack((np.r_[0, np.diag(c, 1)], np.diag(c), np.r_[np.diag(c, -1), 0], np.r_[np.diag(c, -2), 0, 0]))
A:scipy.integrate.tests.test_integrate.c->array([[-205, 0.01, 0.0, 0.0], [0.1, -2.5, 0.02, 0.0], [0.001, 0.01, -2.0, 0.01], [0.0, 0.0, 0.1, -1.0]])
A:scipy.integrate.tests.test_integrate.y0->numpy.ones(4)
A:scipy.integrate.tests.test_integrate.(sol1, info1)->odeint(func, y0, t, args=(c,), full_output=True, atol=1e-13, rtol=1e-11, mxstep=10000, Dfun=jac)
A:scipy.integrate.tests.test_integrate.(sol2, info2)->odeint(func, y0, t, args=(c,), full_output=True, atol=1e-13, rtol=1e-11, mxstep=10000, Dfun=jac_transpose, col_deriv=True)
A:scipy.integrate.tests.test_integrate.(sol3, info3)->odeint(func, y0, t, args=(c,), full_output=True, atol=1e-13, rtol=1e-11, mxstep=10000, Dfun=bjac_rows, ml=2, mu=1)
A:scipy.integrate.tests.test_integrate.(sol4, info4)->odeint(func, y0, t, args=(c,), full_output=True, atol=1e-13, rtol=1e-11, mxstep=10000, Dfun=bjac_cols, ml=2, mu=1, col_deriv=True)
A:scipy.integrate.tests.test_integrate.(sol1ty, info1ty)->odeint(lambda t, y, c: func(y, t, c), y0, t, args=(c,), full_output=True, atol=1e-13, rtol=1e-11, mxstep=10000, Dfun=lambda t, y, c: jac(y, t, c), tfirst=True)
A:scipy.integrate.tests.test_integrate.sol->odeint(func, [1.0], [])
A:scipy.integrate.tests.test_integrate.expected_sol->numpy.array([[1.0, 2.0]] * 9 + [[0.5, 1.0], [0.25, 0.5], [0.25, 0.5], [0.125, 0.25]])
scipy.integrate.tests.test_integrate.ComplexExp(ODE)
scipy.integrate.tests.test_integrate.ComplexExp.f(self,z,t)
scipy.integrate.tests.test_integrate.ComplexExp.jac(self,z,t)
scipy.integrate.tests.test_integrate.ComplexExp.verify(self,zs,t)
scipy.integrate.tests.test_integrate.CoupledDecay(ODE)
scipy.integrate.tests.test_integrate.CoupledDecay.f(self,z,t)
scipy.integrate.tests.test_integrate.CoupledDecay.jac(self,z,t)
scipy.integrate.tests.test_integrate.CoupledDecay.verify(self,zs,t)
scipy.integrate.tests.test_integrate.ODE
scipy.integrate.tests.test_integrate.ODECheckParameterUse
scipy.integrate.tests.test_integrate.ODECheckParameterUse._check_solver(self,solver)
scipy.integrate.tests.test_integrate.ODECheckParameterUse._get_solver(self,f,jac)
scipy.integrate.tests.test_integrate.ODECheckParameterUse.test_no_params(self)
scipy.integrate.tests.test_integrate.ODECheckParameterUse.test_one_scalar_param(self)
scipy.integrate.tests.test_integrate.ODECheckParameterUse.test_two_scalar_params(self)
scipy.integrate.tests.test_integrate.ODECheckParameterUse.test_vector_param(self)
scipy.integrate.tests.test_integrate.ODECheckParameterUse.test_warns_on_failure(self)
scipy.integrate.tests.test_integrate.Pi(ODE)
scipy.integrate.tests.test_integrate.Pi.f(self,z,t)
scipy.integrate.tests.test_integrate.Pi.verify(self,zs,t)
scipy.integrate.tests.test_integrate.SimpleOscillator(ODE)
scipy.integrate.tests.test_integrate.SimpleOscillator.f(self,z,t)
scipy.integrate.tests.test_integrate.SimpleOscillator.verify(self,zs,t)
scipy.integrate.tests.test_integrate.TestComplexOde(TestODEClass)
scipy.integrate.tests.test_integrate.TestComplexOde.test_dop853(self)
scipy.integrate.tests.test_integrate.TestComplexOde.test_dopri5(self)
scipy.integrate.tests.test_integrate.TestComplexOde.test_lsoda(self)
scipy.integrate.tests.test_integrate.TestComplexOde.test_vode(self)
scipy.integrate.tests.test_integrate.TestComplexSolout
scipy.integrate.tests.test_integrate.TestComplexSolout._run_solout_break_test(self,integrator)
scipy.integrate.tests.test_integrate.TestComplexSolout._run_solout_test(self,integrator)
scipy.integrate.tests.test_integrate.TestComplexSolout.test_solout(self)
scipy.integrate.tests.test_integrate.TestComplexSolout.test_solout_break(self)
scipy.integrate.tests.test_integrate.TestDOP853CheckParameterUse(ODECheckParameterUse)
scipy.integrate.tests.test_integrate.TestDOPRI5CheckParameterUse(ODECheckParameterUse)
scipy.integrate.tests.test_integrate.TestLSODACheckParameterUse(ODECheckParameterUse)
scipy.integrate.tests.test_integrate.TestODEClass
scipy.integrate.tests.test_integrate.TestODEClass._do_problem(self,problem,integrator,method='adams')
scipy.integrate.tests.test_integrate.TestOde(TestODEClass)
scipy.integrate.tests.test_integrate.TestOde.test_concurrent_fail(self)
scipy.integrate.tests.test_integrate.TestOde.test_concurrent_ok(self)
scipy.integrate.tests.test_integrate.TestOde.test_dop853(self)
scipy.integrate.tests.test_integrate.TestOde.test_dopri5(self)
scipy.integrate.tests.test_integrate.TestOde.test_lsoda(self)
scipy.integrate.tests.test_integrate.TestOde.test_vode(self)
scipy.integrate.tests.test_integrate.TestOde.test_zvode(self)
scipy.integrate.tests.test_integrate.TestOdeint
scipy.integrate.tests.test_integrate.TestOdeint._do_problem(self,problem)
scipy.integrate.tests.test_integrate.TestOdeint.test_odeint(self)
scipy.integrate.tests.test_integrate.TestSolout
scipy.integrate.tests.test_integrate.TestSolout._run_solout_after_initial_test(self,integrator)
scipy.integrate.tests.test_integrate.TestSolout._run_solout_break_test(self,integrator)
scipy.integrate.tests.test_integrate.TestSolout._run_solout_test(self,integrator)
scipy.integrate.tests.test_integrate.TestSolout.test_solout(self)
scipy.integrate.tests.test_integrate.TestSolout.test_solout_after_initial(self)
scipy.integrate.tests.test_integrate.TestSolout.test_solout_break(self)
scipy.integrate.tests.test_integrate.TestVODECheckParameterUse(ODECheckParameterUse)
scipy.integrate.tests.test_integrate.TestZVODECheckParameterUse(ODECheckParameterUse)
scipy.integrate.tests.test_integrate.f(t,x)
scipy.integrate.tests.test_integrate.f1(t,x,omega)
scipy.integrate.tests.test_integrate.f2(t,x,omega1,omega2)
scipy.integrate.tests.test_integrate.fv(t,x,omega)
scipy.integrate.tests.test_integrate.jac(t,x)
scipy.integrate.tests.test_integrate.jac1(t,x,omega)
scipy.integrate.tests.test_integrate.jac2(t,x,omega1,omega2)
scipy.integrate.tests.test_integrate.jacv(t,x,omega)
scipy.integrate.tests.test_integrate.test_odeint_bad_shapes()
scipy.integrate.tests.test_integrate.test_odeint_banded_jacobian()
scipy.integrate.tests.test_integrate.test_odeint_errors()
scipy.integrate.tests.test_integrate.test_odeint_trivial_time()
scipy.integrate.tests.test_integrate.test_repeated_t_values()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/tests/test__quad_vec.py----------------------------------------
A:scipy.integrate.tests.test__quad_vec.quadrature_params->pytest.mark.parametrize('quadrature', [None, 'gk15', 'gk21', 'trapezoid'])
A:scipy.integrate.tests.test__quad_vec.n->numpy.arange(10)
A:scipy.integrate.tests.test__quad_vec.kwargs->dict(norm='max', epsabs=epsabs, quadrature=quadrature)
A:scipy.integrate.tests.test__quad_vec.(res, err)->quad_vec(f, 0, 1, args=extra_args, workers=pool.map)
A:scipy.integrate.tests.test__quad_vec.(res, err, *rest)->quad_vec(f, 0, 2, norm='max', epsrel=1e-08, full_output=True, limit=10000, **kwargs)
A:scipy.integrate.tests.test__quad_vec.(res, err, info)->quad_vec(f_inf, 0, 1, full_output=True)
A:scipy.integrate.tests.test__quad_vec.exact->numpy.array([0, 4 / 3, 8 / 3])
A:scipy.integrate.tests.test__quad_vec.res->quad_vec(f, 0, 1, norm='max', full_output=True, quadrature=quadrature)
A:scipy.integrate.tests.test__quad_vec.j->numpy.searchsorted(sorted(points), tuple(p))
scipy.integrate.tests.test__quad_vec._func_with_args(x,a)
scipy.integrate.tests.test__quad_vec._lorenzian(x)
scipy.integrate.tests.test__quad_vec.test_info()
scipy.integrate.tests.test__quad_vec.test_nan_inf()
scipy.integrate.tests.test__quad_vec.test_num_eval(quadrature)
scipy.integrate.tests.test__quad_vec.test_points(a,b)
scipy.integrate.tests.test__quad_vec.test_quad_vec_args()
scipy.integrate.tests.test__quad_vec.test_quad_vec_pool()
scipy.integrate.tests.test__quad_vec.test_quad_vec_pool_args(extra_args,workers)
scipy.integrate.tests.test__quad_vec.test_quad_vec_simple(quadrature)
scipy.integrate.tests.test__quad_vec.test_quad_vec_simple_inf(quadrature)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/tests/test_bvp.py----------------------------------------
A:scipy.integrate.tests.test_bvp.df_dy->numpy.zeros((n, n, m))
A:scipy.integrate.tests.test_bvp.dbc_dya->numpy.zeros((n + 2, n))
A:scipy.integrate.tests.test_bvp.dbc_dyb->numpy.zeros((n + 2, n))
A:scipy.integrate.tests.test_bvp.df_dp->numpy.zeros((n, 2, m))
A:scipy.integrate.tests.test_bvp.dbc_dp->numpy.zeros((n + 2, 2))
A:scipy.integrate.tests.test_bvp.f->sl_fun(x, y, p)
A:scipy.integrate.tests.test_bvp.y->numpy.zeros((2, x.shape[0]))
A:scipy.integrate.tests.test_bvp.k->numpy.sqrt(2 * eps)
A:scipy.integrate.tests.test_bvp.x->numpy.linspace(0, 1, 5)
A:scipy.integrate.tests.test_bvp.x_new->modify_mesh(x, np.array([1], dtype=int), np.array([0, 2, 3]))
A:scipy.integrate.tests.test_bvp.p->numpy.array([3.0])
A:scipy.integrate.tests.test_bvp.(df_dy, df_dp)->estimate_fun_jac(sl_fun, x, y, p)
A:scipy.integrate.tests.test_bvp.df_dy_an->emden_fun_jac(x, y)
A:scipy.integrate.tests.test_bvp.y[0]->numpy.sin(x)
A:scipy.integrate.tests.test_bvp.y[1]->numpy.cos(x)
A:scipy.integrate.tests.test_bvp.(df_dy_an, df_dp_an)->sl_fun_jac(x, y, p)
A:scipy.integrate.tests.test_bvp.ya->numpy.array([0.5, 100])
A:scipy.integrate.tests.test_bvp.yb->numpy.array([-1000, 10.5])
A:scipy.integrate.tests.test_bvp.(dbc_dya, dbc_dyb, dbc_dp)->estimate_bc_jac(sl_bc, y[:, 0], y[:, -1], p)
A:scipy.integrate.tests.test_bvp.(dbc_dya_an, dbc_dyb_an)->emden_bc_jac(ya, yb)
A:scipy.integrate.tests.test_bvp.(dbc_dya_an, dbc_dyb_an, dbc_dp_an)->sl_bc_jac(ya, yb, p)
A:scipy.integrate.tests.test_bvp.(i, j)->compute_jac_indices(n, m, k)
A:scipy.integrate.tests.test_bvp.s->coo_matrix((np.ones_like(i), (i, j))).toarray()
A:scipy.integrate.tests.test_bvp.s_true->numpy.array([[1, 1, 1, 1, 0, 0, 0, 0, 1, 1], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1, 1, 1]])
A:scipy.integrate.tests.test_bvp.(i_jac, j_jac)->compute_jac_indices(2, 5, 1)
A:scipy.integrate.tests.test_bvp.h->numpy.diff(x)
A:scipy.integrate.tests.test_bvp.(df_dy_middle, df_dp_middle)->estimate_fun_jac(sl_fun, x_middle, y_middle, p)
A:scipy.integrate.tests.test_bvp.J->J.toarray().toarray()
A:scipy.integrate.tests.test_bvp.J_true->numpy.zeros((m * n + k, m * n + k))
A:scipy.integrate.tests.test_bvp.J_true[i * n:(i + 1) * n, i * n:(i + 2) * n]->J_block(h[i], p[0])
A:scipy.integrate.tests.test_bvp.S->numpy.array([[0, 0], [0, -2]])
A:scipy.integrate.tests.test_bvp.x_test->numpy.linspace(-1, 1, 100)
A:scipy.integrate.tests.test_bvp.sol->solve_bvp(exp_fun, exp_bc, x, y, verbose=verbose)
A:scipy.integrate.tests.test_bvp.sol_test->solve_bvp(exp_fun, exp_bc, x, y, verbose=verbose).sol(x_test)
A:scipy.integrate.tests.test_bvp.f_test->nonlin_bc_fun(x_test, sol_test)
A:scipy.integrate.tests.test_bvp.res->solve_bvp(undefined_fun, undefined_bc, x, y)
A:scipy.integrate.tests.test_bvp.sys.stdout->StringIO()
A:scipy.integrate.tests.test_bvp.text->sys.stdout.getvalue()
scipy.integrate.tests.test_bvp.big_bc(ya,yb)
scipy.integrate.tests.test_bvp.big_bc_with_parameters(ya,yb,p)
scipy.integrate.tests.test_bvp.big_bc_with_parameters_jac(ya,yb,p)
scipy.integrate.tests.test_bvp.big_fun(x,y)
scipy.integrate.tests.test_bvp.big_fun_with_parameters(x,y,p)
scipy.integrate.tests.test_bvp.big_fun_with_parameters_jac(x,y,p)
scipy.integrate.tests.test_bvp.big_sol(x,n)
scipy.integrate.tests.test_bvp.big_sol_with_parameters(x,p)
scipy.integrate.tests.test_bvp.emden_bc(ya,yb)
scipy.integrate.tests.test_bvp.emden_bc_jac(ya,yb)
scipy.integrate.tests.test_bvp.emden_fun(x,y)
scipy.integrate.tests.test_bvp.emden_fun_jac(x,y)
scipy.integrate.tests.test_bvp.emden_sol(x)
scipy.integrate.tests.test_bvp.exp_bc(ya,yb)
scipy.integrate.tests.test_bvp.exp_bc_complex(ya,yb)
scipy.integrate.tests.test_bvp.exp_bc_jac(ya,yb)
scipy.integrate.tests.test_bvp.exp_fun(x,y)
scipy.integrate.tests.test_bvp.exp_fun_jac(x,y)
scipy.integrate.tests.test_bvp.exp_sol(x)
scipy.integrate.tests.test_bvp.nonlin_bc_bc(ya,yb)
scipy.integrate.tests.test_bvp.nonlin_bc_fun(x,y)
scipy.integrate.tests.test_bvp.nonlin_bc_sol(x)
scipy.integrate.tests.test_bvp.shock_bc(ya,yb)
scipy.integrate.tests.test_bvp.shock_fun(x,y)
scipy.integrate.tests.test_bvp.shock_sol(x)
scipy.integrate.tests.test_bvp.sl_bc(ya,yb,p)
scipy.integrate.tests.test_bvp.sl_bc_jac(ya,yb,p)
scipy.integrate.tests.test_bvp.sl_fun(x,y,p)
scipy.integrate.tests.test_bvp.sl_fun_jac(x,y,p)
scipy.integrate.tests.test_bvp.sl_sol(x,p)
scipy.integrate.tests.test_bvp.test_big_problem()
scipy.integrate.tests.test_bvp.test_big_problem_with_parameters()
scipy.integrate.tests.test_bvp.test_complex()
scipy.integrate.tests.test_bvp.test_compute_bc_jac()
scipy.integrate.tests.test_bvp.test_compute_fun_jac()
scipy.integrate.tests.test_bvp.test_compute_global_jac()
scipy.integrate.tests.test_bvp.test_compute_jac_indices()
scipy.integrate.tests.test_bvp.test_failures()
scipy.integrate.tests.test_bvp.test_modify_mesh()
scipy.integrate.tests.test_bvp.test_no_params()
scipy.integrate.tests.test_bvp.test_nonlin_bc()
scipy.integrate.tests.test_bvp.test_parameter_validation()
scipy.integrate.tests.test_bvp.test_shock_layer()
scipy.integrate.tests.test_bvp.test_singular_term()
scipy.integrate.tests.test_bvp.test_verbose()
scipy.integrate.tests.test_bvp.test_with_params()
scipy.integrate.tests.test_bvp.undefined_bc(ya,yb)
scipy.integrate.tests.test_bvp.undefined_fun(x,y)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/tests/test_quadrature.py----------------------------------------
A:scipy.integrate.tests.test_quadrature.(got, _)->fixed_quad(lambda x: x ** p[:, None], 0, 1, n=n)
A:scipy.integrate.tests.test_quadrature.p->numpy.arange(1, 2 * n)
A:scipy.integrate.tests.test_quadrature.(val, err)->quadrature(myfunc, 0, pi, args=2, rtol=1e-10)
A:scipy.integrate.tests.test_quadrature.val->romb(y)
A:scipy.integrate.tests.test_quadrature.x->numpy.arange(3 * 2 * 4).reshape(3, 2, 4)
A:scipy.integrate.tests.test_quadrature.y->numpy.arange(4)
A:scipy.integrate.tests.test_quadrature.(val2, err)->quad(lambda x: np.cos(0.2 * x), x.min(), x.max())
A:scipy.integrate.tests.test_quadrature.val3->romberg(lambda x: np.cos(0.2 * x), x.min(), x.max(), divmax=4)
A:scipy.integrate.tests.test_quadrature.valmath->romberg(math.sin, 0, 1)
A:scipy.integrate.tests.test_quadrature.(wts, errcoff)->newton_cotes(x)
A:scipy.integrate.tests.test_quadrature.numeric_integral->numpy.dot(wts, y)
A:scipy.integrate.tests.test_quadrature.result->simpson(y, axis=-1)
A:scipy.integrate.tests.test_quadrature.expected->simpson(np.array(y, dtype=np.float64), axis=-1)
A:scipy.integrate.tests.test_quadrature.y_int->cumulative_trapezoid(y, dx=3, initial=1.23)
A:scipy.integrate.tests.test_quadrature.y_expected->numpy.array([[[0.0, 0.5, 2.0, 4.5], [0.0, 4.5, 10.0, 16.5]], [[0.0, 8.5, 18.0, 28.5], [0.0, 12.5, 26.0, 40.5]], [[0.0, 16.5, 34.0, 52.5], [0.0, 20.5, 42.0, 64.5]]])
A:scipy.integrate.tests.test_quadrature.mean->numpy.zeros(ndim)
A:scipy.integrate.tests.test_quadrature.cov->numpy.eye(ndim)
A:scipy.integrate.tests.test_quadrature.rng->numpy.random.default_rng(2879434385674690281)
A:scipy.integrate.tests.test_quadrature.qrng->scipy.stats.qmc.Sobol(ndim, seed=rng)
A:scipy.integrate.tests.test_quadrature.a->numpy.zeros(ndim)
A:scipy.integrate.tests.test_quadrature.res->qmc_quad(func, 0, 1)
A:scipy.integrate.tests.test_quadrature.ref->scipy.stats.multivariate_normal.cdf(b, mean, cov, lower_limit=a)
A:scipy.integrate.tests.test_quadrature.logres->qmc_quad(lambda *args: np.log(func(*args)), a, b, n_points=n_points, n_estimates=n_estimates, args=(mean, cov), log=True, qrng=qrng)
scipy.integrate.tests.testTestCumulative_trapezoid
scipy.integrate.tests.testTestCumulative_trapezoid.test_1d(self)
scipy.integrate.tests.testTestCumulative_trapezoid.test_cumtrapz(self)
scipy.integrate.tests.testTestCumulative_trapezoid.test_x_none(self)
scipy.integrate.tests.testTestCumulative_trapezoid.test_y_nd_x_1d(self)
scipy.integrate.tests.testTestCumulative_trapezoid.test_y_nd_x_nd(self)
scipy.integrate.tests.testTestFixedQuad
scipy.integrate.tests.testTestFixedQuad.test_scalar(self)
scipy.integrate.tests.testTestFixedQuad.test_vector(self)
scipy.integrate.tests.testTestQMCQuad
scipy.integrate.tests.testTestQMCQuad.basic_test(self,n_points=2**8,n_estimates=8,signs=np.ones(2))
scipy.integrate.tests.testTestQMCQuad.test_basic(self,n_points,n_estimates)
scipy.integrate.tests.testTestQMCQuad.test_flexible_input(self)
scipy.integrate.tests.testTestQMCQuad.test_input_validation(self)
scipy.integrate.tests.testTestQMCQuad.test_sign(self,signs)
scipy.integrate.tests.testTestQMCQuad.test_zero(self,log)
scipy.integrate.tests.testTestQuadrature
scipy.integrate.tests.testTestQuadrature.quad(self,x,a,b,args)
scipy.integrate.tests.testTestQuadrature.test_newton_cotes(self)
scipy.integrate.tests.testTestQuadrature.test_newton_cotes2(self)
scipy.integrate.tests.testTestQuadrature.test_non_dtype(self)
scipy.integrate.tests.testTestQuadrature.test_quadrature(self)
scipy.integrate.tests.testTestQuadrature.test_quadrature_miniter(self)
scipy.integrate.tests.testTestQuadrature.test_quadrature_rtol(self)
scipy.integrate.tests.testTestQuadrature.test_quadrature_single_args(self)
scipy.integrate.tests.testTestQuadrature.test_romb(self)
scipy.integrate.tests.testTestQuadrature.test_romb_gh_3731(self)
scipy.integrate.tests.testTestQuadrature.test_romberg(self)
scipy.integrate.tests.testTestQuadrature.test_romberg_rtol(self)
scipy.integrate.tests.testTestQuadrature.test_simps(self)
scipy.integrate.tests.testTestQuadrature.test_simpson(self)
scipy.integrate.tests.testTestQuadrature.test_simpson_2d_integer_no_x(self,droplast)
scipy.integrate.tests.testTestTrapezoid
scipy.integrate.tests.testTestTrapezoid.test_trapezoid(self)
scipy.integrate.tests.testTestTrapezoid.test_trapz(self)
scipy.integrate.tests.test_quadrature.TestCumulative_trapezoid
scipy.integrate.tests.test_quadrature.TestCumulative_trapezoid.test_1d(self)
scipy.integrate.tests.test_quadrature.TestCumulative_trapezoid.test_cumtrapz(self)
scipy.integrate.tests.test_quadrature.TestCumulative_trapezoid.test_x_none(self)
scipy.integrate.tests.test_quadrature.TestCumulative_trapezoid.test_y_nd_x_1d(self)
scipy.integrate.tests.test_quadrature.TestCumulative_trapezoid.test_y_nd_x_nd(self)
scipy.integrate.tests.test_quadrature.TestFixedQuad
scipy.integrate.tests.test_quadrature.TestFixedQuad.test_scalar(self)
scipy.integrate.tests.test_quadrature.TestFixedQuad.test_vector(self)
scipy.integrate.tests.test_quadrature.TestQMCQuad
scipy.integrate.tests.test_quadrature.TestQMCQuad.basic_test(self,n_points=2**8,n_estimates=8,signs=np.ones(2))
scipy.integrate.tests.test_quadrature.TestQMCQuad.test_basic(self,n_points,n_estimates)
scipy.integrate.tests.test_quadrature.TestQMCQuad.test_flexible_input(self)
scipy.integrate.tests.test_quadrature.TestQMCQuad.test_input_validation(self)
scipy.integrate.tests.test_quadrature.TestQMCQuad.test_sign(self,signs)
scipy.integrate.tests.test_quadrature.TestQMCQuad.test_zero(self,log)
scipy.integrate.tests.test_quadrature.TestQuadrature
scipy.integrate.tests.test_quadrature.TestQuadrature.quad(self,x,a,b,args)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_newton_cotes(self)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_newton_cotes2(self)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_non_dtype(self)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_quadrature(self)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_quadrature_miniter(self)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_quadrature_rtol(self)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_quadrature_single_args(self)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_romb(self)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_romb_gh_3731(self)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_romberg(self)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_romberg_rtol(self)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_simps(self)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_simpson(self)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_simpson_2d_integer_no_x(self,droplast)
scipy.integrate.tests.test_quadrature.TestTrapezoid
scipy.integrate.tests.test_quadrature.TestTrapezoid.test_trapezoid(self)
scipy.integrate.tests.test_quadrature.TestTrapezoid.test_trapz(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/tests/test_banded_ode_solvers.py----------------------------------------
A:scipy.integrate.tests.test_banded_ode_solvers.(ml, mu)->_band_count(a)
A:scipy.integrate.tests.test_banded_ode_solvers.(lband, uband)->_band_count(a)
A:scipy.integrate.tests.test_banded_ode_solvers.r->ode(_linear_func)
A:scipy.integrate.tests.test_banded_ode_solvers.t->numpy.array(t)
A:scipy.integrate.tests.test_banded_ode_solvers.y->numpy.array(y)
A:scipy.integrate.tests.test_banded_ode_solvers.(lam, v)->numpy.linalg.eig(a)
A:scipy.integrate.tests.test_banded_ode_solvers.c->numpy.linalg.solve(v, y0)
A:scipy.integrate.tests.test_banded_ode_solvers.sol->e.dot(v.T)
A:scipy.integrate.tests.test_banded_ode_solvers.t_exact->numpy.linspace(0, 1.0, 5)
A:scipy.integrate.tests.test_banded_ode_solvers.a_real->numpy.array([[-0.6, 0.1, 0.0, 0.0, 0.0], [0.2, -0.5, 0.9, 0.0, 0.0], [0.1, 0.1, -0.4, 0.1, 0.0], [0.0, 0.3, -0.1, -0.9, -0.3], [0.0, 0.0, 0.1, 0.1, -0.7]])
A:scipy.integrate.tests.test_banded_ode_solvers.a_real_upper->numpy.triu(a_real)
A:scipy.integrate.tests.test_banded_ode_solvers.a_real_lower->numpy.tril(a_real)
A:scipy.integrate.tests.test_banded_ode_solvers.a_real_diag->numpy.triu(a_real_lower)
A:scipy.integrate.tests.test_banded_ode_solvers.y0->numpy.arange(1, a.shape[0] + 1)
A:scipy.integrate.tests.test_banded_ode_solvers.y_exact->_analytical_solution(a, y0, t_exact)
A:scipy.integrate.tests.test_banded_ode_solvers.(t, y)->_solve_linear_sys(a, y0, tend=t_exact[-1], dt=t_exact[1] - t_exact[0], solver=solver, method=meth, use_jac=use_jac, with_jacobian=with_jac, banded=banded)
A:scipy.integrate.tests.test_banded_ode_solvers.a_complex_diag->numpy.diag(np.diag(a_complex))
scipy.integrate.tests.test_banded_ode_solvers._analytical_solution(a,y0,t)
scipy.integrate.tests.test_banded_ode_solvers._band_count(a)
scipy.integrate.tests.test_banded_ode_solvers._linear_banded_jac(t,y,a)
scipy.integrate.tests.test_banded_ode_solvers._linear_func(t,y,a)
scipy.integrate.tests.test_banded_ode_solvers._linear_jac(t,y,a)
scipy.integrate.tests.test_banded_ode_solvers._solve_linear_sys(a,y0,tend=1,dt=0.1,solver=None,method='bdf',use_jac=True,with_jacobian=False,banded=False)
scipy.integrate.tests.test_banded_ode_solvers.test_banded_ode_solvers()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/_ivp/dop853_coefficients.py----------------------------------------
A:scipy.integrate._ivp.dop853_coefficients.C->numpy.array([0.0, 0.05260015195876773, 0.0789002279381516, 0.1183503419072274, 0.2816496580927726, 0.3333333333333333, 0.25, 0.3076923076923077, 0.6512820512820513, 0.6, 0.8571428571428571, 1.0, 1.0, 0.1, 0.2, 0.7777777777777778])
A:scipy.integrate._ivp.dop853_coefficients.A->numpy.zeros((N_STAGES_EXTENDED, N_STAGES_EXTENDED))
A:scipy.integrate._ivp.dop853_coefficients.E3->numpy.zeros(N_STAGES + 1)
A:scipy.integrate._ivp.dop853_coefficients.E3[:-1]->B.copy()
A:scipy.integrate._ivp.dop853_coefficients.E5->numpy.zeros(N_STAGES + 1)
A:scipy.integrate._ivp.dop853_coefficients.D->numpy.zeros((INTERPOLATOR_POWER - 3, N_STAGES_EXTENDED))


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/_ivp/common.py----------------------------------------
A:scipy.integrate._ivp.common.rtol->numpy.maximum(rtol, 100 * EPS)
A:scipy.integrate._ivp.common.atol->numpy.asarray(atol)
A:scipy.integrate._ivp.common.d0->norm(y0 / scale)
A:scipy.integrate._ivp.common.d1->norm(f0 / scale)
A:scipy.integrate._ivp.common.f1->fun(t0 + h0 * direction, y1)
A:scipy.integrate._ivp.common.h1->max(1e-06, h0 * 0.001)
A:scipy.integrate._ivp.common.ts->numpy.asarray(ts)
A:scipy.integrate._ivp.common.d->numpy.diff(ts)
A:scipy.integrate._ivp.common.self.n_segments->len(interpolants)
A:scipy.integrate._ivp.common.ind->numpy.searchsorted(self.ts_sorted, t, side='right')
A:scipy.integrate._ivp.common.segment->min(max(ind - 1, 0), self.n_segments - 1)
A:scipy.integrate._ivp.common.t->numpy.asarray(t)
A:scipy.integrate._ivp.common.order->numpy.argsort(t)
A:scipy.integrate._ivp.common.reverse->numpy.empty_like(order)
A:scipy.integrate._ivp.common.reverse[order]->numpy.arange(order.shape[0])
A:scipy.integrate._ivp.common.segments->numpy.searchsorted(self.ts_sorted, t_sorted, side='right')
A:scipy.integrate._ivp.common.y->numpy.asarray(y)
A:scipy.integrate._ivp.common.ys->numpy.hstack(ys)
A:scipy.integrate._ivp.common.factor->numpy.maximum(factor, NUM_JAC_MIN_FACTOR)
A:scipy.integrate._ivp.common.h_vecs->numpy.empty((groups_unique.shape[0], n))
A:scipy.integrate._ivp.common.f_new->fun(t, y[:, None] + h_vecs)
A:scipy.integrate._ivp.common.max_ind->numpy.array(abs(diff).argmax(axis=0)).ravel()
A:scipy.integrate._ivp.common.r->numpy.arange(ind.shape[0])
A:scipy.integrate._ivp.common.max_diff->numpy.asarray(np.abs(diff[max_ind, r])).ravel()
A:scipy.integrate._ivp.common.scale->numpy.maximum(np.abs(f[max_ind]), np.abs(f_new[max_ind, groups[r]]))
A:scipy.integrate._ivp.common.(ind,)->numpy.nonzero(diff_too_small)
A:scipy.integrate._ivp.common.max_diff_new->numpy.asarray(np.abs(diff_new[max_ind_new, r])).ravel()
A:scipy.integrate._ivp.common.scale_new->numpy.maximum(np.abs(f[max_ind_new]), np.abs(f_new[max_ind_new, groups_map[groups[ind]]]))
A:scipy.integrate._ivp.common.(update,)->numpy.nonzero(update)
A:scipy.integrate._ivp.common.e->numpy.equal(group, groups)
A:scipy.integrate._ivp.common.(i, j, _)->find(structure[:, ind])
A:scipy.integrate._ivp.common.diff->coo_matrix((df[i, groups[j]], (i, j)), shape=(n, n)).tocsc()
A:scipy.integrate._ivp.common.h_new_all->numpy.zeros(n)
A:scipy.integrate._ivp.common.groups_unique->numpy.unique(groups[ind])
A:scipy.integrate._ivp.common.groups_map->numpy.empty(n_groups, dtype=int)
A:scipy.integrate._ivp.common.diff_new->coo_matrix((df[i, groups_map[groups[ind[j]]]], (i, j)), shape=(n, ind.shape[0])).tocsc()
A:scipy.integrate._ivp.common.max_ind_new->numpy.array(abs(diff_new).argmax(axis=0)).ravel()
scipy.integrate.OdeSolution(self,ts,interpolants)
scipy.integrate.OdeSolution._call_single(self,t)
scipy.integrate._ivp.common.OdeSolution(self,ts,interpolants)
scipy.integrate._ivp.common.OdeSolution.__init__(self,ts,interpolants)
scipy.integrate._ivp.common.OdeSolution._call_single(self,t)
scipy.integrate._ivp.common._dense_num_jac(fun,t,y,f,h,factor,y_scale)
scipy.integrate._ivp.common._sparse_num_jac(fun,t,y,f,h,factor,y_scale,structure,groups)
scipy.integrate._ivp.common.norm(x)
scipy.integrate._ivp.common.num_jac(fun,t,y,f,threshold,factor,sparsity=None)
scipy.integrate._ivp.common.select_initial_step(fun,t0,y0,f0,direction,order,rtol,atol)
scipy.integrate._ivp.common.validate_first_step(first_step,t0,t_bound)
scipy.integrate._ivp.common.validate_max_step(max_step)
scipy.integrate._ivp.common.validate_tol(rtol,atol,n)
scipy.integrate._ivp.common.warn_extraneous(extraneous)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/_ivp/radau.py----------------------------------------
A:scipy.integrate._ivp.radau.C->numpy.array([(4 - S6) / 10, (4 + S6) / 10, 1])
A:scipy.integrate._ivp.radau.T->numpy.array([[0.09443876248897524, -0.1412552950209542, 0.03002919410514742], [0.2502131229653333, 0.20412935229379994, -0.3829421127572619], [1, 1, 0]])
A:scipy.integrate._ivp.radau.TI->numpy.array([[4.178718591551904, 0.32768282076106237, 0.5233764454994495], [-4.178718591551904, -0.32768282076106237, 0.47662355450055044], [0.5028726349457868, -2.571926949855605, 0.5960392048282249]])
A:scipy.integrate._ivp.radau.P->numpy.array([[13 / 3 + 7 * S6 / 3, -23 / 3 - 22 * S6 / 3, 10 / 3 + 5 * S6], [13 / 3 - 7 * S6 / 3, -23 / 3 + 22 * S6 / 3, 10 / 3 - 5 * S6], [1 / 3, -8 / 3, 10 / 3]])
A:scipy.integrate._ivp.radau.W->numpy.array([[4.178718591551904, 0.32768282076106237, 0.5233764454994495], [-4.178718591551904, -0.32768282076106237, 0.47662355450055044], [0.5028726349457868, -2.571926949855605, 0.5960392048282249]]).dot(Z0)
A:scipy.integrate._ivp.radau.F->numpy.empty((3, n))
A:scipy.integrate._ivp.radau.dW->numpy.empty_like(W)
A:scipy.integrate._ivp.radau.F[i]->fun(t + ch[i], y + Z[i])
A:scipy.integrate._ivp.radau.dW_real->solve_lu(LU_real, f_real)
A:scipy.integrate._ivp.radau.dW_complex->solve_lu(LU_complex, f_complex)
A:scipy.integrate._ivp.radau.dW_norm->norm(dW / scale)
A:scipy.integrate._ivp.radau.Z->numpy.array([[0.09443876248897524, -0.1412552950209542, 0.03002919410514742], [0.2502131229653333, 0.20412935229379994, -0.3829421127572619], [1, 1, 0]]).dot(W)
A:scipy.integrate._ivp.radau.self.max_step->validate_max_step(max_step)
A:scipy.integrate._ivp.radau.(self.rtol, self.atol)->validate_tol(rtol, atol, self.n)
A:scipy.integrate._ivp.radau.self.f->self.fun(self.t, self.y)
A:scipy.integrate._ivp.radau.self.h_abs->validate_first_step(first_step, t0, t_bound)
A:scipy.integrate._ivp.radau.self.newton_tol->max(10 * EPS / rtol, min(0.03, rtol ** 0.5))
A:scipy.integrate._ivp.radau.(self.jac, self.J)->self._validate_jac(jac, jac_sparsity)
A:scipy.integrate._ivp.radau.I->numpy.identity(self.n)
A:scipy.integrate._ivp.radau.sparsity->csc_matrix(sparsity)
A:scipy.integrate._ivp.radau.groups->group_columns(sparsity)
A:scipy.integrate._ivp.radau.(J, self.jac_factor)->num_jac(self.fun_vectorized, t, y, f, self.atol, self.jac_factor, sparsity)
A:scipy.integrate._ivp.radau.J->jac(t_new, y_new, f_new)
A:scipy.integrate._ivp.radau.h_abs->numpy.abs(h)
A:scipy.integrate._ivp.radau.Z0->numpy.zeros((3, y.shape[0]))
A:scipy.integrate._ivp.radau.LU_real->self.lu(MU_REAL / h * self.I - J)
A:scipy.integrate._ivp.radau.LU_complex->self.lu(MU_COMPLEX / h * self.I - J)
A:scipy.integrate._ivp.radau.(converged, n_iter, Z, rate)->solve_collocation_system(self.fun, t, y, h, Z0, scale, self.newton_tol, LU_real, LU_complex, self.solve_lu)
A:scipy.integrate._ivp.radau.error->self.solve_lu(LU_real, self.fun(t, y + error) + ZE)
A:scipy.integrate._ivp.radau.error_norm->norm(error / scale)
A:scipy.integrate._ivp.radau.factor->min(MAX_FACTOR, safety * factor)
A:scipy.integrate._ivp.radau.f_new->self.fun(t_new, y_new)
A:scipy.integrate._ivp.radau.self.sol->self._compute_dense_output()
A:scipy.integrate._ivp.radau.Q->numpy.dot(self.Z.T, P)
A:scipy.integrate._ivp.radau.p->numpy.cumprod(p, axis=0)
A:scipy.integrate._ivp.radau.y->numpy.dot(self.Q, p)
scipy.integrate.Radau(self,fun,t0,y0,t_bound,max_step=np.inf,rtol=0.001,atol=1e-06,jac=None,jac_sparsity=None,vectorized=False,first_step=None,**extraneous)
scipy.integrate.Radau._compute_dense_output(self)
scipy.integrate.Radau._dense_output_impl(self)
scipy.integrate.Radau._step_impl(self)
scipy.integrate.Radau._validate_jac(self,jac,sparsity)
scipy.integrate.RadauDenseOutput(self,t_old,t,y_old,Q)
scipy.integrate.RadauDenseOutput._call_impl(self,t)
scipy.integrate._ivp.radau.Radau(self,fun,t0,y0,t_bound,max_step=np.inf,rtol=0.001,atol=1e-06,jac=None,jac_sparsity=None,vectorized=False,first_step=None,**extraneous)
scipy.integrate._ivp.radau.Radau.__init__(self,fun,t0,y0,t_bound,max_step=np.inf,rtol=0.001,atol=1e-06,jac=None,jac_sparsity=None,vectorized=False,first_step=None,**extraneous)
scipy.integrate._ivp.radau.Radau._compute_dense_output(self)
scipy.integrate._ivp.radau.Radau._dense_output_impl(self)
scipy.integrate._ivp.radau.Radau._step_impl(self)
scipy.integrate._ivp.radau.Radau._validate_jac(self,jac,sparsity)
scipy.integrate._ivp.radau.RadauDenseOutput(self,t_old,t,y_old,Q)
scipy.integrate._ivp.radau.RadauDenseOutput.__init__(self,t_old,t,y_old,Q)
scipy.integrate._ivp.radau.RadauDenseOutput._call_impl(self,t)
scipy.integrate._ivp.radau.predict_factor(h_abs,h_abs_old,error_norm,error_norm_old)
scipy.integrate._ivp.radau.solve_collocation_system(fun,t,y,h,Z0,scale,tol,LU_real,LU_complex,solve_lu)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/_ivp/ivp.py----------------------------------------
A:scipy.integrate._ivp.ivp.is_terminal->numpy.empty(len(events), dtype=bool)
A:scipy.integrate._ivp.ivp.direction->numpy.empty(len(events))
A:scipy.integrate._ivp.ivp.roots->numpy.asarray(roots)
A:scipy.integrate._ivp.ivp.order->numpy.argsort(-roots)
A:scipy.integrate._ivp.ivp.(t0, tf)->map(float, t_span)
A:scipy.integrate._ivp.ivp.jac->options.get('jac')
A:scipy.integrate._ivp.ivp.t_eval->numpy.asarray(t_eval)
A:scipy.integrate._ivp.ivp.d->numpy.diff(t_eval)
A:scipy.integrate._ivp.ivp.solver->method(fun, t0, y0, tf, vectorized=vectorized, **options)
A:scipy.integrate._ivp.ivp.(events, is_terminal, event_dir)->prepare_events(events)
A:scipy.integrate._ivp.ivp.message->MESSAGES.get(status, message)
A:scipy.integrate._ivp.ivp.sol->OdeSolution(ti, interpolants)
A:scipy.integrate._ivp.ivp.active_events->find_active_events(g, g_new, event_dir)
A:scipy.integrate._ivp.ivp.(root_indices, roots, terminate)->handle_events(sol, events, active_events, is_terminal, t_old, t)
A:scipy.integrate._ivp.ivp.y->sol(t)
A:scipy.integrate._ivp.ivp.t_eval_i_new->numpy.searchsorted(t_eval, t, side='left')
A:scipy.integrate._ivp.ivp.ts->numpy.hstack(ts)
A:scipy.integrate._ivp.ivp.ys->numpy.hstack(ys)
scipy.integrate._ivp.ivp.OdeResult(OptimizeResult)
scipy.integrate._ivp.ivp.find_active_events(g,g_new,direction)
scipy.integrate._ivp.ivp.handle_events(sol,events,active_events,is_terminal,t_old,t)
scipy.integrate._ivp.ivp.prepare_events(events)
scipy.integrate._ivp.ivp.solve_event_equation(event,sol,t_old,t)
scipy.integrate._ivp.ivp.solve_ivp(fun,t_span,y0,method='RK45',t_eval=None,dense_output=False,events=None,vectorized=False,args=None,**options)
scipy.integrate.solve_ivp(fun,t_span,y0,method='RK45',t_eval=None,dense_output=False,events=None,vectorized=False,args=None,**options)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/_ivp/base.py----------------------------------------
A:scipy.integrate._ivp.base.y0->y0.astype(dtype, copy=False).astype(dtype, copy=False)
A:scipy.integrate._ivp.base.(self._fun, self.y)->check_arguments(fun, y0, support_complex)
A:scipy.integrate._ivp.base.f->numpy.empty_like(y)
A:scipy.integrate._ivp.base.f[:, i]->self._fun(t, yi)
A:scipy.integrate._ivp.base.(success, message)->self._step_impl()
A:scipy.integrate._ivp.base.self.t_min->min(t, t_old)
A:scipy.integrate._ivp.base.self.t_max->max(t, t_old)
A:scipy.integrate._ivp.base.t->numpy.asarray(t)
A:scipy.integrate._ivp.base.ret->numpy.empty((self.value.shape[0], t.shape[0]))
scipy.integrate.DenseOutput(self,t_old,t)
scipy.integrate.DenseOutput._call_impl(self,t)
scipy.integrate.OdeSolver(self,fun,t0,y0,t_bound,vectorized,support_complex=False)
scipy.integrate.OdeSolver._dense_output_impl(self)
scipy.integrate.OdeSolver._step_impl(self)
scipy.integrate.OdeSolver.dense_output(self)
scipy.integrate.OdeSolver.step(self)
scipy.integrate.OdeSolver.step_size(self)
scipy.integrate._ivp.base.ConstantDenseOutput(self,t_old,t,value)
scipy.integrate._ivp.base.ConstantDenseOutput.__init__(self,t_old,t,value)
scipy.integrate._ivp.base.ConstantDenseOutput._call_impl(self,t)
scipy.integrate._ivp.base.DenseOutput(self,t_old,t)
scipy.integrate._ivp.base.DenseOutput.__init__(self,t_old,t)
scipy.integrate._ivp.base.DenseOutput._call_impl(self,t)
scipy.integrate._ivp.base.OdeSolver(self,fun,t0,y0,t_bound,vectorized,support_complex=False)
scipy.integrate._ivp.base.OdeSolver.__init__(self,fun,t0,y0,t_bound,vectorized,support_complex=False)
scipy.integrate._ivp.base.OdeSolver._dense_output_impl(self)
scipy.integrate._ivp.base.OdeSolver._step_impl(self)
scipy.integrate._ivp.base.OdeSolver.dense_output(self)
scipy.integrate._ivp.base.OdeSolver.step(self)
scipy.integrate._ivp.base.OdeSolver.step_size(self)
scipy.integrate._ivp.base.check_arguments(fun,y0,support_complex)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/_ivp/bdf.py----------------------------------------
A:scipy.integrate._ivp.bdf.J->self.jac(t_new, y_predict)
A:scipy.integrate._ivp.bdf.M->numpy.zeros((order + 1, order + 1))
A:scipy.integrate._ivp.bdf.R->compute_R(order, factor)
A:scipy.integrate._ivp.bdf.U->compute_R(order, 1)
A:scipy.integrate._ivp.bdf.RU->compute_R(order, factor).dot(U)
A:scipy.integrate._ivp.bdf.D[:order + 1]->numpy.dot(RU.T, D[:order + 1])
A:scipy.integrate._ivp.bdf.y->numpy.dot(self.D[1:].T, p)
A:scipy.integrate._ivp.bdf.f->self.fun_single(t, y)
A:scipy.integrate._ivp.bdf.dy->solve_lu(LU, c * f - psi - d)
A:scipy.integrate._ivp.bdf.dy_norm->norm(dy / scale)
A:scipy.integrate._ivp.bdf.self.max_step->validate_max_step(max_step)
A:scipy.integrate._ivp.bdf.(self.rtol, self.atol)->validate_tol(rtol, atol, self.n)
A:scipy.integrate._ivp.bdf.self.h_abs->validate_first_step(first_step, t0, t_bound)
A:scipy.integrate._ivp.bdf.self.newton_tol->max(10 * EPS / rtol, min(0.03, rtol ** 0.5))
A:scipy.integrate._ivp.bdf.(self.jac, self.J)->self._validate_jac(jac, jac_sparsity)
A:scipy.integrate._ivp.bdf.I->numpy.identity(self.n, dtype=self.y.dtype)
A:scipy.integrate._ivp.bdf.kappa->numpy.array([0, -0.185, -1 / 9, -0.0823, -0.0415, 0])
A:scipy.integrate._ivp.bdf.self.gamma->numpy.hstack((0, np.cumsum(1 / np.arange(1, MAX_ORDER + 1))))
A:scipy.integrate._ivp.bdf.D->numpy.empty((MAX_ORDER + 3, self.n), dtype=self.y.dtype)
A:scipy.integrate._ivp.bdf.sparsity->csc_matrix(sparsity)
A:scipy.integrate._ivp.bdf.groups->group_columns(sparsity)
A:scipy.integrate._ivp.bdf.(J, self.jac_factor)->num_jac(self.fun_vectorized, t, y, f, self.atol, self.jac_factor, sparsity)
A:scipy.integrate._ivp.bdf.h_abs->numpy.abs(h)
A:scipy.integrate._ivp.bdf.y_predict->numpy.sum(D[:order + 1], axis=0)
A:scipy.integrate._ivp.bdf.LU->self.lu(self.I - c * J)
A:scipy.integrate._ivp.bdf.(converged, n_iter, y_new, d)->solve_bdf_system(self.fun, t_new, y_predict, c, psi, LU, self.solve_lu, scale, self.newton_tol)
A:scipy.integrate._ivp.bdf.error_norm->norm(error / scale)
A:scipy.integrate._ivp.bdf.factor->min(MAX_FACTOR, safety * np.max(factors))
A:scipy.integrate._ivp.bdf.error_m_norm->norm(error_m / scale)
A:scipy.integrate._ivp.bdf.error_p_norm->norm(error_p / scale)
A:scipy.integrate._ivp.bdf.error_norms->numpy.array([error_m_norm, error_norm, error_p_norm])
A:scipy.integrate._ivp.bdf.p->numpy.cumprod(x, axis=0)
scipy.integrate.BDF(self,fun,t0,y0,t_bound,max_step=np.inf,rtol=0.001,atol=1e-06,jac=None,jac_sparsity=None,vectorized=False,first_step=None,**extraneous)
scipy.integrate.BDF._dense_output_impl(self)
scipy.integrate.BDF._step_impl(self)
scipy.integrate.BDF._validate_jac(self,jac,sparsity)
scipy.integrate._ivp.bdf.BDF(self,fun,t0,y0,t_bound,max_step=np.inf,rtol=0.001,atol=1e-06,jac=None,jac_sparsity=None,vectorized=False,first_step=None,**extraneous)
scipy.integrate._ivp.bdf.BDF.__init__(self,fun,t0,y0,t_bound,max_step=np.inf,rtol=0.001,atol=1e-06,jac=None,jac_sparsity=None,vectorized=False,first_step=None,**extraneous)
scipy.integrate._ivp.bdf.BDF._dense_output_impl(self)
scipy.integrate._ivp.bdf.BDF._step_impl(self)
scipy.integrate._ivp.bdf.BDF._validate_jac(self,jac,sparsity)
scipy.integrate._ivp.bdf.BdfDenseOutput(self,t_old,t,h,order,D)
scipy.integrate._ivp.bdf.BdfDenseOutput.__init__(self,t_old,t,h,order,D)
scipy.integrate._ivp.bdf.BdfDenseOutput._call_impl(self,t)
scipy.integrate._ivp.bdf.change_D(D,order,factor)
scipy.integrate._ivp.bdf.compute_R(order,factor)
scipy.integrate._ivp.bdf.solve_bdf_system(fun,t_new,y_predict,c,psi,LU,solve_lu,scale,tol)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/_ivp/lsoda.py----------------------------------------
A:scipy.integrate._ivp.lsoda.first_step->validate_first_step(first_step, t0, t_bound)
A:scipy.integrate._ivp.lsoda.(rtol, atol)->validate_tol(rtol, atol, self.n)
A:scipy.integrate._ivp.lsoda.solver->ode(self.fun, jac)
A:scipy.integrate._ivp.lsoda.(solver._y, solver.t)->integrator.run(solver.f, solver.jac or (lambda : None), solver._y, solver.t, self.t_bound, solver.f_params, solver.jac_params)
A:scipy.integrate._ivp.lsoda.yh->numpy.reshape(rwork[20:20 + (order + 1) * self.n], (self.n, order + 1), order='F').copy()
A:scipy.integrate._ivp.lsoda.self.p->numpy.arange(order + 1)
scipy.integrate.LSODA(self,fun,t0,y0,t_bound,first_step=None,min_step=0.0,max_step=np.inf,rtol=0.001,atol=1e-06,jac=None,lband=None,uband=None,vectorized=False,**extraneous)
scipy.integrate.LSODA._dense_output_impl(self)
scipy.integrate.LSODA._step_impl(self)
scipy.integrate._ivp.lsoda.LSODA(self,fun,t0,y0,t_bound,first_step=None,min_step=0.0,max_step=np.inf,rtol=0.001,atol=1e-06,jac=None,lband=None,uband=None,vectorized=False,**extraneous)
scipy.integrate._ivp.lsoda.LSODA.__init__(self,fun,t0,y0,t_bound,first_step=None,min_step=0.0,max_step=np.inf,rtol=0.001,atol=1e-06,jac=None,lband=None,uband=None,vectorized=False,**extraneous)
scipy.integrate._ivp.lsoda.LSODA._dense_output_impl(self)
scipy.integrate._ivp.lsoda.LSODA._step_impl(self)
scipy.integrate._ivp.lsoda.LsodaDenseOutput(self,t_old,t,h,order,yh)
scipy.integrate._ivp.lsoda.LsodaDenseOutput.__init__(self,t_old,t,h,order,yh)
scipy.integrate._ivp.lsoda.LsodaDenseOutput._call_impl(self,t)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/_ivp/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/_ivp/rk.py----------------------------------------
A:scipy.integrate._ivp.rk.K[s]->self.fun(self.t_old + c * h, self.y_old + dy)
A:scipy.integrate._ivp.rk.f_new->fun(t + h, y_new)
A:scipy.integrate._ivp.rk.self.max_step->validate_max_step(max_step)
A:scipy.integrate._ivp.rk.(self.rtol, self.atol)->validate_tol(rtol, atol, self.n)
A:scipy.integrate._ivp.rk.self.f->self.fun(self.t, self.y)
A:scipy.integrate._ivp.rk.self.h_abs->validate_first_step(first_step, t0, t_bound)
A:scipy.integrate._ivp.rk.self.K->numpy.empty((self.n_stages + 1, self.n), dtype=self.y.dtype)
A:scipy.integrate._ivp.rk.h_abs->numpy.abs(h)
A:scipy.integrate._ivp.rk.(y_new, f_new)->rk_step(self.fun, t, y, self.f, h, self.A, self.B, self.C, self.K)
A:scipy.integrate._ivp.rk.error_norm->self._estimate_error_norm(self.K, h, scale)
A:scipy.integrate._ivp.rk.factor->min(1, factor)
A:scipy.integrate._ivp.rk.Q->self.K.T.dot(self.P)
A:scipy.integrate._ivp.rk.C->numpy.array([0, 1 / 5, 3 / 10, 4 / 5, 8 / 9, 1])
A:scipy.integrate._ivp.rk.A->numpy.array([[0, 0, 0, 0, 0], [1 / 5, 0, 0, 0, 0], [3 / 40, 9 / 40, 0, 0, 0], [44 / 45, -56 / 15, 32 / 9, 0, 0], [19372 / 6561, -25360 / 2187, 64448 / 6561, -212 / 729, 0], [9017 / 3168, -355 / 33, 46732 / 5247, 49 / 176, -5103 / 18656]])
A:scipy.integrate._ivp.rk.B->numpy.array([35 / 384, 0, 500 / 1113, 125 / 192, -2187 / 6784, 11 / 84])
A:scipy.integrate._ivp.rk.E->numpy.array([-71 / 57600, 0, 71 / 16695, -71 / 1920, 17253 / 339200, -22 / 525, 1 / 40])
A:scipy.integrate._ivp.rk.P->numpy.array([[1, -8048581381 / 2820520608, 8663915743 / 2820520608, -12715105075 / 11282082432], [0, 0, 0, 0], [0, 131558114200 / 32700410799, -68118460800 / 10900136933, 87487479700 / 32700410799], [0, -1754552775 / 470086768, 14199869525 / 1410260304, -10690763975 / 1880347072], [0, 127303824393 / 49829197408, -318862633887 / 49829197408, 701980252875 / 199316789632], [0, -282668133 / 205662961, 2019193451 / 616988883, -1453857185 / 822651844], [0, 40617522 / 29380423, -110615467 / 29380423, 69997945 / 29380423]])
A:scipy.integrate._ivp.rk.self.K_extended->numpy.empty((dop853_coefficients.N_STAGES_EXTENDED, self.n), dtype=self.y.dtype)
A:scipy.integrate._ivp.rk.err5->numpy.dot(K.T, self.E5)
A:scipy.integrate._ivp.rk.err3->numpy.dot(K.T, self.E3)
A:scipy.integrate._ivp.rk.denom->numpy.hypot(np.abs(err5), 0.1 * np.abs(err3))
A:scipy.integrate._ivp.rk.correction_factor->numpy.ones_like(err5)
A:scipy.integrate._ivp.rk.F->numpy.empty((dop853_coefficients.INTERPOLATOR_POWER, self.n), dtype=self.y_old.dtype)
A:scipy.integrate._ivp.rk.p->numpy.cumprod(p, axis=0)
A:scipy.integrate._ivp.rk.y->numpy.zeros((len(x), len(self.y_old)), dtype=self.y_old.dtype)
scipy.integrate.DOP853(self,fun,t0,y0,t_bound,max_step=np.inf,rtol=0.001,atol=1e-06,vectorized=False,first_step=None,**extraneous)
scipy.integrate.DOP853._dense_output_impl(self)
scipy.integrate.DOP853._estimate_error(self,K,h)
scipy.integrate.DOP853._estimate_error_norm(self,K,h,scale)
scipy.integrate.RK23(RungeKutta)
scipy.integrate.RK45(RungeKutta)
scipy.integrate._ivp.rk.DOP853(self,fun,t0,y0,t_bound,max_step=np.inf,rtol=0.001,atol=1e-06,vectorized=False,first_step=None,**extraneous)
scipy.integrate._ivp.rk.DOP853.__init__(self,fun,t0,y0,t_bound,max_step=np.inf,rtol=0.001,atol=1e-06,vectorized=False,first_step=None,**extraneous)
scipy.integrate._ivp.rk.DOP853._dense_output_impl(self)
scipy.integrate._ivp.rk.DOP853._estimate_error(self,K,h)
scipy.integrate._ivp.rk.DOP853._estimate_error_norm(self,K,h,scale)
scipy.integrate._ivp.rk.Dop853DenseOutput(self,t_old,t,y_old,F)
scipy.integrate._ivp.rk.Dop853DenseOutput.__init__(self,t_old,t,y_old,F)
scipy.integrate._ivp.rk.Dop853DenseOutput._call_impl(self,t)
scipy.integrate._ivp.rk.RK23(RungeKutta)
scipy.integrate._ivp.rk.RK45(RungeKutta)
scipy.integrate._ivp.rk.RkDenseOutput(self,t_old,t,y_old,Q)
scipy.integrate._ivp.rk.RkDenseOutput.__init__(self,t_old,t,y_old,Q)
scipy.integrate._ivp.rk.RkDenseOutput._call_impl(self,t)
scipy.integrate._ivp.rk.RungeKutta(self,fun,t0,y0,t_bound,max_step=np.inf,rtol=0.001,atol=1e-06,vectorized=False,first_step=None,**extraneous)
scipy.integrate._ivp.rk.RungeKutta.__init__(self,fun,t0,y0,t_bound,max_step=np.inf,rtol=0.001,atol=1e-06,vectorized=False,first_step=None,**extraneous)
scipy.integrate._ivp.rk.RungeKutta._dense_output_impl(self)
scipy.integrate._ivp.rk.RungeKutta._estimate_error(self,K,h)
scipy.integrate._ivp.rk.RungeKutta._estimate_error_norm(self,K,h,scale)
scipy.integrate._ivp.rk.RungeKutta._step_impl(self)
scipy.integrate._ivp.rk.rk_step(fun,t,y,f,h,A,B,C,K)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/_ivp/tests/test_rk.py----------------------------------------
A:scipy.integrate._ivp.tests.test_rk.solver->solver_class(lambda t, y: 1j * y, 0, [1j], 1, first_step=h)
A:scipy.integrate._ivp.tests.test_rk.error_estimate->solver_class(lambda t, y: 1j * y, 0, [1j], 1, first_step=h)._estimate_error(solver.K, step)
A:scipy.integrate._ivp.tests.test_rk.err_norm->solver_class(lambda t, y: 1j * y, 0, [1j], 1, first_step=h)._estimate_error_norm(solver.K, h, scale=[1])
scipy.integrate._ivp.tests.test_rk.test_coefficient_properties(solver)
scipy.integrate._ivp.tests.test_rk.test_coefficient_properties_dop853()
scipy.integrate._ivp.tests.test_rk.test_error_estimation(solver_class)
scipy.integrate._ivp.tests.test_rk.test_error_estimation_complex(solver_class)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/integrate/_ivp/tests/test_ivp.py----------------------------------------
A:scipy.integrate._ivp.tests.test_ivp.y->numpy.random.randn(n)
A:scipy.integrate._ivp.tests.test_ivp.f->fun(0, y[:, None]).ravel()
A:scipy.integrate._ivp.tests.test_ivp.cols->numpy.hstack(cols)
A:scipy.integrate._ivp.tests.test_ivp.rows->numpy.hstack(rows)
A:scipy.integrate._ivp.tests.test_ivp.res->solve_ivp(fun_rational, t_span, y0, rtol=rtol, atol=atol, method=method, t_eval=t_eval, events=early_event, jac=jac_rational)
A:scipy.integrate._ivp.tests.test_ivp.y_true->sol_rational(res.t)
A:scipy.integrate._ivp.tests.test_ivp.e->compute_error(res.y, y_true, rtol, atol)
A:scipy.integrate._ivp.tests.test_ivp.tc->numpy.linspace(*t_span)
A:scipy.integrate._ivp.tests.test_ivp.yc_true->sol_rational(tc)
A:scipy.integrate._ivp.tests.test_ivp.yc->solve_ivp(fun_rational, t_span, y0, rtol=rtol, atol=atol, method=method, t_eval=t_eval, events=early_event, jac=jac_rational).sol(tc)
A:scipy.integrate._ivp.tests.test_ivp.y0->numpy.zeros((0,))
A:scipy.integrate._ivp.tests.test_ivp.sparsity->medazko_sparsity(n)
A:scipy.integrate._ivp.tests.test_ivp.J->numpy.array([[0, -omega, 0], [omega, 0, 0], [0, 0, k * (1 - 2 * z)]])
A:scipy.integrate._ivp.tests.test_ivp.J_sparse->csc_matrix(J)
A:scipy.integrate._ivp.tests.test_ivp.solver->cls(fun_rational, 5, y0, np.inf)
A:scipy.integrate._ivp.tests.test_ivp.message->cls(fun_rational, 5, y0, np.inf).step()
A:scipy.integrate._ivp.tests.test_ivp.t_eval->numpy.linspace(7.5, 9, 16)
A:scipy.integrate._ivp.tests.test_ivp.res_d->solve_ivp(fun_rational, t_span, y0, rtol=rtol, atol=atol, t_eval=t_eval, dense_output=True)
A:scipy.integrate._ivp.tests.test_ivp.sol->solve_ivp(fun_with_arg, (0, 0.1), [1], args=(-1,))
A:scipy.integrate._ivp.tests.test_ivp.ts->numpy.array([1, 1])
A:scipy.integrate._ivp.tests.test_ivp.s1->ConstantDenseOutput(ts[0], ts[1], np.array([-1]))
A:scipy.integrate._ivp.tests.test_ivp.s2->ConstantDenseOutput(ts[1], ts[2], np.array([1]))
A:scipy.integrate._ivp.tests.test_ivp.s->ConstantDenseOutput(1, 1, np.array([10]))
A:scipy.integrate._ivp.tests.test_ivp.J_true->jac(t, y)
A:scipy.integrate._ivp.tests.test_ivp.(J_num, factor)->num_jac(fun, t, y, f, threshold, factor)
A:scipy.integrate._ivp.tests.test_ivp.z->numpy.zeros(y.shape[1])
A:scipy.integrate._ivp.tests.test_ivp.A->structure(n)
A:scipy.integrate._ivp.tests.test_ivp.groups->group_columns(A)
A:scipy.integrate._ivp.tests.test_ivp.(J_num_sparse, factor_sparse)->num_jac(fun, 0, y.ravel(), f, 1e-08, factor, sparsity=(A, groups))
A:scipy.integrate._ivp.tests.test_ivp.(J_num_dense, factor_dense)->num_jac(fun, 0, y.ravel(), f, 1e-08, factor)
A:scipy.integrate._ivp.tests.test_ivp.factor->numpy.random.uniform(0, 1e-12, size=n)
A:scipy.integrate._ivp.tests.test_ivp.t->numpy.linspace(0, zfinalevents_t[0], 250)
A:scipy.integrate._ivp.tests.test_ivp.w->solve_ivp(fun_with_arg, (0, 0.1), [1], args=(-1,)).sol(t)
A:scipy.integrate._ivp.tests.test_ivp.x0events->solve_ivp(fun_with_arg, (0, 0.1), [1], args=(-1,)).sol(x0events_t)
A:scipy.integrate._ivp.tests.test_ivp.y0events->solve_ivp(fun_with_arg, (0, 0.1), [1], args=(-1,)).sol(y0events_t)
A:scipy.integrate._ivp.tests.test_ivp.zfinalevents->solve_ivp(fun_with_arg, (0, 0.1), [1], args=(-1,)).sol(zfinalevents_t)
A:scipy.integrate._ivp.tests.test_ivp.err1->numpy.abs(np.linalg.norm(sol.y[:, -1] - np.exp(1)))
A:scipy.integrate._ivp.tests.test_ivp.err2->numpy.abs(np.linalg.norm(sol.y[:, -1] - np.exp(1)))
A:scipy.integrate._ivp.tests.test_ivp.result->solve_ivp(fun_zero, [0, 10], np.ones(3), method=method)
scipy.integrate._ivp.tests.test_ivp.compute_error(y,y_true,rtol,atol)
scipy.integrate._ivp.tests.test_ivp.fun_complex(t,y)
scipy.integrate._ivp.tests.test_ivp.fun_linear(t,y)
scipy.integrate._ivp.tests.test_ivp.fun_medazko(t,y)
scipy.integrate._ivp.tests.test_ivp.fun_rational(t,y)
scipy.integrate._ivp.tests.test_ivp.fun_rational_vectorized(t,y)
scipy.integrate._ivp.tests.test_ivp.fun_zero(t,y)
scipy.integrate._ivp.tests.test_ivp.jac_complex(t,y)
scipy.integrate._ivp.tests.test_ivp.jac_complex_sparse(t,y)
scipy.integrate._ivp.tests.test_ivp.jac_linear()
scipy.integrate._ivp.tests.test_ivp.jac_rational(t,y)
scipy.integrate._ivp.tests.test_ivp.jac_rational_sparse(t,y)
scipy.integrate._ivp.tests.test_ivp.medazko_sparsity(n)
scipy.integrate._ivp.tests.test_ivp.sol_complex(t)
scipy.integrate._ivp.tests.test_ivp.sol_linear(t)
scipy.integrate._ivp.tests.test_ivp.sol_rational(t)
scipy.integrate._ivp.tests.test_ivp.test_ConstantDenseOutput()
scipy.integrate._ivp.tests.test_ivp.test_OdeSolution()
scipy.integrate._ivp.tests.test_ivp.test_args()
scipy.integrate._ivp.tests.test_ivp.test_args_single_value()
scipy.integrate._ivp.tests.test_ivp.test_array_rtol()
scipy.integrate._ivp.tests.test_ivp.test_classes()
scipy.integrate._ivp.tests.test_ivp.test_empty()
scipy.integrate._ivp.tests.test_ivp.test_events()
scipy.integrate._ivp.tests.test_ivp.test_first_step()
scipy.integrate._ivp.tests.test_ivp.test_integration()
scipy.integrate._ivp.tests.test_ivp.test_integration_complex()
scipy.integrate._ivp.tests.test_ivp.test_integration_const_jac()
scipy.integrate._ivp.tests.test_ivp.test_integration_sparse_difference()
scipy.integrate._ivp.tests.test_ivp.test_integration_stiff(method)
scipy.integrate._ivp.tests.test_ivp.test_integration_zero_rhs(method)
scipy.integrate._ivp.tests.test_ivp.test_max_step()
scipy.integrate._ivp.tests.test_ivp.test_no_integration()
scipy.integrate._ivp.tests.test_ivp.test_no_integration_class()
scipy.integrate._ivp.tests.test_ivp.test_num_jac()
scipy.integrate._ivp.tests.test_ivp.test_num_jac_sparse()
scipy.integrate._ivp.tests.test_ivp.test_t_eval()
scipy.integrate._ivp.tests.test_ivp.test_t_eval_dense_output()
scipy.integrate._ivp.tests.test_ivp.test_t_eval_early_event()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_add_newdocs.py----------------------------------------
scipy.special._add_newdocs.add_newdoc(name,doc)
scipy.special._add_newdocs.get(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/add_newdocs.py----------------------------------------
scipy.special.add_newdocs.__dir__()
scipy.special.add_newdocs.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/spfun_stats.py----------------------------------------
scipy.special.spfun_stats.__dir__()
scipy.special.spfun_stats.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_basic.py----------------------------------------
A:scipy.special._basic.n->asarray(n)
A:scipy.special._basic.x->asarray(x + (n - n))
A:scipy.special._basic.y->zeros(x.shape, ytype)
A:scipy.special._basic.denom->sin(x)
A:scipy.special._basic.xsub->extract(mask, x)
A:scipy.special._basic.nsub->extract(mask, n)
A:scipy.special._basic.dsub->extract(mask, denom)
A:scipy.special._basic.nt->int(nt)
A:scipy.special._basic.(n, m, t, zo)->_specfun.jdzo(nt)
A:scipy.special._basic.v->asarray(v)
A:scipy.special._basic.s->L(v - n, z)
A:scipy.special._basic.(nm, jn, jnp)->_specfun.rcty(n1, x)
A:scipy.special._basic.km->int(qm + 0.5 * m)
A:scipy.special._basic.m->int(m)
A:scipy.special._basic.a->mathieu_a(m, q)
A:scipy.special._basic.fc->_specfun.fcoef(kd, m, q, b)
A:scipy.special._basic.b->mathieu_b(m, q)
A:scipy.special._basic.fixarr->where(mf > nf, 0.0, gamma(nf - mf + 1) / gamma(nf + mf + 1))
A:scipy.special._basic.(p, pd)->_specfun.clpmn(mp, n, real(z), imag(z), type)
A:scipy.special._basic.mm->max(1, m)
A:scipy.special._basic.nn->max(1, n)
A:scipy.special._basic.(q, qd)->_specfun.lqmn(mm, nn, z)
A:scipy.special._basic.(pn, pd)->_specfun.lpn(n1, z)
A:scipy.special._basic.(qn, qd)->_specfun.lqnb(n1, z)
A:scipy.special._basic.(vm, vl, dl)->_specfun.lamn(v1, x)
A:scipy.special._basic.(dv, dp, pdf, pdd)->_specfun.pbvv(v1, x)
A:scipy.special._basic.(cpb, cpd)->_specfun.cpbdn(n1, z)
A:scipy.special._basic.vals->zeros(n.shape, 'd')
A:scipy.special._basic.un->numpy.unique(n).astype(object)
A:scipy.special._basic.out->_ufuncs._factorial(n)
A:scipy.special._basic.val->math.factorial(un[0])
A:scipy.special._basic.oddn->extract(cond1, n)
A:scipy.special._basic.evenn->extract(cond2, n)
scipy.special._basic._bessel_diff_formula(v,z,n,L,phase)
scipy.special._basic._nonneg_int_or_fail(n,var_name,strict=True)
scipy.special._basic._range_prod(lo,hi)
scipy.special._basic.ai_zeros(nt)
scipy.special._basic.assoc_laguerre(x,n,k=0.0)
scipy.special._basic.bei_zeros(nt)
scipy.special._basic.beip_zeros(nt)
scipy.special._basic.ber_zeros(nt)
scipy.special._basic.bernoulli(n)
scipy.special._basic.berp_zeros(nt)
scipy.special._basic.bi_zeros(nt)
scipy.special._basic.clpmn(m,n,z,type=3)
scipy.special._basic.comb(N,k,exact=False,repetition=False,legacy=True)
scipy.special._basic.diric(x,n)
scipy.special._basic.erf_zeros(nt)
scipy.special._basic.euler(n)
scipy.special._basic.factorial(n,exact=False)
scipy.special._basic.factorial2(n,exact=False)
scipy.special._basic.factorialk(n,k,exact=True)
scipy.special._basic.fresnel_zeros(nt)
scipy.special._basic.fresnelc_zeros(nt)
scipy.special._basic.fresnels_zeros(nt)
scipy.special._basic.h1vp(v,z,n=1)
scipy.special._basic.h2vp(v,z,n=1)
scipy.special._basic.ivp(v,z,n=1)
scipy.special._basic.jn_zeros(n,nt)
scipy.special._basic.jnjnp_zeros(nt)
scipy.special._basic.jnp_zeros(n,nt)
scipy.special._basic.jnyn_zeros(n,nt)
scipy.special._basic.jvp(v,z,n=1)
scipy.special._basic.kei_zeros(nt)
scipy.special._basic.keip_zeros(nt)
scipy.special._basic.kelvin_zeros(nt)
scipy.special._basic.ker_zeros(nt)
scipy.special._basic.kerp_zeros(nt)
scipy.special._basic.kvp(v,z,n=1)
scipy.special._basic.lmbda(v,x)
scipy.special._basic.lpmn(m,n,z)
scipy.special._basic.lpn(n,z)
scipy.special._basic.lqmn(m,n,z)
scipy.special._basic.lqn(n,z)
scipy.special._basic.mathieu_even_coef(m,q)
scipy.special._basic.mathieu_odd_coef(m,q)
scipy.special._basic.obl_cv_seq(m,n,c)
scipy.special._basic.pbdn_seq(n,z)
scipy.special._basic.pbdv_seq(v,x)
scipy.special._basic.pbvv_seq(v,x)
scipy.special._basic.perm(N,k,exact=False)
scipy.special._basic.polygamma(n,x)
scipy.special._basic.pro_cv_seq(m,n,c)
scipy.special._basic.riccati_jn(n,x)
scipy.special._basic.riccati_yn(n,x)
scipy.special._basic.y0_zeros(nt,complex=False)
scipy.special._basic.y1_zeros(nt,complex=False)
scipy.special._basic.y1p_zeros(nt,complex=False)
scipy.special._basic.yn_zeros(n,nt)
scipy.special._basic.ynp_zeros(n,nt)
scipy.special._basic.yvp(v,z,n=1)
scipy.special._basic.zeta(x,q=None,out=None)
scipy.special._bessel_diff_formula(v,z,n,L,phase)
scipy.special._nonneg_int_or_fail(n,var_name,strict=True)
scipy.special._range_prod(lo,hi)
scipy.special.ai_zeros(nt)
scipy.special.assoc_laguerre(x,n,k=0.0)
scipy.special.bei_zeros(nt)
scipy.special.beip_zeros(nt)
scipy.special.ber_zeros(nt)
scipy.special.bernoulli(n)
scipy.special.berp_zeros(nt)
scipy.special.bi_zeros(nt)
scipy.special.clpmn(m,n,z,type=3)
scipy.special.comb(N,k,exact=False,repetition=False,legacy=True)
scipy.special.diric(x,n)
scipy.special.erf_zeros(nt)
scipy.special.euler(n)
scipy.special.factorial(n,exact=False)
scipy.special.factorial2(n,exact=False)
scipy.special.factorialk(n,k,exact=True)
scipy.special.fresnel_zeros(nt)
scipy.special.fresnelc_zeros(nt)
scipy.special.fresnels_zeros(nt)
scipy.special.h1vp(v,z,n=1)
scipy.special.h2vp(v,z,n=1)
scipy.special.ivp(v,z,n=1)
scipy.special.jn_zeros(n,nt)
scipy.special.jnjnp_zeros(nt)
scipy.special.jnp_zeros(n,nt)
scipy.special.jnyn_zeros(n,nt)
scipy.special.jvp(v,z,n=1)
scipy.special.kei_zeros(nt)
scipy.special.keip_zeros(nt)
scipy.special.kelvin_zeros(nt)
scipy.special.ker_zeros(nt)
scipy.special.kerp_zeros(nt)
scipy.special.kvp(v,z,n=1)
scipy.special.lmbda(v,x)
scipy.special.lpmn(m,n,z)
scipy.special.lpn(n,z)
scipy.special.lqmn(m,n,z)
scipy.special.lqn(n,z)
scipy.special.mathieu_even_coef(m,q)
scipy.special.mathieu_odd_coef(m,q)
scipy.special.obl_cv_seq(m,n,c)
scipy.special.pbdn_seq(n,z)
scipy.special.pbdv_seq(v,x)
scipy.special.pbvv_seq(v,x)
scipy.special.perm(N,k,exact=False)
scipy.special.polygamma(n,x)
scipy.special.pro_cv_seq(m,n,c)
scipy.special.riccati_jn(n,x)
scipy.special.riccati_yn(n,x)
scipy.special.y0_zeros(nt,complex=False)
scipy.special.y1_zeros(nt,complex=False)
scipy.special.y1p_zeros(nt,complex=False)
scipy.special.yn_zeros(n,nt)
scipy.special.ynp_zeros(n,nt)
scipy.special.yvp(v,z,n=1)
scipy.special.zeta(x,q=None,out=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_lambertw.py----------------------------------------
scipy.special._lambertw.lambertw(z,k=0,tol=1e-08)
scipy.special.lambertw(z,k=0,tol=1e-08)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/orthogonal.py----------------------------------------
scipy.special.orthogonal.__dir__()
scipy.special.orthogonal.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/specfun.py----------------------------------------
scipy.special.specfun.__dir__()
scipy.special.specfun.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_ufuncs.pyi----------------------------------------
scipy.special._ufuncs.errstate(self,**kargs:str)
scipy.special._ufuncs.errstate.__enter__(self)->None
scipy.special._ufuncs.errstate.__exit__(self,exc_type:Any,exc_value:Any,traceback:Any)->None
scipy.special._ufuncs.errstate.__init__(self,**kargs:str)
scipy.special._ufuncs.geterr()->Dict[str, str]
scipy.special._ufuncs.seterr(**kwargs:str)->Dict[str, str]
scipy.special.errstate(self,**kargs:str)
scipy.special.errstate.__enter__(self)->None
scipy.special.errstate.__exit__(self,exc_type:Any,exc_value:Any,traceback:Any)->None
scipy.special.geterr()->Dict[str, str]
scipy.special.seterr(**kwargs:str)->Dict[str, str]


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_ellip_harm.py----------------------------------------
A:scipy.special._ellip_harm._ellip_harm_2_vec->numpy.vectorize(_ellipsoid, otypes='d')
A:scipy.special._ellip_harm._ellip_normal_vec->numpy.vectorize(_ellip_normal_vec, otypes='d')
scipy.special._ellip_harm._ellip_normal_vec(h2,k2,n,p)
scipy.special._ellip_harm.ellip_harm(h2,k2,n,p,s,signm=1,signn=1)
scipy.special._ellip_harm.ellip_harm_2(h2,k2,n,p,s)
scipy.special._ellip_harm.ellip_normal(h2,k2,n,p)
scipy.special.ellip_harm(h2,k2,n,p,s,signm=1,signn=1)
scipy.special.ellip_harm_2(h2,k2,n,p,s)
scipy.special.ellip_normal(h2,k2,n,p)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/basic.py----------------------------------------
scipy.special.basic.__dir__()
scipy.special.basic.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_spherical_bessel.py----------------------------------------
scipy.special._spherical_bessel.spherical_in(n,z,derivative=False)
scipy.special._spherical_bessel.spherical_jn(n,z,derivative=False)
scipy.special._spherical_bessel.spherical_kn(n,z,derivative=False)
scipy.special._spherical_bessel.spherical_yn(n,z,derivative=False)
scipy.special.spherical_in(n,z,derivative=False)
scipy.special.spherical_jn(n,z,derivative=False)
scipy.special.spherical_kn(n,z,derivative=False)
scipy.special.spherical_yn(n,z,derivative=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_mptestutils.py----------------------------------------
A:scipy.special._mptestutils.pts->numpy.hstack((negpts[::-1], pospts))
A:scipy.special._mptestutils.linpts->numpy.linspace(0, 10, nlinpts, endpoint=False)
A:scipy.special._mptestutils.logpts->numpy.logspace(-30, right, nlogpts, endpoint=False)
A:scipy.special._mptestutils.right->numpy.log10(linpts[1])
A:scipy.special._mptestutils.logpts1->numpy.logspace(-30, right, nlogpts1, endpoint=False)
A:scipy.special._mptestutils.logpts2->numpy.logspace(1, np.log10(b), nlogpts2)
A:scipy.special._mptestutils.pospts->self._positive_values(0, b, n1)
A:scipy.special._mptestutils.self._values->numpy.asarray(values)
A:scipy.special._mptestutils.self.real->Arg(a.real, b.real)
A:scipy.special._mptestutils.self.imag->Arg(a.imag, b.imag)
A:scipy.special._mptestutils.m->int(np.floor(np.sqrt(n)))
A:scipy.special._mptestutils.x->self.real.values(m)
A:scipy.special._mptestutils.y->self.imag.values(m + 1)
A:scipy.special._mptestutils.v1->Arg(self.a, self.b).values(max(1 + n // 2, n - 5)).astype(int)
A:scipy.special._mptestutils.v2->numpy.arange(-5, 5)
A:scipy.special._mptestutils.v->func(*a, **kw)
A:scipy.special._mptestutils.args->argspec.copy()
A:scipy.special._mptestutils.nargs->len(argspec)
A:scipy.special._mptestutils.ms->numpy.asarray([1.5 if isinstance(spec, ComplexArg) else 1.0 for spec in argspec])
A:scipy.special._mptestutils.is_xslow->int(os.environ.get('SCIPY_XSLOW', '0'))
A:scipy.special._mptestutils.self.is_complex->any([isinstance(arg, ComplexArg) for arg in self.arg_spec])
A:scipy.special._mptestutils.name->getattr(mpmath_func, '__name__', None)
A:scipy.special._mptestutils.argarr->get_args(self.arg_spec, self.n)
A:scipy.special._mptestutils.(tp, value, tb)->sys.exc_info()
A:scipy.special._mptestutils.d->MpmathData(*a, **kw)
A:scipy.special._mptestutils.r->func(*a, **kw)
A:scipy.special._mptestutils.old_handler->signal.signal(signal.SIGALRM, sigalrm_handler)
A:scipy.special._mptestutils.start_time->time.time()
A:scipy.special._mptestutils.nfail->len(failures)
A:scipy.special._mptestutils.ndigits->int(abs(np.log10(rtol)))
A:scipy.special._mptestutils.resrep->mpmath.nstr(resval, ndigits, min_fixed=0, max_fixed=0)
A:scipy.special._mptestutils.stdrep->mpmath.nstr(stdval, ndigits, min_fixed=0, max_fixed=0)
A:scipy.special._mptestutils.rdiff->mpmath.nstr(rdiff, 3)
scipy.special._mptestutils.Arg(self,a=-np.inf,b=np.inf,inclusive_a=True,inclusive_b=True)
scipy.special._mptestutils.Arg.__init__(self,a=-np.inf,b=np.inf,inclusive_a=True,inclusive_b=True)
scipy.special._mptestutils.Arg._positive_values(self,a,b,n)
scipy.special._mptestutils.Arg.values(self,n)
scipy.special._mptestutils.ComplexArg(self,a=complex(-np.inf,-np.inf),b=complex(np.inf,np.inf))
scipy.special._mptestutils.ComplexArg.__init__(self,a=complex(-np.inf,-np.inf),b=complex(np.inf,np.inf))
scipy.special._mptestutils.ComplexArg.values(self,n)
scipy.special._mptestutils.FixedArg(self,values)
scipy.special._mptestutils.FixedArg.__init__(self,values)
scipy.special._mptestutils.FixedArg.values(self,n)
scipy.special._mptestutils.IntArg(self,a=-1000,b=1000)
scipy.special._mptestutils.IntArg.__init__(self,a=-1000,b=1000)
scipy.special._mptestutils.IntArg.values(self,n)
scipy.special._mptestutils.MpmathData(self,scipy_func,mpmath_func,arg_spec,name=None,dps=None,prec=None,n=None,rtol=1e-07,atol=1e-300,ignore_inf_sign=False,distinguish_nan_and_inf=True,nan_ok=True,param_filter=None)
scipy.special._mptestutils.MpmathData.__init__(self,scipy_func,mpmath_func,arg_spec,name=None,dps=None,prec=None,n=None,rtol=1e-07,atol=1e-300,ignore_inf_sign=False,distinguish_nan_and_inf=True,nan_ok=True,param_filter=None)
scipy.special._mptestutils.MpmathData.__repr__(self)
scipy.special._mptestutils.MpmathData.check(self)
scipy.special._mptestutils.TimeoutError(Exception)
scipy.special._mptestutils.assert_mpmath_equal(*a,**kw)
scipy.special._mptestutils.exception_to_nan(func)
scipy.special._mptestutils.get_args(argspec,n)
scipy.special._mptestutils.inf_to_nan(func)
scipy.special._mptestutils.mp_assert_allclose(res,std,atol=0,rtol=1e-17)
scipy.special._mptestutils.mpc2complex(x)
scipy.special._mptestutils.mpf2float(x)
scipy.special._mptestutils.nonfunctional_tooslow(func)
scipy.special._mptestutils.time_limited(timeout=0.5,return_val=np.nan,use_sigalrm=True)
scipy.special._mptestutils.trace_args(func)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_testutils.py----------------------------------------
A:scipy.special._testutils.res->func(*a, **kw)
A:scipy.special._testutils.points->numpy.asarray(points)
A:scipy.special._testutils.result_columns->list(range(nparams, data.shape[1]))
A:scipy.special._testutils.fdata->FuncData(func, data, list(range(nparams)), result_columns=result_columns, result_func=result_func, rtol=rtol, atol=atol, param_filter=param_filter, knownfailure=knownfailure, nan_ok=nan_ok, vectorized=vectorized, ignore_inf_sign=ignore_inf_sign, distinguish_nan_and_inf=distinguish_nan_and_inf)
A:scipy.special._testutils.self.param_columns->tuple(param_columns)
A:scipy.special._testutils.self.result_columns->tuple(result_columns)
A:scipy.special._testutils.dtype->numpy.dtype(float)
A:scipy.special._testutils.info->numpy.finfo(dtype)
A:scipy.special._testutils.__tracebackhide__->operator.methodcaller('errisinstance', AssertionError)
A:scipy.special._testutils.data->data.astype(dtype).astype(dtype)
A:scipy.special._testutils.(rtol, atol)->self.get_tolerances(dtype)
A:scipy.special._testutils.param_mask->numpy.ones((data.shape[0],), np.bool_)
A:scipy.special._testutils.j->int(j)
A:scipy.special._testutils.got->eval_func_at_params(self.func)
A:scipy.special._testutils.wanted->eval_func_at_params(self.result_func, skip_mask=skip_mask)
A:scipy.special._testutils.skip_mask->numpy.isnan(got[0])
A:scipy.special._testutils.pinf_x->numpy.isposinf(x)
A:scipy.special._testutils.pinf_y->numpy.isposinf(y)
A:scipy.special._testutils.minf_x->numpy.isneginf(x)
A:scipy.special._testutils.minf_y->numpy.isneginf(y)
A:scipy.special._testutils.nan_x->numpy.isnan(x)
A:scipy.special._testutils.nan_y->numpy.isnan(y)
A:scipy.special._testutils.abs_y->numpy.absolute(y)
A:scipy.special._testutils.diff->numpy.absolute(x - y)
A:scipy.special._testutils.inf_x->numpy.isinf(x)
A:scipy.special._testutils.inf_y->numpy.isinf(y)
A:scipy.special._testutils.a->'  '.join(map(fmt, params))
A:scipy.special._testutils.b->'  '.join(map(fmt, got))
A:scipy.special._testutils.c->'  '.join(map(fmt, wanted))
A:scipy.special._testutils.d->fmt(rdiff)
scipy.special._testutils.FuncData(self,func,data,param_columns,result_columns=None,result_func=None,rtol=None,atol=None,param_filter=None,knownfailure=None,dataname=None,nan_ok=False,vectorized=True,ignore_inf_sign=False,distinguish_nan_and_inf=True)
scipy.special._testutils.FuncData.__init__(self,func,data,param_columns,result_columns=None,result_func=None,rtol=None,atol=None,param_filter=None,knownfailure=None,dataname=None,nan_ok=False,vectorized=True,ignore_inf_sign=False,distinguish_nan_and_inf=True)
scipy.special._testutils.FuncData.__repr__(self)
scipy.special._testutils.FuncData.check(self,data=None,dtype=None,dtypes=None)
scipy.special._testutils.FuncData.get_tolerances(self,dtype)
scipy.special._testutils.MissingModule(self,name)
scipy.special._testutils.MissingModule.__init__(self,name)
scipy.special._testutils.assert_func_equal(func,results,points,rtol=None,atol=None,param_filter=None,knownfailure=None,vectorized=True,dtype=None,nan_ok=False,ignore_inf_sign=False,distinguish_nan_and_inf=True)
scipy.special._testutils.check_version(module,min_ver)
scipy.special._testutils.with_special_errors(func)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_spfun_stats.py----------------------------------------
A:scipy.special._spfun_stats.a->numpy.asarray(a)
scipy.special._spfun_stats.multigammaln(a,d)
scipy.special.multigammaln(a,d)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_orthogonal.py----------------------------------------
A:scipy.special._orthogonal.mu->sqrt(2.0 * n + 1.0)
A:scipy.special._orthogonal.poly->numpy.poly1d(roots, r=True)
A:scipy.special._orthogonal.self.weights->numpy.array(list(zip(roots, weights, equiv_weights)))
A:scipy.special._orthogonal.k->numpy.arange(n, dtype='d')
A:scipy.special._orthogonal.c->numpy.zeros((2, n))
A:scipy.special._orthogonal.c[0, 1:]->bn_func(k[1:])
A:scipy.special._orthogonal.c[1, :]->an_func(k)
A:scipy.special._orthogonal.x->numpy.cos(t)
A:scipy.special._orthogonal.y->f(n, x)
A:scipy.special._orthogonal.dy->df(n, x)
A:scipy.special._orthogonal.fm->f(n - 1, x)
A:scipy.special._orthogonal.log_fm->numpy.log(np.abs(fm))
A:scipy.special._orthogonal.log_dy->numpy.log(np.abs(dy))
A:scipy.special._orthogonal.m->int(n)
A:scipy.special._orthogonal.mu0->numpy.sqrt(2.0 * np.pi)
A:scipy.special._orthogonal.(x, w, mu)->roots_chebyt(n1, mu=True)
A:scipy.special._orthogonal.p->orthopoly1d(x, w, hn, kn, wfunc, limits=(0, 1), monic=monic, eval_func=lambda x: _ufuncs.eval_sh_legendre(n, x))
A:scipy.special._orthogonal.(x, w, m)->roots_chebyu(n, True)
A:scipy.special._orthogonal.(x, w)->roots_sh_legendre(n)
A:scipy.special._orthogonal.pp->orthopoly1d(x, w, hn, kn, wfunc=wfunc, limits=(0, 1), monic=monic, eval_func=lambda x: _ufuncs.eval_sh_jacobi(n, p, q, x))
A:scipy.special._orthogonal.w->numpy.full_like(x, pi / m)
A:scipy.special._orthogonal.(nodes, weights)->_roots_hermite_asy(m)
A:scipy.special._orthogonal.tauk->_compute_tauk(n, k)
A:scipy.special._orthogonal.turnover->around(fit).astype(int)
A:scipy.special._orthogonal.ia->arange(1, int(floor(n * 0.5) + 1))
A:scipy.special._orthogonal.xasq->_initial_nodes_a(n, ia[:turnover + 1])
A:scipy.special._orthogonal.xbsq->_initial_nodes_b(n, ib[turnover + 1:])
A:scipy.special._orthogonal.iv->_initial_nodes(n)
A:scipy.special._orthogonal.st->sin(theta)
A:scipy.special._orthogonal.ct->cos(theta)
A:scipy.special._orthogonal.(Ai, Aip, Bi, Bip)->airy(mu ** (4.0 / 6.0) * zeta)
A:scipy.special._orthogonal.theta->arccos(t)
A:scipy.special._orthogonal.(u, ud)->_pbcf(n, theta)
A:scipy.special._orthogonal.nodes->hstack([-nodes[-1:0:-1], nodes])
A:scipy.special._orthogonal.weights->hstack([weights[-1:0:-1], weights])
A:scipy.special._orthogonal.coeffs->numpy.array([0.000207186, -0.00152206, -0.000640869, 0.00488281, 0.0078125, -0.125, 1.0])
A:scipy.special._orthogonal.base->sh_jacobi(n, 2.0, 1.5, monic=monic)
A:scipy.special._orthogonal.xw->roots_chebyt(n, mu)
A:scipy.special._orthogonal.m_us->_ufuncs.beta(1.5, 1.5)
A:scipy.special._orthogonal._modattrs->globals()
scipy.special._compute_tauk(n,k,maxit=5)
scipy.special._gen_roots_and_weights(n,mu0,an_func,bn_func,f,df,symmetrize,mu)
scipy.special._initial_nodes(n)
scipy.special._initial_nodes_a(n,k)
scipy.special._initial_nodes_b(n,k)
scipy.special._newton(n,x_initial,maxit=5)
scipy.special._orthogonal._compute_tauk(n,k,maxit=5)
scipy.special._orthogonal._gen_roots_and_weights(n,mu0,an_func,bn_func,f,df,symmetrize,mu)
scipy.special._orthogonal._initial_nodes(n)
scipy.special._orthogonal._initial_nodes_a(n,k)
scipy.special._orthogonal._initial_nodes_b(n,k)
scipy.special._orthogonal._newton(n,x_initial,maxit=5)
scipy.special._orthogonal._pbcf(n,theta)
scipy.special._orthogonal._roots_hermite_asy(n)
scipy.special._orthogonal.chebyc(n,monic=False)
scipy.special._orthogonal.chebys(n,monic=False)
scipy.special._orthogonal.chebyt(n,monic=False)
scipy.special._orthogonal.chebyu(n,monic=False)
scipy.special._orthogonal.gegenbauer(n,alpha,monic=False)
scipy.special._orthogonal.genlaguerre(n,alpha,monic=False)
scipy.special._orthogonal.hermite(n,monic=False)
scipy.special._orthogonal.hermitenorm(n,monic=False)
scipy.special._orthogonal.jacobi(n,alpha,beta,monic=False)
scipy.special._orthogonal.laguerre(n,monic=False)
scipy.special._orthogonal.legendre(n,monic=False)
scipy.special._orthogonal.orthopoly1d(self,roots,weights=None,hn=1.0,kn=1.0,wfunc=None,limits=None,monic=False,eval_func=None)
scipy.special._orthogonal.orthopoly1d.__init__(self,roots,weights=None,hn=1.0,kn=1.0,wfunc=None,limits=None,monic=False,eval_func=None)
scipy.special._orthogonal.orthopoly1d._scale(self,p)
scipy.special._orthogonal.roots_chebyc(n,mu=False)
scipy.special._orthogonal.roots_chebys(n,mu=False)
scipy.special._orthogonal.roots_chebyt(n,mu=False)
scipy.special._orthogonal.roots_chebyu(n,mu=False)
scipy.special._orthogonal.roots_gegenbauer(n,alpha,mu=False)
scipy.special._orthogonal.roots_genlaguerre(n,alpha,mu=False)
scipy.special._orthogonal.roots_hermite(n,mu=False)
scipy.special._orthogonal.roots_hermitenorm(n,mu=False)
scipy.special._orthogonal.roots_jacobi(n,alpha,beta,mu=False)
scipy.special._orthogonal.roots_laguerre(n,mu=False)
scipy.special._orthogonal.roots_legendre(n,mu=False)
scipy.special._orthogonal.roots_sh_chebyt(n,mu=False)
scipy.special._orthogonal.roots_sh_chebyu(n,mu=False)
scipy.special._orthogonal.roots_sh_jacobi(n,p1,q1,mu=False)
scipy.special._orthogonal.roots_sh_legendre(n,mu=False)
scipy.special._orthogonal.sh_chebyt(n,monic=False)
scipy.special._orthogonal.sh_chebyu(n,monic=False)
scipy.special._orthogonal.sh_jacobi(n,p,q,monic=False)
scipy.special._orthogonal.sh_legendre(n,monic=False)
scipy.special._pbcf(n,theta)
scipy.special._roots_hermite_asy(n)
scipy.special.chebyc(n,monic=False)
scipy.special.chebys(n,monic=False)
scipy.special.chebyt(n,monic=False)
scipy.special.chebyu(n,monic=False)
scipy.special.gegenbauer(n,alpha,monic=False)
scipy.special.genlaguerre(n,alpha,monic=False)
scipy.special.hermite(n,monic=False)
scipy.special.hermitenorm(n,monic=False)
scipy.special.jacobi(n,alpha,beta,monic=False)
scipy.special.laguerre(n,monic=False)
scipy.special.legendre(n,monic=False)
scipy.special.orthopoly1d(self,roots,weights=None,hn=1.0,kn=1.0,wfunc=None,limits=None,monic=False,eval_func=None)
scipy.special.orthopoly1d._scale(self,p)
scipy.special.roots_chebyc(n,mu=False)
scipy.special.roots_chebys(n,mu=False)
scipy.special.roots_chebyt(n,mu=False)
scipy.special.roots_chebyu(n,mu=False)
scipy.special.roots_gegenbauer(n,alpha,mu=False)
scipy.special.roots_genlaguerre(n,alpha,mu=False)
scipy.special.roots_hermite(n,mu=False)
scipy.special.roots_hermitenorm(n,mu=False)
scipy.special.roots_jacobi(n,alpha,beta,mu=False)
scipy.special.roots_laguerre(n,mu=False)
scipy.special.roots_legendre(n,mu=False)
scipy.special.roots_sh_chebyt(n,mu=False)
scipy.special.roots_sh_chebyu(n,mu=False)
scipy.special.roots_sh_jacobi(n,p1,q1,mu=False)
scipy.special.roots_sh_legendre(n,mu=False)
scipy.special.sh_chebyt(n,monic=False)
scipy.special.sh_chebyu(n,monic=False)
scipy.special.sh_jacobi(n,p,q,monic=False)
scipy.special.sh_legendre(n,monic=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_orthogonal.pyi----------------------------------------
scipy.special._orthogonal.orthopoly1d.limits(self)->Tuple[float, float]
scipy.special._orthogonal.orthopoly1d.weight_func(self,x:float)->float
scipy.special.orthopoly1d.limits(self)->Tuple[float, float]
scipy.special.orthopoly1d.weight_func(self,x:float)->float


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/__init__.py----------------------------------------
A:scipy.special.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/cython_special.pyi----------------------------------------
scipy.special.cython_special.__getattr__(name)->Any


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_sf_error.py----------------------------------------
scipy.special.SpecialFunctionError(Exception)
scipy.special.SpecialFunctionWarning(Warning)
scipy.special._sf_error.SpecialFunctionError(Exception)
scipy.special._sf_error.SpecialFunctionWarning(Warning)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/sf_error.py----------------------------------------
scipy.special.sf_error.__dir__()
scipy.special.sf_error.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_logsumexp.py----------------------------------------
A:scipy.special._logsumexp.a->_asarray_validated(a, check_finite=False)
A:scipy.special._logsumexp.(a, b)->numpy.broadcast_arrays(a, b)
A:scipy.special._logsumexp.a_max->numpy.squeeze(a_max, axis=axis)
A:scipy.special._logsumexp.b->numpy.asarray(b)
A:scipy.special._logsumexp.tmp->numpy.exp(a - a_max)
A:scipy.special._logsumexp.s->numpy.sum(exp_tmp, axis=axis, keepdims=True)
A:scipy.special._logsumexp.sgn->numpy.sign(s)
A:scipy.special._logsumexp.out->numpy.log(s)
A:scipy.special._logsumexp.x->_asarray_validated(x, check_finite=False)
A:scipy.special._logsumexp.x_max->numpy.amax(x, axis=axis, keepdims=True)
A:scipy.special._logsumexp.exp_x_shifted->numpy.exp(x - x_max)
A:scipy.special._logsumexp.exp_tmp->numpy.exp(tmp)
scipy.special._logsumexp.log_softmax(x,axis=None)
scipy.special._logsumexp.logsumexp(a,axis=None,b=None,keepdims=False,return_sign=False)
scipy.special._logsumexp.softmax(x,axis=None)
scipy.special.log_softmax(x,axis=None)
scipy.special.logsumexp(a,axis=None,b=None,keepdims=False,return_sign=False)
scipy.special.softmax(x,axis=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_test_internal.pyi----------------------------------------
scipy.special._test_internal._dd_exp(xhi:float,xlo:float)->Tuple[float, float]
scipy.special._test_internal._dd_expm1(xhi:float,xlo:float)->Tuple[float, float]
scipy.special._test_internal._dd_log(xhi:float,xlo:float)->Tuple[float, float]
scipy.special._test_internal.have_fenv()->bool
scipy.special._test_internal.random_double(size:int)->np.float64
scipy.special._test_internal.test_add_round(size:int,mode:str)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_trig.py----------------------------------------
A:scipy.special.tests.test_trig.x->numpy.arange(-100, 101)
A:scipy.special.tests.test_trig.y->cospi(0.5)
A:scipy.special.tests.test_trig.(x, y)->numpy.meshgrid(x, y)
A:scipy.special.tests.test_trig.res->cospi(z)
A:scipy.special.tests.test_trig.p->complex(0.5 + 1e-14, 227)
A:scipy.special.tests.test_trig.std->complex(-8.113438309924894e+295, -np.inf)
scipy.special.tests.test_trig.test_half_integer_real_part()
scipy.special.tests.test_trig.test_integer_real_part()
scipy.special.tests.test_trig.test_intermediate_overlow()
scipy.special.tests.test_trig.test_zero_sign()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_wrightomega.py----------------------------------------
A:scipy.special.tests.test_wrightomega.res->scipy.special.wrightomega(p)
A:scipy.special.tests.test_wrightomega.x_before_crossover->numpy.nextafter(crossover, np.inf)
A:scipy.special.tests.test_wrightomega.x_after_crossover->numpy.nextafter(crossover, -np.inf)
A:scipy.special.tests.test_wrightomega.x->numpy.linspace(-500, 500, 1001)
scipy.special.tests.test_wrightomega.test_wrightomega_exp_approximation_crossover()
scipy.special.tests.test_wrightomega.test_wrightomega_inf()
scipy.special.tests.test_wrightomega.test_wrightomega_inf_branch()
scipy.special.tests.test_wrightomega.test_wrightomega_nan()
scipy.special.tests.test_wrightomega.test_wrightomega_real_infinities(x,desired)
scipy.special.tests.test_wrightomega.test_wrightomega_real_nan()
scipy.special.tests.test_wrightomega.test_wrightomega_real_series_crossover()
scipy.special.tests.test_wrightomega.test_wrightomega_real_versus_complex()
scipy.special.tests.test_wrightomega.test_wrightomega_singular()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_sf_error.py----------------------------------------
A:scipy.special.tests.test_sf_error.err->scipy.special.geterr()
A:scipy.special.tests.test_sf_error.entry_err->scipy.special.geterr()
A:scipy.special.tests.test_sf_error.geterr_olderr->scipy.special.geterr()
A:scipy.special.tests.test_sf_error.seterr_olderr->scipy.special.seterr(**{category: action})
A:scipy.special.tests.test_sf_error.newerr->scipy.special.geterr()
A:scipy.special.tests.test_sf_error.refcount_before->sys.getrefcount(sc)
A:scipy.special.tests.test_sf_error.refcount_after->sys.getrefcount(sc)
A:scipy.special.tests.test_sf_error.olderr->scipy.special.geterr()
scipy.special.tests.test_sf_error._check_action(fun,args,action)
scipy.special.tests.test_sf_error.test_errstate()
scipy.special.tests.test_sf_error.test_errstate_all_but_one()
scipy.special.tests.test_sf_error.test_errstate_c_basic()
scipy.special.tests.test_sf_error.test_errstate_cpp_basic()
scipy.special.tests.test_sf_error.test_errstate_pyx_basic()
scipy.special.tests.test_sf_error.test_geterr()
scipy.special.tests.test_sf_error.test_seterr()
scipy.special.tests.test_sf_error.test_sf_error_special_refcount()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_cython_special.py----------------------------------------
A:scipy.special.tests.test_cython_special.axes->tuple((TEST_POINTS[x] for x in typecodes))
A:scipy.special.tests.test_cython_special.pts->_generate_test_points(typecodes)
A:scipy.special.tests.test_cython_special.func->getattr(cython_special, name)
A:scipy.special.tests.test_cython_special.max_params->max((len(spec) for spec in specializations))
A:scipy.special.tests.test_cython_special.seen->set()
A:scipy.special.tests.test_cython_special.vv->tuple(sorted(v))
A:scipy.special.tests.test_cython_special.pyval->pyfunc(*pt)
A:scipy.special.tests.test_cython_special.cyval->cy_spec_func(*pt)
scipy.special.tests.test_cython_special._generate_test_points(typecodes)
scipy.special.tests.test_cython_special.test_cython_api(param)
scipy.special.tests.test_cython_special.test_cython_api_completeness()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_owens_t.py----------------------------------------
scipy.special.tests.test_owens_t.test_infs()
scipy.special.tests.test_owens_t.test_nans()
scipy.special.tests.test_owens_t.test_special_cases()
scipy.special.tests.test_owens_t.test_symmetries()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_spfun_stats.py----------------------------------------
A:scipy.special.tests.test_spfun_stats.a->numpy.array([2.5, 10.0])
A:scipy.special.tests.test_spfun_stats.result->multigammaln(a, d)
A:scipy.special.tests.test_spfun_stats.a1->numpy.array([2.5, 10.0]).ravel()
A:scipy.special.tests.test_spfun_stats.result1->multigammaln(a, d).ravel()
scipy.special.tests.test_spfun_stats.TestMultiGammaLn
scipy.special.tests.test_spfun_stats.TestMultiGammaLn.test1(self)
scipy.special.tests.test_spfun_stats.TestMultiGammaLn.test2(self)
scipy.special.tests.test_spfun_stats.TestMultiGammaLn.test_bararg(self)
scipy.special.tests.test_spfun_stats._check_multigammaln_array_result(a,d)
scipy.special.tests.test_spfun_stats.test_multigammaln_array_arg()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_lambertw.py----------------------------------------
A:scipy.special.tests.test_lambertw.data->array(data, dtype=complex_)
A:scipy.special.tests.test_lambertw.dt->numpy.dtype(np.complex128)
A:scipy.special.tests.test_lambertw.w->lambertw(z)
scipy.special.tests.test_lambertw.test_lambertw_subnormal_k0(z)
scipy.special.tests.test_lambertw.test_lambertw_ufunc_loop_selection()
scipy.special.tests.test_lambertw.test_ufunc()
scipy.special.tests.test_lambertw.test_values()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_powm1.py----------------------------------------
A:scipy.special.tests.test_powm1.p->powm1(x, y)
scipy.special.tests.test_powm1.test_powm1(x,y,expected,rtol)
scipy.special.tests.test_powm1.test_powm1_exact_cases(x,y,expected)
scipy.special.tests.test_powm1.test_powm1_return_nan(x,y)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_orthogonal_eval.py----------------------------------------
A:scipy.special.tests.test_orthogonal_eval.n->numpy.arange(0, 10000, 7)
A:scipy.special.tests.test_orthogonal_eval.v1->numpy.cos(n * np.arccos(x))
A:scipy.special.tests.test_orthogonal_eval.v2->scipy.special._ufuncs.eval_chebyt(n, x)
A:scipy.special.tests.test_orthogonal_eval.poly->numpy.poly1d(cls(*p).coef)
A:scipy.special.tests.test_orthogonal_eval.dataset->numpy.concatenate(dataset, axis=0)
A:scipy.special.tests.test_orthogonal_eval.ds->FuncData(polyfunc, dataset, list(range(len(param_ranges) + 2)), -1, rtol=rtol)
A:scipy.special.tests.test_orthogonal_eval.kw->dict(sig='l' + (len(p) - 1) * 'd' + '->d')
A:scipy.special.tests.test_orthogonal_eval.v->scipy.special._ufuncs.eval_hermite(70, 1.0)
A:scipy.special.tests.test_orthogonal_eval.nan_laguerre->numpy.isnan(_ufuncs.eval_genlaguerre(n, alpha, x))
A:scipy.special.tests.test_orthogonal_eval.nan_arg->numpy.any(np.isnan([n, alpha, x]))
A:scipy.special.tests.test_orthogonal_eval.nan_gegenbauer->numpy.isnan(_ufuncs.eval_gegenbauer(n, alpha, x))
scipy.special.tests.test_orthogonal_eval.TestPolys
scipy.special.tests.test_orthogonal_eval.TestPolys.check_poly(self,func,cls,param_ranges=[],x_range=[],nn=10,nparam=10,nx=10,rtol=1e-08)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_chebyc(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_chebys(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_chebyt(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_chebyu(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_gegenbauer(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_genlaguerre(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_hermite(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_hermitenorm(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_jacobi(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_laguerre(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_legendre(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_sh_chebyt(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_sh_chebyu(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_sh_jacobi(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_sh_legendre(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence
scipy.special.tests.test_orthogonal_eval.TestRecurrence.check_poly(self,func,param_ranges=[],x_range=[],nn=10,nparam=10,nx=10,rtol=1e-08)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_chebyc(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_chebys(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_chebyt(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_chebyu(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_gegenbauer(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_genlaguerre(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_hermite(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_jacobi(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_laguerre(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_legendre(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_sh_chebyt(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_sh_chebyu(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_sh_jacobi(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_sh_legendre(self)
scipy.special.tests.test_orthogonal_eval.test_eval_chebyt()
scipy.special.tests.test_orthogonal_eval.test_eval_genlaguerre_restriction()
scipy.special.tests.test_orthogonal_eval.test_gegenbauer_nan(n,alpha,x)
scipy.special.tests.test_orthogonal_eval.test_genlaguerre_nan(n,alpha,x)
scipy.special.tests.test_orthogonal_eval.test_hermite_domain()
scipy.special.tests.test_orthogonal_eval.test_hermite_nan(n,x)
scipy.special.tests.test_orthogonal_eval.test_warnings()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_spherical_bessel.py----------------------------------------
A:scipy.special.tests.test_spherical_bessel.x->numpy.array([-inf + 0j, inf + 0j, inf * (1 + 1j)])
A:scipy.special.tests.test_spherical_bessel.n->numpy.array([1, 2, 3, 7, 15])
A:scipy.special.tests.test_spherical_bessel.(integral, tolerance)->quad(lambda z: self.df(n, z), a, b)
A:scipy.special.tests.test_spherical_bessel.i1n->numpy.empty((2, 2))
A:scipy.special.tests.test_spherical_bessel.i1n[0][0]->spherical_in(0, x)
A:scipy.special.tests.test_spherical_bessel.i1n[0][1]->spherical_in(1, x)
A:scipy.special.tests.test_spherical_bessel.i1n[1][0]->spherical_in(0, x, derivative=True)
A:scipy.special.tests.test_spherical_bessel.i1n[1][1]->spherical_in(1, x, derivative=True)
A:scipy.special.tests.test_spherical_bessel.sph_i0->numpy.empty((2,))
A:scipy.special.tests.test_spherical_bessel.sph_i0[0]->spherical_in(0, x)
A:scipy.special.tests.test_spherical_bessel.sph_i0[1]->spherical_in(0, x, derivative=True)
A:scipy.special.tests.test_spherical_bessel.sph_i0_expected->numpy.array([np.sinh(x) / x, np.cosh(x) / x - np.sinh(x) / x ** 2])
A:scipy.special.tests.test_spherical_bessel.sph_k0->numpy.empty((2,))
A:scipy.special.tests.test_spherical_bessel.sph_k0[0]->spherical_kn(0, x)
A:scipy.special.tests.test_spherical_bessel.sph_k0[1]->spherical_kn(0, x, derivative=True)
A:scipy.special.tests.test_spherical_bessel.sph_k0_expected->numpy.array([0.5 * pi * exp(-x) / x, -0.5 * pi * exp(-x) * (1 / x + 1 / x ** 2)])
A:scipy.special.tests.test_spherical_bessel.s1->numpy.empty((2, 3))
A:scipy.special.tests.test_spherical_bessel.s1[0][0]->spherical_jn(0, x)
A:scipy.special.tests.test_spherical_bessel.s1[0][1]->spherical_jn(1, x)
A:scipy.special.tests.test_spherical_bessel.s1[0][2]->spherical_jn(2, x)
A:scipy.special.tests.test_spherical_bessel.s1[1][0]->spherical_jn(0, x, derivative=True)
A:scipy.special.tests.test_spherical_bessel.s1[1][1]->spherical_jn(1, x, derivative=True)
A:scipy.special.tests.test_spherical_bessel.s1[1][2]->spherical_jn(2, x, derivative=True)
A:scipy.special.tests.test_spherical_bessel.kn->numpy.empty((2, 3))
A:scipy.special.tests.test_spherical_bessel.kn[0][0]->spherical_kn(0, x)
A:scipy.special.tests.test_spherical_bessel.kn[0][1]->spherical_kn(1, x)
A:scipy.special.tests.test_spherical_bessel.kn[0][2]->spherical_kn(2, x)
A:scipy.special.tests.test_spherical_bessel.kn[1][0]->spherical_kn(0, x, derivative=True)
A:scipy.special.tests.test_spherical_bessel.kn[1][1]->spherical_kn(1, x, derivative=True)
A:scipy.special.tests.test_spherical_bessel.kn[1][2]->spherical_kn(2, x, derivative=True)
A:scipy.special.tests.test_spherical_bessel.sy1->spherical_yn(2, 0.2)
A:scipy.special.tests.test_spherical_bessel.sy2->spherical_yn(0, 0.2)
A:scipy.special.tests.test_spherical_bessel.sy3->spherical_yn(1, 0.2, derivative=True)
scipy.special.tests.test_spherical_bessel.SphericalDerivativesTestCase
scipy.special.tests.test_spherical_bessel.SphericalDerivativesTestCase.fundamental_theorem(self,n,a,b)
scipy.special.tests.test_spherical_bessel.SphericalDerivativesTestCase.test_fundamental_theorem_0(self)
scipy.special.tests.test_spherical_bessel.SphericalDerivativesTestCase.test_fundamental_theorem_7(self)
scipy.special.tests.test_spherical_bessel.TestSphericalIn
scipy.special.tests.test_spherical_bessel.TestSphericalIn.test_spherical_in_at_zero(self)
scipy.special.tests.test_spherical_bessel.TestSphericalIn.test_spherical_in_exact(self)
scipy.special.tests.test_spherical_bessel.TestSphericalIn.test_spherical_in_inf_complex(self)
scipy.special.tests.test_spherical_bessel.TestSphericalIn.test_spherical_in_inf_real(self)
scipy.special.tests.test_spherical_bessel.TestSphericalIn.test_spherical_in_recurrence_complex(self)
scipy.special.tests.test_spherical_bessel.TestSphericalIn.test_spherical_in_recurrence_real(self)
scipy.special.tests.test_spherical_bessel.TestSphericalInDerivatives(SphericalDerivativesTestCase)
scipy.special.tests.test_spherical_bessel.TestSphericalInDerivatives.df(self,n,z)
scipy.special.tests.test_spherical_bessel.TestSphericalInDerivatives.f(self,n,z)
scipy.special.tests.test_spherical_bessel.TestSphericalInDerivatives.test_spherical_in_d_zero(self)
scipy.special.tests.test_spherical_bessel.TestSphericalJn
scipy.special.tests.test_spherical_bessel.TestSphericalJn.test_spherical_jn_at_zero(self)
scipy.special.tests.test_spherical_bessel.TestSphericalJn.test_spherical_jn_exact(self)
scipy.special.tests.test_spherical_bessel.TestSphericalJn.test_spherical_jn_inf_complex(self)
scipy.special.tests.test_spherical_bessel.TestSphericalJn.test_spherical_jn_inf_real(self)
scipy.special.tests.test_spherical_bessel.TestSphericalJn.test_spherical_jn_large_arg_1(self)
scipy.special.tests.test_spherical_bessel.TestSphericalJn.test_spherical_jn_large_arg_2(self)
scipy.special.tests.test_spherical_bessel.TestSphericalJn.test_spherical_jn_recurrence_complex(self)
scipy.special.tests.test_spherical_bessel.TestSphericalJn.test_spherical_jn_recurrence_real(self)
scipy.special.tests.test_spherical_bessel.TestSphericalJnDerivatives(SphericalDerivativesTestCase)
scipy.special.tests.test_spherical_bessel.TestSphericalJnDerivatives.df(self,n,z)
scipy.special.tests.test_spherical_bessel.TestSphericalJnDerivatives.f(self,n,z)
scipy.special.tests.test_spherical_bessel.TestSphericalJnDerivatives.test_spherical_jn_d_zero(self)
scipy.special.tests.test_spherical_bessel.TestSphericalJnYnCrossProduct
scipy.special.tests.test_spherical_bessel.TestSphericalJnYnCrossProduct.test_spherical_jn_yn_cross_product_1(self)
scipy.special.tests.test_spherical_bessel.TestSphericalJnYnCrossProduct.test_spherical_jn_yn_cross_product_2(self)
scipy.special.tests.test_spherical_bessel.TestSphericalKn
scipy.special.tests.test_spherical_bessel.TestSphericalKn.test_spherical_kn_at_zero(self)
scipy.special.tests.test_spherical_bessel.TestSphericalKn.test_spherical_kn_at_zero_complex(self)
scipy.special.tests.test_spherical_bessel.TestSphericalKn.test_spherical_kn_exact(self)
scipy.special.tests.test_spherical_bessel.TestSphericalKn.test_spherical_kn_inf_complex(self)
scipy.special.tests.test_spherical_bessel.TestSphericalKn.test_spherical_kn_inf_real(self)
scipy.special.tests.test_spherical_bessel.TestSphericalKn.test_spherical_kn_recurrence_complex(self)
scipy.special.tests.test_spherical_bessel.TestSphericalKn.test_spherical_kn_recurrence_real(self)
scipy.special.tests.test_spherical_bessel.TestSphericalKnDerivatives(SphericalDerivativesTestCase)
scipy.special.tests.test_spherical_bessel.TestSphericalKnDerivatives.df(self,n,z)
scipy.special.tests.test_spherical_bessel.TestSphericalKnDerivatives.f(self,n,z)
scipy.special.tests.test_spherical_bessel.TestSphericalOld
scipy.special.tests.test_spherical_bessel.TestSphericalOld.test_sph_in(self)
scipy.special.tests.test_spherical_bessel.TestSphericalOld.test_sph_in_kn_order0(self)
scipy.special.tests.test_spherical_bessel.TestSphericalOld.test_sph_jn(self)
scipy.special.tests.test_spherical_bessel.TestSphericalOld.test_sph_kn(self)
scipy.special.tests.test_spherical_bessel.TestSphericalOld.test_sph_yn(self)
scipy.special.tests.test_spherical_bessel.TestSphericalYn
scipy.special.tests.test_spherical_bessel.TestSphericalYn.test_spherical_yn_at_zero(self)
scipy.special.tests.test_spherical_bessel.TestSphericalYn.test_spherical_yn_at_zero_complex(self)
scipy.special.tests.test_spherical_bessel.TestSphericalYn.test_spherical_yn_exact(self)
scipy.special.tests.test_spherical_bessel.TestSphericalYn.test_spherical_yn_inf_complex(self)
scipy.special.tests.test_spherical_bessel.TestSphericalYn.test_spherical_yn_inf_real(self)
scipy.special.tests.test_spherical_bessel.TestSphericalYn.test_spherical_yn_recurrence_complex(self)
scipy.special.tests.test_spherical_bessel.TestSphericalYn.test_spherical_yn_recurrence_real(self)
scipy.special.tests.test_spherical_bessel.TestSphericalYnDerivatives(SphericalDerivativesTestCase)
scipy.special.tests.test_spherical_bessel.TestSphericalYnDerivatives.df(self,n,z)
scipy.special.tests.test_spherical_bessel.TestSphericalYnDerivatives.f(self,n,z)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_sici.py----------------------------------------
A:scipy.special.tests.test_sici.(si, ci)->scipy.special.sici(x)
A:scipy.special.tests.test_sici.dataset->numpy.column_stack((x, shi, chi))
A:scipy.special.tests.test_sici.(shi, chi)->scipy.special.shichi(x)
scipy.special.tests.test_sici.test_shichi_consistency()
scipy.special.tests.test_sici.test_sici_consistency()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_loggamma.py----------------------------------------
A:scipy.special.tests.test_loggamma.x->numpy.array([-99.5, -9.5, -0.5, 0.5, 9.5, 99.5])
A:scipy.special.tests.test_loggamma.y->numpy.array([-99.5, -9.5, -0.5, 0.5, 9.5, 99.5]).copy()
A:scipy.special.tests.test_loggamma.(x, y)->numpy.meshgrid(x, y)
A:scipy.special.tests.test_loggamma.z->numpy.asarray([complex(x0, 0.0) for x0 in x])
A:scipy.special.tests.test_loggamma.zbar->numpy.asarray([complex(x0, -0.0) for x0 in x])
scipy.special.tests.test_loggamma.test_branch_cut()
scipy.special.tests.test_loggamma.test_complex_dispatch_realpart()
scipy.special.tests.test_loggamma.test_gh_6536()
scipy.special.tests.test_loggamma.test_identities1()
scipy.special.tests.test_loggamma.test_identities2()
scipy.special.tests.test_loggamma.test_real_dispatch()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_precompute_utils.py----------------------------------------
A:scipy.special.tests.test_precompute_utils.sympy->MissingModule('sympy')
A:scipy.special.tests.test_precompute_utils.mp->MissingModule('mpmath')
A:scipy.special.tests.test_precompute_utils.logcoeffs->MissingModule('mpmath').taylor(lambda x: mp.log(1 + x), 0, 10)
A:scipy.special.tests.test_precompute_utils.expcoeffs->MissingModule('mpmath').taylor(lambda x: mp.exp(x) - 1, 0, 10)
A:scipy.special.tests.test_precompute_utils.invlogcoeffs->lagrange_inversion(logcoeffs)
A:scipy.special.tests.test_precompute_utils.sincoeffs->MissingModule('mpmath').taylor(mp.sin, 0, 10)
A:scipy.special.tests.test_precompute_utils.asincoeffs->MissingModule('mpmath').taylor(mp.asin, 0, 10)
A:scipy.special.tests.test_precompute_utils.invsincoeffs->lagrange_inversion(sincoeffs)
scipy.special.tests.test_precompute_utils.TestInversion
scipy.special.tests.test_precompute_utils.TestInversion.test_log(self)
scipy.special.tests.test_precompute_utils.TestInversion.test_sin(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_exponential_integrals.py----------------------------------------
A:scipy.special.tests.test_exponential_integrals.a->scipy.special.exp1(-complex(19.999999))
A:scipy.special.tests.test_exponential_integrals.b->scipy.special.exp1(-complex(19.9999991))
A:scipy.special.tests.test_exponential_integrals.lim_from_above->scipy.special.expi(-1 + 1e-20j)
A:scipy.special.tests.test_exponential_integrals.lim_from_below->scipy.special.expi(-1 - 1e-20j)
scipy.special.tests.test_exponential_integrals.TestExp1
scipy.special.tests.test_exponential_integrals.TestExp1.test_834(self)
scipy.special.tests.test_exponential_integrals.TestExp1.test_branch_cut(self)
scipy.special.tests.test_exponential_integrals.TestExpi
scipy.special.tests.test_exponential_integrals.TestExpi.test_branch_cut(self,result)
scipy.special.tests.test_exponential_integrals.TestExpi.test_continuity_on_positive_real_axis(self)
scipy.special.tests.test_exponential_integrals.TestExpi.test_near_branch_cut(self)
scipy.special.tests.test_exponential_integrals.TestExpn
scipy.special.tests.test_exponential_integrals.TestExpn.test_out_of_domain(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_ndtri_exp.py----------------------------------------
A:scipy.special.tests.test_ndtri_exp.random_state->numpy.random.RandomState(1234)
A:scipy.special.tests.test_ndtri_exp.points->numpy.random.RandomState(1234).random_sample(1000)
A:scipy.special.tests.test_ndtri_exp.bigneg->numpy.nextafter.reduce([np.finfo(float).min, 0, 0, 0, 0])
A:scipy.special.tests.test_ndtri_exp.x->numpy.array([tinyneg, bigneg])
A:scipy.special.tests.test_ndtri_exp.result->log_ndtr_ndtri_exp(x)
scipy.special.tests.test_ndtri_exp.TestNdtriExp
scipy.special.tests.test_ndtri_exp.TestNdtriExp.test_asymptotes(self)
scipy.special.tests.test_ndtri_exp.TestNdtriExp.test_extreme(self)
scipy.special.tests.test_ndtri_exp.TestNdtriExp.test_in_interval(self,interval,expected_rtol,uniform_random_points)
scipy.special.tests.test_ndtri_exp.TestNdtriExp.test_outside_domain(self)
scipy.special.tests.test_ndtri_exp.TestNdtriExp.test_very_small_arg(self,test_input,uniform_random_points)
scipy.special.tests.test_ndtri_exp.log_ndtr_ndtri_exp(y)
scipy.special.tests.test_ndtri_exp.uniform_random_points()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_precompute_expn_asy.py----------------------------------------
A:scipy.special.tests.test_precompute_expn_asy.sympy->MissingModule('sympy')
A:scipy.special.tests.test_precompute_expn_asy.x->MissingModule('sympy').symbols('x')
A:scipy.special.tests.test_precompute_expn_asy.Ares->generate_A(len(Astd))
scipy.special.tests.test_precompute_expn_asy.test_generate_A()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_ndtr.py----------------------------------------
A:scipy.special.tests.test_ndtr.x->numpy.array([31.6, 32.8, 34.9, 37.1])
A:scipy.special.tests.test_ndtr.expected->numpy.array([-1.4844482299196562, -0.9130617648111351, -0.6931471805599453, -0.3689464152886564, -0.06914345561223398, -0.006229025485860002, -0.0013508099647481938, -3.167174337748927e-05, -2.866516129637636e-07, -1.279812543886654e-12, -6.220960574271786e-16])
A:scipy.special.tests.test_ndtr.y->scipy.special.log_ndtr(x)
scipy.special.tests.test_ndtr.TestLogNdtr
scipy.special.tests.test_ndtr.TestLogNdtr.test_log_ndtr_moderate_le8(self)
scipy.special.tests.test_ndtr.TestLogNdtr.test_log_ndtr_values_16_31(self)
scipy.special.tests.test_ndtr.TestLogNdtr.test_log_ndtr_values_8_16(self)
scipy.special.tests.test_ndtr.TestLogNdtr.test_log_ndtr_values_gt31(self)
scipy.special.tests.test_ndtr.TestNdtri
scipy.special.tests.test_ndtr.TestNdtri.test_asymptotes(self)
scipy.special.tests.test_ndtr.TestNdtri.test_outside_of_domain(self)
scipy.special.tests.test_ndtr.TestNdtri.test_zero(self)
scipy.special.tests.test_ndtr.test_ndtr()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_cdflib.py----------------------------------------
A:scipy.special.tests.test_cdflib.mpmath->MissingModule('mpmath')
A:scipy.special.tests.test_cdflib.m->max(1, n // 3)
A:scipy.special.tests.test_cdflib.v1->numpy.logspace(-30, np.log10(0.3), m)
A:scipy.special.tests.test_cdflib.res->scipy.special.chndtrix(0.999999, 2, np.arange(20.0) + 1e-06)
A:scipy.special.tests.test_cdflib.args->numpy.hstack((args, args[:, self.index].reshape(args.shape[0], 1)))
A:scipy.special.tests.test_cdflib.param_filter->self.get_param_filter()
A:scipy.special.tests.test_cdflib.param_columns->tuple(range(args.shape[1]))
A:scipy.special.tests.test_cdflib.d->_CDFData(*a, **kw)
A:scipy.special.tests.test_cdflib.onemp->MissingModule('mpmath').fsub(1, p, exact=True)
A:scipy.special.tests.test_cdflib.fac->MissingModule('mpmath').hyp2f1(0.5, 0.5 * (df + 1), 1.5, -t ** 2 / df)
A:scipy.special.tests.test_cdflib.one->MissingModule('mpmath').mpf(1)
A:scipy.special.tests.test_cdflib.func->getattr(sp, func)
scipy.special.tests.test_cdflib.EndpointFilter(self,a,b,rtol,atol)
scipy.special.tests.test_cdflib.EndpointFilter.__init__(self,a,b,rtol,atol)
scipy.special.tests.test_cdflib.ProbArg(self)
scipy.special.tests.test_cdflib.ProbArg.__init__(self)
scipy.special.tests.test_cdflib.ProbArg.values(self,n)
scipy.special.tests.test_cdflib.TestCDFlib
scipy.special.tests.test_cdflib.TestCDFlib.test_bdtrik(self)
scipy.special.tests.test_cdflib.TestCDFlib.test_bdtrin(self)
scipy.special.tests.test_cdflib.TestCDFlib.test_btdtria(self)
scipy.special.tests.test_cdflib.TestCDFlib.test_btdtrib(self)
scipy.special.tests.test_cdflib.TestCDFlib.test_chdtriv(self)
scipy.special.tests.test_cdflib.TestCDFlib.test_chndtridf(self)
scipy.special.tests.test_cdflib.TestCDFlib.test_chndtrinc(self)
scipy.special.tests.test_cdflib.TestCDFlib.test_chndtrix(self)
scipy.special.tests.test_cdflib.TestCDFlib.test_fdtridfd(self)
scipy.special.tests.test_cdflib.TestCDFlib.test_gdtria(self)
scipy.special.tests.test_cdflib.TestCDFlib.test_gdtrib(self)
scipy.special.tests.test_cdflib.TestCDFlib.test_gdtrix(self)
scipy.special.tests.test_cdflib.TestCDFlib.test_stdtr(self)
scipy.special.tests.test_cdflib.TestCDFlib.test_stdtridf(self)
scipy.special.tests.test_cdflib.TestCDFlib.test_stdtrit(self)
scipy.special.tests.test_cdflib.TestCDFlib.test_tklmbda_neg_shape(self)
scipy.special.tests.test_cdflib.TestCDFlib.test_tklmbda_pos_shape(self)
scipy.special.tests.test_cdflib.TestCDFlib.test_tklmbda_zero_shape(self)
scipy.special.tests.test_cdflib._CDFData(self,spfunc,mpfunc,index,argspec,spfunc_first=True,dps=20,n=5000,rtol=None,atol=None,endpt_rtol=None,endpt_atol=None)
scipy.special.tests.test_cdflib._CDFData.__init__(self,spfunc,mpfunc,index,argspec,spfunc_first=True,dps=20,n=5000,rtol=None,atol=None,endpt_rtol=None,endpt_atol=None)
scipy.special.tests.test_cdflib._CDFData.check(self)
scipy.special.tests.test_cdflib._CDFData.get_param_filter(self)
scipy.special.tests.test_cdflib._CDFData.idmap(self,*args)
scipy.special.tests.test_cdflib._assert_inverts(*a,**kw)
scipy.special.tests.test_cdflib._binomial_cdf(k,n,p)
scipy.special.tests.test_cdflib._f_cdf(dfn,dfd,x)
scipy.special.tests.test_cdflib._noncentral_chi_cdf(x,df,nc,dps=None)
scipy.special.tests.test_cdflib._noncentral_chi_pdf(t,df,nc)
scipy.special.tests.test_cdflib._student_t_cdf(df,t,dps=None)
scipy.special.tests.test_cdflib._tukey_lmbda_quantile(p,lmbda)
scipy.special.tests.test_cdflib.test_chndtrix_gh2158()
scipy.special.tests.test_cdflib.test_nonfinite()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_log_softmax.py----------------------------------------
A:scipy.special.tests.test_log_softmax.x->numpy.arange(8).reshape(2, 4)
A:scipy.special.tests.test_log_softmax.expected->numpy.array([[-3.4401896985611953, -2.4401896985611953, -1.4401896985611953, -0.44018969856119533], [-3.4401896985611953, -2.4401896985611953, -1.4401896985611953, -0.44018969856119533]])
A:scipy.special.tests.test_log_softmax.x_3d->log_softmax_2d_x.reshape(2, 2, 2)
A:scipy.special.tests.test_log_softmax.expected_3d->log_softmax_2d_expected.reshape(2, 2, 2)
scipy.special.tests.test_log_softmax.log_softmax_2d_expected()
scipy.special.tests.test_log_softmax.log_softmax_2d_x()
scipy.special.tests.test_log_softmax.log_softmax_expected()
scipy.special.tests.test_log_softmax.log_softmax_x()
scipy.special.tests.test_log_softmax.test_axes(axis_2d,expected_2d)
scipy.special.tests.test_log_softmax.test_log_softmax(x,expected)
scipy.special.tests.test_log_softmax.test_log_softmax_2d_axis0(log_softmax_2d_x,log_softmax_2d_expected)
scipy.special.tests.test_log_softmax.test_log_softmax_2d_axis1(log_softmax_2d_x,log_softmax_2d_expected)
scipy.special.tests.test_log_softmax.test_log_softmax_3d(log_softmax_2d_x,log_softmax_2d_expected)
scipy.special.tests.test_log_softmax.test_log_softmax_noneaxis(log_softmax_x,log_softmax_expected)
scipy.special.tests.test_log_softmax.test_log_softmax_scalar()
scipy.special.tests.test_log_softmax.test_log_softmax_translation(log_softmax_x,log_softmax_expected)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_gamma.py----------------------------------------
A:scipy.special.tests.test_gamma.x->numpy.array([0, -10, -100, -1000, -10000])
scipy.special.tests.test_gamma.TestRgamma
scipy.special.tests.test_gamma.TestRgamma.test_gh_11315(self)
scipy.special.tests.test_gamma.TestRgamma.test_rgamma_zeros(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_erfinv.py----------------------------------------
A:scipy.special.tests.test_erfinv.x->numpy.array([1e-20, 1e-15, 1e-14, 1e-10, 1e-08, 9e-08, 1.1e-07, 1e-06])
A:scipy.special.tests.test_erfinv.y->numpy.array([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])
A:scipy.special.tests.test_erfinv.actual->scipy.special.erfinv(y)
A:scipy.special.tests.test_erfinv.expected->numpy.array([8.86226925452758e-21, 8.862269254527581e-16, 8.86226925452758e-15, 8.862269254527581e-11, 8.86226925452758e-09, 7.97604232907484e-08, 9.74849617998037e-08, 8.8622692545299e-07])
scipy.special.tests.test_erfinv.TestInverseErrorFunction
scipy.special.tests.test_erfinv.TestInverseErrorFunction.test_compliment(self)
scipy.special.tests.test_erfinv.TestInverseErrorFunction.test_domain_bounds(self,f,x,y)
scipy.special.tests.test_erfinv.TestInverseErrorFunction.test_erfinv_asympt(self)
scipy.special.tests.test_erfinv.TestInverseErrorFunction.test_literal_values(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_precompute_gammainc.py----------------------------------------
A:scipy.special.tests.test_precompute_gammainc.sympy->MissingModule('sympy')
A:scipy.special.tests.test_precompute_gammainc.mp->MissingModule('mpmath')
A:scipy.special.tests.test_precompute_gammainc.d->compute_d(10, 13)
scipy.special.tests.test_precompute_gammainc.test_alpha()
scipy.special.tests.test_precompute_gammainc.test_d()
scipy.special.tests.test_precompute_gammainc.test_g()
scipy.special.tests.test_precompute_gammainc.test_gammainc()
scipy.special.tests.test_precompute_gammainc.test_gammaincc()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_dd.py----------------------------------------
A:scipy.special.tests.test_dd.(yhi, ylo)->dd_func(xhi, xlo)
scipy.special.tests.test_dd.test_dd(dd_func,xhi,xlo,expected_yhi,expected_ylo)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_gammainc.py----------------------------------------
A:scipy.special.tests.test_gammainc.result->scipy.special.gammaincc(1e-10, 1)
A:scipy.special.tests.test_gammainc.a->numpy.logspace(-5, 10, 100)
A:scipy.special.tests.test_gammainc.limit->scipy.special.gammaincc(0, 1)
A:scipy.special.tests.test_gammainc.c->numpy.array([-1 / 3, -1 / 540, 25 / 6048, 101 / 155520, -3184811 / 3695155200, -2745493 / 8151736420])
A:scipy.special.tests.test_gammainc.x->numpy.logspace(-5, 10, 100)
A:scipy.special.tests.test_gammainc.y->scipy.special.gammainccinv(a, sc.gammaincc(a, x))
scipy.special.tests.test_gammainc.TestGammainc
scipy.special.tests.test_gammainc.TestGammainc.gammainc_line(self,x)
scipy.special.tests.test_gammainc.TestGammainc.test_a_eq_0_x_gt_0(self)
scipy.special.tests.test_gammainc.TestGammainc.test_domain(self,a,x)
scipy.special.tests.test_gammainc.TestGammainc.test_infinite_arguments(self,a,x,desired)
scipy.special.tests.test_gammainc.TestGammainc.test_infinite_limits(self)
scipy.special.tests.test_gammainc.TestGammainc.test_limit_check(self)
scipy.special.tests.test_gammainc.TestGammainc.test_line(self)
scipy.special.tests.test_gammainc.TestGammainc.test_roundtrip(self)
scipy.special.tests.test_gammainc.TestGammainc.test_x_zero(self)
scipy.special.tests.test_gammainc.TestGammaincc
scipy.special.tests.test_gammainc.TestGammaincc.test_a_eq_0_x_gt_0(self)
scipy.special.tests.test_gammainc.TestGammaincc.test_domain(self,a,x)
scipy.special.tests.test_gammainc.TestGammaincc.test_infinite_arguments(self,a,x,desired)
scipy.special.tests.test_gammainc.TestGammaincc.test_infinite_limits(self)
scipy.special.tests.test_gammainc.TestGammaincc.test_limit_check(self)
scipy.special.tests.test_gammainc.TestGammaincc.test_roundtrip(self)
scipy.special.tests.test_gammainc.TestGammaincc.test_x_zero(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_sph_harm.py----------------------------------------
A:scipy.special.tests.test_sph_harm.theta->numpy.linspace(0, 2 * np.pi)
A:scipy.special.tests.test_sph_harm.phi->numpy.linspace(0, np.pi)
A:scipy.special.tests.test_sph_harm.(theta, phi)->numpy.meshgrid(theta, phi)
scipy.special.tests.test_sph_harm.test_first_harmonics()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_nan_inputs.py----------------------------------------
A:scipy.special.tests.test_nan_inputs.msg->'got {} instead of nan'.format(res)
A:scipy.special.tests.test_nan_inputs.fail->pytest.mark.xfail(run=False, reason=msg)
A:scipy.special.tests.test_nan_inputs.(UFUNCS, UFUNC_NAMES)->_get_ufuncs()
A:scipy.special.tests.test_nan_inputs.res->scipy.special.bdtrc(np.nan, 1, 0.5)
scipy.special.tests.test_nan_inputs._get_ufuncs()
scipy.special.tests.test_nan_inputs.test_legacy_cast()
scipy.special.tests.test_nan_inputs.test_nan_inputs(func)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_orthogonal.py----------------------------------------
A:scipy.special.tests.test_orthogonal.C0->scipy.special._orthogonal.chebyc(0)
A:scipy.special.tests.test_orthogonal.C1->scipy.special._orthogonal.chebyc(1)
A:scipy.special.tests.test_orthogonal.C2->scipy.special._orthogonal.chebyc(2)
A:scipy.special.tests.test_orthogonal.C3->scipy.special._orthogonal.chebyc(3)
A:scipy.special.tests.test_orthogonal.C4->scipy.special._orthogonal.chebyc(4)
A:scipy.special.tests.test_orthogonal.C5->scipy.special._orthogonal.chebyc(5)
A:scipy.special.tests.test_orthogonal.S0->scipy.special._orthogonal.chebys(0)
A:scipy.special.tests.test_orthogonal.S1->scipy.special._orthogonal.chebys(1)
A:scipy.special.tests.test_orthogonal.S2->scipy.special._orthogonal.chebys(2)
A:scipy.special.tests.test_orthogonal.S3->scipy.special._orthogonal.chebys(3)
A:scipy.special.tests.test_orthogonal.S4->scipy.special._orthogonal.chebys(4)
A:scipy.special.tests.test_orthogonal.S5->scipy.special._orthogonal.chebys(5)
A:scipy.special.tests.test_orthogonal.T0->scipy.special._orthogonal.chebyt(0)
A:scipy.special.tests.test_orthogonal.T1->scipy.special._orthogonal.chebyt(1)
A:scipy.special.tests.test_orthogonal.T2->scipy.special._orthogonal.chebyt(2)
A:scipy.special.tests.test_orthogonal.T3->scipy.special._orthogonal.chebyt(3)
A:scipy.special.tests.test_orthogonal.T4->scipy.special._orthogonal.chebyt(4)
A:scipy.special.tests.test_orthogonal.T5->scipy.special._orthogonal.chebyt(5)
A:scipy.special.tests.test_orthogonal.U0->scipy.special._orthogonal.chebyu(0)
A:scipy.special.tests.test_orthogonal.U1->scipy.special._orthogonal.chebyu(1)
A:scipy.special.tests.test_orthogonal.U2->scipy.special._orthogonal.chebyu(2)
A:scipy.special.tests.test_orthogonal.U3->scipy.special._orthogonal.chebyu(3)
A:scipy.special.tests.test_orthogonal.U4->scipy.special._orthogonal.chebyu(4)
A:scipy.special.tests.test_orthogonal.U5->scipy.special._orthogonal.chebyu(5)
A:scipy.special.tests.test_orthogonal.Ca0->scipy.special._orthogonal.gegenbauer(0, a)
A:scipy.special.tests.test_orthogonal.Ca1->scipy.special._orthogonal.gegenbauer(1, a)
A:scipy.special.tests.test_orthogonal.Ca2->scipy.special._orthogonal.gegenbauer(2, a)
A:scipy.special.tests.test_orthogonal.Ca3->scipy.special._orthogonal.gegenbauer(3, a)
A:scipy.special.tests.test_orthogonal.Ca4->scipy.special._orthogonal.gegenbauer(4, a)
A:scipy.special.tests.test_orthogonal.Ca5->scipy.special._orthogonal.gegenbauer(5, a)
A:scipy.special.tests.test_orthogonal.H0->scipy.special._orthogonal.hermitenorm(0)
A:scipy.special.tests.test_orthogonal.H1->scipy.special._orthogonal.hermitenorm(1)
A:scipy.special.tests.test_orthogonal.H2->scipy.special._orthogonal.hermitenorm(2)
A:scipy.special.tests.test_orthogonal.H3->scipy.special._orthogonal.hermitenorm(3)
A:scipy.special.tests.test_orthogonal.H4->scipy.special._orthogonal.hermitenorm(4)
A:scipy.special.tests.test_orthogonal.H5->scipy.special._orthogonal.hermitenorm(5)
A:scipy.special.tests.test_orthogonal.psub->numpy.poly1d([2, -1])
A:scipy.special.tests.test_orthogonal.he0->scipy.special._orthogonal.hermite(0)(psub)
A:scipy.special.tests.test_orthogonal.Ps0->scipy.special._orthogonal.sh_legendre(0)
A:scipy.special.tests.test_orthogonal.Ps1->scipy.special._orthogonal.sh_legendre(1)
A:scipy.special.tests.test_orthogonal.Ps2->scipy.special._orthogonal.sh_legendre(2)
A:scipy.special.tests.test_orthogonal.Ps3->scipy.special._orthogonal.sh_legendre(3)
A:scipy.special.tests.test_orthogonal.Ps4->scipy.special._orthogonal.sh_legendre(4)
A:scipy.special.tests.test_orthogonal.Ps5->scipy.special._orthogonal.sh_legendre(5)
A:scipy.special.tests.test_orthogonal.pse0->scipy.special._orthogonal.legendre(0)(psub)
A:scipy.special.tests.test_orthogonal.pse1->scipy.special._orthogonal.legendre(1)(psub)
A:scipy.special.tests.test_orthogonal.pse2->scipy.special._orthogonal.legendre(2)(psub)
A:scipy.special.tests.test_orthogonal.pse3->scipy.special._orthogonal.legendre(3)(psub)
A:scipy.special.tests.test_orthogonal.pse4->scipy.special._orthogonal.legendre(4)(psub)
A:scipy.special.tests.test_orthogonal.pse5->scipy.special._orthogonal.legendre(5)(psub)
A:scipy.special.tests.test_orthogonal.Ts0->scipy.special._orthogonal.sh_chebyt(0)
A:scipy.special.tests.test_orthogonal.Ts1->scipy.special._orthogonal.sh_chebyt(1)
A:scipy.special.tests.test_orthogonal.Ts2->scipy.special._orthogonal.sh_chebyt(2)
A:scipy.special.tests.test_orthogonal.Ts3->scipy.special._orthogonal.sh_chebyt(3)
A:scipy.special.tests.test_orthogonal.Ts4->scipy.special._orthogonal.sh_chebyt(4)
A:scipy.special.tests.test_orthogonal.Ts5->scipy.special._orthogonal.sh_chebyt(5)
A:scipy.special.tests.test_orthogonal.tse0->scipy.special._orthogonal.chebyt(0)(psub)
A:scipy.special.tests.test_orthogonal.tse1->scipy.special._orthogonal.chebyt(1)(psub)
A:scipy.special.tests.test_orthogonal.tse2->scipy.special._orthogonal.chebyt(2)(psub)
A:scipy.special.tests.test_orthogonal.tse3->scipy.special._orthogonal.chebyt(3)(psub)
A:scipy.special.tests.test_orthogonal.tse4->scipy.special._orthogonal.chebyt(4)(psub)
A:scipy.special.tests.test_orthogonal.tse5->scipy.special._orthogonal.chebyt(5)(psub)
A:scipy.special.tests.test_orthogonal.Us0->scipy.special._orthogonal.sh_chebyu(0)
A:scipy.special.tests.test_orthogonal.Us1->scipy.special._orthogonal.sh_chebyu(1)
A:scipy.special.tests.test_orthogonal.Us2->scipy.special._orthogonal.sh_chebyu(2)
A:scipy.special.tests.test_orthogonal.Us3->scipy.special._orthogonal.sh_chebyu(3)
A:scipy.special.tests.test_orthogonal.Us4->scipy.special._orthogonal.sh_chebyu(4)
A:scipy.special.tests.test_orthogonal.Us5->scipy.special._orthogonal.sh_chebyu(5)
A:scipy.special.tests.test_orthogonal.use0->scipy.special._orthogonal.chebyu(0)(psub)
A:scipy.special.tests.test_orthogonal.use1->scipy.special._orthogonal.chebyu(1)(psub)
A:scipy.special.tests.test_orthogonal.use2->scipy.special._orthogonal.chebyu(2)(psub)
A:scipy.special.tests.test_orthogonal.use3->scipy.special._orthogonal.chebyu(3)(psub)
A:scipy.special.tests.test_orthogonal.use4->scipy.special._orthogonal.chebyu(4)(psub)
A:scipy.special.tests.test_orthogonal.use5->scipy.special._orthogonal.chebyu(5)(psub)
A:scipy.special.tests.test_orthogonal.G0->scipy.special._orthogonal.sh_jacobi(0, p, q)
A:scipy.special.tests.test_orthogonal.G1->scipy.special._orthogonal.sh_jacobi(1, p, q)
A:scipy.special.tests.test_orthogonal.G2->scipy.special._orthogonal.sh_jacobi(2, p, q)
A:scipy.special.tests.test_orthogonal.G3->scipy.special._orthogonal.sh_jacobi(3, p, q)
A:scipy.special.tests.test_orthogonal.G4->scipy.special._orthogonal.sh_jacobi(4, p, q)
A:scipy.special.tests.test_orthogonal.G5->scipy.special._orthogonal.sh_jacobi(5, p, q)
A:scipy.special.tests.test_orthogonal.p->eval(pstr)
A:scipy.special.tests.test_orthogonal.(x, w, mu)->root_func(N, True)
A:scipy.special.tests.test_orthogonal.n->numpy.arange(N)
A:scipy.special.tests.test_orthogonal.v->eval_func(n[:, np.newaxis], x)
A:scipy.special.tests.test_orthogonal.vv->numpy.dot(v * w, v.T)
A:scipy.special.tests.test_orthogonal.resI->scipy.integrate.quad(lambda x: f(x) * weight_func(x), a, b)
A:scipy.special.tests.test_orthogonal.resG->numpy.vdot(f(x), w)
A:scipy.special.tests.test_orthogonal.(xj, wj)->scipy.special.roots_jacobi(6, 4.0, 4.0)
A:scipy.special.tests.test_orthogonal.(xl, wl)->scipy.special.roots_legendre(6)
A:scipy.special.tests.test_orthogonal.(xc, wc)->scipy.special.roots_gegenbauer(6, 4.5)
A:scipy.special.tests.test_orthogonal.(x, w)->scipy.special.roots_genlaguerre(5, 2, False)
A:scipy.special.tests.test_orthogonal.(y, v, m)->scipy.special.roots_genlaguerre(5, 2, True)
A:scipy.special.tests.test_orthogonal.(muI, muI_err)->scipy.integrate.quad(weightf(2.0), 0.0, np.inf)
A:scipy.special.tests.test_orthogonal.H->hermite_recursion(N + 1, x)
scipy.special.tests.testTestCall
scipy.special.tests.testTestCall.test_call(self)
scipy.special.tests.testTestCheby
scipy.special.tests.testTestCheby.test_chebyc(self)
scipy.special.tests.testTestCheby.test_chebys(self)
scipy.special.tests.testTestCheby.test_chebyt(self)
scipy.special.tests.testTestCheby.test_chebyu(self)
scipy.special.tests.testTestGegenbauer
scipy.special.tests.testTestGegenbauer.test_gegenbauer(self)
scipy.special.tests.testTestGenlaguerre
scipy.special.tests.testTestGenlaguerre.test_regression(self)
scipy.special.tests.testTestHermite
scipy.special.tests.testTestHermite.test_hermite(self)
scipy.special.tests.testTestHermite.test_hermitenorm(self)
scipy.special.tests.test_orthogonal.TestCall
scipy.special.tests.test_orthogonal.TestCall.test_call(self)
scipy.special.tests.test_orthogonal.TestCheby
scipy.special.tests.test_orthogonal.TestCheby.test_chebyc(self)
scipy.special.tests.test_orthogonal.TestCheby.test_chebys(self)
scipy.special.tests.test_orthogonal.TestCheby.test_chebyt(self)
scipy.special.tests.test_orthogonal.TestCheby.test_chebyu(self)
scipy.special.tests.test_orthogonal.TestGegenbauer
scipy.special.tests.test_orthogonal.TestGegenbauer.test_gegenbauer(self)
scipy.special.tests.test_orthogonal.TestGenlaguerre
scipy.special.tests.test_orthogonal.TestGenlaguerre.test_regression(self)
scipy.special.tests.test_orthogonal.TestHermite
scipy.special.tests.test_orthogonal.TestHermite.test_hermite(self)
scipy.special.tests.test_orthogonal.TestHermite.test_hermitenorm(self)
scipy.special.tests.test_orthogonal._test_sh_chebyt
scipy.special.tests.test_orthogonal._test_sh_chebyt.test_sh_chebyt(self)
scipy.special.tests.test_orthogonal._test_sh_chebyu
scipy.special.tests.test_orthogonal._test_sh_chebyu.test_sh_chebyu(self)
scipy.special.tests.test_orthogonal._test_sh_jacobi
scipy.special.tests.test_orthogonal._test_sh_jacobi.test_sh_jacobi(self)
scipy.special.tests.test_orthogonal._test_sh_legendre
scipy.special.tests.test_orthogonal._test_sh_legendre.test_sh_legendre(self)
scipy.special.tests.test_orthogonal.test_chebyt_symmetry()
scipy.special.tests.test_orthogonal.test_gh_6721()
scipy.special.tests.test_orthogonal.test_roots_chebyc()
scipy.special.tests.test_orthogonal.test_roots_chebys()
scipy.special.tests.test_orthogonal.test_roots_chebyt()
scipy.special.tests.test_orthogonal.test_roots_chebyu()
scipy.special.tests.test_orthogonal.test_roots_gegenbauer()
scipy.special.tests.test_orthogonal.test_roots_genlaguerre()
scipy.special.tests.test_orthogonal.test_roots_hermite()
scipy.special.tests.test_orthogonal.test_roots_hermite_asy()
scipy.special.tests.test_orthogonal.test_roots_hermitenorm()
scipy.special.tests.test_orthogonal.test_roots_jacobi()
scipy.special.tests.test_orthogonal.test_roots_laguerre()
scipy.special.tests.test_orthogonal.test_roots_legendre()
scipy.special.tests.test_orthogonal.test_roots_sh_chebyt()
scipy.special.tests.test_orthogonal.test_roots_sh_chebyu()
scipy.special.tests.test_orthogonal.test_roots_sh_jacobi()
scipy.special.tests.test_orthogonal.test_roots_sh_legendre()
scipy.special.tests.test_orthogonal.verify_gauss_quad(root_func,eval_func,weight_func,a,b,N,rtol=1e-15,atol=5e-14)
scipy.special.tests.test_test_sh_chebyt
scipy.special.tests.test_test_sh_chebyt.test_sh_chebyt(self)
scipy.special.tests.test_test_sh_chebyu
scipy.special.tests.test_test_sh_chebyu.test_sh_chebyu(self)
scipy.special.tests.test_test_sh_jacobi
scipy.special.tests.test_test_sh_jacobi.test_sh_jacobi(self)
scipy.special.tests.test_test_sh_legendre
scipy.special.tests.test_test_sh_legendre.test_sh_legendre(self)
scipy.special.tests.testtest_chebyt_symmetry()
scipy.special.tests.testtest_gh_6721()
scipy.special.tests.testtest_roots_chebyc()
scipy.special.tests.testtest_roots_chebys()
scipy.special.tests.testtest_roots_chebyt()
scipy.special.tests.testtest_roots_chebyu()
scipy.special.tests.testtest_roots_gegenbauer()
scipy.special.tests.testtest_roots_genlaguerre()
scipy.special.tests.testtest_roots_hermite()
scipy.special.tests.testtest_roots_hermite_asy()
scipy.special.tests.testtest_roots_hermitenorm()
scipy.special.tests.testtest_roots_jacobi()
scipy.special.tests.testtest_roots_laguerre()
scipy.special.tests.testtest_roots_legendre()
scipy.special.tests.testtest_roots_sh_chebyt()
scipy.special.tests.testtest_roots_sh_chebyu()
scipy.special.tests.testtest_roots_sh_jacobi()
scipy.special.tests.testtest_roots_sh_legendre()
scipy.special.tests.testverify_gauss_quad(root_func,eval_func,weight_func,a,b,N,rtol=1e-15,atol=5e-14)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_basic.py----------------------------------------
A:scipy.special.tests.test_basic.n->numpy.array([1, 3, 7])
A:scipy.special.tests.test_basic.k->arange(0, n)
A:scipy.special.tests.test_basic.rknown->numpy.array([[-0.097152, 0.9263051596159367, 0.01858423645695389, -0.007581020651518199], [6, 2.0214389119675666, 0, 2.9827344527963846], [10.92, 2.22993515861399, -0.00585728, 10.468891352063146], [136, 3.5252179590758828, 19448, 1024.5526916174495]])
A:scipy.special.tests.test_basic.num->int(1)
A:scipy.special.tests.test_basic.den->int(1)
A:scipy.special.tests.test_basic.dataset->numpy.asarray(dataset)
A:scipy.special.tests.test_basic.values->numpy.array([[25.0, 20.0, 400, 4.12106551123962e-57], [25.0, 8.0, 250, 2.3988026526832426e-29], [0.001, 8.0, 40.0, 5.376180620136604e-24], [0.01, 8.0, 40.0, 5.453962310559995e-20], [20.0, 2.0, 107, 1.393907435558196e-09], [22.5, 2.0, 107, 7.118033071381059e-09], [25.0, 2.0, 107, 3.110412448298649e-08], [3.0, 2.0, 1.0, 0.6206436532195436], [350.0, 300.0, 10.0, 0.9388012800627641], [100.0, 13.5, 10.0, 0.9999999965010421], [700.0, 20.0, 400, 0.9999999992568065], [150.0, 13.5, 10.0, 0.9999999999999998], [160.0, 13.5, 10.0, 1.0]])
A:scipy.special.tests.test_basic.cdf->scipy.special._ufuncs.chndtr(values[:, 0], values[:, 1], values[:, 2])
A:scipy.special.tests.test_basic.x->scipy.special.ivp(1, 2)
A:scipy.special.tests.test_basic.y->scipy.special.pseudo_huber(delta, r)
A:scipy.special.tests.test_basic.expected->numpy.row_stack([expected] * 2)
A:scipy.special.tests.test_basic.found->scipy.special._ufuncs.expm1(z)
A:scipy.special.tests.test_basic.vals->numpy.array([-4, -3.5, -2.3, 1, 4.2], np.float64)
A:scipy.special.tests.test_basic.m->numpy.nextafter(m, 1)
A:scipy.special.tests.test_basic.v->scipy.special._ufuncs.mathieu_modsem2(2, 100, -1)
A:scipy.special.tests.test_basic.p->scipy.special.pbvv(eta, x)
A:scipy.special.tests.test_basic.result->scipy.special.hyp1f1(a, b, c)
A:scipy.special.tests.test_basic.val->scipy.special._ufuncs.pdtrc([0, 1, 2], 0.0)
A:scipy.special.tests.test_basic.(s, c)->scipy.special._ufuncs.sici(-np.inf)
A:scipy.special.tests.test_basic.x10->numpy.linspace(0, 1, 11, endpoint=True)
A:scipy.special.tests.test_basic.x4->numpy.linspace(0, 1, 5, endpoint=True)
A:scipy.special.tests.test_basic.a->scipy.special.airye(0.01)
A:scipy.special.tests.test_basic.b->scipy.special.airy(0.01)
A:scipy.special.tests.test_basic.bi->scipy.special.bei_zeros(5)
A:scipy.special.tests.test_basic.ai->scipy.special.ai_zeros(1)
A:scipy.special.tests.test_basic.(z, zp, ai_zpx, aip_zx)->scipy.special.ai_zeros(50000)
A:scipy.special.tests.test_basic.(ai_z, aip_z, _, _)->scipy.special.airy(z)
A:scipy.special.tests.test_basic.(ai_zp, aip_zp, _, _)->scipy.special.airy(zp)
A:scipy.special.tests.test_basic.(z, zp, bi_zpx, bip_zx)->scipy.special.bi_zeros(50000)
A:scipy.special.tests.test_basic.(_, _, bi_z, bip_z)->scipy.special.airy(z)
A:scipy.special.tests.test_basic.(_, _, bi_zp, bip_zp)->scipy.special.airy(zp)
A:scipy.special.tests.test_basic.a1->scipy.special.genlaguerre(11, 1)
A:scipy.special.tests.test_basic.a2->scipy.special.assoc_laguerre(1, 11, 1)
A:scipy.special.tests.test_basic.mbei->scipy.special.bei(2)
A:scipy.special.tests.test_basic.mbeip->scipy.special.beip(2)
A:scipy.special.tests.test_basic.mber->scipy.special.ber(2)
A:scipy.special.tests.test_basic.mberp->scipy.special.berp(2)
A:scipy.special.tests.test_basic.bip->scipy.special.beip_zeros(5)
A:scipy.special.tests.test_basic.ber->scipy.special.ber_zeros(5)
A:scipy.special.tests.test_basic.brp->scipy.special.berp_zeros(5)
A:scipy.special.tests.test_basic.mkelv->scipy.special.kelvin(2)
A:scipy.special.tests.test_basic.mkei->scipy.special.kei(2)
A:scipy.special.tests.test_basic.mkeip->scipy.special.keip(2)
A:scipy.special.tests.test_basic.mker->scipy.special.ker(2)
A:scipy.special.tests.test_basic.mkerp->scipy.special.kerp(2)
A:scipy.special.tests.test_basic.kei->scipy.special.kei_zeros(5)
A:scipy.special.tests.test_basic.keip->scipy.special.keip_zeros(5)
A:scipy.special.tests.test_basic.tmp->scipy.special.kelvin_zeros(5)
A:scipy.special.tests.test_basic.ker->scipy.special.ker_zeros(5)
A:scipy.special.tests.test_basic.kerp->scipy.special.kerp_zeros(5)
A:scipy.special.tests.test_basic.brn->scipy.special.bernoulli(5)
A:scipy.special.tests.test_basic.bet->log(abs(special.beta(2, 4)))
A:scipy.special.tests.test_basic.betln->scipy.special.betaln(2, 4)
A:scipy.special.tests.test_basic.btinc->scipy.special.betainc(1, 1, 0.2)
A:scipy.special.tests.test_basic.comp->scipy.special.betainc(2, 4, y)
A:scipy.special.tests.test_basic.np_n->numpy.int64(n)
A:scipy.special.tests.test_basic.np_k->numpy.int64(k)
A:scipy.special.tests.test_basic.res_np->scipy.special.comb(np_n, np_k, exact=True)
A:scipy.special.tests.test_basic.res_py->scipy.special.comb(n, k, exact=True)
A:scipy.special.tests.test_basic.cb->scipy.special.cbrt(27)
A:scipy.special.tests.test_basic.cb1->scipy.special.cbrt(27.9)
A:scipy.special.tests.test_basic.cdg->scipy.special.cosdg(90)
A:scipy.special.tests.test_basic.cdgrl->cos(pi / 2.0)
A:scipy.special.tests.test_basic.cdgm->scipy.special.cosdg(30)
A:scipy.special.tests.test_basic.cdgmrl->cos(pi / 6.0)
A:scipy.special.tests.test_basic.ct->scipy.special.cotdg(30)
A:scipy.special.tests.test_basic.ct1->scipy.special.cotdg(45)
A:scipy.special.tests.test_basic.sn->scipy.special.sindg(90)
A:scipy.special.tests.test_basic.snm->scipy.special.sindg(30)
A:scipy.special.tests.test_basic.snmrl->sin(pi / 6.0)
A:scipy.special.tests.test_basic.snm1->scipy.special.sindg(45)
A:scipy.special.tests.test_basic.snmrl1->sin(pi / 4.0)
A:scipy.special.tests.test_basic.tn->scipy.special.tandg(30)
A:scipy.special.tests.test_basic.tnrl->tan(pi / 6.0)
A:scipy.special.tests.test_basic.tnm->scipy.special.tandg(45)
A:scipy.special.tests.test_basic.tnmrl->tan(pi / 4.0)
A:scipy.special.tests.test_basic.tnm1->scipy.special.tandg(60)
A:scipy.special.tests.test_basic.tnmrl1->tan(pi / 3.0)
A:scipy.special.tests.test_basic.el->scipy.special.ellipj(0.2, 0)
A:scipy.special.tests.test_basic.elk->scipy.special.ellipk(0.2)
A:scipy.special.tests.test_basic.elkinc->scipy.special.ellipkinc(phi, m)
A:scipy.special.tests.test_basic.f->scipy.special.ellipeinc(phi, mvals)
A:scipy.special.tests.test_basic.f1->scipy.special.ellipeinc(phi + pi, mvals)
A:scipy.special.tests.test_basic.xlog->numpy.logspace(-300, -17, 25)
A:scipy.special.tests.test_basic.xlin->numpy.linspace(1e-17, 0.1, 25)
A:scipy.special.tests.test_basic.xlin2->numpy.linspace(0.1, pi / 2, 25, endpoint=False)
A:scipy.special.tests.test_basic.ele->scipy.special.ellipe(0.2)
A:scipy.special.tests.test_basic.eleinc->scipy.special.ellipeinc(phi, m)
A:scipy.special.tests.test_basic.args->array([[0.0, 1.0, 2.0, 3.0], [2.0, 3.0, 4.0, 5.0], [2.0, 3.0, 4.0, -1.0 + 1j], [1j, -1j, 0.0, 2.0], [-1.0 + 1j, -1.0 - 1j, 1.0, 2.0], [1j, -1j, 0.0, 1.0 - 1j], [-1.0 + 1j, -1.0 - 1j, 1.0, -3.0 + 1j], [2.0, 3.0, 4.0, -0.5], [2.0, 3.0, 4.0, -5.0]])
A:scipy.special.tests.test_basic.expected_results->array([0.77688623778582, 0.14297579667157, 0.13613945827771 - 0.38207561624427j, 1.6490011662711, 0.9414835884122, 1.8260115229009 + 1.2290661908643j, -0.61127970812028 - 1.0684038390007j, 0.24723819703052, -0.12711230042964])
A:scipy.special.tests.test_basic.self.m_n1_1->numpy.arange(-1.0, 1.0, 0.01)
A:scipy.special.tests.test_basic.self.ms_up_to_1->numpy.concatenate(([self.max_neg], self.very_neg_m, self.m_n1_1))
A:scipy.special.tests.test_basic.er->scipy.special.erf(0.25)
A:scipy.special.tests.test_basic.erz->scipy.special.erf_zeros(5)
A:scipy.special.tests.test_basic.erzr->array([1.45061616 + 1.880943j, 2.24465928 + 2.61657514j, 2.83974105 + 3.1756281j, 3.33546074 + 3.64617438j, 3.76900557 + 4.06069723j])
A:scipy.special.tests.test_basic.w->numpy.vectorize(xfunc, otypes=[np.float64])(z[:, 0], z[:, 1])
A:scipy.special.tests.test_basic.mask->numpy.isfinite(w_real)
A:scipy.special.tests.test_basic.eu0->scipy.special.euler(0)
A:scipy.special.tests.test_basic.eu1->scipy.special.euler(1)
A:scipy.special.tests.test_basic.eu2->scipy.special.euler(2)
A:scipy.special.tests.test_basic.eu24->scipy.special.euler(24)
A:scipy.special.tests.test_basic.correct->math.factorial(n)
A:scipy.special.tests.test_basic.correct[2 * k]->float(mathworld[k])
A:scipy.special.tests.test_basic.err->nan_to_num((eu24 - correct) / correct)
A:scipy.special.tests.test_basic.errmax->max(err)
A:scipy.special.tests.test_basic.ex->scipy.special.exp10(2)
A:scipy.special.tests.test_basic.exm->scipy.special.exp10(2.5)
A:scipy.special.tests.test_basic.frs->scipy.special.fresnels_zeros(5)
A:scipy.special.tests.test_basic.(szo, czo)->scipy.special.fresnel_zeros(5)
A:scipy.special.tests.test_basic.frc->scipy.special.fresnelc_zeros(6)
A:scipy.special.tests.test_basic.gam->scipy.special.gamma(5)
A:scipy.special.tests.test_basic.gamln->scipy.special.gammaln(3)
A:scipy.special.tests.test_basic.lngam->log(special.gamma(3))
A:scipy.special.tests.test_basic.gccinv->scipy.special.gammainccinv(0.5, 0.5)
A:scipy.special.tests.test_basic.gcinv->scipy.special.gammaincinv(0.5, 0.5)
A:scipy.special.tests.test_basic.rgam->scipy.special.rgamma(8)
A:scipy.special.tests.test_basic.hank1->scipy.special.hankel1(1, 0.1)
A:scipy.special.tests.test_basic.hank1e->scipy.special.hankel1e(1, 0.1)
A:scipy.special.tests.test_basic.hank2->scipy.special.hankel2(1, 0.1)
A:scipy.special.tests.test_basic.hank2e->scipy.special.hankel2e(1, 0.1)
A:scipy.special.tests.test_basic.hankrl2e->scipy.special.hankel2e(1, 0.1)
A:scipy.special.tests.test_basic.h1->scipy.special.h1vp(1, 0.1)
A:scipy.special.tests.test_basic.h2->scipy.special.h2vp(1, 0.1)
A:scipy.special.tests.test_basic.res->scipy.special.hyp0f1(0.8, 0.5 + 0.5 * 1j)
A:scipy.special.tests.test_basic.hyp1->scipy.special.hyp1f1(0.5, 1.5, -709.7827128933)
A:scipy.special.tests.test_basic.ref_data->array([[-8.38132975, -12.8436461, -29.1081397, 10417.833], [2.91076882, -6.35234333, -12.7083993, 6.68132725], [-14.2938258, 0.180869131, 19.0038728, 101385.897], [5.84069088, 13.3187908, 29.1290106, 159469411.0], [-27.0433202, -11.6274873, -28.9582384, 1.39900152e+24], [4.26344966, -23.2701773, 19.1635759, 6.13816915e+21], [12.051434, -3.4026024, 7.26832235, 11769611200000.0], [27.7372955, -1.99424687, 3.61332246, 30741961500000.0], [15.0310939, -29.1198675, -15.358108, -379.166033], [14.3995827, 9.84311196, 19.3204553, 25583626400.0], [-4.08759686, 13.4437025, -14.2072843, 17.0778449], [8.05595738, -13.1019838, 15.2180721, 3.06233294e+21], [18.1815804, -14.2908793, 9.57868793, -2.84771348e+20], [-24.9671396, 12.5082843, -17.1562286, 23629042.6], [26.7277673, 17.0315414, 6.1270145, 7779.17232], [24.9565476, 29.1694684, 6.2962266, 235.300027], [6.11924542, -1.59943768, 9.57009289, 132906326000.0], [-14.7863653, 24.1691301, -18.9981821, 2730.64953], [22.4070483, -2.93647433, 8.19281432, -6.42000372e+17], [0.8040426, 18.2710085, -19.7814534, 0.548372441], [13.959039, 19.7318686, 2.37606635, 5.51923681], [-4.66640483, -20.023793, 7.40365095, 4.50310752], [27.6821999, -6.36563968, 11.1533984, -9.28725179e+23], [-25.6764457, 1.24544906, 10.6407572, 12.5922076], [3.20447808, 13.0874383, 22.6098014, 20320.2059], [-12.4809647, 4.15137113, -29.22657, 239621411.0], [21.4778108, -2.3516296, -11.3758664, 0.446882152], [-9.85469168, -3.2815768, 16.7447548, -10734239.0], [10.812231, -24.7353236, -11.5622349, -2917.33796], [-26.7933347, -3.39100709, 25.6006986, -5292753820.0], [-8.60066776, -8.02200924, 10.7231926, 1335483.2], [-0.101724238, -11.8479709, -25.5407104, 1.5543657], [-3.93356771, 21.1106818, -25.7598485, 21.346784], [3.74750503, 15.5687633, -29.284172, 0.0143873509], [6.99726781, 26.9855571, -16.3707771, 0.0308098673], [-23.1996011, 3.47631054, 0.975119815, 0.0179971073], [23.8951044, -29.146019, -2.50774708, 9.56934814], [15.2730825, 5.77062507, 12.1922003, 1323453070.0], [17.4673917, 18.9723426, 4.9490325, 99.0859484], [18.8971241, 28.6255413, 0.552360109, 1.4416536], [10.2002319, -16.6855152, -25.5426235, 656.481554], [-17.9474153, 12.22102, -18.4058212, 824041.812], [-13.6147103, 1.32365492, -7.223752, 992446.491], [7.57407832, 25.9738234, -13.4139168, 0.0364037761], [2.21110169, 12.8012666, 16.2529102, 133.433085], [-26.4297569, -16.3176658, -11.1642006, -24479725100000.0], [-24.6622944, -3.02147372, 8.29159315, -321799.07], [-13.7215095, -19.6680183, 29.1940118, 3214575200000.0], [-5.45566105, 28.1292086, 0.172548215, 0.966973], [-1.55751298, -8.65703373, 26.8622026, -3.17190834e+16], [24.5393609, -27.0571903, 19.6815505, 1.80708004e+37], [5.77482829, 15.3203143, 25.0534322, 1143042.42], [-10.2626819, 23.6887658, -23.2152102, 728.965646], [-1.30833446, -12.831021, 18.7275544, -9334879040000.0], [5.83024676, -14.9279672, 24.4957538, -7.6108307e+27], [-20.3130747, 25.9641715, -20.6174328, 45474.4859], [19.7684551, -22.1410519, -22.672874, 3531130.26], [27.3673444, 26.4491725, 15.7599882, 10738511.8], [5.73287971, 12.1111904, 13.3080171, 2632.20467], [-28.2751072, 20.8605881, 9.098389, -6.60957033e-07], [18.7270691, -17.4437016, 15.2413599, 6.59572851e+27], [6.60681457, -2.69449855, 9.78972047, -2385878700000.0], [12.0895561, -25.1355765, 23.0096101, 7.58739886e+32], [-24.4682278, 21.0673441, -13.6705538, 45421.355], [-4.50665152, 3.72292059, -4.83403707, 26.8938214], [-7.46540049, -10.8422222, -17.2203805, -209.402162], [-20.0307551, -7.50604431, -27.864002, 4.15985444e+19], [19.9890876, 22.0677419, -25.1301778, 1.23840297e-09], [20.3183823, -7.66942559, 21.034007, 1.46285095e+31], [-2.90315825, -25.5785967, -9.58779316, 0.265714264], [27.3960829, -18.0097203, -2.03070131, 252.908999], [-21.1708058, -27.0304032, 24.8257944, 309027527.0], [22.1959758, 4.00258675, -16.2853977, -9.1628009e-09], [16.166184, -22.684515, 21.722694, -8.24774394e+33], [-3.35030306, 1.32670581, 9.39711214, -14.7303163], [7.23720726, -22.9763909, 23.4709682, -9.20711735e+29], [27.1013568, 16.1951087, -0.711388906, 0.298750911], [8.40057933, -7.4966522, 29.5587388, 6.59465635e+29], [-15.1603423, 19.4032322, -7.60044357, 105.186941], [-8.83788031, -27.2018313, 1.88269907, 1.81687019], [-18.7283712, 5.8747957, -19.1210203, 252235612.0], [-0.561338513, 26.9490237, 0.116660111, 0.997567783], [-5.44354025, -12.6721408, -4.66831036, 0.106660735], [-2.18846497, 23.3299566, 9.62564397, 0.303842061], [6.65661299, -23.9048713, 10.4191807, 47370045100000.0], [-25.7298921, -26.0811296, 27.439811, -532566307000.0], [-11.1431826, -15.942016, -18.4880553, -101.514747], [6.50301931, 25.9859051, -23.3270137, 0.01227605], [-19.4987891, -26.2123262, 3.90323225, 17.1658894], [7.26164601, -14.1469402, 28.1499763, -2.50068329e+31], [-15.242404, 29.9719005, -28.5753678, 13190.6693], [5.24149291, -17.2807223, 22.2129493, 2.50748475e+25], [0.36320723, -0.0954120862, -28.3874044, 0.943854939], [-2.11326457, -12.5707023, 1.1717213, 1.20812698], [2.48513582, 10.3652647, -18.4625148, 0.0647910997], [26.5395942, 27.4794672, 12.9413428, 289306.132], [-9.4944546, 15.9930921, -14.9596331, 327.574841], [-5.89173945, 9.96742426, 26.0318889, -0.315842908], [-11.5387239, -22.1433107, -21.7686413, 0.156724718], [-5.30592244, -24.275219, 1.29734035, 1.31985534]])
A:scipy.special.tests.test_basic.hyp2->scipy.special.hyp1f1(0.5, 1.5, -709.7827128934)
A:scipy.special.tests.test_basic.hyp->scipy.special.hyp1f1(0.5, 1.5, -1000)
A:scipy.special.tests.test_basic.cv->scipy.special.hyp2f1(a, b, c, x)
A:scipy.special.tests.test_basic.val1->scipy.special.hyperu(1, 0.1, 100)
A:scipy.special.tests.test_basic.hypu->scipy.special.hyperu(a, b, z)
A:scipy.special.tests.test_basic.it0->array(special.itj0y0(0.2))
A:scipy.special.tests.test_basic.it2->array(special.it2j0y0(0.2))
A:scipy.special.tests.test_basic.oz->scipy.special.y0(0.1)
A:scipy.special.tests.test_basic.ozr->scipy.special.yn(0, 0.1)
A:scipy.special.tests.test_basic.o1->scipy.special.y1(0.1)
A:scipy.special.tests.test_basic.o1r->scipy.special.yn(1, 0.1)
A:scipy.special.tests.test_basic.jnnr->scipy.special.jn(1, 0.2)
A:scipy.special.tests.test_basic.yc->scipy.special.jv(v, x)
A:scipy.special.tests.test_basic.jvexp->scipy.special.jve(1, 0.2)
A:scipy.special.tests.test_basic.jvexp1->scipy.special.jve(1, 0.2 + 1j)
A:scipy.special.tests.test_basic.jn0->scipy.special.jn_zeros(0, 300)
A:scipy.special.tests.test_basic.jn1->scipy.special.jn_zeros(1, 5)
A:scipy.special.tests.test_basic.jn102->scipy.special.jn_zeros(102, 5)
A:scipy.special.tests.test_basic.jn301->scipy.special.jn_zeros(301, 5)
A:scipy.special.tests.test_basic.jn10->scipy.special.jn_zeros(10, 300)
A:scipy.special.tests.test_basic.jn3010->scipy.special.jn_zeros(3010, 5)
A:scipy.special.tests.test_basic.(z, n, m, t)->scipy.special.jnjnp_zeros(nt)
A:scipy.special.tests.test_basic.jnp->scipy.special.jnp_zeros(443, 5)
A:scipy.special.tests.test_basic.jnz->scipy.special.jnyn_zeros(1, 5)
A:scipy.special.tests.test_basic.jvprim->scipy.special.jvp(2, 2)
A:scipy.special.tests.test_basic.ozk->scipy.special.k0(0.1)
A:scipy.special.tests.test_basic.ozkr->scipy.special.kv(0, 0.1)
A:scipy.special.tests.test_basic.ozke->scipy.special.k0e(0.1)
A:scipy.special.tests.test_basic.ozker->scipy.special.kve(0, 0.1)
A:scipy.special.tests.test_basic.o1k->scipy.special.k1(0.1)
A:scipy.special.tests.test_basic.o1kr->scipy.special.kv(1, 0.1)
A:scipy.special.tests.test_basic.o1ke->scipy.special.k1e(0.1)
A:scipy.special.tests.test_basic.o1ker->scipy.special.kve(1, 0.1)
A:scipy.special.tests.test_basic.P0->scipy.special.jacobi(0, a, b)
A:scipy.special.tests.test_basic.P1->scipy.special.jacobi(1, a, b)
A:scipy.special.tests.test_basic.P2->scipy.special.jacobi(2, a, b)
A:scipy.special.tests.test_basic.P3->scipy.special.jacobi(3, a, b)
A:scipy.special.tests.test_basic.kn1->scipy.special.kn(0, 0.2)
A:scipy.special.tests.test_basic.kv0->scipy.special.kv(0, 0.2)
A:scipy.special.tests.test_basic.kv1->scipy.special.kv(1, 0.2)
A:scipy.special.tests.test_basic.kv2->scipy.special.kv(2, 0.2)
A:scipy.special.tests.test_basic.kve1->scipy.special.kve(0, 0.2)
A:scipy.special.tests.test_basic.kve2->scipy.special.kve(0, z)
A:scipy.special.tests.test_basic.(yo, ypo)->scipy.special.y0_zeros(2)
A:scipy.special.tests.test_basic.(zo, zpo)->scipy.special.y0_zeros(2, complex=1)
A:scipy.special.tests.test_basic.y1->scipy.special.y1_zeros(1)
A:scipy.special.tests.test_basic.y1p->scipy.special.y1p_zeros(1, complex=1)
A:scipy.special.tests.test_basic.an->scipy.special.yn_zeros(443, 5)
A:scipy.special.tests.test_basic.ao->scipy.special.ynp_zeros(443, 5)
A:scipy.special.tests.test_basic.yn2n->scipy.special.yn(1, 0.2)
A:scipy.special.tests.test_basic.yv2->scipy.special.yv(1, 0.2)
A:scipy.special.tests.test_basic.yve2->scipy.special.yve(1, 0.2)
A:scipy.special.tests.test_basic.yve22->scipy.special.yve(1, 0.2 + 1j)
A:scipy.special.tests.test_basic.yvp1->scipy.special.yvp(2, 0.2)
A:scipy.special.tests.test_basic.v[imsk]->v[imsk].astype(int).astype(int)
A:scipy.special.tests.test_basic.c1->scipy.special.iv(v, x)
A:scipy.special.tests.test_basic.c2->scipy.special.iv(v, x + 0j)
A:scipy.special.tests.test_basic.dc->abs(c1 / c2 - 1)
A:scipy.special.tests.test_basic.r->exp(r)
A:scipy.special.tests.test_basic.(value, err)->self._series(v, z)
A:scipy.special.tests.test_basic.oize->scipy.special.i0e(0.1)
A:scipy.special.tests.test_basic.oizer->scipy.special.ive(0, 0.1)
A:scipy.special.tests.test_basic.oi1e->scipy.special.i1e(0.1)
A:scipy.special.tests.test_basic.oi1er->scipy.special.ive(1, 0.1)
A:scipy.special.tests.test_basic.iti0->array(special.iti0k0(5))
A:scipy.special.tests.test_basic.it2k->scipy.special.it2i0k0(0.1)
A:scipy.special.tests.test_basic.ive1->scipy.special.ive(0, 0.1)
A:scipy.special.tests.test_basic.lag0->scipy.special.genlaguerre(0, k)
A:scipy.special.tests.test_basic.lag1->scipy.special.genlaguerre(1, k)
A:scipy.special.tests.test_basic.lag2->scipy.special.genlaguerre(2, k)
A:scipy.special.tests.test_basic.lag3->scipy.special.genlaguerre(3, k)
A:scipy.special.tests.test_basic.lag4->scipy.special.laguerre(4)
A:scipy.special.tests.test_basic.lag5->scipy.special.laguerre(5)
A:scipy.special.tests.test_basic.leg0->scipy.special.legendre(0)
A:scipy.special.tests.test_basic.leg1->scipy.special.legendre(1)
A:scipy.special.tests.test_basic.leg2->scipy.special.legendre(2)
A:scipy.special.tests.test_basic.leg3->scipy.special.legendre(3)
A:scipy.special.tests.test_basic.leg4->scipy.special.legendre(4)
A:scipy.special.tests.test_basic.leg5->scipy.special.legendre(5)
A:scipy.special.tests.test_basic.lam->scipy.special.lmbda(1, 0.1)
A:scipy.special.tests.test_basic.clp->scipy.special.clpmn(2, 2, z, 3)
A:scipy.special.tests.test_basic.lp->scipy.special.lpmv(-1, -1, 0.001)
A:scipy.special.tests.test_basic.lpnf->scipy.special.lpn(2, 0.5)
A:scipy.special.tests.test_basic.lqmnf->scipy.special.lqmn(0, 2, 0.5)
A:scipy.special.tests.test_basic.lqf->scipy.special.lqn(2, 0.5)
A:scipy.special.tests.test_basic.(a, b)->scipy.special.lqmn(4, 0, 1.1)
A:scipy.special.tests.test_basic.obl->scipy.special.obl_cv_seq(0, 3, 1)
A:scipy.special.tests.test_basic.pb->scipy.special.pbdn_seq(1, 0.1)
A:scipy.special.tests.test_basic.pbn->scipy.special.pbdn_seq(1, 0.1)
A:scipy.special.tests.test_basic.pbv->scipy.special.pbdv_seq(1, 0.1)
A:scipy.special.tests.test_basic.eta->numpy.linspace(-10, 10, 5)
A:scipy.special.tests.test_basic.poly2->scipy.special.polygamma(2, 1)
A:scipy.special.tests.test_basic.poly3->scipy.special.polygamma(3, 1)
A:scipy.special.tests.test_basic.prol->scipy.special.pro_cv_seq(0, 3, 1)
A:scipy.special.tests.test_basic.ps->scipy.special.psi(1)
A:scipy.special.tests.test_basic.rad->scipy.special.radian(90, 0, 0)
A:scipy.special.tests.test_basic.rad1->scipy.special.radian(90, 1, 60)
A:scipy.special.tests.test_basic.S->numpy.empty((N, N))
A:scipy.special.tests.test_basic.j->scipy.special.spherical_jn(n, x)
A:scipy.special.tests.test_basic.jp->scipy.special.spherical_jn(n, x, derivative=True)
A:scipy.special.tests.test_basic.C->numpy.empty((N, N))
A:scipy.special.tests.test_basic.yp->scipy.special.spherical_yn(n, x, derivative=True)
A:scipy.special.tests.test_basic.rnd->list(map(int, (special.round(10.1), special.round(10.4), special.round(10.5), special.round(10.6))))
A:scipy.special.tests.test_basic.dt->numpy.dtype(np.complex128)
A:scipy.special.tests.test_basic.fi->numpy.finfo(1.0)
A:scipy.special.tests.test_basic.z1->numpy.asarray([(0, 0), (0, np.nan), (0, np.inf), (1.0, 2.0), (1, 1e-30)], dtype=float)
A:scipy.special.tests.test_basic.w1->numpy.vectorize(xfunc)(z1[:, 0], z1[:, 1])
A:scipy.special.tests.test_basic.w2->numpy.vectorize(xfunc)(z2[:, 0], z2[:, 1])
A:scipy.special.tests.test_basic.z->numpy.array(np.random.randn(10, 2).tolist() + [[0, 0.5], [0.5, 0]])
scipy.special.tests.testTestAiry
scipy.special.tests.testTestAiry.test_ai_zeros(self)
scipy.special.tests.testTestAiry.test_ai_zeros_big(self)
scipy.special.tests.testTestAiry.test_airy(self)
scipy.special.tests.testTestAiry.test_airye(self)
scipy.special.tests.testTestAiry.test_bi_zeros(self)
scipy.special.tests.testTestAiry.test_bi_zeros_big(self)
scipy.special.tests.testTestAssocLaguerre
scipy.special.tests.testTestAssocLaguerre.test_assoc_laguerre(self)
scipy.special.tests.testTestBernoulli
scipy.special.tests.testTestBernoulli.test_bernoulli(self)
scipy.special.tests.testTestBessel
scipy.special.tests.testTestBessel._cephes_vs_amos_points(self)
scipy.special.tests.testTestBessel.check_cephes_vs_amos(self,f1,f2,rtol=1e-11,atol=0,skip=None)
scipy.special.tests.testTestBessel.iv_series(self,v,z,n=200)
scipy.special.tests.testTestBessel.test_gh_7909(self)
scipy.special.tests.testTestBessel.test_i0(self)
scipy.special.tests.testTestBessel.test_i0_series(self)
scipy.special.tests.testTestBessel.test_i0e(self)
scipy.special.tests.testTestBessel.test_i1(self)
scipy.special.tests.testTestBessel.test_i1_series(self)
scipy.special.tests.testTestBessel.test_i1e(self)
scipy.special.tests.testTestBessel.test_it2i0k0(self)
scipy.special.tests.testTestBessel.test_it2j0y0(self)
scipy.special.tests.testTestBessel.test_iti0k0(self)
scipy.special.tests.testTestBessel.test_itj0y0(self)
scipy.special.tests.testTestBessel.test_iv(self)
scipy.special.tests.testTestBessel.test_iv_cephes_vs_amos(self)
scipy.special.tests.testTestBessel.test_iv_cephes_vs_amos_mass_test(self)
scipy.special.tests.testTestBessel.test_iv_hyperg_poles(self)
scipy.special.tests.testTestBessel.test_iv_series(self)
scipy.special.tests.testTestBessel.test_ive(self)
scipy.special.tests.testTestBessel.test_ivp(self)
scipy.special.tests.testTestBessel.test_ivp0(self)
scipy.special.tests.testTestBessel.test_j0(self)
scipy.special.tests.testTestBessel.test_j1(self)
scipy.special.tests.testTestBessel.test_jacobi(self)
scipy.special.tests.testTestBessel.test_jn(self)
scipy.special.tests.testTestBessel.test_jn_zeros(self)
scipy.special.tests.testTestBessel.test_jn_zeros_slow(self)
scipy.special.tests.testTestBessel.test_jnjnp_zeros(self)
scipy.special.tests.testTestBessel.test_jnp_zeros(self)
scipy.special.tests.testTestBessel.test_jnyn_zeros(self)
scipy.special.tests.testTestBessel.test_jv(self)
scipy.special.tests.testTestBessel.test_jv_cephes_vs_amos(self)
scipy.special.tests.testTestBessel.test_jve(self)
scipy.special.tests.testTestBessel.test_jvp(self)
scipy.special.tests.testTestBessel.test_k0(self)
scipy.special.tests.testTestBessel.test_k0e(self)
scipy.special.tests.testTestBessel.test_k1(self)
scipy.special.tests.testTestBessel.test_k1e(self)
scipy.special.tests.testTestBessel.test_kn(self)
scipy.special.tests.testTestBessel.test_kn_largeorder(self)
scipy.special.tests.testTestBessel.test_kv0(self)
scipy.special.tests.testTestBessel.test_kv1(self)
scipy.special.tests.testTestBessel.test_kv2(self)
scipy.special.tests.testTestBessel.test_kv_cephes_vs_amos(self)
scipy.special.tests.testTestBessel.test_kv_largearg(self)
scipy.special.tests.testTestBessel.test_kve(self)
scipy.special.tests.testTestBessel.test_kvp_n1(self)
scipy.special.tests.testTestBessel.test_kvp_n2(self)
scipy.special.tests.testTestBessel.test_kvp_v0n1(self)
scipy.special.tests.testTestBessel.test_negv_iv(self)
scipy.special.tests.testTestBessel.test_negv_ive(self)
scipy.special.tests.testTestBessel.test_negv_jv(self)
scipy.special.tests.testTestBessel.test_negv_jve(self)
scipy.special.tests.testTestBessel.test_negv_kv(self)
scipy.special.tests.testTestBessel.test_negv_kve(self)
scipy.special.tests.testTestBessel.test_negv_yv(self)
scipy.special.tests.testTestBessel.test_negv_yve(self)
scipy.special.tests.testTestBessel.test_ticket_503(self)
scipy.special.tests.testTestBessel.test_ticket_623(self)
scipy.special.tests.testTestBessel.test_ticket_853(self)
scipy.special.tests.testTestBessel.test_ticket_854(self)
scipy.special.tests.testTestBessel.test_y0(self)
scipy.special.tests.testTestBessel.test_y0_zeros(self)
scipy.special.tests.testTestBessel.test_y1(self)
scipy.special.tests.testTestBessel.test_y1_zeros(self)
scipy.special.tests.testTestBessel.test_y1p_zeros(self)
scipy.special.tests.testTestBessel.test_yn(self)
scipy.special.tests.testTestBessel.test_yn_zeros(self)
scipy.special.tests.testTestBessel.test_ynp_zeros(self)
scipy.special.tests.testTestBessel.test_ynp_zeros_large_order(self)
scipy.special.tests.testTestBessel.test_yv(self)
scipy.special.tests.testTestBessel.test_yv_cephes_vs_amos(self)
scipy.special.tests.testTestBessel.test_yv_cephes_vs_amos_only_small_orders(self)
scipy.special.tests.testTestBessel.test_yve(self)
scipy.special.tests.testTestBessel.test_yvp(self)
scipy.special.tests.testTestBesselpoly
scipy.special.tests.testTestBesselpoly.test_besselpoly(self)
scipy.special.tests.testTestBeta
scipy.special.tests.testTestBeta.test_beta(self)
scipy.special.tests.testTestBeta.test_betainc(self)
scipy.special.tests.testTestBeta.test_betaincinv(self)
scipy.special.tests.testTestBeta.test_betaln(self)
scipy.special.tests.testTestCephes
scipy.special.tests.testTestCephes.__check_nbdtrik(self)
scipy.special.tests.testTestCephes.__check_nctdtridf(self)
scipy.special.tests.testTestCephes._check_ive(self)
scipy.special.tests.testTestCephes._check_jve(self)
scipy.special.tests.testTestCephes._check_kelvin(self)
scipy.special.tests.testTestCephes._check_kv(self)
scipy.special.tests.testTestCephes._check_kve(self)
scipy.special.tests.testTestCephes._check_modstruve(self)
scipy.special.tests.testTestCephes._check_obl_cv(self)
scipy.special.tests.testTestCephes._check_pro_cv(self)
scipy.special.tests.testTestCephes._check_yve(self)
scipy.special.tests.testTestCephes.test_airy(self)
scipy.special.tests.testTestCephes.test_airye(self)
scipy.special.tests.testTestCephes.test_bdtr(self)
scipy.special.tests.testTestCephes.test_bdtrc(self)
scipy.special.tests.testTestCephes.test_bdtri(self)
scipy.special.tests.testTestCephes.test_bdtrik(self)
scipy.special.tests.testTestCephes.test_bdtrin(self)
scipy.special.tests.testTestCephes.test_bei(self)
scipy.special.tests.testTestCephes.test_beip(self)
scipy.special.tests.testTestCephes.test_ber(self)
scipy.special.tests.testTestCephes.test_berp(self)
scipy.special.tests.testTestCephes.test_besselpoly(self)
scipy.special.tests.testTestCephes.test_beta(self)
scipy.special.tests.testTestCephes.test_beta_inf(self)
scipy.special.tests.testTestCephes.test_betainc(self)
scipy.special.tests.testTestCephes.test_betaincinv(self)
scipy.special.tests.testTestCephes.test_betaln(self)
scipy.special.tests.testTestCephes.test_binom(self)
scipy.special.tests.testTestCephes.test_binom_2(self)
scipy.special.tests.testTestCephes.test_binom_exact(self)
scipy.special.tests.testTestCephes.test_binom_nooverflow_8346(self)
scipy.special.tests.testTestCephes.test_btdtr(self)
scipy.special.tests.testTestCephes.test_btdtri(self)
scipy.special.tests.testTestCephes.test_btdtria(self)
scipy.special.tests.testTestCephes.test_btdtrib(self)
scipy.special.tests.testTestCephes.test_cbrt(self)
scipy.special.tests.testTestCephes.test_chdtr(self)
scipy.special.tests.testTestCephes.test_chdtrc(self)
scipy.special.tests.testTestCephes.test_chdtri(self)
scipy.special.tests.testTestCephes.test_chdtriv(self)
scipy.special.tests.testTestCephes.test_chndtr(self)
scipy.special.tests.testTestCephes.test_chndtridf(self)
scipy.special.tests.testTestCephes.test_chndtrinc(self)
scipy.special.tests.testTestCephes.test_chndtrix(self)
scipy.special.tests.testTestCephes.test_cosdg(self)
scipy.special.tests.testTestCephes.test_cosm1(self)
scipy.special.tests.testTestCephes.test_cotdg(self)
scipy.special.tests.testTestCephes.test_dawsn(self)
scipy.special.tests.testTestCephes.test_diric(self)
scipy.special.tests.testTestCephes.test_diric_broadcasting(self)
scipy.special.tests.testTestCephes.test_ellipe(self)
scipy.special.tests.testTestCephes.test_ellipeinc(self)
scipy.special.tests.testTestCephes.test_ellipj(self)
scipy.special.tests.testTestCephes.test_ellipk(self)
scipy.special.tests.testTestCephes.test_ellipkinc(self)
scipy.special.tests.testTestCephes.test_erf(self)
scipy.special.tests.testTestCephes.test_erf_symmetry(self)
scipy.special.tests.testTestCephes.test_erfc(self)
scipy.special.tests.testTestCephes.test_exp10(self)
scipy.special.tests.testTestCephes.test_exp2(self)
scipy.special.tests.testTestCephes.test_expm1(self)
scipy.special.tests.testTestCephes.test_expm1_complex(self)
scipy.special.tests.testTestCephes.test_expm1_complex_hard(self)
scipy.special.tests.testTestCephes.test_fdtr(self)
scipy.special.tests.testTestCephes.test_fdtrc(self)
scipy.special.tests.testTestCephes.test_fdtri(self)
scipy.special.tests.testTestCephes.test_fdtri_mysterious_failure(self)
scipy.special.tests.testTestCephes.test_fdtridfd(self)
scipy.special.tests.testTestCephes.test_fresnel(self)
scipy.special.tests.testTestCephes.test_gamma(self)
scipy.special.tests.testTestCephes.test_gammainccinv(self)
scipy.special.tests.testTestCephes.test_gammaln(self)
scipy.special.tests.testTestCephes.test_gammasgn(self)
scipy.special.tests.testTestCephes.test_gdtr(self)
scipy.special.tests.testTestCephes.test_gdtr_inf(self)
scipy.special.tests.testTestCephes.test_gdtrc(self)
scipy.special.tests.testTestCephes.test_gdtria(self)
scipy.special.tests.testTestCephes.test_gdtrib(self)
scipy.special.tests.testTestCephes.test_gdtrix(self)
scipy.special.tests.testTestCephes.test_hankel1(self)
scipy.special.tests.testTestCephes.test_hankel1e(self)
scipy.special.tests.testTestCephes.test_hankel2(self)
scipy.special.tests.testTestCephes.test_hankel2e(self)
scipy.special.tests.testTestCephes.test_hyp1f1(self)
scipy.special.tests.testTestCephes.test_hyp2f1(self)
scipy.special.tests.testTestCephes.test_i0(self)
scipy.special.tests.testTestCephes.test_i0e(self)
scipy.special.tests.testTestCephes.test_i1(self)
scipy.special.tests.testTestCephes.test_i1e(self)
scipy.special.tests.testTestCephes.test_it2i0k0(self)
scipy.special.tests.testTestCephes.test_it2j0y0(self)
scipy.special.tests.testTestCephes.test_it2struve0(self)
scipy.special.tests.testTestCephes.test_itairy(self)
scipy.special.tests.testTestCephes.test_iti0k0(self)
scipy.special.tests.testTestCephes.test_itj0y0(self)
scipy.special.tests.testTestCephes.test_itmodstruve0(self)
scipy.special.tests.testTestCephes.test_itstruve0(self)
scipy.special.tests.testTestCephes.test_iv(self)
scipy.special.tests.testTestCephes.test_j0(self)
scipy.special.tests.testTestCephes.test_j1(self)
scipy.special.tests.testTestCephes.test_jn(self)
scipy.special.tests.testTestCephes.test_jv(self)
scipy.special.tests.testTestCephes.test_k0(self)
scipy.special.tests.testTestCephes.test_k0e(self)
scipy.special.tests.testTestCephes.test_k1(self)
scipy.special.tests.testTestCephes.test_k1e(self)
scipy.special.tests.testTestCephes.test_kei(self)
scipy.special.tests.testTestCephes.test_keip(self)
scipy.special.tests.testTestCephes.test_ker(self)
scipy.special.tests.testTestCephes.test_kerp(self)
scipy.special.tests.testTestCephes.test_kn(self)
scipy.special.tests.testTestCephes.test_kolmogc(self)
scipy.special.tests.testTestCephes.test_kolmogci(self)
scipy.special.tests.testTestCephes.test_kolmogi(self)
scipy.special.tests.testTestCephes.test_kolmogorov(self)
scipy.special.tests.testTestCephes.test_kolmogp(self)
scipy.special.tests.testTestCephes.test_log1p(self)
scipy.special.tests.testTestCephes.test_log1p_complex(self)
scipy.special.tests.testTestCephes.test_lpmv(self)
scipy.special.tests.testTestCephes.test_mathieu_a(self)
scipy.special.tests.testTestCephes.test_mathieu_b(self)
scipy.special.tests.testTestCephes.test_mathieu_cem(self)
scipy.special.tests.testTestCephes.test_mathieu_modcem1(self)
scipy.special.tests.testTestCephes.test_mathieu_modcem2(self)
scipy.special.tests.testTestCephes.test_mathieu_modsem1(self)
scipy.special.tests.testTestCephes.test_mathieu_modsem2(self)
scipy.special.tests.testTestCephes.test_mathieu_overflow(self)
scipy.special.tests.testTestCephes.test_mathieu_sem(self)
scipy.special.tests.testTestCephes.test_mathieu_ticket_1847(self)
scipy.special.tests.testTestCephes.test_modfresnelm(self)
scipy.special.tests.testTestCephes.test_modfresnelp(self)
scipy.special.tests.testTestCephes.test_nbdtr(self)
scipy.special.tests.testTestCephes.test_nbdtrc(self)
scipy.special.tests.testTestCephes.test_nbdtri(self)
scipy.special.tests.testTestCephes.test_nbdtrin(self)
scipy.special.tests.testTestCephes.test_ncfdtr(self)
scipy.special.tests.testTestCephes.test_ncfdtri(self)
scipy.special.tests.testTestCephes.test_ncfdtridfd(self)
scipy.special.tests.testTestCephes.test_ncfdtridfn(self)
scipy.special.tests.testTestCephes.test_ncfdtrinc(self)
scipy.special.tests.testTestCephes.test_nctdtr(self)
scipy.special.tests.testTestCephes.test_nctdtrinc(self)
scipy.special.tests.testTestCephes.test_nctdtrit(self)
scipy.special.tests.testTestCephes.test_nrdtrimn(self)
scipy.special.tests.testTestCephes.test_nrdtrisd(self)
scipy.special.tests.testTestCephes.test_obl_ang1(self)
scipy.special.tests.testTestCephes.test_obl_ang1_cv(self)
scipy.special.tests.testTestCephes.test_obl_rad1(self)
scipy.special.tests.testTestCephes.test_obl_rad1_cv(self)
scipy.special.tests.testTestCephes.test_obl_rad2(self)
scipy.special.tests.testTestCephes.test_obl_rad2_cv(self)
scipy.special.tests.testTestCephes.test_pbdv(self)
scipy.special.tests.testTestCephes.test_pbvv(self)
scipy.special.tests.testTestCephes.test_pbwa(self)
scipy.special.tests.testTestCephes.test_pdtr(self)
scipy.special.tests.testTestCephes.test_pdtrc(self)
scipy.special.tests.testTestCephes.test_pdtri(self)
scipy.special.tests.testTestCephes.test_pdtrik(self)
scipy.special.tests.testTestCephes.test_pro_ang1(self)
scipy.special.tests.testTestCephes.test_pro_ang1_cv(self)
scipy.special.tests.testTestCephes.test_pro_rad1(self)
scipy.special.tests.testTestCephes.test_pro_rad1_cv(self)
scipy.special.tests.testTestCephes.test_pro_rad2(self)
scipy.special.tests.testTestCephes.test_pro_rad2_cv(self)
scipy.special.tests.testTestCephes.test_psi(self)
scipy.special.tests.testTestCephes.test_radian(self)
scipy.special.tests.testTestCephes.test_rgamma(self)
scipy.special.tests.testTestCephes.test_round(self)
scipy.special.tests.testTestCephes.test_shichi(self)
scipy.special.tests.testTestCephes.test_sici(self)
scipy.special.tests.testTestCephes.test_sindg(self)
scipy.special.tests.testTestCephes.test_smirnov(self)
scipy.special.tests.testTestCephes.test_smirnovc(self)
scipy.special.tests.testTestCephes.test_smirnovci(self)
scipy.special.tests.testTestCephes.test_smirnovi(self)
scipy.special.tests.testTestCephes.test_smirnovp(self)
scipy.special.tests.testTestCephes.test_spence(self)
scipy.special.tests.testTestCephes.test_stdtr(self)
scipy.special.tests.testTestCephes.test_stdtridf(self)
scipy.special.tests.testTestCephes.test_stdtrit(self)
scipy.special.tests.testTestCephes.test_struve(self)
scipy.special.tests.testTestCephes.test_tandg(self)
scipy.special.tests.testTestCephes.test_tklmbda(self)
scipy.special.tests.testTestCephes.test_wofz(self)
scipy.special.tests.testTestCephes.test_y0(self)
scipy.special.tests.testTestCephes.test_y1(self)
scipy.special.tests.testTestCephes.test_yn(self)
scipy.special.tests.testTestCephes.test_yv(self)
scipy.special.tests.testTestCombinatorics
scipy.special.tests.testTestCombinatorics.test_comb(self)
scipy.special.tests.testTestCombinatorics.test_comb_legacy(self,N,k,legacy,repetition)
scipy.special.tests.testTestCombinatorics.test_comb_with_np_int64(self)
scipy.special.tests.testTestCombinatorics.test_comb_zeros(self)
scipy.special.tests.testTestCombinatorics.test_perm(self)
scipy.special.tests.testTestCombinatorics.test_perm_zeros(self)
scipy.special.tests.testTestEllip
scipy.special.tests.testTestEllip.test_ellipe(self)
scipy.special.tests.testTestEllip.test_ellipeinc(self)
scipy.special.tests.testTestEllip.test_ellipeinc_2(self)
scipy.special.tests.testTestEllip.test_ellipj(self)
scipy.special.tests.testTestEllip.test_ellipj_nan(self)
scipy.special.tests.testTestEllip.test_ellipk(self)
scipy.special.tests.testTestEllip.test_ellipkinc(self)
scipy.special.tests.testTestEllip.test_ellipkinc_2(self)
scipy.special.tests.testTestEllip.test_ellipkinc_singular(self)
scipy.special.tests.testTestEllipCarlson(object)
scipy.special.tests.testTestEllipCarlson.test_elliprc(self)
scipy.special.tests.testTestEllipCarlson.test_elliprd(self)
scipy.special.tests.testTestEllipCarlson.test_elliprf(self)
scipy.special.tests.testTestEllipCarlson.test_elliprg(self)
scipy.special.tests.testTestEllipCarlson.test_elliprj(self)
scipy.special.tests.testTestEllipCarlson.test_elliprj_hard(self)
scipy.special.tests.testTestEllipLegendreCarlsonIdentities(object)
scipy.special.tests.testTestEllipLegendreCarlsonIdentities.setup_class(self)
scipy.special.tests.testTestEllipLegendreCarlsonIdentities.test_e(self)
scipy.special.tests.testTestEllipLegendreCarlsonIdentities.test_k(self)
scipy.special.tests.testTestEllipLegendreCarlsonIdentities.test_km1(self)
scipy.special.tests.testTestErf
scipy.special.tests.testTestErf._check_variant_func(self,func,other_func,rtol,atol=0)
scipy.special.tests.testTestErf.test_dawsn_consistent(self)
scipy.special.tests.testTestErf.test_dawsn_nan_inf(self)
scipy.special.tests.testTestErf.test_erf(self)
scipy.special.tests.testTestErf.test_erf_nan_inf(self)
scipy.special.tests.testTestErf.test_erf_zeros(self)
scipy.special.tests.testTestErf.test_erfc_consistent(self)
scipy.special.tests.testTestErf.test_erfc_nan_inf(self)
scipy.special.tests.testTestErf.test_erfcx_consistent(self)
scipy.special.tests.testTestErf.test_erfcx_nan_inf(self)
scipy.special.tests.testTestErf.test_erfi_consistent(self)
scipy.special.tests.testTestErf.test_erfi_nan_inf(self)
scipy.special.tests.testTestErf.test_wofz_nan_inf(self)
scipy.special.tests.testTestEuler
scipy.special.tests.testTestEuler.test_euler(self)
scipy.special.tests.testTestExp
scipy.special.tests.testTestExp.test_exp10(self)
scipy.special.tests.testTestExp.test_exp10more(self)
scipy.special.tests.testTestExp.test_exp2(self)
scipy.special.tests.testTestExp.test_exp2more(self)
scipy.special.tests.testTestExp.test_expm1(self)
scipy.special.tests.testTestExp.test_expm1more(self)
scipy.special.tests.testTestFactorialFunctions
scipy.special.tests.testTestFactorialFunctions.test_factorial(self)
scipy.special.tests.testTestFactorialFunctions.test_factorial2(self)
scipy.special.tests.testTestFactorialFunctions.test_factorial_0d_return_type(self,x,exact)
scipy.special.tests.testTestFactorialFunctions.test_factorialk(self)
scipy.special.tests.testTestFactorialFunctions.test_mixed_nan_inputs(self)
scipy.special.tests.testTestFactorialFunctions.test_nan_inputs(self,x,exact)
scipy.special.tests.testTestFresnel
scipy.special.tests.testTestFresnel.test_fresnel_values(self,z,s,c)
scipy.special.tests.testTestFresnel.test_fresnel_zeros(self)
scipy.special.tests.testTestFresnel.test_fresnelc_zeros(self)
scipy.special.tests.testTestFresnel.test_fresnels_zeros(self)
scipy.special.tests.testTestFresnelIntegral
scipy.special.tests.testTestFresnelIntegral.test_modfresnelm(self)
scipy.special.tests.testTestFresnelIntegral.test_modfresnelp(self)
scipy.special.tests.testTestGamma
scipy.special.tests.testTestGamma.test_975(self)
scipy.special.tests.testTestGamma.test_gamma(self)
scipy.special.tests.testTestGamma.test_gammainccinv(self)
scipy.special.tests.testTestGamma.test_gammaincinv(self)
scipy.special.tests.testTestGamma.test_gammaln(self)
scipy.special.tests.testTestGamma.test_infinity(self)
scipy.special.tests.testTestGamma.test_rgamma(self)
scipy.special.tests.testTestHankel
scipy.special.tests.testTestHankel.test_hankel1(self)
scipy.special.tests.testTestHankel.test_hankel1e(self)
scipy.special.tests.testTestHankel.test_hankel2(self)
scipy.special.tests.testTestHankel.test_hankl2e(self)
scipy.special.tests.testTestHankel.test_neg2e(self)
scipy.special.tests.testTestHankel.test_negv1(self)
scipy.special.tests.testTestHankel.test_negv1e(self)
scipy.special.tests.testTestHankel.test_negv2(self)
scipy.special.tests.testTestHyper
scipy.special.tests.testTestHyper.test_h1vp(self)
scipy.special.tests.testTestHyper.test_h2vp(self)
scipy.special.tests.testTestHyper.test_hyp0f1(self)
scipy.special.tests.testTestHyper.test_hyp0f1_gh5764(self)
scipy.special.tests.testTestHyper.test_hyp1f1(self)
scipy.special.tests.testTestHyper.test_hyp1f1_gh2282(self)
scipy.special.tests.testTestHyper.test_hyp1f1_gh2957(self)
scipy.special.tests.testTestHyper.test_hyp2f1(self)
scipy.special.tests.testTestHyper.test_hyperu(self)
scipy.special.tests.testTestHyper.test_hyperu_gh2287(self)
scipy.special.tests.testTestKelvin
scipy.special.tests.testTestKelvin.test_bei(self)
scipy.special.tests.testTestKelvin.test_bei_zeros(self)
scipy.special.tests.testTestKelvin.test_beip(self)
scipy.special.tests.testTestKelvin.test_beip_zeros(self)
scipy.special.tests.testTestKelvin.test_ber(self)
scipy.special.tests.testTestKelvin.test_ber_zeros(self)
scipy.special.tests.testTestKelvin.test_berp(self)
scipy.special.tests.testTestKelvin.test_berp_zeros(self)
scipy.special.tests.testTestKelvin.test_kei(self)
scipy.special.tests.testTestKelvin.test_kei_zeros(self)
scipy.special.tests.testTestKelvin.test_keip(self)
scipy.special.tests.testTestKelvin.test_keip_zeros(self)
scipy.special.tests.testTestKelvin.test_kelvin(self)
scipy.special.tests.testTestKelvin.test_kelvin_zeros(self)
scipy.special.tests.testTestKelvin.test_ker(self)
scipy.special.tests.testTestKelvin.test_ker_zeros(self)
scipy.special.tests.testTestKelvin.test_kerp(self)
scipy.special.tests.testTestKelvin.test_kerp_zeros(self)
scipy.special.tests.testTestLaguerre
scipy.special.tests.testTestLaguerre.test_genlaguerre(self)
scipy.special.tests.testTestLaguerre.test_laguerre(self)
scipy.special.tests.testTestLambda
scipy.special.tests.testTestLambda.test_lmbda(self)
scipy.special.tests.testTestLegendre
scipy.special.tests.testTestLegendre.test_legendre(self)
scipy.special.tests.testTestLegendreFunctions
scipy.special.tests.testTestLegendreFunctions.test_clpmn(self)
scipy.special.tests.testTestLegendreFunctions.test_clpmn_across_unit_circle(self)
scipy.special.tests.testTestLegendreFunctions.test_clpmn_close_to_real_2(self)
scipy.special.tests.testTestLegendreFunctions.test_clpmn_close_to_real_3(self)
scipy.special.tests.testTestLegendreFunctions.test_deriv_clpmn(self)
scipy.special.tests.testTestLegendreFunctions.test_inf(self)
scipy.special.tests.testTestLegendreFunctions.test_lpmn(self)
scipy.special.tests.testTestLegendreFunctions.test_lpmv(self)
scipy.special.tests.testTestLegendreFunctions.test_lpn(self)
scipy.special.tests.testTestLegendreFunctions.test_lqmn(self)
scipy.special.tests.testTestLegendreFunctions.test_lqmn_gt1(self)
scipy.special.tests.testTestLegendreFunctions.test_lqmn_shape(self)
scipy.special.tests.testTestLegendreFunctions.test_lqn(self)
scipy.special.tests.testTestLog1p
scipy.special.tests.testTestLog1p.test_log1p(self)
scipy.special.tests.testTestLog1p.test_log1pmore(self)
scipy.special.tests.testTestMathieu
scipy.special.tests.testTestMathieu.test_mathieu_a(self)
scipy.special.tests.testTestMathieu.test_mathieu_even_coef(self)
scipy.special.tests.testTestMathieu.test_mathieu_odd_coef(self)
scipy.special.tests.testTestOblCvSeq
scipy.special.tests.testTestOblCvSeq.test_obl_cv_seq(self)
scipy.special.tests.testTestParabolicCylinder
scipy.special.tests.testTestParabolicCylinder.test_pbdn_seq(self)
scipy.special.tests.testTestParabolicCylinder.test_pbdv(self)
scipy.special.tests.testTestParabolicCylinder.test_pbdv_gradient(self)
scipy.special.tests.testTestParabolicCylinder.test_pbdv_points(self)
scipy.special.tests.testTestParabolicCylinder.test_pbdv_seq(self)
scipy.special.tests.testTestParabolicCylinder.test_pbvv_gradient(self)
scipy.special.tests.testTestPolygamma
scipy.special.tests.testTestPolygamma.test_polygamma(self)
scipy.special.tests.testTestProCvSeq
scipy.special.tests.testTestProCvSeq.test_pro_cv_seq(self)
scipy.special.tests.testTestPsi
scipy.special.tests.testTestPsi.test_psi(self)
scipy.special.tests.testTestRadian
scipy.special.tests.testTestRadian.test_radian(self)
scipy.special.tests.testTestRadian.test_radianmore(self)
scipy.special.tests.testTestRiccati
scipy.special.tests.testTestRiccati.test_riccati_jn(self)
scipy.special.tests.testTestRiccati.test_riccati_yn(self)
scipy.special.tests.testTestRound
scipy.special.tests.testTestRound.test_round(self)
scipy.special.tests.testTestStruve
scipy.special.tests.testTestStruve._series(self,v,z,n=100)
scipy.special.tests.testTestStruve.test_regression_679(self)
scipy.special.tests.testTestStruve.test_some_values(self)
scipy.special.tests.testTestStruve.test_vs_series(self)
scipy.special.tests.testTestTandg
scipy.special.tests.testTestTandg.test_specialpoints(self)
scipy.special.tests.testTestTandg.test_tandg(self)
scipy.special.tests.testTestTandg.test_tandgmore(self)
scipy.special.tests.testTestTrigonometric
scipy.special.tests.testTestTrigonometric.test_cbrt(self)
scipy.special.tests.testTestTrigonometric.test_cbrtmore(self)
scipy.special.tests.testTestTrigonometric.test_cosdg(self)
scipy.special.tests.testTestTrigonometric.test_cosdgmore(self)
scipy.special.tests.testTestTrigonometric.test_cosm1(self)
scipy.special.tests.testTestTrigonometric.test_cotdg(self)
scipy.special.tests.testTestTrigonometric.test_cotdgmore(self)
scipy.special.tests.testTestTrigonometric.test_sinc(self)
scipy.special.tests.testTestTrigonometric.test_sindg(self)
scipy.special.tests.testTestTrigonometric.test_sindgmore(self)
scipy.special.tests.testTestTrigonometric.test_specialpoints(self)
scipy.special.tests.test_basic.TestAiry
scipy.special.tests.test_basic.TestAiry.test_ai_zeros(self)
scipy.special.tests.test_basic.TestAiry.test_ai_zeros_big(self)
scipy.special.tests.test_basic.TestAiry.test_airy(self)
scipy.special.tests.test_basic.TestAiry.test_airye(self)
scipy.special.tests.test_basic.TestAiry.test_bi_zeros(self)
scipy.special.tests.test_basic.TestAiry.test_bi_zeros_big(self)
scipy.special.tests.test_basic.TestAssocLaguerre
scipy.special.tests.test_basic.TestAssocLaguerre.test_assoc_laguerre(self)
scipy.special.tests.test_basic.TestBernoulli
scipy.special.tests.test_basic.TestBernoulli.test_bernoulli(self)
scipy.special.tests.test_basic.TestBessel
scipy.special.tests.test_basic.TestBessel._cephes_vs_amos_points(self)
scipy.special.tests.test_basic.TestBessel.check_cephes_vs_amos(self,f1,f2,rtol=1e-11,atol=0,skip=None)
scipy.special.tests.test_basic.TestBessel.iv_series(self,v,z,n=200)
scipy.special.tests.test_basic.TestBessel.test_gh_7909(self)
scipy.special.tests.test_basic.TestBessel.test_i0(self)
scipy.special.tests.test_basic.TestBessel.test_i0_series(self)
scipy.special.tests.test_basic.TestBessel.test_i0e(self)
scipy.special.tests.test_basic.TestBessel.test_i1(self)
scipy.special.tests.test_basic.TestBessel.test_i1_series(self)
scipy.special.tests.test_basic.TestBessel.test_i1e(self)
scipy.special.tests.test_basic.TestBessel.test_it2i0k0(self)
scipy.special.tests.test_basic.TestBessel.test_it2j0y0(self)
scipy.special.tests.test_basic.TestBessel.test_iti0k0(self)
scipy.special.tests.test_basic.TestBessel.test_itj0y0(self)
scipy.special.tests.test_basic.TestBessel.test_iv(self)
scipy.special.tests.test_basic.TestBessel.test_iv_cephes_vs_amos(self)
scipy.special.tests.test_basic.TestBessel.test_iv_cephes_vs_amos_mass_test(self)
scipy.special.tests.test_basic.TestBessel.test_iv_hyperg_poles(self)
scipy.special.tests.test_basic.TestBessel.test_iv_series(self)
scipy.special.tests.test_basic.TestBessel.test_ive(self)
scipy.special.tests.test_basic.TestBessel.test_ivp(self)
scipy.special.tests.test_basic.TestBessel.test_ivp0(self)
scipy.special.tests.test_basic.TestBessel.test_j0(self)
scipy.special.tests.test_basic.TestBessel.test_j1(self)
scipy.special.tests.test_basic.TestBessel.test_jacobi(self)
scipy.special.tests.test_basic.TestBessel.test_jn(self)
scipy.special.tests.test_basic.TestBessel.test_jn_zeros(self)
scipy.special.tests.test_basic.TestBessel.test_jn_zeros_slow(self)
scipy.special.tests.test_basic.TestBessel.test_jnjnp_zeros(self)
scipy.special.tests.test_basic.TestBessel.test_jnp_zeros(self)
scipy.special.tests.test_basic.TestBessel.test_jnyn_zeros(self)
scipy.special.tests.test_basic.TestBessel.test_jv(self)
scipy.special.tests.test_basic.TestBessel.test_jv_cephes_vs_amos(self)
scipy.special.tests.test_basic.TestBessel.test_jve(self)
scipy.special.tests.test_basic.TestBessel.test_jvp(self)
scipy.special.tests.test_basic.TestBessel.test_k0(self)
scipy.special.tests.test_basic.TestBessel.test_k0e(self)
scipy.special.tests.test_basic.TestBessel.test_k1(self)
scipy.special.tests.test_basic.TestBessel.test_k1e(self)
scipy.special.tests.test_basic.TestBessel.test_kn(self)
scipy.special.tests.test_basic.TestBessel.test_kn_largeorder(self)
scipy.special.tests.test_basic.TestBessel.test_kv0(self)
scipy.special.tests.test_basic.TestBessel.test_kv1(self)
scipy.special.tests.test_basic.TestBessel.test_kv2(self)
scipy.special.tests.test_basic.TestBessel.test_kv_cephes_vs_amos(self)
scipy.special.tests.test_basic.TestBessel.test_kv_largearg(self)
scipy.special.tests.test_basic.TestBessel.test_kve(self)
scipy.special.tests.test_basic.TestBessel.test_kvp_n1(self)
scipy.special.tests.test_basic.TestBessel.test_kvp_n2(self)
scipy.special.tests.test_basic.TestBessel.test_kvp_v0n1(self)
scipy.special.tests.test_basic.TestBessel.test_negv_iv(self)
scipy.special.tests.test_basic.TestBessel.test_negv_ive(self)
scipy.special.tests.test_basic.TestBessel.test_negv_jv(self)
scipy.special.tests.test_basic.TestBessel.test_negv_jve(self)
scipy.special.tests.test_basic.TestBessel.test_negv_kv(self)
scipy.special.tests.test_basic.TestBessel.test_negv_kve(self)
scipy.special.tests.test_basic.TestBessel.test_negv_yv(self)
scipy.special.tests.test_basic.TestBessel.test_negv_yve(self)
scipy.special.tests.test_basic.TestBessel.test_ticket_503(self)
scipy.special.tests.test_basic.TestBessel.test_ticket_623(self)
scipy.special.tests.test_basic.TestBessel.test_ticket_853(self)
scipy.special.tests.test_basic.TestBessel.test_ticket_854(self)
scipy.special.tests.test_basic.TestBessel.test_y0(self)
scipy.special.tests.test_basic.TestBessel.test_y0_zeros(self)
scipy.special.tests.test_basic.TestBessel.test_y1(self)
scipy.special.tests.test_basic.TestBessel.test_y1_zeros(self)
scipy.special.tests.test_basic.TestBessel.test_y1p_zeros(self)
scipy.special.tests.test_basic.TestBessel.test_yn(self)
scipy.special.tests.test_basic.TestBessel.test_yn_zeros(self)
scipy.special.tests.test_basic.TestBessel.test_ynp_zeros(self)
scipy.special.tests.test_basic.TestBessel.test_ynp_zeros_large_order(self)
scipy.special.tests.test_basic.TestBessel.test_yv(self)
scipy.special.tests.test_basic.TestBessel.test_yv_cephes_vs_amos(self)
scipy.special.tests.test_basic.TestBessel.test_yv_cephes_vs_amos_only_small_orders(self)
scipy.special.tests.test_basic.TestBessel.test_yve(self)
scipy.special.tests.test_basic.TestBessel.test_yvp(self)
scipy.special.tests.test_basic.TestBesselpoly
scipy.special.tests.test_basic.TestBesselpoly.test_besselpoly(self)
scipy.special.tests.test_basic.TestBeta
scipy.special.tests.test_basic.TestBeta.test_beta(self)
scipy.special.tests.test_basic.TestBeta.test_betainc(self)
scipy.special.tests.test_basic.TestBeta.test_betaincinv(self)
scipy.special.tests.test_basic.TestBeta.test_betaln(self)
scipy.special.tests.test_basic.TestCephes
scipy.special.tests.test_basic.TestCephes.__check_nbdtrik(self)
scipy.special.tests.test_basic.TestCephes.__check_nctdtridf(self)
scipy.special.tests.test_basic.TestCephes._check_ive(self)
scipy.special.tests.test_basic.TestCephes._check_jve(self)
scipy.special.tests.test_basic.TestCephes._check_kelvin(self)
scipy.special.tests.test_basic.TestCephes._check_kv(self)
scipy.special.tests.test_basic.TestCephes._check_kve(self)
scipy.special.tests.test_basic.TestCephes._check_modstruve(self)
scipy.special.tests.test_basic.TestCephes._check_obl_cv(self)
scipy.special.tests.test_basic.TestCephes._check_pro_cv(self)
scipy.special.tests.test_basic.TestCephes._check_yve(self)
scipy.special.tests.test_basic.TestCephes.test_airy(self)
scipy.special.tests.test_basic.TestCephes.test_airye(self)
scipy.special.tests.test_basic.TestCephes.test_bdtr(self)
scipy.special.tests.test_basic.TestCephes.test_bdtrc(self)
scipy.special.tests.test_basic.TestCephes.test_bdtri(self)
scipy.special.tests.test_basic.TestCephes.test_bdtrik(self)
scipy.special.tests.test_basic.TestCephes.test_bdtrin(self)
scipy.special.tests.test_basic.TestCephes.test_bei(self)
scipy.special.tests.test_basic.TestCephes.test_beip(self)
scipy.special.tests.test_basic.TestCephes.test_ber(self)
scipy.special.tests.test_basic.TestCephes.test_berp(self)
scipy.special.tests.test_basic.TestCephes.test_besselpoly(self)
scipy.special.tests.test_basic.TestCephes.test_beta(self)
scipy.special.tests.test_basic.TestCephes.test_beta_inf(self)
scipy.special.tests.test_basic.TestCephes.test_betainc(self)
scipy.special.tests.test_basic.TestCephes.test_betaincinv(self)
scipy.special.tests.test_basic.TestCephes.test_betaln(self)
scipy.special.tests.test_basic.TestCephes.test_binom(self)
scipy.special.tests.test_basic.TestCephes.test_binom_2(self)
scipy.special.tests.test_basic.TestCephes.test_binom_exact(self)
scipy.special.tests.test_basic.TestCephes.test_binom_nooverflow_8346(self)
scipy.special.tests.test_basic.TestCephes.test_btdtr(self)
scipy.special.tests.test_basic.TestCephes.test_btdtri(self)
scipy.special.tests.test_basic.TestCephes.test_btdtria(self)
scipy.special.tests.test_basic.TestCephes.test_btdtrib(self)
scipy.special.tests.test_basic.TestCephes.test_cbrt(self)
scipy.special.tests.test_basic.TestCephes.test_chdtr(self)
scipy.special.tests.test_basic.TestCephes.test_chdtrc(self)
scipy.special.tests.test_basic.TestCephes.test_chdtri(self)
scipy.special.tests.test_basic.TestCephes.test_chdtriv(self)
scipy.special.tests.test_basic.TestCephes.test_chndtr(self)
scipy.special.tests.test_basic.TestCephes.test_chndtridf(self)
scipy.special.tests.test_basic.TestCephes.test_chndtrinc(self)
scipy.special.tests.test_basic.TestCephes.test_chndtrix(self)
scipy.special.tests.test_basic.TestCephes.test_cosdg(self)
scipy.special.tests.test_basic.TestCephes.test_cosm1(self)
scipy.special.tests.test_basic.TestCephes.test_cotdg(self)
scipy.special.tests.test_basic.TestCephes.test_dawsn(self)
scipy.special.tests.test_basic.TestCephes.test_diric(self)
scipy.special.tests.test_basic.TestCephes.test_diric_broadcasting(self)
scipy.special.tests.test_basic.TestCephes.test_ellipe(self)
scipy.special.tests.test_basic.TestCephes.test_ellipeinc(self)
scipy.special.tests.test_basic.TestCephes.test_ellipj(self)
scipy.special.tests.test_basic.TestCephes.test_ellipk(self)
scipy.special.tests.test_basic.TestCephes.test_ellipkinc(self)
scipy.special.tests.test_basic.TestCephes.test_erf(self)
scipy.special.tests.test_basic.TestCephes.test_erf_symmetry(self)
scipy.special.tests.test_basic.TestCephes.test_erfc(self)
scipy.special.tests.test_basic.TestCephes.test_exp10(self)
scipy.special.tests.test_basic.TestCephes.test_exp2(self)
scipy.special.tests.test_basic.TestCephes.test_expm1(self)
scipy.special.tests.test_basic.TestCephes.test_expm1_complex(self)
scipy.special.tests.test_basic.TestCephes.test_expm1_complex_hard(self)
scipy.special.tests.test_basic.TestCephes.test_fdtr(self)
scipy.special.tests.test_basic.TestCephes.test_fdtrc(self)
scipy.special.tests.test_basic.TestCephes.test_fdtri(self)
scipy.special.tests.test_basic.TestCephes.test_fdtri_mysterious_failure(self)
scipy.special.tests.test_basic.TestCephes.test_fdtridfd(self)
scipy.special.tests.test_basic.TestCephes.test_fresnel(self)
scipy.special.tests.test_basic.TestCephes.test_gamma(self)
scipy.special.tests.test_basic.TestCephes.test_gammainccinv(self)
scipy.special.tests.test_basic.TestCephes.test_gammaln(self)
scipy.special.tests.test_basic.TestCephes.test_gammasgn(self)
scipy.special.tests.test_basic.TestCephes.test_gdtr(self)
scipy.special.tests.test_basic.TestCephes.test_gdtr_inf(self)
scipy.special.tests.test_basic.TestCephes.test_gdtrc(self)
scipy.special.tests.test_basic.TestCephes.test_gdtria(self)
scipy.special.tests.test_basic.TestCephes.test_gdtrib(self)
scipy.special.tests.test_basic.TestCephes.test_gdtrix(self)
scipy.special.tests.test_basic.TestCephes.test_hankel1(self)
scipy.special.tests.test_basic.TestCephes.test_hankel1e(self)
scipy.special.tests.test_basic.TestCephes.test_hankel2(self)
scipy.special.tests.test_basic.TestCephes.test_hankel2e(self)
scipy.special.tests.test_basic.TestCephes.test_hyp1f1(self)
scipy.special.tests.test_basic.TestCephes.test_hyp2f1(self)
scipy.special.tests.test_basic.TestCephes.test_i0(self)
scipy.special.tests.test_basic.TestCephes.test_i0e(self)
scipy.special.tests.test_basic.TestCephes.test_i1(self)
scipy.special.tests.test_basic.TestCephes.test_i1e(self)
scipy.special.tests.test_basic.TestCephes.test_it2i0k0(self)
scipy.special.tests.test_basic.TestCephes.test_it2j0y0(self)
scipy.special.tests.test_basic.TestCephes.test_it2struve0(self)
scipy.special.tests.test_basic.TestCephes.test_itairy(self)
scipy.special.tests.test_basic.TestCephes.test_iti0k0(self)
scipy.special.tests.test_basic.TestCephes.test_itj0y0(self)
scipy.special.tests.test_basic.TestCephes.test_itmodstruve0(self)
scipy.special.tests.test_basic.TestCephes.test_itstruve0(self)
scipy.special.tests.test_basic.TestCephes.test_iv(self)
scipy.special.tests.test_basic.TestCephes.test_j0(self)
scipy.special.tests.test_basic.TestCephes.test_j1(self)
scipy.special.tests.test_basic.TestCephes.test_jn(self)
scipy.special.tests.test_basic.TestCephes.test_jv(self)
scipy.special.tests.test_basic.TestCephes.test_k0(self)
scipy.special.tests.test_basic.TestCephes.test_k0e(self)
scipy.special.tests.test_basic.TestCephes.test_k1(self)
scipy.special.tests.test_basic.TestCephes.test_k1e(self)
scipy.special.tests.test_basic.TestCephes.test_kei(self)
scipy.special.tests.test_basic.TestCephes.test_keip(self)
scipy.special.tests.test_basic.TestCephes.test_ker(self)
scipy.special.tests.test_basic.TestCephes.test_kerp(self)
scipy.special.tests.test_basic.TestCephes.test_kn(self)
scipy.special.tests.test_basic.TestCephes.test_kolmogc(self)
scipy.special.tests.test_basic.TestCephes.test_kolmogci(self)
scipy.special.tests.test_basic.TestCephes.test_kolmogi(self)
scipy.special.tests.test_basic.TestCephes.test_kolmogorov(self)
scipy.special.tests.test_basic.TestCephes.test_kolmogp(self)
scipy.special.tests.test_basic.TestCephes.test_log1p(self)
scipy.special.tests.test_basic.TestCephes.test_log1p_complex(self)
scipy.special.tests.test_basic.TestCephes.test_lpmv(self)
scipy.special.tests.test_basic.TestCephes.test_mathieu_a(self)
scipy.special.tests.test_basic.TestCephes.test_mathieu_b(self)
scipy.special.tests.test_basic.TestCephes.test_mathieu_cem(self)
scipy.special.tests.test_basic.TestCephes.test_mathieu_modcem1(self)
scipy.special.tests.test_basic.TestCephes.test_mathieu_modcem2(self)
scipy.special.tests.test_basic.TestCephes.test_mathieu_modsem1(self)
scipy.special.tests.test_basic.TestCephes.test_mathieu_modsem2(self)
scipy.special.tests.test_basic.TestCephes.test_mathieu_overflow(self)
scipy.special.tests.test_basic.TestCephes.test_mathieu_sem(self)
scipy.special.tests.test_basic.TestCephes.test_mathieu_ticket_1847(self)
scipy.special.tests.test_basic.TestCephes.test_modfresnelm(self)
scipy.special.tests.test_basic.TestCephes.test_modfresnelp(self)
scipy.special.tests.test_basic.TestCephes.test_nbdtr(self)
scipy.special.tests.test_basic.TestCephes.test_nbdtrc(self)
scipy.special.tests.test_basic.TestCephes.test_nbdtri(self)
scipy.special.tests.test_basic.TestCephes.test_nbdtrin(self)
scipy.special.tests.test_basic.TestCephes.test_ncfdtr(self)
scipy.special.tests.test_basic.TestCephes.test_ncfdtri(self)
scipy.special.tests.test_basic.TestCephes.test_ncfdtridfd(self)
scipy.special.tests.test_basic.TestCephes.test_ncfdtridfn(self)
scipy.special.tests.test_basic.TestCephes.test_ncfdtrinc(self)
scipy.special.tests.test_basic.TestCephes.test_nctdtr(self)
scipy.special.tests.test_basic.TestCephes.test_nctdtrinc(self)
scipy.special.tests.test_basic.TestCephes.test_nctdtrit(self)
scipy.special.tests.test_basic.TestCephes.test_nrdtrimn(self)
scipy.special.tests.test_basic.TestCephes.test_nrdtrisd(self)
scipy.special.tests.test_basic.TestCephes.test_obl_ang1(self)
scipy.special.tests.test_basic.TestCephes.test_obl_ang1_cv(self)
scipy.special.tests.test_basic.TestCephes.test_obl_rad1(self)
scipy.special.tests.test_basic.TestCephes.test_obl_rad1_cv(self)
scipy.special.tests.test_basic.TestCephes.test_obl_rad2(self)
scipy.special.tests.test_basic.TestCephes.test_obl_rad2_cv(self)
scipy.special.tests.test_basic.TestCephes.test_pbdv(self)
scipy.special.tests.test_basic.TestCephes.test_pbvv(self)
scipy.special.tests.test_basic.TestCephes.test_pbwa(self)
scipy.special.tests.test_basic.TestCephes.test_pdtr(self)
scipy.special.tests.test_basic.TestCephes.test_pdtrc(self)
scipy.special.tests.test_basic.TestCephes.test_pdtri(self)
scipy.special.tests.test_basic.TestCephes.test_pdtrik(self)
scipy.special.tests.test_basic.TestCephes.test_pro_ang1(self)
scipy.special.tests.test_basic.TestCephes.test_pro_ang1_cv(self)
scipy.special.tests.test_basic.TestCephes.test_pro_rad1(self)
scipy.special.tests.test_basic.TestCephes.test_pro_rad1_cv(self)
scipy.special.tests.test_basic.TestCephes.test_pro_rad2(self)
scipy.special.tests.test_basic.TestCephes.test_pro_rad2_cv(self)
scipy.special.tests.test_basic.TestCephes.test_psi(self)
scipy.special.tests.test_basic.TestCephes.test_radian(self)
scipy.special.tests.test_basic.TestCephes.test_rgamma(self)
scipy.special.tests.test_basic.TestCephes.test_round(self)
scipy.special.tests.test_basic.TestCephes.test_shichi(self)
scipy.special.tests.test_basic.TestCephes.test_sici(self)
scipy.special.tests.test_basic.TestCephes.test_sindg(self)
scipy.special.tests.test_basic.TestCephes.test_smirnov(self)
scipy.special.tests.test_basic.TestCephes.test_smirnovc(self)
scipy.special.tests.test_basic.TestCephes.test_smirnovci(self)
scipy.special.tests.test_basic.TestCephes.test_smirnovi(self)
scipy.special.tests.test_basic.TestCephes.test_smirnovp(self)
scipy.special.tests.test_basic.TestCephes.test_spence(self)
scipy.special.tests.test_basic.TestCephes.test_stdtr(self)
scipy.special.tests.test_basic.TestCephes.test_stdtridf(self)
scipy.special.tests.test_basic.TestCephes.test_stdtrit(self)
scipy.special.tests.test_basic.TestCephes.test_struve(self)
scipy.special.tests.test_basic.TestCephes.test_tandg(self)
scipy.special.tests.test_basic.TestCephes.test_tklmbda(self)
scipy.special.tests.test_basic.TestCephes.test_wofz(self)
scipy.special.tests.test_basic.TestCephes.test_y0(self)
scipy.special.tests.test_basic.TestCephes.test_y1(self)
scipy.special.tests.test_basic.TestCephes.test_yn(self)
scipy.special.tests.test_basic.TestCephes.test_yv(self)
scipy.special.tests.test_basic.TestCombinatorics
scipy.special.tests.test_basic.TestCombinatorics.test_comb(self)
scipy.special.tests.test_basic.TestCombinatorics.test_comb_legacy(self,N,k,legacy,repetition)
scipy.special.tests.test_basic.TestCombinatorics.test_comb_with_np_int64(self)
scipy.special.tests.test_basic.TestCombinatorics.test_comb_zeros(self)
scipy.special.tests.test_basic.TestCombinatorics.test_perm(self)
scipy.special.tests.test_basic.TestCombinatorics.test_perm_zeros(self)
scipy.special.tests.test_basic.TestEllip
scipy.special.tests.test_basic.TestEllip.test_ellipe(self)
scipy.special.tests.test_basic.TestEllip.test_ellipeinc(self)
scipy.special.tests.test_basic.TestEllip.test_ellipeinc_2(self)
scipy.special.tests.test_basic.TestEllip.test_ellipj(self)
scipy.special.tests.test_basic.TestEllip.test_ellipj_nan(self)
scipy.special.tests.test_basic.TestEllip.test_ellipk(self)
scipy.special.tests.test_basic.TestEllip.test_ellipkinc(self)
scipy.special.tests.test_basic.TestEllip.test_ellipkinc_2(self)
scipy.special.tests.test_basic.TestEllip.test_ellipkinc_singular(self)
scipy.special.tests.test_basic.TestEllipCarlson(object)
scipy.special.tests.test_basic.TestEllipCarlson.test_elliprc(self)
scipy.special.tests.test_basic.TestEllipCarlson.test_elliprd(self)
scipy.special.tests.test_basic.TestEllipCarlson.test_elliprf(self)
scipy.special.tests.test_basic.TestEllipCarlson.test_elliprg(self)
scipy.special.tests.test_basic.TestEllipCarlson.test_elliprj(self)
scipy.special.tests.test_basic.TestEllipCarlson.test_elliprj_hard(self)
scipy.special.tests.test_basic.TestEllipLegendreCarlsonIdentities(object)
scipy.special.tests.test_basic.TestEllipLegendreCarlsonIdentities.setup_class(self)
scipy.special.tests.test_basic.TestEllipLegendreCarlsonIdentities.test_e(self)
scipy.special.tests.test_basic.TestEllipLegendreCarlsonIdentities.test_k(self)
scipy.special.tests.test_basic.TestEllipLegendreCarlsonIdentities.test_km1(self)
scipy.special.tests.test_basic.TestErf
scipy.special.tests.test_basic.TestErf._check_variant_func(self,func,other_func,rtol,atol=0)
scipy.special.tests.test_basic.TestErf.test_dawsn_consistent(self)
scipy.special.tests.test_basic.TestErf.test_dawsn_nan_inf(self)
scipy.special.tests.test_basic.TestErf.test_erf(self)
scipy.special.tests.test_basic.TestErf.test_erf_nan_inf(self)
scipy.special.tests.test_basic.TestErf.test_erf_zeros(self)
scipy.special.tests.test_basic.TestErf.test_erfc_consistent(self)
scipy.special.tests.test_basic.TestErf.test_erfc_nan_inf(self)
scipy.special.tests.test_basic.TestErf.test_erfcx_consistent(self)
scipy.special.tests.test_basic.TestErf.test_erfcx_nan_inf(self)
scipy.special.tests.test_basic.TestErf.test_erfi_consistent(self)
scipy.special.tests.test_basic.TestErf.test_erfi_nan_inf(self)
scipy.special.tests.test_basic.TestErf.test_wofz_nan_inf(self)
scipy.special.tests.test_basic.TestEuler
scipy.special.tests.test_basic.TestEuler.test_euler(self)
scipy.special.tests.test_basic.TestExp
scipy.special.tests.test_basic.TestExp.test_exp10(self)
scipy.special.tests.test_basic.TestExp.test_exp10more(self)
scipy.special.tests.test_basic.TestExp.test_exp2(self)
scipy.special.tests.test_basic.TestExp.test_exp2more(self)
scipy.special.tests.test_basic.TestExp.test_expm1(self)
scipy.special.tests.test_basic.TestExp.test_expm1more(self)
scipy.special.tests.test_basic.TestFactorialFunctions
scipy.special.tests.test_basic.TestFactorialFunctions.test_factorial(self)
scipy.special.tests.test_basic.TestFactorialFunctions.test_factorial2(self)
scipy.special.tests.test_basic.TestFactorialFunctions.test_factorial_0d_return_type(self,x,exact)
scipy.special.tests.test_basic.TestFactorialFunctions.test_factorialk(self)
scipy.special.tests.test_basic.TestFactorialFunctions.test_mixed_nan_inputs(self)
scipy.special.tests.test_basic.TestFactorialFunctions.test_nan_inputs(self,x,exact)
scipy.special.tests.test_basic.TestFresnel
scipy.special.tests.test_basic.TestFresnel.test_fresnel_values(self,z,s,c)
scipy.special.tests.test_basic.TestFresnel.test_fresnel_zeros(self)
scipy.special.tests.test_basic.TestFresnel.test_fresnelc_zeros(self)
scipy.special.tests.test_basic.TestFresnel.test_fresnels_zeros(self)
scipy.special.tests.test_basic.TestFresnelIntegral
scipy.special.tests.test_basic.TestFresnelIntegral.test_modfresnelm(self)
scipy.special.tests.test_basic.TestFresnelIntegral.test_modfresnelp(self)
scipy.special.tests.test_basic.TestGamma
scipy.special.tests.test_basic.TestGamma.test_975(self)
scipy.special.tests.test_basic.TestGamma.test_gamma(self)
scipy.special.tests.test_basic.TestGamma.test_gammainccinv(self)
scipy.special.tests.test_basic.TestGamma.test_gammaincinv(self)
scipy.special.tests.test_basic.TestGamma.test_gammaln(self)
scipy.special.tests.test_basic.TestGamma.test_infinity(self)
scipy.special.tests.test_basic.TestGamma.test_rgamma(self)
scipy.special.tests.test_basic.TestHankel
scipy.special.tests.test_basic.TestHankel.test_hankel1(self)
scipy.special.tests.test_basic.TestHankel.test_hankel1e(self)
scipy.special.tests.test_basic.TestHankel.test_hankel2(self)
scipy.special.tests.test_basic.TestHankel.test_hankl2e(self)
scipy.special.tests.test_basic.TestHankel.test_neg2e(self)
scipy.special.tests.test_basic.TestHankel.test_negv1(self)
scipy.special.tests.test_basic.TestHankel.test_negv1e(self)
scipy.special.tests.test_basic.TestHankel.test_negv2(self)
scipy.special.tests.test_basic.TestHyper
scipy.special.tests.test_basic.TestHyper.test_h1vp(self)
scipy.special.tests.test_basic.TestHyper.test_h2vp(self)
scipy.special.tests.test_basic.TestHyper.test_hyp0f1(self)
scipy.special.tests.test_basic.TestHyper.test_hyp0f1_gh5764(self)
scipy.special.tests.test_basic.TestHyper.test_hyp1f1(self)
scipy.special.tests.test_basic.TestHyper.test_hyp1f1_gh2282(self)
scipy.special.tests.test_basic.TestHyper.test_hyp1f1_gh2957(self)
scipy.special.tests.test_basic.TestHyper.test_hyp2f1(self)
scipy.special.tests.test_basic.TestHyper.test_hyperu(self)
scipy.special.tests.test_basic.TestHyper.test_hyperu_gh2287(self)
scipy.special.tests.test_basic.TestKelvin
scipy.special.tests.test_basic.TestKelvin.test_bei(self)
scipy.special.tests.test_basic.TestKelvin.test_bei_zeros(self)
scipy.special.tests.test_basic.TestKelvin.test_beip(self)
scipy.special.tests.test_basic.TestKelvin.test_beip_zeros(self)
scipy.special.tests.test_basic.TestKelvin.test_ber(self)
scipy.special.tests.test_basic.TestKelvin.test_ber_zeros(self)
scipy.special.tests.test_basic.TestKelvin.test_berp(self)
scipy.special.tests.test_basic.TestKelvin.test_berp_zeros(self)
scipy.special.tests.test_basic.TestKelvin.test_kei(self)
scipy.special.tests.test_basic.TestKelvin.test_kei_zeros(self)
scipy.special.tests.test_basic.TestKelvin.test_keip(self)
scipy.special.tests.test_basic.TestKelvin.test_keip_zeros(self)
scipy.special.tests.test_basic.TestKelvin.test_kelvin(self)
scipy.special.tests.test_basic.TestKelvin.test_kelvin_zeros(self)
scipy.special.tests.test_basic.TestKelvin.test_ker(self)
scipy.special.tests.test_basic.TestKelvin.test_ker_zeros(self)
scipy.special.tests.test_basic.TestKelvin.test_kerp(self)
scipy.special.tests.test_basic.TestKelvin.test_kerp_zeros(self)
scipy.special.tests.test_basic.TestLaguerre
scipy.special.tests.test_basic.TestLaguerre.test_genlaguerre(self)
scipy.special.tests.test_basic.TestLaguerre.test_laguerre(self)
scipy.special.tests.test_basic.TestLambda
scipy.special.tests.test_basic.TestLambda.test_lmbda(self)
scipy.special.tests.test_basic.TestLegendre
scipy.special.tests.test_basic.TestLegendre.test_legendre(self)
scipy.special.tests.test_basic.TestLegendreFunctions
scipy.special.tests.test_basic.TestLegendreFunctions.test_clpmn(self)
scipy.special.tests.test_basic.TestLegendreFunctions.test_clpmn_across_unit_circle(self)
scipy.special.tests.test_basic.TestLegendreFunctions.test_clpmn_close_to_real_2(self)
scipy.special.tests.test_basic.TestLegendreFunctions.test_clpmn_close_to_real_3(self)
scipy.special.tests.test_basic.TestLegendreFunctions.test_deriv_clpmn(self)
scipy.special.tests.test_basic.TestLegendreFunctions.test_inf(self)
scipy.special.tests.test_basic.TestLegendreFunctions.test_lpmn(self)
scipy.special.tests.test_basic.TestLegendreFunctions.test_lpmv(self)
scipy.special.tests.test_basic.TestLegendreFunctions.test_lpn(self)
scipy.special.tests.test_basic.TestLegendreFunctions.test_lqmn(self)
scipy.special.tests.test_basic.TestLegendreFunctions.test_lqmn_gt1(self)
scipy.special.tests.test_basic.TestLegendreFunctions.test_lqmn_shape(self)
scipy.special.tests.test_basic.TestLegendreFunctions.test_lqn(self)
scipy.special.tests.test_basic.TestLog1p
scipy.special.tests.test_basic.TestLog1p.test_log1p(self)
scipy.special.tests.test_basic.TestLog1p.test_log1pmore(self)
scipy.special.tests.test_basic.TestMathieu
scipy.special.tests.test_basic.TestMathieu.test_mathieu_a(self)
scipy.special.tests.test_basic.TestMathieu.test_mathieu_even_coef(self)
scipy.special.tests.test_basic.TestMathieu.test_mathieu_odd_coef(self)
scipy.special.tests.test_basic.TestOblCvSeq
scipy.special.tests.test_basic.TestOblCvSeq.test_obl_cv_seq(self)
scipy.special.tests.test_basic.TestParabolicCylinder
scipy.special.tests.test_basic.TestParabolicCylinder.test_pbdn_seq(self)
scipy.special.tests.test_basic.TestParabolicCylinder.test_pbdv(self)
scipy.special.tests.test_basic.TestParabolicCylinder.test_pbdv_gradient(self)
scipy.special.tests.test_basic.TestParabolicCylinder.test_pbdv_points(self)
scipy.special.tests.test_basic.TestParabolicCylinder.test_pbdv_seq(self)
scipy.special.tests.test_basic.TestParabolicCylinder.test_pbvv_gradient(self)
scipy.special.tests.test_basic.TestPolygamma
scipy.special.tests.test_basic.TestPolygamma.test_polygamma(self)
scipy.special.tests.test_basic.TestProCvSeq
scipy.special.tests.test_basic.TestProCvSeq.test_pro_cv_seq(self)
scipy.special.tests.test_basic.TestPsi
scipy.special.tests.test_basic.TestPsi.test_psi(self)
scipy.special.tests.test_basic.TestRadian
scipy.special.tests.test_basic.TestRadian.test_radian(self)
scipy.special.tests.test_basic.TestRadian.test_radianmore(self)
scipy.special.tests.test_basic.TestRiccati
scipy.special.tests.test_basic.TestRiccati.test_riccati_jn(self)
scipy.special.tests.test_basic.TestRiccati.test_riccati_yn(self)
scipy.special.tests.test_basic.TestRound
scipy.special.tests.test_basic.TestRound.test_round(self)
scipy.special.tests.test_basic.TestStruve
scipy.special.tests.test_basic.TestStruve._series(self,v,z,n=100)
scipy.special.tests.test_basic.TestStruve.test_regression_679(self)
scipy.special.tests.test_basic.TestStruve.test_some_values(self)
scipy.special.tests.test_basic.TestStruve.test_vs_series(self)
scipy.special.tests.test_basic.TestTandg
scipy.special.tests.test_basic.TestTandg.test_specialpoints(self)
scipy.special.tests.test_basic.TestTandg.test_tandg(self)
scipy.special.tests.test_basic.TestTandg.test_tandgmore(self)
scipy.special.tests.test_basic.TestTrigonometric
scipy.special.tests.test_basic.TestTrigonometric.test_cbrt(self)
scipy.special.tests.test_basic.TestTrigonometric.test_cbrtmore(self)
scipy.special.tests.test_basic.TestTrigonometric.test_cosdg(self)
scipy.special.tests.test_basic.TestTrigonometric.test_cosdgmore(self)
scipy.special.tests.test_basic.TestTrigonometric.test_cosm1(self)
scipy.special.tests.test_basic.TestTrigonometric.test_cotdg(self)
scipy.special.tests.test_basic.TestTrigonometric.test_cotdgmore(self)
scipy.special.tests.test_basic.TestTrigonometric.test_sinc(self)
scipy.special.tests.test_basic.TestTrigonometric.test_sindg(self)
scipy.special.tests.test_basic.TestTrigonometric.test_sindgmore(self)
scipy.special.tests.test_basic.TestTrigonometric.test_specialpoints(self)
scipy.special.tests.test_basic.test_agm_simple()
scipy.special.tests.test_basic.test_ch2_inf()
scipy.special.tests.test_basic.test_chi2_inv_smalldf()
scipy.special.tests.test_basic.test_chi2_smalldf()
scipy.special.tests.test_basic.test_chi2c_smalldf()
scipy.special.tests.test_basic.test_entr()
scipy.special.tests.test_basic.test_error_raising()
scipy.special.tests.test_basic.test_huber()
scipy.special.tests.test_basic.test_kl_div()
scipy.special.tests.test_basic.test_legacy()
scipy.special.tests.test_basic.test_pseudo_huber()
scipy.special.tests.test_basic.test_pseudo_huber_small_r()
scipy.special.tests.test_basic.test_rel_entr()
scipy.special.tests.test_basic.test_runtime_warning()
scipy.special.tests.test_basic.test_sph_harm()
scipy.special.tests.test_basic.test_sph_harm_ufunc_loop_selection()
scipy.special.tests.test_basic.test_xlog1py()
scipy.special.tests.test_basic.test_xlogy()
scipy.special.tests.testtest_agm_simple()
scipy.special.tests.testtest_ch2_inf()
scipy.special.tests.testtest_chi2_inv_smalldf()
scipy.special.tests.testtest_chi2_smalldf()
scipy.special.tests.testtest_chi2c_smalldf()
scipy.special.tests.testtest_entr()
scipy.special.tests.testtest_error_raising()
scipy.special.tests.testtest_huber()
scipy.special.tests.testtest_kl_div()
scipy.special.tests.testtest_legacy()
scipy.special.tests.testtest_pseudo_huber()
scipy.special.tests.testtest_pseudo_huber_small_r()
scipy.special.tests.testtest_rel_entr()
scipy.special.tests.testtest_runtime_warning()
scipy.special.tests.testtest_sph_harm()
scipy.special.tests.testtest_sph_harm_ufunc_loop_selection()
scipy.special.tests.testtest_xlog1py()
scipy.special.tests.testtest_xlogy()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_faddeeva.py----------------------------------------
A:scipy.special.tests.test_faddeeva.points->numpy.array([[-7.89, 45.06, 6.66, 0.007792107366038881], [-0.05, 7.98, 24.13, 0.012068223646769913], [-13.98, 16.83, 42.37, 0.006244223636213236], [-12.66, 0.21, 6.32, 0.010052516161087379], [11.34, 4.25, 21.96, 0.011369892362727892], [-11.56, 20.4, 30.53, 0.007633276043209746], [-9.17, 25.61, 8.32, 0.011646345779083005], [16.59, 18.05, 2.5, 0.01363776883752681], [9.11, 2.12, 39.33, 0.007664404080727768], [-43.33, 0.3, 45.68, 0.003668046387533015]])
A:scipy.special.tests.test_faddeeva.x->numpy.linspace(1, 10, 20)
scipy.special.tests.test_faddeeva.TestVoigtProfile
scipy.special.tests.test_faddeeva.TestVoigtProfile.test_against_mathematica(self)
scipy.special.tests.test_faddeeva.TestVoigtProfile.test_continuity(self,sigma1,gamma1,sigma2,gamma2)
scipy.special.tests.test_faddeeva.TestVoigtProfile.test_corner_cases(self,x,sigma,gamma,desired)
scipy.special.tests.test_faddeeva.TestVoigtProfile.test_inf(self,x,desired)
scipy.special.tests.test_faddeeva.TestVoigtProfile.test_nan(self,x,sigma,gamma)
scipy.special.tests.test_faddeeva.TestVoigtProfile.test_symmetry(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_cdft_asymptotic.py----------------------------------------
A:scipy.special.tests.test_cdft_asymptotic.res->stdtrit(df, p)
A:scipy.special.tests.test_cdft_asymptotic.res1->stdtr(df, x)
A:scipy.special.tests.test_cdft_asymptotic.res2->stdtrit(df, x)
scipy.special.tests.test_cdft_asymptotic.test_stdtr_stdtri_invalid()
scipy.special.tests.test_cdft_asymptotic.test_stdtr_vs_R_large_df()
scipy.special.tests.test_cdft_asymptotic.test_stdtrit_vs_R_large_df()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_hypergeometric.py----------------------------------------
A:scipy.special.tests.test_hypergeometric.(a, b, x)->numpy.meshgrid([-1, -0.5, 0, 0.5, 1], [-1, -0.5, 0, 0.5, 1], np.linspace(-100, -1, 10))
A:scipy.special.tests.test_hypergeometric.computed->scipy.special.hyp1f1(a, b, x)
scipy.special.tests.test_hypergeometric.TestHyp1f1
scipy.special.tests.test_hypergeometric.TestHyp1f1.test_a_neg_int_and_b_equal_x(self)
scipy.special.tests.test_hypergeometric.TestHyp1f1.test_a_negative_integer(self,a,b,x,result)
scipy.special.tests.test_hypergeometric.TestHyp1f1.test_assorted_cases(self,a,b,x,expected)
scipy.special.tests.test_hypergeometric.TestHyp1f1.test_geometric_convergence(self,a,b,x,result)
scipy.special.tests.test_hypergeometric.TestHyp1f1.test_gh_11099(self,a,b,x,desired)
scipy.special.tests.test_hypergeometric.TestHyp1f1.test_legacy_case1(self,b)
scipy.special.tests.test_hypergeometric.TestHyp1f1.test_legacy_case2(self)
scipy.special.tests.test_hypergeometric.TestHyp1f1.test_nan_inputs(self,a,b,x)
scipy.special.tests.test_hypergeometric.TestHyp1f1.test_poles(self)
scipy.special.tests.test_hypergeometric.TestHyp1f1.test_special_cases(self,a,b,x,result)
scipy.special.tests.test_hypergeometric.TestHyp1f1.test_x_zero_a_and_b_neg_ints_and_a_ge_b(self,a)
scipy.special.tests.test_hypergeometric.TestHyperu
scipy.special.tests.test_hypergeometric.TestHyperu.test_nan_inputs(self,a,b,x)
scipy.special.tests.test_hypergeometric.TestHyperu.test_negative_x(self)
scipy.special.tests.test_hypergeometric.TestHyperu.test_special_cases(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_data.py----------------------------------------
A:scipy.special.tests.test_data.DATASETS_BOOST->numpy.load(os.path.join(os.path.dirname(__file__), 'data', 'boost.npz'))
A:scipy.special.tests.test_data.DATASETS_GSL->numpy.load(os.path.join(os.path.dirname(__file__), 'data', 'gsl.npz'))
A:scipy.special.tests.test_data.DATASETS_LOCAL->numpy.load(os.path.join(os.path.dirname(__file__), 'data', 'local.npz'))
A:scipy.special.tests.test_data.y->sph_harm(m, n, theta, phi)
A:scipy.special.tests.test_data.z->log1p(x + 1j * y)
scipy.special.tests.test_data._test_factory(test,dtype=np.double)
scipy.special.tests.test_data.assoc_legendre_p_boost_(nu,mu,x)
scipy.special.tests.test_data.bdtrik_comp(y,n,p)
scipy.special.tests.test_data.btdtri_comp(a,b,p)
scipy.special.tests.test_data.btdtria_comp(p,b,x)
scipy.special.tests.test_data.btdtrib_comp(a,p,x)
scipy.special.tests.test_data.cexpm1(x,y)
scipy.special.tests.test_data.clog1p(x,y)
scipy.special.tests.test_data.data(func,dataname,*a,**kw)
scipy.special.tests.test_data.data_gsl(func,dataname,*a,**kw)
scipy.special.tests.test_data.data_local(func,dataname,*a,**kw)
scipy.special.tests.test_data.ellipe_(k)
scipy.special.tests.test_data.ellipeinc_(f,k)
scipy.special.tests.test_data.ellipj_(k)
scipy.special.tests.test_data.ellipk_(k)
scipy.special.tests.test_data.ellipkinc_(f,k)
scipy.special.tests.test_data.eval_genlaguerre_ddd(n,a,x)
scipy.special.tests.test_data.eval_genlaguerre_ldd(n,a,x)
scipy.special.tests.test_data.eval_hermite_ld(n,x)
scipy.special.tests.test_data.eval_laguerre_dd(n,x)
scipy.special.tests.test_data.eval_laguerre_ld(n,x)
scipy.special.tests.test_data.eval_legendre_dd(n,x)
scipy.special.tests.test_data.eval_legendre_ld(n,x)
scipy.special.tests.test_data.gdtr_(p,x)
scipy.special.tests.test_data.gdtrc_(p,x)
scipy.special.tests.test_data.gdtrib_(p,x)
scipy.special.tests.test_data.gdtrib_comp(p,x)
scipy.special.tests.test_data.gdtrix_(b,p)
scipy.special.tests.test_data.gdtrix_comp(b,p)
scipy.special.tests.test_data.legendre_p_via_assoc_(nu,x)
scipy.special.tests.test_data.legendre_p_via_lpmn(n,x)
scipy.special.tests.test_data.legendre_q_via_lqmn(n,x)
scipy.special.tests.test_data.lpn_(n,x)
scipy.special.tests.test_data.lqn_(n,x)
scipy.special.tests.test_data.mathieu_ce_rad(m,q,x)
scipy.special.tests.test_data.mathieu_mc1_scaled(m,q,x)
scipy.special.tests.test_data.mathieu_mc2_scaled(m,q,x)
scipy.special.tests.test_data.mathieu_ms1_scaled(m,q,x)
scipy.special.tests.test_data.mathieu_ms2_scaled(m,q,x)
scipy.special.tests.test_data.mathieu_se_rad(m,q,x)
scipy.special.tests.test_data.nbdtrik_comp(y,n,p)
scipy.special.tests.test_data.pdtrik_comp(p,m)
scipy.special.tests.test_data.poch_(z,m)
scipy.special.tests.test_data.poch_minus(z,m)
scipy.special.tests.test_data.sph_harm_(m,n,theta,phi)
scipy.special.tests.test_data.spherical_jn_(n,x)
scipy.special.tests.test_data.spherical_yn_(n,x)
scipy.special.tests.test_data.test_boost(test)
scipy.special.tests.test_data.test_gsl(test)
scipy.special.tests.test_data.test_local(test)
scipy.special.tests.test_data.zeta_(x)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_boxcox.py----------------------------------------
A:scipy.special.tests.test_boxcox.x->numpy.array([0.0, 1.0, 2.0])
A:scipy.special.tests.test_boxcox.y->inv_boxcox1p(x, lam)
A:scipy.special.tests.test_boxcox.lam->numpy.array([0.0, 1.0, 2.0])
A:scipy.special.tests.test_boxcox.lmbda->numpy.array([1e-306, 1e-18])
A:scipy.special.tests.test_boxcox.x2->inv_boxcox1p(y, lam)
scipy.special.tests.test_boxcox.test_boxcox1p_basic()
scipy.special.tests.test_boxcox.test_boxcox1p_nonfinite()
scipy.special.tests.test_boxcox.test_boxcox1p_underflow()
scipy.special.tests.test_boxcox.test_boxcox_basic()
scipy.special.tests.test_boxcox.test_boxcox_nonfinite()
scipy.special.tests.test_boxcox.test_boxcox_underflow()
scipy.special.tests.test_boxcox.test_inv_boxcox()
scipy.special.tests.test_boxcox.test_inv_boxcox1p_underflow()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_spence.py----------------------------------------
A:scipy.special.tests.test_spence.x->numpy.logspace(-30, 300, 200)
A:scipy.special.tests.test_spence.dataset->numpy.asarray(dataset)
scipy.special.tests.test_spence.test_consistency()
scipy.special.tests.test_spence.test_special_points()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_hyp2f1.py----------------------------------------
A:scipy.special.tests.test_hyp2f1.mpmath->MissingModule('mpmath')
A:scipy.special.tests.test_hyp2f1.params->self._get_test_parameters(getattr(self, test_method))
scipy.special.tests.test_hyp2f1.Hyp2f1TestCase(NamedTuple)
scipy.special.tests.test_hyp2f1.TestHyp2f1
scipy.special.tests.test_hyp2f1.TestHyp2f1._get_test_parameters(self,test_method)
scipy.special.tests.test_hyp2f1.TestHyp2f1.test_a_b_neg_int_after_euler_hypergeometric_transformation(self,hyp2f1_test_case)
scipy.special.tests.test_hyp2f1.TestHyp2f1.test_a_b_negative_int(self,hyp2f1_test_case)
scipy.special.tests.test_hyp2f1.TestHyp2f1.test_c_non_positive_int(self,hyp2f1_test_case)
scipy.special.tests.test_hyp2f1.TestHyp2f1.test_region1(self,hyp2f1_test_case)
scipy.special.tests.test_hyp2f1.TestHyp2f1.test_region2(self,hyp2f1_test_case)
scipy.special.tests.test_hyp2f1.TestHyp2f1.test_region4(self,hyp2f1_test_case)
scipy.special.tests.test_hyp2f1.TestHyp2f1.test_region5(self,hyp2f1_test_case)
scipy.special.tests.test_hyp2f1.TestHyp2f1.test_region6(self,hyp2f1_test_case)
scipy.special.tests.test_hyp2f1.TestHyp2f1.test_special_case_z_near_minus_1(self,hyp2f1_test_case)
scipy.special.tests.test_hyp2f1.TestHyp2f1.test_test_hyp2f1(self)
scipy.special.tests.test_hyp2f1.TestHyp2f1.test_unital_argument(self,hyp2f1_test_case)
scipy.special.tests.test_hyp2f1.mp_hyp2f1(a,b,c,z)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_zeta.py----------------------------------------
scipy.special.tests.test_zeta.test_riemann_zeta_avoid_overflow()
scipy.special.tests.test_zeta.test_riemann_zeta_special_cases()
scipy.special.tests.test_zeta.test_zeta()
scipy.special.tests.test_zeta.test_zetac()
scipy.special.tests.test_zeta.test_zetac_special_cases()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_mpmath.py----------------------------------------
A:scipy.special.tests.test_mpmath.mpmath->MissingModule('mpmath')
A:scipy.special.tests.test_mpmath.dataset->numpy.asarray([(z0, complex(mpmath.lambertw(z0))) for z0 in z])
A:scipy.special.tests.test_mpmath.res->complex(np.nan, np.nan)
A:scipy.special.tests.test_mpmath.vv->numpy.linspace(150, 180, 21)
A:scipy.special.tests.test_mpmath.af->scipy.special.hyp0f1(vv, 0.5)
A:scipy.special.tests.test_mpmath.mf->numpy.array([mpmath.hyp0f1(v, 0.5) for v in vv])
A:scipy.special.tests.test_mpmath.kw->dict(eliminate=True)
A:scipy.special.tests.test_mpmath.v->exception_to_nan(mpmath.legenp)(n, m, z, type=typ)
A:scipy.special.tests.test_mpmath.dataset[:, 0]->numpy.random.pareto(1.5, npoints)
A:scipy.special.tests.test_mpmath.dataset[:, 1]->numpy.random.pareto(1.5, npoints)
A:scipy.special.tests.test_mpmath.dataset[:, 2]->numpy.random.pareto(1.5, npoints)
A:scipy.special.tests.test_mpmath.ds[2]->abs(ds[:2]).max()
A:scipy.special.tests.test_mpmath.ds[4]->float(mpmath.hyp2f1(*tuple(ds[:4])))
A:scipy.special.tests.test_mpmath.(x1, y1)->numpy.meshgrid(np.linspace(-10, 1, 31), np.linspace(-10, 1, 11))
A:scipy.special.tests.test_mpmath.(x2, y2)->numpy.meshgrid(np.logspace(-80, 0.8, 31), np.logspace(-80, 0.8, 11))
A:scipy.special.tests.test_mpmath.theta->numpy.linspace(0, 2 * pi)
A:scipy.special.tests.test_mpmath.(r, theta)->numpy.meshgrid(r, theta)
A:scipy.special.tests.test_mpmath.z->(x[:, None] + 1j * y[None, :]).ravel()
A:scipy.special.tests.test_mpmath.r->scipy.special.eval_gegenbauer(int(n), a, x)
A:scipy.special.tests.test_mpmath.dy->dx.copy()
A:scipy.special.tests.test_mpmath.(dx, dy)->numpy.meshgrid(dx, dy)
A:scipy.special.tests.test_mpmath.zeros->(np.arange(-100, 100, 1) + 0.5).reshape(1, 1, -1)
A:scipy.special.tests.test_mpmath.root->MissingModule('mpmath').findroot(mpmath.digamma, -0.5)
A:scipy.special.tests.test_mpmath.roots->numpy.array(roots)
A:scipy.special.tests.test_mpmath.digamma->exception_to_nan(mpmath.digamma)
A:scipy.special.tests.test_mpmath.(x, y)->numpy.meshgrid(x, y)
A:scipy.special.tests.test_mpmath.y->numpy.array([-1000.0, -0.5, 0.5, 1.3])
A:scipy.special.tests.test_mpmath.a->MissingModule('mpmath').mpf(a)
A:scipy.special.tests.test_mpmath.x->MissingModule('mpmath').mp.mpf(x)
A:scipy.special.tests.test_mpmath.(a, x)->numpy.meshgrid(a, x)
A:scipy.special.tests.test_mpmath.m->numpy.linspace(0, 1, 20)
A:scipy.special.tests.test_mpmath.u0->float(mpmath.ellipk(m0))
A:scipy.special.tests.test_mpmath.unwind->MissingModule('mpmath').ceil((z.imag - mpmath.pi) / (2 * mpmath.pi))
A:scipy.special.tests.test_mpmath.HYPERKW->dict(maxprec=200, maxterms=200)
A:scipy.special.tests.test_mpmath.KW->dict(maxprec=400, maxterms=1500)
A:scipy.special.tests.test_mpmath.e->numpy.exp(1)
A:scipy.special.tests.test_mpmath.lmbda->MissingModule('mpmath').mp.mpf(lmbda)
A:scipy.special.tests.test_mpmath.one->MissingModule('mpmath').mp.mpf(1)
A:scipy.special.tests.test_mpmath.arg->MissingModule('mpmath').mpmathify(z)
scipy.special.tests.test_mpmath.TestSystematic
scipy.special.tests.test_mpmath.TestSystematic.test_airyai(self)
scipy.special.tests.test_mpmath.TestSystematic.test_airyai_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_airyai_prime(self)
scipy.special.tests.test_mpmath.TestSystematic.test_airyai_prime_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_airybi(self)
scipy.special.tests.test_mpmath.TestSystematic.test_airybi_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_airybi_prime(self)
scipy.special.tests.test_mpmath.TestSystematic.test_airybi_prime_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_bei(self)
scipy.special.tests.test_mpmath.TestSystematic.test_ber(self)
scipy.special.tests.test_mpmath.TestSystematic.test_bernoulli(self)
scipy.special.tests.test_mpmath.TestSystematic.test_besseli(self)
scipy.special.tests.test_mpmath.TestSystematic.test_besseli_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_besselj(self)
scipy.special.tests.test_mpmath.TestSystematic.test_besselj_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_besselk(self)
scipy.special.tests.test_mpmath.TestSystematic.test_besselk_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_besselk_int(self)
scipy.special.tests.test_mpmath.TestSystematic.test_bessely(self)
scipy.special.tests.test_mpmath.TestSystematic.test_bessely_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_bessely_int(self)
scipy.special.tests.test_mpmath.TestSystematic.test_beta(self)
scipy.special.tests.test_mpmath.TestSystematic.test_betainc(self)
scipy.special.tests.test_mpmath.TestSystematic.test_binom(self)
scipy.special.tests.test_mpmath.TestSystematic.test_boxcox(self)
scipy.special.tests.test_mpmath.TestSystematic.test_boxcox1p(self)
scipy.special.tests.test_mpmath.TestSystematic.test_chebyt(self)
scipy.special.tests.test_mpmath.TestSystematic.test_chebyt_int(self)
scipy.special.tests.test_mpmath.TestSystematic.test_chebyu(self)
scipy.special.tests.test_mpmath.TestSystematic.test_chebyu_int(self)
scipy.special.tests.test_mpmath.TestSystematic.test_chi(self)
scipy.special.tests.test_mpmath.TestSystematic.test_chi_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_ci(self)
scipy.special.tests.test_mpmath.TestSystematic.test_ci_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_cospi(self)
scipy.special.tests.test_mpmath.TestSystematic.test_cospi_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_digamma(self)
scipy.special.tests.test_mpmath.TestSystematic.test_digamma_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_e1(self)
scipy.special.tests.test_mpmath.TestSystematic.test_e1_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_ei(self)
scipy.special.tests.test_mpmath.TestSystematic.test_ei_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_ellipe(self)
scipy.special.tests.test_mpmath.TestSystematic.test_ellipeinc(self)
scipy.special.tests.test_mpmath.TestSystematic.test_ellipeinc_largephi(self)
scipy.special.tests.test_mpmath.TestSystematic.test_ellipf(self)
scipy.special.tests.test_mpmath.TestSystematic.test_ellipf_largephi(self)
scipy.special.tests.test_mpmath.TestSystematic.test_ellipfun_cn(self)
scipy.special.tests.test_mpmath.TestSystematic.test_ellipfun_dn(self)
scipy.special.tests.test_mpmath.TestSystematic.test_ellipfun_sn(self)
scipy.special.tests.test_mpmath.TestSystematic.test_ellipk(self)
scipy.special.tests.test_mpmath.TestSystematic.test_ellipkinc(self)
scipy.special.tests.test_mpmath.TestSystematic.test_ellipkinc_largephi(self)
scipy.special.tests.test_mpmath.TestSystematic.test_erf(self)
scipy.special.tests.test_mpmath.TestSystematic.test_erf_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_erfc(self)
scipy.special.tests.test_mpmath.TestSystematic.test_erfc_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_erfi(self)
scipy.special.tests.test_mpmath.TestSystematic.test_erfi_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_eulernum(self)
scipy.special.tests.test_mpmath.TestSystematic.test_expint(self)
scipy.special.tests.test_mpmath.TestSystematic.test_expm1_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_exprel(self)
scipy.special.tests.test_mpmath.TestSystematic.test_fresnelc(self)
scipy.special.tests.test_mpmath.TestSystematic.test_fresnels(self)
scipy.special.tests.test_mpmath.TestSystematic.test_gamma(self)
scipy.special.tests.test_mpmath.TestSystematic.test_gamma_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_gammainc(self)
scipy.special.tests.test_mpmath.TestSystematic.test_gammaincc(self)
scipy.special.tests.test_mpmath.TestSystematic.test_gammaln(self)
scipy.special.tests.test_mpmath.TestSystematic.test_gegenbauer(self)
scipy.special.tests.test_mpmath.TestSystematic.test_gegenbauer_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_gegenbauer_complex_general(self)
scipy.special.tests.test_mpmath.TestSystematic.test_gegenbauer_int(self)
scipy.special.tests.test_mpmath.TestSystematic.test_hankel1(self)
scipy.special.tests.test_mpmath.TestSystematic.test_hankel2(self)
scipy.special.tests.test_mpmath.TestSystematic.test_hermite(self)
scipy.special.tests.test_mpmath.TestSystematic.test_hurwitz_zeta(self)
scipy.special.tests.test_mpmath.TestSystematic.test_hyp0f1(self)
scipy.special.tests.test_mpmath.TestSystematic.test_hyp0f1_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_hyp1f1(self)
scipy.special.tests.test_mpmath.TestSystematic.test_hyp1f1_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_hyp2f1_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_hyperu(self)
scipy.special.tests.test_mpmath.TestSystematic.test_igam_fac(self)
scipy.special.tests.test_mpmath.TestSystematic.test_j0(self)
scipy.special.tests.test_mpmath.TestSystematic.test_j1(self)
scipy.special.tests.test_mpmath.TestSystematic.test_jacobi(self)
scipy.special.tests.test_mpmath.TestSystematic.test_jacobi_int(self)
scipy.special.tests.test_mpmath.TestSystematic.test_kei(self)
scipy.special.tests.test_mpmath.TestSystematic.test_ker(self)
scipy.special.tests.test_mpmath.TestSystematic.test_laguerre(self)
scipy.special.tests.test_mpmath.TestSystematic.test_laguerre_int(self)
scipy.special.tests.test_mpmath.TestSystematic.test_lambertw_real(self)
scipy.special.tests.test_mpmath.TestSystematic.test_lanczos_sum_expg_scaled(self)
scipy.special.tests.test_mpmath.TestSystematic.test_legendre(self)
scipy.special.tests.test_mpmath.TestSystematic.test_legendre_int(self)
scipy.special.tests.test_mpmath.TestSystematic.test_legenp(self)
scipy.special.tests.test_mpmath.TestSystematic.test_legenp_complex_2(self)
scipy.special.tests.test_mpmath.TestSystematic.test_legenp_complex_3(self)
scipy.special.tests.test_mpmath.TestSystematic.test_legenq(self)
scipy.special.tests.test_mpmath.TestSystematic.test_legenq_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_lgam1p(self)
scipy.special.tests.test_mpmath.TestSystematic.test_log1p_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_log1pmx(self)
scipy.special.tests.test_mpmath.TestSystematic.test_log_ndtr(self)
scipy.special.tests.test_mpmath.TestSystematic.test_log_ndtr_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_loggamma(self)
scipy.special.tests.test_mpmath.TestSystematic.test_ndtr(self)
scipy.special.tests.test_mpmath.TestSystematic.test_ndtr_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_pcfd(self)
scipy.special.tests.test_mpmath.TestSystematic.test_pcfv(self)
scipy.special.tests.test_mpmath.TestSystematic.test_pcfw(self)
scipy.special.tests.test_mpmath.TestSystematic.test_polygamma(self)
scipy.special.tests.test_mpmath.TestSystematic.test_rf(self)
scipy.special.tests.test_mpmath.TestSystematic.test_rgamma(self)
scipy.special.tests.test_mpmath.TestSystematic.test_rgamma_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_riemann_zeta(self)
scipy.special.tests.test_mpmath.TestSystematic.test_shi(self)
scipy.special.tests.test_mpmath.TestSystematic.test_shi_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_si(self)
scipy.special.tests.test_mpmath.TestSystematic.test_si_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_sinpi(self)
scipy.special.tests.test_mpmath.TestSystematic.test_sinpi_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_spence(self)
scipy.special.tests.test_mpmath.TestSystematic.test_spence_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_spherharm(self)
scipy.special.tests.test_mpmath.TestSystematic.test_spherical_in(self)
scipy.special.tests.test_mpmath.TestSystematic.test_spherical_in_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_spherical_jn(self)
scipy.special.tests.test_mpmath.TestSystematic.test_spherical_jn_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_spherical_kn(self)
scipy.special.tests.test_mpmath.TestSystematic.test_spherical_kn_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_spherical_yn(self)
scipy.special.tests.test_mpmath.TestSystematic.test_spherical_yn_complex(self)
scipy.special.tests.test_mpmath.TestSystematic.test_struveh(self)
scipy.special.tests.test_mpmath.TestSystematic.test_struvel(self)
scipy.special.tests.test_mpmath.TestSystematic.test_wrightomega(self)
scipy.special.tests.test_mpmath.TestSystematic.test_wrightomega_real(self)
scipy.special.tests.test_mpmath.TestSystematic.test_zetac(self)
scipy.special.tests.test_mpmath._mpmath_wrightomega(z,dps)
scipy.special.tests.test_mpmath.test_beta()
scipy.special.tests.test_mpmath.test_cospi_zeros()
scipy.special.tests.test_mpmath.test_digamma_boundary()
scipy.special.tests.test_mpmath.test_digamma_negreal()
scipy.special.tests.test_mpmath.test_digamma_roots()
scipy.special.tests.test_mpmath.test_dn_quarter_period()
scipy.special.tests.test_mpmath.test_erf_complex()
scipy.special.tests.test_mpmath.test_expi_complex()
scipy.special.tests.test_mpmath.test_expn_large_n()
scipy.special.tests.test_mpmath.test_gammainc_boundary()
scipy.special.tests.test_mpmath.test_hyp0f1_gh5764()
scipy.special.tests.test_mpmath.test_hyp0f1_gh_1609()
scipy.special.tests.test_mpmath.test_hyp2f1_real_random()
scipy.special.tests.test_mpmath.test_hyp2f1_real_some()
scipy.special.tests.test_mpmath.test_hyp2f1_real_some_points()
scipy.special.tests.test_mpmath.test_hyp2f1_some_points_2()
scipy.special.tests.test_mpmath.test_hyp2f1_strange_points()
scipy.special.tests.test_mpmath.test_hyperu_around_0()
scipy.special.tests.test_mpmath.test_lambertw_smallz()
scipy.special.tests.test_mpmath.test_loggamma_taylor()
scipy.special.tests.test_mpmath.test_loggamma_taylor_transition()
scipy.special.tests.test_mpmath.test_lpmv()
scipy.special.tests.test_mpmath.test_rgamma_zeros()
scipy.special.tests.test_mpmath.test_sinpi_zeros()
scipy.special.tests.test_mpmath.test_spence_circle()
scipy.special.tests.test_mpmath.test_wrightomega_branch()
scipy.special.tests.test_mpmath.test_wrightomega_region1()
scipy.special.tests.test_mpmath.test_wrightomega_region2()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_digamma.py----------------------------------------
A:scipy.special.tests.test_digamma.dataset->numpy.asarray(dataset)
scipy.special.tests.test_digamma.test_consistency()
scipy.special.tests.test_digamma.test_nonfinite()
scipy.special.tests.test_digamma.test_special_values()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_logit.py----------------------------------------
A:scipy.special.tests.test_logit.a->numpy.array(a, dtype=dtype)
A:scipy.special.tests.test_logit.actual->expit(a)
A:scipy.special.tests.test_logit.expected->numpy.array([-32.0, -20.0, -10.000046, -3.0485873, -1.3132616, -0.7443967, -0.6931472, -0.6931472, -0.6931472, -0.64439666, -0.3132617, -4.5398898e-05, -3.8e-44], dtype=np.float32)
A:scipy.special.tests.test_logit.n->numpy.array(n, dtype=dtype)
A:scipy.special.tests.test_logit.x->numpy.array([-32, -20, -10, -3, -1, -0.1, -1e-09, 0, 1e-09, 0.1, 1, 10, 100], dtype=np.float32)
A:scipy.special.tests.test_logit.y->log_expit(x)
scipy.special.tests.test_logit.TestExpit
scipy.special.tests.test_logit.TestExpit.check_expit_out(self,dtype,expected)
scipy.special.tests.test_logit.TestExpit.test_float32(self)
scipy.special.tests.test_logit.TestExpit.test_float64(self)
scipy.special.tests.test_logit.TestExpit.test_large(self)
scipy.special.tests.test_logit.TestLogExpit
scipy.special.tests.test_logit.TestLogExpit.test_basic_float32(self)
scipy.special.tests.test_logit.TestLogExpit.test_basic_float64(self)
scipy.special.tests.test_logit.TestLogExpit.test_large_negative(self)
scipy.special.tests.test_logit.TestLogExpit.test_large_positive(self)
scipy.special.tests.test_logit.TestLogit
scipy.special.tests.test_logit.TestLogit.check_logit_out(self,dtype,expected)
scipy.special.tests.test_logit.TestLogit.test_float32(self)
scipy.special.tests.test_logit.TestLogit.test_float64(self)
scipy.special.tests.test_logit.TestLogit.test_nan(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_bdtr.py----------------------------------------
A:scipy.special.tests.test_bdtr.val->scipy.special.bdtri(k, n, p)
A:scipy.special.tests.test_bdtr.double_val->scipy.special.bdtri([0.1, 1.1], 2, 0.5)
A:scipy.special.tests.test_bdtr.int_val->scipy.special.bdtri([0, 1], 2, 0.5)
A:scipy.special.tests.test_bdtr.val2->scipy.special.bdtrc(2.1, 1, 0.5)
A:scipy.special.tests.test_bdtr.bdtr_vals->scipy.special.bdtr([0, 1, 2], 2, 0.5)
A:scipy.special.tests.test_bdtr.bdtrc_vals->scipy.special.bdtrc([0, 1, 2], 2, 0.5)
A:scipy.special.tests.test_bdtr.actual->numpy.asarray([1 - 1 / np.sqrt(2), 1 / np.sqrt(2)])
A:scipy.special.tests.test_bdtr.roundtrip_vals->scipy.special.bdtri([0, 1, 2], 2, bdtr_vals)
scipy.special.tests.test_bdtr.TestBdtr
scipy.special.tests.test_bdtr.TestBdtr.test(self)
scipy.special.tests.test_bdtr.TestBdtr.test_domain(self)
scipy.special.tests.test_bdtr.TestBdtr.test_inf(self,k,n,p)
scipy.special.tests.test_bdtr.TestBdtr.test_rounding(self)
scipy.special.tests.test_bdtr.TestBdtr.test_sum_is_one(self)
scipy.special.tests.test_bdtr.TestBdtrc
scipy.special.tests.test_bdtr.TestBdtrc.test_bdtr_bdtrc_sum_to_one(self)
scipy.special.tests.test_bdtr.TestBdtrc.test_domain(self)
scipy.special.tests.test_bdtr.TestBdtrc.test_inf(self,k,n,p)
scipy.special.tests.test_bdtr.TestBdtrc.test_rounding(self)
scipy.special.tests.test_bdtr.TestBdtrc.test_sum_is_one(self)
scipy.special.tests.test_bdtr.TestBdtrc.test_value(self)
scipy.special.tests.test_bdtr.TestBdtri
scipy.special.tests.test_bdtr.TestBdtri.test_bdtr_bdtri_roundtrip(self)
scipy.special.tests.test_bdtr.TestBdtri.test_domain(self,k,n,p)
scipy.special.tests.test_bdtr.TestBdtri.test_inf(self,k,n,p)
scipy.special.tests.test_bdtr.TestBdtri.test_rounding(self)
scipy.special.tests.test_bdtr.TestBdtri.test_sum_is_one(self)
scipy.special.tests.test_bdtr.TestBdtri.test_value(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_ellip_harm.py----------------------------------------
A:scipy.special.tests.test_ellip_harm.x->sqrt(lambda1 ** 2 * mu ** 2 * nu ** 2 / (h2 * k2))
A:scipy.special.tests.test_ellip_harm.y->sqrt((lambda1 ** 2 - h2) * (mu ** 2 - h2) * (h2 - nu ** 2) / (h2 * (k2 - h2)))
A:scipy.special.tests.test_ellip_harm.z->sqrt((lambda1 ** 2 - k2) * (k2 - mu ** 2) * (k2 - nu ** 2) / (k2 * (k2 - h2)))
A:scipy.special.tests.test_ellip_harm.(x1, y1, z1)->change_coefficient(lambda1, mu1, nu1, h2, k2)
A:scipy.special.tests.test_ellip_harm.(x2, y2, z2)->change_coefficient(lambda2, mu2, nu2, h2, k2)
A:scipy.special.tests.test_ellip_harm.res->sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2 + (z2 - z1) ** 2)
A:scipy.special.tests.test_ellip_harm.err_msg->repr(p)
A:scipy.special.tests.test_ellip_harm.exact->potential(*p)
A:scipy.special.tests.test_ellip_harm.(result, last_term)->summation(*p)
A:scipy.special.tests.test_ellip_harm._ellip_norm->numpy.vectorize(_ellip_norm)
A:scipy.special.tests.test_ellip_harm.h2->numpy.random.pareto(0.5, size=30)
A:scipy.special.tests.test_ellip_harm.points->numpy.array(points)
A:scipy.special.tests.test_ellip_harm.s->numpy.random.pareto(0.5, size=h2.size)
A:scipy.special.tests.test_ellip_harm.result->ellip_harm(0.5, 2.0, n, p, 0.2)
scipy.special.tests.test_ellip_harm.test_ellip_harm()
scipy.special.tests.test_ellip_harm.test_ellip_harm_2()
scipy.special.tests.test_ellip_harm.test_ellip_harm_invalid_p()
scipy.special.tests.test_ellip_harm.test_ellip_norm()
scipy.special.tests.test_ellip_harm.test_ellip_potential()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_logsumexp.py----------------------------------------
A:scipy.special.tests.test_logsumexp.a->numpy.zeros((4, 1, 2, 1))
A:scipy.special.tests.test_logsumexp.desired->numpy.log(np.sum(b * np.exp(a)))
A:scipy.special.tests.test_logsumexp.b->numpy.ones((3, 1, 5))
A:scipy.special.tests.test_logsumexp.x->numpy.array([[-25, 0, 25, 50], [1, 325, 749, 750]])
A:scipy.special.tests.test_logsumexp.logx->numpy.log(x)
A:scipy.special.tests.test_logsumexp.X->numpy.vstack((x, x))
A:scipy.special.tests.test_logsumexp.logX->numpy.vstack((logx, logx))
A:scipy.special.tests.test_logsumexp.B->numpy.vstack((b, b))
A:scipy.special.tests.test_logsumexp.(r, s)->logsumexp(a, axis=(1, 3), b=b, return_sign=True)
A:scipy.special.tests.test_logsumexp.r->logsumexp(a, axis=(1, 3), b=b)
A:scipy.special.tests.test_logsumexp.expected->numpy.array([[2.678636961770877e-33, 1.9287498479371314e-22, 1.3887943864771144e-11, 0.999999999986112], [0.0, 1.9444526359919372e-185, 0.2689414213699951, 0.7310585786300048]])
A:scipy.special.tests.test_logsumexp.x3d->numpy.array([[-25, 0, 25, 50], [1, 325, 749, 750]]).reshape(2, 2, 2)
scipy.special.tests.test_logsumexp.test_logsumexp()
scipy.special.tests.test_logsumexp.test_logsumexp_b()
scipy.special.tests.test_logsumexp.test_logsumexp_b_shape()
scipy.special.tests.test_logsumexp.test_logsumexp_b_zero()
scipy.special.tests.test_logsumexp.test_logsumexp_shape()
scipy.special.tests.test_logsumexp.test_logsumexp_sign()
scipy.special.tests.test_logsumexp.test_logsumexp_sign_shape()
scipy.special.tests.test_logsumexp.test_logsumexp_sign_zero()
scipy.special.tests.test_logsumexp.test_softmax_fixtures()
scipy.special.tests.test_logsumexp.test_softmax_multi_axes()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_pcf.py----------------------------------------
scipy.special.tests.test_pcf.test_pbwa_nan()
scipy.special.tests.test_pcf.test_pbwa_segfault()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_wright_bessel.py----------------------------------------
A:scipy.special.tests.test_wright_bessel.wb->wright_bessel(1, v + 1, x ** 2 / 4.0)
A:scipy.special.tests.test_wright_bessel.grid_a_b_x_value_acc->numpy.array([[0.1, 100.0, 709.7827128933841, 8.026353022981087e+34, 2e-08], [0.5, 10.0, 709.7827128933841, 2.680788404494657e+48, 9e-08], [0.5, 10.0, 1000.0, 2.005901980702872e+64, 1e-08], [0.5, 100.0, 1000.0, 3.4112367580445246e-117, 6e-08], [1.0, 20.0, 100000.0, 1.7717158630699857e+225, 3e-11], [1.0, 100.0, 100000.0, 1.0269334596230763e+22, np.nan], [1.0000000000000222, 20.0, 100000.0, 1.7717158630001672e+225, 3e-11], [1.0000000000000222, 100.0, 100000.0, 1.0269334595866202e+22, np.nan], [1.5, 0.0, 500.0, 15648961196.432373, 3e-11], [1.5, 2.220446049250313e-14, 500.0, 15648961196.431465, 3e-11], [1.5, 1e-10, 500.0, 15648961192.344728, 3e-11], [1.5, 1e-05, 500.0, 15648552437.334162, 3e-11], [1.5, 0.1, 500.0, 12049870581.10317, 2e-11], [1.5, 20.0, 100000.0, 7.81930438331405e+43, 3e-09], [1.5, 100.0, 100000.0, 9.653370857459075e-130, np.nan]])
scipy.special.tests.test_wright_bessel.test_wright_bessel_iv(b,x)
scipy.special.tests.test_wright_bessel.test_wright_bessel_zero(a,b)
scipy.special.tests.test_wright_bessel.test_wright_data_grid_failures(a,b,x,phi)
scipy.special.tests.test_wright_bessel.test_wright_data_grid_less_accurate(a,b,x,phi,accuracy)
scipy.special.tests.test_wright_bessel.test_wright_functional(a,b,x)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_round.py----------------------------------------
scipy.special.tests.test_round.test_add_round_down()
scipy.special.tests.test_round.test_add_round_up()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_kolmogorov.py----------------------------------------
A:scipy.special.tests.test_kolmogorov.dataset->numpy.asarray(dataset)
A:scipy.special.tests.test_kolmogorov.x->numpy.array([0.8275735551899077, 1.3163786275161036, 1.6651092133663343, 1.9525136345289607, 2.2027324540033235, 2.427292943746085, 2.6327688477341593, 2.823330050922026, 3.0018183401530627, 3.170273508408889, 3.330218444630791, 3.482825815311332, 3.629021415015205, 3.769551326282596, 3.9050272690877326, 4.035958218708255, 4.162773055788489, 4.285837174326453])
A:scipy.special.tests.test_kolmogorov.p->numpy.linspace(0.1, 1.0, 10, endpoint=True)
A:scipy.special.tests.test_kolmogorov.n->numpy.arange(3, 20)
A:scipy.special.tests.test_kolmogorov.pvals->numpy.array([smirnov(n, x) for n in range(400, 1100, 20)])
A:scipy.special.tests.test_kolmogorov.dfs->numpy.diff(pvals)
A:scipy.special.tests.test_kolmogorov.pp->numpy.linspace(0, 1, 101, endpoint=True)
A:scipy.special.tests.test_kolmogorov.n1_10->numpy.arange(1, 10)
A:scipy.special.tests.test_kolmogorov.dataset0->numpy.column_stack([n, x, pp])
A:scipy.special.tests.test_kolmogorov.n2_10->numpy.arange(2, 10)
A:scipy.special.tests.test_kolmogorov.dataset1->numpy.column_stack([n, x, pp])
A:scipy.special.tests.test_kolmogorov.dataset_c->numpy.column_stack([p[:-1], dataset_c[:-1]])
A:scipy.special.tests.test_kolmogorov.dataset02->numpy.column_stack([x02, x02])
scipy.special.tests.test_kolmogorov.TestKolmogi
scipy.special.tests.test_kolmogorov.TestKolmogi.test_basic(self)
scipy.special.tests.test_kolmogorov.TestKolmogi.test_nan(self)
scipy.special.tests.test_kolmogorov.TestKolmogi.test_round_trip(self)
scipy.special.tests.test_kolmogorov.TestKolmogi.test_smallpcdf(self)
scipy.special.tests.test_kolmogorov.TestKolmogi.test_smallpsf(self)
scipy.special.tests.test_kolmogorov.TestKolmogorov
scipy.special.tests.test_kolmogorov.TestKolmogorov.test_basic(self)
scipy.special.tests.test_kolmogorov.TestKolmogorov.test_linspace(self)
scipy.special.tests.test_kolmogorov.TestKolmogorov.test_linspacei(self)
scipy.special.tests.test_kolmogorov.TestKolmogorov.test_nan(self)
scipy.special.tests.test_kolmogorov.TestKolmogorov.test_round_trip(self)
scipy.special.tests.test_kolmogorov.TestKolmogorov.test_smallx(self)
scipy.special.tests.test_kolmogorov.TestKolmogp
scipy.special.tests.test_kolmogorov.TestKolmogp.test_basic(self)
scipy.special.tests.test_kolmogorov.TestKolmogp.test_nan(self)
scipy.special.tests.test_kolmogorov.TestSmirnov
scipy.special.tests.test_kolmogorov.TestSmirnov.test_basic(self)
scipy.special.tests.test_kolmogorov.TestSmirnov.test_n_equals_1(self)
scipy.special.tests.test_kolmogorov.TestSmirnov.test_n_equals_2(self)
scipy.special.tests.test_kolmogorov.TestSmirnov.test_n_equals_3(self)
scipy.special.tests.test_kolmogorov.TestSmirnov.test_n_large(self)
scipy.special.tests.test_kolmogorov.TestSmirnov.test_nan(self)
scipy.special.tests.test_kolmogorov.TestSmirnov.test_x_equals_0(self)
scipy.special.tests.test_kolmogorov.TestSmirnov.test_x_equals_0point5(self)
scipy.special.tests.test_kolmogorov.TestSmirnov.test_x_equals_1(self)
scipy.special.tests.test_kolmogorov.TestSmirnovi
scipy.special.tests.test_kolmogorov.TestSmirnovi.test_basic(self)
scipy.special.tests.test_kolmogorov.TestSmirnovi.test_n_equals_1(self)
scipy.special.tests.test_kolmogorov.TestSmirnovi.test_n_equals_2(self)
scipy.special.tests.test_kolmogorov.TestSmirnovi.test_n_equals_3(self)
scipy.special.tests.test_kolmogorov.TestSmirnovi.test_nan(self)
scipy.special.tests.test_kolmogorov.TestSmirnovi.test_round_trip(self)
scipy.special.tests.test_kolmogorov.TestSmirnovi.test_x_equals_0(self)
scipy.special.tests.test_kolmogorov.TestSmirnovi.test_x_equals_0point5(self)
scipy.special.tests.test_kolmogorov.TestSmirnovi.test_x_equals_1(self)
scipy.special.tests.test_kolmogorov.TestSmirnovp
scipy.special.tests.test_kolmogorov.TestSmirnovp.test_basic(self)
scipy.special.tests.test_kolmogorov.TestSmirnovp.test_nan(self)
scipy.special.tests.test_kolmogorov.TestSmirnovp.test_oneminusoneovern(self)
scipy.special.tests.test_kolmogorov.TestSmirnovp.test_oneovern(self)
scipy.special.tests.test_kolmogorov.TestSmirnovp.test_oneovernclose(self)
scipy.special.tests.test_kolmogorov.TestSmirnovp.test_oneovertwon(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_pdtr.py----------------------------------------
A:scipy.special.tests.test_pdtr.val->scipy.special.pdtrc(-1.1, 1.0)
A:scipy.special.tests.test_pdtr.double_val->scipy.special.pdtrc([0.1, 1.1, 2.1], 1.0)
A:scipy.special.tests.test_pdtr.int_val->scipy.special.pdtrc([0, 1, 2], 1.0)
scipy.special.tests.test_pdtr.TestPdtr
scipy.special.tests.test_pdtr.TestPdtr.test(self)
scipy.special.tests.test_pdtr.TestPdtr.test_domain(self)
scipy.special.tests.test_pdtr.TestPdtr.test_inf(self)
scipy.special.tests.test_pdtr.TestPdtr.test_m_zero(self)
scipy.special.tests.test_pdtr.TestPdtr.test_rounding(self)
scipy.special.tests.test_pdtr.TestPdtrc
scipy.special.tests.test_pdtr.TestPdtrc.test_domain(self)
scipy.special.tests.test_pdtr.TestPdtrc.test_inf(self)
scipy.special.tests.test_pdtr.TestPdtrc.test_m_zero(self)
scipy.special.tests.test_pdtr.TestPdtrc.test_rounding(self)
scipy.special.tests.test_pdtr.TestPdtrc.test_value(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/tests/test_cosine_distr.py----------------------------------------
scipy.special.tests.test_cosine_distr.test_cosine_cdf(x,expected)
scipy.special.tests.test_cosine_distr.test_cosine_cdf_exact(x,expected)
scipy.special.tests.test_cosine_distr.test_cosine_invcdf(p,expected)
scipy.special.tests.test_cosine_distr.test_cosine_invcdf_exact(p,expected)
scipy.special.tests.test_cosine_distr.test_cosine_invcdf_invalid_p()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_precompute/cosine_cdf.py----------------------------------------
A:scipy.special._precompute.cosine_cdf.ts->mpmath.taylor(f, -mpmath.pi, 20)
A:scipy.special._precompute.cosine_cdf.(p, q)->mpmath.pade(ts, 9, 10)
scipy.special._precompute.cosine_cdf.f(x)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_precompute/utils.py----------------------------------------
A:scipy.special._precompute.utils.n->len(a)
A:scipy.special._precompute.utils.f->sum((a[i] * x ** i for i in range(n)))
A:scipy.special._precompute.utils.h->(x / f).series(x, 0, n).removeO()
scipy.special._precompute.utils.lagrange_inversion(a)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_precompute/zetac.py----------------------------------------
A:scipy.special._precompute.zetac.coeffs->zetac_series(10)
scipy.special._precompute.zetac.main()
scipy.special._precompute.zetac.zetac_series(N)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_precompute/loggamma.py----------------------------------------
scipy.special._precompute.loggamma.main()
scipy.special._precompute.loggamma.stirling_series(N)
scipy.special._precompute.loggamma.taylor_series_at_1(N)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_precompute/expn_asy.py----------------------------------------
A:scipy.special._precompute.expn_asy.x->sympy.symbols('x')
A:scipy.special._precompute.expn_asy.fn->os.path.join('..', 'cephes', 'expn.h')
A:scipy.special._precompute.expn_asy.A->generate_A(K)
A:scipy.special._precompute.expn_asy.tmp->', '.join([str(Ak.degree()) for Ak in A])
scipy.special._precompute.expn_asy.generate_A(K)
scipy.special._precompute.expn_asy.main()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_precompute/wrightomega.py----------------------------------------
A:scipy.special._precompute.wrightomega.desired->mpmath_wrightomega(x)
A:scipy.special._precompute.wrightomega.exponential_approx->mpmath.exp(x)
A:scipy.special._precompute.wrightomega.error->wrightomega_exp_error(x)
scipy.special._precompute.wrightomega.main()
scipy.special._precompute.wrightomega.mpmath_wrightomega(x)
scipy.special._precompute.wrightomega.wrightomega_exp_error(x)
scipy.special._precompute.wrightomega.wrightomega_series_error(x)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_precompute/wright_bessel.py----------------------------------------
A:scipy.special._precompute.wright_bessel.(a, b, x, k)->symbols('a b x k')
A:scipy.special._precompute.wright_bessel.expression->Sum(x ** k / factorial(k) / gamma(a * k + b), (k, 0, S.Infinity))
A:scipy.special._precompute.wright_bessel.term->Sum(x ** k / factorial(k) / gamma(a * k + b), (k, 0, S.Infinity)).diff(a, n).subs(a, 0).simplify().doit()
A:scipy.special._precompute.wright_bessel.x_part->Sum(x ** k / factorial(k) / gamma(a * k + b), (k, 0, S.Infinity)).diff(a, n).subs(a, 0).simplify().doit().subs(polygamma(0, b), 1).replace(polygamma, lambda *args: 0)
A:scipy.special._precompute.wright_bessel.k->symbols('k')
A:scipy.special._precompute.wright_bessel.(M_PI, M_EG, M_Z3)->symbols('M_PI M_EG M_Z3')
A:scipy.special._precompute.wright_bessel.pg_part->pg_part.series(b, 0, n=order + 1 - n).removeO().subs(polygamma(2, 1), -2 * zeta(3)).simplify().series(b, 0, n=order + 1 - n).removeO().subs(polygamma(2, 1), -2 * zeta(3)).simplify()
A:scipy.special._precompute.wright_bessel.C->sympy.Poly(B[1].subs(c_subs), b).coeffs()
A:scipy.special._precompute.wright_bessel.C[i]->(C[i] * factorial(i)).simplify()
A:scipy.special._precompute.wright_bessel.test->(test - B[3].subs(c_subs)).simplify()
A:scipy.special._precompute.wright_bessel.v->symbols('v')
A:scipy.special._precompute.wright_bessel.(xa, b, xap1)->symbols('xa b xap1')
A:scipy.special._precompute.wright_bessel.C0->coef_C(0, xa, b)
A:scipy.special._precompute.wright_bessel.expr->expr.xreplace({xa + 1: xap1}).xreplace({xa + 1: xap1})
A:scipy.special._precompute.wright_bessel.factor->sympy.lcm(factor)
A:scipy.special._precompute.wright_bessel.re_a->re.compile('xa\\*\\*(\\d+)')
A:scipy.special._precompute.wright_bessel.s->re.compile('(\\d{10,})').sub('\\1.', s)
A:scipy.special._precompute.wright_bessel.re_b->re.compile('b\\*\\*(\\d+)')
A:scipy.special._precompute.wright_bessel.re_digits->re.compile('(\\d{10,})')
A:scipy.special._precompute.wright_bessel.eps_a->numpy.power(1.0 * eps, -a)
A:scipy.special._precompute.wright_bessel.(data_a, data_b, data_x)->numpy.meshgrid(data_a, data_b, data_x)
A:scipy.special._precompute.wright_bessel.best_eps->numpy.array(best_eps)
A:scipy.special._precompute.wright_bessel.func_params->list(curve_fit(func, df, df['eps'], method='trf')[0])
A:scipy.special._precompute.wright_bessel.t0->time()
A:scipy.special._precompute.wright_bessel.parser->ArgumentParser(description=__doc__, formatter_class=RawTextHelpFormatter)
A:scipy.special._precompute.wright_bessel.args->ArgumentParser(description=__doc__, formatter_class=RawTextHelpFormatter).parse_args()
scipy.special._precompute.wright_bessel.asymptotic_series()
scipy.special._precompute.wright_bessel.dg_series(z,n)
scipy.special._precompute.wright_bessel.main()
scipy.special._precompute.wright_bessel.optimal_epsilon_integral()
scipy.special._precompute.wright_bessel.pg_series(k,z,n)
scipy.special._precompute.wright_bessel.series_small_a()
scipy.special._precompute.wright_bessel.series_small_a_small_b()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_precompute/struve_convergence.py----------------------------------------
A:scipy.special._precompute.struve_convergence.vs->numpy.linspace(-1000, 1000, 91)
A:scipy.special._precompute.struve_convergence.zs->numpy.sort(np.r_[1e-05, 1.0, np.linspace(0, 700, 91)[1:]])
A:scipy.special._precompute.struve_convergence.rp->_struve_power_series(vs[:, None], zs[None, :], is_h)
A:scipy.special._precompute.struve_convergence.ra->_struve_asymp_large_z(vs[:, None], zs[None, :], is_h)
A:scipy.special._precompute.struve_convergence.rb->_struve_bessel_series(vs[:, None], zs[None, :], is_h)
A:scipy.special._precompute.struve_convergence.ex->numpy.vectorize(sh, otypes='d')(vs[:, None], zs[None, :])
A:scipy.special._precompute.struve_convergence.err_est_a->abs(ra[1] / ra[0])
A:scipy.special._precompute.struve_convergence.err_est_p->abs(rp[1] / rp[0])
A:scipy.special._precompute.struve_convergence.err_est_b->abs(rb[1] / rb[0])
A:scipy.special._precompute.struve_convergence.lp->matplotlib.pyplot.contour(vs, zs, np.log10(err_est_p).T, levels=levels, colors=['r', 'r'], linestyles=['-', '-'])
A:scipy.special._precompute.struve_convergence.la->matplotlib.pyplot.contour(vs, zs, np.log10(err_est_a).T, levels=levels, colors=['b', 'b'], linestyles=['-', '-'])
A:scipy.special._precompute.struve_convergence.lb->matplotlib.pyplot.contour(vs, zs, np.log10(err_est_b).T, levels=levels, colors=['g', 'g'], linestyles=['-', '-'])
scipy.special._precompute.struve_convergence.do_plot(is_h=True)
scipy.special._precompute.struve_convergence.err_metric(a,b,atol=1e-290)
scipy.special._precompute.struve_convergence.main()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_precompute/lambertw.py----------------------------------------
A:scipy.special._precompute.lambertw.(p, q)->lambertw_pade()
A:scipy.special._precompute.lambertw.(x, y)->numpy.meshgrid(x, y)
A:scipy.special._precompute.lambertw.lambertw_std->numpy.array(lambertw_std).reshape(x.shape)
A:scipy.special._precompute.lambertw.(fig, axes)->matplotlib.pyplot.subplots(nrows=3, ncols=1)
A:scipy.special._precompute.lambertw.p->numpy.sqrt(2 * (np.exp(1) * z + 1))
A:scipy.special._precompute.lambertw.q->numpy.array([float(q0) for q0 in q])
A:scipy.special._precompute.lambertw.pade_err->abs(pade_approx - lambertw_std)
A:scipy.special._precompute.lambertw.asy_err->abs(asy_approx - lambertw_std)
A:scipy.special._precompute.lambertw.series_err->abs(series_approx - lambertw_std)
A:scipy.special._precompute.lambertw.im->ax.pcolormesh(x, y, pade_better)
A:scipy.special._precompute.lambertw.(fig, ax)->matplotlib.pyplot.subplots(nrows=1, ncols=1)
A:scipy.special._precompute.lambertw.t->numpy.linspace(-0.3, 0.3)
scipy.special._precompute.lambertw.lambertw_pade()
scipy.special._precompute.lambertw.main()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_precompute/gammainc_asy.py----------------------------------------
A:scipy.special._precompute.gammainc_asy.a->compute_a(2 * n)
A:scipy.special._precompute.gammainc_asy.coeffs->mpmath.taylor(eta, 0, n - 1)
A:scipy.special._precompute.gammainc_asy.alpha->compute_alpha(M + 2)
A:scipy.special._precompute.gammainc_asy.g->compute_g(K)
A:scipy.special._precompute.gammainc_asy.d->compute_d(K, N)
A:scipy.special._precompute.gammainc_asy.fn->os.path.join(os.path.dirname(__file__), '..', 'cephes', 'igam.h')
scipy.special._precompute.gammainc_asy.compute_a(n)
scipy.special._precompute.gammainc_asy.compute_alpha(n)
scipy.special._precompute.gammainc_asy.compute_d(K,N)
scipy.special._precompute.gammainc_asy.compute_g(n)
scipy.special._precompute.gammainc_asy.eta(lam)
scipy.special._precompute.gammainc_asy.main()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_precompute/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_precompute/wright_bessel_data.py----------------------------------------
A:scipy.special._precompute.wright_bessel_data.res->mpmath.nsum(lambda k: x ** k / mp.fac(k) * rgamma_cached(a * k + b, dps=dps), [0, mp.inf], tol=dps, method='s', steps=[maxterms])
A:scipy.special._precompute.wright_bessel_data.t0->time()
A:scipy.special._precompute.wright_bessel_data.pwd->os.path.dirname(__file__)
A:scipy.special._precompute.wright_bessel_data.a_range->a_range.flatten().flatten()
A:scipy.special._precompute.wright_bessel_data.b_range->b_range.flatten().flatten()
A:scipy.special._precompute.wright_bessel_data.x_range->x_range.flatten().flatten()
A:scipy.special._precompute.wright_bessel_data.(a_range, b_range, x_range)->numpy.meshgrid(a_range, b_range, x_range, indexing='ij')
A:scipy.special._precompute.wright_bessel_data.failing->numpy.array([[0.1, 100, 709.7827128933841], [0.5, 10, 709.7827128933841], [0.5, 10, 1000], [0.5, 100, 1000], [1, 20, 100000], [1, 100, 100000], [1.0000000000000222, 20, 100000], [1.0000000000000222, 100, 100000], [1.5, 0, 500], [1.5, 2.220446049250313e-14, 500], [1.5, 1e-10, 500], [1.5, 1e-05, 500], [1.5, 0.1, 500], [1.5, 20, 100000], [1.5, 100, 100000]]).tolist()
A:scipy.special._precompute.wright_bessel_data.does_fail->numpy.full_like(a_range, False, dtype=bool)
A:scipy.special._precompute.wright_bessel_data.f->mp_wright_bessel(a, b, x, maxterms=maxterms)
A:scipy.special._precompute.wright_bessel_data.dataset->numpy.array(dataset)
A:scipy.special._precompute.wright_bessel_data.filename->os.path.join(pwd, '..', 'tests', 'data', 'local', 'wright_bessel.txt')
scipy.special._precompute.wright_bessel_data.main()
scipy.special._precompute.wright_bessel_data.mp_wright_bessel(a,b,x,dps=50,maxterms=2000)
scipy.special._precompute.wright_bessel_data.rgamma_cached(x,dps)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/special/_precompute/gammainc_data.py----------------------------------------
A:scipy.special._precompute.gammainc_data.negb->mpmath.fneg(b, exact=True)
A:scipy.special._precompute.gammainc_data.res->mpmath.hypercomb(h, [z], maxterms=maxterms)
A:scipy.special._precompute.gammainc_data.nega->mpmath.fneg(a, exact=True)
A:scipy.special._precompute.gammainc_data.t0->time()
A:scipy.special._precompute.gammainc_data.pwd->os.path.dirname(__file__)
A:scipy.special._precompute.gammainc_data.r->numpy.logspace(4, 14, 30)
A:scipy.special._precompute.gammainc_data.ltheta->numpy.logspace(np.log10(pi / 4), np.log10(np.arctan(0.6)), 30)
A:scipy.special._precompute.gammainc_data.utheta->numpy.logspace(np.log10(pi / 4), np.log10(np.arctan(1.4)), 30)
A:scipy.special._precompute.gammainc_data.(rg, thetag)->numpy.meshgrid(r, theta)
A:scipy.special._precompute.gammainc_data.dataset->numpy.array(dataset)
A:scipy.special._precompute.gammainc_data.filename->os.path.join(pwd, '..', 'tests', 'data', 'local', '{}.txt'.format(func.__name__))
scipy.special._precompute.gammainc_data.gammainc(a,x,dps=50,maxterms=10**8)
scipy.special._precompute.gammainc_data.gammaincc(a,x,dps=50,maxterms=10**8)
scipy.special._precompute.gammainc_data.main()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/constants/_constants.py----------------------------------------
A:scipy.constants._constants.cspeed_of_light->_cd('speed of light in vacuum')
A:scipy.constants._constants.mu_0->_cd('vacuum mag. permeability')
A:scipy.constants._constants.epsilon_0->_cd('vacuum electric permittivity')
A:scipy.constants._constants.hPlanck->_cd('Planck constant')
A:scipy.constants._constants.Ggravitational_constant->_cd('Newtonian constant of gravitation')
A:scipy.constants._constants.g->_cd('standard acceleration of gravity')
A:scipy.constants._constants.eelementary_charge->_cd('elementary charge')
A:scipy.constants._constants.Rgas_constant->_cd('molar gas constant')
A:scipy.constants._constants.alphafine_structure->_cd('fine-structure constant')
A:scipy.constants._constants.N_AAvogadro->_cd('Avogadro constant')
A:scipy.constants._constants.kBoltzmann->_cd('Boltzmann constant')
A:scipy.constants._constants.sigmaStefan_Boltzmann->_cd('Stefan-Boltzmann constant')
A:scipy.constants._constants.Wien->_cd('Wien wavelength displacement law constant')
A:scipy.constants._constants.Rydberg->_cd('Rydberg constant')
A:scipy.constants._constants.m_eelectron_mass->_cd('electron mass')
A:scipy.constants._constants.m_pproton_mass->_cd('proton mass')
A:scipy.constants._constants.m_nneutron_mass->_cd('neutron mass')
A:scipy.constants._constants.m_uuatomic_mass->_cd('atomic mass constant')
A:scipy.constants._constants.atmatmosphere->_cd('standard atmosphere')
A:scipy.constants._constants.tempo->numpy.asanyarray(val)
scipy.constants._constants.convert_temperature(val:npt.ArrayLike,old_scale:str,new_scale:str)->Any
scipy.constants._constants.lambda2nu(lambda_:npt.ArrayLike)->Any
scipy.constants._constants.nu2lambda(nu:npt.ArrayLike)->Any
scipy.constants.convert_temperature(val:npt.ArrayLike,old_scale:str,new_scale:str)->Any
scipy.constants.lambda2nu(lambda_:npt.ArrayLike)->Any
scipy.constants.nu2lambda(nu:npt.ArrayLike)->Any


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/constants/_codata.py----------------------------------------
A:scipy.constants._codata.name->line[:60].rstrip()
A:scipy.constants._codata.val->float(line[60:85].replace(' ', '').replace('...', ''))
A:scipy.constants._codata.uncert->float(line[85:110].replace(' ', '').replace('(exact)', '0'))
A:scipy.constants._codata.units->line[110:].rstrip()
A:scipy.constants._codata._physical_constants_2002->parse_constants_2002to2014(txt2002)
A:scipy.constants._codata._physical_constants_2006->parse_constants_2002to2014(txt2006)
A:scipy.constants._codata._physical_constants_2010->parse_constants_2002to2014(txt2010)
A:scipy.constants._codata._physical_constants_2014->parse_constants_2002to2014(txt2014)
A:scipy.constants._codata._physical_constants_2018->parse_constants_2018toXXXX(txt2018)
A:scipy.constants._codata._aliases[k]->k.replace('momentum', 'mom.um')
A:scipy.constants._codata.result->list(_current_constants.keys())
A:scipy.constants._codata.c->value('speed of light in vacuum')
A:scipy.constants._codata.mu0->value('vacuum mag. permeability')
A:scipy.constants._codata.epsilon0->value('vacuum electric permittivity')
scipy.constants.ConstantWarning(DeprecationWarning)
scipy.constants._check_obsolete(key:str)->None
scipy.constants._codata.ConstantWarning(DeprecationWarning)
scipy.constants._codata._check_obsolete(key:str)->None
scipy.constants._codata.find(sub:str|None=None,disp:bool=False)->Any
scipy.constants._codata.parse_constants_2002to2014(d:str)->dict[str, tuple[float, str, float]]
scipy.constants._codata.parse_constants_2018toXXXX(d:str)->dict[str, tuple[float, str, float]]
scipy.constants._codata.precision(key:str)->float
scipy.constants._codata.unit(key:str)->str
scipy.constants._codata.value(key:str)->float
scipy.constants.find(sub:str|None=None,disp:bool=False)->Any
scipy.constants.parse_constants_2002to2014(d:str)->dict[str, tuple[float, str, float]]
scipy.constants.parse_constants_2018toXXXX(d:str)->dict[str, tuple[float, str, float]]
scipy.constants.precision(key:str)->float
scipy.constants.unit(key:str)->str
scipy.constants.value(key:str)->float


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/constants/__init__.py----------------------------------------
A:scipy.constants.__init__._constant_names->'\n'.join(['``%s``%s  %s %s' % (_x[1], ' ' * (66 - len(_x[1])), _x[2][0], _x[2][1]) for _x in sorted(_constant_names_list)])
A:scipy.constants.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/constants/constants.py----------------------------------------
scipy.constants.constants.__dir__()
scipy.constants.constants.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/constants/codata.py----------------------------------------
scipy.constants.codata.__dir__()
scipy.constants.codata.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/constants/tests/test_codata.py----------------------------------------
A:scipy.constants.tests.test_codata.keys->find('natural unit', disp=False)
scipy.constants.tests.test_codata.test_2002_vs_2006()
scipy.constants.tests.test_codata.test_basic_lookup()
scipy.constants.tests.test_codata.test_basic_table_parse()
scipy.constants.tests.test_codata.test_exact_values()
scipy.constants.tests.test_codata.test_find()
scipy.constants.tests.test_codata.test_find_all()
scipy.constants.tests.test_codata.test_find_single()
scipy.constants.tests.testtest_2002_vs_2006()
scipy.constants.tests.testtest_basic_lookup()
scipy.constants.tests.testtest_basic_table_parse()
scipy.constants.tests.testtest_exact_values()
scipy.constants.tests.testtest_find()
scipy.constants.tests.testtest_find_all()
scipy.constants.tests.testtest_find_single()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/constants/tests/test_constants.py----------------------------------------
scipy.constants.tests.test_constants.test_convert_temperature()
scipy.constants.tests.test_constants.test_lambda_to_nu()
scipy.constants.tests.test_constants.test_nu_to_lambda()
scipy.constants.tests.testtest_convert_temperature()
scipy.constants.tests.testtest_lambda_to_nu()
scipy.constants.tests.testtest_nu_to_lambda()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/constants/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/interpolation.py----------------------------------------
scipy.ndimage.interpolation.__dir__()
scipy.ndimage.interpolation.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/_ni_docstrings.py----------------------------------------
A:scipy.ndimage._ni_docstrings._mode_interp_mirror_doc->_mode_interp_constant_doc.replace("Default is 'constant'", "Default is 'mirror'")
A:scipy.ndimage._ni_docstrings.docfiller->scipy._lib.doccer.filldoc(docdict)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/_morphology.py----------------------------------------
A:scipy.ndimage._morphology.structure->numpy.asarray(structure)
A:scipy.ndimage._morphology.coor->tuple([oo + ss // 2 for (ss, oo) in zip(structure.shape, origin)])
A:scipy.ndimage._morphology.slc->tuple((slice(pos[ii], pos[ii] + structure.shape[ii], None) for ii in range(len(shape))))
A:scipy.ndimage._morphology.out->binary_dilation(out, structure, iterations=ni)
A:scipy.ndimage._morphology.origin->_ni_support._normalize_sequence(origin, input.ndim)
A:scipy.ndimage._morphology.output->binary_dilation(tmp, structure, -1, mask, None, 1, origin)
A:scipy.ndimage._morphology.iterations->operator.index(iterations)
A:scipy.ndimage._morphology.input->numpy.atleast_1d(numpy.where(input, 1, 0).astype(numpy.int8))
A:scipy.ndimage._morphology.mask->numpy.logical_not(input)
A:scipy.ndimage._morphology.cit->_center_is_true(structure, origin)
A:scipy.ndimage._morphology.temp_needed->numpy.may_share_memory(input, output)
A:scipy.ndimage._morphology.(changed, coordinate_list)->_nd_image.binary_erosion(input, structure, mask, output, border_value, origin, invert, cit, 1)
A:scipy.ndimage._morphology.tmp_in->numpy.empty_like(input, dtype=bool)
A:scipy.ndimage._morphology.changed->_nd_image.binary_erosion(tmp_in, structure, mask, tmp_out, border_value, origin, invert, cit, 0)
A:scipy.ndimage._morphology.tmp->numpy.indices(dt.shape, dtype=numpy.int32)
A:scipy.ndimage._morphology.structure1->generate_binary_structure(input.ndim, 1)
A:scipy.ndimage._morphology.structure2->numpy.logical_not(structure1)
A:scipy.ndimage._morphology.origin1->_ni_support._normalize_sequence(origin1, input.ndim)
A:scipy.ndimage._morphology.origin2->_ni_support._normalize_sequence(origin2, input.ndim)
A:scipy.ndimage._morphology.tmp1->grey_dilation(input, size, footprint, structure, None, mode, cval, origin)
A:scipy.ndimage._morphology.inplace->isinstance(output, numpy.ndarray)
A:scipy.ndimage._morphology.result->_binary_erosion(input, structure2, 1, None, output, 0, origin2, 1, False)
A:scipy.ndimage._morphology.footprint->numpy.asarray(footprint)
A:scipy.ndimage._morphology.tmp2->numpy.indices(tmp1.shape, dtype=numpy.int32)
A:scipy.ndimage._morphology.ft_inplace->isinstance(indices, numpy.ndarray)
A:scipy.ndimage._morphology.dt_inplace->isinstance(distances, numpy.ndarray)
A:scipy.ndimage._morphology.struct->generate_binary_structure(tmp1.ndim, tmp1.ndim)
A:scipy.ndimage._morphology.metric->metric.copy().copy()
A:scipy.ndimage._morphology.sampling->sampling.copy().copy()
A:scipy.ndimage._morphology.ft->numpy.zeros((input.ndim,) + input.shape, dtype=numpy.int32)
A:scipy.ndimage._morphology.dt->numpy.sqrt(dt)
A:scipy.ndimage._morphology.dt[...]->numpy.where(input, -1, 0).astype(numpy.int32)
A:scipy.ndimage._morphology.sz->numpy.prod(dt.shape, axis=0)
scipy.ndimage._binary_erosion(input,structure,iterations,mask,output,border_value,origin,invert,brute_force)
scipy.ndimage._center_is_true(structure,origin)
scipy.ndimage._distance_tranform_arg_check(distances_out,indices_out,return_distances,return_indices)
scipy.ndimage._morphology._binary_erosion(input,structure,iterations,mask,output,border_value,origin,invert,brute_force)
scipy.ndimage._morphology._center_is_true(structure,origin)
scipy.ndimage._morphology._distance_tranform_arg_check(distances_out,indices_out,return_distances,return_indices)
scipy.ndimage._morphology.binary_closing(input,structure=None,iterations=1,output=None,origin=0,mask=None,border_value=0,brute_force=False)
scipy.ndimage._morphology.binary_dilation(input,structure=None,iterations=1,mask=None,output=None,border_value=0,origin=0,brute_force=False)
scipy.ndimage._morphology.binary_erosion(input,structure=None,iterations=1,mask=None,output=None,border_value=0,origin=0,brute_force=False)
scipy.ndimage._morphology.binary_fill_holes(input,structure=None,output=None,origin=0)
scipy.ndimage._morphology.binary_hit_or_miss(input,structure1=None,structure2=None,output=None,origin1=0,origin2=None)
scipy.ndimage._morphology.binary_opening(input,structure=None,iterations=1,output=None,origin=0,mask=None,border_value=0,brute_force=False)
scipy.ndimage._morphology.binary_propagation(input,structure=None,mask=None,output=None,border_value=0,origin=0)
scipy.ndimage._morphology.black_tophat(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage._morphology.distance_transform_bf(input,metric='euclidean',sampling=None,return_distances=True,return_indices=False,distances=None,indices=None)
scipy.ndimage._morphology.distance_transform_cdt(input,metric='chessboard',return_distances=True,return_indices=False,distances=None,indices=None)
scipy.ndimage._morphology.distance_transform_edt(input,sampling=None,return_distances=True,return_indices=False,distances=None,indices=None)
scipy.ndimage._morphology.generate_binary_structure(rank,connectivity)
scipy.ndimage._morphology.grey_closing(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage._morphology.grey_dilation(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage._morphology.grey_erosion(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage._morphology.grey_opening(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage._morphology.iterate_structure(structure,iterations,origin=None)
scipy.ndimage._morphology.morphological_gradient(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage._morphology.morphological_laplace(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage._morphology.white_tophat(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.binary_closing(input,structure=None,iterations=1,output=None,origin=0,mask=None,border_value=0,brute_force=False)
scipy.ndimage.binary_dilation(input,structure=None,iterations=1,mask=None,output=None,border_value=0,origin=0,brute_force=False)
scipy.ndimage.binary_erosion(input,structure=None,iterations=1,mask=None,output=None,border_value=0,origin=0,brute_force=False)
scipy.ndimage.binary_fill_holes(input,structure=None,output=None,origin=0)
scipy.ndimage.binary_hit_or_miss(input,structure1=None,structure2=None,output=None,origin1=0,origin2=None)
scipy.ndimage.binary_opening(input,structure=None,iterations=1,output=None,origin=0,mask=None,border_value=0,brute_force=False)
scipy.ndimage.binary_propagation(input,structure=None,mask=None,output=None,border_value=0,origin=0)
scipy.ndimage.black_tophat(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.distance_transform_bf(input,metric='euclidean',sampling=None,return_distances=True,return_indices=False,distances=None,indices=None)
scipy.ndimage.distance_transform_cdt(input,metric='chessboard',return_distances=True,return_indices=False,distances=None,indices=None)
scipy.ndimage.distance_transform_edt(input,sampling=None,return_distances=True,return_indices=False,distances=None,indices=None)
scipy.ndimage.generate_binary_structure(rank,connectivity)
scipy.ndimage.grey_closing(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.grey_dilation(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.grey_erosion(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.grey_opening(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.iterate_structure(structure,iterations,origin=None)
scipy.ndimage.morphological_gradient(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.morphological_laplace(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.white_tophat(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/morphology.py----------------------------------------
scipy.ndimage.morphology.__dir__()
scipy.ndimage.morphology.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/_interpolation.py----------------------------------------
A:scipy.ndimage._interpolation.input->numpy.asarray(input)
A:scipy.ndimage._interpolation.complex_output->numpy.iscomplexobj(input_arr)
A:scipy.ndimage._interpolation.output->_ni_support._get_output(output, input_arr, shape=output_shape, complex_output=complex_output)
A:scipy.ndimage._interpolation.output[...]->numpy.array(input)
A:scipy.ndimage._interpolation.mode->_ni_support._extend_mode_to_code(mode)
A:scipy.ndimage._interpolation.axis->normalize_axis_index(axis, input.ndim)
A:scipy.ndimage._interpolation.padded->numpy.pad(input, npad, mode='edge')
A:scipy.ndimage._interpolation.kwargs->dict(order=order, mode=mode, prefilter=prefilter)
A:scipy.ndimage._interpolation.(padded, npad)->_prepad_for_spline_filter(input, mode, cval)
A:scipy.ndimage._interpolation.filtered->spline_filter(padded, order, output=numpy.float64, mode=mode)
A:scipy.ndimage._interpolation.coordinates->numpy.asarray(coordinates)
A:scipy.ndimage._interpolation.matrix->matrix.copy().copy()
A:scipy.ndimage._interpolation.offset->offset.copy().copy()
A:scipy.ndimage._interpolation.shift->shift.copy().copy()
A:scipy.ndimage._interpolation.zoom->numpy.ascontiguousarray(zoom)
A:scipy.ndimage._interpolation.output_shape->tuple(output_shape)
A:scipy.ndimage._interpolation.zoom_div->numpy.array(output_shape)
A:scipy.ndimage._interpolation.zoom_nominator->numpy.array(input.shape)
A:scipy.ndimage._interpolation.input_arr->numpy.asarray(input)
A:scipy.ndimage._interpolation.axes->list(axes)
A:scipy.ndimage._interpolation.rot_matrix->numpy.array([[c, s], [-s, c]])
A:scipy.ndimage._interpolation.img_shape->numpy.asarray(input_arr.shape)
A:scipy.ndimage._interpolation.out_plane_shape->tuple(out_plane_shape)
A:scipy.ndimage._interpolation.planes_coord->itertools.product(*[[slice(None)] if ax in axes else range(img_shape[ax]) for ax in range(ndim)])
scipy.ndimage._interpolation._prepad_for_spline_filter(input,mode,cval)
scipy.ndimage._interpolation.affine_transform(input,matrix,offset=0.0,output_shape=None,output=None,order=3,mode='constant',cval=0.0,prefilter=True)
scipy.ndimage._interpolation.geometric_transform(input,mapping,output_shape=None,output=None,order=3,mode='constant',cval=0.0,prefilter=True,extra_arguments=(),extra_keywords={})
scipy.ndimage._interpolation.map_coordinates(input,coordinates,output=None,order=3,mode='constant',cval=0.0,prefilter=True)
scipy.ndimage._interpolation.rotate(input,angle,axes=(1,0),reshape=True,output=None,order=3,mode='constant',cval=0.0,prefilter=True)
scipy.ndimage._interpolation.shift(input,shift,output=None,order=3,mode='constant',cval=0.0,prefilter=True)
scipy.ndimage._interpolation.spline_filter(input,order=3,output=numpy.float64,mode='mirror')
scipy.ndimage._interpolation.spline_filter1d(input,order=3,axis=-1,output=numpy.float64,mode='mirror')
scipy.ndimage._interpolation.zoom(input,zoom,output=None,order=3,mode='constant',cval=0.0,prefilter=True,*,grid_mode=False)
scipy.ndimage._prepad_for_spline_filter(input,mode,cval)
scipy.ndimage.affine_transform(input,matrix,offset=0.0,output_shape=None,output=None,order=3,mode='constant',cval=0.0,prefilter=True)
scipy.ndimage.geometric_transform(input,mapping,output_shape=None,output=None,order=3,mode='constant',cval=0.0,prefilter=True,extra_arguments=(),extra_keywords={})
scipy.ndimage.map_coordinates(input,coordinates,output=None,order=3,mode='constant',cval=0.0,prefilter=True)
scipy.ndimage.rotate(input,angle,axes=(1,0),reshape=True,output=None,order=3,mode='constant',cval=0.0,prefilter=True)
scipy.ndimage.shift(input,shift,output=None,order=3,mode='constant',cval=0.0,prefilter=True)
scipy.ndimage.spline_filter(input,order=3,output=numpy.float64,mode='mirror')
scipy.ndimage.spline_filter1d(input,order=3,axis=-1,output=numpy.float64,mode='mirror')
scipy.ndimage.zoom(input,zoom,output=None,order=3,mode='constant',cval=0.0,prefilter=True,*,grid_mode=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/measurements.py----------------------------------------
scipy.ndimage.measurements.__dir__()
scipy.ndimage.measurements.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/_ni_support.py----------------------------------------
A:scipy.ndimage._ni_support.is_str->isinstance(input, str)
A:scipy.ndimage._ni_support.normalized->list(input)
A:scipy.ndimage._ni_support.output->numpy.zeros(shape, dtype=output)
A:scipy.ndimage._ni_support.complex_type->numpy.promote_types(input.dtype, numpy.complex64)
scipy.ndimage._ni_support._extend_mode_to_code(mode)
scipy.ndimage._ni_support._get_output(output,input,shape=None,complex_output=False)
scipy.ndimage._ni_support._normalize_sequence(input,rank)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/_measurements.py----------------------------------------
A:scipy.ndimage._measurements.input->numpy.asarray(input)
A:scipy.ndimage._measurements.structure->structure.copy().copy()
A:scipy.ndimage._measurements.output->_ni_support._get_output(output, input)
A:scipy.ndimage._measurements.max_label->numpy.asarray(input).max()
A:scipy.ndimage._measurements.tmp_output->numpy.empty(input.shape, np.intp if need_64bits else np.int32)
A:scipy.ndimage._measurements.ignore_value_arr->numpy.zeros((1,), dtype=arr.dtype)
A:scipy.ndimage._measurements.ignore_value_arr[0]->numpy.zeros((1,), dtype=arr.dtype).dtype.type(ignore_value)
A:scipy.ndimage._measurements.val_indices->_nd_image.value_indices(arr, ignoreIsNone, ignore_value_arr)
A:scipy.ndimage._measurements.as_scalar->numpy.isscalar(index)
A:scipy.ndimage._measurements.positions->numpy.arange(input.size).reshape(input.shape)
A:scipy.ndimage._measurements.(input, labels)->numpy.broadcast_arrays(input, labels)
A:scipy.ndimage._measurements.index->index.astype(labels.dtype).astype(labels.dtype)
A:scipy.ndimage._measurements.lo->numpy.zeros(labels.max() + 2, numpy.int_)
A:scipy.ndimage._measurements.hi->numpy.zeros(labels.max() + 2, numpy.int_)
A:scipy.ndimage._measurements.label_order->labels.argsort()
A:scipy.ndimage._measurements.index_order->index.astype(labels.dtype).astype(labels.dtype).argsort()
A:scipy.ndimage._measurements.output[i]->func(*[inp[l:h] for inp in inputs])
A:scipy.ndimage._measurements.temp->numpy.empty(index.shape, out_dtype)
A:scipy.ndimage._measurements.bc->numpy.bincount(labels.ravel(), weights=(centered_input * centered_input.conjugate()).ravel())
A:scipy.ndimage._measurements.(unique_labels, new_labels)->numpy.unique(labels, return_inverse=True)
A:scipy.ndimage._measurements.counts->numpy.bincount(labels.ravel())
A:scipy.ndimage._measurements.sums->numpy.bincount(labels.ravel(), weights=input.ravel())
A:scipy.ndimage._measurements.sums_c->_sum_centered(labels)
A:scipy.ndimage._measurements.idxs->numpy.asanyarray(index, numpy.int_).copy()
A:scipy.ndimage._measurements.(count, sum)->_stats(input, labels, index)
A:scipy.ndimage._measurements.(count, sum, sum_c_sq)->_stats(input, labels, index, centered=True)
A:scipy.ndimage._measurements.(unique_labels, labels)->numpy.unique(labels, return_inverse=True)
A:scipy.ndimage._measurements.order->numpy.asarray(input).ravel().argsort()
A:scipy.ndimage._measurements.mins->numpy.zeros(labels.max() + 2, input.dtype)
A:scipy.ndimage._measurements.minpos->numpy.zeros(labels.max() + 2, int)
A:scipy.ndimage._measurements.maxs->numpy.zeros(labels.max() + 2, input.dtype)
A:scipy.ndimage._measurements.maxpos->numpy.zeros(labels.max() + 2, int)
A:scipy.ndimage._measurements.locs->numpy.arange(len(labels))
A:scipy.ndimage._measurements.dims->numpy.array(numpy.asarray(input).shape)
A:scipy.ndimage._measurements.(minimums, min_positions, maximums, max_positions)->_select(input, labels, index, find_min=True, find_max=True, find_min_positions=True, find_max_positions=True)
A:scipy.ndimage._measurements.normalizer->sum(input, labels, index)
A:scipy.ndimage._measurements._bins->numpy.linspace(min, max, bins + 1)
A:scipy.ndimage._measurements.markers->numpy.asarray(markers)
scipy.ndimage._measurements._safely_castable_to_int(dt)
scipy.ndimage._measurements._select(input,labels=None,index=None,find_min=False,find_max=False,find_min_positions=False,find_max_positions=False,find_median=False)
scipy.ndimage._measurements._stats(input,labels=None,index=None,centered=False)
scipy.ndimage._measurements.center_of_mass(input,labels=None,index=None)
scipy.ndimage._measurements.extrema(input,labels=None,index=None)
scipy.ndimage._measurements.find_objects(input,max_label=0)
scipy.ndimage._measurements.histogram(input,min,max,bins,labels=None,index=None)
scipy.ndimage._measurements.label(input,structure=None,output=None)
scipy.ndimage._measurements.labeled_comprehension(input,labels,index,func,out_dtype,default,pass_positions=False)
scipy.ndimage._measurements.maximum(input,labels=None,index=None)
scipy.ndimage._measurements.maximum_position(input,labels=None,index=None)
scipy.ndimage._measurements.mean(input,labels=None,index=None)
scipy.ndimage._measurements.median(input,labels=None,index=None)
scipy.ndimage._measurements.minimum(input,labels=None,index=None)
scipy.ndimage._measurements.minimum_position(input,labels=None,index=None)
scipy.ndimage._measurements.standard_deviation(input,labels=None,index=None)
scipy.ndimage._measurements.sum(input,labels=None,index=None)
scipy.ndimage._measurements.sum_labels(input,labels=None,index=None)
scipy.ndimage._measurements.value_indices(arr,*,ignore_value=None)
scipy.ndimage._measurements.variance(input,labels=None,index=None)
scipy.ndimage._measurements.watershed_ift(input,markers,structure=None,output=None)
scipy.ndimage._safely_castable_to_int(dt)
scipy.ndimage._select(input,labels=None,index=None,find_min=False,find_max=False,find_min_positions=False,find_max_positions=False,find_median=False)
scipy.ndimage._stats(input,labels=None,index=None,centered=False)
scipy.ndimage.center_of_mass(input,labels=None,index=None)
scipy.ndimage.extrema(input,labels=None,index=None)
scipy.ndimage.find_objects(input,max_label=0)
scipy.ndimage.histogram(input,min,max,bins,labels=None,index=None)
scipy.ndimage.label(input,structure=None,output=None)
scipy.ndimage.labeled_comprehension(input,labels,index,func,out_dtype,default,pass_positions=False)
scipy.ndimage.maximum(input,labels=None,index=None)
scipy.ndimage.maximum_position(input,labels=None,index=None)
scipy.ndimage.mean(input,labels=None,index=None)
scipy.ndimage.median(input,labels=None,index=None)
scipy.ndimage.minimum(input,labels=None,index=None)
scipy.ndimage.minimum_position(input,labels=None,index=None)
scipy.ndimage.standard_deviation(input,labels=None,index=None)
scipy.ndimage.sum(input,labels=None,index=None)
scipy.ndimage.sum_labels(input,labels=None,index=None)
scipy.ndimage.value_indices(arr,*,ignore_value=None)
scipy.ndimage.variance(input,labels=None,index=None)
scipy.ndimage.watershed_ift(input,markers,structure=None,output=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/_filters.py----------------------------------------
A:scipy.ndimage._filters.input->numpy.asarray(input)
A:scipy.ndimage._filters.weights->weights.copy().copy()
A:scipy.ndimage._filters.kwargs->dict(mode=mode, origin=origin, convolution=convolution)
A:scipy.ndimage._filters.output->_ni_support._get_output(output, input)
A:scipy.ndimage._filters.axis->normalize_axis_index(axis, input.ndim)
A:scipy.ndimage._filters.mode->_ni_support._extend_mode_to_code(mode)
A:scipy.ndimage._filters.exponent_range->numpy.arange(order + 1)
A:scipy.ndimage._filters.x->numpy.arange(-radius, radius + 1)
A:scipy.ndimage._filters.phi_x->numpy.exp(-0.5 / sigma2 * x ** 2)
A:scipy.ndimage._filters.q->(x[:, None] ** exponent_range).dot(q)
A:scipy.ndimage._filters.D->numpy.diag(exponent_range[1:], 1)
A:scipy.ndimage._filters.P->numpy.diag(numpy.ones(order) / -sigma2, -1)
A:scipy.ndimage._filters.sd->float(sigma)
A:scipy.ndimage._filters.lw->int(truncate * sd + 0.5)
A:scipy.ndimage._filters.orders->_ni_support._normalize_sequence(order, input.ndim)
A:scipy.ndimage._filters.sigmas->_ni_support._normalize_sequence(sigma, input.ndim)
A:scipy.ndimage._filters.modes->_ni_support._normalize_sequence(mode, input.ndim)
A:scipy.ndimage._filters.radiuses->_ni_support._normalize_sequence(radius, input.ndim)
A:scipy.ndimage._filters.axes->list(range(input.ndim))
A:scipy.ndimage._filters.tmp->derivative(input, axes[ii], output.dtype, modes[ii], cval, *extra_arguments, **extra_keywords)
A:scipy.ndimage._filters.origins->_ni_support._normalize_sequence(origin, input.ndim)
A:scipy.ndimage._filters.temp_needed->numpy.may_share_memory(input, output)
A:scipy.ndimage._filters.sizes->_ni_support._normalize_sequence(size, input.ndim)
A:scipy.ndimage._filters.footprint->footprint.copy().copy()
A:scipy.ndimage._filters.structure->structure.copy().copy()
A:scipy.ndimage._filters.filter_size->numpy.where(footprint, 1, 0).sum()
A:scipy.ndimage._filters.rank->operator.index(rank)
scipy.ndimage._complex_via_real_components(func,input,weights,output,cval,**kwargs)
scipy.ndimage._correlate_or_convolve(input,weights,output,mode,cval,origin,convolution)
scipy.ndimage._filters._complex_via_real_components(func,input,weights,output,cval,**kwargs)
scipy.ndimage._filters._correlate_or_convolve(input,weights,output,mode,cval,origin,convolution)
scipy.ndimage._filters._gaussian_kernel1d(sigma,order,radius)
scipy.ndimage._filters._invalid_origin(origin,lenw)
scipy.ndimage._filters._min_or_max_filter(input,size,footprint,structure,output,mode,cval,origin,minimum)
scipy.ndimage._filters._rank_filter(input,rank,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0,operation='rank')
scipy.ndimage._filters.convolve(input,weights,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage._filters.convolve1d(input,weights,axis=-1,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage._filters.correlate(input,weights,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage._filters.correlate1d(input,weights,axis=-1,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage._filters.gaussian_filter(input,sigma,order=0,output=None,mode='reflect',cval=0.0,truncate=4.0,*,radius=None)
scipy.ndimage._filters.gaussian_filter1d(input,sigma,axis=-1,order=0,output=None,mode='reflect',cval=0.0,truncate=4.0,*,radius=None)
scipy.ndimage._filters.gaussian_gradient_magnitude(input,sigma,output=None,mode='reflect',cval=0.0,**kwargs)
scipy.ndimage._filters.gaussian_laplace(input,sigma,output=None,mode='reflect',cval=0.0,**kwargs)
scipy.ndimage._filters.generic_filter(input,function,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0,extra_arguments=(),extra_keywords=None)
scipy.ndimage._filters.generic_filter1d(input,function,filter_size,axis=-1,output=None,mode='reflect',cval=0.0,origin=0,extra_arguments=(),extra_keywords=None)
scipy.ndimage._filters.generic_gradient_magnitude(input,derivative,output=None,mode='reflect',cval=0.0,extra_arguments=(),extra_keywords=None)
scipy.ndimage._filters.generic_laplace(input,derivative2,output=None,mode='reflect',cval=0.0,extra_arguments=(),extra_keywords=None)
scipy.ndimage._filters.laplace(input,output=None,mode='reflect',cval=0.0)
scipy.ndimage._filters.maximum_filter(input,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage._filters.maximum_filter1d(input,size,axis=-1,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage._filters.median_filter(input,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage._filters.minimum_filter(input,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage._filters.minimum_filter1d(input,size,axis=-1,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage._filters.percentile_filter(input,percentile,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage._filters.prewitt(input,axis=-1,output=None,mode='reflect',cval=0.0)
scipy.ndimage._filters.rank_filter(input,rank,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage._filters.sobel(input,axis=-1,output=None,mode='reflect',cval=0.0)
scipy.ndimage._filters.uniform_filter(input,size=3,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage._filters.uniform_filter1d(input,size,axis=-1,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage._gaussian_kernel1d(sigma,order,radius)
scipy.ndimage._invalid_origin(origin,lenw)
scipy.ndimage._min_or_max_filter(input,size,footprint,structure,output,mode,cval,origin,minimum)
scipy.ndimage._rank_filter(input,rank,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0,operation='rank')
scipy.ndimage.convolve(input,weights,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.convolve1d(input,weights,axis=-1,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.correlate(input,weights,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.correlate1d(input,weights,axis=-1,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.gaussian_filter(input,sigma,order=0,output=None,mode='reflect',cval=0.0,truncate=4.0,*,radius=None)
scipy.ndimage.gaussian_filter1d(input,sigma,axis=-1,order=0,output=None,mode='reflect',cval=0.0,truncate=4.0,*,radius=None)
scipy.ndimage.gaussian_gradient_magnitude(input,sigma,output=None,mode='reflect',cval=0.0,**kwargs)
scipy.ndimage.gaussian_laplace(input,sigma,output=None,mode='reflect',cval=0.0,**kwargs)
scipy.ndimage.generic_filter(input,function,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0,extra_arguments=(),extra_keywords=None)
scipy.ndimage.generic_filter1d(input,function,filter_size,axis=-1,output=None,mode='reflect',cval=0.0,origin=0,extra_arguments=(),extra_keywords=None)
scipy.ndimage.generic_gradient_magnitude(input,derivative,output=None,mode='reflect',cval=0.0,extra_arguments=(),extra_keywords=None)
scipy.ndimage.generic_laplace(input,derivative2,output=None,mode='reflect',cval=0.0,extra_arguments=(),extra_keywords=None)
scipy.ndimage.laplace(input,output=None,mode='reflect',cval=0.0)
scipy.ndimage.maximum_filter(input,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.maximum_filter1d(input,size,axis=-1,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.median_filter(input,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.minimum_filter(input,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.minimum_filter1d(input,size,axis=-1,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.percentile_filter(input,percentile,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.prewitt(input,axis=-1,output=None,mode='reflect',cval=0.0)
scipy.ndimage.rank_filter(input,rank,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.sobel(input,axis=-1,output=None,mode='reflect',cval=0.0)
scipy.ndimage.uniform_filter(input,size=3,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.uniform_filter1d(input,size,axis=-1,output=None,mode='reflect',cval=0.0,origin=0)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/__init__.py----------------------------------------
A:scipy.ndimage.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/filters.py----------------------------------------
scipy.ndimage.filters.__dir__()
scipy.ndimage.filters.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/fourier.py----------------------------------------
scipy.ndimage.fourier.__dir__()
scipy.ndimage.fourier.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/_fourier.py----------------------------------------
A:scipy.ndimage._fourier.output->_get_output_fourier_complex(output, input)
A:scipy.ndimage._fourier.input->numpy.asarray(input)
A:scipy.ndimage._fourier.axis->normalize_axis_index(axis, input.ndim)
A:scipy.ndimage._fourier.sigmas->sigmas.copy().copy()
A:scipy.ndimage._fourier.sizes->sizes.copy().copy()
A:scipy.ndimage._fourier.shifts->shifts.copy().copy()
scipy.ndimage._fourier._get_output_fourier(output,input)
scipy.ndimage._fourier._get_output_fourier_complex(output,input)
scipy.ndimage._fourier.fourier_ellipsoid(input,size,n=-1,axis=-1,output=None)
scipy.ndimage._fourier.fourier_gaussian(input,sigma,n=-1,axis=-1,output=None)
scipy.ndimage._fourier.fourier_shift(input,shift,n=-1,axis=-1,output=None)
scipy.ndimage._fourier.fourier_uniform(input,size,n=-1,axis=-1,output=None)
scipy.ndimage._get_output_fourier(output,input)
scipy.ndimage._get_output_fourier_complex(output,input)
scipy.ndimage.fourier_ellipsoid(input,size,n=-1,axis=-1,output=None)
scipy.ndimage.fourier_gaussian(input,sigma,n=-1,axis=-1,output=None)
scipy.ndimage.fourier_shift(input,shift,n=-1,axis=-1,output=None)
scipy.ndimage.fourier_uniform(input,size,n=-1,axis=-1,output=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/tests/test_filters.py----------------------------------------
A:scipy.ndimage.tests.test_filters.array->numpy.array([[1], [2], [3]])
A:scipy.ndimage.tests.test_filters.kernel->numpy.zeros((3, 3), bool)
A:scipy.ndimage.tests.test_filters.expected->numpy.array([[0.32, 0.4, 0.48], [0.2, 0.28, 0.32], [0.28, 0.32, 0.4]])
A:scipy.ndimage.tests.test_filters.correlate->functools.partial(ndimage.correlate, mode=mode, cval=cval)
A:scipy.ndimage.tests.test_filters.convolve->functools.partial(ndimage.convolve, mode=mode, cval=cval)
A:scipy.ndimage.tests.test_filters.output->scipy.ndimage.correlate(array, weights, mode=mode, cval=0)
A:scipy.ndimage.tests.test_filters.output_real->numpy.zeros_like(array, dtype=real_dtype)
A:scipy.ndimage.tests.test_filters.weights->numpy.array([[0], [0], [0], [0], [0], [0], [0], [0], [1]])
A:scipy.ndimage.tests.test_filters.y->scipy.ndimage.gaussian_gradient_magnitude(x, sigma=2, truncate=3.5)
A:scipy.ndimage.tests.test_filters.input->numpy.asarray(input)
A:scipy.ndimage.tests.test_filters.output1->scipy.ndimage.gaussian_filter(input, 1.0)
A:scipy.ndimage.tests.test_filters.output2->scipy.ndimage.maximum_filter(array, footprint=footprint, mode=['reflect', 'reflect'])
A:scipy.ndimage.tests.test_filters.t->scipy.ndimage.median_filter(b, (3, 3))
A:scipy.ndimage.tests.test_filters.tmp1->scipy.ndimage.gaussian_gradient_magnitude(array, 1.0)
A:scipy.ndimage.tests.test_filters.tmp2->scipy.ndimage.generic_gradient_magnitude(array, derivative, extra_arguments=(1.0,), extra_keywords={'b': 2.0})
A:scipy.ndimage.tests.test_filters.tmp->scipy.ndimage.generic_laplace(array, derivative2, extra_arguments=(1.0,), extra_keywords={'b': 2.0})
A:scipy.ndimage.tests.test_filters.filter_shape->numpy.array([2, 3])
A:scipy.ndimage.tests.test_filters.array_copy->numpy.array([[1], [2], [3]]).copy()
A:scipy.ndimage.tests.test_filters.a->numpy.arange(9, dtype='<f4').reshape(3, 3)
A:scipy.ndimage.tests.test_filters.r1->scipy.ndimage.correlate(a, filter_ * footprint)
A:scipy.ndimage.tests.test_filters.r2->scipy.ndimage.generic_filter(a, _filter_func, mode=['reflect', 'reflect'], footprint=footprint, extra_arguments=(cf,), extra_keywords={'total': cf.sum()})
A:scipy.ndimage.tests.test_filters.filter_->numpy.array([[1.0, 2.0], [3.0, 4.0]])
A:scipy.ndimage.tests.test_filters.footprint->numpy.array([[1, 0], [0, 1]])
A:scipy.ndimage.tests.test_filters.cf->numpy.array([1.0, 4.0])
A:scipy.ndimage.tests.test_filters.arr->numpy.random.random((10, 20, 30))
A:scipy.ndimage.tests.test_filters.res->scipy.ndimage.generic_filter(arr, func, size=(1, 1))
A:scipy.ndimage.tests.test_filters.res2->scipy.ndimage.generic_filter(arr, func, size=1)
A:scipy.ndimage.tests.test_filters.sigma->numpy.int64(1)
A:scipy.ndimage.tests.test_filters.out->scipy.ndimage.uniform_filter1d(in_, filter_size)
A:scipy.ndimage.tests.test_filters.x->numpy.zeros(7)
A:scipy.ndimage.tests.test_filters.perlin->numpy.zeros_like(x)
A:scipy.ndimage.tests.test_filters.phi_x->numpy.exp(-0.5 * x * x / sigma2)
A:scipy.ndimage.tests.test_filters.data->numpy.array([1], dtype=numpy.float16)
A:scipy.ndimage.tests.test_filters.calculated->scipy.ndimage.gaussian_gradient_magnitude(arr, 1, mode=modes)
A:scipy.ndimage.tests.test_filters.num_nonzeros_2->(ndimage.gaussian_filter(arr, 5, truncate=2) > 0).sum()
A:scipy.ndimage.tests.test_filters.num_nonzeros_5->(ndimage.gaussian_filter(arr, 5, truncate=5) > 0).sum()
A:scipy.ndimage.tests.test_filters.f->scipy.ndimage.gaussian_filter1d(x, sigma=2, truncate=3.5)
A:scipy.ndimage.tests.test_filters.n0->fpos.any(axis=0).sum()
A:scipy.ndimage.tests.test_filters.n1->fpos.any(axis=1).sum()
A:scipy.ndimage.tests.test_filters.n->(f > 0).sum()
A:scipy.ndimage.tests.test_filters.f1->scipy.ndimage.gaussian_filter(a, sigma=[0.5, 2.5], truncate=3.5)
A:scipy.ndimage.tests.test_filters.f2->scipy.ndimage.gaussian_filter(a, sigma=[0.5, 2.5], radius=[2, 9])
A:scipy.ndimage.tests.test_filters.d->numpy.random.randn(500, 500)
A:scipy.ndimage.tests.test_filters.os->numpy.empty([4] + list(d.shape))
A:scipy.ndimage.tests.test_filters.ot->numpy.empty_like(os)
A:scipy.ndimage.tests.test_filters.k->numpy.random.randn(10, 10)
A:scipy.ndimage.tests.test_filters.in_->numpy.repeat([0, 1, 0], [9, 9, 9])
A:scipy.ndimage.tests.test_filters.ref->scipy.ndimage.median_filter(a, (3, 3))
A:scipy.ndimage.tests.test_filters.b->numpy.arange(9, dtype='>f4').reshape(3, 3)
scipy.ndimage.tests.testTestNdimageFilters
scipy.ndimage.tests.testTestNdimageFilters._validate_complex(self,array,kernel,type2,mode='reflect',cval=0)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate01(self)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate01_overlap(self)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate02(self)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate03(self)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate04(self)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate05(self)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate06(self)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate07(self)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate08(self)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate09(self)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate10(self)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate11(self)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate12(self)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate13(self,dtype_array,dtype_kernel)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate14(self,dtype_array,dtype_output)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate15(self,dtype_array)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate16(self,dtype_array)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate17(self)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate18(self,dtype_array)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate19(self,dtype_array)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate1d_complex_input(self,dtype_input,dtype_kernel,dtype_output)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate1d_complex_input_and_kernel(self,dtype,dtype_output)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate1d_complex_input_and_kernel_cval(self,dtype,dtype_output)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate1d_complex_input_cval(self,dtype_input,dtype_kernel,dtype_output)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate1d_complex_kernel(self,dtype_input,dtype_kernel,dtype_output)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate1d_complex_kernel_cval(self,dtype_input,dtype_kernel,dtype_output)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate20(self,dtype_array,dtype_output)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate21(self)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate22(self,dtype_array,dtype_output)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate23(self,dtype_array,dtype_output)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate24(self,dtype_array,dtype_output)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate25(self,dtype_array,dtype_output)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate26(self)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate_complex_input(self,dtype_input,dtype_kernel,dtype_output)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate_complex_input_and_kernel(self,dtype,dtype_output)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate_complex_input_and_kernel_cval(self,dtype,dtype_output)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate_complex_kernel(self,dtype_input,dtype_kernel,dtype_output)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate_complex_kernel_cval(self,dtype_input,dtype_kernel,dtype_output,mode)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate_complex_kernel_invalid_cval(self,dtype_input,dtype_kernel)
scipy.ndimage.tests.testTestNdimageFilters.test_correlate_mode_sequence(self)
scipy.ndimage.tests.testTestNdimageFilters.test_extend01(self,mode,expected_value)
scipy.ndimage.tests.testTestNdimageFilters.test_extend02(self,mode,expected_value)
scipy.ndimage.tests.testTestNdimageFilters.test_extend03(self,mode,expected_value)
scipy.ndimage.tests.testTestNdimageFilters.test_extend04(self,mode,expected_value)
scipy.ndimage.tests.testTestNdimageFilters.test_extend05(self,mode,expected_value)
scipy.ndimage.tests.testTestNdimageFilters.test_extend06(self,mode,expected_value)
scipy.ndimage.tests.testTestNdimageFilters.test_extend07(self,mode,expected_value)
scipy.ndimage.tests.testTestNdimageFilters.test_extend08(self,mode,expected_value)
scipy.ndimage.tests.testTestNdimageFilters.test_extend09(self,mode,expected_value)
scipy.ndimage.tests.testTestNdimageFilters.test_extend10(self,mode,expected_value)
scipy.ndimage.tests.testTestNdimageFilters.test_gauss01(self)
scipy.ndimage.tests.testTestNdimageFilters.test_gauss02(self)
scipy.ndimage.tests.testTestNdimageFilters.test_gauss03(self)
scipy.ndimage.tests.testTestNdimageFilters.test_gauss04(self)
scipy.ndimage.tests.testTestNdimageFilters.test_gauss05(self)
scipy.ndimage.tests.testTestNdimageFilters.test_gauss06(self)
scipy.ndimage.tests.testTestNdimageFilters.test_gauss_memory_overlap(self)
scipy.ndimage.tests.testTestNdimageFilters.test_gaussian_gradient_magnitude01(self,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_gaussian_gradient_magnitude02(self,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_gaussian_laplace01(self,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_gaussian_laplace02(self,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_generic_filter01(self,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_generic_filter1d01(self,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_generic_gradient_magnitude01(self)
scipy.ndimage.tests.testTestNdimageFilters.test_generic_laplace01(self,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_laplace01(self,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_laplace02(self,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_maximum_filter01(self)
scipy.ndimage.tests.testTestNdimageFilters.test_maximum_filter02(self)
scipy.ndimage.tests.testTestNdimageFilters.test_maximum_filter03(self)
scipy.ndimage.tests.testTestNdimageFilters.test_maximum_filter04(self)
scipy.ndimage.tests.testTestNdimageFilters.test_maximum_filter05(self)
scipy.ndimage.tests.testTestNdimageFilters.test_maximum_filter06(self)
scipy.ndimage.tests.testTestNdimageFilters.test_maximum_filter07(self)
scipy.ndimage.tests.testTestNdimageFilters.test_maximum_filter08(self)
scipy.ndimage.tests.testTestNdimageFilters.test_maximum_filter09(self)
scipy.ndimage.tests.testTestNdimageFilters.test_minimum_filter01(self)
scipy.ndimage.tests.testTestNdimageFilters.test_minimum_filter02(self)
scipy.ndimage.tests.testTestNdimageFilters.test_minimum_filter03(self)
scipy.ndimage.tests.testTestNdimageFilters.test_minimum_filter04(self)
scipy.ndimage.tests.testTestNdimageFilters.test_minimum_filter05(self)
scipy.ndimage.tests.testTestNdimageFilters.test_minimum_filter05_overlap(self)
scipy.ndimage.tests.testTestNdimageFilters.test_minimum_filter06(self)
scipy.ndimage.tests.testTestNdimageFilters.test_minimum_filter07(self)
scipy.ndimage.tests.testTestNdimageFilters.test_minimum_filter08(self)
scipy.ndimage.tests.testTestNdimageFilters.test_minimum_filter09(self)
scipy.ndimage.tests.testTestNdimageFilters.test_prewitt01(self,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_prewitt02(self,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_prewitt03(self,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_prewitt04(self,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_rank01(self)
scipy.ndimage.tests.testTestNdimageFilters.test_rank02(self)
scipy.ndimage.tests.testTestNdimageFilters.test_rank03(self)
scipy.ndimage.tests.testTestNdimageFilters.test_rank04(self)
scipy.ndimage.tests.testTestNdimageFilters.test_rank05(self)
scipy.ndimage.tests.testTestNdimageFilters.test_rank06(self)
scipy.ndimage.tests.testTestNdimageFilters.test_rank06_overlap(self)
scipy.ndimage.tests.testTestNdimageFilters.test_rank07(self)
scipy.ndimage.tests.testTestNdimageFilters.test_rank08(self)
scipy.ndimage.tests.testTestNdimageFilters.test_rank09(self,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_rank10(self)
scipy.ndimage.tests.testTestNdimageFilters.test_rank11(self)
scipy.ndimage.tests.testTestNdimageFilters.test_rank12(self,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_rank13(self,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_rank14(self,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_rank15(self,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_sobel01(sel,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_sobel02(self,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_sobel03(self,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_sobel04(self,dtype)
scipy.ndimage.tests.testTestNdimageFilters.test_uniform01(self)
scipy.ndimage.tests.testTestNdimageFilters.test_uniform01_complex(self)
scipy.ndimage.tests.testTestNdimageFilters.test_uniform02(self)
scipy.ndimage.tests.testTestNdimageFilters.test_uniform03(self)
scipy.ndimage.tests.testTestNdimageFilters.test_uniform04(self)
scipy.ndimage.tests.testTestNdimageFilters.test_uniform05(self)
scipy.ndimage.tests.testTestNdimageFilters.test_uniform06(self,dtype_array,dtype_output)
scipy.ndimage.tests.testTestNdimageFilters.test_uniform06_complex(self,dtype_array,dtype_output)
scipy.ndimage.tests.testTestThreading
scipy.ndimage.tests.testTestThreading.check_func_serial(self,n,fun,args,out)
scipy.ndimage.tests.testTestThreading.check_func_thread(self,n,fun,args,out)
scipy.ndimage.tests.testTestThreading.test_correlate(self)
scipy.ndimage.tests.testTestThreading.test_correlate1d(self)
scipy.ndimage.tests.testTestThreading.test_median_filter(self)
scipy.ndimage.tests.testTestThreading.test_minmax_filter(self)
scipy.ndimage.tests.testTestThreading.test_uniform_filter1d(self)
scipy.ndimage.tests.test_complex_correlate(array,kernel,real_dtype,convolve=False,mode='reflect',cval=0)
scipy.ndimage.tests.test_filters.TestNdimageFilters
scipy.ndimage.tests.test_filters.TestNdimageFilters._validate_complex(self,array,kernel,type2,mode='reflect',cval=0)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate01(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate01_overlap(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate02(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate03(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate04(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate05(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate06(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate07(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate08(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate09(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate10(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate11(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate12(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate13(self,dtype_array,dtype_kernel)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate14(self,dtype_array,dtype_output)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate15(self,dtype_array)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate16(self,dtype_array)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate17(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate18(self,dtype_array)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate19(self,dtype_array)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate1d_complex_input(self,dtype_input,dtype_kernel,dtype_output)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate1d_complex_input_and_kernel(self,dtype,dtype_output)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate1d_complex_input_and_kernel_cval(self,dtype,dtype_output)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate1d_complex_input_cval(self,dtype_input,dtype_kernel,dtype_output)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate1d_complex_kernel(self,dtype_input,dtype_kernel,dtype_output)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate1d_complex_kernel_cval(self,dtype_input,dtype_kernel,dtype_output)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate20(self,dtype_array,dtype_output)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate21(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate22(self,dtype_array,dtype_output)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate23(self,dtype_array,dtype_output)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate24(self,dtype_array,dtype_output)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate25(self,dtype_array,dtype_output)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate26(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate_complex_input(self,dtype_input,dtype_kernel,dtype_output)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate_complex_input_and_kernel(self,dtype,dtype_output)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate_complex_input_and_kernel_cval(self,dtype,dtype_output)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate_complex_kernel(self,dtype_input,dtype_kernel,dtype_output)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate_complex_kernel_cval(self,dtype_input,dtype_kernel,dtype_output,mode)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate_complex_kernel_invalid_cval(self,dtype_input,dtype_kernel)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_correlate_mode_sequence(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_extend01(self,mode,expected_value)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_extend02(self,mode,expected_value)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_extend03(self,mode,expected_value)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_extend04(self,mode,expected_value)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_extend05(self,mode,expected_value)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_extend06(self,mode,expected_value)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_extend07(self,mode,expected_value)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_extend08(self,mode,expected_value)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_extend09(self,mode,expected_value)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_extend10(self,mode,expected_value)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_gauss01(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_gauss02(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_gauss03(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_gauss04(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_gauss05(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_gauss06(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_gauss_memory_overlap(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_gaussian_gradient_magnitude01(self,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_gaussian_gradient_magnitude02(self,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_gaussian_laplace01(self,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_gaussian_laplace02(self,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_generic_filter01(self,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_generic_filter1d01(self,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_generic_gradient_magnitude01(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_generic_laplace01(self,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_laplace01(self,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_laplace02(self,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_maximum_filter01(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_maximum_filter02(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_maximum_filter03(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_maximum_filter04(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_maximum_filter05(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_maximum_filter06(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_maximum_filter07(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_maximum_filter08(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_maximum_filter09(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_minimum_filter01(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_minimum_filter02(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_minimum_filter03(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_minimum_filter04(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_minimum_filter05(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_minimum_filter05_overlap(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_minimum_filter06(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_minimum_filter07(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_minimum_filter08(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_minimum_filter09(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_prewitt01(self,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_prewitt02(self,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_prewitt03(self,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_prewitt04(self,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_rank01(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_rank02(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_rank03(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_rank04(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_rank05(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_rank06(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_rank06_overlap(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_rank07(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_rank08(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_rank09(self,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_rank10(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_rank11(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_rank12(self,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_rank13(self,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_rank14(self,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_rank15(self,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_sobel01(sel,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_sobel02(self,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_sobel03(self,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_sobel04(self,dtype)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_uniform01(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_uniform01_complex(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_uniform02(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_uniform03(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_uniform04(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_uniform05(self)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_uniform06(self,dtype_array,dtype_output)
scipy.ndimage.tests.test_filters.TestNdimageFilters.test_uniform06_complex(self,dtype_array,dtype_output)
scipy.ndimage.tests.test_filters.TestThreading
scipy.ndimage.tests.test_filters.TestThreading.check_func_serial(self,n,fun,args,out)
scipy.ndimage.tests.test_filters.TestThreading.check_func_thread(self,n,fun,args,out)
scipy.ndimage.tests.test_filters.TestThreading.test_correlate(self)
scipy.ndimage.tests.test_filters.TestThreading.test_correlate1d(self)
scipy.ndimage.tests.test_filters.TestThreading.test_median_filter(self)
scipy.ndimage.tests.test_filters.TestThreading.test_minmax_filter(self)
scipy.ndimage.tests.test_filters.TestThreading.test_uniform_filter1d(self)
scipy.ndimage.tests.test_filters._complex_correlate(array,kernel,real_dtype,convolve=False,mode='reflect',cval=0)
scipy.ndimage.tests.test_filters.sumsq(a,b)
scipy.ndimage.tests.test_filters.test_bad_convolve_and_correlate_origins()
scipy.ndimage.tests.test_filters.test_byte_order_median()
scipy.ndimage.tests.test_filters.test_footprint_all_zeros()
scipy.ndimage.tests.test_filters.test_gaussian_filter()
scipy.ndimage.tests.test_filters.test_gaussian_kernel1d()
scipy.ndimage.tests.test_filters.test_gaussian_radius()
scipy.ndimage.tests.test_filters.test_gaussian_radius_invalid()
scipy.ndimage.tests.test_filters.test_gaussian_truncate()
scipy.ndimage.tests.test_filters.test_gh_5430()
scipy.ndimage.tests.test_filters.test_minmaximum_filter1d()
scipy.ndimage.tests.test_filters.test_multiple_modes()
scipy.ndimage.tests.test_filters.test_multiple_modes_gaussian_gradient_magnitude()
scipy.ndimage.tests.test_filters.test_multiple_modes_gaussian_laplace()
scipy.ndimage.tests.test_filters.test_multiple_modes_laplace()
scipy.ndimage.tests.test_filters.test_multiple_modes_prewitt()
scipy.ndimage.tests.test_filters.test_multiple_modes_sequentially()
scipy.ndimage.tests.test_filters.test_multiple_modes_sobel()
scipy.ndimage.tests.test_filters.test_multiple_modes_uniform()
scipy.ndimage.tests.test_filters.test_orders_gauss()
scipy.ndimage.tests.test_filters.test_rank_filter_noninteger_rank()
scipy.ndimage.tests.test_filters.test_size_footprint_both_set()
scipy.ndimage.tests.test_filters.test_ticket_701()
scipy.ndimage.tests.test_filters.test_uniform_filter1d_roundoff_errors()
scipy.ndimage.tests.test_filters.test_valid_origins()
scipy.ndimage.tests.testsumsq(a,b)
scipy.ndimage.tests.testtest_bad_convolve_and_correlate_origins()
scipy.ndimage.tests.testtest_byte_order_median()
scipy.ndimage.tests.testtest_footprint_all_zeros()
scipy.ndimage.tests.testtest_gaussian_filter()
scipy.ndimage.tests.testtest_gaussian_kernel1d()
scipy.ndimage.tests.testtest_gaussian_radius()
scipy.ndimage.tests.testtest_gaussian_radius_invalid()
scipy.ndimage.tests.testtest_gaussian_truncate()
scipy.ndimage.tests.testtest_gh_5430()
scipy.ndimage.tests.testtest_minmaximum_filter1d()
scipy.ndimage.tests.testtest_multiple_modes()
scipy.ndimage.tests.testtest_multiple_modes_gaussian_gradient_magnitude()
scipy.ndimage.tests.testtest_multiple_modes_gaussian_laplace()
scipy.ndimage.tests.testtest_multiple_modes_laplace()
scipy.ndimage.tests.testtest_multiple_modes_prewitt()
scipy.ndimage.tests.testtest_multiple_modes_sequentially()
scipy.ndimage.tests.testtest_multiple_modes_sobel()
scipy.ndimage.tests.testtest_multiple_modes_uniform()
scipy.ndimage.tests.testtest_orders_gauss()
scipy.ndimage.tests.testtest_rank_filter_noninteger_rank()
scipy.ndimage.tests.testtest_size_footprint_both_set()
scipy.ndimage.tests.testtest_ticket_701()
scipy.ndimage.tests.testtest_uniform_filter1d_roundoff_errors()
scipy.ndimage.tests.testtest_valid_origins()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/tests/test_fourier.py----------------------------------------
A:scipy.ndimage.tests.test_fourier.a->numpy.ones(shape, dtype)
A:scipy.ndimage.tests.test_fourier.expected->numpy.arange(shape[0] * shape[1], dtype=dtype)
A:scipy.ndimage.tests.test_fourier.x->numpy.ones(shape, dtype=type_)
A:scipy.ndimage.tests.test_fourier.b->test_func(a, 3)
scipy.ndimage.tests.testTestNdimageFourier
scipy.ndimage.tests.testTestNdimageFourier.test_fourier_ellipsoid_1d_complex(self)
scipy.ndimage.tests.testTestNdimageFourier.test_fourier_ellipsoid_complex01(self,shape,dtype,dec)
scipy.ndimage.tests.testTestNdimageFourier.test_fourier_ellipsoid_real01(self,shape,dtype,dec)
scipy.ndimage.tests.testTestNdimageFourier.test_fourier_ellipsoid_unimplemented_ndim(self)
scipy.ndimage.tests.testTestNdimageFourier.test_fourier_gaussian_complex01(self,shape,dtype,dec)
scipy.ndimage.tests.testTestNdimageFourier.test_fourier_gaussian_real01(self,shape,dtype,dec)
scipy.ndimage.tests.testTestNdimageFourier.test_fourier_shift_complex01(self,shape,dtype,dec)
scipy.ndimage.tests.testTestNdimageFourier.test_fourier_shift_real01(self,shape,dtype,dec)
scipy.ndimage.tests.testTestNdimageFourier.test_fourier_uniform_complex01(self,shape,dtype,dec)
scipy.ndimage.tests.testTestNdimageFourier.test_fourier_uniform_real01(self,shape,dtype,dec)
scipy.ndimage.tests.testTestNdimageFourier.test_fourier_zero_length_dims(self,shape,dtype,test_func)
scipy.ndimage.tests.test_fourier.TestNdimageFourier
scipy.ndimage.tests.test_fourier.TestNdimageFourier.test_fourier_ellipsoid_1d_complex(self)
scipy.ndimage.tests.test_fourier.TestNdimageFourier.test_fourier_ellipsoid_complex01(self,shape,dtype,dec)
scipy.ndimage.tests.test_fourier.TestNdimageFourier.test_fourier_ellipsoid_real01(self,shape,dtype,dec)
scipy.ndimage.tests.test_fourier.TestNdimageFourier.test_fourier_ellipsoid_unimplemented_ndim(self)
scipy.ndimage.tests.test_fourier.TestNdimageFourier.test_fourier_gaussian_complex01(self,shape,dtype,dec)
scipy.ndimage.tests.test_fourier.TestNdimageFourier.test_fourier_gaussian_real01(self,shape,dtype,dec)
scipy.ndimage.tests.test_fourier.TestNdimageFourier.test_fourier_shift_complex01(self,shape,dtype,dec)
scipy.ndimage.tests.test_fourier.TestNdimageFourier.test_fourier_shift_real01(self,shape,dtype,dec)
scipy.ndimage.tests.test_fourier.TestNdimageFourier.test_fourier_uniform_complex01(self,shape,dtype,dec)
scipy.ndimage.tests.test_fourier.TestNdimageFourier.test_fourier_uniform_real01(self,shape,dtype,dec)
scipy.ndimage.tests.test_fourier.TestNdimageFourier.test_fourier_zero_length_dims(self,shape,dtype,test_func)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/tests/test_interpolation.py----------------------------------------
A:scipy.ndimage.tests.test_interpolation.data->numpy.arange(45, dtype=numpy.float64).reshape((3, 5, 3))
A:scipy.ndimage.tests.test_interpolation.x->numpy.arange(12).reshape((3, 4))
A:scipy.ndimage.tests.test_interpolation.y->scipy.ndimage.map_coordinates(data, [x], order=order, mode=mode)
A:scipy.ndimage.tests.test_interpolation.pad_mode->ndimage_to_numpy_mode.get(mode)
A:scipy.ndimage.tests.test_interpolation.padded->numpy.pad(data, npad, mode=pad_mode)
A:scipy.ndimage.tests.test_interpolation.expected->numpy.array([[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [6.54914793, 7.54914793, 8.54914793], [10.84520162, 11.84520162, 12.84520162], [0.0, 0.0, 0.0]], [[6.19286575, 7.19286575, 8.19286575], [13.4730712, 14.4730712, 15.4730712], [21.0, 22.0, 23.0], [28.5269288, 29.5269288, 30.5269288], [35.80713425, 36.80713425, 37.80713425]], [[0.0, 0.0, 0.0], [31.15479838, 32.15479838, 33.15479838], [35.45085207, 36.45085207, 37.45085207], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]])
A:scipy.ndimage.tests.test_interpolation.out->scipy.ndimage.rotate(data, angle=12, reshape=False)
A:scipy.ndimage.tests.test_interpolation.filtered->scipy.ndimage.spline_filter(data, order=order)
A:scipy.ndimage.tests.test_interpolation.expected_result->numpy.array([[0.25, 0.75, 1.25], [1.25, 3.0, 4.0]])
A:scipy.ndimage.tests.test_interpolation.xp->numpy.pad(x, npad, mode=pad_mode)
A:scipy.ndimage.tests.test_interpolation.center_slice->tuple([slice(npad, -npad)] * x.ndim)
A:scipy.ndimage.tests.test_interpolation.returned->scipy.ndimage.affine_transform(data, [[1]], output=out)
A:scipy.ndimage.tests.test_interpolation.idx->numpy.indices(data.shape)
A:scipy.ndimage.tests.test_interpolation.out1->scipy.ndimage.zoom(arr, (2, 1))
A:scipy.ndimage.tests.test_interpolation.out2->scipy.ndimage.zoom(arr, (1, 2))
A:scipy.ndimage.tests.test_interpolation.a->numpy.tile(numpy.arange(5), (5, 1))
A:scipy.ndimage.tests.test_interpolation.tform_original->numpy.eye(2)
A:scipy.ndimage.tests.test_interpolation.tform_h1->numpy.hstack((numpy.eye(2), -numpy.ones((2, 1))))
A:scipy.ndimage.tests.test_interpolation.tform_h2->numpy.vstack((tform_h1, [[5, 2, 1]]))
A:scipy.ndimage.tests.test_interpolation.out3->scipy.ndimage.affine_transform(filtered, tform_h2, order=order, prefilter=False)
A:scipy.ndimage.tests.test_interpolation.affine->numpy.zeros((2, 3))
A:scipy.ndimage.tests.test_interpolation.affine[:2, :2]->numpy.eye(2)
A:scipy.ndimage.tests.test_interpolation.kwargs->dict(mode='nearest', order=order, prefilter=prefilter)
A:scipy.ndimage.tests.test_interpolation.arr->numpy.zeros((3, 11, 25))
A:scipy.ndimage.tests.test_interpolation.ref->numpy.zeros((1, 10, 10))
A:scipy.ndimage.tests.test_interpolation.data[:, :, i]->numpy.array([[0, 0, 0, 0], [0, 1, 1, 0], [0, 0, 0, 0]], dtype=numpy.float64)
A:scipy.ndimage.tests.test_interpolation.b->scipy.ndimage.rotate(ndimage.rotate(a, 180), -180)
scipy.ndimage.tests.testTestNdimageInterpolation
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform01(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform02(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform03(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform04(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform05(self,order,dtype)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform06(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform07(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform08(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform09(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform10(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform11(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform12(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform13(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform14(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform15(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform16(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform17(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform18(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform19(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform20(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform21(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform22(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform23(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform24(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform25(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform26(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform27(self)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform_1d_endianness_with_output_parameter(self)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform_multi_d_endianness_with_output_parameter(self)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform_output_shape(self)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform_shift_reflect(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform_shift_via_grid_wrap(self,shift,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_affine_transform_with_string_output(self)
scipy.ndimage.tests.testTestNdimageInterpolation.test_boundaries(self,mode,expected_value)
scipy.ndimage.tests.testTestNdimageInterpolation.test_boundaries2(self,mode,expected_value)
scipy.ndimage.tests.testTestNdimageInterpolation.test_boundary_spline_accuracy(self,mode,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform01(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform02(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform03(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform04(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform05(self,order,dtype)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform06(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform07(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform08(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform10(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform13(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform14(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform15(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform16(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform17(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform18(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform19(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform20(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform21(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform22(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform23(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform24(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform_endianness_with_output_parameter(self)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform_grid_constant_order1(self)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform_vs_padded(self,order,mode)
scipy.ndimage.tests.testTestNdimageInterpolation.test_geometric_transform_with_string_output(self)
scipy.ndimage.tests.testTestNdimageInterpolation.test_map_coordinates01(self,order,dtype)
scipy.ndimage.tests.testTestNdimageInterpolation.test_map_coordinates02(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_map_coordinates03(self)
scipy.ndimage.tests.testTestNdimageInterpolation.test_map_coordinates_endianness_with_output_parameter(self)
scipy.ndimage.tests.testTestNdimageInterpolation.test_map_coordinates_large_data(self)
scipy.ndimage.tests.testTestNdimageInterpolation.test_map_coordinates_with_string_output(self)
scipy.ndimage.tests.testTestNdimageInterpolation.test_rotate01(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_rotate02(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_rotate03(self,order,dtype)
scipy.ndimage.tests.testTestNdimageInterpolation.test_rotate04(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_rotate05(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_rotate06(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_rotate07(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_rotate08(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_rotate09(self)
scipy.ndimage.tests.testTestNdimageInterpolation.test_rotate10(self)
scipy.ndimage.tests.testTestNdimageInterpolation.test_rotate_exact_180(self)
scipy.ndimage.tests.testTestNdimageInterpolation.test_shift01(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_shift02(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_shift03(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_shift04(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_shift05(self,order,dtype)
scipy.ndimage.tests.testTestNdimageInterpolation.test_shift06(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_shift07(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_shift08(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_shift09(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_shift_grid_constant1(self,shift,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_shift_grid_constant_order1(self)
scipy.ndimage.tests.testTestNdimageInterpolation.test_shift_grid_wrap(self,shift,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_shift_nearest_boundary(self,order,prefilter)
scipy.ndimage.tests.testTestNdimageInterpolation.test_shift_reflect(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_shift_vs_padded(self,order,mode)
scipy.ndimage.tests.testTestNdimageInterpolation.test_shift_with_nonzero_cval(self,order,mode,dtype)
scipy.ndimage.tests.testTestNdimageInterpolation.test_spline01(self,dtype,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_spline02(self,dtype,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_spline03(self,dtype,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_spline04(self,dtype,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_spline05(self,dtype,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_zoom1(self,order)
scipy.ndimage.tests.testTestNdimageInterpolation.test_zoom2(self)
scipy.ndimage.tests.testTestNdimageInterpolation.test_zoom3(self)
scipy.ndimage.tests.testTestNdimageInterpolation.test_zoom_affine01(self,order,dtype)
scipy.ndimage.tests.testTestNdimageInterpolation.test_zoom_by_int_order0(self,zoom,mode)
scipy.ndimage.tests.testTestNdimageInterpolation.test_zoom_grid_by_int_order0(self,shape,zoom,mode)
scipy.ndimage.tests.testTestNdimageInterpolation.test_zoom_grid_mode_warnings(self,mode)
scipy.ndimage.tests.testTestNdimageInterpolation.test_zoom_infinity(self)
scipy.ndimage.tests.testTestNdimageInterpolation.test_zoom_output_shape_roundoff(self)
scipy.ndimage.tests.testTestNdimageInterpolation.test_zoom_zoomfactor_one(self)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform01(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform02(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform03(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform04(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform05(self,order,dtype)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform06(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform07(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform08(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform09(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform10(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform11(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform12(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform13(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform14(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform15(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform16(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform17(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform18(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform19(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform20(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform21(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform22(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform23(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform24(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform25(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform26(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform27(self)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform_1d_endianness_with_output_parameter(self)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform_multi_d_endianness_with_output_parameter(self)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform_output_shape(self)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform_shift_reflect(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform_shift_via_grid_wrap(self,shift,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_affine_transform_with_string_output(self)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_boundaries(self,mode,expected_value)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_boundaries2(self,mode,expected_value)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_boundary_spline_accuracy(self,mode,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform01(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform02(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform03(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform04(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform05(self,order,dtype)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform06(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform07(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform08(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform10(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform13(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform14(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform15(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform16(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform17(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform18(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform19(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform20(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform21(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform22(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform23(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform24(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform_endianness_with_output_parameter(self)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform_grid_constant_order1(self)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform_vs_padded(self,order,mode)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_geometric_transform_with_string_output(self)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_map_coordinates01(self,order,dtype)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_map_coordinates02(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_map_coordinates03(self)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_map_coordinates_endianness_with_output_parameter(self)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_map_coordinates_large_data(self)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_map_coordinates_with_string_output(self)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_rotate01(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_rotate02(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_rotate03(self,order,dtype)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_rotate04(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_rotate05(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_rotate06(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_rotate07(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_rotate08(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_rotate09(self)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_rotate10(self)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_rotate_exact_180(self)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_shift01(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_shift02(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_shift03(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_shift04(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_shift05(self,order,dtype)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_shift06(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_shift07(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_shift08(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_shift09(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_shift_grid_constant1(self,shift,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_shift_grid_constant_order1(self)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_shift_grid_wrap(self,shift,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_shift_nearest_boundary(self,order,prefilter)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_shift_reflect(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_shift_vs_padded(self,order,mode)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_shift_with_nonzero_cval(self,order,mode,dtype)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_spline01(self,dtype,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_spline02(self,dtype,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_spline03(self,dtype,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_spline04(self,dtype,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_spline05(self,dtype,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_zoom1(self,order)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_zoom2(self)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_zoom3(self)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_zoom_affine01(self,order,dtype)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_zoom_by_int_order0(self,zoom,mode)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_zoom_grid_by_int_order0(self,shape,zoom,mode)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_zoom_grid_mode_warnings(self,mode)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_zoom_infinity(self)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_zoom_output_shape_roundoff(self)
scipy.ndimage.tests.test_interpolation.TestNdimageInterpolation.test_zoom_zoomfactor_one(self)
scipy.ndimage.tests.test_interpolation.test_zoom_output_shape()
scipy.ndimage.tests.testtest_zoom_output_shape()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/tests/test_morphology.py----------------------------------------
A:scipy.ndimage.tests.test_morphology.data->numpy.random.RandomState(123).randint(low=0, high=2, size=100).astype(bool)
A:scipy.ndimage.tests.test_morphology.(out, ft)->scipy.ndimage.distance_transform_edt(data, return_indices=True)
A:scipy.ndimage.tests.test_morphology.(tdt, tft)->scipy.ndimage.distance_transform_edt(data, return_indices=True)
A:scipy.ndimage.tests.test_morphology.dt->numpy.zeros(data.shape, dtype=numpy.float64)
A:scipy.ndimage.tests.test_morphology.ft->numpy.indices(data.shape, dtype=numpy.int32)
A:scipy.ndimage.tests.test_morphology.(dt, ft)->scipy.ndimage.distance_transform_edt(data, return_indices=True)
A:scipy.ndimage.tests.test_morphology.bf->scipy.ndimage.distance_transform_bf(data, 'euclidean')
A:scipy.ndimage.tests.test_morphology.indices_out->numpy.zeros((data.ndim,) + data.shape, dtype=numpy.int32)
A:scipy.ndimage.tests.test_morphology.ref->scipy.ndimage.distance_transform_bf(data, 'euclidean', sampling=[2, 1])
A:scipy.ndimage.tests.test_morphology.out->scipy.ndimage.binary_hit_or_miss(data, struct1, struct2)
A:scipy.ndimage.tests.test_morphology.distances_out->numpy.zeros(data.shape, dtype=numpy.float64)
A:scipy.ndimage.tests.test_morphology.struct->scipy.ndimage.generate_binary_structure(2, 2)
A:scipy.ndimage.tests.test_morphology.expected->scipy.ndimage.binary_hit_or_miss(data)
A:scipy.ndimage.tests.test_morphology.tmp->scipy.ndimage.grey_closing(array, footprint=footprint, structure=structure)
A:scipy.ndimage.tests.test_morphology.a->numpy.zeros((5, 5), dtype=bool)
A:scipy.ndimage.tests.test_morphology.b->numpy.zeros_like(a)
A:scipy.ndimage.tests.test_morphology._->scipy.ndimage.binary_erosion(data, iterations=iterations)
A:scipy.ndimage.tests.test_morphology.iterations->numpy.int64(3)
A:scipy.ndimage.tests.test_morphology.mask->numpy.array([[0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], bool)
A:scipy.ndimage.tests.test_morphology.array->numpy.eye(5, dtype=numpy.bool_)
A:scipy.ndimage.tests.test_morphology.output->numpy.empty_like(array, dtype=numpy.float64)
A:scipy.ndimage.tests.test_morphology.tmp1->scipy.ndimage.grey_dilation(array, footprint=footprint, structure=structure)
A:scipy.ndimage.tests.test_morphology.tmp2->scipy.ndimage.grey_erosion(array, footprint=footprint, structure=structure)
A:scipy.ndimage.tests.test_morphology.structure->numpy.ones((3, 3), dtype=numpy.bool_)
A:scipy.ndimage.tests.test_morphology.self.array->numpy.array([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 1, 1, 0], [0, 0, 0, 0, 0]], dtype=numpy.uint8)
A:scipy.ndimage.tests.test_morphology.self.sq3x3->numpy.ones((3, 3))
A:scipy.ndimage.tests.test_morphology.dilated3x3->scipy.ndimage.binary_dilation(self.array, structure=self.sq3x3)
A:scipy.ndimage.tests.test_morphology.self.dilated3x3->scipy.ndimage.binary_dilation(self.array, structure=self.sq3x3).view(numpy.uint8)
A:scipy.ndimage.tests.test_morphology.result->scipy.ndimage.grey_dilation(self.array, size=3)
A:scipy.ndimage.tests.test_morphology.self.opened_old->scipy.ndimage.binary_opening(self.array, self.sq3x3, 1, None, 0)
A:scipy.ndimage.tests.test_morphology.self.closed_old->scipy.ndimage.binary_closing(self.array, self.sq3x3, 1, None, 0)
A:scipy.ndimage.tests.test_morphology.opened_new->scipy.ndimage.binary_opening(self.array, self.sq3x3, 1, None, 0, None, 0, False)
A:scipy.ndimage.tests.test_morphology.closed_new->scipy.ndimage.binary_closing(self.array, self.sq3x3, 1, None, 0, None, 0, False)
A:scipy.ndimage.tests.test_morphology.rstate->numpy.random.RandomState(123)
A:scipy.ndimage.tests.test_morphology.ndi_func->getattr(ndimage, function)
A:scipy.ndimage.tests.test_morphology.data_orig->numpy.random.RandomState(123).randint(low=0, high=2, size=100).astype(bool).copy()
scipy.ndimage.tests.testTestBinaryOpeningClosing
scipy.ndimage.tests.testTestBinaryOpeningClosing.setup_method(self)
scipy.ndimage.tests.testTestBinaryOpeningClosing.test_closing_new_arguments(self)
scipy.ndimage.tests.testTestBinaryOpeningClosing.test_opening_new_arguments(self)
scipy.ndimage.tests.testTestDilateFix
scipy.ndimage.tests.testTestDilateFix.setup_method(self)
scipy.ndimage.tests.testTestDilateFix.test_dilation_scalar_size(self)
scipy.ndimage.tests.testTestDilateFix.test_dilation_square_structure(self)
scipy.ndimage.tests.testTestNdimageMorphology
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_closing01(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_closing02(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation01(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation02(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation03(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation04(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation05(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation06(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation07(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation08(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation09(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation10(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation11(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation12(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation13(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation14(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation15(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation16(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation17(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation18(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation19(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation20(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation21(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation22(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation23(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation24(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation25(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation26(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation27(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation28(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation29(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation30(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation31(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation32(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation33(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation34(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_dilation35(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion01(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion02(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion03(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion04(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion05(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion06(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion07(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion08(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion09(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion10(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion11(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion12(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion13(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion14(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion15(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion16(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion17(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion18(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion19(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion20(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion21(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion22(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion23(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion24(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion25(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion26(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion27(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion28(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion29(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion30(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion31(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion32(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion33(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion34(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion35(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion36(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion37(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion38(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion39(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_erosion40(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_fill_holes01(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_fill_holes02(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_fill_holes03(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_opening01(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_opening02(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_propagation01(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_binary_propagation02(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_black_tophat01(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_black_tophat02(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_black_tophat03(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_black_tophat04(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_distance_transform_bf01(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_distance_transform_bf02(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_distance_transform_bf03(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_distance_transform_bf04(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_distance_transform_bf05(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_distance_transform_bf06(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_distance_transform_bf07(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_distance_transform_cdt01(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_distance_transform_cdt02(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_distance_transform_cdt03(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_distance_transform_cdt04(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_distance_transform_edt01(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_distance_transform_edt02(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_distance_transform_edt03(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_distance_transform_edt4(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_distance_transform_edt5(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_distance_transform_edt6(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_generate_structure01(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_generate_structure02(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_generate_structure03(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_generate_structure04(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_grey_closing01(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_grey_closing02(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_grey_dilation01(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_grey_dilation02(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_grey_dilation03(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_grey_erosion01(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_grey_erosion01_overlap(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_grey_erosion02(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_grey_erosion03(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_grey_opening01(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_grey_opening02(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_hit_or_miss01(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_hit_or_miss02(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_hit_or_miss03(self,dtype)
scipy.ndimage.tests.testTestNdimageMorphology.test_iterate_structure01(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_iterate_structure02(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_iterate_structure03(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_morphological_gradient01(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_morphological_gradient02(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_morphological_laplace01(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_morphological_laplace02(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_white_tophat01(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_white_tophat02(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_white_tophat03(self)
scipy.ndimage.tests.testTestNdimageMorphology.test_white_tophat04(self)
scipy.ndimage.tests.test_morphology.TestBinaryOpeningClosing
scipy.ndimage.tests.test_morphology.TestBinaryOpeningClosing.setup_method(self)
scipy.ndimage.tests.test_morphology.TestBinaryOpeningClosing.test_closing_new_arguments(self)
scipy.ndimage.tests.test_morphology.TestBinaryOpeningClosing.test_opening_new_arguments(self)
scipy.ndimage.tests.test_morphology.TestDilateFix
scipy.ndimage.tests.test_morphology.TestDilateFix.setup_method(self)
scipy.ndimage.tests.test_morphology.TestDilateFix.test_dilation_scalar_size(self)
scipy.ndimage.tests.test_morphology.TestDilateFix.test_dilation_square_structure(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_closing01(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_closing02(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation01(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation02(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation03(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation04(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation05(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation06(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation07(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation08(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation09(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation10(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation11(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation12(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation13(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation14(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation15(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation16(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation17(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation18(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation19(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation20(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation21(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation22(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation23(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation24(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation25(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation26(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation27(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation28(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation29(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation30(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation31(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation32(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation33(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation34(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_dilation35(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion01(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion02(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion03(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion04(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion05(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion06(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion07(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion08(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion09(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion10(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion11(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion12(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion13(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion14(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion15(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion16(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion17(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion18(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion19(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion20(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion21(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion22(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion23(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion24(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion25(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion26(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion27(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion28(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion29(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion30(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion31(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion32(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion33(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion34(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion35(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion36(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion37(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion38(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion39(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_erosion40(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_fill_holes01(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_fill_holes02(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_fill_holes03(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_opening01(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_opening02(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_propagation01(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_binary_propagation02(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_black_tophat01(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_black_tophat02(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_black_tophat03(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_black_tophat04(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_distance_transform_bf01(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_distance_transform_bf02(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_distance_transform_bf03(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_distance_transform_bf04(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_distance_transform_bf05(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_distance_transform_bf06(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_distance_transform_bf07(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_distance_transform_cdt01(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_distance_transform_cdt02(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_distance_transform_cdt03(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_distance_transform_cdt04(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_distance_transform_edt01(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_distance_transform_edt02(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_distance_transform_edt03(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_distance_transform_edt4(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_distance_transform_edt5(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_distance_transform_edt6(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_generate_structure01(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_generate_structure02(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_generate_structure03(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_generate_structure04(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_grey_closing01(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_grey_closing02(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_grey_dilation01(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_grey_dilation02(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_grey_dilation03(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_grey_erosion01(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_grey_erosion01_overlap(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_grey_erosion02(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_grey_erosion03(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_grey_opening01(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_grey_opening02(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_hit_or_miss01(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_hit_or_miss02(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_hit_or_miss03(self,dtype)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_iterate_structure01(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_iterate_structure02(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_iterate_structure03(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_morphological_gradient01(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_morphological_gradient02(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_morphological_laplace01(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_morphological_laplace02(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_white_tophat01(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_white_tophat02(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_white_tophat03(self)
scipy.ndimage.tests.test_morphology.TestNdimageMorphology.test_white_tophat04(self)
scipy.ndimage.tests.test_morphology.test_binary_closing_noninteger_brute_force_passes_when_true()
scipy.ndimage.tests.test_morphology.test_binary_closing_noninteger_iterations()
scipy.ndimage.tests.test_morphology.test_binary_dilation_noninteger_iterations()
scipy.ndimage.tests.test_morphology.test_binary_erosion_noninteger_iterations()
scipy.ndimage.tests.test_morphology.test_binary_hit_or_miss_input_as_output()
scipy.ndimage.tests.test_morphology.test_binary_input_as_output(function,iterations,brute_force)
scipy.ndimage.tests.test_morphology.test_binary_opening_noninteger_iterations()
scipy.ndimage.tests.testtest_binary_closing_noninteger_brute_force_passes_when_true()
scipy.ndimage.tests.testtest_binary_closing_noninteger_iterations()
scipy.ndimage.tests.testtest_binary_dilation_noninteger_iterations()
scipy.ndimage.tests.testtest_binary_erosion_noninteger_iterations()
scipy.ndimage.tests.testtest_binary_hit_or_miss_input_as_output()
scipy.ndimage.tests.testtest_binary_input_as_output(function,iterations,brute_force)
scipy.ndimage.tests.testtest_binary_opening_noninteger_iterations()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/tests/test_datatypes.py----------------------------------------
A:scipy.ndimage.tests.test_datatypes.data->numpy.array([[4, 1, 3, 2], [7, 6, 8, 5], [3, 5, 3, 6]])
A:scipy.ndimage.tests.test_datatypes.shifted_data->numpy.array([[0, 0, 0, 0], [0, 4, 1, 3], [0, 7, 6, 8]])
A:scipy.ndimage.tests.test_datatypes.idx->numpy.indices(data.shape)
A:scipy.ndimage.tests.test_datatypes.these_data->numpy.array([[4, 1, 3, 2], [7, 6, 8, 5], [3, 5, 3, 6]]).astype(data_dt)
A:scipy.ndimage.tests.test_datatypes.mat->numpy.eye(2, dtype=coord_dt)
A:scipy.ndimage.tests.test_datatypes.off->numpy.zeros((2,), dtype=coord_dt)
A:scipy.ndimage.tests.test_datatypes.out->scipy.ndimage.zoom(these_data, 1)
A:scipy.ndimage.tests.test_datatypes.arr->numpy.array([big, big, big], dtype=np.uint64)
A:scipy.ndimage.tests.test_datatypes.x->scipy.ndimage.shift(arr, 0.1)
scipy.ndimage.tests.test_datatypes.test_map_coordinates_dts()
scipy.ndimage.tests.test_datatypes.test_uint64_max()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/tests/test_splines.py----------------------------------------
A:scipy.ndimage.tests.test_splines.knot_values->get_spline_knot_values(order)
A:scipy.ndimage.tests.test_splines.matrix->make_spline_knot_matrix(n, order, mode=mode)
A:scipy.ndimage.tests.test_splines.indices->numpy.arange(diag, n)
A:scipy.ndimage.tests.test_splines.eye->numpy.eye(n, dtype=float)
A:scipy.ndimage.tests.test_splines.spline_filter_axis_0->scipy.ndimage.spline_filter1d(eye, axis=0, order=order, mode=mode)
A:scipy.ndimage.tests.test_splines.spline_filter_axis_1->scipy.ndimage.spline_filter1d(eye, axis=1, order=order, mode=mode)
scipy.ndimage.tests.test_splines.get_spline_knot_values(order)
scipy.ndimage.tests.test_splines.make_spline_knot_matrix(n,order,mode='mirror')
scipy.ndimage.tests.test_splines.test_spline_filter_vs_matrix_solution(order,mode)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/tests/test_c_api.py----------------------------------------
A:scipy.ndimage.tests.test_c_api.im->numpy.arange(12).reshape(4, 3).astype(np.float64)
A:scipy.ndimage.tests.test_c_api.footprint->numpy.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])
A:scipy.ndimage.tests.test_c_api.footprint_size->numpy.count_nonzero(footprint)
A:scipy.ndimage.tests.test_c_api.res->scipy.ndimage.geometric_transform(im, func(shift))
A:scipy.ndimage.tests.test_c_api.std->scipy.ndimage.geometric_transform(im, transform, extra_arguments=(shift,))
scipy.ndimage.tests.test_c_api.test_generic_filter()
scipy.ndimage.tests.test_c_api.test_generic_filter1d()
scipy.ndimage.tests.test_c_api.test_geometric_transform()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/ndimage/tests/test_measurements.py----------------------------------------
A:scipy.ndimage.tests.test_measurements.x->numpy.array([-3, -2, -1])
A:scipy.ndimage.tests.test_measurements.labels->numpy.array([[1, 2], [2, 3]])
A:scipy.ndimage.tests.test_measurements.(counts, sums)->scipy.ndimage._measurements._stats(x, labels=labels, index=index)
A:scipy.ndimage.tests.test_measurements.(counts, sums, centers)->scipy.ndimage._measurements._stats(x, labels=labels, index=index, centered=True)
A:scipy.ndimage.tests.test_measurements.result->scipy.ndimage._measurements._select(x, labels=labels, index=index, find_max=True, find_max_positions=True)
A:scipy.ndimage.tests.test_measurements.data->numpy.array([[256, 0], [0, 0]], np.uint16)
A:scipy.ndimage.tests.test_measurements.(out, n)->scipy.ndimage.label(data)
A:scipy.ndimage.tests.test_measurements.struct->scipy.ndimage.generate_binary_structure(2, 2)
A:scipy.ndimage.tests.test_measurements.n->scipy.ndimage.label(data, output=output)
A:scipy.ndimage.tests.test_measurements.output->scipy.ndimage.histogram(input, 0, 4, 5, labels, (1, 2))
A:scipy.ndimage.tests.test_measurements.(output, n)->scipy.ndimage.label(data, output=t)
A:scipy.ndimage.tests.test_measurements.strels->strels.reshape((-1, 3, 3)).reshape((-1, 3, 3))
A:scipy.ndimage.tests.test_measurements.results->results.reshape((-1, 7, 7)).reshape((-1, 7, 7))
A:scipy.ndimage.tests.test_measurements.rank->len(mask.shape)
A:scipy.ndimage.tests.test_measurements.(la, co)->scipy.ndimage.label(mask, ndimage.generate_binary_structure(rank, rank))
A:scipy.ndimage.tests.test_measurements._->scipy.ndimage.find_objects(la)
A:scipy.ndimage.tests.test_measurements.a->numpy.array([[5, 6, 0, 0, 0], [8, 9, 0, 0, 0], [0, 0, 0, 3, 5]])
A:scipy.ndimage.tests.test_measurements.d->numpy.zeros((60, 320))
A:scipy.ndimage.tests.test_measurements.test_array->numpy.random.rand(10, 10)
A:scipy.ndimage.tests.test_measurements.(label, no_features)->scipy.ndimage.label(test_array > 0.5)
A:scipy.ndimage.tests.test_measurements.out->scipy.ndimage.watershed_ift(data, markers)
A:scipy.ndimage.tests.test_measurements.vi->scipy.ndimage.value_indices(a)
A:scipy.ndimage.tests.test_measurements.truevi[k]->numpy.where(data == k)
A:scipy.ndimage.tests.test_measurements.trueKeys->numpy.unique(a)
A:scipy.ndimage.tests.test_measurements.trueNdx->numpy.where(a == k)
A:scipy.ndimage.tests.test_measurements.input->numpy.array([1, 1, 3, 4, 3, 5, 3, 3])
A:scipy.ndimage.tests.test_measurements.output_sum->scipy.ndimage.sum(input, labels=labels, index=[4, 8, 2])
A:scipy.ndimage.tests.test_measurements.output_labels->scipy.ndimage.sum_labels(input, labels=labels, index=[4, 8, 2])
A:scipy.ndimage.tests.test_measurements.output1->scipy.ndimage.extrema(input, labels, [1, 2])
A:scipy.ndimage.tests.test_measurements.output2->scipy.ndimage.minimum(input, labels, [1, 2])
A:scipy.ndimage.tests.test_measurements.output3->scipy.ndimage.maximum(input, labels, [1, 2])
A:scipy.ndimage.tests.test_measurements.output4->scipy.ndimage.minimum_position(input, labels, [1, 2])
A:scipy.ndimage.tests.test_measurements.output5->scipy.ndimage.maximum_position(input, labels, [1, 2])
A:scipy.ndimage.tests.test_measurements.expected->numpy.ones(10)
A:scipy.ndimage.tests.test_measurements.lbl->numpy.array([[1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 0, 2, 2]])
A:scipy.ndimage.tests.test_measurements.mean->scipy.ndimage.mean(a, labels=lbl, index=[1, 2])
A:scipy.ndimage.tests.test_measurements.var->scipy.ndimage.variance(a, labels=lbl, index=[1, 2])
A:scipy.ndimage.tests.test_measurements.std->scipy.ndimage.standard_deviation(a, labels=lbl, index=[1, 2])
A:scipy.ndimage.tests.test_measurements.med->scipy.ndimage.median(a, labels=lbl, index=[1, 2])
A:scipy.ndimage.tests.test_measurements.min->scipy.ndimage.minimum(a, labels=lbl, index=[1, 2])
A:scipy.ndimage.tests.test_measurements.max->scipy.ndimage.maximum(a, labels=lbl, index=[1, 2])
A:scipy.ndimage.tests.test_measurements.markers->numpy.array([[1, 0], [0, 0]], np.int8)
A:scipy.ndimage.tests.test_measurements.data[...]->numpy.array([[0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], np.uint8)
scipy.ndimage.tests.testTestWatershedIft
scipy.ndimage.tests.testTestWatershedIft.test_watershed_ift01(self)
scipy.ndimage.tests.testTestWatershedIft.test_watershed_ift02(self)
scipy.ndimage.tests.testTestWatershedIft.test_watershed_ift03(self)
scipy.ndimage.tests.testTestWatershedIft.test_watershed_ift04(self)
scipy.ndimage.tests.testTestWatershedIft.test_watershed_ift05(self)
scipy.ndimage.tests.testTestWatershedIft.test_watershed_ift06(self)
scipy.ndimage.tests.testTestWatershedIft.test_watershed_ift07(self)
scipy.ndimage.tests.testTestWatershedIft.test_watershed_ift08(self)
scipy.ndimage.tests.testTest_measurements_select
scipy.ndimage.tests.testTest_measurements_select.test_basic(self)
scipy.ndimage.tests.testTest_measurements_stats
scipy.ndimage.tests.testTest_measurements_stats.test_a(self)
scipy.ndimage.tests.testTest_measurements_stats.test_a_centered(self)
scipy.ndimage.tests.testTest_measurements_stats.test_b(self)
scipy.ndimage.tests.testTest_measurements_stats.test_b_centered(self)
scipy.ndimage.tests.testTest_measurements_stats.test_nonint_labels(self)
scipy.ndimage.tests.test_measurements.TestWatershedIft
scipy.ndimage.tests.test_measurements.TestWatershedIft.test_watershed_ift01(self)
scipy.ndimage.tests.test_measurements.TestWatershedIft.test_watershed_ift02(self)
scipy.ndimage.tests.test_measurements.TestWatershedIft.test_watershed_ift03(self)
scipy.ndimage.tests.test_measurements.TestWatershedIft.test_watershed_ift04(self)
scipy.ndimage.tests.test_measurements.TestWatershedIft.test_watershed_ift05(self)
scipy.ndimage.tests.test_measurements.TestWatershedIft.test_watershed_ift06(self)
scipy.ndimage.tests.test_measurements.TestWatershedIft.test_watershed_ift07(self)
scipy.ndimage.tests.test_measurements.TestWatershedIft.test_watershed_ift08(self)
scipy.ndimage.tests.test_measurements.Test_measurements_select
scipy.ndimage.tests.test_measurements.Test_measurements_select.test_basic(self)
scipy.ndimage.tests.test_measurements.Test_measurements_stats
scipy.ndimage.tests.test_measurements.Test_measurements_stats.test_a(self)
scipy.ndimage.tests.test_measurements.Test_measurements_stats.test_a_centered(self)
scipy.ndimage.tests.test_measurements.Test_measurements_stats.test_b(self)
scipy.ndimage.tests.test_measurements.Test_measurements_stats.test_b_centered(self)
scipy.ndimage.tests.test_measurements.Test_measurements_stats.test_nonint_labels(self)
scipy.ndimage.tests.test_measurements.test_center_of_mass01()
scipy.ndimage.tests.test_measurements.test_center_of_mass02()
scipy.ndimage.tests.test_measurements.test_center_of_mass03()
scipy.ndimage.tests.test_measurements.test_center_of_mass04()
scipy.ndimage.tests.test_measurements.test_center_of_mass05()
scipy.ndimage.tests.test_measurements.test_center_of_mass06()
scipy.ndimage.tests.test_measurements.test_center_of_mass07()
scipy.ndimage.tests.test_measurements.test_center_of_mass08()
scipy.ndimage.tests.test_measurements.test_center_of_mass09()
scipy.ndimage.tests.test_measurements.test_extrema01()
scipy.ndimage.tests.test_measurements.test_extrema02()
scipy.ndimage.tests.test_measurements.test_extrema03()
scipy.ndimage.tests.test_measurements.test_extrema04()
scipy.ndimage.tests.test_measurements.test_find_objects01()
scipy.ndimage.tests.test_measurements.test_find_objects02()
scipy.ndimage.tests.test_measurements.test_find_objects03()
scipy.ndimage.tests.test_measurements.test_find_objects04()
scipy.ndimage.tests.test_measurements.test_find_objects05()
scipy.ndimage.tests.test_measurements.test_find_objects06()
scipy.ndimage.tests.test_measurements.test_find_objects07()
scipy.ndimage.tests.test_measurements.test_find_objects08()
scipy.ndimage.tests.test_measurements.test_find_objects09()
scipy.ndimage.tests.test_measurements.test_gh_issue_3025()
scipy.ndimage.tests.test_measurements.test_histogram01()
scipy.ndimage.tests.test_measurements.test_histogram02()
scipy.ndimage.tests.test_measurements.test_histogram03()
scipy.ndimage.tests.test_measurements.test_label01()
scipy.ndimage.tests.test_measurements.test_label02()
scipy.ndimage.tests.test_measurements.test_label03()
scipy.ndimage.tests.test_measurements.test_label04()
scipy.ndimage.tests.test_measurements.test_label05()
scipy.ndimage.tests.test_measurements.test_label06()
scipy.ndimage.tests.test_measurements.test_label07()
scipy.ndimage.tests.test_measurements.test_label08()
scipy.ndimage.tests.test_measurements.test_label09()
scipy.ndimage.tests.test_measurements.test_label10()
scipy.ndimage.tests.test_measurements.test_label11()
scipy.ndimage.tests.test_measurements.test_label11_inplace()
scipy.ndimage.tests.test_measurements.test_label12()
scipy.ndimage.tests.test_measurements.test_label13()
scipy.ndimage.tests.test_measurements.test_label_default_dtype()
scipy.ndimage.tests.test_measurements.test_label_output_dtype()
scipy.ndimage.tests.test_measurements.test_label_output_typed()
scipy.ndimage.tests.test_measurements.test_label_output_wrong_size()
scipy.ndimage.tests.test_measurements.test_label_structuring_elements()
scipy.ndimage.tests.test_measurements.test_maximum01()
scipy.ndimage.tests.test_measurements.test_maximum02()
scipy.ndimage.tests.test_measurements.test_maximum03()
scipy.ndimage.tests.test_measurements.test_maximum04()
scipy.ndimage.tests.test_measurements.test_maximum05()
scipy.ndimage.tests.test_measurements.test_maximum_position01()
scipy.ndimage.tests.test_measurements.test_maximum_position02()
scipy.ndimage.tests.test_measurements.test_maximum_position03()
scipy.ndimage.tests.test_measurements.test_maximum_position04()
scipy.ndimage.tests.test_measurements.test_maximum_position05()
scipy.ndimage.tests.test_measurements.test_maximum_position06()
scipy.ndimage.tests.test_measurements.test_maximum_position07()
scipy.ndimage.tests.test_measurements.test_mean01()
scipy.ndimage.tests.test_measurements.test_mean02()
scipy.ndimage.tests.test_measurements.test_mean03()
scipy.ndimage.tests.test_measurements.test_mean04()
scipy.ndimage.tests.test_measurements.test_median01()
scipy.ndimage.tests.test_measurements.test_median02()
scipy.ndimage.tests.test_measurements.test_median03()
scipy.ndimage.tests.test_measurements.test_median_gh12836_bool()
scipy.ndimage.tests.test_measurements.test_median_no_int_overflow()
scipy.ndimage.tests.test_measurements.test_minimum01()
scipy.ndimage.tests.test_measurements.test_minimum02()
scipy.ndimage.tests.test_measurements.test_minimum03()
scipy.ndimage.tests.test_measurements.test_minimum04()
scipy.ndimage.tests.test_measurements.test_minimum_position01()
scipy.ndimage.tests.test_measurements.test_minimum_position02()
scipy.ndimage.tests.test_measurements.test_minimum_position03()
scipy.ndimage.tests.test_measurements.test_minimum_position04()
scipy.ndimage.tests.test_measurements.test_minimum_position05()
scipy.ndimage.tests.test_measurements.test_minimum_position06()
scipy.ndimage.tests.test_measurements.test_minimum_position07()
scipy.ndimage.tests.test_measurements.test_standard_deviation01()
scipy.ndimage.tests.test_measurements.test_standard_deviation02()
scipy.ndimage.tests.test_measurements.test_standard_deviation03()
scipy.ndimage.tests.test_measurements.test_standard_deviation04()
scipy.ndimage.tests.test_measurements.test_standard_deviation05()
scipy.ndimage.tests.test_measurements.test_standard_deviation06()
scipy.ndimage.tests.test_measurements.test_standard_deviation07()
scipy.ndimage.tests.test_measurements.test_stat_funcs_2d()
scipy.ndimage.tests.test_measurements.test_sum01()
scipy.ndimage.tests.test_measurements.test_sum02()
scipy.ndimage.tests.test_measurements.test_sum03()
scipy.ndimage.tests.test_measurements.test_sum04()
scipy.ndimage.tests.test_measurements.test_sum05()
scipy.ndimage.tests.test_measurements.test_sum06()
scipy.ndimage.tests.test_measurements.test_sum07()
scipy.ndimage.tests.test_measurements.test_sum08()
scipy.ndimage.tests.test_measurements.test_sum09()
scipy.ndimage.tests.test_measurements.test_sum10()
scipy.ndimage.tests.test_measurements.test_sum11()
scipy.ndimage.tests.test_measurements.test_sum12()
scipy.ndimage.tests.test_measurements.test_sum_labels()
scipy.ndimage.tests.test_measurements.test_ticket_742()
scipy.ndimage.tests.test_measurements.test_value_indices01()
scipy.ndimage.tests.test_measurements.test_value_indices02()
scipy.ndimage.tests.test_measurements.test_value_indices03()
scipy.ndimage.tests.test_measurements.test_variance01()
scipy.ndimage.tests.test_measurements.test_variance02()
scipy.ndimage.tests.test_measurements.test_variance03()
scipy.ndimage.tests.test_measurements.test_variance04()
scipy.ndimage.tests.test_measurements.test_variance05()
scipy.ndimage.tests.test_measurements.test_variance06()
scipy.ndimage.tests.testtest_center_of_mass01()
scipy.ndimage.tests.testtest_center_of_mass02()
scipy.ndimage.tests.testtest_center_of_mass03()
scipy.ndimage.tests.testtest_center_of_mass04()
scipy.ndimage.tests.testtest_center_of_mass05()
scipy.ndimage.tests.testtest_center_of_mass06()
scipy.ndimage.tests.testtest_center_of_mass07()
scipy.ndimage.tests.testtest_center_of_mass08()
scipy.ndimage.tests.testtest_center_of_mass09()
scipy.ndimage.tests.testtest_extrema01()
scipy.ndimage.tests.testtest_extrema02()
scipy.ndimage.tests.testtest_extrema03()
scipy.ndimage.tests.testtest_extrema04()
scipy.ndimage.tests.testtest_find_objects01()
scipy.ndimage.tests.testtest_find_objects02()
scipy.ndimage.tests.testtest_find_objects03()
scipy.ndimage.tests.testtest_find_objects04()
scipy.ndimage.tests.testtest_find_objects05()
scipy.ndimage.tests.testtest_find_objects06()
scipy.ndimage.tests.testtest_find_objects07()
scipy.ndimage.tests.testtest_find_objects08()
scipy.ndimage.tests.testtest_find_objects09()
scipy.ndimage.tests.testtest_gh_issue_3025()
scipy.ndimage.tests.testtest_histogram01()
scipy.ndimage.tests.testtest_histogram02()
scipy.ndimage.tests.testtest_histogram03()
scipy.ndimage.tests.testtest_label01()
scipy.ndimage.tests.testtest_label02()
scipy.ndimage.tests.testtest_label03()
scipy.ndimage.tests.testtest_label04()
scipy.ndimage.tests.testtest_label05()
scipy.ndimage.tests.testtest_label06()
scipy.ndimage.tests.testtest_label07()
scipy.ndimage.tests.testtest_label08()
scipy.ndimage.tests.testtest_label09()
scipy.ndimage.tests.testtest_label10()
scipy.ndimage.tests.testtest_label11()
scipy.ndimage.tests.testtest_label11_inplace()
scipy.ndimage.tests.testtest_label12()
scipy.ndimage.tests.testtest_label13()
scipy.ndimage.tests.testtest_label_default_dtype()
scipy.ndimage.tests.testtest_label_output_dtype()
scipy.ndimage.tests.testtest_label_output_typed()
scipy.ndimage.tests.testtest_label_output_wrong_size()
scipy.ndimage.tests.testtest_label_structuring_elements()
scipy.ndimage.tests.testtest_maximum01()
scipy.ndimage.tests.testtest_maximum02()
scipy.ndimage.tests.testtest_maximum03()
scipy.ndimage.tests.testtest_maximum04()
scipy.ndimage.tests.testtest_maximum05()
scipy.ndimage.tests.testtest_maximum_position01()
scipy.ndimage.tests.testtest_maximum_position02()
scipy.ndimage.tests.testtest_maximum_position03()
scipy.ndimage.tests.testtest_maximum_position04()
scipy.ndimage.tests.testtest_maximum_position05()
scipy.ndimage.tests.testtest_maximum_position06()
scipy.ndimage.tests.testtest_maximum_position07()
scipy.ndimage.tests.testtest_mean01()
scipy.ndimage.tests.testtest_mean02()
scipy.ndimage.tests.testtest_mean03()
scipy.ndimage.tests.testtest_mean04()
scipy.ndimage.tests.testtest_median01()
scipy.ndimage.tests.testtest_median02()
scipy.ndimage.tests.testtest_median03()
scipy.ndimage.tests.testtest_median_gh12836_bool()
scipy.ndimage.tests.testtest_median_no_int_overflow()
scipy.ndimage.tests.testtest_minimum01()
scipy.ndimage.tests.testtest_minimum02()
scipy.ndimage.tests.testtest_minimum03()
scipy.ndimage.tests.testtest_minimum04()
scipy.ndimage.tests.testtest_minimum_position01()
scipy.ndimage.tests.testtest_minimum_position02()
scipy.ndimage.tests.testtest_minimum_position03()
scipy.ndimage.tests.testtest_minimum_position04()
scipy.ndimage.tests.testtest_minimum_position05()
scipy.ndimage.tests.testtest_minimum_position06()
scipy.ndimage.tests.testtest_minimum_position07()
scipy.ndimage.tests.testtest_standard_deviation01()
scipy.ndimage.tests.testtest_standard_deviation02()
scipy.ndimage.tests.testtest_standard_deviation03()
scipy.ndimage.tests.testtest_standard_deviation04()
scipy.ndimage.tests.testtest_standard_deviation05()
scipy.ndimage.tests.testtest_standard_deviation06()
scipy.ndimage.tests.testtest_standard_deviation07()
scipy.ndimage.tests.testtest_stat_funcs_2d()
scipy.ndimage.tests.testtest_sum01()
scipy.ndimage.tests.testtest_sum02()
scipy.ndimage.tests.testtest_sum03()
scipy.ndimage.tests.testtest_sum04()
scipy.ndimage.tests.testtest_sum05()
scipy.ndimage.tests.testtest_sum06()
scipy.ndimage.tests.testtest_sum07()
scipy.ndimage.tests.testtest_sum08()
scipy.ndimage.tests.testtest_sum09()
scipy.ndimage.tests.testtest_sum10()
scipy.ndimage.tests.testtest_sum11()
scipy.ndimage.tests.testtest_sum12()
scipy.ndimage.tests.testtest_sum_labels()
scipy.ndimage.tests.testtest_ticket_742()
scipy.ndimage.tests.testtest_value_indices01()
scipy.ndimage.tests.testtest_value_indices02()
scipy.ndimage.tests.testtest_value_indices03()
scipy.ndimage.tests.testtest_variance01()
scipy.ndimage.tests.testtest_variance02()
scipy.ndimage.tests.testtest_variance03()
scipy.ndimage.tests.testtest_variance04()
scipy.ndimage.tests.testtest_variance05()
scipy.ndimage.tests.testtest_variance06()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/_debug_backends.py----------------------------------------
A:scipy.fft._debug_backends.fn->getattr(np.fft, method.__name__, None)
scipy.fft._debug_backends.EchoBackend
scipy.fft._debug_backends.EchoBackend.__ua_function__(method,args,kwargs)
scipy.fft._debug_backends.NumPyBackend
scipy.fft._debug_backends.NumPyBackend.__ua_function__(method,args,kwargs)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/_basic.py----------------------------------------
A:scipy.fft._basic.kw->kwargs.copy()
scipy.fft._basic._dispatch(func)
scipy.fft._basic._x_replacer(args,kwargs,dispatchables)
scipy.fft._basic.fft(x,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._basic.fft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._basic.fftn(x,s=None,axes=None,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._basic.hfft(x,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._basic.hfft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._basic.hfftn(x,s=None,axes=None,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._basic.ifft(x,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._basic.ifft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._basic.ifftn(x,s=None,axes=None,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._basic.ihfft(x,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._basic.ihfft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._basic.ihfftn(x,s=None,axes=None,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._basic.irfft(x,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._basic.irfft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._basic.irfftn(x,s=None,axes=None,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._basic.rfft(x,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._basic.rfft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._basic.rfftn(x,s=None,axes=None,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft.fft(x,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft.fft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft.fftn(x,s=None,axes=None,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft.hfft(x,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft.hfft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft.hfftn(x,s=None,axes=None,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft.ifft(x,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft.ifft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft.ifftn(x,s=None,axes=None,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft.ihfft(x,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft.ihfft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft.ihfftn(x,s=None,axes=None,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft.irfft(x,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft.irfft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft.irfftn(x,s=None,axes=None,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft.rfft(x,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft.rfft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft.rfftn(x,s=None,axes=None,norm=None,overwrite_x=False,workers=None,*,plan=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/_helper.py----------------------------------------
A:scipy.fft._helper.next_fast_len->update_wrapper(lru_cache()(_helper.good_size), next_fast_len)
scipy.fft._helper._init_nd_shape_and_axes(x,shape,axes)
scipy.fft._helper.next_fast_len(target,real=False)
scipy.fft.next_fast_len(target,real=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/_fftlog_multimethods.py----------------------------------------
scipy.fft._fftlog_multimethods.fht(a,dln,mu,offset=0.0,bias=0.0)
scipy.fft._fftlog_multimethods.ifht(A,dln,mu,offset=0.0,bias=0.0)
scipy.fft.fht(a,dln,mu,offset=0.0,bias=0.0)
scipy.fft.ifht(A,dln,mu,offset=0.0,bias=0.0)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/_backend.py----------------------------------------
A:scipy.fft._backend.fn->getattr(_fftlog, method.__name__, None)
A:scipy.fft._backend.backend->_backend_from_arg(backend)
scipy.fft._backend._ScipyBackend
scipy.fft._backend._ScipyBackend.__ua_function__(method,args,kwargs)
scipy.fft._backend._backend_from_arg(backend)
scipy.fft._backend.register_backend(backend)
scipy.fft._backend.set_backend(backend,coerce=False,only=False)
scipy.fft._backend.set_global_backend(backend,coerce=False,only=False,try_last=False)
scipy.fft._backend.skip_backend(backend)
scipy.fft.register_backend(backend)
scipy.fft.set_backend(backend,coerce=False,only=False)
scipy.fft.set_global_backend(backend,coerce=False,only=False,try_last=False)
scipy.fft.skip_backend(backend)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/__init__.py----------------------------------------
A:scipy.fft.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/_fftlog.py----------------------------------------
A:scipy.fft._fftlog.LN_2->numpy.log(2)
A:scipy.fft._fftlog.j->numpy.arange(n)
A:scipy.fft._fftlog.u->u.copy().copy()
A:scipy.fft._fftlog.A->irfft(A, n, axis=-1)
A:scipy.fft._fftlog.a->_fhtq(A, u, inverse=True)
A:scipy.fft._fftlog.y->numpy.linspace(0, np.pi * (n // 2) / (n * dln), n // 2 + 1)
A:scipy.fft._fftlog.v->numpy.empty(n // 2 + 1, dtype=complex)
A:scipy.fft._fftlog.zp->loggamma(xp + 1j * y)
A:scipy.fft._fftlog.zm->loggamma(xm + 1j * y)
scipy.fft._fftlog._fhtq(a,u,inverse=False)
scipy.fft._fftlog.fht(a,dln,mu,offset=0.0,bias=0.0)
scipy.fft._fftlog.fhtcoeff(n,dln,mu,offset=0.0,bias=0.0)
scipy.fft._fftlog.fhtoffset(dln,mu,initial=0.0,bias=0.0)
scipy.fft._fftlog.ifht(A,dln,mu,offset=0.0,bias=0.0)
scipy.fft.fhtoffset(dln,mu,initial=0.0,bias=0.0)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/_realtransforms.py----------------------------------------
scipy.fft._realtransforms.dct(x,type=2,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,orthogonalize=None)
scipy.fft._realtransforms.dctn(x,type=2,s=None,axes=None,norm=None,overwrite_x=False,workers=None,*,orthogonalize=None)
scipy.fft._realtransforms.dst(x,type=2,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,orthogonalize=None)
scipy.fft._realtransforms.dstn(x,type=2,s=None,axes=None,norm=None,overwrite_x=False,workers=None,orthogonalize=None)
scipy.fft._realtransforms.idct(x,type=2,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,orthogonalize=None)
scipy.fft._realtransforms.idctn(x,type=2,s=None,axes=None,norm=None,overwrite_x=False,workers=None,orthogonalize=None)
scipy.fft._realtransforms.idst(x,type=2,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,orthogonalize=None)
scipy.fft._realtransforms.idstn(x,type=2,s=None,axes=None,norm=None,overwrite_x=False,workers=None,orthogonalize=None)
scipy.fft.dct(x,type=2,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,orthogonalize=None)
scipy.fft.dctn(x,type=2,s=None,axes=None,norm=None,overwrite_x=False,workers=None,*,orthogonalize=None)
scipy.fft.dst(x,type=2,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,orthogonalize=None)
scipy.fft.dstn(x,type=2,s=None,axes=None,norm=None,overwrite_x=False,workers=None,orthogonalize=None)
scipy.fft.idct(x,type=2,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,orthogonalize=None)
scipy.fft.idctn(x,type=2,s=None,axes=None,norm=None,overwrite_x=False,workers=None,orthogonalize=None)
scipy.fft.idst(x,type=2,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,orthogonalize=None)
scipy.fft.idstn(x,type=2,s=None,axes=None,norm=None,overwrite_x=False,workers=None,orthogonalize=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/tests/test_backend.py----------------------------------------
A:scipy.fft.tests.test_backend.x->numpy.arange(20).reshape((10, 2))
A:scipy.fft.tests.test_backend.answer->np_func(x)
A:scipy.fft.tests.test_backend.y->func(x, plan='foo')
scipy.fft.tests.test_backend.test_backend_call(func,np_func,mock)
scipy.fft.tests.test_backend.test_backend_plan(func,mock)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/tests/test_numpy.py----------------------------------------
A:scipy.fft.tests.test_numpy.L->len(x)
A:scipy.fft.tests.test_numpy.xr->random(maxlen)
A:scipy.fft.tests.test_numpy.expect->func(np.ones(100))
A:scipy.fft.tests.test_numpy.x->random(30).astype(dtype)
A:scipy.fft.tests.test_numpy.x_herm->numpy.concatenate((random(1), x, random(1)))
A:scipy.fft.tests.test_numpy.op_tr->op(np.transpose(x, a), s=shape[:2], axes=(0, 1))
A:scipy.fft.tests.test_numpy.tr_op->numpy.transpose(op(x, s=shape[:2], axes=a[:2]), a)
A:scipy.fft.tests.test_numpy.shape->tuple([2 * x.shape[ax] if ax in a[:2] else x.shape[ax] for ax in range(x.ndim)])
A:scipy.fft.tests.test_numpy.x_norm->numpy.linalg.norm(x)
A:scipy.fft.tests.test_numpy.tmp->back(tmp, n=n, norm=norm)
A:scipy.fft.tests.test_numpy.rng->numpy.random.RandomState(42)
A:scipy.fft.tests.test_numpy.X->numpy.ascontiguousarray(X[::-1])
A:scipy.fft.tests.test_numpy.Y->numpy.asfortranarray(X)
A:scipy.fft.tests.test_numpy.X_res->fft(X, axes=ax)
A:scipy.fft.tests.test_numpy.Y_res->fft(Y, axes=ax)
A:scipy.fft.tests.test_numpy.q->queue.Queue()
A:scipy.fft.tests.test_numpy.expected->func(*args)
A:scipy.fft.tests.test_numpy.a->numpy.ones(self.input_shape)
A:scipy.fft.tests.test_numpy.res->p.map(func, [np.ones(100) for _ in range(4)])
A:scipy.fft.tests.test_numpy.(ar, ai)->numpy.random.random((2, 16, 8, 32))
scipy.fft.tests.test_numpy.TestFFT1D
scipy.fft.tests.test_numpy.TestFFT1D.test_all_1d_norm_preserving(self)
scipy.fft.tests.test_numpy.TestFFT1D.test_axes(self,op)
scipy.fft.tests.test_numpy.TestFFT1D.test_axes_subset_with_shape(self,op)
scipy.fft.tests.test_numpy.TestFFT1D.test_dtypes(self,dtype)
scipy.fft.tests.test_numpy.TestFFT1D.test_fft(self)
scipy.fft.tests.test_numpy.TestFFT1D.test_fft2(self)
scipy.fft.tests.test_numpy.TestFFT1D.test_fftn(self)
scipy.fft.tests.test_numpy.TestFFT1D.test_hfft(self)
scipy.fft.tests.test_numpy.TestFFT1D.test_hfft2(self)
scipy.fft.tests.test_numpy.TestFFT1D.test_hfftn(self)
scipy.fft.tests.test_numpy.TestFFT1D.test_identity(self)
scipy.fft.tests.test_numpy.TestFFT1D.test_ifft(self)
scipy.fft.tests.test_numpy.TestFFT1D.test_ifft2(self)
scipy.fft.tests.test_numpy.TestFFT1D.test_ifftn(self)
scipy.fft.tests.test_numpy.TestFFT1D.test_ihfft(self)
scipy.fft.tests.test_numpy.TestFFT1D.test_ihfft2(self)
scipy.fft.tests.test_numpy.TestFFT1D.test_ihfftn(self)
scipy.fft.tests.test_numpy.TestFFT1D.test_irfft(self)
scipy.fft.tests.test_numpy.TestFFT1D.test_irfft2(self)
scipy.fft.tests.test_numpy.TestFFT1D.test_irfftn(self)
scipy.fft.tests.test_numpy.TestFFT1D.test_rfft(self)
scipy.fft.tests.test_numpy.TestFFT1D.test_rfft2(self)
scipy.fft.tests.test_numpy.TestFFT1D.test_rfftn(self)
scipy.fft.tests.test_numpy.TestFFTShift
scipy.fft.tests.test_numpy.TestFFTShift.test_fft_n(self)
scipy.fft.tests.test_numpy.TestFFTThreadSafe
scipy.fft.tests.test_numpy.TestFFTThreadSafe._test_mtsame(self,func,*args)
scipy.fft.tests.test_numpy.TestFFTThreadSafe.test_fft(self)
scipy.fft.tests.test_numpy.TestFFTThreadSafe.test_hfft(self)
scipy.fft.tests.test_numpy.TestFFTThreadSafe.test_ifft(self)
scipy.fft.tests.test_numpy.TestFFTThreadSafe.test_ihfft(self)
scipy.fft.tests.test_numpy.TestFFTThreadSafe.test_irfft(self)
scipy.fft.tests.test_numpy.TestFFTThreadSafe.test_rfft(self)
scipy.fft.tests.test_numpy.TestIRFFTN
scipy.fft.tests.test_numpy.TestIRFFTN.test_not_last_axis_success(self)
scipy.fft.tests.test_numpy.fft1(x)
scipy.fft.tests.test_numpy.test_fft_with_order(dtype,order,fft)
scipy.fft.tests.test_numpy.test_multiprocess(func)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/tests/test_fftlog.py----------------------------------------
A:scipy.fft.tests.test_fftlog.r->numpy.logspace(-2, 2, n)
A:scipy.fft.tests.test_fftlog.dln->numpy.log(r[1] / r[0])
A:scipy.fft.tests.test_fftlog.a->numpy.random.RandomState(3491349965).standard_normal(64)
A:scipy.fft.tests.test_fftlog.ours->fht(a, dln, mu, offset=offset, bias=bias)
A:scipy.fft.tests.test_fftlog.offset->fhtoffset(dln, mu, initial=0.0, bias=gamma)
A:scipy.fft.tests.test_fftlog.rng->numpy.random.RandomState(3491349965)
A:scipy.fft.tests.test_fftlog.mu->numpy.random.RandomState(3491349965).uniform(0, 3)
A:scipy.fft.tests.test_fftlog.A->fht(a, dln, mu, offset=offset, bias=gamma)
A:scipy.fft.tests.test_fftlog.a_->ifht(A, dln, mu, offset=offset, bias=bias)
A:scipy.fft.tests.test_fftlog.gamma->numpy.random.RandomState(3491349965).uniform(-1 - mu, 1 / 2)
scipy.fft.tests.test_fftlog.test_fht_agrees_with_fftlog()
scipy.fft.tests.test_fftlog.test_fht_exact(n)
scipy.fft.tests.test_fftlog.test_fht_identity(n,bias,offset,optimal)
scipy.fft.tests.test_fftlog.test_fht_special_cases()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/tests/test_fft_function.py----------------------------------------
scipy.fft.tests.test_fft_function.test_fft_function()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/tests/mock_backend.py----------------------------------------
A:scipy.fft.tests.mock_backend.fft->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.fft2->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.fftn->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.ifft->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.ifft2->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.ifftn->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.rfft->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.rfft2->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.rfftn->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.irfft->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.irfft2->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.irfftn->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.hfft->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.hfft2->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.hfftn->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.ihfft->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.ihfft2->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.ihfftn->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.dct->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.idct->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.dctn->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.idctn->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.dst->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.idst->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.dstn->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.idstn->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.fht->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.ifht->_MockFunction(np.random.random(10))
A:scipy.fft.tests.mock_backend.fn->globals().get(method.__name__)
scipy.fft.tests.mock_backend._MockFunction(self,return_value=None)
scipy.fft.tests.mock_backend._MockFunction.__init__(self,return_value=None)
scipy.fft.tests.mock_backend.__ua_function__(method,args,kwargs)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/tests/test_real_transforms.py----------------------------------------
A:scipy.fft.tests.test_real_transforms.SQRT_2->math.sqrt(2)
A:scipy.fft.tests.test_real_transforms.x->numpy.random.rand(100)
A:scipy.fft.tests.test_real_transforms.y->forward(x, type, axes=axes, norm=norm)
A:scipy.fft.tests.test_real_transforms.z->backward(y, type, axes=axes, norm=norm)
A:scipy.fft.tests.test_real_transforms.y2->func(x2, type=3, norm=norm, orthogonalize=False)
A:scipy.fft.tests.test_real_transforms.z2->backward(y2, type, shape, axes, norm, orthogonalize=orthogonalize)
A:scipy.fft.tests.test_real_transforms.x_orig->numpy.random.rand(100).copy()
A:scipy.fft.tests.test_real_transforms.y_orig->forward(x, type, axes=axes, norm=norm).copy()
A:scipy.fft.tests.test_real_transforms.shape->numpy.take(shape, axes)
A:scipy.fft.tests.test_real_transforms.fft_res->getattr(fft, func)(x, type, norm=norm)
A:scipy.fft.tests.test_real_transforms.fftpack_res->getattr(fftpack, func)(x, type, norm=norm)
A:scipy.fft.tests.test_real_transforms.a->func(x, type=type, norm=norm, orthogonalize=ortho)
A:scipy.fft.tests.test_real_transforms.b->func(x, type=type, norm=norm)
A:scipy.fft.tests.test_real_transforms.y1->func(x, type=3, norm=norm, orthogonalize=True)
A:scipy.fft.tests.test_real_transforms.x2->numpy.random.rand(100).copy()
scipy.fft.tests.test_real_transforms.test_fftpack_equivalience(func,type,norm)
scipy.fft.tests.test_real_transforms.test_identity_1d(forward,backward,type,n,axis,norm,orthogonalize)
scipy.fft.tests.test_real_transforms.test_identity_1d_overwrite(forward,backward,type,dtype,axis,norm,overwrite_x)
scipy.fft.tests.test_real_transforms.test_identity_nd(forward,backward,type,shape,axes,norm,orthogonalize)
scipy.fft.tests.test_real_transforms.test_identity_nd_overwrite(forward,backward,type,shape,axes,dtype,norm,overwrite_x)
scipy.fft.tests.test_real_transforms.test_orthogonalize_dcst2(func,norm)
scipy.fft.tests.test_real_transforms.test_orthogonalize_dcst3(func,norm)
scipy.fft.tests.test_real_transforms.test_orthogonalize_dct1(norm)
scipy.fft.tests.test_real_transforms.test_orthogonalize_default(func,type)
scipy.fft.tests.test_real_transforms.test_orthogonalize_noop(func,type,norm)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/tests/test_helper.py----------------------------------------
A:scipy.fft.tests.test_helper.(q, r)->divmod(x, d)
A:scipy.fft.tests.test_helper.m->next_fast_len(n, True)
A:scipy.fft.tests.test_helper.x->numpy.zeros(1)
A:scipy.fft.tests.test_helper.testN->next_fast_len(x)
A:scipy.fft.tests.test_helper.shape_expected->numpy.array([10, 6, 2])
A:scipy.fft.tests.test_helper.axes_expected->numpy.array([1, 0, 3])
A:scipy.fft.tests.test_helper.(shape_res, axes_res)->_init_nd_shape_and_axes(x, shape, axes)
A:scipy.fft.tests.test_helper.(shape, axes)->_init_nd_shape_and_axes(x, shape=(5, 5, 5), axes=None)
scipy.fft.tests.test_helper.TestNextFastLen
scipy.fft.tests.test_helper.TestNextFastLen.test_keyword_args(self)
scipy.fft.tests.test_helper.TestNextFastLen.test_next_fast_len(self)
scipy.fft.tests.test_helper.TestNextFastLen.test_np_integers(self)
scipy.fft.tests.test_helper.TestNextFastLen.testnext_fast_len_big(self)
scipy.fft.tests.test_helper.TestNextFastLen.testnext_fast_len_small(self)
scipy.fft.tests.test_helper.Test_init_nd_shape_and_axes
scipy.fft.tests.test_helper.Test_init_nd_shape_and_axes.test_errors(self)
scipy.fft.tests.test_helper.Test_init_nd_shape_and_axes.test_np_0d_defaults(self)
scipy.fft.tests.test_helper.Test_init_nd_shape_and_axes.test_np_1d_defaults(self)
scipy.fft.tests.test_helper.Test_init_nd_shape_and_axes.test_np_2d_defaults(self)
scipy.fft.tests.test_helper.Test_init_nd_shape_and_axes.test_np_5d_defaults(self)
scipy.fft.tests.test_helper.Test_init_nd_shape_and_axes.test_np_5d_set_axes(self)
scipy.fft.tests.test_helper.Test_init_nd_shape_and_axes.test_np_5d_set_shape(self)
scipy.fft.tests.test_helper.Test_init_nd_shape_and_axes.test_np_5d_set_shape_axes(self)
scipy.fft.tests.test_helper.Test_init_nd_shape_and_axes.test_py_0d_defaults(self)
scipy.fft.tests.test_helper.Test_init_nd_shape_and_axes.test_py_1d_defaults(self)
scipy.fft.tests.test_helper.Test_init_nd_shape_and_axes.test_py_2d_defaults(self)
scipy.fft.tests.test_helper.Test_init_nd_shape_and_axes.test_shape_axes_subset(self)
scipy.fft.tests.test_helper._assert_n_smooth(x,n)
scipy.fft.tests.test_helper.test_next_fast_len()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/tests/test_multithreading.py----------------------------------------
A:scipy.fft.tests.test_multithreading.expected->func(x, workers=1)
A:scipy.fft.tests.test_multithreading.actual->func(x, workers=workers)
A:scipy.fft.tests.test_multithreading.expect->scipy.fft.fft(x, workers=2)
A:scipy.fft.tests.test_multithreading.res->p.map(_mt_fft, [x for _ in range(4)])
A:scipy.fft.tests.test_multithreading.cpus->os.cpu_count()
scipy.fft.tests.test_multithreading._mt_fft(x)
scipy.fft.tests.test_multithreading.test_invalid_workers(x)
scipy.fft.tests.test_multithreading.test_mixed_threads_processes(x)
scipy.fft.tests.test_multithreading.test_set_get_workers()
scipy.fft.tests.test_multithreading.test_set_workers_invalid()
scipy.fft.tests.test_multithreading.test_threaded_same(x,func,workers)
scipy.fft.tests.test_multithreading.x()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/_pocketfft/realtransforms.py----------------------------------------
A:scipy.fft._pocketfft.realtransforms.tmp->_asfarray(x)
A:scipy.fft._pocketfft.realtransforms.norm->_normalization(norm, forward)
A:scipy.fft._pocketfft.realtransforms.workers->_workers(workers)
A:scipy.fft._pocketfft.realtransforms.(tmp, copied)->_fix_shape(tmp, shape, axes)
A:scipy.fft._pocketfft.realtransforms.dct->functools.partial(_r2r, True, pfft.dct)
A:scipy.fft._pocketfft.realtransforms.idct->functools.partial(_r2r, False, pfft.dct)
A:scipy.fft._pocketfft.realtransforms.dst->functools.partial(_r2r, True, pfft.dst)
A:scipy.fft._pocketfft.realtransforms.idst->functools.partial(_r2r, False, pfft.dst)
A:scipy.fft._pocketfft.realtransforms.(shape, axes)->_init_nd_shape_and_axes(tmp, s, axes)
A:scipy.fft._pocketfft.realtransforms.dctn->functools.partial(_r2rn, True, pfft.dct)
A:scipy.fft._pocketfft.realtransforms.idctn->functools.partial(_r2rn, False, pfft.dct)
A:scipy.fft._pocketfft.realtransforms.dstn->functools.partial(_r2rn, True, pfft.dst)
A:scipy.fft._pocketfft.realtransforms.idstn->functools.partial(_r2rn, False, pfft.dst)
scipy.fft._pocketfft._r2r(forward,transform,x,type=2,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,orthogonalize=None)
scipy.fft._pocketfft._r2rn(forward,transform,x,type=2,s=None,axes=None,norm=None,overwrite_x=False,workers=None,orthogonalize=None)
scipy.fft._pocketfft.realtransforms._r2r(forward,transform,x,type=2,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,orthogonalize=None)
scipy.fft._pocketfft.realtransforms._r2rn(forward,transform,x,type=2,s=None,axes=None,norm=None,overwrite_x=False,workers=None,orthogonalize=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/_pocketfft/basic.py----------------------------------------
A:scipy.fft._pocketfft.basic.tmp->_asfarray(x)
A:scipy.fft._pocketfft.basic.norm->_normalization(norm, forward)
A:scipy.fft._pocketfft.basic.workers->_workers(None)
A:scipy.fft._pocketfft.basic.(tmp, copied)->_fix_shape_1d(tmp, n, axis)
A:scipy.fft._pocketfft.basic.fft->functools.partial(c2c, True)
A:scipy.fft._pocketfft.basic.ifft->functools.partial(c2c, False)
A:scipy.fft._pocketfft.basic.(tmp, _)->_fix_shape(tmp, shape, axes)
A:scipy.fft._pocketfft.basic.rfft->functools.partial(r2c, True)
A:scipy.fft._pocketfft.basic.ihfft->functools.partial(r2c, False)
A:scipy.fft._pocketfft.basic.hfft->functools.partial(c2r, True)
A:scipy.fft._pocketfft.basic.irfft->functools.partial(c2r, False)
A:scipy.fft._pocketfft.basic.(shape, axes)->_init_nd_shape_and_axes(tmp, s, axes)
A:scipy.fft._pocketfft.basic.fftn->functools.partial(c2cn, True)
A:scipy.fft._pocketfft.basic.ifftn->functools.partial(c2cn, False)
A:scipy.fft._pocketfft.basic.rfftn->functools.partial(r2cn, True)
A:scipy.fft._pocketfft.basic.ihfftn->functools.partial(r2cn, False)
A:scipy.fft._pocketfft.basic.hfftn->functools.partial(c2rn, True)
A:scipy.fft._pocketfft.basic.irfftn->functools.partial(c2rn, False)
A:scipy.fft._pocketfft.basic.rfft_fftpack->functools.partial(r2r_fftpack, True)
A:scipy.fft._pocketfft.basic.irfft_fftpack->functools.partial(r2r_fftpack, False)
scipy.fft._pocketfft.basic.c2c(forward,x,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.basic.c2cn(forward,x,s=None,axes=None,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.basic.c2r(forward,x,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.basic.c2rn(forward,x,s=None,axes=None,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.basic.fft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.basic.hfft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.basic.ifft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.basic.ihfft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.basic.irfft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.basic.r2c(forward,x,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.basic.r2cn(forward,x,s=None,axes=None,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.basic.r2r_fftpack(forward,x,n=None,axis=-1,norm=None,overwrite_x=False)
scipy.fft._pocketfft.basic.rfft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.c2c(forward,x,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.c2cn(forward,x,s=None,axes=None,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.c2r(forward,x,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.c2rn(forward,x,s=None,axes=None,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.fft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.hfft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.ifft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.ihfft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.irfft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.r2c(forward,x,n=None,axis=-1,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.r2cn(forward,x,s=None,axes=None,norm=None,overwrite_x=False,workers=None,*,plan=None)
scipy.fft._pocketfft.r2r_fftpack(forward,x,n=None,axis=-1,norm=None,overwrite_x=False)
scipy.fft._pocketfft.rfft2(x,s=None,axes=(-2,-1),norm=None,overwrite_x=False,workers=None,*,plan=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/_pocketfft/helper.py----------------------------------------
A:scipy.fft._pocketfft.helper._config->threading.local()
A:scipy.fft._pocketfft.helper._cpu_count->os.cpu_count()
A:scipy.fft._pocketfft.helper.axes->range(x.ndim)
A:scipy.fft._pocketfft.helper.shape->list(x.shape)
A:scipy.fft._pocketfft.helper.x->numpy.asarray(x)
A:scipy.fft._pocketfft.helper.dtype->numpy.asarray(x).dtype.newbyteorder('=')
A:scipy.fft._pocketfft.helper.index[ax]->slice(0, x.shape[ax])
A:scipy.fft._pocketfft.helper.index->tuple(index)
A:scipy.fft._pocketfft.helper.s->list(x.shape)
A:scipy.fft._pocketfft.helper.z->numpy.zeros(s, x.dtype)
A:scipy.fft._pocketfft.helper.old_workers->get_workers()
A:scipy.fft._pocketfft.helper._config.default_workers->_workers(operator.index(workers))
scipy.fft._pocketfft._asfarray(x)
scipy.fft._pocketfft._datacopied(arr,original)
scipy.fft._pocketfft._fix_shape(x,shape,axes)
scipy.fft._pocketfft._fix_shape_1d(x,n,axis)
scipy.fft._pocketfft._init_nd_shape_and_axes(x,shape,axes)
scipy.fft._pocketfft._iterable_of_int(x,name=None)
scipy.fft._pocketfft._normalization(norm,forward)
scipy.fft._pocketfft._workers(workers)
scipy.fft._pocketfft.get_workers()
scipy.fft._pocketfft.helper._asfarray(x)
scipy.fft._pocketfft.helper._datacopied(arr,original)
scipy.fft._pocketfft.helper._fix_shape(x,shape,axes)
scipy.fft._pocketfft.helper._fix_shape_1d(x,n,axis)
scipy.fft._pocketfft.helper._init_nd_shape_and_axes(x,shape,axes)
scipy.fft._pocketfft.helper._iterable_of_int(x,name=None)
scipy.fft._pocketfft.helper._normalization(norm,forward)
scipy.fft._pocketfft.helper._workers(workers)
scipy.fft._pocketfft.helper.get_workers()
scipy.fft._pocketfft.helper.set_workers(workers)
scipy.fft._pocketfft.set_workers(workers)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/_pocketfft/__init__.py----------------------------------------
A:scipy.fft._pocketfft.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/_pocketfft/tests/test_basic.py----------------------------------------
A:scipy.fft._pocketfft.tests.test_basic.dtype->arr.dtype.newbyteorder('S')
A:scipy.fft._pocketfft.tests.test_basic.data->data.astype(dtype).astype(dtype)
A:scipy.fft._pocketfft.tests.test_basic.x->numpy.random.RandomState(1234).rand(10)
A:scipy.fft._pocketfft.tests.test_basic.n->len(x)
A:scipy.fft._pocketfft.tests.test_basic.y->rfftn(x)
A:scipy.fft._pocketfft.tests.test_basic.y[i]->dot(exp(i * w), x)
A:scipy.fft._pocketfft.tests.test_basic.x1->numpy.array([1, 2, 3, 4], dtype=np.float16)
A:scipy.fft._pocketfft.tests.test_basic.x1[n - i]->numpy.conj(x[i])
A:scipy.fft._pocketfft.tests.test_basic.y1->fftn(x.real.astype(np.float16))
A:scipy.fft._pocketfft.tests.test_basic.x2->numpy.random.RandomState(1234).rand(10).copy()
A:scipy.fft._pocketfft.tests.test_basic.y2->fftn(x.real.astype(np.float64)).astype(np.complex64)
A:scipy.fft._pocketfft.tests.test_basic.self.data->numpy.asarray(data)
A:scipy.fft._pocketfft.tests.test_basic.xs->_TestRFFTBase.MockSeries(x)
A:scipy.fft._pocketfft.tests.test_basic.x[-1]->numpy.real(x[-1])
A:scipy.fft._pocketfft.tests.test_basic.y_r->numpy.array(fftn(x), np.complex64)
A:scipy.fft._pocketfft.tests.test_basic.large_x1->array([[1, 2, 3, 0], [4, 5, 6, 0], [7, 8, 9, 0], [0, 0, 0, 0]])
A:scipy.fft._pocketfft.tests.test_basic.s->part_shape(data.shape, axes)
A:scipy.fft._pocketfft.tests.test_basic.rng->numpy.random.RandomState(1234)
scipy.fft._pocketfft.tests.test_FakeArray(self,data)
scipy.fft._pocketfft.tests.test_FakeArray2(self,data)
scipy.fft._pocketfft.tests.test_FakeArray2.__array__(self)
scipy.fft._pocketfft.tests.test_TestDoubleFFT(_TestFFTBase)
scipy.fft._pocketfft.tests.test_TestDoubleFFT.setup_method(self)
scipy.fft._pocketfft.tests.test_TestDoubleIFFT(_TestIFFTBase)
scipy.fft._pocketfft.tests.test_TestDoubleIFFT.setup_method(self)
scipy.fft._pocketfft.tests.test_TestFftn
scipy.fft._pocketfft.tests.test_TestFftn.setup_method(self)
scipy.fft._pocketfft.tests.test_TestFftn.test_axes_argument(self)
scipy.fft._pocketfft.tests.test_TestFftn.test_definition(self)
scipy.fft._pocketfft.tests.test_TestFftn.test_invalid_sizes(self)
scipy.fft._pocketfft.tests.test_TestFftn.test_no_axes(self)
scipy.fft._pocketfft.tests.test_TestFftn.test_shape_argument(self)
scipy.fft._pocketfft.tests.test_TestFftn.test_shape_argument_more(self)
scipy.fft._pocketfft.tests.test_TestFftn.test_shape_axes_argument(self)
scipy.fft._pocketfft.tests.test_TestFftn.test_shape_axes_argument2(self)
scipy.fft._pocketfft.tests.test_TestFftnSingle
scipy.fft._pocketfft.tests.test_TestFftnSingle.setup_method(self)
scipy.fft._pocketfft.tests.test_TestFftnSingle.test_definition(self)
scipy.fft._pocketfft.tests.test_TestFftnSingle.test_definition_float16(self)
scipy.fft._pocketfft.tests.test_TestFftnSingle.test_float16_input_large(self,size)
scipy.fft._pocketfft.tests.test_TestFftnSingle.test_float16_input_small(self,size)
scipy.fft._pocketfft.tests.test_TestFftnSingle.test_size_accuracy_large(self,size)
scipy.fft._pocketfft.tests.test_TestFftnSingle.test_size_accuracy_small(self,size)
scipy.fft._pocketfft.tests.test_TestFloat16FFT
scipy.fft._pocketfft.tests.test_TestFloat16FFT.test_1_argument_real(self)
scipy.fft._pocketfft.tests.test_TestFloat16FFT.test_n_argument_real(self)
scipy.fft._pocketfft.tests.test_TestIRFFTDouble(_TestIRFFTBase)
scipy.fft._pocketfft.tests.test_TestIRFFTDouble.setup_method(self)
scipy.fft._pocketfft.tests.test_TestIRFFTLongDouble(_TestIRFFTBase)
scipy.fft._pocketfft.tests.test_TestIRFFTLongDouble.setup_method(self)
scipy.fft._pocketfft.tests.test_TestIRFFTSingle(_TestIRFFTBase)
scipy.fft._pocketfft.tests.test_TestIRFFTSingle.setup_method(self)
scipy.fft._pocketfft.tests.test_TestIfftn
scipy.fft._pocketfft.tests.test_TestIfftn.setup_method(self)
scipy.fft._pocketfft.tests.test_TestIfftn.test_definition(self,dtype,cdtype,maxnlp)
scipy.fft._pocketfft.tests.test_TestIfftn.test_invalid_sizes(self)
scipy.fft._pocketfft.tests.test_TestIfftn.test_no_axes(self)
scipy.fft._pocketfft.tests.test_TestIfftn.test_random_complex(self,maxnlp,size)
scipy.fft._pocketfft.tests.test_TestLongDoubleFFT(_TestFFTBase)
scipy.fft._pocketfft.tests.test_TestLongDoubleFFT.setup_method(self)
scipy.fft._pocketfft.tests.test_TestLongDoubleIFFT(_TestIFFTBase)
scipy.fft._pocketfft.tests.test_TestLongDoubleIFFT.setup_method(self)
scipy.fft._pocketfft.tests.test_TestOverwrite
scipy.fft._pocketfft.tests.test_TestOverwrite._check(self,x,routine,fftsize,axis,overwrite_x,should_overwrite)
scipy.fft._pocketfft.tests.test_TestOverwrite._check_1d(self,routine,dtype,shape,axis,overwritable_dtypes,fftsize,overwrite_x)
scipy.fft._pocketfft.tests.test_TestOverwrite._check_nd_one(self,routine,dtype,shape,axes,overwritable_dtypes,overwrite_x)
scipy.fft._pocketfft.tests.test_TestOverwrite.test_fft_ifft(self,dtype,fftsize,overwrite_x,shape,axes)
scipy.fft._pocketfft.tests.test_TestOverwrite.test_fftn_ifftn(self,dtype,overwrite_x,shape,axes)
scipy.fft._pocketfft.tests.test_TestOverwrite.test_rfft_irfft(self,dtype,fftsize,overwrite_x,shape,axes)
scipy.fft._pocketfft.tests.test_TestRFFTDouble(_TestRFFTBase)
scipy.fft._pocketfft.tests.test_TestRFFTDouble.setup_method(self)
scipy.fft._pocketfft.tests.test_TestRFFTLongDouble(_TestRFFTBase)
scipy.fft._pocketfft.tests.test_TestRFFTLongDouble.setup_method(self)
scipy.fft._pocketfft.tests.test_TestRFFTSingle(_TestRFFTBase)
scipy.fft._pocketfft.tests.test_TestRFFTSingle.setup_method(self)
scipy.fft._pocketfft.tests.test_TestRfftn
scipy.fft._pocketfft.tests.test_TestRfftn.setup_method(self)
scipy.fft._pocketfft.tests.test_TestRfftn.test_complex_input(self)
scipy.fft._pocketfft.tests.test_TestRfftn.test_definition(self,dtype,cdtype,maxnlp)
scipy.fft._pocketfft.tests.test_TestRfftn.test_invalid_sizes(self,func)
scipy.fft._pocketfft.tests.test_TestRfftn.test_no_axes(self,func)
scipy.fft._pocketfft.tests.test_TestRfftn.test_random(self,size)
scipy.fft._pocketfft.tests.test_TestSingleFFT(_TestFFTBase)
scipy.fft._pocketfft.tests.test_TestSingleFFT.setup_method(self)
scipy.fft._pocketfft.tests.test_TestSingleIFFT(_TestIFFTBase)
scipy.fft._pocketfft.tests.test_TestSingleIFFT.setup_method(self)
scipy.fft._pocketfft.tests.test_Testfft2
scipy.fft._pocketfft.tests.test_Testfft2.setup_method(self)
scipy.fft._pocketfft.tests.test_Testfft2.test_invalid_sizes(self)
scipy.fft._pocketfft.tests.test_Testfft2.test_regression_244(self)
scipy.fft._pocketfft.tests.test__TestFFTBase
scipy.fft._pocketfft.tests.test__TestFFTBase._test_n_argument_complex(self)
scipy.fft._pocketfft.tests.test__TestFFTBase.setup_method(self)
scipy.fft._pocketfft.tests.test__TestFFTBase.test_definition(self)
scipy.fft._pocketfft.tests.test__TestFFTBase.test_djbfft(self)
scipy.fft._pocketfft.tests.test__TestFFTBase.test_invalid_sizes(self)
scipy.fft._pocketfft.tests.test__TestFFTBase.test_n_argument_real(self)
scipy.fft._pocketfft.tests.test__TestIFFTBase
scipy.fft._pocketfft.tests.test__TestIFFTBase.setup_method(self)
scipy.fft._pocketfft.tests.test__TestIFFTBase.test_definition(self)
scipy.fft._pocketfft.tests.test__TestIFFTBase.test_definition_real(self)
scipy.fft._pocketfft.tests.test__TestIFFTBase.test_djbfft(self)
scipy.fft._pocketfft.tests.test__TestIFFTBase.test_invalid_sizes(self)
scipy.fft._pocketfft.tests.test__TestIFFTBase.test_random_complex(self)
scipy.fft._pocketfft.tests.test__TestIFFTBase.test_random_real(self)
scipy.fft._pocketfft.tests.test__TestIFFTBase.test_size_accuracy(self)
scipy.fft._pocketfft.tests.test__TestIRFFTBase
scipy.fft._pocketfft.tests.test__TestIRFFTBase.setup_method(self)
scipy.fft._pocketfft.tests.test__TestIRFFTBase.test_definition(self)
scipy.fft._pocketfft.tests.test__TestIRFFTBase.test_djbfft(self)
scipy.fft._pocketfft.tests.test__TestIRFFTBase.test_invalid_sizes(self)
scipy.fft._pocketfft.tests.test__TestIRFFTBase.test_random_real(self)
scipy.fft._pocketfft.tests.test__TestIRFFTBase.test_size_accuracy(self)
scipy.fft._pocketfft.tests.test__TestRFFTBase
scipy.fft._pocketfft.tests.test__TestRFFTBase.MockSeries(self,data)
scipy.fft._pocketfft.tests.test__TestRFFTBase.MockSeries.__getattr__(self,item)
scipy.fft._pocketfft.tests.test__TestRFFTBase.setup_method(self)
scipy.fft._pocketfft.tests.test__TestRFFTBase.test_complex_input(self)
scipy.fft._pocketfft.tests.test__TestRFFTBase.test_definition(self)
scipy.fft._pocketfft.tests.test__TestRFFTBase.test_djbfft(self)
scipy.fft._pocketfft.tests.test__TestRFFTBase.test_invalid_sizes(self)
scipy.fft._pocketfft.tests.test__TestRFFTBase.test_non_ndarray_with_dtype(self)
scipy.fft._pocketfft.tests.test__assert_close_in_norm(x,y,rtol,size,rdt)
scipy.fft._pocketfft.tests.test_basic.FakeArray(self,data)
scipy.fft._pocketfft.tests.test_basic.FakeArray.__init__(self,data)
scipy.fft._pocketfft.tests.test_basic.FakeArray2(self,data)
scipy.fft._pocketfft.tests.test_basic.FakeArray2.__array__(self)
scipy.fft._pocketfft.tests.test_basic.FakeArray2.__init__(self,data)
scipy.fft._pocketfft.tests.test_basic.TestDoubleFFT(_TestFFTBase)
scipy.fft._pocketfft.tests.test_basic.TestDoubleFFT.setup_method(self)
scipy.fft._pocketfft.tests.test_basic.TestDoubleIFFT(_TestIFFTBase)
scipy.fft._pocketfft.tests.test_basic.TestDoubleIFFT.setup_method(self)
scipy.fft._pocketfft.tests.test_basic.TestFftn
scipy.fft._pocketfft.tests.test_basic.TestFftn.setup_method(self)
scipy.fft._pocketfft.tests.test_basic.TestFftn.test_axes_argument(self)
scipy.fft._pocketfft.tests.test_basic.TestFftn.test_definition(self)
scipy.fft._pocketfft.tests.test_basic.TestFftn.test_invalid_sizes(self)
scipy.fft._pocketfft.tests.test_basic.TestFftn.test_no_axes(self)
scipy.fft._pocketfft.tests.test_basic.TestFftn.test_shape_argument(self)
scipy.fft._pocketfft.tests.test_basic.TestFftn.test_shape_argument_more(self)
scipy.fft._pocketfft.tests.test_basic.TestFftn.test_shape_axes_argument(self)
scipy.fft._pocketfft.tests.test_basic.TestFftn.test_shape_axes_argument2(self)
scipy.fft._pocketfft.tests.test_basic.TestFftnSingle
scipy.fft._pocketfft.tests.test_basic.TestFftnSingle.setup_method(self)
scipy.fft._pocketfft.tests.test_basic.TestFftnSingle.test_definition(self)
scipy.fft._pocketfft.tests.test_basic.TestFftnSingle.test_definition_float16(self)
scipy.fft._pocketfft.tests.test_basic.TestFftnSingle.test_float16_input_large(self,size)
scipy.fft._pocketfft.tests.test_basic.TestFftnSingle.test_float16_input_small(self,size)
scipy.fft._pocketfft.tests.test_basic.TestFftnSingle.test_size_accuracy_large(self,size)
scipy.fft._pocketfft.tests.test_basic.TestFftnSingle.test_size_accuracy_small(self,size)
scipy.fft._pocketfft.tests.test_basic.TestFloat16FFT
scipy.fft._pocketfft.tests.test_basic.TestFloat16FFT.test_1_argument_real(self)
scipy.fft._pocketfft.tests.test_basic.TestFloat16FFT.test_n_argument_real(self)
scipy.fft._pocketfft.tests.test_basic.TestIRFFTDouble(_TestIRFFTBase)
scipy.fft._pocketfft.tests.test_basic.TestIRFFTDouble.setup_method(self)
scipy.fft._pocketfft.tests.test_basic.TestIRFFTLongDouble(_TestIRFFTBase)
scipy.fft._pocketfft.tests.test_basic.TestIRFFTLongDouble.setup_method(self)
scipy.fft._pocketfft.tests.test_basic.TestIRFFTSingle(_TestIRFFTBase)
scipy.fft._pocketfft.tests.test_basic.TestIRFFTSingle.setup_method(self)
scipy.fft._pocketfft.tests.test_basic.TestIfftn
scipy.fft._pocketfft.tests.test_basic.TestIfftn.setup_method(self)
scipy.fft._pocketfft.tests.test_basic.TestIfftn.test_definition(self,dtype,cdtype,maxnlp)
scipy.fft._pocketfft.tests.test_basic.TestIfftn.test_invalid_sizes(self)
scipy.fft._pocketfft.tests.test_basic.TestIfftn.test_no_axes(self)
scipy.fft._pocketfft.tests.test_basic.TestIfftn.test_random_complex(self,maxnlp,size)
scipy.fft._pocketfft.tests.test_basic.TestLongDoubleFFT(_TestFFTBase)
scipy.fft._pocketfft.tests.test_basic.TestLongDoubleFFT.setup_method(self)
scipy.fft._pocketfft.tests.test_basic.TestLongDoubleIFFT(_TestIFFTBase)
scipy.fft._pocketfft.tests.test_basic.TestLongDoubleIFFT.setup_method(self)
scipy.fft._pocketfft.tests.test_basic.TestOverwrite
scipy.fft._pocketfft.tests.test_basic.TestOverwrite._check(self,x,routine,fftsize,axis,overwrite_x,should_overwrite)
scipy.fft._pocketfft.tests.test_basic.TestOverwrite._check_1d(self,routine,dtype,shape,axis,overwritable_dtypes,fftsize,overwrite_x)
scipy.fft._pocketfft.tests.test_basic.TestOverwrite._check_nd_one(self,routine,dtype,shape,axes,overwritable_dtypes,overwrite_x)
scipy.fft._pocketfft.tests.test_basic.TestOverwrite.test_fft_ifft(self,dtype,fftsize,overwrite_x,shape,axes)
scipy.fft._pocketfft.tests.test_basic.TestOverwrite.test_fftn_ifftn(self,dtype,overwrite_x,shape,axes)
scipy.fft._pocketfft.tests.test_basic.TestOverwrite.test_rfft_irfft(self,dtype,fftsize,overwrite_x,shape,axes)
scipy.fft._pocketfft.tests.test_basic.TestRFFTDouble(_TestRFFTBase)
scipy.fft._pocketfft.tests.test_basic.TestRFFTDouble.setup_method(self)
scipy.fft._pocketfft.tests.test_basic.TestRFFTLongDouble(_TestRFFTBase)
scipy.fft._pocketfft.tests.test_basic.TestRFFTLongDouble.setup_method(self)
scipy.fft._pocketfft.tests.test_basic.TestRFFTSingle(_TestRFFTBase)
scipy.fft._pocketfft.tests.test_basic.TestRFFTSingle.setup_method(self)
scipy.fft._pocketfft.tests.test_basic.TestRfftn
scipy.fft._pocketfft.tests.test_basic.TestRfftn.setup_method(self)
scipy.fft._pocketfft.tests.test_basic.TestRfftn.test_complex_input(self)
scipy.fft._pocketfft.tests.test_basic.TestRfftn.test_definition(self,dtype,cdtype,maxnlp)
scipy.fft._pocketfft.tests.test_basic.TestRfftn.test_invalid_sizes(self,func)
scipy.fft._pocketfft.tests.test_basic.TestRfftn.test_no_axes(self,func)
scipy.fft._pocketfft.tests.test_basic.TestRfftn.test_random(self,size)
scipy.fft._pocketfft.tests.test_basic.TestSingleFFT(_TestFFTBase)
scipy.fft._pocketfft.tests.test_basic.TestSingleFFT.setup_method(self)
scipy.fft._pocketfft.tests.test_basic.TestSingleIFFT(_TestIFFTBase)
scipy.fft._pocketfft.tests.test_basic.TestSingleIFFT.setup_method(self)
scipy.fft._pocketfft.tests.test_basic.Testfft2
scipy.fft._pocketfft.tests.test_basic.Testfft2.setup_method(self)
scipy.fft._pocketfft.tests.test_basic.Testfft2.test_invalid_sizes(self)
scipy.fft._pocketfft.tests.test_basic.Testfft2.test_regression_244(self)
scipy.fft._pocketfft.tests.test_basic._TestFFTBase
scipy.fft._pocketfft.tests.test_basic._TestFFTBase._test_n_argument_complex(self)
scipy.fft._pocketfft.tests.test_basic._TestFFTBase.setup_method(self)
scipy.fft._pocketfft.tests.test_basic._TestFFTBase.test_definition(self)
scipy.fft._pocketfft.tests.test_basic._TestFFTBase.test_djbfft(self)
scipy.fft._pocketfft.tests.test_basic._TestFFTBase.test_invalid_sizes(self)
scipy.fft._pocketfft.tests.test_basic._TestFFTBase.test_n_argument_real(self)
scipy.fft._pocketfft.tests.test_basic._TestIFFTBase
scipy.fft._pocketfft.tests.test_basic._TestIFFTBase.setup_method(self)
scipy.fft._pocketfft.tests.test_basic._TestIFFTBase.test_definition(self)
scipy.fft._pocketfft.tests.test_basic._TestIFFTBase.test_definition_real(self)
scipy.fft._pocketfft.tests.test_basic._TestIFFTBase.test_djbfft(self)
scipy.fft._pocketfft.tests.test_basic._TestIFFTBase.test_invalid_sizes(self)
scipy.fft._pocketfft.tests.test_basic._TestIFFTBase.test_random_complex(self)
scipy.fft._pocketfft.tests.test_basic._TestIFFTBase.test_random_real(self)
scipy.fft._pocketfft.tests.test_basic._TestIFFTBase.test_size_accuracy(self)
scipy.fft._pocketfft.tests.test_basic._TestIRFFTBase
scipy.fft._pocketfft.tests.test_basic._TestIRFFTBase.setup_method(self)
scipy.fft._pocketfft.tests.test_basic._TestIRFFTBase.test_definition(self)
scipy.fft._pocketfft.tests.test_basic._TestIRFFTBase.test_djbfft(self)
scipy.fft._pocketfft.tests.test_basic._TestIRFFTBase.test_invalid_sizes(self)
scipy.fft._pocketfft.tests.test_basic._TestIRFFTBase.test_random_real(self)
scipy.fft._pocketfft.tests.test_basic._TestIRFFTBase.test_size_accuracy(self)
scipy.fft._pocketfft.tests.test_basic._TestRFFTBase
scipy.fft._pocketfft.tests.test_basic._TestRFFTBase.MockSeries(self,data)
scipy.fft._pocketfft.tests.test_basic._TestRFFTBase.MockSeries.__getattr__(self,item)
scipy.fft._pocketfft.tests.test_basic._TestRFFTBase.MockSeries.__init__(self,data)
scipy.fft._pocketfft.tests.test_basic._TestRFFTBase.setup_method(self)
scipy.fft._pocketfft.tests.test_basic._TestRFFTBase.test_complex_input(self)
scipy.fft._pocketfft.tests.test_basic._TestRFFTBase.test_definition(self)
scipy.fft._pocketfft.tests.test_basic._TestRFFTBase.test_djbfft(self)
scipy.fft._pocketfft.tests.test_basic._TestRFFTBase.test_invalid_sizes(self)
scipy.fft._pocketfft.tests.test_basic._TestRFFTBase.test_non_ndarray_with_dtype(self)
scipy.fft._pocketfft.tests.test_basic._assert_close_in_norm(x,y,rtol,size,rdt)
scipy.fft._pocketfft.tests.test_basic.direct_dft(x)
scipy.fft._pocketfft.tests.test_basic.direct_dftn(x)
scipy.fft._pocketfft.tests.test_basic.direct_idft(x)
scipy.fft._pocketfft.tests.test_basic.direct_idftn(x)
scipy.fft._pocketfft.tests.test_basic.direct_irdft(x,n)
scipy.fft._pocketfft.tests.test_basic.direct_rdft(x)
scipy.fft._pocketfft.tests.test_basic.direct_rdftn(x)
scipy.fft._pocketfft.tests.test_basic.get_mat(n)
scipy.fft._pocketfft.tests.test_basic.random(size)
scipy.fft._pocketfft.tests.test_basic.swap_byteorder(arr)
scipy.fft._pocketfft.tests.test_basic.test_invalid_norm(func)
scipy.fft._pocketfft.tests.test_basic.test_swapped_byte_order_complex(func)
scipy.fft._pocketfft.tests.test_basic.test_swapped_byte_order_real(func)
scipy.fft._pocketfft.tests.test_direct_dft(x)
scipy.fft._pocketfft.tests.test_direct_dftn(x)
scipy.fft._pocketfft.tests.test_direct_idft(x)
scipy.fft._pocketfft.tests.test_direct_idftn(x)
scipy.fft._pocketfft.tests.test_direct_irdft(x,n)
scipy.fft._pocketfft.tests.test_direct_rdft(x)
scipy.fft._pocketfft.tests.test_direct_rdftn(x)
scipy.fft._pocketfft.tests.test_get_mat(n)
scipy.fft._pocketfft.tests.test_random(size)
scipy.fft._pocketfft.tests.test_swap_byteorder(arr)
scipy.fft._pocketfft.tests.test_test_invalid_norm(func)
scipy.fft._pocketfft.tests.test_test_swapped_byte_order_complex(func)
scipy.fft._pocketfft.tests.test_test_swapped_byte_order_real(func)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/_pocketfft/tests/test_real_transforms.py----------------------------------------
A:scipy.fft._pocketfft.tests.test_real_transforms.fftpack_test_dir->join(dirname(__file__), '..', '..', '..', 'fftpack', 'tests')
A:scipy.fft._pocketfft.tests.test_real_transforms.one->numpy.frombuffer(b'\x00\x00\x00\x00\x00\x00\x00\x80\xff?\x00\x00\x00\x00\x00\x00', dtype='<f16')
A:scipy.fft._pocketfft.tests.test_real_transforms.ref->get_reference_data()
A:scipy.fft._pocketfft.tests.test_real_transforms.MDATA->numpy.load(join(fftpack_test_dir, 'test.npz'))
A:scipy.fft._pocketfft.tests.test_real_transforms.FFTWDATA_DOUBLE->numpy.load(join(fftpack_test_dir, 'fftw_double_ref.npz'))
A:scipy.fft._pocketfft.tests.test_real_transforms.FFTWDATA_SINGLE->numpy.load(join(fftpack_test_dir, 'fftw_single_ref.npz'))
A:scipy.fft._pocketfft.tests.test_real_transforms.FFTWDATA_LONGDOUBLE->numpy.load(join(fftpack_test_dir, 'fftw_longdouble_ref.npz'))
A:scipy.fft._pocketfft.tests.test_real_transforms.x->numpy.random.RandomState(1234).rand(10)
A:scipy.fft._pocketfft.tests.test_real_transforms.dt->numpy.result_type(np.float32, rdt)
A:scipy.fft._pocketfft.tests.test_real_transforms.y->dst(x, norm='ortho', type=4)
A:scipy.fft._pocketfft.tests.test_real_transforms.x[row, :]->func(x[row, :], **kwargs)
A:scipy.fft._pocketfft.tests.test_real_transforms.x[:, col]->func(x[:, col], **kwargs)
A:scipy.fft._pocketfft.tests.test_real_transforms.N->len(x)
A:scipy.fft._pocketfft.tests.test_real_transforms.m0->numpy.sqrt(1.0 / M)
A:scipy.fft._pocketfft.tests.test_real_transforms.m->numpy.sqrt(2.0 / M)
A:scipy.fft._pocketfft.tests.test_real_transforms.(x, yr, dt)->fftw_dct_ref(type, fftwdata_size, rdt)
A:scipy.fft._pocketfft.tests.test_real_transforms.y2->ref_2d(func, fdata, type=dct_type, norm=norm)
A:scipy.fft._pocketfft.tests.test_real_transforms.xi->dct(y, norm='ortho', type=3)
A:scipy.fft._pocketfft.tests.test_real_transforms.(xr, yr, dt)->fftw_dst_ref(type, fftwdata_size, rdt)
A:scipy.fft._pocketfft.tests.test_real_transforms.x2->numpy.random.RandomState(1234).rand(10).copy()
A:scipy.fft._pocketfft.tests.test_real_transforms.rstate->numpy.random.RandomState(1234)
A:scipy.fft._pocketfft.tests.test_real_transforms.data->numpy.random.RandomState(1234).randn(*shape)
A:scipy.fft._pocketfft.tests.test_real_transforms.tmp->finverse(tmp, s=None, axes=axes, norm='ortho')
A:scipy.fft._pocketfft.tests.test_real_transforms.y1->funcn(fdata, type=dct_type, norm=norm)
A:scipy.fft._pocketfft.tests.test_real_transforms.fdata->dctn(self.data, type=dct_type, norm=norm)
A:scipy.fft._pocketfft.tests.test_real_transforms.rng->numpy.random.RandomState(1234)
A:scipy.fft._pocketfft.tests.test_real_transforms.swapped_dt->numpy.random.RandomState(1234).rand(10).dtype.newbyteorder('S')
scipy.fft._pocketfft.tests.test_real_transforms.TestDCT
scipy.fft._pocketfft.tests.test_real_transforms.TestDCT.test_axis(self,rdt,type,size)
scipy.fft._pocketfft.tests.test_real_transforms.TestDCT.test_definition(self,rdt,type,fftwdata_size)
scipy.fft._pocketfft.tests.test_real_transforms.Test_DCTN_IDCTN
scipy.fft._pocketfft.tests.test_real_transforms.Test_DCTN_IDCTN.test_axes_and_shape(self,fforward,finverse)
scipy.fft._pocketfft.tests.test_real_transforms.Test_DCTN_IDCTN.test_axes_round_trip(self,fforward,finverse,axes,dct_type,norm)
scipy.fft._pocketfft.tests.test_real_transforms.Test_DCTN_IDCTN.test_dctn_vs_2d_reference(self,funcn,func,dct_type,norm)
scipy.fft._pocketfft.tests.test_real_transforms.Test_DCTN_IDCTN.test_idctn_vs_2d_reference(self,funcn,func,dct_type,norm)
scipy.fft._pocketfft.tests.test_real_transforms.Test_DCTN_IDCTN.test_shape(self,fforward)
scipy.fft._pocketfft.tests.test_real_transforms.Test_DCTN_IDCTN.test_shape_is_none_with_axes(self,fforward,finverse,axes)
scipy.fft._pocketfft.tests.test_real_transforms.fftw_dct_ref(type,size,dt)
scipy.fft._pocketfft.tests.test_real_transforms.fftw_dst_ref(type,size,dt)
scipy.fft._pocketfft.tests.test_real_transforms.fftwdata_size(request)
scipy.fft._pocketfft.tests.test_real_transforms.get_reference_data()
scipy.fft._pocketfft.tests.test_real_transforms.is_longdouble_binary_compatible()
scipy.fft._pocketfft.tests.test_real_transforms.mdata_x(request)
scipy.fft._pocketfft.tests.test_real_transforms.mdata_xy(request)
scipy.fft._pocketfft.tests.test_real_transforms.naive_dct1(x,norm=None)
scipy.fft._pocketfft.tests.test_real_transforms.naive_dct4(x,norm=None)
scipy.fft._pocketfft.tests.test_real_transforms.naive_dst1(x,norm=None)
scipy.fft._pocketfft.tests.test_real_transforms.naive_dst4(x,norm=None)
scipy.fft._pocketfft.tests.test_real_transforms.ref_2d(func,x,**kwargs)
scipy.fft._pocketfft.tests.test_real_transforms.test_complex(transform,dtype)
scipy.fft._pocketfft.tests.test_real_transforms.test_dct1_definition_ortho(rdt,mdata_x)
scipy.fft._pocketfft.tests.test_real_transforms.test_dct2_definition_matlab(mdata_xy,rdt)
scipy.fft._pocketfft.tests.test_real_transforms.test_dct3_definition_ortho(mdata_x,rdt)
scipy.fft._pocketfft.tests.test_real_transforms.test_dct4_definition_ortho(mdata_x,rdt)
scipy.fft._pocketfft.tests.test_real_transforms.test_definition(fftwdata_size,rdt,type)
scipy.fft._pocketfft.tests.test_real_transforms.test_dst1_definition_ortho(rdt,mdata_x)
scipy.fft._pocketfft.tests.test_real_transforms.test_dst4_definition_ortho(rdt,mdata_x)
scipy.fft._pocketfft.tests.test_real_transforms.test_idct_definition(fftwdata_size,rdt,type)
scipy.fft._pocketfft.tests.test_real_transforms.test_idst_definition(fftwdata_size,rdt,type)
scipy.fft._pocketfft.tests.test_real_transforms.test_overwrite(routine,dtype,shape,axis,type,norm,overwrite_x)
scipy.fft._pocketfft.tests.test_real_transforms.test_swapped_byte_order(func)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fft/_pocketfft/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/deprecation.py----------------------------------------
A:scipy._lib.deprecation.old_name->'{}.{}'.format(module.__name__, routine_name)
A:scipy._lib.deprecation.fused_name->'__pyx_fuse_{}{}'.format(j, routine_name)
A:scipy._lib.deprecation.d[_DeprecationHelperStr(fused_name, depdoc)]->d.pop(fused_name)
A:scipy._lib.deprecation.d[_DeprecationHelperStr(routine_name, depdoc)]->d.pop(routine_name)
scipy._deprecated(msg,stacklevel=2)
scipy._lib.deprecation._DeprecationHelperStr(self,content,message)
scipy._lib.deprecation._DeprecationHelperStr.__eq__(self,other)
scipy._lib.deprecation._DeprecationHelperStr.__hash__(self)
scipy._lib.deprecation._DeprecationHelperStr.__init__(self,content,message)
scipy._lib.deprecation._deprecated(msg,stacklevel=2)
scipy._lib.deprecation.deprecate_cython_api(module,routine_name,new_name=None,message=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/_tmpdirs.py----------------------------------------
A:scipy._lib._tmpdirs.d->mkdtemp()
A:scipy._lib._tmpdirs.pwd->os.getcwd()
A:scipy._lib._tmpdirs.cwd->os.getcwd()
scipy._lib._tmpdirs.in_dir(dir=None)
scipy._lib._tmpdirs.in_tempdir()
scipy._lib._tmpdirs.tempdir()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/doccer.py----------------------------------------
A:scipy._lib.doccer.lines->docstring.expandtabs().splitlines()
A:scipy._lib.doccer.icount->indentcount_lines(lines)
A:scipy._lib.doccer.indented[name]->'\n'.join(newlines)
A:scipy._lib.doccer.end_of_notes->len(cls_docstring)
A:scipy._lib.doccer.start_of_notes->cls_docstring.find(notes_header)
A:scipy._lib.doccer.stripped->line.lstrip()
A:scipy._lib.doccer.indentno->min(indentno, len(line) - len(stripped))
A:scipy._lib.doccer.docdict->unindent_dict(docdict)
A:scipy._lib.doccer.f.__doc__->docformat(f.__doc__, docdict)
A:scipy._lib.doccer.can_dict[name]->unindent_string(dstr)
A:scipy._lib.doccer.doc->(obj.__doc__ or '').replace(oldval, newval)
scipy._lib.doccer.doc_replace(obj,oldval,newval)
scipy._lib.doccer.docformat(docstring,docdict=None)
scipy._lib.doccer.extend_notes_in_docstring(cls,notes)
scipy._lib.doccer.filldoc(docdict,unindent_params=True)
scipy._lib.doccer.indentcount_lines(lines)
scipy._lib.doccer.inherit_docstring_from(cls)
scipy._lib.doccer.replace_notes_in_docstring(cls,notes)
scipy._lib.doccer.unindent_dict(docdict)
scipy._lib.doccer.unindent_string(docstring)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/_gcutils.py----------------------------------------
A:scipy._lib._gcutils.orig_state->gc.isenabled()
A:scipy._lib._gcutils.obj->func(*args, **kwargs)
A:scipy._lib._gcutils.ref->weakref.ref(obj)
scipy._lib._gcutils.ReferenceError(AssertionError)
scipy._lib._gcutils.assert_deallocated(func,*args,**kwargs)
scipy._lib._gcutils.gc_state(state)
scipy._lib._gcutils.set_gc_state(state)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/_util.py----------------------------------------
A:scipy._lib._util.GeneratorType->TypeVar('GeneratorType', bound=Union[np.random.Generator, np.random.RandomState])
A:scipy._lib._util.cond->numpy.asarray(cond)
A:scipy._lib._util.args->numpy.broadcast_arrays(cond, *arrays)
A:scipy._lib._util.temp->tuple((np.extract(cond, arr) for arr in arrays))
A:scipy._lib._util.tcode->numpy.mintypecode([a.dtype.char for a in arrays])
A:scipy._lib._util.out->numpy.full(np.shape(arrays[0]), fill_value=default, dtype=tcode)
A:scipy._lib._util.arrays->numpy.broadcast_arrays(*arrays)
A:scipy._lib._util.(cond, _)->numpy.broadcast_arrays(cond, arrays[0])
A:scipy._lib._util.dtype->numpy.dtype(dtype)
A:scipy._lib._util.buf->numpy.empty(size + align + 1, np.uint8)
A:scipy._lib._util.data->numpy.ndarray(shape, dtype, buf, order=order)
A:scipy._lib._util.a->a.ravel().ravel()
A:scipy._lib._util.k->_argmin(np.isnan(a), axis=axis, keepdims=True)
A:scipy._lib._util.FullArgSpec->namedtuple('FullArgSpec', ['args', 'varargs', 'varkw', 'defaults', 'kwonlyargs', 'kwonlydefaults', 'annotations'])
A:scipy._lib._util.sig->inspect.signature(func)
A:scipy._lib._util.self.pool->Pool(processes=int(pool))
A:scipy._lib._util.res->numpy.expand_dims(res, axis=axis)
A:scipy._lib._util.a0->_first_nonnan(a, axis=axis)
A:scipy._lib._util.contains_nan->numpy.isnan(a).any()
A:scipy._lib._util.end_version->'.'.join(end_version)
A:scipy._lib._util.end_version[1]->str(int(end_version[1]) + 2)
A:scipy._lib._util.kwargs[new_name]->kwargs.pop(old_name)
scipy._lib._util.MapWrapper(self,pool=1)
scipy._lib._util.MapWrapper.__enter__(self)
scipy._lib._util.MapWrapper.__exit__(self,exc_type,exc_value,traceback)
scipy._lib._util.MapWrapper.__init__(self,pool=1)
scipy._lib._util.MapWrapper.close(self)
scipy._lib._util.MapWrapper.join(self)
scipy._lib._util.MapWrapper.terminate(self)
scipy._lib._util._FunctionWrapper(self,f,args)
scipy._lib._util._FunctionWrapper.__init__(self,f,args)
scipy._lib._util._aligned_zeros(shape,dtype=float,order='C',align=None)
scipy._lib._util._argmin(a,keepdims=False,axis=None)
scipy._lib._util._asarray_validated(a,check_finite=True,sparse_ok=False,objects_ok=False,mask_ok=False,as_inexact=False)
scipy._lib._util._contains_nan(a,nan_policy='propagate',use_summation=True)
scipy._lib._util._first_nonnan(a,axis)
scipy._lib._util._fixed_default_rng(seed=1638083107694713882823079058616272161)
scipy._lib._util._lazyselect(condlist,choicelist,arrays,default=0)
scipy._lib._util._lazywhere(cond,arrays,f,fillvalue=None,f2=None)
scipy._lib._util._nan_allsame(a,axis,keepdims=False)
scipy._lib._util._prune_array(array)
scipy._lib._util._rename_parameter(old_name,new_name,dep_version=None)
scipy._lib._util._rng_spawn(rng,n_children)
scipy._lib._util._validate_int(k,name,minimum=None)
scipy._lib._util.check_random_state(seed)
scipy._lib._util.float_factorial(n:int)->float
scipy._lib._util.getfullargspec_no_self(func)
scipy._lib._util.prod(iterable)
scipy._lib._util.rng_integers(gen,low,high=None,size=None,dtype='int64',endpoint=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/decorator.py----------------------------------------
A:scipy._lib.decorator.ArgSpec->collections.namedtuple('ArgSpec', 'args varargs varkw defaults')
A:scipy._lib.decorator.spec->getfullargspec(f)
A:scipy._lib.decorator.DEF->re.compile('\\s*def\\s*([_\\w][_\\w\\d]*)\\s*\\(')
A:scipy._lib.decorator._compile_count->itertools.count()
A:scipy._lib.decorator.argspec->getfullargspec(func)
A:scipy._lib.decorator.self.annotations->getattr(func, '__annotations__', {})
A:scipy._lib.decorator.allargs->list(self.args)
A:scipy._lib.decorator.allshortargs->list(self.args)
A:scipy._lib.decorator.self.signature->', '.join(allargs)
A:scipy._lib.decorator.self.shortsignature->', '.join(allshortargs)
A:scipy._lib.decorator.self.dict->func.__dict__.copy()
A:scipy._lib.decorator.func.__doc__->getattr(self, 'doc', None)
A:scipy._lib.decorator.func.__dict__->getattr(self, 'dict', {})
A:scipy._lib.decorator.func.__defaults__->getattr(self, 'defaults', ())
A:scipy._lib.decorator.func.__kwdefaults__->getattr(self, 'kwonlydefaults', None)
A:scipy._lib.decorator.func.__annotations__->getattr(self, 'annotations', None)
A:scipy._lib.decorator.frame->sys._getframe(3)
A:scipy._lib.decorator.callermodule->sys._getframe(3).f_globals.get('__name__', '?')
A:scipy._lib.decorator.func.__module__->getattr(self, 'module', callermodule)
A:scipy._lib.decorator.mo->re.compile('\\s*def\\s*([_\\w][_\\w\\d]*)\\s*\\(').match(src)
A:scipy._lib.decorator.name->caller.__class__.__name__.lower()
A:scipy._lib.decorator.names->set([name] + [arg.strip(' *') for arg in self.shortsignature.split(',')])
A:scipy._lib.decorator.code->compile(src, filename, 'single')
A:scipy._lib.decorator.(name, rest)->obj.strip().split('(', 1)
A:scipy._lib.decorator.self->cls(func, name, signature, defaults, doc, module)
A:scipy._lib.decorator.ibody->'\n'.join(('    ' + line for line in body.splitlines()))
A:scipy._lib.decorator.evaldict->get_init(caller).__globals__.copy()
A:scipy._lib.decorator.fun->FunctionMaker.create(func, 'return _call_(_func_, %(shortsignature)s)', evaldict, __wrapped__=func)
A:scipy._lib.decorator.callerfunc->get_init(caller)
A:scipy._lib.decorator.init->getfullargspec(_GeneratorContextManager.__init__)
A:scipy._lib.decorator.n_args->len(init.args)
A:scipy._lib.decorator.contextmanager->decorator(ContextManager)
A:scipy._lib.decorator.argset->set(getfullargspec(func).args)
A:scipy._lib.decorator.n_vas->len(vas)
A:scipy._lib.decorator.types->tuple((type(arg) for arg in dispatch_args))
A:scipy._lib.decorator.combinations->itertools.product(*ancestors(*types))
A:scipy._lib.decorator.f->typemap.get(types_)
scipy._lib.decorator.ContextManager(self,func)
scipy._lib.decorator.ContextManager.__call__(self,func)
scipy._lib.decorator.FunctionMaker(self,func=None,name=None,signature=None,defaults=None,doc=None,module=None,funcdict=None)
scipy._lib.decorator.FunctionMaker.__init__(self,func=None,name=None,signature=None,defaults=None,doc=None,module=None,funcdict=None)
scipy._lib.decorator.FunctionMaker.create(cls,obj,body,evaldict,defaults=None,doc=None,module=None,addsource=True,**attrs)
scipy._lib.decorator.FunctionMaker.make(self,src_templ,evaldict=None,addsource=False,**attrs)
scipy._lib.decorator.FunctionMaker.update(self,func,**kw)
scipy._lib.decorator.append(a,vancestors)
scipy._lib.decorator.decorate(func,caller)
scipy._lib.decorator.decorator(caller,_func=None)
scipy._lib.decorator.dispatch_on(*dispatch_args)
scipy._lib.decorator.get_init(cls)
scipy._lib.decorator.getargspec(f)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/_bunch.py----------------------------------------
A:scipy._lib._bunch.seen->set()
A:scipy._lib._bunch.typename->sys.intern(str(typename))
A:scipy._lib._bunch.field_names->tuple(map(_sys.intern, field_names))
A:scipy._lib._bunch.extra_field_names->tuple(map(_sys.intern, extra_field_names))
A:scipy._lib._bunch.arg_list->', '.join(field_names)
A:scipy._lib._bunch.full_list->', '.join(all_names)
A:scipy._lib._bunch.repr_fmt->''.join(('(', ', '.join((f'{name}=%({name})r' for name in all_names)), ')'))
A:scipy._lib._bunch.out->_dict(_zip(self._fields, self))
A:scipy._lib._bunch.class_namespace[name]->property(_get)
A:scipy._lib._bunch.result->type(typename, (tuple,), class_namespace)
A:scipy._lib._bunch.module->sys._getframe(1).f_globals.get('__name__', '__main__')
scipy._lib._bunch._make_tuple_bunch(typename,field_names,extra_field_names=None,module=None)
scipy._lib._bunch._validate_names(typename,field_names,extra_field_names)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/uarray.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/_testutils.py----------------------------------------
A:scipy._lib._testutils.module_path->os.path.abspath(module.__path__[0])
A:scipy._lib._testutils.code->pytest.main(pytest_args)
A:scipy._lib._testutils.signature->inspect.signature(func)
A:scipy._lib._testutils.cur_len->len(self.arguments[arg_idx][1])
A:scipy._lib._testutils.new_dtype->self.get_dtype(self.arguments[arg_idx][1], type_idx)
A:scipy._lib._testutils.mem_free->_get_mem_available()
A:scipy._lib._testutils.msg->'{0} MB memory required, but {1} MB available'.format(free_mb, mem_free / 1000000.0)
A:scipy._lib._testutils.m->re.match('^\\s*(\\d+)\\s*({0})\\s*$'.format('|'.join(suffixes.keys())), size_str, re.I)
A:scipy._lib._testutils.p->line.split()
scipy._lib.PytestTester(self,module_name)
scipy._lib._testutils.FPUModeChangeWarning(RuntimeWarning)
scipy._lib._testutils.PytestTester(self,module_name)
scipy._lib._testutils.PytestTester.__init__(self,module_name)
scipy._lib._testutils._TestPythranFunc
scipy._lib._testutils._TestPythranFunc.get_dtype(self,dtype_list,dtype_idx)
scipy._lib._testutils._TestPythranFunc.get_max_dtype_list_length(self)
scipy._lib._testutils._TestPythranFunc.get_optional_args(self,func)
scipy._lib._testutils._TestPythranFunc.setup_method(self)
scipy._lib._testutils._TestPythranFunc.test_all_dtypes(self)
scipy._lib._testutils._TestPythranFunc.test_strided(self)
scipy._lib._testutils._TestPythranFunc.test_views(self)
scipy._lib._testutils._get_mem_available()
scipy._lib._testutils._parse_size(size_str)
scipy._lib._testutils._pytest_has_xdist()
scipy._lib._testutils.check_free_memory(free_mb)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/_disjoint_set.py----------------------------------------
A:scipy._lib._disjoint_set.self._indices[x]->len(self._indices)
A:scipy._lib._disjoint_set.visited->set()
A:scipy._lib._disjoint_set.xset->self.subset(x)
scipy._lib._disjoint_set.DisjointSet(self,elements=None)
scipy._lib._disjoint_set.DisjointSet.__contains__(self,x)
scipy._lib._disjoint_set.DisjointSet.__getitem__(self,x)
scipy._lib._disjoint_set.DisjointSet.__init__(self,elements=None)
scipy._lib._disjoint_set.DisjointSet.__iter__(self)
scipy._lib._disjoint_set.DisjointSet.__len__(self)
scipy._lib._disjoint_set.DisjointSet.add(self,x)
scipy._lib._disjoint_set.DisjointSet.connected(self,x,y)
scipy._lib._disjoint_set.DisjointSet.merge(self,x,y)
scipy._lib._disjoint_set.DisjointSet.subset(self,x)
scipy._lib._disjoint_set.DisjointSet.subsets(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/_finite_differences.py----------------------------------------
A:scipy._lib._finite_differences.x->arange(-ho, ho + 1.0)
A:scipy._lib._finite_differences.X->hstack([X, x ** k])
A:scipy._lib._finite_differences.weights->_central_diff_weights(order, n)
scipy._lib._finite_differences._central_diff_weights(Np,ndiv=1)
scipy._lib._finite_differences._derivative(func,x0,dx=1.0,n=1,args=(),order=3)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/_pep440.py----------------------------------------
A:scipy._lib._pep440.Infinity->Infinity()
A:scipy._lib._pep440.NegativeInfinity->NegativeInfinity()
A:scipy._lib._pep440._Version->collections.namedtuple('_Version', ['epoch', 'release', 'dev', 'pre', 'post', 'local'])
A:scipy._lib._pep440.self._version->_Version(epoch=int(match.group('epoch')) if match.group('epoch') else 0, release=tuple((int(i) for i in match.group('release').split('.'))), pre=_parse_letter_version(match.group('pre_l'), match.group('pre_n')), post=_parse_letter_version(match.group('post_l'), match.group('post_n1') or match.group('post_n2')), dev=_parse_letter_version(match.group('dev_l'), match.group('dev_n')), local=_parse_local_version(match.group('local')))
A:scipy._lib._pep440.self._key->_cmpkey(self._version.epoch, self._version.release, self._version.pre, self._version.post, self._version.dev, self._version.local)
A:scipy._lib._pep440._legacy_version_component_re->re.compile('(\\d+ | [a-z]+ | \\.| -)', re.VERBOSE)
A:scipy._lib._pep440.part->_legacy_version_replacement_map.get(part, part)
A:scipy._lib._pep440.parts->tuple(parts)
A:scipy._lib._pep440._regex->re.compile('^\\s*' + VERSION_PATTERN + '\\s*$', re.VERBOSE | re.IGNORECASE)
A:scipy._lib._pep440.match->self._regex.search(version)
A:scipy._lib._pep440.version_string->str(self)
A:scipy._lib._pep440.letter->letter.lower().lower()
A:scipy._lib._pep440._local_version_seperators->re.compile('[\\._-]')
A:scipy._lib._pep440.release->tuple(reversed(list(itertools.dropwhile(lambda x: x == 0, reversed(release)))))
A:scipy._lib._pep440.local->tuple(((i, '') if isinstance(i, int) else (-Infinity, i) for i in local))
scipy._lib._pep440.Infinity
scipy._lib._pep440.Infinity.__eq__(self,other)
scipy._lib._pep440.Infinity.__ge__(self,other)
scipy._lib._pep440.Infinity.__gt__(self,other)
scipy._lib._pep440.Infinity.__hash__(self)
scipy._lib._pep440.Infinity.__le__(self,other)
scipy._lib._pep440.Infinity.__lt__(self,other)
scipy._lib._pep440.Infinity.__ne__(self,other)
scipy._lib._pep440.Infinity.__neg__(self)
scipy._lib._pep440.Infinity.__repr__(self)
scipy._lib._pep440.InvalidVersion(ValueError)
scipy._lib._pep440.LegacyVersion(self,version)
scipy._lib._pep440.LegacyVersion.__init__(self,version)
scipy._lib._pep440.LegacyVersion.__repr__(self)
scipy._lib._pep440.LegacyVersion.__str__(self)
scipy._lib._pep440.LegacyVersion.base_version(self)
scipy._lib._pep440.LegacyVersion.is_postrelease(self)
scipy._lib._pep440.LegacyVersion.is_prerelease(self)
scipy._lib._pep440.LegacyVersion.local(self)
scipy._lib._pep440.LegacyVersion.public(self)
scipy._lib._pep440.NegativeInfinity
scipy._lib._pep440.NegativeInfinity.__eq__(self,other)
scipy._lib._pep440.NegativeInfinity.__ge__(self,other)
scipy._lib._pep440.NegativeInfinity.__gt__(self,other)
scipy._lib._pep440.NegativeInfinity.__hash__(self)
scipy._lib._pep440.NegativeInfinity.__le__(self,other)
scipy._lib._pep440.NegativeInfinity.__lt__(self,other)
scipy._lib._pep440.NegativeInfinity.__ne__(self,other)
scipy._lib._pep440.NegativeInfinity.__neg__(self)
scipy._lib._pep440.NegativeInfinity.__repr__(self)
scipy._lib._pep440.Version(self,version)
scipy._lib._pep440.Version.__init__(self,version)
scipy._lib._pep440.Version.__repr__(self)
scipy._lib._pep440.Version.__str__(self)
scipy._lib._pep440.Version.base_version(self)
scipy._lib._pep440.Version.is_postrelease(self)
scipy._lib._pep440.Version.is_prerelease(self)
scipy._lib._pep440.Version.local(self)
scipy._lib._pep440.Version.public(self)
scipy._lib._pep440._BaseVersion
scipy._lib._pep440._BaseVersion.__eq__(self,other)
scipy._lib._pep440._BaseVersion.__ge__(self,other)
scipy._lib._pep440._BaseVersion.__gt__(self,other)
scipy._lib._pep440._BaseVersion.__hash__(self)
scipy._lib._pep440._BaseVersion.__le__(self,other)
scipy._lib._pep440._BaseVersion.__lt__(self,other)
scipy._lib._pep440._BaseVersion.__ne__(self,other)
scipy._lib._pep440._BaseVersion._compare(self,other,method)
scipy._lib._pep440._cmpkey(epoch,release,pre,post,dev,local)
scipy._lib._pep440._legacy_cmpkey(version)
scipy._lib._pep440._parse_letter_version(letter,number)
scipy._lib._pep440._parse_local_version(local)
scipy._lib._pep440._parse_version_parts(s)
scipy._lib._pep440.parse(version)
scipy._pep440.Infinity
scipy._pep440.Infinity.__eq__(self,other)
scipy._pep440.Infinity.__ge__(self,other)
scipy._pep440.Infinity.__gt__(self,other)
scipy._pep440.Infinity.__hash__(self)
scipy._pep440.Infinity.__le__(self,other)
scipy._pep440.Infinity.__lt__(self,other)
scipy._pep440.Infinity.__ne__(self,other)
scipy._pep440.Infinity.__neg__(self)
scipy._pep440.Infinity.__repr__(self)
scipy._pep440.InvalidVersion(ValueError)
scipy._pep440.LegacyVersion(self,version)
scipy._pep440.LegacyVersion.__repr__(self)
scipy._pep440.LegacyVersion.__str__(self)
scipy._pep440.LegacyVersion.base_version(self)
scipy._pep440.LegacyVersion.is_postrelease(self)
scipy._pep440.LegacyVersion.is_prerelease(self)
scipy._pep440.LegacyVersion.local(self)
scipy._pep440.LegacyVersion.public(self)
scipy._pep440.NegativeInfinity
scipy._pep440.NegativeInfinity.__eq__(self,other)
scipy._pep440.NegativeInfinity.__ge__(self,other)
scipy._pep440.NegativeInfinity.__gt__(self,other)
scipy._pep440.NegativeInfinity.__hash__(self)
scipy._pep440.NegativeInfinity.__le__(self,other)
scipy._pep440.NegativeInfinity.__lt__(self,other)
scipy._pep440.NegativeInfinity.__ne__(self,other)
scipy._pep440.NegativeInfinity.__neg__(self)
scipy._pep440.NegativeInfinity.__repr__(self)
scipy._pep440.Version(self,version)
scipy._pep440.Version.__repr__(self)
scipy._pep440.Version.__str__(self)
scipy._pep440.Version.base_version(self)
scipy._pep440.Version.is_postrelease(self)
scipy._pep440.Version.is_prerelease(self)
scipy._pep440.Version.local(self)
scipy._pep440.Version.public(self)
scipy._pep440._BaseVersion
scipy._pep440._BaseVersion.__eq__(self,other)
scipy._pep440._BaseVersion.__ge__(self,other)
scipy._pep440._BaseVersion.__gt__(self,other)
scipy._pep440._BaseVersion.__hash__(self)
scipy._pep440._BaseVersion.__le__(self,other)
scipy._pep440._BaseVersion.__lt__(self,other)
scipy._pep440._BaseVersion.__ne__(self,other)
scipy._pep440._BaseVersion._compare(self,other,method)
scipy._pep440._cmpkey(epoch,release,pre,post,dev,local)
scipy._pep440._legacy_cmpkey(version)
scipy._pep440._parse_letter_version(letter,number)
scipy._pep440._parse_local_version(local)
scipy._pep440._parse_version_parts(s)
scipy._pep440.parse(version)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/_threadsafety.py----------------------------------------
A:scipy._lib._threadsafety.self._rlock->threading.RLock()
A:scipy._lib._threadsafety.lock->ReentrancyLock(msg)
scipy._lib._threadsafety.ReentrancyError(RuntimeError)
scipy._lib._threadsafety.ReentrancyLock(self,err_msg)
scipy._lib._threadsafety.ReentrancyLock.__enter__(self)
scipy._lib._threadsafety.ReentrancyLock.__exit__(self,type,value,traceback)
scipy._lib._threadsafety.ReentrancyLock.__init__(self,err_msg)
scipy._lib._threadsafety.ReentrancyLock.decorate(self,func)
scipy._lib._threadsafety.non_reentrant(err_msg=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/__init__.py----------------------------------------
A:scipy._lib.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/_ccallback.py----------------------------------------
A:scipy._lib._ccallback.ffi->cffi.FFI()
A:scipy._lib._ccallback.item->cls._parse_callback(function, user_data, signature)
A:scipy._lib._ccallback.func->tuple.__getitem__(obj, 0)
A:scipy._lib._ccallback.(func, signature)->_get_cffi_func(obj, signature)
A:scipy._lib._ccallback.context->_get_cffi_data(user_data)
A:scipy._lib._ccallback.func_ptr->cffi.FFI().cast('uintptr_t', func)
A:scipy._lib._ccallback.signature->cffi.FFI().getctype(ffi.typeof(func)).replace('(*)', ' ')
scipy.LowLevelCallable(cls,function,user_data=None,signature=None)
scipy.LowLevelCallable.__getitem__(self,idx)
scipy.LowLevelCallable.__repr__(self)
scipy.LowLevelCallable._parse_callback(cls,obj,user_data=None,signature=None)
scipy.LowLevelCallable.from_cython(cls,module,name,user_data=None,signature=None)
scipy.LowLevelCallable.function(self)
scipy.LowLevelCallable.signature(self)
scipy.LowLevelCallable.user_data(self)
scipy._lib._ccallback.CData
scipy._lib._ccallback.LowLevelCallable(cls,function,user_data=None,signature=None)
scipy._lib._ccallback.LowLevelCallable.__getitem__(self,idx)
scipy._lib._ccallback.LowLevelCallable.__new__(cls,function,user_data=None,signature=None)
scipy._lib._ccallback.LowLevelCallable.__repr__(self)
scipy._lib._ccallback.LowLevelCallable._parse_callback(cls,obj,user_data=None,signature=None)
scipy._lib._ccallback.LowLevelCallable.from_cython(cls,module,name,user_data=None,signature=None)
scipy._lib._ccallback.LowLevelCallable.function(self)
scipy._lib._ccallback.LowLevelCallable.signature(self)
scipy._lib._ccallback.LowLevelCallable.user_data(self)
scipy._lib._ccallback._get_cffi_data(data)
scipy._lib._ccallback._get_cffi_func(func,signature=None)
scipy._lib._ccallback._get_ctypes_data(data)
scipy._lib._ccallback._get_ctypes_func(func,signature=None)
scipy._lib._ccallback._import_cffi()
scipy._lib._ccallback._typename_from_ctypes(item)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/_docscrape.py----------------------------------------
A:scipy._lib._docscrape.self._str->self._read_to_next_section().split('\n')
A:scipy._lib._docscrape.Parameter->namedtuple('Parameter', ['name', 'type', 'desc'])
A:scipy._lib._docscrape.docstring->textwrap.dedent(docstring).split('\n')
A:scipy._lib._docscrape.self._doc->Reader(docstring)
A:scipy._lib._docscrape.self._parsed_data->copy.deepcopy(self.sections)
A:scipy._lib._docscrape.l1->self._doc.peek().strip()
A:scipy._lib._docscrape.l2->self._doc.peek(1).strip()
A:scipy._lib._docscrape.section->' '.join(section)
A:scipy._lib._docscrape.data->self._read_to_next_section()
A:scipy._lib._docscrape.name->data[0].strip()
A:scipy._lib._docscrape.r->Reader(content)
A:scipy._lib._docscrape.header->Reader(content).read().strip()
A:scipy._lib._docscrape.desc->strip_blank_lines(desc)
A:scipy._lib._docscrape._funcnamenext->_funcnamenext.replace('name', 'namenext').replace('name', 'namenext')
A:scipy._lib._docscrape._func_rgx->re.compile('^\\s*' + _funcname + '\\s*')
A:scipy._lib._docscrape._line_rgx->re.compile('^\\s*' + '(?P<allfuncs>' + _funcname + '(?P<morefuncs>([,]\\s+' + _funcnamenext + ')*)' + ')' + '(?P<trailing>[,\\.])?' + _description)
A:scipy._lib._docscrape.m->self._func_rgx.match(text)
A:scipy._lib._docscrape.role->self._func_rgx.match(text).group('role')
A:scipy._lib._docscrape.line_match->self._line_rgx.match(line)
A:scipy._lib._docscrape.description->self._line_rgx.match(line).group('desc')
A:scipy._lib._docscrape.text->text[1:].strip()
A:scipy._lib._docscrape.(name, role, match_end)->parse_item_name(text)
A:scipy._lib._docscrape.rest->list(filter(None, [description]))
A:scipy._lib._docscrape.line->line.split(':').split(':')
A:scipy._lib._docscrape.out[line[1]]->strip_each_in(line[2].split(','))
A:scipy._lib._docscrape.summary->self._doc.read_to_next_empty_line()
A:scipy._lib._docscrape.summary_str->' '.join([s.strip() for s in summary]).strip()
A:scipy._lib._docscrape.compiled->re.compile('^([\\w., ]+=)?\\s*[\\w\\.]+\\(.*\\)$')
A:scipy._lib._docscrape.self['Extended Summary']->self._read_to_next_section()
A:scipy._lib._docscrape.sections->list(self._read_sections())
A:scipy._lib._docscrape.section_names->set([section for (section, content) in sections])
A:scipy._lib._docscrape.self[section]->self._parse_param_list(content, single_element_is_type=True)
A:scipy._lib._docscrape.self['index']->self._parse_index(section, content)
A:scipy._lib._docscrape.self['See Also']->self._parse_see_also(content)
A:scipy._lib._docscrape.filename->inspect.getsourcefile(self._obj)
A:scipy._lib._docscrape.link->', '.join(links)
A:scipy._lib._docscrape.default_index->idx.get('default', '')
A:scipy._lib._docscrape.lines->str.split('\n')
A:scipy._lib._docscrape.func_name->getattr(self._f, '__name__', self.__class__.__name__)
A:scipy._lib._docscrape.func->getattr(self._f, '__call__', self._f.__init__)
A:scipy._lib._docscrape.(func, func_name)->self.get_func()
A:scipy._lib._docscrape.ALL->object()
A:scipy._lib._docscrape.self.show_inherited_members->config.get('show_inherited_class_members', True)
A:scipy._lib._docscrape.doc->pydoc.getdoc(cls)
A:scipy._lib._docscrape._members->config.get('members', [])
A:scipy._lib._docscrape._exclude->config.get('exclude-members', [])
A:scipy._lib._docscrape.doc_item->pydoc.getdoc(getattr(self._cls, name))
scipy._lib._docscrape.ClassDoc(self,cls,doc=None,modulename='',func_doc=FunctionDoc,config={})
scipy._lib._docscrape.ClassDoc.__init__(self,cls,doc=None,modulename='',func_doc=FunctionDoc,config={})
scipy._lib._docscrape.ClassDoc._is_show_member(self,name)
scipy._lib._docscrape.ClassDoc.methods(self)
scipy._lib._docscrape.ClassDoc.properties(self)
scipy._lib._docscrape.FunctionDoc(self,func,role='func',doc=None,config={})
scipy._lib._docscrape.FunctionDoc.__init__(self,func,role='func',doc=None,config={})
scipy._lib._docscrape.FunctionDoc.__str__(self)
scipy._lib._docscrape.FunctionDoc.get_func(self)
scipy._lib._docscrape.NumpyDocString(self,docstring,config={})
scipy._lib._docscrape.NumpyDocString.__getitem__(self,key)
scipy._lib._docscrape.NumpyDocString.__init__(self,docstring,config={})
scipy._lib._docscrape.NumpyDocString.__iter__(self)
scipy._lib._docscrape.NumpyDocString.__len__(self)
scipy._lib._docscrape.NumpyDocString.__setitem__(self,key,val)
scipy._lib._docscrape.NumpyDocString.__str__(self,func_role='')
scipy._lib._docscrape.NumpyDocString._error_location(self,msg,error=True)
scipy._lib._docscrape.NumpyDocString._is_at_section(self)
scipy._lib._docscrape.NumpyDocString._parse(self)
scipy._lib._docscrape.NumpyDocString._parse_index(self,section,content)
scipy._lib._docscrape.NumpyDocString._parse_param_list(self,content,single_element_is_type=False)
scipy._lib._docscrape.NumpyDocString._parse_see_also(self,content)
scipy._lib._docscrape.NumpyDocString._parse_summary(self)
scipy._lib._docscrape.NumpyDocString._read_sections(self)
scipy._lib._docscrape.NumpyDocString._read_to_next_section(self)
scipy._lib._docscrape.NumpyDocString._str_extended_summary(self)
scipy._lib._docscrape.NumpyDocString._str_header(self,name,symbol='-')
scipy._lib._docscrape.NumpyDocString._str_indent(self,doc,indent=4)
scipy._lib._docscrape.NumpyDocString._str_index(self)
scipy._lib._docscrape.NumpyDocString._str_param_list(self,name)
scipy._lib._docscrape.NumpyDocString._str_section(self,name)
scipy._lib._docscrape.NumpyDocString._str_see_also(self,func_role)
scipy._lib._docscrape.NumpyDocString._str_signature(self)
scipy._lib._docscrape.NumpyDocString._str_summary(self)
scipy._lib._docscrape.NumpyDocString._strip(self,doc)
scipy._lib._docscrape.ParseError(Exception)
scipy._lib._docscrape.ParseError.__str__(self)
scipy._lib._docscrape.Reader(self,data)
scipy._lib._docscrape.Reader.__getitem__(self,n)
scipy._lib._docscrape.Reader.__init__(self,data)
scipy._lib._docscrape.Reader.eof(self)
scipy._lib._docscrape.Reader.is_empty(self)
scipy._lib._docscrape.Reader.peek(self,n=0)
scipy._lib._docscrape.Reader.read(self)
scipy._lib._docscrape.Reader.read_to_condition(self,condition_func)
scipy._lib._docscrape.Reader.read_to_next_empty_line(self)
scipy._lib._docscrape.Reader.read_to_next_unindented_line(self)
scipy._lib._docscrape.Reader.reset(self)
scipy._lib._docscrape.Reader.seek_next_non_empty_line(self)
scipy._lib._docscrape.dedent_lines(lines)
scipy._lib._docscrape.header(text,style='-')
scipy._lib._docscrape.indent(str,indent=4)
scipy._lib._docscrape.strip_blank_lines(l)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/tests/test_scipy_version.py----------------------------------------
A:scipy._lib.tests.test_scipy_version.res->re.match(version_pattern + dev_suffix, scipy.__version__)
scipy._lib.tests.test_scipy_version.test_valid_scipy_version()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/tests/test__testutils.py----------------------------------------
A:scipy._lib.tests.test__testutils.available->_get_mem_available()
scipy._lib.tests.test__testutils.test__mem_available()
scipy._lib.tests.test__testutils.test__parse_size()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/tests/test_import_cycles.py----------------------------------------
A:scipy._lib.tests.test_import_cycles.cmd->'import {}'.format(module)
scipy._lib.tests.test_import_cycles.test_modules_importable()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/tests/test_public_api.py----------------------------------------
A:scipy._lib.tests.test_public_api.item->getattr(module, name)
A:scipy._lib.tests.test_public_api.module->importlib.import_module(mod_name)
A:scipy._lib.tests.test_public_api.objnames->dir(module)
A:scipy._lib.tests.test_public_api.unexpected_members->find_unexpected_members('scipy')
scipy._lib.tests.test_public_api.check_dir(module,module_name=None)
scipy._lib.tests.test_public_api.is_unexpected(name)
scipy._lib.tests.test_public_api.test_all_modules_are_expected()
scipy._lib.tests.test_public_api.test_all_modules_are_expected_2()
scipy._lib.tests.test_public_api.test_api_importable()
scipy._lib.tests.test_public_api.test_dir_testing()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/tests/test__util.py----------------------------------------
A:scipy._lib.tests.test__util.err_msg->repr((shape, dtype, order, align))
A:scipy._lib.tests.test__util.x->scipy.finfo(scipy.float32)
A:scipy._lib.tests.test__util.rsi->check_random_state(rg)
A:scipy._lib.tests.test__util.rg->numpy.random.Generator(np.random.PCG64())
A:scipy._lib.tests.test__util.p->MapWrapper(0)
A:scipy._lib.tests.test__util.argspec->getfullargspec_no_self(rv_obj._rvs)
A:scipy._lib.tests.test__util.rv_obj->_rv_generic()
A:scipy._lib.tests.test__util.in_arg->numpy.arange(10.0)
A:scipy._lib.tests.test__util.out_arg->numpy.sin(in_arg)
A:scipy._lib.tests.test__util.out->MapWrapper(0).map(np.sin, in_arg)
A:scipy._lib.tests.test__util.q->MapWrapper(p.map)
A:scipy._lib.tests.test__util.func->getattr(scipy, key)
A:scipy._lib.tests.test__util.func_np->getattr(root, key)
A:scipy._lib.tests.test__util.rng->numpy.random.default_rng()
A:scipy._lib.tests.test__util.arr->rng_integers(rng, low=5, size=100, endpoint=False)
A:scipy._lib.tests.test__util.n->_validate_int(n, 'n')
A:scipy._lib.tests.test__util.res1->self.old_keyword_deprecated(10)
A:scipy._lib.tests.test__util.res2->self.old_keyword_deprecated(new=10)
A:scipy._lib.tests.test__util.res3->self.old_keyword_deprecated(old=10)
A:scipy._lib.tests.test__util.message->re.escape('old_keyword_deprecated() got multiple')
A:scipy._lib.tests.test__util.data->numpy.array([1, 2, 3, np.nan])
A:scipy._lib.tests.test__util.(contains_nan, nan_policy)->_contains_nan(data, nan_policy='omit')
A:scipy._lib.tests.test__util.data1->numpy.array([[1, 2], [3, 4]])
A:scipy._lib.tests.test__util.data2->numpy.array([[1, 2], [3, np.nan]])
A:scipy._lib.tests.test__util.data3->numpy.array([['1', 2], [3, np.nan]])
A:scipy._lib.tests.test__util.data4->numpy.array([['1', 2], [3, np.nan]], dtype='object')
A:scipy._lib.tests.test__util.data5->numpy.array([1, 2, '3', np.nan], dtype='object')
scipy._lib.tests.test__util.TestContainsNaNTest
scipy._lib.tests.test__util.TestContainsNaNTest.test_contains_nan_1d(self)
scipy._lib.tests.test__util.TestContainsNaNTest.test_contains_nan_2d(self)
scipy._lib.tests.test__util.TestContainsNaNTest.test_policy(self)
scipy._lib.tests.test__util.TestRenameParameter
scipy._lib.tests.test__util.TestRenameParameter.old_keyword_deprecated(self,new)
scipy._lib.tests.test__util.TestRenameParameter.old_keyword_still_accepted(self,new)
scipy._lib.tests.test__util.TestRenameParameter.test_old_keyword_deprecated(self)
scipy._lib.tests.test__util.TestRenameParameter.test_old_keyword_still_accepted(self)
scipy._lib.tests.test__util.TestValidateInt
scipy._lib.tests.test__util.TestValidateInt.test_validate_int(self,n)
scipy._lib.tests.test__util.TestValidateInt.test_validate_int_bad(self,n)
scipy._lib.tests.test__util.TestValidateInt.test_validate_int_below_min(self)
scipy._lib.tests.test__util.test__aligned_zeros()
scipy._lib.tests.test__util.test_check_random_state()
scipy._lib.tests.test__util.test_getfullargspec_no_self()
scipy._lib.tests.test__util.test_mapwrapper_parallel()
scipy._lib.tests.test__util.test_mapwrapper_serial()
scipy._lib.tests.test__util.test_numpy_deprecation(key)
scipy._lib.tests.test__util.test_numpy_deprecation_functionality()
scipy._lib.tests.test__util.test_pool()
scipy._lib.tests.test__util.test_rng_integers()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/tests/test_warnings.py----------------------------------------
A:scipy._lib.tests.test_warnings.p->ParseCall()
A:scipy._lib.tests.test_warnings.tree->ast.parse(file.read(), filename=str(path))
A:scipy._lib.tests.test_warnings.finder->FindFuncs(path.relative_to(base))
scipy._lib.tests.test_warnings.FindFuncs(self,filename)
scipy._lib.tests.test_warnings.FindFuncs.__init__(self,filename)
scipy._lib.tests.test_warnings.FindFuncs.visit_Call(self,node)
scipy._lib.tests.test_warnings.ParseCall(self)
scipy._lib.tests.test_warnings.ParseCall.__init__(self)
scipy._lib.tests.test_warnings.ParseCall.visit_Attribute(self,node)
scipy._lib.tests.test_warnings.ParseCall.visit_Name(self,node)
scipy._lib.tests.test_warnings.test_warning_calls_filters(warning_calls)
scipy._lib.tests.test_warnings.test_warning_calls_stacklevels(warning_calls)
scipy._lib.tests.test_warnings.warning_calls()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/tests/test_deprecation.py----------------------------------------
scipy._lib.tests.test_deprecation.test_cython_api_deprecation()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/tests/test__threadsafety.py----------------------------------------
A:scipy._lib.tests.test__threadsafety.lock->ReentrancyLock('failure')
A:scipy._lib.tests.test__threadsafety.exceptions_raised->'\n'.join(exceptions_raised)
scipy._lib.tests.test__threadsafety.test_parallel_threads()
scipy._lib.tests.test__threadsafety.test_reentering()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/tests/test__gcutils.py----------------------------------------
A:scipy._lib.tests.test__gcutils.gc_status->gc.isenabled()
scipy._lib.tests.test__gcutils.test_assert_deallocated()
scipy._lib.tests.test__gcutils.test_assert_deallocated_circular()
scipy._lib.tests.test__gcutils.test_assert_deallocated_circular2()
scipy._lib.tests.test__gcutils.test_assert_deallocated_nodel()
scipy._lib.tests.test__gcutils.test_gc_state()
scipy._lib.tests.test__gcutils.test_set_gc_state()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/tests/test__pep440.py----------------------------------------
scipy._lib.tests.test__pep440.test_alpha_beta_rc()
scipy._lib.tests.test__pep440.test_dev0_a_b_rc_mixed()
scipy._lib.tests.test__pep440.test_dev0_version()
scipy._lib.tests.test__pep440.test_dev_a_b_rc_mixed()
scipy._lib.tests.test__pep440.test_dev_version()
scipy._lib.tests.test__pep440.test_legacy_version()
scipy._lib.tests.test__pep440.test_main_versions()
scipy._lib.tests.test__pep440.test_raises()
scipy._lib.tests.test__pep440.test_version_1_point_10()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/tests/test_tmpdirs.py----------------------------------------
A:scipy._lib.tests.test_tmpdirs.MY_PATH->abspath(__file__)
A:scipy._lib.tests.test_tmpdirs.MY_DIR->dirname(MY_PATH)
A:scipy._lib.tests.test_tmpdirs.fname->pjoin(tmpdir, 'example_file.txt')
A:scipy._lib.tests.test_tmpdirs.my_cwd->getcwd()
A:scipy._lib.tests.test_tmpdirs.cwd->getcwd()
scipy._lib.tests.test_tmpdirs.test_given_directory()
scipy._lib.tests.test_tmpdirs.test_in_tempdir()
scipy._lib.tests.test_tmpdirs.test_tempdir()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/tests/test_bunch.py----------------------------------------
A:scipy._lib.tests.test_bunch.Result->_make_tuple_bunch('Result', ['x', 'y', 'z'], ['w', 'beta'])
A:scipy._lib.tests.test_bunch.self.result->Result(x=1, y=2, z=3, w=99, beta=0.5)
A:scipy._lib.tests.test_bunch.s->repr(sq)
A:scipy._lib.tests.test_bunch.obj->pickle.loads(s)
A:scipy._lib.tests.test_bunch.result1->Result(x=1, y=2, z=3, w=-1, beta=0.0)
A:scipy._lib.tests.test_bunch.result2->Result(x=4, y=5, z=6, w=99, beta=1.0)
A:scipy._lib.tests.test_bunch.Square->_make_tuple_bunch('Square', ['width', 'height'])
A:scipy._lib.tests.test_bunch.sq->Square(width=1, height=2)
A:scipy._lib.tests.test_bunch.Tup->_make_tuple_bunch('Tup', ['a', 'b'])
A:scipy._lib.tests.test_bunch.tu->Tup(a=1, b=2)
A:scipy._lib.tests.test_bunch.Foo->_make_tuple_bunch('Foo', ['x'], ['a', 'b'], module=m)
A:scipy._lib.tests.test_bunch.foo->Foo(x=1, a=355, b=113)
scipy._lib.tests.test_bunch.TestMakeTupleBunch
scipy._lib.tests.test_bunch.TestMakeTupleBunch.setup_method(self)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_at_least_one_field_name_required(self)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_attribute_access(self)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_constructor_incorrect_parameter(self)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_constructor_missing_parameter(self)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_explicit_module(self)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_extra_field_names_is_optional(self)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_extra_fields_per_instance(self)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_hash(self)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_identifiers_not_allowed(self,args)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_indexing(self)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_keyword_not_allowed_in_fields(self,args)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_leading_underscore_not_allowed(self,args)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_len(self)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_module(self)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_pickle(self)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_read_only_existing(self)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_read_only_new(self)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_repeated_field_names(self,args)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_repr(self)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_slice(self)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_tuple_like(self)
scipy._lib.tests.test_bunch.TestMakeTupleBunch.test_unpacking(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/tests/test_ccallback.py----------------------------------------
A:scipy._lib.tests.test_ccallback.voidp->ctypes.cast(base, ctypes.c_void_p)
A:scipy._lib.tests.test_ccallback.ffi->cffi.FFI()
A:scipy._lib.tests.test_ccallback.func->scipy._lib._test_ccallback.test_get_plus1_capsule()
A:scipy._lib.tests.test_ccallback.value->ctypes.c_double(2.0)
A:scipy._lib.tests.test_ccallback.user_data->USER_DATAS[user_data]()
A:scipy._lib.tests.test_ccallback.func2->LowLevelCallable(func, user_data)
A:scipy._lib.tests.test_ccallback.llfunc->LowLevelCallable(func)
A:scipy._lib.tests.test_ccallback.msg->str(err)
A:scipy._lib.tests.test_ccallback.llcallable->LowLevelCallable(func, signature='double (double, int *, void *)')
A:scipy._lib.tests.test_ccallback.res->caller(lambda x: callback(x, caller), a - 1)
A:scipy._lib.tests.test_ccallback.r->caller(lambda x: callback(x, caller), count)
scipy._lib.tests.test_ccallback._get_cffi_data()
scipy._lib.tests.test_ccallback._get_cffi_func(base,signature)
scipy._lib.tests.test_ccallback._get_ctypes_data()
scipy._lib.tests.test_ccallback.callback_python(a,user_data=None)
scipy._lib.tests.test_ccallback.test_bad_callbacks()
scipy._lib.tests.test_ccallback.test_callbacks()
scipy._lib.tests.test_ccallback.test_signature_override()
scipy._lib.tests.test_ccallback.test_threadsafety()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/_uarray/_backend.py----------------------------------------
A:scipy._lib._uarray._backend.module->importlib.import_module(mod_name)
A:scipy._lib._uarray._backend.qname->getattr(func, '__qualname__', None)
A:scipy._lib._uarray._backend.func->types.MethodType(func, self_)
A:scipy._lib._uarray._backend.mod_name->getattr(func, '__module__', None)
A:scipy._lib._uarray._backend.self_->getattr(func, '__self__', None)
A:scipy._lib._uarray._backend.test->unpickle_function(mod_name, qname, self_)
A:scipy._lib._uarray._backend.old_state->get_state()
A:scipy._lib._uarray._backend.(kw_defaults, arg_defaults, opts)->get_defaults(argument_extractor)
A:scipy._lib._uarray._backend.ua_func->_Function(argument_extractor, argument_replacer, domain, arg_defaults, kw_defaults, default)
A:scipy._lib._uarray._backend.ctx->_SkipBackendContext(backend)
A:scipy._lib._uarray._backend.sig->inspect.signature(f)
A:scipy._lib._uarray._backend.opts->set()
A:scipy._lib._uarray._backend.extracted_args->func(*args, **kwargs)
A:scipy._lib._uarray._backend.c->convert_single(self, d.value, d.type, coerce and d.coercible)
A:scipy._lib._uarray._backend.backend->_uarray.determine_backend(domain, dispatchables, coerce)
A:scipy._lib._uarray._backend.disp_type->kwargs.pop('dispatch_type')
A:scipy._lib._uarray._backend.dispatchables->tuple(dispatchables)
scipy._lib._uarray.Dispatchable(self,value,dispatch_type,coercible=True)
scipy._lib._uarray.Dispatchable.__getitem__(self,index)
scipy._lib._uarray.Dispatchable.__str__(self)
scipy._lib._uarray._backend.Dispatchable(self,value,dispatch_type,coercible=True)
scipy._lib._uarray._backend.Dispatchable.__getitem__(self,index)
scipy._lib._uarray._backend.Dispatchable.__init__(self,value,dispatch_type,coercible=True)
scipy._lib._uarray._backend.Dispatchable.__str__(self)
scipy._lib._uarray._backend.all_of_type(arg_type)
scipy._lib._uarray._backend.clear_backends(domain,registered=True,globals=False)
scipy._lib._uarray._backend.create_multimethod(*args,**kwargs)
scipy._lib._uarray._backend.determine_backend(value,dispatch_type,*,domain,only=True,coerce=False)
scipy._lib._uarray._backend.determine_backend_multi(dispatchables,*,domain,only=True,coerce=False,**kwargs)
scipy._lib._uarray._backend.generate_multimethod(argument_extractor:ArgumentExtractorType,argument_replacer:ArgumentReplacerType,domain:str,default:typing.Optional[typing.Callable]=None)
scipy._lib._uarray._backend.get_defaults(f)
scipy._lib._uarray._backend.get_state()
scipy._lib._uarray._backend.mark_as(dispatch_type)
scipy._lib._uarray._backend.pickle_function(func)
scipy._lib._uarray._backend.pickle_set_backend_context(ctx)
scipy._lib._uarray._backend.pickle_skip_backend_context(ctx)
scipy._lib._uarray._backend.pickle_state(state)
scipy._lib._uarray._backend.register_backend(backend)
scipy._lib._uarray._backend.reset_state()
scipy._lib._uarray._backend.set_backend(backend,coerce=False,only=False)
scipy._lib._uarray._backend.set_global_backend(backend,coerce=False,only=False,*,try_last=False)
scipy._lib._uarray._backend.set_state(state)
scipy._lib._uarray._backend.skip_backend(backend)
scipy._lib._uarray._backend.unpickle_function(mod_name,qname,self_)
scipy._lib._uarray._backend.wrap_single_convertor(convert_single)
scipy._lib._uarray._backend.wrap_single_convertor_instance(convert_single)
scipy._lib._uarray.all_of_type(arg_type)
scipy._lib._uarray.clear_backends(domain,registered=True,globals=False)
scipy._lib._uarray.create_multimethod(*args,**kwargs)
scipy._lib._uarray.determine_backend(value,dispatch_type,*,domain,only=True,coerce=False)
scipy._lib._uarray.determine_backend_multi(dispatchables,*,domain,only=True,coerce=False,**kwargs)
scipy._lib._uarray.generate_multimethod(argument_extractor:ArgumentExtractorType,argument_replacer:ArgumentReplacerType,domain:str,default:typing.Optional[typing.Callable]=None)
scipy._lib._uarray.get_defaults(f)
scipy._lib._uarray.get_state()
scipy._lib._uarray.mark_as(dispatch_type)
scipy._lib._uarray.pickle_function(func)
scipy._lib._uarray.pickle_set_backend_context(ctx)
scipy._lib._uarray.pickle_skip_backend_context(ctx)
scipy._lib._uarray.pickle_state(state)
scipy._lib._uarray.register_backend(backend)
scipy._lib._uarray.reset_state()
scipy._lib._uarray.set_backend(backend,coerce=False,only=False)
scipy._lib._uarray.set_global_backend(backend,coerce=False,only=False,*,try_last=False)
scipy._lib._uarray.set_state(state)
scipy._lib._uarray.skip_backend(backend)
scipy._lib._uarray.unpickle_function(mod_name,qname,self_)
scipy._lib._uarray.wrap_single_convertor(convert_single)
scipy._lib._uarray.wrap_single_convertor_instance(convert_single)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/_lib/_uarray/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/distance.py----------------------------------------
A:scipy.spatial.distance.nff->(not_u * not_v).sum()
A:scipy.spatial.distance.nft->(not_u * v).sum()
A:scipy.spatial.distance.ntf->(u * not_v).sum()
A:scipy.spatial.distance.ntt->(u * v * w).sum()
A:scipy.spatial.distance.dtype->numpy.result_type(int, u.dtype, v.dtype)
A:scipy.spatial.distance.u->_validate_vector(u)
A:scipy.spatial.distance.v->numpy.zeros(d * (d - 1) // 2, dtype=X.dtype)
A:scipy.spatial.distance.XA->numpy.asarray(XA)
A:scipy.spatial.distance.XB->numpy.asarray(XB)
A:scipy.spatial.distance.kwargs->_validate_kwargs(X, m, n, **kwargs)
A:scipy.spatial.distance.w->_validate_kwargs(X, m, n, **kwargs).pop('w', None)
A:scipy.spatial.distance.kwargs['w']->_validate_weights(w)
A:scipy.spatial.distance.VI->numpy.atleast_2d(VI)
A:scipy.spatial.distance.X->_copy_array_if_base_present(X)
A:scipy.spatial.distance.CV->numpy.atleast_2d(np.cov(X.astype(np.double, copy=False).T))
A:scipy.spatial.distance.kwargs['VI']->_convert_to_double(VI)
A:scipy.spatial.distance.V->_validate_vector(V, dtype=np.float64)
A:scipy.spatial.distance.kwargs['V']->_convert_to_double(V)
A:scipy.spatial.distance.result->_hausdorff.directed_hausdorff(u, v, seed)
A:scipy.spatial.distance.root_w->numpy.power(w, 1 / p)
A:scipy.spatial.distance.dist->norm(u_v, ord=p)
A:scipy.spatial.distance.umu->numpy.average(u, weights=w)
A:scipy.spatial.distance.vmu->numpy.average(v, weights=w)
A:scipy.spatial.distance.uv->numpy.average(u * v, weights=w)
A:scipy.spatial.distance.uu->numpy.average(np.square(u), weights=w)
A:scipy.spatial.distance.vv->numpy.average(np.square(v), weights=w)
A:scipy.spatial.distance.nonzero->numpy.bitwise_or(u != 0, v != 0)
A:scipy.spatial.distance.unequal_nonzero->numpy.bitwise_and(u != v, nonzero)
A:scipy.spatial.distance.a->numpy.double(unequal_nonzero.sum())
A:scipy.spatial.distance.b->numpy.double(nonzero.sum())
A:scipy.spatial.distance.n->_validate_kwargs(X, m, n, **kwargs).pop('w', None).sum()
A:scipy.spatial.distance.(nff, nft, ntf, ntt)->_nbool_correspond_all(u, v, w=w)
A:scipy.spatial.distance.(_, nft, ntf, ntt)->_nbool_correspond_all(u, v, w=w)
A:scipy.spatial.distance.l1_diff->abs(u - v)
A:scipy.spatial.distance.m->numpy.dot(np.dot(delta, VI), delta)
A:scipy.spatial.distance.l1_sum->abs(u + v)
A:scipy.spatial.distance.abs_uv->abs(u - v)
A:scipy.spatial.distance.abs_u->abs(u)
A:scipy.spatial.distance.abs_v->abs(v)
A:scipy.spatial.distance.d->int(np.ceil(np.sqrt(k * 2)))
A:scipy.spatial.distance.p->numpy.asarray(p)
A:scipy.spatial.distance.q->numpy.asarray(q)
A:scipy.spatial.distance.left->rel_entr(p, m)
A:scipy.spatial.distance.right->rel_entr(q, m)
A:scipy.spatial.distance.left_sum->numpy.sum(left, axis=axis, keepdims=keepdims)
A:scipy.spatial.distance.right_sum->numpy.sum(right, axis=axis, keepdims=keepdims)
A:scipy.spatial.distance.(nft, ntf)->_nbool_correspond_ft_tf(u, v, w=w)
A:scipy.spatial.distance.denom->numpy.array(ntt + 2.0 * (ntf + nft))
A:scipy.spatial.distance._convert_to_double->partial(_convert_to_type, out_type=np.double)
A:scipy.spatial.distance._convert_to_bool->partial(_convert_to_type, out_type=bool)
A:scipy.spatial.distance.(XA, XB, typ, kwargs)->_validate_cdist_input(XA, XB, mA, mB, n, metric_info, **kwargs)
A:scipy.spatial.distance.dm->_prepare_out_argument(out, np.double, (mA, mB))
A:scipy.spatial.distance.cdist_fn->getattr(_distance_wrap, f'cdist_{metric_name}_{typ}_wrap')
A:scipy.spatial.distance.(X, typ, kwargs)->_validate_pdist_input(X, m, n, metric_info, **kwargs)
A:scipy.spatial.distance.pdist_fn->getattr(_distance_wrap, f'pdist_{metric_name}_{typ}_wrap')
A:scipy.spatial.distance._METRIC_ALIAS->dict(((alias, info) for info in _METRIC_INFOS for alias in info.aka))
A:scipy.spatial.distance._METRICS_NAMES->list(_METRICS.keys())
A:scipy.spatial.distance.mstr->metric.lower()
A:scipy.spatial.distance.metric_info->_TEST_METRICS.get(mstr, None)
A:scipy.spatial.distance.M->numpy.zeros((d, d), dtype=X.dtype)
A:scipy.spatial.distance.D->numpy.asarray(D, order='c')
A:scipy.spatial.distance.y->numpy.asarray(y, order='c')
A:scipy.spatial.distance.Y->numpy.asarray(Y, order='c')
A:scipy.spatial.distance.dm[k]->metric(X[i], X[j], **kwargs)
A:scipy.spatial.distance.dm[i, j]->metric(XA[i], XB[j], **kwargs)
scipy.spatial.distance.CDistMetricWrapper(self,XA,XB,*,out=None,**kwargs)
scipy.spatial.distance.CDistMetricWrapper.__call__(self,XA,XB,*,out=None,**kwargs)
scipy.spatial.distance.CDistWeightedMetricWrapper(self,XA,XB,*,out=None,**kwargs)
scipy.spatial.distance.CDistWeightedMetricWrapper.__call__(self,XA,XB,*,out=None,**kwargs)
scipy.spatial.distance.MetricInfo
scipy.spatial.distance.PDistMetricWrapper(self,X,*,out=None,**kwargs)
scipy.spatial.distance.PDistMetricWrapper.__call__(self,X,*,out=None,**kwargs)
scipy.spatial.distance.PDistWeightedMetricWrapper(self,X,*,out=None,**kwargs)
scipy.spatial.distance.PDistWeightedMetricWrapper.__call__(self,X,*,out=None,**kwargs)
scipy.spatial.distance._cdist_callable(XA,XB,*,out,metric,**kwargs)
scipy.spatial.distance._convert_to_type(X,out_type)
scipy.spatial.distance._copy_array_if_base_present(a)
scipy.spatial.distance._correlation_cdist_wrap(XA,XB,dm,**kwargs)
scipy.spatial.distance._correlation_pdist_wrap(X,dm,**kwargs)
scipy.spatial.distance._nbool_correspond_all(u,v,w=None)
scipy.spatial.distance._nbool_correspond_ft_tf(u,v,w=None)
scipy.spatial.distance._pdist_callable(X,*,out,metric,**kwargs)
scipy.spatial.distance._prepare_out_argument(out,dtype,expected_shape)
scipy.spatial.distance._validate_cdist_input(XA,XB,mA,mB,n,metric_info,**kwargs)
scipy.spatial.distance._validate_hamming_kwargs(X,m,n,**kwargs)
scipy.spatial.distance._validate_mahalanobis_kwargs(X,m,n,**kwargs)
scipy.spatial.distance._validate_minkowski_kwargs(X,m,n,**kwargs)
scipy.spatial.distance._validate_pdist_input(X,m,n,metric_info,**kwargs)
scipy.spatial.distance._validate_seuclidean_kwargs(X,m,n,**kwargs)
scipy.spatial.distance._validate_vector(u,dtype=None)
scipy.spatial.distance._validate_weight_with_size(X,m,n,**kwargs)
scipy.spatial.distance._validate_weights(w,dtype=np.double)
scipy.spatial.distance.braycurtis(u,v,w=None)
scipy.spatial.distance.canberra(u,v,w=None)
scipy.spatial.distance.cdist(XA,XB,metric='euclidean',*,out=None,**kwargs)
scipy.spatial.distance.chebyshev(u,v,w=None)
scipy.spatial.distance.cityblock(u,v,w=None)
scipy.spatial.distance.correlation(u,v,w=None,centered=True)
scipy.spatial.distance.cosine(u,v,w=None)
scipy.spatial.distance.dice(u,v,w=None)
scipy.spatial.distance.directed_hausdorff(u,v,seed=0)
scipy.spatial.distance.euclidean(u,v,w=None)
scipy.spatial.distance.hamming(u,v,w=None)
scipy.spatial.distance.is_valid_dm(D,tol=0.0,throw=False,name='D',warning=False)
scipy.spatial.distance.is_valid_y(y,warning=False,throw=False,name=None)
scipy.spatial.distance.jaccard(u,v,w=None)
scipy.spatial.distance.jensenshannon(p,q,base=None,*,axis=0,keepdims=False)
scipy.spatial.distance.kulczynski1(u,v,*,w=None)
scipy.spatial.distance.kulsinski(u,v,w=None)
scipy.spatial.distance.mahalanobis(u,v,VI)
scipy.spatial.distance.minkowski(u,v,p=2,w=None)
scipy.spatial.distance.num_obs_dm(d)
scipy.spatial.distance.num_obs_y(Y)
scipy.spatial.distance.pdist(X,metric='euclidean',*,out=None,**kwargs)
scipy.spatial.distance.rogerstanimoto(u,v,w=None)
scipy.spatial.distance.russellrao(u,v,w=None)
scipy.spatial.distance.seuclidean(u,v,V)
scipy.spatial.distance.sokalmichener(u,v,w=None)
scipy.spatial.distance.sokalsneath(u,v,w=None)
scipy.spatial.distance.sqeuclidean(u,v,w=None)
scipy.spatial.distance.squareform(X,force='no',checks=True)
scipy.spatial.distance.yule(u,v,w=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/distance.pyi----------------------------------------
scipy.spatial.distance._MetricCallback1(self,__XA:NDArray[Any],__XB:NDArray[Any])
scipy.spatial.distance._MetricCallback1.__call__(self,__XA:NDArray[Any],__XB:NDArray[Any])
scipy.spatial.distance._MetricCallback2(self,__XA:NDArray[Any],__XB:NDArray[Any],**kwargs:Any)
scipy.spatial.distance._MetricCallback2.__call__(self,__XA:NDArray[Any],__XB:NDArray[Any],**kwargs:Any)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/_voronoi.pyi----------------------------------------
scipy.spatial._voronoi.sort_vertices_of_regions(simplices:np.ndarray,regions:List[List[int]])->None


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/qhull.py----------------------------------------
scipy.spatial.qhull.__dir__()
scipy.spatial.qhull.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/_procrustes.py----------------------------------------
A:scipy.spatial._procrustes.mtx1->numpy.array(data1, dtype=np.double, copy=True)
A:scipy.spatial._procrustes.mtx2->numpy.array(data2, dtype=np.double, copy=True)
A:scipy.spatial._procrustes.norm1->numpy.linalg.norm(mtx1)
A:scipy.spatial._procrustes.norm2->numpy.linalg.norm(mtx2)
A:scipy.spatial._procrustes.(R, s)->orthogonal_procrustes(mtx1, mtx2)
A:scipy.spatial._procrustes.disparity->numpy.sum(np.square(mtx1 - mtx2))
scipy.spatial._procrustes.procrustes(data1,data2)
scipy.spatial.procrustes(data1,data2)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/_kdtree.py----------------------------------------
A:scipy.spatial._kdtree.x->numpy.asarray(x)
A:scipy.spatial._kdtree.y->numpy.asarray(y)
A:scipy.spatial._kdtree.common_datatype->numpy.promote_types(np.promote_types(x.dtype, y.dtype), 'float64')
A:scipy.spatial._kdtree.self.maxes->numpy.maximum(maxes, mins).astype(float)
A:scipy.spatial._kdtree.self.mins->numpy.minimum(maxes, mins).astype(float)
A:scipy.spatial._kdtree.mid->numpy.copy(self.mins)
A:scipy.spatial._kdtree.less->Rectangle(self.mins, mid)
A:scipy.spatial._kdtree.greater->Rectangle(mid, self.maxes)
A:scipy.spatial._kdtree.ckdtree_node->cKDTreeNode()
A:scipy.spatial._kdtree.self.less->KDTree.node._create(ckdtreenode.lesser)
A:scipy.spatial._kdtree.self.greater->KDTree.node._create(ckdtreenode.greater)
A:scipy.spatial._kdtree.self._tree->KDTree.node._create(super().tree)
A:scipy.spatial._kdtree.data->numpy.asarray(data)
A:scipy.spatial._kdtree.(d, i)->super().query(x, k, eps, p, distance_upper_bound, workers)
A:scipy.spatial._kdtree.i->numpy.intp(i)
A:scipy.spatial._kdtree.result->numpy.empty((m, n), dtype=float)
A:scipy.spatial._kdtree.result[i, :]->minkowski_distance(x[i], y, p)
A:scipy.spatial._kdtree.result[:, j]->minkowski_distance(x, y[j], p)
scipy.spatial.KDTree(self,data,leafsize=10,compact_nodes=True,copy_data=False,balanced_tree=True,boxsize=None)
scipy.spatial.KDTree.count_neighbors(self,other,r,p=2.0,weights=None,cumulative=True)
scipy.spatial.KDTree.innernode(self,ckdtreenode)
scipy.spatial.KDTree.innernode.children(self)
scipy.spatial.KDTree.innernode.split(self)
scipy.spatial.KDTree.innernode.split_dim(self)
scipy.spatial.KDTree.leafnode(node)
scipy.spatial.KDTree.leafnode.children(self)
scipy.spatial.KDTree.leafnode.idx(self)
scipy.spatial.KDTree.node(self,ckdtree_node=None)
scipy.spatial.KDTree.node.__eq__(self,other)
scipy.spatial.KDTree.node.__ge__(self,other)
scipy.spatial.KDTree.node.__gt__(self,other)
scipy.spatial.KDTree.node.__le__(self,other)
scipy.spatial.KDTree.node.__lt__(self,other)
scipy.spatial.KDTree.node._create(ckdtree_node=None)
scipy.spatial.KDTree.query(self,x,k=1,eps=0,p=2,distance_upper_bound=np.inf,workers=1)
scipy.spatial.KDTree.query_ball_point(self,x,r,p=2.0,eps=0,workers=1,return_sorted=None,return_length=False)
scipy.spatial.KDTree.query_ball_tree(self,other,r,p=2.0,eps=0)
scipy.spatial.KDTree.query_pairs(self,r,p=2.0,eps=0,output_type='set')
scipy.spatial.KDTree.sparse_distance_matrix(self,other,max_distance,p=2.0,output_type='dok_matrix')
scipy.spatial.KDTree.tree(self)
scipy.spatial.Rectangle(self,maxes,mins)
scipy.spatial.Rectangle.__repr__(self)
scipy.spatial.Rectangle.max_distance_point(self,x,p=2.0)
scipy.spatial.Rectangle.max_distance_rectangle(self,other,p=2.0)
scipy.spatial.Rectangle.min_distance_point(self,x,p=2.0)
scipy.spatial.Rectangle.min_distance_rectangle(self,other,p=2.0)
scipy.spatial.Rectangle.split(self,d,split)
scipy.spatial.Rectangle.volume(self)
scipy.spatial._kdtree.KDTree(self,data,leafsize=10,compact_nodes=True,copy_data=False,balanced_tree=True,boxsize=None)
scipy.spatial._kdtree.KDTree.__init__(self,data,leafsize=10,compact_nodes=True,copy_data=False,balanced_tree=True,boxsize=None)
scipy.spatial._kdtree.KDTree.count_neighbors(self,other,r,p=2.0,weights=None,cumulative=True)
scipy.spatial._kdtree.KDTree.innernode(self,ckdtreenode)
scipy.spatial._kdtree.KDTree.innernode.__init__(self,ckdtreenode)
scipy.spatial._kdtree.KDTree.innernode.children(self)
scipy.spatial._kdtree.KDTree.innernode.split(self)
scipy.spatial._kdtree.KDTree.innernode.split_dim(self)
scipy.spatial._kdtree.KDTree.leafnode(node)
scipy.spatial._kdtree.KDTree.leafnode.children(self)
scipy.spatial._kdtree.KDTree.leafnode.idx(self)
scipy.spatial._kdtree.KDTree.node(self,ckdtree_node=None)
scipy.spatial._kdtree.KDTree.node.__eq__(self,other)
scipy.spatial._kdtree.KDTree.node.__ge__(self,other)
scipy.spatial._kdtree.KDTree.node.__gt__(self,other)
scipy.spatial._kdtree.KDTree.node.__init__(self,ckdtree_node=None)
scipy.spatial._kdtree.KDTree.node.__le__(self,other)
scipy.spatial._kdtree.KDTree.node.__lt__(self,other)
scipy.spatial._kdtree.KDTree.node._create(ckdtree_node=None)
scipy.spatial._kdtree.KDTree.query(self,x,k=1,eps=0,p=2,distance_upper_bound=np.inf,workers=1)
scipy.spatial._kdtree.KDTree.query_ball_point(self,x,r,p=2.0,eps=0,workers=1,return_sorted=None,return_length=False)
scipy.spatial._kdtree.KDTree.query_ball_tree(self,other,r,p=2.0,eps=0)
scipy.spatial._kdtree.KDTree.query_pairs(self,r,p=2.0,eps=0,output_type='set')
scipy.spatial._kdtree.KDTree.sparse_distance_matrix(self,other,max_distance,p=2.0,output_type='dok_matrix')
scipy.spatial._kdtree.KDTree.tree(self)
scipy.spatial._kdtree.Rectangle(self,maxes,mins)
scipy.spatial._kdtree.Rectangle.__init__(self,maxes,mins)
scipy.spatial._kdtree.Rectangle.__repr__(self)
scipy.spatial._kdtree.Rectangle.max_distance_point(self,x,p=2.0)
scipy.spatial._kdtree.Rectangle.max_distance_rectangle(self,other,p=2.0)
scipy.spatial._kdtree.Rectangle.min_distance_point(self,x,p=2.0)
scipy.spatial._kdtree.Rectangle.min_distance_rectangle(self,other,p=2.0)
scipy.spatial._kdtree.Rectangle.split(self,d,split)
scipy.spatial._kdtree.Rectangle.volume(self)
scipy.spatial._kdtree.distance_matrix(x,y,p=2,threshold=1000000)
scipy.spatial._kdtree.minkowski_distance(x,y,p=2)
scipy.spatial._kdtree.minkowski_distance_p(x,y,p=2)
scipy.spatial.distance_matrix(x,y,p=2,threshold=1000000)
scipy.spatial.minkowski_distance(x,y,p=2)
scipy.spatial.minkowski_distance_p(x,y,p=2)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/_plotutils.py----------------------------------------
A:scipy.spatial._plotutils.fig->matplotlib.pyplot.figure()
A:scipy.spatial._plotutils.ax->matplotlib.pyplot.figure().gca()
A:scipy.spatial._plotutils.was_held->getattr(ax, 'ishold', lambda : True)()
A:scipy.spatial._plotutils.point_size->kw.get('point_size', None)
A:scipy.spatial._plotutils.line_colors->kw.get('line_colors', 'k')
A:scipy.spatial._plotutils.line_width->kw.get('line_width', 1.0)
A:scipy.spatial._plotutils.line_alpha->kw.get('line_alpha', 1.0)
A:scipy.spatial._plotutils.center->vor.points.mean(axis=0)
A:scipy.spatial._plotutils.ptp_bound->vor.points.ptp(axis=0)
A:scipy.spatial._plotutils.simplex->numpy.asarray(simplex)
A:scipy.spatial._plotutils.n->numpy.array([-t[1], t[0]])
A:scipy.spatial._plotutils.midpoint->vor.points[pointidx].mean(axis=0)
scipy.spatial._adjust_bounds(ax,points)
scipy.spatial._held_figure(func,obj,ax=None,**kw)
scipy.spatial._plotutils._adjust_bounds(ax,points)
scipy.spatial._plotutils._held_figure(func,obj,ax=None,**kw)
scipy.spatial._plotutils.convex_hull_plot_2d(hull,ax=None)
scipy.spatial._plotutils.delaunay_plot_2d(tri,ax=None)
scipy.spatial._plotutils.voronoi_plot_2d(vor,ax=None,**kw)
scipy.spatial.convex_hull_plot_2d(hull,ax=None)
scipy.spatial.delaunay_plot_2d(tri,ax=None)
scipy.spatial.voronoi_plot_2d(vor,ax=None,**kw)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/_qhull.pyi----------------------------------------
scipy.spatial.ConvexHull(self,points:ArrayLike,incremental:bool=...,qhull_options:None|str=...)
scipy.spatial.ConvexHull._update(self,qhull:_Qhull)->None
scipy.spatial.ConvexHull.add_points(self,points:ArrayLike,restart:bool=...)->None
scipy.spatial.ConvexHull.points(self)->NDArray[np.float64]
scipy.spatial.ConvexHull.vertices(self)->NDArray[np.intc]
scipy.spatial.Delaunay(self,points:ArrayLike,furthest_site:bool=...,incremental:bool=...,qhull_options:None|str=...)
scipy.spatial.Delaunay._update(self,qhull:_Qhull)->None
scipy.spatial.Delaunay.add_points(self,points:ArrayLike,restart:bool=...)->None
scipy.spatial.Delaunay.convex_hull(self)->NDArray[np.intc]
scipy.spatial.Delaunay.find_simplex(self,xi:ArrayLike,bruteforce:bool=...,tol:float=...)->NDArray[np.intc]
scipy.spatial.Delaunay.lift_points(self,x:ArrayLike)->NDArray[np.float64]
scipy.spatial.Delaunay.plane_distance(self,xi:ArrayLike)->NDArray[np.float64]
scipy.spatial.Delaunay.points(self)->NDArray[np.float64]
scipy.spatial.Delaunay.transform(self)->NDArray[np.float64]
scipy.spatial.Delaunay.vertex_neighbor_vertices(self)->Tuple[NDArray[np.intc], NDArray[np.intc]]
scipy.spatial.Delaunay.vertex_to_simplex(self)->NDArray[np.intc]
scipy.spatial.HalfspaceIntersection(self,halfspaces:ArrayLike,interior_point:ArrayLike,incremental:bool=...,qhull_options:None|str=...)
scipy.spatial.HalfspaceIntersection._update(self,qhull:_Qhull)->None
scipy.spatial.HalfspaceIntersection.add_halfspaces(self,halfspaces:ArrayLike,restart:bool=...)->None
scipy.spatial.HalfspaceIntersection.dual_vertices(self)->NDArray[np.int_]
scipy.spatial.HalfspaceIntersection.halfspaces(self)->NDArray[np.float64]
scipy.spatial.QhullError(RuntimeError)
scipy.spatial.Voronoi(self,points:ArrayLike,furthest_site:bool=...,incremental:bool=...,qhull_options:None|str=...)
scipy.spatial.Voronoi._update(self,qhull:_Qhull)->None
scipy.spatial.Voronoi.add_points(self,points:ArrayLike,restart:bool=...)->None
scipy.spatial.Voronoi.points(self)->NDArray[np.float64]
scipy.spatial.Voronoi.ridge_dict(self)->Dict[Tuple[int, int], List[int]]
scipy.spatial._Qhull(self,mode_option:bytes,points:NDArray[np.float64],options:None|bytes=...,required_options:None|bytes=...,furthest_site:bool=...,incremental:bool=...,interior_point:None|NDArray[np.float64]=...)
scipy.spatial._Qhull.add_points(self,points:ArrayLike,interior_point:ArrayLike=...)->None
scipy.spatial._Qhull.check_active(self)->None
scipy.spatial._Qhull.close(self)->None
scipy.spatial._Qhull.get_extremes_2d(self)->NDArray[np.intc]
scipy.spatial._Qhull.get_hull_facets(self)->Tuple[List[List[int]], NDArray[np.float64]]
scipy.spatial._Qhull.get_hull_points(self)->NDArray[np.float64]
scipy.spatial._Qhull.get_paraboloid_shift_scale(self)->Tuple[float, float]
scipy.spatial._Qhull.get_points(self)->NDArray[np.float64]
scipy.spatial._Qhull.get_simplex_facet_array(self)->Tuple[NDArray[np.intc], NDArray[np.intc], NDArray[np.float64], NDArray[np.intc], NDArray[np.intc]]
scipy.spatial._Qhull.get_voronoi_diagram(self)->Tuple[NDArray[np.float64], NDArray[np.intc], List[List[int]], List[List[int]], NDArray[np.intp]]
scipy.spatial._Qhull.ndim(self)->int
scipy.spatial._Qhull.triangulate(self)->None
scipy.spatial._Qhull.volume_area(self)->Tuple[float, float]
scipy.spatial._QhullUser(self,qhull:_Qhull,incremental:bool=...)
scipy.spatial._QhullUser._add_points(self,points:ArrayLike,restart:bool=...,interior_point:ArrayLike=...)->None
scipy.spatial._QhullUser._update(self,qhull:_Qhull)->None
scipy.spatial._QhullUser.close(self)->None
scipy.spatial._copy_docstr(dst:object,src:object)->None
scipy.spatial._get_barycentric_transforms(points:NDArray[np.float64],simplices:NDArray[np.int_],eps:float)->NDArray[np.float64]
scipy.spatial._qhull.ConvexHull(self,points:ArrayLike,incremental:bool=...,qhull_options:None|str=...)
scipy.spatial._qhull.ConvexHull.__init__(self,points:ArrayLike,incremental:bool=...,qhull_options:None|str=...)
scipy.spatial._qhull.ConvexHull._update(self,qhull:_Qhull)->None
scipy.spatial._qhull.ConvexHull.add_points(self,points:ArrayLike,restart:bool=...)->None
scipy.spatial._qhull.ConvexHull.points(self)->NDArray[np.float64]
scipy.spatial._qhull.ConvexHull.vertices(self)->NDArray[np.intc]
scipy.spatial._qhull.Delaunay(self,points:ArrayLike,furthest_site:bool=...,incremental:bool=...,qhull_options:None|str=...)
scipy.spatial._qhull.Delaunay.__init__(self,points:ArrayLike,furthest_site:bool=...,incremental:bool=...,qhull_options:None|str=...)
scipy.spatial._qhull.Delaunay._update(self,qhull:_Qhull)->None
scipy.spatial._qhull.Delaunay.add_points(self,points:ArrayLike,restart:bool=...)->None
scipy.spatial._qhull.Delaunay.convex_hull(self)->NDArray[np.intc]
scipy.spatial._qhull.Delaunay.find_simplex(self,xi:ArrayLike,bruteforce:bool=...,tol:float=...)->NDArray[np.intc]
scipy.spatial._qhull.Delaunay.lift_points(self,x:ArrayLike)->NDArray[np.float64]
scipy.spatial._qhull.Delaunay.plane_distance(self,xi:ArrayLike)->NDArray[np.float64]
scipy.spatial._qhull.Delaunay.points(self)->NDArray[np.float64]
scipy.spatial._qhull.Delaunay.transform(self)->NDArray[np.float64]
scipy.spatial._qhull.Delaunay.vertex_neighbor_vertices(self)->Tuple[NDArray[np.intc], NDArray[np.intc]]
scipy.spatial._qhull.Delaunay.vertex_to_simplex(self)->NDArray[np.intc]
scipy.spatial._qhull.HalfspaceIntersection(self,halfspaces:ArrayLike,interior_point:ArrayLike,incremental:bool=...,qhull_options:None|str=...)
scipy.spatial._qhull.HalfspaceIntersection.__init__(self,halfspaces:ArrayLike,interior_point:ArrayLike,incremental:bool=...,qhull_options:None|str=...)
scipy.spatial._qhull.HalfspaceIntersection._update(self,qhull:_Qhull)->None
scipy.spatial._qhull.HalfspaceIntersection.add_halfspaces(self,halfspaces:ArrayLike,restart:bool=...)->None
scipy.spatial._qhull.HalfspaceIntersection.dual_vertices(self)->NDArray[np.int_]
scipy.spatial._qhull.HalfspaceIntersection.halfspaces(self)->NDArray[np.float64]
scipy.spatial._qhull.QhullError(RuntimeError)
scipy.spatial._qhull.Voronoi(self,points:ArrayLike,furthest_site:bool=...,incremental:bool=...,qhull_options:None|str=...)
scipy.spatial._qhull.Voronoi.__init__(self,points:ArrayLike,furthest_site:bool=...,incremental:bool=...,qhull_options:None|str=...)
scipy.spatial._qhull.Voronoi._update(self,qhull:_Qhull)->None
scipy.spatial._qhull.Voronoi.add_points(self,points:ArrayLike,restart:bool=...)->None
scipy.spatial._qhull.Voronoi.points(self)->NDArray[np.float64]
scipy.spatial._qhull.Voronoi.ridge_dict(self)->Dict[Tuple[int, int], List[int]]
scipy.spatial._qhull._Qhull(self,mode_option:bytes,points:NDArray[np.float64],options:None|bytes=...,required_options:None|bytes=...,furthest_site:bool=...,incremental:bool=...,interior_point:None|NDArray[np.float64]=...)
scipy.spatial._qhull._Qhull.__init__(self,mode_option:bytes,points:NDArray[np.float64],options:None|bytes=...,required_options:None|bytes=...,furthest_site:bool=...,incremental:bool=...,interior_point:None|NDArray[np.float64]=...)
scipy.spatial._qhull._Qhull.add_points(self,points:ArrayLike,interior_point:ArrayLike=...)->None
scipy.spatial._qhull._Qhull.check_active(self)->None
scipy.spatial._qhull._Qhull.close(self)->None
scipy.spatial._qhull._Qhull.get_extremes_2d(self)->NDArray[np.intc]
scipy.spatial._qhull._Qhull.get_hull_facets(self)->Tuple[List[List[int]], NDArray[np.float64]]
scipy.spatial._qhull._Qhull.get_hull_points(self)->NDArray[np.float64]
scipy.spatial._qhull._Qhull.get_paraboloid_shift_scale(self)->Tuple[float, float]
scipy.spatial._qhull._Qhull.get_points(self)->NDArray[np.float64]
scipy.spatial._qhull._Qhull.get_simplex_facet_array(self)->Tuple[NDArray[np.intc], NDArray[np.intc], NDArray[np.float64], NDArray[np.intc], NDArray[np.intc]]
scipy.spatial._qhull._Qhull.get_voronoi_diagram(self)->Tuple[NDArray[np.float64], NDArray[np.intc], List[List[int]], List[List[int]], NDArray[np.intp]]
scipy.spatial._qhull._Qhull.ndim(self)->int
scipy.spatial._qhull._Qhull.triangulate(self)->None
scipy.spatial._qhull._Qhull.volume_area(self)->Tuple[float, float]
scipy.spatial._qhull._QhullUser(self,qhull:_Qhull,incremental:bool=...)
scipy.spatial._qhull._QhullUser.__init__(self,qhull:_Qhull,incremental:bool=...)
scipy.spatial._qhull._QhullUser._add_points(self,points:ArrayLike,restart:bool=...,interior_point:ArrayLike=...)->None
scipy.spatial._qhull._QhullUser._update(self,qhull:_Qhull)->None
scipy.spatial._qhull._QhullUser.close(self)->None
scipy.spatial._qhull._copy_docstr(dst:object,src:object)->None
scipy.spatial._qhull._get_barycentric_transforms(points:NDArray[np.float64],simplices:NDArray[np.int_],eps:float)->NDArray[np.float64]
scipy.spatial._qhull.tsearch(tri:Delaunay,xi:ArrayLike)->NDArray[np.intc]
scipy.spatial.tsearch(tri:Delaunay,xi:ArrayLike)->NDArray[np.intc]


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/kdtree.py----------------------------------------
scipy.spatial.kdtree.__dir__()
scipy.spatial.kdtree.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/ckdtree.py----------------------------------------
scipy.spatial.ckdtree.__dir__()
scipy.spatial.ckdtree.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/__init__.py----------------------------------------
A:scipy.spatial.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/_ckdtree.pyi----------------------------------------
scipy.spatial._ckdtree.cKDTree(cls,data:npt.ArrayLike,leafsize:int=...,compact_nodes:bool=...,copy_data:bool=...,balanced_tree:bool=...,boxsize:npt.ArrayLike=...)
scipy.spatial._ckdtree.cKDTree.__new__(cls,data:npt.ArrayLike,leafsize:int=...,compact_nodes:bool=...,copy_data:bool=...,balanced_tree:bool=...,boxsize:npt.ArrayLike=...)
scipy.spatial._ckdtree.cKDTree.boxsize(self)->_BoxType
scipy.spatial._ckdtree.cKDTree.count_neighbors(self,other:cKDTree,r:_ArrayLike0D,p:float=...,weights:None|Tuple[None,None]=...,cumulative:bool=...)->int
scipy.spatial._ckdtree.cKDTree.count_neighbors(self,other:cKDTree,r:_ArrayLike0D,p:float=...,weights:_WeightType=...,cumulative:bool=...)->np.float64
scipy.spatial._ckdtree.cKDTree.count_neighbors(self,other:cKDTree,r:npt.ArrayLike,p:float=...,weights:None|Tuple[None,None]=...,cumulative:bool=...)->npt.NDArray[np.intp]
scipy.spatial._ckdtree.cKDTree.count_neighbors(self,other:cKDTree,r:npt.ArrayLike,p:float=...,weights:_WeightType=...,cumulative:bool=...)->npt.NDArray[np.float64]
scipy.spatial._ckdtree.cKDTree.data(self)->npt.NDArray[np.float64]
scipy.spatial._ckdtree.cKDTree.indices(self)->npt.NDArray[np.float64]
scipy.spatial._ckdtree.cKDTree.leafsize(self)->int
scipy.spatial._ckdtree.cKDTree.m(self)->int
scipy.spatial._ckdtree.cKDTree.maxes(self)->npt.NDArray[np.float64]
scipy.spatial._ckdtree.cKDTree.mins(self)->npt.NDArray[np.float64]
scipy.spatial._ckdtree.cKDTree.n(self)->int
scipy.spatial._ckdtree.cKDTree.query(self,x:npt.ArrayLike,k:npt.ArrayLike=...,eps:float=...,p:float=...,distance_upper_bound:float=...,workers:Optional[int]=...)->Tuple[Any, Any]
scipy.spatial._ckdtree.cKDTree.query_ball_point(self,x:npt.ArrayLike,r:npt.ArrayLike,p:float,eps:float=...,workers:Optional[int]=...,return_sorted:Optional[bool]=...,return_length:bool=...)->Any
scipy.spatial._ckdtree.cKDTree.query_ball_tree(self,other:cKDTree,r:float,p:float,eps:float=...)->List[List[int]]
scipy.spatial._ckdtree.cKDTree.query_pairs(self,r:float,p:float=...,eps:float=...,output_type:Literal['ndarray']=...)->npt.NDArray[np.intp]
scipy.spatial._ckdtree.cKDTree.query_pairs(self,r:float,p:float=...,eps:float=...,output_type:Literal['set']=...)->Set[Tuple[int, int]]
scipy.spatial._ckdtree.cKDTree.size(self)->int
scipy.spatial._ckdtree.cKDTree.sparse_distance_matrix(self,other:cKDTree,max_distance:float,p:float=...,output_type:Literal['coo_matrix']=...)->coo_matrix
scipy.spatial._ckdtree.cKDTree.sparse_distance_matrix(self,other:cKDTree,max_distance:float,p:float=...,output_type:Literal['dict']=...)->Dict[Tuple[int, int], float]
scipy.spatial._ckdtree.cKDTree.sparse_distance_matrix(self,other:cKDTree,max_distance:float,p:float=...,output_type:Literal['dok_matrix']=...)->dok_matrix
scipy.spatial._ckdtree.cKDTree.sparse_distance_matrix(self,other:cKDTree,max_distance:float,p:float=...,output_type:Literal['ndarray']=...)->npt.NDArray[np.void]
scipy.spatial._ckdtree.cKDTree.tree(self)->cKDTreeNode
scipy.spatial._ckdtree.cKDTreeNode
scipy.spatial._ckdtree.cKDTreeNode.children(self)->int
scipy.spatial._ckdtree.cKDTreeNode.data_points(self)->npt.NDArray[np.float64]
scipy.spatial._ckdtree.cKDTreeNode.end_idx(self)->int
scipy.spatial._ckdtree.cKDTreeNode.greater(self)->Optional[cKDTreeNode]
scipy.spatial._ckdtree.cKDTreeNode.indices(self)->npt.NDArray[np.intp]
scipy.spatial._ckdtree.cKDTreeNode.lesser(self)->Optional[cKDTreeNode]
scipy.spatial._ckdtree.cKDTreeNode.level(self)->int
scipy.spatial._ckdtree.cKDTreeNode.split(self)->float
scipy.spatial._ckdtree.cKDTreeNode.split_dim(self)->int
scipy.spatial._ckdtree.cKDTreeNode.start_idx(self)->int
scipy.spatial.cKDTree(cls,data:npt.ArrayLike,leafsize:int=...,compact_nodes:bool=...,copy_data:bool=...,balanced_tree:bool=...,boxsize:npt.ArrayLike=...)
scipy.spatial.cKDTree.boxsize(self)->_BoxType
scipy.spatial.cKDTree.count_neighbors(self,other:cKDTree,r:_ArrayLike0D,p:float=...,weights:None|Tuple[None,None]=...,cumulative:bool=...)->int
scipy.spatial.cKDTree.count_neighbors(self,other:cKDTree,r:_ArrayLike0D,p:float=...,weights:_WeightType=...,cumulative:bool=...)->np.float64
scipy.spatial.cKDTree.count_neighbors(self,other:cKDTree,r:npt.ArrayLike,p:float=...,weights:None|Tuple[None,None]=...,cumulative:bool=...)->npt.NDArray[np.intp]
scipy.spatial.cKDTree.count_neighbors(self,other:cKDTree,r:npt.ArrayLike,p:float=...,weights:_WeightType=...,cumulative:bool=...)->npt.NDArray[np.float64]
scipy.spatial.cKDTree.data(self)->npt.NDArray[np.float64]
scipy.spatial.cKDTree.indices(self)->npt.NDArray[np.float64]
scipy.spatial.cKDTree.leafsize(self)->int
scipy.spatial.cKDTree.m(self)->int
scipy.spatial.cKDTree.maxes(self)->npt.NDArray[np.float64]
scipy.spatial.cKDTree.mins(self)->npt.NDArray[np.float64]
scipy.spatial.cKDTree.n(self)->int
scipy.spatial.cKDTree.query(self,x:npt.ArrayLike,k:npt.ArrayLike=...,eps:float=...,p:float=...,distance_upper_bound:float=...,workers:Optional[int]=...)->Tuple[Any, Any]
scipy.spatial.cKDTree.query_ball_point(self,x:npt.ArrayLike,r:npt.ArrayLike,p:float,eps:float=...,workers:Optional[int]=...,return_sorted:Optional[bool]=...,return_length:bool=...)->Any
scipy.spatial.cKDTree.query_ball_tree(self,other:cKDTree,r:float,p:float,eps:float=...)->List[List[int]]
scipy.spatial.cKDTree.query_pairs(self,r:float,p:float=...,eps:float=...,output_type:Literal['ndarray']=...)->npt.NDArray[np.intp]
scipy.spatial.cKDTree.query_pairs(self,r:float,p:float=...,eps:float=...,output_type:Literal['set']=...)->Set[Tuple[int, int]]
scipy.spatial.cKDTree.size(self)->int
scipy.spatial.cKDTree.sparse_distance_matrix(self,other:cKDTree,max_distance:float,p:float=...,output_type:Literal['coo_matrix']=...)->coo_matrix
scipy.spatial.cKDTree.sparse_distance_matrix(self,other:cKDTree,max_distance:float,p:float=...,output_type:Literal['dict']=...)->Dict[Tuple[int, int], float]
scipy.spatial.cKDTree.sparse_distance_matrix(self,other:cKDTree,max_distance:float,p:float=...,output_type:Literal['dok_matrix']=...)->dok_matrix
scipy.spatial.cKDTree.sparse_distance_matrix(self,other:cKDTree,max_distance:float,p:float=...,output_type:Literal['ndarray']=...)->npt.NDArray[np.void]
scipy.spatial.cKDTree.tree(self)->cKDTreeNode
scipy.spatial.cKDTreeNode
scipy.spatial.cKDTreeNode.children(self)->int
scipy.spatial.cKDTreeNode.data_points(self)->npt.NDArray[np.float64]
scipy.spatial.cKDTreeNode.end_idx(self)->int
scipy.spatial.cKDTreeNode.greater(self)->Optional[cKDTreeNode]
scipy.spatial.cKDTreeNode.indices(self)->npt.NDArray[np.intp]
scipy.spatial.cKDTreeNode.lesser(self)->Optional[cKDTreeNode]
scipy.spatial.cKDTreeNode.level(self)->int
scipy.spatial.cKDTreeNode.split(self)->float
scipy.spatial.cKDTreeNode.split_dim(self)->int
scipy.spatial.cKDTreeNode.start_idx(self)->int


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/_spherical_voronoi.py----------------------------------------
A:scipy.spatial._spherical_voronoi.numerator->numpy.linalg.det(R)
A:scipy.spatial._spherical_voronoi.self.radius->float(radius)
A:scipy.spatial._spherical_voronoi.self.points->numpy.array(points).astype(np.double)
A:scipy.spatial._spherical_voronoi.self.center->numpy.array(center, dtype=float)
A:scipy.spatial._spherical_voronoi.self._rank->numpy.linalg.matrix_rank(self.points - self.points[0], tol=threshold * self.radius)
A:scipy.spatial._spherical_voronoi.radii->numpy.linalg.norm(self.points - self.center, axis=1)
A:scipy.spatial._spherical_voronoi.max_discrepancy->numpy.abs(radii - self.radius).max()
A:scipy.spatial._spherical_voronoi.conv->scipy.spatial.ConvexHull(self.points)
A:scipy.spatial._spherical_voronoi.simplex_indices->numpy.arange(len(self._simplices))
A:scipy.spatial._spherical_voronoi.tri_indices->numpy.column_stack([simplex_indices] * self._dim).ravel()
A:scipy.spatial._spherical_voronoi.point_indices->self._simplices.ravel()
A:scipy.spatial._spherical_voronoi.indices->numpy.where(signs < 0)
A:scipy.spatial._spherical_voronoi.flattened_groups->tri_indices[indices].astype(np.intp)
A:scipy.spatial._spherical_voronoi.intervals->numpy.cumsum(np.bincount(point_indices + 1))
A:scipy.spatial._spherical_voronoi.csizes->numpy.cumsum(sizes)
A:scipy.spatial._spherical_voronoi.nbrs1->numpy.array([r for region in self.regions for r in region])
A:scipy.spatial._spherical_voronoi.nbrs2->numpy.roll(nbrs1, 1)
A:scipy.spatial._spherical_voronoi.triangles->numpy.hstack([pnormalized[point_indices], vnormalized[nbrs1], vnormalized[nbrs2]]).reshape((num_regions, 3, 3))
A:scipy.spatial._spherical_voronoi.triangle_solid_angles->calculate_solid_angles(triangles)
A:scipy.spatial._spherical_voronoi.cosine->numpy.einsum('ij,ij->i', arcs[:, 0], arcs[:, 1])
A:scipy.spatial._spherical_voronoi.sine->numpy.abs(np.linalg.det(arcs))
A:scipy.spatial._spherical_voronoi.theta->numpy.arctan2(sine, cosine)
A:scipy.spatial._spherical_voronoi.signs->numpy.sign(np.einsum('ij,ij->i', arcs[:, 0], self.vertices - self.center))
scipy.spatial.SphericalVoronoi(self,points,radius=1,center=None,threshold=1e-06)
scipy.spatial.SphericalVoronoi._calc_vertices_regions(self)
scipy.spatial.SphericalVoronoi._calculate_areas_2d(self)
scipy.spatial.SphericalVoronoi._calculate_areas_3d(self)
scipy.spatial.SphericalVoronoi.calculate_areas(self)
scipy.spatial.SphericalVoronoi.sort_vertices_of_regions(self)
scipy.spatial._spherical_voronoi.SphericalVoronoi(self,points,radius=1,center=None,threshold=1e-06)
scipy.spatial._spherical_voronoi.SphericalVoronoi.__init__(self,points,radius=1,center=None,threshold=1e-06)
scipy.spatial._spherical_voronoi.SphericalVoronoi._calc_vertices_regions(self)
scipy.spatial._spherical_voronoi.SphericalVoronoi._calculate_areas_2d(self)
scipy.spatial._spherical_voronoi.SphericalVoronoi._calculate_areas_3d(self)
scipy.spatial._spherical_voronoi.SphericalVoronoi.calculate_areas(self)
scipy.spatial._spherical_voronoi.SphericalVoronoi.sort_vertices_of_regions(self)
scipy.spatial._spherical_voronoi.calculate_solid_angles(R)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/_geometric_slerp.py----------------------------------------
A:scipy.spatial._geometric_slerp.basis->numpy.vstack([start, end])
A:scipy.spatial._geometric_slerp.(Q, R)->numpy.linalg.qr(basis.T)
A:scipy.spatial._geometric_slerp.c->numpy.cos(t * omega)
A:scipy.spatial._geometric_slerp.s->numpy.sin(t * omega)
A:scipy.spatial._geometric_slerp.omega->numpy.arctan2(s, c)
A:scipy.spatial._geometric_slerp.start->numpy.asarray(start, dtype=np.float64)
A:scipy.spatial._geometric_slerp.end->numpy.asarray(end, dtype=np.float64)
A:scipy.spatial._geometric_slerp.t->numpy.asarray(t, dtype=np.float64)
A:scipy.spatial._geometric_slerp.tol->numpy.fabs(tol)
A:scipy.spatial._geometric_slerp.coord_dist->euclidean(start, end)
scipy.spatial._geometric_slerp._geometric_slerp(start,end,t)
scipy.spatial._geometric_slerp.geometric_slerp(start:npt.ArrayLike,end:npt.ArrayLike,t:npt.ArrayLike,tol:float=1e-07)->np.ndarray
scipy.spatial.geometric_slerp(start:npt.ArrayLike,end:npt.ArrayLike,t:npt.ArrayLike,tol:float=1e-07)->np.ndarray


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/tests/test_hausdorff.py----------------------------------------
A:scipy.spatial.tests.test_hausdorff.random_columns->numpy.column_stack((random_angles, random_angles, np.zeros(100)))
A:scipy.spatial.tests.test_hausdorff.random_columns[..., 0]->numpy.cos(random_columns[..., 0])
A:scipy.spatial.tests.test_hausdorff.random_columns[..., 1]->numpy.sin(random_columns[..., 1])
A:scipy.spatial.tests.test_hausdorff.random_columns_2->numpy.column_stack((random_angles, random_angles, np.zeros(100)))
A:scipy.spatial.tests.test_hausdorff.self.path_1_4d->numpy.insert(self.path_1, 3, 5, axis=1)
A:scipy.spatial.tests.test_hausdorff.self.path_2_4d->numpy.insert(self.path_2, 3, 27, axis=1)
A:scipy.spatial.tests.test_hausdorff.expected->max(np.amin(distance.cdist(self.path_1_4d, self.path_2_4d), axis=0))
A:scipy.spatial.tests.test_hausdorff.path_simple_1->numpy.array([[-1, -12], [0, 0], [1, 1], [3, 7], [1, 2]])
A:scipy.spatial.tests.test_hausdorff.path_simple_2->numpy.array([[0, 0], [1, 1], [4, 100], [10, 9]])
A:scipy.spatial.tests.test_hausdorff.rs->check_random_state(None)
A:scipy.spatial.tests.test_hausdorff.old_global_state->check_random_state(None).get_state()
A:scipy.spatial.tests.test_hausdorff.rs2->check_random_state(None)
A:scipy.spatial.tests.test_hausdorff.new_global_state->check_random_state(None).get_state()
A:scipy.spatial.tests.test_hausdorff.rng->numpy.random.default_rng(189048172503940875434364128139223470523)
A:scipy.spatial.tests.test_hausdorff.A->numpy.random.default_rng(189048172503940875434364128139223470523).random((3, 2))
A:scipy.spatial.tests.test_hausdorff.B->numpy.random.default_rng(189048172503940875434364128139223470523).random((3, 5))
A:scipy.spatial.tests.test_hausdorff.actual->directed_hausdorff(u=arr1, v=arr2)
A:scipy.spatial.tests.test_hausdorff.size->int(3000000000.0)
A:scipy.spatial.tests.test_hausdorff.arr1->numpy.zeros(shape=(size, 2))
A:scipy.spatial.tests.test_hausdorff.arr2->numpy.zeros(shape=(3, 2))
scipy.spatial.tests.test_hausdorff.TestHausdorff
scipy.spatial.tests.test_hausdorff.TestHausdorff.setup_method(self)
scipy.spatial.tests.test_hausdorff.TestHausdorff.test_2d_data_forward(self)
scipy.spatial.tests.test_hausdorff.TestHausdorff.test_4d_data_reverse(self)
scipy.spatial.tests.test_hausdorff.TestHausdorff.test_brute_force_comparison_forward(self)
scipy.spatial.tests.test_hausdorff.TestHausdorff.test_brute_force_comparison_reverse(self)
scipy.spatial.tests.test_hausdorff.TestHausdorff.test_degenerate_case(self)
scipy.spatial.tests.test_hausdorff.TestHausdorff.test_indices(self)
scipy.spatial.tests.test_hausdorff.TestHausdorff.test_invalid_dimensions(self)
scipy.spatial.tests.test_hausdorff.TestHausdorff.test_random_state(self)
scipy.spatial.tests.test_hausdorff.TestHausdorff.test_random_state_None_int(self,seed)
scipy.spatial.tests.test_hausdorff.TestHausdorff.test_subsets(self,A,B,seed,expected)
scipy.spatial.tests.test_hausdorff.TestHausdorff.test_symmetry(self)
scipy.spatial.tests.test_hausdorff.test_massive_arr_overflow()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/tests/test__procrustes.py----------------------------------------
A:scipy.spatial.tests.test__procrustes.self.data1->numpy.array([[1, 3], [1, 2], [1, 1], [2, 1]], 'd')
A:scipy.spatial.tests.test__procrustes.self.data2->numpy.array([[4, -2], [4, -4], [4, -6], [2, -6]], 'd')
A:scipy.spatial.tests.test__procrustes.self.data3->numpy.array([[2, 4], [2, 3], [2, 2], [3, 2.5]], 'd')
A:scipy.spatial.tests.test__procrustes.(a, b, disparity)->procrustes(self.data1, self.data2)
A:scipy.spatial.tests.test__procrustes.(m4, m5, disp45)->procrustes(self.data4, self.data5)
A:scipy.spatial.tests.test__procrustes.(m1, m3, disp13)->procrustes(self.data1, self.data3)
A:scipy.spatial.tests.test__procrustes.(m3_2, m1_2, disp31)->procrustes(self.data3, self.data1)
A:scipy.spatial.tests.test__procrustes.rand1->numpy.array([[2.61955202, 0.30522265, 0.55515826], [0.41124708, -0.03966978, -0.31854548], [0.91910318, 1.39451809, -0.15295084], [2.00452023, 0.50150048, 0.29485268], [0.09453595, 0.67528885, 0.03283872], [0.07015232, 2.18892599, -1.67266852], [0.65029688, 1.60551637, 0.80013549], [-0.6607528, 0.53644208, 0.17033891]])
A:scipy.spatial.tests.test__procrustes.rand3->numpy.array([[0.0809969, 0.09731461, -0.173442], [-1.84888465, -0.92589646, -1.29335743], [0.67031855, -1.35957463, 0.41938621], [0.73967209, -0.20230757, 0.52418027], [0.17752796, 0.09065607, 0.29827466], [0.47999368, -0.88455717, -0.57547934], [-0.11486344, -0.12608506, -0.3395779], [-0.86106154, -0.28687488, 0.9644429]])
A:scipy.spatial.tests.test__procrustes.(res1, res3, disp13)->procrustes(rand1, rand3)
A:scipy.spatial.tests.test__procrustes.(res3_2, res1_2, disp31)->procrustes(rand3, rand1)
A:scipy.spatial.tests.test__procrustes.empty->numpy.array([[]])
scipy.spatial.tests.test__procrustes.TestProcrustes
scipy.spatial.tests.test__procrustes.TestProcrustes.setup_method(self)
scipy.spatial.tests.test__procrustes.TestProcrustes.test_procrustes(self)
scipy.spatial.tests.test__procrustes.TestProcrustes.test_procrustes2(self)
scipy.spatial.tests.test__procrustes.TestProcrustes.test_procrustes_bad_number_of_dimensions(self)
scipy.spatial.tests.test__procrustes.TestProcrustes.test_procrustes_empty_rows_or_cols(self)
scipy.spatial.tests.test__procrustes.TestProcrustes.test_procrustes_no_variation(self)
scipy.spatial.tests.test__procrustes.TestProcrustes.test_procrustes_shape_mismatch(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/tests/test_kdtree.py----------------------------------------
A:scipy.spatial.tests.test_kdtree.test_case->type(test_name, (kls,), {'kdtree_type': tree})
A:scipy.spatial.tests.test_kdtree.d->numpy.random.uniform(0, 0.3, size=len(query))
A:scipy.spatial.tests.test_kdtree.(d, i)->kdtree_type(empty_v3, balanced_tree=balanced_tree, compact_nodes=compact_nodes).query(X, k=2)
A:scipy.spatial.tests.test_kdtree.(dd, ii)->kdtree_type(empty_v3, balanced_tree=balanced_tree, compact_nodes=compact_nodes).query(query_v2, 2)
A:scipy.spatial.tests.test_kdtree.(d_real, i_real)->self.kdtree.query(x, k)
A:scipy.spatial.tests.test_kdtree.self.data->numpy.random.randint(100, 1000, size=(n, m))
A:scipy.spatial.tests.test_kdtree.self.kdtree->cKDTree(self.data)
A:scipy.spatial.tests.test_kdtree.self.x->numpy.random.randn(100, 1)
A:scipy.spatial.tests.test_kdtree.(ds, i_s)->self.kdtree.query(qs)
A:scipy.spatial.tests.test_kdtree.x->numpy.arange(3 ** data.shape[1])
A:scipy.spatial.tests.test_kdtree.l->self.T.query_ball_point(self.x - 1.0, self.d, p=self.p, eps=self.eps)
A:scipy.spatial.tests.test_kdtree.c->numpy.ones(self.T2.n, dtype=bool)
A:scipy.spatial.tests.test_kdtree.self.T->self.kdtree_type(self.data)
A:scipy.spatial.tests.test_kdtree.T->kdtree_type(points)
A:scipy.spatial.tests.test_kdtree.r->numpy.arange(0.05, 1, 0.05)
A:scipy.spatial.tests.test_kdtree.points->numpy.random.rand(100, 4)
A:scipy.spatial.tests.test_kdtree.l1->sorted(s)
A:scipy.spatial.tests.test_kdtree.l2->sorted(s)
A:scipy.spatial.tests.test_kdtree.l3->kdtree_type(points).query_ball_point(points, 0.003, workers=-1)
A:scipy.spatial.tests.test_kdtree.self.data1->numpy.random.uniform(size=(n, m))
A:scipy.spatial.tests.test_kdtree.self.T1->self.kdtree_type(data1, leafsize=2)
A:scipy.spatial.tests.test_kdtree.self.data2->numpy.random.uniform(size=(n, m))
A:scipy.spatial.tests.test_kdtree.self.T2->self.kdtree_type(data2, leafsize=2)
A:scipy.spatial.tests.test_kdtree.self.rect->Rectangle([0, 0], [1, 1])
A:scipy.spatial.tests.test_kdtree.(less, greater)->self.rect.split(0, 0.1)
A:scipy.spatial.tests.test_kdtree.y->kdtree_type(empty_v3, balanced_tree=balanced_tree, compact_nodes=compact_nodes).query_pairs(0.1 * mind, output_type='ndarray')
A:scipy.spatial.tests.test_kdtree.rs->numpy.exp(np.linspace(np.log(0.01), np.log(10), 3))
A:scipy.spatial.tests.test_kdtree.results->self.T1.count_neighbors(self.T2, rs)
A:scipy.spatial.tests.test_kdtree.M->kdtree_type(empty_v3, balanced_tree=balanced_tree, compact_nodes=compact_nodes).sparse_distance_matrix(tree, 0.3)
A:scipy.spatial.tests.test_kdtree.M1->self.T1.sparse_distance_matrix(self.T2, self.r)
A:scipy.spatial.tests.test_kdtree.expected->distance_matrix(self.T1.data, self.T2.data)
A:scipy.spatial.tests.test_kdtree.too_many->numpy.array(np.random.randn(18, 2), dtype=int)
A:scipy.spatial.tests.test_kdtree.tree->kdtree_type(empty_v3, balanced_tree=balanced_tree, compact_nodes=compact_nodes)
A:scipy.spatial.tests.test_kdtree.ref->numpy.sqrt(ref)
A:scipy.spatial.tests.test_kdtree.ref[i, j]->numpy.dot(v, v)
A:scipy.spatial.tests.test_kdtree.dist->numpy.linalg.norm(A[None, :, :] - B[:, None, :], axis=-1)
A:scipy.spatial.tests.test_kdtree.data1->numpy.random.randn(n, m)
A:scipy.spatial.tests.test_kdtree.data2->numpy.random.randn(n, m)
A:scipy.spatial.tests.test_kdtree.xs->numpy.random.randn(m, k)
A:scipy.spatial.tests.test_kdtree.ys->numpy.random.randn(n, k)
A:scipy.spatial.tests.test_kdtree.ds->distance_matrix(xs, ys)
A:scipy.spatial.tests.test_kdtree.dsl->distance_matrix(xs, ys, threshold=1)
A:scipy.spatial.tests.test_kdtree.s->set()
A:scipy.spatial.tests.test_kdtree.brute->set()
A:scipy.spatial.tests.test_kdtree.l0->sorted(brute)
A:scipy.spatial.tests.test_kdtree.arr->kdtree_type(points).query_pairs(r, output_type='ndarray')
A:scipy.spatial.tests.test_kdtree.spacing->numpy.sqrt(2)
A:scipy.spatial.tests.test_kdtree.x_range->numpy.linspace(0, 3 * spacing, 4)
A:scipy.spatial.tests.test_kdtree.y_range->numpy.linspace(0, 3 * spacing, 4)
A:scipy.spatial.tests.test_kdtree.pairs_eps->kdtree_type(empty_v3, balanced_tree=balanced_tree, compact_nodes=compact_nodes).query_pairs(r=spacing, eps=0.1)
A:scipy.spatial.tests.test_kdtree.pairs->kdtree_type(empty_v3, balanced_tree=balanced_tree, compact_nodes=compact_nodes).query_pairs(r=spacing * 1.01)
A:scipy.spatial.tests.test_kdtree.T1->kdtree_type(points, boxsize=1.0)
A:scipy.spatial.tests.test_kdtree.tmp->pickle.dumps(T1)
A:scipy.spatial.tests.test_kdtree.T2->pickle.loads(tmp)
A:scipy.spatial.tests.test_kdtree.q->numpy.random.rand(100, 4).copy()
A:scipy.spatial.tests.test_kdtree.points[...]->numpy.random.randn(n, k)
A:scipy.spatial.tests.test_kdtree.kdtree->kdtree_type([[0]], leafsize=1)
A:scipy.spatial.tests.test_kdtree.data->numpy.random.normal(size=(100, 3))
A:scipy.spatial.tests.test_kdtree.(dd1, ii1)->kdtree_type(data, leafsize=1).query(data, k, p=p)
A:scipy.spatial.tests.test_kdtree.klist->numpy.array([1, 3])
A:scipy.spatial.tests.test_kdtree.kdtree2->kdtree_type(data, leafsize=1)
A:scipy.spatial.tests.test_kdtree.(dd2, ii2)->kdtree_type([[0]], leafsize=1).query(image, k, p=p)
A:scipy.spatial.tests.test_kdtree.dd2->dd2.reshape(-1, k).reshape(-1, k)
A:scipy.spatial.tests.test_kdtree.ii2->ii2.reshape(-1, k).reshape(-1, k)
A:scipy.spatial.tests.test_kdtree.dd->numpy.concatenate(dd, axis=-1)
A:scipy.spatial.tests.test_kdtree.ii->numpy.concatenate(ii, axis=-1)
A:scipy.spatial.tests.test_kdtree.result->numpy.empty([len(data), len(nn) * k], dtype=[('ii', 'i8'), ('dd', 'f8')])
A:scipy.spatial.tests.test_kdtree.z_copy->numpy.empty_like(z)
A:scipy.spatial.tests.test_kdtree.mask->numpy.random.randint(0, z.size, np.random.randint(50) + 5)
A:scipy.spatial.tests.test_kdtree.(dist, iquery)->kdtree_type(empty_v3, balanced_tree=balanced_tree, compact_nodes=compact_nodes).query(ibad, k=4, p=2)
A:scipy.spatial.tests.test_kdtree.tree1->kdtree_type(data, leafsize=1)
A:scipy.spatial.tests.test_kdtree.weights->numpy.ones(len(data), dtype='f4')
A:scipy.spatial.tests.test_kdtree.nw->kdtree_type(data, leafsize=1)._build_weights(weights)
A:scipy.spatial.tests.test_kdtree.c1->kdtree_type(data, leafsize=1).count_neighbors(tree1, np.linspace(0, 10, 100), weights=(w1, w1))
A:scipy.spatial.tests.test_kdtree.c2->kdtree_type(data2).count_neighbors(tree2, np.linspace(0, 10, 100))
A:scipy.spatial.tests.test_kdtree.c3->kdtree_type(data, leafsize=1).count_neighbors(tree1, np.linspace(0, 10, i), weights=(weights, None))
A:scipy.spatial.tests.test_kdtree.c4->kdtree_type(data, leafsize=1).count_neighbors(tree1, np.linspace(0, 10, i), weights=(None, weights))
A:scipy.spatial.tests.test_kdtree.w1->numpy.ones(len(data), dtype='f4').copy()
A:scipy.spatial.tests.test_kdtree.tree2->kdtree_type(data2)
A:scipy.spatial.tests.test_kdtree.i0->numpy.arange(len(r0))
A:scipy.spatial.tests.test_kdtree.n0->kdtree_type([[0]], leafsize=1).count_neighbors(kdtree, r0)
A:scipy.spatial.tests.test_kdtree.nnc->kdtree_type([[0]], leafsize=1).count_neighbors(kdtree, r0, cumulative=False)
A:scipy.spatial.tests.test_kdtree.n->len(vals)
A:scipy.spatial.tests.test_kdtree.X->numpy.random.rand(10, 2)
A:scipy.spatial.tests.test_kdtree.Y->numpy.random.rand(10, 2)
A:scipy.spatial.tests.test_kdtree.z->numpy.empty(shape=(0, 2), dtype=np.intp)
A:scipy.spatial.tests.test_kdtree.mind->d[:, -1].min()
A:scipy.spatial.tests.test_kdtree.other->kdtree_type(Y)
A:scipy.spatial.tests.test_kdtree.res_dtype->numpy.dtype(_dtype, align=True)
A:scipy.spatial.tests.test_kdtree.xyz->numpy.array([[0.0, 0.0, 0.0], [1.01, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 1.01, 0.0], [1.0, 0.0, 0.0], [1.0, 1.0, 0.0]], dtype='float64')
A:scipy.spatial.tests.test_kdtree.ckdt->kdtree_type(xyz)
A:scipy.spatial.tests.test_kdtree.(deq, ieq)->kdtree_type(xyz).query(xyz, k=4, distance_upper_bound=0.2)
A:scipy.spatial.tests.test_kdtree.query->numpy.random.normal(size=(100, 3))
A:scipy.spatial.tests.test_kdtree.rvector->kdtree_type(empty_v3, balanced_tree=balanced_tree, compact_nodes=compact_nodes).query_ball_point(query, d)
A:scipy.spatial.tests.test_kdtree.length->kdtree_type(empty_v3, balanced_tree=balanced_tree, compact_nodes=compact_nodes).query_ball_point(query_v3, 0.3, return_length=True)
A:scipy.spatial.tests.test_kdtree.query_contiguous->numpy.random.normal(size=(100, 3))
A:scipy.spatial.tests.test_kdtree.length1->kdtree_type(empty_v3, balanced_tree=balanced_tree, compact_nodes=compact_nodes).query_ball_point(query_contiguous, d_contiguous, return_length=True)
A:scipy.spatial.tests.test_kdtree.length2->kdtree_type(empty_v3, balanced_tree=balanced_tree, compact_nodes=compact_nodes).query_ball_point(query_discontiguous, d_discontiguous, return_length=True)
A:scipy.spatial.tests.test_kdtree.(d1, i1)->kdtree_type(empty_v3, balanced_tree=balanced_tree, compact_nodes=compact_nodes).query(query_contiguous, 1)
A:scipy.spatial.tests.test_kdtree.(d2, i2)->kdtree_type(empty_v3, balanced_tree=balanced_tree, compact_nodes=compact_nodes).query(query_discontiguous, 1)
A:scipy.spatial.tests.test_kdtree.empty_v3->numpy.empty(shape=(0, 3))
A:scipy.spatial.tests.test_kdtree.query_v3->numpy.ones(shape=(1, 3))
A:scipy.spatial.tests.test_kdtree.query_v2->numpy.ones(shape=(2, 3))
A:scipy.spatial.tests.test_kdtree.N->kdtree_type(empty_v3, balanced_tree=balanced_tree, compact_nodes=compact_nodes).count_neighbors(tree, [0, 1])
A:scipy.spatial.tests.test_kdtree.self.ckdt->self.kdtree_type(self.x)
A:scipy.spatial.tests.test_kdtree.idxs_list->self.ckdt.query_ball_point(self.x, 1.0)
A:scipy.spatial.tests.test_kdtree.idxs->self.ckdt.query_ball_point(xi, 1.0, return_sorted=True)
A:scipy.spatial.tests.test_kdtree.idxs_list_False->self.ckdt.query_ball_point(self.x, 1.0, return_sorted=False)
A:scipy.spatial.tests.test_kdtree.t->KDTree(points)
A:scipy.spatial.tests.test_kdtree.A->numpy.random.random(21).reshape((7, 3))
A:scipy.spatial.tests.test_kdtree.B->numpy.random.random(45).reshape((15, 3))
A:scipy.spatial.tests.test_kdtree.wA->numpy.random.random(7)
A:scipy.spatial.tests.test_kdtree.wB->numpy.random.random(15)
A:scipy.spatial.tests.test_kdtree.kdA->kdtree_class(A)
A:scipy.spatial.tests.test_kdtree.kdB->kdtree_class(B)
A:scipy.spatial.tests.test_kdtree.nAB->kdtree_class(A).count_neighbors(kdB, r, cumulative=False, weights=(wA, wB))
A:scipy.spatial.tests.test_kdtree.query_with_nans->KDTree(data).query_pairs(2)
A:scipy.spatial.tests.test_kdtree.query_without_nans->KDTree(data[:n]).query_pairs(2)
scipy.spatial.tests.testConsistencyTests
scipy.spatial.tests.testConsistencyTests.distance(self,a,b,p)
scipy.spatial.tests.testConsistencyTests.test_approx(self)
scipy.spatial.tests.testConsistencyTests.test_m_nearest(self)
scipy.spatial.tests.testConsistencyTests.test_nearest(self)
scipy.spatial.tests.testConsistencyTests.test_points_near(self)
scipy.spatial.tests.testConsistencyTests.test_points_near_l1(self)
scipy.spatial.tests.testConsistencyTests.test_points_near_linf(self)
scipy.spatial.tests.testKDTreeTest(kls)
scipy.spatial.tests.testTest_rectangle
scipy.spatial.tests.testTest_rectangle.setup_method(self)
scipy.spatial.tests.testTest_rectangle.test_max_inside(self)
scipy.spatial.tests.testTest_rectangle.test_max_one_side(self)
scipy.spatial.tests.testTest_rectangle.test_max_two_sides(self)
scipy.spatial.tests.testTest_rectangle.test_min_inside(self)
scipy.spatial.tests.testTest_rectangle.test_min_one_side(self)
scipy.spatial.tests.testTest_rectangle.test_min_two_sides(self)
scipy.spatial.tests.testTest_rectangle.test_split(self)
scipy.spatial.tests.testTest_vectorization_KDTree
scipy.spatial.tests.testTest_vectorization_KDTree.setup_method(self)
scipy.spatial.tests.testTest_vectorization_KDTree.test_query_raises_for_k_none(self)
scipy.spatial.tests.testTest_vectorization_KDTree.test_single_query(self)
scipy.spatial.tests.testTest_vectorization_KDTree.test_single_query_multiple_neighbors(self)
scipy.spatial.tests.testTest_vectorization_KDTree.test_vectorized_query(self)
scipy.spatial.tests.testTest_vectorization_KDTree.test_vectorized_query_multiple_neighbors(self)
scipy.spatial.tests.testTest_vectorization_cKDTree
scipy.spatial.tests.testTest_vectorization_cKDTree.setup_method(self)
scipy.spatial.tests.testTest_vectorization_cKDTree.test_single_query(self)
scipy.spatial.tests.testTest_vectorization_cKDTree.test_single_query_multiple_neighbors(self)
scipy.spatial.tests.testTest_vectorization_cKDTree.test_vectorized_query(self)
scipy.spatial.tests.testTest_vectorization_cKDTree.test_vectorized_query_multiple_neighbors(self)
scipy.spatial.tests.testTest_vectorization_cKDTree.test_vectorized_query_noncontiguous_values(self)
scipy.spatial.tests.test_Test_count_neighbors(count_neighbors_consistency)
scipy.spatial.tests.test_Test_count_neighbors.setup_method(self)
scipy.spatial.tests.test_Test_random(ConsistencyTests)
scipy.spatial.tests.test_Test_random.setup_method(self)
scipy.spatial.tests.test_Test_random_ball(ball_consistency)
scipy.spatial.tests.test_Test_random_ball.setup_method(self)
scipy.spatial.tests.test_Test_random_ball_approx(_Test_random_ball)
scipy.spatial.tests.test_Test_random_ball_approx.setup_method(self)
scipy.spatial.tests.test_Test_random_ball_approx_periodic(_Test_random_ball)
scipy.spatial.tests.test_Test_random_ball_approx_periodic.setup_method(self)
scipy.spatial.tests.test_Test_random_ball_far(_Test_random_ball)
scipy.spatial.tests.test_Test_random_ball_far.setup_method(self)
scipy.spatial.tests.test_Test_random_ball_far_periodic(_Test_random_ball_periodic)
scipy.spatial.tests.test_Test_random_ball_far_periodic.setup_method(self)
scipy.spatial.tests.test_Test_random_ball_l1(_Test_random_ball)
scipy.spatial.tests.test_Test_random_ball_l1.setup_method(self)
scipy.spatial.tests.test_Test_random_ball_largep_issue9890(ball_consistency)
scipy.spatial.tests.test_Test_random_ball_largep_issue9890.setup_method(self)
scipy.spatial.tests.test_Test_random_ball_linf(_Test_random_ball)
scipy.spatial.tests.test_Test_random_ball_linf.setup_method(self)
scipy.spatial.tests.test_Test_random_ball_periodic(ball_consistency)
scipy.spatial.tests.test_Test_random_ball_periodic.distance(self,a,b,p)
scipy.spatial.tests.test_Test_random_ball_periodic.setup_method(self)
scipy.spatial.tests.test_Test_random_ball_periodic.test_found_all_outside(self)
scipy.spatial.tests.test_Test_random_ball_periodic.test_in_ball_outside(self)
scipy.spatial.tests.test_Test_random_far(_Test_random)
scipy.spatial.tests.test_Test_random_far.setup_method(self)
scipy.spatial.tests.test_Test_small(ConsistencyTests)
scipy.spatial.tests.test_Test_small.setup_method(self)
scipy.spatial.tests.test_Test_small.test_nearest(self)
scipy.spatial.tests.test_Test_small.test_nearest_two(self)
scipy.spatial.tests.test_Test_small_nonleaf(_Test_small)
scipy.spatial.tests.test_Test_small_nonleaf.setup_method(self)
scipy.spatial.tests.test_Test_sorted_query_ball_point
scipy.spatial.tests.test_Test_sorted_query_ball_point.setup_method(self)
scipy.spatial.tests.test_Test_sorted_query_ball_point.test_return_sorted_None(self)
scipy.spatial.tests.test_Test_sorted_query_ball_point.test_return_sorted_True(self)
scipy.spatial.tests.test_Test_sparse_distance_matrix(sparse_distance_matrix_consistency)
scipy.spatial.tests.test_Test_sparse_distance_matrix.setup_method(self)
scipy.spatial.tests.test_Test_two_random_trees(two_trees_consistency)
scipy.spatial.tests.test_Test_two_random_trees.setup_method(self)
scipy.spatial.tests.test_Test_two_random_trees_far(_Test_two_random_trees)
scipy.spatial.tests.test_Test_two_random_trees_far.setup_method(self)
scipy.spatial.tests.test_Test_two_random_trees_far_periodic(_Test_two_random_trees_periodic)
scipy.spatial.tests.test_Test_two_random_trees_far_periodic.setup_method(self)
scipy.spatial.tests.test_Test_two_random_trees_linf(_Test_two_random_trees)
scipy.spatial.tests.test_Test_two_random_trees_linf.setup_method(self)
scipy.spatial.tests.test_Test_two_random_trees_linf_periodic(_Test_two_random_trees_periodic)
scipy.spatial.tests.test_Test_two_random_trees_linf_periodic.setup_method(self)
scipy.spatial.tests.test_Test_two_random_trees_periodic(two_trees_consistency)
scipy.spatial.tests.test_Test_two_random_trees_periodic.distance(self,a,b,p)
scipy.spatial.tests.test_Test_two_random_trees_periodic.setup_method(self)
scipy.spatial.tests.test_kdtree.ConsistencyTests
scipy.spatial.tests.test_kdtree.ConsistencyTests.distance(self,a,b,p)
scipy.spatial.tests.test_kdtree.ConsistencyTests.test_approx(self)
scipy.spatial.tests.test_kdtree.ConsistencyTests.test_m_nearest(self)
scipy.spatial.tests.test_kdtree.ConsistencyTests.test_nearest(self)
scipy.spatial.tests.test_kdtree.ConsistencyTests.test_points_near(self)
scipy.spatial.tests.test_kdtree.ConsistencyTests.test_points_near_l1(self)
scipy.spatial.tests.test_kdtree.ConsistencyTests.test_points_near_linf(self)
scipy.spatial.tests.test_kdtree.KDTreeTest(kls)
scipy.spatial.tests.test_kdtree.Test_rectangle
scipy.spatial.tests.test_kdtree.Test_rectangle.setup_method(self)
scipy.spatial.tests.test_kdtree.Test_rectangle.test_max_inside(self)
scipy.spatial.tests.test_kdtree.Test_rectangle.test_max_one_side(self)
scipy.spatial.tests.test_kdtree.Test_rectangle.test_max_two_sides(self)
scipy.spatial.tests.test_kdtree.Test_rectangle.test_min_inside(self)
scipy.spatial.tests.test_kdtree.Test_rectangle.test_min_one_side(self)
scipy.spatial.tests.test_kdtree.Test_rectangle.test_min_two_sides(self)
scipy.spatial.tests.test_kdtree.Test_rectangle.test_split(self)
scipy.spatial.tests.test_kdtree.Test_vectorization_KDTree
scipy.spatial.tests.test_kdtree.Test_vectorization_KDTree.setup_method(self)
scipy.spatial.tests.test_kdtree.Test_vectorization_KDTree.test_query_raises_for_k_none(self)
scipy.spatial.tests.test_kdtree.Test_vectorization_KDTree.test_single_query(self)
scipy.spatial.tests.test_kdtree.Test_vectorization_KDTree.test_single_query_multiple_neighbors(self)
scipy.spatial.tests.test_kdtree.Test_vectorization_KDTree.test_vectorized_query(self)
scipy.spatial.tests.test_kdtree.Test_vectorization_KDTree.test_vectorized_query_multiple_neighbors(self)
scipy.spatial.tests.test_kdtree.Test_vectorization_cKDTree
scipy.spatial.tests.test_kdtree.Test_vectorization_cKDTree.setup_method(self)
scipy.spatial.tests.test_kdtree.Test_vectorization_cKDTree.test_single_query(self)
scipy.spatial.tests.test_kdtree.Test_vectorization_cKDTree.test_single_query_multiple_neighbors(self)
scipy.spatial.tests.test_kdtree.Test_vectorization_cKDTree.test_vectorized_query(self)
scipy.spatial.tests.test_kdtree.Test_vectorization_cKDTree.test_vectorized_query_multiple_neighbors(self)
scipy.spatial.tests.test_kdtree.Test_vectorization_cKDTree.test_vectorized_query_noncontiguous_values(self)
scipy.spatial.tests.test_kdtree._Test_count_neighbors(count_neighbors_consistency)
scipy.spatial.tests.test_kdtree._Test_count_neighbors.setup_method(self)
scipy.spatial.tests.test_kdtree._Test_random(ConsistencyTests)
scipy.spatial.tests.test_kdtree._Test_random.setup_method(self)
scipy.spatial.tests.test_kdtree._Test_random_ball(ball_consistency)
scipy.spatial.tests.test_kdtree._Test_random_ball.setup_method(self)
scipy.spatial.tests.test_kdtree._Test_random_ball_approx(_Test_random_ball)
scipy.spatial.tests.test_kdtree._Test_random_ball_approx.setup_method(self)
scipy.spatial.tests.test_kdtree._Test_random_ball_approx_periodic(_Test_random_ball)
scipy.spatial.tests.test_kdtree._Test_random_ball_approx_periodic.setup_method(self)
scipy.spatial.tests.test_kdtree._Test_random_ball_far(_Test_random_ball)
scipy.spatial.tests.test_kdtree._Test_random_ball_far.setup_method(self)
scipy.spatial.tests.test_kdtree._Test_random_ball_far_periodic(_Test_random_ball_periodic)
scipy.spatial.tests.test_kdtree._Test_random_ball_far_periodic.setup_method(self)
scipy.spatial.tests.test_kdtree._Test_random_ball_l1(_Test_random_ball)
scipy.spatial.tests.test_kdtree._Test_random_ball_l1.setup_method(self)
scipy.spatial.tests.test_kdtree._Test_random_ball_largep_issue9890(ball_consistency)
scipy.spatial.tests.test_kdtree._Test_random_ball_largep_issue9890.setup_method(self)
scipy.spatial.tests.test_kdtree._Test_random_ball_linf(_Test_random_ball)
scipy.spatial.tests.test_kdtree._Test_random_ball_linf.setup_method(self)
scipy.spatial.tests.test_kdtree._Test_random_ball_periodic(ball_consistency)
scipy.spatial.tests.test_kdtree._Test_random_ball_periodic.distance(self,a,b,p)
scipy.spatial.tests.test_kdtree._Test_random_ball_periodic.setup_method(self)
scipy.spatial.tests.test_kdtree._Test_random_ball_periodic.test_found_all_outside(self)
scipy.spatial.tests.test_kdtree._Test_random_ball_periodic.test_in_ball_outside(self)
scipy.spatial.tests.test_kdtree._Test_random_far(_Test_random)
scipy.spatial.tests.test_kdtree._Test_random_far.setup_method(self)
scipy.spatial.tests.test_kdtree._Test_small(ConsistencyTests)
scipy.spatial.tests.test_kdtree._Test_small.setup_method(self)
scipy.spatial.tests.test_kdtree._Test_small.test_nearest(self)
scipy.spatial.tests.test_kdtree._Test_small.test_nearest_two(self)
scipy.spatial.tests.test_kdtree._Test_small_nonleaf(_Test_small)
scipy.spatial.tests.test_kdtree._Test_small_nonleaf.setup_method(self)
scipy.spatial.tests.test_kdtree._Test_sorted_query_ball_point
scipy.spatial.tests.test_kdtree._Test_sorted_query_ball_point.setup_method(self)
scipy.spatial.tests.test_kdtree._Test_sorted_query_ball_point.test_return_sorted_None(self)
scipy.spatial.tests.test_kdtree._Test_sorted_query_ball_point.test_return_sorted_True(self)
scipy.spatial.tests.test_kdtree._Test_sparse_distance_matrix(sparse_distance_matrix_consistency)
scipy.spatial.tests.test_kdtree._Test_sparse_distance_matrix.setup_method(self)
scipy.spatial.tests.test_kdtree._Test_two_random_trees(two_trees_consistency)
scipy.spatial.tests.test_kdtree._Test_two_random_trees.setup_method(self)
scipy.spatial.tests.test_kdtree._Test_two_random_trees_far(_Test_two_random_trees)
scipy.spatial.tests.test_kdtree._Test_two_random_trees_far.setup_method(self)
scipy.spatial.tests.test_kdtree._Test_two_random_trees_far_periodic(_Test_two_random_trees_periodic)
scipy.spatial.tests.test_kdtree._Test_two_random_trees_far_periodic.setup_method(self)
scipy.spatial.tests.test_kdtree._Test_two_random_trees_linf(_Test_two_random_trees)
scipy.spatial.tests.test_kdtree._Test_two_random_trees_linf.setup_method(self)
scipy.spatial.tests.test_kdtree._Test_two_random_trees_linf_periodic(_Test_two_random_trees_periodic)
scipy.spatial.tests.test_kdtree._Test_two_random_trees_linf_periodic.setup_method(self)
scipy.spatial.tests.test_kdtree._Test_two_random_trees_periodic(two_trees_consistency)
scipy.spatial.tests.test_kdtree._Test_two_random_trees_periodic.distance(self,a,b,p)
scipy.spatial.tests.test_kdtree._Test_two_random_trees_periodic.setup_method(self)
scipy.spatial.tests.test_kdtree.ball_consistency
scipy.spatial.tests.test_kdtree.ball_consistency.distance(self,a,b,p)
scipy.spatial.tests.test_kdtree.ball_consistency.test_found_all(self)
scipy.spatial.tests.test_kdtree.ball_consistency.test_in_ball(self)
scipy.spatial.tests.test_kdtree.check_onetree_query(T,d)
scipy.spatial.tests.test_kdtree.count_neighbors_consistency
scipy.spatial.tests.test_kdtree.count_neighbors_consistency.test_large_radius(self)
scipy.spatial.tests.test_kdtree.count_neighbors_consistency.test_multiple_radius(self)
scipy.spatial.tests.test_kdtree.count_neighbors_consistency.test_one_radius(self)
scipy.spatial.tests.test_kdtree.distance_box(a,b,p,boxsize)
scipy.spatial.tests.test_kdtree.kdtree_type(request)
scipy.spatial.tests.test_kdtree.simulate_periodic_box(kdtree,data,k,boxsize,p)
scipy.spatial.tests.test_kdtree.sparse_distance_matrix_consistency
scipy.spatial.tests.test_kdtree.sparse_distance_matrix_consistency.distance(self,a,b,p)
scipy.spatial.tests.test_kdtree.sparse_distance_matrix_consistency.test_against_logic_error_regression(self)
scipy.spatial.tests.test_kdtree.sparse_distance_matrix_consistency.test_ckdtree_return_types(self)
scipy.spatial.tests.test_kdtree.sparse_distance_matrix_consistency.test_consistency(self)
scipy.spatial.tests.test_kdtree.sparse_distance_matrix_consistency.test_consistency_with_neighbors(self)
scipy.spatial.tests.test_kdtree.sparse_distance_matrix_consistency.test_zero_distance(self)
scipy.spatial.tests.test_kdtree.test_ball_point_ints(kdtree_type)
scipy.spatial.tests.test_kdtree.test_ckdtree_memuse()
scipy.spatial.tests.test_kdtree.test_ckdtree_parallel(kdtree_type,monkeypatch)
scipy.spatial.tests.test_kdtree.test_ckdtree_view()
scipy.spatial.tests.test_kdtree.test_discontiguous(kdtree_type)
scipy.spatial.tests.test_kdtree.test_distance_l1()
scipy.spatial.tests.test_kdtree.test_distance_l2()
scipy.spatial.tests.test_kdtree.test_distance_linf()
scipy.spatial.tests.test_kdtree.test_distance_matrix()
scipy.spatial.tests.test_kdtree.test_distance_matrix_looping()
scipy.spatial.tests.test_kdtree.test_distance_vectorization()
scipy.spatial.tests.test_kdtree.test_kdtree_attributes()
scipy.spatial.tests.test_kdtree.test_kdtree_box(kdtree_type)
scipy.spatial.tests.test_kdtree.test_kdtree_box_0boxsize(kdtree_type)
scipy.spatial.tests.test_kdtree.test_kdtree_box_lower_bounds(kdtree_type)
scipy.spatial.tests.test_kdtree.test_kdtree_box_upper_bounds(kdtree_type)
scipy.spatial.tests.test_kdtree.test_kdtree_build_modes(kdtree_type)
scipy.spatial.tests.test_kdtree.test_kdtree_comparisons()
scipy.spatial.tests.test_kdtree.test_kdtree_complex_data()
scipy.spatial.tests.test_kdtree.test_kdtree_copy_data(kdtree_type)
scipy.spatial.tests.test_kdtree.test_kdtree_count_neighbors_weighted(kdtree_class)
scipy.spatial.tests.test_kdtree.test_kdtree_count_neighbous_multiple_r(kdtree_type)
scipy.spatial.tests.test_kdtree.test_kdtree_duplicated_inputs(kdtree_type)
scipy.spatial.tests.test_kdtree.test_kdtree_empty_input(kdtree_type,balanced_tree,compact_nodes)
scipy.spatial.tests.test_kdtree.test_kdtree_list_k(kdtree_type)
scipy.spatial.tests.test_kdtree.test_kdtree_nan()
scipy.spatial.tests.test_kdtree.test_kdtree_noncumulative_nondecreasing(kdtree_type)
scipy.spatial.tests.test_kdtree.test_kdtree_pickle(kdtree_type)
scipy.spatial.tests.test_kdtree.test_kdtree_pickle_boxsize(kdtree_type)
scipy.spatial.tests.test_kdtree.test_kdtree_query_pairs(kdtree_type)
scipy.spatial.tests.test_kdtree.test_kdtree_tree_access()
scipy.spatial.tests.test_kdtree.test_kdtree_weights(kdtree_type)
scipy.spatial.tests.test_kdtree.test_len0_arrays(kdtree_type)
scipy.spatial.tests.test_kdtree.test_onetree_query(kdtree_type)
scipy.spatial.tests.test_kdtree.test_query_ball_point_length(kdtree_type)
scipy.spatial.tests.test_kdtree.test_query_ball_point_multithreading(kdtree_type)
scipy.spatial.tests.test_kdtree.test_query_ball_point_vector_r(kdtree_type)
scipy.spatial.tests.test_kdtree.test_query_pairs_eps(kdtree_type)
scipy.spatial.tests.test_kdtree.test_query_pairs_single_node(kdtree_type)
scipy.spatial.tests.test_kdtree.test_random_ball_vectorized(kdtree_type)
scipy.spatial.tests.test_kdtree.test_short_knn(kdtree_type)
scipy.spatial.tests.test_kdtree.two_trees_consistency
scipy.spatial.tests.test_kdtree.two_trees_consistency.distance(self,a,b,p)
scipy.spatial.tests.test_kdtree.two_trees_consistency.test_all_in_ball(self)
scipy.spatial.tests.test_kdtree.two_trees_consistency.test_found_all(self)
scipy.spatial.tests.testball_consistency
scipy.spatial.tests.testball_consistency.distance(self,a,b,p)
scipy.spatial.tests.testball_consistency.test_found_all(self)
scipy.spatial.tests.testball_consistency.test_in_ball(self)
scipy.spatial.tests.testcheck_onetree_query(T,d)
scipy.spatial.tests.testcount_neighbors_consistency
scipy.spatial.tests.testcount_neighbors_consistency.test_large_radius(self)
scipy.spatial.tests.testcount_neighbors_consistency.test_multiple_radius(self)
scipy.spatial.tests.testcount_neighbors_consistency.test_one_radius(self)
scipy.spatial.tests.testdistance_box(a,b,p,boxsize)
scipy.spatial.tests.testkdtree_type(request)
scipy.spatial.tests.testsimulate_periodic_box(kdtree,data,k,boxsize,p)
scipy.spatial.tests.testsparse_distance_matrix_consistency
scipy.spatial.tests.testsparse_distance_matrix_consistency.distance(self,a,b,p)
scipy.spatial.tests.testsparse_distance_matrix_consistency.test_against_logic_error_regression(self)
scipy.spatial.tests.testsparse_distance_matrix_consistency.test_ckdtree_return_types(self)
scipy.spatial.tests.testsparse_distance_matrix_consistency.test_consistency(self)
scipy.spatial.tests.testsparse_distance_matrix_consistency.test_consistency_with_neighbors(self)
scipy.spatial.tests.testsparse_distance_matrix_consistency.test_zero_distance(self)
scipy.spatial.tests.testtest_ball_point_ints(kdtree_type)
scipy.spatial.tests.testtest_ckdtree_memuse()
scipy.spatial.tests.testtest_ckdtree_parallel(kdtree_type,monkeypatch)
scipy.spatial.tests.testtest_ckdtree_view()
scipy.spatial.tests.testtest_discontiguous(kdtree_type)
scipy.spatial.tests.testtest_distance_l1()
scipy.spatial.tests.testtest_distance_l2()
scipy.spatial.tests.testtest_distance_linf()
scipy.spatial.tests.testtest_distance_matrix()
scipy.spatial.tests.testtest_distance_matrix_looping()
scipy.spatial.tests.testtest_distance_vectorization()
scipy.spatial.tests.testtest_kdtree_attributes()
scipy.spatial.tests.testtest_kdtree_box(kdtree_type)
scipy.spatial.tests.testtest_kdtree_box_0boxsize(kdtree_type)
scipy.spatial.tests.testtest_kdtree_box_lower_bounds(kdtree_type)
scipy.spatial.tests.testtest_kdtree_box_upper_bounds(kdtree_type)
scipy.spatial.tests.testtest_kdtree_build_modes(kdtree_type)
scipy.spatial.tests.testtest_kdtree_comparisons()
scipy.spatial.tests.testtest_kdtree_complex_data()
scipy.spatial.tests.testtest_kdtree_copy_data(kdtree_type)
scipy.spatial.tests.testtest_kdtree_count_neighbors_weighted(kdtree_class)
scipy.spatial.tests.testtest_kdtree_count_neighbous_multiple_r(kdtree_type)
scipy.spatial.tests.testtest_kdtree_duplicated_inputs(kdtree_type)
scipy.spatial.tests.testtest_kdtree_empty_input(kdtree_type,balanced_tree,compact_nodes)
scipy.spatial.tests.testtest_kdtree_list_k(kdtree_type)
scipy.spatial.tests.testtest_kdtree_nan()
scipy.spatial.tests.testtest_kdtree_noncumulative_nondecreasing(kdtree_type)
scipy.spatial.tests.testtest_kdtree_pickle(kdtree_type)
scipy.spatial.tests.testtest_kdtree_pickle_boxsize(kdtree_type)
scipy.spatial.tests.testtest_kdtree_query_pairs(kdtree_type)
scipy.spatial.tests.testtest_kdtree_tree_access()
scipy.spatial.tests.testtest_kdtree_weights(kdtree_type)
scipy.spatial.tests.testtest_len0_arrays(kdtree_type)
scipy.spatial.tests.testtest_onetree_query(kdtree_type)
scipy.spatial.tests.testtest_query_ball_point_length(kdtree_type)
scipy.spatial.tests.testtest_query_ball_point_multithreading(kdtree_type)
scipy.spatial.tests.testtest_query_ball_point_vector_r(kdtree_type)
scipy.spatial.tests.testtest_query_pairs_eps(kdtree_type)
scipy.spatial.tests.testtest_query_pairs_single_node(kdtree_type)
scipy.spatial.tests.testtest_random_ball_vectorized(kdtree_type)
scipy.spatial.tests.testtest_short_knn(kdtree_type)
scipy.spatial.tests.testtwo_trees_consistency
scipy.spatial.tests.testtwo_trees_consistency.distance(self,a,b,p)
scipy.spatial.tests.testtwo_trees_consistency.test_all_in_ball(self)
scipy.spatial.tests.testtwo_trees_consistency.test_found_all(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/tests/test_spherical_voronoi.py----------------------------------------
A:scipy.spatial.tests.test_spherical_voronoi.x1->_generate_cube()
A:scipy.spatial.tests.test_spherical_voronoi.x2->numpy.array([[0, -phi, -1 / phi], [0, -phi, +1 / phi], [0, +phi, -1 / phi], [0, +phi, +1 / phi]])
A:scipy.spatial.tests.test_spherical_voronoi.x3->numpy.array([[-1 / phi, 0, -phi], [+1 / phi, 0, -phi], [-1 / phi, 0, +phi], [+1 / phi, 0, +phi]])
A:scipy.spatial.tests.test_spherical_voronoi.x4->numpy.array([[-phi, -1 / phi, 0], [-phi, +1 / phi, 0], [+phi, -1 / phi, 0], [+phi, +1 / phi, 0]])
A:scipy.spatial.tests.test_spherical_voronoi.x->numpy.array([[0, -1, -phi], [0, -1, +phi], [0, +1, -phi], [0, +1, +phi]])
A:scipy.spatial.tests.test_spherical_voronoi.thetas->numpy.linspace(0, 2 * np.pi, n, endpoint=False)
A:scipy.spatial.tests.test_spherical_voronoi.p->_generate_icosahedron()
A:scipy.spatial.tests.test_spherical_voronoi.rng->numpy.random.RandomState(seed=seed)
A:scipy.spatial.tests.test_spherical_voronoi.points->numpy.concatenate((-np.eye(dim), np.eye(dim)))
A:scipy.spatial.tests.test_spherical_voronoi.self.points->numpy.array([[-0.78928481, -0.16341094, 0.59188373], [-0.66839141, 0.73309634, 0.12578818], [0.32535778, -0.92476944, -0.19734181], [-0.90177102, -0.03785291, -0.43055335], [0.71781344, 0.68428936, 0.12842096], [-0.96064876, 0.23492353, -0.14820556], [0.73181537, -0.22025898, -0.6449281], [0.79979205, 0.54555747, 0.25039913]])
A:scipy.spatial.tests.test_spherical_voronoi.center->numpy.array([1, 1, 1])
A:scipy.spatial.tests.test_spherical_voronoi.s1->SphericalVoronoi(self.points)
A:scipy.spatial.tests.test_spherical_voronoi.s2->SphericalVoronoi(self.points * radius, radius)
A:scipy.spatial.tests.test_spherical_voronoi.s3->SphericalVoronoi(self.points + center, center=center)
A:scipy.spatial.tests.test_spherical_voronoi.s4->SphericalVoronoi(self.points * radius + center, radius, center)
A:scipy.spatial.tests.test_spherical_voronoi.s5->SphericalVoronoi(memoryview(self.points))
A:scipy.spatial.tests.test_spherical_voronoi.sv_origin->SphericalVoronoi(self.points)
A:scipy.spatial.tests.test_spherical_voronoi.sv_translated->SphericalVoronoi(self.points + center, center=center)
A:scipy.spatial.tests.test_spherical_voronoi.sv_unit->SphericalVoronoi(self.points)
A:scipy.spatial.tests.test_spherical_voronoi.sv_scaled->SphericalVoronoi(self.points * 2, 2)
A:scipy.spatial.tests.test_spherical_voronoi.sv->SphericalVoronoi(self.points)
A:scipy.spatial.tests.test_spherical_voronoi.expected->numpy.concatenate((-np.eye(dim), np.eye(dim)))
A:scipy.spatial.tests.test_spherical_voronoi.actual->list(itertools.chain(*sorted(sv.regions)))
A:scipy.spatial.tests.test_spherical_voronoi.distances->scipy.spatial.distance.cdist(sv.points, np.array([vertex]))
A:scipy.spatial.tests.test_spherical_voronoi.closest->numpy.array(sorted(distances)[0:3])
A:scipy.spatial.tests.test_spherical_voronoi.self.degenerate->numpy.concatenate((self.points, self.points))
A:scipy.spatial.tests.test_spherical_voronoi.points[:, 0]->numpy.abs(points[:, 0])
A:scipy.spatial.tests.test_spherical_voronoi.dots->numpy.einsum('ij,ij->i', sv.vertices - center, sv.points[sv._simplices[:, 0]] - center)
A:scipy.spatial.tests.test_spherical_voronoi.circumradii->numpy.arccos(np.clip(dots, -1, 1))
A:scipy.spatial.tests.test_spherical_voronoi.simplices->numpy.sort(sv._simplices)
A:scipy.spatial.tests.test_spherical_voronoi.cells->numpy.unique(np.concatenate(cells), axis=0)
A:scipy.spatial.tests.test_spherical_voronoi.actual_euler->sum([(-1) ** i * e for (i, e) in enumerate(cell_counts)])
A:scipy.spatial.tests.test_spherical_voronoi.dist->scipy.spatial.distance.cdist(sv.vertices, expected)
A:scipy.spatial.tests.test_spherical_voronoi.res->linear_sum_assignment(dist)
A:scipy.spatial.tests.test_spherical_voronoi.areas->SphericalVoronoi(self.points).calculate_areas()
A:scipy.spatial.tests.test_spherical_voronoi.dtype->type(sv.regions[0][0])
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.setup_method(self)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_area_reconstitution(self,n,dim,radius,shift,single_hemisphere)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_area_unsupported_dimension(self)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_attribute_types(self,radius,center)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_constructor(self)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_cross_polytope_regions(self,dim)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_duplicate_point_handling(self)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_equal_area_reconstitution(self,poly)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_higher_dimensions(self,dim)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_hypercube_regions(self,dim)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_incorrect_center_handling(self)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_incorrect_radius_handling(self)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_num_vertices(self)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_old_radius_api_error(self)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_rank_deficient(self,n,dim,shift)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_region_types(self)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_single_hemisphere_handling(self,dim,shift)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_sort_vertices_of_regions(self)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_sort_vertices_of_regions_dimensionality(self)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_sort_vertices_of_regions_flattened(self)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_vertices_regions_scaling_invariance(self)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_vertices_regions_translation_invariance(self)
scipy.spatial.tests.test_spherical_voronoi.TestSphericalVoronoi.test_voronoi_circles(self)
scipy.spatial.tests.test_spherical_voronoi._generate_cube()
scipy.spatial.tests.test_spherical_voronoi._generate_dodecahedron()
scipy.spatial.tests.test_spherical_voronoi._generate_icosahedron()
scipy.spatial.tests.test_spherical_voronoi._generate_octahedron()
scipy.spatial.tests.test_spherical_voronoi._generate_polytope(name)
scipy.spatial.tests.test_spherical_voronoi._generate_tetrahedron()
scipy.spatial.tests.test_spherical_voronoi._hypersphere_area(dim,radius)
scipy.spatial.tests.test_spherical_voronoi._sample_sphere(n,dim,seed=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/tests/test__plotutils.py----------------------------------------
A:scipy.spatial.tests.test__plotutils.fig->matplotlib.pyplot.figure()
A:scipy.spatial.tests.test__plotutils.obj->Voronoi(self.points)
A:scipy.spatial.tests.test__plotutils.s_before->Voronoi(self.points).simplices.copy()
A:scipy.spatial.tests.test__plotutils.r->convex_hull_plot_2d(tri, ax=fig.gca())
A:scipy.spatial.tests.test__plotutils.tri->ConvexHull(self.points)
scipy.spatial.tests.test_TestPlotting
scipy.spatial.tests.test_TestPlotting.test_convex_hull(self)
scipy.spatial.tests.test_TestPlotting.test_delaunay(self)
scipy.spatial.tests.test_TestPlotting.test_voronoi(self)
scipy.spatial.tests.test__plotutils.TestPlotting
scipy.spatial.tests.test__plotutils.TestPlotting.test_convex_hull(self)
scipy.spatial.tests.test__plotutils.TestPlotting.test_delaunay(self)
scipy.spatial.tests.test__plotutils.TestPlotting.test_voronoi(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/tests/test_slerp.py----------------------------------------
A:scipy.spatial.tests.test_slerp.points->numpy.random.normal(size=(n_pts, ndim))
A:scipy.spatial.tests.test_slerp.(start, end)->_generate_spherical_points(n_dims, 2)
A:scipy.spatial.tests.test_slerp.actual->geometric_slerp(start=start, end=start, t=t)
A:scipy.spatial.tests.test_slerp.res->geometric_slerp(start=start, end=end, t=np.linspace(0, 1, 10))
A:scipy.spatial.tests.test_slerp._->geometric_slerp(start=np.array([1]), end=np.array([0]), t=t)
A:scipy.spatial.tests.test_slerp.forward_t_vals->t_func(0, 10, num_t_vals)
A:scipy.spatial.tests.test_slerp.reverse_t_vals->numpy.flipud(forward_t_vals)
A:scipy.spatial.tests.test_slerp.shuffled_indices->numpy.arange(num_t_vals)
A:scipy.spatial.tests.test_slerp.forward_results->geometric_slerp(start=start, end=end, t=forward_t_vals)
A:scipy.spatial.tests.test_slerp.reverse_results->geometric_slerp(start=start, end=end, t=reverse_t_vals)
A:scipy.spatial.tests.test_slerp.scrambled_results->geometric_slerp(start=start, end=end, t=scramble_t_vals)
A:scipy.spatial.tests.test_slerp.expected->numpy.full(shape, start)
A:scipy.spatial.tests.test_slerp.non_degenerate->geometric_slerp(start=start, end=start[::-1], t=t)
A:scipy.spatial.tests.test_slerp.ts->numpy.linspace(0, 1, 100)
A:scipy.spatial.tests.test_slerp.P->numpy.array([1, 0, 0, 0])
A:scipy.spatial.tests.test_slerp.Q->numpy.array([np.cos(angle), np.sin(angle), 0, 0])
A:scipy.spatial.tests.test_slerp.result->geometric_slerp(P, Q, ts, 1e-18)
A:scipy.spatial.tests.test_slerp.norms->numpy.linalg.norm(result, axis=1)
A:scipy.spatial.tests.test_slerp.error->numpy.max(np.abs(norms - 1))
A:scipy.spatial.tests.test_slerp.arr1->numpy.array([0, 1])
A:scipy.spatial.tests.test_slerp.arr2->numpy.array([1, 0])
scipy.spatial.tests.test_slerp.TestGeometricSlerp
scipy.spatial.tests.test_slerp.TestGeometricSlerp.test_0_sphere_handling(self,start,end)
scipy.spatial.tests.test_slerp.TestGeometricSlerp.test_accept_arraylike(self)
scipy.spatial.tests.test_slerp.TestGeometricSlerp.test_degenerate_input(self,start,t)
scipy.spatial.tests.test_slerp.TestGeometricSlerp.test_handle_antipodes(self,start,end,expected)
scipy.spatial.tests.test_slerp.TestGeometricSlerp.test_include_ends(self,n_dims,n_pts)
scipy.spatial.tests.test_slerp.TestGeometricSlerp.test_input_at_least1d(self,start,end)
scipy.spatial.tests.test_slerp.TestGeometricSlerp.test_input_dim_mismatch(self,start,end)
scipy.spatial.tests.test_slerp.TestGeometricSlerp.test_input_shape_flat(self,start,end)
scipy.spatial.tests.test_slerp.TestGeometricSlerp.test_interpolation_param_ndim(self,t)
scipy.spatial.tests.test_slerp.TestGeometricSlerp.test_numerical_stability_pi(self,k)
scipy.spatial.tests.test_slerp.TestGeometricSlerp.test_order_handling(self,start,end,t_func)
scipy.spatial.tests.test_slerp.TestGeometricSlerp.test_scalar_t(self)
scipy.spatial.tests.test_slerp.TestGeometricSlerp.test_shape_property(self,n_dims,n_pts)
scipy.spatial.tests.test_slerp.TestGeometricSlerp.test_straightforward_examples(self,start,end,expected)
scipy.spatial.tests.test_slerp.TestGeometricSlerp.test_t_values_conversion(self,t)
scipy.spatial.tests.test_slerp.TestGeometricSlerp.test_t_values_limits(self,t)
scipy.spatial.tests.test_slerp.TestGeometricSlerp.test_tol_sign(self,tol)
scipy.spatial.tests.test_slerp.TestGeometricSlerp.test_tol_type(self,tol)
scipy.spatial.tests.test_slerp.TestGeometricSlerp.test_unit_sphere_enforcement(self,start,end)
scipy.spatial.tests.test_slerp._generate_spherical_points(ndim=3,n_pts=2)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/tests/test_qhull.py----------------------------------------
A:scipy.spatial.tests.test_qhull.a->list(map(tpl, a))
A:scipy.spatial.tests.test_qhull.b->list(map(tpl, b))
A:scipy.spatial.tests.test_qhull.pathological_data_1->numpy.array([[-3.14, -3.14], [-3.14, -2.36], [-3.14, -1.57], [-3.14, -0.79], [-3.14, 0.0], [-3.14, 0.79], [-3.14, 1.57], [-3.14, 2.36], [-3.14, 3.14], [-2.36, -3.14], [-2.36, -2.36], [-2.36, -1.57], [-2.36, -0.79], [-2.36, 0.0], [-2.36, 0.79], [-2.36, 1.57], [-2.36, 2.36], [-2.36, 3.14], [-1.57, -0.79], [-1.57, 0.79], [-1.57, -1.57], [-1.57, 0.0], [-1.57, 1.57], [-1.57, -3.14], [-1.57, -2.36], [-1.57, 2.36], [-1.57, 3.14], [-0.79, -1.57], [-0.79, 1.57], [-0.79, -3.14], [-0.79, -2.36], [-0.79, -0.79], [-0.79, 0.0], [-0.79, 0.79], [-0.79, 2.36], [-0.79, 3.14], [0.0, -3.14], [0.0, -2.36], [0.0, -1.57], [0.0, -0.79], [0.0, 0.0], [0.0, 0.79], [0.0, 1.57], [0.0, 2.36], [0.0, 3.14], [0.79, -3.14], [0.79, -2.36], [0.79, -0.79], [0.79, 0.0], [0.79, 0.79], [0.79, 2.36], [0.79, 3.14], [0.79, -1.57], [0.79, 1.57], [1.57, -3.14], [1.57, -2.36], [1.57, 2.36], [1.57, 3.14], [1.57, -1.57], [1.57, 0.0], [1.57, 1.57], [1.57, -0.79], [1.57, 0.79], [2.36, -3.14], [2.36, -2.36], [2.36, -1.57], [2.36, -0.79], [2.36, 0.0], [2.36, 0.79], [2.36, 1.57], [2.36, 2.36], [2.36, 3.14], [3.14, -3.14], [3.14, -2.36], [3.14, -1.57], [3.14, -0.79], [3.14, 0.0], [3.14, 0.79], [3.14, 1.57], [3.14, 2.36], [3.14, 3.14]])
A:scipy.spatial.tests.test_qhull.pathological_data_2->numpy.array([[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 0], [0, 1], [1, -1 - np.finfo(np.float_).eps], [1, 0], [1, 1]])
A:scipy.spatial.tests.test_qhull.x->numpy.array([0, 1, 0, 1], dtype=np.float64)
A:scipy.spatial.tests.test_qhull.xd->copy.deepcopy(x.get_voronoi_diagram())
A:scipy.spatial.tests.test_qhull.y->numpy.array([0, 0, 1, 1], dtype=np.float64)
A:scipy.spatial.tests.test_qhull.yd->copy.deepcopy(y.get_voronoi_diagram())
A:scipy.spatial.tests.test_qhull.xd2->copy.deepcopy(x.get_voronoi_diagram())
A:scipy.spatial.tests.test_qhull.yd2->copy.deepcopy(y.get_voronoi_diagram())
A:scipy.spatial.tests.test_qhull.points->itertools.permutations([0.0, 0.0, 0.5, -0.5])
A:scipy.spatial.tests.test_qhull.tri->scipy.spatial._qhull.ConvexHull(points)
A:scipy.spatial.tests.test_qhull.i->scipy.spatial._qhull.ConvexHull(points).find_simplex(p[:2])
A:scipy.spatial.tests.test_qhull.j->scipy.spatial._qhull.ConvexHull(points).find_simplex(centroids)
A:scipy.spatial.tests.test_qhull.p->numpy.array([0.99966555, 0.15685619], dtype=np.double)
A:scipy.spatial.tests.test_qhull.z->scipy.spatial._qhull.ConvexHull(points).lift_points(x)
A:scipy.spatial.tests.test_qhull.pz->scipy.spatial._qhull.ConvexHull(points).lift_points(p)
A:scipy.spatial.tests.test_qhull.dist->scipy.spatial._qhull.ConvexHull(points).plane_distance(p)
A:scipy.spatial.tests.test_qhull.n->numpy.array([-t[1], t[0]])
A:scipy.spatial.tests.test_qhull.d->numpy.dot(n, pz - x3)
A:scipy.spatial.tests.test_qhull.hull->scipy.spatial._qhull.HalfspaceIntersection(halfspaces, feasible_point)
A:scipy.spatial.tests.test_qhull.inc_hull->scipy.spatial._qhull.ConvexHull(points[:dim + 1, :], incremental=True)
A:scipy.spatial.tests.test_qhull.inc_restart_hull->scipy.spatial._qhull.ConvexHull(points[:dim + 1, :], incremental=True)
A:scipy.spatial.tests.test_qhull.c->barycentric_transform(tri.transform, centroids)
A:scipy.spatial.tests.test_qhull.volume->numpy.array([np.linalg.det(q[k, :, :]) for k in range(tri.nsimplex)])
A:scipy.spatial.tests.test_qhull.at_boundary->(centroids <= unit_cube_tol).any(axis=1)
A:scipy.spatial.tests.test_qhull.data->numpy.load(os.path.join(os.path.dirname(__file__), 'data', 'degenerate_pointset.npz'))
A:scipy.spatial.tests.test_qhull.bad_count->numpy.isnan(tri.transform[:, 0, 0]).sum()
A:scipy.spatial.tests.test_qhull.masked_array->numpy.ma.masked_all(1)
A:scipy.spatial.tests.test_qhull.points_with_nan->numpy.array([(0, 0), (1, 1), (2, np.nan)], dtype=np.double)
A:scipy.spatial.tests.test_qhull.expected->numpy.array([True, False, False, False], dtype=bool)
A:scipy.spatial.tests.test_qhull.obj->scipy.spatial._qhull.Voronoi(chunks[0], incremental=True, qhull_options=opts)
A:scipy.spatial.tests.test_qhull.obj2->scipy.spatial._qhull.Voronoi(points)
A:scipy.spatial.tests.test_qhull.obj3->scipy.spatial._qhull.Voronoi(chunks[0], incremental=True, qhull_options=opts)
A:scipy.spatial.tests.test_qhull.facets_1->set(map(sorted_tuple, facets_1))
A:scipy.spatial.tests.test_qhull.facets_2->set(map(sorted_tuple, facets_2))
A:scipy.spatial.tests.test_qhull.c1->numpy.dot(t, points[a] - points[ap])
A:scipy.spatial.tests.test_qhull.c2->numpy.dot(t, points[b] - points[ap])
A:scipy.spatial.tests.test_qhull.c3->numpy.dot(t, points[bp] - points[ap])
A:scipy.spatial.tests.test_qhull.angle->numpy.arctan2(y - y.mean(), x - x.mean())
A:scipy.spatial.tests.test_qhull.rng->numpy.random.default_rng(7790)
A:scipy.spatial.tests.test_qhull.vor->Voronoi(points, furthest_site=True)
A:scipy.spatial.tests.test_qhull.nvertex->int(output[1][0])
A:scipy.spatial.tests.test_qhull.vertices->list(map(tuple, output[3:2 + nvertex]))
A:scipy.spatial.tests.test_qhull.nregion->int(output[1][1])
A:scipy.spatial.tests.test_qhull.p1->list(zip(list(map(sorttuple, ridge_points)), list(map(sorttuple, ridge_vertices))))
A:scipy.spatial.tests.test_qhull.p2->list(zip(list(map(sorttuple, vor.ridge_points.tolist())), list(map(sorttuple, vor.ridge_vertices))))
A:scipy.spatial.tests.test_qhull.tree->KDTree(points)
A:scipy.spatial.tests.test_qhull.ridge_midpoint->Voronoi(points, furthest_site=True).vertices[v].mean(axis=0)
A:scipy.spatial.tests.test_qhull.(dist, k)->KDTree(points).query(ridge_midpoint - d, k=1)
A:scipy.spatial.tests.test_qhull.items->set(map(sorted_tuple, x))
A:scipy.spatial.tests.test_qhull.truths->numpy.zeros((arr1.shape[0],), dtype=bool)
A:scipy.spatial.tests.test_qhull.halfspaces->numpy.array([[-1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, -1.0], [0.0, -1.0, 0.0, 0.0], [0.0, 1.0, 0.0, -1.0], [0.0, 0.0, -1.0, 0.0], [0.0, 0.0, 1.0, -1.0]])
A:scipy.spatial.tests.test_qhull.feasible_point->numpy.array([-0.5, -0.5])
A:scipy.spatial.tests.test_qhull.fname->os.path.join(os.path.dirname(__file__), 'data', 'selfdual-4d-polytope.txt')
A:scipy.spatial.tests.test_qhull.ineqs->numpy.genfromtxt(fname)
A:scipy.spatial.tests.test_qhull.feas_point->numpy.array([0.0, 0.0, 0.0])
A:scipy.spatial.tests.test_qhull.hs->scipy.spatial._qhull.HalfspaceIntersection(halfspaces, point)
A:scipy.spatial.tests.test_qhull.extra_normals->numpy.array([[1.0, 1.0, 1.0], [1.0, 1.0, -1.0], [1.0, -1.0, 1.0], [1, -1.0, -1.0]])
A:scipy.spatial.tests.test_qhull.offsets->numpy.array([[-1.0]] * 8)
A:scipy.spatial.tests.test_qhull.extra_halfspaces->numpy.hstack((np.vstack((extra_normals, -extra_normals)), offsets))
A:scipy.spatial.tests.test_qhull.inc_hs->scipy.spatial._qhull.HalfspaceIntersection(halfspaces, feas_point, incremental=True)
A:scipy.spatial.tests.test_qhull.inc_res_hs->scipy.spatial._qhull.HalfspaceIntersection(halfspaces, feas_point, incremental=True)
A:scipy.spatial.tests.test_qhull.total->numpy.vstack((halfspaces, extra_halfspaces[:i + 1, :]))
A:scipy.spatial.tests.test_qhull.point->numpy.array([0.5, 0.5, 0.5])
A:scipy.spatial.tests.test_qhull.qhalf_points->numpy.array([[-2, 0, 0], [2, 0, 0], [0, -2, 0], [0, 2, 0], [0, 0, -2], [0, 0, 2]])
scipy.spatial.tests.testTestConvexHull
scipy.spatial.tests.testTestConvexHull.test_array_with_nans_fails(self)
scipy.spatial.tests.testTestConvexHull.test_good2d(self,incremental)
scipy.spatial.tests.testTestConvexHull.test_good2d_incremental_changes(self,new_gen,expected,visibility)
scipy.spatial.tests.testTestConvexHull.test_good2d_inside(self,incremental)
scipy.spatial.tests.testTestConvexHull.test_good2d_no_option(self,incremental)
scipy.spatial.tests.testTestConvexHull.test_good3d(self,incremental)
scipy.spatial.tests.testTestConvexHull.test_hull_consistency_tri(self,name)
scipy.spatial.tests.testTestConvexHull.test_incremental(self,name)
scipy.spatial.tests.testTestConvexHull.test_masked_array_fails(self)
scipy.spatial.tests.testTestConvexHull.test_vertices_2d(self)
scipy.spatial.tests.testTestConvexHull.test_volume_area(self)
scipy.spatial.tests.testTestDelaunay
scipy.spatial.tests.testTestDelaunay.test_2d_square(self)
scipy.spatial.tests.testTestDelaunay.test_array_with_nans_fails(self)
scipy.spatial.tests.testTestDelaunay.test_coplanar(self)
scipy.spatial.tests.testTestDelaunay.test_duplicate_points(self)
scipy.spatial.tests.testTestDelaunay.test_furthest_site(self)
scipy.spatial.tests.testTestDelaunay.test_incremental(self,name)
scipy.spatial.tests.testTestDelaunay.test_joggle(self)
scipy.spatial.tests.testTestDelaunay.test_masked_array_fails(self)
scipy.spatial.tests.testTestDelaunay.test_nd_simplex(self)
scipy.spatial.tests.testTestDelaunay.test_pathological(self)
scipy.spatial.tests.testTestDelaunay.test_vertices_deprecation(self)
scipy.spatial.tests.testTestUtilities
scipy.spatial.tests.testTestUtilities._check_barycentric_transforms(self,tri,err_msg='',unit_cube=False,unit_cube_tol=0)
scipy.spatial.tests.testTestUtilities.test_convex_hull(self)
scipy.spatial.tests.testTestUtilities.test_degenerate_barycentric_transforms(self)
scipy.spatial.tests.testTestUtilities.test_find_simplex(self)
scipy.spatial.tests.testTestUtilities.test_incremental_volume_area_random_input(self)
scipy.spatial.tests.testTestUtilities.test_more_barycentric_transforms(self)
scipy.spatial.tests.testTestUtilities.test_plane_distance(self)
scipy.spatial.tests.testTestUtilities.test_random_volume_area(self)
scipy.spatial.tests.testTestUtilities.test_volume_area(self)
scipy.spatial.tests.testTestVertexNeighborVertices
scipy.spatial.tests.testTestVertexNeighborVertices._check(self,tri)
scipy.spatial.tests.testTestVertexNeighborVertices.test_complicated(self)
scipy.spatial.tests.testTestVertexNeighborVertices.test_rectangle(self)
scipy.spatial.tests.testTestVertexNeighborVertices.test_triangle(self)
scipy.spatial.tests.testTestVoronoi
scipy.spatial.tests.testTestVoronoi._compare_qvoronoi(self,points,output,**kw)
scipy.spatial.tests.testTestVoronoi.test_furthest_site(self)
scipy.spatial.tests.testTestVoronoi.test_furthest_site_flag(self)
scipy.spatial.tests.testTestVoronoi.test_incremental(self,name)
scipy.spatial.tests.testTestVoronoi.test_masked_array_fails(self)
scipy.spatial.tests.testTestVoronoi.test_point_region_structure(self,qhull_opts,n_pts,extra_pts,ndim)
scipy.spatial.tests.testTestVoronoi.test_ridges(self,name)
scipy.spatial.tests.testTestVoronoi.test_simple(self)
scipy.spatial.tests.testTest_HalfspaceIntersection
scipy.spatial.tests.testTest_HalfspaceIntersection.assert_unordered_allclose(self,arr1,arr2,rtol=1e-07)
scipy.spatial.tests.testTest_HalfspaceIntersection.test_cube(self)
scipy.spatial.tests.testTest_HalfspaceIntersection.test_cube_halfspace_intersection(self,dt)
scipy.spatial.tests.testTest_HalfspaceIntersection.test_incremental(self)
scipy.spatial.tests.testTest_HalfspaceIntersection.test_self_dual_polytope_intersection(self)
scipy.spatial.tests.testTest_HalfspaceIntersection.test_wrong_feasible_point(self)
scipy.spatial.tests.testTest_Qhull
scipy.spatial.tests.testTest_Qhull.test_issue_8051(self)
scipy.spatial.tests.testTest_Qhull.test_swapping(self)
scipy.spatial.tests.test_add_inc_data(name,chunksize)
scipy.spatial.tests.test_qhull.TestConvexHull
scipy.spatial.tests.test_qhull.TestConvexHull.test_array_with_nans_fails(self)
scipy.spatial.tests.test_qhull.TestConvexHull.test_good2d(self,incremental)
scipy.spatial.tests.test_qhull.TestConvexHull.test_good2d_incremental_changes(self,new_gen,expected,visibility)
scipy.spatial.tests.test_qhull.TestConvexHull.test_good2d_inside(self,incremental)
scipy.spatial.tests.test_qhull.TestConvexHull.test_good2d_no_option(self,incremental)
scipy.spatial.tests.test_qhull.TestConvexHull.test_good3d(self,incremental)
scipy.spatial.tests.test_qhull.TestConvexHull.test_hull_consistency_tri(self,name)
scipy.spatial.tests.test_qhull.TestConvexHull.test_incremental(self,name)
scipy.spatial.tests.test_qhull.TestConvexHull.test_masked_array_fails(self)
scipy.spatial.tests.test_qhull.TestConvexHull.test_vertices_2d(self)
scipy.spatial.tests.test_qhull.TestConvexHull.test_volume_area(self)
scipy.spatial.tests.test_qhull.TestDelaunay
scipy.spatial.tests.test_qhull.TestDelaunay.test_2d_square(self)
scipy.spatial.tests.test_qhull.TestDelaunay.test_array_with_nans_fails(self)
scipy.spatial.tests.test_qhull.TestDelaunay.test_coplanar(self)
scipy.spatial.tests.test_qhull.TestDelaunay.test_duplicate_points(self)
scipy.spatial.tests.test_qhull.TestDelaunay.test_furthest_site(self)
scipy.spatial.tests.test_qhull.TestDelaunay.test_incremental(self,name)
scipy.spatial.tests.test_qhull.TestDelaunay.test_joggle(self)
scipy.spatial.tests.test_qhull.TestDelaunay.test_masked_array_fails(self)
scipy.spatial.tests.test_qhull.TestDelaunay.test_nd_simplex(self)
scipy.spatial.tests.test_qhull.TestDelaunay.test_pathological(self)
scipy.spatial.tests.test_qhull.TestDelaunay.test_vertices_deprecation(self)
scipy.spatial.tests.test_qhull.TestUtilities
scipy.spatial.tests.test_qhull.TestUtilities._check_barycentric_transforms(self,tri,err_msg='',unit_cube=False,unit_cube_tol=0)
scipy.spatial.tests.test_qhull.TestUtilities.test_convex_hull(self)
scipy.spatial.tests.test_qhull.TestUtilities.test_degenerate_barycentric_transforms(self)
scipy.spatial.tests.test_qhull.TestUtilities.test_find_simplex(self)
scipy.spatial.tests.test_qhull.TestUtilities.test_incremental_volume_area_random_input(self)
scipy.spatial.tests.test_qhull.TestUtilities.test_more_barycentric_transforms(self)
scipy.spatial.tests.test_qhull.TestUtilities.test_plane_distance(self)
scipy.spatial.tests.test_qhull.TestUtilities.test_random_volume_area(self)
scipy.spatial.tests.test_qhull.TestUtilities.test_volume_area(self)
scipy.spatial.tests.test_qhull.TestVertexNeighborVertices
scipy.spatial.tests.test_qhull.TestVertexNeighborVertices._check(self,tri)
scipy.spatial.tests.test_qhull.TestVertexNeighborVertices.test_complicated(self)
scipy.spatial.tests.test_qhull.TestVertexNeighborVertices.test_rectangle(self)
scipy.spatial.tests.test_qhull.TestVertexNeighborVertices.test_triangle(self)
scipy.spatial.tests.test_qhull.TestVoronoi
scipy.spatial.tests.test_qhull.TestVoronoi._compare_qvoronoi(self,points,output,**kw)
scipy.spatial.tests.test_qhull.TestVoronoi.test_furthest_site(self)
scipy.spatial.tests.test_qhull.TestVoronoi.test_furthest_site_flag(self)
scipy.spatial.tests.test_qhull.TestVoronoi.test_incremental(self,name)
scipy.spatial.tests.test_qhull.TestVoronoi.test_masked_array_fails(self)
scipy.spatial.tests.test_qhull.TestVoronoi.test_point_region_structure(self,qhull_opts,n_pts,extra_pts,ndim)
scipy.spatial.tests.test_qhull.TestVoronoi.test_ridges(self,name)
scipy.spatial.tests.test_qhull.TestVoronoi.test_simple(self)
scipy.spatial.tests.test_qhull.Test_HalfspaceIntersection
scipy.spatial.tests.test_qhull.Test_HalfspaceIntersection.assert_unordered_allclose(self,arr1,arr2,rtol=1e-07)
scipy.spatial.tests.test_qhull.Test_HalfspaceIntersection.test_cube(self)
scipy.spatial.tests.test_qhull.Test_HalfspaceIntersection.test_cube_halfspace_intersection(self,dt)
scipy.spatial.tests.test_qhull.Test_HalfspaceIntersection.test_incremental(self)
scipy.spatial.tests.test_qhull.Test_HalfspaceIntersection.test_self_dual_polytope_intersection(self)
scipy.spatial.tests.test_qhull.Test_HalfspaceIntersection.test_wrong_feasible_point(self)
scipy.spatial.tests.test_qhull.Test_Qhull
scipy.spatial.tests.test_qhull.Test_Qhull.test_issue_8051(self)
scipy.spatial.tests.test_qhull.Test_Qhull.test_swapping(self)
scipy.spatial.tests.test_qhull._add_inc_data(name,chunksize)
scipy.spatial.tests.test_qhull.assert_hulls_equal(points,facets_1,facets_2)
scipy.spatial.tests.test_qhull.assert_unordered_tuple_list_equal(a,b,tpl=tuple)
scipy.spatial.tests.test_qhull.sorted_tuple(x)
scipy.spatial.tests.test_qhull.sorted_unique_tuple(x)
scipy.spatial.tests.testassert_hulls_equal(points,facets_1,facets_2)
scipy.spatial.tests.testassert_unordered_tuple_list_equal(a,b,tpl=tuple)
scipy.spatial.tests.testsorted_tuple(x)
scipy.spatial.tests.testsorted_unique_tuple(x)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/tests/test_distance.py----------------------------------------
A:scipy.spatial.tests.test_distance._tdist->numpy.array([[0, 662, 877, 255, 412, 996], [662, 0, 295, 468, 268, 400], [877, 295, 0, 754, 564, 138], [255, 468, 754, 0, 219, 869], [412, 268, 564, 219, 0, 669], [996, 400, 138, 869, 669, 0]], dtype='double')
A:scipy.spatial.tests.test_distance._ytdist->squareform(_tdist)
A:scipy.spatial.tests.test_distance.name->fn.replace('.txt', '').replace('-ml', '')
A:scipy.spatial.tests.test_distance.fqfn->os.path.join(os.path.dirname(__file__), 'data', fn)
A:scipy.spatial.tests.test_distance.fp->open(fqfn)
A:scipy.spatial.tests.test_distance.eo[name]->numpy.loadtxt(fp)
A:scipy.spatial.tests.test_distance.eo['pdist-boolean-inp']->numpy.bool_(eo['pdist-boolean-inp'])
A:scipy.spatial.tests.test_distance.eo['random-bool-data']->numpy.bool_(eo['random-bool-data'])
A:scipy.spatial.tests.test_distance.eo['random-float32-data']->numpy.float32(eo['random-double-data'])
A:scipy.spatial.tests.test_distance.eo['random-int-data']->numpy.int_(eo['random-int-data'])
A:scipy.spatial.tests.test_distance.eo['random-uint-data']->numpy.uint(eo['random-uint-data'])
A:scipy.spatial.tests.test_distance.arrays->tuple((np.take(a, pos_weights, axis=axis) for a in arrays))
A:scipy.spatial.tests.test_distance.chked->_chk_weights(arrays, weights=weights, axis=axis, force_weights=True, mask_screen=True)
A:scipy.spatial.tests.test_distance.force_weights->any((np.ma.getmask(a) is not np.ma.nomask for a in arrays))
A:scipy.spatial.tests.test_distance.weights->numpy.arange(3)
A:scipy.spatial.tests.test_distance.int_weights->numpy.arange(3).astype(int)
A:scipy.spatial.tests.test_distance.axis_mask->axis_mask.any(axis=not_axes).any(axis=not_axes)
A:scipy.spatial.tests.test_distance.not_axes->tuple((i for i in range(a.ndim) if i != axis))
A:scipy.spatial.tests.test_distance.seeded_rand->numpy.random.RandomState(seed)
A:scipy.spatial.tests.test_distance.record->numpy.asanyarray(np.take(a, ix, axis=axis))
A:scipy.spatial.tests.test_distance.split_ix->numpy.random.RandomState(seed).randint(n_obs + i)
A:scipy.spatial.tests.test_distance.q->numpy.random.RandomState(seed).rand()
A:scipy.spatial.tests.test_distance.check_a->key(a)
A:scipy.spatial.tests.test_distance.check_b->key(b)
A:scipy.spatial.tests.test_distance.result->fn(*args, **kwargs)
A:scipy.spatial.tests.test_distance.axis->dict().get('axis', default_axis)
A:scipy.spatial.tests.test_distance.(dud_arrays, dud_weights)->_rand_split(arrays, weights, axis, split_per=split_per, seed=seed)
A:scipy.spatial.tests.test_distance.indexer[axis]->slice(weights.size, None)
A:scipy.spatial.tests.test_distance.indexer->tuple(indexer)
A:scipy.spatial.tests.test_distance.(split_arrays, split_weights)->_rand_split(arrays, weights, axis, split_per=split_per, seed=seed)
A:scipy.spatial.tests.test_distance.wcdist->_weight_checked(cdist, default_axis=1, squeeze=False)
A:scipy.spatial.tests.test_distance.wcdist_no_const->_weight_checked(cdist, default_axis=1, squeeze=False, const_test=False)
A:scipy.spatial.tests.test_distance.wpdist->_weight_checked(pdist, default_axis=1, squeeze=False, n_args=1)
A:scipy.spatial.tests.test_distance.wpdist_no_const->_weight_checked(pdist, default_axis=1, squeeze=False, const_test=False, n_args=1)
A:scipy.spatial.tests.test_distance.wrogerstanimoto->_weight_checked(rogerstanimoto)
A:scipy.spatial.tests.test_distance.wmatchingwhamming->_weight_checked(hamming, dud_test=False)
A:scipy.spatial.tests.test_distance.wyule->_weight_checked(yule)
A:scipy.spatial.tests.test_distance.wdice->_weight_checked(dice)
A:scipy.spatial.tests.test_distance.wcityblock->_weight_checked(cityblock)
A:scipy.spatial.tests.test_distance.wchebyshev->_weight_checked(chebyshev)
A:scipy.spatial.tests.test_distance.wcosine->_weight_checked(cosine)
A:scipy.spatial.tests.test_distance.wcorrelation->_weight_checked(correlation)
A:scipy.spatial.tests.test_distance.wkulsinski->_weight_checked(kulsinski)
A:scipy.spatial.tests.test_distance.wkulczynski1->_weight_checked(kulczynski1)
A:scipy.spatial.tests.test_distance.wjaccard->_weight_checked(jaccard)
A:scipy.spatial.tests.test_distance.weuclidean->_weight_checked(euclidean, const_test=False)
A:scipy.spatial.tests.test_distance.wsqeuclidean->_weight_checked(sqeuclidean, const_test=False)
A:scipy.spatial.tests.test_distance.wbraycurtis->_weight_checked(braycurtis)
A:scipy.spatial.tests.test_distance.wcanberra->_weight_checked(canberra, const_test=False)
A:scipy.spatial.tests.test_distance.wsokalsneath->_weight_checked(sokalsneath)
A:scipy.spatial.tests.test_distance.wsokalmichener->_weight_checked(sokalmichener)
A:scipy.spatial.tests.test_distance.wrussellrao->_weight_checked(russellrao)
A:scipy.spatial.tests.test_distance.Y1->pdist(X, metric, **kwargs)
A:scipy.spatial.tests.test_distance.Y2->pdist(X_copy, metric, **kwargs)
A:scipy.spatial.tests.test_distance.x1->numpy.array([1, 1, 1])
A:scipy.spatial.tests.test_distance.x2->numpy.array([0, 0, 0])
A:scipy.spatial.tests.test_distance.dist->mahalanobis(x, y, vi)
A:scipy.spatial.tests.test_distance.rt2->numpy.sqrt(2)
A:scipy.spatial.tests.test_distance.data->numpy.array([[myclass()], [myclass()]], dtype=object)
A:scipy.spatial.tests.test_distance.cdist_y->cdist(data, data, metric=_my_metric)
A:scipy.spatial.tests.test_distance.y1->pdist(X1, metric=metric)
A:scipy.spatial.tests.test_distance.y2->pdist(new_type(X1), metric=metric)
A:scipy.spatial.tests.test_distance.y3->pdist(X, metric='test_' + metric, **kwargs)
A:scipy.spatial.tests.test_distance.X12->numpy.vstack([X1, X2]).astype(np.double)
A:scipy.spatial.tests.test_distance.V->numpy.atleast_2d(np.cov(X.astype(np.double).T))
A:scipy.spatial.tests.test_distance.VI->numpy.array(np.linalg.inv(V).T)
A:scipy.spatial.tests.test_distance.X1new->new_type(X1)
A:scipy.spatial.tests.test_distance.X2new->new_type(X2)
A:scipy.spatial.tests.test_distance.kwargs->dict()
A:scipy.spatial.tests.test_distance.out1->numpy.empty(out_size, dtype=np.double)
A:scipy.spatial.tests.test_distance.out2->numpy.empty(out_size + 3, dtype=np.double)
A:scipy.spatial.tests.test_distance.out4->numpy.empty((out_r, out_c), dtype=np.double, order='F')
A:scipy.spatial.tests.test_distance.out5->numpy.empty(out_size, dtype=np.int64)
A:scipy.spatial.tests.test_distance.X1_copy->numpy.asarray([[1.0, 2.0, 3.0], [1.2, 2.3, 3.4], [2.2, 2.3, 4.4], [22.2, 23.3, 44.4]]).copy()
A:scipy.spatial.tests.test_distance.X2_copy->new_type(X1).copy()
A:scipy.spatial.tests.test_distance.out->cdist(x1, x2, metric=metric, **kwargs)
A:scipy.spatial.tests.test_distance.Y_test1->pdist(X, metric, out=out1, **kwargs)
A:scipy.spatial.tests.test_distance.X->numpy.random.rand(n, 4)
A:scipy.spatial.tests.test_distance.Y_test2->pdist(X, 'test_chebyshev')
A:scipy.spatial.tests.test_distance.x->numpy.ones((2, 6), dtype=bool)
A:scipy.spatial.tests.test_distance.Y_right->pdist(X, metric, **kwargs)
A:scipy.spatial.tests.test_distance.Y->wpdist_no_const(X)
A:scipy.spatial.tests.test_distance.m->wrussellrao(np.array([1, 0, 1]), np.array([1, 1, 0]))
A:scipy.spatial.tests.test_distance.m2->wrussellrao(np.array([1, 0, 1], dtype=bool), np.array([1, 1, 0], dtype=bool))
A:scipy.spatial.tests.test_distance.pdist_y->pdist(data, metric=_my_metric)
A:scipy.spatial.tests.test_distance.X2->new_type(X1)
A:scipy.spatial.tests.test_distance.out_size->int(X.shape[0] * (X.shape[0] - 1) / 2)
A:scipy.spatial.tests.test_distance.X_copy->numpy.random.rand(n, 4).copy()
A:scipy.spatial.tests.test_distance.y->_validate_vector(x)
A:scipy.spatial.tests.test_distance.dist1->sokalmichener(p, q)
A:scipy.spatial.tests.test_distance.dist1p5->minkowski(x, y, p=1.5)
A:scipy.spatial.tests.test_distance.dist2->sokalmichener(x, y)
A:scipy.spatial.tests.test_distance.dist0p25->minkowski(x, y, p=0.25)
A:scipy.spatial.tests.test_distance.a->numpy.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
A:scipy.spatial.tests.test_distance.b->numpy.array([[13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24]])
A:scipy.spatial.tests.test_distance.xm->numpy.array([-1.0, 0, 1.0])
A:scipy.spatial.tests.test_distance.ym->numpy.array([-4.0 / 3, -4.0 / 3, 5.0 - 7.0 / 3])
A:scipy.spatial.tests.test_distance.vi->numpy.array([[2.0, 1.0, 0.0], [1.0, 2.0, 1.0], [0.0, 1.0, 2.0]])
A:scipy.spatial.tests.test_distance.A->squareform(Y)
A:scipy.spatial.tests.test_distance.rA->squareform(A)
A:scipy.spatial.tests.test_distance.v->numpy.array([8.3], dtype=dtype)
A:scipy.spatial.tests.test_distance.rv->squareform(v)
A:scipy.spatial.tests.test_distance.Yr->squareform(A)
A:scipy.spatial.tests.test_distance.D->squareform(y)
A:scipy.spatial.tests.test_distance.rs->numpy.random.RandomState(1234567890)
A:scipy.spatial.tests.test_distance.d1->wsqeuclidean([0], np.asarray([umax], dtype=dtype))
A:scipy.spatial.tests.test_distance.d2->wsqeuclidean(np.asarray([umax], dtype=dtype), [0])
A:scipy.spatial.tests.test_distance.arr_in->numpy.array([[83.33333333, 100.0, 83.33333333, 100.0, 36.0, 60.0, 90.0, 150.0, 24.0, 48.0], [83.33333333, 100.0, 83.33333333, 100.0, 36.0, 60.0, 90.0, 150.0, 24.0, 48.0]])
A:scipy.spatial.tests.test_distance.p0->pdist(arr_in, metric='minkowski', p=1, w=None)
A:scipy.spatial.tests.test_distance.c0->cdist(arr_in, arr_in, metric='minkowski', p=1, w=None)
A:scipy.spatial.tests.test_distance.p1->pdist(arr_in, metric='minkowski', p=1)
A:scipy.spatial.tests.test_distance.c1->cdist(arr_in, arr_in, metric='minkowski', p=1)
A:scipy.spatial.tests.test_distance.d->cdist(x[:1], x[:1], 'yule')
A:scipy.spatial.tests.test_distance.actual->sokalmichener([1, 0], [1, 1], w=[1, 0.2])
A:scipy.spatial.tests.test_distance.X1->numpy.asarray([[1.0, 2.0, 3.0], [1.2, 2.3, 3.4], [2.2, 2.3, 4.4], [22.2, 23.3, 44.4]])
A:scipy.spatial.tests.test_distance.w->numpy.ones(X.shape[1])
scipy.spatial.tests.test_distance.TestCdist
scipy.spatial.tests.test_distance.TestCdist._check_calling_conventions(self,X1,X2,metric,eps=1e-07,**kwargs)
scipy.spatial.tests.test_distance.TestCdist.setup_method(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_calling_conventions(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_cosine_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_custom_notdouble(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_dtype_equivalence(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_euclidean_random_unicode(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_extra_args(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_mahalanobis(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_minkowski_random(self,p)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_out(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_refcount(self)
scipy.spatial.tests.test_distance.TestCdist.test_striding(self)
scipy.spatial.tests.test_distance.TestIsValidDM
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_asymmetric_E(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_asymmetric_F(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_correct_1_by_1(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_correct_2_by_2(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_correct_3_by_3(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_correct_4_by_4(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_correct_5_by_5(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_improper_shape_1D_E(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_improper_shape_1D_F(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_improper_shape_3D_E(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_improper_shape_3D_F(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_nonzero_diagonal_E(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_nonzero_diagonal_F(self)
scipy.spatial.tests.test_distance.TestIsValidY
scipy.spatial.tests.test_distance.TestIsValidY.bad_y(self,n)
scipy.spatial.tests.test_distance.TestIsValidY.correct_n_by_n(self,n)
scipy.spatial.tests.test_distance.TestIsValidY.test_is_valid_y_2_100(self)
scipy.spatial.tests.test_distance.TestIsValidY.test_is_valid_y_correct_2_by_2(self)
scipy.spatial.tests.test_distance.TestIsValidY.test_is_valid_y_correct_3_by_3(self)
scipy.spatial.tests.test_distance.TestIsValidY.test_is_valid_y_correct_4_by_4(self)
scipy.spatial.tests.test_distance.TestIsValidY.test_is_valid_y_correct_5_by_5(self)
scipy.spatial.tests.test_distance.TestIsValidY.test_is_valid_y_improper_shape_2D_E(self)
scipy.spatial.tests.test_distance.TestIsValidY.test_is_valid_y_improper_shape_2D_F(self)
scipy.spatial.tests.test_distance.TestIsValidY.test_is_valid_y_improper_shape_3D_E(self)
scipy.spatial.tests.test_distance.TestIsValidY.test_is_valid_y_improper_shape_3D_F(self)
scipy.spatial.tests.test_distance.TestNumObsDM
scipy.spatial.tests.test_distance.TestNumObsDM.check_D(self,n)
scipy.spatial.tests.test_distance.TestNumObsDM.make_D(self,n)
scipy.spatial.tests.test_distance.TestNumObsDM.test_num_obs_dm_0(self)
scipy.spatial.tests.test_distance.TestNumObsDM.test_num_obs_dm_1(self)
scipy.spatial.tests.test_distance.TestNumObsDM.test_num_obs_dm_2(self)
scipy.spatial.tests.test_distance.TestNumObsDM.test_num_obs_dm_3(self)
scipy.spatial.tests.test_distance.TestNumObsDM.test_num_obs_dm_4(self)
scipy.spatial.tests.test_distance.TestNumObsDM.test_num_obs_dm_multi_matrix(self)
scipy.spatial.tests.test_distance.TestNumObsY
scipy.spatial.tests.test_distance.TestNumObsY.bad_y(self,n)
scipy.spatial.tests.test_distance.TestNumObsY.check_y(self,n)
scipy.spatial.tests.test_distance.TestNumObsY.make_y(self,n)
scipy.spatial.tests.test_distance.TestNumObsY.minit(self,n)
scipy.spatial.tests.test_distance.TestNumObsY.test_num_obs_y_1(self)
scipy.spatial.tests.test_distance.TestNumObsY.test_num_obs_y_2(self)
scipy.spatial.tests.test_distance.TestNumObsY.test_num_obs_y_2_100(self)
scipy.spatial.tests.test_distance.TestNumObsY.test_num_obs_y_3(self)
scipy.spatial.tests.test_distance.TestNumObsY.test_num_obs_y_4(self)
scipy.spatial.tests.test_distance.TestNumObsY.test_num_obs_y_5_10(self)
scipy.spatial.tests.test_distance.TestNumObsY.test_num_obs_y_multi_matrix(self)
scipy.spatial.tests.test_distance.TestPdist
scipy.spatial.tests.test_distance.TestPdist._check_calling_conventions(self,X,metric,eps=1e-07,**kwargs)
scipy.spatial.tests.test_distance.TestPdist.setup_method(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_calling_conventions(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_canberra_match(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_canberra_ticket_711(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_chebyshev_iris(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_chebyshev_iris_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_chebyshev_iris_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_chebyshev_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_chebyshev_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_chebyshev_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cityblock_iris(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cityblock_iris_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cityblock_iris_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cityblock_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cityblock_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cityblock_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_correlation_iris(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_correlation_iris_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_correlation_iris_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_correlation_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_correlation_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_correlation_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cosine_bounds(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cosine_iris(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cosine_iris_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cosine_iris_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cosine_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cosine_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cosine_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_custom_notdouble(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_dhamming_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_dhamming_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_dhamming_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_dice_mtica1(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_dice_mtica2(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_djaccard_allzeros(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_djaccard_allzeros_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_djaccard_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_djaccard_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_djaccard_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_dtype_equivalence(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_euclidean_iris_double(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_euclidean_iris_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_euclidean_iris_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_euclidean_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_euclidean_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_euclidean_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_euclidean_random_u(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_extra_args(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_hamming_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_hamming_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_hamming_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_jaccard_mtica1(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_jaccard_mtica2(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_jaccard_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_jaccard_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_jaccard_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_jensenshannon_iris(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_jensenshannon_iris_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_jensenshannon_iris_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_jensenshannon_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_jensenshannon_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_jensenshannon_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_mahalanobis(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_matching_mtica1(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_matching_mtica2(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_minkowski_3_2_iris(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_minkowski_3_2_iris_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_minkowski_3_2_iris_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_minkowski_5_8_iris(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_minkowski_5_8_iris_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_minkowski_5_8_iris_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_minkowski_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_minkowski_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_minkowski_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_minkowski_random_p(self,p)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_out(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_rogerstanimoto_mtica1(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_rogerstanimoto_mtica2(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_russellrao_mtica1(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_russellrao_mtica2(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_seuclidean_iris(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_seuclidean_iris_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_seuclidean_iris_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_seuclidean_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_seuclidean_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_seuclidean_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_sokalsneath_mtica1(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_sokalsneath_mtica2(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_yule_mtica1(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_yule_mtica2(self)
scipy.spatial.tests.test_distance.TestPdist.test_striding(self)
scipy.spatial.tests.test_distance.TestSomeDistanceFunctions
scipy.spatial.tests.test_distance.TestSomeDistanceFunctions.setup_method(self)
scipy.spatial.tests.test_distance.TestSomeDistanceFunctions.test_correlation(self)
scipy.spatial.tests.test_distance.TestSomeDistanceFunctions.test_correlation_positive(self)
scipy.spatial.tests.test_distance.TestSomeDistanceFunctions.test_cosine(self)
scipy.spatial.tests.test_distance.TestSomeDistanceFunctions.test_euclidean(self)
scipy.spatial.tests.test_distance.TestSomeDistanceFunctions.test_mahalanobis(self)
scipy.spatial.tests.test_distance.TestSomeDistanceFunctions.test_minkowski(self)
scipy.spatial.tests.test_distance.TestSomeDistanceFunctions.test_sqeuclidean(self)
scipy.spatial.tests.test_distance.TestSquareForm
scipy.spatial.tests.test_distance.TestSquareForm.check_squareform_matrix(self,dtype)
scipy.spatial.tests.test_distance.TestSquareForm.check_squareform_multi_matrix(self,n)
scipy.spatial.tests.test_distance.TestSquareForm.check_squareform_vector(self,dtype)
scipy.spatial.tests.test_distance.TestSquareForm.test_squareform_matrix(self)
scipy.spatial.tests.test_distance.TestSquareForm.test_squareform_multi_matrix(self)
scipy.spatial.tests.test_distance.TestSquareForm.test_squareform_vector(self)
scipy.spatial.tests.test_distance._chk_asarrays(arrays,axis=None)
scipy.spatial.tests.test_distance._chk_weights(arrays,weights=None,axis=None,force_weights=False,simplify_weights=True,pos_only=False,neg_check=False,nan_screen=False,mask_screen=False,ddof=None)
scipy.spatial.tests.test_distance._freq_weights(weights)
scipy.spatial.tests.test_distance._is_32bit()
scipy.spatial.tests.test_distance._rand_split(arrays,weights,axis,split_per,seed=None)
scipy.spatial.tests.test_distance._rough_check(a,b,compare_assert=partial(assert_allclose,atol=1e-05),key=lambdax:x,w=None)
scipy.spatial.tests.test_distance._weight_checked(fn,n_args=2,default_axis=None,key=lambdax:x,weight_arg='w',squeeze=True,silent=False,ones_test=True,const_test=True,dup_test=True,split_test=True,dud_test=True,ma_safe=False,ma_very_safe=False,nan_safe=False,split_per=1.0,seed=0,compare_assert=partial(assert_allclose,atol=1e-05))
scipy.spatial.tests.test_distance._weight_masked(arrays,weights,axis)
scipy.spatial.tests.test_distance.is_valid_dm_throw(D)
scipy.spatial.tests.test_distance.is_valid_y_throw(y)
scipy.spatial.tests.test_distance.load_testing_files()
scipy.spatial.tests.test_distance.test_Xdist_deprecated_args()
scipy.spatial.tests.test_distance.test_Xdist_non_negative_weights()
scipy.spatial.tests.test_distance.test__validate_vector()
scipy.spatial.tests.test_distance.test_bad_p(p)
scipy.spatial.tests.test_distance.test_braycurtis()
scipy.spatial.tests.test_distance.test_canberra()
scipy.spatial.tests.test_distance.test_euclideans()
scipy.spatial.tests.test_distance.test_hamming_string_array()
scipy.spatial.tests.test_distance.test_hamming_unequal_length()
scipy.spatial.tests.test_distance.test_jensenshannon()
scipy.spatial.tests.test_distance.test_kulsinski_deprecation()
scipy.spatial.tests.test_distance.test_minkowski_w()
scipy.spatial.tests.test_distance.test_modifies_input()
scipy.spatial.tests.test_distance.test_sokalmichener()
scipy.spatial.tests.test_distance.test_sokalmichener_with_weight()
scipy.spatial.tests.test_distance.test_sokalsneath_all_false()
scipy.spatial.tests.test_distance.test_sqeuclidean_dtypes()
scipy.spatial.tests.test_distance.test_yule_all_same()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/transform/_rotation_spline.py----------------------------------------
A:scipy.spatial.transform._rotation_spline.result->_compute_angular_acceleration(rotvecs, rotvecs_dot, rotvecs_dot_dot)
A:scipy.spatial.transform._rotation_spline.norm->numpy.linalg.norm(rotvecs, axis=1)
A:scipy.spatial.transform._rotation_spline.k->numpy.empty_like(norm)
A:scipy.spatial.transform._rotation_spline.skew->_create_skew_matrix(rotvecs)
A:scipy.spatial.transform._rotation_spline.result[:]->numpy.identity(3)
A:scipy.spatial.transform._rotation_spline.k1->numpy.empty_like(norm)
A:scipy.spatial.transform._rotation_spline.k2->numpy.empty_like(norm)
A:scipy.spatial.transform._rotation_spline.dp->numpy.sum(rotvecs * rotvecs_dot, axis=1)
A:scipy.spatial.transform._rotation_spline.cp->numpy.cross(rotvecs, rotvecs_dot)
A:scipy.spatial.transform._rotation_spline.ccp->numpy.cross(rotvecs, cp)
A:scipy.spatial.transform._rotation_spline.dccp->numpy.cross(rotvecs_dot, cp)
A:scipy.spatial.transform._rotation_spline.k3->numpy.empty_like(norm)
A:scipy.spatial.transform._rotation_spline.ind->numpy.arange(3)
A:scipy.spatial.transform._rotation_spline.ind_blocks->numpy.arange(len(A))
A:scipy.spatial.transform._rotation_spline.A_i->numpy.empty_like(A, dtype=int)
A:scipy.spatial.transform._rotation_spline.A_j->numpy.empty_like(A, dtype=int)
A:scipy.spatial.transform._rotation_spline.B_i->numpy.empty_like(B, dtype=int)
A:scipy.spatial.transform._rotation_spline.B_j->numpy.empty_like(B, dtype=int)
A:scipy.spatial.transform._rotation_spline.diag_idiag_j->numpy.arange(3 * len(d))
A:scipy.spatial.transform._rotation_spline.i->numpy.hstack((A_i.ravel(), B_i.ravel(), diag_i))
A:scipy.spatial.transform._rotation_spline.j->numpy.hstack((A_j.ravel(), B_j.ravel(), diag_j))
A:scipy.spatial.transform._rotation_spline.values->numpy.hstack((A.ravel(), B.ravel(), np.repeat(d, 3)))
A:scipy.spatial.transform._rotation_spline.angular_rate_first->angular_rates[0].copy()
A:scipy.spatial.transform._rotation_spline.A->_angular_rate_to_rotvec_dot_matrix(rotvecs)
A:scipy.spatial.transform._rotation_spline.A_inv->_rotvec_dot_to_angular_rate_matrix(rotvecs)
A:scipy.spatial.transform._rotation_spline.M->_create_block_3_diagonal_matrix(2 * A_inv[1:-1] / dt[1:-1, None, None], 2 * A[1:-1] / dt[1:-1, None, None], 4 * (1 / dt[:-1] + 1 / dt[1:]))
A:scipy.spatial.transform._rotation_spline.rotvecs_dot->self.interpolator(times, 1)
A:scipy.spatial.transform._rotation_spline.delta_beta->_angular_acceleration_nonlinear_term(rotvecs[:-1], rotvecs_dot[:-1])
A:scipy.spatial.transform._rotation_spline.angular_rates_new->angular_rates_new.reshape((-1, 3)).reshape((-1, 3))
A:scipy.spatial.transform._rotation_spline.delta->numpy.abs(angular_rates_new - angular_rates[:-1])
A:scipy.spatial.transform._rotation_spline.angular_rates->numpy.vstack((angular_rate_first, angular_rates[:-1]))
A:scipy.spatial.transform._rotation_spline.times->numpy.atleast_1d(times)
A:scipy.spatial.transform._rotation_spline.dt->numpy.diff(times)
A:scipy.spatial.transform._rotation_spline.rotvecs->self.interpolator(times)
A:scipy.spatial.transform._rotation_spline.(angular_rates, rotvecs_dot)->self._solve_for_angular_rates(dt, angular_rates, rotvecs)
A:scipy.spatial.transform._rotation_spline.coeff->numpy.empty((4, len(times) - 1, 3))
A:scipy.spatial.transform._rotation_spline.self.interpolator->PPoly(coeff, times)
A:scipy.spatial.transform._rotation_spline.index->numpy.searchsorted(self.times, times, side='right')
A:scipy.spatial.transform._rotation_spline.rotvecs_dot_dot->self.interpolator(times, 2)
scipy.spatial.transform.RotationSpline(self,times,rotations)
scipy.spatial.transform.RotationSpline._solve_for_angular_rates(self,dt,angular_rates,rotvecs)
scipy.spatial.transform._rotation_spline.RotationSpline(self,times,rotations)
scipy.spatial.transform._rotation_spline.RotationSpline.__init__(self,times,rotations)
scipy.spatial.transform._rotation_spline.RotationSpline._solve_for_angular_rates(self,dt,angular_rates,rotvecs)
scipy.spatial.transform._rotation_spline._angular_acceleration_nonlinear_term(rotvecs,rotvecs_dot)
scipy.spatial.transform._rotation_spline._angular_rate_to_rotvec_dot_matrix(rotvecs)
scipy.spatial.transform._rotation_spline._compute_angular_acceleration(rotvecs,rotvecs_dot,rotvecs_dot_dot)
scipy.spatial.transform._rotation_spline._compute_angular_rate(rotvecs,rotvecs_dot)
scipy.spatial.transform._rotation_spline._create_block_3_diagonal_matrix(A,B,d)
scipy.spatial.transform._rotation_spline._create_skew_matrix(x)
scipy.spatial.transform._rotation_spline._matrix_vector_product_of_stacks(A,b)
scipy.spatial.transform._rotation_spline._rotvec_dot_to_angular_rate_matrix(rotvecs)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/transform/_rotation_groups.py----------------------------------------
A:scipy.spatial.transform._rotation_groups.g1->cyclic(cls, n, axis).as_rotvec()
A:scipy.spatial.transform._rotation_groups.g2->numpy.roll(rv, axis, axis=1)
A:scipy.spatial.transform._rotation_groups.thetas->numpy.linspace(0, 2 * np.pi, n, endpoint=False)
A:scipy.spatial.transform._rotation_groups.order->int(group[1:])
A:scipy.spatial.transform._rotation_groups.axis->'xyz'.index(axis.lower())
scipy.spatial.transform._rotation_groups.create_group(cls,group,axis='Z')
scipy.spatial.transform._rotation_groups.cyclic(cls,n,axis=2)
scipy.spatial.transform._rotation_groups.dicyclic(cls,n,axis=2)
scipy.spatial.transform._rotation_groups.icosahedral(cls)
scipy.spatial.transform._rotation_groups.octahedral(cls)
scipy.spatial.transform._rotation_groups.tetrahedral(cls)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/transform/_rotation.pyi----------------------------------------
scipy.spatial.transform.Rotation(self,quat:npt.ArrayLike,normalize:bool=...,copy:bool=...)
scipy.spatial.transform.Rotation.__getitem__(self,indexer:Union[int,slice,npt.ArrayLike])->Rotation
scipy.spatial.transform.Rotation.__len__(self)->int
scipy.spatial.transform.Rotation.__mul__(self,other:Rotation)->Rotation
scipy.spatial.transform.Rotation.align_vectors(cls,a:npt.ArrayLike,b:npt.ArrayLike,weights:Optional[npt.ArrayLike]=...,return_sensitivity:bool=...)->Union[Tuple[Rotation, float], Tuple[Rotation, float, np.ndarray]]
scipy.spatial.transform.Rotation.apply(self,vectors:npt.ArrayLike,inverse:bool=...)->np.ndarray
scipy.spatial.transform.Rotation.as_euler(self,seq:str,degrees:bool=...)->np.ndarray
scipy.spatial.transform.Rotation.as_matrix(self)->np.ndarray
scipy.spatial.transform.Rotation.as_mrp(self)->np.ndarray
scipy.spatial.transform.Rotation.as_quat(self)->np.ndarray
scipy.spatial.transform.Rotation.as_rotvec(self)->np.ndarray
scipy.spatial.transform.Rotation.concatenate(cls,rotations:Sequence[Rotation])->Rotation
scipy.spatial.transform.Rotation.create_group(cls,group:str,axis:str=...)->Rotation
scipy.spatial.transform.Rotation.from_euler(cls,seq:str,angles:Union[float,npt.ArrayLike],degrees:bool=...)->Rotation
scipy.spatial.transform.Rotation.from_matrix(cls,matrix:npt.ArrayLike)->Rotation
scipy.spatial.transform.Rotation.from_mrp(cls,mrp:npt.ArrayLike)->Rotation
scipy.spatial.transform.Rotation.from_quat(cls,quat:npt.ArrayLike)->Rotation
scipy.spatial.transform.Rotation.from_rotvec(cls,rotvec:npt.ArrayLike)->Rotation
scipy.spatial.transform.Rotation.identity(cls,num:Optional[int]=...)->Rotation
scipy.spatial.transform.Rotation.inv(self)->Rotation
scipy.spatial.transform.Rotation.magnitude(self)->Union[np.ndarray, float]
scipy.spatial.transform.Rotation.mean(self,weights:Optional[npt.ArrayLike]=...)->Rotation
scipy.spatial.transform.Rotation.random(cls,num:Optional[int]=...,random_state:Optional[Union[_IntegerType,np.random.Generator,np.random.RandomState]]=...)->Rotation
scipy.spatial.transform.Rotation.reduce(self,left:Optional[Rotation]=...,right:Optional[Rotation]=...,return_indices:bool=...)->Union[Rotation, Tuple[Rotation, np.ndarray, np.ndarray]]
scipy.spatial.transform.Rotation.single(self)->bool
scipy.spatial.transform.Slerp(self,times:npt.ArrayLike,rotations:Rotation)
scipy.spatial.transform._rotation.Rotation(self,quat:npt.ArrayLike,normalize:bool=...,copy:bool=...)
scipy.spatial.transform._rotation.Rotation.__getitem__(self,indexer:Union[int,slice,npt.ArrayLike])->Rotation
scipy.spatial.transform._rotation.Rotation.__init__(self,quat:npt.ArrayLike,normalize:bool=...,copy:bool=...)
scipy.spatial.transform._rotation.Rotation.__len__(self)->int
scipy.spatial.transform._rotation.Rotation.__mul__(self,other:Rotation)->Rotation
scipy.spatial.transform._rotation.Rotation.align_vectors(cls,a:npt.ArrayLike,b:npt.ArrayLike,weights:Optional[npt.ArrayLike]=...,return_sensitivity:bool=...)->Union[Tuple[Rotation, float], Tuple[Rotation, float, np.ndarray]]
scipy.spatial.transform._rotation.Rotation.apply(self,vectors:npt.ArrayLike,inverse:bool=...)->np.ndarray
scipy.spatial.transform._rotation.Rotation.as_euler(self,seq:str,degrees:bool=...)->np.ndarray
scipy.spatial.transform._rotation.Rotation.as_matrix(self)->np.ndarray
scipy.spatial.transform._rotation.Rotation.as_mrp(self)->np.ndarray
scipy.spatial.transform._rotation.Rotation.as_quat(self)->np.ndarray
scipy.spatial.transform._rotation.Rotation.as_rotvec(self)->np.ndarray
scipy.spatial.transform._rotation.Rotation.concatenate(cls,rotations:Sequence[Rotation])->Rotation
scipy.spatial.transform._rotation.Rotation.create_group(cls,group:str,axis:str=...)->Rotation
scipy.spatial.transform._rotation.Rotation.from_euler(cls,seq:str,angles:Union[float,npt.ArrayLike],degrees:bool=...)->Rotation
scipy.spatial.transform._rotation.Rotation.from_matrix(cls,matrix:npt.ArrayLike)->Rotation
scipy.spatial.transform._rotation.Rotation.from_mrp(cls,mrp:npt.ArrayLike)->Rotation
scipy.spatial.transform._rotation.Rotation.from_quat(cls,quat:npt.ArrayLike)->Rotation
scipy.spatial.transform._rotation.Rotation.from_rotvec(cls,rotvec:npt.ArrayLike)->Rotation
scipy.spatial.transform._rotation.Rotation.identity(cls,num:Optional[int]=...)->Rotation
scipy.spatial.transform._rotation.Rotation.inv(self)->Rotation
scipy.spatial.transform._rotation.Rotation.magnitude(self)->Union[np.ndarray, float]
scipy.spatial.transform._rotation.Rotation.mean(self,weights:Optional[npt.ArrayLike]=...)->Rotation
scipy.spatial.transform._rotation.Rotation.random(cls,num:Optional[int]=...,random_state:Optional[Union[_IntegerType,np.random.Generator,np.random.RandomState]]=...)->Rotation
scipy.spatial.transform._rotation.Rotation.reduce(self,left:Optional[Rotation]=...,right:Optional[Rotation]=...,return_indices:bool=...)->Union[Rotation, Tuple[Rotation, np.ndarray, np.ndarray]]
scipy.spatial.transform._rotation.Rotation.single(self)->bool
scipy.spatial.transform._rotation.Slerp(self,times:npt.ArrayLike,rotations:Rotation)
scipy.spatial.transform._rotation.Slerp.__init__(self,times:npt.ArrayLike,rotations:Rotation)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/transform/rotation.py----------------------------------------
scipy.spatial.transform.rotation.__dir__()
scipy.spatial.transform.rotation.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/transform/__init__.py----------------------------------------
A:scipy.spatial.transform.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/transform/tests/test_rotation.py----------------------------------------
A:scipy.spatial.transform.tests.test_rotation.x->numpy.array([[0.89299824, -0.44372674, 0.0752378], [0.60221789, -0.47564102, -0.6411702]])
A:scipy.spatial.transform.tests.test_rotation.r->scipy.spatial.transform.Rotation.from_quat([0, 0, 0, 1])
A:scipy.spatial.transform.tests.test_rotation.mat->numpy.empty((2, 3, 3))
A:scipy.spatial.transform.tests.test_rotation.expected_mat->numpy.array([[0, -1, 0], [0, 0, -1], [1, 0, 0]])
A:scipy.spatial.transform.tests.test_rotation.expected0->numpy.array([[0, -1, 0], [1, 0, 0], [0, 0, 1]])
A:scipy.spatial.transform.tests.test_rotation.expected1->numpy.array([[0, 0, 1], [0, 1, 0], [-1, 0, 0]])
A:scipy.spatial.transform.tests.test_rotation.expected_quat->numpy.array([[0.2, 0.4, 0.4, -0.8], [0.61538462, -0.61538462, 0.30769231, -0.38461538], [0, 0, 0, 1]])
A:scipy.spatial.transform.tests.test_rotation.rnd->numpy.random.RandomState(0)
A:scipy.spatial.transform.tests.test_rotation.ortho_mat->scipy.spatial.transform.Rotation.from_matrix(mat).as_matrix()
A:scipy.spatial.transform.tests.test_rotation.mult_result->numpy.einsum('...ij,...jk->...ik', ortho_mat, ortho_mat.transpose((0, 2, 1)))
A:scipy.spatial.transform.tests.test_rotation.eye3d->numpy.empty((1, 3, 3))
A:scipy.spatial.transform.tests.test_rotation.result->scipy.spatial.transform.Rotation.concatenate(split)
A:scipy.spatial.transform.tests.test_rotation.rotvec->numpy.array([[0, 0, 0], [1, -1, 2], [-0.0003, 0.00035, 7.5e-05]])
A:scipy.spatial.transform.tests.test_rotation.quat->scipy.spatial.transform.Rotation.from_euler('z', 90, degrees=True).as_quat()
A:scipy.spatial.transform.tests.test_rotation.rot1->scipy.spatial.transform.Rotation.from_rotvec(rotvec1, degrees=True)
A:scipy.spatial.transform.tests.test_rotation.quat1->scipy.spatial.transform.Rotation.from_rotvec(rotvec1, degrees=True).as_quat()
A:scipy.spatial.transform.tests.test_rotation.rotvec2->numpy.deg2rad(rotvec1)
A:scipy.spatial.transform.tests.test_rotation.rot2->scipy.spatial.transform.Rotation.from_rotvec(rotvec2)
A:scipy.spatial.transform.tests.test_rotation.quat2->scipy.spatial.transform.Rotation.from_rotvec(rotvec2).as_quat()
A:scipy.spatial.transform.tests.test_rotation.angle->numpy.linalg.norm(rotvec)
A:scipy.spatial.transform.tests.test_rotation.expected_rotvec->numpy.array([[0.5772381, 1.1544763, -1.7317144]])
A:scipy.spatial.transform.tests.test_rotation.actual_rotvec->scipy.spatial.transform.Rotation.from_quat(quat).as_rotvec()
A:scipy.spatial.transform.tests.test_rotation.rot->scipy.spatial.transform.Rotation.random(random_state=rnd)
A:scipy.spatial.transform.tests.test_rotation.mrp->numpy.array([[1, 2, 2], [1, -1, 0.5], [0, 0, 0]])
A:scipy.spatial.transform.tests.test_rotation.expected_mrp->numpy.array([[0, 0, 0], [-0.16666667, 0.16666667, -0.33333333], [0.41421356, 0, 0], [0.1, 0.2, 0.1]])
A:scipy.spatial.transform.tests.test_rotation.actual_mrp->numpy.array([[0, 0, 0], [1, -1, 2], [0.41421356, 0, 0], [0.1, 0.2, 0.1]])
A:scipy.spatial.transform.tests.test_rotation.extrinsic->scipy.spatial.transform.Rotation.from_euler('z', 90, degrees=True).as_matrix()
A:scipy.spatial.transform.tests.test_rotation.intrinsic->scipy.spatial.transform.Rotation.from_euler('Z', 90, degrees=True).as_matrix()
A:scipy.spatial.transform.tests.test_rotation.a->scipy.spatial.transform.Rotation.random(random_state=rng).apply(b)
A:scipy.spatial.transform.tests.test_rotation.y->numpy.array([[0.02386536, -0.82176463, 0.5693271], [-0.27654929, -0.95191427, -0.1318321]])
A:scipy.spatial.transform.tests.test_rotation.angles->numpy.array([[15, 0, 60], [35, 0, 75], [60, 180, 35], [15, -180, 25]])
A:scipy.spatial.transform.tests.test_rotation.angles[:, 0]->numpy.random.RandomState(0).uniform(low=-np.pi, high=np.pi, size=(n,))
A:scipy.spatial.transform.tests.test_rotation.angles[:, 1]->numpy.random.RandomState(0).uniform(low=0, high=np.pi, size=(n,))
A:scipy.spatial.transform.tests.test_rotation.angles[:, 2]->numpy.random.RandomState(0).uniform(low=-np.pi, high=np.pi, size=(n,))
A:scipy.spatial.transform.tests.test_rotation.seq->seq.upper().upper()
A:scipy.spatial.transform.tests.test_rotation.rotation->scipy.spatial.transform.Rotation.random(10, random_state=0)
A:scipy.spatial.transform.tests.test_rotation.mat_expected->scipy.spatial.transform.Rotation.random(10, random_state=0).as_matrix()
A:scipy.spatial.transform.tests.test_rotation.angle_estimates->scipy.spatial.transform.Rotation.random(10, random_state=0).as_euler(seq, degrees=True)
A:scipy.spatial.transform.tests.test_rotation.mat_estimated->scipy.spatial.transform.Rotation.from_euler(seq, angle_estimates, degrees=True).as_matrix()
A:scipy.spatial.transform.tests.test_rotation.p->scipy.spatial.transform.Rotation.random(7, random_state=rng)
A:scipy.spatial.transform.tests.test_rotation.q->scipy.spatial.transform.Rotation.random(7, random_state=rng).inv()
A:scipy.spatial.transform.tests.test_rotation.p_mat->scipy.spatial.transform.Rotation.random(7, random_state=rng).as_matrix()
A:scipy.spatial.transform.tests.test_rotation.q_mat->scipy.spatial.transform.Rotation.random(7, random_state=rng).inv().as_matrix()
A:scipy.spatial.transform.tests.test_rotation.result1->scipy.spatial.transform.Rotation.identity().magnitude()
A:scipy.spatial.transform.tests.test_rotation.result2->r[3].magnitude()
A:scipy.spatial.transform.tests.test_rotation.eye3d[:]->numpy.eye(3)
A:scipy.spatial.transform.tests.test_rotation.res1->numpy.dot(p_mat, q_mat)
A:scipy.spatial.transform.tests.test_rotation.res2->numpy.dot(q_mat, p_mat)
A:scipy.spatial.transform.tests.test_rotation.eye->numpy.eye(3)
A:scipy.spatial.transform.tests.test_rotation.x_matrix->numpy.array([[0.89299824, -0.44372674, 0.0752378], [0.60221789, -0.47564102, -0.6411702]]).as_matrix()
A:scipy.spatial.transform.tests.test_rotation.y_matrix->numpy.array([[0.02386536, -0.82176463, 0.5693271], [-0.27654929, -0.95191427, -0.1318321]]).as_matrix()
A:scipy.spatial.transform.tests.test_rotation.axes->numpy.array([[0, 0, 0], [1, 0, 0], [1, 0, 0]])
A:scipy.spatial.transform.tests.test_rotation.thetas->numpy.linspace(0, np.pi / 2, 100)
A:scipy.spatial.transform.tests.test_rotation.rw->scipy.spatial.transform.Rotation.from_rotvec(t * axes[:2])
A:scipy.spatial.transform.tests.test_rotation.mw->scipy.spatial.transform.Rotation.from_rotvec(t * axes[:2]).mean(weights=[1, 2])
A:scipy.spatial.transform.tests.test_rotation.m->scipy.spatial.transform.Rotation.from_quat([0, 0, 0, 1]).mean()
A:scipy.spatial.transform.tests.test_rotation.rng->numpy.random.RandomState(0)
A:scipy.spatial.transform.tests.test_rotation.l->scipy.spatial.transform.Rotation.random(5, random_state=rng)
A:scipy.spatial.transform.tests.test_rotation.(reduced, left_best, right_best)->scipy.spatial.transform.Rotation.random(7, random_state=rng).reduce(l, r, return_indices=True)
A:scipy.spatial.transform.tests.test_rotation.scalars->numpy.reshape(np.moveaxis(scalars, 1, 0), (scalars.shape[1], -1))
A:scipy.spatial.transform.tests.test_rotation.scalars[i, j, k]->numpy.abs((li * pj * rk).as_quat()[3])
A:scipy.spatial.transform.tests.test_rotation.max_ind->numpy.argmax(np.reshape(scalars, (len(p), -1)), axis=1)
A:scipy.spatial.transform.tests.test_rotation.mag->(reduced.inv() * reduced_check).magnitude()
A:scipy.spatial.transform.tests.test_rotation.r_1d->scipy.spatial.transform.Rotation.from_matrix(mat)
A:scipy.spatial.transform.tests.test_rotation.r_2d->scipy.spatial.transform.Rotation.from_matrix(np.expand_dims(mat, axis=0))
A:scipy.spatial.transform.tests.test_rotation.v_1d->numpy.array([1, 2, 3])
A:scipy.spatial.transform.tests.test_rotation.v_2d->numpy.expand_dims(v_1d, axis=0)
A:scipy.spatial.transform.tests.test_rotation.v1d_rotated->numpy.array([-2, 1, 3])
A:scipy.spatial.transform.tests.test_rotation.v2d_rotated->numpy.expand_dims(v1d_rotated, axis=0)
A:scipy.spatial.transform.tests.test_rotation.v1d_inverse->numpy.array([2, -1, 3])
A:scipy.spatial.transform.tests.test_rotation.v2d_inverse->numpy.expand_dims(v1d_inverse, axis=0)
A:scipy.spatial.transform.tests.test_rotation.r1->copy.deepcopy(r)
A:scipy.spatial.transform.tests.test_rotation.r2->scipy.spatial.transform.Rotation.random(random_state=rng)
A:scipy.spatial.transform.tests.test_rotation.v->numpy.array([[1, 2, 3], [4, 5, 6]])
A:scipy.spatial.transform.tests.test_rotation.v_rotated->numpy.array([[-2, 1, 3], [4, -6, 5]])
A:scipy.spatial.transform.tests.test_rotation.v_inverse->numpy.array([[2, -1, 3], [4, 6, -5]])
A:scipy.spatial.transform.tests.test_rotation.mat[0]->numpy.array([[0, -1, 0], [1, 0, 0], [0, 0, 1]])
A:scipy.spatial.transform.tests.test_rotation.mat[1]->numpy.array([[1, 0, 0], [0, 0, -1], [0, 1, 0]])
A:scipy.spatial.transform.tests.test_rotation.v1->numpy.array([1, 2, 3])
A:scipy.spatial.transform.tests.test_rotation.v2->numpy.expand_dims(v1, axis=0)
A:scipy.spatial.transform.tests.test_rotation.r[0]->scipy.spatial.transform.Rotation.identity()
A:scipy.spatial.transform.tests.test_rotation.(r, rmsd)->scipy.spatial.transform.Rotation.align_vectors(x, y)
A:scipy.spatial.transform.tests.test_rotation.c->scipy.spatial.transform.Rotation.random(random_state=rng)
A:scipy.spatial.transform.tests.test_rotation.b->numpy.random.RandomState(0).normal(size=(5, 3))
A:scipy.spatial.transform.tests.test_rotation.(est, rmsd)->scipy.spatial.transform.Rotation.align_vectors(x, y)
A:scipy.spatial.transform.tests.test_rotation.(est1, rmsd1, cov1)->scipy.spatial.transform.Rotation.align_vectors(a, b, np.ones(5), True)
A:scipy.spatial.transform.tests.test_rotation.(est2, rmsd2, cov2)->scipy.spatial.transform.Rotation.align_vectors(a, b, 2 * np.ones(5), True)
A:scipy.spatial.transform.tests.test_rotation.vectors->numpy.random.RandomState(0).normal(size=(n_vectors, 3))
A:scipy.spatial.transform.tests.test_rotation.sigma->numpy.deg2rad(1)
A:scipy.spatial.transform.tests.test_rotation.noise->scipy.spatial.transform.Rotation.from_rotvec(rnd.normal(size=(n_vectors, 3), scale=sigma))
A:scipy.spatial.transform.tests.test_rotation.noisy_result->scipy.spatial.transform.Rotation.from_rotvec(rnd.normal(size=(n_vectors, 3), scale=sigma)).apply(result)
A:scipy.spatial.transform.tests.test_rotation.(est, rmsd, cov)->scipy.spatial.transform.Rotation.align_vectors(noisy_result, vectors, return_sensitivity=True)
A:scipy.spatial.transform.tests.test_rotation.error_vector->(rot * est.inv()).as_rotvec()
A:scipy.spatial.transform.tests.test_rotation.(r_estimate, rmsd)->scipy.spatial.transform.Rotation.align_vectors([[1, -1, 1]], [[1, 1, -1]])
A:scipy.spatial.transform.tests.test_rotation.key_rots->scipy.spatial.transform.Rotation.from_quat(rnd.uniform(size=(5, 4)))
A:scipy.spatial.transform.tests.test_rotation.key_quats->scipy.spatial.transform.Rotation.from_quat(rnd.uniform(size=(5, 4))).as_quat()
A:scipy.spatial.transform.tests.test_rotation.interpolator->Slerp(key_times, key_rots)
A:scipy.spatial.transform.tests.test_rotation.interp_rots->interpolator(times)
A:scipy.spatial.transform.tests.test_rotation.interp_quats->interpolator(times).as_quat()
A:scipy.spatial.transform.tests.test_rotation.cos_theta1->numpy.sum(interp_quats[0] * interp_quats[2])
A:scipy.spatial.transform.tests.test_rotation.cos_theta2->numpy.sum(interp_quats[2] * interp_quats[1])
A:scipy.spatial.transform.tests.test_rotation.cos_theta4->numpy.sum(interp_quats[3] * interp_quats[4])
A:scipy.spatial.transform.tests.test_rotation.cos_theta5->numpy.sum(interp_quats[4] * interp_quats[5])
A:scipy.spatial.transform.tests.test_rotation.cos_theta3->numpy.sum(interp_quats[1] * interp_quats[3])
A:scipy.spatial.transform.tests.test_rotation.t->numpy.arange(5)
A:scipy.spatial.transform.tests.test_rotation.s->Slerp([0, 1], r)
A:scipy.spatial.transform.tests.test_rotation.interp_times->numpy.array([[3.5], [4.2]])
A:scipy.spatial.transform.tests.test_rotation.r_interpolated->s(0.25)
A:scipy.spatial.transform.tests.test_rotation.r_interpolated_expected->scipy.spatial.transform.Rotation.from_euler('X', 20, degrees=True)
A:scipy.spatial.transform.tests.test_rotation.qs->scipy.spatial.transform.Rotation.random(50, random_state=0)
A:scipy.spatial.transform.tests.test_rotation.rs->scipy.spatial.transform.Rotation.random(1000, random_state=1)
A:scipy.spatial.transform.tests.test_rotation.single->scipy.spatial.transform.Rotation.random(random_state=0)
A:scipy.spatial.transform.tests.test_rotation.multiple->scipy.spatial.transform.Rotation.random(2, random_state=1)
A:scipy.spatial.transform.tests.test_rotation.array->numpy.array([multiple, multiple, multiple])
A:scipy.spatial.transform.tests.test_rotation.pkl->pickle.dumps(r)
A:scipy.spatial.transform.tests.test_rotation.unpickled->pickle.loads(pkl)
A:scipy.spatial.transform.tests.test_rotation.e1->scipy.spatial.transform.Rotation.from_quat([0, 0, 0, 1]).as_euler('xyz')
A:scipy.spatial.transform.tests.test_rotation.e2->scipy.spatial.transform.Rotation.from_quat([0, 0, 0, 1]).as_euler('XYZ')
A:scipy.spatial.transform.tests.test_rotation.rotation_multi_empty->Rotation(np.empty((0, 4)))
A:scipy.spatial.transform.tests.test_rotation.rotation_multi_one->Rotation([[0, 0, 0, 1]])
A:scipy.spatial.transform.tests.test_rotation.rotation_multi->Rotation([[0, 0, 0, 1], [0, 0, 0, 1]])
A:scipy.spatial.transform.tests.test_rotation.rotation_single->Rotation([0, 0, 0, 1])
scipy.spatial.transform.tests.test_rotation.test_align_vectors_improper_rotation()
scipy.spatial.transform.tests.test_rotation.test_align_vectors_invalid_input()
scipy.spatial.transform.tests.test_rotation.test_align_vectors_no_noise()
scipy.spatial.transform.tests.test_rotation.test_align_vectors_no_rotation()
scipy.spatial.transform.tests.test_rotation.test_align_vectors_noise()
scipy.spatial.transform.tests.test_rotation.test_align_vectors_scaled_weights()
scipy.spatial.transform.tests.test_rotation.test_align_vectors_single_vector()
scipy.spatial.transform.tests.test_rotation.test_apply_multiple_rotations_multiple_points()
scipy.spatial.transform.tests.test_rotation.test_apply_multiple_rotations_single_point()
scipy.spatial.transform.tests.test_rotation.test_apply_single_rotation_multiple_points()
scipy.spatial.transform.tests.test_rotation.test_apply_single_rotation_single_point()
scipy.spatial.transform.tests.test_rotation.test_as_euler_asymmetric_axes()
scipy.spatial.transform.tests.test_rotation.test_as_euler_contiguous()
scipy.spatial.transform.tests.test_rotation.test_as_euler_degenerate_asymmetric_axes()
scipy.spatial.transform.tests.test_rotation.test_as_euler_degenerate_symmetric_axes()
scipy.spatial.transform.tests.test_rotation.test_as_euler_symmetric_axes()
scipy.spatial.transform.tests.test_rotation.test_as_generic_mrp()
scipy.spatial.transform.tests.test_rotation.test_as_generic_rotvec()
scipy.spatial.transform.tests.test_rotation.test_as_matrix_from_generic_input()
scipy.spatial.transform.tests.test_rotation.test_as_matrix_from_square_input()
scipy.spatial.transform.tests.test_rotation.test_as_matrix_single_1d_quaternion()
scipy.spatial.transform.tests.test_rotation.test_as_matrix_single_2d_quaternion()
scipy.spatial.transform.tests.test_rotation.test_as_mrp_single_1d_input()
scipy.spatial.transform.tests.test_rotation.test_as_mrp_single_2d_input()
scipy.spatial.transform.tests.test_rotation.test_as_rotvec_degrees()
scipy.spatial.transform.tests.test_rotation.test_as_rotvec_single_1d_input()
scipy.spatial.transform.tests.test_rotation.test_as_rotvec_single_2d_input()
scipy.spatial.transform.tests.test_rotation.test_concatenate()
scipy.spatial.transform.tests.test_rotation.test_concatenate_wrong_type()
scipy.spatial.transform.tests.test_rotation.test_deepcopy()
scipy.spatial.transform.tests.test_rotation.test_degrees_from_rotvec()
scipy.spatial.transform.tests.test_rotation.test_from_1d_single_mrp()
scipy.spatial.transform.tests.test_rotation.test_from_1d_single_rotvec()
scipy.spatial.transform.tests.test_rotation.test_from_2d_single_mrp()
scipy.spatial.transform.tests.test_rotation.test_from_2d_single_rotvec()
scipy.spatial.transform.tests.test_rotation.test_from_euler_elementary_extrinsic_rotation()
scipy.spatial.transform.tests.test_rotation.test_from_euler_extrinsic_rotation_312()
scipy.spatial.transform.tests.test_rotation.test_from_euler_extrinsic_rotation_313()
scipy.spatial.transform.tests.test_rotation.test_from_euler_intrinsic_rotation_312()
scipy.spatial.transform.tests.test_rotation.test_from_euler_intrinsic_rotation_313()
scipy.spatial.transform.tests.test_rotation.test_from_euler_rotation_order()
scipy.spatial.transform.tests.test_rotation.test_from_euler_single_rotation()
scipy.spatial.transform.tests.test_rotation.test_from_generic_mrp()
scipy.spatial.transform.tests.test_rotation.test_from_generic_rotvec()
scipy.spatial.transform.tests.test_rotation.test_from_matrix_calculation()
scipy.spatial.transform.tests.test_rotation.test_from_matrix_ortho_output()
scipy.spatial.transform.tests.test_rotation.test_from_rotvec_small_angle()
scipy.spatial.transform.tests.test_rotation.test_from_single_1d_quaternion()
scipy.spatial.transform.tests.test_rotation.test_from_single_2d_matrix()
scipy.spatial.transform.tests.test_rotation.test_from_single_2d_quaternion()
scipy.spatial.transform.tests.test_rotation.test_from_single_3d_matrix()
scipy.spatial.transform.tests.test_rotation.test_from_square_quat_matrix()
scipy.spatial.transform.tests.test_rotation.test_generic_quat_matrix()
scipy.spatial.transform.tests.test_rotation.test_getitem()
scipy.spatial.transform.tests.test_rotation.test_getitem_single()
scipy.spatial.transform.tests.test_rotation.test_identity_invariance()
scipy.spatial.transform.tests.test_rotation.test_identity_magnitude()
scipy.spatial.transform.tests.test_rotation.test_inv()
scipy.spatial.transform.tests.test_rotation.test_inv_single_rotation()
scipy.spatial.transform.tests.test_rotation.test_len_and_bool()
scipy.spatial.transform.tests.test_rotation.test_magnitude()
scipy.spatial.transform.tests.test_rotation.test_magnitude_single_rotation()
scipy.spatial.transform.tests.test_rotation.test_malformed_1d_from_mrp()
scipy.spatial.transform.tests.test_rotation.test_malformed_1d_from_quat()
scipy.spatial.transform.tests.test_rotation.test_malformed_1d_from_rotvec()
scipy.spatial.transform.tests.test_rotation.test_malformed_2d_from_mrp()
scipy.spatial.transform.tests.test_rotation.test_malformed_2d_from_quat()
scipy.spatial.transform.tests.test_rotation.test_malformed_2d_from_rotvec()
scipy.spatial.transform.tests.test_rotation.test_matrix_calculation_pipeline()
scipy.spatial.transform.tests.test_rotation.test_mean()
scipy.spatial.transform.tests.test_rotation.test_mean_invalid_weights()
scipy.spatial.transform.tests.test_rotation.test_mrp_calc_pipeline()
scipy.spatial.transform.tests.test_rotation.test_multiplication_stability()
scipy.spatial.transform.tests.test_rotation.test_n_rotations()
scipy.spatial.transform.tests.test_rotation.test_past_180_degree_rotation()
scipy.spatial.transform.tests.test_rotation.test_pickling()
scipy.spatial.transform.tests.test_rotation.test_random_rotation_shape()
scipy.spatial.transform.tests.test_rotation.test_reduction_no_indices()
scipy.spatial.transform.tests.test_rotation.test_reduction_none_indices()
scipy.spatial.transform.tests.test_rotation.test_reduction_scalar_calculation()
scipy.spatial.transform.tests.test_rotation.test_rotation_within_numpy_array()
scipy.spatial.transform.tests.test_rotation.test_rotvec_calc_pipeline()
scipy.spatial.transform.tests.test_rotation.test_setitem_integer()
scipy.spatial.transform.tests.test_rotation.test_setitem_single()
scipy.spatial.transform.tests.test_rotation.test_setitem_slice()
scipy.spatial.transform.tests.test_rotation.test_setitem_wrong_type()
scipy.spatial.transform.tests.test_rotation.test_single_identity_invariance()
scipy.spatial.transform.tests.test_rotation.test_single_identity_magnitude()
scipy.spatial.transform.tests.test_rotation.test_single_intrinsic_extrinsic_rotation()
scipy.spatial.transform.tests.test_rotation.test_slerp()
scipy.spatial.transform.tests.test_rotation.test_slerp_call_scalar_time()
scipy.spatial.transform.tests.test_rotation.test_slerp_call_time_dim_mismatch()
scipy.spatial.transform.tests.test_rotation.test_slerp_call_time_out_of_range()
scipy.spatial.transform.tests.test_rotation.test_slerp_decreasing_times()
scipy.spatial.transform.tests.test_rotation.test_slerp_equal_times()
scipy.spatial.transform.tests.test_rotation.test_slerp_num_rotations_mismatch()
scipy.spatial.transform.tests.test_rotation.test_slerp_single_rot()
scipy.spatial.transform.tests.test_rotation.test_slerp_time_dim_mismatch()
scipy.spatial.transform.tests.test_rotation.test_weighted_mean()
scipy.spatial.transform.tests.test_rotation.test_zero_norms_from_quat()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/transform/tests/test_rotation_groups.py----------------------------------------
A:scipy.spatial.transform.tests.test_rotation_groups.NS->range(1, 13)
A:scipy.spatial.transform.tests.test_rotation_groups.distance_matrix->cdist(P, Q, metric='sqeuclidean')
A:scipy.spatial.transform.tests.test_rotation_groups.matching->linear_sum_assignment(distance_matrix)
A:scipy.spatial.transform.tests.test_rotation_groups.P->_generate_pyramid(n, axis='XYZ'.index(axis))
A:scipy.spatial.transform.tests.test_rotation_groups.x->numpy.array([[0, -1, -phi], [0, -1, +phi], [0, +1, -phi], [0, +1, +phi]])
A:scipy.spatial.transform.tests.test_rotation_groups.g->scipy.spatial.transform.Rotation.create_group(name)
A:scipy.spatial.transform.tests.test_rotation_groups.kdtree->cKDTree(g.as_quat())
A:scipy.spatial.transform.tests.test_rotation_groups.q->numpy.concatenate((-g.as_quat(), g.as_quat()))
A:scipy.spatial.transform.tests.test_rotation_groups.distance->numpy.sort(cdist(q, q))
A:scipy.spatial.transform.tests.test_rotation_groups.f->g[-1].reduce(g)
scipy.spatial.transform.tests.test_rotation_groups._calculate_rmsd(P,Q)
scipy.spatial.transform.tests.test_rotation_groups._generate_icosahedron()
scipy.spatial.transform.tests.test_rotation_groups._generate_octahedron()
scipy.spatial.transform.tests.test_rotation_groups._generate_prism(n,axis)
scipy.spatial.transform.tests.test_rotation_groups._generate_pyramid(n,axis)
scipy.spatial.transform.tests.test_rotation_groups._generate_tetrahedron()
scipy.spatial.transform.tests.test_rotation_groups.test_axis_valid(axis)
scipy.spatial.transform.tests.test_rotation_groups.test_cyclic(n,axis)
scipy.spatial.transform.tests.test_rotation_groups.test_dicyclic(n,axis)
scipy.spatial.transform.tests.test_rotation_groups.test_group_name(name)
scipy.spatial.transform.tests.test_rotation_groups.test_group_no_duplicates(name,size)
scipy.spatial.transform.tests.test_rotation_groups.test_group_order_positive(name)
scipy.spatial.transform.tests.test_rotation_groups.test_group_sizes(name,size)
scipy.spatial.transform.tests.test_rotation_groups.test_group_symmetry(name,size)
scipy.spatial.transform.tests.test_rotation_groups.test_group_type(name)
scipy.spatial.transform.tests.test_rotation_groups.test_icosahedral()
scipy.spatial.transform.tests.test_rotation_groups.test_octahedral()
scipy.spatial.transform.tests.test_rotation_groups.test_reduction(name)
scipy.spatial.transform.tests.test_rotation_groups.test_single_reduction(name)
scipy.spatial.transform.tests.test_rotation_groups.test_tetrahedral()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/transform/tests/test_rotation_spline.py----------------------------------------
A:scipy.spatial.transform.tests.test_rotation_spline.rv->(rotations[0].inv() * rotations[1]).as_rotvec()
A:scipy.spatial.transform.tests.test_rotation_spline.A->numpy.empty((4, 3, 3))
A:scipy.spatial.transform.tests.test_rotation_spline.A_inv->_rotvec_dot_to_angular_rate_matrix(rv)
A:scipy.spatial.transform.tests.test_rotation_spline.I_stack->numpy.empty((4, 3, 3))
A:scipy.spatial.transform.tests.test_rotation_spline.I_stack[:]->numpy.eye(3)
A:scipy.spatial.transform.tests.test_rotation_spline.B->numpy.empty((4, 3, 3))
A:scipy.spatial.transform.tests.test_rotation_spline.banded->_create_block_3_diagonal_matrix(A, B, d)
A:scipy.spatial.transform.tests.test_rotation_spline.(k, l)->list(zip(*product(np.arange(banded.shape[0]), np.arange(banded.shape[1]))))
A:scipy.spatial.transform.tests.test_rotation_spline.k->numpy.asarray(k)
A:scipy.spatial.transform.tests.test_rotation_spline.l->numpy.asarray(l)
A:scipy.spatial.transform.tests.test_rotation_spline.values->_create_block_3_diagonal_matrix(A, B, d).ravel()
A:scipy.spatial.transform.tests.test_rotation_spline.full->numpy.zeros((15, 15))
A:scipy.spatial.transform.tests.test_rotation_spline.zero->numpy.zeros((3, 3))
A:scipy.spatial.transform.tests.test_rotation_spline.eye->numpy.eye(3)
A:scipy.spatial.transform.tests.test_rotation_spline.ref->numpy.block([[d[0] * eye, B[0], zero, zero, zero], [A[0], d[1] * eye, B[1], zero, zero], [zero, A[1], d[2] * eye, B[2], zero], [zero, zero, A[2], d[3] * eye, B[3]], [zero, zero, zero, A[3], d[4] * eye]])
A:scipy.spatial.transform.tests.test_rotation_spline.rotations->scipy.spatial.transform.Rotation.from_euler('xyz', angles, degrees=True)
A:scipy.spatial.transform.tests.test_rotation_spline.spline->RotationSpline(times, rotations)
A:scipy.spatial.transform.tests.test_rotation_spline.times_check->numpy.linspace(-1, 11)
A:scipy.spatial.transform.tests.test_rotation_spline.times->numpy.array([0, 5, 15, 27])
A:scipy.spatial.transform.tests.test_rotation_spline.rv0->spline(times).as_rotvec()
A:scipy.spatial.transform.tests.test_rotation_spline.rvm->spline(times - h).as_rotvec()
A:scipy.spatial.transform.tests.test_rotation_spline.rvp->spline(times + h).as_rotvec()
A:scipy.spatial.transform.tests.test_rotation_spline.r0->spline(times, 1)
A:scipy.spatial.transform.tests.test_rotation_spline.rm->spline(times - h, 1)
A:scipy.spatial.transform.tests.test_rotation_spline.rp->spline(times + h, 1)
A:scipy.spatial.transform.tests.test_rotation_spline.a0->spline(times, 2)
A:scipy.spatial.transform.tests.test_rotation_spline.am->spline(times - h, 2)
A:scipy.spatial.transform.tests.test_rotation_spline.ap->spline(times + h, 2)
A:scipy.spatial.transform.tests.test_rotation_spline.r->scipy.spatial.transform.Rotation.random(10)
A:scipy.spatial.transform.tests.test_rotation_spline.t->numpy.arange(10)
A:scipy.spatial.transform.tests.test_rotation_spline.s->RotationSpline(t, r)
scipy.spatial.transform.tests.test_rotation_spline.test_angular_rate_nonlinear_term()
scipy.spatial.transform.tests.test_rotation_spline.test_angular_rate_to_rotvec_conversions()
scipy.spatial.transform.tests.test_rotation_spline.test_constant_attitude()
scipy.spatial.transform.tests.test_rotation_spline.test_create_block_3_diagonal_matrix()
scipy.spatial.transform.tests.test_rotation_spline.test_error_handling()
scipy.spatial.transform.tests.test_rotation_spline.test_spline_2_rotations()
scipy.spatial.transform.tests.test_rotation_spline.test_spline_properties()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/spatial/transform/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_odds_ratio.py----------------------------------------
A:scipy.stats._odds_ratio.value->func(nc)
A:scipy.stats._odds_ratio.nc->_nc_hypergeom_mean_inverse(x, M, n, N)
A:scipy.stats._odds_ratio.M->table.sum()
A:scipy.stats._odds_ratio.n->table[0].sum()
A:scipy.stats._odds_ratio.N->table[:, 0].sum()
A:scipy.stats._odds_ratio.(x, M, n, N)->_hypergeom_params_from_table(table)
A:scipy.stats._odds_ratio.(lo, hi)->_discrete_distns.nchypergeom_fisher.support(M, n, N, 1)
A:scipy.stats._odds_ratio.lower->_ci_lower(table, 1 - confidence_level)
A:scipy.stats._odds_ratio.upper->_ci_upper(table, 1 - confidence_level)
A:scipy.stats._odds_ratio.oddsratio->_conditional_oddsratio(c)
A:scipy.stats._odds_ratio.log_or->numpy.log(oddsratio)
A:scipy.stats._odds_ratio.se->numpy.sqrt((1 / table).sum())
A:scipy.stats._odds_ratio.z->ndtri(0.5 * confidence_level + 0.5)
A:scipy.stats._odds_ratio.ci->_sample_odds_ratio_ci(table, confidence_level=confidence_level, alternative=alternative)
A:scipy.stats._odds_ratio.c->c.astype(np.int64).astype(np.int64)
A:scipy.stats._odds_ratio.result->OddsRatioResult(_table=c, _kind=kind, statistic=oddsratio)
scipy.stats._odds_ratio.OddsRatioResult(self,_table,_kind,statistic)
scipy.stats._odds_ratio.OddsRatioResult.__init__(self,_table,_kind,statistic)
scipy.stats._odds_ratio.OddsRatioResult.__repr__(self)
scipy.stats._odds_ratio.OddsRatioResult._conditional_odds_ratio_ci(self,confidence_level=0.95,alternative='two-sided')
scipy.stats._odds_ratio.OddsRatioResult._sample_odds_ratio_ci(self,confidence_level=0.95,alternative='two-sided')
scipy.stats._odds_ratio.OddsRatioResult.confidence_interval(self,confidence_level=0.95,alternative='two-sided')
scipy.stats._odds_ratio._ci_lower(table,alpha)
scipy.stats._odds_ratio._ci_upper(table,alpha)
scipy.stats._odds_ratio._conditional_oddsratio(table)
scipy.stats._odds_ratio._conditional_oddsratio_ci(table,confidence_level=0.95,alternative='two-sided')
scipy.stats._odds_ratio._hypergeom_params_from_table(table)
scipy.stats._odds_ratio._nc_hypergeom_mean_inverse(x,M,n,N)
scipy.stats._odds_ratio._sample_odds_ratio(table)
scipy.stats._odds_ratio._sample_odds_ratio_ci(table,confidence_level=0.95,alternative='two-sided')
scipy.stats._odds_ratio._solve(func)
scipy.stats._odds_ratio.odds_ratio(table,*,kind='conditional')


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_fit.py----------------------------------------
A:scipy.stats._fit.user_bounds->numpy.empty((0, 2))
A:scipy.stats._fit.FitParams->namedtuple('FitParams', shape_names + ['loc'])
A:scipy.stats._fit.self.params->FitParams(*res.x)
A:scipy.stats._fit.self.success->getattr(res, 'success', None)
A:scipy.stats._fit.self.message->getattr(res, 'message', None)
A:scipy.stats._fit.ax->matplotlib.pyplot.gca()
A:scipy.stats._fit.fit_params->numpy.atleast_1d(self.params)
A:scipy.stats._fit.support->self._dist.support(*fit_params)
A:scipy.stats._fit.x->numpy.sort(data, axis=-1)
A:scipy.stats._fit.y->self._dist.cdf(data, *fit_params)
A:scipy.stats._fit.options->dict(density=True, bins=50, align='mid', color='C1')
A:scipy.stats._fit.data->numpy.asarray(data, dtype=float)
A:scipy.stats._fit.ps->self._dist.cdf(qs, *fit_params)
A:scipy.stats._fit.xlim->matplotlib.pyplot.gca().get_xlim()
A:scipy.stats._fit.ylim->matplotlib.pyplot.gca().get_ylim()
A:scipy.stats._fit.q_ideal->numpy.arange(q_min, q_max)
A:scipy.stats._fit.(a, b)->self._dist.support(*fit_params)
A:scipy.stats._fit.p_min->max(p_min, 0 if np.isfinite(a) else 0.001)
A:scipy.stats._fit.p_max->min(p_max, 1 if np.isfinite(b) else 1 - 0.001)
A:scipy.stats._fit.(q_min, q_max)->self._dist.ppf([p_min, p_max], *fit_params)
A:scipy.stats._fit.qs->numpy.arange(q_min - 1, q_max + 1)
A:scipy.stats._fit.k->numpy.arange(1, n + 1)
A:scipy.stats._fit.ecdf->self._plotting_positions(len(self._data))
A:scipy.stats._fit.q->numpy.linspace(*xlim, 300)
A:scipy.stats._fit.tcdf->self._dist.cdf(q, *fit_params)
A:scipy.stats._fit.(handles, labels)->matplotlib.pyplot.gca().get_legend_handles_labels()
A:scipy.stats._fit.param_info->dist._param_info()
A:scipy.stats._fit.n_params->len(param_info)
A:scipy.stats._fit.param_names->', '.join(param_list)
A:scipy.stats._fit.shape_names->', '.join(param_list[:n_shapes])
A:scipy.stats._fit.user_bounds_array->numpy.empty((n_params, 2))
A:scipy.stats._fit.user_bound->numpy.empty((0, 2)).pop(param_name, None)
A:scipy.stats._fit.user_bounds_array[n_shapes:]->list(default_bounds.values())
A:scipy.stats._fit.combined->_combine_bounds(name, user_bound, param_domain, integral)
A:scipy.stats._fit.bounds->numpy.asarray(validated_bounds)
A:scipy.stats._fit.guess_array->numpy.mean(bounds, axis=1)
A:scipy.stats._fit.user_guess->numpy.asarray(user_guess, dtype=float)
A:scipy.stats._fit.guess_rounded->numpy.mean(bounds, axis=1).copy()
A:scipy.stats._fit.guess_rounded[integrality]->numpy.round(guess_rounded[integrality])
A:scipy.stats._fit.guess_clipped->numpy.clip(guess_rounded, bounds[:, 0], bounds[:, 1])
A:scipy.stats._fit.res->scipy.stats.monte_carlo_test(data, rvs, statistic_fun, vectorized=True, n_resamples=n_mc_samples, axis=-1, alternative='greater')
A:scipy.stats._fit.GoodnessOfFitResult->namedtuple('GoodnessOfFitResult', ('fit_result', 'statistic', 'pvalue', 'null_distribution'))
A:scipy.stats._fit.args->_gof_iv(dist, data, known_params, fit_params, guessed_params, statistic, n_mc_samples, random_state)
A:scipy.stats._fit.nhd_fit_fun->_get_fit_fun(dist, data, guessed_nhd_params, fixed_nhd_params)
A:scipy.stats._fit.nhd_vals->nhd_fit_fun(data)
A:scipy.stats._fit.nhd_dist->dist(*nhd_vals)
A:scipy.stats._fit.fit_fun->_get_fit_fun(dist, data, guessed_rfd_params, fixed_rfd_params)
A:scipy.stats._fit.rfd_vals->fit_fun(data)
A:scipy.stats._fit.rfd_dist->dist(*rfd_vals)
A:scipy.stats._fit.opt_res->scipy.optimize.OptimizeResult()
A:scipy.stats._fit.params->numpy.apply_along_axis(fit_fun_1d, axis=-1, arr=data)
A:scipy.stats._fit.loc->numpy.mean(data, axis=-1)
A:scipy.stats._fit.scale->numpy.sqrt(((data - loc) ** 2).mean(axis=-1))
A:scipy.stats._fit.i->numpy.arange(1, n + 1)
A:scipy.stats._fit.S->numpy.sum(Si, axis=-1)
A:scipy.stats._fit.cdfvals->dist.cdf(x)
A:scipy.stats._fit.Dplus->_compute_dplus(cdfvals)
A:scipy.stats._fit.Dminus->_compute_dminus(cdfvals)
A:scipy.stats._fit.fixed_nhd_params->known_params_f.copy()
A:scipy.stats._fit.fixed_rfd_params->known_params_f.copy()
A:scipy.stats._fit.guessed_nhd_params->guessed_params.copy()
A:scipy.stats._fit.guessed_rfd_params->numpy.atleast_1d(self.params).copy()
A:scipy.stats._fit.n_mc_samples_int->int(n_mc_samples)
A:scipy.stats._fit.random_state->check_random_state(random_state)
scipy.stats._fit.FitResult(self,dist,data,discrete,res)
scipy.stats._fit.FitResult.__init__(self,dist,data,discrete,res)
scipy.stats._fit.FitResult.__repr__(self)
scipy.stats._fit.FitResult._cdf_plot(self,ax,fit_params)
scipy.stats._fit.FitResult._hist_plot(self,ax,fit_params)
scipy.stats._fit.FitResult._plotting_positions(self,n,a=0.5)
scipy.stats._fit.FitResult._pp_plot(self,**kwargs)
scipy.stats._fit.FitResult._qp_plot(self,ax,fit_params,qq)
scipy.stats._fit.FitResult._qq_plot(self,**kwargs)
scipy.stats._fit.FitResult.nllf(self,params=None,data=None)
scipy.stats._fit.FitResult.plot(self,ax=None,*,plot_type='hist')
scipy.stats._fit._anderson_darling(dist,data)
scipy.stats._fit._combine_bounds(name,user_bounds,shape_domain,integral)
scipy.stats._fit._compute_dminus(cdfvals,axis=-1)
scipy.stats._fit._compute_dplus(cdfvals)
scipy.stats._fit._cramer_von_mises(dist,data)
scipy.stats._fit._fit_norm(data,floc=None,fscale=None)
scipy.stats._fit._get_fit_fun(dist,data,guessed_params,fixed_params)
scipy.stats._fit._gof_iv(dist,data,known_params,fit_params,guessed_params,statistic,n_mc_samples,random_state)
scipy.stats._fit._kolmogorov_smirnov(dist,data)
scipy.stats._fit.fit(dist,data,bounds=None,*,guess=None,method='mle',optimizer=optimize.differential_evolution)
scipy.stats._fit.goodness_of_fit(dist,data,*,known_params=None,fit_params=None,guessed_params=None,statistic='ad',n_mc_samples=9999,random_state=None)
scipy.stats.fit(dist,data,bounds=None,*,guess=None,method='mle',optimizer=optimize.differential_evolution)
scipy.stats.goodness_of_fit(dist,data,*,known_params=None,fit_params=None,guessed_params=None,statistic='ad',n_mc_samples=9999,random_state=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_common.py----------------------------------------
A:scipy.stats._common.ConfidenceInterval->namedtuple('ConfidenceInterval', ['low', 'high'])


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_stats_py.py----------------------------------------
A:scipy.stats._stats_py.a->numpy.asarray(a)
A:scipy.stats._stats_py.b->numpy.ma.masked_invalid(b)
A:scipy.stats._stats_py.shp->_broadcast_shapes_with_dropped_axis(a, b, axis)
A:scipy.stats._stats_py.shp1->_shape_with_dropped_axis(a, axis)
A:scipy.stats._stats_py.shp2->_shape_with_dropped_axis(b, axis)
A:scipy.stats._stats_py.SignificanceResult->_make_tuple_bunch('SignificanceResult', ['statistic', 'pvalue'], [])
A:scipy.stats._stats_py.weights->numpy.broadcast_to(weights, a.shape)
A:scipy.stats._stats_py.log_a->numpy.log(a)
A:scipy.stats._stats_py.ModeResult->namedtuple('ModeResult', ('mode', 'count'))
A:scipy.stats._stats_py.out->numpy.subtract(pct[1], pct[0])
A:scipy.stats._stats_py.(a, axis)->_chk_asarray(a, axis)
A:scipy.stats._stats_py.(contains_nan, nan_policy)->_contains_nan(a, nan_policy)
A:scipy.stats._stats_py.cntr->Counter(a)
A:scipy.stats._stats_py.mode->int((n + 1) * (n1 + 1) / (n1 + n2 + 2))
A:scipy.stats._stats_py.(vals, cnts)->numpy.unique(a, return_counts=True)
A:scipy.stats._stats_py.a_view->numpy.moveaxis(a, axis, -1)
A:scipy.stats._stats_py.inds->numpy.ndindex(a_view.shape[:-1])
A:scipy.stats._stats_py.modes->numpy.empty(a_view.shape[:-1], dtype=a.dtype)
A:scipy.stats._stats_py.counts->numpy.empty(a_view.shape[:-1], dtype=np.int_)
A:scipy.stats._stats_py.(modes[ind], counts[ind])->_mode1D(a_view[ind])
A:scipy.stats._stats_py.newshape->list(a.shape)
A:scipy.stats._stats_py.am->_mask_to_limits(a, limits, inclusive)
A:scipy.stats._stats_py.mean->numpy.mean(a, axis)
A:scipy.stats._stats_py.amnan->_mask_to_limits(a, limits, inclusive).filled(fill_value=np.nan)
A:scipy.stats._stats_py.sd->numpy.sqrt(np.ma.var(am, ddof=ddof, axis=axis))
A:scipy.stats._stats_py.moment->numpy.atleast_1d(kwds.get('moment', 1))
A:scipy.stats._stats_py.shape->list(a.shape)
A:scipy.stats._stats_py.precision_loss->numpy.any(rel_diff < eps)
A:scipy.stats._stats_py.s->numpy.sum(a, axis)
A:scipy.stats._stats_py.var->_moment(x, 2, axis, mean=mean)
A:scipy.stats._stats_py.m2->numpy.mean(b, axis)
A:scipy.stats._stats_py.m3->numpy.extract(can_correct, m3)
A:scipy.stats._stats_py.vals->vals.item().item()
A:scipy.stats._stats_py.m4->numpy.extract(can_correct, m4)
A:scipy.stats._stats_py.DescribeResult->namedtuple('DescribeResult', ('nobs', 'minmax', 'mean', 'variance', 'skewness', 'kurtosis'))
A:scipy.stats._stats_py.m->trim_mean(a, trim, axis=axis)
A:scipy.stats._stats_py.v->_var(d, axis, ddof=1)
A:scipy.stats._stats_py.sk->skew(a, axis, bias=bias)
A:scipy.stats._stats_py.kurt->kurtosis(a, axis, bias=bias)
A:scipy.stats._stats_py.prob->numpy.clip(prob, 0, 1)
A:scipy.stats._stats_py.SkewtestResult->namedtuple('SkewtestResult', ('statistic', 'pvalue'))
A:scipy.stats._stats_py.b2->kurtosis(a, axis, fisher=False)
A:scipy.stats._stats_py.alpha->math.sqrt(2.0 / (W2 - 1))
A:scipy.stats._stats_py.y->numpy.ma.masked_invalid(y)
A:scipy.stats._stats_py.KurtosistestResult->namedtuple('KurtosistestResult', ('statistic', 'pvalue'))
A:scipy.stats._stats_py.NormaltestResult->namedtuple('NormaltestResult', ('statistic', 'pvalue'))
A:scipy.stats._stats_py.(s, _)->skewtest(a, axis)
A:scipy.stats._stats_py.(k, _)->kurtosistest(a, axis)
A:scipy.stats._stats_py.x->numpy.ma.masked_invalid(x)
A:scipy.stats._stats_py.mu->numpy.mean(a)
A:scipy.stats._stats_py.k->len(samples)
A:scipy.stats._stats_py.pvalue->mstats_basic._kendall_p_exact(size, tot - dis, alternative)
A:scipy.stats._stats_py.sorted_->numpy.sort(a, axis=axis)
A:scipy.stats._stats_py.idx->int(np.ceil(idx))
A:scipy.stats._stats_py.i->int(idx)
A:scipy.stats._stats_py.indexer[axis]->slice(i, i + 2)
A:scipy.stats._stats_py.sumval->numpy.broadcast_to(weights, a.shape).sum()
A:scipy.stats._stats_py.n->len(samples[0])
A:scipy.stats._stats_py.score->numpy.ma.masked_where(np.isnan(score), score)
A:scipy.stats._stats_py.(cna, npa)->_contains_nan(a, nan_policy)
A:scipy.stats._stats_py.(cns, nps)->_contains_nan(score, nan_policy, use_summation=False)
A:scipy.stats._stats_py.perct->numpy.ma.filled(perct, np.nan)
A:scipy.stats._stats_py.left->count(a < score)
A:scipy.stats._stats_py.right->count(a <= score)
A:scipy.stats._stats_py.HistogramResult->namedtuple('HistogramResult', ('count', 'lowerlimit', 'binsize', 'extrapoints'))
A:scipy.stats._stats_py.data_min->numpy.asarray(a).min()
A:scipy.stats._stats_py.data_max->numpy.asarray(a).max()
A:scipy.stats._stats_py.(hist, bin_edges)->numpy.histogram(a, bins=numbins, range=defaultlimits, weights=weights)
A:scipy.stats._stats_py.hist->numpy.array(hist, dtype=float)
A:scipy.stats._stats_py.extrapoints->len([v for v in a if defaultlimits[0] > v or v > defaultlimits[1]])
A:scipy.stats._stats_py.CumfreqResult->namedtuple('CumfreqResult', ('cumcount', 'lowerlimit', 'binsize', 'extrapoints'))
A:scipy.stats._stats_py.(h, l, b, e)->_histogram(a, numbins, defaultreallimits, weights=weights)
A:scipy.stats._stats_py.cumhist->numpy.cumsum(h * 1, axis=0)
A:scipy.stats._stats_py.RelfreqResult->namedtuple('RelfreqResult', ('frequency', 'lowerlimit', 'binsize', 'extrapoints'))
A:scipy.stats._stats_py.TINY->numpy.sqrt(np.finfo(float).eps)
A:scipy.stats._stats_py.sumsq->sq.sum()
A:scipy.stats._stats_py.mn->numpy.asarray(a).mean(axis=axis, keepdims=True)
A:scipy.stats._stats_py.std->numpy.asarray(a).std(axis=axis, ddof=ddof, keepdims=True)
A:scipy.stats._stats_py.isconst->(_first(a, axis) == a).all(axis=axis, keepdims=True)
A:scipy.stats._stats_py.a_nan->numpy.isnan(a)
A:scipy.stats._stats_py.a_nan_any->numpy.isnan(a).any()
A:scipy.stats._stats_py.scale_key->scale.lower()
A:scipy.stats._stats_py.rng->sorted(rng)
A:scipy.stats._stats_py.pct->percentile_func(x, rng, axis=axis, interpolation=interpolation, keepdims=keepdims)
A:scipy.stats._stats_py.isnan->numpy.isnan(x)
A:scipy.stats._stats_py.med->numpy.expand_dims(center(x, axis=axis), axis)
A:scipy.stats._stats_py.mad->numpy.median(np.abs(x - med), axis=axis)
A:scipy.stats._stats_py.nan_shape->tuple((item for (i, item) in enumerate(x.shape) if i != axis))
A:scipy.stats._stats_py.SigmaclipResult->namedtuple('SigmaclipResult', ('clipped', 'lower', 'upper'))
A:scipy.stats._stats_py.c->numpy.asarray(table, dtype=np.int64)
A:scipy.stats._stats_py.c_std->numpy.asarray(table, dtype=np.int64).std()
A:scipy.stats._stats_py.c_mean->numpy.asarray(table, dtype=np.int64).mean()
A:scipy.stats._stats_py.lowercut->int(proportiontocut * nobs)
A:scipy.stats._stats_py.atmp->numpy.partition(a, (lowercut, uppercut - 1), axis)
A:scipy.stats._stats_py.sl[axis]->slice(lowercut, uppercut)
A:scipy.stats._stats_py.F_onewayResult->namedtuple('F_onewayResult', ('statistic', 'pvalue'))
A:scipy.stats._stats_py.axis->numpy.core.multiarray.normalize_axis_index(axis, len(shape))
A:scipy.stats._stats_py.f->numpy.full(shp, fill_value=np.nan)
A:scipy.stats._stats_py.num_groups->len(samples)
A:scipy.stats._stats_py.alldata->numpy.concatenate(samples)
A:scipy.stats._stats_py.is_const->numpy.concatenate([(_first(sample, axis) == sample).all(axis=axis, keepdims=True) for sample in samples], axis=axis)
A:scipy.stats._stats_py.all_const->numpy.concatenate([(_first(sample, axis) == sample).all(axis=axis, keepdims=True) for sample in samples], axis=axis).all(axis=axis)
A:scipy.stats._stats_py.all_same_const->(_first(alldata, axis) == alldata).all(axis=axis)
A:scipy.stats._stats_py.offset->numpy.concatenate(samples).mean(axis=axis, keepdims=True)
A:scipy.stats._stats_py.samples->list(map(np.asarray, samples))
A:scipy.stats._stats_py.lengths->numpy.array([ma.count(sample) if nan_policy == 'omit' else len(sample) for sample in samples])
A:scipy.stats._stats_py.means->numpy.array([np.mean(sample) for sample in samples])
A:scipy.stats._stats_py.var_w->numpy.sum(weights * means)
A:scipy.stats._stats_py.A->numpy.sum(np.square(z))
A:scipy.stats._stats_py.p->distributions.norm.cdf(wbfn)
A:scipy.stats._stats_py.samples[i]->numpy.ma.masked_invalid(sample)
A:scipy.stats._stats_py.AlexanderGovernResult->make_dataclass('AlexanderGovernResult', ('statistic', 'pvalue'))
A:scipy.stats._stats_py.zr->numpy.arctanh(r)
A:scipy.stats._stats_py.se->numpy.sqrt(1 / (n - 3))
A:scipy.stats._stats_py.h->int(np.round(d * lcm))
A:scipy.stats._stats_py.rlo->numpy.tanh(zlo)
A:scipy.stats._stats_py.rhi->numpy.tanh(zhi)
A:scipy.stats._stats_py.ConfidenceInterval->namedtuple('ConfidenceInterval', ['low', 'high'])
A:scipy.stats._stats_py.PearsonRResultBase->_make_tuple_bunch('PearsonRResultBase', ['statistic', 'pvalue'], [])
A:scipy.stats._stats_py.result->result.astype('float64').astype('float64')
A:scipy.stats._stats_py.dtype->type(1.0 + x[0] + y[0])
A:scipy.stats._stats_py.r->max(min(r, 1.0), -1.0)
A:scipy.stats._stats_py.xmean->numpy.ma.masked_invalid(x).mean(dtype=dtype)
A:scipy.stats._stats_py.ymean->numpy.ma.masked_invalid(y).mean(dtype=dtype)
A:scipy.stats._stats_py.normxm->scipy.linalg.norm(xm)
A:scipy.stats._stats_py.normym->scipy.linalg.norm(ym)
A:scipy.stats._stats_py.pexact->hypergeom.pmf(c[0, 0], n1 + n2, n1, n)
A:scipy.stats._stats_py.pmode->hypergeom.pmf(mode, n1 + n2, n1, n)
A:scipy.stats._stats_py.plower->hypergeom.cdf(c[0, 0], n1 + n2, n1, n)
A:scipy.stats._stats_py.guess->_binary_search(pmf, pexact * gamma, 0, mode)
A:scipy.stats._stats_py.pupper->hypergeom.sf(c[0, 0] - 1, n1 + n2, n1, n)
A:scipy.stats._stats_py.(a, axisout)->_chk_asarray(a, axis)
A:scipy.stats._stats_py.(b, _)->_chk_asarray(b, axis)
A:scipy.stats._stats_py.res->root_scalar(first_order, x0=x0, x1=x1)
A:scipy.stats._stats_py.(a_contains_nan, nan_policy)->_contains_nan(a, nan_policy)
A:scipy.stats._stats_py.variable_has_nan->numpy.isnan(a).any(axis=axisout)
A:scipy.stats._stats_py.a_ranked->numpy.apply_along_axis(rankdata, axisout, a)
A:scipy.stats._stats_py.rs->numpy.corrcoef(a_ranked, rowvar=axisout)
A:scipy.stats._stats_py.(t, prob)->_ttest_finish(df, t, alternative)
A:scipy.stats._stats_py.(rpb, prob)->pearsonr(x, y)
A:scipy.stats._stats_py.(cnx, npx)->_contains_nan(x, nan_policy)
A:scipy.stats._stats_py.(cny, npy)->_contains_nan(y, nan_policy)
A:scipy.stats._stats_py.cnt->numpy.diff(idx).astype(np.float64)
A:scipy.stats._stats_py.perm->numpy.argsort(x, kind='mergesort')
A:scipy.stats._stats_py.dis->_kendall_dis(x, y)
A:scipy.stats._stats_py.ntie->(cnt * (cnt - 1) // 2).sum()
A:scipy.stats._stats_py.(xtie, x0, x1)->count_rank_tie(x)
A:scipy.stats._stats_py.(ytie, y0, y1)->count_rank_tie(y)
A:scipy.stats._stats_py.minclasses->min(len(set(x)), len(set(y)))
A:scipy.stats._stats_py.tau->_weightedrankedtau(x, y, rank, weigher, additive)
A:scipy.stats._stats_py.(_, pvalue)->_normtest_finish(z, alternative)
A:scipy.stats._stats_py.rank->numpy.asarray(rank).ravel()
A:scipy.stats._stats_py.order->self.random_states[index].permutation(self.y.shape[0])
A:scipy.stats._stats_py.random_state->check_random_state(random_state)
A:scipy.stats._stats_py.parallelp->_ParallelP(x=x, y=y, random_states=random_states)
A:scipy.stats._stats_py.null_dist->numpy.array(list(mapwrapper(parallelp, range(reps))))
A:scipy.stats._stats_py.MGCResult->_make_tuple_bunch('MGCResult', ['statistic', 'pvalue', 'mgc_dict'], [])
A:scipy.stats._stats_py.(x, y)->map(np.asarray, (x, y))
A:scipy.stats._stats_py.(stat, stat_dict)->_mgc_stat(x, y)
A:scipy.stats._stats_py.(pvalue, null_dist)->_perm_test(x, y, stat, reps=reps, workers=workers, random_state=random_state)
A:scipy.stats._stats_py.stat_mgc_map->_local_correlations(distx, disty, global_corr='mgc')
A:scipy.stats._stats_py.sig_connect->numpy.array([[False]])
A:scipy.stats._stats_py.(stat, opt_scale)->_smooth_mgc_map(sig_connect, stat_mgc_map)
A:scipy.stats._stats_py.threshold->max(threshold, stat_mgc_map[m - 1][n - 1])
A:scipy.stats._stats_py.(sig_connect, _)->scipy.ndimage._measurements.label(sig_connect)
A:scipy.stats._stats_py.(_, label_counts)->numpy.unique(sig_connect, return_counts=True)
A:scipy.stats._stats_py.max_corr->max(stat_mgc_map[sig_connect])
A:scipy.stats._stats_py.max_corr_index->numpy.where((stat_mgc_map >= max_corr) & sig_connect)
A:scipy.stats._stats_py.TtestResultBase->_make_tuple_bunch('TtestResultBase', ['statistic', 'pvalue'], ['df'])
A:scipy.stats._stats_py.(low, high)->scipy.special.stdtrit(df, p)
A:scipy.stats._stats_py.alternative->{'t': 'two-sided', 'g': 'greater', 'l': 'less'}.get(alternative.lower()[0], alternative)
A:scipy.stats._stats_py.popmean->numpy.squeeze(popmean, axis=axis)
A:scipy.stats._stats_py.denom->numpy.sqrt(v / n)
A:scipy.stats._stats_py.t->numpy.divide(dm, denom)
A:scipy.stats._stats_py.(p, nans)->numpy.broadcast_arrays(t, np.nan)
A:scipy.stats._stats_py.pval->distributions.norm.sf(statistic)
A:scipy.stats._stats_py.df->numpy.where(np.isnan(df), 1, df)
A:scipy.stats._stats_py.Ttest_indResult->namedtuple('Ttest_indResult', ('statistic', 'pvalue'))
A:scipy.stats._stats_py.mean1->numpy.asarray(mean1)
A:scipy.stats._stats_py.std1->numpy.asarray(std1)
A:scipy.stats._stats_py.mean2->numpy.asarray(mean2)
A:scipy.stats._stats_py.std2->numpy.asarray(std2)
A:scipy.stats._stats_py.(df, denom)->_unequal_var_ttest_denom(v1, n1, v2, n2)
A:scipy.stats._stats_py.(a, b, axis)->_chk2_asarray(a, b, axis)
A:scipy.stats._stats_py.(cnb, npb)->_contains_nan(b, nan_policy)
A:scipy.stats._stats_py.v1->_var(a, axis, ddof=1)
A:scipy.stats._stats_py.v2->_var(b, axis, ddof=1)
A:scipy.stats._stats_py.m1->numpy.mean(a, axis)
A:scipy.stats._stats_py.(v1, m1, n1)->_ttest_trim_var_mean_len(a, trim, axis)
A:scipy.stats._stats_py.(v2, m2, n2)->_ttest_trim_var_mean_len(b, trim, axis)
A:scipy.stats._stats_py.g->gcd(n1, n2)
A:scipy.stats._stats_py.a_win->numpy.moveaxis(a, axis, -1)
A:scipy.stats._stats_py.nans_indices->numpy.any(np.isnan(a_win), axis=-1)
A:scipy.stats._stats_py.var_win->numpy.asarray(_var(a_win, ddof=2 * g + 1, axis=-1))
A:scipy.stats._stats_py.n_max->scipy.special.comb(size, size_a)
A:scipy.stats._stats_py.indices->numpy.array(indices)
A:scipy.stats._stats_py.data_perm->numpy.moveaxis(data_perm, -2, 0)
A:scipy.stats._stats_py.t_stat->numpy.concatenate(t_stat, axis=0)
A:scipy.stats._stats_py.avg_a->numpy.mean(a, axis=axis)
A:scipy.stats._stats_py.avg_b->numpy.mean(b, axis=axis)
A:scipy.stats._stats_py.var_a->_var(a, axis=axis, ddof=1)
A:scipy.stats._stats_py.var_b->_var(b, axis=axis, ddof=1)
A:scipy.stats._stats_py.t_stat_observed->_calc_t_stat(a, b, equal_var, axis=axis)
A:scipy.stats._stats_py.mat->numpy.moveaxis(mat, axis, -1)
A:scipy.stats._stats_py.(t_stat, permutations, n_max)->_permutation_distribution_t(mat, permutations, size_a=na, equal_var=equal_var, random_state=random_state)
A:scipy.stats._stats_py.cmps->compare[alternative](t_stat, t_stat_observed)
A:scipy.stats._stats_py.pvalues->numpy.asarray(pvalues)
A:scipy.stats._stats_py.na->_get_len(a, axis, 'first argument')
A:scipy.stats._stats_py.nb->_get_len(b, axis, 'second argument')
A:scipy.stats._stats_py.d->(a - b).astype(np.float64)
A:scipy.stats._stats_py.dm->numpy.mean(d, axis)
A:scipy.stats._stats_py.num->int(num)
A:scipy.stats._stats_py.Power_divergenceResult->namedtuple('Power_divergenceResult', ('statistic', 'pvalue'))
A:scipy.stats._stats_py.f_obs->numpy.asanyarray(f_obs)
A:scipy.stats._stats_py.f_obs_float->_m_broadcast_to(f_obs_float, bshape)
A:scipy.stats._stats_py.f_exp->numpy.asanyarray(f_obs).mean(axis=axis, keepdims=True)
A:scipy.stats._stats_py.bshape->_broadcast_shapes(f_obs_float.shape, f_exp.shape)
A:scipy.stats._stats_py.f_obs_sum->_m_broadcast_to(f_obs_float, bshape).sum(axis=axis)
A:scipy.stats._stats_py.f_exp_sum->numpy.asanyarray(f_obs).mean(axis=axis, keepdims=True).sum(axis=axis)
A:scipy.stats._stats_py.diff_gt_tol->(relative_diff > rtol).any()
A:scipy.stats._stats_py.stat->terms.sum(axis=axis)
A:scipy.stats._stats_py.num_obs->_count(terms, axis=axis)
A:scipy.stats._stats_py.ddof->asarray(ddof)
A:scipy.stats._stats_py.KstestResult->_make_tuple_bunch('KstestResult', ['statistic', 'pvalue'], ['statistic_location', 'statistic_sign'])
A:scipy.stats._stats_py.amax->dminus.argmax()
A:scipy.stats._stats_py.N->len(x)
A:scipy.stats._stats_py.cdfvals->cdf(x, *args)
A:scipy.stats._stats_py.(Dplus, d_location)->_compute_dplus(cdfvals, x)
A:scipy.stats._stats_py.(Dminus, d_location)->_compute_dminus(cdfvals, x)
A:scipy.stats._stats_py.(Dplus, dplus_location)->_compute_dplus(cdfvals, x)
A:scipy.stats._stats_py.(Dminus, dminus_location)->_compute_dminus(cdfvals, x)
A:scipy.stats._stats_py.B->numpy.zeros(lxj)
A:scipy.stats._stats_py.Bj->scipy.special.binom(xj[j] + j, j)
A:scipy.stats._stats_py.bin->scipy.special.binom(n1 + n2, n1)
A:scipy.stats._stats_py.jrange->numpy.arange(h)
A:scipy.stats._stats_py.num_paths->_count_paths_outside_method(n1, n2, g, h)
A:scipy.stats._stats_py.data1->numpy.sort(rvsfunc(*args, size=N) if rvsfunc else data1)
A:scipy.stats._stats_py.data2->numpy.sort(data2)
A:scipy.stats._stats_py.data_all->numpy.concatenate([data1, data2])
A:scipy.stats._stats_py.argminS->numpy.argmin(cddiffs)
A:scipy.stats._stats_py.argmaxS->numpy.argmax(cddiffs)
A:scipy.stats._stats_py.minS->numpy.clip(-cddiffs[argminS], 0, 1)
A:scipy.stats._stats_py.(success, d, prob)->_attempt_exact_2kssamp(n1, n2, g, d, alternative)
A:scipy.stats._stats_py.(m, n)->sorted([float(n1), float(n2)], reverse=True)
A:scipy.stats._stats_py.(xvals, yvals, cdf)->_parse_kstest_args(rvs, cdf, args, N)
A:scipy.stats._stats_py.arr->numpy.ravel(a)
A:scipy.stats._stats_py.size->numpy.float64(arr.size)
A:scipy.stats._stats_py.RanksumsResult->namedtuple('RanksumsResult', ('statistic', 'pvalue'))
A:scipy.stats._stats_py.n1->len(x)
A:scipy.stats._stats_py.n2->len(y)
A:scipy.stats._stats_py.ranked->rankdata(alldata)
A:scipy.stats._stats_py.(z, prob)->_normtest_finish(z, alternative)
A:scipy.stats._stats_py.KruskalResult->namedtuple('KruskalResult', ('statistic', 'pvalue'))
A:scipy.stats._stats_py.cn->_contains_nan(sample, nan_policy)
A:scipy.stats._stats_py.sample->numpy.ma.masked_invalid(sample)
A:scipy.stats._stats_py.ties->tiecorrect(ranked)
A:scipy.stats._stats_py.j->numpy.insert(np.cumsum(n), 0, 0)
A:scipy.stats._stats_py.totaln->numpy.sum(n, dtype=float)
A:scipy.stats._stats_py.FriedmanchisquareResult->namedtuple('FriedmanchisquareResult', ('statistic', 'pvalue'))
A:scipy.stats._stats_py.data->data.astype(float).astype(float)
A:scipy.stats._stats_py.data[i]->rankdata(data[i])
A:scipy.stats._stats_py.(replist, repnum)->find_repeats(array(d))
A:scipy.stats._stats_py.ssbn->numpy.sum(data.sum(axis=0) ** 2)
A:scipy.stats._stats_py.BrunnerMunzelResult->namedtuple('BrunnerMunzelResult', ('statistic', 'pvalue'))
A:scipy.stats._stats_py.nx->len(x)
A:scipy.stats._stats_py.ny->len(y)
A:scipy.stats._stats_py.rankc->rankdata(np.concatenate((x, y)))
A:scipy.stats._stats_py.rankcx_mean->numpy.mean(rankcx)
A:scipy.stats._stats_py.rankcy_mean->numpy.mean(rankcy)
A:scipy.stats._stats_py.rankx->rankdata(x)
A:scipy.stats._stats_py.ranky->rankdata(y)
A:scipy.stats._stats_py.rankx_mean->numpy.mean(rankx)
A:scipy.stats._stats_py.ranky_mean->numpy.mean(ranky)
A:scipy.stats._stats_py.Sx->numpy.sum(np.power(rankcx - rankx - rankcx_mean + rankx_mean, 2.0))
A:scipy.stats._stats_py.Sy->numpy.sum(np.power(rankcy - ranky - rankcy_mean + ranky_mean, 2.0))
A:scipy.stats._stats_py.df_numer->numpy.power(nx * Sx + ny * Sy, 2.0)
A:scipy.stats._stats_py.approx_factor->numpy.sqrt(nu / (nu - 2))
A:scipy.stats._stats_py.statistic->numpy.min(pvalues)
A:scipy.stats._stats_py.Zi->distributions.norm.isf(pvalues)
A:scipy.stats._stats_py.(u_values, u_weights)->_validate_distribution(u_values, u_weights)
A:scipy.stats._stats_py.(v_values, v_weights)->_validate_distribution(v_values, v_weights)
A:scipy.stats._stats_py.u_sorter->numpy.argsort(u_values)
A:scipy.stats._stats_py.v_sorter->numpy.argsort(v_values)
A:scipy.stats._stats_py.all_values->numpy.concatenate((u_values, v_values))
A:scipy.stats._stats_py.deltas->numpy.diff(all_values)
A:scipy.stats._stats_py.u_cdf_indices->u_values[u_sorter].searchsorted(all_values[:-1], 'right')
A:scipy.stats._stats_py.v_cdf_indices->v_values[v_sorter].searchsorted(all_values[:-1], 'right')
A:scipy.stats._stats_py.u_sorted_cumweights->numpy.concatenate(([0], np.cumsum(u_weights[u_sorter])))
A:scipy.stats._stats_py.v_sorted_cumweights->numpy.concatenate(([0], np.cumsum(v_weights[v_sorter])))
A:scipy.stats._stats_py.values->numpy.asarray(values, dtype=float)
A:scipy.stats._stats_py.RepeatedResults->namedtuple('RepeatedResults', ('values', 'counts'))
A:scipy.stats._stats_py.nan_indexes->numpy.isnan(a)
A:scipy.stats._stats_py.sorter->numpy.argsort(arr, kind=algo)
A:scipy.stats._stats_py.inv->numpy.empty(sorter.size, dtype=np.intp)
A:scipy.stats._stats_py.inv[sorter]->numpy.arange(sorter.size, dtype=np.intp)
A:scipy.stats._stats_py.x0->numpy.amin(a)
A:scipy.stats._stats_py.x1->numpy.average(a, weights=weights)
scipy.stats.PearsonRResult(self,statistic,pvalue,alternative,n)
scipy.stats.PearsonRResult.confidence_interval(self,confidence_level=0.95)
scipy.stats.TtestResult(self,statistic,pvalue,df,alternative,standard_error,estimate)
scipy.stats.TtestResult.confidence_interval(self,confidence_level=0.95)
scipy.stats._ParallelP(self,x,y,random_states)
scipy.stats._alexandergovern_input_validation(samples,nan_policy)
scipy.stats._attempt_exact_2kssamp(n1,n2,g,d,alternative)
scipy.stats._broadcast_shapes(shape1,shape2)
scipy.stats._broadcast_shapes_with_dropped_axis(a,b,axis)
scipy.stats._calc_t_stat(a,b,equal_var,axis=-1)
scipy.stats._calculate_winsorized_variance(a,g,axis)
scipy.stats._cdf_distance(p,u_values,v_values,u_weights=None,v_weights=None)
scipy.stats._chk2_asarray(a,b,axis)
scipy.stats._chk_asarray(a,axis)
scipy.stats._compute_dminus(cdfvals,x)
scipy.stats._compute_dplus(cdfvals,x)
scipy.stats._compute_prob_outside_square(n,h)
scipy.stats._compute_qth_percentile(sorted_,per,interpolation_method,axis)
scipy.stats._count(a,axis=None)
scipy.stats._count_paths_outside_method(m,n,g,h)
scipy.stats._create_f_oneway_nan_result(shape,axis)
scipy.stats._equal_var_ttest_denom(v1,n1,v2,n2)
scipy.stats._euclidean_dist(x)
scipy.stats._first(arr,axis)
scipy.stats._get_len(a,axis,msg)
scipy.stats._histogram(a,numbins=10,defaultlimits=None,weights=None,printextras=False)
scipy.stats._isconst(x)
scipy.stats._m_broadcast_to(a,shape)
scipy.stats._mad_1d(x,center,nan_policy)
scipy.stats._mask_to_limits(a,limits,inclusive)
scipy.stats._mgc_stat(distx,disty)
scipy.stats._moment(a,moment,axis,*,mean=None)
scipy.stats._moment_outputs(kwds)
scipy.stats._moment_result_object(*args)
scipy.stats._normtest_finish(z,alternative)
scipy.stats._parse_kstest_args(data1,data2,args,N)
scipy.stats._pearsonr_fisher_ci(r,n,confidence_level,alternative)
scipy.stats._perm_test(x,y,stat,reps=1000,workers=-1,random_state=None)
scipy.stats._permutation_distribution_t(data,permutations,size_a,equal_var,random_state=None)
scipy.stats._permutation_ttest(a,b,permutations,axis=0,equal_var=True,nan_policy='propagate',random_state=None,alternative='two-sided')
scipy.stats._quiet_nanmean(x)
scipy.stats._quiet_nanstd(x,ddof=0)
scipy.stats._shape_with_dropped_axis(a,axis)
scipy.stats._smooth_mgc_map(sig_connect,stat_mgc_map)
scipy.stats._square_of_sums(a,axis=0)
scipy.stats._stats_py.PearsonRResult(self,statistic,pvalue,alternative,n)
scipy.stats._stats_py.PearsonRResult.__init__(self,statistic,pvalue,alternative,n)
scipy.stats._stats_py.PearsonRResult.confidence_interval(self,confidence_level=0.95)
scipy.stats._stats_py.TtestResult(self,statistic,pvalue,df,alternative,standard_error,estimate)
scipy.stats._stats_py.TtestResult.__init__(self,statistic,pvalue,df,alternative,standard_error,estimate)
scipy.stats._stats_py.TtestResult.confidence_interval(self,confidence_level=0.95)
scipy.stats._stats_py._ParallelP(self,x,y,random_states)
scipy.stats._stats_py._ParallelP.__init__(self,x,y,random_states)
scipy.stats._stats_py._alexandergovern_input_validation(samples,nan_policy)
scipy.stats._stats_py._attempt_exact_2kssamp(n1,n2,g,d,alternative)
scipy.stats._stats_py._broadcast_shapes(shape1,shape2)
scipy.stats._stats_py._broadcast_shapes_with_dropped_axis(a,b,axis)
scipy.stats._stats_py._calc_t_stat(a,b,equal_var,axis=-1)
scipy.stats._stats_py._calculate_winsorized_variance(a,g,axis)
scipy.stats._stats_py._cdf_distance(p,u_values,v_values,u_weights=None,v_weights=None)
scipy.stats._stats_py._chk2_asarray(a,b,axis)
scipy.stats._stats_py._chk_asarray(a,axis)
scipy.stats._stats_py._compute_dminus(cdfvals,x)
scipy.stats._stats_py._compute_dplus(cdfvals,x)
scipy.stats._stats_py._compute_prob_outside_square(n,h)
scipy.stats._stats_py._compute_qth_percentile(sorted_,per,interpolation_method,axis)
scipy.stats._stats_py._count(a,axis=None)
scipy.stats._stats_py._count_paths_outside_method(m,n,g,h)
scipy.stats._stats_py._create_f_oneway_nan_result(shape,axis)
scipy.stats._stats_py._equal_var_ttest_denom(v1,n1,v2,n2)
scipy.stats._stats_py._euclidean_dist(x)
scipy.stats._stats_py._first(arr,axis)
scipy.stats._stats_py._get_len(a,axis,msg)
scipy.stats._stats_py._histogram(a,numbins=10,defaultlimits=None,weights=None,printextras=False)
scipy.stats._stats_py._isconst(x)
scipy.stats._stats_py._m_broadcast_to(a,shape)
scipy.stats._stats_py._mad_1d(x,center,nan_policy)
scipy.stats._stats_py._mask_to_limits(a,limits,inclusive)
scipy.stats._stats_py._mgc_stat(distx,disty)
scipy.stats._stats_py._moment(a,moment,axis,*,mean=None)
scipy.stats._stats_py._moment_outputs(kwds)
scipy.stats._stats_py._moment_result_object(*args)
scipy.stats._stats_py._normtest_finish(z,alternative)
scipy.stats._stats_py._parse_kstest_args(data1,data2,args,N)
scipy.stats._stats_py._pearsonr_fisher_ci(r,n,confidence_level,alternative)
scipy.stats._stats_py._perm_test(x,y,stat,reps=1000,workers=-1,random_state=None)
scipy.stats._stats_py._permutation_distribution_t(data,permutations,size_a,equal_var,random_state=None)
scipy.stats._stats_py._permutation_ttest(a,b,permutations,axis=0,equal_var=True,nan_policy='propagate',random_state=None,alternative='two-sided')
scipy.stats._stats_py._quiet_nanmean(x)
scipy.stats._stats_py._quiet_nanstd(x,ddof=0)
scipy.stats._stats_py._shape_with_dropped_axis(a,axis)
scipy.stats._stats_py._smooth_mgc_map(sig_connect,stat_mgc_map)
scipy.stats._stats_py._square_of_sums(a,axis=0)
scipy.stats._stats_py._sum_of_squares(a,axis=0)
scipy.stats._stats_py._t_confidence_interval(df,t,confidence_level,alternative)
scipy.stats._stats_py._threshold_mgc_map(stat_mgc_map,samp_size)
scipy.stats._stats_py._ttest_finish(df,t,alternative)
scipy.stats._stats_py._ttest_ind_from_stats(mean1,mean2,denom,df,alternative)
scipy.stats._stats_py._ttest_nans(a,b,axis,namedtuple_type)
scipy.stats._stats_py._ttest_trim_var_mean_len(a,trim,axis)
scipy.stats._stats_py._two_sample_transform(u,v)
scipy.stats._stats_py._unequal_var_ttest_denom(v1,n1,v2,n2)
scipy.stats._stats_py._validate_distribution(values,weights)
scipy.stats._stats_py._var(x,axis=0,ddof=0,mean=None)
scipy.stats._stats_py.alexandergovern(*samples,nan_policy='propagate')
scipy.stats._stats_py.brunnermunzel(x,y,alternative='two-sided',distribution='t',nan_policy='propagate')
scipy.stats._stats_py.chisquare(f_obs,f_exp=None,ddof=0,axis=0)
scipy.stats._stats_py.combine_pvalues(pvalues,method='fisher',weights=None)
scipy.stats._stats_py.cumfreq(a,numbins=10,defaultreallimits=None,weights=None)
scipy.stats._stats_py.describe(a,axis=0,ddof=1,bias=True,nan_policy='propagate')
scipy.stats._stats_py.energy_distance(u_values,v_values,u_weights=None,v_weights=None)
scipy.stats._stats_py.expectile(a,alpha=0.5,*,weights=None)
scipy.stats._stats_py.f_oneway(*samples,axis=0)
scipy.stats._stats_py.find_repeats(arr)
scipy.stats._stats_py.fisher_exact(table,alternative='two-sided')
scipy.stats._stats_py.friedmanchisquare(*samples)
scipy.stats._stats_py.gmean(a,axis=0,dtype=None,weights=None)
scipy.stats._stats_py.gstd(a,axis=0,ddof=1)
scipy.stats._stats_py.gzscore(a,*,axis=0,ddof=0,nan_policy='propagate')
scipy.stats._stats_py.hmean(a,axis=0,dtype=None,*,weights=None)
scipy.stats._stats_py.iqr(x,axis=None,rng=(25,75),scale=1.0,nan_policy='propagate',interpolation='linear',keepdims=False)
scipy.stats._stats_py.jarque_bera(x,*,axis=None)
scipy.stats._stats_py.kendalltau(x,y,initial_lexsort=None,nan_policy='propagate',method='auto',variant='b',alternative='two-sided')
scipy.stats._stats_py.kruskal(*samples,nan_policy='propagate')
scipy.stats._stats_py.ks_1samp(x,cdf,args=(),alternative='two-sided',method='auto')
scipy.stats._stats_py.ks_2samp(data1,data2,alternative='two-sided',method='auto')
scipy.stats._stats_py.kstest(rvs,cdf,args=(),N=20,alternative='two-sided',method='auto')
scipy.stats._stats_py.kurtosis(a,axis=0,fisher=True,bias=True,nan_policy='propagate')
scipy.stats._stats_py.kurtosistest(a,axis=0,nan_policy='propagate',alternative='two-sided')
scipy.stats._stats_py.median_abs_deviation(x,axis=0,center=np.median,scale=1.0,nan_policy='propagate')
scipy.stats._stats_py.mode(a,axis=0,nan_policy='propagate',keepdims=None)
scipy.stats._stats_py.moment(a,moment=1,axis=0,nan_policy='propagate')
scipy.stats._stats_py.multiscale_graphcorr(x,y,compute_distance=_euclidean_dist,reps=1000,workers=1,is_twosamp=False,random_state=None)
scipy.stats._stats_py.normaltest(a,axis=0,nan_policy='propagate')
scipy.stats._stats_py.obrientransform(*samples)
scipy.stats._stats_py.pack_TtestResult(statistic,pvalue,df,alternative,standard_error,estimate)
scipy.stats._stats_py.pearsonr(x,y,*,alternative='two-sided')
scipy.stats._stats_py.percentileofscore(a,score,kind='rank',nan_policy='propagate')
scipy.stats._stats_py.pmean(a,p,*,axis=0,dtype=None,weights=None)
scipy.stats._stats_py.pointbiserialr(x,y)
scipy.stats._stats_py.power_divergence(f_obs,f_exp=None,ddof=0,axis=0,lambda_=None)
scipy.stats._stats_py.rankdata(a,method='average',*,axis=None,nan_policy='propagate')
scipy.stats._stats_py.ranksums(x,y,alternative='two-sided')
scipy.stats._stats_py.relfreq(a,numbins=10,defaultreallimits=None,weights=None)
scipy.stats._stats_py.scoreatpercentile(a,per,limit=(),interpolation_method='fraction',axis=None)
scipy.stats._stats_py.sem(a,axis=0,ddof=1,nan_policy='propagate')
scipy.stats._stats_py.sigmaclip(a,low=4.0,high=4.0)
scipy.stats._stats_py.skew(a,axis=0,bias=True,nan_policy='propagate')
scipy.stats._stats_py.skewtest(a,axis=0,nan_policy='propagate',alternative='two-sided')
scipy.stats._stats_py.spearmanr(a,b=None,axis=0,nan_policy='propagate',alternative='two-sided')
scipy.stats._stats_py.tiecorrect(rankvals)
scipy.stats._stats_py.tmax(a,upperlimit=None,axis=0,inclusive=True,nan_policy='propagate')
scipy.stats._stats_py.tmean(a,limits=None,inclusive=(True,True),axis=None)
scipy.stats._stats_py.tmin(a,lowerlimit=None,axis=0,inclusive=True,nan_policy='propagate')
scipy.stats._stats_py.trim1(a,proportiontocut,tail='right',axis=0)
scipy.stats._stats_py.trim_mean(a,proportiontocut,axis=0)
scipy.stats._stats_py.trimboth(a,proportiontocut,axis=0)
scipy.stats._stats_py.tsem(a,limits=None,inclusive=(True,True),axis=0,ddof=1)
scipy.stats._stats_py.tstd(a,limits=None,inclusive=(True,True),axis=0,ddof=1)
scipy.stats._stats_py.ttest_1samp(a,popmean,axis=0,nan_policy='propagate',alternative='two-sided')
scipy.stats._stats_py.ttest_ind(a,b,axis=0,equal_var=True,nan_policy='propagate',permutations=None,random_state=None,alternative='two-sided',trim=0)
scipy.stats._stats_py.ttest_ind_from_stats(mean1,std1,nobs1,mean2,std2,nobs2,equal_var=True,alternative='two-sided')
scipy.stats._stats_py.ttest_rel(a,b,axis=0,nan_policy='propagate',alternative='two-sided')
scipy.stats._stats_py.tvar(a,limits=None,inclusive=(True,True),axis=0,ddof=1)
scipy.stats._stats_py.unpack_TtestResult(res)
scipy.stats._stats_py.wasserstein_distance(u_values,v_values,u_weights=None,v_weights=None)
scipy.stats._stats_py.weightedtau(x,y,rank=True,weigher=None,additive=True)
scipy.stats._stats_py.zmap(scores,compare,axis=0,ddof=0,nan_policy='propagate')
scipy.stats._stats_py.zscore(a,axis=0,ddof=0,nan_policy='propagate')
scipy.stats._sum_of_squares(a,axis=0)
scipy.stats._t_confidence_interval(df,t,confidence_level,alternative)
scipy.stats._threshold_mgc_map(stat_mgc_map,samp_size)
scipy.stats._ttest_finish(df,t,alternative)
scipy.stats._ttest_ind_from_stats(mean1,mean2,denom,df,alternative)
scipy.stats._ttest_nans(a,b,axis,namedtuple_type)
scipy.stats._ttest_trim_var_mean_len(a,trim,axis)
scipy.stats._two_sample_transform(u,v)
scipy.stats._unequal_var_ttest_denom(v1,n1,v2,n2)
scipy.stats._validate_distribution(values,weights)
scipy.stats._var(x,axis=0,ddof=0,mean=None)
scipy.stats.alexandergovern(*samples,nan_policy='propagate')
scipy.stats.brunnermunzel(x,y,alternative='two-sided',distribution='t',nan_policy='propagate')
scipy.stats.chisquare(f_obs,f_exp=None,ddof=0,axis=0)
scipy.stats.combine_pvalues(pvalues,method='fisher',weights=None)
scipy.stats.cumfreq(a,numbins=10,defaultreallimits=None,weights=None)
scipy.stats.describe(a,axis=0,ddof=1,bias=True,nan_policy='propagate')
scipy.stats.energy_distance(u_values,v_values,u_weights=None,v_weights=None)
scipy.stats.expectile(a,alpha=0.5,*,weights=None)
scipy.stats.f_oneway(*samples,axis=0)
scipy.stats.find_repeats(arr)
scipy.stats.fisher_exact(table,alternative='two-sided')
scipy.stats.friedmanchisquare(*samples)
scipy.stats.gmean(a,axis=0,dtype=None,weights=None)
scipy.stats.gstd(a,axis=0,ddof=1)
scipy.stats.gzscore(a,*,axis=0,ddof=0,nan_policy='propagate')
scipy.stats.hmean(a,axis=0,dtype=None,*,weights=None)
scipy.stats.iqr(x,axis=None,rng=(25,75),scale=1.0,nan_policy='propagate',interpolation='linear',keepdims=False)
scipy.stats.jarque_bera(x,*,axis=None)
scipy.stats.kendalltau(x,y,initial_lexsort=None,nan_policy='propagate',method='auto',variant='b',alternative='two-sided')
scipy.stats.kruskal(*samples,nan_policy='propagate')
scipy.stats.ks_1samp(x,cdf,args=(),alternative='two-sided',method='auto')
scipy.stats.ks_2samp(data1,data2,alternative='two-sided',method='auto')
scipy.stats.kstest(rvs,cdf,args=(),N=20,alternative='two-sided',method='auto')
scipy.stats.kurtosis(a,axis=0,fisher=True,bias=True,nan_policy='propagate')
scipy.stats.kurtosistest(a,axis=0,nan_policy='propagate',alternative='two-sided')
scipy.stats.median_abs_deviation(x,axis=0,center=np.median,scale=1.0,nan_policy='propagate')
scipy.stats.mode(a,axis=0,nan_policy='propagate',keepdims=None)
scipy.stats.moment(a,moment=1,axis=0,nan_policy='propagate')
scipy.stats.multiscale_graphcorr(x,y,compute_distance=_euclidean_dist,reps=1000,workers=1,is_twosamp=False,random_state=None)
scipy.stats.normaltest(a,axis=0,nan_policy='propagate')
scipy.stats.obrientransform(*samples)
scipy.stats.pack_TtestResult(statistic,pvalue,df,alternative,standard_error,estimate)
scipy.stats.pearsonr(x,y,*,alternative='two-sided')
scipy.stats.percentileofscore(a,score,kind='rank',nan_policy='propagate')
scipy.stats.pmean(a,p,*,axis=0,dtype=None,weights=None)
scipy.stats.pointbiserialr(x,y)
scipy.stats.power_divergence(f_obs,f_exp=None,ddof=0,axis=0,lambda_=None)
scipy.stats.rankdata(a,method='average',*,axis=None,nan_policy='propagate')
scipy.stats.ranksums(x,y,alternative='two-sided')
scipy.stats.relfreq(a,numbins=10,defaultreallimits=None,weights=None)
scipy.stats.scoreatpercentile(a,per,limit=(),interpolation_method='fraction',axis=None)
scipy.stats.sem(a,axis=0,ddof=1,nan_policy='propagate')
scipy.stats.sigmaclip(a,low=4.0,high=4.0)
scipy.stats.skew(a,axis=0,bias=True,nan_policy='propagate')
scipy.stats.skewtest(a,axis=0,nan_policy='propagate',alternative='two-sided')
scipy.stats.spearmanr(a,b=None,axis=0,nan_policy='propagate',alternative='two-sided')
scipy.stats.tiecorrect(rankvals)
scipy.stats.tmax(a,upperlimit=None,axis=0,inclusive=True,nan_policy='propagate')
scipy.stats.tmean(a,limits=None,inclusive=(True,True),axis=None)
scipy.stats.tmin(a,lowerlimit=None,axis=0,inclusive=True,nan_policy='propagate')
scipy.stats.trim1(a,proportiontocut,tail='right',axis=0)
scipy.stats.trim_mean(a,proportiontocut,axis=0)
scipy.stats.trimboth(a,proportiontocut,axis=0)
scipy.stats.tsem(a,limits=None,inclusive=(True,True),axis=0,ddof=1)
scipy.stats.tstd(a,limits=None,inclusive=(True,True),axis=0,ddof=1)
scipy.stats.ttest_1samp(a,popmean,axis=0,nan_policy='propagate',alternative='two-sided')
scipy.stats.ttest_ind(a,b,axis=0,equal_var=True,nan_policy='propagate',permutations=None,random_state=None,alternative='two-sided',trim=0)
scipy.stats.ttest_ind_from_stats(mean1,std1,nobs1,mean2,std2,nobs2,equal_var=True,alternative='two-sided')
scipy.stats.ttest_rel(a,b,axis=0,nan_policy='propagate',alternative='two-sided')
scipy.stats.tvar(a,limits=None,inclusive=(True,True),axis=0,ddof=1)
scipy.stats.unpack_TtestResult(res)
scipy.stats.wasserstein_distance(u_values,v_values,u_weights=None,v_weights=None)
scipy.stats.weightedtau(x,y,rank=True,weigher=None,additive=True)
scipy.stats.zmap(scores,compare,axis=0,ddof=0,nan_policy='propagate')
scipy.stats.zscore(a,axis=0,ddof=0,nan_policy='propagate')


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/stats.py----------------------------------------
scipy.stats.stats.__dir__()
scipy.stats.stats.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_entropy.py----------------------------------------
A:scipy.stats._entropy.pk->numpy.asarray(pk)
A:scipy.stats._entropy.vec->scipy.special.rel_entr(pk, qk)
A:scipy.stats._entropy.qk->numpy.asarray(qk)
A:scipy.stats._entropy.(pk, qk)->numpy.broadcast_arrays(pk, qk)
A:scipy.stats._entropy.S->numpy.sum(vec, axis=axis)
A:scipy.stats._entropy.values->numpy.moveaxis(values, axis, -1)
A:scipy.stats._entropy.window_length->math.floor(math.sqrt(n) + 0.5)
A:scipy.stats._entropy.sorted_data->numpy.sort(values, axis=-1)
A:scipy.stats._entropy.method->method.lower().lower()
A:scipy.stats._entropy.res->methods[method](sorted_data, window_length)
A:scipy.stats._entropy.shape->numpy.array(X.shape)
A:scipy.stats._entropy.Xl->numpy.broadcast_to(X[..., [0]], shape)
A:scipy.stats._entropy.Xr->numpy.broadcast_to(X[..., [-1]], shape)
A:scipy.stats._entropy.X->_pad_along_last_axis(X, m)
A:scipy.stats._entropy.logs->numpy.log(n * differences / (ci * m))
A:scipy.stats._entropy.k->numpy.arange(m, n + 1)
A:scipy.stats._entropy.i->numpy.arange(1, n + 1)
A:scipy.stats._entropy.Xibar->numpy.mean(X[..., j0], axis=-2, keepdims=True)
A:scipy.stats._entropy.num->numpy.sum(difference * dj, axis=-2)
scipy.stats._correa_entropy(X,m)
scipy.stats._ebrahimi_entropy(X,m)
scipy.stats._entropy._correa_entropy(X,m)
scipy.stats._entropy._ebrahimi_entropy(X,m)
scipy.stats._entropy._pad_along_last_axis(X,m)
scipy.stats._entropy._van_es_entropy(X,m)
scipy.stats._entropy._vasicek_entropy(X,m)
scipy.stats._entropy.differential_entropy(values:np.typing.ArrayLike,*,window_length:Optional[int]=None,base:Optional[float]=None,axis:int=0,method:str='auto')->Union[np.number, np.ndarray]
scipy.stats._entropy.entropy(pk:np.typing.ArrayLike,qk:Optional[np.typing.ArrayLike]=None,base:Optional[float]=None,axis:int=0)->Union[np.number, np.ndarray]
scipy.stats._pad_along_last_axis(X,m)
scipy.stats._van_es_entropy(X,m)
scipy.stats._vasicek_entropy(X,m)
scipy.stats.differential_entropy(values:np.typing.ArrayLike,*,window_length:Optional[int]=None,base:Optional[float]=None,axis:int=0,method:str='auto')->Union[np.number, np.ndarray]
scipy.stats.entropy(pk:np.typing.ArrayLike,qk:Optional[np.typing.ArrayLike]=None,base:Optional[float]=None,axis:int=0)->Union[np.number, np.ndarray]


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_page_trend_test.py----------------------------------------
A:scipy.stats._page_trend_test.PageTrendTestResult->make_dataclass('PageTrendTestResult', ('statistic', 'pvalue', 'method'))
A:scipy.stats._page_trend_test.ranks->range(1, self.k + 1)
A:scipy.stats._page_trend_test.predicted_ranks->numpy.array(predicted_ranks, copy=False)
A:scipy.stats._page_trend_test.L->_l_vectorized(ranks, predicted_ranks)
A:scipy.stats._page_trend_test.method->_choose_method(ranks)
A:scipy.stats._page_trend_test.p->_continuous_distns.norm.sf(Lambda)
A:scipy.stats._page_trend_test.page_result->PageTrendTestResult(statistic=L, pvalue=p, method=method)
A:scipy.stats._page_trend_test.colsums->range(1, self.k + 1).sum(axis=-2, keepdims=True)
A:scipy.stats._page_trend_test.Ls->(ranks * rank_perms).sum(axis=1)
A:scipy.stats._page_trend_test.rank_perms->numpy.array(list(permutations(ranks)))
A:scipy.stats._page_trend_test.ps->self.p_l_k_1()
A:scipy.stats._page_trend_test.ls->range(self.a, self.b + 1)
A:scipy.stats._page_trend_test.low->max(l - (n - 1) * self.b, self.a)
A:scipy.stats._page_trend_test.high->min(l - (n - 1) * self.a, self.b)
A:scipy.stats._page_trend_test.p1->self.pmf(l - t, n - 1)
A:scipy.stats._page_trend_test.p2->self.pmf(t, 1)
A:scipy.stats._page_trend_test._pagel_state->_PageL()
scipy.stats._page_trend_test._PageL(self)
scipy.stats._page_trend_test._PageL.__init__(self)
scipy.stats._page_trend_test._PageL.p_l_k_1(self)
scipy.stats._page_trend_test._PageL.pmf(self,l,n)
scipy.stats._page_trend_test._PageL.set_k(self,k)
scipy.stats._page_trend_test._PageL.sf(self,l,n)
scipy.stats._page_trend_test._choose_method(ranks)
scipy.stats._page_trend_test._l_p_asymptotic(L,m,n)
scipy.stats._page_trend_test._l_p_exact(L,m,n)
scipy.stats._page_trend_test._l_vectorized(ranks,predicted_ranks)
scipy.stats._page_trend_test.page_trend_test(data,ranked=False,predicted_ranks=None,method='auto')
scipy.stats.page_trend_test(data,ranked=False,predicted_ranks=None,method='auto')


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_binned_statistic.py----------------------------------------
A:scipy.stats._binned_statistic.BinnedStatisticResult->namedtuple('BinnedStatisticResult', ('statistic', 'bin_edges', 'binnumber'))
A:scipy.stats._binned_statistic.N->len(bins)
A:scipy.stats._binned_statistic.(medians, edges, binnumbers)->binned_statistic_dd([x, y], values, statistic, bins, range, expand_binnumbers=expand_binnumbers)
A:scipy.stats._binned_statistic.BinnedStatistic2dResult->namedtuple('BinnedStatistic2dResult', ('statistic', 'x_edge', 'y_edge', 'binnumber'))
A:scipy.stats._binned_statistic.xedgesyedges->numpy.asarray(bins, float)
A:scipy.stats._binned_statistic.BinnedStatisticddResult->namedtuple('BinnedStatisticddResult', ('statistic', 'bin_edges', 'binnumber'))
A:scipy.stats._binned_statistic.a->numpy.arange(len(flatsum))
A:scipy.stats._binned_statistic.b->numpy.bincount(x, np.imag(weights))
A:scipy.stats._binned_statistic.z->numpy.bincount(x, weights)
A:scipy.stats._binned_statistic.bins->index(bins)
A:scipy.stats._binned_statistic.values->numpy.atleast_2d(values)
A:scipy.stats._binned_statistic.input_shape->list(values.shape)
A:scipy.stats._binned_statistic.M->len(bins)
A:scipy.stats._binned_statistic.(nbin, edges, dedges)->_bin_edges(sample, bins, range)
A:scipy.stats._binned_statistic.binnumbers->numpy.ravel_multi_index(sampBin, nbin)
A:scipy.stats._binned_statistic.nbin->numpy.asarray(nbin)
A:scipy.stats._binned_statistic.result_type->numpy.result_type(values, np.float64)
A:scipy.stats._binned_statistic.result->result.reshape(input_shape[:-1] + list(nbin - 2)).reshape(input_shape[:-1] + list(nbin - 2))
A:scipy.stats._binned_statistic.flatcount->_bincount(binnumbers, None)
A:scipy.stats._binned_statistic.flatsum->_bincount(binnumbers, values[vv])
A:scipy.stats._binned_statistic.std->numpy.sqrt(_bincount(binnumbers, delta * np.conj(delta))[a] / flatcount[a])
A:scipy.stats._binned_statistic.i->numpy.argsort(values[vv])
A:scipy.stats._binned_statistic.(_, j, counts)->numpy.unique(binnumbers[i], return_index=True, return_counts=True)
A:scipy.stats._binned_statistic.null->statistic([])
A:scipy.stats._binned_statistic.core->tuple([slice(None)] + Ndim * [slice(1, -1)])
A:scipy.stats._binned_statistic.unique_bin_numbers->numpy.unique(bin_numbers)
A:scipy.stats._binned_statistic.bin_map->dict()
A:scipy.stats._binned_statistic.stat->stat_func(np.array(bin_map[i]))
A:scipy.stats._binned_statistic.smin->numpy.empty(Ndim)
A:scipy.stats._binned_statistic.smax->numpy.empty(Ndim)
A:scipy.stats._binned_statistic.edges[i]->numpy.asarray(bins[i], edges_dtype)
A:scipy.stats._binned_statistic.dedges[i]->numpy.diff(edges[i])
A:scipy.stats._binned_statistic.dedges_min->numpy.diff(edges[i]).min()
scipy.stats._bin_edges(sample,bins=None,range=None)
scipy.stats._bin_numbers(sample,nbin,edges,dedges)
scipy.stats._bincount(x,weights)
scipy.stats._binned_statistic._bin_edges(sample,bins=None,range=None)
scipy.stats._binned_statistic._bin_numbers(sample,nbin,edges,dedges)
scipy.stats._binned_statistic._bincount(x,weights)
scipy.stats._binned_statistic._calc_binned_statistic(Vdim,bin_numbers,result,values,stat_func)
scipy.stats._binned_statistic._create_binned_data(bin_numbers,unique_bin_numbers,values,vv)
scipy.stats._binned_statistic.binned_statistic(x,values,statistic='mean',bins=10,range=None)
scipy.stats._binned_statistic.binned_statistic_2d(x,y,values,statistic='mean',bins=10,range=None,expand_binnumbers=False)
scipy.stats._binned_statistic.binned_statistic_dd(sample,values,statistic='mean',bins=10,range=None,expand_binnumbers=False,binned_statistic_result=None)
scipy.stats._calc_binned_statistic(Vdim,bin_numbers,result,values,stat_func)
scipy.stats._create_binned_data(bin_numbers,unique_bin_numbers,values,vv)
scipy.stats.binned_statistic(x,values,statistic='mean',bins=10,range=None)
scipy.stats.binned_statistic_2d(x,y,values,statistic='mean',bins=10,range=None,expand_binnumbers=False)
scipy.stats.binned_statistic_dd(sample,values,statistic='mean',bins=10,range=None,expand_binnumbers=False,binned_statistic_result=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_hypotests.py----------------------------------------
A:scipy.stats._hypotests.Epps_Singleton_2sampResult->namedtuple('Epps_Singleton_2sampResult', ('statistic', 'pvalue'))
A:scipy.stats._hypotests.cov_x->numpy.cov(gx.T, bias=True)
A:scipy.stats._hypotests.cov_y->numpy.cov(gy.T, bias=True)
A:scipy.stats._hypotests.est_cov_inv->numpy.linalg.pinv(est_cov)
A:scipy.stats._hypotests.r->scipy.stats.rankdata(z, method='average')
A:scipy.stats._hypotests.p->max(0, 1.0 - _cdf_cvm_inf(tn))
A:scipy.stats._hypotests.(x1_lb, x1_ub)->distributions.poisson.ppf([1e-10, 1 - 1e-16], nlmbd_hat1)
A:scipy.stats._hypotests.(x2_lb, x2_ub)->distributions.poisson.ppf([1e-10, 1 - 1e-16], nlmbd_hat2)
A:scipy.stats._hypotests.x1->numpy.arange(total_col_1 + 1, dtype=np.int64).reshape(1, -1)
A:scipy.stats._hypotests.prob_x1->distributions.poisson.pmf(x1, nlmbd_hat1)
A:scipy.stats._hypotests.prob_x2->distributions.poisson.pmf(x2, nlmbd_hat2)
A:scipy.stats._hypotests.pvalue->numpy.clip(2 * res.pvalue, a_min=0, a_max=1)
A:scipy.stats._hypotests.x->numpy.array(c)
A:scipy.stats._hypotests.tot->numpy.zeros_like(x, dtype='float')
A:scipy.stats._hypotests.cond->numpy.ones_like(x, dtype='bool')
A:scipy.stats._hypotests.b->kv(0.25, q)
A:scipy.stats._hypotests.z->numpy.concatenate([xa, ya])
A:scipy.stats._hypotests.y->numpy.zeros_like(x, dtype='float')
A:scipy.stats._hypotests.vals->numpy.sort(np.asarray(rvs))
A:scipy.stats._hypotests.n->len(vals)
A:scipy.stats._hypotests.cdfvals->cdf(vals, *args)
A:scipy.stats._hypotests.c->numpy.zeros(k * (k + 1) // 2 + 1, dtype=np.double)
A:scipy.stats._hypotests.m->len(prev_c)
A:scipy.stats._hypotests.j->numpy.arange(q)
A:scipy.stats._hypotests.phi_sp->numpy.prod(np.cos(theta * ai), axis=0)
A:scipy.stats._hypotests.res->SomersDResult(d, p, table)
A:scipy.stats._hypotests.NA->A.sum()
A:scipy.stats._hypotests.PA->_P(A)
A:scipy.stats._hypotests.QA->_Q(A)
A:scipy.stats._hypotests.Sri2->(A.sum(axis=1) ** 2).sum()
A:scipy.stats._hypotests.Scj2->(A.sum(axis=0) ** 2).sum()
A:scipy.stats._hypotests.(_, p)->scipy.stats._stats_py._normtest_finish(Z, alternative)
A:scipy.stats._hypotests.SomersDResult->make_dataclass('SomersDResult', ('statistic', 'pvalue', 'table'))
A:scipy.stats._hypotests.(d, p)->_somers_d(table, alternative)
A:scipy.stats._hypotests.mask->numpy.ones(nx + ny, bool)
A:scipy.stats._hypotests.gammaln_arr->gammaln(np.arange(n + 1) + 1)
A:scipy.stats._hypotests.BarnardExactResult->make_dataclass('BarnardExactResult', [('statistic', float), ('pvalue', float)])
A:scipy.stats._hypotests.table->numpy.asarray(table, dtype=np.int64)
A:scipy.stats._hypotests.(total_col_1, total_col_2)->numpy.asarray(table, dtype=np.int64).sum(axis=0)
A:scipy.stats._hypotests.x2->numpy.arange(total_col_2 + 1, dtype=np.int64).reshape(-1, 1)
A:scipy.stats._hypotests.wald_statistic->numpy.divide(p1 - p2, np.sqrt(variances))
A:scipy.stats._hypotests.x1_log_comb->_compute_log_combinations(total_col_1)
A:scipy.stats._hypotests.x2_log_comb->_compute_log_combinations(total_col_2)
A:scipy.stats._hypotests.result->shgo(_get_binomial_log_p_value_with_nuisance_param, args=(x1_sum_x2, x1_sum_x2_log_comb, index_arr), bounds=((0, 1),), n=n, sampling_method='sobol')
A:scipy.stats._hypotests.p_value->numpy.clip(np.exp(-result.fun), a_min=0, a_max=1)
A:scipy.stats._hypotests.BoschlooExactResult->make_dataclass('BoschlooExactResult', [('statistic', float), ('pvalue', float)])
A:scipy.stats._hypotests.boschloo_less->boschloo_exact(table, alternative='less', n=n)
A:scipy.stats._hypotests.boschloo_greater->boschloo_exact(table, alternative='greater', n=n)
A:scipy.stats._hypotests.log_nuisance->numpy.log(nuisance_param, out=np.zeros_like(nuisance_param), where=nuisance_param >= 0)
A:scipy.stats._hypotests.log_1_minus_nuisance->numpy.log(1 - nuisance_param, out=np.zeros_like(nuisance_param), where=1 - nuisance_param >= 0)
A:scipy.stats._hypotests.max_value->tmp_values_from_index.max()
A:scipy.stats._hypotests.log_probs->numpy.exp(tmp_values_from_index - max_value).sum()
A:scipy.stats._hypotests.lcm->numpy.lcm(m, n)
A:scipy.stats._hypotests.combinations->comb(m + n, m)
A:scipy.stats._hypotests.max_gs->max(zeta_bound, combinations)
A:scipy.stats._hypotests.dtype->numpy.min_scalar_type(max_gs)
A:scipy.stats._hypotests.tmp->numpy.concatenate([np.stack([vi, tmp[1, i0] + g[1, i1]]), np.delete(tmp, i0, 1), np.delete(g, i1, 1)], 1)
A:scipy.stats._hypotests.(vi, i0, i1)->numpy.intersect1d(tmp[0], g[0], return_indices=True)
A:scipy.stats._hypotests.xa->numpy.sort(np.asarray(x))
A:scipy.stats._hypotests.ya->numpy.sort(np.asarray(y))
A:scipy.stats._hypotests.nx->len(xa)
A:scipy.stats._hypotests.ny->len(ya)
A:scipy.stats._hypotests.srd->distributions.studentized_range.ppf(*params)
A:scipy.stats._hypotests.self._ci->ConfidenceInterval(low=lower_conf, high=upper_conf)
A:scipy.stats._hypotests.args->_tukey_hsd_iv(args)
A:scipy.stats._hypotests.ntreatments->len(args)
A:scipy.stats._hypotests.means->numpy.asarray([np.mean(arg) for arg in args])
A:scipy.stats._hypotests.nsamples_treatments->numpy.asarray([a.size for a in args])
A:scipy.stats._hypotests.nobs->numpy.sum(nsamples_treatments)
A:scipy.stats._hypotests.stand_err->numpy.sqrt(normalize * mse / 2)
A:scipy.stats._hypotests.pvalues->distributions.studentized_range.sf(*params)
scipy.stats.CramerVonMisesResult(self,statistic,pvalue)
scipy.stats.CramerVonMisesResult.__repr__(self)
scipy.stats.TukeyHSDResult(self,statistic,pvalue,_nobs,_ntreatments,_stand_err)
scipy.stats.TukeyHSDResult.__str__(self)
scipy.stats.TukeyHSDResult.confidence_interval(self,confidence_level=0.95)
scipy.stats._all_partitions(nx,ny)
scipy.stats._cdf_cvm(x,n=None)
scipy.stats._cdf_cvm_inf(x)
scipy.stats._compute_log_combinations(n)
scipy.stats._get_binomial_log_p_value_with_nuisance_param(nuisance_param,x1_sum_x2,x1_sum_x2_log_comb,index_arr)
scipy.stats._get_wilcoxon_distr(n)
scipy.stats._get_wilcoxon_distr2(n)
scipy.stats._hypotests.CramerVonMisesResult(self,statistic,pvalue)
scipy.stats._hypotests.CramerVonMisesResult.__init__(self,statistic,pvalue)
scipy.stats._hypotests.CramerVonMisesResult.__repr__(self)
scipy.stats._hypotests.TukeyHSDResult(self,statistic,pvalue,_nobs,_ntreatments,_stand_err)
scipy.stats._hypotests.TukeyHSDResult.__init__(self,statistic,pvalue,_nobs,_ntreatments,_stand_err)
scipy.stats._hypotests.TukeyHSDResult.__str__(self)
scipy.stats._hypotests.TukeyHSDResult.confidence_interval(self,confidence_level=0.95)
scipy.stats._hypotests._all_partitions(nx,ny)
scipy.stats._hypotests._cdf_cvm(x,n=None)
scipy.stats._hypotests._cdf_cvm_inf(x)
scipy.stats._hypotests._compute_log_combinations(n)
scipy.stats._hypotests._get_binomial_log_p_value_with_nuisance_param(nuisance_param,x1_sum_x2,x1_sum_x2_log_comb,index_arr)
scipy.stats._hypotests._get_wilcoxon_distr(n)
scipy.stats._hypotests._get_wilcoxon_distr2(n)
scipy.stats._hypotests._poisson_means_test_iv(k1,n1,k2,n2,diff,alternative)
scipy.stats._hypotests._psi1_mod(x)
scipy.stats._hypotests._pval_cvm_2samp_exact(s,m,n)
scipy.stats._hypotests._somers_d(A,alternative='two-sided')
scipy.stats._hypotests._tau_b(A)
scipy.stats._hypotests._tukey_hsd_iv(args)
scipy.stats._hypotests.barnard_exact(table,alternative='two-sided',pooled=True,n=32)
scipy.stats._hypotests.boschloo_exact(table,alternative='two-sided',n=32)
scipy.stats._hypotests.cramervonmises(rvs,cdf,args=())
scipy.stats._hypotests.cramervonmises_2samp(x,y,method='auto')
scipy.stats._hypotests.epps_singleton_2samp(x,y,t=(0.4,0.8))
scipy.stats._hypotests.poisson_means_test(k1,n1,k2,n2,*,diff=0,alternative='two-sided')
scipy.stats._hypotests.somersd(x,y=None,alternative='two-sided')
scipy.stats._hypotests.tukey_hsd(*args)
scipy.stats._poisson_means_test_iv(k1,n1,k2,n2,diff,alternative)
scipy.stats._psi1_mod(x)
scipy.stats._pval_cvm_2samp_exact(s,m,n)
scipy.stats._somers_d(A,alternative='two-sided')
scipy.stats._tau_b(A)
scipy.stats._tukey_hsd_iv(args)
scipy.stats.barnard_exact(table,alternative='two-sided',pooled=True,n=32)
scipy.stats.boschloo_exact(table,alternative='two-sided',n=32)
scipy.stats.cramervonmises(rvs,cdf,args=())
scipy.stats.cramervonmises_2samp(x,y,method='auto')
scipy.stats.epps_singleton_2samp(x,y,t=(0.4,0.8))
scipy.stats.poisson_means_test(k1,n1,k2,n2,*,diff=0,alternative='two-sided')
scipy.stats.somersd(x,y=None,alternative='two-sided')
scipy.stats.tukey_hsd(*args)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_mannwhitneyu.py----------------------------------------
A:scipy.stats._mannwhitneyu.x->numpy.broadcast_to(x, z.shape + (x.shape[-1],))
A:scipy.stats._mannwhitneyu.y->numpy.broadcast_to(y, z.shape + (y.shape[-1],))
A:scipy.stats._mannwhitneyu.z->_get_mwu_z(U, n1, n2, ranks, continuity=use_continuity)
A:scipy.stats._mannwhitneyu.fmnks->_mwu_f_iterative(m, n, i, fmnks)
A:scipy.stats._mannwhitneyu.pmfs->self.pmf(np.arange(0, np.max(k) + 1), m, n)
A:scipy.stats._mannwhitneyu.cdfs->numpy.cumsum(pmfs)
A:scipy.stats._mannwhitneyu.shape_old->numpy.array(self._fmnks.shape)
A:scipy.stats._mannwhitneyu.shape_new->numpy.array((m + 1, n + 1, k + 1))
A:scipy.stats._mannwhitneyu.shape->numpy.maximum(shape_old, shape_new)
A:scipy.stats._mannwhitneyu._mwu_state->_MWU()
A:scipy.stats._mannwhitneyu.(m, n, k)->stack.pop()
A:scipy.stats._mannwhitneyu.fmnk->_base_case(m, n, k)
A:scipy.stats._mannwhitneyu.f1->_base_case(m - 1, n, k - n)
A:scipy.stats._mannwhitneyu.f2->_base_case(m, n - 1, k)
A:scipy.stats._mannwhitneyu.(_, t)->numpy.unique(xy, return_counts=True, axis=-1)
A:scipy.stats._mannwhitneyu.tie_term->numpy.apply_along_axis(_tie_term, -1, ranks)
A:scipy.stats._mannwhitneyu.s->numpy.sqrt(n1 * n2 / 12 * (n + 1 - tie_term / (n * (n - 1))))
A:scipy.stats._mannwhitneyu.alternative->alternative.lower().lower()
A:scipy.stats._mannwhitneyu.axis_int->int(axis)
A:scipy.stats._mannwhitneyu.method->_mwu_choose_method(n1, n2, xy, method)
A:scipy.stats._mannwhitneyu.MannwhitneyuResult->namedtuple('MannwhitneyuResult', ('statistic', 'pvalue'))
A:scipy.stats._mannwhitneyu.(x, y, use_continuity, alternative, axis_int, method)->_mwu_input_validation(x, y, use_continuity, alternative, axis, method)
A:scipy.stats._mannwhitneyu.(x, y, xy)->_broadcast_concatenate(x, y, axis)
A:scipy.stats._mannwhitneyu.ranks->scipy.stats.rankdata(xy, axis=-1)
A:scipy.stats._mannwhitneyu.R1->ranks[..., :n1].sum(axis=-1)
A:scipy.stats._mannwhitneyu.p->numpy.clip(p, 0, 1)
scipy.stats._mannwhitneyu._MWU(self)
scipy.stats._mannwhitneyu._MWU.__init__(self)
scipy.stats._mannwhitneyu._MWU._f(self,m,n,k)
scipy.stats._mannwhitneyu._MWU._resize_fmnks(self,m,n,k)
scipy.stats._mannwhitneyu._MWU.cdf(self,k,m,n)
scipy.stats._mannwhitneyu._MWU.pmf(self,k,m,n)
scipy.stats._mannwhitneyu._MWU.pmf_iterative(self,k,m,n)
scipy.stats._mannwhitneyu._MWU.pmf_recursive(self,k,m,n)
scipy.stats._mannwhitneyu._MWU.sf(self,k,m,n)
scipy.stats._mannwhitneyu._broadcast_concatenate(x,y,axis)
scipy.stats._mannwhitneyu._get_mwu_z(U,n1,n2,ranks,axis=0,continuity=True)
scipy.stats._mannwhitneyu._mwu_choose_method(n1,n2,xy,method)
scipy.stats._mannwhitneyu._mwu_f_iterative(m,n,k,fmnks)
scipy.stats._mannwhitneyu._mwu_input_validation(x,y,use_continuity,alternative,axis,method)
scipy.stats._mannwhitneyu._tie_check(xy)
scipy.stats._mannwhitneyu._tie_term(ranks)
scipy.stats._mannwhitneyu.mannwhitneyu(x,y,use_continuity=True,alternative='two-sided',axis=0,method='auto')
scipy.stats.mannwhitneyu(x,y,use_continuity=True,alternative='two-sided',axis=0,method='auto')


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_axis_nan_policy.py----------------------------------------
A:scipy.stats._axis_nan_policy.new_shapes->numpy.delete(new_shapes, axis, axis=1)
A:scipy.stats._axis_nan_policy.axis->numpy.atleast_1d(axis)
A:scipy.stats._axis_nan_policy.axis_int->numpy.atleast_1d(axis).astype(int)
A:scipy.stats._axis_nan_policy.n_dims->numpy.max([sample.ndim for sample in samples])
A:scipy.stats._axis_nan_policy.new_shape->numpy.max(new_shapes, axis=0)
A:scipy.stats._axis_nan_policy.shapes->_broadcast_shapes(shapes, axis)
A:scipy.stats._axis_nan_policy.shape->numpy.delete(shape, axis)
A:scipy.stats._axis_nan_policy.arrays->_broadcast_arrays(arrays, axis)
A:scipy.stats._axis_nan_policy.res->_add_reduced_axes(res, reduced_axes, keepdims)
A:scipy.stats._axis_nan_policy.nans->numpy.isnan(samples[0])
A:scipy.stats._axis_nan_policy.mask->numpy.broadcast_to(mask, sample.shape)
A:scipy.stats._axis_nan_policy.dtype->numpy.result_type(*samples)
A:scipy.stats._axis_nan_policy.samples[i]->samples[i].astype(dtype, copy=False).astype(dtype, copy=False)
A:scipy.stats._axis_nan_policy.inexact->numpy.issubdtype(dtype, np.inexact)
A:scipy.stats._axis_nan_policy.sentinel->nextafter(sentinel, -np.inf)
A:scipy.stats._axis_nan_policy.sample->numpy.asarray(sample)
A:scipy.stats._axis_nan_policy.output_shape->_broadcast_array_shapes_remove_axis(samples, axis)
A:scipy.stats._axis_nan_policy._desc->'If this is set to True, the axes which are reduced are left\nin the result as dimensions with size one. With this option,\nthe result will broadcast correctly against the input array.'.split('\n')
A:scipy.stats._axis_nan_policy._axis_parameter_doc->Parameter(_name, _type, _desc)
A:scipy.stats._axis_nan_policy._axis_parameter->inspect.Parameter(_name, inspect.Parameter.KEYWORD_ONLY, default=default_axis)
A:scipy.stats._axis_nan_policy._nan_policy_parameter_doc->Parameter(_name, _type, _desc)
A:scipy.stats._axis_nan_policy._nan_policy_parameter->inspect.Parameter(_name, inspect.Parameter.KEYWORD_ONLY, default='propagate')
A:scipy.stats._axis_nan_policy._keepdims_parameter_doc->Parameter(_name, _type, _desc)
A:scipy.stats._axis_nan_policy._keepdims_parameter->inspect.Parameter(_name, inspect.Parameter.KEYWORD_ONLY, default=False)
A:scipy.stats._axis_nan_policy._standard_note_addition->'\nBeginning in SciPy 1.9, ``np.matrix`` inputs (not recommended for new\ncode) are converted to ``np.ndarray`` before the calculation is performed. In\nthis case, the output will be a scalar or ``np.ndarray`` of appropriate shape\nrather than a 2D ``np.matrix``. Similarly, while masked elements of masked\narrays are ignored, the output will be a scalar or ``np.ndarray`` rather than a\nmasked array with ``mask=False``.'.split('\n')
A:scipy.stats._axis_nan_policy.params->list(inspect.signature(hypotest_fun_in).parameters)
A:scipy.stats._axis_nan_policy.d_args->dict(zip(params, args))
A:scipy.stats._axis_nan_policy.n_samp->n_samples(kwds)
A:scipy.stats._axis_nan_policy.n_out->n_out(kwds)
A:scipy.stats._axis_nan_policy.n_kwd_samp->len(kwd_samp)
A:scipy.stats._axis_nan_policy.new_kwds->dict(zip(kwd_samp, samples[n_samp:]))
A:scipy.stats._axis_nan_policy.nan_policy->kwds.pop('nan_policy', 'propagate')
A:scipy.stats._axis_nan_policy.keepdims->kwds.pop('keepdims', False)
A:scipy.stats._axis_nan_policy.(samples, sentinel)->_masked_arrays_2_sentinel_arrays(samples)
A:scipy.stats._axis_nan_policy.reduced_axes->tuple(range(n_dims))
A:scipy.stats._axis_nan_policy.samples->_remove_sentinel(samples, paired, sentinel)
A:scipy.stats._axis_nan_policy.n_axes->len(axis)
A:scipy.stats._axis_nan_policy.ndims->numpy.array([sample.ndim for sample in samples])
A:scipy.stats._axis_nan_policy.(contains_nan, _)->_contains_nan(x, nan_policy)
A:scipy.stats._axis_nan_policy.empty_output->_check_empty_inputs(samples, axis)
A:scipy.stats._axis_nan_policy.lengths->numpy.array([sample.shape[axis] for sample in samples])
A:scipy.stats._axis_nan_policy.split_indices->numpy.cumsum(lengths)
A:scipy.stats._axis_nan_policy.x->numpy.moveaxis(x, axis, 0)
A:scipy.stats._axis_nan_policy.(_axis_parameter_doc, _axis_parameter)->_get_axis_params(default_axis)
A:scipy.stats._axis_nan_policy.doc->FunctionDoc(axis_nan_policy_wrapper)
A:scipy.stats._axis_nan_policy.axis_nan_policy_wrapper.__doc__->str(doc)
A:scipy.stats._axis_nan_policy.sig->sig.replace(parameters=parameter_list).replace(parameters=parameter_list)
A:scipy.stats._axis_nan_policy.parameter_list->list(parameters.values())
scipy.stats._axis_nan_policy._add_reduced_axes(res,reduced_axes,keepdims)
scipy.stats._axis_nan_policy._axis_nan_policy_factory(tuple_to_result,default_axis=0,n_samples=1,paired=False,result_to_tuple=None,too_small=0,n_outputs=2,kwd_samples=[])
scipy.stats._axis_nan_policy._broadcast_array_shapes(arrays,axis=None)
scipy.stats._axis_nan_policy._broadcast_array_shapes_remove_axis(arrays,axis=None)
scipy.stats._axis_nan_policy._broadcast_arrays(arrays,axis=None)
scipy.stats._axis_nan_policy._broadcast_concatenate(arrays,axis)
scipy.stats._axis_nan_policy._broadcast_shapes(shapes,axis=None)
scipy.stats._axis_nan_policy._broadcast_shapes_remove_axis(shapes,axis=None)
scipy.stats._axis_nan_policy._check_empty_inputs(samples,axis)
scipy.stats._axis_nan_policy._get_axis_params(default_axis=0,_name=_name,_desc=_desc)
scipy.stats._axis_nan_policy._masked_arrays_2_sentinel_arrays(samples)
scipy.stats._axis_nan_policy._remove_nans(samples,paired)
scipy.stats._axis_nan_policy._remove_sentinel(samples,paired,sentinel)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_discrete_distns.py----------------------------------------
A:scipy.stats._discrete_distns.k->floor(x)
A:scipy.stats._discrete_distns.mu->numpy.where(alpha <= 1, np.inf, alpha / (alpha - 1))
A:scipy.stats._discrete_distns.var->scipy.stats._boost._binom_variance(n, p)
A:scipy.stats._discrete_distns.g1->numpy.where(alpha <= 2, np.nan, g1)
A:scipy.stats._discrete_distns.g2->numpy.where(alpha <= 2, np.nan, g2)
A:scipy.stats._discrete_distns.vals->ceil(np.where(q < 1.0 / (1 + exp(-a)), log(q * const) / a - 1, -log((1 - q) * const) / a))
A:scipy.stats._discrete_distns.binom->binom_gen(name='binom')
A:scipy.stats._discrete_distns.bernoulli->bernoulli_gen(b=1, name='bernoulli')
A:scipy.stats._discrete_distns.p->random_state.beta(a, b, size)
A:scipy.stats._discrete_distns.betabinom->betabinom_gen(name='betabinom')
A:scipy.stats._discrete_distns.cdf->self.cdf(ks, M, n, r)
A:scipy.stats._discrete_distns.logcdf[cond]->f1(k[cond], n[cond], p[cond])
A:scipy.stats._discrete_distns.logcdf[~cond]->numpy.log(cdf[~cond])
A:scipy.stats._discrete_distns.nbinom->nbinom_gen(name='nbinom')
A:scipy.stats._discrete_distns.temp->self._cdf(vals1, low, high)
A:scipy.stats._discrete_distns.geom->geom_gen(a=1, name='geom', longname='A geometric')
A:scipy.stats._discrete_distns.k2->numpy.arange(0, quant + 1)
A:scipy.stats._discrete_distns.hypergeom->hypergeom_gen(name='hypergeom')
A:scipy.stats._discrete_distns.(a, b)->self.support(M, n, r)
A:scipy.stats._discrete_distns.ks->numpy.arange(a, b + 1)
A:scipy.stats._discrete_distns.ppf->interp1d(cdf, ks, kind='next', fill_value='extrapolate')
A:scipy.stats._discrete_distns.rvs->rvs.reshape(size).reshape(size)
A:scipy.stats._discrete_distns.result->_lazywhere(~cond, (k, M, n, r), lambda k, M, n, r: -betaln(k + 1, r) + betaln(k + r, 1) - betaln(n - k + 1, M - r - n + 1) + betaln(M - r - k + 1, 1) + betaln(n + 1, M - n + 1) - betaln(M + 1, 1), fillvalue=0.0)
A:scipy.stats._discrete_distns.nhypergeom->nhypergeom_gen(name='nhypergeom')
A:scipy.stats._discrete_distns.r->scipy.special.log1p(-p)
A:scipy.stats._discrete_distns.logser->logser_gen(a=1, name='logser', longname='A logarithmic')
A:scipy.stats._discrete_distns.vals1->(vals - 1).clip(low, high)
A:scipy.stats._discrete_distns.tmp->numpy.asarray(mu)
A:scipy.stats._discrete_distns.poisson->poisson_gen(name='poisson', longname='A Poisson')
A:scipy.stats._discrete_distns.planck->planck_gen(a=0, name='planck', longname='A discrete exponential ')
A:scipy.stats._discrete_distns.z->exp(-lambda_)
A:scipy.stats._discrete_distns.zN->exp(-lambda_ * N)
A:scipy.stats._discrete_distns.boltzmann->boltzmann_gen(name='boltzmann', a=0, longname='A truncated discrete exponential ')
A:scipy.stats._discrete_distns.low->numpy.broadcast_to(low, size)
A:scipy.stats._discrete_distns.high->numpy.broadcast_to(high, size)
A:scipy.stats._discrete_distns.randint->randint_gen(name='randint', longname='A discrete uniform (random integer)')
A:scipy.stats._discrete_distns.zipf->zipf_gen(a=1, name='zipf', longname='A Zipf')
A:scipy.stats._discrete_distns.n_max->numpy.max(n)
A:scipy.stats._discrete_distns.out->numpy.moveaxis(out, j1, j0)
A:scipy.stats._discrete_distns.(n, a)->numpy.broadcast_arrays(n, a)
A:scipy.stats._discrete_distns.Hna->_gen_harmonic(n, a)
A:scipy.stats._discrete_distns.Hna1->_gen_harmonic(n, a - 1)
A:scipy.stats._discrete_distns.Hna2->_gen_harmonic(n, a - 2)
A:scipy.stats._discrete_distns.Hna3->_gen_harmonic(n, a - 3)
A:scipy.stats._discrete_distns.Hna4->_gen_harmonic(n, a - 4)
A:scipy.stats._discrete_distns.zipfian->zipfian_gen(a=1, name='zipfian', longname='A Zipfian')
A:scipy.stats._discrete_distns.ea->exp(a)
A:scipy.stats._discrete_distns.x->floor(x)
A:scipy.stats._discrete_distns.y->random_state.geometric(probOfSuccess, size=size)
A:scipy.stats._discrete_distns.dlaplace->dlaplace_gen(a=-np.inf, name='dlaplace', longname='A discrete Laplacian')
A:scipy.stats._discrete_distns.px->numpy.where(x < 0, _boost._ncx2_cdf(2 * mu2, -2 * x, 2 * mu1), 1 - _boost._ncx2_cdf(2 * mu1, 2 * (x + 1), 2 * mu2))
A:scipy.stats._discrete_distns.skellam->skellam_gen(a=-np.inf, name='skellam', longname='A Skellam')
A:scipy.stats._discrete_distns.E1->random_state.standard_exponential(size)
A:scipy.stats._discrete_distns.E2->random_state.standard_exponential(size)
A:scipy.stats._discrete_distns.ans->ceil(-E1 / log1p(-exp(-E2 / alpha)))
A:scipy.stats._discrete_distns.mu2->numpy.where(alpha <= 1, np.nan, mu2)
A:scipy.stats._discrete_distns.yulesimon->yulesimon_gen(name='yulesimon', a=1)
A:scipy.stats._discrete_distns.(_rvs1_size, _rvs1_indices)->_check_shape(args[0].shape, size)
A:scipy.stats._discrete_distns.size->numpy.array(size)
A:scipy.stats._discrete_distns._rvs1_size->numpy.array(_rvs1_size)
A:scipy.stats._discrete_distns._rvs1_indices->numpy.array(_rvs1_indices)
A:scipy.stats._discrete_distns.j0->numpy.arange(out.ndim)
A:scipy.stats._discrete_distns.j1->numpy.hstack((j0[~_rvs1_indices], j0[_rvs1_indices]))
A:scipy.stats._discrete_distns.out[i]->_rvs1(*[np.squeeze(arg)[i] for arg in args], _rvs1_size, random_state)
A:scipy.stats._discrete_distns.x_min->numpy.maximum(0, n - m2)
A:scipy.stats._discrete_distns.x_max->numpy.minimum(n, m1)
A:scipy.stats._discrete_distns.length->numpy.prod(size)
A:scipy.stats._discrete_distns.urn->self.dist(N, n, M, odds, 1e-12)
A:scipy.stats._discrete_distns.rv_gen->getattr(urn, self.rvs_name)
A:scipy.stats._discrete_distns.(x, M, n, N, odds)->numpy.broadcast_arrays(x, M, n, N, odds)
A:scipy.stats._discrete_distns.nchypergeom_fisher->nchypergeom_fisher_gen(name='nchypergeom_fisher', longname="A Fisher's noncentral hypergeometric")
A:scipy.stats._discrete_distns.nchypergeom_wallenius->nchypergeom_wallenius_gen(name='nchypergeom_wallenius', longname="A Wallenius' noncentral hypergeometric")
A:scipy.stats._discrete_distns.pairs->list(globals().copy().items())
A:scipy.stats._discrete_distns.(_distn_names, _distn_gen_names)->get_distribution_names(pairs, rv_discrete)
scipy.stats._discrete_distns._gen_harmonic(n,a)
scipy.stats._discrete_distns._gen_harmonic_gt1(n,a)
scipy.stats._discrete_distns._gen_harmonic_leq1(n,a)
scipy.stats._discrete_distns._isintegral(x)
scipy.stats._discrete_distns._nchypergeom_gen(rv_discrete)
scipy.stats._discrete_distns._nchypergeom_gen._argcheck(self,M,n,N,odds)
scipy.stats._discrete_distns._nchypergeom_gen._get_support(self,M,n,N,odds)
scipy.stats._discrete_distns._nchypergeom_gen._pmf(self,x,M,n,N,odds)
scipy.stats._discrete_distns._nchypergeom_gen._rvs(self,M,n,N,odds,size=None,random_state=None)
scipy.stats._discrete_distns._nchypergeom_gen._shape_info(self)
scipy.stats._discrete_distns._nchypergeom_gen._stats(self,M,n,N,odds,moments)
scipy.stats._discrete_distns._vectorize_rvs_over_shapes(_rvs1)
scipy.stats._discrete_distns.bernoulli_gen(binom_gen)
scipy.stats._discrete_distns.bernoulli_gen._argcheck(self,p)
scipy.stats._discrete_distns.bernoulli_gen._cdf(self,x,p)
scipy.stats._discrete_distns.bernoulli_gen._entropy(self,p)
scipy.stats._discrete_distns.bernoulli_gen._get_support(self,p)
scipy.stats._discrete_distns.bernoulli_gen._isf(self,x,p)
scipy.stats._discrete_distns.bernoulli_gen._logpmf(self,x,p)
scipy.stats._discrete_distns.bernoulli_gen._pmf(self,x,p)
scipy.stats._discrete_distns.bernoulli_gen._ppf(self,q,p)
scipy.stats._discrete_distns.bernoulli_gen._rvs(self,p,size=None,random_state=None)
scipy.stats._discrete_distns.bernoulli_gen._sf(self,x,p)
scipy.stats._discrete_distns.bernoulli_gen._shape_info(self)
scipy.stats._discrete_distns.bernoulli_gen._stats(self,p)
scipy.stats._discrete_distns.betabinom_gen(rv_discrete)
scipy.stats._discrete_distns.betabinom_gen._argcheck(self,n,a,b)
scipy.stats._discrete_distns.betabinom_gen._get_support(self,n,a,b)
scipy.stats._discrete_distns.betabinom_gen._logpmf(self,x,n,a,b)
scipy.stats._discrete_distns.betabinom_gen._pmf(self,x,n,a,b)
scipy.stats._discrete_distns.betabinom_gen._rvs(self,n,a,b,size=None,random_state=None)
scipy.stats._discrete_distns.betabinom_gen._shape_info(self)
scipy.stats._discrete_distns.betabinom_gen._stats(self,n,a,b,moments='mv')
scipy.stats._discrete_distns.binom_gen(rv_discrete)
scipy.stats._discrete_distns.binom_gen._argcheck(self,n,p)
scipy.stats._discrete_distns.binom_gen._cdf(self,x,n,p)
scipy.stats._discrete_distns.binom_gen._entropy(self,n,p)
scipy.stats._discrete_distns.binom_gen._get_support(self,n,p)
scipy.stats._discrete_distns.binom_gen._isf(self,x,n,p)
scipy.stats._discrete_distns.binom_gen._logpmf(self,x,n,p)
scipy.stats._discrete_distns.binom_gen._pmf(self,x,n,p)
scipy.stats._discrete_distns.binom_gen._ppf(self,q,n,p)
scipy.stats._discrete_distns.binom_gen._rvs(self,n,p,size=None,random_state=None)
scipy.stats._discrete_distns.binom_gen._sf(self,x,n,p)
scipy.stats._discrete_distns.binom_gen._shape_info(self)
scipy.stats._discrete_distns.binom_gen._stats(self,n,p,moments='mv')
scipy.stats._discrete_distns.boltzmann_gen(rv_discrete)
scipy.stats._discrete_distns.boltzmann_gen._argcheck(self,lambda_,N)
scipy.stats._discrete_distns.boltzmann_gen._cdf(self,x,lambda_,N)
scipy.stats._discrete_distns.boltzmann_gen._get_support(self,lambda_,N)
scipy.stats._discrete_distns.boltzmann_gen._pmf(self,k,lambda_,N)
scipy.stats._discrete_distns.boltzmann_gen._ppf(self,q,lambda_,N)
scipy.stats._discrete_distns.boltzmann_gen._shape_info(self)
scipy.stats._discrete_distns.boltzmann_gen._stats(self,lambda_,N)
scipy.stats._discrete_distns.dlaplace_gen(rv_discrete)
scipy.stats._discrete_distns.dlaplace_gen._cdf(self,x,a)
scipy.stats._discrete_distns.dlaplace_gen._entropy(self,a)
scipy.stats._discrete_distns.dlaplace_gen._pmf(self,k,a)
scipy.stats._discrete_distns.dlaplace_gen._ppf(self,q,a)
scipy.stats._discrete_distns.dlaplace_gen._rvs(self,a,size=None,random_state=None)
scipy.stats._discrete_distns.dlaplace_gen._shape_info(self)
scipy.stats._discrete_distns.dlaplace_gen._stats(self,a)
scipy.stats._discrete_distns.geom_gen(rv_discrete)
scipy.stats._discrete_distns.geom_gen._argcheck(self,p)
scipy.stats._discrete_distns.geom_gen._cdf(self,x,p)
scipy.stats._discrete_distns.geom_gen._logpmf(self,k,p)
scipy.stats._discrete_distns.geom_gen._logsf(self,x,p)
scipy.stats._discrete_distns.geom_gen._pmf(self,k,p)
scipy.stats._discrete_distns.geom_gen._ppf(self,q,p)
scipy.stats._discrete_distns.geom_gen._rvs(self,p,size=None,random_state=None)
scipy.stats._discrete_distns.geom_gen._sf(self,x,p)
scipy.stats._discrete_distns.geom_gen._shape_info(self)
scipy.stats._discrete_distns.geom_gen._stats(self,p)
scipy.stats._discrete_distns.hypergeom_gen(rv_discrete)
scipy.stats._discrete_distns.hypergeom_gen._argcheck(self,M,n,N)
scipy.stats._discrete_distns.hypergeom_gen._cdf(self,k,M,n,N)
scipy.stats._discrete_distns.hypergeom_gen._entropy(self,M,n,N)
scipy.stats._discrete_distns.hypergeom_gen._get_support(self,M,n,N)
scipy.stats._discrete_distns.hypergeom_gen._logcdf(self,k,M,n,N)
scipy.stats._discrete_distns.hypergeom_gen._logpmf(self,k,M,n,N)
scipy.stats._discrete_distns.hypergeom_gen._logsf(self,k,M,n,N)
scipy.stats._discrete_distns.hypergeom_gen._pmf(self,k,M,n,N)
scipy.stats._discrete_distns.hypergeom_gen._rvs(self,M,n,N,size=None,random_state=None)
scipy.stats._discrete_distns.hypergeom_gen._sf(self,k,M,n,N)
scipy.stats._discrete_distns.hypergeom_gen._shape_info(self)
scipy.stats._discrete_distns.hypergeom_gen._stats(self,M,n,N)
scipy.stats._discrete_distns.logser_gen(rv_discrete)
scipy.stats._discrete_distns.logser_gen._argcheck(self,p)
scipy.stats._discrete_distns.logser_gen._pmf(self,k,p)
scipy.stats._discrete_distns.logser_gen._rvs(self,p,size=None,random_state=None)
scipy.stats._discrete_distns.logser_gen._shape_info(self)
scipy.stats._discrete_distns.logser_gen._stats(self,p)
scipy.stats._discrete_distns.nbinom_gen(rv_discrete)
scipy.stats._discrete_distns.nbinom_gen._argcheck(self,n,p)
scipy.stats._discrete_distns.nbinom_gen._cdf(self,x,n,p)
scipy.stats._discrete_distns.nbinom_gen._isf(self,x,n,p)
scipy.stats._discrete_distns.nbinom_gen._logcdf(self,x,n,p)
scipy.stats._discrete_distns.nbinom_gen._logpmf(self,x,n,p)
scipy.stats._discrete_distns.nbinom_gen._pmf(self,x,n,p)
scipy.stats._discrete_distns.nbinom_gen._ppf(self,q,n,p)
scipy.stats._discrete_distns.nbinom_gen._rvs(self,n,p,size=None,random_state=None)
scipy.stats._discrete_distns.nbinom_gen._sf(self,x,n,p)
scipy.stats._discrete_distns.nbinom_gen._shape_info(self)
scipy.stats._discrete_distns.nbinom_gen._stats(self,n,p)
scipy.stats._discrete_distns.nchypergeom_fisher_gen(_nchypergeom_gen)
scipy.stats._discrete_distns.nchypergeom_wallenius_gen(_nchypergeom_gen)
scipy.stats._discrete_distns.nhypergeom_gen(rv_discrete)
scipy.stats._discrete_distns.nhypergeom_gen._argcheck(self,M,n,r)
scipy.stats._discrete_distns.nhypergeom_gen._get_support(self,M,n,r)
scipy.stats._discrete_distns.nhypergeom_gen._logpmf(self,k,M,n,r)
scipy.stats._discrete_distns.nhypergeom_gen._pmf(self,k,M,n,r)
scipy.stats._discrete_distns.nhypergeom_gen._rvs(self,M,n,r,size=None,random_state=None)
scipy.stats._discrete_distns.nhypergeom_gen._shape_info(self)
scipy.stats._discrete_distns.nhypergeom_gen._stats(self,M,n,r)
scipy.stats._discrete_distns.planck_gen(rv_discrete)
scipy.stats._discrete_distns.planck_gen._argcheck(self,lambda_)
scipy.stats._discrete_distns.planck_gen._cdf(self,x,lambda_)
scipy.stats._discrete_distns.planck_gen._entropy(self,lambda_)
scipy.stats._discrete_distns.planck_gen._logsf(self,x,lambda_)
scipy.stats._discrete_distns.planck_gen._pmf(self,k,lambda_)
scipy.stats._discrete_distns.planck_gen._ppf(self,q,lambda_)
scipy.stats._discrete_distns.planck_gen._rvs(self,lambda_,size=None,random_state=None)
scipy.stats._discrete_distns.planck_gen._sf(self,x,lambda_)
scipy.stats._discrete_distns.planck_gen._shape_info(self)
scipy.stats._discrete_distns.planck_gen._stats(self,lambda_)
scipy.stats._discrete_distns.poisson_gen(rv_discrete)
scipy.stats._discrete_distns.poisson_gen._argcheck(self,mu)
scipy.stats._discrete_distns.poisson_gen._cdf(self,x,mu)
scipy.stats._discrete_distns.poisson_gen._logpmf(self,k,mu)
scipy.stats._discrete_distns.poisson_gen._pmf(self,k,mu)
scipy.stats._discrete_distns.poisson_gen._ppf(self,q,mu)
scipy.stats._discrete_distns.poisson_gen._rvs(self,mu,size=None,random_state=None)
scipy.stats._discrete_distns.poisson_gen._sf(self,x,mu)
scipy.stats._discrete_distns.poisson_gen._shape_info(self)
scipy.stats._discrete_distns.poisson_gen._stats(self,mu)
scipy.stats._discrete_distns.randint_gen(rv_discrete)
scipy.stats._discrete_distns.randint_gen._argcheck(self,low,high)
scipy.stats._discrete_distns.randint_gen._cdf(self,x,low,high)
scipy.stats._discrete_distns.randint_gen._entropy(self,low,high)
scipy.stats._discrete_distns.randint_gen._get_support(self,low,high)
scipy.stats._discrete_distns.randint_gen._pmf(self,k,low,high)
scipy.stats._discrete_distns.randint_gen._ppf(self,q,low,high)
scipy.stats._discrete_distns.randint_gen._rvs(self,low,high,size=None,random_state=None)
scipy.stats._discrete_distns.randint_gen._shape_info(self)
scipy.stats._discrete_distns.randint_gen._stats(self,low,high)
scipy.stats._discrete_distns.skellam_gen(rv_discrete)
scipy.stats._discrete_distns.skellam_gen._cdf(self,x,mu1,mu2)
scipy.stats._discrete_distns.skellam_gen._pmf(self,x,mu1,mu2)
scipy.stats._discrete_distns.skellam_gen._rvs(self,mu1,mu2,size=None,random_state=None)
scipy.stats._discrete_distns.skellam_gen._shape_info(self)
scipy.stats._discrete_distns.skellam_gen._stats(self,mu1,mu2)
scipy.stats._discrete_distns.yulesimon_gen(rv_discrete)
scipy.stats._discrete_distns.yulesimon_gen._argcheck(self,alpha)
scipy.stats._discrete_distns.yulesimon_gen._cdf(self,x,alpha)
scipy.stats._discrete_distns.yulesimon_gen._logpmf(self,x,alpha)
scipy.stats._discrete_distns.yulesimon_gen._logsf(self,x,alpha)
scipy.stats._discrete_distns.yulesimon_gen._pmf(self,x,alpha)
scipy.stats._discrete_distns.yulesimon_gen._rvs(self,alpha,size=None,random_state=None)
scipy.stats._discrete_distns.yulesimon_gen._sf(self,x,alpha)
scipy.stats._discrete_distns.yulesimon_gen._shape_info(self)
scipy.stats._discrete_distns.yulesimon_gen._stats(self,alpha)
scipy.stats._discrete_distns.zipf_gen(rv_discrete)
scipy.stats._discrete_distns.zipf_gen._argcheck(self,a)
scipy.stats._discrete_distns.zipf_gen._munp(self,n,a)
scipy.stats._discrete_distns.zipf_gen._pmf(self,k,a)
scipy.stats._discrete_distns.zipf_gen._rvs(self,a,size=None,random_state=None)
scipy.stats._discrete_distns.zipf_gen._shape_info(self)
scipy.stats._discrete_distns.zipfian_gen(rv_discrete)
scipy.stats._discrete_distns.zipfian_gen._argcheck(self,a,n)
scipy.stats._discrete_distns.zipfian_gen._cdf(self,k,a,n)
scipy.stats._discrete_distns.zipfian_gen._get_support(self,a,n)
scipy.stats._discrete_distns.zipfian_gen._pmf(self,k,a,n)
scipy.stats._discrete_distns.zipfian_gen._sf(self,k,a,n)
scipy.stats._discrete_distns.zipfian_gen._shape_info(self)
scipy.stats._discrete_distns.zipfian_gen._stats(self,a,n)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_morestats.py----------------------------------------
A:scipy.stats._morestats.Mean->namedtuple('Mean', ('statistic', 'minmax'))
A:scipy.stats._morestats.Variance->namedtuple('Variance', ('statistic', 'minmax'))
A:scipy.stats._morestats.Std_dev->namedtuple('Std_dev', ('statistic', 'minmax'))
A:scipy.stats._morestats.(m, v, s)->mvsdist(data)
A:scipy.stats._morestats.m_res->Mean(m.mean(), m.interval(alpha))
A:scipy.stats._morestats.v_res->Variance(v.mean(), v.interval(alpha))
A:scipy.stats._morestats.s_res->Std_dev(s.mean(), s.interval(alpha))
A:scipy.stats._morestats.x->x.flatten().flatten()
A:scipy.stats._morestats.n->numpy.int_(n)
A:scipy.stats._morestats.xbar->numpy.mean(x, axis=0)
A:scipy.stats._morestats.C->x.flatten().flatten().var()
A:scipy.stats._morestats.mdist->distributions.t(nm1, loc=xbar, scale=math.sqrt(C / nm1))
A:scipy.stats._morestats.sdist->distributions.gengamma(val, -2, scale=math.sqrt(fac))
A:scipy.stats._morestats.vdist->distributions.invgamma(val, scale=fac)
A:scipy.stats._morestats.S->numpy.cumsum(t)
A:scipy.stats._morestats.data->numpy.asarray(data)
A:scipy.stats._morestats.S[k]->numpy.sum(data ** k, axis=0)
A:scipy.stats._morestats.N->len(y)
A:scipy.stats._morestats.k2->kstat(data, n=2)
A:scipy.stats._morestats.k4->kstat(data, n=4)
A:scipy.stats._morestats.v->numpy.empty(n, dtype=np.float64)
A:scipy.stats._morestats.i->numpy.arange(np.floor(p * n) + 1)
A:scipy.stats._morestats.dist->dist.lower().lower()
A:scipy.stats._morestats.osm_uniform->_calc_uniform_order_statistic_medians(len(x))
A:scipy.stats._morestats.sparams->tuple(sparams)
A:scipy.stats._morestats.osm->dist.lower().lower().ppf(osm_uniform, *sparams)
A:scipy.stats._morestats.osr->sort(x)
A:scipy.stats._morestats.(slope, intercept, r, prob, _)->_stats_py.linregress(osm, osr)
A:scipy.stats._morestats.xmin->amin(osm)
A:scipy.stats._morestats.xmax->amax(osm)
A:scipy.stats._morestats.ymin->amin(x)
A:scipy.stats._morestats.ymax->amax(x)
A:scipy.stats._morestats.xvals->distributions.norm.ppf(osm_uniform)
A:scipy.stats._morestats.(r, prob)->_stats_py.pearsonr(xvals, yvals)
A:scipy.stats._morestats.svals->numpy.linspace(a, b, num=N)
A:scipy.stats._morestats.ppcc->numpy.empty_like(svals)
A:scipy.stats._morestats.(_, r2)->probplot(x, sval, dist=dist, fit=True)
A:scipy.stats._morestats.logdata->numpy.log(data)
A:scipy.stats._morestats.variance->numpy.var(data ** lmb / lmb, axis=0)
A:scipy.stats._morestats.lmplus->scipy.optimize.brentq(rootfunc, lmax, newlm, args=(x, target))
A:scipy.stats._morestats.lmminus->scipy.optimize.brentq(rootfunc, newlm, lmax, args=(x, target))
A:scipy.stats._morestats.lmax->yeojohnson_normmax(x)
A:scipy.stats._morestats.y->y.flatten().flatten()
A:scipy.stats._morestats.interval->_boxcox_conf_interval(x, lmax, alpha)
A:scipy.stats._morestats.yvals->numpy.sort(y)
A:scipy.stats._morestats.maxlog->numpy.empty(2, dtype=float)
A:scipy.stats._morestats.maxlog[0]->_pearsonr(x)
A:scipy.stats._morestats.maxlog[1]->_mle(x)
A:scipy.stats._morestats.res->sqrt(-2 * log(R))
A:scipy.stats._morestats.lmbdas->numpy.linspace(la, lb, num=N)
A:scipy.stats._morestats.z->numpy.asarray(_mood_inner_lc(xy, x, diffs, sorted_xy, n, m, N, axis=axis))
A:scipy.stats._morestats.(_, (_, _, r))->probplot(z, dist='norm', fit=True)
A:scipy.stats._morestats.out->numpy.zeros_like(x)
A:scipy.stats._morestats.out[pos]->numpy.log1p(x[pos])
A:scipy.stats._morestats.trans->_yeojohnson_transform(data, lmb)
A:scipy.stats._morestats.trans_var->_yeojohnson_transform(data, lmb).var(axis=0)
A:scipy.stats._morestats.loglike->numpy.empty_like(trans_var)
A:scipy.stats._morestats.llf->yeojohnson_llf(lmbda, data)
A:scipy.stats._morestats.ShapiroResult->namedtuple('ShapiroResult', ('statistic', 'pvalue'))
A:scipy.stats._morestats.a->numpy.concatenate(([0], a))
A:scipy.stats._morestats.(a, w, pw, ifault)->_statlib.swilk(y, a[:N // 2], init)
A:scipy.stats._morestats._Avals_norm->array([0.576, 0.656, 0.787, 0.918, 1.092])
A:scipy.stats._morestats._Avals_expon->array([0.922, 1.078, 1.341, 1.606, 1.957])
A:scipy.stats._morestats._Avals_gumbel->array([0.474, 0.637, 0.757, 0.877, 1.038])
A:scipy.stats._morestats._Avals_logistic->array([0.426, 0.563, 0.66, 0.769, 0.906, 1.01])
A:scipy.stats._morestats.AndersonResult->_make_tuple_bunch('AndersonResult', ['statistic', 'critical_values', 'significance_level'], ['fit_result'])
A:scipy.stats._morestats.s->numpy.sort(samples[i])
A:scipy.stats._morestats.logcdf->distributions.gumbel_l.logcdf(w)
A:scipy.stats._morestats.logsf->distributions.gumbel_l.logsf(w)
A:scipy.stats._morestats.sig->numpy.array([0.25, 0.1, 0.05, 0.025, 0.01, 0.005, 0.001])
A:scipy.stats._morestats.critical->around(_Avals_gumbel / (1.0 + 0.2 / sqrt(N)), 3)
A:scipy.stats._morestats.tmp2->exp(tmp)
A:scipy.stats._morestats.sol0->array([xbar, np.std(x, ddof=1, axis=0)])
A:scipy.stats._morestats.sol->scipy.optimize.fsolve(rootfunc, sol0, args=(x, N), xtol=1e-05)
A:scipy.stats._morestats.(xbar, s)->distributions.gumbel_l.fit(x)
A:scipy.stats._morestats.res.x->numpy.array(fit_params)
A:scipy.stats._morestats.fit_result->FitResult(getattr(distributions, dist), y, discrete=False, res=res)
A:scipy.stats._morestats.Z_ssorted_left->numpy.sort(np.hstack(samples)).searchsorted(Zstar, 'left')
A:scipy.stats._morestats.s_ssorted_right->numpy.sort(samples[i]).searchsorted(Zstar, side='right')
A:scipy.stats._morestats.Mij->numpy.sort(samples[i]).searchsorted(Zstar[:-1], side='right')
A:scipy.stats._morestats.Bj->lj.cumsum()
A:scipy.stats._morestats.Anderson_ksampResult->_make_tuple_bunch('Anderson_ksampResult', ['statistic', 'critical_values', 'pvalue'], [])
A:scipy.stats._morestats.k->len(uniques)
A:scipy.stats._morestats.samples->numpy.moveaxis(samples, axis, 0)
A:scipy.stats._morestats.Z->numpy.sort(np.hstack(samples))
A:scipy.stats._morestats.Zstar->numpy.unique(Z)
A:scipy.stats._morestats.A2kN->_anderson_ksamp_right(samples, Z, Zstar, k, n, N)
A:scipy.stats._morestats.H->(1.0 / n).sum()
A:scipy.stats._morestats.hs_cs->(1.0 / arange(N - 1, 1, -1)).cumsum()
A:scipy.stats._morestats.g->unique(r_[0, g, len(x)])
A:scipy.stats._morestats.b0->numpy.array([0.675, 1.281, 1.645, 1.96, 2.326, 2.573, 3.085])
A:scipy.stats._morestats.b1->numpy.array([-0.245, 0.25, 0.678, 1.149, 1.822, 2.364, 3.615])
A:scipy.stats._morestats.b2->numpy.array([-0.105, -0.305, -0.362, -0.391, -0.396, -0.345, -0.154])
A:scipy.stats._morestats.p->math.exp(np.polyval(pf, A2))
A:scipy.stats._morestats.pf->numpy.polyfit(critical, log(sig), 2)
A:scipy.stats._morestats.AnsariResult->namedtuple('AnsariResult', ('statistic', 'pvalue'))
A:scipy.stats._morestats.(astart, a1, _)->_statlib.gscale(n, m)
A:scipy.stats._morestats.self.freqs->a1.astype(np.float64)
A:scipy.stats._morestats.self.total->self.freqs.sum()
A:scipy.stats._morestats.ind->numpy.floor(k - self.astart).astype(int)
A:scipy.stats._morestats._abw_state->_ABW()
A:scipy.stats._morestats.m->len(y)
A:scipy.stats._morestats.rank->_stats_py.rankdata(xy)
A:scipy.stats._morestats.symrank->amin(array((rank, N - rank + 1)), 0)
A:scipy.stats._morestats.AB->numpy.sum(symrank[:n], axis=0)
A:scipy.stats._morestats.uxy->unique(xy)
A:scipy.stats._morestats.pval->distributions.chi2.sf(Xsq, k - 1)
A:scipy.stats._morestats.fac->numpy.sum(symrank ** 2, axis=0)
A:scipy.stats._morestats.(z, pval)->_normtest_finish(z, alternative)
A:scipy.stats._morestats.BartlettResult->namedtuple('BartlettResult', ('statistic', 'pvalue'))
A:scipy.stats._morestats.Ni->asarray([len(samples[j]) for j in range(k)])
A:scipy.stats._morestats.ssq->numpy.empty(k, 'd')
A:scipy.stats._morestats.Ni[j]->len(samples[j])
A:scipy.stats._morestats.ssq[j]->numpy.var(samples[j], ddof=1)
A:scipy.stats._morestats.Ntot->numpy.sum(Ni, axis=0)
A:scipy.stats._morestats.LeveneResult->namedtuple('LeveneResult', ('statistic', 'pvalue'))
A:scipy.stats._morestats.Yci->asarray([func(samples[j]) for j in range(k)])
A:scipy.stats._morestats.Yci[j]->func(samples[j])
A:scipy.stats._morestats.Zij[i]->abs(asarray(samples[i]) - Yci[i])
A:scipy.stats._morestats.Zbari->numpy.empty(k, 'd')
A:scipy.stats._morestats.Zbari[i]->numpy.mean(Zij[i], axis=0)
A:scipy.stats._morestats.d->compress(np.not_equal(d, 0), d)
A:scipy.stats._morestats.FlignerResult->namedtuple('FlignerResult', ('statistic', 'pvalue'))
A:scipy.stats._morestats.ranks->_stats_py.rankdata(allZij)
A:scipy.stats._morestats.sample->distributions.norm.ppf(ranks / (2 * (Ntot + 1.0)) + 0.5)
A:scipy.stats._morestats.anbar->numpy.mean(sample, axis=0)
A:scipy.stats._morestats.varsq->numpy.var(sample, axis=0, ddof=1)
A:scipy.stats._morestats.diffs_prep->numpy.concatenate(([1], diffs))
A:scipy.stats._morestats.js->numpy.arange(1, k + 1, dtype=int)
A:scipy.stats._morestats.sorted_xyx->numpy.sort(np.concatenate((xy, x)))
A:scipy.stats._morestats.diffs->numpy.diff(sorted_xy, axis=axis)
A:scipy.stats._morestats.diff_is_zero->numpy.asarray(diffs_prep != 0, dtype=int)
A:scipy.stats._morestats.t->numpy.concatenate(([0], t))
A:scipy.stats._morestats.S_i_m1->numpy.concatenate(([0], S[:-1]))
A:scipy.stats._morestats.T->min(r_plus, r_minus)
A:scipy.stats._morestats.res_shape->tuple([x.shape[ax] for ax in range(len(x.shape)) if ax != axis])
A:scipy.stats._morestats.xy->xy.reshape(xy.shape[0], -1).reshape(xy.shape[0], -1)
A:scipy.stats._morestats.sorted_xy->numpy.sort(xy, axis=axis)
A:scipy.stats._morestats.all_ranks->numpy.empty_like(xy)
A:scipy.stats._morestats.all_ranks[:, j]->_stats_py.rankdata(xy[:, j])
A:scipy.stats._morestats.M->numpy.sum((Ri - (N + 1.0) / 2) ** 2, axis=0)
A:scipy.stats._morestats.WilcoxonResult->_make_tuple_bunch('WilcoxonResult', ['statistic', 'pvalue'])
A:scipy.stats._morestats.method->kwds.get('method', 'auto')
A:scipy.stats._morestats.(x, y)->map(asarray, (x, y))
A:scipy.stats._morestats.n_zero->numpy.sum(d == 0)
A:scipy.stats._morestats.count->len(d)
A:scipy.stats._morestats.r->_stats_py.rankdata(abs(d))
A:scipy.stats._morestats.r_plus->int(r_plus)
A:scipy.stats._morestats.r_minus->numpy.sum((d < 0) * r)
A:scipy.stats._morestats.r_zero->numpy.sum((d == 0) * r)
A:scipy.stats._morestats.(replist, repnum)->find_repeats(r)
A:scipy.stats._morestats.se->sqrt(se / 24)
A:scipy.stats._morestats.prob->numpy.clip(prob, 0, 1)
A:scipy.stats._morestats.pmf->_get_wilcoxon_distr(count)
A:scipy.stats._morestats.p_less->numpy.sum(pmf[:r_plus + 1])
A:scipy.stats._morestats.p_greater->numpy.sum(pmf[r_plus:])
A:scipy.stats._morestats.MedianTestResult->_make_tuple_bunch('MedianTestResult', ['statistic', 'pvalue', 'median', 'table'], [])
A:scipy.stats._morestats.cdata->numpy.concatenate(data)
A:scipy.stats._morestats.(contains_nan, nan_policy)->_contains_nan(samples, nan_policy)
A:scipy.stats._morestats.grand_median->numpy.median(cdata)
A:scipy.stats._morestats.table->numpy.zeros((2, len(data)), dtype=np.int64)
A:scipy.stats._morestats.nabove->count_nonzero(sample > grand_median)
A:scipy.stats._morestats.nbelow->count_nonzero(sample < grand_median)
A:scipy.stats._morestats.rowsums->numpy.zeros((2, len(data)), dtype=np.int64).sum(axis=1)
A:scipy.stats._morestats.(stat, p, dof, expected)->chi2_contingency(table, lambda_=lambda_, correction=correction)
A:scipy.stats._morestats.sin_samp->sin((samples - low) * 2.0 * pi / (high - low))
A:scipy.stats._morestats.cos_samp->cos((samples - low) * 2.0 * pi / (high - low))
A:scipy.stats._morestats.mask->numpy.isnan(samples)
A:scipy.stats._morestats.(samples, sin_samp, cos_samp, nmask)->_circfuncs_common(samples, high, low, nan_policy=nan_policy)
A:scipy.stats._morestats.sin_sum->sin((samples - low) * 2.0 * pi / (high - low)).sum(axis=axis)
A:scipy.stats._morestats.cos_sum->cos((samples - low) * 2.0 * pi / (high - low)).sum(axis=axis)
A:scipy.stats._morestats.(samples, sin_samp, cos_samp, mask)->_circfuncs_common(samples, high, low, nan_policy=nan_policy)
A:scipy.stats._morestats.sin_mean->sin((samples - low) * 2.0 * pi / (high - low)).mean(axis=axis)
A:scipy.stats._morestats.cos_mean->cos((samples - low) * 2.0 * pi / (high - low)).mean(axis=axis)
A:scipy.stats._morestats.nsum->numpy.asarray(np.sum(~mask, axis=axis).astype(float))
A:scipy.stats._morestats.R->numpy.minimum(1, hypot(sin_mean, cos_mean))
A:scipy.stats._morestats.vectornorms->numpy.linalg.norm(samples, axis=-1, keepdims=True)
A:scipy.stats._morestats.mean->numpy.mean(samples, axis=0)
A:scipy.stats._morestats.mean_resultant_length->numpy.linalg.norm(mean, axis=-1, keepdims=True)
scipy.stats.DirectionalStats(self,mean_direction,mean_resultant_length)
scipy.stats.DirectionalStats.__repr__(self)
scipy.stats._ABW(self)
scipy.stats._ABW._recalc(self,n,m)
scipy.stats._ABW.cdf(self,k,n,m)
scipy.stats._ABW.pmf(self,k,n,m)
scipy.stats._ABW.sf(self,k,n,m)
scipy.stats._add_axis_labels_title(plot,xlabel,ylabel,title)
scipy.stats._anderson_ksamp_midrank(samples,Z,Zstar,k,n,N)
scipy.stats._anderson_ksamp_right(samples,Z,Zstar,k,n,N)
scipy.stats._apply_func(x,g,func)
scipy.stats._boxcox_conf_interval(x,lmax,alpha)
scipy.stats._calc_uniform_order_statistic_medians(n)
scipy.stats._circfuncs_common(samples,high,low,nan_policy='propagate')
scipy.stats._mood_inner_lc(xy,x,diffs,sorted_xy,n,m,N)->float
scipy.stats._morestats.DirectionalStats(self,mean_direction,mean_resultant_length)
scipy.stats._morestats.DirectionalStats.__init__(self,mean_direction,mean_resultant_length)
scipy.stats._morestats.DirectionalStats.__repr__(self)
scipy.stats._morestats._ABW(self)
scipy.stats._morestats._ABW.__init__(self)
scipy.stats._morestats._ABW._recalc(self,n,m)
scipy.stats._morestats._ABW.cdf(self,k,n,m)
scipy.stats._morestats._ABW.pmf(self,k,n,m)
scipy.stats._morestats._ABW.sf(self,k,n,m)
scipy.stats._morestats._add_axis_labels_title(plot,xlabel,ylabel,title)
scipy.stats._morestats._anderson_ksamp_midrank(samples,Z,Zstar,k,n,N)
scipy.stats._morestats._anderson_ksamp_right(samples,Z,Zstar,k,n,N)
scipy.stats._morestats._apply_func(x,g,func)
scipy.stats._morestats._boxcox_conf_interval(x,lmax,alpha)
scipy.stats._morestats._calc_uniform_order_statistic_medians(n)
scipy.stats._morestats._circfuncs_common(samples,high,low,nan_policy='propagate')
scipy.stats._morestats._mood_inner_lc(xy,x,diffs,sorted_xy,n,m,N)->float
scipy.stats._morestats._normplot(method,x,la,lb,plot=None,N=80)
scipy.stats._morestats._parse_dist_kw(dist,enforce_subclass=True)
scipy.stats._morestats._yeojohnson_transform(x,lmbda)
scipy.stats._morestats.anderson(x,dist='norm')
scipy.stats._morestats.anderson_ksamp(samples,midrank=True)
scipy.stats._morestats.ansari(x,y,alternative='two-sided')
scipy.stats._morestats.bartlett(*samples)
scipy.stats._morestats.bayes_mvs(data,alpha=0.9)
scipy.stats._morestats.binom_test(x,n=None,p=0.5,alternative='two-sided')
scipy.stats._morestats.boxcox(x,lmbda=None,alpha=None,optimizer=None)
scipy.stats._morestats.boxcox_llf(lmb,data)
scipy.stats._morestats.boxcox_normmax(x,brack=None,method='pearsonr',optimizer=None)
scipy.stats._morestats.boxcox_normplot(x,la,lb,plot=None,N=80)
scipy.stats._morestats.circmean(samples,high=2*pi,low=0,axis=None,nan_policy='propagate')
scipy.stats._morestats.circstd(samples,high=2*pi,low=0,axis=None,nan_policy='propagate',*,normalize=False)
scipy.stats._morestats.circvar(samples,high=2*pi,low=0,axis=None,nan_policy='propagate')
scipy.stats._morestats.directional_stats(samples,*,axis=0,normalize=True)
scipy.stats._morestats.fligner(*samples,center='median',proportiontocut=0.05)
scipy.stats._morestats.kstat(data,n=2)
scipy.stats._morestats.kstatvar(data,n=2)
scipy.stats._morestats.levene(*samples,center='median',proportiontocut=0.05)
scipy.stats._morestats.median_test(*samples,ties='below',correction=True,lambda_=1,nan_policy='propagate')
scipy.stats._morestats.mood(x,y,axis=0,alternative='two-sided')
scipy.stats._morestats.mvsdist(data)
scipy.stats._morestats.ppcc_max(x,brack=(0.0,1.0),dist='tukeylambda')
scipy.stats._morestats.ppcc_plot(x,a,b,dist='tukeylambda',plot=None,N=80)
scipy.stats._morestats.probplot(x,sparams=(),dist='norm',fit=True,plot=None,rvalue=False)
scipy.stats._morestats.shapiro(x)
scipy.stats._morestats.wilcoxon(x,y=None,zero_method='wilcox',correction=False,alternative='two-sided',method='auto')
scipy.stats._morestats.wilcoxon_outputs(kwds)
scipy.stats._morestats.wilcoxon_result_object(statistic,pvalue,zstatistic=None)
scipy.stats._morestats.wilcoxon_result_unpacker(res)
scipy.stats._morestats.yeojohnson(x,lmbda=None)
scipy.stats._morestats.yeojohnson_llf(lmb,data)
scipy.stats._morestats.yeojohnson_normmax(x,brack=(-2,2))
scipy.stats._morestats.yeojohnson_normplot(x,la,lb,plot=None,N=80)
scipy.stats._normplot(method,x,la,lb,plot=None,N=80)
scipy.stats._parse_dist_kw(dist,enforce_subclass=True)
scipy.stats._yeojohnson_transform(x,lmbda)
scipy.stats.anderson(x,dist='norm')
scipy.stats.anderson_ksamp(samples,midrank=True)
scipy.stats.ansari(x,y,alternative='two-sided')
scipy.stats.bartlett(*samples)
scipy.stats.bayes_mvs(data,alpha=0.9)
scipy.stats.binom_test(x,n=None,p=0.5,alternative='two-sided')
scipy.stats.boxcox(x,lmbda=None,alpha=None,optimizer=None)
scipy.stats.boxcox_llf(lmb,data)
scipy.stats.boxcox_normmax(x,brack=None,method='pearsonr',optimizer=None)
scipy.stats.boxcox_normplot(x,la,lb,plot=None,N=80)
scipy.stats.circmean(samples,high=2*pi,low=0,axis=None,nan_policy='propagate')
scipy.stats.circstd(samples,high=2*pi,low=0,axis=None,nan_policy='propagate',*,normalize=False)
scipy.stats.circvar(samples,high=2*pi,low=0,axis=None,nan_policy='propagate')
scipy.stats.directional_stats(samples,*,axis=0,normalize=True)
scipy.stats.fligner(*samples,center='median',proportiontocut=0.05)
scipy.stats.kstat(data,n=2)
scipy.stats.kstatvar(data,n=2)
scipy.stats.levene(*samples,center='median',proportiontocut=0.05)
scipy.stats.median_test(*samples,ties='below',correction=True,lambda_=1,nan_policy='propagate')
scipy.stats.mood(x,y,axis=0,alternative='two-sided')
scipy.stats.mvsdist(data)
scipy.stats.ppcc_max(x,brack=(0.0,1.0),dist='tukeylambda')
scipy.stats.ppcc_plot(x,a,b,dist='tukeylambda',plot=None,N=80)
scipy.stats.probplot(x,sparams=(),dist='norm',fit=True,plot=None,rvalue=False)
scipy.stats.shapiro(x)
scipy.stats.wilcoxon(x,y=None,zero_method='wilcox',correction=False,alternative='two-sided',method='auto')
scipy.stats.wilcoxon_outputs(kwds)
scipy.stats.wilcoxon_result_object(statistic,pvalue,zstatistic=None)
scipy.stats.wilcoxon_result_unpacker(res)
scipy.stats.yeojohnson(x,lmbda=None)
scipy.stats.yeojohnson_llf(lmb,data)
scipy.stats.yeojohnson_normmax(x,brack=(-2,2))
scipy.stats.yeojohnson_normplot(x,la,lb,plot=None,N=80)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_mstats_basic.py----------------------------------------
A:scipy.stats._mstats_basic.a->a.ravel().ravel()
A:scipy.stats._mstats_basic.b->numpy.ma.asanyarray(b)
A:scipy.stats._mstats_basic.output->argstoarray(*args)
A:scipy.stats._mstats_basic.n->a.ravel().ravel().count(axis=axis)
A:scipy.stats._mstats_basic.m->argstoarray(*args).astype(float).mean(0)
A:scipy.stats._mstats_basic.compr->compr.copy().copy()
A:scipy.stats._mstats_basic.need_copy->numpy.may_share_memory(compr, arr)
A:scipy.stats._mstats_basic.nmasked->numpy.ma.getmask(x).sum()
A:scipy.stats._mstats_basic.data->argstoarray(*args).astype(float)
A:scipy.stats._mstats_basic.(ties, counts)->find_repeats(data)
A:scipy.stats._mstats_basic.nties->dict(zip(np.unique(counts), itertools.repeat(1)))
A:scipy.stats._mstats_basic.rk->numpy.empty(data.size, dtype=float)
A:scipy.stats._mstats_basic.idx->a.ravel().ravel().argsort()
A:scipy.stats._mstats_basic.rk[idx[:n]]->numpy.arange(1, n + 1)
A:scipy.stats._mstats_basic.repeats->find_repeats(data.copy())
A:scipy.stats._mstats_basic.condition->(data == r).filled(False)
A:scipy.stats._mstats_basic.rk[condition]->rk[condition].mean().mean()
A:scipy.stats._mstats_basic.ModeResult->namedtuple('ModeResult', ('mode', 'count'))
A:scipy.stats._mstats_basic.(a, axis)->_chk_asarray(a, axis)
A:scipy.stats._mstats_basic.(rep, cnt)->find_repeats(a)
A:scipy.stats._mstats_basic.newshape->list(a.shape)
A:scipy.stats._mstats_basic.modes->output[tuple(slices)].reshape(newshape)
A:scipy.stats._mstats_basic.counts->output[tuple(slices)].reshape(newshape)
A:scipy.stats._mstats_basic.x->numpy.ma.asarray(x).compressed().view(ndarray)
A:scipy.stats._mstats_basic.(x, y, n)->_chk_size(x, y)
A:scipy.stats._mstats_basic.(x, axisout)->_chk_asarray(x, axis)
A:scipy.stats._mstats_basic.(y, _)->_chk_asarray(y, axis)
A:scipy.stats._mstats_basic.res->scipy.stats._stats_py.SignificanceResult(tau, prob)
A:scipy.stats._mstats_basic.x_ranked->rankdata(x, axis=0)
A:scipy.stats._mstats_basic.(t, prob)->scipy.stats._stats_py._ttest_finish(df, t, alternative)
A:scipy.stats._mstats_basic.rs->numpy.ones((n_vars, n_vars), dtype=float)
A:scipy.stats._mstats_basic.prob->scipy.special.fdtrc(dfbg, dfwg, f)
A:scipy.stats._mstats_basic.result->stats_linregress(x.data, y.data)
A:scipy.stats._mstats_basic.c->int(min(c, n * (n - 1) // 2 - c))
A:scipy.stats._mstats_basic.new->numpy.zeros(c + 1)
A:scipy.stats._mstats_basic.y->numpy.ma.asarray(y).compressed().view(ndarray)
A:scipy.stats._mstats_basic.rx->numpy.ma.masked_equal(rankdata(x, use_missing=use_missing), 0)
A:scipy.stats._mstats_basic.ry->numpy.ma.masked_equal(rankdata(y, use_missing=use_missing), 0)
A:scipy.stats._mstats_basic.C->numpy.sum([((ry[i + 1:] > ry[i]) * (rx[i + 1:] > rx[i])).filled(0).sum() for i in range(len(ry) - 1)], dtype=float)
A:scipy.stats._mstats_basic.D->numpy.sum([((ry[i + 1:] < ry[i]) * (rx[i + 1:] > rx[i])).filled(0).sum() for i in range(len(ry) - 1)], dtype=float)
A:scipy.stats._mstats_basic.xties->count_tied_groups(x)
A:scipy.stats._mstats_basic.yties->count_tied_groups(y)
A:scipy.stats._mstats_basic.corr_x->numpy.sum([v * k * (k - 1) for (k, v) in xties.items()], dtype=float)
A:scipy.stats._mstats_basic.corr_y->numpy.sum([v * k * (k - 1) for (k, v) in yties.items()], dtype=float)
A:scipy.stats._mstats_basic.denom->numpy.ma.sqrt(v / n)
A:scipy.stats._mstats_basic.(_, prob)->scipy.stats._stats_py._normtest_finish(z, alternative)
A:scipy.stats._mstats_basic.n_p->numpy.ma.asarray(x).compressed().view(ndarray).count(0)
A:scipy.stats._mstats_basic.S_szn->sum((msign(x[i:] - x[i]).sum(0) for i in range(n)))
A:scipy.stats._mstats_basic.S_tot->sum((msign(x[i:] - x[i]).sum(0) for i in range(n))).sum()
A:scipy.stats._mstats_basic.n_tot->numpy.ma.asarray(x).compressed().view(ndarray).count()
A:scipy.stats._mstats_basic.ties->numpy.array([y for (x, y) in repeats if x.size > 0])
A:scipy.stats._mstats_basic.corr_ties->sum((v * k * (k - 1) for (k, v) in ties.items()))
A:scipy.stats._mstats_basic.R->rankdata(x, axis=0, use_missing=True)
A:scipy.stats._mstats_basic.K->numpy.ma.empty((m, m), dtype=int)
A:scipy.stats._mstats_basic.covmat->numpy.ma.empty((m, m), dtype=float)
A:scipy.stats._mstats_basic.denom_szn->numpy.ma.empty(m, dtype=float)
A:scipy.stats._mstats_basic.ties_j->count_tied_groups(x[:, j].compressed())
A:scipy.stats._mstats_basic.corr_j->sum((v * k * (k - 1) for (k, v) in ties_j.items()))
A:scipy.stats._mstats_basic.K[j, k]->sum((msign((x[i:, j] - x[i, j]) * (x[i:, k] - x[i, k])).sum() for i in range(n)))
A:scipy.stats._mstats_basic.var_szn->numpy.ma.empty((m, m), dtype=float).diagonal()
A:scipy.stats._mstats_basic.prob_szn->scipy.special.erfc(abs(z_szn) / np.sqrt(2))
A:scipy.stats._mstats_basic.prob_tot_ind->scipy.special.erfc(abs(z_tot_ind) / np.sqrt(2))
A:scipy.stats._mstats_basic.prob_tot_dep->scipy.special.erfc(abs(z_tot_dep) / np.sqrt(2))
A:scipy.stats._mstats_basic.chi2_tot->(z_szn * z_szn).sum()
A:scipy.stats._mstats_basic.PointbiserialrResult->namedtuple('PointbiserialrResult', ('correlation', 'pvalue'))
A:scipy.stats._mstats_basic.unmask->numpy.logical_not(m)
A:scipy.stats._mstats_basic.y0m->y0.mean()
A:scipy.stats._mstats_basic.y1m->y1.mean()
A:scipy.stats._mstats_basic.SenSeasonalSlopesResult->_make_tuple_bunch('SenSeasonalSlopesResult', ['intra_slope', 'inter_slope'])
A:scipy.stats._mstats_basic.szn_slopes->numpy.ma.vstack([(x[i + 1:] - x[i]) / np.arange(1, n - i)[:, None] for i in range(n)])
A:scipy.stats._mstats_basic.szn_medslopes->numpy.ma.median(szn_slopes, axis=0)
A:scipy.stats._mstats_basic.medslope->numpy.ma.median(szn_slopes, axis=None)
A:scipy.stats._mstats_basic.Ttest_1sampResult->namedtuple('Ttest_1sampResult', ('statistic', 'pvalue'))
A:scipy.stats._mstats_basic.v->argstoarray(*args).astype(float).var(axis=0, ddof=1)
A:scipy.stats._mstats_basic.df->numpy.ma.asanyarray(n - 1.0)
A:scipy.stats._mstats_basic.Ttest_indResult->namedtuple('Ttest_indResult', ('statistic', 'pvalue'))
A:scipy.stats._mstats_basic.(a, b, axis)->_chk2_asarray(a, b, axis)
A:scipy.stats._mstats_basic.Ttest_relResult->namedtuple('Ttest_relResult', ('statistic', 'pvalue'))
A:scipy.stats._mstats_basic.d->(a - b).astype('d')
A:scipy.stats._mstats_basic.dm->(a - b).astype('d').mean(axis)
A:scipy.stats._mstats_basic.MannwhitneyuResult->namedtuple('MannwhitneyuResult', ('statistic', 'pvalue'))
A:scipy.stats._mstats_basic.ranks->numpy.ma.masked_equal(rankdata(output, use_missing=False), 0)
A:scipy.stats._mstats_basic.U->max(U, nx * ny - U)
A:scipy.stats._mstats_basic.KruskalResult->namedtuple('KruskalResult', ('statistic', 'pvalue'))
A:scipy.stats._mstats_basic.sumrk->numpy.ma.masked_equal(rankdata(output, use_missing=False), 0).sum(-1)
A:scipy.stats._mstats_basic.ngrp->numpy.ma.masked_equal(rankdata(output, use_missing=False), 0).count(-1)
A:scipy.stats._mstats_basic.ntot->argstoarray(*args).astype(float).count()
A:scipy.stats._mstats_basic.alternative->{'t': 'two-sided', 'g': 'greater', 'l': 'less'}.get(alternative.lower()[0], alternative)
A:scipy.stats._mstats_basic.lowidx->min(lowidx, n - nan_count - 1)
A:scipy.stats._mstats_basic.out->trima(a, limits=limits, inclusive=inclusive)
A:scipy.stats._mstats_basic.winstd->a.ravel().ravel().std(ddof=1)
A:scipy.stats._mstats_basic.am->trima(a.ravel(), limits, inclusive)
A:scipy.stats._mstats_basic.sd->numpy.sqrt(am.var(axis=axis, ddof=ddof))
A:scipy.stats._mstats_basic.nan_count->numpy.count_nonzero(np.isnan(a))
A:scipy.stats._mstats_basic.(contains_nan, nan_policy)->_contains_nan(a, nan_policy)
A:scipy.stats._mstats_basic.moment_shape->list(a.shape)
A:scipy.stats._mstats_basic.mean->a.ravel().ravel().mean(axis, keepdims=True)
A:scipy.stats._mstats_basic.shape->list(a.shape)
A:scipy.stats._mstats_basic.s->a_zero_mean.copy()
A:scipy.stats._mstats_basic.m2->numpy.extract(can_correct, m2)
A:scipy.stats._mstats_basic.m3->numpy.extract(can_correct, m3)
A:scipy.stats._mstats_basic.vals->numpy.ma.where(zero, 0, m4 / m2 ** 2.0)
A:scipy.stats._mstats_basic.m4->numpy.extract(can_correct, m4)
A:scipy.stats._mstats_basic.DescribeResult->namedtuple('DescribeResult', ('nobs', 'minmax', 'mean', 'variance', 'skewness', 'kurtosis'))
A:scipy.stats._mstats_basic.sk->skew(a, axis, bias=bias)
A:scipy.stats._mstats_basic.kurt->kurtosis(a, axis, bias=bias)
A:scipy.stats._mstats_basic.k->len(data)
A:scipy.stats._mstats_basic.SkewtestResult->namedtuple('SkewtestResult', ('statistic', 'pvalue'))
A:scipy.stats._mstats_basic.b2->kurtosis(a, axis, fisher=False)
A:scipy.stats._mstats_basic.alpha->numpy.ma.sqrt(2.0 / (W2 - 1))
A:scipy.stats._mstats_basic.KurtosistestResult->namedtuple('KurtosistestResult', ('statistic', 'pvalue'))
A:scipy.stats._mstats_basic.term2->numpy.ma.where(denom > 0, ma.power((1 - 2.0 / A) / denom, 1 / 3.0), -ma.power(-(1 - 2.0 / A) / denom, 1 / 3.0))
A:scipy.stats._mstats_basic.NormaltestResult->namedtuple('NormaltestResult', ('statistic', 'pvalue'))
A:scipy.stats._mstats_basic.(s, _)->skewtest(a, axis)
A:scipy.stats._mstats_basic.(k, _)->kurtosistest(a, axis)
A:scipy.stats._mstats_basic.gamma->(aleph - k).clip(0, 1)
A:scipy.stats._mstats_basic.p->distributions.norm.cdf(wbfn)
A:scipy.stats._mstats_basic.plpos->numpy.empty(data.size, dtype=float)
A:scipy.stats._mstats_basic.F_onewayResult->namedtuple('F_onewayResult', ('statistic', 'pvalue'))
A:scipy.stats._mstats_basic.ngroups->len(data)
A:scipy.stats._mstats_basic.ssbg->numpy.sum((ranked.sum(-1) - n * (k + 1) / 2.0) ** 2)
A:scipy.stats._mstats_basic.FriedmanchisquareResult->namedtuple('FriedmanchisquareResult', ('statistic', 'pvalue'))
A:scipy.stats._mstats_basic.ranked->ranked.compressed().reshape(k, -1).view(ndarray).compressed().reshape(k, -1).view(ndarray)
A:scipy.stats._mstats_basic.BrunnerMunzelResult->namedtuple('BrunnerMunzelResult', ('statistic', 'pvalue'))
A:scipy.stats._mstats_basic.nx->len(x)
A:scipy.stats._mstats_basic.ny->len(y)
A:scipy.stats._mstats_basic.rankc->rankdata(np.concatenate((x, y)))
A:scipy.stats._mstats_basic.rankcx_mean->numpy.mean(rankcx)
A:scipy.stats._mstats_basic.rankcy_mean->numpy.mean(rankcy)
A:scipy.stats._mstats_basic.rankx->rankdata(x)
A:scipy.stats._mstats_basic.ranky->rankdata(y)
A:scipy.stats._mstats_basic.rankx_mean->numpy.mean(rankx)
A:scipy.stats._mstats_basic.ranky_mean->numpy.mean(ranky)
A:scipy.stats._mstats_basic.Sx->numpy.sum(np.power(rankcx - rankx - rankcx_mean + rankx_mean, 2.0))
A:scipy.stats._mstats_basic.Sy->numpy.sum(np.power(rankcy - ranky - rankcy_mean + ranky_mean, 2.0))
A:scipy.stats._mstats_basic.df_numer->numpy.power(nx * Sx + ny * Sy, 2.0)
scipy.stats._mstats_basic._betai(a,b,x)
scipy.stats._mstats_basic._chk2_asarray(a,b,axis)
scipy.stats._mstats_basic._chk_asarray(a,axis)
scipy.stats._mstats_basic._chk_size(a,b)
scipy.stats._mstats_basic._kendall_p_exact(n,c,alternative='two-sided')
scipy.stats._mstats_basic._mask_to_limits(a,limits,inclusive)
scipy.stats._mstats_basic._mode(a,axis=0,keepdims=True)
scipy.stats._mstats_basic._moment(a,moment,axis,*,mean=None)
scipy.stats._mstats_basic.argstoarray(*args)
scipy.stats._mstats_basic.brunnermunzel(x,y,alternative='two-sided',distribution='t')
scipy.stats._mstats_basic.count_tied_groups(x,use_missing=False)
scipy.stats._mstats_basic.describe(a,axis=0,ddof=0,bias=True)
scipy.stats._mstats_basic.f_oneway(*args)
scipy.stats._mstats_basic.find_repeats(arr)
scipy.stats._mstats_basic.friedmanchisquare(*args)
scipy.stats._mstats_basic.kendalltau(x,y,use_ties=True,use_missing=False,method='auto',alternative='two-sided')
scipy.stats._mstats_basic.kendalltau_seasonal(x)
scipy.stats._mstats_basic.kruskal(*args)
scipy.stats._mstats_basic.ks_1samp(x,cdf,args=(),alternative='two-sided',method='auto')
scipy.stats._mstats_basic.ks_2samp(data1,data2,alternative='two-sided',method='auto')
scipy.stats._mstats_basic.kstest(data1,data2,args=(),alternative='two-sided',method='auto')
scipy.stats._mstats_basic.kurtosis(a,axis=0,fisher=True,bias=True)
scipy.stats._mstats_basic.kurtosistest(a,axis=0,alternative='two-sided')
scipy.stats._mstats_basic.linregress(x,y=None)
scipy.stats._mstats_basic.mannwhitneyu(x,y,use_continuity=True)
scipy.stats._mstats_basic.mode(a,axis=0)
scipy.stats._mstats_basic.moment(a,moment=1,axis=0)
scipy.stats._mstats_basic.mquantiles(a,prob=list([0.25,0.5,0.75]),alphap=0.4,betap=0.4,axis=None,limit=())
scipy.stats._mstats_basic.msign(x)
scipy.stats._mstats_basic.normaltest(a,axis=0)
scipy.stats._mstats_basic.obrientransform(*args)
scipy.stats._mstats_basic.pearsonr(x,y)
scipy.stats._mstats_basic.plotting_positions(data,alpha=0.4,beta=0.4)
scipy.stats._mstats_basic.pointbiserialr(x,y)
scipy.stats._mstats_basic.rankdata(data,axis=None,use_missing=False)
scipy.stats._mstats_basic.scoreatpercentile(data,per,limit=(),alphap=0.4,betap=0.4)
scipy.stats._mstats_basic.sem(a,axis=0,ddof=1)
scipy.stats._mstats_basic.sen_seasonal_slopes(x)
scipy.stats._mstats_basic.siegelslopes(y,x=None,method='hierarchical')
scipy.stats._mstats_basic.skew(a,axis=0,bias=True)
scipy.stats._mstats_basic.skewtest(a,axis=0,alternative='two-sided')
scipy.stats._mstats_basic.spearmanr(x,y=None,use_ties=True,axis=None,nan_policy='propagate',alternative='two-sided')
scipy.stats._mstats_basic.stde_median(data,axis=None)
scipy.stats._mstats_basic.theilslopes(y,x=None,alpha=0.95,method='separate')
scipy.stats._mstats_basic.tmax(a,upperlimit=None,axis=0,inclusive=True)
scipy.stats._mstats_basic.tmean(a,limits=None,inclusive=(True,True),axis=None)
scipy.stats._mstats_basic.tmin(a,lowerlimit=None,axis=0,inclusive=True)
scipy.stats._mstats_basic.trim(a,limits=None,inclusive=(True,True),relative=False,axis=None)
scipy.stats._mstats_basic.trima(a,limits=None,inclusive=(True,True))
scipy.stats._mstats_basic.trimboth(data,proportiontocut=0.2,inclusive=(True,True),axis=None)
scipy.stats._mstats_basic.trimmed_mean(a,limits=(0.1,0.1),inclusive=(1,1),relative=True,axis=None)
scipy.stats._mstats_basic.trimmed_std(a,limits=(0.1,0.1),inclusive=(1,1),relative=True,axis=None,ddof=0)
scipy.stats._mstats_basic.trimmed_stde(a,limits=(0.1,0.1),inclusive=(1,1),axis=None)
scipy.stats._mstats_basic.trimmed_var(a,limits=(0.1,0.1),inclusive=(1,1),relative=True,axis=None,ddof=0)
scipy.stats._mstats_basic.trimr(a,limits=None,inclusive=(True,True),axis=None)
scipy.stats._mstats_basic.trimtail(data,proportiontocut=0.2,tail='left',inclusive=(True,True),axis=None)
scipy.stats._mstats_basic.tsem(a,limits=None,inclusive=(True,True),axis=0,ddof=1)
scipy.stats._mstats_basic.ttest_1samp(a,popmean,axis=0,alternative='two-sided')
scipy.stats._mstats_basic.ttest_ind(a,b,axis=0,equal_var=True,alternative='two-sided')
scipy.stats._mstats_basic.ttest_rel(a,b,axis=0,alternative='two-sided')
scipy.stats._mstats_basic.tvar(a,limits=None,inclusive=(True,True),axis=0,ddof=1)
scipy.stats._mstats_basic.variation(a,axis=0,ddof=0)
scipy.stats._mstats_basic.winsorize(a,limits=None,inclusive=(True,True),inplace=False,axis=None,nan_policy='propagate')


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/mvn.py----------------------------------------
scipy.stats.mvn.__dir__()
scipy.stats.mvn.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_variation.py----------------------------------------
A:scipy.stats._variation.a_isnan->numpy.isnan(a)
A:scipy.stats._variation.all_nan->numpy.isnan(a).all(axis=axis, keepdims=True)
A:scipy.stats._variation.all_nan_full->numpy.broadcast_to(all_nan, a.shape)
A:scipy.stats._variation.is_const->_nan_allsame(a, axis=axis, keepdims=True)
A:scipy.stats._variation.a2->a.copy()
A:scipy.stats._variation.mean_a->a.mean(axis, keepdims=True)
A:scipy.stats._variation.std_a->a.std(axis, ddof=ddof, keepdims=True)
A:scipy.stats._variation.result->numpy.squeeze(result, axis=axis)
A:scipy.stats._variation.(a, axis)->_chk_asarray(a, axis)
A:scipy.stats._variation.axis->normalize_axis_index(axis, ndim=a.ndim)
A:scipy.stats._variation.(contains_nan, nan_policy)->_contains_nan(a, nan_policy)
A:scipy.stats._variation.shp->list(a.shape)
scipy.stats._variation._nanvariation(a,*,axis=0,ddof=0,keepdims=False)
scipy.stats._variation.variation(a,axis=0,nan_policy='propagate',ddof=0,*,keepdims=False)
scipy.stats.variation(a,axis=0,nan_policy='propagate',ddof=0,*,keepdims=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_resampling.py----------------------------------------
A:scipy.stats._resampling.z->set(range(np.sum(ns)))
A:scipy.stats._resampling.data->_broadcast_arrays(data, axis)
A:scipy.stats._resampling.batch_actual->min(batch, n_permutations - k)
A:scipy.stats._resampling.j->numpy.ones((batch_actual, n), dtype=bool)
A:scipy.stats._resampling.i->rng_integers(random_state, 0, n, (n_resamples, n))
A:scipy.stats._resampling.alpha->numpy.broadcast_to(alpha, shape)
A:scipy.stats._resampling.percentiles->numpy.zeros_like(alpha, dtype=np.float64)
A:scipy.stats._resampling.percentiles[indices]->numpy.percentile(theta_hat_b_i, alpha_i)
A:scipy.stats._resampling.percentile->_percentile_of_score(theta_hat_b, theta_hat, axis=-1)
A:scipy.stats._resampling.z0_hat->ndtri(percentile)
A:scipy.stats._resampling.broadcasted->_broadcast_arrays(samples, axis=-1)
A:scipy.stats._resampling.z_alpha->ndtri(alpha)
A:scipy.stats._resampling.alpha_1->ndtr(z0_hat + num1 / (1 - a_hat * num1))
A:scipy.stats._resampling.alpha_2->ndtr(z0_hat + num2 / (1 - a_hat * num2))
A:scipy.stats._resampling.statistic->_vectorize_statistic(statistic)
A:scipy.stats._resampling.axis_int->int(axis)
A:scipy.stats._resampling.n_samples->len(data)
A:scipy.stats._resampling.sample->numpy.moveaxis(sample, axis_int, -1)
A:scipy.stats._resampling.confidence_level_float->float(confidence_level)
A:scipy.stats._resampling.n_resamples_int->int(n_resamples)
A:scipy.stats._resampling.batch_iv->int(batch)
A:scipy.stats._resampling.method->method.lower().lower()
A:scipy.stats._resampling.random_state->check_random_state(random_state)
A:scipy.stats._resampling.BootstrapResult->make_dataclass('BootstrapResult', fields)
A:scipy.stats._resampling.args->_permutation_test_iv(data, statistic, permutation_type, vectorized, n_resamples, batch, alternative, axis, random_state)
A:scipy.stats._resampling.resample->_bootstrap_resample(sample, n_resamples=batch_actual, random_state=random_state)
A:scipy.stats._resampling.theta_hat_b->numpy.concatenate(theta_hat_b, axis=-1)
A:scipy.stats._resampling.ci_l->percentile_fun(theta_hat_b, interval[0] * 100)
A:scipy.stats._resampling.ci_u->percentile_fun(theta_hat_b, interval[1] * 100)
A:scipy.stats._resampling.theta_hat->statistic(*data, axis=-1)
A:scipy.stats._resampling.statistic_vectorized->_vectorize_statistic(statistic)
A:scipy.stats._resampling.alternative->alternative.lower().lower()
A:scipy.stats._resampling.MonteCarloTestResult->make_dataclass('MonteCarloTestResult', fields)
A:scipy.stats._resampling.resamples->rvs(size=(batch_actual, n_observations))
A:scipy.stats._resampling.null_distribution->numpy.concatenate(null_distribution, axis=0)
A:scipy.stats._resampling.pvalues_less->less(null_distribution, observed)
A:scipy.stats._resampling.pvalues_greater->greater(null_distribution, observed)
A:scipy.stats._resampling.pvalues->numpy.clip(pvalues, 0, 1)
A:scipy.stats._resampling.PermutationTestResult->make_dataclass('PermutationTestResult', attributes)
A:scipy.stats._resampling.x0->set(c)
A:scipy.stats._resampling.x->check_random_state(random_state).random(size=size)
A:scipy.stats._resampling.iterator->iter(iterable)
A:scipy.stats._resampling.batch->min(batch, n_permutations)
A:scipy.stats._resampling.indices->numpy.swapaxes(indices, 0, 1)
A:scipy.stats._resampling.permuted_indices->check_random_state(random_state).permuted(indices, axis=-1)
A:scipy.stats._resampling.n_obs_ic->numpy.cumsum(n_obs_i)
A:scipy.stats._resampling.n_max->numpy.prod([comb(n_obs_ic[i], n_obs_ic[i - 1]) for i in range(n_samples - 1, 0, -1)])
A:scipy.stats._resampling.perm_generator->product(*(permutations(range(n_obs_sample)) for i in range(n_samples)))
A:scipy.stats._resampling.data_batch->numpy.split(data_batch, n_obs_ic[:-1], axis=-1)
A:scipy.stats._resampling.batched_perm_generator->_pairings_permutations_gen(*args)
A:scipy.stats._resampling.data_batch[i]->numpy.moveaxis(data_batch[i], -2, 0)
A:scipy.stats._resampling.permutation_type->permutation_type.lower().lower()
A:scipy.stats._resampling.observed->statistic(*data, axis=-1)
A:scipy.stats._resampling.(null_distribution, n_resamples, exact_test)->calculate_null(*null_calculator_args)
A:scipy.stats._resampling.gamma->numpy.maximum(eps, np.abs(eps * observed))
scipy.stats._resampling._all_partitions_concatenated(ns)
scipy.stats._resampling._batch_generator(iterable,batch)
scipy.stats._resampling._bca_interval(data,statistic,axis,alpha,theta_hat_b,batch)
scipy.stats._resampling._bootstrap_iv(data,statistic,vectorized,paired,axis,confidence_level,n_resamples,batch,method,bootstrap_result,random_state)
scipy.stats._resampling._bootstrap_resample(sample,n_resamples=None,random_state=None)
scipy.stats._resampling._calculate_null_both(data,statistic,n_permutations,batch,random_state=None)
scipy.stats._resampling._calculate_null_pairings(data,statistic,n_permutations,batch,random_state=None)
scipy.stats._resampling._calculate_null_samples(data,statistic,n_permutations,batch,random_state=None)
scipy.stats._resampling._jackknife_resample(sample,batch=None)
scipy.stats._resampling._monte_carlo_test_iv(sample,rvs,statistic,vectorized,n_resamples,batch,alternative,axis)
scipy.stats._resampling._pairings_permutations_gen(n_permutations,n_samples,n_obs_sample,batch,random_state)
scipy.stats._resampling._percentile_along_axis(theta_hat_b,alpha)
scipy.stats._resampling._percentile_of_score(a,score,axis)
scipy.stats._resampling._permutation_test_iv(data,statistic,permutation_type,vectorized,n_resamples,batch,alternative,axis,random_state)
scipy.stats._resampling._vectorize_statistic(statistic)
scipy.stats._resampling.bootstrap(data,statistic,*,n_resamples=9999,batch=None,vectorized=None,paired=False,axis=0,confidence_level=0.95,method='BCa',bootstrap_result=None,random_state=None)
scipy.stats._resampling.monte_carlo_test(sample,rvs,statistic,*,vectorized=None,n_resamples=9999,batch=None,alternative='two-sided',axis=0)
scipy.stats._resampling.permutation_test(data,statistic,*,permutation_type='independent',vectorized=None,n_resamples=9999,batch=None,alternative='two-sided',axis=0,random_state=None)
scipy.stats.bootstrap(data,statistic,*,n_resamples=9999,batch=None,vectorized=None,paired=False,axis=0,confidence_level=0.95,method='BCa',bootstrap_result=None,random_state=None)
scipy.stats.monte_carlo_test(sample,rvs,statistic,*,vectorized=None,n_resamples=9999,batch=None,alternative='two-sided',axis=0)
scipy.stats.permutation_test(data,statistic,*,permutation_type='independent',vectorized=None,n_resamples=9999,batch=None,alternative='two-sided',axis=0,random_state=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_relative_risk.py----------------------------------------
A:scipy.stats._relative_risk.n->operator.index(n)
A:scipy.stats._relative_risk.z->ndtri(1 - alpha / 2)
A:scipy.stats._relative_risk.se->numpy.sqrt(1 / self.exposed_cases - 1 / self.exposed_total + 1 / self.control_cases - 1 / self.control_total)
A:scipy.stats._relative_risk.exposed_cases->_validate_int(exposed_cases, 0, 'exposed_cases')
A:scipy.stats._relative_risk.exposed_total->_validate_int(exposed_total, 1, 'exposed_total')
A:scipy.stats._relative_risk.control_cases->_validate_int(control_cases, 0, 'control_cases')
A:scipy.stats._relative_risk.control_total->_validate_int(control_total, 1, 'control_total')
scipy.stats._relative_risk.RelativeRiskResult
scipy.stats._relative_risk.RelativeRiskResult.confidence_interval(self,confidence_level=0.95)
scipy.stats._relative_risk._validate_int(n,bound,name)
scipy.stats._relative_risk.relative_risk(exposed_cases,exposed_total,control_cases,control_total)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/biasedurn.py----------------------------------------
scipy.stats.biasedurn.__dir__()
scipy.stats.biasedurn.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/distributions.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_mstats_extras.py----------------------------------------
A:scipy.stats._mstats_extras.xsorted->numpy.sort(data.compressed())
A:scipy.stats._mstats_extras.hd->numpy.empty((2, len(prob)), float_)
A:scipy.stats._mstats_extras._w->betacdf(vv, n * p, n * (1 - p))
A:scipy.stats._mstats_extras.hd_mean->numpy.dot(w, xsorted)
A:scipy.stats._mstats_extras.hd[1, i]->numpy.dot(w, (xsorted - hd_mean) ** 2)
A:scipy.stats._mstats_extras.data->numpy.ma.array(data, copy=False)
A:scipy.stats._mstats_extras.p->numpy.array(prob, copy=False, ndmin=1)
A:scipy.stats._mstats_extras.result->numpy.ma.apply_along_axis(_cihs_1D, axis, data, alpha)
A:scipy.stats._mstats_extras.n->numpy.ma.array(data, copy=False).count()
A:scipy.stats._mstats_extras.hdsd->numpy.empty(len(prob), float_)
A:scipy.stats._mstats_extras.mx_->numpy.zeros_like(xsorted)
A:scipy.stats._mstats_extras.mx_[1:]->numpy.cumsum(w * xsorted[:-1])
A:scipy.stats._mstats_extras.hdsd[i]->numpy.sqrt(mx_.var() * (n - 1))
A:scipy.stats._mstats_extras.trimmed->mstats.trimr(data, limits=limits, inclusive=inclusive, axis=axis)
A:scipy.stats._mstats_extras.tmean->mstats.trimr(data, limits=limits, inclusive=inclusive, axis=axis).mean(axis)
A:scipy.stats._mstats_extras.tstde->mstats.trimmed_stde(data, limits=limits, inclusive=inclusive, axis=axis)
A:scipy.stats._mstats_extras.tppf->scipy.stats.distributions.t.ppf(1 - alpha / 2.0, df)
A:scipy.stats._mstats_extras.prob->(np.array(p) * n + 0.5).astype(int_)
A:scipy.stats._mstats_extras.mj->numpy.empty(len(prob), float_)
A:scipy.stats._mstats_extras.C1->numpy.dot(W, data)
A:scipy.stats._mstats_extras.C2->numpy.dot(W, data ** 2)
A:scipy.stats._mstats_extras.mj[i]->numpy.sqrt(C2 - C1 ** 2)
A:scipy.stats._mstats_extras.alpha->min(alpha, 1 - alpha)
A:scipy.stats._mstats_extras.z->scipy.stats.distributions.norm.ppf(1 - alpha / 2.0)
A:scipy.stats._mstats_extras.xq->mstats.mquantiles(data, prob, alphap=0, betap=0, axis=axis)
A:scipy.stats._mstats_extras.smj->mjci(data, prob, axis=axis)
A:scipy.stats._mstats_extras.k->int(binom._ppf(alpha / 2.0, n, 0.5))
A:scipy.stats._mstats_extras.x->numpy.ma.array(data, copy=False).compressed()
A:scipy.stats._mstats_extras.(j, h)->divmod(n / 4.0 + 5 / 12.0, 1)
A:scipy.stats._mstats_extras.j->int(j)
A:scipy.stats._mstats_extras.points->numpy.array(points, copy=False, ndmin=1)
A:scipy.stats._mstats_extras.r->idealfourths(data, axis=None)
A:scipy.stats._mstats_extras.nhi->(data[:, None] <= points[None, :] + h).sum(0)
A:scipy.stats._mstats_extras.nlo->(data[:, None] < points[None, :] - h).sum(0)
scipy.stats._mstats_extras.compare_medians_ms(group_1,group_2,axis=None)
scipy.stats._mstats_extras.hdmedian(data,axis=-1,var=False)
scipy.stats._mstats_extras.hdquantiles(data,prob=list([0.25,0.5,0.75]),axis=None,var=False)
scipy.stats._mstats_extras.hdquantiles_sd(data,prob=list([0.25,0.5,0.75]),axis=None)
scipy.stats._mstats_extras.idealfourths(data,axis=None)
scipy.stats._mstats_extras.median_cihs(data,alpha=0.05,axis=None)
scipy.stats._mstats_extras.mjci(data,prob=[0.25,0.5,0.75],axis=None)
scipy.stats._mstats_extras.mquantiles_cimj(data,prob=[0.25,0.5,0.75],alpha=0.05,axis=None)
scipy.stats._mstats_extras.rsh(data,points=None)
scipy.stats._mstats_extras.trimmed_mean_ci(data,limits=(0.2,0.2),inclusive=(True,True),alpha=0.05,axis=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_multivariate.py----------------------------------------
A:scipy.stats._multivariate._LOG_2PI->numpy.log(2 * np.pi)
A:scipy.stats._multivariate._LOG_2->numpy.log(2)
A:scipy.stats._multivariate._LOG_PI->numpy.log(np.pi)
A:scipy.stats._multivariate.out->numpy.exp(self.logpmf(x, m, n))
A:scipy.stats._multivariate.t->spectrum.dtype.char.lower()
A:scipy.stats._multivariate.self._M->numpy.asarray(M)
A:scipy.stats._multivariate.(s, u)->scipy.linalg.eigh(M, lower=lower, check_finite=check_finite)
A:scipy.stats._multivariate.eps->_eigvalsh_to_eps(s, cond, rcond)
A:scipy.stats._multivariate.s_pinv->_pinv_1d(s, eps)
A:scipy.stats._multivariate.U->numpy.multiply(u, np.sqrt(s_pinv))
A:scipy.stats._multivariate.self.rank->len(d)
A:scipy.stats._multivariate.self.log_pdet->numpy.sum(np.log(d))
A:scipy.stats._multivariate.residual->numpy.linalg.norm(x @ self.V, axis=-1)
A:scipy.stats._multivariate.self._pinv->numpy.dot(self.U, self.U.T)
A:scipy.stats._multivariate.self._random_state->check_random_state(seed)
A:scipy.stats._multivariate.self._dist._random_state->check_random_state(seed)
A:scipy.stats._multivariate.self.__doc__->scipy._lib.doccer.docformat(self.__doc__)
A:scipy.stats._multivariate.(dim, mean, cov)->self._process_parameters_psd(None, mean, cov)
A:scipy.stats._multivariate.psd->_PSD(cov, allow_singular=allow_singular)
A:scipy.stats._multivariate.cov_object->_covariance.CovViaPSD(psd)
A:scipy.stats._multivariate.mean->numpy.zeros((numrows, numcols))
A:scipy.stats._multivariate.cov->numpy.diag(cov)
A:scipy.stats._multivariate.x->numpy.asarray(x)
A:scipy.stats._multivariate.maha->numpy.square(np.dot(dev, prec_U)).sum(axis=-1)
A:scipy.stats._multivariate.params->self._process_parameters(mean, cov, allow_singular)
A:scipy.stats._multivariate.(b, a)->numpy.broadcast_arrays(x, lower)
A:scipy.stats._multivariate.limits->numpy.concatenate((a, b), axis=-1)
A:scipy.stats._multivariate.cdf->self.cdf(x, lower_limit=lower_limit)
A:scipy.stats._multivariate.(dim, mean, cov_object)->self._process_parameters(mean, cov)
A:scipy.stats._multivariate.random_state->self._get_random_state(random_state)
A:scipy.stats._multivariate.multivariate_normal->multivariate_normal_gen()
A:scipy.stats._multivariate.self._dist->uniform_direction_gen(seed)
A:scipy.stats._multivariate.(self.dim, self.mean, self.cov_object)->self._dist._process_parameters(mean, cov, allow_singular)
A:scipy.stats._multivariate.method_frozen.__doc__->scipy._lib.doccer.docformat(method.__doc__, mhg_docdict_noparams)
A:scipy.stats._multivariate.method.__doc__->scipy._lib.doccer.docformat(method.__doc__, mhg_docdict_params)
A:scipy.stats._multivariate.rowcov->numpy.diag(rowcov)
A:scipy.stats._multivariate.colcov->numpy.diag(colcov)
A:scipy.stats._multivariate.X->self._dist._process_quantiles(X, self.dims)
A:scipy.stats._multivariate.roll_dev->numpy.moveaxis(X - mean, -1, 0)
A:scipy.stats._multivariate.scale_dev->numpy.tensordot(col_prec_rt.T, np.dot(roll_dev, row_prec_rt), 1)
A:scipy.stats._multivariate.(dims, mean, rowcov, colcov)->self._process_parameters(mean, rowcov, colcov)
A:scipy.stats._multivariate.rowpsd->_PSD(rowcov, allow_singular=False)
A:scipy.stats._multivariate.colpsd->_PSD(colcov, allow_singular=False)
A:scipy.stats._multivariate.size->numpy.atleast_1d(size)
A:scipy.stats._multivariate.rowchol->scipy.linalg.cholesky(rowcov, lower=True)
A:scipy.stats._multivariate.colchol->scipy.linalg.cholesky(colcov, lower=True)
A:scipy.stats._multivariate.std_norm->self._get_random_state(random_state).standard_normal(size=(dims[1], size, dims[0])).transpose(1, 2, 0)
A:scipy.stats._multivariate.matrix_normal->matrix_normal_gen()
A:scipy.stats._multivariate.(self.dims, self.mean, self.rowcov, self.colcov)->self._dist._process_parameters(mean, rowcov, colcov)
A:scipy.stats._multivariate.self.rowpsd->_PSD(self.rowcov, allow_singular=False)
A:scipy.stats._multivariate.self.colpsd->_PSD(self.colcov, allow_singular=False)
A:scipy.stats._multivariate.alpha->_dirichlet_check_parameters(alpha)
A:scipy.stats._multivariate.xk->numpy.array([1 - np.sum(x, 0)])
A:scipy.stats._multivariate.alphalt1->numpy.repeat(alphalt1, x.shape[-1], axis=-1).reshape(x.shape)
A:scipy.stats._multivariate.chk->numpy.logical_and(xeq0, alphalt1)
A:scipy.stats._multivariate.lnB->_lnB(alpha)
A:scipy.stats._multivariate.alpha0->numpy.sum(alpha)
A:scipy.stats._multivariate.dirichlet->dirichlet_gen()
A:scipy.stats._multivariate.self.alpha->_dirichlet_check_parameters(alpha)
A:scipy.stats._multivariate.scale->numpy.diag(scale)
A:scipy.stats._multivariate.n->numpy.sum(r)
A:scipy.stats._multivariate.shape->numpy.diag(shape)
A:scipy.stats._multivariate.log_det_x->numpy.empty(x.shape[-1])
A:scipy.stats._multivariate.scale_inv_x->numpy.empty(x.shape)
A:scipy.stats._multivariate.tr_scale_inv_x->numpy.empty(x.shape[-1])
A:scipy.stats._multivariate.(_, log_det_x[i])->self._cholesky_logdet(x[:, :, i])
A:scipy.stats._multivariate.scale_inv_x[:, :, i]->scipy.linalg.cho_solve((C, True), x[:, :, i])
A:scipy.stats._multivariate.tr_scale_inv_x[i]->scipy.linalg.cho_solve((C, True), x[:, :, i]).trace()
A:scipy.stats._multivariate.(dim, df, scale)->self._process_parameters(df, scale)
A:scipy.stats._multivariate.(C, log_det_scale)->self._cholesky_logdet(scale)
A:scipy.stats._multivariate.diag->numpy.diag(scale).diagonal()
A:scipy.stats._multivariate.covariances->self._get_random_state(random_state).normal(size=n * n_tril).reshape(shape + (n_tril,))
A:scipy.stats._multivariate.A->gammaln(t)
A:scipy.stats._multivariate.size_idx->tuple([slice(None, None, None)] * len(shape))
A:scipy.stats._multivariate.tril_idx->numpy.tril_indices(dim, k=-1)
A:scipy.stats._multivariate.diag_idx->numpy.diag_indices(dim)
A:scipy.stats._multivariate.CA->numpy.dot(C, A[index])
A:scipy.stats._multivariate.A[index]->numpy.dot(CA.T, CA)
A:scipy.stats._multivariate.(n, shape)->self._dist._process_size(size)
A:scipy.stats._multivariate.C->scipy.linalg.cholesky(inv_scale, lower=True)
A:scipy.stats._multivariate.(_, log_det_scale)->self._cholesky_logdet(scale)
A:scipy.stats._multivariate.c_decomp->scipy.linalg.cholesky(scale, lower=True)
A:scipy.stats._multivariate.wishart->wishart_gen()
A:scipy.stats._multivariate.(self.dim, self.df, self.scale)->self._dist._process_parameters(df, scale)
A:scipy.stats._multivariate.(self.C, self.log_det_scale)->self._dist._cholesky_logdet(self.scale)
A:scipy.stats._multivariate.a1->asarray(a)
A:scipy.stats._multivariate.(potrf, potri)->get_lapack_funcs(('potrf', 'potri'), (a1,))
A:scipy.stats._multivariate.(triu_rows, triu_cols)->numpy.triu_indices(a.shape[-2], k=1)
A:scipy.stats._multivariate.(a1[index], info)->potri(a1[index], lower=True, overwrite_c=False)
A:scipy.stats._multivariate.tr_scale_x_inv->numpy.empty(x.shape[-1])
A:scipy.stats._multivariate.(C, lower)->scipy.linalg.cho_factor(self.scale, lower=True)
A:scipy.stats._multivariate.tr_scale_x_inv[i]->numpy.dot(scale, x_inv[i]).trace()
A:scipy.stats._multivariate.eye->numpy.eye(self.dim)
A:scipy.stats._multivariate.trtrs->get_lapack_funcs('trtrs', (A,))
A:scipy.stats._multivariate.(CA, info)->trtrs(CA, eye, lower=True)
A:scipy.stats._multivariate.(L, lower)->scipy.linalg.cho_factor(scale, lower=True)
A:scipy.stats._multivariate.inv_scale->scipy.linalg.cho_solve((L, lower), eye)
A:scipy.stats._multivariate.invwishart->invwishart_gen()
A:scipy.stats._multivariate.self.inv_scale->scipy.linalg.cho_solve((C, lower), eye)
A:scipy.stats._multivariate.self.C->scipy.linalg.cholesky(self.inv_scale, lower=True)
A:scipy.stats._multivariate.p->numpy.array(p, dtype=np.float64, copy=True)
A:scipy.stats._multivariate.pcond->numpy.any(p < 0, axis=-1)
A:scipy.stats._multivariate.xx->numpy.asarray(x, dtype=np.int_)
A:scipy.stats._multivariate.cond->numpy.any(xx != x, axis=-1)
A:scipy.stats._multivariate.result->self._checkresult(result, xcond_, np.NINF)
A:scipy.stats._multivariate.(n, p, npcond)->self._process_parameters(n, p)
A:scipy.stats._multivariate.(x, xcond)->self._process_quantiles(x, n, p)
A:scipy.stats._multivariate.term2->numpy.sum(binom.pmf(x, n, p) * gammaln(x + 1), axis=(-1, -1 - new_axes_needed))
A:scipy.stats._multivariate.multinomial->multinomial_gen()
A:scipy.stats._multivariate.(self.n, self.p, self.npcond)->self._dist._process_parameters(n, p)
A:scipy.stats._multivariate.dim->self._process_parameters(dim)
A:scipy.stats._multivariate.H->numpy.empty(size + (dim, dim))
A:scipy.stats._multivariate.H[..., :, :]->numpy.eye(dim)
A:scipy.stats._multivariate.D->numpy.empty(size + (dim,))
A:scipy.stats._multivariate.norm2->numpy.matmul(xrow, xcol).squeeze((-2, -1))
A:scipy.stats._multivariate.x0->x[..., 0].copy()
A:scipy.stats._multivariate.D[..., n]->numpy.where(x0 != 0, np.sign(x0), 1)
A:scipy.stats._multivariate.special_ortho_group->special_ortho_group_gen()
A:scipy.stats._multivariate.self.dim->self._dist._process_parameters(dim)
A:scipy.stats._multivariate.z->check_random_state(random_state).multivariate_normal(np.zeros(dim), shape, size=size)
A:scipy.stats._multivariate.(q, r)->numpy.linalg.qr(z)
A:scipy.stats._multivariate.d->numpy.array(row, dtype=np.int64, copy=True).diagonal(offset=0, axis1=-2, axis2=-1)
A:scipy.stats._multivariate.ortho_group->ortho_group_gen()
A:scipy.stats._multivariate.eigs->numpy.asarray(eigs, dtype=float)
A:scipy.stats._multivariate.dd->math.sqrt(max(aij ** 2 - aiid * ajjd, 0))
A:scipy.stats._multivariate.(c, s)->self._givens_to_1(m[i, i], m[j, j], m[i, j])
A:scipy.stats._multivariate.mv->m.astype(int).ravel()
A:scipy.stats._multivariate.(dim, eigs)->self._process_parameters(eigs, tol=tol)
A:scipy.stats._multivariate.m->m.astype(int).astype(int)
A:scipy.stats._multivariate.random_correlation->random_correlation_gen()
A:scipy.stats._multivariate.(_, self.eigs)->self._dist._process_parameters(eigs, tol=self.tol)
A:scipy.stats._multivariate.unitary_group->unitary_group_gen()
A:scipy.stats._multivariate.(dim, loc, shape, df)->self._dist._process_parameters(loc, shape, df)
A:scipy.stats._multivariate.shape_info->_PSD(shape)
A:scipy.stats._multivariate.logpdf->self._logpdf(x, loc, shape_info.U, shape_info.log_pdet, df, dim, shape_info.rank)
A:scipy.stats._multivariate.B->gammaln(0.5 * df)
A:scipy.stats._multivariate.rng->check_random_state(random_state)
A:scipy.stats._multivariate.loc->loc.reshape(1).reshape(1)
A:scipy.stats._multivariate.self.shape_info->_PSD(shape, allow_singular=allow_singular)
A:scipy.stats._multivariate.multivariate_t->multivariate_t_gen()
A:scipy.stats._multivariate.(m, n)->numpy.broadcast_arrays(m, n)
A:scipy.stats._multivariate.M->numpy.ma.masked_array(M, mask=cond)
A:scipy.stats._multivariate.(x, m, n, M)->numpy.broadcast_arrays(x, m, n, M)
A:scipy.stats._multivariate.num->num.sum(axis=-1).sum(axis=-1)
A:scipy.stats._multivariate.den->numpy.zeros_like(n, dtype=np.float_)
A:scipy.stats._multivariate.(M, m, n, mcond, ncond, mncond)->self._process_parameters(m, n)
A:scipy.stats._multivariate.(x, M, m, n, xcond, xcond_reduced)->self._process_quantiles(x, M, m, n)
A:scipy.stats._multivariate.(M, m, n, _, _, mncond)->self._process_parameters(m, n)
A:scipy.stats._multivariate.(M, m, n, _, _, _)->self._process_parameters(m, n)
A:scipy.stats._multivariate.rvs->numpy.empty(size + (m.shape[-1],), dtype=m.dtype)
A:scipy.stats._multivariate.multivariate_hypergeom->multivariate_hypergeom_gen()
A:scipy.stats._multivariate.(self.M, self.m, self.n, self.mcond, self.ncond, self.mncond)->self._dist._process_parameters(m, n)
A:scipy.stats._multivariate.(r, c, n)->self._process_parameters(row, col)
A:scipy.stats._multivariate.dtype_is_int->numpy.issubdtype(x.dtype, np.integer)
A:scipy.stats._multivariate.r2->numpy.sum(x, axis=-1)
A:scipy.stats._multivariate.c2->numpy.sum(x, axis=-2)
A:scipy.stats._multivariate.res->numpy.empty(x.shape[:-2])
A:scipy.stats._multivariate.(size, shape)->self._process_size_shape(size, r, c)
A:scipy.stats._multivariate.meth->self._process_rvs_method(method, r, c, n)
A:scipy.stats._multivariate.r->numpy.array(row, dtype=np.int64, copy=True)
A:scipy.stats._multivariate.c->numpy.array(col, dtype=np.int64, copy=True)
A:scipy.stats._multivariate.random_table->random_table_gen()
A:scipy.stats._multivariate.self._params->self._dist._process_parameters(row, col)
A:scipy.stats._multivariate._ctab_docdict_frozen->_ctab_docdict.copy()
A:scipy.stats._multivariate.obj.__doc__->scipy._lib.doccer.docformat(template or obj.__doc__, docdict)
A:scipy.stats._multivariate.samples->self._get_random_state(random_state).standard_normal(samples_shape)
A:scipy.stats._multivariate.uniform_direction->uniform_direction_gen()
A:scipy.stats._multivariate.samples_shape->numpy.append(size, dim)
scipy.stats._PSD(self,M,cond=None,rcond=None,lower=True,check_finite=True,allow_singular=True)
scipy.stats._PSD._support_mask(self,x)
scipy.stats._PSD.pinv(self)
scipy.stats._cho_inv_batch(a,check_finite=True)
scipy.stats._dirichlet_check_input(alpha,x)
scipy.stats._dirichlet_check_parameters(alpha)
scipy.stats._docfill(obj,docdict,template=None)
scipy.stats._eigvalsh_to_eps(spectrum,cond=None,rcond=None)
scipy.stats._lnB(alpha)
scipy.stats._multivariate._PSD(self,M,cond=None,rcond=None,lower=True,check_finite=True,allow_singular=True)
scipy.stats._multivariate._PSD.__init__(self,M,cond=None,rcond=None,lower=True,check_finite=True,allow_singular=True)
scipy.stats._multivariate._PSD._support_mask(self,x)
scipy.stats._multivariate._PSD.pinv(self)
scipy.stats._multivariate._cho_inv_batch(a,check_finite=True)
scipy.stats._multivariate._dirichlet_check_input(alpha,x)
scipy.stats._multivariate._dirichlet_check_parameters(alpha)
scipy.stats._multivariate._docfill(obj,docdict,template=None)
scipy.stats._multivariate._eigvalsh_to_eps(spectrum,cond=None,rcond=None)
scipy.stats._multivariate._lnB(alpha)
scipy.stats._multivariate._pinv_1d(v,eps=1e-05)
scipy.stats._multivariate._sample_uniform_direction(dim,size,random_state)
scipy.stats._multivariate._squeeze_output(out)
scipy.stats._multivariate.dirichlet_frozen(self,alpha,seed=None)
scipy.stats._multivariate.dirichlet_frozen.__init__(self,alpha,seed=None)
scipy.stats._multivariate.dirichlet_frozen.entropy(self)
scipy.stats._multivariate.dirichlet_frozen.logpdf(self,x)
scipy.stats._multivariate.dirichlet_frozen.mean(self)
scipy.stats._multivariate.dirichlet_frozen.pdf(self,x)
scipy.stats._multivariate.dirichlet_frozen.rvs(self,size=1,random_state=None)
scipy.stats._multivariate.dirichlet_frozen.var(self)
scipy.stats._multivariate.dirichlet_gen(self,seed=None)
scipy.stats._multivariate.dirichlet_gen.__init__(self,seed=None)
scipy.stats._multivariate.dirichlet_gen._logpdf(self,x,alpha)
scipy.stats._multivariate.dirichlet_gen.entropy(self,alpha)
scipy.stats._multivariate.dirichlet_gen.logpdf(self,x,alpha)
scipy.stats._multivariate.dirichlet_gen.mean(self,alpha)
scipy.stats._multivariate.dirichlet_gen.pdf(self,x,alpha)
scipy.stats._multivariate.dirichlet_gen.rvs(self,alpha,size=1,random_state=None)
scipy.stats._multivariate.dirichlet_gen.var(self,alpha)
scipy.stats._multivariate.invwishart_frozen(self,df,scale,seed=None)
scipy.stats._multivariate.invwishart_frozen.__init__(self,df,scale,seed=None)
scipy.stats._multivariate.invwishart_frozen.entropy(self)
scipy.stats._multivariate.invwishart_frozen.logpdf(self,x)
scipy.stats._multivariate.invwishart_frozen.mean(self)
scipy.stats._multivariate.invwishart_frozen.mode(self)
scipy.stats._multivariate.invwishart_frozen.pdf(self,x)
scipy.stats._multivariate.invwishart_frozen.rvs(self,size=1,random_state=None)
scipy.stats._multivariate.invwishart_frozen.var(self)
scipy.stats._multivariate.invwishart_gen(self,seed=None)
scipy.stats._multivariate.invwishart_gen.__init__(self,seed=None)
scipy.stats._multivariate.invwishart_gen._logpdf(self,x,dim,df,scale,log_det_scale)
scipy.stats._multivariate.invwishart_gen._mean(self,dim,df,scale)
scipy.stats._multivariate.invwishart_gen._mode(self,dim,df,scale)
scipy.stats._multivariate.invwishart_gen._rvs(self,n,shape,dim,df,C,random_state)
scipy.stats._multivariate.invwishart_gen._var(self,dim,df,scale)
scipy.stats._multivariate.invwishart_gen.entropy(self)
scipy.stats._multivariate.invwishart_gen.logpdf(self,x,df,scale)
scipy.stats._multivariate.invwishart_gen.mean(self,df,scale)
scipy.stats._multivariate.invwishart_gen.mode(self,df,scale)
scipy.stats._multivariate.invwishart_gen.pdf(self,x,df,scale)
scipy.stats._multivariate.invwishart_gen.rvs(self,df,scale,size=1,random_state=None)
scipy.stats._multivariate.invwishart_gen.var(self,df,scale)
scipy.stats._multivariate.matrix_normal_frozen(self,mean=None,rowcov=1,colcov=1,seed=None)
scipy.stats._multivariate.matrix_normal_frozen.__init__(self,mean=None,rowcov=1,colcov=1,seed=None)
scipy.stats._multivariate.matrix_normal_frozen.logpdf(self,X)
scipy.stats._multivariate.matrix_normal_frozen.pdf(self,X)
scipy.stats._multivariate.matrix_normal_frozen.rvs(self,size=1,random_state=None)
scipy.stats._multivariate.matrix_normal_gen(self,seed=None)
scipy.stats._multivariate.matrix_normal_gen.__init__(self,seed=None)
scipy.stats._multivariate.matrix_normal_gen._logpdf(self,dims,X,mean,row_prec_rt,log_det_rowcov,col_prec_rt,log_det_colcov)
scipy.stats._multivariate.matrix_normal_gen._process_parameters(self,mean,rowcov,colcov)
scipy.stats._multivariate.matrix_normal_gen._process_quantiles(self,X,dims)
scipy.stats._multivariate.matrix_normal_gen.logpdf(self,X,mean=None,rowcov=1,colcov=1)
scipy.stats._multivariate.matrix_normal_gen.pdf(self,X,mean=None,rowcov=1,colcov=1)
scipy.stats._multivariate.matrix_normal_gen.rvs(self,mean=None,rowcov=1,colcov=1,size=1,random_state=None)
scipy.stats._multivariate.multi_rv_frozen
scipy.stats._multivariate.multi_rv_frozen.random_state(self)
scipy.stats._multivariate.multi_rv_frozen.random_state(self,seed)
scipy.stats._multivariate.multi_rv_generic(self,seed=None)
scipy.stats._multivariate.multi_rv_generic.__init__(self,seed=None)
scipy.stats._multivariate.multi_rv_generic._get_random_state(self,random_state)
scipy.stats._multivariate.multi_rv_generic.random_state(self)
scipy.stats._multivariate.multi_rv_generic.random_state(self,seed)
scipy.stats._multivariate.multinomial_frozen(self,n,p,seed=None)
scipy.stats._multivariate.multinomial_frozen.__init__(self,n,p,seed=None)
scipy.stats._multivariate.multinomial_frozen.cov(self)
scipy.stats._multivariate.multinomial_frozen.entropy(self)
scipy.stats._multivariate.multinomial_frozen.logpmf(self,x)
scipy.stats._multivariate.multinomial_frozen.mean(self)
scipy.stats._multivariate.multinomial_frozen.pmf(self,x)
scipy.stats._multivariate.multinomial_frozen.rvs(self,size=1,random_state=None)
scipy.stats._multivariate.multinomial_gen(self,seed=None)
scipy.stats._multivariate.multinomial_gen.__init__(self,seed=None)
scipy.stats._multivariate.multinomial_gen._checkresult(self,result,cond,bad_value)
scipy.stats._multivariate.multinomial_gen._logpmf(self,x,n,p)
scipy.stats._multivariate.multinomial_gen._process_parameters(self,n,p,eps=1e-15)
scipy.stats._multivariate.multinomial_gen._process_quantiles(self,x,n,p)
scipy.stats._multivariate.multinomial_gen.cov(self,n,p)
scipy.stats._multivariate.multinomial_gen.entropy(self,n,p)
scipy.stats._multivariate.multinomial_gen.logpmf(self,x,n,p)
scipy.stats._multivariate.multinomial_gen.mean(self,n,p)
scipy.stats._multivariate.multinomial_gen.pmf(self,x,n,p)
scipy.stats._multivariate.multinomial_gen.rvs(self,n,p,size=None,random_state=None)
scipy.stats._multivariate.multivariate_hypergeom_frozen(self,m,n,seed=None)
scipy.stats._multivariate.multivariate_hypergeom_frozen.__init__(self,m,n,seed=None)
scipy.stats._multivariate.multivariate_hypergeom_frozen.cov(self)
scipy.stats._multivariate.multivariate_hypergeom_frozen.logpmf(self,x)
scipy.stats._multivariate.multivariate_hypergeom_frozen.mean(self)
scipy.stats._multivariate.multivariate_hypergeom_frozen.pmf(self,x)
scipy.stats._multivariate.multivariate_hypergeom_frozen.rvs(self,size=1,random_state=None)
scipy.stats._multivariate.multivariate_hypergeom_frozen.var(self)
scipy.stats._multivariate.multivariate_hypergeom_gen(self,seed=None)
scipy.stats._multivariate.multivariate_hypergeom_gen.__init__(self,seed=None)
scipy.stats._multivariate.multivariate_hypergeom_gen._checkresult(self,result,cond,bad_value)
scipy.stats._multivariate.multivariate_hypergeom_gen._logpmf(self,x,M,m,n,mxcond,ncond)
scipy.stats._multivariate.multivariate_hypergeom_gen._process_parameters(self,m,n)
scipy.stats._multivariate.multivariate_hypergeom_gen._process_quantiles(self,x,M,m,n)
scipy.stats._multivariate.multivariate_hypergeom_gen.cov(self,m,n)
scipy.stats._multivariate.multivariate_hypergeom_gen.logpmf(self,x,m,n)
scipy.stats._multivariate.multivariate_hypergeom_gen.mean(self,m,n)
scipy.stats._multivariate.multivariate_hypergeom_gen.pmf(self,x,m,n)
scipy.stats._multivariate.multivariate_hypergeom_gen.rvs(self,m,n,size=None,random_state=None)
scipy.stats._multivariate.multivariate_hypergeom_gen.var(self,m,n)
scipy.stats._multivariate.multivariate_normal_frozen(self,mean=None,cov=1,allow_singular=False,seed=None,maxpts=None,abseps=1e-05,releps=1e-05)
scipy.stats._multivariate.multivariate_normal_frozen.__init__(self,mean=None,cov=1,allow_singular=False,seed=None,maxpts=None,abseps=1e-05,releps=1e-05)
scipy.stats._multivariate.multivariate_normal_frozen.cdf(self,x,*,lower_limit=None)
scipy.stats._multivariate.multivariate_normal_frozen.entropy(self)
scipy.stats._multivariate.multivariate_normal_frozen.logcdf(self,x,*,lower_limit=None)
scipy.stats._multivariate.multivariate_normal_frozen.logpdf(self,x)
scipy.stats._multivariate.multivariate_normal_frozen.pdf(self,x)
scipy.stats._multivariate.multivariate_normal_frozen.rvs(self,size=1,random_state=None)
scipy.stats._multivariate.multivariate_normal_gen(self,seed=None)
scipy.stats._multivariate.multivariate_normal_gen.__init__(self,seed=None)
scipy.stats._multivariate.multivariate_normal_gen._cdf(self,x,mean,cov,maxpts,abseps,releps,lower_limit)
scipy.stats._multivariate.multivariate_normal_gen._logpdf(self,x,mean,cov_object)
scipy.stats._multivariate.multivariate_normal_gen._process_parameters(self,mean,cov,allow_singular=True)
scipy.stats._multivariate.multivariate_normal_gen._process_parameters_Covariance(self,mean,cov)
scipy.stats._multivariate.multivariate_normal_gen._process_parameters_psd(self,dim,mean,cov)
scipy.stats._multivariate.multivariate_normal_gen._process_quantiles(self,x,dim)
scipy.stats._multivariate.multivariate_normal_gen.cdf(self,x,mean=None,cov=1,allow_singular=False,maxpts=None,abseps=1e-05,releps=1e-05,*,lower_limit=None)
scipy.stats._multivariate.multivariate_normal_gen.entropy(self,mean=None,cov=1)
scipy.stats._multivariate.multivariate_normal_gen.logcdf(self,x,mean=None,cov=1,allow_singular=False,maxpts=None,abseps=1e-05,releps=1e-05,*,lower_limit=None)
scipy.stats._multivariate.multivariate_normal_gen.logpdf(self,x,mean=None,cov=1,allow_singular=False)
scipy.stats._multivariate.multivariate_normal_gen.pdf(self,x,mean=None,cov=1,allow_singular=False)
scipy.stats._multivariate.multivariate_normal_gen.rvs(self,mean=None,cov=1,size=1,random_state=None)
scipy.stats._multivariate.multivariate_t_frozen(self,loc=None,shape=1,df=1,allow_singular=False,seed=None)
scipy.stats._multivariate.multivariate_t_frozen.__init__(self,loc=None,shape=1,df=1,allow_singular=False,seed=None)
scipy.stats._multivariate.multivariate_t_frozen.logpdf(self,x)
scipy.stats._multivariate.multivariate_t_frozen.pdf(self,x)
scipy.stats._multivariate.multivariate_t_frozen.rvs(self,size=1,random_state=None)
scipy.stats._multivariate.multivariate_t_gen(self,seed=None)
scipy.stats._multivariate.multivariate_t_gen.__init__(self,seed=None)
scipy.stats._multivariate.multivariate_t_gen._logpdf(self,x,loc,prec_U,log_pdet,df,dim,rank)
scipy.stats._multivariate.multivariate_t_gen._process_parameters(self,loc,shape,df)
scipy.stats._multivariate.multivariate_t_gen._process_quantiles(self,x,dim)
scipy.stats._multivariate.multivariate_t_gen.logpdf(self,x,loc=None,shape=1,df=1)
scipy.stats._multivariate.multivariate_t_gen.pdf(self,x,loc=None,shape=1,df=1,allow_singular=False)
scipy.stats._multivariate.multivariate_t_gen.rvs(self,loc=None,shape=1,df=1,size=1,random_state=None)
scipy.stats._multivariate.ortho_group_frozen(self,dim=None,seed=None)
scipy.stats._multivariate.ortho_group_frozen.__init__(self,dim=None,seed=None)
scipy.stats._multivariate.ortho_group_frozen.rvs(self,size=1,random_state=None)
scipy.stats._multivariate.ortho_group_gen(self,seed=None)
scipy.stats._multivariate.ortho_group_gen.__init__(self,seed=None)
scipy.stats._multivariate.ortho_group_gen._process_parameters(self,dim)
scipy.stats._multivariate.ortho_group_gen.rvs(self,dim,size=1,random_state=None)
scipy.stats._multivariate.random_correlation_frozen(self,eigs,seed=None,tol=1e-13,diag_tol=1e-07)
scipy.stats._multivariate.random_correlation_frozen.__init__(self,eigs,seed=None,tol=1e-13,diag_tol=1e-07)
scipy.stats._multivariate.random_correlation_frozen.rvs(self,random_state=None)
scipy.stats._multivariate.random_correlation_gen(self,seed=None)
scipy.stats._multivariate.random_correlation_gen.__init__(self,seed=None)
scipy.stats._multivariate.random_correlation_gen._givens_to_1(self,aii,ajj,aij)
scipy.stats._multivariate.random_correlation_gen._process_parameters(self,eigs,tol)
scipy.stats._multivariate.random_correlation_gen._to_corr(self,m)
scipy.stats._multivariate.random_correlation_gen.rvs(self,eigs,random_state=None,tol=1e-13,diag_tol=1e-07)
scipy.stats._multivariate.random_table_frozen(self,row,col,*,seed=None)
scipy.stats._multivariate.random_table_frozen.__init__(self,row,col,*,seed=None)
scipy.stats._multivariate.random_table_frozen.logpmf(self,x)
scipy.stats._multivariate.random_table_frozen.mean(self)
scipy.stats._multivariate.random_table_frozen.pmf(self,x)
scipy.stats._multivariate.random_table_frozen.rvs(self,size=None,method=None,random_state=None)
scipy.stats._multivariate.random_table_gen(self,seed=None)
scipy.stats._multivariate.random_table_gen.__init__(self,seed=None)
scipy.stats._multivariate.random_table_gen._process_parameters(row,col)
scipy.stats._multivariate.random_table_gen._process_rvs_method(cls,method,r,c,n)
scipy.stats._multivariate.random_table_gen._process_size_shape(size,r,c)
scipy.stats._multivariate.random_table_gen._rvs_boyett(row,col,ntot,size,random_state)
scipy.stats._multivariate.random_table_gen._rvs_patefield(row,col,ntot,size,random_state)
scipy.stats._multivariate.random_table_gen._rvs_select(cls,r,c,n)
scipy.stats._multivariate.random_table_gen.logpmf(self,x,row,col)
scipy.stats._multivariate.random_table_gen.mean(self,row,col)
scipy.stats._multivariate.random_table_gen.pmf(self,x,row,col)
scipy.stats._multivariate.random_table_gen.rvs(self,row,col,*,size=None,method=None,random_state=None)
scipy.stats._multivariate.special_ortho_group_frozen(self,dim=None,seed=None)
scipy.stats._multivariate.special_ortho_group_frozen.__init__(self,dim=None,seed=None)
scipy.stats._multivariate.special_ortho_group_frozen.rvs(self,size=1,random_state=None)
scipy.stats._multivariate.special_ortho_group_gen(self,seed=None)
scipy.stats._multivariate.special_ortho_group_gen.__init__(self,seed=None)
scipy.stats._multivariate.special_ortho_group_gen._process_parameters(self,dim)
scipy.stats._multivariate.special_ortho_group_gen.rvs(self,dim,size=1,random_state=None)
scipy.stats._multivariate.uniform_direction_frozen(self,dim=None,seed=None)
scipy.stats._multivariate.uniform_direction_frozen.__init__(self,dim=None,seed=None)
scipy.stats._multivariate.uniform_direction_frozen.rvs(self,size=None,random_state=None)
scipy.stats._multivariate.uniform_direction_gen(self,seed=None)
scipy.stats._multivariate.uniform_direction_gen.__init__(self,seed=None)
scipy.stats._multivariate.uniform_direction_gen._process_parameters(self,dim)
scipy.stats._multivariate.uniform_direction_gen.rvs(self,dim,size=None,random_state=None)
scipy.stats._multivariate.unitary_group_frozen(self,dim=None,seed=None)
scipy.stats._multivariate.unitary_group_frozen.__init__(self,dim=None,seed=None)
scipy.stats._multivariate.unitary_group_frozen.rvs(self,size=1,random_state=None)
scipy.stats._multivariate.unitary_group_gen(self,seed=None)
scipy.stats._multivariate.unitary_group_gen.__init__(self,seed=None)
scipy.stats._multivariate.unitary_group_gen._process_parameters(self,dim)
scipy.stats._multivariate.unitary_group_gen.rvs(self,dim,size=1,random_state=None)
scipy.stats._multivariate.wishart_frozen(self,df,scale,seed=None)
scipy.stats._multivariate.wishart_frozen.__init__(self,df,scale,seed=None)
scipy.stats._multivariate.wishart_frozen.entropy(self)
scipy.stats._multivariate.wishart_frozen.logpdf(self,x)
scipy.stats._multivariate.wishart_frozen.mean(self)
scipy.stats._multivariate.wishart_frozen.mode(self)
scipy.stats._multivariate.wishart_frozen.pdf(self,x)
scipy.stats._multivariate.wishart_frozen.rvs(self,size=1,random_state=None)
scipy.stats._multivariate.wishart_frozen.var(self)
scipy.stats._multivariate.wishart_gen(self,seed=None)
scipy.stats._multivariate.wishart_gen.__init__(self,seed=None)
scipy.stats._multivariate.wishart_gen._cholesky_logdet(self,scale)
scipy.stats._multivariate.wishart_gen._entropy(self,dim,df,log_det_scale)
scipy.stats._multivariate.wishart_gen._logpdf(self,x,dim,df,scale,log_det_scale,C)
scipy.stats._multivariate.wishart_gen._mean(self,dim,df,scale)
scipy.stats._multivariate.wishart_gen._mode(self,dim,df,scale)
scipy.stats._multivariate.wishart_gen._process_parameters(self,df,scale)
scipy.stats._multivariate.wishart_gen._process_quantiles(self,x,dim)
scipy.stats._multivariate.wishart_gen._process_size(self,size)
scipy.stats._multivariate.wishart_gen._rvs(self,n,shape,dim,df,C,random_state)
scipy.stats._multivariate.wishart_gen._standard_rvs(self,n,shape,dim,df,random_state)
scipy.stats._multivariate.wishart_gen._var(self,dim,df,scale)
scipy.stats._multivariate.wishart_gen.entropy(self,df,scale)
scipy.stats._multivariate.wishart_gen.logpdf(self,x,df,scale)
scipy.stats._multivariate.wishart_gen.mean(self,df,scale)
scipy.stats._multivariate.wishart_gen.mode(self,df,scale)
scipy.stats._multivariate.wishart_gen.pdf(self,x,df,scale)
scipy.stats._multivariate.wishart_gen.rvs(self,df,scale,size=1,random_state=None)
scipy.stats._multivariate.wishart_gen.var(self,df,scale)
scipy.stats._pinv_1d(v,eps=1e-05)
scipy.stats._sample_uniform_direction(dim,size,random_state)
scipy.stats._squeeze_output(out)
scipy.stats.dirichlet_frozen(self,alpha,seed=None)
scipy.stats.dirichlet_frozen.entropy(self)
scipy.stats.dirichlet_frozen.logpdf(self,x)
scipy.stats.dirichlet_frozen.mean(self)
scipy.stats.dirichlet_frozen.pdf(self,x)
scipy.stats.dirichlet_frozen.rvs(self,size=1,random_state=None)
scipy.stats.dirichlet_frozen.var(self)
scipy.stats.dirichlet_gen(self,seed=None)
scipy.stats.dirichlet_gen._logpdf(self,x,alpha)
scipy.stats.dirichlet_gen.entropy(self,alpha)
scipy.stats.dirichlet_gen.logpdf(self,x,alpha)
scipy.stats.dirichlet_gen.mean(self,alpha)
scipy.stats.dirichlet_gen.pdf(self,x,alpha)
scipy.stats.dirichlet_gen.rvs(self,alpha,size=1,random_state=None)
scipy.stats.dirichlet_gen.var(self,alpha)
scipy.stats.invwishart_frozen(self,df,scale,seed=None)
scipy.stats.invwishart_frozen.entropy(self)
scipy.stats.invwishart_frozen.logpdf(self,x)
scipy.stats.invwishart_frozen.mean(self)
scipy.stats.invwishart_frozen.mode(self)
scipy.stats.invwishart_frozen.pdf(self,x)
scipy.stats.invwishart_frozen.rvs(self,size=1,random_state=None)
scipy.stats.invwishart_frozen.var(self)
scipy.stats.invwishart_gen(self,seed=None)
scipy.stats.invwishart_gen._logpdf(self,x,dim,df,scale,log_det_scale)
scipy.stats.invwishart_gen._mean(self,dim,df,scale)
scipy.stats.invwishart_gen._mode(self,dim,df,scale)
scipy.stats.invwishart_gen._rvs(self,n,shape,dim,df,C,random_state)
scipy.stats.invwishart_gen._var(self,dim,df,scale)
scipy.stats.invwishart_gen.entropy(self)
scipy.stats.invwishart_gen.logpdf(self,x,df,scale)
scipy.stats.invwishart_gen.mean(self,df,scale)
scipy.stats.invwishart_gen.mode(self,df,scale)
scipy.stats.invwishart_gen.pdf(self,x,df,scale)
scipy.stats.invwishart_gen.rvs(self,df,scale,size=1,random_state=None)
scipy.stats.invwishart_gen.var(self,df,scale)
scipy.stats.matrix_normal_frozen(self,mean=None,rowcov=1,colcov=1,seed=None)
scipy.stats.matrix_normal_frozen.logpdf(self,X)
scipy.stats.matrix_normal_frozen.pdf(self,X)
scipy.stats.matrix_normal_frozen.rvs(self,size=1,random_state=None)
scipy.stats.matrix_normal_gen(self,seed=None)
scipy.stats.matrix_normal_gen._logpdf(self,dims,X,mean,row_prec_rt,log_det_rowcov,col_prec_rt,log_det_colcov)
scipy.stats.matrix_normal_gen._process_parameters(self,mean,rowcov,colcov)
scipy.stats.matrix_normal_gen._process_quantiles(self,X,dims)
scipy.stats.matrix_normal_gen.logpdf(self,X,mean=None,rowcov=1,colcov=1)
scipy.stats.matrix_normal_gen.pdf(self,X,mean=None,rowcov=1,colcov=1)
scipy.stats.matrix_normal_gen.rvs(self,mean=None,rowcov=1,colcov=1,size=1,random_state=None)
scipy.stats.multi_rv_frozen
scipy.stats.multi_rv_frozen.random_state(self)
scipy.stats.multi_rv_frozen.random_state(self,seed)
scipy.stats.multi_rv_generic(self,seed=None)
scipy.stats.multi_rv_generic._get_random_state(self,random_state)
scipy.stats.multi_rv_generic.random_state(self)
scipy.stats.multi_rv_generic.random_state(self,seed)
scipy.stats.multinomial_frozen(self,n,p,seed=None)
scipy.stats.multinomial_frozen.cov(self)
scipy.stats.multinomial_frozen.entropy(self)
scipy.stats.multinomial_frozen.logpmf(self,x)
scipy.stats.multinomial_frozen.mean(self)
scipy.stats.multinomial_frozen.pmf(self,x)
scipy.stats.multinomial_frozen.rvs(self,size=1,random_state=None)
scipy.stats.multinomial_gen(self,seed=None)
scipy.stats.multinomial_gen._checkresult(self,result,cond,bad_value)
scipy.stats.multinomial_gen._logpmf(self,x,n,p)
scipy.stats.multinomial_gen._process_parameters(self,n,p,eps=1e-15)
scipy.stats.multinomial_gen._process_quantiles(self,x,n,p)
scipy.stats.multinomial_gen.cov(self,n,p)
scipy.stats.multinomial_gen.entropy(self,n,p)
scipy.stats.multinomial_gen.logpmf(self,x,n,p)
scipy.stats.multinomial_gen.mean(self,n,p)
scipy.stats.multinomial_gen.pmf(self,x,n,p)
scipy.stats.multinomial_gen.rvs(self,n,p,size=None,random_state=None)
scipy.stats.multivariate_hypergeom_frozen(self,m,n,seed=None)
scipy.stats.multivariate_hypergeom_frozen.cov(self)
scipy.stats.multivariate_hypergeom_frozen.logpmf(self,x)
scipy.stats.multivariate_hypergeom_frozen.mean(self)
scipy.stats.multivariate_hypergeom_frozen.pmf(self,x)
scipy.stats.multivariate_hypergeom_frozen.rvs(self,size=1,random_state=None)
scipy.stats.multivariate_hypergeom_frozen.var(self)
scipy.stats.multivariate_hypergeom_gen(self,seed=None)
scipy.stats.multivariate_hypergeom_gen._checkresult(self,result,cond,bad_value)
scipy.stats.multivariate_hypergeom_gen._logpmf(self,x,M,m,n,mxcond,ncond)
scipy.stats.multivariate_hypergeom_gen._process_parameters(self,m,n)
scipy.stats.multivariate_hypergeom_gen._process_quantiles(self,x,M,m,n)
scipy.stats.multivariate_hypergeom_gen.cov(self,m,n)
scipy.stats.multivariate_hypergeom_gen.logpmf(self,x,m,n)
scipy.stats.multivariate_hypergeom_gen.mean(self,m,n)
scipy.stats.multivariate_hypergeom_gen.pmf(self,x,m,n)
scipy.stats.multivariate_hypergeom_gen.rvs(self,m,n,size=None,random_state=None)
scipy.stats.multivariate_hypergeom_gen.var(self,m,n)
scipy.stats.multivariate_normal_frozen(self,mean=None,cov=1,allow_singular=False,seed=None,maxpts=None,abseps=1e-05,releps=1e-05)
scipy.stats.multivariate_normal_frozen.cdf(self,x,*,lower_limit=None)
scipy.stats.multivariate_normal_frozen.entropy(self)
scipy.stats.multivariate_normal_frozen.logcdf(self,x,*,lower_limit=None)
scipy.stats.multivariate_normal_frozen.logpdf(self,x)
scipy.stats.multivariate_normal_frozen.pdf(self,x)
scipy.stats.multivariate_normal_frozen.rvs(self,size=1,random_state=None)
scipy.stats.multivariate_normal_gen(self,seed=None)
scipy.stats.multivariate_normal_gen._cdf(self,x,mean,cov,maxpts,abseps,releps,lower_limit)
scipy.stats.multivariate_normal_gen._logpdf(self,x,mean,cov_object)
scipy.stats.multivariate_normal_gen._process_parameters(self,mean,cov,allow_singular=True)
scipy.stats.multivariate_normal_gen._process_parameters_Covariance(self,mean,cov)
scipy.stats.multivariate_normal_gen._process_parameters_psd(self,dim,mean,cov)
scipy.stats.multivariate_normal_gen._process_quantiles(self,x,dim)
scipy.stats.multivariate_normal_gen.cdf(self,x,mean=None,cov=1,allow_singular=False,maxpts=None,abseps=1e-05,releps=1e-05,*,lower_limit=None)
scipy.stats.multivariate_normal_gen.entropy(self,mean=None,cov=1)
scipy.stats.multivariate_normal_gen.logcdf(self,x,mean=None,cov=1,allow_singular=False,maxpts=None,abseps=1e-05,releps=1e-05,*,lower_limit=None)
scipy.stats.multivariate_normal_gen.logpdf(self,x,mean=None,cov=1,allow_singular=False)
scipy.stats.multivariate_normal_gen.pdf(self,x,mean=None,cov=1,allow_singular=False)
scipy.stats.multivariate_normal_gen.rvs(self,mean=None,cov=1,size=1,random_state=None)
scipy.stats.multivariate_t_frozen(self,loc=None,shape=1,df=1,allow_singular=False,seed=None)
scipy.stats.multivariate_t_frozen.logpdf(self,x)
scipy.stats.multivariate_t_frozen.pdf(self,x)
scipy.stats.multivariate_t_frozen.rvs(self,size=1,random_state=None)
scipy.stats.multivariate_t_gen(self,seed=None)
scipy.stats.multivariate_t_gen._logpdf(self,x,loc,prec_U,log_pdet,df,dim,rank)
scipy.stats.multivariate_t_gen._process_parameters(self,loc,shape,df)
scipy.stats.multivariate_t_gen._process_quantiles(self,x,dim)
scipy.stats.multivariate_t_gen.logpdf(self,x,loc=None,shape=1,df=1)
scipy.stats.multivariate_t_gen.pdf(self,x,loc=None,shape=1,df=1,allow_singular=False)
scipy.stats.multivariate_t_gen.rvs(self,loc=None,shape=1,df=1,size=1,random_state=None)
scipy.stats.ortho_group_frozen(self,dim=None,seed=None)
scipy.stats.ortho_group_frozen.rvs(self,size=1,random_state=None)
scipy.stats.ortho_group_gen(self,seed=None)
scipy.stats.ortho_group_gen._process_parameters(self,dim)
scipy.stats.ortho_group_gen.rvs(self,dim,size=1,random_state=None)
scipy.stats.random_correlation_frozen(self,eigs,seed=None,tol=1e-13,diag_tol=1e-07)
scipy.stats.random_correlation_frozen.rvs(self,random_state=None)
scipy.stats.random_correlation_gen(self,seed=None)
scipy.stats.random_correlation_gen._givens_to_1(self,aii,ajj,aij)
scipy.stats.random_correlation_gen._process_parameters(self,eigs,tol)
scipy.stats.random_correlation_gen._to_corr(self,m)
scipy.stats.random_correlation_gen.rvs(self,eigs,random_state=None,tol=1e-13,diag_tol=1e-07)
scipy.stats.random_table_frozen(self,row,col,*,seed=None)
scipy.stats.random_table_frozen.logpmf(self,x)
scipy.stats.random_table_frozen.mean(self)
scipy.stats.random_table_frozen.pmf(self,x)
scipy.stats.random_table_frozen.rvs(self,size=None,method=None,random_state=None)
scipy.stats.random_table_gen(self,seed=None)
scipy.stats.random_table_gen._process_parameters(row,col)
scipy.stats.random_table_gen._process_rvs_method(cls,method,r,c,n)
scipy.stats.random_table_gen._process_size_shape(size,r,c)
scipy.stats.random_table_gen._rvs_boyett(row,col,ntot,size,random_state)
scipy.stats.random_table_gen._rvs_patefield(row,col,ntot,size,random_state)
scipy.stats.random_table_gen._rvs_select(cls,r,c,n)
scipy.stats.random_table_gen.logpmf(self,x,row,col)
scipy.stats.random_table_gen.mean(self,row,col)
scipy.stats.random_table_gen.pmf(self,x,row,col)
scipy.stats.random_table_gen.rvs(self,row,col,*,size=None,method=None,random_state=None)
scipy.stats.special_ortho_group_frozen(self,dim=None,seed=None)
scipy.stats.special_ortho_group_frozen.rvs(self,size=1,random_state=None)
scipy.stats.special_ortho_group_gen(self,seed=None)
scipy.stats.special_ortho_group_gen._process_parameters(self,dim)
scipy.stats.special_ortho_group_gen.rvs(self,dim,size=1,random_state=None)
scipy.stats.uniform_direction_frozen(self,dim=None,seed=None)
scipy.stats.uniform_direction_frozen.rvs(self,size=None,random_state=None)
scipy.stats.uniform_direction_gen(self,seed=None)
scipy.stats.uniform_direction_gen._process_parameters(self,dim)
scipy.stats.uniform_direction_gen.rvs(self,dim,size=None,random_state=None)
scipy.stats.unitary_group_frozen(self,dim=None,seed=None)
scipy.stats.unitary_group_frozen.rvs(self,size=1,random_state=None)
scipy.stats.unitary_group_gen(self,seed=None)
scipy.stats.unitary_group_gen._process_parameters(self,dim)
scipy.stats.unitary_group_gen.rvs(self,dim,size=1,random_state=None)
scipy.stats.wishart_frozen(self,df,scale,seed=None)
scipy.stats.wishart_frozen.entropy(self)
scipy.stats.wishart_frozen.logpdf(self,x)
scipy.stats.wishart_frozen.mean(self)
scipy.stats.wishart_frozen.mode(self)
scipy.stats.wishart_frozen.pdf(self,x)
scipy.stats.wishart_frozen.rvs(self,size=1,random_state=None)
scipy.stats.wishart_frozen.var(self)
scipy.stats.wishart_gen(self,seed=None)
scipy.stats.wishart_gen._cholesky_logdet(self,scale)
scipy.stats.wishart_gen._entropy(self,dim,df,log_det_scale)
scipy.stats.wishart_gen._logpdf(self,x,dim,df,scale,log_det_scale,C)
scipy.stats.wishart_gen._mean(self,dim,df,scale)
scipy.stats.wishart_gen._mode(self,dim,df,scale)
scipy.stats.wishart_gen._process_parameters(self,df,scale)
scipy.stats.wishart_gen._process_quantiles(self,x,dim)
scipy.stats.wishart_gen._process_size(self,size)
scipy.stats.wishart_gen._rvs(self,n,shape,dim,df,C,random_state)
scipy.stats.wishart_gen._standard_rvs(self,n,shape,dim,df,random_state)
scipy.stats.wishart_gen._var(self,dim,df,scale)
scipy.stats.wishart_gen.entropy(self,df,scale)
scipy.stats.wishart_gen.logpdf(self,x,df,scale)
scipy.stats.wishart_gen.mean(self,df,scale)
scipy.stats.wishart_gen.mode(self,df,scale)
scipy.stats.wishart_gen.pdf(self,x,df,scale)
scipy.stats.wishart_gen.rvs(self,df,scale,size=1,random_state=None)
scipy.stats.wishart_gen.var(self,df,scale)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/mstats_basic.py----------------------------------------
scipy.stats.mstats_basic.__dir__()
scipy.stats.mstats_basic.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_covariance.py----------------------------------------
A:scipy.stats._covariance.A->numpy.atleast_1d(A)
A:scipy.stats._covariance.precision->self._validate_matrix(precision, 'precision')
A:scipy.stats._covariance.covariance->self._validate_matrix(covariance, 'covariance')
A:scipy.stats._covariance.self._chol_P->numpy.linalg.cholesky(precision)
A:scipy.stats._covariance.diagonal->self._validate_vector(diagonal, 'diagonal')
A:scipy.stats._covariance.positive_diagonal->numpy.array(diagonal, dtype=np.float64)
A:scipy.stats._covariance.self._log_pdet->numpy.sum(np.log(positive_eigenvalues), axis=-1)
A:scipy.stats._covariance.self._sqrt_diagonal->numpy.sqrt(diagonal)
A:scipy.stats._covariance.self._covariance->numpy.apply_along_axis(np.diag, -1, diagonal)
A:scipy.stats._covariance.L->self._validate_matrix(cholesky, 'cholesky')
A:scipy.stats._covariance.eigenvalues->numpy.expand_dims(eigenvalues, -2)
A:scipy.stats._covariance.eigenvectors->self._validate_matrix(eigenvectors, 'eigenvectors')
A:scipy.stats._covariance.(eigenvectors, eigenvalues)->numpy.broadcast_arrays(eigenvectors, eigenvalues)
A:scipy.stats._covariance.positive_eigenvalues->numpy.array(eigenvalues, dtype=np.float64)
A:scipy.stats._covariance.residual->numpy.linalg.norm(x @ self._null_basis, axis=-1)
scipy.stats.Covariance(self)
scipy.stats.Covariance._validate_matrix(self,A,name)
scipy.stats.Covariance._validate_vector(self,A,name)
scipy.stats.Covariance.colorize(self,x)
scipy.stats.Covariance.covariance(self)
scipy.stats.Covariance.from_cholesky(cholesky)
scipy.stats.Covariance.from_diagonal(diagonal)
scipy.stats.Covariance.from_eigendecomposition(eigendecomposition)
scipy.stats.Covariance.from_precision(precision,covariance=None)
scipy.stats.Covariance.log_pdet(self)
scipy.stats.Covariance.rank(self)
scipy.stats.Covariance.shape(self)
scipy.stats.Covariance.whiten(self,x)
scipy.stats._covariance.CovViaCholesky(self,cholesky)
scipy.stats._covariance.CovViaCholesky.__init__(self,cholesky)
scipy.stats._covariance.CovViaCholesky._colorize(self,x)
scipy.stats._covariance.CovViaCholesky._whiten(self,x)
scipy.stats._covariance.CovViaDiagonal(self,diagonal)
scipy.stats._covariance.CovViaDiagonal.__init__(self,diagonal)
scipy.stats._covariance.CovViaDiagonal._colorize(self,x)
scipy.stats._covariance.CovViaDiagonal._support_mask(self,x)
scipy.stats._covariance.CovViaDiagonal._whiten(self,x)
scipy.stats._covariance.CovViaEigendecomposition(self,eigendecomposition)
scipy.stats._covariance.CovViaEigendecomposition.__init__(self,eigendecomposition)
scipy.stats._covariance.CovViaEigendecomposition._colorize(self,x)
scipy.stats._covariance.CovViaEigendecomposition._covariance(self)
scipy.stats._covariance.CovViaEigendecomposition._support_mask(self,x)
scipy.stats._covariance.CovViaEigendecomposition._whiten(self,x)
scipy.stats._covariance.CovViaPSD(self,psd)
scipy.stats._covariance.CovViaPSD.__init__(self,psd)
scipy.stats._covariance.CovViaPSD._support_mask(self,x)
scipy.stats._covariance.CovViaPSD._whiten(self,x)
scipy.stats._covariance.CovViaPrecision(self,precision,covariance=None)
scipy.stats._covariance.CovViaPrecision.__init__(self,precision,covariance=None)
scipy.stats._covariance.CovViaPrecision._colorize(self,x)
scipy.stats._covariance.CovViaPrecision._covariance(self)
scipy.stats._covariance.CovViaPrecision._whiten(self,x)
scipy.stats._covariance.Covariance(self)
scipy.stats._covariance.Covariance.__init__(self)
scipy.stats._covariance.Covariance._validate_matrix(self,A,name)
scipy.stats._covariance.Covariance._validate_vector(self,A,name)
scipy.stats._covariance.Covariance.colorize(self,x)
scipy.stats._covariance.Covariance.covariance(self)
scipy.stats._covariance.Covariance.from_cholesky(cholesky)
scipy.stats._covariance.Covariance.from_diagonal(diagonal)
scipy.stats._covariance.Covariance.from_eigendecomposition(eigendecomposition)
scipy.stats._covariance.Covariance.from_precision(precision,covariance=None)
scipy.stats._covariance.Covariance.log_pdet(self)
scipy.stats._covariance.Covariance.rank(self)
scipy.stats._covariance.Covariance.shape(self)
scipy.stats._covariance.Covariance.whiten(self,x)
scipy.stats._covariance._dot_diag(x,d)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_rvs_sampling.py----------------------------------------
A:scipy.stats._rvs_sampling.size1d->tuple(np.atleast_1d(size))
A:scipy.stats._rvs_sampling.N->numpy.prod(size1d)
A:scipy.stats._rvs_sampling.rng->check_random_state(random_state)
A:scipy.stats._rvs_sampling.x->numpy.zeros(N)
A:scipy.stats._rvs_sampling.v1->check_random_state(random_state).uniform(vmin, vmax, size=k)
A:scipy.stats._rvs_sampling.num_accept->numpy.sum(accept)
A:scipy.stats._rvs_sampling.msg->'Not a single random variate could be generated in {} attempts. The ratio of uniforms method does not appear to work for the provided parameters. Please check the pdf and the bounds.'.format(i * N)
scipy.stats._rvs_sampling.rvs_ratio_uniforms(pdf,umax,vmin,vmax,size=1,c=0,random_state=None)
scipy.stats.rvs_ratio_uniforms(pdf,umax,vmin,vmax,size=1,c=0,random_state=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_warnings_errors.py----------------------------------------
scipy.stats.ConstantInputWarning(self,msg=None)
scipy.stats.DegenerateDataWarning(self,msg=None)
scipy.stats.FitError(self,msg=None)
scipy.stats.NearConstantInputWarning(self,msg=None)
scipy.stats._warnings_errors.ConstantInputWarning(self,msg=None)
scipy.stats._warnings_errors.ConstantInputWarning.__init__(self,msg=None)
scipy.stats._warnings_errors.DegenerateDataWarning(self,msg=None)
scipy.stats._warnings_errors.DegenerateDataWarning.__init__(self,msg=None)
scipy.stats._warnings_errors.FitError(self,msg=None)
scipy.stats._warnings_errors.FitError.__init__(self,msg=None)
scipy.stats._warnings_errors.NearConstantInputWarning(self,msg=None)
scipy.stats._warnings_errors.NearConstantInputWarning.__init__(self,msg=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_constants.py----------------------------------------
A:scipy.stats._constants._LOGXMAX->numpy.log(_XMAX)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_continuous_distns.py----------------------------------------
A:scipy.stats._continuous_distns.method->kwds.get('method', 'mle').lower()
A:scipy.stats._continuous_distns.ksone->ksone_gen(a=0.0, b=1.0, name='ksone')
A:scipy.stats._continuous_distns.kstwo->kstwo_gen(momtype=0, a=0.0, b=1.0, name='kstwo')
A:scipy.stats._continuous_distns.kstwobign->kstwobign_gen(a=0.0, name='kstwobign')
A:scipy.stats._continuous_distns._norm_pdf_C->numpy.sqrt(2 * np.pi)
A:scipy.stats._continuous_distns._norm_pdf_logC->numpy.log(_norm_pdf_C)
A:scipy.stats._continuous_distns.floc->kwds.pop('floc', None)
A:scipy.stats._continuous_distns.fscale->kwds.pop('fscale', None)
A:scipy.stats._continuous_distns.data->numpy.asarray(data)
A:scipy.stats._continuous_distns.loc->numpy.asarray(data).min()
A:scipy.stats._continuous_distns.scale->numpy.asarray(data).ptp()
A:scipy.stats._continuous_distns.norm->norm_gen(name='norm')
A:scipy.stats._continuous_distns.alpha->alpha_gen(a=0.0, name='alpha')
A:scipy.stats._continuous_distns.anglit->anglit_gen(a=-np.pi / 4, b=np.pi / 4, name='anglit')
A:scipy.stats._continuous_distns.arcsine->arcsine_gen(a=0.0, b=1.0, name='arcsine')
A:scipy.stats._continuous_distns.psiab->scipy.special.psi(a + b)
A:scipy.stats._continuous_distns.ia->_ShapeInfo('a', False, (-np.inf, np.inf), (True, False))
A:scipy.stats._continuous_distns.ib->_ShapeInfo('b', False, (0.0, np.inf), (False, False))
A:scipy.stats._continuous_distns.g1->numpy.full(np.shape(b), fill_value=np.nan)
A:scipy.stats._continuous_distns.g2->numpy.full(np.shape(b), fill_value=np.nan)
A:scipy.stats._continuous_distns.(a, b)->numpy.broadcast_arrays(a, b)
A:scipy.stats._continuous_distns.f0->_get_fixed_fit_value(kwds, ['f0', 'fa', 'fix_a'])
A:scipy.stats._continuous_distns.f1->_get_fixed_fit_value(kwds, ['f1', 'fb', 'fix_b'])
A:scipy.stats._continuous_distns.xbar->numpy.asarray(data).mean()
A:scipy.stats._continuous_distns.(theta, info, ier, mesg)->scipy.optimize.fsolve(_beta_mle_ab, [a, b], args=(len(data), s1, s2), full_output=True)
A:scipy.stats._continuous_distns.s1->self.mean(a, b).sum()
A:scipy.stats._continuous_distns.s2->(xm ** 2).sum()
A:scipy.stats._continuous_distns.beta->beta_gen(a=0.0, b=1.0, name='beta')
A:scipy.stats._continuous_distns.u1->numpy.sqrt(a ** 2 - b ** 2).rvs(a=0.5, scale=2, size=size, random_state=random_state)
A:scipy.stats._continuous_distns.u2->numpy.sqrt(a ** 2 - b ** 2).rvs(b, size=size, random_state=random_state)
A:scipy.stats._continuous_distns.betaprime->betaprime_gen(a=0.0, name='betaprime')
A:scipy.stats._continuous_distns.k->numpy.arange(0, n + 1)
A:scipy.stats._continuous_distns.bradford->bradford_gen(a=0.0, b=1.0, name='bradford')
A:scipy.stats._continuous_distns.ic->_ShapeInfo('c', False, (1.0, np.inf), (False, False))
A:scipy.stats._continuous_distns.id->_ShapeInfo('d', False, (0, 1.0), (True, True))
A:scipy.stats._continuous_distns.output->_lazywhere(x == 0, [x, c, d], lambda x_, c_, d_: np.log(c_) + np.log(d_) + sc.xlogy(c_ * d_ - 1, x_) - (d_ + 1) * sc.log1p(x_ ** c_), f2=lambda x_, c_, d_: np.log(c_) + np.log(d_) + sc.xlogy(-c_ - 1, x_) - sc.xlog1py(d_ + 1, x_ ** (-c_)))
A:scipy.stats._continuous_distns.mu->numpy.full(np.shape(b), fill_value=np.inf)
A:scipy.stats._continuous_distns.mu2->numpy.empty_like(chi)
A:scipy.stats._continuous_distns.burr->burr_gen(a=0.0, name='burr')
A:scipy.stats._continuous_distns.burr12->burr12_gen(a=0.0, name='burr12')
A:scipy.stats._continuous_distns.fisk->fisk_gen(a=0.0, name='fisk')
A:scipy.stats._continuous_distns.(p25, p50, p75)->numpy.percentile(data, [25, 50, 75])
A:scipy.stats._continuous_distns.cauchy->cauchy_gen(name='cauchy')
A:scipy.stats._continuous_distns.chi->numpy.asarray(chi, dtype=float)
A:scipy.stats._continuous_distns.chi2->chi2_gen(a=0.0, name='chi2')
A:scipy.stats._continuous_distns.c->numpy.sign(x - 0.5)
A:scipy.stats._continuous_distns.cosine->cosine_gen(a=-np.pi, b=np.pi, name='cosine')
A:scipy.stats._continuous_distns.u->random_state.uniform(size=k)
A:scipy.stats._continuous_distns.gm->numpy.sqrt(a ** 2 - b ** 2).rvs(a, size=size, random_state=random_state)
A:scipy.stats._continuous_distns.ax->abs(x)
A:scipy.stats._continuous_distns.fac->numpy.power(-np.log(fac), 1.0 / c)
A:scipy.stats._continuous_distns.dgamma->dgamma_gen(name='dgamma')
A:scipy.stats._continuous_distns.w->weibull_min_gen(a=0.0, name='weibull_min').rvs(c, size=size, random_state=random_state)
A:scipy.stats._continuous_distns.dweibull->dweibull_gen(name='dweibull')
A:scipy.stats._continuous_distns.data_min->numpy.asarray(data).min()
A:scipy.stats._continuous_distns.expon->expon_gen(a=0.0, name='expon')
A:scipy.stats._continuous_distns.gval->random_state.standard_normal(size)
A:scipy.stats._continuous_distns.exponnorm->exponnorm_gen(name='exponnorm')
A:scipy.stats._continuous_distns.exponweib->exponweib_gen(a=0.0, name='exponweib')
A:scipy.stats._continuous_distns.exponpow->exponpow_gen(a=0.0, name='exponpow')
A:scipy.stats._continuous_distns.z->random_state.gamma(1 / beta, size=size)
A:scipy.stats._continuous_distns.fatiguelife->fatiguelife_gen(a=0.0, name='fatiguelife')
A:scipy.stats._continuous_distns.foldcauchy->foldcauchy_gen(a=0.0, name='foldcauchy')
A:scipy.stats._continuous_distns.idfn->_ShapeInfo('dfn', False, (0, np.inf), (False, False))
A:scipy.stats._continuous_distns.idfd->_ShapeInfo('dfd', False, (0, np.inf), (False, False))
A:scipy.stats._continuous_distns.f->f_gen(a=0.0, name='f')
A:scipy.stats._continuous_distns.foldnorm->foldnorm_gen(a=0.0, name='foldnorm')
A:scipy.stats._continuous_distns.(data, fc, floc, fscale)->_check_fit_input_parameters(self, data, args, kwds)
A:scipy.stats._continuous_distns.gamma1->scipy.special.gamma(1 + 1 / c)
A:scipy.stats._continuous_distns.gamma2->scipy.special.gamma(1 + 2 / c)
A:scipy.stats._continuous_distns.gamma3->scipy.special.gamma(1 + 3 / c)
A:scipy.stats._continuous_distns.s->numpy.clip(s, -s_max, s_max)
A:scipy.stats._continuous_distns.s_min->skew(max_c)
A:scipy.stats._continuous_distns.v->random_state.uniform(size=k)
A:scipy.stats._continuous_distns.m->numpy.mean(data)
A:scipy.stats._continuous_distns.weibull_min->weibull_min_gen(a=0.0, name='weibull_min')
A:scipy.stats._continuous_distns.logdenum->numpy.log(np.exp(-pow(a, c)) - np.exp(-pow(b, c)))
A:scipy.stats._continuous_distns.lognum->numpy.log(np.exp(-pow(x, c)) - np.exp(-pow(b, c)))
A:scipy.stats._continuous_distns.truncweibull_min->truncweibull_min_gen(name='truncweibull_min')
A:scipy.stats._continuous_distns.val->_norm_ppf((q + 1.0) / 2)
A:scipy.stats._continuous_distns.weibull_max->weibull_max_gen(b=0.0, name='weibull_max')
A:scipy.stats._continuous_distns.absx->numpy.abs(x)
A:scipy.stats._continuous_distns.genlogistic->genlogistic_gen(name='genlogistic')
A:scipy.stats._continuous_distns.b->_lazywhere(c < 0, (c,), lambda c: -1.0 / c, np.inf)
A:scipy.stats._continuous_distns.a->numpy.broadcast_to(a, cdf.shape)
A:scipy.stats._continuous_distns.genpareto->genpareto_gen(a=0.0, name='genpareto')
A:scipy.stats._continuous_distns.genexpon->genexpon_gen(a=0.0, name='genexpon')
A:scipy.stats._continuous_distns._b->_lazyselect(condlist, [f0, f1, f1, f0, f1, f1], [h, k], default=np.nan)
A:scipy.stats._continuous_distns._a->_lazyselect(condlist, [f0, f1, f0, f3, f3, f5], [h, k], default=np.nan)
A:scipy.stats._continuous_distns.cx->_lazywhere((x == x) & (c != 0), (x, c), lambda x, c: c * x, 0.0)
A:scipy.stats._continuous_distns.logex2->scipy.special.log1p(-cx)
A:scipy.stats._continuous_distns.logpex2->self._loglogcdf(x, c)
A:scipy.stats._continuous_distns.pex2->numpy.exp(logpex2)
A:scipy.stats._continuous_distns.logpdf->_lazywhere(~((cx == 1) | (cx == -np.inf)), (pex2, logpex2, logex2), lambda pex2, lpex2, lex2: -pex2 + lpex2 - lex2, fillvalue=-np.inf)
A:scipy.stats._continuous_distns.g3->g(3)
A:scipy.stats._continuous_distns.g4->g(4)
A:scipy.stats._continuous_distns.g2mg12->numpy.where(abs(c) < 1e-07, (c * np.pi) ** 2.0 / 6.0, g2 - g1 ** 2.0)
A:scipy.stats._continuous_distns.gam2k->numpy.where(abs(c) < 1e-07, np.pi ** 2.0 / 6.0, sc.expm1(sc.gammaln(2.0 * c + 1.0) - 2 * sc.gammaln(c + 1.0)) / c ** 2.0)
A:scipy.stats._continuous_distns.gamk->numpy.where(abs(c) < eps, -_EULER, sc.expm1(sc.gammaln(c + 1)) / c)
A:scipy.stats._continuous_distns.sk1->_lazywhere(c >= -1.0 / 3, (c, g1, g2, g3, g2mg12), lambda c, g1, g2, g3, g2gm12: np.sign(c) * (-g3 + (g2 + 2 * g2mg12) * g1) / g2mg12 ** 1.5, fillvalue=np.nan)
A:scipy.stats._continuous_distns.sk->numpy.where(abs(c) <= eps ** 0.29, 12 * np.sqrt(6) * _ZETA3 / np.pi ** 3, sk1)
A:scipy.stats._continuous_distns.ku1->_lazywhere(c >= -1.0 / 4, (g1, g2, g3, g4, g2mg12), lambda g1, g2, g3, g4, g2mg12: (g4 + (-4 * g3 + 3 * (g2 + g2mg12) * g1) * g1) / g2mg12 ** 2, fillvalue=np.nan)
A:scipy.stats._continuous_distns.ku->numpy.where(abs(c) <= eps ** 0.23, 12.0 / 5.0, ku1 - 3.0)
A:scipy.stats._continuous_distns.g->random_state.standard_gamma(1.5, size=k)
A:scipy.stats._continuous_distns.genextreme->genextreme_gen(name='genextreme')
A:scipy.stats._continuous_distns.value->scipy.optimize.newton(func, x0, tol=1e-10)
A:scipy.stats._continuous_distns.(value, info, ier, mesg)->scipy.optimize.fsolve(func, x0, xtol=1e-11, full_output=True)
A:scipy.stats._continuous_distns.gamma->numpy.sqrt(a ** 2 - b ** 2)
A:scipy.stats._continuous_distns.allint->numpy.all(np.floor(a) == a)
A:scipy.stats._continuous_distns.erlang->erlang_gen(a=0.0, name='erlang')
A:scipy.stats._continuous_distns.val1->scipy.special.gammaincinv(a, q)
A:scipy.stats._continuous_distns.val2->scipy.special.gammainccinv(a, q)
A:scipy.stats._continuous_distns.r->self._rvs_scalar(it[0], numsamples=numsamples, random_state=random_state)
A:scipy.stats._continuous_distns.gengamma->gengamma_gen(a=0.0, name='gengamma')
A:scipy.stats._continuous_distns.tmp->numpy.asarray(1 - c * x)
A:scipy.stats._continuous_distns.genhalflogistic->genhalflogistic_gen(a=0.0, name='genhalflogistic')
A:scipy.stats._continuous_distns.ip->_ShapeInfo('p', False, (-np.inf, np.inf), (False, False))
A:scipy.stats._continuous_distns.user_data->numpy.array([p, b], float).ctypes.data_as(ctypes.c_void_p)
A:scipy.stats._continuous_distns.llc->scipy._lib._ccallback.LowLevelCallable.from_cython(_stats, cython_symbol, usr_data)
A:scipy.stats._continuous_distns.t2->numpy.float_power(t1, 0.5)
A:scipy.stats._continuous_distns.t3->numpy.float_power(t1, -0.5)
A:scipy.stats._continuous_distns.gig->geninvgauss_gen(a=0.0, name='geninvgauss').rvs(p=p, b=t2, scale=t3, size=size, random_state=random_state)
A:scipy.stats._continuous_distns.normst->norm_gen(name='norm').rvs(size=size, random_state=random_state)
A:scipy.stats._continuous_distns.(p, a, b)->numpy.broadcast_arrays(p, a, b)
A:scipy.stats._continuous_distns.t1->numpy.float_power(t1, 0.5)
A:scipy.stats._continuous_distns.integers->integers.reshape(integers.shape + (1,) * p.ndim).reshape(integers.shape + (1,) * p.ndim)
A:scipy.stats._continuous_distns.(b0, b1, b2, b3, b4)->scipy.special.kv(p + integers, t1)
A:scipy.stats._continuous_distns.genhyperbolic->genhyperbolic_gen(name='genhyperbolic')
A:scipy.stats._continuous_distns.gompertz->gompertz_gen(a=0.0, name='gompertz')
A:scipy.stats._continuous_distns.x->numpy.sqrt(1 - 2 * x / chi2)
A:scipy.stats._continuous_distns.logweights->numpy.asarray(logweights)
A:scipy.stats._continuous_distns.maxlogw->numpy.asarray(logweights).max()
A:scipy.stats._continuous_distns.weights->numpy.exp(logweights - maxlogw)
A:scipy.stats._continuous_distns.(data, floc, fscale)->_check_fit_input_parameters(self, data, args, kwds)
A:scipy.stats._continuous_distns.wavg->_average_with_log_weights(data, logweights=sdata)
A:scipy.stats._continuous_distns.brack_start->kwds.get('scale', 1)
A:scipy.stats._continuous_distns.res->_lazywhere(self._hpdf[1:-1] > 0.0, (self._hpdf[1:-1],), np.log, 0.0)
A:scipy.stats._continuous_distns.gumbel_r->gumbel_r_gen(name='gumbel_r')
A:scipy.stats._continuous_distns.(loc_r, scale_r)->gumbel_r_gen(name='gumbel_r').fit(-np.asarray(data), *args, **kwds)
A:scipy.stats._continuous_distns.gumbel_l->gumbel_l_gen(name='gumbel_l')
A:scipy.stats._continuous_distns.halfcauchy->halfcauchy_gen(a=0.0, name='halfcauchy')
A:scipy.stats._continuous_distns.halflogistic->halflogistic_gen(a=0.0, name='halflogistic')
A:scipy.stats._continuous_distns.halfnorm->halfnorm_gen(a=0.0, name='halfnorm')
A:scipy.stats._continuous_distns.hypsecant->hypsecant_gen(name='hypsecant')
A:scipy.stats._continuous_distns.iz->_ShapeInfo('z', False, (-1, np.inf), (False, False))
A:scipy.stats._continuous_distns.num->scipy.special.kve(p + n, b)
A:scipy.stats._continuous_distns.den->scipy.special.hyp2f1(c, a, a + b, -z)
A:scipy.stats._continuous_distns.gausshyper->gausshyper_gen(a=0.0, b=1.0, name='gausshyper')
A:scipy.stats._continuous_distns.m1->_lazywhere(a > 1, (a,), lambda x: 1.0 / (x - 1.0), np.inf)
A:scipy.stats._continuous_distns.m2->_lazywhere(a > 2, (a,), lambda x: 1.0 / (x - 1.0) ** 2 / (x - 2.0), np.inf)
A:scipy.stats._continuous_distns.invgamma->invgamma_gen(a=0.0, name='invgamma')
A:scipy.stats._continuous_distns.(x, mu)->numpy.broadcast_arrays(x, mu)
A:scipy.stats._continuous_distns.ppf->scipy.stats._boost._invgauss_ppf(x, mu, 1)
A:scipy.stats._continuous_distns.ppf[i_wt]->scipy.stats._boost._invgauss_isf(1 - x[i_wt], mu[i_wt], 1)
A:scipy.stats._continuous_distns.i_nan->numpy.isnan(isf)
A:scipy.stats._continuous_distns.ppf[i_nan]->super()._ppf(x[i_nan], mu[i_nan])
A:scipy.stats._continuous_distns.isf->scipy.stats._boost._invgauss_isf(x, mu, 1)
A:scipy.stats._continuous_distns.isf[i_wt]->scipy.stats._boost._invgauss_ppf(1 - x[i_wt], mu[i_wt], 1)
A:scipy.stats._continuous_distns.isf[i_nan]->super()._isf(x[i_nan], mu[i_nan])
A:scipy.stats._continuous_distns.(data, fshape_s, floc, fscale)->_check_fit_input_parameters(self, data, args, kwds)
A:scipy.stats._continuous_distns.fshape_n->numpy.mean(data)
A:scipy.stats._continuous_distns.invgauss->invgauss_gen(a=0.0, name='invgauss')
A:scipy.stats._continuous_distns.(_a, _b)->self._get_support()
A:scipy.stats._continuous_distns.out->numpy.empty(size)
A:scipy.stats._continuous_distns.(p, b)->numpy.broadcast_arrays(p, b)
A:scipy.stats._continuous_distns.(shp, bc)->_check_shape(chi.shape, size)
A:scipy.stats._continuous_distns.numsamples->int(np.prod(shp))
A:scipy.stats._continuous_distns.it->numpy.nditer([chi], flags=['multi_index'], op_flags=[['readonly']])
A:scipy.stats._continuous_distns.idx->tuple((it.multi_index[j] if not bc[j] else slice(None) for j in range(-len(size), 0)))
A:scipy.stats._continuous_distns.out[idx]->self._rvs_scalar(it[0], numsamples=numsamples, random_state=random_state).reshape(shp)
A:scipy.stats._continuous_distns.size1d->tuple(np.atleast_1d(numsamples))
A:scipy.stats._continuous_distns.N->int(np.prod(size1d))
A:scipy.stats._continuous_distns.phi->_argus_phi(chi)
A:scipy.stats._continuous_distns.lm->self._logquasipdf(m, p, b)
A:scipy.stats._continuous_distns.umax->numpy.exp(0.5 * self._logquasipdf(m, p, b))
A:scipy.stats._continuous_distns.num_accept->numpy.sum(accept)
A:scipy.stats._continuous_distns.msg->'Not a single random variate could be generated in {} attempts. Sampling does not appear to work for the provided parameters.'.format(i * N)
A:scipy.stats._continuous_distns.xs->numpy.max((x0, 2 / b))
A:scipy.stats._continuous_distns.k1->numpy.exp(self._logquasipdf(m, p, b))
A:scipy.stats._continuous_distns.k2->numpy.exp(-b)
A:scipy.stats._continuous_distns.cond3->numpy.logical_not(cond1 | cond2)
A:scipy.stats._continuous_distns.rvs->numpy.sqrt(1 + z[accept])
A:scipy.stats._continuous_distns.denom->scipy.special.kve(p, b)
A:scipy.stats._continuous_distns.geninvgauss->geninvgauss_gen(a=0.0, name='geninvgauss')
A:scipy.stats._continuous_distns.sq->numpy.hypot(1, x)
A:scipy.stats._continuous_distns.xm->self.mean(a, b)
A:scipy.stats._continuous_distns.em->eq(xm, a, b, q)
A:scipy.stats._continuous_distns.result->scipy.optimize.brentq(eq, left, right, args=(a, b, q), xtol=self.xtol)
A:scipy.stats._continuous_distns.ig->invgauss_gen(a=0.0, name='invgauss').rvs(mu=1 / gamma, size=size, random_state=random_state)
A:scipy.stats._continuous_distns.norminvgauss->norminvgauss_gen(name='norminvgauss')
A:scipy.stats._continuous_distns.xc1->numpy.power(x, -c)
A:scipy.stats._continuous_distns.xc2->numpy.exp(-xc2)
A:scipy.stats._continuous_distns.invweibull->invweibull_gen(a=0, name='invweibull')
A:scipy.stats._continuous_distns.trm->_norm_pdf(a + b * np.log(x + np.sqrt(x2 + 1)))
A:scipy.stats._continuous_distns.johnsonsb->johnsonsb_gen(a=0.0, b=1.0, name='johnsonsb')
A:scipy.stats._continuous_distns.johnsonsu->johnsonsu_gen(name='johnsonsu')
A:scipy.stats._continuous_distns.laplace->laplace_gen(name='laplace')
A:scipy.stats._continuous_distns.laplace_asymmetric->laplace_asymmetric_gen(name='laplace_asymmetric')
A:scipy.stats._continuous_distns.shapes->dist.shapes.replace(',', ' ').split()
A:scipy.stats._continuous_distns.unknown_keys->set(kwds).difference(known_keys)
A:scipy.stats._continuous_distns.levy->levy_gen(a=0.0, name='levy')
A:scipy.stats._continuous_distns.levy_l->levy_l_gen(b=0.0, name='levy_l')
A:scipy.stats._continuous_distns.n->norm_gen(name='norm').rvs(loc=nc, size=size, random_state=random_state)
A:scipy.stats._continuous_distns.(loc, scale)->self._fitstart(data)
A:scipy.stats._continuous_distns.logistic->logistic_gen(name='logistic')
A:scipy.stats._continuous_distns.mean->scipy.special.digamma(c)
A:scipy.stats._continuous_distns.var->scipy.special.polygamma(1, c)
A:scipy.stats._continuous_distns.loggamma->loggamma_gen(name='loggamma')
A:scipy.stats._continuous_distns.loglaplace->loglaplace_gen(a=0.0, name='loglaplace')
A:scipy.stats._continuous_distns.p->numpy.exp(s * s)
A:scipy.stats._continuous_distns.lndata->numpy.log(data)
A:scipy.stats._continuous_distns.shape->numpy.sqrt(((lndata - np.log(scale)) ** 2).mean())
A:scipy.stats._continuous_distns.lognorm->lognorm_gen(a=0.0, name='lognorm')
A:scipy.stats._continuous_distns.gibrat->gibrat_gen(a=0.0, name='gibrat')
A:scipy.stats._continuous_distns.gilbrat->gilbrat_gen(a=0.0, name='gilbrat')
A:scipy.stats._continuous_distns.wrapper->numpy.deprecate(getattr(gilbrat, m), f'gilbrat.{m}', f'gibrat.{m}', deprmsg)
A:scipy.stats._continuous_distns.maxwell->maxwell_gen(a=0.0, name='maxwell')
A:scipy.stats._continuous_distns.ik->_ShapeInfo('k', False, (1, np.inf), (False, False))
A:scipy.stats._continuous_distns.i_s->_ShapeInfo('s', False, (0, np.inf), (False, False))
A:scipy.stats._continuous_distns.qsk->pow(q, s * 1.0 / k)
A:scipy.stats._continuous_distns.mielke->mielke_gen(a=0.0, name='mielke')
A:scipy.stats._continuous_distns.ih->_ShapeInfo('h', False, (-np.inf, np.inf), (False, False))
A:scipy.stats._continuous_distns.maxr->self._get_stats_info(args[0], args[1])
A:scipy.stats._continuous_distns.kappa4->kappa4_gen(name='kappa4')
A:scipy.stats._continuous_distns.kappa3->kappa3_gen(a=0.0, name='kappa3')
A:scipy.stats._continuous_distns.moyal->moyal_gen(name='moyal')
A:scipy.stats._continuous_distns.nakagami->nakagami_gen(a=0.0, name='nakagami')
A:scipy.stats._continuous_distns.idf->_ShapeInfo('df', False, (0, np.inf), (False, False))
A:scipy.stats._continuous_distns.inc->_ShapeInfo('nc', False, (-np.inf, np.inf), (False, False))
A:scipy.stats._continuous_distns.ncx2->ncx2_gen(a=0.0, name='ncx2')
A:scipy.stats._continuous_distns.idf1->_ShapeInfo('df1', False, (0, np.inf), (False, False))
A:scipy.stats._continuous_distns.idf2->_ShapeInfo('df2', False, (0, np.inf), (False, False))
A:scipy.stats._continuous_distns.ncf->ncf_gen(a=0.0, name='ncf')
A:scipy.stats._continuous_distns.infinite_df->numpy.isposinf(df)
A:scipy.stats._continuous_distns.t->t_gen(name='t')
A:scipy.stats._continuous_distns.c2->chi2_gen(a=0.0, name='chi2').rvs(df, size=size, random_state=random_state)
A:scipy.stats._continuous_distns.Px->numpy.exp(trm1)
A:scipy.stats._continuous_distns.nct->nct_gen(name='nct')
A:scipy.stats._continuous_distns.bt->numpy.extract(mask, b)
A:scipy.stats._continuous_distns.parameters->_check_fit_input_parameters(self, data, args, kwds)
A:scipy.stats._continuous_distns.pareto->pareto_gen(a=1.0, name='pareto')
A:scipy.stats._continuous_distns.(mu, mu2, g1, g2)->pareto_gen(a=1.0, name='pareto').stats(c, loc=-1.0, moments='mvsk')
A:scipy.stats._continuous_distns.lomax->lomax_gen(a=0.0, name='lomax')
A:scipy.stats._continuous_distns.(ans, x, skew)->numpy.broadcast_arrays(1.0, x, skew)
A:scipy.stats._continuous_distns.ans->numpy.exp(self._logpdf(x, skew))
A:scipy.stats._continuous_distns.(ans, x, transx, mask, invmask, beta, alpha, _)->self._preprocess(x, skew)
A:scipy.stats._continuous_distns.ans[mask]->_norm_ppf(q[mask])
A:scipy.stats._continuous_distns.(ans, x, transx, mask, invmask, _, alpha, _)->self._preprocess(x, skew)
A:scipy.stats._continuous_distns.skew->numpy.broadcast_to(skew, size)
A:scipy.stats._continuous_distns.invmask1a->numpy.logical_and(invmask, skew > 0)
A:scipy.stats._continuous_distns.ans[invmask1a]->numpy.sqrt(a ** 2 - b ** 2).cdf(transx[invmask1b], alpha[invmask1b])
A:scipy.stats._continuous_distns.invmask2a->numpy.logical_and(invmask, skew < 0)
A:scipy.stats._continuous_distns.ans[invmask2a]->numpy.sqrt(a ** 2 - b ** 2).sf(transx[invmask2b], alpha[invmask2b])
A:scipy.stats._continuous_distns.(ans, _, _, mask, invmask, beta, alpha, zeta)->self._preprocess([0], skew)
A:scipy.stats._continuous_distns.nsmall->mask.sum()
A:scipy.stats._continuous_distns.(ans, q, _, mask, invmask, beta, alpha, zeta)->self._preprocess(q, skew)
A:scipy.stats._continuous_distns.pearson3->pearson3_gen(name='pearson3')
A:scipy.stats._continuous_distns.(data, fshape, floc, fscale)->_check_fit_input_parameters(self, data, args, kwds)
A:scipy.stats._continuous_distns.loc_lt1->numpy.nextafter(data.min(), -np.inf)
A:scipy.stats._continuous_distns.ll_lt1->penalized_nllf(fit_shape_lt1, data)
A:scipy.stats._continuous_distns.loc_gt1->numpy.nextafter(data.max() - fscale, np.inf)
A:scipy.stats._continuous_distns.ll_gt1->penalized_nllf(fit_shape_gt1, data)
A:scipy.stats._continuous_distns.rbrack->numpy.nextafter(np.min(data), -np.inf)
A:scipy.stats._continuous_distns.root->scipy.optimize.root_scalar(fun_to_solve, bracket=(lbrack, rbrack))
A:scipy.stats._continuous_distns.fit_shape_lt1->fit_loc_scale_w_shape_lt_1()
A:scipy.stats._continuous_distns.fit_shape_gt1->fit_loc_scale_w_shape_gt_1()
A:scipy.stats._continuous_distns.powerlaw->powerlaw_gen(a=0.0, b=1.0, name='powerlaw')
A:scipy.stats._continuous_distns.powerlognorm->powerlognorm_gen(a=0.0, name='powerlognorm')
A:scipy.stats._continuous_distns.powernorm->powernorm_gen(name='powernorm')
A:scipy.stats._continuous_distns.rdist->rdist_gen(a=-1.0, b=1.0, name='rdist')
A:scipy.stats._continuous_distns.s3->(1 / xm).sum()
A:scipy.stats._continuous_distns.loc0->kwds.get('loc')
A:scipy.stats._continuous_distns.lbrack->_get_left_bracket(fun, rbrack)
A:scipy.stats._continuous_distns.rayleigh->rayleigh_gen(a=0.0, name='rayleigh')
A:scipy.stats._continuous_distns.loguniform->reciprocal_gen(name='loguniform')
A:scipy.stats._continuous_distns.reciprocal->reciprocal_gen(name='reciprocal')
A:scipy.stats._continuous_distns.rice->rice_gen(a=0.0, name='rice')
A:scipy.stats._continuous_distns.recipinvgauss->recipinvgauss_gen(a=0.0, name='recipinvgauss')
A:scipy.stats._continuous_distns.semicircular->semicircular_gen(a=-1.0, b=1.0, name='semicircular')
A:scipy.stats._continuous_distns.skewcauchy->skewcauchy_gen(name='skewcauchy')
A:scipy.stats._continuous_distns.cdf->scipy.stats._boost._skewnorm_cdf(x, 0, 1, a)
A:scipy.stats._continuous_distns.cdf[i_small_cdf]->super()._cdf(x[i_small_cdf], a[i_small_cdf])
A:scipy.stats._continuous_distns.u0->random_state.normal(size=size)
A:scipy.stats._continuous_distns.(data, fa, floc, fscale)->_check_fit_input_parameters(self, data, args, kwds)
A:scipy.stats._continuous_distns.s_max->skew_d(1)
A:scipy.stats._continuous_distns.skewnorm->skew_norm_gen(name='skewnorm')
A:scipy.stats._continuous_distns.dc_term->_lazyselect([d == 0.0, (0.0 < d) & (d < 1.0), d == 1.0], [lambda d: 1.0, lambda d: np.expm1((n + 2) * np.log(d)) / (d - 1.0), lambda d: n + 2], [d])
A:scipy.stats._continuous_distns.trapezoid->trapezoid_gen(a=0.0, b=1.0, name='trapezoid')
A:scipy.stats._continuous_distns.trapz->trapezoid_gen(a=0.0, b=1.0, name='trapz')
A:scipy.stats._continuous_distns.triang->triang_gen(a=0.0, b=1.0, name='triang')
A:scipy.stats._continuous_distns.eB->numpy.exp(b)
A:scipy.stats._continuous_distns.truncexpon->truncexpon_gen(a=0.0, name='truncexpon')
A:scipy.stats._continuous_distns.out[case_left]->isf_left(q_left, a[case_left], b[case_left])
A:scipy.stats._continuous_distns.out[case_right]->isf_right(q_right, a[case_right], b[case_right])
A:scipy.stats._continuous_distns.out[case_central]->mass_case_central(a[case_central], b[case_central])
A:scipy.stats._continuous_distns.(x, a, b)->numpy.broadcast_arrays(x, a, b)
A:scipy.stats._continuous_distns.logcdf[i]->numpy.log1p(-np.exp(self._logsf(x[i], a[i], b[i])))
A:scipy.stats._continuous_distns.logsf[i]->numpy.log1p(-np.exp(self._logcdf(x[i], a[i], b[i])))
A:scipy.stats._continuous_distns.(q, a, b)->numpy.broadcast_arrays(q, a, b)
A:scipy.stats._continuous_distns.log_Phi_x->_log_diff(sc.log_ndtr(-a), np.log1p(-q) + _log_gauss_mass(a, b))
A:scipy.stats._continuous_distns.(pA, pB)->self.pdf(np.array([a, b]), a, b)
A:scipy.stats._continuous_distns.vals->_lazywhere(probs, [probs, [a, b]], lambda x, y: x * y ** 3, fillvalue=0)
A:scipy.stats._continuous_distns._truncnorm_stats->numpy.vectorize(_truncnorm_stats_scalar, excluded=('moments',))
A:scipy.stats._continuous_distns.truncnorm->truncnorm_gen(name='truncnorm', momtype=1)
A:scipy.stats._continuous_distns.(b, loc, scale)->pareto_gen(a=1.0, name='pareto').fit(data)
A:scipy.stats._continuous_distns.truncpareto->truncpareto_gen(a=1.0, name='truncpareto')
A:scipy.stats._continuous_distns.Fx->numpy.asarray(sc.tklmbda(x, lam))
A:scipy.stats._continuous_distns.tukeylambda->tukeylambda_gen(name='tukeylambda')
A:scipy.stats._continuous_distns.ptp->numpy.asarray(data).ptp()
A:scipy.stats._continuous_distns.uniform->uniform_gen(a=0.0, b=1.0, name='uniform')
A:scipy.stats._continuous_distns.vonmises->vonmises_gen(name='vonmises')
A:scipy.stats._continuous_distns.vonmises_line->vonmises_gen(a=-np.pi, b=np.pi, name='vonmises_line')
A:scipy.stats._continuous_distns.wald->wald_gen(a=0.0, name='wald')
A:scipy.stats._continuous_distns.wrapcauchy->wrapcauchy_gen(a=0.0, b=2 * np.pi, name='wrapcauchy')
A:scipy.stats._continuous_distns.(c1, c3, c5)->scipy.special.gammaln([1.0 / beta, 3.0 / beta, 5.0 / beta])
A:scipy.stats._continuous_distns.y->numpy.asarray(y)
A:scipy.stats._continuous_distns.gennorm->gennorm_gen(name='gennorm')
A:scipy.stats._continuous_distns.halfgennorm->halfgennorm_gen(a=0, name='halfgennorm')
A:scipy.stats._continuous_distns.ibeta->_ShapeInfo('beta', False, (0, np.inf), (False, False))
A:scipy.stats._continuous_distns.im->_ShapeInfo('m', False, (1, np.inf), (False, False))
A:scipy.stats._continuous_distns.eb2->numpy.exp(-beta ** 2 / 2)
A:scipy.stats._continuous_distns.lhs->numpy.zeros(rhs.shape)
A:scipy.stats._continuous_distns.crystalball->crystalball_gen(name='crystalball', longname='A Crystalball Function')
A:scipy.stats._continuous_distns.echi->numpy.exp(-chi2 / 2)
A:scipy.stats._continuous_distns.mu2[~mask]->numpy.polyval(coef, c)
A:scipy.stats._continuous_distns.argus->argus_gen(name='argus', longname='An Argus Function', a=0.0, b=1.0)
A:scipy.stats._continuous_distns.self._hpdf->numpy.hstack([0.0, self._hpdf, 0.0])
A:scipy.stats._continuous_distns.self._hbins->numpy.asarray(histogram[1])
A:scipy.stats._continuous_distns.self._hcdf->numpy.hstack([0.0, self._hcdf])
A:scipy.stats._continuous_distns.dct->super()._updated_ctor_param()
A:scipy.stats._continuous_distns.log_const->_stats._studentized_range_cdf_logconst(k, df)
A:scipy.stats._continuous_distns.usr_data->numpy.array(arg, float).ctypes.data_as(ctypes.c_void_p)
A:scipy.stats._continuous_distns.opts->dict(epsabs=1e-11, epsrel=1e-12)
A:scipy.stats._continuous_distns.ufunc->numpy.frompyfunc(_single_cdf, 3, 1)
A:scipy.stats._continuous_distns.studentized_range->studentized_range_gen(name='studentized_range', a=0, b=np.inf)
A:scipy.stats._continuous_distns.pairs->list(globals().copy().items())
A:scipy.stats._continuous_distns.(_distn_names, _distn_gen_names)->get_distribution_names(pairs, rv_continuous)
scipy.stats._continuous_distns.FitDataError(self,distr,lower,upper)
scipy.stats._continuous_distns.FitDataError.__init__(self,distr,lower,upper)
scipy.stats._continuous_distns.FitSolverError(self,mesg)
scipy.stats._continuous_distns.FitSolverError.__init__(self,mesg)
scipy.stats._continuous_distns.FitUniformFixedScaleDataError(self,ptp,fscale)
scipy.stats._continuous_distns.FitUniformFixedScaleDataError.__init__(self,ptp,fscale)
scipy.stats._continuous_distns._argus_phi(chi)
scipy.stats._continuous_distns._average_with_log_weights(x,logweights)
scipy.stats._continuous_distns._beta_mle_a(a,b,n,s1)
scipy.stats._continuous_distns._beta_mle_ab(theta,n,s1,s2)
scipy.stats._continuous_distns._call_super_mom(fun)
scipy.stats._continuous_distns._check_fit_input_parameters(dist,data,args,kwds)
scipy.stats._continuous_distns._digammainv(y)
scipy.stats._continuous_distns._get_left_bracket(fun,rbrack,lbrack=None)
scipy.stats._continuous_distns._log_diff(log_p,log_q)
scipy.stats._continuous_distns._log_gauss_mass(a,b)
scipy.stats._continuous_distns._log_sum(log_p,log_q)
scipy.stats._continuous_distns._lognorm_logpdf(x,s)
scipy.stats._continuous_distns._ncx2_log_pdf(x,df,nc)
scipy.stats._continuous_distns._norm_cdf(x)
scipy.stats._continuous_distns._norm_isf(q)
scipy.stats._continuous_distns._norm_logcdf(x)
scipy.stats._continuous_distns._norm_logpdf(x)
scipy.stats._continuous_distns._norm_logsf(x)
scipy.stats._continuous_distns._norm_pdf(x)
scipy.stats._continuous_distns._norm_ppf(q)
scipy.stats._continuous_distns._norm_sf(x)
scipy.stats._continuous_distns._remove_optimizer_parameters(kwds)
scipy.stats._continuous_distns.alpha_gen(rv_continuous)
scipy.stats._continuous_distns.alpha_gen._cdf(self,x,a)
scipy.stats._continuous_distns.alpha_gen._logpdf(self,x,a)
scipy.stats._continuous_distns.alpha_gen._pdf(self,x,a)
scipy.stats._continuous_distns.alpha_gen._ppf(self,q,a)
scipy.stats._continuous_distns.alpha_gen._shape_info(self)
scipy.stats._continuous_distns.alpha_gen._stats(self,a)
scipy.stats._continuous_distns.anglit_gen(rv_continuous)
scipy.stats._continuous_distns.anglit_gen._cdf(self,x)
scipy.stats._continuous_distns.anglit_gen._entropy(self)
scipy.stats._continuous_distns.anglit_gen._pdf(self,x)
scipy.stats._continuous_distns.anglit_gen._ppf(self,q)
scipy.stats._continuous_distns.anglit_gen._shape_info(self)
scipy.stats._continuous_distns.anglit_gen._stats(self)
scipy.stats._continuous_distns.arcsine_gen(rv_continuous)
scipy.stats._continuous_distns.arcsine_gen._cdf(self,x)
scipy.stats._continuous_distns.arcsine_gen._entropy(self)
scipy.stats._continuous_distns.arcsine_gen._pdf(self,x)
scipy.stats._continuous_distns.arcsine_gen._ppf(self,q)
scipy.stats._continuous_distns.arcsine_gen._shape_info(self)
scipy.stats._continuous_distns.arcsine_gen._stats(self)
scipy.stats._continuous_distns.argus_gen(rv_continuous)
scipy.stats._continuous_distns.argus_gen._cdf(self,x,chi)
scipy.stats._continuous_distns.argus_gen._logpdf(self,x,chi)
scipy.stats._continuous_distns.argus_gen._pdf(self,x,chi)
scipy.stats._continuous_distns.argus_gen._rvs(self,chi,size=None,random_state=None)
scipy.stats._continuous_distns.argus_gen._rvs_scalar(self,chi,numsamples=None,random_state=None)
scipy.stats._continuous_distns.argus_gen._sf(self,x,chi)
scipy.stats._continuous_distns.argus_gen._shape_info(self)
scipy.stats._continuous_distns.argus_gen._stats(self,chi)
scipy.stats._continuous_distns.beta_gen(rv_continuous)
scipy.stats._continuous_distns.beta_gen._cdf(self,x,a,b)
scipy.stats._continuous_distns.beta_gen._fitstart(self,data)
scipy.stats._continuous_distns.beta_gen._isf(self,x,a,b)
scipy.stats._continuous_distns.beta_gen._logpdf(self,x,a,b)
scipy.stats._continuous_distns.beta_gen._pdf(self,x,a,b)
scipy.stats._continuous_distns.beta_gen._ppf(self,q,a,b)
scipy.stats._continuous_distns.beta_gen._rvs(self,a,b,size=None,random_state=None)
scipy.stats._continuous_distns.beta_gen._sf(self,x,a,b)
scipy.stats._continuous_distns.beta_gen._shape_info(self)
scipy.stats._continuous_distns.beta_gen._stats(self,a,b)
scipy.stats._continuous_distns.beta_gen.fit(self,data,*args,**kwds)
scipy.stats._continuous_distns.betaprime_gen(rv_continuous)
scipy.stats._continuous_distns.betaprime_gen._cdf(self,x,a,b)
scipy.stats._continuous_distns.betaprime_gen._logpdf(self,x,a,b)
scipy.stats._continuous_distns.betaprime_gen._munp(self,n,a,b)
scipy.stats._continuous_distns.betaprime_gen._pdf(self,x,a,b)
scipy.stats._continuous_distns.betaprime_gen._rvs(self,a,b,size=None,random_state=None)
scipy.stats._continuous_distns.betaprime_gen._shape_info(self)
scipy.stats._continuous_distns.bradford_gen(rv_continuous)
scipy.stats._continuous_distns.bradford_gen._cdf(self,x,c)
scipy.stats._continuous_distns.bradford_gen._entropy(self,c)
scipy.stats._continuous_distns.bradford_gen._pdf(self,x,c)
scipy.stats._continuous_distns.bradford_gen._ppf(self,q,c)
scipy.stats._continuous_distns.bradford_gen._shape_info(self)
scipy.stats._continuous_distns.bradford_gen._stats(self,c,moments='mv')
scipy.stats._continuous_distns.burr12_gen(rv_continuous)
scipy.stats._continuous_distns.burr12_gen._cdf(self,x,c,d)
scipy.stats._continuous_distns.burr12_gen._logcdf(self,x,c,d)
scipy.stats._continuous_distns.burr12_gen._logpdf(self,x,c,d)
scipy.stats._continuous_distns.burr12_gen._logsf(self,x,c,d)
scipy.stats._continuous_distns.burr12_gen._munp(self,n,c,d)
scipy.stats._continuous_distns.burr12_gen._pdf(self,x,c,d)
scipy.stats._continuous_distns.burr12_gen._ppf(self,q,c,d)
scipy.stats._continuous_distns.burr12_gen._sf(self,x,c,d)
scipy.stats._continuous_distns.burr12_gen._shape_info(self)
scipy.stats._continuous_distns.burr_gen(rv_continuous)
scipy.stats._continuous_distns.burr_gen._cdf(self,x,c,d)
scipy.stats._continuous_distns.burr_gen._logcdf(self,x,c,d)
scipy.stats._continuous_distns.burr_gen._logpdf(self,x,c,d)
scipy.stats._continuous_distns.burr_gen._logsf(self,x,c,d)
scipy.stats._continuous_distns.burr_gen._munp(self,n,c,d)
scipy.stats._continuous_distns.burr_gen._pdf(self,x,c,d)
scipy.stats._continuous_distns.burr_gen._ppf(self,q,c,d)
scipy.stats._continuous_distns.burr_gen._sf(self,x,c,d)
scipy.stats._continuous_distns.burr_gen._shape_info(self)
scipy.stats._continuous_distns.burr_gen._stats(self,c,d)
scipy.stats._continuous_distns.cauchy_gen(rv_continuous)
scipy.stats._continuous_distns.cauchy_gen._cdf(self,x)
scipy.stats._continuous_distns.cauchy_gen._entropy(self)
scipy.stats._continuous_distns.cauchy_gen._fitstart(self,data,args=None)
scipy.stats._continuous_distns.cauchy_gen._isf(self,q)
scipy.stats._continuous_distns.cauchy_gen._pdf(self,x)
scipy.stats._continuous_distns.cauchy_gen._ppf(self,q)
scipy.stats._continuous_distns.cauchy_gen._sf(self,x)
scipy.stats._continuous_distns.cauchy_gen._shape_info(self)
scipy.stats._continuous_distns.cauchy_gen._stats(self)
scipy.stats._continuous_distns.chi2_gen(rv_continuous)
scipy.stats._continuous_distns.chi2_gen._cdf(self,x,df)
scipy.stats._continuous_distns.chi2_gen._isf(self,p,df)
scipy.stats._continuous_distns.chi2_gen._logpdf(self,x,df)
scipy.stats._continuous_distns.chi2_gen._pdf(self,x,df)
scipy.stats._continuous_distns.chi2_gen._ppf(self,p,df)
scipy.stats._continuous_distns.chi2_gen._rvs(self,df,size=None,random_state=None)
scipy.stats._continuous_distns.chi2_gen._sf(self,x,df)
scipy.stats._continuous_distns.chi2_gen._shape_info(self)
scipy.stats._continuous_distns.chi2_gen._stats(self,df)
scipy.stats._continuous_distns.chi_gen(rv_continuous)
scipy.stats._continuous_distns.chi_gen._cdf(self,x,df)
scipy.stats._continuous_distns.chi_gen._isf(self,q,df)
scipy.stats._continuous_distns.chi_gen._logpdf(self,x,df)
scipy.stats._continuous_distns.chi_gen._pdf(self,x,df)
scipy.stats._continuous_distns.chi_gen._ppf(self,q,df)
scipy.stats._continuous_distns.chi_gen._rvs(self,df,size=None,random_state=None)
scipy.stats._continuous_distns.chi_gen._sf(self,x,df)
scipy.stats._continuous_distns.chi_gen._shape_info(self)
scipy.stats._continuous_distns.chi_gen._stats(self,df)
scipy.stats._continuous_distns.cosine_gen(rv_continuous)
scipy.stats._continuous_distns.cosine_gen._cdf(self,x)
scipy.stats._continuous_distns.cosine_gen._entropy(self)
scipy.stats._continuous_distns.cosine_gen._isf(self,p)
scipy.stats._continuous_distns.cosine_gen._logpdf(self,x)
scipy.stats._continuous_distns.cosine_gen._pdf(self,x)
scipy.stats._continuous_distns.cosine_gen._ppf(self,p)
scipy.stats._continuous_distns.cosine_gen._sf(self,x)
scipy.stats._continuous_distns.cosine_gen._shape_info(self)
scipy.stats._continuous_distns.cosine_gen._stats(self)
scipy.stats._continuous_distns.crystalball_gen(rv_continuous)
scipy.stats._continuous_distns.crystalball_gen._argcheck(self,beta,m)
scipy.stats._continuous_distns.crystalball_gen._cdf(self,x,beta,m)
scipy.stats._continuous_distns.crystalball_gen._fitstart(self,data)
scipy.stats._continuous_distns.crystalball_gen._logpdf(self,x,beta,m)
scipy.stats._continuous_distns.crystalball_gen._munp(self,n,beta,m)
scipy.stats._continuous_distns.crystalball_gen._pdf(self,x,beta,m)
scipy.stats._continuous_distns.crystalball_gen._ppf(self,p,beta,m)
scipy.stats._continuous_distns.crystalball_gen._shape_info(self)
scipy.stats._continuous_distns.dgamma_gen(rv_continuous)
scipy.stats._continuous_distns.dgamma_gen._cdf(self,x,a)
scipy.stats._continuous_distns.dgamma_gen._logpdf(self,x,a)
scipy.stats._continuous_distns.dgamma_gen._pdf(self,x,a)
scipy.stats._continuous_distns.dgamma_gen._ppf(self,q,a)
scipy.stats._continuous_distns.dgamma_gen._rvs(self,a,size=None,random_state=None)
scipy.stats._continuous_distns.dgamma_gen._sf(self,x,a)
scipy.stats._continuous_distns.dgamma_gen._shape_info(self)
scipy.stats._continuous_distns.dgamma_gen._stats(self,a)
scipy.stats._continuous_distns.dweibull_gen(rv_continuous)
scipy.stats._continuous_distns.dweibull_gen._cdf(self,x,c)
scipy.stats._continuous_distns.dweibull_gen._logpdf(self,x,c)
scipy.stats._continuous_distns.dweibull_gen._munp(self,n,c)
scipy.stats._continuous_distns.dweibull_gen._pdf(self,x,c)
scipy.stats._continuous_distns.dweibull_gen._ppf(self,q,c)
scipy.stats._continuous_distns.dweibull_gen._rvs(self,c,size=None,random_state=None)
scipy.stats._continuous_distns.dweibull_gen._shape_info(self)
scipy.stats._continuous_distns.dweibull_gen._stats(self,c)
scipy.stats._continuous_distns.erlang_gen(gamma_gen)
scipy.stats._continuous_distns.erlang_gen._argcheck(self,a)
scipy.stats._continuous_distns.erlang_gen._fitstart(self,data)
scipy.stats._continuous_distns.erlang_gen._shape_info(self)
scipy.stats._continuous_distns.erlang_gen.fit(self,data,*args,**kwds)
scipy.stats._continuous_distns.expon_gen(rv_continuous)
scipy.stats._continuous_distns.expon_gen._cdf(self,x)
scipy.stats._continuous_distns.expon_gen._entropy(self)
scipy.stats._continuous_distns.expon_gen._isf(self,q)
scipy.stats._continuous_distns.expon_gen._logpdf(self,x)
scipy.stats._continuous_distns.expon_gen._logsf(self,x)
scipy.stats._continuous_distns.expon_gen._pdf(self,x)
scipy.stats._continuous_distns.expon_gen._ppf(self,q)
scipy.stats._continuous_distns.expon_gen._rvs(self,size=None,random_state=None)
scipy.stats._continuous_distns.expon_gen._sf(self,x)
scipy.stats._continuous_distns.expon_gen._shape_info(self)
scipy.stats._continuous_distns.expon_gen._stats(self)
scipy.stats._continuous_distns.expon_gen.fit(self,data,*args,**kwds)
scipy.stats._continuous_distns.exponnorm_gen(rv_continuous)
scipy.stats._continuous_distns.exponnorm_gen._cdf(self,x,K)
scipy.stats._continuous_distns.exponnorm_gen._logpdf(self,x,K)
scipy.stats._continuous_distns.exponnorm_gen._pdf(self,x,K)
scipy.stats._continuous_distns.exponnorm_gen._rvs(self,K,size=None,random_state=None)
scipy.stats._continuous_distns.exponnorm_gen._sf(self,x,K)
scipy.stats._continuous_distns.exponnorm_gen._shape_info(self)
scipy.stats._continuous_distns.exponnorm_gen._stats(self,K)
scipy.stats._continuous_distns.exponpow_gen(rv_continuous)
scipy.stats._continuous_distns.exponpow_gen._cdf(self,x,b)
scipy.stats._continuous_distns.exponpow_gen._isf(self,x,b)
scipy.stats._continuous_distns.exponpow_gen._logpdf(self,x,b)
scipy.stats._continuous_distns.exponpow_gen._pdf(self,x,b)
scipy.stats._continuous_distns.exponpow_gen._ppf(self,q,b)
scipy.stats._continuous_distns.exponpow_gen._sf(self,x,b)
scipy.stats._continuous_distns.exponpow_gen._shape_info(self)
scipy.stats._continuous_distns.exponweib_gen(rv_continuous)
scipy.stats._continuous_distns.exponweib_gen._cdf(self,x,a,c)
scipy.stats._continuous_distns.exponweib_gen._logpdf(self,x,a,c)
scipy.stats._continuous_distns.exponweib_gen._pdf(self,x,a,c)
scipy.stats._continuous_distns.exponweib_gen._ppf(self,q,a,c)
scipy.stats._continuous_distns.exponweib_gen._shape_info(self)
scipy.stats._continuous_distns.f_gen(rv_continuous)
scipy.stats._continuous_distns.f_gen._cdf(self,x,dfn,dfd)
scipy.stats._continuous_distns.f_gen._logpdf(self,x,dfn,dfd)
scipy.stats._continuous_distns.f_gen._pdf(self,x,dfn,dfd)
scipy.stats._continuous_distns.f_gen._ppf(self,q,dfn,dfd)
scipy.stats._continuous_distns.f_gen._rvs(self,dfn,dfd,size=None,random_state=None)
scipy.stats._continuous_distns.f_gen._sf(self,x,dfn,dfd)
scipy.stats._continuous_distns.f_gen._shape_info(self)
scipy.stats._continuous_distns.f_gen._stats(self,dfn,dfd)
scipy.stats._continuous_distns.fatiguelife_gen(rv_continuous)
scipy.stats._continuous_distns.fatiguelife_gen._cdf(self,x,c)
scipy.stats._continuous_distns.fatiguelife_gen._isf(self,q,c)
scipy.stats._continuous_distns.fatiguelife_gen._logpdf(self,x,c)
scipy.stats._continuous_distns.fatiguelife_gen._pdf(self,x,c)
scipy.stats._continuous_distns.fatiguelife_gen._ppf(self,q,c)
scipy.stats._continuous_distns.fatiguelife_gen._rvs(self,c,size=None,random_state=None)
scipy.stats._continuous_distns.fatiguelife_gen._sf(self,x,c)
scipy.stats._continuous_distns.fatiguelife_gen._shape_info(self)
scipy.stats._continuous_distns.fatiguelife_gen._stats(self,c)
scipy.stats._continuous_distns.fisk_gen(burr_gen)
scipy.stats._continuous_distns.fisk_gen._cdf(self,x,c)
scipy.stats._continuous_distns.fisk_gen._entropy(self,c)
scipy.stats._continuous_distns.fisk_gen._logcdf(self,x,c)
scipy.stats._continuous_distns.fisk_gen._logpdf(self,x,c)
scipy.stats._continuous_distns.fisk_gen._logsf(self,x,c)
scipy.stats._continuous_distns.fisk_gen._munp(self,n,c)
scipy.stats._continuous_distns.fisk_gen._pdf(self,x,c)
scipy.stats._continuous_distns.fisk_gen._ppf(self,x,c)
scipy.stats._continuous_distns.fisk_gen._sf(self,x,c)
scipy.stats._continuous_distns.fisk_gen._shape_info(self)
scipy.stats._continuous_distns.fisk_gen._stats(self,c)
scipy.stats._continuous_distns.foldcauchy_gen(rv_continuous)
scipy.stats._continuous_distns.foldcauchy_gen._argcheck(self,c)
scipy.stats._continuous_distns.foldcauchy_gen._cdf(self,x,c)
scipy.stats._continuous_distns.foldcauchy_gen._pdf(self,x,c)
scipy.stats._continuous_distns.foldcauchy_gen._rvs(self,c,size=None,random_state=None)
scipy.stats._continuous_distns.foldcauchy_gen._shape_info(self)
scipy.stats._continuous_distns.foldcauchy_gen._stats(self,c)
scipy.stats._continuous_distns.foldnorm_gen(rv_continuous)
scipy.stats._continuous_distns.foldnorm_gen._argcheck(self,c)
scipy.stats._continuous_distns.foldnorm_gen._cdf(self,x,c)
scipy.stats._continuous_distns.foldnorm_gen._pdf(self,x,c)
scipy.stats._continuous_distns.foldnorm_gen._rvs(self,c,size=None,random_state=None)
scipy.stats._continuous_distns.foldnorm_gen._shape_info(self)
scipy.stats._continuous_distns.foldnorm_gen._stats(self,c)
scipy.stats._continuous_distns.gamma_gen(rv_continuous)
scipy.stats._continuous_distns.gamma_gen._cdf(self,x,a)
scipy.stats._continuous_distns.gamma_gen._entropy(self,a)
scipy.stats._continuous_distns.gamma_gen._fitstart(self,data)
scipy.stats._continuous_distns.gamma_gen._isf(self,q,a)
scipy.stats._continuous_distns.gamma_gen._logpdf(self,x,a)
scipy.stats._continuous_distns.gamma_gen._pdf(self,x,a)
scipy.stats._continuous_distns.gamma_gen._ppf(self,q,a)
scipy.stats._continuous_distns.gamma_gen._rvs(self,a,size=None,random_state=None)
scipy.stats._continuous_distns.gamma_gen._sf(self,x,a)
scipy.stats._continuous_distns.gamma_gen._shape_info(self)
scipy.stats._continuous_distns.gamma_gen._stats(self,a)
scipy.stats._continuous_distns.gamma_gen.fit(self,data,*args,**kwds)
scipy.stats._continuous_distns.gausshyper_gen(rv_continuous)
scipy.stats._continuous_distns.gausshyper_gen._argcheck(self,a,b,c,z)
scipy.stats._continuous_distns.gausshyper_gen._munp(self,n,a,b,c,z)
scipy.stats._continuous_distns.gausshyper_gen._pdf(self,x,a,b,c,z)
scipy.stats._continuous_distns.gausshyper_gen._shape_info(self)
scipy.stats._continuous_distns.genexpon_gen(rv_continuous)
scipy.stats._continuous_distns.genexpon_gen._cdf(self,x,a,b,c)
scipy.stats._continuous_distns.genexpon_gen._logpdf(self,x,a,b,c)
scipy.stats._continuous_distns.genexpon_gen._pdf(self,x,a,b,c)
scipy.stats._continuous_distns.genexpon_gen._sf(self,x,a,b,c)
scipy.stats._continuous_distns.genexpon_gen._shape_info(self)
scipy.stats._continuous_distns.genextreme_gen(rv_continuous)
scipy.stats._continuous_distns.genextreme_gen._argcheck(self,c)
scipy.stats._continuous_distns.genextreme_gen._cdf(self,x,c)
scipy.stats._continuous_distns.genextreme_gen._entropy(self,c)
scipy.stats._continuous_distns.genextreme_gen._fitstart(self,data)
scipy.stats._continuous_distns.genextreme_gen._get_support(self,c)
scipy.stats._continuous_distns.genextreme_gen._isf(self,q,c)
scipy.stats._continuous_distns.genextreme_gen._logcdf(self,x,c)
scipy.stats._continuous_distns.genextreme_gen._loglogcdf(self,x,c)
scipy.stats._continuous_distns.genextreme_gen._logpdf(self,x,c)
scipy.stats._continuous_distns.genextreme_gen._munp(self,n,c)
scipy.stats._continuous_distns.genextreme_gen._pdf(self,x,c)
scipy.stats._continuous_distns.genextreme_gen._ppf(self,q,c)
scipy.stats._continuous_distns.genextreme_gen._sf(self,x,c)
scipy.stats._continuous_distns.genextreme_gen._shape_info(self)
scipy.stats._continuous_distns.genextreme_gen._stats(self,c)
scipy.stats._continuous_distns.gengamma_gen(rv_continuous)
scipy.stats._continuous_distns.gengamma_gen._argcheck(self,a,c)
scipy.stats._continuous_distns.gengamma_gen._cdf(self,x,a,c)
scipy.stats._continuous_distns.gengamma_gen._entropy(self,a,c)
scipy.stats._continuous_distns.gengamma_gen._isf(self,q,a,c)
scipy.stats._continuous_distns.gengamma_gen._logpdf(self,x,a,c)
scipy.stats._continuous_distns.gengamma_gen._munp(self,n,a,c)
scipy.stats._continuous_distns.gengamma_gen._pdf(self,x,a,c)
scipy.stats._continuous_distns.gengamma_gen._ppf(self,q,a,c)
scipy.stats._continuous_distns.gengamma_gen._rvs(self,a,c,size=None,random_state=None)
scipy.stats._continuous_distns.gengamma_gen._sf(self,x,a,c)
scipy.stats._continuous_distns.gengamma_gen._shape_info(self)
scipy.stats._continuous_distns.genhalflogistic_gen(rv_continuous)
scipy.stats._continuous_distns.genhalflogistic_gen._cdf(self,x,c)
scipy.stats._continuous_distns.genhalflogistic_gen._entropy(self,c)
scipy.stats._continuous_distns.genhalflogistic_gen._get_support(self,c)
scipy.stats._continuous_distns.genhalflogistic_gen._pdf(self,x,c)
scipy.stats._continuous_distns.genhalflogistic_gen._ppf(self,q,c)
scipy.stats._continuous_distns.genhalflogistic_gen._shape_info(self)
scipy.stats._continuous_distns.genhyperbolic_gen(rv_continuous)
scipy.stats._continuous_distns.genhyperbolic_gen._argcheck(self,p,a,b)
scipy.stats._continuous_distns.genhyperbolic_gen._cdf(self,x,p,a,b)
scipy.stats._continuous_distns.genhyperbolic_gen._fitstart(self,data)
scipy.stats._continuous_distns.genhyperbolic_gen._logpdf(self,x,p,a,b)
scipy.stats._continuous_distns.genhyperbolic_gen._pdf(self,x,p,a,b)
scipy.stats._continuous_distns.genhyperbolic_gen._rvs(self,p,a,b,size=None,random_state=None)
scipy.stats._continuous_distns.genhyperbolic_gen._shape_info(self)
scipy.stats._continuous_distns.genhyperbolic_gen._stats(self,p,a,b)
scipy.stats._continuous_distns.geninvgauss_gen(rv_continuous)
scipy.stats._continuous_distns.geninvgauss_gen._argcheck(self,p,b)
scipy.stats._continuous_distns.geninvgauss_gen._cdf(self,x,*args)
scipy.stats._continuous_distns.geninvgauss_gen._logpdf(self,x,p,b)
scipy.stats._continuous_distns.geninvgauss_gen._logquasipdf(self,x,p,b)
scipy.stats._continuous_distns.geninvgauss_gen._mode(self,p,b)
scipy.stats._continuous_distns.geninvgauss_gen._munp(self,n,p,b)
scipy.stats._continuous_distns.geninvgauss_gen._pdf(self,x,p,b)
scipy.stats._continuous_distns.geninvgauss_gen._rvs(self,p,b,size=None,random_state=None)
scipy.stats._continuous_distns.geninvgauss_gen._rvs_scalar(self,p,b,numsamples,random_state)
scipy.stats._continuous_distns.geninvgauss_gen._shape_info(self)
scipy.stats._continuous_distns.genlogistic_gen(rv_continuous)
scipy.stats._continuous_distns.genlogistic_gen._cdf(self,x,c)
scipy.stats._continuous_distns.genlogistic_gen._logpdf(self,x,c)
scipy.stats._continuous_distns.genlogistic_gen._pdf(self,x,c)
scipy.stats._continuous_distns.genlogistic_gen._ppf(self,q,c)
scipy.stats._continuous_distns.genlogistic_gen._shape_info(self)
scipy.stats._continuous_distns.genlogistic_gen._stats(self,c)
scipy.stats._continuous_distns.gennorm_gen(rv_continuous)
scipy.stats._continuous_distns.gennorm_gen._cdf(self,x,beta)
scipy.stats._continuous_distns.gennorm_gen._entropy(self,beta)
scipy.stats._continuous_distns.gennorm_gen._isf(self,x,beta)
scipy.stats._continuous_distns.gennorm_gen._logpdf(self,x,beta)
scipy.stats._continuous_distns.gennorm_gen._pdf(self,x,beta)
scipy.stats._continuous_distns.gennorm_gen._ppf(self,x,beta)
scipy.stats._continuous_distns.gennorm_gen._rvs(self,beta,size=None,random_state=None)
scipy.stats._continuous_distns.gennorm_gen._sf(self,x,beta)
scipy.stats._continuous_distns.gennorm_gen._shape_info(self)
scipy.stats._continuous_distns.gennorm_gen._stats(self,beta)
scipy.stats._continuous_distns.genpareto_gen(rv_continuous)
scipy.stats._continuous_distns.genpareto_gen._argcheck(self,c)
scipy.stats._continuous_distns.genpareto_gen._cdf(self,x,c)
scipy.stats._continuous_distns.genpareto_gen._entropy(self,c)
scipy.stats._continuous_distns.genpareto_gen._get_support(self,c)
scipy.stats._continuous_distns.genpareto_gen._isf(self,q,c)
scipy.stats._continuous_distns.genpareto_gen._logpdf(self,x,c)
scipy.stats._continuous_distns.genpareto_gen._logsf(self,x,c)
scipy.stats._continuous_distns.genpareto_gen._munp(self,n,c)
scipy.stats._continuous_distns.genpareto_gen._pdf(self,x,c)
scipy.stats._continuous_distns.genpareto_gen._ppf(self,q,c)
scipy.stats._continuous_distns.genpareto_gen._sf(self,x,c)
scipy.stats._continuous_distns.genpareto_gen._shape_info(self)
scipy.stats._continuous_distns.genpareto_gen._stats(self,c,moments='mv')
scipy.stats._continuous_distns.gibrat_gen(rv_continuous)
scipy.stats._continuous_distns.gibrat_gen._cdf(self,x)
scipy.stats._continuous_distns.gibrat_gen._entropy(self)
scipy.stats._continuous_distns.gibrat_gen._logpdf(self,x)
scipy.stats._continuous_distns.gibrat_gen._pdf(self,x)
scipy.stats._continuous_distns.gibrat_gen._ppf(self,q)
scipy.stats._continuous_distns.gibrat_gen._rvs(self,size=None,random_state=None)
scipy.stats._continuous_distns.gibrat_gen._shape_info(self)
scipy.stats._continuous_distns.gibrat_gen._stats(self)
scipy.stats._continuous_distns.gilbrat_gen(self,*args,**kwds)
scipy.stats._continuous_distns.gilbrat_gen.__call__(self,*args,**kwds)
scipy.stats._continuous_distns.gompertz_gen(rv_continuous)
scipy.stats._continuous_distns.gompertz_gen._cdf(self,x,c)
scipy.stats._continuous_distns.gompertz_gen._entropy(self,c)
scipy.stats._continuous_distns.gompertz_gen._logpdf(self,x,c)
scipy.stats._continuous_distns.gompertz_gen._pdf(self,x,c)
scipy.stats._continuous_distns.gompertz_gen._ppf(self,q,c)
scipy.stats._continuous_distns.gompertz_gen._shape_info(self)
scipy.stats._continuous_distns.gumbel_l_gen(rv_continuous)
scipy.stats._continuous_distns.gumbel_l_gen._cdf(self,x)
scipy.stats._continuous_distns.gumbel_l_gen._entropy(self)
scipy.stats._continuous_distns.gumbel_l_gen._isf(self,x)
scipy.stats._continuous_distns.gumbel_l_gen._logpdf(self,x)
scipy.stats._continuous_distns.gumbel_l_gen._logsf(self,x)
scipy.stats._continuous_distns.gumbel_l_gen._pdf(self,x)
scipy.stats._continuous_distns.gumbel_l_gen._ppf(self,q)
scipy.stats._continuous_distns.gumbel_l_gen._sf(self,x)
scipy.stats._continuous_distns.gumbel_l_gen._shape_info(self)
scipy.stats._continuous_distns.gumbel_l_gen._stats(self)
scipy.stats._continuous_distns.gumbel_l_gen.fit(self,data,*args,**kwds)
scipy.stats._continuous_distns.gumbel_r_gen(rv_continuous)
scipy.stats._continuous_distns.gumbel_r_gen._cdf(self,x)
scipy.stats._continuous_distns.gumbel_r_gen._entropy(self)
scipy.stats._continuous_distns.gumbel_r_gen._isf(self,p)
scipy.stats._continuous_distns.gumbel_r_gen._logcdf(self,x)
scipy.stats._continuous_distns.gumbel_r_gen._logpdf(self,x)
scipy.stats._continuous_distns.gumbel_r_gen._pdf(self,x)
scipy.stats._continuous_distns.gumbel_r_gen._ppf(self,q)
scipy.stats._continuous_distns.gumbel_r_gen._sf(self,x)
scipy.stats._continuous_distns.gumbel_r_gen._shape_info(self)
scipy.stats._continuous_distns.gumbel_r_gen._stats(self)
scipy.stats._continuous_distns.gumbel_r_gen.fit(self,data,*args,**kwds)
scipy.stats._continuous_distns.halfcauchy_gen(rv_continuous)
scipy.stats._continuous_distns.halfcauchy_gen._cdf(self,x)
scipy.stats._continuous_distns.halfcauchy_gen._entropy(self)
scipy.stats._continuous_distns.halfcauchy_gen._logpdf(self,x)
scipy.stats._continuous_distns.halfcauchy_gen._pdf(self,x)
scipy.stats._continuous_distns.halfcauchy_gen._ppf(self,q)
scipy.stats._continuous_distns.halfcauchy_gen._shape_info(self)
scipy.stats._continuous_distns.halfcauchy_gen._stats(self)
scipy.stats._continuous_distns.halfgennorm_gen(rv_continuous)
scipy.stats._continuous_distns.halfgennorm_gen._cdf(self,x,beta)
scipy.stats._continuous_distns.halfgennorm_gen._entropy(self,beta)
scipy.stats._continuous_distns.halfgennorm_gen._isf(self,x,beta)
scipy.stats._continuous_distns.halfgennorm_gen._logpdf(self,x,beta)
scipy.stats._continuous_distns.halfgennorm_gen._pdf(self,x,beta)
scipy.stats._continuous_distns.halfgennorm_gen._ppf(self,x,beta)
scipy.stats._continuous_distns.halfgennorm_gen._sf(self,x,beta)
scipy.stats._continuous_distns.halfgennorm_gen._shape_info(self)
scipy.stats._continuous_distns.halflogistic_gen(rv_continuous)
scipy.stats._continuous_distns.halflogistic_gen._cdf(self,x)
scipy.stats._continuous_distns.halflogistic_gen._entropy(self)
scipy.stats._continuous_distns.halflogistic_gen._logpdf(self,x)
scipy.stats._continuous_distns.halflogistic_gen._munp(self,n)
scipy.stats._continuous_distns.halflogistic_gen._pdf(self,x)
scipy.stats._continuous_distns.halflogistic_gen._ppf(self,q)
scipy.stats._continuous_distns.halflogistic_gen._shape_info(self)
scipy.stats._continuous_distns.halfnorm_gen(rv_continuous)
scipy.stats._continuous_distns.halfnorm_gen._cdf(self,x)
scipy.stats._continuous_distns.halfnorm_gen._entropy(self)
scipy.stats._continuous_distns.halfnorm_gen._logpdf(self,x)
scipy.stats._continuous_distns.halfnorm_gen._pdf(self,x)
scipy.stats._continuous_distns.halfnorm_gen._ppf(self,q)
scipy.stats._continuous_distns.halfnorm_gen._rvs(self,size=None,random_state=None)
scipy.stats._continuous_distns.halfnorm_gen._shape_info(self)
scipy.stats._continuous_distns.halfnorm_gen._stats(self)
scipy.stats._continuous_distns.hypsecant_gen(rv_continuous)
scipy.stats._continuous_distns.hypsecant_gen._cdf(self,x)
scipy.stats._continuous_distns.hypsecant_gen._entropy(self)
scipy.stats._continuous_distns.hypsecant_gen._pdf(self,x)
scipy.stats._continuous_distns.hypsecant_gen._ppf(self,q)
scipy.stats._continuous_distns.hypsecant_gen._shape_info(self)
scipy.stats._continuous_distns.hypsecant_gen._stats(self)
scipy.stats._continuous_distns.invgamma_gen(rv_continuous)
scipy.stats._continuous_distns.invgamma_gen._cdf(self,x,a)
scipy.stats._continuous_distns.invgamma_gen._entropy(self,a)
scipy.stats._continuous_distns.invgamma_gen._isf(self,q,a)
scipy.stats._continuous_distns.invgamma_gen._logpdf(self,x,a)
scipy.stats._continuous_distns.invgamma_gen._pdf(self,x,a)
scipy.stats._continuous_distns.invgamma_gen._ppf(self,q,a)
scipy.stats._continuous_distns.invgamma_gen._sf(self,x,a)
scipy.stats._continuous_distns.invgamma_gen._shape_info(self)
scipy.stats._continuous_distns.invgamma_gen._stats(self,a,moments='mvsk')
scipy.stats._continuous_distns.invgauss_gen(rv_continuous)
scipy.stats._continuous_distns.invgauss_gen._cdf(self,x,mu)
scipy.stats._continuous_distns.invgauss_gen._isf(self,x,mu)
scipy.stats._continuous_distns.invgauss_gen._logcdf(self,x,mu)
scipy.stats._continuous_distns.invgauss_gen._logpdf(self,x,mu)
scipy.stats._continuous_distns.invgauss_gen._logsf(self,x,mu)
scipy.stats._continuous_distns.invgauss_gen._pdf(self,x,mu)
scipy.stats._continuous_distns.invgauss_gen._ppf(self,x,mu)
scipy.stats._continuous_distns.invgauss_gen._rvs(self,mu,size=None,random_state=None)
scipy.stats._continuous_distns.invgauss_gen._sf(self,x,mu)
scipy.stats._continuous_distns.invgauss_gen._shape_info(self)
scipy.stats._continuous_distns.invgauss_gen._stats(self,mu)
scipy.stats._continuous_distns.invgauss_gen.fit(self,data,*args,**kwds)
scipy.stats._continuous_distns.invweibull_gen(rv_continuous)
scipy.stats._continuous_distns.invweibull_gen._cdf(self,x,c)
scipy.stats._continuous_distns.invweibull_gen._entropy(self,c)
scipy.stats._continuous_distns.invweibull_gen._fitstart(self,data,args=None)
scipy.stats._continuous_distns.invweibull_gen._isf(self,p,c)
scipy.stats._continuous_distns.invweibull_gen._munp(self,n,c)
scipy.stats._continuous_distns.invweibull_gen._pdf(self,x,c)
scipy.stats._continuous_distns.invweibull_gen._ppf(self,q,c)
scipy.stats._continuous_distns.invweibull_gen._sf(self,x,c)
scipy.stats._continuous_distns.invweibull_gen._shape_info(self)
scipy.stats._continuous_distns.johnsonsb_gen(rv_continuous)
scipy.stats._continuous_distns.johnsonsb_gen._argcheck(self,a,b)
scipy.stats._continuous_distns.johnsonsb_gen._cdf(self,x,a,b)
scipy.stats._continuous_distns.johnsonsb_gen._pdf(self,x,a,b)
scipy.stats._continuous_distns.johnsonsb_gen._ppf(self,q,a,b)
scipy.stats._continuous_distns.johnsonsb_gen._shape_info(self)
scipy.stats._continuous_distns.johnsonsu_gen(rv_continuous)
scipy.stats._continuous_distns.johnsonsu_gen._argcheck(self,a,b)
scipy.stats._continuous_distns.johnsonsu_gen._cdf(self,x,a,b)
scipy.stats._continuous_distns.johnsonsu_gen._pdf(self,x,a,b)
scipy.stats._continuous_distns.johnsonsu_gen._ppf(self,q,a,b)
scipy.stats._continuous_distns.johnsonsu_gen._shape_info(self)
scipy.stats._continuous_distns.kappa3_gen(rv_continuous)
scipy.stats._continuous_distns.kappa3_gen._cdf(self,x,a)
scipy.stats._continuous_distns.kappa3_gen._mom1_sc(self,m,*args)
scipy.stats._continuous_distns.kappa3_gen._pdf(self,x,a)
scipy.stats._continuous_distns.kappa3_gen._ppf(self,q,a)
scipy.stats._continuous_distns.kappa3_gen._shape_info(self)
scipy.stats._continuous_distns.kappa3_gen._stats(self,a)
scipy.stats._continuous_distns.kappa4_gen(rv_continuous)
scipy.stats._continuous_distns.kappa4_gen._argcheck(self,h,k)
scipy.stats._continuous_distns.kappa4_gen._cdf(self,x,h,k)
scipy.stats._continuous_distns.kappa4_gen._get_stats_info(self,h,k)
scipy.stats._continuous_distns.kappa4_gen._get_support(self,h,k)
scipy.stats._continuous_distns.kappa4_gen._logcdf(self,x,h,k)
scipy.stats._continuous_distns.kappa4_gen._logpdf(self,x,h,k)
scipy.stats._continuous_distns.kappa4_gen._mom1_sc(self,m,*args)
scipy.stats._continuous_distns.kappa4_gen._pdf(self,x,h,k)
scipy.stats._continuous_distns.kappa4_gen._ppf(self,q,h,k)
scipy.stats._continuous_distns.kappa4_gen._shape_info(self)
scipy.stats._continuous_distns.kappa4_gen._stats(self,h,k)
scipy.stats._continuous_distns.ksone_gen(rv_continuous)
scipy.stats._continuous_distns.ksone_gen._argcheck(self,n)
scipy.stats._continuous_distns.ksone_gen._cdf(self,x,n)
scipy.stats._continuous_distns.ksone_gen._isf(self,q,n)
scipy.stats._continuous_distns.ksone_gen._pdf(self,x,n)
scipy.stats._continuous_distns.ksone_gen._ppf(self,q,n)
scipy.stats._continuous_distns.ksone_gen._sf(self,x,n)
scipy.stats._continuous_distns.ksone_gen._shape_info(self)
scipy.stats._continuous_distns.kstwo_gen(rv_continuous)
scipy.stats._continuous_distns.kstwo_gen._argcheck(self,n)
scipy.stats._continuous_distns.kstwo_gen._cdf(self,x,n)
scipy.stats._continuous_distns.kstwo_gen._get_support(self,n)
scipy.stats._continuous_distns.kstwo_gen._isf(self,q,n)
scipy.stats._continuous_distns.kstwo_gen._pdf(self,x,n)
scipy.stats._continuous_distns.kstwo_gen._ppf(self,q,n)
scipy.stats._continuous_distns.kstwo_gen._sf(self,x,n)
scipy.stats._continuous_distns.kstwo_gen._shape_info(self)
scipy.stats._continuous_distns.kstwobign_gen(rv_continuous)
scipy.stats._continuous_distns.kstwobign_gen._cdf(self,x)
scipy.stats._continuous_distns.kstwobign_gen._isf(self,q)
scipy.stats._continuous_distns.kstwobign_gen._pdf(self,x)
scipy.stats._continuous_distns.kstwobign_gen._ppf(self,q)
scipy.stats._continuous_distns.kstwobign_gen._sf(self,x)
scipy.stats._continuous_distns.kstwobign_gen._shape_info(self)
scipy.stats._continuous_distns.laplace_asymmetric_gen(rv_continuous)
scipy.stats._continuous_distns.laplace_asymmetric_gen._cdf(self,x,kappa)
scipy.stats._continuous_distns.laplace_asymmetric_gen._entropy(self,kappa)
scipy.stats._continuous_distns.laplace_asymmetric_gen._isf(self,q,kappa)
scipy.stats._continuous_distns.laplace_asymmetric_gen._logpdf(self,x,kappa)
scipy.stats._continuous_distns.laplace_asymmetric_gen._pdf(self,x,kappa)
scipy.stats._continuous_distns.laplace_asymmetric_gen._ppf(self,q,kappa)
scipy.stats._continuous_distns.laplace_asymmetric_gen._sf(self,x,kappa)
scipy.stats._continuous_distns.laplace_asymmetric_gen._shape_info(self)
scipy.stats._continuous_distns.laplace_asymmetric_gen._stats(self,kappa)
scipy.stats._continuous_distns.laplace_gen(rv_continuous)
scipy.stats._continuous_distns.laplace_gen._cdf(self,x)
scipy.stats._continuous_distns.laplace_gen._entropy(self)
scipy.stats._continuous_distns.laplace_gen._isf(self,q)
scipy.stats._continuous_distns.laplace_gen._pdf(self,x)
scipy.stats._continuous_distns.laplace_gen._ppf(self,q)
scipy.stats._continuous_distns.laplace_gen._rvs(self,size=None,random_state=None)
scipy.stats._continuous_distns.laplace_gen._sf(self,x)
scipy.stats._continuous_distns.laplace_gen._shape_info(self)
scipy.stats._continuous_distns.laplace_gen._stats(self)
scipy.stats._continuous_distns.laplace_gen.fit(self,data,*args,**kwds)
scipy.stats._continuous_distns.levy_gen(rv_continuous)
scipy.stats._continuous_distns.levy_gen._cdf(self,x)
scipy.stats._continuous_distns.levy_gen._isf(self,p)
scipy.stats._continuous_distns.levy_gen._pdf(self,x)
scipy.stats._continuous_distns.levy_gen._ppf(self,q)
scipy.stats._continuous_distns.levy_gen._sf(self,x)
scipy.stats._continuous_distns.levy_gen._shape_info(self)
scipy.stats._continuous_distns.levy_gen._stats(self)
scipy.stats._continuous_distns.levy_l_gen(rv_continuous)
scipy.stats._continuous_distns.levy_l_gen._cdf(self,x)
scipy.stats._continuous_distns.levy_l_gen._isf(self,p)
scipy.stats._continuous_distns.levy_l_gen._pdf(self,x)
scipy.stats._continuous_distns.levy_l_gen._ppf(self,q)
scipy.stats._continuous_distns.levy_l_gen._sf(self,x)
scipy.stats._continuous_distns.levy_l_gen._shape_info(self)
scipy.stats._continuous_distns.levy_l_gen._stats(self)
scipy.stats._continuous_distns.loggamma_gen(rv_continuous)
scipy.stats._continuous_distns.loggamma_gen._cdf(self,x,c)
scipy.stats._continuous_distns.loggamma_gen._isf(self,q,c)
scipy.stats._continuous_distns.loggamma_gen._logpdf(self,x,c)
scipy.stats._continuous_distns.loggamma_gen._pdf(self,x,c)
scipy.stats._continuous_distns.loggamma_gen._ppf(self,q,c)
scipy.stats._continuous_distns.loggamma_gen._rvs(self,c,size=None,random_state=None)
scipy.stats._continuous_distns.loggamma_gen._sf(self,x,c)
scipy.stats._continuous_distns.loggamma_gen._shape_info(self)
scipy.stats._continuous_distns.loggamma_gen._stats(self,c)
scipy.stats._continuous_distns.logistic_gen(rv_continuous)
scipy.stats._continuous_distns.logistic_gen._cdf(self,x)
scipy.stats._continuous_distns.logistic_gen._entropy(self)
scipy.stats._continuous_distns.logistic_gen._isf(self,q)
scipy.stats._continuous_distns.logistic_gen._logcdf(self,x)
scipy.stats._continuous_distns.logistic_gen._logpdf(self,x)
scipy.stats._continuous_distns.logistic_gen._logsf(self,x)
scipy.stats._continuous_distns.logistic_gen._pdf(self,x)
scipy.stats._continuous_distns.logistic_gen._ppf(self,q)
scipy.stats._continuous_distns.logistic_gen._rvs(self,size=None,random_state=None)
scipy.stats._continuous_distns.logistic_gen._sf(self,x)
scipy.stats._continuous_distns.logistic_gen._shape_info(self)
scipy.stats._continuous_distns.logistic_gen._stats(self)
scipy.stats._continuous_distns.logistic_gen.fit(self,data,*args,**kwds)
scipy.stats._continuous_distns.loglaplace_gen(rv_continuous)
scipy.stats._continuous_distns.loglaplace_gen._cdf(self,x,c)
scipy.stats._continuous_distns.loglaplace_gen._entropy(self,c)
scipy.stats._continuous_distns.loglaplace_gen._munp(self,n,c)
scipy.stats._continuous_distns.loglaplace_gen._pdf(self,x,c)
scipy.stats._continuous_distns.loglaplace_gen._ppf(self,q,c)
scipy.stats._continuous_distns.loglaplace_gen._shape_info(self)
scipy.stats._continuous_distns.lognorm_gen(rv_continuous)
scipy.stats._continuous_distns.lognorm_gen._cdf(self,x,s)
scipy.stats._continuous_distns.lognorm_gen._entropy(self,s)
scipy.stats._continuous_distns.lognorm_gen._logcdf(self,x,s)
scipy.stats._continuous_distns.lognorm_gen._logpdf(self,x,s)
scipy.stats._continuous_distns.lognorm_gen._logsf(self,x,s)
scipy.stats._continuous_distns.lognorm_gen._pdf(self,x,s)
scipy.stats._continuous_distns.lognorm_gen._ppf(self,q,s)
scipy.stats._continuous_distns.lognorm_gen._rvs(self,s,size=None,random_state=None)
scipy.stats._continuous_distns.lognorm_gen._sf(self,x,s)
scipy.stats._continuous_distns.lognorm_gen._shape_info(self)
scipy.stats._continuous_distns.lognorm_gen._stats(self,s)
scipy.stats._continuous_distns.lognorm_gen.fit(self,data,*args,**kwds)
scipy.stats._continuous_distns.lomax_gen(rv_continuous)
scipy.stats._continuous_distns.lomax_gen._cdf(self,x,c)
scipy.stats._continuous_distns.lomax_gen._entropy(self,c)
scipy.stats._continuous_distns.lomax_gen._logpdf(self,x,c)
scipy.stats._continuous_distns.lomax_gen._logsf(self,x,c)
scipy.stats._continuous_distns.lomax_gen._pdf(self,x,c)
scipy.stats._continuous_distns.lomax_gen._ppf(self,q,c)
scipy.stats._continuous_distns.lomax_gen._sf(self,x,c)
scipy.stats._continuous_distns.lomax_gen._shape_info(self)
scipy.stats._continuous_distns.lomax_gen._stats(self,c)
scipy.stats._continuous_distns.maxwell_gen(rv_continuous)
scipy.stats._continuous_distns.maxwell_gen._cdf(self,x)
scipy.stats._continuous_distns.maxwell_gen._entropy(self)
scipy.stats._continuous_distns.maxwell_gen._logpdf(self,x)
scipy.stats._continuous_distns.maxwell_gen._pdf(self,x)
scipy.stats._continuous_distns.maxwell_gen._ppf(self,q)
scipy.stats._continuous_distns.maxwell_gen._rvs(self,size=None,random_state=None)
scipy.stats._continuous_distns.maxwell_gen._shape_info(self)
scipy.stats._continuous_distns.maxwell_gen._stats(self)
scipy.stats._continuous_distns.mielke_gen(rv_continuous)
scipy.stats._continuous_distns.mielke_gen._cdf(self,x,k,s)
scipy.stats._continuous_distns.mielke_gen._logpdf(self,x,k,s)
scipy.stats._continuous_distns.mielke_gen._munp(self,n,k,s)
scipy.stats._continuous_distns.mielke_gen._pdf(self,x,k,s)
scipy.stats._continuous_distns.mielke_gen._ppf(self,q,k,s)
scipy.stats._continuous_distns.mielke_gen._shape_info(self)
scipy.stats._continuous_distns.moyal_gen(rv_continuous)
scipy.stats._continuous_distns.moyal_gen._cdf(self,x)
scipy.stats._continuous_distns.moyal_gen._munp(self,n)
scipy.stats._continuous_distns.moyal_gen._pdf(self,x)
scipy.stats._continuous_distns.moyal_gen._ppf(self,x)
scipy.stats._continuous_distns.moyal_gen._rvs(self,size=None,random_state=None)
scipy.stats._continuous_distns.moyal_gen._sf(self,x)
scipy.stats._continuous_distns.moyal_gen._shape_info(self)
scipy.stats._continuous_distns.moyal_gen._stats(self)
scipy.stats._continuous_distns.nakagami_gen(rv_continuous)
scipy.stats._continuous_distns.nakagami_gen._cdf(self,x,nu)
scipy.stats._continuous_distns.nakagami_gen._fitstart(self,data,args=None)
scipy.stats._continuous_distns.nakagami_gen._isf(self,p,nu)
scipy.stats._continuous_distns.nakagami_gen._logpdf(self,x,nu)
scipy.stats._continuous_distns.nakagami_gen._pdf(self,x,nu)
scipy.stats._continuous_distns.nakagami_gen._ppf(self,q,nu)
scipy.stats._continuous_distns.nakagami_gen._rvs(self,nu,size=None,random_state=None)
scipy.stats._continuous_distns.nakagami_gen._sf(self,x,nu)
scipy.stats._continuous_distns.nakagami_gen._shape_info(self)
scipy.stats._continuous_distns.nakagami_gen._stats(self,nu)
scipy.stats._continuous_distns.ncf_gen(rv_continuous)
scipy.stats._continuous_distns.ncf_gen._argcheck(self,df1,df2,nc)
scipy.stats._continuous_distns.ncf_gen._cdf(self,x,dfn,dfd,nc)
scipy.stats._continuous_distns.ncf_gen._isf(self,x,dfn,dfd,nc)
scipy.stats._continuous_distns.ncf_gen._munp(self,n,dfn,dfd,nc)
scipy.stats._continuous_distns.ncf_gen._pdf(self,x,dfn,dfd,nc)
scipy.stats._continuous_distns.ncf_gen._ppf(self,q,dfn,dfd,nc)
scipy.stats._continuous_distns.ncf_gen._rvs(self,dfn,dfd,nc,size=None,random_state=None)
scipy.stats._continuous_distns.ncf_gen._sf(self,x,dfn,dfd,nc)
scipy.stats._continuous_distns.ncf_gen._shape_info(self)
scipy.stats._continuous_distns.ncf_gen._stats(self,dfn,dfd,nc,moments='mv')
scipy.stats._continuous_distns.nct_gen(rv_continuous)
scipy.stats._continuous_distns.nct_gen._argcheck(self,df,nc)
scipy.stats._continuous_distns.nct_gen._cdf(self,x,df,nc)
scipy.stats._continuous_distns.nct_gen._isf(self,x,df,nc)
scipy.stats._continuous_distns.nct_gen._pdf(self,x,df,nc)
scipy.stats._continuous_distns.nct_gen._ppf(self,q,df,nc)
scipy.stats._continuous_distns.nct_gen._rvs(self,df,nc,size=None,random_state=None)
scipy.stats._continuous_distns.nct_gen._sf(self,x,df,nc)
scipy.stats._continuous_distns.nct_gen._shape_info(self)
scipy.stats._continuous_distns.nct_gen._stats(self,df,nc,moments='mv')
scipy.stats._continuous_distns.ncx2_gen(rv_continuous)
scipy.stats._continuous_distns.ncx2_gen._argcheck(self,df,nc)
scipy.stats._continuous_distns.ncx2_gen._cdf(self,x,df,nc)
scipy.stats._continuous_distns.ncx2_gen._isf(self,x,df,nc)
scipy.stats._continuous_distns.ncx2_gen._logpdf(self,x,df,nc)
scipy.stats._continuous_distns.ncx2_gen._pdf(self,x,df,nc)
scipy.stats._continuous_distns.ncx2_gen._ppf(self,q,df,nc)
scipy.stats._continuous_distns.ncx2_gen._rvs(self,df,nc,size=None,random_state=None)
scipy.stats._continuous_distns.ncx2_gen._sf(self,x,df,nc)
scipy.stats._continuous_distns.ncx2_gen._shape_info(self)
scipy.stats._continuous_distns.ncx2_gen._stats(self,df,nc)
scipy.stats._continuous_distns.norm_gen(rv_continuous)
scipy.stats._continuous_distns.norm_gen._cdf(self,x)
scipy.stats._continuous_distns.norm_gen._entropy(self)
scipy.stats._continuous_distns.norm_gen._isf(self,q)
scipy.stats._continuous_distns.norm_gen._logcdf(self,x)
scipy.stats._continuous_distns.norm_gen._logpdf(self,x)
scipy.stats._continuous_distns.norm_gen._logsf(self,x)
scipy.stats._continuous_distns.norm_gen._munp(self,n)
scipy.stats._continuous_distns.norm_gen._pdf(self,x)
scipy.stats._continuous_distns.norm_gen._ppf(self,q)
scipy.stats._continuous_distns.norm_gen._rvs(self,size=None,random_state=None)
scipy.stats._continuous_distns.norm_gen._sf(self,x)
scipy.stats._continuous_distns.norm_gen._shape_info(self)
scipy.stats._continuous_distns.norm_gen._stats(self)
scipy.stats._continuous_distns.norm_gen.fit(self,data,**kwds)
scipy.stats._continuous_distns.norminvgauss_gen(rv_continuous)
scipy.stats._continuous_distns.norminvgauss_gen._argcheck(self,a,b)
scipy.stats._continuous_distns.norminvgauss_gen._fitstart(self,data)
scipy.stats._continuous_distns.norminvgauss_gen._isf(self,q,a,b)
scipy.stats._continuous_distns.norminvgauss_gen._pdf(self,x,a,b)
scipy.stats._continuous_distns.norminvgauss_gen._rvs(self,a,b,size=None,random_state=None)
scipy.stats._continuous_distns.norminvgauss_gen._sf(self,x,a,b)
scipy.stats._continuous_distns.norminvgauss_gen._shape_info(self)
scipy.stats._continuous_distns.norminvgauss_gen._stats(self,a,b)
scipy.stats._continuous_distns.pareto_gen(rv_continuous)
scipy.stats._continuous_distns.pareto_gen._cdf(self,x,b)
scipy.stats._continuous_distns.pareto_gen._entropy(self,c)
scipy.stats._continuous_distns.pareto_gen._pdf(self,x,b)
scipy.stats._continuous_distns.pareto_gen._ppf(self,q,b)
scipy.stats._continuous_distns.pareto_gen._sf(self,x,b)
scipy.stats._continuous_distns.pareto_gen._shape_info(self)
scipy.stats._continuous_distns.pareto_gen._stats(self,b,moments='mv')
scipy.stats._continuous_distns.pareto_gen.fit(self,data,*args,**kwds)
scipy.stats._continuous_distns.pearson3_gen(rv_continuous)
scipy.stats._continuous_distns.pearson3_gen._argcheck(self,skew)
scipy.stats._continuous_distns.pearson3_gen._cdf(self,x,skew)
scipy.stats._continuous_distns.pearson3_gen._logpdf(self,x,skew)
scipy.stats._continuous_distns.pearson3_gen._pdf(self,x,skew)
scipy.stats._continuous_distns.pearson3_gen._ppf(self,q,skew)
scipy.stats._continuous_distns.pearson3_gen._preprocess(self,x,skew)
scipy.stats._continuous_distns.pearson3_gen._rvs(self,skew,size=None,random_state=None)
scipy.stats._continuous_distns.pearson3_gen._shape_info(self)
scipy.stats._continuous_distns.pearson3_gen._stats(self,skew)
scipy.stats._continuous_distns.pearson3_gen.fit(self,data,*args,**kwds)
scipy.stats._continuous_distns.powerlaw_gen(rv_continuous)
scipy.stats._continuous_distns.powerlaw_gen._cdf(self,x,a)
scipy.stats._continuous_distns.powerlaw_gen._entropy(self,a)
scipy.stats._continuous_distns.powerlaw_gen._logcdf(self,x,a)
scipy.stats._continuous_distns.powerlaw_gen._logpdf(self,x,a)
scipy.stats._continuous_distns.powerlaw_gen._pdf(self,x,a)
scipy.stats._continuous_distns.powerlaw_gen._ppf(self,q,a)
scipy.stats._continuous_distns.powerlaw_gen._shape_info(self)
scipy.stats._continuous_distns.powerlaw_gen._stats(self,a)
scipy.stats._continuous_distns.powerlaw_gen._support_mask(self,x,a)
scipy.stats._continuous_distns.powerlaw_gen.fit(self,data,*args,**kwds)
scipy.stats._continuous_distns.powerlognorm_gen(rv_continuous)
scipy.stats._continuous_distns.powerlognorm_gen._cdf(self,x,c,s)
scipy.stats._continuous_distns.powerlognorm_gen._pdf(self,x,c,s)
scipy.stats._continuous_distns.powerlognorm_gen._ppf(self,q,c,s)
scipy.stats._continuous_distns.powerlognorm_gen._shape_info(self)
scipy.stats._continuous_distns.powernorm_gen(rv_continuous)
scipy.stats._continuous_distns.powernorm_gen._cdf(self,x,c)
scipy.stats._continuous_distns.powernorm_gen._logpdf(self,x,c)
scipy.stats._continuous_distns.powernorm_gen._pdf(self,x,c)
scipy.stats._continuous_distns.powernorm_gen._ppf(self,q,c)
scipy.stats._continuous_distns.powernorm_gen._shape_info(self)
scipy.stats._continuous_distns.rayleigh_gen(rv_continuous)
scipy.stats._continuous_distns.rayleigh_gen._cdf(self,r)
scipy.stats._continuous_distns.rayleigh_gen._entropy(self)
scipy.stats._continuous_distns.rayleigh_gen._isf(self,q)
scipy.stats._continuous_distns.rayleigh_gen._logpdf(self,r)
scipy.stats._continuous_distns.rayleigh_gen._logsf(self,r)
scipy.stats._continuous_distns.rayleigh_gen._pdf(self,r)
scipy.stats._continuous_distns.rayleigh_gen._ppf(self,q)
scipy.stats._continuous_distns.rayleigh_gen._rvs(self,size=None,random_state=None)
scipy.stats._continuous_distns.rayleigh_gen._sf(self,r)
scipy.stats._continuous_distns.rayleigh_gen._shape_info(self)
scipy.stats._continuous_distns.rayleigh_gen._stats(self)
scipy.stats._continuous_distns.rayleigh_gen.fit(self,data,*args,**kwds)
scipy.stats._continuous_distns.rdist_gen(rv_continuous)
scipy.stats._continuous_distns.rdist_gen._cdf(self,x,c)
scipy.stats._continuous_distns.rdist_gen._logpdf(self,x,c)
scipy.stats._continuous_distns.rdist_gen._munp(self,n,c)
scipy.stats._continuous_distns.rdist_gen._pdf(self,x,c)
scipy.stats._continuous_distns.rdist_gen._ppf(self,q,c)
scipy.stats._continuous_distns.rdist_gen._rvs(self,c,size=None,random_state=None)
scipy.stats._continuous_distns.rdist_gen._shape_info(self)
scipy.stats._continuous_distns.recipinvgauss_gen(rv_continuous)
scipy.stats._continuous_distns.recipinvgauss_gen._cdf(self,x,mu)
scipy.stats._continuous_distns.recipinvgauss_gen._logpdf(self,x,mu)
scipy.stats._continuous_distns.recipinvgauss_gen._pdf(self,x,mu)
scipy.stats._continuous_distns.recipinvgauss_gen._rvs(self,mu,size=None,random_state=None)
scipy.stats._continuous_distns.recipinvgauss_gen._sf(self,x,mu)
scipy.stats._continuous_distns.recipinvgauss_gen._shape_info(self)
scipy.stats._continuous_distns.reciprocal_gen(rv_continuous)
scipy.stats._continuous_distns.reciprocal_gen._argcheck(self,a,b)
scipy.stats._continuous_distns.reciprocal_gen._cdf(self,x,a,b)
scipy.stats._continuous_distns.reciprocal_gen._entropy(self,a,b)
scipy.stats._continuous_distns.reciprocal_gen._fitstart(self,data)
scipy.stats._continuous_distns.reciprocal_gen._get_support(self,a,b)
scipy.stats._continuous_distns.reciprocal_gen._logpdf(self,x,a,b)
scipy.stats._continuous_distns.reciprocal_gen._munp(self,n,a,b)
scipy.stats._continuous_distns.reciprocal_gen._pdf(self,x,a,b)
scipy.stats._continuous_distns.reciprocal_gen._ppf(self,q,a,b)
scipy.stats._continuous_distns.reciprocal_gen._shape_info(self)
scipy.stats._continuous_distns.reciprocal_gen.fit(self,data,*args,**kwds)
scipy.stats._continuous_distns.rice_gen(rv_continuous)
scipy.stats._continuous_distns.rice_gen._argcheck(self,b)
scipy.stats._continuous_distns.rice_gen._cdf(self,x,b)
scipy.stats._continuous_distns.rice_gen._munp(self,n,b)
scipy.stats._continuous_distns.rice_gen._pdf(self,x,b)
scipy.stats._continuous_distns.rice_gen._ppf(self,q,b)
scipy.stats._continuous_distns.rice_gen._rvs(self,b,size=None,random_state=None)
scipy.stats._continuous_distns.rice_gen._shape_info(self)
scipy.stats._continuous_distns.rv_histogram(self,histogram,*args,density=None,**kwargs)
scipy.stats._continuous_distns.rv_histogram.__init__(self,histogram,*args,density=None,**kwargs)
scipy.stats._continuous_distns.rv_histogram._cdf(self,x)
scipy.stats._continuous_distns.rv_histogram._entropy(self)
scipy.stats._continuous_distns.rv_histogram._munp(self,n)
scipy.stats._continuous_distns.rv_histogram._pdf(self,x)
scipy.stats._continuous_distns.rv_histogram._ppf(self,x)
scipy.stats._continuous_distns.rv_histogram._updated_ctor_param(self)
scipy.stats._continuous_distns.semicircular_gen(rv_continuous)
scipy.stats._continuous_distns.semicircular_gen._cdf(self,x)
scipy.stats._continuous_distns.semicircular_gen._entropy(self)
scipy.stats._continuous_distns.semicircular_gen._logpdf(self,x)
scipy.stats._continuous_distns.semicircular_gen._pdf(self,x)
scipy.stats._continuous_distns.semicircular_gen._ppf(self,q)
scipy.stats._continuous_distns.semicircular_gen._rvs(self,size=None,random_state=None)
scipy.stats._continuous_distns.semicircular_gen._shape_info(self)
scipy.stats._continuous_distns.semicircular_gen._stats(self)
scipy.stats._continuous_distns.skew_norm_gen(rv_continuous)
scipy.stats._continuous_distns.skew_norm_gen._argcheck(self,a)
scipy.stats._continuous_distns.skew_norm_gen._cdf(self,x,a)
scipy.stats._continuous_distns.skew_norm_gen._isf(self,x,a)
scipy.stats._continuous_distns.skew_norm_gen._munp(self,order,a)
scipy.stats._continuous_distns.skew_norm_gen._pdf(self,x,a)
scipy.stats._continuous_distns.skew_norm_gen._ppf(self,x,a)
scipy.stats._continuous_distns.skew_norm_gen._rvs(self,a,size=None,random_state=None)
scipy.stats._continuous_distns.skew_norm_gen._sf(self,x,a)
scipy.stats._continuous_distns.skew_norm_gen._shape_info(self)
scipy.stats._continuous_distns.skew_norm_gen._skewnorm_odd_moments(self)
scipy.stats._continuous_distns.skew_norm_gen._stats(self,a,moments='mvsk')
scipy.stats._continuous_distns.skew_norm_gen.fit(self,data,*args,**kwds)
scipy.stats._continuous_distns.skewcauchy_gen(rv_continuous)
scipy.stats._continuous_distns.skewcauchy_gen._argcheck(self,a)
scipy.stats._continuous_distns.skewcauchy_gen._cdf(self,x,a)
scipy.stats._continuous_distns.skewcauchy_gen._fitstart(self,data)
scipy.stats._continuous_distns.skewcauchy_gen._pdf(self,x,a)
scipy.stats._continuous_distns.skewcauchy_gen._ppf(self,x,a)
scipy.stats._continuous_distns.skewcauchy_gen._shape_info(self)
scipy.stats._continuous_distns.skewcauchy_gen._stats(self,a,moments='mvsk')
scipy.stats._continuous_distns.studentized_range_gen(rv_continuous)
scipy.stats._continuous_distns.studentized_range_gen._argcheck(self,k,df)
scipy.stats._continuous_distns.studentized_range_gen._cdf(self,x,k,df)
scipy.stats._continuous_distns.studentized_range_gen._fitstart(self,data)
scipy.stats._continuous_distns.studentized_range_gen._munp(self,K,k,df)
scipy.stats._continuous_distns.studentized_range_gen._pdf(self,x,k,df)
scipy.stats._continuous_distns.studentized_range_gen._shape_info(self)
scipy.stats._continuous_distns.t_gen(rv_continuous)
scipy.stats._continuous_distns.t_gen._cdf(self,x,df)
scipy.stats._continuous_distns.t_gen._entropy(self,df)
scipy.stats._continuous_distns.t_gen._isf(self,q,df)
scipy.stats._continuous_distns.t_gen._logpdf(self,x,df)
scipy.stats._continuous_distns.t_gen._pdf(self,x,df)
scipy.stats._continuous_distns.t_gen._ppf(self,q,df)
scipy.stats._continuous_distns.t_gen._rvs(self,df,size=None,random_state=None)
scipy.stats._continuous_distns.t_gen._sf(self,x,df)
scipy.stats._continuous_distns.t_gen._shape_info(self)
scipy.stats._continuous_distns.t_gen._stats(self,df)
scipy.stats._continuous_distns.trapezoid_gen(rv_continuous)
scipy.stats._continuous_distns.trapezoid_gen._argcheck(self,c,d)
scipy.stats._continuous_distns.trapezoid_gen._cdf(self,x,c,d)
scipy.stats._continuous_distns.trapezoid_gen._entropy(self,c,d)
scipy.stats._continuous_distns.trapezoid_gen._munp(self,n,c,d)
scipy.stats._continuous_distns.trapezoid_gen._pdf(self,x,c,d)
scipy.stats._continuous_distns.trapezoid_gen._ppf(self,q,c,d)
scipy.stats._continuous_distns.trapezoid_gen._shape_info(self)
scipy.stats._continuous_distns.triang_gen(rv_continuous)
scipy.stats._continuous_distns.triang_gen._argcheck(self,c)
scipy.stats._continuous_distns.triang_gen._cdf(self,x,c)
scipy.stats._continuous_distns.triang_gen._entropy(self,c)
scipy.stats._continuous_distns.triang_gen._pdf(self,x,c)
scipy.stats._continuous_distns.triang_gen._ppf(self,q,c)
scipy.stats._continuous_distns.triang_gen._rvs(self,c,size=None,random_state=None)
scipy.stats._continuous_distns.triang_gen._shape_info(self)
scipy.stats._continuous_distns.triang_gen._stats(self,c)
scipy.stats._continuous_distns.truncexpon_gen(rv_continuous)
scipy.stats._continuous_distns.truncexpon_gen._cdf(self,x,b)
scipy.stats._continuous_distns.truncexpon_gen._entropy(self,b)
scipy.stats._continuous_distns.truncexpon_gen._get_support(self,b)
scipy.stats._continuous_distns.truncexpon_gen._logpdf(self,x,b)
scipy.stats._continuous_distns.truncexpon_gen._munp(self,n,b)
scipy.stats._continuous_distns.truncexpon_gen._pdf(self,x,b)
scipy.stats._continuous_distns.truncexpon_gen._ppf(self,q,b)
scipy.stats._continuous_distns.truncexpon_gen._shape_info(self)
scipy.stats._continuous_distns.truncnorm_gen(rv_continuous)
scipy.stats._continuous_distns.truncnorm_gen._argcheck(self,a,b)
scipy.stats._continuous_distns.truncnorm_gen._cdf(self,x,a,b)
scipy.stats._continuous_distns.truncnorm_gen._fitstart(self,data)
scipy.stats._continuous_distns.truncnorm_gen._get_support(self,a,b)
scipy.stats._continuous_distns.truncnorm_gen._isf(self,q,a,b)
scipy.stats._continuous_distns.truncnorm_gen._logcdf(self,x,a,b)
scipy.stats._continuous_distns.truncnorm_gen._logpdf(self,x,a,b)
scipy.stats._continuous_distns.truncnorm_gen._logsf(self,x,a,b)
scipy.stats._continuous_distns.truncnorm_gen._munp(self,n,a,b)
scipy.stats._continuous_distns.truncnorm_gen._pdf(self,x,a,b)
scipy.stats._continuous_distns.truncnorm_gen._ppf(self,q,a,b)
scipy.stats._continuous_distns.truncnorm_gen._sf(self,x,a,b)
scipy.stats._continuous_distns.truncnorm_gen._shape_info(self)
scipy.stats._continuous_distns.truncnorm_gen._stats(self,a,b,moments='mv')
scipy.stats._continuous_distns.truncpareto_gen(rv_continuous)
scipy.stats._continuous_distns.truncpareto_gen._argcheck(self,b,c)
scipy.stats._continuous_distns.truncpareto_gen._cdf(self,x,b,c)
scipy.stats._continuous_distns.truncpareto_gen._entropy(self,b,c)
scipy.stats._continuous_distns.truncpareto_gen._fitstart(self,data)
scipy.stats._continuous_distns.truncpareto_gen._get_support(self,b,c)
scipy.stats._continuous_distns.truncpareto_gen._isf(self,q,b,c)
scipy.stats._continuous_distns.truncpareto_gen._logcdf(self,x,b,c)
scipy.stats._continuous_distns.truncpareto_gen._logpdf(self,x,b,c)
scipy.stats._continuous_distns.truncpareto_gen._logsf(self,x,b,c)
scipy.stats._continuous_distns.truncpareto_gen._munp(self,n,b,c)
scipy.stats._continuous_distns.truncpareto_gen._pdf(self,x,b,c)
scipy.stats._continuous_distns.truncpareto_gen._ppf(self,q,b,c)
scipy.stats._continuous_distns.truncpareto_gen._sf(self,x,b,c)
scipy.stats._continuous_distns.truncpareto_gen._shape_info(self)
scipy.stats._continuous_distns.truncweibull_min_gen(rv_continuous)
scipy.stats._continuous_distns.truncweibull_min_gen._argcheck(self,c,a,b)
scipy.stats._continuous_distns.truncweibull_min_gen._cdf(self,x,c,a,b)
scipy.stats._continuous_distns.truncweibull_min_gen._fitstart(self,data)
scipy.stats._continuous_distns.truncweibull_min_gen._get_support(self,c,a,b)
scipy.stats._continuous_distns.truncweibull_min_gen._isf(self,q,c,a,b)
scipy.stats._continuous_distns.truncweibull_min_gen._logcdf(self,x,c,a,b)
scipy.stats._continuous_distns.truncweibull_min_gen._logpdf(self,x,c,a,b)
scipy.stats._continuous_distns.truncweibull_min_gen._logsf(self,x,c,a,b)
scipy.stats._continuous_distns.truncweibull_min_gen._munp(self,n,c,a,b)
scipy.stats._continuous_distns.truncweibull_min_gen._pdf(self,x,c,a,b)
scipy.stats._continuous_distns.truncweibull_min_gen._ppf(self,q,c,a,b)
scipy.stats._continuous_distns.truncweibull_min_gen._sf(self,x,c,a,b)
scipy.stats._continuous_distns.truncweibull_min_gen._shape_info(self)
scipy.stats._continuous_distns.tukeylambda_gen(rv_continuous)
scipy.stats._continuous_distns.tukeylambda_gen._argcheck(self,lam)
scipy.stats._continuous_distns.tukeylambda_gen._cdf(self,x,lam)
scipy.stats._continuous_distns.tukeylambda_gen._entropy(self,lam)
scipy.stats._continuous_distns.tukeylambda_gen._pdf(self,x,lam)
scipy.stats._continuous_distns.tukeylambda_gen._ppf(self,q,lam)
scipy.stats._continuous_distns.tukeylambda_gen._shape_info(self)
scipy.stats._continuous_distns.tukeylambda_gen._stats(self,lam)
scipy.stats._continuous_distns.uniform_gen(rv_continuous)
scipy.stats._continuous_distns.uniform_gen._cdf(self,x)
scipy.stats._continuous_distns.uniform_gen._entropy(self)
scipy.stats._continuous_distns.uniform_gen._pdf(self,x)
scipy.stats._continuous_distns.uniform_gen._ppf(self,q)
scipy.stats._continuous_distns.uniform_gen._rvs(self,size=None,random_state=None)
scipy.stats._continuous_distns.uniform_gen._shape_info(self)
scipy.stats._continuous_distns.uniform_gen._stats(self)
scipy.stats._continuous_distns.uniform_gen.fit(self,data,*args,**kwds)
scipy.stats._continuous_distns.vonmises_gen(rv_continuous)
scipy.stats._continuous_distns.vonmises_gen._cdf(self,x,kappa)
scipy.stats._continuous_distns.vonmises_gen._entropy(self,kappa)
scipy.stats._continuous_distns.vonmises_gen._logpdf(self,x,kappa)
scipy.stats._continuous_distns.vonmises_gen._pdf(self,x,kappa)
scipy.stats._continuous_distns.vonmises_gen._rvs(self,kappa,size=None,random_state=None)
scipy.stats._continuous_distns.vonmises_gen._shape_info(self)
scipy.stats._continuous_distns.vonmises_gen._stats_skip(self,kappa)
scipy.stats._continuous_distns.vonmises_gen.expect(self,func=None,args=(),loc=0,scale=1,lb=None,ub=None,conditional=False,**kwds)
scipy.stats._continuous_distns.vonmises_gen.rvs(self,*args,**kwds)
scipy.stats._continuous_distns.wald_gen(invgauss_gen)
scipy.stats._continuous_distns.wald_gen._cdf(self,x)
scipy.stats._continuous_distns.wald_gen._isf(self,x)
scipy.stats._continuous_distns.wald_gen._logcdf(self,x)
scipy.stats._continuous_distns.wald_gen._logpdf(self,x)
scipy.stats._continuous_distns.wald_gen._logsf(self,x)
scipy.stats._continuous_distns.wald_gen._pdf(self,x)
scipy.stats._continuous_distns.wald_gen._ppf(self,x)
scipy.stats._continuous_distns.wald_gen._rvs(self,size=None,random_state=None)
scipy.stats._continuous_distns.wald_gen._sf(self,x)
scipy.stats._continuous_distns.wald_gen._shape_info(self)
scipy.stats._continuous_distns.wald_gen._stats(self)
scipy.stats._continuous_distns.weibull_max_gen(rv_continuous)
scipy.stats._continuous_distns.weibull_max_gen._cdf(self,x,c)
scipy.stats._continuous_distns.weibull_max_gen._entropy(self,c)
scipy.stats._continuous_distns.weibull_max_gen._logcdf(self,x,c)
scipy.stats._continuous_distns.weibull_max_gen._logpdf(self,x,c)
scipy.stats._continuous_distns.weibull_max_gen._munp(self,n,c)
scipy.stats._continuous_distns.weibull_max_gen._pdf(self,x,c)
scipy.stats._continuous_distns.weibull_max_gen._ppf(self,q,c)
scipy.stats._continuous_distns.weibull_max_gen._sf(self,x,c)
scipy.stats._continuous_distns.weibull_max_gen._shape_info(self)
scipy.stats._continuous_distns.weibull_min_gen(rv_continuous)
scipy.stats._continuous_distns.weibull_min_gen._cdf(self,x,c)
scipy.stats._continuous_distns.weibull_min_gen._entropy(self,c)
scipy.stats._continuous_distns.weibull_min_gen._logpdf(self,x,c)
scipy.stats._continuous_distns.weibull_min_gen._logsf(self,x,c)
scipy.stats._continuous_distns.weibull_min_gen._munp(self,n,c)
scipy.stats._continuous_distns.weibull_min_gen._pdf(self,x,c)
scipy.stats._continuous_distns.weibull_min_gen._ppf(self,q,c)
scipy.stats._continuous_distns.weibull_min_gen._sf(self,x,c)
scipy.stats._continuous_distns.weibull_min_gen._shape_info(self)
scipy.stats._continuous_distns.weibull_min_gen.fit(self,data,*args,**kwds)
scipy.stats._continuous_distns.wrapcauchy_gen(rv_continuous)
scipy.stats._continuous_distns.wrapcauchy_gen._argcheck(self,c)
scipy.stats._continuous_distns.wrapcauchy_gen._cdf(self,x,c)
scipy.stats._continuous_distns.wrapcauchy_gen._entropy(self,c)
scipy.stats._continuous_distns.wrapcauchy_gen._fitstart(self,data)
scipy.stats._continuous_distns.wrapcauchy_gen._pdf(self,x,c)
scipy.stats._continuous_distns.wrapcauchy_gen._ppf(self,q,c)
scipy.stats._continuous_distns.wrapcauchy_gen._shape_info(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_binomtest.py----------------------------------------
A:scipy.stats._binomtest.(low, high)->_binom_wilson_conf_int(self.k, self.n, confidence_level, self.alternative, correction=method == 'wilsoncc')
A:scipy.stats._binomtest.p->brentq(func, 0, 1)
A:scipy.stats._binomtest.plow->_findp(lambda p: binom.sf(k - 1, n, p) - alpha)
A:scipy.stats._binomtest.phigh->_findp(lambda p: binom.cdf(k, n, p) - alpha)
A:scipy.stats._binomtest.z->ndtri(confidence_level)
A:scipy.stats._binomtest.k->_validate_int(k, 'k', minimum=0)
A:scipy.stats._binomtest.n->_validate_int(n, 'n', minimum=1)
A:scipy.stats._binomtest.pval->min(1.0, pval)
A:scipy.stats._binomtest.d->_discrete_distns.binom.pmf(k, n, p)
A:scipy.stats._binomtest.ix->_binary_search_for_binom_tst(lambda x1: binom.pmf(x1, n, p), d * rerr, 0, np.floor(p * n))
A:scipy.stats._binomtest.result->BinomTestResult(k=k, n=n, alternative=alternative, statistic=k / n, pvalue=pval)
A:scipy.stats._binomtest.midval->a(mid)
scipy.stats._binomtest.BinomTestResult(self,k,n,alternative,statistic,pvalue)
scipy.stats._binomtest.BinomTestResult.__init__(self,k,n,alternative,statistic,pvalue)
scipy.stats._binomtest.BinomTestResult.__repr__(self)
scipy.stats._binomtest.BinomTestResult.proportion_ci(self,confidence_level=0.95,method='exact')
scipy.stats._binomtest._binary_search_for_binom_tst(a,d,lo,hi)
scipy.stats._binomtest._binom_exact_conf_int(k,n,confidence_level,alternative)
scipy.stats._binomtest._binom_wilson_conf_int(k,n,confidence_level,alternative,correction)
scipy.stats._binomtest._findp(func)
scipy.stats._binomtest.binomtest(k,n,p=0.5,alternative='two-sided')
scipy.stats.binomtest(k,n,p=0.5,alternative='two-sided')


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_result_classes.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/morestats.py----------------------------------------
scipy.stats.morestats.__dir__()
scipy.stats.morestats.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/qmc.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/mstats.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/statlib.py----------------------------------------
scipy.stats.statlib.__dir__()
scipy.stats.statlib.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_ksstats.py----------------------------------------
A:scipy.stats._ksstats._EP128->numpy.ldexp(np.longdouble(1), _E128)
A:scipy.stats._ksstats._EM128->numpy.ldexp(np.longdouble(1), -_E128)
A:scipy.stats._ksstats._SQRT2PI->numpy.sqrt(2 * np.pi)
A:scipy.stats._ksstats._LOG_2PI->numpy.log(2 * np.pi)
A:scipy.stats._ksstats._SQRT3->numpy.sqrt(3)
A:scipy.stats._ksstats.p->numpy.ldexp(p, expnt)
A:scipy.stats._ksstats.k->int(np.ceil(nd))
A:scipy.stats._ksstats.H->numpy.matmul(H, H)
A:scipy.stats._ksstats.intm->numpy.arange(1, m + 1)
A:scipy.stats._ksstats.w->numpy.empty(m)
A:scipy.stats._ksstats.H[-1, :]->numpy.flip(v, axis=0)
A:scipy.stats._ksstats.Hpwr->numpy.matmul(Hpwr, H)
A:scipy.stats._ksstats.(ip1div2, ip1mod2)->divmod(i + 1, 2)
A:scipy.stats._ksstats.ll->int(np.floor(t))
A:scipy.stats._ksstats.g->min(f, 1.0 - f)
A:scipy.stats._ksstats.gpower->numpy.empty(npwrs)
A:scipy.stats._ksstats.twogpower->numpy.empty(npwrs)
A:scipy.stats._ksstats.onem2gpower->numpy.empty(npwrs)
A:scipy.stats._ksstats.V0->numpy.zeros([npwrs])
A:scipy.stats._ksstats.V1->numpy.zeros([npwrs])
A:scipy.stats._ksstats.(j1, j2)->_pomeranz_compute_j1j2(i, n, ll, ceilf, roundf)
A:scipy.stats._ksstats.conv->numpy.convolve(V0[k1 - V0s:k1 - V0s + ln2], pwrs[:ln2])
A:scipy.stats._ksstats.ans->_select_and_clip_prob(ans, 1.0 - ans, cdf)
A:scipy.stats._ksstats.q->numpy.exp(-_PI_SQUARED / 2 / zsquared)
A:scipy.stats._ksstats.K0to3->numpy.zeros(4)
A:scipy.stats._ksstats.maxk->int(np.ceil(16 * z / np.pi))
A:scipy.stats._ksstats.qpower->numpy.power(q, 8 * k)
A:scipy.stats._ksstats.coeffs->numpy.array([1.0, k1a + k1b * msquared, k2a + k2b * msquared + k2c * mfour, k3a + k3b * msquared + k3c * mfour + k3d * msix])
A:scipy.stats._ksstats.ks->numpy.arange(maxk, 0, -1)
A:scipy.stats._ksstats.k2extra->numpy.sum(ksquared * qpwers)
A:scipy.stats._ksstats.k3extra->numpy.sum((sqrt3z + kspi) * (sqrt3z - kspi) * ksquared * qpwers)
A:scipy.stats._ksstats.powers_of_n->numpy.power(n * 1.0, np.arange(len(K0to3)) / 2.0)
A:scipy.stats._ksstats.Ksum->sum(K0to3)
A:scipy.stats._ksstats.prob->_kolmogn_Pomeranz(n, x, cdf=True)
A:scipy.stats._ksstats.cdfprob->_kolmogn_PelzGood(n, x, cdf=True)
A:scipy.stats._ksstats.prd->numpy.exp(_log_nfactorial_div_n_pow_n(n) + (n - 1) * np.log(2 * t - 1))
A:scipy.stats._ksstats.delta->numpy.exp((np.log(p) - scipy.special.loggamma(n + 1)) / n)
A:scipy.stats._ksstats.x1->min(x1, 1.0 - 1.0 / n)
A:scipy.stats._ksstats.it->numpy.nditer([n, q, cdf, None])
A:scipy.stats._ksstats.z[...]->_kolmogni(int(_n), _pcdf, _psf)
scipy.stats._ksstats._clip_prob(p)
scipy.stats._ksstats._kolmogn(n,x,cdf=True)
scipy.stats._ksstats._kolmogn_DMTW(n,d,cdf=True)
scipy.stats._ksstats._kolmogn_PelzGood(n,x,cdf=True)
scipy.stats._ksstats._kolmogn_Pomeranz(n,x,cdf=True)
scipy.stats._ksstats._kolmogn_p(n,x)
scipy.stats._ksstats._kolmogni(n,p,q)
scipy.stats._ksstats._log_nfactorial_div_n_pow_n(n)
scipy.stats._ksstats._pomeranz_compute_j1j2(i,n,ll,ceilf,roundf)
scipy.stats._ksstats._select_and_clip_prob(cdfprob,sfprob,cdf=True)
scipy.stats._ksstats.kolmogn(n,x,cdf=True)
scipy.stats._ksstats.kolmogni(n,q,cdf=True)
scipy.stats._ksstats.kolmognp(n,x)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_distr_params.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_generate_pyx.py----------------------------------------
A:scipy.stats._generate_pyx.ver->tuple((int(num) for num in np.__version__.split('.')[:2]))
A:scipy.stats._generate_pyx.biasedurn_base->(pathlib.Path(__file__).parent / '_biasedurn').absolute()
A:scipy.stats._generate_pyx.contents->src.read()
A:scipy.stats._generate_pyx.parser->argparse.ArgumentParser()
A:scipy.stats._generate_pyx.args->argparse.ArgumentParser().parse_args()
A:scipy.stats._generate_pyx.outdir_abs->pathlib.Path(os.path.abspath(os.path.dirname(__file__)))
A:scipy.stats._generate_pyx.srcdir_abs->pathlib.Path(os.path.abspath(os.path.dirname(__file__)))
scipy.stats._generate_pyx.isNPY_OLD()
scipy.stats._generate_pyx.make_biasedurn(outdir)
scipy.stats._generate_pyx.make_boost(outdir,distutils_build=False)
scipy.stats._generate_pyx.make_unuran(srcdir,outdir)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_tukeylambda_stats.py----------------------------------------
A:scipy.stats._tukeylambda_stats._tukeylambda_var_p->poly1d(_tukeylambda_var_pc[::-1])
A:scipy.stats._tukeylambda_stats._tukeylambda_var_q->poly1d(_tukeylambda_var_qc[::-1])
A:scipy.stats._tukeylambda_stats.lam->numpy.atleast_1d(lam).astype(np.float64)
A:scipy.stats._tukeylambda_stats.v->numpy.empty_like(lam)
A:scipy.stats._tukeylambda_stats._tukeylambda_kurt_p->poly1d(_tukeylambda_kurt_pc[::-1])
A:scipy.stats._tukeylambda_stats._tukeylambda_kurt_q->poly1d(_tukeylambda_kurt_qc[::-1])
A:scipy.stats._tukeylambda_stats.k->numpy.empty_like(lam)
scipy.stats._tukeylambda_stats.tukeylambda_kurtosis(lam)
scipy.stats._tukeylambda_stats.tukeylambda_variance(lam)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/contingency.py----------------------------------------
A:scipy.stats.contingency.ranged->list(range(a.ndim))
A:scipy.stats.contingency.marg->numpy.apply_over_axes(np.sum, a, [j for j in ranged if j != k])
A:scipy.stats.contingency.observed->numpy.asarray(observed)
A:scipy.stats.contingency.margsums->margins(observed)
A:scipy.stats.contingency.Chi2ContingencyResult->_make_tuple_bunch('Chi2ContingencyResult', ['statistic', 'pvalue', 'dof', 'expected_freq'], [])
A:scipy.stats.contingency.expected->expected_freq(observed)
A:scipy.stats.contingency.direction->numpy.sign(diff)
A:scipy.stats.contingency.magnitude->numpy.minimum(0.5, np.abs(diff))
A:scipy.stats.contingency.(chi2, p)->power_divergence(observed, expected, ddof=observed.size - 1 - dof, axis=None, lambda_=lambda_)
A:scipy.stats.contingency.arr->numpy.asarray(observed)
A:scipy.stats.contingency.chi2_stat->chi2_contingency(arr, correction=correction, lambda_=lambda_)
scipy.stats.chi2_contingency(observed,correction=True,lambda_=None)
scipy.stats.contingency.association(observed,method='cramer',correction=False,lambda_=None)
scipy.stats.contingency.chi2_contingency(observed,correction=True,lambda_=None)
scipy.stats.contingency.expected_freq(observed)
scipy.stats.contingency.margins(a)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/mstats_extras.py----------------------------------------
scipy.stats.mstats_extras.__dir__()
scipy.stats.mstats_extras.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/kde.py----------------------------------------
scipy.stats.kde.__dir__()
scipy.stats.kde.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/__init__.py----------------------------------------
A:scipy.stats.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_crosstab.py----------------------------------------
A:scipy.stats._crosstab.CrosstabResult->_make_tuple_bunch('CrosstabResult', ['elements', 'count'])
A:scipy.stats._crosstab.nargs->len(args)
A:scipy.stats._crosstab.len0->len(args[0])
A:scipy.stats._crosstab.(actual_levels, indices)->zip(*[np.unique(a, return_inverse=True) for a in args])
A:scipy.stats._crosstab.mask->numpy.zeros((nargs, len0), dtype=np.bool_)
A:scipy.stats._crosstab.inv->numpy.zeros((nargs, len0), dtype=np.intp)
A:scipy.stats._crosstab.(levels_list, inv[k, :])->numpy.unique(arg, return_inverse=True)
A:scipy.stats._crosstab.mask[k, :]->numpy.any(q, axis=0)
A:scipy.stats._crosstab.qnz->q.T.nonzero()
A:scipy.stats._crosstab.mask_all->numpy.zeros((nargs, len0), dtype=np.bool_).all(axis=0)
A:scipy.stats._crosstab.indices->tuple(inv[:, mask_all])
A:scipy.stats._crosstab.count->numpy.zeros(shape, dtype=int)
scipy.stats._crosstab.crosstab(*args,levels=None,sparse=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_stats_mstats_common.py----------------------------------------
A:scipy.stats._stats_mstats_common.LinregressResult->_make_tuple_bunch('LinregressResult', ['slope', 'intercept', 'rvalue', 'pvalue', 'stderr'], extra_field_names=['intercept_stderr'])
A:scipy.stats._stats_mstats_common.TheilslopesResult->_make_tuple_bunch('TheilslopesResult', ['slope', 'intercept', 'low_slope', 'high_slope'])
A:scipy.stats._stats_mstats_common.SiegelslopesResult->_make_tuple_bunch('SiegelslopesResult', ['slope', 'intercept'])
A:scipy.stats._stats_mstats_common.x->numpy.asarray(x, dtype=float).ravel()
A:scipy.stats._stats_mstats_common.y->numpy.asarray(y).ravel()
A:scipy.stats._stats_mstats_common.n->len(x)
A:scipy.stats._stats_mstats_common.xmean->numpy.mean(x, None)
A:scipy.stats._stats_mstats_common.ymean->numpy.mean(y, None)
A:scipy.stats._stats_mstats_common.(t, prob)->scipy.stats._stats_py._ttest_finish(df, t, alternative)
A:scipy.stats._stats_mstats_common.slope_stderr->numpy.sqrt((1 - r ** 2) * ssym / ssxm / df)
A:scipy.stats._stats_mstats_common.medslope->numpy.median(slopes)
A:scipy.stats._stats_mstats_common.medinter->numpy.median(y - medslope * x)
A:scipy.stats._stats_mstats_common.z->distributions.norm.ppf(alpha / 2.0)
A:scipy.stats._stats_mstats_common.(_, nxreps)->_find_repeats(x)
A:scipy.stats._stats_mstats_common.(_, nyreps)->_find_repeats(y)
A:scipy.stats._stats_mstats_common.nt->len(slopes)
A:scipy.stats._stats_mstats_common.ny->len(y)
A:scipy.stats._stats_mstats_common.sigma->numpy.sqrt(sigsq)
A:scipy.stats._stats_mstats_common.Ru->min(int(np.round((nt - z * sigma) / 2.0)), len(slopes) - 1)
A:scipy.stats._stats_mstats_common.Rl->max(int(np.round((nt + z * sigma) / 2.0)) - 1, 0)
A:scipy.stats._stats_mstats_common.arr->numpy.asarray(arr, np.float64).ravel()
A:scipy.stats._stats_mstats_common.change->numpy.concatenate(([True], arr[1:] != arr[:-1]))
A:scipy.stats._stats_mstats_common.change_idx->numpy.concatenate(np.nonzero(change) + ([arr.size],))
A:scipy.stats._stats_mstats_common.freq->numpy.diff(change_idx)
A:scipy.stats._stats_mstats_common.dtype->numpy.result_type(x, y, np.float32)
A:scipy.stats._stats_mstats_common.(medslope, medinter)->siegelslopes_pythran(y, x, method)
scipy.stats._stats_mstats_common._find_repeats(arr)
scipy.stats._stats_mstats_common.linregress(x,y=None,alternative='two-sided')
scipy.stats._stats_mstats_common.siegelslopes(y,x=None,method='hierarchical')
scipy.stats._stats_mstats_common.theilslopes(y,x=None,alpha=0.95,method='separate')


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_kde.py----------------------------------------
A:scipy.stats._kde.self.dataset->atleast_2d(asarray(dataset))
A:scipy.stats._kde.self._weights->atleast_1d(weights).astype(float)
A:scipy.stats._kde.points->reshape(points, (self.d, 1))
A:scipy.stats._kde.(output_dtype, spec)->_get_output_dtype(self.covariance, points)
A:scipy.stats._kde.result->gaussian_kernel_estimate_log[spec](self.dataset.T, self.weights[:, None], points.T, self.cho_cov, output_dtype)
A:scipy.stats._kde.mean->atleast_1d(squeeze(mean))
A:scipy.stats._kde.cov->atleast_2d(cov)
A:scipy.stats._kde.sum_cov_chol->scipy.linalg.cho_factor(sum_cov)
A:scipy.stats._kde.tdiff->scipy.linalg.cho_solve(sum_cov_chol, diff)
A:scipy.stats._kde.sqrt_det->numpy.prod(np.diagonal(sum_cov_chol[0]))
A:scipy.stats._kde.normalized_low->ravel((low - self.dataset) / stdev)
A:scipy.stats._kde.normalized_high->ravel((high - self.dataset) / stdev)
A:scipy.stats._kde.value->numpy.sum(self.weights * (special.ndtr(normalized_high) - special.ndtr(normalized_low)))
A:scipy.stats._kde.(value, inform)->_mvn.mvnun_weighted(low_bounds, high_bounds, self.dataset, self.weights, self.covariance, **extra_kwds)
A:scipy.stats._kde.size->int(self.neff)
A:scipy.stats._kde.random_state->check_random_state(seed)
A:scipy.stats._kde.norm->transpose(random_state.multivariate_normal(zeros((self.d,), float), self.covariance, size=size))
A:scipy.stats._kde.indices->check_random_state(seed).choice(self.n, size=size, p=self.weights)
A:scipy.stats._kde.self.factor->self.covariance_factor()
A:scipy.stats._kde.self._data_covariance->atleast_2d(cov(self.dataset, rowvar=1, bias=False, aweights=self.weights))
A:scipy.stats._kde.self._data_cho_cov->scipy.linalg.cholesky(self._data_covariance, lower=True)
A:scipy.stats._kde.self.cho_cov->(self._data_cho_cov * self.factor).astype(np.float64)
A:scipy.stats._kde.dims->numpy.atleast_1d(dimensions)
A:scipy.stats._kde.n->len(self.dataset)
A:scipy.stats._kde.original_dims->numpy.atleast_1d(dimensions).copy()
A:scipy.stats._kde.output_dtype->numpy.common_type(covariance, points)
scipy.stats._kde._get_output_dtype(covariance,points)
scipy.stats._kde.gaussian_kde(self,dataset,bw_method=None,weights=None)
scipy.stats._kde.gaussian_kde.__init__(self,dataset,bw_method=None,weights=None)
scipy.stats._kde.gaussian_kde._compute_covariance(self)
scipy.stats._kde.gaussian_kde.evaluate(self,points)
scipy.stats._kde.gaussian_kde.integrate_box(self,low_bounds,high_bounds,maxpts=None)
scipy.stats._kde.gaussian_kde.integrate_box_1d(self,low,high)
scipy.stats._kde.gaussian_kde.integrate_gaussian(self,mean,cov)
scipy.stats._kde.gaussian_kde.integrate_kde(self,other)
scipy.stats._kde.gaussian_kde.inv_cov(self)
scipy.stats._kde.gaussian_kde.logpdf(self,x)
scipy.stats._kde.gaussian_kde.marginal(self,dimensions)
scipy.stats._kde.gaussian_kde.neff(self)
scipy.stats._kde.gaussian_kde.pdf(self,x)
scipy.stats._kde.gaussian_kde.resample(self,size=None,seed=None)
scipy.stats._kde.gaussian_kde.scotts_factor(self)
scipy.stats._kde.gaussian_kde.set_bandwidth(self,bw_method=None)
scipy.stats._kde.gaussian_kde.silverman_factor(self)
scipy.stats._kde.gaussian_kde.weights(self)
scipy.stats.gaussian_kde(self,dataset,bw_method=None,weights=None)
scipy.stats.gaussian_kde._compute_covariance(self)
scipy.stats.gaussian_kde.evaluate(self,points)
scipy.stats.gaussian_kde.integrate_box(self,low_bounds,high_bounds,maxpts=None)
scipy.stats.gaussian_kde.integrate_box_1d(self,low,high)
scipy.stats.gaussian_kde.integrate_gaussian(self,mean,cov)
scipy.stats.gaussian_kde.integrate_kde(self,other)
scipy.stats.gaussian_kde.inv_cov(self)
scipy.stats.gaussian_kde.logpdf(self,x)
scipy.stats.gaussian_kde.marginal(self,dimensions)
scipy.stats.gaussian_kde.neff(self)
scipy.stats.gaussian_kde.pdf(self,x)
scipy.stats.gaussian_kde.resample(self,size=None,seed=None)
scipy.stats.gaussian_kde.scotts_factor(self)
scipy.stats.gaussian_kde.set_bandwidth(self,bw_method=None)
scipy.stats.gaussian_kde.silverman_factor(self)
scipy.stats.gaussian_kde.weights(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_qmc_cy.pyi----------------------------------------
scipy.stats._qmc_cy._cy_van_der_corput(n:IntNumber,base:IntNumber,start_index:IntNumber,workers:IntNumber)->np.ndarray
scipy.stats._qmc_cy._cy_van_der_corput_scrambled(n:IntNumber,base:IntNumber,start_index:IntNumber,permutations:np.ndarray,workers:IntNumber)->np.ndarray
scipy.stats._qmc_cy._cy_wrapper_centered_discrepancy(sample:np.ndarray,iterative:bool,workers:IntNumber)->float
scipy.stats._qmc_cy._cy_wrapper_l2_star_discrepancy(sample:np.ndarray,iterative:bool,workers:IntNumber)->float
scipy.stats._qmc_cy._cy_wrapper_mixture_discrepancy(sample:np.ndarray,iterative:bool,workers:IntNumber)->float
scipy.stats._qmc_cy._cy_wrapper_update_discrepancy(x_new_view:np.ndarray,sample_view:np.ndarray,initial_disc:DecimalNumber)->float
scipy.stats._qmc_cy._cy_wrapper_wrap_around_discrepancy(sample:np.ndarray,iterative:bool,workers:IntNumber)->float


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_sobol.pyi----------------------------------------
scipy.stats._sobol._categorize(draws:np.ndarray,p_cumulative:np.ndarray,result:np.ndarray)->None
scipy.stats._sobol._cscramble(dim:IntNumber,bits:IntNumber,ltm:np.ndarray,sv:np.ndarray)->None
scipy.stats._sobol._draw(n:IntNumber,num_gen:IntNumber,dim:IntNumber,scale:float,sv:np.ndarray,quasi:np.ndarray,sample:np.ndarray)->None
scipy.stats._sobol._fast_forward(n:IntNumber,num_gen:IntNumber,dim:IntNumber,sv:np.ndarray,quasi:np.ndarray)->None
scipy.stats._sobol._fill_p_cumulative(p:np.ndarray,p_cumulative:np.ndarray)->None
scipy.stats._sobol._initialize_v(v:np.ndarray,dim:IntNumber,bits:IntNumber)->None
scipy.stats._sobol._test_find_index(p_cumulative:np.ndarray,size:int,value:float)->int


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_qmc.py----------------------------------------
A:scipy.stats._qmc.sample->_lloyd_iteration(sample=sample, decay=decay[i], qhull_options=qhull_options)
A:scipy.stats._qmc.(lower, upper)->_validate_bounds(l_bounds=l_bounds, u_bounds=u_bounds, d=sample.shape[1])
A:scipy.stats._qmc.workers->os.cpu_count()
A:scipy.stats._qmc.x_new->numpy.asarray(x_new, dtype=np.float64, order='C')
A:scipy.stats._qmc.g_i1->numpy.prod(1.0 + abs(z_ij[i1, :]))
A:scipy.stats._qmc.g_i2->numpy.prod(1.0 + abs(z_ij[i2, :]))
A:scipy.stats._qmc.h_i1->numpy.prod(1.0 + 0.5 * abs(z_ij[i1, :]) - 0.5 * z_ij[i1, :] ** 2)
A:scipy.stats._qmc.h_i2->numpy.prod(1.0 + 0.5 * abs(z_ij[i2, :]) - 0.5 * z_ij[i2, :] ** 2)
A:scipy.stats._qmc.mask->numpy.ones(n, dtype=bool)
A:scipy.stats._qmc.sum_->sum(sum_[mask])
A:scipy.stats._qmc.sieve->numpy.ones(n // 3 + (n % 6 == 2), dtype=bool)
A:scipy.stats._qmc.rng->check_random_state(seed)
A:scipy.stats._qmc.permutations->numpy.repeat(np.arange(base)[None], count, axis=0)
A:scipy.stats._qmc.self.rng->check_random_state(seed)
A:scipy.stats._qmc.self.rng_seed->copy.deepcopy(seed)
A:scipy.stats._qmc.self.optimization_method->_select_optimizer(optimization, config)
A:scipy.stats._qmc.u_bounds->numpy.atleast_1d(u_bounds)
A:scipy.stats._qmc.l_bounds->numpy.atleast_1d(l_bounds)
A:scipy.stats._qmc.seed->copy.deepcopy(self.rng_seed)
A:scipy.stats._qmc.self.base->n_primes(d)
A:scipy.stats._qmc.lhs->lhs_engine.reset().random(p).flatten()
A:scipy.stats._qmc.samples->self.engine.random(n)
A:scipy.stats._qmc.perms->self.rng.permutation(p)
A:scipy.stats._qmc.p->numpy.sqrt(n).astype(int)
A:scipy.stats._qmc.primes->primes_from_2_to(p + 1)
A:scipy.stats._qmc.oa_sample->numpy.zeros(shape=(n_row, n_col), dtype=int)
A:scipy.stats._qmc.arrays->numpy.tile(np.arange(p), (2, 1))
A:scipy.stats._qmc.oa_sample[:, :2]->numpy.stack(np.meshgrid(*arrays), axis=-1).reshape(-1, 2)
A:scipy.stats._qmc.oa_sample[:, 2 + p_ - 1]->numpy.mod(oa_sample[:, 0] + p_ * oa_sample[:, 1], p)
A:scipy.stats._qmc.oa_sample_->numpy.empty(shape=(n_row, n_col), dtype=int)
A:scipy.stats._qmc.oa_lhs_sample->numpy.zeros(shape=(n_row, n_col))
A:scipy.stats._qmc.lhs_engine->lhs_engine.reset().reset()
A:scipy.stats._qmc.self._quasi->self._shift.copy()
A:scipy.stats._qmc.self._first_point->self._first_point.astype(np.float64)
A:scipy.stats._qmc.self._shift->numpy.dot(rng_integers(self.rng, 2, size=(self.d, self.bits), dtype=self.dtype_i), 2 ** np.arange(self.bits, dtype=self.dtype_i))
A:scipy.stats._qmc.ltm->numpy.tril(rng_integers(self.rng, 2, size=(self.d, self.bits, self.bits), dtype=self.dtype_i))
A:scipy.stats._qmc.self.grid_size->numpy.ceil(np.ones(self.d) / self.cell_size).astype(int)
A:scipy.stats._qmc.self.sample_grid->numpy.empty(np.append(self.grid_size, self.d), dtype=np.float32)
A:scipy.stats._qmc.indices->(candidate / self.cell_size).astype(int)
A:scipy.stats._qmc.ind_min->numpy.maximum(indices - n, np.zeros(self.d, dtype=int))
A:scipy.stats._qmc.ind_max->numpy.minimum(indices + n + 1, self.grid_size)
A:scipy.stats._qmc.idx_center->rng_integers(self.rng, len(self.sample_pool))
A:scipy.stats._qmc.candidates->self.hypersphere_method(center, self.radius * self.radius_factor, self.ncandidates)
A:scipy.stats._qmc.x->self.rng.standard_normal(size=(candidates, self.d))
A:scipy.stats._qmc.ssq->numpy.sum(x ** 2, axis=1)
A:scipy.stats._qmc.fr_tiled->numpy.tile(fr.reshape(-1, 1), (1, self.d))
A:scipy.stats._qmc.vec->self.rng.standard_normal(size=(candidates, self.d))
A:scipy.stats._qmc.mean->numpy.array(mean, copy=False, ndmin=1)
A:scipy.stats._qmc.cov->numpy.array(cov, copy=False, ndmin=2)
A:scipy.stats._qmc.cov_root->numpy.atleast_2d(cov_root)
A:scipy.stats._qmc.(eigval, eigvec)->numpy.linalg.eigh(cov)
A:scipy.stats._qmc.eigval->numpy.clip(eigval, 0.0, None)
A:scipy.stats._qmc.self.engine->Sobol(d=1, scramble=True, bits=30, seed=seed)
A:scipy.stats._qmc.base_samples->self._standard_normal_samples(n)
A:scipy.stats._qmc.even->numpy.arange(0, samples.shape[-1], 2)
A:scipy.stats._qmc.Rs->numpy.sqrt(-2 * np.log(samples[:, even]))
A:scipy.stats._qmc.cos->numpy.cos(thetas)
A:scipy.stats._qmc.sin->numpy.sin(thetas)
A:scipy.stats._qmc.transf_samples->numpy.stack([Rs * cos, Rs * sin], -1).reshape(n, -1)
A:scipy.stats._qmc.self.pvals->numpy.array(pvals, copy=False, ndmin=1)
A:scipy.stats._qmc.base_draws->self.engine.random(self.n_trials).ravel()
A:scipy.stats._qmc.p_cumulative->numpy.empty_like(self.pvals, dtype=float)
A:scipy.stats._qmc.sample_->numpy.zeros_like(self.pvals, dtype=int)
A:scipy.stats._qmc.optimization->optimization.lower().lower()
A:scipy.stats._qmc.optimizer->partial(optimizer_, **config)
A:scipy.stats._qmc.best_disc->discrepancy(best_sample)
A:scipy.stats._qmc.col->rng_integers(rng, *bounds[0])
A:scipy.stats._qmc.row_1->rng_integers(rng, *bounds[1])
A:scipy.stats._qmc.row_2->rng_integers(rng, *bounds[2])
A:scipy.stats._qmc.disc->_perturb_discrepancy(best_sample, row_1, row_2, col, best_disc)
A:scipy.stats._qmc.new_sample->numpy.empty_like(sample)
A:scipy.stats._qmc.voronoi->Voronoi(sample, qhull_options=qhull_options)
A:scipy.stats._qmc.centroid->numpy.mean(verts, axis=0)
A:scipy.stats._qmc.is_valid->numpy.all(np.logical_and(new_sample >= 0, new_sample <= 1), axis=1)
A:scipy.stats._qmc.l1_old->_l1_norm(sample=sample)
A:scipy.stats._qmc.l1_new->_l1_norm(sample=sample)
A:scipy.stats._qmc.lower->numpy.broadcast_to(l_bounds, d)
A:scipy.stats._qmc.upper->numpy.broadcast_to(u_bounds, d)
scipy.stats._qmc.Halton(self,d:IntNumber,*,scramble:bool=True,optimization:Optional[Literal['random-cd','lloyd']]=None,seed:SeedType=None)
scipy.stats._qmc.Halton.__init__(self,d:IntNumber,*,scramble:bool=True,optimization:Optional[Literal['random-cd','lloyd']]=None,seed:SeedType=None)
scipy.stats._qmc.Halton._random(self,n:IntNumber=1,*,workers:IntNumber=1)->np.ndarray
scipy.stats._qmc.LatinHypercube(self,d:IntNumber,*,centered:bool=False,scramble:bool=True,strength:int=1,optimization:Optional[Literal['random-cd','lloyd']]=None,seed:SeedType=None)
scipy.stats._qmc.LatinHypercube.__init__(self,d:IntNumber,*,centered:bool=False,scramble:bool=True,strength:int=1,optimization:Optional[Literal['random-cd','lloyd']]=None,seed:SeedType=None)
scipy.stats._qmc.LatinHypercube._random(self,n:IntNumber=1,*,workers:IntNumber=1)->np.ndarray
scipy.stats._qmc.LatinHypercube._random_lhs(self,n:IntNumber=1)->np.ndarray
scipy.stats._qmc.LatinHypercube._random_oa_lhs(self,n:IntNumber=4)->np.ndarray
scipy.stats._qmc.MultinomialQMC(self,pvals:npt.ArrayLike,n_trials:IntNumber,*,engine:Optional[QMCEngine]=None,seed:SeedType=None)
scipy.stats._qmc.MultinomialQMC.__init__(self,pvals:npt.ArrayLike,n_trials:IntNumber,*,engine:Optional[QMCEngine]=None,seed:SeedType=None)
scipy.stats._qmc.MultinomialQMC.random(self,n:IntNumber=1)->np.ndarray
scipy.stats._qmc.MultivariateNormalQMC(self,mean:npt.ArrayLike,cov:Optional[npt.ArrayLike]=None,*,cov_root:Optional[npt.ArrayLike]=None,inv_transform:bool=True,engine:Optional[QMCEngine]=None,seed:SeedType=None)
scipy.stats._qmc.MultivariateNormalQMC.__init__(self,mean:npt.ArrayLike,cov:Optional[npt.ArrayLike]=None,*,cov_root:Optional[npt.ArrayLike]=None,inv_transform:bool=True,engine:Optional[QMCEngine]=None,seed:SeedType=None)
scipy.stats._qmc.MultivariateNormalQMC._correlate(self,base_samples:np.ndarray)->np.ndarray
scipy.stats._qmc.MultivariateNormalQMC._standard_normal_samples(self,n:IntNumber=1)->np.ndarray
scipy.stats._qmc.MultivariateNormalQMC.random(self,n:IntNumber=1)->np.ndarray
scipy.stats._qmc.PoissonDisk(self,d:IntNumber,*,radius:DecimalNumber=0.05,hypersphere:Literal['volume','surface']='volume',ncandidates:IntNumber=30,optimization:Optional[Literal['random-cd','lloyd']]=None,seed:SeedType=None)
scipy.stats._qmc.PoissonDisk.__init__(self,d:IntNumber,*,radius:DecimalNumber=0.05,hypersphere:Literal['volume','surface']='volume',ncandidates:IntNumber=30,optimization:Optional[Literal['random-cd','lloyd']]=None,seed:SeedType=None)
scipy.stats._qmc.PoissonDisk._hypersphere_surface_sample(self,center:np.ndarray,radius:DecimalNumber,candidates:IntNumber=1)->np.ndarray
scipy.stats._qmc.PoissonDisk._hypersphere_volume_sample(self,center:np.ndarray,radius:DecimalNumber,candidates:IntNumber=1)->np.ndarray
scipy.stats._qmc.PoissonDisk._initialize_grid_pool(self)
scipy.stats._qmc.PoissonDisk._random(self,n:IntNumber=1,*,workers:IntNumber=1)->np.ndarray
scipy.stats._qmc.PoissonDisk.fill_space(self)->np.ndarray
scipy.stats._qmc.PoissonDisk.reset(self)->PoissonDisk
scipy.stats._qmc.QMCEngine(self,d:IntNumber,*,optimization:Optional[Literal['random-cd','lloyd']]=None,seed:SeedType=None)
scipy.stats._qmc.QMCEngine.__init__(self,d:IntNumber,*,optimization:Optional[Literal['random-cd','lloyd']]=None,seed:SeedType=None)
scipy.stats._qmc.QMCEngine._random(self,n:IntNumber=1,*,workers:IntNumber=1)->np.ndarray
scipy.stats._qmc.QMCEngine.fast_forward(self,n:IntNumber)->QMCEngine
scipy.stats._qmc.QMCEngine.integers(self,l_bounds:npt.ArrayLike,*,u_bounds:Optional[npt.ArrayLike]=None,n:IntNumber=1,endpoint:bool=False,workers:IntNumber=1)->np.ndarray
scipy.stats._qmc.QMCEngine.random(self,n:IntNumber=1,*,workers:IntNumber=1)->np.ndarray
scipy.stats._qmc.QMCEngine.reset(self)->QMCEngine
scipy.stats._qmc.Sobol(self,d:IntNumber,*,scramble:bool=True,bits:Optional[IntNumber]=None,seed:SeedType=None,optimization:Optional[Literal['random-cd','lloyd']]=None)
scipy.stats._qmc.Sobol.__init__(self,d:IntNumber,*,scramble:bool=True,bits:Optional[IntNumber]=None,seed:SeedType=None,optimization:Optional[Literal['random-cd','lloyd']]=None)
scipy.stats._qmc.Sobol._random(self,n:IntNumber=1,*,workers:IntNumber=1)->np.ndarray
scipy.stats._qmc.Sobol._scramble(self)->None
scipy.stats._qmc.Sobol.fast_forward(self,n:IntNumber)->Sobol
scipy.stats._qmc.Sobol.random_base2(self,m:IntNumber)->np.ndarray
scipy.stats._qmc.Sobol.reset(self)->Sobol
scipy.stats._qmc._l1_norm(sample:np.ndarray)->float
scipy.stats._qmc._lloyd_centroidal_voronoi_tessellation(sample:npt.ArrayLike,*,tol:DecimalNumber=1e-05,maxiter:IntNumber=10,qhull_options:Optional[str]=None,**kwargs:Dict)->np.ndarray
scipy.stats._qmc._lloyd_iteration(sample:np.ndarray,decay:float,qhull_options:str)->np.ndarray
scipy.stats._qmc._perturb_discrepancy(sample:np.ndarray,i1:int,i2:int,k:int,disc:float)
scipy.stats._qmc._random_cd(best_sample:np.ndarray,n_iters:int,n_nochange:int,rng:GeneratorType,**kwargs:Dict)->np.ndarray
scipy.stats._qmc._select_optimizer(optimization:Optional[Literal['random-cd','lloyd']],config:Dict)->Optional[Callable]
scipy.stats._qmc._validate_bounds(l_bounds:npt.ArrayLike,u_bounds:npt.ArrayLike,d:int)->Tuple[np.ndarray, ...]
scipy.stats._qmc._validate_workers(workers:IntNumber=1)->IntNumber
scipy.stats._qmc.check_random_state(seed=None)
scipy.stats._qmc.discrepancy(sample:npt.ArrayLike,*,iterative:bool=False,method:Literal['CD','WD','MD','L2-star']='CD',workers:IntNumber=1)->float
scipy.stats._qmc.n_primes(n:IntNumber)->List[int]
scipy.stats._qmc.primes_from_2_to(n:int)->np.ndarray
scipy.stats._qmc.scale(sample:npt.ArrayLike,l_bounds:npt.ArrayLike,u_bounds:npt.ArrayLike,*,reverse:bool=False)->np.ndarray
scipy.stats._qmc.update_discrepancy(x_new:npt.ArrayLike,sample:npt.ArrayLike,initial_disc:DecimalNumber)->float
scipy.stats._qmc.van_der_corput(n:IntNumber,base:IntNumber=2,*,start_index:IntNumber=0,scramble:bool=False,seed:SeedType=None,workers:IntNumber=1)->np.ndarray


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/sampling.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_distn_infrastructure.py----------------------------------------
A:scipy.stats._distn_infrastructure._doc_allmethods->''.join([docdict_discrete[obj] for obj in _doc_disc_methods])
A:scipy.stats._distn_infrastructure._doc_default->''.join([_doc_default_longsummary, _doc_allmethods, '\n', _doc_default_example])
A:scipy.stats._distn_infrastructure._doc_default_before_notes->''.join([docdict_discrete['longsummary'], docdict_discrete['allmethods']])
A:scipy.stats._distn_infrastructure.docdict_discrete->docdict.copy()
A:scipy.stats._distn_infrastructure.docdict_discrete[obj]->docdict_discrete[obj].replace('(x, ', '(k, ').replace('(x, ', '(k, ')
A:scipy.stats._distn_infrastructure.docdict_discrete['longsummary']->_doc_default_longsummary.replace('rv_continuous', 'rv_discrete')
A:scipy.stats._distn_infrastructure._doc_default_disc->''.join([docdict_discrete['longsummary'], docdict_discrete['allmethods'], docdict_discrete['frozennote'], docdict_discrete['example']])
A:scipy.stats._distn_infrastructure.mu->self._munp(1, *goodargs)
A:scipy.stats._distn_infrastructure.val->self._pdf(x, *args)
A:scipy.stats._distn_infrastructure.data->numpy.asarray(data)
A:scipy.stats._distn_infrastructure.m2->((data - mu) ** 2).mean()
A:scipy.stats._distn_infrastructure.m3->((data - mu) ** 3).mean()
A:scipy.stats._distn_infrastructure.m4->((data - mu) ** 4).mean()
A:scipy.stats._distn_infrastructure.optimizer->_fit_determine_optimizer(optimizer)
A:scipy.stats._distn_infrastructure.self.dist->dist.__class__(**dist._updated_ctor_param())
A:scipy.stats._distn_infrastructure.(shapes, _, _)->self.dist._parse_args(*args, **kwds)
A:scipy.stats._distn_infrastructure.(self.a, self.b)->self.dist._get_support(*shapes)
A:scipy.stats._distn_infrastructure.self.dist._random_state->check_random_state(seed)
A:scipy.stats._distn_infrastructure.kwds->self.kwds.copy()
A:scipy.stats._distn_infrastructure.(a, loc, scale)->self.dist._parse_args(*self.args, **self.kwds)
A:scipy.stats._distn_infrastructure.newargs->numpy.atleast_1d(*args)
A:scipy.stats._distn_infrastructure.(*newargs, cond)->numpy.broadcast_arrays(*newargs, cond)
A:scipy.stats._distn_infrastructure.sig->_getfullargspec(self._stats)
A:scipy.stats._distn_infrastructure.self._random_state->check_random_state(seed)
A:scipy.stats._distn_infrastructure.shapes->self.shapes.replace(',', ' ').split()
A:scipy.stats._distn_infrastructure.shapes_args->_getfullargspec(meth)
A:scipy.stats._distn_infrastructure.dct->self.__dict__.copy()
A:scipy.stats._distn_infrastructure.self.numargs->len(shapes)
A:scipy.stats._distn_infrastructure.tempdict->docdict.copy()
A:scipy.stats._distn_infrastructure.vals->fun(supp)
A:scipy.stats._distn_infrastructure.tempdict[item]->tempdict[item].replace('\n%(shapes)s : array_like\n    shape parameters', '').replace('\n%(shapes)s : array_like\n    shape parameters', '')
A:scipy.stats._distn_infrastructure.self.__doc__->self.__doc__.replace('\n    scale : array_like, optional\n        scale parameter (default=1)', '')
A:scipy.stats._distn_infrastructure.size->kwargs.get('size', None)
A:scipy.stats._distn_infrastructure.all_bcast->numpy.broadcast_arrays(*args)
A:scipy.stats._distn_infrastructure.size_->tuple(np.atleast_1d(size))
A:scipy.stats._distn_infrastructure.ok->all([bcdim == 1 or bcdim == szdim for (bcdim, szdim) in zip(bcast_shape, size_)])
A:scipy.stats._distn_infrastructure.cond->logical_and(self._argcheck(*args), scale >= 0)
A:scipy.stats._distn_infrastructure.(a, b)->self._get_support(*args)
A:scipy.stats._distn_infrastructure.U->numpy.array(U, ndmin=1)
A:scipy.stats._distn_infrastructure.Y->self._ppf(U)
A:scipy.stats._distn_infrastructure.discrete->self.kwds.copy().pop('discrete', None)
A:scipy.stats._distn_infrastructure.rndm->self.kwds.copy().pop('random_state', None)
A:scipy.stats._distn_infrastructure.(args, loc, scale, size)->self._parse_args_rvs(*args, **kwds)
A:scipy.stats._distn_infrastructure.random_state->check_random_state(rndm)
A:scipy.stats._distn_infrastructure.(args, loc, scale, moments)->self._parse_args_stats(*args, **kwds)
A:scipy.stats._distn_infrastructure.(loc, scale)->self._fit_loc_scale_support(data, *args)
A:scipy.stats._distn_infrastructure.args->tuple(map(asarray, args))
A:scipy.stats._distn_infrastructure.default->numpy.full(shape(cond), fill_value=self.badvalue)
A:scipy.stats._distn_infrastructure.goodargs->argsreduce(cond, *(q,) + args + (loc,))
A:scipy.stats._distn_infrastructure.(mu, mu2, g1, g2)->self._stats(*shapes, **mdict)
A:scipy.stats._distn_infrastructure.out0->numpy.full(shape(cond), fill_value=self.badvalue).copy()
A:scipy.stats._distn_infrastructure.mu2p->self._munp(2, *goodargs)
A:scipy.stats._distn_infrastructure.mu2->numpy.where(~np.isinf(mu), mu2p - mu ** 2, np.inf)
A:scipy.stats._distn_infrastructure.mu3p->self._munp(3, *goodargs)
A:scipy.stats._distn_infrastructure.mu4p->self._munp(4, *goodargs)
A:scipy.stats._distn_infrastructure.(args, loc, scale)->self._parse_args(*args, **kwds)
A:scipy.stats._distn_infrastructure.output->numpy.full(shape(cond), fill_value=self.badvalue, dtype='d')
A:scipy.stats._distn_infrastructure.order->self.kwds.copy().pop('n')
A:scipy.stats._distn_infrastructure.(shapes, loc, scale)->self._parse_args(*args, **kwds)
A:scipy.stats._distn_infrastructure.i0->numpy.logical_and(self._argcheck(*shapes), scale > 0)
A:scipy.stats._distn_infrastructure.i1->numpy.logical_and(i0, loc == 0)
A:scipy.stats._distn_infrastructure.i2->numpy.logical_and(i0, loc != 0)
A:scipy.stats._distn_infrastructure.val[...]->_moment_from_stats(n, mu, mu2, g1, g2, self._munp, shapes)
A:scipy.stats._distn_infrastructure.result->zeros(i0.shape)
A:scipy.stats._distn_infrastructure.arrs->numpy.broadcast_arrays(*args, loc, scale)
A:scipy.stats._distn_infrastructure.res2->zeros(loc.shape, dtype='d')
A:scipy.stats._distn_infrastructure.valk->_moment_from_stats(k, mu, mu2, g1, g2, self._munp, shapes)
A:scipy.stats._distn_infrastructure.res->_expect(fun, lb, ub, x0, self.inc, maxcount, tolerance, chunksize)
A:scipy.stats._distn_infrastructure.confidence->self.kwds.copy().pop('alpha')
A:scipy.stats._distn_infrastructure.alpha->asarray(alpha)
A:scipy.stats._distn_infrastructure.a->int(min(-100 * q, -10))
A:scipy.stats._distn_infrastructure.b->int(max(100 * q, 10))
A:scipy.stats._distn_infrastructure.(_a, _b)->self._get_support(*args)
A:scipy.stats._distn_infrastructure.(loc, scale, args)->self._unpack_loc_scale(theta)
A:scipy.stats._distn_infrastructure.n_bad->numpy.count_nonzero(cond0, axis=0)
A:scipy.stats._distn_infrastructure.logff->log_fitfun(x, *args)
A:scipy.stats._distn_infrastructure.finite_logff->numpy.isfinite(logff)
A:scipy.stats._distn_infrastructure.x->numpy.asarray((x - loc) / scale, dtype=dtyp)
A:scipy.stats._distn_infrastructure.(x, lj)->numpy.unique(x, return_counts=True)
A:scipy.stats._distn_infrastructure.cdf->numpy.concatenate(([0], cdf_data))
A:scipy.stats._distn_infrastructure.lj->numpy.concatenate((lj, [1]))
A:scipy.stats._distn_infrastructure.domain->list(domain)
A:scipy.stats._distn_infrastructure.domain[0]->numpy.nextafter(domain[0], np.inf)
A:scipy.stats._distn_infrastructure.domain[1]->numpy.nextafter(domain[1], -np.inf)
A:scipy.stats._distn_infrastructure.self._ctor_param->dict(a=a, b=b, name=name, badvalue=badvalue, moment_tol=moment_tol, values=values, inc=inc, longname=longname, shapes=shapes, extradoc=extradoc, seed=seed)
A:scipy.stats._distn_infrastructure.self._ppfvec->types.MethodType(_vppf, self)
A:scipy.stats._distn_infrastructure.self.vecentropy->vectorize(self._entropy)
A:scipy.stats._distn_infrastructure.self._cdfvec->vectorize(self._cdf_single, otypes='d')
A:scipy.stats._distn_infrastructure.self.generic_moment->types.MethodType(_vec_generic_moment, self)
A:scipy.stats._distn_infrastructure.(left, right)->self._get_support(*args)
A:scipy.stats._distn_infrastructure.left->min(-factor, right)
A:scipy.stats._distn_infrastructure.right->max(factor, left)
A:scipy.stats._distn_infrastructure.p->self._pdf(x, *args)
A:scipy.stats._distn_infrastructure.(x, loc, scale)->map(asarray, (x, loc, scale))
A:scipy.stats._distn_infrastructure.dtyp->numpy.promote_types(x.dtype, np.float64)
A:scipy.stats._distn_infrastructure.(q, loc, scale)->map(asarray, (q, loc, scale))
A:scipy.stats._distn_infrastructure.Nargs->len(args)
A:scipy.stats._distn_infrastructure.args[n]->self.kwds.copy().pop(key)
A:scipy.stats._distn_infrastructure.method->self.kwds.copy().get('method', 'mle').lower()
A:scipy.stats._distn_infrastructure.data_moments->numpy.sum(data[None, :] ** exponents / len(data), axis=1)
A:scipy.stats._distn_infrastructure.newtheta->restore(args[:], theta)
A:scipy.stats._distn_infrastructure.dist_moments->numpy.array([self.moment(i + 1, *args, loc=loc, scale=scale) for i in range(len(data_moments))])
A:scipy.stats._distn_infrastructure.Narg->len(args)
A:scipy.stats._distn_infrastructure.start->self._fitstart(data)
A:scipy.stats._distn_infrastructure.loc->self.kwds.copy().pop('loc', start[-2])
A:scipy.stats._distn_infrastructure.scale->self.kwds.copy().pop('scale', start[-1])
A:scipy.stats._distn_infrastructure.(x0, func, restore, args)->self._reduce_func(args, kwds, data=data)
A:scipy.stats._distn_infrastructure.obj->func(vals, data)
A:scipy.stats._distn_infrastructure.(loc, scale, shapes)->self._unpack_loc_scale(vals)
A:scipy.stats._distn_infrastructure.(loc_hat, scale_hat)->self.fit_loc_scale(data, *args)
A:scipy.stats._distn_infrastructure.data_a->numpy.min(data)
A:scipy.stats._distn_infrastructure.data_b->numpy.max(data)
A:scipy.stats._distn_infrastructure.(mu, mu2)->self.stats(*args, **{'moments': 'mv'})
A:scipy.stats._distn_infrastructure.tmp->asarray(data)
A:scipy.stats._distn_infrastructure.muhat->asarray(data).mean()
A:scipy.stats._distn_infrastructure.mu2hat->asarray(data).var()
A:scipy.stats._distn_infrastructure.Shat->sqrt(mu2hat / mu2)
A:scipy.stats._distn_infrastructure.(low, upp)->self.ppf([1e-10, 1.0 - 1e-10], *args)
A:scipy.stats._distn_infrastructure.cdf_bounds->self.cdf([lb, ub], *args, **lockwds)
A:scipy.stats._distn_infrastructure.inner_bounds->numpy.array([alpha, 1 - alpha])
A:scipy.stats._distn_infrastructure.shape_info->self._shape_info()
A:scipy.stats._distn_infrastructure.loc_info->_ShapeInfo('loc', True, (-np.inf, np.inf), (False, False))
A:scipy.stats._distn_infrastructure.scale_info->_ShapeInfo('scale', False, (0, np.inf), (False, False))
A:scipy.stats._distn_infrastructure.qb->self._cdf(b, *args)
A:scipy.stats._distn_infrastructure.qa->self._cdf(a, *args)
A:scipy.stats._distn_infrastructure.c->int((a + b) / 2.0)
A:scipy.stats._distn_infrastructure.qc->self._cdf(c, *args)
A:scipy.stats._distn_infrastructure._vec_generic_moment->vectorize(_drv2_moment, otypes='d')
A:scipy.stats._distn_infrastructure._vppf->vectorize(_drv2_ppfsingle, otypes='d')
A:scipy.stats._distn_infrastructure.m->arange(int(_a), k + 1)
A:scipy.stats._distn_infrastructure.k->asarray(k - loc)
A:scipy.stats._distn_infrastructure.(args, loc, _)->self._parse_args(*args, **kwds)
A:scipy.stats._distn_infrastructure.(k, loc)->map(asarray, (k, loc))
A:scipy.stats._distn_infrastructure.cond0->self._argcheck(*args)
A:scipy.stats._distn_infrastructure.cond3->numpy.isneginf(k)
A:scipy.stats._distn_infrastructure.(q, loc)->map(asarray, (q, loc))
A:scipy.stats._distn_infrastructure.x0->self.ppf(0.5, *args)
A:scipy.stats._distn_infrastructure.supp->numpy.arange(x, x + step, inc)
A:scipy.stats._distn_infrastructure.delta->min(stepsize, abs(x - x1))
A:scipy.stats._distn_infrastructure.stepsize->abs(chunksize * inc)
A:scipy.stats._distn_infrastructure.indx->argmax(sqq >= qq, axis=-1)
A:scipy.stats._distn_infrastructure.self.xk->numpy.take(np.ravel(xk), indx, 0)
A:scipy.stats._distn_infrastructure.self.pk->numpy.take(np.ravel(pk), indx, 0)
A:scipy.stats._distn_infrastructure.self.qvals->numpy.cumsum(self.pk, axis=0)
A:scipy.stats._distn_infrastructure.(xx, xxk)->numpy.broadcast_arrays(x[:, None], self.xk)
A:scipy.stats._distn_infrastructure.(qq, sqq)->numpy.broadcast_arrays(q[..., None], self.qvals)
A:scipy.stats._distn_infrastructure.n->asarray(n)
scipy.stats._distn_infrastructure._ShapeInfo(self,name,integrality=False,domain=(-np.inf,np.inf),inclusive=(True,True))
scipy.stats._distn_infrastructure._ShapeInfo.__init__(self,name,integrality=False,domain=(-np.inf,np.inf),inclusive=(True,True))
scipy.stats._distn_infrastructure._check_shape(argshape,size)
scipy.stats._distn_infrastructure._drv2_moment(self,n,*args)
scipy.stats._distn_infrastructure._drv2_ppfsingle(self,q,*args)
scipy.stats._distn_infrastructure._expect(fun,lb,ub,x0,inc,maxcount=1000,tolerance=1e-10,chunksize=32)
scipy.stats._distn_infrastructure._fit_determine_optimizer(optimizer)
scipy.stats._distn_infrastructure._get_fixed_fit_value(kwds,names)
scipy.stats._distn_infrastructure._iter_chunked(x0,x1,chunksize=4,inc=1)
scipy.stats._distn_infrastructure._kurtosis(data)
scipy.stats._distn_infrastructure._moment(data,n,mu=None)
scipy.stats._distn_infrastructure._moment_from_stats(n,mu,mu2,g1,g2,moment_func,args)
scipy.stats._distn_infrastructure._skew(data)
scipy.stats._distn_infrastructure.argsreduce(cond,*args)
scipy.stats._distn_infrastructure.get_distribution_names(namespace_pairs,rv_base_class)
scipy.stats._distn_infrastructure.rv_continuous(self,momtype=1,a=None,b=None,xtol=1e-14,badvalue=None,name=None,longname=None,shapes=None,extradoc=None,seed=None)
scipy.stats._distn_infrastructure.rv_continuous.__getstate__(self)
scipy.stats._distn_infrastructure.rv_continuous.__init__(self,momtype=1,a=None,b=None,xtol=1e-14,badvalue=None,name=None,longname=None,shapes=None,extradoc=None,seed=None)
scipy.stats._distn_infrastructure.rv_continuous._attach_methods(self)
scipy.stats._distn_infrastructure.rv_continuous._cdf(self,x,*args)
scipy.stats._distn_infrastructure.rv_continuous._cdf_single(self,x,*args)
scipy.stats._distn_infrastructure.rv_continuous._entropy(self,*args)
scipy.stats._distn_infrastructure.rv_continuous._fit_loc_scale_support(self,data,*args)
scipy.stats._distn_infrastructure.rv_continuous._fitstart(self,data,args=None)
scipy.stats._distn_infrastructure.rv_continuous._logpdf(self,x,*args)
scipy.stats._distn_infrastructure.rv_continuous._logpxf(self,x,*args)
scipy.stats._distn_infrastructure.rv_continuous._mom0_sc(self,m,*args)
scipy.stats._distn_infrastructure.rv_continuous._mom1_sc(self,m,*args)
scipy.stats._distn_infrastructure.rv_continuous._mom_integ0(self,x,m,*args)
scipy.stats._distn_infrastructure.rv_continuous._mom_integ1(self,q,m,*args)
scipy.stats._distn_infrastructure.rv_continuous._moment_error(self,theta,x,data_moments)
scipy.stats._distn_infrastructure.rv_continuous._param_info(self)
scipy.stats._distn_infrastructure.rv_continuous._pdf(self,x,*args)
scipy.stats._distn_infrastructure.rv_continuous._ppf_single(self,q,*args)
scipy.stats._distn_infrastructure.rv_continuous._ppf_to_solve(self,x,q,*args)
scipy.stats._distn_infrastructure.rv_continuous._reduce_func(self,args,kwds,data=None)
scipy.stats._distn_infrastructure.rv_continuous._unpack_loc_scale(self,theta)
scipy.stats._distn_infrastructure.rv_continuous._updated_ctor_param(self)
scipy.stats._distn_infrastructure.rv_continuous.cdf(self,x,*args,**kwds)
scipy.stats._distn_infrastructure.rv_continuous.expect(self,func=None,args=(),loc=0,scale=1,lb=None,ub=None,conditional=False,**kwds)
scipy.stats._distn_infrastructure.rv_continuous.fit(self,data,*args,**kwds)
scipy.stats._distn_infrastructure.rv_continuous.fit_loc_scale(self,data,*args)
scipy.stats._distn_infrastructure.rv_continuous.isf(self,q,*args,**kwds)
scipy.stats._distn_infrastructure.rv_continuous.logcdf(self,x,*args,**kwds)
scipy.stats._distn_infrastructure.rv_continuous.logpdf(self,x,*args,**kwds)
scipy.stats._distn_infrastructure.rv_continuous.logsf(self,x,*args,**kwds)
scipy.stats._distn_infrastructure.rv_continuous.pdf(self,x,*args,**kwds)
scipy.stats._distn_infrastructure.rv_continuous.ppf(self,q,*args,**kwds)
scipy.stats._distn_infrastructure.rv_continuous.sf(self,x,*args,**kwds)
scipy.stats._distn_infrastructure.rv_continuous_frozen(rv_frozen)
scipy.stats._distn_infrastructure.rv_continuous_frozen.logpdf(self,x)
scipy.stats._distn_infrastructure.rv_continuous_frozen.pdf(self,x)
scipy.stats._distn_infrastructure.rv_discrete(self,a=0,b=inf,name=None,badvalue=None,moment_tol=1e-08,values=None,inc=1,longname=None,shapes=None,extradoc=None,seed=None)
scipy.stats._distn_infrastructure.rv_discrete.__getstate__(self)
scipy.stats._distn_infrastructure.rv_discrete.__init__(self,a=0,b=inf,name=None,badvalue=None,moment_tol=1e-08,values=None,inc=1,longname=None,shapes=None,extradoc=None,seed=None)
scipy.stats._distn_infrastructure.rv_discrete._attach_methods(self)
scipy.stats._distn_infrastructure.rv_discrete._cdf(self,x,*args)
scipy.stats._distn_infrastructure.rv_discrete._cdf_single(self,k,*args)
scipy.stats._distn_infrastructure.rv_discrete._construct_docstrings(self,name,longname,extradoc)
scipy.stats._distn_infrastructure.rv_discrete._entropy(self,*args)
scipy.stats._distn_infrastructure.rv_discrete._logpmf(self,k,*args)
scipy.stats._distn_infrastructure.rv_discrete._logpxf(self,k,*args)
scipy.stats._distn_infrastructure.rv_discrete._nonzero(self,k,*args)
scipy.stats._distn_infrastructure.rv_discrete._param_info(self)
scipy.stats._distn_infrastructure.rv_discrete._pmf(self,k,*args)
scipy.stats._distn_infrastructure.rv_discrete._unpack_loc_scale(self,theta)
scipy.stats._distn_infrastructure.rv_discrete._updated_ctor_param(self)
scipy.stats._distn_infrastructure.rv_discrete.cdf(self,k,*args,**kwds)
scipy.stats._distn_infrastructure.rv_discrete.expect(self,func=None,args=(),loc=0,lb=None,ub=None,conditional=False,maxcount=1000,tolerance=1e-10,chunksize=32)
scipy.stats._distn_infrastructure.rv_discrete.isf(self,q,*args,**kwds)
scipy.stats._distn_infrastructure.rv_discrete.logcdf(self,k,*args,**kwds)
scipy.stats._distn_infrastructure.rv_discrete.logpmf(self,k,*args,**kwds)
scipy.stats._distn_infrastructure.rv_discrete.logsf(self,k,*args,**kwds)
scipy.stats._distn_infrastructure.rv_discrete.pmf(self,k,*args,**kwds)
scipy.stats._distn_infrastructure.rv_discrete.ppf(self,q,*args,**kwds)
scipy.stats._distn_infrastructure.rv_discrete.rvs(self,*args,**kwargs)
scipy.stats._distn_infrastructure.rv_discrete.sf(self,k,*args,**kwds)
scipy.stats._distn_infrastructure.rv_discrete_frozen(rv_frozen)
scipy.stats._distn_infrastructure.rv_discrete_frozen.logpmf(self,k)
scipy.stats._distn_infrastructure.rv_discrete_frozen.pmf(self,k)
scipy.stats._distn_infrastructure.rv_frozen(self,dist,*args,**kwds)
scipy.stats._distn_infrastructure.rv_frozen.__init__(self,dist,*args,**kwds)
scipy.stats._distn_infrastructure.rv_frozen.cdf(self,x)
scipy.stats._distn_infrastructure.rv_frozen.entropy(self)
scipy.stats._distn_infrastructure.rv_frozen.expect(self,func=None,lb=None,ub=None,conditional=False,**kwds)
scipy.stats._distn_infrastructure.rv_frozen.interval(self,confidence=None,**kwds)
scipy.stats._distn_infrastructure.rv_frozen.isf(self,q)
scipy.stats._distn_infrastructure.rv_frozen.logcdf(self,x)
scipy.stats._distn_infrastructure.rv_frozen.logsf(self,x)
scipy.stats._distn_infrastructure.rv_frozen.mean(self)
scipy.stats._distn_infrastructure.rv_frozen.median(self)
scipy.stats._distn_infrastructure.rv_frozen.moment(self,order=None,**kwds)
scipy.stats._distn_infrastructure.rv_frozen.ppf(self,q)
scipy.stats._distn_infrastructure.rv_frozen.random_state(self)
scipy.stats._distn_infrastructure.rv_frozen.random_state(self,seed)
scipy.stats._distn_infrastructure.rv_frozen.rvs(self,size=None,random_state=None)
scipy.stats._distn_infrastructure.rv_frozen.sf(self,x)
scipy.stats._distn_infrastructure.rv_frozen.stats(self,moments='mv')
scipy.stats._distn_infrastructure.rv_frozen.std(self)
scipy.stats._distn_infrastructure.rv_frozen.support(self)
scipy.stats._distn_infrastructure.rv_frozen.var(self)
scipy.stats._distn_infrastructure.rv_generic(self,seed=None)
scipy.stats._distn_infrastructure.rv_generic.__init__(self,seed=None)
scipy.stats._distn_infrastructure.rv_generic.__setstate__(self,state)
scipy.stats._distn_infrastructure.rv_generic._argcheck(self,*args)
scipy.stats._distn_infrastructure.rv_generic._argcheck_rvs(self,*args,**kwargs)
scipy.stats._distn_infrastructure.rv_generic._attach_argparser_methods(self)
scipy.stats._distn_infrastructure.rv_generic._attach_methods(self)
scipy.stats._distn_infrastructure.rv_generic._construct_argparser(self,meths_to_inspect,locscale_in,locscale_out)
scipy.stats._distn_infrastructure.rv_generic._construct_default_doc(self,longname=None,extradoc=None,docdict=None,discrete='continuous')
scipy.stats._distn_infrastructure.rv_generic._construct_doc(self,docdict,shapes_vals=None)
scipy.stats._distn_infrastructure.rv_generic._get_support(self,*args,**kwargs)
scipy.stats._distn_infrastructure.rv_generic._isf(self,q,*args)
scipy.stats._distn_infrastructure.rv_generic._logcdf(self,x,*args)
scipy.stats._distn_infrastructure.rv_generic._logsf(self,x,*args)
scipy.stats._distn_infrastructure.rv_generic._munp(self,n,*args)
scipy.stats._distn_infrastructure.rv_generic._nlff_and_penalty(self,x,args,log_fitfun)
scipy.stats._distn_infrastructure.rv_generic._nnlf(self,x,*args)
scipy.stats._distn_infrastructure.rv_generic._open_support_mask(self,x,*args)
scipy.stats._distn_infrastructure.rv_generic._penalized_nlpsf(self,theta,x)
scipy.stats._distn_infrastructure.rv_generic._penalized_nnlf(self,theta,x)
scipy.stats._distn_infrastructure.rv_generic._ppf(self,q,*args)
scipy.stats._distn_infrastructure.rv_generic._rvs(self,*args,size=None,random_state=None)
scipy.stats._distn_infrastructure.rv_generic._sf(self,x,*args)
scipy.stats._distn_infrastructure.rv_generic._stats(self,*args,**kwds)
scipy.stats._distn_infrastructure.rv_generic._support_mask(self,x,*args)
scipy.stats._distn_infrastructure.rv_generic.entropy(self,*args,**kwds)
scipy.stats._distn_infrastructure.rv_generic.freeze(self,*args,**kwds)
scipy.stats._distn_infrastructure.rv_generic.interval(self,confidence=None,*args,**kwds)
scipy.stats._distn_infrastructure.rv_generic.mean(self,*args,**kwds)
scipy.stats._distn_infrastructure.rv_generic.median(self,*args,**kwds)
scipy.stats._distn_infrastructure.rv_generic.moment(self,order=None,*args,**kwds)
scipy.stats._distn_infrastructure.rv_generic.nnlf(self,theta,x)
scipy.stats._distn_infrastructure.rv_generic.random_state(self)
scipy.stats._distn_infrastructure.rv_generic.random_state(self,seed)
scipy.stats._distn_infrastructure.rv_generic.rvs(self,*args,**kwds)
scipy.stats._distn_infrastructure.rv_generic.stats(self,*args,**kwds)
scipy.stats._distn_infrastructure.rv_generic.std(self,*args,**kwds)
scipy.stats._distn_infrastructure.rv_generic.support(self,*args,**kwargs)
scipy.stats._distn_infrastructure.rv_generic.var(self,*args,**kwds)
scipy.stats._distn_infrastructure.rv_sample(self,a=0,b=inf,name=None,badvalue=None,moment_tol=1e-08,values=None,inc=1,longname=None,shapes=None,extradoc=None,seed=None)
scipy.stats._distn_infrastructure.rv_sample.__getstate__(self)
scipy.stats._distn_infrastructure.rv_sample.__init__(self,a=0,b=inf,name=None,badvalue=None,moment_tol=1e-08,values=None,inc=1,longname=None,shapes=None,extradoc=None,seed=None)
scipy.stats._distn_infrastructure.rv_sample._attach_methods(self)
scipy.stats._distn_infrastructure.rv_sample._cdf(self,x)
scipy.stats._distn_infrastructure.rv_sample._entropy(self)
scipy.stats._distn_infrastructure.rv_sample._expect(self,fun,lb,ub,*args,**kwds)
scipy.stats._distn_infrastructure.rv_sample._get_support(self,*args)
scipy.stats._distn_infrastructure.rv_sample._pmf(self,x)
scipy.stats._distn_infrastructure.rv_sample._ppf(self,q)
scipy.stats._distn_infrastructure.rv_sample._rvs(self,size=None,random_state=None)
scipy.stats._distn_infrastructure.rv_sample.generic_moment(self,n)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_levy_stable/__init__.py----------------------------------------
A:scipy.stats._levy_stable.__init__._cf_Z0->partial(_cf, _Phi_Z0)
A:scipy.stats._levy_stable.__init__._cf_Z1->partial(_cf, _Phi_Z1)
A:scipy.stats._levy_stable.__init__.quad_eps->kwds.get('quad_eps', _QUAD_EPS)
A:scipy.stats._levy_stable.__init__.(int1, *ret1)->scipy.integrate.quad(integrand1, 0, np.inf, weight='cos', wvar=x, limit=1000, epsabs=quad_eps, epsrel=quad_eps, full_output=1)
A:scipy.stats._levy_stable.__init__.(int2, *ret2)->scipy.integrate.quad(integrand2, 0, np.inf, weight='sin', wvar=x, limit=1000, epsabs=quad_eps, epsrel=quad_eps, full_output=1)
A:scipy.stats._levy_stable.__init__._pdf_single_value_cf_integrate_Z0->partial(_pdf_single_value_cf_integrate, _Phi_Z0)
A:scipy.stats._levy_stable.__init__._pdf_single_value_cf_integrate_Z1->partial(_pdf_single_value_cf_integrate, _Phi_Z1)
A:scipy.stats._levy_stable.__init__.x_tol_near_zeta->kwds.get('piecewise_x_tol_near_zeta', 0.005)
A:scipy.stats._levy_stable.__init__.alpha_tol_near_one->kwds.get('piecewise_alpha_tol_near_one', 0.005)
A:scipy.stats._levy_stable.__init__.(x0, alpha, beta)->_nolan_round_difficult_input(x0, alpha, beta, zeta, x_tol_near_zeta, alpha_tol_near_one)
A:scipy.stats._levy_stable.__init__.(S, C)->scipy.special.fresnel([1 / np.sqrt(2 * np.pi * np.abs(x0))])
A:scipy.stats._levy_stable.__init__._nolan->Nolan(alpha, beta, x0)
A:scipy.stats._levy_stable.__init__.g_1->g(theta)
A:scipy.stats._levy_stable.__init__.peak->scipy.optimize.bisect(lambda t: g(t) - 1, -xi, np.pi / 2, xtol=quad_eps)
A:scipy.stats._levy_stable.__init__.(intg, *ret)->scipy.integrate.quad(integrand, left_support, right_support, points=[left_support, right_support], limit=100, epsrel=quad_eps, epsabs=0, full_output=1)
A:scipy.stats._levy_stable.__init__.res->_lazywhere(alpha == 1, (alpha, beta, TH, aTH, bTH, cosTH, tanTH, W), alpha1func, f2=alphanot1func)
A:scipy.stats._levy_stable.__init__.alpha->numpy.clip(psi_1_1(nu_beta, nu_alpha)[0, 0], eps, 2.0)
A:scipy.stats._levy_stable.__init__.beta->numpy.sign(nu_beta)
A:scipy.stats._levy_stable.__init__.TH->_continuous_distns.uniform.rvs(loc=-np.pi / 2.0, scale=np.pi, size=size, random_state=random_state)
A:scipy.stats._levy_stable.__init__.W->_continuous_distns.expon.rvs(size=size, random_state=random_state)
A:scipy.stats._levy_stable.__init__.cosTH->numpy.cos(TH)
A:scipy.stats._levy_stable.__init__.tanTH->numpy.tan(TH)
A:scipy.stats._levy_stable.__init__.(alpha, beta, delta1, gamma)->_fitstart_S1(data)
A:scipy.stats._levy_stable.__init__.psi_1->RectBivariateSpline(nu_beta_range, nu_alpha_range, alpha_table, kx=1, ky=1, s=0)
A:scipy.stats._levy_stable.__init__.psi_2->RectBivariateSpline(nu_beta_range, nu_alpha_range, beta_table, kx=1, ky=1, s=0)
A:scipy.stats._levy_stable.__init__.phi_3->RectBivariateSpline(beta_range, alpha_range, nu_c_table, kx=1, ky=1, s=0)
A:scipy.stats._levy_stable.__init__.phi_5->RectBivariateSpline(beta_range, alpha_range, nu_zeta_table, kx=1, ky=1, s=0)
A:scipy.stats._levy_stable.__init__.p05->numpy.percentile(data, 5)
A:scipy.stats._levy_stable.__init__.p50->numpy.percentile(data, 50)
A:scipy.stats._levy_stable.__init__.p95->numpy.percentile(data, 95)
A:scipy.stats._levy_stable.__init__.p25->numpy.percentile(data, 25)
A:scipy.stats._levy_stable.__init__.p75->numpy.percentile(data, 75)
A:scipy.stats._levy_stable.__init__.ialpha->_ShapeInfo('alpha', False, (0, 2), (False, True))
A:scipy.stats._levy_stable.__init__.ibeta->_ShapeInfo('beta', False, (-1, 1), (True, True))
A:scipy.stats._levy_stable.__init__.X1->numpy.where(alpha == 1.0, X1 + 2 * beta * gamma * np.log(gamma) / np.pi, X1)
A:scipy.stats._levy_stable.__init__.discrete->kwds.pop('discrete', None)
A:scipy.stats._levy_stable.__init__.rndm->kwds.pop('random_state', None)
A:scipy.stats._levy_stable.__init__.((alpha, beta), delta, gamma, size)->self._parse_args_rvs(*args, **kwds)
A:scipy.stats._levy_stable.__init__.((alpha, beta), delta, gamma)->self._parse_args(*args, **kwds)
A:scipy.stats._levy_stable.__init__.(x, alpha, beta)->numpy.broadcast_arrays(x, alpha, beta)
A:scipy.stats._levy_stable.__init__.data_out->numpy.empty(shape=(len(data_in), 1))
A:scipy.stats._levy_stable.__init__.uniq_param_pairs->numpy.unique(data_in[:, 1:], axis=0)
A:scipy.stats._levy_stable.__init__.data_mask->numpy.all(data_in[:, 1:] == pair, axis=-1)
A:scipy.stats._levy_stable.__init__.data_out[data_mask]->numpy.array([f.integral(self.a, x_1) for x_1 in _x]).reshape(data_out[data_mask].shape)
A:scipy.stats._levy_stable.__init__.max_abs_x->numpy.max(np.abs(_x))
A:scipy.stats._levy_stable.__init__.(density_x, density)->pdf_from_cf_with_fft(lambda t: _cf(t, _alpha, _beta), h=h, q=q, level=fft_interpolation_level)
A:scipy.stats._levy_stable.__init__.f->scipy.interpolate.InterpolatedUnivariateSpline(density_x, np.real(density), k=fft_interpolation_degree)
A:scipy.stats._levy_stable.__init__.Cotes_table->numpy.array([[], [1]] + [v[2] for v in _builtincoeffs.values()], dtype=object)
A:scipy.stats._levy_stable.__init__.Cotes->numpy.array([np.pad(r, (0, len(Cotes_table) - 1 - len(r)), mode='constant') for r in Cotes_table])
A:scipy.stats._levy_stable.__init__.steps->numpy.arange(0, N)
A:scipy.stats._levy_stable.__init__.indices->numpy.arange(n).reshape(n, 1)
A:scipy.stats._levy_stable.__init__.s1->numpy.sum((-1) ** steps * Cotes[n, indices] * np.fft.fft((-1) ** steps * cf(-L + h * steps + h * indices / (n - 1))) * np.exp(1j * np.pi * indices / (n - 1) - 2 * 1j * np.pi * indices * steps / (N * (n - 1))), axis=0)
A:scipy.stats._levy_stable.__init__.levy_stable->levy_stable_gen(name='levy_stable')
scipy.stats._levy_stable.__init__._Phi_Z0(alpha,t)
scipy.stats._levy_stable.__init__._Phi_Z1(alpha,t)
scipy.stats._levy_stable.__init__._cdf_single_value_piecewise_Z0(x0,alpha,beta,**kwds)
scipy.stats._levy_stable.__init__._cdf_single_value_piecewise_Z1(x,alpha,beta,**kwds)
scipy.stats._levy_stable.__init__._cdf_single_value_piecewise_post_rounding_Z0(x0,alpha,beta,quad_eps)
scipy.stats._levy_stable.__init__._cf(Phi,t,alpha,beta)
scipy.stats._levy_stable.__init__._fitstart_S0(data)
scipy.stats._levy_stable.__init__._fitstart_S1(data)
scipy.stats._levy_stable.__init__._nolan_round_difficult_input(x0,alpha,beta,zeta,x_tol_near_zeta,alpha_tol_near_one)
scipy.stats._levy_stable.__init__._pdf_single_value_cf_integrate(Phi,x,alpha,beta,**kwds)
scipy.stats._levy_stable.__init__._pdf_single_value_piecewise_Z0(x0,alpha,beta,**kwds)
scipy.stats._levy_stable.__init__._pdf_single_value_piecewise_Z1(x,alpha,beta,**kwds)
scipy.stats._levy_stable.__init__._pdf_single_value_piecewise_post_rounding_Z0(x0,alpha,beta,quad_eps)
scipy.stats._levy_stable.__init__._rvs_Z1(alpha,beta,size=None,random_state=None)
scipy.stats._levy_stable.__init__.levy_stable_gen(rv_continuous)
scipy.stats._levy_stable.__init__.levy_stable_gen._argcheck(self,alpha,beta)
scipy.stats._levy_stable.__init__.levy_stable_gen._cdf(self,x,alpha,beta)
scipy.stats._levy_stable.__init__.levy_stable_gen._fitstart(self,data)
scipy.stats._levy_stable.__init__.levy_stable_gen._parameterization(self)
scipy.stats._levy_stable.__init__.levy_stable_gen._pdf(self,x,alpha,beta)
scipy.stats._levy_stable.__init__.levy_stable_gen._rvs(self,alpha,beta,size=None,random_state=None)
scipy.stats._levy_stable.__init__.levy_stable_gen._shape_info(self)
scipy.stats._levy_stable.__init__.levy_stable_gen._stats(self,alpha,beta)
scipy.stats._levy_stable.__init__.levy_stable_gen.cdf(self,x,*args,**kwds)
scipy.stats._levy_stable.__init__.levy_stable_gen.pdf(self,x,*args,**kwds)
scipy.stats._levy_stable.__init__.levy_stable_gen.rvs(self,*args,**kwds)
scipy.stats._levy_stable.__init__.pdf_from_cf_with_fft(cf,h=0.01,q=9,level=3)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_fit.py----------------------------------------
A:scipy.stats.tests.test_fit.distfn->getattr(stats, distname)
A:scipy.stats.tests.test_fit.truearg->numpy.hstack([arg, [0.0, 1.0]])
A:scipy.stats.tests.test_fit.diffthreshold->numpy.max(np.vstack([truearg * thresh_percent, np.full(distfn.numargs + 2, thresh_min)]), 0)
A:scipy.stats.tests.test_fit.rvs->getattr(stats, distname).rvs(*arg, size=fit_size)
A:scipy.stats.tests.test_fit.est->getattr(stats, distname).fit(rvs, method=method)
A:scipy.stats.tests.test_fit.diffthreshold[-2]->numpy.max([np.abs(rvs.mean()) * thresh_percent, thresh_min])
A:scipy.stats.tests.test_fit.d->getattr(stats, name)
A:scipy.stats.tests.test_fit.data->scipy.stats.norm.rvs(0, 1, size=100, random_state=rng)
A:scipy.stats.tests.test_fit.phat->scipy.stats.expon.fit(data, floc=0)
A:scipy.stats.tests.test_fit.rng->numpy.random.default_rng(1769658657308472721)
A:scipy.stats.tests.test_fit.x->scipy.stats.skewnorm.rvs(-5.044559778383153, loc=1, scale=2, size=50, random_state=rng)
A:scipy.stats.tests.test_fit.res1->goodness_of_fit(stats.weibull_min, x, n_mc_samples=2, guessed_params=guessed_params, fit_params=fit_params, known_params=known_params, random_state=rng)
A:scipy.stats.tests.test_fit.res2->goodness_of_fit(stats.weibull_min, x, n_mc_samples=2, guessed_params=guessed_params, fit_params=fit_params, known_params=known_params, random_state=rng)
A:scipy.stats.tests.test_fit.mark->pytest.mark.filterwarnings('ignore::RuntimeWarning')
A:scipy.stats.tests.test_fit.dist->getattr(stats, dist_name)
A:scipy.stats.tests.test_fit.guess->getattr(stats, dist_name)._fitstart(data)
A:scipy.stats.tests.test_fit.nlff->getattr(dist, nlff_name)
A:scipy.stats.tests.test_fit.nlff1->nlff(params1, data)
A:scipy.stats.tests.test_fit.nlff0->nlff(params0, data)
A:scipy.stats.tests.test_fit.dist_data->dict(distcont + distdiscrete)
A:scipy.stats.tests.test_fit.shapes->numpy.array(dist_data[dist_name])
A:scipy.stats.tests.test_fit.bounds->numpy.empty((len(shapes) + 2, 2), dtype=np.float64)
A:scipy.stats.tests.test_fit.loc->numpy.random.default_rng(1769658657308472721).uniform(*bounds[-2])
A:scipy.stats.tests.test_fit.scale->numpy.random.default_rng(1769658657308472721).uniform(*bounds[-1])
A:scipy.stats.tests.test_fit.ref[-1]->numpy.floor(loc)
A:scipy.stats.tests.test_fit.res->scipy.stats.fit(stats.norm, data, bounds, optimizer=optimizer)
A:scipy.stats.tests.test_fit.res_mle->scipy.stats.fit(dist, data, bounds=bounds, method='mle')
A:scipy.stats.tests.test_fit.res_mse->scipy.stats.fit(dist, data, bounds=bounds, method='mse')
A:scipy.stats.tests.test_fit.ref->scipy.stats.anderson(x, dist='gumbel_r')
A:scipy.stats.tests.test_fit.res3->goodness_of_fit(stats.weibull_min, x, n_mc_samples=2, guessed_params=guessed_params, fit_params=fit_params, known_params=known_params, random_state=rng)
scipy.stats.tests.test_fit.TestFit
scipy.stats.tests.test_fit.TestFit.basic_fit_test(self,dist_name,method)
scipy.stats.tests.test_fit.TestFit.opt(self,*args,**kwds)
scipy.stats.tests.test_fit.TestFit.test_argus(self)
scipy.stats.tests.test_fit.TestFit.test_basic_fit_mle(self,dist_name)
scipy.stats.tests.test_fit.TestFit.test_basic_fit_mse(self,dist_name)
scipy.stats.tests.test_fit.TestFit.test_bounds_iv(self)
scipy.stats.tests.test_fit.TestFit.test_data_iv(self)
scipy.stats.tests.test_fit.TestFit.test_dist_iv(self)
scipy.stats.tests.test_fit.TestFit.test_everything_fixed(self)
scipy.stats.tests.test_fit.TestFit.test_failure(self)
scipy.stats.tests.test_fit.TestFit.test_fit_only_loc_scale(self)
scipy.stats.tests.test_fit.TestFit.test_foldnorm(self)
scipy.stats.tests.test_fit.TestFit.test_guess(self)
scipy.stats.tests.test_fit.TestFit.test_guess_iv(self)
scipy.stats.tests.test_fit.TestFit.test_missing_shape_bounds(self)
scipy.stats.tests.test_fit.TestFit.test_mse_accuracy_1(self)
scipy.stats.tests.test_fit.TestFit.test_mse_accuracy_2(self)
scipy.stats.tests.test_fit.TestFit.test_truncpareto(self)
scipy.stats.tests.test_fit.TestFit.test_truncweibull_min(self)
scipy.stats.tests.test_fit.TestFitResult
scipy.stats.tests.test_fit.TestFitResult.test_plot_iv(self)
scipy.stats.tests.test_fit.TestGoodnessOfFit
scipy.stats.tests.test_fit.TestGoodnessOfFit.test_against_anderson_case_0(self)
scipy.stats.tests.test_fit.TestGoodnessOfFit.test_against_anderson_case_1(self)
scipy.stats.tests.test_fit.TestGoodnessOfFit.test_against_anderson_case_2(self)
scipy.stats.tests.test_fit.TestGoodnessOfFit.test_against_anderson_case_3(self)
scipy.stats.tests.test_fit.TestGoodnessOfFit.test_against_anderson_gumbel_r(self)
scipy.stats.tests.test_fit.TestGoodnessOfFit.test_against_cvm(self)
scipy.stats.tests.test_fit.TestGoodnessOfFit.test_against_ks(self)
scipy.stats.tests.test_fit.TestGoodnessOfFit.test_against_lilliefors(self)
scipy.stats.tests.test_fit.TestGoodnessOfFit.test_gof_iv(self)
scipy.stats.tests.test_fit.TestGoodnessOfFit.test_params_effects(self)
scipy.stats.tests.test_fit._check_loc_scale_mle_fit(name,data,desired,atol=None)
scipy.stats.tests.test_fit.assert_nlff_less_or_close(dist,data,params1,params0,rtol=1e-07,atol=0,nlff_name='nnlf')
scipy.stats.tests.test_fit.cases_test_cont_fit()
scipy.stats.tests.test_fit.cases_test_fit_mle()
scipy.stats.tests.test_fit.cases_test_fit_mse()
scipy.stats.tests.test_fit.cases_test_fitstart()
scipy.stats.tests.test_fit.test_cont_fit(distname,arg,method)
scipy.stats.tests.test_fit.test_expon_fit()
scipy.stats.tests.test_fit.test_fit_error()
scipy.stats.tests.test_fit.test_fitstart(distname,shapes)
scipy.stats.tests.test_fit.test_nnlf_and_related_methods(dist,params)
scipy.stats.tests.test_fit.test_non_default_loc_scale_mle_fit()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_morestats.py----------------------------------------
A:scipy.stats.tests.test_morestats.distcont->dict(distcont)
A:scipy.stats.tests.test_morestats.(mean, var, std)->scipy.stats.mvsdist(data)
A:scipy.stats.tests.test_morestats.x->numpy.array([150, 10], dtype='uint8')
A:scipy.stats.tests.test_morestats.res->scipy.stats.directional_stats(data, normalize=True)
A:scipy.stats.tests.test_morestats.(w, pw)->scipy.stats.shapiro(x)
A:scipy.stats.tests.test_morestats.shapiro_test->scipy.stats.shapiro(x)
A:scipy.stats.tests.test_morestats.x3->scipy.stats.norm.rvs(loc=5, scale=3, size=100, random_state=12345678)
A:scipy.stats.tests.test_morestats.(trans_val, maxlog)->scipy.stats.boxcox([122500, 474400, 110400])
A:scipy.stats.tests.test_morestats.rs->numpy.random.RandomState(123)
A:scipy.stats.tests.test_morestats.x1->numpy.random.default_rng(314499542280078925880191983383461625100).standard_normal((10, 1))
A:scipy.stats.tests.test_morestats.x2->numpy.random.default_rng(314499542280078925880191983383461625100).standard_normal((15, 1))
A:scipy.stats.tests.test_morestats.(A, crit, sig)->scipy.stats.anderson(x2, 'expon')
A:scipy.stats.tests.test_morestats.v->numpy.ones(100)
A:scipy.stats.tests.test_morestats.(a2, crit, sig)->scipy.stats.anderson(v, 'gumbel')
A:scipy.stats.tests.test_morestats.n->numpy.int_(n)
A:scipy.stats.tests.test_morestats.(xbar, s)->scipy.stats.gumbel_l.fit(v)
A:scipy.stats.tests.test_morestats.logcdf->scipy.stats.gumbel_l.logcdf(v, xbar, s)
A:scipy.stats.tests.test_morestats.logsf->scipy.stats.gumbel_l.logsf(v, xbar, s)
A:scipy.stats.tests.test_morestats.i->numpy.arange(np.floor(p * n) + 1)
A:scipy.stats.tests.test_morestats.(A1, crit1, sig1)->scipy.stats.anderson(x1, 'gumbel_r')
A:scipy.stats.tests.test_morestats.(A2, crit2, sig2)->scipy.stats.anderson(x2, 'gumbel_r')
A:scipy.stats.tests.test_morestats.rng->numpy.random.default_rng(314499542280078925880191983383461625100)
A:scipy.stats.tests.test_morestats.dist->getattr(stats, real_distname)
A:scipy.stats.tests.test_morestats.t2->numpy.array([39.2, 39.3, 39.7, 41.4, 41.8, 42.9, 43.3, 45.8])
A:scipy.stats.tests.test_morestats.t3->numpy.array([34.0, 35.0, 39.0, 40.0, 43.0, 43.0, 44.0, 45.0])
A:scipy.stats.tests.test_morestats.t4->numpy.array([34.0, 34.8, 34.8, 35.4, 37.2, 37.8, 41.2, 42.8])
A:scipy.stats.tests.test_morestats.(Tk, tm, p)->scipy.stats.anderson_ksamp((t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14), midrank=True)
A:scipy.stats.tests.test_morestats.t1->numpy.array([38.7, 41.5, 43.8, 44.5, 45.5, 46.0, 47.7, 58.0])
A:scipy.stats.tests.test_morestats.(s, _, p)->scipy.stats.anderson_ksamp([x1, x1 + 13.5], midrank=False)
A:scipy.stats.tests.test_morestats.(W, pval)->scipy.stats.levene(*args)
A:scipy.stats.tests.test_morestats.ramsay->numpy.array((111, 107, 100, 99, 102, 106, 109, 108, 104, 99, 101, 96, 97, 102, 107, 113, 116, 113, 110, 98))
A:scipy.stats.tests.test_morestats.parekh->numpy.array((107, 108, 106, 98, 105, 103, 110, 105, 104, 100, 96, 108, 103, 104, 114, 114, 113, 108, 106, 99))
A:scipy.stats.tests.test_morestats.(statistic, pval)->scipy.stats.ansari(x1, x2)
A:scipy.stats.tests.test_morestats.prob->scipy.stats._morestats._abw_state.pmf(statistic, len(x1), len(x2))
A:scipy.stats.tests.test_morestats.(T, pval)->scipy.stats.bartlett(*args)
A:scipy.stats.tests.test_morestats.(W1, pval1)->scipy.stats.levene(x, y, center='mean')
A:scipy.stats.tests.test_morestats.(W2, pval2)->scipy.stats.levene(x2, y, center='median')
A:scipy.stats.tests.test_morestats.(W0, pval0)->scipy.stats.levene(x, y, center='trimmed', proportiontocut=0.125)
A:scipy.stats.tests.test_morestats.result->scipy.stats.binomtest(x, n, p=p, alternative=alternative)
A:scipy.stats.tests.test_morestats.pval->self.binom_test_func([682, 243], p=3 / 4)
A:scipy.stats.tests.test_morestats.d->numpy.arange(1, 52)
A:scipy.stats.tests.test_morestats.y1->numpy.sum(stats.binom.pmf(i, n, p) <= d, axis=0)
A:scipy.stats.tests.test_morestats.ix->_binary_search_for_binom_tst(lambda x1: stats.binom.pmf(x1, n, p), d, 0, np.floor(p * n))
A:scipy.stats.tests.test_morestats.ci->scipy.stats.directional_stats(data, normalize=True).proportion_ci(confidence_level=conf, method=method)
A:scipy.stats.tests.test_morestats.g1_->_perturb(g1)
A:scipy.stats.tests.test_morestats.g2_->_perturb(g2)
A:scipy.stats.tests.test_morestats.g3_->_perturb(g3)
A:scipy.stats.tests.test_morestats.(Xsq1, pval1)->scipy.stats.fligner(x, y, center='trimmed', proportiontocut=0.125)
A:scipy.stats.tests.test_morestats.(Xsq2, pval2)->scipy.stats.fligner(x[1:-1], y[1:-1], center='mean')
A:scipy.stats.tests.test_morestats.xy->numpy.random.default_rng(314499542280078925880191983383461625100).random(100)
A:scipy.stats.tests.test_morestats.tie_ind->numpy.random.default_rng(314499542280078925880191983383461625100).integers(low=0, high=99, size=5)
A:scipy.stats.tests.test_morestats.num_ties_per_ind->numpy.random.default_rng(314499542280078925880191983383461625100).integers(low=1, high=5, size=5)
A:scipy.stats.tests.test_morestats.(x, y)->numpy.split(xy, 2)
A:scipy.stats.tests.test_morestats.(statistic, pvalue)->scipy.stats.mood(x, y, alternative=alternative)
A:scipy.stats.tests.test_morestats.(z1, p1)->scipy.stats.mood(x1, x2)
A:scipy.stats.tests.test_morestats.(z2, p2)->scipy.stats.mood(x2, x1)
A:scipy.stats.tests.test_morestats.(z_vectest, pval_vectest)->scipy.stats.mood(x1, x2, axis=axis)
A:scipy.stats.tests.test_morestats.y->numpy.arange(25, 0, -1)
A:scipy.stats.tests.test_morestats.(stat1, p1)->scipy.stats.mood(x, y, alternative='two-sided')
A:scipy.stats.tests.test_morestats.(stat2, p2)->scipy.stats.mood(x, y, alternative='less')
A:scipy.stats.tests.test_morestats.(stat3, p3)->scipy.stats.mood(x, y, alternative='greater')
A:scipy.stats.tests.test_morestats.(osm, osr)->scipy.stats.probplot(x, sparams=(), fit=False)
A:scipy.stats.tests.test_morestats.(res, res_fit)->scipy.stats.probplot(x, fit=True)
A:scipy.stats.tests.test_morestats.(osm1, osr1)->scipy.stats.probplot(x, sparams=(2,), fit=False)
A:scipy.stats.tests.test_morestats.(osm2, osr2)->scipy.stats.probplot(x, dist=custom_dist(), fit=False)
A:scipy.stats.tests.test_morestats.(osm3, osr3)->scipy.stats.probplot(x, sparams=(), fit=False)
A:scipy.stats.tests.test_morestats.fig->matplotlib.pyplot.figure()
A:scipy.stats.tests.test_morestats.(res1, fitres1)->scipy.stats.probplot(x, plot=plt)
A:scipy.stats.tests.test_morestats.(res2, fitres2)->scipy.stats.probplot(x, plot=None)
A:scipy.stats.tests.test_morestats.res3->scipy.stats.probplot(x, fit=False, plot=plt)
A:scipy.stats.tests.test_morestats.res4->scipy.stats.probplot(x, fit=False, plot=None)
A:scipy.stats.tests.test_morestats.ax->matplotlib.pyplot.figure().add_subplot(111)
A:scipy.stats.tests.test_morestats._->scipy.stats.wilcoxon(arr, zero_method='wilcox', mode='approx')
A:scipy.stats.tests.test_morestats.nums->range(-4, 5)
A:scipy.stats.tests.test_morestats.(T, p)->scipy.stats.wilcoxon(x, y, correction=True, mode='approx')
A:scipy.stats.tests.test_morestats.ref->scipy.stats.directional_stats(normalized_data, normalize=False)
A:scipy.stats.tests.test_morestats.(stat, p)->scipy.stats.wilcoxon([0.1] * 10, correction=True, mode='approx')
A:scipy.stats.tests.test_morestats.(w, p)->scipy.stats.wilcoxon(d)
A:scipy.stats.tests.test_morestats.pmf1->_get_wilcoxon_distr(n)
A:scipy.stats.tests.test_morestats.pmf2->_get_wilcoxon_distr2(n)
A:scipy.stats.tests.test_morestats.(_, p)->scipy.stats.wilcoxon(x, y, alternative='greater', mode='exact')
A:scipy.stats.tests.test_morestats.wtrue->x[x > 0].sum()
A:scipy.stats.tests.test_morestats.data->numpy.array([[0.8660254, 0.5, 0.0], [1.7320508, -1.0, 0.0]])
A:scipy.stats.tests.test_morestats.m1->scipy.stats.moment(data, moment=1)
A:scipy.stats.tests.test_morestats.m2->scipy.stats.moment(data, moment=2)
A:scipy.stats.tests.test_morestats.m3->scipy.stats.moment(data, moment=3)
A:scipy.stats.tests.test_morestats.(svals, ppcc)->scipy.stats.ppcc_plot([], 0, 1)
A:scipy.stats.tests.test_morestats.(svals1, ppcc1)->scipy.stats.ppcc_plot(self.x, -10, 10, dist='tukeylambda')
A:scipy.stats.tests.test_morestats.(svals2, ppcc2)->scipy.stats.ppcc_plot(self.x, -10, 10, dist=stats.tukeylambda)
A:scipy.stats.tests.test_morestats.(svals3, ppcc3)->scipy.stats.ppcc_plot(self.x, -10, 10)
A:scipy.stats.tests.test_morestats.max1->scipy.stats.ppcc_max(x, dist='tukeylambda')
A:scipy.stats.tests.test_morestats.max2->scipy.stats.ppcc_max(x, dist=stats.tukeylambda)
A:scipy.stats.tests.test_morestats.max3->scipy.stats.ppcc_max(x)
A:scipy.stats.tests.test_morestats.llf->scipy.stats.yeojohnson_llf(lmbda, x)
A:scipy.stats.tests.test_morestats.llf2->scipy.stats.yeojohnson_llf(lmbda, np.vstack([x, x]).T)
A:scipy.stats.tests.test_morestats.xt->scipy.stats.yeojohnson(x, lmbda=3)
A:scipy.stats.tests.test_morestats.(xt, maxlog)->scipy.stats.yeojohnson(x_inv)
A:scipy.stats.tests.test_morestats.(_, _, interval)->scipy.stats.boxcox(x, alpha=0.999)
A:scipy.stats.tests.test_morestats.(y, lam)->scipy.stats.boxcox(_boxcox_data)
A:scipy.stats.tests.test_morestats.(_, lmbda)->scipy.stats.boxcox(_boxcox_data, lmbda=None)
A:scipy.stats.tests.test_morestats.(_, lmbda_bounded)->scipy.stats.boxcox(_boxcox_data, lmbda=None, optimizer=optimizer)
A:scipy.stats.tests.test_morestats.maxlog->scipy.stats.yeojohnson_normmax(self.x)
A:scipy.stats.tests.test_morestats.(_, maxlog_boxcox)->scipy.stats.boxcox(self.x)
A:scipy.stats.tests.test_morestats.maxlog_all->scipy.stats.boxcox_normmax(self.x, method='all')
A:scipy.stats.tests.test_morestats.lmbda->scipy.stats.yeojohnson_normmax(x)
A:scipy.stats.tests.test_morestats.lmbda_rounded->numpy.round(lmbda, 5)
A:scipy.stats.tests.test_morestats.lmbda_range->numpy.linspace(lmbda_rounded - 0.01, lmbda_rounded + 0.01, 1001)
A:scipy.stats.tests.test_morestats.lmbda2->scipy.stats.boxcox_normmax(self.x, optimizer=optimizer)
A:scipy.stats.tests.test_morestats.(lmbdas, ppcc)->scipy.stats.boxcox_normplot(self.x, -10, 10, N=N)
A:scipy.stats.tests.test_morestats.x_inv->_inverse_transform(x, lmbda)
A:scipy.stats.tests.test_morestats.(xt1, _)->scipy.stats.yeojohnson(x)
A:scipy.stats.tests.test_morestats.(xt2, _)->scipy.stats.yeojohnson(list(x))
A:scipy.stats.tests.test_morestats.x_int->numpy.arange(8, dtype=dtype)
A:scipy.stats.tests.test_morestats.x_float->numpy.arange(8, dtype=np.float64)
A:scipy.stats.tests.test_morestats.(xt_int, lmbda_int)->scipy.stats.yeojohnson(x_int)
A:scipy.stats.tests.test_morestats.(xt_float, lmbda_float)->scipy.stats.yeojohnson(x_float)
A:scipy.stats.tests.test_morestats.(xt_yeo, lam_yeo)->scipy.stats.yeojohnson(x)
A:scipy.stats.tests.test_morestats.(xt_box, lam_box)->scipy.stats.boxcox(x + 1)
A:scipy.stats.tests.test_morestats.M1->scipy.stats.circmean(x, high=360, axis=0)
A:scipy.stats.tests.test_morestats.M2->scipy.stats.circmean(x)
A:scipy.stats.tests.test_morestats.V1->scipy.stats.circvar(x, high=360, axis=0)
A:scipy.stats.tests.test_morestats.V2->scipy.stats.circvar(x.ravel(), high=360)
A:scipy.stats.tests.test_morestats.S1->scipy.stats.circstd(x, high=360, axis=0)
A:scipy.stats.tests.test_morestats.S2->scipy.stats.circstd(x.ravel(), high=360)
A:scipy.stats.tests.test_morestats.circstat->test_func(x)
A:scipy.stats.tests.test_morestats.normal->numpy_func(x)
A:scipy.stats.tests.test_morestats.out->test_func(x, nan_policy='omit', axis=1)
A:scipy.stats.tests.test_morestats.m->scipy.stats.circmean(np.arange(0, 2, 0.1), np.pi, -np.pi)
A:scipy.stats.tests.test_morestats.(stat, p, med, tbl)->scipy.stats.median_test(x, y)
A:scipy.stats.tests.test_morestats.(stat, p, m, tbl)->scipy.stats.median_test(x, y, correction=False)
A:scipy.stats.tests.test_morestats.mt1->scipy.stats.median_test(x, y, nan_policy='propagate')
A:scipy.stats.tests.test_morestats.(s, p, m, t)->scipy.stats.median_test(x, y, nan_policy='omit')
A:scipy.stats.tests.test_morestats.(exp_stat, exp_p, dof, e)->scipy.stats.chi2_contingency(tbl, correction=False)
A:scipy.stats.tests.test_morestats.dirstats->scipy.stats.directional_stats(full_array, axis=2)
A:scipy.stats.tests.test_morestats.mean_rounded->numpy.round(directional_mean, 4)
A:scipy.stats.tests.test_morestats.reference_mean->numpy.array([0.2984, -0.1346, -0.9449])
A:scipy.stats.tests.test_morestats.testdata_vector->numpy.stack((np.cos(testdata), np.sin(testdata)), axis=1)
A:scipy.stats.tests.test_morestats.directional_mean_angle->numpy.arctan2(directional_mean[1], directional_mean[0])
A:scipy.stats.tests.test_morestats.circmean->scipy.stats.circmean(testdata)
A:scipy.stats.tests.test_morestats.circular_var->scipy.stats.circvar(testdata)
A:scipy.stats.tests.test_morestats.full_array->numpy.tile(data, (2, 2, 2, 1))
A:scipy.stats.tests.test_morestats.expected->numpy.array([[[1.0, 0.0, 0.0], [1.0, 0.0, 0.0]], [[1.0, 0.0, 0.0], [1.0, 0.0, 0.0]]])
A:scipy.stats.tests.test_morestats.data_array->numpy.asarray(data)
scipy.stats.tests.testTestAnderson
scipy.stats.tests.testTestAnderson.test_anderson_fit_params(self,distname)
scipy.stats.tests.testTestAnderson.test_bad_arg(self)
scipy.stats.tests.testTestAnderson.test_expon(self)
scipy.stats.tests.testTestAnderson.test_gumbel(self)
scipy.stats.tests.testTestAnderson.test_gumbel_l(self)
scipy.stats.tests.testTestAnderson.test_gumbel_r(self)
scipy.stats.tests.testTestAnderson.test_normal(self)
scipy.stats.tests.testTestAnderson.test_result_attributes(self)
scipy.stats.tests.testTestAndersonKSamp
scipy.stats.tests.testTestAndersonKSamp.test_R_kSamples(self)
scipy.stats.tests.testTestAndersonKSamp.test_empty_sample(self)
scipy.stats.tests.testTestAndersonKSamp.test_example1a(self)
scipy.stats.tests.testTestAndersonKSamp.test_example1b(self)
scipy.stats.tests.testTestAndersonKSamp.test_example2a(self)
scipy.stats.tests.testTestAndersonKSamp.test_example2b(self)
scipy.stats.tests.testTestAndersonKSamp.test_no_distinct_observations(self)
scipy.stats.tests.testTestAndersonKSamp.test_not_enough_samples(self)
scipy.stats.tests.testTestAndersonKSamp.test_result_attributes(self)
scipy.stats.tests.testTestAnsari
scipy.stats.tests.testTestAnsari.test_alternative_approx(self)
scipy.stats.tests.testTestAnsari.test_alternative_exact(self)
scipy.stats.tests.testTestAnsari.test_alternative_exact_with_R(self,x,y,alternative,expected)
scipy.stats.tests.testTestAnsari.test_approx(self)
scipy.stats.tests.testTestAnsari.test_bad_alternative(self)
scipy.stats.tests.testTestAnsari.test_bad_arg(self)
scipy.stats.tests.testTestAnsari.test_exact(self)
scipy.stats.tests.testTestAnsari.test_result_attributes(self)
scipy.stats.tests.testTestAnsari.test_small(self)
scipy.stats.tests.testTestBartlett
scipy.stats.tests.testTestBartlett.test_1d_input(self)
scipy.stats.tests.testTestBartlett.test_bad_arg(self)
scipy.stats.tests.testTestBartlett.test_data(self)
scipy.stats.tests.testTestBartlett.test_empty_arg(self)
scipy.stats.tests.testTestBartlett.test_result_attributes(self)
scipy.stats.tests.testTestBayes_mvs
scipy.stats.tests.testTestBayes_mvs.test_basic(self)
scipy.stats.tests.testTestBayes_mvs.test_empty_input(self)
scipy.stats.tests.testTestBayes_mvs.test_result_attributes(self)
scipy.stats.tests.testTestBinomTest
scipy.stats.tests.testTestBinomTest.test_alias(self)
scipy.stats.tests.testTestBinomTest.test_binary_srch_for_binom_tst(self)
scipy.stats.tests.testTestBinomTest.test_ci_wilson_method(self,k,alternative,corr,conf,ci_low,ci_high)
scipy.stats.tests.testTestBinomTest.test_confidence_interval_exact_k0(self,alternative,pval,ci_high)
scipy.stats.tests.testTestBinomTest.test_confidence_interval_exact_k_is_n(self,alternative,pval,ci_low)
scipy.stats.tests.testTestBinomTest.test_confidence_intervals1(self,alternative,pval,ci_low,ci_high)
scipy.stats.tests.testTestBinomTest.test_confidence_intervals2(self,alternative,pval,ci_low,ci_high)
scipy.stats.tests.testTestBinomTest.test_edge_cases(self)
scipy.stats.tests.testTestBinomTest.test_estimate_equals_hypothesized_prop(self)
scipy.stats.tests.testTestBinomTest.test_invalid_ci_method(self)
scipy.stats.tests.testTestBinomTest.test_invalid_confidence_level(self)
scipy.stats.tests.testTestBinomTest.test_invalid_k_n(self,k,n)
scipy.stats.tests.testTestBinomTest.test_invalid_k_too_big(self)
scipy.stats.tests.testTestBinomTest.test_two_sided_pvalues1(self)
scipy.stats.tests.testTestBinomTest.test_two_sided_pvalues2(self)
scipy.stats.tests.testTestBinomTestP
scipy.stats.tests.testTestBinomTestP.binom_test_func(x,n=None,p=0.5,alternative='two-sided')
scipy.stats.tests.testTestBinomTestP.test_alternatives(self)
scipy.stats.tests.testTestBinomTestP.test_bad_len_x(self)
scipy.stats.tests.testTestBinomTestP.test_bad_n(self)
scipy.stats.tests.testTestBinomTestP.test_bad_p(self)
scipy.stats.tests.testTestBinomTestP.test_boost_overflow_raises(self)
scipy.stats.tests.testTestBinomTestP.test_data(self)
scipy.stats.tests.testTestBoxcox
scipy.stats.tests.testTestBoxcox.test_alpha(self)
scipy.stats.tests.testTestBoxcox.test_bad_optimizer_type_raises_error(self,optimizer)
scipy.stats.tests.testTestBoxcox.test_bad_optimizer_value_raises_error(self)
scipy.stats.tests.testTestBoxcox.test_bounded_optimizer_against_unbounded_optimizer(self)
scipy.stats.tests.testTestBoxcox.test_bounded_optimizer_within_bounds(self,bounds)
scipy.stats.tests.testTestBoxcox.test_boxcox_bad_arg(self)
scipy.stats.tests.testTestBoxcox.test_empty(self)
scipy.stats.tests.testTestBoxcox.test_fixed_lmbda(self)
scipy.stats.tests.testTestBoxcox.test_gh_6873(self)
scipy.stats.tests.testTestBoxcox.test_lmbda_None(self)
scipy.stats.tests.testTestBoxcoxNormmax
scipy.stats.tests.testTestBoxcoxNormmax.setup_method(self)
scipy.stats.tests.testTestBoxcoxNormmax.test_all(self)
scipy.stats.tests.testTestBoxcoxNormmax.test_bounded_optimizer_within_bounds(self,method,bounds)
scipy.stats.tests.testTestBoxcoxNormmax.test_mle(self)
scipy.stats.tests.testTestBoxcoxNormmax.test_pearsonr(self)
scipy.stats.tests.testTestBoxcoxNormmax.test_user_defined_optimizer(self)
scipy.stats.tests.testTestBoxcoxNormmax.test_user_defined_optimizer_and_brack_raises_error(self)
scipy.stats.tests.testTestBoxcoxNormplot
scipy.stats.tests.testTestBoxcoxNormplot.setup_method(self)
scipy.stats.tests.testTestBoxcoxNormplot.test_basic(self)
scipy.stats.tests.testTestBoxcoxNormplot.test_empty(self)
scipy.stats.tests.testTestBoxcoxNormplot.test_invalid_inputs(self)
scipy.stats.tests.testTestBoxcoxNormplot.test_plot_kwarg(self)
scipy.stats.tests.testTestBoxcox_llf
scipy.stats.tests.testTestBoxcox_llf.test_2d_input(self)
scipy.stats.tests.testTestBoxcox_llf.test_array_like(self)
scipy.stats.tests.testTestBoxcox_llf.test_basic(self)
scipy.stats.tests.testTestBoxcox_llf.test_empty(self)
scipy.stats.tests.testTestBoxcox_llf.test_gh_6873(self)
scipy.stats.tests.testTestCircFuncs
scipy.stats.tests.testTestCircFuncs.test_bad_nan_policy(self,test_func,x)
scipy.stats.tests.testTestCircFuncs.test_circfuncs(self,test_func,expected)
scipy.stats.tests.testTestCircFuncs.test_circfuncs_array_like(self,test_func,expected)
scipy.stats.tests.testTestCircFuncs.test_circfuncs_close(self,test_func,numpy_func)
scipy.stats.tests.testTestCircFuncs.test_circfuncs_small(self)
scipy.stats.tests.testTestCircFuncs.test_circfuncs_uint8(self)
scipy.stats.tests.testTestCircFuncs.test_circmean_axis(self)
scipy.stats.tests.testTestCircFuncs.test_circmean_range(self)
scipy.stats.tests.testTestCircFuncs.test_circmean_scalar(self)
scipy.stats.tests.testTestCircFuncs.test_circstd_axis(self)
scipy.stats.tests.testTestCircFuncs.test_circvar_axis(self)
scipy.stats.tests.testTestCircFuncs.test_empty(self,test_func)
scipy.stats.tests.testTestCircFuncs.test_nan_omit(self,test_func,expected)
scipy.stats.tests.testTestCircFuncs.test_nan_omit_all(self,test_func)
scipy.stats.tests.testTestCircFuncs.test_nan_omit_all_axis(self,test_func)
scipy.stats.tests.testTestCircFuncs.test_nan_omit_array(self,test_func,expected)
scipy.stats.tests.testTestCircFuncs.test_nan_propagate(self,test_func)
scipy.stats.tests.testTestCircFuncs.test_nan_propagate_array(self,test_func,expected)
scipy.stats.tests.testTestCircFuncs.test_nan_raise(self,test_func,x)
scipy.stats.tests.testTestDirectionalStats
scipy.stats.tests.testTestDirectionalStats.test_directional_mean_higher_dim(self)
scipy.stats.tests.testTestDirectionalStats.test_directional_stats_1d_error(self)
scipy.stats.tests.testTestDirectionalStats.test_directional_stats_2d(self)
scipy.stats.tests.testTestDirectionalStats.test_directional_stats_2d_special_cases(self,angles,ref)
scipy.stats.tests.testTestDirectionalStats.test_directional_stats_correctness(self)
scipy.stats.tests.testTestDirectionalStats.test_directional_stats_list_ndarray_input(self)
scipy.stats.tests.testTestDirectionalStats.test_directional_stats_normalize(self)
scipy.stats.tests.testTestFligner
scipy.stats.tests.testTestFligner.test_bad_center_value(self)
scipy.stats.tests.testTestFligner.test_bad_keyword(self)
scipy.stats.tests.testTestFligner.test_bad_num_args(self)
scipy.stats.tests.testTestFligner.test_data(self)
scipy.stats.tests.testTestFligner.test_empty_arg(self)
scipy.stats.tests.testTestFligner.test_trimmed1(self)
scipy.stats.tests.testTestFligner.test_trimmed2(self)
scipy.stats.tests.testTestKstat
scipy.stats.tests.testTestKstat.test_empty_input(self)
scipy.stats.tests.testTestKstat.test_kstat_bad_arg(self)
scipy.stats.tests.testTestKstat.test_moments_normal_distribution(self)
scipy.stats.tests.testTestKstat.test_nan_input(self)
scipy.stats.tests.testTestKstatVar
scipy.stats.tests.testTestKstatVar.test_bad_arg(self)
scipy.stats.tests.testTestKstatVar.test_empty_input(self)
scipy.stats.tests.testTestKstatVar.test_nan_input(self)
scipy.stats.tests.testTestLevene
scipy.stats.tests.testTestLevene.test_1d_input(self)
scipy.stats.tests.testTestLevene.test_bad_center_value(self)
scipy.stats.tests.testTestLevene.test_bad_keyword(self)
scipy.stats.tests.testTestLevene.test_data(self)
scipy.stats.tests.testTestLevene.test_equal_mean_median(self)
scipy.stats.tests.testTestLevene.test_result_attributes(self)
scipy.stats.tests.testTestLevene.test_too_few_args(self)
scipy.stats.tests.testTestLevene.test_trimmed1(self)
scipy.stats.tests.testTestLevene.test_trimmed2(self)
scipy.stats.tests.testTestMedianTest
scipy.stats.tests.testTestMedianTest.test_bad_keyword(self)
scipy.stats.tests.testTestMedianTest.test_bad_n_samples(self)
scipy.stats.tests.testTestMedianTest.test_bad_nan_policy(self)
scipy.stats.tests.testTestMedianTest.test_bad_ties(self)
scipy.stats.tests.testTestMedianTest.test_basic(self)
scipy.stats.tests.testTestMedianTest.test_empty_contingency_row(self)
scipy.stats.tests.testTestMedianTest.test_empty_sample(self)
scipy.stats.tests.testTestMedianTest.test_empty_when_ties_ignored(self)
scipy.stats.tests.testTestMedianTest.test_nan_policy_options(self)
scipy.stats.tests.testTestMedianTest.test_result(self,correction)
scipy.stats.tests.testTestMedianTest.test_simple(self)
scipy.stats.tests.testTestMedianTest.test_ties_options(self)
scipy.stats.tests.testTestMood
scipy.stats.tests.testTestMood.test_against_SAS(self,x,y,alternative,stat_expect,p_expect)
scipy.stats.tests.testTestMood.test_against_SAS_2(self,alternative,expected)
scipy.stats.tests.testTestMood.test_mood_2d(self)
scipy.stats.tests.testTestMood.test_mood_3d(self)
scipy.stats.tests.testTestMood.test_mood_alternative(self)
scipy.stats.tests.testTestMood.test_mood_bad_arg(self)
scipy.stats.tests.testTestMood.test_mood_order_of_args(self)
scipy.stats.tests.testTestMood.test_mood_with_axis_none(self)
scipy.stats.tests.testTestMood.test_result(self,alternative)
scipy.stats.tests.testTestMvsdist
scipy.stats.tests.testTestMvsdist.test_bad_arg(self)
scipy.stats.tests.testTestMvsdist.test_basic(self)
scipy.stats.tests.testTestMvsdist.test_empty_input(self)
scipy.stats.tests.testTestMvsdist.test_warns(self)
scipy.stats.tests.testTestPpccMax
scipy.stats.tests.testTestPpccMax.test_brack(self)
scipy.stats.tests.testTestPpccMax.test_dist(self)
scipy.stats.tests.testTestPpccMax.test_ppcc_max_bad_arg(self)
scipy.stats.tests.testTestPpccMax.test_ppcc_max_basic(self)
scipy.stats.tests.testTestPpccPlot
scipy.stats.tests.testTestPpccPlot.setup_method(self)
scipy.stats.tests.testTestPpccPlot.test_basic(self)
scipy.stats.tests.testTestPpccPlot.test_dist(self)
scipy.stats.tests.testTestPpccPlot.test_empty(self)
scipy.stats.tests.testTestPpccPlot.test_invalid_inputs(self)
scipy.stats.tests.testTestPpccPlot.test_plot_kwarg(self)
scipy.stats.tests.testTestProbplot
scipy.stats.tests.testTestProbplot.test_array_of_size_one(self)
scipy.stats.tests.testTestProbplot.test_basic(self)
scipy.stats.tests.testTestProbplot.test_dist_keyword(self)
scipy.stats.tests.testTestProbplot.test_empty(self)
scipy.stats.tests.testTestProbplot.test_plot_kwarg(self)
scipy.stats.tests.testTestProbplot.test_probplot_bad_args(self)
scipy.stats.tests.testTestProbplot.test_sparams_keyword(self)
scipy.stats.tests.testTestShapiro
scipy.stats.tests.testTestShapiro.test_2d(self)
scipy.stats.tests.testTestShapiro.test_bad_arg(self)
scipy.stats.tests.testTestShapiro.test_basic(self)
scipy.stats.tests.testTestShapiro.test_empty_input(self)
scipy.stats.tests.testTestShapiro.test_gh14462(self)
scipy.stats.tests.testTestShapiro.test_nan_input(self)
scipy.stats.tests.testTestShapiro.test_not_enough_values(self)
scipy.stats.tests.testTestWilcoxon
scipy.stats.tests.testTestWilcoxon.test_accuracy_wilcoxon(self)
scipy.stats.tests.testTestWilcoxon.test_auto(self)
scipy.stats.tests.testTestWilcoxon.test_exact_basic(self)
scipy.stats.tests.testTestWilcoxon.test_exact_p_1(self,x)
scipy.stats.tests.testTestWilcoxon.test_exact_pval(self)
scipy.stats.tests.testTestWilcoxon.test_onesided(self)
scipy.stats.tests.testTestWilcoxon.test_pratt(self)
scipy.stats.tests.testTestWilcoxon.test_wilcoxon_arg_type(self)
scipy.stats.tests.testTestWilcoxon.test_wilcoxon_bad_arg(self)
scipy.stats.tests.testTestWilcoxon.test_wilcoxon_has_zstatistic(self)
scipy.stats.tests.testTestWilcoxon.test_wilcoxon_result_attributes(self)
scipy.stats.tests.testTestWilcoxon.test_wilcoxon_tie(self)
scipy.stats.tests.testTestWilcoxon.test_zero_diff(self)
scipy.stats.tests.testTestYeojohnson
scipy.stats.tests.testTestYeojohnson.test_array_like(self)
scipy.stats.tests.testTestYeojohnson.test_empty(self)
scipy.stats.tests.testTestYeojohnson.test_fixed_lmbda(self)
scipy.stats.tests.testTestYeojohnson.test_input_dtype_complex(self,dtype)
scipy.stats.tests.testTestYeojohnson.test_input_dtype_integer(self,dtype)
scipy.stats.tests.testTestYeojohnson.test_input_high_variance(self)
scipy.stats.tests.testTestYeojohnson.test_lmbda_None(self,lmbda)
scipy.stats.tests.testTestYeojohnsonNormmax
scipy.stats.tests.testTestYeojohnsonNormmax.setup_method(self)
scipy.stats.tests.testTestYeojohnsonNormmax.test_darwin_example(self)
scipy.stats.tests.testTestYeojohnsonNormmax.test_mle(self)
scipy.stats.tests.testTestYeojohnson_llf
scipy.stats.tests.testTestYeojohnson_llf.test_2d_input(self)
scipy.stats.tests.testTestYeojohnson_llf.test_array_like(self)
scipy.stats.tests.testTestYeojohnson_llf.test_empty(self)
scipy.stats.tests.test_morestats.TestAnderson
scipy.stats.tests.test_morestats.TestAnderson.test_anderson_fit_params(self,distname)
scipy.stats.tests.test_morestats.TestAnderson.test_bad_arg(self)
scipy.stats.tests.test_morestats.TestAnderson.test_expon(self)
scipy.stats.tests.test_morestats.TestAnderson.test_gumbel(self)
scipy.stats.tests.test_morestats.TestAnderson.test_gumbel_l(self)
scipy.stats.tests.test_morestats.TestAnderson.test_gumbel_r(self)
scipy.stats.tests.test_morestats.TestAnderson.test_normal(self)
scipy.stats.tests.test_morestats.TestAnderson.test_result_attributes(self)
scipy.stats.tests.test_morestats.TestAndersonKSamp
scipy.stats.tests.test_morestats.TestAndersonKSamp.test_R_kSamples(self)
scipy.stats.tests.test_morestats.TestAndersonKSamp.test_empty_sample(self)
scipy.stats.tests.test_morestats.TestAndersonKSamp.test_example1a(self)
scipy.stats.tests.test_morestats.TestAndersonKSamp.test_example1b(self)
scipy.stats.tests.test_morestats.TestAndersonKSamp.test_example2a(self)
scipy.stats.tests.test_morestats.TestAndersonKSamp.test_example2b(self)
scipy.stats.tests.test_morestats.TestAndersonKSamp.test_no_distinct_observations(self)
scipy.stats.tests.test_morestats.TestAndersonKSamp.test_not_enough_samples(self)
scipy.stats.tests.test_morestats.TestAndersonKSamp.test_result_attributes(self)
scipy.stats.tests.test_morestats.TestAnsari
scipy.stats.tests.test_morestats.TestAnsari.test_alternative_approx(self)
scipy.stats.tests.test_morestats.TestAnsari.test_alternative_exact(self)
scipy.stats.tests.test_morestats.TestAnsari.test_alternative_exact_with_R(self,x,y,alternative,expected)
scipy.stats.tests.test_morestats.TestAnsari.test_approx(self)
scipy.stats.tests.test_morestats.TestAnsari.test_bad_alternative(self)
scipy.stats.tests.test_morestats.TestAnsari.test_bad_arg(self)
scipy.stats.tests.test_morestats.TestAnsari.test_exact(self)
scipy.stats.tests.test_morestats.TestAnsari.test_result_attributes(self)
scipy.stats.tests.test_morestats.TestAnsari.test_small(self)
scipy.stats.tests.test_morestats.TestBartlett
scipy.stats.tests.test_morestats.TestBartlett.test_1d_input(self)
scipy.stats.tests.test_morestats.TestBartlett.test_bad_arg(self)
scipy.stats.tests.test_morestats.TestBartlett.test_data(self)
scipy.stats.tests.test_morestats.TestBartlett.test_empty_arg(self)
scipy.stats.tests.test_morestats.TestBartlett.test_result_attributes(self)
scipy.stats.tests.test_morestats.TestBayes_mvs
scipy.stats.tests.test_morestats.TestBayes_mvs.test_basic(self)
scipy.stats.tests.test_morestats.TestBayes_mvs.test_empty_input(self)
scipy.stats.tests.test_morestats.TestBayes_mvs.test_result_attributes(self)
scipy.stats.tests.test_morestats.TestBinomTest
scipy.stats.tests.test_morestats.TestBinomTest.test_alias(self)
scipy.stats.tests.test_morestats.TestBinomTest.test_binary_srch_for_binom_tst(self)
scipy.stats.tests.test_morestats.TestBinomTest.test_ci_wilson_method(self,k,alternative,corr,conf,ci_low,ci_high)
scipy.stats.tests.test_morestats.TestBinomTest.test_confidence_interval_exact_k0(self,alternative,pval,ci_high)
scipy.stats.tests.test_morestats.TestBinomTest.test_confidence_interval_exact_k_is_n(self,alternative,pval,ci_low)
scipy.stats.tests.test_morestats.TestBinomTest.test_confidence_intervals1(self,alternative,pval,ci_low,ci_high)
scipy.stats.tests.test_morestats.TestBinomTest.test_confidence_intervals2(self,alternative,pval,ci_low,ci_high)
scipy.stats.tests.test_morestats.TestBinomTest.test_edge_cases(self)
scipy.stats.tests.test_morestats.TestBinomTest.test_estimate_equals_hypothesized_prop(self)
scipy.stats.tests.test_morestats.TestBinomTest.test_invalid_ci_method(self)
scipy.stats.tests.test_morestats.TestBinomTest.test_invalid_confidence_level(self)
scipy.stats.tests.test_morestats.TestBinomTest.test_invalid_k_n(self,k,n)
scipy.stats.tests.test_morestats.TestBinomTest.test_invalid_k_too_big(self)
scipy.stats.tests.test_morestats.TestBinomTest.test_two_sided_pvalues1(self)
scipy.stats.tests.test_morestats.TestBinomTest.test_two_sided_pvalues2(self)
scipy.stats.tests.test_morestats.TestBinomTestP
scipy.stats.tests.test_morestats.TestBinomTestP.binom_test_func(x,n=None,p=0.5,alternative='two-sided')
scipy.stats.tests.test_morestats.TestBinomTestP.test_alternatives(self)
scipy.stats.tests.test_morestats.TestBinomTestP.test_bad_len_x(self)
scipy.stats.tests.test_morestats.TestBinomTestP.test_bad_n(self)
scipy.stats.tests.test_morestats.TestBinomTestP.test_bad_p(self)
scipy.stats.tests.test_morestats.TestBinomTestP.test_boost_overflow_raises(self)
scipy.stats.tests.test_morestats.TestBinomTestP.test_data(self)
scipy.stats.tests.test_morestats.TestBoxcox
scipy.stats.tests.test_morestats.TestBoxcox.test_alpha(self)
scipy.stats.tests.test_morestats.TestBoxcox.test_bad_optimizer_type_raises_error(self,optimizer)
scipy.stats.tests.test_morestats.TestBoxcox.test_bad_optimizer_value_raises_error(self)
scipy.stats.tests.test_morestats.TestBoxcox.test_bounded_optimizer_against_unbounded_optimizer(self)
scipy.stats.tests.test_morestats.TestBoxcox.test_bounded_optimizer_within_bounds(self,bounds)
scipy.stats.tests.test_morestats.TestBoxcox.test_boxcox_bad_arg(self)
scipy.stats.tests.test_morestats.TestBoxcox.test_empty(self)
scipy.stats.tests.test_morestats.TestBoxcox.test_fixed_lmbda(self)
scipy.stats.tests.test_morestats.TestBoxcox.test_gh_6873(self)
scipy.stats.tests.test_morestats.TestBoxcox.test_lmbda_None(self)
scipy.stats.tests.test_morestats.TestBoxcoxNormmax
scipy.stats.tests.test_morestats.TestBoxcoxNormmax.setup_method(self)
scipy.stats.tests.test_morestats.TestBoxcoxNormmax.test_all(self)
scipy.stats.tests.test_morestats.TestBoxcoxNormmax.test_bounded_optimizer_within_bounds(self,method,bounds)
scipy.stats.tests.test_morestats.TestBoxcoxNormmax.test_mle(self)
scipy.stats.tests.test_morestats.TestBoxcoxNormmax.test_pearsonr(self)
scipy.stats.tests.test_morestats.TestBoxcoxNormmax.test_user_defined_optimizer(self)
scipy.stats.tests.test_morestats.TestBoxcoxNormmax.test_user_defined_optimizer_and_brack_raises_error(self)
scipy.stats.tests.test_morestats.TestBoxcoxNormplot
scipy.stats.tests.test_morestats.TestBoxcoxNormplot.setup_method(self)
scipy.stats.tests.test_morestats.TestBoxcoxNormplot.test_basic(self)
scipy.stats.tests.test_morestats.TestBoxcoxNormplot.test_empty(self)
scipy.stats.tests.test_morestats.TestBoxcoxNormplot.test_invalid_inputs(self)
scipy.stats.tests.test_morestats.TestBoxcoxNormplot.test_plot_kwarg(self)
scipy.stats.tests.test_morestats.TestBoxcox_llf
scipy.stats.tests.test_morestats.TestBoxcox_llf.test_2d_input(self)
scipy.stats.tests.test_morestats.TestBoxcox_llf.test_array_like(self)
scipy.stats.tests.test_morestats.TestBoxcox_llf.test_basic(self)
scipy.stats.tests.test_morestats.TestBoxcox_llf.test_empty(self)
scipy.stats.tests.test_morestats.TestBoxcox_llf.test_gh_6873(self)
scipy.stats.tests.test_morestats.TestCircFuncs
scipy.stats.tests.test_morestats.TestCircFuncs.test_bad_nan_policy(self,test_func,x)
scipy.stats.tests.test_morestats.TestCircFuncs.test_circfuncs(self,test_func,expected)
scipy.stats.tests.test_morestats.TestCircFuncs.test_circfuncs_array_like(self,test_func,expected)
scipy.stats.tests.test_morestats.TestCircFuncs.test_circfuncs_close(self,test_func,numpy_func)
scipy.stats.tests.test_morestats.TestCircFuncs.test_circfuncs_small(self)
scipy.stats.tests.test_morestats.TestCircFuncs.test_circfuncs_uint8(self)
scipy.stats.tests.test_morestats.TestCircFuncs.test_circmean_axis(self)
scipy.stats.tests.test_morestats.TestCircFuncs.test_circmean_range(self)
scipy.stats.tests.test_morestats.TestCircFuncs.test_circmean_scalar(self)
scipy.stats.tests.test_morestats.TestCircFuncs.test_circstd_axis(self)
scipy.stats.tests.test_morestats.TestCircFuncs.test_circvar_axis(self)
scipy.stats.tests.test_morestats.TestCircFuncs.test_empty(self,test_func)
scipy.stats.tests.test_morestats.TestCircFuncs.test_nan_omit(self,test_func,expected)
scipy.stats.tests.test_morestats.TestCircFuncs.test_nan_omit_all(self,test_func)
scipy.stats.tests.test_morestats.TestCircFuncs.test_nan_omit_all_axis(self,test_func)
scipy.stats.tests.test_morestats.TestCircFuncs.test_nan_omit_array(self,test_func,expected)
scipy.stats.tests.test_morestats.TestCircFuncs.test_nan_propagate(self,test_func)
scipy.stats.tests.test_morestats.TestCircFuncs.test_nan_propagate_array(self,test_func,expected)
scipy.stats.tests.test_morestats.TestCircFuncs.test_nan_raise(self,test_func,x)
scipy.stats.tests.test_morestats.TestDirectionalStats
scipy.stats.tests.test_morestats.TestDirectionalStats.test_directional_mean_higher_dim(self)
scipy.stats.tests.test_morestats.TestDirectionalStats.test_directional_stats_1d_error(self)
scipy.stats.tests.test_morestats.TestDirectionalStats.test_directional_stats_2d(self)
scipy.stats.tests.test_morestats.TestDirectionalStats.test_directional_stats_2d_special_cases(self,angles,ref)
scipy.stats.tests.test_morestats.TestDirectionalStats.test_directional_stats_correctness(self)
scipy.stats.tests.test_morestats.TestDirectionalStats.test_directional_stats_list_ndarray_input(self)
scipy.stats.tests.test_morestats.TestDirectionalStats.test_directional_stats_normalize(self)
scipy.stats.tests.test_morestats.TestFligner
scipy.stats.tests.test_morestats.TestFligner.test_bad_center_value(self)
scipy.stats.tests.test_morestats.TestFligner.test_bad_keyword(self)
scipy.stats.tests.test_morestats.TestFligner.test_bad_num_args(self)
scipy.stats.tests.test_morestats.TestFligner.test_data(self)
scipy.stats.tests.test_morestats.TestFligner.test_empty_arg(self)
scipy.stats.tests.test_morestats.TestFligner.test_trimmed1(self)
scipy.stats.tests.test_morestats.TestFligner.test_trimmed2(self)
scipy.stats.tests.test_morestats.TestKstat
scipy.stats.tests.test_morestats.TestKstat.test_empty_input(self)
scipy.stats.tests.test_morestats.TestKstat.test_kstat_bad_arg(self)
scipy.stats.tests.test_morestats.TestKstat.test_moments_normal_distribution(self)
scipy.stats.tests.test_morestats.TestKstat.test_nan_input(self)
scipy.stats.tests.test_morestats.TestKstatVar
scipy.stats.tests.test_morestats.TestKstatVar.test_bad_arg(self)
scipy.stats.tests.test_morestats.TestKstatVar.test_empty_input(self)
scipy.stats.tests.test_morestats.TestKstatVar.test_nan_input(self)
scipy.stats.tests.test_morestats.TestLevene
scipy.stats.tests.test_morestats.TestLevene.test_1d_input(self)
scipy.stats.tests.test_morestats.TestLevene.test_bad_center_value(self)
scipy.stats.tests.test_morestats.TestLevene.test_bad_keyword(self)
scipy.stats.tests.test_morestats.TestLevene.test_data(self)
scipy.stats.tests.test_morestats.TestLevene.test_equal_mean_median(self)
scipy.stats.tests.test_morestats.TestLevene.test_result_attributes(self)
scipy.stats.tests.test_morestats.TestLevene.test_too_few_args(self)
scipy.stats.tests.test_morestats.TestLevene.test_trimmed1(self)
scipy.stats.tests.test_morestats.TestLevene.test_trimmed2(self)
scipy.stats.tests.test_morestats.TestMedianTest
scipy.stats.tests.test_morestats.TestMedianTest.test_bad_keyword(self)
scipy.stats.tests.test_morestats.TestMedianTest.test_bad_n_samples(self)
scipy.stats.tests.test_morestats.TestMedianTest.test_bad_nan_policy(self)
scipy.stats.tests.test_morestats.TestMedianTest.test_bad_ties(self)
scipy.stats.tests.test_morestats.TestMedianTest.test_basic(self)
scipy.stats.tests.test_morestats.TestMedianTest.test_empty_contingency_row(self)
scipy.stats.tests.test_morestats.TestMedianTest.test_empty_sample(self)
scipy.stats.tests.test_morestats.TestMedianTest.test_empty_when_ties_ignored(self)
scipy.stats.tests.test_morestats.TestMedianTest.test_nan_policy_options(self)
scipy.stats.tests.test_morestats.TestMedianTest.test_result(self,correction)
scipy.stats.tests.test_morestats.TestMedianTest.test_simple(self)
scipy.stats.tests.test_morestats.TestMedianTest.test_ties_options(self)
scipy.stats.tests.test_morestats.TestMood
scipy.stats.tests.test_morestats.TestMood.test_against_SAS(self,x,y,alternative,stat_expect,p_expect)
scipy.stats.tests.test_morestats.TestMood.test_against_SAS_2(self,alternative,expected)
scipy.stats.tests.test_morestats.TestMood.test_mood_2d(self)
scipy.stats.tests.test_morestats.TestMood.test_mood_3d(self)
scipy.stats.tests.test_morestats.TestMood.test_mood_alternative(self)
scipy.stats.tests.test_morestats.TestMood.test_mood_bad_arg(self)
scipy.stats.tests.test_morestats.TestMood.test_mood_order_of_args(self)
scipy.stats.tests.test_morestats.TestMood.test_mood_with_axis_none(self)
scipy.stats.tests.test_morestats.TestMood.test_result(self,alternative)
scipy.stats.tests.test_morestats.TestMvsdist
scipy.stats.tests.test_morestats.TestMvsdist.test_bad_arg(self)
scipy.stats.tests.test_morestats.TestMvsdist.test_basic(self)
scipy.stats.tests.test_morestats.TestMvsdist.test_empty_input(self)
scipy.stats.tests.test_morestats.TestMvsdist.test_warns(self)
scipy.stats.tests.test_morestats.TestPpccMax
scipy.stats.tests.test_morestats.TestPpccMax.test_brack(self)
scipy.stats.tests.test_morestats.TestPpccMax.test_dist(self)
scipy.stats.tests.test_morestats.TestPpccMax.test_ppcc_max_bad_arg(self)
scipy.stats.tests.test_morestats.TestPpccMax.test_ppcc_max_basic(self)
scipy.stats.tests.test_morestats.TestPpccPlot
scipy.stats.tests.test_morestats.TestPpccPlot.setup_method(self)
scipy.stats.tests.test_morestats.TestPpccPlot.test_basic(self)
scipy.stats.tests.test_morestats.TestPpccPlot.test_dist(self)
scipy.stats.tests.test_morestats.TestPpccPlot.test_empty(self)
scipy.stats.tests.test_morestats.TestPpccPlot.test_invalid_inputs(self)
scipy.stats.tests.test_morestats.TestPpccPlot.test_plot_kwarg(self)
scipy.stats.tests.test_morestats.TestProbplot
scipy.stats.tests.test_morestats.TestProbplot.test_array_of_size_one(self)
scipy.stats.tests.test_morestats.TestProbplot.test_basic(self)
scipy.stats.tests.test_morestats.TestProbplot.test_dist_keyword(self)
scipy.stats.tests.test_morestats.TestProbplot.test_empty(self)
scipy.stats.tests.test_morestats.TestProbplot.test_plot_kwarg(self)
scipy.stats.tests.test_morestats.TestProbplot.test_probplot_bad_args(self)
scipy.stats.tests.test_morestats.TestProbplot.test_sparams_keyword(self)
scipy.stats.tests.test_morestats.TestShapiro
scipy.stats.tests.test_morestats.TestShapiro.test_2d(self)
scipy.stats.tests.test_morestats.TestShapiro.test_bad_arg(self)
scipy.stats.tests.test_morestats.TestShapiro.test_basic(self)
scipy.stats.tests.test_morestats.TestShapiro.test_empty_input(self)
scipy.stats.tests.test_morestats.TestShapiro.test_gh14462(self)
scipy.stats.tests.test_morestats.TestShapiro.test_nan_input(self)
scipy.stats.tests.test_morestats.TestShapiro.test_not_enough_values(self)
scipy.stats.tests.test_morestats.TestWilcoxon
scipy.stats.tests.test_morestats.TestWilcoxon.test_accuracy_wilcoxon(self)
scipy.stats.tests.test_morestats.TestWilcoxon.test_auto(self)
scipy.stats.tests.test_morestats.TestWilcoxon.test_exact_basic(self)
scipy.stats.tests.test_morestats.TestWilcoxon.test_exact_p_1(self,x)
scipy.stats.tests.test_morestats.TestWilcoxon.test_exact_pval(self)
scipy.stats.tests.test_morestats.TestWilcoxon.test_onesided(self)
scipy.stats.tests.test_morestats.TestWilcoxon.test_pratt(self)
scipy.stats.tests.test_morestats.TestWilcoxon.test_wilcoxon_arg_type(self)
scipy.stats.tests.test_morestats.TestWilcoxon.test_wilcoxon_bad_arg(self)
scipy.stats.tests.test_morestats.TestWilcoxon.test_wilcoxon_has_zstatistic(self)
scipy.stats.tests.test_morestats.TestWilcoxon.test_wilcoxon_result_attributes(self)
scipy.stats.tests.test_morestats.TestWilcoxon.test_wilcoxon_tie(self)
scipy.stats.tests.test_morestats.TestWilcoxon.test_zero_diff(self)
scipy.stats.tests.test_morestats.TestYeojohnson
scipy.stats.tests.test_morestats.TestYeojohnson.test_array_like(self)
scipy.stats.tests.test_morestats.TestYeojohnson.test_empty(self)
scipy.stats.tests.test_morestats.TestYeojohnson.test_fixed_lmbda(self)
scipy.stats.tests.test_morestats.TestYeojohnson.test_input_dtype_complex(self,dtype)
scipy.stats.tests.test_morestats.TestYeojohnson.test_input_dtype_integer(self,dtype)
scipy.stats.tests.test_morestats.TestYeojohnson.test_input_high_variance(self)
scipy.stats.tests.test_morestats.TestYeojohnson.test_lmbda_None(self,lmbda)
scipy.stats.tests.test_morestats.TestYeojohnsonNormmax
scipy.stats.tests.test_morestats.TestYeojohnsonNormmax.setup_method(self)
scipy.stats.tests.test_morestats.TestYeojohnsonNormmax.test_darwin_example(self)
scipy.stats.tests.test_morestats.TestYeojohnsonNormmax.test_mle(self)
scipy.stats.tests.test_morestats.TestYeojohnson_llf
scipy.stats.tests.test_morestats.TestYeojohnson_llf.test_2d_input(self)
scipy.stats.tests.test_morestats.TestYeojohnson_llf.test_array_like(self)
scipy.stats.tests.test_morestats.TestYeojohnson_llf.test_empty(self)
scipy.stats.tests.test_morestats._old_loggamma_rvs(*args,**kwargs)
scipy.stats.tests.test_morestats.mood_cases_with_ties()
scipy.stats.tests.test_old_loggamma_rvs(*args,**kwargs)
scipy.stats.tests.testmood_cases_with_ties()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_continuous_basic.py----------------------------------------
A:scipy.stats.tests.test_continuous_basic.fails_cmplx->set(['argus', 'beta', 'betaprime', 'chi', 'chi2', 'cosine', 'dgamma', 'dweibull', 'erlang', 'f', 'gamma', 'gausshyper', 'gengamma', 'genhyperbolic', 'geninvgauss', 'gennorm', 'genpareto', 'halfgennorm', 'invgamma', 'ksone', 'kstwo', 'kstwobign', 'levy_l', 'loggamma', 'logistic', 'loguniform', 'maxwell', 'nakagami', 'ncf', 'nct', 'ncx2', 'norminvgauss', 'pearson3', 'rdist', 'reciprocal', 'rice', 'skewnorm', 't', 'truncweibull_min', 'tukeylambda', 'vonmises', 'vonmises_line', 'rv_histogram_instance', 'truncnorm', 'studentized_range'])
A:scipy.stats.tests.test_continuous_basic._hist->numpy.histogram(**case, density=density)
A:scipy.stats.tests.test_continuous_basic._rv_hist->scipy.stats.rv_histogram(_hist, density=density)
A:scipy.stats.tests.test_continuous_basic.distfn->getattr(stats, distname)
A:scipy.stats.tests.test_continuous_basic.rng->numpy.random.default_rng(0)
A:scipy.stats.tests.test_continuous_basic.rvs->getattr(stats, distname).rvs(*arg, size=sn, random_state=rng)
A:scipy.stats.tests.test_continuous_basic.(m, v)->getattr(stats, distname).stats(*arg)
A:scipy.stats.tests.test_continuous_basic.x->spec_x.get(distname, 0.5)
A:scipy.stats.tests.test_continuous_basic.fail_normalization->set()
A:scipy.stats.tests.test_continuous_basic.fail_higher->set(['ncf'])
A:scipy.stats.tests.test_continuous_basic.marks->list()
A:scipy.stats.tests.test_continuous_basic.(m, v, s, k)->getattr(stats, distname).stats(*arg, moments='mvsk')
A:scipy.stats.tests.test_continuous_basic.distfunc->getattr(stats, dist)
A:scipy.stats.tests.test_continuous_basic.loc->numpy.array(loc).reshape((-1, 1))
A:scipy.stats.tests.test_continuous_basic.scale->numpy.array(scale)
A:scipy.stats.tests.test_continuous_basic.vals->getattr(stats, distname).fit(rvs, floc=0, method=method)
A:scipy.stats.tests.test_continuous_basic.d->numpy.diff(vals.ravel())
A:scipy.stats.tests.test_continuous_basic.a->numpy.array(a).reshape((-1, 1, 1, 1))
A:scipy.stats.tests.test_continuous_basic.b->numpy.array(b).reshape((-1, 1, 1))
A:scipy.stats.tests.test_continuous_basic.ans->scipy.stats.truncnorm.pdf(x, a, np.inf)
A:scipy.stats.tests.test_continuous_basic.(loc, scale)->super(type(stats.uniform), stats.uniform).fit(x, method='MM')
A:scipy.stats.tests.test_continuous_basic.res->scipy.stats.norm.nnlf((0, 1), [1, 2, 3])
A:scipy.stats.tests.test_continuous_basic.median->getattr(stats, distname).ppf(0.5, *arg)
A:scipy.stats.tests.test_continuous_basic.pdfv->getattr(stats, distname).pdf(median, *arg)
A:scipy.stats.tests.test_continuous_basic.points->numpy.array([0, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0])
A:scipy.stats.tests.test_continuous_basic.pdf->getattr(stats, distname).pdf(vals, *args)
A:scipy.stats.tests.test_continuous_basic.logpdf->getattr(stats, distname).logpdf(vals, *args)
A:scipy.stats.tests.test_continuous_basic.sf->getattr(stats, distname).sf(vals, *args)
A:scipy.stats.tests.test_continuous_basic.logsf->getattr(stats, distname).logsf(vals, *args)
A:scipy.stats.tests.test_continuous_basic.cdf->getattr(stats, distname).cdf(vals, *args)
A:scipy.stats.tests.test_continuous_basic.logcdf->getattr(stats, distname).logcdf(vals, *args)
A:scipy.stats.tests.test_continuous_basic.medians->getattr(stats, distname).ppf(0.5, *args)
A:scipy.stats.tests.test_continuous_basic.(D, pval)->scipy.stats.kstest(dist, dist, args=args, N=1000)
A:scipy.stats.tests.test_continuous_basic.(mt, vt)->getattr(stats, distname).stats(*arg, loc=loc, scale=scale)
A:scipy.stats.tests.test_continuous_basic.ppfs->getattr(stats, distname)._ppf(np.array([0.1, 0.5, 0.9]), *arg)
A:scipy.stats.tests.test_continuous_basic.supp->getattr(stats, distname).support(*args)
A:scipy.stats.tests.test_continuous_basic.supp_loc_scale->getattr(stats, distname).support(*args, loc=loc, scale=scale)
A:scipy.stats.tests.test_continuous_basic.vals2->scipy.stats.chi.moment(order=1, df=[1.0, 2.0, 3.0], loc=0.0, scale=1.0)
A:scipy.stats.tests.test_continuous_basic.vals3->scipy.stats.chi.moment(order=1, df=[[1.0], [2.0], [3.0]], loc=[0.0, 1.0, 2.0], scale=[-1.0, 0.0, 3.0])
A:scipy.stats.tests.test_continuous_basic.vals4->scipy.stats.norm.moment(order=2, loc=[1, 0, 2], scale=[3, -4, -5])
A:scipy.stats.tests.test_continuous_basic.vals5->scipy.stats.norm.moment(order=2, loc=[0, 0, 0], scale=[5.0, -2, 100.0])
A:scipy.stats.tests.test_continuous_basic.dist->getattr(stats, distname)
A:scipy.stats.tests.test_continuous_basic.f->getattr(dist, method)
A:scipy.stats.tests.test_continuous_basic.result->getattr(g, method)(1)
A:scipy.stats.tests.test_continuous_basic.expected->scipy.stats.beta.moment(order=2, a=a[i], b=b[i], loc=loc[i], scale=scale[i])
A:scipy.stats.tests.test_continuous_basic.g->scipy.stats.gilbrat()
A:scipy.stats.tests.test_continuous_basic.vals0->scipy.stats.norm.moment(order=1, loc=np.array([1, 2, 3]), scale=[[1]])
A:scipy.stats.tests.test_continuous_basic.vals1->scipy.stats.norm.moment(order=1, loc=np.array([[1], [2], [3]]), scale=[1, 2, 3])
A:scipy.stats.tests.test_continuous_basic.expected0->numpy.array([[1.0, 2.0, 3.0]])
A:scipy.stats.tests.test_continuous_basic.expected1->numpy.array([[1.0, 1.0, 1.0], [2.0, 2.0, 2.0], [3.0, 3.0, 3.0]])
A:scipy.stats.tests.test_continuous_basic.expected2->numpy.array([0.79788456, 1.25331414, 1.59576912])
A:scipy.stats.tests.test_continuous_basic.expected4->numpy.array([10.0, np.nan, np.nan])
A:scipy.stats.tests.test_continuous_basic.expected5->numpy.array([25.0, np.nan, 10000.0])
A:scipy.stats.tests.test_continuous_basic.vals6->scipy.stats.norm.moment(order=2, loc=[0, 0, 0], scale=[-5.0, -2, -100.0])
A:scipy.stats.tests.test_continuous_basic.expected6->numpy.array([np.nan, np.nan, np.nan])
A:scipy.stats.tests.test_continuous_basic.vals7->scipy.stats.chi.moment(order=2, df=1, loc=0, scale=0)
A:scipy.stats.tests.test_continuous_basic.vals8->scipy.stats.chi.moment(order=2, df=[1, 2, 3], loc=0, scale=0)
A:scipy.stats.tests.test_continuous_basic.expected8->numpy.array([np.nan, np.nan, np.nan])
A:scipy.stats.tests.test_continuous_basic.vals9->scipy.stats.chi.moment(order=2, df=[1, 2, 3], loc=[1.0, 0.0, 2.0], scale=[1.0, -3.0, 0.0])
A:scipy.stats.tests.test_continuous_basic.expected9->numpy.array([3.59576912, np.nan, np.nan])
A:scipy.stats.tests.test_continuous_basic.vals10->scipy.stats.norm.moment(5, [1.0, 2.0], [1.0, 2.0])
A:scipy.stats.tests.test_continuous_basic.expected10->numpy.array([26.0, 832.0])
A:scipy.stats.tests.test_continuous_basic.vals11->scipy.stats.beta.moment(order=2, a=a, b=b, loc=loc, scale=scale)
A:scipy.stats.tests.test_continuous_basic.(a, b, loc, scale)->numpy.broadcast_arrays(a, b, loc, scale)
A:scipy.stats.tests.test_continuous_basic.expected3->numpy.array([[np.nan, np.nan, 4.39365368], [np.nan, np.nan, 5.75994241], [np.nan, np.nan, 6.78730736]])
A:scipy.stats.tests.test_continuous_basic.res2->numpy.array(stats.kappa4.stats(h, k, moments=moments))
A:scipy.stats.tests.test_continuous_basic.h->numpy.array([-1, -0.5, 1])
A:scipy.stats.tests.test_continuous_basic.k->numpy.array([1, 1, 1 / 2, -1 / 3, -1, 0])
A:scipy.stats.tests.test_continuous_basic.frozen_norm->scipy.stats.norm()
A:scipy.stats.tests.test_continuous_basic.method->getattr(stats.norm(), method_name)
scipy.stats.tests.test_continuous_basic.cases_test_cont_basic()
scipy.stats.tests.test_continuous_basic.cases_test_moments()
scipy.stats.tests.test_continuous_basic.check_cdf_logcdf(distfn,args,msg)
scipy.stats.tests.test_continuous_basic.check_cdf_ppf(distfn,arg,msg)
scipy.stats.tests.test_continuous_basic.check_distribution_rvs(dist,args,alpha,rvs)
scipy.stats.tests.test_continuous_basic.check_fit_args(distfn,arg,rvs,method)
scipy.stats.tests.test_continuous_basic.check_fit_args_fix(distfn,arg,rvs,method)
scipy.stats.tests.test_continuous_basic.check_loc_scale(distfn,arg,m,v,msg)
scipy.stats.tests.test_continuous_basic.check_pdf(distfn,arg,msg)
scipy.stats.tests.test_continuous_basic.check_pdf_logpdf(distfn,args,msg)
scipy.stats.tests.test_continuous_basic.check_pdf_logpdf_at_endpoints(distfn,args,msg)
scipy.stats.tests.test_continuous_basic.check_ppf_broadcast(distfn,arg,msg)
scipy.stats.tests.test_continuous_basic.check_ppf_private(distfn,arg,msg)
scipy.stats.tests.test_continuous_basic.check_retrieving_support(distfn,args)
scipy.stats.tests.test_continuous_basic.check_sample_mean(sample,popmean)
scipy.stats.tests.test_continuous_basic.check_sample_meanvar_(popmean,popvar,sample)
scipy.stats.tests.test_continuous_basic.check_sample_var(sample,popvar)
scipy.stats.tests.test_continuous_basic.check_sf_isf(distfn,arg,msg)
scipy.stats.tests.test_continuous_basic.check_sf_logsf(distfn,args,msg)
scipy.stats.tests.test_continuous_basic.check_vecentropy(distfn,args)
scipy.stats.tests.test_continuous_basic.test_broadcast_gh7933_regression()
scipy.stats.tests.test_continuous_basic.test_broadcast_gh9990_regression()
scipy.stats.tests.test_continuous_basic.test_broadcasting_in_moments_gh12192_regression()
scipy.stats.tests.test_continuous_basic.test_burr_fisk_moment_gh13234_regression()
scipy.stats.tests.test_continuous_basic.test_cont_basic(distname,arg,sn,n_fit_samples)
scipy.stats.tests.test_continuous_basic.test_frozen_attributes()
scipy.stats.tests.test_continuous_basic.test_gh1320_regression()
scipy.stats.tests.test_continuous_basic.test_gh2002_regression()
scipy.stats.tests.test_continuous_basic.test_gilbrat_deprecation(method)
scipy.stats.tests.test_continuous_basic.test_gilbrat_deprecation_frozen(method)
scipy.stats.tests.test_continuous_basic.test_kappa3_array_gh13582()
scipy.stats.tests.test_continuous_basic.test_kappa4_array_gh13582()
scipy.stats.tests.test_continuous_basic.test_levy_stable_random_state_property()
scipy.stats.tests.test_continuous_basic.test_method_of_moments()
scipy.stats.tests.test_continuous_basic.test_methods_with_lists(method,distname,args)
scipy.stats.tests.test_continuous_basic.test_moments(distname,arg,normalization_ok,higher_ok,is_xfailing)
scipy.stats.tests.test_continuous_basic.test_moments_with_array_gh12192_regression()
scipy.stats.tests.test_continuous_basic.test_nomodify_gh9900_regression()
scipy.stats.tests.test_continuous_basic.test_rvs_broadcast(dist,shape_args)
scipy.stats.tests.test_continuous_basic.test_rvs_gh2069_regression()
scipy.stats.tests.test_continuous_basic.test_rvs_scalar(distname,arg)
scipy.stats.tests.test_continuous_basic.test_scalar_for_scalar(case)
scipy.stats.tests.test_continuous_basic.test_scalar_for_scalar2()
scipy.stats.tests.test_continuous_basic.test_skewnorm_pdf_gh16038()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_relative_risk.py----------------------------------------
A:scipy.stats.tests.test_relative_risk.result->relative_risk(exposed_cases=1, exposed_total=12, control_cases=0, control_total=30)
A:scipy.stats.tests.test_relative_risk.ci->relative_risk(exposed_cases=1, exposed_total=12, control_cases=0, control_total=30).confidence_interval()
scipy.stats.tests.test_relative_risk.test_relative_risk(exposed_cases,exposed_total,control_cases,control_total,expected_rr)
scipy.stats.tests.test_relative_risk.test_relative_risk_bad_type()
scipy.stats.tests.test_relative_risk.test_relative_risk_bad_value(ec,et,cc,ct)
scipy.stats.tests.test_relative_risk.test_relative_risk_ci_conflevel0()
scipy.stats.tests.test_relative_risk.test_relative_risk_ci_conflevel1()
scipy.stats.tests.test_relative_risk.test_relative_risk_ci_edge_cases_00()
scipy.stats.tests.test_relative_risk.test_relative_risk_ci_edge_cases_01()
scipy.stats.tests.test_relative_risk.test_relative_risk_ci_edge_cases_10()
scipy.stats.tests.test_relative_risk.test_relative_risk_confidence_interval()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_kdeoth.py----------------------------------------
A:scipy.stats.tests.test_kdeoth.xn->numpy.array([np.random.randn(n_samples) + n for n in range(0, n_dimensions)])
A:scipy.stats.tests.test_kdeoth.xnmean->numpy.average(xn, weights=wn)
A:scipy.stats.tests.test_kdeoth.xnstd->numpy.sqrt(np.average((xn - xnmean) ** 2, weights=wn))
A:scipy.stats.tests.test_kdeoth.gkde->scipy.stats.gaussian_kde(xn)
A:scipy.stats.tests.test_kdeoth.xs->numpy.linspace(-15, 12, 25)
A:scipy.stats.tests.test_kdeoth.kdepdf->scipy.stats.gaussian_kde(xn).evaluate(xs)
A:scipy.stats.tests.test_kdeoth.normpdf->scipy.stats.multivariate_normal.pdf(np.dstack([x, y]), mean=mean, cov=covariance)
A:scipy.stats.tests.test_kdeoth.prob1->scipy.stats.gaussian_kde(xn).integrate_box([small, mean[1]], [large, large])
A:scipy.stats.tests.test_kdeoth.prob2->scipy.stats.gaussian_kde(xn).integrate_box([small, small], [large, mean[1]])
A:scipy.stats.tests.test_kdeoth.wn->numpy.random.rand(n_basesample)
A:scipy.stats.tests.test_kdeoth.mean->numpy.array([1.0, 3.0])
A:scipy.stats.tests.test_kdeoth.covariance->numpy.array([[1.0, 2.0], [2.0, 6.0]])
A:scipy.stats.tests.test_kdeoth.grid_coords->numpy.vstack([x.ravel(), y.ravel()])
A:scipy.stats.tests.test_kdeoth.gkde2->scipy.stats.gaussian_kde(xn, bw_method=scotts_factor)
A:scipy.stats.tests.test_kdeoth.gkde3->scipy.stats.gaussian_kde(xn, bw_method=gkde.factor)
A:scipy.stats.tests.test_kdeoth.kdepdf2->scipy.stats.gaussian_kde(xn, bw_method=scotts_factor).evaluate(xs)
A:scipy.stats.tests.test_kdeoth.kdepdf3->scipy.stats.gaussian_kde(xn, bw_method=gkde.factor).evaluate(xs)
A:scipy.stats.tests.test_kdeoth.self.dataset->numpy.atleast_2d(dataset)
A:scipy.stats.tests.test_kdeoth.x1->numpy.arange(5)
A:scipy.stats.tests.test_kdeoth.kde->scipy.stats.gaussian_kde(dataset)
A:scipy.stats.tests.test_kdeoth.ys->kde(xs)
A:scipy.stats.tests.test_kdeoth.kde1->_kde_subclass1(x1)
A:scipy.stats.tests.test_kdeoth.y1->kde(xs)
A:scipy.stats.tests.test_kdeoth.kde2->scipy.stats.gaussian_kde(x1, bw_method='silverman')
A:scipy.stats.tests.test_kdeoth.y2->kde2(xs)
A:scipy.stats.tests.test_kdeoth.kde4->_kde_subclass4(x1)
A:scipy.stats.tests.test_kdeoth.y4->kde4(x1)
A:scipy.stats.tests.test_kdeoth.y5->kde5(xs)
A:scipy.stats.tests.test_kdeoth.dtype->getattr(np, dtype, None)
A:scipy.stats.tests.test_kdeoth.bw_type->getattr(np, bw_type, None)
A:scipy.stats.tests.test_kdeoth.weights->numpy.random.choice([1.0, 10.0, 100], size=vals.size)
A:scipy.stats.tests.test_kdeoth.dataset->numpy.random.default_rng(2046127537594925772).normal(size=(n_dim, n_data))
A:scipy.stats.tests.test_kdeoth.k->scipy.stats.gaussian_kde(dataset, bw_method=bw, weights=weights)
A:scipy.stats.tests.test_kdeoth.points->numpy.random.default_rng(2046127537594925772).normal(size=(n_dim, 3))
A:scipy.stats.tests.test_kdeoth.result->k(points)
A:scipy.stats.tests.test_kdeoth.rng->numpy.random.default_rng(2046127537594925772)
A:scipy.stats.tests.test_kdeoth.pdf->kde.marginal(dimensions).pdf(points[dimensions])
A:scipy.stats.tests.test_kdeoth.pdf2->kde.marginal(dimensions2).pdf(points[dimensions2])
A:scipy.stats.tests.test_kdeoth.logpdf->scipy.stats.gaussian_kde(xn).logpdf(np.arange(0, n_dimensions))
A:scipy.stats.tests.test_kdeoth.logpdf2->scipy.stats.gaussian_kde(xn).logpdf(xs)
A:scipy.stats.tests.test_kdeoth.dimensions->numpy.array([1, 3])
A:scipy.stats.tests.test_kdeoth.marginal->scipy.stats.gaussian_kde(dataset).marginal(dimensions)
A:scipy.stats.tests.test_kdeoth.x->numpy.array([x, w, y, z])
A:scipy.stats.tests.test_kdeoth.ref->marginal_pdf(points)
A:scipy.stats.tests.test_kdeoth.marginal1->scipy.stats.gaussian_kde(dataset).marginal(dimensions1)
A:scipy.stats.tests.test_kdeoth.pdf1->scipy.stats.gaussian_kde(dataset).marginal(dimensions1).pdf(points[dimensions1])
A:scipy.stats.tests.test_kdeoth.marginal2->scipy.stats.gaussian_kde(dataset).marginal(dimensions2)
A:scipy.stats.tests.test_kdeoth.vals->numpy.random.lognormal(size=100)
A:scipy.stats.tests.test_kdeoth.orig_weights->numpy.random.choice([1.0, 10.0, 100], size=vals.size).copy()
A:scipy.stats.tests.test_kdeoth.pdf_i->scipy.stats.gaussian_kde(values, weights=weights)
A:scipy.stats.tests.test_kdeoth.pdf_f->scipy.stats.gaussian_kde(values, weights=np.float64(weights))
A:scipy.stats.tests.test_kdeoth.samp1->gkde_trail.resample(n_sample, seed=rstate1)
A:scipy.stats.tests.test_kdeoth.samp2->gkde_trail.resample(n_sample, seed=rstate2)
A:scipy.stats.tests.test_kdeoth.rstate1->numpy.random.RandomState(seed=138)
A:scipy.stats.tests.test_kdeoth.rstate2->numpy.random.RandomState(seed=138)
A:scipy.stats.tests.test_kdeoth.xn_1d->numpy.random.randn(n_basesample)
A:scipy.stats.tests.test_kdeoth.gkde_1d->scipy.stats.gaussian_kde(xn_1d)
A:scipy.stats.tests.test_kdeoth.gkde_1d_weighted->scipy.stats.gaussian_kde(xn_1d, weights=wn)
A:scipy.stats.tests.test_kdeoth.gkde_2d->scipy.stats.gaussian_kde(xn_2d)
A:scipy.stats.tests.test_kdeoth.gkde_2d_weighted->scipy.stats.gaussian_kde(xn_2d, weights=wn)
A:scipy.stats.tests.test_kdeoth.mu->numpy.array([1, 10, 20])
A:scipy.stats.tests.test_kdeoth.sigma->numpy.array([[4, 10, 0], [10, 25, 0], [0, 0, 100]])
A:scipy.stats.tests.test_kdeoth.data->numpy.random.default_rng(2046127537594925772).multivariate_normal(mu, sigma, 1000)
A:scipy.stats.tests.test_kdeoth.rvs->numpy.random.default_rng(2046127537594925772).multivariate_normal(np.zeros(3), np.eye(3), size=5)
scipy.stats.tests.test_kdeoth._kde_subclass1(self,dataset)
scipy.stats.tests.test_kdeoth._kde_subclass1.__init__(self,dataset)
scipy.stats.tests.test_kdeoth._kde_subclass2(self,dataset)
scipy.stats.tests.test_kdeoth._kde_subclass2.__init__(self,dataset)
scipy.stats.tests.test_kdeoth._kde_subclass4(stats.gaussian_kde)
scipy.stats.tests.test_kdeoth._kde_subclass4.covariance_factor(self)
scipy.stats.tests.test_kdeoth.test_fewer_points_than_dimensions_gh17436()
scipy.stats.tests.test_kdeoth.test_gaussian_kde_covariance_caching()
scipy.stats.tests.test_kdeoth.test_gaussian_kde_monkeypatch()
scipy.stats.tests.test_kdeoth.test_gaussian_kde_subclassing()
scipy.stats.tests.test_kdeoth.test_kde_1d()
scipy.stats.tests.test_kdeoth.test_kde_1d_weighted()
scipy.stats.tests.test_kdeoth.test_kde_2d()
scipy.stats.tests.test_kdeoth.test_kde_2d_weighted()
scipy.stats.tests.test_kdeoth.test_kde_bandwidth_method()
scipy.stats.tests.test_kdeoth.test_kde_bandwidth_method_weighted()
scipy.stats.tests.test_kdeoth.test_kde_integer_input()
scipy.stats.tests.test_kdeoth.test_kde_output_dtype(dtype,bw_type)
scipy.stats.tests.test_kdeoth.test_logpdf_overflow()
scipy.stats.tests.test_kdeoth.test_marginal_1_axis()
scipy.stats.tests.test_kdeoth.test_marginal_2_axis()
scipy.stats.tests.test_kdeoth.test_marginal_iv()
scipy.stats.tests.test_kdeoth.test_pdf_logpdf()
scipy.stats.tests.test_kdeoth.test_pdf_logpdf_validation()
scipy.stats.tests.test_kdeoth.test_pdf_logpdf_weighted()
scipy.stats.tests.test_kdeoth.test_seed()
scipy.stats.tests.test_kdeoth.test_singular_data_covariance_gh10205()
scipy.stats.tests.test_kdeoth.test_weights_intact()
scipy.stats.tests.test_kdeoth.test_weights_integer()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_hypotests.py----------------------------------------
A:scipy.stats.tests.test_hypotests.x->numpy.arange(15)
A:scipy.stats.tests.test_hypotests.y->numpy.random.rand(8)
A:scipy.stats.tests.test_hypotests.(w, p)->epps_singleton_2samp(x, y)
A:scipy.stats.tests.test_hypotests.(w1, p1)->epps_singleton_2samp(list(x), list(y))
A:scipy.stats.tests.test_hypotests.(w2, p2)->epps_singleton_2samp(tuple(x), tuple(y))
A:scipy.stats.tests.test_hypotests.(w3, p3)->epps_singleton_2samp(x, y)
A:scipy.stats.tests.test_hypotests.res->scipy.stats.poisson_means_test(count1, nobs1, count2, nobs2)
A:scipy.stats.tests.test_hypotests.r1->cramervonmises_2samp(x, y, method='asymptotic')
A:scipy.stats.tests.test_hypotests.r2->cramervonmises_2samp(x, y, method='auto')
A:scipy.stats.tests.test_hypotests.auto->mannwhitneyu(x, y)
A:scipy.stats.tests.test_hypotests.asymptotic->mannwhitneyu(x, y, method='asymptotic')
A:scipy.stats.tests.test_hypotests.exact->mannwhitneyu(x, y, method='exact')
A:scipy.stats.tests.test_hypotests.y0->numpy.array([1, 2, 3, 4, 5])
A:scipy.stats.tests.test_hypotests.u->numpy.arange(0, len(p))
A:scipy.stats.tests.test_hypotests.u2->numpy.arange(0, m * n + 1)
A:scipy.stats.tests.test_hypotests.pmf->scipy.stats._mannwhitneyu._mwu_state.pmf(k=u2, m=m, n=n)
A:scipy.stats.tests.test_hypotests.pmf2->scipy.stats._mannwhitneyu._mwu_state.pmf(k=u2, m=n, n=m)
A:scipy.stats.tests.test_hypotests.res1->scipy.stats.somersd(table)
A:scipy.stats.tests.test_hypotests.res2->scipy.stats.somersd(x2, y2)
A:scipy.stats.tests.test_hypotests.res_l->mannwhitneyu([1, 2, 3], [1.5, 2.5], alternative='less', method='exact')
A:scipy.stats.tests.test_hypotests.res_g->mannwhitneyu([1, 2, 3], [1.5, 2.5], alternative='greater', method='exact')
A:scipy.stats.tests.test_hypotests.statistics->numpy.zeros(shape)
A:scipy.stats.tests.test_hypotests.pvalues->numpy.zeros(shape)
A:scipy.stats.tests.test_hypotests.temp->mannwhitneyu(xi, yi, method=method)
A:scipy.stats.tests.test_hypotests.res3->scipy.stats.somersd(s3)
A:scipy.stats.tests.test_hypotests.a->numpy.array([np.nan, np.nan, np.nan, np.nan, np.nan])
A:scipy.stats.tests.test_hypotests.b->numpy.array([np.nan, np.nan, np.nan, np.nan, np.nan])
A:scipy.stats.tests.test_hypotests.rng->numpy.random.default_rng(9546146887652)
A:scipy.stats.tests.test_hypotests.self.partialfunc->functools.partial(stats.somersd, alternative='two-sided')
A:scipy.stats.tests.test_hypotests.self.expected->self.partialfunc(*input_array)
A:scipy.stats.tests.test_hypotests.optional_args->self.get_optional_args(stats.somersd)
A:scipy.stats.tests.test_hypotests.table->numpy.array([[25, 0], [0, 30], [85, 0]])
A:scipy.stats.tests.test_hypotests.size->numpy.prod(shape)
A:scipy.stats.tests.test_hypotests.s->scipy.stats.multinomial.rvs(N, p=np.ones(size) / size).reshape(shape)
A:scipy.stats.tests.test_hypotests.s2->numpy.insert(s, 2, np.zeros(shape[1]), axis=0)
A:scipy.stats.tests.test_hypotests.s3->numpy.insert(s, 2, np.zeros(shape[0]), axis=1)
A:scipy.stats.tests.test_hypotests.s4->numpy.insert(s2, 2, np.zeros(shape[0] + 1), axis=1)
A:scipy.stats.tests.test_hypotests.res4->scipy.stats.somersd(s4)
A:scipy.stats.tests.test_hypotests.s7->numpy.zeros((3, 3))
A:scipy.stats.tests.test_hypotests.expected->scipy.stats.somersd(x1, x2, alternative='two-sided')
A:scipy.stats.tests.test_hypotests.x1->numpy.arange(10)
A:scipy.stats.tests.test_hypotests.r->scipy.stats.tukey_hsd([23, 7, 3], [3, 4], [9, 4])
A:scipy.stats.tests.test_hypotests.res_expect->numpy.asarray(str_res.replace(' - ', ' ').split()[5:], dtype=float).reshape((3, 6))
A:scipy.stats.tests.test_hypotests.res_tukey->scipy.stats.tukey_hsd(*self.data_diff_size[:2])
A:scipy.stats.tests.test_hypotests.conf->scipy.stats.poisson_means_test(count1, nobs1, count2, nobs2).confidence_interval()
A:scipy.stats.tests.test_hypotests.lower->numpy.asarray([[0, 0, 0, -2.25], [0.29, 0, -2.93, 0.13], [1.13, 0, 0, 0.97], [0, 0, 0, 0]])
A:scipy.stats.tests.test_hypotests.upper->numpy.asarray([[0, 0, 0, 1.93], [4.47, 0, 1.25, 4.31], [5.31, 0, 0, 5.15], [0, 0, 0, 0]])
A:scipy.stats.tests.test_hypotests.data->numpy.random.rand(3, 100)
A:scipy.stats.tests.test_hypotests.res_ttest->scipy.stats.ttest_ind(*self.data_diff_size[:2])
scipy.stats.tests.testTestBarnardExact
scipy.stats.tests.testTestBarnardExact.test_edge_cases(self,input_sample,expected)
scipy.stats.tests.testTestBarnardExact.test_less_greater(self,input_sample,expected,alternative)
scipy.stats.tests.testTestBarnardExact.test_pooled_param(self,input_sample,expected)
scipy.stats.tests.testTestBarnardExact.test_precise(self,input_sample,expected)
scipy.stats.tests.testTestBarnardExact.test_raises(self)
scipy.stats.tests.testTestBarnardExact.test_row_or_col_zero(self,input_sample,expected)
scipy.stats.tests.testTestBoschlooExact
scipy.stats.tests.testTestBoschlooExact.test_against_fisher_exact(self,alternative)
scipy.stats.tests.testTestBoschlooExact.test_greater(self,input_sample,expected)
scipy.stats.tests.testTestBoschlooExact.test_less(self,input_sample,expected)
scipy.stats.tests.testTestBoschlooExact.test_raises(self)
scipy.stats.tests.testTestBoschlooExact.test_row_or_col_zero(self,input_sample,expected)
scipy.stats.tests.testTestBoschlooExact.test_two_sided(self,input_sample,expected)
scipy.stats.tests.testTestBoschlooExact.test_two_sided_gt_1(self)
scipy.stats.tests.testTestCvm
scipy.stats.tests.testTestCvm.test_callable_cdf(self)
scipy.stats.tests.testTestCvm.test_cdf_10(self)
scipy.stats.tests.testTestCvm.test_cdf_1000(self)
scipy.stats.tests.testTestCvm.test_cdf_4(self)
scipy.stats.tests.testTestCvm.test_cdf_inf(self)
scipy.stats.tests.testTestCvm.test_cdf_large_n(self)
scipy.stats.tests.testTestCvm.test_cdf_support(self)
scipy.stats.tests.testTestCvm.test_invalid_input(self)
scipy.stats.tests.testTestCvm.test_large_x(self)
scipy.stats.tests.testTestCvm.test_low_p(self)
scipy.stats.tests.testTestCvm.test_values_R(self)
scipy.stats.tests.testTestCvm_2samp
scipy.stats.tests.testTestCvm_2samp.test_exact_pvalue(self,statistic,m,n,pval)
scipy.stats.tests.testTestCvm_2samp.test_exact_vs_asymptotic(self)
scipy.stats.tests.testTestCvm_2samp.test_example_conover(self)
scipy.stats.tests.testTestCvm_2samp.test_invalid_input(self)
scipy.stats.tests.testTestCvm_2samp.test_large_sample(self)
scipy.stats.tests.testTestCvm_2samp.test_list_input(self)
scipy.stats.tests.testTestCvm_2samp.test_method_auto(self)
scipy.stats.tests.testTestCvm_2samp.test_same_input(self)
scipy.stats.tests.testTestEppsSingleton
scipy.stats.tests.testTestEppsSingleton.test_epps_singleton_1d_input(self)
scipy.stats.tests.testTestEppsSingleton.test_epps_singleton_array_like(self)
scipy.stats.tests.testTestEppsSingleton.test_epps_singleton_nonfinite(self)
scipy.stats.tests.testTestEppsSingleton.test_epps_singleton_size(self)
scipy.stats.tests.testTestEppsSingleton.test_names(self)
scipy.stats.tests.testTestEppsSingleton.test_statistic_1(self)
scipy.stats.tests.testTestEppsSingleton.test_statistic_2(self)
scipy.stats.tests.testTestMannWhitneyU
scipy.stats.tests.testTestMannWhitneyU.setup_method(self)
scipy.stats.tests.testTestMannWhitneyU.teardown_method(self)
scipy.stats.tests.testTestMannWhitneyU.test_asymptotic_behavior(self)
scipy.stats.tests.testTestMannWhitneyU.test_auto(self)
scipy.stats.tests.testTestMannWhitneyU.test_basic(self,kwds,expected)
scipy.stats.tests.testTestMannWhitneyU.test_continuity(self,kwds,expected)
scipy.stats.tests.testTestMannWhitneyU.test_equal_scalar_data(self)
scipy.stats.tests.testTestMannWhitneyU.test_exact_U_equals_mean(self)
scipy.stats.tests.testTestMannWhitneyU.test_exact_distribution(self)
scipy.stats.tests.testTestMannWhitneyU.test_gh_11355(self)
scipy.stats.tests.testTestMannWhitneyU.test_gh_11355b(self,x,y,statistic,pvalue)
scipy.stats.tests.testTestMannWhitneyU.test_gh_12837_11113(self,method)
scipy.stats.tests.testTestMannWhitneyU.test_gh_2118(self,x,y,alternative,expected)
scipy.stats.tests.testTestMannWhitneyU.test_gh_4067(self)
scipy.stats.tests.testTestMannWhitneyU.test_gh_6897(self)
scipy.stats.tests.testTestMannWhitneyU.test_gh_9184(self,use_continuity,alternative,method,pvalue_exp)
scipy.stats.tests.testTestMannWhitneyU.test_input_validation(self)
scipy.stats.tests.testTestMannWhitneyU.test_scalar_data(self,kwds,result)
scipy.stats.tests.testTestMannWhitneyU.test_tie_correct(self)
scipy.stats.tests.testTestMannWhitneyU_iterative(TestMannWhitneyU)
scipy.stats.tests.testTestMannWhitneyU_iterative.setup_method(self)
scipy.stats.tests.testTestMannWhitneyU_iterative.teardown_method(self)
scipy.stats.tests.testTestPoissonMeansTest
scipy.stats.tests.testTestPoissonMeansTest.test_different_results(self)
scipy.stats.tests.testTestPoissonMeansTest.test_fortran_authors(self,c1,n1,c2,n2,p_expect,alt,d)
scipy.stats.tests.testTestPoissonMeansTest.test_input_validation(self)
scipy.stats.tests.testTestPoissonMeansTest.test_less_than_zero_lambda_hat2(self)
scipy.stats.tests.testTestPoissonMeansTest.test_paper_examples(self,c1,n1,c2,n2,p_expect)
scipy.stats.tests.testTestSomersD(_TestPythranFunc)
scipy.stats.tests.testTestSomersD.pythranfunc(self,*args)
scipy.stats.tests.testTestSomersD.setup_method(self)
scipy.stats.tests.testTestSomersD.test_asymmetry(self)
scipy.stats.tests.testTestSomersD.test_contingency_table_return(self)
scipy.stats.tests.testTestSomersD.test_contingency_table_with_zero_rows_cols(self)
scipy.stats.tests.testTestSomersD.test_invalid_contingency_tables(self)
scipy.stats.tests.testTestSomersD.test_like_kendalltau(self)
scipy.stats.tests.testTestSomersD.test_only_ranks_matter(self)
scipy.stats.tests.testTestSomersD.test_pythranfunc_keywords(self)
scipy.stats.tests.testTestSomersD.test_somers_original(self)
scipy.stats.tests.testTestSomersD.test_somersd_alternative(self)
scipy.stats.tests.testTestSomersD.test_somersd_perfect_correlation(self,positive_correlation)
scipy.stats.tests.testTestTukeyHSD
scipy.stats.tests.testTestTukeyHSD.test_2_args_ttest(self)
scipy.stats.tests.testTestTukeyHSD.test_compare_matlab(self,data,res_expect_str,atol)
scipy.stats.tests.testTestTukeyHSD.test_compare_r(self)
scipy.stats.tests.testTestTukeyHSD.test_compare_sas(self,data,res_expect_str,atol)
scipy.stats.tests.testTestTukeyHSD.test_conf_level_invalid(self,cl)
scipy.stats.tests.testTestTukeyHSD.test_engineering_stat_handbook(self)
scipy.stats.tests.testTestTukeyHSD.test_is_1d(self)
scipy.stats.tests.testTestTukeyHSD.test_no_empty(self)
scipy.stats.tests.testTestTukeyHSD.test_no_inf(self)
scipy.stats.tests.testTestTukeyHSD.test_not_enough_treatments(self,nargs)
scipy.stats.tests.testTestTukeyHSD.test_rand_symm(self)
scipy.stats.tests.test_hypotests.TestBarnardExact
scipy.stats.tests.test_hypotests.TestBarnardExact.test_edge_cases(self,input_sample,expected)
scipy.stats.tests.test_hypotests.TestBarnardExact.test_less_greater(self,input_sample,expected,alternative)
scipy.stats.tests.test_hypotests.TestBarnardExact.test_pooled_param(self,input_sample,expected)
scipy.stats.tests.test_hypotests.TestBarnardExact.test_precise(self,input_sample,expected)
scipy.stats.tests.test_hypotests.TestBarnardExact.test_raises(self)
scipy.stats.tests.test_hypotests.TestBarnardExact.test_row_or_col_zero(self,input_sample,expected)
scipy.stats.tests.test_hypotests.TestBoschlooExact
scipy.stats.tests.test_hypotests.TestBoschlooExact.test_against_fisher_exact(self,alternative)
scipy.stats.tests.test_hypotests.TestBoschlooExact.test_greater(self,input_sample,expected)
scipy.stats.tests.test_hypotests.TestBoschlooExact.test_less(self,input_sample,expected)
scipy.stats.tests.test_hypotests.TestBoschlooExact.test_raises(self)
scipy.stats.tests.test_hypotests.TestBoschlooExact.test_row_or_col_zero(self,input_sample,expected)
scipy.stats.tests.test_hypotests.TestBoschlooExact.test_two_sided(self,input_sample,expected)
scipy.stats.tests.test_hypotests.TestBoschlooExact.test_two_sided_gt_1(self)
scipy.stats.tests.test_hypotests.TestCvm
scipy.stats.tests.test_hypotests.TestCvm.test_callable_cdf(self)
scipy.stats.tests.test_hypotests.TestCvm.test_cdf_10(self)
scipy.stats.tests.test_hypotests.TestCvm.test_cdf_1000(self)
scipy.stats.tests.test_hypotests.TestCvm.test_cdf_4(self)
scipy.stats.tests.test_hypotests.TestCvm.test_cdf_inf(self)
scipy.stats.tests.test_hypotests.TestCvm.test_cdf_large_n(self)
scipy.stats.tests.test_hypotests.TestCvm.test_cdf_support(self)
scipy.stats.tests.test_hypotests.TestCvm.test_invalid_input(self)
scipy.stats.tests.test_hypotests.TestCvm.test_large_x(self)
scipy.stats.tests.test_hypotests.TestCvm.test_low_p(self)
scipy.stats.tests.test_hypotests.TestCvm.test_values_R(self)
scipy.stats.tests.test_hypotests.TestCvm_2samp
scipy.stats.tests.test_hypotests.TestCvm_2samp.test_exact_pvalue(self,statistic,m,n,pval)
scipy.stats.tests.test_hypotests.TestCvm_2samp.test_exact_vs_asymptotic(self)
scipy.stats.tests.test_hypotests.TestCvm_2samp.test_example_conover(self)
scipy.stats.tests.test_hypotests.TestCvm_2samp.test_invalid_input(self)
scipy.stats.tests.test_hypotests.TestCvm_2samp.test_large_sample(self)
scipy.stats.tests.test_hypotests.TestCvm_2samp.test_list_input(self)
scipy.stats.tests.test_hypotests.TestCvm_2samp.test_method_auto(self)
scipy.stats.tests.test_hypotests.TestCvm_2samp.test_same_input(self)
scipy.stats.tests.test_hypotests.TestEppsSingleton
scipy.stats.tests.test_hypotests.TestEppsSingleton.test_epps_singleton_1d_input(self)
scipy.stats.tests.test_hypotests.TestEppsSingleton.test_epps_singleton_array_like(self)
scipy.stats.tests.test_hypotests.TestEppsSingleton.test_epps_singleton_nonfinite(self)
scipy.stats.tests.test_hypotests.TestEppsSingleton.test_epps_singleton_size(self)
scipy.stats.tests.test_hypotests.TestEppsSingleton.test_names(self)
scipy.stats.tests.test_hypotests.TestEppsSingleton.test_statistic_1(self)
scipy.stats.tests.test_hypotests.TestEppsSingleton.test_statistic_2(self)
scipy.stats.tests.test_hypotests.TestMannWhitneyU
scipy.stats.tests.test_hypotests.TestMannWhitneyU.setup_method(self)
scipy.stats.tests.test_hypotests.TestMannWhitneyU.teardown_method(self)
scipy.stats.tests.test_hypotests.TestMannWhitneyU.test_asymptotic_behavior(self)
scipy.stats.tests.test_hypotests.TestMannWhitneyU.test_auto(self)
scipy.stats.tests.test_hypotests.TestMannWhitneyU.test_basic(self,kwds,expected)
scipy.stats.tests.test_hypotests.TestMannWhitneyU.test_continuity(self,kwds,expected)
scipy.stats.tests.test_hypotests.TestMannWhitneyU.test_equal_scalar_data(self)
scipy.stats.tests.test_hypotests.TestMannWhitneyU.test_exact_U_equals_mean(self)
scipy.stats.tests.test_hypotests.TestMannWhitneyU.test_exact_distribution(self)
scipy.stats.tests.test_hypotests.TestMannWhitneyU.test_gh_11355(self)
scipy.stats.tests.test_hypotests.TestMannWhitneyU.test_gh_11355b(self,x,y,statistic,pvalue)
scipy.stats.tests.test_hypotests.TestMannWhitneyU.test_gh_12837_11113(self,method)
scipy.stats.tests.test_hypotests.TestMannWhitneyU.test_gh_2118(self,x,y,alternative,expected)
scipy.stats.tests.test_hypotests.TestMannWhitneyU.test_gh_4067(self)
scipy.stats.tests.test_hypotests.TestMannWhitneyU.test_gh_6897(self)
scipy.stats.tests.test_hypotests.TestMannWhitneyU.test_gh_9184(self,use_continuity,alternative,method,pvalue_exp)
scipy.stats.tests.test_hypotests.TestMannWhitneyU.test_input_validation(self)
scipy.stats.tests.test_hypotests.TestMannWhitneyU.test_scalar_data(self,kwds,result)
scipy.stats.tests.test_hypotests.TestMannWhitneyU.test_tie_correct(self)
scipy.stats.tests.test_hypotests.TestMannWhitneyU_iterative(TestMannWhitneyU)
scipy.stats.tests.test_hypotests.TestMannWhitneyU_iterative.setup_method(self)
scipy.stats.tests.test_hypotests.TestMannWhitneyU_iterative.teardown_method(self)
scipy.stats.tests.test_hypotests.TestPoissonMeansTest
scipy.stats.tests.test_hypotests.TestPoissonMeansTest.test_different_results(self)
scipy.stats.tests.test_hypotests.TestPoissonMeansTest.test_fortran_authors(self,c1,n1,c2,n2,p_expect,alt,d)
scipy.stats.tests.test_hypotests.TestPoissonMeansTest.test_input_validation(self)
scipy.stats.tests.test_hypotests.TestPoissonMeansTest.test_less_than_zero_lambda_hat2(self)
scipy.stats.tests.test_hypotests.TestPoissonMeansTest.test_paper_examples(self,c1,n1,c2,n2,p_expect)
scipy.stats.tests.test_hypotests.TestSomersD(_TestPythranFunc)
scipy.stats.tests.test_hypotests.TestSomersD.pythranfunc(self,*args)
scipy.stats.tests.test_hypotests.TestSomersD.setup_method(self)
scipy.stats.tests.test_hypotests.TestSomersD.test_asymmetry(self)
scipy.stats.tests.test_hypotests.TestSomersD.test_contingency_table_return(self)
scipy.stats.tests.test_hypotests.TestSomersD.test_contingency_table_with_zero_rows_cols(self)
scipy.stats.tests.test_hypotests.TestSomersD.test_invalid_contingency_tables(self)
scipy.stats.tests.test_hypotests.TestSomersD.test_like_kendalltau(self)
scipy.stats.tests.test_hypotests.TestSomersD.test_only_ranks_matter(self)
scipy.stats.tests.test_hypotests.TestSomersD.test_pythranfunc_keywords(self)
scipy.stats.tests.test_hypotests.TestSomersD.test_somers_original(self)
scipy.stats.tests.test_hypotests.TestSomersD.test_somersd_alternative(self)
scipy.stats.tests.test_hypotests.TestSomersD.test_somersd_perfect_correlation(self,positive_correlation)
scipy.stats.tests.test_hypotests.TestTukeyHSD
scipy.stats.tests.test_hypotests.TestTukeyHSD.test_2_args_ttest(self)
scipy.stats.tests.test_hypotests.TestTukeyHSD.test_compare_matlab(self,data,res_expect_str,atol)
scipy.stats.tests.test_hypotests.TestTukeyHSD.test_compare_r(self)
scipy.stats.tests.test_hypotests.TestTukeyHSD.test_compare_sas(self,data,res_expect_str,atol)
scipy.stats.tests.test_hypotests.TestTukeyHSD.test_conf_level_invalid(self,cl)
scipy.stats.tests.test_hypotests.TestTukeyHSD.test_engineering_stat_handbook(self)
scipy.stats.tests.test_hypotests.TestTukeyHSD.test_is_1d(self)
scipy.stats.tests.test_hypotests.TestTukeyHSD.test_no_empty(self)
scipy.stats.tests.test_hypotests.TestTukeyHSD.test_no_inf(self)
scipy.stats.tests.test_hypotests.TestTukeyHSD.test_not_enough_treatments(self,nargs)
scipy.stats.tests.test_hypotests.TestTukeyHSD.test_rand_symm(self)
scipy.stats.tests.test_hypotests.test_mann_whitney_u_switch()
scipy.stats.tests.testtest_mann_whitney_u_switch()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_crosstab.py----------------------------------------
A:scipy.stats.tests.test_crosstab.expected_count->numpy.array([[0, 1, 2, 1], [0, 1, 0, 2]])
A:scipy.stats.tests.test_crosstab.((avals, bvals), count)->crosstab(a, b, levels=[[0, 9], [0, 1, 2, 3]], sparse=sparse)
A:scipy.stats.tests.test_crosstab.((xvals,), count)->crosstab(x)
A:scipy.stats.tests.test_crosstab.((xvals, yvals, zvals), count)->crosstab(x, y, z)
A:scipy.stats.tests.test_crosstab.res->crosstab([0, 1], [1, 2])
scipy.stats.tests.test_crosstab.test_crosstab_basic(sparse)
scipy.stats.tests.test_crosstab.test_crosstab_basic_1d()
scipy.stats.tests.test_crosstab.test_crosstab_basic_3d()
scipy.stats.tests.test_crosstab.test_crosstab_extra_levels(sparse)
scipy.stats.tests.test_crosstab.test_crosstab_levels(sparse)
scipy.stats.tests.test_crosstab.test_result()
scipy.stats.tests.test_crosstab.test_validation_at_least_one()
scipy.stats.tests.test_crosstab.test_validation_len_levels_matches_args()
scipy.stats.tests.test_crosstab.test_validation_same_lengths()
scipy.stats.tests.test_crosstab.test_validation_sparse_only_two_args()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_multivariate.py----------------------------------------
A:scipy.stats.tests.test_multivariate._all_covariance_types->numpy.array(list(_covariance_preprocessing))
A:scipy.stats.tests.test_multivariate.A->numpy.diag(variances)
A:scipy.stats.tests.test_multivariate.cov_type->getattr(_covariance, f'CovVia{cov_type_name}')
A:scipy.stats.tests.test_multivariate.factory->getattr(Covariance, f'from_{cov_type_name.lower()}')
A:scipy.stats.tests.test_multivariate.res->scipy.stats.multivariate_hypergeom.rvs(m, n)
A:scipy.stats.tests.test_multivariate.ref->scipy.stats.multivariate_normal.pdf(x, [1, 1, 1], cov_object)
A:scipy.stats.tests.test_multivariate.psd->_PSD(cov, cond=cond)
A:scipy.stats.tests.test_multivariate.cov_object->scipy.stats._covariance.CovViaPrecision(P)
A:scipy.stats.tests.test_multivariate.rng->self.get_rng()
A:scipy.stats.tests.test_multivariate.x->numpy.asarray(x, dtype=np.int_)
A:scipy.stats.tests.test_multivariate.dist0->multivariate_normal(mean, A, allow_singular=True)
A:scipy.stats.tests.test_multivariate.dist1->multivariate_t(loc, shape, df=3, seed=2)
A:scipy.stats.tests.test_multivariate.x1->mvn.rvs(mean, cov_object, size=size, random_state=rng)
A:scipy.stats.tests.test_multivariate.x2->scipy.stats.unitary_group.rvs(3, random_state=514)
A:scipy.stats.tests.test_multivariate.mean->scipy.stats.random_table.mean(row, col)
A:scipy.stats.tests.test_multivariate.rng1->numpy.random.default_rng(seed)
A:scipy.stats.tests.test_multivariate.rng2->numpy.random.default_rng(seed)
A:scipy.stats.tests.test_multivariate.cov->numpy.kron(V, U)
A:scipy.stats.tests.test_multivariate.rv->random_table(row, col, seed=self.get_rng()).rvs(10, method=method, random_state=self.get_rng())
A:scipy.stats.tests.test_multivariate.M->numpy.linalg.solve(X, Psi)
A:scipy.stats.tests.test_multivariate.(u, s, v)->scipy.linalg.svd(M)
A:scipy.stats.tests.test_multivariate.mu->numpy.array([0.0, 0.0])
A:scipy.stats.tests.test_multivariate.pdf->scipy.stats.multivariate_normal.pdf(r, mean, cov)
A:scipy.stats.tests.test_multivariate.cdf->scipy.stats.multivariate_normal.cdf(b, mean, cov, lower_limit=a)
A:scipy.stats.tests.test_multivariate.d1->scipy.stats.norm.cdf(x, mean, scale)
A:scipy.stats.tests.test_multivariate.d2->scipy.stats.multivariate_normal.cdf(x, mean, cov)
A:scipy.stats.tests.test_multivariate.d3->scipy.stats.multivariate_normal.logcdf(x, None, 1)
A:scipy.stats.tests.test_multivariate.d4->scipy.stats.multivariate_normal.cdf(x, None, 1)
A:scipy.stats.tests.test_multivariate.s->pickle.dumps(distfn)
A:scipy.stats.tests.test_multivariate.distn->multivariate_normal(mean, cov, allow_singular=True)
A:scipy.stats.tests.test_multivariate.z->numpy.random.randn(n)
A:scipy.stats.tests.test_multivariate.cov_kk->numpy.dot(s, s.T)
A:scipy.stats.tests.test_multivariate.cov_nn->numpy.zeros((n, n))
A:scipy.stats.tests.test_multivariate.u->multivariate_normal(mean=0, cov=1)
A:scipy.stats.tests.test_multivariate.cov_rr->numpy.dot(u, np.dot(cov_nn, u.T))
A:scipy.stats.tests.test_multivariate.y->numpy.dot(u, x)
A:scipy.stats.tests.test_multivariate.distn_kk->multivariate_normal(np.zeros(k), cov_kk, allow_singular=True)
A:scipy.stats.tests.test_multivariate.distn_nn->multivariate_normal(np.zeros(n), cov_nn, allow_singular=True)
A:scipy.stats.tests.test_multivariate.distn_rr->multivariate_normal(np.zeros(n), cov_rr, allow_singular=True)
A:scipy.stats.tests.test_multivariate.pdf_kk->multivariate_normal(np.zeros(k), cov_kk, allow_singular=True).pdf(x[:k])
A:scipy.stats.tests.test_multivariate.pdf_nn->multivariate_normal(np.zeros(n), cov_nn, allow_singular=True).pdf(x)
A:scipy.stats.tests.test_multivariate.pdf_rr->multivariate_normal(np.zeros(n), cov_rr, allow_singular=True).pdf(y)
A:scipy.stats.tests.test_multivariate.logpdf_kk->multivariate_normal(np.zeros(k), cov_kk, allow_singular=True).logpdf(x[:k])
A:scipy.stats.tests.test_multivariate.logpdf_nn->multivariate_normal(np.zeros(n), cov_nn, allow_singular=True).logpdf(x)
A:scipy.stats.tests.test_multivariate.logpdf_rr->multivariate_normal(np.zeros(n), cov_rr, allow_singular=True).logpdf(y)
A:scipy.stats.tests.test_multivariate.pdf_rr_orth->multivariate_normal(np.zeros(n), cov_rr, allow_singular=True).pdf(y_orth)
A:scipy.stats.tests.test_multivariate.logpdf_rr_orth->multivariate_normal(np.zeros(n), cov_rr, allow_singular=True).logpdf(y_orth)
A:scipy.stats.tests.test_multivariate.mn->numpy.zeros(n)
A:scipy.stats.tests.test_multivariate.vr->numpy.dot(u, u.T)
A:scipy.stats.tests.test_multivariate.X->numpy.array([[2, 1, 0, 0.5], [1, 2, 0.5, 0.5], [0, 0.5, 3, 1], [0.5, 0.5, 1, 2]])
A:scipy.stats.tests.test_multivariate.logpdf->scipy.stats.multivariate_normal.logpdf(X, mean=mn, cov=vr, allow_singular=True)
A:scipy.stats.tests.test_multivariate.large_entry->numpy.exp(large_total_log / npos)
A:scipy.stats.tests.test_multivariate.data->numpy.random.randn(n, n)
A:scipy.stats.tests.test_multivariate.desired_pdf->scipy.stats.multivariate_normal.pdf(X, mean, cov)
A:scipy.stats.tests.test_multivariate.desired_cdf->scipy.stats.multivariate_normal.cdf(X, mean, cov)
A:scipy.stats.tests.test_multivariate.actual->generate_test_statistics(scipy.stats.ortho_group.rvs)
A:scipy.stats.tests.test_multivariate.v->numpy.linspace(0, 6, n)
A:scipy.stats.tests.test_multivariate.(xv, yv)->numpy.meshgrid(v, v)
A:scipy.stats.tests.test_multivariate.pos->numpy.empty((n, n, 2))
A:scipy.stats.tests.test_multivariate.margin_x->romb(pdf, delta, axis=0)
A:scipy.stats.tests.test_multivariate.margin_y->romb(pdf, delta, axis=1)
A:scipy.stats.tests.test_multivariate.gauss_x->scipy.stats.norm.pdf(v, loc=mean[0], scale=cov[0, 0] ** 0.5)
A:scipy.stats.tests.test_multivariate.gauss_y->scipy.stats.norm.pdf(v, loc=mean[1], scale=cov[1, 1] ** 0.5)
A:scipy.stats.tests.test_multivariate.norm_frozen->multivariate_normal(mean, cov)
A:scipy.stats.tests.test_multivariate.(s, u)->scipy.linalg.eigh(cov)
A:scipy.stats.tests.test_multivariate.psd_pinv->_PSD(psd.pinv, cond=cond)
A:scipy.stats.tests.test_multivariate.r_pdf->numpy.array([0.0002214706, 0.0013819953, 0.0049138692, 0.010380305, 0.01402508])
A:scipy.stats.tests.test_multivariate.r_cdf->numpy.array([0.0017866215, 0.0267142892, 0.0857098761, 0.1063242573, 0.2501068509])
A:scipy.stats.tests.test_multivariate.r_cdf2->numpy.array([0.01262147, 0.05838989, 0.18389571, 0.40696599, 0.66470577])
A:scipy.stats.tests.test_multivariate.mean2->scipy.stats.multivariate_hypergeom.mean(m=[[1, 0, 0], [1, 0, 1]], n=2)
A:scipy.stats.tests.test_multivariate.cov2->numpy.var(rvs2, axis=0)
A:scipy.stats.tests.test_multivariate.cdf2->multivariate_normal(mean, cov).cdf(b, lower_limit=a)
A:scipy.stats.tests.test_multivariate.covariance->numpy.zeros((2, 2))
A:scipy.stats.tests.test_multivariate.model->multivariate_normal(mean, covariance, allow_singular=True)
A:scipy.stats.tests.test_multivariate.sample->random_table(row, col, seed=self.get_rng()).rvs()
A:scipy.stats.tests.test_multivariate.alpha->numpy.random.uniform(1e-09, 100, 2)
A:scipy.stats.tests.test_multivariate.cdf1->scipy.stats.multivariate_normal.cdf(b, mean, cov, lower_limit=a)
A:scipy.stats.tests.test_multivariate.cdf2a->scipy.stats.multivariate_normal.cdf(b, mean, cov)
A:scipy.stats.tests.test_multivariate.cdf2b->scipy.stats.multivariate_normal.cdf(a, mean, cov)
A:scipy.stats.tests.test_multivariate.ab1->numpy.concatenate((a[..., 0:1], b[..., 1:2]), axis=-1)
A:scipy.stats.tests.test_multivariate.ab2->numpy.concatenate((a[..., 1:2], b[..., 0:1]), axis=-1)
A:scipy.stats.tests.test_multivariate.cdf2ab1->scipy.stats.multivariate_normal.cdf(ab1, mean, cov)
A:scipy.stats.tests.test_multivariate.cdf2ab2->scipy.stats.multivariate_normal.cdf(ab2, mean, cov)
A:scipy.stats.tests.test_multivariate.cdf3->numpy.exp(multivariate_normal.logcdf(b, mean, cov, lower_limit=a))
A:scipy.stats.tests.test_multivariate.cdf4->numpy.exp(multivariate_normal(mean, cov).logcdf(b, lower_limit=a))
A:scipy.stats.tests.test_multivariate.expected_signs->numpy.array([1, -1, -1, 1])
A:scipy.stats.tests.test_multivariate.P->numpy.diag(1 / np.array([1, 2, 3]))
A:scipy.stats.tests.test_multivariate.Z->numpy.zeros((num_rows, num_cols))
A:scipy.stats.tests.test_multivariate.Zr->numpy.zeros((num_rows, 1))
A:scipy.stats.tests.test_multivariate.Zc->numpy.zeros((1, num_cols))
A:scipy.stats.tests.test_multivariate.Ir->numpy.identity(num_rows)
A:scipy.stats.tests.test_multivariate.Ic->numpy.identity(num_cols)
A:scipy.stats.tests.test_multivariate.I1->numpy.identity(1)
A:scipy.stats.tests.test_multivariate.Uv->numpy.full(num_rows, 0.2)
A:scipy.stats.tests.test_multivariate.Vv->numpy.full(num_cols, 0.1)
A:scipy.stats.tests.test_multivariate.frozen->unitary_group(dim)
A:scipy.stats.tests.test_multivariate.rvs1->scipy.stats.random_table.rvs(row, col, size=10000, method='boyett', random_state=rng)
A:scipy.stats.tests.test_multivariate.rvs2->scipy.stats.random_table.rvs(row, col, size=10000, method='patefield', random_state=rng)
A:scipy.stats.tests.test_multivariate.pdf1->unitary_group(dim).pdf(X)
A:scipy.stats.tests.test_multivariate.pdf2->scipy.stats.multivariate_normal.pdf(vecX, mean=vecM, cov=cov)
A:scipy.stats.tests.test_multivariate.logpdf1->unitary_group(dim).logpdf(X)
A:scipy.stats.tests.test_multivariate.logpdf2->scipy.stats.multivariate_normal.logpdf(vecX, mean=vecM, cov=cov)
A:scipy.stats.tests.test_multivariate.vecX->numpy.array([[2, 1, 0, 0.5], [1, 2, 0.5, 0.5], [0, 0.5, 3, 1], [0.5, 0.5, 1, 2]]).T.flatten()
A:scipy.stats.tests.test_multivariate.vecM->numpy.linalg.solve(X, Psi).T.flatten()
A:scipy.stats.tests.test_multivariate.X1->unitary_group(dim).rvs(size=N, random_state=1234)
A:scipy.stats.tests.test_multivariate.X2->unitary_group(dim).rvs(size=N, random_state=4321)
A:scipy.stats.tests.test_multivariate.array_logpdf->unitary_group(dim).logpdf(X)
A:scipy.stats.tests.test_multivariate.separate_logpdf->scipy.stats.matrix_normal.logpdf(X[i, j], mean=M, rowcov=U, colcov=V)
A:scipy.stats.tests.test_multivariate.sample_mean->numpy.mean(X, axis=0)
A:scipy.stats.tests.test_multivariate.sample_colcov->numpy.cov(X.reshape(N * num_rows, num_cols).T)
A:scipy.stats.tests.test_multivariate.sample_rowcov->numpy.cov(np.swapaxes(X, 1, 2).reshape(N * num_cols, num_rows).T)
A:scipy.stats.tests.test_multivariate.expected->scipy.stats.random_table.rvs(row, col, size=10, method=method, random_state=self.get_rng())
A:scipy.stats.tests.test_multivariate.n->numpy.random.randint(1, 32)
A:scipy.stats.tests.test_multivariate.d->random_table(row, col, seed=self.get_rng())
A:scipy.stats.tests.test_multivariate.xm->numpy.vstack((xm, x))
A:scipy.stats.tests.test_multivariate.rm->random_table(row, col, seed=self.get_rng()).pdf(xm.T)
A:scipy.stats.tests.test_multivariate.r->random_table(row, col, seed=self.get_rng()).pdf(xs)
A:scipy.stats.tests.test_multivariate.rs->numpy.append(rs, r)
A:scipy.stats.tests.test_multivariate.b->beta(alpha[0], alpha[1])
A:scipy.stats.tests.test_multivariate.sigma->numpy.array([[1.0]])
A:scipy.stats.tests.test_multivariate.true_scale->numpy.array([[1, 0], [0, 2]])
A:scipy.stats.tests.test_multivariate.w->wishart(df, scale)
A:scipy.stats.tests.test_multivariate.scale->numpy.eye(3)
A:scipy.stats.tests.test_multivariate.density->wishart(df, scale).pdf(np.array([[2, 0], [0, 2]])[:, :, np.newaxis])
A:scipy.stats.tests.test_multivariate.scale[np.tril_indices(dim, k=-1)]->numpy.arange(dim * (dim - 1) / 2)
A:scipy.stats.tests.test_multivariate.x[np.tril_indices(dim, k=-1)]->numpy.arange(dim * (dim - 1) / 2)
A:scipy.stats.tests.test_multivariate.df_range->numpy.arange(5, 20, 2, dtype=float)
A:scipy.stats.tests.test_multivariate.c->chi2(df, scale=sigma_lamda)
A:scipy.stats.tests.test_multivariate.rvs->getattr(_rcont, f'rvs_rcont{v}')
A:scipy.stats.tests.test_multivariate.scale[np.tril_indices(4, k=-1)]->numpy.arange(6)
A:scipy.stats.tests.test_multivariate.lamda->numpy.ones((dim, 1))
A:scipy.stats.tests.test_multivariate.sigma_lamda->numpy.ones((dim, 1)).T.dot(scale).dot(lamda).squeeze()
A:scipy.stats.tests.test_multivariate.vals1->scipy.stats.multinomial.pmf([1, 2], [3, 4], [0.1, 0.9])
A:scipy.stats.tests.test_multivariate.vals2->scipy.stats.multinomial.pmf([[[1, 2], [1, 1]]], 3, [0.1, 0.9])
A:scipy.stats.tests.test_multivariate.vals3->scipy.stats.multinomial.pmf([1, 2], [[[3], [4]]], [0.1, 0.9])
A:scipy.stats.tests.test_multivariate.val1->scipy.stats.multivariate_hypergeom.pmf(x=[7, 3], m=[15, 10], n=10)
A:scipy.stats.tests.test_multivariate.val2->scipy.stats.hypergeom.pmf(k=7, M=25, n=10, N=15)
A:scipy.stats.tests.test_multivariate.sc_rvs->scipy.stats.multinomial.rvs(3, [1 / 4.0] * 3, size=7, random_state=123)
A:scipy.stats.tests.test_multivariate.rndm->numpy.random.RandomState(123)
A:scipy.stats.tests.test_multivariate.np_rvs->numpy.random.RandomState(123).multinomial(3, [1 / 4.0] * 3, size=7)
A:scipy.stats.tests.test_multivariate.vals0->scipy.stats.multinomial.pmf([1, 2], 3, [[0.1, 0.9], [0.2, 0.8]])
A:scipy.stats.tests.test_multivariate.vals4->scipy.stats.multinomial.pmf([[1, 2], [1, 1]], [[[[3]]]], [0.1, 0.9])
A:scipy.stats.tests.test_multivariate.vals5->scipy.stats.multinomial.pmf([3, 3, 0], 6, [2 / 3.0, 1 / 3.0, 0])
A:scipy.stats.tests.test_multivariate.cov1->numpy.var(rvs1, axis=0)
A:scipy.stats.tests.test_multivariate.cov3->scipy.stats.multivariate_hypergeom.cov(m=[0, 0, 0], n=0)
A:scipy.stats.tests.test_multivariate.cov5->scipy.stats.multivariate_hypergeom.cov(m=np.array([], np.int_), n=0)
A:scipy.stats.tests.test_multivariate.ent0->scipy.stats.multinomial.entropy([2, 3], [0.2, 0.3])
A:scipy.stats.tests.test_multivariate.ent1->scipy.stats.multinomial.entropy([7, 8], [[0.3, 0.7], [0.4, 0.6]])
A:scipy.stats.tests.test_multivariate.ent2->scipy.stats.multinomial.entropy([[7], [8]], [[0.3, 0.7], [0.4, 0.6]])
A:scipy.stats.tests.test_multivariate.mean1->scipy.stats.multivariate_hypergeom.mean(m=[1, 0, 0], n=2)
A:scipy.stats.tests.test_multivariate.mn_frozen->multinomial(n, pvals)
A:scipy.stats.tests.test_multivariate.p->ct.pmf(unique_rvs, row, col)
A:scipy.stats.tests.test_multivariate.logpmf->scipy.stats.multinomial.logpmf(x, n, p)
A:scipy.stats.tests.test_multivariate.iw->invwishart(df, scale)
A:scipy.stats.tests.test_multivariate.ig->invgamma(df / 2, scale=1.0 / 2)
A:scipy.stats.tests.test_multivariate.w_rvs->scipy.stats.wishart.rvs(df, scale)
A:scipy.stats.tests.test_multivariate.frozen_w_rvs->wishart(df, scale).rvs()
A:scipy.stats.tests.test_multivariate.iw_rvs->scipy.stats.invwishart.rvs(df, scale)
A:scipy.stats.tests.test_multivariate.frozen_iw_rvs->invwishart(df, scale).rvs()
A:scipy.stats.tests.test_multivariate.covariances->numpy.random.normal(size=3)
A:scipy.stats.tests.test_multivariate.D->numpy.linalg.cholesky(scale)
A:scipy.stats.tests.test_multivariate.DA->numpy.linalg.cholesky(scale).dot(A)
A:scipy.stats.tests.test_multivariate.manual_w_rvs->numpy.dot(DA, DA.T)
A:scipy.stats.tests.test_multivariate.iD->numpy.linalg.cholesky(np.linalg.inv(scale))
A:scipy.stats.tests.test_multivariate.iDA->numpy.linalg.cholesky(np.linalg.inv(scale)).dot(A)
A:scipy.stats.tests.test_multivariate.manual_iw_rvs->numpy.linalg.inv(np.dot(iDA, iDA.T))
A:scipy.stats.tests.test_multivariate.a0->numpy.array([[2, 1, 0, 0.5], [1, 2, 0.5, 0.5], [0, 0.5, 3, 1], [0.5, 0.5, 1, 2]])
A:scipy.stats.tests.test_multivariate.a1->numpy.array([[2, -1, 0, 0.5], [-1, 2, 0.5, 0.5], [0, 0.5, 3, 1], [0.5, 0.5, 1, 4]])
A:scipy.stats.tests.test_multivariate.a->numpy.array([a0, a1])
A:scipy.stats.tests.test_multivariate.ainv->numpy.array([a0, a1]).copy()
A:scipy.stats.tests.test_multivariate.ident->numpy.eye(4)
A:scipy.stats.tests.test_multivariate.Psi->numpy.array([[9, 7, 3, 1], [7, 9, 5, 1], [3, 5, 8, 2], [1, 1, 2, 9]])
A:scipy.stats.tests.test_multivariate.prob->scipy.stats.invwishart.logpdf(X, nu, Psi)
A:scipy.stats.tests.test_multivariate.(sig, logdetX)->numpy.linalg.slogdet(X)
A:scipy.stats.tests.test_multivariate.(sig, logdetPsi)->numpy.linalg.slogdet(Psi)
A:scipy.stats.tests.test_multivariate.random_state->numpy.random.RandomState(seed=514)
A:scipy.stats.tests.test_multivariate.xs->scipy.stats.unitary_group.rvs(dim, size=samples)
A:scipy.stats.tests.test_multivariate.proj->dict((((er, ec), sorted([x[er][ec] for x in xs])) for (er, ec) in els))
A:scipy.stats.tests.test_multivariate.frozen_seed->unitary_group(dim, seed=514)
A:scipy.stats.tests.test_multivariate.rvs3->unitary_group(dim, seed=514).rvs(size=1)
A:scipy.stats.tests.test_multivariate.dets->numpy.array([[np.linalg.det(x) for x in xx] for xx in xs])
A:scipy.stats.tests.test_multivariate.(u, _s, v)->numpy.linalg.svd(np.random.normal(size=(dim, dim)))
A:scipy.stats.tests.test_multivariate.stats->numpy.array([np.sum((rvs(dim=dim) - rvs(dim=dim)) ** 2) for _ in range(N)])
A:scipy.stats.tests.test_multivariate.(_D, p)->scipy.stats.ks_2samp(expected, actual)
A:scipy.stats.tests.test_multivariate.m->numpy.asarray(m)
A:scipy.stats.tests.test_multivariate.g->numpy.array([[0, 1], [-1, 0]])
A:scipy.stats.tests.test_multivariate.m0->numpy.array([[2 + 1e-07, 1], [1, 2]], dtype=float)
A:scipy.stats.tests.test_multivariate.uniform_direction_dist->uniform_direction(dim, seed=rng)
A:scipy.stats.tests.test_multivariate.samples->multivariate_t(np.zeros(dim), np.eye(dim), df).rvs(size=100000)
A:scipy.stats.tests.test_multivariate.norms->numpy.linalg.norm(samples, axis=-1)
A:scipy.stats.tests.test_multivariate.spherical_dist->uniform_direction(dim, seed=rng)
A:scipy.stats.tests.test_multivariate.(v1, v2)->uniform_direction(dim, seed=rng).rvs(size=2)
A:scipy.stats.tests.test_multivariate.angles->numpy.arctan2(s1, s2)
A:scipy.stats.tests.test_multivariate.uniform_dist->uniform()
A:scipy.stats.tests.test_multivariate.kstest_result->kstest(angles, uniform_dist.cdf)
A:scipy.stats.tests.test_multivariate.eigs->numpy.vstack([scipy.linalg.eigvals(x) for x in xs])
A:scipy.stats.tests.test_multivariate.dist->multivariate_t(np.zeros(dim), np.eye(dim), df)
A:scipy.stats.tests.test_multivariate.val->scipy.stats.multivariate_t.pdf(x, df=1)
A:scipy.stats.tests.test_multivariate.ans->scipy.stats.cauchy.pdf(x)
A:scipy.stats.tests.test_multivariate.(_, p)->normaltest(samples)
A:scipy.stats.tests.test_multivariate.loc->self.get_rng().uniform(size=3)
A:scipy.stats.tests.test_multivariate.shape->numpy.eye(3)
A:scipy.stats.tests.test_multivariate.dist2->multivariate_t(loc, shape, df=3, seed=2)
A:scipy.stats.tests.test_multivariate.samples1->multivariate_t(loc, shape, df=3, seed=2).rvs(size=10)
A:scipy.stats.tests.test_multivariate.samples2->multivariate_t(loc, shape, df=3, seed=2).rvs(size=10)
A:scipy.stats.tests.test_multivariate.args->dict(loc=[0, 0], shape=[[0, 0], [0, 1]], df=1, allow_singular=False)
A:scipy.stats.tests.test_multivariate.vals->scipy.stats.multivariate_hypergeom.pmf(x, m, n)
A:scipy.stats.tests.test_multivariate.res_ex->numpy.asarray(m).copy()
A:scipy.stats.tests.test_multivariate.var0->scipy.stats.multivariate_hypergeom.var(m=[0, 0, 0], n=0)
A:scipy.stats.tests.test_multivariate.var1->scipy.stats.multivariate_hypergeom.var(m=[1, 0, 0], n=2)
A:scipy.stats.tests.test_multivariate.var2->scipy.stats.multivariate_hypergeom.var(m=[[1, 0, 0], [1, 0, 1]], n=2)
A:scipy.stats.tests.test_multivariate.var3->scipy.stats.multivariate_hypergeom.var(m=np.array([], np.int_), n=0)
A:scipy.stats.tests.test_multivariate.var5->scipy.stats.multivariate_hypergeom.var(m=[[5], [10]], n=[5, 10])
A:scipy.stats.tests.test_multivariate.mean0->scipy.stats.multivariate_hypergeom.mean(m=[0, 0, 0], n=0)
A:scipy.stats.tests.test_multivariate.mean3->scipy.stats.multivariate_hypergeom.mean(m=np.array([], np.int_), n=0)
A:scipy.stats.tests.test_multivariate.cov0->scipy.stats.multivariate_hypergeom.cov(m=[1, 0, 0], n=1)
A:scipy.stats.tests.test_multivariate.cov6->numpy.array([], dtype=np.float_).reshape(0, 0)
A:scipy.stats.tests.test_multivariate.mhg_frozen->multivariate_hypergeom(m, n)
A:scipy.stats.tests.test_multivariate.(r, c, n)->scipy.stats.random_table._process_parameters([1, 3], [2, 1, 1])
A:scipy.stats.tests.test_multivariate.got->random_table(row, col, seed=self.get_rng()).rvs(size=10, method=method)
A:scipy.stats.tests.test_multivariate.method->getattr(obj, 'logpmf' if log else 'pmf')
A:scipy.stats.tests.test_multivariate.(unique_rvs, counts)->numpy.unique(rvs, axis=0, return_counts=True)
A:scipy.stats.tests.test_multivariate.p2->pmf(list(unique_rvs[0]))
A:scipy.stats.tests.test_multivariate.rvs_nd->getattr(_rcont, f'rvs_rcont{v}').reshape((10, 100) + rvs.shape[1:])
A:scipy.stats.tests.test_multivariate.qij->pmf(rvij)
A:scipy.stats.tests.test_multivariate.rv2->scipy.stats.random_table.rvs(row, col, size=1, method=method, random_state=self.get_rng())
A:scipy.stats.tests.test_multivariate.rv3->scipy.stats.random_table.rvs(row, col, size=0, method=method, random_state=self.get_rng())
A:scipy.stats.tests.test_multivariate.rv4->scipy.stats.random_table.rvs(row, col, size=20, method=method, random_state=self.get_rng())
A:scipy.stats.tests.test_multivariate.rv5->scipy.stats.random_table.rvs(row, col, size=(4, 5), method=method, random_state=self.get_rng())
A:scipy.stats.tests.test_multivariate.row->numpy.array([1, 3], dtype=np.int64)
A:scipy.stats.tests.test_multivariate.col->numpy.array([2, 1, 1], dtype=np.int64)
A:scipy.stats.tests.test_multivariate.ntot->numpy.sum(row)
A:scipy.stats.tests.test_multivariate.result->rvs(row, col, ntot, 1, self.get_rng())
A:scipy.stats.tests.test_multivariate.r0->distfn.rvs(*args, size=8)
A:scipy.stats.tests.test_multivariate.unpickled->pickle.loads(s)
A:scipy.stats.tests.test_multivariate.r1->pickle.loads(s).rvs(*args, size=8)
scipy.stats.tests.testTestCovariance
scipy.stats.tests.testTestCovariance.test_covariance(self,matrix_type,cov_type_name)
scipy.stats.tests.testTestCovariance.test_covariance_instantiation(self)
scipy.stats.tests.testTestCovariance.test_factories(self,cov_type_name)
scipy.stats.tests.testTestCovariance.test_gh9942(self)
scipy.stats.tests.testTestCovariance.test_input_validation(self)
scipy.stats.tests.testTestCovariance.test_mvn_with_covariance(self,size,matrix_type,cov_type_name)
scipy.stats.tests.testTestCovariance.test_mvn_with_covariance_cdf(self,size,cov_type_name)
scipy.stats.tests.testTestDirichlet
scipy.stats.tests.testTestDirichlet.test_2D_dirichlet_is_beta(self)
scipy.stats.tests.testTestDirichlet.test_K_and_K_minus_1_calls_equal(self)
scipy.stats.tests.testTestDirichlet.test_alpha_correct_depth(self)
scipy.stats.tests.testTestDirichlet.test_alpha_too_deep(self)
scipy.stats.tests.testTestDirichlet.test_alpha_with_negative_entries(self)
scipy.stats.tests.testTestDirichlet.test_alpha_with_zeros(self)
scipy.stats.tests.testTestDirichlet.test_data_too_deep_c(self)
scipy.stats.tests.testTestDirichlet.test_data_vector_too_long(self)
scipy.stats.tests.testTestDirichlet.test_data_vector_too_short(self)
scipy.stats.tests.testTestDirichlet.test_data_with_negative_entries(self)
scipy.stats.tests.testTestDirichlet.test_data_with_too_large_entries(self)
scipy.stats.tests.testTestDirichlet.test_data_with_zeros(self)
scipy.stats.tests.testTestDirichlet.test_data_with_zeros_and_small_alpha(self)
scipy.stats.tests.testTestDirichlet.test_frozen_dirichlet(self)
scipy.stats.tests.testTestDirichlet.test_mean_and_var(self)
scipy.stats.tests.testTestDirichlet.test_multiple_entry_calls(self)
scipy.stats.tests.testTestDirichlet.test_non_simplex_data(self)
scipy.stats.tests.testTestDirichlet.test_numpy_rvs_shape_compatibility(self)
scipy.stats.tests.testTestDirichlet.test_scalar_values(self)
scipy.stats.tests.testTestInvwishart
scipy.stats.tests.testTestInvwishart.test_1D_is_invgamma(self)
scipy.stats.tests.testTestInvwishart.test_cho_inv_batch(self)
scipy.stats.tests.testTestInvwishart.test_frozen(self)
scipy.stats.tests.testTestInvwishart.test_logpdf_4x4(self)
scipy.stats.tests.testTestInvwishart.test_wishart_invwishart_2D_rvs(self)
scipy.stats.tests.testTestMatrixNormal
scipy.stats.tests.testTestMatrixNormal.test_array_input(self)
scipy.stats.tests.testTestMatrixNormal.test_bad_input(self)
scipy.stats.tests.testTestMatrixNormal.test_covariance_expansion(self)
scipy.stats.tests.testTestMatrixNormal.test_default_inputs(self)
scipy.stats.tests.testTestMatrixNormal.test_frozen_matrix_normal(self)
scipy.stats.tests.testTestMatrixNormal.test_matches_multivariate(self)
scipy.stats.tests.testTestMatrixNormal.test_moments(self)
scipy.stats.tests.testTestMatrixNormal.test_samples(self)
scipy.stats.tests.testTestMultinomial
scipy.stats.tests.testTestMultinomial.test_R(self)
scipy.stats.tests.testTestMultinomial.test_cov(self)
scipy.stats.tests.testTestMultinomial.test_cov_broadcasting(self)
scipy.stats.tests.testTestMultinomial.test_entropy(self)
scipy.stats.tests.testTestMultinomial.test_entropy_broadcasting(self)
scipy.stats.tests.testTestMultinomial.test_frozen(self)
scipy.stats.tests.testTestMultinomial.test_gh_11860(self)
scipy.stats.tests.testTestMultinomial.test_logpmf(self)
scipy.stats.tests.testTestMultinomial.test_mean(self)
scipy.stats.tests.testTestMultinomial.test_mean_broadcasting(self)
scipy.stats.tests.testTestMultinomial.test_pmf(self)
scipy.stats.tests.testTestMultinomial.test_pmf_broadcasting(self)
scipy.stats.tests.testTestMultinomial.test_reduces_binomial(self)
scipy.stats.tests.testTestMultinomial.test_rvs_np(self)
scipy.stats.tests.testTestMultivariateHypergeom
scipy.stats.tests.testTestMultivariateHypergeom.test_cov(self)
scipy.stats.tests.testTestMultivariateHypergeom.test_cov_broadcasting(self)
scipy.stats.tests.testTestMultivariateHypergeom.test_cov_edge_cases(self)
scipy.stats.tests.testTestMultivariateHypergeom.test_frozen(self)
scipy.stats.tests.testTestMultivariateHypergeom.test_invalid_params(self)
scipy.stats.tests.testTestMultivariateHypergeom.test_logpmf(self,x,m,n,expected)
scipy.stats.tests.testTestMultivariateHypergeom.test_mean(self)
scipy.stats.tests.testTestMultivariateHypergeom.test_mean_broadcasting(self)
scipy.stats.tests.testTestMultivariateHypergeom.test_mean_edge_cases(self)
scipy.stats.tests.testTestMultivariateHypergeom.test_pmf(self,x,m,n,expected)
scipy.stats.tests.testTestMultivariateHypergeom.test_pmf_broadcasting(self,x,m,n,expected)
scipy.stats.tests.testTestMultivariateHypergeom.test_reduces_hypergeom(self)
scipy.stats.tests.testTestMultivariateHypergeom.test_rvs(self)
scipy.stats.tests.testTestMultivariateHypergeom.test_rvs_broadcasting(self)
scipy.stats.tests.testTestMultivariateHypergeom.test_rvs_gh16171(self,m,n)
scipy.stats.tests.testTestMultivariateHypergeom.test_var(self)
scipy.stats.tests.testTestMultivariateHypergeom.test_var_broadcasting(self)
scipy.stats.tests.testTestMultivariateHypergeom.test_var_edge_cases(self)
scipy.stats.tests.testTestMultivariateNormal
scipy.stats.tests.testTestMultivariateNormal.test_R_values(self)
scipy.stats.tests.testTestMultivariateNormal.test_broadcasting(self)
scipy.stats.tests.testTestMultivariateNormal.test_cdf_signs(self)
scipy.stats.tests.testTestMultivariateNormal.test_cdf_with_lower_limit_arrays(self)
scipy.stats.tests.testTestMultivariateNormal.test_cdf_with_lower_limit_consistency(self)
scipy.stats.tests.testTestMultivariateNormal.test_degenerate_array(self)
scipy.stats.tests.testTestMultivariateNormal.test_degenerate_distributions(self)
scipy.stats.tests.testTestMultivariateNormal.test_entropy(self)
scipy.stats.tests.testTestMultivariateNormal.test_exception_non_psd_cov(self)
scipy.stats.tests.testTestMultivariateNormal.test_exception_nonfinite_cov(self)
scipy.stats.tests.testTestMultivariateNormal.test_exception_nonsquare_cov(self)
scipy.stats.tests.testTestMultivariateNormal.test_exception_singular_cov(self)
scipy.stats.tests.testTestMultivariateNormal.test_frozen(self)
scipy.stats.tests.testTestMultivariateNormal.test_input_shape(self)
scipy.stats.tests.testTestMultivariateNormal.test_large_pseudo_determinant(self)
scipy.stats.tests.testTestMultivariateNormal.test_large_sample(self)
scipy.stats.tests.testTestMultivariateNormal.test_lnB(self)
scipy.stats.tests.testTestMultivariateNormal.test_logcdf(self)
scipy.stats.tests.testTestMultivariateNormal.test_logcdf_default_values(self)
scipy.stats.tests.testTestMultivariateNormal.test_logpdf(self)
scipy.stats.tests.testTestMultivariateNormal.test_logpdf_default_values(self)
scipy.stats.tests.testTestMultivariateNormal.test_marginalization(self)
scipy.stats.tests.testTestMultivariateNormal.test_mean_cov(self)
scipy.stats.tests.testTestMultivariateNormal.test_multivariate_normal_rvs_zero_covariance(self)
scipy.stats.tests.testTestMultivariateNormal.test_normal_1D(self)
scipy.stats.tests.testTestMultivariateNormal.test_pseudodet_pinv(self)
scipy.stats.tests.testTestMultivariateNormal.test_rank(self)
scipy.stats.tests.testTestMultivariateNormal.test_rvs_shape(self)
scipy.stats.tests.testTestMultivariateNormal.test_scalar_values(self)
scipy.stats.tests.testTestMultivariateT
scipy.stats.tests.testTestMultivariateT.test_allow_singular(self)
scipy.stats.tests.testTestMultivariateT.test_argument_error_handling(self)
scipy.stats.tests.testTestMultivariateT.test_default_args(self,loc,shape,df,loc_ans,shape_ans,df_ans)
scipy.stats.tests.testTestMultivariateT.test_default_arguments(self)
scipy.stats.tests.testTestMultivariateT.test_logpdf_correct(self,x,loc,shape,df,ans)
scipy.stats.tests.testTestMultivariateT.test_mvt_with_df_one_is_cauchy(self)
scipy.stats.tests.testTestMultivariateT.test_mvt_with_high_df_is_approx_normal(self)
scipy.stats.tests.testTestMultivariateT.test_mvt_with_inf_df_calls_normal(self,mock)
scipy.stats.tests.testTestMultivariateT.test_pdf_correctness(self,x,loc,shape,df,ans)
scipy.stats.tests.testTestMultivariateT.test_reproducibility(self)
scipy.stats.tests.testTestMultivariateT.test_rvs(self,size,dim,df)
scipy.stats.tests.testTestMultivariateT.test_scalar_list_and_ndarray_arguments(self,loc,shape,df,loc_ans,shape_ans,df_ans)
scipy.stats.tests.testTestMultivariateT.test_shape_correctness(self)
scipy.stats.tests.testTestOrthoGroup
scipy.stats.tests.testTestOrthoGroup.test_det_and_ortho(self)
scipy.stats.tests.testTestOrthoGroup.test_frozen_matrix(self)
scipy.stats.tests.testTestOrthoGroup.test_haar(self)
scipy.stats.tests.testTestOrthoGroup.test_invalid_dim(self)
scipy.stats.tests.testTestOrthoGroup.test_pairwise_distances(self)
scipy.stats.tests.testTestOrthoGroup.test_reproducibility(self)
scipy.stats.tests.testTestRandomCorrelation
scipy.stats.tests.testTestRandomCorrelation.test_definition(self)
scipy.stats.tests.testTestRandomCorrelation.test_frozen_matrix(self)
scipy.stats.tests.testTestRandomCorrelation.test_invalid_eigs(self)
scipy.stats.tests.testTestRandomCorrelation.test_reproducibility(self)
scipy.stats.tests.testTestRandomCorrelation.test_to_corr(self)
scipy.stats.tests.testTestRandomTable
scipy.stats.tests.testTestRandomTable.get_rng(self)
scipy.stats.tests.testTestRandomTable.test_frozen(self)
scipy.stats.tests.testTestRandomTable.test_pmf_logpmf(self,frozen,log)
scipy.stats.tests.testTestRandomTable.test_process_parameters(self)
scipy.stats.tests.testTestRandomTable.test_process_rvs_method_bad_argument(self)
scipy.stats.tests.testTestRandomTable.test_process_rvs_method_on_None(self,scale,method)
scipy.stats.tests.testTestRandomTable.test_rvs_cov(self)
scipy.stats.tests.testTestRandomTable.test_rvs_frozen(self,method)
scipy.stats.tests.testTestRandomTable.test_rvs_mean(self,method)
scipy.stats.tests.testTestRandomTable.test_rvs_method(self,method)
scipy.stats.tests.testTestRandomTable.test_rvs_rcont(self,v)
scipy.stats.tests.testTestRandomTable.test_rvs_size(self,method)
scipy.stats.tests.testTestRandomTable.test_rvs_with_edge_cases(self,method,row,col)
scipy.stats.tests.testTestRandomTable.test_rvs_with_zeros_in_col_row(self,method)
scipy.stats.tests.testTestSpecialOrthoGroup
scipy.stats.tests.testTestSpecialOrthoGroup.test_det_and_ortho(self)
scipy.stats.tests.testTestSpecialOrthoGroup.test_frozen_matrix(self)
scipy.stats.tests.testTestSpecialOrthoGroup.test_haar(self)
scipy.stats.tests.testTestSpecialOrthoGroup.test_invalid_dim(self)
scipy.stats.tests.testTestSpecialOrthoGroup.test_reproducibility(self)
scipy.stats.tests.testTestUniformDirection
scipy.stats.tests.testTestUniformDirection.test_frozen_distribution(self)
scipy.stats.tests.testTestUniformDirection.test_invalid_dim(self,dim)
scipy.stats.tests.testTestUniformDirection.test_samples(self,dim,size)
scipy.stats.tests.testTestUniformDirection.test_uniform(self,dim)
scipy.stats.tests.testTestUnitaryGroup
scipy.stats.tests.testTestUnitaryGroup.test_frozen_matrix(self)
scipy.stats.tests.testTestUnitaryGroup.test_haar(self)
scipy.stats.tests.testTestUnitaryGroup.test_invalid_dim(self)
scipy.stats.tests.testTestUnitaryGroup.test_reproducibility(self)
scipy.stats.tests.testTestUnitaryGroup.test_unitarity(self)
scipy.stats.tests.testTestWishart
scipy.stats.tests.testTestWishart.test_1D_is_chisquared(self)
scipy.stats.tests.testTestWishart.test_frozen(self)
scipy.stats.tests.testTestWishart.test_is_scaled_chisquared(self)
scipy.stats.tests.testTestWishart.test_quantile_dimensions(self)
scipy.stats.tests.testTestWishart.test_scale_dimensions(self)
scipy.stats.tests.test_multivariate.TestCovariance
scipy.stats.tests.test_multivariate.TestCovariance.test_covariance(self,matrix_type,cov_type_name)
scipy.stats.tests.test_multivariate.TestCovariance.test_covariance_instantiation(self)
scipy.stats.tests.test_multivariate.TestCovariance.test_factories(self,cov_type_name)
scipy.stats.tests.test_multivariate.TestCovariance.test_gh9942(self)
scipy.stats.tests.test_multivariate.TestCovariance.test_input_validation(self)
scipy.stats.tests.test_multivariate.TestCovariance.test_mvn_with_covariance(self,size,matrix_type,cov_type_name)
scipy.stats.tests.test_multivariate.TestCovariance.test_mvn_with_covariance_cdf(self,size,cov_type_name)
scipy.stats.tests.test_multivariate.TestDirichlet
scipy.stats.tests.test_multivariate.TestDirichlet.test_2D_dirichlet_is_beta(self)
scipy.stats.tests.test_multivariate.TestDirichlet.test_K_and_K_minus_1_calls_equal(self)
scipy.stats.tests.test_multivariate.TestDirichlet.test_alpha_correct_depth(self)
scipy.stats.tests.test_multivariate.TestDirichlet.test_alpha_too_deep(self)
scipy.stats.tests.test_multivariate.TestDirichlet.test_alpha_with_negative_entries(self)
scipy.stats.tests.test_multivariate.TestDirichlet.test_alpha_with_zeros(self)
scipy.stats.tests.test_multivariate.TestDirichlet.test_data_too_deep_c(self)
scipy.stats.tests.test_multivariate.TestDirichlet.test_data_vector_too_long(self)
scipy.stats.tests.test_multivariate.TestDirichlet.test_data_vector_too_short(self)
scipy.stats.tests.test_multivariate.TestDirichlet.test_data_with_negative_entries(self)
scipy.stats.tests.test_multivariate.TestDirichlet.test_data_with_too_large_entries(self)
scipy.stats.tests.test_multivariate.TestDirichlet.test_data_with_zeros(self)
scipy.stats.tests.test_multivariate.TestDirichlet.test_data_with_zeros_and_small_alpha(self)
scipy.stats.tests.test_multivariate.TestDirichlet.test_frozen_dirichlet(self)
scipy.stats.tests.test_multivariate.TestDirichlet.test_mean_and_var(self)
scipy.stats.tests.test_multivariate.TestDirichlet.test_multiple_entry_calls(self)
scipy.stats.tests.test_multivariate.TestDirichlet.test_non_simplex_data(self)
scipy.stats.tests.test_multivariate.TestDirichlet.test_numpy_rvs_shape_compatibility(self)
scipy.stats.tests.test_multivariate.TestDirichlet.test_scalar_values(self)
scipy.stats.tests.test_multivariate.TestInvwishart
scipy.stats.tests.test_multivariate.TestInvwishart.test_1D_is_invgamma(self)
scipy.stats.tests.test_multivariate.TestInvwishart.test_cho_inv_batch(self)
scipy.stats.tests.test_multivariate.TestInvwishart.test_frozen(self)
scipy.stats.tests.test_multivariate.TestInvwishart.test_logpdf_4x4(self)
scipy.stats.tests.test_multivariate.TestInvwishart.test_wishart_invwishart_2D_rvs(self)
scipy.stats.tests.test_multivariate.TestMatrixNormal
scipy.stats.tests.test_multivariate.TestMatrixNormal.test_array_input(self)
scipy.stats.tests.test_multivariate.TestMatrixNormal.test_bad_input(self)
scipy.stats.tests.test_multivariate.TestMatrixNormal.test_covariance_expansion(self)
scipy.stats.tests.test_multivariate.TestMatrixNormal.test_default_inputs(self)
scipy.stats.tests.test_multivariate.TestMatrixNormal.test_frozen_matrix_normal(self)
scipy.stats.tests.test_multivariate.TestMatrixNormal.test_matches_multivariate(self)
scipy.stats.tests.test_multivariate.TestMatrixNormal.test_moments(self)
scipy.stats.tests.test_multivariate.TestMatrixNormal.test_samples(self)
scipy.stats.tests.test_multivariate.TestMultinomial
scipy.stats.tests.test_multivariate.TestMultinomial.test_R(self)
scipy.stats.tests.test_multivariate.TestMultinomial.test_cov(self)
scipy.stats.tests.test_multivariate.TestMultinomial.test_cov_broadcasting(self)
scipy.stats.tests.test_multivariate.TestMultinomial.test_entropy(self)
scipy.stats.tests.test_multivariate.TestMultinomial.test_entropy_broadcasting(self)
scipy.stats.tests.test_multivariate.TestMultinomial.test_frozen(self)
scipy.stats.tests.test_multivariate.TestMultinomial.test_gh_11860(self)
scipy.stats.tests.test_multivariate.TestMultinomial.test_logpmf(self)
scipy.stats.tests.test_multivariate.TestMultinomial.test_mean(self)
scipy.stats.tests.test_multivariate.TestMultinomial.test_mean_broadcasting(self)
scipy.stats.tests.test_multivariate.TestMultinomial.test_pmf(self)
scipy.stats.tests.test_multivariate.TestMultinomial.test_pmf_broadcasting(self)
scipy.stats.tests.test_multivariate.TestMultinomial.test_reduces_binomial(self)
scipy.stats.tests.test_multivariate.TestMultinomial.test_rvs_np(self)
scipy.stats.tests.test_multivariate.TestMultivariateHypergeom
scipy.stats.tests.test_multivariate.TestMultivariateHypergeom.test_cov(self)
scipy.stats.tests.test_multivariate.TestMultivariateHypergeom.test_cov_broadcasting(self)
scipy.stats.tests.test_multivariate.TestMultivariateHypergeom.test_cov_edge_cases(self)
scipy.stats.tests.test_multivariate.TestMultivariateHypergeom.test_frozen(self)
scipy.stats.tests.test_multivariate.TestMultivariateHypergeom.test_invalid_params(self)
scipy.stats.tests.test_multivariate.TestMultivariateHypergeom.test_logpmf(self,x,m,n,expected)
scipy.stats.tests.test_multivariate.TestMultivariateHypergeom.test_mean(self)
scipy.stats.tests.test_multivariate.TestMultivariateHypergeom.test_mean_broadcasting(self)
scipy.stats.tests.test_multivariate.TestMultivariateHypergeom.test_mean_edge_cases(self)
scipy.stats.tests.test_multivariate.TestMultivariateHypergeom.test_pmf(self,x,m,n,expected)
scipy.stats.tests.test_multivariate.TestMultivariateHypergeom.test_pmf_broadcasting(self,x,m,n,expected)
scipy.stats.tests.test_multivariate.TestMultivariateHypergeom.test_reduces_hypergeom(self)
scipy.stats.tests.test_multivariate.TestMultivariateHypergeom.test_rvs(self)
scipy.stats.tests.test_multivariate.TestMultivariateHypergeom.test_rvs_broadcasting(self)
scipy.stats.tests.test_multivariate.TestMultivariateHypergeom.test_rvs_gh16171(self,m,n)
scipy.stats.tests.test_multivariate.TestMultivariateHypergeom.test_var(self)
scipy.stats.tests.test_multivariate.TestMultivariateHypergeom.test_var_broadcasting(self)
scipy.stats.tests.test_multivariate.TestMultivariateHypergeom.test_var_edge_cases(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_R_values(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_broadcasting(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_cdf_signs(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_cdf_with_lower_limit_arrays(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_cdf_with_lower_limit_consistency(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_degenerate_array(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_degenerate_distributions(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_entropy(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_exception_non_psd_cov(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_exception_nonfinite_cov(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_exception_nonsquare_cov(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_exception_singular_cov(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_frozen(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_input_shape(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_large_pseudo_determinant(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_large_sample(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_lnB(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_logcdf(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_logcdf_default_values(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_logpdf(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_logpdf_default_values(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_marginalization(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_mean_cov(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_multivariate_normal_rvs_zero_covariance(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_normal_1D(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_pseudodet_pinv(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_rank(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_rvs_shape(self)
scipy.stats.tests.test_multivariate.TestMultivariateNormal.test_scalar_values(self)
scipy.stats.tests.test_multivariate.TestMultivariateT
scipy.stats.tests.test_multivariate.TestMultivariateT.test_allow_singular(self)
scipy.stats.tests.test_multivariate.TestMultivariateT.test_argument_error_handling(self)
scipy.stats.tests.test_multivariate.TestMultivariateT.test_default_args(self,loc,shape,df,loc_ans,shape_ans,df_ans)
scipy.stats.tests.test_multivariate.TestMultivariateT.test_default_arguments(self)
scipy.stats.tests.test_multivariate.TestMultivariateT.test_logpdf_correct(self,x,loc,shape,df,ans)
scipy.stats.tests.test_multivariate.TestMultivariateT.test_mvt_with_df_one_is_cauchy(self)
scipy.stats.tests.test_multivariate.TestMultivariateT.test_mvt_with_high_df_is_approx_normal(self)
scipy.stats.tests.test_multivariate.TestMultivariateT.test_mvt_with_inf_df_calls_normal(self,mock)
scipy.stats.tests.test_multivariate.TestMultivariateT.test_pdf_correctness(self,x,loc,shape,df,ans)
scipy.stats.tests.test_multivariate.TestMultivariateT.test_reproducibility(self)
scipy.stats.tests.test_multivariate.TestMultivariateT.test_rvs(self,size,dim,df)
scipy.stats.tests.test_multivariate.TestMultivariateT.test_scalar_list_and_ndarray_arguments(self,loc,shape,df,loc_ans,shape_ans,df_ans)
scipy.stats.tests.test_multivariate.TestMultivariateT.test_shape_correctness(self)
scipy.stats.tests.test_multivariate.TestOrthoGroup
scipy.stats.tests.test_multivariate.TestOrthoGroup.test_det_and_ortho(self)
scipy.stats.tests.test_multivariate.TestOrthoGroup.test_frozen_matrix(self)
scipy.stats.tests.test_multivariate.TestOrthoGroup.test_haar(self)
scipy.stats.tests.test_multivariate.TestOrthoGroup.test_invalid_dim(self)
scipy.stats.tests.test_multivariate.TestOrthoGroup.test_pairwise_distances(self)
scipy.stats.tests.test_multivariate.TestOrthoGroup.test_reproducibility(self)
scipy.stats.tests.test_multivariate.TestRandomCorrelation
scipy.stats.tests.test_multivariate.TestRandomCorrelation.test_definition(self)
scipy.stats.tests.test_multivariate.TestRandomCorrelation.test_frozen_matrix(self)
scipy.stats.tests.test_multivariate.TestRandomCorrelation.test_invalid_eigs(self)
scipy.stats.tests.test_multivariate.TestRandomCorrelation.test_reproducibility(self)
scipy.stats.tests.test_multivariate.TestRandomCorrelation.test_to_corr(self)
scipy.stats.tests.test_multivariate.TestRandomTable
scipy.stats.tests.test_multivariate.TestRandomTable.get_rng(self)
scipy.stats.tests.test_multivariate.TestRandomTable.test_frozen(self)
scipy.stats.tests.test_multivariate.TestRandomTable.test_pmf_logpmf(self,frozen,log)
scipy.stats.tests.test_multivariate.TestRandomTable.test_process_parameters(self)
scipy.stats.tests.test_multivariate.TestRandomTable.test_process_rvs_method_bad_argument(self)
scipy.stats.tests.test_multivariate.TestRandomTable.test_process_rvs_method_on_None(self,scale,method)
scipy.stats.tests.test_multivariate.TestRandomTable.test_rvs_cov(self)
scipy.stats.tests.test_multivariate.TestRandomTable.test_rvs_frozen(self,method)
scipy.stats.tests.test_multivariate.TestRandomTable.test_rvs_mean(self,method)
scipy.stats.tests.test_multivariate.TestRandomTable.test_rvs_method(self,method)
scipy.stats.tests.test_multivariate.TestRandomTable.test_rvs_rcont(self,v)
scipy.stats.tests.test_multivariate.TestRandomTable.test_rvs_size(self,method)
scipy.stats.tests.test_multivariate.TestRandomTable.test_rvs_with_edge_cases(self,method,row,col)
scipy.stats.tests.test_multivariate.TestRandomTable.test_rvs_with_zeros_in_col_row(self,method)
scipy.stats.tests.test_multivariate.TestSpecialOrthoGroup
scipy.stats.tests.test_multivariate.TestSpecialOrthoGroup.test_det_and_ortho(self)
scipy.stats.tests.test_multivariate.TestSpecialOrthoGroup.test_frozen_matrix(self)
scipy.stats.tests.test_multivariate.TestSpecialOrthoGroup.test_haar(self)
scipy.stats.tests.test_multivariate.TestSpecialOrthoGroup.test_invalid_dim(self)
scipy.stats.tests.test_multivariate.TestSpecialOrthoGroup.test_reproducibility(self)
scipy.stats.tests.test_multivariate.TestUniformDirection
scipy.stats.tests.test_multivariate.TestUniformDirection.test_frozen_distribution(self)
scipy.stats.tests.test_multivariate.TestUniformDirection.test_invalid_dim(self,dim)
scipy.stats.tests.test_multivariate.TestUniformDirection.test_samples(self,dim,size)
scipy.stats.tests.test_multivariate.TestUniformDirection.test_uniform(self,dim)
scipy.stats.tests.test_multivariate.TestUnitaryGroup
scipy.stats.tests.test_multivariate.TestUnitaryGroup.test_frozen_matrix(self)
scipy.stats.tests.test_multivariate.TestUnitaryGroup.test_haar(self)
scipy.stats.tests.test_multivariate.TestUnitaryGroup.test_invalid_dim(self)
scipy.stats.tests.test_multivariate.TestUnitaryGroup.test_reproducibility(self)
scipy.stats.tests.test_multivariate.TestUnitaryGroup.test_unitarity(self)
scipy.stats.tests.test_multivariate.TestWishart
scipy.stats.tests.test_multivariate.TestWishart.test_1D_is_chisquared(self)
scipy.stats.tests.test_multivariate.TestWishart.test_frozen(self)
scipy.stats.tests.test_multivariate.TestWishart.test_is_scaled_chisquared(self)
scipy.stats.tests.test_multivariate.TestWishart.test_quantile_dimensions(self)
scipy.stats.tests.test_multivariate.TestWishart.test_scale_dimensions(self)
scipy.stats.tests.test_multivariate._sample_orthonormal_matrix(n)
scipy.stats.tests.test_multivariate.assert_close(res,ref,*args,**kwargs)
scipy.stats.tests.test_multivariate.check_pickling(distfn,args)
scipy.stats.tests.test_multivariate.test_multivariate_normal_dimensions_mismatch()
scipy.stats.tests.test_multivariate.test_random_state_property()
scipy.stats.tests.test_sample_orthonormal_matrix(n)
scipy.stats.tests.testassert_close(res,ref,*args,**kwargs)
scipy.stats.tests.testcheck_pickling(distfn,args)
scipy.stats.tests.testtest_multivariate_normal_dimensions_mismatch()
scipy.stats.tests.testtest_random_state_property()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_rank.py----------------------------------------
A:scipy.stats.tests.test_rank.ranks->numpy.array([1.5, 1.5, 4.0, 4.0, 4.0])
A:scipy.stats.tests.test_rank.c->tiecorrect(ranks)
A:scipy.stats.tests.test_rank.a->numpy.random.default_rng(abs(hash('falafel'))).random(size=shape)
A:scipy.stats.tests.test_rank.out->numpy.zeros_like(a)
A:scipy.stats.tests.test_rank.r->rankdata(values, method=method)
A:scipy.stats.tests.test_rank.expected->numpy.array([5.0, 5.0, 5.0, 2.0, 2.0, 2.0], dtype=np.float64)
A:scipy.stats.tests.test_rank.a2d->numpy.random.default_rng(abs(hash('falafel'))).random(size=shape).reshape(2, 3)
A:scipy.stats.tests.test_rank.b->numpy.unique(a)
A:scipy.stats.tests.test_rank.rankf->dict(min=min_rank, max=max_rank, ordinal=ordinal_rank, average=average_rank, dense=dense_rank)
A:scipy.stats.tests.test_rank.val->numpy.array([0, 1, 2, 2.718, 3, 3.141], dtype='object')
A:scipy.stats.tests.test_rank.data->numpy.zeros(shape)
A:scipy.stats.tests.test_rank.r0->rankdata(data, axis=0)
A:scipy.stats.tests.test_rank.r1->rankdata(data, axis=1)
A:scipy.stats.tests.test_rank.rng->numpy.random.default_rng(abs(hash('falafel')))
A:scipy.stats.tests.test_rank.i->numpy.isnan(a)
A:scipy.stats.tests.test_rank.res->rankdata(a, method, axis=axis, nan_policy='omit')
A:scipy.stats.tests.test_rank.res0->rank_omit(a, method, axis=axis)
scipy.stats.tests.test_rank.TestRankData
scipy.stats.tests.test_rank.TestRankData.test_axis(self)
scipy.stats.tests.test_rank.TestRankData.test_basic(self)
scipy.stats.tests.test_rank.TestRankData.test_big_tie(self)
scipy.stats.tests.test_rank.TestRankData.test_empty(self)
scipy.stats.tests.test_rank.TestRankData.test_large_int(self)
scipy.stats.tests.test_rank.TestRankData.test_nan_policy_omit_3d(self,axis,method)
scipy.stats.tests.test_rank.TestRankData.test_nan_policy_propagate(self)
scipy.stats.tests.test_rank.TestRankData.test_nan_policy_raise(self)
scipy.stats.tests.test_rank.TestRankData.test_one(self)
scipy.stats.tests.test_rank.TestRankData.test_rankdata_object_string(self)
scipy.stats.tests.test_rank.TestRankData.test_size_0_axis(self,axis,method,dtype)
scipy.stats.tests.test_rank.TestTieCorrect
scipy.stats.tests.test_rank.TestTieCorrect.test_basic(self)
scipy.stats.tests.test_rank.TestTieCorrect.test_empty(self)
scipy.stats.tests.test_rank.TestTieCorrect.test_no_correction(self)
scipy.stats.tests.test_rank.TestTieCorrect.test_one(self)
scipy.stats.tests.test_rank.TestTieCorrect.test_overflow(self)
scipy.stats.tests.test_rank.test_cases()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_entropy.py----------------------------------------
A:scipy.stats.tests.test_entropy.eself->scipy.stats.entropy(pk, pk)
A:scipy.stats.tests.test_entropy.edouble->scipy.stats.entropy(pk, qk)
A:scipy.stats.tests.test_entropy.pk->numpy.array([[0.1, 0.2], [0.6, 0.3], [0.3, 0.5]])
A:scipy.stats.tests.test_entropy.S->scipy.stats.entropy(pk, qk)
A:scipy.stats.tests.test_entropy.qk->numpy.array([[0.2, 0.1], [0.3, 0.6], [0.5, 0.3]])
A:scipy.stats.tests.test_entropy.S2->scipy.stats.entropy(pk, qk, base=2.0)
A:scipy.stats.tests.test_entropy.x->numpy.random.rand(10)
A:scipy.stats.tests.test_entropy.y->numpy.random.rand(11, 2)
A:scipy.stats.tests.test_entropy.res->scipy.stats.differential_entropy(rvs, window_length=m, method=method, axis=-1)
A:scipy.stats.tests.test_entropy.random_state->numpy.random.RandomState(0)
A:scipy.stats.tests.test_entropy.values->numpy.random.RandomState(0).standard_normal((3, 100))
A:scipy.stats.tests.test_entropy.entropy->scipy.stats.differential_entropy(values, axis=0)
A:scipy.stats.tests.test_entropy.formatted_error_str->error_str.format(window_length=window_length, sample_size=sample_size)
A:scipy.stats.tests.test_entropy.default_entropy->scipy.stats.differential_entropy(values)
A:scipy.stats.tests.test_entropy.rvs->scipy.stats.norm.rvs(size=(n,), random_state=0)
A:scipy.stats.tests.test_entropy.expected->scipy.stats.norm.entropy()
A:scipy.stats.tests.test_entropy.true_entropy->scipy.stats.expon.entropy()
A:scipy.stats.tests.test_entropy.res1->scipy.stats.differential_entropy(rvs)
A:scipy.stats.tests.test_entropy.res2->scipy.stats.differential_entropy(rvs, method=method)
scipy.stats.tests.testTestDifferentialEntropy
scipy.stats.tests.testTestDifferentialEntropy.test_base_differential_entropy_transposed(self)
scipy.stats.tests.testTestDifferentialEntropy.test_base_differential_entropy_with_axis_0_is_equal_to_default(self)
scipy.stats.tests.testTestDifferentialEntropy.test_consistency(self,method)
scipy.stats.tests.testTestDifferentialEntropy.test_differential_entropy_raises_value_error(self)
scipy.stats.tests.testTestDifferentialEntropy.test_differential_entropy_vasicek(self)
scipy.stats.tests.testTestDifferentialEntropy.test_differential_entropy_vasicek_2d_nondefault_axis(self)
scipy.stats.tests.testTestDifferentialEntropy.test_expon_rmse_std(self,method,expected)
scipy.stats.tests.testTestDifferentialEntropy.test_input_validation(self)
scipy.stats.tests.testTestDifferentialEntropy.test_method_auto(self,n,method)
scipy.stats.tests.testTestDifferentialEntropy.test_norm_rmse_std(self,method,expected)
scipy.stats.tests.testTestEntropy
scipy.stats.tests.testTestEntropy.test_base_entropy_transposed(self)
scipy.stats.tests.testTestEntropy.test_base_entropy_with_axis_0_is_equal_to_default(self)
scipy.stats.tests.testTestEntropy.test_entropy_2d(self)
scipy.stats.tests.testTestEntropy.test_entropy_2d_nondefault_axis(self)
scipy.stats.tests.testTestEntropy.test_entropy_2d_zero(self)
scipy.stats.tests.testTestEntropy.test_entropy_base(self)
scipy.stats.tests.testTestEntropy.test_entropy_base_2d_nondefault_axis(self)
scipy.stats.tests.testTestEntropy.test_entropy_broadcasting(self)
scipy.stats.tests.testTestEntropy.test_entropy_positive(self)
scipy.stats.tests.testTestEntropy.test_entropy_raises_value_error(self)
scipy.stats.tests.testTestEntropy.test_entropy_shape_mismatch(self)
scipy.stats.tests.testTestEntropy.test_entropy_transposed(self)
scipy.stats.tests.testTestEntropy.test_entropy_with_axis_0_is_equal_to_default(self)
scipy.stats.tests.testTestEntropy.test_entropy_zero(self)
scipy.stats.tests.testTestEntropy.test_input_validation(self)
scipy.stats.tests.test_entropy.TestDifferentialEntropy
scipy.stats.tests.test_entropy.TestDifferentialEntropy.test_base_differential_entropy_transposed(self)
scipy.stats.tests.test_entropy.TestDifferentialEntropy.test_base_differential_entropy_with_axis_0_is_equal_to_default(self)
scipy.stats.tests.test_entropy.TestDifferentialEntropy.test_consistency(self,method)
scipy.stats.tests.test_entropy.TestDifferentialEntropy.test_differential_entropy_raises_value_error(self)
scipy.stats.tests.test_entropy.TestDifferentialEntropy.test_differential_entropy_vasicek(self)
scipy.stats.tests.test_entropy.TestDifferentialEntropy.test_differential_entropy_vasicek_2d_nondefault_axis(self)
scipy.stats.tests.test_entropy.TestDifferentialEntropy.test_expon_rmse_std(self,method,expected)
scipy.stats.tests.test_entropy.TestDifferentialEntropy.test_input_validation(self)
scipy.stats.tests.test_entropy.TestDifferentialEntropy.test_method_auto(self,n,method)
scipy.stats.tests.test_entropy.TestDifferentialEntropy.test_norm_rmse_std(self,method,expected)
scipy.stats.tests.test_entropy.TestEntropy
scipy.stats.tests.test_entropy.TestEntropy.test_base_entropy_transposed(self)
scipy.stats.tests.test_entropy.TestEntropy.test_base_entropy_with_axis_0_is_equal_to_default(self)
scipy.stats.tests.test_entropy.TestEntropy.test_entropy_2d(self)
scipy.stats.tests.test_entropy.TestEntropy.test_entropy_2d_nondefault_axis(self)
scipy.stats.tests.test_entropy.TestEntropy.test_entropy_2d_zero(self)
scipy.stats.tests.test_entropy.TestEntropy.test_entropy_base(self)
scipy.stats.tests.test_entropy.TestEntropy.test_entropy_base_2d_nondefault_axis(self)
scipy.stats.tests.test_entropy.TestEntropy.test_entropy_broadcasting(self)
scipy.stats.tests.test_entropy.TestEntropy.test_entropy_positive(self)
scipy.stats.tests.test_entropy.TestEntropy.test_entropy_raises_value_error(self)
scipy.stats.tests.test_entropy.TestEntropy.test_entropy_shape_mismatch(self)
scipy.stats.tests.test_entropy.TestEntropy.test_entropy_transposed(self)
scipy.stats.tests.test_entropy.TestEntropy.test_entropy_with_axis_0_is_equal_to_default(self)
scipy.stats.tests.test_entropy.TestEntropy.test_entropy_zero(self)
scipy.stats.tests.test_entropy.TestEntropy.test_input_validation(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_stats.py----------------------------------------
A:scipy.stats.tests.test_stats.X->numpy.random.default_rng(42).integers(10, 100, (num,))
A:scipy.stats.tests.test_stats.ZERO->array([0, 0, 0, 0, 0, 0, 0, 0, 0], float)
A:scipy.stats.tests.test_stats.BIG->array([99999991, 99999992, 99999993, 99999994, 99999995, 99999996, 99999997, 99999998, 99999999], float)
A:scipy.stats.tests.test_stats.LITTLE->array([0.99999991, 0.99999992, 0.99999993, 0.99999994, 0.99999995, 0.99999996, 0.99999997, 0.99999998, 0.99999999], float)
A:scipy.stats.tests.test_stats.HUGE->array([1000000000000.0, 2000000000000.0, 3000000000000.0, 4000000000000.0, 5000000000000.0, 6000000000000.0, 7000000000000.0, 8000000000000.0, 9000000000000.0], float)
A:scipy.stats.tests.test_stats.TINY->array([1e-12, 2e-12, 3e-12, 4e-12, 5e-12, 6e-12, 7e-12, 8e-12, 9e-12], float)
A:scipy.stats.tests.test_stats.ROUND->array([0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5], float)
A:scipy.stats.tests.test_stats.y->numpy.random.default_rng(42).logistic(size=n, loc=10)
A:scipy.stats.tests.test_stats.y1->scipy.stats.tmean(X, limits=(2, 8), inclusive=(False, False))
A:scipy.stats.tests.test_stats.y2->scipy.stats.tmean(X, limits=None)
A:scipy.stats.tests.test_stats.x_2d->arange(63, dtype=float64).reshape((9, 7))
A:scipy.stats.tests.test_stats.x_2d_with_nan->numpy.array(x_2d)
A:scipy.stats.tests.test_stats.x->numpy.random.default_rng(42).pareto(a=2, size=n)
A:scipy.stats.tests.test_stats.y_ref->numpy.array([4, 5, 6, 7, 8])
A:scipy.stats.tests.test_stats.res->scipy.stats.expectile(a, alpha, weights=weights)
A:scipy.stats.tests.test_stats.a->numpy.random.default_rng(42).random(n)
A:scipy.stats.tests.test_stats.(r, prob)->scipy.stats.pearsonr(a, b)
A:scipy.stats.tests.test_stats.b->numpy.ones((5, 4))
A:scipy.stats.tests.test_stats.(r, p)->scipy.stats.spearmanr(x, y)
A:scipy.stats.tests.test_stats.result->scipy.stats.f_oneway([10], [11], [12], [13])
A:scipy.stats.tests.test_stats.ci->numpy.expand_dims(res.confidence_interval(), axis=-2)
A:scipy.stats.tests.test_stats.(oddsratio, pval)->scipy.stats.fisher_exact(table)
A:scipy.stats.tests.test_stats.(odds, pvalue)->scipy.stats.fisher_exact([[1, 2], [9, 84419233]])
A:scipy.stats.tests.test_stats.table->numpy.array([[14500, 20000], [30000, 40000]])
A:scipy.stats.tests.test_stats.(corx, px)->scipy.stats.spearmanr(x, nan_policy='omit')
A:scipy.stats.tests.test_stats.(cory, py)->scipy.stats.spearmanr(y)
A:scipy.stats.tests.test_stats.corx->numpy.delete(np.delete(corx, k, axis=1), k, axis=0)
A:scipy.stats.tests.test_stats.px->numpy.delete(np.delete(px, k, axis=1), k, axis=0)
A:scipy.stats.tests.test_stats.(corr, pvalue)->scipy.stats.spearmanr(x, axis=1, nan_policy='propagate')
A:scipy.stats.tests.test_stats.res1->scipy.stats.page_trend_test(ranks)
A:scipy.stats.tests.test_stats.res2->fun(*args, mode='exact')
A:scipy.stats.tests.test_stats.x1->numpy.arange(5)
A:scipy.stats.tests.test_stats.x3->numpy.array([0, 1, 2, 3, 5, 4])
A:scipy.stats.tests.test_stats.actual->scipy.stats.describe(np.arange(5))
A:scipy.stats.tests.test_stats.expected_corr->numpy.array([[1, -1, 0.94285714], [-1, 1, -0.94285714], [0.94285714, -0.94285714, 1]])
A:scipy.stats.tests.test_stats.expected_pvalue->numpy.zeros((3, 3), dtype=float)
A:scipy.stats.tests.test_stats.corr->numpy.array([[np.nan, np.nan, np.nan], [np.nan, np.nan, np.nan], [np.nan, np.nan, 1.0]])
A:scipy.stats.tests.test_stats.sr->scipy.stats.spearmanr(x, y)
A:scipy.stats.tests.test_stats.pr->scipy.stats.pearsonr(xr, yr)
A:scipy.stats.tests.test_stats.sr1->scipy.stats.spearmanr(x1, y1)
A:scipy.stats.tests.test_stats.sr2->scipy.stats.spearmanr(x2, y2, nan_policy='omit')
A:scipy.stats.tests.test_stats.z1->scipy.stats.zscore(x, nan_policy='omit', axis=1)
A:scipy.stats.tests.test_stats.z2->numpy.array([[1, 2, 3, 4], [1, 1, 1, 1]])
A:scipy.stats.tests.test_stats.z3->numpy.array([[1, 1, 1, 1], [1, 1, 1, 1]])
A:scipy.stats.tests.test_stats.res_actual->scipy.stats.kendalltau(x1nan, x2nan, nan_policy='omit', method=method, alternative=alternative)
A:scipy.stats.tests.test_stats.res_expected->scipy.stats.kendalltau(x1, x2, method=method, alternative=alternative)
A:scipy.stats.tests.test_stats.(tau, p_value)->scipy.stats.weightedtau(x, y)
A:scipy.stats.tests.test_stats.expected->numpy.repeat(transformed_values, reps)
A:scipy.stats.tests.test_stats.r1->scipy.stats.rvs_ratio_uniforms(f, umax, vmin, vmax, size=(3, 4))
A:scipy.stats.tests.test_stats.r2->scipy.stats.rvs_ratio_uniforms(f, umax, vmin, vmax, size=(3, 4), random_state=1234)
A:scipy.stats.tests.test_stats.res0->scipy.stats.ttest_ind(a, b)
A:scipy.stats.tests.test_stats.(_, pval)->scipy.stats.kendalltau(x, y, method='exact', nan_policy='omit')
A:scipy.stats.tests.test_stats.rank->numpy.arange(len(a), dtype=np.intp)
A:scipy.stats.tests.test_stats.(res, nums)->scipy.stats.find_repeats(a)
A:scipy.stats.tests.test_stats.(repeated, counts)->scipy.stats.find_repeats(a)
A:scipy.stats.tests.test_stats.res3->scipy.stats.page_trend_test(data, ranked=False)
A:scipy.stats.tests.test_stats.rows->numpy.vstack((x, y))
A:scipy.stats.tests.test_stats.columns->numpy.hstack((np.expand_dims(x, 1), np.expand_dims(y, 1)))
A:scipy.stats.tests.test_stats.poly->numpy.polyfit(x, y, 1)
A:scipy.stats.tests.test_stats.(slope, intercept, lower, upper)->scipy.stats.theilslopes(y, x, 0.07, method='joint')
A:scipy.stats.tests.test_stats.(cumfreqs, lowlim, binsize, extrapoints)->scipy.stats.cumfreq(x, numbins=4, defaultreallimits=(1.5, 5))
A:scipy.stats.tests.test_stats.(relfreqs, lowlim, binsize, extrapoints)->scipy.stats.relfreq(a, numbins=4)
A:scipy.stats.tests.test_stats.(relfreqs2, lowlim, binsize, extrapoints)->scipy.stats.relfreq([1, 4, 2, 1, 3, 1], numbins=4)
A:scipy.stats.tests.test_stats.expected2->array([[0, 4, 8], [0.03, 4.03, 8.03], [3, 7, 11], [3, 7, 11]])
A:scipy.stats.tests.test_stats.score->scipy.stats.scoreatpercentile(x, 50, axis=0)
A:scipy.stats.tests.test_stats.(vals, counts)->scipy.stats.mode(4.0)
A:scipy.stats.tests.test_stats.vals->scipy.stats.mode(arr)
A:scipy.stats.tests.test_stats.arr->numpy.empty((8,), dtype=object)
A:scipy.stats.tests.test_stats.actual2->scipy.stats.mode(data2)
A:scipy.stats.tests.test_stats.ar->numpy.array(data, dtype=object)
A:scipy.stats.tests.test_stats.m->scipy.stats.mode(ar1, axis=0)
A:scipy.stats.tests.test_stats.ar1->numpy.array(data1, dtype=object)
A:scipy.stats.tests.test_stats.rng->numpy.random.default_rng(42)
A:scipy.stats.tests.test_stats.reference_shape->list(a.shape)
A:scipy.stats.tests.test_stats.ref->expectile2(a, alpha, weights)
A:scipy.stats.tests.test_stats.data->numpy.random.rand(m, n)
A:scipy.stats.tests.test_stats.n->len(self.testcase)
A:scipy.stats.tests.test_stats.z->numpy.random.rayleigh(1, 100000)
A:scipy.stats.tests.test_stats.t3->numpy.sqrt(2.0)
A:scipy.stats.tests.test_stats.z0->scipy.stats.zscore(x, nan_policy='omit', axis=0)
A:scipy.stats.tests.test_stats.scores->numpy.random.default_rng(42).random(n).reshape(shape)
A:scipy.stats.tests.test_stats.compare->numpy.array([-8, -3, 2, 7, 12, np.nan])
A:scipy.stats.tests.test_stats.s->scipy.stats.skew(a, axis=1, nan_policy='propagate')
A:scipy.stats.tests.test_stats.s2->numpy.sqrt(2)
A:scipy.stats.tests.test_stats.mx->numpy.ma.masked_array(x, mask=[0, 0, 1, 0, 0])
A:scipy.stats.tests.test_stats.self.dat_nan->numpy.array([2.2, 2.2, 2.4, 2.4, 2.5, 2.7, 2.8, 2.9, 3.03, 3.03, 3.1, 3.37, 3.4, 3.4, 3.4, 3.5, 3.6, 3.7, 3.7, 3.7, 3.7, 3.77, 5.28, np.nan])
A:scipy.stats.tests.test_stats.self.dat->numpy.array([2.2, 2.2, 2.4, 2.4, 2.5, 2.7, 2.8, 2.9, 3.03, 3.03, 3.1, 3.37, 3.4, 3.4, 3.4, 3.5, 3.6, 3.7, 3.7, 3.7, 3.7, 3.77, 5.28, 28.95])
A:scipy.stats.tests.test_stats.dat->self.dat.reshape(6, 4)
A:scipy.stats.tests.test_stats.mad->scipy.stats.median_abs_deviation(x, center=np.mean, nan_policy='omit', axis=axis)
A:scipy.stats.tests.test_stats.mad_expected->numpy.asarray([0.435, 0.5, 0.45, 0.4])
A:scipy.stats.tests.test_stats.d->d.reshape((3, 5, 7, 11)).reshape((3, 5, 7, 11))
A:scipy.stats.tests.test_stats.o->numpy.random.normal(size=(71, 23))
A:scipy.stats.tests.test_stats.q->scipy.stats.iqr(o)
A:scipy.stats.tests.test_stats.testcase_moment_accuracy->numpy.random.rand(42)
A:scipy.stats.tests.test_stats.expect->numpy.broadcast_to(expect, shape)
A:scipy.stats.tests.test_stats.mm->scipy.stats.moment(a, 2, axis=1, nan_policy='propagate')
A:scipy.stats.tests.test_stats.k->scipy.stats.kurtosis(a, axis=1, nan_policy='propagate')
A:scipy.stats.tests.test_stats.X1->numpy.array([-1, 0, 1])
A:scipy.stats.tests.test_stats.X2->numpy.array([0, 1, 2])
A:scipy.stats.tests.test_stats.(t, p)->scipy.stats.ttest_1samp(rvn1[:, :, :], 1, nan_policy='omit', alternative='less')
A:scipy.stats.tests.test_stats.popmean->numpy.random.default_rng(42).random(size=(5, 1, 20))
A:scipy.stats.tests.test_stats.PowerDivCase->namedtuple('Case', ['f_obs', 'f_exp', 'ddof', 'axis', 'chi2', 'log', 'mod_log', 'cr'])
A:scipy.stats.tests.test_stats.f_obs->numpy.array([[10, 20], [30, 20]])
A:scipy.stats.tests.test_stats.(stat, p)->scipy.stats.power_divergence(table4[:, 0], table4[:, 1], lambda_=lambda_)
A:scipy.stats.tests.test_stats.ddof->numpy.array([[0], [1]])
A:scipy.stats.tests.test_stats.expected_p->scipy.stats.distributions.chi2.sf(expected_stat, num_obs - 1 - ddof)
A:scipy.stats.tests.test_stats.mobs->numpy.ma.masked_array(obs, mask)
A:scipy.stats.tests.test_stats.f_exp->numpy.array([[5, 15], [35, 25]])
A:scipy.stats.tests.test_stats.(stat0, p0)->scipy.stats.power_divergence(f_obs, f_exp, ddof=ddof[0, 0])
A:scipy.stats.tests.test_stats.(stat1, p1)->scipy.stats.power_divergence(f_obs, f_exp, ddof=ddof[1, 0])
A:scipy.stats.tests.test_stats.(stat, pval)->scipy.stats.power_divergence(f_obs=f_obs, f_exp=f_exp)
A:scipy.stats.tests.test_stats.obs->numpy.array([15, 11, 14, 17, 5, 11, 10, 4, 8, 10, 7, 9, 11, 3, 6, 1, 1, 4])
A:scipy.stats.tests.test_stats.exp->numpy.array([n // 2, n // 2], dtype=dtype)
A:scipy.stats.tests.test_stats.expected_chisq->numpy.array([24.0, 0.5])
A:scipy.stats.tests.test_stats.expected_g->numpy.array([2 * (2 * 8 * np.log(0.5) + 32 * np.log(2.0)), 2 * (3 * np.log(0.75) + 5 * np.log(1.25))])
A:scipy.stats.tests.test_stats.(chisq, p)->scipy.stats.chisquare(empty3.T)
A:scipy.stats.tests.test_stats.(g, p)->scipy.stats.power_divergence(mobs.T, axis=1, lambda_='log-likelihood')
A:scipy.stats.tests.test_stats.obs1->numpy.ma.array([3, 5, 6, 99, 10], mask=[0, 0, 0, 1, 0])
A:scipy.stats.tests.test_stats.exp1->numpy.ma.array([2, 4, 8, 10, 99], mask=[0, 0, 0, 0, 1])
A:scipy.stats.tests.test_stats.(chi2, p)->scipy.stats.chisquare(obs1, f_exp=exp1)
A:scipy.stats.tests.test_stats.empty3->numpy.ma.array([[], [], []])
A:scipy.stats.tests.test_stats.i->numpy.arange(1, len(obs) + 1)
A:scipy.stats.tests.test_stats.alpha->numpy.random.default_rng(42).random()
A:scipy.stats.tests.test_stats.expected_counts->numpy.exp(alpha + beta * i)
A:scipy.stats.tests.test_stats.table5->numpy.array([-10.0, 72200.0, -5.0, 289.0, -3.0, 65.6, -2.0, 40.6, -1.5, 34.0, -1.0, 29.5, -0.5, 26.5, 0.0, 24.6, 0.5, 23.4, 0.67, 23.1, 1.0, 22.7, 1.5, 22.6, 2.0, 22.9, 3.0, 24.8, 5.0, 35.5, 10.0, 214.0]).reshape(-1, 2)
A:scipy.stats.tests.test_stats.result_1samp->scipy.stats.ks_1samp(x, stats.norm.cdf, alternative=alternative, mode=mode)
A:scipy.stats.tests.test_stats.dataset->numpy.asarray([(101, 1, True, 1.0), (101, 1.1, True, 1.0), (101, 0, True, 0.0), (101, -0.1, True, 0.0), (32, 1.0 / 64, True, 0.0), (32, 1.0 / 64, False, 1.0), (32, 0.5, True, 0.9999999363163307), (32, 0.5, False, 6.368366937916623e-08), (32, 1.0 / 8, True, 0.34624229979775223), (32, 1.0 / 4, True, 0.9699508336558085), (1600, 0.49, False, 0.0), (1600, 1 / 16.0, False, 7.0837876229702195e-06), (1600, 14 / 1600, False, 0.99962357317602), (1600, 1 / 32, False, 0.08603386296651416)])
A:scipy.stats.tests.test_stats.data1->numpy.array([1.0, 2.0])
A:scipy.stats.tests.test_stats.data2->numpy.random.default_rng(42).random(size=369)
A:scipy.stats.tests.test_stats.x100->numpy.linspace(1, 100, 100)
A:scipy.stats.tests.test_stats.x110->numpy.linspace(1, 100, 110)
A:scipy.stats.tests.test_stats.x2233->numpy.array([2] * 3 + [3] * 4 + [5] * 5 + [6] * 4, dtype=int)
A:scipy.stats.tests.test_stats.x2356->numpy.array([2] * 3 + [3] * 4 + [5] * 10 + [6] * 4, dtype=int)
A:scipy.stats.tests.test_stats.x3467->numpy.array([3] * 10 + [4] * 2 + [6] * 10 + [7] * 4, dtype=int)
A:scipy.stats.tests.test_stats.vals1->numpy.random.normal(size=x)
A:scipy.stats.tests.test_stats.vals2->numpy.random.normal(size=x + 10, loc=0.5)
A:scipy.stats.tests.test_stats.rvs1->numpy.linspace(5, 105, 100)
A:scipy.stats.tests.test_stats.rvs2->numpy.linspace(1, 100, 100)
A:scipy.stats.tests.test_stats.rvs1_2D->numpy.array([rvs1, rvs2])
A:scipy.stats.tests.test_stats.rvs2_2D->numpy.array([rvs2, rvs1])
A:scipy.stats.tests.test_stats.rvs1_3D->numpy.dstack([rvs1_2D, rvs1_2D, rvs1_2D])
A:scipy.stats.tests.test_stats.rvs2_3D->numpy.dstack([rvs2_2D, rvs2_2D, rvs2_2D])
A:scipy.stats.tests.test_stats.anan->numpy.array([[1, np.nan], [-1, 1]])
A:scipy.stats.tests.test_stats.converter->numpy.vectorize(convert)
A:scipy.stats.tests.test_stats.(tr, pr)->scipy.stats.ttest_1samp(rvn1[:, :, :], 1, nan_policy='omit')
A:scipy.stats.tests.test_stats.r3->scipy.stats.rvs_ratio_uniforms(f, umax, vmin, vmax, size=(3, 1), random_state=1234)
A:scipy.stats.tests.test_stats.expected_value->numpy.full(expected_shape, fill_value=np.nan)
A:scipy.stats.tests.test_stats.mu->numpy.mean(x, axis=axis)
A:scipy.stats.tests.test_stats.std->numpy.std(x, axis=axis, ddof=1)
A:scipy.stats.tests.test_stats.args->_desc_stats(np.moveaxis(rvs1_3D, 2, 0), np.moveaxis(rvs2_3D, 2, 0), axis=2)
A:scipy.stats.tests.test_stats.a2->scipy.stats.laplace.rvs(size=10000, random_state=123)
A:scipy.stats.tests.test_stats.(stat_a, _)->scipy.stats.ttest_ind(a, b, **options_a)
A:scipy.stats.tests.test_stats.(stat_p, pvalue)->scipy.stats.ttest_ind(a, b, **options_p)
A:scipy.stats.tests.test_stats.res_g_ab->scipy.stats.ttest_ind(a, b, **options_p)
A:scipy.stats.tests.test_stats.res_g_ba->scipy.stats.ttest_ind(b, a, **options_p)
A:scipy.stats.tests.test_stats.res_l_ab->scipy.stats.ttest_ind(a, b, **options_p)
A:scipy.stats.tests.test_stats.res_l_ba->scipy.stats.ttest_ind(b, a, **options_p)
A:scipy.stats.tests.test_stats.res_2_ab->scipy.stats.ttest_ind(a, b, **options_p)
A:scipy.stats.tests.test_stats.res_2_ba->scipy.stats.ttest_ind(b, a, **options_p)
A:scipy.stats.tests.test_stats.(t_stat, _, _)->_permutation_distribution_t(data, permutations, na, True)
A:scipy.stats.tests.test_stats.n_unique->len(set(t_stat))
A:scipy.stats.tests.test_stats.statistics->numpy.zeros(shape)
A:scipy.stats.tests.test_stats.pvalues->numpy.zeros(shape)
A:scipy.stats.tests.test_stats.p_nans->numpy.isnan(res.pvalue)
A:scipy.stats.tests.test_stats.statistic_nans->numpy.isnan(res.statistic)
A:scipy.stats.tests.test_stats.(statistic, pvalue)->scipy.stats.ttest_ind(a, b, trim=0.2, equal_var=False, alternative=alt)
A:scipy.stats.tests.test_stats.c->numpy.random.default_rng(42).exponential()
A:scipy.stats.tests.test_stats.rvs3->numpy.linspace(1, 100, 25)
A:scipy.stats.tests.test_stats.rvn1->scipy.stats.norm.rvs(loc=5, scale=10, size=(n1, n2, n3))
A:scipy.stats.tests.test_stats.(t1, p1)->scipy.stats.ttest_1samp(rvn1[:, :, :], np.ones((n1, n2, 1)), axis=2)
A:scipy.stats.tests.test_stats.(t2, p2)->scipy.stats.ttest_1samp(rvn1[:, :, :], 1, axis=2)
A:scipy.stats.tests.test_stats.(t3, p3)->scipy.stats.ttest_1samp(rvn1[0, 0, :], 1)
A:scipy.stats.tests.test_stats.pc->converter(tr, pr, 'less')
A:scipy.stats.tests.test_stats.(n, mm, m, v, sk, kurt)->scipy.stats.describe(x, ddof=0)
A:scipy.stats.tests.test_stats.mc->numpy.array([1.4, 1.4, 1.4, 1.4])
A:scipy.stats.tests.test_stats.vc->numpy.array([0.24, 0.24, 0.24, 0.24])
A:scipy.stats.tests.test_stats.a1->scipy.stats.skewnorm.rvs(a=1, size=10000, random_state=123)
A:scipy.stats.tests.test_stats.(z, p)->scipy.stats.kurtosistest(a2[:100], nan_policy='omit')
A:scipy.stats.tests.test_stats.(zl, pl)->scipy.stats.kurtosistest(a2[:100], nan_policy='omit', alternative='less')
A:scipy.stats.tests.test_stats.(zg, pg)->scipy.stats.kurtosistest(a2[:100], nan_policy='omit', alternative='greater')
A:scipy.stats.tests.test_stats.(x, y)->self._simulations(samps=100, dims=1, sim_type='linear')
A:scipy.stats.tests.test_stats.jb_test1(JB1, p1)->scipy.stats.jarque_bera(list(x))
A:scipy.stats.tests.test_stats.jb_test2(JB2, p2)->scipy.stats.jarque_bera(tuple(x))
A:scipy.stats.tests.test_stats.jb_test3(JB3, p3)->scipy.stats.jarque_bera(x.reshape(2, 50000))
A:scipy.stats.tests.test_stats.(s0, p0)->scipy.stats.jarque_bera(x[0, :])
A:scipy.stats.tests.test_stats.(s1, p1)->scipy.stats.jarque_bera(x[1, :])
A:scipy.stats.tests.test_stats.resT->scipy.stats.jarque_bera(x.T, axis=0)
A:scipy.stats.tests.test_stats.(u1, p1)->scipy.stats.brunnermunzel(X, Y, nan_policy='omit')
A:scipy.stats.tests.test_stats.(u2, p2)->scipy.stats.brunnermunzel(Y, X, nan_policy='omit')
A:scipy.stats.tests.test_stats.(u3, p3)->scipy.stats.brunnermunzel([], [])
A:scipy.stats.tests.test_stats.(u4, p4)->scipy.stats.brunnermunzel(self.Y, self.X, alternative='less')
A:scipy.stats.tests.test_stats.t1->scipy.stats.obrientransform(x1)
A:scipy.stats.tests.test_stats.x2->numpy.array([0, 3, 6, 9])
A:scipy.stats.tests.test_stats.t2->scipy.stats.obrientransform(x2)
A:scipy.stats.tests.test_stats.(a, b)->scipy.stats.obrientransform(x1, x2)
A:scipy.stats.tests.test_stats.(a, b, c)->scipy.stats.obrientransform(x1, x2, x1)
A:scipy.stats.tests.test_stats.values->range(5, 11)
A:scipy.stats.tests.test_stats.reps->numpy.array([5, 11, 9, 3, 2, 2])
A:scipy.stats.tests.test_stats.transformed_values->numpy.array([3.1828, 0.5591, 0.0344, 1.6086, 5.2817, 11.0538])
A:scipy.stats.tests.test_stats.desired->fun(a, axis=axis, weights=weights)
A:scipy.stats.tests.test_stats.weights->numpy.random.default_rng(42).random(n)
A:scipy.stats.tests.test_stats.v->numpy.random.normal(0, 1, size=(samps, 1))
A:scipy.stats.tests.test_stats.fun->getattr(stats, fun_name)
A:scipy.stats.tests.test_stats.array_3d->array_1d.reshape(2, 3, 4)
A:scipy.stats.tests.test_stats.gstd_actual->scipy.stats.gstd(ma, axis=2)
A:scipy.stats.tests.test_stats.gstd_desired->scipy.stats.gstd(self.array_3d, axis=2)
A:scipy.stats.tests.test_stats.ma->numpy.ma.masked_where(self.array_3d > 16, self.array_3d)
A:scipy.stats.tests.test_stats.P->numpy.random.default_rng(42).uniform(0, 1, (num,))
A:scipy.stats.tests.test_stats.pp->numpy.concatenate((np.linspace(0.1, 0.2, 5), np.linspace(0.45, 0.65, 5), np.linspace(0.85, 0.95, 5)))
A:scipy.stats.tests.test_stats.binom_testm1->numpy.array([0.5, 0.5555555555555556, 0.578125, 0.5904000000000003, 0.5981224279835393, 0.603430543396034, 0.607304096221924, 0.610255656871054, 0.612579511000001, 0.625, 0.670781893004115, 0.68853759765625, 0.6980101120000006, 0.703906431368616, 0.70793209416498, 0.7108561134173507, 0.713076544331419, 0.714820192935702, 0.6875, 0.7268709038256367, 0.7418963909149174, 0.74986110468096, 0.7548015520398076, 0.7581671424768577, 0.760607984787832, 0.762459425024199, 0.7639120677676575, 0.7265625, 0.761553963657302, 0.774800934828818, 0.7818005980538996, 0.78613491480358, 0.789084353140195, 0.7912217659828884, 0.79284214559524, 0.794112956558801, 0.75390625, 0.7856929451142176, 0.7976688481430754, 0.8039848974727624, 0.807891868948366, 0.8105487660137676, 0.812473307174702, 0.813931823359112, 0.815075399104785, 0.7744140625, 0.8037322594985427, 0.814742863657656, 0.8205425178645808, 0.8241275984172285, 0.8265645374416, 0.8283292196088257, 0.829666291102775, 0.8307144686362666, 0.7905273437499996, 0.8178712053954738, 0.828116983756619, 0.833508948940494, 0.8368403871552892, 0.839104213210105, 0.840743186196171, 0.84198481438049, 0.8429580531563676, 0.803619384765625, 0.829338573944648, 0.8389591907548646, 0.84401876783902, 0.84714369697889, 0.8492667010581667, 0.850803474598719, 0.851967542858308, 0.8528799045949524, 0.8145294189453126, 0.838881732845347, 0.847979024541911, 0.852760894015685, 0.8557134656773457, 0.8577190131799202, 0.85917058278431, 0.860270010472127, 0.861131648404582, 0.823802947998047, 0.846984756807511, 0.855635653643743, 0.860180994825685, 0.86298688573253, 0.864892525675245, 0.866271647085603, 0.867316125625004, 0.8681346531755114])
A:scipy.stats.tests.test_stats.binom_testp1->numpy.array([0.5, 0.259259259259259, 0.26171875, 0.26272, 0.2632244513031551, 0.2635138663069203, 0.2636951804161073, 0.2638162407564354, 0.2639010709000002, 0.625, 0.4074074074074074, 0.42156982421875, 0.4295746560000003, 0.43473045988554, 0.4383309503172684, 0.4409884859402103, 0.4430309389962837, 0.444649849401104, 0.6875, 0.4927602499618962, 0.5096031427383425, 0.518963662848, 0.5249280070771274, 0.5290623300865124, 0.5320974248125793, 0.5344204730474308, 0.536255847400756, 0.7265625, 0.5496019313526808, 0.5669248746708034, 0.576436455045805, 0.5824538812831795, 0.5866053321547824, 0.589642781414643, 0.5919618019300193, 0.593790427805202, 0.75390625, 0.590868349763505, 0.607983393277209, 0.617303847446822, 0.623172512167948, 0.627208862156123, 0.6301556891501057, 0.632401894928977, 0.6341708982290303, 0.7744140625, 0.622562037497196, 0.639236102912278, 0.648263335014579, 0.65392850011132, 0.657816519817211, 0.660650782947676, 0.662808780346311, 0.6645068560246006, 0.7905273437499996, 0.6478843304312477, 0.6640468318879372, 0.6727589686071775, 0.6782129857784873, 0.681950188903695, 0.684671508668418, 0.686741824999918, 0.688369886732168, 0.803619384765625, 0.668716055304315, 0.684360013879534, 0.6927642396829181, 0.6980155964704895, 0.701609591890657, 0.7042244320992127, 0.7062125081341817, 0.707775152962577, 0.8145294189453126, 0.686243374488305, 0.7013873696358975, 0.709501223328243, 0.714563595144314, 0.718024953392931, 0.7205416252126137, 0.722454130389843, 0.723956813292035, 0.823802947998047, 0.701255953767043, 0.715928221686075, 0.723772209289768, 0.7286603031173616, 0.7319999279787631, 0.7344267920995765, 0.736270323773157, 0.737718376096348])
A:scipy.stats.tests.test_stats.trimmed->scipy.stats.trim1(a.T, 0.2, tail='left', axis=axis)
A:scipy.stats.tests.test_stats.idx->numpy.array([3, 5, 0, 1, 2, 4])
A:scipy.stats.tests.test_stats.idx4->numpy.array([1, 0, 3, 2])
A:scipy.stats.tests.test_stats.(c, low, upp)->scipy.stats.sigmaclip(a, fact, fact)
A:scipy.stats.tests.test_stats.args_int16->numpy.array(args, dtype=np.int16)
A:scipy.stats.tests.test_stats.args_int32->numpy.array(args, dtype=np.int32)
A:scipy.stats.tests.test_stats.args_uint8->numpy.array(args, dtype=np.uint8)
A:scipy.stats.tests.test_stats.args_float64->numpy.array(args, dtype=np.float64)
A:scipy.stats.tests.test_stats.res_int16->scipy.stats.alexandergovern(*args_int16)
A:scipy.stats.tests.test_stats.res_int32->scipy.stats.alexandergovern(*args_int32)
A:scipy.stats.tests.test_stats.res_unit8->scipy.stats.alexandergovern(*args_uint8)
A:scipy.stats.tests.test_stats.res_float64->scipy.stats.alexandergovern(*args_float64)
A:scipy.stats.tests.test_stats.soln->scipy.stats.alexandergovern(x1, x2)
A:scipy.stats.tests.test_stats.res_nan->scipy.stats.alexandergovern(*args_nan, nan_policy='omit')
A:scipy.stats.tests.test_stats.res_no_nan->scipy.stats.alexandergovern(*args_no_nan)
A:scipy.stats.tests.test_stats.(F, p)->scipy.stats.f_oneway(a, b)
A:scipy.stats.tests.test_stats.fname->os.path.abspath(os.path.join(os.path.dirname(__file__), 'data/nist_anova', test_case))
A:scipy.stats.tests.test_stats.content->float(certified[0][-1]).read().split('\n')
A:scipy.stats.tests.test_stats.dataf->numpy.loadtxt(fname, skiprows=60)
A:scipy.stats.tests.test_stats.caty->numpy.unique(y)
A:scipy.stats.tests.test_stats.f->float(certified[0][-1])
A:scipy.stats.tests.test_stats.(f, p)->scipy.stats.f_oneway(a, b, c)
A:scipy.stats.tests.test_stats.(fj, pj)->scipy.stats.f_oneway(np.take(a, j, take_axis), np.take(b, j, take_axis), np.take(c, j, take_axis))
A:scipy.stats.tests.test_stats.(fij, pij)->scipy.stats.f_oneway(a[i, :, j], b[i, :, j], c[i, :, j])
A:scipy.stats.tests.test_stats.nans->numpy.full((ncols,), fill_value=np.nan)
A:scipy.stats.tests.test_stats.(h, p)->scipy.stats.kruskal(x, y)
A:scipy.stats.tests.test_stats.(xsq, p)->scipy.stats.combine_pvalues([0.01, 0.2, 0.3], method='fisher')
A:scipy.stats.tests.test_stats.(Z, p)->scipy.stats.combine_pvalues([0.01, 0.2, 0.3], method='mudholkar_george')
A:scipy.stats.tests.test_stats.(Z_f, p_f)->scipy.stats.combine_pvalues([0.01, 0.2, 0.3], method='fisher')
A:scipy.stats.tests.test_stats.(Z_p, p_p)->scipy.stats.combine_pvalues([0.01, 0.2, 0.3], method='pearson')
A:scipy.stats.tests.test_stats.pvaluess->numpy.sort(rng.uniform(0, 1, size=(m, n)), axis=0)
A:scipy.stats.tests.test_stats.pvaluess[:, 0]->numpy.linspace(0.1, 0.9, m)
A:scipy.stats.tests.test_stats.u->numpy.random.normal(0, 1, size=(samps, 1))
A:scipy.stats.tests.test_stats.u_weights->numpy.arange(len(u))
A:scipy.stats.tests.test_stats.(_, p)->scipy.stats.brunnermunzel(x, y, distribution='normal')
A:scipy.stats.tests.test_stats.rvs->scipy.stats.rvs_ratio_uniforms(lambda x: np.exp(-x), umax=1, vmin=0, vmax=2 * np.exp(-1), size=1000, random_state=12345)
A:scipy.stats.tests.test_stats.r4->scipy.stats.rvs_ratio_uniforms(f, umax, vmin, vmax, size=(3, 3, 3), random_state=12)
A:scipy.stats.tests.test_stats.r5->scipy.stats.rvs_ratio_uniforms(f, umax, vmin, vmax, size=27, random_state=12)
A:scipy.stats.tests.test_stats.r6->scipy.stats.rvs_ratio_uniforms(f, umax, vmin, vmax, random_state=1234)
A:scipy.stats.tests.test_stats.r7->scipy.stats.rvs_ratio_uniforms(f, umax, vmin, vmax, size=1, random_state=1234)
A:scipy.stats.tests.test_stats.r8->scipy.stats.rvs_ratio_uniforms(f, umax, vmin, vmax, size=(1,), random_state=1234)
A:scipy.stats.tests.test_stats.unif->numpy.array(np.random.uniform(0, 5, size=(samps, 1)))
A:scipy.stats.tests.test_stats.u_2->numpy.random.binomial(1, p=0.5, size=(samps, 1))
A:scipy.stats.tests.test_stats.v_2->numpy.random.binomial(1, p=0.5, size=(samps, 1))
A:scipy.stats.tests.test_stats.dims_noise->numpy.random.normal(0, 1, size=(samps, dims - 1))
A:scipy.stats.tests.test_stats.(stat, pvalue, _)->scipy.stats.multiscale_graphcorr(x, y, random_state=1)
A:scipy.stats.tests.test_stats.distx->cdist(x, x, metric='euclidean')
A:scipy.stats.tests.test_stats.disty->cdist(y, y, metric='euclidean')
A:scipy.stats.tests.test_stats.(stat_dist, pvalue_dist, _)->scipy.stats.multiscale_graphcorr(distx, disty, compute_distance=None, random_state=1)
A:scipy.stats.tests.test_stats.(_, pvalue, _)->scipy.stats.multiscale_graphcorr(x, y, random_state=1)
A:scipy.stats.tests.test_stats.data_3_25->numpy.random.rand(3, 25)
A:scipy.stats.tests.test_stats.data_10_26->numpy.random.rand(10, 26)
A:scipy.stats.tests.test_stats.predicted_ranks->numpy.arange(1, 7)
A:scipy.stats.tests.test_stats.perm->numpy.random.permutation(np.arange(n))
A:scipy.stats.tests.test_stats.ranks->scipy.stats.rankdata(data, axis=1)
A:scipy.stats.tests.test_stats.res4->scipy.stats.page_trend_test(ranks, predicted_ranks=predicted_ranks)
A:scipy.stats.tests.test_stats.res5->scipy.stats.page_trend_test(ranks[:, perm], predicted_ranks=predicted_ranks[perm])
A:scipy.stats.tests.test_stats.w->numpy.full_like(a, fill_value=alpha)
A:scipy.stats.tests.test_stats.alpha_seq->numpy.logspace(-15, np.log10(0.5), 100)
scipy.stats.tests.test_stats.TestAlexanderGovern
scipy.stats.tests.test_stats.TestAlexanderGovern.test_bad_inputs(self)
scipy.stats.tests.test_stats.TestAlexanderGovern.test_compare_dtypes(self)
scipy.stats.tests.test_stats.TestAlexanderGovern.test_compare_r(self)
scipy.stats.tests.test_stats.TestAlexanderGovern.test_compare_scholar(self)
scipy.stats.tests.test_stats.TestAlexanderGovern.test_compare_scholar3(self)
scipy.stats.tests.test_stats.TestAlexanderGovern.test_constant_input(self)
scipy.stats.tests.test_stats.TestAlexanderGovern.test_nan_policy_omit(self)
scipy.stats.tests.test_stats.TestAlexanderGovern.test_nan_policy_propogate(self)
scipy.stats.tests.test_stats.TestAlexanderGovern.test_nan_policy_raise(self)
scipy.stats.tests.test_stats.TestBrunnerMunzel
scipy.stats.tests.test_stats.TestBrunnerMunzel.test_brunnermunzel_alternative_error(self)
scipy.stats.tests.test_stats.TestBrunnerMunzel.test_brunnermunzel_default(self)
scipy.stats.tests.test_stats.TestBrunnerMunzel.test_brunnermunzel_distribution_error(self)
scipy.stats.tests.test_stats.TestBrunnerMunzel.test_brunnermunzel_distribution_norm(self)
scipy.stats.tests.test_stats.TestBrunnerMunzel.test_brunnermunzel_empty_imput(self)
scipy.stats.tests.test_stats.TestBrunnerMunzel.test_brunnermunzel_nan_input_omit(self)
scipy.stats.tests.test_stats.TestBrunnerMunzel.test_brunnermunzel_nan_input_propagate(self)
scipy.stats.tests.test_stats.TestBrunnerMunzel.test_brunnermunzel_nan_input_raise(self)
scipy.stats.tests.test_stats.TestBrunnerMunzel.test_brunnermunzel_normal_dist(self)
scipy.stats.tests.test_stats.TestBrunnerMunzel.test_brunnermunzel_one_sided(self)
scipy.stats.tests.test_stats.TestBrunnerMunzel.test_brunnermunzel_return_nan(self)
scipy.stats.tests.test_stats.TestBrunnerMunzel.test_brunnermunzel_two_sided(self)
scipy.stats.tests.test_stats.TestCdfDistanceValidation
scipy.stats.tests.test_stats.TestCdfDistanceValidation.test_distinct_value_and_weight_lengths(self)
scipy.stats.tests.test_stats.TestCdfDistanceValidation.test_empty_distribution(self)
scipy.stats.tests.test_stats.TestCdfDistanceValidation.test_inf_weight(self)
scipy.stats.tests.test_stats.TestCdfDistanceValidation.test_negative_weights(self)
scipy.stats.tests.test_stats.TestCdfDistanceValidation.test_zero_weight(self)
scipy.stats.tests.test_stats.TestCombinePvalues
scipy.stats.tests.test_stats.TestCombinePvalues.test_fisher(self)
scipy.stats.tests.test_stats.TestCombinePvalues.test_monotonicity(self,variant,method)
scipy.stats.tests.test_stats.TestCombinePvalues.test_mudholkar_george(self)
scipy.stats.tests.test_stats.TestCombinePvalues.test_mudholkar_george_equal_fisher_pearson_average(self)
scipy.stats.tests.test_stats.TestCombinePvalues.test_pearson(self)
scipy.stats.tests.test_stats.TestCombinePvalues.test_result(self,method)
scipy.stats.tests.test_stats.TestCombinePvalues.test_stouffer(self)
scipy.stats.tests.test_stats.TestCombinePvalues.test_stouffer2(self)
scipy.stats.tests.test_stats.TestCombinePvalues.test_tippett(self)
scipy.stats.tests.test_stats.TestCombinePvalues.test_weighted_stouffer(self)
scipy.stats.tests.test_stats.TestCombinePvalues.test_weighted_stouffer2(self)
scipy.stats.tests.test_stats.TestCorrPearsonr
scipy.stats.tests.test_stats.TestCorrPearsonr.test_basic(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_basic_example(self,alternative,pval,rlow,rhigh)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_constant_input(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_extremely_large_input_values(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_len1(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_length3_r_exactly_negative_one(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_length_two_neg2(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_length_two_pos1(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_near_constant_input(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pBIGBIG(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pBIGHUGE(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pBIGLITTLE(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pBIGROUND(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pBIGTINY(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pHUGEHUGE(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pHUGEROUND(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pHUGETINY(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pLITTLEHUGE(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pLITTLELITTLE(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pLITTLEROUND(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pLITTLETINY(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pROUNDROUND(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pTINYROUND(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pTINYTINY(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pXBIG(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pXHUGE(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pXLITTLE(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pXROUND(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pXTINY(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pXX(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pearsonr_result_attributes(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_r_almost_exactly_neg1(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_r_almost_exactly_pos1(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_unequal_lengths(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_very_large_input_values(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_very_small_input_values(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_1d_vs_2d(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_1d_vs_2d_nans(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_3cols(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_gh_8111(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_gh_9103(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_nan_policy(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_nan_policy_bug_12411(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_nan_policy_bug_12458(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_ndim_too_high(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sBIGBIG(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sBIGHUGE(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sBIGLITTLE(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sBIGROUND(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sBIGTINY(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sHUGEHUGE(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sHUGEROUND(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sHUGETINY(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sLITTLEHUGE(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sLITTLELITTLE(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sLITTLEROUND(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sLITTLETINY(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sROUNDROUND(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sTINYROUND(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sTINYTINY(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sXBIG(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sXHUGE(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sXLITTLE(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sXROUND(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sXTINY(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sXX(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_scalar(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_spearmanr_result_attributes(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_uneven_2d_shapes(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_uneven_lengths(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr2
scipy.stats.tests.test_stats.TestCorrSpearmanr2.test_alternative(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr2.test_alternative_nan_policy(self,alternative)
scipy.stats.tests.test_stats.TestCorrSpearmanr2.test_corr_1(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr2.test_empty_arrays(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr2.test_gh_11111(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr2.test_gh_issue_6061_windows_overflow(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr2.test_index_error(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr2.test_nan_policies(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr2.test_normal_draws(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr2.test_omit_paired_value(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr2.test_spearmanr_vs_r(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr2.test_tie0(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr2.test_tie1(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr2.test_tie2(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr2.test_ties_axis_1(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr2.test_unequal_lengths(self)
scipy.stats.tests.test_stats.TestDescribe
scipy.stats.tests.test_stats.TestDescribe.test_describe_axis_none(self)
scipy.stats.tests.test_stats.TestDescribe.test_describe_ddof(self)
scipy.stats.tests.test_stats.TestDescribe.test_describe_empty(self)
scipy.stats.tests.test_stats.TestDescribe.test_describe_numbers(self)
scipy.stats.tests.test_stats.TestDescribe.test_describe_result_attributes(self)
scipy.stats.tests.test_stats.TestDescribe.test_describe_scalar(self)
scipy.stats.tests.test_stats.TestEnergyDistance
scipy.stats.tests.test_stats.TestEnergyDistance.test_combine_weights(self)
scipy.stats.tests.test_stats.TestEnergyDistance.test_inf_values(self)
scipy.stats.tests.test_stats.TestEnergyDistance.test_same_distribution(self)
scipy.stats.tests.test_stats.TestEnergyDistance.test_shift(self)
scipy.stats.tests.test_stats.TestEnergyDistance.test_simple(self)
scipy.stats.tests.test_stats.TestEnergyDistance.test_zero_weight(self)
scipy.stats.tests.test_stats.TestExpectile
scipy.stats.tests.test_stats.TestExpectile.test_expectile_properties(self,alpha,n)
scipy.stats.tests.test_stats.TestExpectile.test_maximum(self)
scipy.stats.tests.test_stats.TestExpectile.test_minimum(self)
scipy.stats.tests.test_stats.TestExpectile.test_monotonicity_in_alpha(self,n)
scipy.stats.tests.test_stats.TestExpectile.test_same_as_mean(self)
scipy.stats.tests.test_stats.TestExpectile.test_weights(self)
scipy.stats.tests.test_stats.TestFOneWay
scipy.stats.tests.test_stats.TestFOneWay.test_2d_inputs(self,axis)
scipy.stats.tests.test_stats.TestFOneWay.test_3d_inputs(self)
scipy.stats.tests.test_stats.TestFOneWay.test_all_length_one(self)
scipy.stats.tests.test_stats.TestFOneWay.test_axis_error(self)
scipy.stats.tests.test_stats.TestFOneWay.test_bad_shapes(self)
scipy.stats.tests.test_stats.TestFOneWay.test_basic(self)
scipy.stats.tests.test_stats.TestFOneWay.test_constant_input(self,a,b,expected)
scipy.stats.tests.test_stats.TestFOneWay.test_known_exact(self)
scipy.stats.tests.test_stats.TestFOneWay.test_large_integer_array(self)
scipy.stats.tests.test_stats.TestFOneWay.test_length0_1d_error(self)
scipy.stats.tests.test_stats.TestFOneWay.test_length0_2d_error(self)
scipy.stats.tests.test_stats.TestFOneWay.test_nist(self)
scipy.stats.tests.test_stats.TestFOneWay.test_result_attributes(self)
scipy.stats.tests.test_stats.TestFOneWay.test_too_few_inputs(self,args)
scipy.stats.tests.test_stats.TestFOneWay.test_trivial(self)
scipy.stats.tests.test_stats.TestFindRepeats
scipy.stats.tests.test_stats.TestFindRepeats.test_basic(self)
scipy.stats.tests.test_stats.TestFindRepeats.test_empty_result(self)
scipy.stats.tests.test_stats.TestFisherExact
scipy.stats.tests.test_stats.TestFisherExact.test_basic(self)
scipy.stats.tests.test_stats.TestFisherExact.test_gh3014(self)
scipy.stats.tests.test_stats.TestFisherExact.test_gh4130(self)
scipy.stats.tests.test_stats.TestFisherExact.test_gh9231(self)
scipy.stats.tests.test_stats.TestFisherExact.test_large_numbers(self)
scipy.stats.tests.test_stats.TestFisherExact.test_less_greater(self)
scipy.stats.tests.test_stats.TestFisherExact.test_precise(self)
scipy.stats.tests.test_stats.TestFisherExact.test_raises(self)
scipy.stats.tests.test_stats.TestFisherExact.test_result(self,alternative)
scipy.stats.tests.test_stats.TestFisherExact.test_row_or_col_zero(self)
scipy.stats.tests.test_stats.TestGeoMean
scipy.stats.tests.test_stats.TestGeoMean.test_0(self)
scipy.stats.tests.test_stats.TestGeoMean.test_1d_array(self)
scipy.stats.tests.test_stats.TestGeoMean.test_1d_array0(self)
scipy.stats.tests.test_stats.TestGeoMean.test_1d_list(self)
scipy.stats.tests.test_stats.TestGeoMean.test_1d_list0(self)
scipy.stats.tests.test_stats.TestGeoMean.test_1d_list_neg(self)
scipy.stats.tests.test_stats.TestGeoMean.test_2d_array(self)
scipy.stats.tests.test_stats.TestGeoMean.test_2d_axis0(self)
scipy.stats.tests.test_stats.TestGeoMean.test_2d_axis1(self)
scipy.stats.tests.test_stats.TestGeoMean.test_2d_list(self)
scipy.stats.tests.test_stats.TestGeoMean.test_large_values(self)
scipy.stats.tests.test_stats.TestGeoMean.test_weights_1d_array(self)
scipy.stats.tests.test_stats.TestGeoMean.test_weights_1d_list(self)
scipy.stats.tests.test_stats.TestGeoMean.test_weights_masked_1d_array(self)
scipy.stats.tests.test_stats.TestGeometricStandardDeviation
scipy.stats.tests.test_stats.TestGeometricStandardDeviation.test_1d_array(self)
scipy.stats.tests.test_stats.TestGeometricStandardDeviation.test_1d_numeric_array_like_input(self)
scipy.stats.tests.test_stats.TestGeometricStandardDeviation.test_3d_array(self)
scipy.stats.tests.test_stats.TestGeometricStandardDeviation.test_3d_array_axis_0(self)
scipy.stats.tests.test_stats.TestGeometricStandardDeviation.test_3d_array_axis_1(self)
scipy.stats.tests.test_stats.TestGeometricStandardDeviation.test_3d_array_axis_2(self)
scipy.stats.tests.test_stats.TestGeometricStandardDeviation.test_3d_array_axis_type_tuple(self)
scipy.stats.tests.test_stats.TestGeometricStandardDeviation.test_ddof_equal_to_number_of_observations(self)
scipy.stats.tests.test_stats.TestGeometricStandardDeviation.test_masked_3d_array(self)
scipy.stats.tests.test_stats.TestGeometricStandardDeviation.test_propagates_nan_values(self)
scipy.stats.tests.test_stats.TestGeometricStandardDeviation.test_raises_value_error_inf_entry(self)
scipy.stats.tests.test_stats.TestGeometricStandardDeviation.test_raises_value_error_negative_entry(self)
scipy.stats.tests.test_stats.TestGeometricStandardDeviation.test_raises_value_error_non_array_like_input(self)
scipy.stats.tests.test_stats.TestGeometricStandardDeviation.test_raises_value_error_zero_entry(self)
scipy.stats.tests.test_stats.TestHarMean
scipy.stats.tests.test_stats.TestHarMean.test_0(self)
scipy.stats.tests.test_stats.TestHarMean.test_1d_array(self)
scipy.stats.tests.test_stats.TestHarMean.test_1d_array_with_negative_value(self)
scipy.stats.tests.test_stats.TestHarMean.test_1d_array_with_zero(self)
scipy.stats.tests.test_stats.TestHarMean.test_1d_list(self)
scipy.stats.tests.test_stats.TestHarMean.test_2d_array(self)
scipy.stats.tests.test_stats.TestHarMean.test_2d_axis0(self)
scipy.stats.tests.test_stats.TestHarMean.test_2d_axis0_with_zero(self)
scipy.stats.tests.test_stats.TestHarMean.test_2d_axis1(self)
scipy.stats.tests.test_stats.TestHarMean.test_2d_axis1_with_zero(self)
scipy.stats.tests.test_stats.TestHarMean.test_2d_list(self)
scipy.stats.tests.test_stats.TestHarMean.test_weights_1d_list(self)
scipy.stats.tests.test_stats.TestHarMean.test_weights_2d_array_axis0(self)
scipy.stats.tests.test_stats.TestHarMean.test_weights_2d_array_axis1(self)
scipy.stats.tests.test_stats.TestHarMean.test_weights_masked_1d_array(self)
scipy.stats.tests.test_stats.TestIQR
scipy.stats.tests.test_stats.TestIQR.test_2D(self)
scipy.stats.tests.test_stats.TestIQR.test_api(self)
scipy.stats.tests.test_stats.TestIQR.test_axis(self)
scipy.stats.tests.test_stats.TestIQR.test_basic(self)
scipy.stats.tests.test_stats.TestIQR.test_constant(self)
scipy.stats.tests.test_stats.TestIQR.test_empty(self)
scipy.stats.tests.test_stats.TestIQR.test_interpolation(self)
scipy.stats.tests.test_stats.TestIQR.test_keepdims(self)
scipy.stats.tests.test_stats.TestIQR.test_nanpolicy(self)
scipy.stats.tests.test_stats.TestIQR.test_rng(self)
scipy.stats.tests.test_stats.TestIQR.test_scalarlike(self)
scipy.stats.tests.test_stats.TestIQR.test_scale(self)
scipy.stats.tests.test_stats.TestJarqueBera
scipy.stats.tests.test_stats.TestJarqueBera.test_axis(self)
scipy.stats.tests.test_stats.TestJarqueBera.test_jarque_bera_array_like(self)
scipy.stats.tests.test_stats.TestJarqueBera.test_jarque_bera_size(self)
scipy.stats.tests.test_stats.TestJarqueBera.test_jarque_bera_stats(self)
scipy.stats.tests.test_stats.TestKSOneSample
scipy.stats.tests.test_stats.TestKSOneSample._testOne(self,x,alternative,expected_statistic,expected_prob,mode='auto',decimal=14)
scipy.stats.tests.test_stats.TestKSOneSample.test_agree_with_r(self)
scipy.stats.tests.test_stats.TestKSOneSample.test_known_examples(self)
scipy.stats.tests.test_stats.TestKSOneSample.test_ks1samp_allpaths(self)
scipy.stats.tests.test_stats.TestKSOneSample.test_location_sign(self,ksfunc,alternative,x6val,ref_location,ref_sign)
scipy.stats.tests.test_stats.TestKSOneSample.test_namedtuple_attributes(self)
scipy.stats.tests.test_stats.TestKSTest
scipy.stats.tests.test_stats.TestKSTest._testOne(self,x,alternative,expected_statistic,expected_prob,mode='auto',decimal=14)
scipy.stats.tests.test_stats.TestKSTest._test_kstest_and_ks1samp(self,x,alternative,mode='auto',decimal=14)
scipy.stats.tests.test_stats.TestKSTest.test_agree_with_ks_1samp(self)
scipy.stats.tests.test_stats.TestKSTest.test_namedtuple_attributes(self)
scipy.stats.tests.test_stats.TestKSTwoSamples
scipy.stats.tests.test_stats.TestKSTwoSamples._testOne(self,x1,x2,alternative,expected_statistic,expected_prob,mode='auto')
scipy.stats.tests.test_stats.TestKSTwoSamples.test100_100(self)
scipy.stats.tests.test_stats.TestKSTwoSamples.test100_110(self)
scipy.stats.tests.test_stats.TestKSTwoSamples.testEqualSizes(self)
scipy.stats.tests.test_stats.TestKSTwoSamples.testLarge(self)
scipy.stats.tests.test_stats.TestKSTwoSamples.testLargeBoth(self)
scipy.stats.tests.test_stats.TestKSTwoSamples.testMediumBoth(self)
scipy.stats.tests.test_stats.TestKSTwoSamples.testMiddlingBoth(self)
scipy.stats.tests.test_stats.TestKSTwoSamples.testNamedAttributes(self)
scipy.stats.tests.test_stats.TestKSTwoSamples.testRepeatedValues(self)
scipy.stats.tests.test_stats.TestKSTwoSamples.testSmall(self)
scipy.stats.tests.test_stats.TestKSTwoSamples.testTwoVsFour(self)
scipy.stats.tests.test_stats.TestKSTwoSamples.testTwoVsThree(self)
scipy.stats.tests.test_stats.TestKSTwoSamples.test_argument_checking(self)
scipy.stats.tests.test_stats.TestKSTwoSamples.test_gh11184(self)
scipy.stats.tests.test_stats.TestKSTwoSamples.test_gh11184_bigger(self)
scipy.stats.tests.test_stats.TestKSTwoSamples.test_gh12218(self)
scipy.stats.tests.test_stats.TestKSTwoSamples.test_gh12999(self)
scipy.stats.tests.test_stats.TestKSTwoSamples.test_location_sign(self,ksfunc,alternative,x6val,ref_location,ref_sign)
scipy.stats.tests.test_stats.TestKSTwoSamples.test_some_code_paths(self)
scipy.stats.tests.test_stats.TestKSTwoSamples.test_warnings_gh_14019(self)
scipy.stats.tests.test_stats.TestKendallTauAlternative
scipy.stats.tests.test_stats.TestKendallTauAlternative.exact_test(self,x,y,alternative,rev,stat_expected,p_expected)
scipy.stats.tests.test_stats.TestKendallTauAlternative.test_against_R_c0(self,alternative,p_expected,rev)
scipy.stats.tests.test_stats.TestKendallTauAlternative.test_against_R_c1(self,alternative,p_expected,rev)
scipy.stats.tests.test_stats.TestKendallTauAlternative.test_against_R_lt_171(self,alternative,p_expected,rev)
scipy.stats.tests.test_stats.TestKendallTauAlternative.test_against_R_lt_171b(self,alternative,p_expected,rev)
scipy.stats.tests.test_stats.TestKendallTauAlternative.test_against_R_lt_171c(self,alternative,p_expected,rev)
scipy.stats.tests.test_stats.TestKendallTauAlternative.test_against_R_n1(self,alternative,p_expected,rev)
scipy.stats.tests.test_stats.TestKendallTauAlternative.test_against_R_n2(self,alternative,p_expected,rev)
scipy.stats.tests.test_stats.TestKendallTauAlternative.test_against_R_no_correlation(self,alternative,p_expected,rev)
scipy.stats.tests.test_stats.TestKendallTauAlternative.test_against_R_no_correlationb(self,alternative,p_expected,rev)
scipy.stats.tests.test_stats.TestKendallTauAlternative.test_gt_171(self,alternative,rev)
scipy.stats.tests.test_stats.TestKendallTauAlternative.test_kendalltau_alternative_asymptotic(self)
scipy.stats.tests.test_stats.TestKendallTauAlternative.test_nan_policy(self,method,alternative)
scipy.stats.tests.test_stats.TestKruskal
scipy.stats.tests.test_stats.TestKruskal.test_another_tie(self)
scipy.stats.tests.test_stats.TestKruskal.test_basic(self)
scipy.stats.tests.test_stats.TestKruskal.test_empty(self)
scipy.stats.tests.test_stats.TestKruskal.test_kruskal_result_attributes(self)
scipy.stats.tests.test_stats.TestKruskal.test_large_no_samples(self)
scipy.stats.tests.test_stats.TestKruskal.test_nan_policy(self)
scipy.stats.tests.test_stats.TestKruskal.test_simple(self)
scipy.stats.tests.test_stats.TestKruskal.test_simple_tie(self)
scipy.stats.tests.test_stats.TestKruskal.test_three_groups(self)
scipy.stats.tests.test_stats.TestMGCErrorWarnings
scipy.stats.tests.test_stats.TestMGCErrorWarnings.test_error_infty(self)
scipy.stats.tests.test_stats.TestMGCErrorWarnings.test_error_lowsamples(self)
scipy.stats.tests.test_stats.TestMGCErrorWarnings.test_error_nans(self)
scipy.stats.tests.test_stats.TestMGCErrorWarnings.test_error_notndarray(self)
scipy.stats.tests.test_stats.TestMGCErrorWarnings.test_error_reps(self,reps)
scipy.stats.tests.test_stats.TestMGCErrorWarnings.test_error_shape(self)
scipy.stats.tests.test_stats.TestMGCErrorWarnings.test_error_wrongdisttype(self)
scipy.stats.tests.test_stats.TestMGCErrorWarnings.test_warns_reps(self)
scipy.stats.tests.test_stats.TestMGCStat
scipy.stats.tests.test_stats.TestMGCStat._simulations(self,samps=100,dims=1,sim_type='')
scipy.stats.tests.test_stats.TestMGCStat.test_alias(self)
scipy.stats.tests.test_stats.TestMGCStat.test_dist_perm(self)
scipy.stats.tests.test_stats.TestMGCStat.test_fived(self,sim_type,obs_stat,obs_pvalue)
scipy.stats.tests.test_stats.TestMGCStat.test_oned(self,sim_type,obs_stat,obs_pvalue)
scipy.stats.tests.test_stats.TestMGCStat.test_pvalue_literature(self)
scipy.stats.tests.test_stats.TestMGCStat.test_random_state(self)
scipy.stats.tests.test_stats.TestMGCStat.test_twosamp(self)
scipy.stats.tests.test_stats.TestMGCStat.test_workers(self)
scipy.stats.tests.test_stats.TestMannWhitneyU
scipy.stats.tests.test_stats.TestMannWhitneyU.test_mannwhitneyu_no_correct_one_sided(self)
scipy.stats.tests.test_stats.TestMannWhitneyU.test_mannwhitneyu_no_correct_two_sided(self)
scipy.stats.tests.test_stats.TestMannWhitneyU.test_mannwhitneyu_one_sided(self)
scipy.stats.tests.test_stats.TestMannWhitneyU.test_mannwhitneyu_ones(self)
scipy.stats.tests.test_stats.TestMannWhitneyU.test_mannwhitneyu_result_attributes(self)
scipy.stats.tests.test_stats.TestMannWhitneyU.test_mannwhitneyu_two_sided(self)
scipy.stats.tests.test_stats.TestMedianAbsDeviation
scipy.stats.tests.test_stats.TestMedianAbsDeviation.setup_class(self)
scipy.stats.tests.test_stats.TestMedianAbsDeviation.test_axis_and_nan(self)
scipy.stats.tests.test_stats.TestMedianAbsDeviation.test_center_mean_with_nan(self,axis,expected)
scipy.stats.tests.test_stats.TestMedianAbsDeviation.test_center_not_callable(self)
scipy.stats.tests.test_stats.TestMedianAbsDeviation.test_mad_nan_omit(self)
scipy.stats.tests.test_stats.TestMedianAbsDeviation.test_median_abs_deviation(self)
scipy.stats.tests.test_stats.TestMedianAbsDeviation.test_nan_policy_omit_with_inf(sef)
scipy.stats.tests.test_stats.TestMedianAbsDeviation.test_nan_policy_with_axis(self,nan_policy,expected)
scipy.stats.tests.test_stats.TestMedianAbsDeviation.test_size_zero_with_axis(self,axis)
scipy.stats.tests.test_stats.TestMode
scipy.stats.tests.test_stats.TestMode.test_axes(self)
scipy.stats.tests.test_stats.TestMode.test_basic(self)
scipy.stats.tests.test_stats.TestMode.test_empty(self)
scipy.stats.tests.test_stats.TestMode.test_gh16952(self)
scipy.stats.tests.test_stats.TestMode.test_keepdims(self)
scipy.stats.tests.test_stats.TestMode.test_mixed_objects(self)
scipy.stats.tests.test_stats.TestMode.test_mode_nan(self)
scipy.stats.tests.test_stats.TestMode.test_mode_result_attributes(self)
scipy.stats.tests.test_stats.TestMode.test_mode_shape_gh_9955(self,axis,dtype)
scipy.stats.tests.test_stats.TestMode.test_nan_policy_propagate_gh_9815(self)
scipy.stats.tests.test_stats.TestMode.test_negative_axes_gh_15375(self,axis)
scipy.stats.tests.test_stats.TestMode.test_obj_arrays_ndim(self)
scipy.stats.tests.test_stats.TestMode.test_objects(self)
scipy.stats.tests.test_stats.TestMode.test_scalar(self)
scipy.stats.tests.test_stats.TestMode.test_smallest_equal(self,data)
scipy.stats.tests.test_stats.TestMode.test_strings(self)
scipy.stats.tests.test_stats.TestMoments
scipy.stats.tests.test_stats.TestMoments._assert_equal(self,actual,expect,*,shape=None,dtype=None)
scipy.stats.tests.test_stats.TestMoments.test_constant_moments(self,dtype,expect,moment)
scipy.stats.tests.test_stats.TestMoments.test_empty_1d(self)
scipy.stats.tests.test_stats.TestMoments.test_kurtosis(self)
scipy.stats.tests.test_stats.TestMoments.test_kurtosis_array_scalar(self)
scipy.stats.tests.test_stats.TestMoments.test_kurtosis_constant_value(self)
scipy.stats.tests.test_stats.TestMoments.test_kurtosis_propagate_nan(self)
scipy.stats.tests.test_stats.TestMoments.test_moment(self)
scipy.stats.tests.test_stats.TestMoments.test_moment_accuracy(self)
scipy.stats.tests.test_stats.TestMoments.test_moment_empty_moment(self)
scipy.stats.tests.test_stats.TestMoments.test_moment_propagate_nan(self)
scipy.stats.tests.test_stats.TestMoments.test_precision_loss_gh15554(self)
scipy.stats.tests.test_stats.TestMoments.test_skew_constant_value(self)
scipy.stats.tests.test_stats.TestMoments.test_skew_propagate_nan(self)
scipy.stats.tests.test_stats.TestMoments.test_skewness(self)
scipy.stats.tests.test_stats.TestMoments.test_skewness_scalar(self)
scipy.stats.tests.test_stats.TestPageTrendTest
scipy.stats.tests.test_stats.TestPageTrendTest.test_Ames_assay(self)
scipy.stats.tests.test_stats.TestPageTrendTest.test_accuracy(self,L,p,ranked,method,data)
scipy.stats.tests.test_stats.TestPageTrendTest.test_accuracy2(self,L,p,ranked,method,data)
scipy.stats.tests.test_stats.TestPageTrendTest.test_input_validation(self)
scipy.stats.tests.test_stats.TestPageTrendTest.test_options(self)
scipy.stats.tests.test_stats.TestPercentileOfScore
scipy.stats.tests.test_stats.TestPercentileOfScore.f(self,*args,**kwargs)
scipy.stats.tests.test_stats.TestPercentileOfScore.test_boundaries(self,kind,result)
scipy.stats.tests.test_stats.TestPercentileOfScore.test_inf(self,kind,result)
scipy.stats.tests.test_stats.TestPercentileOfScore.test_large_numbers(self,kind,result)
scipy.stats.tests.test_stats.TestPercentileOfScore.test_large_numbers_missing(self,kind,result)
scipy.stats.tests.test_stats.TestPercentileOfScore.test_large_numbers_multiple3(self,kind,result)
scipy.stats.tests.test_stats.TestPercentileOfScore.test_missing(self,kind,result)
scipy.stats.tests.test_stats.TestPercentileOfScore.test_multiple2(self,kind,result)
scipy.stats.tests.test_stats.TestPercentileOfScore.test_multiple3(self,kind,result)
scipy.stats.tests.test_stats.TestPercentileOfScore.test_nans_fail(self,policy,a,score,message)
scipy.stats.tests.test_stats.TestPercentileOfScore.test_nans_ok(self,policy,a,score,result)
scipy.stats.tests.test_stats.TestPercentileOfScore.test_nd(self,shape)
scipy.stats.tests.test_stats.TestPercentileOfScore.test_unique(self,kind,result)
scipy.stats.tests.test_stats.TestPowMean
scipy.stats.tests.test_stats.TestPowMean.pmean_reference(a,p)
scipy.stats.tests.test_stats.TestPowMean.test_1d_array(self)
scipy.stats.tests.test_stats.TestPowMean.test_1d_array_with_negative_value(self)
scipy.stats.tests.test_stats.TestPowMean.test_1d_array_with_zero(self)
scipy.stats.tests.test_stats.TestPowMean.test_1d_list(self)
scipy.stats.tests.test_stats.TestPowMean.test_2d_axisnone(self,a,p)
scipy.stats.tests.test_stats.TestPowMean.test_2d_list_axis0(self,a,p)
scipy.stats.tests.test_stats.TestPowMean.test_2d_list_axis1(self,a,p)
scipy.stats.tests.test_stats.TestPowMean.test_bad_exponent(self)
scipy.stats.tests.test_stats.TestPowMean.test_weights_1d_list(self)
scipy.stats.tests.test_stats.TestPowMean.test_weights_2d_array(self,axis,fun_name,p)
scipy.stats.tests.test_stats.TestPowMean.test_weights_masked_1d_array(self)
scipy.stats.tests.test_stats.TestPowMean.wpmean_reference(a,p,weights)
scipy.stats.tests.test_stats.TestPowerDivergence
scipy.stats.tests.test_stats.TestPowerDivergence.check_power_divergence(self,f_obs,f_exp,ddof,axis,lambda_,expected_stat)
scipy.stats.tests.test_stats.TestPowerDivergence.test_axis(self)
scipy.stats.tests.test_stats.TestPowerDivergence.test_basic(self)
scipy.stats.tests.test_stats.TestPowerDivergence.test_basic_masked(self)
scipy.stats.tests.test_stats.TestPowerDivergence.test_ddof_broadcasting(self)
scipy.stats.tests.test_stats.TestPowerDivergence.test_empty_cases(self)
scipy.stats.tests.test_stats.TestPowerDivergence.test_power_divergence_gh_12282(self)
scipy.stats.tests.test_stats.TestPowerDivergence.test_power_divergence_result_attributes(self)
scipy.stats.tests.test_stats.TestRankSums
scipy.stats.tests.test_stats.TestRankSums.test_input_validation(self)
scipy.stats.tests.test_stats.TestRankSums.test_ranksums_named_results(self)
scipy.stats.tests.test_stats.TestRankSums.test_ranksums_result_attributes(self,alternative)
scipy.stats.tests.test_stats.TestRatioUniforms
scipy.stats.tests.test_stats.TestRatioUniforms.test_exceptions(self)
scipy.stats.tests.test_stats.TestRatioUniforms.test_random_state(self)
scipy.stats.tests.test_stats.TestRatioUniforms.test_rv_generation(self)
scipy.stats.tests.test_stats.TestRatioUniforms.test_shape(self)
scipy.stats.tests.test_stats.TestRegression
scipy.stats.tests.test_stats.TestRegression.test_compare_to_polyfit(self)
scipy.stats.tests.test_stats.TestRegression.test_empty_input(self)
scipy.stats.tests.test_stats.TestRegression.test_identical_x(self)
scipy.stats.tests.test_stats.TestRegression.test_linregress(self)
scipy.stats.tests.test_stats.TestRegression.test_linregressBIGX(self)
scipy.stats.tests.test_stats.TestRegression.test_linregress_result_attributes(self)
scipy.stats.tests.test_stats.TestRegression.test_nan_input(self)
scipy.stats.tests.test_stats.TestRegression.test_nist_norris(self)
scipy.stats.tests.test_stats.TestRegression.test_regressXX(self)
scipy.stats.tests.test_stats.TestRegression.test_regressZEROX(self)
scipy.stats.tests.test_stats.TestRegression.test_regress_against_R(self)
scipy.stats.tests.test_stats.TestRegression.test_regress_alternative(self)
scipy.stats.tests.test_stats.TestRegression.test_regress_shape_error(self)
scipy.stats.tests.test_stats.TestRegression.test_regress_simple(self)
scipy.stats.tests.test_stats.TestRegression.test_regress_simple_negative_cor(self)
scipy.stats.tests.test_stats.TestRegression.test_regress_simple_onearg_cols(self)
scipy.stats.tests.test_stats.TestRegression.test_regress_simple_onearg_rows(self)
scipy.stats.tests.test_stats.TestRegression.test_regress_two_inputs(self)
scipy.stats.tests.test_stats.TestRegression.test_regress_two_inputs_horizontal_line(self)
scipy.stats.tests.test_stats.TestSEM
scipy.stats.tests.test_stats.TestSEM.test_sem(self)
scipy.stats.tests.test_stats.TestScoreatpercentile
scipy.stats.tests.test_stats.TestScoreatpercentile.setup_method(self)
scipy.stats.tests.test_stats.TestScoreatpercentile.test_axis(self)
scipy.stats.tests.test_stats.TestScoreatpercentile.test_basic(self)
scipy.stats.tests.test_stats.TestScoreatpercentile.test_empty(self)
scipy.stats.tests.test_stats.TestScoreatpercentile.test_exception(self)
scipy.stats.tests.test_stats.TestScoreatpercentile.test_fraction(self)
scipy.stats.tests.test_stats.TestScoreatpercentile.test_lower_higher(self)
scipy.stats.tests.test_stats.TestScoreatpercentile.test_sequence_per(self)
scipy.stats.tests.test_stats.TestSigmaClip
scipy.stats.tests.test_stats.TestSigmaClip.test_sigmaclip1(self)
scipy.stats.tests.test_stats.TestSigmaClip.test_sigmaclip2(self)
scipy.stats.tests.test_stats.TestSigmaClip.test_sigmaclip3(self)
scipy.stats.tests.test_stats.TestSigmaClip.test_sigmaclip_result_attributes(self)
scipy.stats.tests.test_stats.TestSigmaClip.test_std_zero(self)
scipy.stats.tests.test_stats.TestStudentTest
scipy.stats.tests.test_stats.TestStudentTest.test_1samp_alternative(self)
scipy.stats.tests.test_stats.TestStudentTest.test_1samp_ci_1d(self,alternative)
scipy.stats.tests.test_stats.TestStudentTest.test_1samp_ci_iv(self)
scipy.stats.tests.test_stats.TestStudentTest.test_onesample(self)
scipy.stats.tests.test_stats.TestTrim
scipy.stats.tests.test_stats.TestTrim.test_trim1(self)
scipy.stats.tests.test_stats.TestTrim.test_trim_mean(self)
scipy.stats.tests.test_stats.TestTrim.test_trimboth(self)
scipy.stats.tests.test_stats.TestTrimmedStats
scipy.stats.tests.test_stats.TestTrimmedStats.test_tmax(self)
scipy.stats.tests.test_stats.TestTrimmedStats.test_tmean(self)
scipy.stats.tests.test_stats.TestTrimmedStats.test_tmin(self)
scipy.stats.tests.test_stats.TestTrimmedStats.test_tsem(self)
scipy.stats.tests.test_stats.TestTrimmedStats.test_tstd(self)
scipy.stats.tests.test_stats.TestTrimmedStats.test_tvar(self)
scipy.stats.tests.test_stats.TestWassersteinDistance
scipy.stats.tests.test_stats.TestWassersteinDistance.test_collapse(self)
scipy.stats.tests.test_stats.TestWassersteinDistance.test_combine_weights(self)
scipy.stats.tests.test_stats.TestWassersteinDistance.test_inf_values(self)
scipy.stats.tests.test_stats.TestWassersteinDistance.test_same_distribution(self)
scipy.stats.tests.test_stats.TestWassersteinDistance.test_shift(self)
scipy.stats.tests.test_stats.TestWassersteinDistance.test_simple(self)
scipy.stats.tests.test_stats.TestWassersteinDistance.test_zero_weight(self)
scipy.stats.tests.test_stats.TestZmapZscore
scipy.stats.tests.test_stats.TestZmapZscore.test_gzscore_masked_array(self)
scipy.stats.tests.test_stats.TestZmapZscore.test_gzscore_normal_array(self)
scipy.stats.tests.test_stats.TestZmapZscore.test_zmap(self,x,y)
scipy.stats.tests.test_stats.TestZmapZscore.test_zmap_axis(self)
scipy.stats.tests.test_stats.TestZmapZscore.test_zmap_ddof(self)
scipy.stats.tests.test_stats.TestZmapZscore.test_zmap_nan_policy_omit(self,ddof)
scipy.stats.tests.test_stats.TestZmapZscore.test_zmap_nan_policy_omit_with_axis(self,ddof)
scipy.stats.tests.test_stats.TestZmapZscore.test_zmap_nan_policy_raise(self)
scipy.stats.tests.test_stats.TestZmapZscore.test_zscore(self)
scipy.stats.tests.test_stats.TestZmapZscore.test_zscore_2d_all_nan(self)
scipy.stats.tests.test_stats.TestZmapZscore.test_zscore_2d_all_nan_row(self)
scipy.stats.tests.test_stats.TestZmapZscore.test_zscore_axis(self)
scipy.stats.tests.test_stats.TestZmapZscore.test_zscore_constant_input_1d(self)
scipy.stats.tests.test_stats.TestZmapZscore.test_zscore_constant_input_2d(self)
scipy.stats.tests.test_stats.TestZmapZscore.test_zscore_constant_input_2d_nan_policy_omit(self)
scipy.stats.tests.test_stats.TestZmapZscore.test_zscore_ddof(self)
scipy.stats.tests.test_stats.TestZmapZscore.test_zscore_empty_input(self,x)
scipy.stats.tests.test_stats.TestZmapZscore.test_zscore_nan_omit(self)
scipy.stats.tests.test_stats.TestZmapZscore.test_zscore_nan_omit_with_ddof(self)
scipy.stats.tests.test_stats.TestZmapZscore.test_zscore_nan_propagate(self)
scipy.stats.tests.test_stats.TestZmapZscore.test_zscore_nan_raise(self)
scipy.stats.tests.test_stats.Test_ttest_ind_common
scipy.stats.tests.test_stats.Test_ttest_ind_common.test_nans_on_axis(self,kwds,axis)
scipy.stats.tests.test_stats.Test_ttest_ind_common.test_ttest_many_dims(self,kwds,equal_var)
scipy.stats.tests.test_stats.Test_ttest_ind_permutations
scipy.stats.tests.test_stats.Test_ttest_ind_permutations.test_ttest_ind_exact_alternative(self)
scipy.stats.tests.test_stats.Test_ttest_ind_permutations.test_ttest_ind_exact_distribution(self)
scipy.stats.tests.test_stats.Test_ttest_ind_permutations.test_ttest_ind_exact_selection(self)
scipy.stats.tests.test_stats.Test_ttest_ind_permutations.test_ttest_ind_permutation_check_inputs(self)
scipy.stats.tests.test_stats.Test_ttest_ind_permutations.test_ttest_ind_permutation_check_p_values(self)
scipy.stats.tests.test_stats.Test_ttest_ind_permutations.test_ttest_ind_permutation_nanpolicy(self)
scipy.stats.tests.test_stats.Test_ttest_ind_permutations.test_ttest_ind_permutations(self,a,b,update,p_d)
scipy.stats.tests.test_stats.Test_ttest_ind_permutations.test_ttest_ind_randperm_alternative(self)
scipy.stats.tests.test_stats.Test_ttest_ind_permutations.test_ttest_ind_randperm_alternative2(self)
scipy.stats.tests.test_stats.Test_ttest_trim
scipy.stats.tests.test_stats.Test_ttest_trim.test_alternatives(self,alt,pr,tr)
scipy.stats.tests.test_stats.Test_ttest_trim.test_compare_SAS(self)
scipy.stats.tests.test_stats.Test_ttest_trim.test_equal_var(self)
scipy.stats.tests.test_stats.Test_ttest_trim.test_errors_unsupported(self)
scipy.stats.tests.test_stats.Test_ttest_trim.test_trim_bounds_error(self,trim)
scipy.stats.tests.test_stats.Test_ttest_trim.test_ttest_compare_r(self,a,b,pr,tr,trim)
scipy.stats.tests.test_stats._check_warnings(warn_list,expected_type,expected_len)
scipy.stats.tests.test_stats._desc_stats(x1,x2,axis=0)
scipy.stats.tests.test_stats.check_equal_gmean(array_like,desired,axis=None,dtype=None,rtol=1e-07,weights=None)
scipy.stats.tests.test_stats.check_equal_hmean(array_like,desired,axis=None,dtype=None,rtol=1e-07,weights=None)
scipy.stats.tests.test_stats.check_equal_pmean(array_like,exp,desired,axis=None,dtype=None,rtol=1e-07,weights=None)
scipy.stats.tests.test_stats.test__broadcast_concatenate()
scipy.stats.tests.test_stats.test_binom_test_deprecation(alternative)
scipy.stats.tests.test_stats.test_binomtest()
scipy.stats.tests.test_stats.test_binomtest2()
scipy.stats.tests.test_stats.test_binomtest3()
scipy.stats.tests.test_stats.test_chiquare_data_types(n,dtype)
scipy.stats.tests.test_stats.test_chisquare_masked_arrays()
scipy.stats.tests.test_stats.test_cumfreq()
scipy.stats.tests.test_stats.test_friedmanchisquare()
scipy.stats.tests.test_stats.test_gh5686()
scipy.stats.tests.test_stats.test_gh_chisquare_12282()
scipy.stats.tests.test_stats.test_kendall_tau_large()
scipy.stats.tests.test_stats.test_kendalltau()
scipy.stats.tests.test_stats.test_kendalltau_dep_initial_lexsort()
scipy.stats.tests.test_stats.test_kendalltau_nan_2nd_arg()
scipy.stats.tests.test_stats.test_kendalltau_vs_mstats_basic()
scipy.stats.tests.test_stats.test_kurtosistest_too_few_samples()
scipy.stats.tests.test_stats.test_mode_futurewarning()
scipy.stats.tests.test_stats.test_normalitytests()
scipy.stats.tests.test_stats.test_obrientransform()
scipy.stats.tests.test_stats.test_pointbiserial()
scipy.stats.tests.test_stats.test_power_divergence_against_cressie_read_data()
scipy.stats.tests.test_stats.test_relfreq()
scipy.stats.tests.test_stats.test_rename_mode_method(fun,args)
scipy.stats.tests.test_stats.test_segfault_issue_9710()
scipy.stats.tests.test_stats.test_skewtest_too_few_samples()
scipy.stats.tests.test_stats.test_theilslopes()
scipy.stats.tests.test_stats.test_ttest_1samp_new()
scipy.stats.tests.test_stats.test_ttest_1samp_popmean_array()
scipy.stats.tests.test_stats.test_ttest_ci_iv(test_fun,args)
scipy.stats.tests.test_stats.test_ttest_ind()
scipy.stats.tests.test_stats.test_ttest_ind_axis_size_zero(b,expected_shape)
scipy.stats.tests.test_stats.test_ttest_ind_empty_1d_returns_nan()
scipy.stats.tests.test_stats.test_ttest_ind_from_stats_inputs_zero()
scipy.stats.tests.test_stats.test_ttest_ind_nan_2nd_arg()
scipy.stats.tests.test_stats.test_ttest_ind_nonaxis_size_zero()
scipy.stats.tests.test_stats.test_ttest_ind_nonaxis_size_zero_different_lengths()
scipy.stats.tests.test_stats.test_ttest_ind_with_uneq_var()
scipy.stats.tests.test_stats.test_ttest_rel()
scipy.stats.tests.test_stats.test_ttest_rel_axis_size_zero(b,expected_shape)
scipy.stats.tests.test_stats.test_ttest_rel_ci_1d(alternative)
scipy.stats.tests.test_stats.test_ttest_rel_empty_1d_returns_nan()
scipy.stats.tests.test_stats.test_ttest_rel_nan_2nd_arg()
scipy.stats.tests.test_stats.test_ttest_rel_nonaxis_size_zero()
scipy.stats.tests.test_stats.test_weightedtau()
scipy.stats.tests.test_stats.test_weightedtau_vs_quadratic()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_contingency.py----------------------------------------
A:scipy.stats.tests.test_contingency.a->association(observed=obs1, method=stat)
A:scipy.stats.tests.test_contingency.m->margins(a)
A:scipy.stats.tests.test_contingency.(m0, m1)->margins(a)
A:scipy.stats.tests.test_contingency.expected0->numpy.array([[[66]], [[210]]])
A:scipy.stats.tests.test_contingency.expected1->numpy.array([[[60], [92], [124]]])
A:scipy.stats.tests.test_contingency.(m0, m1, m2)->margins(a)
A:scipy.stats.tests.test_contingency.expected2->numpy.array([[[60, 66, 72, 78]]])
A:scipy.stats.tests.test_contingency.observed->numpy.array([[1573, 3], [4, 0]])
A:scipy.stats.tests.test_contingency.e->expected_freq(observed)
A:scipy.stats.tests.test_contingency.correct->numpy.array([[12.0, 12.0, 16.0], [18.0, 18.0, 24.0]])
A:scipy.stats.tests.test_contingency.obs->numpy.array([[1, 2], [1, 2]])
A:scipy.stats.tests.test_contingency.(chi2, p, dof, expected)->chi2_contingency(obs)
A:scipy.stats.tests.test_contingency.c->numpy.array([[10, 12, 10], [12, 10, 10]])
A:scipy.stats.tests.test_contingency.(g, p, dof, e)->chi2_contingency(c, lambda_='log-likelihood')
A:scipy.stats.tests.test_contingency.res->chi2_contingency(obs, correction=correction)
A:scipy.stats.tests.test_contingency.obs1->numpy.array([[12, 13, 14, 15, 16], [17, 16, 18, 19, 11], [9, 15, 14, 12, 11]])
scipy.stats.tests.test_contingency.test_assoc(stat,expected)
scipy.stats.tests.test_contingency.test_bad_association_args()
scipy.stats.tests.test_contingency.test_chi2_contingency_R()
scipy.stats.tests.test_contingency.test_chi2_contingency_bad_args()
scipy.stats.tests.test_contingency.test_chi2_contingency_g()
scipy.stats.tests.test_contingency.test_chi2_contingency_trivial()
scipy.stats.tests.test_contingency.test_chi2_contingency_yates_gh13875()
scipy.stats.tests.test_contingency.test_expected_freq()
scipy.stats.tests.test_contingency.test_margins()
scipy.stats.tests.test_contingency.test_result(correction)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_discrete_distns.py----------------------------------------
A:scipy.stats.tests.test_discrete_distns.p->betabinom(1, a, b).pmf(k)
A:scipy.stats.tests.test_discrete_distns.logpmf1->scipy.stats.hypergeom.logpmf(k, N, K, n)
A:scipy.stats.tests.test_discrete_distns.logpmf2->scipy.stats.hypergeom.logpmf(n - k, N, N - K, n)
A:scipy.stats.tests.test_discrete_distns.logpmf3->scipy.stats.hypergeom.logpmf(K - k, N, K, N - n)
A:scipy.stats.tests.test_discrete_distns.logpmf4->scipy.stats.hypergeom.logpmf(k, N, n, K)
A:scipy.stats.tests.test_discrete_distns.hypergeom_logpmf->scipy.stats.hypergeom.logpmf(k, N, K, n)
A:scipy.stats.tests.test_discrete_distns.bernoulli_logpmf->scipy.stats.bernoulli.logpmf(k, K / N)
A:scipy.stats.tests.test_discrete_distns.NHG->scipy.stats.nhypergeom.pmf(k, M, n, r)
A:scipy.stats.tests.test_discrete_distns.support->numpy.arange(n + 1)
A:scipy.stats.tests.test_discrete_distns.pmf->bernoulli(p).pmf(x)
A:scipy.stats.tests.test_discrete_distns.cdf->numpy.cumsum(pmf)
A:scipy.stats.tests.test_discrete_distns.x->numpy.linspace(0, 1, 11)
A:scipy.stats.tests.test_discrete_distns.y->scipy.stats.nhypergeom.ppf(p, 22, 7, 11)
A:scipy.stats.tests.test_discrete_distns.k->numpy.arange(n + 1)
A:scipy.stats.tests.test_discrete_distns.lam->numpy.log(2)
A:scipy.stats.tests.test_discrete_distns.c->scipy.stats.boltzmann.cdf(k, lam, N)
A:scipy.stats.tests.test_discrete_distns.expected->bernoulli(a / (a + b)).pmf(k)
A:scipy.stats.tests.test_discrete_distns.n->scipy.stats.randint.rvs(0, N, size=N.shape)
A:scipy.stats.tests.test_discrete_distns.ppf->scipy.stats.binom.ppf(x, n, p)
A:scipy.stats.tests.test_discrete_distns.mean->numpy.average(k, weights=pmf)
A:scipy.stats.tests.test_discrete_distns.var->numpy.average((k - mean) ** 2, weights=pmf)
A:scipy.stats.tests.test_discrete_distns.skew->numpy.average(((k - mean) / std) ** 3, weights=pmf)
A:scipy.stats.tests.test_discrete_distns.m1->numpy.random.randint(1, max_m, size=shape)
A:scipy.stats.tests.test_discrete_distns.m2->numpy.random.randint(1, max_m, size=shape)
A:scipy.stats.tests.test_discrete_distns.xl->numpy.maximum(0, n - m2)
A:scipy.stats.tests.test_discrete_distns.xu->numpy.minimum(n, m1)
A:scipy.stats.tests.test_discrete_distns.t1->special_binom(m1, x)
A:scipy.stats.tests.test_discrete_distns.t2->special_binom(m2, n - x)
A:scipy.stats.tests.test_discrete_distns.P0->P(0)
A:scipy.stats.tests.test_discrete_distns.P1->P(1)
A:scipy.stats.tests.test_discrete_distns.P2->P(2)
A:scipy.stats.tests.test_discrete_distns.(pmf, mean, var)->pmf_mean_var(x, N, m1, n, odds)
A:scipy.stats.tests.test_discrete_distns.(xl, xu)->support(N, m1, n, w)
A:scipy.stats.tests.test_discrete_distns.u->mean(N, m1, n, w)
A:scipy.stats.tests.test_discrete_distns.the_integral->quad(integrand, 0, 1, epsrel=1e-16, epsabs=1e-16)
A:scipy.stats.tests.test_discrete_distns.pmf0->pmf(x, N, m1, n, w)
A:scipy.stats.tests.test_discrete_distns.pmf1->scipy.stats.nchypergeom_wallenius.pmf(x, N, m1, n, w)
A:scipy.stats.tests.test_discrete_distns.sup->numpy.arange(21)
scipy.stats.tests.test_discrete_distns.TestNCH
scipy.stats.tests.test_discrete_distns.TestNCH.test_nch_hypergeom(self,dist_name)
scipy.stats.tests.test_discrete_distns.TestNCH.test_nchypergeom_fisher_naive(self)
scipy.stats.tests.test_discrete_distns.TestNCH.test_nchypergeom_wallenius_naive(self)
scipy.stats.tests.test_discrete_distns.TestNCH.test_rvs_shape(self,dist_name)
scipy.stats.tests.test_discrete_distns.TestNCH.test_wallenius_against_mpmath(self)
scipy.stats.tests.test_discrete_distns.TestZipfian
scipy.stats.tests.test_discrete_distns.TestZipfian.test_zipfian_R(self)
scipy.stats.tests.test_discrete_distns.TestZipfian.test_zipfian_asymptotic(self)
scipy.stats.tests.test_discrete_distns.TestZipfian.test_zipfian_continuity(self)
scipy.stats.tests.test_discrete_distns.TestZipfian.test_zipfian_naive(self,a,n)
scipy.stats.tests.test_discrete_distns.test_betabinom_a_and_b_unity()
scipy.stats.tests.test_discrete_distns.test_betabinom_bernoulli()
scipy.stats.tests.test_discrete_distns.test_boltzmann_upper_bound()
scipy.stats.tests.test_discrete_distns.test_boost_divide_by_zero_issue_15101()
scipy.stats.tests.test_discrete_distns.test_gh_17146()
scipy.stats.tests.test_discrete_distns.test_hypergeom_cdf(k,M,n,N,expected,rtol)
scipy.stats.tests.test_discrete_distns.test_hypergeom_logpmf()
scipy.stats.tests.test_discrete_distns.test_hypergeom_sf(k,M,n,N,expected,rtol)
scipy.stats.tests.test_discrete_distns.test_issue_10317()
scipy.stats.tests.test_discrete_distns.test_issue_11134()
scipy.stats.tests.test_discrete_distns.test_issue_1603()
scipy.stats.tests.test_discrete_distns.test_issue_5122()
scipy.stats.tests.test_discrete_distns.test_issue_5503()
scipy.stats.tests.test_discrete_distns.test_issue_5503pt2(x,n,p,cdf_desired)
scipy.stats.tests.test_discrete_distns.test_issue_5503pt3()
scipy.stats.tests.test_discrete_distns.test_issue_6682()
scipy.stats.tests.test_discrete_distns.test_issue_7406()
scipy.stats.tests.test_discrete_distns.test_nbinom_11465(mu,q,expected)
scipy.stats.tests.test_discrete_distns.test_nhypergeom_accuracy()
scipy.stats.tests.test_discrete_distns.test_nhypergeom_pmf()
scipy.stats.tests.test_discrete_distns.test_nhypergeom_pmfcdf()
scipy.stats.tests.test_discrete_distns.test_nhypergeom_r0()
scipy.stats.tests.test_discrete_distns.test_nhypergeom_rvs_shape()
scipy.stats.tests.test_discrete_distns.test_skellam_gh11474()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_tukeylambda_stats.py----------------------------------------
A:scipy.stats.tests.test_tukeylambda_stats.var->tukeylambda_variance(lam)
A:scipy.stats.tests.test_tukeylambda_stats.kurt->tukeylambda_kurtosis(lam)
A:scipy.stats.tests.test_tukeylambda_stats.a10->dict(atol=1e-10, rtol=0)
A:scipy.stats.tests.test_tukeylambda_stats.a12->dict(atol=1e-12, rtol=0)
A:scipy.stats.tests.test_tukeylambda_stats.(lam, var_expected, kurt_expected)->zip(*data)
scipy.stats.tests.test_tukeylambda_stats.test_tukeylambda_stats_invalid()
scipy.stats.tests.test_tukeylambda_stats.test_tukeylambda_stats_known_exact()
scipy.stats.tests.test_tukeylambda_stats.test_tukeylambda_stats_mpmath()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_sampling.py----------------------------------------
A:scipy.stats.tests.test_sampling.Method->getattr(stats.sampling, method)
A:scipy.stats.tests.test_sampling.rng1->NumericalInversePolynomial(dist_pdf)
A:scipy.stats.tests.test_sampling.rng2->check_random_state(rng2)
A:scipy.stats.tests.test_sampling.rvs1->SimpleRatioUniforms(dist, mode=dist.mode, cdf_at_mode=dist.cdf(dist.mode), random_state=42).rvs(100)
A:scipy.stats.tests.test_sampling.rvs2->scipy.stats.norm.ppf(uniform)
A:scipy.stats.tests.test_sampling.seed1->numpy.random.RandomState(np.random.MT19937(123))
A:scipy.stats.tests.test_sampling.seed2->numpy.random.Generator(np.random.MT19937(123))
A:scipy.stats.tests.test_sampling.rng->SimpleRatioUniforms(dist, mode=dist.mode, cdf_at_mode=dist.cdf(dist.mode), random_state=42)
A:scipy.stats.tests.test_sampling.dist->scipy.stats.binom(n, p)
A:scipy.stats.tests.test_sampling.t1->threading.Thread(target=func1)
A:scipy.stats.tests.test_sampling.t2->threading.Thread(target=func2)
A:scipy.stats.tests.test_sampling.obj->pickle.dumps(rng1)
A:scipy.stats.tests.test_sampling.urng->numpy.random.default_rng()
A:scipy.stats.tests.test_sampling.u->numpy.linspace(0, 1, num=100)
A:scipy.stats.tests.test_sampling.domain->scipy.stats.binom(n, p).support()
A:scipy.stats.tests.test_sampling.pv->scipy.stats.binom(n, p).pmf(k)
A:scipy.stats.tests.test_sampling.rvs->NumericalInverseHermite(dist).rvs(size=size_in, random_state=rng)
A:scipy.stats.tests.test_sampling.dist.cdf->numpy.vectorize(dist.cdf)
A:scipy.stats.tests.test_sampling.obs_freqs->numpy.zeros_like(pv)
A:scipy.stats.tests.test_sampling.(_, freqs)->numpy.unique(rvs, return_counts=True)
A:scipy.stats.tests.test_sampling.gen->Method(dist)
A:scipy.stats.tests.test_sampling.qrng2->scipy.stats.qmc.Halton(d, seed=0)
A:scipy.stats.tests.test_sampling.qrvs->Method(dist).qrvs(size=size, d=d, qmc_engine=qrng)
A:scipy.stats.tests.test_sampling.uniform->check_random_state(rng2).uniform(size=size_in)
A:scipy.stats.tests.test_sampling.qrvs2->scipy.stats.norm.ppf(uniform)
A:scipy.stats.tests.test_sampling.qrng->scipy.stats.qmc.Halton(d, seed=0)
A:scipy.stats.tests.test_sampling.sample2->qrvs2[:, i].reshape(size)
A:scipy.stats.tests.test_sampling.res->SimpleRatioUniforms(dist, mode=dist.mode, cdf_at_mode=dist.cdf(dist.mode), random_state=42).ppf(u)
A:scipy.stats.tests.test_sampling.expected->scipy.stats.binom.ppf(u, n, p)
A:scipy.stats.tests.test_sampling.k->numpy.arange(domain[0], domain[1] + 1)
A:scipy.stats.tests.test_sampling.mv_ex->scipy.stats.binom(n, p).stats('mv')
A:scipy.stats.tests.test_sampling.variates->numpy.arange(0, len(pv))
A:scipy.stats.tests.test_sampling.m_expected->numpy.average(variates, weights=pv)
A:scipy.stats.tests.test_sampling.v_expected->numpy.average((variates - m_expected) ** 2, weights=pv)
A:scipy.stats.tests.test_sampling.(max_error, mae)->SimpleRatioUniforms(dist, mode=dist.mode, cdf_at_mode=dist.cdf(dist.mode), random_state=42).u_error()
A:scipy.stats.tests.test_sampling.dist_pdf->MyDist()
A:scipy.stats.tests.test_sampling.dist_logpdf->MyDist()
A:scipy.stats.tests.test_sampling.q->numpy.linspace(1e-05, 1 - 1e-05, num=100)
A:scipy.stats.tests.test_sampling.fni->NumericalInverseHermite(dist)
A:scipy.stats.tests.test_sampling.x->numpy.random.rand(10)
A:scipy.stats.tests.test_sampling.p_tol->numpy.max(np.abs(dist.ppf(x) - fni.ppf(x)) / np.abs(dist.ppf(x)))
A:scipy.stats.tests.test_sampling.u_tol->numpy.max(np.abs(dist.cdf(fni.ppf(x)) - x))
A:scipy.stats.tests.test_sampling.dist1->StandardNormal()
A:scipy.stats.tests.test_sampling.fni1->NumericalInverseHermite(dist1)
A:scipy.stats.tests.test_sampling.dist2->scipy.stats.norm()
A:scipy.stats.tests.test_sampling.fni2->NumericalInverseHermite(dist2)
scipy.stats.tests.test_sampling.StandardNormal
scipy.stats.tests.test_sampling.StandardNormal.cdf(self,x)
scipy.stats.tests.test_sampling.StandardNormal.dpdf(self,x)
scipy.stats.tests.test_sampling.StandardNormal.pdf(self,x)
scipy.stats.tests.test_sampling.TestDiscreteAliasUrn
scipy.stats.tests.test_sampling.TestDiscreteAliasUrn.test_bad_args(self)
scipy.stats.tests.test_sampling.TestDiscreteAliasUrn.test_bad_pmf(self,pmf,err,msg)
scipy.stats.tests.test_sampling.TestDiscreteAliasUrn.test_bad_pv(self,pv,msg)
scipy.stats.tests.test_sampling.TestDiscreteAliasUrn.test_bad_urn_factor(self)
scipy.stats.tests.test_sampling.TestDiscreteAliasUrn.test_basic(self,distname,params)
scipy.stats.tests.test_sampling.TestDiscreteAliasUrn.test_inf_domain(self,domain)
scipy.stats.tests.test_sampling.TestDiscreteAliasUrn.test_sampling_with_pv(self,pv)
scipy.stats.tests.test_sampling.TestDiscreteGuideTable
scipy.stats.tests.test_sampling.TestDiscreteGuideTable.test_bad_pv(self,pv,msg)
scipy.stats.tests.test_sampling.TestDiscreteGuideTable.test_basic(self,distname,params)
scipy.stats.tests.test_sampling.TestDiscreteGuideTable.test_guide_factor_gt3_raises_warning(self)
scipy.stats.tests.test_sampling.TestDiscreteGuideTable.test_guide_factor_zero_raises_warning(self)
scipy.stats.tests.test_sampling.TestDiscreteGuideTable.test_inf_domain(self,domain)
scipy.stats.tests.test_sampling.TestDiscreteGuideTable.test_negative_guide_factor_raises_warning(self)
scipy.stats.tests.test_sampling.TestDiscreteGuideTable.test_ppf(self,u)
scipy.stats.tests.test_sampling.TestNumericalInverseHermite
scipy.stats.tests.test_sampling.TestNumericalInverseHermite.basic_test_all_scipy_dists(self,distname,shapes)
scipy.stats.tests.test_sampling.TestNumericalInverseHermite.dist0
scipy.stats.tests.test_sampling.TestNumericalInverseHermite.dist0.cdf(self,x)
scipy.stats.tests.test_sampling.TestNumericalInverseHermite.dist0.dpdf(self,x)
scipy.stats.tests.test_sampling.TestNumericalInverseHermite.dist0.pdf(self,x)
scipy.stats.tests.test_sampling.TestNumericalInverseHermite.dist0.support(self)
scipy.stats.tests.test_sampling.TestNumericalInverseHermite.dist1
scipy.stats.tests.test_sampling.TestNumericalInverseHermite.dist1.cdf(self,x)
scipy.stats.tests.test_sampling.TestNumericalInverseHermite.dist1.dpdf(self,x)
scipy.stats.tests.test_sampling.TestNumericalInverseHermite.dist1.pdf(self,x)
scipy.stats.tests.test_sampling.TestNumericalInverseHermite.dist1.support(self)
scipy.stats.tests.test_sampling.TestNumericalInverseHermite.test_RVS(self,rng,size_in,size_out)
scipy.stats.tests.test_sampling.TestNumericalInverseHermite.test_basic(self,dist,mv_ex,order)
scipy.stats.tests.test_sampling.TestNumericalInverseHermite.test_basic_all_scipy_dists(self,distname,shapes)
scipy.stats.tests.test_sampling.TestNumericalInverseHermite.test_basic_truncnorm_gh17155(self)
scipy.stats.tests.test_sampling.TestNumericalInverseHermite.test_custom_distribution(self)
scipy.stats.tests.test_sampling.TestNumericalInverseHermite.test_inaccurate_CDF(self)
scipy.stats.tests.test_sampling.TestNumericalInverseHermite.test_inf_nan_domains(self,domain,err,msg)
scipy.stats.tests.test_sampling.TestNumericalInverseHermite.test_input_validation(self)
scipy.stats.tests.test_sampling.TestNumericalInverseHermite.test_ppf(self,u)
scipy.stats.tests.test_sampling.TestNumericalInverseHermite.test_u_error(self)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.dist0
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.dist0.cdf(self,x)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.dist0.pdf(self,x)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.dist0.support(self)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.dist1
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.dist1.cdf(self,x)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.dist1.pdf(self,x)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.dist2
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.dist2.cdf(self,x)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.dist2.pdf(self,x)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.dist2.support(self)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.dist3
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.dist3.cdf(self,x)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.dist3.pdf(self,x)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.dist3.support(self)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.test_bad_args(self)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.test_bad_logpdf(self,logpdf,err,msg)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.test_bad_orders(self,order)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.test_bad_pdf(self,pdf,err,msg)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.test_bad_u_resolution(self,u_resolution)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.test_basic(self,dist,mv_ex)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.test_basic_all_scipy_dists(self,distname,params)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.test_cdf(self,x)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.test_inf_nan_domains(self,domain,err,msg)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.test_logpdf_pdf_consistency(self)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.test_ppf(self,u)
scipy.stats.tests.test_sampling.TestNumericalInversePolynomial.test_u_error(self)
scipy.stats.tests.test_sampling.TestQRVS
scipy.stats.tests.test_sampling.TestQRVS.test_QRVS_shape_consistency(self,qrng,size_in,size_out,d_in,d_out,method)
scipy.stats.tests.test_sampling.TestQRVS.test_QRVS_size_tuple(self,method)
scipy.stats.tests.test_sampling.TestQRVS.test_input_validation(self,method)
scipy.stats.tests.test_sampling.TestSimpleRatioUniforms
scipy.stats.tests.test_sampling.TestSimpleRatioUniforms.dist(self,shift)
scipy.stats.tests.test_sampling.TestSimpleRatioUniforms.dist.__init__(self,shift)
scipy.stats.tests.test_sampling.TestSimpleRatioUniforms.dist.cdf(self,x)
scipy.stats.tests.test_sampling.TestSimpleRatioUniforms.dist.pdf(self,x)
scipy.stats.tests.test_sampling.TestSimpleRatioUniforms.test_bad_args(self)
scipy.stats.tests.test_sampling.TestSimpleRatioUniforms.test_basic(self,dist,mv_ex)
scipy.stats.tests.test_sampling.TestSimpleRatioUniforms.test_inf_nan_domains(self,domain,err,msg)
scipy.stats.tests.test_sampling.TestTransformedDensityRejection
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.dist0
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.dist0.cdf(self,x)
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.dist0.dpdf(self,x)
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.dist0.pdf(self,x)
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.dist0.support(self)
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.dist1
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.dist1.cdf(self,x)
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.dist1.dpdf(self,x)
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.dist1.pdf(self,x)
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.dist2(self,shift)
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.dist2.__init__(self,shift)
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.dist2.cdf(self,x)
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.dist2.dpdf(self,x)
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.dist2.pdf(self,x)
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.test_bad_c(self,c)
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.test_bad_construction_points_array(self)
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.test_bad_construction_points_scalar(self,construction_points)
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.test_bad_dist(self)
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.test_bad_dpdf(self,dpdf,err,msg)
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.test_bad_pdf(self,pdf,err,msg)
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.test_basic(self,dist,mv_ex)
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.test_inf_nan_domains(self,domain,err,msg)
scipy.stats.tests.test_sampling.TestTransformedDensityRejection.test_ppf_hat(self,u)
scipy.stats.tests.test_sampling.check_cont_samples(rng,dist,mv_ex)
scipy.stats.tests.test_sampling.check_discr_samples(rng,pv,mv_ex)
scipy.stats.tests.test_sampling.test_bad_domain(domain,err,msg,method,kwargs)
scipy.stats.tests.test_sampling.test_error_mode_not_in_domain(method)
scipy.stats.tests.test_sampling.test_pickle(method,kwargs)
scipy.stats.tests.test_sampling.test_random_state(method,kwargs)
scipy.stats.tests.test_sampling.test_rvs_size(size)
scipy.stats.tests.test_sampling.test_set_random_state()
scipy.stats.tests.test_sampling.test_threading_behaviour()
scipy.stats.tests.test_sampling.test_warning_center_not_in_domain()
scipy.stats.tests.test_sampling.test_with_scipy_distribution()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_axis_nan_policy.py----------------------------------------
A:scipy.stats.tests.test_axis_nan_policy.(low, high)->weighted_fun(a_nans, weights=b_nans, nan_policy='omit', axis=axis).confidence_interval()
A:scipy.stats.tests.test_axis_nan_policy.samples[k, indices]->numpy.random.default_rng(6541968121).random(size=n_reals)
A:scipy.stats.tests.test_axis_nan_policy.samples[:]->numpy.random.default_rng(6541968121).permutation(samples, axis=0)
A:scipy.stats.tests.test_axis_nan_policy.x->numpy.random.default_rng(6541968121).random(shape_x)
A:scipy.stats.tests.test_axis_nan_policy.nan_mask->numpy.logical_or(nan_mask, np.isnan(sample))
A:scipy.stats.tests.test_axis_nan_policy.rng->numpy.random.default_rng(6541968121)
A:scipy.stats.tests.test_axis_nan_policy.data->numpy.random.default_rng(6541968121).uniform(size=(n_samples, 2, 30))
A:scipy.stats.tests.test_axis_nan_policy.statistics->numpy.zeros(output_shape)
A:scipy.stats.tests.test_axis_nan_policy.pvalues->numpy.zeros(output_shape)
A:scipy.stats.tests.test_axis_nan_policy.res1d->nan_policy_1d(hypotest, data1d, unpacker, *args, n_outputs=n_outputs, nan_policy=nan_policy, paired=paired, _no_deco=True, **kwds)
A:scipy.stats.tests.test_axis_nan_policy.res1db->unpacker(hypotest(*data_raveled, *args, nan_policy=nan_policy, **kwds))
A:scipy.stats.tests.test_axis_nan_policy.res->weighted_fun(a_nans, weights=b_nans, nan_policy='omit', axis=axis)
A:scipy.stats.tests.test_axis_nan_policy.res1da->nan_policy_1d(hypotest, data_raveled, unpacker, *args, n_outputs=n_outputs, nan_policy=nan_policy, paired=paired, _no_deco=True, **kwds)
A:scipy.stats.tests.test_axis_nan_policy.ea_str->str(ea)
A:scipy.stats.tests.test_axis_nan_policy.eb_str->str(eb)
A:scipy.stats.tests.test_axis_nan_policy.res1dc->unpacker(hypotest(*data, *args, axis=None, nan_policy=nan_policy, **kwds))
A:scipy.stats.tests.test_axis_nan_policy.ec_str->str(ec)
A:scipy.stats.tests.test_axis_nan_policy.expected_shape->tuple(expected_shape)
A:scipy.stats.tests.test_axis_nan_policy.res_base->unpacker(hypotest(*data, *args, axis=axis, keepdims=False, **kwds))
A:scipy.stats.tests.test_axis_nan_policy.nan_res->unpacker(hypotest(*nan_data, *args, axis=axis, keepdims=True, nan_policy=nan_policy, **kwds))
A:scipy.stats.tests.test_axis_nan_policy.nan_res_base->unpacker(hypotest(*nan_data, *args, axis=axis, keepdims=False, nan_policy=nan_policy, **kwds))
A:scipy.stats.tests.test_axis_nan_policy.r->numpy.squeeze(r, axis=axis)
A:scipy.stats.tests.test_axis_nan_policy.rn->numpy.squeeze(rn, axis=axis)
A:scipy.stats.tests.test_axis_nan_policy.res2->weighted_fun(a_masked2, weights=b_masked2, nan_policy='omit', axis=axis)
A:scipy.stats.tests.test_axis_nan_policy.res3->weighted_fun(a_masked3, weights=b_masked3, nan_policy='raise', axis=axis)
A:scipy.stats.tests.test_axis_nan_policy.y->numpy.random.default_rng(6541968121).random(shape_y)
A:scipy.stats.tests.test_axis_nan_policy.res1->weighted_fun(a_masked1, weights=b_masked1, nan_policy='omit', axis=axis)
A:scipy.stats.tests.test_axis_nan_policy.pickled_hypotest->pickle.dumps(hypotest)
A:scipy.stats.tests.test_axis_nan_policy.unpickled_hypotest->pickle.loads(pickled_hypotest)
A:scipy.stats.tests.test_axis_nan_policy.output->scipy.stats._axis_nan_policy._check_empty_inputs(samples, axis)
A:scipy.stats.tests.test_axis_nan_policy.reference->samples[0].mean(axis=axis)
A:scipy.stats.tests.test_axis_nan_policy.n_dims->max([arr.ndim for arr in arrays])
A:scipy.stats.tests.test_axis_nan_policy.dim_lengths->set()
A:scipy.stats.tests.test_axis_nan_policy.max_axis->max((sample.ndim for sample in samples))
A:scipy.stats.tests.test_axis_nan_policy.concat->scipy.stats._stats_py._broadcast_concatenate(samples, axis)
A:scipy.stats.tests.test_axis_nan_policy.A->numpy.ma.masked_array(A, mask)
A:scipy.stats.tests.test_axis_nan_policy.B->numpy.random.rand(12)
A:scipy.stats.tests.test_axis_nan_policy.max_float2->numpy.nextafter(max_float, -np.inf)
A:scipy.stats.tests.test_axis_nan_policy.max_float3->numpy.nextafter(max_float2, -np.inf)
A:scipy.stats.tests.test_axis_nan_policy.(out_arrays, sentinel)->_masked_arrays_2_sentinel_arrays([a1])
A:scipy.stats.tests.test_axis_nan_policy.a->numpy.random.default_rng(6541968121).uniform(size=(m, n))
A:scipy.stats.tests.test_axis_nan_policy.b->numpy.random.default_rng(6541968121).uniform(size=(m, n))
A:scipy.stats.tests.test_axis_nan_policy.c->numpy.random.rand(4, 1)
A:scipy.stats.tests.test_axis_nan_policy.mask1->numpy.zeros_like(a, dtype=bool)
A:scipy.stats.tests.test_axis_nan_policy.mask0->numpy.zeros_like(a, dtype=bool)
A:scipy.stats.tests.test_axis_nan_policy.a1->numpy.ma.array(a, mask=mask1)
A:scipy.stats.tests.test_axis_nan_policy.a0->numpy.ma.array(a, mask=mask0)
A:scipy.stats.tests.test_axis_nan_policy.females3->numpy.ma.masked_array(females3, mask=mask3)
A:scipy.stats.tests.test_axis_nan_policy.females4->numpy.ma.masked_array(females4, mask=mask4)
A:scipy.stats.tests.test_axis_nan_policy.res4->weighted_fun(a_masked3, weights=b_masked3, nan_policy='propagate', axis=axis)
A:scipy.stats.tests.test_axis_nan_policy.females5->numpy.ma.masked_array(females5, mask=mask5)
A:scipy.stats.tests.test_axis_nan_policy.res5->weighted_fun_ma(a_masked4, weights=b_masked4, axis=axis, _no_deco=True)
A:scipy.stats.tests.test_axis_nan_policy.res6->scipy.stats.mannwhitneyu(males, females5, nan_policy='raise')
A:scipy.stats.tests.test_axis_nan_policy.a_masked->numpy.ma.masked_array(a, mask=mask)
A:scipy.stats.tests.test_axis_nan_policy.c_masked->numpy.ma.masked_array(c, mask=mask_c)
A:scipy.stats.tests.test_axis_nan_policy.a_nans->numpy.random.default_rng(6541968121).uniform(size=(m, n)).copy()
A:scipy.stats.tests.test_axis_nan_policy.c_nans->numpy.random.rand(4, 1).copy()
A:scipy.stats.tests.test_axis_nan_policy.b_nans->numpy.random.default_rng(6541968121).uniform(size=(m, n)).copy()
A:scipy.stats.tests.test_axis_nan_policy.a_masked1->numpy.ma.masked_array(a, mask=mask_a1)
A:scipy.stats.tests.test_axis_nan_policy.b_masked1->numpy.ma.masked_array(b, mask=mask_b1)
A:scipy.stats.tests.test_axis_nan_policy.a_masked2->numpy.ma.masked_array(a, mask=mask_a2)
A:scipy.stats.tests.test_axis_nan_policy.b_masked2->numpy.ma.masked_array(b, mask=mask_b2)
A:scipy.stats.tests.test_axis_nan_policy.a_masked3->numpy.ma.masked_array(a, mask=mask_a1 | mask_a2)
A:scipy.stats.tests.test_axis_nan_policy.b_masked3->numpy.ma.masked_array(b, mask=mask_b1 | mask_b2)
A:scipy.stats.tests.test_axis_nan_policy.ref1->scipy.stats.ranksums([1, 3], [4, 5, 6])
A:scipy.stats.tests.test_axis_nan_policy.ref2->scipy.stats.ranksums([1, 2, 3], [4, 5, 6])
A:scipy.stats.tests.test_axis_nan_policy.(x2, y2)->numpy.broadcast_arrays(x, y)
A:scipy.stats.tests.test_axis_nan_policy.res0->scipy.stats.mannwhitneyu(x.ravel(), y.ravel())
A:scipy.stats.tests.test_axis_nan_policy.axis->sorted(axis)
A:scipy.stats.tests.test_axis_nan_policy.not_axis->next(iter(not_axis))
A:scipy.stats.tests.test_axis_nan_policy.y2->numpy.reshape(y2, (m, -1))
A:scipy.stats.tests.test_axis_nan_policy.x2->numpy.reshape(x2, (m, -1))
A:scipy.stats.tests.test_axis_nan_policy.weighted_fun->getattr(stats, weighted_fun_name)
A:scipy.stats.tests.test_axis_nan_policy.a_masked4->numpy.ma.masked_array(a, mask=mask_all)
A:scipy.stats.tests.test_axis_nan_policy.b_masked4->numpy.ma.masked_array(b, mask=mask_all)
A:scipy.stats.tests.test_axis_nan_policy.weighted_fun_ma->getattr(stats.mstats, weighted_fun_name)
scipy.stats.tests.test_axis_nan_policy._axis_nan_policy_test(hypotest,args,kwds,n_samples,n_outputs,paired,unpacker,nan_policy,axis,data_generator)
scipy.stats.tests.test_axis_nan_policy._check_arrays_broadcastable(arrays,axis)
scipy.stats.tests.test_axis_nan_policy._homogeneous_data_generator(n_samples,n_repetitions,axis,rng,paired=False,all_nans=True)
scipy.stats.tests.test_axis_nan_policy._mixed_data_generator(n_samples,n_repetitions,axis,rng,paired=False)
scipy.stats.tests.test_axis_nan_policy.nan_policy_1d(hypotest,data1d,unpacker,*args,n_outputs=2,nan_policy='raise',paired=False,_no_deco=True,**kwds)
scipy.stats.tests.test_axis_nan_policy.test_axis_None_vs_tuple()
scipy.stats.tests.test_axis_nan_policy.test_axis_None_vs_tuple_with_broadcasting()
scipy.stats.tests.test_axis_nan_policy.test_axis_nan_policy_axis_is_None(hypotest,args,kwds,n_samples,n_outputs,paired,unpacker,nan_policy,data_generator)
scipy.stats.tests.test_axis_nan_policy.test_axis_nan_policy_decorated_keyword_samples()
scipy.stats.tests.test_axis_nan_policy.test_axis_nan_policy_decorated_pickled(hypotest,args,kwds,n_samples,n_outputs,paired,unpacker)
scipy.stats.tests.test_axis_nan_policy.test_axis_nan_policy_decorated_positional_args()
scipy.stats.tests.test_axis_nan_policy.test_axis_nan_policy_decorated_positional_axis(axis)
scipy.stats.tests.test_axis_nan_policy.test_axis_nan_policy_fast(hypotest,args,kwds,n_samples,n_outputs,paired,unpacker,nan_policy,axis,data_generator)
scipy.stats.tests.test_axis_nan_policy.test_axis_nan_policy_full(hypotest,args,kwds,n_samples,n_outputs,paired,unpacker,nan_policy,axis,data_generator)
scipy.stats.tests.test_axis_nan_policy.test_check_empty_inputs()
scipy.stats.tests.test_axis_nan_policy.test_empty(hypotest,args,kwds,n_samples,n_outputs,paired,unpacker)
scipy.stats.tests.test_axis_nan_policy.test_hypotest_back_compat_no_axis(fun,nsamp)
scipy.stats.tests.test_axis_nan_policy.test_keepdims(hypotest,args,kwds,n_samples,unpacker,sample_shape,axis_cases,nan_policy)
scipy.stats.tests.test_axis_nan_policy.test_masked_array_2_sentinel_array()
scipy.stats.tests.test_axis_nan_policy.test_masked_dtype()
scipy.stats.tests.test_axis_nan_policy.test_masked_stat_1d()
scipy.stats.tests.test_axis_nan_policy.test_masked_stat_3d(axis)
scipy.stats.tests.test_axis_nan_policy.test_mean_mixed_mask_nan_weights(weighted_fun_name)
scipy.stats.tests.test_axis_nan_policy.test_mixed_mask_nan_1()
scipy.stats.tests.test_axis_nan_policy.test_mixed_mask_nan_2()
scipy.stats.tests.test_axis_nan_policy.test_other_axis_tuples(axis)
scipy.stats.tests.test_axis_nan_policy.unpack_ttest_result(res)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_boost_ufuncs.py----------------------------------------
A:scipy.stats.tests.test_boost_ufuncs.value->func(*args)
scipy.stats.tests.test_boost_ufuncs.test_stats_boost_ufunc(func,args,expected)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_qmc.py----------------------------------------
A:scipy.stats.tests.test_qmc.scaled_space->scipy.stats.qmc.scale(space, l_bounds=l_bounds, u_bounds=u_bounds)
A:scipy.stats.tests.test_qmc.bounds->numpy.array([[-2, 0], [6, 5]])
A:scipy.stats.tests.test_qmc.scaled_back_space->scipy.stats.qmc.scale(scaled_space, l_bounds=bounds[0], u_bounds=bounds[1], reverse=True)
A:scipy.stats.tests.test_qmc.rng->numpy.random.RandomState(1809831)
A:scipy.stats.tests.test_qmc.sample->numpy.random.RandomState(1809831).uniform(0, 1, size=(128, 2))
A:scipy.stats.tests.test_qmc.scaled->scipy.stats.qmc.scale(sample, a, b, reverse=False)
A:scipy.stats.tests.test_qmc.unscaled->scipy.stats.qmc.scale(scaled, a, b, reverse=True)
A:scipy.stats.tests.test_qmc.space_1->numpy.random.RandomState(1809831).random((4, 10))
A:scipy.stats.tests.test_qmc.space_2->numpy.array([[1, 5], [2, 4], [3, 3], [4, 2], [5, 1], [6, 6]])
A:scipy.stats.tests.test_qmc.ref->numpy.sqrt(3 ** (-dim))
A:scipy.stats.tests.test_qmc.disc_init->scipy.stats.qmc.discrepancy(space_1[:-1], iterative=True)
A:scipy.stats.tests.test_qmc.disc_iter->update_discrepancy(space_1[-1], space_1[:-1], disc_init)
A:scipy.stats.tests.test_qmc.disc_ref->scipy.stats.qmc.discrepancy(space_1)
A:scipy.stats.tests.test_qmc.qmc_gen->scipy.stats.qmc.LatinHypercube(5, seed=rng)
A:scipy.stats.tests.test_qmc.disc->numpy.sum(np.sum(np.prod(3 / 2 - np.abs(xij - xkj) + np.abs(xij - xkj) ** 2, axis=2), axis=0))
A:scipy.stats.tests.test_qmc.row_1->numpy.random.RandomState(1809831).integers(10)
A:scipy.stats.tests.test_qmc.row_2->numpy.random.RandomState(1809831).integers(10)
A:scipy.stats.tests.test_qmc.col->numpy.random.RandomState(1809831).integers(5)
A:scipy.stats.tests.test_qmc.disc_reference->scipy.stats.qmc.discrepancy(sample)
A:scipy.stats.tests.test_qmc.disc1->numpy.sum(np.prod(5 / 3 - 1 / 4 * np.abs(xij - 0.5) - 1 / 4 * np.abs(xij - 0.5) ** 2, axis=1))
A:scipy.stats.tests.test_qmc.disc2->numpy.sum(np.sum(np.prod(15 / 8 - 1 / 4 * np.abs(xij - 0.5) - 1 / 4 * np.abs(xkj - 0.5) - 3 / 4 * np.abs(xij - xkj) + 1 / 2 * np.abs(xij - xkj) ** 2, axis=2), axis=0))
A:scipy.stats.tests.test_qmc.disc_curr->scipy.stats.qmc.discrepancy(sample, method='L2-star')
A:scipy.stats.tests.test_qmc.disc_alt->disc_star_l2(sample)
A:scipy.stats.tests.test_qmc.primes->primes_from_2_to(50)
A:scipy.stats.tests.test_qmc.out->van_der_corput(10, scramble=True, seed=seed)
A:scipy.stats.tests.test_qmc.engine->scipy.stats.qmc.MultivariateNormalQMC(mean=[0.0, 0.0, 0.0], cov=[[1.0, 0.0, 1.0], [0.0, 1.0, 1.0], [1.0, 1.0, 2.0]], seed=seed)
A:scipy.stats.tests.test_qmc.sample_1->scipy.stats.qmc.MultivariateNormalQMC(mean=[0.0, 0.0, 0.0], cov=[[1.0, 0.0, 1.0], [0.0, 1.0, 1.0], [1.0, 1.0, 2.0]], seed=seed).random(n=5)
A:scipy.stats.tests.test_qmc.sample_2->scipy.stats.qmc.MultivariateNormalQMC(mean=[0.0, 0.0, 0.0], cov=[[1.0, 0.0, 1.0], [0.0, 1.0, 1.0], [1.0, 1.0, 2.0]], seed=seed).random(n=7)
A:scipy.stats.tests.test_qmc.sample_1_test->scipy.stats.qmc.MultivariateNormalQMC(mean=[0.0, 0.0, 0.0], cov=[[1.0, 0.0, 1.0], [0.0, 1.0, 1.0], [1.0, 1.0, 2.0]], seed=seed).random(n=5)
A:scipy.stats.tests.test_qmc.sample_2_test->scipy.stats.qmc.MultivariateNormalQMC(mean=[0.0, 0.0, 0.0], cov=[[1.0, 0.0, 1.0], [0.0, 1.0, 1.0], [1.0, 1.0, 2.0]], seed=seed).random(n=7)
A:scipy.stats.tests.test_qmc.ref_sample->scipy.stats.qmc.MultivariateNormalQMC(mean=[0.0, 0.0, 0.0], cov=[[1.0, 0.0, 1.0], [0.0, 1.0, 1.0], [1.0, 1.0, 2.0]], seed=seed).integers(10)
A:scipy.stats.tests.test_qmc.low->numpy.random.RandomState(1809831).integers(low=-5, high=-1, size=d)
A:scipy.stats.tests.test_qmc.high->numpy.random.RandomState(1809831).integers(low=1, high=5, size=d, endpoint=True)
A:scipy.stats.tests.test_qmc.seed->numpy.random.default_rng(163206374175814483578698216542904486209)
A:scipy.stats.tests.test_qmc._->scipy.stats.qmc.MultivariateNormalQMC(mean=[0.0, 0.0, 0.0], cov=[[1.0, 0.0, 1.0], [0.0, 1.0, 1.0], [1.0, 1.0, 2.0]], seed=seed).random(n=n_half)
A:scipy.stats.tests.test_qmc.sample_ref->scipy.stats.qmc.MultivariateNormalQMC(mean=[0.0, 0.0, 0.0], cov=[[1.0, 0.0, 1.0], [0.0, 1.0, 1.0], [1.0, 1.0, 2.0]], seed=seed).random(n=64)
A:scipy.stats.tests.test_qmc.metric_ref->metric(sample_ref)
A:scipy.stats.tests.test_qmc.optimal_->self.engine(d=2, scramble=False, optimization=optimization)
A:scipy.stats.tests.test_qmc.sample_->self.engine(d=2, scramble=False, optimization=optimization).random(n=64)
A:scipy.stats.tests.test_qmc.metric_->metric(sample_)
A:scipy.stats.tests.test_qmc.unscramble_nd->numpy.array([[0.0, 0.0], [0.5, 0.5], [0.75, 0.25], [0.25, 0.75], [0.375, 0.375], [0.875, 0.875], [0.625, 0.125], [0.125, 0.625]])
A:scipy.stats.tests.test_qmc.scramble_nd->numpy.array([[0.25331921, 0.41371179], [0.8654213, 0.9821167], [0.70097554, 0.03664616], [0.18027647, 0.60895735], [0.10521339, 0.21897069], [0.53019685, 0.66619033], [0.91122276, 0.34580743], [0.45337471, 0.78912079]])
A:scipy.stats.tests.test_qmc.sorted_sample->numpy.sort(sample, axis=0)
A:scipy.stats.tests.test_qmc.unique_elements->numpy.arange(p)
A:scipy.stats.tests.test_qmc.desired->set(product(unique_elements, unique_elements))
A:scipy.stats.tests.test_qmc.res->(samples_2d * p).astype(int)
A:scipy.stats.tests.test_qmc.res_set->set((tuple(row) for row in res))
A:scipy.stats.tests.test_qmc.count1->Counter(engine.random().flatten().tolist())
A:scipy.stats.tests.test_qmc.count2->Counter(engine.random().flatten().tolist())
A:scipy.stats.tests.test_qmc.sample_init->scipy.stats.qmc.MultivariateNormalQMC(mean=[0.0, 0.0, 0.0], cov=[[1.0, 0.0, 1.0], [0.0, 1.0, 1.0], [1.0, 1.0, 2.0]], seed=seed).random(n=ns)
A:scipy.stats.tests.test_qmc.sample_continued->scipy.stats.qmc.MultivariateNormalQMC(mean=[0.0, 0.0, 0.0], cov=[[1.0, 0.0, 1.0], [0.0, 1.0, 1.0], [1.0, 1.0, 2.0]], seed=seed).random(n=ns)
A:scipy.stats.tests.test_qmc.gen->product(dimensions, radii, hypersphere_methods)
A:scipy.stats.tests.test_qmc.p->numpy.array([0.12, 0.26, 0.05, 0.35, 0.22])
A:scipy.stats.tests.test_qmc.expected->numpy.array([[12, 25, 5, 36, 22]])
A:scipy.stats.tests.test_qmc.draws->scipy.stats.qmc.MultivariateNormalQMC(mean=[0.0, 0.0, 0.0], cov=[[1.0, 0.0, 1.0], [0.0, 1.0, 1.0], [1.0, 1.0, 2.0]], seed=seed).random(1)
A:scipy.stats.tests.test_qmc.p_cumulative->numpy.array([0.1, 0.4, 0.45, 0.6, 0.75, 0.9, 0.99, 1.0])
A:scipy.stats.tests.test_qmc.size->len(p_cumulative)
A:scipy.stats.tests.test_qmc.base_engine->scipy.stats.qmc.Sobol(d=d, scramble=False)
A:scipy.stats.tests.test_qmc.samples->scipy.stats.qmc.MultivariateNormalQMC(mean=[0.0, 0.0, 0.0], cov=[[1.0, 0.0, 1.0], [0.0, 1.0, 1.0], [1.0, 1.0, 2.0]], seed=seed).random(n=512)
A:scipy.stats.tests.test_qmc.samples_expected->numpy.array([[1.427248, -0.338187, -1.560687], [-0.357026, 1.662937, -0.29769]])
A:scipy.stats.tests.test_qmc.(_, pval)->shapiro(samples[:, i])
A:scipy.stats.tests.test_qmc.cov->numpy.cov(samples.transpose())
A:scipy.stats.tests.test_qmc.mean->numpy.array([0, 1, 2])
A:scipy.stats.tests.test_qmc.a->numpy.random.RandomState(1809831).standard_normal((3, 3))
A:scipy.stats.tests.test_qmc.base_l1->_l1_norm(sample)
A:scipy.stats.tests.test_qmc.base_l2->l2_norm(sample)
A:scipy.stats.tests.test_qmc.sample_lloyd->_lloyd_centroidal_voronoi_tessellation(sample, maxiter=1)
A:scipy.stats.tests.test_qmc.curr_l1->_l1_norm(sample_lloyd)
A:scipy.stats.tests.test_qmc.curr_l2->l2_norm(sample_lloyd)
A:scipy.stats.tests.test_qmc.sample_orig->numpy.array([[0.1, 0.1], [0.1, 0.2], [0.2, 0.1], [0.2, 0.2]])
A:scipy.stats.tests.test_qmc.sample_copy->numpy.array([[0.1, 0.1], [0.1, 0.2], [0.2, 0.1], [0.2, 0.2]]).copy()
A:scipy.stats.tests.test_qmc.new_sample->_lloyd_centroidal_voronoi_tessellation(sample=sample_orig)
scipy.stats.tests.test_qmc.QMCEngineTests
scipy.stats.tests.test_qmc.QMCEngineTests.engine(self,scramble:bool,**kwargs)->QMCEngine
scipy.stats.tests.test_qmc.QMCEngineTests.reference(self,scramble:bool)->np.ndarray
scipy.stats.tests.test_qmc.QMCEngineTests.test_0dim(self,scramble)
scipy.stats.tests.test_qmc.QMCEngineTests.test_0sample(self,scramble)
scipy.stats.tests.test_qmc.QMCEngineTests.test_1sample(self,scramble)
scipy.stats.tests.test_qmc.QMCEngineTests.test_bounds(self,scramble)
scipy.stats.tests.test_qmc.QMCEngineTests.test_continuing(self,scramble)
scipy.stats.tests.test_qmc.QMCEngineTests.test_distribution(self,scramble)
scipy.stats.tests.test_qmc.QMCEngineTests.test_fast_forward(self,scramble)
scipy.stats.tests.test_qmc.QMCEngineTests.test_optimizers(self,optimization,metric)
scipy.stats.tests.test_qmc.QMCEngineTests.test_raises_optimizer(self)
scipy.stats.tests.test_qmc.QMCEngineTests.test_reset(self,scramble)
scipy.stats.tests.test_qmc.QMCEngineTests.test_sample(self,scramble)
scipy.stats.tests.test_qmc.RandomEngine(self,d,optimization=None,seed=None)
scipy.stats.tests.test_qmc.RandomEngine.__init__(self,d,optimization=None,seed=None)
scipy.stats.tests.test_qmc.RandomEngine._random(self,n=1,*,workers=1)
scipy.stats.tests.test_qmc.TestHalton(QMCEngineTests)
scipy.stats.tests.test_qmc.TestHalton.test_workers(self)
scipy.stats.tests.test_qmc.TestLHS(QMCEngineTests)
scipy.stats.tests.test_qmc.TestLHS.test_continuing(self,*args)
scipy.stats.tests.test_qmc.TestLHS.test_fast_forward(self,*args)
scipy.stats.tests.test_qmc.TestLHS.test_raises(self)
scipy.stats.tests.test_qmc.TestLHS.test_sample(self,*args)
scipy.stats.tests.test_qmc.TestLHS.test_sample_stratified(self,optimization,scramble,strength)
scipy.stats.tests.test_qmc.TestLloyd
scipy.stats.tests.test_qmc.TestLloyd.test_lloyd(self)
scipy.stats.tests.test_qmc.TestLloyd.test_lloyd_errors(self)
scipy.stats.tests.test_qmc.TestLloyd.test_lloyd_non_mutating(self)
scipy.stats.tests.test_qmc.TestMultinomialQMC
scipy.stats.tests.test_qmc.TestMultinomialQMC.test_FindIndex(self)
scipy.stats.tests.test_qmc.TestMultinomialQMC.test_MultinomialBasicDraw(self)
scipy.stats.tests.test_qmc.TestMultinomialQMC.test_MultinomialDistribution(self)
scipy.stats.tests.test_qmc.TestMultinomialQMC.test_other_engine(self)
scipy.stats.tests.test_qmc.TestMultinomialQMC.test_validations(self)
scipy.stats.tests.test_qmc.TestMultivariateNormalQMC
scipy.stats.tests.test_qmc.TestMultivariateNormalQMC.test_MultivariateNormalQMC(self)
scipy.stats.tests.test_qmc.TestMultivariateNormalQMC.test_MultivariateNormalQMCDegenerate(self)
scipy.stats.tests.test_qmc.TestMultivariateNormalQMC.test_MultivariateNormalQMCInvTransform(self)
scipy.stats.tests.test_qmc.TestMultivariateNormalQMC.test_MultivariateNormalQMCNonPD(self)
scipy.stats.tests.test_qmc.TestMultivariateNormalQMC.test_MultivariateNormalQMCSeeded(self)
scipy.stats.tests.test_qmc.TestMultivariateNormalQMC.test_MultivariateNormalQMCSeededInvTransform(self)
scipy.stats.tests.test_qmc.TestMultivariateNormalQMC.test_MultivariateNormalQMCShapiro(self)
scipy.stats.tests.test_qmc.TestMultivariateNormalQMC.test_MultivariateNormalQMCShapiroInvTransform(self)
scipy.stats.tests.test_qmc.TestMultivariateNormalQMC.test_validations(self)
scipy.stats.tests.test_qmc.TestNormalQMC
scipy.stats.tests.test_qmc.TestNormalQMC.test_NormalQMC(self)
scipy.stats.tests.test_qmc.TestNormalQMC.test_NormalQMCInvTransform(self)
scipy.stats.tests.test_qmc.TestNormalQMC.test_NormalQMCSeeded(self)
scipy.stats.tests.test_qmc.TestNormalQMC.test_NormalQMCSeededInvTransform(self)
scipy.stats.tests.test_qmc.TestNormalQMC.test_NormalQMCShapiro(self)
scipy.stats.tests.test_qmc.TestNormalQMC.test_NormalQMCShapiroInvTransform(self)
scipy.stats.tests.test_qmc.TestNormalQMC.test_other_engine(self)
scipy.stats.tests.test_qmc.TestPoisson(QMCEngineTests)
scipy.stats.tests.test_qmc.TestPoisson.test_bounds(self,*args)
scipy.stats.tests.test_qmc.TestPoisson.test_continuing(self,*args)
scipy.stats.tests.test_qmc.TestPoisson.test_fast_forward(self,*args)
scipy.stats.tests.test_qmc.TestPoisson.test_fill_space(self)
scipy.stats.tests.test_qmc.TestPoisson.test_mindist(self)
scipy.stats.tests.test_qmc.TestPoisson.test_raises(self)
scipy.stats.tests.test_qmc.TestPoisson.test_sample(self,*args)
scipy.stats.tests.test_qmc.TestSobol(QMCEngineTests)
scipy.stats.tests.test_qmc.TestSobol.test_64bits(self)
scipy.stats.tests.test_qmc.TestSobol.test_bits(self,bits)
scipy.stats.tests.test_qmc.TestSobol.test_high_dim(self)
scipy.stats.tests.test_qmc.TestSobol.test_raise(self)
scipy.stats.tests.test_qmc.TestSobol.test_random_base2(self)
scipy.stats.tests.test_qmc.TestSobol.test_warning(self)
scipy.stats.tests.test_qmc.TestUtils
scipy.stats.tests.test_qmc.TestUtils.test_discrepancy(self)
scipy.stats.tests.test_qmc.TestUtils.test_discrepancy_alternative_implementation(self)
scipy.stats.tests.test_qmc.TestUtils.test_discrepancy_errors(self)
scipy.stats.tests.test_qmc.TestUtils.test_discrepancy_parallel(self,monkeypatch)
scipy.stats.tests.test_qmc.TestUtils.test_n_primes(self)
scipy.stats.tests.test_qmc.TestUtils.test_perm_discrepancy(self)
scipy.stats.tests.test_qmc.TestUtils.test_primes(self)
scipy.stats.tests.test_qmc.TestUtils.test_scale(self)
scipy.stats.tests.test_qmc.TestUtils.test_scale_errors(self)
scipy.stats.tests.test_qmc.TestUtils.test_scale_random(self)
scipy.stats.tests.test_qmc.TestUtils.test_update_discrepancy(self)
scipy.stats.tests.test_qmc.TestVDC
scipy.stats.tests.test_qmc.TestVDC.test_invalid_base_error(self)
scipy.stats.tests.test_qmc.TestVDC.test_van_der_corput(self)
scipy.stats.tests.test_qmc.TestVDC.test_van_der_corput_scramble(self)
scipy.stats.tests.test_qmc.l2_norm(sample)
scipy.stats.tests.test_qmc.test_integers()
scipy.stats.tests.test_qmc.test_integers_nd()
scipy.stats.tests.test_qmc.test_raises()
scipy.stats.tests.test_qmc.test_subclassing_QMCEngine()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_variation.py----------------------------------------
A:scipy.stats.tests.test_variation.x->numpy.array([[1.0, 2.0, nan, 3.0], [0.0, 4.0, 3.0, 1.0], [nan, -0.5, 0.5, nan], [nan, 9.0, 9.0, nan], [nan, nan, nan, nan], [3.0, 3.0, 3.0, 3.0], [0.0, 0.0, 0.0, 0.0]])
A:scipy.stats.tests.test_variation.v->variation(x, axis=1, ddof=ddof, nan_policy='omit')
A:scipy.stats.tests.test_variation.y->variation(a, ddof=1)
A:scipy.stats.tests.test_variation.expected->numpy.array([[np.sqrt(2) / 2], [np.sqrt(2) / 7]])
A:scipy.stats.tests.test_variation.a->numpy.array([1, 2, 3, 4, 5])
A:scipy.stats.tests.test_variation.x2->numpy.array([[np.nan, 1, -10, np.nan], [-20, -3, np.nan, np.nan]])
A:scipy.stats.tests.test_variation.y2->variation(x2, axis=1)
A:scipy.stats.tests.test_variation.x1->numpy.array([-3, -5])
A:scipy.stats.tests.test_variation.nan_a->numpy.array([1, 2, 3, np.nan, 4, 5, np.nan])
A:scipy.stats.tests.test_variation.nan_y->variation(nan_a, nan_policy='omit', ddof=1)
scipy.stats.tests.test_variation.TestVariation
scipy.stats.tests.test_variation.TestVariation.test_2d_size_zero_with_axis(self,axis,expected)
scipy.stats.tests.test_variation.TestVariation.test_axis_none(self)
scipy.stats.tests.test_variation.TestVariation.test_bad_axis(self)
scipy.stats.tests.test_variation.TestVariation.test_bad_nan_policy(self)
scipy.stats.tests.test_variation.TestVariation.test_combined_edge_cases(self,nan_policy)
scipy.stats.tests.test_variation.TestVariation.test_ddof(self)
scipy.stats.tests.test_variation.TestVariation.test_keepdims(self)
scipy.stats.tests.test_variation.TestVariation.test_keepdims_and_ddof_eq_len_plus_incr(self,incr,expected_fill)
scipy.stats.tests.test_variation.TestVariation.test_keepdims_size0(self,axis,expected)
scipy.stats.tests.test_variation.TestVariation.test_mean_zero(self)
scipy.stats.tests.test_variation.TestVariation.test_more_nan_policy_omit_tests(self,ddof,expected)
scipy.stats.tests.test_variation.TestVariation.test_nan_policy_raise(self)
scipy.stats.tests.test_variation.TestVariation.test_neg_inf(self)
scipy.stats.tests.test_variation.TestVariation.test_propagate_nan(self)
scipy.stats.tests.test_variation.TestVariation.test_return_nan(self,x)
scipy.stats.tests.test_variation.TestVariation.test_scalar(self)
scipy.stats.tests.test_variation.TestVariation.test_sign(self,sgn)
scipy.stats.tests.test_variation.TestVariation.test_variation_ddof(self)
scipy.stats.tests.test_variation.TestVariation.test_variation_nan(self,nan_policy,expected)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_distributions.py----------------------------------------
A:scipy.stats.tests.test_distributions.vm->scipy.stats.vonmises(800)
A:scipy.stats.tests.test_distributions.actual->scipy.stats.invgauss.cdf(0.000102, 0.0001)
A:scipy.stats.tests.test_distributions.expected->numpy.array([0.0176832, 0.0223803, 0.0292315, 0.0397873, 0.0567945, 0.0830763, 0.121242, 0.173323, 0.24011, 0.320592, 0.411731, 0.508717, 0.605702, 0.696841, 0.777324, 0.844111, 0.896192, 0.934357, 0.960639, 0.977646])
A:scipy.stats.tests.test_distributions.pdf->scipy.stats.levy_stable.pdf(xs, 1, betas, scale=1, loc=0)
A:scipy.stats.tests.test_distributions.entropy->scipy.stats.vonmises.entropy(kappa)
A:scipy.stats.tests.test_distributions.seed->abs(hash('von_mises_rvs'))
A:scipy.stats.tests.test_distributions.rng1->numpy.random.default_rng(seed)
A:scipy.stats.tests.test_distributions.rng2->numpy.random.default_rng(seed)
A:scipy.stats.tests.test_distributions.rng3->numpy.random.default_rng(seed)
A:scipy.stats.tests.test_distributions.rvs1->scipy.stats.vonmises(1, loc=0, scale=1).rvs(random_state=rng1)
A:scipy.stats.tests.test_distributions.rvs2->scipy.stats.reciprocal(10 ** (-3), 10 ** 0).rvs(size=10000, random_state=rng)
A:scipy.stats.tests.test_distributions.rvs3->scipy.stats.vonmises(1, loc=0, scale=2 * np.pi / abs(rvs1) + 1).rvs(random_state=rng3)
A:scipy.stats.tests.test_distributions.logpdf->scipy.stats.gamma.logpdf(0, 1)
A:scipy.stats.tests.test_distributions.rng->numpy.random.default_rng(98643218961)
A:scipy.stats.tests.test_distributions.res->re.findall('logpdf\\(x, a, b, loc=0, scale=1\\)', dummy_distr.__doc__)
A:scipy.stats.tests.test_distributions.mle_analytical->getattr(stats, distname).fit(data, **kwds)
A:scipy.stats.tests.test_distributions.numerical_opt->super(type(dist), dist).fit(data, **kwds)
A:scipy.stats.tests.test_distributions.ll_mle_analytical->func(mle_analytical, data)
A:scipy.stats.tests.test_distributions.ll_numerical_opt->func(numerical_opt, data)
A:scipy.stats.tests.test_distributions.nshapes->len(dist.shapes.split(','))
A:scipy.stats.tests.test_distributions.all_fixed->dict(zip(param, np.arange(len(param))))
A:scipy.stats.tests.test_distributions.dct->dict(name='dummy', shapes='a, b, c, lambda')
A:scipy.stats.tests.test_distributions.dist->getattr(stats, distname)
A:scipy.stats.tests.test_distributions.vals->scipy.stats.dlaplace.rvs(1.5, size=(2, 50))
A:scipy.stats.tests.test_distributions.val->scipy.stats.argus.stats(chi, moments='mv')
A:scipy.stats.tests.test_distributions.out->numpy.select([k >= 30, k >= 5], [1.0, (k - 5.0 + 1) / (30 - 5.0)], 0)
A:scipy.stats.tests.test_distributions.x->numpy.array([[1.0], [4.0]])
A:scipy.stats.tests.test_distributions.k->numpy.arange(-10, 15)
A:scipy.stats.tests.test_distributions.vals1->numpy.log(stats.geom.pmf([1, 2, 3], 0.5))
A:scipy.stats.tests.test_distributions.vals2->scipy.stats.geom.logpmf([1, 2, 3], 0.5)
A:scipy.stats.tests.test_distributions.b->scipy.stats.ncx2._cdfvec(np.arange(20, 25, 0.2), 2, 107.458615)
A:scipy.stats.tests.test_distributions.expected_p->numpy.array([0.75, 0.25])
A:scipy.stats.tests.test_distributions.h->scipy.stats.genextreme.entropy(-10)
A:scipy.stats.tests.test_distributions.p->scipy.stats.wrapcauchy.cdf([x1, x2], c)
A:scipy.stats.tests.test_distributions.q->scipy.stats.ncf.ppf(x, *par)
A:scipy.stats.tests.test_distributions.xx->scipy.stats.levy.ppf(expected)
A:scipy.stats.tests.test_distributions.s->scipy.stats.genextreme.sf(x, 0)
A:scipy.stats.tests.test_distributions.ref->getattr(stats, distname).mean(loc=10, scale=5)
A:scipy.stats.tests.test_distributions.gig->scipy.stats.geninvgauss(p, b)
A:scipy.stats.tests.test_distributions.(_, p)->scipy.stats.kstest(r, lambda x: 1 - (1 - x ** 2) ** (3 / 2))
A:scipy.stats.tests.test_distributions.rvs->scipy.stats.loguniform.rvs(0.1, 1, size=1000, random_state=rng)
A:scipy.stats.tests.test_distributions.ig->scipy.stats.geninvgauss.rvs(size=1500, p=-0.5, b=1, random_state=1234)
A:scipy.stats.tests.test_distributions.pdf_ig->scipy.stats.geninvgauss.pdf(x, p=-0.5, b=1 / mu, scale=mu)
A:scipy.stats.tests.test_distributions.cdf_ig->scipy.stats.geninvgauss.cdf(x, p=-0.5, b=1 / mu, scale=mu)
A:scipy.stats.tests.test_distributions.vals_R->numpy.array([1.01881590921421e-13, 6.13697274983578e-11, 3.37504977637992e-08, 1.55258698166181e-05, 0.00447005453832497, 0.228935323956347, 0.755759458895243, 0.953061062884484, 0.992598013917513, 0.998942646586662])
A:scipy.stats.tests.test_distributions.gh->scipy.stats.genhyperbolic(*args, loc=mu, scale=delta)
A:scipy.stats.tests.test_distributions.df->numpy.random.uniform(0, 10, size=df_infmask.shape)
A:scipy.stats.tests.test_distributions.loc->numpy.empty((0,))
A:scipy.stats.tests.test_distributions.r_cdf->numpy.array([8.034920282e-07, 2.512671945e-05, 0.3186661051, 0.9988650664, 0.9999848769])
A:scipy.stats.tests.test_distributions.x_test->numpy.array([0.001, 0.5, 0.999])
A:scipy.stats.tests.test_distributions.vals_cdf->scipy.stats.kstwo.cdf(x, n)
A:scipy.stats.tests.test_distributions.r_pdf->numpy.array([1.359600783e-06, 4.413878805e-05, 0.4555014266, 0.0007450485342, 8.917889931e-06])
A:scipy.stats.tests.test_distributions.vals_pdf->scipy.stats.norminvgauss.pdf(x_test, a=1, b=0.5)
A:scipy.stats.tests.test_distributions.i->scipy.stats.norminvgauss.isf(sf, a, b)
A:scipy.stats.tests.test_distributions.dst->scipy.stats.norminvgauss(1, 0)
A:scipy.stats.tests.test_distributions.sf->scipy.stats.nakagami.sf(x0, nu)
A:scipy.stats.tests.test_distributions.isf->scipy.stats.truncweibull_min.isf(0.5, c, a, b)
A:scipy.stats.tests.test_distributions.gamma->numpy.sqrt(a ** 2 - b ** 2)
A:scipy.stats.tests.test_distributions.vals_sf->scipy.stats.kstwo.sf(xn, n)
A:scipy.stats.tests.test_distributions.pdf1->scipy.stats.truncweibull_min.pdf(x, c, a, b)
A:scipy.stats.tests.test_distributions.pdf2->numpy.array([1 / 10, 1 / 250])
A:scipy.stats.tests.test_distributions.rvs_laplace->scipy.stats.laplace.rvs(size=1000)
A:scipy.stats.tests.test_distributions.rvs_norm->scipy.stats.norm.rvs(scale=1 / 2 ** 0.5, size=1000)
A:scipy.stats.tests.test_distributions.points->numpy.array([-np.log(16), np.log(10)])
A:scipy.stats.tests.test_distributions.cdf1->scipy.stats.truncweibull_min.cdf(x, c, a, b)
A:scipy.stats.tests.test_distributions.sf1->scipy.stats.laplace_asymmetric.sf(points, kappa)
A:scipy.stats.tests.test_distributions.cdf2->numpy.array([1 / 5, 1 - 1 / 500])
A:scipy.stats.tests.test_distributions.sf2->numpy.array([4 / 5, 1 / 500])
A:scipy.stats.tests.test_distributions.ppf1->scipy.stats.laplace_asymmetric.ppf(cdf2, kappa)
A:scipy.stats.tests.test_distributions.isf1->scipy.stats.laplace_asymmetric.isf(sf2, kappa)
A:scipy.stats.tests.test_distributions.xvals->numpy.linspace(low, high, 11)
A:scipy.stats.tests.test_distributions.cdfs->scipy.stats.betaprime.cdf(x, alpha, beta)
A:scipy.stats.tests.test_distributions.sfs->scipy.stats.truncnorm.sf(xvals, low, high)
A:scipy.stats.tests.test_distributions.pdfs->scipy.stats.truncnorm.pdf(xvals, low, high)
A:scipy.stats.tests.test_distributions.expected_cdfs->numpy.array([0, 0, 1, 1])
A:scipy.stats.tests.test_distributions.expected_sfs->numpy.array([1.0, 1.0, 0.0, 0.0])
A:scipy.stats.tests.test_distributions.expected_pdfs->numpy.array([0, 2.73349092e-16, 39.0256074, 0])
A:scipy.stats.tests.test_distributions.pvals->numpy.array([0.25, 0.45, 0.3])
A:scipy.stats.tests.test_distributions.ppfs->scipy.stats.truncnorm.ppf(pvals, low, high)
A:scipy.stats.tests.test_distributions.expected_ppfs->numpy.array([low, np.sign(low) * 39.01775731, high])
A:scipy.stats.tests.test_distributions.(m, v, s, k)->scipy.stats.nct.stats(df=3.1, nc=0.3, moments='mvsk')
A:scipy.stats.tests.test_distributions._truncnorm_stats_data->numpy.array(_truncnorm_stats_data)
A:scipy.stats.tests.test_distributions.(m, v)->scipy.stats.zipf.stats(a=2.8)
A:scipy.stats.tests.test_distributions.a->numpy.array([np.inf, np.inf, np.inf, np.inf, -1.31086])
A:scipy.stats.tests.test_distributions.logp->scipy.stats.cosine.logpdf([-np.pi, np.pi])
A:scipy.stats.tests.test_distributions.hgpmf->scipy.stats.hypergeom.pmf(2, tot, good, N)
A:scipy.stats.tests.test_distributions.res2->trapezoid(entr(cb.pdf(x)), x)
A:scipy.stats.tests.test_distributions.hg->scipy.stats.hypergeom(1, 1, 1)
A:scipy.stats.tests.test_distributions.result->scipy.stats.ncx2.rvs(df=10, nc=0, random_state=1)
A:scipy.stats.tests.test_distributions.y->scipy.stats.levy_l.sf(x)
A:scipy.stats.tests.test_distributions.lp->scipy.stats.weibull_min.logpdf(x, c, scale=scale)
A:scipy.stats.tests.test_distributions.table->numpy.array([0.5, -1.9635, 4.9348, -1.5351, 4.0, 1.0, -0.5772, 1.6449, -1.1395, 2.4, 12.0, 2.4427, 0.0869, -0.2946, 0.1735]).reshape(-1, 5)
A:scipy.stats.tests.test_distributions.computed->scipy.stats.invweibull.isf(p, c)
A:scipy.stats.tests.test_distributions.med->scipy.stats.loggamma.median(c)
A:scipy.stats.tests.test_distributions.btest->scipy.stats.binomtest(np.count_nonzero(x < med), len(x))
A:scipy.stats.tests.test_distributions.ci->scipy.stats.binomtest(np.count_nonzero(x < med), len(x)).proportion_ci(confidence_level=0.999)
A:scipy.stats.tests.test_distributions.data->scipy.stats.norm.rvs(loc=1.0, scale=2.5, size=10000, random_state=123)
A:scipy.stats.tests.test_distributions.n->len(x)
A:scipy.stats.tests.test_distributions.fit_method->scipy.stats.logistic.fit(data)
A:scipy.stats.tests.test_distributions.m->scipy.stats.argus.mean(chi, scale=1)
A:scipy.stats.tests.test_distributions.kwds->dict()
A:scipy.stats.tests.test_distributions.(loc, scale)->scipy.stats.cauchy.fit(x + offset)
A:scipy.stats.tests.test_distributions.(shape_mle_a, loc_mle_a, scale_mle_a)->scipy.stats.pareto.fit(data, floc=2)
A:scipy.stats.tests.test_distributions._->scipy.stats.pareto.fit(data)
A:scipy.stats.tests.test_distributions.c->numpy.array([[0.03, 0.25], [0.5, 0.75]])
A:scipy.stats.tests.test_distributions.(a, b)->getattr(stats, distname).support(*args)
A:scipy.stats.tests.test_distributions.rv->scipy.stats.loguniform(10 ** (-3), 10 ** 0)
A:scipy.stats.tests.test_distributions.pdf0->scipy.stats.genpareto.pdf(x, c)
A:scipy.stats.tests.test_distributions.pdfc->scipy.stats.genpareto.pdf(x, c + dc)
A:scipy.stats.tests.test_distributions.cdf0->scipy.stats.genpareto.cdf(x, c)
A:scipy.stats.tests.test_distributions.cdfc->scipy.stats.genpareto.cdf(x, c + dc)
A:scipy.stats.tests.test_distributions.ppf0->scipy.stats.genpareto.ppf(q, c)
A:scipy.stats.tests.test_distributions.ppfc->scipy.stats.genpareto.ppf(q, c + dc)
A:scipy.stats.tests.test_distributions.isf0->scipy.stats.genpareto.isf(q, c)
A:scipy.stats.tests.test_distributions.isfc->scipy.stats.genpareto.isf(q, c + dc)
A:scipy.stats.tests.test_distributions.v->scipy.stats.argus.var(chi, scale=1)
A:scipy.stats.tests.test_distributions.moment->scipy.stats.pearson3.moment(1, 1e-06)
A:scipy.stats.tests.test_distributions.skew->numpy.array([[-0.5], [1.5]])
A:scipy.stats.tests.test_distributions.vals_comp->scipy.stats.uniform.cdf(x)
A:scipy.stats.tests.test_distributions.ln2->numpy.log(2)
A:scipy.stats.tests.test_distributions.interval->scipy.stats.poisson.interval(0.95, 0)
A:scipy.stats.tests.test_distributions.mu->numpy.array([0.0, 1.0, 2.0])
A:scipy.stats.tests.test_distributions.lg->scipy.special.gammaln(n + 1)
A:scipy.stats.tests.test_distributions.probs->scipy.stats.kstwo.cdf(xn, ns)
A:scipy.stats.tests.test_distributions.diffs->numpy.diff(probs)
A:scipy.stats.tests.test_distributions.vals_isf->scipy.stats.kstwo.isf(xn, n)
A:scipy.stats.tests.test_distributions.xn->scipy.stats.kstwo.ppf(probs, n)
A:scipy.stats.tests.test_distributions.ratios->numpy.array([1.0 / 4, 1.0 / 3, 1.0 / 2, 1, 2, 3])
A:scipy.stats.tests.test_distributions.(s, k)->scipy.stats.zipf.stats(a=4.8, moments='sk')
A:scipy.stats.tests.test_distributions.dl->scipy.stats.dlaplace(a)
A:scipy.stats.tests.test_distributions.pp->scipy.stats.dlaplace(a).pmf(xx)
A:scipy.stats.tests.test_distributions.(mu, loc, scale)->scipy.stats.invgauss.fit(data, floc=rvs_loc - 1, fscale=rvs_scale + 1)
A:scipy.stats.tests.test_distributions.mu_temp->numpy.mean(data)
A:scipy.stats.tests.test_distributions.super_fitted->super_fit(data, floc=0, fmu=2)
A:scipy.stats.tests.test_distributions.invgauss_fit->scipy.stats.invgauss.fit(data, floc=0, fmu=2)
A:scipy.stats.tests.test_distributions.cdf_actual->scipy.stats.invgauss.cdf(0.001, mu=1.05)
A:scipy.stats.tests.test_distributions.sf_actual->scipy.stats.invgauss.sf(110, mu=1.05)
A:scipy.stats.tests.test_distributions.logcdf->scipy.stats.invgauss.logcdf(110, 1.05)
A:scipy.stats.tests.test_distributions.logsf->scipy.stats.invgauss.logsf(110, 1.05)
A:scipy.stats.tests.test_distributions.loc_mle->numpy.median(data)
A:scipy.stats.tests.test_distributions.(loc_opt, scale_opt)->super(type(stats.laplace), stats.laplace).fit(data)
A:scipy.stats.tests.test_distributions.ll_mle->ll(loc, scale, data)
A:scipy.stats.tests.test_distributions.ll_opt->ll(loc_opt, scale_opt, data)
A:scipy.stats.tests.test_distributions.p0->scipy.stats.laplace.sf(x)
A:scipy.stats.tests.test_distributions.p1->scipy.stats.laplace.sf(-x)
A:scipy.stats.tests.test_distributions.kwds['floc']->numpy.nextafter(data.min(), -np.inf)
A:scipy.stats.tests.test_distributions.mvsk->scipy.stats.powerlaw.stats(a, moments='mvsk')
A:scipy.stats.tests.test_distributions.ans->_f.pdf(_f.a, *_args)
A:scipy.stats.tests.test_distributions.dfn->numpy.array([[3], [11]])
A:scipy.stats.tests.test_distributions.dfd->numpy.array([11, 12])
A:scipy.stats.tests.test_distributions.df_infmask->numpy.asarray(df_infmask, dtype=bool)
A:scipy.stats.tests.test_distributions.t_dist->scipy.stats.t(df=df, loc=3, scale=1)
A:scipy.stats.tests.test_distributions.t_dist_ref->scipy.stats.t(df=df[~df_infmask], loc=3, scale=1)
A:scipy.stats.tests.test_distributions.norm_dist->scipy.stats.norm(loc=3, scale=1)
A:scipy.stats.tests.test_distributions.t_meth->getattr(t_dist, methname)
A:scipy.stats.tests.test_distributions.t_meth_ref->getattr(t_dist_ref, methname)
A:scipy.stats.tests.test_distributions.norm_meth->getattr(norm_dist, methname)
A:scipy.stats.tests.test_distributions.res_ex_inf->scipy.stats.norm.entropy(loc=3, scale=1)
A:scipy.stats.tests.test_distributions.res_ex_noinf->scipy.stats.t.entropy(df=df[~df_infmask], loc=3, scale=1)
A:scipy.stats.tests.test_distributions.r->scipy.stats.argus.rvs(chi, size=500, random_state=890981)
A:scipy.stats.tests.test_distributions.xk->numpy.arange(12).reshape((3, 4))
A:scipy.stats.tests.test_distributions.pk->numpy.array([[0.1, 0.1, 0.15, 0.05], [0.1, 0.1, 0.05, 0.05], [0.1, 0.1, 0.05, 0.05]])
A:scipy.stats.tests.test_distributions.self.rng->check_random_state(1234)
A:scipy.stats.tests.test_distributions.X->scipy.stats.skewnorm.rvs(a=-4, size=int(1000000.0), loc=5, scale=2, random_state=self.rng)
A:scipy.stats.tests.test_distributions.mom->scipy.stats.skewnorm.moment(order, a)
A:scipy.stats.tests.test_distributions.(a2, loc2, scale2)->scipy.stats.skewnorm.fit(rvs, -1.5, floc=3)
A:scipy.stats.tests.test_distributions.(a3, loc3, scale3)->scipy.stats.skewnorm.fit(rvs, -1.6, floc=3)
A:scipy.stats.tests.test_distributions.(a4, loc4, scale4)->scipy.stats.skewnorm.fit(rvs, 3, fscale=3, method='mm')
A:scipy.stats.tests.test_distributions.dist4->scipy.stats.weibull_min(c4, loc4, scale4)
A:scipy.stats.tests.test_distributions.(a5, loc5, scale5)->scipy.stats.skewnorm.fit(rvs, method='mm')
A:scipy.stats.tests.test_distributions.sts->scipy.stats.exponnorm.stats(K, loc=mu, scale=sig, moments='mvsk')
A:scipy.stats.tests.test_distributions.cdf->scipy.stats.weibull_min.cdf(x, c, scale=scale)
A:scipy.stats.tests.test_distributions.skpmfR->numpy.array([4.225458296192689e-05, 0.00011404838449648488, 0.0002897962580175266, 0.0006917707818210123, 0.0015480716105844708, 0.003241227496343389, 0.006337370717512329, 0.011552351566696643, 0.019606152375042644, 0.030947164083410337, 0.04540173756676736, 0.06189432816682069, 0.07842460950017058, 0.09241881253357313, 0.10139793148019728, 0.10371927988298846, 0.09907658307740609, 0.08854666007308956, 0.07418784205248681, 0.05839277286220025, 0.04326869295301316, 0.030248159818374226, 0.01999143430560302, 0.01251687730330118, 0.007438987622622971])
A:scipy.stats.tests.test_distributions.skcdfR->numpy.array([6.40614753861921e-05, 0.00017810985988267694, 0.00046790611790020336, 0.0011596768997212152, 0.0027077485103056847, 0.005948976006649072, 0.012286346724161398, 0.023838698290858034, 0.04344485066590067, 0.074392014749311, 0.11979375231607835, 0.181688080482899, 0.2601126899830695, 0.3525315025166426, 0.4539294339968399, 0.5576487138798283, 0.6567252969572344, 0.7452719570303239, 0.8194597990828106, 0.8778525719450109, 0.921121264898024, 0.9513694247163982, 0.9713608590220012, 0.9838777363253024, 0.9913167239479254])
A:scipy.stats.tests.test_distributions.inv_R->numpy.array([0.0004944464889611935, 0.0018360586912635726, 0.012266391994251835])
A:scipy.stats.tests.test_distributions.count_list->numpy.array([10, 100, 1000])
A:scipy.stats.tests.test_distributions.inv->scipy.stats.beta.ppf(q, a, b)
A:scipy.stats.tests.test_distributions.count_->numpy.arange(1, 20)
A:scipy.stats.tests.test_distributions.z->scipy.stats.gumbel_l.logsf(x)
A:scipy.stats.tests.test_distributions.u->numpy.exp(y)
A:scipy.stats.tests.test_distributions.(fitted_loc, _)->scipy.stats.gumbel_l.fit(data, floc=loc)
A:scipy.stats.tests.test_distributions.ls->scipy.stats.truncweibull_min.logsf(30, 2, a, b, scale=3)
A:scipy.stats.tests.test_distributions.(stat, p)->scipy.stats.kstest(x, 'levy_stable', args=(alpha, beta, loc, scale))
A:scipy.stats.tests.test_distributions.(alpha1, beta1, loc1, scale1)->scipy.stats.levy_stable._fitstart(x)
A:scipy.stats.tests.test_distributions.(alpha2, beta2, loc2, scale2)->scipy.stats.levy_stable._fitstart(x2)
A:scipy.stats.tests.test_distributions.fit->scipy.stats.levy_stable._fitstart(data)
A:scipy.stats.tests.test_distributions.uname->platform.uname()
A:scipy.stats.tests.test_distributions.platform_desc->'/'.join([uname.system, uname.machine, uname.processor])
A:scipy.stats.tests.test_distributions.subdata2->rec_append_fields(subdata, ['calc', 'abserr', 'relerr'], [p, np.abs(p - subdata['p']), np.abs(p - subdata['p']) / np.abs(subdata['p'])])
A:scipy.stats.tests.test_distributions.v1->function(subdata['x'], subdata['alpha'], subdata['beta'], scale=2, loc=3)
A:scipy.stats.tests.test_distributions.xs->numpy.array([0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4])
A:scipy.stats.tests.test_distributions.density->numpy.array([0.3183, 0.3096, 0.2925, 0.2622, 0.1591, 0.1587, 0.1599, 0.1635, 0.0637, 0.0729, 0.0812, 0.0955, 0.0318, 0.039, 0.0458, 0.0586, 0.0187, 0.0236, 0.0285, 0.0384])
A:scipy.stats.tests.test_distributions.betas->numpy.array([0, 0.25, 0.5, 1, 0, 0.25, 0.5, 1, 0, 0.25, 0.5, 1, 0, 0.25, 0.5, 1, 0, 0.25, 0.5, 1])
A:scipy.stats.tests.test_distributions.observed->scipy.stats.levy_stable.stats(params[0], params[1], loc=params[2], scale=params[3], moments='mvsk')
A:scipy.stats.tests.test_distributions.(b, c)->argsreduce(a > 0, a, 2)
A:scipy.stats.tests.test_distributions.distfunc->getattr(stats, dist)
A:scipy.stats.tests.test_distributions.expected_shape->numpy.sqrt(((np.log(x) - np.log(20)) ** 2).mean())
A:scipy.stats.tests.test_distributions.meanlog->numpy.log(x).mean()
A:scipy.stats.tests.test_distributions.(a, loc, scale)->scipy.stats.gamma.fit(x, floc=floc, fscale=fscale)
A:scipy.stats.tests.test_distributions.s1->numpy.log(x).sum()
A:scipy.stats.tests.test_distributions.s2->numpy.log(1 - x).sum()
A:scipy.stats.tests.test_distributions.psiab->scipy.special.psi(a + b)
A:scipy.stats.tests.test_distributions.(a, b, loc, scale)->scipy.stats.loguniform.fit(rvs, fscale=2, method=method)
A:scipy.stats.tests.test_distributions.(da, db)->mlefunc(a2, b2, x2)
A:scipy.stats.tests.test_distributions.(a2, b2, loc2, scale2)->scipy.stats.beta.fit(x2, f1=2, floc=0, fscale=1)
A:scipy.stats.tests.test_distributions.lnxm1->numpy.log(x - 1)
A:scipy.stats.tests.test_distributions.(shape, loc, scale)->scipy.stats.lognorm.fit(x, floc=1, fix_s=0.75)
A:scipy.stats.tests.test_distributions.res_1->scipy.stats.beta.fit(x, f0=3.0, method=method)
A:scipy.stats.tests.test_distributions.res_2->scipy.stats.beta.fit(x, fix_a=3.0, method=method)
A:scipy.stats.tests.test_distributions.res_3->scipy.stats.beta.fit(x, f1=4.0, method=method)
A:scipy.stats.tests.test_distributions.res_4->scipy.stats.beta.fit(x, fix_b=4.0, method=method)
A:scipy.stats.tests.test_distributions.res_5->scipy.stats.beta.fit(x, fa=3.0, floc=0, fscale=1, method=method)
A:scipy.stats.tests.test_distributions.(aa, ll, ss)->scipy.stats.gamma.fit(data, fa=a, method=method)
A:scipy.stats.tests.test_distributions.frozen->scipy.stats.norm()
A:scipy.stats.tests.test_distributions.result_f->scipy.stats.norm().moment(2)
A:scipy.stats.tests.test_distributions.m1->scipy.stats.truncweibull_min.moment(1, c, a, b)
A:scipy.stats.tests.test_distributions.m2->scipy.stats.truncweibull_min.moment(2, c, a, b)
A:scipy.stats.tests.test_distributions.rv1->scipy.stats.genpareto(c=0.1)
A:scipy.stats.tests.test_distributions.rndm->numpy.random.RandomState(1234)
A:scipy.stats.tests.test_distributions.beta->numpy.array([2.0, 1.0, 3.0, 2.0, 3.0])
A:scipy.stats.tests.test_distributions.poiss->scipy.stats.poisson(3.0)
A:scipy.stats.tests.test_distributions.sample->self.template.rvs(size=N, random_state=123)
A:scipy.stats.tests.test_distributions.r0->distfn.rvs(size=8)
A:scipy.stats.tests.test_distributions.unpickled->pickle.loads(s)
A:scipy.stats.tests.test_distributions.r1->pickle.loads(s).rvs(size=8)
A:scipy.stats.tests.test_distributions.gm->scipy.stats.gamma(a=2, loc=3, scale=4)
A:scipy.stats.tests.test_distributions.gm_val->scipy.stats.gamma(a=2, loc=3, scale=4).expect(func, lb=1, ub=2, conditional=True)
A:scipy.stats.tests.test_distributions.gamma_val->scipy.stats.gamma.expect(func, args=(2,), loc=3, scale=4, lb=1, ub=2, conditional=True)
A:scipy.stats.tests.test_distributions.p_val->scipy.stats.wrapcauchy.cdf([x1, x2], c).expect(func)
A:scipy.stats.tests.test_distributions.poisson_val->scipy.stats.poisson.expect(func, args=(3,), loc=4)
A:scipy.stats.tests.test_distributions.lb->scipy.stats.beta.ppf(0.05, 10, 10, loc=5, scale=2)
A:scipy.stats.tests.test_distributions.ub->scipy.stats.beta.ppf(0.95, 10, 10, loc=5, scale=2)
A:scipy.stats.tests.test_distributions.prob90->scipy.stats.beta.expect(lambda x: 1.0, args=(10, 10), loc=5.0, scale=2.0, lb=lb, ub=ub, conditional=False)
A:scipy.stats.tests.test_distributions.prob90c->scipy.stats.beta.expect(lambda x: 1, args=(10, 10), loc=5, scale=2, lb=lb, ub=ub, conditional=True)
A:scipy.stats.tests.test_distributions.(m_true, v_true)->scipy.stats.hypergeom.stats(20, 10, 8, loc=5.0)
A:scipy.stats.tests.test_distributions.v_bounds->scipy.stats.hypergeom.expect(lambda x: (x - 9.0) ** 2, args=(20, 10, 8), loc=5.0, lb=5, ub=13)
A:scipy.stats.tests.test_distributions.prob_bounds->scipy.stats.poisson.expect(lambda x: 1, args=(2,), lb=3, conditional=False)
A:scipy.stats.tests.test_distributions.prob_bc->scipy.stats.hypergeom.expect(lambda x: 1, args=(20, 10, 8), loc=5.0, lb=6, ub=12, conditional=True)
A:scipy.stats.tests.test_distributions.prob_b->scipy.stats.hypergeom.expect(lambda x: 1, args=(20, 10, 8), lb=0, ub=8)
A:scipy.stats.tests.test_distributions.prob_lb->scipy.stats.poisson.expect(lambda x: 1, args=(2,), lb=2, conditional=True)
A:scipy.stats.tests.test_distributions.res1->scipy.stats.crystalball(2, 3).entropy()
A:scipy.stats.tests.test_distributions.res_0->scipy.stats.logser.expect(lambda k: k, args=(p,))
A:scipy.stats.tests.test_distributions.res_l->scipy.stats.logser.expect(lambda k: k, args=(p,), loc=loc)
A:scipy.stats.tests.test_distributions.n0->scipy.stats.poisson.expect(lambda x: 1, args=(2,))
A:scipy.stats.tests.test_distributions.n1->scipy.stats.poisson.expect(lambda x: 1, args=(2,), maxcount=1001, chunksize=32, tolerance=1e-08)
A:scipy.stats.tests.test_distributions.m5->scipy.stats.poisson.moment(5, mu)
A:scipy.stats.tests.test_distributions.nct_mean_df_1000->scipy.stats.nct.mean(1000, 2)
A:scipy.stats.tests.test_distributions.nct_stats_df_1000->scipy.stats.nct.stats(1000, 2)
A:scipy.stats.tests.test_distributions.nct_mean->scipy.stats.nct.mean(100000, 2)
A:scipy.stats.tests.test_distributions.nct_stats->scipy.stats.nct.stats(100000, 2)
A:scipy.stats.tests.test_distributions.probabilities->numpy.arange(0.1, 1, 0.1)
A:scipy.stats.tests.test_distributions.ppf->scipy.stats.truncweibull_min.ppf(0.5, c, a, b)
A:scipy.stats.tests.test_distributions.result_erlang->scipy.stats.erlang.fit(data, f0=1)
A:scipy.stats.tests.test_distributions.result_gamma->scipy.stats.gamma.fit(data, f0=1)
A:scipy.stats.tests.test_distributions.scale_expect->scale_mle(data, rvs_loc)
A:scipy.stats.tests.test_distributions.(loc_fit, _)->scipy.stats.rayleigh.fit(rvs)
A:scipy.stats.tests.test_distributions.(loc_fit, scale_fit)->scipy.stats.rayleigh.fit(rvs, fscale=scale)
A:scipy.stats.tests.test_distributions.lc->scipy.stats.weibull_min.logcdf(x, c, scale=scale)
A:scipy.stats.tests.test_distributions.(c2, loc2, scale2)->scipy.stats.weibull_min.fit(rvs, 1.5, floc=3)
A:scipy.stats.tests.test_distributions.(c3, loc3, scale3)->scipy.stats.weibull_min.fit(rvs, 1.6, floc=3)
A:scipy.stats.tests.test_distributions.(c4, loc4, scale4)->scipy.stats.weibull_min.fit(rvs, 3, fscale=3, method='mm')
A:scipy.stats.tests.test_distributions.q_out->scipy.stats.truncweibull_min.sf(x, 2.0, 0.0, 3.0)
A:scipy.stats.tests.test_distributions.m0->scipy.stats.truncweibull_min.moment(0, c, a, b)
A:scipy.stats.tests.test_distributions.(m1_expected, _)->quad(lambda x: xnpdf(x, 1), a, b)
A:scipy.stats.tests.test_distributions.(m2_expected, _)->quad(lambda x: xnpdf(x, 2), a, b)
A:scipy.stats.tests.test_distributions.m3->scipy.stats.truncweibull_min.moment(3, c, a, b)
A:scipy.stats.tests.test_distributions.(m3_expected, _)->quad(lambda x: xnpdf(x, 3), a, b)
A:scipy.stats.tests.test_distributions.m4->scipy.stats.truncweibull_min.moment(4, c, a, b)
A:scipy.stats.tests.test_distributions.(m4_expected, _)->quad(lambda x: xnpdf(x, 4), a, b)
A:scipy.stats.tests.test_distributions.x_med->numpy.sqrt(1 - np.log(0.5 + np.exp(-(8.0 + np.log(2.0)))))
A:scipy.stats.tests.test_distributions.p_trunc->scipy.stats.truncweibull_min.pdf(x, c, a, b, scale=scale)
A:scipy.stats.tests.test_distributions.lp_trunc->scipy.stats.truncweibull_min.logpdf(x, c, a, b, scale=scale)
A:scipy.stats.tests.test_distributions.cdf_trunc->scipy.stats.truncweibull_min.cdf(x, c, a, b, scale=scale)
A:scipy.stats.tests.test_distributions.lc_trunc->scipy.stats.truncweibull_min.logcdf(x, c, a, b, scale=scale)
A:scipy.stats.tests.test_distributions.s_trunc->scipy.stats.truncweibull_min.sf(x, c, a, b, scale=scale)
A:scipy.stats.tests.test_distributions.ls_trunc->scipy.stats.truncweibull_min.logsf(x, c, a, b, scale=scale)
A:scipy.stats.tests.test_distributions.mean->moment(1)
A:scipy.stats.tests.test_distributions.(cc, dd, xx)->numpy.broadcast_arrays(c, d, x)
A:scipy.stats.tests.test_distributions.ind->numpy.arange(cc.size)
A:scipy.stats.tests.test_distributions.res[i]->scipy.stats.trapezoid.stats(c1, d1, moments='mvsk')
A:scipy.stats.tests.test_distributions.(cc, dd)->numpy.broadcast_arrays(c, d)
A:scipy.stats.tests.test_distributions.(mean, variance)->scipy.stats.burr(c, d).stats()
A:scipy.stats.tests.test_distributions.(e1, e2, e3, e4)->scipy.stats.burr._munp([1, 2, 3, 4], c, d)
A:scipy.stats.tests.test_distributions.qs->numpy.concatenate((q05, q01, q001))
A:scipy.stats.tests.test_distributions.res_p->scipy.stats.studentized_range.cdf(q, k, v)
A:scipy.stats.tests.test_distributions.res_q->scipy.stats.studentized_range.ppf(p, k, v)
A:scipy.stats.tests.test_distributions.path_prefix->os.path.dirname(__file__)
A:scipy.stats.tests.test_distributions.pregenerated_data->json.load(file)
A:scipy.stats.tests.test_distributions.y_pdf_raw->scipy.stats.studentized_range.pdf(x, k, v)
A:scipy.stats.tests.test_distributions.y_pdf_cumulative->cumulative_trapezoid(y_pdf_raw, x)
A:scipy.stats.tests.test_distributions.(k, df, _, _)->scipy.stats.studentized_range._fitstart([1, 2, 3])
A:scipy.stats.tests.test_distributions.res_finite->scipy.stats.studentized_range.cdf(3, 10, 99999)
A:scipy.stats.tests.test_distributions.res_sanity->scipy.stats.studentized_range.cdf(3, 10, 99998)
A:scipy.stats.tests.test_distributions.lam->numpy.array([[-1.0], [0.0], [2.0]])
A:scipy.stats.tests.test_distributions.true->numpy.array([0.25, 0.0, 0.5])
A:scipy.stats.tests.test_distributions.params->scipy.stats.cauchy.fit(rvs)
A:scipy.stats.tests.test_distributions.mv->scipy.stats.tukeylambda.stats(0.14, moments='mvsk')
A:scipy.stats.tests.test_distributions.d->numpy.array([-0.18879233, 0.15734249, 0.18695107, 0.27908787, -0.248649, -0.2171497, 0.12233512, 0.15126419, 0.03119282, 0.4365294, 0.08930393, -0.23509903, 0.28231224, -0.09974875, -0.25196048, 0.11102028, 0.1427649, 0.10176452, 0.18754054, 0.25826724, 0.05988819, 0.0531668, 0.21906056, 0.32106729, 0.2117662, 0.10886442, 0.09375789, 0.24583286, -0.22968366, -0.07842391, -0.31195432, -0.21271196, 0.1114243, -0.13293002, 0.01331725, -0.04330977, -0.09485776, -0.28434547, 0.22245721, -0.18518199, -0.10943985, -0.35243174, 0.06897665, -0.03553363, -0.0701746, -0.06037974, 0.37670779, -0.21684405])
A:scipy.stats.tests.test_distributions.deriv_expected->numpy.exp(stats.norm.logpdf(x) - stats.norm.logcdf(x))
A:scipy.stats.tests.test_distributions.logval->scipy.stats.ncx2.logpdf(1, np.arange(340, 350), 2)
A:scipy.stats.tests.test_distributions.ncx2_pdf->scipy.stats.ncx2.pdf(x, df, nc)
A:scipy.stats.tests.test_distributions.gauss_approx->scipy.stats.norm.pdf(x, df + nc, np.sqrt(2 * df + 4 * nc))
A:scipy.stats.tests.test_distributions.mv3->scipy.stats.lognorm.stats([2, 2.4, -1])
A:scipy.stats.tests.test_distributions.mv2->scipy.stats.lognorm.stats([2, 2.4])
A:scipy.stats.tests.test_distributions.mv2_augmented->tuple((np.r_[_, np.nan] for _ in mv2))
A:scipy.stats.tests.test_distributions.dummy_distr->_distr6_gen(name='dummy')
A:scipy.stats.tests.test_distributions.extra_kwarg->kwargs.pop('extra_kwarg', 1)
A:scipy.stats.tests.test_distributions.number_of_warnings_thrown->len(w)
A:scipy.stats.tests.test_distributions.x2->scipy.stats.genextreme.isf(s, 0)
A:scipy.stats.tests.test_distributions.quantile->scipy.stats.burr12.ppf(prob, 2, 3)
A:scipy.stats.tests.test_distributions.calculated->scipy.stats.crystalball.cdf(X, beta=2.0, m=3.0, loc=0.5, scale=2.0)
A:scipy.stats.tests.test_distributions.expected_0th_moment->numpy.array([1.0, 1.0, 1.0, 1.0, 1.0])
A:scipy.stats.tests.test_distributions.calculated_0th_moment->scipy.stats.crystalball._munp(0, beta, m)
A:scipy.stats.tests.test_distributions.norm->numpy.array([2.5511, 3.01873, 2.51065, 2.53983, 2.507410455])
A:scipy.stats.tests.test_distributions.calculated_1th_moment->scipy.stats.crystalball._munp(1, beta, m)
A:scipy.stats.tests.test_distributions.calculated_2th_moment->scipy.stats.crystalball._munp(2, beta, m)
A:scipy.stats.tests.test_distributions.calculated_3th_moment->scipy.stats.crystalball._munp(3, beta, m)
A:scipy.stats.tests.test_distributions.calculated_4th_moment->scipy.stats.crystalball._munp(4, beta, m)
A:scipy.stats.tests.test_distributions.calculated_5th_moment->scipy.stats.crystalball._munp(5, beta, m)
A:scipy.stats.tests.test_distributions.cb->scipy.stats.crystalball(2, 3)
A:scipy.stats.tests.test_distributions.(c, loc, scale)->scipy.stats.invweibull.fit(x, floc=0, optimizer=optimizer)
A:scipy.stats.tests.test_distributions.expected_cdf->scipy.stats.f.cdf(x, df1, df2)
A:scipy.stats.tests.test_distributions.calculated_cdf->scipy.stats.ncf.cdf(x, df1, df2, nc)
A:scipy.stats.tests.test_distributions.expected_pdf->scipy.stats.f.pdf(x, df1, df2)
A:scipy.stats.tests.test_distributions.calculated_pdf->scipy.stats.ncf.pdf(x, df1, df2, nc)
A:scipy.stats.tests.test_distributions.scipy_val->scipy.stats.ncf.cdf(20, 6, 33, 30.4)
A:scipy.stats.tests.test_distributions.histogram->numpy.histogram([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8, 8, 9], bins=8)
A:scipy.stats.tests.test_distributions.self.template->scipy.stats.rv_histogram(histogram)
A:scipy.stats.tests.test_distributions.norm_histogram->numpy.histogram(data, bins=50)
A:scipy.stats.tests.test_distributions.self.norm_template->scipy.stats.rv_histogram(norm_histogram)
A:scipy.stats.tests.test_distributions.values->numpy.array([0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5])
A:scipy.stats.tests.test_distributions.pdf_values->numpy.asarray([0.0 / 25.0, 0.0 / 25.0, 1.0 / 25.0, 1.0 / 25.0, 2.0 / 25.0, 2.0 / 25.0, 3.0 / 25.0, 3.0 / 25.0, 4.0 / 25.0, 4.0 / 25.0, 5.0 / 25.0, 5.0 / 25.0, 4.0 / 25.0, 4.0 / 25.0, 3.0 / 25.0, 3.0 / 25.0, 3.0 / 25.0, 3.0 / 25.0, 0.0 / 25.0, 0.0 / 25.0])
A:scipy.stats.tests.test_distributions.cdf_values->numpy.asarray([0.0 / 25.0, 0.0 / 25.0, 0.0 / 25.0, 0.5 / 25.0, 1.0 / 25.0, 2.0 / 25.0, 3.0 / 25.0, 4.5 / 25.0, 6.0 / 25.0, 8.0 / 25.0, 10.0 / 25.0, 12.5 / 25.0, 15.0 / 25.0, 17.0 / 25.0, 19.0 / 25.0, 20.5 / 25.0, 22.0 / 25.0, 23.5 / 25.0, 25.0 / 25.0, 25.0 / 25.0])
A:scipy.stats.tests.test_distributions.rv2->scipy.stats.reciprocal(10 ** (-3), 10 ** 0)
A:scipy.stats.tests.test_distributions.(vals, _)->numpy.histogram(np.log10(rvs), bins=10)
A:scipy.stats.tests.test_distributions.x1->scipy.stats.nakagami.isf(sf, nu)
A:scipy.stats.tests.test_distributions.samples->scipy.stats.nakagami.rvs(size=n, nu=nu, loc=loc, scale=scale, random_state=1337)
A:scipy.stats.tests.test_distributions.(nu_est, loc_est, scale_est)->scipy.stats.nakagami.fit(samples, f0=nu)
A:scipy.stats.tests.test_distributions.loc_theo->numpy.min(samples)
A:scipy.stats.tests.test_distributions.scale_theo->numpy.sqrt(np.mean((samples - loc_est) ** 2))
A:scipy.stats.tests.test_distributions.rvs_no_size->rvs_no_size_gen(name='rvs_no_size')
A:scipy.stats.tests.test_distributions.(a0, b0)->scipy.stats.norm.support([0, 0, 0, 1], [1, 1, 1, -1])
A:scipy.stats.tests.test_distributions.(a1, b1)->scipy.stats.norm.support([], [])
A:scipy.stats.tests.test_distributions.ex_a0->numpy.array([-np.inf, -np.inf, -np.inf, np.nan])
A:scipy.stats.tests.test_distributions.ex_b0->numpy.array([np.inf, np.inf, np.inf, np.nan])
A:scipy.stats.tests.test_distributions.(a2, b2)->scipy.stats.norm.support([0, 0, 0, 1], [-1])
A:scipy.stats.tests.test_distributions.ex_a2->numpy.array(4 * [np.nan])
A:scipy.stats.tests.test_distributions.ex_b2->numpy.array(4 * [np.nan])
A:scipy.stats.tests.test_distributions.scale->numpy.empty((1, 0))
scipy.stats.tests.test_TestArcsine
scipy.stats.tests.test_TestArcsine.test_endpoints(self)
scipy.stats.tests.test_TestArgsreduce()
scipy.stats.tests.test_TestArgus
scipy.stats.tests.test_TestArgus.test_argus_phi_small_chi(self,chi,expected,rtol)
scipy.stats.tests.test_TestArgus.test_argus_rvs_large_chi(self)
scipy.stats.tests.test_TestArgus.test_cdf_small_chi(self,chi,expected)
scipy.stats.tests.test_TestArgus.test_mean(self,chi,expected_mean)
scipy.stats.tests.test_TestArgus.test_pdf_small_chi(self,chi,expected)
scipy.stats.tests.test_TestArgus.test_rvs(self,chi,random_state)
scipy.stats.tests.test_TestArgus.test_rvs_small_chi(self,chi)
scipy.stats.tests.test_TestArgus.test_sf_small_chi(self,chi,expected)
scipy.stats.tests.test_TestArgus.test_stats_small_chi(self,chi,expected,rtol)
scipy.stats.tests.test_TestArgus.test_var(self,chi,expected_var,rtol)
scipy.stats.tests.test_TestArrayArgument
scipy.stats.tests.test_TestArrayArgument.setup_method(self)
scipy.stats.tests.test_TestArrayArgument.test_noexception(self)
scipy.stats.tests.test_TestBernoulli
scipy.stats.tests.test_TestBernoulli.setup_method(self)
scipy.stats.tests.test_TestBernoulli.test_entropy(self)
scipy.stats.tests.test_TestBernoulli.test_rvs(self)
scipy.stats.tests.test_TestBeta
scipy.stats.tests.test_TestBeta.test_beta_ppf_with_subnormal_a_b(self,method,a,b)
scipy.stats.tests.test_TestBeta.test_boost_eval_issue_14606(self)
scipy.stats.tests.test_TestBeta.test_endpoints(self)
scipy.stats.tests.test_TestBeta.test_fit_bad_keyword_args(self)
scipy.stats.tests.test_TestBeta.test_fit_duplicated_fixed_parameter(self)
scipy.stats.tests.test_TestBeta.test_issue_12635(self)
scipy.stats.tests.test_TestBeta.test_issue_12794(self)
scipy.stats.tests.test_TestBeta.test_issue_12796(self)
scipy.stats.tests.test_TestBeta.test_logpdf(self)
scipy.stats.tests.test_TestBeta.test_logpdf_ticket_1866(self)
scipy.stats.tests.test_TestBetaPrime
scipy.stats.tests.test_TestBetaPrime.test_cdf(self)
scipy.stats.tests.test_TestBetaPrime.test_logpdf(self)
scipy.stats.tests.test_TestBinom
scipy.stats.tests.test_TestBinom.setup_method(self)
scipy.stats.tests.test_TestBinom.test_entropy(self)
scipy.stats.tests.test_TestBinom.test_pmf(self)
scipy.stats.tests.test_TestBinom.test_rvs(self)
scipy.stats.tests.test_TestBinom.test_warns_p0(self)
scipy.stats.tests.test_TestBradford
scipy.stats.tests.test_TestBradford.test_cdf_ppf(self)
scipy.stats.tests.test_TestBurr
scipy.stats.tests.test_TestBurr.test_burr_nan_mean_var_9544(self)
scipy.stats.tests.test_TestBurr.test_burr_stats_9544(self)
scipy.stats.tests.test_TestBurr.test_endpoints_7491(self)
scipy.stats.tests.test_TestChi
scipy.stats.tests.test_TestChi.test_isf(self)
scipy.stats.tests.test_TestChi.test_mean(self)
scipy.stats.tests.test_TestChi.test_sf(self)
scipy.stats.tests.test_TestChi2
scipy.stats.tests.test_TestChi2.test_ppf(self)
scipy.stats.tests.test_TestChi2.test_precision(self)
scipy.stats.tests.test_TestDLaplace
scipy.stats.tests.test_TestDLaplace.setup_method(self)
scipy.stats.tests.test_TestDLaplace.test_rvs(self)
scipy.stats.tests.test_TestDLaplace.test_stats(self)
scipy.stats.tests.test_TestDLaplace.test_stats2(self)
scipy.stats.tests.test_TestDocstring
scipy.stats.tests.test_TestDocstring.test_docstrings(self)
scipy.stats.tests.test_TestDocstring.test_no_name_arg(self)
scipy.stats.tests.test_TestErlang
scipy.stats.tests.test_TestErlang.setup_method(self)
scipy.stats.tests.test_TestErlang.test_erlang_runtimewarning(self)
scipy.stats.tests.test_TestErlang.test_gh_pr_10949_argcheck(self)
scipy.stats.tests.test_TestExpect
scipy.stats.tests.test_TestExpect.test_beta(self)
scipy.stats.tests.test_TestExpect.test_challenging_cases_gh8928(self)
scipy.stats.tests.test_TestExpect.test_discrete_kwds(self)
scipy.stats.tests.test_TestExpect.test_genhalflogistic(self)
scipy.stats.tests.test_TestExpect.test_hypergeom(self)
scipy.stats.tests.test_TestExpect.test_lb_ub_gh15855(self)
scipy.stats.tests.test_TestExpect.test_logser(self)
scipy.stats.tests.test_TestExpect.test_moment(self)
scipy.stats.tests.test_TestExpect.test_norm(self)
scipy.stats.tests.test_TestExpect.test_poisson(self)
scipy.stats.tests.test_TestExpect.test_randint(self)
scipy.stats.tests.test_TestExpect.test_rice_overflow(self)
scipy.stats.tests.test_TestExpect.test_skellam(self)
scipy.stats.tests.test_TestExpect.test_zipf(self)
scipy.stats.tests.test_TestExpon
scipy.stats.tests.test_TestExpon.test_inf_raises_error(self)
scipy.stats.tests.test_TestExpon.test_nan_raises_error(self)
scipy.stats.tests.test_TestExpon.test_tail(self)
scipy.stats.tests.test_TestExpon.test_zero(self)
scipy.stats.tests.test_TestExponNorm
scipy.stats.tests.test_TestExponNorm.test_cdf_small_K(self,x,K,scale,expected)
scipy.stats.tests.test_TestExponNorm.test_extremes_x(self)
scipy.stats.tests.test_TestExponNorm.test_inf_raises_error(self)
scipy.stats.tests.test_TestExponNorm.test_moments(self)
scipy.stats.tests.test_TestExponNorm.test_nan_raises_error(self)
scipy.stats.tests.test_TestExponNorm.test_sf_small_K(self,x,K,scale,expected)
scipy.stats.tests.test_TestExponNorm.test_std_pdf(self,x,K,expected)
scipy.stats.tests.test_TestExponWeib
scipy.stats.tests.test_TestExponWeib.test_a_is_1(self)
scipy.stats.tests.test_TestExponWeib.test_a_is_1_c_is_1(self)
scipy.stats.tests.test_TestExponWeib.test_pdf_logpdf(self)
scipy.stats.tests.test_TestExponpow
scipy.stats.tests.test_TestExponpow.test_tail(self)
scipy.stats.tests.test_TestF
scipy.stats.tests.test_TestF.test_endpoints(self)
scipy.stats.tests.test_TestF.test_f_moments(self)
scipy.stats.tests.test_TestF.test_moments_warnings(self)
scipy.stats.tests.test_TestF.test_stats_broadcast(self)
scipy.stats.tests.test_TestFatigueLife
scipy.stats.tests.test_TestFatigueLife.test_isf_tail(self)
scipy.stats.tests.test_TestFatigueLife.test_sf_tail(self)
scipy.stats.tests.test_TestFitMethod
scipy.stats.tests.test_TestFitMethod.setup_method(self)
scipy.stats.tests.test_TestFitMethod.test_expon_fit(self)
scipy.stats.tests.test_TestFitMethod.test_extra_params(self,method)
scipy.stats.tests.test_TestFitMethod.test_fit_w_non_finite_data_values(self,dist,args)
scipy.stats.tests.test_TestFitMethod.test_fix_fit_2args_lognorm(self)
scipy.stats.tests.test_TestFitMethod.test_fix_fit_beta(self)
scipy.stats.tests.test_TestFitMethod.test_fix_fit_gamma(self)
scipy.stats.tests.test_TestFitMethod.test_fix_fit_norm(self)
scipy.stats.tests.test_TestFitMethod.test_fshapes(self,method)
scipy.stats.tests.test_TestFitMethod.test_lognorm_fit(self)
scipy.stats.tests.test_TestFitMethod.test_uniform_fit(self)
scipy.stats.tests.test_TestFrozen
scipy.stats.tests.test_TestFrozen.setup_method(self)
scipy.stats.tests.test_TestFrozen.test_ab(self)
scipy.stats.tests.test_TestFrozen.test_expect(self)
scipy.stats.tests.test_TestFrozen.test_gamma(self)
scipy.stats.tests.test_TestFrozen.test_norm(self)
scipy.stats.tests.test_TestFrozen.test_pickling(self)
scipy.stats.tests.test_TestFrozen.test_random_state(self)
scipy.stats.tests.test_TestFrozen.test_regression_ticket_1293(self)
scipy.stats.tests.test_TestFrozen.test_rv_frozen_in_namespace(self)
scipy.stats.tests.test_TestGamma
scipy.stats.tests.test_TestGamma.test_fit_bad_keyword_args(self)
scipy.stats.tests.test_TestGamma.test_isf(self)
scipy.stats.tests.test_TestGamma.test_logpdf(self)
scipy.stats.tests.test_TestGamma.test_pdf(self)
scipy.stats.tests.test_TestGenExpon
scipy.stats.tests.test_TestGenExpon.test_cdf_bounds(self)
scipy.stats.tests.test_TestGenExpon.test_pdf_unity_area(self)
scipy.stats.tests.test_TestGenExpon.test_sf_tail(self)
scipy.stats.tests.test_TestGenHyperbolic
scipy.stats.tests.test_TestGenHyperbolic.setup_method(self)
scipy.stats.tests.test_TestGenHyperbolic.test_cdf_r(self)
scipy.stats.tests.test_TestGenHyperbolic.test_moments_r(self)
scipy.stats.tests.test_TestGenHyperbolic.test_pdf_cauchy(self)
scipy.stats.tests.test_TestGenHyperbolic.test_pdf_laplace(self)
scipy.stats.tests.test_TestGenHyperbolic.test_pdf_norminvgauss(self)
scipy.stats.tests.test_TestGenHyperbolic.test_pdf_r(self)
scipy.stats.tests.test_TestGenHyperbolic.test_pdf_t(self)
scipy.stats.tests.test_TestGenHyperbolic.test_rvs(self)
scipy.stats.tests.test_TestGenInvGauss
scipy.stats.tests.test_TestGenInvGauss.setup_method(self)
scipy.stats.tests.test_TestGenInvGauss.test_invgauss(self)
scipy.stats.tests.test_TestGenInvGauss.test_pdf_R(self)
scipy.stats.tests.test_TestGenInvGauss.test_pdf_zero(self)
scipy.stats.tests.test_TestGenInvGauss.test_rvs_negative_p(self)
scipy.stats.tests.test_TestGenInvGauss.test_rvs_new_method(self)
scipy.stats.tests.test_TestGenInvGauss.test_rvs_p_zero(self)
scipy.stats.tests.test_TestGenInvGauss.test_rvs_with_mode_shift(self)
scipy.stats.tests.test_TestGenInvGauss.test_rvs_without_mode_shift(self)
scipy.stats.tests.test_TestGenLogistic
scipy.stats.tests.test_TestGenLogistic.test_logpdf(self,x,expected)
scipy.stats.tests.test_TestGennorm
scipy.stats.tests.test_TestGennorm.test_laplace(self)
scipy.stats.tests.test_TestGennorm.test_norm(self)
scipy.stats.tests.test_TestGennorm.test_rvs(self)
scipy.stats.tests.test_TestGennorm.test_rvs_broadcasting(self)
scipy.stats.tests.test_TestGenpareto
scipy.stats.tests.test_TestGenpareto.test_ab(self)
scipy.stats.tests.test_TestGenpareto.test_c0(self)
scipy.stats.tests.test_TestGenpareto.test_c_continuity(self)
scipy.stats.tests.test_TestGenpareto.test_c_continuity_isf(self)
scipy.stats.tests.test_TestGenpareto.test_c_continuity_ppf(self)
scipy.stats.tests.test_TestGenpareto.test_cdf_ppf_roundtrip(self)
scipy.stats.tests.test_TestGenpareto.test_cm1(self)
scipy.stats.tests.test_TestGenpareto.test_logsf(self)
scipy.stats.tests.test_TestGenpareto.test_stats(self,c,expected_stats)
scipy.stats.tests.test_TestGenpareto.test_var(self)
scipy.stats.tests.test_TestGenpareto.test_x_inf(self)
scipy.stats.tests.test_TestGeom
scipy.stats.tests.test_TestGeom.setup_method(self)
scipy.stats.tests.test_TestGeom.test_cdf_sf(self)
scipy.stats.tests.test_TestGeom.test_logcdf_logsf(self)
scipy.stats.tests.test_TestGeom.test_logpmf(self)
scipy.stats.tests.test_TestGeom.test_pmf(self)
scipy.stats.tests.test_TestGeom.test_ppf(self)
scipy.stats.tests.test_TestGeom.test_ppf_underflow(self)
scipy.stats.tests.test_TestGeom.test_rvs(self)
scipy.stats.tests.test_TestGeom.test_rvs_9313(self)
scipy.stats.tests.test_TestGumbelL
scipy.stats.tests.test_TestGumbelL.test_cdf_ppf(self)
scipy.stats.tests.test_TestGumbelL.test_fit_fixed_param(self,loc)
scipy.stats.tests.test_TestGumbelL.test_logcdf_logsf(self)
scipy.stats.tests.test_TestGumbelL.test_sf_isf(self)
scipy.stats.tests.test_TestGumbelR
scipy.stats.tests.test_TestGumbelR.test_isf(self)
scipy.stats.tests.test_TestGumbelR.test_sf(self)
scipy.stats.tests.test_TestGumbel_r_l
scipy.stats.tests.test_TestGumbel_r_l.rng(self)
scipy.stats.tests.test_TestGumbel_r_l.test_fit(self,dist,sgn)
scipy.stats.tests.test_TestGumbel_r_l.test_fit_comp_optimizer(self,dist,loc_rvs,scale_rvs,fix_loc,fix_scale,rng)
scipy.stats.tests.test_TestHalfgennorm
scipy.stats.tests.test_TestHalfgennorm.test_expon(self)
scipy.stats.tests.test_TestHalfgennorm.test_gennorm(self)
scipy.stats.tests.test_TestHalfgennorm.test_halfnorm(self)
scipy.stats.tests.test_TestHistogram
scipy.stats.tests.test_TestHistogram.setup_method(self)
scipy.stats.tests.test_TestHistogram.test_cdf_ppf(self)
scipy.stats.tests.test_TestHistogram.test_entropy(self)
scipy.stats.tests.test_TestHistogram.test_munp(self)
scipy.stats.tests.test_TestHistogram.test_pdf(self)
scipy.stats.tests.test_TestHistogram.test_rvs(self)
scipy.stats.tests.test_TestHypergeom
scipy.stats.tests.test_TestHypergeom.setup_method(self)
scipy.stats.tests.test_TestHypergeom.test_args(self)
scipy.stats.tests.test_TestHypergeom.test_cdf_above_one(self)
scipy.stats.tests.test_TestHypergeom.test_entropy(self)
scipy.stats.tests.test_TestHypergeom.test_logcdf(self)
scipy.stats.tests.test_TestHypergeom.test_logsf(self)
scipy.stats.tests.test_TestHypergeom.test_precision(self)
scipy.stats.tests.test_TestHypergeom.test_precision2(self)
scipy.stats.tests.test_TestHypergeom.test_rvs(self)
scipy.stats.tests.test_TestInvGamma
scipy.stats.tests.test_TestInvGamma.test_cdf_ppf(self)
scipy.stats.tests.test_TestInvGamma.test_invgamma_inf_gh_1866(self)
scipy.stats.tests.test_TestInvGamma.test_sf_isf(self)
scipy.stats.tests.test_TestInvgauss
scipy.stats.tests.test_TestInvgauss.setup_method(self)
scipy.stats.tests.test_TestInvgauss.test_cdf_sf(self)
scipy.stats.tests.test_TestInvgauss.test_fit(self,rvs_mu,rvs_loc,rvs_scale)
scipy.stats.tests.test_TestInvgauss.test_fit_MLE_comp_optimizer(self,rvs_mu,rvs_loc,rvs_scale)
scipy.stats.tests.test_TestInvgauss.test_fit_raise_errors(self)
scipy.stats.tests.test_TestInvgauss.test_logcdf_logsf(self)
scipy.stats.tests.test_TestKSTwo
scipy.stats.tests.test_TestKSTwo.setup_method(self)
scipy.stats.tests.test_TestKSTwo.test_cdf(self)
scipy.stats.tests.test_TestKSTwo.test_cdf_sf(self)
scipy.stats.tests.test_TestKSTwo.test_cdf_sf_sqrtn(self)
scipy.stats.tests.test_TestKSTwo.test_cdf_sqrtn(self)
scipy.stats.tests.test_TestKSTwo.test_isf_of_sf(self)
scipy.stats.tests.test_TestKSTwo.test_isf_of_sf_sqrtn(self)
scipy.stats.tests.test_TestKSTwo.test_ppf(self)
scipy.stats.tests.test_TestKSTwo.test_ppf_of_cdf(self)
scipy.stats.tests.test_TestKSTwo.test_ppf_of_cdf_sqrtn(self)
scipy.stats.tests.test_TestKSTwo.test_sf(self)
scipy.stats.tests.test_TestKSTwo.test_simard_lecuyer_table1(self)
scipy.stats.tests.test_TestKappa4
scipy.stats.tests.test_TestKappa4.test_cdf_expon(self)
scipy.stats.tests.test_TestKappa4.test_cdf_genextreme(self)
scipy.stats.tests.test_TestKappa4.test_cdf_genpareto(self)
scipy.stats.tests.test_TestKappa4.test_cdf_gumbel_r(self)
scipy.stats.tests.test_TestKappa4.test_cdf_logistic(self)
scipy.stats.tests.test_TestKappa4.test_cdf_uniform(self)
scipy.stats.tests.test_TestKappa4.test_integers_ctor(self)
scipy.stats.tests.test_TestLaplace
scipy.stats.tests.test_TestLaplace.test_fit(self,rvs_loc,rvs_scale)
scipy.stats.tests.test_TestLaplace.test_fit_MLE_comp_optimizer(self,rvs_loc,rvs_scale)
scipy.stats.tests.test_TestLaplace.test_fit_simple_non_random_data(self)
scipy.stats.tests.test_TestLaplace.test_isf(self)
scipy.stats.tests.test_TestLaplace.test_sf(self)
scipy.stats.tests.test_TestLaplace.test_sf_cdf_extremes(self)
scipy.stats.tests.test_TestLaplaceasymmetric
scipy.stats.tests.test_TestLaplaceasymmetric.test_asymmetric_laplace_log_10_16(self)
scipy.stats.tests.test_TestLaplaceasymmetric.test_asymmetric_laplace_pdf(self)
scipy.stats.tests.test_TestLaplaceasymmetric.test_laplace(self)
scipy.stats.tests.test_TestLevyStable
scipy.stats.tests.test_TestLevyStable.nolan_cdf_sample_data(self)
scipy.stats.tests.test_TestLevyStable.nolan_loc_scale_sample_data(self)
scipy.stats.tests.test_TestLevyStable.nolan_pdf_sample_data(self)
scipy.stats.tests.test_TestLevyStable.test_cdf_nolan_samples(self,nolan_cdf_sample_data,pct_range,alpha_range,beta_range)
scipy.stats.tests.test_TestLevyStable.test_distribution_outside_support(self,alpha,function,beta,points,expected)
scipy.stats.tests.test_TestLevyStable.test_fit(self)
scipy.stats.tests.test_TestLevyStable.test_fit_beta_flip(self)
scipy.stats.tests.test_TestLevyStable.test_fit_delta_shift(self)
scipy.stats.tests.test_TestLevyStable.test_fit_loc_extrap(self)
scipy.stats.tests.test_TestLevyStable.test_fit_rvs(self,alpha,beta,delta,gamma,parametrization)
scipy.stats.tests.test_TestLevyStable.test_location_scale(self,nolan_loc_scale_sample_data,param,case)
scipy.stats.tests.test_TestLevyStable.test_pdf_alpha_equals_one_beta_non_zero(self,method,decimal_places)
scipy.stats.tests.test_TestLevyStable.test_pdf_nolan_samples(self,nolan_pdf_sample_data,pct_range,alpha_range,beta_range)
scipy.stats.tests.test_TestLevyStable.test_rvs(self,parameterization,alpha,beta,gamma,delta,sample_size)
scipy.stats.tests.test_TestLevyStable.test_rvs_alpha1(self,beta)
scipy.stats.tests.test_TestLevyStable.test_stats(self,params,expected)
scipy.stats.tests.test_TestLogUniform
scipy.stats.tests.test_TestLogUniform.test_alias(self)
scipy.stats.tests.test_TestLogUniform.test_fit_override(self,method)
scipy.stats.tests.test_TestLoggamma
scipy.stats.tests.test_TestLoggamma.test_logpdf(self)
scipy.stats.tests.test_TestLoggamma.test_rvs(self,c)
scipy.stats.tests.test_TestLoggamma.test_sf_isf(self,x,c,sf)
scipy.stats.tests.test_TestLoggamma.test_stats(self)
scipy.stats.tests.test_TestLogistic
scipy.stats.tests.test_TestLogistic.test_cdf_ppf(self)
scipy.stats.tests.test_TestLogistic.test_extreme_values(self)
scipy.stats.tests.test_TestLogistic.test_fit(self,loc_rvs,scale_rvs)
scipy.stats.tests.test_TestLogistic.test_fit_comp_optimizer(self)
scipy.stats.tests.test_TestLogistic.test_logcdfsf_tails(self,testlogcdf)
scipy.stats.tests.test_TestLogistic.test_logpdf_basic(self)
scipy.stats.tests.test_TestLogistic.test_logpdf_extreme_values(self)
scipy.stats.tests.test_TestLogistic.test_sf_isf(self)
scipy.stats.tests.test_TestLognorm
scipy.stats.tests.test_TestLognorm.test_logcdf(self)
scipy.stats.tests.test_TestLognorm.test_pdf(self)
scipy.stats.tests.test_TestLogser
scipy.stats.tests.test_TestLogser.setup_method(self)
scipy.stats.tests.test_TestLogser.test_mean_small_p(self)
scipy.stats.tests.test_TestLogser.test_pmf_small_p(self)
scipy.stats.tests.test_TestLogser.test_rvs(self)
scipy.stats.tests.test_TestMielke
scipy.stats.tests.test_TestMielke.test_burr_equivalence(self)
scipy.stats.tests.test_TestMielke.test_moments(self)
scipy.stats.tests.test_TestNBinom
scipy.stats.tests.test_TestNBinom.setup_method(self)
scipy.stats.tests.test_TestNBinom.test_logcdf_gh16159(self)
scipy.stats.tests.test_TestNBinom.test_pmf(self)
scipy.stats.tests.test_TestNBinom.test_rvs(self)
scipy.stats.tests.test_TestNakagami
scipy.stats.tests.test_TestNakagami.test_fit(self,nu,loc,scale)
scipy.stats.tests.test_TestNakagami.test_fit_nu(self,loc,scale)
scipy.stats.tests.test_TestNakagami.test_logpdf(self)
scipy.stats.tests.test_TestNakagami.test_sf_isf(self)
scipy.stats.tests.test_TestNct
scipy.stats.tests.test_TestNct.test_broadcasting(self)
scipy.stats.tests.test_TestNct.test_nc_parameter(self)
scipy.stats.tests.test_TestNct.test_nct_inf_moments(self)
scipy.stats.tests.test_TestNct.test_nct_stats_large_df_values(self)
scipy.stats.tests.test_TestNct.test_variance_gh_issue_2401(self)
scipy.stats.tests.test_TestNorm
scipy.stats.tests.test_TestNorm.test_bad_keyword_arg(self)
scipy.stats.tests.test_TestNorm.test_inf_raises_error(self)
scipy.stats.tests.test_TestNorm.test_nan_raises_error(self)
scipy.stats.tests.test_TestNormInvGauss
scipy.stats.tests.test_TestNormInvGauss.setup_method(self)
scipy.stats.tests.test_TestNormInvGauss.test_cdf_R(self)
scipy.stats.tests.test_TestNormInvGauss.test_gh8718(self)
scipy.stats.tests.test_TestNormInvGauss.test_pdf_R(self)
scipy.stats.tests.test_TestNormInvGauss.test_ppf(self)
scipy.stats.tests.test_TestNormInvGauss.test_sf_isf_mpmath(self,x,a,b,sf,rtol)
scipy.stats.tests.test_TestNormInvGauss.test_sf_isf_mpmath_vectorized(self)
scipy.stats.tests.test_TestNormInvGauss.test_stats(self)
scipy.stats.tests.test_TestPareto
scipy.stats.tests.test_TestPareto.rng(self)
scipy.stats.tests.test_TestPareto.test_fit(self,rvs_shape,rvs_loc,rvs_scale,rng)
scipy.stats.tests.test_TestPareto.test_fit_MLE_comp_optimizer(self,rvs_shape,rvs_loc,rvs_scale,fix_shape,fix_loc,fix_scale,rng)
scipy.stats.tests.test_TestPareto.test_fit_known_bad_seed(self)
scipy.stats.tests.test_TestPareto.test_fit_warnings(self)
scipy.stats.tests.test_TestPareto.test_negative_data(self,rng)
scipy.stats.tests.test_TestPareto.test_sf(self)
scipy.stats.tests.test_TestPareto.test_stats(self)
scipy.stats.tests.test_TestPearson3
scipy.stats.tests.test_TestPearson3.setup_method(self)
scipy.stats.tests.test_TestPearson3.test_cdf(self)
scipy.stats.tests.test_TestPearson3.test_negative_cdf_bug_11186(self)
scipy.stats.tests.test_TestPearson3.test_pdf(self)
scipy.stats.tests.test_TestPearson3.test_ppf_bug_17050(self)
scipy.stats.tests.test_TestPearson3.test_return_array_bug_11746(self)
scipy.stats.tests.test_TestPearson3.test_rvs(self)
scipy.stats.tests.test_TestPlanck
scipy.stats.tests.test_TestPlanck.setup_method(self)
scipy.stats.tests.test_TestPlanck.test_logsf(self)
scipy.stats.tests.test_TestPlanck.test_sf(self)
scipy.stats.tests.test_TestPoisson
scipy.stats.tests.test_TestPoisson.setup_method(self)
scipy.stats.tests.test_TestPoisson.test_mu0(self)
scipy.stats.tests.test_TestPoisson.test_pmf_basic(self)
scipy.stats.tests.test_TestPoisson.test_rvs(self)
scipy.stats.tests.test_TestPoisson.test_stats(self)
scipy.stats.tests.test_TestPowerlaw(object)
scipy.stats.tests.test_TestPowerlaw.rng(self)
scipy.stats.tests.test_TestPowerlaw.test_fit_MLE_comp_optimizer(self,rvs_shape,rvs_loc,rvs_scale,fix_shape,fix_loc,fix_scale,rng)
scipy.stats.tests.test_TestPowerlaw.test_fit_warnings(self)
scipy.stats.tests.test_TestPowerlaw.test_problem_case(self)
scipy.stats.tests.test_TestRandInt
scipy.stats.tests.test_TestRandInt.setup_method(self)
scipy.stats.tests.test_TestRandInt.test_cdf(self)
scipy.stats.tests.test_TestRandInt.test_pdf(self)
scipy.stats.tests.test_TestRandInt.test_rvs(self)
scipy.stats.tests.test_TestRayleigh
scipy.stats.tests.test_TestRayleigh.setup_method(self)
scipy.stats.tests.test_TestRayleigh.test_fit(self,rvs_loc,rvs_scale)
scipy.stats.tests.test_TestRayleigh.test_fit_comparison_super_method(self,rvs_loc,rvs_scale)
scipy.stats.tests.test_TestRayleigh.test_fit_gh17088(self)
scipy.stats.tests.test_TestRayleigh.test_fit_warnings(self)
scipy.stats.tests.test_TestRayleigh.test_logpdf(self)
scipy.stats.tests.test_TestRayleigh.test_logsf(self)
scipy.stats.tests.test_TestRdist
scipy.stats.tests.test_TestRdist.test_rdist_beta(self)
scipy.stats.tests.test_TestRdist.test_rdist_cdf_gh1285(self)
scipy.stats.tests.test_TestRecipInvGauss
scipy.stats.tests.test_TestRecipInvGauss.test_cdf_small_x(self)
scipy.stats.tests.test_TestRecipInvGauss.test_logpdf_endpoint(self)
scipy.stats.tests.test_TestRecipInvGauss.test_pdf_endpoint(self)
scipy.stats.tests.test_TestRecipInvGauss.test_sf_large_x(self)
scipy.stats.tests.test_TestRice
scipy.stats.tests.test_TestRice.test_rice_gh9836(self)
scipy.stats.tests.test_TestRice.test_rice_rvs(self)
scipy.stats.tests.test_TestRice.test_rice_zero_b(self)
scipy.stats.tests.test_TestRvDiscrete
scipy.stats.tests.test_TestRvDiscrete.setup_method(self)
scipy.stats.tests.test_TestRvDiscrete.test_bad_input(self)
scipy.stats.tests.test_TestRvDiscrete.test_cdf(self)
scipy.stats.tests.test_TestRvDiscrete.test_cdf_ppf_next(self)
scipy.stats.tests.test_TestRvDiscrete.test_entropy(self)
scipy.stats.tests.test_TestRvDiscrete.test_expect1(self)
scipy.stats.tests.test_TestRvDiscrete.test_expect2(self)
scipy.stats.tests.test_TestRvDiscrete.test_multidimension(self)
scipy.stats.tests.test_TestRvDiscrete.test_pmf(self)
scipy.stats.tests.test_TestRvDiscrete.test_ppf(self)
scipy.stats.tests.test_TestRvDiscrete.test_rvs(self)
scipy.stats.tests.test_TestRvDiscrete.test_shape_rv_sample(self)
scipy.stats.tests.test_TestSkellam
scipy.stats.tests.test_TestSkellam.test_cdf(self)
scipy.stats.tests.test_TestSkellam.test_pmf(self)
scipy.stats.tests.test_TestSkewCauchy
scipy.stats.tests.test_TestSkewCauchy.test_cauchy(self)
scipy.stats.tests.test_TestSkewCauchy.test_skewcauchy_R(self)
scipy.stats.tests.test_TestSkewNorm
scipy.stats.tests.test_TestSkewNorm.setup_method(self)
scipy.stats.tests.test_TestSkewNorm.test_cdf_large_x(self)
scipy.stats.tests.test_TestSkewNorm.test_cdf_sf_small_values(self)
scipy.stats.tests.test_TestSkewNorm.test_fit(self)
scipy.stats.tests.test_TestSkewNorm.test_moments(self)
scipy.stats.tests.test_TestSkewNorm.test_noncentral_moments(self,a,moments)
scipy.stats.tests.test_TestSkewNorm.test_normal(self)
scipy.stats.tests.test_TestSkewNorm.test_rvs(self)
scipy.stats.tests.test_TestStudentizedRange
scipy.stats.tests.test_TestStudentizedRange.test_cdf_against_mp(self,case_result)
scipy.stats.tests.test_TestStudentizedRange.test_cdf_against_r(self,r_case_result)
scipy.stats.tests.test_TestStudentizedRange.test_cdf_against_tables(self)
scipy.stats.tests.test_TestStudentizedRange.test_clipping(self)
scipy.stats.tests.test_TestStudentizedRange.test_df_cutoff(self)
scipy.stats.tests.test_TestStudentizedRange.test_fitstart_valid(self)
scipy.stats.tests.test_TestStudentizedRange.test_infinite_df(self)
scipy.stats.tests.test_TestStudentizedRange.test_moment_against_mp(self,case_result)
scipy.stats.tests.test_TestStudentizedRange.test_moment_vectorization(self)
scipy.stats.tests.test_TestStudentizedRange.test_pdf_against_cdf(self)
scipy.stats.tests.test_TestStudentizedRange.test_pdf_against_mp(self,case_result)
scipy.stats.tests.test_TestStudentizedRange.test_pdf_integration(self)
scipy.stats.tests.test_TestStudentizedRange.test_ppf_against_tables(self)
scipy.stats.tests.test_TestSubclassingExplicitShapes
scipy.stats.tests.test_TestSubclassingExplicitShapes.shapes_empty_string(self)
scipy.stats.tests.test_TestSubclassingExplicitShapes.test_correct_shapes(self)
scipy.stats.tests.test_TestSubclassingExplicitShapes.test_extra_kwarg(self)
scipy.stats.tests.test_TestSubclassingExplicitShapes.test_shapes_args(self)
scipy.stats.tests.test_TestSubclassingExplicitShapes.test_shapes_identifiers_1(self)
scipy.stats.tests.test_TestSubclassingExplicitShapes.test_shapes_identifiers_2(self)
scipy.stats.tests.test_TestSubclassingExplicitShapes.test_shapes_identifiers_3(self)
scipy.stats.tests.test_TestSubclassingExplicitShapes.test_shapes_identifiers_nodefaults(self)
scipy.stats.tests.test_TestSubclassingExplicitShapes.test_shapes_keywords(self)
scipy.stats.tests.test_TestSubclassingExplicitShapes.test_shapes_kwargs(self)
scipy.stats.tests.test_TestSubclassingExplicitShapes.test_shapes_signature(self)
scipy.stats.tests.test_TestSubclassingExplicitShapes.test_shapes_signature_inconsistent(self)
scipy.stats.tests.test_TestSubclassingExplicitShapes.test_shapes_string(self)
scipy.stats.tests.test_TestSubclassingExplicitShapes.test_star_args(self)
scipy.stats.tests.test_TestSubclassingExplicitShapes.test_star_args_2(self)
scipy.stats.tests.test_TestSubclassingExplicitShapes.test_wrong_shapes_1(self)
scipy.stats.tests.test_TestSubclassingExplicitShapes.test_wrong_shapes_2(self)
scipy.stats.tests.test_TestSubclassingNoShapes
scipy.stats.tests.test_TestSubclassingNoShapes.test_defaults_raise(self)
scipy.stats.tests.test_TestSubclassingNoShapes.test_kwargs_raise(self)
scipy.stats.tests.test_TestSubclassingNoShapes.test_only__cdf(self)
scipy.stats.tests.test_TestSubclassingNoShapes.test_only__pdf(self)
scipy.stats.tests.test_TestSubclassingNoShapes.test_signature_inspection(self)
scipy.stats.tests.test_TestSubclassingNoShapes.test_signature_inspection_2args(self)
scipy.stats.tests.test_TestSubclassingNoShapes.test_signature_inspection_2args_incorrect_shapes(self)
scipy.stats.tests.test_TestSubclassingNoShapes.test_starargs_raise(self)
scipy.stats.tests.test_TestTrapezoid
scipy.stats.tests.test_TestTrapezoid.test_cases(self)
scipy.stats.tests.test_TestTrapezoid.test_moments_and_entropy(self)
scipy.stats.tests.test_TestTrapezoid.test_reduces_to_triang(self)
scipy.stats.tests.test_TestTrapezoid.test_reduces_to_uniform(self)
scipy.stats.tests.test_TestTrapezoid.test_trapezoid_vect(self)
scipy.stats.tests.test_TestTrapezoid.test_trapz(self)
scipy.stats.tests.test_TestTriang
scipy.stats.tests.test_TestTriang.test_edge_cases(self)
scipy.stats.tests.test_TestTruncWeibull(object)
scipy.stats.tests.test_TestTruncWeibull.test_cdf_to_ppf(self)
scipy.stats.tests.test_TestTruncWeibull.test_compare_weibull_min(self)
scipy.stats.tests.test_TestTruncWeibull.test_compare_weibull_min2(self)
scipy.stats.tests.test_TestTruncWeibull.test_logpdf(self)
scipy.stats.tests.test_TestTruncWeibull.test_munp(self)
scipy.stats.tests.test_TestTruncWeibull.test_pdf_bounds(self)
scipy.stats.tests.test_TestTruncWeibull.test_ppf_bounds(self)
scipy.stats.tests.test_TestTruncWeibull.test_reference_values(self)
scipy.stats.tests.test_TestTruncWeibull.test_sf_to_isf(self)
scipy.stats.tests.test_TestTruncnorm
scipy.stats.tests.test_TestTruncnorm._test_moments_one_range(self,a,b,expected,rtol=1e-07)
scipy.stats.tests.test_TestTruncnorm.setup_method(self)
scipy.stats.tests.test_TestTruncnorm.test_9902_moments(self)
scipy.stats.tests.test_TestTruncnorm.test_cdf_tail_15110_14753(self)
scipy.stats.tests.test_TestTruncnorm.test_gh_11299_rvs(self)
scipy.stats.tests.test_TestTruncnorm.test_gh_1489_trac_962_rvs(self)
scipy.stats.tests.test_TestTruncnorm.test_gh_2477_large_values(self)
scipy.stats.tests.test_TestTruncnorm.test_gh_2477_small_values(self)
scipy.stats.tests.test_TestTruncnorm.test_gh_9403_medium_tail_values(self)
scipy.stats.tests.test_TestTruncnorm.test_gh_9403_nontail_values(self)
scipy.stats.tests.test_TestTruncnorm.test_isf_ticket1131(self)
scipy.stats.tests.test_TestTruncnorm.test_logcdf_gh17064(self)
scipy.stats.tests.test_TestTruncnorm.test_moments(self,case)
scipy.stats.tests.test_TestTruncnorm.test_ppf_ticket1131(self)
scipy.stats.tests.test_TestTruncnorm.test_rvs_Generator(self)
scipy.stats.tests.test_TestUniform
scipy.stats.tests.test_TestUniform.test_inf_raises_error(self)
scipy.stats.tests.test_TestUniform.test_nan_raises_error(self)
scipy.stats.tests.test_TestWeibull
scipy.stats.tests.test_TestWeibull.test_fit_min(self)
scipy.stats.tests.test_TestWeibull.test_logpdf(self)
scipy.stats.tests.test_TestWeibull.test_with_maxima_distrib(self)
scipy.stats.tests.test_TestWrapCauchy
scipy.stats.tests.test_TestWrapCauchy.test_cdf(self)
scipy.stats.tests.test_TestWrapCauchy.test_cdf_center(self)
scipy.stats.tests.test_TestWrapCauchy.test_cdf_shape_broadcasting(self)
scipy.stats.tests.test_TestZipf
scipy.stats.tests.test_TestZipf.setup_method(self)
scipy.stats.tests.test_TestZipf.test_moments(self)
scipy.stats.tests.test_TestZipf.test_rvs(self)
scipy.stats.tests.test__assert_hasattr(a,b,msg=None)
scipy.stats.tests.test__assert_less_or_close_loglike(dist,data,func,**kwds)
scipy.stats.tests.test__distr2_gen(stats.rv_continuous)
scipy.stats.tests.test__distr2_gen._cdf(self,x,a)
scipy.stats.tests.test__distr3_gen(stats.rv_continuous)
scipy.stats.tests.test__distr3_gen._cdf(self,x,a)
scipy.stats.tests.test__distr3_gen._pdf(self,x,a,b)
scipy.stats.tests.test__distr6_gen(stats.rv_continuous)
scipy.stats.tests.test__distr6_gen._cdf(self,x,a,b)
scipy.stats.tests.test__distr6_gen._pdf(self,x,a,b)
scipy.stats.tests.test__distr_gen(stats.rv_continuous)
scipy.stats.tests.test__distr_gen._pdf(self,x,a)
scipy.stats.tests.test_assert_fit_warnings(dist)
scipy.stats.tests.test_check_vonmises_cdf_periodic(k,L,s,x)
scipy.stats.tests.test_check_vonmises_pdf_periodic(k,L,s,x)
scipy.stats.tests.test_distributions.TestArcsine
scipy.stats.tests.test_distributions.TestArcsine.test_endpoints(self)
scipy.stats.tests.test_distributions.TestArgsreduce()
scipy.stats.tests.test_distributions.TestArgus
scipy.stats.tests.test_distributions.TestArgus.test_argus_phi_small_chi(self,chi,expected,rtol)
scipy.stats.tests.test_distributions.TestArgus.test_argus_rvs_large_chi(self)
scipy.stats.tests.test_distributions.TestArgus.test_cdf_small_chi(self,chi,expected)
scipy.stats.tests.test_distributions.TestArgus.test_mean(self,chi,expected_mean)
scipy.stats.tests.test_distributions.TestArgus.test_pdf_small_chi(self,chi,expected)
scipy.stats.tests.test_distributions.TestArgus.test_rvs(self,chi,random_state)
scipy.stats.tests.test_distributions.TestArgus.test_rvs_small_chi(self,chi)
scipy.stats.tests.test_distributions.TestArgus.test_sf_small_chi(self,chi,expected)
scipy.stats.tests.test_distributions.TestArgus.test_stats_small_chi(self,chi,expected,rtol)
scipy.stats.tests.test_distributions.TestArgus.test_var(self,chi,expected_var,rtol)
scipy.stats.tests.test_distributions.TestArrayArgument
scipy.stats.tests.test_distributions.TestArrayArgument.setup_method(self)
scipy.stats.tests.test_distributions.TestArrayArgument.test_noexception(self)
scipy.stats.tests.test_distributions.TestBernoulli
scipy.stats.tests.test_distributions.TestBernoulli.setup_method(self)
scipy.stats.tests.test_distributions.TestBernoulli.test_entropy(self)
scipy.stats.tests.test_distributions.TestBernoulli.test_rvs(self)
scipy.stats.tests.test_distributions.TestBeta
scipy.stats.tests.test_distributions.TestBeta.test_beta_ppf_with_subnormal_a_b(self,method,a,b)
scipy.stats.tests.test_distributions.TestBeta.test_boost_eval_issue_14606(self)
scipy.stats.tests.test_distributions.TestBeta.test_endpoints(self)
scipy.stats.tests.test_distributions.TestBeta.test_fit_bad_keyword_args(self)
scipy.stats.tests.test_distributions.TestBeta.test_fit_duplicated_fixed_parameter(self)
scipy.stats.tests.test_distributions.TestBeta.test_issue_12635(self)
scipy.stats.tests.test_distributions.TestBeta.test_issue_12794(self)
scipy.stats.tests.test_distributions.TestBeta.test_issue_12796(self)
scipy.stats.tests.test_distributions.TestBeta.test_logpdf(self)
scipy.stats.tests.test_distributions.TestBeta.test_logpdf_ticket_1866(self)
scipy.stats.tests.test_distributions.TestBetaPrime
scipy.stats.tests.test_distributions.TestBetaPrime.test_cdf(self)
scipy.stats.tests.test_distributions.TestBetaPrime.test_logpdf(self)
scipy.stats.tests.test_distributions.TestBinom
scipy.stats.tests.test_distributions.TestBinom.setup_method(self)
scipy.stats.tests.test_distributions.TestBinom.test_entropy(self)
scipy.stats.tests.test_distributions.TestBinom.test_pmf(self)
scipy.stats.tests.test_distributions.TestBinom.test_rvs(self)
scipy.stats.tests.test_distributions.TestBinom.test_warns_p0(self)
scipy.stats.tests.test_distributions.TestBradford
scipy.stats.tests.test_distributions.TestBradford.test_cdf_ppf(self)
scipy.stats.tests.test_distributions.TestBurr
scipy.stats.tests.test_distributions.TestBurr.test_burr_nan_mean_var_9544(self)
scipy.stats.tests.test_distributions.TestBurr.test_burr_stats_9544(self)
scipy.stats.tests.test_distributions.TestBurr.test_endpoints_7491(self)
scipy.stats.tests.test_distributions.TestChi
scipy.stats.tests.test_distributions.TestChi.test_isf(self)
scipy.stats.tests.test_distributions.TestChi.test_mean(self)
scipy.stats.tests.test_distributions.TestChi.test_sf(self)
scipy.stats.tests.test_distributions.TestChi2
scipy.stats.tests.test_distributions.TestChi2.test_ppf(self)
scipy.stats.tests.test_distributions.TestChi2.test_precision(self)
scipy.stats.tests.test_distributions.TestDLaplace
scipy.stats.tests.test_distributions.TestDLaplace.setup_method(self)
scipy.stats.tests.test_distributions.TestDLaplace.test_rvs(self)
scipy.stats.tests.test_distributions.TestDLaplace.test_stats(self)
scipy.stats.tests.test_distributions.TestDLaplace.test_stats2(self)
scipy.stats.tests.test_distributions.TestDocstring
scipy.stats.tests.test_distributions.TestDocstring.test_docstrings(self)
scipy.stats.tests.test_distributions.TestDocstring.test_no_name_arg(self)
scipy.stats.tests.test_distributions.TestErlang
scipy.stats.tests.test_distributions.TestErlang.setup_method(self)
scipy.stats.tests.test_distributions.TestErlang.test_erlang_runtimewarning(self)
scipy.stats.tests.test_distributions.TestErlang.test_gh_pr_10949_argcheck(self)
scipy.stats.tests.test_distributions.TestExpect
scipy.stats.tests.test_distributions.TestExpect.test_beta(self)
scipy.stats.tests.test_distributions.TestExpect.test_challenging_cases_gh8928(self)
scipy.stats.tests.test_distributions.TestExpect.test_discrete_kwds(self)
scipy.stats.tests.test_distributions.TestExpect.test_genhalflogistic(self)
scipy.stats.tests.test_distributions.TestExpect.test_hypergeom(self)
scipy.stats.tests.test_distributions.TestExpect.test_lb_ub_gh15855(self)
scipy.stats.tests.test_distributions.TestExpect.test_logser(self)
scipy.stats.tests.test_distributions.TestExpect.test_moment(self)
scipy.stats.tests.test_distributions.TestExpect.test_norm(self)
scipy.stats.tests.test_distributions.TestExpect.test_poisson(self)
scipy.stats.tests.test_distributions.TestExpect.test_randint(self)
scipy.stats.tests.test_distributions.TestExpect.test_rice_overflow(self)
scipy.stats.tests.test_distributions.TestExpect.test_skellam(self)
scipy.stats.tests.test_distributions.TestExpect.test_zipf(self)
scipy.stats.tests.test_distributions.TestExpon
scipy.stats.tests.test_distributions.TestExpon.test_inf_raises_error(self)
scipy.stats.tests.test_distributions.TestExpon.test_nan_raises_error(self)
scipy.stats.tests.test_distributions.TestExpon.test_tail(self)
scipy.stats.tests.test_distributions.TestExpon.test_zero(self)
scipy.stats.tests.test_distributions.TestExponNorm
scipy.stats.tests.test_distributions.TestExponNorm.test_cdf_small_K(self,x,K,scale,expected)
scipy.stats.tests.test_distributions.TestExponNorm.test_extremes_x(self)
scipy.stats.tests.test_distributions.TestExponNorm.test_inf_raises_error(self)
scipy.stats.tests.test_distributions.TestExponNorm.test_moments(self)
scipy.stats.tests.test_distributions.TestExponNorm.test_nan_raises_error(self)
scipy.stats.tests.test_distributions.TestExponNorm.test_sf_small_K(self,x,K,scale,expected)
scipy.stats.tests.test_distributions.TestExponNorm.test_std_pdf(self,x,K,expected)
scipy.stats.tests.test_distributions.TestExponWeib
scipy.stats.tests.test_distributions.TestExponWeib.test_a_is_1(self)
scipy.stats.tests.test_distributions.TestExponWeib.test_a_is_1_c_is_1(self)
scipy.stats.tests.test_distributions.TestExponWeib.test_pdf_logpdf(self)
scipy.stats.tests.test_distributions.TestExponpow
scipy.stats.tests.test_distributions.TestExponpow.test_tail(self)
scipy.stats.tests.test_distributions.TestF
scipy.stats.tests.test_distributions.TestF.test_endpoints(self)
scipy.stats.tests.test_distributions.TestF.test_f_moments(self)
scipy.stats.tests.test_distributions.TestF.test_moments_warnings(self)
scipy.stats.tests.test_distributions.TestF.test_stats_broadcast(self)
scipy.stats.tests.test_distributions.TestFatigueLife
scipy.stats.tests.test_distributions.TestFatigueLife.test_isf_tail(self)
scipy.stats.tests.test_distributions.TestFatigueLife.test_sf_tail(self)
scipy.stats.tests.test_distributions.TestFitMethod
scipy.stats.tests.test_distributions.TestFitMethod.setup_method(self)
scipy.stats.tests.test_distributions.TestFitMethod.test_expon_fit(self)
scipy.stats.tests.test_distributions.TestFitMethod.test_extra_params(self,method)
scipy.stats.tests.test_distributions.TestFitMethod.test_fit_w_non_finite_data_values(self,dist,args)
scipy.stats.tests.test_distributions.TestFitMethod.test_fix_fit_2args_lognorm(self)
scipy.stats.tests.test_distributions.TestFitMethod.test_fix_fit_beta(self)
scipy.stats.tests.test_distributions.TestFitMethod.test_fix_fit_gamma(self)
scipy.stats.tests.test_distributions.TestFitMethod.test_fix_fit_norm(self)
scipy.stats.tests.test_distributions.TestFitMethod.test_fshapes(self,method)
scipy.stats.tests.test_distributions.TestFitMethod.test_lognorm_fit(self)
scipy.stats.tests.test_distributions.TestFitMethod.test_uniform_fit(self)
scipy.stats.tests.test_distributions.TestFrozen
scipy.stats.tests.test_distributions.TestFrozen.setup_method(self)
scipy.stats.tests.test_distributions.TestFrozen.test_ab(self)
scipy.stats.tests.test_distributions.TestFrozen.test_expect(self)
scipy.stats.tests.test_distributions.TestFrozen.test_gamma(self)
scipy.stats.tests.test_distributions.TestFrozen.test_norm(self)
scipy.stats.tests.test_distributions.TestFrozen.test_pickling(self)
scipy.stats.tests.test_distributions.TestFrozen.test_random_state(self)
scipy.stats.tests.test_distributions.TestFrozen.test_regression_ticket_1293(self)
scipy.stats.tests.test_distributions.TestFrozen.test_rv_frozen_in_namespace(self)
scipy.stats.tests.test_distributions.TestGamma
scipy.stats.tests.test_distributions.TestGamma.test_fit_bad_keyword_args(self)
scipy.stats.tests.test_distributions.TestGamma.test_isf(self)
scipy.stats.tests.test_distributions.TestGamma.test_logpdf(self)
scipy.stats.tests.test_distributions.TestGamma.test_pdf(self)
scipy.stats.tests.test_distributions.TestGenExpon
scipy.stats.tests.test_distributions.TestGenExpon.test_cdf_bounds(self)
scipy.stats.tests.test_distributions.TestGenExpon.test_pdf_unity_area(self)
scipy.stats.tests.test_distributions.TestGenExpon.test_sf_tail(self)
scipy.stats.tests.test_distributions.TestGenHyperbolic
scipy.stats.tests.test_distributions.TestGenHyperbolic.setup_method(self)
scipy.stats.tests.test_distributions.TestGenHyperbolic.test_cdf_r(self)
scipy.stats.tests.test_distributions.TestGenHyperbolic.test_moments_r(self)
scipy.stats.tests.test_distributions.TestGenHyperbolic.test_pdf_cauchy(self)
scipy.stats.tests.test_distributions.TestGenHyperbolic.test_pdf_laplace(self)
scipy.stats.tests.test_distributions.TestGenHyperbolic.test_pdf_norminvgauss(self)
scipy.stats.tests.test_distributions.TestGenHyperbolic.test_pdf_r(self)
scipy.stats.tests.test_distributions.TestGenHyperbolic.test_pdf_t(self)
scipy.stats.tests.test_distributions.TestGenHyperbolic.test_rvs(self)
scipy.stats.tests.test_distributions.TestGenInvGauss
scipy.stats.tests.test_distributions.TestGenInvGauss.setup_method(self)
scipy.stats.tests.test_distributions.TestGenInvGauss.test_invgauss(self)
scipy.stats.tests.test_distributions.TestGenInvGauss.test_pdf_R(self)
scipy.stats.tests.test_distributions.TestGenInvGauss.test_pdf_zero(self)
scipy.stats.tests.test_distributions.TestGenInvGauss.test_rvs_negative_p(self)
scipy.stats.tests.test_distributions.TestGenInvGauss.test_rvs_new_method(self)
scipy.stats.tests.test_distributions.TestGenInvGauss.test_rvs_p_zero(self)
scipy.stats.tests.test_distributions.TestGenInvGauss.test_rvs_with_mode_shift(self)
scipy.stats.tests.test_distributions.TestGenInvGauss.test_rvs_without_mode_shift(self)
scipy.stats.tests.test_distributions.TestGenLogistic
scipy.stats.tests.test_distributions.TestGenLogistic.test_logpdf(self,x,expected)
scipy.stats.tests.test_distributions.TestGennorm
scipy.stats.tests.test_distributions.TestGennorm.test_laplace(self)
scipy.stats.tests.test_distributions.TestGennorm.test_norm(self)
scipy.stats.tests.test_distributions.TestGennorm.test_rvs(self)
scipy.stats.tests.test_distributions.TestGennorm.test_rvs_broadcasting(self)
scipy.stats.tests.test_distributions.TestGenpareto
scipy.stats.tests.test_distributions.TestGenpareto.test_ab(self)
scipy.stats.tests.test_distributions.TestGenpareto.test_c0(self)
scipy.stats.tests.test_distributions.TestGenpareto.test_c_continuity(self)
scipy.stats.tests.test_distributions.TestGenpareto.test_c_continuity_isf(self)
scipy.stats.tests.test_distributions.TestGenpareto.test_c_continuity_ppf(self)
scipy.stats.tests.test_distributions.TestGenpareto.test_cdf_ppf_roundtrip(self)
scipy.stats.tests.test_distributions.TestGenpareto.test_cm1(self)
scipy.stats.tests.test_distributions.TestGenpareto.test_logsf(self)
scipy.stats.tests.test_distributions.TestGenpareto.test_stats(self,c,expected_stats)
scipy.stats.tests.test_distributions.TestGenpareto.test_var(self)
scipy.stats.tests.test_distributions.TestGenpareto.test_x_inf(self)
scipy.stats.tests.test_distributions.TestGeom
scipy.stats.tests.test_distributions.TestGeom.setup_method(self)
scipy.stats.tests.test_distributions.TestGeom.test_cdf_sf(self)
scipy.stats.tests.test_distributions.TestGeom.test_logcdf_logsf(self)
scipy.stats.tests.test_distributions.TestGeom.test_logpmf(self)
scipy.stats.tests.test_distributions.TestGeom.test_pmf(self)
scipy.stats.tests.test_distributions.TestGeom.test_ppf(self)
scipy.stats.tests.test_distributions.TestGeom.test_ppf_underflow(self)
scipy.stats.tests.test_distributions.TestGeom.test_rvs(self)
scipy.stats.tests.test_distributions.TestGeom.test_rvs_9313(self)
scipy.stats.tests.test_distributions.TestGumbelL
scipy.stats.tests.test_distributions.TestGumbelL.test_cdf_ppf(self)
scipy.stats.tests.test_distributions.TestGumbelL.test_fit_fixed_param(self,loc)
scipy.stats.tests.test_distributions.TestGumbelL.test_logcdf_logsf(self)
scipy.stats.tests.test_distributions.TestGumbelL.test_sf_isf(self)
scipy.stats.tests.test_distributions.TestGumbelR
scipy.stats.tests.test_distributions.TestGumbelR.test_isf(self)
scipy.stats.tests.test_distributions.TestGumbelR.test_sf(self)
scipy.stats.tests.test_distributions.TestGumbel_r_l
scipy.stats.tests.test_distributions.TestGumbel_r_l.rng(self)
scipy.stats.tests.test_distributions.TestGumbel_r_l.test_fit(self,dist,sgn)
scipy.stats.tests.test_distributions.TestGumbel_r_l.test_fit_comp_optimizer(self,dist,loc_rvs,scale_rvs,fix_loc,fix_scale,rng)
scipy.stats.tests.test_distributions.TestHalfgennorm
scipy.stats.tests.test_distributions.TestHalfgennorm.test_expon(self)
scipy.stats.tests.test_distributions.TestHalfgennorm.test_gennorm(self)
scipy.stats.tests.test_distributions.TestHalfgennorm.test_halfnorm(self)
scipy.stats.tests.test_distributions.TestHistogram
scipy.stats.tests.test_distributions.TestHistogram.setup_method(self)
scipy.stats.tests.test_distributions.TestHistogram.test_cdf_ppf(self)
scipy.stats.tests.test_distributions.TestHistogram.test_entropy(self)
scipy.stats.tests.test_distributions.TestHistogram.test_munp(self)
scipy.stats.tests.test_distributions.TestHistogram.test_pdf(self)
scipy.stats.tests.test_distributions.TestHistogram.test_rvs(self)
scipy.stats.tests.test_distributions.TestHypergeom
scipy.stats.tests.test_distributions.TestHypergeom.setup_method(self)
scipy.stats.tests.test_distributions.TestHypergeom.test_args(self)
scipy.stats.tests.test_distributions.TestHypergeom.test_cdf_above_one(self)
scipy.stats.tests.test_distributions.TestHypergeom.test_entropy(self)
scipy.stats.tests.test_distributions.TestHypergeom.test_logcdf(self)
scipy.stats.tests.test_distributions.TestHypergeom.test_logsf(self)
scipy.stats.tests.test_distributions.TestHypergeom.test_precision(self)
scipy.stats.tests.test_distributions.TestHypergeom.test_precision2(self)
scipy.stats.tests.test_distributions.TestHypergeom.test_rvs(self)
scipy.stats.tests.test_distributions.TestInvGamma
scipy.stats.tests.test_distributions.TestInvGamma.test_cdf_ppf(self)
scipy.stats.tests.test_distributions.TestInvGamma.test_invgamma_inf_gh_1866(self)
scipy.stats.tests.test_distributions.TestInvGamma.test_sf_isf(self)
scipy.stats.tests.test_distributions.TestInvgauss
scipy.stats.tests.test_distributions.TestInvgauss.setup_method(self)
scipy.stats.tests.test_distributions.TestInvgauss.test_cdf_sf(self)
scipy.stats.tests.test_distributions.TestInvgauss.test_fit(self,rvs_mu,rvs_loc,rvs_scale)
scipy.stats.tests.test_distributions.TestInvgauss.test_fit_MLE_comp_optimizer(self,rvs_mu,rvs_loc,rvs_scale)
scipy.stats.tests.test_distributions.TestInvgauss.test_fit_raise_errors(self)
scipy.stats.tests.test_distributions.TestInvgauss.test_logcdf_logsf(self)
scipy.stats.tests.test_distributions.TestKSTwo
scipy.stats.tests.test_distributions.TestKSTwo.setup_method(self)
scipy.stats.tests.test_distributions.TestKSTwo.test_cdf(self)
scipy.stats.tests.test_distributions.TestKSTwo.test_cdf_sf(self)
scipy.stats.tests.test_distributions.TestKSTwo.test_cdf_sf_sqrtn(self)
scipy.stats.tests.test_distributions.TestKSTwo.test_cdf_sqrtn(self)
scipy.stats.tests.test_distributions.TestKSTwo.test_isf_of_sf(self)
scipy.stats.tests.test_distributions.TestKSTwo.test_isf_of_sf_sqrtn(self)
scipy.stats.tests.test_distributions.TestKSTwo.test_ppf(self)
scipy.stats.tests.test_distributions.TestKSTwo.test_ppf_of_cdf(self)
scipy.stats.tests.test_distributions.TestKSTwo.test_ppf_of_cdf_sqrtn(self)
scipy.stats.tests.test_distributions.TestKSTwo.test_sf(self)
scipy.stats.tests.test_distributions.TestKSTwo.test_simard_lecuyer_table1(self)
scipy.stats.tests.test_distributions.TestKappa4
scipy.stats.tests.test_distributions.TestKappa4.test_cdf_expon(self)
scipy.stats.tests.test_distributions.TestKappa4.test_cdf_genextreme(self)
scipy.stats.tests.test_distributions.TestKappa4.test_cdf_genpareto(self)
scipy.stats.tests.test_distributions.TestKappa4.test_cdf_gumbel_r(self)
scipy.stats.tests.test_distributions.TestKappa4.test_cdf_logistic(self)
scipy.stats.tests.test_distributions.TestKappa4.test_cdf_uniform(self)
scipy.stats.tests.test_distributions.TestKappa4.test_integers_ctor(self)
scipy.stats.tests.test_distributions.TestLaplace
scipy.stats.tests.test_distributions.TestLaplace.test_fit(self,rvs_loc,rvs_scale)
scipy.stats.tests.test_distributions.TestLaplace.test_fit_MLE_comp_optimizer(self,rvs_loc,rvs_scale)
scipy.stats.tests.test_distributions.TestLaplace.test_fit_simple_non_random_data(self)
scipy.stats.tests.test_distributions.TestLaplace.test_isf(self)
scipy.stats.tests.test_distributions.TestLaplace.test_sf(self)
scipy.stats.tests.test_distributions.TestLaplace.test_sf_cdf_extremes(self)
scipy.stats.tests.test_distributions.TestLaplaceasymmetric
scipy.stats.tests.test_distributions.TestLaplaceasymmetric.test_asymmetric_laplace_log_10_16(self)
scipy.stats.tests.test_distributions.TestLaplaceasymmetric.test_asymmetric_laplace_pdf(self)
scipy.stats.tests.test_distributions.TestLaplaceasymmetric.test_laplace(self)
scipy.stats.tests.test_distributions.TestLevyStable
scipy.stats.tests.test_distributions.TestLevyStable.nolan_cdf_sample_data(self)
scipy.stats.tests.test_distributions.TestLevyStable.nolan_loc_scale_sample_data(self)
scipy.stats.tests.test_distributions.TestLevyStable.nolan_pdf_sample_data(self)
scipy.stats.tests.test_distributions.TestLevyStable.test_cdf_nolan_samples(self,nolan_cdf_sample_data,pct_range,alpha_range,beta_range)
scipy.stats.tests.test_distributions.TestLevyStable.test_distribution_outside_support(self,alpha,function,beta,points,expected)
scipy.stats.tests.test_distributions.TestLevyStable.test_fit(self)
scipy.stats.tests.test_distributions.TestLevyStable.test_fit_beta_flip(self)
scipy.stats.tests.test_distributions.TestLevyStable.test_fit_delta_shift(self)
scipy.stats.tests.test_distributions.TestLevyStable.test_fit_loc_extrap(self)
scipy.stats.tests.test_distributions.TestLevyStable.test_fit_rvs(self,alpha,beta,delta,gamma,parametrization)
scipy.stats.tests.test_distributions.TestLevyStable.test_location_scale(self,nolan_loc_scale_sample_data,param,case)
scipy.stats.tests.test_distributions.TestLevyStable.test_pdf_alpha_equals_one_beta_non_zero(self,method,decimal_places)
scipy.stats.tests.test_distributions.TestLevyStable.test_pdf_nolan_samples(self,nolan_pdf_sample_data,pct_range,alpha_range,beta_range)
scipy.stats.tests.test_distributions.TestLevyStable.test_rvs(self,parameterization,alpha,beta,gamma,delta,sample_size)
scipy.stats.tests.test_distributions.TestLevyStable.test_rvs_alpha1(self,beta)
scipy.stats.tests.test_distributions.TestLevyStable.test_stats(self,params,expected)
scipy.stats.tests.test_distributions.TestLogUniform
scipy.stats.tests.test_distributions.TestLogUniform.test_alias(self)
scipy.stats.tests.test_distributions.TestLogUniform.test_fit_override(self,method)
scipy.stats.tests.test_distributions.TestLoggamma
scipy.stats.tests.test_distributions.TestLoggamma.test_logpdf(self)
scipy.stats.tests.test_distributions.TestLoggamma.test_rvs(self,c)
scipy.stats.tests.test_distributions.TestLoggamma.test_sf_isf(self,x,c,sf)
scipy.stats.tests.test_distributions.TestLoggamma.test_stats(self)
scipy.stats.tests.test_distributions.TestLogistic
scipy.stats.tests.test_distributions.TestLogistic.test_cdf_ppf(self)
scipy.stats.tests.test_distributions.TestLogistic.test_extreme_values(self)
scipy.stats.tests.test_distributions.TestLogistic.test_fit(self,loc_rvs,scale_rvs)
scipy.stats.tests.test_distributions.TestLogistic.test_fit_comp_optimizer(self)
scipy.stats.tests.test_distributions.TestLogistic.test_logcdfsf_tails(self,testlogcdf)
scipy.stats.tests.test_distributions.TestLogistic.test_logpdf_basic(self)
scipy.stats.tests.test_distributions.TestLogistic.test_logpdf_extreme_values(self)
scipy.stats.tests.test_distributions.TestLogistic.test_sf_isf(self)
scipy.stats.tests.test_distributions.TestLognorm
scipy.stats.tests.test_distributions.TestLognorm.test_logcdf(self)
scipy.stats.tests.test_distributions.TestLognorm.test_pdf(self)
scipy.stats.tests.test_distributions.TestLogser
scipy.stats.tests.test_distributions.TestLogser.setup_method(self)
scipy.stats.tests.test_distributions.TestLogser.test_mean_small_p(self)
scipy.stats.tests.test_distributions.TestLogser.test_pmf_small_p(self)
scipy.stats.tests.test_distributions.TestLogser.test_rvs(self)
scipy.stats.tests.test_distributions.TestMielke
scipy.stats.tests.test_distributions.TestMielke.test_burr_equivalence(self)
scipy.stats.tests.test_distributions.TestMielke.test_moments(self)
scipy.stats.tests.test_distributions.TestNBinom
scipy.stats.tests.test_distributions.TestNBinom.setup_method(self)
scipy.stats.tests.test_distributions.TestNBinom.test_logcdf_gh16159(self)
scipy.stats.tests.test_distributions.TestNBinom.test_pmf(self)
scipy.stats.tests.test_distributions.TestNBinom.test_rvs(self)
scipy.stats.tests.test_distributions.TestNakagami
scipy.stats.tests.test_distributions.TestNakagami.test_fit(self,nu,loc,scale)
scipy.stats.tests.test_distributions.TestNakagami.test_fit_nu(self,loc,scale)
scipy.stats.tests.test_distributions.TestNakagami.test_logpdf(self)
scipy.stats.tests.test_distributions.TestNakagami.test_sf_isf(self)
scipy.stats.tests.test_distributions.TestNct
scipy.stats.tests.test_distributions.TestNct.test_broadcasting(self)
scipy.stats.tests.test_distributions.TestNct.test_nc_parameter(self)
scipy.stats.tests.test_distributions.TestNct.test_nct_inf_moments(self)
scipy.stats.tests.test_distributions.TestNct.test_nct_stats_large_df_values(self)
scipy.stats.tests.test_distributions.TestNct.test_variance_gh_issue_2401(self)
scipy.stats.tests.test_distributions.TestNorm
scipy.stats.tests.test_distributions.TestNorm.test_bad_keyword_arg(self)
scipy.stats.tests.test_distributions.TestNorm.test_inf_raises_error(self)
scipy.stats.tests.test_distributions.TestNorm.test_nan_raises_error(self)
scipy.stats.tests.test_distributions.TestNormInvGauss
scipy.stats.tests.test_distributions.TestNormInvGauss.setup_method(self)
scipy.stats.tests.test_distributions.TestNormInvGauss.test_cdf_R(self)
scipy.stats.tests.test_distributions.TestNormInvGauss.test_gh8718(self)
scipy.stats.tests.test_distributions.TestNormInvGauss.test_pdf_R(self)
scipy.stats.tests.test_distributions.TestNormInvGauss.test_ppf(self)
scipy.stats.tests.test_distributions.TestNormInvGauss.test_sf_isf_mpmath(self,x,a,b,sf,rtol)
scipy.stats.tests.test_distributions.TestNormInvGauss.test_sf_isf_mpmath_vectorized(self)
scipy.stats.tests.test_distributions.TestNormInvGauss.test_stats(self)
scipy.stats.tests.test_distributions.TestPareto
scipy.stats.tests.test_distributions.TestPareto.rng(self)
scipy.stats.tests.test_distributions.TestPareto.test_fit(self,rvs_shape,rvs_loc,rvs_scale,rng)
scipy.stats.tests.test_distributions.TestPareto.test_fit_MLE_comp_optimizer(self,rvs_shape,rvs_loc,rvs_scale,fix_shape,fix_loc,fix_scale,rng)
scipy.stats.tests.test_distributions.TestPareto.test_fit_known_bad_seed(self)
scipy.stats.tests.test_distributions.TestPareto.test_fit_warnings(self)
scipy.stats.tests.test_distributions.TestPareto.test_negative_data(self,rng)
scipy.stats.tests.test_distributions.TestPareto.test_sf(self)
scipy.stats.tests.test_distributions.TestPareto.test_stats(self)
scipy.stats.tests.test_distributions.TestPearson3
scipy.stats.tests.test_distributions.TestPearson3.setup_method(self)
scipy.stats.tests.test_distributions.TestPearson3.test_cdf(self)
scipy.stats.tests.test_distributions.TestPearson3.test_negative_cdf_bug_11186(self)
scipy.stats.tests.test_distributions.TestPearson3.test_pdf(self)
scipy.stats.tests.test_distributions.TestPearson3.test_ppf_bug_17050(self)
scipy.stats.tests.test_distributions.TestPearson3.test_return_array_bug_11746(self)
scipy.stats.tests.test_distributions.TestPearson3.test_rvs(self)
scipy.stats.tests.test_distributions.TestPlanck
scipy.stats.tests.test_distributions.TestPlanck.setup_method(self)
scipy.stats.tests.test_distributions.TestPlanck.test_logsf(self)
scipy.stats.tests.test_distributions.TestPlanck.test_sf(self)
scipy.stats.tests.test_distributions.TestPoisson
scipy.stats.tests.test_distributions.TestPoisson.setup_method(self)
scipy.stats.tests.test_distributions.TestPoisson.test_mu0(self)
scipy.stats.tests.test_distributions.TestPoisson.test_pmf_basic(self)
scipy.stats.tests.test_distributions.TestPoisson.test_rvs(self)
scipy.stats.tests.test_distributions.TestPoisson.test_stats(self)
scipy.stats.tests.test_distributions.TestPowerlaw(object)
scipy.stats.tests.test_distributions.TestPowerlaw.rng(self)
scipy.stats.tests.test_distributions.TestPowerlaw.test_fit_MLE_comp_optimizer(self,rvs_shape,rvs_loc,rvs_scale,fix_shape,fix_loc,fix_scale,rng)
scipy.stats.tests.test_distributions.TestPowerlaw.test_fit_warnings(self)
scipy.stats.tests.test_distributions.TestPowerlaw.test_problem_case(self)
scipy.stats.tests.test_distributions.TestRandInt
scipy.stats.tests.test_distributions.TestRandInt.setup_method(self)
scipy.stats.tests.test_distributions.TestRandInt.test_cdf(self)
scipy.stats.tests.test_distributions.TestRandInt.test_pdf(self)
scipy.stats.tests.test_distributions.TestRandInt.test_rvs(self)
scipy.stats.tests.test_distributions.TestRayleigh
scipy.stats.tests.test_distributions.TestRayleigh.setup_method(self)
scipy.stats.tests.test_distributions.TestRayleigh.test_fit(self,rvs_loc,rvs_scale)
scipy.stats.tests.test_distributions.TestRayleigh.test_fit_comparison_super_method(self,rvs_loc,rvs_scale)
scipy.stats.tests.test_distributions.TestRayleigh.test_fit_gh17088(self)
scipy.stats.tests.test_distributions.TestRayleigh.test_fit_warnings(self)
scipy.stats.tests.test_distributions.TestRayleigh.test_logpdf(self)
scipy.stats.tests.test_distributions.TestRayleigh.test_logsf(self)
scipy.stats.tests.test_distributions.TestRdist
scipy.stats.tests.test_distributions.TestRdist.test_rdist_beta(self)
scipy.stats.tests.test_distributions.TestRdist.test_rdist_cdf_gh1285(self)
scipy.stats.tests.test_distributions.TestRecipInvGauss
scipy.stats.tests.test_distributions.TestRecipInvGauss.test_cdf_small_x(self)
scipy.stats.tests.test_distributions.TestRecipInvGauss.test_logpdf_endpoint(self)
scipy.stats.tests.test_distributions.TestRecipInvGauss.test_pdf_endpoint(self)
scipy.stats.tests.test_distributions.TestRecipInvGauss.test_sf_large_x(self)
scipy.stats.tests.test_distributions.TestRice
scipy.stats.tests.test_distributions.TestRice.test_rice_gh9836(self)
scipy.stats.tests.test_distributions.TestRice.test_rice_rvs(self)
scipy.stats.tests.test_distributions.TestRice.test_rice_zero_b(self)
scipy.stats.tests.test_distributions.TestRvDiscrete
scipy.stats.tests.test_distributions.TestRvDiscrete.setup_method(self)
scipy.stats.tests.test_distributions.TestRvDiscrete.test_bad_input(self)
scipy.stats.tests.test_distributions.TestRvDiscrete.test_cdf(self)
scipy.stats.tests.test_distributions.TestRvDiscrete.test_cdf_ppf_next(self)
scipy.stats.tests.test_distributions.TestRvDiscrete.test_entropy(self)
scipy.stats.tests.test_distributions.TestRvDiscrete.test_expect1(self)
scipy.stats.tests.test_distributions.TestRvDiscrete.test_expect2(self)
scipy.stats.tests.test_distributions.TestRvDiscrete.test_multidimension(self)
scipy.stats.tests.test_distributions.TestRvDiscrete.test_pmf(self)
scipy.stats.tests.test_distributions.TestRvDiscrete.test_ppf(self)
scipy.stats.tests.test_distributions.TestRvDiscrete.test_rvs(self)
scipy.stats.tests.test_distributions.TestRvDiscrete.test_shape_rv_sample(self)
scipy.stats.tests.test_distributions.TestSkellam
scipy.stats.tests.test_distributions.TestSkellam.test_cdf(self)
scipy.stats.tests.test_distributions.TestSkellam.test_pmf(self)
scipy.stats.tests.test_distributions.TestSkewCauchy
scipy.stats.tests.test_distributions.TestSkewCauchy.test_cauchy(self)
scipy.stats.tests.test_distributions.TestSkewCauchy.test_skewcauchy_R(self)
scipy.stats.tests.test_distributions.TestSkewNorm
scipy.stats.tests.test_distributions.TestSkewNorm.setup_method(self)
scipy.stats.tests.test_distributions.TestSkewNorm.test_cdf_large_x(self)
scipy.stats.tests.test_distributions.TestSkewNorm.test_cdf_sf_small_values(self)
scipy.stats.tests.test_distributions.TestSkewNorm.test_fit(self)
scipy.stats.tests.test_distributions.TestSkewNorm.test_moments(self)
scipy.stats.tests.test_distributions.TestSkewNorm.test_noncentral_moments(self,a,moments)
scipy.stats.tests.test_distributions.TestSkewNorm.test_normal(self)
scipy.stats.tests.test_distributions.TestSkewNorm.test_rvs(self)
scipy.stats.tests.test_distributions.TestStudentizedRange
scipy.stats.tests.test_distributions.TestStudentizedRange.test_cdf_against_mp(self,case_result)
scipy.stats.tests.test_distributions.TestStudentizedRange.test_cdf_against_r(self,r_case_result)
scipy.stats.tests.test_distributions.TestStudentizedRange.test_cdf_against_tables(self)
scipy.stats.tests.test_distributions.TestStudentizedRange.test_clipping(self)
scipy.stats.tests.test_distributions.TestStudentizedRange.test_df_cutoff(self)
scipy.stats.tests.test_distributions.TestStudentizedRange.test_fitstart_valid(self)
scipy.stats.tests.test_distributions.TestStudentizedRange.test_infinite_df(self)
scipy.stats.tests.test_distributions.TestStudentizedRange.test_moment_against_mp(self,case_result)
scipy.stats.tests.test_distributions.TestStudentizedRange.test_moment_vectorization(self)
scipy.stats.tests.test_distributions.TestStudentizedRange.test_pdf_against_cdf(self)
scipy.stats.tests.test_distributions.TestStudentizedRange.test_pdf_against_mp(self,case_result)
scipy.stats.tests.test_distributions.TestStudentizedRange.test_pdf_integration(self)
scipy.stats.tests.test_distributions.TestStudentizedRange.test_ppf_against_tables(self)
scipy.stats.tests.test_distributions.TestSubclassingExplicitShapes
scipy.stats.tests.test_distributions.TestSubclassingExplicitShapes.shapes_empty_string(self)
scipy.stats.tests.test_distributions.TestSubclassingExplicitShapes.test_correct_shapes(self)
scipy.stats.tests.test_distributions.TestSubclassingExplicitShapes.test_extra_kwarg(self)
scipy.stats.tests.test_distributions.TestSubclassingExplicitShapes.test_shapes_args(self)
scipy.stats.tests.test_distributions.TestSubclassingExplicitShapes.test_shapes_identifiers_1(self)
scipy.stats.tests.test_distributions.TestSubclassingExplicitShapes.test_shapes_identifiers_2(self)
scipy.stats.tests.test_distributions.TestSubclassingExplicitShapes.test_shapes_identifiers_3(self)
scipy.stats.tests.test_distributions.TestSubclassingExplicitShapes.test_shapes_identifiers_nodefaults(self)
scipy.stats.tests.test_distributions.TestSubclassingExplicitShapes.test_shapes_keywords(self)
scipy.stats.tests.test_distributions.TestSubclassingExplicitShapes.test_shapes_kwargs(self)
scipy.stats.tests.test_distributions.TestSubclassingExplicitShapes.test_shapes_signature(self)
scipy.stats.tests.test_distributions.TestSubclassingExplicitShapes.test_shapes_signature_inconsistent(self)
scipy.stats.tests.test_distributions.TestSubclassingExplicitShapes.test_shapes_string(self)
scipy.stats.tests.test_distributions.TestSubclassingExplicitShapes.test_star_args(self)
scipy.stats.tests.test_distributions.TestSubclassingExplicitShapes.test_star_args_2(self)
scipy.stats.tests.test_distributions.TestSubclassingExplicitShapes.test_wrong_shapes_1(self)
scipy.stats.tests.test_distributions.TestSubclassingExplicitShapes.test_wrong_shapes_2(self)
scipy.stats.tests.test_distributions.TestSubclassingNoShapes
scipy.stats.tests.test_distributions.TestSubclassingNoShapes.test_defaults_raise(self)
scipy.stats.tests.test_distributions.TestSubclassingNoShapes.test_kwargs_raise(self)
scipy.stats.tests.test_distributions.TestSubclassingNoShapes.test_only__cdf(self)
scipy.stats.tests.test_distributions.TestSubclassingNoShapes.test_only__pdf(self)
scipy.stats.tests.test_distributions.TestSubclassingNoShapes.test_signature_inspection(self)
scipy.stats.tests.test_distributions.TestSubclassingNoShapes.test_signature_inspection_2args(self)
scipy.stats.tests.test_distributions.TestSubclassingNoShapes.test_signature_inspection_2args_incorrect_shapes(self)
scipy.stats.tests.test_distributions.TestSubclassingNoShapes.test_starargs_raise(self)
scipy.stats.tests.test_distributions.TestTrapezoid
scipy.stats.tests.test_distributions.TestTrapezoid.test_cases(self)
scipy.stats.tests.test_distributions.TestTrapezoid.test_moments_and_entropy(self)
scipy.stats.tests.test_distributions.TestTrapezoid.test_reduces_to_triang(self)
scipy.stats.tests.test_distributions.TestTrapezoid.test_reduces_to_uniform(self)
scipy.stats.tests.test_distributions.TestTrapezoid.test_trapezoid_vect(self)
scipy.stats.tests.test_distributions.TestTrapezoid.test_trapz(self)
scipy.stats.tests.test_distributions.TestTriang
scipy.stats.tests.test_distributions.TestTriang.test_edge_cases(self)
scipy.stats.tests.test_distributions.TestTruncWeibull(object)
scipy.stats.tests.test_distributions.TestTruncWeibull.test_cdf_to_ppf(self)
scipy.stats.tests.test_distributions.TestTruncWeibull.test_compare_weibull_min(self)
scipy.stats.tests.test_distributions.TestTruncWeibull.test_compare_weibull_min2(self)
scipy.stats.tests.test_distributions.TestTruncWeibull.test_logpdf(self)
scipy.stats.tests.test_distributions.TestTruncWeibull.test_munp(self)
scipy.stats.tests.test_distributions.TestTruncWeibull.test_pdf_bounds(self)
scipy.stats.tests.test_distributions.TestTruncWeibull.test_ppf_bounds(self)
scipy.stats.tests.test_distributions.TestTruncWeibull.test_reference_values(self)
scipy.stats.tests.test_distributions.TestTruncWeibull.test_sf_to_isf(self)
scipy.stats.tests.test_distributions.TestTruncnorm
scipy.stats.tests.test_distributions.TestTruncnorm._test_moments_one_range(self,a,b,expected,rtol=1e-07)
scipy.stats.tests.test_distributions.TestTruncnorm.setup_method(self)
scipy.stats.tests.test_distributions.TestTruncnorm.test_9902_moments(self)
scipy.stats.tests.test_distributions.TestTruncnorm.test_cdf_tail_15110_14753(self)
scipy.stats.tests.test_distributions.TestTruncnorm.test_gh_11299_rvs(self)
scipy.stats.tests.test_distributions.TestTruncnorm.test_gh_1489_trac_962_rvs(self)
scipy.stats.tests.test_distributions.TestTruncnorm.test_gh_2477_large_values(self)
scipy.stats.tests.test_distributions.TestTruncnorm.test_gh_2477_small_values(self)
scipy.stats.tests.test_distributions.TestTruncnorm.test_gh_9403_medium_tail_values(self)
scipy.stats.tests.test_distributions.TestTruncnorm.test_gh_9403_nontail_values(self)
scipy.stats.tests.test_distributions.TestTruncnorm.test_isf_ticket1131(self)
scipy.stats.tests.test_distributions.TestTruncnorm.test_logcdf_gh17064(self)
scipy.stats.tests.test_distributions.TestTruncnorm.test_moments(self,case)
scipy.stats.tests.test_distributions.TestTruncnorm.test_ppf_ticket1131(self)
scipy.stats.tests.test_distributions.TestTruncnorm.test_rvs_Generator(self)
scipy.stats.tests.test_distributions.TestUniform
scipy.stats.tests.test_distributions.TestUniform.test_inf_raises_error(self)
scipy.stats.tests.test_distributions.TestUniform.test_nan_raises_error(self)
scipy.stats.tests.test_distributions.TestWeibull
scipy.stats.tests.test_distributions.TestWeibull.test_fit_min(self)
scipy.stats.tests.test_distributions.TestWeibull.test_logpdf(self)
scipy.stats.tests.test_distributions.TestWeibull.test_with_maxima_distrib(self)
scipy.stats.tests.test_distributions.TestWrapCauchy
scipy.stats.tests.test_distributions.TestWrapCauchy.test_cdf(self)
scipy.stats.tests.test_distributions.TestWrapCauchy.test_cdf_center(self)
scipy.stats.tests.test_distributions.TestWrapCauchy.test_cdf_shape_broadcasting(self)
scipy.stats.tests.test_distributions.TestZipf
scipy.stats.tests.test_distributions.TestZipf.setup_method(self)
scipy.stats.tests.test_distributions.TestZipf.test_moments(self)
scipy.stats.tests.test_distributions.TestZipf.test_rvs(self)
scipy.stats.tests.test_distributions._assert_hasattr(a,b,msg=None)
scipy.stats.tests.test_distributions._assert_less_or_close_loglike(dist,data,func,**kwds)
scipy.stats.tests.test_distributions._distr2_gen(stats.rv_continuous)
scipy.stats.tests.test_distributions._distr2_gen._cdf(self,x,a)
scipy.stats.tests.test_distributions._distr3_gen(stats.rv_continuous)
scipy.stats.tests.test_distributions._distr3_gen._cdf(self,x,a)
scipy.stats.tests.test_distributions._distr3_gen._pdf(self,x,a,b)
scipy.stats.tests.test_distributions._distr6_gen(stats.rv_continuous)
scipy.stats.tests.test_distributions._distr6_gen._cdf(self,x,a,b)
scipy.stats.tests.test_distributions._distr6_gen._pdf(self,x,a,b)
scipy.stats.tests.test_distributions._distr_gen(stats.rv_continuous)
scipy.stats.tests.test_distributions._distr_gen._pdf(self,x,a)
scipy.stats.tests.test_distributions.assert_fit_warnings(dist)
scipy.stats.tests.test_distributions.check_vonmises_cdf_periodic(k,L,s,x)
scipy.stats.tests.test_distributions.check_vonmises_pdf_periodic(k,L,s,x)
scipy.stats.tests.test_distributions.test_540_567()
scipy.stats.tests.test_distributions.test_api_regression()
scipy.stats.tests.test_distributions.test_burr12_ppf_small_arg()
scipy.stats.tests.test_distributions.test_cosine_cdf_sf(x,expected)
scipy.stats.tests.test_distributions.test_cosine_logpdf_endpoints()
scipy.stats.tests.test_distributions.test_cosine_ppf_isf(p,expected)
scipy.stats.tests.test_distributions.test_crystalball_entropy()
scipy.stats.tests.test_distributions.test_crystalball_function()
scipy.stats.tests.test_distributions.test_crystalball_function_moments()
scipy.stats.tests.test_distributions.test_distr_params_lists()
scipy.stats.tests.test_distributions.test_distribution_too_many_args()
scipy.stats.tests.test_distributions.test_distributions_submodule()
scipy.stats.tests.test_distributions.test_docstrings()
scipy.stats.tests.test_distributions.test_exponpow_edge()
scipy.stats.tests.test_distributions.test_foldnorm_zero()
scipy.stats.tests.test_distributions.test_frozen_fit_ticket_1536()
scipy.stats.tests.test_distributions.test_genextreme_entropy()
scipy.stats.tests.test_distributions.test_genextreme_give_no_warnings()
scipy.stats.tests.test_distributions.test_genextreme_sf_isf()
scipy.stats.tests.test_distributions.test_gengamma_edge()
scipy.stats.tests.test_distributions.test_gengamma_endpoint_with_neg_c()
scipy.stats.tests.test_distributions.test_gengamma_munp()
scipy.stats.tests.test_distributions.test_gh_pr_4806()
scipy.stats.tests.test_distributions.test_gompertz_accuracy()
scipy.stats.tests.test_distributions.test_histogram_non_uniform()
scipy.stats.tests.test_distributions.test_hypergeom_interval_1802()
scipy.stats.tests.test_distributions.test_infinite_input()
scipy.stats.tests.test_distributions.test_invweibull_fit()
scipy.stats.tests.test_distributions.test_invweibull_isf(p,c,expected)
scipy.stats.tests.test_distributions.test_invweibull_sf(x,c,expected)
scipy.stats.tests.test_distributions.test_ksone_fit_freeze()
scipy.stats.tests.test_distributions.test_levy_cdf_ppf()
scipy.stats.tests.test_distributions.test_levy_isf(p,expected_isf)
scipy.stats.tests.test_distributions.test_levy_l_isf()
scipy.stats.tests.test_distributions.test_levy_l_sf()
scipy.stats.tests.test_distributions.test_levy_sf()
scipy.stats.tests.test_distributions.test_lomax_accuracy()
scipy.stats.tests.test_distributions.test_moment_order_4()
scipy.stats.tests.test_distributions.test_moments_t()
scipy.stats.tests.test_distributions.test_nan_arguments_gh_issue_1362()
scipy.stats.tests.test_distributions.test_ncf_cdf_spotcheck()
scipy.stats.tests.test_distributions.test_ncf_edge_case(df1,df2,x)
scipy.stats.tests.test_distributions.test_ncf_ppf_issue_17026()
scipy.stats.tests.test_distributions.test_ncf_variance()
scipy.stats.tests.test_distributions.test_ncx2_gh11777()
scipy.stats.tests.test_distributions.test_ncx2_gh12731()
scipy.stats.tests.test_distributions.test_ncx2_gh8665()
scipy.stats.tests.test_distributions.test_ncx2_tails_pdf()
scipy.stats.tests.test_distributions.test_ncx2_tails_ticket_955()
scipy.stats.tests.test_distributions.test_ncx2_zero_nc(method,expected)
scipy.stats.tests.test_distributions.test_ncx2_zero_nc_rvs()
scipy.stats.tests.test_distributions.test_norm_logcdf()
scipy.stats.tests.test_distributions.test_poisson_logpmf_ticket_1436()
scipy.stats.tests.test_distributions.test_powerlaw_edge()
scipy.stats.tests.test_distributions.test_powerlaw_stats()
scipy.stats.tests.test_distributions.test_rayleigh_accuracy()
scipy.stats.tests.test_distributions.test_regression_ticket_1316()
scipy.stats.tests.test_distributions.test_regression_ticket_1326()
scipy.stats.tests.test_distributions.test_regression_ticket_1421()
scipy.stats.tests.test_distributions.test_regression_ticket_1530()
scipy.stats.tests.test_distributions.test_regression_tukey_lambda()
scipy.stats.tests.test_distributions.test_rvgeneric_std()
scipy.stats.tests.test_distributions.test_rvs_no_size_error()
scipy.stats.tests.test_distributions.test_stats_broadcasting_gh14953_regression()
scipy.stats.tests.test_distributions.test_stats_shapes_argcheck()
scipy.stats.tests.test_distributions.test_support(dist)
scipy.stats.tests.test_distributions.test_support_broadcasting_gh13294_regression()
scipy.stats.tests.test_distributions.test_support_gh13294_regression(distname,args)
scipy.stats.tests.test_distributions.test_t_entropy()
scipy.stats.tests.test_distributions.test_t_inf_df(methname,df_infmask)
scipy.stats.tests.test_distributions.test_t_inf_df_stats_entropy(df_infmask)
scipy.stats.tests.test_distributions.test_truncexpon_accuracy()
scipy.stats.tests.test_distributions.test_tukeylambda_stats_ticket_1545()
scipy.stats.tests.test_distributions.test_vonmises_entropy(kappa,expected_entropy)
scipy.stats.tests.test_distributions.test_vonmises_expect()
scipy.stats.tests.test_distributions.test_vonmises_line_support()
scipy.stats.tests.test_distributions.test_vonmises_logpdf(x,kappa,expected_logpdf)
scipy.stats.tests.test_distributions.test_vonmises_numerical()
scipy.stats.tests.test_distributions.test_vonmises_pdf(x,kappa,expected_pdf)
scipy.stats.tests.test_distributions.test_vonmises_pdf_periodic()
scipy.stats.tests.test_distributions.test_vonmises_rvs_gh4598()
scipy.stats.tests.test_test_540_567()
scipy.stats.tests.test_test_api_regression()
scipy.stats.tests.test_test_burr12_ppf_small_arg()
scipy.stats.tests.test_test_cosine_cdf_sf(x,expected)
scipy.stats.tests.test_test_cosine_logpdf_endpoints()
scipy.stats.tests.test_test_cosine_ppf_isf(p,expected)
scipy.stats.tests.test_test_crystalball_entropy()
scipy.stats.tests.test_test_crystalball_function()
scipy.stats.tests.test_test_crystalball_function_moments()
scipy.stats.tests.test_test_distr_params_lists()
scipy.stats.tests.test_test_distribution_too_many_args()
scipy.stats.tests.test_test_distributions_submodule()
scipy.stats.tests.test_test_docstrings()
scipy.stats.tests.test_test_exponpow_edge()
scipy.stats.tests.test_test_foldnorm_zero()
scipy.stats.tests.test_test_frozen_fit_ticket_1536()
scipy.stats.tests.test_test_genextreme_entropy()
scipy.stats.tests.test_test_genextreme_give_no_warnings()
scipy.stats.tests.test_test_genextreme_sf_isf()
scipy.stats.tests.test_test_gengamma_edge()
scipy.stats.tests.test_test_gengamma_endpoint_with_neg_c()
scipy.stats.tests.test_test_gengamma_munp()
scipy.stats.tests.test_test_gh_pr_4806()
scipy.stats.tests.test_test_gompertz_accuracy()
scipy.stats.tests.test_test_histogram_non_uniform()
scipy.stats.tests.test_test_hypergeom_interval_1802()
scipy.stats.tests.test_test_infinite_input()
scipy.stats.tests.test_test_invweibull_fit()
scipy.stats.tests.test_test_invweibull_isf(p,c,expected)
scipy.stats.tests.test_test_invweibull_sf(x,c,expected)
scipy.stats.tests.test_test_ksone_fit_freeze()
scipy.stats.tests.test_test_levy_cdf_ppf()
scipy.stats.tests.test_test_levy_isf(p,expected_isf)
scipy.stats.tests.test_test_levy_l_isf()
scipy.stats.tests.test_test_levy_l_sf()
scipy.stats.tests.test_test_levy_sf()
scipy.stats.tests.test_test_lomax_accuracy()
scipy.stats.tests.test_test_moment_order_4()
scipy.stats.tests.test_test_moments_t()
scipy.stats.tests.test_test_nan_arguments_gh_issue_1362()
scipy.stats.tests.test_test_ncf_cdf_spotcheck()
scipy.stats.tests.test_test_ncf_edge_case(df1,df2,x)
scipy.stats.tests.test_test_ncf_ppf_issue_17026()
scipy.stats.tests.test_test_ncf_variance()
scipy.stats.tests.test_test_ncx2_gh11777()
scipy.stats.tests.test_test_ncx2_gh12731()
scipy.stats.tests.test_test_ncx2_gh8665()
scipy.stats.tests.test_test_ncx2_tails_pdf()
scipy.stats.tests.test_test_ncx2_tails_ticket_955()
scipy.stats.tests.test_test_ncx2_zero_nc(method,expected)
scipy.stats.tests.test_test_ncx2_zero_nc_rvs()
scipy.stats.tests.test_test_norm_logcdf()
scipy.stats.tests.test_test_poisson_logpmf_ticket_1436()
scipy.stats.tests.test_test_powerlaw_edge()
scipy.stats.tests.test_test_powerlaw_stats()
scipy.stats.tests.test_test_rayleigh_accuracy()
scipy.stats.tests.test_test_regression_ticket_1316()
scipy.stats.tests.test_test_regression_ticket_1326()
scipy.stats.tests.test_test_regression_ticket_1421()
scipy.stats.tests.test_test_regression_ticket_1530()
scipy.stats.tests.test_test_regression_tukey_lambda()
scipy.stats.tests.test_test_rvgeneric_std()
scipy.stats.tests.test_test_rvs_no_size_error()
scipy.stats.tests.test_test_stats_broadcasting_gh14953_regression()
scipy.stats.tests.test_test_stats_shapes_argcheck()
scipy.stats.tests.test_test_support(dist)
scipy.stats.tests.test_test_support_broadcasting_gh13294_regression()
scipy.stats.tests.test_test_support_gh13294_regression(distname,args)
scipy.stats.tests.test_test_t_entropy()
scipy.stats.tests.test_test_t_inf_df(methname,df_infmask)
scipy.stats.tests.test_test_t_inf_df_stats_entropy(df_infmask)
scipy.stats.tests.test_test_truncexpon_accuracy()
scipy.stats.tests.test_test_tukeylambda_stats_ticket_1545()
scipy.stats.tests.test_test_vonmises_entropy(kappa,expected_entropy)
scipy.stats.tests.test_test_vonmises_expect()
scipy.stats.tests.test_test_vonmises_line_support()
scipy.stats.tests.test_test_vonmises_logpdf(x,kappa,expected_logpdf)
scipy.stats.tests.test_test_vonmises_numerical()
scipy.stats.tests.test_test_vonmises_pdf(x,kappa,expected_pdf)
scipy.stats.tests.test_test_vonmises_pdf_periodic()
scipy.stats.tests.test_test_vonmises_rvs_gh4598()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/common_tests.py----------------------------------------
A:scipy.stats.tests.common_tests.norm_moment->distfn.moment(0, *args)
A:scipy.stats.tests.common_tests.normalization_expect->distfn.expect(lambda x: 1, args=args)
A:scipy.stats.tests.common_tests.(_a, _b)->distfn.support(*args)
A:scipy.stats.tests.common_tests.normalization_cdf->distfn.cdf(_b, *args)
A:scipy.stats.tests.common_tests.m1->distfn.expect(lambda x: x, arg)
A:scipy.stats.tests.common_tests.m2->distfn.expect(lambda x: x * x, arg)
A:scipy.stats.tests.common_tests.m3e->distfn.expect(lambda x: np.power(x - m, 3), arg)
A:scipy.stats.tests.common_tests.m4e->distfn.expect(lambda x: np.power(x - m, 4), arg)
A:scipy.stats.tests.common_tests.ent->distfn.entropy(*arg)
A:scipy.stats.tests.common_tests.sc->numpy.asarray([[1, 2], [3, 4]])
A:scipy.stats.tests.common_tests.v_ent->distfn.entropy(*arg, scale=sc)
A:scipy.stats.tests.common_tests.s_ent->numpy.asarray(s_ent).reshape(v_ent.shape)
A:scipy.stats.tests.common_tests.x->numpy.asarray(x)
A:scipy.stats.tests.common_tests.signature->_getfullargspec(distfn._parse_args)
A:scipy.stats.tests.common_tests.shapes_->distfn.shapes.replace(',', ' ').split()
A:scipy.stats.tests.common_tests.shape_args->list(shape_args)
A:scipy.stats.tests.common_tests.r0->distfn(*args).rvs(size=8)
A:scipy.stats.tests.common_tests.r1->pickle.loads(pkl).rvs(size=8)
A:scipy.stats.tests.common_tests.distfn.random_state->numpy.random.RandomState(1234)
A:scipy.stats.tests.common_tests.r2->distfn.rvs(*args, size=8)
A:scipy.stats.tests.common_tests.rng->numpy.random.default_rng(1234)
A:scipy.stats.tests.common_tests.orig_state->distfn.random_state.get_state()
A:scipy.stats.tests.common_tests.r3->distfn.rvs(*args, size=8, random_state=np.random.RandomState(1234))
A:scipy.stats.tests.common_tests.x0->distfn.ppf([0.25, 0.51, 0.75], *arg)
A:scipy.stats.tests.common_tests.val->meth(q, *arg)
A:scipy.stats.tests.common_tests.q0->numpy.asarray([0.25, 0.5, 0.75])
A:scipy.stats.tests.common_tests.s->pickle.dumps(distfn)
A:scipy.stats.tests.common_tests.unpickled->pickle.loads(pkl)
A:scipy.stats.tests.common_tests.frozen_dist->distfn(*args)
A:scipy.stats.tests.common_tests.pkl->pickle.dumps(frozen_dist)
A:scipy.stats.tests.common_tests.pickled_fit_function->pickle.dumps(fit_function)
A:scipy.stats.tests.common_tests.unpickled_fit_function->pickle.loads(pickled_fit_function)
A:scipy.stats.tests.common_tests.rv->distfn(*args, **locscale)
A:scipy.stats.tests.common_tests.sample->distfunc.rvs(*allargs)
A:scipy.stats.tests.common_tests.rvs->numpy.vectorize(lambda *allargs: distfunc.rvs(*allargs), otypes=otype)
A:scipy.stats.tests.common_tests.expected->my_interval(**kwd_shapes)
A:scipy.stats.tests.common_tests.kwd_shapes->dict(zip(shapes, arg or []))
A:scipy.stats.tests.common_tests.n->dict(zip(shapes, arg or [])).pop('n', None)
A:scipy.stats.tests.common_tests.res->distfn.interval(0.5, *arg)
A:scipy.stats.tests.common_tests.alpha->dict(zip(shapes, arg or [])).pop('alpha', None)
scipy.stats.tests.common_tests.check_cmplx_deriv(distfn,arg)
scipy.stats.tests.common_tests.check_deprecation_warning_gh5982_interval(distfn,arg,distname)
scipy.stats.tests.common_tests.check_deprecation_warning_gh5982_moment(distfn,arg,distname)
scipy.stats.tests.common_tests.check_edge_support(distfn,args)
scipy.stats.tests.common_tests.check_entropy(distfn,arg,msg)
scipy.stats.tests.common_tests.check_entropy_vect_scale(distfn,arg)
scipy.stats.tests.common_tests.check_freezing(distfn,args)
scipy.stats.tests.common_tests.check_kurt_expect(distfn,arg,m,v,k,msg)
scipy.stats.tests.common_tests.check_mean_expect(distfn,arg,m,msg)
scipy.stats.tests.common_tests.check_meth_dtype(distfn,arg,meths)
scipy.stats.tests.common_tests.check_moment(distfn,arg,m,v,msg)
scipy.stats.tests.common_tests.check_named_args(distfn,x,shape_args,defaults,meths)
scipy.stats.tests.common_tests.check_named_results(res,attributes,ma=False)
scipy.stats.tests.common_tests.check_normalization(distfn,args,distname)
scipy.stats.tests.common_tests.check_pickling(distfn,args)
scipy.stats.tests.common_tests.check_ppf_dtype(distfn,arg)
scipy.stats.tests.common_tests.check_private_entropy(distfn,args,superclass)
scipy.stats.tests.common_tests.check_random_state_property(distfn,args)
scipy.stats.tests.common_tests.check_rvs_broadcast(distfunc,distname,allargs,shape,shape_only,otype)
scipy.stats.tests.common_tests.check_skew_expect(distfn,arg,m,v,s,msg)
scipy.stats.tests.common_tests.check_var_expect(distfn,arg,m,v,msg)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_resampling.py----------------------------------------
A:scipy.stats.tests.test_resampling.x->scipy.stats.rankdata(x, axis=axis)
A:scipy.stats.tests.test_resampling.res1->permutation_test((x - y,), statistic_1samp_1d, **kwds)
A:scipy.stats.tests.test_resampling.res2->permutation_test((x, y), statistic1d, n_resamples=np.inf, alternative='two-sided')
A:scipy.stats.tests.test_resampling.y->scipy.stats.rankdata(y, axis=axis)
A:scipy.stats.tests.test_resampling.res->scipy.stats.permutation_test((x, y), statistic, vectorized=False, permutation_type='pairings')
A:scipy.stats.tests.test_resampling.i->numpy.arange(len(x))
A:scipy.stats.tests.test_resampling.z->scipy.stats.rankdata(z, axis=axis)
A:scipy.stats.tests.test_resampling.result_shape->list(shape)
A:scipy.stats.tests.test_resampling.data->scipy.stats.norm(loc=2, scale=4).rvs(size=100, random_state=rng)
A:scipy.stats.tests.test_resampling.dist->scipy.stats.norm(loc=2, scale=4)
A:scipy.stats.tests.test_resampling.expected_interval->scipy.stats.norm(loc=2, scale=4).interval(confidence=alpha)
A:scipy.stats.tests.test_resampling.expected_se->scipy.stats.norm(loc=2, scale=4).std()
A:scipy.stats.tests.test_resampling.s1->scipy.stats.skew(x, axis=axis)
A:scipy.stats.tests.test_resampling.s2->scipy.stats.skew(y, axis=axis)
A:scipy.stats.tests.test_resampling.rng->numpy.random.default_rng(75245098234592)
A:scipy.stats.tests.test_resampling.res_basic->scipy.stats.bootstrap((x, y), statistic, method='basic', batch=100, random_state=rng)
A:scipy.stats.tests.test_resampling.res_percent->scipy.stats.bootstrap((x, y), statistic, method='percentile', batch=100, random_state=rng)
A:scipy.stats.tests.test_resampling.res_bca->scipy.stats.bootstrap((x, y), statistic, method='bca', batch=100, random_state=rng)
A:scipy.stats.tests.test_resampling.mid_basic->numpy.mean(res_basic.confidence_interval)
A:scipy.stats.tests.test_resampling.mid_percent->numpy.mean(res_percent.confidence_interval)
A:scipy.stats.tests.test_resampling.mid_bca->numpy.mean(res_bca.confidence_interval)
A:scipy.stats.tests.test_resampling.(_, _, a_hat)->_resampling._bca_interval(data, statistic, axis, alpha, theta_hat_b, batch)
A:scipy.stats.tests.test_resampling.stat_true->scipy.stats.norm(loc=2, scale=4).mean()
A:scipy.stats.tests.test_resampling.ci_contains_true->numpy.sum((ci[0] < stat_true) & (stat_true < ci[1]))
A:scipy.stats.tests.test_resampling.mean1->numpy.mean(data1, axis=axis)
A:scipy.stats.tests.test_resampling.mean2->numpy.mean(data2, axis=axis)
A:scipy.stats.tests.test_resampling.dist1->scipy.stats.norm(loc=0, scale=1)
A:scipy.stats.tests.test_resampling.dist2->scipy.stats.norm(loc=0.1, scale=1)
A:scipy.stats.tests.test_resampling.data1->scipy.stats.norm(loc=0, scale=1).rvs(size=(n_replications, n1))
A:scipy.stats.tests.test_resampling.data2->scipy.stats.norm(loc=0.1, scale=1).rvs(size=(n_replications, n2))
A:scipy.stats.tests.test_resampling.ref->scipy.stats.bootstrap((x,), np.mean, n_resamples=n3, random_state=rng, confidence_level=0.9, method='BCa')
A:scipy.stats.tests.test_resampling.true_min->numpy.min(data)
A:scipy.stats.tests.test_resampling.expected->numpy.product([special.binom(sum(n[i:]), sum(n[i + 1:])) for i in range(len(n) - 1)])
A:scipy.stats.tests.test_resampling.y2->numpy.broadcast_to(y, (2, 3, 2))
A:scipy.stats.tests.test_resampling.rng1->numpy.random.default_rng(4337234444626115331)
A:scipy.stats.tests.test_resampling.rng2->numpy.random.default_rng(4337234444626115331)
A:scipy.stats.tests.test_resampling.js->rng_integers(rng2, 0, shape[-1], shape[-1])
A:scipy.stats.tests.test_resampling.p->_resampling._percentile_of_score(x, score, axis=-1)
A:scipy.stats.tests.test_resampling.statistic2->_resampling._vectorize_statistic(statistic_1d)
A:scipy.stats.tests.test_resampling.sample->numpy.random.default_rng(75245098234592).random(size=10)
A:scipy.stats.tests.test_resampling.counts->numpy.sum((res.confidence_interval.low.T < params) & (res.confidence_interval.high.T > params), axis=0)
A:scipy.stats.tests.test_resampling.statistic.batch_size->max(batch_size, statistic.batch_size)
A:scipy.stats.tests.test_resampling.kwds['rvs']->self.rvs(stats.norm.rvs, np.random.default_rng(32842398))
A:scipy.stats.tests.test_resampling.res3->scipy.stats.permutation_test((x, y), statistic, batch=1000, random_state=random_state(0), **kwds)
A:scipy.stats.tests.test_resampling.norm_rvs->self.rvs(stats.norm.rvs, rng)
A:scipy.stats.tests.test_resampling.sol->root(fun, x0=0)
A:scipy.stats.tests.test_resampling.dist_rvs->self.rvs(getattr(stats, dist_name).rvs, rng)
A:scipy.stats.tests.test_resampling.self.rng->numpy.random.default_rng(7170559330470561044)
A:scipy.stats.tests.test_resampling.statistic->_resampling._vectorize_statistic(statistic1d)
A:scipy.stats.tests.test_resampling.pvalue->_resampling._vectorize_statistic(pvalue1d)
A:scipy.stats.tests.test_resampling.x2->numpy.broadcast_to(x, (2, 3, 3))
A:scipy.stats.tests.test_resampling.z2->numpy.broadcast_to(z, (2, 3, 4))
A:scipy.stats.tests.test_resampling.expected_statistic->statistic(*np.broadcast_arrays(*data), axis=axis)
A:scipy.stats.tests.test_resampling.expected_pvalue->pvalue(*np.broadcast_arrays(*data), axis=axis)
A:scipy.stats.tests.test_resampling.test->_resampling._vectorize_statistic(test_1d)
A:scipy.stats.tests.test_resampling.mean->scipy.stats.permutation_test((x, y), statistic, vectorized=False, permutation_type='pairings').null_distribution.mean()
A:scipy.stats.tests.test_resampling.n->numpy.array([3, 2, 4], dtype=int)
A:scipy.stats.tests.test_resampling.got->list(_resampling._batch_generator(iterable, batch))
A:scipy.stats.tests.test_resampling.nc->numpy.cumsum(n)
A:scipy.stats.tests.test_resampling.all_partitions->set()
A:scipy.stats.tests.test_resampling.partitioning->numpy.split(partition_concatenated, nc[:-1])
A:scipy.stats.tests.test_resampling.fun->getattr(stats, fun_name)
scipy.stats.tests.test_resampling.TestMonteCarloHypothesisTest
scipy.stats.tests.test_resampling.TestMonteCarloHypothesisTest.rvs(self,rvs_in,rs)
scipy.stats.tests.test_resampling.TestMonteCarloHypothesisTest.test_against_anderson(self,dist_name,i)
scipy.stats.tests.test_resampling.TestMonteCarloHypothesisTest.test_against_cramervonmises(self,a)
scipy.stats.tests.test_resampling.TestMonteCarloHypothesisTest.test_against_ks_1samp(self,alternative,a)
scipy.stats.tests.test_resampling.TestMonteCarloHypothesisTest.test_against_normality_tests(self,hypotest,alternative,a)
scipy.stats.tests.test_resampling.TestMonteCarloHypothesisTest.test_against_normaltest(self,a)
scipy.stats.tests.test_resampling.TestMonteCarloHypothesisTest.test_axis(self,axis)
scipy.stats.tests.test_resampling.TestMonteCarloHypothesisTest.test_batch(self)
scipy.stats.tests.test_resampling.TestMonteCarloHypothesisTest.test_input_validation(self)
scipy.stats.tests.test_resampling.TestMonteCarloHypothesisTest.test_p_never_zero(self)
scipy.stats.tests.test_resampling.TestPermutationTest
scipy.stats.tests.test_resampling.TestPermutationTest.setup_method(self)
scipy.stats.tests.test_resampling.TestPermutationTest.test_against_ansari(self,alternative)
scipy.stats.tests.test_resampling.TestPermutationTest.test_against_binomtest(self,alternative)
scipy.stats.tests.test_resampling.TestPermutationTest.test_against_cvm(self)
scipy.stats.tests.test_resampling.TestPermutationTest.test_against_fisher_exact(self,alternative)
scipy.stats.tests.test_resampling.TestPermutationTest.test_against_kendalltau(self)
scipy.stats.tests.test_resampling.TestPermutationTest.test_against_ks_2samp(self,alternative)
scipy.stats.tests.test_resampling.TestPermutationTest.test_against_mannwhitneyu(self,alternative)
scipy.stats.tests.test_resampling.TestPermutationTest.test_against_permutation_ttest(self,alternative,permutations,axis)
scipy.stats.tests.test_resampling.TestPermutationTest.test_against_spearmanr_in_R(self,alternative,expected_pvalue)
scipy.stats.tests.test_resampling.TestPermutationTest.test_against_wilcoxon(self,alternative)
scipy.stats.tests.test_resampling.TestPermutationTest.test_batch(self,permutation_type,random_state)
scipy.stats.tests.test_resampling.TestPermutationTest.test_batch_generator(self,iterable,batch,expected)
scipy.stats.tests.test_resampling.TestPermutationTest.test_batch_generator_iv(self,batch)
scipy.stats.tests.test_resampling.TestPermutationTest.test_finite_precision_statistic(self)
scipy.stats.tests.test_resampling.TestPermutationTest.test_permutation_test_iv(self)
scipy.stats.tests.test_resampling.TestPermutationTest.test_permutations(self,permutation_type,exact_size,random_state)
scipy.stats.tests.test_resampling.TestPermutationTest.test_randomized_test_against_exact_both(self)
scipy.stats.tests.test_resampling.TestPermutationTest.test_randomized_test_against_exact_pairings(self)
scipy.stats.tests.test_resampling.TestPermutationTest.test_randomized_test_against_exact_samples(self)
scipy.stats.tests.test_resampling.TestPermutationTest.test_vectorized_nsamp_ptype_both(self,axis)
scipy.stats.tests.test_resampling.TestPermutationTest.test_vectorized_nsamp_ptype_samples(self,axis)
scipy.stats.tests.test_resampling.TestPermutationTest.test_with_ties(self,case)
scipy.stats.tests.test_resampling.test_BCa_acceleration_against_reference()
scipy.stats.tests.test_resampling.test_all_partitions_concatenated()
scipy.stats.tests.test_resampling.test_bootstrap_against_R(method,expected)
scipy.stats.tests.test_resampling.test_bootstrap_against_itself_1samp(method,expected)
scipy.stats.tests.test_resampling.test_bootstrap_against_itself_2samp(method,expected)
scipy.stats.tests.test_resampling.test_bootstrap_against_theory(method)
scipy.stats.tests.test_resampling.test_bootstrap_batch(method,axis)
scipy.stats.tests.test_resampling.test_bootstrap_degenerate(method)
scipy.stats.tests.test_resampling.test_bootstrap_gh15678(method)
scipy.stats.tests.test_resampling.test_bootstrap_iv()
scipy.stats.tests.test_resampling.test_bootstrap_min()
scipy.stats.tests.test_resampling.test_bootstrap_paired(method)
scipy.stats.tests.test_resampling.test_bootstrap_resample(rng_name)
scipy.stats.tests.test_resampling.test_bootstrap_vectorized(method,axis,paired)
scipy.stats.tests.test_resampling.test_bootstrap_vectorized_1samp(method,axis)
scipy.stats.tests.test_resampling.test_bootstrap_vectorized_3samp(method,axis)
scipy.stats.tests.test_resampling.test_jackknife_resample()
scipy.stats.tests.test_resampling.test_multisample_BCa_against_R()
scipy.stats.tests.test_resampling.test_parameter_vectorized(fun_name)
scipy.stats.tests.test_resampling.test_percentile_along_axis()
scipy.stats.tests.test_resampling.test_percentile_of_score(score,axis)
scipy.stats.tests.test_resampling.test_re_boostrap(additional_resamples)
scipy.stats.tests.test_resampling.test_vector_valued_statistic(method)
scipy.stats.tests.test_resampling.test_vectorize_statistic(axis)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_mstats_extras.py----------------------------------------
A:scipy.stats.tests.test_mstats_extras.x->numpy.random.randn(100)
A:scipy.stats.tests.test_mstats_extras.y2->numpy.linspace(0, 1, num=10)
A:scipy.stats.tests.test_mstats_extras.x.mask->numpy.ma.make_mask(x)
A:scipy.stats.tests.test_mstats_extras.x2->numpy.ma.arange(22).reshape((11, 2))
A:scipy.stats.tests.test_mstats_extras.x2.mask->numpy.ma.make_mask(x2)
A:scipy.stats.tests.test_mstats_extras.res->scipy.stats.mstats.rsh(x, points=[0, 1.0])
A:scipy.stats.tests.test_mstats_extras.data->numpy.array(data).reshape(10, 10)
A:scipy.stats.tests.test_mstats_extras.test->numpy.arange(100)
A:scipy.stats.tests.test_mstats_extras.test_2D->numpy.arange(100).repeat(3).reshape(-1, 3)
A:scipy.stats.tests.test_mstats_extras._result->scipy.stats.mstats.idealfourths(test)
A:scipy.stats.tests.test_mstats_extras.hdq->scipy.stats.mstats.hdquantiles(data, [0.25, 0.5, 0.75], axis=0, var=True)
A:scipy.stats.tests.test_mstats_extras.hd_std_errs->scipy.stats.mstats.hdquantiles_sd(self.data)
A:scipy.stats.tests.test_mstats_extras.n->len(self.data)
A:scipy.stats.tests.test_mstats_extras.jdata->jdata[jselector].reshape(n, n - 1)
A:scipy.stats.tests.test_mstats_extras.jselector->numpy.logical_not(np.eye(n))
A:scipy.stats.tests.test_mstats_extras.jdist->scipy.stats.mstats.hdquantiles(jdata, axis=1)
A:scipy.stats.tests.test_mstats_extras.jdist_mean->numpy.mean(jdist, axis=0)
A:scipy.stats.tests.test_mstats_extras.two_data_points->scipy.stats.mstats.hdquantiles_sd([1, 2])
A:scipy.stats.tests.test_mstats_extras.(ci_lower, ci_upper)->scipy.stats.mstats.mquantiles_cimj(self.data)
scipy.stats.tests.test_mstats_extras.TestQuantiles
scipy.stats.tests.test_mstats_extras.TestQuantiles.test_hdquantiles(self)
scipy.stats.tests.test_mstats_extras.TestQuantiles.test_hdquantiles_sd(self)
scipy.stats.tests.test_mstats_extras.TestQuantiles.test_mquantiles_cimj(self)
scipy.stats.tests.test_mstats_extras.test_compare_medians_ms()
scipy.stats.tests.test_mstats_extras.test_hdmedian()
scipy.stats.tests.test_mstats_extras.test_idealfourths()
scipy.stats.tests.test_mstats_extras.test_mjci()
scipy.stats.tests.test_mstats_extras.test_rsh()
scipy.stats.tests.test_mstats_extras.test_trimmed_mean_ci()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_mstats_basic.py----------------------------------------
A:scipy.stats.tests.test_mstats_basic.data->numpy.ma.array([np.nan, np.nan, 0, 1, 2])
A:scipy.stats.tests.test_mstats_basic.quants->scipy.stats.mstats.mquantiles(data, axis=0, limit=(0, 50))
A:scipy.stats.tests.test_mstats_basic.x->numpy.asarray([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]).astype('float')
A:scipy.stats.tests.test_mstats_basic.desired->numpy.ma.fix_invalid([-1.3416407864999, -0.44721359549996, 0.44721359549996, 1.3416407864999, np.nan])
A:scipy.stats.tests.test_mstats_basic.a->numpy.arange(20)
A:scipy.stats.tests.test_mstats_basic.desired_dt->numpy.asarray(3.0 / (1.0 / 1 + 1.0 / 2 + 1.0 / 3), dtype=np.float96)
A:scipy.stats.tests.test_mstats_basic.pr->scipy.stats.mstats.pearsonr(x, x)
A:scipy.stats.tests.test_mstats_basic.x1->numpy.ma.array([-1.0, 0.0, 1.0])
A:scipy.stats.tests.test_mstats_basic.y1->numpy.ma.array([0, 0, 3])
A:scipy.stats.tests.test_mstats_basic.(r, p)->scipy.stats.spearmanr(x, y)
A:scipy.stats.tests.test_mstats_basic.x2->numpy.ma.array([-1.0, 0.0, 1.0, 99.0], mask=mask)
A:scipy.stats.tests.test_mstats_basic.y2->numpy.ma.array([0, 0, 3, -1], mask=mask)
A:scipy.stats.tests.test_mstats_basic.mx->numpy.ma.masked_array([1, 2, 3, 4, 5, 6], mask=[0, 1, 0, 0, 0, 0])
A:scipy.stats.tests.test_mstats_basic.my->numpy.ma.masked_array([9, 8, 7, 6, 5, 9], mask=[0, 0, 1, 0, 0, 0])
A:scipy.stats.tests.test_mstats_basic.y->numpy.full((n, nx), np.nan)
A:scipy.stats.tests.test_mstats_basic.(mr, mp)->scipy.stats.mstats.pearsonr(mx, my)
A:scipy.stats.tests.test_mstats_basic.res->scipy.stats.mstats.skewtest(x)
A:scipy.stats.tests.test_mstats_basic.(stat1, p1)->scipy.stats.mstats.spearmanr(x, y)
A:scipy.stats.tests.test_mstats_basic.(stat2, p2)->scipy.stats.mstats.spearmanr(x, y, alternative='greater')
A:scipy.stats.tests.test_mstats_basic.(stat3, p3)->scipy.stats.mstats.spearmanr(x, y, alternative='less')
A:scipy.stats.tests.test_mstats_basic.z->scipy.stats.zmap(x, y)
A:scipy.stats.tests.test_mstats_basic.result->scipy.stats.mstats.describe(a, axis=1)
A:scipy.stats.tests.test_mstats_basic.output->scipy.stats.mstats.kendalltau_seasonal(x)
A:scipy.stats.tests.test_mstats_basic.x_masked->numpy.ma.array(x, mask=mask)
A:scipy.stats.tests.test_mstats_basic.y_masked->numpy.ma.array(y, mask=mask)
A:scipy.stats.tests.test_mstats_basic.res_masked->scipy.stats.mstats.kendalltau(x_masked, y_masked, method=method, alternative=alternative)
A:scipy.stats.tests.test_mstats_basic.x_compressed->numpy.ma.array(x, mask=mask).compressed()
A:scipy.stats.tests.test_mstats_basic.y_compressed->numpy.ma.array(y, mask=mask).compressed()
A:scipy.stats.tests.test_mstats_basic.res_compressed->scipy.stats.kendalltau(x_compressed, y_compressed, method=method, alternative=alternative)
A:scipy.stats.tests.test_mstats_basic.res_nan->scipy.stats.kendalltau(x, y, method=method, nan_policy='omit', alternative=alternative)
A:scipy.stats.tests.test_mstats_basic.trimx->scipy.stats.mstats.trimboth(x)
A:scipy.stats.tests.test_mstats_basic.expected->numpy.ma.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], mask=[1, 1, 0, 0, 0, 0, 0, 0, 0, 1])
A:scipy.stats.tests.test_mstats_basic.winsorized->scipy.stats.mstats.winsorize(data)
A:scipy.stats.tests.test_mstats_basic.testmathworks->numpy.ma.fix_invalid([1.165, 0.6268, 0.0751, 0.3516, -0.6965, np.nan])
A:scipy.stats.tests.test_mstats_basic.testcase_2d->numpy.ma.array(np.array([[0.05245846, 0.50344235, 0.86589117, 0.36936353, 0.46961149], [0.11574073, 0.31299969, 0.45925772, 0.72618805, 0.75194407], [0.67696689, 0.91878127, 0.09769044, 0.04645137, 0.37615733], [0.05903624, 0.29908861, 0.34088298, 0.66216337, 0.83160998], [0.64619526, 0.94894632, 0.27855892, 0.0706151, 0.39962917]]), mask=np.array([[True, False, False, True, False], [True, True, True, False, True], [False, False, False, False, False], [True, True, True, True, True], [False, False, True, False, False]], dtype=bool))
A:scipy.stats.tests.test_mstats_basic.expect->numpy.broadcast_to(expect, shape)
A:scipy.stats.tests.test_mstats_basic.correct_2d->numpy.ma.array(np.array([-1.5, -3.0, -1.47247052385, 0.0, -1.26979517952]), mask=np.array([False, False, False, True, False], dtype=bool))
A:scipy.stats.tests.test_mstats_basic.correct_2d_bias_corrected->numpy.ma.array(np.array([-1.5, -3.0, -1.88988209538, 0.0, -0.5234638463918877]), mask=np.array([False, False, False, True, False], dtype=bool))
A:scipy.stats.tests.test_mstats_basic.a2->numpy.reshape(a1, (3, 5))
A:scipy.stats.tests.test_mstats_basic.a3->numpy.array([1, 2, 3, 4, 5, 6])
A:scipy.stats.tests.test_mstats_basic.a4->numpy.reshape(a3, (3, 2))
A:scipy.stats.tests.test_mstats_basic.ma1->numpy.ma.masked_where(ma.array(a1) > 2, a1)
A:scipy.stats.tests.test_mstats_basic.ma2->numpy.ma.masked_where(a2 > 2, a2)
A:scipy.stats.tests.test_mstats_basic.ma3->numpy.ma.masked_where(a3 < 2, a3)
A:scipy.stats.tests.test_mstats_basic.ma4->numpy.ma.masked_where(ma.array(a4) < 2, a4)
A:scipy.stats.tests.test_mstats_basic.a1_res->scipy.stats.mstats.mode(a1, axis=None)
A:scipy.stats.tests.test_mstats_basic.im->numpy.zeros((100, 100))
A:scipy.stats.tests.test_mstats_basic.cp->numpy.zeros((100, 100)).copy()
A:scipy.stats.tests.test_mstats_basic.testcase->numpy.ma.fix_invalid([1, 2, 3, 4, np.nan])
A:scipy.stats.tests.test_mstats_basic.n->self.testcase.count()
A:scipy.stats.tests.test_mstats_basic.(slope, intercept, lower, upper)->scipy.stats.mstats.theilslopes(y, x, 0.07, method='joint')
A:scipy.stats.tests.test_mstats_basic.(slope, intercept, low_slope, high_slope)->scipy.stats.mstats.theilslopes(y, x)
A:scipy.stats.tests.test_mstats_basic.(slope_ols, intercept_ols, _, _, _)->scipy.stats.linregress(x, y)
A:scipy.stats.tests.test_mstats_basic.(slope, intercept)->scipy.stats.mstats.siegelslopes(y, x)
A:scipy.stats.tests.test_mstats_basic.pos->scipy.stats.mstats.plotting_positions(np.arange(3), 0, 0)
A:scipy.stats.tests.test_mstats_basic.xm->numpy.ma.array(tmp, mask=mask)
A:scipy.stats.tests.test_mstats_basic.res_1d->func(x)
A:scipy.stats.tests.test_mstats_basic.res_2d->func(x_2d)
A:scipy.stats.tests.test_mstats_basic.stats_test->getattr(stats, test)
A:scipy.stats.tests.test_mstats_basic.mstats_test->getattr(mstats, test)
A:scipy.stats.tests.test_mstats_basic.(z_ex, p_ex)->stats_test(x.compressed(), alternative=alternative)
A:scipy.stats.tests.test_mstats_basic.(z, p)->mstats_test(x, alternative=alternative)
A:scipy.stats.tests.test_mstats_basic.b->scipy.stats.trimboth(a, 0.1)
A:scipy.stats.tests.test_mstats_basic.res1->scipy.stats.kstest(x, y, alternative=alternative, mode=mode)
A:scipy.stats.tests.test_mstats_basic.res2->scipy.stats.mstats.kstest(xm, ym, alternative=alternative, mode=mode)
A:scipy.stats.tests.test_mstats_basic.res3->scipy.stats.kstest(xm, y, alternative=alternative, mode=mode)
A:scipy.stats.tests.test_mstats_basic.outcome->numpy.ma.masked_array(np.random.randn(3), mask=[1, 1, 1])
A:scipy.stats.tests.test_mstats_basic.(t, p)->scipy.stats.mstats.ttest_1samp(x, 9, alternative=alternative)
A:scipy.stats.tests.test_mstats_basic.(t_ex, p_ex)->scipy.stats.ttest_1samp(x.compressed(), 9, alternative=alternative)
A:scipy.stats.tests.test_mstats_basic.res4->scipy.stats.ttest_ind(outcome[:, 0], outcome[:, 1], equal_var=False)
A:scipy.stats.tests.test_mstats_basic.res5->scipy.stats.mstats.ttest_ind(outcome[:, 0], outcome[:, 1], equal_var=False)
A:scipy.stats.tests.test_mstats_basic.ym->numpy.ma.array(ym, mask=np.isnan(ym))
A:scipy.stats.tests.test_mstats_basic.(x[:, i], y[:, i], dx, dy)->self.generate_xy_sample(n)
A:scipy.stats.tests.test_mstats_basic.(x, y, xm, ym)->self.generate_xy_sample(n)
A:scipy.stats.tests.test_mstats_basic.result1->scipy.stats.linregress(x, y)
A:scipy.stats.tests.test_mstats_basic.result2->scipy.stats.mstats.linregress(xm, ym)
A:scipy.stats.tests.test_mstats_basic.(rm, pm)->scipy.stats.mstats.spearmanr(xm, ym)
A:scipy.stats.tests.test_mstats_basic.r->scipy.stats.obrientransform(x)
A:scipy.stats.tests.test_mstats_basic.rm->scipy.stats.mstats.obrientransform(xm)
A:scipy.stats.tests.test_mstats_basic.am->numpy.ma.array(a)
A:scipy.stats.tests.test_mstats_basic.actual->scipy.stats.mstats.describe(np.arange(5))
A:scipy.stats.tests.test_mstats_basic.zm->scipy.stats.mstats.zmap(xm, ym)
A:scipy.stats.tests.test_mstats_basic.bm->scipy.stats.mstats.trimboth(a, 0.1)
A:scipy.stats.tests.test_mstats_basic.tmp->numpy.asarray([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]).astype('float')
A:scipy.stats.tests.test_mstats_basic.(_, counts)->scipy.stats.mstats.find_repeats([])
A:scipy.stats.tests.test_mstats_basic.X->numpy.ma.masked_invalid([1, 2, 1, 1, 1, np.nan, 1, 1, 1, 1, 1, 2, 4, 1, 1, np.nan])
A:scipy.stats.tests.test_mstats_basic.Y->numpy.ma.masked_invalid([3, 3, 4, 3, np.nan, 1, 2, 3, 1, 1, 5, 4])
A:scipy.stats.tests.test_mstats_basic.(u1, p1)->scipy.stats.mstats.brunnermunzel(self.X, [])
A:scipy.stats.tests.test_mstats_basic.(u2, p2)->scipy.stats.mstats.brunnermunzel([], self.Y)
A:scipy.stats.tests.test_mstats_basic.(u3, p3)->scipy.stats.mstats.brunnermunzel([], [])
A:scipy.stats.tests.test_mstats_basic.(u4, p4)->scipy.stats.mstats.brunnermunzel(self.Y, self.X, alternative='less')
scipy.stats.tests.test_mstats_basic.TestBrunnerMunzel
scipy.stats.tests.test_mstats_basic.TestBrunnerMunzel.test_brunnermunzel_alternative_error(self)
scipy.stats.tests.test_mstats_basic.TestBrunnerMunzel.test_brunnermunzel_default(self)
scipy.stats.tests.test_mstats_basic.TestBrunnerMunzel.test_brunnermunzel_distribution_error(self)
scipy.stats.tests.test_mstats_basic.TestBrunnerMunzel.test_brunnermunzel_distribution_norm(self)
scipy.stats.tests.test_mstats_basic.TestBrunnerMunzel.test_brunnermunzel_empty_imput(self)
scipy.stats.tests.test_mstats_basic.TestBrunnerMunzel.test_brunnermunzel_one_sided(self)
scipy.stats.tests.test_mstats_basic.TestBrunnerMunzel.test_brunnermunzel_two_sided(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.generate_xy_sample(self,n)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.generate_xy_sample2D(self,n,nx)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.get_n(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_describe(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_describe_result_attributes(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_find_repeats(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_gmean(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_hmean(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_kendalltau(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_ks_1samp(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_ks_2samp(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_kstest_1samp(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_kstest_2samp(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_kurtosis(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_linregress(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_moment(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_normaltest(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_obrientransform(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_pearsonr(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_rankdata(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_sem(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_skew(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_skewtest(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_skewtest_2D_WithMask(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_skewtest_2D_notmasked(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_skewtest_result_attributes(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_spearmanr(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_spearmanr_backcompat_useties(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_tmax(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_tmean(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_tmin(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_trimboth(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_tsem(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_tvar(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_variation(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_zmap(self)
scipy.stats.tests.test_mstats_basic.TestCompareWithStats.test_zscore(self)
scipy.stats.tests.test_mstats_basic.TestCorr
scipy.stats.tests.test_mstats_basic.TestCorr.test_kendall_p_exact_large(self)
scipy.stats.tests.test_mstats_basic.TestCorr.test_kendall_p_exact_medium(self)
scipy.stats.tests.test_mstats_basic.TestCorr.test_kendalltau(self)
scipy.stats.tests.test_mstats_basic.TestCorr.test_kendalltau_large(self)
scipy.stats.tests.test_mstats_basic.TestCorr.test_kendalltau_mstats_vs_stats(self,method,alternative)
scipy.stats.tests.test_mstats_basic.TestCorr.test_kendalltau_seasonal(self)
scipy.stats.tests.test_mstats_basic.TestCorr.test_pearsonr(self)
scipy.stats.tests.test_mstats_basic.TestCorr.test_pearsonr_misaligned_mask(self)
scipy.stats.tests.test_mstats_basic.TestCorr.test_pointbiserial(self)
scipy.stats.tests.test_mstats_basic.TestCorr.test_spearmanr(self)
scipy.stats.tests.test_mstats_basic.TestCorr.test_spearmanr_alternative(self)
scipy.stats.tests.test_mstats_basic.TestDescribe
scipy.stats.tests.test_mstats_basic.TestDescribe.test_basic_with_axis(self)
scipy.stats.tests.test_mstats_basic.TestFOneway
scipy.stats.tests.test_mstats_basic.TestFOneway.test_result_attributes(self)
scipy.stats.tests.test_mstats_basic.TestGeoMean
scipy.stats.tests.test_mstats_basic.TestGeoMean.test_1d(self)
scipy.stats.tests.test_mstats_basic.TestGeoMean.test_1d_float96(self)
scipy.stats.tests.test_mstats_basic.TestGeoMean.test_1d_ma(self)
scipy.stats.tests.test_mstats_basic.TestGeoMean.test_1d_ma0(self)
scipy.stats.tests.test_mstats_basic.TestGeoMean.test_1d_ma_inf(self)
scipy.stats.tests.test_mstats_basic.TestGeoMean.test_1d_ma_value(self)
scipy.stats.tests.test_mstats_basic.TestGeoMean.test_2d_ma(self)
scipy.stats.tests.test_mstats_basic.TestHarMean
scipy.stats.tests.test_mstats_basic.TestHarMean.test_1d(self)
scipy.stats.tests.test_mstats_basic.TestHarMean.test_1d_float96(self)
scipy.stats.tests.test_mstats_basic.TestHarMean.test_2d(self)
scipy.stats.tests.test_mstats_basic.TestKruskal
scipy.stats.tests.test_mstats_basic.TestKruskal.test_result_attributes(self)
scipy.stats.tests.test_mstats_basic.TestMannwhitneyu
scipy.stats.tests.test_mstats_basic.TestMannwhitneyu.test_against_stats(self)
scipy.stats.tests.test_mstats_basic.TestMannwhitneyu.test_result_attributes(self)
scipy.stats.tests.test_mstats_basic.TestMisc
scipy.stats.tests.test_mstats_basic.TestMisc.test_friedmanchisq(self)
scipy.stats.tests.test_mstats_basic.TestMisc.test_ks_2samp(self)
scipy.stats.tests.test_mstats_basic.TestMisc.test_obrientransform(self)
scipy.stats.tests.test_mstats_basic.TestMode
scipy.stats.tests.test_mstats_basic.TestMode.test_mode(self)
scipy.stats.tests.test_mstats_basic.TestMode.test_mode_modifies_input(self)
scipy.stats.tests.test_mstats_basic.TestMoments
scipy.stats.tests.test_mstats_basic.TestMoments._assert_equal(self,actual,expect,*,shape=None,dtype=None)
scipy.stats.tests.test_mstats_basic.TestMoments.test_kurtosis(self)
scipy.stats.tests.test_mstats_basic.TestMoments.test_moment(self)
scipy.stats.tests.test_mstats_basic.TestMoments.test_skewness(self)
scipy.stats.tests.test_mstats_basic.TestMoments.test_variation(self)
scipy.stats.tests.test_mstats_basic.TestMoments.test_variation_ddof(self)
scipy.stats.tests.test_mstats_basic.TestMquantiles
scipy.stats.tests.test_mstats_basic.TestMquantiles.test_mquantiles_limit_keyword(self)
scipy.stats.tests.test_mstats_basic.TestNormalitytests
scipy.stats.tests.test_mstats_basic.TestNormalitytests.regression_test_9033(self)
scipy.stats.tests.test_mstats_basic.TestNormalitytests.test_alternative(self,test,alternative)
scipy.stats.tests.test_mstats_basic.TestNormalitytests.test_axis_None(self)
scipy.stats.tests.test_mstats_basic.TestNormalitytests.test_bad_alternative(self)
scipy.stats.tests.test_mstats_basic.TestNormalitytests.test_kurtosistest_result_attributes(self)
scipy.stats.tests.test_mstats_basic.TestNormalitytests.test_maskedarray_input(self)
scipy.stats.tests.test_mstats_basic.TestNormalitytests.test_nd_input(self)
scipy.stats.tests.test_mstats_basic.TestNormalitytests.test_normaltest_result_attributes(self)
scipy.stats.tests.test_mstats_basic.TestNormalitytests.test_vs_nonmasked(self)
scipy.stats.tests.test_mstats_basic.TestPercentile
scipy.stats.tests.test_mstats_basic.TestPercentile.setup_method(self)
scipy.stats.tests.test_mstats_basic.TestPercentile.test_2D(self)
scipy.stats.tests.test_mstats_basic.TestPercentile.test_percentile(self)
scipy.stats.tests.test_mstats_basic.TestRanking
scipy.stats.tests.test_mstats_basic.TestRanking.test_ranking(self)
scipy.stats.tests.test_mstats_basic.TestTrimming
scipy.stats.tests.test_mstats_basic.TestTrimming.test_trim(self)
scipy.stats.tests.test_mstats_basic.TestTrimming.test_trim_old(self)
scipy.stats.tests.test_mstats_basic.TestTrimming.test_trimmed_stde(self)
scipy.stats.tests.test_mstats_basic.TestTrimming.test_trimmedmean(self)
scipy.stats.tests.test_mstats_basic.TestTrimming.test_trimr(self)
scipy.stats.tests.test_mstats_basic.TestTrimming.test_winsorization(self)
scipy.stats.tests.test_mstats_basic.TestTrimming.test_winsorization_nan(self)
scipy.stats.tests.test_mstats_basic.TestTtest_1samp
scipy.stats.tests.test_mstats_basic.TestTtest_1samp.test_alternative(self,alternative)
scipy.stats.tests.test_mstats_basic.TestTtest_1samp.test_bad_alternative(self)
scipy.stats.tests.test_mstats_basic.TestTtest_1samp.test_empty(self)
scipy.stats.tests.test_mstats_basic.TestTtest_1samp.test_fully_masked(self)
scipy.stats.tests.test_mstats_basic.TestTtest_1samp.test_result_attributes(self)
scipy.stats.tests.test_mstats_basic.TestTtest_1samp.test_vs_nonmasked(self)
scipy.stats.tests.test_mstats_basic.TestTtest_1samp.test_zero_division(self)
scipy.stats.tests.test_mstats_basic.TestTtest_ind
scipy.stats.tests.test_mstats_basic.TestTtest_ind.test_alternative(self,alternative)
scipy.stats.tests.test_mstats_basic.TestTtest_ind.test_bad_alternative(self)
scipy.stats.tests.test_mstats_basic.TestTtest_ind.test_empty(self)
scipy.stats.tests.test_mstats_basic.TestTtest_ind.test_fully_masked(self)
scipy.stats.tests.test_mstats_basic.TestTtest_ind.test_result_attributes(self)
scipy.stats.tests.test_mstats_basic.TestTtest_ind.test_vs_nonmasked(self)
scipy.stats.tests.test_mstats_basic.TestTtest_ind.test_zero_division(self)
scipy.stats.tests.test_mstats_basic.TestTtest_rel
scipy.stats.tests.test_mstats_basic.TestTtest_rel.test_alternative(self,alternative)
scipy.stats.tests.test_mstats_basic.TestTtest_rel.test_bad_alternative(self)
scipy.stats.tests.test_mstats_basic.TestTtest_rel.test_empty(self)
scipy.stats.tests.test_mstats_basic.TestTtest_rel.test_fully_masked(self)
scipy.stats.tests.test_mstats_basic.TestTtest_rel.test_invalid_input_size(self)
scipy.stats.tests.test_mstats_basic.TestTtest_rel.test_result_attributes(self)
scipy.stats.tests.test_mstats_basic.TestTtest_rel.test_vs_nonmasked(self)
scipy.stats.tests.test_mstats_basic.TestTtest_rel.test_zero_division(self)
scipy.stats.tests.test_mstats_basic.TestVariability
scipy.stats.tests.test_mstats_basic.TestVariability.test_sem(self)
scipy.stats.tests.test_mstats_basic.TestVariability.test_zmap(self)
scipy.stats.tests.test_mstats_basic.TestVariability.test_zscore(self)
scipy.stats.tests.test_mstats_basic.check_equal_gmean(array_like,desired,axis=None,dtype=None,rtol=1e-07)
scipy.stats.tests.test_mstats_basic.check_equal_hmean(array_like,desired,axis=None,dtype=None,rtol=1e-07)
scipy.stats.tests.test_mstats_basic.test_linregress_identical_x()
scipy.stats.tests.test_mstats_basic.test_plotting_positions()
scipy.stats.tests.test_mstats_basic.test_regress_simple()
scipy.stats.tests.test_mstats_basic.test_siegelslopes()
scipy.stats.tests.test_mstats_basic.test_siegelslopes_namedtuple_consistency()
scipy.stats.tests.test_mstats_basic.test_theilslopes()
scipy.stats.tests.test_mstats_basic.test_theilslopes_namedtuple_consistency()
scipy.stats.tests.test_mstats_basic.test_theilslopes_warnings()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_odds_ratio.py----------------------------------------
A:scipy.stats.tests.test_odds_ratio.alternative->parameters.alternative.replace('.', '-')
A:scipy.stats.tests.test_odds_ratio.result->odds_ratio([[5, 10], [2, 32]])
A:scipy.stats.tests.test_odds_ratio.ci->odds_ratio([[5, 10], [2, 32]]).confidence_interval(confidence_level, alternative)
A:scipy.stats.tests.test_odds_ratio.table->numpy.array(parameters.table)
A:scipy.stats.tests.test_odds_ratio.total->numpy.array(parameters.table).sum()
A:scipy.stats.tests.test_odds_ratio.ngood->table[0].sum()
A:scipy.stats.tests.test_odds_ratio.nsample->table[:, 0].sum()
A:scipy.stats.tests.test_odds_ratio.nchg_mean->_discrete_distns.nchypergeom_fisher.mean(total, ngood, nsample, cor)
A:scipy.stats.tests.test_odds_ratio.sf->_discrete_distns.nchypergeom_fisher.sf(table[0, 0] - 1, total, ngood, nsample, ci.low)
A:scipy.stats.tests.test_odds_ratio.cdf->_discrete_distns.nchypergeom_fisher.cdf(table[0, 0], total, ngood, nsample, ci.high)
A:scipy.stats.tests.test_odds_ratio.res->odds_ratio(table, kind='sample')
A:scipy.stats.tests.test_odds_ratio.ref->odds_ratio(table, kind='conditional')
scipy.stats.tests.test_odds_ratio.TestOddsRatio
scipy.stats.tests.test_odds_ratio.TestOddsRatio.test_invalid_alternative(self)
scipy.stats.tests.test_odds_ratio.TestOddsRatio.test_invalid_confidence_level(self,level)
scipy.stats.tests.test_odds_ratio.TestOddsRatio.test_invalid_kind(self)
scipy.stats.tests.test_odds_ratio.TestOddsRatio.test_invalid_table_shape(self,kind,bad_table)
scipy.stats.tests.test_odds_ratio.TestOddsRatio.test_invalid_table_type(self)
scipy.stats.tests.test_odds_ratio.TestOddsRatio.test_negative_table_values(self)
scipy.stats.tests.test_odds_ratio.TestOddsRatio.test_results_from_r(self,parameters,rresult)
scipy.stats.tests.test_odds_ratio.TestOddsRatio.test_row_or_col_zero(self,table)
scipy.stats.tests.test_odds_ratio.TestOddsRatio.test_sample_odds_ratio_ci(self,case)
scipy.stats.tests.test_odds_ratio.TestOddsRatio.test_sample_odds_ratio_one_sided_ci(self,alternative)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_binned_statistic.py----------------------------------------
A:scipy.stats.tests.test_binned_statistic.rng->numpy.random.default_rng(3704743126639371)
A:scipy.stats.tests.test_binned_statistic.cls.x->numpy.random.default_rng(3704743126639371).uniform(size=100)
A:scipy.stats.tests.test_binned_statistic.cls.y->numpy.random.default_rng(3704743126639371).uniform(size=100)
A:scipy.stats.tests.test_binned_statistic.cls.v->numpy.random.default_rng(3704743126639371).uniform(size=100)
A:scipy.stats.tests.test_binned_statistic.cls.X->numpy.random.default_rng(3704743126639371).uniform(size=(100, 3))
A:scipy.stats.tests.test_binned_statistic.cls.w->numpy.random.default_rng(3704743126639371).uniform(size=100)
A:scipy.stats.tests.test_binned_statistic.(count1, edges1, bc)->binned_statistic_dd(X, v, 'count', bins=3)
A:scipy.stats.tests.test_binned_statistic.(count2, edges2)->numpy.histogramdd(X, bins=3)
A:scipy.stats.tests.test_binned_statistic.(stat1, edges1, bc)->binned_statistic_dd(X, v, 'median', bins=3)
A:scipy.stats.tests.test_binned_statistic.(stat2, edges2, bc)->binned_statistic_dd(X, v, np.median, bins=3)
A:scipy.stats.tests.test_binned_statistic.res->binned_statistic_dd(X, v, 'count', bins=3)
A:scipy.stats.tests.test_binned_statistic.(sum1, edges1, bc)->binned_statistic_dd(x, np.ones(len(x)), bins=[bins], statistic='sum')
A:scipy.stats.tests.test_binned_statistic.(sum2, edges2)->numpy.histogram(x, bins=bins)
A:scipy.stats.tests.test_binned_statistic.bc2->numpy.array([63, 33, 86, 83, 88, 67, 57, 33, 42, 41, 82, 83, 92, 32, 36, 91, 43, 87, 81, 81])
A:scipy.stats.tests.test_binned_statistic.x->numpy.random.default_rng(3704743126639371).random(size=n)
A:scipy.stats.tests.test_binned_statistic.data->numpy.random.random(30)
A:scipy.stats.tests.test_binned_statistic.(mean, bins, _)->binned_statistic(x[:15], data[:15])
A:scipy.stats.tests.test_binned_statistic.(mean_range, bins_range, _)->binned_statistic(x, data, range=[(0, 14)])
A:scipy.stats.tests.test_binned_statistic.(mean_range2, bins_range2, _)->binned_statistic(x, data, range=(0, 14))
A:scipy.stats.tests.test_binned_statistic.(stat1v, edges1v, bc1v)->binned_statistic_dd(X, v, stat, bins=8)
A:scipy.stats.tests.test_binned_statistic.(stat1w, edges1w, bc1w)->binned_statistic_dd(X, w, stat, bins=8)
A:scipy.stats.tests.test_binned_statistic.(stat2, edges2, bc2)->binned_statistic_dd(X, v, 'mean', bins=(15, 20, 10), expand_binnumbers=True)
A:scipy.stats.tests.test_binned_statistic.(count1, binx1, biny1, bc)->binned_statistic_2d(x, y, v, 'count', bins=3)
A:scipy.stats.tests.test_binned_statistic.(count2, binx2, biny2)->numpy.histogram2d(x, y, bins=5)
A:scipy.stats.tests.test_binned_statistic.(sum1, binx1, biny1, bc)->binned_statistic_2d(x, y, v, 'sum', bins=5)
A:scipy.stats.tests.test_binned_statistic.(sum2, binx2, biny2)->numpy.histogram2d(x, y, bins=5, weights=v)
A:scipy.stats.tests.test_binned_statistic.(stat1, binx1, biny1, bc)->binned_statistic_2d(x, y, v, 'median', bins=5)
A:scipy.stats.tests.test_binned_statistic.(stat2, binx2, biny2, bc)->binned_statistic_2d(x, y, v, np.median, bins=5)
A:scipy.stats.tests.test_binned_statistic.(stat1v, binx1v, biny1v, bc1v)->binned_statistic_2d(x, y, v, 'mean', bins=8)
A:scipy.stats.tests.test_binned_statistic.(stat1w, binx1w, biny1w, bc1w)->binned_statistic_2d(x, y, w, 'mean', bins=8)
A:scipy.stats.tests.test_binned_statistic.(stat2, binx2, biny2, bc2)->binned_statistic_2d(x, y, [v, w], 'mean', bins=8)
A:scipy.stats.tests.test_binned_statistic.(stat, edgesx, bcx)->binned_statistic(X[:, 0], v, 'mean', bins=15)
A:scipy.stats.tests.test_binned_statistic.(stat, edgesy, bcy)->binned_statistic(X[:, 1], v, 'mean', bins=20)
A:scipy.stats.tests.test_binned_statistic.(stat2, edgesx2, edgesy2, bc2)->binned_statistic_2d(x, y, v, 'mean', bins=(20, 10), expand_binnumbers=True)
A:scipy.stats.tests.test_binned_statistic.bcx3->numpy.searchsorted(edgesx, x, side='right')
A:scipy.stats.tests.test_binned_statistic.bcy3->numpy.searchsorted(edgesy, y, side='right')
A:scipy.stats.tests.test_binned_statistic.(sum3, edges3, bc)->binned_statistic_dd(X, v, np.sum, bins=3)
A:scipy.stats.tests.test_binned_statistic.(stat, edgesz, bcz)->binned_statistic(X[:, 2], v, 'mean', bins=10)
A:scipy.stats.tests.test_binned_statistic.v->numpy.random.default_rng(3704743126639371).random(size=n)
A:scipy.stats.tests.test_binned_statistic.bins->numpy.linspace(0, 1, 11)
A:scipy.stats.tests.test_binned_statistic.result->binned_statistic_dd(x, v, 'mean', binned_statistic_result=result)
A:scipy.stats.tests.test_binned_statistic.X->numpy.array([0, 0.42358226], dtype=np.float32)
A:scipy.stats.tests.test_binned_statistic.(stat, _, _)->binned_statistic_dd(x, v, statistic, bins=2)
A:scipy.stats.tests.test_binned_statistic.ref->numpy.array([ref_statistic(v[~i]), ref_statistic(v[i])])
scipy.stats.tests.testTestBinnedStatistic
scipy.stats.tests.testTestBinnedStatistic.setup_class(cls)
scipy.stats.tests.testTestBinnedStatistic.test_1d_bincode(self)
scipy.stats.tests.testTestBinnedStatistic.test_1d_count(self)
scipy.stats.tests.testTestBinnedStatistic.test_1d_max(self)
scipy.stats.tests.testTestBinnedStatistic.test_1d_mean(self)
scipy.stats.tests.testTestBinnedStatistic.test_1d_median(self)
scipy.stats.tests.testTestBinnedStatistic.test_1d_min(self)
scipy.stats.tests.testTestBinnedStatistic.test_1d_multi_values(self)
scipy.stats.tests.testTestBinnedStatistic.test_1d_range_keyword(self)
scipy.stats.tests.testTestBinnedStatistic.test_1d_result_attributes(self)
scipy.stats.tests.testTestBinnedStatistic.test_1d_std(self)
scipy.stats.tests.testTestBinnedStatistic.test_1d_sum(self)
scipy.stats.tests.testTestBinnedStatistic.test_2d_bincode(self)
scipy.stats.tests.testTestBinnedStatistic.test_2d_binnumbers_unraveled(self)
scipy.stats.tests.testTestBinnedStatistic.test_2d_count(self)
scipy.stats.tests.testTestBinnedStatistic.test_2d_max(self)
scipy.stats.tests.testTestBinnedStatistic.test_2d_mean(self)
scipy.stats.tests.testTestBinnedStatistic.test_2d_mean_unicode(self)
scipy.stats.tests.testTestBinnedStatistic.test_2d_median(self)
scipy.stats.tests.testTestBinnedStatistic.test_2d_min(self)
scipy.stats.tests.testTestBinnedStatistic.test_2d_multi_values(self)
scipy.stats.tests.testTestBinnedStatistic.test_2d_result_attributes(self)
scipy.stats.tests.testTestBinnedStatistic.test_2d_std(self)
scipy.stats.tests.testTestBinnedStatistic.test_2d_sum(self)
scipy.stats.tests.testTestBinnedStatistic.test_big_number_std(self)
scipy.stats.tests.testTestBinnedStatistic.test_binned_statistic_float32(self)
scipy.stats.tests.testTestBinnedStatistic.test_dd_all(self,dtype,statistic)
scipy.stats.tests.testTestBinnedStatistic.test_dd_bincode(self)
scipy.stats.tests.testTestBinnedStatistic.test_dd_binned_statistic_result(self)
scipy.stats.tests.testTestBinnedStatistic.test_dd_binnumbers_unraveled(self)
scipy.stats.tests.testTestBinnedStatistic.test_dd_count(self)
scipy.stats.tests.testTestBinnedStatistic.test_dd_max(self)
scipy.stats.tests.testTestBinnedStatistic.test_dd_mean(self)
scipy.stats.tests.testTestBinnedStatistic.test_dd_median(self)
scipy.stats.tests.testTestBinnedStatistic.test_dd_min(self)
scipy.stats.tests.testTestBinnedStatistic.test_dd_multi_values(self)
scipy.stats.tests.testTestBinnedStatistic.test_dd_range_errors(self)
scipy.stats.tests.testTestBinnedStatistic.test_dd_result_attributes(self)
scipy.stats.tests.testTestBinnedStatistic.test_dd_std(self)
scipy.stats.tests.testTestBinnedStatistic.test_dd_sum(self)
scipy.stats.tests.testTestBinnedStatistic.test_dd_zero_dedges(self)
scipy.stats.tests.testTestBinnedStatistic.test_empty_bins_std(self)
scipy.stats.tests.testTestBinnedStatistic.test_gh14332(self)
scipy.stats.tests.testTestBinnedStatistic.test_gh5927(self)
scipy.stats.tests.testTestBinnedStatistic.test_non_finite_inputs_and_int_bins(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.setup_class(cls)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_1d_bincode(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_1d_count(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_1d_max(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_1d_mean(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_1d_median(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_1d_min(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_1d_multi_values(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_1d_range_keyword(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_1d_result_attributes(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_1d_std(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_1d_sum(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_2d_bincode(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_2d_binnumbers_unraveled(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_2d_count(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_2d_max(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_2d_mean(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_2d_mean_unicode(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_2d_median(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_2d_min(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_2d_multi_values(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_2d_result_attributes(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_2d_std(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_2d_sum(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_big_number_std(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_binned_statistic_float32(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_dd_all(self,dtype,statistic)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_dd_bincode(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_dd_binned_statistic_result(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_dd_binnumbers_unraveled(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_dd_count(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_dd_max(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_dd_mean(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_dd_median(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_dd_min(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_dd_multi_values(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_dd_range_errors(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_dd_result_attributes(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_dd_std(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_dd_sum(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_dd_zero_dedges(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_empty_bins_std(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_gh14332(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_gh5927(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_non_finite_inputs_and_int_bins(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/test_discrete_basic.py----------------------------------------
A:scipy.stats.tests.test_discrete_basic.seen->set()
A:scipy.stats.tests.test_discrete_basic.distfn->getattr(stats, dist)
A:scipy.stats.tests.test_discrete_basic.rvs->scipy.stats.rv_discrete(values=(xk, pk)).rvs(size=100, random_state=rng)
A:scipy.stats.tests.test_discrete_basic.supp->numpy.unique(rvs)
A:scipy.stats.tests.test_discrete_basic.(m, v)->getattr(stats, dist).stats(*arg)
A:scipy.stats.tests.test_discrete_basic.k->numpy.asarray(index)
A:scipy.stats.tests.test_discrete_basic.(m, v, s, k)->getattr(stats, dist).stats(*arg, moments='mvsk')
A:scipy.stats.tests.test_discrete_basic.distfunc->getattr(stats, dist)
A:scipy.stats.tests.test_discrete_basic.loc->numpy.zeros(2)
A:scipy.stats.tests.test_discrete_basic.(_a, _b)->getattr(stats, dist).support(*arg)
A:scipy.stats.tests.test_discrete_basic.cdf_supp->getattr(stats, dist).cdf(supp, *arg)
A:scipy.stats.tests.test_discrete_basic.startind->int(distfn.ppf(0.01, *arg) - 1)
A:scipy.stats.tests.test_discrete_basic.index->list(range(startind, startind + 10))
A:scipy.stats.tests.test_discrete_basic.cdfs->getattr(stats, dist).cdf(index, *arg)
A:scipy.stats.tests.test_discrete_basic.pmfs_cum->getattr(stats, dist).pmf(index, *arg).cumsum()
A:scipy.stats.tests.test_discrete_basic.dist->scipy.stats.rv_discrete(values=(xk, pk))
A:scipy.stats.tests.test_discrete_basic.q->numpy.linspace(0.01, 0.99, 20)
A:scipy.stats.tests.test_discrete_basic.median_sf->getattr(stats, dist).isf(0.5, *arg)
A:scipy.stats.tests.test_discrete_basic.lo->int(max(_a, -1000))
A:scipy.stats.tests.test_discrete_basic.distsupport->range(lo, high)
A:scipy.stats.tests.test_discrete_basic.current->getattr(stats, dist).cdf(ii, *arg)
A:scipy.stats.tests.test_discrete_basic.distsupp->numpy.array(distsupp)
A:scipy.stats.tests.test_discrete_basic.distmass->numpy.array(distmass)
A:scipy.stats.tests.test_discrete_basic.(freq, hsupp)->numpy.histogram(rvs, histsupp)
A:scipy.stats.tests.test_discrete_basic.(chis, pval)->scipy.stats.chisquare(np.array(freq), len(rvs) * distmass)
A:scipy.stats.tests.test_discrete_basic.result->scipy.stats.rv_discrete(values=(xk, pk)).pmf(z, *p2, loc=loc)
A:scipy.stats.tests.test_discrete_basic.x->numpy.round(np.linspace(a, b, 5))
A:scipy.stats.tests.test_discrete_basic.vals->scipy.stats.rv_discrete(values=(xk, pk)).cdf(x, *args)
A:scipy.stats.tests.test_discrete_basic.shape_info->scipy.stats.rv_discrete(values=(xk, pk))._shape_info()
A:scipy.stats.tests.test_discrete_basic.i->shape_names.index(shapename)
A:scipy.stats.tests.test_discrete_basic.shapes_copy->list(shapes)
A:scipy.stats.tests.test_discrete_basic.(a, b)->scipy.stats.rv_discrete(values=(xk, pk)).support()
A:scipy.stats.tests.test_discrete_basic.pmf->scipy.stats.rv_discrete(values=(xk, pk)).pmf(x, *shapes_copy)
A:scipy.stats.tests.test_discrete_basic.frozen_binom->scipy.stats.binom(10, 0.5)
A:scipy.stats.tests.test_discrete_basic.rng->numpy.random.default_rng(98430143469)
A:scipy.stats.tests.test_discrete_basic.xk->numpy.sort(rng.random(10) * 10)
A:scipy.stats.tests.test_discrete_basic.pk->numpy.random.default_rng(98430143469).random(10)
A:scipy.stats.tests.test_discrete_basic.cdf2->numpy.cumsum(pk)
A:scipy.stats.tests.test_discrete_basic.sf2->scipy.stats.rv_discrete(values=(xk, pk)).sf(xk)
A:scipy.stats.tests.test_discrete_basic.ps->numpy.linspace(0.01, 0.99, 10)
A:scipy.stats.tests.test_discrete_basic.med2->scipy.stats.rv_discrete(values=(xk, pk)).ppf(0.5)
A:scipy.stats.tests.test_discrete_basic.mean2->numpy.sum(xk * pk)
A:scipy.stats.tests.test_discrete_basic.var2->numpy.sum((xk - mean2) ** 2 * pk)
A:scipy.stats.tests.test_discrete_basic.mom3->numpy.sum(xk ** 3 * pk)
A:scipy.stats.tests.test_discrete_basic.rvs0->scipy.stats.rv_discrete(values=(xk, pk)).ppf(rng.random(size=100))
scipy.stats.tests.test_discrete_basic.cases_test_discrete_basic()
scipy.stats.tests.test_discrete_basic.cases_test_discrete_integer_shapes()
scipy.stats.tests.test_discrete_basic.check_cdf_ppf(distfn,arg,supp,msg)
scipy.stats.tests.test_discrete_basic.check_discrete_chisquare(distfn,arg,rvs,alpha,msg)
scipy.stats.tests.test_discrete_basic.check_moment_frozen(distfn,arg,m,k)
scipy.stats.tests.test_discrete_basic.check_oth(distfn,arg,supp,msg)
scipy.stats.tests.test_discrete_basic.check_pmf_cdf(distfn,arg,distname)
scipy.stats.tests.test_discrete_basic.check_scale_docstring(distfn)
scipy.stats.tests.test_discrete_basic.test_cdf_gh13280_regression(distname,args)
scipy.stats.tests.test_discrete_basic.test_discrete_basic(distname,arg,first_case)
scipy.stats.tests.test_discrete_basic.test_frozen_attributes()
scipy.stats.tests.test_discrete_basic.test_integer_shapes(distname,shapename,shapes)
scipy.stats.tests.test_discrete_basic.test_interval(distname,shapes)
scipy.stats.tests.test_discrete_basic.test_isf_with_loc(dist,args)
scipy.stats.tests.test_discrete_basic.test_methods_with_lists(method,distname,args)
scipy.stats.tests.test_discrete_basic.test_moments(distname,arg)
scipy.stats.tests.test_discrete_basic.test_ppf_with_loc(dist,args)
scipy.stats.tests.test_discrete_basic.test_rv_sample()
scipy.stats.tests.test_discrete_basic.test_rvs_broadcast(dist,shape_args)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/tests/data/fisher_exact_results_from_r.py----------------------------------------
A:scipy.stats.tests.data.fisher_exact_results_from_r.Parameters->namedtuple('Parameters', ['table', 'confidence_level', 'alternative'])
A:scipy.stats.tests.data.fisher_exact_results_from_r.RResults->namedtuple('RResults', ['pvalue', 'conditional_odds_ratio', 'conditional_odds_ratio_ci'])


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_boost/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_rcont/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_unuran/unuran_wrapper.pyi----------------------------------------
scipy.stats._unuran.unuran_wrapper.DAUDist(Protocol)
scipy.stats._unuran.unuran_wrapper.DAUDist.pmf(self)->Callable[..., float]
scipy.stats._unuran.unuran_wrapper.DAUDist.support(self)->Tuple[float, float]
scipy.stats._unuran.unuran_wrapper.DGTDist(Protocol)
scipy.stats._unuran.unuran_wrapper.DGTDist.pmf(self)->Callable[..., float]
scipy.stats._unuran.unuran_wrapper.DGTDist.support(self)->Tuple[float, float]
scipy.stats._unuran.unuran_wrapper.DiscreteAliasUrn(self,dist:npt.ArrayLike|DAUDist,*,domain:None|Tuple[float,float]=...,urn_factor:float=...,random_state:SeedType=...)
scipy.stats._unuran.unuran_wrapper.DiscreteAliasUrn.__init__(self,dist:npt.ArrayLike|DAUDist,*,domain:None|Tuple[float,float]=...,urn_factor:float=...,random_state:SeedType=...)
scipy.stats._unuran.unuran_wrapper.DiscreteGuideTable(self,dist:npt.ArrayLike|DGTDist,*,domain:None|Tuple[float,float]=...,guide_factor:float=...,random_state:SeedType=...)
scipy.stats._unuran.unuran_wrapper.DiscreteGuideTable.__init__(self,dist:npt.ArrayLike|DGTDist,*,domain:None|Tuple[float,float]=...,guide_factor:float=...,random_state:SeedType=...)
scipy.stats._unuran.unuran_wrapper.DiscreteGuideTable.ppf(self,u:ArrayLike0D)->float
scipy.stats._unuran.unuran_wrapper.DiscreteGuideTable.ppf(self,u:npt.ArrayLike)->np.ndarray
scipy.stats._unuran.unuran_wrapper.HINVDist(Protocol)
scipy.stats._unuran.unuran_wrapper.HINVDist.cdf(self)->Callable[..., float]
scipy.stats._unuran.unuran_wrapper.HINVDist.pdf(self)->Callable[..., float]
scipy.stats._unuran.unuran_wrapper.HINVDist.support(self)->Tuple[float, float]
scipy.stats._unuran.unuran_wrapper.Method
scipy.stats._unuran.unuran_wrapper.Method.rvs(self,size:None=...)->float | int
scipy.stats._unuran.unuran_wrapper.Method.rvs(self,size:int|Tuple[int,...]=...)->np.ndarray
scipy.stats._unuran.unuran_wrapper.Method.set_random_state(self,random_state:SeedType)->None
scipy.stats._unuran.unuran_wrapper.NumericalInverseHermite(self,dist:HINVDist,*,domain:None|Tuple[float,float]=...,order:int=...,u_resolution:float=...,construction_points:None|npt.ArrayLike=...,max_intervals:int=...,random_state:SeedType=...)
scipy.stats._unuran.unuran_wrapper.NumericalInverseHermite.__init__(self,dist:HINVDist,*,domain:None|Tuple[float,float]=...,order:int=...,u_resolution:float=...,construction_points:None|npt.ArrayLike=...,max_intervals:int=...,random_state:SeedType=...)
scipy.stats._unuran.unuran_wrapper.NumericalInverseHermite.intervals(self)->int
scipy.stats._unuran.unuran_wrapper.NumericalInverseHermite.ppf(self,u:ArrayLike0D)->float
scipy.stats._unuran.unuran_wrapper.NumericalInverseHermite.ppf(self,u:npt.ArrayLike)->np.ndarray
scipy.stats._unuran.unuran_wrapper.NumericalInverseHermite.qrvs(self,size:None|int|Tuple[int,...]=...,d:None|int=...,qmc_engine:None|stats.qmc.QMCEngine=...)->npt.ArrayLike
scipy.stats._unuran.unuran_wrapper.NumericalInverseHermite.u_error(self,sample_size:int=...)->UError
scipy.stats._unuran.unuran_wrapper.NumericalInversePolynomial(self,dist:PINVDist,*,mode:None|float=...,center:None|float=...,domain:None|Tuple[float,float]=...,order:int=...,u_resolution:float=...,random_state:SeedType=...)
scipy.stats._unuran.unuran_wrapper.NumericalInversePolynomial.__init__(self,dist:PINVDist,*,mode:None|float=...,center:None|float=...,domain:None|Tuple[float,float]=...,order:int=...,u_resolution:float=...,random_state:SeedType=...)
scipy.stats._unuran.unuran_wrapper.NumericalInversePolynomial.cdf(self,x:ArrayLike0D)->float
scipy.stats._unuran.unuran_wrapper.NumericalInversePolynomial.cdf(self,x:npt.ArrayLike)->np.ndarray
scipy.stats._unuran.unuran_wrapper.NumericalInversePolynomial.intervals(self)->int
scipy.stats._unuran.unuran_wrapper.NumericalInversePolynomial.ppf(self,u:ArrayLike0D)->float
scipy.stats._unuran.unuran_wrapper.NumericalInversePolynomial.ppf(self,u:npt.ArrayLike)->np.ndarray
scipy.stats._unuran.unuran_wrapper.NumericalInversePolynomial.qrvs(self,size:None|int|Tuple[int,...]=...,d:None|int=...,qmc_engine:None|stats.qmc.QMCEngine=...)->npt.ArrayLike
scipy.stats._unuran.unuran_wrapper.NumericalInversePolynomial.u_error(self,sample_size:int=...)->UError
scipy.stats._unuran.unuran_wrapper.PINVDist(Protocol)
scipy.stats._unuran.unuran_wrapper.PINVDist.cdf(self)->Callable[..., float]
scipy.stats._unuran.unuran_wrapper.PINVDist.logpdf(self)->Callable[..., float]
scipy.stats._unuran.unuran_wrapper.PINVDist.pdf(self)->Callable[..., float]
scipy.stats._unuran.unuran_wrapper.SROUDist(Protocol)
scipy.stats._unuran.unuran_wrapper.SROUDist.pdf(self)->Callable[..., float]
scipy.stats._unuran.unuran_wrapper.SROUDist.support(self)->Tuple[float, float]
scipy.stats._unuran.unuran_wrapper.SimpleRatioUniforms(self,dist:SROUDist,*,mode:None|float=...,pdf_area:float=...,domain:None|Tuple[float,float]=...,cdf_at_mode:float=...,random_state:SeedType=...)
scipy.stats._unuran.unuran_wrapper.SimpleRatioUniforms.__init__(self,dist:SROUDist,*,mode:None|float=...,pdf_area:float=...,domain:None|Tuple[float,float]=...,cdf_at_mode:float=...,random_state:SeedType=...)
scipy.stats._unuran.unuran_wrapper.TDRDist(Protocol)
scipy.stats._unuran.unuran_wrapper.TDRDist.dpdf(self)->Callable[..., float]
scipy.stats._unuran.unuran_wrapper.TDRDist.pdf(self)->Callable[..., float]
scipy.stats._unuran.unuran_wrapper.TDRDist.support(self)->Tuple[float, float]
scipy.stats._unuran.unuran_wrapper.TransformedDensityRejection(self,dist:TDRDist,*,mode:None|float=...,center:None|float=...,domain:None|Tuple[float,float]=...,c:float=...,construction_points:int|npt.ArrayLike=...,use_dars:bool=...,max_squeeze_hat_ratio:float=...,random_state:SeedType=...)
scipy.stats._unuran.unuran_wrapper.TransformedDensityRejection.__init__(self,dist:TDRDist,*,mode:None|float=...,center:None|float=...,domain:None|Tuple[float,float]=...,c:float=...,construction_points:int|npt.ArrayLike=...,use_dars:bool=...,max_squeeze_hat_ratio:float=...,random_state:SeedType=...)
scipy.stats._unuran.unuran_wrapper.TransformedDensityRejection.ppf_hat(self,u:ArrayLike0D)->float
scipy.stats._unuran.unuran_wrapper.TransformedDensityRejection.ppf_hat(self,u:npt.ArrayLike)->np.ndarray
scipy.stats._unuran.unuran_wrapper.TransformedDensityRejection.squeeze_area(self)->float
scipy.stats._unuran.unuran_wrapper.TransformedDensityRejection.squeeze_hat_ratio(self)->float
scipy.stats._unuran.unuran_wrapper.UNURANError(RuntimeError)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/stats/_unuran/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/idl.py----------------------------------------
scipy.io.idl.__dir__()
scipy.io.idl.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/netcdf.py----------------------------------------
scipy.io.netcdf.__dir__()
scipy.io.netcdf.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/wavfile.py----------------------------------------
A:scipy.io.wavfile.res->struct.unpack(fmt + 'HHIIHH', fid.read(16))
A:scipy.io.wavfile.extensible_chunk_data->open(filename, 'wb').read(22)
A:scipy.io.wavfile.start->open(filename, 'wb').tell()
A:scipy.io.wavfile.data->data.byteswap().byteswap()
A:scipy.io.wavfile.a->numpy.zeros((len(data) // bytes_per_sample, numpy.dtype(dt).itemsize), dtype='V1')
A:scipy.io.wavfile.a[:, :bytes_per_sample]->data.byteswap().byteswap().reshape((-1, bytes_per_sample))
A:scipy.io.wavfile.a[:, -bytes_per_sample:]->data.byteswap().byteswap().reshape((-1, bytes_per_sample))
A:scipy.io.wavfile.str1->open(filename, 'wb').read(4)
A:scipy.io.wavfile.str2->open(filename, 'wb').read(4)
A:scipy.io.wavfile.fid->open(filename, 'wb')
A:scipy.io.wavfile.(file_size, is_big_endian)->_read_riff_chunk(fid)
A:scipy.io.wavfile.chunk_id->open(filename, 'wb').read(4)
A:scipy.io.wavfile.fmt_chunk->_read_fmt_chunk(fid, is_big_endian)
A:scipy.io.wavfile.fmt_chunk_data->struct.pack('<HHIIHH', format_tag, channels, fs, bytes_per_second, block_align, bit_depth)
A:scipy.io.wavfile.size->open(filename, 'wb').tell()
scipy.io.wavfile.WAVE_FORMAT(IntEnum)
scipy.io.wavfile.WavFileWarning(UserWarning)
scipy.io.wavfile._array_tofile(fid,data)
scipy.io.wavfile._handle_pad_byte(fid,size)
scipy.io.wavfile._raise_bad_format(format_tag)
scipy.io.wavfile._read_data_chunk(fid,format_tag,channels,bit_depth,is_big_endian,block_align,mmap=False)
scipy.io.wavfile._read_fmt_chunk(fid,is_big_endian)
scipy.io.wavfile._read_riff_chunk(fid)
scipy.io.wavfile._skip_unknown_chunk(fid,is_big_endian)
scipy.io.wavfile.read(filename,mmap=False)
scipy.io.wavfile.write(filename,rate,data)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/_netcdf.py----------------------------------------
A:scipy.io._netcdf.self.fp->open(self.filename, '%sb' % omode)
A:scipy.io._netcdf.self._mm->mmap.mmap(self.fp.fileno(), 0, access=mm.ACCESS_READ)
A:scipy.io._netcdf.self._mm_buf->numpy.frombuffer(self._mm, dtype=np.int8)
A:scipy.io._netcdf.ref->weakref.ref(self._mm_buf)
A:scipy.io._netcdf.shape->property(shape)
A:scipy.io._netcdf.shape_->tuple([dim or 0 for dim in shape])
A:scipy.io._netcdf.type->dtype(type)
A:scipy.io._netcdf.data->numpy.round(data)
A:scipy.io._netcdf.self.variables[name]->netcdf_variable(data, typecode, size, shape, dimensions, attributes, maskandscale=self.maskandscale)
A:scipy.io._netcdf.self.__dict__['_recs']->self._unpack_int()
A:scipy.io._netcdf.variables->sorted(self.variables, key=sortkey, reverse=True)
A:scipy.io._netcdf.self.__dict__['_recsize']->sum([var._vsize for var in self.variables.values() if var.isrec])
A:scipy.io._netcdf.dimid->self._unpack_int()
A:scipy.io._netcdf.rec_vars->len([v for v in self.variables.values() if v.isrec])
A:scipy.io._netcdf.self.variables[name].__dict__['_begin']->self.fp.tell()
A:scipy.io._netcdf.the_beguine->self.fp.tell()
A:scipy.io._netcdf.var.__dict__['data']->numpy.resize(var.data, shape).astype(var.data.dtype)
A:scipy.io._netcdf.pos0pos->self.fp.tell()
A:scipy.io._netcdf.rec->rec.byteswap().byteswap()
A:scipy.io._netcdf.encoded_fill_value->var._get_encoded_fill_value()
A:scipy.io._netcdf.values->values.rstrip(b'\x00').rstrip(b'\x00')
A:scipy.io._netcdf.magic->self.fp.read(3)
A:scipy.io._netcdf.header->self.fp.read(4)
A:scipy.io._netcdf.count->self._unpack_int()
A:scipy.io._netcdf.name->self._unpack_string().decode('latin1')
A:scipy.io._netcdf.attributes[name]->self._read_att_values()
A:scipy.io._netcdf.(name, dimensions, shape, attributes, typecode, size, dtype_, begin_, vsize)->self._read_var()
A:scipy.io._netcdf.pos->self.fp.tell()
A:scipy.io._netcdf.rec_array->frombuffer(self.fp.read(self._recs * self._recsize), dtype=dtypes).copy()
A:scipy.io._netcdf.dims->self._unpack_int()
A:scipy.io._netcdf.dimensions->tuple(dimensions)
A:scipy.io._netcdf.attributes->self._read_att_array()
A:scipy.io._netcdf.nc_type->self.fp.read(4)
A:scipy.io._netcdf.vsize->self._unpack_int()
A:scipy.io._netcdf.begin->[self._unpack_int, self._unpack_int64][self.version_byte - 1]()
A:scipy.io._netcdf.n->self._unpack_int()
A:scipy.io._netcdf.s->self.fp.read(count).rstrip(b'\x00')
A:scipy.io._netcdf.isrec->property(isrec)
A:scipy.io._netcdf.missing_value->self._get_missing_value()
A:scipy.io._netcdf.scale_factor->self._attributes.get('scale_factor')
A:scipy.io._netcdf.add_offset->self._attributes.get('add_offset')
A:scipy.io._netcdf.self.__dict__['data']->numpy.resize(self.data, shape).astype(self.data.dtype)
A:scipy.io._netcdf.fill_value->numpy.array(self._attributes['_FillValue'], dtype=self.data.dtype).tobytes()
A:scipy.io._netcdf.missing_value_isnan->numpy.isnan(missing_value)
A:scipy.io._netcdf.mymask->numpy.isnan(data)
A:scipy.io._netcdf.newdata->numpy.ma.masked_where(mymask, data)
scipy.io._netcdf.netcdf_file(self,filename,mode='r',mmap=None,version=1,maskandscale=False)
scipy.io._netcdf.netcdf_file.__enter__(self)
scipy.io._netcdf.netcdf_file.__exit__(self,type,value,traceback)
scipy.io._netcdf.netcdf_file.__init__(self,filename,mode='r',mmap=None,version=1,maskandscale=False)
scipy.io._netcdf.netcdf_file.__setattr__(self,attr,value)
scipy.io._netcdf.netcdf_file._pack_begin(self,begin)
scipy.io._netcdf.netcdf_file._pack_int(self,value)
scipy.io._netcdf.netcdf_file._pack_int64(self,value)
scipy.io._netcdf.netcdf_file._pack_string(self,s)
scipy.io._netcdf.netcdf_file._read(self)
scipy.io._netcdf.netcdf_file._read_att_array(self)
scipy.io._netcdf.netcdf_file._read_att_values(self)
scipy.io._netcdf.netcdf_file._read_dim_array(self)
scipy.io._netcdf.netcdf_file._read_gatt_array(self)
scipy.io._netcdf.netcdf_file._read_numrecs(self)
scipy.io._netcdf.netcdf_file._read_var(self)
scipy.io._netcdf.netcdf_file._read_var_array(self)
scipy.io._netcdf.netcdf_file._unpack_int(self)
scipy.io._netcdf.netcdf_file._unpack_int64(self)
scipy.io._netcdf.netcdf_file._unpack_string(self)
scipy.io._netcdf.netcdf_file._write(self)
scipy.io._netcdf.netcdf_file._write_att_array(self,attributes)
scipy.io._netcdf.netcdf_file._write_att_values(self,values)
scipy.io._netcdf.netcdf_file._write_dim_array(self)
scipy.io._netcdf.netcdf_file._write_gatt_array(self)
scipy.io._netcdf.netcdf_file._write_numrecs(self)
scipy.io._netcdf.netcdf_file._write_var_array(self)
scipy.io._netcdf.netcdf_file._write_var_data(self,name)
scipy.io._netcdf.netcdf_file._write_var_metadata(self,name)
scipy.io._netcdf.netcdf_file._write_var_padding(self,var,size)
scipy.io._netcdf.netcdf_file.close(self)
scipy.io._netcdf.netcdf_file.createDimension(self,name,length)
scipy.io._netcdf.netcdf_file.createVariable(self,name,type,dimensions)
scipy.io._netcdf.netcdf_file.flush(self)
scipy.io._netcdf.netcdf_variable(self,data,typecode,size,shape,dimensions,attributes=None,maskandscale=False)
scipy.io._netcdf.netcdf_variable.__getitem__(self,index)
scipy.io._netcdf.netcdf_variable.__init__(self,data,typecode,size,shape,dimensions,attributes=None,maskandscale=False)
scipy.io._netcdf.netcdf_variable.__setattr__(self,attr,value)
scipy.io._netcdf.netcdf_variable.__setitem__(self,index,data)
scipy.io._netcdf.netcdf_variable._apply_missing_value(data,missing_value)
scipy.io._netcdf.netcdf_variable._default_encoded_fill_value(self)
scipy.io._netcdf.netcdf_variable._get_encoded_fill_value(self)
scipy.io._netcdf.netcdf_variable._get_missing_value(self)
scipy.io._netcdf.netcdf_variable.assignValue(self,value)
scipy.io._netcdf.netcdf_variable.getValue(self)
scipy.io._netcdf.netcdf_variable.isrec(self)
scipy.io._netcdf.netcdf_variable.itemsize(self)
scipy.io._netcdf.netcdf_variable.shape(self)
scipy.io._netcdf.netcdf_variable.typecode(self)
scipy.io.netcdf_file(self,filename,mode='r',mmap=None,version=1,maskandscale=False)
scipy.io.netcdf_file.__enter__(self)
scipy.io.netcdf_file.__exit__(self,type,value,traceback)
scipy.io.netcdf_file.__setattr__(self,attr,value)
scipy.io.netcdf_file._pack_begin(self,begin)
scipy.io.netcdf_file._pack_int(self,value)
scipy.io.netcdf_file._pack_int64(self,value)
scipy.io.netcdf_file._pack_string(self,s)
scipy.io.netcdf_file._read(self)
scipy.io.netcdf_file._read_att_array(self)
scipy.io.netcdf_file._read_att_values(self)
scipy.io.netcdf_file._read_dim_array(self)
scipy.io.netcdf_file._read_gatt_array(self)
scipy.io.netcdf_file._read_numrecs(self)
scipy.io.netcdf_file._read_var(self)
scipy.io.netcdf_file._read_var_array(self)
scipy.io.netcdf_file._unpack_int(self)
scipy.io.netcdf_file._unpack_int64(self)
scipy.io.netcdf_file._unpack_string(self)
scipy.io.netcdf_file._write(self)
scipy.io.netcdf_file._write_att_array(self,attributes)
scipy.io.netcdf_file._write_att_values(self,values)
scipy.io.netcdf_file._write_dim_array(self)
scipy.io.netcdf_file._write_gatt_array(self)
scipy.io.netcdf_file._write_numrecs(self)
scipy.io.netcdf_file._write_var_array(self)
scipy.io.netcdf_file._write_var_data(self,name)
scipy.io.netcdf_file._write_var_metadata(self,name)
scipy.io.netcdf_file._write_var_padding(self,var,size)
scipy.io.netcdf_file.close(self)
scipy.io.netcdf_file.createDimension(self,name,length)
scipy.io.netcdf_file.createVariable(self,name,type,dimensions)
scipy.io.netcdf_file.flush(self)
scipy.io.netcdf_variable(self,data,typecode,size,shape,dimensions,attributes=None,maskandscale=False)
scipy.io.netcdf_variable.__getitem__(self,index)
scipy.io.netcdf_variable.__setattr__(self,attr,value)
scipy.io.netcdf_variable.__setitem__(self,index,data)
scipy.io.netcdf_variable._apply_missing_value(data,missing_value)
scipy.io.netcdf_variable._default_encoded_fill_value(self)
scipy.io.netcdf_variable._get_encoded_fill_value(self)
scipy.io.netcdf_variable._get_missing_value(self)
scipy.io.netcdf_variable.assignValue(self,value)
scipy.io.netcdf_variable.getValue(self)
scipy.io.netcdf_variable.isrec(self)
scipy.io.netcdf_variable.itemsize(self)
scipy.io.netcdf_variable.shape(self)
scipy.io.netcdf_variable.typecode(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/_fortran.py----------------------------------------
A:scipy.io._fortran.header_dtype->numpy.dtype(header_dtype)
A:scipy.io._fortran.self._fp->open(filename, '%sb' % mode)
A:scipy.io._fortran.b->self._fp.read(n)
A:scipy.io._fortran.items->tuple((np.asarray(item) for item in items))
A:scipy.io._fortran.total_size->sum((item.nbytes for item in items))
A:scipy.io._fortran.nb->numpy.array([total_size], dtype=self._header_dtype)
A:scipy.io._fortran.dtype->kwargs.pop('dtype', None)
A:scipy.io._fortran.first_size->self._read_size(eof_ok=True)
A:scipy.io._fortran.dtypes->tuple((np.dtype(dtype) for dtype in dtypes))
A:scipy.io._fortran.block_size->sum((dtype.itemsize for dtype in dtypes))
A:scipy.io._fortran.(num_blocks, remainder)->divmod(first_size, block_size)
A:scipy.io._fortran.r->numpy.fromfile(self._fp, dtype=dtype, count=num_blocks)
A:scipy.io._fortran.second_size->self._read_size()
scipy.io.FortranEOFError(TypeError,OSError)
scipy.io.FortranFile(self,filename,mode='r',header_dtype=np.uint32)
scipy.io.FortranFile.__enter__(self)
scipy.io.FortranFile.__exit__(self,type,value,tb)
scipy.io.FortranFile._read_size(self,eof_ok=False)
scipy.io.FortranFile.close(self)
scipy.io.FortranFile.read_ints(self,dtype='i4')
scipy.io.FortranFile.read_reals(self,dtype='f8')
scipy.io.FortranFile.read_record(self,*dtypes,**kwargs)
scipy.io.FortranFile.write_record(self,*items)
scipy.io.FortranFormattingError(TypeError,OSError)
scipy.io._fortran.FortranEOFError(TypeError,OSError)
scipy.io._fortran.FortranFile(self,filename,mode='r',header_dtype=np.uint32)
scipy.io._fortran.FortranFile.__enter__(self)
scipy.io._fortran.FortranFile.__exit__(self,type,value,tb)
scipy.io._fortran.FortranFile.__init__(self,filename,mode='r',header_dtype=np.uint32)
scipy.io._fortran.FortranFile._read_size(self,eof_ok=False)
scipy.io._fortran.FortranFile.close(self)
scipy.io._fortran.FortranFile.read_ints(self,dtype='i4')
scipy.io._fortran.FortranFile.read_reals(self,dtype='f8')
scipy.io._fortran.FortranFile.read_record(self,*dtypes,**kwargs)
scipy.io._fortran.FortranFile.write_record(self,*items)
scipy.io._fortran.FortranFormattingError(TypeError,OSError)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/harwell_boeing.py----------------------------------------
scipy.io.harwell_boeing.__dir__()
scipy.io.harwell_boeing.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/_mmio.py----------------------------------------
A:scipy.io._mmio.(stream, close_it)->self._open(target, 'wb')
A:scipy.io._mmio.line->open(filespec, mode).readline()
A:scipy.io._mmio.split_line->open(filespec, mode).readline().split()
A:scipy.io._mmio.(rows, cols)->map(int, split_line)
A:scipy.io._mmio.(rows, cols, entries)->map(int, split_line)
A:scipy.io._mmio.filespec->os.fspath(filespec)
A:scipy.io._mmio.stream->open(filespec, mode)
A:scipy.io._mmio.a->a.astype('D').astype('D')
A:scipy.io._mmio.(row, col)->a.astype('D').astype('D').nonzero()
A:scipy.io._mmio.(rows, cols, entries, format, field, symmetry)->self.__class__.info(stream)
A:scipy.io._mmio.dtype->self.DTYPES_BY_FIELD.get(field, None)
A:scipy.io._mmio.aij->float(l[2])
A:scipy.io._mmio.a[j, i]->conj(aij)
A:scipy.io._mmio.l->open(filespec, mode).readline().split()
A:scipy.io._mmio.(i, j)->map(int, l[:2])
A:scipy.io._mmio.I->concatenate((I, od_J))
A:scipy.io._mmio.J->concatenate((J, od_I))
A:scipy.io._mmio.V->concatenate((V, od_V))
A:scipy.io._mmio.(I[entry_number], J[entry_number])->map(int, l[:2])
A:scipy.io._mmio.V[entry_number]->float(l[2])
A:scipy.io._mmio.od_V->od_V.conjugate().conjugate()
A:scipy.io._mmio.symmetry->self._get_symmetry(a)
A:scipy.io._mmio.template->self._field_template(field, precision - 1)
A:scipy.io._mmio.coo->coo_matrix((coo.data[lower_triangle_mask], (coo.row[lower_triangle_mask], coo.col[lower_triangle_mask])), shape=coo.shape)
A:scipy.io._mmio.bad_cls->tuple(bad_cls)
scipy.io._mmio.MMFile(self,**kwargs)
scipy.io._mmio.MMFile.__init__(self,**kwargs)
scipy.io._mmio.MMFile._field_template(field,precision)
scipy.io._mmio.MMFile._get_symmetry(a)
scipy.io._mmio.MMFile._init_attrs(self,**kwargs)
scipy.io._mmio.MMFile._open(filespec,mode='rb')
scipy.io._mmio.MMFile._parse_body(self,stream)
scipy.io._mmio.MMFile._parse_header(self,stream)
scipy.io._mmio.MMFile._validate_field(self,field)
scipy.io._mmio.MMFile._validate_format(self,format)
scipy.io._mmio.MMFile._validate_symmetry(self,symmetry)
scipy.io._mmio.MMFile._write(self,stream,a,comment='',field=None,precision=None,symmetry=None)
scipy.io._mmio.MMFile.cols(self)
scipy.io._mmio.MMFile.entries(self)
scipy.io._mmio.MMFile.field(self)
scipy.io._mmio.MMFile.format(self)
scipy.io._mmio.MMFile.has_symmetry(self)
scipy.io._mmio.MMFile.info(self,source)
scipy.io._mmio.MMFile.read(self,source)
scipy.io._mmio.MMFile.reader()
scipy.io._mmio.MMFile.rows(self)
scipy.io._mmio.MMFile.symmetry(self)
scipy.io._mmio.MMFile.write(self,target,a,comment='',field=None,precision=None,symmetry=None)
scipy.io._mmio.MMFile.writer()
scipy.io._mmio._is_fromfile_compatible(stream)
scipy.io._mmio.asstr(s)
scipy.io._mmio.mminfo(source)
scipy.io._mmio.mmread(source)
scipy.io._mmio.mmwrite(target,a,comment='',field=None,precision=None,symmetry=None)
scipy.io.mminfo(source)
scipy.io.mmread(source)
scipy.io.mmwrite(target,a,comment='',field=None,precision=None,symmetry=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/__init__.py----------------------------------------
A:scipy.io.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/mmio.py----------------------------------------
scipy.io.mmio.__dir__()
scipy.io.mmio.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/_idl.py----------------------------------------
A:scipy.io._idl.pos->open(file_name, 'rb').tell()
A:scipy.io._idl.length->_read_long(f)
A:scipy.io._idl.chars->_read_bytes(f, length).decode('latin1')
A:scipy.io._idl.string_data->_read_bytes(f, length)
A:scipy.io._idl.real->_read_float64(f)
A:scipy.io._idl.imag->_read_float64(f)
A:scipy.io._idl.structure->structure.reshape(dims).reshape(dims)
A:scipy.io._idl.structure[col['name']][i]->_read_data(f, dtype)
A:scipy.io._idl.nbytes->_read_int32(f)
A:scipy.io._idl.array->array.reshape(dims).reshape(dims)
A:scipy.io._idl.data->_read_data(f, dtype)
A:scipy.io._idl.nextrec->_read_uint32(f)
A:scipy.io._idl.record['varname']->_read_string(f)
A:scipy.io._idl.record['heap_index']->_read_long(f)
A:scipy.io._idl.rectypedesc->_read_typedesc(f)
A:scipy.io._idl.varstart->_read_long(f)
A:scipy.io._idl.record['data']->_read_data(f, dtype)
A:scipy.io._idl.record['date']->_read_string(f)
A:scipy.io._idl.record['user']->_read_string(f)
A:scipy.io._idl.record['host']->_read_string(f)
A:scipy.io._idl.record['format']->_read_long(f)
A:scipy.io._idl.record['arch']->_read_string(f)
A:scipy.io._idl.record['os']->_read_string(f)
A:scipy.io._idl.record['release']->_read_string(f)
A:scipy.io._idl.record['author']->_read_string(f)
A:scipy.io._idl.record['title']->_read_string(f)
A:scipy.io._idl.record['idcode']->_read_string(f)
A:scipy.io._idl.record['notice']->_read_string(f)
A:scipy.io._idl.record['description']->_read_string_data(f)
A:scipy.io._idl.record['nvalues']->_read_long(f)
A:scipy.io._idl.record['nvars']->_read_long(f)
A:scipy.io._idl.record['name']->_read_string(f)
A:scipy.io._idl.typedesc['array_desc']->_read_arraydesc(f)
A:scipy.io._idl.typedesc['struct_desc']->_read_structdesc(f)
A:scipy.io._idl.arraydesc['nbytes']->_read_uint64(f)
A:scipy.io._idl.arraydesc['nelements']->_read_uint64(f)
A:scipy.io._idl.arraydesc['ndims']->_read_long(f)
A:scipy.io._idl.arraydesc['nmax']->_read_long(f)
A:scipy.io._idl.v->_read_long(f)
A:scipy.io._idl.structstart->_read_long(f)
A:scipy.io._idl.structdesc['name']->_read_string(f)
A:scipy.io._idl.predef->_read_long(f)
A:scipy.io._idl.structdesc['ntags']->_read_long(f)
A:scipy.io._idl.structdesc['nbytes']->_read_long(f)
A:scipy.io._idl.tag['name']->_read_string(f)
A:scipy.io._idl.structdesc['classname']->_read_string(f)
A:scipy.io._idl.structdesc['nsupclasses']->_read_long(f)
A:scipy.io._idl.tagdesc['offset']->_read_uint64(f)
A:scipy.io._idl.tagdesc['typecode']->_read_long(f)
A:scipy.io._idl.tagflags->_read_long(f)
A:scipy.io._idl.(replace, new)->_replace_heap(r['data'], heap)
A:scipy.io._idl.variables->AttrDict()
A:scipy.io._idl.f->open(file_name, 'rb')
A:scipy.io._idl.signature->_read_bytes(f, 2)
A:scipy.io._idl.recfmt->_read_bytes(f, 2)
A:scipy.io._idl.fout->tempfile.NamedTemporaryFile(suffix='.sav')
A:scipy.io._idl.rectype->_read_long(f)
A:scipy.io._idl.unknown->open(file_name, 'rb').read(4)
A:scipy.io._idl.modval->numpy.int64(2 ** 32)
A:scipy.io._idl.rec_string->zlib.decompress(f.read(nextrec - pos))
A:scipy.io._idl.r->_read_record(f)
scipy.io._idl.AttrDict(self,init={})
scipy.io._idl.AttrDict.__getattr__(self,name)
scipy.io._idl.AttrDict.__getitem__(self,name)
scipy.io._idl.AttrDict.__init__(self,init={})
scipy.io._idl.AttrDict.__setitem__(self,key,value)
scipy.io._idl.ObjectPointer(Pointer)
scipy.io._idl.Pointer(self,index)
scipy.io._idl.Pointer.__init__(self,index)
scipy.io._idl._align_32(f)
scipy.io._idl._read_array(f,typecode,array_desc)
scipy.io._idl._read_arraydesc(f)
scipy.io._idl._read_byte(f)
scipy.io._idl._read_bytes(f,n)
scipy.io._idl._read_data(f,dtype)
scipy.io._idl._read_float32(f)
scipy.io._idl._read_float64(f)
scipy.io._idl._read_int16(f)
scipy.io._idl._read_int32(f)
scipy.io._idl._read_int64(f)
scipy.io._idl._read_long(f)
scipy.io._idl._read_record(f)
scipy.io._idl._read_string(f)
scipy.io._idl._read_string_data(f)
scipy.io._idl._read_structdesc(f)
scipy.io._idl._read_structure(f,array_desc,struct_desc)
scipy.io._idl._read_tagdesc(f)
scipy.io._idl._read_typedesc(f)
scipy.io._idl._read_uint16(f)
scipy.io._idl._read_uint32(f)
scipy.io._idl._read_uint64(f)
scipy.io._idl._replace_heap(variable,heap)
scipy.io._idl._skip_bytes(f,n)
scipy.io._idl.readsav(file_name,idict=None,python_dict=False,uncompressed_file_name=None,verbose=False)
scipy.io.readsav(file_name,idict=None,python_dict=False,uncompressed_file_name=None,verbose=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/tests/test_mmio.py----------------------------------------
A:scipy.io.tests.test_mmio.self.tmpdir->mkdtemp()
A:scipy.io.tests.test_mmio.self.fn->os.path.join(self.tmpdir, 'testfile.mtx')
A:scipy.io.tests.test_mmio.b->mmread(self.fn).toarray()
A:scipy.io.tests.test_mmio.a->mmread(self.fn).toarray().toarray()
A:scipy.io.tests.test_mmio.text->textwrap.dedent(s).encode('ascii')
A:scipy.io.tests.test_mmio.p->numpy.zeros_like(a.toarray())
A:scipy.io.tests.test_mmio.f->open(self.fn, 'w')
A:scipy.io.tests.test_mmio.I->array([0, 0, 1, 2, 3, 3, 3, 4])
A:scipy.io.tests.test_mmio.J->array([0, 3, 1, 2, 1, 3, 4, 4])
A:scipy.io.tests.test_mmio.V->array([1.0 + 3j, 6.0 + 2j, 10.5 + 0.9j, 0.015 + -4.4j, 250.5 + 0j, -280.0 + 5j, 33.32 + 6.4j, 12.0 + 0.8j])
A:scipy.io.tests.test_mmio.f_out->gzip.open(fn_gzip, 'wb')
A:scipy.io.tests.test_mmio.expected->mat.toarray()
A:scipy.io.tests.test_mmio.result->mmread(fname).toarray()
A:scipy.io.tests.test_mmio.test_precisions->range(1, 10)
A:scipy.io.tests.test_mmio.A->scipy.io.mmread(self.fn)
scipy.io.tests.test_mmio.TestMMIOArray
scipy.io.tests.test_mmio.TestMMIOArray.check(self,a,info)
scipy.io.tests.test_mmio.TestMMIOArray.check_exact(self,a,info)
scipy.io.tests.test_mmio.TestMMIOArray.setup_method(self)
scipy.io.tests.test_mmio.TestMMIOArray.teardown_method(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_32bit_integer(self,typeval,dtype)
scipy.io.tests.test_mmio.TestMMIOArray.test_64bit_integer(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_64bit_unsigned_integer(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_bad_number_of_array_header_fields(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_gh13634_non_skew_symmetric_float(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_gh13634_non_skew_symmetric_int(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_random_rectangular_float(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_random_symmetric_float(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_simple_complex(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_simple_float(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_simple_hermitian_complex(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_simple_integer(self,typeval,dtype)
scipy.io.tests.test_mmio.TestMMIOArray.test_simple_lower_triangle_integer(self,typeval,dtype)
scipy.io.tests.test_mmio.TestMMIOArray.test_simple_rectangular_float(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_simple_rectangular_integer(self,typeval,dtype)
scipy.io.tests.test_mmio.TestMMIOArray.test_simple_skew_symmetric_float(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_simple_skew_symmetric_integer(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_simple_symmetric_integer(self,typeval,dtype)
scipy.io.tests.test_mmio.TestMMIOArray.test_simple_upper_triangle_integer(self,typeval,dtype)
scipy.io.tests.test_mmio.TestMMIOCoordinate
scipy.io.tests.test_mmio.TestMMIOCoordinate.check_read(self,example,a,info)
scipy.io.tests.test_mmio.TestMMIOCoordinate.setup_method(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.teardown_method(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_bad_number_of_coordinate_header_fields(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_bzip2_py3(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_complex_write_read(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_empty_write_read(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_gzip_py3(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_precision(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_read_empty_lines(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_read_general(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_read_hermitian(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_read_skew(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_read_symmetric(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_read_symmetric_pattern(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_real_write_read(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_sparse_formats(self,tmp_path)
scipy.io.tests.test_mmio.TestMMIOReadLargeIntegers
scipy.io.tests.test_mmio.TestMMIOReadLargeIntegers.check_read(self,example,a,info,dense,over32,over64)
scipy.io.tests.test_mmio.TestMMIOReadLargeIntegers.setup_method(self)
scipy.io.tests.test_mmio.TestMMIOReadLargeIntegers.teardown_method(self)
scipy.io.tests.test_mmio.TestMMIOReadLargeIntegers.test_read_32bit_integer_dense(self)
scipy.io.tests.test_mmio.TestMMIOReadLargeIntegers.test_read_32bit_integer_sparse(self)
scipy.io.tests.test_mmio.TestMMIOReadLargeIntegers.test_read_64bit_integer_dense(self)
scipy.io.tests.test_mmio.TestMMIOReadLargeIntegers.test_read_64bit_integer_sparse_general(self)
scipy.io.tests.test_mmio.TestMMIOReadLargeIntegers.test_read_64bit_integer_sparse_skew(self)
scipy.io.tests.test_mmio.TestMMIOReadLargeIntegers.test_read_64bit_integer_sparse_symmetric(self)
scipy.io.tests.test_mmio.TestMMIOReadLargeIntegers.test_read_over64bit_integer_dense(self)
scipy.io.tests.test_mmio.TestMMIOReadLargeIntegers.test_read_over64bit_integer_sparse(self)
scipy.io.tests.test_mmio.TestMMIOSparseCSR(TestMMIOArray)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.check(self,a,info)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.check_exact(self,a,info)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.setup_method(self)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.teardown_method(self)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.test_32bit_integer(self)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.test_32bit_unsigned_integer(self)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.test_64bit_integer(self)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.test_64bit_unsigned_integer(self)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.test_gh13634_non_skew_symmetric_float(self)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.test_gh13634_non_skew_symmetric_int(self)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.test_random_rectangular_float(self)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.test_random_symmetric_float(self)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.test_simple_complex(self)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.test_simple_float(self)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.test_simple_hermitian_complex(self)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.test_simple_integer(self,typeval,dtype)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.test_simple_lower_triangle_integer(self,typeval,dtype)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.test_simple_pattern(self)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.test_simple_rectangular_float(self)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.test_simple_rectangular_integer(self,typeval,dtype)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.test_simple_skew_symmetric_float(self)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.test_simple_skew_symmetric_integer(self)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.test_simple_symmetric_integer(self,typeval,dtype)
scipy.io.tests.test_mmio.TestMMIOSparseCSR.test_simple_upper_triangle_integer(self,typeval,dtype)
scipy.io.tests.test_mmio.test_gh11389()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/tests/test_netcdf.py----------------------------------------
A:scipy.io.tests.test_netcdf.TEST_DATA_PATH->pjoin(dirname(__file__), 'data')
A:scipy.io.tests.test_netcdf.f->netcdf_file(newfname, 'w', maskandscale=True)
A:scipy.io.tests.test_netcdf.time->netcdf_file(newfname, 'w', maskandscale=True).createVariable('time', VARTYPE_EG, ('time',))
A:scipy.io.tests.test_netcdf.time[:]->numpy.arange(N_EG_ELS)
A:scipy.io.tests.test_netcdf.mask->numpy.ma.getmaskarray(arr)
A:scipy.io.tests.test_netcdf.cwd->os.getcwd()
A:scipy.io.tests.test_netcdf.tmpdir->tempfile.mkdtemp()
A:scipy.io.tests.test_netcdf.var->netcdf_file(newfname, 'w', maskandscale=True).createVariable('var', 'S1', ('x',))
A:scipy.io.tests.test_netcdf.eg_sio1->BytesIO()
A:scipy.io.tests.test_netcdf.str_val->BytesIO(str_val).getvalue()
A:scipy.io.tests.test_netcdf.eg_sio2->BytesIO(str_val)
A:scipy.io.tests.test_netcdf.eg_sio3->BytesIO(str_val)
A:scipy.io.tests.test_netcdf.eg_sio_64->BytesIO(str_val)
A:scipy.io.tests.test_netcdf.raw_file->BytesIO()
A:scipy.io.tests.test_netcdf.actual->BytesIO().getvalue()
A:scipy.io.tests.test_netcdf.filename->pjoin(TEST_DATA_PATH, 'example_1.nc')
A:scipy.io.tests.test_netcdf.stream->BytesIO()
A:scipy.io.tests.test_netcdf.contents->BytesIO().getvalue()
A:scipy.io.tests.test_netcdf.x->netcdf_file(newfname, 'w', maskandscale=True).createVariable('x', 'd', ('x',))
A:scipy.io.tests.test_netcdf.v->netcdf_file(newfname, 'w', maskandscale=True).createVariable('zerodim', 'i2', [])
A:scipy.io.tests.test_netcdf.len_single->len(stream.getvalue())
A:scipy.io.tests.test_netcdf.len_double->len(stream.getvalue())
A:scipy.io.tests.test_netcdf.io->BytesIO()
A:scipy.io.tests.test_netcdf.float_var->netcdf_file(newfname, 'w', maskandscale=True).createVariable('float_var', 'f', ('float_var',))
A:scipy.io.tests.test_netcdf.x[:]->numpy.array(range(dataSize))
A:scipy.io.tests.test_netcdf.y->netcdf_file(newfname, 'w', maskandscale=True).createVariable('y', 'd', ('y',))
A:scipy.io.tests.test_netcdf.y[:]->numpy.array(range(dataSize))
A:scipy.io.tests.test_netcdf.f.variables['time'].data->numpy.append(f.variables['time'].data, i)
A:scipy.io.tests.test_netcdf.f.variables['testData'][i, :, :]->numpy.full((dataSize, dataSize), i)
A:scipy.io.tests.test_netcdf.t->numpy.linspace(20, 30, 15)
A:scipy.io.tests.test_netcdf.tm->numpy.ma.masked_greater(t, 99)
A:scipy.io.tests.test_netcdf.fname->pjoin(TEST_DATA_PATH, 'example_3_maskedvals.nc')
A:scipy.io.tests.test_netcdf.found->Temp[:].compressed()
A:scipy.io.tests.test_netcdf.expected->numpy.round(tm.compressed(), 2)
A:scipy.io.tests.test_netcdf.temp->netcdf_file(newfname, 'w', maskandscale=True).createVariable('Temperature', 'i', ('Temperature',))
scipy.io.tests.test_netcdf.assert_mask_matches(arr,expected_mask)
scipy.io.tests.test_netcdf.check_simple(ncfileobj)
scipy.io.tests.test_netcdf.make_simple(*args,**kwargs)
scipy.io.tests.test_netcdf.test_append_recordDimension()
scipy.io.tests.test_netcdf.test_appending_issue_gh_8625()
scipy.io.tests.test_netcdf.test_byte_gatts()
scipy.io.tests.test_netcdf.test_bytes()
scipy.io.tests.test_netcdf.test_dtype_specifiers()
scipy.io.tests.test_netcdf.test_encoded_fill_value()
scipy.io.tests.test_netcdf.test_flush_rewind()
scipy.io.tests.test_netcdf.test_itemset_no_segfault_on_readonly()
scipy.io.tests.test_netcdf.test_maskandscale()
scipy.io.tests.test_netcdf.test_mmaps_segfault()
scipy.io.tests.test_netcdf.test_open_append()
scipy.io.tests.test_netcdf.test_read_example_data()
scipy.io.tests.test_netcdf.test_read_with2dVar()
scipy.io.tests.test_netcdf.test_read_withChar()
scipy.io.tests.test_netcdf.test_read_withFillValNaN()
scipy.io.tests.test_netcdf.test_read_withFillValueAndMissingValue()
scipy.io.tests.test_netcdf.test_read_withMaskAndScaleFalse()
scipy.io.tests.test_netcdf.test_read_withMissingValue()
scipy.io.tests.test_netcdf.test_read_withNoFillValue()
scipy.io.tests.test_netcdf.test_read_withValuesNearFillValue()
scipy.io.tests.test_netcdf.test_read_write_files()
scipy.io.tests.test_netcdf.test_read_write_sio()
scipy.io.tests.test_netcdf.test_ticket_1720()
scipy.io.tests.test_netcdf.test_write_invalid_dtype()
scipy.io.tests.test_netcdf.test_zero_dimensional_var()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/tests/test_wavfile.py----------------------------------------
A:scipy.io.tests.test_wavfile.(rate, data)->scipy.io.wavfile.read(fp, mmap=mmap)
A:scipy.io.tests.test_wavfile.(rate1, data1)->scipy.io.wavfile.read(datafile(rifx), mmap=False)
A:scipy.io.tests.test_wavfile.(rate2, data2)->scipy.io.wavfile.read(tmpfile, mmap=mmap)
A:scipy.io.tests.test_wavfile.dtype->numpy.dtype(dt_str)
A:scipy.io.tests.test_wavfile.tmpfile->BytesIO()
A:scipy.io.tests.test_wavfile.data->(data * 128).astype(dtype)
scipy.io.tests.test_wavfile.datafile(fn)
scipy.io.tests.test_wavfile.test_12_bit_even_size()
scipy.io.tests.test_wavfile.test_20_bit_extra_data()
scipy.io.tests.test_wavfile.test_24_bit_odd_size_with_pad()
scipy.io.tests.test_wavfile.test_36_bit_odd_size()
scipy.io.tests.test_wavfile.test_45_bit_even_size()
scipy.io.tests.test_wavfile.test_53_bit_odd_size()
scipy.io.tests.test_wavfile.test_5_bit_odd_size_no_pad()
scipy.io.tests.test_wavfile.test_64_bit_even_size()
scipy.io.tests.test_wavfile.test_read_1()
scipy.io.tests.test_wavfile.test_read_2()
scipy.io.tests.test_wavfile.test_read_3()
scipy.io.tests.test_wavfile.test_read_4()
scipy.io.tests.test_wavfile.test_read_5()
scipy.io.tests.test_wavfile.test_read_early_eof()
scipy.io.tests.test_wavfile.test_read_early_eof_with_data()
scipy.io.tests.test_wavfile.test_read_incomplete_chunk()
scipy.io.tests.test_wavfile.test_read_inconsistent_header()
scipy.io.tests.test_wavfile.test_read_unknown_filetype_fail()
scipy.io.tests.test_wavfile.test_read_unknown_riff_form_type()
scipy.io.tests.test_wavfile.test_read_unknown_wave_format()
scipy.io.tests.test_wavfile.test_rifx()
scipy.io.tests.test_wavfile.test_unsupported_mmap()
scipy.io.tests.test_wavfile.test_write_roundtrip(realfile,mmap,rate,channels,dt_str,tmpdir)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/tests/test_paths.py----------------------------------------
A:scipy.io.tests.test_paths.data->scipy.sparse.csr_matrix(scipy.sparse.eye(3))
A:scipy.io.tests.test_paths.mat_contents->scipy.io.loadmat(path)
A:scipy.io.tests.test_paths.contents->scipy.io.whosmat(path)
A:scipy.io.tests.test_paths.data_new->scipy.io.mmread(path)
A:scipy.io.tests.test_paths.(rate, data)->scipy.io.wavfile.read(str(input_path))
scipy.io.tests.test_paths.TestPaths
scipy.io.tests.test_paths.TestPaths.test_hb_read(self)
scipy.io.tests.test_paths.TestPaths.test_hb_write(self)
scipy.io.tests.test_paths.TestPaths.test_loadmat(self)
scipy.io.tests.test_paths.TestPaths.test_mmio_read(self)
scipy.io.tests.test_paths.TestPaths.test_mmio_write(self)
scipy.io.tests.test_paths.TestPaths.test_netcdf_file(self)
scipy.io.tests.test_paths.TestPaths.test_readsav(self)
scipy.io.tests.test_paths.TestPaths.test_savemat(self)
scipy.io.tests.test_paths.TestPaths.test_wavfile_read(self)
scipy.io.tests.test_paths.TestPaths.test_wavfile_write(self)
scipy.io.tests.test_paths.TestPaths.test_whosmat(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/tests/test_idl.py----------------------------------------
A:scipy.io.tests.test_idl.DATA_PATH->os.path.join(path.dirname(__file__), 'data')
A:scipy.io.tests.test_idl.array->numpy.empty(len(args), dtype=object)
A:scipy.io.tests.test_idl.vect_id->numpy.vectorize(id)
A:scipy.io.tests.test_idl.original_id->id(custom_dict)
A:scipy.io.tests.test_idl.s->readsav(path.join(DATA_PATH, 'invalid_pointer.sav'), verbose=False)
A:scipy.io.tests.test_idl.s_expect->numpy.repeat(np.float32(4.0), 24).reshape(4, 3, 2).astype(np.object_)
A:scipy.io.tests.test_idl.pth->os.path.join(DATA_PATH, 'struct_pointer_arrays_replicated_3d.sav')
A:scipy.io.tests.test_idl.d->scipy.io._idl.AttrDict({'one': 1})
scipy.io.tests.test_idl.TestArrayDimensions
scipy.io.tests.test_idl.TestArrayDimensions.test_1d(self)
scipy.io.tests.test_idl.TestArrayDimensions.test_2d(self)
scipy.io.tests.test_idl.TestArrayDimensions.test_3d(self)
scipy.io.tests.test_idl.TestArrayDimensions.test_4d(self)
scipy.io.tests.test_idl.TestArrayDimensions.test_5d(self)
scipy.io.tests.test_idl.TestArrayDimensions.test_6d(self)
scipy.io.tests.test_idl.TestArrayDimensions.test_7d(self)
scipy.io.tests.test_idl.TestArrayDimensions.test_8d(self)
scipy.io.tests.test_idl.TestCompressed(TestScalars)
scipy.io.tests.test_idl.TestCompressed.test_compressed(self)
scipy.io.tests.test_idl.TestIdict
scipy.io.tests.test_idl.TestIdict.test_idict(self)
scipy.io.tests.test_idl.TestPointerArray
scipy.io.tests.test_idl.TestPointerArray.test_1d(self)
scipy.io.tests.test_idl.TestPointerArray.test_2d(self)
scipy.io.tests.test_idl.TestPointerArray.test_3d(self)
scipy.io.tests.test_idl.TestPointerArray.test_4d(self)
scipy.io.tests.test_idl.TestPointerArray.test_5d(self)
scipy.io.tests.test_idl.TestPointerArray.test_6d(self)
scipy.io.tests.test_idl.TestPointerArray.test_7d(self)
scipy.io.tests.test_idl.TestPointerArray.test_8d(self)
scipy.io.tests.test_idl.TestPointerStructures
scipy.io.tests.test_idl.TestPointerStructures.test_arrays(self)
scipy.io.tests.test_idl.TestPointerStructures.test_arrays_replicated(self)
scipy.io.tests.test_idl.TestPointerStructures.test_arrays_replicated_3d(self)
scipy.io.tests.test_idl.TestPointerStructures.test_pointers_replicated(self)
scipy.io.tests.test_idl.TestPointerStructures.test_pointers_replicated_3d(self)
scipy.io.tests.test_idl.TestPointerStructures.test_scalars(self)
scipy.io.tests.test_idl.TestPointers
scipy.io.tests.test_idl.TestPointers.test_pointers(self)
scipy.io.tests.test_idl.TestScalars
scipy.io.tests.test_idl.TestScalars.test_byte(self)
scipy.io.tests.test_idl.TestScalars.test_bytes(self)
scipy.io.tests.test_idl.TestScalars.test_complex32(self)
scipy.io.tests.test_idl.TestScalars.test_complex64(self)
scipy.io.tests.test_idl.TestScalars.test_float32(self)
scipy.io.tests.test_idl.TestScalars.test_float64(self)
scipy.io.tests.test_idl.TestScalars.test_heap_pointer(self)
scipy.io.tests.test_idl.TestScalars.test_int16(self)
scipy.io.tests.test_idl.TestScalars.test_int32(self)
scipy.io.tests.test_idl.TestScalars.test_int64(self)
scipy.io.tests.test_idl.TestScalars.test_object_reference(self)
scipy.io.tests.test_idl.TestScalars.test_structure(self)
scipy.io.tests.test_idl.TestScalars.test_uint16(self)
scipy.io.tests.test_idl.TestScalars.test_uint32(self)
scipy.io.tests.test_idl.TestScalars.test_uint64(self)
scipy.io.tests.test_idl.TestStructures
scipy.io.tests.test_idl.TestStructures.test_arrays(self)
scipy.io.tests.test_idl.TestStructures.test_arrays_corrupt_idl80(self)
scipy.io.tests.test_idl.TestStructures.test_arrays_replicated(self)
scipy.io.tests.test_idl.TestStructures.test_arrays_replicated_3d(self)
scipy.io.tests.test_idl.TestStructures.test_inheritance(self)
scipy.io.tests.test_idl.TestStructures.test_scalars(self)
scipy.io.tests.test_idl.TestStructures.test_scalars_replicated(self)
scipy.io.tests.test_idl.TestStructures.test_scalars_replicated_3d(self)
scipy.io.tests.test_idl.TestTags
scipy.io.tests.test_idl.TestTags.test_description(self)
scipy.io.tests.test_idl.assert_array_identical(a,b)
scipy.io.tests.test_idl.assert_identical(a,b)
scipy.io.tests.test_idl.object_array(*args)
scipy.io.tests.test_idl.test_attrdict()
scipy.io.tests.test_idl.test_invalid_pointer()
scipy.io.tests.test_idl.test_null_pointer()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/tests/test_fortran.py----------------------------------------
A:scipy.io.tests.test_fortran.DATA_PATH->os.path.join(path.dirname(__file__), 'data')
A:scipy.io.tests.test_fortran.m->re.search('fortran-([^-]+)-(\\d+)x(\\d+)x(\\d+).dat', filename, re.I)
A:scipy.io.tests.test_fortran.dtype->re.search('fortran-([^-]+)-(\\d+)x(\\d+)x(\\d+).dat', filename, re.I).group(1).replace('s', '<')
A:scipy.io.tests.test_fortran.f->FortranFile(testFile, 'w', '<u4')
A:scipy.io.tests.test_fortran.data->numpy.arange(np.prod(dims)).reshape(dims).astype(dtype)
A:scipy.io.tests.test_fortran.expected->numpy.arange(np.prod(dims)).reshape(dims).astype(dtype)
A:scipy.io.tests.test_fortran.filename->os.path.join(str(tmpdir), 'scratch')
A:scipy.io.tests.test_fortran.record->FortranFile(testFile, 'w', '<u4').read_record('(3,3)<f8', '2<i4')
A:scipy.io.tests.test_fortran.tmpdir->tempfile.mkdtemp()
A:scipy.io.tests.test_fortran.testFile->os.path.join(tmpdir, path.basename(filename))
A:scipy.io.tests.test_fortran.originalfile->open(filename, 'rb')
A:scipy.io.tests.test_fortran.newfile->open(testFile, 'rb')
A:scipy.io.tests.test_fortran.ax->numpy.arange(3 * 3).reshape(3, 3).astype(np.double)
A:scipy.io.tests.test_fortran.bx->numpy.array([-1, -2], dtype=np.int32)
A:scipy.io.tests.test_fortran.tf->os.path.join(str(tmpdir), 'test.dat')
A:scipy.io.tests.test_fortran.b->numpy.random.randn(k).astype(np.intc)
A:scipy.io.tests.test_fortran.a->numpy.zeros(q, dtype=dt)
A:scipy.io.tests.test_fortran.a2->scipy.io._test_fortran.read_unformatted_int(m, n, k, filename)
A:scipy.io.tests.test_fortran.(a2, b2)->scipy.io._test_fortran.read_unformatted_mixed(m, n, k, filename)
A:scipy.io.tests.test_fortran.(a3, b3)->FortranFile(testFile, 'w', '<u4').read_record('(3,5)f8', '2i4')
A:scipy.io.tests.test_fortran.dt->numpy.dtype([('field', np.float64, (n, m))])
scipy.io.tests.test_fortran.test_fortran_bogus_size(tmpdir)
scipy.io.tests.test_fortran.test_fortran_eof_broken_record(tmpdir)
scipy.io.tests.test_fortran.test_fortran_eof_broken_size(tmpdir)
scipy.io.tests.test_fortran.test_fortran_eof_multidimensional(tmpdir)
scipy.io.tests.test_fortran.test_fortran_eof_ok(tmpdir)
scipy.io.tests.test_fortran.test_fortran_roundtrip(tmpdir)
scipy.io.tests.test_fortran.test_fortranfile_read_mixed_record()
scipy.io.tests.test_fortran.test_fortranfile_write_mixed_record(tmpdir)
scipy.io.tests.test_fortran.test_fortranfiles_mixed_record()
scipy.io.tests.test_fortran.test_fortranfiles_read()
scipy.io.tests.test_fortran.test_fortranfiles_write()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/_harwell_boeing/hb.py----------------------------------------
A:scipy.io._harwell_boeing.hb.m->m.tocsc(copy=False).tocsc(copy=False)
A:scipy.io._harwell_boeing.hb.pointer_fmt->_fortran_format_parser.IntFormat.from_number(np.max(pointer + 1))
A:scipy.io._harwell_boeing.hb.indices_fmt->_fortran_format_parser.IntFormat.from_number(np.max(indices + 1))
A:scipy.io._harwell_boeing.hb.values_fmt->_fortran_format_parser.IntFormat.from_number(-np.max(np.abs(values)))
A:scipy.io._harwell_boeing.hb.mxtype->HBMatrixType.from_fortran(mxtype_s)
A:scipy.io._harwell_boeing.hb.pointer_nlines->_expect_int(line[14:28])
A:scipy.io._harwell_boeing.hb.indices_nlines->_expect_int(line[28:42])
A:scipy.io._harwell_boeing.hb.values_nlines->_expect_int(line[42:56])
A:scipy.io._harwell_boeing.hb.line->fid.readline().strip('\n')
A:scipy.io._harwell_boeing.hb.total_nlines->_expect_int(line[:14])
A:scipy.io._harwell_boeing.hb.rhs_nlines->_expect_int(rhs_nlines)
A:scipy.io._harwell_boeing.hb.mxtype_s->line[:3].upper()
A:scipy.io._harwell_boeing.hb.nrows->_expect_int(line[14:28])
A:scipy.io._harwell_boeing.hb.ncols->_expect_int(line[28:42])
A:scipy.io._harwell_boeing.hb.nnon_zeros->_expect_int(line[42:56])
A:scipy.io._harwell_boeing.hb.nelementals->_expect_int(line[56:70])
A:scipy.io._harwell_boeing.hb.ct->fid.readline().strip('\n').split()
A:scipy.io._harwell_boeing.hb.parser->FortranFormatParser()
A:scipy.io._harwell_boeing.hb.pointer_format->FortranFormatParser().parse(pointer_format_str)
A:scipy.io._harwell_boeing.hb.indices_format->FortranFormatParser().parse(indices_format_str)
A:scipy.io._harwell_boeing.hb.values_format->FortranFormatParser().parse(values_format_str)
A:scipy.io._harwell_boeing.hb.self.pointer_nbytes_full->_nbytes_full(pointer_format, pointer_nlines)
A:scipy.io._harwell_boeing.hb.self.indices_nbytes_full->_nbytes_full(indices_format, indices_nlines)
A:scipy.io._harwell_boeing.hb.self.values_nbytes_full->_nbytes_full(values_format, values_nlines)
A:scipy.io._harwell_boeing.hb.ptr_string->''.join([content.read(header.pointer_nbytes_full), content.readline()])
A:scipy.io._harwell_boeing.hb.ptr->numpy.fromstring(ptr_string, dtype=int, sep=' ')
A:scipy.io._harwell_boeing.hb.ind_string->''.join([content.read(header.indices_nbytes_full), content.readline()])
A:scipy.io._harwell_boeing.hb.ind->numpy.fromstring(ind_string, dtype=int, sep=' ')
A:scipy.io._harwell_boeing.hb.val_string->''.join([content.read(header.values_nbytes_full), content.readline()])
A:scipy.io._harwell_boeing.hb.val->numpy.fromstring(val_string, dtype=header.values_dtype, sep=' ')
A:scipy.io._harwell_boeing.hb._f2q_type->dict([(j, i) for (i, j) in _q2f_type.items()])
A:scipy.io._harwell_boeing.hb._f2q_structure->dict([(j, i) for (i, j) in _q2f_structure.items()])
A:scipy.io._harwell_boeing.hb._f2q_storage->dict([(j, i) for (i, j) in _q2f_storage.items()])
A:scipy.io._harwell_boeing.hb.self._hb_info->HBInfo.from_file(file)
A:scipy.io._harwell_boeing.hb.hb->HBFile(fid, hb_info)
A:scipy.io._harwell_boeing.hb.hb_info->HBInfo.from_data(m)
scipy.io._harwell_boeing.HBFile(self,file,hb_info=None)
scipy.io._harwell_boeing.HBFile.key(self)
scipy.io._harwell_boeing.HBFile.read_matrix(self)
scipy.io._harwell_boeing.HBFile.storage(self)
scipy.io._harwell_boeing.HBFile.structure(self)
scipy.io._harwell_boeing.HBFile.title(self)
scipy.io._harwell_boeing.HBFile.type(self)
scipy.io._harwell_boeing.HBFile.write_matrix(self,m)
scipy.io._harwell_boeing.HBInfo(self,title,key,total_nlines,pointer_nlines,indices_nlines,values_nlines,mxtype,nrows,ncols,nnon_zeros,pointer_format_str,indices_format_str,values_format_str,right_hand_sides_nlines=0,nelementals=0)
scipy.io._harwell_boeing.HBInfo.dump(self)
scipy.io._harwell_boeing.HBInfo.from_data(cls,m,title='Defaulttitle',key='0',mxtype=None,fmt=None)
scipy.io._harwell_boeing.HBInfo.from_file(cls,fid)
scipy.io._harwell_boeing.HBMatrixType(self,value_type,structure,storage='assembled')
scipy.io._harwell_boeing.HBMatrixType.__repr__(self)
scipy.io._harwell_boeing.HBMatrixType.fortran_format(self)
scipy.io._harwell_boeing.HBMatrixType.from_fortran(cls,fmt)
scipy.io._harwell_boeing.MalformedHeader(Exception)
scipy.io._harwell_boeing.hb.HBFile(self,file,hb_info=None)
scipy.io._harwell_boeing.hb.HBFile.__init__(self,file,hb_info=None)
scipy.io._harwell_boeing.hb.HBFile.key(self)
scipy.io._harwell_boeing.hb.HBFile.read_matrix(self)
scipy.io._harwell_boeing.hb.HBFile.storage(self)
scipy.io._harwell_boeing.hb.HBFile.structure(self)
scipy.io._harwell_boeing.hb.HBFile.title(self)
scipy.io._harwell_boeing.hb.HBFile.type(self)
scipy.io._harwell_boeing.hb.HBFile.write_matrix(self,m)
scipy.io._harwell_boeing.hb.HBInfo(self,title,key,total_nlines,pointer_nlines,indices_nlines,values_nlines,mxtype,nrows,ncols,nnon_zeros,pointer_format_str,indices_format_str,values_format_str,right_hand_sides_nlines=0,nelementals=0)
scipy.io._harwell_boeing.hb.HBInfo.__init__(self,title,key,total_nlines,pointer_nlines,indices_nlines,values_nlines,mxtype,nrows,ncols,nnon_zeros,pointer_format_str,indices_format_str,values_format_str,right_hand_sides_nlines=0,nelementals=0)
scipy.io._harwell_boeing.hb.HBInfo.dump(self)
scipy.io._harwell_boeing.hb.HBInfo.from_data(cls,m,title='Defaulttitle',key='0',mxtype=None,fmt=None)
scipy.io._harwell_boeing.hb.HBInfo.from_file(cls,fid)
scipy.io._harwell_boeing.hb.HBMatrixType(self,value_type,structure,storage='assembled')
scipy.io._harwell_boeing.hb.HBMatrixType.__init__(self,value_type,structure,storage='assembled')
scipy.io._harwell_boeing.hb.HBMatrixType.__repr__(self)
scipy.io._harwell_boeing.hb.HBMatrixType.fortran_format(self)
scipy.io._harwell_boeing.hb.HBMatrixType.from_fortran(cls,fmt)
scipy.io._harwell_boeing.hb.LineOverflow(Warning)
scipy.io._harwell_boeing.hb.MalformedHeader(Exception)
scipy.io._harwell_boeing.hb._expect_int(value,msg=None)
scipy.io._harwell_boeing.hb._nbytes_full(fmt,nlines)
scipy.io._harwell_boeing.hb._read_hb_data(content,header)
scipy.io._harwell_boeing.hb._write_data(m,fid,header)
scipy.io._harwell_boeing.hb.hb_read(path_or_open_file)
scipy.io._harwell_boeing.hb.hb_write(path_or_open_file,m,hb_info=None)
scipy.io.hb_read(path_or_open_file)
scipy.io.hb_write(path_or_open_file,m,hb_info=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/_harwell_boeing/__init__.py----------------------------------------
A:scipy.io._harwell_boeing.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/_harwell_boeing/_fortran_format_parser.py----------------------------------------
A:scipy.io._harwell_boeing._fortran_format_parser.finfo->numpy.finfo(n.dtype)
A:scipy.io._harwell_boeing._fortran_format_parser.n_exp->number_digits(np.max(np.abs([finfo.maxexp, finfo.minexp])))
A:scipy.io._harwell_boeing._fortran_format_parser.repeat->int(tokens.pop(0).value)
A:scipy.io._harwell_boeing._fortran_format_parser.self.tokens->list(TOKENS.keys())
A:scipy.io._harwell_boeing._fortran_format_parser.self.len->len(s)
A:scipy.io._harwell_boeing._fortran_format_parser.m->r.match(self.data, curpos)
A:scipy.io._harwell_boeing._fortran_format_parser.self.curpos->r.match(self.data, curpos).end()
A:scipy.io._harwell_boeing._fortran_format_parser.self.tokenizer->Tokenizer()
A:scipy.io._harwell_boeing._fortran_format_parser.t->self.tokenizer.next_token()
A:scipy.io._harwell_boeing._fortran_format_parser.next->tokens.pop(0)
A:scipy.io._harwell_boeing._fortran_format_parser.width->int(next.value)
A:scipy.io._harwell_boeing._fortran_format_parser.min->int(next.value)
A:scipy.io._harwell_boeing._fortran_format_parser.significand->int(next.value)
scipy.io._harwell_boeing.BadFortranFormat(SyntaxError)
scipy.io._harwell_boeing.ExpFormat(self,width,significand,min=None,repeat=None)
scipy.io._harwell_boeing.ExpFormat.__repr__(self)
scipy.io._harwell_boeing.ExpFormat.fortran_format(self)
scipy.io._harwell_boeing.ExpFormat.from_number(cls,n,min=None)
scipy.io._harwell_boeing.ExpFormat.python_format(self)
scipy.io._harwell_boeing.FortranFormatParser(self)
scipy.io._harwell_boeing.FortranFormatParser._expect(self,token,tp)
scipy.io._harwell_boeing.FortranFormatParser._get_min(self,tokens)
scipy.io._harwell_boeing.FortranFormatParser._next(self,tokens,tp)
scipy.io._harwell_boeing.FortranFormatParser._parse_format(self,tokens)
scipy.io._harwell_boeing.FortranFormatParser.parse(self,s)
scipy.io._harwell_boeing.IntFormat(self,width,min=None,repeat=None)
scipy.io._harwell_boeing.IntFormat.__repr__(self)
scipy.io._harwell_boeing.IntFormat.fortran_format(self)
scipy.io._harwell_boeing.IntFormat.from_number(cls,n,min=None)
scipy.io._harwell_boeing.IntFormat.python_format(self)
scipy.io._harwell_boeing._fortran_format_parser.BadFortranFormat(SyntaxError)
scipy.io._harwell_boeing._fortran_format_parser.ExpFormat(self,width,significand,min=None,repeat=None)
scipy.io._harwell_boeing._fortran_format_parser.ExpFormat.__init__(self,width,significand,min=None,repeat=None)
scipy.io._harwell_boeing._fortran_format_parser.ExpFormat.__repr__(self)
scipy.io._harwell_boeing._fortran_format_parser.ExpFormat.fortran_format(self)
scipy.io._harwell_boeing._fortran_format_parser.ExpFormat.from_number(cls,n,min=None)
scipy.io._harwell_boeing._fortran_format_parser.ExpFormat.python_format(self)
scipy.io._harwell_boeing._fortran_format_parser.FortranFormatParser(self)
scipy.io._harwell_boeing._fortran_format_parser.FortranFormatParser.__init__(self)
scipy.io._harwell_boeing._fortran_format_parser.FortranFormatParser._expect(self,token,tp)
scipy.io._harwell_boeing._fortran_format_parser.FortranFormatParser._get_min(self,tokens)
scipy.io._harwell_boeing._fortran_format_parser.FortranFormatParser._next(self,tokens,tp)
scipy.io._harwell_boeing._fortran_format_parser.FortranFormatParser._parse_format(self,tokens)
scipy.io._harwell_boeing._fortran_format_parser.FortranFormatParser.parse(self,s)
scipy.io._harwell_boeing._fortran_format_parser.IntFormat(self,width,min=None,repeat=None)
scipy.io._harwell_boeing._fortran_format_parser.IntFormat.__init__(self,width,min=None,repeat=None)
scipy.io._harwell_boeing._fortran_format_parser.IntFormat.__repr__(self)
scipy.io._harwell_boeing._fortran_format_parser.IntFormat.fortran_format(self)
scipy.io._harwell_boeing._fortran_format_parser.IntFormat.from_number(cls,n,min=None)
scipy.io._harwell_boeing._fortran_format_parser.IntFormat.python_format(self)
scipy.io._harwell_boeing._fortran_format_parser.Token(self,type,value,pos)
scipy.io._harwell_boeing._fortran_format_parser.Token.__init__(self,type,value,pos)
scipy.io._harwell_boeing._fortran_format_parser.Token.__repr__(self)
scipy.io._harwell_boeing._fortran_format_parser.Token.__str__(self)
scipy.io._harwell_boeing._fortran_format_parser.Tokenizer(self)
scipy.io._harwell_boeing._fortran_format_parser.Tokenizer.__init__(self)
scipy.io._harwell_boeing._fortran_format_parser.Tokenizer.input(self,s)
scipy.io._harwell_boeing._fortran_format_parser.Tokenizer.next_token(self)
scipy.io._harwell_boeing._fortran_format_parser.number_digits(n)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/_harwell_boeing/tests/test_hb.py----------------------------------------
A:scipy.io._harwell_boeing.tests.test_hb.SIMPLE_MATRIX->coo_matrix(((0.297124379969, 0.366236668288, 0.47869621747, 0.649006864799, 0.0661749042483, 0.887037034319, 0.419647859016, 0.564960307211, 0.993442388709, 0.691233499152), np.array([[36, 70, 88, 17, 29, 44, 69, 18, 24, 51], [0, 4, 58, 61, 61, 72, 72, 73, 99, 99]])))
A:scipy.io._harwell_boeing.tests.test_hb.r->csc_matrix(r)
A:scipy.io._harwell_boeing.tests.test_hb.l->csc_matrix(l)
A:scipy.io._harwell_boeing.tests.test_hb.m->hb_read(StringIO(SIMPLE))
A:scipy.io._harwell_boeing.tests.test_hb.value_loaded->hb_read(file)
A:scipy.io._harwell_boeing.tests.test_hb.random_matrix->rand(10, 100, 0.1)
A:scipy.io._harwell_boeing.tests.test_hb.matrix->rand(10, 100, 0.1).asformat(matrix_format, copy=False)
scipy.io._harwell_boeing.tests.test_hb.TestHBReadWrite
scipy.io._harwell_boeing.tests.test_hb.TestHBReadWrite.check_save_load(self,value)
scipy.io._harwell_boeing.tests.test_hb.TestHBReadWrite.test_simple(self)
scipy.io._harwell_boeing.tests.test_hb.TestHBReader
scipy.io._harwell_boeing.tests.test_hb.TestHBReader.test_simple(self)
scipy.io._harwell_boeing.tests.test_hb.assert_csc_almost_equal(r,l)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/_harwell_boeing/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/_harwell_boeing/tests/test_fortran_format.py----------------------------------------
A:scipy.io._harwell_boeing.tests.test_fortran_format.self.parser->FortranFormatParser()
A:scipy.io._harwell_boeing.tests.test_fortran_format.ret->self.parser.parse(format)
A:scipy.io._harwell_boeing.tests.test_fortran_format.f->numpy.array([1.0, -1.2])
scipy.io._harwell_boeing.tests.test_fortran_format.TestExpFormat
scipy.io._harwell_boeing.tests.test_fortran_format.TestExpFormat.test_from_number(self)
scipy.io._harwell_boeing.tests.test_fortran_format.TestExpFormat.test_to_fortran(self)
scipy.io._harwell_boeing.tests.test_fortran_format.TestFortranFormatParser
scipy.io._harwell_boeing.tests.test_fortran_format.TestFortranFormatParser._test_equal(self,format,ref)
scipy.io._harwell_boeing.tests.test_fortran_format.TestFortranFormatParser.setup_method(self)
scipy.io._harwell_boeing.tests.test_fortran_format.TestFortranFormatParser.test_exp_exp(self)
scipy.io._harwell_boeing.tests.test_fortran_format.TestFortranFormatParser.test_repeat_exp(self)
scipy.io._harwell_boeing.tests.test_fortran_format.TestFortranFormatParser.test_repeat_exp_exp(self)
scipy.io._harwell_boeing.tests.test_fortran_format.TestFortranFormatParser.test_simple_exp(self)
scipy.io._harwell_boeing.tests.test_fortran_format.TestFortranFormatParser.test_simple_int(self)
scipy.io._harwell_boeing.tests.test_fortran_format.TestFortranFormatParser.test_simple_repeated_int(self)
scipy.io._harwell_boeing.tests.test_fortran_format.TestFortranFormatParser.test_wrong_formats(self)
scipy.io._harwell_boeing.tests.test_fortran_format.TestIntFormat
scipy.io._harwell_boeing.tests.test_fortran_format.TestIntFormat.test_from_number(self)
scipy.io._harwell_boeing.tests.test_fortran_format.TestIntFormat.test_to_fortran(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/_mio5_params.py----------------------------------------
A:scipy.io.matlab._mio5_params.obj->numpy.asarray(input_array).view(cls)
A:scipy.io.matlab._mio5_params.self.classname->getattr(obj, 'classname', None)
A:scipy.io.matlab._mio5_params.OPAQUE_DTYPE->numpy.dtype([('s0', 'O'), ('s1', 'O'), ('s2', 'O'), ('arr', 'O')])
scipy.io.matlab.MatlabObject(cls,input_array,classname=None)
scipy.io.matlab.MatlabObject.__array_finalize__(self,obj)
scipy.io.matlab.MatlabOpaque(cls,input_array)
scipy.io.matlab._mio5_params.MatlabFunction(cls,input_array)
scipy.io.matlab._mio5_params.MatlabFunction.__new__(cls,input_array)
scipy.io.matlab._mio5_params.MatlabObject(cls,input_array,classname=None)
scipy.io.matlab._mio5_params.MatlabObject.__array_finalize__(self,obj)
scipy.io.matlab._mio5_params.MatlabObject.__new__(cls,input_array,classname=None)
scipy.io.matlab._mio5_params.MatlabOpaque(cls,input_array)
scipy.io.matlab._mio5_params.MatlabOpaque.__new__(cls,input_array)
scipy.io.matlab._mio5_params._convert_codecs(template,byte_order)
scipy.io.matlab._mio5_params.mat_struct
scipy.io.matlab.mat_struct


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/mio4.py----------------------------------------
scipy.io.matlab.mio4.__dir__()
scipy.io.matlab.mio4.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/miobase.py----------------------------------------
scipy.io.matlab.miobase.__dir__()
scipy.io.matlab.miobase.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/mio5_utils.py----------------------------------------
scipy.io.matlab.mio5_utils.__dir__()
scipy.io.matlab.mio5_utils.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/mio5.py----------------------------------------
scipy.io.matlab.mio5.__dir__()
scipy.io.matlab.mio5.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/_mio.py----------------------------------------
A:scipy.io.matlab._mio.(f, opened)->_open_file(file_like, appendmat, mode)
A:scipy.io.matlab._mio.(byte_stream, file_opened)->_open_file(file_name, appendmat)
A:scipy.io.matlab._mio.(mjv, mnv)->_get_matfile_version(byte_stream)
A:scipy.io.matlab._mio.variable_names->kwargs.pop('variable_names', None)
A:scipy.io.matlab._mio.(MR, _)->mat_reader_factory(f, **kwargs)
A:scipy.io.matlab._mio.matfile_dict->MR.get_variables(variable_names)
A:scipy.io.matlab._mio.MW->MatFile5Writer(file_stream, do_compression=do_compression, unicode_strings=True, long_field_names=long_field_names, oned_as=oned_as)
A:scipy.io.matlab._mio.(ML, file_opened)->mat_reader_factory(f, **kwargs)
A:scipy.io.matlab._mio.variables->ML.list_variables()
scipy.io.loadmat(file_name,mdict=None,appendmat=True,**kwargs)
scipy.io.matlab._mio._open_file(file_like,appendmat,mode='rb')
scipy.io.matlab._mio._open_file_context(file_like,appendmat,mode='rb')
scipy.io.matlab._mio.loadmat(file_name,mdict=None,appendmat=True,**kwargs)
scipy.io.matlab._mio.mat_reader_factory(file_name,appendmat=True,**kwargs)
scipy.io.matlab._mio.savemat(file_name,mdict,appendmat=True,format='5',long_field_names=False,do_compression=False,oned_as='row')
scipy.io.matlab._mio.whosmat(file_name,appendmat=True,**kwargs)
scipy.io.savemat(file_name,mdict,appendmat=True,format='5',long_field_names=False,do_compression=False,oned_as='row')
scipy.io.whosmat(file_name,appendmat=True,**kwargs)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/mio5_params.py----------------------------------------
scipy.io.matlab.mio5_params.__dir__()
scipy.io.matlab.mio5_params.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/mio_utils.py----------------------------------------
scipy.io.matlab.mio_utils.__dir__()
scipy.io.matlab.mio_utils.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/_mio5.py----------------------------------------
A:scipy.io.matlab._mio5.d[f]->_inspect_cell_array(elem)
A:scipy.io.matlab._mio5.d[key]->_inspect_cell_array(d[key])
A:scipy.io.matlab._mio5.uint16_codec->sys.getdefaultencoding()
A:scipy.io.matlab._mio5.mi->self.mat_stream.read(2)
A:scipy.io.matlab._mio5.hdr->numpy.zeros((), NDT_FILE_HDR)
A:scipy.io.matlab._mio5.hdict['__header__']->hdr['description'].item().strip(b' \t\n\x00')
A:scipy.io.matlab._mio5.self._file_reader->VarReader5(self)
A:scipy.io.matlab._mio5.self._matrix_reader->VarReader5(self)
A:scipy.io.matlab._mio5.(mdtype, byte_count)->self._matrix_reader.read_full_tag()
A:scipy.io.matlab._mio5.stream->BytesIO()
A:scipy.io.matlab._mio5.header->self._matrix_reader.read_header(check_stream_limit)
A:scipy.io.matlab._mio5.variable_names->list(variable_names)
A:scipy.io.matlab._mio5.mdict->self.read_file_header()
A:scipy.io.matlab._mio5.(hdr, next_position)->MatFile5Reader(file_obj).read_var_header()
A:scipy.io.matlab._mio5.res->self.read_var_array(hdr, process)
A:scipy.io.matlab._mio5.shape->self._matrix_reader.shape_from_header(hdr)
A:scipy.io.matlab._mio5.info->_mio5_params.mclass_info.get(hdr.mclass, 'unknown')
A:scipy.io.matlab._mio5.rdr->MatFile5Reader(file_obj)
A:scipy.io.matlab._mio5.raw_hdr->file_obj.read(hdr_len)
A:scipy.io.matlab._mio5.next_position->file_obj.tell()
A:scipy.io.matlab._mio5.var_str->file_obj.read(byte_count)
A:scipy.io.matlab._mio5.out_obj->BytesIO()
A:scipy.io.matlab._mio5.source->dict(((key, value) for (key, value) in source.__dict__.items() if not key.startswith('_')))
A:scipy.io.matlab._mio5.narr->to_writeable(arr)
A:scipy.io.matlab._mio5.mat_tag->numpy.zeros((), NDT_TAG_FULL)
A:scipy.io.matlab._mio5.arr->numpy.ndarray(shape=(len(st),), dtype='S1', buffer=st)
A:scipy.io.matlab._mio5.tag->numpy.empty((), NDT_TAG_FULL)
A:scipy.io.matlab._mio5.tag['data']->numpy.ndarray(shape=(len(st),), dtype='S1', buffer=st).tobytes(order='F')
A:scipy.io.matlab._mio5.self._mat_tag_pos->self.file_stream.tell()
A:scipy.io.matlab._mio5.af->numpy.zeros((), NDT_ARRAY_FLAGS)
A:scipy.io.matlab._mio5.name->numpy.asarray(name)
A:scipy.io.matlab._mio5.curr_pos->self.file_stream.tell()
A:scipy.io.matlab._mio5.mat_tag_pos->self.file_stream.tell()
A:scipy.io.matlab._mio5.n_chars->numpy.prod(shape)
A:scipy.io.matlab._mio5.st_arr->numpy.ndarray(shape=(), dtype=arr_dtype_number(arr, n_chars), buffer=arr.T.copy())
A:scipy.io.matlab._mio5.st->numpy.ndarray(shape=(), dtype=arr_dtype_number(arr, n_chars), buffer=arr.T.copy()).item().encode(codec)
A:scipy.io.matlab._mio5.A->numpy.atleast_2d(arr).flatten('F')
A:scipy.io.matlab._mio5.hdr['endian_test']->numpy.ndarray(shape=(), dtype='S2', buffer=np.uint16(19785))
A:scipy.io.matlab._mio5.self._matrix_writer->VarWriter5(self)
A:scipy.io.matlab._mio5.out_str->zlib.compress(stream.getvalue())
A:scipy.io.matlab._mio5.tag['byte_count']->len(out_str)
scipy.io.matlab._mio5.EmptyStructMarker
scipy.io.matlab._mio5.MatFile5Reader(self,mat_stream,byte_order=None,mat_dtype=False,squeeze_me=False,chars_as_strings=True,matlab_compatible=False,struct_as_record=True,verify_compressed_data_integrity=True,uint16_codec=None,simplify_cells=False)
scipy.io.matlab._mio5.MatFile5Reader.__init__(self,mat_stream,byte_order=None,mat_dtype=False,squeeze_me=False,chars_as_strings=True,matlab_compatible=False,struct_as_record=True,verify_compressed_data_integrity=True,uint16_codec=None,simplify_cells=False)
scipy.io.matlab._mio5.MatFile5Reader.get_variables(self,variable_names=None)
scipy.io.matlab._mio5.MatFile5Reader.guess_byte_order(self)
scipy.io.matlab._mio5.MatFile5Reader.initialize_read(self)
scipy.io.matlab._mio5.MatFile5Reader.list_variables(self)
scipy.io.matlab._mio5.MatFile5Reader.read_file_header(self)
scipy.io.matlab._mio5.MatFile5Reader.read_var_array(self,header,process=True)
scipy.io.matlab._mio5.MatFile5Reader.read_var_header(self)
scipy.io.matlab._mio5.MatFile5Writer(self,file_stream,do_compression=False,unicode_strings=False,global_vars=None,long_field_names=False,oned_as='row')
scipy.io.matlab._mio5.MatFile5Writer.__init__(self,file_stream,do_compression=False,unicode_strings=False,global_vars=None,long_field_names=False,oned_as='row')
scipy.io.matlab._mio5.MatFile5Writer.put_variables(self,mdict,write_header=None)
scipy.io.matlab._mio5.MatFile5Writer.write_file_header(self)
scipy.io.matlab._mio5.VarWriter5(self,file_writer)
scipy.io.matlab._mio5.VarWriter5.__init__(self,file_writer)
scipy.io.matlab._mio5.VarWriter5._write_items(self,arr)
scipy.io.matlab._mio5.VarWriter5.update_matrix_tag(self,start_pos)
scipy.io.matlab._mio5.VarWriter5.write(self,arr)
scipy.io.matlab._mio5.VarWriter5.write_bytes(self,arr)
scipy.io.matlab._mio5.VarWriter5.write_cells(self,arr)
scipy.io.matlab._mio5.VarWriter5.write_char(self,arr,codec='ascii')
scipy.io.matlab._mio5.VarWriter5.write_element(self,arr,mdtype=None)
scipy.io.matlab._mio5.VarWriter5.write_empty_struct(self)
scipy.io.matlab._mio5.VarWriter5.write_header(self,shape,mclass,is_complex=False,is_logical=False,nzmax=0)
scipy.io.matlab._mio5.VarWriter5.write_numeric(self,arr)
scipy.io.matlab._mio5.VarWriter5.write_object(self,arr)
scipy.io.matlab._mio5.VarWriter5.write_regular_element(self,arr,mdtype,byte_count)
scipy.io.matlab._mio5.VarWriter5.write_smalldata_element(self,arr,mdtype,byte_count)
scipy.io.matlab._mio5.VarWriter5.write_sparse(self,arr)
scipy.io.matlab._mio5.VarWriter5.write_string(self,s)
scipy.io.matlab._mio5.VarWriter5.write_struct(self,arr)
scipy.io.matlab._mio5.VarWriter5.write_top(self,arr,name,is_global)
scipy.io.matlab._mio5._has_struct(elem)
scipy.io.matlab._mio5._inspect_cell_array(ndarray)
scipy.io.matlab._mio5._matstruct_to_dict(matobj)
scipy.io.matlab._mio5._simplify_cells(d)
scipy.io.matlab._mio5.to_writeable(source)
scipy.io.matlab._mio5.varmats_from_mat(file_obj)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/_mio4.py----------------------------------------
A:scipy.io.matlab._mio4.data->read_dtype(self.mat_stream, self.dtypes['header'])
A:scipy.io.matlab._mio4.name->self.mat_stream.read(int(data['namlen'])).strip(b'\x00')
A:scipy.io.matlab._mio4.(M, rest)->divmod(data['mopt'], 1000)
A:scipy.io.matlab._mio4.(O, rest)->divmod(rest, 100)
A:scipy.io.matlab._mio4.(P, rest)->divmod(rest, 10)
A:scipy.io.matlab._mio4.arr->numpy.ndarray(shape=dims, dtype='S1', buffer=st)
A:scipy.io.matlab._mio4.buffer->self.mat_stream.read(int(num_bytes))
A:scipy.io.matlab._mio4.res->self.read_sub_array(hdr)
A:scipy.io.matlab._mio4.res_j->self.read_sub_array(hdr, copy=False)
A:scipy.io.matlab._mio4.S->numpy.ndarray(shape=dims, dtype='S1', buffer=st).tobytes().decode('latin-1')
A:scipy.io.matlab._mio4.I->numpy.ascontiguousarray(tmp[:, 0], dtype='intc')
A:scipy.io.matlab._mio4.J->numpy.ascontiguousarray(tmp[:, 1], dtype='intc')
A:scipy.io.matlab._mio4.V->numpy.ascontiguousarray(tmp[:, 2], dtype='complex')
A:scipy.io.matlab._mio4.shape->self._matrix_reader.shape_from_header(hdr)
A:scipy.io.matlab._mio4.rows->numpy.ndarray(shape=(), dtype=dt, buffer=self.mat_stream.read(dt.itemsize))
A:scipy.io.matlab._mio4.cols->numpy.ndarray(shape=(), dtype=dt, buffer=self.mat_stream.read(dt.itemsize))
A:scipy.io.matlab._mio4.mopt->read_dtype(self.mat_stream, np.dtype('i4'))
A:scipy.io.matlab._mio4.self.dtypes->convert_dtypes(mdtypes_template, self.byte_order)
A:scipy.io.matlab._mio4.self._matrix_reader->VarReader4(self)
A:scipy.io.matlab._mio4.hdr->self._matrix_reader.read_header()
A:scipy.io.matlab._mio4.n->reduce(lambda x, y: x * y, hdr.dims, 1)
A:scipy.io.matlab._mio4.variable_names->list(variable_names)
A:scipy.io.matlab._mio4.(hdr, next_position)->self.read_var_header()
A:scipy.io.matlab._mio4.mdict[name]->self.read_var_array(hdr)
A:scipy.io.matlab._mio4.info->mclass_info.get(hdr.mclass, 'unknown')
A:scipy.io.matlab._mio4.dims->matdims(arr, oned_as)
A:scipy.io.matlab._mio4.header->numpy.empty((), mdtypes_template['header'])
A:scipy.io.matlab._mio4.n_chars->numpy.prod(dims)
A:scipy.io.matlab._mio4.st_arr->numpy.ndarray(shape=(), dtype=arr_dtype_number(arr, n_chars), buffer=arr)
A:scipy.io.matlab._mio4.st->numpy.ndarray(shape=(), dtype=arr_dtype_number(arr, n_chars), buffer=arr).item().encode('latin-1')
A:scipy.io.matlab._mio4.A->numpy.ndarray(shape=dims, dtype='S1', buffer=st).tocoo()
A:scipy.io.matlab._mio4.ijv->numpy.zeros((A.nnz + 1, 3 + imagf), dtype='f8')
A:scipy.io.matlab._mio4.self._matrix_writer->VarWriter4(self)
scipy.io.matlab._mio4.MatFile4Reader(self,mat_stream,*args,**kwargs)
scipy.io.matlab._mio4.MatFile4Reader.__init__(self,mat_stream,*args,**kwargs)
scipy.io.matlab._mio4.MatFile4Reader.get_variables(self,variable_names=None)
scipy.io.matlab._mio4.MatFile4Reader.guess_byte_order(self)
scipy.io.matlab._mio4.MatFile4Reader.initialize_read(self)
scipy.io.matlab._mio4.MatFile4Reader.list_variables(self)
scipy.io.matlab._mio4.MatFile4Reader.read_var_array(self,header,process=True)
scipy.io.matlab._mio4.MatFile4Reader.read_var_header(self)
scipy.io.matlab._mio4.MatFile4Writer(self,file_stream,oned_as=None)
scipy.io.matlab._mio4.MatFile4Writer.__init__(self,file_stream,oned_as=None)
scipy.io.matlab._mio4.MatFile4Writer.put_variables(self,mdict,write_header=None)
scipy.io.matlab._mio4.VarHeader4(self,name,dtype,mclass,dims,is_complex)
scipy.io.matlab._mio4.VarHeader4.__init__(self,name,dtype,mclass,dims,is_complex)
scipy.io.matlab._mio4.VarReader4(self,file_reader)
scipy.io.matlab._mio4.VarReader4.__init__(self,file_reader)
scipy.io.matlab._mio4.VarReader4.array_from_header(self,hdr,process=True)
scipy.io.matlab._mio4.VarReader4.read_char_array(self,hdr)
scipy.io.matlab._mio4.VarReader4.read_full_array(self,hdr)
scipy.io.matlab._mio4.VarReader4.read_header(self)
scipy.io.matlab._mio4.VarReader4.read_sparse_array(self,hdr)
scipy.io.matlab._mio4.VarReader4.read_sub_array(self,hdr,copy=True)
scipy.io.matlab._mio4.VarReader4.shape_from_header(self,hdr)
scipy.io.matlab._mio4.VarWriter4(self,file_writer)
scipy.io.matlab._mio4.VarWriter4.__init__(self,file_writer)
scipy.io.matlab._mio4.VarWriter4.write(self,arr,name)
scipy.io.matlab._mio4.VarWriter4.write_bytes(self,arr)
scipy.io.matlab._mio4.VarWriter4.write_char(self,arr,name)
scipy.io.matlab._mio4.VarWriter4.write_header(self,name,shape,P=miDOUBLE,T=mxFULL_CLASS,imagf=0)
scipy.io.matlab._mio4.VarWriter4.write_numeric(self,arr,name)
scipy.io.matlab._mio4.VarWriter4.write_sparse(self,arr,name)
scipy.io.matlab._mio4.VarWriter4.write_string(self,s)
scipy.io.matlab._mio4.arr_to_2d(arr,oned_as='row')


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/streams.py----------------------------------------
scipy.io.matlab.streams.__dir__()
scipy.io.matlab.streams.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/_miobase.py----------------------------------------
A:scipy.io.matlab._miobase.docfiller->scipy._lib.doccer.filldoc(doc_dict)
A:scipy.io.matlab._miobase.dtypes->dtype_template.copy()
A:scipy.io.matlab._miobase.dtypes[k]->numpy.dtype(dtypes[k]).newbyteorder(order_code)
A:scipy.io.matlab._miobase.arr->arr.copy().copy()
A:scipy.io.matlab._miobase.mopt_bytes->fileobj.read(4)
A:scipy.io.matlab._miobase.mopt_ints->numpy.ndarray(shape=(4,), dtype=np.uint8, buffer=mopt_bytes)
A:scipy.io.matlab._miobase.tst_str->fileobj.read(4)
A:scipy.io.matlab._miobase.maj_ind->int(tst_str[2] == b'I'[0])
A:scipy.io.matlab._miobase.maj_val->int(tst_str[maj_ind])
A:scipy.io.matlab._miobase.min_val->int(tst_str[1 - maj_ind])
A:scipy.io.matlab._miobase.byte_order->boc.to_numpy_code(byte_order)
A:scipy.io.matlab._miobase.b->self.mat_stream.read(1)
A:scipy.io.matlab._miobase.curpos->self.mat_stream.tell()
A:scipy.io.matlab._miobase.dims->list(arr.shape)
scipy.io.matlab.MatReadError(Exception)
scipy.io.matlab.MatReadWarning(UserWarning)
scipy.io.matlab.MatWriteError(Exception)
scipy.io.matlab._miobase.MatFileReader(self,mat_stream,byte_order=None,mat_dtype=False,squeeze_me=False,chars_as_strings=True,matlab_compatible=False,struct_as_record=True,verify_compressed_data_integrity=True,simplify_cells=False)
scipy.io.matlab._miobase.MatFileReader.__init__(self,mat_stream,byte_order=None,mat_dtype=False,squeeze_me=False,chars_as_strings=True,matlab_compatible=False,struct_as_record=True,verify_compressed_data_integrity=True,simplify_cells=False)
scipy.io.matlab._miobase.MatFileReader.end_of_stream(self)
scipy.io.matlab._miobase.MatFileReader.guess_byte_order(self)
scipy.io.matlab._miobase.MatFileReader.set_matlab_compatible(self)
scipy.io.matlab._miobase.MatReadError(Exception)
scipy.io.matlab._miobase.MatReadWarning(UserWarning)
scipy.io.matlab._miobase.MatVarReader(self,file_reader)
scipy.io.matlab._miobase.MatVarReader.__init__(self,file_reader)
scipy.io.matlab._miobase.MatVarReader.array_from_header(self,header)
scipy.io.matlab._miobase.MatVarReader.read_header(self)
scipy.io.matlab._miobase.MatWriteError(Exception)
scipy.io.matlab._miobase._get_matfile_version(fileobj)
scipy.io.matlab._miobase.arr_dtype_number(arr,num)
scipy.io.matlab._miobase.arr_to_chars(arr)
scipy.io.matlab._miobase.convert_dtypes(dtype_template,order_code)
scipy.io.matlab._miobase.matdims(arr,oned_as='column')
scipy.io.matlab._miobase.matfile_version(file_name,*,appendmat=True)
scipy.io.matlab._miobase.read_dtype(mat_stream,a_dtype)
scipy.io.matlab.matfile_version(file_name,*,appendmat=True)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/_byteordercodes.py----------------------------------------
A:scipy.io.matlab._byteordercodes.code->code.lower().lower()
scipy.io.matlab._byteordercodes.to_numpy_code(code)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/byteordercodes.py----------------------------------------
scipy.io.matlab.byteordercodes.__dir__()
scipy.io.matlab.byteordercodes.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/__init__.py----------------------------------------
A:scipy.io.matlab.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/mio.py----------------------------------------
scipy.io.matlab.mio.__dir__()
scipy.io.matlab.mio.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/tests/test_mio_funcs.py----------------------------------------
A:scipy.io.matlab.tests.test_mio_funcs.test_data_path->os.path.join(os.path.dirname(__file__), 'data')
A:scipy.io.matlab.tests.test_mio_funcs.(hdr, next_position)->MatFile5Reader(fp, struct_as_record=True).read_var_header()
A:scipy.io.matlab.tests.test_mio_funcs.res->MatFile5Reader(fp, struct_as_record=True).read_var_array(hdr, process=False)
A:scipy.io.matlab.tests.test_mio_funcs.fp->open(fname, 'rb')
A:scipy.io.matlab.tests.test_mio_funcs.rdr->MatFile5Reader(fp, struct_as_record=True)
A:scipy.io.matlab.tests.test_mio_funcs.vars->MatFile5Reader(fp, struct_as_record=True).get_variables()
A:scipy.io.matlab.tests.test_mio_funcs.ws_bs->io.BytesIO(fws.tobytes())
A:scipy.io.matlab.tests.test_mio_funcs.mi->MatFile5Reader(fp, struct_as_record=True).mat_stream.read(2)
A:scipy.io.matlab.tests.test_mio_funcs.mdict->read_minimat_vars(rdr)
A:scipy.io.matlab.tests.test_mio_funcs.fname->os.path.join(test_data_path, 'parabola.mat')
scipy.io.matlab.tests.test_mio_funcs.read_minimat_vars(rdr)
scipy.io.matlab.tests.test_mio_funcs.read_workspace_vars(fname)
scipy.io.matlab.tests.test_mio_funcs.test_jottings()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/tests/test_byteordercodes.py----------------------------------------
scipy.io.matlab.tests.test_byteordercodes.test_native()
scipy.io.matlab.tests.test_byteordercodes.test_to_numpy()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/tests/test_pathological.py----------------------------------------
A:scipy.io.matlab.tests.test_pathological.TEST_DATA_PATH->pjoin(dirname(__file__), 'data')
A:scipy.io.matlab.tests.test_pathological.multi_fname->pjoin(TEST_DATA_PATH, 'nasty_duplicate_fieldnames.mat')
A:scipy.io.matlab.tests.test_pathological.vars->loadmat(multi_fname)
A:scipy.io.matlab.tests.test_pathological.fname->pjoin(TEST_DATA_PATH, 'malformed1.mat')
scipy.io.matlab.tests.test_pathological.test_malformed1()
scipy.io.matlab.tests.test_pathological.test_multiple_fieldnames()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/tests/test_streams.py----------------------------------------
A:scipy.io.matlab.tests.test_streams.(fd, fname)->mkstemp()
A:scipy.io.matlab.tests.test_streams.gs->BytesIO(val)
A:scipy.io.matlab.tests.test_streams.cs->BytesIO(val)
A:scipy.io.matlab.tests.test_streams.st->make_stream(s)
A:scipy.io.matlab.tests.test_streams.res->_read_string(st, 4)
A:scipy.io.matlab.tests.test_streams.data->numpy.arange(33707000).astype(np.uint8).tobytes()
A:scipy.io.matlab.tests.test_streams.compressed_data->zlib.compress(data, COMPRESSION_LEVEL)
A:scipy.io.matlab.tests.test_streams.stream->ZlibInputStream(compressed_stream, compressed_data_len)
A:scipy.io.matlab.tests.test_streams.(compressed_stream, compressed_data_len, data)->self._get_data(1024)
A:scipy.io.matlab.tests.test_streams.block->ZlibInputStream(compressed_stream, compressed_data_len).read(min(read_size, size - so_far))
A:scipy.io.matlab.tests.test_streams.compressed_stream->BytesIO(compressed_data)
A:scipy.io.matlab.tests.test_streams.d1->ZlibInputStream(compressed_stream, compressed_data_len).read(11)
A:scipy.io.matlab.tests.test_streams.d2->ZlibInputStream(compressed_stream, compressed_data_len).read(21)
A:scipy.io.matlab.tests.test_streams.d3->ZlibInputStream(compressed_stream, compressed_data_len).read(11)
A:scipy.io.matlab.tests.test_streams.compressed_data_len->len(compressed_data)
scipy.io.matlab.tests.test_streams.TestZlibInputStream
scipy.io.matlab.tests.test_streams.TestZlibInputStream._get_data(self,size)
scipy.io.matlab.tests.test_streams.TestZlibInputStream.test_all_data_read(self)
scipy.io.matlab.tests.test_streams.TestZlibInputStream.test_all_data_read_bad_checksum(self)
scipy.io.matlab.tests.test_streams.TestZlibInputStream.test_all_data_read_overlap(self)
scipy.io.matlab.tests.test_streams.TestZlibInputStream.test_read(self)
scipy.io.matlab.tests.test_streams.TestZlibInputStream.test_read_bad_checksum(self)
scipy.io.matlab.tests.test_streams.TestZlibInputStream.test_read_max_length(self)
scipy.io.matlab.tests.test_streams.TestZlibInputStream.test_seek(self)
scipy.io.matlab.tests.test_streams.TestZlibInputStream.test_seek_bad_checksum(self)
scipy.io.matlab.tests.test_streams.setup_test_file()
scipy.io.matlab.tests.test_streams.test_make_stream()
scipy.io.matlab.tests.test_streams.test_read()
scipy.io.matlab.tests.test_streams.test_tell_seek()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/tests/test_mio5_utils.py----------------------------------------
A:scipy.io.matlab.tests.test_mio5_utils.a->_make_tag(dt, 30, mio5p.miUINT16, 0)
A:scipy.io.matlab.tests.test_mio5_utils.b->_make_tag(dt, 30, mio5p.miUINT16, 0).byteswap()
A:scipy.io.matlab.tests.test_mio5_utils.c->scipy.io.matlab._mio5_utils.byteswap_u4(a)
A:scipy.io.matlab.tests.test_mio5_utils.d->scipy.io.matlab._mio5_utils.byteswap_u4(c)
A:scipy.io.matlab.tests.test_mio5_utils.base_dt->numpy.dtype(base_dt)
A:scipy.io.matlab.tests.test_mio5_utils.bo->scipy.io.matlab._byteordercodes.to_numpy_code(base_dt.byteorder)
A:scipy.io.matlab.tests.test_mio5_utils.tag->numpy.zeros((1,), dtype=tag_dt)
A:scipy.io.matlab.tests.test_mio5_utils.r->_make_readerlike(str_io, boc.native_code)
A:scipy.io.matlab.tests.test_mio5_utils.r.uint16_codec->sys.getdefaultencoding()
A:scipy.io.matlab.tests.test_mio5_utils.str_io->cStringIO()
A:scipy.io.matlab.tests.test_mio5_utils.c_reader->scipy.io.matlab._mio5_utils.VarReader5(r)
A:scipy.io.matlab.tests.test_mio5_utils.tag_str->numpy.zeros((1,), dtype=tag_dt).tobytes()
A:scipy.io.matlab.tests.test_mio5_utils.st->scipy.io.matlab._streams.make_stream(str_io)
A:scipy.io.matlab.tests.test_mio5_utils.s->scipy.io.matlab._streams._read_into(st, tag.itemsize)
A:scipy.io.matlab.tests.test_mio5_utils.dt->numpy.dtype('<u2')
A:scipy.io.matlab.tests.test_mio5_utils.a_str->_make_tag(dt, 30, mio5p.miUINT16, 0).tobytes()
A:scipy.io.matlab.tests.test_mio5_utils.el->scipy.io.matlab._mio5_utils.VarReader5(r).read_numeric()
A:scipy.io.matlab.tests.test_mio5_utils.tag_dt->numpy.dtype([('mdtype', 'u4'), ('byte_count', 'u4')])
A:scipy.io.matlab.tests.test_mio5_utils.hdr->scipy.io.matlab._mio5_utils.VarHeader5()
A:scipy.io.matlab.tests.test_mio5_utils.val->scipy.io.matlab._mio5_utils.VarReader5(r).read_char(hdr)
scipy.io.matlab.tests.test_mio5_utils._make_readerlike(stream,byte_order=boc.native_code)
scipy.io.matlab.tests.test_mio5_utils._make_tag(base_dt,val,mdtype,sde=False)
scipy.io.matlab.tests.test_mio5_utils._write_stream(stream,*strings)
scipy.io.matlab.tests.test_mio5_utils.test_byteswap()
scipy.io.matlab.tests.test_mio5_utils.test_read_numeric()
scipy.io.matlab.tests.test_mio5_utils.test_read_numeric_writeable()
scipy.io.matlab.tests.test_mio5_utils.test_read_stream()
scipy.io.matlab.tests.test_mio5_utils.test_read_tag()
scipy.io.matlab.tests.test_mio5_utils.test_zero_byte_string()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/tests/test_miobase.py----------------------------------------
scipy.io.matlab.tests.test_miobase.test_matdims()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/tests/test_mio_utils.py----------------------------------------
A:scipy.io.matlab.tests.test_mio_utils.a->numpy.zeros((1, 3))
A:scipy.io.matlab.tests.test_mio_utils.sq_int->squeeze_element(np.zeros((1, 1), dtype=float))
A:scipy.io.matlab.tests.test_mio_utils.sq_sa->squeeze_element(np.zeros((1, 1), dtype=[('f1', 'f')]))
A:scipy.io.matlab.tests.test_mio_utils.sq_empty->squeeze_element(np.empty(0, np.uint8))
A:scipy.io.matlab.tests.test_mio_utils.str_arr->numpy.array(strings, dtype='U6')
A:scipy.io.matlab.tests.test_mio_utils.char_arr->numpy.array(chars, dtype='U1')
A:scipy.io.matlab.tests.test_mio_utils.ca2d->numpy.array(chars, dtype='U1').reshape((2, 2, 6))
A:scipy.io.matlab.tests.test_mio_utils.sa2d->numpy.array(strings, dtype='U6').reshape((2, 2))
A:scipy.io.matlab.tests.test_mio_utils.ca3d->numpy.array(chars, dtype='U1').reshape((1, 2, 2, 6))
A:scipy.io.matlab.tests.test_mio_utils.sa3d->numpy.array(strings, dtype='U6').reshape((1, 2, 2))
A:scipy.io.matlab.tests.test_mio_utils.char_arrf->numpy.array(chars, dtype='U1', order='F')
A:scipy.io.matlab.tests.test_mio_utils.arr->numpy.array([['']], dtype='U1')
A:scipy.io.matlab.tests.test_mio_utils.out_arr->numpy.array([''], dtype='U1')
scipy.io.matlab.tests.test_mio_utils.test_chars_strings()
scipy.io.matlab.tests.test_mio_utils.test_squeeze_element()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/matlab/tests/test_mio.py----------------------------------------
A:scipy.io.matlab.tests.test_mio.test_data_path->pjoin(dirname(__file__), 'data')
A:scipy.io.matlab.tests.test_mio.arr->numpy.arange(10)
A:scipy.io.matlab.tests.test_mio.arr.shape->matdims(arr)
A:scipy.io.matlab.tests.test_mio.A->numpy.zeros((3, 5))
A:scipy.io.matlab.tests.test_mio.A[0]->list(range(1, 6))
A:scipy.io.matlab.tests.test_mio.A[:, 0]->list(range(1, 4))
A:scipy.io.matlab.tests.test_mio.B->numpy.zeros((3, 5)).astype(complex)
A:scipy.io.matlab.tests.test_mio.CA->mlarr(([], mlarr([1]), mlarr([[1, 2]]), mlarr([[1, 2, 3]])), dtype=object).reshape(1, -1)
A:scipy.io.matlab.tests.test_mio.CA[0, 0]->array(['This cell contains this string and 3 arrays of increasing length'])
A:scipy.io.matlab.tests.test_mio.CAE->mlarr((mlarr(1), mlarr(2), mlarr([]), mlarr([]), mlarr(3)), dtype=object).reshape(1, -1)
A:scipy.io.matlab.tests.test_mio.objarr->numpy.empty((1, 1), dtype=object)
A:scipy.io.matlab.tests.test_mio.objarr[0, 0]->mlarr(1)
A:scipy.io.matlab.tests.test_mio.st_sub_arr->array([np.sqrt(2), np.exp(1), np.pi]).reshape(1, 3)
A:scipy.io.matlab.tests.test_mio.st1->numpy.zeros((1, 1), dtype=[(fldname, object)])
A:scipy.io.matlab.tests.test_mio.st1['stringfield'][0, 0]->array(['Rats live on no evil star.'])
A:scipy.io.matlab.tests.test_mio.CN->numpy.zeros((1, 2), dtype=object)
A:scipy.io.matlab.tests.test_mio.CN[0, 0]->mlarr(1)
A:scipy.io.matlab.tests.test_mio.CN[0, 1]->numpy.zeros((1, 3), dtype=object)
A:scipy.io.matlab.tests.test_mio.CN[0, 1][0, 0]->mlarr(2, dtype=np.uint8)
A:scipy.io.matlab.tests.test_mio.CN[0, 1][0, 1]->mlarr([[3]], dtype=np.uint8)
A:scipy.io.matlab.tests.test_mio.CN[0, 1][0, 2]->numpy.zeros((1, 2), dtype=object)
A:scipy.io.matlab.tests.test_mio.CN[0, 1][0, 2][0, 0]->mlarr(4, dtype=np.uint8)
A:scipy.io.matlab.tests.test_mio.CN[0, 1][0, 2][0, 1]->mlarr(5, dtype=np.uint8)
A:scipy.io.matlab.tests.test_mio.st2->numpy.empty((1, 1), dtype=[(n, object) for n in ['one', 'two']])
A:scipy.io.matlab.tests.test_mio.st2[0, 0]['one']->mlarr(1)
A:scipy.io.matlab.tests.test_mio.st2[0, 0]['two']->numpy.empty((1, 1), dtype=[('three', object)])
A:scipy.io.matlab.tests.test_mio.st2[0, 0]['two'][0, 0]['three']->array(['number 3'])
A:scipy.io.matlab.tests.test_mio.a->numpy.empty((1, 2), dtype=[(n, object) for n in ['one', 'two']])
A:scipy.io.matlab.tests.test_mio.a[0, 0]['one']->mlarr(1)
A:scipy.io.matlab.tests.test_mio.a[0, 0]['two']->mlarr(2)
A:scipy.io.matlab.tests.test_mio.a[0, 1]['one']->array(['number 1'])
A:scipy.io.matlab.tests.test_mio.a[0, 1]['two']->array(['number 2'])
A:scipy.io.matlab.tests.test_mio.ODT->numpy.dtype([(n, object) for n in ['expr', 'inputExpr', 'args', 'isEmpty', 'numArgs', 'version']])
A:scipy.io.matlab.tests.test_mio.MO->MatlabObject(np.zeros((1, 1), dtype=ODT), 'inline')
A:scipy.io.matlab.tests.test_mio.m0['expr']->array(['x'])
A:scipy.io.matlab.tests.test_mio.m0['inputExpr']->array([' x = INLINE_INPUTS_{1};'])
A:scipy.io.matlab.tests.test_mio.m0['args']->array(['x'])
A:scipy.io.matlab.tests.test_mio.m0['isEmpty']->mlarr(0)
A:scipy.io.matlab.tests.test_mio.m0['numArgs']->mlarr(1)
A:scipy.io.matlab.tests.test_mio.m0['version']->mlarr(1)
A:scipy.io.matlab.tests.test_mio.fp_u_str->open(pjoin(test_data_path, 'japanese_utf8.txt'), 'rb')
A:scipy.io.matlab.tests.test_mio.u_str->open(pjoin(test_data_path, 'japanese_utf8.txt'), 'rb').read().decode('utf-8')
A:scipy.io.matlab.tests.test_mio.type1->type(var1)
A:scipy.io.matlab.tests.test_mio.type2->type(var2)
A:scipy.io.matlab.tests.test_mio.matdict->loadmat(file_name, struct_as_record=True)
A:scipy.io.matlab.tests.test_mio.whos->whosmat(file_name)
A:scipy.io.matlab.tests.test_mio.mat_stream->gzip.open(fname, mode='rb')
A:scipy.io.matlab.tests.test_mio.use_filt->pjoin(test_data_path, 'test*%s.mat' % filt)
A:scipy.io.matlab.tests.test_mio.files->glob(use_filt)
A:scipy.io.matlab.tests.test_mio.xdense->numpy.zeros((20, 20))
A:scipy.io.matlab.tests.test_mio.x->numpy.array([[True], [False]], dtype=np.bool_)
A:scipy.io.matlab.tests.test_mio.tmpdir->mkdtemp()
A:scipy.io.matlab.tests.test_mio.fname->pjoin(test_data_path, 'testdouble_7.1_GLNX86.mat')
A:scipy.io.matlab.tests.test_mio.actual->loadmat(mat_stream, struct_as_record=True)
A:scipy.io.matlab.tests.test_mio.f->open(fname, 'rb')
A:scipy.io.matlab.tests.test_mio.filenames->glob(pjoin(test_data_path, 'testhdf5*.mat'))
A:scipy.io.matlab.tests.test_mio.fp->open(func_eg, 'rb')
A:scipy.io.matlab.tests.test_mio.sio->BytesIO()
A:scipy.io.matlab.tests.test_mio.my_struct->numpy.zeros((1, 1), dtype=[('my_fieldname', object)])
A:scipy.io.matlab.tests.test_mio.cell->numpy.ndarray((1, 2), dtype=object)
A:scipy.io.matlab.tests.test_mio.cells->numpy.ndarray((1, 1), dtype=object)
A:scipy.io.matlab.tests.test_mio.mfw->MatFile5Writer(BytesIO())
A:scipy.io.matlab.tests.test_mio.wtr->MatFile5Writer(stream)
A:scipy.io.matlab.tests.test_mio.w_sz->len(sio.getvalue())
A:scipy.io.matlab.tests.test_mio.ab_exp->numpy.array([[(1, 2)]], dtype=[('a', object), ('b', object)])
A:scipy.io.matlab.tests.test_mio.d->loadmat(filename, struct_as_record=True)
A:scipy.io.matlab.tests.test_mio.stream->BytesIO()
A:scipy.io.matlab.tests.test_mio.vals->loadmat(stream)
A:scipy.io.matlab.tests.test_mio.raw_len->len(stream.getvalue())
A:scipy.io.matlab.tests.test_mio.compressed_len->len(stream.getvalue())
A:scipy.io.matlab.tests.test_mio.arr2->numpy.arange(10).copy()
A:scipy.io.matlab.tests.test_mio.filename->pjoin(test_data_path, 'testsimplecell.mat')
A:scipy.io.matlab.tests.test_mio.(factory, file_opened)->mat_reader_factory(filename, struct_as_record=True)
A:scipy.io.matlab.tests.test_mio.res->loadmat(filename)
A:scipy.io.matlab.tests.test_mio.expected1->numpy.array([(1, 2)], dtype=[('a', '|O8'), ('b', '|O8')])
A:scipy.io.matlab.tests.test_mio.expected2->numpy.array([(2, 1)], dtype=[('b', '|O8'), ('a', '|O8')])
A:scipy.io.matlab.tests.test_mio.c->C()
A:scipy.io.matlab.tests.test_mio.rdr->MatFile5Reader(fp)
A:scipy.io.matlab.tests.test_mio.back_dict->MatFile5Reader(fp).get_variables()
A:scipy.io.matlab.tests.test_mio.carr->numpy.atleast_2d(np.array(list(arr.item()), dtype='U1'))
A:scipy.io.matlab.tests.test_mio.estring_fname->pjoin(test_data_path, 'single_empty_string.mat')
A:scipy.io.matlab.tests.test_mio.float_arr->numpy.array([[2.0, 3.0], [3.0, 4.0]])
A:scipy.io.matlab.tests.test_mio.int_arr->numpy.arange(6).reshape((2, 3))
A:scipy.io.matlab.tests.test_mio.uni_arr->numpy.array(['hello', 'world'], dtype='U')
A:scipy.io.matlab.tests.test_mio.barr->numpy.array([False, True, False])
A:scipy.io.matlab.tests.test_mio.reader->MatFile5Reader(sio)
A:scipy.io.matlab.tests.test_mio.(hdr, _)->MatFile5Reader(sio).read_var_header()
A:scipy.io.matlab.tests.test_mio.var->MatFile5Reader(sio).read_var_array(hdr, False)
A:scipy.io.matlab.tests.test_mio.func_eg->pjoin(test_data_path, 'one_by_zero_char.mat')
A:scipy.io.matlab.tests.test_mio.double_eg->pjoin(test_data_path, 'testmatrix_6.1_SOL2.mat')
A:scipy.io.matlab.tests.test_mio.out_d->loadmat(stream, squeeze_me=True)
A:scipy.io.matlab.tests.test_mio.in_arr->numpy.array(['Hello', 'Foob'])
A:scipy.io.matlab.tests.test_mio.out_arr->numpy.array(['Hello', 'Foob '])
A:scipy.io.matlab.tests.test_mio.in_str->numpy.array(['Hello', 'Foob']).tobytes(order='F')
A:scipy.io.matlab.tests.test_mio.in_from_str->numpy.ndarray(shape=a.shape, dtype=in_arr.dtype, order='F', buffer=in_str)
A:scipy.io.matlab.tests.test_mio.in_arr_u->numpy.array(['Hello', 'Foob']).astype('U')
A:scipy.io.matlab.tests.test_mio.out_arr_u->numpy.array(['Hello', 'Foob ']).astype('U')
A:scipy.io.matlab.tests.test_mio.vars->loadmat(mat4_fname)
A:scipy.io.matlab.tests.test_mio.varmats->varmats_from_mat(stream)
A:scipy.io.matlab.tests.test_mio.mat4_fname->pjoin(test_data_path, 'test_mat4_le_floats.mat')
A:scipy.io.matlab.tests.test_mio.bio->BytesIO()
A:scipy.io.matlab.tests.test_mio.var_back->loadmat(bio)
A:scipy.io.matlab.tests.test_mio.empty_sparse->scipy.sparse.csr_matrix([[0, 0], [0, 0]])
A:scipy.io.matlab.tests.test_mio.res1->loadmat(filename, simplify_cells=True)
A:scipy.io.matlab.tests.test_mio.res2->loadmat(filename, simplify_cells=False)
A:scipy.io.matlab.tests.test_mio.got_version->matfile_version(file)
A:scipy.io.matlab.tests.test_mio.data->loadmat(pjoin(test_data_path, 'parabola.mat'))
scipy.io.matlab.tests.test_mio._cases(version,filt='test%(name)s_*.mat')
scipy.io.matlab.tests.test_mio._check_level(label,expected,actual)
scipy.io.matlab.tests.test_mio._load_check_case(name,files,case)
scipy.io.matlab.tests.test_mio._rt_check_case(name,expected,format)
scipy.io.matlab.tests.test_mio._whos_check_case(name,files,case,classes)
scipy.io.matlab.tests.test_mio.assert_any_equal(output,alternatives)
scipy.io.matlab.tests.test_mio.mlarr(*args,**kwargs)
scipy.io.matlab.tests.test_mio.test_1d_shape()
scipy.io.matlab.tests.test_mio.test_4_and_long_field_names_incompatible()
scipy.io.matlab.tests.test_mio.test_bad_utf8()
scipy.io.matlab.tests.test_mio.test_cell_with_one_thing_in_it()
scipy.io.matlab.tests.test_mio.test_compression()
scipy.io.matlab.tests.test_mio.test_corrupted_data()
scipy.io.matlab.tests.test_mio.test_corrupted_data_check_can_be_disabled()
scipy.io.matlab.tests.test_mio.test_deprecation()
scipy.io.matlab.tests.test_mio.test_empty_mat_error()
scipy.io.matlab.tests.test_mio.test_empty_sparse()
scipy.io.matlab.tests.test_mio.test_empty_string()
scipy.io.matlab.tests.test_mio.test_empty_struct()
scipy.io.matlab.tests.test_mio.test_fieldnames()
scipy.io.matlab.tests.test_mio.test_filenotfound()
scipy.io.matlab.tests.test_mio.test_func_read()
scipy.io.matlab.tests.test_mio.test_gzip_simple()
scipy.io.matlab.tests.test_mio.test_load(version)
scipy.io.matlab.tests.test_mio.test_load_mat4_le()
scipy.io.matlab.tests.test_mio.test_loadmat_varnames()
scipy.io.matlab.tests.test_mio.test_logical_array()
scipy.io.matlab.tests.test_mio.test_logical_out_type()
scipy.io.matlab.tests.test_mio.test_logical_sparse()
scipy.io.matlab.tests.test_mio.test_long_field_names()
scipy.io.matlab.tests.test_mio.test_long_field_names_in_struct()
scipy.io.matlab.tests.test_mio.test_mat4_3d()
scipy.io.matlab.tests.test_mio.test_mat73()
scipy.io.matlab.tests.test_mio.test_mat_dtype()
scipy.io.matlab.tests.test_mio.test_mat_struct_squeeze()
scipy.io.matlab.tests.test_mio.test_matfile_version(version,filt,regex)
scipy.io.matlab.tests.test_mio.test_miuint32_compromise()
scipy.io.matlab.tests.test_mio.test_miutf8_for_miint8_compromise()
scipy.io.matlab.tests.test_mio.test_multiple_open()
scipy.io.matlab.tests.test_mio.test_one_by_zero()
scipy.io.matlab.tests.test_mio.test_opaque()
scipy.io.matlab.tests.test_mio.test_read_both_endian()
scipy.io.matlab.tests.test_mio.test_read_opts()
scipy.io.matlab.tests.test_mio.test_recarray()
scipy.io.matlab.tests.test_mio.test_regression_653()
scipy.io.matlab.tests.test_mio.test_round_trip(version,fmts)
scipy.io.matlab.tests.test_mio.test_round_types()
scipy.io.matlab.tests.test_mio.test_roundtrip_zero_dimensions()
scipy.io.matlab.tests.test_mio.test_save_dict()
scipy.io.matlab.tests.test_mio.test_save_empty_dict()
scipy.io.matlab.tests.test_mio.test_save_object()
scipy.io.matlab.tests.test_mio.test_save_unicode_field(tmpdir)
scipy.io.matlab.tests.test_mio.test_scalar_squeeze()
scipy.io.matlab.tests.test_mio.test_simplify_cells()
scipy.io.matlab.tests.test_mio.test_single_object()
scipy.io.matlab.tests.test_mio.test_skip_variable()
scipy.io.matlab.tests.test_mio.test_sparse_in_struct()
scipy.io.matlab.tests.test_mio.test_str_round()
scipy.io.matlab.tests.test_mio.test_structname_len()
scipy.io.matlab.tests.test_mio.test_to_writeable()
scipy.io.matlab.tests.test_mio.test_unicode_mat4()
scipy.io.matlab.tests.test_mio.test_use_small_element()
scipy.io.matlab.tests.test_mio.test_varmats_from_mat()
scipy.io.matlab.tests.test_mio.test_warnings()
scipy.io.matlab.tests.test_mio.test_whos(version)
scipy.io.matlab.tests.test_mio.test_write_opposite_endian()
scipy.io.matlab.tests.test_mio.test_writer_properties()
scipy.io.matlab.tests.test_mio.types_compatible(var1,var2)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/arff/arffread.py----------------------------------------
scipy.io.arff.arffread.__dir__()
scipy.io.arff.arffread.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/arff/_arffread.py----------------------------------------
A:scipy.io.arff._arffread.r_meta->re.compile('^\\s*@')
A:scipy.io.arff._arffread.r_comment->re.compile('^%')
A:scipy.io.arff._arffread.r_empty->re.compile('^\\s+$')
A:scipy.io.arff._arffread.r_headerline->re.compile('^\\s*@\\S*')
A:scipy.io.arff._arffread.r_datameta->re.compile('^@[Dd][Aa][Tt][Aa]')
A:scipy.io.arff._arffread.r_relation->re.compile('^@[Rr][Ee][Ll][Aa][Tt][Ii][Oo][Nn]\\s*(\\S*)')
A:scipy.io.arff._arffread.r_attribute->re.compile('^\\s*@[Aa][Tt][Tt][Rr][Ii][Bb][Uu][Tt][Ee]\\s*(..*$)')
A:scipy.io.arff._arffread.r_nominal->re.compile('{(.+)}')
A:scipy.io.arff._arffread.r_date->re.compile('[Dd][Aa][Tt][Ee]\\s+[\\"\']?(.+?)[\\"\']?$')
A:scipy.io.arff._arffread.r_comattrval->re.compile("'(..+)'\\s+(..+$)")
A:scipy.io.arff._arffread.r_wcomattrval->re.compile('(\\S+)\\s+(..+$)')
A:scipy.io.arff._arffread.m->re.compile('^\\s*@\\S*').match(i)
A:scipy.io.arff._arffread.(attrs, _)->split_data_line(m.group(1))
A:scipy.io.arff._arffread.values->cls._get_nom_val(attr_string)
A:scipy.io.arff._arffread.attr_string->attr_string.lower().strip().lower().strip()
A:scipy.io.arff._arffread.self.dtype->numpy.datetime64(0, self.datetime_unit)
A:scipy.io.arff._arffread.pattern->pattern.replace('ss', '%S').replace('ss', '%S')
A:scipy.io.arff._arffread.attr_string_lower->attr_string.lower().strip().lower().strip().lower().strip()
A:scipy.io.arff._arffread.(date_format, datetime_unit)->cls._get_date_format(attr_string)
A:scipy.io.arff._arffread.date_str->data_str.strip().strip("'").strip('"')
A:scipy.io.arff._arffread.dt->datetime.datetime.strptime(date_str, self.date_format)
A:scipy.io.arff._arffread.elems->list(range(ni))
A:scipy.io.arff._arffread.escaped_string->data_str.encode().decode('unicode-escape')
A:scipy.io.arff._arffread.(row, self.dialect)->split_data_line(raw, self.dialect)
A:scipy.io.arff._arffread.attr->cls.parse_attribute(name, attr_string)
A:scipy.io.arff._arffread.has_bug->getattr(csv_sniffer_has_bug_last_field, 'has_bug', None)
A:scipy.io.arff._arffread.dialect->csv.Sniffer().sniff(sniff_line, delimiters=delimiters)
A:scipy.io.arff._arffread.regexp->re.compile(restr, re.DOTALL | re.MULTILINE)
A:scipy.io.arff._arffread.matches->re.compile(restr, re.DOTALL | re.MULTILINE).findall(sniff_line)
A:scipy.io.arff._arffread.space->bool(m[n])
A:scipy.io.arff._arffread.dq_regexp->re.compile('((%(delim)s)|^)\\W*%(quote)s[^%(delim)s\\n]*%(quote)s[^%(delim)s\\n]*%(quote)s\\W*((%(delim)s)|$)' % {'delim': re.escape(delim), 'quote': quote}, re.MULTILINE)
A:scipy.io.arff._arffread.doublequote->bool(dq_regexp.search(sniff_line))
A:scipy.io.arff._arffread.line->line.strip().strip()
A:scipy.io.arff._arffread.row->next(csv.reader([line], dialect))
A:scipy.io.arff._arffread.sattr->to_attribute(name, type).strip()
A:scipy.io.arff._arffread.mattr->re.compile('^\\s*@[Aa][Tt][Tt][Rr][Ii][Bb][Uu][Tt][Ee]\\s*(..*$)').match(sattr)
A:scipy.io.arff._arffread.atrv->re.compile('^\\s*@[Aa][Tt][Tt][Rr][Ii][Bb][Uu][Tt][Ee]\\s*(..*$)').match(sattr).group(1)
A:scipy.io.arff._arffread.(name, type)->tokenize_single_wcomma(atrv)
A:scipy.io.arff._arffread.next_item->read_relational_attribute(iterable, attribute, next_item)
A:scipy.io.arff._arffread.attribute->to_attribute(name, type)
A:scipy.io.arff._arffread.name->re.compile('^\\s*@\\S*').match(i).group(1).strip()
A:scipy.io.arff._arffread.type->re.compile('^\\s*@\\S*').match(i).group(2).strip()
A:scipy.io.arff._arffread.r_end_relational->re.compile('^@[Ee][Nn][Dd]\\s*' + relational_attribute.name + '\\s*$')
A:scipy.io.arff._arffread.isattr->re.compile('^\\s*@[Aa][Tt][Tt][Rr][Ii][Bb][Uu][Tt][Ee]\\s*(..*$)').match(i)
A:scipy.io.arff._arffread.(attr, i)->tokenize_attribute(ofile, i)
A:scipy.io.arff._arffread.i->next(ofile)
A:scipy.io.arff._arffread.isrel->re.compile('^@[Rr][Ee][Ll][Aa][Tt][Ii][Oo][Nn]\\s*(\\S*)').match(i)
A:scipy.io.arff._arffread.relation->re.compile('^@[Rr][Ee][Ll][Aa][Tt][Ii][Oo][Nn]\\s*(\\S*)').match(i).group(1)
A:scipy.io.arff._arffread.ofile->open(f, 'rt')
A:scipy.io.arff._arffread.(rel, attr)->read_header(ofile)
A:scipy.io.arff._arffread.meta->MetaData(rel, attr)
A:scipy.io.arff._arffread.ni->len(attr)
A:scipy.io.arff._arffread.(row, dialect)->split_data_line(raw, dialect)
A:scipy.io.arff._arffread.a->list(generator(ofile))
A:scipy.io.arff._arffread.data->numpy.array(a, [(a.name, a.dtype) for a in attr])
A:scipy.io.arff._arffread.(min, max, mean, std)->basic_stats(data)
A:scipy.io.arff._arffread.(data, meta)->loadarff(filename)
scipy.io.arff.ArffError(OSError)
scipy.io.arff.Attribute(self,name)
scipy.io.arff.Attribute.__str__(self)
scipy.io.arff.Attribute.parse_attribute(cls,name,attr_string)
scipy.io.arff.Attribute.parse_data(self,data_str)
scipy.io.arff.DateAttribute(self,name,date_format,datetime_unit)
scipy.io.arff.DateAttribute.__str__(self)
scipy.io.arff.DateAttribute._get_date_format(atrv)
scipy.io.arff.DateAttribute.parse_attribute(cls,name,attr_string)
scipy.io.arff.DateAttribute.parse_data(self,data_str)
scipy.io.arff.MetaData(self,rel,attr)
scipy.io.arff.MetaData.__getitem__(self,key)
scipy.io.arff.MetaData.__iter__(self)
scipy.io.arff.MetaData.__repr__(self)
scipy.io.arff.MetaData.names(self)
scipy.io.arff.MetaData.types(self)
scipy.io.arff.NominalAttribute(self,name,values)
scipy.io.arff.NominalAttribute.__str__(self)
scipy.io.arff.NominalAttribute._get_nom_val(atrv)
scipy.io.arff.NominalAttribute.parse_attribute(cls,name,attr_string)
scipy.io.arff.NominalAttribute.parse_data(self,data_str)
scipy.io.arff.NumericAttribute(self,name)
scipy.io.arff.NumericAttribute._basic_stats(self,data)
scipy.io.arff.NumericAttribute.parse_attribute(cls,name,attr_string)
scipy.io.arff.NumericAttribute.parse_data(self,data_str)
scipy.io.arff.ParseArffError(ArffError)
scipy.io.arff.RelationalAttribute(self,name)
scipy.io.arff.RelationalAttribute.__str__(self)
scipy.io.arff.RelationalAttribute.parse_attribute(cls,name,attr_string)
scipy.io.arff.RelationalAttribute.parse_data(self,data_str)
scipy.io.arff.StringAttribute(self,name)
scipy.io.arff.StringAttribute.parse_attribute(cls,name,attr_string)
scipy.io.arff._arffread.ArffError(OSError)
scipy.io.arff._arffread.Attribute(self,name)
scipy.io.arff._arffread.Attribute.__init__(self,name)
scipy.io.arff._arffread.Attribute.__str__(self)
scipy.io.arff._arffread.Attribute.parse_attribute(cls,name,attr_string)
scipy.io.arff._arffread.Attribute.parse_data(self,data_str)
scipy.io.arff._arffread.DateAttribute(self,name,date_format,datetime_unit)
scipy.io.arff._arffread.DateAttribute.__init__(self,name,date_format,datetime_unit)
scipy.io.arff._arffread.DateAttribute.__str__(self)
scipy.io.arff._arffread.DateAttribute._get_date_format(atrv)
scipy.io.arff._arffread.DateAttribute.parse_attribute(cls,name,attr_string)
scipy.io.arff._arffread.DateAttribute.parse_data(self,data_str)
scipy.io.arff._arffread.MetaData(self,rel,attr)
scipy.io.arff._arffread.MetaData.__getitem__(self,key)
scipy.io.arff._arffread.MetaData.__init__(self,rel,attr)
scipy.io.arff._arffread.MetaData.__iter__(self)
scipy.io.arff._arffread.MetaData.__repr__(self)
scipy.io.arff._arffread.MetaData.names(self)
scipy.io.arff._arffread.MetaData.types(self)
scipy.io.arff._arffread.NominalAttribute(self,name,values)
scipy.io.arff._arffread.NominalAttribute.__init__(self,name,values)
scipy.io.arff._arffread.NominalAttribute.__str__(self)
scipy.io.arff._arffread.NominalAttribute._get_nom_val(atrv)
scipy.io.arff._arffread.NominalAttribute.parse_attribute(cls,name,attr_string)
scipy.io.arff._arffread.NominalAttribute.parse_data(self,data_str)
scipy.io.arff._arffread.NumericAttribute(self,name)
scipy.io.arff._arffread.NumericAttribute.__init__(self,name)
scipy.io.arff._arffread.NumericAttribute._basic_stats(self,data)
scipy.io.arff._arffread.NumericAttribute.parse_attribute(cls,name,attr_string)
scipy.io.arff._arffread.NumericAttribute.parse_data(self,data_str)
scipy.io.arff._arffread.ParseArffError(ArffError)
scipy.io.arff._arffread.RelationalAttribute(self,name)
scipy.io.arff._arffread.RelationalAttribute.__init__(self,name)
scipy.io.arff._arffread.RelationalAttribute.__str__(self)
scipy.io.arff._arffread.RelationalAttribute.parse_attribute(cls,name,attr_string)
scipy.io.arff._arffread.RelationalAttribute.parse_data(self,data_str)
scipy.io.arff._arffread.StringAttribute(self,name)
scipy.io.arff._arffread.StringAttribute.__init__(self,name)
scipy.io.arff._arffread.StringAttribute.parse_attribute(cls,name,attr_string)
scipy.io.arff._arffread._loadarff(ofile)
scipy.io.arff._arffread.basic_stats(data)
scipy.io.arff._arffread.csv_sniffer_has_bug_last_field()
scipy.io.arff._arffread.loadarff(f)
scipy.io.arff._arffread.print_attribute(name,tp,data)
scipy.io.arff._arffread.read_header(ofile)
scipy.io.arff._arffread.read_relational_attribute(ofile,relational_attribute,i)
scipy.io.arff._arffread.split_data_line(line,dialect=None)
scipy.io.arff._arffread.test_weka(filename)
scipy.io.arff._arffread.to_attribute(name,attr_string)
scipy.io.arff._arffread.tokenize_attribute(iterable,attribute)
scipy.io.arff._arffread.tokenize_single_comma(val)
scipy.io.arff._arffread.tokenize_single_wcomma(val)
scipy.io.arff._arffread.workaround_csv_sniffer_bug_last_field(sniff_line,dialect,delimiters)
scipy.io.arff._loadarff(ofile)
scipy.io.arff.basic_stats(data)
scipy.io.arff.csv_sniffer_has_bug_last_field()
scipy.io.arff.loadarff(f)
scipy.io.arff.print_attribute(name,tp,data)
scipy.io.arff.read_header(ofile)
scipy.io.arff.read_relational_attribute(ofile,relational_attribute,i)
scipy.io.arff.split_data_line(line,dialect=None)
scipy.io.arff.test_weka(filename)
scipy.io.arff.to_attribute(name,attr_string)
scipy.io.arff.tokenize_attribute(iterable,attribute)
scipy.io.arff.tokenize_single_comma(val)
scipy.io.arff.tokenize_single_wcomma(val)
scipy.io.arff.workaround_csv_sniffer_bug_last_field(sniff_line,dialect,delimiters)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/arff/__init__.py----------------------------------------
A:scipy.io.arff.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/arff/tests/test_arffread.py----------------------------------------
A:scipy.io.arff.tests.test_arffread.data_path->pjoin(os.path.dirname(__file__), 'data')
A:scipy.io.arff.tests.test_arffread.test1->pjoin(data_path, 'test1.arff')
A:scipy.io.arff.tests.test_arffread.test2->pjoin(data_path, 'test2.arff')
A:scipy.io.arff.tests.test_arffread.test3->pjoin(data_path, 'test3.arff')
A:scipy.io.arff.tests.test_arffread.test4->pjoin(data_path, 'test4.arff')
A:scipy.io.arff.tests.test_arffread.test5->pjoin(data_path, 'test5.arff')
A:scipy.io.arff.tests.test_arffread.test6->pjoin(data_path, 'test6.arff')
A:scipy.io.arff.tests.test_arffread.test7->pjoin(data_path, 'test7.arff')
A:scipy.io.arff.tests.test_arffread.test8->pjoin(data_path, 'test8.arff')
A:scipy.io.arff.tests.test_arffread.test9->pjoin(data_path, 'test9.arff')
A:scipy.io.arff.tests.test_arffread.test10->pjoin(data_path, 'test10.arff')
A:scipy.io.arff.tests.test_arffread.test11->pjoin(data_path, 'test11.arff')
A:scipy.io.arff.tests.test_arffread.test_quoted_nominal->pjoin(data_path, 'quoted_nominal.arff')
A:scipy.io.arff.tests.test_arffread.test_quoted_nominal_spaces->pjoin(data_path, 'quoted_nominal_spaces.arff')
A:scipy.io.arff.tests.test_arffread.missing->pjoin(data_path, 'missing.arff')
A:scipy.io.arff.tests.test_arffread.expect_missing_raw->numpy.array([[1, 5], [2, 4], [np.nan, np.nan]])
A:scipy.io.arff.tests.test_arffread.expect_missing->numpy.empty(3, [('yop', float), ('yap', float)])
A:scipy.io.arff.tests.test_arffread.(data, meta)->loadarff(nodata_filename)
A:scipy.io.arff.tests.test_arffread.(data1, meta1)->loadarff(f1)
A:scipy.io.arff.tests.test_arffread.(data2, meta2)->loadarff(Path(test1))
A:scipy.io.arff.tests.test_arffread.nodata_filename->os.path.join(data_path, 'nodata.arff')
A:scipy.io.arff.tests.test_arffread.expected_dtype->numpy.dtype([('sepallength', f'{end}f8'), ('sepalwidth', f'{end}f8'), ('petallength', f'{end}f8'), ('petalwidth', f'{end}f8'), ('class', 'S15')])
A:scipy.io.arff.tests.test_arffread.(rel, attrs)->read_header(ofile)
A:scipy.io.arff.tests.test_arffread.(_, _)->read_header(ofile)
A:scipy.io.arff.tests.test_arffread.(self.data, self.meta)->loadarff(test_quoted_nominal_spaces)
A:scipy.io.arff.tests.test_arffread.expected->numpy.array([(n,) for n in range(30000)], dtype=dtype_instance)
A:scipy.io.arff.tests.test_arffread.(age, smoker)->self.meta._attributes.values()
A:scipy.io.arff.tests.test_arffread.age_expected->numpy.array([18, 24, 44, 56, 89, 11], dtype=age_dtype_instance)
A:scipy.io.arff.tests.test_arffread.smoker_expected->numpy.array(['no  ', '  yes', 'no  ', 'no  ', '  yes', 'no  '], dtype=smoker_dtype_instance)
scipy.io.arff.tests.testTestData
scipy.io.arff.tests.testTestData._test(self,test_file)
scipy.io.arff.tests.testTestData.test1(self)
scipy.io.arff.tests.testTestData.test2(self)
scipy.io.arff.tests.testTestData.test3(self)
scipy.io.arff.tests.testTestData.test4(self)
scipy.io.arff.tests.testTestData.test_filelike(self)
scipy.io.arff.tests.testTestData.test_path(self)
scipy.io.arff.tests.testTestDateAttribute
scipy.io.arff.tests.testTestDateAttribute.setup_method(self)
scipy.io.arff.tests.testTestDateAttribute.test_date_attribute(self)
scipy.io.arff.tests.testTestDateAttribute.test_datetime_local_attribute(self)
scipy.io.arff.tests.testTestDateAttribute.test_datetime_missing(self)
scipy.io.arff.tests.testTestDateAttribute.test_datetime_timezone(self)
scipy.io.arff.tests.testTestDateAttribute.test_month_attribute(self)
scipy.io.arff.tests.testTestDateAttribute.test_year_attribute(self)
scipy.io.arff.tests.testTestHeader
scipy.io.arff.tests.testTestHeader.test_badtype_parsing(self)
scipy.io.arff.tests.testTestHeader.test_dateheader(self)
scipy.io.arff.tests.testTestHeader.test_dateheader_unsupported(self)
scipy.io.arff.tests.testTestHeader.test_fullheader1(self)
scipy.io.arff.tests.testTestHeader.test_type_parsing(self)
scipy.io.arff.tests.testTestMissingData
scipy.io.arff.tests.testTestMissingData.test_missing(self)
scipy.io.arff.tests.testTestNoData
scipy.io.arff.tests.testTestNoData.test_nodata(self)
scipy.io.arff.tests.testTestQuotedNominal
scipy.io.arff.tests.testTestQuotedNominal.setup_method(self)
scipy.io.arff.tests.testTestQuotedNominal.test_attributes(self)
scipy.io.arff.tests.testTestQuotedNominal.test_data(self)
scipy.io.arff.tests.testTestQuotedNominalSpaces
scipy.io.arff.tests.testTestQuotedNominalSpaces.setup_method(self)
scipy.io.arff.tests.testTestQuotedNominalSpaces.test_attributes(self)
scipy.io.arff.tests.testTestQuotedNominalSpaces.test_data(self)
scipy.io.arff.tests.testTestRelationalAttribute
scipy.io.arff.tests.testTestRelationalAttribute.setup_method(self)
scipy.io.arff.tests.testTestRelationalAttribute.test_attributes(self)
scipy.io.arff.tests.testTestRelationalAttribute.test_data(self)
scipy.io.arff.tests.testTestRelationalAttributeLong
scipy.io.arff.tests.testTestRelationalAttributeLong.setup_method(self)
scipy.io.arff.tests.testTestRelationalAttributeLong.test_attributes(self)
scipy.io.arff.tests.testTestRelationalAttributeLong.test_data(self)
scipy.io.arff.tests.test_arffread.TestData
scipy.io.arff.tests.test_arffread.TestData._test(self,test_file)
scipy.io.arff.tests.test_arffread.TestData.test1(self)
scipy.io.arff.tests.test_arffread.TestData.test2(self)
scipy.io.arff.tests.test_arffread.TestData.test3(self)
scipy.io.arff.tests.test_arffread.TestData.test4(self)
scipy.io.arff.tests.test_arffread.TestData.test_filelike(self)
scipy.io.arff.tests.test_arffread.TestData.test_path(self)
scipy.io.arff.tests.test_arffread.TestDateAttribute
scipy.io.arff.tests.test_arffread.TestDateAttribute.setup_method(self)
scipy.io.arff.tests.test_arffread.TestDateAttribute.test_date_attribute(self)
scipy.io.arff.tests.test_arffread.TestDateAttribute.test_datetime_local_attribute(self)
scipy.io.arff.tests.test_arffread.TestDateAttribute.test_datetime_missing(self)
scipy.io.arff.tests.test_arffread.TestDateAttribute.test_datetime_timezone(self)
scipy.io.arff.tests.test_arffread.TestDateAttribute.test_month_attribute(self)
scipy.io.arff.tests.test_arffread.TestDateAttribute.test_year_attribute(self)
scipy.io.arff.tests.test_arffread.TestHeader
scipy.io.arff.tests.test_arffread.TestHeader.test_badtype_parsing(self)
scipy.io.arff.tests.test_arffread.TestHeader.test_dateheader(self)
scipy.io.arff.tests.test_arffread.TestHeader.test_dateheader_unsupported(self)
scipy.io.arff.tests.test_arffread.TestHeader.test_fullheader1(self)
scipy.io.arff.tests.test_arffread.TestHeader.test_type_parsing(self)
scipy.io.arff.tests.test_arffread.TestMissingData
scipy.io.arff.tests.test_arffread.TestMissingData.test_missing(self)
scipy.io.arff.tests.test_arffread.TestNoData
scipy.io.arff.tests.test_arffread.TestNoData.test_nodata(self)
scipy.io.arff.tests.test_arffread.TestQuotedNominal
scipy.io.arff.tests.test_arffread.TestQuotedNominal.setup_method(self)
scipy.io.arff.tests.test_arffread.TestQuotedNominal.test_attributes(self)
scipy.io.arff.tests.test_arffread.TestQuotedNominal.test_data(self)
scipy.io.arff.tests.test_arffread.TestQuotedNominalSpaces
scipy.io.arff.tests.test_arffread.TestQuotedNominalSpaces.setup_method(self)
scipy.io.arff.tests.test_arffread.TestQuotedNominalSpaces.test_attributes(self)
scipy.io.arff.tests.test_arffread.TestQuotedNominalSpaces.test_data(self)
scipy.io.arff.tests.test_arffread.TestRelationalAttribute
scipy.io.arff.tests.test_arffread.TestRelationalAttribute.setup_method(self)
scipy.io.arff.tests.test_arffread.TestRelationalAttribute.test_attributes(self)
scipy.io.arff.tests.test_arffread.TestRelationalAttribute.test_data(self)
scipy.io.arff.tests.test_arffread.TestRelationalAttributeLong
scipy.io.arff.tests.test_arffread.TestRelationalAttributeLong.setup_method(self)
scipy.io.arff.tests.test_arffread.TestRelationalAttributeLong.test_attributes(self)
scipy.io.arff.tests.test_arffread.TestRelationalAttributeLong.test_data(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/io/arff/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/_index.py----------------------------------------
A:scipy.sparse._index.(x, y)->numpy.broadcast_arrays(a, b)
A:scipy.sparse._index.(row, col)->_unpack_index(key)
A:scipy.sparse._index.x->numpy.asarray(x.toarray(), dtype=self.dtype)
A:scipy.sparse._index.row->_boolean_index_to_array(bool_row)
A:scipy.sparse._index.col->_boolean_index_to_array(bool_col)
A:scipy.sparse._index.(i, j)->_broadcast_arrays(row, col)
A:scipy.sparse._index.max_indx->numpy.asarray(x.toarray(), dtype=self.dtype).max()
A:scipy.sparse._index.min_indx->numpy.asarray(x.toarray(), dtype=self.dtype).min()
A:scipy.sparse._index.i->int(i)
A:scipy.sparse._index.(x, _)->_broadcast_arrays(x, row)
A:scipy.sparse._index.index->_check_ellipsis(index)
A:scipy.sparse._index.idx->numpy.asanyarray(idx)
A:scipy.sparse._index.bool_row->_compatible_boolean_index(row)
A:scipy.sparse._index.bool_col->_compatible_boolean_index(col)
A:scipy.sparse._index.nslice->max(0, 2 - nd)
A:scipy.sparse._index.first->next(iter(idx), None)
scipy.sparse._index.IndexMixin
scipy.sparse._index.IndexMixin.__getitem__(self,key)
scipy.sparse._index.IndexMixin.__setitem__(self,key,x)
scipy.sparse._index.IndexMixin._asindices(self,idx,length)
scipy.sparse._index.IndexMixin._get_arrayXarray(self,row,col)
scipy.sparse._index.IndexMixin._get_arrayXint(self,row,col)
scipy.sparse._index.IndexMixin._get_arrayXslice(self,row,col)
scipy.sparse._index.IndexMixin._get_columnXarray(self,row,col)
scipy.sparse._index.IndexMixin._get_intXarray(self,row,col)
scipy.sparse._index.IndexMixin._get_intXint(self,row,col)
scipy.sparse._index.IndexMixin._get_intXslice(self,row,col)
scipy.sparse._index.IndexMixin._get_sliceXarray(self,row,col)
scipy.sparse._index.IndexMixin._get_sliceXint(self,row,col)
scipy.sparse._index.IndexMixin._get_sliceXslice(self,row,col)
scipy.sparse._index.IndexMixin._raise_on_1d_array_slice(self)
scipy.sparse._index.IndexMixin._set_arrayXarray(self,row,col,x)
scipy.sparse._index.IndexMixin._set_arrayXarray_sparse(self,row,col,x)
scipy.sparse._index.IndexMixin._set_intXint(self,row,col,x)
scipy.sparse._index.IndexMixin._validate_indices(self,key)
scipy.sparse._index.IndexMixin.getcol(self,i)
scipy.sparse._index.IndexMixin.getrow(self,i)
scipy.sparse._index._boolean_index_to_array(idx)
scipy.sparse._index._broadcast_arrays(a,b)
scipy.sparse._index._check_ellipsis(index)
scipy.sparse._index._compatible_boolean_index(idx)
scipy.sparse._index._first_element_bool(idx,max_dim=2)
scipy.sparse._index._maybe_bool_ndarray(idx)
scipy.sparse._index._unpack_index(index)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/construct.py----------------------------------------
scipy.sparse.construct.__dir__()
scipy.sparse.construct.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/dia.py----------------------------------------
scipy.sparse.dia.__dir__()
scipy.sparse.dia.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/_extract.py----------------------------------------
A:scipy.sparse._extract.A->coo_matrix(A, copy=False)
scipy.sparse._extract._masked_coo(A,mask)
scipy.sparse._extract.find(A)
scipy.sparse._extract.tril(A,k=0,format=None)
scipy.sparse._extract.triu(A,k=0,format=None)
scipy.sparse._masked_coo(A,mask)
scipy.sparse.find(A)
scipy.sparse.tril(A,k=0,format=None)
scipy.sparse.triu(A,k=0,format=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/csr.py----------------------------------------
scipy.sparse.csr.__dir__()
scipy.sparse.csr.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/_arrays.py----------------------------------------
A:scipy.sparse._arrays.bsr_array.__doc__->_matrix_doc_to_array(bsr_matrix.__doc__)
A:scipy.sparse._arrays.coo_array.__doc__->_matrix_doc_to_array(coo_matrix.__doc__)
A:scipy.sparse._arrays.csc_array.__doc__->_matrix_doc_to_array(csc_matrix.__doc__)
A:scipy.sparse._arrays.csr_array.__doc__->_matrix_doc_to_array(csr_matrix.__doc__)
A:scipy.sparse._arrays.dia_array.__doc__->_matrix_doc_to_array(dia_matrix.__doc__)
A:scipy.sparse._arrays.dok_array.__doc__->_matrix_doc_to_array(dok_matrix.__doc__)
A:scipy.sparse._arrays.lil_array.__doc__->_matrix_doc_to_array(lil_matrix.__doc__)
scipy.sparse._arrays._matrix_doc_to_array(docstr)
scipy.sparse._arrays._sparray
scipy.sparse._arrays._sparray.__mul__(self,*args,**kwargs)
scipy.sparse._arrays._sparray.__pow__(self,*args,**kwargs)
scipy.sparse._arrays._sparray.__rmul__(self,*args,**kwargs)
scipy.sparse._arrays._sparray._bsr_container(self)
scipy.sparse._arrays._sparray._coo_container(self)
scipy.sparse._arrays._sparray._csc_container(self)
scipy.sparse._arrays._sparray._csr_container(self)
scipy.sparse._arrays._sparray._dia_container(self)
scipy.sparse._arrays._sparray._dok_container(self)
scipy.sparse._arrays._sparray._lil_container(self)
scipy.sparse._arrays.bsr_array(_sparray,bsr_matrix)
scipy.sparse._arrays.coo_array(_sparray,coo_matrix)
scipy.sparse._arrays.csc_array(_sparray,csc_matrix)
scipy.sparse._arrays.csr_array(_sparray,csr_matrix)
scipy.sparse._arrays.dia_array(_sparray,dia_matrix)
scipy.sparse._arrays.dok_array(_sparray,dok_matrix)
scipy.sparse._arrays.lil_array(_sparray,lil_matrix)
scipy.sparse.bsr_array(_sparray,bsr_matrix)
scipy.sparse.coo_array(_sparray,coo_matrix)
scipy.sparse.csc_array(_sparray,csc_matrix)
scipy.sparse.csr_array(_sparray,csr_matrix)
scipy.sparse.dia_array(_sparray,dia_matrix)
scipy.sparse.dok_array(_sparray,dok_matrix)
scipy.sparse.lil_array(_sparray,lil_matrix)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/sputils.py----------------------------------------
scipy.sparse.sputils.__dir__()
scipy.sparse.sputils.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/_construct.py----------------------------------------
A:scipy.sparse._construct.mn->len(data[0])
A:scipy.sparse._construct.diagonals->list(map(np.atleast_1d, diagonals))
A:scipy.sparse._construct.offsets->numpy.atleast_1d(offsets)
A:scipy.sparse._construct.dtype->numpy.dtype(dtype)
A:scipy.sparse._construct.M->max(0, M)
A:scipy.sparse._construct.data_arr->numpy.zeros((len(offsets), M), dtype=dtype)
A:scipy.sparse._construct.K->min(m, n)
A:scipy.sparse._construct.k->int(round(density * m * n))
A:scipy.sparse._construct.length->min(m + offset, n - offset, K)
A:scipy.sparse._construct.idx_dtype->get_index_dtype(maxval=max(shape))
A:scipy.sparse._construct.indptr->numpy.zeros(constant_dim + 1, dtype=idx_dtype)
A:scipy.sparse._construct.indices->numpy.empty(0, dtype=idx_dtype)
A:scipy.sparse._construct.data->numpy.concatenate(data)
A:scipy.sparse._construct.row->numpy.concatenate(row)
A:scipy.sparse._construct.col->numpy.concatenate(col)
A:scipy.sparse._construct.diags->numpy.ones((1, max(0, min(m + k, n))), dtype=dtype)
A:scipy.sparse._construct.B->coo_matrix(B)
A:scipy.sparse._construct.A->coo_matrix(blocks[i, j])
A:scipy.sparse._construct.L->kron(eye(B.shape[0], dtype=dtype), A, format=format)
A:scipy.sparse._construct.R->kron(B, eye(A.shape[0], dtype=dtype), format=format)
A:scipy.sparse._construct.last_indptr->idx_dtype(0)
A:scipy.sparse._construct.idxs->slice(sum_dim, sum_dim + b.shape[axis])
A:scipy.sparse._construct.n_blocks->len(blocks)
A:scipy.sparse._construct.other_axis_dims->set((b.shape[other_axis] for b in blocks))
A:scipy.sparse._construct.data_cat->numpy.concatenate([b.data for b in blocks])
A:scipy.sparse._construct.sum_dim->sum((b.shape[axis] for b in blocks))
A:scipy.sparse._construct.nnz->sum((block.nnz for block in blocks[block_mask]))
A:scipy.sparse._construct.stack_dim_cat->numpy.array([b.shape[axis] for b in blocks], dtype=idx_dtype)
A:scipy.sparse._construct.indptr_cat->numpy.concatenate(indptr_list).astype(idx_dtype)
A:scipy.sparse._construct.indices_cat->numpy.concatenate([b.indices for b in blocks]).astype(idx_dtype)
A:scipy.sparse._construct.blocks->numpy.asarray(blocks, dtype='object')
A:scipy.sparse._construct.block_mask->numpy.zeros(blocks.shape, dtype=bool)
A:scipy.sparse._construct.brow_lengths->numpy.zeros(M, dtype=np.int64)
A:scipy.sparse._construct.bcol_lengths->numpy.zeros(N, dtype=np.int64)
A:scipy.sparse._construct.row_offsets->numpy.append(0, np.cumsum(brow_lengths))
A:scipy.sparse._construct.col_offsets->numpy.append(0, np.cumsum(bcol_lengths))
A:scipy.sparse._construct.(ii, jj)->numpy.nonzero(block_mask)
A:scipy.sparse._construct.idx->slice(nnz, nnz + B.nnz)
A:scipy.sparse._construct.a->a.tocoo().tocoo()
A:scipy.sparse._construct.(a_row, a_col)->numpy.divmod(np.arange(nrows * ncols), ncols)
A:scipy.sparse._construct.random_state->check_random_state(random_state)
A:scipy.sparse._construct.data_rvs->partial(random_state.uniform, 0.0, 1.0)
A:scipy.sparse._construct.ind->check_random_state(random_state).choice(mn, size=k, replace=False)
A:scipy.sparse._construct.j->numpy.floor(ind * 1.0 / m).astype(tp, copy=False)
A:scipy.sparse._construct.i->(ind - j * m).astype(tp, copy=False)
A:scipy.sparse._construct.vals->data_rvs(k).astype(dtype, copy=False)
scipy.sparse._compressed_sparse_stack(blocks,axis)
scipy.sparse._construct._compressed_sparse_stack(blocks,axis)
scipy.sparse._construct._stack_along_minor_axis(blocks,axis)
scipy.sparse._construct.block_diag(mats,format=None,dtype=None)
scipy.sparse._construct.bmat(blocks,format=None,dtype=None)
scipy.sparse._construct.diags(diagonals,offsets=0,shape=None,format=None,dtype=None)
scipy.sparse._construct.eye(m,n=None,k=0,dtype=float,format=None)
scipy.sparse._construct.hstack(blocks,format=None,dtype=None)
scipy.sparse._construct.identity(n,dtype='d',format=None)
scipy.sparse._construct.kron(A,B,format=None)
scipy.sparse._construct.kronsum(A,B,format=None)
scipy.sparse._construct.rand(m,n,density=0.01,format='coo',dtype=None,random_state=None)
scipy.sparse._construct.random(m,n,density=0.01,format='coo',dtype=None,random_state=None,data_rvs=None)
scipy.sparse._construct.spdiags(data,diags,m=None,n=None,format=None)
scipy.sparse._construct.vstack(blocks,format=None,dtype=None)
scipy.sparse._stack_along_minor_axis(blocks,axis)
scipy.sparse.block_diag(mats,format=None,dtype=None)
scipy.sparse.bmat(blocks,format=None,dtype=None)
scipy.sparse.diags(diagonals,offsets=0,shape=None,format=None,dtype=None)
scipy.sparse.eye(m,n=None,k=0,dtype=float,format=None)
scipy.sparse.hstack(blocks,format=None,dtype=None)
scipy.sparse.identity(n,dtype='d',format=None)
scipy.sparse.kron(A,B,format=None)
scipy.sparse.kronsum(A,B,format=None)
scipy.sparse.rand(m,n,density=0.01,format='coo',dtype=None,random_state=None)
scipy.sparse.random(m,n,density=0.01,format='coo',dtype=None,random_state=None,data_rvs=None)
scipy.sparse.spdiags(data,diags,m=None,n=None,format=None)
scipy.sparse.vstack(blocks,format=None,dtype=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/compressed.py----------------------------------------
scipy.sparse.compressed.__dir__()
scipy.sparse.compressed.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/data.py----------------------------------------
scipy.sparse.data.__dir__()
scipy.sparse.data.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/coo.py----------------------------------------
scipy.sparse.coo.__dir__()
scipy.sparse.coo.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/csc.py----------------------------------------
scipy.sparse.csc.__dir__()
scipy.sparse.csc.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/_lil.py----------------------------------------
A:scipy.sparse._lil.self.dtype->getdtype(dtype, arg1, default=float)
A:scipy.sparse._lil.A->self._csr_container(A, dtype=dtype).tolil()
A:scipy.sparse._lil.self._shape->check_shape(A.shape)
A:scipy.sparse._lil.self.rows->numpy.resize(self.rows, new_M)
A:scipy.sparse._lil.self.data->numpy.resize(self.data, new_M)
A:scipy.sparse._lil.out->numpy.zeros(self.shape[1], dtype=np.intp)
A:scipy.sparse._lil.new->self._lil_container(shape, dtype=self.dtype)
A:scipy.sparse._lil.x->x.copy().copy()
A:scipy.sparse._lil.v->_csparsetools.lil_get1(self.shape[0], self.shape[1], self.rows, self.data, row, col)
A:scipy.sparse._lil.row->numpy.arange(*row.indices(self.shape[0]))
A:scipy.sparse._lil.(row, col)->_broadcast_arrays(row[:, None], col)
A:scipy.sparse._lil.(i, j)->map(np.atleast_2d, _prepare_index_for_memoryview(row, col))
A:scipy.sparse._lil.(j_start, j_stop, j_stride)->col_slice.indices(self.shape[1])
A:scipy.sparse._lil.col_range->range(j_start, j_stop, j_stride)
A:scipy.sparse._lil.nj->len(col_range)
A:scipy.sparse._lil.(i, j, x)->map(np.atleast_2d, _prepare_index_for_memoryview(row, col, x))
A:scipy.sparse._lil.(x, _)->_broadcast_arrays(x, row)
A:scipy.sparse._lil.res_dtype->upcast_scalar(self.dtype, other)
A:scipy.sparse._lil.shape->check_shape(shape)
A:scipy.sparse._lil.(order, copy)->check_reshape_kwargs(kwargs)
A:scipy.sparse._lil.(new_r, new_c)->numpy.unravel_index(i + j * nrows, shape, order)
A:scipy.sparse._lil.trunc->bisect_left(row, new_N)
A:scipy.sparse._lil.d->self._process_toarray_args(order, out)
A:scipy.sparse._lil.indptr->numpy.empty(M + 1, dtype=idx_dtype)
A:scipy.sparse._lil.idx_dtype->get_index_dtype(maxval=max(N, nnz))
A:scipy.sparse._lil.lengths->numpy.empty(M, dtype=idx_dtype)
A:scipy.sparse._lil.nnz->numpy.empty(M, dtype=idx_dtype).sum(dtype=np.int64)
A:scipy.sparse._lil.indices->numpy.empty(nnz, dtype=idx_dtype)
A:scipy.sparse._lil.data->numpy.empty(nnz, dtype=self.dtype)
A:scipy.sparse._lil.j->j.astype(np.intp).astype(np.intp)
A:scipy.sparse._lil.i->i.astype(np.intp).astype(np.intp)
scipy.sparse._lil._prepare_index_for_memoryview(i,j,x=None)
scipy.sparse._lil.isspmatrix_lil(x)
scipy.sparse._lil.lil_matrix(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse._lil.lil_matrix.__getitem__(self,key)
scipy.sparse._lil.lil_matrix.__iadd__(self,other)
scipy.sparse._lil.lil_matrix.__imul__(self,other)
scipy.sparse._lil.lil_matrix.__init__(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse._lil.lil_matrix.__isub__(self,other)
scipy.sparse._lil.lil_matrix.__itruediv__(self,other)
scipy.sparse._lil.lil_matrix.__setitem__(self,key,x)
scipy.sparse._lil.lil_matrix.__str__(self)
scipy.sparse._lil.lil_matrix.__truediv__(self,other)
scipy.sparse._lil.lil_matrix._asindices(self,idx,N)
scipy.sparse._lil.lil_matrix._get_arrayXarray(self,row,col)
scipy.sparse._lil.lil_matrix._get_arrayXint(self,row,col)
scipy.sparse._lil.lil_matrix._get_arrayXslice(self,row,col)
scipy.sparse._lil.lil_matrix._get_columnXarray(self,row,col)
scipy.sparse._lil.lil_matrix._get_intXarray(self,row,col)
scipy.sparse._lil.lil_matrix._get_intXint(self,row,col)
scipy.sparse._lil.lil_matrix._get_intXslice(self,row,col)
scipy.sparse._lil.lil_matrix._get_row_ranges(self,rows,col_slice)
scipy.sparse._lil.lil_matrix._get_sliceXarray(self,row,col)
scipy.sparse._lil.lil_matrix._get_sliceXint(self,row,col)
scipy.sparse._lil.lil_matrix._get_sliceXslice(self,row,col)
scipy.sparse._lil.lil_matrix._mul_scalar(self,other)
scipy.sparse._lil.lil_matrix._set_arrayXarray(self,row,col,x)
scipy.sparse._lil.lil_matrix._set_arrayXarray_sparse(self,row,col,x)
scipy.sparse._lil.lil_matrix._set_intXint(self,row,col,x)
scipy.sparse._lil.lil_matrix.copy(self)
scipy.sparse._lil.lil_matrix.count_nonzero(self)
scipy.sparse._lil.lil_matrix.getnnz(self,axis=None)
scipy.sparse._lil.lil_matrix.getrow(self,i)
scipy.sparse._lil.lil_matrix.getrowview(self,i)
scipy.sparse._lil.lil_matrix.reshape(self,*args,**kwargs)
scipy.sparse._lil.lil_matrix.resize(self,*shape)
scipy.sparse._lil.lil_matrix.toarray(self,order=None,out=None)
scipy.sparse._lil.lil_matrix.tocsr(self,copy=False)
scipy.sparse._lil.lil_matrix.tolil(self,copy=False)
scipy.sparse._lil.lil_matrix.transpose(self,axes=None,copy=False)
scipy.sparse._prepare_index_for_memoryview(i,j,x=None)
scipy.sparse.isspmatrix_lil(x)
scipy.sparse.lil_matrix(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse.lil_matrix.__getitem__(self,key)
scipy.sparse.lil_matrix.__iadd__(self,other)
scipy.sparse.lil_matrix.__imul__(self,other)
scipy.sparse.lil_matrix.__isub__(self,other)
scipy.sparse.lil_matrix.__itruediv__(self,other)
scipy.sparse.lil_matrix.__setitem__(self,key,x)
scipy.sparse.lil_matrix.__str__(self)
scipy.sparse.lil_matrix.__truediv__(self,other)
scipy.sparse.lil_matrix._asindices(self,idx,N)
scipy.sparse.lil_matrix._get_arrayXarray(self,row,col)
scipy.sparse.lil_matrix._get_arrayXint(self,row,col)
scipy.sparse.lil_matrix._get_arrayXslice(self,row,col)
scipy.sparse.lil_matrix._get_columnXarray(self,row,col)
scipy.sparse.lil_matrix._get_intXarray(self,row,col)
scipy.sparse.lil_matrix._get_intXint(self,row,col)
scipy.sparse.lil_matrix._get_intXslice(self,row,col)
scipy.sparse.lil_matrix._get_row_ranges(self,rows,col_slice)
scipy.sparse.lil_matrix._get_sliceXarray(self,row,col)
scipy.sparse.lil_matrix._get_sliceXint(self,row,col)
scipy.sparse.lil_matrix._get_sliceXslice(self,row,col)
scipy.sparse.lil_matrix._mul_scalar(self,other)
scipy.sparse.lil_matrix._set_arrayXarray(self,row,col,x)
scipy.sparse.lil_matrix._set_arrayXarray_sparse(self,row,col,x)
scipy.sparse.lil_matrix._set_intXint(self,row,col,x)
scipy.sparse.lil_matrix.copy(self)
scipy.sparse.lil_matrix.count_nonzero(self)
scipy.sparse.lil_matrix.getnnz(self,axis=None)
scipy.sparse.lil_matrix.getrow(self,i)
scipy.sparse.lil_matrix.getrowview(self,i)
scipy.sparse.lil_matrix.reshape(self,*args,**kwargs)
scipy.sparse.lil_matrix.resize(self,*shape)
scipy.sparse.lil_matrix.toarray(self,order=None,out=None)
scipy.sparse.lil_matrix.tocsr(self,copy=False)
scipy.sparse.lil_matrix.tolil(self,copy=False)
scipy.sparse.lil_matrix.transpose(self,axes=None,copy=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/base.py----------------------------------------
scipy.sparse.base.__dir__()
scipy.sparse.base.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/_bsr.py----------------------------------------
A:scipy.sparse._bsr.arg1->self._coo_container(arg1, dtype=dtype).tobsr(blocksize=blocksize)
A:scipy.sparse._bsr.self._shape->check_shape(shape)
A:scipy.sparse._bsr.blocksize->property(fget=_get_blocksize)
A:scipy.sparse._bsr.self.data->to_native(self.data)
A:scipy.sparse._bsr.idx_dtype->get_index_dtype((self.indptr, self.indices, other.indptr, other.indices), maxval=max_bnnz)
A:scipy.sparse._bsr.self.indices->numpy.asarray(self.indices, dtype=idx_dtype)
A:scipy.sparse._bsr.self.indptr->numpy.asarray(self.indptr, dtype=idx_dtype)
A:scipy.sparse._bsr.maxval->max(maxval, max(blocksize))
A:scipy.sparse._bsr.y->numpy.zeros(min(rows + min(k, 0), cols - max(k, 0)), dtype=upcast(self.dtype))
A:scipy.sparse._bsr.result->numpy.zeros((M, n_vecs), dtype=upcast(self.dtype, other.dtype))
A:scipy.sparse._bsr.other->self.__class__(other, blocksize=self.blocksize)
A:scipy.sparse._bsr.bnnz->csr_matmat_maxnnz(M // R, N // C, self.indptr.astype(idx_dtype), self.indices.astype(idx_dtype), other.indptr.astype(idx_dtype), other.indices.astype(idx_dtype))
A:scipy.sparse._bsr.indptr->numpy.empty(self.indptr.shape, dtype=idx_dtype)
A:scipy.sparse._bsr.indices->indices.copy().copy()
A:scipy.sparse._bsr.data->data.reshape(-1, R, C).reshape(-1, R, C)
A:scipy.sparse._bsr.indptr_diff->numpy.diff(self.indptr)
A:scipy.sparse._bsr.indptr_diff_limited->numpy.diff(self.indptr).astype(np.intp)
A:scipy.sparse._bsr.row->row.reshape(-1).reshape(-1)
A:scipy.sparse._bsr.col->col.reshape(-1).reshape(-1)
A:scipy.sparse._bsr.mask->(self.data != 0).reshape(-1, R * C).sum(axis=1)
A:scipy.sparse._bsr.fn->getattr(_sparsetools, self.format + op + self.format)
scipy.sparse._bsr.bsr_matrix(self,arg1,shape=None,dtype=None,copy=False,blocksize=None)
scipy.sparse._bsr.bsr_matrix.__getitem__(self,key)
scipy.sparse._bsr.bsr_matrix.__init__(self,arg1,shape=None,dtype=None,copy=False,blocksize=None)
scipy.sparse._bsr.bsr_matrix.__repr__(self)
scipy.sparse._bsr.bsr_matrix.__setitem__(self,key,val)
scipy.sparse._bsr.bsr_matrix._add_dense(self,other)
scipy.sparse._bsr.bsr_matrix._binopt(self,other,op,in_shape=None,out_shape=None)
scipy.sparse._bsr.bsr_matrix._get_blocksize(self)
scipy.sparse._bsr.bsr_matrix._mul_multivector(self,other)
scipy.sparse._bsr.bsr_matrix._mul_sparse_matrix(self,other)
scipy.sparse._bsr.bsr_matrix._mul_vector(self,other)
scipy.sparse._bsr.bsr_matrix._with_data(self,data,copy=True)
scipy.sparse._bsr.bsr_matrix.check_format(self,full_check=True)
scipy.sparse._bsr.bsr_matrix.diagonal(self,k=0)
scipy.sparse._bsr.bsr_matrix.eliminate_zeros(self)
scipy.sparse._bsr.bsr_matrix.getnnz(self,axis=None)
scipy.sparse._bsr.bsr_matrix.prune(self)
scipy.sparse._bsr.bsr_matrix.sort_indices(self)
scipy.sparse._bsr.bsr_matrix.sum_duplicates(self)
scipy.sparse._bsr.bsr_matrix.toarray(self,order=None,out=None)
scipy.sparse._bsr.bsr_matrix.tobsr(self,blocksize=None,copy=False)
scipy.sparse._bsr.bsr_matrix.tocoo(self,copy=True)
scipy.sparse._bsr.bsr_matrix.tocsc(self,copy=False)
scipy.sparse._bsr.bsr_matrix.tocsr(self,copy=False)
scipy.sparse._bsr.bsr_matrix.transpose(self,axes=None,copy=False)
scipy.sparse._bsr.isspmatrix_bsr(x)
scipy.sparse.bsr_matrix(self,arg1,shape=None,dtype=None,copy=False,blocksize=None)
scipy.sparse.bsr_matrix.__getitem__(self,key)
scipy.sparse.bsr_matrix.__repr__(self)
scipy.sparse.bsr_matrix.__setitem__(self,key,val)
scipy.sparse.bsr_matrix._add_dense(self,other)
scipy.sparse.bsr_matrix._binopt(self,other,op,in_shape=None,out_shape=None)
scipy.sparse.bsr_matrix._get_blocksize(self)
scipy.sparse.bsr_matrix._mul_multivector(self,other)
scipy.sparse.bsr_matrix._mul_sparse_matrix(self,other)
scipy.sparse.bsr_matrix._mul_vector(self,other)
scipy.sparse.bsr_matrix._with_data(self,data,copy=True)
scipy.sparse.bsr_matrix.check_format(self,full_check=True)
scipy.sparse.bsr_matrix.diagonal(self,k=0)
scipy.sparse.bsr_matrix.eliminate_zeros(self)
scipy.sparse.bsr_matrix.getnnz(self,axis=None)
scipy.sparse.bsr_matrix.prune(self)
scipy.sparse.bsr_matrix.sort_indices(self)
scipy.sparse.bsr_matrix.sum_duplicates(self)
scipy.sparse.bsr_matrix.toarray(self,order=None,out=None)
scipy.sparse.bsr_matrix.tobsr(self,blocksize=None,copy=False)
scipy.sparse.bsr_matrix.tocoo(self,copy=True)
scipy.sparse.bsr_matrix.tocsc(self,copy=False)
scipy.sparse.bsr_matrix.tocsr(self,copy=False)
scipy.sparse.bsr_matrix.transpose(self,axes=None,copy=False)
scipy.sparse.isspmatrix_bsr(x)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/dok.py----------------------------------------
scipy.sparse.dok.__dir__()
scipy.sparse.dok.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/_dok.py----------------------------------------
A:scipy.sparse._dok.self.dtype->getdtype(dtype, default=float)
A:scipy.sparse._dok.self._shape->check_shape(arg1.shape)
A:scipy.sparse._dok.arg1->numpy.asarray(arg1)
A:scipy.sparse._dok.d->self._coo_container(arg1, dtype=dtype).todok()
A:scipy.sparse._dok.new_matrix->self.reshape(shape, copy=False).asformat(self.format)
A:scipy.sparse._dok.shape->check_shape(shape)
A:scipy.sparse._dok.(row_start, row_stop, row_step)->numpy.fromiter((i for (i, _) in self.keys()), dtype=idx_dtype, count=self.nnz).indices(self.shape[0])
A:scipy.sparse._dok.(col_start, col_stop, col_step)->numpy.fromiter((j for (_, j) in self.keys()), dtype=idx_dtype, count=self.nnz).indices(self.shape[1])
A:scipy.sparse._dok.row_range->range(row_start, row_stop, row_step)
A:scipy.sparse._dok.col_range->range(col_start, col_stop, col_step)
A:scipy.sparse._dok.newdok->self._dok_container(i.shape, dtype=self.dtype)
A:scipy.sparse._dok.(i, ri)->divmod(int(key[0]) - row_start, row_step)
A:scipy.sparse._dok.(j, rj)->divmod(int(key[1]) - col_start, col_step)
A:scipy.sparse._dok.x->x.ravel().ravel()
A:scipy.sparse._dok.col->numpy.fromiter((j for (_, j) in self.keys()), dtype=idx_dtype, count=self.nnz)
A:scipy.sparse._dok.row->numpy.fromiter((i for (i, _) in self.keys()), dtype=idx_dtype, count=self.nnz)
A:scipy.sparse._dok.v->dict.get(self, (i[key], j[key]), 0)
A:scipy.sparse._dok.(i, j)->map(np.atleast_2d, np.broadcast_arrays(row, col))
A:scipy.sparse._dok.res_dtype->upcast_scalar(self.dtype, other)
A:scipy.sparse._dok.new->self._dok_container(self.shape, dtype=self.dtype)
A:scipy.sparse._dok.csc->self.tocsc()
A:scipy.sparse._dok.result->numpy.zeros(result_shape, dtype=result_dtype)
A:scipy.sparse._dok.result_dtype->upcast(self.dtype, other.dtype)
A:scipy.sparse._dok.idx_dtype->get_index_dtype(maxval=max(self.shape))
A:scipy.sparse._dok.data->numpy.fromiter(self.values(), dtype=self.dtype, count=self.nnz)
A:scipy.sparse._dok.A->self._coo_container((data, (row, col)), shape=self.shape, dtype=self.dtype)
scipy.sparse._dok.dok_matrix(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse._dok.dok_matrix.__add__(self,other)
scipy.sparse._dok.dok_matrix.__imul__(self,other)
scipy.sparse._dok.dok_matrix.__init__(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse._dok.dok_matrix.__itruediv__(self,other)
scipy.sparse._dok.dok_matrix.__len__(self)
scipy.sparse._dok.dok_matrix.__neg__(self)
scipy.sparse._dok.dok_matrix.__radd__(self,other)
scipy.sparse._dok.dok_matrix.__reduce__(self)
scipy.sparse._dok.dok_matrix.__truediv__(self,other)
scipy.sparse._dok.dok_matrix._get_arrayXarray(self,row,col)
scipy.sparse._dok.dok_matrix._get_arrayXint(self,row,col)
scipy.sparse._dok.dok_matrix._get_arrayXslice(self,row,col)
scipy.sparse._dok.dok_matrix._get_columnXarray(self,row,col)
scipy.sparse._dok.dok_matrix._get_intXarray(self,row,col)
scipy.sparse._dok.dok_matrix._get_intXint(self,row,col)
scipy.sparse._dok.dok_matrix._get_intXslice(self,row,col)
scipy.sparse._dok.dok_matrix._get_sliceXarray(self,row,col)
scipy.sparse._dok.dok_matrix._get_sliceXint(self,row,col)
scipy.sparse._dok.dok_matrix._get_sliceXslice(self,row,col)
scipy.sparse._dok.dok_matrix._mul_multivector(self,other)
scipy.sparse._dok.dok_matrix._mul_scalar(self,other)
scipy.sparse._dok.dok_matrix._mul_vector(self,other)
scipy.sparse._dok.dok_matrix._set_arrayXarray(self,row,col,x)
scipy.sparse._dok.dok_matrix._set_intXint(self,row,col,x)
scipy.sparse._dok.dok_matrix._update(self,data)
scipy.sparse._dok.dok_matrix.conjtransp(self)
scipy.sparse._dok.dok_matrix.copy(self)
scipy.sparse._dok.dok_matrix.count_nonzero(self)
scipy.sparse._dok.dok_matrix.get(self,key,default=0.0)
scipy.sparse._dok.dok_matrix.getnnz(self,axis=None)
scipy.sparse._dok.dok_matrix.resize(self,*shape)
scipy.sparse._dok.dok_matrix.set_shape(self,shape)
scipy.sparse._dok.dok_matrix.tocoo(self,copy=False)
scipy.sparse._dok.dok_matrix.tocsc(self,copy=False)
scipy.sparse._dok.dok_matrix.todok(self,copy=False)
scipy.sparse._dok.dok_matrix.transpose(self,axes=None,copy=False)
scipy.sparse._dok.dok_matrix.update(self,val)
scipy.sparse._dok.isspmatrix_dok(x)
scipy.sparse.dok_matrix(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse.dok_matrix.__add__(self,other)
scipy.sparse.dok_matrix.__imul__(self,other)
scipy.sparse.dok_matrix.__itruediv__(self,other)
scipy.sparse.dok_matrix.__len__(self)
scipy.sparse.dok_matrix.__neg__(self)
scipy.sparse.dok_matrix.__radd__(self,other)
scipy.sparse.dok_matrix.__reduce__(self)
scipy.sparse.dok_matrix.__truediv__(self,other)
scipy.sparse.dok_matrix._get_arrayXarray(self,row,col)
scipy.sparse.dok_matrix._get_arrayXint(self,row,col)
scipy.sparse.dok_matrix._get_arrayXslice(self,row,col)
scipy.sparse.dok_matrix._get_columnXarray(self,row,col)
scipy.sparse.dok_matrix._get_intXarray(self,row,col)
scipy.sparse.dok_matrix._get_intXint(self,row,col)
scipy.sparse.dok_matrix._get_intXslice(self,row,col)
scipy.sparse.dok_matrix._get_sliceXarray(self,row,col)
scipy.sparse.dok_matrix._get_sliceXint(self,row,col)
scipy.sparse.dok_matrix._get_sliceXslice(self,row,col)
scipy.sparse.dok_matrix._mul_multivector(self,other)
scipy.sparse.dok_matrix._mul_scalar(self,other)
scipy.sparse.dok_matrix._mul_vector(self,other)
scipy.sparse.dok_matrix._set_arrayXarray(self,row,col,x)
scipy.sparse.dok_matrix._set_intXint(self,row,col,x)
scipy.sparse.dok_matrix._update(self,data)
scipy.sparse.dok_matrix.conjtransp(self)
scipy.sparse.dok_matrix.copy(self)
scipy.sparse.dok_matrix.count_nonzero(self)
scipy.sparse.dok_matrix.get(self,key,default=0.0)
scipy.sparse.dok_matrix.getnnz(self,axis=None)
scipy.sparse.dok_matrix.resize(self,*shape)
scipy.sparse.dok_matrix.set_shape(self,shape)
scipy.sparse.dok_matrix.tocoo(self,copy=False)
scipy.sparse.dok_matrix.tocsc(self,copy=False)
scipy.sparse.dok_matrix.todok(self,copy=False)
scipy.sparse.dok_matrix.transpose(self,axes=None,copy=False)
scipy.sparse.dok_matrix.update(self,val)
scipy.sparse.isspmatrix_dok(x)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/extract.py----------------------------------------
scipy.sparse.extract.__dir__()
scipy.sparse.extract.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/_spfuncs.py----------------------------------------
A:scipy.sparse._spfuncs.A->csr_matrix(A)
A:scipy.sparse._spfuncs.nnz->float(A.nnz)
scipy.sparse._spfuncs.count_blocks(A,blocksize)
scipy.sparse._spfuncs.estimate_blocksize(A,efficiency=0.7)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/_data.py----------------------------------------
A:scipy.sparse._data.dtype->numpy.dtype(dtype)
A:scipy.sparse._data.data->data.astype(dtype).astype(dtype)
A:scipy.sparse._data.result->op(self._deduped_data())
A:scipy.sparse._data.(major_index, value)->self.tocoo()._minor_reduce(min_or_max)
A:scipy.sparse._data.value[not_full]->min_or_max(value[not_full], 0)
A:scipy.sparse._data.major_index->numpy.compress(mask, major_index)
A:scipy.sparse._data.value->numpy.compress(mask, value)
A:scipy.sparse._data.zero->self.dtype.type(0)
A:scipy.sparse._data.m->min_or_max(zero, m)
A:scipy.sparse._data.(ret_size, line_size)->self.tocoo()._swap(mat.shape)
A:scipy.sparse._data.ret->ret.reshape(-1, 1).reshape(-1, 1)
A:scipy.sparse._data.(nz_lines,)->numpy.nonzero(np.diff(mat.indptr))
A:scipy.sparse._data.am->op(mat.data)
A:scipy.sparse._data.zero_ind->_find_missing_index(ind, size)
A:scipy.sparse._data.ret[i]->min(am, zero_ind)
A:scipy.sparse._data.mat->self.tocoo()
A:scipy.sparse._data.size->numpy.prod(mat.shape)
scipy.sparse._data._data_matrix(self)
scipy.sparse._data._data_matrix.__abs__(self)
scipy.sparse._data._data_matrix.__imul__(self,other)
scipy.sparse._data._data_matrix.__init__(self)
scipy.sparse._data._data_matrix.__itruediv__(self,other)
scipy.sparse._data._data_matrix.__neg__(self)
scipy.sparse._data._data_matrix.__round__(self,ndigits=0)
scipy.sparse._data._data_matrix._deduped_data(self)
scipy.sparse._data._data_matrix._get_dtype(self)
scipy.sparse._data._data_matrix._imag(self)
scipy.sparse._data._data_matrix._mul_scalar(self,other)
scipy.sparse._data._data_matrix._real(self)
scipy.sparse._data._data_matrix._set_dtype(self,newtype)
scipy.sparse._data._data_matrix.astype(self,dtype,casting='unsafe',copy=True)
scipy.sparse._data._data_matrix.conj(self,copy=True)
scipy.sparse._data._data_matrix.copy(self)
scipy.sparse._data._data_matrix.count_nonzero(self)
scipy.sparse._data._data_matrix.power(self,n,dtype=None)
scipy.sparse._data._find_missing_index(ind,n)
scipy.sparse._data._minmax_mixin
scipy.sparse._data._minmax_mixin._arg_min_or_max(self,axis,out,op,compare)
scipy.sparse._data._minmax_mixin._arg_min_or_max_axis(self,axis,op,compare)
scipy.sparse._data._minmax_mixin._min_or_max(self,axis,out,min_or_max)
scipy.sparse._data._minmax_mixin._min_or_max_axis(self,axis,min_or_max)
scipy.sparse._data._minmax_mixin.argmax(self,axis=None,out=None)
scipy.sparse._data._minmax_mixin.argmin(self,axis=None,out=None)
scipy.sparse._data._minmax_mixin.max(self,axis=None,out=None)
scipy.sparse._data._minmax_mixin.min(self,axis=None,out=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/bsr.py----------------------------------------
scipy.sparse.bsr.__dir__()
scipy.sparse.bsr.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/_dia.py----------------------------------------
A:scipy.sparse._dia.arg1->numpy.asarray(arg1)
A:scipy.sparse._dia.self._shape->check_shape(A.shape)
A:scipy.sparse._dia.A->self._coo_container((data, (row, col)), shape=self.shape, dtype=self.dtype)
A:scipy.sparse._dia.self.data->self.data.astype(dtype)
A:scipy.sparse._dia.idx_dtype->get_index_dtype(maxval=max(self.shape))
A:scipy.sparse._dia.self.offsets->numpy.append(self.offsets, self.offsets.dtype.type(k))
A:scipy.sparse._dia.offset_inds->numpy.arange(offset_len)
A:scipy.sparse._dia.mask->self._data_mask()
A:scipy.sparse._dia.res_dtype->get_sum_dtype(self.dtype)
A:scipy.sparse._dia.x->(self.data * mask).sum(axis=0)
A:scipy.sparse._dia.res->numpy.zeros(num_cols, dtype=x.dtype)
A:scipy.sparse._dia.ret->self._ascontainer(row_sums.sum(axis=axis))
A:scipy.sparse._dia.row_sums->self._ascontainer(row_sums)
A:scipy.sparse._dia.one->numpy.ones(num_cols, dtype=res_dtype)
A:scipy.sparse._dia.dtype->numpy.promote_types(self.dtype, other.dtype)
A:scipy.sparse._dia.m->max(max_index, data_cols)
A:scipy.sparse._dia.y->numpy.zeros(self.shape[0], dtype=upcast_char(self.dtype.char, x.dtype.char))
A:scipy.sparse._dia.values_n->len(values)
A:scipy.sparse._dia.n->min(M, N - k, values_n)
A:scipy.sparse._dia.data->numpy.hstack((self.data, np.zeros((self.data.shape[0], pad_amount), dtype=self.data.dtype)))
A:scipy.sparse._dia.max_dim->max(self.shape)
A:scipy.sparse._dia.pad_amount->max(0, max_dim - self.data.shape[1])
A:scipy.sparse._dia.(idx,)->numpy.nonzero(self.offsets == k)
A:scipy.sparse._dia.first_col->max(0, k)
A:scipy.sparse._dia.last_col->min(rows + k, cols)
A:scipy.sparse._dia.result->numpy.pad(result, (0, padding), mode='constant')
A:scipy.sparse._dia.indptr->numpy.zeros(num_cols + 1, dtype=idx_dtype)
A:scipy.sparse._dia.indptr[1:offset_len + 1]->numpy.cumsum(mask.sum(axis=0)[:num_cols])
A:scipy.sparse._dia.indices->row.T[mask.T].astype(idx_dtype, copy=False)
A:scipy.sparse._dia.shape->check_shape(shape)
scipy.sparse._dia.dia_matrix(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse._dia.dia_matrix.__init__(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse._dia.dia_matrix.__repr__(self)
scipy.sparse._dia.dia_matrix._add_sparse(self,other)
scipy.sparse._dia.dia_matrix._data_mask(self)
scipy.sparse._dia.dia_matrix._mul_multimatrix(self,other)
scipy.sparse._dia.dia_matrix._mul_vector(self,other)
scipy.sparse._dia.dia_matrix._setdiag(self,values,k=0)
scipy.sparse._dia.dia_matrix._with_data(self,data,copy=True)
scipy.sparse._dia.dia_matrix.count_nonzero(self)
scipy.sparse._dia.dia_matrix.diagonal(self,k=0)
scipy.sparse._dia.dia_matrix.getnnz(self,axis=None)
scipy.sparse._dia.dia_matrix.resize(self,*shape)
scipy.sparse._dia.dia_matrix.sum(self,axis=None,dtype=None,out=None)
scipy.sparse._dia.dia_matrix.tocoo(self,copy=False)
scipy.sparse._dia.dia_matrix.tocsc(self,copy=False)
scipy.sparse._dia.dia_matrix.todia(self,copy=False)
scipy.sparse._dia.dia_matrix.transpose(self,axes=None,copy=False)
scipy.sparse._dia.isspmatrix_dia(x)
scipy.sparse.dia_matrix(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse.dia_matrix.__repr__(self)
scipy.sparse.dia_matrix._add_sparse(self,other)
scipy.sparse.dia_matrix._data_mask(self)
scipy.sparse.dia_matrix._mul_multimatrix(self,other)
scipy.sparse.dia_matrix._mul_vector(self,other)
scipy.sparse.dia_matrix._setdiag(self,values,k=0)
scipy.sparse.dia_matrix._with_data(self,data,copy=True)
scipy.sparse.dia_matrix.count_nonzero(self)
scipy.sparse.dia_matrix.diagonal(self,k=0)
scipy.sparse.dia_matrix.getnnz(self,axis=None)
scipy.sparse.dia_matrix.resize(self,*shape)
scipy.sparse.dia_matrix.sum(self,axis=None,dtype=None,out=None)
scipy.sparse.dia_matrix.tocoo(self,copy=False)
scipy.sparse.dia_matrix.tocsc(self,copy=False)
scipy.sparse.dia_matrix.todia(self,copy=False)
scipy.sparse.dia_matrix.transpose(self,axes=None,copy=False)
scipy.sparse.isspmatrix_dia(x)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/spfuncs.py----------------------------------------
scipy.sparse.spfuncs.__dir__()
scipy.sparse.spfuncs.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/sparsetools.py----------------------------------------
scipy.sparse.sparsetools.__dir__()
scipy.sparse.sparsetools.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/_matrix_io.py----------------------------------------
A:scipy.sparse._matrix_io.PICKLE_KWARGS->dict(allow_pickle=False)
A:scipy.sparse._matrix_io.matrix_format->matrix_format.decode('ascii').decode('ascii')
A:scipy.sparse._matrix_io.cls->getattr(scipy.sparse, '{}_matrix'.format(matrix_format))
scipy.sparse._matrix_io.load_npz(file)
scipy.sparse._matrix_io.save_npz(file,matrix,compressed=True)
scipy.sparse.load_npz(file)
scipy.sparse.save_npz(file,matrix,compressed=True)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/_base.py----------------------------------------
A:scipy.sparse._base._ufuncs_with_fixed_point_at_zero->frozenset([np.sin, np.tan, np.arcsin, np.arctan, np.sinh, np.tanh, np.arcsinh, np.arctanh, np.rint, np.sign, np.expm1, np.log1p, np.deg2rad, np.rad2deg, np.floor, np.ceil, np.trunc, np.sqrt])
A:scipy.sparse._base.new_matrix->self.reshape(shape, copy=False).asformat(self.format)
A:scipy.sparse._base.shape->check_shape(args, self.shape)
A:scipy.sparse._base.(order, copy)->check_reshape_kwargs(kwargs)
A:scipy.sparse._base.dtype->numpy.dtype(dtype)
A:scipy.sparse._base.maxprint->self.getmaxprint()
A:scipy.sparse._base.A->self.tocoo()
A:scipy.sparse._base.triples->zip(list(zip(row, col)), data)
A:scipy.sparse._base.out->tostr(A.row, A.col, A.data)
A:scipy.sparse._base.convert_method->getattr(self, 'to' + format)
A:scipy.sparse._base.other->int(other)
A:scipy.sparse._base.other_a->numpy.asanyarray(other)
A:scipy.sparse._base.result->self._ascontainer(result)
A:scipy.sparse._base.tr->numpy.asarray(other).transpose()
A:scipy.sparse._base.ret->self.transpose()._mul_dispatch(tr)
A:scipy.sparse._base.r->self._mul_scalar(1.0 / other)
A:scipy.sparse._base.self_csr->self.tocsr()
A:scipy.sparse._base.E->dia_array(E)
A:scipy.sparse._base.tmp->self.__pow__(other // 2)
A:scipy.sparse._base.col_selector->self._csc_container(([1], [[j], [0]]), shape=(n, 1), dtype=self.dtype)
A:scipy.sparse._base.row_selector->self._csr_container(([1], [[0], [i]]), shape=(1, m), dtype=self.dtype)
A:scipy.sparse._base.res_dtype->get_sum_dtype(self.dtype)
A:scipy.sparse._base.integral->_is_integral(self.dtype)
A:scipy.sparse._base.inter_self->self.astype(inter_dtype)
A:scipy.sparse._base.max_index->min(M, N - k, len(values))
scipy.sparse.SparseEfficiencyWarning(SparseWarning)
scipy.sparse.SparseFormatWarning(SparseWarning)
scipy.sparse.SparseWarning(Warning)
scipy.sparse._base.SparseEfficiencyWarning(SparseWarning)
scipy.sparse._base.SparseFormatWarning(SparseWarning)
scipy.sparse._base.SparseWarning(Warning)
scipy.sparse._base.isspmatrix(x)
scipy.sparse._base.spmatrix(self,maxprint=MAXPRINT)
scipy.sparse._base.spmatrix.__abs__(self)
scipy.sparse._base.spmatrix.__add__(self,other)
scipy.sparse._base.spmatrix.__bool__(self)
scipy.sparse._base.spmatrix.__div__(self,other)
scipy.sparse._base.spmatrix.__eq__(self,other)
scipy.sparse._base.spmatrix.__ge__(self,other)
scipy.sparse._base.spmatrix.__getattr__(self,attr)
scipy.sparse._base.spmatrix.__gt__(self,other)
scipy.sparse._base.spmatrix.__iadd__(self,other)
scipy.sparse._base.spmatrix.__idiv__(self,other)
scipy.sparse._base.spmatrix.__imul__(self,other)
scipy.sparse._base.spmatrix.__init__(self,maxprint=MAXPRINT)
scipy.sparse._base.spmatrix.__isub__(self,other)
scipy.sparse._base.spmatrix.__iter__(self)
scipy.sparse._base.spmatrix.__itruediv__(self,other)
scipy.sparse._base.spmatrix.__le__(self,other)
scipy.sparse._base.spmatrix.__len__(self)
scipy.sparse._base.spmatrix.__lt__(self,other)
scipy.sparse._base.spmatrix.__matmul__(self,other)
scipy.sparse._base.spmatrix.__mul__(self,other)
scipy.sparse._base.spmatrix.__ne__(self,other)
scipy.sparse._base.spmatrix.__neg__(self)
scipy.sparse._base.spmatrix.__pow__(self,other)
scipy.sparse._base.spmatrix.__radd__(self,other)
scipy.sparse._base.spmatrix.__rdiv__(self,other)
scipy.sparse._base.spmatrix.__repr__(self)
scipy.sparse._base.spmatrix.__rmatmul__(self,other)
scipy.sparse._base.spmatrix.__rmul__(self,other)
scipy.sparse._base.spmatrix.__round__(self,ndigits=0)
scipy.sparse._base.spmatrix.__rsub__(self,other)
scipy.sparse._base.spmatrix.__rtruediv__(self,other)
scipy.sparse._base.spmatrix.__str__(self)
scipy.sparse._base.spmatrix.__sub__(self,other)
scipy.sparse._base.spmatrix.__truediv__(self,other)
scipy.sparse._base.spmatrix._add_dense(self,other)
scipy.sparse._base.spmatrix._add_sparse(self,other)
scipy.sparse._base.spmatrix._ascontainer(cls,X,**kwargs)
scipy.sparse._base.spmatrix._bsr_container(self)
scipy.sparse._base.spmatrix._container(cls,X,**kwargs)
scipy.sparse._base.spmatrix._coo_container(self)
scipy.sparse._base.spmatrix._csc_container(self)
scipy.sparse._base.spmatrix._csr_container(self)
scipy.sparse._base.spmatrix._dia_container(self)
scipy.sparse._base.spmatrix._divide(self,other,true_divide=False,rdivide=False)
scipy.sparse._base.spmatrix._dok_container(self)
scipy.sparse._base.spmatrix._imag(self)
scipy.sparse._base.spmatrix._lil_container(self)
scipy.sparse._base.spmatrix._mul_dispatch(self,other)
scipy.sparse._base.spmatrix._mul_multivector(self,other)
scipy.sparse._base.spmatrix._mul_scalar(self,other)
scipy.sparse._base.spmatrix._mul_sparse_matrix(self,other)
scipy.sparse._base.spmatrix._mul_vector(self,other)
scipy.sparse._base.spmatrix._process_toarray_args(self,order,out)
scipy.sparse._base.spmatrix._real(self)
scipy.sparse._base.spmatrix._rmul_dispatch(self,other)
scipy.sparse._base.spmatrix._rsub_dense(self,other)
scipy.sparse._base.spmatrix._setdiag(self,values,k)
scipy.sparse._base.spmatrix._sub_dense(self,other)
scipy.sparse._base.spmatrix._sub_sparse(self,other)
scipy.sparse._base.spmatrix.asformat(self,format,copy=False)
scipy.sparse._base.spmatrix.asfptype(self)
scipy.sparse._base.spmatrix.astype(self,dtype,casting='unsafe',copy=True)
scipy.sparse._base.spmatrix.conj(self,copy=True)
scipy.sparse._base.spmatrix.conjugate(self,copy=True)
scipy.sparse._base.spmatrix.copy(self)
scipy.sparse._base.spmatrix.count_nonzero(self)
scipy.sparse._base.spmatrix.diagonal(self,k=0)
scipy.sparse._base.spmatrix.dot(self,other)
scipy.sparse._base.spmatrix.getH(self)
scipy.sparse._base.spmatrix.get_shape(self)
scipy.sparse._base.spmatrix.getcol(self,j)
scipy.sparse._base.spmatrix.getformat(self)
scipy.sparse._base.spmatrix.getmaxprint(self)
scipy.sparse._base.spmatrix.getnnz(self,axis=None)
scipy.sparse._base.spmatrix.getrow(self,i)
scipy.sparse._base.spmatrix.maximum(self,other)
scipy.sparse._base.spmatrix.mean(self,axis=None,dtype=None,out=None)
scipy.sparse._base.spmatrix.minimum(self,other)
scipy.sparse._base.spmatrix.multiply(self,other)
scipy.sparse._base.spmatrix.nnz(self)
scipy.sparse._base.spmatrix.nonzero(self)
scipy.sparse._base.spmatrix.power(self,n,dtype=None)
scipy.sparse._base.spmatrix.reshape(self,*args,**kwargs)
scipy.sparse._base.spmatrix.resize(self,shape)
scipy.sparse._base.spmatrix.set_shape(self,shape)
scipy.sparse._base.spmatrix.setdiag(self,values,k=0)
scipy.sparse._base.spmatrix.sum(self,axis=None,dtype=None,out=None)
scipy.sparse._base.spmatrix.toarray(self,order=None,out=None)
scipy.sparse._base.spmatrix.tobsr(self,blocksize=None,copy=False)
scipy.sparse._base.spmatrix.tocoo(self,copy=False)
scipy.sparse._base.spmatrix.tocsc(self,copy=False)
scipy.sparse._base.spmatrix.tocsr(self,copy=False)
scipy.sparse._base.spmatrix.todense(self,order=None,out=None)
scipy.sparse._base.spmatrix.todia(self,copy=False)
scipy.sparse._base.spmatrix.todok(self,copy=False)
scipy.sparse._base.spmatrix.tolil(self,copy=False)
scipy.sparse._base.spmatrix.trace(self,offset=0)
scipy.sparse._base.spmatrix.transpose(self,axes=None,copy=False)
scipy.sparse.isspmatrix(x)
scipy.sparse.spmatrix(self,maxprint=MAXPRINT)
scipy.sparse.spmatrix.__abs__(self)
scipy.sparse.spmatrix.__add__(self,other)
scipy.sparse.spmatrix.__bool__(self)
scipy.sparse.spmatrix.__div__(self,other)
scipy.sparse.spmatrix.__eq__(self,other)
scipy.sparse.spmatrix.__ge__(self,other)
scipy.sparse.spmatrix.__getattr__(self,attr)
scipy.sparse.spmatrix.__gt__(self,other)
scipy.sparse.spmatrix.__iadd__(self,other)
scipy.sparse.spmatrix.__idiv__(self,other)
scipy.sparse.spmatrix.__imul__(self,other)
scipy.sparse.spmatrix.__isub__(self,other)
scipy.sparse.spmatrix.__iter__(self)
scipy.sparse.spmatrix.__itruediv__(self,other)
scipy.sparse.spmatrix.__le__(self,other)
scipy.sparse.spmatrix.__len__(self)
scipy.sparse.spmatrix.__lt__(self,other)
scipy.sparse.spmatrix.__matmul__(self,other)
scipy.sparse.spmatrix.__mul__(self,other)
scipy.sparse.spmatrix.__ne__(self,other)
scipy.sparse.spmatrix.__neg__(self)
scipy.sparse.spmatrix.__pow__(self,other)
scipy.sparse.spmatrix.__radd__(self,other)
scipy.sparse.spmatrix.__rdiv__(self,other)
scipy.sparse.spmatrix.__repr__(self)
scipy.sparse.spmatrix.__rmatmul__(self,other)
scipy.sparse.spmatrix.__rmul__(self,other)
scipy.sparse.spmatrix.__round__(self,ndigits=0)
scipy.sparse.spmatrix.__rsub__(self,other)
scipy.sparse.spmatrix.__rtruediv__(self,other)
scipy.sparse.spmatrix.__str__(self)
scipy.sparse.spmatrix.__sub__(self,other)
scipy.sparse.spmatrix.__truediv__(self,other)
scipy.sparse.spmatrix._add_dense(self,other)
scipy.sparse.spmatrix._add_sparse(self,other)
scipy.sparse.spmatrix._ascontainer(cls,X,**kwargs)
scipy.sparse.spmatrix._bsr_container(self)
scipy.sparse.spmatrix._container(cls,X,**kwargs)
scipy.sparse.spmatrix._coo_container(self)
scipy.sparse.spmatrix._csc_container(self)
scipy.sparse.spmatrix._csr_container(self)
scipy.sparse.spmatrix._dia_container(self)
scipy.sparse.spmatrix._divide(self,other,true_divide=False,rdivide=False)
scipy.sparse.spmatrix._dok_container(self)
scipy.sparse.spmatrix._imag(self)
scipy.sparse.spmatrix._lil_container(self)
scipy.sparse.spmatrix._mul_dispatch(self,other)
scipy.sparse.spmatrix._mul_multivector(self,other)
scipy.sparse.spmatrix._mul_scalar(self,other)
scipy.sparse.spmatrix._mul_sparse_matrix(self,other)
scipy.sparse.spmatrix._mul_vector(self,other)
scipy.sparse.spmatrix._process_toarray_args(self,order,out)
scipy.sparse.spmatrix._real(self)
scipy.sparse.spmatrix._rmul_dispatch(self,other)
scipy.sparse.spmatrix._rsub_dense(self,other)
scipy.sparse.spmatrix._setdiag(self,values,k)
scipy.sparse.spmatrix._sub_dense(self,other)
scipy.sparse.spmatrix._sub_sparse(self,other)
scipy.sparse.spmatrix.asformat(self,format,copy=False)
scipy.sparse.spmatrix.asfptype(self)
scipy.sparse.spmatrix.astype(self,dtype,casting='unsafe',copy=True)
scipy.sparse.spmatrix.conj(self,copy=True)
scipy.sparse.spmatrix.conjugate(self,copy=True)
scipy.sparse.spmatrix.copy(self)
scipy.sparse.spmatrix.count_nonzero(self)
scipy.sparse.spmatrix.diagonal(self,k=0)
scipy.sparse.spmatrix.dot(self,other)
scipy.sparse.spmatrix.getH(self)
scipy.sparse.spmatrix.get_shape(self)
scipy.sparse.spmatrix.getcol(self,j)
scipy.sparse.spmatrix.getformat(self)
scipy.sparse.spmatrix.getmaxprint(self)
scipy.sparse.spmatrix.getnnz(self,axis=None)
scipy.sparse.spmatrix.getrow(self,i)
scipy.sparse.spmatrix.maximum(self,other)
scipy.sparse.spmatrix.mean(self,axis=None,dtype=None,out=None)
scipy.sparse.spmatrix.minimum(self,other)
scipy.sparse.spmatrix.multiply(self,other)
scipy.sparse.spmatrix.nnz(self)
scipy.sparse.spmatrix.nonzero(self)
scipy.sparse.spmatrix.power(self,n,dtype=None)
scipy.sparse.spmatrix.reshape(self,*args,**kwargs)
scipy.sparse.spmatrix.resize(self,shape)
scipy.sparse.spmatrix.set_shape(self,shape)
scipy.sparse.spmatrix.setdiag(self,values,k=0)
scipy.sparse.spmatrix.sum(self,axis=None,dtype=None,out=None)
scipy.sparse.spmatrix.toarray(self,order=None,out=None)
scipy.sparse.spmatrix.tobsr(self,blocksize=None,copy=False)
scipy.sparse.spmatrix.tocoo(self,copy=False)
scipy.sparse.spmatrix.tocsc(self,copy=False)
scipy.sparse.spmatrix.tocsr(self,copy=False)
scipy.sparse.spmatrix.todense(self,order=None,out=None)
scipy.sparse.spmatrix.todia(self,copy=False)
scipy.sparse.spmatrix.todok(self,copy=False)
scipy.sparse.spmatrix.tolil(self,copy=False)
scipy.sparse.spmatrix.trace(self,offset=0)
scipy.sparse.spmatrix.transpose(self,axes=None,copy=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/__init__.py----------------------------------------
A:scipy.sparse.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/lil.py----------------------------------------
scipy.sparse.lil.__dir__()
scipy.sparse.lil.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/_coo.py----------------------------------------
A:scipy.sparse._coo.self._shape->check_shape(M.shape)
A:scipy.sparse._coo.idx_dtype->get_index_dtype((self.row, self.col), maxval=max(self.nnz, N))
A:scipy.sparse._coo.data_dtype->getdtype(dtype, default=float)
A:scipy.sparse._coo.self.row->numpy.concatenate((self.row[keep], new_row))
A:scipy.sparse._coo.self.col->numpy.concatenate((self.col[keep], new_col))
A:scipy.sparse._coo.self.data->numpy.concatenate((self.data[keep], new_data))
A:scipy.sparse._coo.coo->arg1.tocoo()
A:scipy.sparse._coo.M->numpy.atleast_2d(np.asarray(arg1))
A:scipy.sparse._coo.(self.row, self.col)->numpy.atleast_2d(np.asarray(arg1)).nonzero()
A:scipy.sparse._coo.shape->check_shape(shape)
A:scipy.sparse._coo.(order, copy)->check_reshape_kwargs(kwargs)
A:scipy.sparse._coo.dtype->upcast_char(self.dtype.char, other.dtype.char)
A:scipy.sparse._coo.(new_row, new_col)->divmod(flat_indices, shape[1])
A:scipy.sparse._coo.(new_col, new_row)->divmod(flat_indices, shape[0])
A:scipy.sparse._coo.new_data->numpy.empty(max_index, dtype=self.dtype)
A:scipy.sparse._coo.nnz->len(self.data)
A:scipy.sparse._coo.mask->numpy.logical_and(self.row < new_M, self.col < new_N)
A:scipy.sparse._coo.B->self._process_toarray_args(order, out)
A:scipy.sparse._coo.fortran->int(result.flags.f_contiguous)
A:scipy.sparse._coo.row->self.row.astype(idx_dtype, copy=False)
A:scipy.sparse._coo.col->self.col.astype(idx_dtype, copy=False)
A:scipy.sparse._coo.indptr->numpy.empty(M + 1, dtype=idx_dtype)
A:scipy.sparse._coo.indices->numpy.empty_like(col, dtype=idx_dtype)
A:scipy.sparse._coo.data->numpy.add.reduceat(data, unique_inds, dtype=self.dtype)
A:scipy.sparse._coo.x->self._csr_container((data, indices, indptr), shape=self.shape)
A:scipy.sparse._coo.(diags, diag_idx)->numpy.unique(ks, return_inverse=True)
A:scipy.sparse._coo.dok->self._dok_container(self.shape, dtype=self.dtype)
A:scipy.sparse._coo.diag->numpy.zeros(min(rows + min(k, 0), cols - max(k, 0)), dtype=self.dtype)
A:scipy.sparse._coo.(row, _, data)->self._sum_duplicates(self.row[diag_mask], self.col[diag_mask], self.data[diag_mask])
A:scipy.sparse._coo.max_index->min(max_index, len(values))
A:scipy.sparse._coo.keep->numpy.logical_or(full_keep, self.row >= max_index)
A:scipy.sparse._coo.new_row->numpy.arange(max_index, dtype=idx_dtype)
A:scipy.sparse._coo.new_col->numpy.arange(k, k + max_index, dtype=idx_dtype)
A:scipy.sparse._coo.summed->self._sum_duplicates(self.row, self.col, self.data)
A:scipy.sparse._coo.order->numpy.lexsort((row, col))
A:scipy.sparse._coo.unique_mask->numpy.append(True, unique_mask)
A:scipy.sparse._coo.(unique_inds,)->numpy.nonzero(unique_mask)
A:scipy.sparse._coo.result->numpy.zeros((other.shape[1], self.shape[0]), dtype=upcast_char(self.dtype.char, other.dtype.char))
scipy.sparse._coo.coo_matrix(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse._coo.coo_matrix.__init__(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse._coo.coo_matrix._add_dense(self,other)
scipy.sparse._coo.coo_matrix._check(self)
scipy.sparse._coo.coo_matrix._mul_multivector(self,other)
scipy.sparse._coo.coo_matrix._mul_vector(self,other)
scipy.sparse._coo.coo_matrix._setdiag(self,values,k)
scipy.sparse._coo.coo_matrix._sum_duplicates(self,row,col,data)
scipy.sparse._coo.coo_matrix._with_data(self,data,copy=True)
scipy.sparse._coo.coo_matrix.diagonal(self,k=0)
scipy.sparse._coo.coo_matrix.eliminate_zeros(self)
scipy.sparse._coo.coo_matrix.getnnz(self,axis=None)
scipy.sparse._coo.coo_matrix.reshape(self,*args,**kwargs)
scipy.sparse._coo.coo_matrix.resize(self,*shape)
scipy.sparse._coo.coo_matrix.sum_duplicates(self)
scipy.sparse._coo.coo_matrix.toarray(self,order=None,out=None)
scipy.sparse._coo.coo_matrix.tocoo(self,copy=False)
scipy.sparse._coo.coo_matrix.tocsc(self,copy=False)
scipy.sparse._coo.coo_matrix.tocsr(self,copy=False)
scipy.sparse._coo.coo_matrix.todia(self,copy=False)
scipy.sparse._coo.coo_matrix.todok(self,copy=False)
scipy.sparse._coo.coo_matrix.transpose(self,axes=None,copy=False)
scipy.sparse._coo.isspmatrix_coo(x)
scipy.sparse.coo_matrix(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse.coo_matrix._add_dense(self,other)
scipy.sparse.coo_matrix._check(self)
scipy.sparse.coo_matrix._mul_multivector(self,other)
scipy.sparse.coo_matrix._mul_vector(self,other)
scipy.sparse.coo_matrix._setdiag(self,values,k)
scipy.sparse.coo_matrix._sum_duplicates(self,row,col,data)
scipy.sparse.coo_matrix._with_data(self,data,copy=True)
scipy.sparse.coo_matrix.diagonal(self,k=0)
scipy.sparse.coo_matrix.eliminate_zeros(self)
scipy.sparse.coo_matrix.getnnz(self,axis=None)
scipy.sparse.coo_matrix.reshape(self,*args,**kwargs)
scipy.sparse.coo_matrix.resize(self,*shape)
scipy.sparse.coo_matrix.sum_duplicates(self)
scipy.sparse.coo_matrix.toarray(self,order=None,out=None)
scipy.sparse.coo_matrix.tocoo(self,copy=False)
scipy.sparse.coo_matrix.tocsc(self,copy=False)
scipy.sparse.coo_matrix.tocsr(self,copy=False)
scipy.sparse.coo_matrix.todia(self,copy=False)
scipy.sparse.coo_matrix.todok(self,copy=False)
scipy.sparse.coo_matrix.transpose(self,axes=None,copy=False)
scipy.sparse.isspmatrix_coo(x)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/_csr.py----------------------------------------
A:scipy.sparse._csr.lil->self._lil_container(self.shape, dtype=self.dtype)
A:scipy.sparse._csr.rows[n]->ind[start:end].tolist()
A:scipy.sparse._csr.data[n]->dat[start:end].tolist()
A:scipy.sparse._csr.idx_dtype->get_index_dtype((self.indptr, self.indices), maxval=max(N // C, blks))
A:scipy.sparse._csr.indptr->numpy.zeros(2, dtype=self.indptr.dtype)
A:scipy.sparse._csr.indices->numpy.empty(blks, dtype=idx_dtype)
A:scipy.sparse._csr.data->numpy.zeros((blks, R, C), dtype=self.dtype)
A:scipy.sparse._csr.A->self._csc_container((data, indices, indptr), shape=self.shape)
A:scipy.sparse._csr.blks->csr_count_blocks(M, N, R, C, self.indptr, self.indices)
A:scipy.sparse._csr.i->int(i)
A:scipy.sparse._csr.(indptr, indices, data)->get_csr_submatrix(M, N, self.indptr, self.indices, self.data, 0, M, i, i + 1)
A:scipy.sparse._csr.(start, stop, stride)->numpy.arange(*col.indices(self.shape[1])).indices(N)
A:scipy.sparse._csr.row_indptr->numpy.array([0, len(row_indices)])
A:scipy.sparse._csr.row_indices->abs(row_indices[::-1])
A:scipy.sparse._csr.col->numpy.arange(*col.indices(self.shape[1]))
scipy.sparse._csr.csr_matrix(_cs_matrix)
scipy.sparse._csr.csr_matrix.__iter__(self)
scipy.sparse._csr.csr_matrix._get_arrayXint(self,row,col)
scipy.sparse._csr.csr_matrix._get_arrayXslice(self,row,col)
scipy.sparse._csr.csr_matrix._get_intXarray(self,row,col)
scipy.sparse._csr.csr_matrix._get_intXslice(self,row,col)
scipy.sparse._csr.csr_matrix._get_sliceXarray(self,row,col)
scipy.sparse._csr.csr_matrix._get_sliceXint(self,row,col)
scipy.sparse._csr.csr_matrix._swap(self,x)
scipy.sparse._csr.csr_matrix.getcol(self,i)
scipy.sparse._csr.csr_matrix.getrow(self,i)
scipy.sparse._csr.csr_matrix.tobsr(self,blocksize=None,copy=True)
scipy.sparse._csr.csr_matrix.tocsc(self,copy=False)
scipy.sparse._csr.csr_matrix.tocsr(self,copy=False)
scipy.sparse._csr.csr_matrix.tolil(self,copy=False)
scipy.sparse._csr.csr_matrix.transpose(self,axes=None,copy=False)
scipy.sparse._csr.isspmatrix_csr(x)
scipy.sparse.csr_matrix(_cs_matrix)
scipy.sparse.csr_matrix.__iter__(self)
scipy.sparse.csr_matrix._get_arrayXint(self,row,col)
scipy.sparse.csr_matrix._get_arrayXslice(self,row,col)
scipy.sparse.csr_matrix._get_intXarray(self,row,col)
scipy.sparse.csr_matrix._get_intXslice(self,row,col)
scipy.sparse.csr_matrix._get_sliceXarray(self,row,col)
scipy.sparse.csr_matrix._get_sliceXint(self,row,col)
scipy.sparse.csr_matrix._swap(self,x)
scipy.sparse.csr_matrix.getcol(self,i)
scipy.sparse.csr_matrix.getrow(self,i)
scipy.sparse.csr_matrix.tobsr(self,blocksize=None,copy=True)
scipy.sparse.csr_matrix.tocsc(self,copy=False)
scipy.sparse.csr_matrix.tocsr(self,copy=False)
scipy.sparse.csr_matrix.tolil(self,copy=False)
scipy.sparse.csr_matrix.transpose(self,axes=None,copy=False)
scipy.sparse.isspmatrix_csr(x)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/_compressed.py----------------------------------------
A:scipy.sparse._compressed.arg1->numpy.asarray(arg1)
A:scipy.sparse._compressed.self._shape->check_shape(other.shape)
A:scipy.sparse._compressed.idx_dtype->get_index_dtype((self.indptr, self.indices, other.indptr, other.indices), maxval=maxnnz)
A:scipy.sparse._compressed.self.data->_prune_array(self.data[:self.nnz])
A:scipy.sparse._compressed.self.indices->_prune_array(self.indices[:self.nnz])
A:scipy.sparse._compressed.self.indptr->numpy.resize(self.indptr, new_M + 1)
A:scipy.sparse._compressed.other->self.__class__(other)
A:scipy.sparse._compressed.maxval->max(shape)
A:scipy.sparse._compressed.(axis, _)->self._swap((axis, 1 - axis))
A:scipy.sparse._compressed.(_, N)->self._swap(self.shape)
A:scipy.sparse._compressed.(major_name, minor_name)->self._swap(('row', 'column'))
A:scipy.sparse._compressed.(major_dim, minor_dim)->self._swap(self.shape)
A:scipy.sparse._compressed.res->self._binopt(other, '_gt_' if op_name == '_le_' else '_lt_')
A:scipy.sparse._compressed.all_true->self.__class__(np.ones(self.shape, dtype=np.bool_))
A:scipy.sparse._compressed.inv->self._scalar_binopt(other, operator.eq)
A:scipy.sparse._compressed.other_arr->self.__class__(other_arr)
A:scipy.sparse._compressed.dtype->upcast_char(self.dtype.char, other.dtype.char)
A:scipy.sparse._compressed.result->numpy.zeros((M, n_vecs), dtype=upcast_char(self.dtype.char, other.dtype.char))
A:scipy.sparse._compressed.(M, N)->self._swap(self.shape)
A:scipy.sparse._compressed.copy->self._dia_container((self.toarray().ravel(), [0]), shape=(self.shape[0], self.shape[0]))
A:scipy.sparse._compressed.ret->csr_sample_offsets(M, N, self.indptr, self.indices, n_samples, i, j, offsets)
A:scipy.sparse._compressed.data->numpy.empty(maxnnz, dtype=upcast(self.dtype, other.dtype))
A:scipy.sparse._compressed.row->numpy.repeat(ret.row, other.shape[1])
A:scipy.sparse._compressed.col->numpy.tile(np.arange(other.shape[1]), len(ret.col))
A:scipy.sparse._compressed.ret.data->numpy.empty(maxnnz, dtype=upcast(self.dtype, other.dtype)).view(np.ndarray).ravel()
A:scipy.sparse._compressed.fn->getattr(_sparsetools, self.format + op + self.format)
A:scipy.sparse._compressed.nnz->fn(M, N, np.asarray(self.indptr, dtype=idx_dtype), np.asarray(self.indices, dtype=idx_dtype), np.asarray(other.indptr, dtype=idx_dtype), np.asarray(other.indices, dtype=idx_dtype))
A:scipy.sparse._compressed.indptr->numpy.empty(self.indptr.shape, dtype=idx_dtype)
A:scipy.sparse._compressed.indices->numpy.empty(maxnnz, dtype=idx_dtype)
A:scipy.sparse._compressed.y->numpy.empty(min(rows + min(k, 0), cols - max(k, 0)), dtype=upcast(self.dtype))
A:scipy.sparse._compressed.new_data->npop(self.data, np.asarray(other))
A:scipy.sparse._compressed.mat->self.__class__((new_data, self.indices, self.indptr), dtype=new_data.dtype, shape=self.shape)
A:scipy.sparse._compressed.res_dtype->get_sum_dtype(self.dtype)
A:scipy.sparse._compressed.(major_index, value)->self._minor_reduce(np.add)
A:scipy.sparse._compressed.major_index->numpy.flatnonzero(np.diff(self.indptr))
A:scipy.sparse._compressed.value->ufunc.reduceat(data, downcast_intp_index(self.indptr[major_index]))
A:scipy.sparse._compressed.(major, minor)->self._swap((row, col))
A:scipy.sparse._compressed.(indptr, indices, data)->get_csr_submatrix(M, N, self.indptr, self.indices, self.data, i0, i1, j0, j1)
A:scipy.sparse._compressed.major->numpy.asarray(major, dtype=idx_dtype)
A:scipy.sparse._compressed.minor->numpy.asarray(minor, dtype=idx_dtype)
A:scipy.sparse._compressed.val->numpy.empty(major.size, dtype=self.dtype)
A:scipy.sparse._compressed.M->len(range(start, stop, step))
A:scipy.sparse._compressed.new_shape->self._swap((M, k))
A:scipy.sparse._compressed.res_indptr->numpy.empty_like(self.indptr)
A:scipy.sparse._compressed.res_indices->numpy.empty(nnz, dtype=idx_dtype)
A:scipy.sparse._compressed.res_data->numpy.empty(nnz, dtype=self.dtype)
A:scipy.sparse._compressed.(start, stop, step)->indices.min().indices(N)
A:scipy.sparse._compressed.all_idx->slice(self.indptr[start], self.indptr[stop])
A:scipy.sparse._compressed.idx->numpy.empty(maxnnz, dtype=idx_dtype).min()
A:scipy.sparse._compressed.k->len(idx)
A:scipy.sparse._compressed.col_offsets->numpy.zeros(N, dtype=idx_dtype)
A:scipy.sparse._compressed.col_order->numpy.argsort(idx).astype(idx_dtype, copy=False)
A:scipy.sparse._compressed.N->len(range(start, stop, step))
A:scipy.sparse._compressed.(i0, i1)->_process_slice(major, M)
A:scipy.sparse._compressed.(j0, j1)->_process_slice(minor, N)
A:scipy.sparse._compressed.shape->check_shape(shape)
A:scipy.sparse._compressed.(i, j)->self._swap((row[r, c], col[r, c]))
A:scipy.sparse._compressed.x->self.tocsc()
A:scipy.sparse._compressed.r->r.tocoo().tocoo()
A:scipy.sparse._compressed.c->numpy.tile(np.arange(N), len(c))
A:scipy.sparse._compressed.max_index->min(M, N - k, len(values))
A:scipy.sparse._compressed.i->numpy.asarray(i, dtype=idx_dtype)
A:scipy.sparse._compressed.j->numpy.asarray(j, dtype=idx_dtype)
A:scipy.sparse._compressed.(i, j, M, N)->self._prepare_indices(i, j)
A:scipy.sparse._compressed.offsets->numpy.empty(n_samples, dtype=self.indices.dtype)
A:scipy.sparse._compressed.n_samples->len(i)
A:scipy.sparse._compressed.order->numpy.argsort(i, kind='mergesort')
A:scipy.sparse._compressed.(ui, ui_indptr)->numpy.unique(i, return_index=True)
A:scipy.sparse._compressed.ui_indptr->numpy.append(ui_indptr, len(j))
A:scipy.sparse._compressed.new_nnzs->numpy.diff(ui_indptr)
A:scipy.sparse._compressed.(uj, uj_indptr)->numpy.unique(j[js:je][::-1], return_index=True)
A:scipy.sparse._compressed.new_nnzs[c]->len(uj)
A:scipy.sparse._compressed.nnzs->numpy.empty(self.indptr.shape, dtype=idx_dtype)
A:scipy.sparse._compressed.nnzs[0]->idx_dtype(0)
A:scipy.sparse._compressed.indptr_diff->numpy.diff(self.indptr)
A:scipy.sparse._compressed.major_indices->numpy.empty(len(minor_indices), dtype=self.indices.dtype)
A:scipy.sparse._compressed.(row, col)->self.__class__(other).nonzero()
A:scipy.sparse._compressed.out->self._container(out)
A:scipy.sparse._compressed.self.has_canonical_format->bool(_sparsetools.csr_has_canonical_format(len(self.indptr) - 1, self.indptr, self.indices))
A:scipy.sparse._compressed.self._has_canonical_format->bool(val)
A:scipy.sparse._compressed.has_canonical_format->property(fget=__get_has_canonical_format, fset=__set_has_canonical_format)
A:scipy.sparse._compressed.self._has_sorted_indices->bool(val)
A:scipy.sparse._compressed.has_sorted_indices->property(fget=__get_sorted, fset=__set_sorted)
A:scipy.sparse._compressed.A->self.__class__((data, indices, indptr), shape=self.shape)
A:scipy.sparse._compressed.(new_M, rm)->divmod(shape[0], bm)
A:scipy.sparse._compressed.(new_N, rn)->divmod(shape[1], bn)
A:scipy.sparse._compressed.(new_M, new_N)->self._swap(shape)
A:scipy.sparse._compressed.(major_index, val)->self._minor_reduce(np.add, mask)
A:scipy.sparse._compressed.(i0, i1, stride)->sl.indices(num)
A:scipy.sparse._compressed.i0->min(i0, i1)
scipy.sparse._compressed._cs_matrix(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse._compressed._cs_matrix.__eq__(self,other)
scipy.sparse._compressed._cs_matrix.__ge__(self,other)
scipy.sparse._compressed._cs_matrix.__get_has_canonical_format(self)
scipy.sparse._compressed._cs_matrix.__get_sorted(self)
scipy.sparse._compressed._cs_matrix.__gt__(self,other)
scipy.sparse._compressed._cs_matrix.__init__(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse._compressed._cs_matrix.__le__(self,other)
scipy.sparse._compressed._cs_matrix.__lt__(self,other)
scipy.sparse._compressed._cs_matrix.__ne__(self,other)
scipy.sparse._compressed._cs_matrix.__set_has_canonical_format(self,val)
scipy.sparse._compressed._cs_matrix.__set_sorted(self,val)
scipy.sparse._compressed._cs_matrix._add_dense(self,other)
scipy.sparse._compressed._cs_matrix._add_sparse(self,other)
scipy.sparse._compressed._cs_matrix._binopt(self,other,op)
scipy.sparse._compressed._cs_matrix._divide_sparse(self,other)
scipy.sparse._compressed._cs_matrix._get_arrayXarray(self,row,col)
scipy.sparse._compressed._cs_matrix._get_columnXarray(self,row,col)
scipy.sparse._compressed._cs_matrix._get_intXint(self,row,col)
scipy.sparse._compressed._cs_matrix._get_sliceXslice(self,row,col)
scipy.sparse._compressed._cs_matrix._get_submatrix(self,major=None,minor=None,copy=False)
scipy.sparse._compressed._cs_matrix._inequality(self,other,op,op_name,bad_scalar_msg)
scipy.sparse._compressed._cs_matrix._insert_many(self,i,j,x)
scipy.sparse._compressed._cs_matrix._major_index_fancy(self,idx)
scipy.sparse._compressed._cs_matrix._major_slice(self,idx,copy=False)
scipy.sparse._compressed._cs_matrix._maximum_minimum(self,other,npop,op_name,dense_check)
scipy.sparse._compressed._cs_matrix._minor_index_fancy(self,idx)
scipy.sparse._compressed._cs_matrix._minor_reduce(self,ufunc,data=None)
scipy.sparse._compressed._cs_matrix._minor_slice(self,idx,copy=False)
scipy.sparse._compressed._cs_matrix._mul_multivector(self,other)
scipy.sparse._compressed._cs_matrix._mul_sparse_matrix(self,other)
scipy.sparse._compressed._cs_matrix._mul_vector(self,other)
scipy.sparse._compressed._cs_matrix._prepare_indices(self,i,j)
scipy.sparse._compressed._cs_matrix._scalar_binopt(self,other,op)
scipy.sparse._compressed._cs_matrix._set_arrayXarray(self,row,col,x)
scipy.sparse._compressed._cs_matrix._set_arrayXarray_sparse(self,row,col,x)
scipy.sparse._compressed._cs_matrix._set_intXint(self,row,col,x)
scipy.sparse._compressed._cs_matrix._set_many(self,i,j,x)
scipy.sparse._compressed._cs_matrix._set_self(self,other,copy=False)
scipy.sparse._compressed._cs_matrix._setdiag(self,values,k)
scipy.sparse._compressed._cs_matrix._sub_sparse(self,other)
scipy.sparse._compressed._cs_matrix._with_data(self,data,copy=True)
scipy.sparse._compressed._cs_matrix._zero_many(self,i,j)
scipy.sparse._compressed._cs_matrix.check_format(self,full_check=True)
scipy.sparse._compressed._cs_matrix.diagonal(self,k=0)
scipy.sparse._compressed._cs_matrix.eliminate_zeros(self)
scipy.sparse._compressed._cs_matrix.getnnz(self,axis=None)
scipy.sparse._compressed._cs_matrix.maximum(self,other)
scipy.sparse._compressed._cs_matrix.minimum(self,other)
scipy.sparse._compressed._cs_matrix.multiply(self,other)
scipy.sparse._compressed._cs_matrix.prune(self)
scipy.sparse._compressed._cs_matrix.resize(self,*shape)
scipy.sparse._compressed._cs_matrix.sort_indices(self)
scipy.sparse._compressed._cs_matrix.sorted_indices(self)
scipy.sparse._compressed._cs_matrix.sum(self,axis=None,dtype=None,out=None)
scipy.sparse._compressed._cs_matrix.sum_duplicates(self)
scipy.sparse._compressed._cs_matrix.toarray(self,order=None,out=None)
scipy.sparse._compressed._cs_matrix.tocoo(self,copy=True)
scipy.sparse._compressed._process_slice(sl,num)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/_sputils.py----------------------------------------
A:scipy.sparse._sputils.t->upcast(*map(np.dtype, args))
A:scipy.sparse._sputils.upcast->numpy.result_type(*args)
A:scipy.sparse._sputils.maxval->numpy.asarray(arr).max()
A:scipy.sparse._sputils.minval->numpy.asarray(arr).min()
A:scipy.sparse._sputils.newdtype->numpy.dtype(dtype)
A:scipy.sparse._sputils.data->numpy.empty(s.nnz, dtype=s.dtype)
A:scipy.sparse._sputils.int32min->numpy.int32(np.iinfo(np.int32).min)
A:scipy.sparse._sputils.int32max->numpy.int32(np.iinfo(np.int32).max)
A:scipy.sparse._sputils.arr->numpy.asarray(arr)
A:scipy.sparse._sputils.loose_int->bool(int(x) == x)
A:scipy.sparse._sputils.axis_type->type(axis)
A:scipy.sparse._sputils.shape_iter->iter(args[0])
A:scipy.sparse._sputils.new_shape->tuple((operator.index(arg) for arg in args))
A:scipy.sparse._sputils.current_size->prod(current_shape)
A:scipy.sparse._sputils.new_size->prod(new_shape)
A:scipy.sparse._sputils.specified->prod(new_shape[0:skip] + new_shape[skip + 1:])
A:scipy.sparse._sputils.(unspecified, remainder)->divmod(current_size, specified)
A:scipy.sparse._sputils.err_shape->tuple(('newshape' if x < 0 else x for x in new_shape))
A:scipy.sparse._sputils.order->kwargs.pop('order', 'C')
A:scipy.sparse._sputils.copy->kwargs.pop('copy', False)
A:scipy.sparse._sputils.base_cls->getattr(sys.modules.get('sparse'), 'SparseArray', None)
scipy.sparse._sputils._todata(s:'sp.spmatrix')->np.ndarray
scipy.sparse._sputils.asmatrix(data,dtype=None)
scipy.sparse._sputils.check_reshape_kwargs(kwargs)
scipy.sparse._sputils.check_shape(args,current_shape=None)
scipy.sparse._sputils.downcast_intp_index(arr)
scipy.sparse._sputils.get_index_dtype(arrays=(),maxval=None,check_contents=False)
scipy.sparse._sputils.get_sum_dtype(dtype)
scipy.sparse._sputils.getdata(obj,dtype=None,copy=False)
scipy.sparse._sputils.getdtype(dtype,a=None,default=None)
scipy.sparse._sputils.is_pydata_spmatrix(m)
scipy.sparse._sputils.isdense(x)
scipy.sparse._sputils.isintlike(x)
scipy.sparse._sputils.ismatrix(t)
scipy.sparse._sputils.isscalarlike(x)
scipy.sparse._sputils.issequence(t)
scipy.sparse._sputils.isshape(x,nonneg=False)
scipy.sparse._sputils.matrix(*args,**kwargs)
scipy.sparse._sputils.to_native(A)
scipy.sparse._sputils.upcast(*args)
scipy.sparse._sputils.upcast_char(*args)
scipy.sparse._sputils.upcast_scalar(dtype,scalar)
scipy.sparse._sputils.validateaxis(axis)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/_csc.py----------------------------------------
A:scipy.sparse._csc.idx_dtype->get_index_dtype((self.indptr, self.indices), maxval=max(self.nnz, N))
A:scipy.sparse._csc.indptr->numpy.empty(M + 1, dtype=idx_dtype)
A:scipy.sparse._csc.indices->numpy.empty(self.nnz, dtype=idx_dtype)
A:scipy.sparse._csc.data->numpy.empty(self.nnz, dtype=upcast(self.dtype))
A:scipy.sparse._csc.A->self._csr_container((data, indices, indptr), shape=self.shape, copy=False)
A:scipy.sparse._csc.(major_dim, minor_dim)->self._swap(self.shape)
A:scipy.sparse._csc.major_indices->numpy.empty(len(minor_indices), dtype=self.indices.dtype)
A:scipy.sparse._csc.(row, col)->self._swap((major_indices, minor_indices))
A:scipy.sparse._csc.ind->numpy.argsort(row, kind='mergesort')
A:scipy.sparse._csc.i->int(i)
scipy.sparse._csc.csc_matrix(_cs_matrix)
scipy.sparse._csc.csc_matrix.__iter__(self)
scipy.sparse._csc.csc_matrix._get_arrayXint(self,row,col)
scipy.sparse._csc.csc_matrix._get_arrayXslice(self,row,col)
scipy.sparse._csc.csc_matrix._get_intXarray(self,row,col)
scipy.sparse._csc.csc_matrix._get_intXslice(self,row,col)
scipy.sparse._csc.csc_matrix._get_sliceXarray(self,row,col)
scipy.sparse._csc.csc_matrix._get_sliceXint(self,row,col)
scipy.sparse._csc.csc_matrix._swap(self,x)
scipy.sparse._csc.csc_matrix.getcol(self,i)
scipy.sparse._csc.csc_matrix.getrow(self,i)
scipy.sparse._csc.csc_matrix.nonzero(self)
scipy.sparse._csc.csc_matrix.tocsc(self,copy=False)
scipy.sparse._csc.csc_matrix.tocsr(self,copy=False)
scipy.sparse._csc.csc_matrix.transpose(self,axes=None,copy=False)
scipy.sparse._csc.isspmatrix_csc(x)
scipy.sparse.csc_matrix(_cs_matrix)
scipy.sparse.csc_matrix.__iter__(self)
scipy.sparse.csc_matrix._get_arrayXint(self,row,col)
scipy.sparse.csc_matrix._get_arrayXslice(self,row,col)
scipy.sparse.csc_matrix._get_intXarray(self,row,col)
scipy.sparse.csc_matrix._get_intXslice(self,row,col)
scipy.sparse.csc_matrix._get_sliceXarray(self,row,col)
scipy.sparse.csc_matrix._get_sliceXint(self,row,col)
scipy.sparse.csc_matrix._swap(self,x)
scipy.sparse.csc_matrix.getcol(self,i)
scipy.sparse.csc_matrix.getrow(self,i)
scipy.sparse.csc_matrix.nonzero(self)
scipy.sparse.csc_matrix.tocsc(self,copy=False)
scipy.sparse.csc_matrix.tocsr(self,copy=False)
scipy.sparse.csc_matrix.transpose(self,axes=None,copy=False)
scipy.sparse.isspmatrix_csc(x)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/tests/test_base.py----------------------------------------
A:scipy.sparse.tests.test_base.NON_ARRAY_BACKED_FORMATS->frozenset(['dok'])
A:scipy.sparse.tests.test_base.sup_complex->suppress_warnings()
A:scipy.sparse.tests.test_base.maxval_limit->numpy.int64(maxval_limit)
A:scipy.sparse.tests.test_base.tp->get_index_dtype(arrays, maxval, check_contents)
A:scipy.sparse.tests.test_base.counter->numpy.random.RandomState(seed=1234)
A:scipy.sparse.tests.test_base.arr->numpy.asarray(arr)
A:scipy.sparse.tests.test_base.maxval->numpy.asarray(arr).max()
A:scipy.sparse.tests.test_base.minval->numpy.asarray(arr).min()
A:scipy.sparse.tests.test_base.cls.dat->array([[1, 0, 0, 2], [3, 0, 1, 0], [0, 2, 0, 0]], 'd')
A:scipy.sparse.tests.test_base.cls.datsp->cls.spmatrix(cls.dat)
A:scipy.sparse.tests.test_base.cls.checked_dtypes->set(supported_dtypes).union(cls.math_dtypes)
A:scipy.sparse.tests.test_base.cls.dat_dtypes[dtype]->cls.dat.astype(dtype)
A:scipy.sparse.tests.test_base.cls.datsp_dtypes[dtype]->cls.spmatrix(cls.dat.astype(dtype))
A:scipy.sparse.tests.test_base.dat->array([[0, 2], [3, 5], [-6, 9]])
A:scipy.sparse.tests.test_base.datsp->self.spmatrix(dat)
A:scipy.sparse.tests.test_base.sup->suppress_warnings()
A:scipy.sparse.tests.test_base.dat2->array([[0, 2], [3, 5], [-6, 9]]).copy()
A:scipy.sparse.tests.test_base.datsp2->self.spmatrix(dat2)
A:scipy.sparse.tests.test_base.datbsr->bsr_matrix(dat)
A:scipy.sparse.tests.test_base.datcsr->csr_matrix(dat)
A:scipy.sparse.tests.test_base.datcsc->csc_matrix(dat)
A:scipy.sparse.tests.test_base.datlil->lil_matrix(dat)
A:scipy.sparse.tests.test_base.datcomplex->array([[0, 2], [3, 5], [-6, 9]]).astype(complex)
A:scipy.sparse.tests.test_base.datspcomplex->self.spmatrix(datcomplex)
A:scipy.sparse.tests.test_base.val->numpy.int64(val)
A:scipy.sparse.tests.test_base.expected->self._create_some_matrix(mat_cls, 9, 9).toarray()
A:scipy.sparse.tests.test_base.a->coo_matrix([[1, 2, 3], [3, 4, 5]])
A:scipy.sparse.tests.test_base.A->self.spmatrix(D)
A:scipy.sparse.tests.test_base.D->numpy.eye(3)
A:scipy.sparse.tests.test_base.sparse_mat->self.spmatrix(m)
A:scipy.sparse.tests.test_base.B->self.spmatrix([[1, 2, 3]])
A:scipy.sparse.tests.test_base.x->self._insert_explicit_zero(M, zero_pos[0][k], zero_pos[1][k]).tocsr()
A:scipy.sparse.tests.test_base.y->self._insert_explicit_zero(M, zero_pos[0][k], zero_pos[1][k]).tocsr().reshape(new_shape, copy=True)
A:scipy.sparse.tests.test_base.v->numpy.random.randint(1, 20, size=r)
A:scipy.sparse.tests.test_base.n->min(len(d), len(v))
A:scipy.sparse.tests.test_base.i->numpy.array([[1]], dtype=int)
A:scipy.sparse.tests.test_base.j->numpy.arange(k, k + n)
A:scipy.sparse.tests.test_base.d->bsr_matrix((1, 2 ** 31))
A:scipy.sparse.tests.test_base.ks->numpy.arange(-m + 1, n - 1)
A:scipy.sparse.tests.test_base.msg->SKIP_TESTS.get(method_name)
A:scipy.sparse.tests.test_base.b->bsr_matrix((vals, indices, indptr), shape=(1, 2 ** 31))
A:scipy.sparse.tests.test_base.m->self._create_some_matrix(mat_cls, 9, 9)
A:scipy.sparse.tests.test_base.m2->self.spmatrix((4, 4))
A:scipy.sparse.tests.test_base.Asp->bsr_matrix((data, indices, indptr))
A:scipy.sparse.tests.test_base.A_nz->set([tuple(ij) for ij in transpose(np.nonzero(A))])
A:scipy.sparse.tests.test_base.Asp_nz->set([tuple(ij) for ij in transpose(np.nonzero(Asp))])
A:scipy.sparse.tests.test_base.dat_1->matrix([[0, 1, 2], [3, -4, 5], [-6, 7, 9]])
A:scipy.sparse.tests.test_base.dat_2->numpy.array([[]])
A:scipy.sparse.tests.test_base.dat_3->numpy.array([[]])
A:scipy.sparse.tests.test_base.dat_4->numpy.zeros((40, 40))
A:scipy.sparse.tests.test_base.out->numpy.zeros(self.datsp.shape, dtype=self.datsp.dtype)
A:scipy.sparse.tests.test_base.dat_mean->numpy.mean(dat)
A:scipy.sparse.tests.test_base.datsp_mean->numpy.mean(datsp)
A:scipy.sparse.tests.test_base.dat_out->numpy.zeros((3, 1))
A:scipy.sparse.tests.test_base.datsp_out->matrix(np.zeros((3, 1)))
A:scipy.sparse.tests.test_base.M->self._insert_explicit_zero(M, zero_pos[0][k], zero_pos[1][k])
A:scipy.sparse.tests.test_base.sM->self.spmatrix(M, shape=(3, 3), dtype=dtype)
A:scipy.sparse.tests.test_base.Mexp->scipy.linalg.expm(M)
A:scipy.sparse.tests.test_base.N->array([[3.0, 0.0, 1.0], [0.0, 2.0, 0.0], [0.0, 0.0, 0.0]])
A:scipy.sparse.tests.test_base.sN->self.spmatrix(N, shape=(3, 3), dtype=float)
A:scipy.sparse.tests.test_base.Nexp->scipy.linalg.expm(N)
A:scipy.sparse.tests.test_base.sMexp->expm(sM).toarray()
A:scipy.sparse.tests.test_base.sNexp->expm(sN).toarray()
A:scipy.sparse.tests.test_base.sMinv->inv(sM)
A:scipy.sparse.tests.test_base.S->self.spmatrix(D, blocksize=(1, 2))
A:scipy.sparse.tests.test_base.chk->self.datsp.toarray(order='F')
A:scipy.sparse.tests.test_base.spbool->self.spmatrix(self.dat, dtype=bool)
A:scipy.sparse.tests.test_base.matbool->self.dat.astype(bool)
A:scipy.sparse.tests.test_base.dense_dot_dense->dot(dat, b)
A:scipy.sparse.tests.test_base.check->dot(a, self.datsp.toarray())
A:scipy.sparse.tests.test_base.check2->dot(self.datsp.toarray(), b)
A:scipy.sparse.tests.test_base.arrbool->array([[0, 2], [3, 5], [-6, 9]]).astype(bool)
A:scipy.sparse.tests.test_base.D_casted->numpy.eye(3).astype(x)
A:scipy.sparse.tests.test_base.S_casted->self.spmatrix(D, blocksize=(1, 2)).astype(x, copy=copy)
A:scipy.sparse.tests.test_base.S_copied->self.spmatrix(D, blocksize=(1, 2)).astype(x, copy=copy).astype(x, copy=True)
A:scipy.sparse.tests.test_base.C->self.spmatrix([[1, 2, 3]]).tocsr()
A:scipy.sparse.tests.test_base.sumS->sum([k * datsp for k in range(1, 3)])
A:scipy.sparse.tests.test_base.sumD->sum([k * dat for k in range(1, 3)])
A:scipy.sparse.tests.test_base.Bsp->self.spmatrix(B)
A:scipy.sparse.tests.test_base.Csp->self.spmatrix(C)
A:scipy.sparse.tests.test_base.Dsp->self.spmatrix(D)
A:scipy.sparse.tests.test_base.E->array([[1, 0, 1], [4, 0, 0], [0, 0, 0], [0, 0, 1]])
A:scipy.sparse.tests.test_base.F->self.spmatrix(E)
A:scipy.sparse.tests.test_base.H->numpy.ones((3, 4))
A:scipy.sparse.tests.test_base.K->numpy.array([], dtype=int)
A:scipy.sparse.tests.test_base.L->array([[[1, 2], [0, 1]]])
A:scipy.sparse.tests.test_base.Esp->self.spmatrix(E)
A:scipy.sparse.tests.test_base.Fsp->self.spmatrix(F)
A:scipy.sparse.tests.test_base.Hsp->self.spmatrix(H)
A:scipy.sparse.tests.test_base.Hspp->self.spmatrix(H[0, None])
A:scipy.sparse.tests.test_base.Jsp->self.spmatrix(J)
A:scipy.sparse.tests.test_base.Jspp->self.spmatrix(J[:, 0, None])
A:scipy.sparse.tests.test_base.Ksp->self.spmatrix(K)
A:scipy.sparse.tests.test_base.sp_mult->numpy.array([[1]], dtype=int).multiply(j)
A:scipy.sparse.tests.test_base.denom->self.spmatrix(matrix([[1, 0, 0, 4], [-1, 0, 0, 0], [0, 8, 0, -5]], 'd'))
A:scipy.sparse.tests.test_base.ret_np->numpy.linalg.matrix_power(A, exponent)
A:scipy.sparse.tests.test_base.row->array([0, 0, 0, 1, 1, 1, 1, 1])
A:scipy.sparse.tests.test_base.actual->self._insert_explicit_zero(M, zero_pos[0][k], zero_pos[1][k]).dot(scalar)
A:scipy.sparse.tests.test_base.a2->array([[3, 0, 0], [0, 1, 0], [2, 0, 3.0], [2, 3, 0]])
A:scipy.sparse.tests.test_base.asp->bsr_matrix((data, indices, indptr), shape=(4, 20))
A:scipy.sparse.tests.test_base.bsp->bsr_matrix((data, indices, indptr), shape=(4, 20)).copy()
A:scipy.sparse.tests.test_base.csp->self.spmatrix(c)
A:scipy.sparse.tests.test_base.r->numpy.random.rand(n)
A:scipy.sparse.tests.test_base.c->bsr_matrix((1, 2 ** 31 - 1))
A:scipy.sparse.tests.test_base.fn->getattr(Asp, 'to' + format)
A:scipy.sparse.tests.test_base.empty->self.spmatrix((3, 4))
A:scipy.sparse.tests.test_base.A_dense->numpy.array([[1, 0, 3], [0, 4, 5], [0, 0, 0]])
A:scipy.sparse.tests.test_base.B_dense->numpy.array([[1, 1, 2], [0, 3, 6], [1, -1, 0]])
A:scipy.sparse.tests.test_base.A_dense_cpx->numpy.array([[1, 0, 3], [0, 4 + 2j, 5], [0, 1j, -1j]])
A:scipy.sparse.tests.test_base.max_s->self.spmatrix(D).maximum(B)
A:scipy.sparse.tests.test_base.min_s->self.spmatrix(D).minimum(B)
A:scipy.sparse.tests.test_base.max_d->numpy.maximum(toarray(A), toarray(B))
A:scipy.sparse.tests.test_base.min_d->numpy.minimum(toarray(A), toarray(B))
A:scipy.sparse.tests.test_base.toself->getattr(A, 'to' + A.format)
A:scipy.sparse.tests.test_base.mat->array([0, 1, 0, 0])
A:scipy.sparse.tests.test_base.e->bsr_matrix((vals2, indices, indptr), shape=(1, 2 ** 31 - 1))
A:scipy.sparse.tests.test_base.f->bsr_matrix((vals3, indices, indptr), shape=(1, 2 ** 31))
A:scipy.sparse.tests.test_base.dsp->self.spmatrix(d)
A:scipy.sparse.tests.test_base.esp->self.spmatrix(e)
A:scipy.sparse.tests.test_base.fsp->self.spmatrix(f)
A:scipy.sparse.tests.test_base.spm->self.spmatrix(m)
A:scipy.sparse.tests.test_base.sploaded->pickle.loads(pickle.dumps(datsp, protocol=protocol))
A:scipy.sparse.tests.test_base.ufunc->getattr(np, name)
A:scipy.sparse.tests.test_base.X->csc_matrix(np.arange(21).reshape(7, 3) / 21.0)
A:scipy.sparse.tests.test_base.X0->ufunc(X.toarray())
A:scipy.sparse.tests.test_base.X2->getattr(X, f)()
A:scipy.sparse.tests.test_base.bp->self.spmatrix(np.eye(5))
A:scipy.sparse.tests.test_base.A[0, 0]->numpy.dtype(dtype).type(0)
A:scipy.sparse.tests.test_base.A[1, 2]->numpy.dtype(dtype).type(4.0)
A:scipy.sparse.tests.test_base.A[0, 1]->numpy.dtype(dtype).type(5)
A:scipy.sparse.tests.test_base.A[2, 0]->numpy.dtype(dtype).type(2.0)
A:scipy.sparse.tests.test_base.A[0, -1]->numpy.dtype(dtype).type(8)
A:scipy.sparse.tests.test_base.A[-1, -2]->numpy.dtype(dtype).type(7)
A:scipy.sparse.tests.test_base.A[i + 1, i]->conjugate(y[i])
A:scipy.sparse.tests.test_base.v0->numpy.random.rand(50, 50)
A:scipy.sparse.tests.test_base.s->slice(int8(2), int8(4), None)
A:scipy.sparse.tests.test_base.ai->int(a)
A:scipy.sparse.tests.test_base.bi->int(b)
A:scipy.sparse.tests.test_base.B[:2, :2]->csc_matrix(array(block))
A:scipy.sparse.tests.test_base.B[:3]->csr_matrix(np.eye(3))
A:scipy.sparse.tests.test_base.A[0, 1:10:2]->range(1, 10, 2)
A:scipy.sparse.tests.test_base.B[0, 1:10:2]->range(1, 10, 2)
A:scipy.sparse.tests.test_base.I->numpy.array([[1], [2], [3]])
A:scipy.sparse.tests.test_base.J->numpy.array([3, 4, 2])
A:scipy.sparse.tests.test_base.SIJ->SIJ.toarray().toarray()
A:scipy.sparse.tests.test_base.Z1->numpy.zeros((6, 11), dtype=bool)
A:scipy.sparse.tests.test_base.Z2->numpy.zeros((6, 11), dtype=bool)
A:scipy.sparse.tests.test_base.Z3->numpy.zeros((6, 11), dtype=bool)
A:scipy.sparse.tests.test_base.Xsp->csr_matrix(X)
A:scipy.sparse.tests.test_base.Z->self.spmatrix(np.zeros(1))
A:scipy.sparse.tests.test_base.Y->numpy.array(np.random.randint(0, 2, size=(6, 10)), dtype=bool)
A:scipy.sparse.tests.test_base.Zsp->csr_matrix(Z)
A:scipy.sparse.tests.test_base.Ysp->csr_matrix(Y)
A:scipy.sparse.tests.test_base.indices->numpy.zeros(0, dtype=np.int32)
A:scipy.sparse.tests.test_base.A[[0, 1], [0, 1]]->numpy.dtype(dtype).type(1)
A:scipy.sparse.tests.test_base.A[0:2, 0:2]->numpy.dtype(dtype).type(1.0)
A:scipy.sparse.tests.test_base.A[2, 2]->numpy.dtype(dtype).type(1.0)
A:scipy.sparse.tests.test_base.i2->array(i0)
A:scipy.sparse.tests.test_base.self.__A->array([[-1.5, 6.5, 0, 2.25, 0, 0], [3.125, -7.875, 0.625, 0, 0, 0], [0, 0, -0.125, 1.0, 0, 0], [0, 0, 8.375, 0, 0, 0]], 'float64')
A:scipy.sparse.tests.test_base.self.__B->array([[0.375, 0, 0, 0, -5, 2.5], [14.25, -3.75, 0, 0, -0.125, 0], [0, 7.25, 0, 0, 0, 0], [18.5, -0.0625, 0, 0, 0, 0]], 'complex128')
A:scipy.sparse.tests.test_base.self.__B.imag->array([[1.25, 0, 0, 0, 6, -3.875], [2.25, 4.125, 0, 0, 0, 2.75], [0, 4.125, 0, 0, 0, 0], [-0.0625, 0, 0, 0, 0, 0]], 'float64')
A:scipy.sparse.tests.test_base.self.__Asp->self.spmatrix(self.__A)
A:scipy.sparse.tests.test_base.self.__Bsp->self.spmatrix(self.__B)
A:scipy.sparse.tests.test_base.func->getattr(datsp, fname)
A:scipy.sparse.tests.test_base.D1->numpy.empty((0, 5))
A:scipy.sparse.tests.test_base.D2->numpy.empty((5, 0))
A:scipy.sparse.tests.test_base.bool_dat->array([[0, 2], [3, 5], [-6, 9]]).astype(bool)
A:scipy.sparse.tests.test_base.new_dict->dict(cls.__dict__)
A:scipy.sparse.tests.test_base.new_dict[name]->wrap(func)
A:scipy.sparse.tests.test_base.old_cls->names.get(name)
A:scipy.sparse.tests.test_base.col->array([1, 2, 3, 4, 5, 6, 7, 8])
A:scipy.sparse.tests.test_base.data->data.repeat(2, axis=0).repeat(2, axis=0)
A:scipy.sparse.tests.test_base.ij->numpy.zeros((2, 0), dtype=np.int32)
A:scipy.sparse.tests.test_base.csr->bsr_matrix((vals, indices, indptr), shape=(1, 2 ** 31)).tocsr()
A:scipy.sparse.tests.test_base.dense->array([[2 ** 63 + 1, 0], [0, 1]], dtype=np.uint64)
A:scipy.sparse.tests.test_base.indptr->kwargs.pop('indptr', None)
A:scipy.sparse.tests.test_base.ptr->array([0, 2, 4, 6], dtype=np.int64)
A:scipy.sparse.tests.test_base.sorted_inds->numpy.array([0, 1])
A:scipy.sparse.tests.test_base.unsorted_inds->numpy.array([1, 0])
A:scipy.sparse.tests.test_base.vals->numpy.zeros((0, 1, 1))
A:scipy.sparse.tests.test_base.csc->coo_matrix([[1, 2, 3], [3, 4, 5]]).tocsc()
A:scipy.sparse.tests.test_base.da->bsr_matrix((1, 2 ** 31)).toarray()
A:scipy.sparse.tests.test_base.result->self.spmatrix(D).copy()
A:scipy.sparse.tests.test_base.l->lil_matrix((4, 3))
A:scipy.sparse.tests.test_base.coo->coo_matrix(([1, 1, 1, 1], ([0, 2, 2, 0], [0, 1, 1, 0])))
A:scipy.sparse.tests.test_base.dia->coo_matrix(zeros).todia()
A:scipy.sparse.tests.test_base.dok->coo_matrix(([1, 1, 1, 1], ([0, 2, 2, 0], [0, 1, 1, 0]))).todok()
A:scipy.sparse.tests.test_base.mat1->coo_matrix(([1], ([3000000], [1000])), (3000001, 1001))
A:scipy.sparse.tests.test_base.mat2->coo_matrix(([1], ([1000], [3000000])), (1001, 3000001))
A:scipy.sparse.tests.test_base.offsets->numpy.array([0, -1, 2])
A:scipy.sparse.tests.test_base.data[0]->array([[0, 1, 2], [3, 0, 5]])
A:scipy.sparse.tests.test_base.data[1]->array([[0, 2, 4], [6, 0, 10]])
A:scipy.sparse.tests.test_base.data[2]->array([[0, 4, 8], [12, 0, 20]])
A:scipy.sparse.tests.test_base.data[3]->array([[0, 5, 10], [15, 0, 25]])
A:scipy.sparse.tests.test_base.data_1dim->numpy.ones(n)
A:scipy.sparse.tests.test_base.Absr->bsr_matrix((data, indices, indptr), shape=(6, 12))
A:scipy.sparse.tests.test_base.Acsr->bsr_matrix((data, indices, indptr), shape=(6, 12)).tocsr()
A:scipy.sparse.tests.test_base.Acsr_via_coo->bsr_matrix((data, indices, indptr), shape=(6, 12)).tocoo().tocsr()
A:scipy.sparse.tests.test_base.vals2->numpy.zeros((0, 1, 2 ** 31 - 1))
A:scipy.sparse.tests.test_base.vals3->numpy.zeros((0, 1, 2 ** 31))
A:scipy.sparse.tests.test_base.zeros_pos->(data == 0).nonzero()
A:scipy.sparse.tests.test_base.pos->tuple((p[0] for p in zeros_pos))
A:scipy.sparse.tests.test_base.inds->tuple((indices.repeat(2) for indices in inds))
A:scipy.sparse.tests.test_base.zero_pos->(M.A == 0).nonzero()
A:scipy.sparse.tests.test_base.arg1->self._arg1_for_noncanonical(M, sorted_indices)
A:scipy.sparse.tests.test_base.NC->construct(arg1, **kwargs)
A:scipy.sparse.tests.test_base.(data, indices, indptr)->_same_sum_duplicate(M.data, M.indices, indptr=M.indptr)
A:scipy.sparse.tests.test_base.indices[start:stop]->indices[start:stop][::-1].copy()
A:scipy.sparse.tests.test_base.data[start:stop]->data[start:stop][::-1].copy()
A:scipy.sparse.tests.test_base.D[1, :]->self.spmatrix([[1, 2, 3]]).toarray()
A:scipy.sparse.tests.test_base.D[:, 2]->self.spmatrix([[1, 2, 3]]).toarray().ravel()
A:scipy.sparse.tests.test_base.(data, row, col)->_same_sum_duplicate(M.data, M.row, M.col)
A:scipy.sparse.tests.test_base.method->getattr(cls, method_name)
A:scipy.sparse.tests.test_base.markers->getattr(method, 'pytestmark', [])
A:scipy.sparse.tests.test_base.dtype->numpy.dtype(dtype)
A:scipy.sparse.tests.test_base.instance->cls()
scipy.sparse.tests.testBinopTester
scipy.sparse.tests.testBinopTester.__add__(self,mat)
scipy.sparse.tests.testBinopTester.__matmul__(self,mat)
scipy.sparse.tests.testBinopTester.__mul__(self,mat)
scipy.sparse.tests.testBinopTester.__radd__(self,mat)
scipy.sparse.tests.testBinopTester.__rmatmul__(self,mat)
scipy.sparse.tests.testBinopTester.__rmul__(self,mat)
scipy.sparse.tests.testBinopTester.__rsub__(self,mat)
scipy.sparse.tests.testBinopTester.__sub__(self,mat)
scipy.sparse.tests.testBinopTester_with_shape(self,shape)
scipy.sparse.tests.testBinopTester_with_shape.__add__(self,mat)
scipy.sparse.tests.testBinopTester_with_shape.__matmul__(self,mat)
scipy.sparse.tests.testBinopTester_with_shape.__mul__(self,mat)
scipy.sparse.tests.testBinopTester_with_shape.__radd__(self,mat)
scipy.sparse.tests.testBinopTester_with_shape.__rmatmul__(self,mat)
scipy.sparse.tests.testBinopTester_with_shape.__rmul__(self,mat)
scipy.sparse.tests.testBinopTester_with_shape.__rsub__(self,mat)
scipy.sparse.tests.testBinopTester_with_shape.__sub__(self,mat)
scipy.sparse.tests.testBinopTester_with_shape.ndim(self)
scipy.sparse.tests.testBinopTester_with_shape.shape(self)
scipy.sparse.tests.testTest64Bit
scipy.sparse.tests.testTest64Bit._check_resiliency(self,cls,method_name,**kw)
scipy.sparse.tests.testTest64Bit._compare_index_dtype(self,m,dtype)
scipy.sparse.tests.testTest64Bit._create_some_matrix(self,mat_cls,m,n)
scipy.sparse.tests.testTest64Bit.test_decorator_maxval_limit(self)
scipy.sparse.tests.testTest64Bit.test_decorator_maxval_random(self)
scipy.sparse.tests.testTest64Bit.test_downcast_intp(self)
scipy.sparse.tests.testTest64Bit.test_no_64(self,cls,method_name)
scipy.sparse.tests.testTest64Bit.test_resiliency_all_32(self,cls,method_name)
scipy.sparse.tests.testTest64Bit.test_resiliency_all_64(self,cls,method_name)
scipy.sparse.tests.testTest64Bit.test_resiliency_limit_10(self,cls,method_name)
scipy.sparse.tests.testTest64Bit.test_resiliency_random(self,cls,method_name)
scipy.sparse.tests.testTestBSR(sparse_test_class(getset=False,slicing=False,slicing_assign=False,fancy_indexing=False,fancy_assign=False,nnz_axis=False))
scipy.sparse.tests.testTestBSR.test_bsr_matvec(self)
scipy.sparse.tests.testTestBSR.test_bsr_matvecs(self)
scipy.sparse.tests.testTestBSR.test_bsr_tocsr(self)
scipy.sparse.tests.testTestBSR.test_constructor1(self)
scipy.sparse.tests.testTestBSR.test_constructor2(self)
scipy.sparse.tests.testTestBSR.test_constructor3(self)
scipy.sparse.tests.testTestBSR.test_constructor4(self)
scipy.sparse.tests.testTestBSR.test_constructor5(self)
scipy.sparse.tests.testTestBSR.test_default_dtype(self)
scipy.sparse.tests.testTestBSR.test_eliminate_zeros(self)
scipy.sparse.tests.testTestBSR.test_eliminate_zeros_all_zero(self)
scipy.sparse.tests.testTestBSR.test_iterator(self)
scipy.sparse.tests.testTestBSR.test_resize_blocked(self)
scipy.sparse.tests.testTestBSR.test_scalar_idx_dtype(self)
scipy.sparse.tests.testTestBSR.test_setdiag(self)
scipy.sparse.tests.testTestBSR.test_setdiag_comprehensive(self)
scipy.sparse.tests.testTestBSRNonCanonical(_NonCanonicalCompressedMixin,TestBSR)
scipy.sparse.tests.testTestBSRNonCanonical._insert_explicit_zero(self,M,i,j)
scipy.sparse.tests.testTestBSRNonCanonical.test_diagonal(self)
scipy.sparse.tests.testTestBSRNonCanonical.test_expm(self)
scipy.sparse.tests.testTestCOO(sparse_test_class(getset=False,slicing=False,slicing_assign=False,fancy_indexing=False,fancy_assign=False))
scipy.sparse.tests.testTestCOO.test_constructor1(self)
scipy.sparse.tests.testTestCOO.test_constructor2(self)
scipy.sparse.tests.testTestCOO.test_constructor3(self)
scipy.sparse.tests.testTestCOO.test_constructor4(self)
scipy.sparse.tests.testTestCOO.test_constructor_data_ij_dtypeNone(self)
scipy.sparse.tests.testTestCOO.test_eliminate_zeros(self)
scipy.sparse.tests.testTestCOO.test_iterator(self)
scipy.sparse.tests.testTestCOO.test_large_dimensions_reshape(self)
scipy.sparse.tests.testTestCOO.test_reshape_copy(self)
scipy.sparse.tests.testTestCOO.test_sum_duplicates(self)
scipy.sparse.tests.testTestCOO.test_todia_all_zeros(self)
scipy.sparse.tests.testTestCOO.test_todok_duplicates(self)
scipy.sparse.tests.testTestCOONonCanonical(_NonCanonicalMixin,TestCOO)
scipy.sparse.tests.testTestCOONonCanonical._arg1_for_noncanonical(self,M,sorted_indices=None)
scipy.sparse.tests.testTestCOONonCanonical._insert_explicit_zero(self,M,i,j)
scipy.sparse.tests.testTestCOONonCanonical.test_setdiag_noncanonical(self)
scipy.sparse.tests.testTestCSC(sparse_test_class())
scipy.sparse.tests.testTestCSC.spmatrix(cls,*args,**kwargs)
scipy.sparse.tests.testTestCSC.test_constructor1(self)
scipy.sparse.tests.testTestCSC.test_constructor2(self)
scipy.sparse.tests.testTestCSC.test_constructor3(self)
scipy.sparse.tests.testTestCSC.test_constructor4(self)
scipy.sparse.tests.testTestCSC.test_constructor5(self)
scipy.sparse.tests.testTestCSC.test_constructor6(self)
scipy.sparse.tests.testTestCSC.test_eliminate_zeros(self)
scipy.sparse.tests.testTestCSC.test_fancy_indexing_broadcast(self)
scipy.sparse.tests.testTestCSC.test_scalar_idx_dtype(self)
scipy.sparse.tests.testTestCSC.test_sort_indices(self)
scipy.sparse.tests.testTestCSC.test_ufuncs(self)
scipy.sparse.tests.testTestCSC.test_unsorted_arithmetic(self)
scipy.sparse.tests.testTestCSCNonCanonical(_NonCanonicalCSMixin,TestCSC)
scipy.sparse.tests.testTestCSR(sparse_test_class())
scipy.sparse.tests.testTestCSR.spmatrix(cls,*args,**kwargs)
scipy.sparse.tests.testTestCSR.test_binop_explicit_zeros(self)
scipy.sparse.tests.testTestCSR.test_constructor1(self)
scipy.sparse.tests.testTestCSR.test_constructor2(self)
scipy.sparse.tests.testTestCSR.test_constructor3(self)
scipy.sparse.tests.testTestCSR.test_constructor4(self)
scipy.sparse.tests.testTestCSR.test_constructor5(self)
scipy.sparse.tests.testTestCSR.test_constructor6(self)
scipy.sparse.tests.testTestCSR.test_constructor_largecol(self)
scipy.sparse.tests.testTestCSR.test_constructor_smallcol(self)
scipy.sparse.tests.testTestCSR.test_eliminate_zeros(self)
scipy.sparse.tests.testTestCSR.test_fancy_indexing_broadcast(self)
scipy.sparse.tests.testTestCSR.test_has_canonical_format(self)
scipy.sparse.tests.testTestCSR.test_has_sorted_indices(self)
scipy.sparse.tests.testTestCSR.test_scalar_idx_dtype(self)
scipy.sparse.tests.testTestCSR.test_sort_indices(self)
scipy.sparse.tests.testTestCSR.test_ufuncs(self)
scipy.sparse.tests.testTestCSR.test_unsorted_arithmetic(self)
scipy.sparse.tests.testTestCSRNonCanonical(_NonCanonicalCSMixin,TestCSR)
scipy.sparse.tests.testTestDIA(sparse_test_class(getset=False,slicing=False,slicing_assign=False,fancy_indexing=False,fancy_assign=False,minmax=False,nnz_axis=False))
scipy.sparse.tests.testTestDIA.test_constructor1(self)
scipy.sparse.tests.testTestDIA.test_convert_gh14555(self)
scipy.sparse.tests.testTestDIA.test_getnnz_axis(self)
scipy.sparse.tests.testTestDIA.test_iterator(self)
scipy.sparse.tests.testTestDIA.test_setdiag_dtype(self)
scipy.sparse.tests.testTestDOK(sparse_test_class(minmax=False,nnz_axis=False))
scipy.sparse.tests.testTestDOK.test_add_nonzero(self)
scipy.sparse.tests.testTestDOK.test_convert(self)
scipy.sparse.tests.testTestDOK.test_ctor(self)
scipy.sparse.tests.testTestDOK.test_dok_divide_scalar(self)
scipy.sparse.tests.testTestDOK.test_mult(self)
scipy.sparse.tests.testTestDOK.test_ticket1160(self)
scipy.sparse.tests.testTestLIL(sparse_test_class(minmax=False))
scipy.sparse.tests.testTestLIL.test_dot(self)
scipy.sparse.tests.testTestLIL.test_fancy_indexing_lil(self)
scipy.sparse.tests.testTestLIL.test_inplace_ops(self)
scipy.sparse.tests.testTestLIL.test_lil_from_csr(self)
scipy.sparse.tests.testTestLIL.test_lil_iteration(self)
scipy.sparse.tests.testTestLIL.test_lil_multiply_removal(self)
scipy.sparse.tests.testTestLIL.test_point_wise_multiply(self)
scipy.sparse.tests.testTestLIL.test_scalar_mul(self)
scipy.sparse.tests.test_NonCanonicalCSMixin(_NonCanonicalCompressedMixin)
scipy.sparse.tests.test_NonCanonicalCSMixin.test_getelement(self)
scipy.sparse.tests.test_NonCanonicalCSMixin.test_inv(self)
scipy.sparse.tests.test_NonCanonicalCSMixin.test_setitem_sparse(self)
scipy.sparse.tests.test_NonCanonicalCSMixin.test_solve(self)
scipy.sparse.tests.test_NonCanonicalCompressedMixin(_NonCanonicalMixin)
scipy.sparse.tests.test_NonCanonicalCompressedMixin._arg1_for_noncanonical(self,M,sorted_indices=False)
scipy.sparse.tests.test_NonCanonicalCompressedMixin._insert_explicit_zero(self,M,i,j)
scipy.sparse.tests.test_NonCanonicalMixin
scipy.sparse.tests.test_NonCanonicalMixin.spmatrix(self,D,sorted_indices=False,**kwargs)
scipy.sparse.tests.test_NonCanonicalMixin.test_bool(self)
scipy.sparse.tests.test_NonCanonicalMixin.test_empty(self)
scipy.sparse.tests.test_NonCanonicalMixin.test_getnnz_axis(self)
scipy.sparse.tests.test_TestArithmetic
scipy.sparse.tests.test_TestArithmetic.__arith_init(self)
scipy.sparse.tests.test_TestArithmetic.test_add_sub(self)
scipy.sparse.tests.test_TestArithmetic.test_mu(self)
scipy.sparse.tests.test_TestCommon
scipy.sparse.tests.test_TestCommon.init_class(cls)
scipy.sparse.tests.test_TestCommon.test_abs(self)
scipy.sparse.tests.test_TestCommon.test_add(self)
scipy.sparse.tests.test_TestCommon.test_add0(self)
scipy.sparse.tests.test_TestCommon.test_add_dense(self)
scipy.sparse.tests.test_TestCommon.test_asfptype(self)
scipy.sparse.tests.test_TestCommon.test_astype(self)
scipy.sparse.tests.test_TestCommon.test_binop_custom_type(self)
scipy.sparse.tests.test_TestCommon.test_binop_custom_type_with_shape(self)
scipy.sparse.tests.test_TestCommon.test_bool(self)
scipy.sparse.tests.test_TestCommon.test_bool_rollover(self)
scipy.sparse.tests.test_TestCommon.test_constructor1_base(self)
scipy.sparse.tests.test_TestCommon.test_copy(self)
scipy.sparse.tests.test_TestCommon.test_count_nonzero(self)
scipy.sparse.tests.test_TestCommon.test_diagonal(self)
scipy.sparse.tests.test_TestCommon.test_dot_scalar(self)
scipy.sparse.tests.test_TestCommon.test_elementwise_divide(self)
scipy.sparse.tests.test_TestCommon.test_elementwise_multiply(self)
scipy.sparse.tests.test_TestCommon.test_elementwise_multiply_broadcast(self)
scipy.sparse.tests.test_TestCommon.test_elementwise_power(self)
scipy.sparse.tests.test_TestCommon.test_empty(self)
scipy.sparse.tests.test_TestCommon.test_empty_arithmetic(self)
scipy.sparse.tests.test_TestCommon.test_eq(self)
scipy.sparse.tests.test_TestCommon.test_expm(self)
scipy.sparse.tests.test_TestCommon.test_from_array(self)
scipy.sparse.tests.test_TestCommon.test_from_list(self)
scipy.sparse.tests.test_TestCommon.test_from_matrix(self)
scipy.sparse.tests.test_TestCommon.test_from_sparse(self)
scipy.sparse.tests.test_TestCommon.test_ge(self)
scipy.sparse.tests.test_TestCommon.test_getcol(self)
scipy.sparse.tests.test_TestCommon.test_getrow(self)
scipy.sparse.tests.test_TestCommon.test_gt(self)
scipy.sparse.tests.test_TestCommon.test_imag(self)
scipy.sparse.tests.test_TestCommon.test_inv(self)
scipy.sparse.tests.test_TestCommon.test_invalid_shapes(self)
scipy.sparse.tests.test_TestCommon.test_iterator(self)
scipy.sparse.tests.test_TestCommon.test_le(self)
scipy.sparse.tests.test_TestCommon.test_lt(self)
scipy.sparse.tests.test_TestCommon.test_matmat_dense(self)
scipy.sparse.tests.test_TestCommon.test_matmat_sparse(self)
scipy.sparse.tests.test_TestCommon.test_matmul(self)
scipy.sparse.tests.test_TestCommon.test_matvec(self)
scipy.sparse.tests.test_TestCommon.test_maximum_minimum(self)
scipy.sparse.tests.test_TestCommon.test_mean(self)
scipy.sparse.tests.test_TestCommon.test_mean_dtype(self)
scipy.sparse.tests.test_TestCommon.test_mean_invalid_params(self)
scipy.sparse.tests.test_TestCommon.test_mean_out(self)
scipy.sparse.tests.test_TestCommon.test_mul_scalar(self)
scipy.sparse.tests.test_TestCommon.test_ne(self)
scipy.sparse.tests.test_TestCommon.test_neg(self)
scipy.sparse.tests.test_TestCommon.test_nonzero(self)
scipy.sparse.tests.test_TestCommon.test_numpy_mean(self)
scipy.sparse.tests.test_TestCommon.test_numpy_nonzero(self)
scipy.sparse.tests.test_TestCommon.test_numpy_sum(self)
scipy.sparse.tests.test_TestCommon.test_pickle(self)
scipy.sparse.tests.test_TestCommon.test_pow(self)
scipy.sparse.tests.test_TestCommon.test_radd(self)
scipy.sparse.tests.test_TestCommon.test_real(self)
scipy.sparse.tests.test_TestCommon.test_repr(self)
scipy.sparse.tests.test_TestCommon.test_reshape(self)
scipy.sparse.tests.test_TestCommon.test_resize(self)
scipy.sparse.tests.test_TestCommon.test_rmatvec(self)
scipy.sparse.tests.test_TestCommon.test_rmul_scalar(self)
scipy.sparse.tests.test_TestCommon.test_rmul_scalar_type_error(self)
scipy.sparse.tests.test_TestCommon.test_round(self)
scipy.sparse.tests.test_TestCommon.test_rsub(self)
scipy.sparse.tests.test_TestCommon.test_setdiag(self)
scipy.sparse.tests.test_TestCommon.test_setdiag_comprehensive(self)
scipy.sparse.tests.test_TestCommon.test_size_zero_conversions(self)
scipy.sparse.tests.test_TestCommon.test_size_zero_matrix_arithmetic(self)
scipy.sparse.tests.test_TestCommon.test_small_multiplication(self)
scipy.sparse.tests.test_TestCommon.test_sparse_format_conversions(self)
scipy.sparse.tests.test_TestCommon.test_str(self)
scipy.sparse.tests.test_TestCommon.test_sub(self)
scipy.sparse.tests.test_TestCommon.test_sub_dense(self)
scipy.sparse.tests.test_TestCommon.test_sum(self)
scipy.sparse.tests.test_TestCommon.test_sum_dtype(self)
scipy.sparse.tests.test_TestCommon.test_sum_invalid_params(self)
scipy.sparse.tests.test_TestCommon.test_sum_out(self)
scipy.sparse.tests.test_TestCommon.test_toarray(self)
scipy.sparse.tests.test_TestCommon.test_tobsr(self)
scipy.sparse.tests.test_TestCommon.test_todense(self)
scipy.sparse.tests.test_TestCommon.test_trace(self)
scipy.sparse.tests.test_TestCommon.test_transpose(self)
scipy.sparse.tests.test_TestCommon.test_unary_ufunc_overrides(self)
scipy.sparse.tests.test_TestFancyIndexing
scipy.sparse.tests.test_TestFancyIndexing.test_bad_index(self)
scipy.sparse.tests.test_TestFancyIndexing.test_dtype_preservation_empty_index(self)
scipy.sparse.tests.test_TestFancyIndexing.test_fancy_indexing(self)
scipy.sparse.tests.test_TestFancyIndexing.test_fancy_indexing_2d_assign(self)
scipy.sparse.tests.test_TestFancyIndexing.test_fancy_indexing_boolean(self)
scipy.sparse.tests.test_TestFancyIndexing.test_fancy_indexing_empty(self)
scipy.sparse.tests.test_TestFancyIndexing.test_fancy_indexing_randomized(self)
scipy.sparse.tests.test_TestFancyIndexing.test_fancy_indexing_regression_3087(self)
scipy.sparse.tests.test_TestFancyIndexing.test_fancy_indexing_seq_assign(self)
scipy.sparse.tests.test_TestFancyIndexing.test_fancy_indexing_sparse_boolean(self)
scipy.sparse.tests.test_TestFancyIndexingAssign
scipy.sparse.tests.test_TestFancyIndexingAssign.test_bad_index_assign(self)
scipy.sparse.tests.test_TestFancyIndexingAssign.test_fancy_assign_empty(self)
scipy.sparse.tests.test_TestFancyIndexingAssign.test_fancy_assignment_dtypes(self)
scipy.sparse.tests.test_TestFancyIndexingAssign.test_fancy_indexing_set(self)
scipy.sparse.tests.test_TestFancyIndexingAssign.test_sequence_assignment(self)
scipy.sparse.tests.test_TestFancyMultidim
scipy.sparse.tests.test_TestFancyMultidim.test_fancy_indexing_ndarray(self)
scipy.sparse.tests.test_TestFancyMultidimAssign
scipy.sparse.tests.test_TestFancyMultidimAssign.test_fancy_assign_list(self)
scipy.sparse.tests.test_TestFancyMultidimAssign.test_fancy_assign_ndarray(self)
scipy.sparse.tests.test_TestFancyMultidimAssign.test_fancy_assign_slice(self)
scipy.sparse.tests.test_TestFancyMultidimAssign.test_fancy_indexing_multidim_set(self)
scipy.sparse.tests.test_TestGetNnzAxis
scipy.sparse.tests.test_TestGetNnzAxis.test_getnnz_axis(self)
scipy.sparse.tests.test_TestGetSet
scipy.sparse.tests.test_TestGetSet.test_getelement(self)
scipy.sparse.tests.test_TestGetSet.test_index_scalar_assign(self)
scipy.sparse.tests.test_TestGetSet.test_negative_index_assignment(self)
scipy.sparse.tests.test_TestGetSet.test_scalar_assign_2(self)
scipy.sparse.tests.test_TestGetSet.test_setelement(self)
scipy.sparse.tests.test_TestInplaceArithmetic
scipy.sparse.tests.test_TestInplaceArithmetic.test_idiv_scalar(self)
scipy.sparse.tests.test_TestInplaceArithmetic.test_imul_scalar(self)
scipy.sparse.tests.test_TestInplaceArithmetic.test_inplace_dense(self)
scipy.sparse.tests.test_TestInplaceArithmetic.test_inplace_success(self)
scipy.sparse.tests.test_TestMinMax
scipy.sparse.tests.test_TestMinMax.test_argmax(self)
scipy.sparse.tests.test_TestMinMax.test_minmax(self)
scipy.sparse.tests.test_TestMinMax.test_minmax_axis(self)
scipy.sparse.tests.test_TestMinMax.test_minmax_invalid_params(self)
scipy.sparse.tests.test_TestMinMax.test_numpy_minmax(self)
scipy.sparse.tests.test_TestSlicing
scipy.sparse.tests.test_TestSlicing.test_dtype_preservation(self)
scipy.sparse.tests.test_TestSlicing.test_dtype_preservation_empty_slice(self)
scipy.sparse.tests.test_TestSlicing.test_ellipsis_slicing(self)
scipy.sparse.tests.test_TestSlicing.test_get_horiz_slice(self)
scipy.sparse.tests.test_TestSlicing.test_get_slices(self)
scipy.sparse.tests.test_TestSlicing.test_get_vert_slice(self)
scipy.sparse.tests.test_TestSlicing.test_multiple_ellipsis_slicing(self)
scipy.sparse.tests.test_TestSlicing.test_non_unit_stride_2d_indexing(self)
scipy.sparse.tests.test_TestSlicing.test_slicing_2(self)
scipy.sparse.tests.test_TestSlicing.test_slicing_3(self)
scipy.sparse.tests.test_TestSlicingAssign
scipy.sparse.tests.test_TestSlicingAssign.test_assign_1d_slice(self)
scipy.sparse.tests.test_TestSlicingAssign.test_assign_empty_spmatrix(self)
scipy.sparse.tests.test_TestSlicingAssign.test_self_self_assignment(self)
scipy.sparse.tests.test_TestSlicingAssign.test_set_slice(self)
scipy.sparse.tests.test_TestSlicingAssign.test_slice_assign_2(self)
scipy.sparse.tests.test_TestSlicingAssign.test_slice_assignment(self)
scipy.sparse.tests.test_TestSlicingAssign.test_slice_scalar_assign(self)
scipy.sparse.tests.test_TestSlicingAssign.test_sparsity_modifying_assignment(self)
scipy.sparse.tests.test_TestSolve
scipy.sparse.tests.test_TestSolve.test_solve(self)
scipy.sparse.tests.test_base.BinopTester
scipy.sparse.tests.test_base.BinopTester.__add__(self,mat)
scipy.sparse.tests.test_base.BinopTester.__matmul__(self,mat)
scipy.sparse.tests.test_base.BinopTester.__mul__(self,mat)
scipy.sparse.tests.test_base.BinopTester.__radd__(self,mat)
scipy.sparse.tests.test_base.BinopTester.__rmatmul__(self,mat)
scipy.sparse.tests.test_base.BinopTester.__rmul__(self,mat)
scipy.sparse.tests.test_base.BinopTester.__rsub__(self,mat)
scipy.sparse.tests.test_base.BinopTester.__sub__(self,mat)
scipy.sparse.tests.test_base.BinopTester_with_shape(self,shape)
scipy.sparse.tests.test_base.BinopTester_with_shape.__add__(self,mat)
scipy.sparse.tests.test_base.BinopTester_with_shape.__init__(self,shape)
scipy.sparse.tests.test_base.BinopTester_with_shape.__matmul__(self,mat)
scipy.sparse.tests.test_base.BinopTester_with_shape.__mul__(self,mat)
scipy.sparse.tests.test_base.BinopTester_with_shape.__radd__(self,mat)
scipy.sparse.tests.test_base.BinopTester_with_shape.__rmatmul__(self,mat)
scipy.sparse.tests.test_base.BinopTester_with_shape.__rmul__(self,mat)
scipy.sparse.tests.test_base.BinopTester_with_shape.__rsub__(self,mat)
scipy.sparse.tests.test_base.BinopTester_with_shape.__sub__(self,mat)
scipy.sparse.tests.test_base.BinopTester_with_shape.ndim(self)
scipy.sparse.tests.test_base.BinopTester_with_shape.shape(self)
scipy.sparse.tests.test_base.Test64Bit
scipy.sparse.tests.test_base.Test64Bit._check_resiliency(self,cls,method_name,**kw)
scipy.sparse.tests.test_base.Test64Bit._compare_index_dtype(self,m,dtype)
scipy.sparse.tests.test_base.Test64Bit._create_some_matrix(self,mat_cls,m,n)
scipy.sparse.tests.test_base.Test64Bit.test_decorator_maxval_limit(self)
scipy.sparse.tests.test_base.Test64Bit.test_decorator_maxval_random(self)
scipy.sparse.tests.test_base.Test64Bit.test_downcast_intp(self)
scipy.sparse.tests.test_base.Test64Bit.test_no_64(self,cls,method_name)
scipy.sparse.tests.test_base.Test64Bit.test_resiliency_all_32(self,cls,method_name)
scipy.sparse.tests.test_base.Test64Bit.test_resiliency_all_64(self,cls,method_name)
scipy.sparse.tests.test_base.Test64Bit.test_resiliency_limit_10(self,cls,method_name)
scipy.sparse.tests.test_base.Test64Bit.test_resiliency_random(self,cls,method_name)
scipy.sparse.tests.test_base.TestBSR(sparse_test_class(getset=False,slicing=False,slicing_assign=False,fancy_indexing=False,fancy_assign=False,nnz_axis=False))
scipy.sparse.tests.test_base.TestBSR.test_bsr_matvec(self)
scipy.sparse.tests.test_base.TestBSR.test_bsr_matvecs(self)
scipy.sparse.tests.test_base.TestBSR.test_bsr_tocsr(self)
scipy.sparse.tests.test_base.TestBSR.test_constructor1(self)
scipy.sparse.tests.test_base.TestBSR.test_constructor2(self)
scipy.sparse.tests.test_base.TestBSR.test_constructor3(self)
scipy.sparse.tests.test_base.TestBSR.test_constructor4(self)
scipy.sparse.tests.test_base.TestBSR.test_constructor5(self)
scipy.sparse.tests.test_base.TestBSR.test_default_dtype(self)
scipy.sparse.tests.test_base.TestBSR.test_eliminate_zeros(self)
scipy.sparse.tests.test_base.TestBSR.test_eliminate_zeros_all_zero(self)
scipy.sparse.tests.test_base.TestBSR.test_iterator(self)
scipy.sparse.tests.test_base.TestBSR.test_resize_blocked(self)
scipy.sparse.tests.test_base.TestBSR.test_scalar_idx_dtype(self)
scipy.sparse.tests.test_base.TestBSR.test_setdiag(self)
scipy.sparse.tests.test_base.TestBSR.test_setdiag_comprehensive(self)
scipy.sparse.tests.test_base.TestBSRNonCanonical(_NonCanonicalCompressedMixin,TestBSR)
scipy.sparse.tests.test_base.TestBSRNonCanonical._insert_explicit_zero(self,M,i,j)
scipy.sparse.tests.test_base.TestBSRNonCanonical.test_diagonal(self)
scipy.sparse.tests.test_base.TestBSRNonCanonical.test_expm(self)
scipy.sparse.tests.test_base.TestCOO(sparse_test_class(getset=False,slicing=False,slicing_assign=False,fancy_indexing=False,fancy_assign=False))
scipy.sparse.tests.test_base.TestCOO.test_constructor1(self)
scipy.sparse.tests.test_base.TestCOO.test_constructor2(self)
scipy.sparse.tests.test_base.TestCOO.test_constructor3(self)
scipy.sparse.tests.test_base.TestCOO.test_constructor4(self)
scipy.sparse.tests.test_base.TestCOO.test_constructor_data_ij_dtypeNone(self)
scipy.sparse.tests.test_base.TestCOO.test_eliminate_zeros(self)
scipy.sparse.tests.test_base.TestCOO.test_iterator(self)
scipy.sparse.tests.test_base.TestCOO.test_large_dimensions_reshape(self)
scipy.sparse.tests.test_base.TestCOO.test_reshape_copy(self)
scipy.sparse.tests.test_base.TestCOO.test_sum_duplicates(self)
scipy.sparse.tests.test_base.TestCOO.test_todia_all_zeros(self)
scipy.sparse.tests.test_base.TestCOO.test_todok_duplicates(self)
scipy.sparse.tests.test_base.TestCOONonCanonical(_NonCanonicalMixin,TestCOO)
scipy.sparse.tests.test_base.TestCOONonCanonical._arg1_for_noncanonical(self,M,sorted_indices=None)
scipy.sparse.tests.test_base.TestCOONonCanonical._insert_explicit_zero(self,M,i,j)
scipy.sparse.tests.test_base.TestCOONonCanonical.test_setdiag_noncanonical(self)
scipy.sparse.tests.test_base.TestCSC(sparse_test_class())
scipy.sparse.tests.test_base.TestCSC.spmatrix(cls,*args,**kwargs)
scipy.sparse.tests.test_base.TestCSC.test_constructor1(self)
scipy.sparse.tests.test_base.TestCSC.test_constructor2(self)
scipy.sparse.tests.test_base.TestCSC.test_constructor3(self)
scipy.sparse.tests.test_base.TestCSC.test_constructor4(self)
scipy.sparse.tests.test_base.TestCSC.test_constructor5(self)
scipy.sparse.tests.test_base.TestCSC.test_constructor6(self)
scipy.sparse.tests.test_base.TestCSC.test_eliminate_zeros(self)
scipy.sparse.tests.test_base.TestCSC.test_fancy_indexing_broadcast(self)
scipy.sparse.tests.test_base.TestCSC.test_scalar_idx_dtype(self)
scipy.sparse.tests.test_base.TestCSC.test_sort_indices(self)
scipy.sparse.tests.test_base.TestCSC.test_ufuncs(self)
scipy.sparse.tests.test_base.TestCSC.test_unsorted_arithmetic(self)
scipy.sparse.tests.test_base.TestCSCNonCanonical(_NonCanonicalCSMixin,TestCSC)
scipy.sparse.tests.test_base.TestCSR(sparse_test_class())
scipy.sparse.tests.test_base.TestCSR.spmatrix(cls,*args,**kwargs)
scipy.sparse.tests.test_base.TestCSR.test_binop_explicit_zeros(self)
scipy.sparse.tests.test_base.TestCSR.test_constructor1(self)
scipy.sparse.tests.test_base.TestCSR.test_constructor2(self)
scipy.sparse.tests.test_base.TestCSR.test_constructor3(self)
scipy.sparse.tests.test_base.TestCSR.test_constructor4(self)
scipy.sparse.tests.test_base.TestCSR.test_constructor5(self)
scipy.sparse.tests.test_base.TestCSR.test_constructor6(self)
scipy.sparse.tests.test_base.TestCSR.test_constructor_largecol(self)
scipy.sparse.tests.test_base.TestCSR.test_constructor_smallcol(self)
scipy.sparse.tests.test_base.TestCSR.test_eliminate_zeros(self)
scipy.sparse.tests.test_base.TestCSR.test_fancy_indexing_broadcast(self)
scipy.sparse.tests.test_base.TestCSR.test_has_canonical_format(self)
scipy.sparse.tests.test_base.TestCSR.test_has_sorted_indices(self)
scipy.sparse.tests.test_base.TestCSR.test_scalar_idx_dtype(self)
scipy.sparse.tests.test_base.TestCSR.test_sort_indices(self)
scipy.sparse.tests.test_base.TestCSR.test_ufuncs(self)
scipy.sparse.tests.test_base.TestCSR.test_unsorted_arithmetic(self)
scipy.sparse.tests.test_base.TestCSRNonCanonical(_NonCanonicalCSMixin,TestCSR)
scipy.sparse.tests.test_base.TestDIA(sparse_test_class(getset=False,slicing=False,slicing_assign=False,fancy_indexing=False,fancy_assign=False,minmax=False,nnz_axis=False))
scipy.sparse.tests.test_base.TestDIA.test_constructor1(self)
scipy.sparse.tests.test_base.TestDIA.test_convert_gh14555(self)
scipy.sparse.tests.test_base.TestDIA.test_getnnz_axis(self)
scipy.sparse.tests.test_base.TestDIA.test_iterator(self)
scipy.sparse.tests.test_base.TestDIA.test_setdiag_dtype(self)
scipy.sparse.tests.test_base.TestDOK(sparse_test_class(minmax=False,nnz_axis=False))
scipy.sparse.tests.test_base.TestDOK.test_add_nonzero(self)
scipy.sparse.tests.test_base.TestDOK.test_convert(self)
scipy.sparse.tests.test_base.TestDOK.test_ctor(self)
scipy.sparse.tests.test_base.TestDOK.test_dok_divide_scalar(self)
scipy.sparse.tests.test_base.TestDOK.test_mult(self)
scipy.sparse.tests.test_base.TestDOK.test_ticket1160(self)
scipy.sparse.tests.test_base.TestLIL(sparse_test_class(minmax=False))
scipy.sparse.tests.test_base.TestLIL.test_dot(self)
scipy.sparse.tests.test_base.TestLIL.test_fancy_indexing_lil(self)
scipy.sparse.tests.test_base.TestLIL.test_inplace_ops(self)
scipy.sparse.tests.test_base.TestLIL.test_lil_from_csr(self)
scipy.sparse.tests.test_base.TestLIL.test_lil_iteration(self)
scipy.sparse.tests.test_base.TestLIL.test_lil_multiply_removal(self)
scipy.sparse.tests.test_base.TestLIL.test_point_wise_multiply(self)
scipy.sparse.tests.test_base.TestLIL.test_scalar_mul(self)
scipy.sparse.tests.test_base._NonCanonicalCSMixin(_NonCanonicalCompressedMixin)
scipy.sparse.tests.test_base._NonCanonicalCSMixin.test_getelement(self)
scipy.sparse.tests.test_base._NonCanonicalCSMixin.test_inv(self)
scipy.sparse.tests.test_base._NonCanonicalCSMixin.test_setitem_sparse(self)
scipy.sparse.tests.test_base._NonCanonicalCSMixin.test_solve(self)
scipy.sparse.tests.test_base._NonCanonicalCompressedMixin(_NonCanonicalMixin)
scipy.sparse.tests.test_base._NonCanonicalCompressedMixin._arg1_for_noncanonical(self,M,sorted_indices=False)
scipy.sparse.tests.test_base._NonCanonicalCompressedMixin._insert_explicit_zero(self,M,i,j)
scipy.sparse.tests.test_base._NonCanonicalMixin
scipy.sparse.tests.test_base._NonCanonicalMixin.spmatrix(self,D,sorted_indices=False,**kwargs)
scipy.sparse.tests.test_base._NonCanonicalMixin.test_bool(self)
scipy.sparse.tests.test_base._NonCanonicalMixin.test_empty(self)
scipy.sparse.tests.test_base._NonCanonicalMixin.test_getnnz_axis(self)
scipy.sparse.tests.test_base._TestArithmetic
scipy.sparse.tests.test_base._TestArithmetic.__arith_init(self)
scipy.sparse.tests.test_base._TestArithmetic.test_add_sub(self)
scipy.sparse.tests.test_base._TestArithmetic.test_mu(self)
scipy.sparse.tests.test_base._TestCommon
scipy.sparse.tests.test_base._TestCommon.init_class(cls)
scipy.sparse.tests.test_base._TestCommon.test_abs(self)
scipy.sparse.tests.test_base._TestCommon.test_add(self)
scipy.sparse.tests.test_base._TestCommon.test_add0(self)
scipy.sparse.tests.test_base._TestCommon.test_add_dense(self)
scipy.sparse.tests.test_base._TestCommon.test_asfptype(self)
scipy.sparse.tests.test_base._TestCommon.test_astype(self)
scipy.sparse.tests.test_base._TestCommon.test_binop_custom_type(self)
scipy.sparse.tests.test_base._TestCommon.test_binop_custom_type_with_shape(self)
scipy.sparse.tests.test_base._TestCommon.test_bool(self)
scipy.sparse.tests.test_base._TestCommon.test_bool_rollover(self)
scipy.sparse.tests.test_base._TestCommon.test_constructor1_base(self)
scipy.sparse.tests.test_base._TestCommon.test_copy(self)
scipy.sparse.tests.test_base._TestCommon.test_count_nonzero(self)
scipy.sparse.tests.test_base._TestCommon.test_diagonal(self)
scipy.sparse.tests.test_base._TestCommon.test_dot_scalar(self)
scipy.sparse.tests.test_base._TestCommon.test_elementwise_divide(self)
scipy.sparse.tests.test_base._TestCommon.test_elementwise_multiply(self)
scipy.sparse.tests.test_base._TestCommon.test_elementwise_multiply_broadcast(self)
scipy.sparse.tests.test_base._TestCommon.test_elementwise_power(self)
scipy.sparse.tests.test_base._TestCommon.test_empty(self)
scipy.sparse.tests.test_base._TestCommon.test_empty_arithmetic(self)
scipy.sparse.tests.test_base._TestCommon.test_eq(self)
scipy.sparse.tests.test_base._TestCommon.test_expm(self)
scipy.sparse.tests.test_base._TestCommon.test_from_array(self)
scipy.sparse.tests.test_base._TestCommon.test_from_list(self)
scipy.sparse.tests.test_base._TestCommon.test_from_matrix(self)
scipy.sparse.tests.test_base._TestCommon.test_from_sparse(self)
scipy.sparse.tests.test_base._TestCommon.test_ge(self)
scipy.sparse.tests.test_base._TestCommon.test_getcol(self)
scipy.sparse.tests.test_base._TestCommon.test_getrow(self)
scipy.sparse.tests.test_base._TestCommon.test_gt(self)
scipy.sparse.tests.test_base._TestCommon.test_imag(self)
scipy.sparse.tests.test_base._TestCommon.test_inv(self)
scipy.sparse.tests.test_base._TestCommon.test_invalid_shapes(self)
scipy.sparse.tests.test_base._TestCommon.test_iterator(self)
scipy.sparse.tests.test_base._TestCommon.test_le(self)
scipy.sparse.tests.test_base._TestCommon.test_lt(self)
scipy.sparse.tests.test_base._TestCommon.test_matmat_dense(self)
scipy.sparse.tests.test_base._TestCommon.test_matmat_sparse(self)
scipy.sparse.tests.test_base._TestCommon.test_matmul(self)
scipy.sparse.tests.test_base._TestCommon.test_matvec(self)
scipy.sparse.tests.test_base._TestCommon.test_maximum_minimum(self)
scipy.sparse.tests.test_base._TestCommon.test_mean(self)
scipy.sparse.tests.test_base._TestCommon.test_mean_dtype(self)
scipy.sparse.tests.test_base._TestCommon.test_mean_invalid_params(self)
scipy.sparse.tests.test_base._TestCommon.test_mean_out(self)
scipy.sparse.tests.test_base._TestCommon.test_mul_scalar(self)
scipy.sparse.tests.test_base._TestCommon.test_ne(self)
scipy.sparse.tests.test_base._TestCommon.test_neg(self)
scipy.sparse.tests.test_base._TestCommon.test_nonzero(self)
scipy.sparse.tests.test_base._TestCommon.test_numpy_mean(self)
scipy.sparse.tests.test_base._TestCommon.test_numpy_nonzero(self)
scipy.sparse.tests.test_base._TestCommon.test_numpy_sum(self)
scipy.sparse.tests.test_base._TestCommon.test_pickle(self)
scipy.sparse.tests.test_base._TestCommon.test_pow(self)
scipy.sparse.tests.test_base._TestCommon.test_radd(self)
scipy.sparse.tests.test_base._TestCommon.test_real(self)
scipy.sparse.tests.test_base._TestCommon.test_repr(self)
scipy.sparse.tests.test_base._TestCommon.test_reshape(self)
scipy.sparse.tests.test_base._TestCommon.test_resize(self)
scipy.sparse.tests.test_base._TestCommon.test_rmatvec(self)
scipy.sparse.tests.test_base._TestCommon.test_rmul_scalar(self)
scipy.sparse.tests.test_base._TestCommon.test_rmul_scalar_type_error(self)
scipy.sparse.tests.test_base._TestCommon.test_round(self)
scipy.sparse.tests.test_base._TestCommon.test_rsub(self)
scipy.sparse.tests.test_base._TestCommon.test_setdiag(self)
scipy.sparse.tests.test_base._TestCommon.test_setdiag_comprehensive(self)
scipy.sparse.tests.test_base._TestCommon.test_size_zero_conversions(self)
scipy.sparse.tests.test_base._TestCommon.test_size_zero_matrix_arithmetic(self)
scipy.sparse.tests.test_base._TestCommon.test_small_multiplication(self)
scipy.sparse.tests.test_base._TestCommon.test_sparse_format_conversions(self)
scipy.sparse.tests.test_base._TestCommon.test_str(self)
scipy.sparse.tests.test_base._TestCommon.test_sub(self)
scipy.sparse.tests.test_base._TestCommon.test_sub_dense(self)
scipy.sparse.tests.test_base._TestCommon.test_sum(self)
scipy.sparse.tests.test_base._TestCommon.test_sum_dtype(self)
scipy.sparse.tests.test_base._TestCommon.test_sum_invalid_params(self)
scipy.sparse.tests.test_base._TestCommon.test_sum_out(self)
scipy.sparse.tests.test_base._TestCommon.test_toarray(self)
scipy.sparse.tests.test_base._TestCommon.test_tobsr(self)
scipy.sparse.tests.test_base._TestCommon.test_todense(self)
scipy.sparse.tests.test_base._TestCommon.test_trace(self)
scipy.sparse.tests.test_base._TestCommon.test_transpose(self)
scipy.sparse.tests.test_base._TestCommon.test_unary_ufunc_overrides(self)
scipy.sparse.tests.test_base._TestFancyIndexing
scipy.sparse.tests.test_base._TestFancyIndexing.test_bad_index(self)
scipy.sparse.tests.test_base._TestFancyIndexing.test_dtype_preservation_empty_index(self)
scipy.sparse.tests.test_base._TestFancyIndexing.test_fancy_indexing(self)
scipy.sparse.tests.test_base._TestFancyIndexing.test_fancy_indexing_2d_assign(self)
scipy.sparse.tests.test_base._TestFancyIndexing.test_fancy_indexing_boolean(self)
scipy.sparse.tests.test_base._TestFancyIndexing.test_fancy_indexing_empty(self)
scipy.sparse.tests.test_base._TestFancyIndexing.test_fancy_indexing_randomized(self)
scipy.sparse.tests.test_base._TestFancyIndexing.test_fancy_indexing_regression_3087(self)
scipy.sparse.tests.test_base._TestFancyIndexing.test_fancy_indexing_seq_assign(self)
scipy.sparse.tests.test_base._TestFancyIndexing.test_fancy_indexing_sparse_boolean(self)
scipy.sparse.tests.test_base._TestFancyIndexingAssign
scipy.sparse.tests.test_base._TestFancyIndexingAssign.test_bad_index_assign(self)
scipy.sparse.tests.test_base._TestFancyIndexingAssign.test_fancy_assign_empty(self)
scipy.sparse.tests.test_base._TestFancyIndexingAssign.test_fancy_assignment_dtypes(self)
scipy.sparse.tests.test_base._TestFancyIndexingAssign.test_fancy_indexing_set(self)
scipy.sparse.tests.test_base._TestFancyIndexingAssign.test_sequence_assignment(self)
scipy.sparse.tests.test_base._TestFancyMultidim
scipy.sparse.tests.test_base._TestFancyMultidim.test_fancy_indexing_ndarray(self)
scipy.sparse.tests.test_base._TestFancyMultidimAssign
scipy.sparse.tests.test_base._TestFancyMultidimAssign.test_fancy_assign_list(self)
scipy.sparse.tests.test_base._TestFancyMultidimAssign.test_fancy_assign_ndarray(self)
scipy.sparse.tests.test_base._TestFancyMultidimAssign.test_fancy_assign_slice(self)
scipy.sparse.tests.test_base._TestFancyMultidimAssign.test_fancy_indexing_multidim_set(self)
scipy.sparse.tests.test_base._TestGetNnzAxis
scipy.sparse.tests.test_base._TestGetNnzAxis.test_getnnz_axis(self)
scipy.sparse.tests.test_base._TestGetSet
scipy.sparse.tests.test_base._TestGetSet.test_getelement(self)
scipy.sparse.tests.test_base._TestGetSet.test_index_scalar_assign(self)
scipy.sparse.tests.test_base._TestGetSet.test_negative_index_assignment(self)
scipy.sparse.tests.test_base._TestGetSet.test_scalar_assign_2(self)
scipy.sparse.tests.test_base._TestGetSet.test_setelement(self)
scipy.sparse.tests.test_base._TestInplaceArithmetic
scipy.sparse.tests.test_base._TestInplaceArithmetic.test_idiv_scalar(self)
scipy.sparse.tests.test_base._TestInplaceArithmetic.test_imul_scalar(self)
scipy.sparse.tests.test_base._TestInplaceArithmetic.test_inplace_dense(self)
scipy.sparse.tests.test_base._TestInplaceArithmetic.test_inplace_success(self)
scipy.sparse.tests.test_base._TestMinMax
scipy.sparse.tests.test_base._TestMinMax.test_argmax(self)
scipy.sparse.tests.test_base._TestMinMax.test_minmax(self)
scipy.sparse.tests.test_base._TestMinMax.test_minmax_axis(self)
scipy.sparse.tests.test_base._TestMinMax.test_minmax_invalid_params(self)
scipy.sparse.tests.test_base._TestMinMax.test_numpy_minmax(self)
scipy.sparse.tests.test_base._TestSlicing
scipy.sparse.tests.test_base._TestSlicing.test_dtype_preservation(self)
scipy.sparse.tests.test_base._TestSlicing.test_dtype_preservation_empty_slice(self)
scipy.sparse.tests.test_base._TestSlicing.test_ellipsis_slicing(self)
scipy.sparse.tests.test_base._TestSlicing.test_get_horiz_slice(self)
scipy.sparse.tests.test_base._TestSlicing.test_get_slices(self)
scipy.sparse.tests.test_base._TestSlicing.test_get_vert_slice(self)
scipy.sparse.tests.test_base._TestSlicing.test_multiple_ellipsis_slicing(self)
scipy.sparse.tests.test_base._TestSlicing.test_non_unit_stride_2d_indexing(self)
scipy.sparse.tests.test_base._TestSlicing.test_slicing_2(self)
scipy.sparse.tests.test_base._TestSlicing.test_slicing_3(self)
scipy.sparse.tests.test_base._TestSlicingAssign
scipy.sparse.tests.test_base._TestSlicingAssign.test_assign_1d_slice(self)
scipy.sparse.tests.test_base._TestSlicingAssign.test_assign_empty_spmatrix(self)
scipy.sparse.tests.test_base._TestSlicingAssign.test_self_self_assignment(self)
scipy.sparse.tests.test_base._TestSlicingAssign.test_set_slice(self)
scipy.sparse.tests.test_base._TestSlicingAssign.test_slice_assign_2(self)
scipy.sparse.tests.test_base._TestSlicingAssign.test_slice_assignment(self)
scipy.sparse.tests.test_base._TestSlicingAssign.test_slice_scalar_assign(self)
scipy.sparse.tests.test_base._TestSlicingAssign.test_sparsity_modifying_assignment(self)
scipy.sparse.tests.test_base._TestSolve
scipy.sparse.tests.test_base._TestSolve.test_solve(self)
scipy.sparse.tests.test_base._possibly_unimplemented(cls,require=True)
scipy.sparse.tests.test_base._same_sum_duplicate(data,*inds,**kwargs)
scipy.sparse.tests.test_base.assert_array_equal_dtype(x,y,**kwargs)
scipy.sparse.tests.test_base.assert_in(member,collection,msg=None)
scipy.sparse.tests.test_base.cases_64bit()
scipy.sparse.tests.test_base.check_remains_sorted(X)
scipy.sparse.tests.test_base.sparse_may_share_memory(A,B)
scipy.sparse.tests.test_base.sparse_test_class(getset=True,slicing=True,slicing_assign=True,fancy_indexing=True,fancy_assign=True,fancy_multidim_indexing=True,fancy_multidim_assign=True,minmax=True,nnz_axis=True)
scipy.sparse.tests.test_base.toarray(a)
scipy.sparse.tests.test_base.with_64bit_maxval_limit(maxval_limit=None,random=False,fixed_dtype=None,downcast_maxval=None,assert_32bit=False)
scipy.sparse.tests.test_possibly_unimplemented(cls,require=True)
scipy.sparse.tests.test_same_sum_duplicate(data,*inds,**kwargs)
scipy.sparse.tests.testassert_array_equal_dtype(x,y,**kwargs)
scipy.sparse.tests.testassert_in(member,collection,msg=None)
scipy.sparse.tests.testcases_64bit()
scipy.sparse.tests.testcheck_remains_sorted(X)
scipy.sparse.tests.testsparse_may_share_memory(A,B)
scipy.sparse.tests.testsparse_test_class(getset=True,slicing=True,slicing_assign=True,fancy_indexing=True,fancy_assign=True,fancy_multidim_indexing=True,fancy_multidim_assign=True,minmax=True,nnz_axis=True)
scipy.sparse.tests.testtoarray(a)
scipy.sparse.tests.testwith_64bit_maxval_limit(maxval_limit=None,random=False,fixed_dtype=None,downcast_maxval=None,assert_32bit=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/tests/test_array_api.py----------------------------------------
A:scipy.sparse.tests.test_array_api.A->numpy.array([[0, 1, 2, 0], [2, 0, 0, 3], [1, 4, 0, 0]])
A:scipy.sparse.tests.test_array_api.B->numpy.array([[0, 1], [2, 0]])
A:scipy.sparse.tests.test_array_api.X->scipy.sparse.csc_array([[1, 0, 0, 0], [2, 1, 0, 0], [3, 2, 1, 0], [4, 3, 2, 1]])
A:scipy.sparse.tests.test_array_api.parametrize_sparrays->pytest.mark.parametrize('A', sparrays, ids=sparray_types)
A:scipy.sparse.tests.test_array_api.parametrize_square_sparrays->pytest.mark.parametrize('B', square_sparrays, ids=sparray_types)
A:scipy.sparse.tests.test_array_api.parametrize_eig_sparrays->pytest.mark.parametrize('X', eig_sparrays, ids=sparray_types)
A:scipy.sparse.tests.test_array_api.docstr->numpy.array([[0, 1, 2, 0], [2, 0, 0, 3], [1, 4, 0, 0]]).__doc__.lower()
A:scipy.sparse.tests.test_array_api.L->scipy.sparse.linalg.aslinearoperator(A)
A:scipy.sparse.tests.test_array_api.C->scipy.sparse.linalg.onenormest(B)
A:scipy.sparse.tests.test_array_api.Bmat->scipy.sparse.csc_matrix(B)
A:scipy.sparse.tests.test_array_api.LU->scipy.sparse.linalg.spilu(X)
A:scipy.sparse.tests.test_array_api.(x, info)->getattr(spla, solver)(B, np.array([1, 2]), **kwargs)
A:scipy.sparse.tests.test_array_api.(x, *_)->getattr(spla, solver)(A, [1, 2, 3])
A:scipy.sparse.tests.test_array_api.(e, v)->scipy.sparse.linalg.eigsh(X, k=1)
A:scipy.sparse.tests.test_array_api.(u, s, vh)->scipy.sparse.linalg.svds(X, k=3)
A:scipy.sparse.tests.test_array_api.(u2, s2, vh2)->numpy.linalg.svd(X.todense())
A:scipy.sparse.tests.test_array_api.s->numpy.sort(s)
A:scipy.sparse.tests.test_array_api.s2->numpy.sort(s2[:3])
scipy.sparse.tests.test_array_api.test_as_linearoperator(A)
scipy.sparse.tests.test_array_api.test_dense_addition(A)
scipy.sparse.tests.test_array_api.test_dense_divide(A)
scipy.sparse.tests.test_array_api.test_docstr(A)
scipy.sparse.tests.test_array_api.test_eigs(X)
scipy.sparse.tests.test_array_api.test_eigsh(X)
scipy.sparse.tests.test_array_api.test_elementwise_mul(A)
scipy.sparse.tests.test_array_api.test_elementwise_rmul(A)
scipy.sparse.tests.test_array_api.test_expm(B)
scipy.sparse.tests.test_array_api.test_expm_multiply(B)
scipy.sparse.tests.test_array_api.test_factorized(B)
scipy.sparse.tests.test_array_api.test_getrow_getcol(A)
scipy.sparse.tests.test_array_api.test_indexing(A)
scipy.sparse.tests.test_array_api.test_inv(B)
scipy.sparse.tests.test_array_api.test_lstsqr(A,solver)
scipy.sparse.tests.test_array_api.test_matmul(A)
scipy.sparse.tests.test_array_api.test_mean(A)
scipy.sparse.tests.test_array_api.test_no_A_attr(A)
scipy.sparse.tests.test_array_api.test_no_H_attr(A)
scipy.sparse.tests.test_array_api.test_norm(A)
scipy.sparse.tests.test_array_api.test_onenormest(B)
scipy.sparse.tests.test_array_api.test_pow(B)
scipy.sparse.tests.test_array_api.test_power_operator(A)
scipy.sparse.tests.test_array_api.test_solvers(B,solver)
scipy.sparse.tests.test_array_api.test_sparse_addition(A)
scipy.sparse.tests.test_array_api.test_sparse_divide(A)
scipy.sparse.tests.test_array_api.test_spilu()
scipy.sparse.tests.test_array_api.test_splu()
scipy.sparse.tests.test_array_api.test_spsolve(B)
scipy.sparse.tests.test_array_api.test_spsolve_triangular()
scipy.sparse.tests.test_array_api.test_sum(A)
scipy.sparse.tests.test_array_api.test_svds(X)
scipy.sparse.tests.test_array_api.test_todense(A)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/tests/test_spfuncs.py----------------------------------------
A:scipy.sparse.tests.test_spfuncs.D->array([[1, 0, 0, 2, 3], [0, 4, 0, 5, 0], [0, 0, 6, 7, 0]])
A:scipy.sparse.tests.test_spfuncs.S->bsr_matrix(E, blocksize=(2, 3))
A:scipy.sparse.tests.test_spfuncs.v->array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
A:scipy.sparse.tests.test_spfuncs.E->kron(D, [[1, 2, 3], [4, 5, 6]])
A:scipy.sparse.tests.test_spfuncs.X->kron([[1, 1, 0], [0, 0, 1], [1, 0, 1]], [[1, 1]])
A:scipy.sparse.tests.test_spfuncs.(r, c)->scipy.sparse._spfuncs.estimate_blocksize(X)
A:scipy.sparse.tests.test_spfuncs.(I, J)->A.nonzero()
A:scipy.sparse.tests.test_spfuncs.Y->csc_matrix(X)
scipy.sparse.tests.test_spfuncs.TestSparseFunctions
scipy.sparse.tests.test_spfuncs.TestSparseFunctions.test_count_blocks(self)
scipy.sparse.tests.test_spfuncs.TestSparseFunctions.test_estimate_blocksize(self)
scipy.sparse.tests.test_spfuncs.TestSparseFunctions.test_scale_rows_and_cols(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/tests/test_sputils.py----------------------------------------
A:scipy.sparse.tests.test_sputils.A->numpy.array([1], dtype='int8')
A:scipy.sparse.tests.test_sputils.imax->numpy.int64(np.iinfo(np.int32).max)
A:scipy.sparse.tests.test_sputils.a1->numpy.ones(12, dtype='uint32')
A:scipy.sparse.tests.test_sputils.a2->numpy.ones(12, dtype='uint32')
A:scipy.sparse.tests.test_sputils.new_shape->scipy.sparse._sputils.check_shape([(10, -1)], (65535, 131070))
A:scipy.sparse.tests.test_sputils.b->numpy.array(a)
A:scipy.sparse.tests.test_sputils.c->scipy.sparse._sputils.asmatrix(b)
scipy.sparse.tests.test_sputils.TestSparseUtils
scipy.sparse.tests.test_sputils.TestSparseUtils.test_asmatrix(self)
scipy.sparse.tests.test_sputils.TestSparseUtils.test_check_shape_overflow(self)
scipy.sparse.tests.test_sputils.TestSparseUtils.test_get_index_dtype(self)
scipy.sparse.tests.test_sputils.TestSparseUtils.test_getdtype(self)
scipy.sparse.tests.test_sputils.TestSparseUtils.test_isdense(self)
scipy.sparse.tests.test_sputils.TestSparseUtils.test_isintlike(self)
scipy.sparse.tests.test_sputils.TestSparseUtils.test_ismatrix(self)
scipy.sparse.tests.test_sputils.TestSparseUtils.test_isscalarlike(self)
scipy.sparse.tests.test_sputils.TestSparseUtils.test_issequence(self)
scipy.sparse.tests.test_sputils.TestSparseUtils.test_isshape(self)
scipy.sparse.tests.test_sputils.TestSparseUtils.test_matrix(self)
scipy.sparse.tests.test_sputils.TestSparseUtils.test_upcast(self)
scipy.sparse.tests.test_sputils.TestSparseUtils.test_validateaxis(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/tests/test_extract.py----------------------------------------
A:scipy.sparse.tests.test_extract.(I, J, V)->scipy.sparse._extract.find(A)
A:scipy.sparse.tests.test_extract.B->A.toarray()
scipy.sparse.tests.testTestExtract
scipy.sparse.tests.testTestExtract.find(self)
scipy.sparse.tests.testTestExtract.setup_method(self)
scipy.sparse.tests.testTestExtract.test_tril(self)
scipy.sparse.tests.testTestExtract.test_triu(self)
scipy.sparse.tests.test_extract.TestExtract
scipy.sparse.tests.test_extract.TestExtract.find(self)
scipy.sparse.tests.test_extract.TestExtract.setup_method(self)
scipy.sparse.tests.test_extract.TestExtract.test_tril(self)
scipy.sparse.tests.test_extract.TestExtract.test_triu(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/tests/test_matrix_io.py----------------------------------------
A:scipy.sparse.tests.test_matrix_io.DATA_DIR->os.path.join(os.path.dirname(__file__), 'data')
A:scipy.sparse.tests.test_matrix_io.(fd, tmpfile)->tempfile.mkstemp(suffix='.npz')
A:scipy.sparse.tests.test_matrix_io.loaded_matrix->_save_and_load(matrix)
A:scipy.sparse.tests.test_matrix_io.matrix->matrix_class(dense_matrix)
A:scipy.sparse.tests.test_matrix_io.dense_matrix->numpy.zeros((4, 6))
A:scipy.sparse.tests.test_matrix_io.a->load_npz(os.path.join(DATA_DIR, 'csc_py2.npz'))
A:scipy.sparse.tests.test_matrix_io.b->load_npz(os.path.join(DATA_DIR, 'csc_py3.npz'))
A:scipy.sparse.tests.test_matrix_io.c->csc_matrix([[0]])
A:scipy.sparse.tests.test_matrix_io.x->dok_matrix((2, 3))
scipy.sparse.tests.test_check_save_and_load(dense_matrix)
scipy.sparse.tests.test_matrix_io._check_save_and_load(dense_matrix)
scipy.sparse.tests.test_matrix_io._save_and_load(matrix)
scipy.sparse.tests.test_matrix_io.test_implemented_error()
scipy.sparse.tests.test_matrix_io.test_malicious_load()
scipy.sparse.tests.test_matrix_io.test_py23_compatibility()
scipy.sparse.tests.test_matrix_io.test_save_and_load_empty()
scipy.sparse.tests.test_matrix_io.test_save_and_load_one_entry()
scipy.sparse.tests.test_matrix_io.test_save_and_load_random()
scipy.sparse.tests.test_save_and_load(matrix)
scipy.sparse.tests.testtest_implemented_error()
scipy.sparse.tests.testtest_malicious_load()
scipy.sparse.tests.testtest_py23_compatibility()
scipy.sparse.tests.testtest_save_and_load_empty()
scipy.sparse.tests.testtest_save_and_load_one_entry()
scipy.sparse.tests.testtest_save_and_load_random()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/tests/test_sparsetools.py----------------------------------------
A:scipy.sparse.tests.test_sparsetools.a->dia_matrix((d.astype('<f8'), offsets), (4, 4))
A:scipy.sparse.tests.test_sparsetools.b->dia_matrix((d.astype('>f8'), offsets), (4, 4))
A:scipy.sparse.tests.test_sparsetools.ad->numpy.array([[1, 2], [3, 4]]).astype(dtype)
A:scipy.sparse.tests.test_sparsetools.row->numpy.zeros(nnz, dtype=np.int32)
A:scipy.sparse.tests.test_sparsetools.col->numpy.zeros(nnz, dtype=np.int32)
A:scipy.sparse.tests.test_sparsetools.data->numpy.ones((n,), dtype=np.int8)
A:scipy.sparse.tests.test_sparsetools.s->coo_matrix((data, (row, col)), shape=(1, 1), copy=False)
A:scipy.sparse.tests.test_sparsetools.d->numpy.ones((3, 4))
A:scipy.sparse.tests.test_sparsetools.parallel_count->int(os.environ.get('PYTEST_XDIST_WORKER_COUNT', '1'))
A:scipy.sparse.tests.test_sparsetools.i->numpy.array([0, n - 1])
A:scipy.sparse.tests.test_sparsetools.j->numpy.array([0, n - 1])
A:scipy.sparse.tests.test_sparsetools.m->m()
A:scipy.sparse.tests.test_sparsetools.r->m().diagonal()
A:scipy.sparse.tests.test_sparsetools.m2->bsr_matrix(np.ones((2, n), dtype=np.int8), blocksize=(2, m.blocksize[0]))
A:scipy.sparse.tests.test_sparsetools.offsets->numpy.arange(n)
A:scipy.sparse.tests.test_sparsetools.v->numpy.arange(4)
A:scipy.sparse.tests.test_sparsetools.indptr->numpy.arange(n + 1, dtype=np.int64)
A:scipy.sparse.tests.test_sparsetools.indices->numpy.zeros(n, dtype=np.int64)
A:scipy.sparse.tests.test_sparsetools.a0->csr_matrix([[np.pi, np.pi * 1j], [3, 4]], dtype=complex)
A:scipy.sparse.tests.test_sparsetools.b0->numpy.array([256 + 1j, 2 ** 32], dtype=complex)
A:scipy.sparse.tests.test_sparsetools.c->numpy.zeros((2,), dtype=np.result_type(a_dtype, b_dtype))
scipy.sparse.tests.test_sparsetools.TestInt32Overflow
scipy.sparse.tests.test_sparsetools.TestInt32Overflow._check_bsr_diagonal(self,m)
scipy.sparse.tests.test_sparsetools.TestInt32Overflow._check_bsr_matmat(self,m)
scipy.sparse.tests.test_sparsetools.TestInt32Overflow._check_bsr_matvec(self,m)
scipy.sparse.tests.test_sparsetools.TestInt32Overflow._check_bsr_matvecs(self,m)
scipy.sparse.tests.test_sparsetools.TestInt32Overflow._check_bsr_sort_indices(self,m)
scipy.sparse.tests.test_sparsetools.TestInt32Overflow._check_bsr_transpose(self,m)
scipy.sparse.tests.test_sparsetools.TestInt32Overflow.setup_method(self)
scipy.sparse.tests.test_sparsetools.TestInt32Overflow.teardown_method(self)
scipy.sparse.tests.test_sparsetools.TestInt32Overflow.test_bsr_1_block(self,op)
scipy.sparse.tests.test_sparsetools.TestInt32Overflow.test_bsr_n_block(self,op)
scipy.sparse.tests.test_sparsetools.TestInt32Overflow.test_coo_todense(self)
scipy.sparse.tests.test_sparsetools.TestInt32Overflow.test_dia_matvec(self)
scipy.sparse.tests.test_sparsetools.TestInt32Overflow.test_matvecs(self)
scipy.sparse.tests.test_sparsetools.int_to_int8(n)
scipy.sparse.tests.test_sparsetools.test_csr_matmat_int64_overflow()
scipy.sparse.tests.test_sparsetools.test_endianness()
scipy.sparse.tests.test_sparsetools.test_exception()
scipy.sparse.tests.test_sparsetools.test_nnz_overflow()
scipy.sparse.tests.test_sparsetools.test_regression_std_vector_dtypes()
scipy.sparse.tests.test_sparsetools.test_threads()
scipy.sparse.tests.test_sparsetools.test_upcast()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/tests/test_construct.py----------------------------------------
A:scipy.sparse.tests.test_construct.random_state->check_random_state(random_state)
A:scipy.sparse.tests.test_construct.diags1->array([[1, 2, 3, 4, 5]])
A:scipy.sparse.tests.test_construct.diags2->array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
A:scipy.sparse.tests.test_construct.diags3->array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]])
A:scipy.sparse.tests.test_construct.a->scipy.sparse._construct.eye(1, n, n - 1)
A:scipy.sparse.tests.test_construct.b->scipy.sparse._construct.eye(n, 1, 1 - n)
A:scipy.sparse.tests.test_construct.c->array([11, 12, 13, 14, 15])
A:scipy.sparse.tests.test_construct.offsets->numpy.arange(-n + 1, n - 1)
A:scipy.sparse.tests.test_construct.mat->scipy.sparse._construct.diags(diagonals[0], offsets[0])
A:scipy.sparse.tests.test_construct.dense_mat->numpy.diag(diagonals[0], offsets[0])
A:scipy.sparse.tests.test_construct.x->_sprandn(10, 20, density=0.5, dtype=np.float64, random_state=random_state)
A:scipy.sparse.tests.test_construct.d->list(range(5))
A:scipy.sparse.tests.test_construct.I->scipy.sparse._construct.eye(3, format=fmt)
A:scipy.sparse.tests.test_construct.expected->array([[1, 2, 0, 0], [3, 4, 0, 0], [0, 0, 5, 0], [0, 0, 6, 0], [0, 0, 0, 7]])
A:scipy.sparse.tests.test_construct.result->scipy.sparse._construct.vstack([A.tocsc(), B.tocsc()], dtype=np.float32)
A:scipy.sparse.tests.test_construct.A->coo_matrix([[1, 2], [3, 4]])
A:scipy.sparse.tests.test_construct.B->coo_matrix([[5], [6]])
A:scipy.sparse.tests.test_construct.C->coo_matrix([[7]])
A:scipy.sparse.tests.test_construct.D->coo_matrix((0, 0))
A:scipy.sparse.tests.test_construct.E->csr_matrix((1, 2), dtype=np.int32)
A:scipy.sparse.tests.test_construct.Z->csr_matrix((1, 1), dtype=np.int32)
A:scipy.sparse.tests.test_construct.block_sparse_cols_matrices->scipy.sparse._construct.block_diag(sparse_col_matrices)
A:scipy.sparse.tests.test_construct.block_sparse_row_matrices->scipy.sparse._construct.block_diag(sparse_row_matrices)
A:scipy.sparse.tests.test_construct.x1->f(5, 10, density=0.1, random_state=4321)
A:scipy.sparse.tests.test_construct.x2->f(5, 10, density=0.1, random_state=np.random.RandomState(4321))
A:scipy.sparse.tests.test_construct.gen->numpy.random.default_rng()
A:scipy.sparse.tests.test_construct.sparse_matrix->scipy.sparse._construct.random(10, 10, density=0.1265)
scipy.sparse.tests.testTestConstructUtils
scipy.sparse.tests.testTestConstructUtils.test_block_diag_1(self)
scipy.sparse.tests.testTestConstructUtils.test_block_diag_basic(self)
scipy.sparse.tests.testTestConstructUtils.test_block_diag_scalar_1d_args(self)
scipy.sparse.tests.testTestConstructUtils.test_block_diag_sparse_matrices(self)
scipy.sparse.tests.testTestConstructUtils.test_bmat(self)
scipy.sparse.tests.testTestConstructUtils.test_concatenate_int32_overflow(self)
scipy.sparse.tests.testTestConstructUtils.test_diags(self)
scipy.sparse.tests.testTestConstructUtils.test_diags_bad(self)
scipy.sparse.tests.testTestConstructUtils.test_diags_default(self)
scipy.sparse.tests.testTestConstructUtils.test_diags_default_bad(self)
scipy.sparse.tests.testTestConstructUtils.test_diags_dtype(self)
scipy.sparse.tests.testTestConstructUtils.test_diags_empty(self)
scipy.sparse.tests.testTestConstructUtils.test_diags_one_diagonal(self)
scipy.sparse.tests.testTestConstructUtils.test_diags_vs_diag(self)
scipy.sparse.tests.testTestConstructUtils.test_eye(self)
scipy.sparse.tests.testTestConstructUtils.test_eye_one(self)
scipy.sparse.tests.testTestConstructUtils.test_hstack(self)
scipy.sparse.tests.testTestConstructUtils.test_identity(self)
scipy.sparse.tests.testTestConstructUtils.test_kron(self)
scipy.sparse.tests.testTestConstructUtils.test_kron_large(self)
scipy.sparse.tests.testTestConstructUtils.test_kronsum(self)
scipy.sparse.tests.testTestConstructUtils.test_rand(self)
scipy.sparse.tests.testTestConstructUtils.test_randn(self)
scipy.sparse.tests.testTestConstructUtils.test_random_accept_str_dtype(self)
scipy.sparse.tests.testTestConstructUtils.test_random_sampling(self)
scipy.sparse.tests.testTestConstructUtils.test_random_sparse_matrix_returns_correct_number_of_non_zero_elements(self)
scipy.sparse.tests.testTestConstructUtils.test_spdiags(self)
scipy.sparse.tests.testTestConstructUtils.test_vstack(self)
scipy.sparse.tests.test_construct.TestConstructUtils
scipy.sparse.tests.test_construct.TestConstructUtils.test_block_diag_1(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_block_diag_basic(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_block_diag_scalar_1d_args(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_block_diag_sparse_matrices(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_bmat(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_concatenate_int32_overflow(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_diags(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_diags_bad(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_diags_default(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_diags_default_bad(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_diags_dtype(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_diags_empty(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_diags_one_diagonal(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_diags_vs_diag(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_eye(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_eye_one(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_hstack(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_identity(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_kron(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_kron_large(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_kronsum(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_rand(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_randn(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_random_accept_str_dtype(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_random_sampling(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_random_sparse_matrix_returns_correct_number_of_non_zero_elements(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_spdiags(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_vstack(self)
scipy.sparse.tests.test_construct._sprandn(m,n,density=0.01,format='coo',dtype=None,random_state=None)
scipy.sparse.tests.test_sprandn(m,n,density=0.01,format='coo',dtype=None,random_state=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/tests/test_csr.py----------------------------------------
A:scipy.sparse.tests.test_csr.X->numpy.random.random((N, N))
A:scipy.sparse.tests.test_csr.Xcsr->csr_matrix(X)
A:scipy.sparse.tests.test_csr.csr_row->csr_matrix(X).getrow(i)
A:scipy.sparse.tests.test_csr.csr_col->csr_matrix(X).getcol(i)
A:scipy.sparse.tests.test_csr.data->csr_matrix([[0, 1, 2], [3, 4, 5], [6, 7, 8]])
A:scipy.sparse.tests.test_csr.array_indices1->numpy.array(list_indices1)
A:scipy.sparse.tests.test_csr.array_indices2->numpy.array(list_indices2)
A:scipy.sparse.tests.test_csr.slice_list1->data[list_indices1].toarray()
A:scipy.sparse.tests.test_csr.slice_array1->data[array_indices1].toarray()
A:scipy.sparse.tests.test_csr.X_1->csr_matrix((data, (row, col_1)))
A:scipy.sparse.tests.test_csr.X_2->csr_matrix((data, (row, col_2)))
A:scipy.sparse.tests.test_csr.X_hs->hstack([X_1, X_2], format='csr')
A:scipy.sparse.tests.test_csr.X_1_empty->csr_matrix(X_1.shape)
A:scipy.sparse.tests.test_csr.X_2_empty->csr_matrix(X_2.shape)
A:scipy.sparse.tests.test_csr.X_hs_empty->hstack([X_1_empty, X_2_empty], format='csr')
A:scipy.sparse.tests.test_csr.X_3->csr_matrix((data, (row, col_3)))
A:scipy.sparse.tests.test_csr.X_hs_32->hstack([X_1, X_3], format='csr')
scipy.sparse.tests.test_check_csr_rowslice(i,sl,X,Xcsr)
scipy.sparse.tests.test_csr._check_csr_rowslice(i,sl,X,Xcsr)
scipy.sparse.tests.test_csr.test_csr_bool_indexing()
scipy.sparse.tests.test_csr.test_csr_empty_slices(matrix_input,axis,expected_shape)
scipy.sparse.tests.test_csr.test_csr_getcol()
scipy.sparse.tests.test_csr.test_csr_getrow()
scipy.sparse.tests.test_csr.test_csr_hstack_int64()
scipy.sparse.tests.test_csr.test_csr_rowslice()
scipy.sparse.tests.testtest_csr_bool_indexing()
scipy.sparse.tests.testtest_csr_empty_slices(matrix_input,axis,expected_shape)
scipy.sparse.tests.testtest_csr_getcol()
scipy.sparse.tests.testtest_csr_getrow()
scipy.sparse.tests.testtest_csr_hstack_int64()
scipy.sparse.tests.testtest_csr_rowslice()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/tests/test_csc.py----------------------------------------
A:scipy.sparse.tests.test_csc.X->numpy.random.random((N, N))
A:scipy.sparse.tests.test_csc.Xcsc->csc_matrix(X)
A:scipy.sparse.tests.test_csc.csc_row->csc_matrix(X).getrow(i)
A:scipy.sparse.tests.test_csc.csc_col->csc_matrix(X).getcol(i)
A:scipy.sparse.tests.test_csc.A->csc_matrix(A)
A:scipy.sparse.tests.test_csc.idx->csc_matrix(A).argmax(axis=ax)
scipy.sparse.tests.test_csc.test_argmax_overflow(ax)
scipy.sparse.tests.test_csc.test_csc_empty_slices(matrix_input,axis,expected_shape)
scipy.sparse.tests.test_csc.test_csc_getcol()
scipy.sparse.tests.test_csc.test_csc_getrow()
scipy.sparse.tests.testtest_argmax_overflow(ax)
scipy.sparse.tests.testtest_csc_empty_slices(matrix_input,axis,expected_shape)
scipy.sparse.tests.testtest_csc_getcol()
scipy.sparse.tests.testtest_csc_getrow()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/csgraph/_validation.py----------------------------------------
A:scipy.sparse.csgraph._validation.csgraph->csgraph_from_dense(csgraph, null_value=null_value_in, infinity_null=infinity_null, nan_null=nan_null)
scipy.sparse.csgraph._validation.validate_graph(csgraph,directed,dtype=DTYPE,csr_output=True,dense_output=True,copy_if_dense=False,copy_if_sparse=False,null_value_in=0,null_value_out=np.inf,infinity_null=True,nan_null=True)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/csgraph/setup.py----------------------------------------
A:scipy.sparse.csgraph.setup.config->Configuration('csgraph', parent_package, top_path)
scipy.sparse.csgraph.setup.configuration(parent_package='',top_path=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/csgraph/_laplacian.py----------------------------------------
A:scipy.sparse.csgraph._laplacian.csgraph->csgraph.astype(np.float64).astype(np.float64)
A:scipy.sparse.csgraph._laplacian.(lap, d)->create_lap(csgraph, normed=normed, axis=degree_axis, copy=copy, form=form, dtype=dtype, symmetrized=symmetrized)
A:scipy.sparse.csgraph._laplacian.laplace->_laplace(m, d)
A:scipy.sparse.csgraph._laplacian.laplace_sym->_laplace_sym(m, d)
A:scipy.sparse.csgraph._laplacian.graph_sum->numpy.asarray(graph).sum(axis=axis)
A:scipy.sparse.csgraph._laplacian.graph_diagonal->numpy.asarray(graph).diagonal()
A:scipy.sparse.csgraph._laplacian.w->numpy.where(isolated_node_mask, 1, np.sqrt(w))
A:scipy.sparse.csgraph._laplacian.md->_laplace(m, graph_sum)
A:scipy.sparse.csgraph._laplacian.m->numpy.asarray(graph)
scipy.sparse.csgraph._laplacian._laplace(m,d)
scipy.sparse.csgraph._laplacian._laplace_normed(m,d,nd)
scipy.sparse.csgraph._laplacian._laplace_normed_sym(m,d,nd)
scipy.sparse.csgraph._laplacian._laplace_sym(m,d)
scipy.sparse.csgraph._laplacian._laplacian_dense(graph,normed,axis,copy,form,dtype,symmetrized)
scipy.sparse.csgraph._laplacian._laplacian_dense_flo(graph,normed,axis,copy,form,dtype,symmetrized)
scipy.sparse.csgraph._laplacian._laplacian_sparse(graph,normed,axis,copy,form,dtype,symmetrized)
scipy.sparse.csgraph._laplacian._laplacian_sparse_flo(graph,normed,axis,copy,form,dtype,symmetrized)
scipy.sparse.csgraph._laplacian._linearoperator(mv,shape,dtype)
scipy.sparse.csgraph._laplacian._setdiag_dense(m,d)
scipy.sparse.csgraph._laplacian.laplacian(csgraph,normed=False,return_diag=False,use_out_degree=False,*,copy=True,form='array',dtype=None,symmetrized=False)
scipy.sparse.csgraph.laplacian(csgraph,normed=False,return_diag=False,use_out_degree=False,*,copy=True,form='array',dtype=None,symmetrized=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/csgraph/__init__.py----------------------------------------
A:scipy.sparse.csgraph.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/csgraph/tests/test_flow.py----------------------------------------
A:scipy.sparse.csgraph.tests.test_flow.graph->csr_matrix([[0, 5, 0], [0, 0, 3], [0, 0, 0]])
A:scipy.sparse.csgraph.tests.test_flow.res->maximum_flow(graph, 0, 2)
A:scipy.sparse.csgraph.tests.test_flow.expected_flow->numpy.zeros((4, 4), dtype=np.int32)
A:scipy.sparse.csgraph.tests.test_flow.indices->numpy.arange(1, n)
A:scipy.sparse.csgraph.tests.test_flow.indptr->numpy.array(list(range(n)) + [n - 1])
A:scipy.sparse.csgraph.tests.test_flow.data->numpy.ones(n - 1, dtype=np.int32)
A:scipy.sparse.csgraph.tests.test_flow.a->csr_matrix(a, dtype=np.int32)
A:scipy.sparse.csgraph.tests.test_flow.b->_add_reverse_edges(a)
A:scipy.sparse.csgraph.tests.test_flow.rev_edge_ptr->_make_edge_pointers(a)
A:scipy.sparse.csgraph.tests.test_flow.tails->_make_tails(a)
scipy.sparse.csgraph.tests.test_flow.test_add_reverse_edges(a,b_data_expected)
scipy.sparse.csgraph.tests.test_flow.test_add_reverse_edges_large_graph(method)
scipy.sparse.csgraph.tests.test_flow.test_backwards_flow(method)
scipy.sparse.csgraph.tests.test_flow.test_bottle_neck_graph(method)
scipy.sparse.csgraph.tests.test_flow.test_disconnected_graph(method)
scipy.sparse.csgraph.tests.test_flow.test_example_from_clrs_chapter_26_1(method)
scipy.sparse.csgraph.tests.test_flow.test_make_edge_pointers(a,expected)
scipy.sparse.csgraph.tests.test_flow.test_make_tails(a,expected)
scipy.sparse.csgraph.tests.test_flow.test_raises_on_csc_input()
scipy.sparse.csgraph.tests.test_flow.test_raises_on_dense_input()
scipy.sparse.csgraph.tests.test_flow.test_raises_on_floating_point_input()
scipy.sparse.csgraph.tests.test_flow.test_raises_on_non_square_input()
scipy.sparse.csgraph.tests.test_flow.test_raises_when_sink_is_out_of_bounds(sink,method)
scipy.sparse.csgraph.tests.test_flow.test_raises_when_source_is_out_of_bounds(source,method)
scipy.sparse.csgraph.tests.test_flow.test_raises_when_source_is_sink()
scipy.sparse.csgraph.tests.test_flow.test_residual_raises_deprecation_warning()
scipy.sparse.csgraph.tests.test_flow.test_simple_graph(method)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/csgraph/tests/test_spanning_tree.py----------------------------------------
A:scipy.sparse.csgraph.tests.test_spanning_tree.graph->numpy.asarray(graph)
A:scipy.sparse.csgraph.tests.test_spanning_tree.expected->numpy.zeros((N, N))
A:scipy.sparse.csgraph.tests.test_spanning_tree.csgraph->csr_matrix(graph)
A:scipy.sparse.csgraph.tests.test_spanning_tree.mintree->minimum_spanning_tree(csgraph)
A:scipy.sparse.csgraph.tests.test_spanning_tree.idx->numpy.arange(N - 1)
scipy.sparse.csgraph.tests.test_spanning_tree.test_minimum_spanning_tree()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/csgraph/tests/test_shortest_path.py----------------------------------------
A:scipy.sparse.csgraph.tests.test_shortest_path.directed_G->numpy.array([[0, 3, 3, 0, 0], [0, 0, 0, 2, 4], [0, 0, 0, 0, 0], [1, 0, 0, 0, 0], [2, 0, 0, 2, 0]], dtype=float)
A:scipy.sparse.csgraph.tests.test_shortest_path.undirected_G->numpy.array([[0, 3, 3, 1, 2], [3, 0, 0, 2, 4], [3, 0, 0, 0, 0], [1, 2, 0, 0, 2], [2, 4, 0, 2, 0]], dtype=float)
A:scipy.sparse.csgraph.tests.test_shortest_path.unweighted_G->(directed_G > 0).astype(float)
A:scipy.sparse.csgraph.tests.test_shortest_path.directed_sparse_zero_G->scipy.sparse.csr_matrix(([0, 1, 2, 3, 1], ([0, 1, 2, 3, 4], [1, 2, 0, 4, 3])), shape=(5, 5))
A:scipy.sparse.csgraph.tests.test_shortest_path.undirected_sparse_zero_G->scipy.sparse.csr_matrix(([0, 0, 1, 1, 2, 2, 1, 1], ([0, 1, 1, 2, 2, 0, 3, 4], [1, 0, 2, 1, 0, 2, 4, 3])), shape=(5, 5))
A:scipy.sparse.csgraph.tests.test_shortest_path.directed_pred->numpy.array([[-9999, 0, 0, 1, 1], [3, -9999, 0, 1, 1], [-9999, -9999, -9999, -9999, -9999], [3, 0, 0, -9999, 1], [4, 0, 0, 4, -9999]], dtype=float)
A:scipy.sparse.csgraph.tests.test_shortest_path.undirected_SP->numpy.array([[0, 3, 3, 1, 2], [3, 0, 6, 2, 4], [3, 6, 0, 4, 5], [1, 2, 4, 0, 2], [2, 4, 5, 2, 0]], dtype=float)
A:scipy.sparse.csgraph.tests.test_shortest_path.undirected_SP_limit_2->numpy.array([[0, np.inf, np.inf, 1, 2], [np.inf, 0, np.inf, 2, np.inf], [np.inf, np.inf, 0, np.inf, np.inf], [1, 2, np.inf, 0, 2], [2, np.inf, np.inf, 2, 0]], dtype=float)
A:scipy.sparse.csgraph.tests.test_shortest_path.undirected_pred->numpy.array([[-9999, 0, 0, 0, 0], [1, -9999, 0, 1, 1], [2, 0, -9999, 0, 0], [3, 3, 0, -9999, 3], [4, 4, 0, 4, -9999]], dtype=float)
A:scipy.sparse.csgraph.tests.test_shortest_path.SP->shortest_path(G_dense)
A:scipy.sparse.csgraph.tests.test_shortest_path.SP1->shortest_path(directed_G, directed=directed, overwrite=False, unweighted=True)
A:scipy.sparse.csgraph.tests.test_shortest_path.SP2->shortest_path(unweighted_G, directed=directed, overwrite=False, unweighted=False)
A:scipy.sparse.csgraph.tests.test_shortest_path.SP_ans->numpy.array(SP_ans)
A:scipy.sparse.csgraph.tests.test_shortest_path.indices->numpy.arange(4)
A:scipy.sparse.csgraph.tests.test_shortest_path.min_d_ans->numpy.zeros(SP_ans.shape[0], SP_ans.dtype)
A:scipy.sparse.csgraph.tests.test_shortest_path.(SP, pred, sources)->dijkstra(directed_G, directed=directed, indices=indices, min_only=True, return_predecessors=True)
A:scipy.sparse.csgraph.tests.test_shortest_path.data->scipy.sparse.rand(n, n, density=0.5, format='lil', random_state=42, dtype=np.float64)
A:scipy.sparse.csgraph.tests.test_shortest_path.v->numpy.arange(n)
A:scipy.sparse.csgraph.tests.test_shortest_path.(ds, pred, sources)->dijkstra(data, directed=False, indices=indices, min_only=True, return_predecessors=True)
A:scipy.sparse.csgraph.tests.test_shortest_path.(SP, pred)->shortest_path(directed_G, method, directed=directed, overwrite=False, return_predecessors=True)
A:scipy.sparse.csgraph.tests.test_shortest_path.(SP1, pred)->shortest_path(directed_G, directed=directed, overwrite=False, return_predecessors=True)
A:scipy.sparse.csgraph.tests.test_shortest_path.graph->numpy.ones([5, 5])
A:scipy.sparse.csgraph.tests.test_shortest_path.G->scipy.sparse.csr_matrix([[1.0]])
A:scipy.sparse.csgraph.tests.test_shortest_path.foo->scipy.sparse.csr_matrix([[1.0]]).copy()
A:scipy.sparse.csgraph.tests.test_shortest_path.G_dense->numpy.array([[0, 3, 0, 0, 0], [0, 0, -1, 0, 0], [0, 0, 0, 2, 0], [0, 0, 0, 0, 4], [0, 0, 0, 0, 0]], dtype=float)
A:scipy.sparse.csgraph.tests.test_shortest_path.G_csr->scipy.sparse.csr_matrix(G_dense)
A:scipy.sparse.csgraph.tests.test_shortest_path.G_csc->scipy.sparse.csc_matrix(G_dense)
A:scipy.sparse.csgraph.tests.test_shortest_path.G_lil->scipy.sparse.lil_matrix(G_dense)
scipy.sparse.csgraph.tests.test_shortest_path.test_NaN_warnings()
scipy.sparse.csgraph.tests.test_shortest_path.test_buffer(method)
scipy.sparse.csgraph.tests.test_shortest_path.test_construct_shortest_path()
scipy.sparse.csgraph.tests.test_shortest_path.test_dijkstra_indices_min_only(directed,SP_ans,indices)
scipy.sparse.csgraph.tests.test_shortest_path.test_dijkstra_limit()
scipy.sparse.csgraph.tests.test_shortest_path.test_directed()
scipy.sparse.csgraph.tests.test_shortest_path.test_directed_sparse_zero()
scipy.sparse.csgraph.tests.test_shortest_path.test_masked_input()
scipy.sparse.csgraph.tests.test_shortest_path.test_negative_cycles()
scipy.sparse.csgraph.tests.test_shortest_path.test_overwrite()
scipy.sparse.csgraph.tests.test_shortest_path.test_predecessors()
scipy.sparse.csgraph.tests.test_shortest_path.test_shortest_path_indices()
scipy.sparse.csgraph.tests.test_shortest_path.test_shortest_path_min_only_random(n)
scipy.sparse.csgraph.tests.test_shortest_path.test_sparse_matrices()
scipy.sparse.csgraph.tests.test_shortest_path.test_undirected()
scipy.sparse.csgraph.tests.test_shortest_path.test_undirected_sparse_zero()
scipy.sparse.csgraph.tests.test_shortest_path.test_unweighted_path()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/csgraph/tests/test_graph_laplacian.py----------------------------------------
A:scipy.sparse.csgraph.tests.test_graph_laplacian.A->arr_type(np.array(A), dtype=dtype)
A:scipy.sparse.csgraph.tests.test_graph_laplacian.x->numpy.arange(6).reshape(3, 2)
A:scipy.sparse.csgraph.tests.test_graph_laplacian.d->numpy.diag(y).copy()
A:scipy.sparse.csgraph.tests.test_graph_laplacian.mat->arr_type(np.array(mat), dtype=dtype)
A:scipy.sparse.csgraph.tests.test_graph_laplacian.sp_mat->scipy.sparse.csr_matrix(mat)
A:scipy.sparse.csgraph.tests.test_graph_laplacian.mat_copy->numpy.copy(mat)
A:scipy.sparse.csgraph.tests.test_graph_laplacian.sp_mat_copy->scipy.sparse.csr_matrix(sp_mat, copy=True)
A:scipy.sparse.csgraph.tests.test_graph_laplacian.explicit_laplacian->_explicit_laplacian(mat, normed=normed)
A:scipy.sparse.csgraph.tests.test_graph_laplacian.laplacian->scipy.sparse.csgraph.laplacian(mat, normed=normed, copy=copy)
A:scipy.sparse.csgraph.tests.test_graph_laplacian.sp_laplacian->scipy.sparse.csgraph.laplacian(sp_mat, normed=normed, copy=copy)
A:scipy.sparse.csgraph.tests.test_graph_laplacian.a->a.toarray().toarray()
A:scipy.sparse.csgraph.tests.test_graph_laplacian.b->b.toarray().toarray()
A:scipy.sparse.csgraph.tests.test_graph_laplacian.(L, d)->scipy.sparse.csgraph.laplacian(mat, return_diag=True, normed=normed, symmetrized=symmetrized, use_out_degree=use_out_degree, dtype=dtype, form=form)
A:scipy.sparse.csgraph.tests.test_graph_laplacian.desired_L->numpy.asarray(desired_L).astype(dtype)
A:scipy.sparse.csgraph.tests.test_graph_laplacian.desired_d->numpy.asarray(desired_d).astype(dtype)
A:scipy.sparse.csgraph.tests.test_graph_laplacian.DTYPES->tuple(sorted(INT_DTYPES ^ REAL_DTYPES ^ COMPLEX_DTYPES, key=str))
A:scipy.sparse.csgraph.tests.test_graph_laplacian.A_copy->arr_type(np.array(A), dtype=dtype).copy()
A:scipy.sparse.csgraph.tests.test_graph_laplacian.(L_in, d_in)->scipy.sparse.csgraph.laplacian(mat, return_diag=True, form=form)
A:scipy.sparse.csgraph.tests.test_graph_laplacian.(L_out, d_out)->scipy.sparse.csgraph.laplacian(mat, return_diag=True, use_out_degree=True, form=form)
A:scipy.sparse.csgraph.tests.test_graph_laplacian.(Ls, ds)->scipy.sparse.csgraph.laplacian(mat, return_diag=True, symmetrized=True, form=form)
A:scipy.sparse.csgraph.tests.test_graph_laplacian.(Ls_normed, ds_normed)->scipy.sparse.csgraph.laplacian(mat, return_diag=True, symmetrized=True, normed=True, form=form)
A:scipy.sparse.csgraph.tests.test_graph_laplacian.(Lss, dss)->scipy.sparse.csgraph.laplacian(mat, return_diag=True, form=form)
A:scipy.sparse.csgraph.tests.test_graph_laplacian.(Lss_normed, dss_normed)->scipy.sparse.csgraph.laplacian(mat, return_diag=True, normed=True, form=form)
A:scipy.sparse.csgraph.tests.test_graph_laplacian.d[L]->eval(L)(np.eye(n, dtype=mat.dtype))
A:scipy.sparse.csgraph.tests.test_graph_laplacian.(Lo, do)->scipy.sparse.csgraph.laplacian(mat, return_diag=True, normed=normed, symmetrized=symmetrized, use_out_degree=use_out_degree, dtype=dtype)
A:scipy.sparse.csgraph.tests.test_graph_laplacian.(La, da)->scipy.sparse.csgraph.laplacian(mat, return_diag=True, normed=normed, symmetrized=symmetrized, use_out_degree=use_out_degree, dtype=dtype, form='array')
A:scipy.sparse.csgraph.tests.test_graph_laplacian.Lm->L(np.eye(n, dtype=mat.dtype)).astype(dtype)
A:scipy.sparse.csgraph.tests.test_graph_laplacian._->scipy.sparse.csgraph.laplacian(np.eye(1), form='toto')
scipy.sparse.csgraph.tests.test_graph_laplacian._assert_allclose_sparse(a,b,**kwargs)
scipy.sparse.csgraph.tests.test_graph_laplacian._check_laplacian_dtype(A,desired_L,desired_d,normed,use_out_degree,copy,dtype,arr_type)
scipy.sparse.csgraph.tests.test_graph_laplacian._check_laplacian_dtype_none(A,desired_L,desired_d,normed,use_out_degree,copy,dtype,arr_type)
scipy.sparse.csgraph.tests.test_graph_laplacian._check_symmetric_graph_laplacian(mat,normed,copy=True)
scipy.sparse.csgraph.tests.test_graph_laplacian._explicit_laplacian(x,normed=False)
scipy.sparse.csgraph.tests.test_graph_laplacian.check_int_type(mat)
scipy.sparse.csgraph.tests.test_graph_laplacian.test_asymmetric_laplacian(use_out_degree,normed,copy,dtype,arr_type)
scipy.sparse.csgraph.tests.test_graph_laplacian.test_format(dtype,arr_type,normed,symmetrized,use_out_degree,form)
scipy.sparse.csgraph.tests.test_graph_laplacian.test_format_error_message()
scipy.sparse.csgraph.tests.test_graph_laplacian.test_laplacian_symmetrized(arr_type,form)
scipy.sparse.csgraph.tests.test_graph_laplacian.test_laplacian_value_error()
scipy.sparse.csgraph.tests.test_graph_laplacian.test_sparse_formats(fmt,normed,copy)
scipy.sparse.csgraph.tests.test_graph_laplacian.test_symmetric_graph_laplacian()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/csgraph/tests/test_traversal.py----------------------------------------
A:scipy.sparse.csgraph.tests.test_traversal.csgraph->csgraph_from_dense(csgraph, null_value=0)
A:scipy.sparse.csgraph.tests.test_traversal.bfirst->numpy.array([[0]])
A:scipy.sparse.csgraph.tests.test_traversal.bfirst_test->depth_first_tree(csgraph, 0, directed)
A:scipy.sparse.csgraph.tests.test_traversal.dfirst->numpy.array([[0, 1, 0, 0, 0], [0, 0, 0, 0, 3], [0, 0, 0, 0, 0], [0, 0, 7, 0, 0], [0, 0, 0, 1, 0]])
A:scipy.sparse.csgraph.tests.test_traversal.dfirst_test->depth_first_tree(csgraph, 0, directed)
scipy.sparse.csgraph.tests.test_traversal.test_graph_breadth_first()
scipy.sparse.csgraph.tests.test_traversal.test_graph_breadth_first_trivial_graph()
scipy.sparse.csgraph.tests.test_traversal.test_graph_depth_first()
scipy.sparse.csgraph.tests.test_traversal.test_graph_depth_first_trivial_graph()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/csgraph/tests/test_connected_components.py----------------------------------------
A:scipy.sparse.csgraph.tests.test_connected_components.Xde->numpy.array([[0, 1, 0], [0, 0, 0], [0, 0, 0]])
A:scipy.sparse.csgraph.tests.test_connected_components.Xsp->scipy.sparse.csgraph.csgraph_from_dense(Xde, null_value=0)
A:scipy.sparse.csgraph.tests.test_connected_components.(n_components, labels)->scipy.sparse.csgraph.connected_components(g)
A:scipy.sparse.csgraph.tests.test_connected_components.X1de->numpy.array([[0, 1, 0], [0, 0, 0], [0, 0, 0]])
A:scipy.sparse.csgraph.tests.test_connected_components.X1sp->scipy.sparse.csgraph.csgraph_from_dense(X1de, null_value=0)
A:scipy.sparse.csgraph.tests.test_connected_components.X2sp->scipy.sparse.csgraph.csgraph_from_dense(X2de, null_value=0)
A:scipy.sparse.csgraph.tests.test_connected_components.X->numpy.array([[0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0]])
A:scipy.sparse.csgraph.tests.test_connected_components.g->numpy.ones((4, 4))
scipy.sparse.csgraph.tests.test_connected_components.test_fully_connected_graph()
scipy.sparse.csgraph.tests.test_connected_components.test_strong_connections()
scipy.sparse.csgraph.tests.test_connected_components.test_strong_connections2()
scipy.sparse.csgraph.tests.test_connected_components.test_ticket1876()
scipy.sparse.csgraph.tests.test_connected_components.test_weak_connections()
scipy.sparse.csgraph.tests.test_connected_components.test_weak_connections2()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/csgraph/tests/test_matching.py----------------------------------------
A:scipy.sparse.csgraph.tests.test_matching.graph->csr_matrix((data, indices, indptr), shape=(20, 25))
A:scipy.sparse.csgraph.tests.test_matching.x->maximum_bipartite_matching(graph, perm_type='row')
A:scipy.sparse.csgraph.tests.test_matching.y->maximum_bipartite_matching(graph, perm_type='column')
A:scipy.sparse.csgraph.tests.test_matching.expected_matching->numpy.array([1, 0])
A:scipy.sparse.csgraph.tests.test_matching.data->numpy.ones(50, dtype=int)
A:scipy.sparse.csgraph.tests.test_matching.A->diags(np.ones(25), offsets=0, format='csr')
A:scipy.sparse.csgraph.tests.test_matching.rand_perm->numpy.random.permutation(25)
A:scipy.sparse.csgraph.tests.test_matching.rand_perm2->numpy.random.permutation(25)
A:scipy.sparse.csgraph.tests.test_matching.Rrow->numpy.arange(25)
A:scipy.sparse.csgraph.tests.test_matching.Rdata->numpy.ones(25, dtype=int)
A:scipy.sparse.csgraph.tests.test_matching.Rmat->coo_matrix((Rdata, (Rrow, Rcol))).tocsr()
A:scipy.sparse.csgraph.tests.test_matching.Ccol->numpy.arange(25)
A:scipy.sparse.csgraph.tests.test_matching.Cdata->numpy.ones(25, dtype=int)
A:scipy.sparse.csgraph.tests.test_matching.Cmat->coo_matrix((Cdata, (Crow, Ccol))).tocsr()
A:scipy.sparse.csgraph.tests.test_matching.perm->maximum_bipartite_matching(B, perm_type='row')
A:scipy.sparse.csgraph.tests.test_matching.perm2->maximum_bipartite_matching(B, perm_type='column')
A:scipy.sparse.csgraph.tests.test_matching.biadjacency_matrix->csr_matrix(((2, 0, 3), (0, 1, 1), (0, 2, 3)))
A:scipy.sparse.csgraph.tests.test_matching.(row_ind, col_ind)->solver(cost_matrix, maximize=maximize)
A:scipy.sparse.csgraph.tests.test_matching.linear_sum_assignment_test_cases->product([-1, 1], [([[400, 150, 400], [400, 450, 600], [300, 225, 300]], [150, 400, 300]), ([[400, 150, 400, 1], [400, 450, 600, 2], [300, 225, 300, 3]], [150, 2, 300]), ([[10, 10, 8], [9, 8, 1], [9, 7, 4]], [10, 1, 7]), ([[10, 10, 8, 11], [9, 8, 1, 1], [9, 7, 4, 10]], [10, 1, 4]), ([[10, float('inf'), float('inf')], [float('inf'), float('inf'), 1], [float('inf'), 7, float('inf')]], [10, 1, 7])])
scipy.sparse.csgraph.tests.test_matching.linear_sum_assignment_assertions(solver,array_type,sign,test_case)
scipy.sparse.csgraph.tests.test_matching.test_explicit_zero_causes_warning()
scipy.sparse.csgraph.tests.test_matching.test_matching_large_random_graph_with_one_edge_incident_to_each_vertex()
scipy.sparse.csgraph.tests.test_matching.test_maximum_bipartite_matching_empty_graph()
scipy.sparse.csgraph.tests.test_matching.test_maximum_bipartite_matching_empty_left_partition()
scipy.sparse.csgraph.tests.test_matching.test_maximum_bipartite_matching_empty_right_partition()
scipy.sparse.csgraph.tests.test_matching.test_maximum_bipartite_matching_explicit_zeros_count_as_edges()
scipy.sparse.csgraph.tests.test_matching.test_maximum_bipartite_matching_feasibility_of_result()
scipy.sparse.csgraph.tests.test_matching.test_maximum_bipartite_matching_graph_that_causes_augmentation()
scipy.sparse.csgraph.tests.test_matching.test_maximum_bipartite_matching_graph_with_more_columns_than_rows()
scipy.sparse.csgraph.tests.test_matching.test_maximum_bipartite_matching_graph_with_more_rows_than_columns()
scipy.sparse.csgraph.tests.test_matching.test_maximum_bipartite_matching_graph_with_no_edges()
scipy.sparse.csgraph.tests.test_matching.test_maximum_bipartite_matching_raises_on_dense_input()
scipy.sparse.csgraph.tests.test_matching.test_min_weight_full_matching_infeasible_problems(biadjacency_matrix)
scipy.sparse.csgraph.tests.test_matching.test_min_weight_full_matching_small_inputs(sign,test_case)
scipy.sparse.csgraph.tests.test_matching.test_min_weight_full_matching_trivial_graph(num_rows,num_cols)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/csgraph/tests/test_conversions.py----------------------------------------
A:scipy.sparse.csgraph.tests.test_conversions.G->numpy.random.random((10, 10))
A:scipy.sparse.csgraph.tests.test_conversions.G_csr->csgraph_from_dense(G)
A:scipy.sparse.csgraph.tests.test_conversions.X->numpy.random.random((10, 10))
A:scipy.sparse.csgraph.tests.test_conversions.Xcsr->csr_matrix(X)
A:scipy.sparse.csgraph.tests.test_conversions.Xdense->csgraph_to_dense(Xcsr)
scipy.sparse.csgraph.tests.test_conversions.test_csgraph_from_dense()
scipy.sparse.csgraph.tests.test_conversions.test_csgraph_to_dense()
scipy.sparse.csgraph.tests.test_conversions.test_multiple_edges()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/csgraph/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/csgraph/tests/test_reordering.py----------------------------------------
A:scipy.sparse.csgraph.tests.test_reordering.A->csc_matrix([[1, 1, 0], [1, 0, 1], [0, 1, 0]])
A:scipy.sparse.csgraph.tests.test_reordering.graph->coo_matrix((data, (rows, cols))).tocsr()
A:scipy.sparse.csgraph.tests.test_reordering.perm->reverse_cuthill_mckee(graph)
A:scipy.sparse.csgraph.tests.test_reordering.correct_perm->numpy.array([12, 14, 4, 6, 10, 8, 2, 15, 0, 13, 7, 5, 9, 11, 1, 3])
A:scipy.sparse.csgraph.tests.test_reordering.graph.indices->coo_matrix((data, (rows, cols))).tocsr().indices.astype('int64')
A:scipy.sparse.csgraph.tests.test_reordering.graph.indptr->coo_matrix((data, (rows, cols))).tocsr().indptr.astype('int64')
A:scipy.sparse.csgraph.tests.test_reordering.data->numpy.ones_like(rows)
A:scipy.sparse.csgraph.tests.test_reordering.rows->numpy.array([0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7])
A:scipy.sparse.csgraph.tests.test_reordering.cols->numpy.array([0, 1, 2, 3, 4, 2, 5, 2, 6, 0, 1, 3, 5, 6, 7, 4, 5, 5, 6, 2, 6, 2, 4])
A:scipy.sparse.csgraph.tests.test_reordering.B->coo_matrix((data, (rows, cols)), shape=(8, 8))
A:scipy.sparse.csgraph.tests.test_reordering.C->csc_matrix([[1, 0, 2, 0], [2, 0, 4, 0]])
scipy.sparse.csgraph.tests.test_reordering.test_graph_reverse_cuthill_mckee()
scipy.sparse.csgraph.tests.test_reordering.test_graph_reverse_cuthill_mckee_ordering()
scipy.sparse.csgraph.tests.test_reordering.test_graph_structural_rank()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/interface.py----------------------------------------
scipy.sparse.linalg.interface.__dir__()
scipy.sparse.linalg.interface.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/eigen.py----------------------------------------
scipy.sparse.linalg.eigen.__dir__()
scipy.sparse.linalg.eigen.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_svdp.py----------------------------------------
A:scipy.sparse.linalg._svdp.self.A->aslinearoperator(np.asarray(A))
A:scipy.sparse.linalg._svdp.y[:]->self.A.rmatvec(x)
A:scipy.sparse.linalg._svdp.random_state->check_random_state(random_state)
A:scipy.sparse.linalg._svdp.which->which.upper().upper()
A:scipy.sparse.linalg._svdp.aprod->_AProd(A)
A:scipy.sparse.linalg._svdp.kmax->min(m + 1, n + 1, kmax)
A:scipy.sparse.linalg._svdp.u->numpy.zeros((m, kmax + 1), order='F', dtype=typ)
A:scipy.sparse.linalg._svdp.v->numpy.zeros((n, kmax), order='F', dtype=typ)
A:scipy.sparse.linalg._svdp.u[:, 0]->check_random_state(random_state).uniform(size=m)
A:scipy.sparse.linalg._svdp.delta->numpy.sqrt(np.finfo(typ).eps)
A:scipy.sparse.linalg._svdp.doption->numpy.array((delta, eta, anorm), dtype=typ.lower())
A:scipy.sparse.linalg._svdp.ioption->numpy.array((int(bool(cgs)), int(bool(elr))), dtype='i')
A:scipy.sparse.linalg._svdp.work->numpy.empty(lwork, dtype=typ.lower())
A:scipy.sparse.linalg._svdp.iwork->numpy.empty(liwork, dtype=np.int32)
A:scipy.sparse.linalg._svdp.dparm->numpy.empty(1, dtype=typ.lower())
A:scipy.sparse.linalg._svdp.iparm->numpy.empty(1, dtype=np.int32)
A:scipy.sparse.linalg._svdp.zwork->numpy.empty(m + n + 32 * m, dtype=typ)
A:scipy.sparse.linalg._svdp.(u, sigma, bnd, v, info)->lansvd(jobu, jobv, m, n, k, aprod, u, v, tol, *works, doption, ioption, dparm, iparm)
scipy.sparse.linalg._svdp._AProd(self,A)
scipy.sparse.linalg._svdp._AProd.__init__(self,A)
scipy.sparse.linalg._svdp._AProd.dtype(self)
scipy.sparse.linalg._svdp._AProd.shape(self)
scipy.sparse.linalg._svdp._svdp(A,k,which='LM',irl_mode=True,kmax=None,compute_u=True,compute_v=True,v0=None,full_output=False,tol=0,delta=None,eta=None,anorm=0,cgs=False,elr=True,min_relgap=0.002,shifts=None,maxiter=None,random_state=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/isolve.py----------------------------------------
scipy.sparse.linalg.isolve.__dir__()
scipy.sparse.linalg.isolve.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_interface.py----------------------------------------
A:scipy.sparse.linalg._interface.obj->super(LinearOperator, cls).__new__(cls)
A:scipy.sparse.linalg._interface.dtype->_get_dtype([A], [type(alpha)])
A:scipy.sparse.linalg._interface.shape->tuple(shape)
A:scipy.sparse.linalg._interface.v->numpy.zeros(self.shape[-1])
A:scipy.sparse.linalg._interface.x->numpy.asarray(x)
A:scipy.sparse.linalg._interface.y->y.reshape(N, 1).reshape(N, 1)
A:scipy.sparse.linalg._interface.X->numpy.asanyarray(X)
A:scipy.sparse.linalg._interface.Y->asmatrix(Y)
A:scipy.sparse.linalg._interface.H->property(adjoint)
A:scipy.sparse.linalg._interface.T->property(transpose)
A:scipy.sparse.linalg._interface.res->fun(res)
A:scipy.sparse.linalg._interface.self.__adj->_AdjointMatrixOperator(self)
A:scipy.sparse.linalg._interface.self.A->adjoint.A.T.conj()
A:scipy.sparse.linalg._interface.A->numpy.atleast_2d(np.asarray(A))
scipy.sparse.linalg.IdentityOperator(self,shape,dtype=None)
scipy.sparse.linalg.IdentityOperator._adjoint(self)
scipy.sparse.linalg.IdentityOperator._matmat(self,x)
scipy.sparse.linalg.IdentityOperator._matvec(self,x)
scipy.sparse.linalg.IdentityOperator._rmatmat(self,x)
scipy.sparse.linalg.IdentityOperator._rmatvec(self,x)
scipy.sparse.linalg.LinearOperator(self,dtype,shape)
scipy.sparse.linalg.LinearOperator.__add__(self,x)
scipy.sparse.linalg.LinearOperator.__matmul__(self,other)
scipy.sparse.linalg.LinearOperator.__mul__(self,x)
scipy.sparse.linalg.LinearOperator.__neg__(self)
scipy.sparse.linalg.LinearOperator.__pow__(self,p)
scipy.sparse.linalg.LinearOperator.__repr__(self)
scipy.sparse.linalg.LinearOperator.__rmatmul__(self,other)
scipy.sparse.linalg.LinearOperator.__rmul__(self,x)
scipy.sparse.linalg.LinearOperator.__sub__(self,x)
scipy.sparse.linalg.LinearOperator._adjoint(self)
scipy.sparse.linalg.LinearOperator._init_dtype(self)
scipy.sparse.linalg.LinearOperator._matmat(self,X)
scipy.sparse.linalg.LinearOperator._matvec(self,x)
scipy.sparse.linalg.LinearOperator._rmatmat(self,X)
scipy.sparse.linalg.LinearOperator._rmatvec(self,x)
scipy.sparse.linalg.LinearOperator._transpose(self)
scipy.sparse.linalg.LinearOperator.adjoint(self)
scipy.sparse.linalg.LinearOperator.dot(self,x)
scipy.sparse.linalg.LinearOperator.matmat(self,X)
scipy.sparse.linalg.LinearOperator.matvec(self,x)
scipy.sparse.linalg.LinearOperator.rmatmat(self,X)
scipy.sparse.linalg.LinearOperator.rmatvec(self,x)
scipy.sparse.linalg.LinearOperator.transpose(self)
scipy.sparse.linalg.MatrixLinearOperator(self,A)
scipy.sparse.linalg.MatrixLinearOperator._adjoint(self)
scipy.sparse.linalg.MatrixLinearOperator._matmat(self,X)
scipy.sparse.linalg._AdjointLinearOperator(self,A)
scipy.sparse.linalg._AdjointLinearOperator._matmat(self,x)
scipy.sparse.linalg._AdjointLinearOperator._matvec(self,x)
scipy.sparse.linalg._AdjointLinearOperator._rmatmat(self,x)
scipy.sparse.linalg._AdjointLinearOperator._rmatvec(self,x)
scipy.sparse.linalg._AdjointMatrixOperator(self,adjoint)
scipy.sparse.linalg._AdjointMatrixOperator._adjoint(self)
scipy.sparse.linalg._AdjointMatrixOperator.dtype(self)
scipy.sparse.linalg._CustomLinearOperator(self,shape,matvec,rmatvec=None,matmat=None,dtype=None,rmatmat=None)
scipy.sparse.linalg._CustomLinearOperator._adjoint(self)
scipy.sparse.linalg._CustomLinearOperator._matmat(self,X)
scipy.sparse.linalg._CustomLinearOperator._matvec(self,x)
scipy.sparse.linalg._CustomLinearOperator._rmatmat(self,X)
scipy.sparse.linalg._CustomLinearOperator._rmatvec(self,x)
scipy.sparse.linalg._PowerLinearOperator(self,A,p)
scipy.sparse.linalg._PowerLinearOperator._adjoint(self)
scipy.sparse.linalg._PowerLinearOperator._matmat(self,x)
scipy.sparse.linalg._PowerLinearOperator._matvec(self,x)
scipy.sparse.linalg._PowerLinearOperator._power(self,fun,x)
scipy.sparse.linalg._PowerLinearOperator._rmatmat(self,x)
scipy.sparse.linalg._PowerLinearOperator._rmatvec(self,x)
scipy.sparse.linalg._ProductLinearOperator(self,A,B)
scipy.sparse.linalg._ProductLinearOperator._adjoint(self)
scipy.sparse.linalg._ProductLinearOperator._matmat(self,x)
scipy.sparse.linalg._ProductLinearOperator._matvec(self,x)
scipy.sparse.linalg._ProductLinearOperator._rmatmat(self,x)
scipy.sparse.linalg._ProductLinearOperator._rmatvec(self,x)
scipy.sparse.linalg._ScaledLinearOperator(self,A,alpha)
scipy.sparse.linalg._ScaledLinearOperator._adjoint(self)
scipy.sparse.linalg._ScaledLinearOperator._matmat(self,x)
scipy.sparse.linalg._ScaledLinearOperator._matvec(self,x)
scipy.sparse.linalg._ScaledLinearOperator._rmatmat(self,x)
scipy.sparse.linalg._ScaledLinearOperator._rmatvec(self,x)
scipy.sparse.linalg._SumLinearOperator(self,A,B)
scipy.sparse.linalg._SumLinearOperator._adjoint(self)
scipy.sparse.linalg._SumLinearOperator._matmat(self,x)
scipy.sparse.linalg._SumLinearOperator._matvec(self,x)
scipy.sparse.linalg._SumLinearOperator._rmatmat(self,x)
scipy.sparse.linalg._SumLinearOperator._rmatvec(self,x)
scipy.sparse.linalg._TransposedLinearOperator(self,A)
scipy.sparse.linalg._TransposedLinearOperator._matmat(self,x)
scipy.sparse.linalg._TransposedLinearOperator._matvec(self,x)
scipy.sparse.linalg._TransposedLinearOperator._rmatmat(self,x)
scipy.sparse.linalg._TransposedLinearOperator._rmatvec(self,x)
scipy.sparse.linalg._get_dtype(operators,dtypes=None)
scipy.sparse.linalg._interface.IdentityOperator(self,shape,dtype=None)
scipy.sparse.linalg._interface.IdentityOperator.__init__(self,shape,dtype=None)
scipy.sparse.linalg._interface.IdentityOperator._adjoint(self)
scipy.sparse.linalg._interface.IdentityOperator._matmat(self,x)
scipy.sparse.linalg._interface.IdentityOperator._matvec(self,x)
scipy.sparse.linalg._interface.IdentityOperator._rmatmat(self,x)
scipy.sparse.linalg._interface.IdentityOperator._rmatvec(self,x)
scipy.sparse.linalg._interface.LinearOperator(self,dtype,shape)
scipy.sparse.linalg._interface.LinearOperator.__add__(self,x)
scipy.sparse.linalg._interface.LinearOperator.__init__(self,dtype,shape)
scipy.sparse.linalg._interface.LinearOperator.__matmul__(self,other)
scipy.sparse.linalg._interface.LinearOperator.__mul__(self,x)
scipy.sparse.linalg._interface.LinearOperator.__neg__(self)
scipy.sparse.linalg._interface.LinearOperator.__pow__(self,p)
scipy.sparse.linalg._interface.LinearOperator.__repr__(self)
scipy.sparse.linalg._interface.LinearOperator.__rmatmul__(self,other)
scipy.sparse.linalg._interface.LinearOperator.__rmul__(self,x)
scipy.sparse.linalg._interface.LinearOperator.__sub__(self,x)
scipy.sparse.linalg._interface.LinearOperator._adjoint(self)
scipy.sparse.linalg._interface.LinearOperator._init_dtype(self)
scipy.sparse.linalg._interface.LinearOperator._matmat(self,X)
scipy.sparse.linalg._interface.LinearOperator._matvec(self,x)
scipy.sparse.linalg._interface.LinearOperator._rmatmat(self,X)
scipy.sparse.linalg._interface.LinearOperator._rmatvec(self,x)
scipy.sparse.linalg._interface.LinearOperator._transpose(self)
scipy.sparse.linalg._interface.LinearOperator.adjoint(self)
scipy.sparse.linalg._interface.LinearOperator.dot(self,x)
scipy.sparse.linalg._interface.LinearOperator.matmat(self,X)
scipy.sparse.linalg._interface.LinearOperator.matvec(self,x)
scipy.sparse.linalg._interface.LinearOperator.rmatmat(self,X)
scipy.sparse.linalg._interface.LinearOperator.rmatvec(self,x)
scipy.sparse.linalg._interface.LinearOperator.transpose(self)
scipy.sparse.linalg._interface.MatrixLinearOperator(self,A)
scipy.sparse.linalg._interface.MatrixLinearOperator.__init__(self,A)
scipy.sparse.linalg._interface.MatrixLinearOperator._adjoint(self)
scipy.sparse.linalg._interface.MatrixLinearOperator._matmat(self,X)
scipy.sparse.linalg._interface._AdjointLinearOperator(self,A)
scipy.sparse.linalg._interface._AdjointLinearOperator.__init__(self,A)
scipy.sparse.linalg._interface._AdjointLinearOperator._matmat(self,x)
scipy.sparse.linalg._interface._AdjointLinearOperator._matvec(self,x)
scipy.sparse.linalg._interface._AdjointLinearOperator._rmatmat(self,x)
scipy.sparse.linalg._interface._AdjointLinearOperator._rmatvec(self,x)
scipy.sparse.linalg._interface._AdjointMatrixOperator(self,adjoint)
scipy.sparse.linalg._interface._AdjointMatrixOperator.__init__(self,adjoint)
scipy.sparse.linalg._interface._AdjointMatrixOperator._adjoint(self)
scipy.sparse.linalg._interface._AdjointMatrixOperator.dtype(self)
scipy.sparse.linalg._interface._CustomLinearOperator(self,shape,matvec,rmatvec=None,matmat=None,dtype=None,rmatmat=None)
scipy.sparse.linalg._interface._CustomLinearOperator.__init__(self,shape,matvec,rmatvec=None,matmat=None,dtype=None,rmatmat=None)
scipy.sparse.linalg._interface._CustomLinearOperator._adjoint(self)
scipy.sparse.linalg._interface._CustomLinearOperator._matmat(self,X)
scipy.sparse.linalg._interface._CustomLinearOperator._matvec(self,x)
scipy.sparse.linalg._interface._CustomLinearOperator._rmatmat(self,X)
scipy.sparse.linalg._interface._CustomLinearOperator._rmatvec(self,x)
scipy.sparse.linalg._interface._PowerLinearOperator(self,A,p)
scipy.sparse.linalg._interface._PowerLinearOperator.__init__(self,A,p)
scipy.sparse.linalg._interface._PowerLinearOperator._adjoint(self)
scipy.sparse.linalg._interface._PowerLinearOperator._matmat(self,x)
scipy.sparse.linalg._interface._PowerLinearOperator._matvec(self,x)
scipy.sparse.linalg._interface._PowerLinearOperator._power(self,fun,x)
scipy.sparse.linalg._interface._PowerLinearOperator._rmatmat(self,x)
scipy.sparse.linalg._interface._PowerLinearOperator._rmatvec(self,x)
scipy.sparse.linalg._interface._ProductLinearOperator(self,A,B)
scipy.sparse.linalg._interface._ProductLinearOperator.__init__(self,A,B)
scipy.sparse.linalg._interface._ProductLinearOperator._adjoint(self)
scipy.sparse.linalg._interface._ProductLinearOperator._matmat(self,x)
scipy.sparse.linalg._interface._ProductLinearOperator._matvec(self,x)
scipy.sparse.linalg._interface._ProductLinearOperator._rmatmat(self,x)
scipy.sparse.linalg._interface._ProductLinearOperator._rmatvec(self,x)
scipy.sparse.linalg._interface._ScaledLinearOperator(self,A,alpha)
scipy.sparse.linalg._interface._ScaledLinearOperator.__init__(self,A,alpha)
scipy.sparse.linalg._interface._ScaledLinearOperator._adjoint(self)
scipy.sparse.linalg._interface._ScaledLinearOperator._matmat(self,x)
scipy.sparse.linalg._interface._ScaledLinearOperator._matvec(self,x)
scipy.sparse.linalg._interface._ScaledLinearOperator._rmatmat(self,x)
scipy.sparse.linalg._interface._ScaledLinearOperator._rmatvec(self,x)
scipy.sparse.linalg._interface._SumLinearOperator(self,A,B)
scipy.sparse.linalg._interface._SumLinearOperator.__init__(self,A,B)
scipy.sparse.linalg._interface._SumLinearOperator._adjoint(self)
scipy.sparse.linalg._interface._SumLinearOperator._matmat(self,x)
scipy.sparse.linalg._interface._SumLinearOperator._matvec(self,x)
scipy.sparse.linalg._interface._SumLinearOperator._rmatmat(self,x)
scipy.sparse.linalg._interface._SumLinearOperator._rmatvec(self,x)
scipy.sparse.linalg._interface._TransposedLinearOperator(self,A)
scipy.sparse.linalg._interface._TransposedLinearOperator.__init__(self,A)
scipy.sparse.linalg._interface._TransposedLinearOperator._matmat(self,x)
scipy.sparse.linalg._interface._TransposedLinearOperator._matvec(self,x)
scipy.sparse.linalg._interface._TransposedLinearOperator._rmatmat(self,x)
scipy.sparse.linalg._interface._TransposedLinearOperator._rmatvec(self,x)
scipy.sparse.linalg._interface._get_dtype(operators,dtypes=None)
scipy.sparse.linalg._interface.aslinearoperator(A)
scipy.sparse.linalg.aslinearoperator(A)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/matfuncs.py----------------------------------------
scipy.sparse.linalg.matfuncs.__dir__()
scipy.sparse.linalg.matfuncs.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_expm_multiply.py----------------------------------------
A:scipy.sparse.linalg._expm_multiply.rng->numpy.random.default_rng(seed)
A:scipy.sparse.linalg._expm_multiply.S->numpy.random.default_rng(seed).choice([-1.0, +1.0], [n, m3])
A:scipy.sparse.linalg._expm_multiply.(Q, _)->qr(A.matmat(S), overwrite_a=True, mode='economic')
A:scipy.sparse.linalg._expm_multiply.trQAQ->numpy.trace(Q.conj().T @ A.matmat(Q))
A:scipy.sparse.linalg._expm_multiply.G->numpy.random.default_rng(seed).choice([-1, +1], [n, m3])
A:scipy.sparse.linalg._expm_multiply.trGAG->numpy.trace(right.conj().T @ A.matmat(right))
A:scipy.sparse.linalg._expm_multiply.X->numpy.empty(X_shape, dtype=np.result_type(A.dtype, B.dtype, float))
A:scipy.sparse.linalg._expm_multiply.(X, status)->_expm_multiply_interval(A, B, start, stop, num, endpoint, traceA=traceA)
A:scipy.sparse.linalg._expm_multiply.ident->_ident_like(A)
A:scipy.sparse.linalg._expm_multiply.is_linear_operator->isinstance(A, scipy.sparse.linalg.LinearOperator)
A:scipy.sparse.linalg._expm_multiply.norm_info->LazyOperatorNormInfo(t * A, A_1_norm=t * A_1_norm, ell=ell)
A:scipy.sparse.linalg._expm_multiply.(m_star, s)->_fragment_3_1(norm_info, n0, tol, ell=ell)
A:scipy.sparse.linalg._expm_multiply.eta->numpy.exp(t * mu / float(s))
A:scipy.sparse.linalg._expm_multiply.c1->_exact_inf_norm(F)
A:scipy.sparse.linalg._expm_multiply.c2->_exact_inf_norm(B)
A:scipy.sparse.linalg._expm_multiply.self._A_1_norm->_exact_1_norm(self._A)
A:scipy.sparse.linalg._expm_multiply.est->_onenormest_matrix_power(self._A, p, self._ell)
A:scipy.sparse.linalg._expm_multiply.sqrt_m_max->numpy.sqrt(m_max)
A:scipy.sparse.linalg._expm_multiply.p_low->int(np.floor(sqrt_m_max))
A:scipy.sparse.linalg._expm_multiply.p_high->int(np.ceil(sqrt_m_max + 1))
A:scipy.sparse.linalg._expm_multiply.s->_compute_cost_div_m(m, p, norm_info)
A:scipy.sparse.linalg._expm_multiply.best_s->max(best_s, 1)
A:scipy.sparse.linalg._expm_multiply.p_max->_compute_p_max(m_max)
A:scipy.sparse.linalg._expm_multiply.(samples, step)->numpy.linspace(start, stop, **linspace_kwargs)
A:scipy.sparse.linalg._expm_multiply.nsamples->len(samples)
A:scipy.sparse.linalg._expm_multiply.X[0]->_expm_multiply_simple_core(A, B, t_0, mu, m_star, s)
A:scipy.sparse.linalg._expm_multiply.X[k + 1]->_expm_multiply_simple_core(A, X[k], h, mu, m_star, s)
A:scipy.sparse.linalg._expm_multiply.K->numpy.empty(K_shape, dtype=X.dtype)
A:scipy.sparse.linalg._expm_multiply.coeff->float(pow(k, p))
A:scipy.sparse.linalg._expm_multiply.inf_norm_K_p_1->_exact_inf_norm(K[p])
scipy.sparse.linalg.LazyOperatorNormInfo(self,A,A_1_norm=None,ell=2,scale=1)
scipy.sparse.linalg.LazyOperatorNormInfo.alpha(self,p)
scipy.sparse.linalg.LazyOperatorNormInfo.d(self,p)
scipy.sparse.linalg.LazyOperatorNormInfo.onenorm(self)
scipy.sparse.linalg.LazyOperatorNormInfo.set_scale(self,scale)
scipy.sparse.linalg._compute_cost_div_m(m,p,norm_info)
scipy.sparse.linalg._compute_p_max(m_max)
scipy.sparse.linalg._condition_3_13(A_1_norm,n0,m_max,ell)
scipy.sparse.linalg._exact_1_norm(A)
scipy.sparse.linalg._exact_inf_norm(A)
scipy.sparse.linalg._expm_multiply.LazyOperatorNormInfo(self,A,A_1_norm=None,ell=2,scale=1)
scipy.sparse.linalg._expm_multiply.LazyOperatorNormInfo.__init__(self,A,A_1_norm=None,ell=2,scale=1)
scipy.sparse.linalg._expm_multiply.LazyOperatorNormInfo.alpha(self,p)
scipy.sparse.linalg._expm_multiply.LazyOperatorNormInfo.d(self,p)
scipy.sparse.linalg._expm_multiply.LazyOperatorNormInfo.onenorm(self)
scipy.sparse.linalg._expm_multiply.LazyOperatorNormInfo.set_scale(self,scale)
scipy.sparse.linalg._expm_multiply._compute_cost_div_m(m,p,norm_info)
scipy.sparse.linalg._expm_multiply._compute_p_max(m_max)
scipy.sparse.linalg._expm_multiply._condition_3_13(A_1_norm,n0,m_max,ell)
scipy.sparse.linalg._expm_multiply._exact_1_norm(A)
scipy.sparse.linalg._expm_multiply._exact_inf_norm(A)
scipy.sparse.linalg._expm_multiply._expm_multiply_interval(A,B,start=None,stop=None,num=None,endpoint=None,traceA=None,balance=False,status_only=False)
scipy.sparse.linalg._expm_multiply._expm_multiply_interval_core_0(A,X,h,mu,q,norm_info,tol,ell,n0)
scipy.sparse.linalg._expm_multiply._expm_multiply_interval_core_1(A,X,h,mu,m_star,s,q,tol)
scipy.sparse.linalg._expm_multiply._expm_multiply_interval_core_2(A,X,h,mu,m_star,s,q,tol)
scipy.sparse.linalg._expm_multiply._expm_multiply_simple(A,B,t=1.0,traceA=None,balance=False)
scipy.sparse.linalg._expm_multiply._expm_multiply_simple_core(A,B,t,mu,m_star,s,tol=None,balance=False)
scipy.sparse.linalg._expm_multiply._fragment_3_1(norm_info,n0,tol,m_max=55,ell=2)
scipy.sparse.linalg._expm_multiply._ident_like(A)
scipy.sparse.linalg._expm_multiply._onenormest_matrix_power(A,p,t=2,itmax=5,compute_v=False,compute_w=False)
scipy.sparse.linalg._expm_multiply._trace(A)
scipy.sparse.linalg._expm_multiply.expm_multiply(A,B,start=None,stop=None,num=None,endpoint=None,traceA=None)
scipy.sparse.linalg._expm_multiply.traceest(A,m3,seed=None)
scipy.sparse.linalg._expm_multiply_interval(A,B,start=None,stop=None,num=None,endpoint=None,traceA=None,balance=False,status_only=False)
scipy.sparse.linalg._expm_multiply_interval_core_0(A,X,h,mu,q,norm_info,tol,ell,n0)
scipy.sparse.linalg._expm_multiply_interval_core_1(A,X,h,mu,m_star,s,q,tol)
scipy.sparse.linalg._expm_multiply_interval_core_2(A,X,h,mu,m_star,s,q,tol)
scipy.sparse.linalg._expm_multiply_simple(A,B,t=1.0,traceA=None,balance=False)
scipy.sparse.linalg._expm_multiply_simple_core(A,B,t,mu,m_star,s,tol=None,balance=False)
scipy.sparse.linalg._fragment_3_1(norm_info,n0,tol,m_max=55,ell=2)
scipy.sparse.linalg._ident_like(A)
scipy.sparse.linalg._onenormest_matrix_power(A,p,t=2,itmax=5,compute_v=False,compute_w=False)
scipy.sparse.linalg._trace(A)
scipy.sparse.linalg.expm_multiply(A,B,start=None,stop=None,num=None,endpoint=None,traceA=None)
scipy.sparse.linalg.traceest(A,m3,seed=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/dsolve.py----------------------------------------
scipy.sparse.linalg.dsolve.__dir__()
scipy.sparse.linalg.dsolve.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_norm.py----------------------------------------
A:scipy.sparse.linalg._norm.data->scipy.sparse._sputils._todata(x)
A:scipy.sparse.linalg._norm.x->x.tocsr().tocsr()
A:scipy.sparse.linalg._norm.int_axis->int(axis)
A:scipy.sparse.linalg._norm.(_, s, _)->svds(x, k=1, solver='lobpcg')
A:scipy.sparse.linalg._norm.M->numpy.power(abs(x).power(ord).sum(axis=a), 1 / ord)
scipy.sparse.linalg._norm._sparse_frobenius_norm(x)
scipy.sparse.linalg._norm.norm(x,ord=None,axis=None)
scipy.sparse.linalg._sparse_frobenius_norm(x)
scipy.sparse.linalg.norm(x,ord=None,axis=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/__init__.py----------------------------------------
A:scipy.sparse.linalg.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_matfuncs.py----------------------------------------
A:scipy.sparse.linalg._matfuncs.I->_ident_like(A)
A:scipy.sparse.linalg._matfuncs.Ainv->spsolve(A, I)
A:scipy.sparse.linalg._matfuncs.p->int(p)
A:scipy.sparse.linalg._matfuncs.v->M.dot(v)
A:scipy.sparse.linalg._matfuncs.lower_part->sparse.tril(A, -1)
A:scipy.sparse.linalg._matfuncs.(f,)->scipy.linalg.get_blas_funcs(('trmm',), (A, B))
A:scipy.sparse.linalg._matfuncs.out->numpy.zeros([0, 0], dtype=A.dtype)
A:scipy.sparse.linalg._matfuncs.x->A.astype(float).T.dot(x)
A:scipy.sparse.linalg._matfuncs.X->X.dot(X).dot(X)
A:scipy.sparse.linalg._matfuncs.self._structure->kwargs.get('structure', None)
A:scipy.sparse.linalg._matfuncs.self.ndim->len(self.shape)
A:scipy.sparse.linalg._matfuncs.self.dtype->numpy.result_type(*[x.dtype for x in args])
A:scipy.sparse.linalg._matfuncs.self.ident->_ident_like(A)
A:scipy.sparse.linalg._matfuncs.self._A2->_smart_matrix_product(self.A, self.A, structure=self.structure)
A:scipy.sparse.linalg._matfuncs.self._A4->_smart_matrix_product(self.A2, self.A2, structure=self.structure)
A:scipy.sparse.linalg._matfuncs.self._A6->_smart_matrix_product(self.A4, self.A2, structure=self.structure)
A:scipy.sparse.linalg._matfuncs.self._A8->_smart_matrix_product(self.A6, self.A2, structure=self.structure)
A:scipy.sparse.linalg._matfuncs.self._A10->_smart_matrix_product(self.A4, self.A6, structure=self.structure)
A:scipy.sparse.linalg._matfuncs.U->_smart_matrix_product(B, U2 + b[7] * B6 + b[5] * B4 + b[3] * B2 + b[1] * self.ident, structure=self.structure)
A:scipy.sparse.linalg._matfuncs.U2->_smart_matrix_product(B6, b[13] * B6 + b[11] * B4 + b[9] * B2, structure=self.structure)
A:scipy.sparse.linalg._matfuncs.V2->_smart_matrix_product(B6, b[12] * B6 + b[10] * B4 + b[8] * B2, structure=self.structure)
A:scipy.sparse.linalg._matfuncs.A->A.astype(float).astype(float)
A:scipy.sparse.linalg._matfuncs.h->_ExpmPadeHelper(A, structure=structure, use_exact_onenorm=use_exact_onenorm)
A:scipy.sparse.linalg._matfuncs.eta_1->max(h.d4_loose, h.d6_loose)
A:scipy.sparse.linalg._matfuncs.(U, V)->_ExpmPadeHelper(A, structure=structure, use_exact_onenorm=use_exact_onenorm).pade13_scaled(s)
A:scipy.sparse.linalg._matfuncs.eta_2->max(h.d4_tight, h.d6_loose)
A:scipy.sparse.linalg._matfuncs.eta_3->max(h.d6_tight, h.d8_loose)
A:scipy.sparse.linalg._matfuncs.eta_4->max(h.d8_loose, h.d10_loose)
A:scipy.sparse.linalg._matfuncs.eta_5->min(eta_3, eta_4)
A:scipy.sparse.linalg._matfuncs.s->max(int(np.ceil(np.log2(eta_5 / theta_13))), 0)
A:scipy.sparse.linalg._matfuncs.diag_T->numpy.ravel(T.diagonal().copy())
A:scipy.sparse.linalg._matfuncs.exp_diag->numpy.exp(scale * diag_T)
A:scipy.sparse.linalg._matfuncs.value->int(np.ceil(log2_alpha_div_u / (2 * m)))
A:scipy.sparse.linalg._matfuncs.A_abs_onenorm->_onenorm_matrix_power_nnm(abs(A), 2 * m + 1)
A:scipy.sparse.linalg._matfuncs.log2_alpha_div_u->numpy.log2(alpha / u)
scipy.sparse.linalg.MatrixPowerOperator(self,A,p,structure=None)
scipy.sparse.linalg.MatrixPowerOperator.T(self)
scipy.sparse.linalg.MatrixPowerOperator._matmat(self,X)
scipy.sparse.linalg.MatrixPowerOperator._matvec(self,x)
scipy.sparse.linalg.MatrixPowerOperator._rmatvec(self,x)
scipy.sparse.linalg.ProductOperator(self,*args,**kwargs)
scipy.sparse.linalg.ProductOperator.T(self)
scipy.sparse.linalg.ProductOperator._matmat(self,X)
scipy.sparse.linalg.ProductOperator._matvec(self,x)
scipy.sparse.linalg.ProductOperator._rmatvec(self,x)
scipy.sparse.linalg._ExpmPadeHelper(self,A,structure=None,use_exact_onenorm=False)
scipy.sparse.linalg._ExpmPadeHelper.A10(self)
scipy.sparse.linalg._ExpmPadeHelper.A2(self)
scipy.sparse.linalg._ExpmPadeHelper.A4(self)
scipy.sparse.linalg._ExpmPadeHelper.A6(self)
scipy.sparse.linalg._ExpmPadeHelper.A8(self)
scipy.sparse.linalg._ExpmPadeHelper.d10_loose(self)
scipy.sparse.linalg._ExpmPadeHelper.d10_tight(self)
scipy.sparse.linalg._ExpmPadeHelper.d4_loose(self)
scipy.sparse.linalg._ExpmPadeHelper.d4_tight(self)
scipy.sparse.linalg._ExpmPadeHelper.d6_loose(self)
scipy.sparse.linalg._ExpmPadeHelper.d6_tight(self)
scipy.sparse.linalg._ExpmPadeHelper.d8_loose(self)
scipy.sparse.linalg._ExpmPadeHelper.d8_tight(self)
scipy.sparse.linalg._ExpmPadeHelper.pade13_scaled(self,s)
scipy.sparse.linalg._ExpmPadeHelper.pade3(self)
scipy.sparse.linalg._ExpmPadeHelper.pade5(self)
scipy.sparse.linalg._ExpmPadeHelper.pade7(self)
scipy.sparse.linalg._ExpmPadeHelper.pade9(self)
scipy.sparse.linalg._ell(A,m)
scipy.sparse.linalg._eq_10_42(lam_1,lam_2,t_12)
scipy.sparse.linalg._exp_sinch(a,x)
scipy.sparse.linalg._expm(A,use_exact_onenorm)
scipy.sparse.linalg._fragment_2_1(X,T,s)
scipy.sparse.linalg._is_upper_triangular(A)
scipy.sparse.linalg._matfuncs.MatrixPowerOperator(self,A,p,structure=None)
scipy.sparse.linalg._matfuncs.MatrixPowerOperator.T(self)
scipy.sparse.linalg._matfuncs.MatrixPowerOperator.__init__(self,A,p,structure=None)
scipy.sparse.linalg._matfuncs.MatrixPowerOperator._matmat(self,X)
scipy.sparse.linalg._matfuncs.MatrixPowerOperator._matvec(self,x)
scipy.sparse.linalg._matfuncs.MatrixPowerOperator._rmatvec(self,x)
scipy.sparse.linalg._matfuncs.ProductOperator(self,*args,**kwargs)
scipy.sparse.linalg._matfuncs.ProductOperator.T(self)
scipy.sparse.linalg._matfuncs.ProductOperator.__init__(self,*args,**kwargs)
scipy.sparse.linalg._matfuncs.ProductOperator._matmat(self,X)
scipy.sparse.linalg._matfuncs.ProductOperator._matvec(self,x)
scipy.sparse.linalg._matfuncs.ProductOperator._rmatvec(self,x)
scipy.sparse.linalg._matfuncs._ExpmPadeHelper(self,A,structure=None,use_exact_onenorm=False)
scipy.sparse.linalg._matfuncs._ExpmPadeHelper.A10(self)
scipy.sparse.linalg._matfuncs._ExpmPadeHelper.A2(self)
scipy.sparse.linalg._matfuncs._ExpmPadeHelper.A4(self)
scipy.sparse.linalg._matfuncs._ExpmPadeHelper.A6(self)
scipy.sparse.linalg._matfuncs._ExpmPadeHelper.A8(self)
scipy.sparse.linalg._matfuncs._ExpmPadeHelper.__init__(self,A,structure=None,use_exact_onenorm=False)
scipy.sparse.linalg._matfuncs._ExpmPadeHelper.d10_loose(self)
scipy.sparse.linalg._matfuncs._ExpmPadeHelper.d10_tight(self)
scipy.sparse.linalg._matfuncs._ExpmPadeHelper.d4_loose(self)
scipy.sparse.linalg._matfuncs._ExpmPadeHelper.d4_tight(self)
scipy.sparse.linalg._matfuncs._ExpmPadeHelper.d6_loose(self)
scipy.sparse.linalg._matfuncs._ExpmPadeHelper.d6_tight(self)
scipy.sparse.linalg._matfuncs._ExpmPadeHelper.d8_loose(self)
scipy.sparse.linalg._matfuncs._ExpmPadeHelper.d8_tight(self)
scipy.sparse.linalg._matfuncs._ExpmPadeHelper.pade13_scaled(self,s)
scipy.sparse.linalg._matfuncs._ExpmPadeHelper.pade3(self)
scipy.sparse.linalg._matfuncs._ExpmPadeHelper.pade5(self)
scipy.sparse.linalg._matfuncs._ExpmPadeHelper.pade7(self)
scipy.sparse.linalg._matfuncs._ExpmPadeHelper.pade9(self)
scipy.sparse.linalg._matfuncs._ell(A,m)
scipy.sparse.linalg._matfuncs._eq_10_42(lam_1,lam_2,t_12)
scipy.sparse.linalg._matfuncs._exp_sinch(a,x)
scipy.sparse.linalg._matfuncs._expm(A,use_exact_onenorm)
scipy.sparse.linalg._matfuncs._fragment_2_1(X,T,s)
scipy.sparse.linalg._matfuncs._is_upper_triangular(A)
scipy.sparse.linalg._matfuncs._onenorm_matrix_power_nnm(A,p)
scipy.sparse.linalg._matfuncs._onenormest_matrix_power(A,p,t=2,itmax=5,compute_v=False,compute_w=False,structure=None)
scipy.sparse.linalg._matfuncs._onenormest_product(operator_seq,t=2,itmax=5,compute_v=False,compute_w=False,structure=None)
scipy.sparse.linalg._matfuncs._smart_matrix_product(A,B,alpha=None,structure=None)
scipy.sparse.linalg._matfuncs._solve_P_Q(U,V,structure=None)
scipy.sparse.linalg._matfuncs.expm(A)
scipy.sparse.linalg._matfuncs.inv(A)
scipy.sparse.linalg._onenorm_matrix_power_nnm(A,p)
scipy.sparse.linalg._onenormest_matrix_power(A,p,t=2,itmax=5,compute_v=False,compute_w=False,structure=None)
scipy.sparse.linalg._onenormest_product(operator_seq,t=2,itmax=5,compute_v=False,compute_w=False,structure=None)
scipy.sparse.linalg._smart_matrix_product(A,B,alpha=None,structure=None)
scipy.sparse.linalg._solve_P_Q(U,V,structure=None)
scipy.sparse.linalg.expm(A)
scipy.sparse.linalg.inv(A)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_onenormest.py----------------------------------------
A:scipy.sparse.linalg._onenormest.A->aslinearoperator(A)
A:scipy.sparse.linalg._onenormest.A_explicit->numpy.asarray(aslinearoperator(A).matmat(np.identity(n)))
A:scipy.sparse.linalg._onenormest.col_abs_sums->abs(A_explicit).sum(axis=0)
A:scipy.sparse.linalg._onenormest.argmax_j->numpy.argmax(col_abs_sums)
A:scipy.sparse.linalg._onenormest.v->elementary_vector(n, ind_best)
A:scipy.sparse.linalg._onenormest.(est, v, w, nmults, nresamples)->_onenormest_core(A, A.H, t, itmax)
A:scipy.sparse.linalg._onenormest.y0->func(x[:block_size])
A:scipy.sparse.linalg._onenormest.y->numpy.sum(np.abs(X[j:j + block_size]), axis=0)
A:scipy.sparse.linalg._onenormest.y[j:j + block_size]->func(x[j:j + block_size])
A:scipy.sparse.linalg._onenormest.Y->numpy.asarray(A_linear_operator.matmat(X))
A:scipy.sparse.linalg._onenormest.A_linear_operator->aslinearoperator(A)
A:scipy.sparse.linalg._onenormest.AT_linear_operator->aslinearoperator(AT)
A:scipy.sparse.linalg._onenormest.X->numpy.ones((n, t), dtype=float)
A:scipy.sparse.linalg._onenormest.ind->numpy.concatenate((ind[~seen], ind[seen]))
A:scipy.sparse.linalg._onenormest.g->_sum_abs_axis0(Y)
A:scipy.sparse.linalg._onenormest.best_j->numpy.argmax(mags)
A:scipy.sparse.linalg._onenormest.S->sign_round_up(Y)
A:scipy.sparse.linalg._onenormest.Z->numpy.asarray(AT_linear_operator.matmat(S))
A:scipy.sparse.linalg._onenormest.h->_max_abs_axis1(Z)
A:scipy.sparse.linalg._onenormest.X[:, j]->elementary_vector(n, ind[j])
A:scipy.sparse.linalg._onenormest.ind_hist->numpy.concatenate((ind_hist, new_ind))
A:scipy.sparse.linalg._onenormest.mags->_sum_abs_axis0(Y)
A:scipy.sparse.linalg._onenormest.est->numpy.max(mags)
A:scipy.sparse.linalg._onenormest.seen->numpy.in1d(ind, ind_hist)
scipy.sparse.linalg._algorithm_2_2(A,AT,t)
scipy.sparse.linalg._blocked_elementwise(func)
scipy.sparse.linalg._max_abs_axis1(X)
scipy.sparse.linalg._onenormest._algorithm_2_2(A,AT,t)
scipy.sparse.linalg._onenormest._blocked_elementwise(func)
scipy.sparse.linalg._onenormest._max_abs_axis1(X)
scipy.sparse.linalg._onenormest._onenormest_core(A,AT,t,itmax)
scipy.sparse.linalg._onenormest._sum_abs_axis0(X)
scipy.sparse.linalg._onenormest.column_needs_resampling(i,X,Y=None)
scipy.sparse.linalg._onenormest.elementary_vector(n,i)
scipy.sparse.linalg._onenormest.every_col_of_X_is_parallel_to_a_col_of_Y(X,Y)
scipy.sparse.linalg._onenormest.less_than_or_close(a,b)
scipy.sparse.linalg._onenormest.onenormest(A,t=2,itmax=5,compute_v=False,compute_w=False)
scipy.sparse.linalg._onenormest.resample_column(i,X)
scipy.sparse.linalg._onenormest.sign_round_up(X)
scipy.sparse.linalg._onenormest.vectors_are_parallel(v,w)
scipy.sparse.linalg._onenormest_core(A,AT,t,itmax)
scipy.sparse.linalg._sum_abs_axis0(X)
scipy.sparse.linalg.column_needs_resampling(i,X,Y=None)
scipy.sparse.linalg.elementary_vector(n,i)
scipy.sparse.linalg.every_col_of_X_is_parallel_to_a_col_of_Y(X,Y)
scipy.sparse.linalg.less_than_or_close(a,b)
scipy.sparse.linalg.onenormest(A,t=2,itmax=5,compute_v=False,compute_w=False)
scipy.sparse.linalg.resample_column(i,X)
scipy.sparse.linalg.sign_round_up(X)
scipy.sparse.linalg.vectors_are_parallel(v,w)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_isolve/utils.py----------------------------------------
A:scipy.sparse.linalg._isolve.utils.A->aslinearoperator(A)
A:scipy.sparse.linalg._isolve.utils.b->b.ravel().ravel()
A:scipy.sparse.linalg._isolve.utils.xtype->coerce(xtype, b.dtype.char)
A:scipy.sparse.linalg._isolve.utils.M->aslinearoperator(M)
A:scipy.sparse.linalg._isolve.utils.x->x.ravel().ravel()
A:scipy.sparse.linalg._isolve.utils.bCopy->b.ravel().ravel().copy()
scipy.sparse.linalg._isolve.utils.coerce(x,y)
scipy.sparse.linalg._isolve.utils.id(x)
scipy.sparse.linalg._isolve.utils.make_system(A,M,x0,b)
scipy.sparse.linalg.utils.coerce(x,y)
scipy.sparse.linalg.utils.id(x)
scipy.sparse.linalg.utils.make_system(A,M,x0,b)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_isolve/_gcrotmk.py----------------------------------------
A:scipy.sparse.linalg._isolve._gcrotmk.(axpy, dot, scal, nrm2)->get_blas_funcs(['axpy', 'dot', 'scal', 'nrm2'], (x, r))
A:scipy.sparse.linalg._isolve._gcrotmk.B->numpy.zeros((len(cs), m), dtype=v0.dtype)
A:scipy.sparse.linalg._isolve._gcrotmk.Q->numpy.ones((1, 1), dtype=v0.dtype)
A:scipy.sparse.linalg._isolve._gcrotmk.R->numpy.zeros((1, 0), dtype=v0.dtype)
A:scipy.sparse.linalg._isolve._gcrotmk.z->rpsolve(vs[-1])
A:scipy.sparse.linalg._isolve._gcrotmk.w->scal(alpha, w)
A:scipy.sparse.linalg._isolve._gcrotmk.w_norm->nrm2(w)
A:scipy.sparse.linalg._isolve._gcrotmk.alpha->nrm2(c)
A:scipy.sparse.linalg._isolve._gcrotmk.hcur->numpy.zeros(j + 2, dtype=Q.dtype)
A:scipy.sparse.linalg._isolve._gcrotmk.hcur[i + 1]->nrm2(w)
A:scipy.sparse.linalg._isolve._gcrotmk.Q2->numpy.zeros((j + 2, j + 2), dtype=Q.dtype, order='F')
A:scipy.sparse.linalg._isolve._gcrotmk.R2->numpy.zeros((j + 2, j), dtype=R.dtype, order='F')
A:scipy.sparse.linalg._isolve._gcrotmk.(Q, R)->qr_insert(Q2, R2, hcur, j, which='col', overwrite_qru=True, check_finite=False)
A:scipy.sparse.linalg._isolve._gcrotmk.res->abs(Q[0, -1])
A:scipy.sparse.linalg._isolve._gcrotmk.(y, _, _, _)->lstsq(R[:j + 1, :j + 1], Q[0, :j + 1].conj())
A:scipy.sparse.linalg._isolve._gcrotmk.(A, M, x, b, postprocess)->make_system(A, M, x0, b)
A:scipy.sparse.linalg._isolve._gcrotmk.r->axpy(cx, r, r.shape[0], -gamma)
A:scipy.sparse.linalg._isolve._gcrotmk.b_norm->nrm2(b)
A:scipy.sparse.linalg._isolve._gcrotmk.C->numpy.empty((A.shape[0], len(CU)), dtype=r.dtype, order='F')
A:scipy.sparse.linalg._isolve._gcrotmk.(c, u)->CU.pop(0)
A:scipy.sparse.linalg._isolve._gcrotmk.c->scal(1.0 / alpha, c)
A:scipy.sparse.linalg._isolve._gcrotmk.(Q, R, P)->qr(C, overwrite_a=True, mode='economic', pivoting=True)
A:scipy.sparse.linalg._isolve._gcrotmk.cs->list(Q.T)
A:scipy.sparse.linalg._isolve._gcrotmk.u->scal(1.0 / alpha, u)
A:scipy.sparse.linalg._isolve._gcrotmk.(axpy, dot)->get_blas_funcs(['axpy', 'dot'], (r,))
A:scipy.sparse.linalg._isolve._gcrotmk.yc->dot(c, r)
A:scipy.sparse.linalg._isolve._gcrotmk.x->axpy(ux, x, x.shape[0], gamma)
A:scipy.sparse.linalg._isolve._gcrotmk.beta->nrm2(r)
A:scipy.sparse.linalg._isolve._gcrotmk.beta_tol->max(atol, tol * b_norm)
A:scipy.sparse.linalg._isolve._gcrotmk.(Q, R, B, vs, zs, y, pres)->_fgmres(matvec, r / beta, ml, rpsolve=psolve, atol=max(atol, tol * b_norm) / beta, cs=cs)
A:scipy.sparse.linalg._isolve._gcrotmk.ux->scal(alpha, ux)
A:scipy.sparse.linalg._isolve._gcrotmk.by->numpy.zeros((len(cs), m), dtype=v0.dtype).dot(y)
A:scipy.sparse.linalg._isolve._gcrotmk.hy->numpy.ones((1, 1), dtype=v0.dtype).dot(R.dot(y))
A:scipy.sparse.linalg._isolve._gcrotmk.cx->scal(alpha, cx)
A:scipy.sparse.linalg._isolve._gcrotmk.gamma->dot(cx, r)
A:scipy.sparse.linalg._isolve._gcrotmk.(W, sigma, V)->svd(D)
scipy.sparse.linalg._gcrotmk._fgmres(matvec,v0,m,atol,lpsolve=None,rpsolve=None,cs=(),outer_v=(),prepend_outer_v=False)
scipy.sparse.linalg._isolve._gcrotmk._fgmres(matvec,v0,m,atol,lpsolve=None,rpsolve=None,cs=(),outer_v=(),prepend_outer_v=False)
scipy.sparse.linalg._isolve._gcrotmk.gcrotmk(A,b,x0=None,tol=1e-05,maxiter=1000,M=None,callback=None,m=20,k=None,CU=None,discard_C=False,truncate='oldest',atol=None)
scipy.sparse.linalg.gcrotmk(A,b,x0=None,tol=1e-05,maxiter=1000,M=None,callback=None,m=20,k=None,CU=None,discard_C=False,truncate='oldest',atol=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_isolve/lgmres.py----------------------------------------
A:scipy.sparse.linalg._isolve.lgmres.(A, M, x, b, postprocess)->make_system(A, M, x0, b)
A:scipy.sparse.linalg._isolve.lgmres.nrm2->get_blas_funcs('nrm2', [b])
A:scipy.sparse.linalg._isolve.lgmres.b_norm->nrm2(b)
A:scipy.sparse.linalg._isolve.lgmres.x->x.astype(r_outer.dtype).astype(r_outer.dtype)
A:scipy.sparse.linalg._isolve.lgmres.(axpy, dot, scal, nrm2)->get_blas_funcs(['axpy', 'dot', 'scal', 'nrm2'], (x, r_outer))
A:scipy.sparse.linalg._isolve.lgmres.r_norm->nrm2(r_outer)
A:scipy.sparse.linalg._isolve.lgmres.inner_res_0->nrm2(v0)
A:scipy.sparse.linalg._isolve.lgmres.rnorm->nrm2(r_outer)
A:scipy.sparse.linalg._isolve.lgmres.v0->scal(1.0 / inner_res_0, v0)
A:scipy.sparse.linalg._isolve.lgmres.ptol->min(ptol_max_factor, max(atol, tol * b_norm) / r_norm)
A:scipy.sparse.linalg._isolve.lgmres.(Q, R, B, vs, zs, y, pres)->_fgmres(matvec, v0, inner_m, lpsolve=psolve, atol=ptol, outer_v=outer_v, prepend_outer_v=prepend_outer_v)
A:scipy.sparse.linalg._isolve.lgmres.ptol_max_factor->max(1e-16, 0.25 * ptol_max_factor)
A:scipy.sparse.linalg._isolve.lgmres.dx->axpy(w, dx, dx.shape[0], yc)
A:scipy.sparse.linalg._isolve.lgmres.nx->nrm2(dx)
A:scipy.sparse.linalg._isolve.lgmres.q->Q.dot(R.dot(y))
A:scipy.sparse.linalg._isolve.lgmres.ax->axpy(v, ax, ax.shape[0], qc)
scipy.sparse.linalg._isolve.lgmres.lgmres(A,b,x0=None,tol=1e-05,maxiter=1000,M=None,callback=None,inner_m=30,outer_k=3,outer_v=None,store_outer_Av=True,prepend_outer_v=False,atol=None)
scipy.sparse.linalg.lgmres(A,b,x0=None,tol=1e-05,maxiter=1000,M=None,callback=None,inner_m=30,outer_k=3,outer_v=None,store_outer_Av=True,prepend_outer_v=False,atol=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_isolve/iterative.py----------------------------------------
A:scipy.sparse.linalg._isolve.iterative.resid->get_residual()
A:scipy.sparse.linalg._isolve.iterative.tol->float(tol)
A:scipy.sparse.linalg._isolve.iterative.fn.__doc__->'\n'.join((header, common_doc1, '    ' + Ainfo.replace('\n', '\n    '), common_doc2, dedent(footer)))
A:scipy.sparse.linalg._isolve.iterative.(A, M, x, b, postprocess)->make_system(A, None, x0, b)
A:scipy.sparse.linalg._isolve.iterative.n->len(b)
A:scipy.sparse.linalg._isolve.iterative.revcom->getattr(_iterative, ltr + 'qmrrevcom')
A:scipy.sparse.linalg._isolve.iterative.atol->_get_atol(tol, atol, np.linalg.norm(b), get_residual, 'qmr')
A:scipy.sparse.linalg._isolve.iterative.work->_aligned_zeros(11 * n, x.dtype)
A:scipy.sparse.linalg._isolve.iterative.(x, iter_, resid, info, ndx1, ndx2, sclr1, sclr2, ijob)->revcom(b, x, work, iter_, resid, info, ndx1, ndx2, ijob)
A:scipy.sparse.linalg._isolve.iterative.slice1->slice(ndx1 - 1, ndx1 - 1 + n)
A:scipy.sparse.linalg._isolve.iterative.slice2->slice(ndx2 - 1, ndx2 - 1 + n)
A:scipy.sparse.linalg._isolve.iterative.work[slice1]->LinearOperator(A.shape, matvec=id, rmatvec=id).rmatvec(work[slice2])
A:scipy.sparse.linalg._isolve.iterative.(resid, info)->_stoptest(work[slice1], atol)
A:scipy.sparse.linalg._isolve.iterative.(resid, ok)->_stoptest(b - matvec(x), atol)
A:scipy.sparse.linalg._isolve.iterative.restrt->min(restrt, n)
A:scipy.sparse.linalg._isolve.iterative.bnrm2->numpy.linalg.norm(b)
A:scipy.sparse.linalg._isolve.iterative.Mb_nrm2->numpy.linalg.norm(psolve(b))
A:scipy.sparse.linalg._isolve.iterative.work2->_aligned_zeros((restrt + 1) * (2 * restrt + 2), dtype=x.dtype)
A:scipy.sparse.linalg._isolve.iterative.(x, iter_, presid, info, ndx1, ndx2, sclr1, sclr2, ijob)->revcom(b, x, restrt, work, work2, iter_, presid, info, ndx1, ndx2, ijob, ptol)
A:scipy.sparse.linalg._isolve.iterative.ptol_max_factor->max(1e-16, 0.25 * ptol_max_factor)
A:scipy.sparse.linalg._isolve.iterative.M1->LinearOperator(A.shape, matvec=id, rmatvec=id)
A:scipy.sparse.linalg._isolve.iterative.M2->LinearOperator(A.shape, matvec=id, rmatvec=id)
scipy.sparse.linalg._get_atol(tol,atol,bnrm2,get_residual,routine_name)
scipy.sparse.linalg._isolve.iterative._get_atol(tol,atol,bnrm2,get_residual,routine_name)
scipy.sparse.linalg._isolve.iterative._stoptest(residual,atol)
scipy.sparse.linalg._isolve.iterative.bicg(A,b,x0=None,tol=1e-05,maxiter=None,M=None,callback=None,atol=None)
scipy.sparse.linalg._isolve.iterative.bicgstab(A,b,x0=None,tol=1e-05,maxiter=None,M=None,callback=None,atol=None)
scipy.sparse.linalg._isolve.iterative.cg(A,b,x0=None,tol=1e-05,maxiter=None,M=None,callback=None,atol=None)
scipy.sparse.linalg._isolve.iterative.cgs(A,b,x0=None,tol=1e-05,maxiter=None,M=None,callback=None,atol=None)
scipy.sparse.linalg._isolve.iterative.gmres(A,b,x0=None,tol=1e-05,restart=None,maxiter=None,M=None,callback=None,restrt=None,atol=None,callback_type=None)
scipy.sparse.linalg._isolve.iterative.qmr(A,b,x0=None,tol=1e-05,maxiter=None,M1=None,M2=None,callback=None,atol=None)
scipy.sparse.linalg._isolve.iterative.set_docstring(header,Ainfo,footer='',atol_default='0')
scipy.sparse.linalg._stoptest(residual,atol)
scipy.sparse.linalg.bicg(A,b,x0=None,tol=1e-05,maxiter=None,M=None,callback=None,atol=None)
scipy.sparse.linalg.bicgstab(A,b,x0=None,tol=1e-05,maxiter=None,M=None,callback=None,atol=None)
scipy.sparse.linalg.cg(A,b,x0=None,tol=1e-05,maxiter=None,M=None,callback=None,atol=None)
scipy.sparse.linalg.cgs(A,b,x0=None,tol=1e-05,maxiter=None,M=None,callback=None,atol=None)
scipy.sparse.linalg.gmres(A,b,x0=None,tol=1e-05,restart=None,maxiter=None,M=None,callback=None,restrt=None,atol=None,callback_type=None)
scipy.sparse.linalg.qmr(A,b,x0=None,tol=1e-05,maxiter=None,M1=None,M2=None,callback=None,atol=None)
scipy.sparse.linalg.set_docstring(header,Ainfo,footer='',atol_default='0')


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_isolve/lsqr.py----------------------------------------
A:scipy.sparse.linalg._isolve.lsqr.A->aslinearoperator(A)
A:scipy.sparse.linalg._isolve.lsqr.b->b.squeeze().squeeze()
A:scipy.sparse.linalg._isolve.lsqr.var->numpy.zeros(n)
A:scipy.sparse.linalg._isolve.lsqr.bnorm->numpy.linalg.norm(b)
A:scipy.sparse.linalg._isolve.lsqr.x->numpy.asarray(x0)
A:scipy.sparse.linalg._isolve.lsqr.beta->numpy.linalg.norm(u)
A:scipy.sparse.linalg._isolve.lsqr.v->numpy.asarray(x0).copy()
A:scipy.sparse.linalg._isolve.lsqr.alfa->numpy.linalg.norm(v)
A:scipy.sparse.linalg._isolve.lsqr.w->numpy.asarray(x0).copy().copy()
A:scipy.sparse.linalg._isolve.lsqr.anorm->sqrt(anorm ** 2 + alfa ** 2 + beta ** 2 + dampsq)
A:scipy.sparse.linalg._isolve.lsqr.rhobar1->sqrt(rhobar ** 2 + dampsq)
A:scipy.sparse.linalg._isolve.lsqr.(cs, sn, rho)->_sym_ortho(rhobar1, beta)
A:scipy.sparse.linalg._isolve.lsqr.xnorm->sqrt(xxnorm + zbar ** 2)
A:scipy.sparse.linalg._isolve.lsqr.gamma->sqrt(gambar ** 2 + theta ** 2)
A:scipy.sparse.linalg._isolve.lsqr.rnorm->sqrt(res1 + res2)
A:scipy.sparse.linalg._isolve.lsqr.r1norm->sqrt(abs(r1sq))
scipy.sparse.linalg._isolve.lsqr._sym_ortho(a,b)
scipy.sparse.linalg._isolve.lsqr.lsqr(A,b,damp=0.0,atol=1e-06,btol=1e-06,conlim=100000000.0,iter_lim=None,show=False,calc_var=False,x0=None)
scipy.sparse.linalg.lsqr(A,b,damp=0.0,atol=1e-06,btol=1e-06,conlim=100000000.0,iter_lim=None,show=False,calc_var=False,x0=None)
scipy.sparse.linalg.lsqr._sym_ortho(a,b)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_isolve/lsmr.py----------------------------------------
A:scipy.sparse.linalg._isolve.lsmr.A->aslinearoperator(A)
A:scipy.sparse.linalg._isolve.lsmr.b->b.squeeze().squeeze()
A:scipy.sparse.linalg._isolve.lsmr.minDim->min([m, n])
A:scipy.sparse.linalg._isolve.lsmr.dtype->result_type(A, b, x0, float)
A:scipy.sparse.linalg._isolve.lsmr.normb->norm(b)
A:scipy.sparse.linalg._isolve.lsmr.x->atleast_1d(x0.copy())
A:scipy.sparse.linalg._isolve.lsmr.beta->norm(u)
A:scipy.sparse.linalg._isolve.lsmr.v->zeros(n, dtype)
A:scipy.sparse.linalg._isolve.lsmr.alpha->norm(v)
A:scipy.sparse.linalg._isolve.lsmr.h->zeros(n, dtype).copy()
A:scipy.sparse.linalg._isolve.lsmr.hbar->zeros(n, dtype)
A:scipy.sparse.linalg._isolve.lsmr.normA->sqrt(normA2)
A:scipy.sparse.linalg._isolve.lsmr.(chat, shat, alphahat)->_sym_ortho(alphabar, damp)
A:scipy.sparse.linalg._isolve.lsmr.(c, s, rho)->_sym_ortho(alphahat, beta)
A:scipy.sparse.linalg._isolve.lsmr.(cbar, sbar, rhobar)->_sym_ortho(cbar * rho, thetanew)
A:scipy.sparse.linalg._isolve.lsmr.(ctildeold, stildeold, rhotildeold)->_sym_ortho(rhodold, thetabar)
A:scipy.sparse.linalg._isolve.lsmr.normr->sqrt(d + (betad - taud) ** 2 + betadd * betadd)
A:scipy.sparse.linalg._isolve.lsmr.maxrbar->max(maxrbar, rhobarold)
A:scipy.sparse.linalg._isolve.lsmr.minrbar->min(minrbar, rhobarold)
A:scipy.sparse.linalg._isolve.lsmr.normar->abs(zetabar)
A:scipy.sparse.linalg._isolve.lsmr.normx->norm(x)
scipy.sparse.linalg._isolve.lsmr.lsmr(A,b,damp=0.0,atol=1e-06,btol=1e-06,conlim=100000000.0,maxiter=None,show=False,x0=None)
scipy.sparse.linalg.lsmr(A,b,damp=0.0,atol=1e-06,btol=1e-06,conlim=100000000.0,maxiter=None,show=False,x0=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_isolve/tfqmr.py----------------------------------------
A:scipy.sparse.linalg._isolve.tfqmr.A->A.astype(dtype).astype(dtype)
A:scipy.sparse.linalg._isolve.tfqmr.b->b.astype(dtype).astype(dtype)
A:scipy.sparse.linalg._isolve.tfqmr.(A, M, x, b, postprocess)->make_system(A, M, x0, b)
A:scipy.sparse.linalg._isolve.tfqmr.x->b.astype(dtype).astype(dtype).copy()
A:scipy.sparse.linalg._isolve.tfqmr.maxiter->min(10000, ndofs * 10)
A:scipy.sparse.linalg._isolve.tfqmr.r->b.astype(dtype).astype(dtype).copy()
A:scipy.sparse.linalg._isolve.tfqmr.w->b.astype(dtype).astype(dtype).copy().copy()
A:scipy.sparse.linalg._isolve.tfqmr.v->M.matvec(A.matvec(r))
A:scipy.sparse.linalg._isolve.tfqmr.rho->numpy.inner(rstar.conjugate(), w)
A:scipy.sparse.linalg._isolve.tfqmr.r0norm->numpy.sqrt(rho)
A:scipy.sparse.linalg._isolve.tfqmr.atol->max(atol, tol * r0norm)
A:scipy.sparse.linalg._isolve.tfqmr.vtrstar->numpy.inner(rstar.conjugate(), v)
A:scipy.sparse.linalg._isolve.tfqmr.c->numpy.sqrt(1.0 / (1 + theta ** 2))
A:scipy.sparse.linalg._isolve.tfqmr.z->M.matvec(d)
A:scipy.sparse.linalg._isolve.tfqmr.uhat->M.matvec(A.matvec(uNext))
scipy.sparse.linalg._isolve.tfqmr.tfqmr(A,b,x0=None,tol=1e-05,maxiter=None,M=None,callback=None,atol=None,show=False)
scipy.sparse.linalg.tfqmr(A,b,x0=None,tol=1e-05,maxiter=None,M=None,callback=None,atol=None,show=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_isolve/minres.py----------------------------------------
A:scipy.sparse.linalg._isolve.minres.(A, M, x, b, postprocess)->make_system(A, M, x0, b)
A:scipy.sparse.linalg._isolve.minres.r1->zeros(A.shape[0]).copy()
A:scipy.sparse.linalg._isolve.minres.y->psolve(r2)
A:scipy.sparse.linalg._isolve.minres.beta1->sqrt(beta1)
A:scipy.sparse.linalg._isolve.minres.bnorm->norm(b)
A:scipy.sparse.linalg._isolve.minres.w->zeros(n, dtype=xtype)
A:scipy.sparse.linalg._isolve.minres.r2->psolve(y)
A:scipy.sparse.linalg._isolve.minres.s->inner(y, y)
A:scipy.sparse.linalg._isolve.minres.t->inner(r1, r2)
A:scipy.sparse.linalg._isolve.minres.z->abs(s - t)
A:scipy.sparse.linalg._isolve.minres.w2->zeros(n, dtype=xtype)
A:scipy.sparse.linalg._isolve.minres.alfa->inner(v, y)
A:scipy.sparse.linalg._isolve.minres.beta->sqrt(beta)
A:scipy.sparse.linalg._isolve.minres.root->norm([gbar, dbar])
A:scipy.sparse.linalg._isolve.minres.gamma->max(gamma, eps)
A:scipy.sparse.linalg._isolve.minres.gmax->max(gmax, gamma)
A:scipy.sparse.linalg._isolve.minres.gmin->min(gmin, gamma)
A:scipy.sparse.linalg._isolve.minres.Anorm->sqrt(tnorm2)
A:scipy.sparse.linalg._isolve.minres.ynorm->norm(x)
A:scipy.sparse.linalg._isolve.minres.A->spdiags([arange(1, n + 1, dtype=float)], [0], n, n, format='csr')
A:scipy.sparse.linalg._isolve.minres.M->spdiags([1.0 / arange(1, n + 1, dtype=float)], [0], n, n, format='csr')
A:scipy.sparse.linalg._isolve.minres.b->zeros(A.shape[0])
A:scipy.sparse.linalg._isolve.minres.x->minres(A, b, tol=1e-12, maxiter=None, callback=cb)
scipy.sparse.linalg._isolve.minres.minres(A,b,x0=None,shift=0.0,tol=1e-05,maxiter=None,M=None,callback=None,show=False,check=False)
scipy.sparse.linalg.minres(A,b,x0=None,shift=0.0,tol=1e-05,maxiter=None,M=None,callback=None,show=False,check=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_isolve/__init__.py----------------------------------------
A:scipy.sparse.linalg._isolve.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_isolve/tests/test_gcrotmk.py----------------------------------------
A:scipy.sparse.linalg._isolve.tests.test_gcrotmk.Am->csr_matrix(array([[-2, 1, 0, 0, 0, 9], [1, -2, 1, 0, 5, 0], [0, 1, -2, 1, 0, 0], [0, 0, 1, -2, 1, 0], [0, 3, 0, 1, -2, 1], [1, 0, 0, 0, 1, -2]]))
A:scipy.sparse.linalg._isolve.tests.test_gcrotmk.b->numpy.array([1, 1])
A:scipy.sparse.linalg._isolve.tests.test_gcrotmk.A->numpy.array([[1, 2], [3, 4]], dtype=float)
A:scipy.sparse.linalg._isolve.tests.test_gcrotmk.(x0, flag)->gcrotmk(A, b, x0=zeros(A.shape[0]), tol=1e-14, **kw)
A:scipy.sparse.linalg._isolve.tests.test_gcrotmk.pc->splu(Am.tocsc())
A:scipy.sparse.linalg._isolve.tests.test_gcrotmk.M->LinearOperator(matvec=pc.solve, shape=A.shape, dtype=A.dtype)
A:scipy.sparse.linalg._isolve.tests.test_gcrotmk.(x0, count_0)->do_solve(CU=CU, discard_C=discard_C)
A:scipy.sparse.linalg._isolve.tests.test_gcrotmk.(x1, count_1)->do_solve(CU=CU, discard_C=discard_C)
A:scipy.sparse.linalg._isolve.tests.test_gcrotmk.(x0, flag0)->gcrotmk(A, b, x0=zeros(A.shape[0]), m=15, k=0, maxiter=1)
A:scipy.sparse.linalg._isolve.tests.test_gcrotmk.(x1, flag1)->gmres(A, b, x0=zeros(A.shape[0]), restart=15, maxiter=1)
A:scipy.sparse.linalg._isolve.tests.test_gcrotmk.(x, info)->gcrotmk(A, b, m=10, k=10, truncate=truncate, tol=0.0001, maxiter=200)
A:scipy.sparse.linalg._isolve.tests.test_gcrotmk.(xp, info)->gcrotmk(A, b)
scipy.sparse.linalg._isolve.tests.test_gcrotmk.TestGCROTMK
scipy.sparse.linalg._isolve.tests.test_gcrotmk.TestGCROTMK.test_CU(self)
scipy.sparse.linalg._isolve.tests.test_gcrotmk.TestGCROTMK.test_arnoldi(self)
scipy.sparse.linalg._isolve.tests.test_gcrotmk.TestGCROTMK.test_cornercase(self)
scipy.sparse.linalg._isolve.tests.test_gcrotmk.TestGCROTMK.test_denormals(self)
scipy.sparse.linalg._isolve.tests.test_gcrotmk.TestGCROTMK.test_nans(self)
scipy.sparse.linalg._isolve.tests.test_gcrotmk.TestGCROTMK.test_preconditioner(self)
scipy.sparse.linalg._isolve.tests.test_gcrotmk.TestGCROTMK.test_truncate(self)
scipy.sparse.linalg._isolve.tests.test_gcrotmk.do_solve(**kw)
scipy.sparse.linalg._isolve.tests.test_gcrotmk.matvec(v)
scipy.sparse.linalg.tests.test_gcrotmk.TestGCROTMK
scipy.sparse.linalg.tests.test_gcrotmk.TestGCROTMK.test_CU(self)
scipy.sparse.linalg.tests.test_gcrotmk.TestGCROTMK.test_arnoldi(self)
scipy.sparse.linalg.tests.test_gcrotmk.TestGCROTMK.test_cornercase(self)
scipy.sparse.linalg.tests.test_gcrotmk.TestGCROTMK.test_denormals(self)
scipy.sparse.linalg.tests.test_gcrotmk.TestGCROTMK.test_nans(self)
scipy.sparse.linalg.tests.test_gcrotmk.TestGCROTMK.test_preconditioner(self)
scipy.sparse.linalg.tests.test_gcrotmk.TestGCROTMK.test_truncate(self)
scipy.sparse.linalg.tests.test_gcrotmk.do_solve(**kw)
scipy.sparse.linalg.tests.test_gcrotmk.matvec(v)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_isolve/tests/test_minres.py----------------------------------------
A:scipy.sparse.linalg._isolve.tests.test_minres.matrix->numpy.random.rand(10, 10)
A:scipy.sparse.linalg._isolve.tests.test_minres.vector->numpy.random.rand(10)
A:scipy.sparse.linalg._isolve.tests.test_minres.(A, b)->get_sample_problem()
A:scipy.sparse.linalg._isolve.tests.test_minres.(xp, info)->minres(A, b, check=True)
A:scipy.sparse.linalg._isolve.tests.test_minres.x0->numpy.random.rand(10)
A:scipy.sparse.linalg._isolve.tests.test_minres.(x1, info1)->minres(A, b, shift=shift)
A:scipy.sparse.linalg._isolve.tests.test_minres.(x2, info2)->minres(shifted_A, b)
A:scipy.sparse.linalg._isolve.tests.test_minres.a->numpy.eye(10)
A:scipy.sparse.linalg._isolve.tests.test_minres.b->numpy.ones(10)
A:scipy.sparse.linalg._isolve.tests.test_minres.c->numpy.ones(10)
A:scipy.sparse.linalg._isolve.tests.test_minres.m->numpy.dot(m, m.T)
scipy.sparse.linalg._isolve.tests.test_minres.get_sample_problem()
scipy.sparse.linalg._isolve.tests.test_minres.test_asymmetric_fail()
scipy.sparse.linalg._isolve.tests.test_minres.test_minres_non_default_x0()
scipy.sparse.linalg._isolve.tests.test_minres.test_minres_precond_exact_x0()
scipy.sparse.linalg._isolve.tests.test_minres.test_minres_precond_non_default_x0()
scipy.sparse.linalg._isolve.tests.test_minres.test_shift()
scipy.sparse.linalg._isolve.tests.test_minres.test_singular()
scipy.sparse.linalg._isolve.tests.test_minres.test_x0_is_used_by()
scipy.sparse.linalg.tests.test_minres.get_sample_problem()
scipy.sparse.linalg.tests.test_minres.test_asymmetric_fail()
scipy.sparse.linalg.tests.test_minres.test_minres_non_default_x0()
scipy.sparse.linalg.tests.test_minres.test_minres_precond_exact_x0()
scipy.sparse.linalg.tests.test_minres.test_minres_precond_non_default_x0()
scipy.sparse.linalg.tests.test_minres.test_shift()
scipy.sparse.linalg.tests.test_minres.test_singular()
scipy.sparse.linalg.tests.test_minres.test_x0_is_used_by()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_isolve/tests/test_lsqr.py----------------------------------------
A:scipy.sparse.linalg._isolve.tests.test_lsqr.G->numpy.eye(n)
A:scipy.sparse.linalg._isolve.tests.test_lsqr.gg->normal(size=n)
A:scipy.sparse.linalg._isolve.tests.test_lsqr.b->numpy.ones((10, 1))
A:scipy.sparse.linalg._isolve.tests.test_lsqr.b_copy->numpy.ones((10, 1)).copy()
A:scipy.sparse.linalg._isolve.tests.test_lsqr.(xo, *_)->lsqr(G, b, damp=damp, show=show, atol=tol, btol=tol, iter_lim=maxit)
A:scipy.sparse.linalg._isolve.tests.test_lsqr.svx->numpy.linalg.solve(G, b)
A:scipy.sparse.linalg._isolve.tests.test_lsqr.(svx, *_)->numpy.linalg.lstsq(Gext, bext, rcond=None)
A:scipy.sparse.linalg._isolve.tests.test_lsqr.row->numpy.array([0, 0])
A:scipy.sparse.linalg._isolve.tests.test_lsqr.col->numpy.array([0, 1])
A:scipy.sparse.linalg._isolve.tests.test_lsqr.val->numpy.array([1, -1])
A:scipy.sparse.linalg._isolve.tests.test_lsqr.A->numpy.eye(10)
A:scipy.sparse.linalg._isolve.tests.test_lsqr.A_sparse->scipy.sparse.eye(n, n)
A:scipy.sparse.linalg._isolve.tests.test_lsqr.A_dense->scipy.sparse.eye(n, n).toarray()
A:scipy.sparse.linalg._isolve.tests.test_lsqr.rng->numpy.random.RandomState(seed + 10)
A:scipy.sparse.linalg._isolve.tests.test_lsqr.beta->numpy.random.RandomState(seed + 10).rand(n)
A:scipy.sparse.linalg._isolve.tests.test_lsqr.output->lsqr(A_sparse, b, show=show)
A:scipy.sparse.linalg._isolve.tests.test_lsqr.reference_solution->numpy.linalg.solve(A_dense, b).ravel()
A:scipy.sparse.linalg._isolve.tests.test_lsqr.x_ref->lsqr(G, b, show=show, atol=tol, btol=tol, iter_lim=maxit)
A:scipy.sparse.linalg._isolve.tests.test_lsqr.x0->numpy.zeros(x_ref[0].shape)
A:scipy.sparse.linalg._isolve.tests.test_lsqr.x->lsqr(G, b, show=show, atol=tol, btol=tol, iter_lim=maxit, x0=x0)
A:scipy.sparse.linalg._isolve.tests.test_lsqr.tic->time()
A:scipy.sparse.linalg._isolve.tests.test_lsqr.X->lsqr(G, b, show=show, atol=tol, btol=tol, iter_lim=maxit)
A:scipy.sparse.linalg._isolve.tests.test_lsqr.mg->numpy.amax(G - G.T)
scipy.sparse.linalg._isolve.tests.test_lsqr.test_b_shapes()
scipy.sparse.linalg._isolve.tests.test_lsqr.test_gh_2466()
scipy.sparse.linalg._isolve.tests.test_lsqr.test_initialization()
scipy.sparse.linalg._isolve.tests.test_lsqr.test_lsqr_basic()
scipy.sparse.linalg._isolve.tests.test_lsqr.test_well_conditioned_problems()
scipy.sparse.linalg.tests.test_lsqr.test_b_shapes()
scipy.sparse.linalg.tests.test_lsqr.test_gh_2466()
scipy.sparse.linalg.tests.test_lsqr.test_initialization()
scipy.sparse.linalg.tests.test_lsqr.test_lsqr_basic()
scipy.sparse.linalg.tests.test_lsqr.test_well_conditioned_problems()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_isolve/tests/test_iterative.py----------------------------------------
A:scipy.sparse.linalg._isolve.tests.test_iterative.self.b->arange(A.shape[0], dtype=float)
A:scipy.sparse.linalg._isolve.tests.test_iterative.data->ones((2, 10))
A:scipy.sparse.linalg._isolve.tests.test_iterative.Poisson1D->spdiags(data, [0, -1, 1], N, N, format='csr')
A:scipy.sparse.linalg._isolve.tests.test_iterative.self.Poisson1D->Case('poisson1d', Poisson1D)
A:scipy.sparse.linalg._isolve.tests.test_iterative.Poisson2D->kronsum(Poisson1D, Poisson1D)
A:scipy.sparse.linalg._isolve.tests.test_iterative.self.Poisson2D->Case('poisson2d', Poisson2D)
A:scipy.sparse.linalg._isolve.tests.test_iterative.RandDiag->spdiags(data, [0], 10, 10, format='csr')
A:scipy.sparse.linalg._isolve.tests.test_iterative.A->numpy.random.rand(20, 20)
A:scipy.sparse.linalg._isolve.tests.test_iterative.b->numpy.random.rand(20)
A:scipy.sparse.linalg._isolve.tests.test_iterative.params->IterativeParams()
A:scipy.sparse.linalg._isolve.tests.test_iterative.(x, info)->gmres(A, b, tol=1e-06, atol=0, callback=x_cb, maxiter=20, restart=10, callback_type='x')
A:scipy.sparse.linalg._isolve.tests.test_iterative.residual->norm(a - b)
A:scipy.sparse.linalg._isolve.tests.test_iterative.diagOfA->numpy.random.rand(20, 20).diagonal()
A:scipy.sparse.linalg._isolve.tests.test_iterative.precond->LinearOperator(case.A.shape, inverse, rmatvec=rinverse)
A:scipy.sparse.linalg._isolve.tests.test_iterative.(y, info)->solver(op, b)
A:scipy.sparse.linalg._isolve.tests.test_iterative.op->LinearOperator((3, 3), matvec=matvec, rmatvec=matvec, dtype=b.dtype)
A:scipy.sparse.linalg._isolve.tests.test_iterative.b_norm->numpy.linalg.norm(b)
A:scipy.sparse.linalg._isolve.tests.test_iterative.M0->M0.dot(M0.T).dot(M0.T)
A:scipy.sparse.linalg._isolve.tests.test_iterative.M->numpy.eye(3)
A:scipy.sparse.linalg._isolve.tests.test_iterative.M2->LinearOperator((n, n), matvec=U_solve, rmatvec=UT_solve)
A:scipy.sparse.linalg._isolve.tests.test_iterative.err->numpy.linalg.norm(residual)
A:scipy.sparse.linalg._isolve.tests.test_iterative.v->numpy.ones(4)
A:scipy.sparse.linalg._isolve.tests.test_iterative.error->numpy.linalg.norm(A.dot(x) - v)
A:scipy.sparse.linalg._isolve.tests.test_iterative.best_error->min(best_error, error)
A:scipy.sparse.linalg._isolve.tests.test_iterative.x0->numpy.random.rand(n)
A:scipy.sparse.linalg._isolve.tests.test_iterative.kw->dict(atol=0, tol=1e-06)
A:scipy.sparse.linalg._isolve.tests.test_iterative.(out, err)->capsys.readouterr()
A:scipy.sparse.linalg._isolve.tests.test_iterative.dat->ones(n)
A:scipy.sparse.linalg._isolve.tests.test_iterative.L->spdiags([-dat / 2, dat], [-1, 0], n, n)
A:scipy.sparse.linalg._isolve.tests.test_iterative.U->spdiags([4 * dat, -dat], [0, 1], n, n)
A:scipy.sparse.linalg._isolve.tests.test_iterative.L_solver->splu(L)
A:scipy.sparse.linalg._isolve.tests.test_iterative.U_solver->splu(U)
A:scipy.sparse.linalg._isolve.tests.test_iterative.M1->LinearOperator((n, n), matvec=L_solve, rmatvec=LT_solve)
A:scipy.sparse.linalg._isolve.tests.test_iterative.(x_gm, err)->gmres(A, b, restart=5, maxiter=1)
A:scipy.sparse.linalg._isolve.tests.test_iterative.rvec->zeros(maxiter + 1)
A:scipy.sparse.linalg._isolve.tests.test_iterative.(x, flag)->gmres(A, b, M=M, tol=1e-16, maxiter=maxiter, callback=callback)
A:scipy.sparse.linalg._isolve.tests.test_iterative.(r_x, r_info)->gmres(A, b)
A:scipy.sparse.linalg._isolve.tests.test_iterative.r_x->r_x.astype(complex).astype(complex)
A:scipy.sparse.linalg._isolve.tests.test_iterative.rndm->numpy.random.RandomState(12345)
A:scipy.sparse.linalg._isolve.tests.test_iterative.x->numpy.array([1, 0, 0])
A:scipy.sparse.linalg._isolve.tests.test_iterative.r->numpy.linalg.norm(A.dot(x) - b)
scipy.sparse.linalg._isolve.tests.test_iterative.Case(self,name,A,b=None,skip=None,nonconvergence=None)
scipy.sparse.linalg._isolve.tests.test_iterative.Case.__init__(self,name,A,b=None,skip=None,nonconvergence=None)
scipy.sparse.linalg._isolve.tests.test_iterative.Case.__repr__(self)
scipy.sparse.linalg._isolve.tests.test_iterative.IterativeParams(self)
scipy.sparse.linalg._isolve.tests.test_iterative.IterativeParams.__init__(self)
scipy.sparse.linalg._isolve.tests.test_iterative.TestGMRES
scipy.sparse.linalg._isolve.tests.test_iterative.TestGMRES.test_abi(self)
scipy.sparse.linalg._isolve.tests.test_iterative.TestGMRES.test_atol_legacy(self)
scipy.sparse.linalg._isolve.tests.test_iterative.TestGMRES.test_basic(self)
scipy.sparse.linalg._isolve.tests.test_iterative.TestGMRES.test_callback(self)
scipy.sparse.linalg._isolve.tests.test_iterative.TestGMRES.test_callback_type(self)
scipy.sparse.linalg._isolve.tests.test_iterative.TestGMRES.test_callback_x_monotonic(self)
scipy.sparse.linalg._isolve.tests.test_iterative.TestGMRES.test_defective_matrix_breakdown(self)
scipy.sparse.linalg._isolve.tests.test_iterative.TestGMRES.test_defective_precond_breakdown(self)
scipy.sparse.linalg._isolve.tests.test_iterative.TestGMRES.test_restrt_dep(self)
scipy.sparse.linalg._isolve.tests.test_iterative.TestQMR
scipy.sparse.linalg._isolve.tests.test_iterative.TestQMR.test_leftright_precond(self)
scipy.sparse.linalg._isolve.tests.test_iterative._check_reentrancy(solver,is_reentrant)
scipy.sparse.linalg._isolve.tests.test_iterative.assert_normclose(a,b,tol=1e-08)
scipy.sparse.linalg._isolve.tests.test_iterative.check_convergence(solver,case)
scipy.sparse.linalg._isolve.tests.test_iterative.check_maxiter(solver,case)
scipy.sparse.linalg._isolve.tests.test_iterative.check_precond_dummy(solver,case)
scipy.sparse.linalg._isolve.tests.test_iterative.check_precond_inverse(solver,case)
scipy.sparse.linalg._isolve.tests.test_iterative.test_atol(solver)
scipy.sparse.linalg._isolve.tests.test_iterative.test_convergence()
scipy.sparse.linalg._isolve.tests.test_iterative.test_maxiter()
scipy.sparse.linalg._isolve.tests.test_iterative.test_maxiter_worsening(solver)
scipy.sparse.linalg._isolve.tests.test_iterative.test_precond_dummy()
scipy.sparse.linalg._isolve.tests.test_iterative.test_precond_inverse(case)
scipy.sparse.linalg._isolve.tests.test_iterative.test_reentrancy()
scipy.sparse.linalg._isolve.tests.test_iterative.test_show(solver,solverstring,capsys)
scipy.sparse.linalg._isolve.tests.test_iterative.test_x0_equals_Mb(solver)
scipy.sparse.linalg._isolve.tests.test_iterative.test_x0_working(solver)
scipy.sparse.linalg._isolve.tests.test_iterative.test_zero_rhs(solver)
scipy.sparse.linalg.tests.test_Case(self,name,A,b=None,skip=None,nonconvergence=None)
scipy.sparse.linalg.tests.test_Case.__repr__(self)
scipy.sparse.linalg.tests.test_IterativeParams(self)
scipy.sparse.linalg.tests.test_TestGMRES
scipy.sparse.linalg.tests.test_TestGMRES.test_abi(self)
scipy.sparse.linalg.tests.test_TestGMRES.test_atol_legacy(self)
scipy.sparse.linalg.tests.test_TestGMRES.test_basic(self)
scipy.sparse.linalg.tests.test_TestGMRES.test_callback(self)
scipy.sparse.linalg.tests.test_TestGMRES.test_callback_type(self)
scipy.sparse.linalg.tests.test_TestGMRES.test_callback_x_monotonic(self)
scipy.sparse.linalg.tests.test_TestGMRES.test_defective_matrix_breakdown(self)
scipy.sparse.linalg.tests.test_TestGMRES.test_defective_precond_breakdown(self)
scipy.sparse.linalg.tests.test_TestGMRES.test_restrt_dep(self)
scipy.sparse.linalg.tests.test_TestQMR
scipy.sparse.linalg.tests.test_TestQMR.test_leftright_precond(self)
scipy.sparse.linalg.tests.test__check_reentrancy(solver,is_reentrant)
scipy.sparse.linalg.tests.test_assert_normclose(a,b,tol=1e-08)
scipy.sparse.linalg.tests.test_check_convergence(solver,case)
scipy.sparse.linalg.tests.test_check_maxiter(solver,case)
scipy.sparse.linalg.tests.test_check_precond_dummy(solver,case)
scipy.sparse.linalg.tests.test_check_precond_inverse(solver,case)
scipy.sparse.linalg.tests.test_test_atol(solver)
scipy.sparse.linalg.tests.test_test_convergence()
scipy.sparse.linalg.tests.test_test_maxiter()
scipy.sparse.linalg.tests.test_test_maxiter_worsening(solver)
scipy.sparse.linalg.tests.test_test_precond_dummy()
scipy.sparse.linalg.tests.test_test_precond_inverse(case)
scipy.sparse.linalg.tests.test_test_reentrancy()
scipy.sparse.linalg.tests.test_test_show(solver,solverstring,capsys)
scipy.sparse.linalg.tests.test_test_x0_equals_Mb(solver)
scipy.sparse.linalg.tests.test_test_x0_working(solver)
scipy.sparse.linalg.tests.test_test_zero_rhs(solver)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_isolve/tests/test_utils.py----------------------------------------
scipy.sparse.linalg._isolve.tests.test_utils.test_make_system_bad_shape()
scipy.sparse.linalg.tests.test_utils.test_make_system_bad_shape()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_isolve/tests/test_lgmres.py----------------------------------------
A:scipy.sparse.linalg._isolve.tests.test_lgmres.Am->csr_matrix(array([[-2, 1, 0, 0, 0, 9], [1, -2, 1, 0, 5, 0], [0, 1, -2, 1, 0, 0], [0, 0, 1, -2, 1, 0], [0, 3, 0, 1, -2, 1], [1, 0, 0, 0, 1, -2]]))
A:scipy.sparse.linalg._isolve.tests.test_lgmres.b->numpy.array([1, 1])
A:scipy.sparse.linalg._isolve.tests.test_lgmres.A->numpy.array([[1, 2], [3, 4]], dtype=float)
A:scipy.sparse.linalg._isolve.tests.test_lgmres.(x0, flag)->lgmres(A, b, x0=zeros(A.shape[0]), inner_m=6, tol=1e-14, **kw)
A:scipy.sparse.linalg._isolve.tests.test_lgmres.pc->splu(Am.tocsc())
A:scipy.sparse.linalg._isolve.tests.test_lgmres.M->LinearOperator(matvec=pc.solve, shape=A.shape, dtype=A.dtype)
A:scipy.sparse.linalg._isolve.tests.test_lgmres.(x0, count_0)->do_solve(outer_k=6, outer_v=outer_v, store_outer_Av=False)
A:scipy.sparse.linalg._isolve.tests.test_lgmres.(x1, count_1)->do_solve(outer_k=6, outer_v=outer_v, prepend_outer_v=True)
A:scipy.sparse.linalg._isolve.tests.test_lgmres.(x0, flag0)->lgmres(A, b, x0=zeros(A.shape[0]), inner_m=15, maxiter=1)
A:scipy.sparse.linalg._isolve.tests.test_lgmres.(x1, flag1)->gmres(A, b, x0=zeros(A.shape[0]), restart=15, maxiter=1)
A:scipy.sparse.linalg._isolve.tests.test_lgmres.norm->numpy.linalg.norm(A.dot(x0) - b)
A:scipy.sparse.linalg._isolve.tests.test_lgmres.(x, info)->lgmres(A, b, tol=0, maxiter=10)
A:scipy.sparse.linalg._isolve.tests.test_lgmres.x->K.dot(y)
A:scipy.sparse.linalg._isolve.tests.test_lgmres.v0->numpy.array([1, 0])
A:scipy.sparse.linalg._isolve.tests.test_lgmres.(xp, info)->lgmres(A, b)
A:scipy.sparse.linalg._isolve.tests.test_lgmres.resp->numpy.linalg.norm(A.dot(xp) - b)
A:scipy.sparse.linalg._isolve.tests.test_lgmres.(y, _, _, _)->numpy.linalg.lstsq(A.dot(K), b, rcond=-1)
A:scipy.sparse.linalg._isolve.tests.test_lgmres.res->numpy.linalg.norm(A.dot(x) - b)
scipy.sparse.linalg._isolve.tests.test_lgmres.TestLGMRES
scipy.sparse.linalg._isolve.tests.test_lgmres.TestLGMRES.test_arnoldi(self)
scipy.sparse.linalg._isolve.tests.test_lgmres.TestLGMRES.test_breakdown_underdetermined(self)
scipy.sparse.linalg._isolve.tests.test_lgmres.TestLGMRES.test_breakdown_with_outer_v(self)
scipy.sparse.linalg._isolve.tests.test_lgmres.TestLGMRES.test_cornercase(self)
scipy.sparse.linalg._isolve.tests.test_lgmres.TestLGMRES.test_denormals(self)
scipy.sparse.linalg._isolve.tests.test_lgmres.TestLGMRES.test_nans(self)
scipy.sparse.linalg._isolve.tests.test_lgmres.TestLGMRES.test_outer_v(self)
scipy.sparse.linalg._isolve.tests.test_lgmres.TestLGMRES.test_preconditioner(self)
scipy.sparse.linalg._isolve.tests.test_lgmres.do_solve(**kw)
scipy.sparse.linalg._isolve.tests.test_lgmres.matvec(v)
scipy.sparse.linalg.tests.test_lgmres.TestLGMRES
scipy.sparse.linalg.tests.test_lgmres.TestLGMRES.test_arnoldi(self)
scipy.sparse.linalg.tests.test_lgmres.TestLGMRES.test_breakdown_underdetermined(self)
scipy.sparse.linalg.tests.test_lgmres.TestLGMRES.test_breakdown_with_outer_v(self)
scipy.sparse.linalg.tests.test_lgmres.TestLGMRES.test_cornercase(self)
scipy.sparse.linalg.tests.test_lgmres.TestLGMRES.test_denormals(self)
scipy.sparse.linalg.tests.test_lgmres.TestLGMRES.test_nans(self)
scipy.sparse.linalg.tests.test_lgmres.TestLGMRES.test_outer_v(self)
scipy.sparse.linalg.tests.test_lgmres.TestLGMRES.test_preconditioner(self)
scipy.sparse.linalg.tests.test_lgmres.do_solve(**kw)
scipy.sparse.linalg.tests.test_lgmres.matvec(v)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_isolve/tests/test_lsmr.py----------------------------------------
A:scipy.sparse.linalg._isolve.tests.test_lsmr.Afun->aslinearoperator(A)
A:scipy.sparse.linalg._isolve.tests.test_lsmr.b->aslinearoperator(A).matvec(xtrue)
A:scipy.sparse.linalg._isolve.tests.test_lsmr.A->lowerBidiagonalMatrix(m, n)
A:scipy.sparse.linalg._isolve.tests.test_lsmr.xtrue->arange(n, 0, -1, dtype=float)
A:scipy.sparse.linalg._isolve.tests.test_lsmr.x0->zeros(b.shape)
A:scipy.sparse.linalg._isolve.tests.test_lsmr.(x_ref, _, itn_ref, normr_ref, *_)->lsmr(G, b)
A:scipy.sparse.linalg._isolve.tests.test_lsmr.(x, _, itn, normr, *_)->lsmr(G, b, x0=x0)
A:scipy.sparse.linalg._isolve.tests.test_lsmr.self.A->lowerBidiagonalMatrix(20, self.n)
A:scipy.sparse.linalg._isolve.tests.test_lsmr.self.xtrue->transpose(arange(self.n, 0, -1))
A:scipy.sparse.linalg._isolve.tests.test_lsmr.self.Afun->aslinearoperator(self.A)
A:scipy.sparse.linalg._isolve.tests.test_lsmr.self.b->self.Afun.matvec(self.xtrue)
A:scipy.sparse.linalg._isolve.tests.test_lsmr.self.x0->ones(self.n)
A:scipy.sparse.linalg._isolve.tests.test_lsmr.self.x00->self.x0.copy()
A:scipy.sparse.linalg._isolve.tests.test_lsmr.self.returnValues->lsmr(self.A, self.b)
A:scipy.sparse.linalg._isolve.tests.test_lsmr.self.returnValuesX0->lsmr(self.A, self.b, x0=self.x0)
A:scipy.sparse.linalg._isolve.tests.test_lsmr.row->hstack((arange(n, dtype=int), arange(1, n + 1, dtype=int)))
A:scipy.sparse.linalg._isolve.tests.test_lsmr.col->hstack((arange(n, dtype=int), arange(n, dtype=int)))
A:scipy.sparse.linalg._isolve.tests.test_lsmr.data->hstack((arange(1, n + 1, dtype=float), arange(1, n + 1, dtype=float)))
A:scipy.sparse.linalg._isolve.tests.test_lsmr.(x, istop, itn, normr, normar, norma, conda, normx)->lsmr(A, b, damp, atol, btol, conlim, itnlim, show)
A:scipy.sparse.linalg._isolve.tests.test_lsmr.j1->min(n, 5)
A:scipy.sparse.linalg._isolve.tests.test_lsmr.j2->max(n - 4, 1)
A:scipy.sparse.linalg._isolve.tests.test_lsmr.r2->sqrt(norm(r) ** 2 + (damp * norm(x)) ** 2)
scipy.sparse.linalg._isolve.tests.test_lsmr.TestLSMR
scipy.sparse.linalg._isolve.tests.test_lsmr.TestLSMR.assertCompatibleSystem(self,A,xtrue)
scipy.sparse.linalg._isolve.tests.test_lsmr.TestLSMR.setup_method(self)
scipy.sparse.linalg._isolve.tests.test_lsmr.TestLSMR.testBidiagonalA(self)
scipy.sparse.linalg._isolve.tests.test_lsmr.TestLSMR.testColumnB(self)
scipy.sparse.linalg._isolve.tests.test_lsmr.TestLSMR.testComplexA(self)
scipy.sparse.linalg._isolve.tests.test_lsmr.TestLSMR.testComplexB(self)
scipy.sparse.linalg._isolve.tests.test_lsmr.TestLSMR.testComplexX(self)
scipy.sparse.linalg._isolve.tests.test_lsmr.TestLSMR.testComplexX0(self)
scipy.sparse.linalg._isolve.tests.test_lsmr.TestLSMR.testIdentityACase1(self)
scipy.sparse.linalg._isolve.tests.test_lsmr.TestLSMR.testIdentityACase2(self)
scipy.sparse.linalg._isolve.tests.test_lsmr.TestLSMR.testIdentityACase3(self)
scipy.sparse.linalg._isolve.tests.test_lsmr.TestLSMR.testInitialization(self)
scipy.sparse.linalg._isolve.tests.test_lsmr.TestLSMR.testScalarB(self)
scipy.sparse.linalg._isolve.tests.test_lsmr.TestLSMRReturns
scipy.sparse.linalg._isolve.tests.test_lsmr.TestLSMRReturns.setup_method(self)
scipy.sparse.linalg._isolve.tests.test_lsmr.TestLSMRReturns.testNormar(self)
scipy.sparse.linalg._isolve.tests.test_lsmr.TestLSMRReturns.testNormr(self)
scipy.sparse.linalg._isolve.tests.test_lsmr.TestLSMRReturns.testNormx(self)
scipy.sparse.linalg._isolve.tests.test_lsmr.TestLSMRReturns.test_unchanged_x0(self)
scipy.sparse.linalg._isolve.tests.test_lsmr.lowerBidiagonalMatrix(m,n)
scipy.sparse.linalg._isolve.tests.test_lsmr.lsmrtest(m,n,damp)
scipy.sparse.linalg.tests.test_lsmr.TestLSMR
scipy.sparse.linalg.tests.test_lsmr.TestLSMR.assertCompatibleSystem(self,A,xtrue)
scipy.sparse.linalg.tests.test_lsmr.TestLSMR.setup_method(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMR.testBidiagonalA(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMR.testColumnB(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMR.testComplexA(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMR.testComplexB(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMR.testComplexX(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMR.testComplexX0(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMR.testIdentityACase1(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMR.testIdentityACase2(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMR.testIdentityACase3(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMR.testInitialization(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMR.testScalarB(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMRReturns
scipy.sparse.linalg.tests.test_lsmr.TestLSMRReturns.setup_method(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMRReturns.testNormar(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMRReturns.testNormr(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMRReturns.testNormx(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMRReturns.test_unchanged_x0(self)
scipy.sparse.linalg.tests.test_lsmr.lowerBidiagonalMatrix(m,n)
scipy.sparse.linalg.tests.test_lsmrtest(m,n,damp)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_isolve/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/tests/test_interface.py----------------------------------------
A:scipy.sparse.linalg.tests.test_interface.self.A->numpy.array([[1, 2, 3], [4, 5, 6]])
A:scipy.sparse.linalg.tests.test_interface.self.B->numpy.array([[1, 2], [3, 4], [5, 6]])
A:scipy.sparse.linalg.tests.test_interface.self.C->numpy.array([[1, 2], [3, 4]])
A:scipy.sparse.linalg.tests.test_interface.A->scipy.sparse.linalg._interface.aslinearoperator(X)
A:scipy.sparse.linalg.tests.test_interface.X->numpy.array([[1j]])
A:scipy.sparse.linalg.tests.test_interface.B->pickle.loads(s)
A:scipy.sparse.linalg.tests.test_interface.AtimesB->self.A.dot(self.B)
A:scipy.sparse.linalg.tests.test_interface.C->scipy.sparse.linalg._interface.LinearOperator(**matvecsC)
A:scipy.sparse.linalg.tests.test_interface.y->y.reshape(-1, 1).reshape(-1, 1)
A:scipy.sparse.linalg.tests.test_interface.self.dtype->numpy.dtype(dtype)
A:scipy.sparse.linalg.tests.test_interface.matvec->partial(rmv, dtype=self.dtype)
A:scipy.sparse.linalg.tests.test_interface.rmatvec->partial(mv, dtype=self.dtype)
A:scipy.sparse.linalg.tests.test_interface.original->numpy.array([[1, 2j, 3j], [4j, 5j, 6]])
A:scipy.sparse.linalg.tests.test_interface.x2->numpy.array([[1, 4], [2, 5], [3, 6]])
A:scipy.sparse.linalg.tests.test_interface.x0->numpy.array([1, 2, 3])
A:scipy.sparse.linalg.tests.test_interface.x1->numpy.array([[1], [2], [3]])
A:scipy.sparse.linalg.tests.test_interface.repr_A->repr(A)
A:scipy.sparse.linalg.tests.test_interface.ident->scipy.sparse.linalg._interface.IdentityOperator((3, 3))
A:scipy.sparse.linalg.tests.test_interface.x->numpy.asarray(x)
A:scipy.sparse.linalg.tests.test_interface.s->pickle.dumps(A, protocol=protocol)
A:scipy.sparse.linalg.tests.test_interface.id3->Identity(3)
A:scipy.sparse.linalg.tests.test_interface.mm->MatmatOnly(np.random.randn(5, 3))
A:scipy.sparse.linalg.tests.test_interface.mat_real->numpy.random.rand(2, 2)
A:scipy.sparse.linalg.tests.test_interface.complex_operator->scipy.sparse.linalg._interface.aslinearoperator(mat_complex)
A:scipy.sparse.linalg.tests.test_interface.real_operator->scipy.sparse.linalg._interface.aslinearoperator(mat_real)
A:scipy.sparse.linalg.tests.test_interface.v->numpy.array([1])
scipy.sparse.linalg.tests.testTestAsLinearOperator
scipy.sparse.linalg.tests.testTestAsLinearOperator.setup_method(self)
scipy.sparse.linalg.tests.testTestAsLinearOperator.test_basic(self)
scipy.sparse.linalg.tests.testTestAsLinearOperator.test_dot(self)
scipy.sparse.linalg.tests.testTestLinearOperator
scipy.sparse.linalg.tests.testTestLinearOperator.setup_method(self)
scipy.sparse.linalg.tests.testTestLinearOperator.test_matmul(self)
scipy.sparse.linalg.tests.testTestLinearOperator.test_matvec(self)
scipy.sparse.linalg.tests.test_interface.TestAsLinearOperator
scipy.sparse.linalg.tests.test_interface.TestAsLinearOperator.setup_method(self)
scipy.sparse.linalg.tests.test_interface.TestAsLinearOperator.test_basic(self)
scipy.sparse.linalg.tests.test_interface.TestAsLinearOperator.test_dot(self)
scipy.sparse.linalg.tests.test_interface.TestLinearOperator
scipy.sparse.linalg.tests.test_interface.TestLinearOperator.setup_method(self)
scipy.sparse.linalg.tests.test_interface.TestLinearOperator.test_matmul(self)
scipy.sparse.linalg.tests.test_interface.TestLinearOperator.test_matvec(self)
scipy.sparse.linalg.tests.test_interface.matvec(x)
scipy.sparse.linalg.tests.test_interface.test_adjoint_conjugate()
scipy.sparse.linalg.tests.test_interface.test_attributes()
scipy.sparse.linalg.tests.test_interface.test_dtypes_of_operator_sum()
scipy.sparse.linalg.tests.test_interface.test_identity()
scipy.sparse.linalg.tests.test_interface.test_inheritance()
scipy.sparse.linalg.tests.test_interface.test_ndim()
scipy.sparse.linalg.tests.test_interface.test_no_double_init()
scipy.sparse.linalg.tests.test_interface.test_pickle()
scipy.sparse.linalg.tests.test_interface.test_repr()
scipy.sparse.linalg.tests.test_interface.test_transpose_noconjugate()
scipy.sparse.linalg.tests.testmatvec(x)
scipy.sparse.linalg.tests.testtest_adjoint_conjugate()
scipy.sparse.linalg.tests.testtest_attributes()
scipy.sparse.linalg.tests.testtest_dtypes_of_operator_sum()
scipy.sparse.linalg.tests.testtest_identity()
scipy.sparse.linalg.tests.testtest_inheritance()
scipy.sparse.linalg.tests.testtest_ndim()
scipy.sparse.linalg.tests.testtest_no_double_init()
scipy.sparse.linalg.tests.testtest_pickle()
scipy.sparse.linalg.tests.testtest_repr()
scipy.sparse.linalg.tests.testtest_transpose_noconjugate()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/tests/test_expm_multiply.py----------------------------------------
A:scipy.sparse.linalg.tests.test_expm_multiply.DTYPES->tuple(sorted(REAL_DTYPES ^ COMPLEX_DTYPES, key=str))
A:scipy.sparse.linalg.tests.test_expm_multiply.pairs->sorted(_theta.items())
A:scipy.sparse.linalg.tests.test_expm_multiply.observed_p_max->_compute_p_max(m_max)
A:scipy.sparse.linalg.tests.test_expm_multiply.p_max->_compute_p_max(m_max)
A:scipy.sparse.linalg.tests.test_expm_multiply.A->scipy.linalg.inv(rng.random([n, n]) + 1j * rng.random([n, n])).astype(dtype_a)
A:scipy.sparse.linalg.tests.test_expm_multiply.M->numpy.dot(M, A)
A:scipy.sparse.linalg.tests.test_expm_multiply.estimated->_onenormest_matrix_power(A, p)
A:scipy.sparse.linalg.tests.test_expm_multiply.exact->numpy.linalg.norm(M, 1)
A:scipy.sparse.linalg.tests.test_expm_multiply.B->(rng.random(b_shape) + 1j * rng.random(b_shape)).astype(dtype_b)
A:scipy.sparse.linalg.tests.test_expm_multiply.observed->estimated(expm_multiply)(aslinearoperator(A), B)
A:scipy.sparse.linalg.tests.test_expm_multiply.expected->numpy.array([1j * np.exp(1j) + 1j * (1j * np.cos(1) - np.sin(1)), 1j * np.exp(1j)], dtype=complex)
A:scipy.sparse.linalg.tests.test_expm_multiply.traceA->numpy.trace(A)
A:scipy.sparse.linalg.tests.test_expm_multiply.v->numpy.random.randn(n)
A:scipy.sparse.linalg.tests.test_expm_multiply.X->estimated(expm_multiply)(aslinearoperator(A), B, num=num, **interval)
A:scipy.sparse.linalg.tests.test_expm_multiply.samples->numpy.linspace(**interval)
A:scipy.sparse.linalg.tests.test_expm_multiply.Xguess->estimated(expm_multiply)(aslinearoperator(A), v, num=num, **interval)
A:scipy.sparse.linalg.tests.test_expm_multiply.Xgiven->expm_multiply(aslinearoperator(A), v, num=num, **interval, traceA=np.trace(A))
A:scipy.sparse.linalg.tests.test_expm_multiply.Xwrong->expm_multiply(aslinearoperator(A), v, num=num, **interval, traceA=np.trace(A) * 5)
A:scipy.sparse.linalg.tests.test_expm_multiply.correct->sp_expm(t * A).dot(v)
A:scipy.sparse.linalg.tests.test_expm_multiply.Aexpm->scipy.sparse.diags(np.exp(np.arange(5)), format='csr')
A:scipy.sparse.linalg.tests.test_expm_multiply.status->_expm_multiply_interval(A, B, start=start, stop=stop, num=num, endpoint=endpoint, status_only=True)
A:scipy.sparse.linalg.tests.test_expm_multiply.(X, status)->_expm_multiply_interval(A, B, start=start, stop=stop, num=num, endpoint=endpoint, status_only=False)
A:scipy.sparse.linalg.tests.test_expm_multiply.rng->numpy.random.default_rng(1234)
A:scipy.sparse.linalg.tests.test_expm_multiply.sol_mat->expm_multiply(A, B)
A:scipy.sparse.linalg.tests.test_expm_multiply.sol_op->expm_multiply(aslinearoperator(A), B, traceA=np.trace(A))
A:scipy.sparse.linalg.tests.test_expm_multiply.direct_sol->sp_expm(t * A).dot(B)
A:scipy.sparse.linalg.tests.test_expm_multiply.X_mat->expm_multiply(A, B, **interval)
A:scipy.sparse.linalg.tests.test_expm_multiply.X_op->estimated(expm_multiply)(aslinearoperator(A), B, **interval)
scipy.sparse.linalg.tests.testTestExpmActionInterval
scipy.sparse.linalg.tests.testTestExpmActionInterval._help_test_specific_expm_interval_status(self,target_status)
scipy.sparse.linalg.tests.testTestExpmActionInterval.test_expm_multiply_interval_matrix(self)
scipy.sparse.linalg.tests.testTestExpmActionInterval.test_expm_multiply_interval_status_0(self)
scipy.sparse.linalg.tests.testTestExpmActionInterval.test_expm_multiply_interval_status_1(self)
scipy.sparse.linalg.tests.testTestExpmActionInterval.test_expm_multiply_interval_status_2(self)
scipy.sparse.linalg.tests.testTestExpmActionInterval.test_expm_multiply_interval_vector(self)
scipy.sparse.linalg.tests.testTestExpmActionInterval.test_sparse_expm_multiply_interval(self)
scipy.sparse.linalg.tests.testTestExpmActionInterval.test_sparse_expm_multiply_interval_dtypes(self)
scipy.sparse.linalg.tests.testTestExpmActionSimple
scipy.sparse.linalg.tests.testTestExpmActionSimple.test_complex(self)
scipy.sparse.linalg.tests.testTestExpmActionSimple.test_expm_multiply(self)
scipy.sparse.linalg.tests.testTestExpmActionSimple.test_matrix_vector_multiply(self)
scipy.sparse.linalg.tests.testTestExpmActionSimple.test_onenormest_matrix_power(self)
scipy.sparse.linalg.tests.testTestExpmActionSimple.test_p_max_default(self)
scipy.sparse.linalg.tests.testTestExpmActionSimple.test_p_max_range(self)
scipy.sparse.linalg.tests.testTestExpmActionSimple.test_scaled_expm_multiply(self)
scipy.sparse.linalg.tests.testTestExpmActionSimple.test_scaled_expm_multiply_single_timepoint(self)
scipy.sparse.linalg.tests.testTestExpmActionSimple.test_sparse_expm_multiply(self)
scipy.sparse.linalg.tests.testTestExpmActionSimple.test_theta_monotonicity(self)
scipy.sparse.linalg.tests.test_expm_multiply.TestExpmActionInterval
scipy.sparse.linalg.tests.test_expm_multiply.TestExpmActionInterval._help_test_specific_expm_interval_status(self,target_status)
scipy.sparse.linalg.tests.test_expm_multiply.TestExpmActionInterval.test_expm_multiply_interval_matrix(self)
scipy.sparse.linalg.tests.test_expm_multiply.TestExpmActionInterval.test_expm_multiply_interval_status_0(self)
scipy.sparse.linalg.tests.test_expm_multiply.TestExpmActionInterval.test_expm_multiply_interval_status_1(self)
scipy.sparse.linalg.tests.test_expm_multiply.TestExpmActionInterval.test_expm_multiply_interval_status_2(self)
scipy.sparse.linalg.tests.test_expm_multiply.TestExpmActionInterval.test_expm_multiply_interval_vector(self)
scipy.sparse.linalg.tests.test_expm_multiply.TestExpmActionInterval.test_sparse_expm_multiply_interval(self)
scipy.sparse.linalg.tests.test_expm_multiply.TestExpmActionInterval.test_sparse_expm_multiply_interval_dtypes(self)
scipy.sparse.linalg.tests.test_expm_multiply.TestExpmActionSimple
scipy.sparse.linalg.tests.test_expm_multiply.TestExpmActionSimple.test_complex(self)
scipy.sparse.linalg.tests.test_expm_multiply.TestExpmActionSimple.test_expm_multiply(self)
scipy.sparse.linalg.tests.test_expm_multiply.TestExpmActionSimple.test_matrix_vector_multiply(self)
scipy.sparse.linalg.tests.test_expm_multiply.TestExpmActionSimple.test_onenormest_matrix_power(self)
scipy.sparse.linalg.tests.test_expm_multiply.TestExpmActionSimple.test_p_max_default(self)
scipy.sparse.linalg.tests.test_expm_multiply.TestExpmActionSimple.test_p_max_range(self)
scipy.sparse.linalg.tests.test_expm_multiply.TestExpmActionSimple.test_scaled_expm_multiply(self)
scipy.sparse.linalg.tests.test_expm_multiply.TestExpmActionSimple.test_scaled_expm_multiply_single_timepoint(self)
scipy.sparse.linalg.tests.test_expm_multiply.TestExpmActionSimple.test_sparse_expm_multiply(self)
scipy.sparse.linalg.tests.test_expm_multiply.TestExpmActionSimple.test_theta_monotonicity(self)
scipy.sparse.linalg.tests.test_expm_multiply.estimated(func)
scipy.sparse.linalg.tests.test_expm_multiply.less_than_or_close(a,b)
scipy.sparse.linalg.tests.test_expm_multiply.test_expm_multiply_dtype(dtype_a,dtype_b,b_is_matrix)
scipy.sparse.linalg.tests.testestimated(func)
scipy.sparse.linalg.tests.testless_than_or_close(a,b)
scipy.sparse.linalg.tests.testtest_expm_multiply_dtype(dtype_a,dtype_b,b_is_matrix)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/tests/test_matfuncs.py----------------------------------------
A:scipy.sparse.linalg.tests.test_matfuncs.n->int(n)
A:scipy.sparse.linalg.tests.test_matfuncs.p->int(p)
A:scipy.sparse.linalg.tests.test_matfuncs.(a, b)->divmod(p, n)
A:scipy.sparse.linalg.tests.test_matfuncs.large->numpy.power(10.0, -n * a)
A:scipy.sparse.linalg.tests.test_matfuncs.M->numpy.random.random((n, n))
A:scipy.sparse.linalg.tests.test_matfuncs.Mp->numpy.linalg.matrix_power(M, p)
A:scipy.sparse.linalg.tests.test_matfuncs.observed->expm(A)
A:scipy.sparse.linalg.tests.test_matfuncs.expected->numpy.array([[e1, 3 * e1, 15 * (e2 - 2 * e1)], [0, e1, 5 * (e2 - e1)], [0, 0, e2]], dtype=float)
A:scipy.sparse.linalg.tests.test_matfuncs.a->matrix([[0.0, 0], [0, 0]])
A:scipy.sparse.linalg.tests.test_matfuncs.A->numpy.random.randn(n, n)
A:scipy.sparse.linalg.tests.test_matfuncs.B->numpy.random.randn(n, k)
A:scipy.sparse.linalg.tests.test_matfuncs.e1->math.exp(1)
A:scipy.sparse.linalg.tests.test_matfuncs.e2->math.exp(2)
A:scipy.sparse.linalg.tests.test_matfuncs.exact_onenorm->_expm(a, use_exact_onenorm=True).toarray()
A:scipy.sparse.linalg.tests.test_matfuncs.inexact_onenorm->_expm(a, use_exact_onenorm=False).toarray()
A:scipy.sparse.linalg.tests.test_matfuncs.Q->csc_matrix(Q)
A:scipy.sparse.linalg.tests.test_matfuncs.A_logm->numpy.array([[-1.1286798202905046, 96141.83771420256, -4524855739.531793, 292496941103871.8], [0.0, -1.2010105295308229, 96346.96872113031, -4681048289.111054], [0.0, 0.0, -1.132893222644984, 95324.91830947757], [0.0, 0.0, 0.0, -1.1794753327255485]], dtype=float)
A:scipy.sparse.linalg.tests.test_matfuncs.A_logm_perturbed->numpy.array([[-1.1286798202905046, 96141.83771420256, -4524855739.531793, 292496941103871.8], [0.0, -1.2010105295308229, 96346.96872113031, -4681048289.111054], [0.0, 0.0, -1.132893222644984, 95324.91830947757], [0.0, 0.0, 0.0, -1.1794753327255485]], dtype=float).copy()
A:scipy.sparse.linalg.tests.test_matfuncs.A_expm_logm_perturbed->expm(A_logm_perturbed)
A:scipy.sparse.linalg.tests.test_matfuncs.exp1->numpy.exp(1)
A:scipy.sparse.linalg.tests.test_matfuncs.exp2->numpy.exp(2)
A:scipy.sparse.linalg.tests.test_matfuncs.desired->numpy.array([[0.446849468283175, 1.54044157383952e-09, 0.462811453558774], [-5743067.77947947, -0.0152830038686819, -4526542.71278401], [0.447722977849494, 1.54270484519591e-09, 0.463480648837651]], dtype=float)
A:scipy.sparse.linalg.tests.test_matfuncs.actual->expm(A)
A:scipy.sparse.linalg.tests.test_matfuncs.exp39->numpy.exp(39)
A:scipy.sparse.linalg.tests.test_matfuncs.U->numpy.array([[3, 1], [4, 2]], dtype=float)
A:scipy.sparse.linalg.tests.test_matfuncs.V->numpy.array([[1, -1 / 2], [-2, 3 / 2]], dtype=float)
A:scipy.sparse.linalg.tests.test_matfuncs.w->numpy.array([-17, -1], dtype=float)
A:scipy.sparse.linalg.tests.test_matfuncs.eps->numpy.spacing(1)
A:scipy.sparse.linalg.tests.test_matfuncs.exp4->numpy.exp(4)
A:scipy.sparse.linalg.tests.test_matfuncs.exp16->numpy.exp(16)
A:scipy.sparse.linalg.tests.test_matfuncs.A4_actual->_burkardt_13_power(4, 1)
A:scipy.sparse.linalg.tests.test_matfuncs.k->max(1, int(np.ceil(16 / n)))
A:scipy.sparse.linalg.tests.test_matfuncs.Ap->_burkardt_13_power(n, p)
A:scipy.sparse.linalg.tests.test_matfuncs.B0->expm(A)
A:scipy.sparse.linalg.tests.test_matfuncs.L->numpy.array([[1.0, -0.5, -0.5, 0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, -0.5, -0.5, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, -0.5, -0.5], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]])
A:scipy.sparse.linalg.tests.test_matfuncs.E0->expm(-L)
A:scipy.sparse.linalg.tests.test_matfuncs.E1->expm(-2 ** 11 * L)
A:scipy.sparse.linalg.tests.test_matfuncs.C->numpy.random.randn(n, n)
A:scipy.sparse.linalg.tests.test_matfuncs.D->numpy.random.randn(n, k)
A:scipy.sparse.linalg.tests.test_matfuncs.op->MatrixPowerOperator(A, p)
scipy.sparse.linalg.tests.testTestExpM
scipy.sparse.linalg.tests.testTestExpM.test_bidiagonal_sparse(self)
scipy.sparse.linalg.tests.testTestExpM.test_burkardt_1(self)
scipy.sparse.linalg.tests.testTestExpM.test_burkardt_10(self)
scipy.sparse.linalg.tests.testTestExpM.test_burkardt_11(self)
scipy.sparse.linalg.tests.testTestExpM.test_burkardt_12(self)
scipy.sparse.linalg.tests.testTestExpM.test_burkardt_13(self)
scipy.sparse.linalg.tests.testTestExpM.test_burkardt_14(self)
scipy.sparse.linalg.tests.testTestExpM.test_burkardt_2(self)
scipy.sparse.linalg.tests.testTestExpM.test_burkardt_3(self)
scipy.sparse.linalg.tests.testTestExpM.test_burkardt_4(self)
scipy.sparse.linalg.tests.testTestExpM.test_burkardt_5(self)
scipy.sparse.linalg.tests.testTestExpM.test_burkardt_6(self)
scipy.sparse.linalg.tests.testTestExpM.test_burkardt_7(self)
scipy.sparse.linalg.tests.testTestExpM.test_burkardt_8(self)
scipy.sparse.linalg.tests.testTestExpM.test_burkardt_9(self)
scipy.sparse.linalg.tests.testTestExpM.test_exp_sinch_overflow(self)
scipy.sparse.linalg.tests.testTestExpM.test_integer_matrix(self)
scipy.sparse.linalg.tests.testTestExpM.test_integer_matrix_2(self)
scipy.sparse.linalg.tests.testTestExpM.test_logm_consistency(self)
scipy.sparse.linalg.tests.testTestExpM.test_matrix_input(self)
scipy.sparse.linalg.tests.testTestExpM.test_misc_types(self)
scipy.sparse.linalg.tests.testTestExpM.test_padecases_dtype_complex(self)
scipy.sparse.linalg.tests.testTestExpM.test_padecases_dtype_float(self)
scipy.sparse.linalg.tests.testTestExpM.test_padecases_dtype_sparse_complex(self)
scipy.sparse.linalg.tests.testTestExpM.test_padecases_dtype_sparse_float(self)
scipy.sparse.linalg.tests.testTestExpM.test_pascal(self)
scipy.sparse.linalg.tests.testTestExpM.test_triangularity_perturbation(self)
scipy.sparse.linalg.tests.testTestExpM.test_zero_matrix(self)
scipy.sparse.linalg.tests.testTestExpM.test_zero_ndarray(self)
scipy.sparse.linalg.tests.testTestExpM.test_zero_sparse(self)
scipy.sparse.linalg.tests.testTestOperators
scipy.sparse.linalg.tests.testTestOperators.test_matrix_power_operator(self)
scipy.sparse.linalg.tests.testTestOperators.test_product_operator(self)
scipy.sparse.linalg.tests.test_burkardt_13_power(n,p)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_bidiagonal_sparse(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_burkardt_1(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_burkardt_10(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_burkardt_11(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_burkardt_12(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_burkardt_13(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_burkardt_14(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_burkardt_2(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_burkardt_3(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_burkardt_4(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_burkardt_5(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_burkardt_6(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_burkardt_7(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_burkardt_8(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_burkardt_9(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_exp_sinch_overflow(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_integer_matrix(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_integer_matrix_2(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_logm_consistency(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_matrix_input(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_misc_types(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_padecases_dtype_complex(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_padecases_dtype_float(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_padecases_dtype_sparse_complex(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_padecases_dtype_sparse_float(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_pascal(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_triangularity_perturbation(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_zero_matrix(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_zero_ndarray(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_zero_sparse(self)
scipy.sparse.linalg.tests.test_matfuncs.TestOperators
scipy.sparse.linalg.tests.test_matfuncs.TestOperators.test_matrix_power_operator(self)
scipy.sparse.linalg.tests.test_matfuncs.TestOperators.test_product_operator(self)
scipy.sparse.linalg.tests.test_matfuncs._burkardt_13_power(n,p)
scipy.sparse.linalg.tests.test_matfuncs.test_onenorm_matrix_power_nnm()
scipy.sparse.linalg.tests.testtest_onenorm_matrix_power_nnm()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/tests/test_onenormest.py----------------------------------------
A:scipy.sparse.linalg.tests.test_onenormest.A->scipy.linalg.inv(np.random.randn(n, n))
A:scipy.sparse.linalg.tests.test_onenormest.(est, v, w, nmults, nresamples)->_onenormest_core(D, D.T, t, itmax)
A:scipy.sparse.linalg.tests.test_onenormest.observed->numpy.array(observed, dtype=float)
A:scipy.sparse.linalg.tests.test_onenormest.expected->numpy.array(expected, dtype=float)
A:scipy.sparse.linalg.tests.test_onenormest.nexact->numpy.count_nonzero(relative_errors < 1e-14)
A:scipy.sparse.linalg.tests.test_onenormest.first_col->numpy.array([1] + [0] * (n - 1))
A:scipy.sparse.linalg.tests.test_onenormest.first_row->numpy.array([(-alpha) ** i for i in range(n)])
A:scipy.sparse.linalg.tests.test_onenormest.exact_value->self._help_product_norm_slow(A, B)
A:scipy.sparse.linalg.tests.test_onenormest.est_plain->scipy.sparse.linalg.onenormest(B, t=t, itmax=itmax)
A:scipy.sparse.linalg.tests.test_onenormest.underestimation_ratio_mean->numpy.mean(underestimation_ratio)
A:scipy.sparse.linalg.tests.test_onenormest.max_nresamples->numpy.max(nresample_list)
A:scipy.sparse.linalg.tests.test_onenormest.mean_nmult->numpy.mean(nmult_list)
A:scipy.sparse.linalg.tests.test_onenormest.C->numpy.dot(A, B)
A:scipy.sparse.linalg.tests.test_onenormest.D->MatrixProductOperator(A, B)
A:scipy.sparse.linalg.tests.test_onenormest.B->numpy.random.randn(k, n)
A:scipy.sparse.linalg.tests.test_onenormest.fast_estimate->self._help_product_norm_fast(A, B)
A:scipy.sparse.linalg.tests.test_onenormest.s0->scipy.linalg.norm(A.toarray(), 1)
A:scipy.sparse.linalg.tests.test_onenormest.(s1, v)->scipy.sparse.linalg.onenormest(A, compute_v=True)
A:scipy.sparse.linalg.tests.test_onenormest.(s2, w)->scipy.sparse.linalg.onenormest(A, compute_w=True)
A:scipy.sparse.linalg.tests.test_onenormest.(s3, v2, w2)->scipy.sparse.linalg.onenormest(A, compute_w=True, compute_v=True)
A:scipy.sparse.linalg.tests.test_onenormest.t->numpy.random.randint(1, 4)
A:scipy.sparse.linalg.tests.test_onenormest.n->numpy.random.randint(10, 41)
A:scipy.sparse.linalg.tests.test_onenormest.(g, ind)->_algorithm_2_2(A, A.T, t)
scipy.sparse.linalg.tests.testMatrixProductOperator(self,A,B)
scipy.sparse.linalg.tests.testMatrixProductOperator.T(self)
scipy.sparse.linalg.tests.testMatrixProductOperator._matmat(self,X)
scipy.sparse.linalg.tests.testMatrixProductOperator._matvec(self,x)
scipy.sparse.linalg.tests.testMatrixProductOperator._rmatvec(self,x)
scipy.sparse.linalg.tests.testTestAlgorithm_2_2
scipy.sparse.linalg.tests.testTestAlgorithm_2_2.test_randn_inv(self)
scipy.sparse.linalg.tests.testTestOnenormest
scipy.sparse.linalg.tests.testTestOnenormest._help_product_norm_fast(self,A,B)
scipy.sparse.linalg.tests.testTestOnenormest._help_product_norm_slow(self,A,B)
scipy.sparse.linalg.tests.testTestOnenormest.test_onenormest_linear_operator(self)
scipy.sparse.linalg.tests.testTestOnenormest.test_onenormest_table_3_t_2(self)
scipy.sparse.linalg.tests.testTestOnenormest.test_onenormest_table_4_t_7(self)
scipy.sparse.linalg.tests.testTestOnenormest.test_onenormest_table_5_t_1(self)
scipy.sparse.linalg.tests.testTestOnenormest.test_onenormest_table_6_t_1(self)
scipy.sparse.linalg.tests.testTestOnenormest.test_returns(self)
scipy.sparse.linalg.tests.test_onenormest.MatrixProductOperator(self,A,B)
scipy.sparse.linalg.tests.test_onenormest.MatrixProductOperator.T(self)
scipy.sparse.linalg.tests.test_onenormest.MatrixProductOperator.__init__(self,A,B)
scipy.sparse.linalg.tests.test_onenormest.MatrixProductOperator._matmat(self,X)
scipy.sparse.linalg.tests.test_onenormest.MatrixProductOperator._matvec(self,x)
scipy.sparse.linalg.tests.test_onenormest.MatrixProductOperator._rmatvec(self,x)
scipy.sparse.linalg.tests.test_onenormest.TestAlgorithm_2_2
scipy.sparse.linalg.tests.test_onenormest.TestAlgorithm_2_2.test_randn_inv(self)
scipy.sparse.linalg.tests.test_onenormest.TestOnenormest
scipy.sparse.linalg.tests.test_onenormest.TestOnenormest._help_product_norm_fast(self,A,B)
scipy.sparse.linalg.tests.test_onenormest.TestOnenormest._help_product_norm_slow(self,A,B)
scipy.sparse.linalg.tests.test_onenormest.TestOnenormest.test_onenormest_linear_operator(self)
scipy.sparse.linalg.tests.test_onenormest.TestOnenormest.test_onenormest_table_3_t_2(self)
scipy.sparse.linalg.tests.test_onenormest.TestOnenormest.test_onenormest_table_4_t_7(self)
scipy.sparse.linalg.tests.test_onenormest.TestOnenormest.test_onenormest_table_5_t_1(self)
scipy.sparse.linalg.tests.test_onenormest.TestOnenormest.test_onenormest_table_6_t_1(self)
scipy.sparse.linalg.tests.test_onenormest.TestOnenormest.test_returns(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/tests/test_pydata_sparse.py----------------------------------------
A:scipy.sparse.linalg.tests.test_pydata_sparse.pytestmark->pytest.mark.skipif(sparse is None, reason='pydata/sparse not installed')
A:scipy.sparse.linalg.tests.test_pydata_sparse.A_dense->numpy.random.rand(9, 9)
A:scipy.sparse.linalg.tests.test_pydata_sparse.A_sparse->sparse.tril(A_sparse)
A:scipy.sparse.linalg.tests.test_pydata_sparse.b->numpy.random.rand(9)
A:scipy.sparse.linalg.tests.test_pydata_sparse.(x, info)->scipy.sparse.linalg.gmres(A_sparse, b, atol=1e-15)
A:scipy.sparse.linalg.tests.test_pydata_sparse.res0->scipy.sparse.linalg.lsqr(A_dense, b)
A:scipy.sparse.linalg.tests.test_pydata_sparse.res->scipy.sparse.linalg.lsqr(A_sparse, b)
A:scipy.sparse.linalg.tests.test_pydata_sparse.M_dense->numpy.diag(v0 ** 2)
A:scipy.sparse.linalg.tests.test_pydata_sparse.M_sparse->sparse.tril(A_sparse).__class__(M_dense)
A:scipy.sparse.linalg.tests.test_pydata_sparse.(w_dense, v_dense)->scipy.sparse.linalg.lobpcg(A_dense, X)
A:scipy.sparse.linalg.tests.test_pydata_sparse.(w, v)->scipy.sparse.linalg.lobpcg(A_sparse, X)
A:scipy.sparse.linalg.tests.test_pydata_sparse.(u0, s0, vt0)->scipy.sparse.linalg.svds(A_dense, k=2, v0=v0)
A:scipy.sparse.linalg.tests.test_pydata_sparse.(u, s, vt)->scipy.sparse.linalg.svds(A_sparse, k=2, v0=v0)
A:scipy.sparse.linalg.tests.test_pydata_sparse.b2->numpy.random.rand(len(b), 3)
A:scipy.sparse.linalg.tests.test_pydata_sparse.x0->scipy.sparse.linalg.expm_multiply(A_dense, b)
A:scipy.sparse.linalg.tests.test_pydata_sparse.x->scipy.sparse.linalg.expm_multiply(A_sparse, b)
A:scipy.sparse.linalg.tests.test_pydata_sparse.n->len(b)
A:scipy.sparse.linalg.tests.test_pydata_sparse.sparse_cls->type(A_sparse)
A:scipy.sparse.linalg.tests.test_pydata_sparse.lu->scipy.sparse.linalg.spilu(A_sparse)
A:scipy.sparse.linalg.tests.test_pydata_sparse.Pr->sparse_cls(sp.csc_matrix((np.ones(n), (lu.perm_r, np.arange(n)))))
A:scipy.sparse.linalg.tests.test_pydata_sparse.Pc->sparse_cls(sp.csc_matrix((np.ones(n), (np.arange(n), lu.perm_c))))
A:scipy.sparse.linalg.tests.test_pydata_sparse.z->scipy.sparse.linalg.spilu(A_sparse).solve(A_sparse.toarray())
A:scipy.sparse.linalg.tests.test_pydata_sparse.est0->scipy.sparse.linalg.onenormest(A_dense)
A:scipy.sparse.linalg.tests.test_pydata_sparse.est->scipy.sparse.linalg.onenormest(A_sparse)
scipy.sparse.linalg.tests.test_pydata_sparse.matrices(sparse_cls)
scipy.sparse.linalg.tests.test_pydata_sparse.same_matrix(sparse_cls,sp_sparse_cls)
scipy.sparse.linalg.tests.test_pydata_sparse.sp_sparse_cls(request)
scipy.sparse.linalg.tests.test_pydata_sparse.sparse_cls(request)
scipy.sparse.linalg.tests.test_pydata_sparse.test_eigs(matrices)
scipy.sparse.linalg.tests.test_pydata_sparse.test_eq(same_matrix)
scipy.sparse.linalg.tests.test_pydata_sparse.test_expm(matrices)
scipy.sparse.linalg.tests.test_pydata_sparse.test_expm_multiply(matrices)
scipy.sparse.linalg.tests.test_pydata_sparse.test_inv(matrices)
scipy.sparse.linalg.tests.test_pydata_sparse.test_isolve_gmres(matrices)
scipy.sparse.linalg.tests.test_pydata_sparse.test_lobpcg(matrices)
scipy.sparse.linalg.tests.test_pydata_sparse.test_lsmr(matrices)
scipy.sparse.linalg.tests.test_pydata_sparse.test_lsmr_output_shape()
scipy.sparse.linalg.tests.test_pydata_sparse.test_lsqr(matrices)
scipy.sparse.linalg.tests.test_pydata_sparse.test_ne(same_matrix)
scipy.sparse.linalg.tests.test_pydata_sparse.test_onenormest(matrices)
scipy.sparse.linalg.tests.test_pydata_sparse.test_spilu(matrices)
scipy.sparse.linalg.tests.test_pydata_sparse.test_splu(matrices)
scipy.sparse.linalg.tests.test_pydata_sparse.test_spsolve(matrices)
scipy.sparse.linalg.tests.test_pydata_sparse.test_spsolve_triangular(matrices)
scipy.sparse.linalg.tests.test_pydata_sparse.test_svds(matrices)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/tests/test_propack.py----------------------------------------
A:scipy.sparse.linalg.tests.test_propack._dtypes->tuple(_dtypes)
A:scipy.sparse.linalg.tests.test_propack.rng->numpy.random.RandomState(rseed)
A:scipy.sparse.linalg.tests.test_propack.M->generate_matrix(np.asarray, n, m, f, dtype)
A:scipy.sparse.linalg.tests.test_propack.A->numpy.random.random((n, n)).astype(np.double)
A:scipy.sparse.linalg.tests.test_propack.Msp->constructor(M)
A:scipy.sparse.linalg.tests.test_propack.(u1, sigma1, vt1)->numpy.linalg.svd(M, full_matrices=False)
A:scipy.sparse.linalg.tests.test_propack.(u2, sigma2, vt2, _)->_svdp(Msp, k=k, which=which, irl_mode=irl_mode, tol=tol)
A:scipy.sparse.linalg.tests.test_propack.u1->numpy.roll(u1, k, 1)
A:scipy.sparse.linalg.tests.test_propack.vt1->numpy.roll(vt1, k, 0)
A:scipy.sparse.linalg.tests.test_propack.sigma1->numpy.roll(sigma1, k)
A:scipy.sparse.linalg.tests.test_propack.path_prefix->os.path.dirname(__file__)
A:scipy.sparse.linalg.tests.test_propack.filename->os.path.join(path_prefix, relative_path)
A:scipy.sparse.linalg.tests.test_propack.data->numpy.load(filename, allow_pickle=True)
A:scipy.sparse.linalg.tests.test_propack.(u, s, vh, _)->_svdp(A, k, irl_mode=irl, random_state=0)
A:scipy.sparse.linalg.tests.test_propack.(u3, s3, vh3)->numpy.linalg.svd(A.todense())
A:scipy.sparse.linalg.tests.test_propack.(u1, s1, vt1, _)->_svdp(A, k, shifts=None, which='SM', irl_mode=True)
A:scipy.sparse.linalg.tests.test_propack.(u2, s2, vt2, _)->_svdp(A, k, shifts=32, which='SM', irl_mode=True)
scipy.sparse.linalg.tests.test_propack.assert_orthogonal(u1,u2,rtol,atol)
scipy.sparse.linalg.tests.test_propack.check_svdp(n,m,constructor,dtype,k,irl_mode,which,f=0.8)
scipy.sparse.linalg.tests.test_propack.generate_matrix(constructor,n,m,f,dtype=float,rseed=0,**kwargs)
scipy.sparse.linalg.tests.test_propack.is_32bit()
scipy.sparse.linalg.tests.test_propack.is_complex_type(dtype)
scipy.sparse.linalg.tests.test_propack.is_windows()
scipy.sparse.linalg.tests.test_propack.test_examples(dtype,irl)
scipy.sparse.linalg.tests.test_propack.test_shifts(shifts,dtype)
scipy.sparse.linalg.tests.test_propack.test_shifts_accuracy()
scipy.sparse.linalg.tests.test_propack.test_svdp(ctor,dtype,irl,which)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/tests/test_norm.py----------------------------------------
A:scipy.sparse.linalg.tests.test_norm.row->numpy.array([0, 0, 1, 1])
A:scipy.sparse.linalg.tests.test_norm.col->numpy.array([0, 1, 2, 3])
A:scipy.sparse.linalg.tests.test_norm.data->numpy.array([4, 5, 7, 9])
A:scipy.sparse.linalg.tests.test_norm.test_arr->scipy.sparse.coo_array((data, (row, col)), shape=(2, 4))
A:scipy.sparse.linalg.tests.test_norm.test_mat->scipy.sparse.coo_matrix((data, (row, col)), shape=(2, 4))
A:scipy.sparse.linalg.tests.test_norm.b->a.reshape((3, 3))
A:scipy.sparse.linalg.tests.test_norm.self.b->scipy.sparse.csr_matrix(b)
A:scipy.sparse.linalg.tests.test_norm.S->sparse_type(M)
scipy.sparse.linalg.tests.testTestNorm
scipy.sparse.linalg.tests.testTestNorm.setup_method(self)
scipy.sparse.linalg.tests.testTestNorm.test_matrix_norm(self)
scipy.sparse.linalg.tests.testTestNorm.test_matrix_norm_axis(self)
scipy.sparse.linalg.tests.testTestNorm.test_norm_exceptions(self)
scipy.sparse.linalg.tests.testTestNorm.test_vector_norm(self)
scipy.sparse.linalg.tests.testTestVsNumpyNorm
scipy.sparse.linalg.tests.testTestVsNumpyNorm.test_sparse_matrix_norms(self)
scipy.sparse.linalg.tests.testTestVsNumpyNorm.test_sparse_matrix_norms_with_axis(self)
scipy.sparse.linalg.tests.testTestVsNumpyNorm.test_sparse_vector_norms(self)
scipy.sparse.linalg.tests.test_norm.TestNorm
scipy.sparse.linalg.tests.test_norm.TestNorm.setup_method(self)
scipy.sparse.linalg.tests.test_norm.TestNorm.test_matrix_norm(self)
scipy.sparse.linalg.tests.test_norm.TestNorm.test_matrix_norm_axis(self)
scipy.sparse.linalg.tests.test_norm.TestNorm.test_norm_exceptions(self)
scipy.sparse.linalg.tests.test_norm.TestNorm.test_vector_norm(self)
scipy.sparse.linalg.tests.test_norm.TestVsNumpyNorm
scipy.sparse.linalg.tests.test_norm.TestVsNumpyNorm.test_sparse_matrix_norms(self)
scipy.sparse.linalg.tests.test_norm.TestVsNumpyNorm.test_sparse_matrix_norms_with_axis(self)
scipy.sparse.linalg.tests.test_norm.TestVsNumpyNorm.test_sparse_vector_norms(self)
scipy.sparse.linalg.tests.test_norm.test_sparray_norm()
scipy.sparse.linalg.tests.testtest_sparray_norm()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_dsolve/_add_newdocs.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_dsolve/__init__.py----------------------------------------
A:scipy.sparse.linalg._dsolve.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_dsolve/linsolve.py----------------------------------------
A:scipy.sparse.linalg._dsolve.linsolve.A_new->copy.copy(A)
A:scipy.sparse.linalg._dsolve.linsolve.A_new.indptr->numpy.array(A.indptr, copy=False, dtype=np.int64)
A:scipy.sparse.linalg._dsolve.linsolve.A_new.indices->numpy.array(A.indices, copy=False, dtype=np.int64)
A:scipy.sparse.linalg._dsolve.linsolve.A->A.copy().copy()
A:scipy.sparse.linalg._dsolve.linsolve.b->numpy.asanyarray(b)
A:scipy.sparse.linalg._dsolve.linsolve.result_dtype->numpy.promote_types(A.dtype, b.dtype)
A:scipy.sparse.linalg._dsolve.linsolve.b_vec->asarray(b_vec, dtype=A.dtype).ravel()
A:scipy.sparse.linalg._dsolve.linsolve.(umf_family, A)->_get_umf_family(A)
A:scipy.sparse.linalg._dsolve.linsolve.umf->scikits.umfpack.UmfpackContext(umf_family)
A:scipy.sparse.linalg._dsolve.linsolve.x->numpy.asanyarray(b).astype(x_dtype, copy=True)
A:scipy.sparse.linalg._dsolve.linsolve.options->dict(ColPerm=permc_spec)
A:scipy.sparse.linalg._dsolve.linsolve.(x, info)->_superlu.gssv(N, A.nnz, A.data, A.indices, A.indptr, b, flag, options=options)
A:scipy.sparse.linalg._dsolve.linsolve.Afactsolve->factorized(A)
A:scipy.sparse.linalg._dsolve.linsolve.bj->b[:, [j]].toarray().ravel()
A:scipy.sparse.linalg._dsolve.linsolve.xj->Afactsolve(bj)
A:scipy.sparse.linalg._dsolve.linsolve.w->numpy.flatnonzero(xj)
A:scipy.sparse.linalg._dsolve.linsolve.sparse_data->numpy.concatenate(data_segs)
A:scipy.sparse.linalg._dsolve.linsolve.sparse_row->numpy.concatenate(row_segs)
A:scipy.sparse.linalg._dsolve.linsolve.sparse_col->numpy.concatenate(col_segs)
A:scipy.sparse.linalg._dsolve.linsolve._options->dict(ILU_DropRule=drop_rule, ILU_DropTol=drop_tol, ILU_FillFactor=fill_factor, DiagPivotThresh=diag_pivot_thresh, ColPerm=permc_spec, PanelSize=panel_size, Relax=relax)
A:scipy.sparse.linalg._dsolve.linsolve.result->scikits.umfpack.UmfpackContext(umf_family).solve(umfpack.UMFPACK_A, A, b, autoTranspose=True)
A:scipy.sparse.linalg._dsolve.linsolve.x_dtype->numpy.result_type(A.data, b, np.float64)
A:scipy.sparse.linalg._dsolve.linsolve.row_indices->range(len(b) - 1, -1, -1)
A:scipy.sparse.linalg._dsolve.linsolve.A_off_diagonal_indices_row_i->slice(indptr_start + 1, indptr_stop)
scipy.sparse.linalg.MatrixRankWarning(UserWarning)
scipy.sparse.linalg._dsolve.linsolve.MatrixRankWarning(UserWarning)
scipy.sparse.linalg._dsolve.linsolve._get_umf_family(A)
scipy.sparse.linalg._dsolve.linsolve.factorized(A)
scipy.sparse.linalg._dsolve.linsolve.spilu(A,drop_tol=None,fill_factor=None,drop_rule=None,permc_spec=None,diag_pivot_thresh=None,relax=None,panel_size=None,options=None)
scipy.sparse.linalg._dsolve.linsolve.splu(A,permc_spec=None,diag_pivot_thresh=None,relax=None,panel_size=None,options=dict())
scipy.sparse.linalg._dsolve.linsolve.spsolve(A,b,permc_spec=None,use_umfpack=True)
scipy.sparse.linalg._dsolve.linsolve.spsolve_triangular(A,b,lower=True,overwrite_A=False,overwrite_b=False,unit_diagonal=False)
scipy.sparse.linalg._dsolve.linsolve.use_solver(**kwargs)
scipy.sparse.linalg._get_umf_family(A)
scipy.sparse.linalg.factorized(A)
scipy.sparse.linalg.spilu(A,drop_tol=None,fill_factor=None,drop_rule=None,permc_spec=None,diag_pivot_thresh=None,relax=None,panel_size=None,options=None)
scipy.sparse.linalg.splu(A,permc_spec=None,diag_pivot_thresh=None,relax=None,panel_size=None,options=dict())
scipy.sparse.linalg.spsolve(A,b,permc_spec=None,use_umfpack=True)
scipy.sparse.linalg.spsolve_triangular(A,b,lower=True,overwrite_A=False,overwrite_b=False,unit_diagonal=False)
scipy.sparse.linalg.use_solver(**kwargs)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_dsolve/tests/test_linsolve.py----------------------------------------
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.sup_sparse_efficiency->suppress_warnings()
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.eyeN->scipy.sparse.eye(N - 1)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.b->array([[2.0, 0.0], [2.0, 2.0]])
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.self.A->spdiags((d, 2 * d, d[::-1]), (-3, 0, 5), n, n)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.A->random_triangle_matrix(n, lower=lower)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.a->numpy.random.random((n, n))
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.expected->splu(A.copy()).solve(b)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.solve->factorized(self.A)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.B->numpy.random.rand(42, 3)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.BB->numpy.random.rand(self.n, 3, 9)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.unsorted_inds->numpy.array([2, 0, 1, 0])
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.data->array([1, 1, 1, 1, 1, 1])
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.indptr->numpy.array([0, 1, 2, 4])
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.(A, b)->setup_bug_8278()
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.f->factorized(A)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.x->spsolve_triangular(A, b, lower=lower, unit_diagonal=True)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.ij->numpy.array([(17, 0), (17, 6), (17, 12), (10, 13)], dtype=np.int32)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.v->numpy.array([0.284213, 0.94933781, 0.15767017, 0.38797296])
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.Asp->random_triangle_matrix(n, lower=lower).astype(t).asformat(format)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.Adense->array([[0.0, 1.0, 1.0], [1.0, 0.0, 1.0], [0.0, 0.0, 1.0]])
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.As->csc_matrix(Adense)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.x2->splu(A).solve(b)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.Bdense->csc_matrix(Adense).dot(x)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.Bs->csc_matrix(Bdense)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.A2->csr_matrix(eye(3))
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.b2->array([1.0, 2.0])
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.row->array([0, 0, 1, 1, 0, 0])
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.col->array([0, 2, 1, 1, 0, 0])
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.sM->csr_matrix((data, (row, col)), shape=(3, 3), dtype=float)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.M->csr_matrix((data, (row, col)), shape=(3, 3), dtype=float).toarray()
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.sN->csr_matrix((data, (row, col)), shape=(3, 3), dtype=float)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.N->csr_matrix((data, (row, col)), shape=(3, 3), dtype=float).toarray()
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.sX->spsolve(sM, sN)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.X->scipy.linalg.solve(M, N)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.x1->spsolve(spmattype(A), b, use_umfpack=True)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.ident->csc_matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.A_real->scipy.sparse.csr_matrix([[1, 2, 0], [0, 0, 3], [4, 0, 5]])
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.A_complex->scipy.sparse.csr_matrix([[1, 2, 0], [0, 0, 3], [4, 0, 5 + 1j]])
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.b_real->numpy.array([1, 1, 1])
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.lu->splu(A)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.rng->numpy.random.default_rng(43876432987)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.err->abs(r - b).max()
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.a_->csc_matrix(a)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.A_->csc_matrix(A)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.rc->sys.getrefcount(lu)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.perm->getattr(lu, attr)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.Pc->numpy.zeros((n, n))
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.Pr->numpy.zeros((n, n))
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.Ad->random_triangle_matrix(n, lower=lower).toarray()
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.lhs->numpy.zeros((n, n)).dot(Ad).dot(Pc)
A:scipy.sparse.linalg._dsolve.tests.test_linsolve.rhs->(lu.L @ lu.U).toarray()
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestFactorized
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestFactorized._check_non_singular(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestFactorized._check_singular(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestFactorized.setup_method(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestFactorized.test_assume_sorted_indices_flag(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestFactorized.test_bug_8278(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestFactorized.test_call_with_cast_to_complex_with_umfpack(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestFactorized.test_call_with_cast_to_complex_without_umfpack(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestFactorized.test_call_with_incorrectly_sized_matrix_with_umfpack(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestFactorized.test_call_with_incorrectly_sized_matrix_without_umfpack(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestFactorized.test_cannot_factorize_nonsquare_matrix_without_umfpack(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestFactorized.test_factorizes_nonsquare_matrix_with_umfpack(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestFactorized.test_non_singular_with_umfpack(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestFactorized.test_non_singular_without_umfpack(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestFactorized.test_singular_with_umfpack(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestFactorized.test_singular_without_umfpack(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestLinsolve
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestLinsolve.setup_method(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestLinsolve.test_bmatrix_smoketest(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestLinsolve.test_bug_8278(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestLinsolve.test_bvector_smoketest(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestLinsolve.test_dtype_cast(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestLinsolve.test_example_comparison(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestLinsolve.test_gssv_badinput(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestLinsolve.test_ndarray_support(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestLinsolve.test_non_square(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestLinsolve.test_shape_compatibility(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestLinsolve.test_singular(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestLinsolve.test_singular_gh_3312(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestLinsolve.test_sparsity_preservation(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestLinsolve.test_twodiags(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSplu
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSplu._internal_test_spilu_smoketest(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSplu._internal_test_splu_smoketest(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSplu._smoketest(self,spxlu,check,dtype)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSplu.setup_method(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSplu.test_bad_inputs(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSplu.test_lu_attr(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSplu.test_lu_refcount(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSplu.test_natural_permc(self,splu_fun,rtol)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSplu.test_spilu_drop_rule(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSplu.test_spilu_nnz0(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSplu.test_spilu_smoketest(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSplu.test_splu_basic(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSplu.test_splu_nnz0(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSplu.test_splu_perm(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSplu.test_splu_smoketest(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSplu.test_superlu_dlamch_i386_nan(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSplu.test_threads_parallel(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSpsolveTriangular
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSpsolveTriangular.setup_method(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSpsolveTriangular.test_bad_shape(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSpsolveTriangular.test_input_types(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSpsolveTriangular.test_random(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSpsolveTriangular.test_singular(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.TestSpsolveTriangular.test_zero_diagonal(self)
scipy.sparse.linalg._dsolve.tests.test_linsolve.setup_bug_8278()
scipy.sparse.linalg._dsolve.tests.test_linsolve.toarray(a)
scipy.sparse.linalg.tests.test_TestFactorized
scipy.sparse.linalg.tests.test_TestFactorized._check_non_singular(self)
scipy.sparse.linalg.tests.test_TestFactorized._check_singular(self)
scipy.sparse.linalg.tests.test_TestFactorized.setup_method(self)
scipy.sparse.linalg.tests.test_TestFactorized.test_assume_sorted_indices_flag(self)
scipy.sparse.linalg.tests.test_TestFactorized.test_bug_8278(self)
scipy.sparse.linalg.tests.test_TestFactorized.test_call_with_cast_to_complex_with_umfpack(self)
scipy.sparse.linalg.tests.test_TestFactorized.test_call_with_cast_to_complex_without_umfpack(self)
scipy.sparse.linalg.tests.test_TestFactorized.test_call_with_incorrectly_sized_matrix_with_umfpack(self)
scipy.sparse.linalg.tests.test_TestFactorized.test_call_with_incorrectly_sized_matrix_without_umfpack(self)
scipy.sparse.linalg.tests.test_TestFactorized.test_cannot_factorize_nonsquare_matrix_without_umfpack(self)
scipy.sparse.linalg.tests.test_TestFactorized.test_factorizes_nonsquare_matrix_with_umfpack(self)
scipy.sparse.linalg.tests.test_TestFactorized.test_non_singular_with_umfpack(self)
scipy.sparse.linalg.tests.test_TestFactorized.test_non_singular_without_umfpack(self)
scipy.sparse.linalg.tests.test_TestFactorized.test_singular_with_umfpack(self)
scipy.sparse.linalg.tests.test_TestFactorized.test_singular_without_umfpack(self)
scipy.sparse.linalg.tests.test_TestLinsolve
scipy.sparse.linalg.tests.test_TestLinsolve.setup_method(self)
scipy.sparse.linalg.tests.test_TestLinsolve.test_bmatrix_smoketest(self)
scipy.sparse.linalg.tests.test_TestLinsolve.test_bug_8278(self)
scipy.sparse.linalg.tests.test_TestLinsolve.test_bvector_smoketest(self)
scipy.sparse.linalg.tests.test_TestLinsolve.test_dtype_cast(self)
scipy.sparse.linalg.tests.test_TestLinsolve.test_example_comparison(self)
scipy.sparse.linalg.tests.test_TestLinsolve.test_gssv_badinput(self)
scipy.sparse.linalg.tests.test_TestLinsolve.test_ndarray_support(self)
scipy.sparse.linalg.tests.test_TestLinsolve.test_non_square(self)
scipy.sparse.linalg.tests.test_TestLinsolve.test_shape_compatibility(self)
scipy.sparse.linalg.tests.test_TestLinsolve.test_singular(self)
scipy.sparse.linalg.tests.test_TestLinsolve.test_singular_gh_3312(self)
scipy.sparse.linalg.tests.test_TestLinsolve.test_sparsity_preservation(self)
scipy.sparse.linalg.tests.test_TestLinsolve.test_twodiags(self)
scipy.sparse.linalg.tests.test_TestSplu
scipy.sparse.linalg.tests.test_TestSplu._internal_test_spilu_smoketest(self)
scipy.sparse.linalg.tests.test_TestSplu._internal_test_splu_smoketest(self)
scipy.sparse.linalg.tests.test_TestSplu._smoketest(self,spxlu,check,dtype)
scipy.sparse.linalg.tests.test_TestSplu.setup_method(self)
scipy.sparse.linalg.tests.test_TestSplu.test_bad_inputs(self)
scipy.sparse.linalg.tests.test_TestSplu.test_lu_attr(self)
scipy.sparse.linalg.tests.test_TestSplu.test_lu_refcount(self)
scipy.sparse.linalg.tests.test_TestSplu.test_natural_permc(self,splu_fun,rtol)
scipy.sparse.linalg.tests.test_TestSplu.test_spilu_drop_rule(self)
scipy.sparse.linalg.tests.test_TestSplu.test_spilu_nnz0(self)
scipy.sparse.linalg.tests.test_TestSplu.test_spilu_smoketest(self)
scipy.sparse.linalg.tests.test_TestSplu.test_splu_basic(self)
scipy.sparse.linalg.tests.test_TestSplu.test_splu_nnz0(self)
scipy.sparse.linalg.tests.test_TestSplu.test_splu_perm(self)
scipy.sparse.linalg.tests.test_TestSplu.test_splu_smoketest(self)
scipy.sparse.linalg.tests.test_TestSplu.test_superlu_dlamch_i386_nan(self)
scipy.sparse.linalg.tests.test_TestSplu.test_threads_parallel(self)
scipy.sparse.linalg.tests.test_TestSpsolveTriangular
scipy.sparse.linalg.tests.test_TestSpsolveTriangular.setup_method(self)
scipy.sparse.linalg.tests.test_TestSpsolveTriangular.test_bad_shape(self)
scipy.sparse.linalg.tests.test_TestSpsolveTriangular.test_input_types(self)
scipy.sparse.linalg.tests.test_TestSpsolveTriangular.test_random(self)
scipy.sparse.linalg.tests.test_TestSpsolveTriangular.test_singular(self)
scipy.sparse.linalg.tests.test_TestSpsolveTriangular.test_zero_diagonal(self)
scipy.sparse.linalg.tests.test_setup_bug_8278()
scipy.sparse.linalg.tests.test_toarray(a)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_dsolve/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_eigen/_svds_doc.py----------------------------------------
scipy.sparse.linalg._eigen._svds_doc._svds_arpack_doc(A,k=6,ncv=None,tol=0,which='LM',v0=None,maxiter=None,return_singular_vectors=True,solver='arpack',random_state=None)
scipy.sparse.linalg._eigen._svds_doc._svds_lobpcg_doc(A,k=6,ncv=None,tol=0,which='LM',v0=None,maxiter=None,return_singular_vectors=True,solver='lobpcg',random_state=None)
scipy.sparse.linalg._eigen._svds_doc._svds_propack_doc(A,k=6,ncv=None,tol=0,which='LM',v0=None,maxiter=None,return_singular_vectors=True,solver='propack',random_state=None)
scipy.sparse.linalg._svds_doc._svds_arpack_doc(A,k=6,ncv=None,tol=0,which='LM',v0=None,maxiter=None,return_singular_vectors=True,solver='arpack',random_state=None)
scipy.sparse.linalg._svds_doc._svds_lobpcg_doc(A,k=6,ncv=None,tol=0,which='LM',v0=None,maxiter=None,return_singular_vectors=True,solver='lobpcg',random_state=None)
scipy.sparse.linalg._svds_doc._svds_propack_doc(A,k=6,ncv=None,tol=0,which='LM',v0=None,maxiter=None,return_singular_vectors=True,solver='propack',random_state=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_eigen/_svds.py----------------------------------------
A:scipy.sparse.linalg._eigen._svds.solver->str(solver).lower()
A:scipy.sparse.linalg._eigen._svds.A->aslinearoperator(A)
A:scipy.sparse.linalg._eigen._svds.k->int(k)
A:scipy.sparse.linalg._eigen._svds.ncv->int(ncv)
A:scipy.sparse.linalg._eigen._svds.tol->float(tol)
A:scipy.sparse.linalg._eigen._svds.which->str(which).upper()
A:scipy.sparse.linalg._eigen._svds.v0->check_random_state(random_state).standard_normal(size=(min(A.shape),))
A:scipy.sparse.linalg._eigen._svds.random_state->check_random_state(random_state)
A:scipy.sparse.linalg._eigen._svds.args->_iv(A, k, ncv, tol, which, v0, maxiter, return_singular_vectors, solver, random_state)
A:scipy.sparse.linalg._eigen._svds.dtype->getattr(A, 'dtype', None)
A:scipy.sparse.linalg._eigen._svds.XH_X->LinearOperator(matvec=matvec_XH_X, dtype=A.dtype, matmat=matmat_XH_X, shape=(min(A.shape), min(A.shape)))
A:scipy.sparse.linalg._eigen._svds.X->check_random_state(random_state).standard_normal(size=(min(A.shape), k))
A:scipy.sparse.linalg._eigen._svds.(_, eigvec)->eigsh(XH_X, k=k, tol=tol ** 2, maxiter=maxiter, ncv=ncv, which=which, v0=v0)
A:scipy.sparse.linalg._eigen._svds.(eigvec, _)->numpy.linalg.qr(eigvec)
A:scipy.sparse.linalg._eigen._svds.res->_svdp(A, k=k, tol=tol ** 2, which=which, maxiter=None, compute_u=jobu, compute_v=jobv, irl_mode=irl_mode, kmax=maxiter, v0=v0, random_state=random_state)
A:scipy.sparse.linalg._eigen._svds.Av->X_matmat(eigvec)
A:scipy.sparse.linalg._eigen._svds.s->svd(Av, compute_uv=False, overwrite_a=True)
A:scipy.sparse.linalg._eigen._svds.(u, s, vh)->svd(Av, full_matrices=False, overwrite_a=True)
scipy.sparse.linalg._eigen._svds._herm(x)
scipy.sparse.linalg._eigen._svds._iv(A,k,ncv,tol,which,v0,maxiter,return_singular,solver,random_state)
scipy.sparse.linalg._eigen._svds.svds(A,k=6,ncv=None,tol=0,which='LM',v0=None,maxiter=None,return_singular_vectors=True,solver='arpack',random_state=None,options=None)
scipy.sparse.linalg._svds._herm(x)
scipy.sparse.linalg._svds._iv(A,k,ncv,tol,which,v0,maxiter,return_singular,solver,random_state)
scipy.sparse.linalg.svds(A,k=6,ncv=None,tol=0,which='LM',v0=None,maxiter=None,return_singular_vectors=True,solver='arpack',random_state=None,options=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_eigen/__init__.py----------------------------------------
A:scipy.sparse.linalg._eigen.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_eigen/tests/test_svds.py----------------------------------------
A:scipy.sparse.linalg._eigen.tests.test_svds.m->m.toarray().toarray()
A:scipy.sparse.linalg._eigen.tests.test_svds.(u, s, vh)->svds(A, k=k, ncv=ncv, solver=self.solver)
A:scipy.sparse.linalg._eigen.tests.test_svds.A_rebuilt->(u * s).dot(vh)
A:scipy.sparse.linalg._eigen.tests.test_svds.uh_u->numpy.dot(u.T.conj(), u)
A:scipy.sparse.linalg._eigen.tests.test_svds.vh_v->numpy.dot(vh, vh.T.conj())
A:scipy.sparse.linalg._eigen.tests.test_svds.(u2, s2, vh2)->svds(A, k, return_singular_vectors=rsv, solver=self.solver, random_state=rng)
A:scipy.sparse.linalg._eigen.tests.test_svds.A_rebuilt_svd->(u2 * s2).dot(vh2)
A:scipy.sparse.linalg._eigen.tests.test_svds.rng->numpy.random.default_rng(0)
A:scipy.sparse.linalg._eigen.tests.test_svds.A->numpy.random.default_rng(0).random((6, 7))
A:scipy.sparse.linalg._eigen.tests.test_svds.res->svds(A, k=k, which=which, solver=self.solver, random_state=0)
A:scipy.sparse.linalg._eigen.tests.test_svds.v0->numpy.ones(min(A.shape))
A:scipy.sparse.linalg._eigen.tests.test_svds.(_, s, _)->svd(A)
A:scipy.sparse.linalg._eigen.tests.test_svds.(_, s2, _)->svds(A, k=k, v0=np.ones(n), solver=self.solver, tol=tol)
A:scipy.sparse.linalg._eigen.tests.test_svds.error->err(tol)
A:scipy.sparse.linalg._eigen.tests.test_svds.v0a->numpy.random.default_rng(0).random(n)
A:scipy.sparse.linalg._eigen.tests.test_svds.res1a->svds(A, k, solver=self.solver, random_state=random_state)
A:scipy.sparse.linalg._eigen.tests.test_svds.res2a->svds(A, k, solver=self.solver, random_state=random_state)
A:scipy.sparse.linalg._eigen.tests.test_svds.v0b->numpy.random.default_rng(0).random(n)
A:scipy.sparse.linalg._eigen.tests.test_svds.res1b->svds(A, k, solver=self.solver, random_state=1)
A:scipy.sparse.linalg._eigen.tests.test_svds.res2b->svds(A, k, solver=self.solver, random_state=1)
A:scipy.sparse.linalg._eigen.tests.test_svds.random_state_2->copy.deepcopy(random_state)
A:scipy.sparse.linalg._eigen.tests.test_svds.(ud, sd, vhd)->svds(A, k, solver=self.solver)
A:scipy.sparse.linalg._eigen.tests.test_svds.s2->svds(A, k, return_singular_vectors=rsv, solver=self.solver, random_state=rng)
A:scipy.sparse.linalg._eigen.tests.test_svds.A2->lo_type(A)
A:scipy.sparse.linalg._eigen.tests.test_svds.j->numpy.argsort(s)
A:scipy.sparse.linalg._eigen.tests.test_svds.L->CheckingLinearOperator(A)
A:scipy.sparse.linalg._eigen.tests.test_svds.(U1, s1, VH1)->reorder(svds(A, k, which='LM', solver=solver))
A:scipy.sparse.linalg._eigen.tests.test_svds.(U2, s2, VH2)->reorder(svds(L, k, which='LM', solver=solver))
A:scipy.sparse.linalg._eigen.tests.test_svds.S->S.astype(dtype).astype(dtype)
A:scipy.sparse.linalg._eigen.tests.test_svds.e->numpy.ones(m)
A:scipy.sparse.linalg._eigen.tests.test_svds.(U, s, VH)->svds(A, k, solver=self.solver)
A:scipy.sparse.linalg._eigen.tests.test_svds.z->numpy.ones_like(s)
A:scipy.sparse.linalg._eigen.tests.test_svds.(u, _, vh)->svd(A, full_matrices=False)
A:scipy.sparse.linalg._eigen.tests.test_svds.t->numpy.sum(s > 0)
A:scipy.sparse.linalg._eigen.tests.test_svds.x->numpy.random.default_rng(0).random((size, size - dim))
A:scipy.sparse.linalg._eigen.tests.test_svds.mat->mat.astype(dtype).astype(dtype)
A:scipy.sparse.linalg._eigen.tests.test_svds.nz->null_space(mat)
A:scipy.sparse.linalg._eigen.tests.test_svds.sp_mat->csc_matrix(mat)
A:scipy.sparse.linalg._eigen.tests.test_svds.(su, ss, svh)->svds(sp_mat, k=dim, which='SM', solver=self.solver)
scipy.sparse.linalg._eigen.tests.test_svds.CheckingLinearOperator(self,A)
scipy.sparse.linalg._eigen.tests.test_svds.CheckingLinearOperator.__init__(self,A)
scipy.sparse.linalg._eigen.tests.test_svds.CheckingLinearOperator._matvec(self,x)
scipy.sparse.linalg._eigen.tests.test_svds.CheckingLinearOperator._rmatvec(self,x)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_small_sigma(self,shape,dtype)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_small_sigma2(self,dtype)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_small_sigma_sparse(self,shape,dtype)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svd_LM_ones_matrix(self,shape,dtype)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svd_linop(self)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svd_maxiter(self)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svd_random_state(self)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svd_random_state_2(self,random_state)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svd_random_state_3(self,random_state)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svd_return_singular_vectors(self,rsv,shape)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svd_simple(self,A,k,real,transpose,lo_type)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svd_v0(self)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svds_input_validation_A(self,args)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svds_input_validation_k_1(self,k)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svds_input_validation_k_2(self)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svds_input_validation_maxiter_1(self,maxiter)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svds_input_validation_maxiter_2(self)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svds_input_validation_return_singular_vectors(self,rsv)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svds_input_validation_tol_1(self,tol)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svds_input_validation_tol_2(self,tol)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svds_input_validation_v0_1(self,transpose,n)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svds_input_validation_v0_2(self)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svds_input_validation_v0_3(self,v0)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svds_input_validation_which(self,which)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svds_parameter_k_which(self,k,which)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_svds_parameter_tol(self)
scipy.sparse.linalg._eigen.tests.test_svds.SVDSCommonTests.test_zero_matrix(self,shape,dtype)
scipy.sparse.linalg._eigen.tests.test_svds.Test_SVDS_ARPACK(SVDSCommonTests)
scipy.sparse.linalg._eigen.tests.test_svds.Test_SVDS_ARPACK.setup_method(self)
scipy.sparse.linalg._eigen.tests.test_svds.Test_SVDS_ARPACK.test_svds_input_validation_ncv_1(self,ncv)
scipy.sparse.linalg._eigen.tests.test_svds.Test_SVDS_ARPACK.test_svds_input_validation_ncv_2(self)
scipy.sparse.linalg._eigen.tests.test_svds.Test_SVDS_LOBPCG(SVDSCommonTests)
scipy.sparse.linalg._eigen.tests.test_svds.Test_SVDS_LOBPCG.setup_method(self)
scipy.sparse.linalg._eigen.tests.test_svds.Test_SVDS_LOBPCG.test_svd_random_state_3(self)
scipy.sparse.linalg._eigen.tests.test_svds.Test_SVDS_PROPACK(SVDSCommonTests)
scipy.sparse.linalg._eigen.tests.test_svds.Test_SVDS_PROPACK.setup_method(self)
scipy.sparse.linalg._eigen.tests.test_svds.Test_SVDS_PROPACK.test_svd_LM_ones_matrix(self)
scipy.sparse.linalg._eigen.tests.test_svds.Test_SVDS_PROPACK.test_svd_LM_zeros_matrix(self)
scipy.sparse.linalg._eigen.tests.test_svds.Test_SVDS_once
scipy.sparse.linalg._eigen.tests.test_svds.Test_SVDS_once.test_svds_input_validation_solver(self,solver)
scipy.sparse.linalg._eigen.tests.test_svds._check_svds(A,k,u,s,vh,which='LM',check_usvh_A=False,check_svd=True,atol=1e-10,rtol=1e-07)
scipy.sparse.linalg._eigen.tests.test_svds._check_svds_n(A,k,u,s,vh,which='LM',check_res=True,check_svd=True,atol=1e-10,rtol=1e-07)
scipy.sparse.linalg._eigen.tests.test_svds.sorted_svd(m,k,which='LM')
scipy.sparse.linalg._eigen.tests.test_svds.svd_estimate(u,s,vh)
scipy.sparse.linalg.tests.test_svds.CheckingLinearOperator(self,A)
scipy.sparse.linalg.tests.test_svds.CheckingLinearOperator._matvec(self,x)
scipy.sparse.linalg.tests.test_svds.CheckingLinearOperator._rmatvec(self,x)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_small_sigma(self,shape,dtype)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_small_sigma2(self,dtype)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_small_sigma_sparse(self,shape,dtype)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svd_LM_ones_matrix(self,shape,dtype)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svd_linop(self)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svd_maxiter(self)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svd_random_state(self)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svd_random_state_2(self,random_state)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svd_random_state_3(self,random_state)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svd_return_singular_vectors(self,rsv,shape)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svd_simple(self,A,k,real,transpose,lo_type)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svd_v0(self)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svds_input_validation_A(self,args)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svds_input_validation_k_1(self,k)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svds_input_validation_k_2(self)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svds_input_validation_maxiter_1(self,maxiter)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svds_input_validation_maxiter_2(self)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svds_input_validation_return_singular_vectors(self,rsv)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svds_input_validation_tol_1(self,tol)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svds_input_validation_tol_2(self,tol)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svds_input_validation_v0_1(self,transpose,n)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svds_input_validation_v0_2(self)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svds_input_validation_v0_3(self,v0)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svds_input_validation_which(self,which)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svds_parameter_k_which(self,k,which)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_svds_parameter_tol(self)
scipy.sparse.linalg.tests.test_svds.SVDSCommonTests.test_zero_matrix(self,shape,dtype)
scipy.sparse.linalg.tests.test_svds.Test_SVDS_ARPACK(SVDSCommonTests)
scipy.sparse.linalg.tests.test_svds.Test_SVDS_ARPACK.setup_method(self)
scipy.sparse.linalg.tests.test_svds.Test_SVDS_ARPACK.test_svds_input_validation_ncv_1(self,ncv)
scipy.sparse.linalg.tests.test_svds.Test_SVDS_ARPACK.test_svds_input_validation_ncv_2(self)
scipy.sparse.linalg.tests.test_svds.Test_SVDS_LOBPCG(SVDSCommonTests)
scipy.sparse.linalg.tests.test_svds.Test_SVDS_LOBPCG.setup_method(self)
scipy.sparse.linalg.tests.test_svds.Test_SVDS_LOBPCG.test_svd_random_state_3(self)
scipy.sparse.linalg.tests.test_svds.Test_SVDS_PROPACK(SVDSCommonTests)
scipy.sparse.linalg.tests.test_svds.Test_SVDS_PROPACK.setup_method(self)
scipy.sparse.linalg.tests.test_svds.Test_SVDS_PROPACK.test_svd_LM_ones_matrix(self)
scipy.sparse.linalg.tests.test_svds.Test_SVDS_PROPACK.test_svd_LM_zeros_matrix(self)
scipy.sparse.linalg.tests.test_svds.Test_SVDS_once
scipy.sparse.linalg.tests.test_svds.Test_SVDS_once.test_svds_input_validation_solver(self,solver)
scipy.sparse.linalg.tests.test_svds._check_svds(A,k,u,s,vh,which='LM',check_usvh_A=False,check_svd=True,atol=1e-10,rtol=1e-07)
scipy.sparse.linalg.tests.test_svds._check_svds_n(A,k,u,s,vh,which='LM',check_res=True,check_svd=True,atol=1e-10,rtol=1e-07)
scipy.sparse.linalg.tests.test_svds.sorted_svd(m,k,which='LM')
scipy.sparse.linalg.tests.test_svds.svd_estimate(u,s,vh)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_eigen/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_eigen/arpack/arpack.py----------------------------------------
A:scipy.sparse.linalg._eigen.arpack.arpack.ZNAUPD_ERRORS->DNAUPD_ERRORS.copy()
A:scipy.sparse.linalg._eigen.arpack.arpack.SNEUPD_ERRORS->DNEUPD_ERRORS.copy()
A:scipy.sparse.linalg._eigen.arpack.arpack.CNEUPD_ERRORS->ZNEUPD_ERRORS.copy()
A:scipy.sparse.linalg._eigen.arpack.arpack.SSEUPD_ERRORS->DSEUPD_ERRORS.copy()
A:scipy.sparse.linalg._eigen.arpack.arpack.msg->infodict.get(info, 'Unknown error')
A:scipy.sparse.linalg._eigen.arpack.arpack.self.resid->numpy.zeros(n, tp)
A:scipy.sparse.linalg._eigen.arpack.arpack.ncv->min(ncv, n)
A:scipy.sparse.linalg._eigen.arpack.arpack.self.v->numpy.zeros((n, ncv), tp)
A:scipy.sparse.linalg._eigen.arpack.arpack.self.iparam->numpy.zeros(11, arpack_int)
A:scipy.sparse.linalg._eigen.arpack.arpack.(ev, vec)->self.extract(True)
A:scipy.sparse.linalg._eigen.arpack.arpack.ev->numpy.zeros((0,))
A:scipy.sparse.linalg._eigen.arpack.arpack.vec->numpy.zeros((self.n, 0))
A:scipy.sparse.linalg._eigen.arpack.arpack.self.workd->_aligned_zeros(3 * n, self.tp)
A:scipy.sparse.linalg._eigen.arpack.arpack.self.workl->_aligned_zeros(3 * self.ncv * (self.ncv + 2), self.tp)
A:scipy.sparse.linalg._eigen.arpack.arpack.self.ipntr->numpy.zeros(14, arpack_int)
A:scipy.sparse.linalg._eigen.arpack.arpack.(self.ido, self.tol, self.resid, self.v, self.iparam, self.ipntr, self.info)->self._arpack_solver(self.ido, self.bmat, self.which, self.k, self.tol, self.resid, self.v, self.iparam, self.ipntr, self.workd, self.workl, self.rwork, self.info)
A:scipy.sparse.linalg._eigen.arpack.arpack.xslice->slice(self.ipntr[0] - 1, self.ipntr[0] - 1 + self.n)
A:scipy.sparse.linalg._eigen.arpack.arpack.yslice->slice(self.ipntr[1] - 1, self.ipntr[1] - 1 + self.n)
A:scipy.sparse.linalg._eigen.arpack.arpack.self.workd[yslice]->self.B(self.workd[xslice])
A:scipy.sparse.linalg._eigen.arpack.arpack.self.workd[xslice]->self.OPb(self.workd[xslice])
A:scipy.sparse.linalg._eigen.arpack.arpack.Bxslice->slice(self.ipntr[2] - 1, self.ipntr[2] - 1 + self.n)
A:scipy.sparse.linalg._eigen.arpack.arpack.Ax->self.A_matvec(self.workd[xslice])
A:scipy.sparse.linalg._eigen.arpack.arpack.sselect->numpy.zeros(self.ncv, 'int')
A:scipy.sparse.linalg._eigen.arpack.arpack.(d, z, ierr)->self._arpack_extract(return_eigenvectors, howmny, sselect, self.sigma, workev, self.bmat, self.which, k, self.tol, self.resid, self.v, self.iparam, self.ipntr, self.workd, self.workl, self.rwork, ierr)
A:scipy.sparse.linalg._eigen.arpack.arpack.self.rwork->_aligned_zeros(self.ncv, self.tp.lower())
A:scipy.sparse.linalg._eigen.arpack.arpack.sigmar->numpy.real(self.sigma)
A:scipy.sparse.linalg._eigen.arpack.arpack.sigmai->numpy.imag(self.sigma)
A:scipy.sparse.linalg._eigen.arpack.arpack.workev->numpy.zeros(3 * self.ncv, self.tp)
A:scipy.sparse.linalg._eigen.arpack.arpack.dr->numpy.zeros(k + 1, self.tp)
A:scipy.sparse.linalg._eigen.arpack.arpack.di->numpy.zeros(k + 1, self.tp)
A:scipy.sparse.linalg._eigen.arpack.arpack.zr->numpy.zeros((n, k + 1), self.tp)
A:scipy.sparse.linalg._eigen.arpack.arpack.(dr, di, zr, ierr)->self._arpack_extract(return_eigenvectors, howmny, sselect, sigmar, sigmai, workev, self.bmat, self.which, k, self.tol, self.resid, self.v, self.iparam, self.ipntr, self.workd, self.workl, self.info)
A:scipy.sparse.linalg._eigen.arpack.arpack.z->numpy.zeros((n, k + 1), self.tp).astype(self.tp.upper())
A:scipy.sparse.linalg._eigen.arpack.arpack.z[:, i + 1]->z[:, i].conjugate()
A:scipy.sparse.linalg._eigen.arpack.arpack.d[i]->numpy.dot(zr[:, i], self.matvec(zr[:, i]))
A:scipy.sparse.linalg._eigen.arpack.arpack.d[i + 1]->numpy.dot(zr[:, i], self.matvec(zr[:, i])).conj()
A:scipy.sparse.linalg._eigen.arpack.arpack.ind->numpy.argsort(abs(rd))
A:scipy.sparse.linalg._eigen.arpack.arpack.m->aslinearoperator(m)
A:scipy.sparse.linalg._eigen.arpack.arpack.x->numpy.zeros(A.shape[1])
A:scipy.sparse.linalg._eigen.arpack.arpack.self.M_lu->lu_factor(M)
A:scipy.sparse.linalg._eigen.arpack.arpack.b->numpy.asarray(b)
A:scipy.sparse.linalg._eigen.arpack.arpack.(b, info)->self.ifunc(self.OP, x, tol=self.tol)
A:scipy.sparse.linalg._eigen.arpack.arpack.self.OP->LinearOperator(self.A.shape, mult_func, dtype=dtype)
A:scipy.sparse.linalg._eigen.arpack.arpack.M->_aslinearoperator_with_dtype(M)
A:scipy.sparse.linalg._eigen.arpack.arpack.A->_aslinearoperator_with_dtype(A)
A:scipy.sparse.linalg._eigen.arpack.arpack.OP->_fast_spmatrix_to_csc(OP, hermitian=hermitian)
A:scipy.sparse.linalg._eigen.arpack.arpack._ARPACK_LOCK->ReentrancyLock('Nested calls to eigs/eighs not allowed: ARPACK is not re-entrant')
A:scipy.sparse.linalg._eigen.arpack.arpack.Minv_matvec->get_OPinv_matvec(A, M, sigma, hermitian=True, tol=tol)
A:scipy.sparse.linalg._eigen.arpack.arpack.Minv->_aslinearoperator_with_dtype(Minv)
A:scipy.sparse.linalg._eigen.arpack.arpack.OPinv->_aslinearoperator_with_dtype(OPinv)
A:scipy.sparse.linalg._eigen.arpack.arpack.params->_SymmetricArpackParams(n, k, A.dtype.char, matvec, mode, M_matvec, Minv_matvec, sigma, ncv, v0, maxiter, which, tol)
A:scipy.sparse.linalg._eigen.arpack.arpack.ret->eigs(A, k, M=M, sigma=sigma, which=which, v0=v0, ncv=ncv, maxiter=maxiter, tol=tol, return_eigenvectors=return_eigenvectors, Minv=Minv, OPinv=OPinv)
scipy.sparse.linalg.ArpackError(self,info,infodict=_NAUPD_ERRORS)
scipy.sparse.linalg.ArpackNoConvergence(self,msg,eigenvalues,eigenvectors)
scipy.sparse.linalg.IterInv(self,M,ifunc=gmres_loose,tol=0)
scipy.sparse.linalg.IterInv._matvec(self,x)
scipy.sparse.linalg.IterOpInv(self,A,M,sigma,ifunc=gmres_loose,tol=0)
scipy.sparse.linalg.IterOpInv._matvec(self,x)
scipy.sparse.linalg.IterOpInv.dtype(self)
scipy.sparse.linalg.LuInv(self,M)
scipy.sparse.linalg.LuInv._matvec(self,x)
scipy.sparse.linalg.SpLuInv(self,M)
scipy.sparse.linalg.SpLuInv._matvec(self,x)
scipy.sparse.linalg._ArpackParams(self,n,k,tp,mode=1,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
scipy.sparse.linalg._ArpackParams._raise_no_convergence(self)
scipy.sparse.linalg._SymmetricArpackParams(self,n,k,tp,matvec,mode=1,M_matvec=None,Minv_matvec=None,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
scipy.sparse.linalg._SymmetricArpackParams.extract(self,return_eigenvectors)
scipy.sparse.linalg._SymmetricArpackParams.iterate(self)
scipy.sparse.linalg._UnsymmetricArpackParams(self,n,k,tp,matvec,mode=1,M_matvec=None,Minv_matvec=None,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
scipy.sparse.linalg._UnsymmetricArpackParams.extract(self,return_eigenvectors)
scipy.sparse.linalg._UnsymmetricArpackParams.iterate(self)
scipy.sparse.linalg._aslinearoperator_with_dtype(m)
scipy.sparse.linalg._eigen.arpack.arpack.ArpackError(self,info,infodict=_NAUPD_ERRORS)
scipy.sparse.linalg._eigen.arpack.arpack.ArpackError.__init__(self,info,infodict=_NAUPD_ERRORS)
scipy.sparse.linalg._eigen.arpack.arpack.ArpackNoConvergence(self,msg,eigenvalues,eigenvectors)
scipy.sparse.linalg._eigen.arpack.arpack.ArpackNoConvergence.__init__(self,msg,eigenvalues,eigenvectors)
scipy.sparse.linalg._eigen.arpack.arpack.IterInv(self,M,ifunc=gmres_loose,tol=0)
scipy.sparse.linalg._eigen.arpack.arpack.IterInv.__init__(self,M,ifunc=gmres_loose,tol=0)
scipy.sparse.linalg._eigen.arpack.arpack.IterInv._matvec(self,x)
scipy.sparse.linalg._eigen.arpack.arpack.IterOpInv(self,A,M,sigma,ifunc=gmres_loose,tol=0)
scipy.sparse.linalg._eigen.arpack.arpack.IterOpInv.__init__(self,A,M,sigma,ifunc=gmres_loose,tol=0)
scipy.sparse.linalg._eigen.arpack.arpack.IterOpInv._matvec(self,x)
scipy.sparse.linalg._eigen.arpack.arpack.IterOpInv.dtype(self)
scipy.sparse.linalg._eigen.arpack.arpack.LuInv(self,M)
scipy.sparse.linalg._eigen.arpack.arpack.LuInv.__init__(self,M)
scipy.sparse.linalg._eigen.arpack.arpack.LuInv._matvec(self,x)
scipy.sparse.linalg._eigen.arpack.arpack.SpLuInv(self,M)
scipy.sparse.linalg._eigen.arpack.arpack.SpLuInv.__init__(self,M)
scipy.sparse.linalg._eigen.arpack.arpack.SpLuInv._matvec(self,x)
scipy.sparse.linalg._eigen.arpack.arpack._ArpackParams(self,n,k,tp,mode=1,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
scipy.sparse.linalg._eigen.arpack.arpack._ArpackParams.__init__(self,n,k,tp,mode=1,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
scipy.sparse.linalg._eigen.arpack.arpack._ArpackParams._raise_no_convergence(self)
scipy.sparse.linalg._eigen.arpack.arpack._SymmetricArpackParams(self,n,k,tp,matvec,mode=1,M_matvec=None,Minv_matvec=None,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
scipy.sparse.linalg._eigen.arpack.arpack._SymmetricArpackParams.__init__(self,n,k,tp,matvec,mode=1,M_matvec=None,Minv_matvec=None,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
scipy.sparse.linalg._eigen.arpack.arpack._SymmetricArpackParams.extract(self,return_eigenvectors)
scipy.sparse.linalg._eigen.arpack.arpack._SymmetricArpackParams.iterate(self)
scipy.sparse.linalg._eigen.arpack.arpack._UnsymmetricArpackParams(self,n,k,tp,matvec,mode=1,M_matvec=None,Minv_matvec=None,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
scipy.sparse.linalg._eigen.arpack.arpack._UnsymmetricArpackParams.__init__(self,n,k,tp,matvec,mode=1,M_matvec=None,Minv_matvec=None,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
scipy.sparse.linalg._eigen.arpack.arpack._UnsymmetricArpackParams.extract(self,return_eigenvectors)
scipy.sparse.linalg._eigen.arpack.arpack._UnsymmetricArpackParams.iterate(self)
scipy.sparse.linalg._eigen.arpack.arpack._aslinearoperator_with_dtype(m)
scipy.sparse.linalg._eigen.arpack.arpack._fast_spmatrix_to_csc(A,hermitian=False)
scipy.sparse.linalg._eigen.arpack.arpack.choose_ncv(k)
scipy.sparse.linalg._eigen.arpack.arpack.eigs(A,k=6,M=None,sigma=None,which='LM',v0=None,ncv=None,maxiter=None,tol=0,return_eigenvectors=True,Minv=None,OPinv=None,OPpart=None)
scipy.sparse.linalg._eigen.arpack.arpack.eigsh(A,k=6,M=None,sigma=None,which='LM',v0=None,ncv=None,maxiter=None,tol=0,return_eigenvectors=True,Minv=None,OPinv=None,mode='normal')
scipy.sparse.linalg._eigen.arpack.arpack.get_OPinv_matvec(A,M,sigma,hermitian=False,tol=0)
scipy.sparse.linalg._eigen.arpack.arpack.get_inv_matvec(M,hermitian=False,tol=0)
scipy.sparse.linalg._eigen.arpack.arpack.gmres_loose(A,b,tol)
scipy.sparse.linalg._fast_spmatrix_to_csc(A,hermitian=False)
scipy.sparse.linalg.choose_ncv(k)
scipy.sparse.linalg.eigs(A,k=6,M=None,sigma=None,which='LM',v0=None,ncv=None,maxiter=None,tol=0,return_eigenvectors=True,Minv=None,OPinv=None,OPpart=None)
scipy.sparse.linalg.eigsh(A,k=6,M=None,sigma=None,which='LM',v0=None,ncv=None,maxiter=None,tol=0,return_eigenvectors=True,Minv=None,OPinv=None,mode='normal')
scipy.sparse.linalg.get_OPinv_matvec(A,M,sigma,hermitian=False,tol=0)
scipy.sparse.linalg.get_inv_matvec(M,hermitian=False,tol=0)
scipy.sparse.linalg.gmres_loose(A,b,tol)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_eigen/arpack/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_eigen/arpack/tests/test_arpack.py----------------------------------------
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.M->generate_matrix(N, hermitian=True, pos_definite=True).astype('f').astype('d')
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.i->numpy.random.randint(N, size=N * N // 2)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.j->numpy.random.randint(N, size=N * N // 2)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.(i, j)->numpy.meshgrid(i, j)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.ind->argsort_which(eigenvalues, typ, k, which, sigma, OPpart, mode)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.m->generate_matrix(30, complex_=True)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.x->diags([1, -2, 1], [-1, 0, 1], shape=(50, 50))
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.reval->numpy.round(reval, decimals=_ndigits[typ])
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.a->d['mat'].astype(typ)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.ac->mattype(a)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.b->d['bmat'].astype(typ)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.bc->mattype(b)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.exact_eval->d['eval'].astype(typ.upper())
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.kwargs->dict(which=which, v0=v0, sigma=sigma)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.(kwargs['tol'], rtol, atol)->_get_test_tolerance(typ, mattype, d, which)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.(eigenvalues, evec)->eigs_func(ac, k, **kwargs)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.LHS->numpy.dot(a, evec)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.Ar->generate_matrix(N).astype('f').astype('d')
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.Ac->generate_matrix(N, complex_=True).astype('F').astype('D')
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.Mc->generate_matrix(N, hermitian=True, pos_definite=True, complex_=True).astype('F').astype('D')
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.v0->numpy.ones(n)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.SS->DictWithRepr('std-symmetric')
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.SS['eval']->eigh(SS['mat'], eigvals_only=True)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.GS->DictWithRepr('gen-symmetric')
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.GS['eval']->eigh(GS['mat'], GS['bmat'], eigvals_only=True)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.SH->DictWithRepr('std-hermitian')
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.SH['eval']->eigh(SH['mat'], eigvals_only=True)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.GH->DictWithRepr('gen-hermitian')
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.GH['eval']->eigh(GH['mat'], GH['bmat'], eigvals_only=True)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.GHc->DictWithRepr('gen-hermitian-Mc')
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.GHc['eval']->eigh(GHc['mat'], GHc['bmat'], eigvals_only=True)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.SNR->DictWithRepr('std-real-nonsym')
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.SNR['eval']->eig(SNR['mat'], left=False, right=False)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.GNR->DictWithRepr('gen-real-nonsym')
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.GNR['eval']->eig(GNR['mat'], GNR['bmat'], left=False, right=False)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.SNC->DictWithRepr('std-cmplx-nonsym')
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.SNC['eval']->eig(SNC['mat'], left=False, right=False)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.GNC->DictWithRepr('gen-cmplx-nonsym')
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.GNC['eval']->eig(GNC['mat'], GNC['bmat'], left=False, right=False)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.params->NonSymmetricParams()
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.(tol, rtol, atol)->_get_test_tolerance('d')
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.(w, v)->eigs(A, k=9, ncv=2 * 9 + 1, which='LM', v0=v0)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.k->len(err.eigenvalues)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.A->rand(n, n, density=0.5)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.(evals, evecs)->eigs(A, k, v0=v0)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.M_d->numpy.eye(10)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.M_s->csc_matrix(M_d)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.M_o->aslinearoperator(M_d)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.w0->numpy.arange(1, 1000 + 1).astype(dtype)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.A_sparse->diags([1, -2, 1], [-1, 0, 1], shape=(4, 4))
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.M_dense->generate_matrix_symmetric(4, pos_definite=True)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.M_sparse->generate_matrix_symmetric(4, pos_definite=True, sparse=True)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.M_linop->aslinearoperator(M_dense)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.eig_tuple1->eigh(A, b=M_dense)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.eig_tuple2->eigh(A, b=M_sparse)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.prev_w->numpy.array([], dtype=dtype)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.(w, z)->eigs(A.astype(dtype), k=k, which=which, sigma=sigma, v0=v0.astype(dtype), tol=0)
A:scipy.sparse.linalg._eigen.arpack.tests.test_arpack.dist->abs(prev_w[:, None] - w).min(axis=1)
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.DictWithRepr(self,name)
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.DictWithRepr.__init__(self,name)
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.DictWithRepr.__repr__(self)
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.NonSymmetricParams(self)
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.NonSymmetricParams.__init__(self)
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.SymmetricParams(self)
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.SymmetricParams.__init__(self)
scipy.sparse.linalg._eigen.arpack.tests.test_arpack._aslinearoperator_with_dtype(m)
scipy.sparse.linalg._eigen.arpack.tests.test_arpack._get_test_tolerance(type_char,mattype=None,D_type=None,which=None)
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.argsort_which(eigenvalues,typ,k,which,sigma=None,OPpart=None,mode=None)
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.assert_allclose_cc(actual,desired,**kw)
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.eval_evec(symmetric,d,typ,k,which,v0=None,sigma=None,mattype=np.asarray,OPpart=None,mode='normal')
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.generate_matrix(N,complex_=False,hermitian=False,pos_definite=False,sparse=False)
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.generate_matrix_symmetric(N,pos_definite=False,sparse=False)
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.test_complex_nonsymmetric_modes()
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.test_eigen_bad_kwargs()
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.test_eigen_bad_shapes()
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.test_eigs_for_k_greater()
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.test_eigsh_for_k_greater()
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.test_general_nonsymmetric_starting_vector()
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.test_hermitian_modes()
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.test_linearoperator_deallocation()
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.test_parallel_threads()
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.test_real_eigs_real_k_subset()
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.test_real_nonsymmetric_modes()
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.test_reentering()
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.test_regression_arpackng_1315()
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.test_standard_nonsymmetric_no_convergence()
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.test_standard_nonsymmetric_starting_vector()
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.test_symmetric_modes()
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.test_symmetric_no_convergence()
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.test_symmetric_starting_vector()
scipy.sparse.linalg._eigen.arpack.tests.test_arpack.test_ticket_1459_arpack_crash()
scipy.sparse.linalg.tests.test_DictWithRepr(self,name)
scipy.sparse.linalg.tests.test_DictWithRepr.__repr__(self)
scipy.sparse.linalg.tests.test_NonSymmetricParams(self)
scipy.sparse.linalg.tests.test_SymmetricParams(self)
scipy.sparse.linalg.tests.test__aslinearoperator_with_dtype(m)
scipy.sparse.linalg.tests.test__get_test_tolerance(type_char,mattype=None,D_type=None,which=None)
scipy.sparse.linalg.tests.test_argsort_which(eigenvalues,typ,k,which,sigma=None,OPpart=None,mode=None)
scipy.sparse.linalg.tests.test_assert_allclose_cc(actual,desired,**kw)
scipy.sparse.linalg.tests.test_eval_evec(symmetric,d,typ,k,which,v0=None,sigma=None,mattype=np.asarray,OPpart=None,mode='normal')
scipy.sparse.linalg.tests.test_generate_matrix(N,complex_=False,hermitian=False,pos_definite=False,sparse=False)
scipy.sparse.linalg.tests.test_generate_matrix_symmetric(N,pos_definite=False,sparse=False)
scipy.sparse.linalg.tests.test_test_complex_nonsymmetric_modes()
scipy.sparse.linalg.tests.test_test_eigen_bad_kwargs()
scipy.sparse.linalg.tests.test_test_eigen_bad_shapes()
scipy.sparse.linalg.tests.test_test_eigs_for_k_greater()
scipy.sparse.linalg.tests.test_test_eigsh_for_k_greater()
scipy.sparse.linalg.tests.test_test_general_nonsymmetric_starting_vector()
scipy.sparse.linalg.tests.test_test_hermitian_modes()
scipy.sparse.linalg.tests.test_test_linearoperator_deallocation()
scipy.sparse.linalg.tests.test_test_parallel_threads()
scipy.sparse.linalg.tests.test_test_real_eigs_real_k_subset()
scipy.sparse.linalg.tests.test_test_real_nonsymmetric_modes()
scipy.sparse.linalg.tests.test_test_reentering()
scipy.sparse.linalg.tests.test_test_regression_arpackng_1315()
scipy.sparse.linalg.tests.test_test_standard_nonsymmetric_no_convergence()
scipy.sparse.linalg.tests.test_test_standard_nonsymmetric_starting_vector()
scipy.sparse.linalg.tests.test_test_symmetric_modes()
scipy.sparse.linalg.tests.test_test_symmetric_no_convergence()
scipy.sparse.linalg.tests.test_test_symmetric_starting_vector()
scipy.sparse.linalg.tests.test_test_ticket_1459_arpack_crash()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_eigen/arpack/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_eigen/lobpcg/lobpcg.py----------------------------------------
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.nmd->norm(md, 1)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.tol->max(tol, tol * norm(M, 1))
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.aux->numpy.sum(blockVectorR.conj() * blockVectorR, 0)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.YBV->numpy.dot(blockVectorBY.T.conj(), blockVectorV)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.tmp->cho_solve(factYBY, YBV)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.blockVectorBV->B(blockVectorV)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.VBV->inv(VBV, overwrite_a=True)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.ii->_get_indx(_lambda, sizeX, largest)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.blockVectorX->numpy.dot(blockVectorX, eigBlockVector)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.lambdaHistory->numpy.vsplit(lambdaHistory, np.shape(lambdaHistory)[0])
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.residualNormsHistory->numpy.vsplit(residualNormsHistory, np.shape(residualNormsHistory)[0])
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.sizeX->min(sizeX, n)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.A->_makeMatMat(A)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.B->_makeMatMat(B)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.(vals, vecs)->eigh(A, B, subset_by_index=eigvals, check_finite=False)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.M->_makeMatMat(M)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.blockVectorBY->B(blockVectorY)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.gramYBY->cho_factor(gramYBY)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.(blockVectorX, blockVectorBX, _, _)->_b_orthonormalize(B, blockVectorX, verbosityLevel=verbosityLevel)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.blockVectorAX->numpy.dot(blockVectorAX, eigBlockVector)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.gramXAX->numpy.dot(blockVectorX.T.conj(), blockVectorAX)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.(_lambda, eigBlockVector)->eigh(gramXAX, gramXBX, check_finite=False)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.eigBlockVector->numpy.asarray(eigBlockVector[:, ii])
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.blockVectorBX->numpy.dot(blockVectorBX, eigBlockVector)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.activeMask->numpy.ones((sizeX,), dtype=bool)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.smallestResidualNorm->numpy.abs(np.finfo(blockVectorX.dtype).max)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.residualNorms->numpy.sqrt(np.abs(aux))
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.currentBlockSize->numpy.ones((sizeX,), dtype=bool).sum()
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.activeBlockVectorR->M(activeBlockVectorR)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.activeBlockVectorP->_as2d(blockVectorP[:, activeMask])
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.activeBlockVectorAP->numpy.dot(activeBlockVectorAP, invR)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.activeBlockVectorBP->_as2d(blockVectorBP[:, activeMask])
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.activeBlockVectorAR->A(activeBlockVectorR)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.myeps->numpy.sqrt(np.finfo(activeBlockVectorR.dtype).eps)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.gramXAR->numpy.dot(blockVectorX.T.conj(), activeBlockVectorAR)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.gramRAR->numpy.dot(activeBlockVectorR.T.conj(), activeBlockVectorAR)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.gramXBX->numpy.dot(blockVectorX.T.conj(), blockVectorBX)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.gramRBR->numpy.eye(currentBlockSize, dtype=gramDtype)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.gramXBR->numpy.zeros((sizeX, currentBlockSize), dtype=gramDtype)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.gramXAP->numpy.dot(blockVectorX.T.conj(), activeBlockVectorAP)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.gramRAP->numpy.dot(activeBlockVectorR.T.conj(), activeBlockVectorAP)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.gramPAP->numpy.dot(activeBlockVectorP.T.conj(), activeBlockVectorAP)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.gramXBP->numpy.dot(blockVectorX.T.conj(), activeBlockVectorBP)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.gramRBP->numpy.dot(activeBlockVectorR.T.conj(), activeBlockVectorBP)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.gramPBP->numpy.eye(currentBlockSize, dtype=gramDtype)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.gramA->bmat([[gramXAX, gramXAR], [gramXAR.T.conj(), gramRAR]])
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.gramB->bmat([[gramXBX, gramXBR], [gramXBR.T.conj(), gramRBR]])
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.pp->numpy.dot(activeBlockVectorR, eigBlockVectorR)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.app->numpy.dot(activeBlockVectorAR, eigBlockVectorR)
A:scipy.sparse.linalg._eigen.lobpcg.lobpcg.bpp->numpy.dot(activeBlockVectorBR, eigBlockVectorR)
scipy.sparse.linalg._applyConstraints(blockVectorV,factYBY,blockVectorBY,blockVectorY)
scipy.sparse.linalg._as2d(ar)
scipy.sparse.linalg._b_orthonormalize(B,blockVectorV,blockVectorBV=None,verbosityLevel=0)
scipy.sparse.linalg._eigen.lobpcg.lobpcg._applyConstraints(blockVectorV,factYBY,blockVectorBY,blockVectorY)
scipy.sparse.linalg._eigen.lobpcg.lobpcg._as2d(ar)
scipy.sparse.linalg._eigen.lobpcg.lobpcg._b_orthonormalize(B,blockVectorV,blockVectorBV=None,verbosityLevel=0)
scipy.sparse.linalg._eigen.lobpcg.lobpcg._get_indx(_lambda,num,largest)
scipy.sparse.linalg._eigen.lobpcg.lobpcg._handle_gramA_gramB_verbosity(gramA,gramB,verbosityLevel)
scipy.sparse.linalg._eigen.lobpcg.lobpcg._makeMatMat(m)
scipy.sparse.linalg._eigen.lobpcg.lobpcg._report_nonhermitian(M,name)
scipy.sparse.linalg._eigen.lobpcg.lobpcg.lobpcg(A,X,B=None,M=None,Y=None,tol=None,maxiter=None,largest=True,verbosityLevel=0,retLambdaHistory=False,retResidualNormsHistory=False,restartControl=20)
scipy.sparse.linalg._get_indx(_lambda,num,largest)
scipy.sparse.linalg._handle_gramA_gramB_verbosity(gramA,gramB,verbosityLevel)
scipy.sparse.linalg._makeMatMat(m)
scipy.sparse.linalg._report_nonhermitian(M,name)
scipy.sparse.linalg.lobpcg(A,X,B=None,M=None,Y=None,tol=None,maxiter=None,largest=True,verbosityLevel=0,retLambdaHistory=False,retResidualNormsHistory=False,restartControl=20)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_eigen/lobpcg/__init__.py----------------------------------------
A:scipy.sparse.linalg._eigen.lobpcg.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_eigen/lobpcg/tests/test_lobpcg.py----------------------------------------
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.x->numpy.arange(1, n + 1)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.B->numpy.eye(s)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.y->numpy.arange(n - 1, 0, -1)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.z->numpy.arange(2 * n - 1, 0, -2)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.rnd->numpy.random.RandomState(0)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.V->numpy.random.RandomState(0).random((n, m))
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.X->X.astype(np.float64).astype(np.float64)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.(eigvals, _)->lobpcg(A, X, B=B, M=M, Y=Y, tol=0.0001, maxiter=100, largest=False)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.(w, _)->lobpcg(A, X)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.(A, B)->MikotaPair(20)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.A->A.astype(np.float32).astype(np.float32)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.(_, _)->lobpcg(A, Q, maxiter=3, verbosityLevel=9)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.(out, err)->capsys.readouterr()
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.vals->numpy.arange(1, n + 1)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.A_s->diags([vals], [0], (n, n))
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.A_a->diags([vals], [0], (n, n)).toarray()
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.A_lo->LinearOperator(matvec=A_f, matmat=A_f, shape=(n, n), dtype=float)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.B_a->eye(n)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.B_s->csr_matrix(B_a)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.B_lo->LinearOperator(matvec=B_f, matmat=B_f, shape=(n, n), dtype=float)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.M_s->diags([1.0 / vals], [0], (n, n))
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.M_a->diags([1.0 / vals], [0], (n, n)).toarray()
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.M_lo->LinearOperator(matvec=M_f, matmat=M_f, shape=(n, n), dtype=float)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.Y->numpy.eye(n, m_excluded)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.(eigvals, vecs)->lobpcg(A, X, B, M=M, Y=Y, maxiter=40, largest=False)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.mult_wV->numpy.multiply(w, V)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.dot_MV->M.dot(V)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.col->numpy.zeros(n)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.D->numpy.diag(A.sum(axis=1))
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.analytic_V->numpy.cos(np.outer(np.arange(n) + 1 / 2, tmp))
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.(eigh_w, eigh_V)->eigh(L)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.(lobpcg_w, lobpcg_V)->lobpcg(L, X, largest=True)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.fiedler_guess->numpy.concatenate((np.ones(n // 2), -np.ones(n - n // 2)))
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.(lobpcg_w, _)->lobpcg(L, X, largest=False)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.lobpcg_w->numpy.sort(lobpcg_w)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.Q->numpy.random.RandomState(0).standard_normal((X.shape[0], 1))
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.(eigenvalues, _)->lobpcg(A, Q, maxiter=20)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.(w, v)->lobpcg(H, X, B, maxiter=5000, largest=False)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.(w0, _)->eigh(H, B)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.j->numpy.argmin(abs(w0 - wx))
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.(lvals, lvecs)->lobpcg(A, X, largest=True, maxiter=100)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.(vals, _)->eigs(A, k=2)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.(_, _, l_h, r_h)->lobpcg(A, X, tol=1e-08, maxiter=maxiter, retLambdaHistory=True, retResidualNormsHistory=True)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.(l, _, l_h, r_h)->lobpcg(A, X, tol=1e-08, retLambdaHistory=True, retResidualNormsHistory=True)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.sparse_formats->len(list_sparse_format)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.As64->diags([vals * vals], [0], (n, n), format=s_f)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.As32->diags([vals * vals], [0], (n, n), format=s_f).astype(np.float32)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.Af64->diags([vals * vals], [0], (n, n), format=s_f).toarray()
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.Af32->diags([vals * vals], [0], (n, n), format=s_f).toarray().astype(np.float32)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.As32LO->LinearOperator(matvec=As32f, matmat=As32f, shape=(n, n), dtype=As32.dtype)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.Bs64->diags([vals], [0], (n, n), format=s_f)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.Bf64->diags([vals], [0], (n, n), format=s_f).toarray()
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.Bs32->diags([vals], [0], (n, n), format=s_f).astype(np.float32)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.Bs32LO->LinearOperator(matvec=Bs32f, matmat=Bs32f, shape=(n, n), dtype=Bs32.dtype)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.Ms64->diags([1.0 / vals], [0], (n, n), format=s_f)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.Ms64precondLO->LinearOperator(matvec=Ms64precond, matmat=Ms64precond, shape=(n, n), dtype=Ms64.dtype)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.Mf64->diags([1.0 / vals], [0], (n, n), format=s_f).toarray()
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.Mf64precondLO->LinearOperator(matvec=Mf64precond, matmat=Mf64precond, shape=(n, n), dtype=Mf64.dtype)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.Ms32->diags([1.0 / vals], [0], (n, n), format=s_f).astype(np.float32)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.Ms32precondLO->LinearOperator(matvec=Ms32precond, matmat=Ms32precond, shape=(n, n), dtype=Ms32.dtype)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.Mf32->diags([1.0 / vals], [0], (n, n), format=s_f).astype(np.float32).toarray()
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.Mf32precondLO->LinearOperator(matvec=Mf32precond, matmat=Mf32precond, shape=(n, n), dtype=Mf32.dtype)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.Xf64->numpy.random.RandomState(0).random((n, m))
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.Xf32->numpy.random.RandomState(0).random((n, m)).astype(np.float32)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.Yf64->numpy.eye(n, m_excluded, dtype=float)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.Yf32->numpy.eye(n, m_excluded, dtype=np.float32)
A:scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.tests->list(itertools.product(listA, listB, listM, listX, listY))
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.ElasticRod(n)
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.MikotaPair(n)
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg._check_eigen(M,w,V,rtol=1e-08,atol=1e-14)
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg._check_fiedler(n,p)
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.compare_solutions(A,B,m)
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.test_ElasticRod()
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.test_MikotaPair()
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.test_Small()
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.test_diagonal(n,m,m_excluded)
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.test_diagonal_data_types(n,m)
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.test_eigs_consistency(n,atol)
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.test_failure_to_run_iterations()
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.test_failure_to_run_iterations_nonsymmetric()
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.test_fiedler_large_12()
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.test_fiedler_small_8()
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.test_hermitian()
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.test_maxit()
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.test_nonhermitian_warning(capsys)
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.test_random_initial_float32()
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.test_regression()
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.test_tolerance_float32()
scipy.sparse.linalg._eigen.lobpcg.tests.test_lobpcg.test_verbosity()
scipy.sparse.linalg.tests.test_ElasticRod(n)
scipy.sparse.linalg.tests.test_MikotaPair(n)
scipy.sparse.linalg.tests.test__check_eigen(M,w,V,rtol=1e-08,atol=1e-14)
scipy.sparse.linalg.tests.test__check_fiedler(n,p)
scipy.sparse.linalg.tests.test_compare_solutions(A,B,m)
scipy.sparse.linalg.tests.test_test_ElasticRod()
scipy.sparse.linalg.tests.test_test_MikotaPair()
scipy.sparse.linalg.tests.test_test_Small()
scipy.sparse.linalg.tests.test_test_diagonal(n,m,m_excluded)
scipy.sparse.linalg.tests.test_test_diagonal_data_types(n,m)
scipy.sparse.linalg.tests.test_test_eigs_consistency(n,atol)
scipy.sparse.linalg.tests.test_test_failure_to_run_iterations()
scipy.sparse.linalg.tests.test_test_failure_to_run_iterations_nonsymmetric()
scipy.sparse.linalg.tests.test_test_fiedler_large_12()
scipy.sparse.linalg.tests.test_test_fiedler_small_8()
scipy.sparse.linalg.tests.test_test_hermitian()
scipy.sparse.linalg.tests.test_test_maxit()
scipy.sparse.linalg.tests.test_test_nonhermitian_warning(capsys)
scipy.sparse.linalg.tests.test_test_random_initial_float32()
scipy.sparse.linalg.tests.test_test_regression()
scipy.sparse.linalg.tests.test_test_tolerance_float32()
scipy.sparse.linalg.tests.test_test_verbosity()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/sparse/linalg/_eigen/lobpcg/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/_signaltools.py----------------------------------------
A:scipy.signal._signaltools.axes->range(len(shape1))
A:scipy.signal._signaltools.ok1->all((shape1[i] >= shape2[i] for i in axes))
A:scipy.signal._signaltools.ok2->all((shape2[i] >= shape1[i] for i in axes))
A:scipy.signal._signaltools.in1->numpy.asarray(in1)
A:scipy.signal._signaltools.in2->numpy.asarray(in2)
A:scipy.signal._signaltools.out->_sigtools._convolve2d(in1, in2.conj(), 0, val, bval, fillvalue)
A:scipy.signal._signaltools.z->_reverse_and_conj(z)
A:scipy.signal._signaltools.in1zpadded->numpy.zeros(ps, in1.dtype)
A:scipy.signal._signaltools.sc->tuple((slice(0, i) for i in in1.shape))
A:scipy.signal._signaltools.in1zpadded[sc]->numpy.asarray(in1).copy()
A:scipy.signal._signaltools.lags->numpy.arange(lag_bound, 1)
A:scipy.signal._signaltools.newshape->list(x.shape)
A:scipy.signal._signaltools.currshape->numpy.array(arr.shape)
A:scipy.signal._signaltools.(_, axes)->_init_nd_shape_and_axes(in1, shape=None, axes=axes)
A:scipy.signal._signaltools.sp1->fft(in1, fshape, axes=axes)
A:scipy.signal._signaltools.sp2->fft(in2, fshape, axes=axes)
A:scipy.signal._signaltools.ret->numpy.transpose(ret, tuple(olddims))
A:scipy.signal._signaltools.fslice->tuple([slice(sz) for sz in shape])
A:scipy.signal._signaltools.(in1, in2, axes)->_init_freq_conv_axes(in1, in2, mode, axes, sorted_axes=True)
A:scipy.signal._signaltools.block_size->scipy.fft.next_fast_len(math.ceil(opt_size))
A:scipy.signal._signaltools.(block_size, overlaps, in1_step, in2_step)->zip(*optimal_sizes)
A:scipy.signal._signaltools.curnstep1->math.ceil((s1[i] + 1) / in1_step[i])
A:scipy.signal._signaltools.curnstep2->math.ceil((s2[i] + 1) / in2_step[i])
A:scipy.signal._signaltools.reshape_size1->list(in1_step)
A:scipy.signal._signaltools.reshape_size2->list(in2_step)
A:scipy.signal._signaltools.(ret, overpart)->numpy.split(ret, [-overlap], ax_fft)
A:scipy.signal._signaltools.slice_final->tuple([slice(islice) for islice in shape_final])
A:scipy.signal._signaltools.N->min(num, Nx)
A:scipy.signal._signaltools.(fft_ops, direct_ops)->_conv_ops(x.shape, h.shape, mode)
A:scipy.signal._signaltools.timer->timeit.Timer(stmt, setup)
A:scipy.signal._signaltools.x->numpy.asarray(x)
A:scipy.signal._signaltools.r->numpy.atleast_1d(r)
A:scipy.signal._signaltools.best->min(r)
A:scipy.signal._signaltools.volume->numpy.atleast_1d(volume)
A:scipy.signal._signaltools.kernel->numpy.asarray(in2)
A:scipy.signal._signaltools.times[method]->_timeit_fast(lambda : convolve(volume, kernel, mode=mode, method=method))
A:scipy.signal._signaltools.method->choose_conv_method(volume, kernel, mode=mode)
A:scipy.signal._signaltools.result_type->numpy.result_type(np.asarray(b), np.asarray(a), y, x)
A:scipy.signal._signaltools.domain->numpy.ones(kernel_size, dtype=volume.dtype)
A:scipy.signal._signaltools.kernel_size->numpy.repeat(kernel_size.item(), 2)
A:scipy.signal._signaltools.numels->numpy.prod(kernel_size, axis=0)
A:scipy.signal._signaltools.im->numpy.asarray(im)
A:scipy.signal._signaltools.mysize->numpy.repeat(mysize.item(), im.ndim)
A:scipy.signal._signaltools.noise->numpy.mean(np.ravel(lVar), axis=0)
A:scipy.signal._signaltools.val->_valfrommode(mode)
A:scipy.signal._signaltools.bval->_bvalfromboundary(boundary)
A:scipy.signal._signaltools.swapped_inputs->_inputs_swap_needed(mode, in1.shape, in2.shape)
A:scipy.signal._signaltools.image->numpy.asarray(input)
A:scipy.signal._signaltools.a->numpy.asarray(a, dtype=result_type)
A:scipy.signal._signaltools.b->numpy.asarray(b, dtype=result_type)
A:scipy.signal._signaltools.zi->sosfilt_zi(sos)
A:scipy.signal._signaltools.expected_shape->tuple(expected_shape)
A:scipy.signal._signaltools.dtype->numpy.result_type(*inputs)
A:scipy.signal._signaltools.out_full->numpy.apply_along_axis(lambda y: np.convolve(b, y), axis, x)
A:scipy.signal._signaltools.ind[axis]->slice(None)
A:scipy.signal._signaltools.K->max(M, N)
A:scipy.signal._signaltools.y->sosfilt(sos, x, axis=axis)
A:scipy.signal._signaltools.L->numpy.size(y)
A:scipy.signal._signaltools.zi[m]->numpy.sum(b[m + 1:] * x[:M - m], axis=0)
A:scipy.signal._signaltools.num->numpy.atleast_1d(signal)
A:scipy.signal._signaltools.den->numpy.atleast_1d(divisor)
A:scipy.signal._signaltools.D->len(den)
A:scipy.signal._signaltools.input->numpy.zeros(N - D + 1, float)
A:scipy.signal._signaltools.quot->lfilter(num, den, input)
A:scipy.signal._signaltools.Xf->scipy.fft.fft2(x, N, axes=(0, 1))
A:scipy.signal._signaltools.h->numpy.concatenate((np.zeros(n_pre_pad, dtype=h.dtype), h, np.zeros(n_post_pad, dtype=h.dtype)))
A:scipy.signal._signaltools.h1->numpy.zeros(N[0], dtype=Xf.dtype)
A:scipy.signal._signaltools.h2->numpy.zeros(N[1], dtype=Xf.dtype)
A:scipy.signal._signaltools.p->numpy.atleast_1d(p)
A:scipy.signal._signaltools.indx->numpy.argsort(abs(p))
A:scipy.signal._signaltools.points->numpy.empty((len(p), 2))
A:scipy.signal._signaltools.points[:, 0]->numpy.real(p)
A:scipy.signal._signaltools.points[:, 1]->numpy.imag(p)
A:scipy.signal._signaltools.tree->cKDTree(points)
A:scipy.signal._signaltools.used->numpy.zeros(len(p), dtype=bool)
A:scipy.signal._signaltools.group->cKDTree(points).query_ball_point(points[i], tol)
A:scipy.signal._signaltools.k->numpy.trim_zeros(np.atleast_1d(k), 'b')
A:scipy.signal._signaltools.(unique_poles, multiplicity)->_group_poles(p, tol, rtype)
A:scipy.signal._signaltools.(factors, denominator)->_compute_factors(unique_poles, multiplicity, include_powers=True)
A:scipy.signal._signaltools.numerator->numpy.polyadd(numerator, residue * factor[::-1])
A:scipy.signal._signaltools.current->numpy.polymul(current, monomial)
A:scipy.signal._signaltools.monomial->numpy.array([1, -pole])
A:scipy.signal._signaltools.(denominator_factors, _)->_compute_factors(poles, multiplicity)
A:scipy.signal._signaltools.numer->numpy.polysub(numer, r * factor)
A:scipy.signal._signaltools.(factor, d)->numpy.polydiv(factor, monomial)
A:scipy.signal._signaltools.(numer, n)->numpy.polydiv(numer, monomial)
A:scipy.signal._signaltools.poles->numpy.roots(a)
A:scipy.signal._signaltools.(k, b)->numpy.polydiv(b, a)
A:scipy.signal._signaltools.(unique_poles, order)->cmplx_sort(unique_poles)
A:scipy.signal._signaltools.residues->_compute_residues(1 / unique_poles, multiplicity, b_rev)
A:scipy.signal._signaltools.k_rev->numpy.empty(0)
A:scipy.signal._signaltools.(k_rev, b_rev)->numpy.polydiv(b_rev, a_rev)
A:scipy.signal._signaltools.powers->numpy.empty(len(residues), dtype=int)
A:scipy.signal._signaltools.real_input->numpy.isrealobj(x)
A:scipy.signal._signaltools.X->scipy.fft.fft(x, axis=axis)
A:scipy.signal._signaltools.W->numpy.zeros((2 * m, 2 * order))
A:scipy.signal._signaltools.W_real->numpy.zeros((2 * m, 2 * order)).copy()
A:scipy.signal._signaltools.Y->numpy.zeros(newshape, X.dtype)
A:scipy.signal._signaltools.sl[axis]->slice(None, None, q)
A:scipy.signal._signaltools.up->int(up)
A:scipy.signal._signaltools.down->int(down)
A:scipy.signal._signaltools.g_->math.gcd(up, down)
A:scipy.signal._signaltools.window->numpy.array(window)
A:scipy.signal._signaltools.max_rate->max(up, down)
A:scipy.signal._signaltools.background_values->funcs[padtype](x, axis=axis, keepdims=True)
A:scipy.signal._signaltools.keep[axis]->slice(n_pre_remove, n_pre_remove_end)
A:scipy.signal._signaltools.events->numpy.atleast_2d(events)
A:scipy.signal._signaltools.period->numpy.atleast_2d(period)
A:scipy.signal._signaltools.vectors->numpy.exp(np.dot(2j * np.pi / period.T, events))
A:scipy.signal._signaltools.vectormean->numpy.mean(vectors, axis=1)
A:scipy.signal._signaltools.strength->abs(vectormean)
A:scipy.signal._signaltools.phase->numpy.angle(vectormean)
A:scipy.signal._signaltools.data->numpy.asarray(data)
A:scipy.signal._signaltools.bp->numpy.sort(np.unique(np.r_[0, bp, N]))
A:scipy.signal._signaltools.rnk->len(dshape)
A:scipy.signal._signaltools.newdata->newdata.astype(dtype).astype(dtype)
A:scipy.signal._signaltools.A->numpy.ones((Npts, 2), dtype)
A:scipy.signal._signaltools.A[:, 0]->numpy.cast[dtype](np.arange(1, Npts + 1) * 1.0 / Npts)
A:scipy.signal._signaltools.sl->slice(bp[m], bp[m + 1])
A:scipy.signal._signaltools.(coef, resids, rank, s)->scipy.linalg.lstsq(A, newdata[sl])
A:scipy.signal._signaltools.tdshape->numpy.take(dshape, newdims, 0)
A:scipy.signal._signaltools.vals->list(range(1, rnk))
A:scipy.signal._signaltools.n->operator.index(n)
A:scipy.signal._signaltools.sos->numpy.asarray(sos, dtype=result_type)
A:scipy.signal._signaltools.Obs->numpy.zeros((m, order))
A:scipy.signal._signaltools.S->lfilter(b, a, Obs[::-1], axis=0)
A:scipy.signal._signaltools.M->numpy.zeros((2 * m, 2 * order))
A:scipy.signal._signaltools.y_f->lfilter(b, a, x)
A:scipy.signal._signaltools.y_bf->lfilter(b, a, y_b)
A:scipy.signal._signaltools.delta->numpy.concatenate((start_m, end_m), axis=-1)
A:scipy.signal._signaltools.ic_opt->ic_opt0.reshape(delta.shape[:-1] + (M.shape[-1],))
A:scipy.signal._signaltools.wic->ic_opt0.reshape(delta.shape[:-1] + (M.shape[-1],)).dot(W.T)
A:scipy.signal._signaltools.x0->axis_slice(ext, stop=1, axis=axis)
A:scipy.signal._signaltools.x1->numpy.swapaxes(x1, axis, x.ndim - 1)
A:scipy.signal._signaltools.y_opt->numpy.swapaxes(y_opt, axis, x.ndim - 1)
A:scipy.signal._signaltools.(y, z1, z2)->_filtfilt_gust(b, a, x, axis=axis, irlen=irlen)
A:scipy.signal._signaltools.(edge, ext)->_validate_pad(padtype, padlen, x, axis, ntaps=ntaps)
A:scipy.signal._signaltools.(y, zf)->sosfilt(sos, axis_reverse(y, axis=axis), axis=axis, zi=zi * y_0)
A:scipy.signal._signaltools.y0->axis_slice(y, start=-1, axis=axis)
A:scipy.signal._signaltools.ext->const_ext(x, edge, axis=axis)
A:scipy.signal._signaltools.(sos, n_sections)->_validate_sos(sos)
A:scipy.signal._signaltools.x_zi_shape->tuple([n_sections] + x_zi_shape)
A:scipy.signal._signaltools.x_0->axis_slice(ext, stop=1, axis=axis)
A:scipy.signal._signaltools.y_0->axis_slice(y, start=-1, axis=axis)
A:scipy.signal._signaltools.q->operator.index(q)
A:scipy.signal._signaltools.system->ftype._as_zpk()
scipy.signal._apply_conv_mode(ret,s1,s2,mode,axes)
scipy.signal._bvalfromboundary(boundary)
scipy.signal._calc_oa_lens(s1,s2)
scipy.signal._centered(arr,newshape)
scipy.signal._compute_factors(roots,multiplicity,include_powers=False)
scipy.signal._compute_residues(poles,multiplicity,numerator)
scipy.signal._conv_ops(x_shape,h_shape,mode)
scipy.signal._fftconv_faster(x,h,mode)
scipy.signal._filtfilt_gust(b,a,x,axis=-1,irlen=None)
scipy.signal._freq_domain_conv(in1,in2,axes,shape,calc_fast_len=False)
scipy.signal._group_poles(poles,tol,rtype)
scipy.signal._init_freq_conv_axes(in1,in2,mode,axes,sorted_axes=False)
scipy.signal._inputs_swap_needed(mode,shape1,shape2,axes=None)
scipy.signal._np_conv_ok(volume,kernel,mode)
scipy.signal._numeric_arrays(arrays,kinds='buifc')
scipy.signal._reverse_and_conj(x)
scipy.signal._signaltools._apply_conv_mode(ret,s1,s2,mode,axes)
scipy.signal._signaltools._bvalfromboundary(boundary)
scipy.signal._signaltools._calc_oa_lens(s1,s2)
scipy.signal._signaltools._centered(arr,newshape)
scipy.signal._signaltools._compute_factors(roots,multiplicity,include_powers=False)
scipy.signal._signaltools._compute_residues(poles,multiplicity,numerator)
scipy.signal._signaltools._conv_ops(x_shape,h_shape,mode)
scipy.signal._signaltools._fftconv_faster(x,h,mode)
scipy.signal._signaltools._filtfilt_gust(b,a,x,axis=-1,irlen=None)
scipy.signal._signaltools._freq_domain_conv(in1,in2,axes,shape,calc_fast_len=False)
scipy.signal._signaltools._group_poles(poles,tol,rtype)
scipy.signal._signaltools._init_freq_conv_axes(in1,in2,mode,axes,sorted_axes=False)
scipy.signal._signaltools._inputs_swap_needed(mode,shape1,shape2,axes=None)
scipy.signal._signaltools._np_conv_ok(volume,kernel,mode)
scipy.signal._signaltools._numeric_arrays(arrays,kinds='buifc')
scipy.signal._signaltools._reverse_and_conj(x)
scipy.signal._signaltools._timeit_fast(stmt='pass',setup='pass',repeat=3)
scipy.signal._signaltools._valfrommode(mode)
scipy.signal._signaltools._validate_pad(padtype,padlen,x,axis,ntaps)
scipy.signal._signaltools._validate_x(x)
scipy.signal._signaltools.choose_conv_method(in1,in2,mode='full',measure=False)
scipy.signal._signaltools.cmplx_sort(p)
scipy.signal._signaltools.convolve(in1,in2,mode='full',method='auto')
scipy.signal._signaltools.convolve2d(in1,in2,mode='full',boundary='fill',fillvalue=0)
scipy.signal._signaltools.correlate(in1,in2,mode='full',method='auto')
scipy.signal._signaltools.correlate2d(in1,in2,mode='full',boundary='fill',fillvalue=0)
scipy.signal._signaltools.correlation_lags(in1_len,in2_len,mode='full')
scipy.signal._signaltools.decimate(x,q,n=None,ftype='iir',axis=-1,zero_phase=True)
scipy.signal._signaltools.deconvolve(signal,divisor)
scipy.signal._signaltools.detrend(data,axis=-1,type='linear',bp=0,overwrite_data=False)
scipy.signal._signaltools.fftconvolve(in1,in2,mode='full',axes=None)
scipy.signal._signaltools.filtfilt(b,a,x,axis=-1,padtype='odd',padlen=None,method='pad',irlen=None)
scipy.signal._signaltools.hilbert(x,N=None,axis=-1)
scipy.signal._signaltools.hilbert2(x,N=None)
scipy.signal._signaltools.invres(r,p,k,tol=0.001,rtype='avg')
scipy.signal._signaltools.invresz(r,p,k,tol=0.001,rtype='avg')
scipy.signal._signaltools.lfilter(b,a,x,axis=-1,zi=None)
scipy.signal._signaltools.lfilter_zi(b,a)
scipy.signal._signaltools.lfiltic(b,a,y,x=None)
scipy.signal._signaltools.medfilt(volume,kernel_size=None)
scipy.signal._signaltools.medfilt2d(input,kernel_size=3)
scipy.signal._signaltools.oaconvolve(in1,in2,mode='full',axes=None)
scipy.signal._signaltools.order_filter(a,domain,rank)
scipy.signal._signaltools.resample(x,num,t=None,axis=0,window=None,domain='time')
scipy.signal._signaltools.resample_poly(x,up,down,axis=0,window=('kaiser',5.0),padtype='constant',cval=None)
scipy.signal._signaltools.residue(b,a,tol=0.001,rtype='avg')
scipy.signal._signaltools.residuez(b,a,tol=0.001,rtype='avg')
scipy.signal._signaltools.sosfilt(sos,x,axis=-1,zi=None)
scipy.signal._signaltools.sosfilt_zi(sos)
scipy.signal._signaltools.sosfiltfilt(sos,x,axis=-1,padtype='odd',padlen=None)
scipy.signal._signaltools.unique_roots(p,tol=0.001,rtype='min')
scipy.signal._signaltools.vectorstrength(events,period)
scipy.signal._signaltools.wiener(im,mysize=None,noise=None)
scipy.signal._timeit_fast(stmt='pass',setup='pass',repeat=3)
scipy.signal._valfrommode(mode)
scipy.signal._validate_pad(padtype,padlen,x,axis,ntaps)
scipy.signal._validate_x(x)
scipy.signal.choose_conv_method(in1,in2,mode='full',measure=False)
scipy.signal.cmplx_sort(p)
scipy.signal.convolve(in1,in2,mode='full',method='auto')
scipy.signal.convolve2d(in1,in2,mode='full',boundary='fill',fillvalue=0)
scipy.signal.correlate(in1,in2,mode='full',method='auto')
scipy.signal.correlate2d(in1,in2,mode='full',boundary='fill',fillvalue=0)
scipy.signal.correlation_lags(in1_len,in2_len,mode='full')
scipy.signal.decimate(x,q,n=None,ftype='iir',axis=-1,zero_phase=True)
scipy.signal.deconvolve(signal,divisor)
scipy.signal.detrend(data,axis=-1,type='linear',bp=0,overwrite_data=False)
scipy.signal.fftconvolve(in1,in2,mode='full',axes=None)
scipy.signal.filtfilt(b,a,x,axis=-1,padtype='odd',padlen=None,method='pad',irlen=None)
scipy.signal.hilbert(x,N=None,axis=-1)
scipy.signal.hilbert2(x,N=None)
scipy.signal.invres(r,p,k,tol=0.001,rtype='avg')
scipy.signal.invresz(r,p,k,tol=0.001,rtype='avg')
scipy.signal.lfilter(b,a,x,axis=-1,zi=None)
scipy.signal.lfilter_zi(b,a)
scipy.signal.lfiltic(b,a,y,x=None)
scipy.signal.medfilt(volume,kernel_size=None)
scipy.signal.medfilt2d(input,kernel_size=3)
scipy.signal.oaconvolve(in1,in2,mode='full',axes=None)
scipy.signal.order_filter(a,domain,rank)
scipy.signal.resample(x,num,t=None,axis=0,window=None,domain='time')
scipy.signal.resample_poly(x,up,down,axis=0,window=('kaiser',5.0),padtype='constant',cval=None)
scipy.signal.residue(b,a,tol=0.001,rtype='avg')
scipy.signal.residuez(b,a,tol=0.001,rtype='avg')
scipy.signal.sosfilt(sos,x,axis=-1,zi=None)
scipy.signal.sosfilt_zi(sos)
scipy.signal.sosfiltfilt(sos,x,axis=-1,padtype='odd',padlen=None)
scipy.signal.unique_roots(p,tol=0.001,rtype='min')
scipy.signal.vectorstrength(events,period)
scipy.signal.wiener(im,mysize=None,noise=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/wavelets.py----------------------------------------
scipy.signal.wavelets.__dir__()
scipy.signal.wavelets.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/_savitzky_golay.py----------------------------------------
A:scipy.signal._savitzky_golay.(halflen, rem)->divmod(window_length, 2)
A:scipy.signal._savitzky_golay.coeffs->savgol_coeffs(window_length, polyorder, deriv=deriv, delta=delta)
A:scipy.signal._savitzky_golay.x->x.astype(np.float64).astype(np.float64)
A:scipy.signal._savitzky_golay.order->numpy.arange(polyorder + 1).reshape(-1, 1)
A:scipy.signal._savitzky_golay.y->convolve1d(x, coeffs, axis=axis, mode=mode, cval=cval)
A:scipy.signal._savitzky_golay.(coeffs, _, _, _)->lstsq(A, y)
A:scipy.signal._savitzky_golay.n->len(p)
A:scipy.signal._savitzky_golay.result->numpy.zeros_like(p[:1, ...])
A:scipy.signal._savitzky_golay.dp->p[:-m].copy()
A:scipy.signal._savitzky_golay.rng->numpy.arange(n - k - 1, m - k - 1, -1)
A:scipy.signal._savitzky_golay.x_edge->axis_slice(x, start=window_start, stop=window_stop, axis=axis)
A:scipy.signal._savitzky_golay.xx_edge->xx_edge.reshape(xx_edge.shape[0], -1).reshape(xx_edge.shape[0], -1)
A:scipy.signal._savitzky_golay.poly_coeffs->_polyder(poly_coeffs, deriv)
A:scipy.signal._savitzky_golay.i->numpy.arange(interp_start - window_start, interp_stop - window_start)
A:scipy.signal._savitzky_golay.shp->list(y.shape)
A:scipy.signal._savitzky_golay.values->values.swapaxes(0, axis).swapaxes(0, axis)
A:scipy.signal._savitzky_golay.y_edge->axis_slice(y, start=interp_start, stop=interp_stop, axis=axis)
scipy.signal._savitzky_golay._fit_edge(x,window_start,window_stop,interp_start,interp_stop,axis,polyorder,deriv,delta,y)
scipy.signal._savitzky_golay._fit_edges_polyfit(x,window_length,polyorder,deriv,delta,axis,y)
scipy.signal._savitzky_golay._polyder(p,m)
scipy.signal._savitzky_golay.savgol_coeffs(window_length,polyorder,deriv=0,delta=1.0,pos=None,use='conv')
scipy.signal._savitzky_golay.savgol_filter(x,window_length,polyorder,deriv=0,delta=1.0,axis=-1,mode='interp',cval=0.0)
scipy.signal.savgol_coeffs(window_length,polyorder,deriv=0,delta=1.0,pos=None,use='conv')
scipy.signal.savgol_filter(x,window_length,polyorder,deriv=0,delta=1.0,axis=-1,mode='interp',cval=0.0)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/spline.py----------------------------------------
scipy.signal.spline.__dir__()
scipy.signal.spline.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/signaltools.py----------------------------------------
scipy.signal.signaltools.__dir__()
scipy.signal.signaltools.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/ltisys.py----------------------------------------
scipy.signal.ltisys.__dir__()
scipy.signal.ltisys.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/_lti_conversion.py----------------------------------------
A:scipy.signal._lti_conversion.(num, den)->normalize(num, den)
A:scipy.signal._lti_conversion.nn->len(num.shape)
A:scipy.signal._lti_conversion.num->numpy.empty((nout, num_states + 1), type_test.dtype)
A:scipy.signal._lti_conversion.K->len(den)
A:scipy.signal._lti_conversion.D->_restore(D, (r, q))
A:scipy.signal._lti_conversion.B->_restore(B, (p, q))
A:scipy.signal._lti_conversion.(A, B, C, D)->abcd_normalize(A, B, C, D)
A:scipy.signal._lti_conversion.(MA, NA)->_shape_or_none(A)
A:scipy.signal._lti_conversion.(MB, NB)->_shape_or_none(B)
A:scipy.signal._lti_conversion.(MC, NC)->_shape_or_none(C)
A:scipy.signal._lti_conversion.(MD, ND)->_shape_or_none(D)
A:scipy.signal._lti_conversion.p->_choice_not_none(MA, MB, NC)
A:scipy.signal._lti_conversion.q->_choice_not_none(NB, ND)
A:scipy.signal._lti_conversion.r->_choice_not_none(MC, MD)
A:scipy.signal._lti_conversion.A->_restore(A, (p, p))
A:scipy.signal._lti_conversion.C->_restore(C, (r, p))
A:scipy.signal._lti_conversion.den->poly(A)
A:scipy.signal._lti_conversion.Ck->atleast_2d(C[k, :])
A:scipy.signal._lti_conversion.sysd->cont2discrete(zpk2ss(system[0], system[1], system[2]), dt, method=method, alpha=alpha)
A:scipy.signal._lti_conversion.ad->scipy.linalg.expm(a * dt)
A:scipy.signal._lti_conversion.bd->scipy.linalg.solve(ima, dt * b)
A:scipy.signal._lti_conversion.cd->cd.transpose().transpose()
A:scipy.signal._lti_conversion.em_upper->scipy.linalg.block_diag(np.block([a, b]) * dt, np.eye(m))
A:scipy.signal._lti_conversion.em_lower->zeros((m, n + 2 * m))
A:scipy.signal._lti_conversion.em->numpy.block([[em_upper], [em_lower]])
A:scipy.signal._lti_conversion.ms->scipy.linalg.expm(em)
scipy.signal._atleast_2d_or_none(arg)
scipy.signal._choice_not_none(*args)
scipy.signal._lti_conversion._atleast_2d_or_none(arg)
scipy.signal._lti_conversion._choice_not_none(*args)
scipy.signal._lti_conversion._none_to_empty_2d(arg)
scipy.signal._lti_conversion._restore(M,shape)
scipy.signal._lti_conversion._shape_or_none(M)
scipy.signal._lti_conversion.abcd_normalize(A=None,B=None,C=None,D=None)
scipy.signal._lti_conversion.cont2discrete(system,dt,method='zoh',alpha=None)
scipy.signal._lti_conversion.ss2tf(A,B,C,D,input=0)
scipy.signal._lti_conversion.ss2zpk(A,B,C,D,input=0)
scipy.signal._lti_conversion.tf2ss(num,den)
scipy.signal._lti_conversion.zpk2ss(z,p,k)
scipy.signal._none_to_empty_2d(arg)
scipy.signal._restore(M,shape)
scipy.signal._shape_or_none(M)
scipy.signal.abcd_normalize(A=None,B=None,C=None,D=None)
scipy.signal.cont2discrete(system,dt,method='zoh',alpha=None)
scipy.signal.ss2tf(A,B,C,D,input=0)
scipy.signal.ss2zpk(A,B,C,D,input=0)
scipy.signal.tf2ss(num,den)
scipy.signal.zpk2ss(z,p,k)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/_filter_design.py----------------------------------------
A:scipy.signal._filter_design.hfreq->numpy.around(numpy.log10(numpy.max(3 * abs(ez.real + integ) + 1.5 * ez.imag)) + 0.5)
A:scipy.signal._filter_design.lfreq->numpy.around(numpy.log10(0.1 * numpy.min(abs(real(ez + integ)) + 2 * ez.imag)) - 0.5)
A:scipy.signal._filter_design.w->numpy.atleast_1d(w)
A:scipy.signal._filter_design.k->numpy.arange(1, n + 1)
A:scipy.signal._filter_design.num->_falling_factorial(2 * n - k, n)
A:scipy.signal._filter_design.den->numpy.trim_zeros(den, 'f')
A:scipy.signal._filter_design.b->numpy.empty(5)
A:scipy.signal._filter_design.a->numpy.empty(9)
A:scipy.signal._filter_design.N->round(fs / w0)
A:scipy.signal._filter_design.h_flip->slice(stop, 0, -1)
A:scipy.signal._filter_design.h->numpy.moveaxis(h, 0, -1)
A:scipy.signal._filter_design.zm1->exp(1j * w)
A:scipy.signal._filter_design.(z, p)->map(atleast_1d, (z, p))
A:scipy.signal._filter_design.(b, a)->zpk2tf(z, p, k)
A:scipy.signal._filter_design.c->numpy.convolve(b, a[::-1])
A:scipy.signal._filter_design.z->numpy.concatenate((z, conjugate(z)))
A:scipy.signal._filter_design.sos->numpy.zeros((n_sections, 6))
A:scipy.signal._filter_design.(sos, n_sections)->_validate_sos(sos)
A:scipy.signal._filter_design.(w, rowh)->freqz(row[:3], row[3:], worN=worN, whole=whole, fs=fs)
A:scipy.signal._filter_design.diffs->numpy.diff(concatenate(([0], same_real, [0])))
A:scipy.signal._filter_design.(zc, zr)->_cplxreal(z, tol)
A:scipy.signal._filter_design.zc->numpy.dstack((zc.conj(), zc)).flatten()
A:scipy.signal._filter_design.p->asarray(p, dtype=complex)
A:scipy.signal._filter_design.temp->poly(z[0])
A:scipy.signal._filter_design.roots->numpy.asarray(p, complex)
A:scipy.signal._filter_design.pos_roots->numpy.compress(roots.imag > 0, roots)
A:scipy.signal._filter_design.neg_roots->numpy.conjugate(numpy.compress(roots.imag < 0, roots))
A:scipy.signal._filter_design.zpk->tf2zpk(sos[section, :3], sos[section, 3:])
A:scipy.signal._filter_design.order->operator.index(order)
A:scipy.signal._filter_design.mask->numpy.isreal(fro[order])
A:scipy.signal._filter_design.p1_idx->idx_worst(p)
A:scipy.signal._filter_design.z1_idx->_nearest_real_complex_idx(z, p1, 'any')
A:scipy.signal._filter_design.sos[si]->_single_zpksos([], [p1, p2], 1)
A:scipy.signal._filter_design.prealidx->numpy.flatnonzero(np.isreal(p))
A:scipy.signal._filter_design.p2->p1.conj()
A:scipy.signal._filter_design.z2_idx->_nearest_real_complex_idx(z, p1, 'real')
A:scipy.signal._filter_design.nums->asarray(nums)
A:scipy.signal._filter_design.max_width->max((num.size for num in nums))
A:scipy.signal._filter_design.aligned_nums->numpy.zeros((len(nums), max_width))
A:scipy.signal._filter_design.(a, b)->map(atleast_1d, (a, b))
A:scipy.signal._filter_design.wo->float(wo)
A:scipy.signal._filter_design.d->len(a)
A:scipy.signal._filter_design.n->int(n)
A:scipy.signal._filter_design.M->max([N, D])
A:scipy.signal._filter_design.pwo->numpy.ones(max((d, n)), b.dtype.char)
A:scipy.signal._filter_design.start1->max((n - d, 0))
A:scipy.signal._filter_design.start2->max((d - n, 0))
A:scipy.signal._filter_design.outb->resize(b, (d,))
A:scipy.signal._filter_design.outa->resize(a, (n,))
A:scipy.signal._filter_design.artype->mintypecode((a, b))
A:scipy.signal._filter_design.ma->max([N, D])
A:scipy.signal._filter_design.bprime->numpy.empty(Np + 1, artype)
A:scipy.signal._filter_design.aprime->numpy.empty(Dp + 1, artype)
A:scipy.signal._filter_design.fs->float(fs)
A:scipy.signal._filter_design.bprime[j]->real(val)
A:scipy.signal._filter_design.aprime[j]->real(val)
A:scipy.signal._filter_design.wp->atleast_1d(wp)
A:scipy.signal._filter_design.ws->atleast_1d(ws)
A:scipy.signal._filter_design.(N, Wn)->ordfunc(wp, ws, gpass, gstop, analog=analog, fs=fs)
A:scipy.signal._filter_design.Wn->asarray(Wn)
A:scipy.signal._filter_design.(z, p, k)->bilinear_zpk(z, p, k, fs=fs)
A:scipy.signal._filter_design.degree->_relative_degree(z, p)
A:scipy.signal._filter_design.z_z->append(z_z, -ones(degree))
A:scipy.signal._filter_design.z_hp->z_hp.astype(complex).astype(complex)
A:scipy.signal._filter_design.bw->float(bw)
A:scipy.signal._filter_design.z_lp->z_lp.astype(complex).astype(complex)
A:scipy.signal._filter_design.p_lp->p_lp.astype(complex).astype(complex)
A:scipy.signal._filter_design.z_bp->append(z_bp, zeros(degree))
A:scipy.signal._filter_design.p_bp->concatenate((p_lp + sqrt(p_lp ** 2 - wo ** 2), p_lp - sqrt(p_lp ** 2 - wo ** 2)))
A:scipy.signal._filter_design.p_hp->p_hp.astype(complex).astype(complex)
A:scipy.signal._filter_design.z_bs->append(z_bs, full(degree, -1j * wo))
A:scipy.signal._filter_design.p_bs->concatenate((p_hp + sqrt(p_hp ** 2 - wo ** 2), p_hp - sqrt(p_hp ** 2 - wo ** 2)))
A:scipy.signal._filter_design.passbC->tan(pi * wp / 2.0).copy()
A:scipy.signal._filter_design.nat->min(abs(nat))
A:scipy.signal._filter_design.arg1->sqrt((GPASS - 1.0) / (GSTOP - 1.0))
A:scipy.signal._filter_design.d0->scipy.special.ellipk([arg0 ** 2, 1 - arg0 ** 2])
A:scipy.signal._filter_design.d1->scipy.special.ellipk([arg1 ** 2, 1 - arg1 ** 2])
A:scipy.signal._filter_design.passb->tan(pi * wp / 2.0)
A:scipy.signal._filter_design.stopb->tan(pi * ws / 2.0)
A:scipy.signal._filter_design.wp0->scipy.optimize.fminbound(band_stop_obj, passb[0], stopb[0] - 1e-12, args=(0, passb, stopb, gpass, gstop, 'ellip'), disp=0)
A:scipy.signal._filter_design.wp1->scipy.optimize.fminbound(band_stop_obj, stopb[1] + 1e-12, passb[1], args=(1, passb, stopb, gpass, gstop, 'ellip'), disp=0)
A:scipy.signal._filter_design.ord->int(ceil(d0[0] * d1[1] / (d0[1] * d1[0])))
A:scipy.signal._filter_design.WN->numpy.sort(abs(WN))
A:scipy.signal._filter_design.discr->sqrt((passb[1] - passb[0]) ** 2 + 4 * W0 ** 2 * passb[0] * passb[1])
A:scipy.signal._filter_design.W0->numpy.array([-W0, W0], float)
A:scipy.signal._filter_design.new_freq->cosh(1.0 / ord * arccosh(sqrt((GSTOP - 1.0) / (GPASS - 1.0))))
A:scipy.signal._filter_design._POW10_LOG10->numpy.log(10)
A:scipy.signal._filter_design.m->_ellipdeg(N, ck1_sq)
A:scipy.signal._filter_design.eps->numpy.sqrt(eps_sq)
A:scipy.signal._filter_design.K1->scipy.special.ellipk(m1)
A:scipy.signal._filter_design.K1p->scipy.special.ellipkm1(m1)
A:scipy.signal._filter_design.q1->numpy.exp(-np.pi * K1p / K1)
A:scipy.signal._filter_design.mnum->numpy.arange(_ELLIPDEG_MMAX + 1)
A:scipy.signal._filter_design.mden->numpy.arange(1, _ELLIPDEG_MMAX + 2)
A:scipy.signal._filter_design.k_p->_complement(k_)
A:scipy.signal._filter_design.zcomplex->_arc_jac_sn(1j * w, m)
A:scipy.signal._filter_design.eps_sq->_pow10m1(0.1 * rp)
A:scipy.signal._filter_design.capk->scipy.special.ellipk(m)
A:scipy.signal._filter_design.j->numpy.arange(1 - N % 2, N, 2)
A:scipy.signal._filter_design.jj->len(j)
A:scipy.signal._filter_design.[s, c, d, phi]->scipy.special.ellipj(j * capk / N, m * numpy.ones(jj))
A:scipy.signal._filter_design.snew->numpy.compress(abs(s) > EPSILON, s, axis=-1)
A:scipy.signal._filter_design.r->npp_polyval(n, [0, 0, 2, 1])
A:scipy.signal._filter_design.[sv, cv, dv, phi]->scipy.special.ellipj(v0, 1 - m)
A:scipy.signal._filter_design.newp->numpy.compress(abs(p.imag) > EPSILON * numpy.sqrt(numpy.sum(p * numpy.conjugate(p), axis=0).real), p, axis=-1)
A:scipy.signal._filter_design.s->npp_polyval(n, [0, 0, 2, 0, -3, 1])
A:scipy.signal._filter_design.x->numpy.mean((x, x[::-1].conj()), 0)
A:scipy.signal._filter_design.y->npp_polyval(k, [b0, b1, b2, b3])
A:scipy.signal._filter_design.beta->numpy.empty_like(x0)
A:scipy.signal._filter_design.beta[k]->numpy.sum(1 / (x[k] - x[k + 1:]))
A:scipy.signal._filter_design.x0->_campos_zeros(N)
A:scipy.signal._filter_design.x[i]->scipy.optimize.newton(f, x[i], fp, tol=1e-15)
A:scipy.signal._filter_design.norm_factor->_norm_factor(p, k)
A:scipy.signal._filter_design.w0->float(w0)
A:scipy.signal._filter_design.Q->float(Q)
A:scipy.signal._filter_design.ftype->ftype.lower().lower()
A:scipy.signal._filter_design.freq->float(freq)
A:scipy.signal._filter_design.numtaps->operator.index(numtaps)
A:scipy.signal._filter_design.g5->numpy.exp(2j * fr)
A:scipy.signal._filter_design.g->numpy.abs(g)
A:scipy.signal._filter_design.a[8]->numpy.exp(-8 * bw * T)
scipy.signal.BadCoefficients(UserWarning)
scipy.signal._aberth(f,fp,x0,tol=1e-15,maxiter=50)
scipy.signal._align_nums(nums)
scipy.signal._arc_jac_sc1(w,m)
scipy.signal._arc_jac_sn(w,m)
scipy.signal._bessel_poly(n,reverse=False)
scipy.signal._bessel_zeros(N)
scipy.signal._campos_zeros(n)
scipy.signal._cplxpair(z,tol=None)
scipy.signal._cplxreal(z,tol=None)
scipy.signal._design_notch_peak_filter(w0,Q,ftype,fs=2.0)
scipy.signal._ellipdeg(n,m1)
scipy.signal._falling_factorial(x,n)
scipy.signal._filter_design.BadCoefficients(UserWarning)
scipy.signal._filter_design._aberth(f,fp,x0,tol=1e-15,maxiter=50)
scipy.signal._filter_design._align_nums(nums)
scipy.signal._filter_design._arc_jac_sc1(w,m)
scipy.signal._filter_design._arc_jac_sn(w,m)
scipy.signal._filter_design._bessel_poly(n,reverse=False)
scipy.signal._filter_design._bessel_zeros(N)
scipy.signal._filter_design._campos_zeros(n)
scipy.signal._filter_design._cplxpair(z,tol=None)
scipy.signal._filter_design._cplxreal(z,tol=None)
scipy.signal._filter_design._design_notch_peak_filter(w0,Q,ftype,fs=2.0)
scipy.signal._filter_design._ellipdeg(n,m1)
scipy.signal._filter_design._falling_factorial(x,n)
scipy.signal._filter_design._hz_to_erb(hz)
scipy.signal._filter_design._is_int_type(x)
scipy.signal._filter_design._nearest_real_complex_idx(fro,to,which)
scipy.signal._filter_design._norm_factor(p,k)
scipy.signal._filter_design._pow10m1(x)
scipy.signal._filter_design._relative_degree(z,p)
scipy.signal._filter_design._single_zpksos(z,p,k)
scipy.signal._filter_design._validate_gpass_gstop(gpass,gstop)
scipy.signal._filter_design._validate_sos(sos)
scipy.signal._filter_design.band_stop_obj(wp,ind,passb,stopb,gpass,gstop,type)
scipy.signal._filter_design.bessel(N,Wn,btype='low',analog=False,output='ba',norm='phase',fs=None)
scipy.signal._filter_design.besselap(N,norm='phase')
scipy.signal._filter_design.bilinear(b,a,fs=1.0)
scipy.signal._filter_design.bilinear_zpk(z,p,k,fs)
scipy.signal._filter_design.buttap(N)
scipy.signal._filter_design.butter(N,Wn,btype='low',analog=False,output='ba',fs=None)
scipy.signal._filter_design.buttord(wp,ws,gpass,gstop,analog=False,fs=None)
scipy.signal._filter_design.cheb1ap(N,rp)
scipy.signal._filter_design.cheb1ord(wp,ws,gpass,gstop,analog=False,fs=None)
scipy.signal._filter_design.cheb2ap(N,rs)
scipy.signal._filter_design.cheb2ord(wp,ws,gpass,gstop,analog=False,fs=None)
scipy.signal._filter_design.cheby1(N,rp,Wn,btype='low',analog=False,output='ba',fs=None)
scipy.signal._filter_design.cheby2(N,rs,Wn,btype='low',analog=False,output='ba',fs=None)
scipy.signal._filter_design.ellip(N,rp,rs,Wn,btype='low',analog=False,output='ba',fs=None)
scipy.signal._filter_design.ellipap(N,rp,rs)
scipy.signal._filter_design.ellipord(wp,ws,gpass,gstop,analog=False,fs=None)
scipy.signal._filter_design.findfreqs(num,den,N,kind='ba')
scipy.signal._filter_design.freqs(b,a,worN=200,plot=None)
scipy.signal._filter_design.freqs_zpk(z,p,k,worN=200)
scipy.signal._filter_design.freqz(b,a=1,worN=512,whole=False,plot=None,fs=2*pi,include_nyquist=False)
scipy.signal._filter_design.freqz_zpk(z,p,k,worN=512,whole=False,fs=2*pi)
scipy.signal._filter_design.gammatone(freq,ftype,order=None,numtaps=None,fs=None)
scipy.signal._filter_design.group_delay(system,w=512,whole=False,fs=2*pi)
scipy.signal._filter_design.iircomb(w0,Q,ftype='notch',fs=2.0,*,pass_zero=False)
scipy.signal._filter_design.iirdesign(wp,ws,gpass,gstop,analog=False,ftype='ellip',output='ba',fs=None)
scipy.signal._filter_design.iirfilter(N,Wn,rp=None,rs=None,btype='band',analog=False,ftype='butter',output='ba',fs=None)
scipy.signal._filter_design.iirnotch(w0,Q,fs=2.0)
scipy.signal._filter_design.iirpeak(w0,Q,fs=2.0)
scipy.signal._filter_design.lp2bp(b,a,wo=1.0,bw=1.0)
scipy.signal._filter_design.lp2bp_zpk(z,p,k,wo=1.0,bw=1.0)
scipy.signal._filter_design.lp2bs(b,a,wo=1.0,bw=1.0)
scipy.signal._filter_design.lp2bs_zpk(z,p,k,wo=1.0,bw=1.0)
scipy.signal._filter_design.lp2hp(b,a,wo=1.0)
scipy.signal._filter_design.lp2hp_zpk(z,p,k,wo=1.0)
scipy.signal._filter_design.lp2lp(b,a,wo=1.0)
scipy.signal._filter_design.lp2lp_zpk(z,p,k,wo=1.0)
scipy.signal._filter_design.maxflat()
scipy.signal._filter_design.normalize(b,a)
scipy.signal._filter_design.sos2tf(sos)
scipy.signal._filter_design.sos2zpk(sos)
scipy.signal._filter_design.sosfreqz(sos,worN=512,whole=False,fs=2*pi)
scipy.signal._filter_design.tf2sos(b,a,pairing=None,*,analog=False)
scipy.signal._filter_design.tf2zpk(b,a)
scipy.signal._filter_design.yulewalk()
scipy.signal._filter_design.zpk2sos(z,p,k,pairing=None,*,analog=False)
scipy.signal._filter_design.zpk2tf(z,p,k)
scipy.signal._hz_to_erb(hz)
scipy.signal._is_int_type(x)
scipy.signal._nearest_real_complex_idx(fro,to,which)
scipy.signal._norm_factor(p,k)
scipy.signal._pow10m1(x)
scipy.signal._relative_degree(z,p)
scipy.signal._single_zpksos(z,p,k)
scipy.signal._validate_gpass_gstop(gpass,gstop)
scipy.signal._validate_sos(sos)
scipy.signal.band_stop_obj(wp,ind,passb,stopb,gpass,gstop,type)
scipy.signal.bessel(N,Wn,btype='low',analog=False,output='ba',norm='phase',fs=None)
scipy.signal.besselap(N,norm='phase')
scipy.signal.bilinear(b,a,fs=1.0)
scipy.signal.bilinear_zpk(z,p,k,fs)
scipy.signal.buttap(N)
scipy.signal.butter(N,Wn,btype='low',analog=False,output='ba',fs=None)
scipy.signal.buttord(wp,ws,gpass,gstop,analog=False,fs=None)
scipy.signal.cheb1ap(N,rp)
scipy.signal.cheb1ord(wp,ws,gpass,gstop,analog=False,fs=None)
scipy.signal.cheb2ap(N,rs)
scipy.signal.cheb2ord(wp,ws,gpass,gstop,analog=False,fs=None)
scipy.signal.cheby1(N,rp,Wn,btype='low',analog=False,output='ba',fs=None)
scipy.signal.cheby2(N,rs,Wn,btype='low',analog=False,output='ba',fs=None)
scipy.signal.ellip(N,rp,rs,Wn,btype='low',analog=False,output='ba',fs=None)
scipy.signal.ellipap(N,rp,rs)
scipy.signal.ellipord(wp,ws,gpass,gstop,analog=False,fs=None)
scipy.signal.findfreqs(num,den,N,kind='ba')
scipy.signal.freqs(b,a,worN=200,plot=None)
scipy.signal.freqs_zpk(z,p,k,worN=200)
scipy.signal.freqz(b,a=1,worN=512,whole=False,plot=None,fs=2*pi,include_nyquist=False)
scipy.signal.freqz_zpk(z,p,k,worN=512,whole=False,fs=2*pi)
scipy.signal.gammatone(freq,ftype,order=None,numtaps=None,fs=None)
scipy.signal.group_delay(system,w=512,whole=False,fs=2*pi)
scipy.signal.iircomb(w0,Q,ftype='notch',fs=2.0,*,pass_zero=False)
scipy.signal.iirdesign(wp,ws,gpass,gstop,analog=False,ftype='ellip',output='ba',fs=None)
scipy.signal.iirfilter(N,Wn,rp=None,rs=None,btype='band',analog=False,ftype='butter',output='ba',fs=None)
scipy.signal.iirnotch(w0,Q,fs=2.0)
scipy.signal.iirpeak(w0,Q,fs=2.0)
scipy.signal.lp2bp(b,a,wo=1.0,bw=1.0)
scipy.signal.lp2bp_zpk(z,p,k,wo=1.0,bw=1.0)
scipy.signal.lp2bs(b,a,wo=1.0,bw=1.0)
scipy.signal.lp2bs_zpk(z,p,k,wo=1.0,bw=1.0)
scipy.signal.lp2hp(b,a,wo=1.0)
scipy.signal.lp2hp_zpk(z,p,k,wo=1.0)
scipy.signal.lp2lp(b,a,wo=1.0)
scipy.signal.lp2lp_zpk(z,p,k,wo=1.0)
scipy.signal.maxflat()
scipy.signal.normalize(b,a)
scipy.signal.sos2tf(sos)
scipy.signal.sos2zpk(sos)
scipy.signal.sosfreqz(sos,worN=512,whole=False,fs=2*pi)
scipy.signal.tf2sos(b,a,pairing=None,*,analog=False)
scipy.signal.tf2zpk(b,a)
scipy.signal.yulewalk()
scipy.signal.zpk2sos(z,p,k,pairing=None,*,analog=False)
scipy.signal.zpk2tf(z,p,k)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/_peak_finding.py----------------------------------------
A:scipy.signal._peak_finding.locs->numpy.arange(0, datalen)
A:scipy.signal._peak_finding.results->_boolrelextrema(data, comparator, axis, order, mode)
A:scipy.signal._peak_finding.main->data.take(locs, axis=axis, mode=mode)
A:scipy.signal._peak_finding.plus->data.take(locs + shift, axis=axis, mode=mode)
A:scipy.signal._peak_finding.minus->data.take(locs - shift, axis=axis, mode=mode)
A:scipy.signal._peak_finding.value->numpy.intp(value)
A:scipy.signal._peak_finding.x->_arg_x_as_expected(x)
A:scipy.signal._peak_finding.peaks->_arg_peaks_as_expected(peaks)
A:scipy.signal._peak_finding.wlen->_arg_wlen_as_expected(wlen)
A:scipy.signal._peak_finding.prominence_data->_peak_prominences(x, peaks, wlen)
A:scipy.signal._peak_finding.keep->_select_by_property(properties['widths'], wmin, wmax)
A:scipy.signal._peak_finding.stacked_thresholds->numpy.vstack([x[peaks] - x[peaks - 1], x[peaks] - x[peaks + 1]])
A:scipy.signal._peak_finding.min_thresholds->numpy.min(stacked_thresholds, axis=0)
A:scipy.signal._peak_finding.max_thresholds->numpy.max(stacked_thresholds, axis=0)
A:scipy.signal._peak_finding.(peaks, left_edges, right_edges)->_local_maxima_1d(x)
A:scipy.signal._peak_finding.(pmin, pmax)->_unpack_condition_args(prominence, x, peaks)
A:scipy.signal._peak_finding.(hmin, hmax)->_unpack_condition_args(height, x, peaks)
A:scipy.signal._peak_finding.(tmin, tmax)->_unpack_condition_args(threshold, x, peaks)
A:scipy.signal._peak_finding.(keep, left_thresholds, right_thresholds)->_select_by_peak_threshold(x, peaks, tmin, tmax)
A:scipy.signal._peak_finding.(wmin, wmax)->_unpack_condition_args(width, x, peaks)
A:scipy.signal._peak_finding.all_max_cols->_boolrelextrema(matr, np.greater, axis=1, order=1)
A:scipy.signal._peak_finding.rows->numpy.arange(start_row - 1, -1, -1)
A:scipy.signal._peak_finding.cols->numpy.arange(0, matr.shape[1])
A:scipy.signal._peak_finding.prev_ridge_cols->numpy.array([line[1][-1] for line in ridge_lines])
A:scipy.signal._peak_finding.diffs->numpy.abs(col - prev_ridge_cols)
A:scipy.signal._peak_finding.closest->numpy.argmin(diffs)
A:scipy.signal._peak_finding.sortargs->numpy.array(np.argsort(line[0]))
A:scipy.signal._peak_finding.min_length->numpy.ceil(cwt.shape[0] / 4)
A:scipy.signal._peak_finding.window_size->int(window_size)
A:scipy.signal._peak_finding.(hf_window, odd)->divmod(window_size, 2)
A:scipy.signal._peak_finding.noises->numpy.empty_like(row_one)
A:scipy.signal._peak_finding.window_start->max(ind - hf_window, 0)
A:scipy.signal._peak_finding.window_end->min(ind + hf_window + odd, num_points)
A:scipy.signal._peak_finding.noises[ind]->scoreatpercentile(row_one[window_start:window_end], per=noise_perc)
A:scipy.signal._peak_finding.snr->abs(cwt[line[0][0], line[1][0]] / noises[line[1][0]])
A:scipy.signal._peak_finding.widths->numpy.array(widths, copy=False, ndmin=1)
A:scipy.signal._peak_finding.gap_thresh->numpy.ceil(widths[0])
A:scipy.signal._peak_finding.cwt_dat->cwt(vector, wavelet, widths)
A:scipy.signal._peak_finding.ridge_lines->_identify_ridge_lines(cwt_dat, max_distances, gap_thresh)
A:scipy.signal._peak_finding.filtered->_filter_ridge_lines(cwt_dat, ridge_lines, min_length=min_length, window_size=window_size, min_snr=min_snr, noise_perc=noise_perc)
A:scipy.signal._peak_finding.max_locs->numpy.asarray([x[1][0] for x in filtered])
scipy.signal._arg_peaks_as_expected(value)
scipy.signal._arg_wlen_as_expected(value)
scipy.signal._arg_x_as_expected(value)
scipy.signal._boolrelextrema(data,comparator,axis=0,order=1,mode='clip')
scipy.signal._filter_ridge_lines(cwt,ridge_lines,window_size=None,min_length=None,min_snr=1,noise_perc=10)
scipy.signal._identify_ridge_lines(matr,max_distances,gap_thresh)
scipy.signal._peak_finding._arg_peaks_as_expected(value)
scipy.signal._peak_finding._arg_wlen_as_expected(value)
scipy.signal._peak_finding._arg_x_as_expected(value)
scipy.signal._peak_finding._boolrelextrema(data,comparator,axis=0,order=1,mode='clip')
scipy.signal._peak_finding._filter_ridge_lines(cwt,ridge_lines,window_size=None,min_length=None,min_snr=1,noise_perc=10)
scipy.signal._peak_finding._identify_ridge_lines(matr,max_distances,gap_thresh)
scipy.signal._peak_finding._select_by_peak_threshold(x,peaks,tmin,tmax)
scipy.signal._peak_finding._select_by_property(peak_properties,pmin,pmax)
scipy.signal._peak_finding._unpack_condition_args(interval,x,peaks)
scipy.signal._peak_finding.argrelextrema(data,comparator,axis=0,order=1,mode='clip')
scipy.signal._peak_finding.argrelmax(data,axis=0,order=1,mode='clip')
scipy.signal._peak_finding.argrelmin(data,axis=0,order=1,mode='clip')
scipy.signal._peak_finding.find_peaks(x,height=None,threshold=None,distance=None,prominence=None,width=None,wlen=None,rel_height=0.5,plateau_size=None)
scipy.signal._peak_finding.find_peaks_cwt(vector,widths,wavelet=None,max_distances=None,gap_thresh=None,min_length=None,min_snr=1,noise_perc=10,window_size=None)
scipy.signal._peak_finding.peak_prominences(x,peaks,wlen=None)
scipy.signal._peak_finding.peak_widths(x,peaks,rel_height=0.5,prominence_data=None,wlen=None)
scipy.signal._select_by_peak_threshold(x,peaks,tmin,tmax)
scipy.signal._select_by_property(peak_properties,pmin,pmax)
scipy.signal._unpack_condition_args(interval,x,peaks)
scipy.signal.argrelextrema(data,comparator,axis=0,order=1,mode='clip')
scipy.signal.argrelmax(data,axis=0,order=1,mode='clip')
scipy.signal.argrelmin(data,axis=0,order=1,mode='clip')
scipy.signal.find_peaks(x,height=None,threshold=None,distance=None,prominence=None,width=None,wlen=None,rel_height=0.5,plateau_size=None)
scipy.signal.find_peaks_cwt(vector,widths,wavelet=None,max_distances=None,gap_thresh=None,min_length=None,min_snr=1,noise_perc=10,window_size=None)
scipy.signal.peak_prominences(x,peaks,wlen=None)
scipy.signal.peak_widths(x,peaks,rel_height=0.5,prominence_data=None,wlen=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/fir_filter_design.py----------------------------------------
scipy.signal.fir__dir__()
scipy.signal.fir__getattr__(name)
scipy.signal.fir_filter_design.__dir__()
scipy.signal.fir_filter_design.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/_wavelets.py----------------------------------------
A:scipy.signal._wavelets.c->sqrt(3)
A:scipy.signal._wavelets.z1c->numpy.conj(z1)
A:scipy.signal._wavelets.d0->numpy.real((1 - z1) * (1 - z1c))
A:scipy.signal._wavelets.a0->numpy.real(z1 * z1c)
A:scipy.signal._wavelets.yj->numpy.roots(P)
A:scipy.signal._wavelets.q->numpy.poly1d([1])
A:scipy.signal._wavelets.s2->numpy.sqrt(2)
A:scipy.signal._wavelets.gk->qmf(hk)
A:scipy.signal._wavelets.indx1->numpy.clip(2 * nn - kk, -1, N + 1)
A:scipy.signal._wavelets.indx2->numpy.clip(2 * nn - kk + 1, -1, N + 1)
A:scipy.signal._wavelets.m->numpy.empty((2, 2, N, N), 'd')
A:scipy.signal._wavelets.m[0, 0]->numpy.take(thk, indx1, 0)
A:scipy.signal._wavelets.m[0, 1]->numpy.take(thk, indx2, 0)
A:scipy.signal._wavelets.m[1, 0]->numpy.take(tgk, indx1, 0)
A:scipy.signal._wavelets.m[1, 1]->numpy.take(tgk, indx2, 0)
A:scipy.signal._wavelets.(lam, v)->eig(m[0, 0])
A:scipy.signal._wavelets.ind->numpy.argmin(np.absolute(lam - 1))
A:scipy.signal._wavelets.v->numpy.real(v[:, ind])
A:scipy.signal._wavelets.sm->numpy.sum(v)
A:scipy.signal._wavelets.bitdic['1']->numpy.dot(m[0, 1], bitdic['0'])
A:scipy.signal._wavelets.psi[::step]->numpy.dot(m[1, 0], bitdic['0'])
A:scipy.signal._wavelets.psi[1 << J - 1::step]->numpy.dot(m[1, 1], bitdic['0'])
A:scipy.signal._wavelets.ii->int(key[0])
A:scipy.signal._wavelets.temp->numpy.dot(m[0, ii], pastphi)
A:scipy.signal._wavelets.psi[num * fac::step]->numpy.dot(m[1, ii], pastphi)
A:scipy.signal._wavelets.x->numpy.linspace(-s * 2 * np.pi, s * 2 * np.pi, M)
A:scipy.signal._wavelets.output->numpy.empty((len(widths), len(data)), dtype=dtype)
A:scipy.signal._wavelets.gauss->numpy.exp(-xsq / (2 * wsq))
A:scipy.signal._wavelets.N->numpy.min([10 * width, len(data)])
A:scipy.signal._wavelets.wavelet_data->numpy.conj(wavelet(N, width, **kwargs)[::-1])
A:scipy.signal._wavelets.output[ind]->convolve(data, wavelet_data, mode='same')
scipy.signal._wavelets.cascade(hk,J=7)
scipy.signal._wavelets.cwt(data,wavelet,widths,dtype=None,**kwargs)
scipy.signal._wavelets.daub(p)
scipy.signal._wavelets.morlet(M,w=5.0,s=1.0,complete=True)
scipy.signal._wavelets.morlet2(M,s,w=5)
scipy.signal._wavelets.qmf(hk)
scipy.signal._wavelets.ricker(points,a)
scipy.signal.cascade(hk,J=7)
scipy.signal.cwt(data,wavelet,widths,dtype=None,**kwargs)
scipy.signal.daub(p)
scipy.signal.morlet(M,w=5.0,s=1.0,complete=True)
scipy.signal.morlet2(M,s,w=5)
scipy.signal.qmf(hk)
scipy.signal.ricker(points,a)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/spectral.py----------------------------------------
scipy.signal.spectral.__dir__()
scipy.signal.spectral.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/_max_len_seq.py----------------------------------------
A:scipy.signal._max_len_seq.known_taps->numpy.array(list(_mls_taps.keys()))
A:scipy.signal._max_len_seq.taps->numpy.array(taps)
A:scipy.signal._max_len_seq.length->int(length)
A:scipy.signal._max_len_seq.state->_max_len_seq_inner(taps, state, nbits, length, seq)
A:scipy.signal._max_len_seq.seq->numpy.empty(length, dtype=np.int8, order='c')
scipy.signal._max_len_seq.max_len_seq(nbits,state=None,length=None,taps=None)
scipy.signal.max_len_seq(nbits,state=None,length=None,taps=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/waveforms.py----------------------------------------
scipy.signal.waveforms.__dir__()
scipy.signal.waveforms.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/_spectral.py----------------------------------------
A:scipy.signal._spectral.pgram->numpy.empty_like(freqs)
A:scipy.signal._spectral.c->numpy.empty_like(x)
A:scipy.signal._spectral.s->numpy.empty_like(x)
A:scipy.signal._spectral.c[:]->numpy.cos(freqs[i] * x)
A:scipy.signal._spectral.s[:]->numpy.sin(freqs[i] * x)
A:scipy.signal._spectral.c_tau->numpy.cos(freqs[i] * tau)
A:scipy.signal._spectral.s_tau->numpy.sin(freqs[i] * tau)
scipy.signal._spectral._lombscargle(x,y,freqs)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/_fir_filter_design.py----------------------------------------
A:scipy.signal._fir_filter_design.A->abs(ripple)
A:scipy.signal._fir_filter_design.beta->kaiser_beta(atten)
A:scipy.signal._fir_filter_design.atten->kaiser_atten(numtaps, float(width) / nyq)
A:scipy.signal._fir_filter_design.pass_zero->bool(operator.index(pass_zero))
A:scipy.signal._fir_filter_design.cutoff->numpy.hstack(([0.0] * pass_zero, cutoff, [1.0] * pass_nyquist))
A:scipy.signal._fir_filter_design.bands->numpy.asarray(bands).copy()
A:scipy.signal._fir_filter_design.win->numpy.zeros(n_fft)
A:scipy.signal._fir_filter_design.c->numpy.cos(np.pi * m * scale_frequency)
A:scipy.signal._fir_filter_design.s->numpy.sum(h * c)
A:scipy.signal._fir_filter_design.d->numpy.diff(freq)
A:scipy.signal._fir_filter_design.freq->numpy.array(freq, copy=True)
A:scipy.signal._fir_filter_design.x->numpy.linspace(0.0, nyq, nfreqs)
A:scipy.signal._fir_filter_design.fx->numpy.interp(x, freq, gain)
A:scipy.signal._fir_filter_design.shift->numpy.exp(-(numtaps - 1) / 2.0 * 1j * np.pi * x / nyq)
A:scipy.signal._fir_filter_design.out_full->irfft(fx2)
A:scipy.signal._fir_filter_design.wind->get_window(window, numtaps, fftbins=False)
A:scipy.signal._fir_filter_design.numtaps->int(numtaps)
A:scipy.signal._fir_filter_design.nyq->float(nyq)
A:scipy.signal._fir_filter_design.desired->numpy.asarray(desired).flatten()
A:scipy.signal._fir_filter_design.weight->numpy.asarray(weight).flatten()
A:scipy.signal._fir_filter_design.q->numpy.dot(np.diff(np.sinc(bands * n) * bands, axis=2)[:, :, 0], weight)
A:scipy.signal._fir_filter_design.Q1->toeplitz(q[:M + 1])
A:scipy.signal._fir_filter_design.Q2->hankel(q[:M + 1], q[M:])
A:scipy.signal._fir_filter_design.b->numpy.dot(np.diff(b, axis=2)[:, :, 0], weight)
A:scipy.signal._fir_filter_design.a->solve(Q, b, assume_a='pos', check_finite=False)
A:scipy.signal._fir_filter_design.coeffs->numpy.hstack((a[:0:-1], 2 * a[0], a[1:]))
A:scipy.signal._fir_filter_design.sig->numpy.zeros(len(mag))
A:scipy.signal._fir_filter_design.h->numpy.asarray(h)
A:scipy.signal._fir_filter_design.n_fft->int(n_fft)
A:scipy.signal._fir_filter_design.H->numpy.sqrt(H, out=H)
A:scipy.signal._fir_filter_design.h_minimum->_dhtm(H)
A:scipy.signal._fir_filter_design.h_temp->ifft(np.exp(fft(h_temp)))
scipy.signal._dhtm(mag)
scipy.signal._fir_filter_design._dhtm(mag)
scipy.signal._fir_filter_design._get_fs(fs,nyq)
scipy.signal._fir_filter_design.firls(numtaps,bands,desired,weight=None,nyq=None,fs=None)
scipy.signal._fir_filter_design.firwin(numtaps,cutoff,width=None,window='hamming',pass_zero=True,scale=True,nyq=None,fs=None)
scipy.signal._fir_filter_design.firwin2(numtaps,freq,gain,nfreqs=None,window='hamming',nyq=None,antisymmetric=False,fs=None)
scipy.signal._fir_filter_design.kaiser_atten(numtaps,width)
scipy.signal._fir_filter_design.kaiser_beta(a)
scipy.signal._fir_filter_design.kaiserord(ripple,width)
scipy.signal._fir_filter_design.minimum_phase(h,method='homomorphic',n_fft=None)
scipy.signal._fir_filter_design.remez(numtaps,bands,desired,weight=None,Hz=None,type='bandpass',maxiter=25,grid_density=16,fs=None)
scipy.signal._get_fs(fs,nyq)
scipy.signal.firls(numtaps,bands,desired,weight=None,nyq=None,fs=None)
scipy.signal.firwin(numtaps,cutoff,width=None,window='hamming',pass_zero=True,scale=True,nyq=None,fs=None)
scipy.signal.firwin2(numtaps,freq,gain,nfreqs=None,window='hamming',nyq=None,antisymmetric=False,fs=None)
scipy.signal.kaiser_atten(numtaps,width)
scipy.signal.kaiser_beta(a)
scipy.signal.kaiserord(ripple,width)
scipy.signal.minimum_phase(h,method='homomorphic',n_fft=None)
scipy.signal.remez(numtaps,bands,desired,weight=None,Hz=None,type='bandpass',maxiter=25,grid_density=16,fs=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/_upfirdn.py----------------------------------------
A:scipy.signal._upfirdn.h_full->h_full.reshape(-1, up).T[:, ::-1].ravel().reshape(-1, up).T[:, ::-1].ravel()
A:scipy.signal._upfirdn.mode->_check_mode(mode)
A:scipy.signal._upfirdn.enum->mode_enum(mode)
A:scipy.signal._upfirdn.h->numpy.asarray(h, self._output_type)
A:scipy.signal._upfirdn.self._output_type->numpy.result_type(h.dtype, x_dtype, np.float32)
A:scipy.signal._upfirdn.self._up->int(up)
A:scipy.signal._upfirdn.self._down->int(down)
A:scipy.signal._upfirdn.self._h_trans_flip->numpy.ascontiguousarray(self._h_trans_flip)
A:scipy.signal._upfirdn.self._h_len_orig->len(h)
A:scipy.signal._upfirdn.output_len->_output_len(self._h_len_orig, x.shape[axis], self._up, self._down)
A:scipy.signal._upfirdn.output_shape->numpy.asarray(x.shape, dtype=np.int64)
A:scipy.signal._upfirdn.out->numpy.zeros(output_shape, dtype=self._output_type, order='C')
A:scipy.signal._upfirdn.x->numpy.asarray(x)
A:scipy.signal._upfirdn.ufd->_UpFIRDn(h, x.dtype, up, down)
scipy.signal._upfirdn._UpFIRDn(self,h,x_dtype,up,down)
scipy.signal._upfirdn._UpFIRDn.__init__(self,h,x_dtype,up,down)
scipy.signal._upfirdn._UpFIRDn.apply_filter(self,x,axis=-1,mode='constant',cval=0)
scipy.signal._upfirdn._check_mode(mode)
scipy.signal._upfirdn._pad_h(h,up)
scipy.signal._upfirdn.upfirdn(h,x,up=1,down=1,axis=-1,mode='constant',cval=0)
scipy.signal.upfirdn(h,x,up=1,down=1,axis=-1,mode='constant',cval=0)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/_czt.py----------------------------------------
A:scipy.signal._czt.m->_validate_sizes(n, m)
A:scipy.signal._czt.k->arange(max(m, n), dtype=np.min_scalar_type(-max(m, n) ** 2))
A:scipy.signal._czt.w->cmath.exp(-2j * pi / m)
A:scipy.signal._czt.wk2->numpy.exp(-(1j * pi * scale * k ** 2) / m)
A:scipy.signal._czt.nfft->next_fast_len(n + m - 1)
A:scipy.signal._czt.self._Fwk2->fft(1 / np.hstack((wk2[n - 1:0:-1], wk2[:m])), nfft)
A:scipy.signal._czt.self._yidx->slice(n - 1, n + m - 1)
A:scipy.signal._czt.x->numpy.asarray(x)
A:scipy.signal._czt.trnsp->numpy.arange(x.ndim)
A:scipy.signal._czt.y->ifft(self._Fwk2 * fft(x * self._Awk2, self._nfft))
A:scipy.signal._czt.a->cmath.exp(2j * pi * f1 / fs)
A:scipy.signal._czt.self.w->cmath.exp(-2j * pi / m * scale)
A:scipy.signal._czt.ak->numpy.exp(-2j * pi * f1 / fs * k[:n])
A:scipy.signal._czt.transform->ZoomFFT(x.shape[axis], fn, m=m, fs=fs, endpoint=endpoint)
scipy.signal.CZT(self,n,m=None,w=None,a=1+0j)
scipy.signal.CZT.points(self)
scipy.signal.ZoomFFT(self,n,fn,m=None,*,fs=2,endpoint=False)
scipy.signal._czt.CZT(self,n,m=None,w=None,a=1+0j)
scipy.signal._czt.CZT.__init__(self,n,m=None,w=None,a=1+0j)
scipy.signal._czt.CZT.points(self)
scipy.signal._czt.ZoomFFT(self,n,fn,m=None,*,fs=2,endpoint=False)
scipy.signal._czt.ZoomFFT.__init__(self,n,fn,m=None,*,fs=2,endpoint=False)
scipy.signal._czt._validate_sizes(n,m)
scipy.signal._czt.czt(x,m=None,w=None,a=1+0j,*,axis=-1)
scipy.signal._czt.czt_points(m,w=None,a=1+0j)
scipy.signal._czt.zoom_fft(x,fn,m=None,*,fs=2,endpoint=False,axis=-1)
scipy.signal._validate_sizes(n,m)
scipy.signal.czt(x,m=None,w=None,a=1+0j,*,axis=-1)
scipy.signal.czt_points(m,w=None,a=1+0j)
scipy.signal.zoom_fft(x,fn,m=None,*,fs=2,endpoint=False,axis=-1)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/filter_design.py----------------------------------------
scipy.signal.filter_design.__dir__()
scipy.signal.filter_design.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/_arraytools.py----------------------------------------
A:scipy.signal._arraytools.a_slice[axis]->slice(start, stop, step)
A:scipy.signal._arraytools.left_end->axis_slice(x, start=0, stop=1, axis=axis)
A:scipy.signal._arraytools.left_ext->axis_slice(x, start=n, stop=0, step=-1, axis=axis)
A:scipy.signal._arraytools.right_end->axis_slice(x, start=-1, axis=axis)
A:scipy.signal._arraytools.right_ext->axis_slice(x, start=-2, stop=-(n + 2), step=-1, axis=axis)
A:scipy.signal._arraytools.ext->numpy.concatenate((zeros, x, zeros), axis=axis)
A:scipy.signal._arraytools.ones->numpy.ones(ones_shape, dtype=x.dtype)
A:scipy.signal._arraytools.zeros_shape->list(x.shape)
A:scipy.signal._arraytools.zeros->numpy.zeros(zeros_shape, dtype=x.dtype)
scipy.signal._arraytools.axis_reverse(a,axis=-1)
scipy.signal._arraytools.axis_slice(a,start=None,stop=None,step=None,axis=-1)
scipy.signal._arraytools.const_ext(x,n,axis=-1)
scipy.signal._arraytools.even_ext(x,n,axis=-1)
scipy.signal._arraytools.odd_ext(x,n,axis=-1)
scipy.signal._arraytools.zero_ext(x,n,axis=-1)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/__init__.py----------------------------------------
A:scipy.signal.__init__.f->getattr(windows, name)
A:scipy.signal.__init__.lines->getattr(windows, name).__doc__.splitlines()
A:scipy.signal.__init__.wrapped.__doc__->'\n'.join(lines)
A:scipy.signal.__init__.locals()[name]->deco(name)
A:scipy.signal.__init__.test->PytestTester(__name__)
scipy.signal.__init__.deco(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/bsplines.py----------------------------------------
scipy.signal.bsplines.__dir__()
scipy.signal.bsplines.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/_ltisys.py----------------------------------------
A:scipy.signal._ltisys.N->len(system)
A:scipy.signal._ltisys.dt->kwargs.pop('dt', True)
A:scipy.signal._ltisys.(self.num, self.den)->normalize(*system)
A:scipy.signal._ltisys.self._num->atleast_1d(num)
A:scipy.signal._ltisys.self._den->atleast_1d(den)
A:scipy.signal._ltisys.den->numpy.hstack((den, np.zeros(diff)))
A:scipy.signal._ltisys.num->numpy.hstack((num, np.zeros(-diff)))
A:scipy.signal._ltisys.self._zeros->atleast_1d(zeros)
A:scipy.signal._ltisys.self._poles->atleast_1d(poles)
A:scipy.signal._ltisys.(self.A, self.B, self.C, self.D)->abcd_normalize(*system)
A:scipy.signal._ltisys.a->scipy.linalg.block_diag(self.A, other.A)
A:scipy.signal._ltisys.b->numpy.vstack((self.B, other.B))
A:scipy.signal._ltisys.c->numpy.hstack((self.C, other.C))
A:scipy.signal._ltisys.d->numpy.dot(other, self.D)
A:scipy.signal._ltisys.common_dtype->numpy.result_type(a.dtype, b.dtype, c.dtype, d.dtype)
A:scipy.signal._ltisys.other->numpy.atleast_2d(other)
A:scipy.signal._ltisys.self._A->_atleast_2d_or_none(A)
A:scipy.signal._ltisys.self._B->_atleast_2d_or_none(B)
A:scipy.signal._ltisys.self._C->_atleast_2d_or_none(C)
A:scipy.signal._ltisys.self._D->_atleast_2d_or_none(D)
A:scipy.signal._ltisys.sys->lti(*system)._as_zpk()
A:scipy.signal._ltisys.X0->zeros_like(B)
A:scipy.signal._ltisys.T->asarray(T)
A:scipy.signal._ltisys.U->ones(T.shape, sys.A.dtype)
A:scipy.signal._ltisys.ufunc->scipy.interpolate.interp1d(T, U, kind='linear', axis=0, bounds_error=False)
A:scipy.signal._ltisys.xout->numpy.zeros((out_samples, system.A.shape[0]))
A:scipy.signal._ltisys.yout->numpy.zeros((out_samples, system.C.shape[0]))
A:scipy.signal._ltisys.in1->in1.astype(in2.dtype).astype(in2.dtype)
A:scipy.signal._ltisys.(A, B, C, D)->map(np.asarray, (sys.A, sys.B, sys.C, sys.D))
A:scipy.signal._ltisys.xout[0]->dot(X0, linalg.expm(transpose(A) * T[0]))
A:scipy.signal._ltisys.expAT_dt->scipy.linalg.expm(transpose(A) * dt)
A:scipy.signal._ltisys.xout[i]->dot(xout[i - 1], expAT_dt)
A:scipy.signal._ltisys.M->numpy.vstack([np.hstack([A * dt, B * dt, np.zeros((n_states, n_inputs))]), np.hstack([np.zeros((n_inputs, n_states + n_inputs)), np.identity(n_inputs)]), np.zeros((n_inputs, n_states + 2 * n_inputs))])
A:scipy.signal._ltisys.expMT->scipy.linalg.expm(transpose(M))
A:scipy.signal._ltisys.vals->lsim2(sys, U, T, X0=X0, **kwargs)
A:scipy.signal._ltisys.r->numpy.linalg.matrix_rank(B)
A:scipy.signal._ltisys.t->numpy.asarray(t)
A:scipy.signal._ltisys.X->squeeze(sys.B + X0)
A:scipy.signal._ltisys.(_, h, _)->lsim(sys, 0.0, T, X, interp=False)
A:scipy.signal._ltisys.B->B.squeeze().squeeze()
A:scipy.signal._ltisys.(Tr, Yr, Xr)->lsim2(sys, T=T, X0=ic, **kwargs)
A:scipy.signal._ltisys.(w, y)->dfreqresp(system, w=w, n=n)
A:scipy.signal._ltisys.(w, h)->freqz_zpk(system.zeros, system.poles, system.gain, worN=worN, whole=whole)
A:scipy.signal._ltisys.poles->_order_complex_poles(poles)
A:scipy.signal._ltisys.ordered_poles->numpy.hstack((ordered_poles, im_poles))
A:scipy.signal._ltisys.transfer_matrix_not_j->numpy.delete(transfer_matrix, j, axis=1)
A:scipy.signal._ltisys.(Q, R)->s_qr(transfer_matrix_not_j, mode='full')
A:scipy.signal._ltisys.mat_ker_pj->numpy.dot(ker_pole[j], ker_pole[j].T)
A:scipy.signal._ltisys.yj->numpy.dot(mat_ker_pj, Q[:, -1])
A:scipy.signal._ltisys.m->numpy.dot(np.dot(np.conj(ker_pole_ij.T), np.dot(u, np.conj(u).T) - np.dot(np.conj(u), u.T)), ker_pole_ij)
A:scipy.signal._ltisys.(um, sm, vm)->numpy.linalg.svd(m)
A:scipy.signal._ltisys.transfer_matrix_j_mo_transfer_matrix_j->numpy.vstack((transfer_matrix[:, i, np.newaxis], transfer_matrix[:, j, np.newaxis]))
A:scipy.signal._ltisys.ker_pole_imo_mu1->numpy.dot(ker_pole[i], mu1)
A:scipy.signal._ltisys.ker_pole_i_nu1->numpy.dot(ker_pole[j], nu1)
A:scipy.signal._ltisys.ker_pole_mu_nu->numpy.dot(ker_pole_ij, mu_nu_matrix)
A:scipy.signal._ltisys.ker_pole_ij->numpy.vstack((np.hstack((ker_pole[i], np.zeros(ker_pole[i].shape))), np.hstack((np.zeros(ker_pole[j].shape), ker_pole[j]))))
A:scipy.signal._ltisys.mu_nu_matrix->numpy.vstack((np.hstack((mu1, mu2)), np.hstack((nu1, nu2))))
A:scipy.signal._ltisys.transfer_matrix_ij->numpy.dot(np.dot(ker_pole_mu_nu, ker_pole_mu_nu.T), transfer_matrix_j_mo_transfer_matrix_j)
A:scipy.signal._ltisys.(e_val, e_vec)->numpy.linalg.eig(m)
A:scipy.signal._ltisys.e_val_idx->numpy.argsort(np.abs(e_val))
A:scipy.signal._ltisys.ker_pole_mu->numpy.dot(ker_pole_ij, mu1_mu2_matrix)
A:scipy.signal._ltisys.mu1_mu2_matrix->numpy.hstack((mu1, mu2))
A:scipy.signal._ltisys.transfer_matrix_i_j->numpy.dot(np.dot(ker_pole_mu, np.conj(ker_pole_mu.T)), transfer_matrix_j_mo_transfer_matrix_j)
A:scipy.signal._ltisys.transfer_matrix[:, i]->numpy.real(ker_pole_mu[:, 0])
A:scipy.signal._ltisys.transfer_matrix[:, j]->numpy.imag(ker_pole_mu[:, 0])
A:scipy.signal._ltisys.r_comp->numpy.arange(nb_real + 1, len(poles) + 1, 2)
A:scipy.signal._ltisys.r_p->numpy.arange(1, hnb + 1)
A:scipy.signal._ltisys.r_j->numpy.arange(2, hnb + nb_real % 2)
A:scipy.signal._ltisys.det_transfer_matrixb->numpy.abs(np.linalg.det(transfer_matrix))
A:scipy.signal._ltisys.transfer_matrix_not_i_j->numpy.delete(transfer_matrix, (i, j), axis=1)
A:scipy.signal._ltisys.(Q, _)->s_qr(pole_space_j, mode='full')
A:scipy.signal._ltisys.det_transfer_matrix->numpy.max((np.sqrt(np.spacing(1)), np.abs(np.linalg.det(transfer_matrix))))
A:scipy.signal._ltisys.cur_rtol->numpy.abs((det_transfer_matrix - det_transfer_matrixb) / det_transfer_matrix)
A:scipy.signal._ltisys.(update_loop, poles)->_valid_inputs(A, B, poles, method, rtol, maxiter)
A:scipy.signal._ltisys.(u, z)->s_qr(B, mode='full')
A:scipy.signal._ltisys.rankB->numpy.linalg.matrix_rank(B)
A:scipy.signal._ltisys.diag_poles->numpy.zeros(A.shape)
A:scipy.signal._ltisys.diag_poles[idx, idx]->numpy.real(p)
A:scipy.signal._ltisys.diag_poles[idx + 1, idx + 1]->numpy.real(p)
A:scipy.signal._ltisys.diag_poles[idx + 1, idx]->numpy.imag(p)
A:scipy.signal._ltisys.transfer_matrix->transfer_matrix.astype(complex).astype(complex)
A:scipy.signal._ltisys.transfer_matrix_j->numpy.hstack([np.real(transfer_matrix_j), np.imag(transfer_matrix_j)])
A:scipy.signal._ltisys.(stop, cur_rtol, nb_iter)->update_loop(ker_pole, transfer_matrix, poles, B, maxiter, rtol)
A:scipy.signal._ltisys.rel->transfer_matrix[:, idx].copy()
A:scipy.signal._ltisys.gain_matrix->numpy.real(gain_matrix)
A:scipy.signal._ltisys.full_state_feedback->Bunch()
A:scipy.signal._ltisys.full_state_feedback.computed_poles->_order_complex_poles(np.linalg.eig(A - np.dot(B, gain_matrix))[0])
A:scipy.signal._ltisys.system->system._as_tf()._as_tf()
A:scipy.signal._ltisys.is_ss_input->isinstance(system, StateSpace)
A:scipy.signal._ltisys.u->numpy.zeros((t.shape[0], system.inputs))
A:scipy.signal._ltisys.out_samples->len(u)
A:scipy.signal._ltisys.tout->numpy.linspace(0.0, stoptime, num=out_samples)
A:scipy.signal._ltisys.xout[0, :]->numpy.asarray(x0)
A:scipy.signal._ltisys.u_dt_interp->interp1d(t, u.transpose(), copy=False, bounds_error=True)
A:scipy.signal._ltisys.u_dt->u_dt_interp(tout).transpose()
A:scipy.signal._ltisys.one_output->dlsim(system, u, t=t, x0=x0)
A:scipy.signal._ltisys.u[:, i]->numpy.ones((t.shape[0],))
A:scipy.signal._ltisys.(num, den)->TransferFunction._z_to_zinv(system.num.ravel(), system.den)
A:scipy.signal._ltisys.phase->numpy.rad2deg(numpy.unwrap(numpy.angle(y)))
scipy.signal.Bunch(self,**kwds)
scipy.signal.LinearTimeInvariant(self)
scipy.signal.LinearTimeInvariant._as_ss(self)
scipy.signal.LinearTimeInvariant._as_tf(self)
scipy.signal.LinearTimeInvariant._as_zpk(self)
scipy.signal.LinearTimeInvariant._dt_dict(self)
scipy.signal.LinearTimeInvariant.dt(self)
scipy.signal.LinearTimeInvariant.poles(self)
scipy.signal.LinearTimeInvariant.zeros(self)
scipy.signal.StateSpace(self,*system,**kwargs)
scipy.signal.StateSpace.A(self)
scipy.signal.StateSpace.A(self,A)
scipy.signal.StateSpace.B(self)
scipy.signal.StateSpace.B(self,B)
scipy.signal.StateSpace.C(self)
scipy.signal.StateSpace.C(self,C)
scipy.signal.StateSpace.D(self)
scipy.signal.StateSpace.D(self,D)
scipy.signal.StateSpace.__add__(self,other)
scipy.signal.StateSpace.__mul__(self,other)
scipy.signal.StateSpace.__neg__(self)
scipy.signal.StateSpace.__radd__(self,other)
scipy.signal.StateSpace.__repr__(self)
scipy.signal.StateSpace.__rmul__(self,other)
scipy.signal.StateSpace.__rsub__(self,other)
scipy.signal.StateSpace.__sub__(self,other)
scipy.signal.StateSpace.__truediv__(self,other)
scipy.signal.StateSpace._check_binop_other(self,other)
scipy.signal.StateSpace._copy(self,system)
scipy.signal.StateSpace.to_ss(self)
scipy.signal.StateSpace.to_tf(self,**kwargs)
scipy.signal.StateSpace.to_zpk(self,**kwargs)
scipy.signal.StateSpaceContinuous(StateSpace,lti)
scipy.signal.StateSpaceContinuous.to_discrete(self,dt,method='zoh',alpha=None)
scipy.signal.StateSpaceDiscrete(StateSpace,dlti)
scipy.signal.TransferFunction(self,*system,**kwargs)
scipy.signal.TransferFunction.__repr__(self)
scipy.signal.TransferFunction._copy(self,system)
scipy.signal.TransferFunction._z_to_zinv(num,den)
scipy.signal.TransferFunction._zinv_to_z(num,den)
scipy.signal.TransferFunction.den(self)
scipy.signal.TransferFunction.den(self,den)
scipy.signal.TransferFunction.num(self)
scipy.signal.TransferFunction.num(self,num)
scipy.signal.TransferFunction.to_ss(self)
scipy.signal.TransferFunction.to_tf(self)
scipy.signal.TransferFunction.to_zpk(self)
scipy.signal.TransferFunctionContinuous(TransferFunction,lti)
scipy.signal.TransferFunctionContinuous.to_discrete(self,dt,method='zoh',alpha=None)
scipy.signal.TransferFunctionDiscrete(TransferFunction,dlti)
scipy.signal.ZerosPolesGain(self,*system,**kwargs)
scipy.signal.ZerosPolesGain.__repr__(self)
scipy.signal.ZerosPolesGain._copy(self,system)
scipy.signal.ZerosPolesGain.gain(self)
scipy.signal.ZerosPolesGain.gain(self,gain)
scipy.signal.ZerosPolesGain.poles(self)
scipy.signal.ZerosPolesGain.poles(self,poles)
scipy.signal.ZerosPolesGain.to_ss(self)
scipy.signal.ZerosPolesGain.to_tf(self)
scipy.signal.ZerosPolesGain.to_zpk(self)
scipy.signal.ZerosPolesGain.zeros(self)
scipy.signal.ZerosPolesGain.zeros(self,zeros)
scipy.signal.ZerosPolesGainContinuous(ZerosPolesGain,lti)
scipy.signal.ZerosPolesGainContinuous.to_discrete(self,dt,method='zoh',alpha=None)
scipy.signal.ZerosPolesGainDiscrete(ZerosPolesGain,dlti)
scipy.signal._KNV0(B,ker_pole,transfer_matrix,j,poles)
scipy.signal._KNV0_loop(ker_pole,transfer_matrix,poles,B,maxiter,rtol)
scipy.signal._YT_complex(ker_pole,Q,transfer_matrix,i,j)
scipy.signal._YT_loop(ker_pole,transfer_matrix,poles,B,maxiter,rtol)
scipy.signal._YT_real(ker_pole,Q,transfer_matrix,i,j)
scipy.signal._atleast_2d_or_none(arg)
scipy.signal._cast_to_array_dtype(in1,in2)
scipy.signal._default_response_times(A,n)
scipy.signal._ltisys.Bunch(self,**kwds)
scipy.signal._ltisys.Bunch.__init__(self,**kwds)
scipy.signal._ltisys.LinearTimeInvariant(self)
scipy.signal._ltisys.LinearTimeInvariant.__init__(self)
scipy.signal._ltisys.LinearTimeInvariant._as_ss(self)
scipy.signal._ltisys.LinearTimeInvariant._as_tf(self)
scipy.signal._ltisys.LinearTimeInvariant._as_zpk(self)
scipy.signal._ltisys.LinearTimeInvariant._dt_dict(self)
scipy.signal._ltisys.LinearTimeInvariant.dt(self)
scipy.signal._ltisys.LinearTimeInvariant.poles(self)
scipy.signal._ltisys.LinearTimeInvariant.zeros(self)
scipy.signal._ltisys.StateSpace(self,*system,**kwargs)
scipy.signal._ltisys.StateSpace.A(self)
scipy.signal._ltisys.StateSpace.A(self,A)
scipy.signal._ltisys.StateSpace.B(self)
scipy.signal._ltisys.StateSpace.B(self,B)
scipy.signal._ltisys.StateSpace.C(self)
scipy.signal._ltisys.StateSpace.C(self,C)
scipy.signal._ltisys.StateSpace.D(self)
scipy.signal._ltisys.StateSpace.D(self,D)
scipy.signal._ltisys.StateSpace.__add__(self,other)
scipy.signal._ltisys.StateSpace.__init__(self,*system,**kwargs)
scipy.signal._ltisys.StateSpace.__mul__(self,other)
scipy.signal._ltisys.StateSpace.__neg__(self)
scipy.signal._ltisys.StateSpace.__radd__(self,other)
scipy.signal._ltisys.StateSpace.__repr__(self)
scipy.signal._ltisys.StateSpace.__rmul__(self,other)
scipy.signal._ltisys.StateSpace.__rsub__(self,other)
scipy.signal._ltisys.StateSpace.__sub__(self,other)
scipy.signal._ltisys.StateSpace.__truediv__(self,other)
scipy.signal._ltisys.StateSpace._check_binop_other(self,other)
scipy.signal._ltisys.StateSpace._copy(self,system)
scipy.signal._ltisys.StateSpace.to_ss(self)
scipy.signal._ltisys.StateSpace.to_tf(self,**kwargs)
scipy.signal._ltisys.StateSpace.to_zpk(self,**kwargs)
scipy.signal._ltisys.StateSpaceContinuous(StateSpace,lti)
scipy.signal._ltisys.StateSpaceContinuous.to_discrete(self,dt,method='zoh',alpha=None)
scipy.signal._ltisys.StateSpaceDiscrete(StateSpace,dlti)
scipy.signal._ltisys.TransferFunction(self,*system,**kwargs)
scipy.signal._ltisys.TransferFunction.__init__(self,*system,**kwargs)
scipy.signal._ltisys.TransferFunction.__repr__(self)
scipy.signal._ltisys.TransferFunction._copy(self,system)
scipy.signal._ltisys.TransferFunction._z_to_zinv(num,den)
scipy.signal._ltisys.TransferFunction._zinv_to_z(num,den)
scipy.signal._ltisys.TransferFunction.den(self)
scipy.signal._ltisys.TransferFunction.den(self,den)
scipy.signal._ltisys.TransferFunction.num(self)
scipy.signal._ltisys.TransferFunction.num(self,num)
scipy.signal._ltisys.TransferFunction.to_ss(self)
scipy.signal._ltisys.TransferFunction.to_tf(self)
scipy.signal._ltisys.TransferFunction.to_zpk(self)
scipy.signal._ltisys.TransferFunctionContinuous(TransferFunction,lti)
scipy.signal._ltisys.TransferFunctionContinuous.to_discrete(self,dt,method='zoh',alpha=None)
scipy.signal._ltisys.TransferFunctionDiscrete(TransferFunction,dlti)
scipy.signal._ltisys.ZerosPolesGain(self,*system,**kwargs)
scipy.signal._ltisys.ZerosPolesGain.__init__(self,*system,**kwargs)
scipy.signal._ltisys.ZerosPolesGain.__repr__(self)
scipy.signal._ltisys.ZerosPolesGain._copy(self,system)
scipy.signal._ltisys.ZerosPolesGain.gain(self)
scipy.signal._ltisys.ZerosPolesGain.gain(self,gain)
scipy.signal._ltisys.ZerosPolesGain.poles(self)
scipy.signal._ltisys.ZerosPolesGain.poles(self,poles)
scipy.signal._ltisys.ZerosPolesGain.to_ss(self)
scipy.signal._ltisys.ZerosPolesGain.to_tf(self)
scipy.signal._ltisys.ZerosPolesGain.to_zpk(self)
scipy.signal._ltisys.ZerosPolesGain.zeros(self)
scipy.signal._ltisys.ZerosPolesGain.zeros(self,zeros)
scipy.signal._ltisys.ZerosPolesGainContinuous(ZerosPolesGain,lti)
scipy.signal._ltisys.ZerosPolesGainContinuous.to_discrete(self,dt,method='zoh',alpha=None)
scipy.signal._ltisys.ZerosPolesGainDiscrete(ZerosPolesGain,dlti)
scipy.signal._ltisys._KNV0(B,ker_pole,transfer_matrix,j,poles)
scipy.signal._ltisys._KNV0_loop(ker_pole,transfer_matrix,poles,B,maxiter,rtol)
scipy.signal._ltisys._YT_complex(ker_pole,Q,transfer_matrix,i,j)
scipy.signal._ltisys._YT_loop(ker_pole,transfer_matrix,poles,B,maxiter,rtol)
scipy.signal._ltisys._YT_real(ker_pole,Q,transfer_matrix,i,j)
scipy.signal._ltisys._atleast_2d_or_none(arg)
scipy.signal._ltisys._cast_to_array_dtype(in1,in2)
scipy.signal._ltisys._default_response_times(A,n)
scipy.signal._ltisys._order_complex_poles(poles)
scipy.signal._ltisys._valid_inputs(A,B,poles,method,rtol,maxiter)
scipy.signal._ltisys.bode(system,w=None,n=100)
scipy.signal._ltisys.dbode(system,w=None,n=100)
scipy.signal._ltisys.dfreqresp(system,w=None,n=10000,whole=False)
scipy.signal._ltisys.dimpulse(system,x0=None,t=None,n=None)
scipy.signal._ltisys.dlsim(system,u,t=None,x0=None)
scipy.signal._ltisys.dlti(self,*system,**kwargs)
scipy.signal._ltisys.dlti.__init__(self,*system,**kwargs)
scipy.signal._ltisys.dlti.bode(self,w=None,n=100)
scipy.signal._ltisys.dlti.dt(self)
scipy.signal._ltisys.dlti.dt(self,dt)
scipy.signal._ltisys.dlti.freqresp(self,w=None,n=10000,whole=False)
scipy.signal._ltisys.dlti.impulse(self,x0=None,t=None,n=None)
scipy.signal._ltisys.dlti.output(self,u,t,x0=None)
scipy.signal._ltisys.dlti.step(self,x0=None,t=None,n=None)
scipy.signal._ltisys.dstep(system,x0=None,t=None,n=None)
scipy.signal._ltisys.freqresp(system,w=None,n=10000)
scipy.signal._ltisys.impulse(system,X0=None,T=None,N=None)
scipy.signal._ltisys.impulse2(system,X0=None,T=None,N=None,**kwargs)
scipy.signal._ltisys.lsim(system,U,T,X0=None,interp=True)
scipy.signal._ltisys.lsim2(system,U=None,T=None,X0=None,**kwargs)
scipy.signal._ltisys.lti(self,*system)
scipy.signal._ltisys.lti.__init__(self,*system)
scipy.signal._ltisys.lti.bode(self,w=None,n=100)
scipy.signal._ltisys.lti.freqresp(self,w=None,n=10000)
scipy.signal._ltisys.lti.impulse(self,X0=None,T=None,N=None)
scipy.signal._ltisys.lti.output(self,U,T,X0=None)
scipy.signal._ltisys.lti.step(self,X0=None,T=None,N=None)
scipy.signal._ltisys.lti.to_discrete(self,dt,method='zoh',alpha=None)
scipy.signal._ltisys.place_poles(A,B,poles,method='YT',rtol=0.001,maxiter=30)
scipy.signal._ltisys.step(system,X0=None,T=None,N=None)
scipy.signal._ltisys.step2(system,X0=None,T=None,N=None,**kwargs)
scipy.signal._order_complex_poles(poles)
scipy.signal._valid_inputs(A,B,poles,method,rtol,maxiter)
scipy.signal.bode(system,w=None,n=100)
scipy.signal.dbode(system,w=None,n=100)
scipy.signal.dfreqresp(system,w=None,n=10000,whole=False)
scipy.signal.dimpulse(system,x0=None,t=None,n=None)
scipy.signal.dlsim(system,u,t=None,x0=None)
scipy.signal.dlti(self,*system,**kwargs)
scipy.signal.dlti.bode(self,w=None,n=100)
scipy.signal.dlti.dt(self)
scipy.signal.dlti.dt(self,dt)
scipy.signal.dlti.freqresp(self,w=None,n=10000,whole=False)
scipy.signal.dlti.impulse(self,x0=None,t=None,n=None)
scipy.signal.dlti.output(self,u,t,x0=None)
scipy.signal.dlti.step(self,x0=None,t=None,n=None)
scipy.signal.dstep(system,x0=None,t=None,n=None)
scipy.signal.freqresp(system,w=None,n=10000)
scipy.signal.impulse(system,X0=None,T=None,N=None)
scipy.signal.impulse2(system,X0=None,T=None,N=None,**kwargs)
scipy.signal.lsim(system,U,T,X0=None,interp=True)
scipy.signal.lsim2(system,U=None,T=None,X0=None,**kwargs)
scipy.signal.lti(self,*system)
scipy.signal.lti.bode(self,w=None,n=100)
scipy.signal.lti.freqresp(self,w=None,n=10000)
scipy.signal.lti.impulse(self,X0=None,T=None,N=None)
scipy.signal.lti.output(self,U,T,X0=None)
scipy.signal.lti.step(self,X0=None,T=None,N=None)
scipy.signal.lti.to_discrete(self,dt,method='zoh',alpha=None)
scipy.signal.place_poles(A,B,poles,method='YT',rtol=0.001,maxiter=30)
scipy.signal.step(system,X0=None,T=None,N=None)
scipy.signal.step2(system,X0=None,T=None,N=None,**kwargs)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/_spectral_py.py----------------------------------------
A:scipy.signal._spectral_py.x->numpy.concatenate((x, np.zeros(zeros_shape)), axis=-1)
A:scipy.signal._spectral_py.y->numpy.concatenate((y, np.zeros(zeros_shape)), axis=-1)
A:scipy.signal._spectral_py.freqs->scipy.fft.rfftfreq(nfft, 1 / fs)
A:scipy.signal._spectral_py.pgram->_lombscargle(x, y, freqs)
A:scipy.signal._spectral_py.(freqs, Pxx)->welch(x, fs=fs, window=window, nperseg=nperseg, noverlap=noverlap, nfft=nfft, detrend=detrend, axis=axis)
A:scipy.signal._spectral_py.(freqs, _, Pxy)->_spectral_helper(x, y, fs, window, nperseg, noverlap, nfft, detrend, return_onesided, scaling, axis, mode='psd')
A:scipy.signal._spectral_py.bias->_median_bias(Pxy.shape[-1])
A:scipy.signal._spectral_py.Pxy->numpy.reshape(Pxy, Pxy.shape[:-1])
A:scipy.signal._spectral_py.(window, nperseg)->_triage_segments(window, nperseg, input_length=x.shape[axis])
A:scipy.signal._spectral_py.(freqs, time, Sxx)->_spectral_helper(x, x, fs, window, nperseg, noverlap, nfft, detrend, return_onesided, scaling, axis, mode='stft')
A:scipy.signal._spectral_py.Sxx->numpy.unwrap(Sxx, axis=axis)
A:scipy.signal._spectral_py.nperseg->int(nperseg)
A:scipy.signal._spectral_py.noverlap->int(noverlap)
A:scipy.signal._spectral_py.win->numpy.asarray(window)
A:scipy.signal._spectral_py.binsums->sum((win[ii * step:(ii + 1) * step] ** 2 for ii in range(nperseg // step)))
A:scipy.signal._spectral_py.(freqs, time, Zxx)->_spectral_helper(x, x, fs, window, nperseg, noverlap, nfft, detrend, return_onesided, scaling=scaling, axis=axis, mode='stft', boundary=boundary, padded=padded)
A:scipy.signal._spectral_py.freq_axis->int(freq_axis)
A:scipy.signal._spectral_py.time_axis->int(time_axis)
A:scipy.signal._spectral_py.nfft->int(nfft)
A:scipy.signal._spectral_py.zouter->list(range(Zxx.ndim))
A:scipy.signal._spectral_py.Zxx->numpy.transpose(Zxx, zouter + [freq_axis, time_axis])
A:scipy.signal._spectral_py.norm->numpy.zeros(outputlength, dtype=xsubs.dtype)
A:scipy.signal._spectral_py.(_, Pyy)->welch(y, fs=fs, window=window, nperseg=nperseg, noverlap=noverlap, nfft=nfft, detrend=detrend, axis=axis)
A:scipy.signal._spectral_py.(_, Pxy)->csd(x, y, fs=fs, window=window, nperseg=nperseg, noverlap=noverlap, nfft=nfft, detrend=detrend, axis=axis)
A:scipy.signal._spectral_py.axis->int(axis)
A:scipy.signal._spectral_py.outdtype->numpy.result_type(x, np.complex64)
A:scipy.signal._spectral_py.xouter->list(x.shape)
A:scipy.signal._spectral_py.youter->list(y.shape)
A:scipy.signal._spectral_py.emptyout->numpy.moveaxis(np.empty(outshape), -1, axis)
A:scipy.signal._spectral_py.pad_shape->list(y.shape)
A:scipy.signal._spectral_py.(win, nperseg)->_triage_segments(window, nperseg, input_length=x.shape[-1])
A:scipy.signal._spectral_py.d->detrend(d)
A:scipy.signal._spectral_py.scale->numpy.sqrt(scale)
A:scipy.signal._spectral_py.result->func(result, n=nfft)
A:scipy.signal._spectral_py.result_y->_fft_helper(y, win, detrend_func, nperseg, noverlap, nfft, sides)
scipy.signal._fft_helper(x,win,detrend_func,nperseg,noverlap,nfft,sides)
scipy.signal._median_bias(n)
scipy.signal._spectral_helper(x,y,fs=1.0,window='hann',nperseg=None,noverlap=None,nfft=None,detrend='constant',return_onesided=True,scaling='density',axis=-1,mode='psd',boundary=None,padded=False)
scipy.signal._spectral_py._fft_helper(x,win,detrend_func,nperseg,noverlap,nfft,sides)
scipy.signal._spectral_py._median_bias(n)
scipy.signal._spectral_py._spectral_helper(x,y,fs=1.0,window='hann',nperseg=None,noverlap=None,nfft=None,detrend='constant',return_onesided=True,scaling='density',axis=-1,mode='psd',boundary=None,padded=False)
scipy.signal._spectral_py._triage_segments(window,nperseg,input_length)
scipy.signal._spectral_py.check_COLA(window,nperseg,noverlap,tol=1e-10)
scipy.signal._spectral_py.check_NOLA(window,nperseg,noverlap,tol=1e-10)
scipy.signal._spectral_py.coherence(x,y,fs=1.0,window='hann',nperseg=None,noverlap=None,nfft=None,detrend='constant',axis=-1)
scipy.signal._spectral_py.csd(x,y,fs=1.0,window='hann',nperseg=None,noverlap=None,nfft=None,detrend='constant',return_onesided=True,scaling='density',axis=-1,average='mean')
scipy.signal._spectral_py.istft(Zxx,fs=1.0,window='hann',nperseg=None,noverlap=None,nfft=None,input_onesided=True,boundary=True,time_axis=-1,freq_axis=-2,scaling='spectrum')
scipy.signal._spectral_py.lombscargle(x,y,freqs,precenter=False,normalize=False)
scipy.signal._spectral_py.periodogram(x,fs=1.0,window='boxcar',nfft=None,detrend='constant',return_onesided=True,scaling='density',axis=-1)
scipy.signal._spectral_py.spectrogram(x,fs=1.0,window=('tukey',0.25),nperseg=None,noverlap=None,nfft=None,detrend='constant',return_onesided=True,scaling='density',axis=-1,mode='psd')
scipy.signal._spectral_py.stft(x,fs=1.0,window='hann',nperseg=256,noverlap=None,nfft=None,detrend=False,return_onesided=True,boundary='zeros',padded=True,axis=-1,scaling='spectrum')
scipy.signal._spectral_py.welch(x,fs=1.0,window='hann',nperseg=None,noverlap=None,nfft=None,detrend='constant',return_onesided=True,scaling='density',axis=-1,average='mean')
scipy.signal._triage_segments(window,nperseg,input_length)
scipy.signal.check_COLA(window,nperseg,noverlap,tol=1e-10)
scipy.signal.check_NOLA(window,nperseg,noverlap,tol=1e-10)
scipy.signal.coherence(x,y,fs=1.0,window='hann',nperseg=None,noverlap=None,nfft=None,detrend='constant',axis=-1)
scipy.signal.csd(x,y,fs=1.0,window='hann',nperseg=None,noverlap=None,nfft=None,detrend='constant',return_onesided=True,scaling='density',axis=-1,average='mean')
scipy.signal.istft(Zxx,fs=1.0,window='hann',nperseg=None,noverlap=None,nfft=None,input_onesided=True,boundary=True,time_axis=-1,freq_axis=-2,scaling='spectrum')
scipy.signal.lombscargle(x,y,freqs,precenter=False,normalize=False)
scipy.signal.periodogram(x,fs=1.0,window='boxcar',nfft=None,detrend='constant',return_onesided=True,scaling='density',axis=-1)
scipy.signal.spectrogram(x,fs=1.0,window=('tukey',0.25),nperseg=None,noverlap=None,nfft=None,detrend='constant',return_onesided=True,scaling='density',axis=-1,mode='psd')
scipy.signal.stft(x,fs=1.0,window='hann',nperseg=256,noverlap=None,nfft=None,detrend=False,return_onesided=True,boundary='zeros',padded=True,axis=-1,scaling='spectrum')
scipy.signal.welch(x,fs=1.0,window='hann',nperseg=None,noverlap=None,nfft=None,detrend='constant',return_onesided=True,scaling='density',axis=-1,average='mean')


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/_bsplines.py----------------------------------------
A:scipy.signal._bsplines.Iin->Iin.astype('F').astype('F')
A:scipy.signal._bsplines.ckr->cspline2d(Iin, lmbda)
A:scipy.signal._bsplines.cki->cspline2d(Iin.imag, lmbda)
A:scipy.signal._bsplines.outr->sepfir2d(ckr, hcol, hcol)
A:scipy.signal._bsplines.outi->sepfir2d(cki, hcol, hcol)
A:scipy.signal._bsplines.out->out.astype(intype).astype(intype)
A:scipy.signal._bsplines.fval->float_factorial(order)
A:scipy.signal._bsplines.(funclist, condfuncs)->_bspline_piecefunctions(n)
A:scipy.signal._bsplines.x->asarray(x)
A:scipy.signal._bsplines.ax->abs(asarray(x))
A:scipy.signal._bsplines.res->zeros_like(newx)
A:scipy.signal._bsplines.cond1->less(ax, 0.5)
A:scipy.signal._bsplines.omeg->arctan2(sqrt(144 * lam - 1), sqrt(xi))
A:scipy.signal._bsplines.ak->abs(k)
A:scipy.signal._bsplines.(rho, omega)->_coeff_smooth(lamb)
A:scipy.signal._bsplines.K->len(signal)
A:scipy.signal._bsplines.yp->zeros((K,), signal.dtype.char)
A:scipy.signal._bsplines.k->arange(K)
A:scipy.signal._bsplines.y->zeros((K,), signal.dtype.char)
A:scipy.signal._bsplines.y[K - 1]->numpy.core.umath.add.reduce((_hs(k, cs, rho, omega) + _hs(k + 1, cs, rho, omega)) * signal[::-1])
A:scipy.signal._bsplines.y[K - 2]->numpy.core.umath.add.reduce((_hs(k - 1, cs, rho, omega) + _hs(k + 2, cs, rho, omega)) * signal[::-1])
A:scipy.signal._bsplines.yplus->zeros((K,), signal.dtype.char)
A:scipy.signal._bsplines.output->zeros((K,), signal.dtype.char)
A:scipy.signal._bsplines.N->len(cj)
A:scipy.signal._bsplines.res[cond1]->qspline1d_eval(cj, -newx[cond1])
A:scipy.signal._bsplines.res[cond2]->qspline1d_eval(cj, 2 * (N - 1) - newx[cond2])
A:scipy.signal._bsplines.result->zeros_like(newx)
A:scipy.signal._bsplines.indj->thisj.clip(0, N - 1)
scipy.signal._bspline_piecefunctions(order)
scipy.signal._bsplines._bspline_piecefunctions(order)
scipy.signal._bsplines._coeff_smooth(lam)
scipy.signal._bsplines._cubic_coeff(signal)
scipy.signal._bsplines._cubic_smooth_coeff(signal,lamb)
scipy.signal._bsplines._hc(k,cs,rho,omega)
scipy.signal._bsplines._hs(k,cs,rho,omega)
scipy.signal._bsplines._quadratic_coeff(signal)
scipy.signal._bsplines.bspline(x,n)
scipy.signal._bsplines.cspline1d(signal,lamb=0.0)
scipy.signal._bsplines.cspline1d_eval(cj,newx,dx=1.0,x0=0)
scipy.signal._bsplines.cubic(x)
scipy.signal._bsplines.gauss_spline(x,n)
scipy.signal._bsplines.qspline1d(signal,lamb=0.0)
scipy.signal._bsplines.qspline1d_eval(cj,newx,dx=1.0,x0=0)
scipy.signal._bsplines.quadratic(x)
scipy.signal._bsplines.spline_filter(Iin,lmbda=5.0)
scipy.signal._coeff_smooth(lam)
scipy.signal._cubic_coeff(signal)
scipy.signal._cubic_smooth_coeff(signal,lamb)
scipy.signal._hc(k,cs,rho,omega)
scipy.signal._hs(k,cs,rho,omega)
scipy.signal._quadratic_coeff(signal)
scipy.signal.bspline(x,n)
scipy.signal.cspline1d(signal,lamb=0.0)
scipy.signal.cspline1d_eval(cj,newx,dx=1.0,x0=0)
scipy.signal.cubic(x)
scipy.signal.gauss_spline(x,n)
scipy.signal.qspline1d(signal,lamb=0.0)
scipy.signal.qspline1d_eval(cj,newx,dx=1.0,x0=0)
scipy.signal.quadratic(x)
scipy.signal.spline_filter(Iin,lmbda=5.0)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/_waveforms.py----------------------------------------
A:scipy.signal._waveforms.w->asarray(w + (t - t))
A:scipy.signal._waveforms.t->asarray(t)
A:scipy.signal._waveforms.y->zeros(t.shape, ytype)
A:scipy.signal._waveforms.tmod->mod(t, 2 * pi)
A:scipy.signal._waveforms.tsub->extract(mask3, tmod)
A:scipy.signal._waveforms.wsub->extract(mask3, w)
A:scipy.signal._waveforms.ref->pow(10.0, bwr / 20.0)
A:scipy.signal._waveforms.tref->pow(10.0, tpr / 20.0)
A:scipy.signal._waveforms.yenv->exp(-a * t * t)
A:scipy.signal._waveforms.phase->_sweep_poly_phase(t, poly)
A:scipy.signal._waveforms.f0->float(f0)
A:scipy.signal._waveforms.t1->float(t1)
A:scipy.signal._waveforms.f1->float(f1)
A:scipy.signal._waveforms.intpoly->polyint(poly)
A:scipy.signal._waveforms.out->zeros(shape, dtype)
A:scipy.signal._waveforms.shape->numpy.atleast_1d(shape)
A:scipy.signal._waveforms.idx->tuple(shape // 2)
scipy.signal._chirp_phase(t,f0,t1,f1,method='linear',vertex_zero=True)
scipy.signal._sweep_poly_phase(t,poly)
scipy.signal._waveforms._chirp_phase(t,f0,t1,f1,method='linear',vertex_zero=True)
scipy.signal._waveforms._sweep_poly_phase(t,poly)
scipy.signal._waveforms.chirp(t,f0,t1,f1,method='linear',phi=0,vertex_zero=True)
scipy.signal._waveforms.gausspulse(t,fc=1000,bw=0.5,bwr=-6,tpr=-60,retquad=False,retenv=False)
scipy.signal._waveforms.sawtooth(t,width=1)
scipy.signal._waveforms.square(t,duty=0.5)
scipy.signal._waveforms.sweep_poly(t,poly,phi=0)
scipy.signal._waveforms.unit_impulse(shape,idx=None,dtype=float)
scipy.signal.chirp(t,f0,t1,f1,method='linear',phi=0,vertex_zero=True)
scipy.signal.gausspulse(t,fc=1000,bw=0.5,bwr=-6,tpr=-60,retquad=False,retenv=False)
scipy.signal.sawtooth(t,width=1)
scipy.signal.square(t,duty=0.5)
scipy.signal.sweep_poly(t,poly,phi=0)
scipy.signal.unit_impulse(shape,idx=None,dtype=float)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/lti_conversion.py----------------------------------------
scipy.signal.lti_conversion.__dir__()
scipy.signal.lti_conversion.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/tests/mpsig.py----------------------------------------
A:scipy.signal.tests.mpsig.degree->_relative_degree(z, p)
A:scipy.signal.tests.mpsig.numer->_prod([zm1 - t for t in z])
A:scipy.signal.tests.mpsig.denom->_prod([zm1 - t for t in p])
A:scipy.signal.tests.mpsig.poles->_butter_analog_poles(n)
A:scipy.signal.tests.mpsig.(z, p, k)->_zpkbilinear(z, p, k, fs=fs)
A:scipy.signal.tests.mpsig.zm1->mpmath.exp(1j * wk)
scipy.signal.tests.mpsig._butter_analog_poles(n)
scipy.signal.tests.mpsig._prod(seq)
scipy.signal.tests.mpsig._relative_degree(z,p)
scipy.signal.tests.mpsig._zpkbilinear(z,p,k,fs)
scipy.signal.tests.mpsig._zpklp2lp(z,p,k,wo=1)
scipy.signal.tests.mpsig.butter_lp(n,Wn)
scipy.signal.tests.mpsig.zpkfreqz(z,p,k,worN=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/tests/test_bsplines.py----------------------------------------
A:scipy.signal.tests.test_bsplines.result_array_complex->array([[0.23062746, 0.06338176, 0.34902312, 0.31944105], [0.14701256, 0.13277773, 0.29428615, 0.09814697], [0.52873842, 0.06484157, 0.09517566, 0.46420389], [0.09286829, 0.09371954, 0.1422526, 0.16007024]])
A:scipy.signal.tests.test_bsplines.data_array_real->numpy.random.rand(12, 12)
A:scipy.signal.tests.test_bsplines.result_array_real->array([[-0.463312621, 8.33391222, 0.697290949, 5.28390836, 5.92066474, 6.59452137, 9.8440695, -8.78324188, 7.2067575, -8.17222994, -4.38633345, 9.89917069], [2.67755154, 6.2419217, -3.15730578, 9.87658581, -9.96930425, 3.17194115, -4.50919947, 5.75423446, 9.65979824, -8.29066885, 0.971416087, -2.38331897], [-7.08868346, 4.89887705, -1.37062289, 7.70705838, 2.51526461, 3.65885497, 5.16786604, -0.00877715342, 4.10533325, 9.04761993, -0.577960351, 9.86382519], [-4.71444301, -1.68038985, 2.84695116, 1.14315938, -3.17127091, 1.91830461, 7.13779687, -5.35737482, -9.66586425, -9.87717456, 9.93160672, 4.71948144], [9.49551194, -1.92958436, 6.25427993, -9.05582911, 3.97562282, 7.68232426, -1.04514824, -5.86021443, -8.43007451, 5.47528997, 2.06330736, -8.65968112], [-8.917201, 8.87065356, 3.76879937, 2.56222894, -0.828387146, 8.72288903, 6.42474741, -6.84576083, 9.94724115, 6.9066538, -6.61084494, -9.44907391], [9.2519679, -0.77403203, 7.05371046, -2.73505725, 2.53953305, -1.82889155, 2.95454824, -1.66362046, 5.72478916, -3.10287679, 1.54017123, -7.8775902], [-3.98464539, -2.44316992, -1.12708657, 1.01725672, -8.89294671, -5.42145629, -6.16370321, 2.91775492, 9.64132208, 0.702499998, -2.02622392, 1.56308431], [-2.22050773, 7.89951554, 5.98970713, -7.35861835, 5.45459283, -7.76427957, 3.6728049, -4.05521315, 4.51967507, -3.22738749, -3.65080177, 3.05630155], [-6.21240584, -0.296796126, -8.34800163, 9.21564563, -3.61958784, -4.77120006, -3.99454057, 0.00105021988, -6.95982829, 6.04380797, 8.4318125, -2.71653339], [1.19638037, 0.0699718842, 6.72020394, -2.13963198, 3.75309875, -5.70076744, 5.92143551, -7.22150575, -3.77114594, -1.11903194, -5.39151466, 3.06620093], [9.86326886, 1.05134482, -7.75950607, -3.64429655, 7.81848957, -9.02270373, 3.73399754, -4.71962549, -7.71144306, 3.78263161, 6.46034818, -4.43444731]])
A:scipy.signal.tests.test_bsplines.c1d->array([1.21037185, 1.86293902, 2.98834059, 4.11660378, 4.78893826])
A:scipy.signal.tests.test_bsplines.c1d0->array([0.78683946, 2.05333735, 2.99981113, 3.94741812, 5.21051638])
A:scipy.signal.tests.test_bsplines.q1d0->array([0.85350007, 2.02441743, 2.99999534, 3.97561055, 5.14634135])
A:scipy.signal.tests.test_bsplines.y->array([4.216, 6.864, 3.514, 6.203, 6.759, 7.433, 7.874, 5.879, 1.396, 4.094])
A:scipy.signal.tests.test_bsplines.cj->scipy.signal._bsplines.qspline1d(y)
A:scipy.signal.tests.test_bsplines.newy->array([6.203, 4.49418159, 3.514, 5.18390821, 6.864, 5.91436915, 4.21600002, 5.91436915, 6.864, 5.18390821, 3.514, 4.49418159, 6.203, 6.71900226, 6.759, 7.03980488, 7.433, 7.81016848, 7.874, 7.32718426, 5.879, 3.23872593, 1.396, 2.34046013, 4.094, 2.34046013, 1.396, 3.23872593, 5.879, 7.32718426, 7.874, 7.81016848, 7.433, 7.03980488, 6.759, 6.71900226, 6.203, 4.49418159])
A:scipy.signal.tests.test_bsplines.filt->numpy.array([1.0, 2.0, 4.0, 2.0, 1.0])
A:scipy.signal.tests.test_bsplines.image->numpy.random.rand(71, 73)
scipy.signal.tests.testTestBSplines
scipy.signal.tests.testTestBSplines.test_bspline(self)
scipy.signal.tests.testTestBSplines.test_cspline1d(self)
scipy.signal.tests.testTestBSplines.test_cspline1d_eval(self)
scipy.signal.tests.testTestBSplines.test_cubic(self)
scipy.signal.tests.testTestBSplines.test_gauss_spline(self)
scipy.signal.tests.testTestBSplines.test_gauss_spline_list(self)
scipy.signal.tests.testTestBSplines.test_qspline1d(self)
scipy.signal.tests.testTestBSplines.test_qspline1d_eval(self)
scipy.signal.tests.testTestBSplines.test_quadratic(self)
scipy.signal.tests.testTestBSplines.test_spline_filter(self)
scipy.signal.tests.test_bsplines.TestBSplines
scipy.signal.tests.test_bsplines.TestBSplines.test_bspline(self)
scipy.signal.tests.test_bsplines.TestBSplines.test_cspline1d(self)
scipy.signal.tests.test_bsplines.TestBSplines.test_cspline1d_eval(self)
scipy.signal.tests.test_bsplines.TestBSplines.test_cubic(self)
scipy.signal.tests.test_bsplines.TestBSplines.test_gauss_spline(self)
scipy.signal.tests.test_bsplines.TestBSplines.test_gauss_spline_list(self)
scipy.signal.tests.test_bsplines.TestBSplines.test_qspline1d(self)
scipy.signal.tests.test_bsplines.TestBSplines.test_qspline1d_eval(self)
scipy.signal.tests.test_bsplines.TestBSplines.test_quadratic(self)
scipy.signal.tests.test_bsplines.TestBSplines.test_spline_filter(self)
scipy.signal.tests.test_bsplines.test_cspline2d()
scipy.signal.tests.test_bsplines.test_qspline2d()
scipy.signal.tests.test_bsplines.test_sepfir2d_invalid_filter()
scipy.signal.tests.test_bsplines.test_sepfir2d_invalid_image()
scipy.signal.tests.testtest_cspline2d()
scipy.signal.tests.testtest_qspline2d()
scipy.signal.tests.testtest_sepfir2d_invalid_filter()
scipy.signal.tests.testtest_sepfir2d_invalid_image()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/tests/test_array_tools.py----------------------------------------
A:scipy.signal.tests.test_array_tools.a->numpy.array([[1, 2, 3, 4, 5], [9, 8, 7, 6, 5]])
A:scipy.signal.tests.test_array_tools.s->axis_slice(a, start=0, step=2, axis=1)
A:scipy.signal.tests.test_array_tools.r->axis_reverse(a, axis=1)
A:scipy.signal.tests.test_array_tools.odd->odd_ext(a, 1, axis=0)
A:scipy.signal.tests.test_array_tools.expected->numpy.array([[0, 0, 0, 0, 0], [1, 2, 3, 4, 5], [9, 8, 7, 6, 5], [0, 0, 0, 0, 0]])
A:scipy.signal.tests.test_array_tools.even->even_ext(a, 1, axis=0)
A:scipy.signal.tests.test_array_tools.const->const_ext(a, 1, axis=0)
A:scipy.signal.tests.test_array_tools.zero->zero_ext(a, 1, axis=0)
scipy.signal.tests.test_array_tools.TestArrayTools
scipy.signal.tests.test_array_tools.TestArrayTools.test_axis_reverse(self)
scipy.signal.tests.test_array_tools.TestArrayTools.test_axis_slice(self)
scipy.signal.tests.test_array_tools.TestArrayTools.test_const_ext(self)
scipy.signal.tests.test_array_tools.TestArrayTools.test_even_ext(self)
scipy.signal.tests.test_array_tools.TestArrayTools.test_odd_ext(self)
scipy.signal.tests.test_array_tools.TestArrayTools.test_zero_ext(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/tests/test_wavelets.py----------------------------------------
A:scipy.signal.tests.test_wavelets.lpcoef->scipy.signal._wavelets.daub(i)
A:scipy.signal.tests.test_wavelets.k->len(lpcoef)
A:scipy.signal.tests.test_wavelets.(x, phi, psi)->scipy.signal._wavelets.cascade(lpcoef, J)
A:scipy.signal.tests.test_wavelets.x->numpy.array([5.03701224e-09 + 2.46742437e-24j, 1.88279253 + 0j, 5.03701224e-09 - 2.46742437e-24j])
A:scipy.signal.tests.test_wavelets.y->scipy.signal._wavelets.morlet2(3, s=1 / (2 * np.pi), w=2)
A:scipy.signal.tests.test_wavelets.w->scipy.signal._wavelets.ricker(points, a)
A:scipy.signal.tests.test_wavelets.expected->(np.pi ** (-0.25) * np.sqrt(1 / 0.5)).astype(complex)
A:scipy.signal.tests.test_wavelets.max_loc->numpy.argmax(w)
A:scipy.signal.tests.test_wavelets.half_vec->numpy.arange(0, points // 2)
A:scipy.signal.tests.test_wavelets.exp_zero1->numpy.argmin(np.abs(vec - a))
A:scipy.signal.tests.test_wavelets.exp_zero2->numpy.argmin(np.abs(vec + a))
A:scipy.signal.tests.test_wavelets.test_data->numpy.sin(np.pi * np.arange(0, len_data) / 10.0)
A:scipy.signal.tests.test_wavelets.cwt_dat->scipy.signal._wavelets.cwt(test_data, flat_wavelet, widths)
scipy.signal.tests.testTestWavelets
scipy.signal.tests.testTestWavelets.test_cascade(self)
scipy.signal.tests.testTestWavelets.test_cwt(self)
scipy.signal.tests.testTestWavelets.test_daub(self)
scipy.signal.tests.testTestWavelets.test_morlet(self)
scipy.signal.tests.testTestWavelets.test_morlet2(self)
scipy.signal.tests.testTestWavelets.test_qmf(self)
scipy.signal.tests.testTestWavelets.test_ricker(self)
scipy.signal.tests.test_wavelets.TestWavelets
scipy.signal.tests.test_wavelets.TestWavelets.test_cascade(self)
scipy.signal.tests.test_wavelets.TestWavelets.test_cwt(self)
scipy.signal.tests.test_wavelets.TestWavelets.test_daub(self)
scipy.signal.tests.test_wavelets.TestWavelets.test_morlet(self)
scipy.signal.tests.test_wavelets.TestWavelets.test_morlet2(self)
scipy.signal.tests.test_wavelets.TestWavelets.test_qmf(self)
scipy.signal.tests.test_wavelets.TestWavelets.test_ricker(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/tests/test_waveforms.py----------------------------------------
A:scipy.signal.tests.test_waveforms.w->scipy.signal._waveforms.chirp(t=0, f0=10.0, f1=1.0, t1=1.0, method='hyperbolic')
A:scipy.signal.tests.test_waveforms.t->numpy.linspace(0, 2.0, 10000)
A:scipy.signal.tests.test_waveforms.phase->scipy.signal._waveforms._sweep_poly_phase(t, p)
A:scipy.signal.tests.test_waveforms.(tf, f)->compute_frequency(t, phase)
A:scipy.signal.tests.test_waveforms.abserr->numpy.max(np.abs(f - expected))
A:scipy.signal.tests.test_waveforms.expected->numpy.poly1d(p)(tf)
A:scipy.signal.tests.test_waveforms.float_result->scipy.signal._waveforms.gausspulse('cutoff', tpr=-60.0)
A:scipy.signal.tests.test_waveforms.int_result->scipy.signal._waveforms.gausspulse('cutoff', tpr=-60)
A:scipy.signal.tests.test_waveforms.p->numpy.array([2.0, 1.0, 0.0, -2.0])
A:scipy.signal.tests.test_waveforms.imp->scipy.signal._waveforms.unit_impulse((5, 2), (3, 1), dtype=complex)
scipy.signal.tests.testTestChirp
scipy.signal.tests.testTestChirp.test_hyperbolic_at_zero(self)
scipy.signal.tests.testTestChirp.test_hyperbolic_freq_01(self)
scipy.signal.tests.testTestChirp.test_hyperbolic_zero_freq(self)
scipy.signal.tests.testTestChirp.test_integer_all(self)
scipy.signal.tests.testTestChirp.test_integer_f0(self)
scipy.signal.tests.testTestChirp.test_integer_f1(self)
scipy.signal.tests.testTestChirp.test_integer_t1(self)
scipy.signal.tests.testTestChirp.test_linear_at_zero(self)
scipy.signal.tests.testTestChirp.test_linear_freq_01(self)
scipy.signal.tests.testTestChirp.test_linear_freq_02(self)
scipy.signal.tests.testTestChirp.test_logarithmic_at_zero(self)
scipy.signal.tests.testTestChirp.test_logarithmic_freq_01(self)
scipy.signal.tests.testTestChirp.test_logarithmic_freq_02(self)
scipy.signal.tests.testTestChirp.test_logarithmic_freq_03(self)
scipy.signal.tests.testTestChirp.test_quadratic_at_zero(self)
scipy.signal.tests.testTestChirp.test_quadratic_at_zero2(self)
scipy.signal.tests.testTestChirp.test_quadratic_freq_01(self)
scipy.signal.tests.testTestChirp.test_quadratic_freq_02(self)
scipy.signal.tests.testTestChirp.test_unknown_method(self)
scipy.signal.tests.testTestGaussPulse
scipy.signal.tests.testTestGaussPulse.test_integer_bw(self)
scipy.signal.tests.testTestGaussPulse.test_integer_bwr(self)
scipy.signal.tests.testTestGaussPulse.test_integer_fc(self)
scipy.signal.tests.testTestGaussPulse.test_integer_tpr(self)
scipy.signal.tests.testTestSweepPoly
scipy.signal.tests.testTestSweepPoly.test_sweep_poly_const(self)
scipy.signal.tests.testTestSweepPoly.test_sweep_poly_cubic(self)
scipy.signal.tests.testTestSweepPoly.test_sweep_poly_cubic2(self)
scipy.signal.tests.testTestSweepPoly.test_sweep_poly_cubic3(self)
scipy.signal.tests.testTestSweepPoly.test_sweep_poly_linear(self)
scipy.signal.tests.testTestSweepPoly.test_sweep_poly_quad1(self)
scipy.signal.tests.testTestSweepPoly.test_sweep_poly_quad2(self)
scipy.signal.tests.testTestUnitImpulse
scipy.signal.tests.testTestUnitImpulse.test_dtype(self)
scipy.signal.tests.testTestUnitImpulse.test_index(self)
scipy.signal.tests.testTestUnitImpulse.test_mid(self)
scipy.signal.tests.testTestUnitImpulse.test_no_index(self)
scipy.signal.tests.test_waveforms.TestChirp
scipy.signal.tests.test_waveforms.TestChirp.test_hyperbolic_at_zero(self)
scipy.signal.tests.test_waveforms.TestChirp.test_hyperbolic_freq_01(self)
scipy.signal.tests.test_waveforms.TestChirp.test_hyperbolic_zero_freq(self)
scipy.signal.tests.test_waveforms.TestChirp.test_integer_all(self)
scipy.signal.tests.test_waveforms.TestChirp.test_integer_f0(self)
scipy.signal.tests.test_waveforms.TestChirp.test_integer_f1(self)
scipy.signal.tests.test_waveforms.TestChirp.test_integer_t1(self)
scipy.signal.tests.test_waveforms.TestChirp.test_linear_at_zero(self)
scipy.signal.tests.test_waveforms.TestChirp.test_linear_freq_01(self)
scipy.signal.tests.test_waveforms.TestChirp.test_linear_freq_02(self)
scipy.signal.tests.test_waveforms.TestChirp.test_logarithmic_at_zero(self)
scipy.signal.tests.test_waveforms.TestChirp.test_logarithmic_freq_01(self)
scipy.signal.tests.test_waveforms.TestChirp.test_logarithmic_freq_02(self)
scipy.signal.tests.test_waveforms.TestChirp.test_logarithmic_freq_03(self)
scipy.signal.tests.test_waveforms.TestChirp.test_quadratic_at_zero(self)
scipy.signal.tests.test_waveforms.TestChirp.test_quadratic_at_zero2(self)
scipy.signal.tests.test_waveforms.TestChirp.test_quadratic_freq_01(self)
scipy.signal.tests.test_waveforms.TestChirp.test_quadratic_freq_02(self)
scipy.signal.tests.test_waveforms.TestChirp.test_unknown_method(self)
scipy.signal.tests.test_waveforms.TestGaussPulse
scipy.signal.tests.test_waveforms.TestGaussPulse.test_integer_bw(self)
scipy.signal.tests.test_waveforms.TestGaussPulse.test_integer_bwr(self)
scipy.signal.tests.test_waveforms.TestGaussPulse.test_integer_fc(self)
scipy.signal.tests.test_waveforms.TestGaussPulse.test_integer_tpr(self)
scipy.signal.tests.test_waveforms.TestSweepPoly
scipy.signal.tests.test_waveforms.TestSweepPoly.test_sweep_poly_const(self)
scipy.signal.tests.test_waveforms.TestSweepPoly.test_sweep_poly_cubic(self)
scipy.signal.tests.test_waveforms.TestSweepPoly.test_sweep_poly_cubic2(self)
scipy.signal.tests.test_waveforms.TestSweepPoly.test_sweep_poly_cubic3(self)
scipy.signal.tests.test_waveforms.TestSweepPoly.test_sweep_poly_linear(self)
scipy.signal.tests.test_waveforms.TestSweepPoly.test_sweep_poly_quad1(self)
scipy.signal.tests.test_waveforms.TestSweepPoly.test_sweep_poly_quad2(self)
scipy.signal.tests.test_waveforms.TestUnitImpulse
scipy.signal.tests.test_waveforms.TestUnitImpulse.test_dtype(self)
scipy.signal.tests.test_waveforms.TestUnitImpulse.test_index(self)
scipy.signal.tests.test_waveforms.TestUnitImpulse.test_mid(self)
scipy.signal.tests.test_waveforms.TestUnitImpulse.test_no_index(self)
scipy.signal.tests.test_waveforms.chirp_geometric(t,f0,f1,t1)
scipy.signal.tests.test_waveforms.chirp_hyperbolic(t,f0,f1,t1)
scipy.signal.tests.test_waveforms.chirp_linear(t,f0,f1,t1)
scipy.signal.tests.test_waveforms.chirp_quadratic(t,f0,f1,t1,vertex_zero=True)
scipy.signal.tests.test_waveforms.compute_frequency(t,theta)
scipy.signal.tests.testchirp_geometric(t,f0,f1,t1)
scipy.signal.tests.testchirp_hyperbolic(t,f0,f1,t1)
scipy.signal.tests.testchirp_linear(t,f0,f1,t1)
scipy.signal.tests.testchirp_quadratic(t,f0,f1,t1,vertex_zero=True)
scipy.signal.tests.testcompute_frequency(t,theta)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/tests/test_ltisys.py----------------------------------------
A:scipy.signal.tests.test_ltisys.P2->P2.copy().copy()
A:scipy.signal.tests.test_ltisys.fsf->place_poles(A, B, (-1, -2, -3, -4), rtol=1e-16, maxiter=42)
A:scipy.signal.tests.test_ltisys.(expected, _)->numpy.linalg.eig(A - np.dot(B, fsf.gain_matrix))
A:scipy.signal.tests.test_ltisys.A->numpy.array([[-1.0, 0.0], [0.0, -2.0]])
A:scipy.signal.tests.test_ltisys.B->numpy.array([[0.0], [0.0], [1.0]])
A:scipy.signal.tests.test_ltisys.P->numpy.array((-2 + 1j, -2 - 1j, -3, -2))
A:scipy.signal.tests.test_ltisys.b->numpy.array([1.0, 3.0, 5.0])
A:scipy.signal.tests.test_ltisys.a->numpy.array([1.0, 2.0, 2.0, 1.0])
A:scipy.signal.tests.test_ltisys.(A, B, C, D)->abcd_normalize(A=self.A, D=self.D)
A:scipy.signal.tests.test_ltisys.(bb, aa)->ss2tf(A, B, C, D)
A:scipy.signal.tests.test_ltisys.(num, den)->ss2tf(A, B, C, D)
A:scipy.signal.tests.test_ltisys.C->numpy.array([[1.0, 0.0, 0.0]])
A:scipy.signal.tests.test_ltisys.D->numpy.array([[0.0]])
A:scipy.signal.tests.test_ltisys.(b_all, a)->ss2tf(A, B, C, D)
A:scipy.signal.tests.test_ltisys.(b0, a0)->ss2tf(A, B, C[0], D[0])
A:scipy.signal.tests.test_ltisys.(b1, a1)->ss2tf(A, B, C[1], D[1])
A:scipy.signal.tests.test_ltisys.(b2, a2)->ss2tf(A, B, C[2], D[2])
A:scipy.signal.tests.test_ltisys.system->lti([], [-1] * 4, [1])
A:scipy.signal.tests.test_ltisys.t->numpy.linspace(0, 1, 100)
A:scipy.signal.tests.test_ltisys.u->numpy.zeros_like(t)
A:scipy.signal.tests.test_ltisys.(tout, y, x)->lsim2(system, X0=[1.0, 0.0])
A:scipy.signal.tests.test_ltisys.expected_x->numpy.array([0.0, 0.0, 0.0, 0.1, 0.1, 0.1])
A:scipy.signal.tests.test_ltisys.expected_y->numpy.ones_like(tout)
A:scipy.signal.tests.test_ltisys.expected_x0->numpy.exp(-tout)
A:scipy.signal.tests.test_ltisys.expected_x1->numpy.exp(-2.0 * tout)
A:scipy.signal.tests.test_ltisys.(tout, y)->self.func(system, atol=1e-10, rtol=1e-08)
A:scipy.signal.tests.test_ltisys.s->ZerosPolesGain(1, 2, 3)
A:scipy.signal.tests.test_ltisys.s1->StateSpace(np.array([[-0.5, 0.7], [0.3, -0.8]]), np.array([[1], [0]]), np.array([[1, 0]]), np.array([[0]]))
A:scipy.signal.tests.test_ltisys.s2->StateSpace(np.array([[-0.2, -0.1], [0.4, -0.1]]), np.array([[1], [0]]), np.array([[1, 0]]), np.array([[0]]))
A:scipy.signal.tests.test_ltisys.s_discrete->StateSpace(np.array([[-0.5, 0.7], [0.3, -0.8]]), np.array([[1], [0]]), np.array([[1, 0]]), np.array([[0]])).to_discrete(0.1)
A:scipy.signal.tests.test_ltisys.s2_discrete->StateSpace(np.array([[-0.2, -0.1], [0.4, -0.1]]), np.array([[1], [0]]), np.array([[1, 0]]), np.array([[0]])).to_discrete(0.2)
A:scipy.signal.tests.test_ltisys.s3_discrete->StateSpace(np.array([[-0.2, -0.1], [0.4, -0.1]]), np.array([[1], [0]]), np.array([[1, 0]]), np.array([[0]])).to_discrete(0.1)
A:scipy.signal.tests.test_ltisys.self.A->numpy.array([[1.0, 2.0], [3.0, 4.0]])
A:scipy.signal.tests.test_ltisys.self.B->numpy.array([[-1.0], [5.0]])
A:scipy.signal.tests.test_ltisys.self.C->numpy.array([[4.0, 5.0]])
A:scipy.signal.tests.test_ltisys.self.D->numpy.array([[2.5]])
A:scipy.signal.tests.test_ltisys.B_->numpy.zeros((2, 0))
A:scipy.signal.tests.test_ltisys.D_->numpy.zeros((0, 0))
A:scipy.signal.tests.test_ltisys.C_->numpy.zeros((0, 2))
A:scipy.signal.tests.test_ltisys.(w, mag, phase)->bode(system, n=100)
A:scipy.signal.tests.test_ltisys.expected_w->numpy.logspace(-2, 1, n)
A:scipy.signal.tests.test_ltisys.(w, H)->freqresp(system, w=w)
scipy.signal.tests.testTestImpulse(_TestImpulseFuncs)
scipy.signal.tests.testTestImpulse.setup_method(self)
scipy.signal.tests.testTestImpulse2(_TestImpulseFuncs)
scipy.signal.tests.testTestImpulse2.setup_method(self)
scipy.signal.tests.testTestLsim
scipy.signal.tests.testTestLsim.lti_nowarn(self,*args)
scipy.signal.tests.testTestLsim.test_double_integrator(self)
scipy.signal.tests.testTestLsim.test_first_order(self)
scipy.signal.tests.testTestLsim.test_integrator(self)
scipy.signal.tests.testTestLsim.test_jordan_block(self)
scipy.signal.tests.testTestLsim.test_miso(self)
scipy.signal.tests.testTestLsim.test_nonzero_initial_time(self)
scipy.signal.tests.testTestLti
scipy.signal.tests.testTestLti.test_lti_instantiation(self)
scipy.signal.tests.testTestPlacePoles
scipy.signal.tests.testTestPlacePoles._check(self,A,B,P,**kwargs)
scipy.signal.tests.testTestPlacePoles.test_complex(self)
scipy.signal.tests.testTestPlacePoles.test_errors(self)
scipy.signal.tests.testTestPlacePoles.test_real(self)
scipy.signal.tests.testTestPlacePoles.test_tricky_B(self)
scipy.signal.tests.testTestSS2TF
scipy.signal.tests.testTestSS2TF.check_matrix_shapes(self,p,q,r)
scipy.signal.tests.testTestSS2TF.test_all_int_arrays(self)
scipy.signal.tests.testTestSS2TF.test_basic(self)
scipy.signal.tests.testTestSS2TF.test_multioutput(self)
scipy.signal.tests.testTestSS2TF.test_shapes(self)
scipy.signal.tests.testTestSS2TF.test_simo_round_trip(self)
scipy.signal.tests.testTestSS2TF.test_zero_order_round_trip(self)
scipy.signal.tests.testTestStateSpace
scipy.signal.tests.testTestStateSpace.test_conversion(self)
scipy.signal.tests.testTestStateSpace.test_initialization(self)
scipy.signal.tests.testTestStateSpace.test_operators(self)
scipy.signal.tests.testTestStateSpace.test_properties(self)
scipy.signal.tests.testTestStep(_TestStepFuncs)
scipy.signal.tests.testTestStep.setup_method(self)
scipy.signal.tests.testTestStep.test_complex_input(self)
scipy.signal.tests.testTestStep2(_TestStepFuncs)
scipy.signal.tests.testTestStep2.setup_method(self)
scipy.signal.tests.testTestStep2.test_05(self)
scipy.signal.tests.testTestTransferFunction
scipy.signal.tests.testTestTransferFunction.test_conversion(self)
scipy.signal.tests.testTestTransferFunction.test_initialization(self)
scipy.signal.tests.testTestTransferFunction.test_properties(self)
scipy.signal.tests.testTestZerosPolesGain
scipy.signal.tests.testTestZerosPolesGain.test_conversion(self)
scipy.signal.tests.testTestZerosPolesGain.test_initialization(self)
scipy.signal.tests.testTest_abcd_normalize
scipy.signal.tests.testTest_abcd_normalize.setup_method(self)
scipy.signal.tests.testTest_abcd_normalize.test_AB_mismatch_fails(self)
scipy.signal.tests.testTest_abcd_normalize.test_AC_mismatch_fails(self)
scipy.signal.tests.testTest_abcd_normalize.test_A_nosquare_fails(self)
scipy.signal.tests.testTest_abcd_normalize.test_BD_mismatch_fails(self)
scipy.signal.tests.testTest_abcd_normalize.test_CD_mismatch_fails(self)
scipy.signal.tests.testTest_abcd_normalize.test_missing_A(self)
scipy.signal.tests.testTest_abcd_normalize.test_missing_AB(self)
scipy.signal.tests.testTest_abcd_normalize.test_missing_ABC_fails(self)
scipy.signal.tests.testTest_abcd_normalize.test_missing_AC(self)
scipy.signal.tests.testTest_abcd_normalize.test_missing_AD(self)
scipy.signal.tests.testTest_abcd_normalize.test_missing_B(self)
scipy.signal.tests.testTest_abcd_normalize.test_missing_BC(self)
scipy.signal.tests.testTest_abcd_normalize.test_missing_BD_fails(self)
scipy.signal.tests.testTest_abcd_normalize.test_missing_C(self)
scipy.signal.tests.testTest_abcd_normalize.test_missing_CD_fails(self)
scipy.signal.tests.testTest_abcd_normalize.test_missing_D(self)
scipy.signal.tests.testTest_abcd_normalize.test_no_matrix_fails(self)
scipy.signal.tests.testTest_abcd_normalize.test_normalized_matrices_unchanged(self)
scipy.signal.tests.testTest_abcd_normalize.test_shapes(self)
scipy.signal.tests.testTest_abcd_normalize.test_zero_dimension_is_not_none1(self)
scipy.signal.tests.testTest_abcd_normalize.test_zero_dimension_is_not_none2(self)
scipy.signal.tests.testTest_bode
scipy.signal.tests.testTest_bode.test_01(self)
scipy.signal.tests.testTest_bode.test_02(self)
scipy.signal.tests.testTest_bode.test_03(self)
scipy.signal.tests.testTest_bode.test_04(self)
scipy.signal.tests.testTest_bode.test_05(self)
scipy.signal.tests.testTest_bode.test_06(self)
scipy.signal.tests.testTest_bode.test_07(self)
scipy.signal.tests.testTest_bode.test_08(self)
scipy.signal.tests.testTest_bode.test_from_state_space(self)
scipy.signal.tests.testTest_freqresp
scipy.signal.tests.testTest_freqresp.test_freq_range(self)
scipy.signal.tests.testTest_freqresp.test_from_state_space(self)
scipy.signal.tests.testTest_freqresp.test_from_zpk(self)
scipy.signal.tests.testTest_freqresp.test_output(self)
scipy.signal.tests.testTest_freqresp.test_output_manual(self)
scipy.signal.tests.testTest_freqresp.test_pole_zero(self)
scipy.signal.tests.testTest_lsim2
scipy.signal.tests.testTest_lsim2.test_01(self)
scipy.signal.tests.testTest_lsim2.test_02(self)
scipy.signal.tests.testTest_lsim2.test_03(self)
scipy.signal.tests.testTest_lsim2.test_04(self)
scipy.signal.tests.testTest_lsim2.test_05(self)
scipy.signal.tests.testTest_lsim2.test_06(self)
scipy.signal.tests.test_TestImpulseFuncs
scipy.signal.tests.test_TestImpulseFuncs.test_01(self)
scipy.signal.tests.test_TestImpulseFuncs.test_02(self)
scipy.signal.tests.test_TestImpulseFuncs.test_03(self)
scipy.signal.tests.test_TestImpulseFuncs.test_04(self)
scipy.signal.tests.test_TestImpulseFuncs.test_05(self)
scipy.signal.tests.test_TestImpulseFuncs.test_06(self)
scipy.signal.tests.test_TestImpulseFuncs.test_array_like(self)
scipy.signal.tests.test_TestImpulseFuncs.test_array_like2(self)
scipy.signal.tests.test_TestStepFuncs
scipy.signal.tests.test_TestStepFuncs.test_01(self)
scipy.signal.tests.test_TestStepFuncs.test_02(self)
scipy.signal.tests.test_TestStepFuncs.test_03(self)
scipy.signal.tests.test_TestStepFuncs.test_04(self)
scipy.signal.tests.test_TestStepFuncs.test_05(self)
scipy.signal.tests.test_TestStepFuncs.test_06(self)
scipy.signal.tests.test_TestStepFuncs.test_array_like(self)
scipy.signal.tests.test_assert_poles_close(P1,P2,rtol=1e-08,atol=1e-08)
scipy.signal.tests.test_ltisys.TestImpulse(_TestImpulseFuncs)
scipy.signal.tests.test_ltisys.TestImpulse.setup_method(self)
scipy.signal.tests.test_ltisys.TestImpulse2(_TestImpulseFuncs)
scipy.signal.tests.test_ltisys.TestImpulse2.setup_method(self)
scipy.signal.tests.test_ltisys.TestLsim
scipy.signal.tests.test_ltisys.TestLsim.lti_nowarn(self,*args)
scipy.signal.tests.test_ltisys.TestLsim.test_double_integrator(self)
scipy.signal.tests.test_ltisys.TestLsim.test_first_order(self)
scipy.signal.tests.test_ltisys.TestLsim.test_integrator(self)
scipy.signal.tests.test_ltisys.TestLsim.test_jordan_block(self)
scipy.signal.tests.test_ltisys.TestLsim.test_miso(self)
scipy.signal.tests.test_ltisys.TestLsim.test_nonzero_initial_time(self)
scipy.signal.tests.test_ltisys.TestLti
scipy.signal.tests.test_ltisys.TestLti.test_lti_instantiation(self)
scipy.signal.tests.test_ltisys.TestPlacePoles
scipy.signal.tests.test_ltisys.TestPlacePoles._check(self,A,B,P,**kwargs)
scipy.signal.tests.test_ltisys.TestPlacePoles.test_complex(self)
scipy.signal.tests.test_ltisys.TestPlacePoles.test_errors(self)
scipy.signal.tests.test_ltisys.TestPlacePoles.test_real(self)
scipy.signal.tests.test_ltisys.TestPlacePoles.test_tricky_B(self)
scipy.signal.tests.test_ltisys.TestSS2TF
scipy.signal.tests.test_ltisys.TestSS2TF.check_matrix_shapes(self,p,q,r)
scipy.signal.tests.test_ltisys.TestSS2TF.test_all_int_arrays(self)
scipy.signal.tests.test_ltisys.TestSS2TF.test_basic(self)
scipy.signal.tests.test_ltisys.TestSS2TF.test_multioutput(self)
scipy.signal.tests.test_ltisys.TestSS2TF.test_shapes(self)
scipy.signal.tests.test_ltisys.TestSS2TF.test_simo_round_trip(self)
scipy.signal.tests.test_ltisys.TestSS2TF.test_zero_order_round_trip(self)
scipy.signal.tests.test_ltisys.TestStateSpace
scipy.signal.tests.test_ltisys.TestStateSpace.test_conversion(self)
scipy.signal.tests.test_ltisys.TestStateSpace.test_initialization(self)
scipy.signal.tests.test_ltisys.TestStateSpace.test_operators(self)
scipy.signal.tests.test_ltisys.TestStateSpace.test_properties(self)
scipy.signal.tests.test_ltisys.TestStep(_TestStepFuncs)
scipy.signal.tests.test_ltisys.TestStep.setup_method(self)
scipy.signal.tests.test_ltisys.TestStep.test_complex_input(self)
scipy.signal.tests.test_ltisys.TestStep2(_TestStepFuncs)
scipy.signal.tests.test_ltisys.TestStep2.setup_method(self)
scipy.signal.tests.test_ltisys.TestStep2.test_05(self)
scipy.signal.tests.test_ltisys.TestTransferFunction
scipy.signal.tests.test_ltisys.TestTransferFunction.test_conversion(self)
scipy.signal.tests.test_ltisys.TestTransferFunction.test_initialization(self)
scipy.signal.tests.test_ltisys.TestTransferFunction.test_properties(self)
scipy.signal.tests.test_ltisys.TestZerosPolesGain
scipy.signal.tests.test_ltisys.TestZerosPolesGain.test_conversion(self)
scipy.signal.tests.test_ltisys.TestZerosPolesGain.test_initialization(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize
scipy.signal.tests.test_ltisys.Test_abcd_normalize.setup_method(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize.test_AB_mismatch_fails(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize.test_AC_mismatch_fails(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize.test_A_nosquare_fails(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize.test_BD_mismatch_fails(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize.test_CD_mismatch_fails(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize.test_missing_A(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize.test_missing_AB(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize.test_missing_ABC_fails(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize.test_missing_AC(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize.test_missing_AD(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize.test_missing_B(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize.test_missing_BC(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize.test_missing_BD_fails(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize.test_missing_C(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize.test_missing_CD_fails(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize.test_missing_D(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize.test_no_matrix_fails(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize.test_normalized_matrices_unchanged(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize.test_shapes(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize.test_zero_dimension_is_not_none1(self)
scipy.signal.tests.test_ltisys.Test_abcd_normalize.test_zero_dimension_is_not_none2(self)
scipy.signal.tests.test_ltisys.Test_bode
scipy.signal.tests.test_ltisys.Test_bode.test_01(self)
scipy.signal.tests.test_ltisys.Test_bode.test_02(self)
scipy.signal.tests.test_ltisys.Test_bode.test_03(self)
scipy.signal.tests.test_ltisys.Test_bode.test_04(self)
scipy.signal.tests.test_ltisys.Test_bode.test_05(self)
scipy.signal.tests.test_ltisys.Test_bode.test_06(self)
scipy.signal.tests.test_ltisys.Test_bode.test_07(self)
scipy.signal.tests.test_ltisys.Test_bode.test_08(self)
scipy.signal.tests.test_ltisys.Test_bode.test_from_state_space(self)
scipy.signal.tests.test_ltisys.Test_freqresp
scipy.signal.tests.test_ltisys.Test_freqresp.test_freq_range(self)
scipy.signal.tests.test_ltisys.Test_freqresp.test_from_state_space(self)
scipy.signal.tests.test_ltisys.Test_freqresp.test_from_zpk(self)
scipy.signal.tests.test_ltisys.Test_freqresp.test_output(self)
scipy.signal.tests.test_ltisys.Test_freqresp.test_output_manual(self)
scipy.signal.tests.test_ltisys.Test_freqresp.test_pole_zero(self)
scipy.signal.tests.test_ltisys.Test_lsim2
scipy.signal.tests.test_ltisys.Test_lsim2.test_01(self)
scipy.signal.tests.test_ltisys.Test_lsim2.test_02(self)
scipy.signal.tests.test_ltisys.Test_lsim2.test_03(self)
scipy.signal.tests.test_ltisys.Test_lsim2.test_04(self)
scipy.signal.tests.test_ltisys.Test_lsim2.test_05(self)
scipy.signal.tests.test_ltisys.Test_lsim2.test_06(self)
scipy.signal.tests.test_ltisys._TestImpulseFuncs
scipy.signal.tests.test_ltisys._TestImpulseFuncs.test_01(self)
scipy.signal.tests.test_ltisys._TestImpulseFuncs.test_02(self)
scipy.signal.tests.test_ltisys._TestImpulseFuncs.test_03(self)
scipy.signal.tests.test_ltisys._TestImpulseFuncs.test_04(self)
scipy.signal.tests.test_ltisys._TestImpulseFuncs.test_05(self)
scipy.signal.tests.test_ltisys._TestImpulseFuncs.test_06(self)
scipy.signal.tests.test_ltisys._TestImpulseFuncs.test_array_like(self)
scipy.signal.tests.test_ltisys._TestImpulseFuncs.test_array_like2(self)
scipy.signal.tests.test_ltisys._TestStepFuncs
scipy.signal.tests.test_ltisys._TestStepFuncs.test_01(self)
scipy.signal.tests.test_ltisys._TestStepFuncs.test_02(self)
scipy.signal.tests.test_ltisys._TestStepFuncs.test_03(self)
scipy.signal.tests.test_ltisys._TestStepFuncs.test_04(self)
scipy.signal.tests.test_ltisys._TestStepFuncs.test_05(self)
scipy.signal.tests.test_ltisys._TestStepFuncs.test_06(self)
scipy.signal.tests.test_ltisys._TestStepFuncs.test_array_like(self)
scipy.signal.tests.test_ltisys._assert_poles_close(P1,P2,rtol=1e-08,atol=1e-08)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/tests/test_peak_finding.py----------------------------------------
A:scipy.signal.tests.test_peak_finding.xdata->numpy.arange(0, total_length).astype(float)
A:scipy.signal.tests.test_peak_finding.out_data->_gen_gaussians(center_locs, sigmas, total_length)
A:scipy.signal.tests.test_peak_finding.num_peaks->len(sigmas)
A:scipy.signal.tests.test_peak_finding.center_locs->numpy.linspace(delta, total_length - delta, num=num_peaks).astype(int)
A:scipy.signal.tests.test_peak_finding.out->peak_widths([], [])
A:scipy.signal.tests.test_peak_finding.gaps->copy.deepcopy(gaps)
A:scipy.signal.tests.test_peak_finding.distances->copy.deepcopy(distances)
A:scipy.signal.tests.test_peak_finding.locs->numpy.zeros([length, 2], dtype=int)
A:scipy.signal.tests.test_peak_finding.nextrow->keep_bounds(nextrow, max_locs[0])
A:scipy.signal.tests.test_peak_finding.nextcol->keep_bounds(nextcol, max_locs[1])
A:scipy.signal.tests.test_peak_finding.x->gaussian(200, 2)
A:scipy.signal.tests.test_peak_finding.expected->numpy.arange(2, 50, 3)
A:scipy.signal.tests.test_peak_finding.(midpoints, left_edges, right_edges)->_local_maxima_1d(x)
A:scipy.signal.tests.test_peak_finding.test_matr->numpy.zeros([50, 50])
A:scipy.signal.tests.test_peak_finding.lines->_identify_ridge_lines(test_matr, np.full(20, 2), 1)
A:scipy.signal.tests.test_peak_finding.line->_gen_ridge_line([0, 25], test_matr.shape, length, distances, gaps)
A:scipy.signal.tests.test_peak_finding.max_distances->numpy.full(50, max_dist)
A:scipy.signal.tests.test_peak_finding.identified_lines->_identify_ridge_lines(test_matr, max_distances, max_gap)
A:scipy.signal.tests.test_peak_finding.adists->numpy.diff(iline[1])
A:scipy.signal.tests.test_peak_finding.agaps->numpy.diff(iline[0])
A:scipy.signal.tests.test_peak_finding.empty_array->numpy.array([], dtype=int)
A:scipy.signal.tests.test_peak_finding.z1->numpy.zeros(5)
A:scipy.signal.tests.test_peak_finding.i->argrelmin(z1)
A:scipy.signal.tests.test_peak_finding.z2->numpy.zeros((3, 5))
A:scipy.signal.tests.test_peak_finding.(row, col)->argrelmin(x, axis=1)
A:scipy.signal.tests.test_peak_finding.order->numpy.argsort(row)
A:scipy.signal.tests.test_peak_finding.(test_data, act_locs)->_gen_gaussians_even(sigmas, num_points)
A:scipy.signal.tests.test_peak_finding.test_data_2->numpy.vstack([test_data, test_data[rot_range]])
A:scipy.signal.tests.test_peak_finding.(rel_max_rows, rel_max_cols)->argrelmax(test_data_2, axis=1, order=1)
A:scipy.signal.tests.test_peak_finding.peaks->numpy.repeat([1], 3)
A:scipy.signal.tests.test_peak_finding.lbases->numpy.array([0, 0, 0, 5])
A:scipy.signal.tests.test_peak_finding.rbases->numpy.array([3, 3, 5, 7])
A:scipy.signal.tests.test_peak_finding.(proms, lbases, rbases)->peak_prominences(x[::2], peaks[::2])
A:scipy.signal.tests.test_peak_finding.(width_calc, height, lip_calc, rip_calc)->peak_widths(x, [3], rel_height)
A:scipy.signal.tests.test_peak_finding.result->peak_widths(x[::4], peaks[::3])
A:scipy.signal.tests.test_peak_finding.(amin_calc, amax_calc)->_unpack_condition_args((amin_true, amax_true), x, peaks)
A:scipy.signal.tests.test_peak_finding.(peaks, props)->find_peaks([0, 1, 1, 1, 0], prominence=(None, None), width=(None, None), wlen=2)
A:scipy.signal.tests.test_peak_finding.plateau_sizes->numpy.array([1, 2, 3, 4, 8, 20, 111])
A:scipy.signal.tests.test_peak_finding.repeats->numpy.ones(x.size, dtype=int)
A:scipy.signal.tests.test_peak_finding.peaks_all->numpy.arange(1, 21, 3)
A:scipy.signal.tests.test_peak_finding.peaks_true->numpy.arange(1, 99, 2)
A:scipy.signal.tests.test_peak_finding.offset->numpy.linspace(1, 10, peaks_true.size)
A:scipy.signal.tests.test_peak_finding.keep->numpy.nonzero((interval[0] <= prominences) & (prominences <= interval[1]))
A:scipy.signal.tests.test_peak_finding.(peaks_calc, properties)->find_peaks(x, prominence=interval)
A:scipy.signal.tests.test_peak_finding.x_readonly->gaussian(200, 2).copy()
A:scipy.signal.tests.test_peak_finding.(peaks, _)->find_peaks(x)
A:scipy.signal.tests.test_peak_finding.(peaks_readonly, _)->find_peaks(x_readonly, **kwargs)
A:scipy.signal.tests.test_peak_finding.widths->numpy.arange(0.1, max(sigmas), 0.2)
A:scipy.signal.tests.test_peak_finding.found_locs->find_peaks_cwt(test_data, widths)
A:scipy.signal.tests.test_peak_finding.diffs->numpy.abs(found_locs - act_locs)
A:scipy.signal.tests.test_peak_finding.a->find_peaks_cwt(x, widths, wavelet=gaussian)
A:scipy.signal.tests.test_peak_finding.xs->numpy.arange(0, np.pi, 0.05)
A:scipy.signal.tests.test_peak_finding.test_data->numpy.sin(xs)
scipy.signal.tests.testTestArgrel
scipy.signal.tests.testTestArgrel.test_2d_gaussians(self)
scipy.signal.tests.testTestArgrel.test_basic(self)
scipy.signal.tests.testTestArgrel.test_empty(self)
scipy.signal.tests.testTestArgrel.test_highorder(self)
scipy.signal.tests.testTestFindPeaks
scipy.signal.tests.testTestFindPeaks.test_constant(self)
scipy.signal.tests.testTestFindPeaks.test_distance_condition(self)
scipy.signal.tests.testTestFindPeaks.test_height_condition(self)
scipy.signal.tests.testTestFindPeaks.test_plateau_size(self)
scipy.signal.tests.testTestFindPeaks.test_prominence_condition(self)
scipy.signal.tests.testTestFindPeaks.test_properties(self)
scipy.signal.tests.testTestFindPeaks.test_raises(self)
scipy.signal.tests.testTestFindPeaks.test_readonly_array(self,kwargs)
scipy.signal.tests.testTestFindPeaks.test_threshold_condition(self)
scipy.signal.tests.testTestFindPeaks.test_width_condition(self)
scipy.signal.tests.testTestFindPeaks.test_wlen_smaller_plateau(self)
scipy.signal.tests.testTestFindPeaksCwt
scipy.signal.tests.testTestFindPeaksCwt.test_find_peaks_exact(self)
scipy.signal.tests.testTestFindPeaksCwt.test_find_peaks_nopeak(self)
scipy.signal.tests.testTestFindPeaksCwt.test_find_peaks_window_size(self)
scipy.signal.tests.testTestFindPeaksCwt.test_find_peaks_with_non_default_wavelets(self)
scipy.signal.tests.testTestFindPeaksCwt.test_find_peaks_with_one_width(self)
scipy.signal.tests.testTestFindPeaksCwt.test_find_peaks_withnoise(self)
scipy.signal.tests.testTestLocalMaxima1d
scipy.signal.tests.testTestLocalMaxima1d.test_empty(self)
scipy.signal.tests.testTestLocalMaxima1d.test_exceptions(self)
scipy.signal.tests.testTestLocalMaxima1d.test_flat_maxima(self)
scipy.signal.tests.testTestLocalMaxima1d.test_linear(self)
scipy.signal.tests.testTestLocalMaxima1d.test_signal_edges(self,x)
scipy.signal.tests.testTestLocalMaxima1d.test_simple(self)
scipy.signal.tests.testTestPeakProminences
scipy.signal.tests.testTestPeakProminences.test_basic(self)
scipy.signal.tests.testTestPeakProminences.test_edge_cases(self)
scipy.signal.tests.testTestPeakProminences.test_empty(self)
scipy.signal.tests.testTestPeakProminences.test_exceptions(self)
scipy.signal.tests.testTestPeakProminences.test_non_contiguous(self)
scipy.signal.tests.testTestPeakProminences.test_warnings(self)
scipy.signal.tests.testTestPeakProminences.test_wlen(self)
scipy.signal.tests.testTestPeakWidths
scipy.signal.tests.testTestPeakWidths.test_basic(self)
scipy.signal.tests.testTestPeakWidths.test_empty(self)
scipy.signal.tests.testTestPeakWidths.test_exceptions(self)
scipy.signal.tests.testTestPeakWidths.test_intersection_rules(self)
scipy.signal.tests.testTestPeakWidths.test_mismatching_prominence_data(self)
scipy.signal.tests.testTestPeakWidths.test_non_contiguous(self)
scipy.signal.tests.testTestPeakWidths.test_warnings(self)
scipy.signal.tests.testTestRidgeLines
scipy.signal.tests.testTestRidgeLines.test_empty(self)
scipy.signal.tests.testTestRidgeLines.test_minimal(self)
scipy.signal.tests.testTestRidgeLines.test_single_bigdist(self)
scipy.signal.tests.testTestRidgeLines.test_single_biggap(self)
scipy.signal.tests.testTestRidgeLines.test_single_biggaps(self)
scipy.signal.tests.testTestRidgeLines.test_single_pass(self)
scipy.signal.tests.test_gen_gaussians(center_locs,sigmas,total_length)
scipy.signal.tests.test_gen_gaussians_even(sigmas,total_length)
scipy.signal.tests.test_gen_ridge_line(start_locs,max_locs,length,distances,gaps)
scipy.signal.tests.test_peak_finding.TestArgrel
scipy.signal.tests.test_peak_finding.TestArgrel.test_2d_gaussians(self)
scipy.signal.tests.test_peak_finding.TestArgrel.test_basic(self)
scipy.signal.tests.test_peak_finding.TestArgrel.test_empty(self)
scipy.signal.tests.test_peak_finding.TestArgrel.test_highorder(self)
scipy.signal.tests.test_peak_finding.TestFindPeaks
scipy.signal.tests.test_peak_finding.TestFindPeaks.test_constant(self)
scipy.signal.tests.test_peak_finding.TestFindPeaks.test_distance_condition(self)
scipy.signal.tests.test_peak_finding.TestFindPeaks.test_height_condition(self)
scipy.signal.tests.test_peak_finding.TestFindPeaks.test_plateau_size(self)
scipy.signal.tests.test_peak_finding.TestFindPeaks.test_prominence_condition(self)
scipy.signal.tests.test_peak_finding.TestFindPeaks.test_properties(self)
scipy.signal.tests.test_peak_finding.TestFindPeaks.test_raises(self)
scipy.signal.tests.test_peak_finding.TestFindPeaks.test_readonly_array(self,kwargs)
scipy.signal.tests.test_peak_finding.TestFindPeaks.test_threshold_condition(self)
scipy.signal.tests.test_peak_finding.TestFindPeaks.test_width_condition(self)
scipy.signal.tests.test_peak_finding.TestFindPeaks.test_wlen_smaller_plateau(self)
scipy.signal.tests.test_peak_finding.TestFindPeaksCwt
scipy.signal.tests.test_peak_finding.TestFindPeaksCwt.test_find_peaks_exact(self)
scipy.signal.tests.test_peak_finding.TestFindPeaksCwt.test_find_peaks_nopeak(self)
scipy.signal.tests.test_peak_finding.TestFindPeaksCwt.test_find_peaks_window_size(self)
scipy.signal.tests.test_peak_finding.TestFindPeaksCwt.test_find_peaks_with_non_default_wavelets(self)
scipy.signal.tests.test_peak_finding.TestFindPeaksCwt.test_find_peaks_with_one_width(self)
scipy.signal.tests.test_peak_finding.TestFindPeaksCwt.test_find_peaks_withnoise(self)
scipy.signal.tests.test_peak_finding.TestLocalMaxima1d
scipy.signal.tests.test_peak_finding.TestLocalMaxima1d.test_empty(self)
scipy.signal.tests.test_peak_finding.TestLocalMaxima1d.test_exceptions(self)
scipy.signal.tests.test_peak_finding.TestLocalMaxima1d.test_flat_maxima(self)
scipy.signal.tests.test_peak_finding.TestLocalMaxima1d.test_linear(self)
scipy.signal.tests.test_peak_finding.TestLocalMaxima1d.test_signal_edges(self,x)
scipy.signal.tests.test_peak_finding.TestLocalMaxima1d.test_simple(self)
scipy.signal.tests.test_peak_finding.TestPeakProminences
scipy.signal.tests.test_peak_finding.TestPeakProminences.test_basic(self)
scipy.signal.tests.test_peak_finding.TestPeakProminences.test_edge_cases(self)
scipy.signal.tests.test_peak_finding.TestPeakProminences.test_empty(self)
scipy.signal.tests.test_peak_finding.TestPeakProminences.test_exceptions(self)
scipy.signal.tests.test_peak_finding.TestPeakProminences.test_non_contiguous(self)
scipy.signal.tests.test_peak_finding.TestPeakProminences.test_warnings(self)
scipy.signal.tests.test_peak_finding.TestPeakProminences.test_wlen(self)
scipy.signal.tests.test_peak_finding.TestPeakWidths
scipy.signal.tests.test_peak_finding.TestPeakWidths.test_basic(self)
scipy.signal.tests.test_peak_finding.TestPeakWidths.test_empty(self)
scipy.signal.tests.test_peak_finding.TestPeakWidths.test_exceptions(self)
scipy.signal.tests.test_peak_finding.TestPeakWidths.test_intersection_rules(self)
scipy.signal.tests.test_peak_finding.TestPeakWidths.test_mismatching_prominence_data(self)
scipy.signal.tests.test_peak_finding.TestPeakWidths.test_non_contiguous(self)
scipy.signal.tests.test_peak_finding.TestPeakWidths.test_warnings(self)
scipy.signal.tests.test_peak_finding.TestRidgeLines
scipy.signal.tests.test_peak_finding.TestRidgeLines.test_empty(self)
scipy.signal.tests.test_peak_finding.TestRidgeLines.test_minimal(self)
scipy.signal.tests.test_peak_finding.TestRidgeLines.test_single_bigdist(self)
scipy.signal.tests.test_peak_finding.TestRidgeLines.test_single_biggap(self)
scipy.signal.tests.test_peak_finding.TestRidgeLines.test_single_biggaps(self)
scipy.signal.tests.test_peak_finding.TestRidgeLines.test_single_pass(self)
scipy.signal.tests.test_peak_finding._gen_gaussians(center_locs,sigmas,total_length)
scipy.signal.tests.test_peak_finding._gen_gaussians_even(sigmas,total_length)
scipy.signal.tests.test_peak_finding._gen_ridge_line(start_locs,max_locs,length,distances,gaps)
scipy.signal.tests.test_peak_finding.test_unpack_condition_args()
scipy.signal.tests.testtest_unpack_condition_args()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/tests/test_windows.py----------------------------------------
A:scipy.signal.tests.test_windows.w->win(4097)
A:scipy.signal.tests.test_windows.f->fft(w, N_fft)
A:scipy.signal.tests.test_windows.first_zero->numpy.argmax(np.diff(spec) > 0)
A:scipy.signal.tests.test_windows.PSLL->numpy.amax(spec[first_zero:-first_zero])
A:scipy.signal.tests.test_windows.cheb_odd_true->array([0.200938, 0.107729, 0.134941, 0.165348, 0.198891, 0.23545, 0.274846, 0.316836, 0.361119, 0.407338, 0.455079, 0.503883, 0.553248, 0.602637, 0.651489, 0.699227, 0.745266, 0.789028, 0.829947, 0.867485, 0.901138, 0.930448, 0.95501, 0.974482, 0.988591, 0.997138, 1.0, 0.997138, 0.988591, 0.974482, 0.95501, 0.930448, 0.901138, 0.867485, 0.829947, 0.789028, 0.745266, 0.699227, 0.651489, 0.602637, 0.553248, 0.503883, 0.455079, 0.407338, 0.361119, 0.316836, 0.274846, 0.23545, 0.198891, 0.165348, 0.134941, 0.107729, 0.200938])
A:scipy.signal.tests.test_windows.cheb_even_true->array([0.203894, 0.107279, 0.133904, 0.163608, 0.196338, 0.231986, 0.270385, 0.311313, 0.354493, 0.399594, 0.446233, 0.493983, 0.542378, 0.590916, 0.639071, 0.686302, 0.732055, 0.775783, 0.816944, 0.855021, 0.889525, 0.920006, 0.94606, 0.967339, 0.983557, 0.994494, 1.0, 1.0, 0.994494, 0.983557, 0.967339, 0.94606, 0.920006, 0.889525, 0.855021, 0.816944, 0.775783, 0.732055, 0.686302, 0.639071, 0.590916, 0.542378, 0.493983, 0.446233, 0.399594, 0.354493, 0.311313, 0.270385, 0.231986, 0.196338, 0.163608, 0.133904, 0.107279, 0.203894])
A:scipy.signal.tests.test_windows.cheb_odd->scipy.signal.windows.chebwin(7, at=10)
A:scipy.signal.tests.test_windows.cheb_even->scipy.signal.windows.chebwin(8, at=-10)
A:scipy.signal.tests.test_windows.cheb_odd_low_at_true->array([1.0, 0.519052, 0.586405, 0.610151, 0.586405, 0.519052, 1.0])
A:scipy.signal.tests.test_windows.cheb_even_low_at_true->array([1.0, 0.451924, 0.51027, 0.541338, 0.541338, 0.51027, 0.451924, 1.0])
A:scipy.signal.tests.test_windows.win->get_window(winstr, 7)
A:scipy.signal.tests.test_windows.w2->window(8, *params, sym=False)
A:scipy.signal.tests.test_windows.tuk0->scipy.signal.windows.tukey(100, 0)
A:scipy.signal.tests.test_windows.box0->scipy.signal.windows.boxcar(100)
A:scipy.signal.tests.test_windows.tuk1->scipy.signal.windows.tukey(100, 1)
A:scipy.signal.tests.test_windows.han1->scipy.signal.windows.hann(100)
A:scipy.signal.tests.test_windows.(win, ratios)->scipy.signal.windows.dpss(*k, return_ratios=True)
A:scipy.signal.tests.test_windows.win_sub->scipy.signal.windows.dpss(M, M / 2.1, norm='subsample')
A:scipy.signal.tests.test_windows.win_2->scipy.signal.windows.dpss(M, M / 2.1, norm=2)
A:scipy.signal.tests.test_windows.win1->scipy.signal.windows.get_window(7.2, 64)
A:scipy.signal.tests.test_windows.win2->scipy.signal.windows.kaiser(64, 7.2, False)
A:scipy.signal.tests.test_windows.sig->numpy.arange(128)
A:scipy.signal.tests.test_windows.window->getattr(windows, window_name)
A:scipy.signal.tests.test_windows.w1->window(9, *params, sym=True)
A:scipy.signal.tests.test_windows.dep_hann2->pickle.loads(pickle.dumps(dep_hann))
A:scipy.signal.tests.test_windows.error->numpy.max(np.abs(w - np.flip(w)))
scipy.signal.tests.test_windows.TestBartHann
scipy.signal.tests.test_windows.TestBartHann.test_basic(self)
scipy.signal.tests.test_windows.TestBartlett
scipy.signal.tests.test_windows.TestBartlett.test_basic(self)
scipy.signal.tests.test_windows.TestBlackman
scipy.signal.tests.test_windows.TestBlackman.test_basic(self)
scipy.signal.tests.test_windows.TestBlackmanHarris
scipy.signal.tests.test_windows.TestBlackmanHarris.test_basic(self)
scipy.signal.tests.test_windows.TestBohman
scipy.signal.tests.test_windows.TestBohman.test_basic(self)
scipy.signal.tests.test_windows.TestBoxcar
scipy.signal.tests.test_windows.TestBoxcar.test_basic(self)
scipy.signal.tests.test_windows.TestChebWin
scipy.signal.tests.test_windows.TestChebWin.test_basic(self)
scipy.signal.tests.test_windows.TestChebWin.test_cheb_even_high_attenuation(self)
scipy.signal.tests.test_windows.TestChebWin.test_cheb_even_low_attenuation(self)
scipy.signal.tests.test_windows.TestChebWin.test_cheb_odd_high_attenuation(self)
scipy.signal.tests.test_windows.TestChebWin.test_cheb_odd_low_attenuation(self)
scipy.signal.tests.test_windows.TestDPSS
scipy.signal.tests.test_windows.TestDPSS.test_basic(self)
scipy.signal.tests.test_windows.TestDPSS.test_degenerate(self)
scipy.signal.tests.test_windows.TestDPSS.test_extremes(self)
scipy.signal.tests.test_windows.TestDPSS.test_unity(self)
scipy.signal.tests.test_windows.TestFlatTop
scipy.signal.tests.test_windows.TestFlatTop.test_basic(self)
scipy.signal.tests.test_windows.TestGaussian
scipy.signal.tests.test_windows.TestGaussian.test_basic(self)
scipy.signal.tests.test_windows.TestGeneralCosine
scipy.signal.tests.test_windows.TestGeneralCosine.test_basic(self)
scipy.signal.tests.test_windows.TestGeneralHamming
scipy.signal.tests.test_windows.TestGeneralHamming.test_basic(self)
scipy.signal.tests.test_windows.TestGetWindow
scipy.signal.tests.test_windows.TestGetWindow.test_array_as_window(self)
scipy.signal.tests.test_windows.TestGetWindow.test_boxcar(self)
scipy.signal.tests.test_windows.TestGetWindow.test_cheb_even(self)
scipy.signal.tests.test_windows.TestGetWindow.test_cheb_odd(self)
scipy.signal.tests.test_windows.TestGetWindow.test_dpss(self)
scipy.signal.tests.test_windows.TestGetWindow.test_general_cosine(self)
scipy.signal.tests.test_windows.TestGetWindow.test_general_hamming(self)
scipy.signal.tests.test_windows.TestGetWindow.test_invalid_inputs(self)
scipy.signal.tests.test_windows.TestGetWindow.test_kaiser_float(self)
scipy.signal.tests.test_windows.TestGetWindow.test_lanczos(self)
scipy.signal.tests.test_windows.TestHamming
scipy.signal.tests.test_windows.TestHamming.test_basic(self)
scipy.signal.tests.test_windows.TestHann
scipy.signal.tests.test_windows.TestHann.test_basic(self)
scipy.signal.tests.test_windows.TestKaiser
scipy.signal.tests.test_windows.TestKaiser.test_basic(self)
scipy.signal.tests.test_windows.TestKaiserBesselDerived
scipy.signal.tests.test_windows.TestKaiserBesselDerived.test_basic(self)
scipy.signal.tests.test_windows.TestKaiserBesselDerived.test_exceptions(self)
scipy.signal.tests.test_windows.TestLanczos
scipy.signal.tests.test_windows.TestLanczos.test_array_size(self)
scipy.signal.tests.test_windows.TestLanczos.test_basic(self)
scipy.signal.tests.test_windows.TestNuttall
scipy.signal.tests.test_windows.TestNuttall.test_basic(self)
scipy.signal.tests.test_windows.TestParzen
scipy.signal.tests.test_windows.TestParzen.test_basic(self)
scipy.signal.tests.test_windows.TestTaylor
scipy.signal.tests.test_windows.TestTaylor.test_correctness(self)
scipy.signal.tests.test_windows.TestTaylor.test_non_normalized(self)
scipy.signal.tests.test_windows.TestTaylor.test_normalized(self)
scipy.signal.tests.test_windows.TestTriang
scipy.signal.tests.test_windows.TestTriang.test_basic(self)
scipy.signal.tests.test_windows.TestTukey
scipy.signal.tests.test_windows.TestTukey.test_basic(self)
scipy.signal.tests.test_windows.TestTukey.test_extremes(self)
scipy.signal.tests.test_windows.test_deprecated_pickleable()
scipy.signal.tests.test_windows.test_deprecation()
scipy.signal.tests.test_windows.test_exponential()
scipy.signal.tests.test_windows.test_needs_params()
scipy.signal.tests.test_windows.test_not_needs_params()
scipy.signal.tests.test_windows.test_symmetric()
scipy.signal.tests.test_windows.test_windowfunc_basics()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/tests/test_upfirdn.py----------------------------------------
A:scipy.signal.tests.test_upfirdn.h->numpy.arange(1, 1 + h_len, dtype=x.real.dtype)
A:scipy.signal.tests.test_upfirdn.out->numpy.zeros(len(x) * up, x.dtype)
A:scipy.signal.tests.test_upfirdn.self.h->numpy.atleast_1d(h)
A:scipy.signal.tests.test_upfirdn.self.rng->numpy.random.RandomState(17)
A:scipy.signal.tests.test_upfirdn.x->numpy.random.RandomState(5).randn(size).astype(dtype)
A:scipy.signal.tests.test_upfirdn.yr->numpy.apply_along_axis(upfirdn_naive, axis, x, self.h, self.up, self.down)
A:scipy.signal.tests.test_upfirdn.want_len->_output_len(len(self.h), x.shape[axis], self.up, self.down)
A:scipy.signal.tests.test_upfirdn.y->upfirdn(h, x, up=1, down=1, mode=mode)
A:scipy.signal.tests.test_upfirdn.want->numpy.pad(x, (len_h // 2, (len_h - 1) // 2), 'constant')
A:scipy.signal.tests.test_upfirdn.random_state->numpy.random.RandomState(5)
A:scipy.signal.tests.test_upfirdn.yl->upfirdn_naive(x, h, 1, down)
A:scipy.signal.tests.test_upfirdn.tests->self._random_factors(p_max, q_max, h_dtype, x_dtype)
A:scipy.signal.tests.test_upfirdn.y_expected->numpy.pad(x, (npre, npost), mode=mode)
A:scipy.signal.tests.test_upfirdn.xpad->numpy.pad(x, npad, mode=mode)
A:scipy.signal.tests.test_upfirdn.ypad->upfirdn(h, xpad, up=1, down=1, mode='constant')
A:scipy.signal.tests.test_upfirdn.out_len->_output_len(len_h, in_len, up, down)
scipy.signal.tests.test_upfirdn.TestUpfirdn
scipy.signal.tests.test_upfirdn.TestUpfirdn._random_factors(self,p_max,q_max,h_dtype,x_dtype)
scipy.signal.tests.test_upfirdn.TestUpfirdn.test_extensions(self,mode)
scipy.signal.tests.test_upfirdn.TestUpfirdn.test_length_factors(self,len_h,len_x,up,down,expected)
scipy.signal.tests.test_upfirdn.TestUpfirdn.test_modes(self,size,h_len,mode,dtype)
scipy.signal.tests.test_upfirdn.TestUpfirdn.test_shift_x(self)
scipy.signal.tests.test_upfirdn.TestUpfirdn.test_singleton(self,len_h,len_x)
scipy.signal.tests.test_upfirdn.TestUpfirdn.test_valid_input(self)
scipy.signal.tests.test_upfirdn.TestUpfirdn.test_vs_convolve(self,down,want_len)
scipy.signal.tests.test_upfirdn.TestUpfirdn.test_vs_naive(self,x_dtype,h_dtype,p_max,q_max)
scipy.signal.tests.test_upfirdn.TestUpfirdn.test_vs_naive_delta(self,x_dtype,h,up,down)
scipy.signal.tests.test_upfirdn.UpFIRDnCase(self,up,down,h,x_dtype)
scipy.signal.tests.test_upfirdn.UpFIRDnCase.__init__(self,up,down,h,x_dtype)
scipy.signal.tests.test_upfirdn.UpFIRDnCase.scrub(self,x,axis=-1)
scipy.signal.tests.test_upfirdn.test_output_len_long_input()
scipy.signal.tests.test_upfirdn.upfirdn_naive(x,h,up=1,down=1)
scipy.signal.tests.testupfirdn_naive(x,h,up=1,down=1)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/tests/test_result_type.py----------------------------------------
A:scipy.signal.tests.test_result_type.ones_f32->numpy.ones(32, dtype=np.float32)
A:scipy.signal.tests.test_result_type.ones_i64->numpy.ones(32, dtype=np.int64)
A:scipy.signal.tests.test_result_type.b_f32->numpy.array([1, 2, 3], dtype=np.float32)
A:scipy.signal.tests.test_result_type.a_f32->numpy.array([4, 5, 6], dtype=np.float32)
A:scipy.signal.tests.test_result_type.x_f32->numpy.ones(32, dtype=np.float32)
A:scipy.signal.tests.test_result_type.b_f64->numpy.array([1, 2, 3], dtype=np.float32).astype(np.float64)
A:scipy.signal.tests.test_result_type.a_f64->numpy.array([4, 5, 6], dtype=np.float32).astype(np.float64)
A:scipy.signal.tests.test_result_type.x_f64->numpy.ones(32, dtype=np.float32).astype(np.float64)
A:scipy.signal.tests.test_result_type.sos_f32->numpy.array([[4, 5, 6, 1, 2, 3]], dtype=np.float32)
A:scipy.signal.tests.test_result_type.(b, a)->sos2tf(sos_f32)
scipy.signal.tests.test_result_type.test_decimate()
scipy.signal.tests.test_result_type.test_lfilter_zi()
scipy.signal.tests.test_result_type.test_lfiltic()
scipy.signal.tests.test_result_type.test_sos2tf()
scipy.signal.tests.test_result_type.test_sosfilt_zi()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/tests/test_czt.py----------------------------------------
A:scipy.signal.tests.test_czt.y->fft(x)
A:scipy.signal.tests.test_czt.y1->czt(x)
A:scipy.signal.tests.test_czt.yover->fft(x, over * len(x))
A:scipy.signal.tests.test_czt.y2->zoom_fft(x[2, 0, :], [0, 2], endpoint=False)
A:scipy.signal.tests.test_czt.w->numpy.linspace(0, 2 - 2.0 / len(x), len(x))
A:scipy.signal.tests.test_czt.y3->zoom_fft(x, [f1, f2], m=3 * over + 1, endpoint=True)
A:scipy.signal.tests.test_czt.idx3->slice(3 * over, 6 * over + 1)
A:scipy.signal.tests.test_czt.lengths->numpy.random.randint(8, 200, 20)
A:scipy.signal.tests.test_czt.x->numpy.random.rand(N)
A:scipy.signal.tests.test_czt.t->numpy.linspace(0, 1, 128)
A:scipy.signal.tests.test_czt.random_lengths->numpy.random.exponential(100000, size=10).astype('int')
A:scipy.signal.tests.test_czt.a->numpy.random.randn(n)
A:scipy.signal.tests.test_czt.func->CZT(12, m=11, w=2.0, a=1)
A:scipy.signal.tests.test_czt.myfunc->cls(*args)
scipy.signal.tests.test_czt.check_czt(x)
scipy.signal.tests.test_czt.check_zoom_fft(x)
scipy.signal.tests.test_czt.test_0_rank_input()
scipy.signal.tests.test_czt.test_1D()
scipy.signal.tests.test_czt.test_CZT_size_mismatch(cls,args)
scipy.signal.tests.test_czt.test_czt_math(impulse,m,w,a)
scipy.signal.tests.test_czt.test_czt_points()
scipy.signal.tests.test_czt.test_czt_points_errors(m)
scipy.signal.tests.test_czt.test_czt_vs_fft()
scipy.signal.tests.test_czt.test_empty_input()
scipy.signal.tests.test_czt.test_int_args()
scipy.signal.tests.test_czt.test_invalid_range()
scipy.signal.tests.test_czt.test_large_prime_lengths()
scipy.signal.tests.test_czt.test_nonsense_size(size)
scipy.signal.tests.testcheck_czt(x)
scipy.signal.tests.testcheck_zoom_fft(x)
scipy.signal.tests.testtest_0_rank_input()
scipy.signal.tests.testtest_1D()
scipy.signal.tests.testtest_CZT_size_mismatch(cls,args)
scipy.signal.tests.testtest_czt_math(impulse,m,w,a)
scipy.signal.tests.testtest_czt_points()
scipy.signal.tests.testtest_czt_points_errors(m)
scipy.signal.tests.testtest_czt_vs_fft()
scipy.signal.tests.testtest_empty_input()
scipy.signal.tests.testtest_int_args()
scipy.signal.tests.testtest_invalid_range()
scipy.signal.tests.testtest_large_prime_lengths()
scipy.signal.tests.testtest_nonsense_size(size)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/tests/test_signaltools.py----------------------------------------
A:scipy.signal.tests.test_signaltools.c->convolve2d(a, b, mode='full', boundary='wrap')
A:scipy.signal.tests.test_signaltools.x->array([1, 1.2, 1.5, 1.6, 2.4])
A:scipy.signal.tests.test_signaltools.y->numpy.concatenate((y1, y2), axis=axis)
A:scipy.signal.tests.test_signaltools.z->numpy.zeros((30, 30))
A:scipy.signal.tests.test_signaltools.a->numpy.convolve(np.convolve(a1, a2), a3)
A:scipy.signal.tests.test_signaltools.b->numpy.convolve(np.convolve(b1, b2), b3)
A:scipy.signal.tests.test_signaltools.d->numpy.array([0.0 + 0j, 1.0 + 1j, 2.0 + 2j], dtype=dt)
A:scipy.signal.tests.test_signaltools.small->arange(8).reshape(2, 2, 2)
A:scipy.signal.tests.test_signaltools.out_array->array([[[0 + 0j, 26 + 0j, 25 + 1j, 24 + 2j], [52 + 0j, 151 + 5j, 145 + 11j, 93 + 11j], [46 + 6j, 133 + 23j, 127 + 29j, 81 + 23j], [40 + 12j, 98 + 32j, 93 + 37j, 54 + 24j]], [[104 + 0j, 247 + 13j, 237 + 23j, 135 + 21j], [282 + 30j, 632 + 96j, 604 + 124j, 330 + 86j], [246 + 66j, 548 + 180j, 520 + 208j, 282 + 134j], [142 + 66j, 307 + 161j, 289 + 179j, 153 + 107j]], [[68 + 36j, 157 + 103j, 147 + 113j, 81 + 75j], [174 + 138j, 380 + 348j, 352 + 376j, 186 + 230j], [138 + 174j, 296 + 432j, 268 + 460j, 138 + 278j], [70 + 138j, 145 + 323j, 127 + 341j, 63 + 197j]], [[32 + 72j, 68 + 166j, 59 + 175j, 30 + 100j], [68 + 192j, 139 + 433j, 117 + 455j, 57 + 255j], [38 + 222j, 73 + 499j, 51 + 521j, 21 + 291j], [12 + 144j, 20 + 318j, 7 + 331j, 0 + 182j]]])
A:scipy.signal.tests.test_signaltools.out->scipy.signal.filtfilt([0.5, 0.5], 1, np.arange(10))
A:scipy.signal.tests.test_signaltools.types->sum([t for (_, t) in np.sctypes.items()], [])
A:scipy.signal.tests.test_signaltools.x1->numpy.arange(6)
A:scipy.signal.tests.test_signaltools.x2->numpy.arange(12).reshape((4, 3))
A:scipy.signal.tests.test_signaltools.fft->convolve(z, z, method='fft')
A:scipy.signal.tests.test_signaltools.direct->convolve(z, z, method='direct')
A:scipy.signal.tests.test_signaltools.e->scipy.signal.medfilt2d(np.array(self.IN, float), self.KERNEL_SIZE)
A:scipy.signal.tests.test_signaltools.h->hilbert(a)
A:scipy.signal.tests.test_signaltools.g->gcd(rate_to, rate)
A:scipy.signal.tests.test_signaltools.image->numpy.array([[2.0, -1.0, 3.0, 4.0]])
A:scipy.signal.tests.test_signaltools.kernel->numpy.ones((1, 21))
A:scipy.signal.tests.test_signaltools.result->fmin(filtfilt_gust_opt_func, ics, args=(b, a, x), xtol=1e-10, ftol=1e-12, maxfun=10000, maxiter=10000, full_output=True, disp=False)
A:scipy.signal.tests.test_signaltools.apad->numpy.pad(a, ((3, 3), (3, 3)), 'wrap')
A:scipy.signal.tests.test_signaltools.count->scipy.signal.convolve2d(a, [[1, 1]])
A:scipy.signal.tests.test_signaltools.fails->numpy.where(count > 1)
A:scipy.signal.tests.test_signaltools.expected->numpy.array(self.OUT, dtype=dtype)
A:scipy.signal.tests.test_signaltools.expected_1->numpy.tile(expected_1, [2, 1])
A:scipy.signal.tests.test_signaltools.expected_2->numpy.tile(expected_2, [2, 1])
A:scipy.signal.tests.test_signaltools.rng->numpy.random.RandomState(0)
A:scipy.signal.tests.test_signaltools.sig_nan->numpy.random.RandomState(0).standard_normal(n)
A:scipy.signal.tests.test_signaltools.coeffs->scipy.signal.firwin(200, 0.2)
A:scipy.signal.tests.test_signaltools.shapes0->gen_oa_shapes(sizes)
A:scipy.signal.tests.test_signaltools.shapes1->gen_oa_shapes(sizes)
A:scipy.signal.tests.test_signaltools.res->fftconvolve(x, y)
A:scipy.signal.tests.test_signaltools.in_typed->numpy.zeros((2, 32), dtype=dtype)
A:scipy.signal.tests.test_signaltools.dummy->numpy.arange(10, dtype=np.float64)
A:scipy.signal.tests.test_signaltools.in_object->numpy.array(self.IN, dtype=object)
A:scipy.signal.tests.test_signaltools.out_object->numpy.array(self.OUT, dtype=object)
A:scipy.signal.tests.test_signaltools.Min->slice(M1 - offM, None)
A:scipy.signal.tests.test_signaltools.Msel->slice(offM, None)
A:scipy.signal.tests.test_signaltools.Mout->slice(M1, None)
A:scipy.signal.tests.test_signaltools.Nin->slice(N1 - offN, None)
A:scipy.signal.tests.test_signaltools.Nsel->slice(offN, None)
A:scipy.signal.tests.test_signaltools.Nout->slice(N1, None)
A:scipy.signal.tests.test_signaltools.med->scipy.signal.medfilt2d(chunk_data, self.KERNEL_SIZE)
A:scipy.signal.tests.test_signaltools.output->numpy.zeros_like(expected)
A:scipy.signal.tests.test_signaltools.(data, Mslice, Nslice)->future.result()
A:scipy.signal.tests.test_signaltools.sig->numpy.arange(128)
A:scipy.signal.tests.test_signaltools.win->scipy.signal.get_window(('kaiser', 8.0), 160)
A:scipy.signal.tests.test_signaltools.sig2->numpy.tile(np.arange(160), (2, 1))
A:scipy.signal.tests.test_signaltools.fsig->fft(tsig)
A:scipy.signal.tests.test_signaltools.impulse->numpy.zeros(3)
A:scipy.signal.tests.test_signaltools.window->scipy.signal.firwin(2 * half_len + 1, f_c, window=('kaiser', 5.0))
A:scipy.signal.tests.test_signaltools.window_orig->scipy.signal.firwin(2 * half_len + 1, f_c, window=('kaiser', 5.0)).copy()
A:scipy.signal.tests.test_signaltools.y_resamps->scipy.signal.decimate(d.real, q, n, ftype=system, zero_phase=zero_phase)
A:scipy.signal.tests.test_signaltools.max_rate->max(up, down)
A:scipy.signal.tests.test_signaltools.y_to->numpy.interp(t_to, t, x)
A:scipy.signal.tests.test_signaltools.y_resamp->scipy.signal.resample_poly(x, rate_to, rate, padtype=padtype)
A:scipy.signal.tests.test_signaltools.y1_test->scipy.signal.resample(x1, 4)
A:scipy.signal.tests.test_signaltools.y1_true->numpy.array([1.0 + 0j, 0.5 + 0j, 0.0 + 0j, 0.5 + 0j])
A:scipy.signal.tests.test_signaltools.y2_test->scipy.signal.resample(x2, 2)
A:scipy.signal.tests.test_signaltools.y2_true->numpy.array([1.0, 0.0])
A:scipy.signal.tests.test_signaltools.random_state->numpy.random.RandomState(17)
A:scipy.signal.tests.test_signaltools.hc->convolve(h, h[::-1])
A:scipy.signal.tests.test_signaltools.weights->numpy.random.random((nweights,))
A:scipy.signal.tests.test_signaltools.y_g->correlate1d(x, weights[::-1], mode='constant')
A:scipy.signal.tests.test_signaltools.y_s->scipy.signal.resample_poly(x, up=1, down=down, window=weights)
A:scipy.signal.tests.test_signaltools.cj->scipy.signal.cspline1d(y)
A:scipy.signal.tests.test_signaltools.y2->self.filtfilt(zpk, np.swapaxes(x, 0, 2), padlen=0, axis=2)
A:scipy.signal.tests.test_signaltools.cy->scipy.signal.cspline1d(y)
A:scipy.signal.tests.test_signaltools.xnew->numpy.array([0.5])
A:scipy.signal.tests.test_signaltools.ynew->scipy.signal.cspline1d_eval(cy, xnew)
A:scipy.signal.tests.test_signaltools.arr->numpy.asarray(arr)
A:scipy.signal.tests.test_signaltools.iter->numpy.nditer([arr, out], ['refs_ok', 'zerosize_ok'], [['readonly'], ['writeonly']])
A:scipy.signal.tests.test_signaltools.y[...]->self.type(x[()])
A:scipy.signal.tests.test_signaltools.y_r->numpy.array([0, 1, 3, 5, 7, 9.0]).astype(dt)
A:scipy.signal.tests.test_signaltools.zi->sosfilt_zi(sos)
A:scipy.signal.tests.test_signaltools.zf_r->numpy.apply_along_axis(lf1, axis, x)
A:scipy.signal.tests.test_signaltools.(y, zf)->sosfilt(sos, np.ones(40, dt), zi=zi)
A:scipy.signal.tests.test_signaltools.y_r2_a0->numpy.array([[0, 2, 4], [6, 4, 2], [0, 2, 4], [6, 4, 2]], dtype=dt)
A:scipy.signal.tests.test_signaltools.y_r2_a1->numpy.array([[0, 2, 0], [6, -4, 6], [12, -10, 12], [18, -16, 18]], dtype=dt)
A:scipy.signal.tests.test_signaltools.y_r2_a0_1->self.convert_dtype([[1, 1, 1], [7, -5, 7], [13, -11, 13], [19, -17, 19]])
A:scipy.signal.tests.test_signaltools.y_r2_a0_0->self.convert_dtype([[1, 3, 5], [5, 3, 1], [1, 3, 5], [5, 3, 1]])
A:scipy.signal.tests.test_signaltools.zi_shape->list(x.shape)
A:scipy.signal.tests.test_signaltools.zi1->lfilter_zi(b, a)
A:scipy.signal.tests.test_signaltools.(b, a)->zpk2tf(*zpk)
A:scipy.signal.tests.test_signaltools.zi_full->self.convert_dtype(np.ones((4, 5, zi_size)))
A:scipy.signal.tests.test_signaltools.zi_sing->self.convert_dtype(np.ones((1, 1, zi_size)))
A:scipy.signal.tests.test_signaltools.(y_full, zf_full)->lfilter(b, a, x, zi=zi_full)
A:scipy.signal.tests.test_signaltools.(y_sing, zf_sing)->lfilter(b, a, x, zi=zi_sing)
A:scipy.signal.tests.test_signaltools.zf_expected->self.convert_dtype(np.zeros((3, 2, 4), 'l'))
A:scipy.signal.tests.test_signaltools.y_expected->self.convert_dtype(y_expected)
A:scipy.signal.tests.test_signaltools.(y_iir, zf_iir)->lfilter(b, a, x, -1, zi)
A:scipy.signal.tests.test_signaltools.(y_fir, zf_fir)->lfilter(b, a[0], x, -1, zi)
A:scipy.signal.tests.test_signaltools.zi_1->lfiltic(b, a, [1, 0])
A:scipy.signal.tests.test_signaltools.zi_2->lfiltic(b, a, [True, False])
A:scipy.signal.tests.test_signaltools.ye->self.convert_dtype([74])
A:scipy.signal.tests.test_signaltools.zfe->self.convert_dtype([-67, -72])
A:scipy.signal.tests.test_signaltools.b0->numpy.convolve(np.convolve(b1, b2), b3).copy()
A:scipy.signal.tests.test_signaltools.a0->numpy.sin(t)
A:scipy.signal.tests.test_signaltools.y_f->lfilter(b, a, x)
A:scipy.signal.tests.test_signaltools.dtype->numpy.dtype('O')
A:scipy.signal.tests.test_signaltools.dt_info->numpy.finfo(res_dt)
A:scipy.signal.tests.test_signaltools.decimal->int(-0.5 * np.log10(dt_info.resolution))
A:scipy.signal.tests.test_signaltools.method->choose_conv_method(x, h, mode=mode)
A:scipy.signal.tests.test_signaltools.(a, b, y_r)->self._setup_rank1(dt, 'full')
A:scipy.signal.tests.test_signaltools.y_fft->correlate(a, b, method='fft')
A:scipy.signal.tests.test_signaltools.y_direct->correlate(a, b, method='direct')
A:scipy.signal.tests.test_signaltools.in1->numpy.random.RandomState(0).standard_normal(input_size)
A:scipy.signal.tests.test_signaltools.offset->int(input_size / 10)
A:scipy.signal.tests.test_signaltools.in2->numpy.concatenate([rng.standard_normal(offset), in1])
A:scipy.signal.tests.test_signaltools.correlation->correlate(in1, in2, mode=mode)
A:scipy.signal.tests.test_signaltools.lags->correlation_lags(in1.size, in2.size, mode=mode)
A:scipy.signal.tests.test_signaltools.lag_index->numpy.argmax(correlation)
A:scipy.signal.tests.test_signaltools.k->numpy.array([1.0 + 3j, 2.0 + 4j, 3.0 + 5j, 4.0 + 6j], dtype=dt)
A:scipy.signal.tests.test_signaltools.zi_expected->numpy.array([5.0, -1.0])
A:scipy.signal.tests.test_signaltools.zi2->lfilter_zi(2 * b, 2 * a)
A:scipy.signal.tests.test_signaltools.sos->scipy.signal.butter(6, 0.2, output='sos')
A:scipy.signal.tests.test_signaltools.zpk->scipy.signal.butter(6, 0.35, output='zpk')
A:scipy.signal.tests.test_signaltools.t->numpy.arange(0, 2 * pi, pi / 256)
A:scipy.signal.tests.test_signaltools.xlow->numpy.sin(5 * 2 * np.pi * t)
A:scipy.signal.tests.test_signaltools.xhigh->numpy.sin(250 * 2 * np.pi * t)
A:scipy.signal.tests.test_signaltools.r->numpy.max(np.abs(p))
A:scipy.signal.tests.test_signaltools.n->int(np.ceil(np.log(eps) / np.log(r)))
A:scipy.signal.tests.test_signaltools.err->numpy.abs(y2d - xlow).max()
A:scipy.signal.tests.test_signaltools.x2d->numpy.vstack([xlow, xlow + xhigh])
A:scipy.signal.tests.test_signaltools.y2d->self.filtfilt(zpk, x2d, padlen=n, axis=1)
A:scipy.signal.tests.test_signaltools.y2dt->self.filtfilt(zpk, x2d.T, padlen=n, axis=0)
A:scipy.signal.tests.test_signaltools.y0->self.filtfilt(zpk, x, padlen=0, axis=0)
A:scipy.signal.tests.test_signaltools.y1->self.filtfilt(zpk, np.swapaxes(x, 0, 1), padlen=0, axis=1)
A:scipy.signal.tests.test_signaltools.(y, z1, z2)->_filtfilt_gust(b, a, x)
A:scipy.signal.tests.test_signaltools.y_sos->sosfiltfilt(sos, x)
A:scipy.signal.tests.test_signaltools.value->numpy.sum((y_fb - y_bf) ** 2)
A:scipy.signal.tests.test_signaltools.ics->numpy.concatenate((x[:m].mean() * zi, x[-m:].mean() * zi))
A:scipy.signal.tests.test_signaltools.(yg, zg1, zg2)->_filtfilt_gust(b, a, x, axis=axis, irlen=irlen)
A:scipy.signal.tests.test_signaltools.xx->numpy.swapaxes(x, axis, -1)
A:scipy.signal.tests.test_signaltools.yo->numpy.swapaxes(yo, -1, axis)
A:scipy.signal.tests.test_signaltools.zo1->numpy.swapaxes(zo1, -1, axis)
A:scipy.signal.tests.test_signaltools.zo2->numpy.swapaxes(zo2, -1, axis)
A:scipy.signal.tests.test_signaltools.(yo[indx], zo1[indx], zo2[indx])->filtfilt_gust_opt(b, a, xx[indx])
A:scipy.signal.tests.test_signaltools.(method_try, times)->choose_conv_method(x, h, mode=mode, measure=True)
A:scipy.signal.tests.test_signaltools.(z, p, k)->scipy.signal.ellip(3, 0.01, 120, 0.0875, output='zpk')
A:scipy.signal.tests.test_signaltools.approx_impulse_len->int(np.ceil(np.log(eps) / np.log(r)))
A:scipy.signal.tests.test_signaltools.d0->scipy.signal.decimate(z, 2, axis=0, zero_phase=False)
A:scipy.signal.tests.test_signaltools.d1->scipy.signal.decimate(z, 2, axis=1, zero_phase=False)
A:scipy.signal.tests.test_signaltools.t_tot->int(100)
A:scipy.signal.tests.test_signaltools.system->scipy.signal.dlti(*signal.cheby1(n, 0.05, wc / np.pi))
A:scipy.signal.tests.test_signaltools.(_, h_resps)->scipy.signal.freqz(system.num, system.den, freqs / rate * 2 * np.pi)
A:scipy.signal.tests.test_signaltools.h_resps->numpy.ones_like(freqs)
A:scipy.signal.tests.test_signaltools.h_resamps->numpy.sum(d_tos.conj() * y_resamps, axis=-1)
A:scipy.signal.tests.test_signaltools.x_out->scipy.signal.decimate(x, 30, ftype='fir')
A:scipy.signal.tests.test_signaltools.a1->numpy.cos(t)
A:scipy.signal.tests.test_signaltools.a2->numpy.sin(2 * t)
A:scipy.signal.tests.test_signaltools.a3->numpy.cos(2 * t)
A:scipy.signal.tests.test_signaltools.h_abs->numpy.abs(h)
A:scipy.signal.tests.test_signaltools.h_angle->numpy.angle(h)
A:scipy.signal.tests.test_signaltools.h_real->numpy.real(h)
A:scipy.signal.tests.test_signaltools.aa->hilbert(a, axis=-1)
A:scipy.signal.tests.test_signaltools.aan->hilbert(a, N=20, axis=-1)
A:scipy.signal.tests.test_signaltools.a0hilb->numpy.array([0.0 - 1.72015830311905j, 1.0 - 2.047794505137069j, 1.999999999999999 - 2.244055555687583j, 3.0 - 1.262750302935009j, 4.0 - 1.066489252384493j, 5.0 + 2.918022706971047j, 8.881784197001253e-17 + 3.845658908989067j, -9.444121133484362e-17 + 0.985044202202061j, -1.776356839400251e-16 + 1.332257797702019j, -3.996802888650564e-16 + 0.501905089898885j, 1.332267629550188e-16 + 0.668696078880782j, -1.192678053963799e-16 + 0.235487067862679j, -1.776356839400251e-16 + 0.286439612812121j, 3.108624468950438e-16 + 0.031676888064907j, 1.332267629550188e-16 - 0.019275656884536j, -2.360035624836702e-16 - 0.1652588660287j, 0.0 - 0.332049855010597j, 3.552713678800501e-16 - 0.403810179797771j, 8.881784197001253e-17 - 0.751023775297729j, 9.444121133484362e-17 - 0.79252210110103j])
A:scipy.signal.tests.test_signaltools.r_true->numpy.asarray(r_true)
A:scipy.signal.tests.test_signaltools.p_true->numpy.asarray(p_true)
A:scipy.signal.tests.test_signaltools.distance->numpy.hypot(abs(p[:, None] - p_true), abs(r[:, None] - r_true))
A:scipy.signal.tests.test_signaltools.(rows, cols)->linear_sum_assignment(distance)
A:scipy.signal.tests.test_signaltools.(factors, poly)->_compute_factors([1, 2, 3], [3, 2, 1], include_powers=True)
A:scipy.signal.tests.test_signaltools.(unique, multiplicity)->unique_roots(p, 2)
A:scipy.signal.tests.test_signaltools.(r, p, k)->residuez(0, 1)
A:scipy.signal.tests.test_signaltools.(r0, p0, k0)->residuez([5, 3, -2, 7], [-4, 0, 8, 3])
A:scipy.signal.tests.test_signaltools.(r1, p1, k1)->residuez([5, 3, -2, 7, 0], [-4, 0, 8, 3])
A:scipy.signal.tests.test_signaltools.(r2, p2, k2)->residuez([5, 3, -2, 7], [-4, 0, 8, 3, 0])
A:scipy.signal.tests.test_signaltools.(r3, p3, k3)->residuez([5, 3, -2, 7, 0, 0], [-4, 0, 8, 3, 0, 0, 0])
A:scipy.signal.tests.test_signaltools.events->numpy.array([[1, 2]])
A:scipy.signal.tests.test_signaltools.(strength, phase)->vectorstrength(events, period)
A:scipy.signal.tests.test_signaltools.targ_phase->numpy.array([0.5, 0.5, 0.5, 0.5])
A:scipy.signal.tests.test_signaltools.period->numpy.array([[1]])
A:scipy.signal.tests.test_signaltools.desired->lfilter(np.array(b, float), np.array(a, float), x.astype(float))
A:scipy.signal.tests.test_signaltools.actual->lfilter(b, a, x)
A:scipy.signal.tests.test_signaltools.(b1, a1)->scipy.signal.butter(2, 0.25, 'low')
A:scipy.signal.tests.test_signaltools.(b2, a2)->scipy.signal.butter(2, 0.75, 'low')
A:scipy.signal.tests.test_signaltools.(b3, a3)->scipy.signal.butter(2, 0.75, 'low')
A:scipy.signal.tests.test_signaltools.(y_true, zi)->lfilter(b, a, x[:20], zi=np.zeros(6))
A:scipy.signal.tests.test_signaltools.(y_sos, zi)->sosfilt(sos, x[:20], zi=np.zeros((3, 2)))
A:scipy.signal.tests.test_signaltools.zi_nd->sosfilt_zi(sos).copy()
A:scipy.signal.tests.test_signaltools.shp->list(x.shape)
A:scipy.signal.tests.test_signaltools.z0->numpy.zeros(shp)
A:scipy.signal.tests.test_signaltools.(yf, zf)->sosfilt(sos, x, axis=axis, zi=z0)
A:scipy.signal.tests.test_signaltools.(y1, z1)->sosfilt(sos, x[:, :5, :], axis=axis, zi=z0)
A:scipy.signal.tests.test_signaltools.(y2, z2)->sosfilt(sos, x[:, 5:, :], axis=axis, zi=z1)
A:scipy.signal.tests.test_signaltools.ss->numpy.prod(sos[:, :3].sum(axis=-1) / sos[:, 3:].sum(axis=-1))
A:scipy.signal.tests.test_signaltools.(_, zf)->sosfilt(sos, np.ones(40, dt), zi=zi.tolist())
A:scipy.signal.tests.test_signaltools.(recovered, remainder)->scipy.signal.deconvolve(recorded, impulse_response)
A:scipy.signal.tests.test_signaltools.(quotient, remainder)->scipy.signal.deconvolve(recorded, impulse_response)
A:scipy.signal.tests.test_signaltools.detrended->detrend(array([1, 2, 3]))
A:scipy.signal.tests.test_signaltools.detrended_exact->array([0, 0, 0])
A:scipy.signal.tests.test_signaltools.copy_array->detrend(x, overwrite_data=False)
A:scipy.signal.tests.test_signaltools.inplace->detrend(x, overwrite_data=True)
A:scipy.signal.tests.test_signaltools.p->numpy.roots(np.convolve(np.ones(5), np.ones(5)))
A:scipy.signal.tests.test_signaltools.unique->numpy.sort(unique)
scipy.signal.tests.testTestAllFreqConvolves
scipy.signal.tests.testTestAllFreqConvolves.test_invalid_flags(self,convapproach)
scipy.signal.tests.testTestAllFreqConvolves.test_invalid_shapes(self,convapproach)
scipy.signal.tests.testTestAllFreqConvolves.test_invalid_shapes_axes(self,convapproach)
scipy.signal.tests.testTestAllFreqConvolves.test_longdtype_input(self,dtype)
scipy.signal.tests.testTestAllFreqConvolves.test_mismatched_dims(self,a,b,convapproach)
scipy.signal.tests.testTestCSpline1DEval
scipy.signal.tests.testTestCSpline1DEval.test_basic(self)
scipy.signal.tests.testTestCSpline1DEval.test_complex(self)
scipy.signal.tests.testTestConvolve(_TestConvolve)
scipy.signal.tests.testTestConvolve.test_convolve_method(self,n=100)
scipy.signal.tests.testTestConvolve.test_convolve_method_large_input(self)
scipy.signal.tests.testTestConvolve.test_invalid_shapes(self)
scipy.signal.tests.testTestConvolve.test_mismatched_dims(self)
scipy.signal.tests.testTestConvolve.test_same_mode(self)
scipy.signal.tests.testTestConvolve.test_valid_mode2(self)
scipy.signal.tests.testTestConvolve2d(_TestConvolve2d)
scipy.signal.tests.testTestConvolve2d.test_consistency_convolve_funcs(self)
scipy.signal.tests.testTestConvolve2d.test_invalid_dims(self)
scipy.signal.tests.testTestConvolve2d.test_large_array(self)
scipy.signal.tests.testTestConvolve2d.test_same_mode(self)
scipy.signal.tests.testTestConvolve2d.test_valid_mode2(self)
scipy.signal.tests.testTestCorrelate
scipy.signal.tests.testTestCorrelate.test_invalid_params(self)
scipy.signal.tests.testTestCorrelate.test_invalid_shapes(self)
scipy.signal.tests.testTestCorrelate.test_mismatched_dims(self)
scipy.signal.tests.testTestCorrelate.test_numpy_fastpath(self)
scipy.signal.tests.testTestCorrelate2d
scipy.signal.tests.testTestCorrelate2d.test_complex_input(self)
scipy.signal.tests.testTestCorrelate2d.test_consistency_correlate_funcs(self)
scipy.signal.tests.testTestCorrelate2d.test_invalid_shapes(self)
scipy.signal.tests.testTestCorrelateComplex
scipy.signal.tests.testTestCorrelateComplex._setup_rank1(self,dt,mode)
scipy.signal.tests.testTestCorrelateComplex.decimal(self,dt)
scipy.signal.tests.testTestCorrelateComplex.test_rank0(self,dt)
scipy.signal.tests.testTestCorrelateComplex.test_rank1_full(self,dt)
scipy.signal.tests.testTestCorrelateComplex.test_rank1_same(self,dt)
scipy.signal.tests.testTestCorrelateComplex.test_rank1_valid(self,dt)
scipy.signal.tests.testTestCorrelateComplex.test_rank3(self,dt)
scipy.signal.tests.testTestCorrelateComplex.test_swap_full(self,dt)
scipy.signal.tests.testTestCorrelateComplex.test_swap_same(self,dt)
scipy.signal.tests.testTestCorrelateReal
scipy.signal.tests.testTestCorrelateReal._setup_rank1(self,dt)
scipy.signal.tests.testTestCorrelateReal._setup_rank3(self,dt)
scipy.signal.tests.testTestCorrelateReal.equal_tolerance(self,res_dt)
scipy.signal.tests.testTestCorrelateReal.equal_tolerance_fft(self,res_dt)
scipy.signal.tests.testTestCorrelateReal.test_method(self,dt)
scipy.signal.tests.testTestCorrelateReal.test_rank1_full(self,dt)
scipy.signal.tests.testTestCorrelateReal.test_rank1_same(self,dt)
scipy.signal.tests.testTestCorrelateReal.test_rank1_valid(self,dt)
scipy.signal.tests.testTestCorrelateReal.test_rank3_all(self,dt)
scipy.signal.tests.testTestCorrelateReal.test_rank3_same(self,dt)
scipy.signal.tests.testTestCorrelateReal.test_rank3_valid(self,dt)
scipy.signal.tests.testTestDecimate
scipy.signal.tests.testTestDecimate._test_phaseshift(self,method,zero_phase)
scipy.signal.tests.testTestDecimate.test_auto_n(self)
scipy.signal.tests.testTestDecimate.test_bad_args(self)
scipy.signal.tests.testTestDecimate.test_basic_FIR(self)
scipy.signal.tests.testTestDecimate.test_basic_IIR(self)
scipy.signal.tests.testTestDecimate.test_float16_upcast(self)
scipy.signal.tests.testTestDecimate.test_long_float32(self)
scipy.signal.tests.testTestDecimate.test_phaseshift_FIR(self)
scipy.signal.tests.testTestDecimate.test_phaseshift_IIR(self)
scipy.signal.tests.testTestDecimate.test_shape(self)
scipy.signal.tests.testTestDecimate.test_zero_phase_FIR(self)
scipy.signal.tests.testTestDecimate.test_zero_phase_IIR(self)
scipy.signal.tests.testTestDeconvolve
scipy.signal.tests.testTestDeconvolve.test_basic(self)
scipy.signal.tests.testTestDeconvolve.test_n_dimensional_divisor(self)
scipy.signal.tests.testTestDeconvolve.test_n_dimensional_signal(self)
scipy.signal.tests.testTestDetrend
scipy.signal.tests.testTestDetrend.test_basic(self)
scipy.signal.tests.testTestDetrend.test_copy(self)
scipy.signal.tests.testTestFFTConvolve
scipy.signal.tests.testTestFFTConvolve.test_2d_complex_same(self,axes)
scipy.signal.tests.testTestFFTConvolve.test_2d_complex_same_axes(self,axes)
scipy.signal.tests.testTestFFTConvolve.test_2d_real_same(self,axes)
scipy.signal.tests.testTestFFTConvolve.test_2d_real_same_axes(self,axes)
scipy.signal.tests.testTestFFTConvolve.test_complex(self,axes)
scipy.signal.tests.testTestFFTConvolve.test_complex_axes(self,axes)
scipy.signal.tests.testTestFFTConvolve.test_empty(self)
scipy.signal.tests.testTestFFTConvolve.test_fft_nan(self)
scipy.signal.tests.testTestFFTConvolve.test_many_sizes(self,n)
scipy.signal.tests.testTestFFTConvolve.test_random_data(self,axes)
scipy.signal.tests.testTestFFTConvolve.test_random_data_axes(self,axes)
scipy.signal.tests.testTestFFTConvolve.test_random_data_multidim_axes(self,axes)
scipy.signal.tests.testTestFFTConvolve.test_real(self,axes)
scipy.signal.tests.testTestFFTConvolve.test_real_axes(self,axes)
scipy.signal.tests.testTestFFTConvolve.test_real_same_mode(self,axes)
scipy.signal.tests.testTestFFTConvolve.test_real_same_mode_axes(self,axes)
scipy.signal.tests.testTestFFTConvolve.test_single_element(self)
scipy.signal.tests.testTestFFTConvolve.test_valid_mode_complex(self,axes)
scipy.signal.tests.testTestFFTConvolve.test_valid_mode_complex_axes(self,axes)
scipy.signal.tests.testTestFFTConvolve.test_valid_mode_ignore_nonaxes(self)
scipy.signal.tests.testTestFFTConvolve.test_valid_mode_real(self,axes)
scipy.signal.tests.testTestFFTConvolve.test_valid_mode_real_axes(self,axes)
scipy.signal.tests.testTestFFTConvolve.test_zero_rank(self)
scipy.signal.tests.testTestFiltFilt
scipy.signal.tests.testTestFiltFilt.filtfilt(self,zpk,x,axis=-1,padtype='odd',padlen=None,method='pad',irlen=None)
scipy.signal.tests.testTestFiltFilt.test_acoeff(self)
scipy.signal.tests.testTestFiltFilt.test_axis(self)
scipy.signal.tests.testTestFiltFilt.test_basic(self)
scipy.signal.tests.testTestFiltFilt.test_gust_scalars(self)
scipy.signal.tests.testTestFiltFilt.test_gust_simple(self)
scipy.signal.tests.testTestFiltFilt.test_sine(self)
scipy.signal.tests.testTestHilbert
scipy.signal.tests.testTestHilbert.test_bad_args(self)
scipy.signal.tests.testTestHilbert.test_hilbert_axisN(self)
scipy.signal.tests.testTestHilbert.test_hilbert_theoretical(self)
scipy.signal.tests.testTestHilbert.test_hilbert_types(self,dtype)
scipy.signal.tests.testTestHilbert2
scipy.signal.tests.testTestHilbert2.test_bad_args(self)
scipy.signal.tests.testTestHilbert2.test_hilbert2_types(self,dtype)
scipy.signal.tests.testTestLFilterZI
scipy.signal.tests.testTestLFilterZI.test_basic(self)
scipy.signal.tests.testTestLFilterZI.test_scale_invariance(self)
scipy.signal.tests.testTestLFilterZI.test_types(self,dtype)
scipy.signal.tests.testTestLinearFilterComplex128(_TestLinearFilter)
scipy.signal.tests.testTestLinearFilterComplex64(_TestLinearFilter)
scipy.signal.tests.testTestLinearFilterComplexExtended(_TestLinearFilter)
scipy.signal.tests.testTestLinearFilterDecimal(_TestLinearFilter)
scipy.signal.tests.testTestLinearFilterDecimal.type(self,x)
scipy.signal.tests.testTestLinearFilterFloat32(_TestLinearFilter)
scipy.signal.tests.testTestLinearFilterFloat64(_TestLinearFilter)
scipy.signal.tests.testTestLinearFilterFloatExtended(_TestLinearFilter)
scipy.signal.tests.testTestLinearFilterObject(_TestLinearFilter)
scipy.signal.tests.testTestMedFilt
scipy.signal.tests.testTestMedFilt.test_basic(self)
scipy.signal.tests.testTestMedFilt.test_invalid_dtypes(self,dtype)
scipy.signal.tests.testTestMedFilt.test_medfilt2d_parallel(self,dtype)
scipy.signal.tests.testTestMedFilt.test_none(self)
scipy.signal.tests.testTestMedFilt.test_object(self)
scipy.signal.tests.testTestMedFilt.test_refcounting(self)
scipy.signal.tests.testTestMedFilt.test_types(self,dtype)
scipy.signal.tests.testTestOAConvolve
scipy.signal.tests.testTestOAConvolve.test_1d_axes(self,axes,shape_a_0,shape_b_0,shape_a_extra,shape_b_extra,is_complex,mode,monkeypatch)
scipy.signal.tests.testTestOAConvolve.test_1d_noaxes(self,shape_a_0,shape_b_0,is_complex,mode,monkeypatch)
scipy.signal.tests.testTestOAConvolve.test_2d_axes(self,axes,shape_a_0,shape_b_0,shape_a_1,shape_b_1,mode,shape_a_extra,shape_b_extra,is_complex,monkeypatch)
scipy.signal.tests.testTestOAConvolve.test_2d_noaxes(self,shape_a_0,shape_b_0,shape_a_1,shape_b_1,mode,is_complex,monkeypatch)
scipy.signal.tests.testTestOAConvolve.test_empty(self)
scipy.signal.tests.testTestOAConvolve.test_real_manylens(self,shape_a_0,shape_b_0)
scipy.signal.tests.testTestOAConvolve.test_single_element(self)
scipy.signal.tests.testTestOAConvolve.test_zero_rank(self)
scipy.signal.tests.testTestOrderFilt
scipy.signal.tests.testTestOrderFilt.test_basic(self)
scipy.signal.tests.testTestPartialFractionExpansion
scipy.signal.tests.testTestPartialFractionExpansion.assert_rp_almost_equal(r,p,r_true,p_true,decimal=7)
scipy.signal.tests.testTestPartialFractionExpansion.test_compute_factors(self)
scipy.signal.tests.testTestPartialFractionExpansion.test_group_poles(self)
scipy.signal.tests.testTestPartialFractionExpansion.test_inverse_bad_rtype(self)
scipy.signal.tests.testTestPartialFractionExpansion.test_inverse_repeated_roots_different_rtypes(self)
scipy.signal.tests.testTestPartialFractionExpansion.test_inverse_scalar_arguments(self)
scipy.signal.tests.testTestPartialFractionExpansion.test_inverse_unique_roots_different_rtypes(self)
scipy.signal.tests.testTestPartialFractionExpansion.test_invres(self)
scipy.signal.tests.testTestPartialFractionExpansion.test_invresz(self)
scipy.signal.tests.testTestPartialFractionExpansion.test_invresz_one_coefficient_bug(self)
scipy.signal.tests.testTestPartialFractionExpansion.test_residue_general(self)
scipy.signal.tests.testTestPartialFractionExpansion.test_residue_leading_zeros(self)
scipy.signal.tests.testTestPartialFractionExpansion.test_residuez_degenerate(self)
scipy.signal.tests.testTestPartialFractionExpansion.test_residuez_general(self)
scipy.signal.tests.testTestPartialFractionExpansion.test_residuez_trailing_zeros(self)
scipy.signal.tests.testTestPartialFractionExpansion.test_resiude_degenerate(self)
scipy.signal.tests.testTestResample
scipy.signal.tests.testTestResample.test_basic(self)
scipy.signal.tests.testTestResample.test_correlate1d(self)
scipy.signal.tests.testTestResample.test_dc(self,nx,ny,dtype)
scipy.signal.tests.testTestResample.test_input_domain(self)
scipy.signal.tests.testTestResample.test_mutable_window(self,padtype)
scipy.signal.tests.testTestResample.test_output_float32(self,padtype)
scipy.signal.tests.testTestResample.test_output_match_dtype(self,padtype,dtype)
scipy.signal.tests.testTestResample.test_poly_vs_filtfilt(self)
scipy.signal.tests.testTestResample.test_resample_methods(self,method,ext,padtype)
scipy.signal.tests.testTestResample.test_rfft(self,N,num,window)
scipy.signal.tests.testTestSOSFilt
scipy.signal.tests.testTestSOSFilt.test_bad_zi_shape(self,dt)
scipy.signal.tests.testTestSOSFilt.test_initial_conditions(self,dt)
scipy.signal.tests.testTestSOSFilt.test_initial_conditions_3d_axis1(self,dt)
scipy.signal.tests.testTestSOSFilt.test_rank1(self,dt)
scipy.signal.tests.testTestSOSFilt.test_rank2(self,dt)
scipy.signal.tests.testTestSOSFilt.test_rank3(self,dt)
scipy.signal.tests.testTestSOSFilt.test_sosfilt_zi(self,dt)
scipy.signal.tests.testTestSOSFiltFilt(TestFiltFilt)
scipy.signal.tests.testTestSOSFiltFilt.test_equivalence(self)
scipy.signal.tests.testTestUniqueRoots
scipy.signal.tests.testTestUniqueRoots.test_complex_no_repeat(self)
scipy.signal.tests.testTestUniqueRoots.test_complex_repeat(self)
scipy.signal.tests.testTestUniqueRoots.test_complex_roots_extra(self)
scipy.signal.tests.testTestUniqueRoots.test_gh_4915(self)
scipy.signal.tests.testTestUniqueRoots.test_real_no_repeat(self)
scipy.signal.tests.testTestUniqueRoots.test_real_repeat(self)
scipy.signal.tests.testTestUniqueRoots.test_single_unique_root(self)
scipy.signal.tests.testTestVectorstrength
scipy.signal.tests.testTestVectorstrength.test_2d_events_ValueError(self)
scipy.signal.tests.testTestVectorstrength.test_2d_period_ValueError(self)
scipy.signal.tests.testTestVectorstrength.test_equal_1dperiod(self)
scipy.signal.tests.testTestVectorstrength.test_equal_2dperiod(self)
scipy.signal.tests.testTestVectorstrength.test_negative_period_ValueError(self)
scipy.signal.tests.testTestVectorstrength.test_opposite_1dperiod(self)
scipy.signal.tests.testTestVectorstrength.test_opposite_2dperiod(self)
scipy.signal.tests.testTestVectorstrength.test_partial_1dperiod(self)
scipy.signal.tests.testTestVectorstrength.test_partial_2dperiod(self)
scipy.signal.tests.testTestVectorstrength.test_single_1dperiod(self)
scipy.signal.tests.testTestVectorstrength.test_single_2dperiod(self)
scipy.signal.tests.testTestVectorstrength.test_spaced_1dperiod(self)
scipy.signal.tests.testTestVectorstrength.test_spaced_2dperiod(self)
scipy.signal.tests.testTestVectorstrength.test_zero_period_ValueError(self)
scipy.signal.tests.testTestWiener
scipy.signal.tests.testTestWiener.test_basic(self)
scipy.signal.tests.test_TestConvolve
scipy.signal.tests.test_TestConvolve.test_2d_arrays(self)
scipy.signal.tests.test_TestConvolve.test_basic(self)
scipy.signal.tests.test_TestConvolve.test_broadcastable(self)
scipy.signal.tests.test_TestConvolve.test_complex(self)
scipy.signal.tests.test_TestConvolve.test_input_swapping(self)
scipy.signal.tests.test_TestConvolve.test_invalid_params(self)
scipy.signal.tests.test_TestConvolve.test_same(self)
scipy.signal.tests.test_TestConvolve.test_same_eq(self)
scipy.signal.tests.test_TestConvolve.test_single_element(self)
scipy.signal.tests.test_TestConvolve.test_zero_rank(self)
scipy.signal.tests.test_TestConvolve2d
scipy.signal.tests.test_TestConvolve2d.test_2d_arrays(self)
scipy.signal.tests.test_TestConvolve2d.test_boundary_extension_full(self)
scipy.signal.tests.test_TestConvolve2d.test_boundary_extension_same(self)
scipy.signal.tests.test_TestConvolve2d.test_fillvalue(self)
scipy.signal.tests.test_TestConvolve2d.test_fillvalue_empty(self)
scipy.signal.tests.test_TestConvolve2d.test_fillvalue_errors(self)
scipy.signal.tests.test_TestConvolve2d.test_invalid_shapes(self)
scipy.signal.tests.test_TestConvolve2d.test_same_with_boundary(self,func,boundary,expected)
scipy.signal.tests.test_TestConvolve2d.test_sym_boundary(self)
scipy.signal.tests.test_TestConvolve2d.test_valid_mode(self)
scipy.signal.tests.test_TestConvolve2d.test_valid_mode_complx(self)
scipy.signal.tests.test_TestConvolve2d.test_wrap_boundary(self)
scipy.signal.tests.test_TestLinearFilter
scipy.signal.tests.test_TestLinearFilter.base_bad_size_zi(self,b,a,x,axis,zi)
scipy.signal.tests.test_TestLinearFilter.convert_dtype(self,arr)
scipy.signal.tests.test_TestLinearFilter.generate(self,shape)
scipy.signal.tests.test_TestLinearFilter.test_bad_size_zi(self)
scipy.signal.tests.test_TestLinearFilter.test_do_not_modify_a_b_FIR(self)
scipy.signal.tests.test_TestLinearFilter.test_do_not_modify_a_b_IIR(self)
scipy.signal.tests.test_TestLinearFilter.test_empty_zi(self)
scipy.signal.tests.test_TestLinearFilter.test_lfiltic_bad_zi(self)
scipy.signal.tests.test_TestLinearFilter.test_rank_1_FIR(self)
scipy.signal.tests.test_TestLinearFilter.test_rank_1_FIR_init_cond(self)
scipy.signal.tests.test_TestLinearFilter.test_rank_1_IIR(self)
scipy.signal.tests.test_TestLinearFilter.test_rank_1_IIR_init_cond(self)
scipy.signal.tests.test_TestLinearFilter.test_rank_2_IIR_axis_0(self)
scipy.signal.tests.test_TestLinearFilter.test_rank_2_IIR_axis_0_init_cond(self)
scipy.signal.tests.test_TestLinearFilter.test_rank_2_IIR_axis_1(self)
scipy.signal.tests.test_TestLinearFilter.test_rank_2_IIR_axis_1_init_cond(self)
scipy.signal.tests.test_TestLinearFilter.test_rank_3_FIR(self)
scipy.signal.tests.test_TestLinearFilter.test_rank_3_FIR_init_cond(self)
scipy.signal.tests.test_TestLinearFilter.test_rank_3_IIR(self)
scipy.signal.tests.test_TestLinearFilter.test_rank_3_IIR_init_cond(self)
scipy.signal.tests.test_TestLinearFilter.test_scalar_a(self)
scipy.signal.tests.test_TestLinearFilter.test_short_x_FIR(self)
scipy.signal.tests.test_TestLinearFilter.test_short_x_IIR(self)
scipy.signal.tests.test_TestLinearFilter.test_zi_pseudobroadcast(self)
scipy.signal.tests.test_TestLinearFilter.test_zi_some_singleton_dims(self)
scipy.signal.tests.test_signaltools.TestAllFreqConvolves
scipy.signal.tests.test_signaltools.TestAllFreqConvolves.test_invalid_flags(self,convapproach)
scipy.signal.tests.test_signaltools.TestAllFreqConvolves.test_invalid_shapes(self,convapproach)
scipy.signal.tests.test_signaltools.TestAllFreqConvolves.test_invalid_shapes_axes(self,convapproach)
scipy.signal.tests.test_signaltools.TestAllFreqConvolves.test_longdtype_input(self,dtype)
scipy.signal.tests.test_signaltools.TestAllFreqConvolves.test_mismatched_dims(self,a,b,convapproach)
scipy.signal.tests.test_signaltools.TestCSpline1DEval
scipy.signal.tests.test_signaltools.TestCSpline1DEval.test_basic(self)
scipy.signal.tests.test_signaltools.TestCSpline1DEval.test_complex(self)
scipy.signal.tests.test_signaltools.TestConvolve(_TestConvolve)
scipy.signal.tests.test_signaltools.TestConvolve.test_convolve_method(self,n=100)
scipy.signal.tests.test_signaltools.TestConvolve.test_convolve_method_large_input(self)
scipy.signal.tests.test_signaltools.TestConvolve.test_invalid_shapes(self)
scipy.signal.tests.test_signaltools.TestConvolve.test_mismatched_dims(self)
scipy.signal.tests.test_signaltools.TestConvolve.test_same_mode(self)
scipy.signal.tests.test_signaltools.TestConvolve.test_valid_mode2(self)
scipy.signal.tests.test_signaltools.TestConvolve2d(_TestConvolve2d)
scipy.signal.tests.test_signaltools.TestConvolve2d.test_consistency_convolve_funcs(self)
scipy.signal.tests.test_signaltools.TestConvolve2d.test_invalid_dims(self)
scipy.signal.tests.test_signaltools.TestConvolve2d.test_large_array(self)
scipy.signal.tests.test_signaltools.TestConvolve2d.test_same_mode(self)
scipy.signal.tests.test_signaltools.TestConvolve2d.test_valid_mode2(self)
scipy.signal.tests.test_signaltools.TestCorrelate
scipy.signal.tests.test_signaltools.TestCorrelate.test_invalid_params(self)
scipy.signal.tests.test_signaltools.TestCorrelate.test_invalid_shapes(self)
scipy.signal.tests.test_signaltools.TestCorrelate.test_mismatched_dims(self)
scipy.signal.tests.test_signaltools.TestCorrelate.test_numpy_fastpath(self)
scipy.signal.tests.test_signaltools.TestCorrelate2d
scipy.signal.tests.test_signaltools.TestCorrelate2d.test_complex_input(self)
scipy.signal.tests.test_signaltools.TestCorrelate2d.test_consistency_correlate_funcs(self)
scipy.signal.tests.test_signaltools.TestCorrelate2d.test_invalid_shapes(self)
scipy.signal.tests.test_signaltools.TestCorrelateComplex
scipy.signal.tests.test_signaltools.TestCorrelateComplex._setup_rank1(self,dt,mode)
scipy.signal.tests.test_signaltools.TestCorrelateComplex.decimal(self,dt)
scipy.signal.tests.test_signaltools.TestCorrelateComplex.test_rank0(self,dt)
scipy.signal.tests.test_signaltools.TestCorrelateComplex.test_rank1_full(self,dt)
scipy.signal.tests.test_signaltools.TestCorrelateComplex.test_rank1_same(self,dt)
scipy.signal.tests.test_signaltools.TestCorrelateComplex.test_rank1_valid(self,dt)
scipy.signal.tests.test_signaltools.TestCorrelateComplex.test_rank3(self,dt)
scipy.signal.tests.test_signaltools.TestCorrelateComplex.test_swap_full(self,dt)
scipy.signal.tests.test_signaltools.TestCorrelateComplex.test_swap_same(self,dt)
scipy.signal.tests.test_signaltools.TestCorrelateReal
scipy.signal.tests.test_signaltools.TestCorrelateReal._setup_rank1(self,dt)
scipy.signal.tests.test_signaltools.TestCorrelateReal._setup_rank3(self,dt)
scipy.signal.tests.test_signaltools.TestCorrelateReal.equal_tolerance(self,res_dt)
scipy.signal.tests.test_signaltools.TestCorrelateReal.equal_tolerance_fft(self,res_dt)
scipy.signal.tests.test_signaltools.TestCorrelateReal.test_method(self,dt)
scipy.signal.tests.test_signaltools.TestCorrelateReal.test_rank1_full(self,dt)
scipy.signal.tests.test_signaltools.TestCorrelateReal.test_rank1_same(self,dt)
scipy.signal.tests.test_signaltools.TestCorrelateReal.test_rank1_valid(self,dt)
scipy.signal.tests.test_signaltools.TestCorrelateReal.test_rank3_all(self,dt)
scipy.signal.tests.test_signaltools.TestCorrelateReal.test_rank3_same(self,dt)
scipy.signal.tests.test_signaltools.TestCorrelateReal.test_rank3_valid(self,dt)
scipy.signal.tests.test_signaltools.TestDecimate
scipy.signal.tests.test_signaltools.TestDecimate._test_phaseshift(self,method,zero_phase)
scipy.signal.tests.test_signaltools.TestDecimate.test_auto_n(self)
scipy.signal.tests.test_signaltools.TestDecimate.test_bad_args(self)
scipy.signal.tests.test_signaltools.TestDecimate.test_basic_FIR(self)
scipy.signal.tests.test_signaltools.TestDecimate.test_basic_IIR(self)
scipy.signal.tests.test_signaltools.TestDecimate.test_float16_upcast(self)
scipy.signal.tests.test_signaltools.TestDecimate.test_long_float32(self)
scipy.signal.tests.test_signaltools.TestDecimate.test_phaseshift_FIR(self)
scipy.signal.tests.test_signaltools.TestDecimate.test_phaseshift_IIR(self)
scipy.signal.tests.test_signaltools.TestDecimate.test_shape(self)
scipy.signal.tests.test_signaltools.TestDecimate.test_zero_phase_FIR(self)
scipy.signal.tests.test_signaltools.TestDecimate.test_zero_phase_IIR(self)
scipy.signal.tests.test_signaltools.TestDeconvolve
scipy.signal.tests.test_signaltools.TestDeconvolve.test_basic(self)
scipy.signal.tests.test_signaltools.TestDeconvolve.test_n_dimensional_divisor(self)
scipy.signal.tests.test_signaltools.TestDeconvolve.test_n_dimensional_signal(self)
scipy.signal.tests.test_signaltools.TestDetrend
scipy.signal.tests.test_signaltools.TestDetrend.test_basic(self)
scipy.signal.tests.test_signaltools.TestDetrend.test_copy(self)
scipy.signal.tests.test_signaltools.TestFFTConvolve
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_2d_complex_same(self,axes)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_2d_complex_same_axes(self,axes)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_2d_real_same(self,axes)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_2d_real_same_axes(self,axes)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_complex(self,axes)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_complex_axes(self,axes)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_empty(self)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_fft_nan(self)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_many_sizes(self,n)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_random_data(self,axes)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_random_data_axes(self,axes)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_random_data_multidim_axes(self,axes)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_real(self,axes)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_real_axes(self,axes)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_real_same_mode(self,axes)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_real_same_mode_axes(self,axes)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_single_element(self)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_valid_mode_complex(self,axes)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_valid_mode_complex_axes(self,axes)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_valid_mode_ignore_nonaxes(self)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_valid_mode_real(self,axes)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_valid_mode_real_axes(self,axes)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_zero_rank(self)
scipy.signal.tests.test_signaltools.TestFiltFilt
scipy.signal.tests.test_signaltools.TestFiltFilt.filtfilt(self,zpk,x,axis=-1,padtype='odd',padlen=None,method='pad',irlen=None)
scipy.signal.tests.test_signaltools.TestFiltFilt.test_acoeff(self)
scipy.signal.tests.test_signaltools.TestFiltFilt.test_axis(self)
scipy.signal.tests.test_signaltools.TestFiltFilt.test_basic(self)
scipy.signal.tests.test_signaltools.TestFiltFilt.test_gust_scalars(self)
scipy.signal.tests.test_signaltools.TestFiltFilt.test_gust_simple(self)
scipy.signal.tests.test_signaltools.TestFiltFilt.test_sine(self)
scipy.signal.tests.test_signaltools.TestHilbert
scipy.signal.tests.test_signaltools.TestHilbert.test_bad_args(self)
scipy.signal.tests.test_signaltools.TestHilbert.test_hilbert_axisN(self)
scipy.signal.tests.test_signaltools.TestHilbert.test_hilbert_theoretical(self)
scipy.signal.tests.test_signaltools.TestHilbert.test_hilbert_types(self,dtype)
scipy.signal.tests.test_signaltools.TestHilbert2
scipy.signal.tests.test_signaltools.TestHilbert2.test_bad_args(self)
scipy.signal.tests.test_signaltools.TestHilbert2.test_hilbert2_types(self,dtype)
scipy.signal.tests.test_signaltools.TestLFilterZI
scipy.signal.tests.test_signaltools.TestLFilterZI.test_basic(self)
scipy.signal.tests.test_signaltools.TestLFilterZI.test_scale_invariance(self)
scipy.signal.tests.test_signaltools.TestLFilterZI.test_types(self,dtype)
scipy.signal.tests.test_signaltools.TestLinearFilterComplex128(_TestLinearFilter)
scipy.signal.tests.test_signaltools.TestLinearFilterComplex64(_TestLinearFilter)
scipy.signal.tests.test_signaltools.TestLinearFilterComplexExtended(_TestLinearFilter)
scipy.signal.tests.test_signaltools.TestLinearFilterDecimal(_TestLinearFilter)
scipy.signal.tests.test_signaltools.TestLinearFilterDecimal.type(self,x)
scipy.signal.tests.test_signaltools.TestLinearFilterFloat32(_TestLinearFilter)
scipy.signal.tests.test_signaltools.TestLinearFilterFloat64(_TestLinearFilter)
scipy.signal.tests.test_signaltools.TestLinearFilterFloatExtended(_TestLinearFilter)
scipy.signal.tests.test_signaltools.TestLinearFilterObject(_TestLinearFilter)
scipy.signal.tests.test_signaltools.TestMedFilt
scipy.signal.tests.test_signaltools.TestMedFilt.test_basic(self)
scipy.signal.tests.test_signaltools.TestMedFilt.test_invalid_dtypes(self,dtype)
scipy.signal.tests.test_signaltools.TestMedFilt.test_medfilt2d_parallel(self,dtype)
scipy.signal.tests.test_signaltools.TestMedFilt.test_none(self)
scipy.signal.tests.test_signaltools.TestMedFilt.test_object(self)
scipy.signal.tests.test_signaltools.TestMedFilt.test_refcounting(self)
scipy.signal.tests.test_signaltools.TestMedFilt.test_types(self,dtype)
scipy.signal.tests.test_signaltools.TestOAConvolve
scipy.signal.tests.test_signaltools.TestOAConvolve.test_1d_axes(self,axes,shape_a_0,shape_b_0,shape_a_extra,shape_b_extra,is_complex,mode,monkeypatch)
scipy.signal.tests.test_signaltools.TestOAConvolve.test_1d_noaxes(self,shape_a_0,shape_b_0,is_complex,mode,monkeypatch)
scipy.signal.tests.test_signaltools.TestOAConvolve.test_2d_axes(self,axes,shape_a_0,shape_b_0,shape_a_1,shape_b_1,mode,shape_a_extra,shape_b_extra,is_complex,monkeypatch)
scipy.signal.tests.test_signaltools.TestOAConvolve.test_2d_noaxes(self,shape_a_0,shape_b_0,shape_a_1,shape_b_1,mode,is_complex,monkeypatch)
scipy.signal.tests.test_signaltools.TestOAConvolve.test_empty(self)
scipy.signal.tests.test_signaltools.TestOAConvolve.test_real_manylens(self,shape_a_0,shape_b_0)
scipy.signal.tests.test_signaltools.TestOAConvolve.test_single_element(self)
scipy.signal.tests.test_signaltools.TestOAConvolve.test_zero_rank(self)
scipy.signal.tests.test_signaltools.TestOrderFilt
scipy.signal.tests.test_signaltools.TestOrderFilt.test_basic(self)
scipy.signal.tests.test_signaltools.TestPartialFractionExpansion
scipy.signal.tests.test_signaltools.TestPartialFractionExpansion.assert_rp_almost_equal(r,p,r_true,p_true,decimal=7)
scipy.signal.tests.test_signaltools.TestPartialFractionExpansion.test_compute_factors(self)
scipy.signal.tests.test_signaltools.TestPartialFractionExpansion.test_group_poles(self)
scipy.signal.tests.test_signaltools.TestPartialFractionExpansion.test_inverse_bad_rtype(self)
scipy.signal.tests.test_signaltools.TestPartialFractionExpansion.test_inverse_repeated_roots_different_rtypes(self)
scipy.signal.tests.test_signaltools.TestPartialFractionExpansion.test_inverse_scalar_arguments(self)
scipy.signal.tests.test_signaltools.TestPartialFractionExpansion.test_inverse_unique_roots_different_rtypes(self)
scipy.signal.tests.test_signaltools.TestPartialFractionExpansion.test_invres(self)
scipy.signal.tests.test_signaltools.TestPartialFractionExpansion.test_invresz(self)
scipy.signal.tests.test_signaltools.TestPartialFractionExpansion.test_invresz_one_coefficient_bug(self)
scipy.signal.tests.test_signaltools.TestPartialFractionExpansion.test_residue_general(self)
scipy.signal.tests.test_signaltools.TestPartialFractionExpansion.test_residue_leading_zeros(self)
scipy.signal.tests.test_signaltools.TestPartialFractionExpansion.test_residuez_degenerate(self)
scipy.signal.tests.test_signaltools.TestPartialFractionExpansion.test_residuez_general(self)
scipy.signal.tests.test_signaltools.TestPartialFractionExpansion.test_residuez_trailing_zeros(self)
scipy.signal.tests.test_signaltools.TestPartialFractionExpansion.test_resiude_degenerate(self)
scipy.signal.tests.test_signaltools.TestResample
scipy.signal.tests.test_signaltools.TestResample.test_basic(self)
scipy.signal.tests.test_signaltools.TestResample.test_correlate1d(self)
scipy.signal.tests.test_signaltools.TestResample.test_dc(self,nx,ny,dtype)
scipy.signal.tests.test_signaltools.TestResample.test_input_domain(self)
scipy.signal.tests.test_signaltools.TestResample.test_mutable_window(self,padtype)
scipy.signal.tests.test_signaltools.TestResample.test_output_float32(self,padtype)
scipy.signal.tests.test_signaltools.TestResample.test_output_match_dtype(self,padtype,dtype)
scipy.signal.tests.test_signaltools.TestResample.test_poly_vs_filtfilt(self)
scipy.signal.tests.test_signaltools.TestResample.test_resample_methods(self,method,ext,padtype)
scipy.signal.tests.test_signaltools.TestResample.test_rfft(self,N,num,window)
scipy.signal.tests.test_signaltools.TestSOSFilt
scipy.signal.tests.test_signaltools.TestSOSFilt.test_bad_zi_shape(self,dt)
scipy.signal.tests.test_signaltools.TestSOSFilt.test_initial_conditions(self,dt)
scipy.signal.tests.test_signaltools.TestSOSFilt.test_initial_conditions_3d_axis1(self,dt)
scipy.signal.tests.test_signaltools.TestSOSFilt.test_rank1(self,dt)
scipy.signal.tests.test_signaltools.TestSOSFilt.test_rank2(self,dt)
scipy.signal.tests.test_signaltools.TestSOSFilt.test_rank3(self,dt)
scipy.signal.tests.test_signaltools.TestSOSFilt.test_sosfilt_zi(self,dt)
scipy.signal.tests.test_signaltools.TestSOSFiltFilt(TestFiltFilt)
scipy.signal.tests.test_signaltools.TestSOSFiltFilt.test_equivalence(self)
scipy.signal.tests.test_signaltools.TestUniqueRoots
scipy.signal.tests.test_signaltools.TestUniqueRoots.test_complex_no_repeat(self)
scipy.signal.tests.test_signaltools.TestUniqueRoots.test_complex_repeat(self)
scipy.signal.tests.test_signaltools.TestUniqueRoots.test_complex_roots_extra(self)
scipy.signal.tests.test_signaltools.TestUniqueRoots.test_gh_4915(self)
scipy.signal.tests.test_signaltools.TestUniqueRoots.test_real_no_repeat(self)
scipy.signal.tests.test_signaltools.TestUniqueRoots.test_real_repeat(self)
scipy.signal.tests.test_signaltools.TestUniqueRoots.test_single_unique_root(self)
scipy.signal.tests.test_signaltools.TestVectorstrength
scipy.signal.tests.test_signaltools.TestVectorstrength.test_2d_events_ValueError(self)
scipy.signal.tests.test_signaltools.TestVectorstrength.test_2d_period_ValueError(self)
scipy.signal.tests.test_signaltools.TestVectorstrength.test_equal_1dperiod(self)
scipy.signal.tests.test_signaltools.TestVectorstrength.test_equal_2dperiod(self)
scipy.signal.tests.test_signaltools.TestVectorstrength.test_negative_period_ValueError(self)
scipy.signal.tests.test_signaltools.TestVectorstrength.test_opposite_1dperiod(self)
scipy.signal.tests.test_signaltools.TestVectorstrength.test_opposite_2dperiod(self)
scipy.signal.tests.test_signaltools.TestVectorstrength.test_partial_1dperiod(self)
scipy.signal.tests.test_signaltools.TestVectorstrength.test_partial_2dperiod(self)
scipy.signal.tests.test_signaltools.TestVectorstrength.test_single_1dperiod(self)
scipy.signal.tests.test_signaltools.TestVectorstrength.test_single_2dperiod(self)
scipy.signal.tests.test_signaltools.TestVectorstrength.test_spaced_1dperiod(self)
scipy.signal.tests.test_signaltools.TestVectorstrength.test_spaced_2dperiod(self)
scipy.signal.tests.test_signaltools.TestVectorstrength.test_zero_period_ValueError(self)
scipy.signal.tests.test_signaltools.TestWiener
scipy.signal.tests.test_signaltools.TestWiener.test_basic(self)
scipy.signal.tests.test_signaltools._TestConvolve
scipy.signal.tests.test_signaltools._TestConvolve.test_2d_arrays(self)
scipy.signal.tests.test_signaltools._TestConvolve.test_basic(self)
scipy.signal.tests.test_signaltools._TestConvolve.test_broadcastable(self)
scipy.signal.tests.test_signaltools._TestConvolve.test_complex(self)
scipy.signal.tests.test_signaltools._TestConvolve.test_input_swapping(self)
scipy.signal.tests.test_signaltools._TestConvolve.test_invalid_params(self)
scipy.signal.tests.test_signaltools._TestConvolve.test_same(self)
scipy.signal.tests.test_signaltools._TestConvolve.test_same_eq(self)
scipy.signal.tests.test_signaltools._TestConvolve.test_single_element(self)
scipy.signal.tests.test_signaltools._TestConvolve.test_zero_rank(self)
scipy.signal.tests.test_signaltools._TestConvolve2d
scipy.signal.tests.test_signaltools._TestConvolve2d.test_2d_arrays(self)
scipy.signal.tests.test_signaltools._TestConvolve2d.test_boundary_extension_full(self)
scipy.signal.tests.test_signaltools._TestConvolve2d.test_boundary_extension_same(self)
scipy.signal.tests.test_signaltools._TestConvolve2d.test_fillvalue(self)
scipy.signal.tests.test_signaltools._TestConvolve2d.test_fillvalue_empty(self)
scipy.signal.tests.test_signaltools._TestConvolve2d.test_fillvalue_errors(self)
scipy.signal.tests.test_signaltools._TestConvolve2d.test_invalid_shapes(self)
scipy.signal.tests.test_signaltools._TestConvolve2d.test_same_with_boundary(self,func,boundary,expected)
scipy.signal.tests.test_signaltools._TestConvolve2d.test_sym_boundary(self)
scipy.signal.tests.test_signaltools._TestConvolve2d.test_valid_mode(self)
scipy.signal.tests.test_signaltools._TestConvolve2d.test_valid_mode_complx(self)
scipy.signal.tests.test_signaltools._TestConvolve2d.test_wrap_boundary(self)
scipy.signal.tests.test_signaltools._TestLinearFilter
scipy.signal.tests.test_signaltools._TestLinearFilter.base_bad_size_zi(self,b,a,x,axis,zi)
scipy.signal.tests.test_signaltools._TestLinearFilter.convert_dtype(self,arr)
scipy.signal.tests.test_signaltools._TestLinearFilter.generate(self,shape)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_bad_size_zi(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_do_not_modify_a_b_FIR(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_do_not_modify_a_b_IIR(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_empty_zi(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_lfiltic_bad_zi(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_rank_1_FIR(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_rank_1_FIR_init_cond(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_rank_1_IIR(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_rank_1_IIR_init_cond(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_rank_2_IIR_axis_0(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_rank_2_IIR_axis_0_init_cond(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_rank_2_IIR_axis_1(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_rank_2_IIR_axis_1_init_cond(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_rank_3_FIR(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_rank_3_FIR_init_cond(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_rank_3_IIR(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_rank_3_IIR_init_cond(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_scalar_a(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_short_x_FIR(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_short_x_IIR(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_zi_pseudobroadcast(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_zi_some_singleton_dims(self)
scipy.signal.tests.test_signaltools.assert_allclose_cast(actual,desired,rtol=1e-07,atol=0)
scipy.signal.tests.test_signaltools.cast_tf2sos(b,a)
scipy.signal.tests.test_signaltools.check_filtfilt_gust(b,a,shape,axis,irlen=None)
scipy.signal.tests.test_signaltools.fftconvolve_err(*args,**kwargs)
scipy.signal.tests.test_signaltools.filtfilt_gust_opt(b,a,x)
scipy.signal.tests.test_signaltools.gen_oa_shapes(sizes)
scipy.signal.tests.test_signaltools.gen_oa_shapes_2d(sizes)
scipy.signal.tests.test_signaltools.gen_oa_shapes_eq(sizes)
scipy.signal.tests.test_signaltools.test_choose_conv_method()
scipy.signal.tests.test_signaltools.test_correlation_lags(mode,behind,input_size)
scipy.signal.tests.test_signaltools.test_filtfilt_gust()
scipy.signal.tests.test_signaltools.test_lfilter_bad_object()
scipy.signal.tests.test_signaltools.test_lfilter_notimplemented_input()
scipy.signal.tests.test_signaltools.test_nonnumeric_dtypes(func)
scipy.signal.tests.testassert_allclose_cast(actual,desired,rtol=1e-07,atol=0)
scipy.signal.tests.testcast_tf2sos(b,a)
scipy.signal.tests.testcheck_filtfilt_gust(b,a,shape,axis,irlen=None)
scipy.signal.tests.testfftconvolve_err(*args,**kwargs)
scipy.signal.tests.testfiltfilt_gust_opt(b,a,x)
scipy.signal.tests.testgen_oa_shapes(sizes)
scipy.signal.tests.testgen_oa_shapes_2d(sizes)
scipy.signal.tests.testgen_oa_shapes_eq(sizes)
scipy.signal.tests.testtest_choose_conv_method()
scipy.signal.tests.testtest_correlation_lags(mode,behind,input_size)
scipy.signal.tests.testtest_filtfilt_gust()
scipy.signal.tests.testtest_lfilter_bad_object()
scipy.signal.tests.testtest_lfilter_notimplemented_input()
scipy.signal.tests.testtest_nonnumeric_dtypes(func)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/tests/test_max_len_seq.py----------------------------------------
A:scipy.signal.tests.test_max_len_seq.tester->numpy.real(ifft(fft(m) * np.conj(fft(m))))
A:scipy.signal.tests.test_max_len_seq.(m1, s1)->max_len_seq(nbits, state=state, taps=taps, length=n)
A:scipy.signal.tests.test_max_len_seq.(m2, s2)->max_len_seq(nbits, state=s1, taps=taps, length=1)
A:scipy.signal.tests.test_max_len_seq.(m3, s3)->max_len_seq(nbits, state=s2, taps=taps, length=out_len - n - 1)
A:scipy.signal.tests.test_max_len_seq.new_m->numpy.concatenate((m1, m2, m3))
scipy.signal.tests.test_max_len_seq.TestMLS
scipy.signal.tests.test_max_len_seq.TestMLS.test_mls_inputs(self)
scipy.signal.tests.test_max_len_seq.TestMLS.test_mls_output(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/tests/test_savitzky_golay.py----------------------------------------
A:scipy.signal.tests.test_savitzky_golay.dp->_polyder(p, m)
A:scipy.signal.tests.test_savitzky_golay.t->numpy.linspace(-5, 5, 21)
A:scipy.signal.tests.test_savitzky_golay.unit->(t == pos).astype(int)
A:scipy.signal.tests.test_savitzky_golay.h->savgol_coeffs(window_length, polyorder, deriv=2, delta=delta)
A:scipy.signal.tests.test_savitzky_golay.h1->savgol_coeffs(window_length, order, pos=pos, use='dot')
A:scipy.signal.tests.test_savitzky_golay.h2->alt_sg_coeffs(window_length, order, pos=pos)
A:scipy.signal.tests.test_savitzky_golay.x->numpy.ones((10, 20, 30))
A:scipy.signal.tests.test_savitzky_golay.y0->convolve1d(y, h)
A:scipy.signal.tests.test_savitzky_golay.y1->savgol_filter(x, window_length, 3, axis=0, mode='interp', deriv=1, delta=delta)
A:scipy.signal.tests.test_savitzky_golay.y2->savgol_filter(x, window_length, 3, axis=0, mode='interp', deriv=2, delta=delta)
A:scipy.signal.tests.test_savitzky_golay.i->numpy.array([-2.0, 0.0, 2.0, 4.0, 6.0])
A:scipy.signal.tests.test_savitzky_golay.d2x->numpy.array([np.zeros_like(t), np.full_like(t, 6), 6 * t])
A:scipy.signal.tests.test_savitzky_golay.coeffs0->savgol_coeffs(31, 9)
A:scipy.signal.tests.test_savitzky_golay.coeffs1->savgol_coeffs(31, 9, deriv=1)
A:scipy.signal.tests.test_savitzky_golay.coeffs2->savgol_coeffs(5, 3, pos=pos, delta=2.0, use='dot', deriv=2)
A:scipy.signal.tests.test_savitzky_golay.coeffs->savgol_coeffs(7, polyorder=4, deriv=6)
A:scipy.signal.tests.test_savitzky_golay.h_p_d->savgol_coeffs(length, 0, 0)
A:scipy.signal.tests.test_savitzky_golay.actual_output->savgol_coeffs(length, 3, 2)
A:scipy.signal.tests.test_savitzky_golay.y->savgol_filter(z, 7, 3, axis=0, mode='interp', delta=delta)
A:scipy.signal.tests.test_savitzky_golay.expected->numpy.array([[1.0, 4.0 / 3, 1.0], [2.0, 8.0 / 3, 2.0]])
A:scipy.signal.tests.test_savitzky_golay.dx->numpy.array([np.ones_like(t), 6 * t, 3 * t ** 2 - 1.0])
A:scipy.signal.tests.test_savitzky_golay.x1->numpy.array([t, -t])
A:scipy.signal.tests.test_savitzky_golay.x2->numpy.array([t ** 2, 3 * t ** 2 + 5])
A:scipy.signal.tests.test_savitzky_golay.x3->numpy.array([t ** 3, 2 * t ** 3 + t ** 2 - 0.5 * t])
A:scipy.signal.tests.test_savitzky_golay.dx1->numpy.array([np.ones_like(t), -np.ones_like(t)])
A:scipy.signal.tests.test_savitzky_golay.dx2->numpy.array([2 * t, 6 * t])
A:scipy.signal.tests.test_savitzky_golay.dx3->numpy.array([3 * t ** 2, 6 * t ** 2 + 2 * t - 0.5])
A:scipy.signal.tests.test_savitzky_golay.z->z.swapaxes(0, 1).copy().swapaxes(0, 1).copy()
A:scipy.signal.tests.test_savitzky_golay.dz->dz.swapaxes(0, 1).copy().swapaxes(0, 1).copy()
A:scipy.signal.tests.test_savitzky_golay.dy->savgol_filter(z, 7, 3, axis=0, mode='interp', deriv=1, delta=delta)
scipy.signal.tests.test_savitzky_golay.alt_sg_coeffs(window_length,polyorder,pos)
scipy.signal.tests.test_savitzky_golay.check_polyder(p,m,expected)
scipy.signal.tests.test_savitzky_golay.compare_coeffs_to_alt(window_length,order)
scipy.signal.tests.test_savitzky_golay.test_polyder()
scipy.signal.tests.test_savitzky_golay.test_sg_coeffs_compare()
scipy.signal.tests.test_savitzky_golay.test_sg_coeffs_deriv()
scipy.signal.tests.test_savitzky_golay.test_sg_coeffs_deriv_gt_polyorder()
scipy.signal.tests.test_savitzky_golay.test_sg_coeffs_even_window_length()
scipy.signal.tests.test_savitzky_golay.test_sg_coeffs_exact()
scipy.signal.tests.test_savitzky_golay.test_sg_coeffs_large()
scipy.signal.tests.test_savitzky_golay.test_sg_coeffs_trivial()
scipy.signal.tests.test_savitzky_golay.test_sg_filter_2d()
scipy.signal.tests.test_savitzky_golay.test_sg_filter_basic()
scipy.signal.tests.test_savitzky_golay.test_sg_filter_interp_edges()
scipy.signal.tests.test_savitzky_golay.test_sg_filter_interp_edges_3d()
scipy.signal.tests.test_savitzky_golay.test_sg_filter_trivial()
scipy.signal.tests.test_savitzky_golay.test_sg_filter_valid_window_length_3d()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/tests/test_filter_design.py----------------------------------------
A:scipy.signal.tests.test_filter_design.z->numpy.concatenate((z, np.conj(z), [1, -1]))
A:scipy.signal.tests.test_filter_design.z1->numpy.exp(1j * 0.1 * pi)
A:scipy.signal.tests.test_filter_design.y->numpy.concatenate((x, y, z)).conj()
A:scipy.signal.tests.test_filter_design.x->numpy.concatenate((x, y, z))
A:scipy.signal.tests.test_filter_design.c->_cplxpair(x)
A:scipy.signal.tests.test_filter_design.eps->spacing(1)
A:scipy.signal.tests.test_filter_design.(zc, zr)->_cplxreal([2, 0, 1, 4])
A:scipy.signal.tests.test_filter_design.z_r->numpy.array([0.5, -0.5])
A:scipy.signal.tests.test_filter_design.p_r->numpy.array([1j / np.sqrt(2), -1j / np.sqrt(2)])
A:scipy.signal.tests.test_filter_design.b->numpy.convolve([1, -z1], [1, -z2])
A:scipy.signal.tests.test_filter_design.a->numpy.convolve([1, -p1], [1, -p2])
A:scipy.signal.tests.test_filter_design.(z, p, k)->tf2zpk(b, a)
A:scipy.signal.tests.test_filter_design.(b, a)->gammatone(440, 'iir', fs=16000)
A:scipy.signal.tests.test_filter_design.b_r->numpy.array([1.0])
A:scipy.signal.tests.test_filter_design.a_r->numpy.array([1.0])
A:scipy.signal.tests.test_filter_design.sos->func(4, *args, output='sos')
A:scipy.signal.tests.test_filter_design.p->numpy.concatenate((p, np.conj(p)))
A:scipy.signal.tests.test_filter_design.(z2, p2, k2)->sos2zpk(sos)
A:scipy.signal.tests.test_filter_design.sos2->iirfilter(N=1, Wn=1, btype='low', analog=True, output='sos')
A:scipy.signal.tests.test_filter_design.ct->dt.upper()
A:scipy.signal.tests.test_filter_design.k->numpy.array(1).astype(dt)
A:scipy.signal.tests.test_filter_design.p1->numpy.exp(1j * 0.5 * pi)
A:scipy.signal.tests.test_filter_design.sos2_dt->zpk2sos([], p, 1, pairing='minimal', analog=False)
A:scipy.signal.tests.test_filter_design.sos2_ct->zpk2sos([], p, 1, pairing='minimal', analog=True)
A:scipy.signal.tests.test_filter_design.(_, h)->freqs_zpk([1.0], [1.0], [1.0], worN=8)
A:scipy.signal.tests.test_filter_design.(w, H)->freqs_zpk(z, p, k, worN=n)
A:scipy.signal.tests.test_filter_design.expected_w->numpy.linspace(0, np.pi, ii, endpoint=False)
A:scipy.signal.tests.test_filter_design.(w1, h1)->freqz_zpk(z, p, k, w, fs=fs)
A:scipy.signal.tests.test_filter_design.(w2, h2)->freqz_zpk(z, p, k, 2 * pi * np.array(w) / fs)
A:scipy.signal.tests.test_filter_design.(w, h)->freqz(b, a, 1000, fs=8000)
A:scipy.signal.tests.test_filter_design.(w_out, h)->freqz_zpk([], [], 1, worN=w, fs=100)
A:scipy.signal.tests.test_filter_design.t->numpy.linspace(0, 1, 4, endpoint=False)
A:scipy.signal.tests.test_filter_design.bs->list()
A:scipy.signal.tests.test_filter_design.as_->list()
A:scipy.signal.tests.test_filter_design.hs_whole->list()
A:scipy.signal.tests.test_filter_design.hs_half->list()
A:scipy.signal.tests.test_filter_design.rng->numpy.random.RandomState(0)
A:scipy.signal.tests.test_filter_design.(w, expected_h)->freqz(b, a, worN=expected_w, whole=False)
A:scipy.signal.tests.test_filter_design.(ww, hh)->freqz(b[:, k, 0, 0], a[:, k, 0, 0], worN=worN.ravel(), whole=whole)
A:scipy.signal.tests.test_filter_design.(N, Wn)->ellipord(wp, ws, rp, rs, False, fs=fs)
A:scipy.signal.tests.test_filter_design.h->numpy.abs(h)
A:scipy.signal.tests.test_filter_design.(z_mp, p_mp, k_mp)->mpsig.butter_lp(order, Wn)
A:scipy.signal.tests.test_filter_design.(w_mp, h_mp)->mpsig.zpkfreqz(z_mp, p_mp, k_mp, N)
A:scipy.signal.tests.test_filter_design.w_mp->numpy.array([float(x) for x in w_mp])
A:scipy.signal.tests.test_filter_design.h_mp->numpy.array([complex(x) for x in h_mp])
A:scipy.signal.tests.test_filter_design.b_matlab->numpy.array([2.150733144728282e-11, 1.720586515782626e-10, 6.02205280523919e-10, 1.204410561047838e-09, 1.505513201309798e-09, 1.204410561047838e-09, 6.02205280523919e-10, 1.720586515782626e-10, 2.150733144728282e-11])
A:scipy.signal.tests.test_filter_design.a_matlab->numpy.array([1.0, -7.782402035027959, 26.54354569747454, -51.82182531666387, 63.34127355102684, -49.63358186631157, 24.34862182949389, -6.836925348604676, 0.841293494444914])
A:scipy.signal.tests.test_filter_design.b_norm_in->numpy.array([1.5543135865293012e-06, 1.2434508692234413e-05, 4.352078042282045e-05, 8.70415608456409e-05, 0.00010880195105705122, 8.704156084564097e-05, 4.352078042282045e-05, 1.2434508692234413e-05, 1.5543135865293012e-06])
A:scipy.signal.tests.test_filter_design.a_norm_in->numpy.array([72269.02590912717, -562426.6143046797, 1918276.1917308895, -3745112.8364682454, 4577612.139376277, -3586970.6138592605, 1759651.1818472347, -494097.93515707983, 60799.46134721965])
A:scipy.signal.tests.test_filter_design.(b_output, a_output)->normalize(b_norm_in, a_norm_in)
A:scipy.signal.tests.test_filter_design.(b_lp, a_lp)->lp2lp(b, a, 0.3857425662711212)
A:scipy.signal.tests.test_filter_design.(b_hp, a_hp)->lp2hp(b, a, 2 * np.pi * 5000)
A:scipy.signal.tests.test_filter_design.(b_bp, a_bp)->lp2bp(b, a, 2 * np.pi * 4000, 2 * np.pi * 2000)
A:scipy.signal.tests.test_filter_design.(b_bs, a_bs)->lp2bs(b, a, 0.41722257286366754, 0.1846057532615225)
A:scipy.signal.tests.test_filter_design.(b_z, a_z)->bilinear(b, a, 0.5)
A:scipy.signal.tests.test_filter_design.(z_lp, p_lp, k_lp)->lp2lp_zpk(z, p, k, 20)
A:scipy.signal.tests.test_filter_design.(z_hp, p_hp, k_hp)->lp2hp_zpk(z, p, k, 6)
A:scipy.signal.tests.test_filter_design.(z_bp, p_bp, k_bp)->lp2bp_zpk(z, p, k, 15, 8)
A:scipy.signal.tests.test_filter_design.(z_bs, p_bs, k_bs)->lp2bs_zpk(z, p, k, 35, 12)
A:scipy.signal.tests.test_filter_design.(z_d, p_d, k_d)->bilinear_zpk(z, p, k, 10)
A:scipy.signal.tests.test_filter_design.(n, Wn)->buttord(1, 550 / 450, 1, 26, analog=True)
A:scipy.signal.tests.test_filter_design.p2->numpy.exp(1j * 0.8 * pi)
A:scipy.signal.tests.test_filter_design.(b2, a2)->cheby1(5, 3, 1, analog=True)
A:scipy.signal.tests.test_filter_design.w->numpy.linspace(0, 96000 / 2, num=10, endpoint=False)
A:scipy.signal.tests.test_filter_design.phase->numpy.unwrap(np.angle(h))
A:scipy.signal.tests.test_filter_design.mag->abs(h)
A:scipy.signal.tests.test_filter_design.ba1->ellip(N, 1, 20, fc, btype, fs=fs)
A:scipy.signal.tests.test_filter_design.ba2->ellip(N, 1, 20, fcnorm, btype)
A:scipy.signal.tests.test_filter_design.fcnorm->seq([f / (fs / 2) for f in fc])
A:scipy.signal.tests.test_filter_design.(b1, a1)->butter(2, 1, analog=True)
A:scipy.signal.tests.test_filter_design.(b3, a3)->ellip(5, 3, 26, 1, analog=True)
A:scipy.signal.tests.test_filter_design.z2->numpy.exp(1j * 0.25 * pi)
A:scipy.signal.tests.test_filter_design.(B, A)->cheby2(18, 100, 0.5)
A:scipy.signal.tests.test_filter_design.zpk->func(4, *args, output='zpk')
A:scipy.signal.tests.test_filter_design.(freqs, response)->freqz(b, a)
A:scipy.signal.tests.test_filter_design.(b_notch, a_notch)->iircomb(60, 35, ftype='notch', fs=600)
A:scipy.signal.tests.test_filter_design.(b_peak, a_peak)->iircomb(60, 35, ftype='peak', fs=600)
A:scipy.signal.tests.test_filter_design.(w, gd)->group_delay((1, 1), N)
A:scipy.signal.tests.test_filter_design.matlab_gd->numpy.array([8.249313898506037, 11.958947880907104, 2.452325615326005, 1.048918665702008, 0.611382575635897, 0.418293269460578, 0.317932917836572, 0.261371844762525, 0.229038045801298, 0.212185774208521])
A:scipy.signal.tests.test_filter_design.(w1, gd1)->group_delay((1, 1))
A:scipy.signal.tests.test_filter_design.(w2, gd2)->group_delay((1, 1), None)
A:scipy.signal.tests.test_filter_design.norm_gd->numpy.array([8.249313898506037, 11.958947880907104, 2.452325615326005, 1.048918665702008, 0.611382575635897, 0.418293269460578, 0.317932917836572, 0.261371844762525, 0.229038045801298, 0.212185774208521])
A:scipy.signal.tests.test_filter_design.(w_out, gd)->group_delay((1, 1), w)
A:scipy.signal.tests.test_filter_design.response_max->numpy.max(np.abs(response))
A:scipy.signal.tests.test_filter_design.(b, _)->gammatone(15, 'fir', fs=1000)
scipy.signal.tests.testTestBessel
scipy.signal.tests.testTestBessel.test_bessel_poly(self)
scipy.signal.tests.testTestBessel.test_bessel_zeros(self)
scipy.signal.tests.testTestBessel.test_degenerate(self)
scipy.signal.tests.testTestBessel.test_fs_param(self)
scipy.signal.tests.testTestBessel.test_hardcoded(self)
scipy.signal.tests.testTestBessel.test_high_order(self)
scipy.signal.tests.testTestBessel.test_invalid(self)
scipy.signal.tests.testTestBessel.test_norm_delay(self)
scipy.signal.tests.testTestBessel.test_norm_factor(self)
scipy.signal.tests.testTestBessel.test_norm_mag(self)
scipy.signal.tests.testTestBessel.test_norm_phase(self)
scipy.signal.tests.testTestBessel.test_refs(self)
scipy.signal.tests.testTestBilinear
scipy.signal.tests.testTestBilinear.test_basic(self)
scipy.signal.tests.testTestBilinear_zpk
scipy.signal.tests.testTestBilinear_zpk.test_basic(self)
scipy.signal.tests.testTestButter
scipy.signal.tests.testTestButter.test_ba_output(self)
scipy.signal.tests.testTestButter.test_bandpass(self)
scipy.signal.tests.testTestButter.test_bandstop(self)
scipy.signal.tests.testTestButter.test_basic(self)
scipy.signal.tests.testTestButter.test_degenerate(self)
scipy.signal.tests.testTestButter.test_fs_param(self)
scipy.signal.tests.testTestButter.test_highpass(self)
scipy.signal.tests.testTestButtord
scipy.signal.tests.testTestButtord.test_analog(self)
scipy.signal.tests.testTestButtord.test_bandpass(self)
scipy.signal.tests.testTestButtord.test_bandstop(self)
scipy.signal.tests.testTestButtord.test_fs_param(self)
scipy.signal.tests.testTestButtord.test_highpass(self)
scipy.signal.tests.testTestButtord.test_invalid_input(self)
scipy.signal.tests.testTestButtord.test_lowpass(self)
scipy.signal.tests.testTestButtord.test_runtime_warnings(self)
scipy.signal.tests.testTestCheb1ord
scipy.signal.tests.testTestCheb1ord.test_analog(self)
scipy.signal.tests.testTestCheb1ord.test_bandpass(self)
scipy.signal.tests.testTestCheb1ord.test_bandstop(self)
scipy.signal.tests.testTestCheb1ord.test_fs_param(self)
scipy.signal.tests.testTestCheb1ord.test_highpass(self)
scipy.signal.tests.testTestCheb1ord.test_invalid_input(self)
scipy.signal.tests.testTestCheb1ord.test_lowpass(self)
scipy.signal.tests.testTestCheb2ord
scipy.signal.tests.testTestCheb2ord.test_analog(self)
scipy.signal.tests.testTestCheb2ord.test_bandpass(self)
scipy.signal.tests.testTestCheb2ord.test_bandstop(self)
scipy.signal.tests.testTestCheb2ord.test_fs_param(self)
scipy.signal.tests.testTestCheb2ord.test_highpass(self)
scipy.signal.tests.testTestCheb2ord.test_invalid_input(self)
scipy.signal.tests.testTestCheb2ord.test_lowpass(self)
scipy.signal.tests.testTestCheby1
scipy.signal.tests.testTestCheby1.test_ba_output(self)
scipy.signal.tests.testTestCheby1.test_bandpass(self)
scipy.signal.tests.testTestCheby1.test_bandstop(self)
scipy.signal.tests.testTestCheby1.test_basic(self)
scipy.signal.tests.testTestCheby1.test_degenerate(self)
scipy.signal.tests.testTestCheby1.test_fs_param(self)
scipy.signal.tests.testTestCheby1.test_highpass(self)
scipy.signal.tests.testTestCheby2
scipy.signal.tests.testTestCheby2.test_ba_output(self)
scipy.signal.tests.testTestCheby2.test_bandpass(self)
scipy.signal.tests.testTestCheby2.test_bandstop(self)
scipy.signal.tests.testTestCheby2.test_basic(self)
scipy.signal.tests.testTestCheby2.test_degenerate(self)
scipy.signal.tests.testTestCheby2.test_fs_param(self)
scipy.signal.tests.testTestCheby2.test_highpass(self)
scipy.signal.tests.testTestCplxPair
scipy.signal.tests.testTestCplxPair.test_output_order(self)
scipy.signal.tests.testTestCplxPair.test_real_integer_input(self)
scipy.signal.tests.testTestCplxPair.test_tolerances(self)
scipy.signal.tests.testTestCplxPair.test_trivial_input(self)
scipy.signal.tests.testTestCplxPair.test_unmatched_conjugates(self)
scipy.signal.tests.testTestCplxReal
scipy.signal.tests.testTestCplxReal.test_output_order(self)
scipy.signal.tests.testTestCplxReal.test_real_integer_input(self)
scipy.signal.tests.testTestCplxReal.test_trivial_input(self)
scipy.signal.tests.testTestCplxReal.test_unmatched_conjugates(self)
scipy.signal.tests.testTestEllip
scipy.signal.tests.testTestEllip.test_ba_output(self)
scipy.signal.tests.testTestEllip.test_bandpass(self)
scipy.signal.tests.testTestEllip.test_bandstop(self)
scipy.signal.tests.testTestEllip.test_basic(self)
scipy.signal.tests.testTestEllip.test_degenerate(self)
scipy.signal.tests.testTestEllip.test_fs_param(self)
scipy.signal.tests.testTestEllip.test_highpass(self)
scipy.signal.tests.testTestEllipord
scipy.signal.tests.testTestEllipord.test_analog(self)
scipy.signal.tests.testTestEllipord.test_bandpass(self)
scipy.signal.tests.testTestEllipord.test_bandstop(self)
scipy.signal.tests.testTestEllipord.test_fs_param(self)
scipy.signal.tests.testTestEllipord.test_highpass(self)
scipy.signal.tests.testTestEllipord.test_invalid_input(self)
scipy.signal.tests.testTestEllipord.test_lowpass(self)
scipy.signal.tests.testTestEllipord.test_lowpass_1000dB(self)
scipy.signal.tests.testTestFreqs
scipy.signal.tests.testTestFreqs.test_backward_compat(self)
scipy.signal.tests.testTestFreqs.test_basic(self)
scipy.signal.tests.testTestFreqs.test_freq_range(self)
scipy.signal.tests.testTestFreqs.test_output(self)
scipy.signal.tests.testTestFreqs.test_plot(self)
scipy.signal.tests.testTestFreqs.test_w_or_N_types(self)
scipy.signal.tests.testTestFreqs_zpk
scipy.signal.tests.testTestFreqs_zpk.test_backward_compat(self)
scipy.signal.tests.testTestFreqs_zpk.test_basic(self)
scipy.signal.tests.testTestFreqs_zpk.test_freq_range(self)
scipy.signal.tests.testTestFreqs_zpk.test_output(self)
scipy.signal.tests.testTestFreqs_zpk.test_vs_freqs(self)
scipy.signal.tests.testTestFreqs_zpk.test_w_or_N_types(self)
scipy.signal.tests.testTestFreqz
scipy.signal.tests.testTestFreqz.test_backward_compat(self)
scipy.signal.tests.testTestFreqz.test_basic(self)
scipy.signal.tests.testTestFreqz.test_basic_whole(self)
scipy.signal.tests.testTestFreqz.test_broadcasting1(self)
scipy.signal.tests.testTestFreqz.test_broadcasting2(self)
scipy.signal.tests.testTestFreqz.test_broadcasting3(self)
scipy.signal.tests.testTestFreqz.test_broadcasting4(self)
scipy.signal.tests.testTestFreqz.test_fft_wrapping(self)
scipy.signal.tests.testTestFreqz.test_fs_param(self)
scipy.signal.tests.testTestFreqz.test_nyquist(self)
scipy.signal.tests.testTestFreqz.test_plot(self)
scipy.signal.tests.testTestFreqz.test_ticket1441(self)
scipy.signal.tests.testTestFreqz.test_w_or_N_types(self)
scipy.signal.tests.testTestFreqz_zpk
scipy.signal.tests.testTestFreqz_zpk.test_backward_compat(self)
scipy.signal.tests.testTestFreqz_zpk.test_basic(self)
scipy.signal.tests.testTestFreqz_zpk.test_basic_whole(self)
scipy.signal.tests.testTestFreqz_zpk.test_fs_param(self)
scipy.signal.tests.testTestFreqz_zpk.test_ticket1441(self)
scipy.signal.tests.testTestFreqz_zpk.test_vs_freqz(self)
scipy.signal.tests.testTestFreqz_zpk.test_w_or_N_types(self)
scipy.signal.tests.testTestGammatone
scipy.signal.tests.testTestGammatone.test_fir_ba_output(self)
scipy.signal.tests.testTestGammatone.test_frequency_response(self)
scipy.signal.tests.testTestGammatone.test_iir_ba_output(self)
scipy.signal.tests.testTestGammatone.test_iir_symmetry(self)
scipy.signal.tests.testTestGammatone.test_invalid_input(self)
scipy.signal.tests.testTestGroupDelay
scipy.signal.tests.testTestGroupDelay.test_backward_compat(self)
scipy.signal.tests.testTestGroupDelay.test_fir(self)
scipy.signal.tests.testTestGroupDelay.test_fs_param(self)
scipy.signal.tests.testTestGroupDelay.test_identity_filter(self)
scipy.signal.tests.testTestGroupDelay.test_iir(self)
scipy.signal.tests.testTestGroupDelay.test_singular(self)
scipy.signal.tests.testTestGroupDelay.test_w_or_N_types(self)
scipy.signal.tests.testTestIIRComb
scipy.signal.tests.testTestIIRComb.test_ba_output(self)
scipy.signal.tests.testTestIIRComb.test_frequency_response(self,ftype)
scipy.signal.tests.testTestIIRComb.test_iir_symmetry(self)
scipy.signal.tests.testTestIIRComb.test_invalid_input(self)
scipy.signal.tests.testTestIIRComb.test_nearest_divisor(self)
scipy.signal.tests.testTestIIRComb.test_pass_zero(self,ftype,pass_zero,peak,notch)
scipy.signal.tests.testTestIIRDesign
scipy.signal.tests.testTestIIRDesign.test_exceptions(self)
scipy.signal.tests.testTestIIRFilter
scipy.signal.tests.testTestIIRFilter.test_analog_sos(self)
scipy.signal.tests.testTestIIRFilter.test_int_inputs(self)
scipy.signal.tests.testTestIIRFilter.test_invalid_wn_range(self)
scipy.signal.tests.testTestIIRFilter.test_invalid_wn_size(self)
scipy.signal.tests.testTestIIRFilter.test_symmetry(self)
scipy.signal.tests.testTestIIRFilter.test_wn1_ge_wn0(self)
scipy.signal.tests.testTestIIRNotch
scipy.signal.tests.testTestIIRNotch.test_ba_output(self)
scipy.signal.tests.testTestIIRNotch.test_errors(self)
scipy.signal.tests.testTestIIRNotch.test_frequency_response(self)
scipy.signal.tests.testTestIIRNotch.test_fs_param(self)
scipy.signal.tests.testTestIIRPeak
scipy.signal.tests.testTestIIRPeak.test_ba_output(self)
scipy.signal.tests.testTestIIRPeak.test_errors(self)
scipy.signal.tests.testTestIIRPeak.test_frequency_response(self)
scipy.signal.tests.testTestIIRPeak.test_fs_param(self)
scipy.signal.tests.testTestLp2bp
scipy.signal.tests.testTestLp2bp.test_basic(self)
scipy.signal.tests.testTestLp2bp_zpk
scipy.signal.tests.testTestLp2bp_zpk.test_basic(self)
scipy.signal.tests.testTestLp2bs
scipy.signal.tests.testTestLp2bs.test_basic(self)
scipy.signal.tests.testTestLp2bs_zpk
scipy.signal.tests.testTestLp2bs_zpk.test_basic(self)
scipy.signal.tests.testTestLp2hp
scipy.signal.tests.testTestLp2hp.test_basic(self)
scipy.signal.tests.testTestLp2hp_zpk
scipy.signal.tests.testTestLp2hp_zpk.test_basic(self)
scipy.signal.tests.testTestLp2lp
scipy.signal.tests.testTestLp2lp.test_basic(self)
scipy.signal.tests.testTestLp2lp_zpk
scipy.signal.tests.testTestLp2lp_zpk.test_basic(self)
scipy.signal.tests.testTestNormalize
scipy.signal.tests.testTestNormalize.test_allclose(self)
scipy.signal.tests.testTestNormalize.test_errors(self)
scipy.signal.tests.testTestPrototypeType
scipy.signal.tests.testTestPrototypeType.test_output_type(self)
scipy.signal.tests.testTestSOSFreqz
scipy.signal.tests.testTestSOSFreqz.test_fs_param(self)
scipy.signal.tests.testTestSOSFreqz.test_sos_freqz_against_mp(self)
scipy.signal.tests.testTestSOSFreqz.test_sosfreqz_basic(self)
scipy.signal.tests.testTestSOSFreqz.test_sosfreqz_design_ellip(self)
scipy.signal.tests.testTestSOSFreqz.test_sosfrez_design(self)
scipy.signal.tests.testTestSOSFreqz.test_w_or_N_types(self)
scipy.signal.tests.testTestSos2Tf
scipy.signal.tests.testTestSos2Tf.test_basic(self)
scipy.signal.tests.testTestSos2Zpk
scipy.signal.tests.testTestSos2Zpk.test_basic(self)
scipy.signal.tests.testTestSos2Zpk.test_fewer_zeros(self)
scipy.signal.tests.testTestTf2Sos
scipy.signal.tests.testTestTf2Sos.test_analog(self,b,a,analog,sos)
scipy.signal.tests.testTestTf2Sos.test_basic(self)
scipy.signal.tests.testTestTf2zpk
scipy.signal.tests.testTestTf2zpk.test_bad_filter(self)
scipy.signal.tests.testTestTf2zpk.test_simple(self,dt)
scipy.signal.tests.testTestZpk2Sos
scipy.signal.tests.testTestZpk2Sos.test_analog(self,p,sos_dt)
scipy.signal.tests.testTestZpk2Sos.test_bad_args(self)
scipy.signal.tests.testTestZpk2Sos.test_basic(self)
scipy.signal.tests.testTestZpk2Sos.test_dtypes(self,dt,pairing,analog)
scipy.signal.tests.testTestZpk2Sos.test_pairing(self,pairing,sos)
scipy.signal.tests.testTestZpk2Tf
scipy.signal.tests.testTestZpk2Tf.test_identity(self)
scipy.signal.tests.test_filter_design.TestBessel
scipy.signal.tests.test_filter_design.TestBessel.test_bessel_poly(self)
scipy.signal.tests.test_filter_design.TestBessel.test_bessel_zeros(self)
scipy.signal.tests.test_filter_design.TestBessel.test_degenerate(self)
scipy.signal.tests.test_filter_design.TestBessel.test_fs_param(self)
scipy.signal.tests.test_filter_design.TestBessel.test_hardcoded(self)
scipy.signal.tests.test_filter_design.TestBessel.test_high_order(self)
scipy.signal.tests.test_filter_design.TestBessel.test_invalid(self)
scipy.signal.tests.test_filter_design.TestBessel.test_norm_delay(self)
scipy.signal.tests.test_filter_design.TestBessel.test_norm_factor(self)
scipy.signal.tests.test_filter_design.TestBessel.test_norm_mag(self)
scipy.signal.tests.test_filter_design.TestBessel.test_norm_phase(self)
scipy.signal.tests.test_filter_design.TestBessel.test_refs(self)
scipy.signal.tests.test_filter_design.TestBilinear
scipy.signal.tests.test_filter_design.TestBilinear.test_basic(self)
scipy.signal.tests.test_filter_design.TestBilinear_zpk
scipy.signal.tests.test_filter_design.TestBilinear_zpk.test_basic(self)
scipy.signal.tests.test_filter_design.TestButter
scipy.signal.tests.test_filter_design.TestButter.test_ba_output(self)
scipy.signal.tests.test_filter_design.TestButter.test_bandpass(self)
scipy.signal.tests.test_filter_design.TestButter.test_bandstop(self)
scipy.signal.tests.test_filter_design.TestButter.test_basic(self)
scipy.signal.tests.test_filter_design.TestButter.test_degenerate(self)
scipy.signal.tests.test_filter_design.TestButter.test_fs_param(self)
scipy.signal.tests.test_filter_design.TestButter.test_highpass(self)
scipy.signal.tests.test_filter_design.TestButtord
scipy.signal.tests.test_filter_design.TestButtord.test_analog(self)
scipy.signal.tests.test_filter_design.TestButtord.test_bandpass(self)
scipy.signal.tests.test_filter_design.TestButtord.test_bandstop(self)
scipy.signal.tests.test_filter_design.TestButtord.test_fs_param(self)
scipy.signal.tests.test_filter_design.TestButtord.test_highpass(self)
scipy.signal.tests.test_filter_design.TestButtord.test_invalid_input(self)
scipy.signal.tests.test_filter_design.TestButtord.test_lowpass(self)
scipy.signal.tests.test_filter_design.TestButtord.test_runtime_warnings(self)
scipy.signal.tests.test_filter_design.TestCheb1ord
scipy.signal.tests.test_filter_design.TestCheb1ord.test_analog(self)
scipy.signal.tests.test_filter_design.TestCheb1ord.test_bandpass(self)
scipy.signal.tests.test_filter_design.TestCheb1ord.test_bandstop(self)
scipy.signal.tests.test_filter_design.TestCheb1ord.test_fs_param(self)
scipy.signal.tests.test_filter_design.TestCheb1ord.test_highpass(self)
scipy.signal.tests.test_filter_design.TestCheb1ord.test_invalid_input(self)
scipy.signal.tests.test_filter_design.TestCheb1ord.test_lowpass(self)
scipy.signal.tests.test_filter_design.TestCheb2ord
scipy.signal.tests.test_filter_design.TestCheb2ord.test_analog(self)
scipy.signal.tests.test_filter_design.TestCheb2ord.test_bandpass(self)
scipy.signal.tests.test_filter_design.TestCheb2ord.test_bandstop(self)
scipy.signal.tests.test_filter_design.TestCheb2ord.test_fs_param(self)
scipy.signal.tests.test_filter_design.TestCheb2ord.test_highpass(self)
scipy.signal.tests.test_filter_design.TestCheb2ord.test_invalid_input(self)
scipy.signal.tests.test_filter_design.TestCheb2ord.test_lowpass(self)
scipy.signal.tests.test_filter_design.TestCheby1
scipy.signal.tests.test_filter_design.TestCheby1.test_ba_output(self)
scipy.signal.tests.test_filter_design.TestCheby1.test_bandpass(self)
scipy.signal.tests.test_filter_design.TestCheby1.test_bandstop(self)
scipy.signal.tests.test_filter_design.TestCheby1.test_basic(self)
scipy.signal.tests.test_filter_design.TestCheby1.test_degenerate(self)
scipy.signal.tests.test_filter_design.TestCheby1.test_fs_param(self)
scipy.signal.tests.test_filter_design.TestCheby1.test_highpass(self)
scipy.signal.tests.test_filter_design.TestCheby2
scipy.signal.tests.test_filter_design.TestCheby2.test_ba_output(self)
scipy.signal.tests.test_filter_design.TestCheby2.test_bandpass(self)
scipy.signal.tests.test_filter_design.TestCheby2.test_bandstop(self)
scipy.signal.tests.test_filter_design.TestCheby2.test_basic(self)
scipy.signal.tests.test_filter_design.TestCheby2.test_degenerate(self)
scipy.signal.tests.test_filter_design.TestCheby2.test_fs_param(self)
scipy.signal.tests.test_filter_design.TestCheby2.test_highpass(self)
scipy.signal.tests.test_filter_design.TestCplxPair
scipy.signal.tests.test_filter_design.TestCplxPair.test_output_order(self)
scipy.signal.tests.test_filter_design.TestCplxPair.test_real_integer_input(self)
scipy.signal.tests.test_filter_design.TestCplxPair.test_tolerances(self)
scipy.signal.tests.test_filter_design.TestCplxPair.test_trivial_input(self)
scipy.signal.tests.test_filter_design.TestCplxPair.test_unmatched_conjugates(self)
scipy.signal.tests.test_filter_design.TestCplxReal
scipy.signal.tests.test_filter_design.TestCplxReal.test_output_order(self)
scipy.signal.tests.test_filter_design.TestCplxReal.test_real_integer_input(self)
scipy.signal.tests.test_filter_design.TestCplxReal.test_trivial_input(self)
scipy.signal.tests.test_filter_design.TestCplxReal.test_unmatched_conjugates(self)
scipy.signal.tests.test_filter_design.TestEllip
scipy.signal.tests.test_filter_design.TestEllip.test_ba_output(self)
scipy.signal.tests.test_filter_design.TestEllip.test_bandpass(self)
scipy.signal.tests.test_filter_design.TestEllip.test_bandstop(self)
scipy.signal.tests.test_filter_design.TestEllip.test_basic(self)
scipy.signal.tests.test_filter_design.TestEllip.test_degenerate(self)
scipy.signal.tests.test_filter_design.TestEllip.test_fs_param(self)
scipy.signal.tests.test_filter_design.TestEllip.test_highpass(self)
scipy.signal.tests.test_filter_design.TestEllipord
scipy.signal.tests.test_filter_design.TestEllipord.test_analog(self)
scipy.signal.tests.test_filter_design.TestEllipord.test_bandpass(self)
scipy.signal.tests.test_filter_design.TestEllipord.test_bandstop(self)
scipy.signal.tests.test_filter_design.TestEllipord.test_fs_param(self)
scipy.signal.tests.test_filter_design.TestEllipord.test_highpass(self)
scipy.signal.tests.test_filter_design.TestEllipord.test_invalid_input(self)
scipy.signal.tests.test_filter_design.TestEllipord.test_lowpass(self)
scipy.signal.tests.test_filter_design.TestEllipord.test_lowpass_1000dB(self)
scipy.signal.tests.test_filter_design.TestFreqs
scipy.signal.tests.test_filter_design.TestFreqs.test_backward_compat(self)
scipy.signal.tests.test_filter_design.TestFreqs.test_basic(self)
scipy.signal.tests.test_filter_design.TestFreqs.test_freq_range(self)
scipy.signal.tests.test_filter_design.TestFreqs.test_output(self)
scipy.signal.tests.test_filter_design.TestFreqs.test_plot(self)
scipy.signal.tests.test_filter_design.TestFreqs.test_w_or_N_types(self)
scipy.signal.tests.test_filter_design.TestFreqs_zpk
scipy.signal.tests.test_filter_design.TestFreqs_zpk.test_backward_compat(self)
scipy.signal.tests.test_filter_design.TestFreqs_zpk.test_basic(self)
scipy.signal.tests.test_filter_design.TestFreqs_zpk.test_freq_range(self)
scipy.signal.tests.test_filter_design.TestFreqs_zpk.test_output(self)
scipy.signal.tests.test_filter_design.TestFreqs_zpk.test_vs_freqs(self)
scipy.signal.tests.test_filter_design.TestFreqs_zpk.test_w_or_N_types(self)
scipy.signal.tests.test_filter_design.TestFreqz
scipy.signal.tests.test_filter_design.TestFreqz.test_backward_compat(self)
scipy.signal.tests.test_filter_design.TestFreqz.test_basic(self)
scipy.signal.tests.test_filter_design.TestFreqz.test_basic_whole(self)
scipy.signal.tests.test_filter_design.TestFreqz.test_broadcasting1(self)
scipy.signal.tests.test_filter_design.TestFreqz.test_broadcasting2(self)
scipy.signal.tests.test_filter_design.TestFreqz.test_broadcasting3(self)
scipy.signal.tests.test_filter_design.TestFreqz.test_broadcasting4(self)
scipy.signal.tests.test_filter_design.TestFreqz.test_fft_wrapping(self)
scipy.signal.tests.test_filter_design.TestFreqz.test_fs_param(self)
scipy.signal.tests.test_filter_design.TestFreqz.test_nyquist(self)
scipy.signal.tests.test_filter_design.TestFreqz.test_plot(self)
scipy.signal.tests.test_filter_design.TestFreqz.test_ticket1441(self)
scipy.signal.tests.test_filter_design.TestFreqz.test_w_or_N_types(self)
scipy.signal.tests.test_filter_design.TestFreqz_zpk
scipy.signal.tests.test_filter_design.TestFreqz_zpk.test_backward_compat(self)
scipy.signal.tests.test_filter_design.TestFreqz_zpk.test_basic(self)
scipy.signal.tests.test_filter_design.TestFreqz_zpk.test_basic_whole(self)
scipy.signal.tests.test_filter_design.TestFreqz_zpk.test_fs_param(self)
scipy.signal.tests.test_filter_design.TestFreqz_zpk.test_ticket1441(self)
scipy.signal.tests.test_filter_design.TestFreqz_zpk.test_vs_freqz(self)
scipy.signal.tests.test_filter_design.TestFreqz_zpk.test_w_or_N_types(self)
scipy.signal.tests.test_filter_design.TestGammatone
scipy.signal.tests.test_filter_design.TestGammatone.test_fir_ba_output(self)
scipy.signal.tests.test_filter_design.TestGammatone.test_frequency_response(self)
scipy.signal.tests.test_filter_design.TestGammatone.test_iir_ba_output(self)
scipy.signal.tests.test_filter_design.TestGammatone.test_iir_symmetry(self)
scipy.signal.tests.test_filter_design.TestGammatone.test_invalid_input(self)
scipy.signal.tests.test_filter_design.TestGroupDelay
scipy.signal.tests.test_filter_design.TestGroupDelay.test_backward_compat(self)
scipy.signal.tests.test_filter_design.TestGroupDelay.test_fir(self)
scipy.signal.tests.test_filter_design.TestGroupDelay.test_fs_param(self)
scipy.signal.tests.test_filter_design.TestGroupDelay.test_identity_filter(self)
scipy.signal.tests.test_filter_design.TestGroupDelay.test_iir(self)
scipy.signal.tests.test_filter_design.TestGroupDelay.test_singular(self)
scipy.signal.tests.test_filter_design.TestGroupDelay.test_w_or_N_types(self)
scipy.signal.tests.test_filter_design.TestIIRComb
scipy.signal.tests.test_filter_design.TestIIRComb.test_ba_output(self)
scipy.signal.tests.test_filter_design.TestIIRComb.test_frequency_response(self,ftype)
scipy.signal.tests.test_filter_design.TestIIRComb.test_iir_symmetry(self)
scipy.signal.tests.test_filter_design.TestIIRComb.test_invalid_input(self)
scipy.signal.tests.test_filter_design.TestIIRComb.test_nearest_divisor(self)
scipy.signal.tests.test_filter_design.TestIIRComb.test_pass_zero(self,ftype,pass_zero,peak,notch)
scipy.signal.tests.test_filter_design.TestIIRDesign
scipy.signal.tests.test_filter_design.TestIIRDesign.test_exceptions(self)
scipy.signal.tests.test_filter_design.TestIIRFilter
scipy.signal.tests.test_filter_design.TestIIRFilter.test_analog_sos(self)
scipy.signal.tests.test_filter_design.TestIIRFilter.test_int_inputs(self)
scipy.signal.tests.test_filter_design.TestIIRFilter.test_invalid_wn_range(self)
scipy.signal.tests.test_filter_design.TestIIRFilter.test_invalid_wn_size(self)
scipy.signal.tests.test_filter_design.TestIIRFilter.test_symmetry(self)
scipy.signal.tests.test_filter_design.TestIIRFilter.test_wn1_ge_wn0(self)
scipy.signal.tests.test_filter_design.TestIIRNotch
scipy.signal.tests.test_filter_design.TestIIRNotch.test_ba_output(self)
scipy.signal.tests.test_filter_design.TestIIRNotch.test_errors(self)
scipy.signal.tests.test_filter_design.TestIIRNotch.test_frequency_response(self)
scipy.signal.tests.test_filter_design.TestIIRNotch.test_fs_param(self)
scipy.signal.tests.test_filter_design.TestIIRPeak
scipy.signal.tests.test_filter_design.TestIIRPeak.test_ba_output(self)
scipy.signal.tests.test_filter_design.TestIIRPeak.test_errors(self)
scipy.signal.tests.test_filter_design.TestIIRPeak.test_frequency_response(self)
scipy.signal.tests.test_filter_design.TestIIRPeak.test_fs_param(self)
scipy.signal.tests.test_filter_design.TestLp2bp
scipy.signal.tests.test_filter_design.TestLp2bp.test_basic(self)
scipy.signal.tests.test_filter_design.TestLp2bp_zpk
scipy.signal.tests.test_filter_design.TestLp2bp_zpk.test_basic(self)
scipy.signal.tests.test_filter_design.TestLp2bs
scipy.signal.tests.test_filter_design.TestLp2bs.test_basic(self)
scipy.signal.tests.test_filter_design.TestLp2bs_zpk
scipy.signal.tests.test_filter_design.TestLp2bs_zpk.test_basic(self)
scipy.signal.tests.test_filter_design.TestLp2hp
scipy.signal.tests.test_filter_design.TestLp2hp.test_basic(self)
scipy.signal.tests.test_filter_design.TestLp2hp_zpk
scipy.signal.tests.test_filter_design.TestLp2hp_zpk.test_basic(self)
scipy.signal.tests.test_filter_design.TestLp2lp
scipy.signal.tests.test_filter_design.TestLp2lp.test_basic(self)
scipy.signal.tests.test_filter_design.TestLp2lp_zpk
scipy.signal.tests.test_filter_design.TestLp2lp_zpk.test_basic(self)
scipy.signal.tests.test_filter_design.TestNormalize
scipy.signal.tests.test_filter_design.TestNormalize.test_allclose(self)
scipy.signal.tests.test_filter_design.TestNormalize.test_errors(self)
scipy.signal.tests.test_filter_design.TestPrototypeType
scipy.signal.tests.test_filter_design.TestPrototypeType.test_output_type(self)
scipy.signal.tests.test_filter_design.TestSOSFreqz
scipy.signal.tests.test_filter_design.TestSOSFreqz.test_fs_param(self)
scipy.signal.tests.test_filter_design.TestSOSFreqz.test_sos_freqz_against_mp(self)
scipy.signal.tests.test_filter_design.TestSOSFreqz.test_sosfreqz_basic(self)
scipy.signal.tests.test_filter_design.TestSOSFreqz.test_sosfreqz_design_ellip(self)
scipy.signal.tests.test_filter_design.TestSOSFreqz.test_sosfrez_design(self)
scipy.signal.tests.test_filter_design.TestSOSFreqz.test_w_or_N_types(self)
scipy.signal.tests.test_filter_design.TestSos2Tf
scipy.signal.tests.test_filter_design.TestSos2Tf.test_basic(self)
scipy.signal.tests.test_filter_design.TestSos2Zpk
scipy.signal.tests.test_filter_design.TestSos2Zpk.test_basic(self)
scipy.signal.tests.test_filter_design.TestSos2Zpk.test_fewer_zeros(self)
scipy.signal.tests.test_filter_design.TestTf2Sos
scipy.signal.tests.test_filter_design.TestTf2Sos.test_analog(self,b,a,analog,sos)
scipy.signal.tests.test_filter_design.TestTf2Sos.test_basic(self)
scipy.signal.tests.test_filter_design.TestTf2zpk
scipy.signal.tests.test_filter_design.TestTf2zpk.test_bad_filter(self)
scipy.signal.tests.test_filter_design.TestTf2zpk.test_simple(self,dt)
scipy.signal.tests.test_filter_design.TestZpk2Sos
scipy.signal.tests.test_filter_design.TestZpk2Sos.test_analog(self,p,sos_dt)
scipy.signal.tests.test_filter_design.TestZpk2Sos.test_bad_args(self)
scipy.signal.tests.test_filter_design.TestZpk2Sos.test_basic(self)
scipy.signal.tests.test_filter_design.TestZpk2Sos.test_dtypes(self,dt,pairing,analog)
scipy.signal.tests.test_filter_design.TestZpk2Sos.test_pairing(self,pairing,sos)
scipy.signal.tests.test_filter_design.TestZpk2Tf
scipy.signal.tests.test_filter_design.TestZpk2Tf.test_identity(self)
scipy.signal.tests.test_filter_design.dB(x)
scipy.signal.tests.test_filter_design.mpmath_check(min_ver)
scipy.signal.tests.test_filter_design.test_sos_consistency()
scipy.signal.tests.testdB(x)
scipy.signal.tests.testmpmath_check(min_ver)
scipy.signal.tests.testtest_sos_consistency()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/tests/test_cont2discrete.py----------------------------------------
A:scipy.signal.tests.test_cont2discrete.ac->numpy.eye(2)
A:scipy.signal.tests.test_cont2discrete.bc->numpy.full((2, 1), 0.5)
A:scipy.signal.tests.test_cont2discrete.cc->numpy.array([[0.75, 1.0], [1.0, 1.0], [1.0, 0.25]])
A:scipy.signal.tests.test_cont2discrete.dc->numpy.array([[0.0], [0.0], [-0.33]])
A:scipy.signal.tests.test_cont2discrete.bd_truth->numpy.full((2, 1), 0.2)
A:scipy.signal.tests.test_cont2discrete.(ad, bd, cd, dd, dt)->c2d((ac, bc, cc, dc), dt_requested, method='bilinear')
A:scipy.signal.tests.test_cont2discrete.dd_truth->numpy.array([[0.175], [0.2], [-0.205]])
A:scipy.signal.tests.test_cont2discrete.cd_truth->numpy.array([[0.9, 1.2], [1.2, 1.2], [1.2, 0.3]])
A:scipy.signal.tests.test_cont2discrete.numc->numpy.array([0.25, 0.25, 0.5])
A:scipy.signal.tests.test_cont2discrete.denc->numpy.array([0.75, 0.75, 1.0])
A:scipy.signal.tests.test_cont2discrete.numd->numpy.array([[1.0 / 3.0, -0.427419169438754, 0.221654141101125]])
A:scipy.signal.tests.test_cont2discrete.dend->numpy.array([1.0, -1.351394049721225, 0.606530659712634])
A:scipy.signal.tests.test_cont2discrete.(num, den, dt)->c2d(tf, ts)
A:scipy.signal.tests.test_cont2discrete.zeros_c->numpy.array([0.5, -0.5])
A:scipy.signal.tests.test_cont2discrete.poles_c->numpy.array([1j / np.sqrt(2), -1j / np.sqrt(2)])
A:scipy.signal.tests.test_cont2discrete.(zeros, poles, k, dt)->c2d((zeros_c, poles_c, k_c), dt_requested, method='zoh')
A:scipy.signal.tests.test_cont2discrete.(cnum, cden)->ss2tf(A, B, C, D)
A:scipy.signal.tests.test_cont2discrete.(cz, cp, ck)->ss2zpk(A, B, C, D)
A:scipy.signal.tests.test_cont2discrete.(dnum, dden)->ss2tf(Ad, Bd, Cd, Dd)
A:scipy.signal.tests.test_cont2discrete.(c2dnum, c2dden, dt)->c2d((cnum, cden), h, method='gbt', alpha=alpha)
A:scipy.signal.tests.test_cont2discrete.(dz, dp, dk)->ss2zpk(Ad, Bd, Cd, Dd)
A:scipy.signal.tests.test_cont2discrete.(c2dz, c2dp, c2dk, dt)->c2d((cz, cp, ck), h, method='gbt', alpha=alpha)
A:scipy.signal.tests.test_cont2discrete.a->numpy.array([[-0.01]])
A:scipy.signal.tests.test_cont2discrete.b->numpy.array([[1.0]])
A:scipy.signal.tests.test_cont2discrete.c->numpy.array([[1.0]])
A:scipy.signal.tests.test_cont2discrete.d->numpy.array([[0.2]])
A:scipy.signal.tests.test_cont2discrete.t->numpy.linspace(0, 10.0, 101)
A:scipy.signal.tests.test_cont2discrete.u1->u(t)
A:scipy.signal.tests.test_cont2discrete.(t, yout, xout)->lsim2((a, b, c, d), T=t, U=u1, X0=x0, rtol=1e-09, atol=1e-11)
A:scipy.signal.tests.test_cont2discrete.dsys->c2d((a, b, c, d), dt, method='bilinear')
A:scipy.signal.tests.test_cont2discrete.(td2, yd2, xd2)->dlsim(dsys, u=u2.reshape(-1, 1), t=t2, x0=x0)
A:scipy.signal.tests.test_cont2discrete.(num1, den1, dt1)->c2d(tf1, ts)
A:scipy.signal.tests.test_cont2discrete.(num2, den2, dt2)->c2d(tf2, ts)
A:scipy.signal.tests.test_cont2discrete.A->numpy.array([[-0.3, 0.1], [0.2, -0.7]])
A:scipy.signal.tests.test_cont2discrete.B->numpy.array([[0], [1]])
A:scipy.signal.tests.test_cont2discrete.C->numpy.array([[1, 0]])
A:scipy.signal.tests.test_cont2discrete.A_res->numpy.array([[0.985136404135682, 0.004876671474795], [0.00975334294959, 0.965629718236502]])
A:scipy.signal.tests.test_cont2discrete.B_res->numpy.array([[0.000122937599964], [0.049135527547844]])
A:scipy.signal.tests.test_cont2discrete.sys_ssc->lti(A, B, C, D)
A:scipy.signal.tests.test_cont2discrete.sys_ssd->lti(A, B, C, D).to_discrete(0.05)
A:scipy.signal.tests.test_cont2discrete.sys->sys.to_discrete(0.005).to_discrete(0.005)
A:scipy.signal.tests.test_cont2discrete.num_res->numpy.array([0.5, -0.485149004980066])
A:scipy.signal.tests.test_cont2discrete.den_res->numpy.array([1.0, -0.980198673306755])
A:scipy.signal.tests.test_cont2discrete.(_, yout_cont)->step2(sys, T=time, **self.tolerances)
A:scipy.signal.tests.test_cont2discrete.(_, yout_disc)->dstep(c2d(sys, sample_time, method='zoh'), n=len(time))
A:scipy.signal.tests.test_cont2discrete.(_, yout_cont, _)->lsim2(sys, T=time, U=time, **self.tolerances)
A:scipy.signal.tests.test_cont2discrete.(_, yout_disc, _)->dlsim(c2d(sys, sample_time, method='foh'), u=time)
scipy.signal.tests.test_cont2discrete.TestC2D
scipy.signal.tests.test_cont2discrete.TestC2D.test_backward_diff(self)
scipy.signal.tests.test_cont2discrete.TestC2D.test_bilinear(self)
scipy.signal.tests.test_cont2discrete.TestC2D.test_discrete_approx(self)
scipy.signal.tests.test_cont2discrete.TestC2D.test_euler(self)
scipy.signal.tests.test_cont2discrete.TestC2D.test_foh(self)
scipy.signal.tests.test_cont2discrete.TestC2D.test_gbt(self)
scipy.signal.tests.test_cont2discrete.TestC2D.test_gbt_with_sio_tf_and_zpk(self)
scipy.signal.tests.test_cont2discrete.TestC2D.test_impulse(self)
scipy.signal.tests.test_cont2discrete.TestC2D.test_multioutput(self)
scipy.signal.tests.test_cont2discrete.TestC2D.test_simo_tf(self)
scipy.signal.tests.test_cont2discrete.TestC2D.test_transferfunction(self)
scipy.signal.tests.test_cont2discrete.TestC2D.test_zerospolesgain(self)
scipy.signal.tests.test_cont2discrete.TestC2D.test_zoh(self)
scipy.signal.tests.test_cont2discrete.TestC2dInvariants
scipy.signal.tests.test_cont2discrete.TestC2dInvariants.test_impulse_invariant(self,sys,sample_time,samples_number)
scipy.signal.tests.test_cont2discrete.TestC2dInvariants.test_linear_invariant(self,sys,sample_time,samples_number)
scipy.signal.tests.test_cont2discrete.TestC2dInvariants.test_step_invariant(self,sys,sample_time,samples_number)
scipy.signal.tests.test_cont2discrete.TestC2dLti
scipy.signal.tests.test_cont2discrete.TestC2dLti.test_c2d_ss(self)
scipy.signal.tests.test_cont2discrete.TestC2dLti.test_c2d_tf(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/tests/test_fir_filter_design.py----------------------------------------
A:scipy.signal.tests.test_fir_filter_design.b->kaiser_beta(10.0)
A:scipy.signal.tests.test_fir_filter_design.a->kaiser_atten(2, 1 / np.pi)
A:scipy.signal.tests.test_fir_filter_design.(numtaps, beta)->kaiserord(2.285 + 7.95 - 0.001, 1 / np.pi)
A:scipy.signal.tests.test_fir_filter_design.N->len(h)
A:scipy.signal.tests.test_fir_filter_design.actual->abs(np.sum(h * np.exp(-1j * np.pi * m * freq)))
A:scipy.signal.tests.test_fir_filter_design.h->remez(21, [0, 0.8, 0.9, 1], [0, 1], fs=2.0)
A:scipy.signal.tests.test_fir_filter_design.(w, H)->freqz(h, 1)
A:scipy.signal.tests.test_fir_filter_design.passIndicator->numpy.zeros(len(w), bool)
A:scipy.signal.tests.test_fir_filter_design.Hideal->numpy.where(passIndicator, 1, 0)
A:scipy.signal.tests.test_fir_filter_design.mse->numpy.mean(abs(abs(H) - Hideal) ** 2)
A:scipy.signal.tests.test_fir_filter_design.hs->firwin(N, cutoff, scale=True, pass_zero=pass_zero, window='ones')
A:scipy.signal.tests.test_fir_filter_design.(ntaps, beta)->kaiserord(120, width)
A:scipy.signal.tests.test_fir_filter_design.kwargs->dict(cutoff=[0.2, 0.5, 0.8], window=('kaiser', beta), scale=False)
A:scipy.signal.tests.test_fir_filter_design.taps->firls(7, (0, 1, 2, 3, 4, 5), [1, 0, 0, 1, 1, 0], nyq=10)
A:scipy.signal.tests.test_fir_filter_design.freq_samples->numpy.array([0.0, 0.4 - width, 0.4 + width, 0.45, 0.5 - width, 0.5 + width, 0.75, 1.0])
A:scipy.signal.tests.test_fir_filter_design.(freqs, response)->freqz(taps, worN=2048)
A:scipy.signal.tests.test_fir_filter_design.taps_str->firwin(ntaps, pass_zero='bandstop', **kwargs)
A:scipy.signal.tests.test_fir_filter_design.taps2->firwin2(150, [0.0, 0.5, 0.5, 1.0], [1.0, 1.0, 0.0, 0.0])
A:scipy.signal.tests.test_fir_filter_design.(freqs, response1)->freqz(taps, worN=2048)
A:scipy.signal.tests.test_fir_filter_design.response2->numpy.interp(freqs / np.pi, freq, gain)
A:scipy.signal.tests.test_fir_filter_design.taps1->firwin2(150, (0.0, 0.5, 0.5, 1.0), (1.0, 1.0, 0.0, 0.0))
A:scipy.signal.tests.test_fir_filter_design.freq1->numpy.array([0.0, 0.5, 0.5, 1.0])
A:scipy.signal.tests.test_fir_filter_design.freq2->numpy.array(freq1)
A:scipy.signal.tests.test_fir_filter_design.Hmag->numpy.abs(H)
A:scipy.signal.tests.test_fir_filter_design.idx->numpy.logical_and(f > 0.5 - a, f < 0.5)
A:scipy.signal.tests.test_fir_filter_design.hodd->numpy.hstack((h[1:midx:2], h[-midx + 1::2]))
A:scipy.signal.tests.test_fir_filter_design.x->firls(101, [0, 0.01, 0.99, 1], [1, 1, 0, 0])
A:scipy.signal.tests.test_fir_filter_design.(w, h)->freqz(x, fs=2.0)
A:scipy.signal.tests.test_fir_filter_design.h_new->minimum_phase(np.convolve(h, h[::-1]))
A:scipy.signal.tests.test_fir_filter_design.rng->numpy.random.RandomState(0)
A:scipy.signal.tests.test_fir_filter_design.m->minimum_phase(h, 'hilbert', n_fft=2 ** 19)
scipy.signal.tests.testTestFirWinMore
scipy.signal.tests.testTestFirWinMore.test_bad_cutoff(self)
scipy.signal.tests.testTestFirWinMore.test_bad_pass_zero(self)
scipy.signal.tests.testTestFirWinMore.test_bandpass(self)
scipy.signal.tests.testTestFirWinMore.test_bandstop_multi(self)
scipy.signal.tests.testTestFirWinMore.test_even_highpass_raises_value_error(self)
scipy.signal.tests.testTestFirWinMore.test_fs_nyq(self)
scipy.signal.tests.testTestFirWinMore.test_highpass(self)
scipy.signal.tests.testTestFirWinMore.test_lowpass(self)
scipy.signal.tests.testTestFirWinMore.test_nyq_deprecation(self)
scipy.signal.tests.testTestFirls
scipy.signal.tests.testTestFirls.test_bad_args(self)
scipy.signal.tests.testTestFirls.test_compare(self)
scipy.signal.tests.testTestFirls.test_firls(self)
scipy.signal.tests.testTestFirls.test_nyq_deprecation(self)
scipy.signal.tests.testTestFirls.test_rank_deficient(self)
scipy.signal.tests.testTestFirwin
scipy.signal.tests.testTestFirwin.check_response(self,h,expected_response,tol=0.05)
scipy.signal.tests.testTestFirwin.mse(self,h,bands)
scipy.signal.tests.testTestFirwin.test_response(self)
scipy.signal.tests.testTestFirwin.test_scaling(self)
scipy.signal.tests.testTestFirwin2
scipy.signal.tests.testTestFirwin2.test01(self)
scipy.signal.tests.testTestFirwin2.test02(self)
scipy.signal.tests.testTestFirwin2.test03(self)
scipy.signal.tests.testTestFirwin2.test04(self)
scipy.signal.tests.testTestFirwin2.test05(self)
scipy.signal.tests.testTestFirwin2.test06(self)
scipy.signal.tests.testTestFirwin2.test_fs_nyq(self)
scipy.signal.tests.testTestFirwin2.test_input_modyfication(self)
scipy.signal.tests.testTestFirwin2.test_invalid_args(self)
scipy.signal.tests.testTestFirwin2.test_nyq_deprecation(self)
scipy.signal.tests.testTestFirwin2.test_tuple(self)
scipy.signal.tests.testTestMinimumPhase
scipy.signal.tests.testTestMinimumPhase.test_bad_args(self)
scipy.signal.tests.testTestMinimumPhase.test_hilbert(self)
scipy.signal.tests.testTestMinimumPhase.test_homomorphic(self)
scipy.signal.tests.testTestRemez
scipy.signal.tests.testTestRemez.test_Hz_deprecation(self)
scipy.signal.tests.testTestRemez.test_bad_args(self)
scipy.signal.tests.testTestRemez.test_compare(self)
scipy.signal.tests.testTestRemez.test_hilbert(self)
scipy.signal.tests.test_fir_filter_design.TestFirWinMore
scipy.signal.tests.test_fir_filter_design.TestFirWinMore.test_bad_cutoff(self)
scipy.signal.tests.test_fir_filter_design.TestFirWinMore.test_bad_pass_zero(self)
scipy.signal.tests.test_fir_filter_design.TestFirWinMore.test_bandpass(self)
scipy.signal.tests.test_fir_filter_design.TestFirWinMore.test_bandstop_multi(self)
scipy.signal.tests.test_fir_filter_design.TestFirWinMore.test_even_highpass_raises_value_error(self)
scipy.signal.tests.test_fir_filter_design.TestFirWinMore.test_fs_nyq(self)
scipy.signal.tests.test_fir_filter_design.TestFirWinMore.test_highpass(self)
scipy.signal.tests.test_fir_filter_design.TestFirWinMore.test_lowpass(self)
scipy.signal.tests.test_fir_filter_design.TestFirWinMore.test_nyq_deprecation(self)
scipy.signal.tests.test_fir_filter_design.TestFirls
scipy.signal.tests.test_fir_filter_design.TestFirls.test_bad_args(self)
scipy.signal.tests.test_fir_filter_design.TestFirls.test_compare(self)
scipy.signal.tests.test_fir_filter_design.TestFirls.test_firls(self)
scipy.signal.tests.test_fir_filter_design.TestFirls.test_nyq_deprecation(self)
scipy.signal.tests.test_fir_filter_design.TestFirls.test_rank_deficient(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin
scipy.signal.tests.test_fir_filter_design.TestFirwin.check_response(self,h,expected_response,tol=0.05)
scipy.signal.tests.test_fir_filter_design.TestFirwin.mse(self,h,bands)
scipy.signal.tests.test_fir_filter_design.TestFirwin.test_response(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin.test_scaling(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin2
scipy.signal.tests.test_fir_filter_design.TestFirwin2.test01(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin2.test02(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin2.test03(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin2.test04(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin2.test05(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin2.test06(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin2.test_fs_nyq(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin2.test_input_modyfication(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin2.test_invalid_args(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin2.test_nyq_deprecation(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin2.test_tuple(self)
scipy.signal.tests.test_fir_filter_design.TestMinimumPhase
scipy.signal.tests.test_fir_filter_design.TestMinimumPhase.test_bad_args(self)
scipy.signal.tests.test_fir_filter_design.TestMinimumPhase.test_hilbert(self)
scipy.signal.tests.test_fir_filter_design.TestMinimumPhase.test_homomorphic(self)
scipy.signal.tests.test_fir_filter_design.TestRemez
scipy.signal.tests.test_fir_filter_design.TestRemez.test_Hz_deprecation(self)
scipy.signal.tests.test_fir_filter_design.TestRemez.test_bad_args(self)
scipy.signal.tests.test_fir_filter_design.TestRemez.test_compare(self)
scipy.signal.tests.test_fir_filter_design.TestRemez.test_hilbert(self)
scipy.signal.tests.test_fir_filter_design.test_kaiser_atten()
scipy.signal.tests.test_fir_filter_design.test_kaiser_beta()
scipy.signal.tests.test_fir_filter_design.test_kaiserord()
scipy.signal.tests.testtest_kaiser_atten()
scipy.signal.tests.testtest_kaiser_beta()
scipy.signal.tests.testtest_kaiserord()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/tests/test_dltisys.py----------------------------------------
A:scipy.signal.tests.test_dltisys.a->numpy.array([[lambda1, 0.0], [0.0, lambda2]])
A:scipy.signal.tests.test_dltisys.b->numpy.array([[1.0, 0.0], [0.0, 1.0]])
A:scipy.signal.tests.test_dltisys.c->numpy.array([[1.0, 1.0]])
A:scipy.signal.tests.test_dltisys.d->numpy.array([[0.0, 0.0]])
A:scipy.signal.tests.test_dltisys.u->numpy.zeros(n).reshape(-1, 1)
A:scipy.signal.tests.test_dltisys.t_in->numpy.linspace(0, 2.0, num=5)
A:scipy.signal.tests.test_dltisys.xout_truth->numpy.asarray([[0, 0], [0.0012, 0.0005], [0.40233, 0.00071], [1.163368, -0.079327], [2.2402985, -0.3035679]])
A:scipy.signal.tests.test_dltisys.(tout, yout, xout)->dlsim((a, b, c, d, 1), u, x0=1)
A:scipy.signal.tests.test_dltisys.t_sparse->numpy.asarray([0.0, 2.0])
A:scipy.signal.tests.test_dltisys.num->numpy.asarray([1.0, -0.1])
A:scipy.signal.tests.test_dltisys.den->numpy.asarray([0.3, 1.0, 0.2])
A:scipy.signal.tests.test_dltisys.(tout, yout)->dimpulse(zpkin, n=3)
A:scipy.signal.tests.test_dltisys.uflat->uflat.reshape((5,)).reshape((5,))
A:scipy.signal.tests.test_dltisys.zd->numpy.array([0.5, -0.5])
A:scipy.signal.tests.test_dltisys.pd->numpy.array([1j / np.sqrt(2), -1j / np.sqrt(2)])
A:scipy.signal.tests.test_dltisys.system->lti([1], [1, 1])
A:scipy.signal.tests.test_dltisys.yout_tfstep->numpy.asarray([0.0, 1.0, 0.0])
A:scipy.signal.tests.test_dltisys.yout_tfimpulse->numpy.asarray([0.0, 1.0, -1.0])
A:scipy.signal.tests.test_dltisys.expected->(0.5 ** np.arange(float(n))).reshape(-1, 1)
A:scipy.signal.tests.test_dltisys.(ts, ys)->dstep((a, b, c, d, 1), n=n)
A:scipy.signal.tests.test_dltisys.x0->numpy.array([1.0, 1.0])
A:scipy.signal.tests.test_dltisys.(ti, yi)->dimpulse((a, b, c, d, 1), n=n, x0=x0)
A:scipy.signal.tests.test_dltisys.(t, (y,))->dimpulse(system, n=3)
A:scipy.signal.tests.test_dltisys.s->ZerosPolesGain(1, 2, 3, dt=0.05)
A:scipy.signal.tests.test_dltisys.(w, H)->dfreqresp(system, n=2)
A:scipy.signal.tests.test_dltisys.jw->numpy.exp(w * 1j)
A:scipy.signal.tests.test_dltisys.expected_w->numpy.linspace(0, np.pi, 10, endpoint=False)
A:scipy.signal.tests.test_dltisys.system_TF->dlti(0.3, [1, -0.2])
A:scipy.signal.tests.test_dltisys.A->numpy.array([[0.5, 0, 0], [1, 0, 0], [0, 1, 0]])
A:scipy.signal.tests.test_dltisys.C->numpy.array([[0, 0, 2]])
A:scipy.signal.tests.test_dltisys.system_SS->dlti(A, B, C, D)
A:scipy.signal.tests.test_dltisys.(w1, H1)->dfreqresp(system_ZPK, w=w)
A:scipy.signal.tests.test_dltisys.(w2, H2)->dfreqresp(system_TF, w=w)
A:scipy.signal.tests.test_dltisys.system_ZPK->dlti([], [0.2], 0.3)
A:scipy.signal.tests.test_dltisys.(w2, mag, phase)->dbode(system, w=w)
A:scipy.signal.tests.test_dltisys.w->numpy.array([0.1, 0.5, 1, np.pi])
A:scipy.signal.tests.test_dltisys.expected_phase->numpy.rad2deg(np.angle(y))
A:scipy.signal.tests.test_dltisys.(w, mag, phase)->dbode(system, n=2)
A:scipy.signal.tests.test_dltisys.(num2, den2)->scipy.signal.TransferFunction._zinv_to_z(num, den)
scipy.signal.tests.test_dltisys.TestDLTI
scipy.signal.tests.test_dltisys.TestDLTI.test_dimpulse(self)
scipy.signal.tests.test_dltisys.TestDLTI.test_dlsim(self)
scipy.signal.tests.test_dltisys.TestDLTI.test_dlsim_simple1d(self)
scipy.signal.tests.test_dltisys.TestDLTI.test_dlsim_simple2d(self)
scipy.signal.tests.test_dltisys.TestDLTI.test_dlsim_trivial(self)
scipy.signal.tests.test_dltisys.TestDLTI.test_dstep(self)
scipy.signal.tests.test_dltisys.TestDLTI.test_more_step_and_impulse(self)
scipy.signal.tests.test_dltisys.TestDlti
scipy.signal.tests.test_dltisys.TestDlti.test_dlti_instantiation(self)
scipy.signal.tests.test_dltisys.TestStateSpaceDisc
scipy.signal.tests.test_dltisys.TestStateSpaceDisc.test_conversion(self)
scipy.signal.tests.test_dltisys.TestStateSpaceDisc.test_initialization(self)
scipy.signal.tests.test_dltisys.TestStateSpaceDisc.test_properties(self)
scipy.signal.tests.test_dltisys.TestTransferFunction
scipy.signal.tests.test_dltisys.TestTransferFunction.test_conversion(self)
scipy.signal.tests.test_dltisys.TestTransferFunction.test_initialization(self)
scipy.signal.tests.test_dltisys.TestTransferFunction.test_properties(self)
scipy.signal.tests.test_dltisys.TestTransferFunctionZConversion
scipy.signal.tests.test_dltisys.TestTransferFunctionZConversion.test_denominator(self)
scipy.signal.tests.test_dltisys.TestTransferFunctionZConversion.test_full(self)
scipy.signal.tests.test_dltisys.TestTransferFunctionZConversion.test_numerator(self)
scipy.signal.tests.test_dltisys.TestZerosPolesGain
scipy.signal.tests.test_dltisys.TestZerosPolesGain.test_conversion(self)
scipy.signal.tests.test_dltisys.TestZerosPolesGain.test_initialization(self)
scipy.signal.tests.test_dltisys.Test_bode
scipy.signal.tests.test_dltisys.Test_bode.test_auto(self)
scipy.signal.tests.test_dltisys.Test_bode.test_error(self)
scipy.signal.tests.test_dltisys.Test_bode.test_imaginary(self)
scipy.signal.tests.test_dltisys.Test_bode.test_manual(self)
scipy.signal.tests.test_dltisys.Test_bode.test_pole_one(self)
scipy.signal.tests.test_dltisys.Test_bode.test_range(self)
scipy.signal.tests.test_dltisys.Test_dfreqresp
scipy.signal.tests.test_dltisys.Test_dfreqresp.test_auto(self)
scipy.signal.tests.test_dltisys.Test_dfreqresp.test_error(self)
scipy.signal.tests.test_dltisys.Test_dfreqresp.test_freq_range(self)
scipy.signal.tests.test_dltisys.Test_dfreqresp.test_from_state_space(self)
scipy.signal.tests.test_dltisys.Test_dfreqresp.test_from_zpk(self)
scipy.signal.tests.test_dltisys.Test_dfreqresp.test_manual(self)
scipy.signal.tests.test_dltisys.Test_dfreqresp.test_pole_one(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/tests/test_spectral.py----------------------------------------
A:scipy.signal.tests.test_spectral.x->numpy.fft.irfft(X)
A:scipy.signal.tests.test_spectral.(f, p)->csd(x, x, nperseg=8, return_onesided=False)
A:scipy.signal.tests.test_spectral.q->numpy.array([0.41666666, 0.38194442, 0.55555552, 0.55555552, 0.55555558, 0.55555552, 0.55555552, 0.38194442], 'f')
A:scipy.signal.tests.test_spectral.(g, q)->periodogram(x, scaling='density')
A:scipy.signal.tests.test_spectral.(f0, p0)->csd(x[:, 0, 0], x[:, 0, 0], nperseg=10)
A:scipy.signal.tests.test_spectral.win->scipy.signal.get_window(('tukey', 0.25), 16)
A:scipy.signal.tests.test_spectral.(fe, pe)->csd(x, x, 10, win, nperseg=None)
A:scipy.signal.tests.test_spectral.win_err->scipy.signal.get_window(('tukey', 0.25), 2048)
A:scipy.signal.tests.test_spectral.(fp, pp)->periodogram(x, nfft=32)
A:scipy.signal.tests.test_spectral.(f1, p1)->csd(x, x, window='hann', nperseg=256)
A:scipy.signal.tests.test_spectral.(f2, p2)->csd(x, x, nperseg=8)
A:scipy.signal.tests.test_spectral.(fodd, _)->csd(x, y, nperseg=5, nfft=nfft)
A:scipy.signal.tests.test_spectral.(feven, _)->csd(x, y, nperseg=6, nfft=nfft)
A:scipy.signal.tests.test_spectral.nperseg->int(fs // 10)
A:scipy.signal.tests.test_spectral.ii->int(fsig * nperseg // fs)
A:scipy.signal.tests.test_spectral.(_, p_spec)->welch(x, fs=fs, nperseg=nperseg, window=window, scaling='spectrum')
A:scipy.signal.tests.test_spectral.(freq, p_dens)->welch(x, fs=fs, nperseg=nperseg, window=window, scaling='density')
A:scipy.signal.tests.test_spectral.x_flat->numpy.random.randn(1024)
A:scipy.signal.tests.test_spectral.(_, p_flat)->welch(x_flat)
A:scipy.signal.tests.test_spectral.(_, p_plus)->welch(x, axis=a)
A:scipy.signal.tests.test_spectral.(_, p_minus)->welch(x, axis=a - x.ndim)
A:scipy.signal.tests.test_spectral.y->numpy.copy(x)
A:scipy.signal.tests.test_spectral.f->numpy.zeros(1)
A:scipy.signal.tests.test_spectral.c->numpy.zeros(7, dtype=np.complex128)
A:scipy.signal.tests.test_spectral.(f1, c1)->csd(x, y, nperseg=12)
A:scipy.signal.tests.test_spectral.(_, p_same)->csd(x, x, nperseg=8, average='median', return_onesided=False)
A:scipy.signal.tests.test_spectral.(_, p_copied)->csd(x, y, nperseg=8, average='median', return_onesided=False)
A:scipy.signal.tests.test_spectral.C->numpy.ones(6)
A:scipy.signal.tests.test_spectral.(f1, C1)->coherence(x, y, nperseg=10)
A:scipy.signal.tests.test_spectral.(f, _, P)->spectrogram(x, fs, window, nperseg, noverlap)
A:scipy.signal.tests.test_spectral.(fw, Pw)->welch(x, fs, window, nperseg, noverlap, return_onesided=False, scaling='spectrum', detrend=False)
A:scipy.signal.tests.test_spectral.(fe, _, Pe)->spectrogram(x, fs, win, nperseg=None, noverlap=2)
A:scipy.signal.tests.test_spectral.(f, _, p)->spectrogram(x, fs, window=('tukey', 0.25))
A:scipy.signal.tests.test_spectral.(f1, _, p1)->spectrogram(x, fs, window=('tukey', 0.25), nperseg=1025)
A:scipy.signal.tests.test_spectral.(f2, _, p2)->spectrogram(x, fs, nperseg=256)
A:scipy.signal.tests.test_spectral.(f3, _, p3)->spectrogram(x, fs, nperseg=1024)
A:scipy.signal.tests.test_spectral.r->numpy.random.rand(nin)
A:scipy.signal.tests.test_spectral.P->lombscargle(t, x, f)
A:scipy.signal.tests.test_spectral.pgram->lombscargle(t, x, f)
A:scipy.signal.tests.test_spectral.pgram2->lombscargle(t, x, f, normalize=True)
A:scipy.signal.tests.test_spectral.t->numpy.arange(N)
A:scipy.signal.tests.test_spectral.msg->'{0}, {1}'.format(window, noverlap)
A:scipy.signal.tests.test_spectral.w_fail->numpy.ones(16)
A:scipy.signal.tests.test_spectral.(f, _, Z)->stft(x, fs, window, nperseg, noverlap, padded=False, return_onesided=False, boundary=None)
A:scipy.signal.tests.test_spectral.(f1, t1, Z1)->stft(x, fs, window, nperseg, noverlap)
A:scipy.signal.tests.test_spectral.(f2, t2, Z2)->stft(x.reshape((-1, 1, 1)), fs, window, nperseg, noverlap, axis=0)
A:scipy.signal.tests.test_spectral.(t3, x1)->istft(Z1, fs, window, nperseg, noverlap)
A:scipy.signal.tests.test_spectral.(t4, x2)->istft(Z2.T, fs, window, nperseg, noverlap, time_axis=0, freq_axis=-1)
A:scipy.signal.tests.test_spectral.(_, _, zz)->stft(x, nperseg=nperseg, noverlap=noverlap, window=window, detrend=None, padded=True)
A:scipy.signal.tests.test_spectral.(tr, xr)->istft(z, nperseg=nperseg, noverlap=noverlap, nfft=nfft, window=window)
A:scipy.signal.tests.test_spectral.(_, xr)->istft(zz, noverlap=noverlap, window=window, boundary=False)
A:scipy.signal.tests.test_spectral.(_, _, zz_ext)->stft(x, nperseg=nperseg, noverlap=noverlap, window=window, detrend=None, padded=True, boundary=boundary)
A:scipy.signal.tests.test_spectral.(_, xr_ext)->istft(zz_ext, noverlap=noverlap, window=window, boundary=True)
A:scipy.signal.tests.test_spectral.(_, _, z)->stft(x, nperseg=nperseg, noverlap=noverlap, nfft=nfft, window=window, detrend=None, padded=True)
A:scipy.signal.tests.test_spectral.(_, _, zc)->stft(xc, nperseg=nperseg, noverlap=noverlap, nfft=nfft, window=window, detrend=None, padded=True, return_onesided=False)
A:scipy.signal.tests.test_spectral.(tr, xcr)->istft(zc, nperseg=nperseg, noverlap=noverlap, nfft=nfft, window=window, input_onesided=False)
A:scipy.signal.tests.test_spectral.(_, _, z_flat)->stft(x_flat)
A:scipy.signal.tests.test_spectral.(_, _, z_plus)->stft(x, axis=a)
A:scipy.signal.tests.test_spectral.(_, _, z_minus)->stft(x, axis=a - x.ndim)
A:scipy.signal.tests.test_spectral.(_, x_transpose_m)->istft(z_flat.T, time_axis=-2, freq_axis=-1)
A:scipy.signal.tests.test_spectral.(_, x_transpose_p)->istft(z_flat.T, time_axis=0, freq_axis=1)
A:scipy.signal.tests.test_spectral.X->numpy.zeros(513, dtype=complex)
A:scipy.signal.tests.test_spectral.Zp1->numpy.conj(Zp0[-2:0:-1, :])
scipy.signal.tests.test_spectral.TestCSD
scipy.signal.tests.test_spectral.TestCSD.test_bad_noverlap(self)
scipy.signal.tests.test_spectral.TestCSD.test_complex(self)
scipy.signal.tests.test_spectral.TestCSD.test_complex_32(self)
scipy.signal.tests.test_spectral.TestCSD.test_copied_data(self)
scipy.signal.tests.test_spectral.TestCSD.test_detrend_external(self)
scipy.signal.tests.test_spectral.TestCSD.test_detrend_external_nd_0(self)
scipy.signal.tests.test_spectral.TestCSD.test_detrend_external_nd_m1(self)
scipy.signal.tests.test_spectral.TestCSD.test_detrend_linear(self)
scipy.signal.tests.test_spectral.TestCSD.test_empty_input(self)
scipy.signal.tests.test_spectral.TestCSD.test_empty_input_other_axis(self)
scipy.signal.tests.test_spectral.TestCSD.test_integer_onesided_even(self)
scipy.signal.tests.test_spectral.TestCSD.test_integer_onesided_odd(self)
scipy.signal.tests.test_spectral.TestCSD.test_integer_twosided(self)
scipy.signal.tests.test_spectral.TestCSD.test_nd_axis_0(self)
scipy.signal.tests.test_spectral.TestCSD.test_nd_axis_m1(self)
scipy.signal.tests.test_spectral.TestCSD.test_nfft_too_short(self)
scipy.signal.tests.test_spectral.TestCSD.test_no_detrending(self)
scipy.signal.tests.test_spectral.TestCSD.test_nondefault_noverlap(self)
scipy.signal.tests.test_spectral.TestCSD.test_pad_shorter_x(self)
scipy.signal.tests.test_spectral.TestCSD.test_pad_shorter_y(self)
scipy.signal.tests.test_spectral.TestCSD.test_padded_freqs(self)
scipy.signal.tests.test_spectral.TestCSD.test_real_onesided_even(self)
scipy.signal.tests.test_spectral.TestCSD.test_real_onesided_even_32(self)
scipy.signal.tests.test_spectral.TestCSD.test_real_onesided_odd(self)
scipy.signal.tests.test_spectral.TestCSD.test_real_onesided_odd_32(self)
scipy.signal.tests.test_spectral.TestCSD.test_real_spectrum(self)
scipy.signal.tests.test_spectral.TestCSD.test_real_twosided(self)
scipy.signal.tests.test_spectral.TestCSD.test_real_twosided_32(self)
scipy.signal.tests.test_spectral.TestCSD.test_short_data(self)
scipy.signal.tests.test_spectral.TestCSD.test_unk_scaling(self)
scipy.signal.tests.test_spectral.TestCSD.test_window_external(self)
scipy.signal.tests.test_spectral.TestCSD.test_window_long_or_nd(self)
scipy.signal.tests.test_spectral.TestCoherence
scipy.signal.tests.test_spectral.TestCoherence.test_identical_input(self)
scipy.signal.tests.test_spectral.TestCoherence.test_phase_shifted_input(self)
scipy.signal.tests.test_spectral.TestLombscargle
scipy.signal.tests.test_spectral.TestLombscargle.test_amplitude(self)
scipy.signal.tests.test_spectral.TestLombscargle.test_frequency(self)
scipy.signal.tests.test_spectral.TestLombscargle.test_lombscargle_atan_vs_atan2(self)
scipy.signal.tests.test_spectral.TestLombscargle.test_normalize(self)
scipy.signal.tests.test_spectral.TestLombscargle.test_precenter(self)
scipy.signal.tests.test_spectral.TestLombscargle.test_wrong_shape(self)
scipy.signal.tests.test_spectral.TestLombscargle.test_zero_division(self)
scipy.signal.tests.test_spectral.TestPeriodogram
scipy.signal.tests.test_spectral.TestPeriodogram.test_complex(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_complex_32(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_empty_input(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_empty_input_other_axis(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_integer_even(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_integer_odd(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_integer_twosided(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_nd_axis_0(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_nd_axis_m1(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_nfft_is_xshape(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_padded_fft(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_real_onesided_even(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_real_onesided_even_32(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_real_onesided_odd(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_real_onesided_odd_32(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_real_spectrum(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_real_twosided(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_real_twosided_32(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_short_nfft(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_shorter_window_error(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_unk_scaling(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_window_external(self)
scipy.signal.tests.test_spectral.TestSTFT
scipy.signal.tests.test_spectral.TestSTFT.test_average_all_segments(self)
scipy.signal.tests.test_spectral.TestSTFT.test_axis_rolling(self)
scipy.signal.tests.test_spectral.TestSTFT.test_check_COLA(self)
scipy.signal.tests.test_spectral.TestSTFT.test_check_NOLA(self)
scipy.signal.tests.test_spectral.TestSTFT.test_input_validation(self)
scipy.signal.tests.test_spectral.TestSTFT.test_permute_axes(self)
scipy.signal.tests.test_spectral.TestSTFT.test_roundtrip_boundary_extension(self)
scipy.signal.tests.test_spectral.TestSTFT.test_roundtrip_complex(self,scaling)
scipy.signal.tests.test_spectral.TestSTFT.test_roundtrip_float32(self)
scipy.signal.tests.test_spectral.TestSTFT.test_roundtrip_nola_not_cola(self)
scipy.signal.tests.test_spectral.TestSTFT.test_roundtrip_not_nola(self)
scipy.signal.tests.test_spectral.TestSTFT.test_roundtrip_padded_FFT(self)
scipy.signal.tests.test_spectral.TestSTFT.test_roundtrip_padded_signal(self)
scipy.signal.tests.test_spectral.TestSTFT.test_roundtrip_real(self,scaling)
scipy.signal.tests.test_spectral.TestSTFT.test_roundtrip_scaling(self)
scipy.signal.tests.test_spectral.TestSpectrogram
scipy.signal.tests.test_spectral.TestSpectrogram.test_average_all_segments(self)
scipy.signal.tests.test_spectral.TestSpectrogram.test_short_data(self)
scipy.signal.tests.test_spectral.TestSpectrogram.test_window_external(self)
scipy.signal.tests.test_spectral.TestWelch
scipy.signal.tests.test_spectral.TestWelch.test_average(self)
scipy.signal.tests.test_spectral.TestWelch.test_axis_rolling(self)
scipy.signal.tests.test_spectral.TestWelch.test_bad_noverlap(self)
scipy.signal.tests.test_spectral.TestWelch.test_complex(self)
scipy.signal.tests.test_spectral.TestWelch.test_complex_32(self)
scipy.signal.tests.test_spectral.TestWelch.test_detrend_external(self)
scipy.signal.tests.test_spectral.TestWelch.test_detrend_external_nd_0(self)
scipy.signal.tests.test_spectral.TestWelch.test_detrend_external_nd_m1(self)
scipy.signal.tests.test_spectral.TestWelch.test_detrend_linear(self)
scipy.signal.tests.test_spectral.TestWelch.test_empty_input(self)
scipy.signal.tests.test_spectral.TestWelch.test_empty_input_other_axis(self)
scipy.signal.tests.test_spectral.TestWelch.test_integer_onesided_even(self)
scipy.signal.tests.test_spectral.TestWelch.test_integer_onesided_odd(self)
scipy.signal.tests.test_spectral.TestWelch.test_integer_twosided(self)
scipy.signal.tests.test_spectral.TestWelch.test_nd_axis_0(self)
scipy.signal.tests.test_spectral.TestWelch.test_nd_axis_m1(self)
scipy.signal.tests.test_spectral.TestWelch.test_nfft_too_short(self)
scipy.signal.tests.test_spectral.TestWelch.test_no_detrending(self)
scipy.signal.tests.test_spectral.TestWelch.test_nondefault_noverlap(self)
scipy.signal.tests.test_spectral.TestWelch.test_padded_freqs(self)
scipy.signal.tests.test_spectral.TestWelch.test_real_onesided_even(self)
scipy.signal.tests.test_spectral.TestWelch.test_real_onesided_even_32(self)
scipy.signal.tests.test_spectral.TestWelch.test_real_onesided_odd(self)
scipy.signal.tests.test_spectral.TestWelch.test_real_onesided_odd_32(self)
scipy.signal.tests.test_spectral.TestWelch.test_real_spectrum(self)
scipy.signal.tests.test_spectral.TestWelch.test_real_twosided(self)
scipy.signal.tests.test_spectral.TestWelch.test_real_twosided_32(self)
scipy.signal.tests.test_spectral.TestWelch.test_short_data(self)
scipy.signal.tests.test_spectral.TestWelch.test_unk_scaling(self)
scipy.signal.tests.test_spectral.TestWelch.test_window_correction(self)
scipy.signal.tests.test_spectral.TestWelch.test_window_external(self)
scipy.signal.tests.test_spectral.TestWelch.test_window_long_or_nd(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/windows/_windows.py----------------------------------------
A:scipy.signal.windows._windows.(M, needs_trunc)->_extend(M, sym)
A:scipy.signal.windows._windows.fac->numpy.abs(n / (M - 1.0) - 0.5)
A:scipy.signal.windows._windows.w->W(np.arange(M))
A:scipy.signal.windows._windows.n->numpy.arange(0, M)
A:scipy.signal.windows._windows.na->numpy.extract(n < -(M - 1) / 4.0, n)
A:scipy.signal.windows._windows.nb->numpy.extract(abs(n) <= (M - 1) / 4.0, n)
A:scipy.signal.windows._windows.width->int(np.floor(alpha * (M - 1) / 2.0))
A:scipy.signal.windows._windows.w2->numpy.ones(n2.shape)
A:scipy.signal.windows._windows.kaiser_window->kaiser(M // 2 + 1, beta)
A:scipy.signal.windows._windows.csum->numpy.cumsum(kaiser_window)
A:scipy.signal.windows._windows.half_window->numpy.sqrt(csum[:-1] / csum[-1])
A:scipy.signal.windows._windows.beta->float(window)
A:scipy.signal.windows._windows.p->numpy.zeros(x.shape)
A:scipy.signal.windows._windows.p[x > 1]->numpy.cosh(order * np.arccosh(x[x > 1]))
A:scipy.signal.windows._windows.p[np.abs(x) <= 1]->numpy.cos(order * np.arccos(x[np.abs(x) <= 1]))
A:scipy.signal.windows._windows.ma->numpy.arange(1, nbar)
A:scipy.signal.windows._windows.Fm->numpy.empty(nbar - 1)
A:scipy.signal.windows._windows.signs->numpy.empty_like(ma)
A:scipy.signal.windows._windows.Kmax->operator.index(Kmax)
A:scipy.signal.windows._windows.nidx->numpy.arange(M)
A:scipy.signal.windows._windows.(w, windows)->scipy.linalg.eigh_tridiagonal(d, e, select='i', select_range=(M - Kmax, M - 1))
A:scipy.signal.windows._windows.thresh->max(1e-07, 1.0 / M)
A:scipy.signal.windows._windows.dpss_rxx->_fftautocorr(windows)
A:scipy.signal.windows._windows.ratios->numpy.dot(dpss_rxx, r)
A:scipy.signal.windows._windows.s->scipy.fft.rfft(windows[0])
A:scipy.signal.windows._windows.wh->_calc_right_side_lanczos((M + 1) / 2, M)
A:scipy.signal.windows._windows.use_N->scipy.fft.next_fast_len(2 * N - 1)
A:scipy.signal.windows._windows.x_fft->scipy.fft.rfft(x, use_N, axis=-1)
A:scipy.signal.windows._windows._needs_param->set()
scipy.signal.get_window(window,Nx,fftbins=True)
scipy.signal.windows._extend(M,sym)
scipy.signal.windows._fftautocorr(x)
scipy.signal.windows._len_guards(M)
scipy.signal.windows._truncate(w,needed)
scipy.signal.windows._windows._extend(M,sym)
scipy.signal.windows._windows._fftautocorr(x)
scipy.signal.windows._windows._len_guards(M)
scipy.signal.windows._windows._truncate(w,needed)
scipy.signal.windows._windows.barthann(M,sym=True)
scipy.signal.windows._windows.bartlett(M,sym=True)
scipy.signal.windows._windows.blackman(M,sym=True)
scipy.signal.windows._windows.blackmanharris(M,sym=True)
scipy.signal.windows._windows.bohman(M,sym=True)
scipy.signal.windows._windows.boxcar(M,sym=True)
scipy.signal.windows._windows.chebwin(M,at,sym=True)
scipy.signal.windows._windows.cosine(M,sym=True)
scipy.signal.windows._windows.dpss(M,NW,Kmax=None,sym=True,norm=None,return_ratios=False)
scipy.signal.windows._windows.exponential(M,center=None,tau=1.0,sym=True)
scipy.signal.windows._windows.flattop(M,sym=True)
scipy.signal.windows._windows.gaussian(M,std,sym=True)
scipy.signal.windows._windows.general_cosine(M,a,sym=True)
scipy.signal.windows._windows.general_gaussian(M,p,sig,sym=True)
scipy.signal.windows._windows.general_hamming(M,alpha,sym=True)
scipy.signal.windows._windows.get_window(window,Nx,fftbins=True)
scipy.signal.windows._windows.hamming(M,sym=True)
scipy.signal.windows._windows.hann(M,sym=True)
scipy.signal.windows._windows.kaiser(M,beta,sym=True)
scipy.signal.windows._windows.kaiser_bessel_derived(M,beta,*,sym=True)
scipy.signal.windows._windows.lanczos(M,*,sym=True)
scipy.signal.windows._windows.nuttall(M,sym=True)
scipy.signal.windows._windows.parzen(M,sym=True)
scipy.signal.windows._windows.taylor(M,nbar=4,sll=30,norm=True,sym=True)
scipy.signal.windows._windows.triang(M,sym=True)
scipy.signal.windows._windows.tukey(M,alpha=0.5,sym=True)
scipy.signal.windows.barthann(M,sym=True)
scipy.signal.windows.bartlett(M,sym=True)
scipy.signal.windows.blackman(M,sym=True)
scipy.signal.windows.blackmanharris(M,sym=True)
scipy.signal.windows.bohman(M,sym=True)
scipy.signal.windows.boxcar(M,sym=True)
scipy.signal.windows.chebwin(M,at,sym=True)
scipy.signal.windows.cosine(M,sym=True)
scipy.signal.windows.dpss(M,NW,Kmax=None,sym=True,norm=None,return_ratios=False)
scipy.signal.windows.exponential(M,center=None,tau=1.0,sym=True)
scipy.signal.windows.flattop(M,sym=True)
scipy.signal.windows.gaussian(M,std,sym=True)
scipy.signal.windows.general_cosine(M,a,sym=True)
scipy.signal.windows.general_gaussian(M,p,sig,sym=True)
scipy.signal.windows.general_hamming(M,alpha,sym=True)
scipy.signal.windows.hamming(M,sym=True)
scipy.signal.windows.hann(M,sym=True)
scipy.signal.windows.kaiser(M,beta,sym=True)
scipy.signal.windows.kaiser_bessel_derived(M,beta,*,sym=True)
scipy.signal.windows.lanczos(M,*,sym=True)
scipy.signal.windows.nuttall(M,sym=True)
scipy.signal.windows.parzen(M,sym=True)
scipy.signal.windows.taylor(M,nbar=4,sll=30,norm=True,sym=True)
scipy.signal.windows.triang(M,sym=True)
scipy.signal.windows.tukey(M,alpha=0.5,sym=True)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/windows/windows.py----------------------------------------
scipy.signal.windows.windows.__dir__()
scipy.signal.windows.windows.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/signal/windows/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/datasets/_utils.py----------------------------------------
A:scipy.datasets._utils.cache_dir->appdirs.user_cache_dir('scipy-data')
scipy.datasets._utils._clear_cache(datasets,cache_dir=None,method_map=None)
scipy.datasets._utils.clear_cache(datasets=None)
scipy.datasets.clear_cache(datasets=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/datasets/_download_all.py----------------------------------------
A:scipy.datasets._download_all.path->pooch.os_cache('scipy-data')
A:scipy.datasets._download_all.parser->argparse.ArgumentParser(description='Download SciPy data files.')
A:scipy.datasets._download_all.args->argparse.ArgumentParser(description='Download SciPy data files.').parse_args()
scipy.datasets._download_all.download_all(path=None)
scipy.datasets._download_all.main()
scipy.datasets.download_all(path=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/datasets/_registry.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/datasets/_fetchers.py----------------------------------------
A:scipy.datasets._fetchers.data_fetcher->pooch.create(path=pooch.os_cache('scipy-data'), base_url='https://github.com/scipy/', registry=registry, urls=registry_urls)
A:scipy.datasets._fetchers.fname->fetch_data('face.dat')
A:scipy.datasets._fetchers.ascent->array(pickle.load(f))
A:scipy.datasets._fetchers.ecg->file['ecg'].astype(int)
A:scipy.datasets._fetchers.rawdata->f.read()
A:scipy.datasets._fetchers.face_data->bz2.decompress(rawdata)
A:scipy.datasets._fetchers.face->(0.21 * face[:, :, 0] + 0.71 * face[:, :, 1] + 0.07 * face[:, :, 2]).astype('uint8')
scipy.datasets._fetchers.ascent()
scipy.datasets._fetchers.electrocardiogram()
scipy.datasets._fetchers.face(gray=False)
scipy.datasets._fetchers.fetch_data(dataset_name,data_fetcher=data_fetcher)
scipy.datasets.ascent()
scipy.datasets.electrocardiogram()
scipy.datasets.face(gray=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/datasets/__init__.py----------------------------------------
A:scipy.datasets.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/datasets/tests/test_data.py----------------------------------------
A:scipy.datasets.tests.test_data.ecg->electrocardiogram()
scipy.datasets.tests.test_data.TestDatasets
scipy.datasets.tests.test_data.TestDatasets.test_ascent(self)
scipy.datasets.tests.test_data.TestDatasets.test_download_all(self)
scipy.datasets.tests.test_data.TestDatasets.test_electrocardiogram(self)
scipy.datasets.tests.test_data.TestDatasets.test_existence_all(self)
scipy.datasets.tests.test_data.TestDatasets.test_face(self)
scipy.datasets.tests.test_data._has_hash(path,expected_hash)
scipy.datasets.tests.test_data.test_clear_cache(tmp_path)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/datasets/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/odr/_add_newdocs.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/odr/odrpack.py----------------------------------------
scipy.odr.odrpack.__dir__()
scipy.odr.odrpack.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/odr/_odrpack.py----------------------------------------
A:scipy.odr._odrpack.obj->getattr(self, attr)
A:scipy.odr._odrpack.self.x->_conv(x)
A:scipy.odr._odrpack.self.y->_conv(y)
A:scipy.odr._odrpack.self.we->_conv(we)
A:scipy.odr._odrpack.self.wd->_conv(wd)
A:scipy.odr._odrpack.self.fix->_conv(fix)
A:scipy.odr._odrpack.self.sx->_conv(sx)
A:scipy.odr._odrpack.self.sy->_conv(sy)
A:scipy.odr._odrpack.self.covx->_conv(covx)
A:scipy.odr._odrpack.self.covy->_conv(covy)
A:scipy.odr._odrpack.weights->numpy.zeros(cov.shape, float)
A:scipy.odr._odrpack.weights[:, :, i]->inv(cov[:, :, i])
A:scipy.odr._odrpack.extra_args->tuple(extra_args)
A:scipy.odr._odrpack.self.stopreason->_report_error(self.info)
A:scipy.odr._odrpack.self.beta0->_conv(beta0)
A:scipy.odr._odrpack.self.delta0->_conv(delta0)
A:scipy.odr._odrpack.self.ifixx->_conv(ifixx, dtype=numpy.int32)
A:scipy.odr._odrpack.self.ifixb->_conv(ifixb, dtype=numpy.int32)
A:scipy.odr._odrpack.self.stpb->_conv(stpb)
A:scipy.odr._odrpack.self.stpd->_conv(stpd)
A:scipy.odr._odrpack.self.sclb->_conv(sclb)
A:scipy.odr._odrpack.self.scld->_conv(scld)
A:scipy.odr._odrpack.self.work->numpy.zeros((lwork,), float)
A:scipy.odr._odrpack.self.iwork->_conv(iwork)
A:scipy.odr._odrpack.x_s->list(self.data.x.shape)
A:scipy.odr._odrpack.y_s->list(self.data.y.shape)
A:scipy.odr._odrpack.p->len(self.beta0)
A:scipy.odr._odrpack.res->self.model.fjacb(*arglist)
A:scipy.odr._odrpack.ip[0]->ip2arg.index(iprint_l[0:2])
A:scipy.odr._odrpack.ip[1]->ip2arg.index(iprint_l[2:4])
A:scipy.odr._odrpack.ip[3]->ip2arg.index(iprint_l[4:6])
A:scipy.odr._odrpack.d0->numpy.ravel(self.delta0)
A:scipy.odr._odrpack.self.output->Output(odr(*args, **kwds))
scipy.odr.Data(self,x,y=None,we=None,wd=None,fix=None,meta=None)
scipy.odr.Data.__getattr__(self,attr)
scipy.odr.Data.set_meta(self,**kwds)
scipy.odr.Model(self,fcn,fjacb=None,fjacd=None,extra_args=None,estimate=None,implicit=0,meta=None)
scipy.odr.Model.__getattr__(self,attr)
scipy.odr.Model.set_meta(self,**kwds)
scipy.odr.ODR(self,data,model,beta0=None,delta0=None,ifixb=None,ifixx=None,job=None,iprint=None,errfile=None,rptfile=None,ndigit=None,taufac=None,sstol=None,partol=None,maxit=None,stpb=None,stpd=None,sclb=None,scld=None,work=None,iwork=None,overwrite=False)
scipy.odr.ODR._check(self)
scipy.odr.ODR._gen_work(self)
scipy.odr.ODR.restart(self,iter=None)
scipy.odr.ODR.run(self)
scipy.odr.ODR.set_iprint(self,init=None,so_init=None,iter=None,so_iter=None,iter_step=None,final=None,so_final=None)
scipy.odr.ODR.set_job(self,fit_type=None,deriv=None,var_calc=None,del_init=None,restart=None)
scipy.odr.OdrError(Exception)
scipy.odr.OdrStop(Exception)
scipy.odr.OdrWarning(UserWarning)
scipy.odr.Output(self,output)
scipy.odr.Output.pprint(self)
scipy.odr.RealData(self,x,y=None,sx=None,sy=None,covx=None,covy=None,fix=None,meta=None)
scipy.odr.RealData.__getattr__(self,attr)
scipy.odr.RealData._cov2wt(self,cov)
scipy.odr.RealData._sd2wt(self,sd)
scipy.odr._conv(obj,dtype=None)
scipy.odr._odrpack.Data(self,x,y=None,we=None,wd=None,fix=None,meta=None)
scipy.odr._odrpack.Data.__getattr__(self,attr)
scipy.odr._odrpack.Data.__init__(self,x,y=None,we=None,wd=None,fix=None,meta=None)
scipy.odr._odrpack.Data.set_meta(self,**kwds)
scipy.odr._odrpack.Model(self,fcn,fjacb=None,fjacd=None,extra_args=None,estimate=None,implicit=0,meta=None)
scipy.odr._odrpack.Model.__getattr__(self,attr)
scipy.odr._odrpack.Model.__init__(self,fcn,fjacb=None,fjacd=None,extra_args=None,estimate=None,implicit=0,meta=None)
scipy.odr._odrpack.Model.set_meta(self,**kwds)
scipy.odr._odrpack.ODR(self,data,model,beta0=None,delta0=None,ifixb=None,ifixx=None,job=None,iprint=None,errfile=None,rptfile=None,ndigit=None,taufac=None,sstol=None,partol=None,maxit=None,stpb=None,stpd=None,sclb=None,scld=None,work=None,iwork=None,overwrite=False)
scipy.odr._odrpack.ODR.__init__(self,data,model,beta0=None,delta0=None,ifixb=None,ifixx=None,job=None,iprint=None,errfile=None,rptfile=None,ndigit=None,taufac=None,sstol=None,partol=None,maxit=None,stpb=None,stpd=None,sclb=None,scld=None,work=None,iwork=None,overwrite=False)
scipy.odr._odrpack.ODR._check(self)
scipy.odr._odrpack.ODR._gen_work(self)
scipy.odr._odrpack.ODR.restart(self,iter=None)
scipy.odr._odrpack.ODR.run(self)
scipy.odr._odrpack.ODR.set_iprint(self,init=None,so_init=None,iter=None,so_iter=None,iter_step=None,final=None,so_final=None)
scipy.odr._odrpack.ODR.set_job(self,fit_type=None,deriv=None,var_calc=None,del_init=None,restart=None)
scipy.odr._odrpack.OdrError(Exception)
scipy.odr._odrpack.OdrStop(Exception)
scipy.odr._odrpack.OdrWarning(UserWarning)
scipy.odr._odrpack.Output(self,output)
scipy.odr._odrpack.Output.__init__(self,output)
scipy.odr._odrpack.Output.pprint(self)
scipy.odr._odrpack.RealData(self,x,y=None,sx=None,sy=None,covx=None,covy=None,fix=None,meta=None)
scipy.odr._odrpack.RealData.__getattr__(self,attr)
scipy.odr._odrpack.RealData.__init__(self,x,y=None,sx=None,sy=None,covx=None,covy=None,fix=None,meta=None)
scipy.odr._odrpack.RealData._cov2wt(self,cov)
scipy.odr._odrpack.RealData._sd2wt(self,sd)
scipy.odr._odrpack._conv(obj,dtype=None)
scipy.odr._odrpack._report_error(info)
scipy.odr._report_error(info)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/odr/_models.py----------------------------------------
A:scipy.odr._models.a->numpy.ones(x.shape[-1], float)
A:scipy.odr._models.res->numpy.concatenate((np.ones(x.shape[-1], float), x * np.exp(B[1] * x)))
A:scipy.odr._models.b->numpy.repeat(b, (x.shape[-1],) * b.shape[-1], axis=0)
A:scipy.odr._models.multilinear->_MultilinearModel()
A:scipy.odr._models.powers->numpy.arange(1, powers + 1)
A:scipy.odr._models.exponential->_ExponentialModel()
A:scipy.odr._models._ret->numpy.concatenate((x * x, x, np.ones(x.shape, float)))
A:scipy.odr._models.unilinear->_UnilinearModel()
A:scipy.odr._models.quadratic->_QuadraticModel()
scipy.odr._ExponentialModel(self)
scipy.odr._MultilinearModel(self)
scipy.odr._QuadraticModel(self)
scipy.odr._UnilinearModel(self)
scipy.odr._exp_est(data)
scipy.odr._exp_fcn(B,x)
scipy.odr._exp_fjb(B,x)
scipy.odr._exp_fjd(B,x)
scipy.odr._lin_est(data)
scipy.odr._lin_fcn(B,x)
scipy.odr._lin_fjb(B,x)
scipy.odr._lin_fjd(B,x)
scipy.odr._models._ExponentialModel(self)
scipy.odr._models._ExponentialModel.__init__(self)
scipy.odr._models._MultilinearModel(self)
scipy.odr._models._MultilinearModel.__init__(self)
scipy.odr._models._QuadraticModel(self)
scipy.odr._models._QuadraticModel.__init__(self)
scipy.odr._models._UnilinearModel(self)
scipy.odr._models._UnilinearModel.__init__(self)
scipy.odr._models._exp_est(data)
scipy.odr._models._exp_fcn(B,x)
scipy.odr._models._exp_fjb(B,x)
scipy.odr._models._exp_fjd(B,x)
scipy.odr._models._lin_est(data)
scipy.odr._models._lin_fcn(B,x)
scipy.odr._models._lin_fjb(B,x)
scipy.odr._models._lin_fjd(B,x)
scipy.odr._models._poly_fcn(B,x,powers)
scipy.odr._models._poly_fjacb(B,x,powers)
scipy.odr._models._poly_fjacd(B,x,powers)
scipy.odr._models._quad_est(data)
scipy.odr._models._quad_fjb(B,x)
scipy.odr._models._quad_fjd(B,x)
scipy.odr._models._quadratic(B,x)
scipy.odr._models._unilin(B,x)
scipy.odr._models._unilin_est(data)
scipy.odr._models._unilin_fjb(B,x)
scipy.odr._models._unilin_fjd(B,x)
scipy.odr._models.polynomial(order)
scipy.odr._poly_fcn(B,x,powers)
scipy.odr._poly_fjacb(B,x,powers)
scipy.odr._poly_fjacd(B,x,powers)
scipy.odr._quad_est(data)
scipy.odr._quad_fjb(B,x)
scipy.odr._quad_fjd(B,x)
scipy.odr._quadratic(B,x)
scipy.odr._unilin(B,x)
scipy.odr._unilin_est(data)
scipy.odr._unilin_fjb(B,x)
scipy.odr._unilin_fjd(B,x)
scipy.odr.polynomial(order)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/odr/__init__.py----------------------------------------
A:scipy.odr.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/odr/models.py----------------------------------------
scipy.odr.models.__dir__()
scipy.odr.models.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/odr/tests/test_odr.py----------------------------------------
A:scipy.odr.tests.test_odr.linear->Model(self.empty_data_func)
A:scipy.odr.tests.test_odr.empty_dat->RealData([], [])
A:scipy.odr.tests.test_odr.eBx->numpy.exp(B[2] * x)
A:scipy.odr.tests.test_odr.res->numpy.vstack([np.ones(x.shape[-1]), np.power(eBx - 1.0, 2), B[1] * 2.0 * (eBx - 1.0) * eBx * x])
A:scipy.odr.tests.test_odr.explicit_mod->Model(self.explicit_fcn, fjacb=self.explicit_fjb, fjacd=self.explicit_fjd, meta=dict(name='Sample Explicit Model', ref='ODRPACK UG, pg. 39'))
A:scipy.odr.tests.test_odr.explicit_dat->Data([0.0, 0.0, 5.0, 7.0, 7.5, 10.0, 16.0, 26.0, 30.0, 34.0, 34.5, 100.0], [1265.0, 1263.6, 1258.0, 1254.0, 1253.0, 1249.8, 1237.0, 1218.0, 1220.6, 1213.8, 1215.5, 1212.0])
A:scipy.odr.tests.test_odr.explicit_odr->ODR(explicit_dat, explicit_mod, beta0=[1500.0, -50.0, -0.1], ifixx=[0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0])
A:scipy.odr.tests.test_odr.out->ODR(real_data, linear_model, beta0=[0.4, 0.4]).run()
A:scipy.odr.tests.test_odr.implicit_mod->Model(self.implicit_fcn, implicit=1, meta=dict(name='Sample Implicit Model', ref='ODRPACK UG, pg. 49'))
A:scipy.odr.tests.test_odr.implicit_dat->Data([[0.5, 1.2, 1.6, 1.86, 2.12, 2.36, 2.44, 2.36, 2.06, 1.74, 1.34, 0.9, -0.28, -0.78, -1.36, -1.9, -2.5, -2.88, -3.18, -3.44], [-0.12, -0.6, -1.0, -1.4, -2.54, -3.36, -4.0, -4.75, -5.25, -5.64, -5.97, -6.32, -6.44, -6.44, -6.41, -6.25, -5.88, -5.5, -5.24, -4.86]], 1)
A:scipy.odr.tests.test_odr.implicit_odr->ODR(implicit_dat, implicit_mod, beta0=[-1.0, -3.0, 0.09, 0.02, 0.08])
A:scipy.odr.tests.test_odr.ctheta->numpy.cos(theta)
A:scipy.odr.tests.test_odr.stheta->numpy.sin(theta)
A:scipy.odr.tests.test_odr.omega->numpy.power(2.0 * pi * x * np.exp(-B[2]), B[3])
A:scipy.odr.tests.test_odr.phi->numpy.arctan2(omega * stheta, 1.0 + omega * ctheta)
A:scipy.odr.tests.test_odr.ret->numpy.vstack([B[1] + r * np.cos(B[4] * phi), r * np.sin(B[4] * phi)])
A:scipy.odr.tests.test_odr.multi_mod->Model(self.multi_fcn, meta=dict(name='Sample Multi-Response Model', ref='ODRPACK UG, pg. 56'))
A:scipy.odr.tests.test_odr.multi_x->numpy.array([30.0, 50.0, 70.0, 100.0, 150.0, 200.0, 300.0, 500.0, 700.0, 1000.0, 1500.0, 2000.0, 3000.0, 5000.0, 7000.0, 10000.0, 15000.0, 20000.0, 30000.0, 50000.0, 70000.0, 100000.0, 150000.0])
A:scipy.odr.tests.test_odr.multi_y->numpy.array([[4.22, 4.167, 4.132, 4.038, 4.019, 3.956, 3.884, 3.784, 3.713, 3.633, 3.54, 3.433, 3.358, 3.258, 3.193, 3.128, 3.059, 2.984, 2.934, 2.876, 2.838, 2.798, 2.759], [0.136, 0.167, 0.188, 0.212, 0.236, 0.257, 0.276, 0.297, 0.309, 0.311, 0.314, 0.311, 0.305, 0.289, 0.277, 0.255, 0.24, 0.218, 0.202, 0.182, 0.168, 0.153, 0.139]])
A:scipy.odr.tests.test_odr.n->len(multi_x)
A:scipy.odr.tests.test_odr.multi_we->numpy.zeros((2, 2, n), dtype=float)
A:scipy.odr.tests.test_odr.multi_ifixx->numpy.ones(n, dtype=int)
A:scipy.odr.tests.test_odr.multi_delta->numpy.zeros(n, dtype=float)
A:scipy.odr.tests.test_odr.multi_dat->Data(multi_x, multi_y, wd=0.0001 / np.power(multi_x, 2), we=multi_we)
A:scipy.odr.tests.test_odr.multi_odr->ODR(multi_dat, multi_mod, beta0=[4.0, 2.0, 7.0, 0.4, 0.5], delta0=multi_delta, ifixx=multi_ifixx)
A:scipy.odr.tests.test_odr.p_x->numpy.array([0.0, 0.9, 1.8, 2.6, 3.3, 4.4, 5.2, 6.1, 6.5, 7.4])
A:scipy.odr.tests.test_odr.p_y->numpy.array([5.9, 5.4, 4.4, 4.6, 3.5, 3.7, 2.8, 2.8, 2.4, 1.5])
A:scipy.odr.tests.test_odr.p_sx->numpy.array([0.03, 0.03, 0.04, 0.035, 0.07, 0.11, 0.13, 0.22, 0.74, 1.0])
A:scipy.odr.tests.test_odr.p_sy->numpy.array([1.0, 0.74, 0.5, 0.35, 0.22, 0.22, 0.12, 0.12, 0.1, 0.04])
A:scipy.odr.tests.test_odr.p_dat->RealData(p_x, p_y, sx=p_sx, sy=p_sy)
A:scipy.odr.tests.test_odr.pr_dat->RealData(p_y, p_x, sx=p_sy, sy=p_sx)
A:scipy.odr.tests.test_odr.p_mod->Model(self.pearson_fcn, meta=dict(name='Uni-linear Fit'))
A:scipy.odr.tests.test_odr.p_odr->ODR(p_dat, p_mod, beta0=[1.0, 1.0])
A:scipy.odr.tests.test_odr.pr_odr->ODR(pr_dat, p_mod, beta0=[1.0, 1.0])
A:scipy.odr.tests.test_odr.rout->ODR(pr_dat, p_mod, beta0=[1.0, 1.0]).run()
A:scipy.odr.tests.test_odr.l_sy->numpy.array([0.29] * 18)
A:scipy.odr.tests.test_odr.l_sx->numpy.array([0.000972971, 0.000948268, 0.000707632, 0.000706679, 0.000706074, 0.000703918, 0.000698955, 0.000456856, 0.000455207, 0.000662717, 0.000654619, 0.000652694, 8.59202e-07, 0.00106589, 0.00106378, 0.00125483, 0.00140818, 0.00241839])
A:scipy.odr.tests.test_odr.l_dat->RealData([3.9094, 3.85945, 3.84976, 3.84716, 3.84551, 3.83964, 3.82608, 3.78847, 3.78163, 3.72558, 3.70274, 3.6973, 3.67373, 3.65982, 3.6562, 3.62498, 3.55525, 3.41886], [652, 910.5, 984, 1000, 1007.5, 1053, 1160.5, 1409.5, 1430, 1122, 957.5, 920, 777.5, 709.5, 698, 578.5, 418.5, 275.5], sx=l_sx, sy=l_sy)
A:scipy.odr.tests.test_odr.l_mod->Model(self.lorentz, meta=dict(name='Lorentz Peak'))
A:scipy.odr.tests.test_odr.l_odr->ODR(l_dat, l_mod, beta0=(1000.0, 0.1, 3.8))
A:scipy.odr.tests.test_odr.x->numpy.arange(n_data)
A:scipy.odr.tests.test_odr.y->numpy.where(x % 2, x + 0.1, x - 0.1)
A:scipy.odr.tests.test_odr.model->Model(lambda beta, x: x[1, :] - beta[0] * x[0, :] ** 2.0, implicit=True)
A:scipy.odr.tests.test_odr.data->Data(np.arange(10), 12 * np.arange(10))
A:scipy.odr.tests.test_odr.job->ODR(data, model, beta0=[1.0, 1.0])
A:scipy.odr.tests.test_odr.result->ODR(data, model, beta0=[1.0, 1.0]).run()
A:scipy.odr.tests.test_odr.fix->numpy.vstack((np.zeros_like(x1, dtype=int), np.ones_like(x2, dtype=int)))
A:scipy.odr.tests.test_odr.odr1->ODR(data, model, beta0=np.array([1.0]))
A:scipy.odr.tests.test_odr.sol1->ODR(data, model, beta0=np.array([1.0])).run()
A:scipy.odr.tests.test_odr.odr2->ODR(data, model, beta0=np.array([1.0]), ifixx=fix)
A:scipy.odr.tests.test_odr.sol2->ODR(data, model, beta0=np.array([1.0]), ifixx=fix).run()
A:scipy.odr.tests.test_odr.beta_true->numpy.array([1.0, 2.3, 1.1, -1.0, 1.3, 0.5])
A:scipy.odr.tests.test_odr.x_error->numpy.array([[0.00063445, 0.00515731, 0.00162719, 0.01022866, -0.01624845, 0.00482652, 0.00275988, -0.00714734, -0.00929201, -0.00687301], [-0.00831623, -0.00821211, -0.00203459, 0.00938266, -0.00701829, 0.0032169, 0.00259194, -0.00581017, -0.0030283, 0.01014164]])
A:scipy.odr.tests.test_odr.y_error->numpy.array([[0.05275304, 0.04519563, -0.07524086, 0.03575642, 0.04745194, 0.03806645, 0.07061601, -0.00753604, -0.02592543, -0.02394929], [0.03632366, 0.06642266, 0.08373122, 0.03988822, -0.0092536, -0.03750469, -0.03198903, 0.01642066, 0.01293648, -0.05627085]])
A:scipy.odr.tests.test_odr.beta_solution->numpy.array([2.6292023575666588, -126.60848499629961, 129.70357277540307, -1.8856098540118547, 78.38341607712749, -76.41240768380871])
A:scipy.odr.tests.test_odr.zeros->numpy.zeros(nr_meas)
A:scipy.odr.tests.test_odr.ones->numpy.ones(nr_meas)
A:scipy.odr.tests.test_odr.dy0->numpy.array([beta[1] * ones, beta[2] * ones])
A:scipy.odr.tests.test_odr.dy1->numpy.array([beta[4] * ones, beta[5] * ones])
A:scipy.odr.tests.test_odr.x0_true->numpy.linspace(1, 10, nr_measurements)
A:scipy.odr.tests.test_odr.x1_true->numpy.linspace(1, 10, nr_measurements)
A:scipy.odr.tests.test_odr.x_true->numpy.array([x0_true, x1_true])
A:scipy.odr.tests.test_odr.y_true->func(beta_true, x_true)
A:scipy.odr.tests.test_odr.model_f->Model(func, fjacb=df_dbeta_odr, fjacd=df_dx_odr)
A:scipy.odr.tests.test_odr.odr_obj->ODR(real_data, linear_model, beta0=[0.4, 0.4])
A:scipy.odr.tests.test_odr.odr_out->ODR(real_data, linear_model, beta0=[0.4, 0.4]).run()
A:scipy.odr.tests.test_odr.output->ODR(real_data, linear_model, beta0=[0.4, 0.4]).run()
A:scipy.odr.tests.test_odr.poly_model->polynomial(3)
A:scipy.odr.tests.test_odr.x_err->numpy.full(n_data, 0.1)
A:scipy.odr.tests.test_odr.y_err->numpy.full(n_data, 0.1)
A:scipy.odr.tests.test_odr.linear_model->Model(func)
A:scipy.odr.tests.test_odr.real_data->RealData(x, y, sx=x_err, sy=y_err)
A:scipy.odr.tests.test_odr.p->Model(func)
A:scipy.odr.tests.test_odr.tmp_dir->tempfile.mkdtemp()
A:scipy.odr.tests.test_odr.error_file_path->os.path.join(tmp_dir, 'error.dat')
A:scipy.odr.tests.test_odr.report_file_path->os.path.join(tmp_dir, 'report.dat')
scipy.odr.tests.test_odr.TestODR
scipy.odr.tests.test_odr.TestODR.empty_data_func(self,B,x)
scipy.odr.tests.test_odr.TestODR.explicit_fcn(self,B,x)
scipy.odr.tests.test_odr.TestODR.explicit_fjb(self,B,x)
scipy.odr.tests.test_odr.TestODR.explicit_fjd(self,B,x)
scipy.odr.tests.test_odr.TestODR.implicit_fcn(self,B,x)
scipy.odr.tests.test_odr.TestODR.lorentz(self,beta,x)
scipy.odr.tests.test_odr.TestODR.multi_fcn(self,B,x)
scipy.odr.tests.test_odr.TestODR.pearson_fcn(self,B,x)
scipy.odr.tests.test_odr.TestODR.test_bad_data(self)
scipy.odr.tests.test_odr.TestODR.test_empty_data(self)
scipy.odr.tests.test_odr.TestODR.test_explicit(self)
scipy.odr.tests.test_odr.TestODR.test_exponential_model(self)
scipy.odr.tests.test_odr.TestODR.test_ifixx(self)
scipy.odr.tests.test_odr.TestODR.test_implicit(self)
scipy.odr.tests.test_odr.TestODR.test_lorentz(self)
scipy.odr.tests.test_odr.TestODR.test_multi(self)
scipy.odr.tests.test_odr.TestODR.test_multilinear_model(self)
scipy.odr.tests.test_odr.TestODR.test_odr_model_default_meta(self)
scipy.odr.tests.test_odr.TestODR.test_output_file_overwrite(self)
scipy.odr.tests.test_odr.TestODR.test_pearson(self)
scipy.odr.tests.test_odr.TestODR.test_polynomial_model(self)
scipy.odr.tests.test_odr.TestODR.test_quadratic_model(self)
scipy.odr.tests.test_odr.TestODR.test_ticket_11800(self)
scipy.odr.tests.test_odr.TestODR.test_ticket_1253(self)
scipy.odr.tests.test_odr.TestODR.test_unilinear_model(self)
scipy.odr.tests.test_odr.TestODR.test_work_ind(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/odr/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/fitpack2.py----------------------------------------
scipy.interpolate.fitpack2.__dir__()
scipy.interpolate.fitpack2.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/_fitpack2.py----------------------------------------
A:scipy.interpolate._fitpack2.(x, y, w, bbox, self.ext)->cls.__new__(cls).validate_input(x, y, w, bbox, k, None, ext, check_finite)
A:scipy.interpolate._fitpack2.data->dfitpack.fpcurfm1(x, y, k, t, w=w, xb=xb, xe=xe)
A:scipy.interpolate._fitpack2.w->numpy.asarray(w)
A:scipy.interpolate._fitpack2.self->cls.__new__(cls)
A:scipy.interpolate._fitpack2.message->_surfit_messages.copy().get(ier, 'ier=%s' % ier)
A:scipy.interpolate._fitpack2.x->x.ravel().ravel()
A:scipy.interpolate._fitpack2.tck->_fitpack_impl.splantider(self._eval_args, n)
A:scipy.interpolate._fitpack2.self._data->dfitpack.fpcurf0(x, y, k, w=w, xb=bbox[0], xe=bbox[1], s=0)
A:scipy.interpolate._fitpack2.t->concatenate(([xb] * (k + 1), t, [xe] * (k + 1)))
A:scipy.interpolate._fitpack2.n->len(t)
A:scipy.interpolate._fitpack2.y->y.ravel().ravel()
A:scipy.interpolate._fitpack2.(z, ier)->dfitpack.bispeu(tx, ty, c, kx, ky, x, y)
A:scipy.interpolate._fitpack2.(x, y)->numpy.broadcast_arrays(x, y)
A:scipy.interpolate._fitpack2.z->ravel(z)
A:scipy.interpolate._fitpack2.(newc, ier)->dfitpack.pardtc(tx, ty, c, kx, ky, dx, dy)
A:scipy.interpolate._fitpack2.nx->len(tx)
A:scipy.interpolate._fitpack2.ny->len(ty)
A:scipy.interpolate._fitpack2.(x, y, z, w)->cls.__new__(cls)._validate_input(x, y, z, w, kx, ky, eps)
A:scipy.interpolate._fitpack2.bbox->ravel(bbox)
A:scipy.interpolate._fitpack2.(nx, tx, ny, ty, c, fp, wrk1, ier)->dfitpack.surfit_smth(x, y, z, w, xb, xe, yb, ye, kx, ky, s=s, eps=eps, lwrk2=ier)
A:scipy.interpolate._fitpack2.nmax->max(nx, ny)
A:scipy.interpolate._fitpack2.tx1->zeros((nmax,), float)
A:scipy.interpolate._fitpack2.ty1->zeros((nmax,), float)
A:scipy.interpolate._fitpack2.(tx1, ty1, c, fp, ier)->dfitpack.surfit_lsq(x, y, z, nx, tx1, ny, ty1, w, xb, xe, yb, ye, kx, ky, eps, lwrk2=ier)
A:scipy.interpolate._fitpack2.(nx, tx, ny, ty, c, fp, ier)->dfitpack.regrid_smth(x, y, z, xb, xe, yb, ye, kx, ky, s)
A:scipy.interpolate._fitpack2.msg->_surfit_messages.copy().get(ier, 'ier=%s' % ier)
A:scipy.interpolate._fitpack2._spherefit_messages->_surfit_messages.copy()
A:scipy.interpolate._fitpack2.theta->numpy.asarray(theta)
A:scipy.interpolate._fitpack2.phi->numpy.asarray(phi)
A:scipy.interpolate._fitpack2.(nt_, tt_, np_, tp_, c, fp, ier)->dfitpack.spherfit_smth(theta, phi, r, w=w, s=s, eps=eps)
A:scipy.interpolate._fitpack2.(tt_, tp_, c, fp, ier)->dfitpack.spherfit_lsq(theta, phi, r, tt_, tp_, w=w, eps=eps)
A:scipy.interpolate._fitpack2._spfit_messages->_surfit_messages.copy()
A:scipy.interpolate._fitpack2.iopt->numpy.array([0, 0, 0], dtype=dfitpack_int)
A:scipy.interpolate._fitpack2.ider->numpy.array([-1, 0, -1, 0], dtype=dfitpack_int)
A:scipy.interpolate._fitpack2.r->numpy.ravel(r)
A:scipy.interpolate._fitpack2.(nu, tu, nv, tv, c, fp, ier)->dfitpack.regrid_smth_spher(iopt, ider, u.copy(), v.copy(), r.copy(), r0, r1, s)
scipy.interpolate.BivariateSpline(_BivariateSplineBase)
scipy.interpolate.BivariateSpline._validate_input(x,y,z,w,kx,ky,eps)
scipy.interpolate.BivariateSpline.ev(self,xi,yi,dx=0,dy=0)
scipy.interpolate.BivariateSpline.integral(self,xa,xb,ya,yb)
scipy.interpolate.InterpolatedUnivariateSpline(self,x,y,w=None,bbox=[None]*2,k=3,ext=0,check_finite=False)
scipy.interpolate.LSQBivariateSpline(self,x,y,z,tx,ty,w=None,bbox=[None]*4,kx=3,ky=3,eps=None)
scipy.interpolate.LSQSphereBivariateSpline(self,theta,phi,r,tt,tp,w=None,eps=1e-16)
scipy.interpolate.LSQUnivariateSpline(self,x,y,t,w=None,bbox=[None]*2,k=3,ext=0,check_finite=False)
scipy.interpolate.RectBivariateSpline(self,x,y,z,bbox=[None]*4,kx=3,ky=3,s=0)
scipy.interpolate.RectSphereBivariateSpline(self,u,v,r,s=0.0,pole_continuity=False,pole_values=None,pole_exact=False,pole_flat=False)
scipy.interpolate.SmoothBivariateSpline(self,x,y,z,w=None,bbox=[None]*4,kx=3,ky=3,s=None,eps=1e-16)
scipy.interpolate.SmoothSphereBivariateSpline(self,theta,phi,r,w=None,s=0.0,eps=1e-16)
scipy.interpolate.SphereBivariateSpline(self,theta,phi,dtheta=0,dphi=0,grid=True)
scipy.interpolate.SphereBivariateSpline.ev(self,theta,phi,dtheta=0,dphi=0)
scipy.interpolate.UnivariateSpline(self,x,y,w=None,bbox=[None]*2,k=3,s=None,ext=0,check_finite=False)
scipy.interpolate.UnivariateSpline._from_tck(cls,tck,ext=0)
scipy.interpolate.UnivariateSpline._reset_class(self)
scipy.interpolate.UnivariateSpline._reset_nest(self,data,nest=None)
scipy.interpolate.UnivariateSpline._set_class(self,cls)
scipy.interpolate.UnivariateSpline.antiderivative(self,n=1)
scipy.interpolate.UnivariateSpline.derivative(self,n=1)
scipy.interpolate.UnivariateSpline.derivatives(self,x)
scipy.interpolate.UnivariateSpline.get_coeffs(self)
scipy.interpolate.UnivariateSpline.get_knots(self)
scipy.interpolate.UnivariateSpline.get_residual(self)
scipy.interpolate.UnivariateSpline.integral(self,a,b)
scipy.interpolate.UnivariateSpline.roots(self)
scipy.interpolate.UnivariateSpline.set_smoothing_factor(self,s)
scipy.interpolate.UnivariateSpline.validate_input(x,y,w,bbox,k,s,ext,check_finite)
scipy.interpolate._BivariateSplineBase(self,x,y,dx=0,dy=0,grid=True)
scipy.interpolate._BivariateSplineBase._from_tck(cls,tck)
scipy.interpolate._BivariateSplineBase.get_coeffs(self)
scipy.interpolate._BivariateSplineBase.get_knots(self)
scipy.interpolate._BivariateSplineBase.get_residual(self)
scipy.interpolate._BivariateSplineBase.partial_derivative(self,dx,dy)
scipy.interpolate._DerivedBivariateSpline(_BivariateSplineBase)
scipy.interpolate._DerivedBivariateSpline.fp(self)
scipy.interpolate._DerivedBivariateSpline.get_residual(self)
scipy.interpolate._fitpack2.BivariateSpline(_BivariateSplineBase)
scipy.interpolate._fitpack2.BivariateSpline._validate_input(x,y,z,w,kx,ky,eps)
scipy.interpolate._fitpack2.BivariateSpline.ev(self,xi,yi,dx=0,dy=0)
scipy.interpolate._fitpack2.BivariateSpline.integral(self,xa,xb,ya,yb)
scipy.interpolate._fitpack2.InterpolatedUnivariateSpline(self,x,y,w=None,bbox=[None]*2,k=3,ext=0,check_finite=False)
scipy.interpolate._fitpack2.InterpolatedUnivariateSpline.__init__(self,x,y,w=None,bbox=[None]*2,k=3,ext=0,check_finite=False)
scipy.interpolate._fitpack2.LSQBivariateSpline(self,x,y,z,tx,ty,w=None,bbox=[None]*4,kx=3,ky=3,eps=None)
scipy.interpolate._fitpack2.LSQBivariateSpline.__init__(self,x,y,z,tx,ty,w=None,bbox=[None]*4,kx=3,ky=3,eps=None)
scipy.interpolate._fitpack2.LSQSphereBivariateSpline(self,theta,phi,r,tt,tp,w=None,eps=1e-16)
scipy.interpolate._fitpack2.LSQSphereBivariateSpline.__init__(self,theta,phi,r,tt,tp,w=None,eps=1e-16)
scipy.interpolate._fitpack2.LSQUnivariateSpline(self,x,y,t,w=None,bbox=[None]*2,k=3,ext=0,check_finite=False)
scipy.interpolate._fitpack2.LSQUnivariateSpline.__init__(self,x,y,t,w=None,bbox=[None]*2,k=3,ext=0,check_finite=False)
scipy.interpolate._fitpack2.RectBivariateSpline(self,x,y,z,bbox=[None]*4,kx=3,ky=3,s=0)
scipy.interpolate._fitpack2.RectBivariateSpline.__init__(self,x,y,z,bbox=[None]*4,kx=3,ky=3,s=0)
scipy.interpolate._fitpack2.RectSphereBivariateSpline(self,u,v,r,s=0.0,pole_continuity=False,pole_values=None,pole_exact=False,pole_flat=False)
scipy.interpolate._fitpack2.RectSphereBivariateSpline.__init__(self,u,v,r,s=0.0,pole_continuity=False,pole_values=None,pole_exact=False,pole_flat=False)
scipy.interpolate._fitpack2.SmoothBivariateSpline(self,x,y,z,w=None,bbox=[None]*4,kx=3,ky=3,s=None,eps=1e-16)
scipy.interpolate._fitpack2.SmoothBivariateSpline.__init__(self,x,y,z,w=None,bbox=[None]*4,kx=3,ky=3,s=None,eps=1e-16)
scipy.interpolate._fitpack2.SmoothSphereBivariateSpline(self,theta,phi,r,w=None,s=0.0,eps=1e-16)
scipy.interpolate._fitpack2.SmoothSphereBivariateSpline.__init__(self,theta,phi,r,w=None,s=0.0,eps=1e-16)
scipy.interpolate._fitpack2.SphereBivariateSpline(self,theta,phi,dtheta=0,dphi=0,grid=True)
scipy.interpolate._fitpack2.SphereBivariateSpline.__call__(self,theta,phi,dtheta=0,dphi=0,grid=True)
scipy.interpolate._fitpack2.SphereBivariateSpline.ev(self,theta,phi,dtheta=0,dphi=0)
scipy.interpolate._fitpack2.UnivariateSpline(self,x,y,w=None,bbox=[None]*2,k=3,s=None,ext=0,check_finite=False)
scipy.interpolate._fitpack2.UnivariateSpline.__init__(self,x,y,w=None,bbox=[None]*2,k=3,s=None,ext=0,check_finite=False)
scipy.interpolate._fitpack2.UnivariateSpline._from_tck(cls,tck,ext=0)
scipy.interpolate._fitpack2.UnivariateSpline._reset_class(self)
scipy.interpolate._fitpack2.UnivariateSpline._reset_nest(self,data,nest=None)
scipy.interpolate._fitpack2.UnivariateSpline._set_class(self,cls)
scipy.interpolate._fitpack2.UnivariateSpline.antiderivative(self,n=1)
scipy.interpolate._fitpack2.UnivariateSpline.derivative(self,n=1)
scipy.interpolate._fitpack2.UnivariateSpline.derivatives(self,x)
scipy.interpolate._fitpack2.UnivariateSpline.get_coeffs(self)
scipy.interpolate._fitpack2.UnivariateSpline.get_knots(self)
scipy.interpolate._fitpack2.UnivariateSpline.get_residual(self)
scipy.interpolate._fitpack2.UnivariateSpline.integral(self,a,b)
scipy.interpolate._fitpack2.UnivariateSpline.roots(self)
scipy.interpolate._fitpack2.UnivariateSpline.set_smoothing_factor(self,s)
scipy.interpolate._fitpack2.UnivariateSpline.validate_input(x,y,w,bbox,k,s,ext,check_finite)
scipy.interpolate._fitpack2._BivariateSplineBase(self,x,y,dx=0,dy=0,grid=True)
scipy.interpolate._fitpack2._BivariateSplineBase.__call__(self,x,y,dx=0,dy=0,grid=True)
scipy.interpolate._fitpack2._BivariateSplineBase._from_tck(cls,tck)
scipy.interpolate._fitpack2._BivariateSplineBase.get_coeffs(self)
scipy.interpolate._fitpack2._BivariateSplineBase.get_knots(self)
scipy.interpolate._fitpack2._BivariateSplineBase.get_residual(self)
scipy.interpolate._fitpack2._BivariateSplineBase.partial_derivative(self,dx,dy)
scipy.interpolate._fitpack2._DerivedBivariateSpline(_BivariateSplineBase)
scipy.interpolate._fitpack2._DerivedBivariateSpline.fp(self)
scipy.interpolate._fitpack2._DerivedBivariateSpline.get_residual(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/interpolate.py----------------------------------------
scipy.interpolate.interpolate.__dir__()
scipy.interpolate.interpolate.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/_interpnd_info.py----------------------------------------
A:scipy.interpolate._interpnd_info.(f1, f2, df1, df2, x)->symbols(['f1', 'f2', 'df1', 'df2', 'x'])
A:scipy.interpolate._interpnd_info.wpp->w.diff(x, 2).expand()
A:scipy.interpolate._interpnd_info.intwpp2->(wpp ** 2).integrate((x, 0, 1)).expand()
A:scipy.interpolate._interpnd_info.A->Matrix([[intwpp2.coeff(df1 ** 2), intwpp2.coeff(df1 * df2) / 2], [intwpp2.coeff(df1 * df2) / 2, intwpp2.coeff(df2 ** 2)]])
scipy.interpolate._interpnd_info._estimate_gradients_2d_global()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/rbf.py----------------------------------------
scipy.interpolate.rbf.__dir__()
scipy.interpolate.rbf.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/_pade.py----------------------------------------
A:scipy.interpolate._pade.an->asarray(an)
A:scipy.interpolate._pade.Akj->eye(N + 1, n + 1, dtype=an.dtype)
A:scipy.interpolate._pade.Bkj->zeros((N + 1, m), dtype=an.dtype)
A:scipy.interpolate._pade.C->hstack((Akj, Bkj))
A:scipy.interpolate._pade.pq->scipy.linalg.solve(C, an)
scipy.interpolate._pade.pade(an,m,n=None)
scipy.interpolate.pade(an,m,n=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/_rgi.py----------------------------------------
A:scipy.interpolate._rgi.p->numpy.ascontiguousarray(p)
A:scipy.interpolate._rgi._SPLINE_METHODS->list(_SPLINE_DEGREE_MAP.keys())
A:scipy.interpolate._rgi.(self.grid, self._descending_dimensions)->_check_points(points)
A:scipy.interpolate._rgi.self.values->numpy.flip(values, axis=self._descending_dimensions)
A:scipy.interpolate._rgi.self.fill_value->self._check_fill_value(self.values, fill_value)
A:scipy.interpolate._rgi.values->numpy.asarray(values)
A:scipy.interpolate._rgi.(xi, xi_shape, ndim, nans, out_of_bounds)->self._prepare_xi(xi)
A:scipy.interpolate._rgi.(indices, norm_distances)->self._find_indices(xi.T)
A:scipy.interpolate._rgi.out->numpy.empty(indices.shape[1], dtype=self.values.dtype)
A:scipy.interpolate._rgi.result->numpy.empty_like(xi[:, 0])
A:scipy.interpolate._rgi.ndim->len(np.atleast_1d(point))
A:scipy.interpolate._rgi.xi->xi.reshape(-1, xi.shape[-1]).reshape(-1, xi.shape[-1])
A:scipy.interpolate._rgi.nans->numpy.any(np.isnan(xi), axis=-1)
A:scipy.interpolate._rgi.out_of_bounds->numpy.zeros(xi.shape[1], dtype=bool)
A:scipy.interpolate._rgi.zipped1->zip(indices, shift_norm_distances)
A:scipy.interpolate._rgi.zipped2->zip(shift_indices, norm_distances)
A:scipy.interpolate._rgi.hypercube->itertools.product(*zip(zipped1, zipped2))
A:scipy.interpolate._rgi.value->numpy.array([0.0])
A:scipy.interpolate._rgi.(edge_indices, weights)->zip(*h)
A:scipy.interpolate._rgi.weight->numpy.array([1.0])
A:scipy.interpolate._rgi.axes->tuple(range(self.values.ndim))
A:scipy.interpolate._rgi.first_values->_eval_func(self.grid[last_dim], values, xi[:, last_dim], k)
A:scipy.interpolate._rgi.folded_values->_eval_func(self.grid[i], folded_values, xi[j, i], k)
A:scipy.interpolate._rgi.local_interp->PchipInterpolator(x, y, axis=0)
A:scipy.interpolate._rgi.(grid, descending_dimensions)->_check_points(points)
A:scipy.interpolate._rgi.interp->RectBivariateSpline(points[0], points[1], values[:])
A:scipy.interpolate._rgi.idx_valid->numpy.all((grid[0][0] <= xi[:, 0], xi[:, 0] <= grid[0][-1], grid[1][0] <= xi[:, 1], xi[:, 1] <= grid[1][-1]), axis=0)
A:scipy.interpolate._rgi.result[idx_valid]->RectBivariateSpline(points[0], points[1], values[:]).ev(xi[idx_valid, 0], xi[idx_valid, 1])
scipy.interpolate.RegularGridInterpolator(self,points,values,method='linear',bounds_error=True,fill_value=np.nan)
scipy.interpolate.RegularGridInterpolator._check_dimensionality(self,grid,values)
scipy.interpolate.RegularGridInterpolator._check_fill_value(self,values,fill_value)
scipy.interpolate.RegularGridInterpolator._check_points(self,points)
scipy.interpolate.RegularGridInterpolator._check_values(self,values)
scipy.interpolate.RegularGridInterpolator._do_pchip(x,y,pt,k)
scipy.interpolate.RegularGridInterpolator._do_spline_fit(x,y,pt,k)
scipy.interpolate.RegularGridInterpolator._evaluate_linear(self,indices,norm_distances)
scipy.interpolate.RegularGridInterpolator._evaluate_nearest(self,indices,norm_distances)
scipy.interpolate.RegularGridInterpolator._evaluate_spline(self,xi,method)
scipy.interpolate.RegularGridInterpolator._find_indices(self,xi)
scipy.interpolate.RegularGridInterpolator._find_out_of_bounds(self,xi)
scipy.interpolate.RegularGridInterpolator._prepare_xi(self,xi)
scipy.interpolate.RegularGridInterpolator._validate_grid_dimensions(self,points,method)
scipy.interpolate._check_dimensionality(points,values)
scipy.interpolate._check_points(points)
scipy.interpolate._rgi.RegularGridInterpolator(self,points,values,method='linear',bounds_error=True,fill_value=np.nan)
scipy.interpolate._rgi.RegularGridInterpolator.__init__(self,points,values,method='linear',bounds_error=True,fill_value=np.nan)
scipy.interpolate._rgi.RegularGridInterpolator._check_dimensionality(self,grid,values)
scipy.interpolate._rgi.RegularGridInterpolator._check_fill_value(self,values,fill_value)
scipy.interpolate._rgi.RegularGridInterpolator._check_points(self,points)
scipy.interpolate._rgi.RegularGridInterpolator._check_values(self,values)
scipy.interpolate._rgi.RegularGridInterpolator._do_pchip(x,y,pt,k)
scipy.interpolate._rgi.RegularGridInterpolator._do_spline_fit(x,y,pt,k)
scipy.interpolate._rgi.RegularGridInterpolator._evaluate_linear(self,indices,norm_distances)
scipy.interpolate._rgi.RegularGridInterpolator._evaluate_nearest(self,indices,norm_distances)
scipy.interpolate._rgi.RegularGridInterpolator._evaluate_spline(self,xi,method)
scipy.interpolate._rgi.RegularGridInterpolator._find_indices(self,xi)
scipy.interpolate._rgi.RegularGridInterpolator._find_out_of_bounds(self,xi)
scipy.interpolate._rgi.RegularGridInterpolator._prepare_xi(self,xi)
scipy.interpolate._rgi.RegularGridInterpolator._validate_grid_dimensions(self,points,method)
scipy.interpolate._rgi._check_dimensionality(points,values)
scipy.interpolate._rgi._check_points(points)
scipy.interpolate._rgi.interpn(points,values,xi,method='linear',bounds_error=True,fill_value=np.nan)
scipy.interpolate.interpn(points,values,xi,method='linear',bounds_error=True,fill_value=np.nan)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/_fitpack_impl.py----------------------------------------
A:scipy.interpolate._fitpack_impl.x->atleast_1d(x)
A:scipy.interpolate._fitpack_impl.w->atleast_1d(w)
A:scipy.interpolate._fitpack_impl._parcur_cache['u']->zeros(m, float)
A:scipy.interpolate._fitpack_impl._parcur_cache['t']->atleast_1d(t)
A:scipy.interpolate._fitpack_impl.n->len(t)
A:scipy.interpolate._fitpack_impl.nest->max(m + k + 1, 2 * k + 3)
A:scipy.interpolate._fitpack_impl.(t, c, o)->_fitpack._parcur(ravel(transpose(x)), w, u, ub, ue, k, task, ipar, s, t, nest, wrk, iwrk, per)
A:scipy.interpolate._fitpack_impl.(x, y)->map(atleast_1d, [x, y])
A:scipy.interpolate._fitpack_impl.m->len(x)
A:scipy.interpolate._fitpack_impl.numknots->len(t)
A:scipy.interpolate._fitpack_impl._curfit_cache['t']->empty((numknots + 2 * k + 2,), float)
A:scipy.interpolate._fitpack_impl.t->empty((nest,), float)
A:scipy.interpolate._fitpack_impl._curfit_cache['wrk']->empty((m * (k + 1) + nest * (7 + 3 * k),), float)
A:scipy.interpolate._fitpack_impl._curfit_cache['iwrk']->empty((nest,), dfitpack_int)
A:scipy.interpolate._fitpack_impl.(n, c, fp, ier)->dfitpack.percur(task, x, y, w, t, wrk, iwrk, k, s)
A:scipy.interpolate._fitpack_impl.(y, ier)->_fitpack._spl_(x, der, t, c, k, ext)
A:scipy.interpolate._fitpack_impl.(aint, wrk)->dfitpack.splint(t, c, k, a, b)
A:scipy.interpolate._fitpack_impl.(z, m, ier)->dfitpack.sproot(t, c, mest)
A:scipy.interpolate._fitpack_impl.(d, ier)->dfitpack.spalde(t, c, k + 1, x[0])
A:scipy.interpolate._fitpack_impl.(x, y, z)->map(ravel, [x, y, z])
A:scipy.interpolate._fitpack_impl.xb->atleast_1d(x).min()
A:scipy.interpolate._fitpack_impl.xe->atleast_1d(x).max()
A:scipy.interpolate._fitpack_impl.yb->y.min()
A:scipy.interpolate._fitpack_impl.ye->y.max()
A:scipy.interpolate._fitpack_impl._surfit_cache['tx']->atleast_1d(tx)
A:scipy.interpolate._fitpack_impl.nx->len(_surfit_cache['tx'])
A:scipy.interpolate._fitpack_impl._surfit_cache['ty']->atleast_1d(ty)
A:scipy.interpolate._fitpack_impl.ny->len(_surfit_cache['ty'])
A:scipy.interpolate._fitpack_impl.nxest->int(kx + sqrt(3 * m))
A:scipy.interpolate._fitpack_impl.nyest->int(ky + sqrt(3 * m))
A:scipy.interpolate._fitpack_impl.ne->max(nxest, nyest)
A:scipy.interpolate._fitpack_impl.lwrk1->_int_overflow(u * v * (2 + b1 + b2) + 2 * (u + v + km * (m + ne) + ne - kx - ky) + b2 + 1, msg=msg)
A:scipy.interpolate._fitpack_impl.lwrk2->_int_overflow(u * v * (b2 + 1) + b2, msg=msg)
A:scipy.interpolate._fitpack_impl.(tx, ty, c, o)->_fitpack._surfit(x, y, z, w, xb, xe, yb, ye, kx, ky, task, s, eps, tx, ty, nxest, nyest, wrk, lwrk1, lwrk2)
A:scipy.interpolate._fitpack_impl.ierm->min(11, max(-3, ier))
A:scipy.interpolate._fitpack_impl.(z, ier)->_fitpack._bispev(tx, ty, c, kx, ky, x, y, dx, dy)
A:scipy.interpolate._fitpack_impl.(tt, cc_val, kk)->insert(x, [t, c_vals, k], m)
A:scipy.interpolate._fitpack_impl.(tt, cc, ier)->_fitpack._insert(per, t, c, k, x, m)
scipy.interpolate._fitpack_impl._int_overflow(x,msg=None)
scipy.interpolate._fitpack_impl.bisplev(x,y,tck,dx=0,dy=0)
scipy.interpolate._fitpack_impl.bisplrep(x,y,z,w=None,xb=None,xe=None,yb=None,ye=None,kx=3,ky=3,task=0,s=None,eps=1e-16,tx=None,ty=None,full_output=0,nxest=None,nyest=None,quiet=1)
scipy.interpolate._fitpack_impl.dblint(xa,xb,ya,yb,tck)
scipy.interpolate._fitpack_impl.insert(x,tck,m=1,per=0)
scipy.interpolate._fitpack_impl.spalde(x,tck)
scipy.interpolate._fitpack_impl.splantider(tck,n=1)
scipy.interpolate._fitpack_impl.splder(tck,n=1)
scipy.interpolate._fitpack_impl.splev(x,tck,der=0,ext=0)
scipy.interpolate._fitpack_impl.splint(a,b,tck,full_output=0)
scipy.interpolate._fitpack_impl.splprep(x,w=None,u=None,ub=None,ue=None,k=3,task=0,s=None,t=None,full_output=0,nest=None,per=0,quiet=1)
scipy.interpolate._fitpack_impl.splrep(x,y,w=None,xb=None,xe=None,k=3,task=0,s=None,t=None,full_output=0,per=0,quiet=1)
scipy.interpolate._fitpack_impl.sproot(tck,mest=10)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/_interpolate.py----------------------------------------
A:scipy.interpolate._interpolate.M->len(x)
A:scipy.interpolate._interpolate.p->PPoly.construct_fast(c, self.x[n], extrapolate=extrapolate)
A:scipy.interpolate._interpolate.pt->poly1d(w[j])
A:scipy.interpolate._interpolate.x->numpy.ascontiguousarray(x.reshape(-1, x.shape[-1]), dtype=np.float_)
A:scipy.interpolate._interpolate.y->_fitpack_py.splev(t[:-1], tck, der=m)
A:scipy.interpolate._interpolate.z->transpose(z)
A:scipy.interpolate._interpolate.j->numpy.argsort(y)
A:scipy.interpolate._interpolate.self.tck->_fitpack_py.bisplrep(x, y, z, kx=kx, ky=ky, s=0.0)
A:scipy.interpolate._interpolate.(nx, tx, ny, ty, c, fp, ier)->dfitpack.regrid_smth(x, y, z, None, None, None, None, kx=kx, ky=ky, s=0.0)
A:scipy.interpolate._interpolate.any_out_of_bounds_x->numpy.any(out_of_bounds_x)
A:scipy.interpolate._interpolate.any_out_of_bounds_y->numpy.any(out_of_bounds_y)
A:scipy.interpolate._interpolate.ind->numpy.argsort(x, kind='mergesort')
A:scipy.interpolate._interpolate.self._y->object.__new__(cls)._reshape_yi(self.y)
A:scipy.interpolate._interpolate.self._x_shift->numpy.nextafter(self.x, np.inf)
A:scipy.interpolate._interpolate.mask->numpy.isnan(self.x)
A:scipy.interpolate._interpolate.xx->numpy.linspace(np.nanmin(self.x), np.nanmax(self.x), len(self.x))
A:scipy.interpolate._interpolate.yy->numpy.ones_like(self._y)
A:scipy.interpolate._interpolate.self._spline->make_interp_spline(xx, yy, k=order, check_finite=False)
A:scipy.interpolate._interpolate.below_above[ii]->_check_broadcast_up_to(below_above[ii], broadcast_shape, names[ii])
A:scipy.interpolate._interpolate.fill_value->numpy.asarray(fill_value)
A:scipy.interpolate._interpolate.x_new_indices->x_new_indices.clip(1 - self._ind, len(self.x) - self._ind).astype(intp).clip(1 - self._ind, len(self.x) - self._ind).astype(intp)
A:scipy.interpolate._interpolate.out->PPoly.construct_fast(c, self.x[n], extrapolate=extrapolate).integrate(a, b, extrapolate=extrapolate)
A:scipy.interpolate._interpolate.x_new->asarray(x_new)
A:scipy.interpolate._interpolate.y_new->object.__new__(cls)._call(self, x_new)
A:scipy.interpolate._interpolate.(below_bounds, above_bounds)->object.__new__(cls)._check_bounds(x_new)
A:scipy.interpolate._interpolate.self.c->object.__new__(cls).c.copy()
A:scipy.interpolate._interpolate.self.x->tuple(self.x)
A:scipy.interpolate._interpolate.extrapolate->bool(extrapolate)
A:scipy.interpolate._interpolate.dx->numpy.diff(pp.x)
A:scipy.interpolate._interpolate.dtype->object.__new__(cls)._get_dtype(self.c.dtype)
A:scipy.interpolate._interpolate.self->object.__new__(cls)
A:scipy.interpolate._interpolate.c->PPoly.construct_fast(c, self.x[n], extrapolate=extrapolate).integrate(a, b, extrapolate=extrapolate).reshape(c.shape[2:])
A:scipy.interpolate._interpolate.k2->max(c.shape[0], self.c.shape[0])
A:scipy.interpolate._interpolate.c2->c2.transpose(perm).transpose(perm)
A:scipy.interpolate._interpolate.l->list(range(out.ndim))
A:scipy.interpolate._interpolate.factor->scipy.special.poch(np.arange(c.shape[0], 0, -1), nu)
A:scipy.interpolate._interpolate.range_int->numpy.empty((prod(self.c.shape[2:]),), dtype=self.c.dtype)
A:scipy.interpolate._interpolate.(n_periods, left)->divmod(interval, period)
A:scipy.interpolate._interpolate.remainder_int->numpy.empty_like(range_int)
A:scipy.interpolate._interpolate.r->_ppoly.real_roots(self.c.reshape(self.c.shape[0], self.c.shape[1], -1), self.x, y, bool(discontinuity), bool(extrapolate))
A:scipy.interpolate._interpolate.r2->numpy.empty(prod(self.c.shape[2:]), dtype=object)
A:scipy.interpolate._interpolate.cvals->numpy.empty((k + 1, len(t) - 1), dtype=c.dtype)
A:scipy.interpolate._interpolate.bp->bp.antiderivative().antiderivative()
A:scipy.interpolate._interpolate.ib->object.__new__(cls).antiderivative()
A:scipy.interpolate._interpolate.k->max(k, max(orders))
A:scipy.interpolate._interpolate.xi->numpy.asarray(xi)
A:scipy.interpolate._interpolate.n1->min(n - n2, len(y2))
A:scipy.interpolate._interpolate.n2->min(n - n1, len(y2))
A:scipy.interpolate._interpolate.b->BPoly._raise_degree(b, k - len(b))
A:scipy.interpolate._interpolate.self.extrapolate->bool(extrapolate)
A:scipy.interpolate._interpolate.ndim->len(self.x)
A:scipy.interpolate._interpolate.nu->numpy.asarray(nu, dtype=np.intc)
A:scipy.interpolate._interpolate.dim1->prod(self.c.shape[:ndim])
A:scipy.interpolate._interpolate.dim2->prod(self.c.shape[ndim:2 * ndim])
A:scipy.interpolate._interpolate.dim3->prod(self.c.shape[2 * ndim:])
A:scipy.interpolate._interpolate.ks->numpy.array(self.c.shape[:ndim], dtype=np.intc)
A:scipy.interpolate._interpolate.sl[axis]->slice(None)
A:scipy.interpolate._interpolate.shp->list(c2.shape)
A:scipy.interpolate._interpolate.perm->list(range(ndim))
A:scipy.interpolate._interpolate.perm2->list(range(c2.ndim))
A:scipy.interpolate._interpolate.swap->list(range(c.ndim))
scipy.interpolate.BPoly(_PPolyBase)
scipy.interpolate.BPoly._construct_from_derivatives(xa,xb,ya,yb)
scipy.interpolate.BPoly._evaluate(self,x,nu,extrapolate,out)
scipy.interpolate.BPoly._raise_degree(c,d)
scipy.interpolate.BPoly.antiderivative(self,nu=1)
scipy.interpolate.BPoly.derivative(self,nu=1)
scipy.interpolate.BPoly.extend(self,c,x)
scipy.interpolate.BPoly.from_derivatives(cls,xi,yi,orders=None,extrapolate=None)
scipy.interpolate.BPoly.from_power_basis(cls,pp,extrapolate=None)
scipy.interpolate.BPoly.integrate(self,a,b,extrapolate=None)
scipy.interpolate.NdPPoly(self,c,x,extrapolate=None)
scipy.interpolate.NdPPoly._antiderivative_inplace(self,nu,axis)
scipy.interpolate.NdPPoly._derivative_inplace(self,nu,axis)
scipy.interpolate.NdPPoly._ensure_c_contiguous(self)
scipy.interpolate.NdPPoly._get_dtype(self,dtype)
scipy.interpolate.NdPPoly.antiderivative(self,nu)
scipy.interpolate.NdPPoly.construct_fast(cls,c,x,extrapolate=None)
scipy.interpolate.NdPPoly.derivative(self,nu)
scipy.interpolate.NdPPoly.integrate(self,ranges,extrapolate=None)
scipy.interpolate.NdPPoly.integrate_1d(self,a,b,axis,extrapolate=None)
scipy.interpolate.PPoly(_PPolyBase)
scipy.interpolate.PPoly._evaluate(self,x,nu,extrapolate,out)
scipy.interpolate.PPoly.antiderivative(self,nu=1)
scipy.interpolate.PPoly.derivative(self,nu=1)
scipy.interpolate.PPoly.from_bernstein_basis(cls,bp,extrapolate=None)
scipy.interpolate.PPoly.from_spline(cls,tck,extrapolate=None)
scipy.interpolate.PPoly.integrate(self,a,b,extrapolate=None)
scipy.interpolate.PPoly.roots(self,discontinuity=True,extrapolate=None)
scipy.interpolate.PPoly.solve(self,y=0.0,discontinuity=True,extrapolate=None)
scipy.interpolate._PPolyBase(self,c,x,extrapolate=None,axis=0)
scipy.interpolate._PPolyBase._ensure_c_contiguous(self)
scipy.interpolate._PPolyBase._get_dtype(self,dtype)
scipy.interpolate._PPolyBase.construct_fast(cls,c,x,extrapolate=None,axis=0)
scipy.interpolate._PPolyBase.extend(self,c,x)
scipy.interpolate._check_broadcast_up_to(arr_from,shape_to,name)
scipy.interpolate._do_extrapolate(fill_value)
scipy.interpolate._interpolate.BPoly(_PPolyBase)
scipy.interpolate._interpolate.BPoly._construct_from_derivatives(xa,xb,ya,yb)
scipy.interpolate._interpolate.BPoly._evaluate(self,x,nu,extrapolate,out)
scipy.interpolate._interpolate.BPoly._raise_degree(c,d)
scipy.interpolate._interpolate.BPoly.antiderivative(self,nu=1)
scipy.interpolate._interpolate.BPoly.derivative(self,nu=1)
scipy.interpolate._interpolate.BPoly.extend(self,c,x)
scipy.interpolate._interpolate.BPoly.from_derivatives(cls,xi,yi,orders=None,extrapolate=None)
scipy.interpolate._interpolate.BPoly.from_power_basis(cls,pp,extrapolate=None)
scipy.interpolate._interpolate.BPoly.integrate(self,a,b,extrapolate=None)
scipy.interpolate._interpolate.NdPPoly(self,c,x,extrapolate=None)
scipy.interpolate._interpolate.NdPPoly.__init__(self,c,x,extrapolate=None)
scipy.interpolate._interpolate.NdPPoly._antiderivative_inplace(self,nu,axis)
scipy.interpolate._interpolate.NdPPoly._derivative_inplace(self,nu,axis)
scipy.interpolate._interpolate.NdPPoly._ensure_c_contiguous(self)
scipy.interpolate._interpolate.NdPPoly._get_dtype(self,dtype)
scipy.interpolate._interpolate.NdPPoly.antiderivative(self,nu)
scipy.interpolate._interpolate.NdPPoly.construct_fast(cls,c,x,extrapolate=None)
scipy.interpolate._interpolate.NdPPoly.derivative(self,nu)
scipy.interpolate._interpolate.NdPPoly.integrate(self,ranges,extrapolate=None)
scipy.interpolate._interpolate.NdPPoly.integrate_1d(self,a,b,axis,extrapolate=None)
scipy.interpolate._interpolate.PPoly(_PPolyBase)
scipy.interpolate._interpolate.PPoly._evaluate(self,x,nu,extrapolate,out)
scipy.interpolate._interpolate.PPoly.antiderivative(self,nu=1)
scipy.interpolate._interpolate.PPoly.derivative(self,nu=1)
scipy.interpolate._interpolate.PPoly.from_bernstein_basis(cls,bp,extrapolate=None)
scipy.interpolate._interpolate.PPoly.from_spline(cls,tck,extrapolate=None)
scipy.interpolate._interpolate.PPoly.integrate(self,a,b,extrapolate=None)
scipy.interpolate._interpolate.PPoly.roots(self,discontinuity=True,extrapolate=None)
scipy.interpolate._interpolate.PPoly.solve(self,y=0.0,discontinuity=True,extrapolate=None)
scipy.interpolate._interpolate._PPolyBase(self,c,x,extrapolate=None,axis=0)
scipy.interpolate._interpolate._PPolyBase.__init__(self,c,x,extrapolate=None,axis=0)
scipy.interpolate._interpolate._PPolyBase._ensure_c_contiguous(self)
scipy.interpolate._interpolate._PPolyBase._get_dtype(self,dtype)
scipy.interpolate._interpolate._PPolyBase.construct_fast(cls,c,x,extrapolate=None,axis=0)
scipy.interpolate._interpolate._PPolyBase.extend(self,c,x)
scipy.interpolate._interpolate._check_broadcast_up_to(arr_from,shape_to,name)
scipy.interpolate._interpolate._do_extrapolate(fill_value)
scipy.interpolate._interpolate.interp1d(self,x,y,kind='linear',axis=-1,copy=True,bounds_error=None,fill_value=np.nan,assume_sorted=False)
scipy.interpolate._interpolate.interp1d.__init__(self,x,y,kind='linear',axis=-1,copy=True,bounds_error=None,fill_value=np.nan,assume_sorted=False)
scipy.interpolate._interpolate.interp1d._call_linear(self,x_new)
scipy.interpolate._interpolate.interp1d._call_linear_np(self,x_new)
scipy.interpolate._interpolate.interp1d._call_nan_spline(self,x_new)
scipy.interpolate._interpolate.interp1d._call_nearest(self,x_new)
scipy.interpolate._interpolate.interp1d._call_previousnext(self,x_new)
scipy.interpolate._interpolate.interp1d._call_spline(self,x_new)
scipy.interpolate._interpolate.interp1d._check_and_update_bounds_error_for_extrapolation(self)
scipy.interpolate._interpolate.interp1d._check_bounds(self,x_new)
scipy.interpolate._interpolate.interp1d._evaluate(self,x_new)
scipy.interpolate._interpolate.interp1d.fill_value(self)
scipy.interpolate._interpolate.interp1d.fill_value(self,fill_value)
scipy.interpolate._interpolate.interp2d(self,x,y,z,kind='linear',copy=True,bounds_error=False,fill_value=None)
scipy.interpolate._interpolate.interp2d.__init__(self,x,y,z,kind='linear',copy=True,bounds_error=False,fill_value=None)
scipy.interpolate._interpolate.lagrange(x,w)
scipy.interpolate.interp1d(self,x,y,kind='linear',axis=-1,copy=True,bounds_error=None,fill_value=np.nan,assume_sorted=False)
scipy.interpolate.interp1d._call_linear(self,x_new)
scipy.interpolate.interp1d._call_linear_np(self,x_new)
scipy.interpolate.interp1d._call_nan_spline(self,x_new)
scipy.interpolate.interp1d._call_nearest(self,x_new)
scipy.interpolate.interp1d._call_previousnext(self,x_new)
scipy.interpolate.interp1d._call_spline(self,x_new)
scipy.interpolate.interp1d._check_and_update_bounds_error_for_extrapolation(self)
scipy.interpolate.interp1d._check_bounds(self,x_new)
scipy.interpolate.interp1d._evaluate(self,x_new)
scipy.interpolate.interp1d.fill_value(self)
scipy.interpolate.interp1d.fill_value(self,fill_value)
scipy.interpolate.interp2d(self,x,y,z,kind='linear',copy=True,bounds_error=False,fill_value=None)
scipy.interpolate.lagrange(x,w)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/_rbfinterp.py----------------------------------------
A:scipy.interpolate._rbfinterp.nmonos->comb(degree + ndim, ndim, exact=True)
A:scipy.interpolate._rbfinterp.out->out.reshape((nx,) + self.d_shape).reshape((nx,) + self.d_shape)
A:scipy.interpolate._rbfinterp.(lhs, rhs, shift, scale)->_build_system(y, d, smoothing, kernel, epsilon, powers)
A:scipy.interpolate._rbfinterp.(_, _, coeffs, info)->dgesv(lhs, rhs, overwrite_a=True, overwrite_b=True)
A:scipy.interpolate._rbfinterp.pmat->_polynomial_matrix((y - shift) / scale, powers)
A:scipy.interpolate._rbfinterp.rank->numpy.linalg.matrix_rank(pmat)
A:scipy.interpolate._rbfinterp.y->numpy.asarray(y, dtype=float, order='C')
A:scipy.interpolate._rbfinterp.d->d.view(float).view(float)
A:scipy.interpolate._rbfinterp.smoothing->numpy.asarray(smoothing, dtype=float, order='C')
A:scipy.interpolate._rbfinterp.kernel->kernel.lower().lower()
A:scipy.interpolate._rbfinterp.epsilon->float(epsilon)
A:scipy.interpolate._rbfinterp.min_degree->_NAME_TO_MIN_DEGREE.get(kernel, -1)
A:scipy.interpolate._rbfinterp.degree->int(degree)
A:scipy.interpolate._rbfinterp.neighbors->int(min(neighbors, ny))
A:scipy.interpolate._rbfinterp.powers->_monomial_powers(ndim, degree)
A:scipy.interpolate._rbfinterp.(shift, scale, coeffs)->_build_and_solve_system(ynbr, dnbr, snbr, self.kernel, self.epsilon, self.powers)
A:scipy.interpolate._rbfinterp.self._tree->KDTree(y)
A:scipy.interpolate._rbfinterp.nnei->len(y)
A:scipy.interpolate._rbfinterp.vec->_build_evaluation_coefficients(x, y, self.kernel, self.epsilon, self.powers, shift, scale)
A:scipy.interpolate._rbfinterp.out[i:i + chunksize, :]->numpy.dot(vec, coeffs)
A:scipy.interpolate._rbfinterp.x->numpy.asarray(x, dtype=float, order='C')
A:scipy.interpolate._rbfinterp.memory_budget->max(x.size + self.y.size + self.d.size, 1000000)
A:scipy.interpolate._rbfinterp.(_, yindices)->self._tree.query(x, self.neighbors)
A:scipy.interpolate._rbfinterp.yindices->numpy.sort(yindices, axis=1)
A:scipy.interpolate._rbfinterp.(yindices, inv)->numpy.unique(yindices, return_inverse=True, axis=0)
A:scipy.interpolate._rbfinterp.out[xidx]->self._chunk_evaluator(xnbr, ynbr, shift, scale, coeffs, memory_budget=memory_budget)
scipy.interpolate.RBFInterpolator(self,y,d,neighbors=None,smoothing=0.0,kernel='thin_plate_spline',epsilon=None,degree=None)
scipy.interpolate.RBFInterpolator._chunk_evaluator(self,x,y,shift,scale,coeffs,memory_budget=1000000)
scipy.interpolate._build_and_solve_system(y,d,smoothing,kernel,epsilon,powers)
scipy.interpolate._monomial_powers(ndim,degree)
scipy.interpolate._rbfinterp.RBFInterpolator(self,y,d,neighbors=None,smoothing=0.0,kernel='thin_plate_spline',epsilon=None,degree=None)
scipy.interpolate._rbfinterp.RBFInterpolator.__init__(self,y,d,neighbors=None,smoothing=0.0,kernel='thin_plate_spline',epsilon=None,degree=None)
scipy.interpolate._rbfinterp.RBFInterpolator._chunk_evaluator(self,x,y,shift,scale,coeffs,memory_budget=1000000)
scipy.interpolate._rbfinterp._build_and_solve_system(y,d,smoothing,kernel,epsilon,powers)
scipy.interpolate._rbfinterp._monomial_powers(ndim,degree)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/_fitpack_py.py----------------------------------------
A:scipy.interpolate._fitpack_py.res->_impl.splrep(x, y, w, xb, xe, k, task, s, t, full_output, per, quiet)
A:scipy.interpolate._fitpack_py.sh->tuple(range(c.ndim))
A:scipy.interpolate._fitpack_py.c->c.transpose(sh[1:] + (0,)).transpose(sh[1:] + (0,))
A:scipy.interpolate._fitpack_py.(t_, c_, k_)->_impl.insert(x, (t, c, k), m, per)
A:scipy.interpolate._fitpack_py.c_->c_.transpose((sh[-1],) + sh[:-1]).transpose((sh[-1],) + sh[:-1])
scipy.interpolate._fitpack_py.insert(x,tck,m=1,per=0)
scipy.interpolate._fitpack_py.spalde(x,tck)
scipy.interpolate._fitpack_py.splantider(tck,n=1)
scipy.interpolate._fitpack_py.splder(tck,n=1)
scipy.interpolate._fitpack_py.splev(x,tck,der=0,ext=0)
scipy.interpolate._fitpack_py.splint(a,b,tck,full_output=0)
scipy.interpolate._fitpack_py.splprep(x,w=None,u=None,ub=None,ue=None,k=3,task=0,s=None,t=None,full_output=0,nest=None,per=0,quiet=1)
scipy.interpolate._fitpack_py.splrep(x,y,w=None,xb=None,xe=None,k=3,task=0,s=None,t=None,full_output=0,per=0,quiet=1)
scipy.interpolate._fitpack_py.sproot(tck,mest=10)
scipy.interpolate.insert(x,tck,m=1,per=0)
scipy.interpolate.spalde(x,tck)
scipy.interpolate.splantider(tck,n=1)
scipy.interpolate.splder(tck,n=1)
scipy.interpolate.splev(x,tck,der=0,ext=0)
scipy.interpolate.splint(a,b,tck,full_output=0)
scipy.interpolate.splprep(x,w=None,u=None,ub=None,ue=None,k=3,task=0,s=None,t=None,full_output=0,nest=None,per=0,quiet=1)
scipy.interpolate.splrep(x,y,w=None,xb=None,xe=None,k=3,task=0,s=None,t=None,full_output=0,per=0,quiet=1)
scipy.interpolate.sproot(tck,mest=10)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/_rbf.py----------------------------------------
A:scipy.interpolate._rbf.self.function->kwargs.pop('function', 'multiquadric')
A:scipy.interpolate._rbf.self._function->self.function.__get__(self, Rbf)
A:scipy.interpolate._rbf.a0->self._function(r)
A:scipy.interpolate._rbf.self.xi->numpy.asarray([np.asarray(a, dtype=np.float_).flatten() for a in args[:-1]])
A:scipy.interpolate._rbf.self.mode->kwargs.pop('mode', '1-D')
A:scipy.interpolate._rbf.self.di->numpy.asarray(args[-1])
A:scipy.interpolate._rbf.self.norm->kwargs.pop('norm', 'euclidean')
A:scipy.interpolate._rbf.self.epsilon->numpy.power(np.prod(edges) / self.N, 1.0 / edges.size)
A:scipy.interpolate._rbf.ximax->numpy.amax(self.xi, axis=1)
A:scipy.interpolate._rbf.ximin->numpy.amin(self.xi, axis=1)
A:scipy.interpolate._rbf.self.smooth->kwargs.pop('smooth', 0.0)
A:scipy.interpolate._rbf.self.nodes->scipy.linalg.solve(self.A, self.di)
A:scipy.interpolate._rbf.(lu, piv)->scipy.linalg.lu_factor(self.A)
A:scipy.interpolate._rbf.self.nodes[:, i]->scipy.linalg.lu_solve((lu, piv), self.di[:, i])
A:scipy.interpolate._rbf.r->self._call_norm(xa, self.xi)
A:scipy.interpolate._rbf.xa->numpy.asarray([a.flatten() for a in args], dtype=np.float_)
scipy.interpolate.Rbf(self,*args,**kwargs)
scipy.interpolate.Rbf.A(self)
scipy.interpolate.Rbf._call_norm(self,x1,x2)
scipy.interpolate.Rbf._h_cubic(self,r)
scipy.interpolate.Rbf._h_gaussian(self,r)
scipy.interpolate.Rbf._h_inverse_multiquadric(self,r)
scipy.interpolate.Rbf._h_linear(self,r)
scipy.interpolate.Rbf._h_multiquadric(self,r)
scipy.interpolate.Rbf._h_quintic(self,r)
scipy.interpolate.Rbf._h_thin_plate(self,r)
scipy.interpolate.Rbf._init_function(self,r)
scipy.interpolate._rbf.Rbf(self,*args,**kwargs)
scipy.interpolate._rbf.Rbf.A(self)
scipy.interpolate._rbf.Rbf.__init__(self,*args,**kwargs)
scipy.interpolate._rbf.Rbf._call_norm(self,x1,x2)
scipy.interpolate._rbf.Rbf._h_cubic(self,r)
scipy.interpolate._rbf.Rbf._h_gaussian(self,r)
scipy.interpolate._rbf.Rbf._h_inverse_multiquadric(self,r)
scipy.interpolate._rbf.Rbf._h_linear(self,r)
scipy.interpolate._rbf.Rbf._h_multiquadric(self,r)
scipy.interpolate._rbf.Rbf._h_quintic(self,r)
scipy.interpolate._rbf.Rbf._h_thin_plate(self,r)
scipy.interpolate._rbf.Rbf._init_function(self,r)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/_polyint.py----------------------------------------
A:scipy.interpolate._polyint.(x, x_shape)->self._prepare_x(x)
A:scipy.interpolate._polyint.y->self._evaluate_derivatives(x, der + 1)
A:scipy.interpolate._polyint.x->_asarray_validated(x, check_finite=False, as_inexact=True)
A:scipy.interpolate._polyint.nx->len(x_shape)
A:scipy.interpolate._polyint.ny->len(self._y_extra_shape)
A:scipy.interpolate._polyint.yi->self._reshape_yi(yi, check=True)
A:scipy.interpolate._polyint.self.xi->numpy.concatenate((self.xi, xi))
A:scipy.interpolate._polyint.self.yi->numpy.vstack((self.yi, yi))
A:scipy.interpolate._polyint.c->numpy.zeros((self.n + 1, self.r), dtype=self.dtype)
A:scipy.interpolate._polyint.Vk->numpy.zeros((self.n, self.r), dtype=self.dtype)
A:scipy.interpolate._polyint.p->numpy.zeros((0, self.r), dtype=self.dtype)
A:scipy.interpolate._polyint.pi->numpy.zeros((n, len(x)))
A:scipy.interpolate._polyint.w->numpy.zeros((n, len(x)))
A:scipy.interpolate._polyint.cn->numpy.zeros((max(der, n + 1), len(x), r), dtype=self.dtype)
A:scipy.interpolate._polyint.P->KroghInterpolator(xs, f(xs))
A:scipy.interpolate._polyint.d->KroghInterpolator(xs, f(xs)).derivatives(x, der=degree + 1)
A:scipy.interpolate._polyint.self.n->len(self.xi)
A:scipy.interpolate._polyint.permute->numpy.random.permutation(self.n)
A:scipy.interpolate._polyint.inv_permute->numpy.zeros(self.n, dtype=np.int32)
A:scipy.interpolate._polyint.inv_permute[permute]->numpy.arange(self.n)
A:scipy.interpolate._polyint.self.wi->numpy.zeros(self.n)
A:scipy.interpolate._polyint.self.wi[j]->numpy.multiply.reduce(self._inv_capacity * (self.xi[:j] - self.xi[j]))
A:scipy.interpolate._polyint.r->numpy.nonzero(z)
scipy.interpolate.BarycentricInterpolator(self,xi,yi=None,axis=0)
scipy.interpolate.BarycentricInterpolator._evaluate(self,x)
scipy.interpolate.BarycentricInterpolator.add_xi(self,xi,yi=None)
scipy.interpolate.BarycentricInterpolator.set_yi(self,yi,axis=None)
scipy.interpolate.KroghInterpolator(self,xi,yi,axis=0)
scipy.interpolate.KroghInterpolator._evaluate(self,x)
scipy.interpolate.KroghInterpolator._evaluate_derivatives(self,x,der=None)
scipy.interpolate._Interpolator1D(self,xi=None,yi=None,axis=None)
scipy.interpolate._Interpolator1D._evaluate(self,x)
scipy.interpolate._Interpolator1D._finish_y(self,y,x_shape)
scipy.interpolate._Interpolator1D._prepare_x(self,x)
scipy.interpolate._Interpolator1D._reshape_yi(self,yi,check=False)
scipy.interpolate._Interpolator1D._set_dtype(self,dtype,union=False)
scipy.interpolate._Interpolator1D._set_yi(self,yi,xi=None,axis=None)
scipy.interpolate._Interpolator1DWithDerivatives(_Interpolator1D)
scipy.interpolate._Interpolator1DWithDerivatives.derivative(self,x,der=1)
scipy.interpolate._Interpolator1DWithDerivatives.derivatives(self,x,der=None)
scipy.interpolate._isscalar(x)
scipy.interpolate._polyint.BarycentricInterpolator(self,xi,yi=None,axis=0)
scipy.interpolate._polyint.BarycentricInterpolator.__init__(self,xi,yi=None,axis=0)
scipy.interpolate._polyint.BarycentricInterpolator._evaluate(self,x)
scipy.interpolate._polyint.BarycentricInterpolator.add_xi(self,xi,yi=None)
scipy.interpolate._polyint.BarycentricInterpolator.set_yi(self,yi,axis=None)
scipy.interpolate._polyint.KroghInterpolator(self,xi,yi,axis=0)
scipy.interpolate._polyint.KroghInterpolator.__init__(self,xi,yi,axis=0)
scipy.interpolate._polyint.KroghInterpolator._evaluate(self,x)
scipy.interpolate._polyint.KroghInterpolator._evaluate_derivatives(self,x,der=None)
scipy.interpolate._polyint._Interpolator1D(self,xi=None,yi=None,axis=None)
scipy.interpolate._polyint._Interpolator1D.__init__(self,xi=None,yi=None,axis=None)
scipy.interpolate._polyint._Interpolator1D._evaluate(self,x)
scipy.interpolate._polyint._Interpolator1D._finish_y(self,y,x_shape)
scipy.interpolate._polyint._Interpolator1D._prepare_x(self,x)
scipy.interpolate._polyint._Interpolator1D._reshape_yi(self,yi,check=False)
scipy.interpolate._polyint._Interpolator1D._set_dtype(self,dtype,union=False)
scipy.interpolate._polyint._Interpolator1D._set_yi(self,yi,xi=None,axis=None)
scipy.interpolate._polyint._Interpolator1DWithDerivatives(_Interpolator1D)
scipy.interpolate._polyint._Interpolator1DWithDerivatives.derivative(self,x,der=1)
scipy.interpolate._polyint._Interpolator1DWithDerivatives.derivatives(self,x,der=None)
scipy.interpolate._polyint._isscalar(x)
scipy.interpolate._polyint.approximate_taylor_polynomial(f,x,degree,scale,order=None)
scipy.interpolate._polyint.barycentric_interpolate(xi,yi,x,axis=0)
scipy.interpolate._polyint.krogh_interpolate(xi,yi,x,der=0,axis=0)
scipy.interpolate.approximate_taylor_polynomial(f,x,degree,scale,order=None)
scipy.interpolate.barycentric_interpolate(xi,yi,x,axis=0)
scipy.interpolate.krogh_interpolate(xi,yi,x,der=0,axis=0)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/polyint.py----------------------------------------
scipy.interpolate.polyint.__dir__()
scipy.interpolate.polyint.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/_cubic.py----------------------------------------
A:scipy.interpolate._cubic.(x, y)->map(np.asarray, (x, y))
A:scipy.interpolate._cubic.x->x.astype(float).astype(float)
A:scipy.interpolate._cubic.dydx->numpy.moveaxis(dydx, axis, 0)
A:scipy.interpolate._cubic.y->y.astype(complex, copy=False).astype(complex, copy=False)
A:scipy.interpolate._cubic.dx->numpy.diff(x)
A:scipy.interpolate._cubic.(x, dx, y, axis, dydx)->prepare_input(x, y, axis, dydx)
A:scipy.interpolate._cubic.dxr->numpy.diff(x).reshape([dx.shape[0]] + [1] * (y.ndim - 1))
A:scipy.interpolate._cubic.c->numpy.empty((4, len(x) - 1) + y.shape[1:], dtype=t.dtype)
A:scipy.interpolate._cubic.(x, _, y, axis, _)->prepare_input(x, y, axis)
A:scipy.interpolate._cubic.xp->x.astype(float).astype(float).reshape((x.shape[0],) + (1,) * (y.ndim - 1))
A:scipy.interpolate._cubic.dk->numpy.zeros_like(y)
A:scipy.interpolate._cubic.smk->numpy.sign(mk)
A:scipy.interpolate._cubic.dk[0]->PchipInterpolator._edge_case(hk[0], hk[1], mk[0], mk[1])
A:scipy.interpolate._cubic.dk[-1]->PchipInterpolator._edge_case(hk[-1], hk[-2], mk[-1], mk[-2])
A:scipy.interpolate._cubic.P->PchipInterpolator(xi, yi, axis=axis)
A:scipy.interpolate._cubic.(x, dx, y, axis, _)->prepare_input(x, y, axis)
A:scipy.interpolate._cubic.m->numpy.empty((x.size + 3,) + y.shape[1:])
A:scipy.interpolate._cubic.dm->numpy.abs(np.diff(m, axis=0))
A:scipy.interpolate._cubic.ind->numpy.nonzero(f12 > 1e-09 * np.max(f12, initial=-np.inf))
A:scipy.interpolate._cubic.n->len(x)
A:scipy.interpolate._cubic.(bc, y)->self._validate_bc(bc_type, y, y.shape[1:], axis)
A:scipy.interpolate._cubic.s->solve_banded((1, 1), A, b, overwrite_ab=True, overwrite_b=True, check_finite=False)
A:scipy.interpolate._cubic.A->numpy.zeros((3, n))
A:scipy.interpolate._cubic.b->numpy.empty((n,) + y.shape[1:], dtype=y.dtype)
A:scipy.interpolate._cubic.b2->numpy.zeros_like(b1)
A:scipy.interpolate._cubic.s1->solve_banded((1, 1), Ac, b1, overwrite_ab=False, overwrite_b=False, check_finite=False)
A:scipy.interpolate._cubic.s2->solve_banded((1, 1), Ac, b2, overwrite_ab=False, overwrite_b=False, check_finite=False)
A:scipy.interpolate._cubic.deriv_value->numpy.asarray(deriv_value)
scipy.interpolate.Akima1DInterpolator(self,x,y,axis=0)
scipy.interpolate.Akima1DInterpolator.extend(self,c,x,right=True)
scipy.interpolate.Akima1DInterpolator.from_bernstein_basis(cls,bp,extrapolate=None)
scipy.interpolate.Akima1DInterpolator.from_spline(cls,tck,extrapolate=None)
scipy.interpolate.CubicHermiteSpline(self,x,y,dydx,axis=0,extrapolate=None)
scipy.interpolate.CubicSpline(self,x,y,axis=0,bc_type='not-a-knot',extrapolate=None)
scipy.interpolate.CubicSpline._validate_bc(bc_type,y,expected_deriv_shape,axis)
scipy.interpolate.PchipInterpolator(self,x,y,axis=0,extrapolate=None)
scipy.interpolate.PchipInterpolator._edge_case(h0,h1,m0,m1)
scipy.interpolate.PchipInterpolator._find_derivatives(x,y)
scipy.interpolate._cubic.Akima1DInterpolator(self,x,y,axis=0)
scipy.interpolate._cubic.Akima1DInterpolator.__init__(self,x,y,axis=0)
scipy.interpolate._cubic.Akima1DInterpolator.extend(self,c,x,right=True)
scipy.interpolate._cubic.Akima1DInterpolator.from_bernstein_basis(cls,bp,extrapolate=None)
scipy.interpolate._cubic.Akima1DInterpolator.from_spline(cls,tck,extrapolate=None)
scipy.interpolate._cubic.CubicHermiteSpline(self,x,y,dydx,axis=0,extrapolate=None)
scipy.interpolate._cubic.CubicHermiteSpline.__init__(self,x,y,dydx,axis=0,extrapolate=None)
scipy.interpolate._cubic.CubicSpline(self,x,y,axis=0,bc_type='not-a-knot',extrapolate=None)
scipy.interpolate._cubic.CubicSpline.__init__(self,x,y,axis=0,bc_type='not-a-knot',extrapolate=None)
scipy.interpolate._cubic.CubicSpline._validate_bc(bc_type,y,expected_deriv_shape,axis)
scipy.interpolate._cubic.PchipInterpolator(self,x,y,axis=0,extrapolate=None)
scipy.interpolate._cubic.PchipInterpolator.__init__(self,x,y,axis=0,extrapolate=None)
scipy.interpolate._cubic.PchipInterpolator._edge_case(h0,h1,m0,m1)
scipy.interpolate._cubic.PchipInterpolator._find_derivatives(x,y)
scipy.interpolate._cubic.pchip_interpolate(xi,yi,x,der=0,axis=0)
scipy.interpolate._cubic.prepare_input(x,y,axis,dydx=None)
scipy.interpolate.pchip_interpolate(xi,yi,x,der=0,axis=0)
scipy.interpolate.prepare_input(x,y,axis,dydx=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/__init__.py----------------------------------------
A:scipy.interpolate.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/ndgriddata.py----------------------------------------
scipy.interpolate.ndgriddata.__dir__()
scipy.interpolate.ndgriddata.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/_bsplines.py----------------------------------------
A:scipy.interpolate._bsplines.x->numpy.ascontiguousarray(x, dtype=float)
A:scipy.interpolate._bsplines.dtyp->_get_dtype(x.dtype)
A:scipy.interpolate._bsplines.comb->list(combinations(range(j + 1, j + k + 1), d))
A:scipy.interpolate._bsplines.self.k->operator.index(k)
A:scipy.interpolate._bsplines.self.c->object.__new__(cls).c.copy()
A:scipy.interpolate._bsplines.self.t->object.__new__(cls).t.copy()
A:scipy.interpolate._bsplines.self.extrapolate->bool(extrapolate)
A:scipy.interpolate._bsplines.axis->normalize_axis_index(axis, y.ndim)
A:scipy.interpolate._bsplines.dt->_get_dtype(self.c.dtype)
A:scipy.interpolate._bsplines.self->object.__new__(cls)
A:scipy.interpolate._bsplines.t->_as_float_array(t, check_finite)
A:scipy.interpolate._bsplines.c->solve_banded((2, 2), X + lam * wE, y)
A:scipy.interpolate._bsplines.extrapolate->bool(extrapolate)
A:scipy.interpolate._bsplines.indices->numpy.empty(n * (k + 1), dtype=int_dtype)
A:scipy.interpolate._bsplines.indptr->numpy.arange(0, (n + 1) * (k + 1), k + 1, dtype=int_dtype)
A:scipy.interpolate._bsplines.(data, indices)->_bspl._make_design_matrix(x, t, k, extrapolate, indices)
A:scipy.interpolate._bsplines.out->numpy.empty((2, prod(self.c.shape[1:])), dtype=self.c.dtype)
A:scipy.interpolate._bsplines.l->list(range(out.ndim))
A:scipy.interpolate._bsplines.tck->_fitpack_impl.splantider((self.t, c, self.k), nu)
A:scipy.interpolate._bsplines.a->max(a, self.t[self.k])
A:scipy.interpolate._bsplines.b->min(b, self.t[n])
A:scipy.interpolate._bsplines.integral->numpy.zeros((1, prod(self.c.shape[1:])), dtype=self.c.dtype)
A:scipy.interpolate._bsplines.(ta, ca, ka)->_fitpack_impl.splantider((self.t, c, self.k), 1)
A:scipy.interpolate._bsplines.(n_periods, left)->divmod(interval, period)
A:scipy.interpolate._bsplines.(ords, vals)->zip(*deriv)
A:scipy.interpolate._bsplines.U->cholesky_banded(A)
A:scipy.interpolate._bsplines.VT->numpy.zeros((k_mod, n - 1))
A:scipy.interpolate._bsplines.Z->solve_banded((bs, bs), A, U)
A:scipy.interpolate._bsplines.H->solve(np.identity(k_mod) + VT @ Z, np.identity(k_mod))
A:scipy.interpolate._bsplines.y->numpy.ascontiguousarray(y, dtype=float)
A:scipy.interpolate._bsplines.xc->numpy.copy(x)
A:scipy.interpolate._bsplines.n->len(xc)
A:scipy.interpolate._bsplines.dx->numpy.diff(xc)
A:scipy.interpolate._bsplines.(x, y, t)->map(np.asarray, (x, y, t))
A:scipy.interpolate._bsplines.matr->numpy.zeros((n + k - 1, n + k - 1))
A:scipy.interpolate._bsplines.bb->_bspl.evaluate_all_bspl(t, k, xval, left)
A:scipy.interpolate._bsplines.extradim->prod(y.shape[1:])
A:scipy.interpolate._bsplines.y_new->numpy.ascontiguousarray(y, dtype=float).reshape(n, extradim)
A:scipy.interpolate._bsplines.c[:, i]->numpy.concatenate((cc[-kul:], cc, cc[:kul + k % 2]))
A:scipy.interpolate._bsplines.kul->int(k / 2)
A:scipy.interpolate._bsplines.ab->numpy.zeros((k + 1, n), dtype=np.float_, order='F')
A:scipy.interpolate._bsplines.ur->numpy.zeros((kul, kul))
A:scipy.interpolate._bsplines.ll->numpy.zeros_like(ur)
A:scipy.interpolate._bsplines.cc->_woodbury_algorithm(A, ur, ll, y_new[:, i][:-1], k)
A:scipy.interpolate._bsplines.k->operator.index(k)
A:scipy.interpolate._bsplines.deriv_l->_convert_string_aliases(deriv_l, y.shape[1:])
A:scipy.interpolate._bsplines.(deriv_l_ords, deriv_l_vals)->_process_deriv_spec(deriv_l)
A:scipy.interpolate._bsplines.deriv_r->_convert_string_aliases(deriv_r, y.shape[1:])
A:scipy.interpolate._bsplines.(deriv_r_ords, deriv_r_vals)->_process_deriv_spec(deriv_r)
A:scipy.interpolate._bsplines.rhs->rhs.reshape((n,) + y.shape[1:]).reshape((n,) + y.shape[1:])
A:scipy.interpolate._bsplines.rhs[:nleft]->deriv_l_vals.reshape(-1, extradim)
A:scipy.interpolate._bsplines.rhs[nleft:nt - nright]->numpy.ascontiguousarray(y, dtype=float).reshape(-1, extradim)
A:scipy.interpolate._bsplines.rhs[nt - nright:]->deriv_r_vals.reshape(-1, extradim)
A:scipy.interpolate._bsplines.(ab, rhs)->map(np.asarray_chkfinite, (ab, rhs))
A:scipy.interpolate._bsplines.(gbsv,)->get_lapack_funcs(('gbsv',), (ab, rhs))
A:scipy.interpolate._bsplines.(lu, piv, c, info)->gbsv(kl, ku, ab, rhs, overwrite_ab=True, overwrite_b=True)
A:scipy.interpolate._bsplines.w->numpy.ascontiguousarray(w)
A:scipy.interpolate._bsplines.cho_decomp->cholesky_banded(ab, overwrite_ab=True, lower=lower, check_finite=check_finite)
A:scipy.interpolate._bsplines.W_Y->numpy.copy(Y)
A:scipy.interpolate._bsplines.res->numpy.zeros(n)
A:scipy.interpolate._bsplines.res[-j - 1, i + j]->sum(X[j:, i] * W_Y[:5 - j, i + j])
A:scipy.interpolate._bsplines.rng->min(3, n - i - 1)
A:scipy.interpolate._bsplines.diag->abs(k - j)
A:scipy.interpolate._bsplines.B->numpy.zeros(shape=(4, n))
A:scipy.interpolate._bsplines.b_banded->compute_b_inv(lhs)
A:scipy.interpolate._bsplines.XtWX->compute_banded_symmetric_XT_W_Y(X, w, X)
A:scipy.interpolate._bsplines.XtE->compute_banded_symmetric_XT_W_Y(X, w, wE)
A:scipy.interpolate._bsplines.gcv_est->minimize_scalar(fun, bounds=(0, n), method='Bounded')
A:scipy.interpolate._bsplines.X_bspl->BSpline.design_matrix(x, t, 3)
A:scipy.interpolate._bsplines.X->numpy.zeros((5, n))
A:scipy.interpolate._bsplines.wE->numpy.zeros((5, n))
A:scipy.interpolate._bsplines.lam->_compute_optimal_gcv_parameter(X, wE, y, w)
scipy.interpolate.BSpline(self,t,c,k,extrapolate=True,axis=0)
scipy.interpolate.BSpline._ensure_c_contiguous(self)
scipy.interpolate.BSpline._evaluate(self,xp,nu,extrapolate,out)
scipy.interpolate.BSpline.antiderivative(self,nu=1)
scipy.interpolate.BSpline.basis_element(cls,t,extrapolate=True)
scipy.interpolate.BSpline.construct_fast(cls,t,c,k,extrapolate=True,axis=0)
scipy.interpolate.BSpline.derivative(self,nu=1)
scipy.interpolate.BSpline.design_matrix(cls,x,t,k,extrapolate=False)
scipy.interpolate.BSpline.from_power_basis(cls,pp,bc_type='not-a-knot')
scipy.interpolate.BSpline.integrate(self,a,b,extrapolate=None)
scipy.interpolate.BSpline.tck(self)
scipy.interpolate._as_float_array(x,check_finite=False)
scipy.interpolate._augknt(x,k)
scipy.interpolate._bsplines.BSpline(self,t,c,k,extrapolate=True,axis=0)
scipy.interpolate._bsplines.BSpline.__init__(self,t,c,k,extrapolate=True,axis=0)
scipy.interpolate._bsplines.BSpline._ensure_c_contiguous(self)
scipy.interpolate._bsplines.BSpline._evaluate(self,xp,nu,extrapolate,out)
scipy.interpolate._bsplines.BSpline.antiderivative(self,nu=1)
scipy.interpolate._bsplines.BSpline.basis_element(cls,t,extrapolate=True)
scipy.interpolate._bsplines.BSpline.construct_fast(cls,t,c,k,extrapolate=True,axis=0)
scipy.interpolate._bsplines.BSpline.derivative(self,nu=1)
scipy.interpolate._bsplines.BSpline.design_matrix(cls,x,t,k,extrapolate=False)
scipy.interpolate._bsplines.BSpline.from_power_basis(cls,pp,bc_type='not-a-knot')
scipy.interpolate._bsplines.BSpline.integrate(self,a,b,extrapolate=None)
scipy.interpolate._bsplines.BSpline.tck(self)
scipy.interpolate._bsplines._as_float_array(x,check_finite=False)
scipy.interpolate._bsplines._augknt(x,k)
scipy.interpolate._bsplines._coeff_of_divided_diff(x)
scipy.interpolate._bsplines._compute_optimal_gcv_parameter(X,wE,y,w)
scipy.interpolate._bsplines._convert_string_aliases(deriv,target_shape)
scipy.interpolate._bsplines._diff_dual_poly(j,k,y,d,t)
scipy.interpolate._bsplines._dual_poly(j,k,t,y)
scipy.interpolate._bsplines._get_dtype(dtype)
scipy.interpolate._bsplines._make_interp_per_full_matr(x,y,t,k)
scipy.interpolate._bsplines._make_periodic_spline(x,y,t,k,axis)
scipy.interpolate._bsplines._not_a_knot(x,k)
scipy.interpolate._bsplines._periodic_knots(x,k)
scipy.interpolate._bsplines._process_deriv_spec(deriv)
scipy.interpolate._bsplines._woodbury_algorithm(A,ur,ll,b,k)
scipy.interpolate._bsplines.make_interp_spline(x,y,k=3,t=None,bc_type=None,axis=0,check_finite=True)
scipy.interpolate._bsplines.make_lsq_spline(x,y,t,k=3,w=None,axis=0,check_finite=True)
scipy.interpolate._bsplines.make_smoothing_spline(x,y,w=None,lam=None)
scipy.interpolate._coeff_of_divided_diff(x)
scipy.interpolate._compute_optimal_gcv_parameter(X,wE,y,w)
scipy.interpolate._convert_string_aliases(deriv,target_shape)
scipy.interpolate._diff_dual_poly(j,k,y,d,t)
scipy.interpolate._dual_poly(j,k,t,y)
scipy.interpolate._get_dtype(dtype)
scipy.interpolate._make_interp_per_full_matr(x,y,t,k)
scipy.interpolate._make_periodic_spline(x,y,t,k,axis)
scipy.interpolate._not_a_knot(x,k)
scipy.interpolate._periodic_knots(x,k)
scipy.interpolate._process_deriv_spec(deriv)
scipy.interpolate._woodbury_algorithm(A,ur,ll,b,k)
scipy.interpolate.make_interp_spline(x,y,k=3,t=None,bc_type=None,axis=0,check_finite=True)
scipy.interpolate.make_lsq_spline(x,y,t,k=3,w=None,axis=0,check_finite=True)
scipy.interpolate.make_smoothing_spline(x,y,w=None,lam=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/fitpack.py----------------------------------------
scipy.interpolate.fitpack.__dir__()
scipy.interpolate.fitpack.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/_ndgriddata.py----------------------------------------
A:scipy.interpolate._ndgriddata.tree_options->dict()
A:scipy.interpolate._ndgriddata.self.tree->cKDTree(self.points, **tree_options)
A:scipy.interpolate._ndgriddata.self.values->numpy.asarray(y)
A:scipy.interpolate._ndgriddata.xi->self._scale_x(xi)
A:scipy.interpolate._ndgriddata.(dist, i)->self.tree.query(xi)
A:scipy.interpolate._ndgriddata.points->points.ravel().ravel()
A:scipy.interpolate._ndgriddata.idx->numpy.argsort(points)
A:scipy.interpolate._ndgriddata.ip->CloughTocher2DInterpolator(points, values, fill_value=fill_value, rescale=rescale)
scipy.interpolate.NearestNDInterpolator(self,x,y,rescale=False,tree_options=None)
scipy.interpolate._ndgriddata.NearestNDInterpolator(self,x,y,rescale=False,tree_options=None)
scipy.interpolate._ndgriddata.NearestNDInterpolator.__init__(self,x,y,rescale=False,tree_options=None)
scipy.interpolate._ndgriddata.griddata(points,values,xi,method='linear',fill_value=np.nan,rescale=False)
scipy.interpolate.griddata(points,values,xi,method='linear',fill_value=np.nan,rescale=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/tests/test_rbf.py----------------------------------------
A:scipy.interpolate.tests.test_rbf.x->linspace(0, 10, 9)
A:scipy.interpolate.tests.test_rbf.y->sin(x)
A:scipy.interpolate.tests.test_rbf.rbf->Rbf(x, y, z, epsilon=None)
A:scipy.interpolate.tests.test_rbf.yi->rbf(x)
A:scipy.interpolate.tests.test_rbf.zi->rbf(x, y)
A:scipy.interpolate.tests.test_rbf.di->rbf(x, y, z)
A:scipy.interpolate.tests.test_rbf.y0->sin(x)
A:scipy.interpolate.tests.test_rbf.y1->cos(x)
A:scipy.interpolate.tests.test_rbf.xi->numpy.linspace(0, 10, 1000)
scipy.interpolate.tests.test_rbf.check_2drbf1d_interpolation(function)
scipy.interpolate.tests.test_rbf.check_2drbf1d_regularity(function,atol)
scipy.interpolate.tests.test_rbf.check_2drbf2d_interpolation(function)
scipy.interpolate.tests.test_rbf.check_2drbf3d_interpolation(function)
scipy.interpolate.tests.test_rbf.check_rbf1d_interpolation(function)
scipy.interpolate.tests.test_rbf.check_rbf1d_regularity(function,atol)
scipy.interpolate.tests.test_rbf.check_rbf1d_stability(function)
scipy.interpolate.tests.test_rbf.check_rbf2d_interpolation(function)
scipy.interpolate.tests.test_rbf.check_rbf3d_interpolation(function)
scipy.interpolate.tests.test_rbf.test_2drbf_interpolation()
scipy.interpolate.tests.test_rbf.test_2drbf_regularity()
scipy.interpolate.tests.test_rbf.test_default_construction()
scipy.interpolate.tests.test_rbf.test_function_is_callable()
scipy.interpolate.tests.test_rbf.test_rbf_epsilon_none()
scipy.interpolate.tests.test_rbf.test_rbf_epsilon_none_collinear()
scipy.interpolate.tests.test_rbf.test_rbf_interpolation()
scipy.interpolate.tests.test_rbf.test_rbf_regularity()
scipy.interpolate.tests.test_rbf.test_rbf_stability()
scipy.interpolate.tests.test_rbf.test_two_arg_function_is_callable()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/tests/test_bsplines.py----------------------------------------
A:scipy.interpolate.tests.test_bsplines.t->_augknt(x, 3)
A:scipy.interpolate.tests.test_bsplines.c->scipy.linalg.solve(B, Y)
A:scipy.interpolate.tests.test_bsplines.b->make_lsq_spline(x, yc, t, k)
A:scipy.interpolate.tests.test_bsplines.xx->numpy.linspace(-1, 1, 100)
A:scipy.interpolate.tests.test_bsplines.x->numpy.sort(np.random.random_sample(n) * 4 - 2)
A:scipy.interpolate.tests.test_bsplines.bp->BPoly(c.reshape(-1, 1), [0, 1])
A:scipy.interpolate.tests.test_bsplines.bspl->scipy.interpolate.BSpline.from_power_basis(CubicSpline(x, y, bc_type='natural'), bc_type='natural')
A:scipy.interpolate.tests.test_bsplines.y_b->b(xx)
A:scipy.interpolate.tests.test_bsplines.y->numpy.arange(10).astype(np.int_)
A:scipy.interpolate.tests.test_bsplines.tck->splrep(self.xx, self.yy, per=True, k=k)
A:scipy.interpolate.tests.test_bsplines.b.c->numpy.ones_like(b.c)
A:scipy.interpolate.tests.test_bsplines.yy->numpy.sin(self.xx)
A:scipy.interpolate.tests.test_bsplines.pp->scipy.interpolate.PPoly.from_spline((t, c, k))
A:scipy.interpolate.tests.test_bsplines.yd->splev(xx, (t, c, k), der=der)
A:scipy.interpolate.tests.test_bsplines.x0->numpy.asarray([3, 4])
A:scipy.interpolate.tests.test_bsplines.x1->numpy.asarray([1, 6])
A:scipy.interpolate.tests.test_bsplines.b_re->make_lsq_spline(x, yc.real, t, k)
A:scipy.interpolate.tests.test_bsplines.b_im->make_lsq_spline(x, yc.imag, t, k)
A:scipy.interpolate.tests.test_bsplines.b0->BSpline(t, c, k)
A:scipy.interpolate.tests.test_bsplines.i->make_lsq_spline(x, yc, t, k).antiderivative()
A:scipy.interpolate.tests.test_bsplines.p->scipy.interpolate.PPoly.from_spline(b)
A:scipy.interpolate.tests.test_bsplines.xp->numpy.random.random((3, 4, 5))
A:scipy.interpolate.tests.test_bsplines.spl->make_smoothing_spline(x, y)
A:scipy.interpolate.tests.test_bsplines.spl0->BSpline(t, c[0], k)
A:scipy.interpolate.tests.test_bsplines.spl1->BSpline(t, c[1], k)
A:scipy.interpolate.tests.test_bsplines.des_matr_def->BSpline(bspl.t, c, k)(x)
A:scipy.interpolate.tests.test_bsplines.des_matr_csr->scipy.interpolate.BSpline.design_matrix(xc, bspl.t, k).toarray()
A:scipy.interpolate.tests.test_bsplines.bspline->BSpline(t, c, k, extrapolate)
A:scipy.interpolate.tests.test_bsplines.des_matr->scipy.interpolate.BSpline.design_matrix(2.0, t, 3).toarray()
A:scipy.interpolate.tests.test_bsplines.cb->CubicSpline(x, y, bc_type=bc_type)
A:scipy.interpolate.tests.test_bsplines.bspl_new->make_interp_spline(x, y, bc_type=bc_type)
A:scipy.interpolate.tests.test_bsplines.bspl_new_real->make_interp_spline(x, y.real, bc_type=bc_type)
A:scipy.interpolate.tests.test_bsplines.bspl_new_imag->make_interp_spline(x, y.imag, bc_type=bc_type)
A:scipy.interpolate.tests.test_bsplines.pieces->numpy.piecewise(x, conds, funcs)
A:scipy.interpolate.tests.test_bsplines.t1->make_lsq_spline(x, yc, t, k).t.copy()
A:scipy.interpolate.tests.test_bsplines.self.xnew->numpy.linspace(0, 4.0 * np.pi, 21)
A:scipy.interpolate.tests.test_bsplines.self.c2->numpy.dstack((c2, c2))
A:scipy.interpolate.tests.test_bsplines.self.b2->BSpline(b.t, self.c2, b.k)
A:scipy.interpolate.tests.test_bsplines.cc->make_interp_spline(x, y, k, bc_type='clamped').c.transpose(sh)
A:scipy.interpolate.tests.test_bsplines.(t, c, k)->scipy.interpolate._fitpack_impl.splrep(x, y)
A:scipy.interpolate.tests.test_bsplines.(tck_f, _, _, _)->splrep(x, y, full_output=True)
A:scipy.interpolate.tests.test_bsplines.(b, u)->splprep(x)
A:scipy.interpolate.tests.test_bsplines.(tck, u1)->scipy.interpolate._fitpack_impl.splprep(x)
A:scipy.interpolate.tests.test_bsplines.((b_f, u_f), _, _, _)->splprep(x, s=0, full_output=True)
A:scipy.interpolate.tests.test_bsplines.c2r->make_interp_spline(x, y, k, bc_type='clamped').c.transpose(1, 2, 0)
A:scipy.interpolate.tests.test_bsplines.rr->numpy.asarray(sproot((b2.t, c2r, b2.k), mest=50))
A:scipy.interpolate.tests.test_bsplines.integr->numpy.asarray(splint(0, 1, (b2.t, c2r, b2.k)))
A:scipy.interpolate.tests.test_bsplines.bd->splantider(b)
A:scipy.interpolate.tests.test_bsplines.tck_d->scipy.interpolate._fitpack_impl.splantider((b.t, b.c, b.k))
A:scipy.interpolate.tests.test_bsplines.sh->tuple(range(b2.c.ndim))
A:scipy.interpolate.tests.test_bsplines.c_->make_interp_spline(x, y, k, bc_type='clamped').c.transpose(sh[1:] + (0,))
A:scipy.interpolate.tests.test_bsplines.tck_n2->insert(tn, (b2.t, c_, b2.k))
A:scipy.interpolate.tests.test_bsplines.bn2->insert(tn, b2)
A:scipy.interpolate.tests.test_bsplines.y[0]->numpy.sin(x)
A:scipy.interpolate.tests.test_bsplines.y[1]->numpy.cos(x)
A:scipy.interpolate.tests.test_bsplines.cub->CubicSpline(x, y, bc_type='periodic')
A:scipy.interpolate.tests.test_bsplines.b1->make_interp_spline(x, y, k, bc_type=(d_l, d_r))
A:scipy.interpolate.tests.test_bsplines.b2->make_interp_spline(x, y, k, bc_type='clamped')
A:scipy.interpolate.tests.test_bsplines.cf->make_interp_full_matr(x, y, t, k)
A:scipy.interpolate.tests.test_bsplines.offset->int((k - 1) / 2)
A:scipy.interpolate.tests.test_bsplines.a->numpy.diagflat(np.random.random((1, n)))
A:scipy.interpolate.tests.test_bsplines.ur->numpy.random.random((offset, offset))
A:scipy.interpolate.tests.test_bsplines.ll->numpy.random.random((offset, offset))
A:scipy.interpolate.tests.test_bsplines.d->numpy.zeros((k, n))
A:scipy.interpolate.tests.test_bsplines.d[i, :j]->numpy.diagonal(a, offset=j)
A:scipy.interpolate.tests.test_bsplines.d[i, j:]->numpy.diagonal(a, offset=j)
A:scipy.interpolate.tests.test_bsplines.A->numpy.zeros((m, n), dtype=np.float_)
A:scipy.interpolate.tests.test_bsplines.bb->scipy.interpolate._bspl.evaluate_all_bspl(t, k, xval, left)
A:scipy.interpolate.tests.test_bsplines.(x, y, t)->map(np.asarray, (x, y, t))
A:scipy.interpolate.tests.test_bsplines.B->numpy.dot(A.T, A)
A:scipy.interpolate.tests.test_bsplines.Y->numpy.dot(A.T, y)
A:scipy.interpolate.tests.test_bsplines.(c0, AY)->make_lsq_full_matrix(x, y, t, k)
A:scipy.interpolate.tests.test_bsplines.(c1, _, _, _)->numpy.linalg.lstsq(aa, y, rcond=-1)
A:scipy.interpolate.tests.test_bsplines.w->numpy.ones(n)
A:scipy.interpolate.tests.test_bsplines.b_w->make_lsq_spline(x, y, t, k, w=w)
A:scipy.interpolate.tests.test_bsplines.x_dupl->numpy.copy(x)
A:scipy.interpolate.tests.test_bsplines.data->numpy.load(data_file('gcvspl.npz'))
A:scipy.interpolate.tests.test_bsplines.y_compr->make_smoothing_spline(x, y)(x)
A:scipy.interpolate.tests.test_bsplines.spline_GCV->make_smoothing_spline(x, y, lam=0.0)
A:scipy.interpolate.tests.test_bsplines.spline_interp->make_interp_spline(x, y, 3, bc_type='natural')
A:scipy.interpolate.tests.test_bsplines.grid->numpy.linspace(x[0], x[-1], 2 * n)
A:scipy.interpolate.tests.test_bsplines.spl_w->make_smoothing_spline(x, y, w)
A:scipy.interpolate.tests.test_bsplines.orig->abs(spl(x[ind]) - y[ind])
A:scipy.interpolate.tests.test_bsplines.weighted->abs(spl_w(x[ind]) - y[ind])
scipy.interpolate.tests.testB_012(x)
scipy.interpolate.tests.testB_0123(x,der=0)
scipy.interpolate.tests.testTestBSpline
scipy.interpolate.tests.testTestBSpline.test_antiderivative_method(self)
scipy.interpolate.tests.testTestBSpline.test_axis(self,axis)
scipy.interpolate.tests.testTestBSpline.test_basis_element_quadratic(self)
scipy.interpolate.tests.testTestBSpline.test_basis_element_rndm(self)
scipy.interpolate.tests.testTestBSpline.test_bernstein(self)
scipy.interpolate.tests.testTestBSpline.test_cmplx(self)
scipy.interpolate.tests.testTestBSpline.test_continuity(self)
scipy.interpolate.tests.testTestBSpline.test_ctor(self)
scipy.interpolate.tests.testTestBSpline.test_default_extrap(self)
scipy.interpolate.tests.testTestBSpline.test_degree_0(self)
scipy.interpolate.tests.testTestBSpline.test_degree_1(self)
scipy.interpolate.tests.testTestBSpline.test_derivative_jumps(self)
scipy.interpolate.tests.testTestBSpline.test_derivative_method(self)
scipy.interpolate.tests.testTestBSpline.test_derivative_rndm(self)
scipy.interpolate.tests.testTestBSpline.test_design_matrix_asserts(self)
scipy.interpolate.tests.testTestBSpline.test_design_matrix_bc_types(self)
scipy.interpolate.tests.testTestBSpline.test_design_matrix_same_as_BSpline_call(self,extrapolate,degree)
scipy.interpolate.tests.testTestBSpline.test_design_matrix_t_shapes(self)
scipy.interpolate.tests.testTestBSpline.test_design_matrix_x_shapes(self)
scipy.interpolate.tests.testTestBSpline.test_endpoints(self)
scipy.interpolate.tests.testTestBSpline.test_extrap(self)
scipy.interpolate.tests.testTestBSpline.test_from_power_basis(self,bc_type)
scipy.interpolate.tests.testTestBSpline.test_from_power_basis_complex(self,bc_type)
scipy.interpolate.tests.testTestBSpline.test_from_power_basis_exmp(self)
scipy.interpolate.tests.testTestBSpline.test_integral(self)
scipy.interpolate.tests.testTestBSpline.test_integrate_ppoly(self)
scipy.interpolate.tests.testTestBSpline.test_len_c(self)
scipy.interpolate.tests.testTestBSpline.test_nan(self)
scipy.interpolate.tests.testTestBSpline.test_neg_axis(self)
scipy.interpolate.tests.testTestBSpline.test_periodic_extrap(self)
scipy.interpolate.tests.testTestBSpline.test_ppoly(self)
scipy.interpolate.tests.testTestBSpline.test_rndm_naive_eval(self)
scipy.interpolate.tests.testTestBSpline.test_rndm_splev(self)
scipy.interpolate.tests.testTestBSpline.test_rndm_splrep(self)
scipy.interpolate.tests.testTestBSpline.test_rndm_unity(self)
scipy.interpolate.tests.testTestBSpline.test_subclassing(self)
scipy.interpolate.tests.testTestBSpline.test_tck(self)
scipy.interpolate.tests.testTestBSpline.test_vectorization(self)
scipy.interpolate.tests.testTestInterop
scipy.interpolate.tests.testTestInterop.setup_method(self)
scipy.interpolate.tests.testTestInterop.test_insert(self)
scipy.interpolate.tests.testTestInterop.test_splantider(self)
scipy.interpolate.tests.testTestInterop.test_splder(self)
scipy.interpolate.tests.testTestInterop.test_splev(self)
scipy.interpolate.tests.testTestInterop.test_splint(self)
scipy.interpolate.tests.testTestInterop.test_splprep(self)
scipy.interpolate.tests.testTestInterop.test_splprep_errors(self)
scipy.interpolate.tests.testTestInterop.test_splrep(self)
scipy.interpolate.tests.testTestInterop.test_splrep_errors(self)
scipy.interpolate.tests.testTestInterop.test_sproot(self)
scipy.interpolate.tests.testTestInterp
scipy.interpolate.tests.testTestInterp.test_broken_x(self,k)
scipy.interpolate.tests.testTestInterp.test_check_finite(self)
scipy.interpolate.tests.testTestInterp.test_complex(self)
scipy.interpolate.tests.testTestInterp.test_cubic_deriv(self)
scipy.interpolate.tests.testTestInterp.test_cubic_deriv_unstable(self)
scipy.interpolate.tests.testTestInterp.test_deriv_spec(self)
scipy.interpolate.tests.testTestInterp.test_full_matrix(self)
scipy.interpolate.tests.testTestInterp.test_incompatible_x_y(self,k)
scipy.interpolate.tests.testTestInterp.test_int_xy(self)
scipy.interpolate.tests.testTestInterp.test_knots_not_data_sites(self)
scipy.interpolate.tests.testTestInterp.test_linear(self)
scipy.interpolate.tests.testTestInterp.test_list_input(self,k)
scipy.interpolate.tests.testTestInterp.test_minimum_points_and_deriv(self)
scipy.interpolate.tests.testTestInterp.test_multiple_rhs(self)
scipy.interpolate.tests.testTestInterp.test_non_int_order(self)
scipy.interpolate.tests.testTestInterp.test_not_a_knot(self)
scipy.interpolate.tests.testTestInterp.test_order_0(self)
scipy.interpolate.tests.testTestInterp.test_periodic(self)
scipy.interpolate.tests.testTestInterp.test_periodic_axis(self)
scipy.interpolate.tests.testTestInterp.test_periodic_cubic(self)
scipy.interpolate.tests.testTestInterp.test_periodic_full_matrix(self)
scipy.interpolate.tests.testTestInterp.test_periodic_knots_exception(self)
scipy.interpolate.tests.testTestInterp.test_periodic_points_exception(self)
scipy.interpolate.tests.testTestInterp.test_periodic_random(self,k)
scipy.interpolate.tests.testTestInterp.test_periodic_splev(self,k)
scipy.interpolate.tests.testTestInterp.test_quadratic_deriv(self)
scipy.interpolate.tests.testTestInterp.test_quintic_derivs(self)
scipy.interpolate.tests.testTestInterp.test_shapes(self)
scipy.interpolate.tests.testTestInterp.test_sliced_input(self)
scipy.interpolate.tests.testTestInterp.test_string_aliases(self)
scipy.interpolate.tests.testTestInterp.test_woodbury(self)
scipy.interpolate.tests.testTestLSQ
scipy.interpolate.tests.testTestLSQ.test_checkfinite(self)
scipy.interpolate.tests.testTestLSQ.test_complex(self)
scipy.interpolate.tests.testTestLSQ.test_int_xy(self)
scipy.interpolate.tests.testTestLSQ.test_lstsq(self)
scipy.interpolate.tests.testTestLSQ.test_multiple_rhs(self)
scipy.interpolate.tests.testTestLSQ.test_sliced_input(self)
scipy.interpolate.tests.testTestLSQ.test_weights(self)
scipy.interpolate.tests.testTestSmoothingSpline
scipy.interpolate.tests.testTestSmoothingSpline.test_compare_with_GCVSPL(self)
scipy.interpolate.tests.testTestSmoothingSpline.test_invalid_input(self)
scipy.interpolate.tests.testTestSmoothingSpline.test_non_regularized_case(self)
scipy.interpolate.tests.testTestSmoothingSpline.test_weighted_smoothing_spline(self)
scipy.interpolate.tests.test_bsplines.B_012(x)
scipy.interpolate.tests.test_bsplines.B_0123(x,der=0)
scipy.interpolate.tests.test_bsplines.TestBSpline
scipy.interpolate.tests.test_bsplines.TestBSpline.test_antiderivative_method(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_axis(self,axis)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_basis_element_quadratic(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_basis_element_rndm(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_bernstein(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_cmplx(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_continuity(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_ctor(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_default_extrap(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_degree_0(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_degree_1(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_derivative_jumps(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_derivative_method(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_derivative_rndm(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_design_matrix_asserts(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_design_matrix_bc_types(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_design_matrix_same_as_BSpline_call(self,extrapolate,degree)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_design_matrix_t_shapes(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_design_matrix_x_shapes(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_endpoints(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_extrap(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_from_power_basis(self,bc_type)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_from_power_basis_complex(self,bc_type)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_from_power_basis_exmp(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_integral(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_integrate_ppoly(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_len_c(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_nan(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_neg_axis(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_periodic_extrap(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_ppoly(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_rndm_naive_eval(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_rndm_splev(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_rndm_splrep(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_rndm_unity(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_subclassing(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_tck(self)
scipy.interpolate.tests.test_bsplines.TestBSpline.test_vectorization(self)
scipy.interpolate.tests.test_bsplines.TestInterop
scipy.interpolate.tests.test_bsplines.TestInterop.setup_method(self)
scipy.interpolate.tests.test_bsplines.TestInterop.test_insert(self)
scipy.interpolate.tests.test_bsplines.TestInterop.test_splantider(self)
scipy.interpolate.tests.test_bsplines.TestInterop.test_splder(self)
scipy.interpolate.tests.test_bsplines.TestInterop.test_splev(self)
scipy.interpolate.tests.test_bsplines.TestInterop.test_splint(self)
scipy.interpolate.tests.test_bsplines.TestInterop.test_splprep(self)
scipy.interpolate.tests.test_bsplines.TestInterop.test_splprep_errors(self)
scipy.interpolate.tests.test_bsplines.TestInterop.test_splrep(self)
scipy.interpolate.tests.test_bsplines.TestInterop.test_splrep_errors(self)
scipy.interpolate.tests.test_bsplines.TestInterop.test_sproot(self)
scipy.interpolate.tests.test_bsplines.TestInterp
scipy.interpolate.tests.test_bsplines.TestInterp.test_broken_x(self,k)
scipy.interpolate.tests.test_bsplines.TestInterp.test_check_finite(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_complex(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_cubic_deriv(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_cubic_deriv_unstable(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_deriv_spec(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_full_matrix(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_incompatible_x_y(self,k)
scipy.interpolate.tests.test_bsplines.TestInterp.test_int_xy(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_knots_not_data_sites(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_linear(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_list_input(self,k)
scipy.interpolate.tests.test_bsplines.TestInterp.test_minimum_points_and_deriv(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_multiple_rhs(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_non_int_order(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_not_a_knot(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_order_0(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_periodic(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_periodic_axis(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_periodic_cubic(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_periodic_full_matrix(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_periodic_knots_exception(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_periodic_points_exception(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_periodic_random(self,k)
scipy.interpolate.tests.test_bsplines.TestInterp.test_periodic_splev(self,k)
scipy.interpolate.tests.test_bsplines.TestInterp.test_quadratic_deriv(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_quintic_derivs(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_shapes(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_sliced_input(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_string_aliases(self)
scipy.interpolate.tests.test_bsplines.TestInterp.test_woodbury(self)
scipy.interpolate.tests.test_bsplines.TestLSQ
scipy.interpolate.tests.test_bsplines.TestLSQ.test_checkfinite(self)
scipy.interpolate.tests.test_bsplines.TestLSQ.test_complex(self)
scipy.interpolate.tests.test_bsplines.TestLSQ.test_int_xy(self)
scipy.interpolate.tests.test_bsplines.TestLSQ.test_lstsq(self)
scipy.interpolate.tests.test_bsplines.TestLSQ.test_multiple_rhs(self)
scipy.interpolate.tests.test_bsplines.TestLSQ.test_sliced_input(self)
scipy.interpolate.tests.test_bsplines.TestLSQ.test_weights(self)
scipy.interpolate.tests.test_bsplines.TestSmoothingSpline
scipy.interpolate.tests.test_bsplines.TestSmoothingSpline.test_compare_with_GCVSPL(self)
scipy.interpolate.tests.test_bsplines.TestSmoothingSpline.test_invalid_input(self)
scipy.interpolate.tests.test_bsplines.TestSmoothingSpline.test_non_regularized_case(self)
scipy.interpolate.tests.test_bsplines.TestSmoothingSpline.test_weighted_smoothing_spline(self)
scipy.interpolate.tests.test_bsplines._make_multiples(b)
scipy.interpolate.tests.test_bsplines._make_random_spline(n=35,k=3)
scipy.interpolate.tests.test_bsplines._naive_B(x,k,i,t)
scipy.interpolate.tests.test_bsplines._naive_eval(x,t,c,k)
scipy.interpolate.tests.test_bsplines._naive_eval_2(x,t,c,k)
scipy.interpolate.tests.test_bsplines._sum_basis_elements(x,t,c,k)
scipy.interpolate.tests.test_bsplines.data_file(basename)
scipy.interpolate.tests.test_bsplines.make_interp_full_matr(x,y,t,k)
scipy.interpolate.tests.test_bsplines.make_lsq_full_matrix(x,y,t,k=3)
scipy.interpolate.tests.test_bsplines.test_knots_multiplicity()
scipy.interpolate.tests.test_make_multiples(b)
scipy.interpolate.tests.test_make_random_spline(n=35,k=3)
scipy.interpolate.tests.test_naive_B(x,k,i,t)
scipy.interpolate.tests.test_naive_eval(x,t,c,k)
scipy.interpolate.tests.test_naive_eval_2(x,t,c,k)
scipy.interpolate.tests.test_sum_basis_elements(x,t,c,k)
scipy.interpolate.tests.testdata_file(basename)
scipy.interpolate.tests.testmake_interp_full_matr(x,y,t,k)
scipy.interpolate.tests.testmake_lsq_full_matrix(x,y,t,k=3)
scipy.interpolate.tests.testtest_knots_multiplicity()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/tests/test_gil.py----------------------------------------
A:scipy.interpolate.tests.test_gil.xy->numpy.linspace(0, 1000, n_points)
A:scipy.interpolate.tests.test_gil.(x_grid, y_grid)->numpy.meshgrid(x, y)
A:scipy.interpolate.tests.test_gil.args->calibrate_delay(requested_time=3)
A:scipy.interpolate.tests.test_gil.time_started->time.time()
A:scipy.interpolate.tests.test_gil.worker_thread->self.make_worker_thread(interpolate, args)
scipy.interpolate.tests.test_gil.TestGIL
scipy.interpolate.tests.test_gil.TestGIL.log(self,message)
scipy.interpolate.tests.test_gil.TestGIL.make_worker_thread(self,target,args)
scipy.interpolate.tests.test_gil.TestGIL.setup_method(self)
scipy.interpolate.tests.test_gil.TestGIL.test_rectbivariatespline(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/tests/test_fitpack2.py----------------------------------------
A:scipy.interpolate.tests.test_fitpack2.lut->RectSphereBivariateSpline(x, y, z)
A:scipy.interpolate.tests.test_fitpack2.sp->ZeroSpline([1, 2, 3, 4, 5], [3, 2, 3, 2, 3], k=2)
A:scipy.interpolate.tests.test_fitpack2.spl->UnivariateSpline(x_values, y_values, check_finite=True)
A:scipy.interpolate.tests.test_fitpack2.x->numpy.concatenate(list(zip(range(10), range(10))))
A:scipy.interpolate.tests.test_fitpack2.tck->bisplrep(x, y, z)
A:scipy.interpolate.tests.test_fitpack2.ders->spalde(3, tck)
A:scipy.interpolate.tests.test_fitpack2.desired->array([0.35100374, 0.51715855, 0.87789547, 0.98719344])
A:scipy.interpolate.tests.test_fitpack2.xp->linspace(-8, 13, 100)
A:scipy.interpolate.tests.test_fitpack2.xp_zeros->linspace(-8, 13, 100).copy()
A:scipy.interpolate.tests.test_fitpack2.xp_clip->linspace(-8, 13, 100).copy()
A:scipy.interpolate.tests.test_fitpack2.knots->numpy.linspace(0, 99, 10)
A:scipy.interpolate.tests.test_fitpack2.y->numpy.concatenate(list(zip(range(10), range(1, 11))))
A:scipy.interpolate.tests.test_fitpack2.spl2->RectSphereBivariateSpline(x.tolist(), y.tolist(), z.tolist())
A:scipy.interpolate.tests.test_fitpack2.f->UnivariateSpline(x, x, s=0, ext=ext)
A:scipy.interpolate.tests.test_fitpack2.w->numpy.array([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])
A:scipy.interpolate.tests.test_fitpack2.xx->linspace(0, 1, 20)
A:scipy.interpolate.tests.test_fitpack2.x_values->numpy.array([1, 2, 4, 6, 8.5])
A:scipy.interpolate.tests.test_fitpack2.y_values->numpy.array([0.5, 0.8, 1.3, 2.5, 2.8])
A:scipy.interpolate.tests.test_fitpack2.w_values->numpy.array([1.0, 1.0, 1.0, 1.0, 1.0])
A:scipy.interpolate.tests.test_fitpack2.bbox->array([1, 5, 1, 5])
A:scipy.interpolate.tests.test_fitpack2.spl1->RectSphereBivariateSpline(x, y, z)
A:scipy.interpolate.tests.test_fitpack2.r->numpy.zeros((9, 9))
A:scipy.interpolate.tests.test_fitpack2.(tx, ty)->RectSphereBivariateSpline(x, y, z).get_knots()
A:scipy.interpolate.tests.test_fitpack2.z->numpy.concatenate((np.linspace(3, 1, 10), np.linspace(1, 3, 10)))
A:scipy.interpolate.tests.test_fitpack2.tz->lut(tx[:-1], ty[:-1])
A:scipy.interpolate.tests.test_fitpack2.tx->numpy.linspace(0.1, 98.0, 29)
A:scipy.interpolate.tests.test_fitpack2.ty->numpy.linspace(0.1, 98.0, 33)
A:scipy.interpolate.tests.test_fitpack2.lut2->SmoothBivariateSpline(x, y, z, kx=2, ky=2, s=0)
A:scipy.interpolate.tests.test_fitpack2.xi->numpy.linspace(-1, 1, 100)
A:scipy.interpolate.tests.test_fitpack2.yi->numpy.linspace(-2, 2, 100)
A:scipy.interpolate.tests.test_fitpack2.res1->bisplev(xi, yi, tck)
A:scipy.interpolate.tests.test_fitpack2.interp_->SmoothBivariateSpline(x, y, z)
A:scipy.interpolate.tests.test_fitpack2.res2->interp_(xi, yi)
A:scipy.interpolate.tests.test_fitpack2.data->ones((theta.shape[0], phi.shape[0]))
A:scipy.interpolate.tests.test_fitpack2.(lats, lons)->meshgrid(theta, phi)
A:scipy.interpolate.tests.test_fitpack2.lut_lsq->LSQSphereBivariateSpline(lats.ravel(), lons.ravel(), data.T.ravel(), knotst, knotsp)
A:scipy.interpolate.tests.test_fitpack2.(invalid_lats, lons)->meshgrid(invalid_theta, phi)
A:scipy.interpolate.tests.test_fitpack2.(lats, invalid_lons)->meshgrid(theta, invalid_phi)
A:scipy.interpolate.tests.test_fitpack2.invalid_knotst->numpy.copy(knotst)
A:scipy.interpolate.tests.test_fitpack2.invalid_knotsp->numpy.copy(knotsp)
A:scipy.interpolate.tests.test_fitpack2.invalid_w->array([-1.0, 1.0, 1.5, 0.5, 1.0, 1.5, 0.5, 1.0, 1.0])
A:scipy.interpolate.tests.test_fitpack2.theta->numpy.array([0.25 * pi, 0.25 * pi, 0.25 * pi, 0.5 * pi, 0.5 * pi, 0.5 * pi, 0.75 * pi, 0.75 * pi, 0.75 * pi])
A:scipy.interpolate.tests.test_fitpack2.phi->numpy.array([0.5 * pi, pi, 1.5 * pi, 0.5 * pi, pi, 1.5 * pi, 0.5 * pi, pi, 1.5 * pi])
A:scipy.interpolate.tests.test_fitpack2.self.lut->SmoothSphereBivariateSpline(theta, phi, r, s=10000000000.0)
A:scipy.interpolate.tests.test_fitpack2.invalid_theta->array([0.25 * pi, 0.25 * pi, 0.25 * pi, 0.5 * pi, 0.5 * pi, 0.5 * pi, 0.75 * pi, 0.75 * pi, 1.1 * pi])
A:scipy.interpolate.tests.test_fitpack2.invalid_phi->array([1.0 * pi, pi, 1.5 * pi, 0.5 * pi, pi, 1.5 * pi, 0.5 * pi, pi, 2.1 * pi])
A:scipy.interpolate.tests.test_fitpack2.zi->RectSphereBivariateSpline(x, y, z).ev(xi, yi)
A:scipy.interpolate.tests.test_fitpack2.zi2->array([lut(xp, yp)[0, 0] for (xp, yp) in zip(xi, yi)])
A:scipy.interpolate.tests.test_fitpack2.dy->array([4, -1, 0, -0.25, -4])
A:scipy.interpolate.tests.test_fitpack2.dx->array([0, 0, 2.0 / 3, 0, 0])
A:scipy.interpolate.tests.test_fitpack2.Theta->numpy.random.uniform(0, np.pi, NSamp)
A:scipy.interpolate.tests.test_fitpack2.Phi->numpy.random.uniform(0, 2 * np.pi, NSamp)
A:scipy.interpolate.tests.test_fitpack2.Data->numpy.ones(NSamp)
A:scipy.interpolate.tests.test_fitpack2.Interpolator->SmoothSphereBivariateSpline(Theta, Phi, Data, s=3.5)
A:scipy.interpolate.tests.test_fitpack2.nonGridPosLats->GridPosLats.copy()
A:scipy.interpolate.tests.test_fitpack2.nonGridPosLons->GridPosLons.copy()
A:scipy.interpolate.tests.test_fitpack2.lats->numpy.array([25, 30, 35, 40, 45])
A:scipy.interpolate.tests.test_fitpack2.lons->numpy.array([-90, -85, -80, -75, 70])
A:scipy.interpolate.tests.test_fitpack2.mesh->numpy.meshgrid(lats, lons)
A:scipy.interpolate.tests.test_fitpack2.lat_r->numpy.radians(lats)
A:scipy.interpolate.tests.test_fitpack2.lon_r->numpy.radians(lons)
A:scipy.interpolate.tests.test_fitpack2.interpolator->RectSphereBivariateSpline(lat_r, lon_r, data)
A:scipy.interpolate.tests.test_fitpack2.query_lat->numpy.radians(np.array([35, 37.5]))
A:scipy.interpolate.tests.test_fitpack2.query_lon->numpy.radians(np.array([-80, -77.5]))
A:scipy.interpolate.tests.test_fitpack2.data_interp->interpolator(query_lat, query_lon)
A:scipy.interpolate.tests.test_fitpack2.ans->numpy.array([[-45.0, -42.480862], [-49.0625, -46.54315]])
A:scipy.interpolate.tests.test_fitpack2.self.lut_lsq->LSQBivariateSpline(x, y, z, linspace(0.5, 19.5, 4), linspace(1.5, 20.5, 4), eps=0.01)
A:scipy.interpolate.tests.test_fitpack2.self.lut_smooth->SmoothBivariateSpline(x, y, z)
A:scipy.interpolate.tests.test_fitpack2.zz->array([np.roll(z, i) for i in range(z.size)])
A:scipy.interpolate.tests.test_fitpack2.self.lut_rect->RectBivariateSpline(xx, yy, zz)
A:scipy.interpolate.tests.test_fitpack2.self.orders->list(itertools.product(range(3), range(3)))
A:scipy.interpolate.tests.test_fitpack2.lut_der->self.lut_rect.partial_derivative(nux, nuy)
A:scipy.interpolate.tests.test_fitpack2.a->lut_der(0.5, 1.5, grid=False)
A:scipy.interpolate.tests.test_fitpack2.b->self.lut_rect(0.5, 1.5, dx=nux, dy=nuy, grid=False)
A:scipy.interpolate.tests.test_fitpack2.der->self.lut_smooth.partial_derivative(1, 1)
scipy.interpolate.tests.testTestLSQBivariateSpline
scipy.interpolate.tests.testTestLSQBivariateSpline.test_array_like_input(self)
scipy.interpolate.tests.testTestLSQBivariateSpline.test_bilinearity(self)
scipy.interpolate.tests.testTestLSQBivariateSpline.test_empty_input(self)
scipy.interpolate.tests.testTestLSQBivariateSpline.test_integral(self)
scipy.interpolate.tests.testTestLSQBivariateSpline.test_invalid_input(self)
scipy.interpolate.tests.testTestLSQBivariateSpline.test_linear_constant(self)
scipy.interpolate.tests.testTestLSQBivariateSpline.test_unequal_length_of_knots(self)
scipy.interpolate.tests.testTestLSQSphereBivariateSpline
scipy.interpolate.tests.testTestLSQSphereBivariateSpline.setup_method(self)
scipy.interpolate.tests.testTestLSQSphereBivariateSpline.test_array_like_input(self)
scipy.interpolate.tests.testTestLSQSphereBivariateSpline.test_empty_input(self)
scipy.interpolate.tests.testTestLSQSphereBivariateSpline.test_invalid_input(self)
scipy.interpolate.tests.testTestLSQSphereBivariateSpline.test_linear_constant(self)
scipy.interpolate.tests.testTestRectBivariateSpline
scipy.interpolate.tests.testTestRectBivariateSpline.test_array_like_input(self)
scipy.interpolate.tests.testTestRectBivariateSpline.test_broadcast(self)
scipy.interpolate.tests.testTestRectBivariateSpline.test_defaults(self)
scipy.interpolate.tests.testTestRectBivariateSpline.test_derivatives(self)
scipy.interpolate.tests.testTestRectBivariateSpline.test_derivatives_grid(self)
scipy.interpolate.tests.testTestRectBivariateSpline.test_evaluate(self)
scipy.interpolate.tests.testTestRectBivariateSpline.test_invalid_input(self)
scipy.interpolate.tests.testTestRectBivariateSpline.test_not_increasing_input(self)
scipy.interpolate.tests.testTestRectBivariateSpline.test_partial_derivative_method(self)
scipy.interpolate.tests.testTestRectBivariateSpline.test_partial_derivative_method_grid(self)
scipy.interpolate.tests.testTestRectBivariateSpline.test_partial_derivative_order_too_large(self)
scipy.interpolate.tests.testTestRectSphereBivariateSpline
scipy.interpolate.tests.testTestRectSphereBivariateSpline.test_array_like_input(self)
scipy.interpolate.tests.testTestRectSphereBivariateSpline.test_defaults(self)
scipy.interpolate.tests.testTestRectSphereBivariateSpline.test_derivatives(self)
scipy.interpolate.tests.testTestRectSphereBivariateSpline.test_derivatives_grid(self)
scipy.interpolate.tests.testTestRectSphereBivariateSpline.test_evaluate(self)
scipy.interpolate.tests.testTestRectSphereBivariateSpline.test_invalid_input(self)
scipy.interpolate.tests.testTestRectSphereBivariateSpline.test_invalid_input_2(self)
scipy.interpolate.tests.testTestRectSphereBivariateSpline.test_negative_evaluation(self)
scipy.interpolate.tests.testTestRectSphereBivariateSpline.test_pole_continuity_gh_14591(self)
scipy.interpolate.tests.testTestSmoothBivariateSpline
scipy.interpolate.tests.testTestSmoothBivariateSpline.test_array_like_input(self)
scipy.interpolate.tests.testTestSmoothBivariateSpline.test_integral(self)
scipy.interpolate.tests.testTestSmoothBivariateSpline.test_invalid_input(self)
scipy.interpolate.tests.testTestSmoothBivariateSpline.test_linear_1d(self)
scipy.interpolate.tests.testTestSmoothBivariateSpline.test_linear_constant(self)
scipy.interpolate.tests.testTestSmoothBivariateSpline.test_rerun_lwrk2_too_small(self)
scipy.interpolate.tests.testTestSmoothSphereBivariateSpline
scipy.interpolate.tests.testTestSmoothSphereBivariateSpline.setup_method(self)
scipy.interpolate.tests.testTestSmoothSphereBivariateSpline.test_array_like_input(self)
scipy.interpolate.tests.testTestSmoothSphereBivariateSpline.test_empty_input(self)
scipy.interpolate.tests.testTestSmoothSphereBivariateSpline.test_invalid_input(self)
scipy.interpolate.tests.testTestSmoothSphereBivariateSpline.test_linear_constant(self)
scipy.interpolate.tests.testTestUnivariateSpline
scipy.interpolate.tests.testTestUnivariateSpline.test_array_like_input(self)
scipy.interpolate.tests.testTestUnivariateSpline.test_derivative_and_antiderivative(self)
scipy.interpolate.tests.testTestUnivariateSpline.test_derivative_extrapolation(self)
scipy.interpolate.tests.testTestUnivariateSpline.test_derivatives(self)
scipy.interpolate.tests.testTestUnivariateSpline.test_derivatives_2(self)
scipy.interpolate.tests.testTestUnivariateSpline.test_empty_input(self)
scipy.interpolate.tests.testTestUnivariateSpline.test_fpknot_oob_crash(self)
scipy.interpolate.tests.testTestUnivariateSpline.test_increasing_x(self)
scipy.interpolate.tests.testTestUnivariateSpline.test_integral_out_of_bounds(self)
scipy.interpolate.tests.testTestUnivariateSpline.test_invalid_input_for_interpolated_univariate_spline(self)
scipy.interpolate.tests.testTestUnivariateSpline.test_invalid_input_for_lsq_univariate_spline(self)
scipy.interpolate.tests.testTestUnivariateSpline.test_invalid_input_for_univariate_spline(self)
scipy.interpolate.tests.testTestUnivariateSpline.test_linear_1d(self)
scipy.interpolate.tests.testTestUnivariateSpline.test_linear_constant(self)
scipy.interpolate.tests.testTestUnivariateSpline.test_lsq_fpchec(self)
scipy.interpolate.tests.testTestUnivariateSpline.test_nan(self)
scipy.interpolate.tests.testTestUnivariateSpline.test_out_of_range_regression(self)
scipy.interpolate.tests.testTestUnivariateSpline.test_preserve_shape(self)
scipy.interpolate.tests.testTestUnivariateSpline.test_resize_regression(self)
scipy.interpolate.tests.testTestUnivariateSpline.test_roots(self)
scipy.interpolate.tests.testTestUnivariateSpline.test_strictly_increasing_x(self)
scipy.interpolate.tests.testTestUnivariateSpline.test_subclassing(self)
scipy.interpolate.tests.testTest_DerivedBivariateSpline(object)
scipy.interpolate.tests.testTest_DerivedBivariateSpline.setup_method(self)
scipy.interpolate.tests.testTest_DerivedBivariateSpline.test_creation_from_LSQ(self)
scipy.interpolate.tests.testTest_DerivedBivariateSpline.test_creation_from_Rect(self)
scipy.interpolate.tests.testTest_DerivedBivariateSpline.test_creation_from_Smooth(self)
scipy.interpolate.tests.testTest_DerivedBivariateSpline.test_invalid_attribute_fp(self)
scipy.interpolate.tests.testTest_DerivedBivariateSpline.test_invalid_attribute_get_residual(self)
scipy.interpolate.tests.test_fitpack2.TestLSQBivariateSpline
scipy.interpolate.tests.test_fitpack2.TestLSQBivariateSpline.test_array_like_input(self)
scipy.interpolate.tests.test_fitpack2.TestLSQBivariateSpline.test_bilinearity(self)
scipy.interpolate.tests.test_fitpack2.TestLSQBivariateSpline.test_empty_input(self)
scipy.interpolate.tests.test_fitpack2.TestLSQBivariateSpline.test_integral(self)
scipy.interpolate.tests.test_fitpack2.TestLSQBivariateSpline.test_invalid_input(self)
scipy.interpolate.tests.test_fitpack2.TestLSQBivariateSpline.test_linear_constant(self)
scipy.interpolate.tests.test_fitpack2.TestLSQBivariateSpline.test_unequal_length_of_knots(self)
scipy.interpolate.tests.test_fitpack2.TestLSQSphereBivariateSpline
scipy.interpolate.tests.test_fitpack2.TestLSQSphereBivariateSpline.setup_method(self)
scipy.interpolate.tests.test_fitpack2.TestLSQSphereBivariateSpline.test_array_like_input(self)
scipy.interpolate.tests.test_fitpack2.TestLSQSphereBivariateSpline.test_empty_input(self)
scipy.interpolate.tests.test_fitpack2.TestLSQSphereBivariateSpline.test_invalid_input(self)
scipy.interpolate.tests.test_fitpack2.TestLSQSphereBivariateSpline.test_linear_constant(self)
scipy.interpolate.tests.test_fitpack2.TestRectBivariateSpline
scipy.interpolate.tests.test_fitpack2.TestRectBivariateSpline.test_array_like_input(self)
scipy.interpolate.tests.test_fitpack2.TestRectBivariateSpline.test_broadcast(self)
scipy.interpolate.tests.test_fitpack2.TestRectBivariateSpline.test_defaults(self)
scipy.interpolate.tests.test_fitpack2.TestRectBivariateSpline.test_derivatives(self)
scipy.interpolate.tests.test_fitpack2.TestRectBivariateSpline.test_derivatives_grid(self)
scipy.interpolate.tests.test_fitpack2.TestRectBivariateSpline.test_evaluate(self)
scipy.interpolate.tests.test_fitpack2.TestRectBivariateSpline.test_invalid_input(self)
scipy.interpolate.tests.test_fitpack2.TestRectBivariateSpline.test_not_increasing_input(self)
scipy.interpolate.tests.test_fitpack2.TestRectBivariateSpline.test_partial_derivative_method(self)
scipy.interpolate.tests.test_fitpack2.TestRectBivariateSpline.test_partial_derivative_method_grid(self)
scipy.interpolate.tests.test_fitpack2.TestRectBivariateSpline.test_partial_derivative_order_too_large(self)
scipy.interpolate.tests.test_fitpack2.TestRectSphereBivariateSpline
scipy.interpolate.tests.test_fitpack2.TestRectSphereBivariateSpline.test_array_like_input(self)
scipy.interpolate.tests.test_fitpack2.TestRectSphereBivariateSpline.test_defaults(self)
scipy.interpolate.tests.test_fitpack2.TestRectSphereBivariateSpline.test_derivatives(self)
scipy.interpolate.tests.test_fitpack2.TestRectSphereBivariateSpline.test_derivatives_grid(self)
scipy.interpolate.tests.test_fitpack2.TestRectSphereBivariateSpline.test_evaluate(self)
scipy.interpolate.tests.test_fitpack2.TestRectSphereBivariateSpline.test_invalid_input(self)
scipy.interpolate.tests.test_fitpack2.TestRectSphereBivariateSpline.test_invalid_input_2(self)
scipy.interpolate.tests.test_fitpack2.TestRectSphereBivariateSpline.test_negative_evaluation(self)
scipy.interpolate.tests.test_fitpack2.TestRectSphereBivariateSpline.test_pole_continuity_gh_14591(self)
scipy.interpolate.tests.test_fitpack2.TestSmoothBivariateSpline
scipy.interpolate.tests.test_fitpack2.TestSmoothBivariateSpline.test_array_like_input(self)
scipy.interpolate.tests.test_fitpack2.TestSmoothBivariateSpline.test_integral(self)
scipy.interpolate.tests.test_fitpack2.TestSmoothBivariateSpline.test_invalid_input(self)
scipy.interpolate.tests.test_fitpack2.TestSmoothBivariateSpline.test_linear_1d(self)
scipy.interpolate.tests.test_fitpack2.TestSmoothBivariateSpline.test_linear_constant(self)
scipy.interpolate.tests.test_fitpack2.TestSmoothBivariateSpline.test_rerun_lwrk2_too_small(self)
scipy.interpolate.tests.test_fitpack2.TestSmoothSphereBivariateSpline
scipy.interpolate.tests.test_fitpack2.TestSmoothSphereBivariateSpline.setup_method(self)
scipy.interpolate.tests.test_fitpack2.TestSmoothSphereBivariateSpline.test_array_like_input(self)
scipy.interpolate.tests.test_fitpack2.TestSmoothSphereBivariateSpline.test_empty_input(self)
scipy.interpolate.tests.test_fitpack2.TestSmoothSphereBivariateSpline.test_invalid_input(self)
scipy.interpolate.tests.test_fitpack2.TestSmoothSphereBivariateSpline.test_linear_constant(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_array_like_input(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_derivative_and_antiderivative(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_derivative_extrapolation(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_derivatives(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_derivatives_2(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_empty_input(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_fpknot_oob_crash(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_increasing_x(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_integral_out_of_bounds(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_invalid_input_for_interpolated_univariate_spline(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_invalid_input_for_lsq_univariate_spline(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_invalid_input_for_univariate_spline(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_linear_1d(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_linear_constant(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_lsq_fpchec(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_nan(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_out_of_range_regression(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_preserve_shape(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_resize_regression(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_roots(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_strictly_increasing_x(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_subclassing(self)
scipy.interpolate.tests.test_fitpack2.Test_DerivedBivariateSpline(object)
scipy.interpolate.tests.test_fitpack2.Test_DerivedBivariateSpline.setup_method(self)
scipy.interpolate.tests.test_fitpack2.Test_DerivedBivariateSpline.test_creation_from_LSQ(self)
scipy.interpolate.tests.test_fitpack2.Test_DerivedBivariateSpline.test_creation_from_Rect(self)
scipy.interpolate.tests.test_fitpack2.Test_DerivedBivariateSpline.test_creation_from_Smooth(self)
scipy.interpolate.tests.test_fitpack2.Test_DerivedBivariateSpline.test_invalid_attribute_fp(self)
scipy.interpolate.tests.test_fitpack2.Test_DerivedBivariateSpline.test_invalid_attribute_get_residual(self)
scipy.interpolate.tests.test_fitpack2._numdiff_2d(func,x,y,dx=0,dy=0,eps=1e-08)
scipy.interpolate.tests.test_numdiff_2d(func,x,y,dx=0,dy=0,eps=1e-08)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/tests/test_interpnd.py----------------------------------------
A:scipy.interpolate.tests.test_interpnd.x->numpy.random.rand(30, 2)
A:scipy.interpolate.tests.test_interpnd.y->numpy.random.randn(30)
A:scipy.interpolate.tests.test_interpnd.yi->scipy.interpolate.interpnd.CloughTocher2DInterpolator(tri.points, y)(x)
A:scipy.interpolate.tests.test_interpnd.tri->scipy.spatial._qhull.Delaunay(x)
A:scipy.interpolate.tests.test_interpnd.points->numpy.array([(0, 0), (1, 0), (0.5, np.sqrt(3) / 2)])
A:scipy.interpolate.tests.test_interpnd.values->numpy.array([1, 0, 0])
A:scipy.interpolate.tests.test_interpnd.(xx, yy)->numpy.broadcast_arrays(np.linspace(0, 10, 14)[:, None], np.linspace(0, 100, 14)[None, :])
A:scipy.interpolate.tests.test_interpnd.xx->xx.ravel().ravel()
A:scipy.interpolate.tests.test_interpnd.yy->yy.ravel().ravel()
A:scipy.interpolate.tests.test_interpnd.xi->numpy.array([xx, yy]).T.copy()
A:scipy.interpolate.tests.test_interpnd.zi->scipy.interpolate.interpnd.LinearNDInterpolator(points, values)(xi)
A:scipy.interpolate.tests.test_interpnd.zi_rescaled->scipy.interpolate.interpnd.LinearNDInterpolator(points, values, rescale=True)(xi)
A:scipy.interpolate.tests.test_interpnd.yi_rescale->scipy.interpolate.interpnd.CloughTocher2DInterpolator(tri.points, y, rescale=True)(x)
A:scipy.interpolate.tests.test_interpnd.ip->scipy.interpolate.interpnd.CloughTocher2DInterpolator(points, values)
A:scipy.interpolate.tests.test_interpnd.ip2->pickle.loads(pickle.dumps(ip))
A:scipy.interpolate.tests.test_interpnd.z->func(x[:, 0], x[:, 1])
A:scipy.interpolate.tests.test_interpnd.dz->scipy.interpolate.interpnd.estimate_gradients_2d_global(tri, z, tol=1e-06)
A:scipy.interpolate.tests.test_interpnd.p->numpy.random.rand(50, 2)
A:scipy.interpolate.tests.test_interpnd.a->ip(p[:, 0], p[:, 1])
A:scipy.interpolate.tests.test_interpnd.b->numpy.random.randn(2)
A:scipy.interpolate.tests.test_interpnd.p1->numpy.array([0.5 * np.cos(alpha), 0.5 * np.sin(alpha)])
A:scipy.interpolate.tests.test_interpnd.p2->numpy.array([0.5 * np.cos(np.pi / 3 - alpha), 0.5 * np.sin(np.pi / 3 - alpha)])
A:scipy.interpolate.tests.test_interpnd.v1->ip(p1)
A:scipy.interpolate.tests.test_interpnd.v2->ip(p2)
A:scipy.interpolate.tests.test_interpnd.A->numpy.random.randn(2, 2)
A:scipy.interpolate.tests.test_interpnd.w1->ip(p1)
A:scipy.interpolate.tests.test_interpnd.w2->ip(p2)
scipy.interpolate.tests.test_interpnd.TestCloughTocher2DInterpolator
scipy.interpolate.tests.test_interpnd.TestCloughTocher2DInterpolator._check_accuracy(self,func,x=None,tol=1e-06,alternate=False,rescale=False,**kw)
scipy.interpolate.tests.test_interpnd.TestCloughTocher2DInterpolator.test_boundary_tri_symmetry(self)
scipy.interpolate.tests.test_interpnd.TestCloughTocher2DInterpolator.test_dense(self)
scipy.interpolate.tests.test_interpnd.TestCloughTocher2DInterpolator.test_linear_smoketest(self)
scipy.interpolate.tests.test_interpnd.TestCloughTocher2DInterpolator.test_pickle(self)
scipy.interpolate.tests.test_interpnd.TestCloughTocher2DInterpolator.test_quadratic_smoketest(self)
scipy.interpolate.tests.test_interpnd.TestCloughTocher2DInterpolator.test_tri_input(self)
scipy.interpolate.tests.test_interpnd.TestCloughTocher2DInterpolator.test_tri_input_rescale(self)
scipy.interpolate.tests.test_interpnd.TestCloughTocher2DInterpolator.test_tripoints_input_rescale(self)
scipy.interpolate.tests.test_interpnd.TestCloughTocher2DInterpolator.test_wrong_ndim(self)
scipy.interpolate.tests.test_interpnd.TestEstimateGradients2DGlobal
scipy.interpolate.tests.test_interpnd.TestEstimateGradients2DGlobal.test_regression_2359(self)
scipy.interpolate.tests.test_interpnd.TestEstimateGradients2DGlobal.test_smoketest(self)
scipy.interpolate.tests.test_interpnd.TestLinearNDInterpolation
scipy.interpolate.tests.test_interpnd.TestLinearNDInterpolation.test_complex_smoketest(self)
scipy.interpolate.tests.test_interpnd.TestLinearNDInterpolation.test_pickle(self)
scipy.interpolate.tests.test_interpnd.TestLinearNDInterpolation.test_smoketest(self)
scipy.interpolate.tests.test_interpnd.TestLinearNDInterpolation.test_smoketest_alternate(self)
scipy.interpolate.tests.test_interpnd.TestLinearNDInterpolation.test_smoketest_rescale(self)
scipy.interpolate.tests.test_interpnd.TestLinearNDInterpolation.test_square(self)
scipy.interpolate.tests.test_interpnd.TestLinearNDInterpolation.test_square_rescale(self)
scipy.interpolate.tests.test_interpnd.TestLinearNDInterpolation.test_tri_input(self)
scipy.interpolate.tests.test_interpnd.TestLinearNDInterpolation.test_tri_input_rescale(self)
scipy.interpolate.tests.test_interpnd.TestLinearNDInterpolation.test_tripoints_input_rescale(self)
scipy.interpolate.tests.test_interpnd.data_file(basename)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/tests/test_polyint.py----------------------------------------
A:scipy.interpolate.tests.test_polyint.s->CubicHermiteSpline(x, y, dydx)
A:scipy.interpolate.tests.test_polyint.y->numpy.array([1.66066935e-06, 1.10410807e-06])
A:scipy.interpolate.tests.test_polyint.xi->numpy.sort(np.random.random(npts))
A:scipy.interpolate.tests.test_polyint.dydx->numpy.random.rand(*(6,) + y_shape).transpose(s)
A:scipy.interpolate.tests.test_polyint.yi->numpy.random.random(npts)
A:scipy.interpolate.tests.test_polyint.yv->yv.reshape(bs_shape).reshape(bs_shape)
A:scipy.interpolate.tests.test_polyint.(yi, y)->numpy.broadcast_arrays(yi, yv)
A:scipy.interpolate.tests.test_polyint.p->CubicHermiteSpline(x, y, dy)
A:scipy.interpolate.tests.test_polyint.self.true_poly->numpy.poly1d([-2, 3, 1, 5, -4])
A:scipy.interpolate.tests.test_polyint.self.test_xs->numpy.linspace(-1, 1, 100)
A:scipy.interpolate.tests.test_polyint.self.xs->numpy.linspace(-1, 1, 5)
A:scipy.interpolate.tests.test_polyint.self.ys->self.true_poly(self.xs)
A:scipy.interpolate.tests.test_polyint.P->BarycentricInterpolator([0, 1], [1, 2])
A:scipy.interpolate.tests.test_polyint.D->BarycentricInterpolator([0, 1], [1, 2]).derivatives(self.test_xs, len(self.xs) + 2)
A:scipy.interpolate.tests.test_polyint.r->CubicHermiteSpline(x, y, dy).roots(extrapolate=True)
A:scipy.interpolate.tests.test_polyint.ys->numpy.array([[0, 1], [1, 0], [2, 1]])
A:scipy.interpolate.tests.test_polyint.test_xs->numpy.linspace(-1, 3, 100)
A:scipy.interpolate.tests.test_polyint.offset_cdf->numpy.array([-0.95, -0.86114777, -0.8147762, -0.64072425, -0.48002351, -0.34925329, -0.26503107, -0.13148093, -0.12988833, -0.12979296, -0.12973574, -0.08582937, 0.05])
A:scipy.interpolate.tests.test_polyint.f->KroghInterpolator(x, offset_cdf)
A:scipy.interpolate.tests.test_polyint.func->KroghInterpolator(x, y)
A:scipy.interpolate.tests.test_polyint.cmplx->KroghInterpolator(x, y).derivatives(0)
A:scipy.interpolate.tests.test_polyint.values->barycentric_interpolate(self.xs, self.ys, self.test_xs)
A:scipy.interpolate.tests.test_polyint.value->barycentric_interpolate(x, y, 1000 * 9.5)
A:scipy.interpolate.tests.test_polyint.j->numpy.arange(n + 1).astype(np.float64)
A:scipy.interpolate.tests.test_polyint.x->numpy.arange(10)
A:scipy.interpolate.tests.test_polyint.(p, xi, yi)->self._make_random()
A:scipy.interpolate.tests.test_polyint.xp->numpy.linspace(x1, x2, 10)
A:scipy.interpolate.tests.test_polyint.yp->p(xp)
A:scipy.interpolate.tests.test_polyint.data->numpy.loadtxt(io.StringIO(dataStr))
A:scipy.interpolate.tests.test_polyint.xx->numpy.linspace(0, 9, 101)
A:scipy.interpolate.tests.test_polyint.curve->pchip(data[0], data[1])(xx)
A:scipy.interpolate.tests.test_polyint.curve1->pchip(data1[0], data1[1])(xx)
A:scipy.interpolate.tests.test_polyint.pch->pchip(x, y)
A:scipy.interpolate.tests.test_polyint.result->numpy.loadtxt(io.StringIO(resultStr))
A:scipy.interpolate.tests.test_polyint.y1->numpy.array([279.35, 500.0, 1000.0, 2500.0])
A:scipy.interpolate.tests.test_polyint.y2->numpy.array([279.35, 2500.0, 1500.0, 1000.0])
A:scipy.interpolate.tests.test_polyint.dx->dx.reshape([dx.shape[0]] + [1] * (c.ndim - 2)).reshape([dx.shape[0]] + [1] * (c.ndim - 2))
A:scipy.interpolate.tests.test_polyint.deriv_shape->list(y.shape)
A:scipy.interpolate.tests.test_polyint.first_deriv->numpy.empty(deriv_shape)
A:scipy.interpolate.tests.test_polyint.second_deriv->numpy.empty(deriv_shape)
A:scipy.interpolate.tests.test_polyint.S->CubicSpline(x, y)
A:scipy.interpolate.tests.test_polyint.Y->numpy.empty((2, n, 2))
A:scipy.interpolate.tests.test_polyint.rng->numpy.random.RandomState(0)
A:scipy.interpolate.tests.test_polyint.xc->numpy.array([1 + 1j, 2, 3, 4])
A:scipy.interpolate.tests.test_polyint.xn->numpy.array([np.nan, 2, 3, 4])
A:scipy.interpolate.tests.test_polyint.xo->numpy.array([2, 1, 3, 4])
A:scipy.interpolate.tests.test_polyint.yn->numpy.array([np.nan, 2, 3, 4])
A:scipy.interpolate.tests.test_polyint.dy->numpy.array([-1.60061854, -1.600619])
A:scipy.interpolate.tests.test_polyint.xval->numpy.arange(3)
A:scipy.interpolate.tests.test_polyint.obj->cls(x, yt, axis=axis)
A:scipy.interpolate.tests.test_polyint.yt->numpy.moveaxis(y, 0, axis)
scipy.interpolate.tests.testTestBarycentric
scipy.interpolate.tests.testTestBarycentric.setup_method(self)
scipy.interpolate.tests.testTestBarycentric.test_append(self)
scipy.interpolate.tests.testTestBarycentric.test_delayed(self)
scipy.interpolate.tests.testTestBarycentric.test_int_input(self)
scipy.interpolate.tests.testTestBarycentric.test_lagrange(self)
scipy.interpolate.tests.testTestBarycentric.test_large_chebyshev(self)
scipy.interpolate.tests.testTestBarycentric.test_scalar(self)
scipy.interpolate.tests.testTestBarycentric.test_shapes_1d_vectorvalue(self)
scipy.interpolate.tests.testTestBarycentric.test_shapes_scalarvalue(self)
scipy.interpolate.tests.testTestBarycentric.test_shapes_vectorvalue(self)
scipy.interpolate.tests.testTestBarycentric.test_vector(self)
scipy.interpolate.tests.testTestBarycentric.test_warning(self)
scipy.interpolate.tests.testTestBarycentric.test_wrapper(self)
scipy.interpolate.tests.testTestCubicSpline
scipy.interpolate.tests.testTestCubicSpline.check_all_bc(self,x,y,axis)
scipy.interpolate.tests.testTestCubicSpline.check_correctness(S,bc_start='not-a-knot',bc_end='not-a-knot',tol=1e-14)
scipy.interpolate.tests.testTestCubicSpline.test_dtypes(self)
scipy.interpolate.tests.testTestCubicSpline.test_general(self)
scipy.interpolate.tests.testTestCubicSpline.test_incorrect_inputs(self)
scipy.interpolate.tests.testTestCubicSpline.test_periodic(self)
scipy.interpolate.tests.testTestCubicSpline.test_periodic_eval(self)
scipy.interpolate.tests.testTestCubicSpline.test_second_derivative_continuity_gh_11758(self)
scipy.interpolate.tests.testTestCubicSpline.test_small_dx(self)
scipy.interpolate.tests.testTestCubicSpline.test_three_points(self)
scipy.interpolate.tests.testTestKrogh
scipy.interpolate.tests.testTestKrogh.setup_method(self)
scipy.interpolate.tests.testTestKrogh.test_derivative(self)
scipy.interpolate.tests.testTestKrogh.test_derivatives(self)
scipy.interpolate.tests.testTestKrogh.test_derivatives_complex(self)
scipy.interpolate.tests.testTestKrogh.test_empty(self)
scipy.interpolate.tests.testTestKrogh.test_hermite(self)
scipy.interpolate.tests.testTestKrogh.test_high_degree_warning(self)
scipy.interpolate.tests.testTestKrogh.test_high_derivative(self)
scipy.interpolate.tests.testTestKrogh.test_int_inputs(self)
scipy.interpolate.tests.testTestKrogh.test_lagrange(self)
scipy.interpolate.tests.testTestKrogh.test_low_derivatives(self)
scipy.interpolate.tests.testTestKrogh.test_scalar(self)
scipy.interpolate.tests.testTestKrogh.test_shapes_1d_vectorvalue(self)
scipy.interpolate.tests.testTestKrogh.test_shapes_scalarvalue(self)
scipy.interpolate.tests.testTestKrogh.test_shapes_scalarvalue_derivative(self)
scipy.interpolate.tests.testTestKrogh.test_shapes_vectorvalue(self)
scipy.interpolate.tests.testTestKrogh.test_shapes_vectorvalue_derivative(self)
scipy.interpolate.tests.testTestKrogh.test_vector(self)
scipy.interpolate.tests.testTestKrogh.test_wrapper(self)
scipy.interpolate.tests.testTestPCHIP
scipy.interpolate.tests.testTestPCHIP._make_random(self,npts=20)
scipy.interpolate.tests.testTestPCHIP.test_all_zeros(self)
scipy.interpolate.tests.testTestPCHIP.test_cast(self)
scipy.interpolate.tests.testTestPCHIP.test_endslopes(self)
scipy.interpolate.tests.testTestPCHIP.test_monotone(self)
scipy.interpolate.tests.testTestPCHIP.test_nag(self)
scipy.interpolate.tests.testTestPCHIP.test_overshoot(self)
scipy.interpolate.tests.testTestPCHIP.test_pchip_interpolate(self)
scipy.interpolate.tests.testTestPCHIP.test_roots(self)
scipy.interpolate.tests.testTestPCHIP.test_two_points(self)
scipy.interpolate.tests.testTestTaylor
scipy.interpolate.tests.testTestTaylor.test_exponential(self)
scipy.interpolate.tests.testTestZeroSizeArrays
scipy.interpolate.tests.testTestZeroSizeArrays.test_zero_size(self,cls,y,bc_type,axis)
scipy.interpolate.tests.testTestZeroSizeArrays.test_zero_size_2(self,cls,y,axis)
scipy.interpolate.tests.test_polyint.TestBarycentric
scipy.interpolate.tests.test_polyint.TestBarycentric.setup_method(self)
scipy.interpolate.tests.test_polyint.TestBarycentric.test_append(self)
scipy.interpolate.tests.test_polyint.TestBarycentric.test_delayed(self)
scipy.interpolate.tests.test_polyint.TestBarycentric.test_int_input(self)
scipy.interpolate.tests.test_polyint.TestBarycentric.test_lagrange(self)
scipy.interpolate.tests.test_polyint.TestBarycentric.test_large_chebyshev(self)
scipy.interpolate.tests.test_polyint.TestBarycentric.test_scalar(self)
scipy.interpolate.tests.test_polyint.TestBarycentric.test_shapes_1d_vectorvalue(self)
scipy.interpolate.tests.test_polyint.TestBarycentric.test_shapes_scalarvalue(self)
scipy.interpolate.tests.test_polyint.TestBarycentric.test_shapes_vectorvalue(self)
scipy.interpolate.tests.test_polyint.TestBarycentric.test_vector(self)
scipy.interpolate.tests.test_polyint.TestBarycentric.test_warning(self)
scipy.interpolate.tests.test_polyint.TestBarycentric.test_wrapper(self)
scipy.interpolate.tests.test_polyint.TestCubicSpline
scipy.interpolate.tests.test_polyint.TestCubicSpline.check_all_bc(self,x,y,axis)
scipy.interpolate.tests.test_polyint.TestCubicSpline.check_correctness(S,bc_start='not-a-knot',bc_end='not-a-knot',tol=1e-14)
scipy.interpolate.tests.test_polyint.TestCubicSpline.test_dtypes(self)
scipy.interpolate.tests.test_polyint.TestCubicSpline.test_general(self)
scipy.interpolate.tests.test_polyint.TestCubicSpline.test_incorrect_inputs(self)
scipy.interpolate.tests.test_polyint.TestCubicSpline.test_periodic(self)
scipy.interpolate.tests.test_polyint.TestCubicSpline.test_periodic_eval(self)
scipy.interpolate.tests.test_polyint.TestCubicSpline.test_second_derivative_continuity_gh_11758(self)
scipy.interpolate.tests.test_polyint.TestCubicSpline.test_small_dx(self)
scipy.interpolate.tests.test_polyint.TestCubicSpline.test_three_points(self)
scipy.interpolate.tests.test_polyint.TestKrogh
scipy.interpolate.tests.test_polyint.TestKrogh.setup_method(self)
scipy.interpolate.tests.test_polyint.TestKrogh.test_derivative(self)
scipy.interpolate.tests.test_polyint.TestKrogh.test_derivatives(self)
scipy.interpolate.tests.test_polyint.TestKrogh.test_derivatives_complex(self)
scipy.interpolate.tests.test_polyint.TestKrogh.test_empty(self)
scipy.interpolate.tests.test_polyint.TestKrogh.test_hermite(self)
scipy.interpolate.tests.test_polyint.TestKrogh.test_high_degree_warning(self)
scipy.interpolate.tests.test_polyint.TestKrogh.test_high_derivative(self)
scipy.interpolate.tests.test_polyint.TestKrogh.test_int_inputs(self)
scipy.interpolate.tests.test_polyint.TestKrogh.test_lagrange(self)
scipy.interpolate.tests.test_polyint.TestKrogh.test_low_derivatives(self)
scipy.interpolate.tests.test_polyint.TestKrogh.test_scalar(self)
scipy.interpolate.tests.test_polyint.TestKrogh.test_shapes_1d_vectorvalue(self)
scipy.interpolate.tests.test_polyint.TestKrogh.test_shapes_scalarvalue(self)
scipy.interpolate.tests.test_polyint.TestKrogh.test_shapes_scalarvalue_derivative(self)
scipy.interpolate.tests.test_polyint.TestKrogh.test_shapes_vectorvalue(self)
scipy.interpolate.tests.test_polyint.TestKrogh.test_shapes_vectorvalue_derivative(self)
scipy.interpolate.tests.test_polyint.TestKrogh.test_vector(self)
scipy.interpolate.tests.test_polyint.TestKrogh.test_wrapper(self)
scipy.interpolate.tests.test_polyint.TestPCHIP
scipy.interpolate.tests.test_polyint.TestPCHIP._make_random(self,npts=20)
scipy.interpolate.tests.test_polyint.TestPCHIP.test_all_zeros(self)
scipy.interpolate.tests.test_polyint.TestPCHIP.test_cast(self)
scipy.interpolate.tests.test_polyint.TestPCHIP.test_endslopes(self)
scipy.interpolate.tests.test_polyint.TestPCHIP.test_monotone(self)
scipy.interpolate.tests.test_polyint.TestPCHIP.test_nag(self)
scipy.interpolate.tests.test_polyint.TestPCHIP.test_overshoot(self)
scipy.interpolate.tests.test_polyint.TestPCHIP.test_pchip_interpolate(self)
scipy.interpolate.tests.test_polyint.TestPCHIP.test_roots(self)
scipy.interpolate.tests.test_polyint.TestPCHIP.test_two_points(self)
scipy.interpolate.tests.test_polyint.TestTaylor
scipy.interpolate.tests.test_polyint.TestTaylor.test_exponential(self)
scipy.interpolate.tests.test_polyint.TestZeroSizeArrays
scipy.interpolate.tests.test_polyint.TestZeroSizeArrays.test_zero_size(self,cls,y,bc_type,axis)
scipy.interpolate.tests.test_polyint.TestZeroSizeArrays.test_zero_size_2(self,cls,y,axis)
scipy.interpolate.tests.test_polyint.check_shape(interpolator_cls,x_shape,y_shape,deriv_shape=None,axis=0,extra_args={})
scipy.interpolate.tests.test_polyint.test_CubicHermiteSpline_correctness()
scipy.interpolate.tests.test_polyint.test_CubicHermiteSpline_error_handling()
scipy.interpolate.tests.test_polyint.test_complex()
scipy.interpolate.tests.test_polyint.test_deriv_shapes()
scipy.interpolate.tests.test_polyint.test_derivs_shapes()
scipy.interpolate.tests.test_polyint.test_roots_extrapolate_gh_11185()
scipy.interpolate.tests.test_polyint.test_shapes()
scipy.interpolate.tests.testcheck_shape(interpolator_cls,x_shape,y_shape,deriv_shape=None,axis=0,extra_args={})
scipy.interpolate.tests.testtest_CubicHermiteSpline_correctness()
scipy.interpolate.tests.testtest_CubicHermiteSpline_error_handling()
scipy.interpolate.tests.testtest_complex()
scipy.interpolate.tests.testtest_deriv_shapes()
scipy.interpolate.tests.testtest_derivs_shapes()
scipy.interpolate.tests.testtest_roots_extrapolate_gh_11185()
scipy.interpolate.tests.testtest_shapes()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/tests/test_rbfinterp.py----------------------------------------
A:scipy.interpolate.tests.test_rbfinterp.powers->_monomial_powers(x.shape[1], degree)
A:scipy.interpolate.tests.test_rbfinterp.seq->Halton(1, scramble=False, seed=np.random.RandomState())
A:scipy.interpolate.tests.test_rbfinterp.A->scipy.interpolate._rbfinterp_pythran._kernel_matrix(x, kernel)
A:scipy.interpolate.tests.test_rbfinterp.P->_vandermonde(x, degree)
A:scipy.interpolate.tests.test_rbfinterp.(Q, R)->numpy.linalg.qr(P, mode='complete')
A:scipy.interpolate.tests.test_rbfinterp.B->Q2.T.dot(A).dot(Q2)
A:scipy.interpolate.tests.test_rbfinterp.y->_1d_test_function(x)
A:scipy.interpolate.tests.test_rbfinterp.yitp1->self.build(x, y)(xitp)
A:scipy.interpolate.tests.test_rbfinterp.yitp2->RBFInterpolator(x, y)(xitp)
A:scipy.interpolate.tests.test_rbfinterp.x->Halton(1, scramble=False, seed=np.random.RandomState()).random(100)
A:scipy.interpolate.tests.test_rbfinterp.xitp->Halton(1, scramble=False, seed=np.random.RandomState()).random(100)
A:scipy.interpolate.tests.test_rbfinterp.rng->numpy.random.RandomState(0)
A:scipy.interpolate.tests.test_rbfinterp.Pitp->_vandermonde(xitp, degree)
A:scipy.interpolate.tests.test_rbfinterp.poly_coeffs->numpy.random.RandomState(0).normal(0.0, 1.0, P.shape[1])
A:scipy.interpolate.tests.test_rbfinterp.interp->self.build(x, y)
A:scipy.interpolate.tests.test_rbfinterp.yitp3->self.build(x, y.imag)(xitp)
A:scipy.interpolate.tests.test_rbfinterp.ytrue->_1d_test_function(x)
A:scipy.interpolate.tests.test_rbfinterp.yitp->self.build(x, y_with_outlier, smoothing=smoothing)(x)
A:scipy.interpolate.tests.test_rbfinterp.mse->numpy.mean((yitp - ytrue) ** 2)
A:scipy.interpolate.tests.test_rbfinterp.ysmooth->self.build(x, y, epsilon=1.0, smoothing=smoothing, kernel=kernel)(x)
A:scipy.interpolate.tests.test_rbfinterp.rmse->numpy.sqrt(np.mean((ysmooth - ytrue) ** 2))
A:scipy.interpolate.tests.test_rbfinterp.y_with_outlier->numpy.copy(y)
A:scipy.interpolate.tests.test_rbfinterp.smoothing->numpy.ones(1)
A:scipy.interpolate.tests.test_rbfinterp.d->numpy.ones((1,))
A:scipy.interpolate.tests.test_rbfinterp.f->self.build(y, d, kernel='linear')(y)
A:scipy.interpolate.tests.test_rbfinterp.tree->cKDTree(x)
A:scipy.interpolate.tests.test_rbfinterp.(_, nbr)->cKDTree(x).query(xi, 20)
scipy.interpolate.tests.testTestRBFInterpolatorNeighbors20(_TestRBFInterpolator)
scipy.interpolate.tests.testTestRBFInterpolatorNeighbors20.build(self,*args,**kwargs)
scipy.interpolate.tests.testTestRBFInterpolatorNeighbors20.test_equivalent_to_rbf_interpolator(self)
scipy.interpolate.tests.testTestRBFInterpolatorNeighborsInf(TestRBFInterpolatorNeighborsNone)
scipy.interpolate.tests.testTestRBFInterpolatorNeighborsInf.build(self,*args,**kwargs)
scipy.interpolate.tests.testTestRBFInterpolatorNeighborsInf.test_equivalent_to_rbf_interpolator(self)
scipy.interpolate.tests.testTestRBFInterpolatorNeighborsNone(_TestRBFInterpolator)
scipy.interpolate.tests.testTestRBFInterpolatorNeighborsNone.build(self,*args,**kwargs)
scipy.interpolate.tests.testTestRBFInterpolatorNeighborsNone.test_smoothing_limit_1d(self)
scipy.interpolate.tests.testTestRBFInterpolatorNeighborsNone.test_smoothing_limit_2d(self)
scipy.interpolate.tests.test_1d_test_function(x)
scipy.interpolate.tests.test_2d_test_function(x)
scipy.interpolate.tests.test_TestRBFInterpolator
scipy.interpolate.tests.test_TestRBFInterpolator.test_array_smoothing(self)
scipy.interpolate.tests.test_TestRBFInterpolator.test_chunking(self,monkeypatch)
scipy.interpolate.tests.test_TestRBFInterpolator.test_complex_data(self)
scipy.interpolate.tests.test_TestRBFInterpolator.test_degree_warning(self)
scipy.interpolate.tests.test_TestRBFInterpolator.test_epsilon_not_specified_error(self)
scipy.interpolate.tests.test_TestRBFInterpolator.test_extreme_domains(self,kernel)
scipy.interpolate.tests.test_TestRBFInterpolator.test_inconsistent_d_length_error(self)
scipy.interpolate.tests.test_TestRBFInterpolator.test_inconsistent_smoothing_length_error(self)
scipy.interpolate.tests.test_TestRBFInterpolator.test_inconsistent_x_dimensions_error(self)
scipy.interpolate.tests.test_TestRBFInterpolator.test_interpolation_misfit_1d(self,kernel)
scipy.interpolate.tests.test_TestRBFInterpolator.test_interpolation_misfit_2d(self,kernel)
scipy.interpolate.tests.test_TestRBFInterpolator.test_invalid_kernel_name_error(self)
scipy.interpolate.tests.test_TestRBFInterpolator.test_not_enough_observations_error(self)
scipy.interpolate.tests.test_TestRBFInterpolator.test_pickleable(self)
scipy.interpolate.tests.test_TestRBFInterpolator.test_polynomial_reproduction(self)
scipy.interpolate.tests.test_TestRBFInterpolator.test_rank_error(self)
scipy.interpolate.tests.test_TestRBFInterpolator.test_scale_invariance_1d(self,kernel)
scipy.interpolate.tests.test_TestRBFInterpolator.test_scale_invariance_2d(self,kernel)
scipy.interpolate.tests.test_TestRBFInterpolator.test_single_point(self)
scipy.interpolate.tests.test_TestRBFInterpolator.test_smoothing_misfit(self,kernel)
scipy.interpolate.tests.test_TestRBFInterpolator.test_vector_data(self)
scipy.interpolate.tests.test_TestRBFInterpolator.test_x_not_2d_error(self)
scipy.interpolate.tests.test_TestRBFInterpolator.test_y_not_2d_error(self)
scipy.interpolate.tests.test_is_conditionally_positive_definite(kernel,m)
scipy.interpolate.tests.test_rbfinterp.TestRBFInterpolatorNeighbors20(_TestRBFInterpolator)
scipy.interpolate.tests.test_rbfinterp.TestRBFInterpolatorNeighbors20.build(self,*args,**kwargs)
scipy.interpolate.tests.test_rbfinterp.TestRBFInterpolatorNeighbors20.test_equivalent_to_rbf_interpolator(self)
scipy.interpolate.tests.test_rbfinterp.TestRBFInterpolatorNeighborsInf(TestRBFInterpolatorNeighborsNone)
scipy.interpolate.tests.test_rbfinterp.TestRBFInterpolatorNeighborsInf.build(self,*args,**kwargs)
scipy.interpolate.tests.test_rbfinterp.TestRBFInterpolatorNeighborsInf.test_equivalent_to_rbf_interpolator(self)
scipy.interpolate.tests.test_rbfinterp.TestRBFInterpolatorNeighborsNone(_TestRBFInterpolator)
scipy.interpolate.tests.test_rbfinterp.TestRBFInterpolatorNeighborsNone.build(self,*args,**kwargs)
scipy.interpolate.tests.test_rbfinterp.TestRBFInterpolatorNeighborsNone.test_smoothing_limit_1d(self)
scipy.interpolate.tests.test_rbfinterp.TestRBFInterpolatorNeighborsNone.test_smoothing_limit_2d(self)
scipy.interpolate.tests.test_rbfinterp._1d_test_function(x)
scipy.interpolate.tests.test_rbfinterp._2d_test_function(x)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_array_smoothing(self)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_chunking(self,monkeypatch)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_complex_data(self)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_degree_warning(self)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_epsilon_not_specified_error(self)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_extreme_domains(self,kernel)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_inconsistent_d_length_error(self)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_inconsistent_smoothing_length_error(self)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_inconsistent_x_dimensions_error(self)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_interpolation_misfit_1d(self,kernel)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_interpolation_misfit_2d(self,kernel)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_invalid_kernel_name_error(self)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_not_enough_observations_error(self)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_pickleable(self)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_polynomial_reproduction(self)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_rank_error(self)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_scale_invariance_1d(self,kernel)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_scale_invariance_2d(self,kernel)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_single_point(self)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_smoothing_misfit(self,kernel)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_vector_data(self)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_x_not_2d_error(self)
scipy.interpolate.tests.test_rbfinterp._TestRBFInterpolator.test_y_not_2d_error(self)
scipy.interpolate.tests.test_rbfinterp._is_conditionally_positive_definite(kernel,m)
scipy.interpolate.tests.test_rbfinterp._vandermonde(x,degree)
scipy.interpolate.tests.test_rbfinterp.test_conditionally_positive_definite(kernel)
scipy.interpolate.tests.test_vandermonde(x,degree)
scipy.interpolate.tests.testtest_conditionally_positive_definite(kernel)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/tests/test_pade.py----------------------------------------
A:scipy.interpolate.tests.test_pade.(nump, denomp)->pade(an, 2, 2)
A:scipy.interpolate.tests.test_pade.(nump_int, denomp_int)->pade(an_int, i, j)
A:scipy.interpolate.tests.test_pade.(nump_flt, denomp_flt)->pade(an_flt, i, j)
scipy.interpolate.tests.test_pade.test_pade_4term_exp()
scipy.interpolate.tests.test_pade.test_pade_complex()
scipy.interpolate.tests.test_pade.test_pade_ints()
scipy.interpolate.tests.test_pade.test_pade_trivial()
scipy.interpolate.tests.testtest_pade_4term_exp()
scipy.interpolate.tests.testtest_pade_complex()
scipy.interpolate.tests.testtest_pade_ints()
scipy.interpolate.tests.testtest_pade_trivial()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/tests/test_fitpack.py----------------------------------------
A:scipy.interpolate.tests.test_fitpack.xy->makepairs(x, y)
A:scipy.interpolate.tests.test_fitpack.x->numpy.linspace(0, 10)
A:scipy.interpolate.tests.test_fitpack.v->numpy.sin(x)
A:scipy.interpolate.tests.test_fitpack.tck->splrep(x, y, k=3, t=[5])
A:scipy.interpolate.tests.test_fitpack.tol->err_est(k, d)
A:scipy.interpolate.tests.test_fitpack.roots->sproot(tck)
A:scipy.interpolate.tests.test_fitpack.(tckp, u)->splprep([x, v], s=0, per=0, k=k, nest=-1)
A:scipy.interpolate.tests.test_fitpack.uv->splev(dx, tckp, d)
A:scipy.interpolate.tests.test_fitpack.err1->abs(uv[1] - np.sin(uv[0]))
A:scipy.interpolate.tests.test_fitpack.err2->abs(splev(uv[0], tck) - np.sin(uv[0]))
A:scipy.interpolate.tests.test_fitpack.y->numpy.cos(2 * np.pi * t)
A:scipy.interpolate.tests.test_fitpack.t2->makepairs(tt[0], tt[1])
A:scipy.interpolate.tests.test_fitpack.v1->bisplev(tt[0], tt[1], tck)
A:scipy.interpolate.tests.test_fitpack.v2->f2(t2[0], t2[1])
A:scipy.interpolate.tests.test_fitpack.z->numpy.random.randn(11, 11).ravel()
A:scipy.interpolate.tests.test_fitpack.t->numpy.arange(0, 1.1, 0.1)
A:scipy.interpolate.tests.test_fitpack.z0->splev(t[0], tck)
A:scipy.interpolate.tests.test_fitpack.z1->splev(t[1], tck)
A:scipy.interpolate.tests.test_fitpack.self.spl->splrep(x, y)
A:scipy.interpolate.tests.test_fitpack.spl2->splantider((t, c2, k), n)
A:scipy.interpolate.tests.test_fitpack.spl3->splder(spl2, n)
A:scipy.interpolate.tests.test_fitpack.xx->numpy.linspace(0, 1, 20)
A:scipy.interpolate.tests.test_fitpack.dy->splev(xx, self.spl, n)
A:scipy.interpolate.tests.test_fitpack.dy2->splev(xx, spl2)
A:scipy.interpolate.tests.test_fitpack.y1->splint(x1, x2, self.spl)
A:scipy.interpolate.tests.test_fitpack.c2->numpy.dstack((c2, c2))
A:scipy.interpolate.tests.test_fitpack.(t, c, k)->splrep(x, y)
A:scipy.interpolate.tests.test_fitpack.res->spalde(np.float64(1), tck)
A:scipy.interpolate.tests.test_fitpack.c0->c.copy()
A:scipy.interpolate.tests.test_fitpack.res0->splint(0, 6, (t, c0, k))
A:scipy.interpolate.tests.test_fitpack.res1->splint(0, 6, (t, c1, k))
A:scipy.interpolate.tests.test_fitpack.(x, y)->numpy.meshgrid(x, y)
A:scipy.interpolate.tests.test_fitpack.(xx, yy)->numpy.meshgrid(x, y)
A:scipy.interpolate.tests.test_fitpack.rect->RectBivariateSpline(x, y, 4 * xx * yy)
A:scipy.interpolate.tests.test_fitpack.tck2->splder((t, c, k), k)
A:scipy.interpolate.tests.test_fitpack.(tck, u)->splprep([x, y], task=-1, t=uknots)
A:scipy.interpolate.tests.test_fitpack.unew->numpy.arange(0, 1.01, 0.01)
A:scipy.interpolate.tests.test_fitpack.(nx, tx, ny, ty, c, fp, ier)->regrid_smth(x, y, z, None, None, None, None, kx=kx, ky=ky, s=0.0)
A:scipy.interpolate.tests.test_fitpack.xp->numpy.zeros([2621440])
A:scipy.interpolate.tests.test_fitpack.yp->numpy.zeros([2621440])
A:scipy.interpolate.tests.test_fitpack.des->numpy.array([1.0, 3.0, 6.0, 6.0])
scipy.interpolate.tests.test_fitpack.TestBisplrep
scipy.interpolate.tests.test_fitpack.TestBisplrep.test_ilp64_bisplrep(self)
scipy.interpolate.tests.test_fitpack.TestBisplrep.test_overflow(self)
scipy.interpolate.tests.test_fitpack.TestBisplrep.test_regression_1310(self)
scipy.interpolate.tests.test_fitpack.TestSmokeTests
scipy.interpolate.tests.test_fitpack.TestSmokeTests.check_1(self,per=0,s=0,a=0,b=2*np.pi,at_nodes=False,xb=None,xe=None)
scipy.interpolate.tests.test_fitpack.TestSmokeTests.check_2(self,per=0,N=20,ia=0,ib=2*np.pi)
scipy.interpolate.tests.test_fitpack.TestSmokeTests.test_smoke_bisplrep_bisplev(self)
scipy.interpolate.tests.test_fitpack.TestSmokeTests.test_smoke_splint_spalde(self,N,per)
scipy.interpolate.tests.test_fitpack.TestSmokeTests.test_smoke_splint_spalde_iaib(self,N,per)
scipy.interpolate.tests.test_fitpack.TestSmokeTests.test_smoke_splprep_splrep_splev(self,N,k)
scipy.interpolate.tests.test_fitpack.TestSmokeTests.test_smoke_splrep_splev(self)
scipy.interpolate.tests.test_fitpack.TestSmokeTests.test_smoke_splrep_splev_2(self,per,at_nodes)
scipy.interpolate.tests.test_fitpack.TestSmokeTests.test_smoke_sproot(self)
scipy.interpolate.tests.test_fitpack.TestSplder
scipy.interpolate.tests.test_fitpack.TestSplder.setup_method(self)
scipy.interpolate.tests.test_fitpack.TestSplder.test_inverse(self)
scipy.interpolate.tests.test_fitpack.TestSplder.test_kink(self)
scipy.interpolate.tests.test_fitpack.TestSplder.test_multidim(self)
scipy.interpolate.tests.test_fitpack.TestSplder.test_order0_diff(self)
scipy.interpolate.tests.test_fitpack.TestSplder.test_splantider_vs_splint(self)
scipy.interpolate.tests.test_fitpack.TestSplder.test_splder_vs_splev(self)
scipy.interpolate.tests.test_fitpack.TestSplev
scipy.interpolate.tests.test_fitpack.TestSplev.test_1d_shape(self)
scipy.interpolate.tests.test_fitpack.TestSplev.test_2d_shape(self)
scipy.interpolate.tests.test_fitpack.TestSplev.test_extrapolation_modes(self)
scipy.interpolate.tests.test_fitpack.TestSplint
scipy.interpolate.tests.test_fitpack.TestSplint.test_len_c(self)
scipy.interpolate.tests.test_fitpack.data_file(basename)
scipy.interpolate.tests.test_fitpack.f1(x,d=0)
scipy.interpolate.tests.test_fitpack.makepairs(x,y)
scipy.interpolate.tests.test_fitpack.norm2(x)
scipy.interpolate.tests.test_fitpack.test_bisplev_integer_overflow()
scipy.interpolate.tests.test_fitpack.test_dblint()
scipy.interpolate.tests.test_fitpack.test_spalde_scalar_input()
scipy.interpolate.tests.test_fitpack.test_splev_der_k()
scipy.interpolate.tests.test_fitpack.test_splprep_segfault()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/tests/test_ndgriddata.py----------------------------------------
A:scipy.interpolate.tests.test_ndgriddata.parametrize_interpolators->pytest.mark.parametrize('interpolator', [NearestNDInterpolator, LinearNDInterpolator, CloughTocher2DInterpolator])
A:scipy.interpolate.tests.test_ndgriddata.yi->griddata(x, y, xi, method=method, rescale=rescale)
A:scipy.interpolate.tests.test_ndgriddata.x->numpy.random.random(10)
A:scipy.interpolate.tests.test_ndgriddata.msg->repr((method, rescale))
A:scipy.interpolate.tests.test_ndgriddata.y->numpy.random.random(10)
A:scipy.interpolate.tests.test_ndgriddata.xi->numpy.array([0.5, 0.5])
A:scipy.interpolate.tests.test_ndgriddata.yi_should->numpy.array([1.0, 1.0])
A:scipy.interpolate.tests.test_ndgriddata.points->numpy.array([(0, 0), (0, 100), (10, 100), (10, 0), (1, 5)], dtype=np.double)
A:scipy.interpolate.tests.test_ndgriddata.points_rescaled->numpy.array([(0, 0), (0, 1), (1, 1), (1, 0), (0.1, 0.05)], dtype=np.double)
A:scipy.interpolate.tests.test_ndgriddata.values->numpy.array([1.0, 2.0, -3.0, 5.0, 9.0], dtype=np.double)
A:scipy.interpolate.tests.test_ndgriddata.(xx, yy)->numpy.broadcast_arrays(np.linspace(0, 10, 14)[:, None], np.linspace(0, 100, 14)[None, :])
A:scipy.interpolate.tests.test_ndgriddata.xx->xx.ravel().ravel()
A:scipy.interpolate.tests.test_ndgriddata.yy->yy.ravel().ravel()
A:scipy.interpolate.tests.test_ndgriddata.zi->griddata(points_rescaled, values, xi / np.array([10, 100.0]), method=method)
A:scipy.interpolate.tests.test_ndgriddata.zi_rescaled->griddata(points, values, xi, method=method, rescale=True)
A:scipy.interpolate.tests.test_ndgriddata.p1->griddata(x, y, xi, method=method)
A:scipy.interpolate.tests.test_ndgriddata.p2->griddata(x, y, xi[None, :], method=method)
A:scipy.interpolate.tests.test_ndgriddata.xi1->numpy.array([0.5])
A:scipy.interpolate.tests.test_ndgriddata.xi3->numpy.array([0.5, 0.5, 0.5])
A:scipy.interpolate.tests.test_ndgriddata.nndi->NearestNDInterpolator(x, y)
A:scipy.interpolate.tests.test_ndgriddata.nndi_o->NearestNDInterpolator(x, y, tree_options=opts)
A:scipy.interpolate.tests.test_ndgriddata.nd->numpy.array([[0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 1, 1, 2]])
A:scipy.interpolate.tests.test_ndgriddata.NI->NearestNDInterpolator((d[0], d[1]), list(d[2]))
A:scipy.interpolate.tests.test_ndgriddata.z->numpy.hypot(x, y)
A:scipy.interpolate.tests.test_ndgriddata.X->numpy.linspace(min(x), max(x))
A:scipy.interpolate.tests.test_ndgriddata.Y->numpy.linspace(min(y), max(y))
A:scipy.interpolate.tests.test_ndgriddata.(X, Y)->numpy.meshgrid(X, Y)
A:scipy.interpolate.tests.test_ndgriddata.interp->interpolator(xy, z)
A:scipy.interpolate.tests.test_ndgriddata.interp_points0->interp(XY)
A:scipy.interpolate.tests.test_ndgriddata.interp_points1->interp((X, Y))
A:scipy.interpolate.tests.test_ndgriddata.interp_points2->interp((X, 0.0))
A:scipy.interpolate.tests.test_ndgriddata.interp_points3->interp(X, Y)
A:scipy.interpolate.tests.test_ndgriddata.interp_points4->interp(X, 0.0)
A:scipy.interpolate.tests.test_ndgriddata.xy->numpy.random.random((10, 2))
A:scipy.interpolate.tests.test_ndgriddata.XY->numpy.random.random((50, 2))
scipy.interpolate.tests.testTestGriddata
scipy.interpolate.tests.testTestGriddata.test_1d(self)
scipy.interpolate.tests.testTestGriddata.test_1d_borders(self)
scipy.interpolate.tests.testTestGriddata.test_1d_unsorted(self)
scipy.interpolate.tests.testTestGriddata.test_alternative_call(self)
scipy.interpolate.tests.testTestGriddata.test_complex_2d(self)
scipy.interpolate.tests.testTestGriddata.test_fill_value(self)
scipy.interpolate.tests.testTestGriddata.test_multipoint_2d(self)
scipy.interpolate.tests.testTestGriddata.test_multivalue_2d(self)
scipy.interpolate.tests.testTestGriddata.test_square_rescale_manual(self)
scipy.interpolate.tests.testTestGriddata.test_xi_1d(self)
scipy.interpolate.tests.testTestNDInterpolators
scipy.interpolate.tests.testTestNDInterpolators.test_broadcastable_input(self,interpolator)
scipy.interpolate.tests.testTestNDInterpolators.test_read_only(self,interpolator)
scipy.interpolate.tests.testTestNearestNDInterpolator
scipy.interpolate.tests.testTestNearestNDInterpolator.test_nearest_list_argument(self)
scipy.interpolate.tests.testTestNearestNDInterpolator.test_nearest_options(self)
scipy.interpolate.tests.test_ndgriddata.TestGriddata
scipy.interpolate.tests.test_ndgriddata.TestGriddata.test_1d(self)
scipy.interpolate.tests.test_ndgriddata.TestGriddata.test_1d_borders(self)
scipy.interpolate.tests.test_ndgriddata.TestGriddata.test_1d_unsorted(self)
scipy.interpolate.tests.test_ndgriddata.TestGriddata.test_alternative_call(self)
scipy.interpolate.tests.test_ndgriddata.TestGriddata.test_complex_2d(self)
scipy.interpolate.tests.test_ndgriddata.TestGriddata.test_fill_value(self)
scipy.interpolate.tests.test_ndgriddata.TestGriddata.test_multipoint_2d(self)
scipy.interpolate.tests.test_ndgriddata.TestGriddata.test_multivalue_2d(self)
scipy.interpolate.tests.test_ndgriddata.TestGriddata.test_square_rescale_manual(self)
scipy.interpolate.tests.test_ndgriddata.TestGriddata.test_xi_1d(self)
scipy.interpolate.tests.test_ndgriddata.TestNDInterpolators
scipy.interpolate.tests.test_ndgriddata.TestNDInterpolators.test_broadcastable_input(self,interpolator)
scipy.interpolate.tests.test_ndgriddata.TestNDInterpolators.test_read_only(self,interpolator)
scipy.interpolate.tests.test_ndgriddata.TestNearestNDInterpolator
scipy.interpolate.tests.test_ndgriddata.TestNearestNDInterpolator.test_nearest_list_argument(self)
scipy.interpolate.tests.test_ndgriddata.TestNearestNDInterpolator.test_nearest_options(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/tests/test_interpolate.py----------------------------------------
A:scipy.interpolate.tests.test_interpolate.z->interp1d(x, y, axis=n, kind=kind)
A:scipy.interpolate.tests.test_interpolate.II->interp2d(x, y, z)
A:scipy.interpolate.tests.test_interpolate.x->numpy.linspace(0, 1, 7 + 1)
A:scipy.interpolate.tests.test_interpolate.y->numpy.sin(30 * x)
A:scipy.interpolate.tests.test_interpolate.ip1->interp2d(x.copy(), y.copy(), z, kind='cubic')
A:scipy.interpolate.tests.test_interpolate.ip2->interp2d(x.copy(), y.copy(), z, kind='cubic')
A:scipy.interpolate.tests.test_interpolate.ip3->interp2d(x, y, z, kind='cubic')
A:scipy.interpolate.tests.test_interpolate.func->interp2d(x, y, z)
A:scipy.interpolate.tests.test_interpolate.xe->numpy.array([3, 4, 5])
A:scipy.interpolate.tests.test_interpolate.ye->numpy.array([5.3, 7.1])
A:scipy.interpolate.tests.test_interpolate.a->numpy.zeros([5, 5])
A:scipy.interpolate.tests.test_interpolate.xy->numpy.arange(5)
A:scipy.interpolate.tests.test_interpolate.b->BPoly(c, x)
A:scipy.interpolate.tests.test_interpolate.ix->numpy.linspace(-1, 3, 31)
A:scipy.interpolate.tests.test_interpolate.iy->numpy.linspace(-1, 3, 33)
A:scipy.interpolate.tests.test_interpolate.iz->b(ix, iy)
A:scipy.interpolate.tests.test_interpolate.self.x5->numpy.arange(5.0)
A:scipy.interpolate.tests.test_interpolate.self.x10->numpy.arange(10.0)
A:scipy.interpolate.tests.test_interpolate.self.y10->numpy.arange(10.0)
A:scipy.interpolate.tests.test_interpolate.self.x25->self.x10.reshape((2, 5))
A:scipy.interpolate.tests.test_interpolate.self.x2->numpy.arange(2.0)
A:scipy.interpolate.tests.test_interpolate.self.y2->numpy.arange(2.0)
A:scipy.interpolate.tests.test_interpolate.self.x1->numpy.array([0.0])
A:scipy.interpolate.tests.test_interpolate.self.y1->numpy.array([0.0])
A:scipy.interpolate.tests.test_interpolate.self.y210->numpy.arange(20.0).reshape((2, 10))
A:scipy.interpolate.tests.test_interpolate.self.y102->numpy.arange(20.0).reshape((10, 2))
A:scipy.interpolate.tests.test_interpolate.self.y225->numpy.arange(20.0).reshape((2, 2, 5))
A:scipy.interpolate.tests.test_interpolate.self.y25->numpy.arange(10.0).reshape((2, 5))
A:scipy.interpolate.tests.test_interpolate.self.y235->numpy.arange(30.0).reshape((2, 3, 5))
A:scipy.interpolate.tests.test_interpolate.self.y325->numpy.arange(30.0).reshape((3, 2, 5))
A:scipy.interpolate.tests.test_interpolate.self.y210_edge_updated->numpy.arange(20.0).reshape((2, 10))
A:scipy.interpolate.tests.test_interpolate.self.y102_edge_updated->numpy.arange(20.0).reshape((10, 2))
A:scipy.interpolate.tests.test_interpolate.interp10->interp1d(self.x10, self.y10, kind=kind)
A:scipy.interpolate.tests.test_interpolate.interp10_unsorted->interp1d(self.x10[::-1], self.y10[::-1])
A:scipy.interpolate.tests.test_interpolate.interp10_assume_kw->interp1d(self.x10[::-1], self.y10[::-1], assume_sorted=False)
A:scipy.interpolate.tests.test_interpolate.interp10_assume_kw2->interp1d(self.x10[::-1], self.y10[::-1], assume_sorted=True)
A:scipy.interpolate.tests.test_interpolate.interp10_y_2d->interp1d(self.x10, self.y210)
A:scipy.interpolate.tests.test_interpolate.interp10_y_2d_unsorted->interp1d(self.x10[::-1], self.y210[:, ::-1])
A:scipy.interpolate.tests.test_interpolate.extrapolator->interp1d(self.x10, self.y10, kind='next', fill_value='extrapolate')
A:scipy.interpolate.tests.test_interpolate.opts->dict(kind='next', fill_value='extrapolate', bounds_error=True)
A:scipy.interpolate.tests.test_interpolate.yp->interp1d(x, y)(x)
A:scipy.interpolate.tests.test_interpolate.xnew->numpy.ravel(xnew)
A:scipy.interpolate.tests.test_interpolate.f->PPoly(c, x)
A:scipy.interpolate.tests.test_interpolate.interpolator1D->interp1d([2, 0, 1], [-1, 0, 1], kind='next', fill_value='extrapolate', assume_sorted=False)
A:scipy.interpolate.tests.test_interpolate.interpolator2D->interp1d(self.x10, self.y210_edge_updated, kind='next', fill_value='extrapolate')
A:scipy.interpolate.tests.test_interpolate.interpolator2DAxis0->interp1d(self.x10, self.y102_edge_updated, kind='next', axis=0, fill_value='extrapolate')
A:scipy.interpolate.tests.test_interpolate.extrap10->interp1d(self.x10, self.y10, fill_value=self.fill_value, bounds_error=False, kind=kind)
A:scipy.interpolate.tests.test_interpolate.raises_bounds_error->interp1d(self.x10, self.y10, bounds_error=True, kind=kind)
A:scipy.interpolate.tests.test_interpolate.c->numpy.random.rand(4, 5, 6, 16, 17, 18)
A:scipy.interpolate.tests.test_interpolate.yi->numpy.random.rand(20)
A:scipy.interpolate.tests.test_interpolate.interp->interp1d(self.x10, self.y10, fill_value=123.0)
A:scipy.interpolate.tests.test_interpolate.fill_value->numpy.array(fill_value)
A:scipy.interpolate.tests.test_interpolate.interp210->interp1d(self.x10, self.y210, kind=kind)
A:scipy.interpolate.tests.test_interpolate.interp102->interp1d(self.x10, self.y102, axis=0, kind=kind)
A:scipy.interpolate.tests.test_interpolate.x_new->numpy.array([[3.0, 5.0], [2.0, 7.0]])
A:scipy.interpolate.tests.test_interpolate.xi->numpy.random.rand(20)
A:scipy.interpolate.tests.test_interpolate.cr->interp1d(x, y.real, kind=kind)
A:scipy.interpolate.tests.test_interpolate.ci->interp1d(x, y.imag, kind=kind)
A:scipy.interpolate.tests.test_interpolate.ii->interp1d(x, x, kind=kind)
A:scipy.interpolate.tests.test_interpolate.ir->interp1d(x, y, kind=kind)
A:scipy.interpolate.tests.test_interpolate.vals->scipy.interpolate.BPoly.from_power_basis(PPoly(c, x), extrapolate='periodic').integrate(1, 4)
A:scipy.interpolate.tests.test_interpolate.yn->numpy.sin(30 * x).copy()
A:scipy.interpolate.tests.test_interpolate.irn->interp1d(x, yn, kind=kind)
A:scipy.interpolate.tests.test_interpolate.p->NdPPoly(c, (x, y, z))
A:scipy.interpolate.tests.test_interpolate.xs->numpy.arange(len(p.coeffs))
A:scipy.interpolate.tests.test_interpolate.ys->p(xs)
A:scipy.interpolate.tests.test_interpolate.pl->lagrange(xs, ys)
A:scipy.interpolate.tests.test_interpolate.ak->Akima1DInterpolator(x, y)
A:scipy.interpolate.tests.test_interpolate.y_->numpy.array([0.0, 2.0, 1.0, 3.0, 2.0, 6.0, 5.5, 5.5, 2.7, 5.1, 3.0])
A:scipy.interpolate.tests.test_interpolate.yi_->numpy.array([0.0, 1.375, 2.0, 1.5, 1.953125, 2.484375, 4.136363636363637, 5.980362391033624, 5.506729151646239, 5.203136745974525, 4.179655415901708, 3.411038659793813, 3.0])
A:scipy.interpolate.tests.test_interpolate.x_eval->numpy.array([0.5, 1.5])
A:scipy.interpolate.tests.test_interpolate.y_eval->ak(x_eval)
A:scipy.interpolate.tests.test_interpolate.pp->scipy.interpolate.BPoly.from_derivatives(xi, yi)
A:scipy.interpolate.tests.test_interpolate.pp2->scipy.interpolate.BPoly.from_derivatives(xi, yi).antiderivative(dx)
A:scipy.interpolate.tests.test_interpolate.pp3->cls(c, x)
A:scipy.interpolate.tests.test_interpolate.x2->numpy.linspace(1, 2, 6)
A:scipy.interpolate.tests.test_interpolate.c2->scipy.interpolate.BPoly._construct_from_derivatives(0, 1, [1], [4, 2, 3])
A:scipy.interpolate.tests.test_interpolate.pp1->scipy.interpolate.PPoly.from_bernstein_basis(bp)
A:scipy.interpolate.tests.test_interpolate.pp_comb->cls(c, x)
A:scipy.interpolate.tests.test_interpolate.xi1->numpy.linspace(0, 1, 300, endpoint=False)
A:scipy.interpolate.tests.test_interpolate.xi2->numpy.linspace(1, 2, 300)
A:scipy.interpolate.tests.test_interpolate.p1->PPoly(c.transpose(2, 5, 0, 1, 3, 4), z)
A:scipy.interpolate.tests.test_interpolate.p2->ip.antiderivative((0, 2, 0)).derivative()
A:scipy.interpolate.tests.test_interpolate.xp->numpy.linspace(0, 1, 11)
A:scipy.interpolate.tests.test_interpolate.res->numpy.empty_like(xnew)
A:scipy.interpolate.tests.test_interpolate.(pp, bp)->self._make_polynomials()
A:scipy.interpolate.tests.test_interpolate.pd->BPoly(cd[:, ::-1], x[::-1], extrapolate=True)
A:scipy.interpolate.tests.test_interpolate.ppa->scipy.interpolate.BPoly.from_derivatives(xi, yi).antiderivative()
A:scipy.interpolate.tests.test_interpolate.spl->splrep(x, y, s=0, k=3)
A:scipy.interpolate.tests.test_interpolate.bp1->BPoly(c1, x)
A:scipy.interpolate.tests.test_interpolate.bp->BPoly(c, x)
A:scipy.interpolate.tests.test_interpolate.n->numpy.arange(power + 1).reshape(-1, 1)
A:scipy.interpolate.tests.test_interpolate.k->numpy.arange(power + 1)
A:scipy.interpolate.tests.test_interpolate.B->binom_matrix(power)
A:scipy.interpolate.tests.test_interpolate.ca->numpy.random.uniform(-0.1, 0.1, size=(power + 1, m))
A:scipy.interpolate.tests.test_interpolate.h->numpy.diff(x)
A:scipy.interpolate.tests.test_interpolate.cdp->numpy.dot(B.T, cap)
A:scipy.interpolate.tests.test_interpolate.pa->BPoly(ca, x, extrapolate=True)
A:scipy.interpolate.tests.test_interpolate.x_test->numpy.random.uniform(-10, 20, 100)
A:scipy.interpolate.tests.test_interpolate.pa_d->BPoly(ca, x, extrapolate=True).derivative()
A:scipy.interpolate.tests.test_interpolate.pd_d->BPoly(cd[:, ::-1], x[::-1], extrapolate=True).derivative()
A:scipy.interpolate.tests.test_interpolate.pa_i->BPoly(ca, x, extrapolate=True).antiderivative()
A:scipy.interpolate.tests.test_interpolate.pd_i->BPoly(cd[:, ::-1], x[::-1], extrapolate=True).antiderivative()
A:scipy.interpolate.tests.test_interpolate.int_a->BPoly(ca, x, extrapolate=True).integrate(a, b)
A:scipy.interpolate.tests.test_interpolate.int_d->BPoly(cd[:, ::-1], x[::-1], extrapolate=True).integrate(a, b)
A:scipy.interpolate.tests.test_interpolate.roots_d->BPoly(cd[:, ::-1], x[::-1], extrapolate=True).roots()
A:scipy.interpolate.tests.test_interpolate.roots_a->BPoly(ca, x, extrapolate=True).roots()
A:scipy.interpolate.tests.test_interpolate.dp->NdPPoly(c, (x, y, z)).derivative(nu=[0, 0, 3])
A:scipy.interpolate.tests.test_interpolate.ip->ip.antiderivative((0, 2, 0)).antiderivative((0, 2, 0))
A:scipy.interpolate.tests.test_interpolate.expected->_ppoly_eval_2(c[:, :, 0], x, xp)
A:scipy.interpolate.tests.test_interpolate.ppp->scipy.interpolate.PPoly.from_spline(b)
A:scipy.interpolate.tests.test_interpolate.dpp->PPoly(dc, x)
A:scipy.interpolate.tests.test_interpolate.ddpp->PPoly(ddc, x)
A:scipy.interpolate.tests.test_interpolate.q->NdPPoly(c, (x, y, z)).antiderivative()
A:scipy.interpolate.tests.test_interpolate.ipp->scipy.interpolate.BPoly.from_derivatives(xi, yi).antiderivative()
A:scipy.interpolate.tests.test_interpolate.iipp->scipy.interpolate.BPoly.from_derivatives(xi, yi).antiderivative(2)
A:scipy.interpolate.tests.test_interpolate.iipp2->scipy.interpolate.BPoly.from_derivatives(xi, yi).antiderivative().antiderivative()
A:scipy.interpolate.tests.test_interpolate.spl2->splantider(spl, dx)
A:scipy.interpolate.tests.test_interpolate.ig->NdPPoly(c, (x, y, z)).integrate(ranges)
A:scipy.interpolate.tests.test_interpolate.P->scipy.interpolate.BPoly.from_power_basis(PPoly(c, x), extrapolate='periodic')
A:scipy.interpolate.tests.test_interpolate.I->scipy.interpolate.BPoly.from_power_basis(PPoly(c, x), extrapolate='periodic').antiderivative()
A:scipy.interpolate.tests.test_interpolate.r->sum((c[k, j] * d ** (c.shape[0] - k - 1) for k in range(c.shape[0])))
A:scipy.interpolate.tests.test_interpolate.c1->scipy.interpolate.BPoly._raise_degree(c, d)
A:scipy.interpolate.tests.test_interpolate.w->numpy.empty(c.shape, dtype=complex)
A:scipy.interpolate.tests.test_interpolate.pp_d->scipy.interpolate.BPoly.from_derivatives(xi, yi).derivative()
A:scipy.interpolate.tests.test_interpolate.pp_i->scipy.interpolate.BPoly.from_derivatives(xi, yi).antiderivative()
A:scipy.interpolate.tests.test_interpolate.cd->ca[::-1].copy()
A:scipy.interpolate.tests.test_interpolate.bp_d->BPoly(c, x).derivative()
A:scipy.interpolate.tests.test_interpolate.bp_der->BPoly(c, x).derivative()
A:scipy.interpolate.tests.test_interpolate.bi->BPoly(c, x).antiderivative()
A:scipy.interpolate.tests.test_interpolate.xx->numpy.ravel(xnew).compress(mask)
A:scipy.interpolate.tests.test_interpolate.b1->BPoly(c, x, extrapolate=False)
A:scipy.interpolate.tests.test_interpolate.c3->scipy.interpolate.BPoly._construct_from_derivatives(0, 1, [1, 2], [4, 3])
A:scipy.interpolate.tests.test_interpolate.ppd->scipy.interpolate.BPoly.from_derivatives(xi, yi).derivative()
A:scipy.interpolate.tests.test_interpolate.(xi, yi)->self._make_random_mk(m, k)
A:scipy.interpolate.tests.test_interpolate.orders->numpy.int64(1)
A:scipy.interpolate.tests.test_interpolate.v1->p((xi, yi, zi, ui))
A:scipy.interpolate.tests.test_interpolate.v2->_ppoly4d_eval(c, (x, y, z, u), xi, yi, zi, ui)
A:scipy.interpolate.tests.test_interpolate.zi->numpy.random.rand(20)
A:scipy.interpolate.tests.test_interpolate.ui->numpy.random.rand(20)
A:scipy.interpolate.tests.test_interpolate.dp1->PPoly(c.transpose(2, 5, 0, 1, 3, 4), z).derivative(3)
A:scipy.interpolate.tests.test_interpolate.cx->numpy.random.rand(4, 5, 6, 16, 17, 18).reshape(c.shape[0], c.shape[1], -1).copy()
A:scipy.interpolate.tests.test_interpolate.(ig2, err2)->nquad(lambda x, y: p((x, y)), ranges, opts=[dict(epsrel=1e-05, epsabs=1e-05)] * 2)
A:scipy.interpolate.tests.test_interpolate.u->numpy.random.rand(200)
A:scipy.interpolate.tests.test_interpolate.v->numpy.random.rand(200)
A:scipy.interpolate.tests.test_interpolate.px->NdPPoly(c, (x, y, z)).integrate_1d(a, b, axis=0)
A:scipy.interpolate.tests.test_interpolate.pax->NdPPoly(c, (x, y, z)).antiderivative((1, 0, 0))
A:scipy.interpolate.tests.test_interpolate.py->NdPPoly(c, (x, y, z)).integrate_1d(a, b, axis=1)
A:scipy.interpolate.tests.test_interpolate.pay->NdPPoly(c, (x, y, z)).antiderivative((0, 1, 0))
A:scipy.interpolate.tests.test_interpolate.pz->NdPPoly(c, (x, y, z)).integrate_1d(a, b, axis=2)
A:scipy.interpolate.tests.test_interpolate.paz->NdPPoly(c, (x, y, z)).antiderivative((0, 0, 1))
A:scipy.interpolate.tests.test_interpolate.out->numpy.empty((len(xnew),), dtype=c.dtype)
A:scipy.interpolate.tests.test_interpolate.saveshape->numpy.shape(xnew)
A:scipy.interpolate.tests.test_interpolate.indxs->indxs.clip(0, len(breaks)).clip(0, len(breaks))
A:scipy.interpolate.tests.test_interpolate.V->numpy.vander(diff, N=K)
A:scipy.interpolate.tests.test_interpolate.values->numpy.array([np.dot(V[k, :], pp[:, indxs[k]]) for k in range(len(xx))])
scipy.interpolate.tests.testTestAkima1DInterpolator
scipy.interpolate.tests.testTestAkima1DInterpolator.test_degenerate_case_multidimensional(self)
scipy.interpolate.tests.testTestAkima1DInterpolator.test_eval(self)
scipy.interpolate.tests.testTestAkima1DInterpolator.test_eval_2d(self)
scipy.interpolate.tests.testTestAkima1DInterpolator.test_eval_3d(self)
scipy.interpolate.tests.testTestAkima1DInterpolator.test_extend(self)
scipy.interpolate.tests.testTestBPoly
scipy.interpolate.tests.testTestBPoly.test_descending(self)
scipy.interpolate.tests.testTestBPoly.test_extrapolate_attr(self)
scipy.interpolate.tests.testTestBPoly.test_interval_length(self)
scipy.interpolate.tests.testTestBPoly.test_multi_shape(self)
scipy.interpolate.tests.testTestBPoly.test_periodic(self)
scipy.interpolate.tests.testTestBPoly.test_simple(self)
scipy.interpolate.tests.testTestBPoly.test_simple2(self)
scipy.interpolate.tests.testTestBPoly.test_simple3(self)
scipy.interpolate.tests.testTestBPoly.test_simple4(self)
scipy.interpolate.tests.testTestBPoly.test_simple5(self)
scipy.interpolate.tests.testTestBPoly.test_two_intervals(self)
scipy.interpolate.tests.testTestBPolyCalculus
scipy.interpolate.tests.testTestBPolyCalculus.test_antider_continuous(self)
scipy.interpolate.tests.testTestBPolyCalculus.test_antider_neg(self)
scipy.interpolate.tests.testTestBPolyCalculus.test_antider_ppoly(self)
scipy.interpolate.tests.testTestBPolyCalculus.test_antiderivative_simple(self)
scipy.interpolate.tests.testTestBPolyCalculus.test_der_antider(self)
scipy.interpolate.tests.testTestBPolyCalculus.test_deriv_inplace(self)
scipy.interpolate.tests.testTestBPolyCalculus.test_derivative(self)
scipy.interpolate.tests.testTestBPolyCalculus.test_derivative_ppoly(self)
scipy.interpolate.tests.testTestBPolyCalculus.test_integrate(self)
scipy.interpolate.tests.testTestBPolyCalculus.test_integrate_extrap(self)
scipy.interpolate.tests.testTestBPolyCalculus.test_integrate_periodic(self)
scipy.interpolate.tests.testTestBPolyFromDerivatives
scipy.interpolate.tests.testTestBPolyFromDerivatives._make_random_mk(self,m,k)
scipy.interpolate.tests.testTestBPolyFromDerivatives.test_coords_order(self)
scipy.interpolate.tests.testTestBPolyFromDerivatives.test_gh_5430(self)
scipy.interpolate.tests.testTestBPolyFromDerivatives.test_make_poly_1(self)
scipy.interpolate.tests.testTestBPolyFromDerivatives.test_make_poly_12(self)
scipy.interpolate.tests.testTestBPolyFromDerivatives.test_make_poly_2(self)
scipy.interpolate.tests.testTestBPolyFromDerivatives.test_make_poly_3(self)
scipy.interpolate.tests.testTestBPolyFromDerivatives.test_order_zero(self)
scipy.interpolate.tests.testTestBPolyFromDerivatives.test_orders_global(self)
scipy.interpolate.tests.testTestBPolyFromDerivatives.test_orders_local(self)
scipy.interpolate.tests.testTestBPolyFromDerivatives.test_orders_too_high(self)
scipy.interpolate.tests.testTestBPolyFromDerivatives.test_raise_degree(self)
scipy.interpolate.tests.testTestBPolyFromDerivatives.test_random_12(self)
scipy.interpolate.tests.testTestBPolyFromDerivatives.test_xi_yi(self)
scipy.interpolate.tests.testTestBPolyFromDerivatives.test_yi_trailing_dims(self)
scipy.interpolate.tests.testTestBPolyFromDerivatives.test_zeros(self)
scipy.interpolate.tests.testTestInterp1D
scipy.interpolate.tests.testTestInterp1D._bounds_check(self,kind='linear')
scipy.interpolate.tests.testTestInterp1D._bounds_check_int_nan_fill(self,kind='linear')
scipy.interpolate.tests.testTestInterp1D._check_complex(self,dtype=np.complex_,kind='linear')
scipy.interpolate.tests.testTestInterp1D._check_fill_value(self,kind)
scipy.interpolate.tests.testTestInterp1D._check_linear(self,kind)
scipy.interpolate.tests.testTestInterp1D._nd_check_interp(self,kind='linear')
scipy.interpolate.tests.testTestInterp1D._nd_check_shape(self,kind='linear')
scipy.interpolate.tests.testTestInterp1D.bounds_check_helper(self,interpolant,test_array,fail_value)
scipy.interpolate.tests.testTestInterp1D.setup_method(self)
scipy.interpolate.tests.testTestInterp1D.test_all_nans(self)
scipy.interpolate.tests.testTestInterp1D.test_assume_sorted(self)
scipy.interpolate.tests.testTestInterp1D.test_bounds(self)
scipy.interpolate.tests.testTestInterp1D.test_circular_refs(self)
scipy.interpolate.tests.testTestInterp1D.test_complex(self)
scipy.interpolate.tests.testTestInterp1D.test_cubic(self)
scipy.interpolate.tests.testTestInterp1D.test_fill_value(self)
scipy.interpolate.tests.testTestInterp1D.test_fill_value_writeable(self)
scipy.interpolate.tests.testTestInterp1D.test_init(self)
scipy.interpolate.tests.testTestInterp1D.test_linear(self)
scipy.interpolate.tests.testTestInterp1D.test_linear_dtypes(self)
scipy.interpolate.tests.testTestInterp1D.test_local_nans(self)
scipy.interpolate.tests.testTestInterp1D.test_nd(self)
scipy.interpolate.tests.testTestInterp1D.test_nearest(self)
scipy.interpolate.tests.testTestInterp1D.test_nearest_up(self)
scipy.interpolate.tests.testTestInterp1D.test_next(self)
scipy.interpolate.tests.testTestInterp1D.test_overflow_nearest(self)
scipy.interpolate.tests.testTestInterp1D.test_previous(self)
scipy.interpolate.tests.testTestInterp1D.test_read_only(self)
scipy.interpolate.tests.testTestInterp1D.test_single_value(self,kind)
scipy.interpolate.tests.testTestInterp1D.test_slinear_dtypes(self)
scipy.interpolate.tests.testTestInterp1D.test_spline_nans(self)
scipy.interpolate.tests.testTestInterp1D.test_validation(self)
scipy.interpolate.tests.testTestInterp1D.test_zero(self)
scipy.interpolate.tests.testTestInterp2D
scipy.interpolate.tests.testTestInterp2D.test_interp2d(self)
scipy.interpolate.tests.testTestInterp2D.test_interp2d_bounds(self)
scipy.interpolate.tests.testTestInterp2D.test_interp2d_eval_unsorted(self)
scipy.interpolate.tests.testTestInterp2D.test_interp2d_linear(self)
scipy.interpolate.tests.testTestInterp2D.test_interp2d_meshgrid_input(self)
scipy.interpolate.tests.testTestInterp2D.test_interp2d_meshgrid_input_unsorted(self)
scipy.interpolate.tests.testTestLagrange
scipy.interpolate.tests.testTestLagrange.test_lagrange(self)
scipy.interpolate.tests.testTestNdPPoly
scipy.interpolate.tests.testTestNdPPoly.test_deriv_1d(self)
scipy.interpolate.tests.testTestNdPPoly.test_deriv_3d(self)
scipy.interpolate.tests.testTestNdPPoly.test_deriv_3d_simple(self)
scipy.interpolate.tests.testTestNdPPoly.test_integrate_1d(self)
scipy.interpolate.tests.testTestNdPPoly.test_integrate_2d(self)
scipy.interpolate.tests.testTestNdPPoly.test_simple_1d(self)
scipy.interpolate.tests.testTestNdPPoly.test_simple_2d(self)
scipy.interpolate.tests.testTestNdPPoly.test_simple_3d(self)
scipy.interpolate.tests.testTestNdPPoly.test_simple_4d(self)
scipy.interpolate.tests.testTestPPoly
scipy.interpolate.tests.testTestPPoly.test_antiderivative_continuity(self)
scipy.interpolate.tests.testTestPPoly.test_antiderivative_of_constant(self)
scipy.interpolate.tests.testTestPPoly.test_antiderivative_regression_4355(self)
scipy.interpolate.tests.testTestPPoly.test_antiderivative_simple(self)
scipy.interpolate.tests.testTestPPoly.test_antiderivative_vs_derivative(self)
scipy.interpolate.tests.testTestPPoly.test_antiderivative_vs_spline(self)
scipy.interpolate.tests.testTestPPoly.test_construct_fast(self)
scipy.interpolate.tests.testTestPPoly.test_derivative(self)
scipy.interpolate.tests.testTestPPoly.test_derivative_eval(self)
scipy.interpolate.tests.testTestPPoly.test_derivative_simple(self)
scipy.interpolate.tests.testTestPPoly.test_descending(self)
scipy.interpolate.tests.testTestPPoly.test_extrapolate_attr(self)
scipy.interpolate.tests.testTestPPoly.test_from_spline(self)
scipy.interpolate.tests.testTestPPoly.test_integrate(self)
scipy.interpolate.tests.testTestPPoly.test_integrate_periodic(self)
scipy.interpolate.tests.testTestPPoly.test_integrate_readonly(self)
scipy.interpolate.tests.testTestPPoly.test_multi_shape(self)
scipy.interpolate.tests.testTestPPoly.test_periodic(self)
scipy.interpolate.tests.testTestPPoly.test_read_only(self)
scipy.interpolate.tests.testTestPPoly.test_roots(self)
scipy.interpolate.tests.testTestPPoly.test_roots_all_zero(self)
scipy.interpolate.tests.testTestPPoly.test_roots_croots(self)
scipy.interpolate.tests.testTestPPoly.test_roots_discont(self)
scipy.interpolate.tests.testTestPPoly.test_roots_idzero(self)
scipy.interpolate.tests.testTestPPoly.test_roots_random(self)
scipy.interpolate.tests.testTestPPoly.test_roots_repeated(self)
scipy.interpolate.tests.testTestPPoly.test_simple(self)
scipy.interpolate.tests.testTestPPoly.test_vs_alternative_implementations(self)
scipy.interpolate.tests.testTestPPolyCommon
scipy.interpolate.tests.testTestPPolyCommon.test_axis(self)
scipy.interpolate.tests.testTestPPolyCommon.test_complex_coef(self)
scipy.interpolate.tests.testTestPPolyCommon.test_ctor_c(self)
scipy.interpolate.tests.testTestPPolyCommon.test_extend(self)
scipy.interpolate.tests.testTestPPolyCommon.test_extend_descending(self)
scipy.interpolate.tests.testTestPPolyCommon.test_extend_diff_orders(self)
scipy.interpolate.tests.testTestPPolyCommon.test_shape(self)
scipy.interpolate.tests.testTestPPolyCommon.test_sort_check(self)
scipy.interpolate.tests.testTestPolyConversions
scipy.interpolate.tests.testTestPolyConversions.test_bp_from_pp(self)
scipy.interpolate.tests.testTestPolyConversions.test_bp_from_pp_random(self)
scipy.interpolate.tests.testTestPolyConversions.test_broken_conversions(self)
scipy.interpolate.tests.testTestPolyConversions.test_pp_from_bp(self)
scipy.interpolate.tests.testTestPolySubclassing
scipy.interpolate.tests.testTestPolySubclassing.B(BPoly)
scipy.interpolate.tests.testTestPolySubclassing.P(PPoly)
scipy.interpolate.tests.testTestPolySubclassing._make_polynomials(self)
scipy.interpolate.tests.testTestPolySubclassing.test_conversions(self)
scipy.interpolate.tests.testTestPolySubclassing.test_derivative(self)
scipy.interpolate.tests.testTestPolySubclassing.test_from_derivatives(self)
scipy.interpolate.tests.testTestPolySubclassing.test_from_spline(self)
scipy.interpolate.tests.test_dpow(x,y,n)
scipy.interpolate.tests.test_interpolate.TestAkima1DInterpolator
scipy.interpolate.tests.test_interpolate.TestAkima1DInterpolator.test_degenerate_case_multidimensional(self)
scipy.interpolate.tests.test_interpolate.TestAkima1DInterpolator.test_eval(self)
scipy.interpolate.tests.test_interpolate.TestAkima1DInterpolator.test_eval_2d(self)
scipy.interpolate.tests.test_interpolate.TestAkima1DInterpolator.test_eval_3d(self)
scipy.interpolate.tests.test_interpolate.TestAkima1DInterpolator.test_extend(self)
scipy.interpolate.tests.test_interpolate.TestBPoly
scipy.interpolate.tests.test_interpolate.TestBPoly.test_descending(self)
scipy.interpolate.tests.test_interpolate.TestBPoly.test_extrapolate_attr(self)
scipy.interpolate.tests.test_interpolate.TestBPoly.test_interval_length(self)
scipy.interpolate.tests.test_interpolate.TestBPoly.test_multi_shape(self)
scipy.interpolate.tests.test_interpolate.TestBPoly.test_periodic(self)
scipy.interpolate.tests.test_interpolate.TestBPoly.test_simple(self)
scipy.interpolate.tests.test_interpolate.TestBPoly.test_simple2(self)
scipy.interpolate.tests.test_interpolate.TestBPoly.test_simple3(self)
scipy.interpolate.tests.test_interpolate.TestBPoly.test_simple4(self)
scipy.interpolate.tests.test_interpolate.TestBPoly.test_simple5(self)
scipy.interpolate.tests.test_interpolate.TestBPoly.test_two_intervals(self)
scipy.interpolate.tests.test_interpolate.TestBPolyCalculus
scipy.interpolate.tests.test_interpolate.TestBPolyCalculus.test_antider_continuous(self)
scipy.interpolate.tests.test_interpolate.TestBPolyCalculus.test_antider_neg(self)
scipy.interpolate.tests.test_interpolate.TestBPolyCalculus.test_antider_ppoly(self)
scipy.interpolate.tests.test_interpolate.TestBPolyCalculus.test_antiderivative_simple(self)
scipy.interpolate.tests.test_interpolate.TestBPolyCalculus.test_der_antider(self)
scipy.interpolate.tests.test_interpolate.TestBPolyCalculus.test_deriv_inplace(self)
scipy.interpolate.tests.test_interpolate.TestBPolyCalculus.test_derivative(self)
scipy.interpolate.tests.test_interpolate.TestBPolyCalculus.test_derivative_ppoly(self)
scipy.interpolate.tests.test_interpolate.TestBPolyCalculus.test_integrate(self)
scipy.interpolate.tests.test_interpolate.TestBPolyCalculus.test_integrate_extrap(self)
scipy.interpolate.tests.test_interpolate.TestBPolyCalculus.test_integrate_periodic(self)
scipy.interpolate.tests.test_interpolate.TestBPolyFromDerivatives
scipy.interpolate.tests.test_interpolate.TestBPolyFromDerivatives._make_random_mk(self,m,k)
scipy.interpolate.tests.test_interpolate.TestBPolyFromDerivatives.test_coords_order(self)
scipy.interpolate.tests.test_interpolate.TestBPolyFromDerivatives.test_gh_5430(self)
scipy.interpolate.tests.test_interpolate.TestBPolyFromDerivatives.test_make_poly_1(self)
scipy.interpolate.tests.test_interpolate.TestBPolyFromDerivatives.test_make_poly_12(self)
scipy.interpolate.tests.test_interpolate.TestBPolyFromDerivatives.test_make_poly_2(self)
scipy.interpolate.tests.test_interpolate.TestBPolyFromDerivatives.test_make_poly_3(self)
scipy.interpolate.tests.test_interpolate.TestBPolyFromDerivatives.test_order_zero(self)
scipy.interpolate.tests.test_interpolate.TestBPolyFromDerivatives.test_orders_global(self)
scipy.interpolate.tests.test_interpolate.TestBPolyFromDerivatives.test_orders_local(self)
scipy.interpolate.tests.test_interpolate.TestBPolyFromDerivatives.test_orders_too_high(self)
scipy.interpolate.tests.test_interpolate.TestBPolyFromDerivatives.test_raise_degree(self)
scipy.interpolate.tests.test_interpolate.TestBPolyFromDerivatives.test_random_12(self)
scipy.interpolate.tests.test_interpolate.TestBPolyFromDerivatives.test_xi_yi(self)
scipy.interpolate.tests.test_interpolate.TestBPolyFromDerivatives.test_yi_trailing_dims(self)
scipy.interpolate.tests.test_interpolate.TestBPolyFromDerivatives.test_zeros(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D
scipy.interpolate.tests.test_interpolate.TestInterp1D._bounds_check(self,kind='linear')
scipy.interpolate.tests.test_interpolate.TestInterp1D._bounds_check_int_nan_fill(self,kind='linear')
scipy.interpolate.tests.test_interpolate.TestInterp1D._check_complex(self,dtype=np.complex_,kind='linear')
scipy.interpolate.tests.test_interpolate.TestInterp1D._check_fill_value(self,kind)
scipy.interpolate.tests.test_interpolate.TestInterp1D._check_linear(self,kind)
scipy.interpolate.tests.test_interpolate.TestInterp1D._nd_check_interp(self,kind='linear')
scipy.interpolate.tests.test_interpolate.TestInterp1D._nd_check_shape(self,kind='linear')
scipy.interpolate.tests.test_interpolate.TestInterp1D.bounds_check_helper(self,interpolant,test_array,fail_value)
scipy.interpolate.tests.test_interpolate.TestInterp1D.setup_method(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_all_nans(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_assume_sorted(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_bounds(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_circular_refs(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_complex(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_cubic(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_fill_value(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_fill_value_writeable(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_init(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_linear(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_linear_dtypes(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_local_nans(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_nd(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_nearest(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_nearest_up(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_next(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_overflow_nearest(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_previous(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_read_only(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_single_value(self,kind)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_slinear_dtypes(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_spline_nans(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_validation(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_zero(self)
scipy.interpolate.tests.test_interpolate.TestInterp2D
scipy.interpolate.tests.test_interpolate.TestInterp2D.test_interp2d(self)
scipy.interpolate.tests.test_interpolate.TestInterp2D.test_interp2d_bounds(self)
scipy.interpolate.tests.test_interpolate.TestInterp2D.test_interp2d_eval_unsorted(self)
scipy.interpolate.tests.test_interpolate.TestInterp2D.test_interp2d_linear(self)
scipy.interpolate.tests.test_interpolate.TestInterp2D.test_interp2d_meshgrid_input(self)
scipy.interpolate.tests.test_interpolate.TestInterp2D.test_interp2d_meshgrid_input_unsorted(self)
scipy.interpolate.tests.test_interpolate.TestLagrange
scipy.interpolate.tests.test_interpolate.TestLagrange.test_lagrange(self)
scipy.interpolate.tests.test_interpolate.TestNdPPoly
scipy.interpolate.tests.test_interpolate.TestNdPPoly.test_deriv_1d(self)
scipy.interpolate.tests.test_interpolate.TestNdPPoly.test_deriv_3d(self)
scipy.interpolate.tests.test_interpolate.TestNdPPoly.test_deriv_3d_simple(self)
scipy.interpolate.tests.test_interpolate.TestNdPPoly.test_integrate_1d(self)
scipy.interpolate.tests.test_interpolate.TestNdPPoly.test_integrate_2d(self)
scipy.interpolate.tests.test_interpolate.TestNdPPoly.test_simple_1d(self)
scipy.interpolate.tests.test_interpolate.TestNdPPoly.test_simple_2d(self)
scipy.interpolate.tests.test_interpolate.TestNdPPoly.test_simple_3d(self)
scipy.interpolate.tests.test_interpolate.TestNdPPoly.test_simple_4d(self)
scipy.interpolate.tests.test_interpolate.TestPPoly
scipy.interpolate.tests.test_interpolate.TestPPoly.test_antiderivative_continuity(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_antiderivative_of_constant(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_antiderivative_regression_4355(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_antiderivative_simple(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_antiderivative_vs_derivative(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_antiderivative_vs_spline(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_construct_fast(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_derivative(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_derivative_eval(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_derivative_simple(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_descending(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_extrapolate_attr(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_from_spline(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_integrate(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_integrate_periodic(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_integrate_readonly(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_multi_shape(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_periodic(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_read_only(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_roots(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_roots_all_zero(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_roots_croots(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_roots_discont(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_roots_idzero(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_roots_random(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_roots_repeated(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_simple(self)
scipy.interpolate.tests.test_interpolate.TestPPoly.test_vs_alternative_implementations(self)
scipy.interpolate.tests.test_interpolate.TestPPolyCommon
scipy.interpolate.tests.test_interpolate.TestPPolyCommon.test_axis(self)
scipy.interpolate.tests.test_interpolate.TestPPolyCommon.test_complex_coef(self)
scipy.interpolate.tests.test_interpolate.TestPPolyCommon.test_ctor_c(self)
scipy.interpolate.tests.test_interpolate.TestPPolyCommon.test_extend(self)
scipy.interpolate.tests.test_interpolate.TestPPolyCommon.test_extend_descending(self)
scipy.interpolate.tests.test_interpolate.TestPPolyCommon.test_extend_diff_orders(self)
scipy.interpolate.tests.test_interpolate.TestPPolyCommon.test_shape(self)
scipy.interpolate.tests.test_interpolate.TestPPolyCommon.test_sort_check(self)
scipy.interpolate.tests.test_interpolate.TestPolyConversions
scipy.interpolate.tests.test_interpolate.TestPolyConversions.test_bp_from_pp(self)
scipy.interpolate.tests.test_interpolate.TestPolyConversions.test_bp_from_pp_random(self)
scipy.interpolate.tests.test_interpolate.TestPolyConversions.test_broken_conversions(self)
scipy.interpolate.tests.test_interpolate.TestPolyConversions.test_pp_from_bp(self)
scipy.interpolate.tests.test_interpolate.TestPolySubclassing
scipy.interpolate.tests.test_interpolate.TestPolySubclassing.B(BPoly)
scipy.interpolate.tests.test_interpolate.TestPolySubclassing.P(PPoly)
scipy.interpolate.tests.test_interpolate.TestPolySubclassing._make_polynomials(self)
scipy.interpolate.tests.test_interpolate.TestPolySubclassing.test_conversions(self)
scipy.interpolate.tests.test_interpolate.TestPolySubclassing.test_derivative(self)
scipy.interpolate.tests.test_interpolate.TestPolySubclassing.test_from_derivatives(self)
scipy.interpolate.tests.test_interpolate.TestPolySubclassing.test_from_spline(self)
scipy.interpolate.tests.test_interpolate._dpow(x,y,n)
scipy.interpolate.tests.test_interpolate._ppoly2d_eval(c,xs,xnew,ynew,nu=None)
scipy.interpolate.tests.test_interpolate._ppoly3d_eval(c,xs,xnew,ynew,znew,nu=None)
scipy.interpolate.tests.test_interpolate._ppoly4d_eval(c,xs,xnew,ynew,znew,unew,nu=None)
scipy.interpolate.tests.test_interpolate._ppoly_eval_1(c,x,xps)
scipy.interpolate.tests.test_interpolate._ppoly_eval_2(coeffs,breaks,xnew,fill=np.nan)
scipy.interpolate.tests.test_ppoly2d_eval(c,xs,xnew,ynew,nu=None)
scipy.interpolate.tests.test_ppoly3d_eval(c,xs,xnew,ynew,znew,nu=None)
scipy.interpolate.tests.test_ppoly4d_eval(c,xs,xnew,ynew,znew,unew,nu=None)
scipy.interpolate.tests.test_ppoly_eval_1(c,x,xps)
scipy.interpolate.tests.test_ppoly_eval_2(coeffs,breaks,xnew,fill=np.nan)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/interpolate/tests/test_rgi.py----------------------------------------
A:scipy.interpolate.tests.test_rgi.parametrize_rgi_interp_methods->pytest.mark.parametrize('method', ['linear', 'nearest', 'slinear', 'cubic', 'quintic', 'pchip'])
A:scipy.interpolate.tests.test_rgi.values->value_func_4d(*np.meshgrid(*points, indexing='ij', sparse=True))
A:scipy.interpolate.tests.test_rgi.(points, values)->self._sample_4d_data()
A:scipy.interpolate.tests.test_rgi.sample->numpy.random.rand(3, 7, 2)
A:scipy.interpolate.tests.test_rgi.interp->RegularGridInterpolator(points, values[..., i, j], method=method, bounds_error=False)
A:scipy.interpolate.tests.test_rgi.v1->interpn((x, y), values, sample, method=method)
A:scipy.interpolate.tests.test_rgi.v2->interpn((x, y), np.asarray(values), sample, method=method)
A:scipy.interpolate.tests.test_rgi.rinterp->RegularGridInterpolator(points, values.real, method=method)
A:scipy.interpolate.tests.test_rgi.iinterp->RegularGridInterpolator(points, values.imag, method=method)
A:scipy.interpolate.tests.test_rgi.(xg, yg)->numpy.meshgrid(x, y, indexing='ij', sparse=True)
A:scipy.interpolate.tests.test_rgi.cubic->RegularGridInterpolator((x, y), values, method='cubic')
A:scipy.interpolate.tests.test_rgi.pchip->RegularGridInterpolator((x, y), values, method='pchip')
A:scipy.interpolate.tests.test_rgi.vals_cubic->cubic([1.5, 2])
A:scipy.interpolate.tests.test_rgi.vals_pchip->pchip([1.5, 2])
A:scipy.interpolate.tests.test_rgi.wanted->interpn(points, values, sample, method='nearest')
A:scipy.interpolate.tests.test_rgi.points_qhull->numpy.asarray(points_qhull)
A:scipy.interpolate.tests.test_rgi.values_qhull->value_func_4d(*np.meshgrid(*points, indexing='ij', sparse=True)).reshape(-1)
A:scipy.interpolate.tests.test_rgi.interp_qhull->LinearNDInterpolator(points_qhull, values_qhull)
A:scipy.interpolate.tests.test_rgi.x->numpy.array([0.5, 2.0, 0.0, 4.0, 5.5])
A:scipy.interpolate.tests.test_rgi.y->numpy.array([0.5, 2.0, 3.0, 4.0, 5.5])
A:scipy.interpolate.tests.test_rgi.data->f(xg, yg)
A:scipy.interpolate.tests.test_rgi.z->numpy.array([[1, 2, 1, 2, 1], [1, 2, 1, 2, 1], [1, 2, 3, 2, 1], [1, 2, 2, 2, 1], [1, 2, 1, 2, 1]])
A:scipy.interpolate.tests.test_rgi.fa->RegularGridInterpolator((x,), z[:], **options)
A:scipy.interpolate.tests.test_rgi.fb->RegularGridInterpolator((x, [0]), z[:, None], **options)
A:scipy.interpolate.tests.test_rgi.x1a->numpy.linspace(-1, 2 * np.pi + 1, 100)
A:scipy.interpolate.tests.test_rgi.za->fa(x1a)
A:scipy.interpolate.tests.test_rgi.y1b->numpy.ones(100)
A:scipy.interpolate.tests.test_rgi.zb->fb(np.vstack([x1a, y1b]).T)
A:scipy.interpolate.tests.test_rgi.f->RegularGridInterpolator((x, y), data, fill_value=1, bounds_error=False, method=method)
A:scipy.interpolate.tests.test_rgi.rng->numpy.random.default_rng(1234)
A:scipy.interpolate.tests.test_rgi.res->interpn(([1], [2, 3, 4]), values, xi, bounds_error=False, fill_value=None)
A:scipy.interpolate.tests.test_rgi.my_interpolating_function->RegularGridInterpolator(points_shuffled, values_shuffled, method=method)
A:scipy.interpolate.tests.test_rgi.pts->numpy.array([[2.1, 6.2, 8.3], [3.3, 5.2, 7.1]])
A:scipy.interpolate.tests.test_rgi.correct_result->interpn(points, values, pts)
A:scipy.interpolate.tests.test_rgi.values_shuffled->value_func_4d(*np.meshgrid(*points_shuffled, indexing='ij', sparse=True))
A:scipy.interpolate.tests.test_rgi.test_result->interpn(points_shuffled, values_shuffled, pts)
A:scipy.interpolate.tests.test_rgi.v->interpn(points, values, sample, method=method, bounds_error=False)
A:scipy.interpolate.tests.test_rgi.vs->numpy.empty(values.shape[-2:])
A:scipy.interpolate.tests.test_rgi.vs[i, j]->interp(sample)
A:scipy.interpolate.tests.test_rgi.self._v->numpy.arange(np.prod(shape)).reshape(shape)
A:scipy.interpolate.tests.test_rgi.(x, y, z)->self._sample_2d_data()
A:scipy.interpolate.tests.test_rgi.lut->RectBivariateSpline(x, y, z)
A:scipy.interpolate.tests.test_rgi.actual->interpn(points, values, sample, method='nearest', bounds_error=False, fill_value=999.99)
A:scipy.interpolate.tests.test_rgi.expected->RectBivariateSpline(x, y, z).ev(xi[:, 0], xi[:, 1])
A:scipy.interpolate.tests.test_rgi.interp_rg->RegularGridInterpolator(points, values, method='nearest')
A:scipy.interpolate.tests.test_rgi.(x, y, values)->self._sample_2d_data()
A:scipy.interpolate.tests.test_rgi.xi->numpy.ones((1, 1, 3))
A:scipy.interpolate.tests.test_rgi.yi->numpy.linspace(0, 3, 3)
A:scipy.interpolate.tests.test_rgi.(xx, yy)->numpy.meshgrid(xi, yi)
A:scipy.interpolate.tests.test_rgi.v2r->interpn(points, values.real, sample, method=method)
A:scipy.interpolate.tests.test_rgi.v2i->interpn(points, values.imag, sample, method=method)
A:scipy.interpolate.tests.test_rgi.x1->numpy.array([0, 1, 2, 3])
A:scipy.interpolate.tests.test_rgi.x2->numpy.array([0, 10, 20, 30])
A:scipy.interpolate.tests.test_rgi.x3->numpy.array([0, 10, 20, 30])
A:scipy.interpolate.tests.test_rgi.x4->numpy.array([0, 0.1, 0.2, 0.3])
scipy.interpolate.tests.testMyValue(self,shape)
scipy.interpolate.tests.testMyValue.__array__(self)
scipy.interpolate.tests.testMyValue.__array_interface__(self)
scipy.interpolate.tests.testMyValue.__getitem__(self,idx)
scipy.interpolate.tests.testTestInterpN
scipy.interpolate.tests.testTestInterpN._sample_2d_data(self)
scipy.interpolate.tests.testTestInterpN._sample_4d_data(self)
scipy.interpolate.tests.testTestInterpN.test_4d_linear_outofbounds(self)
scipy.interpolate.tests.testTestInterpN.test_4d_nearest_outofbounds(self)
scipy.interpolate.tests.testTestInterpN.test_complex(self,method)
scipy.interpolate.tests.testTestInterpN.test_complex_spline2fd(self)
scipy.interpolate.tests.testTestInterpN.test_descending_points(self)
scipy.interpolate.tests.testTestInterpN.test_duck_typed_values(self,method)
scipy.interpolate.tests.testTestInterpN.test_invalid_points_order(self)
scipy.interpolate.tests.testTestInterpN.test_invalid_xi_dimensions(self)
scipy.interpolate.tests.testTestInterpN.test_length_one_axis(self)
scipy.interpolate.tests.testTestInterpN.test_linear_4d(self)
scipy.interpolate.tests.testTestInterpN.test_list_input(self,method)
scipy.interpolate.tests.testTestInterpN.test_matrix_input(self,method)
scipy.interpolate.tests.testTestInterpN.test_nearest_4d(self)
scipy.interpolate.tests.testTestInterpN.test_non_scalar_values_splinef2d(self)
scipy.interpolate.tests.testTestInterpN.test_nonscalar_values(self,method)
scipy.interpolate.tests.testTestInterpN.test_nonscalar_values_2(self,method)
scipy.interpolate.tests.testTestInterpN.test_spline_2d(self)
scipy.interpolate.tests.testTestInterpN.test_spline_2d_outofbounds(self)
scipy.interpolate.tests.testTestInterpN.test_xi_1d(self)
scipy.interpolate.tests.testTestInterpN.test_xi_broadcast(self,method)
scipy.interpolate.tests.testTestInterpN.test_xi_nd(self)
scipy.interpolate.tests.testTestRegularGridInterpolator
scipy.interpolate.tests.testTestRegularGridInterpolator._get_sample_4d(self)
scipy.interpolate.tests.testTestRegularGridInterpolator._get_sample_4d_2(self)
scipy.interpolate.tests.testTestRegularGridInterpolator._get_sample_4d_3(self)
scipy.interpolate.tests.testTestRegularGridInterpolator._get_sample_4d_4(self)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_complex(self,method)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_cubic_vs_pchip(self)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_descending_points(self,method)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_duck_typed_values(self,method)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_fill_value(self,method)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_fillvalue_type(self)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_invalid_fill_value(self)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_invalid_points_order(self)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_length_one_axis(self)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_length_one_axis2(self,fill_value,method)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_linear_and_slinear_close(self,points_values,sample)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_linear_compare_qhull(self)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_linear_edges(self)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_linear_xi1d(self)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_linear_xi3d(self)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_list_input(self,method)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_nan_x_1d(self,method)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_nan_x_2d(self,method)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_nearest(self,sample,wanted)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_nearest_compare_qhull(self)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_nonscalar_values(self,method)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_nonscalar_values_2(self,method,flip_points)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_nonscalar_values_linear_2D(self)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_out_of_bounds_extrap(self)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_out_of_bounds_extrap2(self)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_out_of_bounds_fill(self)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_spline_dim_error(self,method)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_valid_call(self)
scipy.interpolate.tests.testTestRegularGridInterpolator.test_valid_create(self)
scipy.interpolate.tests.test_rgi.MyValue(self,shape)
scipy.interpolate.tests.test_rgi.MyValue.__array__(self)
scipy.interpolate.tests.test_rgi.MyValue.__array_interface__(self)
scipy.interpolate.tests.test_rgi.MyValue.__getitem__(self,idx)
scipy.interpolate.tests.test_rgi.MyValue.__init__(self,shape)
scipy.interpolate.tests.test_rgi.TestInterpN
scipy.interpolate.tests.test_rgi.TestInterpN._sample_2d_data(self)
scipy.interpolate.tests.test_rgi.TestInterpN._sample_4d_data(self)
scipy.interpolate.tests.test_rgi.TestInterpN.test_4d_linear_outofbounds(self)
scipy.interpolate.tests.test_rgi.TestInterpN.test_4d_nearest_outofbounds(self)
scipy.interpolate.tests.test_rgi.TestInterpN.test_complex(self,method)
scipy.interpolate.tests.test_rgi.TestInterpN.test_complex_spline2fd(self)
scipy.interpolate.tests.test_rgi.TestInterpN.test_descending_points(self)
scipy.interpolate.tests.test_rgi.TestInterpN.test_duck_typed_values(self,method)
scipy.interpolate.tests.test_rgi.TestInterpN.test_invalid_points_order(self)
scipy.interpolate.tests.test_rgi.TestInterpN.test_invalid_xi_dimensions(self)
scipy.interpolate.tests.test_rgi.TestInterpN.test_length_one_axis(self)
scipy.interpolate.tests.test_rgi.TestInterpN.test_linear_4d(self)
scipy.interpolate.tests.test_rgi.TestInterpN.test_list_input(self,method)
scipy.interpolate.tests.test_rgi.TestInterpN.test_matrix_input(self,method)
scipy.interpolate.tests.test_rgi.TestInterpN.test_nearest_4d(self)
scipy.interpolate.tests.test_rgi.TestInterpN.test_non_scalar_values_splinef2d(self)
scipy.interpolate.tests.test_rgi.TestInterpN.test_nonscalar_values(self,method)
scipy.interpolate.tests.test_rgi.TestInterpN.test_nonscalar_values_2(self,method)
scipy.interpolate.tests.test_rgi.TestInterpN.test_spline_2d(self)
scipy.interpolate.tests.test_rgi.TestInterpN.test_spline_2d_outofbounds(self)
scipy.interpolate.tests.test_rgi.TestInterpN.test_xi_1d(self)
scipy.interpolate.tests.test_rgi.TestInterpN.test_xi_broadcast(self,method)
scipy.interpolate.tests.test_rgi.TestInterpN.test_xi_nd(self)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator._get_sample_4d(self)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator._get_sample_4d_2(self)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator._get_sample_4d_3(self)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator._get_sample_4d_4(self)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_complex(self,method)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_cubic_vs_pchip(self)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_descending_points(self,method)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_duck_typed_values(self,method)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_fill_value(self,method)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_fillvalue_type(self)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_invalid_fill_value(self)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_invalid_points_order(self)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_length_one_axis(self)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_length_one_axis2(self,fill_value,method)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_linear_and_slinear_close(self,points_values,sample)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_linear_compare_qhull(self)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_linear_edges(self)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_linear_xi1d(self)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_linear_xi3d(self)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_list_input(self,method)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_nan_x_1d(self,method)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_nan_x_2d(self,method)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_nearest(self,sample,wanted)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_nearest_compare_qhull(self)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_nonscalar_values(self,method)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_nonscalar_values_2(self,method,flip_points)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_nonscalar_values_linear_2D(self)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_out_of_bounds_extrap(self)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_out_of_bounds_extrap2(self)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_out_of_bounds_fill(self)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_spline_dim_error(self,method)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_valid_call(self)
scipy.interpolate.tests.test_rgi.TestRegularGridInterpolator.test_valid_create(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fftpack/_basic.py----------------------------------------
A:scipy.fftpack._basic.shape->_good_shape(x, shape, axes)
scipy.fftpack._basic.fft(x,n=None,axis=-1,overwrite_x=False)
scipy.fftpack._basic.fft2(x,shape=None,axes=(-2,-1),overwrite_x=False)
scipy.fftpack._basic.fftn(x,shape=None,axes=None,overwrite_x=False)
scipy.fftpack._basic.ifft(x,n=None,axis=-1,overwrite_x=False)
scipy.fftpack._basic.ifft2(x,shape=None,axes=(-2,-1),overwrite_x=False)
scipy.fftpack._basic.ifftn(x,shape=None,axes=None,overwrite_x=False)
scipy.fftpack._basic.irfft(x,n=None,axis=-1,overwrite_x=False)
scipy.fftpack._basic.rfft(x,n=None,axis=-1,overwrite_x=False)
scipy.fftpack.fft(x,n=None,axis=-1,overwrite_x=False)
scipy.fftpack.fft2(x,shape=None,axes=(-2,-1),overwrite_x=False)
scipy.fftpack.fftn(x,shape=None,axes=None,overwrite_x=False)
scipy.fftpack.ifft(x,n=None,axis=-1,overwrite_x=False)
scipy.fftpack.ifft2(x,shape=None,axes=(-2,-1),overwrite_x=False)
scipy.fftpack.ifftn(x,shape=None,axes=None,overwrite_x=False)
scipy.fftpack.irfft(x,n=None,axis=-1,overwrite_x=False)
scipy.fftpack.rfft(x,n=None,axis=-1,overwrite_x=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fftpack/realtransforms.py----------------------------------------
scipy.fftpack.realtransforms.__dir__()
scipy.fftpack.realtransforms.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fftpack/pseudo_diffs.py----------------------------------------
scipy.fftpack.pseudo_diffs.__dir__()
scipy.fftpack.pseudo_diffs.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fftpack/_pseudo_diffs.py----------------------------------------
A:scipy.fftpack._pseudo_diffs.tmp->asarray(x)
A:scipy.fftpack._pseudo_diffs.n->len(x)
A:scipy.fftpack._pseudo_diffs.omega->_cache.get((n, a))
A:scipy.fftpack._pseudo_diffs.overwrite_x->_datacopied(tmp, x)
A:scipy.fftpack._pseudo_diffs.omega_real->convolve.init_convolution_kernel(n, kernel_real, d=0, zero_nyquist=0)
A:scipy.fftpack._pseudo_diffs.omega_imag->convolve.init_convolution_kernel(n, kernel_imag, d=1, zero_nyquist=0)
scipy.fftpack._pseudo_diffs.cc_diff(x,a,b,period=None,_cache=_cache)
scipy.fftpack._pseudo_diffs.cs_diff(x,a,b,period=None,_cache=_cache)
scipy.fftpack._pseudo_diffs.diff(x,order=1,period=None,_cache=_cache)
scipy.fftpack._pseudo_diffs.hilbert(x,_cache=_cache)
scipy.fftpack._pseudo_diffs.ihilbert(x)
scipy.fftpack._pseudo_diffs.itilbert(x,h,period=None,_cache=_cache)
scipy.fftpack._pseudo_diffs.sc_diff(x,a,b,period=None,_cache=_cache)
scipy.fftpack._pseudo_diffs.shift(x,a,period=None,_cache=_cache)
scipy.fftpack._pseudo_diffs.ss_diff(x,a,b,period=None,_cache=_cache)
scipy.fftpack._pseudo_diffs.tilbert(x,h,period=None,_cache=_cache)
scipy.fftpack.cc_diff(x,a,b,period=None,_cache=_cache)
scipy.fftpack.cs_diff(x,a,b,period=None,_cache=_cache)
scipy.fftpack.diff(x,order=1,period=None,_cache=_cache)
scipy.fftpack.hilbert(x,_cache=_cache)
scipy.fftpack.ihilbert(x)
scipy.fftpack.itilbert(x,h,period=None,_cache=_cache)
scipy.fftpack.sc_diff(x,a,b,period=None,_cache=_cache)
scipy.fftpack.shift(x,a,period=None,_cache=_cache)
scipy.fftpack.ss_diff(x,a,b,period=None,_cache=_cache)
scipy.fftpack.tilbert(x,h,period=None,_cache=_cache)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fftpack/basic.py----------------------------------------
scipy.fftpack.basic.__dir__()
scipy.fftpack.basic.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fftpack/_helper.py----------------------------------------
A:scipy.fftpack._helper.n->operator.index(n)
A:scipy.fftpack._helper.shape->scipy.fft._pocketfft.helper._iterable_of_int(shape, 'shape')
scipy.fftpack._good_shape(x,shape,axes)
scipy.fftpack._helper._good_shape(x,shape,axes)
scipy.fftpack._helper.next_fast_len(target)
scipy.fftpack._helper.rfftfreq(n,d=1.0)
scipy.fftpack.next_fast_len(target)
scipy.fftpack.rfftfreq(n,d=1.0)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fftpack/helper.py----------------------------------------
scipy.fftpack.helper.__dir__()
scipy.fftpack.helper.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fftpack/__init__.py----------------------------------------
A:scipy.fftpack.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fftpack/_realtransforms.py----------------------------------------
A:scipy.fftpack._realtransforms.shape->_good_shape(x, shape, axes)
scipy.fftpack._realtransforms.dct(x,type=2,n=None,axis=-1,norm=None,overwrite_x=False)
scipy.fftpack._realtransforms.dctn(x,type=2,shape=None,axes=None,norm=None,overwrite_x=False)
scipy.fftpack._realtransforms.dst(x,type=2,n=None,axis=-1,norm=None,overwrite_x=False)
scipy.fftpack._realtransforms.dstn(x,type=2,shape=None,axes=None,norm=None,overwrite_x=False)
scipy.fftpack._realtransforms.idct(x,type=2,n=None,axis=-1,norm=None,overwrite_x=False)
scipy.fftpack._realtransforms.idctn(x,type=2,shape=None,axes=None,norm=None,overwrite_x=False)
scipy.fftpack._realtransforms.idst(x,type=2,n=None,axis=-1,norm=None,overwrite_x=False)
scipy.fftpack._realtransforms.idstn(x,type=2,shape=None,axes=None,norm=None,overwrite_x=False)
scipy.fftpack.dct(x,type=2,n=None,axis=-1,norm=None,overwrite_x=False)
scipy.fftpack.dctn(x,type=2,shape=None,axes=None,norm=None,overwrite_x=False)
scipy.fftpack.dst(x,type=2,n=None,axis=-1,norm=None,overwrite_x=False)
scipy.fftpack.dstn(x,type=2,shape=None,axes=None,norm=None,overwrite_x=False)
scipy.fftpack.idct(x,type=2,n=None,axis=-1,norm=None,overwrite_x=False)
scipy.fftpack.idctn(x,type=2,shape=None,axes=None,norm=None,overwrite_x=False)
scipy.fftpack.idst(x,type=2,n=None,axis=-1,norm=None,overwrite_x=False)
scipy.fftpack.idstn(x,type=2,shape=None,axes=None,norm=None,overwrite_x=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fftpack/tests/test_basic.py----------------------------------------
A:scipy.fftpack.tests.test_basic.data->data.astype(dtype).astype(dtype)
A:scipy.fftpack.tests.test_basic.x->random((5, 4, 3, 20))
A:scipy.fftpack.tests.test_basic.n->len(x)
A:scipy.fftpack.tests.test_basic.y->ifftn(x)
A:scipy.fftpack.tests.test_basic.y[i]->dot(exp(i * w), x)
A:scipy.fftpack.tests.test_basic.r->zeros(n, dtype=double)
A:scipy.fftpack.tests.test_basic.x1->numpy.array([1, 2, 3, 4], dtype=np.float16)
A:scipy.fftpack.tests.test_basic.y1->fftn(x.real.astype(np.float16))
A:scipy.fftpack.tests.test_basic.x2->random((5, 4, 3, 20)).copy()
A:scipy.fftpack.tests.test_basic.y2->fftn(x.real.astype(np.float64)).astype(np.complex64)
A:scipy.fftpack.tests.test_basic.self.data->numpy.asarray(data)
A:scipy.fftpack.tests.test_basic.xs->_TestRFFTBase.MockSeries(x)
A:scipy.fftpack.tests.test_basic.y_r->numpy.array(fftn(x), np.complex64)
A:scipy.fftpack.tests.test_basic.large_x1->array([[1, 2, 3, 0], [4, 5, 6, 0], [7, 8, 9, 0], [0, 0, 0, 0]])
A:scipy.fftpack.tests.test_basic.part_shape->tuple(np.take(shape, axes))
A:scipy.fftpack.tests.test_basic.a->numpy.random.rand(10, 10)
A:scipy.fftpack.tests.test_basic.expect->func(a, shape=(4, 7), axes=(1, 0))
A:scipy.fftpack.tests.test_basic.actual->func(a, shape=np.array([4, 7]), axes=np.array([1, 0]))
scipy.fftpack.tests.testFakeArray(self,data)
scipy.fftpack.tests.testFakeArray2(self,data)
scipy.fftpack.tests.testFakeArray2.__array__(self)
scipy.fftpack.tests.testTestDoubleFFT(_TestFFTBase)
scipy.fftpack.tests.testTestDoubleFFT.setup_method(self)
scipy.fftpack.tests.testTestDoubleIFFT(_TestIFFTBase)
scipy.fftpack.tests.testTestDoubleIFFT.setup_method(self)
scipy.fftpack.tests.testTestFftn
scipy.fftpack.tests.testTestFftn.setup_method(self)
scipy.fftpack.tests.testTestFftn.test_axes_argument(self)
scipy.fftpack.tests.testTestFftn.test_definition(self)
scipy.fftpack.tests.testTestFftn.test_invalid_sizes(self)
scipy.fftpack.tests.testTestFftn.test_shape_argument(self)
scipy.fftpack.tests.testTestFftn.test_shape_argument_more(self)
scipy.fftpack.tests.testTestFftn.test_shape_axes_argument(self)
scipy.fftpack.tests.testTestFftn.test_shape_axes_argument2(self)
scipy.fftpack.tests.testTestFftnSingle
scipy.fftpack.tests.testTestFftnSingle.setup_method(self)
scipy.fftpack.tests.testTestFftnSingle.test_definition(self)
scipy.fftpack.tests.testTestFftnSingle.test_definition_float16(self)
scipy.fftpack.tests.testTestFftnSingle.test_float16_input_large(self,size)
scipy.fftpack.tests.testTestFftnSingle.test_float16_input_small(self,size)
scipy.fftpack.tests.testTestFftnSingle.test_size_accuracy_large(self,size)
scipy.fftpack.tests.testTestFftnSingle.test_size_accuracy_small(self,size)
scipy.fftpack.tests.testTestFloat16FFT
scipy.fftpack.tests.testTestFloat16FFT.test_1_argument_real(self)
scipy.fftpack.tests.testTestFloat16FFT.test_n_argument_real(self)
scipy.fftpack.tests.testTestIRFFTDouble(_TestIRFFTBase)
scipy.fftpack.tests.testTestIRFFTDouble.setup_method(self)
scipy.fftpack.tests.testTestIRFFTSingle(_TestIRFFTBase)
scipy.fftpack.tests.testTestIRFFTSingle.setup_method(self)
scipy.fftpack.tests.testTestIfftn
scipy.fftpack.tests.testTestIfftn.setup_method(self)
scipy.fftpack.tests.testTestIfftn.test_definition(self,dtype,cdtype,maxnlp)
scipy.fftpack.tests.testTestIfftn.test_invalid_sizes(self)
scipy.fftpack.tests.testTestIfftn.test_random_complex(self,maxnlp,size)
scipy.fftpack.tests.testTestOverwrite
scipy.fftpack.tests.testTestOverwrite._check(self,x,routine,fftsize,axis,overwrite_x)
scipy.fftpack.tests.testTestOverwrite._check_1d(self,routine,dtype,shape,axis,overwritable_dtypes,fftsize,overwrite_x)
scipy.fftpack.tests.testTestOverwrite._check_nd_one(self,routine,dtype,shape,axes,overwritable_dtypes,overwrite_x)
scipy.fftpack.tests.testTestOverwrite.test_fft_ifft(self,dtype,fftsize,overwrite_x,shape,axes)
scipy.fftpack.tests.testTestOverwrite.test_fftn_ifftn(self,dtype,overwrite_x,shape,axes)
scipy.fftpack.tests.testTestOverwrite.test_rfft_irfft(self,dtype,fftsize,overwrite_x,shape,axes)
scipy.fftpack.tests.testTestRFFTDouble(_TestRFFTBase)
scipy.fftpack.tests.testTestRFFTDouble.setup_method(self)
scipy.fftpack.tests.testTestRFFTSingle(_TestRFFTBase)
scipy.fftpack.tests.testTestRFFTSingle.setup_method(self)
scipy.fftpack.tests.testTestSingleFFT(_TestFFTBase)
scipy.fftpack.tests.testTestSingleFFT.setup_method(self)
scipy.fftpack.tests.testTestSingleFFT.test_notice(self)
scipy.fftpack.tests.testTestSingleIFFT(_TestIFFTBase)
scipy.fftpack.tests.testTestSingleIFFT.setup_method(self)
scipy.fftpack.tests.testTestfft2
scipy.fftpack.tests.testTestfft2.setup_method(self)
scipy.fftpack.tests.testTestfft2.test_invalid_sizes(self)
scipy.fftpack.tests.testTestfft2.test_regression_244(self)
scipy.fftpack.tests.test_TestFFTBase
scipy.fftpack.tests.test_TestFFTBase._test_n_argument_complex(self)
scipy.fftpack.tests.test_TestFFTBase.setup_method(self)
scipy.fftpack.tests.test_TestFFTBase.test_definition(self)
scipy.fftpack.tests.test_TestFFTBase.test_invalid_sizes(self)
scipy.fftpack.tests.test_TestFFTBase.test_n_argument_real(self)
scipy.fftpack.tests.test_TestIFFTBase
scipy.fftpack.tests.test_TestIFFTBase.setup_method(self)
scipy.fftpack.tests.test_TestIFFTBase.test_definition(self)
scipy.fftpack.tests.test_TestIFFTBase.test_definition_real(self)
scipy.fftpack.tests.test_TestIFFTBase.test_invalid_sizes(self)
scipy.fftpack.tests.test_TestIFFTBase.test_random_complex(self)
scipy.fftpack.tests.test_TestIFFTBase.test_random_real(self)
scipy.fftpack.tests.test_TestIFFTBase.test_size_accuracy(self)
scipy.fftpack.tests.test_TestIRFFTBase
scipy.fftpack.tests.test_TestIRFFTBase.setup_method(self)
scipy.fftpack.tests.test_TestIRFFTBase.test_complex_input(self)
scipy.fftpack.tests.test_TestIRFFTBase.test_definition(self)
scipy.fftpack.tests.test_TestIRFFTBase.test_invalid_sizes(self)
scipy.fftpack.tests.test_TestIRFFTBase.test_random_real(self)
scipy.fftpack.tests.test_TestIRFFTBase.test_size_accuracy(self)
scipy.fftpack.tests.test_TestRFFTBase
scipy.fftpack.tests.test_TestRFFTBase.MockSeries(self,data)
scipy.fftpack.tests.test_TestRFFTBase.MockSeries.__getattr__(self,item)
scipy.fftpack.tests.test_TestRFFTBase.setup_method(self)
scipy.fftpack.tests.test_TestRFFTBase.test_complex_input(self)
scipy.fftpack.tests.test_TestRFFTBase.test_definition(self)
scipy.fftpack.tests.test_TestRFFTBase.test_invalid_sizes(self)
scipy.fftpack.tests.test_TestRFFTBase.test_non_ndarray_with_dtype(self)
scipy.fftpack.tests.test_assert_close_in_norm(x,y,rtol,size,rdt)
scipy.fftpack.tests.test_basic.FakeArray(self,data)
scipy.fftpack.tests.test_basic.FakeArray.__init__(self,data)
scipy.fftpack.tests.test_basic.FakeArray2(self,data)
scipy.fftpack.tests.test_basic.FakeArray2.__array__(self)
scipy.fftpack.tests.test_basic.FakeArray2.__init__(self,data)
scipy.fftpack.tests.test_basic.TestDoubleFFT(_TestFFTBase)
scipy.fftpack.tests.test_basic.TestDoubleFFT.setup_method(self)
scipy.fftpack.tests.test_basic.TestDoubleIFFT(_TestIFFTBase)
scipy.fftpack.tests.test_basic.TestDoubleIFFT.setup_method(self)
scipy.fftpack.tests.test_basic.TestFftn
scipy.fftpack.tests.test_basic.TestFftn.setup_method(self)
scipy.fftpack.tests.test_basic.TestFftn.test_axes_argument(self)
scipy.fftpack.tests.test_basic.TestFftn.test_definition(self)
scipy.fftpack.tests.test_basic.TestFftn.test_invalid_sizes(self)
scipy.fftpack.tests.test_basic.TestFftn.test_shape_argument(self)
scipy.fftpack.tests.test_basic.TestFftn.test_shape_argument_more(self)
scipy.fftpack.tests.test_basic.TestFftn.test_shape_axes_argument(self)
scipy.fftpack.tests.test_basic.TestFftn.test_shape_axes_argument2(self)
scipy.fftpack.tests.test_basic.TestFftnSingle
scipy.fftpack.tests.test_basic.TestFftnSingle.setup_method(self)
scipy.fftpack.tests.test_basic.TestFftnSingle.test_definition(self)
scipy.fftpack.tests.test_basic.TestFftnSingle.test_definition_float16(self)
scipy.fftpack.tests.test_basic.TestFftnSingle.test_float16_input_large(self,size)
scipy.fftpack.tests.test_basic.TestFftnSingle.test_float16_input_small(self,size)
scipy.fftpack.tests.test_basic.TestFftnSingle.test_size_accuracy_large(self,size)
scipy.fftpack.tests.test_basic.TestFftnSingle.test_size_accuracy_small(self,size)
scipy.fftpack.tests.test_basic.TestFloat16FFT
scipy.fftpack.tests.test_basic.TestFloat16FFT.test_1_argument_real(self)
scipy.fftpack.tests.test_basic.TestFloat16FFT.test_n_argument_real(self)
scipy.fftpack.tests.test_basic.TestIRFFTDouble(_TestIRFFTBase)
scipy.fftpack.tests.test_basic.TestIRFFTDouble.setup_method(self)
scipy.fftpack.tests.test_basic.TestIRFFTSingle(_TestIRFFTBase)
scipy.fftpack.tests.test_basic.TestIRFFTSingle.setup_method(self)
scipy.fftpack.tests.test_basic.TestIfftn
scipy.fftpack.tests.test_basic.TestIfftn.setup_method(self)
scipy.fftpack.tests.test_basic.TestIfftn.test_definition(self,dtype,cdtype,maxnlp)
scipy.fftpack.tests.test_basic.TestIfftn.test_invalid_sizes(self)
scipy.fftpack.tests.test_basic.TestIfftn.test_random_complex(self,maxnlp,size)
scipy.fftpack.tests.test_basic.TestOverwrite
scipy.fftpack.tests.test_basic.TestOverwrite._check(self,x,routine,fftsize,axis,overwrite_x)
scipy.fftpack.tests.test_basic.TestOverwrite._check_1d(self,routine,dtype,shape,axis,overwritable_dtypes,fftsize,overwrite_x)
scipy.fftpack.tests.test_basic.TestOverwrite._check_nd_one(self,routine,dtype,shape,axes,overwritable_dtypes,overwrite_x)
scipy.fftpack.tests.test_basic.TestOverwrite.test_fft_ifft(self,dtype,fftsize,overwrite_x,shape,axes)
scipy.fftpack.tests.test_basic.TestOverwrite.test_fftn_ifftn(self,dtype,overwrite_x,shape,axes)
scipy.fftpack.tests.test_basic.TestOverwrite.test_rfft_irfft(self,dtype,fftsize,overwrite_x,shape,axes)
scipy.fftpack.tests.test_basic.TestRFFTDouble(_TestRFFTBase)
scipy.fftpack.tests.test_basic.TestRFFTDouble.setup_method(self)
scipy.fftpack.tests.test_basic.TestRFFTSingle(_TestRFFTBase)
scipy.fftpack.tests.test_basic.TestRFFTSingle.setup_method(self)
scipy.fftpack.tests.test_basic.TestSingleFFT(_TestFFTBase)
scipy.fftpack.tests.test_basic.TestSingleFFT.setup_method(self)
scipy.fftpack.tests.test_basic.TestSingleFFT.test_notice(self)
scipy.fftpack.tests.test_basic.TestSingleIFFT(_TestIFFTBase)
scipy.fftpack.tests.test_basic.TestSingleIFFT.setup_method(self)
scipy.fftpack.tests.test_basic.Testfft2
scipy.fftpack.tests.test_basic.Testfft2.setup_method(self)
scipy.fftpack.tests.test_basic.Testfft2.test_invalid_sizes(self)
scipy.fftpack.tests.test_basic.Testfft2.test_regression_244(self)
scipy.fftpack.tests.test_basic._TestFFTBase
scipy.fftpack.tests.test_basic._TestFFTBase._test_n_argument_complex(self)
scipy.fftpack.tests.test_basic._TestFFTBase.setup_method(self)
scipy.fftpack.tests.test_basic._TestFFTBase.test_definition(self)
scipy.fftpack.tests.test_basic._TestFFTBase.test_invalid_sizes(self)
scipy.fftpack.tests.test_basic._TestFFTBase.test_n_argument_real(self)
scipy.fftpack.tests.test_basic._TestIFFTBase
scipy.fftpack.tests.test_basic._TestIFFTBase.setup_method(self)
scipy.fftpack.tests.test_basic._TestIFFTBase.test_definition(self)
scipy.fftpack.tests.test_basic._TestIFFTBase.test_definition_real(self)
scipy.fftpack.tests.test_basic._TestIFFTBase.test_invalid_sizes(self)
scipy.fftpack.tests.test_basic._TestIFFTBase.test_random_complex(self)
scipy.fftpack.tests.test_basic._TestIFFTBase.test_random_real(self)
scipy.fftpack.tests.test_basic._TestIFFTBase.test_size_accuracy(self)
scipy.fftpack.tests.test_basic._TestIRFFTBase
scipy.fftpack.tests.test_basic._TestIRFFTBase.setup_method(self)
scipy.fftpack.tests.test_basic._TestIRFFTBase.test_complex_input(self)
scipy.fftpack.tests.test_basic._TestIRFFTBase.test_definition(self)
scipy.fftpack.tests.test_basic._TestIRFFTBase.test_invalid_sizes(self)
scipy.fftpack.tests.test_basic._TestIRFFTBase.test_random_real(self)
scipy.fftpack.tests.test_basic._TestIRFFTBase.test_size_accuracy(self)
scipy.fftpack.tests.test_basic._TestRFFTBase
scipy.fftpack.tests.test_basic._TestRFFTBase.MockSeries(self,data)
scipy.fftpack.tests.test_basic._TestRFFTBase.MockSeries.__getattr__(self,item)
scipy.fftpack.tests.test_basic._TestRFFTBase.MockSeries.__init__(self,data)
scipy.fftpack.tests.test_basic._TestRFFTBase.setup_method(self)
scipy.fftpack.tests.test_basic._TestRFFTBase.test_complex_input(self)
scipy.fftpack.tests.test_basic._TestRFFTBase.test_definition(self)
scipy.fftpack.tests.test_basic._TestRFFTBase.test_invalid_sizes(self)
scipy.fftpack.tests.test_basic._TestRFFTBase.test_non_ndarray_with_dtype(self)
scipy.fftpack.tests.test_basic._assert_close_in_norm(x,y,rtol,size,rdt)
scipy.fftpack.tests.test_basic.direct_dft(x)
scipy.fftpack.tests.test_basic.direct_dftn(x)
scipy.fftpack.tests.test_basic.direct_idft(x)
scipy.fftpack.tests.test_basic.direct_idftn(x)
scipy.fftpack.tests.test_basic.direct_irdft(x)
scipy.fftpack.tests.test_basic.direct_rdft(x)
scipy.fftpack.tests.test_basic.get_mat(n)
scipy.fftpack.tests.test_basic.random(size)
scipy.fftpack.tests.test_basic.test_shape_axes_ndarray(func)
scipy.fftpack.tests.testdirect_dft(x)
scipy.fftpack.tests.testdirect_dftn(x)
scipy.fftpack.tests.testdirect_idft(x)
scipy.fftpack.tests.testdirect_idftn(x)
scipy.fftpack.tests.testdirect_irdft(x)
scipy.fftpack.tests.testdirect_rdft(x)
scipy.fftpack.tests.testget_mat(n)
scipy.fftpack.tests.testrandom(size)
scipy.fftpack.tests.testtest_shape_axes_ndarray(func)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fftpack/tests/test_pseudo_diffs.py----------------------------------------
A:scipy.fftpack.tests.test_pseudo_diffs.fx->fft(x)
A:scipy.fftpack.tests.test_pseudo_diffs.n->len(x)
A:scipy.fftpack.tests.test_pseudo_diffs.d1->diff(f)
A:scipy.fftpack.tests.test_pseudo_diffs.f->diff(diff(f, 1), -1)
A:scipy.fftpack.tests.test_pseudo_diffs.y->ihilbert(f)
A:scipy.fftpack.tests.test_pseudo_diffs.y1->direct_ihilbert(f)
A:scipy.fftpack.tests.test_pseudo_diffs.y2->itilbert(f, h=10)
A:scipy.fftpack.tests.test_pseudo_diffs.x2->x.copy()
A:scipy.fftpack.tests.test_pseudo_diffs.data->data.astype(dtype).astype(dtype)
scipy.fftpack.tests.testTestDiff
scipy.fftpack.tests.testTestDiff.test_definition(self)
scipy.fftpack.tests.testTestDiff.test_expr(self)
scipy.fftpack.tests.testTestDiff.test_expr_large(self)
scipy.fftpack.tests.testTestDiff.test_int(self)
scipy.fftpack.tests.testTestDiff.test_period(self)
scipy.fftpack.tests.testTestDiff.test_random_even(self)
scipy.fftpack.tests.testTestDiff.test_random_odd(self)
scipy.fftpack.tests.testTestDiff.test_sin(self)
scipy.fftpack.tests.testTestDiff.test_zero_nyquist(self)
scipy.fftpack.tests.testTestHilbert
scipy.fftpack.tests.testTestHilbert.test_definition(self)
scipy.fftpack.tests.testTestHilbert.test_random_even(self)
scipy.fftpack.tests.testTestHilbert.test_random_odd(self)
scipy.fftpack.tests.testTestHilbert.test_tilbert_relation(self)
scipy.fftpack.tests.testTestIHilbert
scipy.fftpack.tests.testTestIHilbert.test_definition(self)
scipy.fftpack.tests.testTestIHilbert.test_itilbert_relation(self)
scipy.fftpack.tests.testTestITilbert
scipy.fftpack.tests.testTestITilbert.test_definition(self)
scipy.fftpack.tests.testTestOverwrite
scipy.fftpack.tests.testTestOverwrite._check(self,x,routine,*args,**kwargs)
scipy.fftpack.tests.testTestOverwrite._check_1d(self,routine,dtype,shape,*args,**kwargs)
scipy.fftpack.tests.testTestOverwrite.test_cc_diff(self)
scipy.fftpack.tests.testTestOverwrite.test_cs_diff(self)
scipy.fftpack.tests.testTestOverwrite.test_diff(self)
scipy.fftpack.tests.testTestOverwrite.test_hilbert(self)
scipy.fftpack.tests.testTestOverwrite.test_itilbert(self)
scipy.fftpack.tests.testTestOverwrite.test_sc_diff(self)
scipy.fftpack.tests.testTestOverwrite.test_shift(self)
scipy.fftpack.tests.testTestOverwrite.test_ss_diff(self)
scipy.fftpack.tests.testTestOverwrite.test_tilbert(self)
scipy.fftpack.tests.testTestShift
scipy.fftpack.tests.testTestShift.test_definition(self)
scipy.fftpack.tests.testTestTilbert
scipy.fftpack.tests.testTestTilbert.test_definition(self)
scipy.fftpack.tests.testTestTilbert.test_random_even(self)
scipy.fftpack.tests.testTestTilbert.test_random_odd(self)
scipy.fftpack.tests.test_pseudo_diffs.TestDiff
scipy.fftpack.tests.test_pseudo_diffs.TestDiff.test_definition(self)
scipy.fftpack.tests.test_pseudo_diffs.TestDiff.test_expr(self)
scipy.fftpack.tests.test_pseudo_diffs.TestDiff.test_expr_large(self)
scipy.fftpack.tests.test_pseudo_diffs.TestDiff.test_int(self)
scipy.fftpack.tests.test_pseudo_diffs.TestDiff.test_period(self)
scipy.fftpack.tests.test_pseudo_diffs.TestDiff.test_random_even(self)
scipy.fftpack.tests.test_pseudo_diffs.TestDiff.test_random_odd(self)
scipy.fftpack.tests.test_pseudo_diffs.TestDiff.test_sin(self)
scipy.fftpack.tests.test_pseudo_diffs.TestDiff.test_zero_nyquist(self)
scipy.fftpack.tests.test_pseudo_diffs.TestHilbert
scipy.fftpack.tests.test_pseudo_diffs.TestHilbert.test_definition(self)
scipy.fftpack.tests.test_pseudo_diffs.TestHilbert.test_random_even(self)
scipy.fftpack.tests.test_pseudo_diffs.TestHilbert.test_random_odd(self)
scipy.fftpack.tests.test_pseudo_diffs.TestHilbert.test_tilbert_relation(self)
scipy.fftpack.tests.test_pseudo_diffs.TestIHilbert
scipy.fftpack.tests.test_pseudo_diffs.TestIHilbert.test_definition(self)
scipy.fftpack.tests.test_pseudo_diffs.TestIHilbert.test_itilbert_relation(self)
scipy.fftpack.tests.test_pseudo_diffs.TestITilbert
scipy.fftpack.tests.test_pseudo_diffs.TestITilbert.test_definition(self)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite._check(self,x,routine,*args,**kwargs)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite._check_1d(self,routine,dtype,shape,*args,**kwargs)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite.test_cc_diff(self)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite.test_cs_diff(self)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite.test_diff(self)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite.test_hilbert(self)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite.test_itilbert(self)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite.test_sc_diff(self)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite.test_shift(self)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite.test_ss_diff(self)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite.test_tilbert(self)
scipy.fftpack.tests.test_pseudo_diffs.TestShift
scipy.fftpack.tests.test_pseudo_diffs.TestShift.test_definition(self)
scipy.fftpack.tests.test_pseudo_diffs.TestTilbert
scipy.fftpack.tests.test_pseudo_diffs.TestTilbert.test_definition(self)
scipy.fftpack.tests.test_pseudo_diffs.TestTilbert.test_random_even(self)
scipy.fftpack.tests.test_pseudo_diffs.TestTilbert.test_random_odd(self)
scipy.fftpack.tests.test_pseudo_diffs.direct_diff(x,k=1,period=None)
scipy.fftpack.tests.test_pseudo_diffs.direct_hilbert(x)
scipy.fftpack.tests.test_pseudo_diffs.direct_ihilbert(x)
scipy.fftpack.tests.test_pseudo_diffs.direct_itilbert(x,h=1,period=None)
scipy.fftpack.tests.test_pseudo_diffs.direct_shift(x,a,period=None)
scipy.fftpack.tests.test_pseudo_diffs.direct_tilbert(x,h=1,period=None)
scipy.fftpack.tests.testdirect_diff(x,k=1,period=None)
scipy.fftpack.tests.testdirect_hilbert(x)
scipy.fftpack.tests.testdirect_ihilbert(x)
scipy.fftpack.tests.testdirect_itilbert(x,h=1,period=None)
scipy.fftpack.tests.testdirect_shift(x,a,period=None)
scipy.fftpack.tests.testdirect_tilbert(x,h=1,period=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fftpack/tests/test_real_transforms.py----------------------------------------
A:scipy.fftpack.tests.test_real_transforms.MDATA->numpy.load(join(dirname(__file__), 'test.npz'))
A:scipy.fftpack.tests.test_real_transforms.FFTWDATA_DOUBLE->numpy.load(join(dirname(__file__), 'fftw_double_ref.npz'))
A:scipy.fftpack.tests.test_real_transforms.FFTWDATA_SINGLE->numpy.load(join(dirname(__file__), 'fftw_single_ref.npz'))
A:scipy.fftpack.tests.test_real_transforms.x->idst(yr, type=self.type)
A:scipy.fftpack.tests.test_real_transforms.dt->numpy.result_type(np.float32, self.rdt)
A:scipy.fftpack.tests.test_real_transforms.y->dst(x, norm='ortho', type=4)
A:scipy.fftpack.tests.test_real_transforms.x[row, :]->idst(x[row, :], **kwargs)
A:scipy.fftpack.tests.test_real_transforms.x[:, col]->idst(x[:, col], **kwargs)
A:scipy.fftpack.tests.test_real_transforms.N->len(x)
A:scipy.fftpack.tests.test_real_transforms.m0->numpy.sqrt(1.0 / M)
A:scipy.fftpack.tests.test_real_transforms.m->numpy.sqrt(2.0 / M)
A:scipy.fftpack.tests.test_real_transforms.(x, yr, dt)->fftw_dct_ref(self.type, i, self.rdt)
A:scipy.fftpack.tests.test_real_transforms.y2->finverse_ref(fdata, type=dct_type, norm=norm)
A:scipy.fftpack.tests.test_real_transforms.xi->dct(y, norm='ortho', type=3)
A:scipy.fftpack.tests.test_real_transforms.(xr, yr, dt)->fftw_dst_ref(self.type, i, self.rdt)
A:scipy.fftpack.tests.test_real_transforms.x2->idst(yr, type=self.type).copy()
A:scipy.fftpack.tests.test_real_transforms.data->numpy.random.RandomState(1234).randn(*shape)
A:scipy.fftpack.tests.test_real_transforms.rstate->numpy.random.RandomState(1234)
A:scipy.fftpack.tests.test_real_transforms.tmp->finverse(tmp, shape=None, axes=axes, norm='ortho')
A:scipy.fftpack.tests.test_real_transforms.y1->finverse(fdata, type=dct_type, norm=norm)
A:scipy.fftpack.tests.test_real_transforms.fdata->dctn(self.data, type=dct_type, norm=norm)
scipy.fftpack.tests.test_real_transforms.TestComplex
scipy.fftpack.tests.test_real_transforms.TestComplex.test_dct_complex(self)
scipy.fftpack.tests.test_real_transforms.TestComplex.test_dct_complex64(self)
scipy.fftpack.tests.test_real_transforms.TestComplex.test_dst_complex(self)
scipy.fftpack.tests.test_real_transforms.TestComplex.test_dst_complex64(self)
scipy.fftpack.tests.test_real_transforms.TestComplex.test_idct_complex(self)
scipy.fftpack.tests.test_real_transforms.TestComplex.test_idst_complex(self)
scipy.fftpack.tests.test_real_transforms.TestDCTIDouble(_TestDCTIBase)
scipy.fftpack.tests.test_real_transforms.TestDCTIDouble.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDCTIFloat(_TestDCTIBase)
scipy.fftpack.tests.test_real_transforms.TestDCTIFloat.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDCTIIDouble(_TestDCTIIBase)
scipy.fftpack.tests.test_real_transforms.TestDCTIIDouble.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDCTIIFloat(_TestDCTIIBase)
scipy.fftpack.tests.test_real_transforms.TestDCTIIFloat.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDCTIIIDouble(_TestDCTIIIBase)
scipy.fftpack.tests.test_real_transforms.TestDCTIIIDouble.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDCTIIIFloat(_TestDCTIIIBase)
scipy.fftpack.tests.test_real_transforms.TestDCTIIIFloat.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDCTIIIInt(_TestDCTIIIBase)
scipy.fftpack.tests.test_real_transforms.TestDCTIIIInt.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDCTIIInt(_TestDCTIIBase)
scipy.fftpack.tests.test_real_transforms.TestDCTIIInt.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDCTIInt(_TestDCTIBase)
scipy.fftpack.tests.test_real_transforms.TestDCTIInt.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDCTIVDouble(_TestDCTIVBase)
scipy.fftpack.tests.test_real_transforms.TestDCTIVDouble.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDCTIVFloat(_TestDCTIVBase)
scipy.fftpack.tests.test_real_transforms.TestDCTIVFloat.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDCTIVInt(_TestDCTIVBase)
scipy.fftpack.tests.test_real_transforms.TestDCTIVInt.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDSTIDouble(_TestDSTIBase)
scipy.fftpack.tests.test_real_transforms.TestDSTIDouble.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDSTIFloat(_TestDSTIBase)
scipy.fftpack.tests.test_real_transforms.TestDSTIFloat.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDSTIIDouble(_TestDSTBase)
scipy.fftpack.tests.test_real_transforms.TestDSTIIDouble.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDSTIIFloat(_TestDSTBase)
scipy.fftpack.tests.test_real_transforms.TestDSTIIFloat.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDSTIIIDouble(_TestDSTBase)
scipy.fftpack.tests.test_real_transforms.TestDSTIIIDouble.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDSTIIIFloat(_TestDSTBase)
scipy.fftpack.tests.test_real_transforms.TestDSTIIIFloat.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDSTIIIInt(_TestDSTBase)
scipy.fftpack.tests.test_real_transforms.TestDSTIIIInt.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDSTIIInt(_TestDSTBase)
scipy.fftpack.tests.test_real_transforms.TestDSTIIInt.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDSTIInt(_TestDSTIBase)
scipy.fftpack.tests.test_real_transforms.TestDSTIInt.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDSTIVDouble(_TestDSTIVBase)
scipy.fftpack.tests.test_real_transforms.TestDSTIVDouble.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDSTIVFloat(_TestDSTIVBase)
scipy.fftpack.tests.test_real_transforms.TestDSTIVFloat.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestDSTIVInt(_TestDSTIVBase)
scipy.fftpack.tests.test_real_transforms.TestDSTIVInt.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDCTIDouble(_TestIDCTBase)
scipy.fftpack.tests.test_real_transforms.TestIDCTIDouble.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDCTIFloat(_TestIDCTBase)
scipy.fftpack.tests.test_real_transforms.TestIDCTIFloat.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDCTIIDouble(_TestIDCTBase)
scipy.fftpack.tests.test_real_transforms.TestIDCTIIDouble.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDCTIIFloat(_TestIDCTBase)
scipy.fftpack.tests.test_real_transforms.TestIDCTIIFloat.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDCTIIIDouble(_TestIDCTBase)
scipy.fftpack.tests.test_real_transforms.TestIDCTIIIDouble.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDCTIIIFloat(_TestIDCTBase)
scipy.fftpack.tests.test_real_transforms.TestIDCTIIIFloat.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDCTIIIInt(_TestIDCTBase)
scipy.fftpack.tests.test_real_transforms.TestIDCTIIIInt.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDCTIIInt(_TestIDCTBase)
scipy.fftpack.tests.test_real_transforms.TestIDCTIIInt.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDCTIInt(_TestIDCTBase)
scipy.fftpack.tests.test_real_transforms.TestIDCTIInt.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDCTIVDouble(_TestIDCTBase)
scipy.fftpack.tests.test_real_transforms.TestIDCTIVDouble.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDCTIVFloat(_TestIDCTBase)
scipy.fftpack.tests.test_real_transforms.TestIDCTIVFloat.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDCTIVInt(_TestIDCTBase)
scipy.fftpack.tests.test_real_transforms.TestIDCTIVInt.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDSTIDouble(_TestIDSTBase)
scipy.fftpack.tests.test_real_transforms.TestIDSTIDouble.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDSTIFloat(_TestIDSTBase)
scipy.fftpack.tests.test_real_transforms.TestIDSTIFloat.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDSTIIDouble(_TestIDSTBase)
scipy.fftpack.tests.test_real_transforms.TestIDSTIIDouble.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDSTIIFloat(_TestIDSTBase)
scipy.fftpack.tests.test_real_transforms.TestIDSTIIFloat.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDSTIIIDouble(_TestIDSTBase)
scipy.fftpack.tests.test_real_transforms.TestIDSTIIIDouble.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDSTIIIFloat(_TestIDSTBase)
scipy.fftpack.tests.test_real_transforms.TestIDSTIIIFloat.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDSTIIIInt(_TestIDSTBase)
scipy.fftpack.tests.test_real_transforms.TestIDSTIIIInt.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDSTIIInt(_TestIDSTBase)
scipy.fftpack.tests.test_real_transforms.TestIDSTIIInt.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDSTIInt(_TestIDSTBase)
scipy.fftpack.tests.test_real_transforms.TestIDSTIInt.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDSTIVDouble(_TestIDSTBase)
scipy.fftpack.tests.test_real_transforms.TestIDSTIVDouble.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDSTIVFloat(_TestIDSTBase)
scipy.fftpack.tests.test_real_transforms.TestIDSTIVFloat.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestIDSTIVnt(_TestIDSTBase)
scipy.fftpack.tests.test_real_transforms.TestIDSTIVnt.setup_method(self)
scipy.fftpack.tests.test_real_transforms.TestOverwrite
scipy.fftpack.tests.test_real_transforms.TestOverwrite._check(self,x,routine,type,fftsize,axis,norm,overwrite_x,**kw)
scipy.fftpack.tests.test_real_transforms.TestOverwrite._check_1d(self,routine,dtype,shape,axis)
scipy.fftpack.tests.test_real_transforms.TestOverwrite.test_dct(self)
scipy.fftpack.tests.test_real_transforms.TestOverwrite.test_dst(self)
scipy.fftpack.tests.test_real_transforms.TestOverwrite.test_idct(self)
scipy.fftpack.tests.test_real_transforms.TestOverwrite.test_idst(self)
scipy.fftpack.tests.test_real_transforms.Test_DCTN_IDCTN
scipy.fftpack.tests.test_real_transforms.Test_DCTN_IDCTN.test_axes_and_shape(self,fforward,finverse)
scipy.fftpack.tests.test_real_transforms.Test_DCTN_IDCTN.test_axes_round_trip(self,fforward,finverse,axes,dct_type,norm)
scipy.fftpack.tests.test_real_transforms.Test_DCTN_IDCTN.test_dctn_vs_2d_reference(self,fforward,fforward_ref,dct_type,norm)
scipy.fftpack.tests.test_real_transforms.Test_DCTN_IDCTN.test_idctn_vs_2d_reference(self,finverse,finverse_ref,dct_type,norm)
scipy.fftpack.tests.test_real_transforms.Test_DCTN_IDCTN.test_shape(self,fforward)
scipy.fftpack.tests.test_real_transforms.Test_DCTN_IDCTN.test_shape_is_none_with_axes(self,fforward,finverse,axes)
scipy.fftpack.tests.test_real_transforms._TestDCTBase
scipy.fftpack.tests.test_real_transforms._TestDCTBase.setup_method(self)
scipy.fftpack.tests.test_real_transforms._TestDCTBase.test_axis(self)
scipy.fftpack.tests.test_real_transforms._TestDCTBase.test_definition(self)
scipy.fftpack.tests.test_real_transforms._TestDCTIBase(_TestDCTBase)
scipy.fftpack.tests.test_real_transforms._TestDCTIBase.test_definition_ortho(self)
scipy.fftpack.tests.test_real_transforms._TestDCTIIBase(_TestDCTBase)
scipy.fftpack.tests.test_real_transforms._TestDCTIIBase.test_definition_matlab(self)
scipy.fftpack.tests.test_real_transforms._TestDCTIIIBase(_TestDCTBase)
scipy.fftpack.tests.test_real_transforms._TestDCTIIIBase.test_definition_ortho(self)
scipy.fftpack.tests.test_real_transforms._TestDCTIVBase(_TestDCTBase)
scipy.fftpack.tests.test_real_transforms._TestDCTIVBase.test_definition_ortho(self)
scipy.fftpack.tests.test_real_transforms._TestDSTBase
scipy.fftpack.tests.test_real_transforms._TestDSTBase.setup_method(self)
scipy.fftpack.tests.test_real_transforms._TestDSTBase.test_definition(self)
scipy.fftpack.tests.test_real_transforms._TestDSTIBase(_TestDSTBase)
scipy.fftpack.tests.test_real_transforms._TestDSTIBase.test_definition_ortho(self)
scipy.fftpack.tests.test_real_transforms._TestDSTIVBase(_TestDSTBase)
scipy.fftpack.tests.test_real_transforms._TestDSTIVBase.test_definition_ortho(self)
scipy.fftpack.tests.test_real_transforms._TestIDCTBase
scipy.fftpack.tests.test_real_transforms._TestIDCTBase.setup_method(self)
scipy.fftpack.tests.test_real_transforms._TestIDCTBase.test_definition(self)
scipy.fftpack.tests.test_real_transforms._TestIDSTBase
scipy.fftpack.tests.test_real_transforms._TestIDSTBase.setup_method(self)
scipy.fftpack.tests.test_real_transforms._TestIDSTBase.test_definition(self)
scipy.fftpack.tests.test_real_transforms.dct_2d_ref(x,**kwargs)
scipy.fftpack.tests.test_real_transforms.dst_2d_ref(x,**kwargs)
scipy.fftpack.tests.test_real_transforms.fftw_dct_ref(type,size,dt)
scipy.fftpack.tests.test_real_transforms.fftw_dst_ref(type,size,dt)
scipy.fftpack.tests.test_real_transforms.idct_2d_ref(x,**kwargs)
scipy.fftpack.tests.test_real_transforms.idst_2d_ref(x,**kwargs)
scipy.fftpack.tests.test_real_transforms.naive_dct1(x,norm=None)
scipy.fftpack.tests.test_real_transforms.naive_dct4(x,norm=None)
scipy.fftpack.tests.test_real_transforms.naive_dst1(x,norm=None)
scipy.fftpack.tests.test_real_transforms.naive_dst4(x,norm=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fftpack/tests/test_helper.py----------------------------------------
A:scipy.fftpack.tests.test_helper.x->numpy.random.random((n,))
scipy.fftpack.tests.testTestFFTFreq
scipy.fftpack.tests.testTestFFTFreq.test_definition(self)
scipy.fftpack.tests.testTestFFTShift
scipy.fftpack.tests.testTestFFTShift.test_definition(self)
scipy.fftpack.tests.testTestFFTShift.test_inverse(self)
scipy.fftpack.tests.testTestRFFTFreq
scipy.fftpack.tests.testTestRFFTFreq.test_definition(self)
scipy.fftpack.tests.test_helper.TestFFTFreq
scipy.fftpack.tests.test_helper.TestFFTFreq.test_definition(self)
scipy.fftpack.tests.test_helper.TestFFTShift
scipy.fftpack.tests.test_helper.TestFFTShift.test_definition(self)
scipy.fftpack.tests.test_helper.TestFFTShift.test_inverse(self)
scipy.fftpack.tests.test_helper.TestRFFTFreq
scipy.fftpack.tests.test_helper.TestRFFTFreq.test_definition(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fftpack/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/fftpack/tests/test_import.py----------------------------------------
scipy.fftpack.tests.test_import.TestFFTPackImport
scipy.fftpack.tests.test_import.TestFFTPackImport.test_fftpack_import(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_trustregion_dogleg.py----------------------------------------
A:scipy.optimize._trustregion_dogleg.Bg->self.hessp(g)
A:scipy.optimize._trustregion_dogleg.cho_info->scipy.linalg.cho_factor(B)
A:scipy.optimize._trustregion_dogleg.p_best->self.newton_point()
A:scipy.optimize._trustregion_dogleg.p_u->self.cauchy_point()
A:scipy.optimize._trustregion_dogleg.p_u_norm->scipy.linalg.norm(p_u)
A:scipy.optimize._trustregion_dogleg.(_, tb)->self.get_boundaries_intersections(p_u, p_best - p_u, trust_radius)
scipy.optimize._trustregion_dogleg.DoglegSubproblem(BaseQuadraticSubproblem)
scipy.optimize._trustregion_dogleg.DoglegSubproblem.cauchy_point(self)
scipy.optimize._trustregion_dogleg.DoglegSubproblem.newton_point(self)
scipy.optimize._trustregion_dogleg.DoglegSubproblem.solve(self,trust_radius)
scipy.optimize._trustregion_dogleg._minimize_dogleg(fun,x0,args=(),jac=None,hess=None,**trust_region_options)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_cobyla_py.py----------------------------------------
A:scipy.optimize._cobyla_py._module_lock->RLock()
A:scipy.optimize._cobyla_py.con->tuple(({'type': 'ineq', 'fun': c, 'args': consargs} for c in cons))
A:scipy.optimize._cobyla_py.sol->_minimize_cobyla(func, x0, args, constraints=con, **opts)
A:scipy.optimize._cobyla_py.iprint->int(bool(disp))
A:scipy.optimize._cobyla_py.ctype->con['type'].lower()
A:scipy.optimize._cobyla_py.f->fun(np.copy(x), *args)
A:scipy.optimize._cobyla_py.cons_length->len(f)
A:scipy.optimize._cobyla_py.m->sum(cons_lengths)
A:scipy.optimize._cobyla_py.con[i:i + size]->c['fun'](x, *c['args'])
A:scipy.optimize._cobyla_py.info->numpy.zeros(4, np.float64)
A:scipy.optimize._cobyla_py.(xopt, info)->scipy.optimize._cobyla.minimize(calcfc, m=m, x=np.copy(x0), rhobeg=rhobeg, rhoend=rhoend, iprint=iprint, maxfun=maxfun, dinfo=info, callback=wrapped_callback)
scipy.optimize._cobyla_py._minimize_cobyla(fun,x0,args=(),constraints=(),rhobeg=1.0,tol=0.0001,maxiter=1000,disp=False,catol=0.0002,callback=None,**unknown_options)
scipy.optimize._cobyla_py.fmin_cobyla(func,x0,cons,args=(),consargs=None,rhobeg=1.0,rhoend=0.0001,maxfun=1000,disp=None,catol=0.0002,*,callback=None)
scipy.optimize._cobyla_py.synchronized(func)
scipy.optimize.fmin_cobyla(func,x0,cons,args=(),consargs=None,rhobeg=1.0,rhoend=0.0001,maxfun=1000,disp=None,catol=0.0002,*,callback=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_slsqp_py.py----------------------------------------
A:scipy.optimize._slsqp_py._epsilon->sqrt(finfo(float).eps)
A:scipy.optimize._slsqp_py.jac->approx_derivative(func, x, method='2-point', abs_step=epsilon, args=args)
A:scipy.optimize._slsqp_py.res->_minimize_slsqp(func, x0, args, jac=fprime, bounds=bounds, constraints=cons, **opts)
A:scipy.optimize._slsqp_py.x->_check_clip_x(x, new_bounds)
A:scipy.optimize._slsqp_py.new_bounds->old_bound_to_new(bounds)
A:scipy.optimize._slsqp_py.ctype->con['type'].lower()
A:scipy.optimize._slsqp_py.cjac->cjac_factory(con['fun'])
A:scipy.optimize._slsqp_py.meq->sum(map(len, [atleast_1d(c['fun'](x, *c['args'])) for c in cons['eq']]))
A:scipy.optimize._slsqp_py.mieq->sum(map(len, [atleast_1d(c['fun'](x, *c['args'])) for c in cons['ineq']]))
A:scipy.optimize._slsqp_py.la->array([1, m]).max()
A:scipy.optimize._slsqp_py.n->len(x)
A:scipy.optimize._slsqp_py.w->zeros(len_w)
A:scipy.optimize._slsqp_py.jw->zeros(len_jw)
A:scipy.optimize._slsqp_py.xl->numpy.empty(n, dtype=float)
A:scipy.optimize._slsqp_py.xu->numpy.empty(n, dtype=float)
A:scipy.optimize._slsqp_py.bnds->array([(_arr_to_scalar(l), _arr_to_scalar(u)) for (l, u) in bounds], float)
A:scipy.optimize._slsqp_py.sf->_prepare_scalar_function(func, x, jac=jac, args=args, epsilon=eps, finite_diff_rel_step=finite_diff_rel_step, bounds=new_bounds)
A:scipy.optimize._slsqp_py.wrapped_fun->_clip_x_for_func(sf.fun, new_bounds)
A:scipy.optimize._slsqp_py.wrapped_grad->_clip_x_for_func(sf.grad, new_bounds)
A:scipy.optimize._slsqp_py.mode->array(0, int)
A:scipy.optimize._slsqp_py.acc->array(acc, float)
A:scipy.optimize._slsqp_py.majiter->array(iter, int)
A:scipy.optimize._slsqp_py.alpha->array(0, float)
A:scipy.optimize._slsqp_py.f0->array(0, float)
A:scipy.optimize._slsqp_py.gs->array(0, float)
A:scipy.optimize._slsqp_py.h1->array(0, float)
A:scipy.optimize._slsqp_py.h2->array(0, float)
A:scipy.optimize._slsqp_py.h3->array(0, float)
A:scipy.optimize._slsqp_py.h4->array(0, float)
A:scipy.optimize._slsqp_py.t->array(0, float)
A:scipy.optimize._slsqp_py.t0->array(0, float)
A:scipy.optimize._slsqp_py.tol->array(0, float)
A:scipy.optimize._slsqp_py.iexact->array(0, int)
A:scipy.optimize._slsqp_py.incons->array(0, int)
A:scipy.optimize._slsqp_py.ireset->array(0, int)
A:scipy.optimize._slsqp_py.itermx->array(0, int)
A:scipy.optimize._slsqp_py.line->array(0, int)
A:scipy.optimize._slsqp_py.n1->array(0, int)
A:scipy.optimize._slsqp_py.n2->array(0, int)
A:scipy.optimize._slsqp_py.n3->array(0, int)
A:scipy.optimize._slsqp_py.fx->wrapped_fun(x)
A:scipy.optimize._slsqp_py.g->append(wrapped_grad(x), 0.0)
A:scipy.optimize._slsqp_py.c->concatenate((c_eq, c_ieq))
A:scipy.optimize._slsqp_py.a->concatenate((a, zeros([la, 1])), 1)
A:scipy.optimize._slsqp_py.majiter_prev->int(majiter)
A:scipy.optimize._slsqp_py.c_eq->zeros(0)
A:scipy.optimize._slsqp_py.c_ieq->zeros(0)
A:scipy.optimize._slsqp_py.a_eq->zeros((meq, n))
A:scipy.optimize._slsqp_py.a_ieq->zeros((mieq, n))
scipy.optimize._slsqp_py._eval_con_normals(x,cons,la,n,m,meq,mieq)
scipy.optimize._slsqp_py._eval_constraint(x,cons)
scipy.optimize._slsqp_py._minimize_slsqp(func,x0,args=(),jac=None,bounds=None,constraints=(),maxiter=100,ftol=1e-06,iprint=1,disp=False,eps=_epsilon,callback=None,finite_diff_rel_step=None,**unknown_options)
scipy.optimize._slsqp_py.approx_jacobian(x,func,epsilon,*args)
scipy.optimize._slsqp_py.fmin_slsqp(func,x0,eqcons=(),f_eqcons=None,ieqcons=(),f_ieqcons=None,bounds=(),fprime=None,fprime_eqcons=None,fprime_ieqcons=None,args=(),iter=100,acc=1e-06,iprint=1,disp=None,full_output=0,epsilon=_epsilon,callback=None)
scipy.optimize.fmin_slsqp(func,x0,eqcons=(),f_eqcons=None,ieqcons=(),f_ieqcons=None,bounds=(),fprime=None,fprime_eqcons=None,fprime_ieqcons=None,args=(),iter=100,acc=1e-06,iprint=1,disp=None,full_output=0,epsilon=_epsilon,callback=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_qap.py----------------------------------------
A:scipy.optimize._qap.method->method.lower().lower()
A:scipy.optimize._qap.res->methods[method](A, B, **options)
A:scipy.optimize._qap.A->numpy.atleast_2d(A)
A:scipy.optimize._qap.B->numpy.atleast_2d(B)
A:scipy.optimize._qap.partial_match->numpy.atleast_2d(partial_match).astype(int)
A:scipy.optimize._qap.maxiter->operator.index(maxiter)
A:scipy.optimize._qap.(A, B, partial_match)->_common_input_validation(A, B, partial_match)
A:scipy.optimize._qap.rng->check_random_state(rng)
A:scipy.optimize._qap.n->len(A)
A:scipy.optimize._qap.n_seeds->len(partial_match)
A:scipy.optimize._qap.P0->numpy.atleast_2d(P0)
A:scipy.optimize._qap.K->_doubly_stochastic(rng.uniform(size=(n_unseed, n_unseed)))
A:scipy.optimize._qap.score->_calc_score(A, B, perm)
A:scipy.optimize._qap.nonseed_B->check_random_state(rng).permutation(nonseed_B)
A:scipy.optimize._qap.nonseed_A->numpy.setdiff1d(range(n), partial_match[:, 0])
A:scipy.optimize._qap.perm_A->numpy.concatenate([partial_match[:, 0], nonseed_A])
A:scipy.optimize._qap.perm_B->numpy.concatenate([partial_match[:, 1], nonseed_B])
A:scipy.optimize._qap.(A11, A12, A21, A22)->_split_matrix(A[perm_A][:, perm_A], n_seeds)
A:scipy.optimize._qap.(B11, B12, B21, B22)->_split_matrix(B[perm_B][:, perm_B], n_seeds)
A:scipy.optimize._qap.(_, cols)->linear_sum_assignment(grad_fp, maximize=maximize)
A:scipy.optimize._qap.b21->(R.T @ A21 * B21).sum()
A:scipy.optimize._qap.b12->(R.T @ A12.T * B12.T).sum()
A:scipy.optimize._qap.b22a->(AR22 * B22.T[cols]).sum()
A:scipy.optimize._qap.b22b->(A22 * BR22[cols]).sum()
A:scipy.optimize._qap.a->(AR22.T * BR22).sum()
A:scipy.optimize._qap.alpha->numpy.argmin([0, (b + a) * obj_func_scalar])
A:scipy.optimize._qap.(_, col)->linear_sum_assignment(P, maximize=True)
A:scipy.optimize._qap.perm->check_random_state(rng).permutation(np.arange(N))
A:scipy.optimize._qap.unshuffled_perm->numpy.zeros(n, dtype=int)
A:scipy.optimize._qap.N->len(A)
A:scipy.optimize._qap.partial_guess->numpy.atleast_2d(partial_guess).astype(int)
A:scipy.optimize._qap.guess_rows->numpy.zeros(N, dtype=bool)
A:scipy.optimize._qap.guess_cols->numpy.zeros(N, dtype=bool)
A:scipy.optimize._qap.fixed_rows->numpy.zeros(N, dtype=bool)
A:scipy.optimize._qap.fixed_cols->numpy.zeros(N, dtype=bool)
A:scipy.optimize._qap.perm[random_rows]->check_random_state(rng).permutation(np.arange(N)[random_cols])
A:scipy.optimize._qap.best_score->_calc_score(A, B, perm)
A:scipy.optimize._qap.i_free->numpy.arange(N)
scipy.optimize._qap._calc_score(A,B,perm)
scipy.optimize._qap._common_input_validation(A,B,partial_match)
scipy.optimize._qap._doubly_stochastic(P,tol=0.001)
scipy.optimize._qap._quadratic_assignment_2opt(A,B,maximize=False,rng=None,partial_match=None,partial_guess=None,**unknown_options)
scipy.optimize._qap._quadratic_assignment_faq(A,B,maximize=False,partial_match=None,rng=None,P0='barycenter',shuffle_input=False,maxiter=30,tol=0.03,**unknown_options)
scipy.optimize._qap._split_matrix(X,n)
scipy.optimize._qap.quadratic_assignment(A,B,method='faq',options=None)
scipy.optimize.quadratic_assignment(A,B,method='faq',options=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_differentiable_functions.py----------------------------------------
A:scipy.optimize._differentiable_functions.self.x->numpy.atleast_1d(x).astype(float)
A:scipy.optimize._differentiable_functions.fx->numpy.asarray(fx).item()
A:scipy.optimize._differentiable_functions.self.f->self.J.dot(x)
A:scipy.optimize._differentiable_functions.self.g->approx_derivative(fun_wrapped, self.x, f0=self.f, **finite_diff_options)
A:scipy.optimize._differentiable_functions.self.H->scipy.sparse.csr_matrix((self.n, self.n))
A:scipy.optimize._differentiable_functions.sparsity_groups->group_columns(finite_diff_jac_sparsity)
A:scipy.optimize._differentiable_functions.self.x_diff->numpy.copy(self.x)
A:scipy.optimize._differentiable_functions.self.v->numpy.zeros(self.m, dtype=float)
A:scipy.optimize._differentiable_functions.self.J->numpy.atleast_2d(np.asarray(A))
A:scipy.optimize._differentiable_functions.n->len(x0)
A:scipy.optimize._differentiable_functions.A->numpy.eye(n)
scipy.optimize._differentiable_functions.IdentityVectorFunction(self,x0,sparse_jacobian)
scipy.optimize._differentiable_functions.IdentityVectorFunction.__init__(self,x0,sparse_jacobian)
scipy.optimize._differentiable_functions.LinearVectorFunction(self,A,x0,sparse_jacobian)
scipy.optimize._differentiable_functions.LinearVectorFunction.__init__(self,A,x0,sparse_jacobian)
scipy.optimize._differentiable_functions.LinearVectorFunction._update_x(self,x)
scipy.optimize._differentiable_functions.LinearVectorFunction.fun(self,x)
scipy.optimize._differentiable_functions.LinearVectorFunction.hess(self,x,v)
scipy.optimize._differentiable_functions.LinearVectorFunction.jac(self,x)
scipy.optimize._differentiable_functions.ScalarFunction(self,fun,x0,args,grad,hess,finite_diff_rel_step,finite_diff_bounds,epsilon=None)
scipy.optimize._differentiable_functions.ScalarFunction.__init__(self,fun,x0,args,grad,hess,finite_diff_rel_step,finite_diff_bounds,epsilon=None)
scipy.optimize._differentiable_functions.ScalarFunction._update_fun(self)
scipy.optimize._differentiable_functions.ScalarFunction._update_grad(self)
scipy.optimize._differentiable_functions.ScalarFunction._update_hess(self)
scipy.optimize._differentiable_functions.ScalarFunction.fun(self,x)
scipy.optimize._differentiable_functions.ScalarFunction.fun_and_grad(self,x)
scipy.optimize._differentiable_functions.ScalarFunction.grad(self,x)
scipy.optimize._differentiable_functions.ScalarFunction.hess(self,x)
scipy.optimize._differentiable_functions.VectorFunction(self,fun,x0,jac,hess,finite_diff_rel_step,finite_diff_jac_sparsity,finite_diff_bounds,sparse_jacobian)
scipy.optimize._differentiable_functions.VectorFunction.__init__(self,fun,x0,jac,hess,finite_diff_rel_step,finite_diff_jac_sparsity,finite_diff_bounds,sparse_jacobian)
scipy.optimize._differentiable_functions.VectorFunction._update_fun(self)
scipy.optimize._differentiable_functions.VectorFunction._update_hess(self)
scipy.optimize._differentiable_functions.VectorFunction._update_jac(self)
scipy.optimize._differentiable_functions.VectorFunction._update_v(self,v)
scipy.optimize._differentiable_functions.VectorFunction._update_x(self,x)
scipy.optimize._differentiable_functions.VectorFunction.fun(self,x)
scipy.optimize._differentiable_functions.VectorFunction.hess(self,x,v)
scipy.optimize._differentiable_functions.VectorFunction.jac(self,x)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tnc.py----------------------------------------
scipy.optimize.tnc.__dir__()
scipy.optimize.tnc.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_linprog_doc.py----------------------------------------
scipy.optimize._linprog_doc._linprog_highs_doc(c,A_ub=None,b_ub=None,A_eq=None,b_eq=None,bounds=None,method='highs',callback=None,maxiter=None,disp=False,presolve=True,time_limit=None,dual_feasibility_tolerance=None,primal_feasibility_tolerance=None,ipm_optimality_tolerance=None,simplex_dual_edge_weight_strategy=None,mip_rel_gap=None,**unknown_options)
scipy.optimize._linprog_doc._linprog_highs_ds_doc(c,A_ub=None,b_ub=None,A_eq=None,b_eq=None,bounds=None,method='highs-ds',callback=None,maxiter=None,disp=False,presolve=True,time_limit=None,dual_feasibility_tolerance=None,primal_feasibility_tolerance=None,simplex_dual_edge_weight_strategy=None,**unknown_options)
scipy.optimize._linprog_doc._linprog_highs_ipm_doc(c,A_ub=None,b_ub=None,A_eq=None,b_eq=None,bounds=None,method='highs-ipm',callback=None,maxiter=None,disp=False,presolve=True,time_limit=None,dual_feasibility_tolerance=None,primal_feasibility_tolerance=None,ipm_optimality_tolerance=None,**unknown_options)
scipy.optimize._linprog_doc._linprog_ip_doc(c,A_ub=None,b_ub=None,A_eq=None,b_eq=None,bounds=None,method='interior-point',callback=None,maxiter=1000,disp=False,presolve=True,tol=1e-08,autoscale=False,rr=True,alpha0=0.99995,beta=0.1,sparse=False,lstsq=False,sym_pos=True,cholesky=True,pc=True,ip=False,permc_spec='MMD_AT_PLUS_A',**unknown_options)
scipy.optimize._linprog_doc._linprog_rs_doc(c,A_ub=None,b_ub=None,A_eq=None,b_eq=None,bounds=None,method='interior-point',callback=None,x0=None,maxiter=5000,disp=False,presolve=True,tol=1e-12,autoscale=False,rr=True,maxupdate=10,mast=False,pivot='mrc',**unknown_options)
scipy.optimize._linprog_doc._linprog_simplex_doc(c,A_ub=None,b_ub=None,A_eq=None,b_eq=None,bounds=None,method='interior-point',callback=None,maxiter=5000,disp=False,presolve=True,tol=1e-12,autoscale=False,rr=True,bland=False,**unknown_options)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/minpack2.py----------------------------------------
scipy.optimize.minpack2.__dir__()
scipy.optimize.minpack2.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_hessian_update_strategy.py----------------------------------------
A:scipy.optimize._hessian_update_strategy._syr->get_blas_funcs('syr', dtype='d')
A:scipy.optimize._hessian_update_strategy._syr2->get_blas_funcs('syr2', dtype='d')
A:scipy.optimize._hessian_update_strategy._symv->get_blas_funcs('symv', dtype='d')
A:scipy.optimize._hessian_update_strategy.self.B->self._syr(1 / denominator, z_minus_Mw, a=self.B)
A:scipy.optimize._hessian_update_strategy.self.H->self._syr(1 / denominator, z_minus_Mw, a=self.H)
A:scipy.optimize._hessian_update_strategy.s_norm2->numpy.dot(delta_x, delta_x)
A:scipy.optimize._hessian_update_strategy.y_norm2->numpy.dot(delta_grad, delta_grad)
A:scipy.optimize._hessian_update_strategy.ys->numpy.abs(np.dot(delta_grad, delta_x))
A:scipy.optimize._hessian_update_strategy.scale->self._auto_scale(delta_x, delta_grad)
A:scipy.optimize._hessian_update_strategy.M->numpy.copy(self.H)
A:scipy.optimize._hessian_update_strategy.li->numpy.tril_indices_from(M, k=-1)
A:scipy.optimize._hessian_update_strategy.wz->numpy.dot(w, z)
A:scipy.optimize._hessian_update_strategy.Mw->self.dot(w)
A:scipy.optimize._hessian_update_strategy.wMw->self.dot(w).dot(w)
A:scipy.optimize._hessian_update_strategy.denominator->numpy.dot(w, z_minus_Mw)
scipy.optimize.BFGS(self,exception_strategy='skip_update',min_curvature=None,init_scale='auto')
scipy.optimize.BFGS._update_hessian(self,ys,Bs,sBs,y)
scipy.optimize.BFGS._update_implementation(self,delta_x,delta_grad)
scipy.optimize.BFGS._update_inverse_hessian(self,ys,Hy,yHy,s)
scipy.optimize.HessianUpdateStrategy
scipy.optimize.HessianUpdateStrategy.dot(self,p)
scipy.optimize.HessianUpdateStrategy.get_matrix(self)
scipy.optimize.HessianUpdateStrategy.initialize(self,n,approx_type)
scipy.optimize.HessianUpdateStrategy.update(self,delta_x,delta_grad)
scipy.optimize.SR1(self,min_denominator=1e-08,init_scale='auto')
scipy.optimize.SR1._update_implementation(self,delta_x,delta_grad)
scipy.optimize._hessian_update_strategy.BFGS(self,exception_strategy='skip_update',min_curvature=None,init_scale='auto')
scipy.optimize._hessian_update_strategy.BFGS.__init__(self,exception_strategy='skip_update',min_curvature=None,init_scale='auto')
scipy.optimize._hessian_update_strategy.BFGS._update_hessian(self,ys,Bs,sBs,y)
scipy.optimize._hessian_update_strategy.BFGS._update_implementation(self,delta_x,delta_grad)
scipy.optimize._hessian_update_strategy.BFGS._update_inverse_hessian(self,ys,Hy,yHy,s)
scipy.optimize._hessian_update_strategy.FullHessianUpdateStrategy(self,init_scale='auto')
scipy.optimize._hessian_update_strategy.FullHessianUpdateStrategy.__init__(self,init_scale='auto')
scipy.optimize._hessian_update_strategy.FullHessianUpdateStrategy._auto_scale(self,delta_x,delta_grad)
scipy.optimize._hessian_update_strategy.FullHessianUpdateStrategy._update_implementation(self,delta_x,delta_grad)
scipy.optimize._hessian_update_strategy.FullHessianUpdateStrategy.dot(self,p)
scipy.optimize._hessian_update_strategy.FullHessianUpdateStrategy.get_matrix(self)
scipy.optimize._hessian_update_strategy.FullHessianUpdateStrategy.initialize(self,n,approx_type)
scipy.optimize._hessian_update_strategy.FullHessianUpdateStrategy.update(self,delta_x,delta_grad)
scipy.optimize._hessian_update_strategy.HessianUpdateStrategy
scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.dot(self,p)
scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.get_matrix(self)
scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.initialize(self,n,approx_type)
scipy.optimize._hessian_update_strategy.HessianUpdateStrategy.update(self,delta_x,delta_grad)
scipy.optimize._hessian_update_strategy.SR1(self,min_denominator=1e-08,init_scale='auto')
scipy.optimize._hessian_update_strategy.SR1.__init__(self,min_denominator=1e-08,init_scale='auto')
scipy.optimize._hessian_update_strategy.SR1._update_implementation(self,delta_x,delta_grad)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_trustregion_ncg.py----------------------------------------
A:scipy.optimize._trustregion_ncg.p_origin->numpy.zeros_like(self.jac)
A:scipy.optimize._trustregion_ncg.Bd->self.hessp(d)
A:scipy.optimize._trustregion_ncg.dBd->numpy.dot(d, Bd)
A:scipy.optimize._trustregion_ncg.(ta, tb)->self.get_boundaries_intersections(z, d, trust_radius)
A:scipy.optimize._trustregion_ncg.r_squared->numpy.dot(r, r)
A:scipy.optimize._trustregion_ncg.r_next_squared->numpy.dot(r_next, r_next)
scipy.optimize._trustregion_ncg.CGSteihaugSubproblem(BaseQuadraticSubproblem)
scipy.optimize._trustregion_ncg.CGSteihaugSubproblem.solve(self,trust_radius)
scipy.optimize._trustregion_ncg._minimize_trust_ncg(fun,x0,args=(),jac=None,hess=None,hessp=None,**trust_region_options)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_trustregion_krylov.py----------------------------------------
scipy.optimize._trustregion_krylov._minimize_trust_krylov(fun,x0,args=(),jac=None,hess=None,hessp=None,inexact=True,**trust_region_options)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/minpack.py----------------------------------------
scipy.optimize.minpack.__dir__()
scipy.optimize.minpack.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_remove_redundancy.py----------------------------------------
A:scipy.optimize._remove_redundancy.rowCounts->_row_count(A)
A:scipy.optimize._remove_redundancy.u->dtrsm(1, LU, vperm, lower=1, diag=1)
A:scipy.optimize._remove_redundancy.(A, rhs, status, message)->_remove_zero_rows(A, rhs)
A:scipy.optimize._remove_redundancy.v->list(range(m))
A:scipy.optimize._remove_redundancy.b->numpy.delete(b, i_remove)
A:scipy.optimize._remove_redundancy.A->numpy.delete(A, i_remove, axis=0)
A:scipy.optimize._remove_redundancy.e->numpy.zeros(m)
A:scipy.optimize._remove_redundancy.js_candidates->numpy.arange(m, m + n, dtype=int)
A:scipy.optimize._remove_redundancy.js_mask->numpy.ones(js_candidates.shape, dtype=bool)
A:scipy.optimize._remove_redundancy.lu->scipy.linalg.lu_factor(A[:, b])
A:scipy.optimize._remove_redundancy.perm_r->list(range(m))
A:scipy.optimize._remove_redundancy.pi->scipy.sparse.linalg.spsolve(B.transpose(), e).reshape(-1, 1)
A:scipy.optimize._remove_redundancy.c->abs(A[:, j_indices].transpose().dot(pi))
A:scipy.optimize._remove_redundancy.bibar->scipy.sparse.linalg.spsolve(B.transpose(), e).reshape(-1, 1).T.dot(rhs.reshape(-1, 1))
A:scipy.optimize._remove_redundancy.bnorm->numpy.linalg.norm(rhs)
A:scipy.optimize._remove_redundancy.keep->list(keep - set(d))
A:scipy.optimize._remove_redundancy.k->numpy.linalg.matrix_rank(A)
A:scipy.optimize._remove_redundancy.js->list(k - set(b))
A:scipy.optimize._remove_redundancy.(A, b, status, message)->_remove_zero_rows(A, b)
A:scipy.optimize._remove_redundancy.(U, s, Vh)->svd(A)
A:scipy.optimize._remove_redundancy.i_remove->_get_densest(A, eligibleRows)
A:scipy.optimize._remove_redundancy.(idx, proj)->interp_decomp(A.T, k, rand=randomized)
A:scipy.optimize._remove_redundancy.idx->sorted(idx[:k])
scipy.optimize._remove_redundancy._get_densest(A,eligibleRows)
scipy.optimize._remove_redundancy._remove_redundancy_id(A,rhs,rank=None,randomized=True)
scipy.optimize._remove_redundancy._remove_redundancy_pivot_dense(A,rhs,true_rank=None)
scipy.optimize._remove_redundancy._remove_redundancy_pivot_sparse(A,rhs)
scipy.optimize._remove_redundancy._remove_redundancy_svd(A,b)
scipy.optimize._remove_redundancy._remove_zero_rows(A,b)
scipy.optimize._remove_redundancy._row_count(A)
scipy.optimize._remove_redundancy.bg_update_dense(plu,perm_r,v,j)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_numdiff.py----------------------------------------
A:scipy.optimize._numdiff.use_one_sided->numpy.zeros_like(h, dtype=bool)
A:scipy.optimize._numdiff.h->numpy.where(dx == 0, _eps_for_method(x0.dtype, f0.dtype, method) * sign_x0 * np.maximum(1.0, np.abs(x0)), h)
A:scipy.optimize._numdiff.h_adjusted->numpy.where(dx == 0, _eps_for_method(x0.dtype, f0.dtype, method) * sign_x0 * np.maximum(1.0, np.abs(x0)), h).copy()
A:scipy.optimize._numdiff.h_adjusted[forward]->numpy.minimum(h[forward], 0.5 * upper_dist[forward] / num_steps)
A:scipy.optimize._numdiff.rstep->_eps_for_method(x0.dtype, f0.dtype, method)
A:scipy.optimize._numdiff.abs_step->numpy.where(dx == 0, rstep * sign_x0 * np.maximum(1.0, np.abs(x0)), abs_step)
A:scipy.optimize._numdiff.lb->numpy.resize(lb, x0.shape)
A:scipy.optimize._numdiff.ub->numpy.resize(ub, x0.shape)
A:scipy.optimize._numdiff.A->(A != 0).astype(np.int32)
A:scipy.optimize._numdiff.rng->numpy.random.RandomState(order)
A:scipy.optimize._numdiff.order->numpy.asarray(order)
A:scipy.optimize._numdiff.groups->numpy.atleast_1d(groups)
A:scipy.optimize._numdiff.groups[order]->numpy.atleast_1d(groups).copy()
A:scipy.optimize._numdiff.x0->numpy.atleast_1d(x0)
A:scipy.optimize._numdiff.(lb, ub)->_prepare_bounds(bounds, x0)
A:scipy.optimize._numdiff.f->numpy.atleast_1d(fun(x, *args, **kwargs))
A:scipy.optimize._numdiff.f0->numpy.atleast_1d(f0)
A:scipy.optimize._numdiff.rel_step->_eps_for_method(x0.dtype, f0.dtype, method)
A:scipy.optimize._numdiff.(h, use_one_sided)->_adjust_scheme_to_bounds(x0, h, 1, '2-sided', lb, ub)
A:scipy.optimize._numdiff.structure->numpy.atleast_2d(structure)
A:scipy.optimize._numdiff.f1->fun(x0 + h_vec * 1j)
A:scipy.optimize._numdiff.f2->fun(x2)
A:scipy.optimize._numdiff.J_transposed->numpy.ravel(J_transposed)
A:scipy.optimize._numdiff.h_vecs->numpy.diag(h)
A:scipy.optimize._numdiff.e->numpy.equal(group, groups)
A:scipy.optimize._numdiff.(cols,)->numpy.nonzero(e)
A:scipy.optimize._numdiff.(i, j, _)->find(structure[:, cols])
A:scipy.optimize._numdiff.x1->numpy.atleast_1d(x0).copy()
A:scipy.optimize._numdiff.x2->numpy.atleast_1d(x0).copy()
A:scipy.optimize._numdiff.dx->numpy.zeros(n)
A:scipy.optimize._numdiff.df->numpy.empty(m)
A:scipy.optimize._numdiff.row_indices->numpy.hstack(row_indices)
A:scipy.optimize._numdiff.col_indices->numpy.hstack(col_indices)
A:scipy.optimize._numdiff.fractions->numpy.hstack(fractions)
A:scipy.optimize._numdiff.J->coo_matrix((fractions, (row_indices, col_indices)), shape=(m, n))
A:scipy.optimize._numdiff.J_to_test->csr_matrix(J_to_test)
A:scipy.optimize._numdiff.J_diff->approx_derivative(fun, x0, bounds=bounds, args=args, kwargs=kwargs)
A:scipy.optimize._numdiff.(i, j, abs_err_data)->find(abs_err)
A:scipy.optimize._numdiff.J_diff_data->numpy.asarray(J_diff[i, j]).ravel()
A:scipy.optimize._numdiff.abs_err->numpy.abs(J_to_test - J_diff)
scipy.optimize._numdiff._adjust_scheme_to_bounds(x0,h,num_steps,scheme,lb,ub)
scipy.optimize._numdiff._compute_absolute_step(rel_step,x0,f0,method)
scipy.optimize._numdiff._dense_difference(fun,x0,f0,h,use_one_sided,method)
scipy.optimize._numdiff._eps_for_method(x0_dtype,f0_dtype,method)
scipy.optimize._numdiff._linear_operator_difference(fun,x0,f0,h,method)
scipy.optimize._numdiff._prepare_bounds(bounds,x0)
scipy.optimize._numdiff._sparse_difference(fun,x0,f0,h,use_one_sided,structure,groups,method)
scipy.optimize._numdiff.approx_derivative(fun,x0,method='3-point',rel_step=None,abs_step=None,f0=None,bounds=(-np.inf,np.inf),sparsity=None,as_linear_operator=False,args=(),kwargs={})
scipy.optimize._numdiff.check_derivative(fun,jac,x0,bounds=(-np.inf,np.inf),args=(),kwargs={})
scipy.optimize._numdiff.group_columns(A,order=0)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_linprog_simplex.py----------------------------------------
A:scipy.optimize._linprog_simplex.ma->numpy.ma.masked_where(T[:-k, pivcol] <= tol, T[:-k, pivcol], copy=False)
A:scipy.optimize._linprog_simplex.mb->numpy.ma.masked_where(T[:-k, pivcol] <= tol, T[:-k, -1], copy=False)
A:scipy.optimize._linprog_simplex.message->"The pivot operation produces a pivot value of:{0: .1e}, which is only slightly greater than the specified tolerance{1: .1e}. This may lead to issues regarding the numerical stability of the simplex method. Removing redundant constraints, changing the pivot strategy via Bland's rule or increasing the tolerance may help reduce the issue.".format(pivval, tol)
A:scipy.optimize._linprog_simplex.solution->numpy.zeros(n + m)
A:scipy.optimize._linprog_simplex.(pivcol_found, pivcol)->_pivot_col(T, tol, bland)
A:scipy.optimize._linprog_simplex.(pivrow_found, pivrow)->_pivot_row(T, basis, pivcol, phase, tol, bland)
A:scipy.optimize._linprog_simplex.(x, fun, slack, con)->_postsolve(x, postsolve_args)
A:scipy.optimize._linprog_simplex.res->OptimizeResult({'x': x, 'fun': fun, 'slack': slack, 'con': con, 'status': status, 'message': message, 'nit': nit, 'success': status == 0 and complete, 'phase': phase, 'complete': complete})
A:scipy.optimize._linprog_simplex.is_negative_constraint->numpy.less(b, 0)
A:scipy.optimize._linprog_simplex.basis->av.copy()
A:scipy.optimize._linprog_simplex.row_constraints->numpy.hstack((A, np.eye(n), b[:, np.newaxis]))
A:scipy.optimize._linprog_simplex.row_objective->numpy.hstack((c, np.zeros(n), c0))
A:scipy.optimize._linprog_simplex.T->numpy.delete(T, av, 1)
A:scipy.optimize._linprog_simplex.(nit1, status)->_solve_simplex(T, n, basis, callback=callback, postsolve_args=postsolve_args, maxiter=maxiter, tol=tol, phase=1, bland=bland)
A:scipy.optimize._linprog_simplex.messages[status]->"Phase 1 of the simplex method failed to find a feasible solution. The pseudo-objective function evaluates to {0:.1e} which exceeds the required tolerance of {1} for a solution to be considered 'close enough' to zero to be a basic solution. Consider increasing the tolerance to be greater than {0:.1e}. If this tolerance is unacceptably  large the problem may be infeasible.".format(abs(T[-1, -1]), tol)
A:scipy.optimize._linprog_simplex.(nit2, status)->_solve_simplex(T, n, basis, callback=callback, postsolve_args=postsolve_args, maxiter=maxiter, tol=tol, phase=2, bland=bland, nit0=nit1)
scipy.optimize._linprog_simplex._apply_pivot(T,basis,pivrow,pivcol,tol=1e-09)
scipy.optimize._linprog_simplex._linprog_simplex(c,c0,A,b,callback,postsolve_args,maxiter=1000,tol=1e-09,disp=False,bland=False,**unknown_options)
scipy.optimize._linprog_simplex._pivot_col(T,tol=1e-09,bland=False)
scipy.optimize._linprog_simplex._pivot_row(T,basis,pivcol,phase,tol=1e-09,bland=False)
scipy.optimize._linprog_simplex._solve_simplex(T,n,basis,callback,postsolve_args,maxiter=1000,tol=1e-09,phase=2,bland=False,nit0=0)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_direct_py.py----------------------------------------
A:scipy.optimize._direct_py.(lb, ub)->old_bound_to_new(bounds)
A:scipy.optimize._direct_py.bounds->Bounds(lb, ub)
A:scipy.optimize._direct_py.lb->numpy.ascontiguousarray(bounds.lb, dtype=np.float64)
A:scipy.optimize._direct_py.ub->numpy.ascontiguousarray(bounds.ub, dtype=np.float64)
A:scipy.optimize._direct_py.x->numpy.asarray(x)
A:scipy.optimize._direct_py.f->func(x, *args)
A:scipy.optimize._direct_py.(x, fun, ret_code, nfev, nit)->_direct(_func_wrap, np.asarray(lb), np.asarray(ub), args, False, eps, maxfun, maxiter, locally_biased, f_min, f_min_rtol, vol_tol, len_tol, callback)
A:scipy.optimize._direct_py.message->ERROR_MESSAGES[ret_code - 1].format(format_val[ret_code - 1])
scipy.optimize._direct_py.direct(func:Callable[[npt.ArrayLike,Tuple[Any]],float],bounds:Union[Iterable,Bounds],*,args:tuple=(),eps:float=0.0001,maxfun:Union[int,None]=None,maxiter:int=1000,locally_biased:bool=True,f_min:float=-np.inf,f_min_rtol:float=0.0001,vol_tol:float=1e-16,len_tol:float=1e-06,callback:Optional[Callable[[npt.ArrayLike],NoneType]]=None)->OptimizeResult
scipy.optimize.direct(func:Callable[[npt.ArrayLike,Tuple[Any]],float],bounds:Union[Iterable,Bounds],*,args:tuple=(),eps:float=0.0001,maxfun:Union[int,None]=None,maxiter:int=1000,locally_biased:bool=True,f_min:float=-np.inf,f_min_rtol:float=0.0001,vol_tol:float=1e-16,len_tol:float=1e-06,callback:Optional[Callable[[npt.ArrayLike],NoneType]]=None)->OptimizeResult


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_lbfgsb_py.py----------------------------------------
A:scipy.optimize._lbfgsb_py.fun->MemoizeJac(func)
A:scipy.optimize._lbfgsb_py.res->_minimize_lbfgsb(fun, x0, args=args, jac=jac, bounds=bounds, **opts)
A:scipy.optimize._lbfgsb_py.x0->numpy.clip(x0, new_bounds[0], new_bounds[1])
A:scipy.optimize._lbfgsb_py.new_bounds->old_bound_to_new(bounds)
A:scipy.optimize._lbfgsb_py.sf->_prepare_scalar_function(fun, x0, jac=jac, args=args, epsilon=eps, bounds=new_bounds, finite_diff_rel_step=finite_diff_rel_step)
A:scipy.optimize._lbfgsb_py.nbd->zeros(n, fortran_int)
A:scipy.optimize._lbfgsb_py.low_bnd->zeros(n, float64)
A:scipy.optimize._lbfgsb_py.upper_bnd->zeros(n, float64)
A:scipy.optimize._lbfgsb_py.x->array(x0, float64)
A:scipy.optimize._lbfgsb_py.f->array(0.0, float64)
A:scipy.optimize._lbfgsb_py.g->zeros((n,), float64)
A:scipy.optimize._lbfgsb_py.wa->zeros(2 * m * n + 5 * n + 11 * m * m + 8 * m, float64)
A:scipy.optimize._lbfgsb_py.iwa->zeros(3 * n, fortran_int)
A:scipy.optimize._lbfgsb_py.task->zeros(1, 'S60')
A:scipy.optimize._lbfgsb_py.csave->zeros(1, 'S60')
A:scipy.optimize._lbfgsb_py.lsave->zeros(4, fortran_int)
A:scipy.optimize._lbfgsb_py.isave->zeros(44, fortran_int)
A:scipy.optimize._lbfgsb_py.dsave->zeros(29, float64)
A:scipy.optimize._lbfgsb_py.task_str->task_str.decode().decode()
A:scipy.optimize._lbfgsb_py.(f, g)->func_and_grad(x)
A:scipy.optimize._lbfgsb_py.s->wa[0:m * n].reshape(m, n)
A:scipy.optimize._lbfgsb_py.y->wa[m * n:2 * m * n].reshape(m, n)
A:scipy.optimize._lbfgsb_py.n_corrs->min(n_bfgs_updates, maxcor)
A:scipy.optimize._lbfgsb_py.hess_inv->LbfgsInvHessProduct(s[:n_corrs], y[:n_corrs])
A:scipy.optimize._lbfgsb_py.q->q.reshape(-1).reshape(-1)
A:scipy.optimize._lbfgsb_py.alpha->numpy.empty(n_corrs)
A:scipy.optimize._lbfgsb_py.I->numpy.eye(*self.shape, dtype=self.dtype)
scipy.optimize.LbfgsInvHessProduct(self,sk,yk)
scipy.optimize.LbfgsInvHessProduct._matvec(self,x)
scipy.optimize.LbfgsInvHessProduct.todense(self)
scipy.optimize._lbfgsb_py.LbfgsInvHessProduct(self,sk,yk)
scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.__init__(self,sk,yk)
scipy.optimize._lbfgsb_py.LbfgsInvHessProduct._matvec(self,x)
scipy.optimize._lbfgsb_py.LbfgsInvHessProduct.todense(self)
scipy.optimize._lbfgsb_py._minimize_lbfgsb(fun,x0,args=(),jac=None,bounds=None,disp=None,maxcor=10,ftol=2.220446049250313e-09,gtol=1e-05,eps=1e-08,maxfun=15000,maxiter=15000,iprint=-1,callback=None,maxls=20,finite_diff_rel_step=None,**unknown_options)
scipy.optimize._lbfgsb_py.fmin_l_bfgs_b(func,x0,fprime=None,args=(),approx_grad=0,bounds=None,m=10,factr=10000000.0,pgtol=1e-05,epsilon=1e-08,iprint=-1,maxfun=15000,maxiter=15000,disp=None,callback=None,maxls=20)
scipy.optimize.fmin_l_bfgs_b(func,x0,fprime=None,args=(),approx_grad=0,bounds=None,m=10,factr=10000000.0,pgtol=1e-05,epsilon=1e-08,iprint=-1,maxfun=15000,maxiter=15000,disp=None,callback=None,maxls=20)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/moduleTNC.py----------------------------------------
scipy.optimize.moduleTNC.__dir__()
scipy.optimize.moduleTNC.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_minpack_py.py----------------------------------------
A:scipy.optimize._minpack_py.res->least_squares(func, p0, jac=jac, bounds=bounds, method=method, **kwargs)
A:scipy.optimize._minpack_py.func_name->getattr(thefunc, '__name__', None)
A:scipy.optimize._minpack_py.dt->dtype(float)
A:scipy.optimize._minpack_py.info->dict(((k, res.get(k)) for k in ('nfev', 'njev', 'fjac', 'r', 'qtf') if k in res))
A:scipy.optimize._minpack_py.x0->_asarray_validated(x0, as_inexact=True)
A:scipy.optimize._minpack_py.n->len(x)
A:scipy.optimize._minpack_py.(shape, dtype)->_check_func('leastsq', 'func', func, x0, args, n)
A:scipy.optimize._minpack_py.retval->_minpack._lmder(func, Dfun, x0, args, full_output, col_deriv, ftol, xtol, gtol, maxfev, factor, diag)
A:scipy.optimize._minpack_py.info['fun']->dict(((k, res.get(k)) for k in ('nfev', 'njev', 'fjac', 'r', 'qtf') if k in res)).pop('fvec')
A:scipy.optimize._minpack_py.sol->OptimizeResult(x=x, success=status == 1, status=status)
A:scipy.optimize._minpack_py.r->triu(transpose(retval[1]['fjac'])[:n, :])
A:scipy.optimize._minpack_py.inv_triu->scipy.linalg.get_lapack_funcs('trtri', (r,))
A:scipy.optimize._minpack_py.(invR, trtri_info)->inv_triu(r)
A:scipy.optimize._minpack_py.invR[perm]->invR.copy()
A:scipy.optimize._minpack_py.p0->_initialize_feasible(lb, ub)
A:scipy.optimize._minpack_py.lb_finite->numpy.isfinite(lb)
A:scipy.optimize._minpack_py.ub_finite->numpy.isfinite(ub)
A:scipy.optimize._minpack_py.sig->_getfullargspec(f)
A:scipy.optimize._minpack_py.(lb, ub)->prepare_bounds(bounds, n)
A:scipy.optimize._minpack_py.bounded_problem->numpy.any((lb > -np.inf) | (ub < np.inf))
A:scipy.optimize._minpack_py.ydata->numpy.asarray(ydata, float)
A:scipy.optimize._minpack_py.xdata->numpy.asarray(xdata, float)
A:scipy.optimize._minpack_py.sigma->numpy.asarray(sigma)
A:scipy.optimize._minpack_py.transform->cholesky(sigma, lower=True)
A:scipy.optimize._minpack_py.func->_wrap_func(f, xdata, ydata, transform)
A:scipy.optimize._minpack_py.jac->_wrap_jac(jac, xdata, transform)
A:scipy.optimize._minpack_py.ysize->len(res.fun)
A:scipy.optimize._minpack_py.cost->numpy.sum(infodict['fvec'] ** 2)
A:scipy.optimize._minpack_py.kwargs['max_nfev']->kwargs.pop('maxfev', None)
A:scipy.optimize._minpack_py.infodict->dict(nfev=res.nfev, fvec=res.fun)
A:scipy.optimize._minpack_py.(_, s, VT)->svd(res.jac, full_matrices=False)
A:scipy.optimize._minpack_py.pcov->zeros((len(popt), len(popt)), dtype=float)
A:scipy.optimize._minpack_py.x->x.reshape((n,)).reshape((n,))
A:scipy.optimize._minpack_py.fvec->fvec.reshape((m,)).reshape((m,))
A:scipy.optimize._minpack_py.m->len(fvec)
A:scipy.optimize._minpack_py.fjac->transpose(fjac)
A:scipy.optimize._minpack_py.xp->zeros((n,), float)
A:scipy.optimize._minpack_py.err->zeros((m,), float)
A:scipy.optimize._minpack_py.fvecp->fvecp.reshape((m,)).reshape((m,))
A:scipy.optimize._minpack_py.good->prod(greater(err, 0.5), axis=0)
A:scipy.optimize._minpack_py.p1->func(p0, *args)
A:scipy.optimize._minpack_py.p2->func(p1, *args)
A:scipy.optimize._minpack_py.p->_lazywhere(d != 0, (p0, p1, d), f=_del2, fillvalue=p2)
A:scipy.optimize._minpack_py.relerr->_lazywhere(p0 != 0, (p, p0), f=_relerr, fillvalue=p)
scipy.optimize._check_func(checker,argname,thefunc,x0,args,numinputs,output_shape=None)
scipy.optimize._del2(p0,p1,d)
scipy.optimize._fixed_point_helper(func,x0,args,xtol,maxiter,use_accel)
scipy.optimize._initialize_feasible(lb,ub)
scipy.optimize._minpack_py._check_func(checker,argname,thefunc,x0,args,numinputs,output_shape=None)
scipy.optimize._minpack_py._del2(p0,p1,d)
scipy.optimize._minpack_py._fixed_point_helper(func,x0,args,xtol,maxiter,use_accel)
scipy.optimize._minpack_py._initialize_feasible(lb,ub)
scipy.optimize._minpack_py._relerr(actual,desired)
scipy.optimize._minpack_py._root_hybr(func,x0,args=(),jac=None,col_deriv=0,xtol=1.49012e-08,maxfev=0,band=None,eps=None,factor=100,diag=None,**unknown_options)
scipy.optimize._minpack_py._wrap_func(func,xdata,ydata,transform)
scipy.optimize._minpack_py._wrap_jac(jac,xdata,transform)
scipy.optimize._minpack_py.check_gradient(fcn,Dfcn,x0,args=(),col_deriv=0)
scipy.optimize._minpack_py.curve_fit(f,xdata,ydata,p0=None,sigma=None,absolute_sigma=False,check_finite=True,bounds=(-np.inf,np.inf),method=None,jac=None,*,full_output=False,**kwargs)
scipy.optimize._minpack_py.fixed_point(func,x0,args=(),xtol=1e-08,maxiter=500,method='del2')
scipy.optimize._minpack_py.fsolve(func,x0,args=(),fprime=None,full_output=0,col_deriv=0,xtol=1.49012e-08,maxfev=0,band=None,epsfcn=None,factor=100,diag=None)
scipy.optimize._minpack_py.leastsq(func,x0,args=(),Dfun=None,full_output=0,col_deriv=0,ftol=1.49012e-08,xtol=1.49012e-08,gtol=0.0,maxfev=0,epsfcn=None,factor=100,diag=None)
scipy.optimize._relerr(actual,desired)
scipy.optimize._root_hybr(func,x0,args=(),jac=None,col_deriv=0,xtol=1.49012e-08,maxfev=0,band=None,eps=None,factor=100,diag=None,**unknown_options)
scipy.optimize._wrap_func(func,xdata,ydata,transform)
scipy.optimize._wrap_jac(jac,xdata,transform)
scipy.optimize.check_gradient(fcn,Dfcn,x0,args=(),col_deriv=0)
scipy.optimize.curve_fit(f,xdata,ydata,p0=None,sigma=None,absolute_sigma=False,check_finite=True,bounds=(-np.inf,np.inf),method=None,jac=None,*,full_output=False,**kwargs)
scipy.optimize.fixed_point(func,x0,args=(),xtol=1e-08,maxiter=500,method='del2')
scipy.optimize.fsolve(func,x0,args=(),fprime=None,full_output=0,col_deriv=0,xtol=1.49012e-08,maxfev=0,band=None,epsfcn=None,factor=100,diag=None)
scipy.optimize.leastsq(func,x0,args=(),Dfun=None,full_output=0,col_deriv=0,ftol=1.49012e-08,xtol=1.49012e-08,gtol=0.0,maxfev=0,epsfcn=None,factor=100,diag=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_zeros_py.py----------------------------------------
A:scipy.optimize._zeros_py.results->RootResults(root=x, iterations=iterations, function_calls=funcalls, flag=flag)
A:scipy.optimize._zeros_py.maxiter->operator.index(maxiter)
A:scipy.optimize._zeros_py.fval->numpy.asarray(func(p, *args))
A:scipy.optimize._zeros_py.fder->numpy.asarray(fprime(p, *args))
A:scipy.optimize._zeros_py.fder2->numpy.asarray(fprime2(p, *args))
A:scipy.optimize._zeros_py.q0->numpy.asarray(func(p, *args))
A:scipy.optimize._zeros_py.q1->numpy.asarray(func(p1, *args))
A:scipy.optimize._zeros_py.p->result(p, ~failures, zero_der)
A:scipy.optimize._zeros_py.failures->numpy.asarray(func(p, *args)).astype(bool)
A:scipy.optimize._zeros_py.nz_der->numpy.ones_like(failures)
A:scipy.optimize._zeros_py.active->numpy.ones_like(p, dtype=bool)
A:scipy.optimize._zeros_py.rms->numpy.sqrt(sum((p1[zero_der_nz_dp] - p[zero_der_nz_dp]) ** 2))
A:scipy.optimize._zeros_py.msg->'{0:s} failed to converge after {1:d} iterations'.format(all_or_some, maxiter)
A:scipy.optimize._zeros_py.result->TOMS748Solver().solve(f, a, b, args=args, k=k, xtol=xtol, rtol=rtol, maxiter=maxiter, disp=disp)
A:scipy.optimize._zeros_py.r->_zeros._brenth(f, a, b, xtol, rtol, maxiter, args, full_output, disp)
A:scipy.optimize._zeros_py.xvals->numpy.asarray(xvals)
A:scipy.optimize._zeros_py.M->len(xvals)
A:scipy.optimize._zeros_py.DD->numpy.zeros([M, N])
A:scipy.optimize._zeros_py.dd->numpy.array(fvals)
A:scipy.optimize._zeros_py.row->numpy.array(fvals)
A:scipy.optimize._zeros_py.N->len(xvals)
A:scipy.optimize._zeros_py.Q->numpy.zeros([N, N])
A:scipy.optimize._zeros_py.D->numpy.zeros([N, N])
A:scipy.optimize._zeros_py.(_, B, A)->_compute_divided_differences([a, b, d], [fa, fb, fd], forward=True, full=False)
A:scipy.optimize._zeros_py.self.k->max(k, self._K_MIN)
A:scipy.optimize._zeros_py.fx->self.f(x, *self.args)
A:scipy.optimize._zeros_py.fa->self._callf(a)
A:scipy.optimize._zeros_py.fb->self._callf(b)
A:scipy.optimize._zeros_py.c0->_inverse_poly_zero(self.ab[0], self.ab[1], d, e, self.fab[0], self.fab[1], fd, fe)
A:scipy.optimize._zeros_py.c->_secant(self.ab, self.fab)
A:scipy.optimize._zeros_py.fc->self._callf(c)
A:scipy.optimize._zeros_py.(d, fd)->self._update_bracket(z, fz)
A:scipy.optimize._zeros_py.(_, A)->_compute_divided_differences(self.ab, self.fab, forward=uix == 0, full=False)
A:scipy.optimize._zeros_py.fz->self._callf(z)
A:scipy.optimize._zeros_py.(status, xn)->self.iterate()
A:scipy.optimize._zeros_py.(self.d, self.fd)->self._update_bracket(c, fc)
A:scipy.optimize._zeros_py.solver->TOMS748Solver()
scipy.optimize.RootResults(self,root,iterations,function_calls,flag)
scipy.optimize.RootResults.__repr__(self)
scipy.optimize.TOMS748Solver(self)
scipy.optimize.TOMS748Solver._callf(self,x,error=True)
scipy.optimize.TOMS748Solver._update_bracket(self,c,fc)
scipy.optimize.TOMS748Solver.configure(self,xtol,rtol,maxiter,disp,k)
scipy.optimize.TOMS748Solver.get_result(self,x,flag=_ECONVERGED)
scipy.optimize.TOMS748Solver.get_status(self)
scipy.optimize.TOMS748Solver.iterate(self)
scipy.optimize.TOMS748Solver.solve(self,f,a,b,args=(),xtol=_xtol,rtol=_rtol,k=2,maxiter=_iter,disp=True)
scipy.optimize.TOMS748Solver.start(self,f,a,b,args=())
scipy.optimize._array_newton(func,x0,fprime,args,tol,maxiter,fprime2,full_output)
scipy.optimize._compute_divided_differences(xvals,fvals,N=None,full=True,forward=True)
scipy.optimize._interpolated_poly(xvals,fvals,x)
scipy.optimize._inverse_poly_zero(a,b,c,d,fa,fb,fc,fd)
scipy.optimize._newton_quadratic(ab,fab,d,fd,k)
scipy.optimize._notclose(fs,rtol=_rtol,atol=_xtol)
scipy.optimize._results_select(full_output,r)
scipy.optimize._secant(xvals,fvals)
scipy.optimize._update_bracket(ab,fab,c,fc)
scipy.optimize._zeros_py.RootResults(self,root,iterations,function_calls,flag)
scipy.optimize._zeros_py.RootResults.__init__(self,root,iterations,function_calls,flag)
scipy.optimize._zeros_py.RootResults.__repr__(self)
scipy.optimize._zeros_py.TOMS748Solver(self)
scipy.optimize._zeros_py.TOMS748Solver.__init__(self)
scipy.optimize._zeros_py.TOMS748Solver._callf(self,x,error=True)
scipy.optimize._zeros_py.TOMS748Solver._update_bracket(self,c,fc)
scipy.optimize._zeros_py.TOMS748Solver.configure(self,xtol,rtol,maxiter,disp,k)
scipy.optimize._zeros_py.TOMS748Solver.get_result(self,x,flag=_ECONVERGED)
scipy.optimize._zeros_py.TOMS748Solver.get_status(self)
scipy.optimize._zeros_py.TOMS748Solver.iterate(self)
scipy.optimize._zeros_py.TOMS748Solver.solve(self,f,a,b,args=(),xtol=_xtol,rtol=_rtol,k=2,maxiter=_iter,disp=True)
scipy.optimize._zeros_py.TOMS748Solver.start(self,f,a,b,args=())
scipy.optimize._zeros_py._array_newton(func,x0,fprime,args,tol,maxiter,fprime2,full_output)
scipy.optimize._zeros_py._compute_divided_differences(xvals,fvals,N=None,full=True,forward=True)
scipy.optimize._zeros_py._interpolated_poly(xvals,fvals,x)
scipy.optimize._zeros_py._inverse_poly_zero(a,b,c,d,fa,fb,fc,fd)
scipy.optimize._zeros_py._newton_quadratic(ab,fab,d,fd,k)
scipy.optimize._zeros_py._notclose(fs,rtol=_rtol,atol=_xtol)
scipy.optimize._zeros_py._results_select(full_output,r)
scipy.optimize._zeros_py._secant(xvals,fvals)
scipy.optimize._zeros_py._update_bracket(ab,fab,c,fc)
scipy.optimize._zeros_py.bisect(f,a,b,args=(),xtol=_xtol,rtol=_rtol,maxiter=_iter,full_output=False,disp=True)
scipy.optimize._zeros_py.brenth(f,a,b,args=(),xtol=_xtol,rtol=_rtol,maxiter=_iter,full_output=False,disp=True)
scipy.optimize._zeros_py.brentq(f,a,b,args=(),xtol=_xtol,rtol=_rtol,maxiter=_iter,full_output=False,disp=True)
scipy.optimize._zeros_py.newton(func,x0,fprime=None,args=(),tol=1.48e-08,maxiter=50,fprime2=None,x1=None,rtol=0.0,full_output=False,disp=True)
scipy.optimize._zeros_py.results_c(full_output,r)
scipy.optimize._zeros_py.ridder(f,a,b,args=(),xtol=_xtol,rtol=_rtol,maxiter=_iter,full_output=False,disp=True)
scipy.optimize._zeros_py.toms748(f,a,b,args=(),k=1,xtol=_xtol,rtol=_rtol,maxiter=_iter,full_output=False,disp=True)
scipy.optimize.bisect(f,a,b,args=(),xtol=_xtol,rtol=_rtol,maxiter=_iter,full_output=False,disp=True)
scipy.optimize.brenth(f,a,b,args=(),xtol=_xtol,rtol=_rtol,maxiter=_iter,full_output=False,disp=True)
scipy.optimize.brentq(f,a,b,args=(),xtol=_xtol,rtol=_rtol,maxiter=_iter,full_output=False,disp=True)
scipy.optimize.newton(func,x0,fprime=None,args=(),tol=1.48e-08,maxiter=50,fprime2=None,x1=None,rtol=0.0,full_output=False,disp=True)
scipy.optimize.results_c(full_output,r)
scipy.optimize.ridder(f,a,b,args=(),xtol=_xtol,rtol=_rtol,maxiter=_iter,full_output=False,disp=True)
scipy.optimize.toms748(f,a,b,args=(),k=1,xtol=_xtol,rtol=_rtol,maxiter=_iter,full_output=False,disp=True)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_trustregion_exact.py----------------------------------------
A:scipy.optimize._trustregion_exact.U->numpy.atleast_2d(U)
A:scipy.optimize._trustregion_exact.p->numpy.zeros(n)
A:scipy.optimize._trustregion_exact.w->solve_triangular(U, p, trans='T')
A:scipy.optimize._trustregion_exact.v->numpy.zeros(n)
A:scipy.optimize._trustregion_exact.v_norm->norm(v)
A:scipy.optimize._trustregion_exact.w_norm->norm(w)
A:scipy.optimize._trustregion_exact.H_diag->numpy.diag(H)
A:scipy.optimize._trustregion_exact.H_diag_abs->numpy.abs(H_diag)
A:scipy.optimize._trustregion_exact.H_row_sums->numpy.sum(np.abs(H), axis=1)
A:scipy.optimize._trustregion_exact.lb->numpy.min(H_diag + H_diag_abs - H_row_sums)
A:scipy.optimize._trustregion_exact.ub->numpy.max(H_diag - H_diag_abs + H_row_sums)
A:scipy.optimize._trustregion_exact.n->len(A)
A:scipy.optimize._trustregion_exact.v[:k - 1]->solve_triangular(U[:k - 1, :k - 1], -U[:k - 1, k - 1])
A:scipy.optimize._trustregion_exact.(self.cholesky,)->get_lapack_funcs(('potrf',), (self.hess,))
A:scipy.optimize._trustregion_exact.self.dimension->len(self.hess)
A:scipy.optimize._trustregion_exact.(self.hess_gershgorin_lb, self.hess_gershgorin_ub)->gershgorin_bounds(self.hess)
A:scipy.optimize._trustregion_exact.self.hess_inf->norm(self.hess, np.Inf)
A:scipy.optimize._trustregion_exact.self.hess_fro->norm(self.hess, 'fro')
A:scipy.optimize._trustregion_exact.lambda_ub->max(0, self.jac_mag / tr_radius + min(-self.hess_gershgorin_lb, self.hess_fro, self.hess_inf))
A:scipy.optimize._trustregion_exact.lambda_lb->max(lambda_lb, lambda_current + delta / v_norm ** 2)
A:scipy.optimize._trustregion_exact.lambda_initial->max(np.sqrt(lambda_lb * lambda_ub), lambda_lb + self.UPDATE_COEFF * (lambda_ub - lambda_lb))
A:scipy.optimize._trustregion_exact.(lambda_current, lambda_lb, lambda_ub)->self._initial_values(tr_radius)
A:scipy.optimize._trustregion_exact.(U, info)->self.cholesky(H, lower=False, overwrite_a=False, clean=True)
A:scipy.optimize._trustregion_exact.p_norm->norm(p)
A:scipy.optimize._trustregion_exact.(s_min, z_min)->estimate_smallest_singular_value(U)
A:scipy.optimize._trustregion_exact.(ta, tb)->self.get_boundaries_intersections(p, z_min, tr_radius)
A:scipy.optimize._trustregion_exact.step_len->min([ta, tb], key=abs)
A:scipy.optimize._trustregion_exact.quadratic_term->numpy.dot(p, np.dot(H, p))
A:scipy.optimize._trustregion_exact.(c, info)->self.cholesky(H, lower=False, overwrite_a=False, clean=True)
A:scipy.optimize._trustregion_exact.lambda_current->max(np.sqrt(lambda_lb * lambda_ub), lambda_lb + self.UPDATE_COEFF * (lambda_ub - lambda_lb))
A:scipy.optimize._trustregion_exact.(delta, v)->singular_leading_submatrix(H, U, info)
scipy.optimize._trustregion_exact.IterativeSubproblem(self,x,fun,jac,hess,hessp=None,k_easy=0.1,k_hard=0.2)
scipy.optimize._trustregion_exact.IterativeSubproblem.__init__(self,x,fun,jac,hess,hessp=None,k_easy=0.1,k_hard=0.2)
scipy.optimize._trustregion_exact.IterativeSubproblem._initial_values(self,tr_radius)
scipy.optimize._trustregion_exact.IterativeSubproblem.solve(self,tr_radius)
scipy.optimize._trustregion_exact._minimize_trustregion_exact(fun,x0,args=(),jac=None,hess=None,**trust_region_options)
scipy.optimize._trustregion_exact.estimate_smallest_singular_value(U)
scipy.optimize._trustregion_exact.gershgorin_bounds(H)
scipy.optimize._trustregion_exact.singular_leading_submatrix(A,U,k)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_milp.py----------------------------------------
A:scipy.optimize._milp.constraint->LinearConstraint(*constraint)
A:scipy.optimize._milp.A->vstack(As)
A:scipy.optimize._milp.b_l->numpy.concatenate(b_ls)
A:scipy.optimize._milp.b_u->numpy.concatenate(b_us)
A:scipy.optimize._milp.c->numpy.atleast_1d(c).astype(np.double)
A:scipy.optimize._milp.integrality->numpy.broadcast_to(integrality, c.shape).astype(np.uint8)
A:scipy.optimize._milp.bounds->Bounds(*bounds)
A:scipy.optimize._milp.lb->numpy.broadcast_to(bounds.lb, c.shape).astype(np.double)
A:scipy.optimize._milp.ub->numpy.broadcast_to(bounds.ub, c.shape).astype(np.double)
A:scipy.optimize._milp.(A, b_l, b_u)->_constraints_to_components(constraints)
A:scipy.optimize._milp.unsupported_options->set(options).difference(supported_options)
A:scipy.optimize._milp.args_iv->_milp_iv(c, integrality, bounds, constraints, options)
A:scipy.optimize._milp.highs_res->_highs_wrapper(c, indptr, indices, data, b_l, b_u, lb, ub, integrality, options)
A:scipy.optimize._milp.highs_status->_highs_wrapper(c, indptr, indices, data, b_l, b_u, lb, ub, integrality, options).get('status', None)
A:scipy.optimize._milp.highs_message->_highs_wrapper(c, indptr, indices, data, b_l, b_u, lb, ub, integrality, options).get('message', None)
A:scipy.optimize._milp.(status, message)->_highs_to_scipy_status_message(highs_status, highs_message)
A:scipy.optimize._milp.x->_highs_wrapper(c, indptr, indices, data, b_l, b_u, lb, ub, integrality, options).get('x', None)
A:scipy.optimize._milp.res['fun']->_highs_wrapper(c, indptr, indices, data, b_l, b_u, lb, ub, integrality, options).get('fun', None)
A:scipy.optimize._milp.res['mip_node_count']->_highs_wrapper(c, indptr, indices, data, b_l, b_u, lb, ub, integrality, options).get('mip_node_count', None)
A:scipy.optimize._milp.res['mip_dual_bound']->_highs_wrapper(c, indptr, indices, data, b_l, b_u, lb, ub, integrality, options).get('mip_dual_bound', None)
A:scipy.optimize._milp.res['mip_gap']->_highs_wrapper(c, indptr, indices, data, b_l, b_u, lb, ub, integrality, options).get('mip_gap', None)
scipy.optimize._milp._constraints_to_components(constraints)
scipy.optimize._milp._milp_iv(c,integrality,bounds,constraints,options)
scipy.optimize._milp.milp(c,*,integrality=None,bounds=None,constraints=None,options=None)
scipy.optimize.milp(c,*,integrality=None,bounds=None,constraints=None,options=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_basinhopping.py----------------------------------------
A:scipy.optimize._basinhopping.self.minres.x->numpy.copy(minres.x)
A:scipy.optimize._basinhopping.self.x->numpy.copy(minres.x)
A:scipy.optimize._basinhopping.self.res->scipy.optimize.OptimizeResult()
A:scipy.optimize._basinhopping.minres->self.storage.get_lowest()
A:scipy.optimize._basinhopping.self.storage->Storage(minres)
A:scipy.optimize._basinhopping.x_after_step->self.step_taking(x_after_step)
A:scipy.optimize._basinhopping.testres->test(f_new=energy_after_quench, x_new=x_after_quench, f_old=self.energy, x_old=self.x)
A:scipy.optimize._basinhopping.(accept, minres)->self._monte_carlo_step()
A:scipy.optimize._basinhopping.new_global_min->BasinHoppingRunner(x0, wrapped_minimizer, take_step_wrapped, accept_tests, disp=disp).one_cycle()
A:scipy.optimize._basinhopping.self.random_gen->check_random_state(random_gen)
A:scipy.optimize._basinhopping.w->math.exp(min(0, prod))
A:scipy.optimize._basinhopping.rand->self.random_gen.uniform()
A:scipy.optimize._basinhopping.x0->numpy.array(x0)
A:scipy.optimize._basinhopping.rng->check_random_state(seed)
A:scipy.optimize._basinhopping.minimizer_kwargs->dict()
A:scipy.optimize._basinhopping.wrapped_minimizer->MinimizerWrapper(scipy.optimize.minimize, func, **minimizer_kwargs)
A:scipy.optimize._basinhopping.take_step_wrapped->AdaptiveStepsize(displace, interval=interval, accept_rate=target_accept_rate, factor=stepwise_factor, verbose=disp)
A:scipy.optimize._basinhopping.displace->RandomDisplacement(stepsize=stepsize, random_gen=rng)
A:scipy.optimize._basinhopping.metropolis->Metropolis(T, random_gen=rng)
A:scipy.optimize._basinhopping.bh->BasinHoppingRunner(x0, wrapped_minimizer, take_step_wrapped, accept_tests, disp=disp)
A:scipy.optimize._basinhopping.val->callback(bh.xtrial, bh.energy_trial, bh.accept)
A:scipy.optimize._basinhopping.res.lowest_optimization_result->BasinHoppingRunner(x0, wrapped_minimizer, take_step_wrapped, accept_tests, disp=disp).storage.get_lowest()
A:scipy.optimize._basinhopping.res.x->numpy.copy(res.lowest_optimization_result.x)
scipy.optimize._basinhopping.AdaptiveStepsize(self,takestep,accept_rate=0.5,interval=50,factor=0.9,verbose=True)
scipy.optimize._basinhopping.AdaptiveStepsize.__init__(self,takestep,accept_rate=0.5,interval=50,factor=0.9,verbose=True)
scipy.optimize._basinhopping.AdaptiveStepsize._adjust_step_size(self)
scipy.optimize._basinhopping.AdaptiveStepsize.report(self,accept,**kwargs)
scipy.optimize._basinhopping.AdaptiveStepsize.take_step(self,x)
scipy.optimize._basinhopping.BasinHoppingRunner(self,x0,minimizer,step_taking,accept_tests,disp=False)
scipy.optimize._basinhopping.BasinHoppingRunner.__init__(self,x0,minimizer,step_taking,accept_tests,disp=False)
scipy.optimize._basinhopping.BasinHoppingRunner._monte_carlo_step(self)
scipy.optimize._basinhopping.BasinHoppingRunner.one_cycle(self)
scipy.optimize._basinhopping.BasinHoppingRunner.print_report(self,energy_trial,accept)
scipy.optimize._basinhopping.Metropolis(self,T,random_gen=None)
scipy.optimize._basinhopping.Metropolis.__init__(self,T,random_gen=None)
scipy.optimize._basinhopping.Metropolis.accept_reject(self,energy_new,energy_old)
scipy.optimize._basinhopping.MinimizerWrapper(self,minimizer,func=None,**kwargs)
scipy.optimize._basinhopping.MinimizerWrapper.__init__(self,minimizer,func=None,**kwargs)
scipy.optimize._basinhopping.RandomDisplacement(self,stepsize=0.5,random_gen=None)
scipy.optimize._basinhopping.RandomDisplacement.__init__(self,stepsize=0.5,random_gen=None)
scipy.optimize._basinhopping.Storage(self,minres)
scipy.optimize._basinhopping.Storage.__init__(self,minres)
scipy.optimize._basinhopping.Storage._add(self,minres)
scipy.optimize._basinhopping.Storage.get_lowest(self)
scipy.optimize._basinhopping.Storage.update(self,minres)
scipy.optimize._basinhopping.basinhopping(func,x0,niter=100,T=1.0,stepsize=0.5,minimizer_kwargs=None,take_step=None,accept_test=None,callback=None,interval=50,disp=False,niter_success=None,seed=None,*,target_accept_rate=0.5,stepwise_factor=0.9)
scipy.optimize.basinhopping(func,x0,niter=100,T=1.0,stepsize=0.5,minimizer_kwargs=None,take_step=None,accept_test=None,callback=None,interval=50,disp=False,niter_success=None,seed=None,*,target_accept_rate=0.5,stepwise_factor=0.9)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_dual_annealing.py----------------------------------------
A:scipy.optimize._dual_annealing.self._factor2->numpy.exp((4.0 - self._visiting_param) * np.log(self._visiting_param - 1.0))
A:scipy.optimize._dual_annealing.self._factor3->numpy.exp((2.0 - self._visiting_param) * np.log(2.0) / (self._visiting_param - 1.0))
A:scipy.optimize._dual_annealing.visits->self.visit_fn(temperature, dim)
A:scipy.optimize._dual_annealing.(upper_sample, lower_sample)->self.rand_gen.uniform(size=2)
A:scipy.optimize._dual_annealing.x_visit->self.visit_dist.visiting(self.energy_state.current_location, j, temperature)
A:scipy.optimize._dual_annealing.factor1->numpy.exp(np.log(temperature) / (self._visiting_param - 1.0))
A:scipy.optimize._dual_annealing.den->numpy.exp((self._visiting_param - 1.0) * np.log(np.fabs(y)) / (3.0 - self._visiting_param))
A:scipy.optimize._dual_annealing.self.current_location->numpy.copy(x)
A:scipy.optimize._dual_annealing.self.current_energy->ObjectiveFunWrapper(func, maxfun, *args).fun(self.current_location)
A:scipy.optimize._dual_annealing.self.xbest->numpy.copy(x)
A:scipy.optimize._dual_annealing.val->StrategyChain(accept, visit_dist, func_wrapper, minimizer_wrapper, rand_state, energy_state).local_search()
A:scipy.optimize._dual_annealing.self.xmin->numpy.copy(x)
A:scipy.optimize._dual_annealing.r->self._rand_gen.uniform()
A:scipy.optimize._dual_annealing.pqv->numpy.exp(np.log(pqv_temp) / (1.0 - self.acceptance_param))
A:scipy.optimize._dual_annealing.e->self.func_wrapper.fun(x_visit)
A:scipy.optimize._dual_annealing.(e, x)->self.minimizer_wrapper.local_search(self.xmin, self.emin)
A:scipy.optimize._dual_annealing.pls->numpy.exp(self.K * (self.energy_state.ebest - self.energy_state.current_energy) / self.temperature_step)
A:scipy.optimize._dual_annealing.bounds_list->list(zip(*search_bounds))
A:scipy.optimize._dual_annealing.self.lower->numpy.array(bounds_list[0])
A:scipy.optimize._dual_annealing.self.upper->numpy.array(bounds_list[1])
A:scipy.optimize._dual_annealing.n->len(self.lower)
A:scipy.optimize._dual_annealing.ls_max_iter->min(max(n * self.LS_MAXITER_RATIO, self.LS_MAXITER_MIN), self.LS_MAXITER_MAX)
A:scipy.optimize._dual_annealing.self.kwargs['bounds']->list(zip(self.lower, self.upper))
A:scipy.optimize._dual_annealing.x_tmp->numpy.copy(x)
A:scipy.optimize._dual_annealing.mres->self.minimizer(self.func_wrapper.fun, x, **self.kwargs)
A:scipy.optimize._dual_annealing.bounds->new_bounds_to_old(bounds.lb, bounds.ub, len(bounds.lb))
A:scipy.optimize._dual_annealing.lu->list(zip(*bounds))
A:scipy.optimize._dual_annealing.lower->numpy.array(lu[0])
A:scipy.optimize._dual_annealing.upper->numpy.array(lu[1])
A:scipy.optimize._dual_annealing.func_wrapper->ObjectiveFunWrapper(func, maxfun, *args)
A:scipy.optimize._dual_annealing.minimizer_wrapper->LocalSearchWrapper(bounds, func_wrapper, **minimizer_kwargs)
A:scipy.optimize._dual_annealing.rand_state->check_random_state(seed)
A:scipy.optimize._dual_annealing.energy_state->EnergyState(lower, upper, callback)
A:scipy.optimize._dual_annealing.visit_dist->VisitingDistribution(lower, upper, visit, rand_state)
A:scipy.optimize._dual_annealing.strategy_chain->StrategyChain(accept, visit_dist, func_wrapper, minimizer_wrapper, rand_state, energy_state)
A:scipy.optimize._dual_annealing.optimize_res->OptimizeResult()
scipy.optimize._dual_annealing.EnergyState(self,lower,upper,callback=None)
scipy.optimize._dual_annealing.EnergyState.__init__(self,lower,upper,callback=None)
scipy.optimize._dual_annealing.EnergyState.reset(self,func_wrapper,rand_gen,x0=None)
scipy.optimize._dual_annealing.EnergyState.update_best(self,e,x,context)
scipy.optimize._dual_annealing.EnergyState.update_current(self,e,x)
scipy.optimize._dual_annealing.LocalSearchWrapper(self,search_bounds,func_wrapper,**kwargs)
scipy.optimize._dual_annealing.LocalSearchWrapper.__init__(self,search_bounds,func_wrapper,**kwargs)
scipy.optimize._dual_annealing.LocalSearchWrapper.local_search(self,x,e)
scipy.optimize._dual_annealing.ObjectiveFunWrapper(self,func,maxfun=10000000.0,*args)
scipy.optimize._dual_annealing.ObjectiveFunWrapper.__init__(self,func,maxfun=10000000.0,*args)
scipy.optimize._dual_annealing.ObjectiveFunWrapper.fun(self,x)
scipy.optimize._dual_annealing.StrategyChain(self,acceptance_param,visit_dist,func_wrapper,minimizer_wrapper,rand_gen,energy_state)
scipy.optimize._dual_annealing.StrategyChain.__init__(self,acceptance_param,visit_dist,func_wrapper,minimizer_wrapper,rand_gen,energy_state)
scipy.optimize._dual_annealing.StrategyChain.accept_reject(self,j,e,x_visit)
scipy.optimize._dual_annealing.StrategyChain.local_search(self)
scipy.optimize._dual_annealing.StrategyChain.run(self,step,temperature)
scipy.optimize._dual_annealing.VisitingDistribution(self,lb,ub,visiting_param,rand_gen)
scipy.optimize._dual_annealing.VisitingDistribution.__init__(self,lb,ub,visiting_param,rand_gen)
scipy.optimize._dual_annealing.VisitingDistribution.visit_fn(self,temperature,dim)
scipy.optimize._dual_annealing.VisitingDistribution.visiting(self,x,step,temperature)
scipy.optimize._dual_annealing.dual_annealing(func,bounds,args=(),maxiter=1000,minimizer_kwargs=None,initial_temp=5230.0,restart_temp_ratio=2e-05,visit=2.62,accept=-5.0,maxfun=10000000.0,seed=None,no_local_search=False,callback=None,x0=None)
scipy.optimize.dual_annealing(func,bounds,args=(),maxiter=1000,minimizer_kwargs=None,initial_temp=5230.0,restart_temp_ratio=2e-05,visit=2.62,accept=-5.0,maxfun=10000000.0,seed=None,no_local_search=False,callback=None,x0=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_spectral.py----------------------------------------
A:scipy.optimize._spectral.(f, x_k, x_shape, f_k, F_k, is_complex)->_wrap_func(func, x0, fmerit, nfev, maxfev, args)
A:scipy.optimize._spectral.F_0_norm->fnorm(F_k)
A:scipy.optimize._spectral.prev_fs->collections.deque([f_k], M)
A:scipy.optimize._spectral.F_k_norm->fnorm(F_k)
A:scipy.optimize._spectral.eta->eta_strategy(k, x_k, F_k)
A:scipy.optimize._spectral.(alpha, xp, fp, Fp)->_nonmonotone_line_search_cruz(f, x_k, d, prev_fs, eta=eta)
A:scipy.optimize._spectral.(alpha, xp, fp, Fp, C, Q)->_nonmonotone_line_search_cheng(f, x_k, d, f_k, C, Q, eta=eta)
A:scipy.optimize._spectral.x->x.reshape(x0_shape).reshape(x0_shape)
A:scipy.optimize._spectral.F->numpy.asarray(func(x, *args)).ravel()
A:scipy.optimize._spectral.result->OptimizeResult(x=x, success=converged, message=message, fun=F, nfev=nfev[0], nit=k)
A:scipy.optimize._spectral.x0->_complex2real(x0)
A:scipy.optimize._spectral.z->z.reshape(shape).reshape(shape)
A:scipy.optimize._spectral.v->numpy.asarray(func(z, *args)).ravel()
A:scipy.optimize._spectral.f->fmerit(F)
scipy.optimize._spectral._NoConvergence(Exception)
scipy.optimize._spectral._complex2real(z)
scipy.optimize._spectral._real2complex(x)
scipy.optimize._spectral._root_df_sane(func,x0,args=(),ftol=1e-08,fatol=1e-300,maxfev=1000,fnorm=None,callback=None,disp=False,M=10,eta_strategy=None,sigma_eps=1e-10,sigma_0=1.0,line_search='cruz',**unknown_options)
scipy.optimize._spectral._wrap_func(func,x0,fmerit,nfev_list,maxfev,args=())
scipy.optimize._spectral._wrap_result(result,is_complex,shape=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/optimize.py----------------------------------------
scipy.optimize.optimize.__dir__()
scipy.optimize.optimize.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_nnls.py----------------------------------------
A:scipy.optimize._nnls.(A, b)->map(asarray_chkfinite, (A, b))
A:scipy.optimize._nnls.w->zeros((n,), dtype=double)
A:scipy.optimize._nnls.zz->zeros((m,), dtype=double)
A:scipy.optimize._nnls.index->zeros((n,), dtype=int)
A:scipy.optimize._nnls.(x, rnorm, mode)->__nnls.nnls(A, m, n, b, w, zz, index, maxiter)
scipy.optimize._nnls.nnls(A,b,maxiter=None)
scipy.optimize.nnls(A,b,maxiter=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/cobyla.py----------------------------------------
scipy.optimize.cobyla.__dir__()
scipy.optimize.cobyla.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_root.py----------------------------------------
A:scipy.optimize._root.meth->method.lower()
A:scipy.optimize._root.fun->MemoizeJac(fun)
A:scipy.optimize._root.options->dict(options)
A:scipy.optimize._root.sol->OptimizeResult(x=x)
A:scipy.optimize._root.(x, cov_x, info, msg, ier)->leastsq(fun, x0, args=args, Dfun=jac, full_output=True, col_deriv=col_deriv, xtol=xtol, ftol=ftol, gtol=gtol, maxfev=maxiter, epsfcn=eps, factor=factor, diag=diag)
A:scipy.optimize._root.jac_options->dict()
A:scipy.optimize._root.(x, info)->nonlin.nonlin_solve(f, x0, jacobian=jacobian(**jac_options), iter=nit, verbose=verbose, maxiter=maxiter, f_tol=f_tol, f_rtol=f_rtol, x_tol=x_tol, x_rtol=x_rtol, tol_norm=tol_norm, line_search=line_search, callback=_callback, full_output=True, raise_exception=False)
scipy.optimize._root._root_anderson_doc()
scipy.optimize._root._root_broyden1_doc()
scipy.optimize._root._root_broyden2_doc()
scipy.optimize._root._root_diagbroyden_doc()
scipy.optimize._root._root_excitingmixing_doc()
scipy.optimize._root._root_krylov_doc()
scipy.optimize._root._root_leastsq(fun,x0,args=(),jac=None,col_deriv=0,xtol=1.49012e-08,ftol=1.49012e-08,gtol=0.0,maxiter=0,eps=0.0,factor=100,diag=None,**unknown_options)
scipy.optimize._root._root_linearmixing_doc()
scipy.optimize._root._root_nonlin_solve(fun,x0,args=(),jac=None,_callback=None,_method=None,nit=None,disp=False,maxiter=None,ftol=None,fatol=None,xtol=None,xatol=None,tol_norm=None,line_search='armijo',jac_options=None,**unknown_options)
scipy.optimize._root._warn_jac_unused(jac,method)
scipy.optimize._root.root(fun,x0,args=(),method='hybr',jac=None,tol=None,callback=None,options=None)
scipy.optimize._root_anderson_doc()
scipy.optimize._root_broyden1_doc()
scipy.optimize._root_broyden2_doc()
scipy.optimize._root_diagbroyden_doc()
scipy.optimize._root_excitingmixing_doc()
scipy.optimize._root_krylov_doc()
scipy.optimize._root_leastsq(fun,x0,args=(),jac=None,col_deriv=0,xtol=1.49012e-08,ftol=1.49012e-08,gtol=0.0,maxiter=0,eps=0.0,factor=100,diag=None,**unknown_options)
scipy.optimize._root_linearmixing_doc()
scipy.optimize._root_nonlin_solve(fun,x0,args=(),jac=None,_callback=None,_method=None,nit=None,disp=False,maxiter=None,ftol=None,fatol=None,xtol=None,xatol=None,tol_norm=None,line_search='armijo',jac_options=None,**unknown_options)
scipy.optimize._warn_jac_unused(jac,method)
scipy.optimize.root(fun,x0,args=(),method='hybr',jac=None,tol=None,callback=None,options=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/slsqp.py----------------------------------------
scipy.optimize.slsqp.__dir__()
scipy.optimize.slsqp.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/nonlin.py----------------------------------------
scipy.optimize.nonlin.__dir__()
scipy.optimize.nonlin.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/linesearch.py----------------------------------------
scipy.optimize.linesearch.__dir__()
scipy.optimize.linesearch.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_root_scalar.py----------------------------------------
A:scipy.optimize._root_scalar.fg->self.fun(x, *args)
A:scipy.optimize._root_scalar.f->MemoizeDer(f)
A:scipy.optimize._root_scalar.v->locals().get(k)
A:scipy.optimize._root_scalar.meth->method.lower()
A:scipy.optimize._root_scalar.methodc->getattr(optzeros, map2underlying.get(meth, meth))
A:scipy.optimize._root_scalar.(r, sol)->methodc(f, x0, args=args, fprime=fprime, fprime2=fprime2, **kwargs)
A:scipy.optimize._root_scalar.kwargs['tol']->kwargs.pop('xtol')
scipy.optimize.MemoizeDer(self,fun)
scipy.optimize.MemoizeDer.fprime(self,x,*args)
scipy.optimize.MemoizeDer.fprime2(self,x,*args)
scipy.optimize.MemoizeDer.ncalls(self)
scipy.optimize._root_scalar.MemoizeDer(self,fun)
scipy.optimize._root_scalar.MemoizeDer.__init__(self,fun)
scipy.optimize._root_scalar.MemoizeDer.fprime(self,x,*args)
scipy.optimize._root_scalar.MemoizeDer.fprime2(self,x,*args)
scipy.optimize._root_scalar.MemoizeDer.ncalls(self)
scipy.optimize._root_scalar._root_scalar_bisect_doc()
scipy.optimize._root_scalar._root_scalar_brenth_doc()
scipy.optimize._root_scalar._root_scalar_brentq_doc()
scipy.optimize._root_scalar._root_scalar_halley_doc()
scipy.optimize._root_scalar._root_scalar_newton_doc()
scipy.optimize._root_scalar._root_scalar_ridder_doc()
scipy.optimize._root_scalar._root_scalar_secant_doc()
scipy.optimize._root_scalar._root_scalar_toms748_doc()
scipy.optimize._root_scalar.root_scalar(f,args=(),method=None,bracket=None,fprime=None,fprime2=None,x0=None,x1=None,xtol=None,rtol=None,maxiter=None,options=None)
scipy.optimize._root_scalar_bisect_doc()
scipy.optimize._root_scalar_brenth_doc()
scipy.optimize._root_scalar_brentq_doc()
scipy.optimize._root_scalar_halley_doc()
scipy.optimize._root_scalar_newton_doc()
scipy.optimize._root_scalar_ridder_doc()
scipy.optimize._root_scalar_secant_doc()
scipy.optimize._root_scalar_toms748_doc()
scipy.optimize.root_scalar(f,args=(),method=None,bracket=None,fprime=None,fprime2=None,x0=None,x1=None,xtol=None,rtol=None,maxiter=None,options=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_linprog_highs.py----------------------------------------
A:scipy.optimize._linprog_highs.(scipy_status, scipy_message)->scipy_statuses_messages.get(highs_status, unrecognized)
A:scipy.optimize._linprog_highs.infs->numpy.isinf(x)
A:scipy.optimize._linprog_highs.sig->inspect.signature(_linprog_highs)
A:scipy.optimize._linprog_highs.simplex_dual_edge_weight_strategy_enum->_convert_to_highs_enum(simplex_dual_edge_weight_strategy, 'simplex_dual_edge_weight_strategy', choices={'dantzig': HIGHS_SIMPLEX_EDGE_WEIGHT_STRATEGY_DANTZIG, 'devex': HIGHS_SIMPLEX_EDGE_WEIGHT_STRATEGY_DEVEX, 'steepest-devex': HIGHS_SIMPLEX_EDGE_WEIGHT_STRATEGY_CHOOSE, 'steepest': HIGHS_SIMPLEX_EDGE_WEIGHT_STRATEGY_STEEPEST_EDGE, None: None})
A:scipy.optimize._linprog_highs.(lb, ub)->bounds.T.copy()
A:scipy.optimize._linprog_highs.lhs->_replace_inf(lhs)
A:scipy.optimize._linprog_highs.rhs->_replace_inf(rhs)
A:scipy.optimize._linprog_highs.A->csc_matrix(A)
A:scipy.optimize._linprog_highs.lb->_replace_inf(lb)
A:scipy.optimize._linprog_highs.ub->_replace_inf(ub)
A:scipy.optimize._linprog_highs.integrality->numpy.array(integrality)
A:scipy.optimize._linprog_highs.res->_highs_wrapper(c, A.indptr, A.indices, A.data, lhs, rhs, lb, ub, integrality.astype(np.uint8), options)
A:scipy.optimize._linprog_highs.con->numpy.array(slack[len(b_ub):])
A:scipy.optimize._linprog_highs.slack->numpy.array(slack[:len(b_ub)])
A:scipy.optimize._linprog_highs.marg_ineqlin->numpy.array(lamda[:len(b_ub)])
A:scipy.optimize._linprog_highs.marg_eqlin->numpy.array(lamda[len(b_ub):])
A:scipy.optimize._linprog_highs.marg_upper->numpy.array(res['marg_bnds'][1, :])
A:scipy.optimize._linprog_highs.marg_lower->numpy.array(res['marg_bnds'][0, :])
A:scipy.optimize._linprog_highs.highs_status->_highs_wrapper(c, A.indptr, A.indices, A.data, lhs, rhs, lb, ub, integrality.astype(np.uint8), options).get('status', None)
A:scipy.optimize._linprog_highs.highs_message->_highs_wrapper(c, A.indptr, A.indices, A.data, lhs, rhs, lb, ub, integrality.astype(np.uint8), options).get('message', None)
A:scipy.optimize._linprog_highs.(status, message)->_highs_to_scipy_status_message(highs_status, highs_message)
scipy.optimize._linprog_highs._convert_to_highs_enum(option,option_str,choices)
scipy.optimize._linprog_highs._highs_to_scipy_status_message(highs_status,highs_message)
scipy.optimize._linprog_highs._linprog_highs(lp,solver,time_limit=None,presolve=True,disp=False,maxiter=None,dual_feasibility_tolerance=None,primal_feasibility_tolerance=None,ipm_optimality_tolerance=None,simplex_dual_edge_weight_strategy=None,mip_rel_gap=None,mip_max_nodes=None,**unknown_options)
scipy.optimize._linprog_highs._replace_inf(x)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_linprog_util.py----------------------------------------
A:scipy.optimize._linprog_util._LPProblem->namedtuple('_LPProblem', 'c A_ub b_ub A_eq b_eq bounds x0 integrality')
A:scipy.optimize._linprog_util._sparse_presolve->options.pop('_sparse_presolve', False)
A:scipy.optimize._linprog_util.A_eq->scipy.sparse.csr_matrix(A_eq)
A:scipy.optimize._linprog_util.A_ub->vstack((A_ub, np.zeros(shape)))
A:scipy.optimize._linprog_util.sparse->options.get('sparse', False)
A:scipy.optimize._linprog_util.b->b.ravel().ravel()
A:scipy.optimize._linprog_util.c->numpy.concatenate((c, np.zeros(n_free)))
A:scipy.optimize._linprog_util.n_x->len(c)
A:scipy.optimize._linprog_util.b_ub->numpy.concatenate((b_ub, np.zeros(n_bounds)))
A:scipy.optimize._linprog_util.b_eq->numpy.array([])
A:scipy.optimize._linprog_util.x0->numpy.concatenate((x0, np.zeros(n_free)))
A:scipy.optimize._linprog_util.bounds_clean->numpy.zeros((n_x, 2), dtype=float)
A:scipy.optimize._linprog_util.bounds_conv->numpy.atleast_2d(np.array(bounds, dtype=float))
A:scipy.optimize._linprog_util.bounds_flat->numpy.atleast_2d(np.array(bounds, dtype=float)).flatten()
A:scipy.optimize._linprog_util.i_none->numpy.isnan(bounds_clean[:, 1])
A:scipy.optimize._linprog_util.x->rev(x)
A:scipy.optimize._linprog_util.lb->bounds[:, 0].copy()
A:scipy.optimize._linprog_util.ub->bounds[:, 1].copy()
A:scipy.optimize._linprog_util.zero_row->numpy.array(np.sum(A_ub != 0, axis=1) == 0).flatten()
A:scipy.optimize._linprog_util.A->A.tocsc().tocsc()
A:scipy.optimize._linprog_util.zero_col->numpy.array(np.sum(A != 0, axis=0) == 0).flatten()
A:scipy.optimize._linprog_util.singleton_row->numpy.array(np.sum(A_ub != 0, axis=1) == 1).flatten()
A:scipy.optimize._linprog_util.i_nf->numpy.logical_not(i_f)
A:scipy.optimize._linprog_util.i->numpy.flatnonzero(i_f)
A:scipy.optimize._linprog_util.N->len(i)
A:scipy.optimize._linprog_util.index_offset->numpy.arange(N)
A:scipy.optimize._linprog_util.x_rev->numpy.insert(x_mod.astype(float), insert_indices, x_undo)
A:scipy.optimize._linprog_util.bounds->numpy.array(bounds, copy=True)
A:scipy.optimize._linprog_util.rr_res->_remove_redundancy_id(A_eq, b_eq, rank)
A:scipy.optimize._linprog_util.rank->numpy.linalg.matrix_rank(A_eq)
A:scipy.optimize._linprog_util.rr_method->rr_method.lower().lower()
A:scipy.optimize._linprog_util.(solver_options, A_ub, A_eq)->_check_sparse_inputs(solver_options, meth, lp.A_ub, lp.A_eq)
A:scipy.optimize._linprog_util.lp->_clean_inputs(lp._replace(A_ub=A_ub, A_eq=A_eq))
A:scipy.optimize._linprog_util.lb_none->numpy.equal(lbs, -np.inf)
A:scipy.optimize._linprog_util.ub_none->numpy.equal(ubs, np.inf)
A:scipy.optimize._linprog_util.lb_some->numpy.logical_not(lb_none)
A:scipy.optimize._linprog_util.ub_some->numpy.logical_not(ub_none)
A:scipy.optimize._linprog_util.l_nolb_someub->numpy.logical_and(lb_none, ub_some)
A:scipy.optimize._linprog_util.(i_newub,)->numpy.logical_not(ub_none).nonzero()
A:scipy.optimize._linprog_util.n_bounds->len(i_newub)
A:scipy.optimize._linprog_util.A1->hstack((A1[:, :n_ub], -A1[:, i_free]))
A:scipy.optimize._linprog_util.l_free->numpy.logical_and(lb_none, ub_none)
A:scipy.optimize._linprog_util.n_free->len(i_free)
A:scipy.optimize._linprog_util.A2->vstack([eye(A_ub.shape[0]), zeros((A_eq.shape[0], A_ub.shape[0]))])
A:scipy.optimize._linprog_util.lb_shift->lbs[lb_some].astype(float)
A:scipy.optimize._linprog_util.R->R.toarray().flatten().toarray().flatten()
A:scipy.optimize._linprog_util.C->C.toarray().flatten().toarray().flatten()
A:scipy.optimize._linprog_util.n->len(x)
A:scipy.optimize._linprog_util.fun->rev(x).dot(c)
scipy.optimize._linprog_util._autoscale(A,b,c,x0)
scipy.optimize._linprog_util._check_result(x,fun,status,slack,con,bounds,tol,message)
scipy.optimize._linprog_util._check_sparse_inputs(options,meth,A_ub,A_eq)
scipy.optimize._linprog_util._clean_inputs(lp)
scipy.optimize._linprog_util._display_summary(message,status,fun,iteration)
scipy.optimize._linprog_util._format_A_constraints(A,n_x,sparse_lhs=False)
scipy.optimize._linprog_util._format_b_constraints(b)
scipy.optimize._linprog_util._get_Abc(lp,c0)
scipy.optimize._linprog_util._parse_linprog(lp,options,meth)
scipy.optimize._linprog_util._postsolve(x,postsolve_args,complete=False)
scipy.optimize._linprog_util._presolve(lp,rr,rr_method,tol=1e-09)
scipy.optimize._linprog_util._round_to_power_of_two(x)
scipy.optimize._linprog_util._unscale(x,C,b_scale)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_linprog_rs.py----------------------------------------
A:scipy.optimize._linprog_rs.(A, b, c, basis, x, status)->_generate_auxiliary_problem(A, b, x0, tol)
A:scipy.optimize._linprog_rs.residual->numpy.zeros(n_aux + n).dot(x)
A:scipy.optimize._linprog_rs.(x, basis, status, iter_k)->_phase_two(c, A, x, basis, callback, postsolve_args, maxiter, tol, disp, maxupdate, mast, pivot, iter_k, phase_one_n)
A:scipy.optimize._linprog_rs.keep_rows->numpy.ones(m, dtype=bool)
A:scipy.optimize._linprog_rs.basis_finder->numpy.abs(solve(B, A))
A:scipy.optimize._linprog_rs.pertinent_row->numpy.argmax(basis_finder[:, basis_column])
A:scipy.optimize._linprog_rs.eligible_columns->numpy.ones(n, dtype=bool)
A:scipy.optimize._linprog_rs.index->numpy.argmax(basis_finder[:, :n][pertinent_row, eligible_columns])
A:scipy.optimize._linprog_rs.a->numpy.arange(n)
A:scipy.optimize._linprog_rs.bl->numpy.zeros(len(a), dtype=bool)
A:scipy.optimize._linprog_rs.B->LU(A, b)
A:scipy.optimize._linprog_rs.rank->numpy.linalg.matrix_rank(B)
A:scipy.optimize._linprog_rs.x->numpy.concatenate((x, np.zeros(n_aux)))
A:scipy.optimize._linprog_rs.nonzero_constraints->numpy.arange(m)
A:scipy.optimize._linprog_rs.c->numpy.zeros(n_aux + n)
A:scipy.optimize._linprog_rs.basis->_get_more_basis_columns(A, basis)
A:scipy.optimize._linprog_rs.(cols, rows)->_select_singleton_columns(A, r)
A:scipy.optimize._linprog_rs.i_tofix->numpy.isin(rows, nonzero_constraints)
A:scipy.optimize._linprog_rs.i_notinbasis->numpy.logical_not(np.isin(cols, basis))
A:scipy.optimize._linprog_rs.i_fix_without_aux->numpy.logical_and(i_tofix, i_notinbasis)
A:scipy.optimize._linprog_rs.n_aux->len(arows)
A:scipy.optimize._linprog_rs.basis_ng->numpy.concatenate((cols, acols))
A:scipy.optimize._linprog_rs.basis_ng_rows->numpy.concatenate((rows, arows))
A:scipy.optimize._linprog_rs.A->numpy.hstack((A, np.zeros((m, n_aux))))
A:scipy.optimize._linprog_rs.row_indices->numpy.zeros(len(column_indices), dtype=int)
A:scipy.optimize._linprog_rs.(nonzero_rows, nonzero_columns)->numpy.nonzero(columns)
A:scipy.optimize._linprog_rs.(unique_row_indices, first_columns)->numpy.unique(row_indices, return_index=True)
A:scipy.optimize._linprog_rs.slack->numpy.min(slack)
A:scipy.optimize._linprog_rs.(x_o, fun, slack, con)->_postsolve(x_postsolve, postsolve_args)
A:scipy.optimize._linprog_rs.res->OptimizeResult({'x': x_o, 'fun': fun, 'slack': slack, 'con': con, 'nit': iteration, 'phase': phase, 'complete': False, 'status': status, 'message': '', 'success': False})
A:scipy.optimize._linprog_rs.ab->numpy.arange(m)
A:scipy.optimize._linprog_rs.v->LU(A, b).solve(cb, transposed=True)
A:scipy.optimize._linprog_rs.j->_select_enter_pivot(c_hat, bl, a, rule=pivot, tol=tol)
A:scipy.optimize._linprog_rs.u->LU(A, b).solve(A[:, j])
A:scipy.optimize._linprog_rs.l->numpy.argmin(th)
A:scipy.optimize._linprog_rs.(x, basis, A, b, residual, status, iteration)->_phase_one(A, b, x0, callback, postsolve_args, maxiter, tol, disp, maxupdate, mast, pivot)
A:scipy.optimize._linprog_rs.(x, basis, status, iteration)->_phase_two(c, A, x, basis, callback, postsolve_args, maxiter, tol, disp, maxupdate, mast, pivot, iteration)
scipy.optimize._linprog_rs._display_and_callback(phase_one_n,x,postsolve_args,status,iteration,disp,callback)
scipy.optimize._linprog_rs._display_iter(phase,iteration,slack,con,fun)
scipy.optimize._linprog_rs._find_nonzero_rows(A,tol)
scipy.optimize._linprog_rs._generate_auxiliary_problem(A,b,x0,tol)
scipy.optimize._linprog_rs._get_more_basis_columns(A,basis)
scipy.optimize._linprog_rs._linprog_rs(c,c0,A,b,x0,callback,postsolve_args,maxiter=5000,tol=1e-12,disp=False,maxupdate=10,mast=False,pivot='mrc',**unknown_options)
scipy.optimize._linprog_rs._phase_one(A,b,x0,callback,postsolve_args,maxiter,tol,disp,maxupdate,mast,pivot)
scipy.optimize._linprog_rs._phase_two(c,A,x,b,callback,postsolve_args,maxiter,tol,disp,maxupdate,mast,pivot,iteration=0,phase_one_n=None)
scipy.optimize._linprog_rs._select_enter_pivot(c_hat,bl,a,rule='bland',tol=1e-12)
scipy.optimize._linprog_rs._select_singleton_columns(A,b)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_differentialevolution.py----------------------------------------
A:scipy.optimize._differentialevolution.ret->solver.solve()
A:scipy.optimize._differentialevolution.self.mutation_func->getattr(self, self._exponential[strategy])
A:scipy.optimize._differentialevolution.self._mapwrapper->MapWrapper(workers)
A:scipy.optimize._differentialevolution.self.func->_FunctionWrapper(func, args)
A:scipy.optimize._differentialevolution.self.__scale_arg2->numpy.fabs(self.limits[0] - self.limits[1])
A:scipy.optimize._differentialevolution.self.parameter_count->numpy.size(self.limits, 1)
A:scipy.optimize._differentialevolution.self.random_number_generator->check_random_state(seed)
A:scipy.optimize._differentialevolution.integrality->numpy.asarray(integrality, bool)
A:scipy.optimize._differentialevolution.(lb, ub)->numpy.copy(self.limits)
A:scipy.optimize._differentialevolution.lb->numpy.resize(lb, m)
A:scipy.optimize._differentialevolution.ub->numpy.resize(ub, m)
A:scipy.optimize._differentialevolution.nlb->numpy.nextafter(lb[integrality] - 0.5, np.inf)
A:scipy.optimize._differentialevolution.nub->numpy.nextafter(ub[integrality] + 0.5, -np.inf)
A:scipy.optimize._differentialevolution.self.num_population_members->numpy.size(self.population, 0)
A:scipy.optimize._differentialevolution.n_s->int(2 ** np.ceil(np.log2(self.num_population_members)))
A:scipy.optimize._differentialevolution.x0_scaled->self._unscale_parameters(np.asarray(x0))
A:scipy.optimize._differentialevolution.self.total_constraints->numpy.sum([c.num_constr for c in self._wrapped_constraints])
A:scipy.optimize._differentialevolution.self.constraint_violation->numpy.where(loc[:, np.newaxis], cv, self.constraint_violation)
A:scipy.optimize._differentialevolution.self.feasible->numpy.where(loc, feasible, self.feasible)
A:scipy.optimize._differentialevolution.self.population->numpy.where(loc[:, np.newaxis], trial_pop, self.population)
A:scipy.optimize._differentialevolution.order->rng.permutation(range(self.num_population_members))
A:scipy.optimize._differentialevolution.self.population_energies->numpy.where(loc, trial_energies, self.population_energies)
A:scipy.optimize._differentialevolution.sampler->scipy.stats.qmc.Halton(d=self.parameter_count, seed=rng)
A:scipy.optimize._differentialevolution.popn->numpy.asfarray(init)
A:scipy.optimize._differentialevolution.(self.feasible, self.constraint_violation)->self._calculate_population_feasibilities(self.population)
A:scipy.optimize._differentialevolution.self.population_energies[self.feasible]->self._calculate_population_energies(self.population[self.feasible])
A:scipy.optimize._differentialevolution.warning_flag->bool(self.callback(self.x, convergence=c))
A:scipy.optimize._differentialevolution.DE_result->OptimizeResult(x=self.x, fun=self.population_energies[0], nfev=self._nfev, nit=nit, message=status_message, success=warning_flag is not True)
A:scipy.optimize._differentialevolution.constr_violation->self._constraint_violation_fn(DE_result.x)
A:scipy.optimize._differentialevolution.result->minimize(self.func, np.copy(DE_result.x), method=polish_method, bounds=self.limits.T, constraints=self.constraints)
A:scipy.optimize._differentialevolution.self.population[0]->self._unscale_parameters(result.x)
A:scipy.optimize._differentialevolution.DE_result.constr_violation->numpy.max(np.concatenate(DE_result.constr))
A:scipy.optimize._differentialevolution.num_members->numpy.size(population, 0)
A:scipy.optimize._differentialevolution.S->min(num_members, self.maxfun - self._nfev)
A:scipy.optimize._differentialevolution.energies->numpy.full(num_members, np.inf)
A:scipy.optimize._differentialevolution.parameters_pop->self._scale_parameters(population)
A:scipy.optimize._differentialevolution.calc_energies->numpy.squeeze(calc_energies)
A:scipy.optimize._differentialevolution.idx->numpy.arange(self.num_population_members)
A:scipy.optimize._differentialevolution.idx_t->numpy.argmin(self.population_energies[feasible_solutions])
A:scipy.optimize._differentialevolution.l->numpy.argmin(np.sum(self.constraint_violation, axis=1))
A:scipy.optimize._differentialevolution._out->numpy.zeros((S, self.total_constraints))
A:scipy.optimize._differentialevolution.c->numpy.reshape(c, (S, con.num_constr))
A:scipy.optimize._differentialevolution.constraint_violation->numpy.array([self._constraint_violation_fn(x) for x in parameters_pop])
A:scipy.optimize._differentialevolution.self.scale->self.random_number_generator.uniform(self.dither[0], self.dither[1])
A:scipy.optimize._differentialevolution.trial->numpy.where(crossovers, bprime, trial)
A:scipy.optimize._differentialevolution.parameters->self._scale_parameters(trial)
A:scipy.optimize._differentialevolution.cv->numpy.atleast_2d([0.0])
A:scipy.optimize._differentialevolution.energy->self.func(parameters)
A:scipy.optimize._differentialevolution.self.population_energies[candidate]->numpy.squeeze(energy)
A:scipy.optimize._differentialevolution.trial_pop->numpy.array([self._mutate(i) for i in range(self.num_population_members)])
A:scipy.optimize._differentialevolution.(feasible, cv)->self._calculate_population_feasibilities(trial_pop)
A:scipy.optimize._differentialevolution.trial_energies->numpy.full(self.num_population_members, np.inf)
A:scipy.optimize._differentialevolution.trial_energies[feasible]->self._calculate_population_energies(trial_pop[feasible])
A:scipy.optimize._differentialevolution.loc->numpy.array(loc)
A:scipy.optimize._differentialevolution.i->numpy.broadcast_to(self.integrality, scaled.shape)
A:scipy.optimize._differentialevolution.scaled[i]->numpy.round(scaled[i])
A:scipy.optimize._differentialevolution.mask->numpy.where((trial > 1) | (trial < 0))
A:scipy.optimize._differentialevolution.trial[mask]->self.random_number_generator.uniform(size=mask[0].shape)
A:scipy.optimize._differentialevolution.fill_point->rng.choice(self.parameter_count)
A:scipy.optimize._differentialevolution.bprime->numpy.copy(self.population[r0])
A:scipy.optimize._differentialevolution.crossovers->rng.uniform(size=self.parameter_count)
A:scipy.optimize._differentialevolution.idxs->list(range(self.num_population_members))
A:scipy.optimize._differentialevolution.x->numpy.asarray(x)
A:scipy.optimize._differentialevolution.A->numpy.atleast_2d(constraint.A)
A:scipy.optimize._differentialevolution.x0->numpy.asarray(x0)
A:scipy.optimize._differentialevolution.f0->fun(x0)
A:scipy.optimize._differentialevolution.ev->self.fun(np.asarray(x))
A:scipy.optimize._differentialevolution.excess_lb->numpy.maximum(self.bounds[0] - ev.T, 0)
A:scipy.optimize._differentialevolution.excess_ub->numpy.maximum(ev.T - self.bounds[1], 0)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver(self,func,bounds,args=(),strategy='best1bin',maxiter=1000,popsize=15,tol=0.01,mutation=(0.5,1),recombination=0.7,seed=None,maxfun=np.inf,callback=None,disp=False,polish=True,init='latinhypercube',atol=0,updating='immediate',workers=1,constraints=(),x0=None,*,integrality=None,vectorized=False)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver.__enter__(self)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver.__exit__(self,*args)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver.__init__(self,func,bounds,args=(),strategy='best1bin',maxiter=1000,popsize=15,tol=0.01,mutation=(0.5,1),recombination=0.7,seed=None,maxfun=np.inf,callback=None,disp=False,polish=True,init='latinhypercube',atol=0,updating='immediate',workers=1,constraints=(),x0=None,*,integrality=None,vectorized=False)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver.__iter__(self)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver.__next__(self)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver._accept_trial(self,energy_trial,feasible_trial,cv_trial,energy_orig,feasible_orig,cv_orig)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver._best1(self,samples)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver._best2(self,samples)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver._calculate_population_energies(self,population)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver._calculate_population_feasibilities(self,population)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver._constraint_violation_fn(self,x)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver._currenttobest1(self,candidate,samples)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver._ensure_constraint(self,trial)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver._mutate(self,candidate)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver._promote_lowest_energy(self)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver._rand1(self,samples)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver._rand2(self,samples)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver._randtobest1(self,samples)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver._scale_parameters(self,trial)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver._select_samples(self,candidate,number_samples)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver._unscale_parameters(self,parameters)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver.converged(self)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver.convergence(self)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver.init_population_array(self,init)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver.init_population_lhs(self)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver.init_population_qmc(self,qmc_engine)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver.init_population_random(self)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver.solve(self)
scipy.optimize._differentialevolution.DifferentialEvolutionSolver.x(self)
scipy.optimize._differentialevolution._ConstraintWrapper(self,constraint,x0)
scipy.optimize._differentialevolution._ConstraintWrapper.__init__(self,constraint,x0)
scipy.optimize._differentialevolution._ConstraintWrapper.violation(self,x)
scipy.optimize._differentialevolution.differential_evolution(func,bounds,args=(),strategy='best1bin',maxiter=1000,popsize=15,tol=0.01,mutation=(0.5,1),recombination=0.7,seed=None,callback=None,disp=False,polish=True,init='latinhypercube',atol=0,updating='immediate',workers=1,constraints=(),x0=None,*,integrality=None,vectorized=False)
scipy.optimize.differential_evolution(func,bounds,args=(),strategy='best1bin',maxiter=1000,popsize=15,tol=0.01,mutation=(0.5,1),recombination=0.7,seed=None,callback=None,disp=False,polish=True,init='latinhypercube',atol=0,updating='immediate',workers=1,constraints=(),x0=None,*,integrality=None,vectorized=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_constraints.py----------------------------------------
A:scipy.optimize._constraints.self.lb->numpy.atleast_1d(lb)
A:scipy.optimize._constraints.self.ub->numpy.atleast_1d(ub)
A:scipy.optimize._constraints.self.keep_feasible->numpy.atleast_1d(keep_feasible).astype(bool)
A:scipy.optimize._constraints.self.A->numpy.atleast_2d(A).astype(np.float64)
A:scipy.optimize._constraints.res->numpy.broadcast_arrays(self.lb, self.ub, self.keep_feasible)
A:scipy.optimize._constraints.fun->IdentityVectorFunction(x0, sparse_jacobian)
A:scipy.optimize._constraints.lb->numpy.array([float(_arr_to_scalar(x)) if x is not None else -np.inf for x in lb])
A:scipy.optimize._constraints.ub->numpy.array([float(_arr_to_scalar(x)) if x is not None else np.inf for x in ub])
A:scipy.optimize._constraints.keep_feasible->numpy.resize(keep_feasible, n_vars)
A:scipy.optimize._constraints.ev->self.fun.fun(np.asarray(x))
A:scipy.optimize._constraints.excess_lb->numpy.maximum(self.bounds[0] - ev, 0)
A:scipy.optimize._constraints.excess_ub->numpy.maximum(ev - self.bounds[1], 0)
A:scipy.optimize._constraints.(lb, ub)->zip(*bounds)
A:scipy.optimize._constraints.strict_lb->numpy.resize(lb, n_vars).astype(float)
A:scipy.optimize._constraints.strict_ub->numpy.resize(ub, n_vars).astype(float)
A:scipy.optimize._constraints.A->A.toarray().toarray()
A:scipy.optimize._constraints.pcon->PreparedConstraint(con, x0)
A:scipy.optimize._constraints.i_bound_below->numpy.logical_xor(lb != -np.inf, i_eq)
A:scipy.optimize._constraints.i_bound_above->numpy.logical_xor(ub != np.inf, i_eq)
A:scipy.optimize._constraints.i_unbounded->numpy.logical_and(lb == -np.inf, ub == np.inf)
A:scipy.optimize._constraints.y->numpy.zeros(n_bound_below + n_bound_above)
A:scipy.optimize._constraints.dy->numpy.zeros((n_bound_below + n_bound_above, len(x0)))
A:scipy.optimize._constraints.n_bound_below->numpy.sum(i_bound_below)
A:scipy.optimize._constraints.n_bound_above->numpy.sum(i_bound_above)
A:scipy.optimize._constraints.y_all->numpy.array(fun(x)).flatten()
A:scipy.optimize._constraints.dy_all->numpy.atleast_2d(dy_all)
A:scipy.optimize._constraints.ctype->con['type'].lower()
scipy.optimize.Bounds(self,lb=-np.inf,ub=np.inf,keep_feasible=False)
scipy.optimize.Bounds.__repr__(self)
scipy.optimize.Bounds._input_validation(self)
scipy.optimize.Bounds.residual(self,x)
scipy.optimize.LinearConstraint(self,A,lb=-np.inf,ub=np.inf,keep_feasible=False)
scipy.optimize.LinearConstraint._input_validation(self)
scipy.optimize.LinearConstraint.residual(self,x)
scipy.optimize.NonlinearConstraint(self,fun,lb,ub,jac='2-point',hess=BFGS(),keep_feasible=False,finite_diff_rel_step=None,finite_diff_jac_sparsity=None)
scipy.optimize._constraints.Bounds(self,lb=-np.inf,ub=np.inf,keep_feasible=False)
scipy.optimize._constraints.Bounds.__init__(self,lb=-np.inf,ub=np.inf,keep_feasible=False)
scipy.optimize._constraints.Bounds.__repr__(self)
scipy.optimize._constraints.Bounds._input_validation(self)
scipy.optimize._constraints.Bounds.residual(self,x)
scipy.optimize._constraints.LinearConstraint(self,A,lb=-np.inf,ub=np.inf,keep_feasible=False)
scipy.optimize._constraints.LinearConstraint.__init__(self,A,lb=-np.inf,ub=np.inf,keep_feasible=False)
scipy.optimize._constraints.LinearConstraint._input_validation(self)
scipy.optimize._constraints.LinearConstraint.residual(self,x)
scipy.optimize._constraints.NonlinearConstraint(self,fun,lb,ub,jac='2-point',hess=BFGS(),keep_feasible=False,finite_diff_rel_step=None,finite_diff_jac_sparsity=None)
scipy.optimize._constraints.NonlinearConstraint.__init__(self,fun,lb,ub,jac='2-point',hess=BFGS(),keep_feasible=False,finite_diff_rel_step=None,finite_diff_jac_sparsity=None)
scipy.optimize._constraints.PreparedConstraint(self,constraint,x0,sparse_jacobian=None,finite_diff_bounds=(-np.inf,np.inf))
scipy.optimize._constraints.PreparedConstraint.__init__(self,constraint,x0,sparse_jacobian=None,finite_diff_bounds=(-np.inf,np.inf))
scipy.optimize._constraints.PreparedConstraint.violation(self,x)
scipy.optimize._constraints._arr_to_scalar(x)
scipy.optimize._constraints.new_bounds_to_old(lb,ub,n)
scipy.optimize._constraints.new_constraint_to_old(con,x0)
scipy.optimize._constraints.old_bound_to_new(bounds)
scipy.optimize._constraints.old_constraint_to_new(ic,con)
scipy.optimize._constraints.strict_bounds(lb,ub,keep_feasible,n_vars)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_tnc.py----------------------------------------
A:scipy.optimize._tnc.fun->MemoizeJac(func)
A:scipy.optimize._tnc.mesg_num->{0: MSG_NONE, 1: MSG_ITER, 2: MSG_INFO, 3: MSG_VERS, 4: MSG_EXIT, 5: MSG_ALL}.get(messages, MSG_ALL)
A:scipy.optimize._tnc.res->_minimize_tnc(fun, x0, args, jac, bounds, callback=callback, **opts)
A:scipy.optimize._tnc.x0->asfarray(x0).flatten()
A:scipy.optimize._tnc.n->len(x0)
A:scipy.optimize._tnc.new_bounds->old_bound_to_new(bounds)
A:scipy.optimize._tnc.messages->{0: MSG_NONE, 1: MSG_ITER, 2: MSG_INFO, 3: MSG_VERS, 4: MSG_EXIT, 5: MSG_ALL}.get(mesg_num, MSG_ALL)
A:scipy.optimize._tnc.sf->_prepare_scalar_function(fun, x0, jac=jac, args=args, epsilon=eps, finite_diff_rel_step=finite_diff_rel_step, bounds=new_bounds)
A:scipy.optimize._tnc.low->zeros(n)
A:scipy.optimize._tnc.up->zeros(n)
A:scipy.optimize._tnc.scale->array([])
A:scipy.optimize._tnc.offset->array([])
A:scipy.optimize._tnc.maxfun->max(100, 10 * len(x0))
A:scipy.optimize._tnc.(rc, nf, nit, x, funv, jacv)->scipy.optimize._moduleTNC.tnc_minimize(func_and_grad, x0, low, up, scale, offset, messages, maxCGit, maxfun, eta, stepmx, accuracy, fmin, ftol, xtol, pgtol, rescale, callback)
A:scipy.optimize._tnc.(funv, jacv)->func_and_grad(x)
scipy.optimize._tnc._minimize_tnc(fun,x0,args=(),jac=None,bounds=None,eps=1e-08,scale=None,offset=None,mesg_num=None,maxCGit=-1,maxiter=None,eta=-1,stepmx=0,accuracy=0,minfev=0,ftol=-1,xtol=-1,gtol=-1,rescale=-1,disp=False,callback=None,finite_diff_rel_step=None,maxfun=None,**unknown_options)
scipy.optimize._tnc.fmin_tnc(func,x0,fprime=None,args=(),approx_grad=0,bounds=None,epsilon=1e-08,scale=None,offset=None,messages=MSG_ALL,maxCGit=-1,maxfun=None,eta=-1,stepmx=0,accuracy=0,fmin=0,ftol=-1,xtol=-1,pgtol=-1,rescale=-1,disp=None,callback=None)
scipy.optimize.fmin_tnc(func,x0,fprime=None,args=(),approx_grad=0,bounds=None,epsilon=1e-08,scale=None,offset=None,messages=MSG_ALL,maxCGit=-1,maxfun=None,eta=-1,stepmx=0,accuracy=0,fmin=0,ftol=-1,xtol=-1,pgtol=-1,rescale=-1,disp=None,callback=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/__init__.py----------------------------------------
A:scipy.optimize.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_tstutils.py----------------------------------------
A:scipy.optimize._tstutils.v->random()
A:scipy.optimize._tstutils.ii->numpy.arange(1, 21)
A:scipy.optimize._tstutils._MAX_EXPABLE->numpy.log(np.finfo(float).max)
A:scipy.optimize._tstutils.tests->subsets.get(collection, [])
scipy.optimize._tstutils._add_a_b(tests)
scipy.optimize._tstutils.aps01_f(x)
scipy.optimize._tstutils.aps01_fp(x)
scipy.optimize._tstutils.aps01_fpp(x)
scipy.optimize._tstutils.aps02_f(x)
scipy.optimize._tstutils.aps02_fp(x)
scipy.optimize._tstutils.aps02_fpp(x)
scipy.optimize._tstutils.aps03_f(x,a,b)
scipy.optimize._tstutils.aps03_fp(x,a,b)
scipy.optimize._tstutils.aps03_fpp(x,a,b)
scipy.optimize._tstutils.aps04_f(x,n,a)
scipy.optimize._tstutils.aps04_fp(x,n,a)
scipy.optimize._tstutils.aps04_fpp(x,n,a)
scipy.optimize._tstutils.aps05_f(x)
scipy.optimize._tstutils.aps05_fp(x)
scipy.optimize._tstutils.aps05_fpp(x)
scipy.optimize._tstutils.aps06_f(x,n)
scipy.optimize._tstutils.aps06_fp(x,n)
scipy.optimize._tstutils.aps06_fpp(x,n)
scipy.optimize._tstutils.aps07_f(x,n)
scipy.optimize._tstutils.aps07_fp(x,n)
scipy.optimize._tstutils.aps07_fpp(x,n)
scipy.optimize._tstutils.aps08_f(x,n)
scipy.optimize._tstutils.aps08_fp(x,n)
scipy.optimize._tstutils.aps08_fpp(x,n)
scipy.optimize._tstutils.aps09_f(x,n)
scipy.optimize._tstutils.aps09_fp(x,n)
scipy.optimize._tstutils.aps09_fpp(x,n)
scipy.optimize._tstutils.aps10_f(x,n)
scipy.optimize._tstutils.aps10_fp(x,n)
scipy.optimize._tstutils.aps10_fpp(x,n)
scipy.optimize._tstutils.aps11_f(x,n)
scipy.optimize._tstutils.aps11_fp(x,n)
scipy.optimize._tstutils.aps11_fpp(x,n)
scipy.optimize._tstutils.aps12_f(x,n)
scipy.optimize._tstutils.aps12_fp(x,n)
scipy.optimize._tstutils.aps12_fpp(x,n)
scipy.optimize._tstutils.aps13_f(x)
scipy.optimize._tstutils.aps13_fp(x)
scipy.optimize._tstutils.aps13_fpp(x)
scipy.optimize._tstutils.aps14_f(x,n)
scipy.optimize._tstutils.aps14_fp(x,n)
scipy.optimize._tstutils.aps14_fpp(x,n)
scipy.optimize._tstutils.aps15_f(x,n)
scipy.optimize._tstutils.aps15_fp(x,n)
scipy.optimize._tstutils.aps15_fpp(x,n)
scipy.optimize._tstutils.cplx01_f(z,n,a)
scipy.optimize._tstutils.cplx01_fp(z,n,a)
scipy.optimize._tstutils.cplx01_fpp(z,n,a)
scipy.optimize._tstutils.cplx02_f(z,a)
scipy.optimize._tstutils.cplx02_fp(z,a)
scipy.optimize._tstutils.cplx02_fpp(z,a)
scipy.optimize._tstutils.f1(x)
scipy.optimize._tstutils.f1_fp(x)
scipy.optimize._tstutils.f1_fpp(x)
scipy.optimize._tstutils.f2(x)
scipy.optimize._tstutils.f2_fp(x)
scipy.optimize._tstutils.f2_fpp(x)
scipy.optimize._tstutils.f3(x)
scipy.optimize._tstutils.f3_fp(x)
scipy.optimize._tstutils.f3_fpp(x)
scipy.optimize._tstutils.f4(x)
scipy.optimize._tstutils.f5(x)
scipy.optimize._tstutils.f6(x)
scipy.optimize._tstutils.get_tests(collection='original',smoothness=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_trustregion.py----------------------------------------
A:scipy.optimize._trustregion.self._f->self._fun(self._x)
A:scipy.optimize._trustregion.self._g->self._jac(self._x)
A:scipy.optimize._trustregion.self._h->self._hess(self._x)
A:scipy.optimize._trustregion.self._g_mag->scipy.linalg.norm(self.jac)
A:scipy.optimize._trustregion.a->numpy.dot(d, d)
A:scipy.optimize._trustregion.sqrt_discriminant->math.sqrt(b * b - 4 * a * c)
A:scipy.optimize._trustregion.x0->numpy.asarray(x0).flatten()
A:scipy.optimize._trustregion.sf->_prepare_scalar_function(fun, x0, jac=jac, hess=hess, args=args)
A:scipy.optimize._trustregion.(nhessp, hessp)->_wrap_function(hessp, args)
A:scipy.optimize._trustregion.m->subproblem(x, fun, jac, hess, hessp)
A:scipy.optimize._trustregion.(p, hits_boundary)->subproblem(x, fun, jac, hess, hessp).solve(trust_radius)
A:scipy.optimize._trustregion.predicted_value->m(p)
A:scipy.optimize._trustregion.m_proposed->subproblem(x_proposed, fun, jac, hess, hessp)
A:scipy.optimize._trustregion.trust_radius->min(2 * trust_radius, max_trust_radius)
A:scipy.optimize._trustregion.result->OptimizeResult(x=x, success=warnflag == 0, status=warnflag, fun=m.fun, jac=m.jac, nfev=sf.nfev, njev=sf.ngev, nhev=sf.nhev + nhessp[0], nit=k, message=status_messages[warnflag])
scipy.optimize._trustregion.BaseQuadraticSubproblem(self,x,fun,jac,hess=None,hessp=None)
scipy.optimize._trustregion.BaseQuadraticSubproblem.__init__(self,x,fun,jac,hess=None,hessp=None)
scipy.optimize._trustregion.BaseQuadraticSubproblem.fun(self)
scipy.optimize._trustregion.BaseQuadraticSubproblem.get_boundaries_intersections(self,z,d,trust_radius)
scipy.optimize._trustregion.BaseQuadraticSubproblem.hess(self)
scipy.optimize._trustregion.BaseQuadraticSubproblem.hessp(self,p)
scipy.optimize._trustregion.BaseQuadraticSubproblem.jac(self)
scipy.optimize._trustregion.BaseQuadraticSubproblem.jac_mag(self)
scipy.optimize._trustregion.BaseQuadraticSubproblem.solve(self,trust_radius)
scipy.optimize._trustregion._minimize_trust_region(fun,x0,args=(),jac=None,hess=None,hessp=None,subproblem=None,initial_trust_radius=1.0,max_trust_radius=1000.0,eta=0.15,gtol=0.0001,maxiter=None,disp=False,return_all=False,callback=None,inexact=True,**unknown_options)
scipy.optimize._trustregion._wrap_function(function,args)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_linprog.py----------------------------------------
A:scipy.optimize._linprog.saved_printoptions->numpy.get_printoptions()
A:scipy.optimize._linprog.meth->method.lower()
A:scipy.optimize._linprog.integrality->numpy.broadcast_to(integrality, np.shape(c))
A:scipy.optimize._linprog.lp->_LPProblem(c, A_ub, b_ub, A_eq, b_eq, bounds, x0, integrality)
A:scipy.optimize._linprog.(lp, solver_options)->_parse_linprog(lp, options, meth)
A:scipy.optimize._linprog.tol->solver_options.get('tol', 1e-09)
A:scipy.optimize._linprog.sol->_linprog_highs(lp, solver=highs_solvers[meth], **solver_options)
A:scipy.optimize._linprog.(sol['status'], sol['message'])->_check_result(sol['x'], sol['fun'], sol['status'], sol['slack'], sol['con'], lp.bounds, tol, sol['message'])
A:scipy.optimize._linprog.lp_o->deepcopy(lp)
A:scipy.optimize._linprog.rr_method->solver_options.pop('rr_method', None)
A:scipy.optimize._linprog.rr->solver_options.pop('rr', True)
A:scipy.optimize._linprog.(lp, c0, x, undo, complete, status, message)->_presolve(lp, rr, rr_method, tol)
A:scipy.optimize._linprog.(A, b, c, c0, x0)->_get_Abc(lp, c0)
A:scipy.optimize._linprog.(A, b, c, x0, C, b_scale)->_autoscale(A, b, c, x0)
A:scipy.optimize._linprog.(x, status, message, iteration)->_linprog_rs(c, c0=c0, A=A, b=b, x0=x0, callback=callback, postsolve_args=postsolve_args, **solver_options)
A:scipy.optimize._linprog.disp->solver_options.get('disp', False)
A:scipy.optimize._linprog.(x, fun, slack, con)->_postsolve(x, postsolve_args, complete)
A:scipy.optimize._linprog.(status, message)->_check_result(x, fun, status, slack, con, lp_o.bounds, tol, message)
scipy.optimize._linprog.linprog(c,A_ub=None,b_ub=None,A_eq=None,b_eq=None,bounds=None,method='highs',callback=None,options=None,x0=None,integrality=None)
scipy.optimize._linprog.linprog_terse_callback(res)
scipy.optimize._linprog.linprog_verbose_callback(res)
scipy.optimize.linprog(c,A_ub=None,b_ub=None,A_eq=None,b_eq=None,bounds=None,method='highs',callback=None,options=None,x0=None,integrality=None)
scipy.optimize.linprog_terse_callback(res)
scipy.optimize.linprog_verbose_callback(res)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_linesearch.py----------------------------------------
A:scipy.optimize._linesearch.gfk->fprime(xk, *args)
A:scipy.optimize._linesearch.gval[0]->fprime(xk + alpha * pk, *args)
A:scipy.optimize._linesearch.derphi0->numpy.dot(gfk, pk)
A:scipy.optimize._linesearch.(stp, fval, old_fval)->scalar_search_wolfe1(phi, derphi, old_fval, old_old_fval, derphi0, c1=c1, c2=c2, amax=amax, amin=amin, xtol=xtol)
A:scipy.optimize._linesearch.phi0->phi(0.0)
A:scipy.optimize._linesearch.alpha1->min(alpha1, amax)
A:scipy.optimize._linesearch.isave->numpy.zeros((2,), np.intc)
A:scipy.optimize._linesearch.dsave->numpy.zeros((13,), float)
A:scipy.optimize._linesearch.(stp, phi1, derphi1, task)->scipy.optimize._minpack2.dcsrch(alpha1, phi1, derphi1, c1, c2, xtol, task, amin, amax, isave, dsave)
A:scipy.optimize._linesearch.phi1->phi(stp)
A:scipy.optimize._linesearch.derphi1->derphi(stp)
A:scipy.optimize._linesearch.(alpha_star, phi_star, old_fval, derphi_star)->scalar_search_wolfe2(phi, derphi, old_fval, old_old_fval, derphi0, c1, c2, amax, extra_condition2, maxiter=maxiter)
A:scipy.optimize._linesearch.phi_a1->phi(alpha1)
A:scipy.optimize._linesearch.(alpha_star, phi_star, derphi_star)->_zoom(alpha1, alpha0, phi_a1, phi_a0, derphi_a1, phi, derphi, phi0, derphi0, c1, c2, extra_condition)
A:scipy.optimize._linesearch.derphi_a1->derphi(alpha1)
A:scipy.optimize._linesearch.alpha2->min(alpha2, amax)
A:scipy.optimize._linesearch.d1->numpy.empty((2, 2))
A:scipy.optimize._linesearch.[A, B]->numpy.dot(d1, np.asarray([fb - fa - C * db, fc - fa - C * dc]).flatten())
A:scipy.optimize._linesearch.a_j->_quadmin(a_lo, phi_lo, derphi_lo, a_hi, phi_hi)
A:scipy.optimize._linesearch.phi_aj->phi(a_j)
A:scipy.optimize._linesearch.derphi_aj->derphi(a_j)
A:scipy.optimize._linesearch.xk->numpy.atleast_1d(xk)
A:scipy.optimize._linesearch.(alpha, phi1)->scalar_search_armijo(phi, phi0, derphi0, c1=c1, alpha0=alpha0)
A:scipy.optimize._linesearch.r->line_search_armijo(f, xk, pk, gfk, old_fval, args=args, c1=c1, alpha0=alpha0)
A:scipy.optimize._linesearch.phi_a0->phi(alpha0)
A:scipy.optimize._linesearch.phi_a2->phi(alpha2)
A:scipy.optimize._linesearch.f_bar->max(prev_fs)
A:scipy.optimize._linesearch.(fp, Fp)->f(xp)
A:scipy.optimize._linesearch.alpha_p->numpy.clip(alpha_tp, tau_min * alpha_p, tau_max * alpha_p)
A:scipy.optimize._linesearch.alpha_m->numpy.clip(alpha_tm, tau_min * alpha_m, tau_max * alpha_m)
scipy.optimize._linesearch.LineSearchWarning(RuntimeWarning)
scipy.optimize._linesearch._cubicmin(a,fa,fpa,b,fb,c,fc)
scipy.optimize._linesearch._nonmonotone_line_search_cheng(f,x_k,d,f_k,C,Q,eta,gamma=0.0001,tau_min=0.1,tau_max=0.5,nu=0.85)
scipy.optimize._linesearch._nonmonotone_line_search_cruz(f,x_k,d,prev_fs,eta,gamma=0.0001,tau_min=0.1,tau_max=0.5)
scipy.optimize._linesearch._quadmin(a,fa,fpa,b,fb)
scipy.optimize._linesearch._zoom(a_lo,a_hi,phi_lo,phi_hi,derphi_lo,phi,derphi,phi0,derphi0,c1,c2,extra_condition)
scipy.optimize._linesearch.line_search_BFGS(f,xk,pk,gfk,old_fval,args=(),c1=0.0001,alpha0=1)
scipy.optimize._linesearch.line_search_armijo(f,xk,pk,gfk,old_fval,args=(),c1=0.0001,alpha0=1)
scipy.optimize._linesearch.line_search_wolfe1(f,fprime,xk,pk,gfk=None,old_fval=None,old_old_fval=None,args=(),c1=0.0001,c2=0.9,amax=50,amin=1e-08,xtol=1e-14)
scipy.optimize._linesearch.line_search_wolfe2(f,myfprime,xk,pk,gfk=None,old_fval=None,old_old_fval=None,args=(),c1=0.0001,c2=0.9,amax=None,extra_condition=None,maxiter=10)
scipy.optimize._linesearch.scalar_search_armijo(phi,phi0,derphi0,c1=0.0001,alpha0=1,amin=0)
scipy.optimize._linesearch.scalar_search_wolfe1(phi,derphi,phi0=None,old_phi0=None,derphi0=None,c1=0.0001,c2=0.9,amax=50,amin=1e-08,xtol=1e-14)
scipy.optimize._linesearch.scalar_search_wolfe2(phi,derphi,phi0=None,old_phi0=None,derphi0=None,c1=0.0001,c2=0.9,amax=None,extra_condition=None,maxiter=10)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_nonlin.py----------------------------------------
A:scipy.optimize._nonlin.x->_as_inexact(x0).flatten()
A:scipy.optimize._nonlin.wrap->getattr(x0, '__array_wrap__', x.__array_wrap__)
A:scipy.optimize._nonlin._doc_parts->dict(params_basic='\n    F : function(x) -> f\n        Function whose root to find; should take and return an array-like\n        object.\n    xin : array_like\n        Initial guess for the solution\n    '.strip(), params_extra="\n    iter : int, optional\n        Number of iterations to make. If omitted (default), make as many\n        as required to meet tolerances.\n    verbose : bool, optional\n        Print status to stdout on every iteration.\n    maxiter : int, optional\n        Maximum number of iterations to make. If more are needed to\n        meet convergence, `NoConvergence` is raised.\n    f_tol : float, optional\n        Absolute tolerance (in max-norm) for the residual.\n        If omitted, default is 6e-6.\n    f_rtol : float, optional\n        Relative tolerance for the residual. If omitted, not used.\n    x_tol : float, optional\n        Absolute minimum step size, as determined from the Jacobian\n        approximation. If the step size is smaller than this, optimization\n        is terminated as successful. If omitted, not used.\n    x_rtol : float, optional\n        Relative minimum step size. If omitted, not used.\n    tol_norm : function(vector) -> scalar, optional\n        Norm to use in convergence check. Default is the maximum norm.\n    line_search : {None, 'armijo' (default), 'wolfe'}, optional\n        Which type of a line search to use to determine the step size in the\n        direction given by the Jacobian approximation. Defaults to 'armijo'.\n    callback : function, optional\n        Optional callback function. It is called on every iteration as\n        ``callback(x, f)`` where `x` is the current solution and `f`\n        the corresponding residual.\n\n    Returns\n    -------\n    sol : ndarray\n        An array (of similar array type as `x0`) containing the final solution.\n\n    Raises\n    ------\n    NoConvergence\n        When a solution was not found.\n\n    ".strip())
A:scipy.optimize._nonlin.condition->TerminationCondition(f_tol=f_tol, f_rtol=f_rtol, x_tol=x_tol, x_rtol=x_rtol, iter=iter, norm=tol_norm)
A:scipy.optimize._nonlin.x0->_as_inexact(x0)
A:scipy.optimize._nonlin.dx->numpy.full_like(x, np.inf)
A:scipy.optimize._nonlin.Fx->func(x)
A:scipy.optimize._nonlin.Fx_norm->norm(Fx)
A:scipy.optimize._nonlin.jacobian->asjacobian(jacobian)
A:scipy.optimize._nonlin.status->TerminationCondition(f_tol=f_tol, f_rtol=f_rtol, x_tol=x_tol, x_rtol=x_rtol, iter=iter, norm=tol_norm).check(Fx, x, dx)
A:scipy.optimize._nonlin.tol->min(eta, eta * Fx_norm)
A:scipy.optimize._nonlin.(s, x, Fx, Fx_norm_new)->_nonlin_line_search(func, x, Fx, dx, line_search)
A:scipy.optimize._nonlin.Fx_norm_new->norm(Fx)
A:scipy.optimize._nonlin.eta->min(eta_max, max(eta_A, gamma * eta ** 2))
A:scipy.optimize._nonlin.v->self.Gm.rmatvec(dx)
A:scipy.optimize._nonlin.(s, phi1, phi0)->scalar_search_wolfe1(phi, derphi, tmp_phi[0], xtol=0.01, amin=smin)
A:scipy.optimize._nonlin.(s, phi1)->scalar_search_armijo(phi, tmp_phi[0], -tmp_phi[0], amin=smin)
A:scipy.optimize._nonlin.f_norm->self.norm(f)
A:scipy.optimize._nonlin.x_norm->self.norm(x)
A:scipy.optimize._nonlin.dx_norm->self.norm(dx)
A:scipy.optimize._nonlin.J->numpy.atleast_2d(np.asarray(J))
A:scipy.optimize._nonlin.m->len(self.cs)
A:scipy.optimize._nonlin.normf0->norm(f0)
A:scipy.optimize._nonlin.(axpy, scal, dotc)->get_blas_funcs(['axpy', 'scal', 'dotc'], cs[:1] + [v])
A:scipy.optimize._nonlin.a->numpy.zeros((n, n), dtype=f.dtype)
A:scipy.optimize._nonlin.w->axpy(c, w, w.size, -qc)
A:scipy.optimize._nonlin.(axpy, dotc)->get_blas_funcs(['axpy', 'dotc'], cs[:1] + [v])
A:scipy.optimize._nonlin.q->max(0, min(q, p - 1))
A:scipy.optimize._nonlin.q[j]->dotc(d, v)
A:scipy.optimize._nonlin.self.collapsed->numpy.array(self)
A:scipy.optimize._nonlin.p->min(p, len(self.cs[0]))
A:scipy.optimize._nonlin.(D, R)->qr(D, mode='economic')
A:scipy.optimize._nonlin.C->dot(C, inv(WH))
A:scipy.optimize._nonlin.(U, S, WH)->svd(C, full_matrices=False)
A:scipy.optimize._nonlin.D->dot(D, WH.T.conj())
A:scipy.optimize._nonlin.self.cs[k]->C[:, k].copy()
A:scipy.optimize._nonlin.self.ds[k]->D[:, k].copy()
A:scipy.optimize._nonlin._doc_parts['broyden_params']->'\n    alpha : float, optional\n        Initial guess for the Jacobian is ``(-1/alpha)``.\n    reduction_method : str or tuple, optional\n        Method used in ensuring that the rank of the Broyden matrix\n        stays low. Can either be a string giving the name of the method,\n        or a tuple of the form ``(method, param1, param2, ...)``\n        that gives the name of the method and values for additional parameters.\n\n        Methods available:\n\n            - ``restart``: drop all matrix columns. Has no extra parameters.\n            - ``simple``: drop oldest matrix column. Has no extra parameters.\n            - ``svd``: keep only the most significant SVD components.\n              Takes an extra parameter, ``to_retain``, which determines the\n              number of SVD components to retain when rank reduction is done.\n              Default is ``max_rank - 2``.\n\n    max_rank : int, optional\n        Maximum rank for the Broyden matrix.\n        Default is infinity (i.e., no rank reduction).\n    '.strip()
A:scipy.optimize._nonlin.self.Gm->LowRankMatrix(-self.alpha, self.shape[0], self.dtype)
A:scipy.optimize._nonlin.r->self.Gm.matvec(f)
A:scipy.optimize._nonlin.n->len(self.dx)
A:scipy.optimize._nonlin.df_f->numpy.empty(n, dtype=f.dtype)
A:scipy.optimize._nonlin.df_f[k]->vdot(self.df[k], f)
A:scipy.optimize._nonlin.gamma->solve(b, df_f)
A:scipy.optimize._nonlin.b->numpy.empty((n, n), dtype=f.dtype)
A:scipy.optimize._nonlin.b[i, j]->vdot(self.df[i], self.dx[j])
A:scipy.optimize._nonlin.self.d->numpy.full((self.shape[0],), 1 / self.alpha, dtype=self.dtype)
A:scipy.optimize._nonlin.self.beta->numpy.full((self.shape[0],), self.alpha, dtype=self.dtype)
A:scipy.optimize._nonlin.self.method->dict(bicgstab=scipy.sparse.linalg.bicgstab, gmres=scipy.sparse.linalg.gmres, lgmres=scipy.sparse.linalg.lgmres, cgs=scipy.sparse.linalg.cgs, minres=scipy.sparse.linalg.minres, tfqmr=scipy.sparse.linalg.tfqmr).get(method, method)
A:scipy.optimize._nonlin.self.method_kw->dict(maxiter=inner_maxiter, M=self.preconditioner)
A:scipy.optimize._nonlin.mx->abs(self.x0).max()
A:scipy.optimize._nonlin.mf->abs(self.f0).max()
A:scipy.optimize._nonlin.nv->norm(v)
A:scipy.optimize._nonlin.(sol, info)->self.method(self.op, rhs, tol=tol, **self.method_kw)
A:scipy.optimize._nonlin.self.op->scipy.sparse.linalg.aslinearoperator(self)
A:scipy.optimize._nonlin.signature->_getfullargspec(jac.__init__)
A:scipy.optimize._nonlin.kwargs->list(zip(args[-len(defaults):], defaults))
A:scipy.optimize._nonlin.kw_str->', '.join(['%s=%r' % (k, v) for (k, v) in kwargs])
A:scipy.optimize._nonlin.kwkw_str->', '.join(['%s=%s' % (k, k) for (k, v) in kwargs])
A:scipy.optimize._nonlin.broyden1->_nonlin_wrapper('broyden1', BroydenFirst)
A:scipy.optimize._nonlin.broyden2->_nonlin_wrapper('broyden2', BroydenSecond)
A:scipy.optimize._nonlin.anderson->_nonlin_wrapper('anderson', Anderson)
A:scipy.optimize._nonlin.linearmixing->_nonlin_wrapper('linearmixing', LinearMixing)
A:scipy.optimize._nonlin.diagbroyden->_nonlin_wrapper('diagbroyden', DiagBroyden)
A:scipy.optimize._nonlin.excitingmixing->_nonlin_wrapper('excitingmixing', ExcitingMixing)
A:scipy.optimize._nonlin.newton_krylov->_nonlin_wrapper('newton_krylov', KrylovJacobian)
scipy.optimize.Anderson(self,alpha=None,w0=0.01,M=5)
scipy.optimize.Anderson._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize.Anderson.matvec(self,f)
scipy.optimize.Anderson.solve(self,f,tol=0)
scipy.optimize.BroydenFirst(self,alpha=None,reduction_method='restart',max_rank=None)
scipy.optimize.BroydenFirst._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize.BroydenFirst.matvec(self,f)
scipy.optimize.BroydenFirst.rmatvec(self,f)
scipy.optimize.BroydenFirst.rsolve(self,f,tol=0)
scipy.optimize.BroydenFirst.setup(self,x,F,func)
scipy.optimize.BroydenFirst.solve(self,f,tol=0)
scipy.optimize.BroydenFirst.todense(self)
scipy.optimize.BroydenSecond(BroydenFirst)
scipy.optimize.BroydenSecond._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize.DiagBroyden(self,alpha=None)
scipy.optimize.DiagBroyden._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize.DiagBroyden.matvec(self,f)
scipy.optimize.DiagBroyden.rmatvec(self,f)
scipy.optimize.DiagBroyden.rsolve(self,f,tol=0)
scipy.optimize.DiagBroyden.setup(self,x,F,func)
scipy.optimize.DiagBroyden.solve(self,f,tol=0)
scipy.optimize.DiagBroyden.todense(self)
scipy.optimize.ExcitingMixing(self,alpha=None,alphamax=1.0)
scipy.optimize.ExcitingMixing._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize.ExcitingMixing.matvec(self,f)
scipy.optimize.ExcitingMixing.rmatvec(self,f)
scipy.optimize.ExcitingMixing.rsolve(self,f,tol=0)
scipy.optimize.ExcitingMixing.setup(self,x,F,func)
scipy.optimize.ExcitingMixing.solve(self,f,tol=0)
scipy.optimize.ExcitingMixing.todense(self)
scipy.optimize.GenericBroyden(Jacobian)
scipy.optimize.GenericBroyden._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize.GenericBroyden.setup(self,x0,f0,func)
scipy.optimize.GenericBroyden.update(self,x,f)
scipy.optimize.InverseJacobian(self,jacobian)
scipy.optimize.InverseJacobian.dtype(self)
scipy.optimize.InverseJacobian.shape(self)
scipy.optimize.Jacobian(self,**kw)
scipy.optimize.Jacobian.aspreconditioner(self)
scipy.optimize.Jacobian.setup(self,x,F,func)
scipy.optimize.Jacobian.solve(self,v,tol=0)
scipy.optimize.Jacobian.update(self,x,F)
scipy.optimize.KrylovJacobian(self,rdiff=None,method='lgmres',inner_maxiter=20,inner_M=None,outer_k=10,**kw)
scipy.optimize.KrylovJacobian._update_diff_step(self)
scipy.optimize.KrylovJacobian.matvec(self,v)
scipy.optimize.KrylovJacobian.setup(self,x,f,func)
scipy.optimize.KrylovJacobian.solve(self,rhs,tol=0)
scipy.optimize.KrylovJacobian.update(self,x,f)
scipy.optimize.LinearMixing(self,alpha=None)
scipy.optimize.LinearMixing._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize.LinearMixing.matvec(self,f)
scipy.optimize.LinearMixing.rmatvec(self,f)
scipy.optimize.LinearMixing.rsolve(self,f,tol=0)
scipy.optimize.LinearMixing.solve(self,f,tol=0)
scipy.optimize.LinearMixing.todense(self)
scipy.optimize.LowRankMatrix(self,alpha,n,dtype)
scipy.optimize.LowRankMatrix.__array__(self)
scipy.optimize.LowRankMatrix._matvec(v,alpha,cs,ds)
scipy.optimize.LowRankMatrix._solve(v,alpha,cs,ds)
scipy.optimize.LowRankMatrix.append(self,c,d)
scipy.optimize.LowRankMatrix.collapse(self)
scipy.optimize.LowRankMatrix.matvec(self,v)
scipy.optimize.LowRankMatrix.restart_reduce(self,rank)
scipy.optimize.LowRankMatrix.rmatvec(self,v)
scipy.optimize.LowRankMatrix.rsolve(self,v,tol=0)
scipy.optimize.LowRankMatrix.simple_reduce(self,rank)
scipy.optimize.LowRankMatrix.solve(self,v,tol=0)
scipy.optimize.LowRankMatrix.svd_reduce(self,max_rank,to_retain=None)
scipy.optimize.NoConvergence(Exception)
scipy.optimize.TerminationCondition(self,f_tol=None,f_rtol=None,x_tol=None,x_rtol=None,iter=None,norm=maxnorm)
scipy.optimize.TerminationCondition.check(self,f,x,dx)
scipy.optimize._array_like(x,x0)
scipy.optimize._as_inexact(x)
scipy.optimize._nonlin.Anderson(self,alpha=None,w0=0.01,M=5)
scipy.optimize._nonlin.Anderson.__init__(self,alpha=None,w0=0.01,M=5)
scipy.optimize._nonlin.Anderson._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize._nonlin.Anderson.matvec(self,f)
scipy.optimize._nonlin.Anderson.solve(self,f,tol=0)
scipy.optimize._nonlin.BroydenFirst(self,alpha=None,reduction_method='restart',max_rank=None)
scipy.optimize._nonlin.BroydenFirst.__init__(self,alpha=None,reduction_method='restart',max_rank=None)
scipy.optimize._nonlin.BroydenFirst._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize._nonlin.BroydenFirst.matvec(self,f)
scipy.optimize._nonlin.BroydenFirst.rmatvec(self,f)
scipy.optimize._nonlin.BroydenFirst.rsolve(self,f,tol=0)
scipy.optimize._nonlin.BroydenFirst.setup(self,x,F,func)
scipy.optimize._nonlin.BroydenFirst.solve(self,f,tol=0)
scipy.optimize._nonlin.BroydenFirst.todense(self)
scipy.optimize._nonlin.BroydenSecond(BroydenFirst)
scipy.optimize._nonlin.BroydenSecond._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize._nonlin.DiagBroyden(self,alpha=None)
scipy.optimize._nonlin.DiagBroyden.__init__(self,alpha=None)
scipy.optimize._nonlin.DiagBroyden._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize._nonlin.DiagBroyden.matvec(self,f)
scipy.optimize._nonlin.DiagBroyden.rmatvec(self,f)
scipy.optimize._nonlin.DiagBroyden.rsolve(self,f,tol=0)
scipy.optimize._nonlin.DiagBroyden.setup(self,x,F,func)
scipy.optimize._nonlin.DiagBroyden.solve(self,f,tol=0)
scipy.optimize._nonlin.DiagBroyden.todense(self)
scipy.optimize._nonlin.ExcitingMixing(self,alpha=None,alphamax=1.0)
scipy.optimize._nonlin.ExcitingMixing.__init__(self,alpha=None,alphamax=1.0)
scipy.optimize._nonlin.ExcitingMixing._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize._nonlin.ExcitingMixing.matvec(self,f)
scipy.optimize._nonlin.ExcitingMixing.rmatvec(self,f)
scipy.optimize._nonlin.ExcitingMixing.rsolve(self,f,tol=0)
scipy.optimize._nonlin.ExcitingMixing.setup(self,x,F,func)
scipy.optimize._nonlin.ExcitingMixing.solve(self,f,tol=0)
scipy.optimize._nonlin.ExcitingMixing.todense(self)
scipy.optimize._nonlin.GenericBroyden(Jacobian)
scipy.optimize._nonlin.GenericBroyden._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize._nonlin.GenericBroyden.setup(self,x0,f0,func)
scipy.optimize._nonlin.GenericBroyden.update(self,x,f)
scipy.optimize._nonlin.InverseJacobian(self,jacobian)
scipy.optimize._nonlin.InverseJacobian.__init__(self,jacobian)
scipy.optimize._nonlin.InverseJacobian.dtype(self)
scipy.optimize._nonlin.InverseJacobian.shape(self)
scipy.optimize._nonlin.Jacobian(self,**kw)
scipy.optimize._nonlin.Jacobian.__init__(self,**kw)
scipy.optimize._nonlin.Jacobian.aspreconditioner(self)
scipy.optimize._nonlin.Jacobian.setup(self,x,F,func)
scipy.optimize._nonlin.Jacobian.solve(self,v,tol=0)
scipy.optimize._nonlin.Jacobian.update(self,x,F)
scipy.optimize._nonlin.KrylovJacobian(self,rdiff=None,method='lgmres',inner_maxiter=20,inner_M=None,outer_k=10,**kw)
scipy.optimize._nonlin.KrylovJacobian.__init__(self,rdiff=None,method='lgmres',inner_maxiter=20,inner_M=None,outer_k=10,**kw)
scipy.optimize._nonlin.KrylovJacobian._update_diff_step(self)
scipy.optimize._nonlin.KrylovJacobian.matvec(self,v)
scipy.optimize._nonlin.KrylovJacobian.setup(self,x,f,func)
scipy.optimize._nonlin.KrylovJacobian.solve(self,rhs,tol=0)
scipy.optimize._nonlin.KrylovJacobian.update(self,x,f)
scipy.optimize._nonlin.LinearMixing(self,alpha=None)
scipy.optimize._nonlin.LinearMixing.__init__(self,alpha=None)
scipy.optimize._nonlin.LinearMixing._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize._nonlin.LinearMixing.matvec(self,f)
scipy.optimize._nonlin.LinearMixing.rmatvec(self,f)
scipy.optimize._nonlin.LinearMixing.rsolve(self,f,tol=0)
scipy.optimize._nonlin.LinearMixing.solve(self,f,tol=0)
scipy.optimize._nonlin.LinearMixing.todense(self)
scipy.optimize._nonlin.LowRankMatrix(self,alpha,n,dtype)
scipy.optimize._nonlin.LowRankMatrix.__array__(self)
scipy.optimize._nonlin.LowRankMatrix.__init__(self,alpha,n,dtype)
scipy.optimize._nonlin.LowRankMatrix._matvec(v,alpha,cs,ds)
scipy.optimize._nonlin.LowRankMatrix._solve(v,alpha,cs,ds)
scipy.optimize._nonlin.LowRankMatrix.append(self,c,d)
scipy.optimize._nonlin.LowRankMatrix.collapse(self)
scipy.optimize._nonlin.LowRankMatrix.matvec(self,v)
scipy.optimize._nonlin.LowRankMatrix.restart_reduce(self,rank)
scipy.optimize._nonlin.LowRankMatrix.rmatvec(self,v)
scipy.optimize._nonlin.LowRankMatrix.rsolve(self,v,tol=0)
scipy.optimize._nonlin.LowRankMatrix.simple_reduce(self,rank)
scipy.optimize._nonlin.LowRankMatrix.solve(self,v,tol=0)
scipy.optimize._nonlin.LowRankMatrix.svd_reduce(self,max_rank,to_retain=None)
scipy.optimize._nonlin.NoConvergence(Exception)
scipy.optimize._nonlin.TerminationCondition(self,f_tol=None,f_rtol=None,x_tol=None,x_rtol=None,iter=None,norm=maxnorm)
scipy.optimize._nonlin.TerminationCondition.__init__(self,f_tol=None,f_rtol=None,x_tol=None,x_rtol=None,iter=None,norm=maxnorm)
scipy.optimize._nonlin.TerminationCondition.check(self,f,x,dx)
scipy.optimize._nonlin._array_like(x,x0)
scipy.optimize._nonlin._as_inexact(x)
scipy.optimize._nonlin._nonlin_line_search(func,x,Fx,dx,search_type='armijo',rdiff=1e-08,smin=0.01)
scipy.optimize._nonlin._nonlin_wrapper(name,jac)
scipy.optimize._nonlin._safe_norm(v)
scipy.optimize._nonlin._set_doc(obj)
scipy.optimize._nonlin.asjacobian(J)
scipy.optimize._nonlin.maxnorm(x)
scipy.optimize._nonlin.nonlin_solve(F,x0,jacobian='krylov',iter=None,verbose=False,maxiter=None,f_tol=None,f_rtol=None,x_tol=None,x_rtol=None,tol_norm=None,line_search='armijo',callback=None,full_output=False,raise_exception=True)
scipy.optimize._nonlin_line_search(func,x,Fx,dx,search_type='armijo',rdiff=1e-08,smin=0.01)
scipy.optimize._nonlin_wrapper(name,jac)
scipy.optimize._safe_norm(v)
scipy.optimize._set_doc(obj)
scipy.optimize.asjacobian(J)
scipy.optimize.maxnorm(x)
scipy.optimize.nonlin_solve(F,x0,jacobian='krylov',iter=None,verbose=False,maxiter=None,f_tol=None,f_rtol=None,x_tol=None,x_rtol=None,tol_norm=None,line_search='armijo',callback=None,full_output=False,raise_exception=True)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_linprog_ip.py----------------------------------------
A:scipy.optimize._linprog_ip._get_solver.cholmod_factor->cholmod_analyze(M)
A:scipy.optimize._linprog_ip.solve->_get_solver(M, sparse, lstsq, sym_pos, cholesky, permc_spec)
A:scipy.optimize._linprog_ip.L->scipy.linalg.cho_factor(M)
A:scipy.optimize._linprog_ip.n_x->len(x)
A:scipy.optimize._linprog_ip.M->scipy.sparse.csc_matrix(A).dot(Dinv.reshape(-1, 1) * A.T)
A:scipy.optimize._linprog_ip.(p, q)->_sym_solve(Dinv, A, c, b, solve)
A:scipy.optimize._linprog_ip.(u, v)->_sym_solve(Dinv, A, rhatd - 1 / x * rhatxs, rhatp, solve)
A:scipy.optimize._linprog_ip.alpha->_get_step(x, d_x, z, d_z, tau, d_tau, kappa, d_kappa, alpha0)
A:scipy.optimize._linprog_ip.v->solve(r)
A:scipy.optimize._linprog_ip.x0->numpy.ones(n)
A:scipy.optimize._linprog_ip.y0->numpy.zeros(m)
A:scipy.optimize._linprog_ip.z0->numpy.ones(n)
A:scipy.optimize._linprog_ip.(x0, y0, z0, tau0, kappa0)->_get_blind_start(A.shape)
A:scipy.optimize._linprog_ip.r_p0->r_p(x0, tau0)
A:scipy.optimize._linprog_ip.r_d0->r_d(y0, z0, tau0)
A:scipy.optimize._linprog_ip.r_g0->r_g(x0, y0, kappa0)
A:scipy.optimize._linprog_ip.mu_0->mu(x0, tau0, z0, kappa0)
A:scipy.optimize._linprog_ip.(x, y, z, tau, kappa)->_do_step(x, y, z, tau, kappa, d_x, d_y, d_z, d_tau, d_kappa, alpha)
A:scipy.optimize._linprog_ip.(rho_p, rho_d, rho_A, rho_g, rho_mu, obj)->_indicators(A, b, c, c0, x, y, z, tau, kappa)
A:scipy.optimize._linprog_ip.(x_o, fun, slack, con)->_postsolve(x / tau, postsolve_args)
A:scipy.optimize._linprog_ip.res->OptimizeResult({'x': x_o, 'fun': fun, 'slack': slack, 'con': con, 'nit': iteration, 'phase': 1, 'complete': False, 'status': 0, 'message': '', 'success': False})
A:scipy.optimize._linprog_ip.A->scipy.sparse.csc_matrix(A)
A:scipy.optimize._linprog_ip.A.T->scipy.sparse.csc_matrix(A).transpose()
A:scipy.optimize._linprog_ip.(d_x, d_y, d_z, d_tau, d_kappa)->_get_delta(A, b, c, x, y, z, tau, kappa, gamma, eta, sparse, lstsq, sym_pos, cholesky, pc, ip, permc_spec)
A:scipy.optimize._linprog_ip.tau->max(1, tau)
A:scipy.optimize._linprog_ip.kappa->max(1, kappa)
A:scipy.optimize._linprog_ip.message->_get_message(status)
A:scipy.optimize._linprog_ip.(x, status, message, iteration)->_ip_hsd(A, b, c, c0, alpha0, beta, maxiter, disp, tol, sparse, lstsq, sym_pos, cholesky, pc, ip, permc_spec, callback, postsolve_args)
scipy.optimize._linprog_ip._display_iter(rho_p,rho_d,rho_g,alpha,rho_mu,obj,header=False)
scipy.optimize._linprog_ip._do_step(x,y,z,tau,kappa,d_x,d_y,d_z,d_tau,d_kappa,alpha)
scipy.optimize._linprog_ip._get_blind_start(shape)
scipy.optimize._linprog_ip._get_delta(A,b,c,x,y,z,tau,kappa,gamma,eta,sparse=False,lstsq=False,sym_pos=True,cholesky=True,pc=True,ip=False,permc_spec='MMD_AT_PLUS_A')
scipy.optimize._linprog_ip._get_message(status)
scipy.optimize._linprog_ip._get_solver(M,sparse=False,lstsq=False,sym_pos=True,cholesky=True,permc_spec='MMD_AT_PLUS_A')
scipy.optimize._linprog_ip._get_step(x,d_x,z,d_z,tau,d_tau,kappa,d_kappa,alpha0)
scipy.optimize._linprog_ip._indicators(A,b,c,c0,x,y,z,tau,kappa)
scipy.optimize._linprog_ip._ip_hsd(A,b,c,c0,alpha0,beta,maxiter,disp,tol,sparse,lstsq,sym_pos,cholesky,pc,ip,permc_spec,callback,postsolve_args)
scipy.optimize._linprog_ip._linprog_ip(c,c0,A,b,callback,postsolve_args,maxiter=1000,tol=1e-08,disp=False,alpha0=0.99995,beta=0.1,sparse=False,lstsq=False,sym_pos=True,cholesky=None,pc=True,ip=False,permc_spec='MMD_AT_PLUS_A',**unknown_options)
scipy.optimize._linprog_ip._sym_solve(Dinv,A,r1,r2,solve)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/__nnls.pyi----------------------------------------
scipy.optimize.__nnls.nnls(a:npt.ArrayLike,mda:int,m:int,n:int,b:npt.ArrayLike,x:npt.ArrayLike,rnorm:float,w:float,zz:float,index_bn:int,mode:int,maxiter:int)->Tuple[npt.ArrayLike, float, int]
scipy.optimize._nnls(a:npt.ArrayLike,mda:int,m:int,n:int,b:npt.ArrayLike,x:npt.ArrayLike,rnorm:float,w:float,zz:float,index_bn:int,mode:int,maxiter:int)->Tuple[npt.ArrayLike, float, int]


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/lbfgsb.py----------------------------------------
scipy.optimize.lbfgsb.__dir__()
scipy.optimize.lbfgsb.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_shgo.py----------------------------------------
A:scipy.optimize._shgo.bounds->new_bounds_to_old(bounds.lb, bounds.ub, len(bounds.lb))
A:scipy.optimize._shgo.shc->SHGO(func, bounds, args=args, constraints=constraints, n=n, iters=iters, callback=callback, minimizer_kwargs=minimizer_kwargs, options=options, sampling_method=sampling_method)
A:scipy.optimize._shgo.(_, self.func)->_wrap_scalar_function(func, args)
A:scipy.optimize._shgo.abound->numpy.array(bounds, float)
A:scipy.optimize._shgo.self.g_cons->tuple(self.g_cons)
A:scipy.optimize._shgo.self.g_args->tuple(self.g_args)
A:scipy.optimize._shgo.existingkeys->set(dictionary)
A:scipy.optimize._shgo.self.n->int(2 ** np.ceil(np.log2(self.n)))
A:scipy.optimize._shgo.self.qmc_engine->scipy.stats.qmc.Halton(d=self.dim, scramble=True, seed=np.random.RandomState())
A:scipy.optimize._shgo.self.LMC->LMapCache()
A:scipy.optimize._shgo.self.res->OptimizeResult()
A:scipy.optimize._shgo.self.minimizer_kwargs[opt]->self.minimizer_kwargs['options'].pop(opt)
A:scipy.optimize._shgo.self.minimize_every_iter->options.get('minimize_every_iter', False)
A:scipy.optimize._shgo.self.maxiter->options.get('maxiter', None)
A:scipy.optimize._shgo.self.maxfev->options.get('maxfev', None)
A:scipy.optimize._shgo.self.maxev->options.get('maxev', None)
A:scipy.optimize._shgo.self.init->time.time()
A:scipy.optimize._shgo.self.maxtime->options.get('maxtime', None)
A:scipy.optimize._shgo.self.f_tol->options.get('f_tol', 0.0001)
A:scipy.optimize._shgo.self.minhgrd->options.get('minhgrd', None)
A:scipy.optimize._shgo.self.local_iter->options.get('local_iter', False)
A:scipy.optimize._shgo.self.infty_cons_sampl->options.get('infty_constraints', True)
A:scipy.optimize._shgo.self.disp->options.get('disp', False)
A:scipy.optimize._shgo.self.f_I->numpy.argsort(self.F, axis=-1)
A:scipy.optimize._shgo.self.HC->Complex(self.dim, self._raw_func, self.args, self.symmetry, self.bounds, self.g_cons, self.g_args)
A:scipy.optimize._shgo.self.minimizer_pool_F->numpy.delete(self.minimizer_pool_F, trim_ind)
A:scipy.optimize._shgo.self.X_min->numpy.delete(self.X_min, trim_ind, axis=0)
A:scipy.optimize._shgo.lres_f_min->self.minimize(self.Ss[-1, :], self.minimizer_pool[-1])
A:scipy.optimize._shgo.self.ind_f_min->numpy.argsort(self.minimizer_pool_F)
A:scipy.optimize._shgo.self.minimizer_pool->numpy.delete(self.minimizer_pool, trim_ind)
A:scipy.optimize._shgo.x_min->numpy.array([x_min])
A:scipy.optimize._shgo.self.Y->scipy.spatial.distance.cdist(x_min, X_min, 'euclidean')
A:scipy.optimize._shgo.self.Z->numpy.argsort(self.Y, axis=-1)
A:scipy.optimize._shgo.x_min_t->tuple(x_min)
A:scipy.optimize._shgo.x_min_t_norm->tuple(x_min_t_norm)
A:scipy.optimize._shgo.g_bounds->self.construct_lcb_delaunay(x_min, ind=ind)
A:scipy.optimize._shgo.lres->minimize(self.func, x_min, **self.minimizer_kwargs)
A:scipy.optimize._shgo.results->self.LMC.sort_cache_result()
A:scipy.optimize._shgo.self.C->self.sampling_function(n, dim)
A:scipy.optimize._shgo.self.Ind_sorted->numpy.argsort(self.C, axis=0)
A:scipy.optimize._shgo.self.F->numpy.nan_to_num(self.F)
A:scipy.optimize._shgo.self.F[i]->self.func(self.C[i, :])
A:scipy.optimize._shgo.self.Ftp->numpy.diff(self.Ft, axis=0)
A:scipy.optimize._shgo.self.Xi_ind_topo->numpy.array(self.Xi_ind_topo_i).all()
A:scipy.optimize._shgo.min_bool->self.sample_delaunay_topo(ind)
A:scipy.optimize._shgo.self.Tri->scipy.spatial.Delaunay(self.C, incremental=True)
A:scipy.optimize._shgo.G_ind->self.find_neighbors_delaunay(ind, self.Tri)
A:scipy.optimize._shgo.v->tuple(v)
A:scipy.optimize._shgo.xval->LMap(v)
A:scipy.optimize._shgo.self.xl_maps->numpy.ndarray.tolist(self.xl_maps)
A:scipy.optimize._shgo.self.f_maps->numpy.ndarray.tolist(self.f_maps)
A:scipy.optimize._shgo.ind_sorted->numpy.argsort(self.f_maps)
scipy.optimize._shgo.LMap(self,v)
scipy.optimize._shgo.LMap.__init__(self,v)
scipy.optimize._shgo.LMapCache(self)
scipy.optimize._shgo.LMapCache.__getitem__(self,v)
scipy.optimize._shgo.LMapCache.__init__(self)
scipy.optimize._shgo.LMapCache.add_res(self,v,lres,bounds=None)
scipy.optimize._shgo.LMapCache.sort_cache_result(self)
scipy.optimize._shgo.SHGO(self,func,bounds,args=(),constraints=None,n=None,iters=None,callback=None,minimizer_kwargs=None,options=None,sampling_method='sobol')
scipy.optimize._shgo.SHGO.__init__(self,func,bounds,args=(),constraints=None,n=None,iters=None,callback=None,minimizer_kwargs=None,options=None,sampling_method='sobol')
scipy.optimize._shgo.SHGO.ax_subspace(self)
scipy.optimize._shgo.SHGO.construct_complex(self)
scipy.optimize._shgo.SHGO.construct_lcb_delaunay(self,v_min,ind=None)
scipy.optimize._shgo.SHGO.construct_lcb_simplicial(self,v_min)
scipy.optimize._shgo.SHGO.delaunay_complex_minimisers(self)
scipy.optimize._shgo.SHGO.delaunay_minimizers(self)
scipy.optimize._shgo.SHGO.delaunay_triangulation(self,grow=False,n_prc=0)
scipy.optimize._shgo.SHGO.fail_routine(self,mes='Failedtoconverge')
scipy.optimize._shgo.SHGO.find_lowest_vertex(self)
scipy.optimize._shgo.SHGO.find_minima(self)
scipy.optimize._shgo.SHGO.find_neighbors_delaunay(pindex,triang)
scipy.optimize._shgo.SHGO.finite_ev(self)
scipy.optimize._shgo.SHGO.finite_fev(self)
scipy.optimize._shgo.SHGO.finite_homology_growth(self)
scipy.optimize._shgo.SHGO.finite_iterations(self)
scipy.optimize._shgo.SHGO.finite_precision(self)
scipy.optimize._shgo.SHGO.finite_time(self)
scipy.optimize._shgo.SHGO.fun_ref(self)
scipy.optimize._shgo.SHGO.g_topograph(self,x_min,X_min)
scipy.optimize._shgo.SHGO.init_options(self,options)
scipy.optimize._shgo.SHGO.iterate(self)
scipy.optimize._shgo.SHGO.iterate_delaunay(self)
scipy.optimize._shgo.SHGO.iterate_hypercube(self)
scipy.optimize._shgo.SHGO.minimise_pool(self,force_iter=False)
scipy.optimize._shgo.SHGO.minimize(self,x_min,ind=None)
scipy.optimize._shgo.SHGO.minimizers_1D(self)
scipy.optimize._shgo.SHGO.sample_delaunay_topo(self,ind)
scipy.optimize._shgo.SHGO.sample_topo(self,ind)
scipy.optimize._shgo.SHGO.sampled_surface(self,infty_cons_sampl=False)
scipy.optimize._shgo.SHGO.sampling_custom(self,n,dim)
scipy.optimize._shgo.SHGO.sampling_subspace(self)
scipy.optimize._shgo.SHGO.simplex_minimizers(self)
scipy.optimize._shgo.SHGO.sort_min_pool(self)
scipy.optimize._shgo.SHGO.sort_result(self)
scipy.optimize._shgo.SHGO.sorted_samples(self)
scipy.optimize._shgo.SHGO.stopping_criteria(self)
scipy.optimize._shgo.SHGO.surface_topo_ref(self)
scipy.optimize._shgo.SHGO.trim_min_pool(self,trim_ind)
scipy.optimize._shgo.shgo(func,bounds,args=(),constraints=None,n=None,iters=1,callback=None,minimizer_kwargs=None,options=None,sampling_method='simplicial')
scipy.optimize.shgo(func,bounds,args=(),constraints=None,n=None,iters=1,callback=None,minimizer_kwargs=None,options=None,sampling_method='simplicial')


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/zeros.py----------------------------------------
scipy.optimize.zeros.__dir__()
scipy.optimize.zeros.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_minimize.py----------------------------------------
A:scipy.optimize._minimize.x0->numpy.asarray(x0, dtype=float)
A:scipy.optimize._minimize.meth->method.lower()
A:scipy.optimize._minimize.fun->_remove_from_func(fun, i_fixed, x_fixed)
A:scipy.optimize._minimize.options->dict(options)
A:scipy.optimize._minimize.constraints->standardize_constraints(constraints, x0, 'new')
A:scipy.optimize._minimize.bounds->new_bounds_to_old(bounds.lb, bounds.ub, x0.shape[0])
A:scipy.optimize._minimize.callback->_remove_from_func(callback, i_fixed, x_fixed)
A:scipy.optimize._minimize.jac->_remove_from_func(jac, i_fixed, x_fixed, remove=1)
A:scipy.optimize._minimize.con['fun']->_remove_from_func(con['fun'], i_fixed, x_fixed, min_dim=1, remove=0)
A:scipy.optimize._minimize.con['jac']->_remove_from_func(con['jac'], i_fixed, x_fixed, min_dim=2, remove=1)
A:scipy.optimize._minimize.res->_minimize_trustregion_exact(fun, x0, args, jac, hess, callback=callback, **options)
A:scipy.optimize._minimize.res.x->_add_to_array(res.x, i_fixed, x_fixed)
A:scipy.optimize._minimize.res.jac->_add_to_array(res.jac, i_fixed, np.nan)
A:scipy.optimize._minimize.disp->dict(options).get('disp')
A:scipy.optimize._minimize.x_out->numpy.zeros_like(i_free, dtype=x_in.dtype)
A:scipy.optimize._minimize.y_out->numpy.atleast_2d(y_out)
A:scipy.optimize._minimize.x_out[i_free]->x_in.ravel()
A:scipy.optimize._minimize.(lb, ub)->old_bound_to_new(bounds)
A:scipy.optimize._minimize.constraints[i]->old_constraint_to_new(i, con)
A:scipy.optimize._minimize.old_constraints->new_constraint_to_old(con, x0)
A:scipy.optimize._minimize.pc->PreparedConstraint(c, x0)
A:scipy.optimize._minimize.violation->PreparedConstraint(c, x0).violation(x0)
A:scipy.optimize._minimize.maxcv->max(maxcv, np.max(violation))
scipy.optimize._add_to_array(x_in,i_fixed,x_fixed)
scipy.optimize._minimize._add_to_array(x_in,i_fixed,x_fixed)
scipy.optimize._minimize._optimize_result_for_equal_bounds(fun,bounds,method,args=(),constraints=())
scipy.optimize._minimize._remove_from_bounds(bounds,i_fixed)
scipy.optimize._minimize._remove_from_func(fun_in,i_fixed,x_fixed,min_dim=None,remove=0)
scipy.optimize._minimize.minimize(fun,x0,args=(),method=None,jac=None,hess=None,hessp=None,bounds=None,constraints=(),tol=None,callback=None,options=None)
scipy.optimize._minimize.minimize_scalar(fun,bracket=None,bounds=None,args=(),method='brent',tol=None,options=None)
scipy.optimize._minimize.standardize_bounds(bounds,x0,meth)
scipy.optimize._minimize.standardize_constraints(constraints,x0,meth)
scipy.optimize._optimize_result_for_equal_bounds(fun,bounds,method,args=(),constraints=())
scipy.optimize._remove_from_bounds(bounds,i_fixed)
scipy.optimize._remove_from_func(fun_in,i_fixed,x_fixed,min_dim=None,remove=0)
scipy.optimize.minimize(fun,x0,args=(),method=None,jac=None,hess=None,hessp=None,bounds=None,constraints=(),tol=None,callback=None,options=None)
scipy.optimize.minimize_scalar(fun,bracket=None,bounds=None,args=(),method='brent',tol=None,options=None)
scipy.optimize.standardize_bounds(bounds,x0,meth)
scipy.optimize.standardize_constraints(constraints,x0,meth)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_optimize.py----------------------------------------
A:scipy.optimize._optimize.self.x->numpy.asarray(x).copy()
A:scipy.optimize._optimize.fg->self.fun(x, *args)
A:scipy.optimize._optimize.split->str(d).split('\n')
A:scipy.optimize._optimize.s->str(d)
A:scipy.optimize._optimize.msg->', '.join(map(str, unknown_options.keys()))
A:scipy.optimize._optimize._epsilon->sqrt(np.finfo(float).eps)
A:scipy.optimize._optimize.sf->_prepare_scalar_function(fun, x0, jac, args=args, epsilon=eps, hess=hess)
A:scipy.optimize._optimize.x->asarray(x0).flatten()
A:scipy.optimize._optimize.r->numpy.sum(100.0 * (x[1:] - x[:-1] ** 2.0) ** 2.0 + (1 - x[:-1]) ** 2.0, axis=0)
A:scipy.optimize._optimize.der->numpy.zeros_like(x)
A:scipy.optimize._optimize.diagonal->numpy.zeros(len(x), dtype=x.dtype)
A:scipy.optimize._optimize.Hp->numpy.zeros(len(x), dtype=x.dtype)
A:scipy.optimize._optimize.fx->func(x, *args)
A:scipy.optimize._optimize.res->finish(func, xmin, args=args, **finish_kwargs)
A:scipy.optimize._optimize.x0->asarray(x0).flatten()
A:scipy.optimize._optimize.dim->float(len(x0))
A:scipy.optimize._optimize.N->len(ranges)
A:scipy.optimize._optimize.sim->numpy.take(sim, ind, 0)
A:scipy.optimize._optimize.y->numpy.array(x0, copy=True)
A:scipy.optimize._optimize.one2np1->list(range(1, N + 1))
A:scipy.optimize._optimize.fsim->numpy.take(fsim, ind, 0)
A:scipy.optimize._optimize.(fcalls, func)->_wrap_scalar_function_maxfun_validation(func, args, maxfun)
A:scipy.optimize._optimize.fsim[k]->func(sim[k])
A:scipy.optimize._optimize.ind->numpy.argsort(fsim)
A:scipy.optimize._optimize.xr->numpy.clip(xr, lower_bound, upper_bound)
A:scipy.optimize._optimize.fxr->func(xr)
A:scipy.optimize._optimize.xe->numpy.clip(xe, lower_bound, upper_bound)
A:scipy.optimize._optimize.fxe->func(xe)
A:scipy.optimize._optimize.xc->numpy.clip(xc, lower_bound, upper_bound)
A:scipy.optimize._optimize.fxc->func(xc)
A:scipy.optimize._optimize.xcc->numpy.clip(xcc, lower_bound, upper_bound)
A:scipy.optimize._optimize.fxcc->func(xcc)
A:scipy.optimize._optimize.sim[j]->numpy.clip(sim[j], lower_bound, upper_bound)
A:scipy.optimize._optimize.fsim[j]->func(sim[j])
A:scipy.optimize._optimize.fval->squeeze(func(x))
A:scipy.optimize._optimize.result->OptimizeResult(fun=fval, direc=direc, nit=iter, nfev=fcalls[0], status=warnflag, success=warnflag == 0, message=msg, x=x)
A:scipy.optimize._optimize.xk->numpy.asarray(xk, float)
A:scipy.optimize._optimize.f0->f(xk, *args)
A:scipy.optimize._optimize._grad->numpy.asanyarray(grad(x0, *args))
A:scipy.optimize._optimize.random_state->check_random_state(seed)
A:scipy.optimize._optimize.v->check_random_state(seed).normal(0, 1, size=x0.shape)
A:scipy.optimize._optimize.vars->numpy.zeros((1,))
A:scipy.optimize._optimize.analytical_grad->grad(x0, *args)
A:scipy.optimize._optimize.f1->func(*(x1,) + args)
A:scipy.optimize._optimize.f2->func(*(x2,) + args)
A:scipy.optimize._optimize.extra_condition->kwargs.pop('extra_condition', None)
A:scipy.optimize._optimize.ret->line_search_wolfe2(f, fprime, xk, pk, gfk, old_fval, old_old_fval, extra_condition=extra_condition, **kwargs2)
A:scipy.optimize._optimize.old_fval->f(x0)
A:scipy.optimize._optimize.gfk->myfprime(x0)
A:scipy.optimize._optimize.I->numpy.eye(N, dtype=int)
A:scipy.optimize._optimize.gnorm->vecnorm(gfkp1, ord=norm)
A:scipy.optimize._optimize.(alpha_k, fc, gc, old_fval, old_old_fval, gfkp1)->_line_search_wolfe12(f, myfprime, xk, pk, gfk, old_fval, old_old_fval, c2=0.4, amin=1e-100, amax=1e+100, extra_condition=descent_condition)
A:scipy.optimize._optimize.gfkp1->myfprime(xkp1)
A:scipy.optimize._optimize.rhok_inv->numpy.dot(yk, sk)
A:scipy.optimize._optimize.deltak->numpy.dot(gfk, gfk)
A:scipy.optimize._optimize.beta_k->max(0, np.dot(yk, gfkp1) / deltak)
A:scipy.optimize._optimize.cached_step[:]->polak_ribiere_powell_step(alpha, gfkp1)
A:scipy.optimize._optimize.(alpha_k, xk, pk, gfk, gnorm)->polak_ribiere_powell_step(alpha_k, gfkp1)
A:scipy.optimize._optimize._h->_prepare_scalar_function(fun, x0, jac, args=args, epsilon=eps, hess=hess).hess(x0)
A:scipy.optimize._optimize.maggrad->numpy.add.reduce(np.abs(b))
A:scipy.optimize._optimize.eta->numpy.min([0.5, np.sqrt(maggrad)])
A:scipy.optimize._optimize.xsupi->zeros(len(x0), dtype=x0.dtype)
A:scipy.optimize._optimize.dri0->numpy.dot(ri, ri)
A:scipy.optimize._optimize.A->_prepare_scalar_function(fun, x0, jac, args=args, epsilon=eps, hess=hess).hess(xk)
A:scipy.optimize._optimize.Ap->asarray(Ap).squeeze()
A:scipy.optimize._optimize.curv->numpy.dot(psupi, Ap)
A:scipy.optimize._optimize.dri1->numpy.dot(ri, ri)
A:scipy.optimize._optimize.(alphak, fc, gc, old_fval, old_old_fval, gfkp1)->_line_search_wolfe12(f, fprime, xk, pk, gfk, old_fval, old_old_fval)
A:scipy.optimize._optimize.sqrt_eps->sqrt(2.2e-16)
A:scipy.optimize._optimize.q->numpy.abs(q)
A:scipy.optimize._optimize.fu->func(*(u,) + self.args)
A:scipy.optimize._optimize.(xa, xb, xc, fa, fb, fc, funcalls)->bracket(func, xa=brack[0], xb=brack[1], args=args)
A:scipy.optimize._optimize.fa->func(*(xa,) + args)
A:scipy.optimize._optimize.fb->func(*(xb,) + args)
A:scipy.optimize._optimize.fc->func(*(xc,) + args)
A:scipy.optimize._optimize.tmp2->numpy.abs(tmp2)
A:scipy.optimize._optimize.brent->Brent(func=func, args=args, tol=tol, full_output=True, maxiter=maxiter, disp=disp)
A:scipy.optimize._optimize.(x, fval, nit, nfev)->Brent(func=func, args=args, tol=tol, full_output=True, maxiter=maxiter, disp=disp).get_result(full_output=True)
A:scipy.optimize._optimize.fw->func(*(w,) + args)
A:scipy.optimize._optimize.(nonzero,)->alpha.nonzero()
A:scipy.optimize._optimize.lmin_pos->numpy.where(pos, low, 0)
A:scipy.optimize._optimize.lmin_neg->numpy.where(pos, 0, high)
A:scipy.optimize._optimize.lmax_pos->numpy.where(pos, high, 0)
A:scipy.optimize._optimize.lmax_neg->numpy.where(pos, 0, low)
A:scipy.optimize._optimize.lmin->numpy.max(lmin_pos + lmin_neg)
A:scipy.optimize._optimize.lmax->numpy.min(lmax_pos + lmax_neg)
A:scipy.optimize._optimize.(alpha_min, fret, _, _)->brent(myfunc, full_output=1, tol=tol)
A:scipy.optimize._optimize.bound->_line_for_search(p, xi, lower_bound, upper_bound)
A:scipy.optimize._optimize.direc->asarray(direc, dtype=float)
A:scipy.optimize._optimize.x1->asarray(x0).flatten().copy()
A:scipy.optimize._optimize.(fval, x, direc1)->_linesearch_powell(func, x, direc1, tol=xtol * 100, lower_bound=lower_bound, upper_bound=upper_bound, fval=fval)
A:scipy.optimize._optimize.(_, lmax)->_line_for_search(x, direc1, lower_bound, upper_bound)
A:scipy.optimize._optimize.fx2->squeeze(func(x2))
A:scipy.optimize._optimize.lrange->list(ranges)
A:scipy.optimize._optimize.lrange[k]->slice(*lrange[k])
A:scipy.optimize._optimize.wrapped_func->_Brute_Wrapper(func, args)
A:scipy.optimize._optimize.Jout->numpy.reshape(Jout, inpt_shape[1:])
A:scipy.optimize._optimize.grid->numpy.reshape(grid.T, inpt_shape)
A:scipy.optimize._optimize.Nshape->shape(Jout)
A:scipy.optimize._optimize.indx->argmin(Jout.ravel(), axis=-1)
A:scipy.optimize._optimize.Nindx->numpy.empty(N, int)
A:scipy.optimize._optimize.xmin->numpy.empty(N, float)
A:scipy.optimize._optimize.finish_kwargs->dict()
A:scipy.optimize._optimize.text->textwrap.dedent(doc).strip()
A:scipy.optimize._optimize.solver->solver.lower().lower()
A:scipy.optimize._optimize.method->method.lower().lower()
A:scipy.optimize._optimize.methods->dict(doc_routines[solver])
A:scipy.optimize._optimize.parts->name.split('.')
A:scipy.optimize._optimize.mod_name->'.'.join(parts[:-1])
A:scipy.optimize._optimize.obj->getattr(sys.modules[mod_name], parts[-1])
scipy.optimize.Brent(self,func,args=(),tol=1.48e-08,maxiter=500,full_output=0,disp=0)
scipy.optimize.Brent.get_bracket_info(self)
scipy.optimize.Brent.get_result(self,full_output=False)
scipy.optimize.Brent.optimize(self)
scipy.optimize.Brent.set_bracket(self,brack=None)
scipy.optimize.MemoizeJac(self,fun)
scipy.optimize.MemoizeJac._compute_if_needed(self,x,*args)
scipy.optimize.MemoizeJac.derivative(self,x,*args)
scipy.optimize.OptimizeResult(dict)
scipy.optimize.OptimizeResult.__dir__(self)
scipy.optimize.OptimizeResult.__getattr__(self,name)
scipy.optimize.OptimizeResult.__repr__(self)
scipy.optimize.OptimizeWarning(UserWarning)
scipy.optimize._Brute_Wrapper(self,f,args)
scipy.optimize._LineSearchError(RuntimeError)
scipy.optimize._MaxFuncCallError(RuntimeError)
scipy.optimize._check_clip_x(x,bounds)
scipy.optimize._check_unknown_options(unknown_options)
scipy.optimize._clip_x_for_func(func,bounds)
scipy.optimize._dict_formatter(d,n=0,mplus=1,sorter=None)
scipy.optimize._endprint(x,flag,fval,maxfun,xtol,disp)
scipy.optimize._float_formatter_10(x)
scipy.optimize._indenter(s,n=0)
scipy.optimize._line_for_search(x0,alpha,lower_bound,upper_bound)
scipy.optimize._line_search_wolfe12(f,fprime,xk,pk,gfk,old_fval,old_old_fval,**kwargs)
scipy.optimize._linesearch_powell(func,p,xi,tol=0.001,lower_bound=None,upper_bound=None,fval=None)
scipy.optimize._minimize_bfgs(fun,x0,args=(),jac=None,callback=None,gtol=1e-05,norm=Inf,eps=_epsilon,maxiter=None,disp=False,return_all=False,finite_diff_rel_step=None,xrtol=0,**unknown_options)
scipy.optimize._minimize_cg(fun,x0,args=(),jac=None,callback=None,gtol=1e-05,norm=Inf,eps=_epsilon,maxiter=None,disp=False,return_all=False,finite_diff_rel_step=None,**unknown_options)
scipy.optimize._minimize_neldermead(func,x0,args=(),callback=None,maxiter=None,maxfev=None,disp=False,return_all=False,initial_simplex=None,xatol=0.0001,fatol=0.0001,adaptive=False,bounds=None,**unknown_options)
scipy.optimize._minimize_newtoncg(fun,x0,args=(),jac=None,hess=None,hessp=None,callback=None,xtol=1e-05,eps=_epsilon,maxiter=None,disp=False,return_all=False,**unknown_options)
scipy.optimize._minimize_powell(func,x0,args=(),callback=None,bounds=None,xtol=0.0001,ftol=0.0001,maxiter=None,maxfev=None,disp=False,direc=None,return_all=False,**unknown_options)
scipy.optimize._minimize_scalar_bounded(func,bounds,args=(),xatol=1e-05,maxiter=500,disp=0,**unknown_options)
scipy.optimize._minimize_scalar_brent(func,brack=None,args=(),xtol=1.48e-08,maxiter=500,disp=0,**unknown_options)
scipy.optimize._minimize_scalar_golden(func,brack=None,args=(),xtol=_epsilon,maxiter=5000,disp=0,**unknown_options)
scipy.optimize._optimize.Brent(self,func,args=(),tol=1.48e-08,maxiter=500,full_output=0,disp=0)
scipy.optimize._optimize.Brent.__init__(self,func,args=(),tol=1.48e-08,maxiter=500,full_output=0,disp=0)
scipy.optimize._optimize.Brent.get_bracket_info(self)
scipy.optimize._optimize.Brent.get_result(self,full_output=False)
scipy.optimize._optimize.Brent.optimize(self)
scipy.optimize._optimize.Brent.set_bracket(self,brack=None)
scipy.optimize._optimize.MemoizeJac(self,fun)
scipy.optimize._optimize.MemoizeJac.__init__(self,fun)
scipy.optimize._optimize.MemoizeJac._compute_if_needed(self,x,*args)
scipy.optimize._optimize.MemoizeJac.derivative(self,x,*args)
scipy.optimize._optimize.OptimizeResult(dict)
scipy.optimize._optimize.OptimizeResult.__dir__(self)
scipy.optimize._optimize.OptimizeResult.__getattr__(self,name)
scipy.optimize._optimize.OptimizeResult.__repr__(self)
scipy.optimize._optimize.OptimizeWarning(UserWarning)
scipy.optimize._optimize._Brute_Wrapper(self,f,args)
scipy.optimize._optimize._Brute_Wrapper.__init__(self,f,args)
scipy.optimize._optimize._LineSearchError(RuntimeError)
scipy.optimize._optimize._MaxFuncCallError(RuntimeError)
scipy.optimize._optimize._check_clip_x(x,bounds)
scipy.optimize._optimize._check_unknown_options(unknown_options)
scipy.optimize._optimize._clip_x_for_func(func,bounds)
scipy.optimize._optimize._dict_formatter(d,n=0,mplus=1,sorter=None)
scipy.optimize._optimize._endprint(x,flag,fval,maxfun,xtol,disp)
scipy.optimize._optimize._float_formatter_10(x)
scipy.optimize._optimize._indenter(s,n=0)
scipy.optimize._optimize._line_for_search(x0,alpha,lower_bound,upper_bound)
scipy.optimize._optimize._line_search_wolfe12(f,fprime,xk,pk,gfk,old_fval,old_old_fval,**kwargs)
scipy.optimize._optimize._linesearch_powell(func,p,xi,tol=0.001,lower_bound=None,upper_bound=None,fval=None)
scipy.optimize._optimize._minimize_bfgs(fun,x0,args=(),jac=None,callback=None,gtol=1e-05,norm=Inf,eps=_epsilon,maxiter=None,disp=False,return_all=False,finite_diff_rel_step=None,xrtol=0,**unknown_options)
scipy.optimize._optimize._minimize_cg(fun,x0,args=(),jac=None,callback=None,gtol=1e-05,norm=Inf,eps=_epsilon,maxiter=None,disp=False,return_all=False,finite_diff_rel_step=None,**unknown_options)
scipy.optimize._optimize._minimize_neldermead(func,x0,args=(),callback=None,maxiter=None,maxfev=None,disp=False,return_all=False,initial_simplex=None,xatol=0.0001,fatol=0.0001,adaptive=False,bounds=None,**unknown_options)
scipy.optimize._optimize._minimize_newtoncg(fun,x0,args=(),jac=None,hess=None,hessp=None,callback=None,xtol=1e-05,eps=_epsilon,maxiter=None,disp=False,return_all=False,**unknown_options)
scipy.optimize._optimize._minimize_powell(func,x0,args=(),callback=None,bounds=None,xtol=0.0001,ftol=0.0001,maxiter=None,maxfev=None,disp=False,direc=None,return_all=False,**unknown_options)
scipy.optimize._optimize._minimize_scalar_bounded(func,bounds,args=(),xatol=1e-05,maxiter=500,disp=0,**unknown_options)
scipy.optimize._optimize._minimize_scalar_brent(func,brack=None,args=(),xtol=1.48e-08,maxiter=500,disp=0,**unknown_options)
scipy.optimize._optimize._minimize_scalar_golden(func,brack=None,args=(),xtol=_epsilon,maxiter=5000,disp=0,**unknown_options)
scipy.optimize._optimize._prepare_scalar_function(fun,x0,jac=None,args=(),bounds=None,epsilon=None,finite_diff_rel_step=None,hess=None)
scipy.optimize._optimize._wrap_scalar_function(function,args)
scipy.optimize._optimize._wrap_scalar_function_maxfun_validation(function,args,maxfun)
scipy.optimize._optimize.approx_fhess_p(x0,p,fprime,epsilon,*args)
scipy.optimize._optimize.approx_fprime(xk,f,epsilon=_epsilon,*args)
scipy.optimize._optimize.bracket(func,xa=0.0,xb=1.0,args=(),grow_limit=110.0,maxiter=1000)
scipy.optimize._optimize.brent(func,args=(),brack=None,tol=1.48e-08,full_output=0,maxiter=500)
scipy.optimize._optimize.brute(func,ranges,args=(),Ns=20,full_output=0,finish=fmin,disp=False,workers=1)
scipy.optimize._optimize.check_grad(func,grad,x0,*args,epsilon=_epsilon,direction='all',seed=None)
scipy.optimize._optimize.fmin(func,x0,args=(),xtol=0.0001,ftol=0.0001,maxiter=None,maxfun=None,full_output=0,disp=1,retall=0,callback=None,initial_simplex=None)
scipy.optimize._optimize.fmin_bfgs(f,x0,fprime=None,args=(),gtol=1e-05,norm=Inf,epsilon=_epsilon,maxiter=None,full_output=0,disp=1,retall=0,callback=None,xrtol=0)
scipy.optimize._optimize.fmin_cg(f,x0,fprime=None,args=(),gtol=1e-05,norm=Inf,epsilon=_epsilon,maxiter=None,full_output=0,disp=1,retall=0,callback=None)
scipy.optimize._optimize.fmin_ncg(f,x0,fprime,fhess_p=None,fhess=None,args=(),avextol=1e-05,epsilon=_epsilon,maxiter=None,full_output=0,disp=1,retall=0,callback=None)
scipy.optimize._optimize.fmin_powell(func,x0,args=(),xtol=0.0001,ftol=0.0001,maxiter=None,maxfun=None,full_output=0,disp=1,retall=0,callback=None,direc=None)
scipy.optimize._optimize.fminbound(func,x1,x2,args=(),xtol=1e-05,maxfun=500,full_output=0,disp=1)
scipy.optimize._optimize.golden(func,args=(),brack=None,tol=_epsilon,full_output=0,maxiter=5000)
scipy.optimize._optimize.is_array_scalar(x)
scipy.optimize._optimize.rosen(x)
scipy.optimize._optimize.rosen_der(x)
scipy.optimize._optimize.rosen_hess(x)
scipy.optimize._optimize.rosen_hess_prod(x,p)
scipy.optimize._optimize.show_options(solver=None,method=None,disp=True)
scipy.optimize._optimize.vecnorm(x,ord=2)
scipy.optimize._prepare_scalar_function(fun,x0,jac=None,args=(),bounds=None,epsilon=None,finite_diff_rel_step=None,hess=None)
scipy.optimize._wrap_scalar_function(function,args)
scipy.optimize._wrap_scalar_function_maxfun_validation(function,args,maxfun)
scipy.optimize.approx_fhess_p(x0,p,fprime,epsilon,*args)
scipy.optimize.approx_fprime(xk,f,epsilon=_epsilon,*args)
scipy.optimize.bracket(func,xa=0.0,xb=1.0,args=(),grow_limit=110.0,maxiter=1000)
scipy.optimize.brent(func,args=(),brack=None,tol=1.48e-08,full_output=0,maxiter=500)
scipy.optimize.brute(func,ranges,args=(),Ns=20,full_output=0,finish=fmin,disp=False,workers=1)
scipy.optimize.check_grad(func,grad,x0,*args,epsilon=_epsilon,direction='all',seed=None)
scipy.optimize.fmin(func,x0,args=(),xtol=0.0001,ftol=0.0001,maxiter=None,maxfun=None,full_output=0,disp=1,retall=0,callback=None,initial_simplex=None)
scipy.optimize.fmin_bfgs(f,x0,fprime=None,args=(),gtol=1e-05,norm=Inf,epsilon=_epsilon,maxiter=None,full_output=0,disp=1,retall=0,callback=None,xrtol=0)
scipy.optimize.fmin_cg(f,x0,fprime=None,args=(),gtol=1e-05,norm=Inf,epsilon=_epsilon,maxiter=None,full_output=0,disp=1,retall=0,callback=None)
scipy.optimize.fmin_ncg(f,x0,fprime,fhess_p=None,fhess=None,args=(),avextol=1e-05,epsilon=_epsilon,maxiter=None,full_output=0,disp=1,retall=0,callback=None)
scipy.optimize.fmin_powell(func,x0,args=(),xtol=0.0001,ftol=0.0001,maxiter=None,maxfun=None,full_output=0,disp=1,retall=0,callback=None,direc=None)
scipy.optimize.fminbound(func,x1,x2,args=(),xtol=1e-05,maxfun=500,full_output=0,disp=1)
scipy.optimize.golden(func,args=(),brack=None,tol=_epsilon,full_output=0,maxiter=5000)
scipy.optimize.is_array_scalar(x)
scipy.optimize.rosen(x)
scipy.optimize.rosen_der(x)
scipy.optimize.rosen_hess(x)
scipy.optimize.rosen_hess_prod(x,p)
scipy.optimize.show_options(solver=None,method=None,disp=True)
scipy.optimize.vecnorm(x,ord=2)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_nonlin.py----------------------------------------
A:scipy.optimize.tests.test_nonlin.d->abs(a - b).max()
A:scipy.optimize.tests.test_nonlin.A->numpy.random.randn(N, N)
A:scipy.optimize.tests.test_nonlin.b->numpy.random.randn(N)
A:scipy.optimize.tests.test_nonlin.J0->numpy.array([[-4.256, 14.7], [0.8394989, 0.59964207]])
A:scipy.optimize.tests.test_nonlin.v->rand(N)
A:scipy.optimize.tests.test_nonlin.x->scipy.optimize._nonlin.diagbroyden(F, F.xin, iter=11, alpha=1)
A:scipy.optimize.tests.test_nonlin.res->root(F, F.xin, method='diagbroyden', options={'nit': 11, 'jac_options': {'alpha': 1}})
A:scipy.optimize.tests.test_nonlin.jac->jac_cls(**kw)
A:scipy.optimize.tests.test_nonlin.sol->scipy.optimize._nonlin.nonlin_solve(func, np.zeros(N), jac, maxiter=maxiter, f_tol=1e-06, line_search=None, verbose=0)
A:scipy.optimize.tests.test_nonlin.q->numpy.random.rand(*a)
A:scipy.optimize.tests.test_nonlin.self.A->rand(N, N)
A:scipy.optimize.tests.test_nonlin.x0->numpy.random.rand(N)
A:scipy.optimize.tests.test_nonlin.Jd->numpy.array(jac)
A:scipy.optimize.tests.test_nonlin.Gv->jac_cls(**kw).rsolve(v)
A:scipy.optimize.tests.test_nonlin.Gv2->numpy.linalg.solve(Jd.T.conj(), v)
A:scipy.optimize.tests.test_nonlin.Jv->jac_cls(**kw).rmatvec(v)
A:scipy.optimize.tests.test_nonlin.Jv2->jac_cls(**kw).rmatvec(jac.rsolve(Jv))
scipy.optimize.tests.testF(x)
scipy.optimize.tests.testF2(x)
scipy.optimize.tests.testF2_lucky(x)
scipy.optimize.tests.testF3(x)
scipy.optimize.tests.testF4_powell(x)
scipy.optimize.tests.testF5(x)
scipy.optimize.tests.testF6(x)
scipy.optimize.tests.testTestJacobianDotSolve
scipy.optimize.tests.testTestJacobianDotSolve._check_dot(self,jac_cls,complex=False,tol=1e-06,**kw)
scipy.optimize.tests.testTestJacobianDotSolve._func(self,x)
scipy.optimize.tests.testTestJacobianDotSolve.test_anderson(self)
scipy.optimize.tests.testTestJacobianDotSolve.test_broyden1(self)
scipy.optimize.tests.testTestJacobianDotSolve.test_broyden2(self)
scipy.optimize.tests.testTestJacobianDotSolve.test_diagbroyden(self)
scipy.optimize.tests.testTestJacobianDotSolve.test_excitingmixing(self)
scipy.optimize.tests.testTestJacobianDotSolve.test_krylov(self)
scipy.optimize.tests.testTestJacobianDotSolve.test_linearmixing(self)
scipy.optimize.tests.testTestLinear
scipy.optimize.tests.testTestLinear._check(self,jac,N,maxiter,complex=False,**kw)
scipy.optimize.tests.testTestLinear.test_anderson(self)
scipy.optimize.tests.testTestLinear.test_broyden1(self)
scipy.optimize.tests.testTestLinear.test_broyden2(self)
scipy.optimize.tests.testTestLinear.test_krylov(self)
scipy.optimize.tests.testTestNonlin
scipy.optimize.tests.testTestNonlin._check_func_fail(self,*a,**kw)
scipy.optimize.tests.testTestNonlin._check_nonlin_func(self,f,func,f_tol=0.01)
scipy.optimize.tests.testTestNonlin._check_root(self,f,method,f_tol=0.01)
scipy.optimize.tests.testTestNonlin.test_problem_nonlin(self)
scipy.optimize.tests.testTestNonlin.test_problem_root(self)
scipy.optimize.tests.testTestNonlin.test_tol_norm_called(self,method)
scipy.optimize.tests.testTestNonlinOldTests
scipy.optimize.tests.testTestNonlinOldTests.test_anderson(self)
scipy.optimize.tests.testTestNonlinOldTests.test_broyden1(self)
scipy.optimize.tests.testTestNonlinOldTests.test_broyden2(self)
scipy.optimize.tests.testTestNonlinOldTests.test_diagbroyden(self)
scipy.optimize.tests.testTestNonlinOldTests.test_exciting(self)
scipy.optimize.tests.testTestNonlinOldTests.test_linearmixing(self)
scipy.optimize.tests.testTestNonlinOldTests.test_root_anderson(self)
scipy.optimize.tests.testTestNonlinOldTests.test_root_broyden1(self)
scipy.optimize.tests.testTestNonlinOldTests.test_root_broyden2(self)
scipy.optimize.tests.testTestNonlinOldTests.test_root_diagbroyden(self)
scipy.optimize.tests.testTestNonlinOldTests.test_root_excitingmixing(self)
scipy.optimize.tests.testTestNonlinOldTests.test_root_linearmixing(self)
scipy.optimize.tests.testTestSecant
scipy.optimize.tests.testTestSecant._check_secant(self,jac_cls,npoints=1,**kw)
scipy.optimize.tests.testTestSecant.test_anderson(self)
scipy.optimize.tests.testTestSecant.test_broyden1(self)
scipy.optimize.tests.testTestSecant.test_broyden1_update(self)
scipy.optimize.tests.testTestSecant.test_broyden2(self)
scipy.optimize.tests.testTestSecant.test_broyden2_update(self)
scipy.optimize.tests.test_nonlin.F(x)
scipy.optimize.tests.test_nonlin.F2(x)
scipy.optimize.tests.test_nonlin.F2_lucky(x)
scipy.optimize.tests.test_nonlin.F3(x)
scipy.optimize.tests.test_nonlin.F4_powell(x)
scipy.optimize.tests.test_nonlin.F5(x)
scipy.optimize.tests.test_nonlin.F6(x)
scipy.optimize.tests.test_nonlin.TestJacobianDotSolve
scipy.optimize.tests.test_nonlin.TestJacobianDotSolve._check_dot(self,jac_cls,complex=False,tol=1e-06,**kw)
scipy.optimize.tests.test_nonlin.TestJacobianDotSolve._func(self,x)
scipy.optimize.tests.test_nonlin.TestJacobianDotSolve.test_anderson(self)
scipy.optimize.tests.test_nonlin.TestJacobianDotSolve.test_broyden1(self)
scipy.optimize.tests.test_nonlin.TestJacobianDotSolve.test_broyden2(self)
scipy.optimize.tests.test_nonlin.TestJacobianDotSolve.test_diagbroyden(self)
scipy.optimize.tests.test_nonlin.TestJacobianDotSolve.test_excitingmixing(self)
scipy.optimize.tests.test_nonlin.TestJacobianDotSolve.test_krylov(self)
scipy.optimize.tests.test_nonlin.TestJacobianDotSolve.test_linearmixing(self)
scipy.optimize.tests.test_nonlin.TestLinear
scipy.optimize.tests.test_nonlin.TestLinear._check(self,jac,N,maxiter,complex=False,**kw)
scipy.optimize.tests.test_nonlin.TestLinear.test_anderson(self)
scipy.optimize.tests.test_nonlin.TestLinear.test_broyden1(self)
scipy.optimize.tests.test_nonlin.TestLinear.test_broyden2(self)
scipy.optimize.tests.test_nonlin.TestLinear.test_krylov(self)
scipy.optimize.tests.test_nonlin.TestNonlin
scipy.optimize.tests.test_nonlin.TestNonlin._check_func_fail(self,*a,**kw)
scipy.optimize.tests.test_nonlin.TestNonlin._check_nonlin_func(self,f,func,f_tol=0.01)
scipy.optimize.tests.test_nonlin.TestNonlin._check_root(self,f,method,f_tol=0.01)
scipy.optimize.tests.test_nonlin.TestNonlin.test_problem_nonlin(self)
scipy.optimize.tests.test_nonlin.TestNonlin.test_problem_root(self)
scipy.optimize.tests.test_nonlin.TestNonlin.test_tol_norm_called(self,method)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_anderson(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_broyden1(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_broyden2(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_diagbroyden(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_exciting(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_linearmixing(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_root_anderson(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_root_broyden1(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_root_broyden2(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_root_diagbroyden(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_root_excitingmixing(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_root_linearmixing(self)
scipy.optimize.tests.test_nonlin.TestSecant
scipy.optimize.tests.test_nonlin.TestSecant._check_secant(self,jac_cls,npoints=1,**kw)
scipy.optimize.tests.test_nonlin.TestSecant.test_anderson(self)
scipy.optimize.tests.test_nonlin.TestSecant.test_broyden1(self)
scipy.optimize.tests.test_nonlin.TestSecant.test_broyden1_update(self)
scipy.optimize.tests.test_nonlin.TestSecant.test_broyden2(self)
scipy.optimize.tests.test_nonlin.TestSecant.test_broyden2_update(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_linesearch.py----------------------------------------
A:scipy.optimize.tests.test_linesearch.phi1->phi(s)
A:scipy.optimize.tests.test_linesearch.phi0->phi(0)
A:scipy.optimize.tests.test_linesearch.derphi0->derphi(0)
A:scipy.optimize.tests.test_linesearch.derphi1->derphi(s)
A:scipy.optimize.tests.test_linesearch.f->numpy.dot(x, x)
A:scipy.optimize.tests.test_linesearch.df->numpy.dot(self.A + self.A.T, x)
A:scipy.optimize.tests.test_linesearch.value->getattr(self, name)
A:scipy.optimize.tests.test_linesearch.self.A->numpy.random.randn(self.N, self.N)
A:scipy.optimize.tests.test_linesearch.x->numpy.random.randn(self.N)
A:scipy.optimize.tests.test_linesearch.p->numpy.array([1, 0])
A:scipy.optimize.tests.test_linesearch.old_fv->float(np.random.randn())
A:scipy.optimize.tests.test_linesearch.(s, phi1, phi0)->scipy.optimize._linesearch.scalar_search_wolfe1(phi, derphi, phi(0), old_phi0, derphi(0))
A:scipy.optimize.tests.test_linesearch.(s, phi1, phi0, derphi1)->scipy.optimize._linesearch.scalar_search_wolfe2(phi, derphi, phi(0), old_phi0, derphi(0))
A:scipy.optimize.tests.test_linesearch.(s, _, _, _)->scipy.optimize._linesearch.scalar_search_wolfe2(phi, derphi)
A:scipy.optimize.tests.test_linesearch.(s, phi1)->scipy.optimize._linesearch.scalar_search_armijo(phi, phi(0), -1, alpha0=1)
A:scipy.optimize.tests.test_linesearch.f0->f(x)
A:scipy.optimize.tests.test_linesearch.g0->fprime(x)
A:scipy.optimize.tests.test_linesearch.(s, fc, gc, fv, ofv, gv)->scipy.optimize._linesearch.line_search_wolfe2(f, fprime, x, p, g0, f0, old_f, amax=smax)
A:scipy.optimize.tests.test_linesearch.(s, _, _, _, _, _)->assert_warns(LineSearchWarning, ls.line_search_wolfe2, f, fp, x, p, amax=29, c2=c2)
A:scipy.optimize.tests.test_linesearch.(s, fc, fv)->scipy.optimize._linesearch.line_search_armijo(f, x, p, g0, f0)
A:scipy.optimize.tests.test_linesearch.r->func(phi, derphi, phi(0), None, derphi(0))
scipy.optimize.tests.test_linesearch.TestLineSearch
scipy.optimize.tests.test_linesearch.TestLineSearch._line_func_1(self,x)
scipy.optimize.tests.test_linesearch.TestLineSearch._line_func_2(self,x)
scipy.optimize.tests.test_linesearch.TestLineSearch._scalar_func_1(self,s)
scipy.optimize.tests.test_linesearch.TestLineSearch._scalar_func_2(self,s)
scipy.optimize.tests.test_linesearch.TestLineSearch._scalar_func_3(self,s)
scipy.optimize.tests.test_linesearch.TestLineSearch.line_iter(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.scalar_iter(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.setup_method(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.test_armijo_terminate_1(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.test_line_search_armijo(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.test_line_search_wolfe1(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.test_line_search_wolfe2(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.test_line_search_wolfe2_bounds(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.test_scalar_search_armijo(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.test_scalar_search_wolfe1(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.test_scalar_search_wolfe2(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.test_scalar_search_wolfe2_regression(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.test_scalar_search_wolfe2_with_low_amax(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.test_wolfe_terminate(self)
scipy.optimize.tests.test_linesearch.assert_armijo(s,phi,c1=0.0001,err_msg='')
scipy.optimize.tests.test_linesearch.assert_fp_equal(x,y,err_msg='',nulp=50)
scipy.optimize.tests.test_linesearch.assert_line_armijo(x,p,s,f,**kw)
scipy.optimize.tests.test_linesearch.assert_line_wolfe(x,p,s,f,fprime,**kw)
scipy.optimize.tests.test_linesearch.assert_wolfe(s,phi,derphi,c1=0.0001,c2=0.9,err_msg='')


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_trustregion.py----------------------------------------
A:scipy.optimize.tests.test_trustregion.self.accum->numpy.array(x)
A:scipy.optimize.tests.test_trustregion.r->minimize(rosen, x0=self.x_opt, jac=rosen_der, hess=rosen_hess, tol=1e-08, method='trust-exact')
A:scipy.optimize.tests.test_trustregion.accumulator->Accumulator()
A:scipy.optimize.tests.test_trustregion.r_dogleg->minimize(f, x0, jac=g, hess=h, tol=1e-08, method='dogleg', options={'return_all': True})
A:scipy.optimize.tests.test_trustregion.r_trust_ncg->minimize(f, x0, jac=g, hess=h, tol=1e-08, method='trust-ncg', options={'return_all': True})
A:scipy.optimize.tests.test_trustregion.r_trust_krylov->minimize(f, x0, jac=g, hess=h, tol=1e-08, method='trust-krylov', options={'return_all': True})
A:scipy.optimize.tests.test_trustregion.r_ncg->minimize(f, x0, jac=g, hess=h, tol=1e-08, method='newton-cg', options={'return_all': True})
A:scipy.optimize.tests.test_trustregion.r_iterative->minimize(f, x0, jac=g, hess=h, tol=1e-08, method='trust-exact', options={'return_all': True})
scipy.optimize.tests.test_trustregion.Accumulator(self)
scipy.optimize.tests.test_trustregion.Accumulator.__init__(self)
scipy.optimize.tests.test_trustregion.TestTrustRegionSolvers
scipy.optimize.tests.test_trustregion.TestTrustRegionSolvers.setup_method(self)
scipy.optimize.tests.test_trustregion.TestTrustRegionSolvers.test_dogleg_accuracy(self)
scipy.optimize.tests.test_trustregion.TestTrustRegionSolvers.test_dogleg_callback(self)
scipy.optimize.tests.test_trustregion.TestTrustRegionSolvers.test_dogleg_user_warning(self)
scipy.optimize.tests.test_trustregion.TestTrustRegionSolvers.test_solver_concordance(self)
scipy.optimize.tests.test_trustregion.TestTrustRegionSolvers.test_trust_exact_start_in_optimum(self)
scipy.optimize.tests.test_trustregion.TestTrustRegionSolvers.test_trust_krylov_start_in_optimum(self)
scipy.optimize.tests.test_trustregion.TestTrustRegionSolvers.test_trust_ncg_hessp(self)
scipy.optimize.tests.test_trustregion.TestTrustRegionSolvers.test_trust_ncg_start_in_optimum(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_nnls.py----------------------------------------
A:scipy.optimize.tests.test_nnls.a->numpy.random.RandomState(1234).uniform(size=(100, 100))
A:scipy.optimize.tests.test_nnls.x->arange(5.0)
A:scipy.optimize.tests.test_nnls.y->dot(a, x)
A:scipy.optimize.tests.test_nnls.(x, res)->nnls(a, y)
A:scipy.optimize.tests.test_nnls.rndm->numpy.random.RandomState(1234)
A:scipy.optimize.tests.test_nnls.b->numpy.random.RandomState(1234).uniform(size=100)
scipy.optimize.tests.test_nnls.TestNNLS
scipy.optimize.tests.test_nnls.TestNNLS.test_maxiter(self)
scipy.optimize.tests.test_nnls.TestNNLS.test_nnls(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_hessian_update_strategy.py----------------------------------------
A:scipy.optimize.tests.test_hessian_update_strategy.rng->numpy.random.RandomState(random_state)
A:scipy.optimize.tests.test_hessian_update_strategy.self.x0->numpy.random.RandomState(random_state).uniform(-1, 1, n)
A:scipy.optimize.tests.test_hessian_update_strategy.self.x_opt->numpy.ones(n)
A:scipy.optimize.tests.test_hessian_update_strategy.x->numpy.atleast_1d(x)
A:scipy.optimize.tests.test_hessian_update_strategy.r->numpy.sum(100.0 * (x[1:] - x[:-1] ** 2.0) ** 2.0 + (1 - x[:-1]) ** 2.0, axis=0)
A:scipy.optimize.tests.test_hessian_update_strategy.der->numpy.zeros_like(x)
A:scipy.optimize.tests.test_hessian_update_strategy.diagonal->numpy.zeros(len(x), dtype=x.dtype)
A:scipy.optimize.tests.test_hessian_update_strategy.B->numpy.copy(hess.get_matrix())
A:scipy.optimize.tests.test_hessian_update_strategy.prob->Rosenbrock(n=5)
A:scipy.optimize.tests.test_hessian_update_strategy.hess->BFGS(init_scale=1, min_curvature=10)
A:scipy.optimize.tests.test_hessian_update_strategy.inv_hess->deepcopy(quasi_newton)
A:scipy.optimize.tests.test_hessian_update_strategy.H->deepcopy(quasi_newton).get_matrix()
A:scipy.optimize.tests.test_hessian_update_strategy.B_true->Rosenbrock(n=5).hess(x_list[len(delta_x)])
A:scipy.optimize.tests.test_hessian_update_strategy.B_updated->numpy.copy(hess.get_matrix())
scipy.optimize.tests.test_hessian_update_strategy.Rosenbrock(self,n=2,random_state=0)
scipy.optimize.tests.test_hessian_update_strategy.Rosenbrock.__init__(self,n=2,random_state=0)
scipy.optimize.tests.test_hessian_update_strategy.Rosenbrock.fun(self,x)
scipy.optimize.tests.test_hessian_update_strategy.Rosenbrock.grad(self,x)
scipy.optimize.tests.test_hessian_update_strategy.Rosenbrock.hess(self,x)
scipy.optimize.tests.test_hessian_update_strategy.TestHessianUpdateStrategy(TestCase)
scipy.optimize.tests.test_hessian_update_strategy.TestHessianUpdateStrategy.test_BFGS_skip_update(self)
scipy.optimize.tests.test_hessian_update_strategy.TestHessianUpdateStrategy.test_SR1_skip_update(self)
scipy.optimize.tests.test_hessian_update_strategy.TestHessianUpdateStrategy.test_hessian_initialization(self)
scipy.optimize.tests.test_hessian_update_strategy.TestHessianUpdateStrategy.test_rosenbrock_with_no_exception(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_lsq_common.py----------------------------------------
A:scipy.optimize.tests.test_lsq_common.lb->numpy.array([-np.inf, -2])
A:scipy.optimize.tests.test_lsq_common.ub->numpy.array([5, np.inf])
A:scipy.optimize.tests.test_lsq_common.x->numpy.array([-2, 3])
A:scipy.optimize.tests.test_lsq_common.s->numpy.zeros(3)
A:scipy.optimize.tests.test_lsq_common.(step, hits)->step_size_to_bound(x, s, lb, ub)
A:scipy.optimize.tests.test_lsq_common.active->find_active_constraints(x, lb, ub, rtol=0)
A:scipy.optimize.tests.test_lsq_common.x_new->make_strictly_feasible(x, lb, ub, rstep=1e-08)
A:scipy.optimize.tests.test_lsq_common.g->numpy.array([1.0, 0.1, -10.0, 0.0])
A:scipy.optimize.tests.test_lsq_common.(v, dv)->CL_scaling_vector(x, g, lb, ub)
A:scipy.optimize.tests.test_lsq_common.self.J->numpy.array([[0.1, 0.2], [-1.0, 1.0], [0.5, 0.2]])
A:scipy.optimize.tests.test_lsq_common.self.g->numpy.array([0.8, -2.0])
A:scipy.optimize.tests.test_lsq_common.self.diag->numpy.array([1.0, 2.0])
A:scipy.optimize.tests.test_lsq_common.(a, b)->build_quadratic_1d(self.J, self.g, s, diag=self.diag)
A:scipy.optimize.tests.test_lsq_common.s0->numpy.array([0.5, 0.5])
A:scipy.optimize.tests.test_lsq_common.(a, b, c)->build_quadratic_1d(self.J, self.g, s, diag=self.diag, s0=s0)
A:scipy.optimize.tests.test_lsq_common.(t, y)->minimize_quadratic_1d(a, b, -np.inf, 0)
A:scipy.optimize.tests.test_lsq_common.value->evaluate_quadratic(self.J, self.g, s, diag=self.diag)
A:scipy.optimize.tests.test_lsq_common.values->evaluate_quadratic(self.J, self.g, s, diag=self.diag)
A:scipy.optimize.tests.test_lsq_common.(t_neg, t_pos)->intersect_trust_region(x, s, Delta)
A:scipy.optimize.tests.test_lsq_common.y->numpy.array([10, 10], dtype=float)
A:scipy.optimize.tests.test_lsq_common.(x, g)->reflective_transformation(y, lb, ub)
A:scipy.optimize.tests.test_lsq_common.A->numpy.arange(6).reshape((3, 2))
A:scipy.optimize.tests.test_lsq_common.d_left->numpy.array([-1, 2, 5])
A:scipy.optimize.tests.test_lsq_common.DA->numpy.diag(d_left).dot(A)
A:scipy.optimize.tests.test_lsq_common.J_left->left_multiplied_operator(A, d_left)
A:scipy.optimize.tests.test_lsq_common.d_right->numpy.array([5, 10])
A:scipy.optimize.tests.test_lsq_common.AD->numpy.arange(6).reshape((3, 2)).dot(np.diag(d_right))
A:scipy.optimize.tests.test_lsq_common.J_right->right_multiplied_operator(A, d_right)
A:scipy.optimize.tests.test_lsq_common.xt->numpy.array([0, -2, 15])
scipy.optimize.tests.test_lsq_common.TestBounds
scipy.optimize.tests.test_lsq_common.TestBounds.test_find_active_constraints(self)
scipy.optimize.tests.test_lsq_common.TestBounds.test_make_strictly_feasible(self)
scipy.optimize.tests.test_lsq_common.TestBounds.test_scaling_vector(self)
scipy.optimize.tests.test_lsq_common.TestBounds.test_step_size_to_bounds(self)
scipy.optimize.tests.test_lsq_common.TestQuadraticFunction
scipy.optimize.tests.test_lsq_common.TestQuadraticFunction.setup_method(self)
scipy.optimize.tests.test_lsq_common.TestQuadraticFunction.test_build_quadratic_1d(self)
scipy.optimize.tests.test_lsq_common.TestQuadraticFunction.test_evaluate_quadratic(self)
scipy.optimize.tests.test_lsq_common.TestQuadraticFunction.test_minimize_quadratic_1d(self)
scipy.optimize.tests.test_lsq_common.TestTrustRegion
scipy.optimize.tests.test_lsq_common.TestTrustRegion.test_intersect(self)
scipy.optimize.tests.test_lsq_common.test_linear_operators()
scipy.optimize.tests.test_lsq_common.test_reflective_transformation()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_optimize.py----------------------------------------
A:scipy.optimize.tests.test_optimize.x0->numpy.random.rand(4)
A:scipy.optimize.tests.test_optimize.r->scipy.optimize.minimize(self.func, self.startparams, method='L-BFGS-B', jac=self.grad, options=opts)
A:scipy.optimize.tests.test_optimize.self.F->numpy.array([[1, 1, 1], [1, 1, 0], [1, 0, 1], [1, 0, 0], [1, 0, 0]])
A:scipy.optimize.tests.test_optimize.self.K->numpy.array([1.0, 0.3, 0.5])
A:scipy.optimize.tests.test_optimize.self.startparams->numpy.zeros(3, np.float64)
A:scipy.optimize.tests.test_optimize.self.solution->numpy.array([-1.05665192, 1.80834843])
A:scipy.optimize.tests.test_optimize.log_pdot->numpy.dot(self.F, x)
A:scipy.optimize.tests.test_optimize.logZ->numpy.log(sum(np.exp(log_pdot)))
A:scipy.optimize.tests.test_optimize.p->numpy.array([2, 2, 2])
A:scipy.optimize.tests.test_optimize.res->scipy.optimize.minimize(f, x0=(0, 0), method='Powell', bounds=bounds)
A:scipy.optimize.tests.test_optimize.retval->scipy.optimize.fmin_l_bfgs_b(fun, self.startparams, maxiter=self.maxiter)
A:scipy.optimize.tests.test_optimize.sol->scipy.optimize.minimize(optimize.rosen, x0, jac=optimize.rosen_der, hess=optimize.BFGS(), tol=1e-05, method='Newton-CG')
A:scipy.optimize.tests.test_optimize.x->numpy.array([3, 4, 5])
A:scipy.optimize.tests.test_optimize.ref->scipy.optimize.minimize(f, x0=(0, 0), method='Powell', bounds=bounds)
A:scipy.optimize.tests.test_optimize.simplex->numpy.zeros((3, 3))
A:scipy.optimize.tests.test_optimize.result->scipy.optimize.minimize_scalar(self.fun, method=method, bounds=[-10, 10])
A:scipy.optimize.tests.test_optimize.rng->numpy.random.default_rng(1234)
A:scipy.optimize.tests.test_optimize.(fcalls, func)->scipy.optimize._optimize._wrap_scalar_function_maxfun_validation(func_, np.asarray(1), 5)
A:scipy.optimize.tests.test_optimize.res_powell->scipy.optimize.minimize(func, x0, method='Powell')
A:scipy.optimize.tests.test_optimize.res_bounded_powell->scipy.optimize.minimize(func, x0, bounds=bounds, method='Powell')
A:scipy.optimize.tests.test_optimize.params->scipy.optimize.fmin_bfgs(self.func, self.startparams, epsilon=epsilon, args=(), maxiter=self.maxiter, disp=False)
A:scipy.optimize.tests.test_optimize.hess->scipy.optimize.BFGS()
A:scipy.optimize.tests.test_optimize.xs->scipy.optimize.fmin_bfgs(f, [10.0], disp=False)
A:scipy.optimize.tests.test_optimize.seen->set()
A:scipy.optimize.tests.test_optimize.self.fun->scipy.optimize.rosen(x)
A:scipy.optimize.tests.test_optimize.c->numpy.array([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])
A:scipy.optimize.tests.test_optimize.ra->scipy.optimize.minimize(self.func, self.startparams, jac='3-point', method='L-BFGS-B', options=opts)
A:scipy.optimize.tests.test_optimize.v->self.func(sol.x)
A:scipy.optimize.tests.test_optimize.value->f(x)
A:scipy.optimize.tests.test_optimize.(v, k)->max(((y, i) for (i, y) in enumerate(values[medium:])))
A:scipy.optimize.tests.test_optimize.target->min(values[:low])
A:scipy.optimize.tests.test_optimize.(xmin, fmin, d)->scipy.optimize.fmin_l_bfgs_b(f, x0, fprime=g, maxfun=maxfun)
A:scipy.optimize.tests.test_optimize.besty->fun(bestx)
A:scipy.optimize.tests.test_optimize.testx->numpy.copy(bestx)
A:scipy.optimize.tests.test_optimize.testy->fun(testx, *args)
A:scipy.optimize.tests.test_optimize.(out, _)->capfd.readouterr()
A:scipy.optimize.tests.test_optimize.sol1->scipy.optimize.minimize(func, [1, 1], jac=jac, tol=1e-10, method=method)
A:scipy.optimize.tests.test_optimize.sol2->scipy.optimize.minimize(func, [1, 1], jac=jac, tol=1.0, method=method)
A:scipy.optimize.tests.test_optimize.routine->getattr(optimize, method)
A:scipy.optimize.tests.test_optimize.kwargs['options']->dict(maxiter=5)
A:scipy.optimize.tests.test_optimize.f0->func(x0)
A:scipy.optimize.tests.test_optimize.a->numpy.arange(np.size(x))
A:scipy.optimize.tests.test_optimize.sf->ScalarFunction(optimize.rosen, x0, (), optimize.rosen_der, optimize.rosen_hess, None, None)
A:scipy.optimize.tests.test_optimize.sol_0->scipy.optimize.minimize(f, x0)
A:scipy.optimize.tests.test_optimize.sol_1->scipy.optimize.minimize(f, x0, constraints=[{'type': 'ineq', 'fun': cons}])
A:scipy.optimize.tests.test_optimize.sol_2->scipy.optimize.minimize(f, x0, bounds=[(5, 10)])
A:scipy.optimize.tests.test_optimize.sol_3->scipy.optimize.minimize(f, x0, constraints=[{'type': 'ineq', 'fun': cons}], bounds=[(5, 10)])
A:scipy.optimize.tests.test_optimize.sol_4->scipy.optimize.minimize(f, x0, constraints=[{'type': 'ineq', 'fun': cons}], bounds=[(1, 10)])
A:scipy.optimize.tests.test_optimize.xinit->numpy.random.randn(len(c))
A:scipy.optimize.tests.test_optimize.first_step_size[0]->abs(x[0] - x0[0])
A:scipy.optimize.tests.test_optimize.options->dict()
A:scipy.optimize.tests.test_optimize.err_msg->'{0} {1}: {2}: {3}'.format(method, scale, first_step_size, res)
A:scipy.optimize.tests.test_optimize.(x, f, d)->scipy.optimize.fmin_l_bfgs_b(self.fj, [0, -1], args=(2.0,), bounds=self.bounds)
A:scipy.optimize.tests.test_optimize.lower_bound->numpy.array([-0.3, -np.inf, -np.inf, -1])
A:scipy.optimize.tests.test_optimize.upper_bound->numpy.array([np.inf, 0.45, np.inf, 0.9])
A:scipy.optimize.tests.test_optimize.x1->numpy.array([0.0, 2, -3, 0])
A:scipy.optimize.tests.test_optimize.(mi, ma)->line_for_search(x, alpha, lower_bound, upper_bound)
A:scipy.optimize.tests.test_optimize.p0->numpy.array([-1.0, 0, 0, 2])
A:scipy.optimize.tests.test_optimize.fval->func(p0)
A:scipy.optimize.tests.test_optimize.(f, p, direction)->linesearch_powell(func, p0, xi, tol=1e-05, lower_bound=lower_bound, upper_bound=upper_bound, fval=fval)
A:scipy.optimize.tests.test_optimize.bounds->Bounds(lb=np.array([-10, -10]), ub=np.array([10, 10]))
A:scipy.optimize.tests.test_optimize.hp->scipy.optimize.rosen_hess_prod(x, p)
A:scipy.optimize.tests.test_optimize.dothp->numpy.dot(optimize.rosen_hess(x), p)
A:scipy.optimize.tests.test_optimize.resbrute->scipy.optimize.brute(f, (slice(-4, 4, 0.25),), args=2)
A:scipy.optimize.tests.test_optimize.resbrute1->scipy.optimize.brute(brute_func, self.rranges, args=self.params, full_output=True, finish=None, workers=2)
A:scipy.optimize.tests.test_optimize.memoized_function->MemoizeJac(function_with_gradient)
A:scipy.optimize.tests.test_optimize.scalar_function->ScalarFunction(memoized_function, x0, (), jac, hess, None, None)
A:scipy.optimize.tests.test_optimize.lb->numpy.array([0, 2, -1, -1.0])
A:scipy.optimize.tests.test_optimize.ub->numpy.array([3, 2, 2, -1.0])
A:scipy.optimize.tests.test_optimize.dc->numpy.zeros_like(x)
A:scipy.optimize.tests.test_optimize.c1a->NonlinearConstraint(constraint1, -np.inf, 0)
A:scipy.optimize.tests.test_optimize.c1b->NonlinearConstraint(constraint1, -np.inf, 0, jacobian1)
A:scipy.optimize.tests.test_optimize.c2a->NonlinearConstraint(constraint2, -np.inf, 0)
A:scipy.optimize.tests.test_optimize.c2b->NonlinearConstraint(constraint2, -np.inf, 0, jacobian2)
A:scipy.optimize.tests.test_optimize.eb_data->setup_test_equal_bounds()
A:scipy.optimize.tests.test_optimize.expected->scipy.optimize.minimize(optimize.rosen, x0, method=method, jac=optimize.rosen_der, bounds=bounds, constraints=reference_constraints)
A:scipy.optimize.tests.test_optimize.new_x->numpy.array([np.nan, 2, np.nan, -1])
A:scipy.optimize.tests.test_optimize.fd_res->scipy.optimize.minimize(fun, x0[[0, 2]], method=method, bounds=bounds[::2])
A:scipy.optimize.tests.test_optimize.nlc->NonlinearConstraint(con, -np.inf, 4)
A:scipy.optimize.tests.test_optimize.g->scipy.optimize.approx_fprime(himmelblau_x0, himmelblau)
A:scipy.optimize.tests.test_optimize.h->scipy.optimize.approx_fprime(himmelblau_x0, himmelblau_grad)
scipy.optimize.tests.testCheckOptimize
scipy.optimize.tests.testCheckOptimize.func(self,x)
scipy.optimize.tests.testCheckOptimize.grad(self,x)
scipy.optimize.tests.testCheckOptimize.hess(self,x)
scipy.optimize.tests.testCheckOptimize.hessp(self,x,p)
scipy.optimize.tests.testCheckOptimize.setup_method(self)
scipy.optimize.tests.testCheckOptimizeParameterized(CheckOptimize)
scipy.optimize.tests.testCheckOptimizeParameterized.test_bfgs(self)
scipy.optimize.tests.testCheckOptimizeParameterized.test_bfgs_infinite(self)
scipy.optimize.tests.testCheckOptimizeParameterized.test_bfgs_xrtol(self)
scipy.optimize.tests.testCheckOptimizeParameterized.test_cg(self)
scipy.optimize.tests.testCheckOptimizeParameterized.test_cg_cornercase(self)
scipy.optimize.tests.testCheckOptimizeParameterized.test_ncg(self)
scipy.optimize.tests.testCheckOptimizeParameterized.test_ncg_hess(self)
scipy.optimize.tests.testCheckOptimizeParameterized.test_ncg_hessp(self)
scipy.optimize.tests.testCheckOptimizeParameterized.test_ncg_negative_maxiter(self)
scipy.optimize.tests.testCheckOptimizeParameterized.test_neldermead(self)
scipy.optimize.tests.testCheckOptimizeParameterized.test_neldermead_initial_simplex(self)
scipy.optimize.tests.testCheckOptimizeParameterized.test_neldermead_initial_simplex_bad(self)
scipy.optimize.tests.testCheckOptimizeParameterized.test_powell(self)
scipy.optimize.tests.testCheckOptimizeParameterized.test_powell_bounded(self)
scipy.optimize.tests.testCheckOptimizeParameterized.test_powell_gh14014(self)
scipy.optimize.tests.testFunctionWithGradient(self)
scipy.optimize.tests.testTestBrute
scipy.optimize.tests.testTestBrute.brute_func(self,z,*params)
scipy.optimize.tests.testTestBrute.setup_method(self)
scipy.optimize.tests.testTestBrute.test_1D(self)
scipy.optimize.tests.testTestBrute.test_brute(self)
scipy.optimize.tests.testTestBrute.test_coerce_args_param(self)
scipy.optimize.tests.testTestBrute.test_runtime_warning(self)
scipy.optimize.tests.testTestBrute.test_workers(self)
scipy.optimize.tests.testTestGlobalOptimization
scipy.optimize.tests.testTestGlobalOptimization.test_optimize_result_attributes(self)
scipy.optimize.tests.testTestIterationLimits
scipy.optimize.tests.testTestIterationLimits.check_limits(self,method,default_iters)
scipy.optimize.tests.testTestIterationLimits.setup_method(self)
scipy.optimize.tests.testTestIterationLimits.slow_func(self,v)
scipy.optimize.tests.testTestIterationLimits.test_neldermead_limit(self)
scipy.optimize.tests.testTestIterationLimits.test_powell_limit(self)
scipy.optimize.tests.testTestLBFGSBBounds
scipy.optimize.tests.testTestLBFGSBBounds.fj(self,x,p=2.0)
scipy.optimize.tests.testTestLBFGSBBounds.fun(self,x,p=2.0)
scipy.optimize.tests.testTestLBFGSBBounds.jac(self,x,p=2.0)
scipy.optimize.tests.testTestLBFGSBBounds.setup_method(self)
scipy.optimize.tests.testTestLBFGSBBounds.test_l_bfgs_b_bounds(self)
scipy.optimize.tests.testTestLBFGSBBounds.test_l_bfgs_b_funjac(self)
scipy.optimize.tests.testTestLBFGSBBounds.test_minimize_l_bfgs_b_bounds(self)
scipy.optimize.tests.testTestLBFGSBBounds.test_minimize_l_bfgs_b_bounds_FD(self)
scipy.optimize.tests.testTestLBFGSBBounds.test_minimize_l_bfgs_b_incorrect_bounds(self,bounds)
scipy.optimize.tests.testTestNewtonCg
scipy.optimize.tests.testTestNewtonCg.test_finite_difference(self)
scipy.optimize.tests.testTestNewtonCg.test_hessian_update_strategy(self)
scipy.optimize.tests.testTestNewtonCg.test_himmelblau(self)
scipy.optimize.tests.testTestNewtonCg.test_rosenbrock(self)
scipy.optimize.tests.testTestOptimizeNoWrapperDisp(CheckOptimizeParameterized)
scipy.optimize.tests.testTestOptimizeNoWrapperNoDisp(CheckOptimizeParameterized)
scipy.optimize.tests.testTestOptimizeResultAttributes
scipy.optimize.tests.testTestOptimizeResultAttributes.setup_method(self)
scipy.optimize.tests.testTestOptimizeResultAttributes.test_attributes_present(self)
scipy.optimize.tests.testTestOptimizeScalar
scipy.optimize.tests.testTestOptimizeScalar.fun(self,x,a=1.5)
scipy.optimize.tests.testTestOptimizeScalar.setup_method(self)
scipy.optimize.tests.testTestOptimizeScalar.test_brent(self)
scipy.optimize.tests.testTestOptimizeScalar.test_disp(self,method)
scipy.optimize.tests.testTestOptimizeScalar.test_fminbound(self)
scipy.optimize.tests.testTestOptimizeScalar.test_fminbound_scalar(self)
scipy.optimize.tests.testTestOptimizeScalar.test_gh11207(self)
scipy.optimize.tests.testTestOptimizeScalar.test_golden(self)
scipy.optimize.tests.testTestOptimizeScalar.test_minimize_scalar(self)
scipy.optimize.tests.testTestOptimizeScalar.test_minimize_scalar_coerce_args_param(self)
scipy.optimize.tests.testTestOptimizeScalar.test_minimize_scalar_custom(self)
scipy.optimize.tests.testTestOptimizeScalar.test_nan_values(self,method)
scipy.optimize.tests.testTestOptimizeScalar.test_result_attributes(self,method)
scipy.optimize.tests.testTestOptimizeSimple(CheckOptimize)
scipy.optimize.tests.testTestOptimizeSimple.test_bfgs_double_evaluations(self)
scipy.optimize.tests.testTestOptimizeSimple.test_bfgs_gh_2169(self)
scipy.optimize.tests.testTestOptimizeSimple.test_bfgs_nan(self)
scipy.optimize.tests.testTestOptimizeSimple.test_bfgs_nan_return(self)
scipy.optimize.tests.testTestOptimizeSimple.test_bfgs_numerical_jacobian(self)
scipy.optimize.tests.testTestOptimizeSimple.test_custom(self)
scipy.optimize.tests.testTestOptimizeSimple.test_duplicate_evaluations(self,method)
scipy.optimize.tests.testTestOptimizeSimple.test_finite_differences_hess(self)
scipy.optimize.tests.testTestOptimizeSimple.test_finite_differences_jac(self)
scipy.optimize.tests.testTestOptimizeSimple.test_gh10771(self)
scipy.optimize.tests.testTestOptimizeSimple.test_gh13321(self,capfd)
scipy.optimize.tests.testTestOptimizeSimple.test_initial_step_scaling(self)
scipy.optimize.tests.testTestOptimizeSimple.test_l_bfgs_b(self)
scipy.optimize.tests.testTestOptimizeSimple.test_l_bfgs_b_funjac(self)
scipy.optimize.tests.testTestOptimizeSimple.test_l_bfgs_b_maxiter(self)
scipy.optimize.tests.testTestOptimizeSimple.test_l_bfgs_b_numjac(self)
scipy.optimize.tests.testTestOptimizeSimple.test_minimize_automethod(self)
scipy.optimize.tests.testTestOptimizeSimple.test_minimize_callback_copies_array(self,method)
scipy.optimize.tests.testTestOptimizeSimple.test_minimize_coerce_args_param(self)
scipy.optimize.tests.testTestOptimizeSimple.test_minimize_l_bfgs_b(self)
scipy.optimize.tests.testTestOptimizeSimple.test_minimize_l_bfgs_b_ftol(self)
scipy.optimize.tests.testTestOptimizeSimple.test_minimize_l_bfgs_b_maxfun_interruption(self)
scipy.optimize.tests.testTestOptimizeSimple.test_minimize_l_bfgs_maxls(self)
scipy.optimize.tests.testTestOptimizeSimple.test_minimize_tol_parameter(self)
scipy.optimize.tests.testTestOptimizeSimple.test_nan_values(self,method)
scipy.optimize.tests.testTestOptimizeSimple.test_no_increase(self,method)
scipy.optimize.tests.testTestOptimizeSimple.test_respect_maxiter(self,method)
scipy.optimize.tests.testTestOptimizeSimple.test_respect_maxiter_trust_constr_ineq_constraints(self)
scipy.optimize.tests.testTestOptimizeSimple.test_runtime_warning(self,method)
scipy.optimize.tests.testTestOptimizeSimple.test_slsqp_respect_bounds(self)
scipy.optimize.tests.testTestOptimizeWrapperDisp(CheckOptimizeParameterized)
scipy.optimize.tests.testTestOptimizeWrapperNoDisp(CheckOptimizeParameterized)
scipy.optimize.tests.testTestRosen
scipy.optimize.tests.testTestRosen.test_hess(self)
scipy.optimize.tests.test_optimize.CheckOptimize
scipy.optimize.tests.test_optimize.CheckOptimize.func(self,x)
scipy.optimize.tests.test_optimize.CheckOptimize.grad(self,x)
scipy.optimize.tests.test_optimize.CheckOptimize.hess(self,x)
scipy.optimize.tests.test_optimize.CheckOptimize.hessp(self,x,p)
scipy.optimize.tests.test_optimize.CheckOptimize.setup_method(self)
scipy.optimize.tests.test_optimize.CheckOptimizeParameterized(CheckOptimize)
scipy.optimize.tests.test_optimize.CheckOptimizeParameterized.test_bfgs(self)
scipy.optimize.tests.test_optimize.CheckOptimizeParameterized.test_bfgs_infinite(self)
scipy.optimize.tests.test_optimize.CheckOptimizeParameterized.test_bfgs_xrtol(self)
scipy.optimize.tests.test_optimize.CheckOptimizeParameterized.test_cg(self)
scipy.optimize.tests.test_optimize.CheckOptimizeParameterized.test_cg_cornercase(self)
scipy.optimize.tests.test_optimize.CheckOptimizeParameterized.test_ncg(self)
scipy.optimize.tests.test_optimize.CheckOptimizeParameterized.test_ncg_hess(self)
scipy.optimize.tests.test_optimize.CheckOptimizeParameterized.test_ncg_hessp(self)
scipy.optimize.tests.test_optimize.CheckOptimizeParameterized.test_ncg_negative_maxiter(self)
scipy.optimize.tests.test_optimize.CheckOptimizeParameterized.test_neldermead(self)
scipy.optimize.tests.test_optimize.CheckOptimizeParameterized.test_neldermead_initial_simplex(self)
scipy.optimize.tests.test_optimize.CheckOptimizeParameterized.test_neldermead_initial_simplex_bad(self)
scipy.optimize.tests.test_optimize.CheckOptimizeParameterized.test_powell(self)
scipy.optimize.tests.test_optimize.CheckOptimizeParameterized.test_powell_bounded(self)
scipy.optimize.tests.test_optimize.CheckOptimizeParameterized.test_powell_gh14014(self)
scipy.optimize.tests.test_optimize.FunctionWithGradient(self)
scipy.optimize.tests.test_optimize.FunctionWithGradient.__init__(self)
scipy.optimize.tests.test_optimize.TestBrute
scipy.optimize.tests.test_optimize.TestBrute.brute_func(self,z,*params)
scipy.optimize.tests.test_optimize.TestBrute.setup_method(self)
scipy.optimize.tests.test_optimize.TestBrute.test_1D(self)
scipy.optimize.tests.test_optimize.TestBrute.test_brute(self)
scipy.optimize.tests.test_optimize.TestBrute.test_coerce_args_param(self)
scipy.optimize.tests.test_optimize.TestBrute.test_runtime_warning(self)
scipy.optimize.tests.test_optimize.TestBrute.test_workers(self)
scipy.optimize.tests.test_optimize.TestGlobalOptimization
scipy.optimize.tests.test_optimize.TestGlobalOptimization.test_optimize_result_attributes(self)
scipy.optimize.tests.test_optimize.TestIterationLimits
scipy.optimize.tests.test_optimize.TestIterationLimits.check_limits(self,method,default_iters)
scipy.optimize.tests.test_optimize.TestIterationLimits.setup_method(self)
scipy.optimize.tests.test_optimize.TestIterationLimits.slow_func(self,v)
scipy.optimize.tests.test_optimize.TestIterationLimits.test_neldermead_limit(self)
scipy.optimize.tests.test_optimize.TestIterationLimits.test_powell_limit(self)
scipy.optimize.tests.test_optimize.TestLBFGSBBounds
scipy.optimize.tests.test_optimize.TestLBFGSBBounds.fj(self,x,p=2.0)
scipy.optimize.tests.test_optimize.TestLBFGSBBounds.fun(self,x,p=2.0)
scipy.optimize.tests.test_optimize.TestLBFGSBBounds.jac(self,x,p=2.0)
scipy.optimize.tests.test_optimize.TestLBFGSBBounds.setup_method(self)
scipy.optimize.tests.test_optimize.TestLBFGSBBounds.test_l_bfgs_b_bounds(self)
scipy.optimize.tests.test_optimize.TestLBFGSBBounds.test_l_bfgs_b_funjac(self)
scipy.optimize.tests.test_optimize.TestLBFGSBBounds.test_minimize_l_bfgs_b_bounds(self)
scipy.optimize.tests.test_optimize.TestLBFGSBBounds.test_minimize_l_bfgs_b_bounds_FD(self)
scipy.optimize.tests.test_optimize.TestLBFGSBBounds.test_minimize_l_bfgs_b_incorrect_bounds(self,bounds)
scipy.optimize.tests.test_optimize.TestNewtonCg
scipy.optimize.tests.test_optimize.TestNewtonCg.test_finite_difference(self)
scipy.optimize.tests.test_optimize.TestNewtonCg.test_hessian_update_strategy(self)
scipy.optimize.tests.test_optimize.TestNewtonCg.test_himmelblau(self)
scipy.optimize.tests.test_optimize.TestNewtonCg.test_rosenbrock(self)
scipy.optimize.tests.test_optimize.TestOptimizeNoWrapperDisp(CheckOptimizeParameterized)
scipy.optimize.tests.test_optimize.TestOptimizeNoWrapperNoDisp(CheckOptimizeParameterized)
scipy.optimize.tests.test_optimize.TestOptimizeResultAttributes
scipy.optimize.tests.test_optimize.TestOptimizeResultAttributes.setup_method(self)
scipy.optimize.tests.test_optimize.TestOptimizeResultAttributes.test_attributes_present(self)
scipy.optimize.tests.test_optimize.TestOptimizeScalar
scipy.optimize.tests.test_optimize.TestOptimizeScalar.fun(self,x,a=1.5)
scipy.optimize.tests.test_optimize.TestOptimizeScalar.setup_method(self)
scipy.optimize.tests.test_optimize.TestOptimizeScalar.test_brent(self)
scipy.optimize.tests.test_optimize.TestOptimizeScalar.test_disp(self,method)
scipy.optimize.tests.test_optimize.TestOptimizeScalar.test_fminbound(self)
scipy.optimize.tests.test_optimize.TestOptimizeScalar.test_fminbound_scalar(self)
scipy.optimize.tests.test_optimize.TestOptimizeScalar.test_gh11207(self)
scipy.optimize.tests.test_optimize.TestOptimizeScalar.test_golden(self)
scipy.optimize.tests.test_optimize.TestOptimizeScalar.test_minimize_scalar(self)
scipy.optimize.tests.test_optimize.TestOptimizeScalar.test_minimize_scalar_coerce_args_param(self)
scipy.optimize.tests.test_optimize.TestOptimizeScalar.test_minimize_scalar_custom(self)
scipy.optimize.tests.test_optimize.TestOptimizeScalar.test_nan_values(self,method)
scipy.optimize.tests.test_optimize.TestOptimizeScalar.test_result_attributes(self,method)
scipy.optimize.tests.test_optimize.TestOptimizeSimple(CheckOptimize)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_bfgs_double_evaluations(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_bfgs_gh_2169(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_bfgs_nan(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_bfgs_nan_return(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_bfgs_numerical_jacobian(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_custom(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_duplicate_evaluations(self,method)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_finite_differences_hess(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_finite_differences_jac(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_gh10771(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_gh13321(self,capfd)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_initial_step_scaling(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_l_bfgs_b(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_l_bfgs_b_funjac(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_l_bfgs_b_maxiter(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_l_bfgs_b_numjac(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_minimize_automethod(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_minimize_callback_copies_array(self,method)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_minimize_coerce_args_param(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_minimize_l_bfgs_b(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_minimize_l_bfgs_b_ftol(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_minimize_l_bfgs_b_maxfun_interruption(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_minimize_l_bfgs_maxls(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_minimize_tol_parameter(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_nan_values(self,method)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_no_increase(self,method)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_respect_maxiter(self,method)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_respect_maxiter_trust_constr_ineq_constraints(self)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_runtime_warning(self,method)
scipy.optimize.tests.test_optimize.TestOptimizeSimple.test_slsqp_respect_bounds(self)
scipy.optimize.tests.test_optimize.TestOptimizeWrapperDisp(CheckOptimizeParameterized)
scipy.optimize.tests.test_optimize.TestOptimizeWrapperNoDisp(CheckOptimizeParameterized)
scipy.optimize.tests.test_optimize.TestRosen
scipy.optimize.tests.test_optimize.TestRosen.test_hess(self)
scipy.optimize.tests.test_optimize.brute_func(z,*params)
scipy.optimize.tests.test_optimize.f1(z,*params)
scipy.optimize.tests.test_optimize.f2(z,*params)
scipy.optimize.tests.test_optimize.f3(z,*params)
scipy.optimize.tests.test_optimize.function_with_gradient()
scipy.optimize.tests.test_optimize.himmelblau(p)
scipy.optimize.tests.test_optimize.himmelblau_grad(p)
scipy.optimize.tests.test_optimize.himmelblau_hess(p)
scipy.optimize.tests.test_optimize.setup_test_equal_bounds()
scipy.optimize.tests.test_optimize.test_all_bounds_equal(method)
scipy.optimize.tests.test_optimize.test_approx_fprime()
scipy.optimize.tests.test_optimize.test_bounded_powell_outsidebounds()
scipy.optimize.tests.test_optimize.test_bounded_powell_vs_powell()
scipy.optimize.tests.test_optimize.test_bounds_with_list()
scipy.optimize.tests.test_optimize.test_brent_negative_tolerance()
scipy.optimize.tests.test_optimize.test_check_grad()
scipy.optimize.tests.test_optimize.test_cobyla_threadsafe()
scipy.optimize.tests.test_optimize.test_eb_constraints()
scipy.optimize.tests.test_optimize.test_equal_bounds(method,kwds,bound_type,constraints,callback)
scipy.optimize.tests.test_optimize.test_gh12594()
scipy.optimize.tests.test_optimize.test_gh12696()
scipy.optimize.tests.test_optimize.test_line_for_search()
scipy.optimize.tests.test_optimize.test_linesearch_powell()
scipy.optimize.tests.test_optimize.test_linesearch_powell_bounded()
scipy.optimize.tests.test_optimize.test_maxfev_test()
scipy.optimize.tests.test_optimize.test_memoize_jac_function_before_gradient(function_with_gradient)
scipy.optimize.tests.test_optimize.test_memoize_jac_gradient_before_function(function_with_gradient)
scipy.optimize.tests.test_optimize.test_memoize_jac_with_bfgs(function_with_gradient)
scipy.optimize.tests.test_optimize.test_minimize_multiple_constraints()
scipy.optimize.tests.test_optimize.test_minimize_with_scalar(method)
scipy.optimize.tests.test_optimize.test_neldermead_adaptive()
scipy.optimize.tests.test_optimize.test_neldermead_iteration_num()
scipy.optimize.tests.test_optimize.test_neldermead_xatol_fatol()
scipy.optimize.tests.test_optimize.test_obj_func_returns_scalar()
scipy.optimize.tests.test_optimize.test_onesided_bounded_powell_stability()
scipy.optimize.tests.test_optimize.test_powell_limits()
scipy.optimize.tests.test_optimize.test_result_x_shape_when_len_x_is_one()
scipy.optimize.tests.test_optimize.test_show_options()
scipy.optimize.tests.test_optimize.test_wrap_scalar_function_with_validation()
scipy.optimize.tests.test_optimize.test_x_overwritten_user_function()
scipy.optimize.tests.testbrute_func(z,*params)
scipy.optimize.tests.testf1(z,*params)
scipy.optimize.tests.testf2(z,*params)
scipy.optimize.tests.testf3(z,*params)
scipy.optimize.tests.testfunction_with_gradient()
scipy.optimize.tests.testhimmelblau(p)
scipy.optimize.tests.testhimmelblau_grad(p)
scipy.optimize.tests.testhimmelblau_hess(p)
scipy.optimize.tests.testsetup_test_equal_bounds()
scipy.optimize.tests.testtest_all_bounds_equal(method)
scipy.optimize.tests.testtest_approx_fprime()
scipy.optimize.tests.testtest_bounded_powell_outsidebounds()
scipy.optimize.tests.testtest_bounded_powell_vs_powell()
scipy.optimize.tests.testtest_bounds_with_list()
scipy.optimize.tests.testtest_brent_negative_tolerance()
scipy.optimize.tests.testtest_check_grad()
scipy.optimize.tests.testtest_cobyla_threadsafe()
scipy.optimize.tests.testtest_eb_constraints()
scipy.optimize.tests.testtest_equal_bounds(method,kwds,bound_type,constraints,callback)
scipy.optimize.tests.testtest_gh12594()
scipy.optimize.tests.testtest_gh12696()
scipy.optimize.tests.testtest_line_for_search()
scipy.optimize.tests.testtest_linesearch_powell()
scipy.optimize.tests.testtest_linesearch_powell_bounded()
scipy.optimize.tests.testtest_maxfev_test()
scipy.optimize.tests.testtest_memoize_jac_function_before_gradient(function_with_gradient)
scipy.optimize.tests.testtest_memoize_jac_gradient_before_function(function_with_gradient)
scipy.optimize.tests.testtest_memoize_jac_with_bfgs(function_with_gradient)
scipy.optimize.tests.testtest_minimize_multiple_constraints()
scipy.optimize.tests.testtest_minimize_with_scalar(method)
scipy.optimize.tests.testtest_neldermead_adaptive()
scipy.optimize.tests.testtest_neldermead_iteration_num()
scipy.optimize.tests.testtest_neldermead_xatol_fatol()
scipy.optimize.tests.testtest_obj_func_returns_scalar()
scipy.optimize.tests.testtest_onesided_bounded_powell_stability()
scipy.optimize.tests.testtest_powell_limits()
scipy.optimize.tests.testtest_result_x_shape_when_len_x_is_one()
scipy.optimize.tests.testtest_show_options()
scipy.optimize.tests.testtest_wrap_scalar_function_with_validation()
scipy.optimize.tests.testtest_x_overwritten_user_function()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test__differential_evolution.py----------------------------------------
A:scipy.optimize.tests.test__differential_evolution.self.old_seterr->numpy.seterr(invalid='raise')
A:scipy.optimize.tests.test__differential_evolution.self.limits->numpy.array([[0.0, 0.0], [2.0, 2.0]])
A:scipy.optimize.tests.test__differential_evolution.self.dummy_solver->DifferentialEvolutionSolver(self.quadratic, [(0, 100)])
A:scipy.optimize.tests.test__differential_evolution.self.dummy_solver2->DifferentialEvolutionSolver(self.quadratic, [(0, 1)], popsize=7, mutation=0.5)
A:scipy.optimize.tests.test__differential_evolution.solver->DifferentialEvolutionSolver(f, bounds=bounds, polish=False, integrality=integrality)
A:scipy.optimize.tests.test__differential_evolution.result->differential_evolution(func, bounds=[(-1, 2), (-1, 1)], constraints=[c0, c1], maxiter=10, polish=False, seed=864197532)
A:scipy.optimize.tests.test__differential_evolution.trial->numpy.array([1.1, -100, 0.9, 2.0, 300.0, -1e-05])
A:scipy.optimize.tests.test__differential_evolution.self.dummy_solver.limits->numpy.array([[100], [0.0]])
A:scipy.optimize.tests.test__differential_evolution.limits->numpy.arange(12.0, dtype='float64').reshape(2, 6)
A:scipy.optimize.tests.test__differential_evolution.bounds->list(zip(limits[0, :], limits[1, :]))
A:scipy.optimize.tests.test__differential_evolution.(r1, r2, r3, r4, r5)->DifferentialEvolutionSolver(f, bounds=bounds, polish=False, integrality=integrality)._select_samples(candidate, 5)
A:scipy.optimize.tests.test__differential_evolution.result2->differential_evolution(self.quadratic, [(-100, 100)], polish=False, seed=1, tol=0.5)
A:scipy.optimize.tests.test__differential_evolution.rng->numpy.random.default_rng(6519843218105)
A:scipy.optimize.tests.test__differential_evolution.(x, fun)->next(solver)
A:scipy.optimize.tests.test__differential_evolution.(_, fun_prev)->next(solver)
A:scipy.optimize.tests.test__differential_evolution.population->numpy.linspace(-1, 3, 15).reshape(5, 3)
A:scipy.optimize.tests.test__differential_evolution.unscaled_population->numpy.clip(solver._unscale_parameters(population), 0, 1)
A:scipy.optimize.tests.test__differential_evolution.x0->numpy.array([1, 2, 3, 4])
A:scipy.optimize.tests.test__differential_evolution.res->differential_evolution(func, bounds, args=(dist, x), integrality=integrality, polish=False, seed=rng)
A:scipy.optimize.tests.test__differential_evolution.nlc->NonlinearConstraint(cons_f, [-1, -0.85], [2, 2])
A:scipy.optimize.tests.test__differential_evolution.cv->DifferentialEvolutionSolver(f, bounds=bounds, polish=False, integrality=integrality)._constraint_violation_fn(np.array(x))
A:scipy.optimize.tests.test__differential_evolution.nlc2->NonlinearConstraint(constr_f2, (0.9, 0.5), (2.0, 2.0))
A:scipy.optimize.tests.test__differential_evolution.constraint_violation->numpy.array([solver._constraint_violation_fn(x) for x in np.array(xs)])
A:scipy.optimize.tests.test__differential_evolution.(feas, cv)->DifferentialEvolutionSolver(f, bounds=bounds, polish=False, integrality=integrality)._calculate_population_feasibilities(np.array([[0.25, 0.25], [1.0, 1.0]]))
A:scipy.optimize.tests.test__differential_evolution.lb->numpy.array([0, 20, 30])
A:scipy.optimize.tests.test__differential_evolution.ub->numpy.array([0.5, np.inf, 70])
A:scipy.optimize.tests.test__differential_evolution.pc->_ConstraintWrapper(nlc, [0.5, 1])
A:scipy.optimize.tests.test__differential_evolution.xs->numpy.arange(1, 29).reshape(7, 4)
A:scipy.optimize.tests.test__differential_evolution.A->numpy.zeros((3, 5))
A:scipy.optimize.tests.test__differential_evolution.nonlinear->NonlinearConstraint(fun, -np.inf, 0)
A:scipy.optimize.tests.test__differential_evolution.x->dist.rvs(*shapes, size=10000, random_state=rng)
A:scipy.optimize.tests.test__differential_evolution.b->numpy.array([-0.55, -0.55])
A:scipy.optimize.tests.test__differential_evolution.L->LinearConstraint(A, b, np.inf)
A:scipy.optimize.tests.test__differential_evolution.L2->LinearConstraint(A[5:6, :], -np.inf, b[5:6])
A:scipy.optimize.tests.test__differential_evolution.N->NonlinearConstraint(c1, [-0.001], [0.001])
A:scipy.optimize.tests.test__differential_evolution.N2->NonlinearConstraint(c2, -np.inf, b[8:9])
A:scipy.optimize.tests.test__differential_evolution.res2->differential_evolution(rosen_vec, bounds, vectorized=True, updating='deferred', seed=1, constraints=[nlc1, nlc2], polish=False)
A:scipy.optimize.tests.test__differential_evolution.LBFGSB->minimize(func2, res2.x[1], args=(5, dist, x), bounds=[(0, 0.95)])
A:scipy.optimize.tests.test__differential_evolution.res1->differential_evolution(rosen, bounds, updating='deferred', seed=1, constraints=[nlc1, nlc2], polish=False)
A:scipy.optimize.tests.test__differential_evolution.nlc1->NonlinearConstraint(constr_f, -np.inf, 1.9)
A:scipy.optimize.tests.test__differential_evolution.c0->NonlinearConstraint(lambda x: x[1] - (x[0] - 1) ** 2, 0, np.inf)
A:scipy.optimize.tests.test__differential_evolution.c1->NonlinearConstraint(lambda x: x[1] + x[0] ** 2, -np.inf, 0)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.quadratic(self,x)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.setup_method(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.teardown_method(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_L1(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_L2(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_L3(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_L4(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_L5(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_L6(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_L7(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_L8(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_L9(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test__currenttobest1(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test__ensure_constraint(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test__mutate1(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test__mutate2(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test__randtobest1(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test__scale_parameters(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test__strategy_resolves(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test__unscale_parameters(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_accept_trial(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_args_tuple_is_passed(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_best_solution_retrieval(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_bounds_checking(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_calculate_population_energies(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_callback_terminates(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_can_init_with_dithering(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_constraint_population_feasibilities(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_constraint_solve(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_constraint_violation_error_message(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_constraint_violation_fn(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_constraint_wrapper(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_constraint_wrapper_violation(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_converged(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_convergence(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_deferred_updating(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_differential_evolution(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_exp_runs(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_gh_4511_regression(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_immediate_updating(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_impossible_constraint(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_infinite_objective_function(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_init_with_invalid_strategy(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_integrality(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_integrality_limits(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_invalid_functional(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_invalid_mutation_values_arent_accepted(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_iteration(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_maxfun_stops_solve(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_maxiter_none_GH5731(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_maxiter_stops_solve(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_parallel(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_population_initiation(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_quadratic(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_quadratic_from_diff_ev(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_random_generator(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_seed_gives_repeatability(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_select_samples(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_vectorized(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_vectorized_constraints(self)
scipy.optimize.tests.test__differential_evolution.TestDifferentialEvolutionSolver.test_x0(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_least_squares.py----------------------------------------
A:scipy.optimize.tests.test_least_squares.n->int(np.sqrt(x.shape[0]))
A:scipy.optimize.tests.test_least_squares.u->numpy.zeros((n + 2, n + 2))
A:scipy.optimize.tests.test_least_squares.x->numpy.linspace(0, 1, 100).astype('float32')
A:scipy.optimize.tests.test_least_squares.self.lb->numpy.linspace(-2, -1.5, n)
A:scipy.optimize.tests.test_least_squares.self.ub->numpy.linspace(-0.8, 0.0, n)
A:scipy.optimize.tests.test_least_squares.self.x0->make_strictly_feasible(self.x0, self.lb, self.ub)
A:scipy.optimize.tests.test_least_squares.self.sparsity->lil_matrix((n, n), dtype=int)
A:scipy.optimize.tests.test_least_squares.i->numpy.arange(self.n - 1)
A:scipy.optimize.tests.test_least_squares.J->numpy.empty((self.m, self.n))
A:scipy.optimize.tests.test_least_squares.self.p0->numpy.zeros(2)
A:scipy.optimize.tests.test_least_squares.self.x->numpy.linspace(x_range[0], x_range[1], n_points)
A:scipy.optimize.tests.test_least_squares.outliers->numpy.random.randint(0, self.m, n_outliers)
A:scipy.optimize.tests.test_least_squares.self.p_opt->numpy.array([a, b])
A:scipy.optimize.tests.test_least_squares.rho->numpy.empty((3, z.size))
A:scipy.optimize.tests.test_least_squares.res->least_squares(err, [-1.0, -1.0], args=(x, y))
A:scipy.optimize.tests.test_least_squares.res1->least_squares(fun_trivial, 2.0, diff_step=0.1, method=self.method)
A:scipy.optimize.tests.test_least_squares.res2->least_squares(fun_trivial, 2.0, diff_step=-0.1, method=self.method)
A:scipy.optimize.tests.test_least_squares.res3->least_squares(fun_trivial, 2.0, diff_step=None, method=self.method)
A:scipy.optimize.tests.test_least_squares.x0->numpy.ones(n ** 2)
A:scipy.optimize.tests.test_least_squares.x0_1->numpy.array([-2.0, 1.0])
A:scipy.optimize.tests.test_least_squares.x0_2->numpy.array([2.0, 2.0])
A:scipy.optimize.tests.test_least_squares.x0_3->numpy.array([-2.0, 2.0])
A:scipy.optimize.tests.test_least_squares.x0_4->numpy.array([0.0, 2.0])
A:scipy.optimize.tests.test_least_squares.x0_5->numpy.array([-1.2, 1.0])
A:scipy.optimize.tests.test_least_squares.p->BroydenTridiagonal(mode='operator')
A:scipy.optimize.tests.test_least_squares.sparse->BroydenTridiagonal(mode='sparse')
A:scipy.optimize.tests.test_least_squares.dense->BroydenTridiagonal(mode='dense')
A:scipy.optimize.tests.test_least_squares.res_sparse->least_squares(p.fun, p.x0, jac, method=self.method, jac_sparsity=p.sparsity)
A:scipy.optimize.tests.test_least_squares.res_dense->least_squares(p.fun, p.x0, jac, method=self.method)
A:scipy.optimize.tests.test_least_squares.res_1->least_squares(p.fun, p.x0, jac, bounds=(p.lb, np.inf), method=self.method, jac_sparsity=jac_sparsity)
A:scipy.optimize.tests.test_least_squares.res_2->least_squares(p.fun, p.x0, jac, bounds=(-np.inf, p.ub), method=self.method, jac_sparsity=jac_sparsity)
A:scipy.optimize.tests.test_least_squares.res_3->least_squares(p.fun, p.x0, jac, bounds=(p.lb, p.ub), method=self.method, jac_sparsity=jac_sparsity)
A:scipy.optimize.tests.test_least_squares.res_lsq->least_squares(p.fun, p.p0, jac=jac, method=self.method)
A:scipy.optimize.tests.test_least_squares.res_robust->least_squares(p.fun, p.p0, jac=jac, loss=loss, f_scale=noise, method=self.method)
A:scipy.optimize.tests.test_least_squares.y->numpy.random.random(100).astype('float32')
scipy.optimize.tests.test_least_squares.BaseMixin
scipy.optimize.tests.test_least_squares.BaseMixin.test_args_kwargs(self)
scipy.optimize.tests.test_least_squares.BaseMixin.test_basic(self)
scipy.optimize.tests.test_least_squares.BaseMixin.test_bvp(self)
scipy.optimize.tests.test_least_squares.BaseMixin.test_convergence_with_only_one_tolerance_enabled(self)
scipy.optimize.tests.test_least_squares.BaseMixin.test_diff_step(self)
scipy.optimize.tests.test_least_squares.BaseMixin.test_error_raised_when_all_tolerances_below_eps(self)
scipy.optimize.tests.test_least_squares.BaseMixin.test_full_result(self)
scipy.optimize.tests.test_least_squares.BaseMixin.test_full_result_single_fev(self)
scipy.optimize.tests.test_least_squares.BaseMixin.test_fun_and_jac_inconsistent_dimensions(self)
scipy.optimize.tests.test_least_squares.BaseMixin.test_fun_wrong_dimensions(self)
scipy.optimize.tests.test_least_squares.BaseMixin.test_incorrect_options_usage(self)
scipy.optimize.tests.test_least_squares.BaseMixin.test_jac_options(self)
scipy.optimize.tests.test_least_squares.BaseMixin.test_jac_wrong_dimensions(self)
scipy.optimize.tests.test_least_squares.BaseMixin.test_nfev_options(self)
scipy.optimize.tests.test_least_squares.BaseMixin.test_rosenbrock(self)
scipy.optimize.tests.test_least_squares.BaseMixin.test_rosenbrock_cropped(self)
scipy.optimize.tests.test_least_squares.BaseMixin.test_x0_complex_array(self)
scipy.optimize.tests.test_least_squares.BaseMixin.test_x0_complex_scalar(self)
scipy.optimize.tests.test_least_squares.BaseMixin.test_x0_multidimensional(self)
scipy.optimize.tests.test_least_squares.BaseMixin.test_x_scale_options(self)
scipy.optimize.tests.test_least_squares.BoundsMixin
scipy.optimize.tests.test_least_squares.BoundsMixin.test_bounds_instances(self)
scipy.optimize.tests.test_least_squares.BoundsMixin.test_bounds_shape(self)
scipy.optimize.tests.test_least_squares.BoundsMixin.test_in_bounds(self)
scipy.optimize.tests.test_least_squares.BoundsMixin.test_inconsistent(self)
scipy.optimize.tests.test_least_squares.BoundsMixin.test_inconsistent_shape(self)
scipy.optimize.tests.test_least_squares.BoundsMixin.test_infeasible(self)
scipy.optimize.tests.test_least_squares.BoundsMixin.test_rosenbrock_bounds(self)
scipy.optimize.tests.test_least_squares.BoundsMixin.test_wrong_number(self)
scipy.optimize.tests.test_least_squares.BroydenTridiagonal(self,n=100,mode='sparse')
scipy.optimize.tests.test_least_squares.BroydenTridiagonal.__init__(self,n=100,mode='sparse')
scipy.optimize.tests.test_least_squares.BroydenTridiagonal._jac(self,x)
scipy.optimize.tests.test_least_squares.BroydenTridiagonal.fun(self,x)
scipy.optimize.tests.test_least_squares.ExponentialFittingProblem(self,a,b,noise,n_outliers=1,x_range=(-1,1),n_points=11,random_seed=None)
scipy.optimize.tests.test_least_squares.ExponentialFittingProblem.__init__(self,a,b,noise,n_outliers=1,x_range=(-1,1),n_points=11,random_seed=None)
scipy.optimize.tests.test_least_squares.ExponentialFittingProblem.fun(self,p)
scipy.optimize.tests.test_least_squares.ExponentialFittingProblem.jac(self,p)
scipy.optimize.tests.test_least_squares.LossFunctionMixin
scipy.optimize.tests.test_least_squares.LossFunctionMixin.test_fun(self)
scipy.optimize.tests.test_least_squares.LossFunctionMixin.test_grad(self)
scipy.optimize.tests.test_least_squares.LossFunctionMixin.test_jac(self)
scipy.optimize.tests.test_least_squares.LossFunctionMixin.test_options(self)
scipy.optimize.tests.test_least_squares.LossFunctionMixin.test_robustness(self)
scipy.optimize.tests.test_least_squares.SparseMixin
scipy.optimize.tests.test_least_squares.SparseMixin.test_equivalence(self)
scipy.optimize.tests.test_least_squares.SparseMixin.test_exact_tr_solver(self)
scipy.optimize.tests.test_least_squares.SparseMixin.test_linear_operator(self)
scipy.optimize.tests.test_least_squares.SparseMixin.test_numerical_jac(self)
scipy.optimize.tests.test_least_squares.SparseMixin.test_solver_selection(self)
scipy.optimize.tests.test_least_squares.SparseMixin.test_tr_options(self)
scipy.optimize.tests.test_least_squares.SparseMixin.test_with_bounds(self)
scipy.optimize.tests.test_least_squares.SparseMixin.test_wrong_jac_sparsity(self)
scipy.optimize.tests.test_least_squares.SparseMixin.test_wrong_parameters(self)
scipy.optimize.tests.test_least_squares.SparseMixin.test_x_scale_jac_scale(self)
scipy.optimize.tests.test_least_squares.TestDogbox(BaseMixin,BoundsMixin,SparseMixin,LossFunctionMixin)
scipy.optimize.tests.test_least_squares.TestLM(BaseMixin)
scipy.optimize.tests.test_least_squares.TestLM.test_LinearOperator_not_supported(self)
scipy.optimize.tests.test_least_squares.TestLM.test_bounds_not_supported(self)
scipy.optimize.tests.test_least_squares.TestLM.test_jac_sparsity_not_supported(self)
scipy.optimize.tests.test_least_squares.TestLM.test_loss(self)
scipy.optimize.tests.test_least_squares.TestLM.test_m_less_n_not_supported(self)
scipy.optimize.tests.test_least_squares.TestLM.test_sparse_not_supported(self)
scipy.optimize.tests.test_least_squares.TestTRF(BaseMixin,BoundsMixin,SparseMixin,LossFunctionMixin)
scipy.optimize.tests.test_least_squares.TestTRF.test_lsmr_regularization(self)
scipy.optimize.tests.test_least_squares.cubic_soft_l1(z)
scipy.optimize.tests.test_least_squares.fun_2d_trivial(x)
scipy.optimize.tests.test_least_squares.fun_bvp(x)
scipy.optimize.tests.test_least_squares.fun_rosenbrock(x)
scipy.optimize.tests.test_least_squares.fun_rosenbrock_cropped(x)
scipy.optimize.tests.test_least_squares.fun_trivial(x,a=0)
scipy.optimize.tests.test_least_squares.fun_wrong_dimensions(x)
scipy.optimize.tests.test_least_squares.jac_2d_trivial(x)
scipy.optimize.tests.test_least_squares.jac_rosenbrock(x)
scipy.optimize.tests.test_least_squares.jac_rosenbrock_bad_dim(x)
scipy.optimize.tests.test_least_squares.jac_rosenbrock_cropped(x)
scipy.optimize.tests.test_least_squares.jac_trivial(x,a=0.0)
scipy.optimize.tests.test_least_squares.jac_wrong_dimensions(x,a=0.0)
scipy.optimize.tests.test_least_squares.test_basic()
scipy.optimize.tests.test_least_squares.test_fp32_gh12991()
scipy.optimize.tests.test_least_squares.test_small_tolerances_for_lm()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_zeros.py----------------------------------------
A:scipy.optimize.tests.test_zeros.b->sqrt(3)
A:scipy.optimize.tests.test_zeros.r->scipy.optimize._zeros_py.newton(f_zeroder_root, x0=[0.5] * 10, fprime=fder)
A:scipy.optimize.tests.test_zeros.(zero, r)->method(f_lrucached, a, b, full_output=True)
A:scipy.optimize.tests.test_zeros.k->{'a': 'x0', 'b': 'x1', 'func': 'f'}.get(k, k)
A:scipy.optimize.tests.test_zeros.method_kwargs->dict(**kwargs)
A:scipy.optimize.tests.test_zeros.root->scipy.optimize._zeros_py.newton(f, complex(10.0, 10.0), f_p)
A:scipy.optimize.tests.test_zeros.func_args->tc.get('args', ())
A:scipy.optimize.tests.test_zeros.(r, rr)->method(*method_args, args=func_args, **method_kwargs)
A:scipy.optimize.tests.test_zeros.sig->_getfullargspec(method)
A:scipy.optimize.tests.test_zeros.nDefaults->len(sig.defaults)
A:scipy.optimize.tests.test_zeros.atol->tols.get('tol', tols['xtol'])
A:scipy.optimize.tests.test_zeros.tests->get_tests(collection, smoothness=smoothness)
A:scipy.optimize.tests.test_zeros.x->scipy.optimize._zeros_py.newton(lambda y: (y + 1.0) ** 2, x0=p0, disp=True)
A:scipy.optimize.tests.test_zeros.a0->numpy.array([5.32725221, 5.48673747, 5.49539973, 5.36387202, 4.80237316, 1.43764452, 5.23063958, 5.46094772, 5.50512718, 5.4204629])
A:scipy.optimize.tests.test_zeros.t->numpy.ones(4)
A:scipy.optimize.tests.test_zeros.results->scipy.optimize._zeros_py.newton(lambda y: y ** 2 - 2, [0.0, 0.0], lambda y: 2 * y, full_output=True)
A:scipy.optimize.tests.test_zeros.sol0->root_scalar(f1, method='halley', x0=3, fprime=f1_1, fprime2=f1_2)
A:scipy.optimize.tests.test_zeros.sol->root_scalar(f1_and_p_and_pp, method='halley', x0=3, fprime2=True)
A:scipy.optimize.tests.test_zeros.(x, r)->scipy.optimize._zeros_py.newton(self.f1, x0, maxiter=iters, disp=True, **kwargs)
A:scipy.optimize.tests.test_zeros.x0->numpy.array([-2], dtype=np.float32)
A:scipy.optimize.tests.test_zeros.x0_copy->numpy.array([-2], dtype=np.float32).copy()
A:scipy.optimize.tests.test_zeros.res->method(lambda x: np.exp(x) - c, a, b)
A:scipy.optimize.tests.test_zeros.c->numpy.exp(root)
A:scipy.optimize.tests.test_zeros.size->len(x)
A:scipy.optimize.tests.test_zeros.z->complex(1.0, 2.0)
A:scipy.optimize.tests.test_zeros.y->scipy.optimize._zeros_py.newton(f, z, args=coeffs, fprime=f_1, fprime2=f_2, tol=1e-06)
A:scipy.optimize.tests.test_zeros.result->scipy.optimize._zeros_py.brentq(lambda x: ((1.2 * x - 2.3) * x + 3.4) * x - 4.5, -30, 30, (), 1e-06, 1e-06, maximum_iterations, full_output=True, disp=False)
A:scipy.optimize.tests.test_zeros.(rt, r)->newton(f, x0, fprime=fp, fprime2=fpp, full_output=True)
A:scipy.optimize.tests.test_zeros.x0_array->numpy.array([-2, -3], dtype=np.float32)
scipy.optimize.tests.test_zeros.TestBasic
scipy.optimize.tests.test_zeros.TestBasic._run_one_test(self,tc,method,sig_args_keys=None,sig_kwargs_keys=None,**kwargs)
scipy.optimize.tests.test_zeros.TestBasic.f1(x)
scipy.optimize.tests.test_zeros.TestBasic.f1_1(x)
scipy.optimize.tests.test_zeros.TestBasic.f1_2(x)
scipy.optimize.tests.test_zeros.TestBasic.f2(x)
scipy.optimize.tests.test_zeros.TestBasic.f2_1(x)
scipy.optimize.tests.test_zeros.TestBasic.f2_2(x)
scipy.optimize.tests.test_zeros.TestBasic.run_check(self,method,name)
scipy.optimize.tests.test_zeros.TestBasic.run_check_by_name(self,name,smoothness=0,**kwargs)
scipy.optimize.tests.test_zeros.TestBasic.run_check_lru_cached(self,method,name)
scipy.optimize.tests.test_zeros.TestBasic.run_collection(self,collection,method,name,smoothness=None,known_fail=None,xtol=4*_FLOAT_EPS,rtol=4*_FLOAT_EPS,**kwargs)
scipy.optimize.tests.test_zeros.TestBasic.run_tests(self,tests,method,name,xtol=4*_FLOAT_EPS,rtol=4*_FLOAT_EPS,known_fail=None,**kwargs)
scipy.optimize.tests.test_zeros.TestBasic.test_array_newton(self)
scipy.optimize.tests.test_zeros.TestBasic.test_array_newton_complex(self)
scipy.optimize.tests.test_zeros.TestBasic.test_array_newton_integers(self)
scipy.optimize.tests.test_zeros.TestBasic.test_array_newton_zero_der_failures(self)
scipy.optimize.tests.test_zeros.TestBasic.test_array_secant_active_zero_der(self)
scipy.optimize.tests.test_zeros.TestBasic.test_bisect(self)
scipy.optimize.tests.test_zeros.TestBasic.test_brenth(self)
scipy.optimize.tests.test_zeros.TestBasic.test_brentq(self)
scipy.optimize.tests.test_zeros.TestBasic.test_deriv_zero_warning(self)
scipy.optimize.tests.test_zeros.TestBasic.test_halley_by_name(self)
scipy.optimize.tests.test_zeros.TestBasic.test_halley_collections(self)
scipy.optimize.tests.test_zeros.TestBasic.test_maxiter_int_check(self)
scipy.optimize.tests.test_zeros.TestBasic.test_newton(self)
scipy.optimize.tests.test_zeros.TestBasic.test_newton_by_name(self)
scipy.optimize.tests.test_zeros.TestBasic.test_newton_collections(self)
scipy.optimize.tests.test_zeros.TestBasic.test_newton_combined(self)
scipy.optimize.tests.test_zeros.TestBasic.test_newton_does_not_modify_x0(self)
scipy.optimize.tests.test_zeros.TestBasic.test_newton_full_output(self)
scipy.optimize.tests.test_zeros.TestBasic.test_ridder(self)
scipy.optimize.tests.test_zeros.TestBasic.test_root_scalar_fail(self)
scipy.optimize.tests.test_zeros.TestBasic.test_secant_by_name(self)
scipy.optimize.tests.test_zeros.TestBasic.test_toms748(self)
scipy.optimize.tests.test_zeros.TestRootResults
scipy.optimize.tests.test_zeros.TestRootResults.test_repr(self)
scipy.optimize.tests.test_zeros.f1(x)
scipy.optimize.tests.test_zeros.f1_1(x)
scipy.optimize.tests.test_zeros.f1_2(x)
scipy.optimize.tests.test_zeros.f1_and_p_and_pp(x)
scipy.optimize.tests.test_zeros.f2(x)
scipy.optimize.tests.test_zeros.f2_1(x)
scipy.optimize.tests.test_zeros.f2_2(x)
scipy.optimize.tests.test_zeros.f_lrucached(x)
scipy.optimize.tests.test_zeros.test_array_newton_failures()
scipy.optimize.tests.test_zeros.test_brent_underflow_in_root_bracketing()
scipy.optimize.tests.test_zeros.test_complex_halley()
scipy.optimize.tests.test_zeros.test_gh8904_zeroder_at_root_fails()
scipy.optimize.tests.test_zeros.test_gh9254_flag_if_maxiter_exceeded(maximum_iterations,flag_expected)
scipy.optimize.tests.test_zeros.test_gh9551_raise_error_if_disp_true()
scipy.optimize.tests.test_zeros.test_gh_5555()
scipy.optimize.tests.test_zeros.test_gh_5557()
scipy.optimize.tests.test_zeros.test_gh_8881()
scipy.optimize.tests.test_zeros.test_gh_9608_preserve_array_shape()
scipy.optimize.tests.test_zeros.test_zero_der_nz_dp()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_differentiable_functions.py----------------------------------------
A:scipy.optimize.tests.test_differentiable_functions.ex->ExVectorialFunction()
A:scipy.optimize.tests.test_differentiable_functions.analit->VectorFunction(ex.fun, x0, ex.jac, ex.hess, None, None, (-np.inf, np.inf), None)
A:scipy.optimize.tests.test_differentiable_functions.approx->VectorFunction(ex.fun, x0, ex.jac, '2-point', None, None, (-np.inf, np.inf), None)
A:scipy.optimize.tests.test_differentiable_functions.f_analit->VectorFunction(ex.fun, x0, ex.jac, ex.hess, None, None, (-np.inf, np.inf), None).fun(x)
A:scipy.optimize.tests.test_differentiable_functions.g_analit->VectorFunction(ex.fun, x0, ex.jac, ex.hess, None, None, (-np.inf, np.inf), None).grad(x)
A:scipy.optimize.tests.test_differentiable_functions.f_approx->VectorFunction(ex.fun, x0, ex.jac, '2-point', None, None, (-np.inf, np.inf), None).fun(x)
A:scipy.optimize.tests.test_differentiable_functions.g_approx->VectorFunction(ex.fun, x0, ex.jac, '2-point', None, None, (-np.inf, np.inf), None).grad(x)
A:scipy.optimize.tests.test_differentiable_functions.sf->ScalarFunction(rosen, x0, (), '2-point', rosen_hess, None, (-np.inf, np.inf))
A:scipy.optimize.tests.test_differentiable_functions.H_analit->VectorFunction(ex.fun, x0, ex.jac, ex.hess, None, None, (-np.inf, np.inf), None).hess(x, v)
A:scipy.optimize.tests.test_differentiable_functions.H_approx->VectorFunction(ex.fun, x0, ex.jac, '2-point', None, None, (-np.inf, np.inf), None).hess(x, v)
A:scipy.optimize.tests.test_differentiable_functions._->VectorFunction(ex.fun, x0, ex.jac, '2-point', None, None, (-np.inf, np.inf), None).jac(x)
A:scipy.optimize.tests.test_differentiable_functions.x->numpy.array([-1, 2, 1])
A:scipy.optimize.tests.test_differentiable_functions.f1->IdentityVectorFunction(x0, None)
A:scipy.optimize.tests.test_differentiable_functions.f2->IdentityVectorFunction(x0, False)
A:scipy.optimize.tests.test_differentiable_functions.hess->BFGS()
A:scipy.optimize.tests.test_differentiable_functions.x0->numpy.zeros(3)
A:scipy.optimize.tests.test_differentiable_functions.J_analit->VectorFunction(ex.fun, x0, ex.jac, ex.hess, None, None, (-np.inf, np.inf), None).jac(x)
A:scipy.optimize.tests.test_differentiable_functions.J_approx->VectorFunction(ex.fun, x0, ex.jac, '2-point', None, None, (-np.inf, np.inf), None).jac(x)
A:scipy.optimize.tests.test_differentiable_functions.vf->VectorFunction(ex.fun, x0, '3-point', hess, None, None, (-np.inf, np.inf), None)
A:scipy.optimize.tests.test_differentiable_functions.A_dense->numpy.array([[-1, 2, 0], [0, 4, 2]])
A:scipy.optimize.tests.test_differentiable_functions.A_sparse->csr_matrix(A_dense)
A:scipy.optimize.tests.test_differentiable_functions.v->numpy.array([-2, 3, 0])
A:scipy.optimize.tests.test_differentiable_functions.Ax->numpy.array([-3, -4])
A:scipy.optimize.tests.test_differentiable_functions.f3->IdentityVectorFunction(x0, True)
A:scipy.optimize.tests.test_differentiable_functions.f4->LinearVectorFunction(A_sparse, x0, None)
A:scipy.optimize.tests.test_differentiable_functions.f5->LinearVectorFunction(A_sparse, x0, True)
A:scipy.optimize.tests.test_differentiable_functions.f6->LinearVectorFunction(A_sparse, x0, False)
A:scipy.optimize.tests.test_differentiable_functions.A->numpy.array([[-1, 2, 0], [0, 4, 2]])
A:scipy.optimize.tests.test_differentiable_functions.fun->LinearVectorFunction(A, x0, False)
A:scipy.optimize.tests.test_differentiable_functions.x1->numpy.array([-1, 3, 10])
scipy.optimize.tests.test_differentiable_functions.ExScalarFunction(self)
scipy.optimize.tests.test_differentiable_functions.ExScalarFunction.__init__(self)
scipy.optimize.tests.test_differentiable_functions.ExScalarFunction.fun(self,x)
scipy.optimize.tests.test_differentiable_functions.ExScalarFunction.grad(self,x)
scipy.optimize.tests.test_differentiable_functions.ExScalarFunction.hess(self,x)
scipy.optimize.tests.test_differentiable_functions.ExVectorialFunction(self)
scipy.optimize.tests.test_differentiable_functions.ExVectorialFunction.__init__(self)
scipy.optimize.tests.test_differentiable_functions.ExVectorialFunction.fun(self,x)
scipy.optimize.tests.test_differentiable_functions.ExVectorialFunction.hess(self,x,v)
scipy.optimize.tests.test_differentiable_functions.ExVectorialFunction.jac(self,x)
scipy.optimize.tests.test_differentiable_functions.TestScalarFunction(TestCase)
scipy.optimize.tests.test_differentiable_functions.TestScalarFunction.test_finite_difference_grad(self)
scipy.optimize.tests.test_differentiable_functions.TestScalarFunction.test_finite_difference_hess_linear_operator(self)
scipy.optimize.tests.test_differentiable_functions.TestScalarFunction.test_fun_and_grad(self)
scipy.optimize.tests.test_differentiable_functions.TestScalarFunction.test_lowest_x(self)
scipy.optimize.tests.test_differentiable_functions.TestScalarFunction.test_x_storage_overlap(self)
scipy.optimize.tests.test_differentiable_functions.TestVectorialFunction(TestCase)
scipy.optimize.tests.test_differentiable_functions.TestVectorialFunction.test_finite_difference_hess_linear_operator(self)
scipy.optimize.tests.test_differentiable_functions.TestVectorialFunction.test_finite_difference_jac(self)
scipy.optimize.tests.test_differentiable_functions.TestVectorialFunction.test_x_storage_overlap(self)
scipy.optimize.tests.test_differentiable_functions.test_IdentityVectorFunction()
scipy.optimize.tests.test_differentiable_functions.test_LinearVectorFunction()
scipy.optimize.tests.test_differentiable_functions.test_LinearVectorFunction_memoization()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test__remove_redundancy.py----------------------------------------
A:scipy.optimize.tests.test__remove_redundancy.A0->numpy.random.rand(m, n)
A:scipy.optimize.tests.test__remove_redundancy.b0->numpy.random.rand(m)
A:scipy.optimize.tests.test__remove_redundancy.(A1, b1, status, message)->self.rr(A, b)
A:scipy.optimize.tests.test__remove_redundancy.A->numpy.random.rand(m, n)
A:scipy.optimize.tests.test__remove_redundancy.b->numpy.zeros(A.shape[0])
A:scipy.optimize.tests.test__remove_redundancy.A0[-1, :]->numpy.arange(m - 1).dot(A0[:-1])
A:scipy.optimize.tests.test__remove_redundancy.x->numpy.linalg.solve(A0[:n, :], b0[:n])
A:scipy.optimize.tests.test__remove_redundancy.b0[n:]->A0[n:, :].dot(x)
A:scipy.optimize.tests.test__remove_redundancy.b0[-1]->numpy.arange(m - 1).dot(b0[:-1])
A:scipy.optimize.tests.test__remove_redundancy.b[-1]->numpy.sum(b[:-1])
A:scipy.optimize.tests.test__remove_redundancy.rank->numpy.linalg.matrix_rank(A)
A:scipy.optimize.tests.test__remove_redundancy.(A, b, c, numbers, _)->magic_square(4)
A:scipy.optimize.tests.test__remove_redundancy.rr_res->_remove_redundancy_pivot_sparse(csc_matrix(A), b)
scipy.optimize.tests.test__remove_redundancy.RRCommonTests
scipy.optimize.tests.test__remove_redundancy.RRCommonTests.test_dense1(self)
scipy.optimize.tests.test__remove_redundancy.RRCommonTests.test_dense2(self)
scipy.optimize.tests.test__remove_redundancy.RRCommonTests.test_dense3(self)
scipy.optimize.tests.test__remove_redundancy.RRCommonTests.test_infeasible_m_eq_n(self)
scipy.optimize.tests.test__remove_redundancy.RRCommonTests.test_infeasible_m_gt_n(self)
scipy.optimize.tests.test__remove_redundancy.RRCommonTests.test_infeasible_m_lt_n(self)
scipy.optimize.tests.test__remove_redundancy.RRCommonTests.test_infeasible_zero_row(self)
scipy.optimize.tests.test__remove_redundancy.RRCommonTests.test_m_eq_n_sparse(self)
scipy.optimize.tests.test__remove_redundancy.RRCommonTests.test_m_gt_n(self)
scipy.optimize.tests.test__remove_redundancy.RRCommonTests.test_m_gt_n_rank_deficient(self)
scipy.optimize.tests.test__remove_redundancy.RRCommonTests.test_m_gt_n_sparse(self)
scipy.optimize.tests.test__remove_redundancy.RRCommonTests.test_m_lt_n_rank_deficient(self)
scipy.optimize.tests.test__remove_redundancy.RRCommonTests.test_m_lt_n_sparse(self)
scipy.optimize.tests.test__remove_redundancy.RRCommonTests.test_magic_square(self)
scipy.optimize.tests.test__remove_redundancy.RRCommonTests.test_magic_square2(self)
scipy.optimize.tests.test__remove_redundancy.RRCommonTests.test_no_redundancy(self)
scipy.optimize.tests.test__remove_redundancy.RRCommonTests.test_remove_zero_row(self)
scipy.optimize.tests.test__remove_redundancy.TestRRID(RRCommonTests)
scipy.optimize.tests.test__remove_redundancy.TestRRID.rr(self,A,b)
scipy.optimize.tests.test__remove_redundancy.TestRRPivotDense(RRCommonTests)
scipy.optimize.tests.test__remove_redundancy.TestRRPivotDense.rr(self,A,b)
scipy.optimize.tests.test__remove_redundancy.TestRRPivotSparse(RRCommonTests)
scipy.optimize.tests.test__remove_redundancy.TestRRPivotSparse.rr(self,A,b)
scipy.optimize.tests.test__remove_redundancy.TestRRSVD(RRCommonTests)
scipy.optimize.tests.test__remove_redundancy.TestRRSVD.rr(self,A,b)
scipy.optimize.tests.test__remove_redundancy._assert_success(res,desired_fun=None,desired_x=None,rtol=1e-07,atol=1e-07)
scipy.optimize.tests.test__remove_redundancy.redundancy_removed(A,B)
scipy.optimize.tests.test__remove_redundancy.setup_module()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_trustregion_krylov.py----------------------------------------
A:scipy.optimize.tests.test_trustregion_krylov.KrylovQP->get_trlib_quadratic_subproblem(tol_rel_i=1e-08, tol_rel_b=1e-06)
A:scipy.optimize.tests.test_trustregion_krylov.KrylovQP_disp->get_trlib_quadratic_subproblem(tol_rel_i=1e-08, tol_rel_b=1e-06, disp=True)
A:scipy.optimize.tests.test_trustregion_krylov.H->numpy.array([[0.88547534, 2.90692271, 0.98440885, -0.78911503, -0.28035809], [2.90692271, -0.04618819, 0.32867263, -0.83737945, 0.17116396], [0.98440885, 0.32867263, -0.87355957, -0.06521957, -1.43030957], [-0.78911503, -0.83737945, -0.06521957, -1.645709, -0.33887298], [-0.28035809, 0.17116396, -1.43030957, -0.33887298, -1.68586978]])
A:scipy.optimize.tests.test_trustregion_krylov.g->numpy.array([0, 0, 0, 0, 1e-06])
A:scipy.optimize.tests.test_trustregion_krylov.subprob->KrylovQP_disp(x=0, fun=lambda x: 0, jac=lambda x: g, hess=lambda x: None, hessp=lambda x, y: H.dot(y))
A:scipy.optimize.tests.test_trustregion_krylov.(p, hits_boundary)->KrylovQP_disp(x=0, fun=lambda x: 0, jac=lambda x: g, hess=lambda x: None, hessp=lambda x, y: H.dot(y)).solve(trust_radius)
A:scipy.optimize.tests.test_trustregion_krylov.(out, err)->capsys.readouterr()
scipy.optimize.tests.test_trustregion_krylov.TestKrylovQuadraticSubproblem
scipy.optimize.tests.test_trustregion_krylov.TestKrylovQuadraticSubproblem.test_disp(self,capsys)
scipy.optimize.tests.test_trustregion_krylov.TestKrylovQuadraticSubproblem.test_for_interior_convergence(self)
scipy.optimize.tests.test_trustregion_krylov.TestKrylovQuadraticSubproblem.test_for_the_easy_case(self)
scipy.optimize.tests.test_trustregion_krylov.TestKrylovQuadraticSubproblem.test_for_the_hard_case(self)
scipy.optimize.tests.test_trustregion_krylov.TestKrylovQuadraticSubproblem.test_for_very_close_to_zero(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_trustregion_exact.py----------------------------------------
A:scipy.optimize.tests.test_trustregion_exact.rand->numpy.random.uniform(-1, 1, (n, n))
A:scipy.optimize.tests.test_trustregion_exact.(Q, _, _)->qr(rand, pivoting='True')
A:scipy.optimize.tests.test_trustregion_exact.eigvalues->numpy.random.uniform(min_eig, max_eig, n)
A:scipy.optimize.tests.test_trustregion_exact.Qaux->numpy.multiply(eigvalues, Q)
A:scipy.optimize.tests.test_trustregion_exact.A->numpy.array([[0, 3, 11], [3, 12, 5], [11, 5, 6]])
A:scipy.optimize.tests.test_trustregion_exact.g->numpy.random.uniform(-1, 1, n)
A:scipy.optimize.tests.test_trustregion_exact.g[:-1]->numpy.random.uniform(-1, 1, n - 1)
A:scipy.optimize.tests.test_trustregion_exact.C->numpy.array([[1, 2, 3, 4], [0, 0.05, 60, 7], [0, 0, 0.8, 9], [0, 0, 0, 10]])
A:scipy.optimize.tests.test_trustregion_exact.(U, s, Vt)->svd(C)
A:scipy.optimize.tests.test_trustregion_exact.(smin, zmin)->estimate_smallest_singular_value(C)
A:scipy.optimize.tests.test_trustregion_exact.(cholesky,)->get_lapack_funcs(('potrf',), (A,))
A:scipy.optimize.tests.test_trustregion_exact.(c, k)->cholesky(A, lower=False, overwrite_a=False, clean=True)
A:scipy.optimize.tests.test_trustregion_exact.(delta, v)->singular_leading_submatrix(A, c, k)
A:scipy.optimize.tests.test_trustregion_exact.quadratic_term->numpy.dot(v, np.dot(A, v))
A:scipy.optimize.tests.test_trustregion_exact.subprob->IterativeSubproblem(0, lambda x: 0, lambda x: g, lambda x: H, k_easy=k_easy, k_hard=k_hard)
A:scipy.optimize.tests.test_trustregion_exact.(p, hits_boundary)->IterativeSubproblem(0, lambda x: 0, lambda x: g, lambda x: H, k_easy=k_easy, k_hard=k_hard).solve(trust_radius)
A:scipy.optimize.tests.test_trustregion_exact.(H, g)->random_entry(n, min_eig, max_eig, case)
A:scipy.optimize.tests.test_trustregion_exact.subprob_ac->IterativeSubproblem(0, lambda x: 0, lambda x: g, lambda x: H, k_easy=1e-10, k_hard=1e-10)
A:scipy.optimize.tests.test_trustregion_exact.(p_ac, hits_boundary_ac)->IterativeSubproblem(0, lambda x: 0, lambda x: g, lambda x: H, k_easy=1e-10, k_hard=1e-10).solve(trust_radius)
A:scipy.optimize.tests.test_trustregion_exact.k_easy->min(k_trf - 1, 1 - np.sqrt(k_opt))
scipy.optimize.tests.test_trustregion_exact.TestEstimateSmallestSingularValue
scipy.optimize.tests.test_trustregion_exact.TestEstimateSmallestSingularValue.test_for_ill_condiotioned_matrix(self)
scipy.optimize.tests.test_trustregion_exact.TestIterativeSubproblem
scipy.optimize.tests.test_trustregion_exact.TestIterativeSubproblem.test_for_interior_convergence(self)
scipy.optimize.tests.test_trustregion_exact.TestIterativeSubproblem.test_for_jac_equal_zero(self)
scipy.optimize.tests.test_trustregion_exact.TestIterativeSubproblem.test_for_jac_very_close_to_zero(self)
scipy.optimize.tests.test_trustregion_exact.TestIterativeSubproblem.test_for_random_entries(self)
scipy.optimize.tests.test_trustregion_exact.TestIterativeSubproblem.test_for_the_easy_case(self)
scipy.optimize.tests.test_trustregion_exact.TestIterativeSubproblem.test_for_the_hard_case(self)
scipy.optimize.tests.test_trustregion_exact.TestSingularLeadingSubmatrix
scipy.optimize.tests.test_trustregion_exact.TestSingularLeadingSubmatrix.test_for_already_singular_leading_submatrix(self)
scipy.optimize.tests.test_trustregion_exact.TestSingularLeadingSubmatrix.test_for_first_element_equal_to_zero(self)
scipy.optimize.tests.test_trustregion_exact.TestSingularLeadingSubmatrix.test_for_simetric_indefinite_matrix(self)
scipy.optimize.tests.test_trustregion_exact.random_entry(n,min_eig,max_eig,case)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_tnc.py----------------------------------------
A:scipy.optimize.tests.test_tnc.dif[0]->pow(x[0] + 1.0, 2)
A:scipy.optimize.tests.test_tnc.v1->numpy.cos(x[0] + x[1])
A:scipy.optimize.tests.test_tnc.res->scipy.optimize.minimize(fun, x0, bounds=bounds, method='TNC', options={'maxfun': 1000})
A:scipy.optimize.tests.test_tnc.(x, nf, rc)->scipy.optimize.fmin_tnc(fg, x, bounds=bounds, messages=optimize._tnc.MSG_NONE, maxfun=200)
A:scipy.optimize.tests.test_tnc.res2->scipy.optimize.minimize(fun, x0, bounds=bounds, method='TNC', options={'maxfun': 1000}, callback=callback)
scipy.optimize.tests.test_tnc.TestTnc
scipy.optimize.tests.test_tnc.TestTnc.f1(self,x,a=100.0)
scipy.optimize.tests.test_tnc.TestTnc.f3(self,x)
scipy.optimize.tests.test_tnc.TestTnc.f38(self,x)
scipy.optimize.tests.test_tnc.TestTnc.f4(self,x)
scipy.optimize.tests.test_tnc.TestTnc.f45(self,x)
scipy.optimize.tests.test_tnc.TestTnc.f5(self,x)
scipy.optimize.tests.test_tnc.TestTnc.fg1(self,x,a=100.0)
scipy.optimize.tests.test_tnc.TestTnc.fg3(self,x)
scipy.optimize.tests.test_tnc.TestTnc.fg38(self,x)
scipy.optimize.tests.test_tnc.TestTnc.fg4(self,x)
scipy.optimize.tests.test_tnc.TestTnc.fg45(self,x)
scipy.optimize.tests.test_tnc.TestTnc.fg5(self,x)
scipy.optimize.tests.test_tnc.TestTnc.g1(self,x,a=100.0)
scipy.optimize.tests.test_tnc.TestTnc.g3(self,x)
scipy.optimize.tests.test_tnc.TestTnc.g38(self,x)
scipy.optimize.tests.test_tnc.TestTnc.g4(self,x)
scipy.optimize.tests.test_tnc.TestTnc.g45(self,x)
scipy.optimize.tests.test_tnc.TestTnc.g5(self,x)
scipy.optimize.tests.test_tnc.TestTnc.setup_method(self)
scipy.optimize.tests.test_tnc.TestTnc.test_callback_shouldnt_affect_minimization(self)
scipy.optimize.tests.test_tnc.TestTnc.test_maxiter_depreciations(self)
scipy.optimize.tests.test_tnc.TestTnc.test_minimize_tnc1(self)
scipy.optimize.tests.test_tnc.TestTnc.test_minimize_tnc1b(self)
scipy.optimize.tests.test_tnc.TestTnc.test_minimize_tnc1c(self)
scipy.optimize.tests.test_tnc.TestTnc.test_minimize_tnc2(self)
scipy.optimize.tests.test_tnc.TestTnc.test_minimize_tnc3(self)
scipy.optimize.tests.test_tnc.TestTnc.test_minimize_tnc38(self)
scipy.optimize.tests.test_tnc.TestTnc.test_minimize_tnc4(self)
scipy.optimize.tests.test_tnc.TestTnc.test_minimize_tnc45(self)
scipy.optimize.tests.test_tnc.TestTnc.test_minimize_tnc5(self)
scipy.optimize.tests.test_tnc.TestTnc.test_raising_exceptions(self)
scipy.optimize.tests.test_tnc.TestTnc.test_tnc1(self)
scipy.optimize.tests.test_tnc.TestTnc.test_tnc1b(self)
scipy.optimize.tests.test_tnc.TestTnc.test_tnc1c(self)
scipy.optimize.tests.test_tnc.TestTnc.test_tnc2(self)
scipy.optimize.tests.test_tnc.TestTnc.test_tnc3(self)
scipy.optimize.tests.test_tnc.TestTnc.test_tnc38(self)
scipy.optimize.tests.test_tnc.TestTnc.test_tnc4(self)
scipy.optimize.tests.test_tnc.TestTnc.test_tnc45(self)
scipy.optimize.tests.test_tnc.TestTnc.test_tnc5(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_milp.py----------------------------------------
A:scipy.optimize.tests.test_milp.(A, b, c, numbers, M)->magic_square(n)
A:scipy.optimize.tests.test_milp.res->milp(c_vector, integrality=integrality, bounds=variable_bounds, constraints=constraints, options=options)
A:scipy.optimize.tests.test_milp.captured->capsys.readouterr()
A:scipy.optimize.tests.test_milp.x->numpy.round(res.x)
A:scipy.optimize.tests.test_milp.s->(numbers.flatten() * x).reshape(n ** 2, n, n)
A:scipy.optimize.tests.test_milp.square->numpy.sum(s, axis=0)
A:scipy.optimize.tests.test_milp.linear_constraint->LinearConstraint(A, b_l, b_u)
A:scipy.optimize.tests.test_milp.res1->milp(c, bounds=variable_bounds, constraints=constraints)
A:scipy.optimize.tests.test_milp.res2->milp(c, bounds=variable_bounds, constraints=constraints2)
A:scipy.optimize.tests.test_milp.res3->milp(c=c, constraints=[(A, b_l, b_u)], integrality=True)
A:scipy.optimize.tests.test_milp.res4->milp(c=c, constraints=[linear_constraint], integrality=True)
A:scipy.optimize.tests.test_milp.res5->milp(c=c, integrality=True, constraints=[(A[:1], b_l[:1], b_u[:1]), (A[1:], b_l[1:], b_u[1:])])
A:scipy.optimize.tests.test_milp.res6->milp(c=c, integrality=True, constraints=[LinearConstraint(A[:1], b_l[:1], b_u[:1]), LinearConstraint(A[1:], b_l[1:], b_u[1:])])
A:scipy.optimize.tests.test_milp.res7->milp(c=c, integrality=True, constraints=[(A[:1], b_l[:1], b_u[:1]), LinearConstraint(A[1:], b_l[1:], b_u[1:])])
A:scipy.optimize.tests.test_milp.xs->numpy.array([res1.x, res2.x, res3.x, res4.x, res5.x, res6.x, res7.x])
A:scipy.optimize.tests.test_milp.funs->numpy.array([res1.fun, res2.fun, res3.fun, res4.fun, res5.fun, res6.fun, res7.fun])
A:scipy.optimize.tests.test_milp.b_l->numpy.full_like(b_u, -np.inf, dtype=np.float64)
A:scipy.optimize.tests.test_milp.constraints->LinearConstraint(A, b_lb, b_ub)
A:scipy.optimize.tests.test_milp.integrality->numpy.ones(100)
A:scipy.optimize.tests.test_milp.bounds->Bounds(lb, ub)
A:scipy.optimize.tests.test_milp.A_eq->numpy.array([[22, 13, 26, 33, 21, 3, 14, 26], [39, 16, 22, 28, 26, 30, 23, 24], [18, 14, 29, 27, 30, 38, 26, 26], [41, 26, 28, 36, 18, 38, 16, 26]])
A:scipy.optimize.tests.test_milp.b_eq->numpy.array([7872, 10466, 11322, 12058])
A:scipy.optimize.tests.test_milp.c->numpy.array([2, 10, 13, 17, 7, 5, 7, 3])
A:scipy.optimize.tests.test_milp.rng->numpy.random.default_rng(5123833489170494244)
A:scipy.optimize.tests.test_milp.A->numpy.random.default_rng(5123833489170494244).integers(0, 5, size=(6, 6))
A:scipy.optimize.tests.test_milp.b_lb->numpy.full(100, fill_value=-np.inf)
A:scipy.optimize.tests.test_milp.b_ub->numpy.full(100, fill_value=25)
A:scipy.optimize.tests.test_milp.variable_lb->numpy.zeros(100)
A:scipy.optimize.tests.test_milp.variable_ub->numpy.ones(100)
A:scipy.optimize.tests.test_milp.variable_bounds->Bounds(lb, ub)
A:scipy.optimize.tests.test_milp.bl->numpy.full(6, fill_value=-np.inf)
A:scipy.optimize.tests.test_milp.bu->numpy.full(6, fill_value=10)
A:scipy.optimize.tests.test_milp.lb->numpy.zeros(6)
A:scipy.optimize.tests.test_milp.ub->numpy.ones(6)
A:scipy.optimize.tests.test_milp.ref->milp(c, bounds=variable_bounds, constraints=(A, bl, bu))
scipy.optimize.tests.test_milp.test_infeasible_prob_16609()
scipy.optimize.tests.test_milp.test_milp_1()
scipy.optimize.tests.test_milp.test_milp_2()
scipy.optimize.tests.test_milp.test_milp_3()
scipy.optimize.tests.test_milp.test_milp_4()
scipy.optimize.tests.test_milp.test_milp_5()
scipy.optimize.tests.test_milp.test_milp_6()
scipy.optimize.tests.test_milp.test_milp_iv()
scipy.optimize.tests.test_milp.test_milp_optional_args()
scipy.optimize.tests.test_milp.test_milp_options(capsys)
scipy.optimize.tests.test_milp.test_milp_timeout_16545(options,msg)
scipy.optimize.tests.test_milp.test_result()
scipy.optimize.tests.test_milp.test_three_constraints_16878()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test__spectral.py----------------------------------------
A:scipy.optimize.tests.test__spectral.sol->root(f, x, args=(arg,), method='DF-SANE')
A:scipy.optimize.tests.test__spectral.err_msg->repr([xscale, yscale, line_search, problem, np.linalg.norm(func(sol.x, n)), fatol, sol.success, sol.nit, sol.nfev])
A:scipy.optimize.tests.test__spectral.f0->numpy.linalg.norm(func(x0))
A:scipy.optimize.tests.test__spectral.fx->numpy.linalg.norm(func(sol.x))
A:scipy.optimize.tests.test__spectral.xp->numpy.linalg.solve(A, b)
A:scipy.optimize.tests.test__spectral.A->numpy.arange(n * n).reshape(n, n)
A:scipy.optimize.tests.test__spectral.x->numpy.zeros([2, 2])
A:scipy.optimize.tests.test__spectral.arg->numpy.ones([2, 2], dtype=dt)
A:scipy.optimize.tests.test__spectral.g->numpy.zeros([n])
A:scipy.optimize.tests.test__spectral.i->numpy.arange(2, n)
A:scipy.optimize.tests.test__spectral.x0->numpy.array([-1, 1 / 2, -1] * (n // 3))
A:scipy.optimize.tests.test__spectral.g[2::3]->phi(x[2::3])
scipy.optimize.tests.test__spectral.F_1(x,n)
scipy.optimize.tests.test__spectral.F_10(x,n)
scipy.optimize.tests.test__spectral.F_2(x,n)
scipy.optimize.tests.test__spectral.F_4(x,n)
scipy.optimize.tests.test__spectral.F_6(x,n)
scipy.optimize.tests.test__spectral.F_7(x,n)
scipy.optimize.tests.test__spectral.F_9(x,n)
scipy.optimize.tests.test__spectral.test_complex()
scipy.optimize.tests.test__spectral.test_linear_definite()
scipy.optimize.tests.test__spectral.test_performance()
scipy.optimize.tests.test__spectral.test_shape()
scipy.optimize.tests.test__spectral.x0_1(n)
scipy.optimize.tests.test__spectral.x0_10(n)
scipy.optimize.tests.test__spectral.x0_2(n)
scipy.optimize.tests.test__spectral.x0_4(n)
scipy.optimize.tests.test__spectral.x0_6(n)
scipy.optimize.tests.test__spectral.x0_7(n)
scipy.optimize.tests.test__spectral.x0_9(n)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test__numdiff.py----------------------------------------
A:scipy.optimize.tests.test__numdiff.A->self.structure(self.n)
A:scipy.optimize.tests.test__numdiff.order->numpy.arange(self.n)
A:scipy.optimize.tests.test__numdiff.groups_true->numpy.array([2, 0, 1, 2, 0, 1])
A:scipy.optimize.tests.test__numdiff.groups->numpy.arange(self.n)
A:scipy.optimize.tests.test__numdiff.groups_1->group_columns(A, order)
A:scipy.optimize.tests.test__numdiff.groups_2->group_columns(A, order)
A:scipy.optimize.tests.test__numdiff.x0->numpy.array([1e-05, 0, 1, 100000.0])
A:scipy.optimize.tests.test__numdiff.h->_compute_absolute_step(None, x0, f(x0), '2-point')
A:scipy.optimize.tests.test__numdiff.inf_lower->numpy.empty_like(x0)
A:scipy.optimize.tests.test__numdiff.inf_upper->numpy.empty_like(x0)
A:scipy.optimize.tests.test__numdiff.(h_adjusted, one_sided)->_adjust_scheme_to_bounds(x0, h, 2, '2-sided', lb, ub)
A:scipy.optimize.tests.test__numdiff.ub->numpy.array([2.0, 2.0])
A:scipy.optimize.tests.test__numdiff.(h_adjusted, _)->_adjust_scheme_to_bounds(x0, h, 2, '1-sided', lb, ub)
A:scipy.optimize.tests.test__numdiff.lb->numpy.array([1.0, 1.0])
A:scipy.optimize.tests.test__numdiff.xp->numpy.asarray(x).item()
A:scipy.optimize.tests.test__numdiff.jac_diff_2->approx_derivative(self.fun_vector_vector, x0, method='2-point', as_linear_operator=True)
A:scipy.optimize.tests.test__numdiff.jac_diff_3->approx_derivative(self.fun_vector_vector, x0, as_linear_operator=True)
A:scipy.optimize.tests.test__numdiff.jac_diff_4->approx_derivative(self.fun_vector_vector, x0, method='cs', as_linear_operator=True)
A:scipy.optimize.tests.test__numdiff.jac_true->self.jac_vector_vector(x0)
A:scipy.optimize.tests.test__numdiff.f0->numpy.array(1.0)
A:scipy.optimize.tests.test__numdiff.rel_step->numpy.array([0.1, 1, 10, 100])
A:scipy.optimize.tests.test__numdiff.jac_diff->approx_derivative(self.fun_vector_vector, x0, rel_step=1e-06, bounds=(lb, ub))
A:scipy.optimize.tests.test__numdiff.x->numpy.linspace(0, 1, 100, dtype=np.float64)
A:scipy.optimize.tests.test__numdiff.y->numpy.random.random(100).astype(np.float64)
A:scipy.optimize.tests.test__numdiff.p0->numpy.array([-1.0, -1.0])
A:scipy.optimize.tests.test__numdiff.jac_fp64->approx_derivative(err, p0, method='2-point', args=(x, y))
A:scipy.optimize.tests.test__numdiff.jac_fp->approx_derivative(err_fp32, p0, method='2-point')
A:scipy.optimize.tests.test__numdiff.atol->calc_atol(h, x0, f, hess, EPS)
A:scipy.optimize.tests.test__numdiff.accuracy->check_derivative(self.fun, jac, self.x0, bounds=(self.lb, self.ub))
A:scipy.optimize.tests.test__numdiff.self.x0->numpy.empty(self.n)
A:scipy.optimize.tests.test__numdiff.self.J_true->self.jac(self.x0)
A:scipy.optimize.tests.test__numdiff.J->approx_derivative(self.fun, self.x0, sparsity=A)
A:scipy.optimize.tests.test__numdiff.structure->numpy.ones((self.n, self.n), dtype=int)
A:scipy.optimize.tests.test__numdiff.J_dense->approx_derivative(self.fun, self.x0, method=method)
A:scipy.optimize.tests.test__numdiff.J_sparse->approx_derivative(self.fun, self.x0, sparsity=(structure, groups), method=method)
A:scipy.optimize.tests.test__numdiff.p->numpy.random.uniform(-10, 10, size=x0.shape)
A:scipy.optimize.tests.test__numdiff.grad->approx_derivative(f, [-1, -1], method='2-point', abs_step=-1e-08, bounds=(-1, np.inf))
A:scipy.optimize.tests.test__numdiff.correct_step->numpy.array([rel_step[0] * x0[0], relative_step['2-point'], rel_step[2] * 1.0, rel_step[3] * np.abs(x0[3])])
A:scipy.optimize.tests.test__numdiff.abs_step->_compute_absolute_step(rel_step, -x0, f0, '2-point')
scipy.optimize.tests.test__numdiff.TestAdjustSchemeToBounds
scipy.optimize.tests.test__numdiff.TestAdjustSchemeToBounds.test_no_bounds(self)
scipy.optimize.tests.test__numdiff.TestAdjustSchemeToBounds.test_tight_bounds(self)
scipy.optimize.tests.test__numdiff.TestAdjustSchemeToBounds.test_with_bound(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativeLinearOperator
scipy.optimize.tests.test__numdiff.TestApproxDerivativeLinearOperator.fun_scalar_scalar(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativeLinearOperator.fun_scalar_vector(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativeLinearOperator.fun_vector_scalar(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativeLinearOperator.fun_vector_vector(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativeLinearOperator.jac_scalar_scalar(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativeLinearOperator.jac_scalar_vector(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativeLinearOperator.jac_vector_scalar(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativeLinearOperator.jac_vector_vector(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativeLinearOperator.test_exception(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativeLinearOperator.test_scalar_scalar(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativeLinearOperator.test_scalar_vector(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativeLinearOperator.test_vector_scalar(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativeLinearOperator.test_vector_vector(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativeSparse
scipy.optimize.tests.test__numdiff.TestApproxDerivativeSparse.fun(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativeSparse.jac(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativeSparse.setup_method(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativeSparse.structure(self,n)
scipy.optimize.tests.test__numdiff.TestApproxDerivativeSparse.test_all(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativeSparse.test_check_derivative(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativeSparse.test_equivalence(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativeSparse.test_no_precomputed_groups(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.fun_non_numpy(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.fun_parametrized(self,x,c0,c1=1.0)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.fun_scalar_scalar(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.fun_scalar_vector(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.fun_vector_scalar(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.fun_vector_vector(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.fun_with_nan(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.fun_zero_jacobian(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.jac_non_numpy(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.jac_parametrized(self,x,c0,c1=0.1)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.jac_scalar_scalar(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.jac_scalar_vector(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.jac_vector_scalar(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.jac_vector_vector(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.jac_with_nan(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.jac_zero_jacobian(self,x)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.test_bound_switches(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.test_check_derivative(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.test_custom_rel_step(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.test_fp(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.test_non_numpy(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.test_options(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.test_scalar_scalar(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.test_scalar_scalar_abs_step(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.test_scalar_vector(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.test_tight_bounds(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.test_vector_scalar(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.test_vector_scalar_abs_step(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.test_vector_vector(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.test_with_bounds_2_point(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.test_with_bounds_3_point(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.test_wrong_dimensions(self)
scipy.optimize.tests.test__numdiff.TestApproxDerivativesDense.wrong_dimensions_fun(self,x)
scipy.optimize.tests.test__numdiff.test__compute_absolute_step()
scipy.optimize.tests.test__numdiff.test_absolute_step_sign()
scipy.optimize.tests.test__numdiff.test_correct_fp_eps()
scipy.optimize.tests.test__numdiff.test_group_columns()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_regression.py----------------------------------------
A:scipy.optimize.tests.test_regression.res->scipy.optimize.newton(lambda x: x - 1, 0)
A:scipy.optimize.tests.test_regression.root->scipy.optimize.newton(lambda x: x ** 2 - 1, x0=2, fprime=lambda x: 2 * x)
scipy.optimize.tests.test_regression.TestRegression
scipy.optimize.tests.test_regression.TestRegression.test_lmdif_errmsg(self)
scipy.optimize.tests.test_regression.TestRegression.test_newton_integers(self)
scipy.optimize.tests.test_regression.TestRegression.test_newton_x0_is_0(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test__root.py----------------------------------------
A:scipy.optimize.tests.test__root.sol1->root(func, [1.1, 1.1], jac=jac, tol=0.0001, method=method)
A:scipy.optimize.tests.test__root.sol2->root(func, [1.1, 1.1], jac=jac, tol=0.5, method=method)
A:scipy.optimize.tests.test__root.F->fun()
scipy.optimize.tests.test_TestRoot
scipy.optimize.tests.test_TestRoot.test_f_size(self)
scipy.optimize.tests.test_TestRoot.test_minimize_scalar_coerce_args_param(self)
scipy.optimize.tests.test_TestRoot.test_tol_norm(self)
scipy.optimize.tests.test_TestRoot.test_tol_parameter(self)
scipy.optimize.tests.test__root.TestRoot
scipy.optimize.tests.test__root.TestRoot.test_f_size(self)
scipy.optimize.tests.test__root.TestRoot.test_minimize_scalar_coerce_args_param(self)
scipy.optimize.tests.test__root.TestRoot.test_tol_norm(self)
scipy.optimize.tests.test__root.TestRoot.test_tol_parameter(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test__linprog_clean_inputs.py----------------------------------------
A:scipy.optimize.tests.test__linprog_clean_inputs.lp->_LPProblem(c=[1, 2, 3, 4])
A:scipy.optimize.tests.test__linprog_clean_inputs.lp_copy->deepcopy(lp)
A:scipy.optimize.tests.test__linprog_clean_inputs.A_ub->numpy.array([[1, 1], [2, 2]])
A:scipy.optimize.tests.test__linprog_clean_inputs.b_ub->numpy.array([1, 1])
A:scipy.optimize.tests.test__linprog_clean_inputs.A_eq->numpy.array([[1, 1], [2, 2]])
A:scipy.optimize.tests.test__linprog_clean_inputs.b_eq->numpy.array([1, 1])
A:scipy.optimize.tests.test__linprog_clean_inputs.A->numpy.random.rand(4, 4)
A:scipy.optimize.tests.test__linprog_clean_inputs.bad3D->numpy.random.rand(4, 4, 4)
A:scipy.optimize.tests.test__linprog_clean_inputs.bad->numpy.random.rand(4, 4).ravel()
A:scipy.optimize.tests.test__linprog_clean_inputs.cb->numpy.random.rand(4)
A:scipy.optimize.tests.test__linprog_clean_inputs.Agood->numpy.random.rand(m, n)
A:scipy.optimize.tests.test__linprog_clean_inputs.Abad->numpy.random.rand(m, n + 1)
A:scipy.optimize.tests.test__linprog_clean_inputs.bgood->numpy.random.rand(m)
A:scipy.optimize.tests.test__linprog_clean_inputs.bbad->numpy.random.rand(m + 1)
A:scipy.optimize.tests.test__linprog_clean_inputs.lp_cleaned->_clean_inputs(lp._replace(bounds=[(None, None), (-np.inf, None), (None, np.inf), (-np.inf, np.inf)]))
scipy.optimize.tests.test__linprog_clean_inputs.test__clean_inputs1()
scipy.optimize.tests.test__linprog_clean_inputs.test__clean_inputs2()
scipy.optimize.tests.test__linprog_clean_inputs.test__clean_inputs3()
scipy.optimize.tests.test__linprog_clean_inputs.test_aliasing()
scipy.optimize.tests.test__linprog_clean_inputs.test_aliasing2()
scipy.optimize.tests.test__linprog_clean_inputs.test_bad_bounds()
scipy.optimize.tests.test__linprog_clean_inputs.test_good_bounds()
scipy.optimize.tests.test__linprog_clean_inputs.test_inconsistent_dimensions()
scipy.optimize.tests.test__linprog_clean_inputs.test_missing_inputs()
scipy.optimize.tests.test__linprog_clean_inputs.test_non_finite_errors()
scipy.optimize.tests.test__linprog_clean_inputs.test_too_few_dimensions()
scipy.optimize.tests.test__linprog_clean_inputs.test_too_many_dimensions()
scipy.optimize.tests.test__linprog_clean_inputs.test_type_errors()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_constraint_conversion.py----------------------------------------
A:scipy.optimize.tests.test_constraint_conversion.res->minimize(fun, x0, method=self.method, bounds=bnds, constraints=cons)
A:scipy.optimize.tests.test_constraint_conversion.result->minimize(prob.fun, prob.x0, method=self.method, bounds=prob.bounds, constraints=prob.constr)
A:scipy.optimize.tests.test_constraint_conversion.elec->Elec(n_electrons=2)
A:scipy.optimize.tests.test_constraint_conversion.elec.x_opt->numpy.array([-0.58438468, 0.58438466, 0.73597047, -0.73597044, 0.34180668, -0.34180667])
A:scipy.optimize.tests.test_constraint_conversion.brock->BoundedRosenbrock()
A:scipy.optimize.tests.test_constraint_conversion.cons->LinearConstraint([1, 0, 0], 2, np.inf)
A:scipy.optimize.tests.test_constraint_conversion.truth->minimize(prob.fun, prob.x0, method='trust-constr', bounds=prob.bounds, constraints=prob.constr)
scipy.optimize.tests.test_constraint_conversion.TestNewToOld
scipy.optimize.tests.test_constraint_conversion.TestNewToOld.test_individual_constraint_objects(self)
scipy.optimize.tests.test_constraint_conversion.TestNewToOld.test_multiple_constraint_objects(self)
scipy.optimize.tests.test_constraint_conversion.TestNewToOldCobyla
scipy.optimize.tests.test_constraint_conversion.TestNewToOldCobyla.test_list_of_problems(self)
scipy.optimize.tests.test_constraint_conversion.TestNewToOldSLSQP
scipy.optimize.tests.test_constraint_conversion.TestNewToOldSLSQP.test_list_of_problems(self)
scipy.optimize.tests.test_constraint_conversion.TestNewToOldSLSQP.test_warn_ignored_options(self)
scipy.optimize.tests.test_constraint_conversion.TestNewToOldSLSQP.test_warn_mixed_constraints(self)
scipy.optimize.tests.test_constraint_conversion.TestOldToNew
scipy.optimize.tests.test_constraint_conversion.TestOldToNew.test_constraint_dictionary_1(self)
scipy.optimize.tests.test_constraint_conversion.TestOldToNew.test_constraint_dictionary_2(self)
scipy.optimize.tests.test_constraint_conversion.TestOldToNew.test_constraint_dictionary_3(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_slsqp.py----------------------------------------
A:scipy.optimize.tests.test_slsqp.res->minimize(f, x0, method='SLSQP', bounds=bounds)
A:scipy.optimize.tests.test_slsqp.x0->numpy.array(bounds.lb + (bounds.ub - bounds.lb) * np.random.random(n_inputs))
A:scipy.optimize.tests.test_slsqp.bnd->Bounds([0.0, 0.0], [1.0, 1.0])
A:scipy.optimize.tests.test_slsqp.x->fmin_slsqp(lambda z: np.sum(z ** 2 - 1), [2.5, 2.5], bounds=bounds, iprint=0)
A:scipy.optimize.tests.test_slsqp.callback->MyCallBack()
A:scipy.optimize.tests.test_slsqp.sol->minimize(f, [0, 0], method='slsqp', bounds=bounds)
A:scipy.optimize.tests.test_slsqp.bounds->Bounds(np.array([0.1]), np.array([1.0]))
A:scipy.optimize.tests.test_slsqp.inner_res->minimize(self.F_inner, (3, 4), method='SLSQP')
A:scipy.optimize.tests.test_slsqp.outer_res->minimize(self.F_outer, (5, 5, 5), method='SLSQP')
A:scipy.optimize.tests.test_slsqp.problem->NestedProblem()
A:scipy.optimize.tests.test_slsqp.n_inputs->len(bounds.lb)
scipy.optimize.tests.test_slsqp.MyCallBack(self)
scipy.optimize.tests.test_slsqp.MyCallBack.__init__(self)
scipy.optimize.tests.test_slsqp.TestSLSQP
scipy.optimize.tests.test_slsqp.TestSLSQP.f_eqcon(self,x,sign=1.0)
scipy.optimize.tests.test_slsqp.TestSLSQP.f_eqcon_scalar(self,x,sign=1.0)
scipy.optimize.tests.test_slsqp.TestSLSQP.f_ieqcon(self,x,sign=1.0)
scipy.optimize.tests.test_slsqp.TestSLSQP.f_ieqcon2(self,x)
scipy.optimize.tests.test_slsqp.TestSLSQP.fprime_eqcon(self,x,sign=1.0)
scipy.optimize.tests.test_slsqp.TestSLSQP.fprime_eqcon_scalar(self,x,sign=1.0)
scipy.optimize.tests.test_slsqp.TestSLSQP.fprime_ieqcon(self,x,sign=1.0)
scipy.optimize.tests.test_slsqp.TestSLSQP.fprime_ieqcon2(self,x)
scipy.optimize.tests.test_slsqp.TestSLSQP.fun(self,d,sign=1.0)
scipy.optimize.tests.test_slsqp.TestSLSQP.fun_and_jac(self,d,sign=1.0)
scipy.optimize.tests.test_slsqp.TestSLSQP.jac(self,d,sign=1.0)
scipy.optimize.tests.test_slsqp.TestSLSQP.setup_method(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_array_bounds(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_bound_equality_given2(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_bounds_clipping(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_callback(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_equality_approximated(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_equality_given(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_equality_given2(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_gh1758(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_gh9640(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_gh_6676(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_inconsistent_inequalities(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_inconsistent_linearization(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_inequality_given(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_infeasible_initial(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_integer_bounds(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_invalid_bounds(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_bound_equality_given2(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_bounded_approximated(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_bounded_constraint(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_equality_approximated(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_equality_given(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_equality_given2(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_equality_given_cons_scalar(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_inequality_given(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_inequality_given_vector_constraints(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_unbounded_approximated(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_unbounded_combined(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_unbounded_given(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_nested_minimization(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_new_bounds_type(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_obj_must_return_scalar(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_obj_returns_scalar_in_list(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_parameters_stay_within_bounds(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_regression_5743(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_scalar_constraints(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_unbounded_approximated(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_unbounded_given(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_minpack.py----------------------------------------
A:scipy.optimize.tests.test_minpack.F->numpy.hstack((P[1:] - P[0], flow_rates.sum() - Qtot))
A:scipy.optimize.tests.test_minpack.n->fixed_point(func, n0, method='iteration')
A:scipy.optimize.tests.test_minpack.pdiff->numpy.diag(flow_rates[1:] * 2 * k[1:] - 2 * flow_rates[0] * k[0])
A:scipy.optimize.tests.test_minpack.jac->numpy.empty((n, n))
A:scipy.optimize.tests.test_minpack.jac[n - 1, :]->numpy.ones(n)
A:scipy.optimize.tests.test_minpack.k->numpy.full(4, 0.5)
A:scipy.optimize.tests.test_minpack.initial_guess->array([2.0, 0.0, 2.0, 0.0])
A:scipy.optimize.tests.test_minpack.(final_flows, info, ier, mesg)->scipy.optimize.fsolve(func, initial_guess, args=(Qtot, k), full_output=True)
A:scipy.optimize.tests.test_minpack.final_flows->scipy.optimize.fsolve(pressure_network, initial_guess, args=(Qtot, k), fprime=deriv_func)
A:scipy.optimize.tests.test_minpack.func->ReturnShape(1)
A:scipy.optimize.tests.test_minpack.deriv_func->ReturnShape((2, 2))
A:scipy.optimize.tests.test_minpack.p->scipy.optimize.fsolve(func, np.array([1, 1], np.float32))
A:scipy.optimize.tests.test_minpack.v->sequence_parallel([self.test_basic_with_gradient] * 10)
A:scipy.optimize.tests.test_minpack.x->fixed_point(func, x0, args=(c,))
A:scipy.optimize.tests.test_minpack.p0->array([0, 0, 0])
A:scipy.optimize.tests.test_minpack.(params_fit, ier)->leastsq(self.residuals, p0, args=(self.y_meas, self.x), Dfun=deriv_func)
A:scipy.optimize.tests.test_minpack.full_output->leastsq(self.residuals, p0, args=(self.y_meas, self.x), full_output=True)
A:scipy.optimize.tests.test_minpack.p0_copy->array(p0, copy=True)
A:scipy.optimize.tests.test_minpack.y->func(xdata, 2.5, 1.3, 0.5)
A:scipy.optimize.tests.test_minpack.(p1, success)->scipy.optimize.leastsq(func, p0, args=(x, y))
A:scipy.optimize.tests.test_minpack.self.y->array([1.0, 3.2, 9.5, 13.7])
A:scipy.optimize.tests.test_minpack.self.x->array([1.0, 2.0, 3.0, 4.0])
A:scipy.optimize.tests.test_minpack.(popt, pcov)->curve_fit(f, xdata, ydata, sigma=sigma, method=method, jac=jac)
A:scipy.optimize.tests.test_minpack.res->curve_fit(func, self.x, self.y, full_output=1, check_finite=False)
A:scipy.optimize.tests.test_minpack.test_self_inst->test_self()
A:scipy.optimize.tests.test_minpack.xdata->numpy.linspace(0, 4, 50)
A:scipy.optimize.tests.test_minpack.ydata->hyperbola(xdata, *params)
A:scipy.optimize.tests.test_minpack.sigma->numpy.ones(xdata.shape[0])
A:scipy.optimize.tests.test_minpack.perr_scaled->numpy.sqrt(np.diag(pcov))
A:scipy.optimize.tests.test_minpack.perr->numpy.sqrt(np.diag(pcov))
A:scipy.optimize.tests.test_minpack.pcov_expected->numpy.array([np.inf] * 4).reshape(2, 2)
A:scipy.optimize.tests.test_minpack.(popt1, pcov1)->curve_fit(fit_func, xdata=xdata, ydata=0, method=method)
A:scipy.optimize.tests.test_minpack.(popt, pcov, infodict, errmsg, ier)->curve_fit(f, xdata, ydata, method=method, full_output=True)
A:scipy.optimize.tests.test_minpack.bounds_class->Bounds(lb, ub)
A:scipy.optimize.tests.test_minpack.(popt_class, pcov_class)->curve_fit(f, xdata, ydata, bounds=bounds_class, method=method)
A:scipy.optimize.tests.test_minpack.(popt_1, _)->curve_fit(f, xdata, ydata, p0=2.1 * np.pi)
A:scipy.optimize.tests.test_minpack.(popt_2, _)->curve_fit(f, xdata, ydata, p0=2.1 * np.pi, bounds=bounds, method=method)
A:scipy.optimize.tests.test_minpack.e->numpy.exp(-b * x)
A:scipy.optimize.tests.test_minpack.(popt1, _)->curve_fit(lambda x, p: p * x, x, y, bounds=(0, 3), maxfev=100)
A:scipy.optimize.tests.test_minpack.(popt2, _)->curve_fit(lambda x, p: p * x, x, y, bounds=(0, 3), max_nfev=100)
A:scipy.optimize.tests.test_minpack.covar->numpy.diag(sigma ** 2)
A:scipy.optimize.tests.test_minpack.(popt2, pcov2)->curve_fit(funcp, xdata, ydatap, sigma=covarp, jac=jac2, absolute_sigma=absolute_sigma)
A:scipy.optimize.tests.test_minpack.rotn->numpy.array([[1.0 / np.sqrt(2), -1.0 / np.sqrt(2), 0], [1.0 / np.sqrt(2), 1.0 / np.sqrt(2), 0], [0, 0, 1.0]])
A:scipy.optimize.tests.test_minpack.ydatap->numpy.array([[1.0 / np.sqrt(2), -1.0 / np.sqrt(2), 0], [1.0 / np.sqrt(2), 1.0 / np.sqrt(2), 0], [0, 0, 1.0]]).dot(ydata)
A:scipy.optimize.tests.test_minpack.covarp->numpy.array([[1.0 / np.sqrt(2), -1.0 / np.sqrt(2), 0], [1.0 / np.sqrt(2), 1.0 / np.sqrt(2), 0], [0, 0, 1.0]]).dot(covar).dot(rotn.T)
A:scipy.optimize.tests.test_minpack.(p, cov)->scipy.optimize.curve_fit(f, x, y, maxfev=100000)
A:scipy.optimize.tests.test_minpack.min_fit->numpy.array([-3.0, 0.0, -2.0, -10.0, 0.0])
A:scipy.optimize.tests.test_minpack.max_fit->numpy.array([0.0, 3.0, 3.0, 0.0, 10.0])
A:scipy.optimize.tests.test_minpack.guess->numpy.array([-2.5 / 3.0, 4 / 3.0, 1.0, -4.0, 0.5])
A:scipy.optimize.tests.test_minpack.(popt_64, _)->curve_fit(f=hyperbola, xdata=xdata, ydata=ydata, p0=guess, bounds=(min_fit, max_fit))
A:scipy.optimize.tests.test_minpack.(popt_32, _)->curve_fit(f=hyperbola, xdata=xdata, ydata=ydata, p0=guess, bounds=(min_fit, max_fit))
A:scipy.optimize.tests.test_minpack.(popt0, pcov0)->curve_fit(fit_func, xdata=xdata, ydata=np.zeros_like(xdata), method=method)
A:scipy.optimize.tests.test_minpack.rng->numpy.random.default_rng(408113519974467917)
A:scipy.optimize.tests.test_minpack.(_, res)->curve_fit(func, xdata, ydata)
A:scipy.optimize.tests.test_minpack.c->array([0.75, 1.0, 1.25])
A:scipy.optimize.tests.test_minpack.xxroot->fixed_point(lambda xx: np.exp(-2.0 * xx) / 2.0, 1.0, args=(), xtol=1e-12, maxiter=500)
scipy.optimize.tests.test_minpack.ReturnShape(self,shape)
scipy.optimize.tests.test_minpack.ReturnShape.__init__(self,shape)
scipy.optimize.tests.test_minpack.TestCurveFit
scipy.optimize.tests.test_minpack.TestCurveFit.setup_method(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_NaN_handling(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_None_x(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_args_in_kwargs(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_array_like(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_bounds(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_bounds_p0(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_broadcast_y(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_curvefit_covariance(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_curvefit_simplecovariance(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_data_point_number_validation(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_dtypes(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_dtypes2(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_empty_inputs(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_full_output(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_func_is_classmethod(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_function_zero_params(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_gh4555(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_gh4555b(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_indeterminate_covariance(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_jac(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_maxfev_and_bounds(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_method_argument(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_one_argument(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_pcov(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_regression_2639(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_two_argument(self)
scipy.optimize.tests.test_minpack.TestFSolve
scipy.optimize.tests.test_minpack.TestFSolve.test_Dfun_can_raise(self)
scipy.optimize.tests.test_minpack.TestFSolve.test_concurrent_no_gradient(self)
scipy.optimize.tests.test_minpack.TestFSolve.test_concurrent_with_gradient(self)
scipy.optimize.tests.test_minpack.TestFSolve.test_float32(self)
scipy.optimize.tests.test_minpack.TestFSolve.test_func_can_raise(self)
scipy.optimize.tests.test_minpack.TestFSolve.test_pressure_network_no_gradient(self)
scipy.optimize.tests.test_minpack.TestFSolve.test_pressure_network_with_gradient(self)
scipy.optimize.tests.test_minpack.TestFSolve.test_reentrant_Dfunc(self)
scipy.optimize.tests.test_minpack.TestFSolve.test_reentrant_func(self)
scipy.optimize.tests.test_minpack.TestFSolve.test_wrong_shape_fprime_callable(self)
scipy.optimize.tests.test_minpack.TestFSolve.test_wrong_shape_fprime_function(self)
scipy.optimize.tests.test_minpack.TestFSolve.test_wrong_shape_func_callable(self)
scipy.optimize.tests.test_minpack.TestFSolve.test_wrong_shape_func_function(self)
scipy.optimize.tests.test_minpack.TestFixedPoint
scipy.optimize.tests.test_minpack.TestFixedPoint.test_array_basic1(self)
scipy.optimize.tests.test_minpack.TestFixedPoint.test_array_basic2(self)
scipy.optimize.tests.test_minpack.TestFixedPoint.test_array_trivial(self)
scipy.optimize.tests.test_minpack.TestFixedPoint.test_lambertw(self)
scipy.optimize.tests.test_minpack.TestFixedPoint.test_no_acceleration(self)
scipy.optimize.tests.test_minpack.TestFixedPoint.test_scalar_basic1(self)
scipy.optimize.tests.test_minpack.TestFixedPoint.test_scalar_basic2(self)
scipy.optimize.tests.test_minpack.TestFixedPoint.test_scalar_trivial(self)
scipy.optimize.tests.test_minpack.TestLeastSq
scipy.optimize.tests.test_minpack.TestLeastSq.residuals(self,p,y,x)
scipy.optimize.tests.test_minpack.TestLeastSq.residuals_jacobian(self,_p,_y,x)
scipy.optimize.tests.test_minpack.TestLeastSq.setup_method(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_Dfun_can_raise(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_basic(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_basic_with_gradient(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_concurrent_no_gradient(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_concurrent_with_gradient(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_float32(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_full_output(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_func_can_raise(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_func_input_output_length_check(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_input_untouched(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_reentrant_Dfun(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_reentrant_func(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_wrong_shape_Dfun_callable(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_wrong_shape_Dfun_function(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_wrong_shape_func_callable(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_wrong_shape_func_function(self)
scipy.optimize.tests.test_minpack.TestRootHybr
scipy.optimize.tests.test_minpack.TestRootHybr.test_pressure_network_no_gradient(self)
scipy.optimize.tests.test_minpack.TestRootHybr.test_pressure_network_with_gradient(self)
scipy.optimize.tests.test_minpack.TestRootHybr.test_pressure_network_with_gradient_combined(self)
scipy.optimize.tests.test_minpack.TestRootLM
scipy.optimize.tests.test_minpack.TestRootLM.test_pressure_network_no_gradient(self)
scipy.optimize.tests.test_minpack.dummy_func(x,shape)
scipy.optimize.tests.test_minpack.pressure_network(flow_rates,Qtot,k)
scipy.optimize.tests.test_minpack.pressure_network_fun_and_grad(flow_rates,Qtot,k)
scipy.optimize.tests.test_minpack.pressure_network_jacobian(flow_rates,Qtot,k)
scipy.optimize.tests.test_minpack.sequence_parallel(fs)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_linear_assignment.py----------------------------------------
A:scipy.optimize.tests.test_linear_assignment.I->numpy.identity(3)
A:scipy.optimize.tests.test_linear_assignment.C->numpy.empty(shape=(num_cols, num_rows))
A:scipy.optimize.tests.test_linear_assignment.(row_ind, col_ind)->min_weight_full_bipartite_matching(sparse)
A:scipy.optimize.tests.test_linear_assignment.sparse->sparse.tocsr().tocsr()
A:scipy.optimize.tests.test_linear_assignment.dense->numpy.full(sparse.shape, np.inf)
A:scipy.optimize.tests.test_linear_assignment.lsa_cost->dense[row_ind, col_ind].sum()
A:scipy.optimize.tests.test_linear_assignment.mwfbm_cost->sparse[row_ind, col_ind].sum()
scipy.optimize.tests.test_linear_assignment.test_constant_cost_matrix()
scipy.optimize.tests.test_linear_assignment.test_linear_sum_assignment_input_bool()
scipy.optimize.tests.test_linear_assignment.test_linear_sum_assignment_input_inf()
scipy.optimize.tests.test_linear_assignment.test_linear_sum_assignment_input_nan()
scipy.optimize.tests.test_linear_assignment.test_linear_sum_assignment_input_neginf()
scipy.optimize.tests.test_linear_assignment.test_linear_sum_assignment_input_object()
scipy.optimize.tests.test_linear_assignment.test_linear_sum_assignment_input_shape()
scipy.optimize.tests.test_linear_assignment.test_linear_sum_assignment_input_string()
scipy.optimize.tests.test_linear_assignment.test_linear_sum_assignment_small_inputs(sign,test_case)
scipy.optimize.tests.test_linear_assignment.test_linear_sum_assignment_trivial_cost(num_rows,num_cols)
scipy.optimize.tests.test_linear_assignment.test_two_methods_give_same_result_on_many_sparse_inputs()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_lbfgsb_setulb.py----------------------------------------
A:scipy.optimize.tests.test_lbfgsb_setulb.g0->numpy.array([-0.5934820547965749, 1.6251549718258351, -71.99168459202559, 5.346636965797545, 37.10732723092604])
A:scipy.optimize.tests.test_lbfgsb_setulb.g1->numpy.array([-0.43295349282641515, 1.008607936794592, 18.223666726602975, 31.927010036981997, -19.667512518739386])
A:scipy.optimize.tests.test_lbfgsb_setulb.g2->numpy.array([-0.4699874455100256, 0.9466285353668347, -0.016874360242016825, 48.44999161133457, 5.819631620590712])
A:scipy.optimize.tests.test_lbfgsb_setulb.g3->numpy.array([-0.46970678696829116, 0.9612719312174818, 0.006129809488833699, 48.43557729419473, 6.005481418498221])
A:scipy.optimize.tests.test_lbfgsb_setulb.nbd->numpy.full((n,), 2)
A:scipy.optimize.tests.test_lbfgsb_setulb.low_bnd->numpy.zeros(n, np.float64)
A:scipy.optimize.tests.test_lbfgsb_setulb.upper_bnd->numpy.ones(n, np.float64)
A:scipy.optimize.tests.test_lbfgsb_setulb.x0->numpy.array([0.8750000000000278, 0.7500000000000153, 0.9499999999999722, 0.8214285714285992, 0.6363636363636085])
A:scipy.optimize.tests.test_lbfgsb_setulb.x->numpy.copy(x0)
A:scipy.optimize.tests.test_lbfgsb_setulb.f->numpy.array(0.0, np.float64)
A:scipy.optimize.tests.test_lbfgsb_setulb.g->numpy.zeros(n, np.float64)
A:scipy.optimize.tests.test_lbfgsb_setulb.wa->numpy.zeros(2 * m * n + 5 * n + 11 * m * m + 8 * m, np.float64)
A:scipy.optimize.tests.test_lbfgsb_setulb.iwa->numpy.zeros(3 * n, fortran_int)
A:scipy.optimize.tests.test_lbfgsb_setulb.task->numpy.zeros(1, 'S60')
A:scipy.optimize.tests.test_lbfgsb_setulb.csave->numpy.zeros(1, 'S60')
A:scipy.optimize.tests.test_lbfgsb_setulb.lsave->numpy.zeros(4, fortran_int)
A:scipy.optimize.tests.test_lbfgsb_setulb.isave->numpy.zeros(44, fortran_int)
A:scipy.optimize.tests.test_lbfgsb_setulb.dsave->numpy.zeros(29, np.float64)
A:scipy.optimize.tests.test_lbfgsb_setulb.(f, g)->objfun(x)
scipy.optimize.tests.test_lbfgsb_setulb.objfun(x)
scipy.optimize.tests.test_lbfgsb_setulb.test_setulb_floatround()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test__basinhopping.py----------------------------------------
A:scipy.optimize.tests.test__basinhopping.df->numpy.zeros(2)
A:scipy.optimize.tests.test__basinhopping.res->basinhopping(func1d, self.x0[i], minimizer_kwargs=self.kwargs, niter=self.niter, disp=self.disp, T=0)
A:scipy.optimize.tests.test__basinhopping.minimizer_kwargs->copy.copy(self.kwargs_nograd)
A:scipy.optimize.tests.test__basinhopping.(_, jacobian)->func2d_easyderiv(res.x)
A:scipy.optimize.tests.test__basinhopping.takestep->MyTakeStep1()
A:scipy.optimize.tests.test__basinhopping.accept_test->MyAcceptTest()
A:scipy.optimize.tests.test__basinhopping.callback->MyCallBack()
A:scipy.optimize.tests.test__basinhopping.self.kwargs['options']->dict(maxiter=0)
A:scipy.optimize.tests.test__basinhopping.rng->numpy.random.default_rng(1)
A:scipy.optimize.tests.test__basinhopping.res1->basinhopping(func2d, [1.0, 1.0], minimizer_kwargs=minimizer_kwargs, niter=10, seed=rng)
A:scipy.optimize.tests.test__basinhopping.res2->basinhopping(func2d, [1.0, 1.0], minimizer_kwargs=minimizer_kwargs, niter=10, seed=rng)
A:scipy.optimize.tests.test__basinhopping.self.x0->numpy.zeros([self.N])
A:scipy.optimize.tests.test__basinhopping.minres->self.storage.get_lowest()
A:scipy.optimize.tests.test__basinhopping.self.storage->Storage(minres)
A:scipy.optimize.tests.test__basinhopping.new_minres->OptimizeResult()
A:scipy.optimize.tests.test__basinhopping.ret->self.met(f_new=1.0, f_old=0.5)
A:scipy.optimize.tests.test__basinhopping.self.displace->RandomDisplacement(stepsize=self.stepsize)
A:scipy.optimize.tests.test__basinhopping.x->self.displace(self.x0)
A:scipy.optimize.tests.test__basinhopping.self.met->Metropolis(self.T)
A:scipy.optimize.tests.test__basinhopping.met->Metropolis(2)
A:scipy.optimize.tests.test__basinhopping.self.ts->RandomDisplacement(stepsize=self.stepsize)
A:scipy.optimize.tests.test__basinhopping.self.takestep->AdaptiveStepsize(takestep=self.ts, verbose=False, accept_rate=self.target_accept_rate)
scipy.optimize.tests.test__basinhopping.MyAcceptTest(self)
scipy.optimize.tests.test__basinhopping.MyAcceptTest.__init__(self)
scipy.optimize.tests.test__basinhopping.MyCallBack(self)
scipy.optimize.tests.test__basinhopping.MyCallBack.__init__(self)
scipy.optimize.tests.test__basinhopping.MyTakeStep1(self)
scipy.optimize.tests.test__basinhopping.MyTakeStep1.__init__(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping
scipy.optimize.tests.test__basinhopping.TestBasinHopping.setup_method(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_1d_grad(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_2d(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_2d_nograd(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_TypeError(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_all_minimizers(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_all_nograd_minimizers(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_input_validation(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_jac(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_minimizer_fail(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_monotonic_basin_hopping(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_niter_zero(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_njev(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_pass_accept_test(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_pass_callback(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_pass_simple_takestep(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_pass_takestep(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_random_gen(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_seed_reproducibility(self)
scipy.optimize.tests.test__basinhopping.Test_AdaptiveStepsize
scipy.optimize.tests.test__basinhopping.Test_AdaptiveStepsize.setup_method(self)
scipy.optimize.tests.test__basinhopping.Test_AdaptiveStepsize.test_adaptive_decrease(self)
scipy.optimize.tests.test__basinhopping.Test_AdaptiveStepsize.test_adaptive_increase(self)
scipy.optimize.tests.test__basinhopping.Test_AdaptiveStepsize.test_all_accepted(self)
scipy.optimize.tests.test__basinhopping.Test_AdaptiveStepsize.test_all_rejected(self)
scipy.optimize.tests.test__basinhopping.Test_Metropolis
scipy.optimize.tests.test__basinhopping.Test_Metropolis.setup_method(self)
scipy.optimize.tests.test__basinhopping.Test_Metropolis.test_GH7495(self)
scipy.optimize.tests.test__basinhopping.Test_Metropolis.test_KeyError(self)
scipy.optimize.tests.test__basinhopping.Test_Metropolis.test_accept(self)
scipy.optimize.tests.test__basinhopping.Test_Metropolis.test_boolean_return(self)
scipy.optimize.tests.test__basinhopping.Test_Metropolis.test_lower_f_accepted(self)
scipy.optimize.tests.test__basinhopping.Test_RandomDisplacement
scipy.optimize.tests.test__basinhopping.Test_RandomDisplacement.setup_method(self)
scipy.optimize.tests.test__basinhopping.Test_RandomDisplacement.test_random(self)
scipy.optimize.tests.test__basinhopping.Test_Storage
scipy.optimize.tests.test__basinhopping.Test_Storage.setup_method(self)
scipy.optimize.tests.test__basinhopping.Test_Storage.test_higher_f_rejected(self)
scipy.optimize.tests.test__basinhopping.Test_Storage.test_lower_f_accepted(self)
scipy.optimize.tests.test__basinhopping.func1d(x)
scipy.optimize.tests.test__basinhopping.func2d(x)
scipy.optimize.tests.test__basinhopping.func2d_easyderiv(x)
scipy.optimize.tests.test__basinhopping.func2d_nograd(x)
scipy.optimize.tests.test__basinhopping.myTakeStep2(x)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_cython_optimize.py----------------------------------------
A:scipy.optimize.tests.test_cython_optimize.A0->tuple((-2.0 - x / 10.0 for x in range(10)))
A:scipy.optimize.tests.test_cython_optimize.output->scipy.optimize.cython_optimize._zeros.full_output_example((A0[0],) + ARGS, XLO, XHI, XTOL, RTOL, MITR)
scipy.optimize.tests.test_cython_optimize.test_bisect()
scipy.optimize.tests.test_cython_optimize.test_brenth()
scipy.optimize.tests.test_cython_optimize.test_brentq()
scipy.optimize.tests.test_cython_optimize.test_brentq_full_output()
scipy.optimize.tests.test_cython_optimize.test_ridder()
scipy.optimize.tests.test_cythontest_bisect()
scipy.optimize.tests.test_cythontest_brenth()
scipy.optimize.tests.test_cythontest_brentq()
scipy.optimize.tests.test_cythontest_brentq_full_output()
scipy.optimize.tests.test_cythontest_ridder()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_linprog.py----------------------------------------
A:scipy.optimize.tests.test_linprog.msg->'linprog status {0}, message: {1}'.format(res.status, res.message)
A:scipy.optimize.tests.test_linprog.numbers->numbers.reshape(n ** 2, n, n).reshape(n ** 2, n, n)
A:scipy.optimize.tests.test_linprog.zeros->numpy.zeros((n ** 2, n, n))
A:scipy.optimize.tests.test_linprog.A_row->numpy.zeros((n ** 2, n, n)).copy()
A:scipy.optimize.tests.test_linprog.A->numpy.vstack((Arow, Acol))
A:scipy.optimize.tests.test_linprog.b->numpy.hstack((brow, bcol))
A:scipy.optimize.tests.test_linprog.c->numpy.array([2, 10, 13, 17, 7, 5, 7, 3])
A:scipy.optimize.tests.test_linprog.Arow->numpy.zeros((m, m * n))
A:scipy.optimize.tests.test_linprog.brow->numpy.zeros(m)
A:scipy.optimize.tests.test_linprog.Acol->numpy.zeros((n, m * n))
A:scipy.optimize.tests.test_linprog.bcol->numpy.zeros(n)
A:scipy.optimize.tests.test_linprog.ub->numpy.random.rand(n)
A:scipy.optimize.tests.test_linprog.phi->numpy.random.normal(0, 1, size=(m, d))
A:scipy.optimize.tests.test_linprog.w_true->numpy.random.randn(m)
A:scipy.optimize.tests.test_linprog.x->numpy.random.normal(0, 1, size=(d, n))
A:scipy.optimize.tests.test_linprog.A_ub->numpy.array([[1, 1, 1]])
A:scipy.optimize.tests.test_linprog.b_ub->numpy.array([7])
A:scipy.optimize.tests.test_linprog.message->linprog(c, A_ub, b_ub, A_eq, b_eq, bounds, method=self.method, options=self.options, x0=bad_guess).pop('message')
A:scipy.optimize.tests.test_linprog.complete->linprog(c, A_ub, b_ub, A_eq, b_eq, bounds, method=self.method, options=self.options, x0=bad_guess).pop('complete')
A:scipy.optimize.tests.test_linprog.res->linprog(c, A_ub, b_ub, A_eq, b_eq, bounds, method=self.method, options=self.options, x0=bad_guess)
A:scipy.optimize.tests.test_linprog.(A, b, c, numbers, M)->magic_square(n)
A:scipy.optimize.tests.test_linprog.(status, message)->_highs_to_scipy_status_message(None, None)
A:scipy.optimize.tests.test_linprog.(A, b, c)->lpgen_2d(20, 20)
A:scipy.optimize.tests.test_linprog.b_ub_orig->numpy.array([3.0])
A:scipy.optimize.tests.test_linprog.A_eq->numpy.array([[22, 13, 26, 33, 21, 3, 14, 26], [39, 16, 22, 28, 26, 30, 23, 24], [18, 14, 29, 27, 30, 38, 26, 26], [41, 26, 28, 36, 18, 38, 16, 26]])
A:scipy.optimize.tests.test_linprog.b_eq_orig->numpy.array([3.0])
A:scipy.optimize.tests.test_linprog.b_eq->numpy.array([7872, 10466, 11322, 12058])
A:scipy.optimize.tests.test_linprog.x_valid->numpy.random.randn(n)
A:scipy.optimize.tests.test_linprog.bounds->numpy.array([(0, np.inf)] * len(c))
A:scipy.optimize.tests.test_linprog.do_presolve->self.options.get('presolve', True)
A:scipy.optimize.tests.test_linprog.(c, A_ub, b_ub, A_eq, b_eq, x_star, f_star)->nontrivial_problem()
A:scipy.optimize.tests.test_linprog.(A_ub, b_ub, c)->lpgen_2d(20, 20)
A:scipy.optimize.tests.test_linprog.(c, A_ub, b_ub, A_eq, b_eq, bounds)->very_random_gen(seed=42)
A:scipy.optimize.tests.test_linprog.desired_x->numpy.array([0.37, -0.97, 0.34, 0.4, 1.18, 0.5, 0.47, 0.09, 0.32, -0.73])
A:scipy.optimize.tests.test_linprog.(A_eq, b_eq, c, _, _)->magic_square(3)
A:scipy.optimize.tests.test_linprog.res1->linprog(c, A_ub=A, b_ub=b, method=self.method, options=options)
A:scipy.optimize.tests.test_linprog.res2->linprog(c, A_eq=A, b_eq=b, method=self.method, x0=res.x)
A:scipy.optimize.tests.test_linprog.dfdbub->approx_derivative(f_bub, b_ub, method='3-point', f0=res.fun)
A:scipy.optimize.tests.test_linprog.dfdbeq->approx_derivative(f_beq, b_eq, method='3-point', f0=res.fun)
A:scipy.optimize.tests.test_linprog.dfdlb->approx_derivative(f_lb, lb, method='3-point', f0=res.fun)
A:scipy.optimize.tests.test_linprog.dfdub->approx_derivative(f_ub, ub, method='3-point', f0=res.fun)
A:scipy.optimize.tests.test_linprog.is_linux->sys.platform.startswith('linux')
A:scipy.optimize.tests.test_linprog.x_star->numpy.array([-219 / 385, 582 / 385, 0, 4 / 10])
A:scipy.optimize.tests.test_linprog.(A, b, c, _, _)->magic_square(3)
A:scipy.optimize.tests.test_linprog.p->numpy.random.rand(*c.shape)
A:scipy.optimize.tests.test_linprog.res3->linprog(c + p, A_eq=A, b_eq=b, method=self.method, x0=res.x)
A:scipy.optimize.tests.test_linprog.(c, A_ub, b_ub, bnds)->l1_regression_prob()
A:scipy.optimize.tests.test_linprog.s->(numbers.flatten() * res.x).reshape(n ** 2, n, n)
A:scipy.optimize.tests.test_linprog.square->numpy.sum(s, axis=0)
A:scipy.optimize.tests.test_linprog.integrality->numpy.ones_like(c)
A:scipy.optimize.tests.test_linprog.gap_diffs->numpy.diff(np.flip(sol_mip_gaps))
scipy.optimize.tests.test_linprog.AutoscaleTests
scipy.optimize.tests.test_linprog.LinprogCommonTests
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_aliasing_b_eq(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_aliasing_b_ub(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_basic_artificial_vars(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bounded_above_only_1(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bounded_above_only_2(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bounded_below_only_1(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bounded_below_only_2(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bounds_equal_but_infeasible(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bounds_equal_but_infeasible2(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bounds_equal_no_presolve(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bounds_fixed(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bounds_infeasible(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bounds_infeasible_2(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bounds_infinity(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bounds_mixed(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bounds_simple(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bug_10124(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bug_10349(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bug_10466(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bug_5400(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bug_6139(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bug_6690(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bug_7044(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bug_7237(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bug_8174(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bug_8174_2(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bug_8561(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bug_8662(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bug_8663(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bug_8664(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bug_8973(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_bug_8973_2(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_callback(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_cyclic_bland(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_cyclic_recovery(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_disp(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_docstring_example(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_empty_constraint_1(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_empty_constraint_2(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_empty_constraint_3(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_enzo_example(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_enzo_example_b(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_enzo_example_c_with_degeneracy(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_enzo_example_c_with_infeasibility(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_enzo_example_c_with_unboundedness(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_inequality_constraints(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_inequality_constraints2(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_infeasible(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_infeasible_inequality_bounds(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_integrality_without_highs(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_invalid_inputs(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_lpgen_problem(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_maxiter(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_network_flow(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_network_flow_limited_capacity(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_non_ndarray_args(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_nontrivial_problem(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_optimize_result(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_remove_redundancy_infeasibility(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_simplex_algorithm_wikipedia_example(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_singleton_row_eq_1(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_singleton_row_eq_2(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_singleton_row_ub_1(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_singleton_row_ub_2(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_sparse_constraints(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_type_error(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_unbounded(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_unbounded_below_no_presolve_corrected(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_unbounded_no_nontrivial_constraints_1(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_unbounded_no_nontrivial_constraints_2(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_unknown_options(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_zero_column_1(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_zero_column_2(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_zero_row_1(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_zero_row_2(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_zero_row_3(self)
scipy.optimize.tests.test_linprog.LinprogCommonTests.test_zero_row_4(self)
scipy.optimize.tests.test_linprog.LinprogHiGHSTests(LinprogCommonTests)
scipy.optimize.tests.test_linprog.LinprogHiGHSTests.test_callback(self)
scipy.optimize.tests.test_linprog.LinprogHiGHSTests.test_complementary_slackness(self)
scipy.optimize.tests.test_linprog.LinprogHiGHSTests.test_crossover(self)
scipy.optimize.tests.test_linprog.LinprogHiGHSTests.test_dual_feasibility(self)
scipy.optimize.tests.test_linprog.LinprogHiGHSTests.test_invalid_option_values(self,options)
scipy.optimize.tests.test_linprog.LinprogHiGHSTests.test_marginals(self)
scipy.optimize.tests.test_linprog.LinprogIPTests(LinprogCommonTests)
scipy.optimize.tests.test_linprog.LinprogIPTests.test_bug_10466(self)
scipy.optimize.tests.test_linprog.LinprogRSTests(LinprogCommonTests)
scipy.optimize.tests.test_linprog.LinprogRSTests.test_bug_5400(self)
scipy.optimize.tests.test_linprog.LinprogRSTests.test_bug_8662(self)
scipy.optimize.tests.test_linprog.LinprogRSTests.test_network_flow(self)
scipy.optimize.tests.test_linprog.LinprogSimplexTests(LinprogCommonTests)
scipy.optimize.tests.test_linprog.RRTests
scipy.optimize.tests.test_linprog.TestAutoscaleIP(AutoscaleTests)
scipy.optimize.tests.test_linprog.TestAutoscaleIP.test_bug_6139(self)
scipy.optimize.tests.test_linprog.TestAutoscaleRS(AutoscaleTests)
scipy.optimize.tests.test_linprog.TestAutoscaleRS.test_nontrivial_problem_with_bad_guess(self)
scipy.optimize.tests.test_linprog.TestAutoscaleRS.test_nontrivial_problem_with_guess(self)
scipy.optimize.tests.test_linprog.TestAutoscaleSimplex(AutoscaleTests)
scipy.optimize.tests.test_linprog.TestLinprogHiGHSIPM(LinprogHiGHSTests)
scipy.optimize.tests.test_linprog.TestLinprogHiGHSMIP
scipy.optimize.tests.test_linprog.TestLinprogHiGHSMIP.test_mip1(self)
scipy.optimize.tests.test_linprog.TestLinprogHiGHSMIP.test_mip2(self)
scipy.optimize.tests.test_linprog.TestLinprogHiGHSMIP.test_mip3(self)
scipy.optimize.tests.test_linprog.TestLinprogHiGHSMIP.test_mip4(self)
scipy.optimize.tests.test_linprog.TestLinprogHiGHSMIP.test_mip5(self)
scipy.optimize.tests.test_linprog.TestLinprogHiGHSMIP.test_mip6(self)
scipy.optimize.tests.test_linprog.TestLinprogHiGHSMIP.test_mip_rel_gap_passdown(self)
scipy.optimize.tests.test_linprog.TestLinprogHiGHSSimplexDual(LinprogHiGHSTests)
scipy.optimize.tests.test_linprog.TestLinprogHiGHSSimplexDual.test_lad_regression(self)
scipy.optimize.tests.test_linprog.TestLinprogIPDense(LinprogIPTests)
scipy.optimize.tests.test_linprog.TestLinprogIPSparse(LinprogIPTests)
scipy.optimize.tests.test_linprog.TestLinprogIPSparse.test_bug_6139(self)
scipy.optimize.tests.test_linprog.TestLinprogIPSparse.test_bug_6690(self)
scipy.optimize.tests.test_linprog.TestLinprogIPSparse.test_magic_square_sparse_no_presolve(self)
scipy.optimize.tests.test_linprog.TestLinprogIPSparse.test_sparse_solve_options(self)
scipy.optimize.tests.test_linprog.TestLinprogIPSparsePresolve(LinprogIPTests)
scipy.optimize.tests.test_linprog.TestLinprogIPSparsePresolve.test_bug_6139(self)
scipy.optimize.tests.test_linprog.TestLinprogIPSparsePresolve.test_bug_6690(self)
scipy.optimize.tests.test_linprog.TestLinprogIPSparsePresolve.test_enzo_example_c_with_infeasibility(self)
scipy.optimize.tests.test_linprog.TestLinprogIPSpecific
scipy.optimize.tests.test_linprog.TestLinprogIPSpecific.test_alternate_initial_point(self)
scipy.optimize.tests.test_linprog.TestLinprogIPSpecific.test_bug_8664(self)
scipy.optimize.tests.test_linprog.TestLinprogIPSpecific.test_cholesky(self)
scipy.optimize.tests.test_linprog.TestLinprogIPSpecific.test_solver_select(self)
scipy.optimize.tests.test_linprog.TestLinprogIPSpecific.test_unbounded_below_no_presolve_original(self)
scipy.optimize.tests.test_linprog.TestLinprogRSBland(LinprogRSTests)
scipy.optimize.tests.test_linprog.TestLinprogRSCommon(LinprogRSTests)
scipy.optimize.tests.test_linprog.TestLinprogRSCommon.test_cyclic_bland(self)
scipy.optimize.tests.test_linprog.TestLinprogRSCommon.test_nontrivial_problem_with_bad_guess(self)
scipy.optimize.tests.test_linprog.TestLinprogRSCommon.test_nontrivial_problem_with_bounded_variables(self)
scipy.optimize.tests.test_linprog.TestLinprogRSCommon.test_nontrivial_problem_with_guess(self)
scipy.optimize.tests.test_linprog.TestLinprogRSCommon.test_nontrivial_problem_with_negative_unbounded_variable(self)
scipy.optimize.tests.test_linprog.TestLinprogRSCommon.test_nontrivial_problem_with_unbounded_variables(self)
scipy.optimize.tests.test_linprog.TestLinprogRSCommon.test_redundant_constraints_with_guess(self)
scipy.optimize.tests.test_linprog.TestLinprogSimplexBland(LinprogSimplexTests)
scipy.optimize.tests.test_linprog.TestLinprogSimplexBland.setup_method(self)
scipy.optimize.tests.test_linprog.TestLinprogSimplexBland.test_bug_5400(self)
scipy.optimize.tests.test_linprog.TestLinprogSimplexBland.test_bug_8174_low_tol(self)
scipy.optimize.tests.test_linprog.TestLinprogSimplexDefault(LinprogSimplexTests)
scipy.optimize.tests.test_linprog.TestLinprogSimplexDefault.setup_method(self)
scipy.optimize.tests.test_linprog.TestLinprogSimplexDefault.test_bug_5400(self)
scipy.optimize.tests.test_linprog.TestLinprogSimplexDefault.test_bug_7237_low_tol(self)
scipy.optimize.tests.test_linprog.TestLinprogSimplexDefault.test_bug_8174_low_tol(self)
scipy.optimize.tests.test_linprog.TestLinprogSimplexNoPresolve(LinprogSimplexTests)
scipy.optimize.tests.test_linprog.TestLinprogSimplexNoPresolve.setup_method(self)
scipy.optimize.tests.test_linprog.TestLinprogSimplexNoPresolve.test_bug_5400(self)
scipy.optimize.tests.test_linprog.TestLinprogSimplexNoPresolve.test_bug_6139_low_tol(self)
scipy.optimize.tests.test_linprog.TestLinprogSimplexNoPresolve.test_bug_7237_low_tol(self)
scipy.optimize.tests.test_linprog.TestLinprogSimplexNoPresolve.test_bug_8174_low_tol(self)
scipy.optimize.tests.test_linprog.TestLinprogSimplexNoPresolve.test_unbounded_no_nontrivial_constraints_1(self)
scipy.optimize.tests.test_linprog.TestLinprogSimplexNoPresolve.test_unbounded_no_nontrivial_constraints_2(self)
scipy.optimize.tests.test_linprog.TestRRID(RRTests)
scipy.optimize.tests.test_linprog.TestRRPivot(RRTests)
scipy.optimize.tests.test_linprog.TestRRSVD(RRTests)
scipy.optimize.tests.test_linprog._assert_infeasible(res)
scipy.optimize.tests.test_linprog._assert_iteration_limit_reached(res,maxiter)
scipy.optimize.tests.test_linprog._assert_success(res,desired_fun=None,desired_x=None,rtol=1e-08,atol=1e-08)
scipy.optimize.tests.test_linprog._assert_unable_to_find_basic_feasible_sol(res)
scipy.optimize.tests.test_linprog._assert_unbounded(res)
scipy.optimize.tests.test_linprog.generic_callback_test(self)
scipy.optimize.tests.test_linprog.l1_regression_prob(seed=0,m=8,d=9,n=100)
scipy.optimize.tests.test_linprog.lpgen_2d(m,n)
scipy.optimize.tests.test_linprog.magic_square(n)
scipy.optimize.tests.test_linprog.nontrivial_problem()
scipy.optimize.tests.test_linprog.test_bug_17380()
scipy.optimize.tests.test_linprog.test_choose_solver()
scipy.optimize.tests.test_linprog.test_deprecation()
scipy.optimize.tests.test_linprog.test_highs_status_message()
scipy.optimize.tests.test_linprog.test_unknown_solvers_and_options()
scipy.optimize.tests.test_linprog.very_random_gen(seed=0)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test__shgo.py----------------------------------------
A:scipy.optimize.tests.test__shgo.cons->wrap_constraints(g)
A:scipy.optimize.tests.test__shgo.test1_1->StructTest1(bounds=[(-1, 6), (-1, 6)], expected_x=[0, 0])
A:scipy.optimize.tests.test__shgo.test1_2->StructTest1(bounds=[(0, 1), (0, 1)], expected_x=[0, 0])
A:scipy.optimize.tests.test__shgo.test1_3->StructTest1(bounds=[(None, None), (None, None)], expected_x=[0, 0])
A:scipy.optimize.tests.test__shgo.test2_1->StructTest2(bounds=[(0, 60)], expected_x=[1.53567906], expected_fun=-28.44677132, expected_xl=numpy.array([[1.53567906], [55.01782167], [7.80894889], [48.74797493], [14.07445705], [42.4913859], [20.31743841], [36.28607535], [26.43039605], [30.76371366]]), expected_funl=numpy.array([-28.44677132, -24.99785984, -22.16855376, -18.72136195, -15.89423937, -12.45154942, -9.63133158, -6.20801301, -3.43727232, -0.46353338]))
A:scipy.optimize.tests.test__shgo.test2_2->StructTest2(bounds=[(0, 4.5)], expected_x=[1.53567906], expected_fun=[-28.44677132], expected_xl=numpy.array([[1.53567906]]), expected_funl=numpy.array([-28.44677132]))
A:scipy.optimize.tests.test__shgo.test3_1->StructTest3(bounds=[(2, 50), (0, 50)], expected_x=[250 ** 0.5, 2.5 ** 0.5], expected_fun=5.0)
A:scipy.optimize.tests.test__shgo.test4_1->StructTest4(bounds=[(-10, 10)] * 7, expected_x=[2.330499, 1.951372, -0.4775414, 4.365726, -0.624487, 1.038131, 1.594227], expected_fun=680.6300573)
A:scipy.optimize.tests.test__shgo.test5_1->StructTest5(bounds=[(-512, 512), (-512, 512)], expected_fun=[-959.6406627208505], expected_x=[512.0, 404.23180542])
A:scipy.optimize.tests.test__shgo.k->int(self.N / 3)
A:scipy.optimize.tests.test__shgo.boundsLJ->list(zip([-4.0] * 6, [4.0] * 6))
A:scipy.optimize.tests.test__shgo.testLJ->StructTestLJ(bounds=boundsLJ, expected_fun=[-1.0], expected_x=[-2.71247337e-08, -2.71247337e-08, -2.50000222, -2.71247337e-08, -2.71247337e-08, -1.50000222])
A:scipy.optimize.tests.test__shgo.test_table->StructTestTable(bounds=[(-10, 10), (-10, 10)], expected_fun=[50], expected_x=[3.0, 3.0])
A:scipy.optimize.tests.test__shgo.test_infeasible->StructTestInfeasible(bounds=[(2, 50), (-1, 1)], expected_fun=None, expected_x=None)
A:scipy.optimize.tests.test__shgo.res->shgo(objective, bounds, minimizer_kwargs=minimizer_kwargs, options=options)
A:scipy.optimize.tests.test__shgo.ref->minimize(objective, x0=[0], bounds=bounds, **minimizer_kwargs, **options)
A:scipy.optimize.tests.test__shgo.bounds_old->list(zip(lb, ub))
A:scipy.optimize.tests.test__shgo.bounds_new->Bounds(lb, ub)
A:scipy.optimize.tests.test__shgo.res_old_bounds->shgo(f, bounds_old)
A:scipy.optimize.tests.test__shgo.res_new_bounds->shgo(f, bounds_new)
A:scipy.optimize.tests.test__shgo.x_opt->numpy.array([-1.0, 1.0, 0.0])
scipy.optimize.tests.test__shgo.StructTest1(StructTestFunction)
scipy.optimize.tests.test__shgo.StructTest1.f(self,x)
scipy.optimize.tests.test__shgo.StructTest1.g(x)
scipy.optimize.tests.test__shgo.StructTest2(StructTestFunction)
scipy.optimize.tests.test__shgo.StructTest2.f(self,x)
scipy.optimize.tests.test__shgo.StructTest2.g(x)
scipy.optimize.tests.test__shgo.StructTest3(StructTestFunction)
scipy.optimize.tests.test__shgo.StructTest3.f(self,x)
scipy.optimize.tests.test__shgo.StructTest3.g1(x)
scipy.optimize.tests.test__shgo.StructTest3.g2(x)
scipy.optimize.tests.test__shgo.StructTest4(StructTestFunction)
scipy.optimize.tests.test__shgo.StructTest4.f(self,x)
scipy.optimize.tests.test__shgo.StructTest4.g1(x)
scipy.optimize.tests.test__shgo.StructTest4.g2(x)
scipy.optimize.tests.test__shgo.StructTest4.g3(x)
scipy.optimize.tests.test__shgo.StructTest4.g4(x)
scipy.optimize.tests.test__shgo.StructTest5(StructTestFunction)
scipy.optimize.tests.test__shgo.StructTest5.f(self,x)
scipy.optimize.tests.test__shgo.StructTestFunction(self,bounds,expected_x,expected_fun=None,expected_xl=None,expected_funl=None)
scipy.optimize.tests.test__shgo.StructTestFunction.__init__(self,bounds,expected_x,expected_fun=None,expected_xl=None,expected_funl=None)
scipy.optimize.tests.test__shgo.StructTestInfeasible(StructTestFunction)
scipy.optimize.tests.test__shgo.StructTestInfeasible.f(self,x,*args)
scipy.optimize.tests.test__shgo.StructTestInfeasible.g1(x)
scipy.optimize.tests.test__shgo.StructTestInfeasible.g2(x)
scipy.optimize.tests.test__shgo.StructTestInfeasible.g3(x)
scipy.optimize.tests.test__shgo.StructTestInfeasible.g4(x)
scipy.optimize.tests.test__shgo.StructTestLJ(StructTestFunction)
scipy.optimize.tests.test__shgo.StructTestLJ.f(self,x,*args)
scipy.optimize.tests.test__shgo.StructTestTable(StructTestFunction)
scipy.optimize.tests.test__shgo.StructTestTable.f(self,x)
scipy.optimize.tests.test__shgo.TestShgoArguments
scipy.optimize.tests.test__shgo.TestShgoArguments.test_10_finite_time(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_11_f_min_time(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_12_sobol_inf_cons(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_14_local_iter(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_15_min_every_iter(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_16_disp_bounds_minimizer(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_17_custom_sampling(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_18_bounds_class(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_1_1_simpl_iter(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_1_2_simpl_iter(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_2_1_sobol_iter(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_2_2_sobol_iter(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_3_1_disp_simplicial(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_3_2_disp_sobol(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_4_1_known_f_min(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_4_2_known_f_min(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_4_3_known_f_min(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_4_4_known_f_min(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_5_1_simplicial_argless(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_5_2_sobol_argless(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_6_1_simplicial_max_iter(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_6_2_simplicial_min_iter(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_7_1_minkwargs(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_7_2_minkwargs(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_7_3_minkwargs(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_8_homology_group_diff(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_9_cons_g(self)
scipy.optimize.tests.test__shgo.TestShgoArguments.test_args_gh14589(self)
scipy.optimize.tests.test__shgo.TestShgoFailures
scipy.optimize.tests.test__shgo.TestShgoFailures.test_1_maxiter(self)
scipy.optimize.tests.test__shgo.TestShgoFailures.test_21_2_derivative_options(self,derivative)
scipy.optimize.tests.test__shgo.TestShgoFailures.test_2_sampling(self)
scipy.optimize.tests.test__shgo.TestShgoFailures.test_3_1_no_min_pool_sobol(self)
scipy.optimize.tests.test__shgo.TestShgoFailures.test_3_2_no_min_pool_simplicial(self)
scipy.optimize.tests.test__shgo.TestShgoFailures.test_4_1_bound_err(self)
scipy.optimize.tests.test__shgo.TestShgoFailures.test_4_2_bound_err(self)
scipy.optimize.tests.test__shgo.TestShgoFailures.test_5_1_1_infeasible_sobol(self)
scipy.optimize.tests.test__shgo.TestShgoFailures.test_5_1_2_infeasible_sobol(self)
scipy.optimize.tests.test__shgo.TestShgoFailures.test_5_2_infeasible_simplicial(self)
scipy.optimize.tests.test__shgo.TestShgoFailures.test_6_1_lower_known_f_min(self)
scipy.optimize.tests.test__shgo.TestShgoSimplicialTestFunctions
scipy.optimize.tests.test__shgo.TestShgoSimplicialTestFunctions.test_f1_1_simplicial(self)
scipy.optimize.tests.test__shgo.TestShgoSimplicialTestFunctions.test_f1_2_simplicial(self)
scipy.optimize.tests.test__shgo.TestShgoSimplicialTestFunctions.test_f1_3_simplicial(self)
scipy.optimize.tests.test__shgo.TestShgoSimplicialTestFunctions.test_f2_1_simplicial(self)
scipy.optimize.tests.test__shgo.TestShgoSimplicialTestFunctions.test_f2_2_simplicial(self)
scipy.optimize.tests.test__shgo.TestShgoSimplicialTestFunctions.test_f3_simplicial(self)
scipy.optimize.tests.test__shgo.TestShgoSimplicialTestFunctions.test_f4_simplicial(self)
scipy.optimize.tests.test__shgo.TestShgoSimplicialTestFunctions.test_lj_symmetry(self)
scipy.optimize.tests.test__shgo.TestShgoSobolTestFunctions
scipy.optimize.tests.test__shgo.TestShgoSobolTestFunctions.test_f1_1_sobol(self)
scipy.optimize.tests.test__shgo.TestShgoSobolTestFunctions.test_f1_2_sobol(self)
scipy.optimize.tests.test__shgo.TestShgoSobolTestFunctions.test_f1_3_sobol(self)
scipy.optimize.tests.test__shgo.TestShgoSobolTestFunctions.test_f2_1_sobol(self)
scipy.optimize.tests.test__shgo.TestShgoSobolTestFunctions.test_f2_2_sobol(self)
scipy.optimize.tests.test__shgo.TestShgoSobolTestFunctions.test_f3_sobol(self)
scipy.optimize.tests.test__shgo.TestShgoSobolTestFunctions.test_f4_sobol(self)
scipy.optimize.tests.test__shgo.TestShgoSobolTestFunctions.test_f5_1_sobol(self)
scipy.optimize.tests.test__shgo.TestShgoSobolTestFunctions.test_f5_2_sobol(self)
scipy.optimize.tests.test__shgo.run_test(test,args=(),test_atol=1e-05,n=128,iters=None,callback=None,minimizer_kwargs=None,options=None,sampling_method='sobol')
scipy.optimize.tests.test__shgo.wrap_constraints(g)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_quadratic_assignment.py----------------------------------------
A:scipy.optimize.tests.test_quadratic_assignment.res->quadratic_assignment(A, B, options={'P0': K})
A:scipy.optimize.tests.test_quadratic_assignment.A->numpy.random.rand(n, n)
A:scipy.optimize.tests.test_quadratic_assignment.B->numpy.random.rand(n, n)
A:scipy.optimize.tests.test_quadratic_assignment.(A, B, opt_perm)->chr12c()
A:scipy.optimize.tests.test_quadratic_assignment.seed_cost->numpy.array([4, 8, 10])
A:scipy.optimize.tests.test_quadratic_assignment.empty->numpy.empty((0, 0))
A:scipy.optimize.tests.test_quadratic_assignment.n->len(A)
A:scipy.optimize.tests.test_quadratic_assignment.K->_doubly_stochastic(K)
A:scipy.optimize.tests.test_quadratic_assignment.res1->quadratic_assignment(A, B, method=self.method, options={'rng': 0})
A:scipy.optimize.tests.test_quadratic_assignment.res2->quadratic_assignment(A, B, method=self.method, options={'rng': 0, 'partial_guess': guess})
A:scipy.optimize.tests.test_quadratic_assignment.res3->quadratic_assignment(A, B, method=self.method, options={'rng': 0, 'partial_guess': guess, 'partial_match': match})
A:scipy.optimize.tests.test_quadratic_assignment.mat->numpy.zeros((a, b))
A:scipy.optimize.tests.test_quadratic_assignment.mat[:, i]->numpy.arange(a)
scipy.optimize.tests.test_quadratic_assignment.QAPCommonTests
scipy.optimize.tests.test_quadratic_assignment.QAPCommonTests.setup_method(self)
scipy.optimize.tests.test_quadratic_assignment.QAPCommonTests.test_accuracy_1(self)
scipy.optimize.tests.test_quadratic_assignment.QAPCommonTests.test_accuracy_2(self)
scipy.optimize.tests.test_quadratic_assignment.QAPCommonTests.test_accuracy_3(self)
scipy.optimize.tests.test_quadratic_assignment.QAPCommonTests.test_unknown_options(self)
scipy.optimize.tests.test_quadratic_assignment.Test2opt(QAPCommonTests)
scipy.optimize.tests.test_quadratic_assignment.Test2opt.test_deterministic(self)
scipy.optimize.tests.test_quadratic_assignment.Test2opt.test_partial_guess(self)
scipy.optimize.tests.test_quadratic_assignment.Test2opt.test_specific_input_validation(self)
scipy.optimize.tests.test_quadratic_assignment.TestFAQ(QAPCommonTests)
scipy.optimize.tests.test_quadratic_assignment.TestFAQ.test_options(self)
scipy.optimize.tests.test_quadratic_assignment.TestFAQ.test_specific_input_validation(self)
scipy.optimize.tests.test_quadratic_assignment.TestQAPOnce
scipy.optimize.tests.test_quadratic_assignment.TestQAPOnce.setup_method(self)
scipy.optimize.tests.test_quadratic_assignment.TestQAPOnce.test_common_input_validation(self)
scipy.optimize.tests.test_quadratic_assignment._doubly_stochastic(P,tol=0.001)
scipy.optimize.tests.test_quadratic_assignment._range_matrix(a,b)
scipy.optimize.tests.test_quadratic_assignment.chr12c()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_lbfgsb_hessinv.py----------------------------------------
A:scipy.optimize.tests.test_lbfgsb_hessinv.result->minimize(fun=f, jac=True, method='L-BFGS-B', x0=20, options={'gtol': gtol, 'maxcor': maxcor})
A:scipy.optimize.tests.test_lbfgsb_hessinv.H1->minimize(fun=f, method='L-BFGS-B', x0=[10, 20]).hess_inv.todense()
A:scipy.optimize.tests.test_lbfgsb_hessinv.H2->numpy.vstack((result1.hess_inv(np.array([1, 0])), result1.hess_inv(np.array([0, 1]))))
A:scipy.optimize.tests.test_lbfgsb_hessinv.result1->minimize(fun=f, method='L-BFGS-B', x0=[10, 20])
A:scipy.optimize.tests.test_lbfgsb_hessinv.result2->minimize(fun=f, method='BFGS', x0=[10, 20])
scipy.optimize.tests.test_lbfgsb_hessinv.test_1()
scipy.optimize.tests.test_lbfgsb_hessinv.test_2()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_constraints.py----------------------------------------
A:scipy.optimize.tests.test_constraints.(strict_lb, strict_ub)->strict_bounds(lb, ub, enforce_feasibility, m)
A:scipy.optimize.tests.test_constraints.lb->numpy.array([-np.inf, 2, 3])
A:scipy.optimize.tests.test_constraints.ub->numpy.array([3, np.inf, 10])
A:scipy.optimize.tests.test_constraints.x0->numpy.array([1, 2, 3, 4])
A:scipy.optimize.tests.test_constraints.enforce_feasibility->numpy.array([True, True, True], dtype=bool)
A:scipy.optimize.tests.test_constraints.bounds->Bounds(-2, 4)
A:scipy.optimize.tests.test_constraints.pc->PreparedConstraint(nlc, [0.5, 1])
A:scipy.optimize.tests.test_constraints.A->numpy.eye(2)
A:scipy.optimize.tests.test_constraints.linear->LinearConstraint(A, -np.inf, 0, enforce_feasibility)
A:scipy.optimize.tests.test_constraints.nonlinear->NonlinearConstraint(fun, -np.inf, 0, jac, hess, enforce_feasibility)
A:scipy.optimize.tests.test_constraints.nlc->NonlinearConstraint(cons_f, [-1, -0.85], [2, 2])
A:scipy.optimize.tests.test_constraints.lb_true->numpy.array([1, -np.inf, -1])
A:scipy.optimize.tests.test_constraints.ub_true->numpy.array([2, 3, np.inf])
A:scipy.optimize.tests.test_constraints.(lb, ub)->old_bound_to_new(bounds)
A:scipy.optimize.tests.test_constraints.bounds2->eval(repr(Bounds(*args)))
A:scipy.optimize.tests.test_constraints.b->Bounds(lb=[0.0, 0.0], ub=[1.0, 1.0])
A:scipy.optimize.tests.test_constraints.b1->Bounds()
A:scipy.optimize.tests.test_constraints.b2->Bounds(np.asarray(-np.inf), np.asarray(np.inf))
A:scipy.optimize.tests.test_constraints.lc->LinearConstraint(A, -2, 4)
A:scipy.optimize.tests.test_constraints.lc2->LinearConstraint(A, -np.inf, np.inf)
scipy.optimize.tests.test_constraints.TestBounds
scipy.optimize.tests.test_constraints.TestBounds.test_array(self)
scipy.optimize.tests.test_constraints.TestBounds.test_defaults(self)
scipy.optimize.tests.test_constraints.TestBounds.test_input_validation(self)
scipy.optimize.tests.test_constraints.TestBounds.test_repr(self)
scipy.optimize.tests.test_constraints.TestBounds.test_residual(self)
scipy.optimize.tests.test_constraints.TestLinearConstraint
scipy.optimize.tests.test_constraints.TestLinearConstraint.test_defaults(self)
scipy.optimize.tests.test_constraints.TestLinearConstraint.test_input_validation(self)
scipy.optimize.tests.test_constraints.TestLinearConstraint.test_residual(self)
scipy.optimize.tests.test_constraints.TestStrictBounds(TestCase)
scipy.optimize.tests.test_constraints.TestStrictBounds.test_scalarvalue_unique_enforce_feasibility(self)
scipy.optimize.tests.test_constraints.TestStrictBounds.test_scalarvalue_vector_enforce_feasibility(self)
scipy.optimize.tests.test_constraints.TestStrictBounds.test_vectorvalue_unique_enforce_feasibility(self)
scipy.optimize.tests.test_constraints.TestStrictBounds.test_vectorvalue_vector_enforce_feasibility(self)
scipy.optimize.tests.test_constraints.test_new_bounds_to_old()
scipy.optimize.tests.test_constraints.test_old_bounds_to_new()
scipy.optimize.tests.test_constraints.test_prepare_constraint_infeasible_x0()
scipy.optimize.tests.test_constraints.test_violation()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_lsq_linear.py----------------------------------------
A:scipy.optimize.tests.test_lsq_linear.A->coo_matrix((data, (row, col)), shape=(3, 3))
A:scipy.optimize.tests.test_lsq_linear.b->self.rnd.randn(m)
A:scipy.optimize.tests.test_lsq_linear.self.rnd->numpy.random.RandomState(0)
A:scipy.optimize.tests.test_lsq_linear.res->lsq_linear(A, b, (lb, ub), lsmr_tol='auto')
A:scipy.optimize.tests.test_lsq_linear.lb->self.rnd.randn(n)
A:scipy.optimize.tests.test_lsq_linear.ub->numpy.array([1, 0])
A:scipy.optimize.tests.test_lsq_linear.k->numpy.array([20, 15])
A:scipy.optimize.tests.test_lsq_linear.s_t->lsq_linear(A, k)
A:scipy.optimize.tests.test_lsq_linear.result->lsq_linear(A, b, method=self.method)
A:scipy.optimize.tests.test_lsq_linear.(n, m)->numpy.sort(np.random.randint(2, 1000, size=2))
A:scipy.optimize.tests.test_lsq_linear.w->numpy.random.choice(n, n)
A:scipy.optimize.tests.test_lsq_linear.cost_bvls->numpy.sum((A @ x_bvls - b) ** 2)
A:scipy.optimize.tests.test_lsq_linear.cost_trf->numpy.sum((A @ x_trf - b) ** 2)
A:scipy.optimize.tests.test_lsq_linear.bounds->numpy.array([[31.0, -44.0, 26.0], [54.0, -32.0, 28.0]])
A:scipy.optimize.tests.test_lsq_linear.data->numpy.array([1.0, 1.0, 1.0, 1.0 + 1e-06, 1.0])
A:scipy.optimize.tests.test_lsq_linear.row->numpy.array([0, 0, 1, 2, 2])
A:scipy.optimize.tests.test_lsq_linear.col->numpy.array([0, 2, 1, 0, 2])
A:scipy.optimize.tests.test_lsq_linear.exact_sol->lsq_linear(A.toarray(), b, lsq_solver='exact')
A:scipy.optimize.tests.test_lsq_linear.default_lsmr_sol->lsq_linear(A, b, lsq_solver='lsmr')
A:scipy.optimize.tests.test_lsq_linear.conv_lsmr->lsq_linear(A, b, lsq_solver='lsmr', lsmr_maxiter=10)
A:scipy.optimize.tests.test_lsq_linear._->lsq_linear(A, b, lsq_solver='lsmr', lsmr_maxiter=-1)
scipy.optimize.tests.test_lsq_linear.BaseMixin
scipy.optimize.tests.test_lsq_linear.BaseMixin.setup_method(self)
scipy.optimize.tests.test_lsq_linear.BaseMixin.test_almost_singular(self)
scipy.optimize.tests.test_lsq_linear.BaseMixin.test_convergence_small_matrix(self)
scipy.optimize.tests.test_lsq_linear.BaseMixin.test_dense_bounds(self)
scipy.optimize.tests.test_lsq_linear.BaseMixin.test_dense_no_bounds(self)
scipy.optimize.tests.test_lsq_linear.BaseMixin.test_dense_rank_deficient(self)
scipy.optimize.tests.test_lsq_linear.BaseMixin.test_full_result(self)
scipy.optimize.tests.test_lsq_linear.BaseMixin.test_large_rank_deficient(self)
scipy.optimize.tests.test_lsq_linear.BaseMixin.test_np_matrix(self)
scipy.optimize.tests.test_lsq_linear.SparseMixin
scipy.optimize.tests.test_lsq_linear.SparseMixin.test_sparse_and_LinearOperator(self)
scipy.optimize.tests.test_lsq_linear.SparseMixin.test_sparse_bounds(self)
scipy.optimize.tests.test_lsq_linear.SparseMixin.test_sparse_ill_conditioned(self)
scipy.optimize.tests.test_lsq_linear.TestBVLS(BaseMixin)
scipy.optimize.tests.test_lsq_linear.TestErrorChecking
scipy.optimize.tests.test_lsq_linear.TestErrorChecking.test_option_lsmr_maxiter(self)
scipy.optimize.tests.test_lsq_linear.TestErrorChecking.test_option_lsmr_tol(self)
scipy.optimize.tests.test_lsq_linear.TestTRF(BaseMixin,SparseMixin)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_cobyla.py----------------------------------------
A:scipy.optimize.tests.test_cobyla.x->fmin_cobyla(self.fun, self.x0, [self.con1, self.con2], rhobeg=1, rhoend=1e-05, maxfun=100, disp=True)
A:scipy.optimize.tests.test_cobyla.callback->Callback()
A:scipy.optimize.tests.test_cobyla.sol->minimize(fun, x0, constraints=constraints, tol=1e-05)
A:scipy.optimize.tests.test_cobyla.pb->numpy.random.rand(10, 10)
A:scipy.optimize.tests.test_cobyla.spread->numpy.random.rand(10)
A:scipy.optimize.tests.test_cobyla.w0->numpy.zeros((10, 1))
A:scipy.optimize.tests.test_cobyla.a->numpy.array([[1, -2, 2], [-1, -2, 6], [-1, 2, 2]])
A:scipy.optimize.tests.test_cobyla.x0->numpy.array([2, 0])
scipy.optimize.tests.test_cobyla.TestCobyla
scipy.optimize.tests.test_cobyla.TestCobyla.con1(self,x)
scipy.optimize.tests.test_cobyla.TestCobyla.con2(self,x)
scipy.optimize.tests.test_cobyla.TestCobyla.fun(self,x)
scipy.optimize.tests.test_cobyla.TestCobyla.setup_method(self)
scipy.optimize.tests.test_cobyla.TestCobyla.test_minimize_constraint_violation(self)
scipy.optimize.tests.test_cobyla.TestCobyla.test_minimize_simple(self)
scipy.optimize.tests.test_cobyla.TestCobyla.test_simple(self)
scipy.optimize.tests.test_cobyla.test_vector_constraints()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_direct.py----------------------------------------
A:scipy.optimize.tests.test_direct.self.optimum_sphere_pos->numpy.zeros((4,))
A:scipy.optimize.tests.test_direct.self.bounds_stylinski_tang->Bounds([-4.0, -4.0], [4.0, 4.0])
A:scipy.optimize.tests.test_direct.res->direct(self.circle_with_args, bounds, args=(1, 1), maxfun=1250, locally_biased=locally_biased)
A:scipy.optimize.tests.test_direct._bounds->numpy.asarray(self.bounds_sphere)
A:scipy.optimize.tests.test_direct.dummy->numpy.square(x)
A:scipy.optimize.tests.test_direct.res_callback->direct(self.sphere, self.bounds_sphere, locally_biased=locally_biased, callback=callback)
A:scipy.optimize.tests.test_direct.result->direct(self.inf_fun, bounds, locally_biased=locally_biased)
A:scipy.optimize.tests.test_direct.x_opt->numpy.array([-1.0, 1.0, 0.0])
A:scipy.optimize.tests.test_direct.bounds_old->list(zip(lb, ub))
A:scipy.optimize.tests.test_direct.bounds_new->Bounds(lb, ub)
A:scipy.optimize.tests.test_direct.res_old_bounds->direct(self.sphere, bounds_old, locally_biased=locally_biased)
A:scipy.optimize.tests.test_direct.res_new_bounds->direct(self.sphere, bounds_new, locally_biased=locally_biased)
A:scipy.optimize.tests.test_direct.bounds->Bounds([-np.inf, -1], [-2, np.inf])
scipy.optimize.tests.test_direct.TestDIRECT
scipy.optimize.tests.test_direct.TestDIRECT.circle_with_args(self,x,a,b)
scipy.optimize.tests.test_direct.TestDIRECT.inf_fun(self,x)
scipy.optimize.tests.test_direct.TestDIRECT.inv(self,x)
scipy.optimize.tests.test_direct.TestDIRECT.nan_fun(self,x)
scipy.optimize.tests.test_direct.TestDIRECT.setup_method(self)
scipy.optimize.tests.test_direct.TestDIRECT.sphere(self,x)
scipy.optimize.tests.test_direct.TestDIRECT.styblinski_tang(self,pos)
scipy.optimize.tests.test_direct.TestDIRECT.test_bounds_variants(self,locally_biased)
scipy.optimize.tests.test_direct.TestDIRECT.test_direct(self,locally_biased)
scipy.optimize.tests.test_direct.TestDIRECT.test_direct_callback(self,locally_biased)
scipy.optimize.tests.test_direct.TestDIRECT.test_epsilon(self,eps,locally_biased)
scipy.optimize.tests.test_direct.TestDIRECT.test_exception(self,locally_biased)
scipy.optimize.tests.test_direct.TestDIRECT.test_f_circle_with_args(self,locally_biased)
scipy.optimize.tests.test_direct.TestDIRECT.test_f_min(self,f_min_rtol,locally_biased)
scipy.optimize.tests.test_direct.TestDIRECT.test_failure_maxfun(self,locally_biased)
scipy.optimize.tests.test_direct.TestDIRECT.test_failure_maxiter(self,locally_biased)
scipy.optimize.tests.test_direct.TestDIRECT.test_fmin_rtol_validation(self,f_min_rtol)
scipy.optimize.tests.test_direct.TestDIRECT.test_incorrect_bounds(self,bounds)
scipy.optimize.tests.test_direct.TestDIRECT.test_inf_bounds(self)
scipy.optimize.tests.test_direct.TestDIRECT.test_inf_fun(self,locally_biased)
scipy.optimize.tests.test_direct.TestDIRECT.test_invalid_bounds_type(self,bounds)
scipy.optimize.tests.test_direct.TestDIRECT.test_len_tol(self,len_tol,locally_biased)
scipy.optimize.tests.test_direct.TestDIRECT.test_len_tol_validation(self,len_tol)
scipy.optimize.tests.test_direct.TestDIRECT.test_locally_biased_validation(self,locally_biased)
scipy.optimize.tests.test_direct.TestDIRECT.test_maxfun_wrong_type(self,maxfun)
scipy.optimize.tests.test_direct.TestDIRECT.test_maxiter_wrong_type(self,maxiter)
scipy.optimize.tests.test_direct.TestDIRECT.test_nan(self,locally_biased)
scipy.optimize.tests.test_direct.TestDIRECT.test_negative_maxfun(self)
scipy.optimize.tests.test_direct.TestDIRECT.test_negative_maxiter(self)
scipy.optimize.tests.test_direct.TestDIRECT.test_no_segmentation_fault(self,locally_biased)
scipy.optimize.tests.test_direct.TestDIRECT.test_vol_tol(self,vol_tol,locally_biased)
scipy.optimize.tests.test_direct.TestDIRECT.test_vol_tol_validation(self,vol_tol)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test__dual_annealing.py----------------------------------------
A:scipy.optimize.tests.test__dual_annealing.self.rs->check_random_state(self.seed)
A:scipy.optimize.tests.test__dual_annealing.lu->list(zip(*self.ld_bounds))
A:scipy.optimize.tests.test__dual_annealing.lower->numpy.array(lu[0])
A:scipy.optimize.tests.test__dual_annealing.upper->numpy.array(lu[1])
A:scipy.optimize.tests.test__dual_annealing.vd->VisitingDistribution(lower, upper, qv, self.rs)
A:scipy.optimize.tests.test__dual_annealing.values->VisitingDistribution(lower, upper, qv, self.rs).visit_fn(self.high_temperature, self.nbtestvalues)
A:scipy.optimize.tests.test__dual_annealing.x_step_low->VisitingDistribution(lower, upper, qv, self.rs).visiting(values, 0, self.high_temperature)
A:scipy.optimize.tests.test__dual_annealing.x_step_high->VisitingDistribution(lower, upper, qv, self.rs).visiting(values, dim, self.high_temperature)
A:scipy.optimize.tests.test__dual_annealing.owf->ObjectiveFunWrapper(self.weirdfunc)
A:scipy.optimize.tests.test__dual_annealing.es->EnergyState(lower, upper)
A:scipy.optimize.tests.test__dual_annealing.ret->dual_annealing(func, bounds=list(zip(lw, up)), seed=1234)
A:scipy.optimize.tests.test__dual_annealing.res1->dual_annealing(self.func, self.ld_bounds, seed=rng)
A:scipy.optimize.tests.test__dual_annealing.res2->dual_annealing(self.func, self.ld_bounds, seed=rng)
A:scipy.optimize.tests.test__dual_annealing.res3->dual_annealing(self.func, self.ld_bounds, seed=self.seed)
A:scipy.optimize.tests.test__dual_annealing.rng->numpy.random.default_rng(1)
A:scipy.optimize.tests.test__dual_annealing.bounds->Bounds(lw, up)
A:scipy.optimize.tests.test__dual_annealing.ls_max_iter->min(max(len(self.ld_bounds) * LocalSearchWrapper.LS_MAXITER_RATIO, LocalSearchWrapper.LS_MAXITER_MIN), LocalSearchWrapper.LS_MAXITER_MAX)
A:scipy.optimize.tests.test__dual_annealing.rs->check_random_state(123)
A:scipy.optimize.tests.test__dual_annealing.energy_state->EnergyState(lower=None, upper=None)
A:scipy.optimize.tests.test__dual_annealing.chain->StrategyChain(accept_param, None, None, None, rs, energy_state)
A:scipy.optimize.tests.test__dual_annealing.ret_bounds_class->dual_annealing(func, bounds=bounds, seed=1234)
A:scipy.optimize.tests.test__dual_annealing.bounds_old->list(zip(lw, up))
A:scipy.optimize.tests.test__dual_annealing.ret_bounds_list->dual_annealing(func, bounds=bounds_old, seed=1234)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.callback(self,x,f,context)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.func(self,x,args=())
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.rosen_der_wrapper(self,x,args=())
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.setup_method(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_accept_reject_probabilistic(self,new_e,temp_step,accepted,accept_rate)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_bound_validity(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_bounds_class(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_bounds_integrity(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_callback_stop(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_deprecated_local_search_options_bounds(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_from_docstring(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_fun_args_ls(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_fun_args_no_ls(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_gradient_gnev(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_high_dim(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_high_dim_no_ls(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_low_dim(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_low_dim_no_ls(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_max_fun_ls(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_max_fun_no_ls(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_max_reinit(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_maxiter(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_minimizer_kwargs_bounds(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_multi_ls_minimizer(self,method,atol)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_nb_fun_call(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_nb_fun_call_no_ls(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_rand_gen(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_reproduce(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_reset(self)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_visiting_dist_high_temperature(self,qv)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_visiting_stepping(self,qv)
scipy.optimize.tests.test__dual_annealing.TestDualAnnealing.test_wrong_restart_temp(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/tests/test_minimize_constrained.py----------------------------------------
A:scipy.optimize.tests.test_minimize_constrained.self.x_opt->numpy.ones(n)
A:scipy.optimize.tests.test_minimize_constrained.self.bounds->Bounds([-2, 0], [0, 2])
A:scipy.optimize.tests.test_minimize_constrained.rng->numpy.random.RandomState(random_state)
A:scipy.optimize.tests.test_minimize_constrained.self.x0->numpy.hstack((x, y, z))
A:scipy.optimize.tests.test_minimize_constrained.x->numpy.atleast_1d(x)
A:scipy.optimize.tests.test_minimize_constrained.r->numpy.sum(100.0 * (x[1:] - x[:-1] ** 2.0) ** 2.0 + (1 - x[:-1]) ** 2.0, axis=0)
A:scipy.optimize.tests.test_minimize_constrained.der->numpy.zeros_like(x)
A:scipy.optimize.tests.test_minimize_constrained.diagonal->numpy.zeros(len(x), dtype=x.dtype)
A:scipy.optimize.tests.test_minimize_constrained.self.rng->numpy.random.RandomState(random_state)
A:scipy.optimize.tests.test_minimize_constrained.phi->self.rng.uniform(0, 2 * np.pi, self.n_electrons)
A:scipy.optimize.tests.test_minimize_constrained.theta->self.rng.uniform(-np.pi, np.pi, self.n_electrons)
A:scipy.optimize.tests.test_minimize_constrained.z->numpy.sin(theta)
A:scipy.optimize.tests.test_minimize_constrained.(x_coord, y_coord, z_coord)->self._get_cordinates(x)
A:scipy.optimize.tests.test_minimize_constrained.(dx, dy, dz)->self._compute_coordinate_deltas(x)
A:scipy.optimize.tests.test_minimize_constrained.i->numpy.arange(self.n_electrons)
A:scipy.optimize.tests.test_minimize_constrained.H->Rosenbrock().hess(x)
A:scipy.optimize.tests.test_minimize_constrained.result->minimize(prob.fun, [-10, 8], method='Nelder-Mead', bounds=bounds)
A:scipy.optimize.tests.test_minimize_constrained.res->minimize(fun=obj, x0=x0, method='trust-constr', bounds=bnds, constraints=nlcs)
A:scipy.optimize.tests.test_minimize_constrained.prob->Rosenbrock()
A:scipy.optimize.tests.test_minimize_constrained.result1->minimize(prob.fun, prob.x0, method='L-BFGS-B', jac='2-point')
A:scipy.optimize.tests.test_minimize_constrained.result2->minimize(prob.fun, prob.x0, method='L-BFGS-B', jac='3-point')
A:scipy.optimize.tests.test_minimize_constrained.constraint->NonlinearConstraint(constraint, 1.0, np.inf, constraintjacobian, constraintlcoh)
A:scipy.optimize.tests.test_minimize_constrained.bounds->Bounds([-np.inf, 1.0], [4.0, 5.0])
A:scipy.optimize.tests.test_minimize_constrained.A->numpy.matrix(np.diag([1, 1]))
A:scipy.optimize.tests.test_minimize_constrained.lin_cons->LinearConstraint(A, -1, np.inf)
A:scipy.optimize.tests.test_minimize_constrained.bnds->Bounds(lb=[-1, -1], ub=[1, 1], keep_feasible=True)
A:scipy.optimize.tests.test_minimize_constrained.x0->numpy.array((0.99, -0.99))
A:scipy.optimize.tests.test_minimize_constrained.ref->minimize(fun=obj, x0=x0, method='slsqp', bounds=bnds, constraints=nlcs)
scipy.optimize.tests.test_minimize_constrained.BoundedRosenbrock(self,random_state=0)
scipy.optimize.tests.test_minimize_constrained.BoundedRosenbrock.__init__(self,random_state=0)
scipy.optimize.tests.test_minimize_constrained.Elec(self,n_electrons=200,random_state=0,constr_jac=None,constr_hess=None)
scipy.optimize.tests.test_minimize_constrained.Elec.__init__(self,n_electrons=200,random_state=0,constr_jac=None,constr_hess=None)
scipy.optimize.tests.test_minimize_constrained.Elec._compute_coordinate_deltas(self,x)
scipy.optimize.tests.test_minimize_constrained.Elec._get_cordinates(self,x)
scipy.optimize.tests.test_minimize_constrained.Elec.constr(self)
scipy.optimize.tests.test_minimize_constrained.Elec.fun(self,x)
scipy.optimize.tests.test_minimize_constrained.Elec.grad(self,x)
scipy.optimize.tests.test_minimize_constrained.Elec.hess(self,x)
scipy.optimize.tests.test_minimize_constrained.EqIneqRosenbrock(self,random_state=0)
scipy.optimize.tests.test_minimize_constrained.EqIneqRosenbrock.__init__(self,random_state=0)
scipy.optimize.tests.test_minimize_constrained.EqIneqRosenbrock.constr(self)
scipy.optimize.tests.test_minimize_constrained.HyperbolicIneq(self,constr_jac=None,constr_hess=None)
scipy.optimize.tests.test_minimize_constrained.HyperbolicIneq.__init__(self,constr_jac=None,constr_hess=None)
scipy.optimize.tests.test_minimize_constrained.HyperbolicIneq.constr(self)
scipy.optimize.tests.test_minimize_constrained.HyperbolicIneq.fun(self,x)
scipy.optimize.tests.test_minimize_constrained.HyperbolicIneq.grad(self,x)
scipy.optimize.tests.test_minimize_constrained.HyperbolicIneq.hess(self,x)
scipy.optimize.tests.test_minimize_constrained.IneqRosenbrock(self,random_state=0)
scipy.optimize.tests.test_minimize_constrained.IneqRosenbrock.__init__(self,random_state=0)
scipy.optimize.tests.test_minimize_constrained.IneqRosenbrock.constr(self)
scipy.optimize.tests.test_minimize_constrained.Maratos(self,degrees=60,constr_jac=None,constr_hess=None)
scipy.optimize.tests.test_minimize_constrained.Maratos.__init__(self,degrees=60,constr_jac=None,constr_hess=None)
scipy.optimize.tests.test_minimize_constrained.Maratos.constr(self)
scipy.optimize.tests.test_minimize_constrained.Maratos.fun(self,x)
scipy.optimize.tests.test_minimize_constrained.Maratos.grad(self,x)
scipy.optimize.tests.test_minimize_constrained.Maratos.hess(self,x)
scipy.optimize.tests.test_minimize_constrained.MaratosGradInFunc(self,degrees=60,constr_jac=None,constr_hess=None)
scipy.optimize.tests.test_minimize_constrained.MaratosGradInFunc.__init__(self,degrees=60,constr_jac=None,constr_hess=None)
scipy.optimize.tests.test_minimize_constrained.MaratosGradInFunc.constr(self)
scipy.optimize.tests.test_minimize_constrained.MaratosGradInFunc.fun(self,x)
scipy.optimize.tests.test_minimize_constrained.MaratosGradInFunc.grad(self)
scipy.optimize.tests.test_minimize_constrained.MaratosGradInFunc.hess(self,x)
scipy.optimize.tests.test_minimize_constrained.MaratosTestArgs(self,a,b,degrees=60,constr_jac=None,constr_hess=None)
scipy.optimize.tests.test_minimize_constrained.MaratosTestArgs.__init__(self,a,b,degrees=60,constr_jac=None,constr_hess=None)
scipy.optimize.tests.test_minimize_constrained.MaratosTestArgs._test_args(self,a,b)
scipy.optimize.tests.test_minimize_constrained.MaratosTestArgs.constr(self)
scipy.optimize.tests.test_minimize_constrained.MaratosTestArgs.fun(self,x,a,b)
scipy.optimize.tests.test_minimize_constrained.MaratosTestArgs.grad(self,x,a,b)
scipy.optimize.tests.test_minimize_constrained.MaratosTestArgs.hess(self,x,a,b)
scipy.optimize.tests.test_minimize_constrained.Rosenbrock(self,n=2,random_state=0)
scipy.optimize.tests.test_minimize_constrained.Rosenbrock.__init__(self,n=2,random_state=0)
scipy.optimize.tests.test_minimize_constrained.Rosenbrock.constr(self)
scipy.optimize.tests.test_minimize_constrained.Rosenbrock.fun(self,x)
scipy.optimize.tests.test_minimize_constrained.Rosenbrock.grad(self,x)
scipy.optimize.tests.test_minimize_constrained.Rosenbrock.hess(self,x)
scipy.optimize.tests.test_minimize_constrained.TestBoundedNelderMead
scipy.optimize.tests.test_minimize_constrained.TestBoundedNelderMead.test_equal_all_bounds(self)
scipy.optimize.tests.test_minimize_constrained.TestBoundedNelderMead.test_equal_one_bounds(self)
scipy.optimize.tests.test_minimize_constrained.TestBoundedNelderMead.test_invalid_bounds(self)
scipy.optimize.tests.test_minimize_constrained.TestBoundedNelderMead.test_outside_bounds_warning(self)
scipy.optimize.tests.test_minimize_constrained.TestBoundedNelderMead.test_rosen_brock_with_bounds(self,bounds,x_opt)
scipy.optimize.tests.test_minimize_constrained.TestEmptyConstraint(TestCase)
scipy.optimize.tests.test_minimize_constrained.TestEmptyConstraint.test_empty_constraint(self)
scipy.optimize.tests.test_minimize_constrained.TestTrustRegionConstr(TestCase)
scipy.optimize.tests.test_minimize_constrained.TestTrustRegionConstr.test_args(self)
scipy.optimize.tests.test_minimize_constrained.TestTrustRegionConstr.test_default_hess(self)
scipy.optimize.tests.test_minimize_constrained.TestTrustRegionConstr.test_default_jac_and_hess(self)
scipy.optimize.tests.test_minimize_constrained.TestTrustRegionConstr.test_hessp(self)
scipy.optimize.tests.test_minimize_constrained.TestTrustRegionConstr.test_issue_9044(self)
scipy.optimize.tests.test_minimize_constrained.TestTrustRegionConstr.test_list_of_problems(self)
scipy.optimize.tests.test_minimize_constrained.TestTrustRegionConstr.test_no_constraints(self)
scipy.optimize.tests.test_minimize_constrained.TestTrustRegionConstr.test_raise_exception(self)
scipy.optimize.tests.test_minimize_constrained.test_bug_11886()
scipy.optimize.tests.test_minimize_constrained.test_gh11649()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_trustregion_constr/qp_subproblem.py----------------------------------------
A:scipy.optimize._trustregion_constr.qp_subproblem.(n,)->numpy.shape(c)
A:scipy.optimize._trustregion_constr.qp_subproblem.(m,)->numpy.shape(b)
A:scipy.optimize._trustregion_constr.qp_subproblem.kkt_matrix->csc_matrix(bmat([[H, A.T], [A, None]]))
A:scipy.optimize._trustregion_constr.qp_subproblem.kkt_vec->numpy.hstack([-c, -b])
A:scipy.optimize._trustregion_constr.qp_subproblem.lu->scipy.sparse.linalg.splu(kkt_matrix)
A:scipy.optimize._trustregion_constr.qp_subproblem.kkt_sol->scipy.sparse.linalg.splu(kkt_matrix).solve(kkt_vec)
A:scipy.optimize._trustregion_constr.qp_subproblem.a->numpy.dot(d, d)
A:scipy.optimize._trustregion_constr.qp_subproblem.sqrt_discriminant->numpy.sqrt(discriminant)
A:scipy.optimize._trustregion_constr.qp_subproblem.(ta, tb)->sorted([ta, tb])
A:scipy.optimize._trustregion_constr.qp_subproblem.ta->numpy.maximum(ta_b, ta_s)
A:scipy.optimize._trustregion_constr.qp_subproblem.tb->numpy.minimum(tb_b, tb_s)
A:scipy.optimize._trustregion_constr.qp_subproblem.z->numpy.asarray(z)
A:scipy.optimize._trustregion_constr.qp_subproblem.d->numpy.asarray(d)
A:scipy.optimize._trustregion_constr.qp_subproblem.lb->numpy.full(n, -np.inf)
A:scipy.optimize._trustregion_constr.qp_subproblem.ub->numpy.full(n, np.inf)
A:scipy.optimize._trustregion_constr.qp_subproblem.not_zero_d->numpy.logical_not(zero_d)
A:scipy.optimize._trustregion_constr.qp_subproblem.(ta_b, tb_b, intersect_b)->box_intersections(z, d, lb, ub, entire_line)
A:scipy.optimize._trustregion_constr.qp_subproblem.(ta_s, tb_s, intersect_s)->sphere_intersections(z, d, trust_radius, entire_line)
A:scipy.optimize._trustregion_constr.qp_subproblem.g->Z.dot(r)
A:scipy.optimize._trustregion_constr.qp_subproblem.A_g->A.dot(g)
A:scipy.optimize._trustregion_constr.qp_subproblem.origin_point->numpy.zeros_like(cauchy_point)
A:scipy.optimize._trustregion_constr.qp_subproblem.(_, alpha, intersect)->box_sphere_intersections(x, p, lb, ub, trust_radius, entire_line=True)
A:scipy.optimize._trustregion_constr.qp_subproblem.(_, alpha, _)->box_sphere_intersections(z, p, lb, ub, trust_radius)
A:scipy.optimize._trustregion_constr.qp_subproblem.x->reinforce_box_boundaries(x, lb, ub)
A:scipy.optimize._trustregion_constr.qp_subproblem.r->Z.dot(H.dot(x) + c)
A:scipy.optimize._trustregion_constr.qp_subproblem.H_p->H.dot(p)
A:scipy.optimize._trustregion_constr.qp_subproblem.tol->max(min(0.01 * np.sqrt(rt_g), 0.1 * rt_g), CLOSE_TO_ZERO)
A:scipy.optimize._trustregion_constr.qp_subproblem.max_iter->min(max_iter, n - m)
A:scipy.optimize._trustregion_constr.qp_subproblem.last_feasible_x->reinforce_box_boundaries(last_feasible_x, lb, ub)
A:scipy.optimize._trustregion_constr.qp_subproblem.pt_H_p->H.dot(p).dot(p)
A:scipy.optimize._trustregion_constr.qp_subproblem.(_, theta, intersect)->box_sphere_intersections(x, alpha * p, lb, ub, trust_radius)
A:scipy.optimize._trustregion_constr.qp_subproblem.g_next->Z.dot(r_next)
scipy.optimize._trustregion_constr.qp_subproblem.box_intersections(z,d,lb,ub,entire_line=False)
scipy.optimize._trustregion_constr.qp_subproblem.box_sphere_intersections(z,d,lb,ub,trust_radius,entire_line=False,extra_info=False)
scipy.optimize._trustregion_constr.qp_subproblem.eqp_kktfact(H,c,A,b)
scipy.optimize._trustregion_constr.qp_subproblem.inside_box_boundaries(x,lb,ub)
scipy.optimize._trustregion_constr.qp_subproblem.modified_dogleg(A,Y,b,trust_radius,lb,ub)
scipy.optimize._trustregion_constr.qp_subproblem.projected_cg(H,c,Z,Y,b,trust_radius=np.inf,lb=None,ub=None,tol=None,max_iter=None,max_infeasible_iter=None,return_all=False)
scipy.optimize._trustregion_constr.qp_subproblem.reinforce_box_boundaries(x,lb,ub)
scipy.optimize._trustregion_constr.qp_subproblem.sphere_intersections(z,d,trust_radius,entire_line=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_trustregion_constr/report.py----------------------------------------
scipy.optimize._trustregion_constr.report.BasicReport(ReportBase)
scipy.optimize._trustregion_constr.report.IPReport(ReportBase)
scipy.optimize._trustregion_constr.report.ReportBase
scipy.optimize._trustregion_constr.report.ReportBase.print_footer(cls)
scipy.optimize._trustregion_constr.report.ReportBase.print_header(cls)
scipy.optimize._trustregion_constr.report.ReportBase.print_iteration(cls,*args)
scipy.optimize._trustregion_constr.report.SQPReport(ReportBase)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_trustregion_constr/projections.py----------------------------------------
A:scipy.optimize._trustregion_constr.projections.norm_g->numpy.linalg.norm(g)
A:scipy.optimize._trustregion_constr.projections.norm_A->numpy.linalg.norm(A, ord='fro')
A:scipy.optimize._trustregion_constr.projections.norm_A_g->numpy.linalg.norm(A.dot(g))
A:scipy.optimize._trustregion_constr.projections.factor->cholesky_AAt(A)
A:scipy.optimize._trustregion_constr.projections.v->U.dot(aux2)
A:scipy.optimize._trustregion_constr.projections.K->csc_matrix(bmat([[eye(n), A.T], [A, None]]))
A:scipy.optimize._trustregion_constr.projections.solve->scipy.sparse.linalg.factorized(K)
A:scipy.optimize._trustregion_constr.projections.lu_sol->solve(v)
A:scipy.optimize._trustregion_constr.projections.lu_update->solve(new_v)
A:scipy.optimize._trustregion_constr.projections.(Q, R, P)->scipy.linalg.qr(A.T, pivoting=True, mode='economic')
A:scipy.optimize._trustregion_constr.projections.aux1->U.T.dot(x)
A:scipy.optimize._trustregion_constr.projections.aux2->scipy.linalg.solve_triangular(R, aux1, lower=False, trans='T')
A:scipy.optimize._trustregion_constr.projections.z->Vt.T.dot(aux2)
A:scipy.optimize._trustregion_constr.projections.(U, s, Vt)->scipy.linalg.svd(A, full_matrices=False)
A:scipy.optimize._trustregion_constr.projections.(m, n)->numpy.shape(A)
A:scipy.optimize._trustregion_constr.projections.A->csc_matrix(A)
A:scipy.optimize._trustregion_constr.projections.(null_space, least_squares, row_space)->svd_factorization_projections(A, m, n, orth_tol, max_refin, tol)
A:scipy.optimize._trustregion_constr.projections.Z->LinearOperator((n, n), null_space)
A:scipy.optimize._trustregion_constr.projections.LS->LinearOperator((m, n), least_squares)
A:scipy.optimize._trustregion_constr.projections.Y->LinearOperator((n, m), row_space)
scipy.optimize._trustregion_constr.projections.augmented_system_projections(A,m,n,orth_tol,max_refin,tol)
scipy.optimize._trustregion_constr.projections.normal_equation_projections(A,m,n,orth_tol,max_refin,tol)
scipy.optimize._trustregion_constr.projections.orthogonality(A,g)
scipy.optimize._trustregion_constr.projections.projections(A,method=None,orth_tol=1e-12,max_refin=3,tol=1e-15)
scipy.optimize._trustregion_constr.projections.qr_factorization_projections(A,m,n,orth_tol,max_refin,tol)
scipy.optimize._trustregion_constr.projections.svd_factorization_projections(A,m,n,orth_tol,max_refin,tol)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_trustregion_constr/minimize_trustregion_constr.py----------------------------------------
A:scipy.optimize._trustregion_constr.minimize_trustregion_constr.H_objective->self.objective_hess(x)
A:scipy.optimize._trustregion_constr.minimize_trustregion_constr.H_constraints->self.constraints_hess(x, v_eq, v_ineq)
A:scipy.optimize._trustregion_constr.minimize_trustregion_constr.state.lagrangian_grad->numpy.copy(state.grad)
A:scipy.optimize._trustregion_constr.minimize_trustregion_constr.state.optimality->numpy.linalg.norm(state.lagrangian_grad, np.inf)
A:scipy.optimize._trustregion_constr.minimize_trustregion_constr.state.constr_violation->numpy.max([state.constr_violation, np.max(lb - c), np.max(c - ub)])
A:scipy.optimize._trustregion_constr.minimize_trustregion_constr.state->update_state_ip(state, x, last_iteration_failed, objective, prepared_constraints, start_time, tr_radius, constr_penalty, cg_info, barrier_parameter, barrier_tolerance)
A:scipy.optimize._trustregion_constr.minimize_trustregion_constr.x0->numpy.atleast_1d(x0).astype(float)
A:scipy.optimize._trustregion_constr.minimize_trustregion_constr.n_vars->numpy.size(x0)
A:scipy.optimize._trustregion_constr.minimize_trustregion_constr.hess->BFGS()
A:scipy.optimize._trustregion_constr.minimize_trustregion_constr.finite_diff_bounds->strict_bounds(bounds.lb, bounds.ub, bounds.keep_feasible, n_vars)
A:scipy.optimize._trustregion_constr.minimize_trustregion_constr.objective->ScalarFunction(fun, x0, args, grad, hess, finite_diff_rel_step, finite_diff_bounds)
A:scipy.optimize._trustregion_constr.minimize_trustregion_constr.n_sparse->sum((c.fun.sparse_jacobian for c in prepared_constraints))
A:scipy.optimize._trustregion_constr.minimize_trustregion_constr.(c_eq0, c_ineq0, J_eq0, J_ineq0)->initial_constraints_as_canonical(n_vars, prepared_constraints, sparse_jacobian)
A:scipy.optimize._trustregion_constr.minimize_trustregion_constr.canonical->canonical_constraint.CanonicalConstraint.concatenate(canonical_all, sparse_jacobian)
A:scipy.optimize._trustregion_constr.minimize_trustregion_constr.lagrangian_hess->LagrangianHessian(n_vars, objective.hess, canonical.hess)
A:scipy.optimize._trustregion_constr.minimize_trustregion_constr.start_time->time.time()
A:scipy.optimize._trustregion_constr.minimize_trustregion_constr.f->ScalarFunction(fun, x0, args, grad, hess, finite_diff_rel_step, finite_diff_bounds).fun(x)
A:scipy.optimize._trustregion_constr.minimize_trustregion_constr.(c_eq, _)->canonical_constraint.CanonicalConstraint.concatenate(canonical_all, sparse_jacobian).fun(x)
A:scipy.optimize._trustregion_constr.minimize_trustregion_constr.g->ScalarFunction(fun, x0, args, grad, hess, finite_diff_rel_step, finite_diff_bounds).grad(x)
A:scipy.optimize._trustregion_constr.minimize_trustregion_constr.(J_eq, _)->canonical_constraint.CanonicalConstraint.concatenate(canonical_all, sparse_jacobian).jac(x)
A:scipy.optimize._trustregion_constr.minimize_trustregion_constr.(_, result)->tr_interior_point(objective.fun, objective.grad, lagrangian_hess, n_vars, canonical.n_ineq, canonical.n_eq, canonical.fun, canonical.jac, x0, objective.f, objective.g, c_ineq0, J_ineq0, c_eq0, J_eq0, stop_criteria, canonical.keep_feasible, xtol, state, initial_barrier_parameter, initial_barrier_tolerance, initial_constr_penalty, initial_tr_radius, factorization_method)
scipy.optimize._trustregion_constr._minimize_trustregion_constr(fun,x0,args,grad,hess,hessp,bounds,constraints,xtol=1e-08,gtol=1e-08,barrier_tol=1e-08,sparse_jacobian=None,callback=None,maxiter=1000,verbose=0,finite_diff_rel_step=None,initial_constr_penalty=1.0,initial_tr_radius=1.0,initial_barrier_parameter=0.1,initial_barrier_tolerance=0.1,factorization_method=None,disp=False)
scipy.optimize._trustregion_constr.minimize_trustregion_constr.HessianLinearOperator(self,hessp,n)
scipy.optimize._trustregion_constr.minimize_trustregion_constr.HessianLinearOperator.__init__(self,hessp,n)
scipy.optimize._trustregion_constr.minimize_trustregion_constr.LagrangianHessian(self,n,objective_hess,constraints_hess)
scipy.optimize._trustregion_constr.minimize_trustregion_constr.LagrangianHessian.__init__(self,n,objective_hess,constraints_hess)
scipy.optimize._trustregion_constr.minimize_trustregion_constr._minimize_trustregion_constr(fun,x0,args,grad,hess,hessp,bounds,constraints,xtol=1e-08,gtol=1e-08,barrier_tol=1e-08,sparse_jacobian=None,callback=None,maxiter=1000,verbose=0,finite_diff_rel_step=None,initial_constr_penalty=1.0,initial_tr_radius=1.0,initial_barrier_parameter=0.1,initial_barrier_tolerance=0.1,factorization_method=None,disp=False)
scipy.optimize._trustregion_constr.minimize_trustregion_constr.update_state_ip(state,x,last_iteration_failed,objective,prepared_constraints,start_time,tr_radius,constr_penalty,cg_info,barrier_parameter,barrier_tolerance)
scipy.optimize._trustregion_constr.minimize_trustregion_constr.update_state_sqp(state,x,last_iteration_failed,objective,prepared_constraints,start_time,tr_radius,constr_penalty,cg_info)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_trustregion_constr/tr_interior_point.py----------------------------------------
A:scipy.optimize._trustregion_constr.tr_interior_point.self.fun0->self._compute_function(fun0, constr_ineq0, s0)
A:scipy.optimize._trustregion_constr.tr_interior_point.self.grad0->self._compute_gradient(grad0)
A:scipy.optimize._trustregion_constr.tr_interior_point.self.constr0->self._compute_constr(constr_ineq0, constr_eq0, s0)
A:scipy.optimize._trustregion_constr.tr_interior_point.self.jac0->self._compute_jacobian(jac_eq0, jac_ineq0, s0)
A:scipy.optimize._trustregion_constr.tr_interior_point.x->BarrierSubproblem(x0, s0, fun, grad, lagr_hess, n_vars, n_ineq, n_eq, constr, jac, barrier_parameter, tolerance, enforce_feasibility, stop_criteria, xtol, fun0, grad0, constr_ineq0, jac_ineq0, constr_eq0, jac_eq0).get_variables(z)
A:scipy.optimize._trustregion_constr.tr_interior_point.s->self.get_slack(z)
A:scipy.optimize._trustregion_constr.tr_interior_point.f->self.fun(x)
A:scipy.optimize._trustregion_constr.tr_interior_point.(c_eq, c_ineq)->self.constr(x)
A:scipy.optimize._trustregion_constr.tr_interior_point.diag_elements->numpy.hstack((np.ones(self.n_vars), s))
A:scipy.optimize._trustregion_constr.tr_interior_point.g->self.grad(x)
A:scipy.optimize._trustregion_constr.tr_interior_point.(J_eq, J_ineq)->self.jac(x)
A:scipy.optimize._trustregion_constr.tr_interior_point.J_eq->J_eq.toarray().toarray()
A:scipy.optimize._trustregion_constr.tr_interior_point.J_ineq->J_ineq.toarray().toarray()
A:scipy.optimize._trustregion_constr.tr_interior_point.S->numpy.diag(s)
A:scipy.optimize._trustregion_constr.tr_interior_point.zeros->numpy.zeros((self.n_eq, self.n_ineq))
A:scipy.optimize._trustregion_constr.tr_interior_point.J_aux->scipy.sparse.vstack([J_eq, J_ineq], 'csr')
A:scipy.optimize._trustregion_constr.tr_interior_point.new_indices->numpy.empty(size)
A:scipy.optimize._trustregion_constr.tr_interior_point.new_data->numpy.empty(size)
A:scipy.optimize._trustregion_constr.tr_interior_point.mask->numpy.full(size, False, bool)
A:scipy.optimize._trustregion_constr.tr_interior_point.J->scipy.sparse.csr_matrix((new_data, new_indices, new_indptr), (n_eq + n_ineq, n_vars + n_ineq))
A:scipy.optimize._trustregion_constr.tr_interior_point.Hx->self.lagrangian_hessian_x(z, v)
A:scipy.optimize._trustregion_constr.tr_interior_point.S_Hs_S->self.lagrangian_hessian_s(z, v)
A:scipy.optimize._trustregion_constr.tr_interior_point.vec_x->self.get_variables(vec)
A:scipy.optimize._trustregion_constr.tr_interior_point.vec_s->self.get_slack(vec)
A:scipy.optimize._trustregion_constr.tr_interior_point.enforce_feasibility->numpy.zeros(n_ineq, bool)
A:scipy.optimize._trustregion_constr.tr_interior_point.s0->numpy.maximum(-1.5 * constr_ineq0, np.ones(n_ineq))
A:scipy.optimize._trustregion_constr.tr_interior_point.subprob->BarrierSubproblem(x0, s0, fun, grad, lagr_hess, n_vars, n_ineq, n_eq, constr, jac, barrier_parameter, tolerance, enforce_feasibility, stop_criteria, xtol, fun0, grad0, constr_ineq0, jac_ineq0, constr_eq0, jac_eq0)
A:scipy.optimize._trustregion_constr.tr_interior_point.z->numpy.hstack((x0, s0))
A:scipy.optimize._trustregion_constr.tr_interior_point.trust_lb->numpy.hstack((np.full(subprob.n_vars, -np.inf), np.full(subprob.n_ineq, -BOUNDARY_PARAMETER)))
A:scipy.optimize._trustregion_constr.tr_interior_point.trust_ub->numpy.full(subprob.n_vars + subprob.n_ineq, np.inf)
A:scipy.optimize._trustregion_constr.tr_interior_point.(z, state)->equality_constrained_sqp(subprob.function_and_constraints, subprob.gradient_and_jacobian, subprob.lagrangian_hessian, z, fun0_subprob, grad0_subprob, constr0_subprob, jac0_subprob, subprob.stop_criteria, state, initial_penalty, trust_radius, factorization_method, trust_lb, trust_ub, subprob.scaling)
A:scipy.optimize._trustregion_constr.tr_interior_point.trust_radius->max(initial_trust_radius, TRUST_ENLARGEMENT * state.tr_radius)
A:scipy.optimize._trustregion_constr.tr_interior_point.(fun0_subprob, constr0_subprob)->BarrierSubproblem(x0, s0, fun, grad, lagr_hess, n_vars, n_ineq, n_eq, constr, jac, barrier_parameter, tolerance, enforce_feasibility, stop_criteria, xtol, fun0, grad0, constr_ineq0, jac_ineq0, constr_eq0, jac_eq0).function_and_constraints(z)
A:scipy.optimize._trustregion_constr.tr_interior_point.(grad0_subprob, jac0_subprob)->BarrierSubproblem(x0, s0, fun, grad, lagr_hess, n_vars, n_ineq, n_eq, constr, jac, barrier_parameter, tolerance, enforce_feasibility, stop_criteria, xtol, fun0, grad0, constr_ineq0, jac_ineq0, constr_eq0, jac_eq0).gradient_and_jacobian(z)
scipy.optimize._trustregion_constr.tr_interior_point.BarrierSubproblem(self,x0,s0,fun,grad,lagr_hess,n_vars,n_ineq,n_eq,constr,jac,barrier_parameter,tolerance,enforce_feasibility,global_stop_criteria,xtol,fun0,grad0,constr_ineq0,jac_ineq0,constr_eq0,jac_eq0)
scipy.optimize._trustregion_constr.tr_interior_point.BarrierSubproblem.__init__(self,x0,s0,fun,grad,lagr_hess,n_vars,n_ineq,n_eq,constr,jac,barrier_parameter,tolerance,enforce_feasibility,global_stop_criteria,xtol,fun0,grad0,constr_ineq0,jac_ineq0,constr_eq0,jac_eq0)
scipy.optimize._trustregion_constr.tr_interior_point.BarrierSubproblem._assemble_sparse_jacobian(self,J_eq,J_ineq,s)
scipy.optimize._trustregion_constr.tr_interior_point.BarrierSubproblem._compute_constr(self,c_ineq,c_eq,s)
scipy.optimize._trustregion_constr.tr_interior_point.BarrierSubproblem._compute_function(self,f,c_ineq,s)
scipy.optimize._trustregion_constr.tr_interior_point.BarrierSubproblem._compute_gradient(self,g)
scipy.optimize._trustregion_constr.tr_interior_point.BarrierSubproblem._compute_jacobian(self,J_eq,J_ineq,s)
scipy.optimize._trustregion_constr.tr_interior_point.BarrierSubproblem.function_and_constraints(self,z)
scipy.optimize._trustregion_constr.tr_interior_point.BarrierSubproblem.get_slack(self,z)
scipy.optimize._trustregion_constr.tr_interior_point.BarrierSubproblem.get_variables(self,z)
scipy.optimize._trustregion_constr.tr_interior_point.BarrierSubproblem.gradient_and_jacobian(self,z)
scipy.optimize._trustregion_constr.tr_interior_point.BarrierSubproblem.lagrangian_hessian(self,z,v)
scipy.optimize._trustregion_constr.tr_interior_point.BarrierSubproblem.lagrangian_hessian_s(self,z,v)
scipy.optimize._trustregion_constr.tr_interior_point.BarrierSubproblem.lagrangian_hessian_x(self,z,v)
scipy.optimize._trustregion_constr.tr_interior_point.BarrierSubproblem.scaling(self,z)
scipy.optimize._trustregion_constr.tr_interior_point.BarrierSubproblem.stop_criteria(self,state,z,last_iteration_failed,optimality,constr_violation,trust_radius,penalty,cg_info)
scipy.optimize._trustregion_constr.tr_interior_point.BarrierSubproblem.update(self,barrier_parameter,tolerance)
scipy.optimize._trustregion_constr.tr_interior_point.tr_interior_point(fun,grad,lagr_hess,n_vars,n_ineq,n_eq,constr,jac,x0,fun0,grad0,constr_ineq0,jac_ineq0,constr_eq0,jac_eq0,stop_criteria,enforce_feasibility,xtol,state,initial_barrier_parameter,initial_tolerance,initial_penalty,initial_trust_radius,factorization_method)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_trustregion_constr/equality_constrained_sqp.py----------------------------------------
A:scipy.optimize._trustregion_constr.equality_constrained_sqp.(n,)->numpy.shape(x0)
A:scipy.optimize._trustregion_constr.equality_constrained_sqp.trust_lb->numpy.full(n, -np.inf)
A:scipy.optimize._trustregion_constr.equality_constrained_sqp.trust_ub->numpy.full(n, np.inf)
A:scipy.optimize._trustregion_constr.equality_constrained_sqp.x->numpy.copy(x0)
A:scipy.optimize._trustregion_constr.equality_constrained_sqp.S->scaling(x)
A:scipy.optimize._trustregion_constr.equality_constrained_sqp.(Z, LS, Y)->projections(A, factorization_method)
A:scipy.optimize._trustregion_constr.equality_constrained_sqp.H->lagr_hess(x, v)
A:scipy.optimize._trustregion_constr.equality_constrained_sqp.optimality->norm(c + A.T.dot(v), np.inf)
A:scipy.optimize._trustregion_constr.equality_constrained_sqp.dn->modified_dogleg(A, Y, b, TR_FACTOR * trust_radius, BOX_FACTOR * trust_lb, BOX_FACTOR * trust_ub)
A:scipy.optimize._trustregion_constr.equality_constrained_sqp.b_t->numpy.zeros_like(b)
A:scipy.optimize._trustregion_constr.equality_constrained_sqp.trust_radius_t->numpy.sqrt(trust_radius ** 2 - np.linalg.norm(dn) ** 2)
A:scipy.optimize._trustregion_constr.equality_constrained_sqp.(dt, cg_info)->projected_cg(H, c_t, Z, Y, b_t, trust_radius_t, lb_t, ub_t)
A:scipy.optimize._trustregion_constr.equality_constrained_sqp.vpred->max(1e-16, vpred)
A:scipy.optimize._trustregion_constr.equality_constrained_sqp.penalty->max(penalty, new_penalty)
A:scipy.optimize._trustregion_constr.equality_constrained_sqp.(f_next, b_next)->fun_and_constr(x_next)
A:scipy.optimize._trustregion_constr.equality_constrained_sqp.(_, t, intersect)->box_intersections(d, y, trust_lb, trust_ub)
A:scipy.optimize._trustregion_constr.equality_constrained_sqp.(f_soc, b_soc)->fun_and_constr(x_soc)
A:scipy.optimize._trustregion_constr.equality_constrained_sqp.trust_radius->max(TRUST_ENLARGEMENT_FACTOR_S * norm(d), trust_radius)
A:scipy.optimize._trustregion_constr.equality_constrained_sqp.(c, A)->grad_and_jac(x)
scipy.optimize._trustregion_constr.equality_constrained_sqp.default_scaling(x)
scipy.optimize._trustregion_constr.equality_constrained_sqp.equality_constrained_sqp(fun_and_constr,grad_and_jac,lagr_hess,x0,fun0,grad0,constr0,jac0,stop_criteria,state,initial_penalty,initial_trust_radius,factorization_method,trust_lb=None,trust_ub=None,scaling=default_scaling)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_trustregion_constr/canonical_constraint.py----------------------------------------
A:scipy.optimize._trustregion_constr.canonical_constraint.empty_fun->numpy.empty(0)
A:scipy.optimize._trustregion_constr.canonical_constraint.empty_jac->numpy.empty((0, n))
A:scipy.optimize._trustregion_constr.canonical_constraint.empty_hess->scipy.sparse.csr_matrix((n, n))
A:scipy.optimize._trustregion_constr.canonical_constraint.(eq_all, ineq_all)->zip(*[c.jac(x) for c in canonical_constraints])
A:scipy.optimize._trustregion_constr.canonical_constraint.result->numpy.zeros_like(p)
A:scipy.optimize._trustregion_constr.canonical_constraint.n_eq->sum((c.n_eq for c in canonical_constraints))
A:scipy.optimize._trustregion_constr.canonical_constraint.n_ineq->numpy.sum(finite_lb)
A:scipy.optimize._trustregion_constr.canonical_constraint.keep_feasible->numpy.hstack((keep_feasible[less], keep_feasible[greater], keep_feasible[interval], keep_feasible[interval]))
A:scipy.optimize._trustregion_constr.canonical_constraint.v->numpy.zeros_like(lb)
A:scipy.optimize._trustregion_constr.canonical_constraint.f->cfun.fun(x)
A:scipy.optimize._trustregion_constr.canonical_constraint.J->cfun.jac(x)
A:scipy.optimize._trustregion_constr.canonical_constraint.ineq->numpy.vstack((le, ge, il, ig))
A:scipy.optimize._trustregion_constr.canonical_constraint.empty->numpy.empty((0, n))
scipy.optimize._trustregion_constr.canonical_constraint.CanonicalConstraint(self,n_eq,n_ineq,fun,jac,hess,keep_feasible)
scipy.optimize._trustregion_constr.canonical_constraint.CanonicalConstraint.__init__(self,n_eq,n_ineq,fun,jac,hess,keep_feasible)
scipy.optimize._trustregion_constr.canonical_constraint.CanonicalConstraint._equal_to_canonical(cls,cfun,value)
scipy.optimize._trustregion_constr.canonical_constraint.CanonicalConstraint._greater_to_canonical(cls,cfun,lb,keep_feasible)
scipy.optimize._trustregion_constr.canonical_constraint.CanonicalConstraint._interval_to_canonical(cls,cfun,lb,ub,keep_feasible)
scipy.optimize._trustregion_constr.canonical_constraint.CanonicalConstraint._less_to_canonical(cls,cfun,ub,keep_feasible)
scipy.optimize._trustregion_constr.canonical_constraint.CanonicalConstraint.concatenate(cls,canonical_constraints,sparse_jacobian)
scipy.optimize._trustregion_constr.canonical_constraint.CanonicalConstraint.empty(cls,n)
scipy.optimize._trustregion_constr.canonical_constraint.CanonicalConstraint.from_PreparedConstraint(cls,constraint)
scipy.optimize._trustregion_constr.canonical_constraint.initial_constraints_as_canonical(n,prepared_constraints,sparse_jacobian)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_trustregion_constr/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_trustregion_constr/tests/test_projections.py----------------------------------------
A:scipy.optimize._trustregion_constr.tests.test_projections.A_dense->numpy.array([[1, 2, 3, 4, 0, 5, 0, 7], [0, 8, 7, 0, 1, 5, 9, 0], [1, 0, 0, 0, 0, 1, 2, 3]])
A:scipy.optimize._trustregion_constr.tests.test_projections.A->csc_matrix(A)
A:scipy.optimize._trustregion_constr.tests.test_projections.(Z, LS, _)->projections(A, method, orth_tol=1e-18, max_refin=10)
A:scipy.optimize._trustregion_constr.tests.test_projections.x->Y.matvec(z)
A:scipy.optimize._trustregion_constr.tests.test_projections.(_, _, Y)->projections(A, method)
A:scipy.optimize._trustregion_constr.tests.test_projections.A_ext->numpy.vstack((A, x))
A:scipy.optimize._trustregion_constr.tests.test_projections.D->numpy.diag(range(1, 101))
A:scipy.optimize._trustregion_constr.tests.test_projections.A_sparse->csc_matrix(A)
A:scipy.optimize._trustregion_constr.tests.test_projections.(Z, LS, Y)->projections(A)
A:scipy.optimize._trustregion_constr.tests.test_projections.(Z_sparse, LS_sparse, Y_sparse)->projections(A_sparse)
A:scipy.optimize._trustregion_constr.tests.test_projections.z->numpy.random.normal(size=(9,))
A:scipy.optimize._trustregion_constr.tests.test_projections.D1->numpy.diag([-1.7, 1, 0.5])
A:scipy.optimize._trustregion_constr.tests.test_projections.D2->numpy.diag([1, -0.6, -0.3])
A:scipy.optimize._trustregion_constr.tests.test_projections.D3->numpy.diag([-0.3, -1.5, 2])
scipy.optimize._trustregion_constr.tests.test_projections.TestOrthogonality(TestCase)
scipy.optimize._trustregion_constr.tests.test_projections.TestOrthogonality.test_dense_matrix(self)
scipy.optimize._trustregion_constr.tests.test_projections.TestOrthogonality.test_sparse_matrix(self)
scipy.optimize._trustregion_constr.tests.test_projections.TestProjections(TestCase)
scipy.optimize._trustregion_constr.tests.test_projections.TestProjections.test_compare_dense_and_sparse(self)
scipy.optimize._trustregion_constr.tests.test_projections.TestProjections.test_compare_dense_and_sparse2(self)
scipy.optimize._trustregion_constr.tests.test_projections.TestProjections.test_iterative_refinements_dense(self)
scipy.optimize._trustregion_constr.tests.test_projections.TestProjections.test_iterative_refinements_sparse(self)
scipy.optimize._trustregion_constr.tests.test_projections.TestProjections.test_nullspace_and_least_squares_dense(self)
scipy.optimize._trustregion_constr.tests.test_projections.TestProjections.test_nullspace_and_least_squares_sparse(self)
scipy.optimize._trustregion_constr.tests.test_projections.TestProjections.test_rowspace_dense(self)
scipy.optimize._trustregion_constr.tests.test_projections.TestProjections.test_rowspace_sparse(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_trustregion_constr/tests/test_qp_subproblem.py----------------------------------------
A:scipy.optimize._trustregion_constr.tests.test_qp_subproblem.H->csc_matrix([[1, 2, 1, 3], [2, 0, 2, 4], [1, 2, 0, 2], [3, 4, 2, 0]])
A:scipy.optimize._trustregion_constr.tests.test_qp_subproblem.A->csc_matrix([[1, 0, 1, 0], [0, 1, 0, 1]])
A:scipy.optimize._trustregion_constr.tests.test_qp_subproblem.c->numpy.array([-2, -3, -3, 1])
A:scipy.optimize._trustregion_constr.tests.test_qp_subproblem.(x, lagrange_multipliers)->eqp_kktfact(H, c, A, b)
A:scipy.optimize._trustregion_constr.tests.test_qp_subproblem.(ta, tb, intersect)->box_sphere_intersections([1, 1], [-4, 4], [2, 4], [2, 4], 2, entire_line=True)
A:scipy.optimize._trustregion_constr.tests.test_qp_subproblem.b->numpy.array([-16, 2])
A:scipy.optimize._trustregion_constr.tests.test_qp_subproblem.(_, _, Y)->projections(A)
A:scipy.optimize._trustregion_constr.tests.test_qp_subproblem.newton_point->numpy.array([-1.37090909, 2.23272727, -0.49090909])
A:scipy.optimize._trustregion_constr.tests.test_qp_subproblem.x->modified_dogleg(A, Y, b, 2, [-np.inf, -np.inf, -np.inf], [np.inf, 1, np.inf])
A:scipy.optimize._trustregion_constr.tests.test_qp_subproblem.(Z, LS, Y)->projections(A)
A:scipy.optimize._trustregion_constr.tests.test_qp_subproblem.cauchy_point->numpy.array([0.11165723, 1.73068711, 0.16748585])
A:scipy.optimize._trustregion_constr.tests.test_qp_subproblem.origin->numpy.zeros_like(newton_point)
A:scipy.optimize._trustregion_constr.tests.test_qp_subproblem.(Z, _, Y)->projections(A)
A:scipy.optimize._trustregion_constr.tests.test_qp_subproblem.(x, info)->projected_cg(H, c, Z, Y, b, tol=0, ub=[np.inf, np.inf, 100, np.inf], trust_radius=trust_radius)
A:scipy.optimize._trustregion_constr.tests.test_qp_subproblem.(x_kkt, _)->eqp_kktfact(H, c, A, b)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestBoxBoundariesIntersections(TestCase)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestBoxBoundariesIntersections.test_2d_box_constraints(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestBoxBoundariesIntersections.test_2d_box_constraints_entire_line(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestBoxBoundariesIntersections.test_3d_box_constraints(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestBoxBoundariesIntersections.test_3d_box_constraints_entire_line(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestBoxSphereBoundariesIntersections(TestCase)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestBoxSphereBoundariesIntersections.test_2d_box_constraints(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestBoxSphereBoundariesIntersections.test_2d_box_constraints_entire_line(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestEQPDirectFactorization(TestCase)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestEQPDirectFactorization.test_nocedal_example(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestModifiedDogleg(TestCase)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestModifiedDogleg.test_3d_example(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestModifiedDogleg.test_cauchypoint_equalsto_newtonpoint(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestProjectCG(TestCase)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestProjectCG.test_active_box_constraints_hits_boundaries(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestProjectCG.test_active_box_constraints_hits_boundaries_infeasible_iter(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestProjectCG.test_active_box_constraints_maximum_iterations_reached(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestProjectCG.test_active_box_constraints_negative_curvature(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestProjectCG.test_compare_with_direct_fact(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestProjectCG.test_hits_boundary(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestProjectCG.test_inactive_box_constraints(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestProjectCG.test_negative_curvature(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestProjectCG.test_negative_curvature_unconstrained(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestProjectCG.test_nocedal_example(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestProjectCG.test_trust_region_barely_feasible(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestProjectCG.test_trust_region_infeasible(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestSphericalBoundariesIntersections(TestCase)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestSphericalBoundariesIntersections.test_2d_sphere_constraints(self)
scipy.optimize._trustregion_constr.tests.test_qp_subproblem.TestSphericalBoundariesIntersections.test_2d_sphere_constraints_line_intersections(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_trustregion_constr/tests/test_canonical_constraint.py----------------------------------------
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.a->numpy.random.RandomState(0).rand(m)
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.A->numpy.random.RandomState(0).rand(m, n)
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.H->scipy.optimize._trustregion_constr.canonical_constraint.CanonicalConstraint.empty(3).hess(x, None, None).toarray()
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.HT->numpy.transpose(H, (1, 2, 0))
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.user_constraint->NonlinearConstraint(fun, lb, ub, jac, hess, [True, False, False, True, False])
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.x0->numpy.array([0.5, 0.4, 0.3, 0.2])
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.prepared_constraint->PreparedConstraint(user_constraint, x0, sparse_jacobian)
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.c->scipy.optimize._trustregion_constr.canonical_constraint.CanonicalConstraint.empty(3)
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.(c_eq, c_ineq)->scipy.optimize._trustregion_constr.canonical_constraint.CanonicalConstraint.empty(3).fun(x)
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.(J_eq, J_ineq)->scipy.optimize._trustregion_constr.canonical_constraint.CanonicalConstraint.empty(3).jac(x)
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.rng->numpy.random.RandomState(0)
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.(fun, jac, hess)->create_quadratic_function(n, 5, rng)
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.f->fun(x0)
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.J->jac(x0)
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.J_eq->J_eq.toarray().toarray()
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.J_ineq->J_ineq.toarray().toarray()
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.v_eq->numpy.random.RandomState(0).rand(c.n_eq)
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.v_ineq->numpy.random.RandomState(0).rand(c.n_ineq)
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.v->numpy.zeros(5)
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.J1->J1.toarray().toarray()
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.bounds->Bounds(lb1, ub1, [False, False, True, False])
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.f2->fun(x0)
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.J2->J2.toarray().toarray()
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.nonlinear->NonlinearConstraint(fun, lb2, ub2, jac, hess, [True, False, False, True, False])
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.bounds_prepared->PreparedConstraint(bounds, x0, sparse_jacobian)
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.nonlinear_prepared->PreparedConstraint(nonlinear, x0, sparse_jacobian)
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.c1->scipy.optimize._trustregion_constr.canonical_constraint.CanonicalConstraint.from_PreparedConstraint(bounds_prepared)
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.c2->scipy.optimize._trustregion_constr.canonical_constraint.CanonicalConstraint.from_PreparedConstraint(nonlinear_prepared)
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.x->numpy.array([1, 2, 3])
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.n->len(x0)
A:scipy.optimize._trustregion_constr.tests.test_canonical_constraint.(c_eq, c_ineq, J_eq, J_ineq)->initial_constraints_as_canonical(n, [], sparse_jacobian)
scipy.optimize._trustregion_constr.tests.test_canonical_constraint.create_quadratic_function(n,m,rng)
scipy.optimize._trustregion_constr.tests.test_canonical_constraint.test_bounds_cases()
scipy.optimize._trustregion_constr.tests.test_canonical_constraint.test_concatenation()
scipy.optimize._trustregion_constr.tests.test_canonical_constraint.test_empty()
scipy.optimize._trustregion_constr.tests.test_canonical_constraint.test_initial_constraints_as_canonical()
scipy.optimize._trustregion_constr.tests.test_canonical_constraint.test_initial_constraints_as_canonical_empty()
scipy.optimize._trustregion_constr.tests.test_canonical_constraint.test_nonlinear_constraint()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_trustregion_constr/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_trustregion_constr/tests/test_report.py----------------------------------------
A:scipy.optimize._trustregion_constr.tests.test_report.bnds->Bounds(1, 2)
A:scipy.optimize._trustregion_constr.tests.test_report.x0->numpy.linspace(-5, 5, n)
A:scipy.optimize._trustregion_constr.tests.test_report.result->minimize(objective, x0=x0, method='trust-constr', constraints=cons, options=opts)
scipy.optimize._trustregion_constr.tests.test_report.test_gh10880()
scipy.optimize._trustregion_constr.tests.test_report.test_gh12922()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_highs/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_trlib/__init__.py----------------------------------------
scipy.optimize._trlib.__init__.get_trlib_quadratic_subproblem(tol_rel_i=-2.0,tol_rel_b=-3.0,disp=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_shgo_lib/triangulation.py----------------------------------------
A:scipy.optimize._shgo_lib.triangulation.self.V->VertexCache(func, func_args, bounds, g_cons, g_args)
A:scipy.optimize._shgo_lib.triangulation.self.hgr->self.C0.homology_group_rank()
A:scipy.optimize._shgo_lib.triangulation.origin->list(np.zeros(dim, dtype=int))
A:scipy.optimize._shgo_lib.triangulation.supremum->tuple(v.x)
A:scipy.optimize._shgo_lib.triangulation.origintuple->tuple(origin)
A:scipy.optimize._shgo_lib.triangulation.supremumtuple->tuple(supremum)
A:scipy.optimize._shgo_lib.triangulation.self.C0->Cell(0, 0, origin, supremum)
A:scipy.optimize._shgo_lib.triangulation.xi_t->tuple(xi)
A:scipy.optimize._shgo_lib.triangulation.i2_parents->copy.copy(i_parents)
A:scipy.optimize._shgo_lib.triangulation.xi2->copy.copy(xi)
A:scipy.optimize._shgo_lib.triangulation.xi2_t->tuple(xi2)
A:scipy.optimize._shgo_lib.triangulation.x_parents2->copy.copy(x_parents)
A:scipy.optimize._shgo_lib.triangulation.self.centroid->list((np.array(self.origin) + np.array(self.supremum)) / 2.0)
A:scipy.optimize._shgo_lib.triangulation.self.structure->numpy.zeros([2 ** self.dim, 2 ** self.dim], dtype=int)
A:scipy.optimize._shgo_lib.triangulation.origin_new->tuple(C_i.centroid)
A:scipy.optimize._shgo_lib.triangulation.v_o->numpy.array(origin)
A:scipy.optimize._shgo_lib.triangulation.v_s->numpy.array(supremum)
A:scipy.optimize._shgo_lib.triangulation.C_new->Cell(gen, hgr, origin, supremum)
A:scipy.optimize._shgo_lib.triangulation.C_new.centroid->tuple((v_o + v_s) * 0.5)
A:scipy.optimize._shgo_lib.triangulation.v_x->numpy.array(v.x)
A:scipy.optimize._shgo_lib.triangulation.vec->tuple(vec)
A:scipy.optimize._shgo_lib.triangulation.s->S()
A:scipy.optimize._shgo_lib.triangulation.S_new_l->Simplex(gen, S.hg_n, self.generation_cycle, self.dim)
A:scipy.optimize._shgo_lib.triangulation.S_new_u->Simplex(gen, S.hg_n, S.generation_cycle, self.dim)
A:scipy.optimize._shgo_lib.triangulation.x_a->numpy.array(x, dtype=float)
A:scipy.optimize._shgo_lib.triangulation.xn_a->numpy.array(vn.x, dtype=float)
A:scipy.optimize._shgo_lib.triangulation.fig->matplotlib.pyplot.figure()
A:scipy.optimize._shgo_lib.triangulation.ax->matplotlib.pyplot.figure().add_subplot(111, projection='3d')
A:scipy.optimize._shgo_lib.triangulation.self.hg_n->sum((1 for v in self.C if v.minimiser()))
A:scipy.optimize._shgo_lib.triangulation.self.order->sum(x)
A:scipy.optimize._shgo_lib.triangulation.self.f->func(x_a, *func_args)
A:scipy.optimize._shgo_lib.triangulation.self.nn->set()
A:scipy.optimize._shgo_lib.triangulation.self._min->all((self.f < v.f for v in self.nn))
A:scipy.optimize._shgo_lib.triangulation.xval->Vertex(x, bounds=self.bounds, func=self.func, func_args=self.func_args, g_cons=self.g_cons, g_cons_args=self.g_cons_args)
scipy.optimize._shgo_lib.triangulation.Cell(self,p_gen,p_hgr,origin,supremum)
scipy.optimize._shgo_lib.triangulation.Cell.__init__(self,p_gen,p_hgr,origin,supremum)
scipy.optimize._shgo_lib.triangulation.Complex(self,dim,func,func_args=(),symmetry=False,bounds=None,g_cons=None,g_args=())
scipy.optimize._shgo_lib.triangulation.Complex.__init__(self,dim,func,func_args=(),symmetry=False,bounds=None,g_cons=None,g_args=())
scipy.optimize._shgo_lib.triangulation.Complex.add_centroid(self)
scipy.optimize._shgo_lib.triangulation.Complex.construct_hypercube(self,origin,supremum,gen,hgr,printout=False)
scipy.optimize._shgo_lib.triangulation.Complex.graph_map(self)
scipy.optimize._shgo_lib.triangulation.Complex.incidence(self)
scipy.optimize._shgo_lib.triangulation.Complex.n_cube(self,dim,symmetry=False,printout=False)
scipy.optimize._shgo_lib.triangulation.Complex.perm(self,i_parents,x_parents,xi)
scipy.optimize._shgo_lib.triangulation.Complex.perm_symmetry(self,i_s,x_parents,xi)
scipy.optimize._shgo_lib.triangulation.Complex.plot_complex(self)
scipy.optimize._shgo_lib.triangulation.Complex.split_generation(self)
scipy.optimize._shgo_lib.triangulation.Complex.split_simplex_symmetry(self,S,gen)
scipy.optimize._shgo_lib.triangulation.Complex.sub_generate_cell(self,C_i,gen)
scipy.optimize._shgo_lib.triangulation.Simplex(self,p_gen,p_hgr,generation_cycle,dim)
scipy.optimize._shgo_lib.triangulation.Simplex.__init__(self,p_gen,p_hgr,generation_cycle,dim)
scipy.optimize._shgo_lib.triangulation.Vertex(self,x,bounds=None,func=None,func_args=(),g_cons=None,g_cons_args=(),nn=None,index=None)
scipy.optimize._shgo_lib.triangulation.Vertex.__hash__(self)
scipy.optimize._shgo_lib.triangulation.Vertex.__init__(self,x,bounds=None,func=None,func_args=(),g_cons=None,g_cons_args=(),nn=None,index=None)
scipy.optimize._shgo_lib.triangulation.Vertex.connect(self,v)
scipy.optimize._shgo_lib.triangulation.Vertex.disconnect(self,v)
scipy.optimize._shgo_lib.triangulation.Vertex.minimiser(self)
scipy.optimize._shgo_lib.triangulation.Vertex.print_out(self)
scipy.optimize._shgo_lib.triangulation.VertexCache(self,func,func_args=(),bounds=None,g_cons=None,g_cons_args=(),indexed=True)
scipy.optimize._shgo_lib.triangulation.VertexCache.__getitem__(self,x,indexed=True)
scipy.optimize._shgo_lib.triangulation.VertexCache.__init__(self,func,func_args=(),bounds=None,g_cons=None,g_cons_args=(),indexed=True)
scipy.optimize._shgo_lib.triangulation.VertexGroup(self,p_gen,p_hgr)
scipy.optimize._shgo_lib.triangulation.VertexGroup.__init__(self,p_gen,p_hgr)
scipy.optimize._shgo_lib.triangulation.VertexGroup.add_vertex(self,V)
scipy.optimize._shgo_lib.triangulation.VertexGroup.homology_group_differential(self)
scipy.optimize._shgo_lib.triangulation.VertexGroup.homology_group_rank(self)
scipy.optimize._shgo_lib.triangulation.VertexGroup.polytopial_sperner_lemma(self)
scipy.optimize._shgo_lib.triangulation.VertexGroup.print_out(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_shgo_lib/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/cython_optimize/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_lsq/dogbox.py----------------------------------------
A:scipy.optimize._lsq.dogbox.x_free->x.ravel().copy()
A:scipy.optimize._lsq.dogbox.lb_total->numpy.maximum(lb_centered, -tr_bounds)
A:scipy.optimize._lsq.dogbox.ub_total->numpy.minimum(ub_centered, tr_bounds)
A:scipy.optimize._lsq.dogbox.orig_l->numpy.equal(lb_total, lb_centered)
A:scipy.optimize._lsq.dogbox.orig_u->numpy.equal(ub_total, ub_centered)
A:scipy.optimize._lsq.dogbox.tr_l->numpy.equal(lb_total, -tr_bounds)
A:scipy.optimize._lsq.dogbox.tr_u->numpy.equal(ub_total, tr_bounds)
A:scipy.optimize._lsq.dogbox.(lb_total, ub_total, orig_l, orig_u, tr_l, tr_u)->find_intersection(x, tr_bounds, lb, ub)
A:scipy.optimize._lsq.dogbox.bound_hits->numpy.zeros_like(x, dtype=int)
A:scipy.optimize._lsq.dogbox.(to_bounds, _)->step_size_to_bound(np.zeros_like(x), -g, lb_total, ub_total)
A:scipy.optimize._lsq.dogbox.(step_size, hits)->step_size_to_bound(cauchy_step, step_diff, lb_total, ub_total)
A:scipy.optimize._lsq.dogbox.tr_hit->numpy.any((hits < 0) & tr_l | (hits > 0) & tr_u)
A:scipy.optimize._lsq.dogbox.f_true->f.copy()
A:scipy.optimize._lsq.dogbox.rho->loss_function(f)
A:scipy.optimize._lsq.dogbox.(J, f)->scale_for_robust_loss_function(J, f, rho)
A:scipy.optimize._lsq.dogbox.g->compute_grad(J, f)
A:scipy.optimize._lsq.dogbox.(scale, scale_inv)->compute_jac_scale(J, scale_inv)
A:scipy.optimize._lsq.dogbox.Delta->norm(x0 * scale_inv, ord=np.inf)
A:scipy.optimize._lsq.dogbox.on_bound->numpy.zeros_like(x0, dtype=int)
A:scipy.optimize._lsq.dogbox.step->numpy.empty_like(x0)
A:scipy.optimize._lsq.dogbox.g_full->compute_grad(J, f).copy()
A:scipy.optimize._lsq.dogbox.g_norm->norm(g, ord=np.inf)
A:scipy.optimize._lsq.dogbox.(a, b)->build_quadratic_1d(Jop, g, -g)
A:scipy.optimize._lsq.dogbox.Jop->aslinearoperator(J)
A:scipy.optimize._lsq.dogbox.lsmr_op->lsmr_operator(Jop, scale, active_set)
A:scipy.optimize._lsq.dogbox.(step_free, on_bound_free, tr_hit)->dogleg_step(x_free, newton_step, g_free, a, b, tr_bounds, lb_free, ub_free)
A:scipy.optimize._lsq.dogbox.x_new->numpy.clip(x + step, lb, ub)
A:scipy.optimize._lsq.dogbox.f_new->fun(x_new)
A:scipy.optimize._lsq.dogbox.step_h_norm->norm(step * scale_inv, ord=np.inf)
A:scipy.optimize._lsq.dogbox.cost_new->loss_function(f_new, cost_only=True)
A:scipy.optimize._lsq.dogbox.(Delta, ratio)->update_tr_radius(Delta, actual_reduction, predicted_reduction, step_h_norm, tr_hit)
A:scipy.optimize._lsq.dogbox.step_norm->norm(step)
A:scipy.optimize._lsq.dogbox.termination_status->check_termination(actual_reduction, cost, step_norm, norm(x), ratio, ftol, xtol)
A:scipy.optimize._lsq.dogbox.J->jac(x, f)
scipy.optimize._lsq.dogbox.dogbox(fun,jac,x0,f0,J0,lb,ub,ftol,xtol,gtol,max_nfev,x_scale,loss_function,tr_solver,tr_options,verbose)
scipy.optimize._lsq.dogbox.dogleg_step(x,newton_step,g,a,b,tr_bounds,lb,ub)
scipy.optimize._lsq.dogbox.find_intersection(x,tr_bounds,lb,ub)
scipy.optimize._lsq.dogbox.lsmr_operator(Jop,d,active_set)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_lsq/common.py----------------------------------------
A:scipy.optimize._lsq.common.a->numpy.dot(v, v)
A:scipy.optimize._lsq.common.b->numpy.dot(g, s)
A:scipy.optimize._lsq.common.d->numpy.sqrt(b * b - a * c)
A:scipy.optimize._lsq.common.p_norm->norm(suf / denom)
A:scipy.optimize._lsq.common.(phi, phi_prime)->phi_and_derivative(alpha, suf, s, Delta)
A:scipy.optimize._lsq.common.alpha->max(0.001 * alpha_upper, (alpha_lower * alpha_upper) ** 0.5)
A:scipy.optimize._lsq.common.alpha_lower->max(alpha_lower, alpha - ratio)
A:scipy.optimize._lsq.common.(R, lower)->cho_factor(B)
A:scipy.optimize._lsq.common.coeffs->numpy.array([-b + d, 2 * (a - c + f), 6 * b, 2 * (-a + c + f), -b - d])
A:scipy.optimize._lsq.common.t->numpy.remainder(y[mask] - lb[mask], 2 * d[mask])
A:scipy.optimize._lsq.common.i->numpy.argmin(value)
A:scipy.optimize._lsq.common.v->numpy.ones_like(x)
A:scipy.optimize._lsq.common.u->left_multiplied_operator(J, d).dot(s0)
A:scipy.optimize._lsq.common.min_index->numpy.argmin(y)
A:scipy.optimize._lsq.common.Js->left_multiplied_operator(J, d).dot(s.T)
A:scipy.optimize._lsq.common.q->numpy.sum(Js ** 2, axis=0)
A:scipy.optimize._lsq.common.l->numpy.dot(s, g)
A:scipy.optimize._lsq.common.non_zero->numpy.nonzero(s)
A:scipy.optimize._lsq.common.steps->numpy.empty_like(x)
A:scipy.optimize._lsq.common.steps[non_zero]->numpy.maximum((lb - x)[non_zero] / s_non_zero, (ub - x)[non_zero] / s_non_zero)
A:scipy.optimize._lsq.common.min_step->numpy.min(steps)
A:scipy.optimize._lsq.common.active->find_active_constraints(x, lb, ub, rstep)
A:scipy.optimize._lsq.common.x_new->y.copy().copy()
A:scipy.optimize._lsq.common.lower_mask->numpy.equal(active, -1)
A:scipy.optimize._lsq.common.upper_mask->numpy.equal(active, 1)
A:scipy.optimize._lsq.common.x_new[lower_mask]->numpy.nextafter(lb[lower_mask], ub[lower_mask])
A:scipy.optimize._lsq.common.x_new[upper_mask]->numpy.nextafter(ub[upper_mask], lb[upper_mask])
A:scipy.optimize._lsq.common.dv->numpy.zeros_like(x)
A:scipy.optimize._lsq.common.lb_finite->numpy.isfinite(lb)
A:scipy.optimize._lsq.common.ub_finite->numpy.isfinite(ub)
A:scipy.optimize._lsq.common.x->y.copy()
A:scipy.optimize._lsq.common.g_negative->numpy.zeros_like(y, dtype=bool)
A:scipy.optimize._lsq.common.x[mask]->numpy.minimum(y[mask], 2 * ub[mask] - y[mask])
A:scipy.optimize._lsq.common.g->numpy.ones_like(y)
A:scipy.optimize._lsq.common.cost_reduction->'{0:^15.2e}'.format(cost_reduction)
A:scipy.optimize._lsq.common.step_norm->'{0:^15.2e}'.format(step_norm)
A:scipy.optimize._lsq.common.scale_inv->numpy.maximum(scale_inv, scale_inv_old)
A:scipy.optimize._lsq.common.J->left_multiplied_operator(J, d)
scipy.optimize._lsq.common.CL_scaling_vector(x,g,lb,ub)
scipy.optimize._lsq.common.build_quadratic_1d(J,g,s,diag=None,s0=None)
scipy.optimize._lsq.common.check_termination(dF,F,dx_norm,x_norm,ratio,ftol,xtol)
scipy.optimize._lsq.common.compute_grad(J,f)
scipy.optimize._lsq.common.compute_jac_scale(J,scale_inv_old=None)
scipy.optimize._lsq.common.evaluate_quadratic(J,g,s,diag=None)
scipy.optimize._lsq.common.find_active_constraints(x,lb,ub,rtol=1e-10)
scipy.optimize._lsq.common.in_bounds(x,lb,ub)
scipy.optimize._lsq.common.intersect_trust_region(x,s,Delta)
scipy.optimize._lsq.common.left_multiplied_operator(J,d)
scipy.optimize._lsq.common.left_multiply(J,d,copy=True)
scipy.optimize._lsq.common.make_strictly_feasible(x,lb,ub,rstep=1e-10)
scipy.optimize._lsq.common.minimize_quadratic_1d(a,b,lb,ub,c=0)
scipy.optimize._lsq.common.print_header_linear()
scipy.optimize._lsq.common.print_header_nonlinear()
scipy.optimize._lsq.common.print_iteration_linear(iteration,cost,cost_reduction,step_norm,optimality)
scipy.optimize._lsq.common.print_iteration_nonlinear(iteration,nfev,cost,cost_reduction,step_norm,optimality)
scipy.optimize._lsq.common.reflective_transformation(y,lb,ub)
scipy.optimize._lsq.common.regularized_lsq_operator(J,diag)
scipy.optimize._lsq.common.right_multiplied_operator(J,d)
scipy.optimize._lsq.common.right_multiply(J,d,copy=True)
scipy.optimize._lsq.common.scale_for_robust_loss_function(J,f,rho)
scipy.optimize._lsq.common.solve_lsq_trust_region(n,m,uf,s,V,Delta,initial_alpha=None,rtol=0.01,max_iter=10)
scipy.optimize._lsq.common.solve_trust_region_2d(B,g,Delta)
scipy.optimize._lsq.common.step_size_to_bound(x,s,lb,ub)
scipy.optimize._lsq.common.update_tr_radius(Delta,actual_reduction,predicted_reduction,step_norm,bound_hit)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_lsq/trf_linear.py----------------------------------------
A:scipy.optimize._lsq.trf_linear.R->numpy.vstack((R, np.zeros((n - m, n))))
A:scipy.optimize._lsq.trf_linear.v->QTb.copy()
A:scipy.optimize._lsq.trf_linear.abs_diag_R->numpy.abs(np.diag(R))
A:scipy.optimize._lsq.trf_linear.(nns,)->numpy.nonzero(abs_diag_R > threshold)
A:scipy.optimize._lsq.trf_linear.x->make_strictly_feasible(x + step, lb, ub, rstep=0)
A:scipy.optimize._lsq.trf_linear.x[perm[nns]]->solve_triangular(R, v)
A:scipy.optimize._lsq.trf_linear.(x_new, _)->reflective_transformation(x + theta * alpha * p, lb, ub)
A:scipy.optimize._lsq.trf_linear.active->find_active_constraints(x_new, lb, ub)
A:scipy.optimize._lsq.trf_linear.x_new->make_strictly_feasible(x_new, lb, ub, rstep=0)
A:scipy.optimize._lsq.trf_linear.(p_stride, hits)->step_size_to_bound(x, p, lb, ub)
A:scipy.optimize._lsq.trf_linear.r_h->numpy.copy(p_h)
A:scipy.optimize._lsq.trf_linear.(r_stride_u, _)->step_size_to_bound(x_on_bound, r, lb, ub)
A:scipy.optimize._lsq.trf_linear.(a, b, c)->build_quadratic_1d(A_h, g_h, r_h, s0=p_h, diag=c_h)
A:scipy.optimize._lsq.trf_linear.(r_stride, r_value)->minimize_quadratic_1d(a, b, r_stride_l, r_stride_u, c=c)
A:scipy.optimize._lsq.trf_linear.p_value->evaluate_quadratic(A_h, g_h, p_h, diag=c_h)
A:scipy.optimize._lsq.trf_linear.(ag_stride_u, _)->step_size_to_bound(x, ag, lb, ub)
A:scipy.optimize._lsq.trf_linear.(a, b)->build_quadratic_1d(A_h, g_h, ag_h, diag=c_h)
A:scipy.optimize._lsq.trf_linear.(ag_stride, ag_value)->minimize_quadratic_1d(a, b, 0, ag_stride_u)
A:scipy.optimize._lsq.trf_linear.(x, _)->reflective_transformation(x_lsq, lb, ub)
A:scipy.optimize._lsq.trf_linear.(QT, R, perm)->qr(A, mode='economic', pivoting=True)
A:scipy.optimize._lsq.trf_linear.QTr->numpy.zeros(n)
A:scipy.optimize._lsq.trf_linear.k->min(m, n)
A:scipy.optimize._lsq.trf_linear.r_aug->numpy.zeros(m + n)
A:scipy.optimize._lsq.trf_linear.g->compute_grad(A, r)
A:scipy.optimize._lsq.trf_linear.(v, dv)->CL_scaling_vector(x, g, lb, ub)
A:scipy.optimize._lsq.trf_linear.g_norm->norm(g_scaled, ord=np.inf)
A:scipy.optimize._lsq.trf_linear.A_h->right_multiplied_operator(A, d)
A:scipy.optimize._lsq.trf_linear.QTr[:k]->QT.dot(r)
A:scipy.optimize._lsq.trf_linear.lsmr_op->regularized_lsq_operator(A_h, diag_root_h)
A:scipy.optimize._lsq.trf_linear.lsmr_tol->max(EPS, min(0.1, eta * g_norm))
A:scipy.optimize._lsq.trf_linear.p_dot_g->numpy.dot(p, g)
A:scipy.optimize._lsq.trf_linear.step->select_step(x, A_h, g_h, diag_h, p, p_h, d, lb, ub, theta)
A:scipy.optimize._lsq.trf_linear.(x, step, cost_change)->backtracking(A, g, x, p, theta, p_dot_g, lb, ub)
A:scipy.optimize._lsq.trf_linear.step_norm->norm(step)
A:scipy.optimize._lsq.trf_linear.active_mask->find_active_constraints(x, lb, ub, rtol=tol)
scipy.optimize._lsq.trf_linear.backtracking(A,g,x,p,theta,p_dot_g,lb,ub)
scipy.optimize._lsq.trf_linear.regularized_lsq_with_qr(m,n,R,QTb,perm,diag,copy_R=True)
scipy.optimize._lsq.trf_linear.select_step(x,A_h,g_h,c_h,p,p_h,d,lb,ub,theta)
scipy.optimize._lsq.trf_linear.trf_linear(A,b,x_lsq,lb,ub,tol,lsq_solver,lsmr_tol,max_iter,verbose,*,lsmr_maxiter=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_lsq/bvls.py----------------------------------------
A:scipy.optimize._lsq.bvls.g_kkt[free_set]->numpy.abs(g[free_set])
A:scipy.optimize._lsq.bvls.x->x_lsq.copy()
A:scipy.optimize._lsq.bvls.on_bound->numpy.zeros(n)
A:scipy.optimize._lsq.bvls.(free_set,)->numpy.nonzero(free_set)
A:scipy.optimize._lsq.bvls.g->A.T.dot(r)
A:scipy.optimize._lsq.bvls.optimality->compute_kkt_optimality(g, on_bound)
A:scipy.optimize._lsq.bvls.x_free_old->x_free.copy()
A:scipy.optimize._lsq.bvls.step_norm->norm(x_free - x_free_old)
A:scipy.optimize._lsq.bvls.move_to_free->numpy.argmax(g * on_bound)
A:scipy.optimize._lsq.bvls.(lbv,)->numpy.nonzero(z < lb_free)
A:scipy.optimize._lsq.bvls.(ubv,)->numpy.nonzero(z > ub_free)
A:scipy.optimize._lsq.bvls.v->numpy.hstack((lbv, ubv))
A:scipy.optimize._lsq.bvls.i->numpy.argmin(alphas)
scipy.optimize._lsq.bvls.bvls(A,b,x_lsq,lb,ub,tol,max_iter,verbose,rcond=None)
scipy.optimize._lsq.bvls.compute_kkt_optimality(g,on_bound)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_lsq/trf.py----------------------------------------
A:scipy.optimize._lsq.trf.p_value->evaluate_quadratic(J_h, g_h, p_h, diag=diag_h)
A:scipy.optimize._lsq.trf.(p_stride, hits)->step_size_to_bound(x, p, lb, ub)
A:scipy.optimize._lsq.trf.r_h->numpy.copy(p_h)
A:scipy.optimize._lsq.trf.(_, to_tr)->intersect_trust_region(p_h, r_h, Delta)
A:scipy.optimize._lsq.trf.(to_bound, _)->step_size_to_bound(x, ag, lb, ub)
A:scipy.optimize._lsq.trf.r_stride->min(to_bound, to_tr)
A:scipy.optimize._lsq.trf.(a, b, c)->build_quadratic_1d(J_h, g_h, r_h, s0=p_h, diag=diag_h)
A:scipy.optimize._lsq.trf.(r_stride, r_value)->minimize_quadratic_1d(a, b, r_stride_l, r_stride_u, c=c)
A:scipy.optimize._lsq.trf.(a, b)->build_quadratic_1d(J_h, g_h, -g_h)
A:scipy.optimize._lsq.trf.(ag_stride, ag_value)->minimize_quadratic_1d(a, b, 0, ag_stride)
A:scipy.optimize._lsq.trf.x->x0.copy()
A:scipy.optimize._lsq.trf.f_true->f.copy()
A:scipy.optimize._lsq.trf.rho->loss_function(f)
A:scipy.optimize._lsq.trf.(J, f)->scale_for_robust_loss_function(J, f, rho)
A:scipy.optimize._lsq.trf.g->compute_grad(J, f)
A:scipy.optimize._lsq.trf.(scale, scale_inv)->compute_jac_scale(J, scale_inv)
A:scipy.optimize._lsq.trf.(v, dv)->CL_scaling_vector(x, g, lb, ub)
A:scipy.optimize._lsq.trf.Delta->norm(x0 * scale_inv)
A:scipy.optimize._lsq.trf.g_norm->norm(g, ord=np.inf)
A:scipy.optimize._lsq.trf.f_augmented->numpy.zeros(m + n)
A:scipy.optimize._lsq.trf.J_augmented->numpy.empty((m + n, n))
A:scipy.optimize._lsq.trf.regularize->tr_options.pop('regularize', True)
A:scipy.optimize._lsq.trf.J_augmented[m:]->numpy.diag(diag_h ** 0.5)
A:scipy.optimize._lsq.trf.(U, s, V)->svd(J_h, full_matrices=False)
A:scipy.optimize._lsq.trf.uf->U.T.dot(f)
A:scipy.optimize._lsq.trf.J_h->right_multiplied_operator(J, d)
A:scipy.optimize._lsq.trf.lsmr_op->regularized_lsq_operator(J_h, (diag_h + reg_term) ** 0.5)
A:scipy.optimize._lsq.trf.(S, _)->qr(S, mode='economic')
A:scipy.optimize._lsq.trf.JS->right_multiplied_operator(J, d).dot(S)
A:scipy.optimize._lsq.trf.g_S->S.T.dot(g_h)
A:scipy.optimize._lsq.trf.theta->max(0.995, 1 - g_norm)
A:scipy.optimize._lsq.trf.(p_h, alpha, n_iter)->solve_lsq_trust_region(n, m, uf, s, V, Delta, initial_alpha=alpha)
A:scipy.optimize._lsq.trf.(p_S, _)->solve_trust_region_2d(B_S, g_S, Delta)
A:scipy.optimize._lsq.trf.p_h->S.dot(p_S)
A:scipy.optimize._lsq.trf.(step, step_h, predicted_reduction)->select_step(x, J_h, diag_h, g_h, p, p_h, d, Delta, lb, ub, theta)
A:scipy.optimize._lsq.trf.x_new->make_strictly_feasible(x + step, lb, ub, rstep=0)
A:scipy.optimize._lsq.trf.f_new->fun(x_new)
A:scipy.optimize._lsq.trf.step_h_norm->norm(step_h)
A:scipy.optimize._lsq.trf.cost_new->loss_function(f_new, cost_only=True)
A:scipy.optimize._lsq.trf.(Delta_new, ratio)->update_tr_radius(Delta, actual_reduction, predicted_reduction, step_h_norm, step_h_norm > 0.95 * Delta)
A:scipy.optimize._lsq.trf.step_norm->norm(step)
A:scipy.optimize._lsq.trf.termination_status->check_termination(actual_reduction, cost, step_norm, norm(x), ratio, ftol, xtol)
A:scipy.optimize._lsq.trf.J->jac(x, f)
A:scipy.optimize._lsq.trf.active_mask->numpy.zeros_like(x)
A:scipy.optimize._lsq.trf.damp->tr_options.pop('damp', 0.0)
A:scipy.optimize._lsq.trf.B_S->numpy.dot(JS.T, JS)
A:scipy.optimize._lsq.trf.(step_h, alpha, n_iter)->solve_lsq_trust_region(n, m, uf, s, V, Delta, initial_alpha=alpha)
A:scipy.optimize._lsq.trf.step_h->S.dot(p_S)
scipy.optimize._lsq.trf.select_step(x,J_h,diag_h,g_h,p,p_h,d,Delta,lb,ub,theta)
scipy.optimize._lsq.trf.trf(fun,jac,x0,f0,J0,lb,ub,ftol,xtol,gtol,max_nfev,x_scale,loss_function,tr_solver,tr_options,verbose)
scipy.optimize._lsq.trf.trf_bounds(fun,jac,x0,f0,J0,lb,ub,ftol,xtol,gtol,max_nfev,x_scale,loss_function,tr_solver,tr_options,verbose)
scipy.optimize._lsq.trf.trf_no_bounds(fun,jac,x0,f0,J0,ftol,xtol,gtol,max_nfev,x_scale,loss_function,tr_solver,tr_options,verbose)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_lsq/lsq_linear.py----------------------------------------
A:scipy.optimize._lsq.lsq_linear.lb->numpy.resize(lb, n)
A:scipy.optimize._lsq.lsq_linear.ub->numpy.resize(ub, n)
A:scipy.optimize._lsq.lsq_linear.A->numpy.atleast_2d(np.asarray(A))
A:scipy.optimize._lsq.lsq_linear.b->numpy.atleast_1d(b)
A:scipy.optimize._lsq.lsq_linear.(lb, ub)->prepare_bounds(bounds, n)
A:scipy.optimize._lsq.lsq_linear.unbd_lsq->lsmr(A, b, maxiter=lsmr_maxiter, atol=first_lsmr_tol, btol=first_lsmr_tol)
A:scipy.optimize._lsq.lsq_linear.g->compute_grad(A, r)
A:scipy.optimize._lsq.lsq_linear.g_norm->norm(g, ord=np.inf)
A:scipy.optimize._lsq.lsq_linear.res->bvls(A, b, x_lsq, lb, ub, tol, max_iter, verbose)
scipy.optimize._lsq.lsq_linear.lsq_linear(A,b,bounds=(-np.inf,np.inf),method='trf',tol=1e-10,lsq_solver=None,lsmr_tol=None,max_iter=None,verbose=0,*,lsmr_maxiter=None)
scipy.optimize._lsq.lsq_linear.prepare_bounds(bounds,n)
scipy.optimize.lsq_linear(A,b,bounds=(-np.inf,np.inf),method='trf',tol=1e-10,lsq_solver=None,lsmr_tol=None,max_iter=None,verbose=0,*,lsmr_maxiter=None)
scipy.optimize.lsq_linear.prepare_bounds(bounds,n)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_lsq/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/optimize/_lsq/least_squares.py----------------------------------------
A:scipy.optimize._lsq.least_squares.(x, info, status)->scipy.optimize._minpack._lmder(fun, jac, x0, (), full_output, col_deriv, ftol, xtol, gtol, max_nfev, factor, diag)
A:scipy.optimize._lsq.least_squares.J->numpy.atleast_2d(J)
A:scipy.optimize._lsq.least_squares.g->numpy.atleast_2d(J).T.dot(f)
A:scipy.optimize._lsq.least_squares.g_norm->norm(g, ord=np.inf)
A:scipy.optimize._lsq.least_squares.njev->info.get('njev', None)
A:scipy.optimize._lsq.least_squares.active_mask->numpy.zeros_like(x0, dtype=int)
A:scipy.optimize._lsq.least_squares.lb->numpy.resize(lb, n)
A:scipy.optimize._lsq.least_squares.ub->numpy.resize(ub, n)
A:scipy.optimize._lsq.least_squares.ftol->check(ftol, 'ftol')
A:scipy.optimize._lsq.least_squares.xtol->check(xtol, 'xtol')
A:scipy.optimize._lsq.least_squares.gtol->check(gtol, 'gtol')
A:scipy.optimize._lsq.least_squares.x_scale->check_x_scale(x_scale, x0)
A:scipy.optimize._lsq.least_squares.jac_sparsity->check_jac_sparsity(jac_sparsity, m, n)
A:scipy.optimize._lsq.least_squares.rho[0]->numpy.arctan(z)
A:scipy.optimize._lsq.least_squares.IMPLEMENTED_LOSSES->dict(linear=None, huber=huber, soft_l1=soft_l1, cauchy=cauchy, arctan=arctan)
A:scipy.optimize._lsq.least_squares.rho->loss_function(f0)
A:scipy.optimize._lsq.least_squares.x0->make_strictly_feasible(x0, lb, ub)
A:scipy.optimize._lsq.least_squares.(lb, ub)->prepare_bounds(bounds, x0.shape[0])
A:scipy.optimize._lsq.least_squares.(ftol, xtol, gtol)->check_tolerance(ftol, xtol, gtol, method)
A:scipy.optimize._lsq.least_squares.f0->fun_wrapped(x0)
A:scipy.optimize._lsq.least_squares.loss_function->construct_loss_function(m, loss, f_scale)
A:scipy.optimize._lsq.least_squares.initial_cost->loss_function(f0, cost_only=True)
A:scipy.optimize._lsq.least_squares.J0->jac_wrapped(x0, f0)
A:scipy.optimize._lsq.least_squares.result->dogbox(fun_wrapped, jac_wrapped, x0, f0, J0, lb, ub, ftol, xtol, gtol, max_nfev, x_scale, loss_function, tr_solver, tr_options, verbose)
A:scipy.optimize._lsq.least_squares.tr_options->tr_options.copy().copy()
scipy.optimize._lsq.least_squares.arctan(z,rho,cost_only)
scipy.optimize._lsq.least_squares.call_minpack(fun,x0,jac,ftol,xtol,gtol,max_nfev,x_scale,diff_step)
scipy.optimize._lsq.least_squares.cauchy(z,rho,cost_only)
scipy.optimize._lsq.least_squares.check_jac_sparsity(jac_sparsity,m,n)
scipy.optimize._lsq.least_squares.check_tolerance(ftol,xtol,gtol,method)
scipy.optimize._lsq.least_squares.check_x_scale(x_scale,x0)
scipy.optimize._lsq.least_squares.construct_loss_function(m,loss,f_scale)
scipy.optimize._lsq.least_squares.huber(z,rho,cost_only)
scipy.optimize._lsq.least_squares.least_squares(fun,x0,jac='2-point',bounds=(-np.inf,np.inf),method='trf',ftol=1e-08,xtol=1e-08,gtol=1e-08,x_scale=1.0,loss='linear',f_scale=1.0,diff_step=None,tr_solver=None,tr_options={},jac_sparsity=None,max_nfev=None,verbose=0,args=(),kwargs={})
scipy.optimize._lsq.least_squares.prepare_bounds(bounds,n)
scipy.optimize._lsq.least_squares.soft_l1(z,rho,cost_only)
scipy.optimize.least_squares(fun,x0,jac='2-point',bounds=(-np.inf,np.inf),method='trf',ftol=1e-08,xtol=1e-08,gtol=1e-08,x_scale=1.0,loss='linear',f_scale=1.0,diff_step=None,tr_solver=None,tr_options={},jac_sparsity=None,max_nfev=None,verbose=0,args=(),kwargs={})
scipy.optimize.least_squares.arctan(z,rho,cost_only)
scipy.optimize.least_squares.call_minpack(fun,x0,jac,ftol,xtol,gtol,max_nfev,x_scale,diff_step)
scipy.optimize.least_squares.cauchy(z,rho,cost_only)
scipy.optimize.least_squares.check_jac_sparsity(jac_sparsity,m,n)
scipy.optimize.least_squares.check_tolerance(ftol,xtol,gtol,method)
scipy.optimize.least_squares.check_x_scale(x_scale,x0)
scipy.optimize.least_squares.construct_loss_function(m,loss,f_scale)
scipy.optimize.least_squares.huber(z,rho,cost_only)
scipy.optimize.least_squares.prepare_bounds(bounds,n)
scipy.optimize.least_squares.soft_l1(z,rho,cost_only)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_cythonized_array_utils.pyi----------------------------------------
scipy.linalg._cythonized_array_utils.bandwidth(a:NDArray[Any])->Tuple[int, int]
scipy.linalg._cythonized_array_utils.ishermitian(a:NDArray[Any],atol:None|float=...,rtol:None|float=...)->bool
scipy.linalg._cythonized_array_utils.issymmetric(a:NDArray[Any],atol:None|float=...,rtol:None|float=...)->bool
scipy.linalg.bandwidth(a:NDArray[Any])->Tuple[int, int]
scipy.linalg.ishermitian(a:NDArray[Any],atol:None|float=...,rtol:None|float=...)->bool
scipy.linalg.issymmetric(a:NDArray[Any],atol:None|float=...,rtol:None|float=...)->bool


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/decomp_qr.py----------------------------------------
scipy.linalg.decomp_qr.__dir__()
scipy.linalg.decomp_qr.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_decomp_cossin.py----------------------------------------
A:scipy.linalg._decomp_cossin.X->_asarray_validated(X, check_finite=True)
A:scipy.linalg._decomp_cossin.cplx->any([np.iscomplexobj(x) for x in [x11, x12, x21, x22]])
A:scipy.linalg._decomp_cossin.(csd, csd_lwork)->get_lapack_funcs([driver, driver + '_lwork'], [x11, x12, x21, x22])
A:scipy.linalg._decomp_cossin.lwork->_compute_lwork(csd_lwork, m=m, p=p, q=q)
A:scipy.linalg._decomp_cossin.(*_, theta, u1, u2, v1h, v2h, info)->csd(x11=x11, x12=x12, x21=x21, x22=x22, compute_u1=compute_u, compute_u2=compute_u, compute_v1t=compute_vh, compute_v2t=compute_vh, trans=False, signs=swap_sign, **lwork_args)
A:scipy.linalg._decomp_cossin.U->block_diag(u1, u2)
A:scipy.linalg._decomp_cossin.VDH->block_diag(v1h, v2h)
A:scipy.linalg._decomp_cossin.c->numpy.diag(np.cos(theta))
A:scipy.linalg._decomp_cossin.s->numpy.diag(np.sin(theta))
A:scipy.linalg._decomp_cossin.r->min(p, q, m - p, m - q)
A:scipy.linalg._decomp_cossin.Id->numpy.eye(np.max([n11, n12, n21, n22, r]), dtype=theta.dtype)
A:scipy.linalg._decomp_cossin.CS->numpy.zeros((m, m), dtype=theta.dtype)
scipy.linalg._decomp_cossin.cossin(X,p=None,q=None,separate=False,swap_sign=False,compute_u=True,compute_vh=True)
scipy.linalg.cossin(X,p=None,q=None,separate=False,swap_sign=False,compute_u=True,compute_vh=True)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/lapack.py----------------------------------------
A:scipy.linalg.lapack.p1->regex_compile('with bounds (?P<b>.*?)( and (?P<s>.*?) storage){0,1}\\n')
A:scipy.linalg.lapack.p2->regex_compile('Default: (?P<d>.*?)\\n')
A:scipy.linalg.lapack.routine.__doc__->regex_compile('Default: (?P<d>.*?)\\n').sub('Default ``\\1``\n', routine.__doc__)
A:scipy.linalg.lapack.dtype->getattr(routine, 'dtype', None)
A:scipy.linalg.lapack.int_dtype->getattr(routine, 'int_dtype', None)
A:scipy.linalg.lapack.ret->routine(*args, **kwargs)
A:scipy.linalg.lapack.value->int(value)
scipy.linalg._check_work_float(value,dtype,int_dtype)
scipy.linalg._compute_lwork(routine,*args,**kwargs)
scipy.linalg.backtickrepl(m)
scipy.linalg.get_lapack_funcs(names,arrays=(),dtype=None,ilp64=False)
scipy.linalg.lapack._check_work_float(value,dtype,int_dtype)
scipy.linalg.lapack._compute_lwork(routine,*args,**kwargs)
scipy.linalg.lapack.backtickrepl(m)
scipy.linalg.lapack.get_lapack_funcs(names,arrays=(),dtype=None,ilp64=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/decomp.py----------------------------------------
scipy.linalg.decomp.__dir__()
scipy.linalg.decomp.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_matfuncs_expm.pyi----------------------------------------
scipy.linalg._matfuncs_expm.pade_UV_calc(Am:NDArray[Any],n:int,m:int)->None
scipy.linalg._matfuncs_expm.pick_pade_structure(a:NDArray[Any])->Tuple[int, int]


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_decomp_schur.py----------------------------------------
A:scipy.linalg._decomp_schur.a1->a1.astype('F').astype('F')
A:scipy.linalg._decomp_schur.(gees,)->get_lapack_funcs(('gees',), (a1,))
A:scipy.linalg._decomp_schur.result->gees(sfunction, a1, lwork=lwork, overwrite_a=overwrite_a, sort_t=sort_t)
A:scipy.linalg._decomp_schur.lwork->result[-2][0].real.astype(numpy.int_)
A:scipy.linalg._decomp_schur.kind->max(kind, _array_kind[t])
A:scipy.linalg._decomp_schur.precision->max(precision, _array_precision[t])
A:scipy.linalg._decomp_schur.(Z, T)->_castCopy(t, Z, T)
A:scipy.linalg._decomp_schur.t->_commonType(Z, T, array([3.0], 'F'))
A:scipy.linalg._decomp_schur.r->norm([mu[0], T[m, m - 1]])
A:scipy.linalg._decomp_schur.G->array([[c.conj(), s], [-s, c]], dtype=t)
A:scipy.linalg._decomp_schur.T[m - 1:m + 1, m - 1:]->array([[c.conj(), s], [-s, c]], dtype=t).dot(T[m - 1:m + 1, m - 1:])
A:scipy.linalg._decomp_schur.T[:m + 1, m - 1:m + 1]->T[:m + 1, m - 1:m + 1].dot(G.conj().T).dot(G.conj().T)
A:scipy.linalg._decomp_schur.Z[:, m - 1:m + 1]->Z[:, m - 1:m + 1].dot(G.conj().T).dot(G.conj().T)
scipy.linalg._castCopy(type,*arrays)
scipy.linalg._commonType(*arrays)
scipy.linalg._decomp_schur._castCopy(type,*arrays)
scipy.linalg._decomp_schur._commonType(*arrays)
scipy.linalg._decomp_schur.rsf2csf(T,Z,check_finite=True)
scipy.linalg._decomp_schur.schur(a,output='real',lwork=None,overwrite_a=False,sort=None,check_finite=True)
scipy.linalg.rsf2csf(T,Z,check_finite=True)
scipy.linalg.schur(a,output='real',lwork=None,overwrite_a=False,sort=None,check_finite=True)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_basic.py----------------------------------------
A:scipy.linalg._basic.E->lamch('E')
A:scipy.linalg._basic.a1->_asarray_validated(a, check_finite=check_finite)
A:scipy.linalg._basic.b1->_asarray_validated(b, check_finite=check_finite)
A:scipy.linalg._basic.lamch->get_lapack_funcs('lamch', dtype='d')
A:scipy.linalg._basic.lange->get_lapack_funcs('lange', (a1,))
A:scipy.linalg._basic.anorm->lange(norm, a1)
A:scipy.linalg._basic.(gecon, getrf, getrs)->get_lapack_funcs(('gecon', 'getrf', 'getrs'), (a1, b1))
A:scipy.linalg._basic.(lu, ipvt, info)->getrf(a1, overwrite_a=overwrite_a)
A:scipy.linalg._basic.(x, info)->trtrs(a1.T, b1, overwrite_b=overwrite_b, lower=not lower, trans=not trans, unitdiag=unit_diagonal)
A:scipy.linalg._basic.(rcond, info)->pocon(lu, anorm)
A:scipy.linalg._basic.(hecon, hesv, hesv_lw)->get_lapack_funcs(('hecon', 'hesv', 'hesv_lwork'), (a1, b1))
A:scipy.linalg._basic.lwork->_compute_lwork(lapack_lwork, m, n, nrhs, cond)
A:scipy.linalg._basic.(lu, ipvt, x, info)->sysv(a1, b1, lwork=lwork, lower=lower, overwrite_a=overwrite_a, overwrite_b=overwrite_b)
A:scipy.linalg._basic.(sycon, sysv, sysv_lw)->get_lapack_funcs(('sycon', 'sysv', 'sysv_lwork'), (a1, b1))
A:scipy.linalg._basic.(pocon, posv)->get_lapack_funcs(('pocon', 'posv'), (a1, b1))
A:scipy.linalg._basic.(lu, x, info)->posv(a1, b1, lower=lower, overwrite_a=overwrite_a, overwrite_b=overwrite_b)
A:scipy.linalg._basic.x->numpy.zeros((n,) + b1.shape[1:], dtype=np.common_type(a1, b1))
A:scipy.linalg._basic.trans->{'N': 0, 'T': 1, 'C': 2}.get(trans, trans)
A:scipy.linalg._basic.(trtrs,)->get_lapack_funcs(('trtrs',), (a1, b1))
A:scipy.linalg._basic.b2->numpy.zeros(n, dtype=lapack_func.dtype)
A:scipy.linalg._basic.(gtsv,)->get_lapack_funcs(('gtsv',), (a1, b1))
A:scipy.linalg._basic.(du2, d, du, x, info)->gtsv(dl, d, du, b1, overwrite_ab, overwrite_ab, overwrite_ab, overwrite_b)
A:scipy.linalg._basic.(gbsv,)->get_lapack_funcs(('gbsv',), (a1, b1))
A:scipy.linalg._basic.a2->numpy.zeros((2 * nlower + nupper + 1, a1.shape[1]), dtype=gbsv.dtype)
A:scipy.linalg._basic.(lu, piv, x, info)->gbsv(nlower, nupper, a2, b1, overwrite_ab=True, overwrite_b=overwrite_b)
A:scipy.linalg._basic.(ptsv,)->get_lapack_funcs(('ptsv',), (a1, b1))
A:scipy.linalg._basic.e->a1[0, 1:].conj()
A:scipy.linalg._basic.(d, du, x, info)->ptsv(d, e, b1, overwrite_ab, overwrite_ab, overwrite_b)
A:scipy.linalg._basic.(pbsv,)->get_lapack_funcs(('pbsv',), (a1, b1))
A:scipy.linalg._basic.(c, x, info)->pbsv(a1, b1, lower=lower, overwrite_ab=overwrite_ab, overwrite_b=overwrite_b)
A:scipy.linalg._basic.(r, c, b, dtype, b_shape)->_validate_args_for_toeplitz_ops(c_or_cr, b, check_finite, keep_b_shape=True)
A:scipy.linalg._basic.vals->numpy.concatenate((r[-1:0:-1], c))
A:scipy.linalg._basic.(x, _)->levinson(vals, np.ascontiguousarray(b))
A:scipy.linalg._basic.c->_asarray_validated(c_or_cr, check_finite=check_finite).ravel()
A:scipy.linalg._basic.nc->_get_axis_len('c', c, caxis)
A:scipy.linalg._basic.b->b.reshape(b.shape[0], -1).reshape(b.shape[0], -1)
A:scipy.linalg._basic.nb->_get_axis_len('b', b, baxis)
A:scipy.linalg._basic.fc->numpy.fft.fft(np.moveaxis(c, caxis, -1), axis=-1)
A:scipy.linalg._basic.abs_fc->numpy.abs(fc)
A:scipy.linalg._basic.tol->numpy.atleast_1d(tol)
A:scipy.linalg._basic.is_near_singular->numpy.any(near_zeros)
A:scipy.linalg._basic.fb->numpy.fft.fft(np.moveaxis(b, baxis, -1), axis=-1)
A:scipy.linalg._basic.(getrf, getri, getri_lwork)->get_lapack_funcs(('getrf', 'getri', 'getri_lwork'), (a1,))
A:scipy.linalg._basic.(lu, piv, info)->getrf(a1, overwrite_a=overwrite_a)
A:scipy.linalg._basic.(inv_a, info)->getri(lu, piv, lwork=lwork, overwrite_lu=1)
A:scipy.linalg._basic.(fdet,)->get_flinalg_funcs(('det',), (a1,))
A:scipy.linalg._basic.(a_det, info)->fdet(a1, overwrite_a=overwrite_a)
A:scipy.linalg._basic.residues->numpy.empty((0,))
A:scipy.linalg._basic.(lapack_func, lapack_lwork)->get_lapack_funcs((driver, '%s_lwork' % driver), (a1, b1))
A:scipy.linalg._basic.(v, x, s, rank, work, info)->lapack_func(a1, b1, cond, lwork, overwrite_a=overwrite_a, overwrite_b=overwrite_b)
A:scipy.linalg._basic.(lwork, iwork)->_compute_lwork(lapack_lwork, m, n, nrhs, cond)
A:scipy.linalg._basic.(x, s, rank, info)->lapack_func(a1, b1, lwork, rwork, iwork, cond, False, False)
A:scipy.linalg._basic.(lwork, rwork, iwork)->_compute_lwork(lapack_lwork, m, n, nrhs, cond)
A:scipy.linalg._basic.resids->numpy.sum(np.abs(x[n:]) ** 2, axis=0)
A:scipy.linalg._basic.jptv->numpy.zeros((a1.shape[1], 1), dtype=np.int32)
A:scipy.linalg._basic.(v, x, j, rank, info)->lapack_func(a1, b1, jptv, cond, lwork, False, False)
A:scipy.linalg._basic.a->_asarray_validated(a, check_finite=check_finite)
A:scipy.linalg._basic.(u, s, vh)->_decomp_svd.svd(a, full_matrices=False, check_finite=False)
A:scipy.linalg._basic.t->u.dtype.char.lower()
A:scipy.linalg._basic.maxS->numpy.max(np.abs(s))
A:scipy.linalg._basic.rank->numpy.sum(s > val)
A:scipy.linalg._basic.(s, u)->_decomp.eigh(a, lower=lower, check_finite=False)
A:scipy.linalg._basic.A->numpy.atleast_2d(_asarray_validated(A, check_finite=True))
A:scipy.linalg._basic.gebal->get_lapack_funcs('gebal', (A,))
A:scipy.linalg._basic.(B, lo, hi, ps, info)->gebal(A, scale=scale, permute=permute, overwrite_a=overwrite_a)
A:scipy.linalg._basic.scaling->numpy.ones_like(ps, dtype=float)
A:scipy.linalg._basic.perm->numpy.arange(n)
A:scipy.linalg._basic.iperm->numpy.empty_like(perm)
A:scipy.linalg._basic.iperm[perm]->numpy.arange(n)
A:scipy.linalg._basic.r->_asarray_validated(c_or_cr, check_finite=check_finite).ravel().conjugate()
A:scipy.linalg._basic.(r, c, x, dtype, x_shape)->_validate_args_for_toeplitz_ops(c_or_cr, x, check_finite, keep_b_shape=False, enforce_square=False)
A:scipy.linalg._basic.T_nrows->len(c)
A:scipy.linalg._basic.T_ncols->len(r)
A:scipy.linalg._basic.embedded_col->numpy.concatenate((c, r[-1:0:-1]))
A:scipy.linalg._basic.fft_mat->rfft(embedded_col, axis=0, workers=workers).reshape(-1, 1)
A:scipy.linalg._basic.fft_x->rfft(x, n=p, axis=0, workers=workers)
scipy.linalg._basic._get_axis_len(aname,a,axis)
scipy.linalg._basic._solve_check(n,info,lamch=None,rcond=None)
scipy.linalg._basic._validate_args_for_toeplitz_ops(c_or_cr,b,check_finite,keep_b_shape,enforce_square=True)
scipy.linalg._basic.det(a,overwrite_a=False,check_finite=True)
scipy.linalg._basic.inv(a,overwrite_a=False,check_finite=True)
scipy.linalg._basic.lstsq(a,b,cond=None,overwrite_a=False,overwrite_b=False,check_finite=True,lapack_driver=None)
scipy.linalg._basic.matmul_toeplitz(c_or_cr,x,check_finite=False,workers=None)
scipy.linalg._basic.matrix_balance(A,permute=True,scale=True,separate=False,overwrite_a=False)
scipy.linalg._basic.pinv(a,atol=None,rtol=None,return_rank=False,check_finite=True,cond=None,rcond=None)
scipy.linalg._basic.pinvh(a,atol=None,rtol=None,lower=True,return_rank=False,check_finite=True)
scipy.linalg._basic.solve(a,b,sym_pos=False,lower=False,overwrite_a=False,overwrite_b=False,check_finite=True,assume_a='gen',transposed=False)
scipy.linalg._basic.solve_banded(l_and_u,ab,b,overwrite_ab=False,overwrite_b=False,check_finite=True)
scipy.linalg._basic.solve_circulant(c,b,singular='raise',tol=None,caxis=-1,baxis=0,outaxis=0)
scipy.linalg._basic.solve_toeplitz(c_or_cr,b,check_finite=True)
scipy.linalg._basic.solve_triangular(a,b,trans=0,lower=False,unit_diagonal=False,overwrite_b=False,check_finite=True)
scipy.linalg._basic.solveh_banded(ab,b,overwrite_ab=False,overwrite_b=False,lower=False,check_finite=True)
scipy.linalg._get_axis_len(aname,a,axis)
scipy.linalg._solve_check(n,info,lamch=None,rcond=None)
scipy.linalg._validate_args_for_toeplitz_ops(c_or_cr,b,check_finite,keep_b_shape,enforce_square=True)
scipy.linalg.det(a,overwrite_a=False,check_finite=True)
scipy.linalg.inv(a,overwrite_a=False,check_finite=True)
scipy.linalg.lstsq(a,b,cond=None,overwrite_a=False,overwrite_b=False,check_finite=True,lapack_driver=None)
scipy.linalg.matmul_toeplitz(c_or_cr,x,check_finite=False,workers=None)
scipy.linalg.matrix_balance(A,permute=True,scale=True,separate=False,overwrite_a=False)
scipy.linalg.pinv(a,atol=None,rtol=None,return_rank=False,check_finite=True,cond=None,rcond=None)
scipy.linalg.pinvh(a,atol=None,rtol=None,lower=True,return_rank=False,check_finite=True)
scipy.linalg.solve(a,b,sym_pos=False,lower=False,overwrite_a=False,overwrite_b=False,check_finite=True,assume_a='gen',transposed=False)
scipy.linalg.solve_banded(l_and_u,ab,b,overwrite_ab=False,overwrite_b=False,check_finite=True)
scipy.linalg.solve_circulant(c,b,singular='raise',tol=None,caxis=-1,baxis=0,outaxis=0)
scipy.linalg.solve_toeplitz(c_or_cr,b,check_finite=True)
scipy.linalg.solve_triangular(a,b,trans=0,lower=False,unit_diagonal=False,overwrite_b=False,check_finite=True)
scipy.linalg.solveh_banded(ab,b,overwrite_ab=False,overwrite_b=False,lower=False,check_finite=True)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_decomp_qz.py----------------------------------------
A:scipy.linalg._decomp_qz.out->numpy.empty_like(x, dtype=bool)
A:scipy.linalg._decomp_qz.a1->a1.astype('F').astype('F')
A:scipy.linalg._decomp_qz.b1->b1.astype('F').astype('F')
A:scipy.linalg._decomp_qz.(gges,)->get_lapack_funcs(('gges',), (a1, b1))
A:scipy.linalg._decomp_qz.result->gges(sfunction, a1, b1, lwork=lwork, overwrite_a=overwrite_a, overwrite_b=overwrite_b, sort_t=0)
A:scipy.linalg._decomp_qz.lwork->result[-2][0].real.astype(np.int_)
A:scipy.linalg._decomp_qz.(result, _)->_qz(A, B, output=output, lwork=lwork, sort=sort, overwrite_a=overwrite_a, overwrite_b=overwrite_b, check_finite=check_finite)
A:scipy.linalg._decomp_qz.((AA, BB, _, *ab, Q, Z, _, _), typ)->_qz(A, B, output=output, sort=None, overwrite_a=overwrite_a, overwrite_b=overwrite_b, check_finite=check_finite)
A:scipy.linalg._decomp_qz.sfunction->_select_function(sort)
A:scipy.linalg._decomp_qz.select->sfunction(alpha, beta)
A:scipy.linalg._decomp_qz.tgsen->get_lapack_funcs('tgsen', (AA, BB))
A:scipy.linalg._decomp_qz.(AAA, BBB, *ab, QQ, ZZ, _, _, _, _, info)->tgsen(select, AA, BB, Q, Z, ijob=0, lwork=lwork, liwork=1)
scipy.linalg._decomp_qz._iuc(x,y)
scipy.linalg._decomp_qz._lhp(x,y)
scipy.linalg._decomp_qz._ouc(x,y)
scipy.linalg._decomp_qz._qz(A,B,output='real',lwork=None,sort=None,overwrite_a=False,overwrite_b=False,check_finite=True)
scipy.linalg._decomp_qz._rhp(x,y)
scipy.linalg._decomp_qz._select_function(sort)
scipy.linalg._decomp_qz.ordqz(A,B,sort='lhp',output='real',overwrite_a=False,overwrite_b=False,check_finite=True)
scipy.linalg._decomp_qz.qz(A,B,output='real',lwork=None,sort=None,overwrite_a=False,overwrite_b=False,check_finite=True)
scipy.linalg._iuc(x,y)
scipy.linalg._lhp(x,y)
scipy.linalg._ouc(x,y)
scipy.linalg._qz(A,B,output='real',lwork=None,sort=None,overwrite_a=False,overwrite_b=False,check_finite=True)
scipy.linalg._rhp(x,y)
scipy.linalg._select_function(sort)
scipy.linalg.ordqz(A,B,sort='lhp',output='real',overwrite_a=False,overwrite_b=False,check_finite=True)
scipy.linalg.qz(A,B,output='real',lwork=None,sort=None,overwrite_a=False,overwrite_b=False,check_finite=True)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_decomp.py----------------------------------------
A:scipy.linalg._decomp._I->cast['F'](1j)
A:scipy.linalg._decomp.v->numpy.array(vin, dtype=dtype)
A:scipy.linalg._decomp.w->_make_eigvals(w, None, homogeneous_eigvals)
A:scipy.linalg._decomp.w[alpha_zero & beta_zero]->complex(numpy.nan, numpy.nan)
A:scipy.linalg._decomp.(ggev,)->get_lapack_funcs(('ggev',), (a1, b1))
A:scipy.linalg._decomp.res->ggev(a1, b1, lwork=-1)
A:scipy.linalg._decomp.lwork->_compute_lwork(orghr_lwork, n, lo=lo, hi=hi)
A:scipy.linalg._decomp.(alpha, beta, vl, vr, work, info)->ggev(a1, b1, cvl, cvr, lwork, overwrite_a, overwrite_b)
A:scipy.linalg._decomp.(alphar, alphai, beta, vl, vr, work, info)->ggev(a1, b1, cvl, cvr, lwork, overwrite_a, overwrite_b)
A:scipy.linalg._decomp.only_real->numpy.all(w.imag == 0.0)
A:scipy.linalg._decomp.vl->_make_complex_eigvecs(w, vl, t)
A:scipy.linalg._decomp.vr->_make_complex_eigvecs(w, vr, t)
A:scipy.linalg._decomp.a1->_asarray_validated(a, check_finite=check_finite)
A:scipy.linalg._decomp.b1->_asarray_validated(b, check_finite=check_finite)
A:scipy.linalg._decomp.(geev, geev_lwork)->get_lapack_funcs(('geev', 'geev_lwork'), (a1,))
A:scipy.linalg._decomp.(w, vl, vr, info)->geev(a1, lwork=lwork, compute_vl=compute_vl, compute_vr=compute_vr, overwrite_a=overwrite_a)
A:scipy.linalg._decomp.(wr, wi, vl, vr, info)->geev(a1, lwork=lwork, compute_vl=compute_vl, compute_vr=compute_vr, overwrite_a=overwrite_a)
A:scipy.linalg._decomp.(drv, drvlw)->get_lapack_funcs((pfx + driver, pfx + driver + '_lwork'), [a1, b1])
A:scipy.linalg._decomp.lw->_compute_lwork(drvlw, n, uplo=uplo)
A:scipy.linalg._decomp.lwork_args->dict(zip(lwork_spec[pfx + driver], lw))
A:scipy.linalg._decomp.(w, v, *other_args, info)->drv(a=a1, b=b1, **drv_args, **lwork_args)
A:scipy.linalg._decomp.drv->get_lapack_funcs(pfx + 'gvd', [a1, b1])
A:scipy.linalg._decomp.msg->drv_err['evd'].format(info, n + 1)
A:scipy.linalg._decomp.select->select.lower().lower()
A:scipy.linalg._decomp.sr->asarray(select_range)
A:scipy.linalg._decomp.(select, vl, vu, il, iu, max_ev)->_check_select(select, select_range, max_ev, a1.shape[1])
A:scipy.linalg._decomp.(bevd,)->get_lapack_funcs((internal_name,), (a1,))
A:scipy.linalg._decomp.(w, v, info)->func(d, e, compute_v=compute_v)
A:scipy.linalg._decomp.(lamch,)->get_lapack_funcs(('lamch',), (array(0, dtype='d'),))
A:scipy.linalg._decomp.(bevx,)->get_lapack_funcs((internal_name,), (a1,))
A:scipy.linalg._decomp.(w, v, m, ifail, info)->bevx(a1, vl, vu, il, iu, compute_v=not eigvals_only, mmax=max_ev, range=select, lower=lower, overwrite_ab=overwrite_a_band, abstol=abstol)
A:scipy.linalg._decomp.d->_asarray_validated(d, check_finite=check_finite)
A:scipy.linalg._decomp.e->_asarray_validated(e, check_finite=check_finite)
A:scipy.linalg._decomp.(select, vl, vu, il, iu, _)->_check_select(select, select_range, 0, d.size)
A:scipy.linalg._decomp.(func,)->get_lapack_funcs(('stein',), (d, e))
A:scipy.linalg._decomp.(w, info)->func(d, e)
A:scipy.linalg._decomp.m->len(w)
A:scipy.linalg._decomp.tol->float(tol)
A:scipy.linalg._decomp.(stebz,)->get_lapack_funcs((internal_name,), (d, e))
A:scipy.linalg._decomp.(m, w, iblock, isplit, info)->stebz(d, e, select, vl, vu, il, iu, tol, order)
A:scipy.linalg._decomp.e_->empty(e.size + 1, e.dtype)
A:scipy.linalg._decomp.(stemr_lwork,)->get_lapack_funcs(('stemr_lwork',), (d, e))
A:scipy.linalg._decomp.(lwork, liwork, info)->stemr_lwork(d, e_, select, vl, vu, il, iu, compute_v=compute_v)
A:scipy.linalg._decomp.(m, w, v, info)->func(d, e_, select, vl, vu, il, iu, compute_v=compute_v, lwork=lwork, liwork=liwork)
A:scipy.linalg._decomp.(v, info)->func(d, e, w, iblock, isplit)
A:scipy.linalg._decomp.order->argsort(w)
A:scipy.linalg._decomp.(gehrd, gebal, gehrd_lwork)->get_lapack_funcs(('gehrd', 'gebal', 'gehrd_lwork'), (a1,))
A:scipy.linalg._decomp.(ba, lo, hi, pivscale, info)->gebal(a1, permute=0, overwrite_a=overwrite_a)
A:scipy.linalg._decomp.n->len(a1)
A:scipy.linalg._decomp.(hq, tau, info)->gehrd(ba, lo=lo, hi=hi, lwork=lwork, overwrite_a=1)
A:scipy.linalg._decomp.h->numpy.triu(hq, -1)
A:scipy.linalg._decomp.(orghr, orghr_lwork)->get_lapack_funcs(('orghr', 'orghr_lwork'), (a1,))
A:scipy.linalg._decomp.(q, info)->orghr(a=hq, tau=tau, lo=lo, hi=hi, lwork=lwork, overwrite_a=1)
A:scipy.linalg._decomp.complex_mask->iscomplex(w)
A:scipy.linalg._decomp.n_complex->iscomplex(w).sum(axis=-1)
A:scipy.linalg._decomp.idx->nonzero(complex_mask)
A:scipy.linalg._decomp.wr->zeros(M + (n, n), dtype=w.real.dtype)
A:scipy.linalg._decomp.di->range(n)
A:scipy.linalg._decomp.u->zeros(M + (n, n), dtype=numpy.cdouble)
scipy.linalg._check_info(info,driver,positive='didnotconverge(LAPACKinfo=%d)')
scipy.linalg._check_select(select,select_range,max_ev,max_len)
scipy.linalg._decomp._check_info(info,driver,positive='didnotconverge(LAPACKinfo=%d)')
scipy.linalg._decomp._check_select(select,select_range,max_ev,max_len)
scipy.linalg._decomp._geneig(a1,b1,left,right,overwrite_a,overwrite_b,homogeneous_eigvals)
scipy.linalg._decomp._make_complex_eigvecs(w,vin,dtype)
scipy.linalg._decomp._make_eigvals(alpha,beta,homogeneous_eigvals)
scipy.linalg._decomp.cdf2rdf(w,v)
scipy.linalg._decomp.eig(a,b=None,left=False,right=True,overwrite_a=False,overwrite_b=False,check_finite=True,homogeneous_eigvals=False)
scipy.linalg._decomp.eig_banded(a_band,lower=False,eigvals_only=False,overwrite_a_band=False,select='a',select_range=None,max_ev=0,check_finite=True)
scipy.linalg._decomp.eigh(a,b=None,lower=True,eigvals_only=False,overwrite_a=False,overwrite_b=False,turbo=False,eigvals=None,type=1,check_finite=True,subset_by_index=None,subset_by_value=None,driver=None)
scipy.linalg._decomp.eigh_tridiagonal(d,e,eigvals_only=False,select='a',select_range=None,check_finite=True,tol=0.0,lapack_driver='auto')
scipy.linalg._decomp.eigvals(a,b=None,overwrite_a=False,check_finite=True,homogeneous_eigvals=False)
scipy.linalg._decomp.eigvals_banded(a_band,lower=False,overwrite_a_band=False,select='a',select_range=None,check_finite=True)
scipy.linalg._decomp.eigvalsh(a,b=None,lower=True,overwrite_a=False,overwrite_b=False,turbo=False,eigvals=None,type=1,check_finite=True,subset_by_index=None,subset_by_value=None,driver=None)
scipy.linalg._decomp.eigvalsh_tridiagonal(d,e,select='a',select_range=None,check_finite=True,tol=0.0,lapack_driver='auto')
scipy.linalg._decomp.hessenberg(a,calc_q=False,overwrite_a=False,check_finite=True)
scipy.linalg._geneig(a1,b1,left,right,overwrite_a,overwrite_b,homogeneous_eigvals)
scipy.linalg._make_complex_eigvecs(w,vin,dtype)
scipy.linalg._make_eigvals(alpha,beta,homogeneous_eigvals)
scipy.linalg.cdf2rdf(w,v)
scipy.linalg.eig(a,b=None,left=False,right=True,overwrite_a=False,overwrite_b=False,check_finite=True,homogeneous_eigvals=False)
scipy.linalg.eig_banded(a_band,lower=False,eigvals_only=False,overwrite_a_band=False,select='a',select_range=None,max_ev=0,check_finite=True)
scipy.linalg.eigh(a,b=None,lower=True,eigvals_only=False,overwrite_a=False,overwrite_b=False,turbo=False,eigvals=None,type=1,check_finite=True,subset_by_index=None,subset_by_value=None,driver=None)
scipy.linalg.eigh_tridiagonal(d,e,eigvals_only=False,select='a',select_range=None,check_finite=True,tol=0.0,lapack_driver='auto')
scipy.linalg.eigvals(a,b=None,overwrite_a=False,check_finite=True,homogeneous_eigvals=False)
scipy.linalg.eigvals_banded(a_band,lower=False,overwrite_a_band=False,select='a',select_range=None,check_finite=True)
scipy.linalg.eigvalsh(a,b=None,lower=True,overwrite_a=False,overwrite_b=False,turbo=False,eigvals=None,type=1,check_finite=True,subset_by_index=None,subset_by_value=None,driver=None)
scipy.linalg.eigvalsh_tridiagonal(d,e,select='a',select_range=None,check_finite=True,tol=0.0,lapack_driver='auto')
scipy.linalg.hessenberg(a,calc_q=False,overwrite_a=False,check_finite=True)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/decomp_schur.py----------------------------------------
scipy.linalg.decomp_schur.__dir__()
scipy.linalg.decomp_schur.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/decomp_lu.py----------------------------------------
scipy.linalg.decomp_lu.__dir__()
scipy.linalg.decomp_lu.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/basic.py----------------------------------------
scipy.linalg.basic.__dir__()
scipy.linalg.basic.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_solvers.py----------------------------------------
A:scipy.linalg._solvers.(r, u)->schur(a, output='real')
A:scipy.linalg._solvers.(s, v)->schur(b.conj().transpose(), output='real')
A:scipy.linalg._solvers.f->u.conj().T.dot(q.dot(u))
A:scipy.linalg._solvers.(trsyl,)->get_lapack_funcs(('trsyl',), (r, s, f))
A:scipy.linalg._solvers.(y, scale, info)->trsyl(r, r, f, tranb=dtype_string)
A:scipy.linalg._solvers.a->numpy.atleast_2d(_asarray_validated(a, check_finite=True))
A:scipy.linalg._solvers.q->numpy.atleast_2d(_asarray_validated(q, check_finite=True))
A:scipy.linalg._solvers.trsyl->get_lapack_funcs('trsyl', (r, f))
A:scipy.linalg._solvers.lhs->kron(a, a.conj())
A:scipy.linalg._solvers.x->solve_triangular(ul.conj().T, solve_triangular(uu.conj().T, u10.conj().T, lower=True), unit_diagonal=True).conj().T.dot(up.conj().T)
A:scipy.linalg._solvers.eye->numpy.eye(a.shape[0])
A:scipy.linalg._solvers.aH->numpy.atleast_2d(_asarray_validated(a, check_finite=True)).conj().transpose()
A:scipy.linalg._solvers.aHI_inv->inv(aH + eye)
A:scipy.linalg._solvers.b->numpy.atleast_2d(_asarray_validated(b, check_finite=True))
A:scipy.linalg._solvers.meth->method.lower()
A:scipy.linalg._solvers.(a, b, q, r, e, s, m, n, r_or_c, gen_are)->_are_validate_args(a, b, q, r, e, s, 'dare')
A:scipy.linalg._solvers.H->q_of_qr[:, n:].conj().T.dot(H[:, :2 * m])
A:scipy.linalg._solvers.J->q_of_qr[:, n:].conj().T.dot(J[:, :2 * m])
A:scipy.linalg._solvers.(_, (sca, _))->matrix_balance(M, separate=1, permute=0)
A:scipy.linalg._solvers.sca->numpy.log2(sca)
A:scipy.linalg._solvers.s->numpy.atleast_2d(_asarray_validated(s, check_finite=True))
A:scipy.linalg._solvers.(q, r)->qr(H[:, -n:])
A:scipy.linalg._solvers.(_, _, _, _, _, u)->ordqz(H, J, sort='iuc', overwrite_a=True, overwrite_b=True, check_finite=False, output=out_str)
A:scipy.linalg._solvers.(u, _)->qr(np.vstack((e.dot(u[:m, :m]), u[m:, :m])))
A:scipy.linalg._solvers.(up, ul, uu)->lu(u00)
A:scipy.linalg._solvers.u_sym->u00.conj().T.dot(u10)
A:scipy.linalg._solvers.n_u_sym->norm(u_sym, 1)
A:scipy.linalg._solvers.sym_threshold->numpy.max([np.spacing(1000.0), 0.1 * n_u_sym])
A:scipy.linalg._solvers.(q_of_qr, _)->qr(H[:, -n:])
A:scipy.linalg._solvers.r->numpy.atleast_2d(_asarray_validated(r, check_finite=True))
A:scipy.linalg._solvers.e->numpy.atleast_2d(_asarray_validated(e, check_finite=True))
scipy.linalg._are_validate_args(a,b,q,r,e,s,eq_type='care')
scipy.linalg._solve_discrete_lyapunov_bilinear(a,q)
scipy.linalg._solve_discrete_lyapunov_direct(a,q)
scipy.linalg._solvers._are_validate_args(a,b,q,r,e,s,eq_type='care')
scipy.linalg._solvers._solve_discrete_lyapunov_bilinear(a,q)
scipy.linalg._solvers._solve_discrete_lyapunov_direct(a,q)
scipy.linalg._solvers.solve_continuous_are(a,b,q,r,e=None,s=None,balanced=True)
scipy.linalg._solvers.solve_continuous_lyapunov(a,q)
scipy.linalg._solvers.solve_discrete_are(a,b,q,r,e=None,s=None,balanced=True)
scipy.linalg._solvers.solve_discrete_lyapunov(a,q,method=None)
scipy.linalg._solvers.solve_sylvester(a,b,q)
scipy.linalg.solve_continuous_are(a,b,q,r,e=None,s=None,balanced=True)
scipy.linalg.solve_continuous_lyapunov(a,q)
scipy.linalg.solve_discrete_are(a,b,q,r,e=None,s=None,balanced=True)
scipy.linalg.solve_discrete_lyapunov(a,q,method=None)
scipy.linalg.solve_sylvester(a,b,q)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_matfuncs_sqrtm.py----------------------------------------
A:scipy.linalg._matfuncs_sqrtm.T_diag->numpy.asarray(T_diag, dtype=np.float64)
A:scipy.linalg._matfuncs_sqrtm.T->numpy.asarray(T, dtype=np.float64, order='C')
A:scipy.linalg._matfuncs_sqrtm.R->_sqrtm_triu(T, blocksize=blocksize)
A:scipy.linalg._matfuncs_sqrtm.nblocks->max(n // blocksize, 1)
A:scipy.linalg._matfuncs_sqrtm.(bsmall, nlarge)->divmod(n, nblocks)
A:scipy.linalg._matfuncs_sqrtm.(x, scale, info)->ztrsyl(Rii, Rjj, S)
A:scipy.linalg._matfuncs_sqrtm.A->_asarray_validated(A, check_finite=True, as_inexact=True)
A:scipy.linalg._matfuncs_sqrtm.keep_it_real->numpy.isrealobj(A)
A:scipy.linalg._matfuncs_sqrtm.(T, Z)->schur(A, output='complex')
A:scipy.linalg._matfuncs_sqrtm.X->numpy.empty_like(A)
scipy.linalg._matfuncs_sqrtm.SqrtmError(np.linalg.LinAlgError)
scipy.linalg._matfuncs_sqrtm._sqrtm_triu(T,blocksize=64)
scipy.linalg._matfuncs_sqrtm.sqrtm(A,disp=True,blocksize=64)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_procrustes.py----------------------------------------
A:scipy.linalg._procrustes.A->numpy.asanyarray(A)
A:scipy.linalg._procrustes.B->numpy.asanyarray(B)
A:scipy.linalg._procrustes.(u, w, vt)->svd(B.T.dot(A).T)
A:scipy.linalg._procrustes.R->u.dot(vt)
A:scipy.linalg._procrustes.scale->w.sum()
scipy.linalg._procrustes.orthogonal_procrustes(A,B,check_finite=True)
scipy.linalg.orthogonal_procrustes(A,B,check_finite=True)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_decomp_lu.py----------------------------------------
A:scipy.linalg._decomp_lu.a1->asarray(a)
A:scipy.linalg._decomp_lu.(getrf,)->get_lapack_funcs(('getrf',), (a1,))
A:scipy.linalg._decomp_lu.(lu, piv, info)->getrf(a1, overwrite_a=overwrite_a)
A:scipy.linalg._decomp_lu.b1->asarray(b)
A:scipy.linalg._decomp_lu.(getrs,)->get_lapack_funcs(('getrs',), (lu, b1))
A:scipy.linalg._decomp_lu.(x, info)->getrs(lu, piv, b1, trans=trans, overwrite_b=overwrite_b)
A:scipy.linalg._decomp_lu.(flu,)->get_flinalg_funcs(('lu',), (a1,))
A:scipy.linalg._decomp_lu.(p, l, u, info)->flu(a1, permute_l=permute_l, overwrite_a=overwrite_a)
scipy.linalg._decomp_lu.lu(a,permute_l=False,overwrite_a=False,check_finite=True)
scipy.linalg._decomp_lu.lu_factor(a,overwrite_a=False,check_finite=True)
scipy.linalg._decomp_lu.lu_solve(lu_and_piv,b,trans=0,overwrite_b=False,check_finite=True)
scipy.linalg.lu(a,permute_l=False,overwrite_a=False,check_finite=True)
scipy.linalg.lu_factor(a,overwrite_a=False,check_finite=True)
scipy.linalg.lu_solve(lu_and_piv,b,trans=0,overwrite_b=False,check_finite=True)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_testutils.py----------------------------------------
A:scipy.linalg._testutils.x->numpy.zeros(shape, dtype=dtype)
A:scipy.linalg._testutils.j->numpy.arange(shape[0])
scipy.linalg._testutils._FakeMatrix(self,data)
scipy.linalg._testutils._FakeMatrix.__init__(self,data)
scipy.linalg._testutils._FakeMatrix2(self,data)
scipy.linalg._testutils._FakeMatrix2.__array__(self)
scipy.linalg._testutils._FakeMatrix2.__init__(self,data)
scipy.linalg._testutils._get_array(shape,dtype)
scipy.linalg._testutils._id(x)
scipy.linalg._testutils.assert_no_overwrite(call,shapes,dtypes=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/flinalg.py----------------------------------------
scipy.linalg.flinalg.__dir__()
scipy.linalg.flinalg.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_decomp_qr.py----------------------------------------
A:scipy.linalg._decomp_qr.lwork->kwargs.get('lwork', None)
A:scipy.linalg._decomp_qr.ret->f(*args, **kwargs)
A:scipy.linalg._decomp_qr.kwargs['lwork']->ret[-2][0].real.astype(numpy.int_)
A:scipy.linalg._decomp_qr.a1->numpy.asarray(a)
A:scipy.linalg._decomp_qr.(geqp3,)->get_lapack_funcs(('geqp3',), (a1,))
A:scipy.linalg._decomp_qr.(qr, jpvt, tau)->safecall(geqp3, 'geqp3', a1, overwrite_a=overwrite_a)
A:scipy.linalg._decomp_qr.(geqrf,)->get_lapack_funcs(('geqrf',), (a1,))
A:scipy.linalg._decomp_qr.(qr, tau)->safecall(geqrf, 'geqrf', a1, lwork=lwork, overwrite_a=overwrite_a)
A:scipy.linalg._decomp_qr.R->numpy.triu(rq[-M:, -M:])
A:scipy.linalg._decomp_qr.(gor_un_gqr,)->get_lapack_funcs(('orgqr',), (qr,))
A:scipy.linalg._decomp_qr.(Q,)->safecall(gor_un_grq, 'gorgrq/gungrq', rq1, tau, lwork=lwork, overwrite_a=1)
A:scipy.linalg._decomp_qr.qqr->numpy.empty((M, M), dtype=t)
A:scipy.linalg._decomp_qr.c->numpy.atleast_2d(c)
A:scipy.linalg._decomp_qr.a->numpy.atleast_2d(numpy.asarray(a))
A:scipy.linalg._decomp_qr.raw->qr(a, overwrite_a, None, 'raw', pivoting)
A:scipy.linalg._decomp_qr.(gor_un_mqr,)->get_lapack_funcs(('ormqr',), (Q,))
A:scipy.linalg._decomp_qr.cc->numpy.zeros((M, c.shape[1]), dtype=c.dtype, order='F')
A:scipy.linalg._decomp_qr.(cQ,)->safecall(gor_un_mqr, 'gormqr/gunmqr', lr, trans, Q, tau, cc, overwrite_c=overwrite_c)
A:scipy.linalg._decomp_qr.cQ->cQ.ravel().ravel()
A:scipy.linalg._decomp_qr.(gerqf,)->get_lapack_funcs(('gerqf',), (a1,))
A:scipy.linalg._decomp_qr.(rq, tau)->safecall(gerqf, 'gerqf', a1, lwork=lwork, overwrite_a=overwrite_a)
A:scipy.linalg._decomp_qr.(gor_un_grq,)->get_lapack_funcs(('orgrq',), (rq,))
A:scipy.linalg._decomp_qr.rq1->numpy.empty((N, N), dtype=rq.dtype)
scipy.linalg._decomp_qr.qr(a,overwrite_a=False,lwork=None,mode='full',pivoting=False,check_finite=True)
scipy.linalg._decomp_qr.qr_multiply(a,c,mode='right',pivoting=False,conjugate=False,overwrite_a=False,overwrite_c=False)
scipy.linalg._decomp_qr.rq(a,overwrite_a=False,lwork=None,mode='full',check_finite=True)
scipy.linalg._decomp_qr.safecall(f,name,*args,**kwargs)
scipy.linalg.qr(a,overwrite_a=False,lwork=None,mode='full',pivoting=False,check_finite=True)
scipy.linalg.qr_multiply(a,c,mode='right',pivoting=False,conjugate=False,overwrite_a=False,overwrite_c=False)
scipy.linalg.rq(a,overwrite_a=False,lwork=None,mode='full',check_finite=True)
scipy.linalg.safecall(f,name,*args,**kwargs)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_decomp_svd.py----------------------------------------
A:scipy.linalg._decomp_svd.a1->_asarray_validated(a, check_finite=check_finite)
A:scipy.linalg._decomp_svd.(gesXd, gesXd_lwork)->get_lapack_funcs(funcs, (a1,), ilp64='preferred')
A:scipy.linalg._decomp_svd.lwork->_compute_lwork(gesXd_lwork, a1.shape[0], a1.shape[1], compute_uv=compute_uv, full_matrices=full_matrices)
A:scipy.linalg._decomp_svd.(u, s, v, info)->gesXd(a1, compute_uv=compute_uv, lwork=lwork, full_matrices=full_matrices, overwrite_a=overwrite_a)
A:scipy.linalg._decomp_svd.a->_asarray_validated(a, check_finite=check_finite)
A:scipy.linalg._decomp_svd.part->diag(s)
A:scipy.linalg._decomp_svd.MorN->len(s)
A:scipy.linalg._decomp_svd.(u, s, vh)->svd(A, full_matrices=True)
A:scipy.linalg._decomp_svd.num->numpy.sum(s > tol, dtype=int)
A:scipy.linalg._decomp_svd.Q->vh[num:, :].T.conj()
A:scipy.linalg._decomp_svd.A->_asarray_validated(A, check_finite=True)
A:scipy.linalg._decomp_svd.QA->orth(A)
A:scipy.linalg._decomp_svd.B->_asarray_validated(B, check_finite=True)
A:scipy.linalg._decomp_svd.QB->orth(B)
A:scipy.linalg._decomp_svd.QA_H_QB->dot(QA.T.conj(), QB)
A:scipy.linalg._decomp_svd.sigma->svdvals(QA_H_QB)
A:scipy.linalg._decomp_svd.mu_arcsin->arcsin(clip(svdvals(B, overwrite_a=True), -1.0, 1.0))
A:scipy.linalg._decomp_svd.theta->where(mask, mu_arcsin, arccos(clip(sigma[::-1], -1.0, 1.0)))
scipy.linalg._decomp_svd.diagsvd(s,M,N)
scipy.linalg._decomp_svd.null_space(A,rcond=None)
scipy.linalg._decomp_svd.orth(A,rcond=None)
scipy.linalg._decomp_svd.subspace_angles(A,B)
scipy.linalg._decomp_svd.svd(a,full_matrices=True,compute_uv=True,overwrite_a=False,check_finite=True,lapack_driver='gesdd')
scipy.linalg._decomp_svd.svdvals(a,overwrite_a=False,check_finite=True)
scipy.linalg.diagsvd(s,M,N)
scipy.linalg.null_space(A,rcond=None)
scipy.linalg.orth(A,rcond=None)
scipy.linalg.subspace_angles(A,B)
scipy.linalg.svd(a,full_matrices=True,compute_uv=True,overwrite_a=False,check_finite=True,lapack_driver='gesdd')
scipy.linalg.svdvals(a,overwrite_a=False,check_finite=True)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/misc.py----------------------------------------
scipy.linalg.misc.__dir__()
scipy.linalg.misc.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_expm_frechet.py----------------------------------------
A:scipy.linalg._expm_frechet.A->numpy.asarray(A)
A:scipy.linalg._expm_frechet.E->numpy.outer(ident[i], ident[j])
A:scipy.linalg._expm_frechet.(expm_A, expm_frechet_AE)->expm_frechet_block_enlarge(A, E)
A:scipy.linalg._expm_frechet.M->numpy.vstack([np.hstack([A, E]), np.hstack([np.zeros_like(A), A])])
A:scipy.linalg._expm_frechet.expm_M->scipy.linalg.expm(M)
A:scipy.linalg._expm_frechet.A2->numpy.dot(A, A)
A:scipy.linalg._expm_frechet.U->numpy.dot(A, W)
A:scipy.linalg._expm_frechet.A4->numpy.dot(A2, A2)
A:scipy.linalg._expm_frechet.A6->numpy.dot(A2, A4)
A:scipy.linalg._expm_frechet.A8->numpy.dot(A4, A4)
A:scipy.linalg._expm_frechet.ident->numpy.identity(n)
A:scipy.linalg._expm_frechet.A_norm_1->scipy.linalg.norm(A, 1)
A:scipy.linalg._expm_frechet.(U, V, Lu, Lv)->pade(A, E, ident)
A:scipy.linalg._expm_frechet.s->max(0, int(np.ceil(np.log2(A_norm_1 / ell_table_61[13]))))
A:scipy.linalg._expm_frechet.lu_piv->scipy.linalg.lu_factor(-U + V)
A:scipy.linalg._expm_frechet.R->numpy.dot(R, R)
A:scipy.linalg._expm_frechet.L->scipy.linalg.lu_solve(lu_piv, Lu + Lv + np.dot(Lu - Lv, R))
A:scipy.linalg._expm_frechet.F->expm_frechet(A, E, method=method, compute_expm=False, check_finite=False)
A:scipy.linalg._expm_frechet.X->scipy.linalg.expm(A)
A:scipy.linalg._expm_frechet.K->expm_frechet_kronform(A, check_finite=False)
A:scipy.linalg._expm_frechet.A_norm->scipy.linalg.norm(A, 'fro')
A:scipy.linalg._expm_frechet.X_norm->scipy.linalg.norm(X, 'fro')
A:scipy.linalg._expm_frechet.K_norm->scipy.linalg.norm(K, 2)
scipy.linalg._expm_frechet._diff_pade3(A,E,ident)
scipy.linalg._expm_frechet._diff_pade5(A,E,ident)
scipy.linalg._expm_frechet._diff_pade7(A,E,ident)
scipy.linalg._expm_frechet._diff_pade9(A,E,ident)
scipy.linalg._expm_frechet.expm_cond(A,check_finite=True)
scipy.linalg._expm_frechet.expm_frechet(A,E,method=None,compute_expm=True,check_finite=True)
scipy.linalg._expm_frechet.expm_frechet_algo_64(A,E)
scipy.linalg._expm_frechet.expm_frechet_block_enlarge(A,E)
scipy.linalg._expm_frechet.expm_frechet_kronform(A,method=None,check_finite=True)
scipy.linalg._expm_frechet.vec(M)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/matfuncs.py----------------------------------------
scipy.linalg.matfuncs.__dir__()
scipy.linalg.matfuncs.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_interpolative_backend.py----------------------------------------
A:scipy.linalg._interpolative_backend._RETCODE_ERROR->RuntimeError('nonzero return code')
A:scipy.linalg._interpolative_backend.A->numpy.asfortranarray(A)
A:scipy.linalg._interpolative_backend.t->numpy.asfortranarray(t)
A:scipy.linalg._interpolative_backend.(k, idx, rnorms)->scipy.linalg._interpolative.idzp_id(eps, A)
A:scipy.linalg._interpolative_backend.proj->proj[:k * (n - k)].reshape((k, n - k), order='F')
A:scipy.linalg._interpolative_backend.(idx, rnorms)->scipy.linalg._interpolative.idzr_id(A, k)
A:scipy.linalg._interpolative_backend.B->numpy.asfortranarray(B)
A:scipy.linalg._interpolative_backend.(U, V, S, ier)->scipy.linalg._interpolative.idzr_rsvd(m, n, matveca, matvec, k)
A:scipy.linalg._interpolative_backend.(snorm, v)->scipy.linalg._interpolative.idz_snorm(m, n, matveca, matvec, its)
A:scipy.linalg._interpolative_backend.(k, iU, iV, iS, w, ier)->scipy.linalg._interpolative.idzp_rsvd(eps, m, n, matveca, matvec)
A:scipy.linalg._interpolative_backend.U->w[iU - 1:iU + m * k - 1].reshape((m, k), order='F')
A:scipy.linalg._interpolative_backend.V->w[iV - 1:iV + n * k - 1].reshape((n, k), order='F')
A:scipy.linalg._interpolative_backend.(n2, w)->idz_frmi(m)
A:scipy.linalg._interpolative_backend.(k, idx, proj)->scipy.linalg._interpolative.idzp_aid(eps, A, w, proj)
A:scipy.linalg._interpolative_backend.ra->numpy.empty(n * n2 + (n + 1) * (n2 + 1), dtype='complex128', order='F')
A:scipy.linalg._interpolative_backend.(k, ra)->scipy.linalg._interpolative.idz_estrank(eps, A, w, ra)
A:scipy.linalg._interpolative_backend.(n2, winit)->scipy.linalg._interpolative.idz_frmi(m)
A:scipy.linalg._interpolative_backend.w->numpy.empty((2 * k + 22) * m + (6 * k + 21) * n + 8 * k ** 2 + 10 * k + 90, dtype='complex128', order='F')
A:scipy.linalg._interpolative_backend.(k, idx, proj, ier)->scipy.linalg._interpolative.idzp_rid(eps, m, n, matveca, proj)
A:scipy.linalg._interpolative_backend.(k, ra, ier)->scipy.linalg._interpolative.idz_findrank(eps, m, n, matveca)
A:scipy.linalg._interpolative_backend.(idx, proj)->scipy.linalg._interpolative.idzr_rid(m, n, matveca, k)
A:scipy.linalg._interpolative_backend.w_->idzr_aidi(m, n, k)
scipy.linalg._interpolative_backend._asfortranarray_copy(A)
scipy.linalg._interpolative_backend.id_srand(n)
scipy.linalg._interpolative_backend.id_srandi(t)
scipy.linalg._interpolative_backend.id_srando()
scipy.linalg._interpolative_backend.idd_copycols(A,k,idx)
scipy.linalg._interpolative_backend.idd_diffsnorm(m,n,matvect,matvect2,matvec,matvec2,its=20)
scipy.linalg._interpolative_backend.idd_estrank(eps,A)
scipy.linalg._interpolative_backend.idd_findrank(eps,m,n,matvect)
scipy.linalg._interpolative_backend.idd_frm(n,w,x)
scipy.linalg._interpolative_backend.idd_frmi(m)
scipy.linalg._interpolative_backend.idd_id2svd(B,idx,proj)
scipy.linalg._interpolative_backend.idd_reconid(B,idx,proj)
scipy.linalg._interpolative_backend.idd_reconint(idx,proj)
scipy.linalg._interpolative_backend.idd_sfrm(l,n,w,x)
scipy.linalg._interpolative_backend.idd_sfrmi(l,m)
scipy.linalg._interpolative_backend.idd_snorm(m,n,matvect,matvec,its=20)
scipy.linalg._interpolative_backend.iddp_aid(eps,A)
scipy.linalg._interpolative_backend.iddp_asvd(eps,A)
scipy.linalg._interpolative_backend.iddp_id(eps,A)
scipy.linalg._interpolative_backend.iddp_rid(eps,m,n,matvect)
scipy.linalg._interpolative_backend.iddp_rsvd(eps,m,n,matvect,matvec)
scipy.linalg._interpolative_backend.iddp_svd(eps,A)
scipy.linalg._interpolative_backend.iddr_aid(A,k)
scipy.linalg._interpolative_backend.iddr_aidi(m,n,k)
scipy.linalg._interpolative_backend.iddr_asvd(A,k)
scipy.linalg._interpolative_backend.iddr_id(A,k)
scipy.linalg._interpolative_backend.iddr_rid(m,n,matvect,k)
scipy.linalg._interpolative_backend.iddr_rsvd(m,n,matvect,matvec,k)
scipy.linalg._interpolative_backend.iddr_svd(A,k)
scipy.linalg._interpolative_backend.idz_copycols(A,k,idx)
scipy.linalg._interpolative_backend.idz_diffsnorm(m,n,matveca,matveca2,matvec,matvec2,its=20)
scipy.linalg._interpolative_backend.idz_estrank(eps,A)
scipy.linalg._interpolative_backend.idz_findrank(eps,m,n,matveca)
scipy.linalg._interpolative_backend.idz_frm(n,w,x)
scipy.linalg._interpolative_backend.idz_frmi(m)
scipy.linalg._interpolative_backend.idz_id2svd(B,idx,proj)
scipy.linalg._interpolative_backend.idz_reconid(B,idx,proj)
scipy.linalg._interpolative_backend.idz_reconint(idx,proj)
scipy.linalg._interpolative_backend.idz_sfrm(l,n,w,x)
scipy.linalg._interpolative_backend.idz_sfrmi(l,m)
scipy.linalg._interpolative_backend.idz_snorm(m,n,matveca,matvec,its=20)
scipy.linalg._interpolative_backend.idzp_aid(eps,A)
scipy.linalg._interpolative_backend.idzp_asvd(eps,A)
scipy.linalg._interpolative_backend.idzp_id(eps,A)
scipy.linalg._interpolative_backend.idzp_rid(eps,m,n,matveca)
scipy.linalg._interpolative_backend.idzp_rsvd(eps,m,n,matveca,matvec)
scipy.linalg._interpolative_backend.idzp_svd(eps,A)
scipy.linalg._interpolative_backend.idzr_aid(A,k)
scipy.linalg._interpolative_backend.idzr_aidi(m,n,k)
scipy.linalg._interpolative_backend.idzr_asvd(A,k)
scipy.linalg._interpolative_backend.idzr_id(A,k)
scipy.linalg._interpolative_backend.idzr_rid(m,n,matveca,k)
scipy.linalg._interpolative_backend.idzr_rsvd(m,n,matveca,matvec,k)
scipy.linalg._interpolative_backend.idzr_svd(A,k)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/interpolative.py----------------------------------------
A:scipy.linalg.interpolative._DTYPE_ERROR->ValueError('invalid input dtype (input must be float64 or complex128)')
A:scipy.linalg.interpolative._TYPE_ERROR->TypeError('invalid input type (must be array or LinearOperator)')
A:scipy.linalg.interpolative._32BIT_ERROR->ValueError('interpolative decomposition on 32-bit systems with complex128 is buggy')
A:scipy.linalg.interpolative.state->numpy.asfortranarray(seed, dtype=float)
A:scipy.linalg.interpolative.rnd->numpy.random.RandomState(seed)
A:scipy.linalg.interpolative.real->_is_real(A)
A:scipy.linalg.interpolative.(k, idx, proj)->scipy.linalg._interpolative_backend.idzp_rid(eps, m, n, matveca)
A:scipy.linalg.interpolative.k->int(eps_or_k)
A:scipy.linalg.interpolative.(idx, proj)->scipy.linalg._interpolative_backend.idzr_rid(m, n, matveca, k)
A:scipy.linalg.interpolative.(U, V, S)->scipy.linalg._interpolative_backend.idzr_rsvd(m, n, matveca, matvec, k)
A:scipy.linalg.interpolative.A->aslinearoperator(A)
A:scipy.linalg.interpolative.B->aslinearoperator(B)
A:scipy.linalg.interpolative.rank->min(A.shape)
scipy.linalg.interpolative._is_real(A)
scipy.linalg.interpolative.estimate_rank(A,eps)
scipy.linalg.interpolative.estimate_spectral_norm(A,its=20)
scipy.linalg.interpolative.estimate_spectral_norm_diff(A,B,its=20)
scipy.linalg.interpolative.id_to_svd(B,idx,proj)
scipy.linalg.interpolative.interp_decomp(A,eps_or_k,rand=True)
scipy.linalg.interpolative.rand(*shape)
scipy.linalg.interpolative.reconstruct_interp_matrix(idx,proj)
scipy.linalg.interpolative.reconstruct_matrix_from_id(B,idx,proj)
scipy.linalg.interpolative.reconstruct_skel_matrix(A,k,idx)
scipy.linalg.interpolative.seed(seed=None)
scipy.linalg.interpolative.svd(A,eps_or_k,rand=True)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_matfuncs_inv_ssq.py----------------------------------------
A:scipy.linalg._matfuncs_inv_ssq.a->int(np.floor(p))
A:scipy.linalg._matfuncs_inv_ssq.log_l1->numpy.log(l1)
A:scipy.linalg._matfuncs_inv_ssq.log_l2->numpy.log(l2)
A:scipy.linalg._matfuncs_inv_ssq.arctanh_z->numpy.arctanh(z)
A:scipy.linalg._matfuncs_inv_ssq.tmp_u->_unwindk(log_l2 - log_l1)
A:scipy.linalg._matfuncs_inv_ssq.u->_unwindk(np.log(l2) - np.log(l1))
A:scipy.linalg._matfuncs_inv_ssq.tmp_diag->numpy.sqrt(tmp_diag)
A:scipy.linalg._matfuncs_inv_ssq.T->_logm_force_nonsingular_triangular_matrix(T, inplace=True)
A:scipy.linalg._matfuncs_inv_ssq.a2->max(d2, d3)
A:scipy.linalg._matfuncs_inv_ssq.a3->max(d3, d4)
A:scipy.linalg._matfuncs_inv_ssq.j1->min((i for i in (3, 4, 5, 6, 7) if a3 <= theta[i]))
A:scipy.linalg._matfuncs_inv_ssq.a4->max(d4, d5)
A:scipy.linalg._matfuncs_inv_ssq.eta->min(a3, a4)
A:scipy.linalg._matfuncs_inv_ssq.has_principal_branch->all((x.real > 0 or x.imag != 0 for x in np.diag(T0)))
A:scipy.linalg._matfuncs_inv_ssq.r->_briggs_helper_function(a, s)
A:scipy.linalg._matfuncs_inv_ssq.p->numpy.exp2(-s)
A:scipy.linalg._matfuncs_inv_ssq.f12->_fractional_power_superdiag_entry(l1, l2, t12, p)
A:scipy.linalg._matfuncs_inv_ssq.R->_remainder_matrix_power(A, b)
A:scipy.linalg._matfuncs_inv_ssq.ident->numpy.identity(n)
A:scipy.linalg._matfuncs_inv_ssq.Y->solve_triangular(ident + Y, rhs)
A:scipy.linalg._matfuncs_inv_ssq.T0_diag->numpy.diag(T0)
A:scipy.linalg._matfuncs_inv_ssq.U->_logm_triu(T)
A:scipy.linalg._matfuncs_inv_ssq.(R, s, m)->_inverse_squaring_helper(T0, theta)
A:scipy.linalg._matfuncs_inv_ssq.eivals->numpy.diag(T0)
A:scipy.linalg._matfuncs_inv_ssq.A->A.astype(complex).astype(complex)
A:scipy.linalg._matfuncs_inv_ssq.(T, Z)->schur(A, output='complex')
A:scipy.linalg._matfuncs_inv_ssq.T_diag->numpy.diag(T)
A:scipy.linalg._matfuncs_inv_ssq.s->svdvals(A)
A:scipy.linalg._matfuncs_inv_ssq.Q->numpy.linalg.matrix_power(A, a)
A:scipy.linalg._matfuncs_inv_ssq.X->numpy.empty_like(A)
A:scipy.linalg._matfuncs_inv_ssq.(R, info)->funm(A, lambda x: pow(x, b), disp=False)
A:scipy.linalg._matfuncs_inv_ssq.T0->_logm_force_nonsingular_triangular_matrix(T, inplace=True).astype(complex)
A:scipy.linalg._matfuncs_inv_ssq.(nodes, weights)->scipy.special.p_roots(m)
A:scipy.linalg._matfuncs_inv_ssq.U[np.diag_indices(n)]->numpy.log(np.diag(T0))
A:scipy.linalg._matfuncs_inv_ssq.U[i, i + 1]->_logm_superdiag_entry(l1, l2, t12)
A:scipy.linalg._matfuncs_inv_ssq.abs_diag->numpy.absolute(np.diag(T))
A:scipy.linalg._matfuncs_inv_ssq.keep_it_real->numpy.isrealobj(A)
scipy.linalg._matfuncs_inv_ssq.FractionalMatrixPowerError(np.linalg.LinAlgError)
scipy.linalg._matfuncs_inv_ssq.LogmError(np.linalg.LinAlgError)
scipy.linalg._matfuncs_inv_ssq.LogmExactlySingularWarning(LogmRankWarning)
scipy.linalg._matfuncs_inv_ssq.LogmNearlySingularWarning(LogmRankWarning)
scipy.linalg._matfuncs_inv_ssq.LogmRankWarning(UserWarning)
scipy.linalg._matfuncs_inv_ssq._MatrixM1PowerOperator(self,A,p)
scipy.linalg._matfuncs_inv_ssq._MatrixM1PowerOperator.__init__(self,A,p)
scipy.linalg._matfuncs_inv_ssq._MatrixM1PowerOperator._adjoint(self)
scipy.linalg._matfuncs_inv_ssq._MatrixM1PowerOperator._matmat(self,X)
scipy.linalg._matfuncs_inv_ssq._MatrixM1PowerOperator._matvec(self,x)
scipy.linalg._matfuncs_inv_ssq._MatrixM1PowerOperator._rmatvec(self,x)
scipy.linalg._matfuncs_inv_ssq._briggs_helper_function(a,k)
scipy.linalg._matfuncs_inv_ssq._fractional_matrix_power(A,p)
scipy.linalg._matfuncs_inv_ssq._fractional_power_pade(R,t,m)
scipy.linalg._matfuncs_inv_ssq._fractional_power_pade_constant(i,t)
scipy.linalg._matfuncs_inv_ssq._fractional_power_superdiag_entry(l1,l2,t12,p)
scipy.linalg._matfuncs_inv_ssq._inverse_squaring_helper(T0,theta)
scipy.linalg._matfuncs_inv_ssq._logm(A)
scipy.linalg._matfuncs_inv_ssq._logm_force_nonsingular_triangular_matrix(T,inplace=False)
scipy.linalg._matfuncs_inv_ssq._logm_superdiag_entry(l1,l2,t12)
scipy.linalg._matfuncs_inv_ssq._logm_triu(T)
scipy.linalg._matfuncs_inv_ssq._onenormest_m1_power(A,p,t=2,itmax=5,compute_v=False,compute_w=False)
scipy.linalg._matfuncs_inv_ssq._remainder_matrix_power(A,t)
scipy.linalg._matfuncs_inv_ssq._remainder_matrix_power_triu(T,t)
scipy.linalg._matfuncs_inv_ssq._unwindk(z)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/blas.py----------------------------------------
A:scipy.linalg.blas.dtype->numpy.dtype(dtype)
A:scipy.linalg.blas.max_score->max(scores)
A:scipy.linalg.blas.ind_max_score->scores.index(max_score)
A:scipy.linalg.blas.(prefix, dtype)->_type_conv.get(max_score, ('d', _np.dtype('float64')))
A:scipy.linalg.blas.(prefix, dtype, prefer_fortran)->find_best_blas_type(arrays, dtype)
A:scipy.linalg.blas.func_name->alias.get(func_name, func_name)
A:scipy.linalg.blas.func->getattr(module2[0], func_name, None)
A:scipy.linalg.blas.func.int_dtype->numpy.dtype(_np.int64)
A:scipy.linalg.blas.value->func(names, arrays, dtype, ilp64)
scipy.linalg._get_funcs(names,arrays,dtype,lib_name,fmodule,cmodule,fmodule_name,cmodule_name,alias,ilp64=False)
scipy.linalg._memoize_get_funcs(func)
scipy.linalg.blas._get_funcs(names,arrays,dtype,lib_name,fmodule,cmodule,fmodule_name,cmodule_name,alias,ilp64=False)
scipy.linalg.blas._memoize_get_funcs(func)
scipy.linalg.blas.find_best_blas_type(arrays=(),dtype=None)
scipy.linalg.blas.get_blas_funcs(names,arrays=(),dtype=None,ilp64=False)
scipy.linalg.find_best_blas_type(arrays=(),dtype=None)
scipy.linalg.get_blas_funcs(names,arrays=(),dtype=None,ilp64=False)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_misc.py----------------------------------------
A:scipy.linalg._misc.a->numpy.asarray(a)
A:scipy.linalg._misc.nrm2->get_blas_funcs('nrm2', dtype=a.dtype, ilp64='preferred')
A:scipy.linalg._misc.lange->get_lapack_funcs('lange', dtype=a.dtype, ilp64='preferred')
scipy.linalg.LinAlgWarning(RuntimeWarning)
scipy.linalg._datacopied(arr,original)
scipy.linalg._misc.LinAlgWarning(RuntimeWarning)
scipy.linalg._misc._datacopied(arr,original)
scipy.linalg._misc.norm(a,ord=None,axis=None,keepdims=False,check_finite=True)
scipy.linalg.norm(a,ord=None,axis=None,keepdims=False,check_finite=True)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_flinalg_py.py----------------------------------------
A:scipy.linalg._flinalg_py.func->getattr(_flinalg, func_name + suffix1, getattr(_flinalg, func_name + suffix2, None))
scipy.linalg._flinalg_py.get_flinalg_funcs(names,arrays=(),debug=0)
scipy.linalg._flinalg_py.has_column_major_storage(arr)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_decomp_ldl.py----------------------------------------
A:scipy.linalg._decomp_ldl.a->atleast_2d(_asarray_validated(A, check_finite=check_finite))
A:scipy.linalg._decomp_ldl.(solver, solver_lwork)->get_lapack_funcs((s, sl), (a,))
A:scipy.linalg._decomp_ldl.lwork->_compute_lwork(solver_lwork, n, lower=lower)
A:scipy.linalg._decomp_ldl.(ldu, piv, info)->solver(a, lwork=lwork, lower=lower, overwrite_a=overwrite_a)
A:scipy.linalg._decomp_ldl.(swap_arr, pivot_arr)->_ldl_sanitize_ipiv(piv, lower=lower)
A:scipy.linalg._decomp_ldl.(d, lu)->_ldl_get_d_and_l(ldu, pivot_arr, lower=lower, hermitian=hermitian)
A:scipy.linalg._decomp_ldl.(lu, perm)->_ldl_construct_tri_factor(lu, swap_arr, pivot_arr, lower=lower)
A:scipy.linalg._decomp_ldl.swap_->arange(n)
A:scipy.linalg._decomp_ldl.pivots->zeros_like(swap_, dtype=int)
A:scipy.linalg._decomp_ldl.is_c->iscomplexobj(ldu)
A:scipy.linalg._decomp_ldl.d->diag(diag(ldu))
A:scipy.linalg._decomp_ldl.diag_inds->arange(n)
A:scipy.linalg._decomp_ldl.d[blk_i + y, blk_i + x]->ldu[blk_i + x, blk_i + y].conj()
A:scipy.linalg._decomp_ldl.perm->arange(n)
scipy.linalg._decomp_ldl._ldl_construct_tri_factor(lu,swap_vec,pivs,lower=True)
scipy.linalg._decomp_ldl._ldl_get_d_and_l(ldu,pivs,lower=True,hermitian=True)
scipy.linalg._decomp_ldl._ldl_sanitize_ipiv(a,lower=True)
scipy.linalg._decomp_ldl.ldl(A,lower=True,hermitian=True,overwrite_a=False,check_finite=True)
scipy.linalg._ldl_construct_tri_factor(lu,swap_vec,pivs,lower=True)
scipy.linalg._ldl_get_d_and_l(ldu,pivs,lower=True,hermitian=True)
scipy.linalg._ldl_sanitize_ipiv(a,lower=True)
scipy.linalg.ldl(A,lower=True,hermitian=True,overwrite_a=False,check_finite=True)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_special_matrices.py----------------------------------------
A:scipy.linalg._special_matrices.m->numpy.asarray(m)
A:scipy.linalg._special_matrices.c->numpy.zeros((n, n), dtype=a.dtype)
A:scipy.linalg._special_matrices.r->numpy.asarray(r).ravel()
A:scipy.linalg._special_matrices.vals->numpy.concatenate((c, r[1:]))
A:scipy.linalg._special_matrices.c_ext->numpy.concatenate((c[::-1], c[:0:-1]))
A:scipy.linalg._special_matrices.L->len(c)
A:scipy.linalg._special_matrices.lg2->int(math.log(n, 2))
A:scipy.linalg._special_matrices.H->numpy.vstack((np.hstack((H, H)), np.hstack((H, -H))))
A:scipy.linalg._special_matrices.f->numpy.atleast_1d(f)
A:scipy.linalg._special_matrices.s->numpy.atleast_1d(s)
A:scipy.linalg._special_matrices.a->numpy.asarray(a)
A:scipy.linalg._special_matrices.b->numpy.reshape(b, b.shape)
A:scipy.linalg._special_matrices.o->o.reshape(a.shape + b.shape).reshape(a.shape + b.shape)
A:scipy.linalg._special_matrices.shapes->numpy.array([a.shape for a in arrs])
A:scipy.linalg._special_matrices.out_dtype->numpy.result_type(*[arr.dtype for arr in arrs])
A:scipy.linalg._special_matrices.out->numpy.zeros(np.sum(shapes, axis=0), dtype=out_dtype)
A:scipy.linalg._special_matrices.h->hankel(values[:n], r=values[n - 1:])
A:scipy.linalg._special_matrices.invh->numpy.empty((n, n), dtype=dtype)
A:scipy.linalg._special_matrices.L_n->comb(*np.ogrid[:n, :n])
A:scipy.linalg._special_matrices.L_n[i, j]->comb(i, j, exact=True)
A:scipy.linalg._special_matrices.p->numpy.dot(L_n, L_n.T)
A:scipy.linalg._special_matrices.invp->invp.view(np.int64).view(np.int64)
A:scipy.linalg._special_matrices.omegas->numpy.exp(-2j * np.pi * np.arange(n) / n).reshape(-1, 1)
A:scipy.linalg._special_matrices.az->numpy.pad(a, (0, n - 1), 'constant')
A:scipy.linalg._special_matrices.raz->numpy.pad(a[::-1], (0, n - 1), 'constant')
scipy.linalg._special_matrices.block_diag(*arrs)
scipy.linalg._special_matrices.circulant(c)
scipy.linalg._special_matrices.companion(a)
scipy.linalg._special_matrices.convolution_matrix(a,n,mode='full')
scipy.linalg._special_matrices.dft(n,scale=None)
scipy.linalg._special_matrices.fiedler(a)
scipy.linalg._special_matrices.fiedler_companion(a)
scipy.linalg._special_matrices.hadamard(n,dtype=int)
scipy.linalg._special_matrices.hankel(c,r=None)
scipy.linalg._special_matrices.helmert(n,full=False)
scipy.linalg._special_matrices.hilbert(n)
scipy.linalg._special_matrices.invhilbert(n,exact=False)
scipy.linalg._special_matrices.invpascal(n,kind='symmetric',exact=True)
scipy.linalg._special_matrices.kron(a,b)
scipy.linalg._special_matrices.leslie(f,s)
scipy.linalg._special_matrices.pascal(n,kind='symmetric',exact=True)
scipy.linalg._special_matrices.toeplitz(c,r=None)
scipy.linalg._special_matrices.tri(N,M=None,k=0,dtype=None)
scipy.linalg._special_matrices.tril(m,k=0)
scipy.linalg._special_matrices.triu(m,k=0)
scipy.linalg.block_diag(*arrs)
scipy.linalg.circulant(c)
scipy.linalg.companion(a)
scipy.linalg.convolution_matrix(a,n,mode='full')
scipy.linalg.dft(n,scale=None)
scipy.linalg.fiedler(a)
scipy.linalg.fiedler_companion(a)
scipy.linalg.hadamard(n,dtype=int)
scipy.linalg.hankel(c,r=None)
scipy.linalg.helmert(n,full=False)
scipy.linalg.hilbert(n)
scipy.linalg.invhilbert(n,exact=False)
scipy.linalg.invpascal(n,kind='symmetric',exact=True)
scipy.linalg.kron(a,b)
scipy.linalg.leslie(f,s)
scipy.linalg.pascal(n,kind='symmetric',exact=True)
scipy.linalg.toeplitz(c,r=None)
scipy.linalg.tri(N,M=None,k=0,dtype=None)
scipy.linalg.tril(m,k=0)
scipy.linalg.triu(m,k=0)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_decomp_cholesky.py----------------------------------------
A:scipy.linalg._decomp_cholesky.a1->atleast_2d(a1)
A:scipy.linalg._decomp_cholesky.(potrf,)->get_lapack_funcs(('potrf',), (a1,))
A:scipy.linalg._decomp_cholesky.(c, info)->pbtrf(ab, lower=lower, overwrite_ab=overwrite_ab)
A:scipy.linalg._decomp_cholesky.(c, lower)->_cholesky(a, lower=lower, overwrite_a=overwrite_a, clean=False, check_finite=check_finite)
A:scipy.linalg._decomp_cholesky.b1->asarray(b)
A:scipy.linalg._decomp_cholesky.c->asarray(c)
A:scipy.linalg._decomp_cholesky.(potrs,)->get_lapack_funcs(('potrs',), (c, b1))
A:scipy.linalg._decomp_cholesky.(x, info)->pbtrs(cb, b, lower=lower, overwrite_b=overwrite_b)
A:scipy.linalg._decomp_cholesky.ab->asarray(ab)
A:scipy.linalg._decomp_cholesky.(pbtrf,)->get_lapack_funcs(('pbtrf',), (ab,))
A:scipy.linalg._decomp_cholesky.cb->asarray(cb)
A:scipy.linalg._decomp_cholesky.b->asarray(b)
A:scipy.linalg._decomp_cholesky.(pbtrs,)->get_lapack_funcs(('pbtrs',), (cb, b))
scipy.linalg._cholesky(a,lower=False,overwrite_a=False,clean=True,check_finite=True)
scipy.linalg._decomp_cholesky._cholesky(a,lower=False,overwrite_a=False,clean=True,check_finite=True)
scipy.linalg._decomp_cholesky.cho_factor(a,lower=False,overwrite_a=False,check_finite=True)
scipy.linalg._decomp_cholesky.cho_solve(c_and_lower,b,overwrite_b=False,check_finite=True)
scipy.linalg._decomp_cholesky.cho_solve_banded(cb_and_lower,b,overwrite_b=False,check_finite=True)
scipy.linalg._decomp_cholesky.cholesky(a,lower=False,overwrite_a=False,check_finite=True)
scipy.linalg._decomp_cholesky.cholesky_banded(ab,overwrite_ab=False,lower=False,check_finite=True)
scipy.linalg.cho_factor(a,lower=False,overwrite_a=False,check_finite=True)
scipy.linalg.cho_solve(c_and_lower,b,overwrite_b=False,check_finite=True)
scipy.linalg.cho_solve_banded(cb_and_lower,b,overwrite_b=False,check_finite=True)
scipy.linalg.cholesky(a,lower=False,overwrite_a=False,check_finite=True)
scipy.linalg.cholesky_banded(ab,overwrite_ab=False,lower=False,check_finite=True)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_sketches.py----------------------------------------
A:scipy.linalg._sketches.rng->check_random_state(seed)
A:scipy.linalg._sketches.rows->rng_integers(rng, 0, n_rows, n_columns)
A:scipy.linalg._sketches.cols->numpy.arange(n_columns + 1)
A:scipy.linalg._sketches.signs->check_random_state(seed).choice([1, -1], n_columns)
A:scipy.linalg._sketches.S->cwt_matrix(sketch_size, input_matrix.shape[0], seed)
scipy.linalg._sketches.clarkson_woodruff_transform(input_matrix,sketch_size,seed=None)
scipy.linalg._sketches.cwt_matrix(n_rows,n_columns,seed=None)
scipy.linalg.clarkson_woodruff_transform(input_matrix,sketch_size,seed=None)
scipy.linalg.cwt_matrix(n_rows,n_columns,seed=None)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/__init__.py----------------------------------------
A:scipy.linalg.__init__.test->PytestTester(__name__)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/decomp_svd.py----------------------------------------
scipy.linalg.decomp_svd.__dir__()
scipy.linalg.decomp_svd.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_matfuncs.py----------------------------------------
A:scipy.linalg._matfuncs.A->_asarray_square(A)
A:scipy.linalg._matfuncs.F->_maybe_real(A, F)
A:scipy.linalg._matfuncs.a->numpy.asarray(a)
A:scipy.linalg._matfuncs.eApD2->numpy.exp((a1 + a4) / 2.0)
A:scipy.linalg._matfuncs.coshMu->numpy.cosh(mu)
A:scipy.linalg._matfuncs.sinchMu->numpy.ones_like(coshMu)
A:scipy.linalg._matfuncs.eA->numpy.empty(a.shape, dtype=a.dtype)
A:scipy.linalg._matfuncs.Am->numpy.empty((5, n, n), dtype=a.dtype)
A:scipy.linalg._matfuncs.lu->bandwidth(aw)
A:scipy.linalg._matfuncs.eA[ind]->numpy.diag(np.exp(np.diag(aw)))
A:scipy.linalg._matfuncs.(m, s)->pick_pade_structure(Am)
A:scipy.linalg._matfuncs.diag_aw->numpy.diag(aw)
A:scipy.linalg._matfuncs.np.einsum('ii->i', eAw)[:]->numpy.exp(diag_aw * 2.0 ** (-i))
A:scipy.linalg._matfuncs.sd->numpy.diag(aw, k=-1 if lu[1] == 0 else 1)
A:scipy.linalg._matfuncs.lexp_diff->numpy.diff(np.exp(x))
A:scipy.linalg._matfuncs.l_diff->numpy.diff(x)
A:scipy.linalg._matfuncs.lexp_diff[mask_z]->numpy.exp(x[:-1][mask_z])
A:scipy.linalg._matfuncs.(T, Z)->rsf2csf(T, Z)
A:scipy.linalg._matfuncs.minden->min(minden, abs(den))
A:scipy.linalg._matfuncs.ksl->slice(i, j - 1)
A:scipy.linalg._matfuncs.err->min(1, max(tol, tol / minden * norm(triu(T, 1), 1)))
A:scipy.linalg._matfuncs.rx->numpy.real(x)
A:scipy.linalg._matfuncs.(result, errest)->funm(A, rounded_sign, disp=0)
A:scipy.linalg._matfuncs.vals->svd(A, compute_uv=False)
A:scipy.linalg._matfuncs.max_sv->numpy.amax(vals)
A:scipy.linalg._matfuncs.iS0->inv(S0)
A:scipy.linalg._matfuncs.errest->norm(dot(Pp, Pp) - Pp, 1)
A:scipy.linalg._matfuncs.b->numpy.asarray(b)
scipy.linalg._asarray_square(A)
scipy.linalg._exp_sinch(x)
scipy.linalg._matfuncs._asarray_square(A)
scipy.linalg._matfuncs._exp_sinch(x)
scipy.linalg._matfuncs._maybe_real(A,B,tol=None)
scipy.linalg._matfuncs.coshm(A)
scipy.linalg._matfuncs.cosm(A)
scipy.linalg._matfuncs.expm(A)
scipy.linalg._matfuncs.fractional_matrix_power(A,t)
scipy.linalg._matfuncs.funm(A,func,disp=True)
scipy.linalg._matfuncs.khatri_rao(a,b)
scipy.linalg._matfuncs.logm(A,disp=True)
scipy.linalg._matfuncs.signm(A,disp=True)
scipy.linalg._matfuncs.sinhm(A)
scipy.linalg._matfuncs.sinm(A)
scipy.linalg._matfuncs.tanhm(A)
scipy.linalg._matfuncs.tanm(A)
scipy.linalg._maybe_real(A,B,tol=None)
scipy.linalg.coshm(A)
scipy.linalg.cosm(A)
scipy.linalg.expm(A)
scipy.linalg.fractional_matrix_power(A,t)
scipy.linalg.funm(A,func,disp=True)
scipy.linalg.khatri_rao(a,b)
scipy.linalg.logm(A,disp=True)
scipy.linalg.signm(A,disp=True)
scipy.linalg.sinhm(A)
scipy.linalg.sinm(A)
scipy.linalg.tanhm(A)
scipy.linalg.tanm(A)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/decomp_cholesky.py----------------------------------------
scipy.linalg.decomp_cholesky.__dir__()
scipy.linalg.decomp_cholesky.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/special_matrices.py----------------------------------------
scipy.linalg.special_matrices.__dir__()
scipy.linalg.special_matrices.__getattr__(name)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/_decomp_polar.py----------------------------------------
A:scipy.linalg._decomp_polar.a->numpy.asarray(a)
A:scipy.linalg._decomp_polar.(w, s, vh)->svd(a, full_matrices=False)
A:scipy.linalg._decomp_polar.u->w.dot(vh)
A:scipy.linalg._decomp_polar.p->(w * s).dot(w.T.conj())
scipy.linalg._decomp_polar.polar(a,side='right')
scipy.linalg.polar(a,side='right')


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_cython_lapack.py----------------------------------------
scipy.linalg.tests.test_cython_TestLamch
scipy.linalg.tests.test_cython_TestLamch.test_dlamch(self)
scipy.linalg.tests.test_cython_TestLamch.test_slamch(self)
scipy.linalg.tests.test_cython_lapack.TestLamch
scipy.linalg.tests.test_cython_lapack.TestLamch.test_dlamch(self)
scipy.linalg.tests.test_cython_lapack.TestLamch.test_slamch(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_decomp_polar.py----------------------------------------
A:scipy.linalg.tests.test_decomp_polar.diag2->numpy.array([[2, 0], [0, 3]])
A:scipy.linalg.tests.test_decomp_polar.a13->numpy.array([[1, 2, 2]])
A:scipy.linalg.tests.test_decomp_polar.(u, p)->polar(a, side='left')
A:scipy.linalg.tests.test_decomp_polar.product_atol->numpy.sqrt(np.finfo(float).eps)
A:scipy.linalg.tests.test_decomp_polar.aa->numpy.asarray(a)
A:scipy.linalg.tests.test_decomp_polar.evals->eigh(p, eigvals_only=True)
scipy.linalg.tests.test_decomp_polar.check_precomputed_polar(a,side,expected_u,expected_p)
scipy.linalg.tests.test_decomp_polar.test_precomputed_cases()
scipy.linalg.tests.test_decomp_polar.test_verify_cases()
scipy.linalg.tests.test_decomp_polar.verify_polar(a)
scipy.linalg.tests.testcheck_precomputed_polar(a,side,expected_u,expected_p)
scipy.linalg.tests.testtest_precomputed_cases()
scipy.linalg.tests.testtest_verify_cases()
scipy.linalg.tests.testverify_polar(a)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_interpolative.py----------------------------------------
A:scipy.linalg.tests.test_interpolative.S->numpy.linalg.svd(A, compute_uv=False)
A:scipy.linalg.tests.test_interpolative.(k, idx, proj)->scipy.linalg.interpolative.interp_decomp(A, eps)
A:scipy.linalg.tests.test_interpolative.B->numpy.array([[-1, -1, -1, 0, 0, 0], [0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0], [0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1]], dtype=dtype, order='C').copy()
A:scipy.linalg.tests.test_interpolative.(idx, proj)->scipy.linalg.interpolative.interp_decomp(A, k)
A:scipy.linalg.tests.test_interpolative.P->scipy.linalg.interpolative.reconstruct_interp_matrix(idx, proj)
A:scipy.linalg.tests.test_interpolative.(U, S, V)->scipy.linalg.interpolative.id_to_svd(A[:, idx[:k]], idx, proj)
A:scipy.linalg.tests.test_interpolative.s->svdvals(A - B)
A:scipy.linalg.tests.test_interpolative.norm_2_est->scipy.linalg.interpolative.estimate_spectral_norm_diff(A, B)
A:scipy.linalg.tests.test_interpolative.rank_np->numpy.linalg.matrix_rank(M, norm(M, 2) * rank_tol)
A:scipy.linalg.tests.test_interpolative.rank_est->scipy.linalg.interpolative.estimate_rank(ML, rank_tol)
A:scipy.linalg.tests.test_interpolative.ML->aslinearoperator(M)
A:scipy.linalg.tests.test_interpolative.x1->scipy.linalg.interpolative.rand(2)
A:scipy.linalg.tests.test_interpolative.x2->scipy.linalg.interpolative.rand(2)
A:scipy.linalg.tests.test_interpolative.x3->scipy.linalg.interpolative.rand(2)
A:scipy.linalg.tests.test_interpolative.A->numpy.array([[-1, -1, -1, 0, 0, 0], [0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0], [0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1]], dtype=dtype, order='C')
A:scipy.linalg.tests.test_interpolative.a->numpy.ones((4, 3))
scipy.linalg.tests.test_interpolative.A(request)
scipy.linalg.tests.test_interpolative.L(A)
scipy.linalg.tests.test_interpolative.TestInterpolativeDecomposition
scipy.linalg.tests.test_interpolative.TestInterpolativeDecomposition.test_badcall(self)
scipy.linalg.tests.test_interpolative.TestInterpolativeDecomposition.test_bug_9793(self,dtype,rand,eps)
scipy.linalg.tests.test_interpolative.TestInterpolativeDecomposition.test_estimate_spectral_norm(self,A)
scipy.linalg.tests.test_interpolative.TestInterpolativeDecomposition.test_estimate_spectral_norm_diff(self,A)
scipy.linalg.tests.test_interpolative.TestInterpolativeDecomposition.test_full_rank(self)
scipy.linalg.tests.test_interpolative.TestInterpolativeDecomposition.test_id_to_svd(self,A,eps,rank)
scipy.linalg.tests.test_interpolative.TestInterpolativeDecomposition.test_rand(self)
scipy.linalg.tests.test_interpolative.TestInterpolativeDecomposition.test_rank_estimates_array(self,A)
scipy.linalg.tests.test_interpolative.TestInterpolativeDecomposition.test_rank_estimates_lin_op(self,A)
scipy.linalg.tests.test_interpolative.TestInterpolativeDecomposition.test_rank_too_large(self)
scipy.linalg.tests.test_interpolative.TestInterpolativeDecomposition.test_real_id_fixed_precision(self,A,L,eps,rand,lin_op)
scipy.linalg.tests.test_interpolative.TestInterpolativeDecomposition.test_real_id_fixed_rank(self,A,L,eps,rank,rand,lin_op)
scipy.linalg.tests.test_interpolative.TestInterpolativeDecomposition.test_real_id_skel_and_interp_matrices(self,A,L,eps,rank,rand,lin_op)
scipy.linalg.tests.test_interpolative.TestInterpolativeDecomposition.test_svd_fixed_precison(self,A,L,eps,rand,lin_op)
scipy.linalg.tests.test_interpolative.TestInterpolativeDecomposition.test_svd_fixed_rank(self,A,L,eps,rank,rand,lin_op)
scipy.linalg.tests.test_interpolative.eps()
scipy.linalg.tests.test_interpolative.rank(A,eps)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_misc.py----------------------------------------
scipy.linalg.tests.test_misc.test_norm()
scipy.linalg.tests.testtest_norm()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_solve_toeplitz.py----------------------------------------
A:scipy.linalg.tests.test_solve_toeplitz.random->numpy.random.RandomState(1234)
A:scipy.linalg.tests.test_solve_toeplitz.c->numpy.random.RandomState(1234).randn(n)
A:scipy.linalg.tests.test_solve_toeplitz.r->numpy.random.RandomState(1234).randn(n)
A:scipy.linalg.tests.test_solve_toeplitz.y->numpy.random.RandomState(1234).randn(n)
A:scipy.linalg.tests.test_solve_toeplitz.actual->solve_toeplitz((c, r), y)
A:scipy.linalg.tests.test_solve_toeplitz.desired->solve(toeplitz(c, r=r), y)
A:scipy.linalg.tests.test_solve_toeplitz.y_d->numpy.random.RandomState(1234).randn(10)
A:scipy.linalg.tests.test_solve_toeplitz.y_d_concat->numpy.concatenate((y_d[-2:0:-1], y_d[:-1]))
A:scipy.linalg.tests.test_solve_toeplitz.y_z_concat->numpy.concatenate((y_z[-2:0:-1].conj(), y_z[:-1]))
A:scipy.linalg.tests.test_solve_toeplitz.(_, ref_d)->levinson(y_d_concat, b=y_d[1:])
A:scipy.linalg.tests.test_solve_toeplitz.(_, ref_z)->levinson(y_z_concat, b=y_z[1:])
A:scipy.linalg.tests.test_solve_toeplitz.solution1->solve_toeplitz(c, b=y)
A:scipy.linalg.tests.test_solve_toeplitz.solution2->solve(toeplitz(c), y)
scipy.linalg.tests.test_solve_toeplitz.test_multiple_rhs()
scipy.linalg.tests.test_solve_toeplitz.test_native_list_arguments()
scipy.linalg.tests.test_solve_toeplitz.test_reflection_coeffs()
scipy.linalg.tests.test_solve_toeplitz.test_solve_equivalence()
scipy.linalg.tests.test_solve_toeplitz.test_unstable()
scipy.linalg.tests.test_solve_toeplitz.test_wikipedia_counterexample()
scipy.linalg.tests.test_solve_toeplitz.test_zero_diag_error()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_cython_blas.py----------------------------------------
A:scipy.linalg.tests.test_cython_blas.a->numpy.arange(6, dtype='d').reshape((3, 2))
A:scipy.linalg.tests.test_cython_blas.b->numpy.arange(-6, 2, dtype='d').reshape((2, 4))
A:scipy.linalg.tests.test_cython_blas.c->numpy.empty((3, 4))
A:scipy.linalg.tests.test_cython_blas.cx->numpy.array([0.5 + 1j, 0.25 - 0.375j, 13.0 - 4j], np.complex128)
A:scipy.linalg.tests.test_cython_blas.cy->numpy.array([0.875 + 2j, 0.875 - 0.625j, -1.0 + 2j], np.complex128)
A:scipy.linalg.tests.test_cython_blas.x->numpy.array([5.0, -3, -0.5], np.float32)
A:scipy.linalg.tests.test_cython_blas.y->numpy.array([2, 1, 0.5], np.float32)
scipy.linalg.tests.test_cython_TestDGEMM
scipy.linalg.tests.test_cython_TestDGEMM.test_shapes(self)
scipy.linalg.tests.test_cython_TestDGEMM.test_transposes(self)
scipy.linalg.tests.test_cython_TestWfuncPointers
scipy.linalg.tests.test_cython_TestWfuncPointers.test_complex_args(self)
scipy.linalg.tests.test_cython_TestWfuncPointers.test_double_args(self)
scipy.linalg.tests.test_cython_TestWfuncPointers.test_double_complex_args(self)
scipy.linalg.tests.test_cython_TestWfuncPointers.test_float_args(self)
scipy.linalg.tests.test_cython_blas.TestDGEMM
scipy.linalg.tests.test_cython_blas.TestDGEMM.test_shapes(self)
scipy.linalg.tests.test_cython_blas.TestDGEMM.test_transposes(self)
scipy.linalg.tests.test_cython_blas.TestWfuncPointers
scipy.linalg.tests.test_cython_blas.TestWfuncPointers.test_complex_args(self)
scipy.linalg.tests.test_cython_blas.TestWfuncPointers.test_double_args(self)
scipy.linalg.tests.test_cython_blas.TestWfuncPointers.test_double_complex_args(self)
scipy.linalg.tests.test_cython_blas.TestWfuncPointers.test_float_args(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_cythonized_array_utils.py----------------------------------------
A:scipy.linalg.tests.test_cythonized_array_utils.A->numpy.arange(1, 10).astype(complex).reshape(3, 3)
A:scipy.linalg.tests.test_cythonized_array_utils._->bandwidth(A)
A:scipy.linalg.tests.test_cythonized_array_utils.R->numpy.zeros([n, m], dtype=T, order='F')
A:scipy.linalg.tests.test_cythonized_array_utils.rng->numpy.random.RandomState(987654321)
A:scipy.linalg.tests.test_cythonized_array_utils.x->numpy.random.RandomState(987654321).uniform(high=5.0, size=[n, n])
A:scipy.linalg.tests.test_cythonized_array_utils.p->numpy.random.RandomState(987654321).standard_normal([n, n])
scipy.linalg.tests.test_cythonized_array_utils.test_bandwidth_dtypes()
scipy.linalg.tests.test_cythonized_array_utils.test_bandwidth_non2d_input()
scipy.linalg.tests.test_cythonized_array_utils.test_bandwidth_rect_inputs(T)
scipy.linalg.tests.test_cythonized_array_utils.test_bandwidth_square_inputs(T)
scipy.linalg.tests.test_cythonized_array_utils.test_ishermitian_approximate_results()
scipy.linalg.tests.test_cythonized_array_utils.test_ishermitian_complex_decimals()
scipy.linalg.tests.test_cythonized_array_utils.test_issymetric_complex_decimals()
scipy.linalg.tests.test_cythonized_array_utils.test_issymetric_ishermitian_dtypes()
scipy.linalg.tests.test_cythonized_array_utils.test_issymmetric_approximate_results()
scipy.linalg.tests.test_cythonized_array_utils.test_issymmetric_ishermitian_invalid_input()
scipy.linalg.tests.testtest_bandwidth_dtypes()
scipy.linalg.tests.testtest_bandwidth_non2d_input()
scipy.linalg.tests.testtest_bandwidth_rect_inputs(T)
scipy.linalg.tests.testtest_bandwidth_square_inputs(T)
scipy.linalg.tests.testtest_ishermitian_approximate_results()
scipy.linalg.tests.testtest_ishermitian_complex_decimals()
scipy.linalg.tests.testtest_issymetric_complex_decimals()
scipy.linalg.tests.testtest_issymetric_ishermitian_dtypes()
scipy.linalg.tests.testtest_issymmetric_approximate_results()
scipy.linalg.tests.testtest_issymmetric_ishermitian_invalid_input()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_procrustes.py----------------------------------------
A:scipy.linalg.tests.test_procrustes.A->numpy.dot(B, V.T)
A:scipy.linalg.tests.test_procrustes.B->numpy.random.randn(m, n)
A:scipy.linalg.tests.test_procrustes.A_good->numpy.random.randn(m, n)
A:scipy.linalg.tests.test_procrustes.B_good->numpy.random.randn(m, n)
A:scipy.linalg.tests.test_procrustes.A_bad->numpy.random.randn(m, n).copy()
A:scipy.linalg.tests.test_procrustes.B_bad->numpy.random.randn(m, n).copy()
A:scipy.linalg.tests.test_procrustes.A_orig->numpy.array([[4, -2], [4, -4], [4, -6], [2, -6]], dtype=float)
A:scipy.linalg.tests.test_procrustes.B_orig->numpy.array([[1, 3], [1, 2], [1, 1], [2, 1]], dtype=float)
A:scipy.linalg.tests.test_procrustes.(R_orig, s)->orthogonal_procrustes(A_orig, B_orig)
A:scipy.linalg.tests.test_procrustes.(R, s)->orthogonal_procrustes(A, B)
A:scipy.linalg.tests.test_procrustes.A_arr->numpy.random.randn(m, n)
A:scipy.linalg.tests.test_procrustes.B_arr->numpy.random.randn(m, n)
A:scipy.linalg.tests.test_procrustes.(R_arr, s)->orthogonal_procrustes(A_arr, B_arr)
A:scipy.linalg.tests.test_procrustes.AR_arr->numpy.random.randn(m, n).dot(R_arr)
A:scipy.linalg.tests.test_procrustes.AR->numpy.random.randn(m, n).dot(R)
A:scipy.linalg.tests.test_procrustes.X->numpy.random.randn(n, n)
A:scipy.linalg.tests.test_procrustes.(w, V)->eigh(X.T + X)
A:scipy.linalg.tests.test_procrustes.(R_prime, s)->orthogonal_procrustes(A_perturbed, B)
A:scipy.linalg.tests.test_procrustes.naive_approx->A_perturbed.dot(R)
A:scipy.linalg.tests.test_procrustes.optim_approx->A_perturbed.dot(R_prime)
A:scipy.linalg.tests.test_procrustes.naive_approx_error->norm(naive_approx - B, ord='fro')
A:scipy.linalg.tests.test_procrustes.optim_approx_error->norm(optim_approx - B, ord='fro')
A:scipy.linalg.tests.test_procrustes.mu->numpy.dot(B, V.T).mean(axis=0)
A:scipy.linalg.tests.test_procrustes.(A, A_mu)->_centered(A_orig)
A:scipy.linalg.tests.test_procrustes.(B, B_mu)->_centered(B_orig)
A:scipy.linalg.tests.test_procrustes.expected->numpy.array([[3, 21], [-18, 0], [3, -21], [24, 0]], dtype=float)
A:scipy.linalg.tests.test_procrustes.AB_disparity->numpy.square(norm(B_approx - B_orig) / norm(B))
A:scipy.linalg.tests.test_procrustes.BA_disparity->numpy.square(norm(A_approx - A_orig) / norm(A))
A:scipy.linalg.tests.test_procrustes.B_standardized->numpy.array([[-0.13363062, 0.6681531], [-0.13363062, 0.13363062], [-0.13363062, -0.40089186], [0.40089186, -0.40089186]])
scipy.linalg.tests.test_centered(A)
scipy.linalg.tests.test_procrustes._centered(A)
scipy.linalg.tests.test_procrustes.test_orthogonal_procrustes()
scipy.linalg.tests.test_procrustes.test_orthogonal_procrustes_array_conversion()
scipy.linalg.tests.test_procrustes.test_orthogonal_procrustes_checkfinite_exception()
scipy.linalg.tests.test_procrustes.test_orthogonal_procrustes_exact_example()
scipy.linalg.tests.test_procrustes.test_orthogonal_procrustes_ndim_too_large()
scipy.linalg.tests.test_procrustes.test_orthogonal_procrustes_ndim_too_small()
scipy.linalg.tests.test_procrustes.test_orthogonal_procrustes_scale_invariance()
scipy.linalg.tests.test_procrustes.test_orthogonal_procrustes_shape_mismatch()
scipy.linalg.tests.test_procrustes.test_orthogonal_procrustes_skbio_example()
scipy.linalg.tests.test_procrustes.test_orthogonal_procrustes_stretched_example()
scipy.linalg.tests.testtest_orthogonal_procrustes()
scipy.linalg.tests.testtest_orthogonal_procrustes_array_conversion()
scipy.linalg.tests.testtest_orthogonal_procrustes_checkfinite_exception()
scipy.linalg.tests.testtest_orthogonal_procrustes_exact_example()
scipy.linalg.tests.testtest_orthogonal_procrustes_ndim_too_large()
scipy.linalg.tests.testtest_orthogonal_procrustes_ndim_too_small()
scipy.linalg.tests.testtest_orthogonal_procrustes_scale_invariance()
scipy.linalg.tests.testtest_orthogonal_procrustes_shape_mismatch()
scipy.linalg.tests.testtest_orthogonal_procrustes_skbio_example()
scipy.linalg.tests.testtest_orthogonal_procrustes_stretched_example()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_sketches.py----------------------------------------
A:scipy.linalg.tests.test_sketches.rng->numpy.random.RandomState(seed=1179103485)
A:scipy.linalg.tests.test_sketches.A_dense->numpy.random.RandomState(seed=1179103485).randn(n_rows, n_cols)
A:scipy.linalg.tests.test_sketches.A_csc->rand(n_rows, n_cols, density=density, format='csc', random_state=rng)
A:scipy.linalg.tests.test_sketches.A_csr->rand(n_rows, n_cols, density=density, format='csr', random_state=rng)
A:scipy.linalg.tests.test_sketches.A_coo->rand(n_rows, n_cols, density=density, format='coo', random_state=rng)
A:scipy.linalg.tests.test_sketches.sketch->clarkson_woodruff_transform(self.x, n_sketch_rows, seed=seed)
A:scipy.linalg.tests.test_sketches.S1->cwt_matrix(self.n_sketch_rows, self.n_rows, seed=seed).toarray()
A:scipy.linalg.tests.test_sketches.S2->cwt_matrix(self.n_sketch_rows, self.n_rows, seed=seed).toarray()
A:scipy.linalg.tests.test_sketches.sketch1->sketch1.toarray().toarray()
A:scipy.linalg.tests.test_sketches.sketch2->sketch2.toarray().toarray()
A:scipy.linalg.tests.test_sketches.true_norm->numpy.linalg.norm(self.x)
A:scipy.linalg.tests.test_sketches.sketch_norm->numpy.linalg.norm(sketch)
A:scipy.linalg.tests.test_sketches.n_sketch_rows->int(np.ceil(2.0 / (0.01 * 0.5 ** 2)))
scipy.linalg.tests.testTestClarksonWoodruffTransform
scipy.linalg.tests.testTestClarksonWoodruffTransform.test_seed_returns_identical_transform_matrix(self)
scipy.linalg.tests.testTestClarksonWoodruffTransform.test_seed_returns_identically(self)
scipy.linalg.tests.testTestClarksonWoodruffTransform.test_sketch_dimensions(self)
scipy.linalg.tests.testTestClarksonWoodruffTransform.test_sketch_preserves_frobenius_norm(self)
scipy.linalg.tests.testTestClarksonWoodruffTransform.test_sketch_preserves_vector_norm(self)
scipy.linalg.tests.test_sketches.TestClarksonWoodruffTransform
scipy.linalg.tests.test_sketches.TestClarksonWoodruffTransform.test_seed_returns_identical_transform_matrix(self)
scipy.linalg.tests.test_sketches.TestClarksonWoodruffTransform.test_seed_returns_identically(self)
scipy.linalg.tests.test_sketches.TestClarksonWoodruffTransform.test_sketch_dimensions(self)
scipy.linalg.tests.test_sketches.TestClarksonWoodruffTransform.test_sketch_preserves_frobenius_norm(self)
scipy.linalg.tests.test_sketches.TestClarksonWoodruffTransform.test_sketch_preserves_vector_norm(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_matfuncs.py----------------------------------------
A:scipy.linalg.tests.test_matfuncs.A->numpy.random.randn(n, n)
A:scipy.linalg.tests.test_matfuncs.a->array([[1, 2], [3, 4]])
A:scipy.linalg.tests.test_matfuncs.cr->array([[11.94933333, -2.24533333, 15.31733333, 21.65333333, -2.24533333], [-3.84266667, 0.49866667, -4.59066667, -7.18666667, 0.49866667], [-4.08, 0.56, -4.92, -7.6, 0.56], [-4.03466667, 1.04266667, -5.59866667, -7.02666667, 1.04266667], [4.15733333, -0.50133333, 4.90933333, 7.81333333, -0.50133333]])
A:scipy.linalg.tests.test_matfuncs.r->signm(a)
A:scipy.linalg.tests.test_matfuncs.(A_logm, info)->logm(A, disp=False)
A:scipy.linalg.tests.test_matfuncs.A_round_trip->fractional_matrix_power(A_power, 1 / p)
A:scipy.linalg.tests.test_matfuncs.(A_funm_log, info)->funm(A, np.log, disp=False)
A:scipy.linalg.tests.test_matfuncs.M_unscaled->numpy.random.randn(n, n)
A:scipy.linalg.tests.test_matfuncs.W->scipy.linalg.eigvals(matrix_as_list)
A:scipy.linalg.tests.test_matfuncs.err_msg->'M:{0} eivals:{1}'.format(M, W)
A:scipy.linalg.tests.test_matfuncs.(M_sqrtm, info)->sqrtm(M, disp=False)
A:scipy.linalg.tests.test_matfuncs.M_sqrtm_round_trip->M_sqrtm.dot(M_sqrtm)
A:scipy.linalg.tests.test_matfuncs.(M_logm, info)->logm(M, disp=False)
A:scipy.linalg.tests.test_matfuncs.M_logm_round_trip->expm(M_logm)
A:scipy.linalg.tests.test_matfuncs.M_round_trip->numpy.linalg.matrix_power(M_one_fifth, 5)
A:scipy.linalg.tests.test_matfuncs.X->expm(A)
A:scipy.linalg.tests.test_matfuncs.w->scipy.linalg.eigvals(X)
A:scipy.linalg.tests.test_matfuncs.(Y, info)->logm(X, disp=False)
A:scipy.linalg.tests.test_matfuncs.B->sqrtm(A, disp=True)
A:scipy.linalg.tests.test_matfuncs.(L, info)->assert_warns(expected_warning, logm, M, disp=False)
A:scipy.linalg.tests.test_matfuncs.E->numpy.random.exponential(size=(n, n))
A:scipy.linalg.tests.test_matfuncs.M->numpy.vstack([np.hstack([A, E]), np.hstack([np.zeros_like(A), A])])
A:scipy.linalg.tests.test_matfuncs.se->sqrt(e)
A:scipy.linalg.tests.test_matfuncs.sa->array([[1, 0, 0, 0.5], [0, se, 0, 0], [0, 0, se, 0], [0, 0, 0, 1]])
A:scipy.linalg.tests.test_matfuncs.(A_sqrtm, info)->sqrtm(A, disp=False)
A:scipy.linalg.tests.test_matfuncs.(A_sqrtm_default, info)->sqrtm(A, disp=False, blocksize=n)
A:scipy.linalg.tests.test_matfuncs.(A_sqrtm_new, info)->sqrtm(A, disp=False, blocksize=blocksize)
A:scipy.linalg.tests.test_matfuncs.(B_sqrtm, info)->sqrtm(B, disp=False)
A:scipy.linalg.tests.test_matfuncs.R->numpy.zeros((2, 2))
A:scipy.linalg.tests.test_matfuncs.M_root->fractional_matrix_power(M, 1 / p)
A:scipy.linalg.tests.test_matfuncs.M_one_fifth->fractional_matrix_power(M, 0.2)
A:scipy.linalg.tests.test_matfuncs.Y->numpy.linalg.matrix_power(M_one_fifth, 19)
A:scipy.linalg.tests.test_matfuncs.n->numpy.random.randint(2, 5)
A:scipy.linalg.tests.test_matfuncs.p->numpy.reshape(p, A.shape)
A:scipy.linalg.tests.test_matfuncs.matrix_scale->numpy.exp(random.randrange(-4, 5))
A:scipy.linalg.tests.test_matfuncs.A_power->fractional_matrix_power(A, p)
A:scipy.linalg.tests.test_matfuncs.A_power_expm_logm->expm(A_logm * p)
A:scipy.linalg.tests.test_matfuncs.(A_funm_sqrt, info)->funm(A, np.sqrt, disp=False)
A:scipy.linalg.tests.test_matfuncs.A_rem_power->scipy.linalg._matfuncs_inv_ssq._remainder_matrix_power(A, 0.5)
A:scipy.linalg.tests.test_matfuncs.x_observed->scipy.linalg._matfuncs_inv_ssq._briggs_helper_function(a, k)
A:scipy.linalg.tests.test_matfuncs.elt->expm(1)
A:scipy.linalg.tests.test_matfuncs.result->expm(A)
A:scipy.linalg.tests.test_matfuncs.a_res->numpy.array([[[(E ** 4 + 1) / (2 * E), (E ** 4 - 1) / E], [(E ** 4 - 1) / 4 / E, (E ** 4 + 1) / (2 * E)]], [[1 / (4 * E ** 2) + 3 * E ** 2 / 4, 3 * E ** 2 / 4 - 3 / (4 * E ** 2)], [E ** 2 / 4 - 1 / (4 * E ** 2), 3 / (4 * E ** 2) + E ** 2 / 4]], [[3 / (4 * E) + E ** 7 / 4, -3 / (8 * E) + 3 * E ** 7 / 8], [-1 / (2 * E) + E ** 7 / 2, 1 / (4 * E) + 3 * E ** 7 / 4]], [[5 / (8 * E ** 2) + 3 * E ** 6 / 8, -3 / (8 * E ** 2) + 3 * E ** 6 / 8], [-5 / (8 * E ** 2) + 5 * E ** 6 / 8, 3 / (8 * E ** 2) + 5 * E ** 6 / 8]], [[-3 / (2 * E) + 5 * E / 2, -5 / (2 * E) + 5 * E / 2], [3 / (2 * E) - 3 * E / 2, 5 / (2 * E) - 3 * E / 2]]])
A:scipy.linalg.tests.test_matfuncs.expected_expm->scipy.linalg.expm(A)
A:scipy.linalg.tests.test_matfuncs.(observed_expm, observed_frechet)->expm_frechet(A, E)
A:scipy.linalg.tests.test_matfuncs.M_original->numpy.array([[1, 2, 3, 4], [5, 6, 7, 8], [0, 0, 1, 2], [0, 0, 5, 6]], dtype=float)
A:scipy.linalg.tests.test_matfuncs.A_original->rfunc(size=(n, n))
A:scipy.linalg.tests.test_matfuncs.E_original->rfunc(size=(n, n))
A:scipy.linalg.tests.test_matfuncs.A_original_norm_1->scipy.linalg.norm(A_original, 1)
A:scipy.linalg.tests.test_matfuncs.m_neighbor_pairs->zip(selected_m_list[:-1], selected_m_list[1:])
A:scipy.linalg.tests.test_matfuncs.rfunc->random.choice(rfuncs)
A:scipy.linalg.tests.test_matfuncs.target_norm_1->random.expovariate(1.0)
A:scipy.linalg.tests.test_matfuncs.(sps_expm, sps_frechet)->expm_frechet(A, E, method='SPS')
A:scipy.linalg.tests.test_matfuncs.(blockEnlarge_expm, blockEnlarge_frechet)->expm_frechet(A, E, method='blockEnlarge')
A:scipy.linalg.tests.test_matfuncs.p_norm->norm(p)
A:scipy.linalg.tests.test_matfuncs.X_prime->f(A + perturbation)
A:scipy.linalg.tests.test_matfuncs.kappa->expm_cond(A)
A:scipy.linalg.tests.test_matfuncs.A_norm->scipy.linalg.norm(A)
A:scipy.linalg.tests.test_matfuncs.X_norm->scipy.linalg.norm(X)
A:scipy.linalg.tests.test_matfuncs.f->functools.partial(_help_expm_cond_search, A, A_norm, X, X_norm, eps)
A:scipy.linalg.tests.test_matfuncs.guess->numpy.ones(n * n)
A:scipy.linalg.tests.test_matfuncs.out->minimize(f, guess, method='L-BFGS-B')
A:scipy.linalg.tests.test_matfuncs.yopt->f(xopt)
A:scipy.linalg.tests.test_matfuncs.p_best_relerr->_relative_error(expm, A, p_best)
A:scipy.linalg.tests.test_matfuncs.p_rand_relerr->_relative_error(expm, A, p_rand)
A:scipy.linalg.tests.test_matfuncs.b->array([[5, 6], [7, 8]])
A:scipy.linalg.tests.test_matfuncs.res1->khatri_rao(a, b)
scipy.linalg.tests.testTestExpM
scipy.linalg.tests.testTestExpM.test_2x2_input(self)
scipy.linalg.tests.testTestExpM.test_empty_matrix_input(self)
scipy.linalg.tests.testTestExpM.test_nx2x2_input(self)
scipy.linalg.tests.testTestExpM.test_single_elt(self)
scipy.linalg.tests.testTestExpM.test_zero(self)
scipy.linalg.tests.testTestExpmConditionNumber
scipy.linalg.tests.testTestExpmConditionNumber.test_expm_bad_condition_number(self)
scipy.linalg.tests.testTestExpmConditionNumber.test_expm_cond_fuzz(self)
scipy.linalg.tests.testTestExpmConditionNumber.test_expm_cond_smoke(self)
scipy.linalg.tests.testTestExpmConditionNumber.test_univariate(self)
scipy.linalg.tests.testTestExpmFrechet
scipy.linalg.tests.testTestExpmFrechet.test_expm_frechet(self)
scipy.linalg.tests.testTestExpmFrechet.test_fuzz(self)
scipy.linalg.tests.testTestExpmFrechet.test_medium_matrix(self)
scipy.linalg.tests.testTestExpmFrechet.test_problematic_matrix(self)
scipy.linalg.tests.testTestExpmFrechet.test_small_norm_expm_frechet(self)
scipy.linalg.tests.testTestFractionalMatrixPower
scipy.linalg.tests.testTestFractionalMatrixPower.test_al_mohy_higham_2012_experiment_1(self)
scipy.linalg.tests.testTestFractionalMatrixPower.test_briggs_helper_function(self)
scipy.linalg.tests.testTestFractionalMatrixPower.test_larger_abs_fractional_matrix_powers(self)
scipy.linalg.tests.testTestFractionalMatrixPower.test_opposite_sign_complex_eigenvalues(self)
scipy.linalg.tests.testTestFractionalMatrixPower.test_random_matrices_and_powers(self)
scipy.linalg.tests.testTestFractionalMatrixPower.test_round_trip_random_complex(self)
scipy.linalg.tests.testTestFractionalMatrixPower.test_round_trip_random_float(self)
scipy.linalg.tests.testTestFractionalMatrixPower.test_singular(self)
scipy.linalg.tests.testTestFractionalMatrixPower.test_type_conversion_mixed_sign_or_complex_spectrum(self)
scipy.linalg.tests.testTestFractionalMatrixPower.test_type_preservation_and_conversion(self)
scipy.linalg.tests.testTestKhatriRao
scipy.linalg.tests.testTestKhatriRao.test_basic(self)
scipy.linalg.tests.testTestKhatriRao.test_equality_of_two_equations(self)
scipy.linalg.tests.testTestKhatriRao.test_number_of_columns_equality(self)
scipy.linalg.tests.testTestKhatriRao.test_to_assure_2d_array(self)
scipy.linalg.tests.testTestLogM
scipy.linalg.tests.testTestLogM.test_al_mohy_higham_2012_experiment_1_funm_log(self)
scipy.linalg.tests.testTestLogM.test_al_mohy_higham_2012_experiment_1_logm(self)
scipy.linalg.tests.testTestLogM.test_complex_spectrum_real_logm(self)
scipy.linalg.tests.testTestLogM.test_exactly_singular(self)
scipy.linalg.tests.testTestLogM.test_logm_type_preservation_and_conversion(self)
scipy.linalg.tests.testTestLogM.test_nearly_singular(self)
scipy.linalg.tests.testTestLogM.test_nils(self)
scipy.linalg.tests.testTestLogM.test_opposite_sign_complex_eigenvalues(self)
scipy.linalg.tests.testTestLogM.test_real_mixed_sign_spectrum(self)
scipy.linalg.tests.testTestLogM.test_round_trip_random_complex(self)
scipy.linalg.tests.testTestLogM.test_round_trip_random_float(self)
scipy.linalg.tests.testTestSignM
scipy.linalg.tests.testTestSignM.test_defective1(self)
scipy.linalg.tests.testTestSignM.test_defective2(self)
scipy.linalg.tests.testTestSignM.test_defective3(self)
scipy.linalg.tests.testTestSignM.test_nils(self)
scipy.linalg.tests.testTestSqrtM
scipy.linalg.tests.testTestSqrtM.test_al_mohy_higham_2012_experiment_1(self)
scipy.linalg.tests.testTestSqrtM.test_bad(self)
scipy.linalg.tests.testTestSqrtM.test_blocksizes(self)
scipy.linalg.tests.testTestSqrtM.test_data_size_preservation_comp_in_comp_out(self)
scipy.linalg.tests.testTestSqrtM.test_data_size_preservation_float_in_comp_out(self)
scipy.linalg.tests.testTestSqrtM.test_data_size_preservation_float_in_float_out(self)
scipy.linalg.tests.testTestSqrtM.test_data_size_preservation_int_in_comp_out(self)
scipy.linalg.tests.testTestSqrtM.test_data_size_preservation_int_in_float_out(self)
scipy.linalg.tests.testTestSqrtM.test_data_size_preservation_uint_in_float_out(self)
scipy.linalg.tests.testTestSqrtM.test_disp(self)
scipy.linalg.tests.testTestSqrtM.test_gh4866(self)
scipy.linalg.tests.testTestSqrtM.test_gh5336(self)
scipy.linalg.tests.testTestSqrtM.test_gh7839(self)
scipy.linalg.tests.testTestSqrtM.test_opposite_sign_complex_eigenvalues(self)
scipy.linalg.tests.testTestSqrtM.test_round_trip_random_complex(self)
scipy.linalg.tests.testTestSqrtM.test_round_trip_random_float(self)
scipy.linalg.tests.testTestSqrtM.test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum(self)
scipy.linalg.tests.testTestSqrtM.test_sqrtm_type_preservation_and_conversion(self)
scipy.linalg.tests.testTestSqrtM.test_strict_upper_triangular(self)
scipy.linalg.tests.testTestSqrtM.test_weird_matrix(self)
scipy.linalg.tests.test_get_al_mohy_higham_2012_experiment_1()
scipy.linalg.tests.test_help_expm_cond_search(A,A_norm,X,X_norm,eps,p)
scipy.linalg.tests.test_matfuncs.TestExpM
scipy.linalg.tests.test_matfuncs.TestExpM.test_2x2_input(self)
scipy.linalg.tests.test_matfuncs.TestExpM.test_empty_matrix_input(self)
scipy.linalg.tests.test_matfuncs.TestExpM.test_nx2x2_input(self)
scipy.linalg.tests.test_matfuncs.TestExpM.test_single_elt(self)
scipy.linalg.tests.test_matfuncs.TestExpM.test_zero(self)
scipy.linalg.tests.test_matfuncs.TestExpmConditionNumber
scipy.linalg.tests.test_matfuncs.TestExpmConditionNumber.test_expm_bad_condition_number(self)
scipy.linalg.tests.test_matfuncs.TestExpmConditionNumber.test_expm_cond_fuzz(self)
scipy.linalg.tests.test_matfuncs.TestExpmConditionNumber.test_expm_cond_smoke(self)
scipy.linalg.tests.test_matfuncs.TestExpmConditionNumber.test_univariate(self)
scipy.linalg.tests.test_matfuncs.TestExpmFrechet
scipy.linalg.tests.test_matfuncs.TestExpmFrechet.test_expm_frechet(self)
scipy.linalg.tests.test_matfuncs.TestExpmFrechet.test_fuzz(self)
scipy.linalg.tests.test_matfuncs.TestExpmFrechet.test_medium_matrix(self)
scipy.linalg.tests.test_matfuncs.TestExpmFrechet.test_problematic_matrix(self)
scipy.linalg.tests.test_matfuncs.TestExpmFrechet.test_small_norm_expm_frechet(self)
scipy.linalg.tests.test_matfuncs.TestFractionalMatrixPower
scipy.linalg.tests.test_matfuncs.TestFractionalMatrixPower.test_al_mohy_higham_2012_experiment_1(self)
scipy.linalg.tests.test_matfuncs.TestFractionalMatrixPower.test_briggs_helper_function(self)
scipy.linalg.tests.test_matfuncs.TestFractionalMatrixPower.test_larger_abs_fractional_matrix_powers(self)
scipy.linalg.tests.test_matfuncs.TestFractionalMatrixPower.test_opposite_sign_complex_eigenvalues(self)
scipy.linalg.tests.test_matfuncs.TestFractionalMatrixPower.test_random_matrices_and_powers(self)
scipy.linalg.tests.test_matfuncs.TestFractionalMatrixPower.test_round_trip_random_complex(self)
scipy.linalg.tests.test_matfuncs.TestFractionalMatrixPower.test_round_trip_random_float(self)
scipy.linalg.tests.test_matfuncs.TestFractionalMatrixPower.test_singular(self)
scipy.linalg.tests.test_matfuncs.TestFractionalMatrixPower.test_type_conversion_mixed_sign_or_complex_spectrum(self)
scipy.linalg.tests.test_matfuncs.TestFractionalMatrixPower.test_type_preservation_and_conversion(self)
scipy.linalg.tests.test_matfuncs.TestKhatriRao
scipy.linalg.tests.test_matfuncs.TestKhatriRao.test_basic(self)
scipy.linalg.tests.test_matfuncs.TestKhatriRao.test_equality_of_two_equations(self)
scipy.linalg.tests.test_matfuncs.TestKhatriRao.test_number_of_columns_equality(self)
scipy.linalg.tests.test_matfuncs.TestKhatriRao.test_to_assure_2d_array(self)
scipy.linalg.tests.test_matfuncs.TestLogM
scipy.linalg.tests.test_matfuncs.TestLogM.test_al_mohy_higham_2012_experiment_1_funm_log(self)
scipy.linalg.tests.test_matfuncs.TestLogM.test_al_mohy_higham_2012_experiment_1_logm(self)
scipy.linalg.tests.test_matfuncs.TestLogM.test_complex_spectrum_real_logm(self)
scipy.linalg.tests.test_matfuncs.TestLogM.test_exactly_singular(self)
scipy.linalg.tests.test_matfuncs.TestLogM.test_logm_type_preservation_and_conversion(self)
scipy.linalg.tests.test_matfuncs.TestLogM.test_nearly_singular(self)
scipy.linalg.tests.test_matfuncs.TestLogM.test_nils(self)
scipy.linalg.tests.test_matfuncs.TestLogM.test_opposite_sign_complex_eigenvalues(self)
scipy.linalg.tests.test_matfuncs.TestLogM.test_real_mixed_sign_spectrum(self)
scipy.linalg.tests.test_matfuncs.TestLogM.test_round_trip_random_complex(self)
scipy.linalg.tests.test_matfuncs.TestLogM.test_round_trip_random_float(self)
scipy.linalg.tests.test_matfuncs.TestSignM
scipy.linalg.tests.test_matfuncs.TestSignM.test_defective1(self)
scipy.linalg.tests.test_matfuncs.TestSignM.test_defective2(self)
scipy.linalg.tests.test_matfuncs.TestSignM.test_defective3(self)
scipy.linalg.tests.test_matfuncs.TestSignM.test_nils(self)
scipy.linalg.tests.test_matfuncs.TestSqrtM
scipy.linalg.tests.test_matfuncs.TestSqrtM.test_al_mohy_higham_2012_experiment_1(self)
scipy.linalg.tests.test_matfuncs.TestSqrtM.test_bad(self)
scipy.linalg.tests.test_matfuncs.TestSqrtM.test_blocksizes(self)
scipy.linalg.tests.test_matfuncs.TestSqrtM.test_data_size_preservation_comp_in_comp_out(self)
scipy.linalg.tests.test_matfuncs.TestSqrtM.test_data_size_preservation_float_in_comp_out(self)
scipy.linalg.tests.test_matfuncs.TestSqrtM.test_data_size_preservation_float_in_float_out(self)
scipy.linalg.tests.test_matfuncs.TestSqrtM.test_data_size_preservation_int_in_comp_out(self)
scipy.linalg.tests.test_matfuncs.TestSqrtM.test_data_size_preservation_int_in_float_out(self)
scipy.linalg.tests.test_matfuncs.TestSqrtM.test_data_size_preservation_uint_in_float_out(self)
scipy.linalg.tests.test_matfuncs.TestSqrtM.test_disp(self)
scipy.linalg.tests.test_matfuncs.TestSqrtM.test_gh4866(self)
scipy.linalg.tests.test_matfuncs.TestSqrtM.test_gh5336(self)
scipy.linalg.tests.test_matfuncs.TestSqrtM.test_gh7839(self)
scipy.linalg.tests.test_matfuncs.TestSqrtM.test_opposite_sign_complex_eigenvalues(self)
scipy.linalg.tests.test_matfuncs.TestSqrtM.test_round_trip_random_complex(self)
scipy.linalg.tests.test_matfuncs.TestSqrtM.test_round_trip_random_float(self)
scipy.linalg.tests.test_matfuncs.TestSqrtM.test_sqrtm_type_conversion_mixed_sign_or_complex_spectrum(self)
scipy.linalg.tests.test_matfuncs.TestSqrtM.test_sqrtm_type_preservation_and_conversion(self)
scipy.linalg.tests.test_matfuncs.TestSqrtM.test_strict_upper_triangular(self)
scipy.linalg.tests.test_matfuncs.TestSqrtM.test_weird_matrix(self)
scipy.linalg.tests.test_matfuncs._get_al_mohy_higham_2012_experiment_1()
scipy.linalg.tests.test_matfuncs._help_expm_cond_search(A,A_norm,X,X_norm,eps,p)
scipy.linalg.tests.test_matfuncs._normalized_like(A,B)
scipy.linalg.tests.test_matfuncs._relative_error(f,A,perturbation)
scipy.linalg.tests.test_normalized_like(A,B)
scipy.linalg.tests.test_relative_error(f,A,perturbation)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_decomp_update.py----------------------------------------
A:scipy.linalg.tests.test_decomp_update.aTa->numpy.dot(a.T.conj(), a)
A:scipy.linalg.tests.test_decomp_update.mask->numpy.tri(a.shape[0], a.shape[1], -1, np.bool_)
A:scipy.linalg.tests.test_decomp_update.kmax->len(strides)
A:scipy.linalg.tests.test_decomp_update.base->numpy.zeros((s[0] * a.shape[0] + s[1], t[0] * a.shape[1] + t[1]), a.dtype)
A:scipy.linalg.tests.test_decomp_update.b->numpy.random.random(u.shape)
A:scipy.linalg.tests.test_decomp_update.c->numpy.random.random(v.shape)
A:scipy.linalg.tests.test_decomp_update.a->a.astype(self.dtype).astype(self.dtype)
A:scipy.linalg.tests.test_decomp_update.(q, r)->scipy.linalg.qr(a, mode=mode)
A:scipy.linalg.tests.test_decomp_update.(a, q, r)->super().generate(type, mode)
A:scipy.linalg.tests.test_decomp_update.(q1, r1)->qr_update(q, r, u, v)
A:scipy.linalg.tests.test_decomp_update.a1->numpy.insert(a, np.zeros(3, np.intp), u, 1)
A:scipy.linalg.tests.test_decomp_update.(a, q0, r0)->self.generate('tall')
A:scipy.linalg.tests.test_decomp_update.(qs, rs)->adjust_strides((q, r))
A:scipy.linalg.tests.test_decomp_update.s->slice(k, k + p + (a.shape[0] if which == 'row' else a.shape[1]))
A:scipy.linalg.tests.test_decomp_update.q->numpy.require(q, dtype, q_order)
A:scipy.linalg.tests.test_decomp_update.r->numpy.array([[1, 0], [0, 1]], self.dtype)
A:scipy.linalg.tests.test_decomp_update.(q1o, r1o)->qr_update(qs, r, u, v, True)
A:scipy.linalg.tests.test_decomp_update.(q2, r2)->qr_update(q, r, u, v, True)
A:scipy.linalg.tests.test_decomp_update.(q2o, r2o)->qr_update(q, rs, u, v, True)
A:scipy.linalg.tests.test_decomp_update.(q3, r3)->qr_update(q, r, u, v, True)
A:scipy.linalg.tests.test_decomp_update.(q3o, r3o)->qr_update(q, r, us, v, True)
A:scipy.linalg.tests.test_decomp_update.(a0, q0, r0)->self.generate('tall')
A:scipy.linalg.tests.test_decomp_update.dtype->numpy.dtype(dtype)
A:scipy.linalg.tests.test_decomp_update.u->numpy.require(u, dtype, u_order)
A:scipy.linalg.tests.test_decomp_update.(a, q, r, u)->self.generate('tall', which='row')
A:scipy.linalg.tests.test_decomp_update.(a, q0, r0, u0)->self.generate('sqr', which='row')
A:scipy.linalg.tests.test_decomp_update.(qs, rs, us)->adjust_strides((q, r, u))
A:scipy.linalg.tests.test_decomp_update.ai->numpy.insert(a, np.full(p, k, np.intp), u0 if which == 'row' else u0, 0 if which == 'row' else 1)
A:scipy.linalg.tests.test_decomp_update.(q5, r5)->qr_update(qs, rs, us, vs, False)
A:scipy.linalg.tests.test_decomp_update.(q5o, r5o)->qr_update(qs, rs, us, vs, True)
A:scipy.linalg.tests.test_decomp_update.(a, q0, r, u)->self.generate('sqr', which='col', p=3)
A:scipy.linalg.tests.test_decomp_update.u0->numpy.require(u, dtype, u_order).copy()
A:scipy.linalg.tests.test_decomp_update.qF->q0.copy('F')
A:scipy.linalg.tests.test_decomp_update.u1->numpy.require(u, dtype, u_order).copy().copy()
A:scipy.linalg.tests.test_decomp_update.(q4, r4)->qr_update(q, r, u, vs, False)
A:scipy.linalg.tests.test_decomp_update.(a0, q0, r0, u0)->self.generate('sqr', which='row', p=3)
A:scipy.linalg.tests.test_decomp_update.v->numpy.array([1, 2], self.dtype)
A:scipy.linalg.tests.test_decomp_update.(a, q, r, u, v)->self.generate('tall')
A:scipy.linalg.tests.test_decomp_update.(a, q0, r0, u0, v0)->self.generate('tall')
A:scipy.linalg.tests.test_decomp_update.(qs, rs, us, vs)->adjust_strides((q, r, u, v))
A:scipy.linalg.tests.test_decomp_update.(q4o, r4o)->qr_update(q, r, u, vs, True)
A:scipy.linalg.tests.test_decomp_update.(a0, q0, r0, u0, v0)->self.generate('tall', mode='economic', p=3)
A:scipy.linalg.tests.test_decomp_update.(u,)->make_strided((u.astype(dtype),))
A:scipy.linalg.tests.test_decomp_update.expected->numpy.dot(q.T.conj(), u)
A:scipy.linalg.tests.test_decomp_update.res->scipy.linalg._decomp_update._form_qTu(q, u)
scipy.linalg.tests.testBaseQRdelete(BaseQRdeltas)
scipy.linalg.tests.testBaseQRdelete.base_economic_p_row_xxx(self,ndel)
scipy.linalg.tests.testBaseQRdelete.base_non_simple_strides(self,adjust_strides,ks,p,which,overwriteable)
scipy.linalg.tests.testBaseQRdelete.base_overwrite_qr(self,which,p,test_C,test_F,mode='full')
scipy.linalg.tests.testBaseQRdelete.test_1xN_1_col(self)
scipy.linalg.tests.testBaseQRdelete.test_1xN_p_col(self)
scipy.linalg.tests.testBaseQRdelete.test_Mx1_1_row(self)
scipy.linalg.tests.testBaseQRdelete.test_Mx1_economic_1_row(self)
scipy.linalg.tests.testBaseQRdelete.test_Mx1_economic_p_row(self)
scipy.linalg.tests.testBaseQRdelete.test_Mx1_p_row(self)
scipy.linalg.tests.testBaseQRdelete.test_bad_k(self)
scipy.linalg.tests.testBaseQRdelete.test_bad_p(self)
scipy.linalg.tests.testBaseQRdelete.test_bad_which(self)
scipy.linalg.tests.testBaseQRdelete.test_check_finite(self)
scipy.linalg.tests.testBaseQRdelete.test_delete_1x1_row_col(self)
scipy.linalg.tests.testBaseQRdelete.test_delete_last_1_col(self)
scipy.linalg.tests.testBaseQRdelete.test_delete_last_1_row(self)
scipy.linalg.tests.testBaseQRdelete.test_delete_last_p_col(self)
scipy.linalg.tests.testBaseQRdelete.test_delete_last_p_row(self)
scipy.linalg.tests.testBaseQRdelete.test_economic_1_col(self)
scipy.linalg.tests.testBaseQRdelete.test_economic_1_row(self)
scipy.linalg.tests.testBaseQRdelete.test_economic_p_col(self)
scipy.linalg.tests.testBaseQRdelete.test_economic_p_row_economic(self)
scipy.linalg.tests.testBaseQRdelete.test_economic_p_row_fat(self)
scipy.linalg.tests.testBaseQRdelete.test_economic_p_row_sqr(self)
scipy.linalg.tests.testBaseQRdelete.test_empty_q(self)
scipy.linalg.tests.testBaseQRdelete.test_empty_r(self)
scipy.linalg.tests.testBaseQRdelete.test_fat_1_col(self)
scipy.linalg.tests.testBaseQRdelete.test_fat_1_row(self)
scipy.linalg.tests.testBaseQRdelete.test_fat_p_col(self)
scipy.linalg.tests.testBaseQRdelete.test_fat_p_row(self)
scipy.linalg.tests.testBaseQRdelete.test_mismatched_q_and_r(self)
scipy.linalg.tests.testBaseQRdelete.test_neg_k(self)
scipy.linalg.tests.testBaseQRdelete.test_neg_strides_1_col(self)
scipy.linalg.tests.testBaseQRdelete.test_neg_strides_1_row(self)
scipy.linalg.tests.testBaseQRdelete.test_neg_strides_p_col(self)
scipy.linalg.tests.testBaseQRdelete.test_neg_strides_p_row(self)
scipy.linalg.tests.testBaseQRdelete.test_non_itemize_strides_1_col(self)
scipy.linalg.tests.testBaseQRdelete.test_non_itemize_strides_1_row(self)
scipy.linalg.tests.testBaseQRdelete.test_non_itemize_strides_p_col(self)
scipy.linalg.tests.testBaseQRdelete.test_non_itemize_strides_p_row(self)
scipy.linalg.tests.testBaseQRdelete.test_non_native_byte_order_1_col(self)
scipy.linalg.tests.testBaseQRdelete.test_non_native_byte_order_1_row(self)
scipy.linalg.tests.testBaseQRdelete.test_non_native_byte_order_p_col(self)
scipy.linalg.tests.testBaseQRdelete.test_non_native_byte_order_p_row(self)
scipy.linalg.tests.testBaseQRdelete.test_non_unit_strides_1_col(self)
scipy.linalg.tests.testBaseQRdelete.test_non_unit_strides_1_row(self)
scipy.linalg.tests.testBaseQRdelete.test_non_unit_strides_p_col(self)
scipy.linalg.tests.testBaseQRdelete.test_non_unit_strides_p_row(self)
scipy.linalg.tests.testBaseQRdelete.test_overwrite_economic_qr_1_row(self)
scipy.linalg.tests.testBaseQRdelete.test_overwrite_economic_qr_p_row(self)
scipy.linalg.tests.testBaseQRdelete.test_overwrite_qr_1_col(self)
scipy.linalg.tests.testBaseQRdelete.test_overwrite_qr_1_row(self)
scipy.linalg.tests.testBaseQRdelete.test_overwrite_qr_p_col(self)
scipy.linalg.tests.testBaseQRdelete.test_overwrite_qr_p_row(self)
scipy.linalg.tests.testBaseQRdelete.test_qr_scalar(self)
scipy.linalg.tests.testBaseQRdelete.test_sqr_1_col(self)
scipy.linalg.tests.testBaseQRdelete.test_sqr_1_row(self)
scipy.linalg.tests.testBaseQRdelete.test_sqr_p_col(self)
scipy.linalg.tests.testBaseQRdelete.test_sqr_p_row(self)
scipy.linalg.tests.testBaseQRdelete.test_tall_1_col(self)
scipy.linalg.tests.testBaseQRdelete.test_tall_1_row(self)
scipy.linalg.tests.testBaseQRdelete.test_tall_p_col(self)
scipy.linalg.tests.testBaseQRdelete.test_tall_p_row(self)
scipy.linalg.tests.testBaseQRdelete.test_unsupported_dtypes(self)
scipy.linalg.tests.testBaseQRdeltas
scipy.linalg.tests.testBaseQRdeltas.generate(self,type,mode='full')
scipy.linalg.tests.testBaseQRdeltas.setup_method(self)
scipy.linalg.tests.testBaseQRinsert(BaseQRdeltas)
scipy.linalg.tests.testBaseQRinsert.base_economic_p_col_xxx(self,p)
scipy.linalg.tests.testBaseQRinsert.base_fat_p_row_xxx(self,p)
scipy.linalg.tests.testBaseQRinsert.base_non_simple_strides(self,adjust_strides,k,p,which)
scipy.linalg.tests.testBaseQRinsert.base_tall_p_col_xxx(self,p)
scipy.linalg.tests.testBaseQRinsert.generate(self,type,mode='full',which='row',p=1)
scipy.linalg.tests.testBaseQRinsert.test_1x1_1_col(self)
scipy.linalg.tests.testBaseQRinsert.test_1x1_1_row(self)
scipy.linalg.tests.testBaseQRinsert.test_1x1_1_scalar(self)
scipy.linalg.tests.testBaseQRinsert.test_1x1_p_col(self)
scipy.linalg.tests.testBaseQRinsert.test_1x1_p_row(self)
scipy.linalg.tests.testBaseQRinsert.test_1xN_1_col(self)
scipy.linalg.tests.testBaseQRinsert.test_1xN_1_row(self)
scipy.linalg.tests.testBaseQRinsert.test_1xN_p_col(self)
scipy.linalg.tests.testBaseQRinsert.test_1xN_p_row(self)
scipy.linalg.tests.testBaseQRinsert.test_Mx1_1_col(self)
scipy.linalg.tests.testBaseQRinsert.test_Mx1_1_row(self)
scipy.linalg.tests.testBaseQRinsert.test_Mx1_economic_1_col(self)
scipy.linalg.tests.testBaseQRinsert.test_Mx1_economic_1_row(self)
scipy.linalg.tests.testBaseQRinsert.test_Mx1_economic_p_col(self)
scipy.linalg.tests.testBaseQRinsert.test_Mx1_economic_p_row(self)
scipy.linalg.tests.testBaseQRinsert.test_Mx1_p_col(self)
scipy.linalg.tests.testBaseQRinsert.test_Mx1_p_row(self)
scipy.linalg.tests.testBaseQRinsert.test_check_finite(self)
scipy.linalg.tests.testBaseQRinsert.test_economic_1_col(self)
scipy.linalg.tests.testBaseQRinsert.test_economic_1_col_bad_update(self)
scipy.linalg.tests.testBaseQRinsert.test_economic_1_row(self)
scipy.linalg.tests.testBaseQRinsert.test_economic_p_col_eco(self)
scipy.linalg.tests.testBaseQRinsert.test_economic_p_col_fat(self)
scipy.linalg.tests.testBaseQRinsert.test_economic_p_col_sqr(self)
scipy.linalg.tests.testBaseQRinsert.test_economic_p_row(self)
scipy.linalg.tests.testBaseQRinsert.test_empty_inputs(self)
scipy.linalg.tests.testBaseQRinsert.test_fat_1_col(self)
scipy.linalg.tests.testBaseQRinsert.test_fat_1_row(self)
scipy.linalg.tests.testBaseQRinsert.test_fat_p_col(self)
scipy.linalg.tests.testBaseQRinsert.test_fat_p_row_fat(self)
scipy.linalg.tests.testBaseQRinsert.test_fat_p_row_sqr(self)
scipy.linalg.tests.testBaseQRinsert.test_fat_p_row_tall(self)
scipy.linalg.tests.testBaseQRinsert.test_mismatched_shapes(self)
scipy.linalg.tests.testBaseQRinsert.test_neg_strides_1_col(self)
scipy.linalg.tests.testBaseQRinsert.test_neg_strides_1_row(self)
scipy.linalg.tests.testBaseQRinsert.test_neg_strides_p_col(self)
scipy.linalg.tests.testBaseQRinsert.test_neg_strides_p_row(self)
scipy.linalg.tests.testBaseQRinsert.test_non_itemsize_strides_1_col(self)
scipy.linalg.tests.testBaseQRinsert.test_non_itemsize_strides_1_row(self)
scipy.linalg.tests.testBaseQRinsert.test_non_itemsize_strides_p_col(self)
scipy.linalg.tests.testBaseQRinsert.test_non_itemsize_strides_p_row(self)
scipy.linalg.tests.testBaseQRinsert.test_non_native_byte_order_1_col(self)
scipy.linalg.tests.testBaseQRinsert.test_non_native_byte_order_1_row(self)
scipy.linalg.tests.testBaseQRinsert.test_non_native_byte_order_p_col(self)
scipy.linalg.tests.testBaseQRinsert.test_non_native_byte_order_p_row(self)
scipy.linalg.tests.testBaseQRinsert.test_non_unit_strides_1_col(self)
scipy.linalg.tests.testBaseQRinsert.test_non_unit_strides_1_row(self)
scipy.linalg.tests.testBaseQRinsert.test_non_unit_strides_p_col(self)
scipy.linalg.tests.testBaseQRinsert.test_non_unit_strides_p_row(self)
scipy.linalg.tests.testBaseQRinsert.test_overwrite_qu_rank_1(self)
scipy.linalg.tests.testBaseQRinsert.test_overwrite_qu_rank_p(self)
scipy.linalg.tests.testBaseQRinsert.test_sqr_1_col(self)
scipy.linalg.tests.testBaseQRinsert.test_sqr_1_row(self)
scipy.linalg.tests.testBaseQRinsert.test_sqr_p_col(self)
scipy.linalg.tests.testBaseQRinsert.test_sqr_p_row(self)
scipy.linalg.tests.testBaseQRinsert.test_tall_1_col(self)
scipy.linalg.tests.testBaseQRinsert.test_tall_1_row(self)
scipy.linalg.tests.testBaseQRinsert.test_tall_p_col_fat(self)
scipy.linalg.tests.testBaseQRinsert.test_tall_p_col_sqr(self)
scipy.linalg.tests.testBaseQRinsert.test_tall_p_col_tall(self)
scipy.linalg.tests.testBaseQRinsert.test_tall_p_row(self)
scipy.linalg.tests.testBaseQRinsert.test_unsupported_dtypes(self)
scipy.linalg.tests.testBaseQRupdate(BaseQRdeltas)
scipy.linalg.tests.testBaseQRupdate.base_non_simple_strides(self,adjust_strides,mode,p,overwriteable)
scipy.linalg.tests.testBaseQRupdate.generate(self,type,mode='full',p=1)
scipy.linalg.tests.testBaseQRupdate.test_1x1_rank_1(self)
scipy.linalg.tests.testBaseQRupdate.test_1x1_rank_1_scalar(self)
scipy.linalg.tests.testBaseQRupdate.test_1x1_rank_p(self)
scipy.linalg.tests.testBaseQRupdate.test_1xN_rank_1(self)
scipy.linalg.tests.testBaseQRupdate.test_1xN_rank_p(self)
scipy.linalg.tests.testBaseQRupdate.test_Mx1_economic_rank_1(self)
scipy.linalg.tests.testBaseQRupdate.test_Mx1_economic_rank_p(self)
scipy.linalg.tests.testBaseQRupdate.test_Mx1_rank_1(self)
scipy.linalg.tests.testBaseQRupdate.test_Mx1_rank_p(self)
scipy.linalg.tests.testBaseQRupdate.test_check_finite(self)
scipy.linalg.tests.testBaseQRupdate.test_economic_check_finite(self)
scipy.linalg.tests.testBaseQRupdate.test_economic_rank_1(self)
scipy.linalg.tests.testBaseQRupdate.test_economic_rank_p(self)
scipy.linalg.tests.testBaseQRupdate.test_empty_inputs(self)
scipy.linalg.tests.testBaseQRupdate.test_fat_rank_1(self)
scipy.linalg.tests.testBaseQRupdate.test_fat_rank_p(self)
scipy.linalg.tests.testBaseQRupdate.test_integer_input(self)
scipy.linalg.tests.testBaseQRupdate.test_mismatched_shapes(self)
scipy.linalg.tests.testBaseQRupdate.test_neg_strides_economic_rank_1(self)
scipy.linalg.tests.testBaseQRupdate.test_neg_strides_economic_rank_p(self)
scipy.linalg.tests.testBaseQRupdate.test_neg_strides_rank_1(self)
scipy.linalg.tests.testBaseQRupdate.test_neg_strides_rank_p(self)
scipy.linalg.tests.testBaseQRupdate.test_non_itemsize_strides_economic_rank_1(self)
scipy.linalg.tests.testBaseQRupdate.test_non_itemsize_strides_economic_rank_p(self)
scipy.linalg.tests.testBaseQRupdate.test_non_itemsize_strides_rank_1(self)
scipy.linalg.tests.testBaseQRupdate.test_non_itemsize_strides_rank_p(self)
scipy.linalg.tests.testBaseQRupdate.test_non_native_byte_order_economic_rank_1(self)
scipy.linalg.tests.testBaseQRupdate.test_non_native_byte_order_economic_rank_p(self)
scipy.linalg.tests.testBaseQRupdate.test_non_native_byte_order_rank_1(self)
scipy.linalg.tests.testBaseQRupdate.test_non_native_byte_order_rank_p(self)
scipy.linalg.tests.testBaseQRupdate.test_non_unit_strides_economic_rank_1(self)
scipy.linalg.tests.testBaseQRupdate.test_non_unit_strides_economic_rank_p(self)
scipy.linalg.tests.testBaseQRupdate.test_non_unit_strides_rank_1(self)
scipy.linalg.tests.testBaseQRupdate.test_non_unit_strides_rank_p(self)
scipy.linalg.tests.testBaseQRupdate.test_overwrite_qruv_rank_1(self)
scipy.linalg.tests.testBaseQRupdate.test_overwrite_qruv_rank_1_economic(self)
scipy.linalg.tests.testBaseQRupdate.test_overwrite_qruv_rank_p(self)
scipy.linalg.tests.testBaseQRupdate.test_sqr_rank_1(self)
scipy.linalg.tests.testBaseQRupdate.test_sqr_rank_p(self)
scipy.linalg.tests.testBaseQRupdate.test_tall_rank_1(self)
scipy.linalg.tests.testBaseQRupdate.test_tall_rank_p(self)
scipy.linalg.tests.testBaseQRupdate.test_u_exactly_in_span_q(self)
scipy.linalg.tests.testBaseQRupdate.test_unsupported_dtypes(self)
scipy.linalg.tests.testTestQRdelete_D(BaseQRdelete)
scipy.linalg.tests.testTestQRdelete_F(BaseQRdelete)
scipy.linalg.tests.testTestQRdelete_d(BaseQRdelete)
scipy.linalg.tests.testTestQRdelete_f(BaseQRdelete)
scipy.linalg.tests.testTestQRinsert_D(BaseQRinsert)
scipy.linalg.tests.testTestQRinsert_F(BaseQRinsert)
scipy.linalg.tests.testTestQRinsert_d(BaseQRinsert)
scipy.linalg.tests.testTestQRinsert_f(BaseQRinsert)
scipy.linalg.tests.testTestQRupdate_D(BaseQRupdate)
scipy.linalg.tests.testTestQRupdate_F(BaseQRupdate)
scipy.linalg.tests.testTestQRupdate_d(BaseQRupdate)
scipy.linalg.tests.testTestQRupdate_f(BaseQRupdate)
scipy.linalg.tests.test_decomp_update.BaseQRdelete(BaseQRdeltas)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.base_economic_p_row_xxx(self,ndel)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.base_non_simple_strides(self,adjust_strides,ks,p,which,overwriteable)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.base_overwrite_qr(self,which,p,test_C,test_F,mode='full')
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_1xN_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_1xN_p_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_Mx1_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_Mx1_economic_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_Mx1_economic_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_Mx1_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_bad_k(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_bad_p(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_bad_which(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_check_finite(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_delete_1x1_row_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_delete_last_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_delete_last_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_delete_last_p_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_delete_last_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_economic_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_economic_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_economic_p_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_economic_p_row_economic(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_economic_p_row_fat(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_economic_p_row_sqr(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_empty_q(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_empty_r(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_fat_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_fat_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_fat_p_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_fat_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_mismatched_q_and_r(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_neg_k(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_neg_strides_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_neg_strides_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_neg_strides_p_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_neg_strides_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_non_itemize_strides_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_non_itemize_strides_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_non_itemize_strides_p_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_non_itemize_strides_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_non_native_byte_order_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_non_native_byte_order_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_non_native_byte_order_p_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_non_native_byte_order_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_non_unit_strides_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_non_unit_strides_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_non_unit_strides_p_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_non_unit_strides_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_overwrite_economic_qr_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_overwrite_economic_qr_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_overwrite_qr_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_overwrite_qr_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_overwrite_qr_p_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_overwrite_qr_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_qr_scalar(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_sqr_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_sqr_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_sqr_p_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_sqr_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_tall_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_tall_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_tall_p_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_tall_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRdelete.test_unsupported_dtypes(self)
scipy.linalg.tests.test_decomp_update.BaseQRdeltas
scipy.linalg.tests.test_decomp_update.BaseQRdeltas.generate(self,type,mode='full')
scipy.linalg.tests.test_decomp_update.BaseQRdeltas.setup_method(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert(BaseQRdeltas)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.base_economic_p_col_xxx(self,p)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.base_fat_p_row_xxx(self,p)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.base_non_simple_strides(self,adjust_strides,k,p,which)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.base_tall_p_col_xxx(self,p)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.generate(self,type,mode='full',which='row',p=1)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_1x1_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_1x1_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_1x1_1_scalar(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_1x1_p_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_1x1_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_1xN_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_1xN_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_1xN_p_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_1xN_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_Mx1_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_Mx1_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_Mx1_economic_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_Mx1_economic_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_Mx1_economic_p_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_Mx1_economic_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_Mx1_p_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_Mx1_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_check_finite(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_economic_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_economic_1_col_bad_update(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_economic_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_economic_p_col_eco(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_economic_p_col_fat(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_economic_p_col_sqr(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_economic_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_empty_inputs(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_fat_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_fat_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_fat_p_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_fat_p_row_fat(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_fat_p_row_sqr(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_fat_p_row_tall(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_mismatched_shapes(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_neg_strides_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_neg_strides_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_neg_strides_p_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_neg_strides_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_non_itemsize_strides_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_non_itemsize_strides_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_non_itemsize_strides_p_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_non_itemsize_strides_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_non_native_byte_order_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_non_native_byte_order_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_non_native_byte_order_p_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_non_native_byte_order_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_non_unit_strides_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_non_unit_strides_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_non_unit_strides_p_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_non_unit_strides_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_overwrite_qu_rank_1(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_overwrite_qu_rank_p(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_sqr_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_sqr_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_sqr_p_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_sqr_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_tall_1_col(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_tall_1_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_tall_p_col_fat(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_tall_p_col_sqr(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_tall_p_col_tall(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_tall_p_row(self)
scipy.linalg.tests.test_decomp_update.BaseQRinsert.test_unsupported_dtypes(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate(BaseQRdeltas)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.base_non_simple_strides(self,adjust_strides,mode,p,overwriteable)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.generate(self,type,mode='full',p=1)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_1x1_rank_1(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_1x1_rank_1_scalar(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_1x1_rank_p(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_1xN_rank_1(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_1xN_rank_p(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_Mx1_economic_rank_1(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_Mx1_economic_rank_p(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_Mx1_rank_1(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_Mx1_rank_p(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_check_finite(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_economic_check_finite(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_economic_rank_1(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_economic_rank_p(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_empty_inputs(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_fat_rank_1(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_fat_rank_p(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_integer_input(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_mismatched_shapes(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_neg_strides_economic_rank_1(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_neg_strides_economic_rank_p(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_neg_strides_rank_1(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_neg_strides_rank_p(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_non_itemsize_strides_economic_rank_1(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_non_itemsize_strides_economic_rank_p(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_non_itemsize_strides_rank_1(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_non_itemsize_strides_rank_p(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_non_native_byte_order_economic_rank_1(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_non_native_byte_order_economic_rank_p(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_non_native_byte_order_rank_1(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_non_native_byte_order_rank_p(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_non_unit_strides_economic_rank_1(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_non_unit_strides_economic_rank_p(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_non_unit_strides_rank_1(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_non_unit_strides_rank_p(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_overwrite_qruv_rank_1(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_overwrite_qruv_rank_1_economic(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_overwrite_qruv_rank_p(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_sqr_rank_1(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_sqr_rank_p(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_tall_rank_1(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_tall_rank_p(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_u_exactly_in_span_q(self)
scipy.linalg.tests.test_decomp_update.BaseQRupdate.test_unsupported_dtypes(self)
scipy.linalg.tests.test_decomp_update.TestQRdelete_D(BaseQRdelete)
scipy.linalg.tests.test_decomp_update.TestQRdelete_F(BaseQRdelete)
scipy.linalg.tests.test_decomp_update.TestQRdelete_d(BaseQRdelete)
scipy.linalg.tests.test_decomp_update.TestQRdelete_f(BaseQRdelete)
scipy.linalg.tests.test_decomp_update.TestQRinsert_D(BaseQRinsert)
scipy.linalg.tests.test_decomp_update.TestQRinsert_F(BaseQRinsert)
scipy.linalg.tests.test_decomp_update.TestQRinsert_d(BaseQRinsert)
scipy.linalg.tests.test_decomp_update.TestQRinsert_f(BaseQRinsert)
scipy.linalg.tests.test_decomp_update.TestQRupdate_D(BaseQRupdate)
scipy.linalg.tests.test_decomp_update.TestQRupdate_F(BaseQRupdate)
scipy.linalg.tests.test_decomp_update.TestQRupdate_d(BaseQRupdate)
scipy.linalg.tests.test_decomp_update.TestQRupdate_f(BaseQRupdate)
scipy.linalg.tests.test_decomp_update.assert_unitary(a,rtol=None,atol=None,assert_sqr=True)
scipy.linalg.tests.test_decomp_update.assert_upper_tri(a,rtol=None,atol=None)
scipy.linalg.tests.test_decomp_update.check_form_qTu(q_order,q_shape,u_order,u_shape,u_ndim,dtype)
scipy.linalg.tests.test_decomp_update.check_qr(q,r,a,rtol,atol,assert_sqr=True)
scipy.linalg.tests.test_decomp_update.make_nonnative(arrs)
scipy.linalg.tests.test_decomp_update.make_strided(arrs)
scipy.linalg.tests.test_decomp_update.negate_strides(arrs)
scipy.linalg.tests.test_decomp_update.nonitemsize_strides(arrs)
scipy.linalg.tests.test_decomp_update.test_form_qTu()
scipy.linalg.tests.testassert_unitary(a,rtol=None,atol=None,assert_sqr=True)
scipy.linalg.tests.testassert_upper_tri(a,rtol=None,atol=None)
scipy.linalg.tests.testcheck_form_qTu(q_order,q_shape,u_order,u_shape,u_ndim,dtype)
scipy.linalg.tests.testcheck_qr(q,r,a,rtol,atol,assert_sqr=True)
scipy.linalg.tests.testmake_nonnative(arrs)
scipy.linalg.tests.testmake_strided(arrs)
scipy.linalg.tests.testnegate_strides(arrs)
scipy.linalg.tests.testnonitemsize_strides(arrs)
scipy.linalg.tests.testtest_form_qTu()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_solvers.py----------------------------------------
A:scipy.linalg.tests.test_solvers.filename->os.path.join(os.path.abspath(os.path.dirname(__file__)), 'data', name)
A:scipy.linalg.tests.test_solvers.nsq->numpy.ones((3, 2))
A:scipy.linalg.tests.test_solvers.sq->numpy.eye(2)
A:scipy.linalg.tests.test_solvers.x->solve_sylvester(a, b, c)
A:scipy.linalg.tests.test_solvers.mat6->_load_data('carex_6_data.npz')
A:scipy.linalg.tests.test_solvers.mat15->_load_data('carex_15_data.npz')
A:scipy.linalg.tests.test_solvers.mat18->_load_data('carex_18_data.npz')
A:scipy.linalg.tests.test_solvers.mat19->_load_data('carex_19_data.npz')
A:scipy.linalg.tests.test_solvers.mat20->_load_data('carex_20_data.npz')
A:scipy.linalg.tests.test_solvers.out_fact->solve_sylvester(a, b, c).dot(b)
A:scipy.linalg.tests.test_solvers.A->numpy.triu(np.ones((3, 3)))
A:scipy.linalg.tests.test_solvers.R->numpy.diag([-10, 0.1])
A:scipy.linalg.tests.test_solvers.mat20170120->_load_data('gendare_20170120_data.npz')
A:scipy.linalg.tests.test_solvers.e->numpy.eye(a.shape[0])
A:scipy.linalg.tests.test_solvers.s->numpy.zeros_like(b)
A:scipy.linalg.tests.test_solvers.nsym->numpy.arange(9).reshape(3, 3)
A:scipy.linalg.tests.test_solvers.sym->numpy.eye(3)
A:scipy.linalg.tests.test_solvers.sing->numpy.full((3, 3), 1000000000000.0)
A:scipy.linalg.tests.test_solvers.nm->numpy.full((2, 2), np.nan)
A:scipy.linalg.tests.test_solvers.a->numpy.array([[1.0, 0.0], [0.0, 1.0]])
A:scipy.linalg.tests.test_solvers.b->numpy.array([[1.0]])
A:scipy.linalg.tests.test_solvers.c->numpy.array([2.0, 2.0]).reshape(-1, 1)
scipy.linalg.tests.testTestSolveLyapunov
scipy.linalg.tests.testTestSolveLyapunov.check_continuous_case(self,a,q)
scipy.linalg.tests.testTestSolveLyapunov.check_discrete_case(self,a,q,method=None)
scipy.linalg.tests.testTestSolveLyapunov.test_cases(self)
scipy.linalg.tests.testTestSolveLyapunov.test_continuous_squareness_and_shape(self)
scipy.linalg.tests.testTestSolveSylvester
scipy.linalg.tests.testTestSolveSylvester.check_case(self,a,b,c)
scipy.linalg.tests.testTestSolveSylvester.test_cases(self)
scipy.linalg.tests.testTestSolveSylvester.test_trivial(self)
scipy.linalg.tests.test_load_data(name)
scipy.linalg.tests.test_solvers.TestSolveLyapunov
scipy.linalg.tests.test_solvers.TestSolveLyapunov.check_continuous_case(self,a,q)
scipy.linalg.tests.test_solvers.TestSolveLyapunov.check_discrete_case(self,a,q,method=None)
scipy.linalg.tests.test_solvers.TestSolveLyapunov.test_cases(self)
scipy.linalg.tests.test_solvers.TestSolveLyapunov.test_continuous_squareness_and_shape(self)
scipy.linalg.tests.test_solvers.TestSolveSylvester
scipy.linalg.tests.test_solvers.TestSolveSylvester.check_case(self,a,b,c)
scipy.linalg.tests.test_solvers.TestSolveSylvester.test_cases(self)
scipy.linalg.tests.test_solvers.TestSolveSylvester.test_trivial(self)
scipy.linalg.tests.test_solvers._load_data(name)
scipy.linalg.tests.test_solvers.test_are_validate_args()
scipy.linalg.tests.test_solvers.test_solve_continuous_are()
scipy.linalg.tests.test_solvers.test_solve_discrete_are()
scipy.linalg.tests.test_solvers.test_solve_generalized_continuous_are()
scipy.linalg.tests.test_solvers.test_solve_generalized_discrete_are()
scipy.linalg.tests.testtest_are_validate_args()
scipy.linalg.tests.testtest_solve_continuous_are()
scipy.linalg.tests.testtest_solve_discrete_are()
scipy.linalg.tests.testtest_solve_generalized_continuous_are()
scipy.linalg.tests.testtest_solve_generalized_discrete_are()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_matmul_toeplitz.py----------------------------------------
A:scipy.linalg.tests.test_matmul_toeplitz.self.rng->numpy.random.RandomState(42)
A:scipy.linalg.tests.test_matmul_toeplitz.c->self.rng.normal(size=n)
A:scipy.linalg.tests.test_matmul_toeplitz.r->self.rng.normal(size=n // 2)
A:scipy.linalg.tests.test_matmul_toeplitz.x->self.rng.normal(size=n // 2 - 1)
A:scipy.linalg.tests.test_matmul_toeplitz.actual->matmul_toeplitz((c, r), x, check_finite)
scipy.linalg.tests.test_matmul_toeplitz.TestMatmulToeplitz
scipy.linalg.tests.test_matmul_toeplitz.TestMatmulToeplitz.do(self,x,c,r=None,check_finite=False,workers=None)
scipy.linalg.tests.test_matmul_toeplitz.TestMatmulToeplitz.setup_method(self)
scipy.linalg.tests.test_matmul_toeplitz.TestMatmulToeplitz.test_complex(self)
scipy.linalg.tests.test_matmul_toeplitz.TestMatmulToeplitz.test_exceptions(self)
scipy.linalg.tests.test_matmul_toeplitz.TestMatmulToeplitz.test_real(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_basic.py----------------------------------------
A:scipy.linalg.tests.test_basic.a->numpy.arange(120, dtype='d').reshape(2, 3, 4, 5)
A:scipy.linalg.tests.test_basic.ab->array([[-99, 1.0, 1.0], [4.0, 4.0, 4.0]])
A:scipy.linalg.tests.test_basic.b4->array([10.0, 0.0, 2.0, 14.0])
A:scipy.linalg.tests.test_basic.b4by1->array([10.0, 0.0, 2.0, 14.0]).reshape(-1, 1)
A:scipy.linalg.tests.test_basic.b4by2->array([[2, 1], [-30, 4], [2, 3], [1, 3]])
A:scipy.linalg.tests.test_basic.b4by4->array([[1, 0, 0, 0], [0, 0, 0, 1], [0, 1, 0, 0], [0, 1, 0, 0]])
A:scipy.linalg.tests.test_basic.x->solve_circulant(c, b)
A:scipy.linalg.tests.test_basic.bad->array([1.0, 2.0, 3.0, 4.0]).reshape(-1, 4)
A:scipy.linalg.tests.test_basic.b->numpy.array([[0, 0, 1, 1], [1, 1, 0, 0], [1, -1, 0, 0]])
A:scipy.linalg.tests.test_basic.expected->numpy.empty_like(x)
A:scipy.linalg.tests.test_basic.x0->solve(a, b)
A:scipy.linalg.tests.test_basic.X->zeros((n, n), 'D')
A:scipy.linalg.tests.test_basic.Ainv->inv(A)
A:scipy.linalg.tests.test_basic.X[:, i]->solve(A, r)
A:scipy.linalg.tests.test_basic.a[i, i]->abs(20 * (0.1 + a[i, i]))
A:scipy.linalg.tests.test_basic.a[i, j]->conjugate(a[j, i])
A:scipy.linalg.tests.test_basic.res->norm(x)
A:scipy.linalg.tests.test_basic.A->block_diag(np.ones((2, 2)), np.tril(np.ones((2, 2))), np.ones((3, 3)))
A:scipy.linalg.tests.test_basic.err_msg->'Failed for size: {}, assume_a: {},dtype: {}'.format(size, assume_a, dtype)
A:scipy.linalg.tests.test_basic.sol->solve_triangular(A, b, lower=True, check_finite=False)
A:scipy.linalg.tests.test_basic.a_inv->inv(a, check_finite=False)
A:scipy.linalg.tests.test_basic.a_det->det(a, check_finite=False)
A:scipy.linalg.tests.test_basic.d1->det(a)
A:scipy.linalg.tests.test_basic.d2->basic_det(a)
A:scipy.linalg.tests.test_basic.at->numpy.array(((1, 20), (-30, 4)))
A:scipy.linalg.tests.test_basic.a1->numpy.arange(120, dtype='d').reshape(2, 3, 4, 5).copy()
A:scipy.linalg.tests.test_basic.b1->numpy.array([[0, 0, 1, 1], [1, 1, 0, 0], [1, -1, 0, 0]]).copy()
A:scipy.linalg.tests.test_basic.out->lstsq(a1, b1, lapack_driver=lapack_driver, check_finite=check_finite, overwrite_a=overwrite, overwrite_b=overwrite)
A:scipy.linalg.tests.test_basic.residuals->numpy.sum(res * res.conj())
A:scipy.linalg.tests.test_basic.(x, residues, rank, s)->lstsq(np.zeros(a_shape), b)
A:scipy.linalg.tests.test_basic.a_pinv->pinvh(a.tolist())
A:scipy.linalg.tests.test_basic.(q, _)->qr(np.random.rand(n, n))
A:scipy.linalg.tests.test_basic.a_m->numpy.diag([4, 3, 2, 1, 9.9e-05, 0.0] + [0.0] * (n - 6))
A:scipy.linalg.tests.test_basic.a_p->pinvh(a, atol=atol, rtol=rtol)
A:scipy.linalg.tests.test_basic.(u, s, vt)->numpy.linalg.svd(a)
A:scipy.linalg.tests.test_basic.a_pinvh->pinvh(a)
A:scipy.linalg.tests.test_basic.x_inv->pinv_(x)
A:scipy.linalg.tests.test_basic.tol->max(1e-15, np.finfo(dtype).eps.real * 20)
A:scipy.linalg.tests.test_basic.actual->norm(A, ord=order)
A:scipy.linalg.tests.test_basic.desired->numpy.linalg.norm(A.astype(t_high), ord=order)
A:scipy.linalg.tests.test_basic.c->numpy.array([[[-1, 2.5, 3, 3.5]], [[1, 6, 6, 6.5]]])
A:scipy.linalg.tests.test_basic.d->norm(a, ord=np.inf, axis=(0, 1))
A:scipy.linalg.tests.test_basic.y->solve(circulant(c), b)
A:scipy.linalg.tests.test_basic.(y, res, rnk, s)->lstsq(circulant(c), b)
A:scipy.linalg.tests.test_basic.expected[:, 0, :]->solve(circulant(c[0]), b.T)
A:scipy.linalg.tests.test_basic.expected[:, 1, :]->solve(circulant(c[1]), b.T)
A:scipy.linalg.tests.test_basic.(_, y)->matrix_balance(np.array([[1000, 1], [1000, 0]]))
A:scipy.linalg.tests.test_basic.(x, y)->matrix_balance(A)
A:scipy.linalg.tests.test_basic.(_, (y, z))->matrix_balance(np.array([[1000, 1], [1000, 0]]), separate=1)
A:scipy.linalg.tests.test_basic.(x, (y, z))->matrix_balance(A, separate=1)
A:scipy.linalg.tests.test_basic.(x, (s, p))->matrix_balance(A, separate=1)
A:scipy.linalg.tests.test_basic.ip->numpy.empty_like(p)
A:scipy.linalg.tests.test_basic.ip[p]->numpy.arange(A.shape[0])
scipy.linalg.tests.testTestDet
scipy.linalg.tests.testTestDet.setup_method(self)
scipy.linalg.tests.testTestDet.test_check_finite(self)
scipy.linalg.tests.testTestDet.test_random(self)
scipy.linalg.tests.testTestDet.test_random_complex(self)
scipy.linalg.tests.testTestDet.test_simple(self)
scipy.linalg.tests.testTestDet.test_simple_complex(self)
scipy.linalg.tests.testTestInv
scipy.linalg.tests.testTestInv.setup_method(self)
scipy.linalg.tests.testTestInv.test_check_finite(self)
scipy.linalg.tests.testTestInv.test_random(self)
scipy.linalg.tests.testTestInv.test_random_complex(self)
scipy.linalg.tests.testTestInv.test_simple(self)
scipy.linalg.tests.testTestInv.test_simple_complex(self)
scipy.linalg.tests.testTestLstsq
scipy.linalg.tests.testTestLstsq.setup_method(self)
scipy.linalg.tests.testTestLstsq.test_check_finite(self)
scipy.linalg.tests.testTestLstsq.test_random_complex_exact(self)
scipy.linalg.tests.testTestLstsq.test_random_complex_overdet(self)
scipy.linalg.tests.testTestLstsq.test_random_exact(self)
scipy.linalg.tests.testTestLstsq.test_random_overdet(self)
scipy.linalg.tests.testTestLstsq.test_simple_exact(self)
scipy.linalg.tests.testTestLstsq.test_simple_overdet(self)
scipy.linalg.tests.testTestLstsq.test_simple_overdet_complex(self)
scipy.linalg.tests.testTestLstsq.test_simple_underdet(self)
scipy.linalg.tests.testTestLstsq.test_zero_size(self)
scipy.linalg.tests.testTestMatrixNorms
scipy.linalg.tests.testTestMatrixNorms.test_axis_kwd(self)
scipy.linalg.tests.testTestMatrixNorms.test_keepdims_kwd(self)
scipy.linalg.tests.testTestMatrixNorms.test_matrix_norms(self)
scipy.linalg.tests.testTestMatrix_Balance
scipy.linalg.tests.testTestMatrix_Balance.test_infnan_arg(self)
scipy.linalg.tests.testTestMatrix_Balance.test_perm_and_scaling(self)
scipy.linalg.tests.testTestMatrix_Balance.test_permutation(self)
scipy.linalg.tests.testTestMatrix_Balance.test_scaling(self)
scipy.linalg.tests.testTestMatrix_Balance.test_scaling_order(self)
scipy.linalg.tests.testTestMatrix_Balance.test_separate(self)
scipy.linalg.tests.testTestMatrix_Balance.test_string_arg(self)
scipy.linalg.tests.testTestOverwrite
scipy.linalg.tests.testTestOverwrite.test_det(self)
scipy.linalg.tests.testTestOverwrite.test_inv(self)
scipy.linalg.tests.testTestOverwrite.test_lstsq(self)
scipy.linalg.tests.testTestOverwrite.test_pinv(self)
scipy.linalg.tests.testTestOverwrite.test_pinvh(self)
scipy.linalg.tests.testTestOverwrite.test_solve(self)
scipy.linalg.tests.testTestOverwrite.test_solve_banded(self)
scipy.linalg.tests.testTestOverwrite.test_solve_triangular(self)
scipy.linalg.tests.testTestOverwrite.test_solveh_banded(self)
scipy.linalg.tests.testTestPinv
scipy.linalg.tests.testTestPinv.setup_method(self)
scipy.linalg.tests.testTestPinv.test_atol_rtol(self)
scipy.linalg.tests.testTestPinv.test_check_finite(self)
scipy.linalg.tests.testTestPinv.test_native_list_argument(self)
scipy.linalg.tests.testTestPinv.test_simple_cols(self)
scipy.linalg.tests.testTestPinv.test_simple_complex(self)
scipy.linalg.tests.testTestPinv.test_simple_real(self)
scipy.linalg.tests.testTestPinv.test_simple_rows(self)
scipy.linalg.tests.testTestPinv.test_simple_singular(self)
scipy.linalg.tests.testTestPinvSymmetric
scipy.linalg.tests.testTestPinvSymmetric.setup_method(self)
scipy.linalg.tests.testTestPinvSymmetric.test_atol_rtol(self)
scipy.linalg.tests.testTestPinvSymmetric.test_native_list_argument(self)
scipy.linalg.tests.testTestPinvSymmetric.test_nonpositive(self)
scipy.linalg.tests.testTestPinvSymmetric.test_simple_complex(self)
scipy.linalg.tests.testTestPinvSymmetric.test_simple_real(self)
scipy.linalg.tests.testTestSolve
scipy.linalg.tests.testTestSolve.setup_method(self)
scipy.linalg.tests.testTestSolve.test_20Feb04_bug(self)
scipy.linalg.tests.testTestSolve.test_all_type_size_routine_combinations(self)
scipy.linalg.tests.testTestSolve.test_assume_a_keyword(self)
scipy.linalg.tests.testTestSolve.test_check_finite(self)
scipy.linalg.tests.testTestSolve.test_empty_rhs(self)
scipy.linalg.tests.testTestSolve.test_hermitian(self)
scipy.linalg.tests.testTestSolve.test_ill_condition_warning(self)
scipy.linalg.tests.testTestSolve.test_multiple_rhs(self)
scipy.linalg.tests.testTestSolve.test_nils_20Feb04(self)
scipy.linalg.tests.testTestSolve.test_nonsquare_a(self)
scipy.linalg.tests.testTestSolve.test_pos_and_sym(self)
scipy.linalg.tests.testTestSolve.test_random(self)
scipy.linalg.tests.testTestSolve.test_random_complex(self)
scipy.linalg.tests.testTestSolve.test_random_sym(self)
scipy.linalg.tests.testTestSolve.test_random_sym_complex(self)
scipy.linalg.tests.testTestSolve.test_scalar_a_and_1D_b(self)
scipy.linalg.tests.testTestSolve.test_simple(self)
scipy.linalg.tests.testTestSolve.test_simple2(self)
scipy.linalg.tests.testTestSolve.test_simple_complex(self)
scipy.linalg.tests.testTestSolve.test_simple_complex2(self)
scipy.linalg.tests.testTestSolve.test_simple_her(self)
scipy.linalg.tests.testTestSolve.test_simple_her_actuallysym(self)
scipy.linalg.tests.testTestSolve.test_simple_pos(self)
scipy.linalg.tests.testTestSolve.test_simple_pos_complexb(self)
scipy.linalg.tests.testTestSolve.test_simple_sym(self)
scipy.linalg.tests.testTestSolve.test_simple_sym_complex(self)
scipy.linalg.tests.testTestSolve.test_simple_sym_complexb(self)
scipy.linalg.tests.testTestSolve.test_singularity(self)
scipy.linalg.tests.testTestSolve.test_size_mismatch_with_1D_b(self)
scipy.linalg.tests.testTestSolve.test_sym_pos_dep(self)
scipy.linalg.tests.testTestSolve.test_transposed_keyword(self)
scipy.linalg.tests.testTestSolve.test_transposed_notimplemented(self)
scipy.linalg.tests.testTestSolveBanded
scipy.linalg.tests.testTestSolveBanded.test_1x1(self)
scipy.linalg.tests.testTestSolveBanded.test_bad_shape(self)
scipy.linalg.tests.testTestSolveBanded.test_check_finite(self)
scipy.linalg.tests.testTestSolveBanded.test_complex(self)
scipy.linalg.tests.testTestSolveBanded.test_native_list_arguments(self)
scipy.linalg.tests.testTestSolveBanded.test_real(self)
scipy.linalg.tests.testTestSolveBanded.test_tridiag_complex(self)
scipy.linalg.tests.testTestSolveBanded.test_tridiag_real(self)
scipy.linalg.tests.testTestSolveCirculant
scipy.linalg.tests.testTestSolveCirculant.test_axis_args(self)
scipy.linalg.tests.testTestSolveCirculant.test_basic1(self)
scipy.linalg.tests.testTestSolveCirculant.test_basic2(self)
scipy.linalg.tests.testTestSolveCirculant.test_basic3(self)
scipy.linalg.tests.testTestSolveCirculant.test_complex(self)
scipy.linalg.tests.testTestSolveCirculant.test_native_list_arguments(self)
scipy.linalg.tests.testTestSolveCirculant.test_random_b_and_c(self)
scipy.linalg.tests.testTestSolveCirculant.test_singular(self)
scipy.linalg.tests.testTestSolveHBanded
scipy.linalg.tests.testTestSolveHBanded.test_01_complex(self)
scipy.linalg.tests.testTestSolveHBanded.test_01_float32(self)
scipy.linalg.tests.testTestSolveHBanded.test_01_lower(self)
scipy.linalg.tests.testTestSolveHBanded.test_01_upper(self)
scipy.linalg.tests.testTestSolveHBanded.test_02_complex(self)
scipy.linalg.tests.testTestSolveHBanded.test_02_float32(self)
scipy.linalg.tests.testTestSolveHBanded.test_02_lower(self)
scipy.linalg.tests.testTestSolveHBanded.test_02_upper(self)
scipy.linalg.tests.testTestSolveHBanded.test_03_upper(self)
scipy.linalg.tests.testTestSolveHBanded.test_1x1(self)
scipy.linalg.tests.testTestSolveHBanded.test_bad_shapes(self)
scipy.linalg.tests.testTestSolveHBanded.test_check_finite(self)
scipy.linalg.tests.testTestSolveHBanded.test_native_list_arguments(self)
scipy.linalg.tests.testTestSolveHBanded.test_tridiag_01_complex(self)
scipy.linalg.tests.testTestSolveHBanded.test_tridiag_01_float32(self)
scipy.linalg.tests.testTestSolveHBanded.test_tridiag_01_lower(self)
scipy.linalg.tests.testTestSolveHBanded.test_tridiag_01_upper(self)
scipy.linalg.tests.testTestSolveHBanded.test_tridiag_02_complex(self)
scipy.linalg.tests.testTestSolveHBanded.test_tridiag_02_float32(self)
scipy.linalg.tests.testTestSolveHBanded.test_tridiag_02_lower(self)
scipy.linalg.tests.testTestSolveHBanded.test_tridiag_02_upper(self)
scipy.linalg.tests.testTestSolveHBanded.test_tridiag_03_upper(self)
scipy.linalg.tests.testTestSolveTriangular
scipy.linalg.tests.testTestSolveTriangular.test_check_finite(self)
scipy.linalg.tests.testTestSolveTriangular.test_simple(self)
scipy.linalg.tests.testTestSolveTriangular.test_simple_complex(self)
scipy.linalg.tests.testTestVectorNorms
scipy.linalg.tests.testTestVectorNorms.test_axis_kwd(self)
scipy.linalg.tests.testTestVectorNorms.test_keepdims_kwd(self)
scipy.linalg.tests.testTestVectorNorms.test_large_vector(self)
scipy.linalg.tests.testTestVectorNorms.test_overflow(self)
scipy.linalg.tests.testTestVectorNorms.test_stable(self)
scipy.linalg.tests.testTestVectorNorms.test_types(self)
scipy.linalg.tests.testTestVectorNorms.test_zero_norm(self)
scipy.linalg.tests.test_basic.TestDet
scipy.linalg.tests.test_basic.TestDet.setup_method(self)
scipy.linalg.tests.test_basic.TestDet.test_check_finite(self)
scipy.linalg.tests.test_basic.TestDet.test_random(self)
scipy.linalg.tests.test_basic.TestDet.test_random_complex(self)
scipy.linalg.tests.test_basic.TestDet.test_simple(self)
scipy.linalg.tests.test_basic.TestDet.test_simple_complex(self)
scipy.linalg.tests.test_basic.TestInv
scipy.linalg.tests.test_basic.TestInv.setup_method(self)
scipy.linalg.tests.test_basic.TestInv.test_check_finite(self)
scipy.linalg.tests.test_basic.TestInv.test_random(self)
scipy.linalg.tests.test_basic.TestInv.test_random_complex(self)
scipy.linalg.tests.test_basic.TestInv.test_simple(self)
scipy.linalg.tests.test_basic.TestInv.test_simple_complex(self)
scipy.linalg.tests.test_basic.TestLstsq
scipy.linalg.tests.test_basic.TestLstsq.setup_method(self)
scipy.linalg.tests.test_basic.TestLstsq.test_check_finite(self)
scipy.linalg.tests.test_basic.TestLstsq.test_random_complex_exact(self)
scipy.linalg.tests.test_basic.TestLstsq.test_random_complex_overdet(self)
scipy.linalg.tests.test_basic.TestLstsq.test_random_exact(self)
scipy.linalg.tests.test_basic.TestLstsq.test_random_overdet(self)
scipy.linalg.tests.test_basic.TestLstsq.test_simple_exact(self)
scipy.linalg.tests.test_basic.TestLstsq.test_simple_overdet(self)
scipy.linalg.tests.test_basic.TestLstsq.test_simple_overdet_complex(self)
scipy.linalg.tests.test_basic.TestLstsq.test_simple_underdet(self)
scipy.linalg.tests.test_basic.TestLstsq.test_zero_size(self)
scipy.linalg.tests.test_basic.TestMatrixNorms
scipy.linalg.tests.test_basic.TestMatrixNorms.test_axis_kwd(self)
scipy.linalg.tests.test_basic.TestMatrixNorms.test_keepdims_kwd(self)
scipy.linalg.tests.test_basic.TestMatrixNorms.test_matrix_norms(self)
scipy.linalg.tests.test_basic.TestMatrix_Balance
scipy.linalg.tests.test_basic.TestMatrix_Balance.test_infnan_arg(self)
scipy.linalg.tests.test_basic.TestMatrix_Balance.test_perm_and_scaling(self)
scipy.linalg.tests.test_basic.TestMatrix_Balance.test_permutation(self)
scipy.linalg.tests.test_basic.TestMatrix_Balance.test_scaling(self)
scipy.linalg.tests.test_basic.TestMatrix_Balance.test_scaling_order(self)
scipy.linalg.tests.test_basic.TestMatrix_Balance.test_separate(self)
scipy.linalg.tests.test_basic.TestMatrix_Balance.test_string_arg(self)
scipy.linalg.tests.test_basic.TestOverwrite
scipy.linalg.tests.test_basic.TestOverwrite.test_det(self)
scipy.linalg.tests.test_basic.TestOverwrite.test_inv(self)
scipy.linalg.tests.test_basic.TestOverwrite.test_lstsq(self)
scipy.linalg.tests.test_basic.TestOverwrite.test_pinv(self)
scipy.linalg.tests.test_basic.TestOverwrite.test_pinvh(self)
scipy.linalg.tests.test_basic.TestOverwrite.test_solve(self)
scipy.linalg.tests.test_basic.TestOverwrite.test_solve_banded(self)
scipy.linalg.tests.test_basic.TestOverwrite.test_solve_triangular(self)
scipy.linalg.tests.test_basic.TestOverwrite.test_solveh_banded(self)
scipy.linalg.tests.test_basic.TestPinv
scipy.linalg.tests.test_basic.TestPinv.setup_method(self)
scipy.linalg.tests.test_basic.TestPinv.test_atol_rtol(self)
scipy.linalg.tests.test_basic.TestPinv.test_check_finite(self)
scipy.linalg.tests.test_basic.TestPinv.test_native_list_argument(self)
scipy.linalg.tests.test_basic.TestPinv.test_simple_cols(self)
scipy.linalg.tests.test_basic.TestPinv.test_simple_complex(self)
scipy.linalg.tests.test_basic.TestPinv.test_simple_real(self)
scipy.linalg.tests.test_basic.TestPinv.test_simple_rows(self)
scipy.linalg.tests.test_basic.TestPinv.test_simple_singular(self)
scipy.linalg.tests.test_basic.TestPinvSymmetric
scipy.linalg.tests.test_basic.TestPinvSymmetric.setup_method(self)
scipy.linalg.tests.test_basic.TestPinvSymmetric.test_atol_rtol(self)
scipy.linalg.tests.test_basic.TestPinvSymmetric.test_native_list_argument(self)
scipy.linalg.tests.test_basic.TestPinvSymmetric.test_nonpositive(self)
scipy.linalg.tests.test_basic.TestPinvSymmetric.test_simple_complex(self)
scipy.linalg.tests.test_basic.TestPinvSymmetric.test_simple_real(self)
scipy.linalg.tests.test_basic.TestSolve
scipy.linalg.tests.test_basic.TestSolve.setup_method(self)
scipy.linalg.tests.test_basic.TestSolve.test_20Feb04_bug(self)
scipy.linalg.tests.test_basic.TestSolve.test_all_type_size_routine_combinations(self)
scipy.linalg.tests.test_basic.TestSolve.test_assume_a_keyword(self)
scipy.linalg.tests.test_basic.TestSolve.test_check_finite(self)
scipy.linalg.tests.test_basic.TestSolve.test_empty_rhs(self)
scipy.linalg.tests.test_basic.TestSolve.test_hermitian(self)
scipy.linalg.tests.test_basic.TestSolve.test_ill_condition_warning(self)
scipy.linalg.tests.test_basic.TestSolve.test_multiple_rhs(self)
scipy.linalg.tests.test_basic.TestSolve.test_nils_20Feb04(self)
scipy.linalg.tests.test_basic.TestSolve.test_nonsquare_a(self)
scipy.linalg.tests.test_basic.TestSolve.test_pos_and_sym(self)
scipy.linalg.tests.test_basic.TestSolve.test_random(self)
scipy.linalg.tests.test_basic.TestSolve.test_random_complex(self)
scipy.linalg.tests.test_basic.TestSolve.test_random_sym(self)
scipy.linalg.tests.test_basic.TestSolve.test_random_sym_complex(self)
scipy.linalg.tests.test_basic.TestSolve.test_scalar_a_and_1D_b(self)
scipy.linalg.tests.test_basic.TestSolve.test_simple(self)
scipy.linalg.tests.test_basic.TestSolve.test_simple2(self)
scipy.linalg.tests.test_basic.TestSolve.test_simple_complex(self)
scipy.linalg.tests.test_basic.TestSolve.test_simple_complex2(self)
scipy.linalg.tests.test_basic.TestSolve.test_simple_her(self)
scipy.linalg.tests.test_basic.TestSolve.test_simple_her_actuallysym(self)
scipy.linalg.tests.test_basic.TestSolve.test_simple_pos(self)
scipy.linalg.tests.test_basic.TestSolve.test_simple_pos_complexb(self)
scipy.linalg.tests.test_basic.TestSolve.test_simple_sym(self)
scipy.linalg.tests.test_basic.TestSolve.test_simple_sym_complex(self)
scipy.linalg.tests.test_basic.TestSolve.test_simple_sym_complexb(self)
scipy.linalg.tests.test_basic.TestSolve.test_singularity(self)
scipy.linalg.tests.test_basic.TestSolve.test_size_mismatch_with_1D_b(self)
scipy.linalg.tests.test_basic.TestSolve.test_sym_pos_dep(self)
scipy.linalg.tests.test_basic.TestSolve.test_transposed_keyword(self)
scipy.linalg.tests.test_basic.TestSolve.test_transposed_notimplemented(self)
scipy.linalg.tests.test_basic.TestSolveBanded
scipy.linalg.tests.test_basic.TestSolveBanded.test_1x1(self)
scipy.linalg.tests.test_basic.TestSolveBanded.test_bad_shape(self)
scipy.linalg.tests.test_basic.TestSolveBanded.test_check_finite(self)
scipy.linalg.tests.test_basic.TestSolveBanded.test_complex(self)
scipy.linalg.tests.test_basic.TestSolveBanded.test_native_list_arguments(self)
scipy.linalg.tests.test_basic.TestSolveBanded.test_real(self)
scipy.linalg.tests.test_basic.TestSolveBanded.test_tridiag_complex(self)
scipy.linalg.tests.test_basic.TestSolveBanded.test_tridiag_real(self)
scipy.linalg.tests.test_basic.TestSolveCirculant
scipy.linalg.tests.test_basic.TestSolveCirculant.test_axis_args(self)
scipy.linalg.tests.test_basic.TestSolveCirculant.test_basic1(self)
scipy.linalg.tests.test_basic.TestSolveCirculant.test_basic2(self)
scipy.linalg.tests.test_basic.TestSolveCirculant.test_basic3(self)
scipy.linalg.tests.test_basic.TestSolveCirculant.test_complex(self)
scipy.linalg.tests.test_basic.TestSolveCirculant.test_native_list_arguments(self)
scipy.linalg.tests.test_basic.TestSolveCirculant.test_random_b_and_c(self)
scipy.linalg.tests.test_basic.TestSolveCirculant.test_singular(self)
scipy.linalg.tests.test_basic.TestSolveHBanded
scipy.linalg.tests.test_basic.TestSolveHBanded.test_01_complex(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_01_float32(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_01_lower(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_01_upper(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_02_complex(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_02_float32(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_02_lower(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_02_upper(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_03_upper(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_1x1(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_bad_shapes(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_check_finite(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_native_list_arguments(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_tridiag_01_complex(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_tridiag_01_float32(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_tridiag_01_lower(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_tridiag_01_upper(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_tridiag_02_complex(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_tridiag_02_float32(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_tridiag_02_lower(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_tridiag_02_upper(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_tridiag_03_upper(self)
scipy.linalg.tests.test_basic.TestSolveTriangular
scipy.linalg.tests.test_basic.TestSolveTriangular.test_check_finite(self)
scipy.linalg.tests.test_basic.TestSolveTriangular.test_simple(self)
scipy.linalg.tests.test_basic.TestSolveTriangular.test_simple_complex(self)
scipy.linalg.tests.test_basic.TestVectorNorms
scipy.linalg.tests.test_basic.TestVectorNorms.test_axis_kwd(self)
scipy.linalg.tests.test_basic.TestVectorNorms.test_keepdims_kwd(self)
scipy.linalg.tests.test_basic.TestVectorNorms.test_large_vector(self)
scipy.linalg.tests.test_basic.TestVectorNorms.test_overflow(self)
scipy.linalg.tests.test_basic.TestVectorNorms.test_stable(self)
scipy.linalg.tests.test_basic.TestVectorNorms.test_types(self)
scipy.linalg.tests.test_basic.TestVectorNorms.test_zero_norm(self)
scipy.linalg.tests.test_basic._eps_cast(dtyp)
scipy.linalg.tests.test_basic.direct_lstsq(a,b,cmplx=0)
scipy.linalg.tests.test_basic.test_auto_rcond(scale,pinv_)
scipy.linalg.tests.test_eps_cast(dtyp)
scipy.linalg.tests.testdirect_lstsq(a,b,cmplx=0)
scipy.linalg.tests.testtest_auto_rcond(scale,pinv_)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_lapack.py----------------------------------------
A:scipy.linalg.tests.test_lapack.names->set(lapack.__doc__.split())
A:scipy.linalg.tests.test_lapack.ignore_list->set(['absolute_import', 'clapack', 'division', 'find_best_lapack_type', 'flapack', 'print_function', 'HAS_ILP64'])
A:scipy.linalg.tests.test_lapack.missing->list()
A:scipy.linalg.tests.test_lapack.f->numpy.array(3, dtype)
A:scipy.linalg.tests.test_lapack.(ba, lo, hi, pivscale, info)->f(a1, permute=1, scale=1)
A:scipy.linalg.tests.test_lapack.(ht, tau, info)->f(a)
A:scipy.linalg.tests.test_lapack.a->generate_random_dtype_array([n, n], dtype=dtype)
A:scipy.linalg.tests.test_lapack.b->generate_random_dtype_array([n, n], dtype=dtype)
A:scipy.linalg.tests.test_lapack.c->numpy.array([[-2.54 + 0.09j], [1.65 - 2.26j], [-2.11 - 3.96j], [1.82 + 3.3j], [-6.41 + 3.77j], [2.07 + 0.66j]])
A:scipy.linalg.tests.test_lapack.(trsyl,)->get_lapack_funcs(('trsyl',), (a1,))
A:scipy.linalg.tests.test_lapack.(x, scale, info)->trsyl(a1, b1, c1, isgn=-1)
A:scipy.linalg.tests.test_lapack.a1->numpy.array([[1.0 + 4j, 2.0], [4.0 + 0.5j, 5.0 - 3j], [7.0 - 2j, 8.0 + 0.7j]], dtype=dtype)
A:scipy.linalg.tests.test_lapack.(lange,)->get_lapack_funcs(('lange',), (a1,))
A:scipy.linalg.tests.test_lapack.value->lange(norm_str, a1)
A:scipy.linalg.tests.test_lapack.ref->numpy.max(np.sum(np.abs(a1), axis=1))
A:scipy.linalg.tests.test_lapack.b1->numpy.array([16.0, 17.0 + 2j, 20.0 - 4j], dtype=dtype)
A:scipy.linalg.tests.test_lapack.(gls, glslw)->get_lapack_funcs(('gels', 'gels_lwork'), dtype=dtype)
A:scipy.linalg.tests.test_lapack.lwork->_compute_lwork(tgsen_lwork, select, s, t)
A:scipy.linalg.tests.test_lapack.(_, _, info)->gls(a1, b1, trans='TTCC'[ind], lwork=lwork)
A:scipy.linalg.tests.test_lapack.(gels, gels_lwork, geqrf)->get_lapack_funcs(('gels', 'gels_lwork', 'geqrf'), (a1, b1))
A:scipy.linalg.tests.test_lapack.(lqr, x, info)->gels(a1, b1, lwork=lwork)
A:scipy.linalg.tests.test_lapack.(lqr_truth, _, _, _)->geqrf(a1)
A:scipy.linalg.tests.test_lapack.(gelsd, gelsd_lwork)->get_lapack_funcs(('gelsd', 'gelsd_lwork'), (a1, b1))
A:scipy.linalg.tests.test_lapack.(work, iwork, info)->gelsd_lwork(m, n, nrhs, -1)
A:scipy.linalg.tests.test_lapack.(x, s, rank, info)->gelsd(a1, b1, lwork, rwork_size, iwork_size, -1, False, False)
A:scipy.linalg.tests.test_lapack.(work, rwork, iwork, info)->gelsd_lwork(m, n, nrhs, -1)
A:scipy.linalg.tests.test_lapack.rwork_size->int(rwork)
A:scipy.linalg.tests.test_lapack.(gelss, gelss_lwork)->get_lapack_funcs(('gelss', 'gelss_lwork'), (a1, b1))
A:scipy.linalg.tests.test_lapack.(work, info)->gelsy_lwork(m, n, nrhs, 10 * np.finfo(dtype).eps)
A:scipy.linalg.tests.test_lapack.(v, x, s, rank, work, info)->gelss(a1, b1, -1, lwork, False, False)
A:scipy.linalg.tests.test_lapack.(gelsy, gelsy_lwork)->get_lapack_funcs(('gelsy', 'gelss_lwork'), (a1, b1))
A:scipy.linalg.tests.test_lapack.jptv->numpy.zeros((a1.shape[1], 1), dtype=np.int32)
A:scipy.linalg.tests.test_lapack.(v, x, j, rank, info)->gelsy(a1, b1, jptv, np.finfo(dtype).eps, lwork, False, False)
A:scipy.linalg.tests.test_lapack.geqrf_lwork->get_lapack_funcs('geqrf_lwork', dtype=dtype)
A:scipy.linalg.tests.test_lapack.(lwork, info)->geqrfp_lwork(m=m, n=n)
A:scipy.linalg.tests.test_lapack.(gerqf,)->get_lapack_funcs(['gerqf'], [a])
A:scipy.linalg.tests.test_lapack.(rq, tau, work, info)->gerqf(a)
A:scipy.linalg.tests.test_lapack.(orgrq,)->get_lapack_funcs(['orgrq'], [a])
A:scipy.linalg.tests.test_lapack.(ungrq,)->get_lapack_funcs(['ungrq'], [a])
A:scipy.linalg.tests.test_lapack.x->generate_random_dtype_array((n, 2), dtype=dtype)
A:scipy.linalg.tests.test_lapack.(dpotrf, dpotri)->get_lapack_funcs(('potrf', 'potri'), (a,))
A:scipy.linalg.tests.test_lapack.(c, info)->gemqrt(a, t, C, side=side, trans=trans)
A:scipy.linalg.tests.test_lapack.sigmas->numpy.array([4.0, 3.0, 2.0, 0])
A:scipy.linalg.tests.test_lapack.m_vec->numpy.array([3.12, 5.7, -4.8, -2.2])
A:scipy.linalg.tests.test_lapack.M->numpy.hstack((np.vstack((np.diag(sigmas[0:-1]), np.zeros((1, len(m_vec) - 1)))), m_vec[:, np.newaxis]))
A:scipy.linalg.tests.test_lapack.SM->svd(M, full_matrices=False, compute_uv=False, overwrite_a=False, check_finite=False)
A:scipy.linalg.tests.test_lapack.it_len->len(sigmas)
A:scipy.linalg.tests.test_lapack.sgm->numpy.concatenate((sigmas[::-1], [sigmas[0] + it_len * norm(m_vec)]))
A:scipy.linalg.tests.test_lapack.mvc->numpy.concatenate((m_vec[::-1], (0,)))
A:scipy.linalg.tests.test_lapack.lasd4->get_lapack_funcs('lasd4', (sigmas,))
A:scipy.linalg.tests.test_lapack.res->lasd4(i, sgm, mvc)
A:scipy.linalg.tests.test_lapack.ab->numpy.ones((ldab, n), dtype=float)
A:scipy.linalg.tests.test_lapack.x_out->numpy.array([[2j, 1 + 5j], [1 - 3j, -7 - 2j], [-4.001887 - 4.988417j, 3.02683 + 4.003182j], [1.996158 - 1.045105j, -6.103357 - 8.986653j]], dtype=dtype)
A:scipy.linalg.tests.test_lapack.tbtrs->get_lapack_funcs('tbtrs', dtype=float)
A:scipy.linalg.tests.test_lapack.(x, info)->pptrs(n, ul, b, lower=lower)
A:scipy.linalg.tests.test_lapack.band_offsets->range(ku, -kl - 1, -1)
A:scipy.linalg.tests.test_lapack.bands[ku]->numpy.ones(n, dtype=dtype)
A:scipy.linalg.tests.test_lapack.ab[row, max(k, 0):min(n + k, n)]->generate_random_dtype_array([n, n], dtype=dtype).diagonal(k)
A:scipy.linalg.tests.test_lapack.(_, info)->hetrd_lwork(n, lower=x)
A:scipy.linalg.tests.test_lapack.lartg->get_lapack_funcs('lartg', dtype=dtype)
A:scipy.linalg.tests.test_lapack.g->numpy.array(4, dtype)
A:scipy.linalg.tests.test_lapack.(cs, sn, r)->lartg(f, g)
A:scipy.linalg.tests.test_lapack.u->numpy.full(4, 3, dtype)
A:scipy.linalg.tests.test_lapack.v->numpy.concatenate((np.eye(n, dtype=dtype), b_pent))
A:scipy.linalg.tests.test_lapack.rot->get_lapack_funcs('rot', dtype=dtype)
A:scipy.linalg.tests.test_lapack.(a, b)->rot(u, v, c, s, overwrite_x=1, overwrite_y=1)
A:scipy.linalg.tests.test_lapack.a0->a0.T.dot(a0).T.dot(a0)
A:scipy.linalg.tests.test_lapack.a0j->a0j.T.conj().dot(a0j).T.conj().dot(a0j)
A:scipy.linalg.tests.test_lapack.(larfg, larf)->get_lapack_funcs(['larfg', 'larf'], dtype=dtype)
A:scipy.linalg.tests.test_lapack.(alpha, x, tau)->larfg(a.shape[0] - 1, a[1, 0], a[2:, 0])
A:scipy.linalg.tests.test_lapack.expected->numpy.array([1.08742917 - 1.96205783j, -0.74093902 + 3.72973919j, 1.08742917 - 1.96205759j, -0.74093896 + 3.72973895j])
A:scipy.linalg.tests.test_lapack.a[1:, :]->larf(v, tau.conjugate(), a[1:, :], np.zeros(a.shape[1]))
A:scipy.linalg.tests.test_lapack.a[:, 1:]->larf(v, tau, a[:, 1:], np.zeros(a.shape[0]), side='R')
A:scipy.linalg.tests.test_lapack.sgesdd_lwork->get_lapack_funcs('gesdd_lwork', dtype=np.float32, ilp64='preferred')
A:scipy.linalg.tests.test_lapack.A->generate_random_dtype_array((m, n), dtype=dtype)
A:scipy.linalg.tests.test_lapack.sytrd->get_lapack_funcs('sytrd', (A,))
A:scipy.linalg.tests.test_lapack.(sytrd, sytrd_lwork)->get_lapack_funcs(('sytrd', 'sytrd_lwork'), (A,))
A:scipy.linalg.tests.test_lapack.A[np.triu_indices_from(A)]->numpy.arange(1, n * (n + 1) // 2 + 1, dtype=dtype)
A:scipy.linalg.tests.test_lapack.(data, d, e, tau, info)->hetrd(A, lwork=lwork)
A:scipy.linalg.tests.test_lapack.T->numpy.zeros_like(A, dtype=real_dtype)
A:scipy.linalg.tests.test_lapack.k->numpy.arange(A.shape[0], dtype=int)
A:scipy.linalg.tests.test_lapack.k2->numpy.arange(A.shape[0] - 1, dtype=int)
A:scipy.linalg.tests.test_lapack.Q->reduce(np.dot, ref)
A:scipy.linalg.tests.test_lapack.i_lower->numpy.tril_indices(n, -1)
A:scipy.linalg.tests.test_lapack.QTAQ->numpy.dot(Q.T, np.dot(A, Q))
A:scipy.linalg.tests.test_lapack.hetrd->get_lapack_funcs('hetrd', (A,))
A:scipy.linalg.tests.test_lapack.(hetrd, hetrd_lwork)->get_lapack_funcs(('hetrd', 'hetrd_lwork'), (A,))
A:scipy.linalg.tests.test_lapack.A[i_lower]->numpy.conj(A.T[i_lower])
A:scipy.linalg.tests.test_lapack.QHAQ->numpy.dot(np.conj(Q.T), np.dot(A, Q))
A:scipy.linalg.tests.test_lapack.(func, func_lwork)->get_lapack_funcs(('gglse', 'gglse_lwork'), dtype=dtype)
A:scipy.linalg.tests.test_lapack.d->generate_random_dtype_array((n,), realtype)
A:scipy.linalg.tests.test_lapack.(_, _, _, result, _)->func(a, b, c, d, lwork=lwork)
A:scipy.linalg.tests.test_lapack.func_lwork->get_lapack_funcs('hetrf_lwork', dtype=dtype)
A:scipy.linalg.tests.test_lapack.(funcon, functrf)->get_lapack_funcs(('hecon', 'hetrf'), dtype=dtype)
A:scipy.linalg.tests.test_lapack.anorm->numpy.linalg.norm(a, 1)
A:scipy.linalg.tests.test_lapack.(ldu, ipiv, _)->functrf(A, lwork=lwork, lower=1)
A:scipy.linalg.tests.test_lapack.(rcond, _)->funcon(a=ldu, ipiv=ipiv, anorm=anorm, lower=1)
A:scipy.linalg.tests.test_lapack.(potrf, sygst, syevd, sygvd)->get_lapack_funcs(('potrf', 'sygst', 'syevd', 'sygvd'), dtype=dtype)
A:scipy.linalg.tests.test_lapack.B->rand(n, n).astype(dtype)
A:scipy.linalg.tests.test_lapack.(eig_gvd, _, info)->hegvd(A, B)
A:scipy.linalg.tests.test_lapack.(b, info)->potrf(B)
A:scipy.linalg.tests.test_lapack.(a, info)->hegst(A, b)
A:scipy.linalg.tests.test_lapack.(eig, _, info)->heevd(a)
A:scipy.linalg.tests.test_lapack.(potrf, hegst, heevd, hegvd)->get_lapack_funcs(('potrf', 'hegst', 'heevd', 'hegvd'), dtype=dtype)
A:scipy.linalg.tests.test_lapack.(tzrzf, tzrzf_lw)->get_lapack_funcs(('tzrzf', 'tzrzf_lwork'), dtype=dtype)
A:scipy.linalg.tests.test_lapack.(rz, tau, info)->tzrzf(A, lwork=lwork_rz)
A:scipy.linalg.tests.test_lapack.R->numpy.concatenate((np.triu(a), np.zeros_like(a)))
A:scipy.linalg.tests.test_lapack.V->numpy.hstack((np.eye(qm, dtype=dtype), rz[:, qm:]))
A:scipy.linalg.tests.test_lapack.Id->numpy.eye(qn, dtype=dtype)
A:scipy.linalg.tests.test_lapack.Z->reduce(np.dot, ref)
A:scipy.linalg.tests.test_lapack.(trttf, tfttr, tfsm)->get_lapack_funcs(('trttf', 'tfttr', 'tfsm'), dtype=dtype)
A:scipy.linalg.tests.test_lapack.(Afp, _)->trttf(A)
A:scipy.linalg.tests.test_lapack.soln->tfsm(-1, Afp, B2, trans=trans, diag='U', side='R')
A:scipy.linalg.tests.test_lapack.A[np.arange(n), np.arange(n)]->dtype(1.0)
A:scipy.linalg.tests.test_lapack.B2->rand(3, n).astype(dtype)
A:scipy.linalg.tests.test_lapack.lwork_rz->_compute_lwork(tzrzf_lw, qm, qn)
A:scipy.linalg.tests.test_lapack.C->rand(n, n).astype(dtype)
A:scipy.linalg.tests.test_lapack.(orun_mrz, orun_mrz_lw)->get_lapack_funcs(('unmrz', 'unmrz_lwork'), dtype=dtype)
A:scipy.linalg.tests.test_lapack.lwork_mrz->_compute_lwork(orun_mrz_lw, cn, cn)
A:scipy.linalg.tests.test_lapack.(cq, info)->orun_mrz(rz, tau, C, side='R', trans=trans, lwork=lwork_mrz)
A:scipy.linalg.tests.test_lapack.A_full->rand(n, n).astype(dtype)
A:scipy.linalg.tests.test_lapack.(trttf, tfttr)->get_lapack_funcs(('trttf', 'tfttr'), dtype=dtype)
A:scipy.linalg.tests.test_lapack.(A_tf_U, info)->trttf(A_full)
A:scipy.linalg.tests.test_lapack.(A_tf_L, info)->trttf(A_full, uplo='L')
A:scipy.linalg.tests.test_lapack.(A_tf_U_T, info)->trttf(A_full, transr=transr, uplo='U')
A:scipy.linalg.tests.test_lapack.(A_tf_L_T, info)->trttf(A_full, transr=transr, uplo='L')
A:scipy.linalg.tests.test_lapack.A_tf_U_m->zeros((n + 1, n // 2), dtype=dtype)
A:scipy.linalg.tests.test_lapack.A_tf_L_m->zeros((n + 1, n // 2), dtype=dtype)
A:scipy.linalg.tests.test_lapack.(A_tr_U, info)->tpttr(n, A_tp_U)
A:scipy.linalg.tests.test_lapack.(A_tr_L, info)->tpttr(n, A_tp_L, uplo='L')
A:scipy.linalg.tests.test_lapack.(A_tr_U_T, info)->tfttr(n, A_tf_U_T, transr=transr, uplo='U')
A:scipy.linalg.tests.test_lapack.(A_tr_L_T, info)->tfttr(n, A_tf_L_T, transr=transr, uplo='L')
A:scipy.linalg.tests.test_lapack.(trttp, tpttr)->get_lapack_funcs(('trttp', 'tpttr'), dtype=dtype)
A:scipy.linalg.tests.test_lapack.(A_tp_U, info)->trttp(A_full)
A:scipy.linalg.tests.test_lapack.(A_tp_L, info)->trttp(A_full, uplo='L')
A:scipy.linalg.tests.test_lapack.inds->triu_indices(n)
A:scipy.linalg.tests.test_lapack.A_tp_U_m->zeros(n * (n + 1) // 2, dtype=dtype)
A:scipy.linalg.tests.test_lapack.A_tp_L_m->zeros(n * (n + 1) // 2, dtype=dtype)
A:scipy.linalg.tests.test_lapack.(pftrf, trttf, tfttr)->get_lapack_funcs(('pftrf', 'trttf', 'tfttr'), dtype=dtype)
A:scipy.linalg.tests.test_lapack.(Afp, info)->trttf(A)
A:scipy.linalg.tests.test_lapack.(Achol_rfp, info)->pftrf(n, Afp)
A:scipy.linalg.tests.test_lapack.(A_chol_r, _)->tfttr(n, Achol_rfp)
A:scipy.linalg.tests.test_lapack.Achol->cholesky(A)
A:scipy.linalg.tests.test_lapack.(pftri, pftrf, trttf, tfttr)->get_lapack_funcs(('pftri', 'pftrf', 'trttf', 'tfttr'), dtype=dtype)
A:scipy.linalg.tests.test_lapack.(A_chol_rfp, info)->pftrf(n, Afp)
A:scipy.linalg.tests.test_lapack.(A_inv_rfp, info)->pftri(n, A_chol_rfp)
A:scipy.linalg.tests.test_lapack.(A_inv_r, _)->tfttr(n, A_inv_rfp)
A:scipy.linalg.tests.test_lapack.Ainv->inv(A)
A:scipy.linalg.tests.test_lapack.Bf1->ones((n + 2, 3), dtype=dtype)
A:scipy.linalg.tests.test_lapack.Bf2->ones((n - 2, 3), dtype=dtype)
A:scipy.linalg.tests.test_lapack.(pftrs, pftrf, trttf, tfttr)->get_lapack_funcs(('pftrs', 'pftrf', 'trttf', 'tfttr'), dtype=dtype)
A:scipy.linalg.tests.test_lapack.(soln, info)->pftrs(n, A_chol_rfp, B)
A:scipy.linalg.tests.test_lapack.(trttf, tfttr, shfrk)->get_lapack_funcs(('trttf', 'tfttr', '{}frk'.format(prefix)), dtype=dtype)
A:scipy.linalg.tests.test_lapack.Afp_out->shfrk(n, 2, -1, C, 2, Afp)
A:scipy.linalg.tests.test_lapack.(A_out, _)->tfttr(n, Afp_out)
A:scipy.linalg.tests.test_lapack.(syconv, trf, trf_lwork)->get_lapack_funcs(('syconv', 'sytrf', 'sytrf_lwork'), dtype=dtype)
A:scipy.linalg.tests.test_lapack.lw->get_lapack_funcs(dlw, dtype=dtype_)
A:scipy.linalg.tests.test_lapack.(L, D, perm)->ldl(A, lower=1, hermitian=False)
A:scipy.linalg.tests.test_lapack.(ldu, ipiv, info)->trf(A, lower=0)
A:scipy.linalg.tests.test_lapack.(a, e, info)->syconv(ldu, ipiv, lower=0)
A:scipy.linalg.tests.test_lapack.(U, D, perm)->ldl(A, lower=0, hermitian=False)
A:scipy.linalg.tests.test_lapack.(geqrt, gemqrt)->get_lapack_funcs(('geqrt', 'gemqrt'), dtype=dtype)
A:scipy.linalg.tests.test_lapack.(a, t, info)->geqrt(n, A)
A:scipy.linalg.tests.test_lapack.q->reduce(np.dot, ref).T.conj()
A:scipy.linalg.tests.test_lapack.(c_default, info)->gemqrt(a, t, C)
A:scipy.linalg.tests.test_lapack.(tpqrt, tpmqrt)->get_lapack_funcs(('tpqrt', 'tpmqrt'), dtype=dtype)
A:scipy.linalg.tests.test_lapack.(a, b, t, info)->tpqrt(l, n, A, B)
A:scipy.linalg.tests.test_lapack.D->numpy.diag(df)
A:scipy.linalg.tests.test_lapack.(c, d, info)->tpmqrt(l, b, t, C, D, side=side, trans=trans)
A:scipy.linalg.tests.test_lapack.cd->numpy.concatenate((c, d), axis=1)
A:scipy.linalg.tests.test_lapack.CD->numpy.concatenate((C, D), axis=1)
A:scipy.linalg.tests.test_lapack.(c_default, d_default, info)->tpmqrt(l, b, t, C, D)
A:scipy.linalg.tests.test_lapack.pstrf->get_lapack_funcs('pstrf', dtype=dtype)
A:scipy.linalg.tests.test_lapack.(c, piv, r_c, info)->pstf2(A, lower=1)
A:scipy.linalg.tests.test_lapack.U->block_diag(u1, u2)
A:scipy.linalg.tests.test_lapack.L->numpy.eye(n, dtype=dtype)
A:scipy.linalg.tests.test_lapack.pstf2->get_lapack_funcs('pstf2', dtype=dtype)
A:scipy.linalg.tests.test_lapack.desired_real->numpy.random.rand(n)
A:scipy.linalg.tests.test_lapack.desired_cplx->numpy.array([[-0.2816 + 0.5359 * 1j, 0.0812 + 0.9188 * 1j, -0.7439 - 0.2561 * 1j], [-0.3562 - 0.2954 * 1j, 0.9566 - 0.0434 * 1j, -0.0174 + 0.1555 * 1j], [0.8607 + 0.1393 * 1j, -0.2759 + 0.7241 * 1j, -0.1642 - 0.1365 * 1j]])
A:scipy.linalg.tests.test_lapack.geequ->get_lapack_funcs('geequ', dtype=dtype)
A:scipy.linalg.tests.test_lapack.(r, c, rowcnd, colcnd, amax, info)->geequ(A)
A:scipy.linalg.tests.test_lapack.desired_log2s->numpy.array([0, 0, 0, 0, 0, 0, -1, -1, -2, -3])
A:scipy.linalg.tests.test_lapack.alpha->dtype(1.0 if ind < 2 else 1j)
A:scipy.linalg.tests.test_lapack.syequb->get_lapack_funcs('syequb', dtype=dtype)
A:scipy.linalg.tests.test_lapack.(s, scond, amax, info)->scipy.linalg.lapack.cheequb(A.astype(np.complex64), lower=1)
A:scipy.linalg.tests.test_lapack.getc2->get_lapack_funcs('getc2', dtype=dtype)
A:scipy.linalg.tests.test_lapack.gesc2->get_lapack_funcs('gesc2', dtype=dtype)
A:scipy.linalg.tests.test_lapack.(lu, ipiv, jpiv, info)->getc2(A, overwrite_a=0)
A:scipy.linalg.tests.test_lapack.(x, scale)->gesc2(lu, b, ipiv, jpiv, overwrite_rhs=0)
A:scipy.linalg.tests.test_lapack.gejsv->get_lapack_funcs('gejsv', dtype=A.dtype)
A:scipy.linalg.tests.test_lapack.is_complex->numpy.iscomplexobj(A)
A:scipy.linalg.tests.test_lapack.(sva, u, v, work, iwork, info)->gejsv(A)
A:scipy.linalg.tests.test_lapack.Ac->generate_random_dtype_array((m, n), dtype=dtype).copy('A')
A:scipy.linalg.tests.test_lapack._->gejsv(A)
A:scipy.linalg.tests.test_lapack.du->generate_random_dtype_array((n - 1,), dtype=dtype)
A:scipy.linalg.tests.test_lapack.dl->generate_random_dtype_array((n - 1,), dtype=dtype)
A:scipy.linalg.tests.test_lapack.(gttrf, gttrs)->get_lapack_funcs(('gttrf', 'gttrs'), (du[0], du[0]))
A:scipy.linalg.tests.test_lapack.(_dl, _d, _du, du2, ipiv, info)->gttrf(dl, d, du)
A:scipy.linalg.tests.test_lapack.b_cpy->generate_random_dtype_array([n, n], dtype=dtype).copy()
A:scipy.linalg.tests.test_lapack.(x_gttrs, info)->gttrs(_dl, _d, _du, du2, ipiv, b)
A:scipy.linalg.tests.test_lapack.(__dl, __d, __du, _du2, _ipiv, _info)->gttrf(dl, d, du)
A:scipy.linalg.tests.test_lapack.geqrfp_lwork->get_lapack_funcs('geqrfp_lwork', dtype=dtype)
A:scipy.linalg.tests.test_lapack.e->generate_random_dtype_array((n - 1,), dtype)
A:scipy.linalg.tests.test_lapack.pttrf->get_lapack_funcs('pttrf', dtype=e[0])
A:scipy.linalg.tests.test_lapack.(_d, _e, info)->pttrf(d, e)
A:scipy.linalg.tests.test_lapack.pttrs->get_lapack_funcs('pttrs', dtype=e[0])
A:scipy.linalg.tests.test_lapack.(_x, info)->pttrs(_d, _e, b, lower=1)
A:scipy.linalg.tests.test_lapack.A_eig->generate_random_dtype_array((n, n), dtype)
A:scipy.linalg.tests.test_lapack.pteqr->get_lapack_funcs('pteqr', dtype=d.dtype)
A:scipy.linalg.tests.test_lapack.(d, e, A, z)->pteqr_get_d_e_A_z(dtype, realtype, n, compute_z)
A:scipy.linalg.tests.test_lapack.(d_pteqr, e_pteqr, z_pteqr, info)->pteqr(d, e, z=z, compute_z=compute_z)
A:scipy.linalg.tests.test_lapack.(_d, _e, _z, info)->pteqr(d=d, e=e, z=z, compute_z=compute_z)
A:scipy.linalg.tests.test_lapack.geqrfp->get_lapack_funcs('geqrfp', dtype=A_empty.dtype)
A:scipy.linalg.tests.test_lapack.gqr->get_lapack_funcs('orgqr', dtype=dtype)
A:scipy.linalg.tests.test_lapack.(qr_A, tau, info)->geqrfp(A)
A:scipy.linalg.tests.test_lapack.r->min(min(p, q), min(m - p, m - q))
A:scipy.linalg.tests.test_lapack.qqr->numpy.zeros((m, m), dtype=dtype)
A:scipy.linalg.tests.test_lapack.(r_rq_neg, q_rq_neg)->qr(A_negative)
A:scipy.linalg.tests.test_lapack.(rq_A_neg, tau_neg, info_neg)->geqrfp(A_negative)
A:scipy.linalg.tests.test_lapack.A_empty->numpy.array([])
A:scipy.linalg.tests.test_lapack.sc_dlw->get_lapack_funcs(pfx + driver + '_lwork', dtype=dtype[0])
A:scipy.linalg.tests.test_lapack.dz_dlw->get_lapack_funcs(pfx + driver + '_lwork', dtype=dtype[1])
A:scipy.linalg.tests.test_lapack.p->randint(0, m)
A:scipy.linalg.tests.test_lapack.lwval->_compute_lwork(dlw, m, p, q)
A:scipy.linalg.tests.test_lapack.(drv, dlw)->get_lapack_funcs((pfx + 'csd', pfx + 'csd_lwork'), dtype=dtype_)
A:scipy.linalg.tests.test_lapack.(cs11, cs12, cs21, cs22, theta, u1, u2, v1t, v2t, info)->drv(X[:p, :q], X[:p, q:], X[p:, :q], X[p:, q:], **lwvals)
A:scipy.linalg.tests.test_lapack.VH->block_diag(v1t, v2t)
A:scipy.linalg.tests.test_lapack.S->numpy.zeros((m, m), dtype=dtype_)
A:scipy.linalg.tests.test_lapack.one->dtype_(1.0)
A:scipy.linalg.tests.test_lapack.S[i + n11, i + n11]->numpy.cos(theta[i])
A:scipy.linalg.tests.test_lapack.S[p + n22 + i, i + r + n21 + n22]->numpy.cos(theta[i])
A:scipy.linalg.tests.test_lapack.S[p + n22 + i, i + n11]->numpy.sin(theta[i])
A:scipy.linalg.tests.test_lapack.(gtsvx, gttrf)->get_lapack_funcs(('gtsvx', 'gttrf'), dtype=dtype)
A:scipy.linalg.tests.test_lapack.gtsvx_out->gtsvx(dl, d, du, b)
A:scipy.linalg.tests.test_lapack.gtsvx->get_lapack_funcs('gtsvx', dtype=d.dtype)
A:scipy.linalg.tests.test_lapack.ptsvx->get_lapack_funcs('ptsvx', dtype=e.dtype)
A:scipy.linalg.tests.test_lapack.x_soln->generate_random_dtype_array((n, 2), dtype=dtype)
A:scipy.linalg.tests.test_lapack.(df, ef, info)->df_de_lambda(d, e)
A:scipy.linalg.tests.test_lapack.(df, ef, x, rcond, ferr, berr, info)->ptsvx(d, e, b, fact=fact, df=df, ef=ef)
A:scipy.linalg.tests.test_lapack.(df, ef, x_ptsvx, rcond, ferr, berr, info)->ptsvx(d, e, b)
A:scipy.linalg.tests.test_lapack.(ppsv, pptrf, pptrs, pptri, ppcon)->get_lapack_funcs(('ppsv', 'pptrf', 'pptrs', 'pptri', 'ppcon'), dtype=dtype, ilp64='preferred')
A:scipy.linalg.tests.test_lapack.(ul, info)->pptrf(n, ap, lower=lower)
A:scipy.linalg.tests.test_lapack.(uli, info)->pptri(n, ul, lower=lower)
A:scipy.linalg.tests.test_lapack.bx->solve(a, b)
A:scipy.linalg.tests.test_lapack.(xv, info)->ppsv(n, ap, b, lower=lower)
A:scipy.linalg.tests.test_lapack.(rcond, info)->ppcon(n, ap, anorm=anorm, lower=lower)
A:scipy.linalg.tests.test_lapack.(gees, trexc)->get_lapack_funcs(('gees', 'trexc'), dtype=dtype)
A:scipy.linalg.tests.test_lapack.result->tgsen(select, s, t, q, z, lwork=lwork)
A:scipy.linalg.tests.test_lapack.trexc->get_lapack_funcs('trexc', dtype=t.dtype)
A:scipy.linalg.tests.test_lapack.(gges, tgexc)->get_lapack_funcs(('gges', 'tgexc'), dtype=dtype)
A:scipy.linalg.tests.test_lapack.(gees, trsen, trsen_lwork)->get_lapack_funcs(('gees', 'trsen', 'trsen_lwork'), dtype=dtype)
A:scipy.linalg.tests.test_lapack.select->numpy.zeros(n)
A:scipy.linalg.tests.test_lapack.(trsen, trsen_lwork)->get_lapack_funcs(('trsen', 'trsen_lwork'), dtype=t.dtype)
A:scipy.linalg.tests.test_lapack.(gges, tgsen, tgsen_lwork)->get_lapack_funcs(('gges', 'tgsen', 'tgsen_lwork'), dtype=dtype)
scipy.linalg.tests.test_TestBlockedQR
scipy.linalg.tests.test_TestBlockedQR.test_geqrt_gemqrt(self)
scipy.linalg.tests.test_TestBlockedQR.test_tpqrt_tpmqrt(self)
scipy.linalg.tests.test_TestDlasd4
scipy.linalg.tests.test_TestDlasd4.test_sing_val_update(self)
scipy.linalg.tests.test_TestDpotr
scipy.linalg.tests.test_TestDpotr.test_gh_2691(self)
scipy.linalg.tests.test_TestFlapackSimple
scipy.linalg.tests.test_TestFlapackSimple.test_gebal(self)
scipy.linalg.tests.test_TestFlapackSimple.test_gehrd(self)
scipy.linalg.tests.test_TestFlapackSimple.test_lange(self)
scipy.linalg.tests.test_TestFlapackSimple.test_trsyl(self)
scipy.linalg.tests.test_TestHetrd
scipy.linalg.tests.test_TestHetrd.test_hetrd(self,n,real_dtype,complex_dtype)
scipy.linalg.tests.test_TestHetrd.test_hetrd_with_zero_dim_array(self,complex_dtype)
scipy.linalg.tests.test_TestLapack
scipy.linalg.tests.test_TestLapack.test_clapack(self)
scipy.linalg.tests.test_TestLapack.test_flapack(self)
scipy.linalg.tests.test_TestLeastSquaresSolvers
scipy.linalg.tests.test_TestLeastSquaresSolvers.test_gels(self)
scipy.linalg.tests.test_TestLeastSquaresSolvers.test_gelsd(self)
scipy.linalg.tests.test_TestLeastSquaresSolvers.test_gelss(self)
scipy.linalg.tests.test_TestLeastSquaresSolvers.test_gelsy(self)
scipy.linalg.tests.test_TestRegression
scipy.linalg.tests.test_TestRegression.test_ticket_1645(self)
scipy.linalg.tests.test_TestSytrd
scipy.linalg.tests.test_TestSytrd.test_sytrd(self,dtype,n)
scipy.linalg.tests.test_TestSytrd.test_sytrd_with_zero_dim_array(self,dtype)
scipy.linalg.tests.test_TestTbtrs
scipy.linalg.tests.test_TestTbtrs.test_invalid_argument_raises_exception(self,uplo,trans,diag)
scipy.linalg.tests.test_TestTbtrs.test_invalid_matrix_shapes(self,ldab,n,ldb,nrhs)
scipy.linalg.tests.test_TestTbtrs.test_nag_example_f07vef_f07vsf(self,dtype)
scipy.linalg.tests.test_TestTbtrs.test_random_matrices(self,dtype,trans,uplo,diag)
scipy.linalg.tests.test_TestTbtrs.test_zero_element_in_diagonal(self)
scipy.linalg.tests.test_generate_random_dtype_array(shape,dtype)
scipy.linalg.tests.test_lapack.TestBlockedQR
scipy.linalg.tests.test_lapack.TestBlockedQR.test_geqrt_gemqrt(self)
scipy.linalg.tests.test_lapack.TestBlockedQR.test_tpqrt_tpmqrt(self)
scipy.linalg.tests.test_lapack.TestDlasd4
scipy.linalg.tests.test_lapack.TestDlasd4.test_sing_val_update(self)
scipy.linalg.tests.test_lapack.TestDpotr
scipy.linalg.tests.test_lapack.TestDpotr.test_gh_2691(self)
scipy.linalg.tests.test_lapack.TestFlapackSimple
scipy.linalg.tests.test_lapack.TestFlapackSimple.test_gebal(self)
scipy.linalg.tests.test_lapack.TestFlapackSimple.test_gehrd(self)
scipy.linalg.tests.test_lapack.TestFlapackSimple.test_lange(self)
scipy.linalg.tests.test_lapack.TestFlapackSimple.test_trsyl(self)
scipy.linalg.tests.test_lapack.TestHetrd
scipy.linalg.tests.test_lapack.TestHetrd.test_hetrd(self,n,real_dtype,complex_dtype)
scipy.linalg.tests.test_lapack.TestHetrd.test_hetrd_with_zero_dim_array(self,complex_dtype)
scipy.linalg.tests.test_lapack.TestLapack
scipy.linalg.tests.test_lapack.TestLapack.test_clapack(self)
scipy.linalg.tests.test_lapack.TestLapack.test_flapack(self)
scipy.linalg.tests.test_lapack.TestLeastSquaresSolvers
scipy.linalg.tests.test_lapack.TestLeastSquaresSolvers.test_gels(self)
scipy.linalg.tests.test_lapack.TestLeastSquaresSolvers.test_gelsd(self)
scipy.linalg.tests.test_lapack.TestLeastSquaresSolvers.test_gelss(self)
scipy.linalg.tests.test_lapack.TestLeastSquaresSolvers.test_gelsy(self)
scipy.linalg.tests.test_lapack.TestRegression
scipy.linalg.tests.test_lapack.TestRegression.test_ticket_1645(self)
scipy.linalg.tests.test_lapack.TestSytrd
scipy.linalg.tests.test_lapack.TestSytrd.test_sytrd(self,dtype,n)
scipy.linalg.tests.test_lapack.TestSytrd.test_sytrd_with_zero_dim_array(self,dtype)
scipy.linalg.tests.test_lapack.TestTbtrs
scipy.linalg.tests.test_lapack.TestTbtrs.test_invalid_argument_raises_exception(self,uplo,trans,diag)
scipy.linalg.tests.test_lapack.TestTbtrs.test_invalid_matrix_shapes(self,ldab,n,ldb,nrhs)
scipy.linalg.tests.test_lapack.TestTbtrs.test_nag_example_f07vef_f07vsf(self,dtype)
scipy.linalg.tests.test_lapack.TestTbtrs.test_random_matrices(self,dtype,trans,uplo,diag)
scipy.linalg.tests.test_lapack.TestTbtrs.test_zero_element_in_diagonal(self)
scipy.linalg.tests.test_lapack.generate_random_dtype_array(shape,dtype)
scipy.linalg.tests.test_lapack.pteqr_get_d_e_A_z(dtype,realtype,n,compute_z)
scipy.linalg.tests.test_lapack.test_geequ()
scipy.linalg.tests.test_lapack.test_gees_trexc(dtype)
scipy.linalg.tests.test_lapack.test_gees_trsen(dtype)
scipy.linalg.tests.test_lapack.test_gejsv_NAG(A,sva_expect,u_expect,v_expect)
scipy.linalg.tests.test_lapack.test_gejsv_edge_arguments(dtype)
scipy.linalg.tests.test_lapack.test_gejsv_general(size,dtype,joba,jobu,jobv,jobr,jobp,jobt=0)
scipy.linalg.tests.test_lapack.test_gejsv_invalid_job_arguments(kwargs)
scipy.linalg.tests.test_lapack.test_generalized_eigh_lworks(pfx,driver)
scipy.linalg.tests.test_lapack.test_geqrf_lwork(dtype,shape)
scipy.linalg.tests.test_lapack.test_geqrfp(dtype,matrix_size)
scipy.linalg.tests.test_lapack.test_geqrfp_errors_with_empty_array()
scipy.linalg.tests.test_lapack.test_geqrfp_lwork(dtype,shape)
scipy.linalg.tests.test_lapack.test_getc2_gesc2()
scipy.linalg.tests.test_lapack.test_gges_tgexc(dtype)
scipy.linalg.tests.test_lapack.test_gges_tgsen(dtype)
scipy.linalg.tests.test_lapack.test_gglse()
scipy.linalg.tests.test_lapack.test_gtsvx(dtype,trans_bool,fact)
scipy.linalg.tests.test_lapack.test_gtsvx_NAG(du,d,dl,b,x)
scipy.linalg.tests.test_lapack.test_gtsvx_error_incompatible_size(dtype,trans_bool,fact)
scipy.linalg.tests.test_lapack.test_gtsvx_error_singular(dtype,trans_bool,fact)
scipy.linalg.tests.test_lapack.test_gttrf_gttrs(dtype)
scipy.linalg.tests.test_lapack.test_gttrf_gttrs_NAG_f07cdf_f07cef_f07crf_f07csf(du,d,dl,du_exp,d_exp,du2_exp,ipiv_exp,b,x)
scipy.linalg.tests.test_lapack.test_heequb()
scipy.linalg.tests.test_lapack.test_hegst()
scipy.linalg.tests.test_lapack.test_lapack_documented()
scipy.linalg.tests.test_lapack.test_larfg_larf()
scipy.linalg.tests.test_lapack.test_lartg()
scipy.linalg.tests.test_lapack.test_orcsd_uncsd(dtype_)
scipy.linalg.tests.test_lapack.test_orcsd_uncsd_lwork(dtype_,m)
scipy.linalg.tests.test_lapack.test_ormrz_unmrz()
scipy.linalg.tests.test_lapack.test_pftrf()
scipy.linalg.tests.test_lapack.test_pftri()
scipy.linalg.tests.test_lapack.test_pftrs()
scipy.linalg.tests.test_lapack.test_pptrs_pptri_pptrf_ppsv_ppcon(dtype,lower)
scipy.linalg.tests.test_lapack.test_pstf2()
scipy.linalg.tests.test_lapack.test_pstrf()
scipy.linalg.tests.test_lapack.test_pteqr(dtype,realtype,compute_z)
scipy.linalg.tests.test_lapack.test_pteqr_NAG_f08jgf(compute_z,d,e,d_expect,z_expect)
scipy.linalg.tests.test_lapack.test_pteqr_error_non_spd(dtype,realtype,compute_z)
scipy.linalg.tests.test_lapack.test_pteqr_error_singular(dtype,realtype,compute_z)
scipy.linalg.tests.test_lapack.test_pteqr_raise_error_wrong_shape(dtype,realtype,compute_z)
scipy.linalg.tests.test_lapack.test_ptsvx(dtype,realtype,fact,df_de_lambda)
scipy.linalg.tests.test_lapack.test_ptsvx_NAG(d,e,b,x)
scipy.linalg.tests.test_lapack.test_ptsvx_error_raise_errors(dtype,realtype,fact,df_de_lambda)
scipy.linalg.tests.test_lapack.test_ptsvx_non_SPD_singular(dtype,realtype,fact,df_de_lambda)
scipy.linalg.tests.test_lapack.test_pttrf_pttrs(ddtype,dtype)
scipy.linalg.tests.test_lapack.test_pttrf_pttrs_NAG(d,e,d_expect,e_expect,b,x_expect)
scipy.linalg.tests.test_lapack.test_pttrf_pttrs_errors_incompatible_shape(ddtype,dtype)
scipy.linalg.tests.test_lapack.test_pttrf_pttrs_errors_singular_nonSPD(ddtype,dtype)
scipy.linalg.tests.test_lapack.test_rot()
scipy.linalg.tests.test_lapack.test_sfrk_hfrk()
scipy.linalg.tests.test_lapack.test_sgesdd_lwork_bug_workaround()
scipy.linalg.tests.test_lapack.test_standard_eigh_lworks(pfx,driver)
scipy.linalg.tests.test_lapack.test_sycon_hecon()
scipy.linalg.tests.test_lapack.test_syconv()
scipy.linalg.tests.test_lapack.test_syequb()
scipy.linalg.tests.test_lapack.test_sygst()
scipy.linalg.tests.test_lapack.test_tfsm()
scipy.linalg.tests.test_lapack.test_tfttr_trttf()
scipy.linalg.tests.test_lapack.test_tpttr_trttp()
scipy.linalg.tests.test_lapack.test_trexc_NAG(t,ifst,ilst,expect)
scipy.linalg.tests.test_lapack.test_trsen_NAG(t,q,select,expect,expect_s,expect_sep)
scipy.linalg.tests.test_lapack.test_tzrzf()
scipy.linalg.tests.test_pteqr_get_d_e_A_z(dtype,realtype,n,compute_z)
scipy.linalg.tests.test_test_geequ()
scipy.linalg.tests.test_test_gees_trexc(dtype)
scipy.linalg.tests.test_test_gees_trsen(dtype)
scipy.linalg.tests.test_test_gejsv_NAG(A,sva_expect,u_expect,v_expect)
scipy.linalg.tests.test_test_gejsv_edge_arguments(dtype)
scipy.linalg.tests.test_test_gejsv_general(size,dtype,joba,jobu,jobv,jobr,jobp,jobt=0)
scipy.linalg.tests.test_test_gejsv_invalid_job_arguments(kwargs)
scipy.linalg.tests.test_test_generalized_eigh_lworks(pfx,driver)
scipy.linalg.tests.test_test_geqrf_lwork(dtype,shape)
scipy.linalg.tests.test_test_geqrfp(dtype,matrix_size)
scipy.linalg.tests.test_test_geqrfp_errors_with_empty_array()
scipy.linalg.tests.test_test_geqrfp_lwork(dtype,shape)
scipy.linalg.tests.test_test_getc2_gesc2()
scipy.linalg.tests.test_test_gges_tgexc(dtype)
scipy.linalg.tests.test_test_gges_tgsen(dtype)
scipy.linalg.tests.test_test_gglse()
scipy.linalg.tests.test_test_gtsvx(dtype,trans_bool,fact)
scipy.linalg.tests.test_test_gtsvx_NAG(du,d,dl,b,x)
scipy.linalg.tests.test_test_gtsvx_error_incompatible_size(dtype,trans_bool,fact)
scipy.linalg.tests.test_test_gtsvx_error_singular(dtype,trans_bool,fact)
scipy.linalg.tests.test_test_gttrf_gttrs(dtype)
scipy.linalg.tests.test_test_gttrf_gttrs_NAG_f07cdf_f07cef_f07crf_f07csf(du,d,dl,du_exp,d_exp,du2_exp,ipiv_exp,b,x)
scipy.linalg.tests.test_test_heequb()
scipy.linalg.tests.test_test_hegst()
scipy.linalg.tests.test_test_lapack_documented()
scipy.linalg.tests.test_test_larfg_larf()
scipy.linalg.tests.test_test_lartg()
scipy.linalg.tests.test_test_orcsd_uncsd(dtype_)
scipy.linalg.tests.test_test_orcsd_uncsd_lwork(dtype_,m)
scipy.linalg.tests.test_test_ormrz_unmrz()
scipy.linalg.tests.test_test_pftrf()
scipy.linalg.tests.test_test_pftri()
scipy.linalg.tests.test_test_pftrs()
scipy.linalg.tests.test_test_pptrs_pptri_pptrf_ppsv_ppcon(dtype,lower)
scipy.linalg.tests.test_test_pstf2()
scipy.linalg.tests.test_test_pstrf()
scipy.linalg.tests.test_test_pteqr(dtype,realtype,compute_z)
scipy.linalg.tests.test_test_pteqr_NAG_f08jgf(compute_z,d,e,d_expect,z_expect)
scipy.linalg.tests.test_test_pteqr_error_non_spd(dtype,realtype,compute_z)
scipy.linalg.tests.test_test_pteqr_error_singular(dtype,realtype,compute_z)
scipy.linalg.tests.test_test_pteqr_raise_error_wrong_shape(dtype,realtype,compute_z)
scipy.linalg.tests.test_test_ptsvx(dtype,realtype,fact,df_de_lambda)
scipy.linalg.tests.test_test_ptsvx_NAG(d,e,b,x)
scipy.linalg.tests.test_test_ptsvx_error_raise_errors(dtype,realtype,fact,df_de_lambda)
scipy.linalg.tests.test_test_ptsvx_non_SPD_singular(dtype,realtype,fact,df_de_lambda)
scipy.linalg.tests.test_test_pttrf_pttrs(ddtype,dtype)
scipy.linalg.tests.test_test_pttrf_pttrs_NAG(d,e,d_expect,e_expect,b,x_expect)
scipy.linalg.tests.test_test_pttrf_pttrs_errors_incompatible_shape(ddtype,dtype)
scipy.linalg.tests.test_test_pttrf_pttrs_errors_singular_nonSPD(ddtype,dtype)
scipy.linalg.tests.test_test_rot()
scipy.linalg.tests.test_test_sfrk_hfrk()
scipy.linalg.tests.test_test_sgesdd_lwork_bug_workaround()
scipy.linalg.tests.test_test_standard_eigh_lworks(pfx,driver)
scipy.linalg.tests.test_test_sycon_hecon()
scipy.linalg.tests.test_test_syconv()
scipy.linalg.tests.test_test_syequb()
scipy.linalg.tests.test_test_sygst()
scipy.linalg.tests.test_test_tfsm()
scipy.linalg.tests.test_test_tfttr_trttf()
scipy.linalg.tests.test_test_tpttr_trttp()
scipy.linalg.tests.test_test_trexc_NAG(t,ifst,ilst,expect)
scipy.linalg.tests.test_test_trsen_NAG(t,q,select,expect,expect_s,expect_sep)
scipy.linalg.tests.test_test_tzrzf()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_decomp_ldl.py----------------------------------------
A:scipy.linalg.tests.test_decomp_ldl.A->eye(3)
A:scipy.linalg.tests.test_decomp_ldl.a->array([[-0.39 - 0.71j, 5.14 - 0.64j, -7.86 - 2.96j, 3.8 + 0.92j], [5.14 - 0.64j, 8.86 + 1.81j, -3.52 + 0.58j, 5.32 - 1.59j], [-7.86 - 2.96j, -3.52 + 0.58j, -2.83 - 0.03j, -1.54 - 2.86j], [3.8 + 0.92j, 5.32 - 1.59j, -1.54 - 2.86j, -0.56 + 0.12j]])
A:scipy.linalg.tests.test_decomp_ldl.(l, d, p)->ldl(x, lower=1)
A:scipy.linalg.tests.test_decomp_ldl.b->array([[5.0, 10, 1, 18], [10.0, 2, 11, 1], [1.0, 11, 19, 9], [18.0, 1, 9, 0]])
A:scipy.linalg.tests.test_decomp_ldl.c->array([[52.0, 97, 112, 107, 50], [97.0, 114, 89, 98, 13], [112.0, 89, 64, 33, 6], [107.0, 98, 33, 60, 73], [50.0, 13, 6, 73, 77]])
A:scipy.linalg.tests.test_decomp_ldl.d->array([[2.0, 2, -4, 0, 4], [2.0, -2, -2, 10, -8], [-4.0, -2, 6, -8, -4], [0.0, 10, -8, 6, -6], [4.0, -8, -4, -6, 10]])
A:scipy.linalg.tests.test_decomp_ldl.e->array([[-1.36 + 0j, 0 + 0j, 0 + 0j, 0 + 0j], [1.58 - 0.9j, -8.87 + 0j, 0 + 0j, 0 + 0j], [2.21 + 0.21j, -1.84 + 0.03j, -4.63 + 0j, 0 + 0j], [3.91 - 1.5j, -1.78 - 1.18j, 0.11 - 0.11j, -1.84 + 0j]])
A:scipy.linalg.tests.test_decomp_ldl.(u, d, p)->ldl(x, lower=0)
A:scipy.linalg.tests.test_decomp_ldl.n->randint(1, 100)
A:scipy.linalg.tests.test_decomp_ldl.l_ind->tril_indices_from(x, k=-1)
A:scipy.linalg.tests.test_decomp_ldl.u_ind->triu_indices_from(x, k=1)
A:scipy.linalg.tests.test_decomp_ldl.msg->'Failed for size: {}, dtype: {}'.format(n, dtype)
A:scipy.linalg.tests.test_decomp_ldl.x->(rand(n, n) + 1j * rand(n, n)).astype(dtype)
A:scipy.linalg.tests.test_decomp_ldl.(l, d1, p)->ldl(x, hermitian=0)
A:scipy.linalg.tests.test_decomp_ldl.(u, d2, p)->ldl(x, lower=0, hermitian=0)
A:scipy.linalg.tests.test_decomp_ldl.msg1->'Her failed for size: {}, dtype: {}'.format(n, dtype)
A:scipy.linalg.tests.test_decomp_ldl.msg2->'Sym failed for size: {}, dtype: {}'.format(n, dtype)
scipy.linalg.tests.test_decomp_ldl.test_args()
scipy.linalg.tests.test_decomp_ldl.test_empty_array()
scipy.linalg.tests.test_decomp_ldl.test_ldl_type_size_combinations_complex(n,dtype)
scipy.linalg.tests.test_decomp_ldl.test_ldl_type_size_combinations_real(n,dtype)
scipy.linalg.tests.test_decomp_ldl.test_permutations()
scipy.linalg.tests.test_decomp_ldl.test_simple()
scipy.linalg.tests.testtest_args()
scipy.linalg.tests.testtest_empty_array()
scipy.linalg.tests.testtest_ldl_type_size_combinations_complex(n,dtype)
scipy.linalg.tests.testtest_ldl_type_size_combinations_real(n,dtype)
scipy.linalg.tests.testtest_permutations()
scipy.linalg.tests.testtest_simple()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_decomp.py----------------------------------------
A:scipy.linalg.tests.test_decomp.A->numpy.array([[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 0, 0]])
A:scipy.linalg.tests.test_decomp.x->numpy.array([[0.5376671395461, 0.318765239858981, 3.57839693972576, 0.725404224946106], [1.833885014595086, -1.307688296305273, 2.769437029884877, -0.063054873189656], [-2.258846861003648, -0.433592022305684, -1.349886940156521, 0.714742903826096], [0.862173320368121, 0.34262446653865, 3.034923466331855, -0.204966058299775]])
A:scipy.linalg.tests.test_decomp.(x_mant, x_exp)->numpy.frexp(x)
A:scipy.linalg.tests.test_decomp.act->dtype(act)
A:scipy.linalg.tests.test_decomp.des->dtype(des)
A:scipy.linalg.tests.test_decomp.v->scipy.stats.ortho_group.rvs(dim)
A:scipy.linalg.tests.test_decomp.w->eigvalsh(a, subset_by_index=[1, 2])
A:scipy.linalg.tests.test_decomp.a->zeros(1608, dtype=np.uint8)
A:scipy.linalg.tests.test_decomp.(w, v)->numpy.linalg.eig(X)
A:scipy.linalg.tests.test_decomp.v0->array([1, 1, (1 + sqrt(93) / 3) / 2])
A:scipy.linalg.tests.test_decomp.v1->array([3.0, 0, -1])
A:scipy.linalg.tests.test_decomp.v2->array([1, 1, (1 - sqrt(93) / 3) / 2])
A:scipy.linalg.tests.test_decomp.(w, vl, vr)->eig(a, left=1, right=1)
A:scipy.linalg.tests.test_decomp.(w, vr)->eig(A, B0)
A:scipy.linalg.tests.test_decomp.B->numpy.array([[1, 0, 0], [0, 1, 0], [0, 0, 0], [0, 0, 0], [0, 0, 1]])
A:scipy.linalg.tests.test_decomp.wt->eigvals(A, B0)
A:scipy.linalg.tests.test_decomp.perm->argsort(clear_fuss(w_fin))
A:scipy.linalg.tests.test_decomp.permt->argsort(clear_fuss(wt_fin))
A:scipy.linalg.tests.test_decomp.length->numpy.empty(len(vr))
A:scipy.linalg.tests.test_decomp.length[i]->norm(vr[:, i])
A:scipy.linalg.tests.test_decomp.M->numpy.eye(10, dtype=float)
A:scipy.linalg.tests.test_decomp.K->array(([2, -1, -1], [-1, 2, -1], [-1, -1, 2]))
A:scipy.linalg.tests.test_decomp.D->array(([1, -1, 0], [-1, 1, 0], [0, 0, 0]))
A:scipy.linalg.tests.test_decomp.Z->zeros((3, 3))
A:scipy.linalg.tests.test_decomp.I3->eye(3)
A:scipy.linalg.tests.test_decomp.(A, B)->matrices(omega=k * 5.0 / 100)
A:scipy.linalg.tests.test_decomp.(ew, ev)->numpy.linalg.eig(self.full_mat)
A:scipy.linalg.tests.test_decomp.args->list(args)
A:scipy.linalg.tests.test_decomp.self.bandmat_sym->zeros((LDAB, N), dtype=float)
A:scipy.linalg.tests.test_decomp.self.bandmat_herm->zeros((LDAB, N), dtype=complex)
A:scipy.linalg.tests.test_decomp.self.bandmat_sym[LDAB - i - 1, i:N]->diag(self.sym_mat, i)
A:scipy.linalg.tests.test_decomp.self.bandmat_herm[LDAB - i - 1, i:N]->diag(self.herm_mat, i)
A:scipy.linalg.tests.test_decomp.self.bandmat_real->zeros((LDAB, N), dtype=float)
A:scipy.linalg.tests.test_decomp.self.bandmat_real[2 * self.KL, :]->diag(self.real_mat)
A:scipy.linalg.tests.test_decomp.self.bandmat_real[2 * self.KL - 1 - i, i + 1:N]->diag(self.real_mat, i + 1)
A:scipy.linalg.tests.test_decomp.self.bandmat_real[2 * self.KL + 1 + i, 0:N - 1 - i]->diag(self.real_mat, -i - 1)
A:scipy.linalg.tests.test_decomp.self.bandmat_comp->zeros((LDAB, N), dtype=complex)
A:scipy.linalg.tests.test_decomp.self.bandmat_comp[2 * self.KL, :]->diag(self.comp_mat)
A:scipy.linalg.tests.test_decomp.self.bandmat_comp[2 * self.KL - 1 - i, i + 1:N]->diag(self.comp_mat, i + 1)
A:scipy.linalg.tests.test_decomp.self.bandmat_comp[2 * self.KL + 1 + i, 0:N - 1 - i]->diag(self.comp_mat, -i - 1)
A:scipy.linalg.tests.test_decomp.(w, evec, info)->zhbevd(self.bandmat_herm, compute_v=1)
A:scipy.linalg.tests.test_decomp.(N, N)->shape(self.herm_mat)
A:scipy.linalg.tests.test_decomp.(w, evec, num, ifail, info)->zhbevx(self.bandmat_herm, 0.0, 0.0, 1, N, compute_v=1, range=2)
A:scipy.linalg.tests.test_decomp.w_sym->eigvals_banded(self.bandmat_sym, check_finite=False)
A:scipy.linalg.tests.test_decomp.w_herm->eigvals_banded(self.bandmat_herm)
A:scipy.linalg.tests.test_decomp.ind2->numpy.longlong(6)
A:scipy.linalg.tests.test_decomp.w_sym_ind->eigvals_banded(self.bandmat_sym, select='i', select_range=(ind1, ind2))
A:scipy.linalg.tests.test_decomp.w_herm_ind->eigvals_banded(self.bandmat_herm, select='i', select_range=(ind1, ind2))
A:scipy.linalg.tests.test_decomp.w_sym_val->eigvals_banded(self.bandmat_sym, select='v', select_range=(v_lower, v_upper))
A:scipy.linalg.tests.test_decomp.w_herm_val->eigvals_banded(self.bandmat_herm, select='v', select_range=(v_lower, v_upper))
A:scipy.linalg.tests.test_decomp.(w_sym, evec_sym)->eig_banded(self.bandmat_sym, check_finite=False)
A:scipy.linalg.tests.test_decomp.(w_herm, evec_herm)->eig_banded(self.bandmat_herm)
A:scipy.linalg.tests.test_decomp.(w_sym_ind, evec_sym_ind)->eig_banded(self.bandmat_sym, select='i', select_range=(ind1, ind2))
A:scipy.linalg.tests.test_decomp.(w_herm_ind, evec_herm_ind)->eig_banded(self.bandmat_herm, select='i', select_range=(ind1, ind2))
A:scipy.linalg.tests.test_decomp.(w_sym_val, evec_sym_val)->eig_banded(self.bandmat_sym, select='v', select_range=(v_lower, v_upper))
A:scipy.linalg.tests.test_decomp.(w_herm_val, evec_herm_val)->eig_banded(self.bandmat_herm, select='v', select_range=(v_lower, v_upper))
A:scipy.linalg.tests.test_decomp.(M, N)->shape(self.comp_mat)
A:scipy.linalg.tests.test_decomp.(lu_symm_band, ipiv, info)->zgbtrf(self.bandmat_comp, self.KL, self.KU)
A:scipy.linalg.tests.test_decomp.u->diag(lu_symm_band[2 * self.KL, :])
A:scipy.linalg.tests.test_decomp.(p_lin, l_lin, u_lin)->lu(self.comp_mat, permute_l=0)
A:scipy.linalg.tests.test_decomp.(y, info)->zgbtrs(lu_symm_band, self.KL, self.KU, self.bc, ipiv)
A:scipy.linalg.tests.test_decomp.y_lin->numpy.linalg.solve(self.comp_mat, self.bc)
A:scipy.linalg.tests.test_decomp.self.d->full(N, 1.0)
A:scipy.linalg.tests.test_decomp.self.e->full(N - 1, -1.0)
A:scipy.linalg.tests.test_decomp.w_ind->eigvalsh_tridiagonal(self.d, self.e, select='i', select_range=(ind1, ind2), lapack_driver=driver)
A:scipy.linalg.tests.test_decomp.w_val->eigvalsh_tridiagonal(self.d, self.e, select='v', select_range=(v_lower, v_upper), lapack_driver=driver)
A:scipy.linalg.tests.test_decomp.(w, evec)->eigh_tridiagonal(self.d, self.e, select='v', select_range=(v_lower, v_upper), lapack_driver=driver)
A:scipy.linalg.tests.test_decomp.b->numpy.ones(10)
A:scipy.linalg.tests.test_decomp.(w, z)->eigh(a, b)
A:scipy.linalg.tests.test_decomp.atol->numpy.spacing(5000.0)
A:scipy.linalg.tests.test_decomp.w2->eigvalsh(a, subset_by_index=[1, 2])
A:scipy.linalg.tests.test_decomp.w3->eigvalsh(b, subset_by_value=[1, 1.4])
A:scipy.linalg.tests.test_decomp.(w_dep, v_dep)->eigh(a, eigvals=[0, 1])
A:scipy.linalg.tests.test_decomp.self.a->self.a.astype(float32)
A:scipy.linalg.tests.test_decomp.self.ca->self.ca.astype(complex64)
A:scipy.linalg.tests.test_decomp.self.b->self.b.astype(float32)
A:scipy.linalg.tests.test_decomp.self.cb->self.cb.astype(complex64)
A:scipy.linalg.tests.test_decomp.self.hrect->self.hrect.astype(float32)
A:scipy.linalg.tests.test_decomp.self.vrect->self.vrect.astype(float32)
A:scipy.linalg.tests.test_decomp.self.med->self.vrect.astype(float32)
A:scipy.linalg.tests.test_decomp.(p, l, u)->lu(self.a, check_finite=False)
A:scipy.linalg.tests.test_decomp.(pl, u)->lu(data, permute_l=1)
A:scipy.linalg.tests.test_decomp.(l_and_u1, piv1)->lu_factor(data)
A:scipy.linalg.tests.test_decomp.(getrf,)->get_lapack_funcs(('getrf',), (data,))
A:scipy.linalg.tests.test_decomp.(l_and_u2, piv2, _)->getrf(data, overwrite_a=False)
A:scipy.linalg.tests.test_decomp.(LU, P)->lu_factor(A)
A:scipy.linalg.tests.test_decomp.self.chrect->self.hrect.astype(complex64)
A:scipy.linalg.tests.test_decomp.self.cvrect->self.vrect.astype(complex64)
A:scipy.linalg.tests.test_decomp.self.cmed->self.vrect.astype(complex64)
A:scipy.linalg.tests.test_decomp.a0->random((10, 10))
A:scipy.linalg.tests.test_decomp.x1->solve(a, b)
A:scipy.linalg.tests.test_decomp.lu_a->lu_factor(a, check_finite=False)
A:scipy.linalg.tests.test_decomp.x2->lu_solve(lu_a, b, check_finite=False)
A:scipy.linalg.tests.test_decomp.(u, s, vh)->svd(A, full_matrices=False)
A:scipy.linalg.tests.test_decomp.sigma->zeros((u.shape[0], vh.shape[0]), s.dtype.char)
A:scipy.linalg.tests.test_decomp.s->svdvals(a, check_finite=False)
A:scipy.linalg.tests.test_decomp.(q, r)->qr(a, lwork=None)
A:scipy.linalg.tests.test_decomp.(qc, r2)->qr_multiply(a, c, 'left', overwrite_c=True)
A:scipy.linalg.tests.test_decomp.(qc, r)->qr_multiply(a, eye(n), 'left')
A:scipy.linalg.tests.test_decomp.(q, r, p)->qr(a, pivoting=True)
A:scipy.linalg.tests.test_decomp.d->abs(diag(r))
A:scipy.linalg.tests.test_decomp.(q2, r2)->qr(a, lwork=3)
A:scipy.linalg.tests.test_decomp.(q, r, jpvt)->qr(a, pivoting=True)
A:scipy.linalg.tests.test_decomp.(qc, r, jpvt)->qr_multiply(a, c, pivoting=True)
A:scipy.linalg.tests.test_decomp.c->random([m])
A:scipy.linalg.tests.test_decomp.(qc, r, kpvt)->qr_multiply(a, c, 'left', True)
A:scipy.linalg.tests.test_decomp.(cq, r2)->qr_multiply(a, c)
A:scipy.linalg.tests.test_decomp.(cq, r)->qr_multiply(a, eye(n))
A:scipy.linalg.tests.test_decomp.(cq, r, jpvt)->qr_multiply(a, eye(2), pivoting=True)
A:scipy.linalg.tests.test_decomp.(q3, r3)->qr(a, lwork=10)
A:scipy.linalg.tests.test_decomp.(q4, r4)->qr(a, lwork=-1)
A:scipy.linalg.tests.test_decomp.(r, q)->rq(a, check_finite=False)
A:scipy.linalg.tests.test_decomp.r2->rq(a, mode='r')
A:scipy.linalg.tests.test_decomp.(t, z)->schur(a, check_finite=False)
A:scipy.linalg.tests.test_decomp.(tc, zc)->schur(a, 'complex')
A:scipy.linalg.tests.test_decomp.(tc2, zc2)->rsf2csf(tc, zc)
A:scipy.linalg.tests.test_decomp.(t, u, sdim)->schur(a, sort=sort)
A:scipy.linalg.tests.test_decomp.(h, q)->hessenberg(a, calc_q=1)
A:scipy.linalg.tests.test_decomp.(h2, q2)->hessenberg(b, calc_q=1)
A:scipy.linalg.tests.test_decomp.(AA, BB, Q, Z)->qz(A, B, check_finite=False)
A:scipy.linalg.tests.test_decomp.(AA, BB, Q, Z, sdim)->qz(A, B, sort=lambda ar, ai, beta: ai == 0)
A:scipy.linalg.tests.test_decomp.A1->numpy.eye(2)
A:scipy.linalg.tests.test_decomp.B1->numpy.diag([-2, 0.5])
A:scipy.linalg.tests.test_decomp.A2->numpy.eye(2)
A:scipy.linalg.tests.test_decomp.B2->numpy.diag([-2 + 1j, 0.5 + 0.5j])
A:scipy.linalg.tests.test_decomp.A3->numpy.eye(2)
A:scipy.linalg.tests.test_decomp.B3->numpy.diag([2, 0])
A:scipy.linalg.tests.test_decomp.A4->numpy.eye(2)
A:scipy.linalg.tests.test_decomp.B4->numpy.diag([-2, 0])
A:scipy.linalg.tests.test_decomp.A5->numpy.diag([0, 1])
A:scipy.linalg.tests.test_decomp.Id->numpy.eye(*A.shape)
A:scipy.linalg.tests.test_decomp.(evals, _)->eig(AA[i:i + 2, i:i + 2], BB[i:i + 2, i:i + 2])
A:scipy.linalg.tests.test_decomp.sortfun->_select_function(sort)
A:scipy.linalg.tests.test_decomp.cursort->sortfun(np.array([alpha[i]]), np.array([beta[i]]))
A:scipy.linalg.tests.test_decomp.ret->ordqz(self.B[2], self.A[1], sort='lhp')
A:scipy.linalg.tests.test_decomp.out->numpy.empty_like(x, dtype=bool)
A:scipy.linalg.tests.test_decomp.B5->numpy.diag([0, 0.5])
A:scipy.linalg.tests.test_decomp.(_, _, alpha, beta, _, _)->ordqz(Ai, Bi, sort=sortstr)
A:scipy.linalg.tests.test_decomp._->ordqz(A, B, sort=lambda alpha, beta: alpha < beta, output='complex')
A:scipy.linalg.tests.test_decomp.(S, T, alpha, beta, U, V)->ordqz(A, B, sort='ouc')
A:scipy.linalg.tests.test_decomp.L->numpy.eye(10, dtype=float).tolist()
A:scipy.linalg.tests.test_decomp.M2->numpy.eye(10, dtype=float).copy()
A:scipy.linalg.tests.test_decomp.F1->Fake1()
A:scipy.linalg.tests.test_decomp.F2->Fake2()
A:scipy.linalg.tests.test_decomp.arr->asarray(item)
A:scipy.linalg.tests.test_decomp.z->numpy.frombuffer(a.data, offset=8, count=100, dtype=complex)
A:scipy.linalg.tests.test_decomp.aa->numpy.frombuffer(aa.data, offset=4, count=a[i].size, dtype=a[i].dtype)
A:scipy.linalg.tests.test_decomp.R->numpy.arange(100)
A:scipy.linalg.tests.test_decomp.S->numpy.frombuffer(S.data, offset=4, count=100, dtype=float)
A:scipy.linalg.tests.test_decomp.(LU, piv)->lu_factor(S)
A:scipy.linalg.tests.test_decomp.xlu->lu_factor(x)
A:scipy.linalg.tests.test_decomp.X->numpy.array([[[1, 2, 3], [1, 2, 3], [2, 5, 6 + 1j]], [[1, 2, 3], [1, 2, 3], [2, 5, 6 - 1j]]])
A:scipy.linalg.tests.test_decomp.Y->null_space(X, rcond=1e-06)
A:scipy.linalg.tests.test_decomp.H->hadamard(8, float)
A:scipy.linalg.tests.test_decomp.expected->numpy.array([np.pi / 2, 0, 0])
A:scipy.linalg.tests.test_decomp.(wr, vr)->cdf2rdf(w, v)
scipy.linalg.tests.testTestCDF2RDF
scipy.linalg.tests.testTestCDF2RDF.assert_eig_valid(self,w,v,x)
scipy.linalg.tests.testTestCDF2RDF.matmul(self,a,b)
scipy.linalg.tests.testTestCDF2RDF.test_low_dimensionality_error(self)
scipy.linalg.tests.testTestCDF2RDF.test_non_associated_error(self)
scipy.linalg.tests.testTestCDF2RDF.test_not_conjugate_pairs(self)
scipy.linalg.tests.testTestCDF2RDF.test_not_square_error(self)
scipy.linalg.tests.testTestCDF2RDF.test_random_1d_stacked_arrays(self)
scipy.linalg.tests.testTestCDF2RDF.test_random_2d_stacked_arrays(self)
scipy.linalg.tests.testTestCDF2RDF.test_single_array0x0real(self)
scipy.linalg.tests.testTestCDF2RDF.test_single_array2x2_complex(self)
scipy.linalg.tests.testTestCDF2RDF.test_single_array2x2_real(self)
scipy.linalg.tests.testTestCDF2RDF.test_single_array3x3_complex(self)
scipy.linalg.tests.testTestCDF2RDF.test_single_array3x3_real(self)
scipy.linalg.tests.testTestCDF2RDF.test_swapped_v_w_error(self)
scipy.linalg.tests.testTestDatacopied
scipy.linalg.tests.testTestDatacopied.test_datacopied(self)
scipy.linalg.tests.testTestDiagSVD
scipy.linalg.tests.testTestDiagSVD.test_simple(self)
scipy.linalg.tests.testTestEig
scipy.linalg.tests.testTestEig._check_gen_eig(self,A,B)
scipy.linalg.tests.testTestEig.test_bad_geneig(self)
scipy.linalg.tests.testTestEig.test_check_finite(self)
scipy.linalg.tests.testTestEig.test_falker(self)
scipy.linalg.tests.testTestEig.test_gh_3054(self)
scipy.linalg.tests.testTestEig.test_make_eigvals(self)
scipy.linalg.tests.testTestEig.test_not_square_error(self)
scipy.linalg.tests.testTestEig.test_shape_mismatch(self)
scipy.linalg.tests.testTestEig.test_simple(self)
scipy.linalg.tests.testTestEig.test_simple_complex(self)
scipy.linalg.tests.testTestEig.test_simple_complex_eig(self)
scipy.linalg.tests.testTestEig.test_singular(self)
scipy.linalg.tests.testTestEigBanded
scipy.linalg.tests.testTestEigBanded.create_bandmat(self)
scipy.linalg.tests.testTestEigBanded.setup_method(self)
scipy.linalg.tests.testTestEigBanded.test_dgbtrf(self)
scipy.linalg.tests.testTestEigBanded.test_dgbtrs(self)
scipy.linalg.tests.testTestEigBanded.test_dsbev(self)
scipy.linalg.tests.testTestEigBanded.test_dsbevd(self)
scipy.linalg.tests.testTestEigBanded.test_dsbevx(self)
scipy.linalg.tests.testTestEigBanded.test_eig_banded(self)
scipy.linalg.tests.testTestEigBanded.test_eigvals_banded(self)
scipy.linalg.tests.testTestEigBanded.test_zgbtrf(self)
scipy.linalg.tests.testTestEigBanded.test_zgbtrs(self)
scipy.linalg.tests.testTestEigBanded.test_zhbevd(self)
scipy.linalg.tests.testTestEigBanded.test_zhbevx(self)
scipy.linalg.tests.testTestEigTridiagonal
scipy.linalg.tests.testTestEigTridiagonal.create_trimat(self)
scipy.linalg.tests.testTestEigTridiagonal.setup_method(self)
scipy.linalg.tests.testTestEigTridiagonal.test_degenerate(self)
scipy.linalg.tests.testTestEigTridiagonal.test_eigh_tridiagonal(self)
scipy.linalg.tests.testTestEigTridiagonal.test_eigvalsh_tridiagonal(self)
scipy.linalg.tests.testTestEigVals
scipy.linalg.tests.testTestEigVals.test_finite(self)
scipy.linalg.tests.testTestEigVals.test_simple(self)
scipy.linalg.tests.testTestEigVals.test_simple_complex(self)
scipy.linalg.tests.testTestEigVals.test_simple_tr(self)
scipy.linalg.tests.testTestEigh
scipy.linalg.tests.testTestEigh.setup_class(self)
scipy.linalg.tests.testTestEigh.test_deprecation_results(self)
scipy.linalg.tests.testTestEigh.test_deprecation_warnings(self,method)
scipy.linalg.tests.testTestEigh.test_eigh_integer(self)
scipy.linalg.tests.testTestEigh.test_eigh_of_sparse(self)
scipy.linalg.tests.testTestEigh.test_eigvalsh_new_args(self)
scipy.linalg.tests.testTestEigh.test_nonpositive_b(self)
scipy.linalg.tests.testTestEigh.test_value_subsets(self)
scipy.linalg.tests.testTestEigh.test_various_drivers_generalized(self,driver,type)
scipy.linalg.tests.testTestEigh.test_various_drivers_standard(self,driver,dtype_)
scipy.linalg.tests.testTestEigh.test_wrong_inputs(self)
scipy.linalg.tests.testTestHessenberg
scipy.linalg.tests.testTestHessenberg.test_2x2(self)
scipy.linalg.tests.testTestHessenberg.test_check_finite(self)
scipy.linalg.tests.testTestHessenberg.test_random(self)
scipy.linalg.tests.testTestHessenberg.test_random_complex(self)
scipy.linalg.tests.testTestHessenberg.test_simple(self)
scipy.linalg.tests.testTestHessenberg.test_simple2(self)
scipy.linalg.tests.testTestHessenberg.test_simple3(self)
scipy.linalg.tests.testTestHessenberg.test_simple_complex(self)
scipy.linalg.tests.testTestLU
scipy.linalg.tests.testTestLU._test_common(self,data)
scipy.linalg.tests.testTestLU._test_common_lu_factor(self,data)
scipy.linalg.tests.testTestLU.setup_method(self)
scipy.linalg.tests.testTestLU.test_check_finite(self)
scipy.linalg.tests.testTestLU.test_hrectangular(self)
scipy.linalg.tests.testTestLU.test_hrectangular_complex(self)
scipy.linalg.tests.testTestLU.test_medium1(self)
scipy.linalg.tests.testTestLU.test_medium1_complex(self)
scipy.linalg.tests.testTestLU.test_simple(self)
scipy.linalg.tests.testTestLU.test_simple2(self)
scipy.linalg.tests.testTestLU.test_simple2_complex(self)
scipy.linalg.tests.testTestLU.test_simple_complex(self)
scipy.linalg.tests.testTestLU.test_simple_known(self)
scipy.linalg.tests.testTestLU.test_vrectangular(self)
scipy.linalg.tests.testTestLU.test_vrectangular_complex(self)
scipy.linalg.tests.testTestLUSingle(TestLU)
scipy.linalg.tests.testTestLUSingle.setup_method(self)
scipy.linalg.tests.testTestLUSolve
scipy.linalg.tests.testTestLUSolve.setup_method(self)
scipy.linalg.tests.testTestLUSolve.test_check_finite(self)
scipy.linalg.tests.testTestLUSolve.test_lu(self)
scipy.linalg.tests.testTestOrdQZ
scipy.linalg.tests.testTestOrdQZ.check(self,A,B,sort,AA,BB,alpha,beta,Q,Z)
scipy.linalg.tests.testTestOrdQZ.check_all(self,sort)
scipy.linalg.tests.testTestOrdQZ.qz_decomp(self,sort)
scipy.linalg.tests.testTestOrdQZ.setup_class(cls)
scipy.linalg.tests.testTestOrdQZ.test_cef(self)
scipy.linalg.tests.testTestOrdQZ.test_diff_input_types(self)
scipy.linalg.tests.testTestOrdQZ.test_iuc(self)
scipy.linalg.tests.testTestOrdQZ.test_lhp(self)
scipy.linalg.tests.testTestOrdQZ.test_ouc(self)
scipy.linalg.tests.testTestOrdQZ.test_ref(self)
scipy.linalg.tests.testTestOrdQZ.test_rhp(self)
scipy.linalg.tests.testTestOrdQZ.test_sort_explicit(self)
scipy.linalg.tests.testTestOrdQZWorkspaceSize
scipy.linalg.tests.testTestOrdQZWorkspaceSize.setup_method(self)
scipy.linalg.tests.testTestOrdQZWorkspaceSize.test_decompose(self)
scipy.linalg.tests.testTestOrdQZWorkspaceSize.test_decompose_ouc(self)
scipy.linalg.tests.testTestOverwrite
scipy.linalg.tests.testTestOverwrite.test_eig(self)
scipy.linalg.tests.testTestOverwrite.test_eig_banded(self)
scipy.linalg.tests.testTestOverwrite.test_eigh(self)
scipy.linalg.tests.testTestOverwrite.test_eigvals(self)
scipy.linalg.tests.testTestOverwrite.test_eigvals_banded(self)
scipy.linalg.tests.testTestOverwrite.test_eigvalsh(self)
scipy.linalg.tests.testTestOverwrite.test_hessenberg(self)
scipy.linalg.tests.testTestOverwrite.test_lu(self)
scipy.linalg.tests.testTestOverwrite.test_lu_factor(self)
scipy.linalg.tests.testTestOverwrite.test_lu_solve(self)
scipy.linalg.tests.testTestOverwrite.test_qr(self)
scipy.linalg.tests.testTestOverwrite.test_rq(self)
scipy.linalg.tests.testTestOverwrite.test_schur(self)
scipy.linalg.tests.testTestOverwrite.test_schur_complex(self)
scipy.linalg.tests.testTestOverwrite.test_svd(self)
scipy.linalg.tests.testTestOverwrite.test_svdvals(self)
scipy.linalg.tests.testTestQR
scipy.linalg.tests.testTestQR.setup_method(self)
scipy.linalg.tests.testTestQR.test_check_finite(self)
scipy.linalg.tests.testTestQR.test_lwork(self)
scipy.linalg.tests.testTestQR.test_random(self)
scipy.linalg.tests.testTestQR.test_random_complex(self)
scipy.linalg.tests.testTestQR.test_random_complex_left(self)
scipy.linalg.tests.testTestQR.test_random_complex_pivoting(self)
scipy.linalg.tests.testTestQR.test_random_complex_right(self)
scipy.linalg.tests.testTestQR.test_random_left(self)
scipy.linalg.tests.testTestQR.test_random_pivoting(self)
scipy.linalg.tests.testTestQR.test_random_right(self)
scipy.linalg.tests.testTestQR.test_random_tall(self)
scipy.linalg.tests.testTestQR.test_random_tall_e(self)
scipy.linalg.tests.testTestQR.test_random_tall_e_pivoting(self)
scipy.linalg.tests.testTestQR.test_random_tall_left(self)
scipy.linalg.tests.testTestQR.test_random_tall_pivoting(self)
scipy.linalg.tests.testTestQR.test_random_tall_right(self)
scipy.linalg.tests.testTestQR.test_random_trap(self)
scipy.linalg.tests.testTestQR.test_random_trap_pivoting(self)
scipy.linalg.tests.testTestQR.test_simple(self)
scipy.linalg.tests.testTestQR.test_simple_complex(self)
scipy.linalg.tests.testTestQR.test_simple_complex_left(self)
scipy.linalg.tests.testTestQR.test_simple_complex_left_conjugate(self)
scipy.linalg.tests.testTestQR.test_simple_complex_left_pivoting(self)
scipy.linalg.tests.testTestQR.test_simple_complex_pivoting(self)
scipy.linalg.tests.testTestQR.test_simple_complex_right(self)
scipy.linalg.tests.testTestQR.test_simple_complex_right_conjugate(self)
scipy.linalg.tests.testTestQR.test_simple_complex_right_pivoting(self)
scipy.linalg.tests.testTestQR.test_simple_complex_tall_left_conjugate(self)
scipy.linalg.tests.testTestQR.test_simple_fat(self)
scipy.linalg.tests.testTestQR.test_simple_fat_e(self)
scipy.linalg.tests.testTestQR.test_simple_fat_e_pivoting(self)
scipy.linalg.tests.testTestQR.test_simple_fat_left(self)
scipy.linalg.tests.testTestQR.test_simple_fat_left_pivoting(self)
scipy.linalg.tests.testTestQR.test_simple_fat_pivoting(self)
scipy.linalg.tests.testTestQR.test_simple_fat_right(self)
scipy.linalg.tests.testTestQR.test_simple_fat_right_pivoting(self)
scipy.linalg.tests.testTestQR.test_simple_left(self)
scipy.linalg.tests.testTestQR.test_simple_left_pivoting(self)
scipy.linalg.tests.testTestQR.test_simple_pivoting(self)
scipy.linalg.tests.testTestQR.test_simple_right(self)
scipy.linalg.tests.testTestQR.test_simple_right_pivoting(self)
scipy.linalg.tests.testTestQR.test_simple_tall(self)
scipy.linalg.tests.testTestQR.test_simple_tall_complex_left(self)
scipy.linalg.tests.testTestQR.test_simple_tall_e(self)
scipy.linalg.tests.testTestQR.test_simple_tall_e_pivoting(self)
scipy.linalg.tests.testTestQR.test_simple_tall_left(self)
scipy.linalg.tests.testTestQR.test_simple_tall_left_pivoting(self)
scipy.linalg.tests.testTestQR.test_simple_tall_pivoting(self)
scipy.linalg.tests.testTestQR.test_simple_tall_right(self)
scipy.linalg.tests.testTestQR.test_simple_tall_right_pivoting(self)
scipy.linalg.tests.testTestQR.test_simple_trap(self)
scipy.linalg.tests.testTestQR.test_simple_trap_pivoting(self)
scipy.linalg.tests.testTestQZ
scipy.linalg.tests.testTestQZ.setup_method(self)
scipy.linalg.tests.testTestQZ.test_check_finite(self)
scipy.linalg.tests.testTestQZ.test_qz_complex(self)
scipy.linalg.tests.testTestQZ.test_qz_complex64(self)
scipy.linalg.tests.testTestQZ.test_qz_double(self)
scipy.linalg.tests.testTestQZ.test_qz_double_complex(self)
scipy.linalg.tests.testTestQZ.test_qz_double_sort(self)
scipy.linalg.tests.testTestQZ.test_qz_single(self)
scipy.linalg.tests.testTestRQ
scipy.linalg.tests.testTestRQ.setup_method(self)
scipy.linalg.tests.testTestRQ.test_check_finite(self)
scipy.linalg.tests.testTestRQ.test_r(self)
scipy.linalg.tests.testTestRQ.test_random(self)
scipy.linalg.tests.testTestRQ.test_random_complex(self)
scipy.linalg.tests.testTestRQ.test_random_complex_economic(self)
scipy.linalg.tests.testTestRQ.test_random_tall(self)
scipy.linalg.tests.testTestRQ.test_random_trap(self)
scipy.linalg.tests.testTestRQ.test_random_trap_economic(self)
scipy.linalg.tests.testTestRQ.test_simple(self)
scipy.linalg.tests.testTestRQ.test_simple_complex(self)
scipy.linalg.tests.testTestRQ.test_simple_fat(self)
scipy.linalg.tests.testTestRQ.test_simple_tall(self)
scipy.linalg.tests.testTestRQ.test_simple_trap(self)
scipy.linalg.tests.testTestSVDVals
scipy.linalg.tests.testTestSVDVals.test_check_finite(self)
scipy.linalg.tests.testTestSVDVals.test_crash_2609(self)
scipy.linalg.tests.testTestSVDVals.test_empty(self)
scipy.linalg.tests.testTestSVDVals.test_simple(self)
scipy.linalg.tests.testTestSVDVals.test_simple_complex(self)
scipy.linalg.tests.testTestSVDVals.test_simple_overdet(self)
scipy.linalg.tests.testTestSVDVals.test_simple_overdet_complex(self)
scipy.linalg.tests.testTestSVDVals.test_simple_underdet(self)
scipy.linalg.tests.testTestSVDVals.test_simple_underdet_complex(self)
scipy.linalg.tests.testTestSVD_GESDD
scipy.linalg.tests.testTestSVD_GESDD.setup_method(self)
scipy.linalg.tests.testTestSVD_GESDD.test_check_finite(self)
scipy.linalg.tests.testTestSVD_GESDD.test_crash_1580(self)
scipy.linalg.tests.testTestSVD_GESDD.test_degenerate(self)
scipy.linalg.tests.testTestSVD_GESDD.test_gh_5039(self)
scipy.linalg.tests.testTestSVD_GESDD.test_large_matrix(self)
scipy.linalg.tests.testTestSVD_GESDD.test_random(self)
scipy.linalg.tests.testTestSVD_GESDD.test_random_complex(self)
scipy.linalg.tests.testTestSVD_GESDD.test_simple(self)
scipy.linalg.tests.testTestSVD_GESDD.test_simple_complex(self)
scipy.linalg.tests.testTestSVD_GESDD.test_simple_overdet(self)
scipy.linalg.tests.testTestSVD_GESDD.test_simple_singular(self)
scipy.linalg.tests.testTestSVD_GESDD.test_simple_underdet(self)
scipy.linalg.tests.testTestSVD_GESVD(TestSVD_GESDD)
scipy.linalg.tests.testTestSVD_GESVD.setup_method(self)
scipy.linalg.tests.testTestSchur
scipy.linalg.tests.testTestSchur.check_schur(self,a,t,u,rtol,atol)
scipy.linalg.tests.testTestSchur.test_check_finite(self)
scipy.linalg.tests.testTestSchur.test_simple(self)
scipy.linalg.tests.testTestSchur.test_sort(self,sort,expected_diag)
scipy.linalg.tests.testTestSchur.test_sort_errors(self)
scipy.linalg.tests.test_check_orth(n,dtype,skip_big=False)
scipy.linalg.tests.test_complex_symrand(dim,dtype)
scipy.linalg.tests.test_decomp.TestCDF2RDF
scipy.linalg.tests.test_decomp.TestCDF2RDF.assert_eig_valid(self,w,v,x)
scipy.linalg.tests.test_decomp.TestCDF2RDF.matmul(self,a,b)
scipy.linalg.tests.test_decomp.TestCDF2RDF.test_low_dimensionality_error(self)
scipy.linalg.tests.test_decomp.TestCDF2RDF.test_non_associated_error(self)
scipy.linalg.tests.test_decomp.TestCDF2RDF.test_not_conjugate_pairs(self)
scipy.linalg.tests.test_decomp.TestCDF2RDF.test_not_square_error(self)
scipy.linalg.tests.test_decomp.TestCDF2RDF.test_random_1d_stacked_arrays(self)
scipy.linalg.tests.test_decomp.TestCDF2RDF.test_random_2d_stacked_arrays(self)
scipy.linalg.tests.test_decomp.TestCDF2RDF.test_single_array0x0real(self)
scipy.linalg.tests.test_decomp.TestCDF2RDF.test_single_array2x2_complex(self)
scipy.linalg.tests.test_decomp.TestCDF2RDF.test_single_array2x2_real(self)
scipy.linalg.tests.test_decomp.TestCDF2RDF.test_single_array3x3_complex(self)
scipy.linalg.tests.test_decomp.TestCDF2RDF.test_single_array3x3_real(self)
scipy.linalg.tests.test_decomp.TestCDF2RDF.test_swapped_v_w_error(self)
scipy.linalg.tests.test_decomp.TestDatacopied
scipy.linalg.tests.test_decomp.TestDatacopied.test_datacopied(self)
scipy.linalg.tests.test_decomp.TestDiagSVD
scipy.linalg.tests.test_decomp.TestDiagSVD.test_simple(self)
scipy.linalg.tests.test_decomp.TestEig
scipy.linalg.tests.test_decomp.TestEig._check_gen_eig(self,A,B)
scipy.linalg.tests.test_decomp.TestEig.test_bad_geneig(self)
scipy.linalg.tests.test_decomp.TestEig.test_check_finite(self)
scipy.linalg.tests.test_decomp.TestEig.test_falker(self)
scipy.linalg.tests.test_decomp.TestEig.test_gh_3054(self)
scipy.linalg.tests.test_decomp.TestEig.test_make_eigvals(self)
scipy.linalg.tests.test_decomp.TestEig.test_not_square_error(self)
scipy.linalg.tests.test_decomp.TestEig.test_shape_mismatch(self)
scipy.linalg.tests.test_decomp.TestEig.test_simple(self)
scipy.linalg.tests.test_decomp.TestEig.test_simple_complex(self)
scipy.linalg.tests.test_decomp.TestEig.test_simple_complex_eig(self)
scipy.linalg.tests.test_decomp.TestEig.test_singular(self)
scipy.linalg.tests.test_decomp.TestEigBanded
scipy.linalg.tests.test_decomp.TestEigBanded.create_bandmat(self)
scipy.linalg.tests.test_decomp.TestEigBanded.setup_method(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_dgbtrf(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_dgbtrs(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_dsbev(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_dsbevd(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_dsbevx(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_eig_banded(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_eigvals_banded(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_zgbtrf(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_zgbtrs(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_zhbevd(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_zhbevx(self)
scipy.linalg.tests.test_decomp.TestEigTridiagonal
scipy.linalg.tests.test_decomp.TestEigTridiagonal.create_trimat(self)
scipy.linalg.tests.test_decomp.TestEigTridiagonal.setup_method(self)
scipy.linalg.tests.test_decomp.TestEigTridiagonal.test_degenerate(self)
scipy.linalg.tests.test_decomp.TestEigTridiagonal.test_eigh_tridiagonal(self)
scipy.linalg.tests.test_decomp.TestEigTridiagonal.test_eigvalsh_tridiagonal(self)
scipy.linalg.tests.test_decomp.TestEigVals
scipy.linalg.tests.test_decomp.TestEigVals.test_finite(self)
scipy.linalg.tests.test_decomp.TestEigVals.test_simple(self)
scipy.linalg.tests.test_decomp.TestEigVals.test_simple_complex(self)
scipy.linalg.tests.test_decomp.TestEigVals.test_simple_tr(self)
scipy.linalg.tests.test_decomp.TestEigh
scipy.linalg.tests.test_decomp.TestEigh.setup_class(self)
scipy.linalg.tests.test_decomp.TestEigh.test_deprecation_results(self)
scipy.linalg.tests.test_decomp.TestEigh.test_deprecation_warnings(self,method)
scipy.linalg.tests.test_decomp.TestEigh.test_eigh_integer(self)
scipy.linalg.tests.test_decomp.TestEigh.test_eigh_of_sparse(self)
scipy.linalg.tests.test_decomp.TestEigh.test_eigvalsh_new_args(self)
scipy.linalg.tests.test_decomp.TestEigh.test_nonpositive_b(self)
scipy.linalg.tests.test_decomp.TestEigh.test_value_subsets(self)
scipy.linalg.tests.test_decomp.TestEigh.test_various_drivers_generalized(self,driver,type)
scipy.linalg.tests.test_decomp.TestEigh.test_various_drivers_standard(self,driver,dtype_)
scipy.linalg.tests.test_decomp.TestEigh.test_wrong_inputs(self)
scipy.linalg.tests.test_decomp.TestHessenberg
scipy.linalg.tests.test_decomp.TestHessenberg.test_2x2(self)
scipy.linalg.tests.test_decomp.TestHessenberg.test_check_finite(self)
scipy.linalg.tests.test_decomp.TestHessenberg.test_random(self)
scipy.linalg.tests.test_decomp.TestHessenberg.test_random_complex(self)
scipy.linalg.tests.test_decomp.TestHessenberg.test_simple(self)
scipy.linalg.tests.test_decomp.TestHessenberg.test_simple2(self)
scipy.linalg.tests.test_decomp.TestHessenberg.test_simple3(self)
scipy.linalg.tests.test_decomp.TestHessenberg.test_simple_complex(self)
scipy.linalg.tests.test_decomp.TestLU
scipy.linalg.tests.test_decomp.TestLU._test_common(self,data)
scipy.linalg.tests.test_decomp.TestLU._test_common_lu_factor(self,data)
scipy.linalg.tests.test_decomp.TestLU.setup_method(self)
scipy.linalg.tests.test_decomp.TestLU.test_check_finite(self)
scipy.linalg.tests.test_decomp.TestLU.test_hrectangular(self)
scipy.linalg.tests.test_decomp.TestLU.test_hrectangular_complex(self)
scipy.linalg.tests.test_decomp.TestLU.test_medium1(self)
scipy.linalg.tests.test_decomp.TestLU.test_medium1_complex(self)
scipy.linalg.tests.test_decomp.TestLU.test_simple(self)
scipy.linalg.tests.test_decomp.TestLU.test_simple2(self)
scipy.linalg.tests.test_decomp.TestLU.test_simple2_complex(self)
scipy.linalg.tests.test_decomp.TestLU.test_simple_complex(self)
scipy.linalg.tests.test_decomp.TestLU.test_simple_known(self)
scipy.linalg.tests.test_decomp.TestLU.test_vrectangular(self)
scipy.linalg.tests.test_decomp.TestLU.test_vrectangular_complex(self)
scipy.linalg.tests.test_decomp.TestLUSingle(TestLU)
scipy.linalg.tests.test_decomp.TestLUSingle.setup_method(self)
scipy.linalg.tests.test_decomp.TestLUSolve
scipy.linalg.tests.test_decomp.TestLUSolve.setup_method(self)
scipy.linalg.tests.test_decomp.TestLUSolve.test_check_finite(self)
scipy.linalg.tests.test_decomp.TestLUSolve.test_lu(self)
scipy.linalg.tests.test_decomp.TestOrdQZ
scipy.linalg.tests.test_decomp.TestOrdQZ.check(self,A,B,sort,AA,BB,alpha,beta,Q,Z)
scipy.linalg.tests.test_decomp.TestOrdQZ.check_all(self,sort)
scipy.linalg.tests.test_decomp.TestOrdQZ.qz_decomp(self,sort)
scipy.linalg.tests.test_decomp.TestOrdQZ.setup_class(cls)
scipy.linalg.tests.test_decomp.TestOrdQZ.test_cef(self)
scipy.linalg.tests.test_decomp.TestOrdQZ.test_diff_input_types(self)
scipy.linalg.tests.test_decomp.TestOrdQZ.test_iuc(self)
scipy.linalg.tests.test_decomp.TestOrdQZ.test_lhp(self)
scipy.linalg.tests.test_decomp.TestOrdQZ.test_ouc(self)
scipy.linalg.tests.test_decomp.TestOrdQZ.test_ref(self)
scipy.linalg.tests.test_decomp.TestOrdQZ.test_rhp(self)
scipy.linalg.tests.test_decomp.TestOrdQZ.test_sort_explicit(self)
scipy.linalg.tests.test_decomp.TestOrdQZWorkspaceSize
scipy.linalg.tests.test_decomp.TestOrdQZWorkspaceSize.setup_method(self)
scipy.linalg.tests.test_decomp.TestOrdQZWorkspaceSize.test_decompose(self)
scipy.linalg.tests.test_decomp.TestOrdQZWorkspaceSize.test_decompose_ouc(self)
scipy.linalg.tests.test_decomp.TestOverwrite
scipy.linalg.tests.test_decomp.TestOverwrite.test_eig(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_eig_banded(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_eigh(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_eigvals(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_eigvals_banded(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_eigvalsh(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_hessenberg(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_lu(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_lu_factor(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_lu_solve(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_qr(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_rq(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_schur(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_schur_complex(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_svd(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_svdvals(self)
scipy.linalg.tests.test_decomp.TestQR
scipy.linalg.tests.test_decomp.TestQR.setup_method(self)
scipy.linalg.tests.test_decomp.TestQR.test_check_finite(self)
scipy.linalg.tests.test_decomp.TestQR.test_lwork(self)
scipy.linalg.tests.test_decomp.TestQR.test_random(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_complex(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_complex_left(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_complex_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_complex_right(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_left(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_right(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_tall(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_tall_e(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_tall_e_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_tall_left(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_tall_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_tall_right(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_trap(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_trap_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_complex(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_complex_left(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_complex_left_conjugate(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_complex_left_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_complex_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_complex_right(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_complex_right_conjugate(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_complex_right_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_complex_tall_left_conjugate(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_fat(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_fat_e(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_fat_e_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_fat_left(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_fat_left_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_fat_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_fat_right(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_fat_right_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_left(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_left_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_right(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_right_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_tall(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_tall_complex_left(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_tall_e(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_tall_e_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_tall_left(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_tall_left_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_tall_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_tall_right(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_tall_right_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_trap(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_trap_pivoting(self)
scipy.linalg.tests.test_decomp.TestQZ
scipy.linalg.tests.test_decomp.TestQZ.setup_method(self)
scipy.linalg.tests.test_decomp.TestQZ.test_check_finite(self)
scipy.linalg.tests.test_decomp.TestQZ.test_qz_complex(self)
scipy.linalg.tests.test_decomp.TestQZ.test_qz_complex64(self)
scipy.linalg.tests.test_decomp.TestQZ.test_qz_double(self)
scipy.linalg.tests.test_decomp.TestQZ.test_qz_double_complex(self)
scipy.linalg.tests.test_decomp.TestQZ.test_qz_double_sort(self)
scipy.linalg.tests.test_decomp.TestQZ.test_qz_single(self)
scipy.linalg.tests.test_decomp.TestRQ
scipy.linalg.tests.test_decomp.TestRQ.setup_method(self)
scipy.linalg.tests.test_decomp.TestRQ.test_check_finite(self)
scipy.linalg.tests.test_decomp.TestRQ.test_r(self)
scipy.linalg.tests.test_decomp.TestRQ.test_random(self)
scipy.linalg.tests.test_decomp.TestRQ.test_random_complex(self)
scipy.linalg.tests.test_decomp.TestRQ.test_random_complex_economic(self)
scipy.linalg.tests.test_decomp.TestRQ.test_random_tall(self)
scipy.linalg.tests.test_decomp.TestRQ.test_random_trap(self)
scipy.linalg.tests.test_decomp.TestRQ.test_random_trap_economic(self)
scipy.linalg.tests.test_decomp.TestRQ.test_simple(self)
scipy.linalg.tests.test_decomp.TestRQ.test_simple_complex(self)
scipy.linalg.tests.test_decomp.TestRQ.test_simple_fat(self)
scipy.linalg.tests.test_decomp.TestRQ.test_simple_tall(self)
scipy.linalg.tests.test_decomp.TestRQ.test_simple_trap(self)
scipy.linalg.tests.test_decomp.TestSVDVals
scipy.linalg.tests.test_decomp.TestSVDVals.test_check_finite(self)
scipy.linalg.tests.test_decomp.TestSVDVals.test_crash_2609(self)
scipy.linalg.tests.test_decomp.TestSVDVals.test_empty(self)
scipy.linalg.tests.test_decomp.TestSVDVals.test_simple(self)
scipy.linalg.tests.test_decomp.TestSVDVals.test_simple_complex(self)
scipy.linalg.tests.test_decomp.TestSVDVals.test_simple_overdet(self)
scipy.linalg.tests.test_decomp.TestSVDVals.test_simple_overdet_complex(self)
scipy.linalg.tests.test_decomp.TestSVDVals.test_simple_underdet(self)
scipy.linalg.tests.test_decomp.TestSVDVals.test_simple_underdet_complex(self)
scipy.linalg.tests.test_decomp.TestSVD_GESDD
scipy.linalg.tests.test_decomp.TestSVD_GESDD.setup_method(self)
scipy.linalg.tests.test_decomp.TestSVD_GESDD.test_check_finite(self)
scipy.linalg.tests.test_decomp.TestSVD_GESDD.test_crash_1580(self)
scipy.linalg.tests.test_decomp.TestSVD_GESDD.test_degenerate(self)
scipy.linalg.tests.test_decomp.TestSVD_GESDD.test_gh_5039(self)
scipy.linalg.tests.test_decomp.TestSVD_GESDD.test_large_matrix(self)
scipy.linalg.tests.test_decomp.TestSVD_GESDD.test_random(self)
scipy.linalg.tests.test_decomp.TestSVD_GESDD.test_random_complex(self)
scipy.linalg.tests.test_decomp.TestSVD_GESDD.test_simple(self)
scipy.linalg.tests.test_decomp.TestSVD_GESDD.test_simple_complex(self)
scipy.linalg.tests.test_decomp.TestSVD_GESDD.test_simple_overdet(self)
scipy.linalg.tests.test_decomp.TestSVD_GESDD.test_simple_singular(self)
scipy.linalg.tests.test_decomp.TestSVD_GESDD.test_simple_underdet(self)
scipy.linalg.tests.test_decomp.TestSVD_GESVD(TestSVD_GESDD)
scipy.linalg.tests.test_decomp.TestSVD_GESVD.setup_method(self)
scipy.linalg.tests.test_decomp.TestSchur
scipy.linalg.tests.test_decomp.TestSchur.check_schur(self,a,t,u,rtol,atol)
scipy.linalg.tests.test_decomp.TestSchur.test_check_finite(self)
scipy.linalg.tests.test_decomp.TestSchur.test_simple(self)
scipy.linalg.tests.test_decomp.TestSchur.test_sort(self,sort,expected_diag)
scipy.linalg.tests.test_decomp.TestSchur.test_sort_errors(self)
scipy.linalg.tests.test_decomp._check_orth(n,dtype,skip_big=False)
scipy.linalg.tests.test_decomp._complex_symrand(dim,dtype)
scipy.linalg.tests.test_decomp._make_pos(X)
scipy.linalg.tests.test_decomp._random_hermitian_matrix(n,posdef=False,dtype=float)
scipy.linalg.tests.test_decomp.assert_dtype_equal(act,des)
scipy.linalg.tests.test_decomp.check_lapack_misaligned(func,args,kwargs)
scipy.linalg.tests.test_decomp.clear_fuss(ar,fuss_binary_bits=7)
scipy.linalg.tests.test_decomp.symrand(dim_or_eigv)
scipy.linalg.tests.test_decomp.test_aligned_mem()
scipy.linalg.tests.test_decomp.test_aligned_mem_complex()
scipy.linalg.tests.test_decomp.test_aligned_mem_float()
scipy.linalg.tests.test_decomp.test_lapack_misaligned()
scipy.linalg.tests.test_decomp.test_null_space()
scipy.linalg.tests.test_decomp.test_orth()
scipy.linalg.tests.test_decomp.test_orth_memory_efficiency()
scipy.linalg.tests.test_decomp.test_subspace_angles()
scipy.linalg.tests.test_make_pos(X)
scipy.linalg.tests.test_random_hermitian_matrix(n,posdef=False,dtype=float)
scipy.linalg.tests.testassert_dtype_equal(act,des)
scipy.linalg.tests.testcheck_lapack_misaligned(func,args,kwargs)
scipy.linalg.tests.testclear_fuss(ar,fuss_binary_bits=7)
scipy.linalg.tests.testsymrand(dim_or_eigv)
scipy.linalg.tests.testtest_aligned_mem()
scipy.linalg.tests.testtest_aligned_mem_complex()
scipy.linalg.tests.testtest_aligned_mem_float()
scipy.linalg.tests.testtest_lapack_misaligned()
scipy.linalg.tests.testtest_null_space()
scipy.linalg.tests.testtest_orth()
scipy.linalg.tests.testtest_orth_memory_efficiency()
scipy.linalg.tests.testtest_subspace_angles()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_decomp_cossin.py----------------------------------------
A:scipy.linalg.tests.test_decomp_cossin.x->numpy.array(ortho_group.rvs(4), dtype=np.float64)
A:scipy.linalg.tests.test_decomp_cossin.(u, cs, vh)->cossin([x[:2, :2], np.array(x[:2, 2:], dtype=np.complex128), x[2:, :2], x[2:, 2:]])
A:scipy.linalg.tests.test_decomp_cossin.(_, cs2, vh2)->cossin(x, p, q, compute_u=False, swap_sign=swap_sign)
A:scipy.linalg.tests.test_decomp_cossin.(u2, cs2, _)->cossin(x, p, q, compute_vh=False, swap_sign=swap_sign)
A:scipy.linalg.tests.test_decomp_cossin.(_, cs2, _)->cossin(x, p, q, compute_u=False, compute_vh=False, swap_sign=swap_sign)
A:scipy.linalg.tests.test_decomp_cossin.X->numpy.array(X, dtype=dtype_)
A:scipy.linalg.tests.test_decomp_cossin.(drv, dlw)->get_lapack_funcs((pfx + 'csd', pfx + 'csd_lwork'), [X])
A:scipy.linalg.tests.test_decomp_cossin.lwval->_compute_lwork(dlw, m, p, q)
A:scipy.linalg.tests.test_decomp_cossin.(*_, theta, u1, u2, v1t, v2t, _)->drv(X[:p, :q], X[:p, q:], X[p:, :q], X[p:, q:], **lwvals)
A:scipy.linalg.tests.test_decomp_cossin.((u1_2, u2_2), theta2, (v1t_2, v2t_2))->cossin(X, p, q, separate=True)
scipy.linalg.tests.test_decomp_cossin.test_cossin(dtype_,m,p,q,swap_sign)
scipy.linalg.tests.test_decomp_cossin.test_cossin_error_empty_subblocks()
scipy.linalg.tests.test_decomp_cossin.test_cossin_error_incorrect_subblocks()
scipy.linalg.tests.test_decomp_cossin.test_cossin_error_missing_partitioning()
scipy.linalg.tests.test_decomp_cossin.test_cossin_error_non_iterable()
scipy.linalg.tests.test_decomp_cossin.test_cossin_error_non_square()
scipy.linalg.tests.test_decomp_cossin.test_cossin_error_partitioning()
scipy.linalg.tests.test_decomp_cossin.test_cossin_mixed_types()
scipy.linalg.tests.test_decomp_cossin.test_cossin_separate(dtype_)
scipy.linalg.tests.testtest_cossin(dtype_,m,p,q,swap_sign)
scipy.linalg.tests.testtest_cossin_error_empty_subblocks()
scipy.linalg.tests.testtest_cossin_error_incorrect_subblocks()
scipy.linalg.tests.testtest_cossin_error_missing_partitioning()
scipy.linalg.tests.testtest_cossin_error_non_iterable()
scipy.linalg.tests.testtest_cossin_error_non_square()
scipy.linalg.tests.testtest_cossin_error_partitioning()
scipy.linalg.tests.testtest_cossin_mixed_types()
scipy.linalg.tests.testtest_cossin_separate(dtype_)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_special_matrices.py----------------------------------------
A:scipy.linalg.tests.test_special_matrices.data->numpy.add.outer(data, data)
A:scipy.linalg.tests.test_special_matrices.a->self.create_vector(na, cpx)
A:scipy.linalg.tests.test_special_matrices.b->invhilbert(n)
A:scipy.linalg.tests.test_special_matrices.y->hadamard(4)
A:scipy.linalg.tests.test_special_matrices.x->numpy.linspace(-2.5, 2.2, n)
A:scipy.linalg.tests.test_special_matrices.t->toeplitz(1, r)
A:scipy.linalg.tests.test_special_matrices.c->cond(a)
A:scipy.linalg.tests.test_special_matrices.r->array([10, 2, 3])
A:scipy.linalg.tests.test_special_matrices.expected->array([[1.0, 1.0], [1.0, -1.0]])
A:scipy.linalg.tests.test_special_matrices.actual->block_diag([[1]], [[1j]])
A:scipy.linalg.tests.test_special_matrices.desired->numpy.array([[1, 0], [0, 1j]])
A:scipy.linalg.tests.test_special_matrices.m1->array([[1, 2], [3, 4]])
A:scipy.linalg.tests.test_special_matrices.m2->array([[10], [11]])
A:scipy.linalg.tests.test_special_matrices.H->helmert(n, full=True)
A:scipy.linalg.tests.test_special_matrices.Id->numpy.eye(n)
A:scipy.linalg.tests.test_special_matrices.H_full->helmert(n, full=True)
A:scipy.linalg.tests.test_special_matrices.H_partial->helmert(n)
A:scipy.linalg.tests.test_special_matrices.h3->array([[1.0, 1 / 2.0, 1 / 3.0], [1 / 2.0, 1 / 3.0, 1 / 4.0], [1 / 3.0, 1 / 4.0, 1 / 5.0]])
A:scipy.linalg.tests.test_special_matrices.h0->hilbert(0)
A:scipy.linalg.tests.test_special_matrices.invh1->array([[1]])
A:scipy.linalg.tests.test_special_matrices.invh2->array([[4, -6], [-6, 12]])
A:scipy.linalg.tests.test_special_matrices.invh3->array([[9, -36, 30], [-36, 192, -180], [30, -180, 180]])
A:scipy.linalg.tests.test_special_matrices.invh4->array([[16, -120, 240, -140], [-120, 1200, -2700, 1680], [240, -2700, 6480, -4200], [-140, 1680, -4200, 2800]])
A:scipy.linalg.tests.test_special_matrices.invh5->array([[25, -300, 1050, -1400, 630], [-300, 4800, -18900, 26880, -12600], [1050, -18900, 79380, -117600, 56700], [-1400, 26880, -117600, 179200, -88200], [630, -12600, 56700, -88200, 44100]])
A:scipy.linalg.tests.test_special_matrices.invh17->array([[289, -41616, 1976760, -46124400, 629598060, -5540462928, 33374693352, -143034400080, 446982500250, -1033026222800, 1774926873720, -2258997839280, 2099709530100, -1384423866000, 613101997800, -163493866080, 19835652870], [-41616, 7990272, -426980160, 10627061760, -151103534400, 1367702848512, -8410422724704, 36616806420480, -115857864064800, 270465047424000, -468580694662080, 600545887119360, -561522320049600, 372133135180800, -165537539406000, 44316454993920, -5395297580640], [1976760, -426980160, 24337869120, -630981792000, 9228108708000, -85267724461920, 532660105897920, -2348052711713280, 7504429831470000, -17664748409880000, 30818191841236800, -39732544853164800, 37341234283298400, -24857330514030000, 11100752642520000, -2982128117299200, 364182586693200], [-46124400, 10627061760, -630981792000, 16826181120000, -251209625940000, 2358021022156800, -14914482965141760, 66409571644416000, -214015221119700000, 507295338950400000, -890303319857952000, 1153715376477081600, -1089119333262870000, 727848632044800000, -326170262829600000, 87894302404608000, -10763618673376800], [629598060, -151103534400, 9228108708000, -251209625940000, 3810012660090000, -36210360321495360, 231343968720664800, -1038687206500944000, 3370739732635275000, -8037460526495400000, 14178080368737885600, -18454939322943942000, 17489975175339030000, -11728977435138600000, 5272370630081100000, -1424711708039692800, 174908803442373000], [-5540462928, 1367702848512, -85267724461920, 2358021022156800, -36210360321495360, 347619459086355456, -2239409617216035264, 10124803292907663360, -33052510749726468000, 79217210949138662400, -140362995650505067440, 183420385176741672960, -174433352415381259200, 117339159519533952000, -52892422160973595200, 14328529177999196160, -1763080738699119840], [33374693352, -8410422724704, 532660105897920, -14914482965141760, 231343968720664800, -2239409617216035264, 14527452132196331328, -66072377044391477760, 216799987176909536400, -521925895055522958000, 928414062734059661760, -1217424500995626443520, 1161358898976091015200, -783401860847777371200, 354015418167362952000, -96120549902411274240, 11851820521255194480], [-143034400080, 36616806420480, -2348052711713280, 66409571644416000, -1038687206500944000, 10124803292907663360, -66072377044391477760, 302045152202932469760, -995510145200094810000, 2405996923185123840000, -4294704507885446054400, 5649058909023744614400, -5403874060541811254400, 3654352703663101440000, -1655137020003255360000, 450325202737117593600, -55630994283442749600], [446982500250, -115857864064800, 7504429831470000, -214015221119700000, 3370739732635275000, -33052510749726468000, 216799987176909536400, -995510145200094810000, 3293967392206196062500, -7988661659013106500000, 14303908928401362270000, -18866974090684772052000, 18093328327706957325000, -12263364009096700500000, 5565847995255512250000, -1517208935002984080000, 187754605706619279900], [-1033026222800, 270465047424000, -17664748409880000, 507295338950400000, -8037460526495400000, 79217210949138662400, -521925895055522958000, 2405996923185123840000, -7988661659013106500000, 19434404971634224000000, -34894474126569249192000, 46141453390504792320000, -44349976506971935800000, 30121928988527376000000, -13697025107665828500000, 3740200989399948902400, -463591619028689580000], [1774926873720, -468580694662080, 30818191841236800, -890303319857952000, 14178080368737885600, -140362995650505067440, 928414062734059661760, -4294704507885446054400, 14303908928401362270000, -34894474126569249192000, 62810053427824648545600, -83243376594051600326400, 80177044485212743068000, -54558343880470209780000, 24851882355348879230400, -6797096028813368678400, 843736746632215035600], [-2258997839280, 600545887119360, -39732544853164800, 1153715376477081600, -18454939322943942000, 183420385176741672960, -1217424500995626443520, 5649058909023744614400, -18866974090684772052000, 46141453390504792320000, -83243376594051600326400, 110552468520163390156800, -106681852579497947388000, 72720410752415168870400, -33177973900974346080000, 9087761081682520473600, -1129631016152221783200], [2099709530100, -561522320049600, 37341234283298400, -1089119333262870000, 17489975175339030000, -174433352415381259200, 1161358898976091015200, -5403874060541811254400, 18093328327706957325000, -44349976506971935800000, 80177044485212743068000, -106681852579497947388000, 103125790826848015808400, -70409051543137015800000, 32171029219823375700000, -8824053728865840192000, 1098252376814660067000], [-1384423866000, 372133135180800, -24857330514030000, 727848632044800000, -11728977435138600000, 117339159519533952000, -783401860847777371200, 3654352703663101440000, -12263364009096700500000, 30121928988527376000000, -54558343880470209780000, 72720410752415168870400, -70409051543137015800000, 48142941226076592000000, -22027500987368499000000, 6049545098753157120000, -753830033789944188000], [613101997800, -165537539406000, 11100752642520000, -326170262829600000, 5272370630081100000, -52892422160973595200, 354015418167362952000, -1655137020003255360000, 5565847995255512250000, -13697025107665828500000, 24851882355348879230400, -33177973900974346080000, 32171029219823375700000, -22027500987368499000000, 10091416708498869000000, -2774765838662800128000, 346146444087219270000], [-163493866080, 44316454993920, -2982128117299200, 87894302404608000, -1424711708039692800, 14328529177999196160, -96120549902411274240, 450325202737117593600, -1517208935002984080000, 3740200989399948902400, -6797096028813368678400, 9087761081682520473600, -8824053728865840192000, 6049545098753157120000, -2774765838662800128000, 763806510427609497600, -95382575704033754400], [19835652870, -5395297580640, 364182586693200, -10763618673376800, 174908803442373000, -1763080738699119840, 11851820521255194480, -55630994283442749600, 187754605706619279900, -463591619028689580000, 843736746632215035600, -1129631016152221783200, 1098252376814660067000, -753830033789944188000, 346146444087219270000, -95382575704033754400, 11922821963004219300]])
A:scipy.linalg.tests.test_special_matrices.p->pascal(n, kind=kind, exact=exact)
A:scipy.linalg.tests.test_special_matrices.ip->invpascal(n, kind=kind, exact=exact)
A:scipy.linalg.tests.test_special_matrices.e->invpascal(n, kind=kind, exact=exact).astype(object).dot(p.astype(object))
A:scipy.linalg.tests.test_special_matrices.m->dft(8)
A:scipy.linalg.tests.test_special_matrices.mx->dft(8).dot(x)
A:scipy.linalg.tests.test_special_matrices.fx->fft(x)
A:scipy.linalg.tests.test_special_matrices.f->fiedler(np.arange(1, 7))
A:scipy.linalg.tests.test_special_matrices.des->numpy.array([[0, 1, 2, 3, 4, 5], [1, 0, 1, 2, 3, 4], [2, 1, 0, 1, 2, 3], [3, 2, 1, 0, 1, 2], [4, 3, 2, 1, 0, 1], [5, 4, 3, 2, 1, 0]])
A:scipy.linalg.tests.test_special_matrices.fc->fiedler_companion([1.0, -16.0, 86.0, -176.0, 105.0])
A:scipy.linalg.tests.test_special_matrices.v->self.create_vector(nv, cpx)
A:scipy.linalg.tests.test_special_matrices.y1->numpy.convolve(v, a, mode)
A:scipy.linalg.tests.test_special_matrices.A->convolution_matrix(a, nv, mode)
scipy.linalg.tests.testTestBlockDiag
scipy.linalg.tests.testTestBlockDiag.test_bad_arg(self)
scipy.linalg.tests.testTestBlockDiag.test_basic(self)
scipy.linalg.tests.testTestBlockDiag.test_dtype(self)
scipy.linalg.tests.testTestBlockDiag.test_empty_matrix_arg(self)
scipy.linalg.tests.testTestBlockDiag.test_mixed_dtypes(self)
scipy.linalg.tests.testTestBlockDiag.test_no_args(self)
scipy.linalg.tests.testTestBlockDiag.test_scalar_and_1d_args(self)
scipy.linalg.tests.testTestBlockDiag.test_zerosized_matrix_arg(self)
scipy.linalg.tests.testTestCirculant
scipy.linalg.tests.testTestCirculant.test_basic(self)
scipy.linalg.tests.testTestCompanion
scipy.linalg.tests.testTestCompanion.test_bad_shapes(self)
scipy.linalg.tests.testTestCompanion.test_basic(self)
scipy.linalg.tests.testTestConvolutionMatrix
scipy.linalg.tests.testTestConvolutionMatrix.create_vector(self,n,cpx)
scipy.linalg.tests.testTestConvolutionMatrix.test_against_numpy_convolve(self,cpx,na,nv,mode)
scipy.linalg.tests.testTestConvolutionMatrix.test_bad_first_arg(self)
scipy.linalg.tests.testTestConvolutionMatrix.test_bad_mode(self)
scipy.linalg.tests.testTestConvolutionMatrix.test_bad_n(self)
scipy.linalg.tests.testTestConvolutionMatrix.test_empty_first_arg(self)
scipy.linalg.tests.testTestHadamard
scipy.linalg.tests.testTestHadamard.test_basic(self)
scipy.linalg.tests.testTestHankel
scipy.linalg.tests.testTestHankel.test_basic(self)
scipy.linalg.tests.testTestHelmert
scipy.linalg.tests.testTestHelmert.test_orthogonality(self)
scipy.linalg.tests.testTestHelmert.test_subspace(self)
scipy.linalg.tests.testTestHilbert
scipy.linalg.tests.testTestHilbert.test_basic(self)
scipy.linalg.tests.testTestInvHilbert
scipy.linalg.tests.testTestInvHilbert.test_basic(self)
scipy.linalg.tests.testTestInvHilbert.test_inverse(self)
scipy.linalg.tests.testTestKron
scipy.linalg.tests.testTestKron.test_basic(self)
scipy.linalg.tests.testTestLeslie
scipy.linalg.tests.testTestLeslie.test_bad_shapes(self)
scipy.linalg.tests.testTestLeslie.test_basic(self)
scipy.linalg.tests.testTestPascal
scipy.linalg.tests.testTestPascal.check_case(self,n,sym,low)
scipy.linalg.tests.testTestPascal.test_big(self)
scipy.linalg.tests.testTestPascal.test_cases(self)
scipy.linalg.tests.testTestPascal.test_threshold(self)
scipy.linalg.tests.testTestToeplitz
scipy.linalg.tests.testTestToeplitz.test_basic(self)
scipy.linalg.tests.testTestToeplitz.test_complex_01(self)
scipy.linalg.tests.testTestToeplitz.test_scalar_00(self)
scipy.linalg.tests.testTestToeplitz.test_scalar_01(self)
scipy.linalg.tests.testTestToeplitz.test_scalar_02(self)
scipy.linalg.tests.testTestToeplitz.test_scalar_03(self)
scipy.linalg.tests.testTestToeplitz.test_scalar_04(self)
scipy.linalg.tests.testTestTri
scipy.linalg.tests.testTestTri.test_2d(self)
scipy.linalg.tests.testTestTri.test_basic(self)
scipy.linalg.tests.testTestTri.test_diag(self)
scipy.linalg.tests.testTestTri.test_diag2d(self)
scipy.linalg.tests.testTestTril
scipy.linalg.tests.testTestTril.test_basic(self)
scipy.linalg.tests.testTestTril.test_diag(self)
scipy.linalg.tests.testTestTriu
scipy.linalg.tests.testTestTriu.test_basic(self)
scipy.linalg.tests.testTestTriu.test_diag(self)
scipy.linalg.tests.test_special_matrices.TestBlockDiag
scipy.linalg.tests.test_special_matrices.TestBlockDiag.test_bad_arg(self)
scipy.linalg.tests.test_special_matrices.TestBlockDiag.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestBlockDiag.test_dtype(self)
scipy.linalg.tests.test_special_matrices.TestBlockDiag.test_empty_matrix_arg(self)
scipy.linalg.tests.test_special_matrices.TestBlockDiag.test_mixed_dtypes(self)
scipy.linalg.tests.test_special_matrices.TestBlockDiag.test_no_args(self)
scipy.linalg.tests.test_special_matrices.TestBlockDiag.test_scalar_and_1d_args(self)
scipy.linalg.tests.test_special_matrices.TestBlockDiag.test_zerosized_matrix_arg(self)
scipy.linalg.tests.test_special_matrices.TestCirculant
scipy.linalg.tests.test_special_matrices.TestCirculant.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestCompanion
scipy.linalg.tests.test_special_matrices.TestCompanion.test_bad_shapes(self)
scipy.linalg.tests.test_special_matrices.TestCompanion.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestConvolutionMatrix
scipy.linalg.tests.test_special_matrices.TestConvolutionMatrix.create_vector(self,n,cpx)
scipy.linalg.tests.test_special_matrices.TestConvolutionMatrix.test_against_numpy_convolve(self,cpx,na,nv,mode)
scipy.linalg.tests.test_special_matrices.TestConvolutionMatrix.test_bad_first_arg(self)
scipy.linalg.tests.test_special_matrices.TestConvolutionMatrix.test_bad_mode(self)
scipy.linalg.tests.test_special_matrices.TestConvolutionMatrix.test_bad_n(self)
scipy.linalg.tests.test_special_matrices.TestConvolutionMatrix.test_empty_first_arg(self)
scipy.linalg.tests.test_special_matrices.TestHadamard
scipy.linalg.tests.test_special_matrices.TestHadamard.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestHankel
scipy.linalg.tests.test_special_matrices.TestHankel.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestHelmert
scipy.linalg.tests.test_special_matrices.TestHelmert.test_orthogonality(self)
scipy.linalg.tests.test_special_matrices.TestHelmert.test_subspace(self)
scipy.linalg.tests.test_special_matrices.TestHilbert
scipy.linalg.tests.test_special_matrices.TestHilbert.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestInvHilbert
scipy.linalg.tests.test_special_matrices.TestInvHilbert.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestInvHilbert.test_inverse(self)
scipy.linalg.tests.test_special_matrices.TestKron
scipy.linalg.tests.test_special_matrices.TestKron.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestLeslie
scipy.linalg.tests.test_special_matrices.TestLeslie.test_bad_shapes(self)
scipy.linalg.tests.test_special_matrices.TestLeslie.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestPascal
scipy.linalg.tests.test_special_matrices.TestPascal.check_case(self,n,sym,low)
scipy.linalg.tests.test_special_matrices.TestPascal.test_big(self)
scipy.linalg.tests.test_special_matrices.TestPascal.test_cases(self)
scipy.linalg.tests.test_special_matrices.TestPascal.test_threshold(self)
scipy.linalg.tests.test_special_matrices.TestToeplitz
scipy.linalg.tests.test_special_matrices.TestToeplitz.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestToeplitz.test_complex_01(self)
scipy.linalg.tests.test_special_matrices.TestToeplitz.test_scalar_00(self)
scipy.linalg.tests.test_special_matrices.TestToeplitz.test_scalar_01(self)
scipy.linalg.tests.test_special_matrices.TestToeplitz.test_scalar_02(self)
scipy.linalg.tests.test_special_matrices.TestToeplitz.test_scalar_03(self)
scipy.linalg.tests.test_special_matrices.TestToeplitz.test_scalar_04(self)
scipy.linalg.tests.test_special_matrices.TestTri
scipy.linalg.tests.test_special_matrices.TestTri.test_2d(self)
scipy.linalg.tests.test_special_matrices.TestTri.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestTri.test_diag(self)
scipy.linalg.tests.test_special_matrices.TestTri.test_diag2d(self)
scipy.linalg.tests.test_special_matrices.TestTril
scipy.linalg.tests.test_special_matrices.TestTril.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestTril.test_diag(self)
scipy.linalg.tests.test_special_matrices.TestTriu
scipy.linalg.tests.test_special_matrices.TestTriu.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestTriu.test_diag(self)
scipy.linalg.tests.test_special_matrices.get_mat(n)
scipy.linalg.tests.test_special_matrices.test_dft()
scipy.linalg.tests.test_special_matrices.test_fiedler()
scipy.linalg.tests.test_special_matrices.test_fiedler_companion()
scipy.linalg.tests.test_special_matrices.test_invpascal()
scipy.linalg.tests.testget_mat(n)
scipy.linalg.tests.testtest_dft()
scipy.linalg.tests.testtest_fiedler()
scipy.linalg.tests.testtest_fiedler_companion()
scipy.linalg.tests.testtest_invpascal()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_blas.py----------------------------------------
A:scipy.linalg.tests.test_blas.(f1, f2, f3)->get_blas_funcs(('axpy', 'axpy', 'axpy'), (np.empty((2, 2), dtype=np.complex64, order='F'), np.empty((2, 2), dtype=np.complex128, order='C')))
A:scipy.linalg.tests.test_blas.f1->get_blas_funcs('axpy', (np.empty((2, 2), dtype=np.float64), np.empty((2, 2), dtype=np.complex64)))
A:scipy.linalg.tests.test_blas.(f, g)->get_blas_funcs(('nrm2', 'dot'), dtype=np.complex64)
A:scipy.linalg.tests.test_blas.(f, g, h)->get_blas_funcs(('dot', 'dotc', 'dotu'), dtype=np.float64)
A:scipy.linalg.tests.test_blas.f->getattr(fblas, 'dtrmm', None)
A:scipy.linalg.tests.test_blas.(x1, y1)->f(x, y)
A:scipy.linalg.tests.test_blas.x->rand(n).astype(dtype)
A:scipy.linalg.tests.test_blas.resx->numpy.triu(x[:, np.newaxis] * x)
A:scipy.linalg.tests.test_blas.resx_reverse->numpy.triu(x[::-1, np.newaxis] * x[::-1])
A:scipy.linalg.tests.test_blas.y->rand(n).astype(dtype)
A:scipy.linalg.tests.test_blas.z->numpy.arange(1, 9, dtype='d').view('D')
A:scipy.linalg.tests.test_blas.resz->numpy.triu(z[:, np.newaxis] * z)
A:scipy.linalg.tests.test_blas.resz_reverse->numpy.triu(z[::-1, np.newaxis] * z[::-1])
A:scipy.linalg.tests.test_blas.rehz->numpy.triu(z[:, np.newaxis] * z.conj())
A:scipy.linalg.tests.test_blas.rehz_reverse->numpy.triu(z[::-1, np.newaxis] * z[::-1].conj())
A:scipy.linalg.tests.test_blas.w->numpy.c_[np.zeros(4), z, np.zeros(4)].ravel()
A:scipy.linalg.tests.test_blas.a->numpy.zeros((4, 4), 'F' if p == 'c' else 'D', 'F')
A:scipy.linalg.tests.test_blas.b->f(2.0, x, y, a=a)
A:scipy.linalg.tests.test_blas.resxy->numpy.triu(resxy)
A:scipy.linalg.tests.test_blas.resxy_reverse->numpy.triu(resxy_reverse)
A:scipy.linalg.tests.test_blas.q->numpy.linspace(0, 8.5, 17, endpoint=False)
A:scipy.linalg.tests.test_blas.u->numpy.c_[np.zeros(4), x, np.zeros(4)].ravel()
A:scipy.linalg.tests.test_blas.v->numpy.c_[np.zeros(4), y, np.zeros(4)].ravel()
A:scipy.linalg.tests.test_blas.A->A.astype(dtype).astype(dtype)
A:scipy.linalg.tests.test_blas.Ab->zeros((k + 1, n), dtype=dtype)
A:scipy.linalg.tests.test_blas.(func,)->get_blas_funcs(('trsm',), dtype=dtype)
A:scipy.linalg.tests.test_blas.y1->func(a=A, x=x, diag=1, trans=2)
A:scipy.linalg.tests.test_blas.A[arange(n), arange(n)]->dtype(1)
A:scipy.linalg.tests.test_blas.temp->rand(n - ind2)
A:scipy.linalg.tests.test_blas.Ab[-1, :]->diag(A)
A:scipy.linalg.tests.test_blas.(c, r)->tril_indices(n)
A:scipy.linalg.tests.test_blas.xlong->arange(2 * n).astype(dtype)
A:scipy.linalg.tests.test_blas.ylong->ones(2 * n).astype(dtype)
A:scipy.linalg.tests.test_blas.alpha->dtype(-2.5)
A:scipy.linalg.tests.test_blas.y1f->zeros((3, 3), dtype=dtype)
A:scipy.linalg.tests.test_blas.y1f[[1, 2, 2], [0, 0, 1]]->y1[[1, 3, 4]].conj()
A:scipy.linalg.tests.test_blas.A[arange(n - sup), arange(sup, n)]->rand(n - sup)
A:scipy.linalg.tests.test_blas.Ab[-row - 1, row:]->diag(A, k=row)
A:scipy.linalg.tests.test_blas.y2->solve(triu(A).conj().T, x)
A:scipy.linalg.tests.test_blas.self.a->numpy.array([[1.0, 2.0], [-2.0, 1.0]])
A:scipy.linalg.tests.test_blas.self.b->numpy.array([[3.0, 4.0, -1.0], [5.0, 6.0, -2.0]])
A:scipy.linalg.tests.test_blas.self.c->numpy.ones((2, 3))
A:scipy.linalg.tests.test_blas.self.t->numpy.array([[0.0, -1.0, 3.0], [-1.0, 0.0, 0.0], [3.0, 0.0, 6.0]])
A:scipy.linalg.tests.test_blas.res->trmm(1.0, self.a2.astype(dtype_), self.b2.astype(dtype_), side=1)
A:scipy.linalg.tests.test_blas.self.tt->numpy.array([[0.0, 1.0], [1.0, 6]])
A:scipy.linalg.tests.test_blas.c->f(a=self.a, b=self.b, alpha=1.0, trans=1)
A:scipy.linalg.tests.test_blas.c0->numpy.ones(self.t.shape)
A:scipy.linalg.tests.test_blas.self.sigma_y->numpy.array([[0.0, -1j], [1j, 0.0]])
A:scipy.linalg.tests.test_blas.self.a2->numpy.array([[1, 1, 2, 3], [0, 1, 4, 5], [0, 0, 1, 6], [0, 0, 0, 1]], order='f')
A:scipy.linalg.tests.test_blas.self.b2->numpy.array([[1, 4], [2, 5], [3, 6], [7, 8], [9, 10]], order='f')
A:scipy.linalg.tests.test_blas.trmm->get_blas_funcs('trmm', dtype=dtype_)
A:scipy.linalg.tests.test_blas.result->f(1.0, self.a, bcopy, overwrite_b=True)
A:scipy.linalg.tests.test_blas.expected->numpy.array([[3.0, 4.0, -1.0], [-1.0, -2.0, 0.0]])
A:scipy.linalg.tests.test_blas.bcopy->numpy.asfortranarray(self.b.copy())
A:scipy.linalg.tests.test_blas.B->rand(4, 4).astype(dtype)
A:scipy.linalg.tests.test_blas.Au->triu(A)
A:scipy.linalg.tests.test_blas.Al->tril(A)
A:scipy.linalg.tests.test_blas.B1->rand(m, n).astype(dtype)
A:scipy.linalg.tests.test_blas.B2->rand(n, m).astype(dtype)
A:scipy.linalg.tests.test_blas.x1->func(alpha=alpha, a=A, b=B2, diag=1, side=1, lower=1)
A:scipy.linalg.tests.test_blas.x2->solve(Al.conj().T, alpha * B2.conj().T)
A:scipy.linalg.tests.test_blas.Au[arange(m), arange(m)]->dtype(1)
A:scipy.linalg.tests.test_blas.Al[arange(m), arange(m)]->dtype(1)
scipy.linalg.tests.test_TestBLAS3Symm
scipy.linalg.tests.test_TestBLAS3Symm.setup_method(self)
scipy.linalg.tests.test_TestBLAS3Symm.test_summ_wrong_side(self)
scipy.linalg.tests.test_TestBLAS3Symm.test_symm(self)
scipy.linalg.tests.test_TestBLAS3Symm.test_symm_wrong_uplo(self)
scipy.linalg.tests.test_TestBLAS3Syr2k
scipy.linalg.tests.test_TestBLAS3Syr2k.setup_method(self)
scipy.linalg.tests.test_TestBLAS3Syr2k.test_syr2k(self)
scipy.linalg.tests.test_TestBLAS3Syr2k.test_syr2k_wrong_c(self)
scipy.linalg.tests.test_TestBLAS3Syrk
scipy.linalg.tests.test_TestBLAS3Syrk.setup_method(self)
scipy.linalg.tests.test_TestBLAS3Syrk.test_syrk(self)
scipy.linalg.tests.test_TestBLAS3Syrk.test_syrk_wrong_c(self)
scipy.linalg.tests.test_TestCBLAS1Simple
scipy.linalg.tests.test_TestCBLAS1Simple.test_axpy(self)
scipy.linalg.tests.test_TestFBLAS1Simple
scipy.linalg.tests.test_TestFBLAS1Simple.test_amax(self)
scipy.linalg.tests.test_TestFBLAS1Simple.test_asum(self)
scipy.linalg.tests.test_TestFBLAS1Simple.test_axpy(self)
scipy.linalg.tests.test_TestFBLAS1Simple.test_complex_dotc(self)
scipy.linalg.tests.test_TestFBLAS1Simple.test_complex_dotu(self)
scipy.linalg.tests.test_TestFBLAS1Simple.test_copy(self)
scipy.linalg.tests.test_TestFBLAS1Simple.test_dot(self)
scipy.linalg.tests.test_TestFBLAS1Simple.test_nrm2(self)
scipy.linalg.tests.test_TestFBLAS1Simple.test_scal(self)
scipy.linalg.tests.test_TestFBLAS1Simple.test_swap(self)
scipy.linalg.tests.test_TestFBLAS2Simple
scipy.linalg.tests.test_TestFBLAS2Simple.test_gbmv(self)
scipy.linalg.tests.test_TestFBLAS2Simple.test_gemv(self)
scipy.linalg.tests.test_TestFBLAS2Simple.test_ger(self)
scipy.linalg.tests.test_TestFBLAS2Simple.test_her2(self)
scipy.linalg.tests.test_TestFBLAS2Simple.test_sbmv_hbmv(self)
scipy.linalg.tests.test_TestFBLAS2Simple.test_spmv_hpmv(self)
scipy.linalg.tests.test_TestFBLAS2Simple.test_spr2_hpr2(self)
scipy.linalg.tests.test_TestFBLAS2Simple.test_spr_hpr(self)
scipy.linalg.tests.test_TestFBLAS2Simple.test_syr2(self)
scipy.linalg.tests.test_TestFBLAS2Simple.test_syr_her(self)
scipy.linalg.tests.test_TestFBLAS2Simple.test_tbmv(self)
scipy.linalg.tests.test_TestFBLAS2Simple.test_tbsv(self)
scipy.linalg.tests.test_TestFBLAS2Simple.test_tpmv(self)
scipy.linalg.tests.test_TestFBLAS2Simple.test_tpsv(self)
scipy.linalg.tests.test_TestFBLAS2Simple.test_trmv(self)
scipy.linalg.tests.test_TestFBLAS2Simple.test_trsv(self)
scipy.linalg.tests.test_TestFBLAS3Simple
scipy.linalg.tests.test_TestFBLAS3Simple.test_gemm(self)
scipy.linalg.tests.test_TestSyHe
scipy.linalg.tests.test_TestSyHe.setup_method(self)
scipy.linalg.tests.test_TestSyHe.test_hemm_zc(self)
scipy.linalg.tests.test_TestSyHe.test_her2k_zr(self)
scipy.linalg.tests.test_TestSyHe.test_herk_zr(self)
scipy.linalg.tests.test_TestSyHe.test_symm_zc(self)
scipy.linalg.tests.test_TestSyHe.test_syr2k_zr(self)
scipy.linalg.tests.test_TestSyHe.test_syrk_zr(self)
scipy.linalg.tests.test_TestTRMM
scipy.linalg.tests.test_TestTRMM.setup_method(self)
scipy.linalg.tests.test_TestTRMM.test_ab(self)
scipy.linalg.tests.test_TestTRMM.test_ab_lower(self)
scipy.linalg.tests.test_TestTRMM.test_b_overwrites(self)
scipy.linalg.tests.test_TestTRMM.test_side(self,dtype_)
scipy.linalg.tests.test__get_func(func,ps='sdzc')
scipy.linalg.tests.test_blas.TestBLAS3Symm
scipy.linalg.tests.test_blas.TestBLAS3Symm.setup_method(self)
scipy.linalg.tests.test_blas.TestBLAS3Symm.test_summ_wrong_side(self)
scipy.linalg.tests.test_blas.TestBLAS3Symm.test_symm(self)
scipy.linalg.tests.test_blas.TestBLAS3Symm.test_symm_wrong_uplo(self)
scipy.linalg.tests.test_blas.TestBLAS3Syr2k
scipy.linalg.tests.test_blas.TestBLAS3Syr2k.setup_method(self)
scipy.linalg.tests.test_blas.TestBLAS3Syr2k.test_syr2k(self)
scipy.linalg.tests.test_blas.TestBLAS3Syr2k.test_syr2k_wrong_c(self)
scipy.linalg.tests.test_blas.TestBLAS3Syrk
scipy.linalg.tests.test_blas.TestBLAS3Syrk.setup_method(self)
scipy.linalg.tests.test_blas.TestBLAS3Syrk.test_syrk(self)
scipy.linalg.tests.test_blas.TestBLAS3Syrk.test_syrk_wrong_c(self)
scipy.linalg.tests.test_blas.TestCBLAS1Simple
scipy.linalg.tests.test_blas.TestCBLAS1Simple.test_axpy(self)
scipy.linalg.tests.test_blas.TestFBLAS1Simple
scipy.linalg.tests.test_blas.TestFBLAS1Simple.test_amax(self)
scipy.linalg.tests.test_blas.TestFBLAS1Simple.test_asum(self)
scipy.linalg.tests.test_blas.TestFBLAS1Simple.test_axpy(self)
scipy.linalg.tests.test_blas.TestFBLAS1Simple.test_complex_dotc(self)
scipy.linalg.tests.test_blas.TestFBLAS1Simple.test_complex_dotu(self)
scipy.linalg.tests.test_blas.TestFBLAS1Simple.test_copy(self)
scipy.linalg.tests.test_blas.TestFBLAS1Simple.test_dot(self)
scipy.linalg.tests.test_blas.TestFBLAS1Simple.test_nrm2(self)
scipy.linalg.tests.test_blas.TestFBLAS1Simple.test_scal(self)
scipy.linalg.tests.test_blas.TestFBLAS1Simple.test_swap(self)
scipy.linalg.tests.test_blas.TestFBLAS2Simple
scipy.linalg.tests.test_blas.TestFBLAS2Simple.test_gbmv(self)
scipy.linalg.tests.test_blas.TestFBLAS2Simple.test_gemv(self)
scipy.linalg.tests.test_blas.TestFBLAS2Simple.test_ger(self)
scipy.linalg.tests.test_blas.TestFBLAS2Simple.test_her2(self)
scipy.linalg.tests.test_blas.TestFBLAS2Simple.test_sbmv_hbmv(self)
scipy.linalg.tests.test_blas.TestFBLAS2Simple.test_spmv_hpmv(self)
scipy.linalg.tests.test_blas.TestFBLAS2Simple.test_spr2_hpr2(self)
scipy.linalg.tests.test_blas.TestFBLAS2Simple.test_spr_hpr(self)
scipy.linalg.tests.test_blas.TestFBLAS2Simple.test_syr2(self)
scipy.linalg.tests.test_blas.TestFBLAS2Simple.test_syr_her(self)
scipy.linalg.tests.test_blas.TestFBLAS2Simple.test_tbmv(self)
scipy.linalg.tests.test_blas.TestFBLAS2Simple.test_tbsv(self)
scipy.linalg.tests.test_blas.TestFBLAS2Simple.test_tpmv(self)
scipy.linalg.tests.test_blas.TestFBLAS2Simple.test_tpsv(self)
scipy.linalg.tests.test_blas.TestFBLAS2Simple.test_trmv(self)
scipy.linalg.tests.test_blas.TestFBLAS2Simple.test_trsv(self)
scipy.linalg.tests.test_blas.TestFBLAS3Simple
scipy.linalg.tests.test_blas.TestFBLAS3Simple.test_gemm(self)
scipy.linalg.tests.test_blas.TestSyHe
scipy.linalg.tests.test_blas.TestSyHe.setup_method(self)
scipy.linalg.tests.test_blas.TestSyHe.test_hemm_zc(self)
scipy.linalg.tests.test_blas.TestSyHe.test_her2k_zr(self)
scipy.linalg.tests.test_blas.TestSyHe.test_herk_zr(self)
scipy.linalg.tests.test_blas.TestSyHe.test_symm_zc(self)
scipy.linalg.tests.test_blas.TestSyHe.test_syr2k_zr(self)
scipy.linalg.tests.test_blas.TestSyHe.test_syrk_zr(self)
scipy.linalg.tests.test_blas.TestTRMM
scipy.linalg.tests.test_blas.TestTRMM.setup_method(self)
scipy.linalg.tests.test_blas.TestTRMM.test_ab(self)
scipy.linalg.tests.test_blas.TestTRMM.test_ab_lower(self)
scipy.linalg.tests.test_blas.TestTRMM.test_b_overwrites(self)
scipy.linalg.tests.test_blas.TestTRMM.test_side(self,dtype_)
scipy.linalg.tests.test_blas._get_func(func,ps='sdzc')
scipy.linalg.tests.test_blas.test_get_blas_funcs()
scipy.linalg.tests.test_blas.test_get_blas_funcs_alias()
scipy.linalg.tests.test_blas.test_trsm()
scipy.linalg.tests.test_test_get_blas_funcs()
scipy.linalg.tests.test_test_get_blas_funcs_alias()
scipy.linalg.tests.test_test_trsm()


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_decomp_cholesky.py----------------------------------------
A:scipy.linalg.tests.test_decomp_cholesky.c->array([[]])
A:scipy.linalg.tests.test_decomp_cholesky.a->empty((0, 0))
A:scipy.linalg.tests.test_decomp_cholesky.m->random([n, n])
A:scipy.linalg.tests.test_decomp_cholesky.a1->dot(transpose(conjugate(c)), c)
A:scipy.linalg.tests.test_decomp_cholesky.ab->array([[4.0, 4.0, 4.0, 4.0], [1.0, 0.5, 0.2j, -1.0]])
A:scipy.linalg.tests.test_decomp_cholesky.ufac->zeros_like(a)
A:scipy.linalg.tests.test_decomp_cholesky.b->array([])
A:scipy.linalg.tests.test_decomp_cholesky.x->array([[0, -1, -1], [2, 2, 2]])
A:scipy.linalg.tests.test_decomp_cholesky.lfac->zeros_like(a)
A:scipy.linalg.tests.test_decomp_cholesky.xcho->cholesky_banded(x)
A:scipy.linalg.tests.test_decomp_cholesky.(x, _)->cho_factor(a)
scipy.linalg.tests.testTestCholesky
scipy.linalg.tests.testTestCholesky.test_check_finite(self)
scipy.linalg.tests.testTestCholesky.test_random(self)
scipy.linalg.tests.testTestCholesky.test_random_complex(self)
scipy.linalg.tests.testTestCholesky.test_simple(self)
scipy.linalg.tests.testTestCholesky.test_simple_complex(self)
scipy.linalg.tests.testTestCholeskyBanded
scipy.linalg.tests.testTestCholeskyBanded.test_check_finite(self)
scipy.linalg.tests.testTestCholeskyBanded.test_lower_complex(self)
scipy.linalg.tests.testTestCholeskyBanded.test_lower_real(self)
scipy.linalg.tests.testTestCholeskyBanded.test_upper_complex(self)
scipy.linalg.tests.testTestCholeskyBanded.test_upper_real(self)
scipy.linalg.tests.testTestEmptyArray
scipy.linalg.tests.testTestEmptyArray.test_cho_factor_empty_square(self)
scipy.linalg.tests.testTestOverwrite
scipy.linalg.tests.testTestOverwrite.test_cho_factor(self)
scipy.linalg.tests.testTestOverwrite.test_cho_solve(self)
scipy.linalg.tests.testTestOverwrite.test_cho_solve_banded(self)
scipy.linalg.tests.testTestOverwrite.test_cholesky(self)
scipy.linalg.tests.testTestOverwrite.test_cholesky_banded(self)
scipy.linalg.tests.test_decomp_cholesky.TestCholesky
scipy.linalg.tests.test_decomp_cholesky.TestCholesky.test_check_finite(self)
scipy.linalg.tests.test_decomp_cholesky.TestCholesky.test_random(self)
scipy.linalg.tests.test_decomp_cholesky.TestCholesky.test_random_complex(self)
scipy.linalg.tests.test_decomp_cholesky.TestCholesky.test_simple(self)
scipy.linalg.tests.test_decomp_cholesky.TestCholesky.test_simple_complex(self)
scipy.linalg.tests.test_decomp_cholesky.TestCholeskyBanded
scipy.linalg.tests.test_decomp_cholesky.TestCholeskyBanded.test_check_finite(self)
scipy.linalg.tests.test_decomp_cholesky.TestCholeskyBanded.test_lower_complex(self)
scipy.linalg.tests.test_decomp_cholesky.TestCholeskyBanded.test_lower_real(self)
scipy.linalg.tests.test_decomp_cholesky.TestCholeskyBanded.test_upper_complex(self)
scipy.linalg.tests.test_decomp_cholesky.TestCholeskyBanded.test_upper_real(self)
scipy.linalg.tests.test_decomp_cholesky.TestEmptyArray
scipy.linalg.tests.test_decomp_cholesky.TestEmptyArray.test_cho_factor_empty_square(self)
scipy.linalg.tests.test_decomp_cholesky.TestOverwrite
scipy.linalg.tests.test_decomp_cholesky.TestOverwrite.test_cho_factor(self)
scipy.linalg.tests.test_decomp_cholesky.TestOverwrite.test_cho_solve(self)
scipy.linalg.tests.test_decomp_cholesky.TestOverwrite.test_cho_solve_banded(self)
scipy.linalg.tests.test_decomp_cholesky.TestOverwrite.test_cholesky(self)
scipy.linalg.tests.test_decomp_cholesky.TestOverwrite.test_cholesky_banded(self)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/test_fblas.py----------------------------------------
A:scipy.linalg.tests.test_fblas.c->c.reshape((a.shape[0],)).reshape((a.shape[0],))
A:scipy.linalg.tests.test_fblas.x->arange(12.0, dtype=self.dtype)
A:scipy.linalg.tests.test_fblas.y->self.blas_func(1, a, x, 1, y, trans=1, incy=3)
A:scipy.linalg.tests.test_fblas.real_x->arange(12.0, dtype=self.dtype).copy()
A:scipy.linalg.tests.test_fblas.desired_x->self.blas_func(1, a, x, 1, y, trans=1, incy=3).copy()
A:scipy.linalg.tests.test_fblas.desired_y->self.blas_func(1, a, x, 1, y, trans=1, incy=3).copy()
A:scipy.linalg.tests.test_fblas.(x, y)->self.blas_func(x, y, n=3, incx=4, incy=2)
A:scipy.linalg.tests.test_fblas.mult->array(1 + 1j, dtype=self.dtype)
A:scipy.linalg.tests.test_fblas.(alpha, beta, a, x, y)->self.get_data(y_stride=2)
A:scipy.linalg.tests.test_fblas.d->dtype()
A:scipy.linalg.tests.test_fblas.N->numpy.prod(shape)
A:scipy.linalg.tests.test_fblas.tmp->tmp[offset:offset + N * d.nbytes].view(dtype=dtype)
A:scipy.linalg.tests.test_fblas.aligned->aligned_array(arr.shape, align, dtype, order)
A:scipy.linalg.tests.test_fblas.testdata->product((15, 32), (10000,), (200, 89), ('C', 'F'))
A:scipy.linalg.tests.test_fblas.A_d->numpy.random.rand(m, n)
A:scipy.linalg.tests.test_fblas.X_d->numpy.random.rand(n)
A:scipy.linalg.tests.test_fblas.desired->numpy.dot(A_d, X_d)
A:scipy.linalg.tests.test_fblas.A_f->as_aligned(A_d, align, np.float32, order=a_order)
A:scipy.linalg.tests.test_fblas.X_f->as_aligned(X_d, align, np.float32, order=a_order)
scipy.linalg.tests.test_fBaseAxpy
scipy.linalg.tests.test_fBaseAxpy.test_default_a(self)
scipy.linalg.tests.test_fBaseAxpy.test_simple(self)
scipy.linalg.tests.test_fBaseAxpy.test_x_and_y_stride(self)
scipy.linalg.tests.test_fBaseAxpy.test_x_bad_size(self)
scipy.linalg.tests.test_fBaseAxpy.test_x_stride(self)
scipy.linalg.tests.test_fBaseAxpy.test_y_bad_size(self)
scipy.linalg.tests.test_fBaseAxpy.test_y_stride(self)
scipy.linalg.tests.test_fBaseCopy
scipy.linalg.tests.test_fBaseCopy.test_simple(self)
scipy.linalg.tests.test_fBaseCopy.test_x_and_y_stride(self)
scipy.linalg.tests.test_fBaseCopy.test_x_bad_size(self)
scipy.linalg.tests.test_fBaseCopy.test_x_stride(self)
scipy.linalg.tests.test_fBaseCopy.test_y_bad_size(self)
scipy.linalg.tests.test_fBaseCopy.test_y_stride(self)
scipy.linalg.tests.test_fBaseGemv
scipy.linalg.tests.test_fBaseGemv.get_data(self,x_stride=1,y_stride=1)
scipy.linalg.tests.test_fBaseGemv.test_default_beta_y(self)
scipy.linalg.tests.test_fBaseGemv.test_simple(self)
scipy.linalg.tests.test_fBaseGemv.test_simple_transpose(self)
scipy.linalg.tests.test_fBaseGemv.test_simple_transpose_conj(self)
scipy.linalg.tests.test_fBaseGemv.test_x_stride(self)
scipy.linalg.tests.test_fBaseGemv.test_x_stride_assert(self)
scipy.linalg.tests.test_fBaseGemv.test_x_stride_transpose(self)
scipy.linalg.tests.test_fBaseGemv.test_y_stride(self)
scipy.linalg.tests.test_fBaseGemv.test_y_stride_assert(self)
scipy.linalg.tests.test_fBaseGemv.test_y_stride_transpose(self)
scipy.linalg.tests.test_fBaseScal
scipy.linalg.tests.test_fBaseScal.test_simple(self)
scipy.linalg.tests.test_fBaseScal.test_x_bad_size(self)
scipy.linalg.tests.test_fBaseScal.test_x_stride(self)
scipy.linalg.tests.test_fBaseSwap
scipy.linalg.tests.test_fBaseSwap.test_simple(self)
scipy.linalg.tests.test_fBaseSwap.test_x_and_y_stride(self)
scipy.linalg.tests.test_fBaseSwap.test_x_bad_size(self)
scipy.linalg.tests.test_fBaseSwap.test_x_stride(self)
scipy.linalg.tests.test_fBaseSwap.test_y_bad_size(self)
scipy.linalg.tests.test_fBaseSwap.test_y_stride(self)
scipy.linalg.tests.test_fTestDaxpy(BaseAxpy)
scipy.linalg.tests.test_fTestDcopy(BaseCopy)
scipy.linalg.tests.test_fTestDgemv(BaseGemv)
scipy.linalg.tests.test_fTestDscal(BaseScal)
scipy.linalg.tests.test_fTestDswap(BaseSwap)
scipy.linalg.tests.test_fTestZaxpy(BaseAxpy)
scipy.linalg.tests.test_fTestZcopy(BaseCopy)
scipy.linalg.tests.test_fTestZgemv(BaseGemv)
scipy.linalg.tests.test_fTestZscal(BaseScal)
scipy.linalg.tests.test_fTestZswap(BaseSwap)
scipy.linalg.tests.test_fblas.BaseAxpy
scipy.linalg.tests.test_fblas.BaseAxpy.test_default_a(self)
scipy.linalg.tests.test_fblas.BaseAxpy.test_simple(self)
scipy.linalg.tests.test_fblas.BaseAxpy.test_x_and_y_stride(self)
scipy.linalg.tests.test_fblas.BaseAxpy.test_x_bad_size(self)
scipy.linalg.tests.test_fblas.BaseAxpy.test_x_stride(self)
scipy.linalg.tests.test_fblas.BaseAxpy.test_y_bad_size(self)
scipy.linalg.tests.test_fblas.BaseAxpy.test_y_stride(self)
scipy.linalg.tests.test_fblas.BaseCopy
scipy.linalg.tests.test_fblas.BaseCopy.test_simple(self)
scipy.linalg.tests.test_fblas.BaseCopy.test_x_and_y_stride(self)
scipy.linalg.tests.test_fblas.BaseCopy.test_x_bad_size(self)
scipy.linalg.tests.test_fblas.BaseCopy.test_x_stride(self)
scipy.linalg.tests.test_fblas.BaseCopy.test_y_bad_size(self)
scipy.linalg.tests.test_fblas.BaseCopy.test_y_stride(self)
scipy.linalg.tests.test_fblas.BaseGemv
scipy.linalg.tests.test_fblas.BaseGemv.get_data(self,x_stride=1,y_stride=1)
scipy.linalg.tests.test_fblas.BaseGemv.test_default_beta_y(self)
scipy.linalg.tests.test_fblas.BaseGemv.test_simple(self)
scipy.linalg.tests.test_fblas.BaseGemv.test_simple_transpose(self)
scipy.linalg.tests.test_fblas.BaseGemv.test_simple_transpose_conj(self)
scipy.linalg.tests.test_fblas.BaseGemv.test_x_stride(self)
scipy.linalg.tests.test_fblas.BaseGemv.test_x_stride_assert(self)
scipy.linalg.tests.test_fblas.BaseGemv.test_x_stride_transpose(self)
scipy.linalg.tests.test_fblas.BaseGemv.test_y_stride(self)
scipy.linalg.tests.test_fblas.BaseGemv.test_y_stride_assert(self)
scipy.linalg.tests.test_fblas.BaseGemv.test_y_stride_transpose(self)
scipy.linalg.tests.test_fblas.BaseScal
scipy.linalg.tests.test_fblas.BaseScal.test_simple(self)
scipy.linalg.tests.test_fblas.BaseScal.test_x_bad_size(self)
scipy.linalg.tests.test_fblas.BaseScal.test_x_stride(self)
scipy.linalg.tests.test_fblas.BaseSwap
scipy.linalg.tests.test_fblas.BaseSwap.test_simple(self)
scipy.linalg.tests.test_fblas.BaseSwap.test_x_and_y_stride(self)
scipy.linalg.tests.test_fblas.BaseSwap.test_x_bad_size(self)
scipy.linalg.tests.test_fblas.BaseSwap.test_x_stride(self)
scipy.linalg.tests.test_fblas.BaseSwap.test_y_bad_size(self)
scipy.linalg.tests.test_fblas.BaseSwap.test_y_stride(self)
scipy.linalg.tests.test_fblas.TestDaxpy(BaseAxpy)
scipy.linalg.tests.test_fblas.TestDcopy(BaseCopy)
scipy.linalg.tests.test_fblas.TestDgemv(BaseGemv)
scipy.linalg.tests.test_fblas.TestDscal(BaseScal)
scipy.linalg.tests.test_fblas.TestDswap(BaseSwap)
scipy.linalg.tests.test_fblas.TestZaxpy(BaseAxpy)
scipy.linalg.tests.test_fblas.TestZcopy(BaseCopy)
scipy.linalg.tests.test_fblas.TestZgemv(BaseGemv)
scipy.linalg.tests.test_fblas.TestZscal(BaseScal)
scipy.linalg.tests.test_fblas.TestZswap(BaseSwap)
scipy.linalg.tests.test_fblas.matrixmultiply(a,b)
scipy.linalg.tests.test_fmatrixmultiply(a,b)


----------------------------------------/home/zhang/Packages/scipy/scipy1.10.0rc1/linalg/tests/__init__.py----------------------------------------

