
----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/__config__.py----------------------------------------
A:scipy.__config__.g->globals()
A:scipy.__config__.v->str(v)
scipy.__config__.get_info(name)
scipy.__config__.show()
scipy.show_config()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/setupscons.py----------------------------------------
A:scipy.setupscons.config->Configuration(pkgname, parent_package, top_path, setup_name='setupscons.py')
A:scipy.setupscons.target->pjoin(kw['scons_cmd'].build_lib, kw['pkg_name'], '__config__.py')
scipy.setupscons.configuration(parent_package='',top_path=None,setup_name='setupscons.py')


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/version.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/setup.py----------------------------------------
A:scipy.setup.config->Configuration('scipy', parent_package, top_path)
scipy.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/odr/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/odr/setupscons.py----------------------------------------
A:scipy.odr.setupscons.config->Configuration('odr', parent_package, top_path)
scipy.odr.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/odr/models.py----------------------------------------
A:scipy.odr.models.a->numpy.ones(x.shape[-1], float)
A:scipy.odr.models.res->numpy.concatenate((np.ones(x.shape[-1], float), x * np.exp(B[1] * x)))
A:scipy.odr.models.b->numpy.repeat(b, (x.shape[-1],) * b.shape[-1], axis=0)
A:scipy.odr.models.multilinear->Model(_lin_fcn, fjacb=_lin_fjb, fjacd=_lin_fjd, estimate=_lin_est, meta={'name': 'Arbitrary-dimensional Linear', 'equ': 'y = B_0 + Sum[i=1..m, B_i * x_i]', 'TeXequ': '$y=\\beta_0 + \\sum_{i=1}^m \\beta_i x_i$'})
A:scipy.odr.models.powers->numpy.arange(1, powers + 1)
A:scipy.odr.models.exponential->Model(_exp_fcn, fjacd=_exp_fjd, fjacb=_exp_fjb, estimate=_exp_est, meta={'name': 'Exponential', 'equ': 'y= B_0 + exp(B_1 * x)', 'TeXequ': '$y=\\beta_0 + e^{\\beta_1 x}$'})
A:scipy.odr.models._ret->numpy.concatenate((x * x, x, np.ones(x.shape, float)))
A:scipy.odr.models.unilinear->Model(_unilin, fjacd=_unilin_fjd, fjacb=_unilin_fjb, estimate=_unilin_est, meta={'name': 'Univariate Linear', 'equ': 'y = B_0 * x + B_1', 'TeXequ': '$y = \\beta_0 x + \\beta_1$'})
A:scipy.odr.models.quadratic->Model(_quadratic, fjacd=_quad_fjd, fjacb=_quad_fjb, estimate=_quad_est, meta={'name': 'Quadratic', 'equ': 'y = B_0*x**2 + B_1*x + B_2', 'TeXequ': '$y = \\beta_0 x^2 + \\beta_1 x + \\beta_2'})
scipy.odr._exp_est(data)
scipy.odr._exp_fcn(B,x)
scipy.odr._exp_fjb(B,x)
scipy.odr._exp_fjd(B,x)
scipy.odr._lin_est(data)
scipy.odr._lin_fcn(B,x)
scipy.odr._lin_fjb(B,x)
scipy.odr._lin_fjd(B,x)
scipy.odr._poly_fcn(B,x,powers)
scipy.odr._poly_fjacb(B,x,powers)
scipy.odr._poly_fjacd(B,x,powers)
scipy.odr._quad_est(data)
scipy.odr._quad_fjb(B,x)
scipy.odr._quad_fjd(B,x)
scipy.odr._quadratic(B,x)
scipy.odr._unilin(B,x)
scipy.odr._unilin_est(data)
scipy.odr._unilin_fjb(B,x)
scipy.odr._unilin_fjd(B,x)
scipy.odr.models._exp_est(data)
scipy.odr.models._exp_fcn(B,x)
scipy.odr.models._exp_fjb(B,x)
scipy.odr.models._exp_fjd(B,x)
scipy.odr.models._lin_est(data)
scipy.odr.models._lin_fcn(B,x)
scipy.odr.models._lin_fjb(B,x)
scipy.odr.models._lin_fjd(B,x)
scipy.odr.models._poly_fcn(B,x,powers)
scipy.odr.models._poly_fjacb(B,x,powers)
scipy.odr.models._poly_fjacd(B,x,powers)
scipy.odr.models._quad_est(data)
scipy.odr.models._quad_fjb(B,x)
scipy.odr.models._quad_fjd(B,x)
scipy.odr.models._quadratic(B,x)
scipy.odr.models._unilin(B,x)
scipy.odr.models._unilin_est(data)
scipy.odr.models._unilin_fjb(B,x)
scipy.odr.models._unilin_fjd(B,x)
scipy.odr.models.polynomial(order)
scipy.odr.polynomial(order)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/odr/setup.py----------------------------------------
A:scipy.odr.setup.config->Configuration('odr', parent_package, top_path)
A:scipy.odr.setup.blas_info->get_info('blas_opt')
scipy.odr.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/odr/odrpack.py----------------------------------------
A:scipy.odr.odrpack.obj->getattr(self, attr)
A:scipy.odr.odrpack.self.x->_conv(x)
A:scipy.odr.odrpack.self.y->_conv(y)
A:scipy.odr.odrpack.self.we->_conv(we)
A:scipy.odr.odrpack.self.wd->_conv(wd)
A:scipy.odr.odrpack.self.fix->_conv(fix)
A:scipy.odr.odrpack.self.sx->_conv(sx)
A:scipy.odr.odrpack.self.sy->_conv(sy)
A:scipy.odr.odrpack.self.covx->_conv(covx)
A:scipy.odr.odrpack.self.covy->_conv(covy)
A:scipy.odr.odrpack.weights->numpy.zeros(cov.shape, float)
A:scipy.odr.odrpack.weights[:, :, i]->inv(cov[:, :, i])
A:scipy.odr.odrpack.extra_args->tuple(extra_args)
A:scipy.odr.odrpack.self.stopreason->_report_error(self.info)
A:scipy.odr.odrpack.self.beta0->_conv(beta0)
A:scipy.odr.odrpack.self.delta0->_conv(delta0)
A:scipy.odr.odrpack.self.ifixx->_conv(ifixx, dtype=numpy.int32)
A:scipy.odr.odrpack.self.ifixb->_conv(ifixb, dtype=numpy.int32)
A:scipy.odr.odrpack.self.stpb->_conv(stpb)
A:scipy.odr.odrpack.self.stpd->_conv(stpd)
A:scipy.odr.odrpack.self.sclb->_conv(sclb)
A:scipy.odr.odrpack.self.scld->_conv(scld)
A:scipy.odr.odrpack.self.work->numpy.zeros((lwork,), float)
A:scipy.odr.odrpack.self.iwork->_conv(iwork)
A:scipy.odr.odrpack.x_s->list(self.data.x.shape)
A:scipy.odr.odrpack.y_s->list(self.data.y.shape)
A:scipy.odr.odrpack.p->len(self.beta0)
A:scipy.odr.odrpack.res->self.model.fjacb(*arglist)
A:scipy.odr.odrpack.ip[0]->ip2arg.index(iprint_l[0:2])
A:scipy.odr.odrpack.ip[1]->ip2arg.index(iprint_l[2:4])
A:scipy.odr.odrpack.ip[3]->ip2arg.index(iprint_l[4:6])
A:scipy.odr.odrpack.d0->numpy.ravel(self.delta0)
A:scipy.odr.odrpack.self.output->Output(odr(*args, **kwds))
scipy.odr.Data(self,x,y=None,we=None,wd=None,fix=None,meta={})
scipy.odr.Data.__getattr__(self,attr)
scipy.odr.Data.set_meta(self,**kwds)
scipy.odr.Model(self,fcn,fjacb=None,fjacd=None,extra_args=None,estimate=None,implicit=0,meta=None)
scipy.odr.Model.__getattr__(self,attr)
scipy.odr.Model.set_meta(self,**kwds)
scipy.odr.ODR(self,data,model,beta0=None,delta0=None,ifixb=None,ifixx=None,job=None,iprint=None,errfile=None,rptfile=None,ndigit=None,taufac=None,sstol=None,partol=None,maxit=None,stpb=None,stpd=None,sclb=None,scld=None,work=None,iwork=None)
scipy.odr.ODR._check(self)
scipy.odr.ODR._gen_work(self)
scipy.odr.ODR.restart(self,iter=None)
scipy.odr.ODR.run(self)
scipy.odr.ODR.set_iprint(self,init=None,so_init=None,iter=None,so_iter=None,iter_step=None,final=None,so_final=None)
scipy.odr.ODR.set_job(self,fit_type=None,deriv=None,var_calc=None,del_init=None,restart=None)
scipy.odr.Output(self,output)
scipy.odr.Output.pprint(self)
scipy.odr.RealData(self,x,y=None,sx=None,sy=None,covx=None,covy=None,fix=None,meta={})
scipy.odr.RealData.__getattr__(self,attr)
scipy.odr.RealData._cov2wt(self,cov)
scipy.odr.RealData._sd2wt(self,sd)
scipy.odr._conv(obj,dtype=None)
scipy.odr._report_error(info)
scipy.odr.odrpack.Data(self,x,y=None,we=None,wd=None,fix=None,meta={})
scipy.odr.odrpack.Data.__getattr__(self,attr)
scipy.odr.odrpack.Data.__init__(self,x,y=None,we=None,wd=None,fix=None,meta={})
scipy.odr.odrpack.Data.set_meta(self,**kwds)
scipy.odr.odrpack.Model(self,fcn,fjacb=None,fjacd=None,extra_args=None,estimate=None,implicit=0,meta=None)
scipy.odr.odrpack.Model.__getattr__(self,attr)
scipy.odr.odrpack.Model.__init__(self,fcn,fjacb=None,fjacd=None,extra_args=None,estimate=None,implicit=0,meta=None)
scipy.odr.odrpack.Model.set_meta(self,**kwds)
scipy.odr.odrpack.ODR(self,data,model,beta0=None,delta0=None,ifixb=None,ifixx=None,job=None,iprint=None,errfile=None,rptfile=None,ndigit=None,taufac=None,sstol=None,partol=None,maxit=None,stpb=None,stpd=None,sclb=None,scld=None,work=None,iwork=None)
scipy.odr.odrpack.ODR.__init__(self,data,model,beta0=None,delta0=None,ifixb=None,ifixx=None,job=None,iprint=None,errfile=None,rptfile=None,ndigit=None,taufac=None,sstol=None,partol=None,maxit=None,stpb=None,stpd=None,sclb=None,scld=None,work=None,iwork=None)
scipy.odr.odrpack.ODR._check(self)
scipy.odr.odrpack.ODR._gen_work(self)
scipy.odr.odrpack.ODR.restart(self,iter=None)
scipy.odr.odrpack.ODR.run(self)
scipy.odr.odrpack.ODR.set_iprint(self,init=None,so_init=None,iter=None,so_iter=None,iter_step=None,final=None,so_final=None)
scipy.odr.odrpack.ODR.set_job(self,fit_type=None,deriv=None,var_calc=None,del_init=None,restart=None)
scipy.odr.odrpack.Output(self,output)
scipy.odr.odrpack.Output.__init__(self,output)
scipy.odr.odrpack.Output.pprint(self)
scipy.odr.odrpack.RealData(self,x,y=None,sx=None,sy=None,covx=None,covy=None,fix=None,meta={})
scipy.odr.odrpack.RealData.__getattr__(self,attr)
scipy.odr.odrpack.RealData.__init__(self,x,y=None,sx=None,sy=None,covx=None,covy=None,fix=None,meta={})
scipy.odr.odrpack.RealData._cov2wt(self,cov)
scipy.odr.odrpack.RealData._sd2wt(self,sd)
scipy.odr.odrpack._conv(obj,dtype=None)
scipy.odr.odrpack._report_error(info)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/odr/tests/test_odr.py----------------------------------------
A:scipy.odr.tests.test_odr.eBx->numpy.exp(B[2] * x)
A:scipy.odr.tests.test_odr.res->numpy.vstack([np.ones(x.shape[-1]), np.power(eBx - 1.0, 2), B[1] * 2.0 * (eBx - 1.0) * eBx * x])
A:scipy.odr.tests.test_odr.explicit_mod->Model(self.explicit_fcn, fjacb=self.explicit_fjb, fjacd=self.explicit_fjd, meta=dict(name='Sample Explicit Model', ref='ODRPACK UG, pg. 39'))
A:scipy.odr.tests.test_odr.explicit_dat->Data([0.0, 0.0, 5.0, 7.0, 7.5, 10.0, 16.0, 26.0, 30.0, 34.0, 34.5, 100.0], [1265.0, 1263.6, 1258.0, 1254.0, 1253.0, 1249.8, 1237.0, 1218.0, 1220.6, 1213.8, 1215.5, 1212.0])
A:scipy.odr.tests.test_odr.explicit_odr->ODR(explicit_dat, explicit_mod, beta0=[1500.0, -50.0, -0.1], ifixx=[0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0])
A:scipy.odr.tests.test_odr.out->ODR(l_dat, l_mod, beta0=(1000.0, 0.1, 3.8)).run()
A:scipy.odr.tests.test_odr.implicit_mod->Model(self.implicit_fcn, implicit=1, meta=dict(name='Sample Implicit Model', ref='ODRPACK UG, pg. 49'))
A:scipy.odr.tests.test_odr.implicit_dat->Data([[0.5, 1.2, 1.6, 1.86, 2.12, 2.36, 2.44, 2.36, 2.06, 1.74, 1.34, 0.9, -0.28, -0.78, -1.36, -1.9, -2.5, -2.88, -3.18, -3.44], [-0.12, -0.6, -1.0, -1.4, -2.54, -3.36, -4.0, -4.75, -5.25, -5.64, -5.97, -6.32, -6.44, -6.44, -6.41, -6.25, -5.88, -5.5, -5.24, -4.86]], 1)
A:scipy.odr.tests.test_odr.implicit_odr->ODR(implicit_dat, implicit_mod, beta0=[-1.0, -3.0, 0.09, 0.02, 0.08])
A:scipy.odr.tests.test_odr.ctheta->numpy.cos(theta)
A:scipy.odr.tests.test_odr.stheta->numpy.sin(theta)
A:scipy.odr.tests.test_odr.omega->numpy.power(2.0 * pi * x * np.exp(-B[2]), B[3])
A:scipy.odr.tests.test_odr.phi->numpy.arctan2(omega * stheta, 1.0 + omega * ctheta)
A:scipy.odr.tests.test_odr.ret->numpy.vstack([B[1] + r * np.cos(B[4] * phi), r * np.sin(B[4] * phi)])
A:scipy.odr.tests.test_odr.multi_mod->Model(self.multi_fcn, meta=dict(name='Sample Multi-Response Model', ref='ODRPACK UG, pg. 56'))
A:scipy.odr.tests.test_odr.multi_x->numpy.array([30.0, 50.0, 70.0, 100.0, 150.0, 200.0, 300.0, 500.0, 700.0, 1000.0, 1500.0, 2000.0, 3000.0, 5000.0, 7000.0, 10000.0, 15000.0, 20000.0, 30000.0, 50000.0, 70000.0, 100000.0, 150000.0])
A:scipy.odr.tests.test_odr.multi_y->numpy.array([[4.22, 4.167, 4.132, 4.038, 4.019, 3.956, 3.884, 3.784, 3.713, 3.633, 3.54, 3.433, 3.358, 3.258, 3.193, 3.128, 3.059, 2.984, 2.934, 2.876, 2.838, 2.798, 2.759], [0.136, 0.167, 0.188, 0.212, 0.236, 0.257, 0.276, 0.297, 0.309, 0.311, 0.314, 0.311, 0.305, 0.289, 0.277, 0.255, 0.24, 0.218, 0.202, 0.182, 0.168, 0.153, 0.139]])
A:scipy.odr.tests.test_odr.n->len(multi_x)
A:scipy.odr.tests.test_odr.multi_we->numpy.zeros((2, 2, n), dtype=float)
A:scipy.odr.tests.test_odr.multi_ifixx->numpy.ones(n, dtype=int)
A:scipy.odr.tests.test_odr.multi_delta->numpy.zeros(n, dtype=float)
A:scipy.odr.tests.test_odr.multi_dat->Data(multi_x, multi_y, wd=0.0001 / np.power(multi_x, 2), we=multi_we)
A:scipy.odr.tests.test_odr.multi_odr->ODR(multi_dat, multi_mod, beta0=[4.0, 2.0, 7.0, 0.4, 0.5], delta0=multi_delta, ifixx=multi_ifixx)
A:scipy.odr.tests.test_odr.p_x->numpy.array([0.0, 0.9, 1.8, 2.6, 3.3, 4.4, 5.2, 6.1, 6.5, 7.4])
A:scipy.odr.tests.test_odr.p_y->numpy.array([5.9, 5.4, 4.4, 4.6, 3.5, 3.7, 2.8, 2.8, 2.4, 1.5])
A:scipy.odr.tests.test_odr.p_sx->numpy.array([0.03, 0.03, 0.04, 0.035, 0.07, 0.11, 0.13, 0.22, 0.74, 1.0])
A:scipy.odr.tests.test_odr.p_sy->numpy.array([1.0, 0.74, 0.5, 0.35, 0.22, 0.22, 0.12, 0.12, 0.1, 0.04])
A:scipy.odr.tests.test_odr.p_dat->RealData(p_x, p_y, sx=p_sx, sy=p_sy)
A:scipy.odr.tests.test_odr.pr_dat->RealData(p_y, p_x, sx=p_sy, sy=p_sx)
A:scipy.odr.tests.test_odr.p_mod->Model(self.pearson_fcn, meta=dict(name='Uni-linear Fit'))
A:scipy.odr.tests.test_odr.p_odr->ODR(p_dat, p_mod, beta0=[1.0, 1.0])
A:scipy.odr.tests.test_odr.pr_odr->ODR(pr_dat, p_mod, beta0=[1.0, 1.0])
A:scipy.odr.tests.test_odr.rout->ODR(pr_dat, p_mod, beta0=[1.0, 1.0]).run()
A:scipy.odr.tests.test_odr.l_sy->numpy.array([0.29] * 18)
A:scipy.odr.tests.test_odr.l_sx->numpy.array([0.000972971, 0.000948268, 0.000707632, 0.000706679, 0.000706074, 0.000703918, 0.000698955, 0.000456856, 0.000455207, 0.000662717, 0.000654619, 0.000652694, 8.59202e-07, 0.00106589, 0.00106378, 0.00125483, 0.00140818, 0.00241839])
A:scipy.odr.tests.test_odr.l_dat->RealData([3.9094, 3.85945, 3.84976, 3.84716, 3.84551, 3.83964, 3.82608, 3.78847, 3.78163, 3.72558, 3.70274, 3.6973, 3.67373, 3.65982, 3.6562, 3.62498, 3.55525, 3.41886], [652, 910.5, 984, 1000, 1007.5, 1053, 1160.5, 1409.5, 1430, 1122, 957.5, 920, 777.5, 709.5, 698, 578.5, 418.5, 275.5], sx=l_sx, sy=l_sy)
A:scipy.odr.tests.test_odr.l_mod->Model(self.lorentz, meta=dict(name='Lorentz Peak'))
A:scipy.odr.tests.test_odr.l_odr->ODR(l_dat, l_mod, beta0=(1000.0, 0.1, 3.8))
A:scipy.odr.tests.test_odr.x->numpy.linspace(0, 10)
A:scipy.odr.tests.test_odr.y->linear(c, x)
A:scipy.odr.tests.test_odr.model->Model(linear)
A:scipy.odr.tests.test_odr.data->Data(x, y, wd=1.0, we=1.0)
A:scipy.odr.tests.test_odr.job->ODR(data, model, beta0=[1.0, 1.0])
A:scipy.odr.tests.test_odr.result->ODR(data, model, beta0=[1.0, 1.0]).run()
scipy.odr.tests.test_odr.TestODR(TestCase)
scipy.odr.tests.test_odr.TestODR.explicit_fcn(self,B,x)
scipy.odr.tests.test_odr.TestODR.explicit_fjb(self,B,x)
scipy.odr.tests.test_odr.TestODR.explicit_fjd(self,B,x)
scipy.odr.tests.test_odr.TestODR.implicit_fcn(self,B,x)
scipy.odr.tests.test_odr.TestODR.lorentz(self,beta,x)
scipy.odr.tests.test_odr.TestODR.multi_fcn(self,B,x)
scipy.odr.tests.test_odr.TestODR.pearson_fcn(self,B,x)
scipy.odr.tests.test_odr.TestODR.test_explicit(self)
scipy.odr.tests.test_odr.TestODR.test_implicit(self)
scipy.odr.tests.test_odr.TestODR.test_lorentz(self)
scipy.odr.tests.test_odr.TestODR.test_multi(self)
scipy.odr.tests.test_odr.TestODR.test_pearson(self)
scipy.odr.tests.test_odr.TestODR.test_ticket_1253(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/_build_utils/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/_build_utils/_fortran.py----------------------------------------
A:scipy._build_utils._fortran.r_accelerate->re.compile('Accelerate|vecLib')
A:scipy._build_utils._fortran.extra_link_args->info.get('extra_link_args', '')
A:scipy._build_utils._fortran.r_mkl->re.compile('mkl_core')
A:scipy._build_utils._fortran.libraries->info.get('libraries', '')
scipy._build_utils._fortran._uses_mkl(info)
scipy._build_utils._fortran._uses_veclib(info)
scipy._build_utils._fortran.needs_g77_abi_wrapper(info)
scipy._build_utils.needs_g77_abi_wrapper(info)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/constants/__init__.py----------------------------------------
A:scipy.constants.__init__._constant_names->'\n'.join(['``%s``%s  %s %s' % (_x[1], ' ' * (66 - len(_x[1])), _x[2][0], _x[2][1]) for _x in sorted(_constant_names)])


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/constants/codata.py----------------------------------------
A:scipy.constants.codata.name->line[:55].rstrip()
A:scipy.constants.codata.val->float(val)
A:scipy.constants.codata.uncert->float(uncert)
A:scipy.constants.codata.units->line[99:].rstrip()
A:scipy.constants.codata._physical_constants_2002->parse_constants(txt2002)
A:scipy.constants.codata._physical_constants_2006->parse_constants(txt2006)
A:scipy.constants.codata._physical_constants_2010->parse_constants(txt2010)
A:scipy.constants.codata._aliases[k]->k.replace('momentum', 'mom.um')
A:scipy.constants.codata.result->list(_current_constants.keys())
A:scipy.constants.codata.c->value('speed of light in vacuum')
scipy.codata.ConstantWarning(DeprecationWarning)
scipy.codata._check_obsolete(key)
scipy.codata.find(sub=None,disp=False)
scipy.codata.parse_constants(d)
scipy.codata.precision(key)
scipy.codata.unit(key)
scipy.codata.value(key)
scipy.constants.codata.ConstantWarning(DeprecationWarning)
scipy.constants.codata._check_obsolete(key)
scipy.constants.codata.find(sub=None,disp=False)
scipy.constants.codata.parse_constants(d)
scipy.constants.codata.precision(key)
scipy.constants.codata.unit(key)
scipy.constants.codata.value(key)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/constants/setup.py----------------------------------------
A:scipy.constants.setup.config->Configuration('constants', parent_package, top_path)
scipy.constants.setup.configuration(parent_package='',top_path=None)
scipy.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/constants/constants.py----------------------------------------
A:scipy.constants.constants.cspeed_of_light->_cd('speed of light in vacuum')
A:scipy.constants.constants.hPlanck->_cd('Planck constant')
A:scipy.constants.constants.Ggravitational_constant->_cd('Newtonian constant of gravitation')
A:scipy.constants.constants.g->_cd('standard acceleration of gravity')
A:scipy.constants.constants.eelementary_charge->_cd('elementary charge')
A:scipy.constants.constants.Rgas_constant->_cd('molar gas constant')
A:scipy.constants.constants.alphafine_structure->_cd('fine-structure constant')
A:scipy.constants.constants.N_AAvogadro->_cd('Avogadro constant')
A:scipy.constants.constants.kBoltzmann->_cd('Boltzmann constant')
A:scipy.constants.constants.sigmaStefan_Boltzmann->_cd('Stefan-Boltzmann constant')
A:scipy.constants.constants.Wien->_cd('Wien wavelength displacement law constant')
A:scipy.constants.constants.Rydberg->_cd('Rydberg constant')
A:scipy.constants.constants.m_eelectron_mass->_cd('electron mass')
A:scipy.constants.constants.m_pproton_mass->_cd('proton mass')
A:scipy.constants.constants.m_nneutron_mass->_cd('neutron mass')
A:scipy.constants.constants.m_uuatomic_mass->_cd('atomic mass constant')
A:scipy.constants.constants.atmatmosphere->_cd('standard atmosphere')
scipy.C2F(C)
scipy.C2K(C)
scipy.F2C(F)
scipy.F2K(F)
scipy.K2C(K)
scipy.K2F(K)
scipy.constants.constants.C2F(C)
scipy.constants.constants.C2K(C)
scipy.constants.constants.F2C(F)
scipy.constants.constants.F2K(F)
scipy.constants.constants.K2C(K)
scipy.constants.constants.K2F(K)
scipy.constants.constants.lambda2nu(lambda_)
scipy.constants.constants.nu2lambda(nu)
scipy.lambda2nu(lambda_)
scipy.nu2lambda(nu)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/constants/tests/test_constants.py----------------------------------------
scipy.constants.tests.test_constants.test_celcius_to_fahrenheit()
scipy.constants.tests.test_constants.test_celcius_to_kelvin()
scipy.constants.tests.test_constants.test_fahrenheit_to_celcius()
scipy.constants.tests.test_constants.test_fahrenheit_to_kelvin()
scipy.constants.tests.test_constants.test_kelvin_to_celcius()
scipy.constants.tests.test_constants.test_kelvin_to_fahrenheit()
scipy.constants.tests.test_constants.test_lambda_to_nu()
scipy.constants.tests.test_constants.test_nu_to_lambda()
scipy.tests.test_test_celcius_to_fahrenheit()
scipy.tests.test_test_celcius_to_kelvin()
scipy.tests.test_test_fahrenheit_to_celcius()
scipy.tests.test_test_fahrenheit_to_kelvin()
scipy.tests.test_test_kelvin_to_celcius()
scipy.tests.test_test_kelvin_to_fahrenheit()
scipy.tests.test_test_lambda_to_nu()
scipy.tests.test_test_nu_to_lambda()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/constants/tests/test_codata.py----------------------------------------
A:scipy.constants.tests.test_codata.warn_ctx->WarningManager()
A:scipy.constants.tests.test_codata.keys->find('natural unit', disp=False)
scipy.constants.tests.test_codata.test_2002_vs_2006()
scipy.constants.tests.test_codata.test_basic_lookup()
scipy.constants.tests.test_codata.test_basic_table_parse()
scipy.constants.tests.test_codata.test_exact_values()
scipy.constants.tests.test_codata.test_find()
scipy.constants.tests.test_codata.test_find_all()
scipy.constants.tests.test_codata.test_find_single()
scipy.tests.test_codata.test_2002_vs_2006()
scipy.tests.test_codata.test_basic_lookup()
scipy.tests.test_codata.test_basic_table_parse()
scipy.tests.test_codata.test_exact_values()
scipy.tests.test_codata.test_find()
scipy.tests.test_codata.test_find_all()
scipy.tests.test_codata.test_find_single()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/cluster/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/cluster/hierarchy.py----------------------------------------
A:scipy.cluster.hierarchy._cpy_linkage_methods->set(_cpy_non_euclid_methods.keys()).union(set(_cpy_euclid_methods.keys()))
A:scipy.cluster.hierarchy.D->numpy.random.rand(pnts * (pnts - 1) / 2)
A:scipy.cluster.hierarchy.y->scipy.spatial.distance.pdist(X, metric=metric).mean()
A:scipy.cluster.hierarchy.d->scipy.spatial.distance.num_obs_y(y)
A:scipy.cluster.hierarchy.[y]->_copy_arrays_if_base_present([y])
A:scipy.cluster.hierarchy.Z->numpy.asarray(Z, order='c')
A:scipy.cluster.hierarchy.dm->scipy.spatial.distance.pdist(X, metric)
A:scipy.cluster.hierarchy.lvisited->numpy.zeros((2 * n,), dtype=bool)
A:scipy.cluster.hierarchy.rvisited->numpy.zeros((2 * n,), dtype=bool)
A:scipy.cluster.hierarchy._cnode_bare->ClusterNode(0)
A:scipy.cluster.hierarchy._cnode_type->type(ClusterNode)
A:scipy.cluster.hierarchy.d[i]->ClusterNode(i)
A:scipy.cluster.hierarchy.fi->int(Z[i, 0])
A:scipy.cluster.hierarchy.fj->int(Z[i, 1])
A:scipy.cluster.hierarchy.nd->ClusterNode(i + n, d[fi], d[fj], Z[i, 2])
A:scipy.cluster.hierarchy.X->numpy.asarray(X, order='c', dtype=np.double)
A:scipy.cluster.hierarchy.zz->numpy.zeros((n * (n - 1) / 2,), dtype=np.double)
A:scipy.cluster.hierarchy.Y->scipy.spatial.distance.pdist(X, metric=metric)
A:scipy.cluster.hierarchy.z->numpy.zeros((n * (n - 1) / 2,), dtype=np.double).mean()
A:scipy.cluster.hierarchy.[Z]->_copy_arrays_if_base_present([Z])
A:scipy.cluster.hierarchy.R->numpy.asarray(R, order='c')
A:scipy.cluster.hierarchy.Zpart->numpy.asarray(Z, order='c').copy()
A:scipy.cluster.hierarchy.CS->numpy.zeros((Zs[0],), dtype=np.double)
A:scipy.cluster.hierarchy.ZP->Z[:, 0:3].copy()
A:scipy.cluster.hierarchy.chosen->set([])
A:scipy.cluster.hierarchy.must_chosen->set(range(0, 2 * n - 2))
A:scipy.cluster.hierarchy.T->numpy.asarray(T, order='c')
A:scipy.cluster.hierarchy.[R]->_copy_arrays_if_base_present([R])
A:scipy.cluster.hierarchy.[monocrit]->_copy_arrays_if_base_present([monocrit])
A:scipy.cluster.hierarchy.ML->numpy.zeros((n,), dtype='i')
A:scipy.cluster.hierarchy._dtextsortedkeys->list(_dtextsizes.keys())
A:scipy.cluster.hierarchy._drotationsortedkeys->list(_drotation.keys())
A:scipy.cluster.hierarchy.seen_before->set([])
A:scipy.cluster.hierarchy.axis->matplotlib.pylab.gca()
A:scipy.cluster.hierarchy.ivticks->numpy.arange(5, len(ivl) * 10 + 5, 10)
A:scipy.cluster.hierarchy.lbls->matplotlib.pylab.gca().get_yticklabels()
A:scipy.cluster.hierarchy.colors_used->_remove_dups(color_list)
A:scipy.cluster.hierarchy.coll->matplotlib.collections.LineCollection(color_to_lines[color], colors=(color,))
A:scipy.cluster.hierarchy.e->matplotlib.patches.Ellipse((x, y), width=1.0, height=dvw / 100)
A:scipy.cluster.hierarchy.p->int(p)
A:scipy.cluster.hierarchy.mh->max(Z[:, 2])
A:scipy.cluster.hierarchy.aa->int(Z[i - n, 0])
A:scipy.cluster.hierarchy.ab->int(Z[i - n, 1])
A:scipy.cluster.hierarchy.(uiva, uwa, uah, uamd)->_dendrogram_calculate_info(Z=Z, p=p, truncate_mode=truncate_mode, color_threshold=color_threshold, get_leaves=get_leaves, orientation=orientation, labels=labels, count_sort=count_sort, distance_sort=distance_sort, show_leaf_counts=show_leaf_counts, i=ua, iv=iv, ivl=ivl, n=n, icoord_list=icoord_list, dcoord_list=dcoord_list, lvs=lvs, current_color=current_color, color_list=color_list, currently_below_threshold=currently_below_threshold, leaf_label_func=leaf_label_func, level=level + 1, contraction_marks=contraction_marks, link_color_func=link_color_func)
A:scipy.cluster.hierarchy.(uivb, uwb, ubh, ubmd)->_dendrogram_calculate_info(Z=Z, p=p, truncate_mode=truncate_mode, color_threshold=color_threshold, get_leaves=get_leaves, orientation=orientation, labels=labels, count_sort=count_sort, distance_sort=distance_sort, show_leaf_counts=show_leaf_counts, i=ub, iv=iv + uwa, ivl=ivl, n=n, icoord_list=icoord_list, dcoord_list=dcoord_list, lvs=lvs, current_color=current_color, color_list=color_list, currently_below_threshold=currently_below_threshold, leaf_label_func=leaf_label_func, level=level + 1, contraction_marks=contraction_marks, link_color_func=link_color_func)
A:scipy.cluster.hierarchy.max_dist->max(uamd, ubmd, h)
A:scipy.cluster.hierarchy.v->link_color_func(int(i))
A:scipy.cluster.hierarchy.T1->numpy.asarray(T1, order='c')
A:scipy.cluster.hierarchy.T2->numpy.asarray(T2, order='c')
A:scipy.cluster.hierarchy.MD->numpy.zeros((n - 1,))
A:scipy.cluster.hierarchy.MI->numpy.zeros((n - 1,))
A:scipy.cluster.hierarchy.[Z, R]->_copy_arrays_if_base_present([Z, R])
A:scipy.cluster.hierarchy.MR->numpy.zeros((n - 1,))
A:scipy.cluster.hierarchy.Cl->numpy.unique(T)
A:scipy.cluster.hierarchy.kk->len(Cl)
A:scipy.cluster.hierarchy.L->numpy.zeros((kk,), dtype='i')
A:scipy.cluster.hierarchy.M->numpy.zeros((kk,), dtype='i')
A:scipy.cluster.hierarchy.[Z, T]->_copy_arrays_if_base_present([Z, T])
A:scipy.cluster.hierarchy.s->_hierarchy_wrap.leaders_wrap(Z, T, L, M, int(kk), int(n))
A:scipy.cluster.hierarchy.tr->to_tree(Z)
A:scipy.cluster.hierarchy.left->to_tree(Z).get_left()
A:scipy.cluster.hierarchy.right->to_tree(Z).get_right()
A:scipy.cluster.hierarchy.lfid->_leader_identify(left, T)
A:scipy.cluster.hierarchy.rfid->_leader_identify(right, T)
scipy.cluster.hierarchy.ClusterNode(self,id,left=None,right=None,dist=0,count=1)
scipy.cluster.hierarchy.ClusterNode.__init__(self,id,left=None,right=None,dist=0,count=1)
scipy.cluster.hierarchy.ClusterNode.get_count(self)
scipy.cluster.hierarchy.ClusterNode.get_id(self)
scipy.cluster.hierarchy.ClusterNode.get_left(self)
scipy.cluster.hierarchy.ClusterNode.get_right(self)
scipy.cluster.hierarchy.ClusterNode.is_leaf(self)
scipy.cluster.hierarchy.ClusterNode.pre_order(self,func=lambdax:x.id)
scipy.cluster.hierarchy._append_contraction_marks(Z,iv,i,n,contraction_marks)
scipy.cluster.hierarchy._append_contraction_marks_sub(Z,iv,i,n,contraction_marks)
scipy.cluster.hierarchy._append_nonsingleton_leaf_node(Z,p,n,level,lvs,ivl,leaf_label_func,i,labels,show_leaf_counts)
scipy.cluster.hierarchy._append_singleton_leaf_node(Z,p,n,level,lvs,ivl,leaf_label_func,i,labels)
scipy.cluster.hierarchy._check_hierarchy_not_all_clusters_used(Z)
scipy.cluster.hierarchy._check_hierarchy_uses_cluster_before_formed(Z)
scipy.cluster.hierarchy._check_hierarchy_uses_cluster_more_than_once(Z)
scipy.cluster.hierarchy._convert_to_bool(X)
scipy.cluster.hierarchy._convert_to_double(X)
scipy.cluster.hierarchy._copy_array_if_base_present(a)
scipy.cluster.hierarchy._copy_arrays_if_base_present(T)
scipy.cluster.hierarchy._dendrogram_calculate_info(Z,p,truncate_mode,color_threshold=np.inf,get_leaves=True,orientation='top',labels=None,count_sort=False,distance_sort=False,show_leaf_counts=False,i=-1,iv=0.0,ivl=[],n=0,icoord_list=[],dcoord_list=[],lvs=None,mhr=False,current_color=[],color_list=[],currently_below_threshold=[],leaf_label_func=None,level=0,contraction_marks=None,link_color_func=None)
scipy.cluster.hierarchy._get_tick_rotation(p)
scipy.cluster.hierarchy._get_tick_text_size(p)
scipy.cluster.hierarchy._leader_identify(tr,T)
scipy.cluster.hierarchy._leaders_test(Z,T)
scipy.cluster.hierarchy._leaders_test_recurs_mark(tr,T)
scipy.cluster.hierarchy._plot_dendrogram(icoords,dcoords,ivl,p,n,mh,orientation,no_labels,color_list,leaf_font_size=None,leaf_rotation=None,contraction_marks=None)
scipy.cluster.hierarchy._randdm(pnts)
scipy.cluster.hierarchy._remove_dups(L)
scipy.cluster.hierarchy._warning(s)
scipy.cluster.hierarchy.average(y)
scipy.cluster.hierarchy.centroid(y)
scipy.cluster.hierarchy.complete(y)
scipy.cluster.hierarchy.cophenet(Z,Y=None)
scipy.cluster.hierarchy.correspond(Z,Y)
scipy.cluster.hierarchy.dendrogram(Z,p=30,truncate_mode=None,color_threshold=None,get_leaves=True,orientation='top',labels=None,count_sort=False,distance_sort=False,show_leaf_counts=True,no_plot=False,no_labels=False,color_list=None,leaf_font_size=None,leaf_rotation=None,leaf_label_func=None,no_leaves=False,show_contracted=False,link_color_func=None)
scipy.cluster.hierarchy.fcluster(Z,t,criterion='inconsistent',depth=2,R=None,monocrit=None)
scipy.cluster.hierarchy.fclusterdata(X,t,criterion='inconsistent',metric='euclidean',depth=2,method='single',R=None)
scipy.cluster.hierarchy.from_mlab_linkage(Z)
scipy.cluster.hierarchy.inconsistent(Z,d=2)
scipy.cluster.hierarchy.is_isomorphic(T1,T2)
scipy.cluster.hierarchy.is_monotonic(Z)
scipy.cluster.hierarchy.is_valid_im(R,warning=False,throw=False,name=None)
scipy.cluster.hierarchy.is_valid_linkage(Z,warning=False,throw=False,name=None)
scipy.cluster.hierarchy.leaders(Z,T)
scipy.cluster.hierarchy.leaves_list(Z)
scipy.cluster.hierarchy.linkage(y,method='single',metric='euclidean')
scipy.cluster.hierarchy.maxRstat(Z,R,i)
scipy.cluster.hierarchy.maxdists(Z)
scipy.cluster.hierarchy.maxinconsts(Z,R)
scipy.cluster.hierarchy.median(y)
scipy.cluster.hierarchy.num_obs_linkage(Z)
scipy.cluster.hierarchy.set_link_color_palette(palette)
scipy.cluster.hierarchy.single(y)
scipy.cluster.hierarchy.to_mlab_linkage(Z)
scipy.cluster.hierarchy.to_tree(Z,rd=False)
scipy.cluster.hierarchy.ward(y)
scipy.cluster.hierarchy.weighted(y)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/cluster/vq.py----------------------------------------
A:scipy.cluster.vq.std_dev->std(obs, axis=0)
A:scipy.cluster.vq.ct->common_type(obs, code_book)
A:scipy.cluster.vq.c_obs->obs.astype(ct)
A:scipy.cluster.vq.c_code_book->take(code_book, has_members, 0).astype(ct)
A:scipy.cluster.vq.results->py_vq(obs, code_book)
A:scipy.cluster.vq.(n, d)->shape(obs)
A:scipy.cluster.vq.code->argmin(dist, 0)
A:scipy.cluster.vq.min_dist->numpy.minimum.reduce(dist, 0)
A:scipy.cluster.vq.dist->sqrt(np.sum(diff * diff, -1))
A:scipy.cluster.vq.code[i]->argmin(dist)
A:scipy.cluster.vq.dist[:, i]->numpy.sum(obs - code_book[i])
A:scipy.cluster.vq.code_book->take(code_book, has_members, 0)
A:scipy.cluster.vq.(obs_code, distort)->vq(obs, code_book)
A:scipy.cluster.vq.cell_members->compress(equal(obs_code, i), obs, 0)
A:scipy.cluster.vq.code_book[i]->mean(cell_members, 0)
A:scipy.cluster.vq.result->_kmeans(obs, guess, thresh=thresh)
A:scipy.cluster.vq.guess->take(obs, randint(0, No, k), 0)
A:scipy.cluster.vq.(book, dist)->_kmeans(obs, guess, thresh=thresh)
A:scipy.cluster.vq.p->numpy.random.permutation(n)
A:scipy.cluster.vq.x->numpy.random.randn(k, mu.size)
A:scipy.cluster.vq.mu->numpy.mean(data, 0)
A:scipy.cluster.vq.cov->numpy.atleast_2d(np.cov(data, rowvar=0))
A:scipy.cluster.vq.nd->numpy.ndim(data)
A:scipy.cluster.vq.nc->int(k)
A:scipy.cluster.vq.clusters->init(data, k)
A:scipy.cluster.vq.mbs->numpy.where(label == j)
A:scipy.cluster.vq.code[j]->numpy.mean(data[mbs], axis=0)
scipy.cluster.vq.ClusterError(Exception)
scipy.cluster.vq._kmeans(obs,guess,thresh=1e-05)
scipy.cluster.vq._kmeans2(data,code,niter,nc,missing)
scipy.cluster.vq._kpoints(data,k)
scipy.cluster.vq._krandinit(data,k)
scipy.cluster.vq._missing_raise()
scipy.cluster.vq._missing_warn()
scipy.cluster.vq._py_vq_1d(obs,code_book)
scipy.cluster.vq.kmeans(obs,k_or_guess,iter=20,thresh=1e-05)
scipy.cluster.vq.kmeans2(data,k,iter=10,thresh=1e-05,minit='random',missing='warn')
scipy.cluster.vq.py_vq(obs,code_book)
scipy.cluster.vq.py_vq2(obs,code_book)
scipy.cluster.vq.vq(obs,code_book)
scipy.cluster.vq.whiten(obs)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/cluster/setupscons.py----------------------------------------
A:scipy.cluster.setupscons.config->Configuration('cluster', parent_package, top_path)
scipy.cluster.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/cluster/setup.py----------------------------------------
A:scipy.cluster.setup.config->Configuration('cluster', parent_package, top_path)
scipy.cluster.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/cluster/tests/test_vq.py----------------------------------------
A:scipy.cluster.tests.test_vq.DATAFILE1->os.path.join(os.path.dirname(__file__), 'data.txt')
A:scipy.cluster.tests.test_vq.X->numpy.array([[3.0, 3], [4, 3], [4, 2], [9, 2], [5, 1], [6, 2], [9, 4], [5, 2], [5, 4], [7, 4], [6, 5]])
A:scipy.cluster.tests.test_vq.CODET1->numpy.array([[3.0, 3.0], [6.2, 4.0], [5.8, 1.8]])
A:scipy.cluster.tests.test_vq.CODET2->numpy.array([[11.0 / 3, 8.0 / 3], [6.75, 4.25], [6.25, 1.75]])
A:scipy.cluster.tests.test_vq.LABEL1->numpy.array([0, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1])
A:scipy.cluster.tests.test_vq.initc->numpy.concatenate([[X[0]], [X[1]], [X[2]]])
A:scipy.cluster.tests.test_vq.code->numpy.concatenate([[X[0]], [X[1]], [X[2]]]).copy()
A:scipy.cluster.tests.test_vq.(label1, dist)->scipy.cluster._vq.vq(X, initc)
A:scipy.cluster.tests.test_vq.(tlabel1, tdist)->vq(X, initc)
A:scipy.cluster.tests.test_vq.(a, b)->scipy.cluster._vq.vq(data, initc)
A:scipy.cluster.tests.test_vq.(ta, tb)->py_vq(data[:, np.newaxis], initc[:, np.newaxis])
A:scipy.cluster.tests.test_vq.a->numpy.array([1, 2])
A:scipy.cluster.tests.test_vq.b->numpy.array([1, 2]).astype(float)
A:scipy.cluster.tests.test_vq.m1->numpy.random.randn(d)
A:scipy.cluster.tests.test_vq.m2->numpy.random.randn(d)
A:scipy.cluster.tests.test_vq.data->data.reshape((200, 2)).reshape((200, 2))
A:scipy.cluster.tests.test_vq.res->kmeans2(data, initk, missing='warn')
A:scipy.cluster.tests.test_vq.initk->numpy.array([[-1.8127404, -0.67128041], [2.04621601, 0.07401111], [-2.31149087, -0.05160469]])
A:scipy.cluster.tests.test_vq.warn_ctx->WarningManager()
A:scipy.cluster.tests.test_vq.code1->kmeans2(data1, 2, iter=1)
scipy.cluster.tests.test_vq.TestKMean(TestCase)
scipy.cluster.tests.test_vq.TestKMean.test_kmeans2_empty(self)
scipy.cluster.tests.test_vq.TestKMean.test_kmeans2_init(self)
scipy.cluster.tests.test_vq.TestKMean.test_kmeans2_rank1(self)
scipy.cluster.tests.test_vq.TestKMean.test_kmeans2_rank1_2(self)
scipy.cluster.tests.test_vq.TestKMean.test_kmeans2_simple(self)
scipy.cluster.tests.test_vq.TestKMean.test_kmeans_0k(self)
scipy.cluster.tests.test_vq.TestKMean.test_kmeans_lost_cluster(self)
scipy.cluster.tests.test_vq.TestKMean.test_kmeans_simple(self)
scipy.cluster.tests.test_vq.TestKMean.test_large_features(self)
scipy.cluster.tests.test_vq.TestVq(TestCase)
scipy.cluster.tests.test_vq.TestVq.test__vq_sametype(self)
scipy.cluster.tests.test_vq.TestVq.test_py_vq(self)
scipy.cluster.tests.test_vq.TestVq.test_py_vq2(self)
scipy.cluster.tests.test_vq.TestVq.test_vq(self)
scipy.cluster.tests.test_vq.TestVq.test_vq_1d(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/cluster/tests/test_hierarchy.py----------------------------------------
A:scipy.cluster.tests.test_hierarchy._tdist->numpy.array([[0, 662, 877, 255, 412, 996], [662, 0, 295, 468, 268, 400], [877, 295, 0, 754, 564, 138], [255, 468, 754, 0, 219, 869], [412, 268, 564, 219, 0, 669], [996, 400, 138, 869, 669, 0]], dtype='double')
A:scipy.cluster.tests.test_hierarchy._ytdist->squareform(_tdist)
A:scipy.cluster.tests.test_hierarchy.name->fn.replace('.txt', '').replace('-ml', '')
A:scipy.cluster.tests.test_hierarchy.fqfn->os.path.join(os.path.dirname(__file__), fn)
A:scipy.cluster.tests.test_hierarchy.eo[name]->numpy.loadtxt(fqfn)
A:scipy.cluster.tests.test_hierarchy.y->numpy.random.rand(i * (i - 1) // 2)
A:scipy.cluster.tests.test_hierarchy.Z->linkage(_ytdist, 'single')
A:scipy.cluster.tests.test_hierarchy.expectedZ->from_mlab_linkage(Zmlab)
A:scipy.cluster.tests.test_hierarchy.Y->pdist(X)
A:scipy.cluster.tests.test_hierarchy.R->dendrogram(Z, no_plot=True)
A:scipy.cluster.tests.test_hierarchy.expectedM->numpy.array([268, 295, 255, 255, 295, 295, 268, 268, 295, 295, 295, 138, 219, 295, 295])
A:scipy.cluster.tests.test_hierarchy.M->cophenet(Z)
A:scipy.cluster.tests.test_hierarchy.(c, M)->cophenet(Z, _ytdist)
A:scipy.cluster.tests.test_hierarchy.X->numpy.random.rand(n, 4)
A:scipy.cluster.tests.test_hierarchy.expectedZP->numpy.asarray([[1, 2, 3]])
A:scipy.cluster.tests.test_hierarchy.ZP->to_mlab_linkage(Z)
A:scipy.cluster.tests.test_hierarchy.expectedZS->numpy.array([[2.0, 5.0, 138.0, 2.0], [3.0, 4.0, 219.0, 2.0], [0.0, 7.0, 255.0, 3.0], [1.0, 8.0, 268.0, 4.0], [6.0, 9.0, 295.0, 6.0]], dtype=np.double)
A:scipy.cluster.tests.test_hierarchy.ZS->from_mlab_linkage(Z)
A:scipy.cluster.tests.test_hierarchy.expectedZM->numpy.asarray([[3, 6, 138], [4, 5, 219], [1, 8, 255], [2, 9, 268], [7, 10, 295]])
A:scipy.cluster.tests.test_hierarchy.ZM->to_mlab_linkage(Z)
A:scipy.cluster.tests.test_hierarchy.expectedT->numpy.int_(eo['fclusterdata-maxclusts-4'])
A:scipy.cluster.tests.test_hierarchy.T->fcluster(Z, criterion='maxclust', t=3)
A:scipy.cluster.tests.test_hierarchy.L->leaders(Z, T)
A:scipy.cluster.tests.test_hierarchy.a->numpy.int_(np.random.rand(nobs) * nclusters)
A:scipy.cluster.tests.test_hierarchy.b->numpy.zeros(a.size, dtype=np.int_)
A:scipy.cluster.tests.test_hierarchy.P->numpy.random.permutation(nclusters)
A:scipy.cluster.tests.test_hierarchy.Q->numpy.random.permutation(nobs)
A:scipy.cluster.tests.test_hierarchy.node->to_tree(Z)
A:scipy.cluster.tests.test_hierarchy.y2->numpy.random.rand(j * (j - 1) // 2)
A:scipy.cluster.tests.test_hierarchy.Z2->linkage(y2)
A:scipy.cluster.tests.test_hierarchy.MD->maxRstat(Z, R, 3)
A:scipy.cluster.tests.test_hierarchy.expectedMD->calculate_maximum_inconsistencies(Z, R, 3)
A:scipy.cluster.tests.test_hierarchy.B->numpy.zeros((n - 1,))
A:scipy.cluster.tests.test_hierarchy.q->numpy.zeros((3,))
A:scipy.cluster.tests.test_hierarchy.B[i]->numpy.zeros((3,)).max()
scipy.cluster.tests.test_hierarchy.TestCopheneticDistance(TestCase)
scipy.cluster.tests.test_hierarchy.TestCopheneticDistance.test_linkage_cophenet_tdist_Z(self)
scipy.cluster.tests.test_hierarchy.TestCopheneticDistance.test_linkage_cophenet_tdist_Z_Y(self)
scipy.cluster.tests.test_hierarchy.TestCorrespond(TestCase)
scipy.cluster.tests.test_hierarchy.TestCorrespond.test_correspond_2_and_up(self)
scipy.cluster.tests.test_hierarchy.TestCorrespond.test_correspond_4_and_up(self)
scipy.cluster.tests.test_hierarchy.TestCorrespond.test_correspond_4_and_up_2(self)
scipy.cluster.tests.test_hierarchy.TestCorrespond.test_correspond_empty(self)
scipy.cluster.tests.test_hierarchy.TestCorrespond.test_num_obs_linkage_multi_matrix(self)
scipy.cluster.tests.test_hierarchy.TestDendrogram(TestCase)
scipy.cluster.tests.test_hierarchy.TestDendrogram.test_dendrogram_single_linkage_tdist(self)
scipy.cluster.tests.test_hierarchy.TestFcluster(TestCase)
scipy.cluster.tests.test_hierarchy.TestFcluster.test_fcluster_maxclusts_2(self)
scipy.cluster.tests.test_hierarchy.TestFcluster.test_fcluster_maxclusts_3(self)
scipy.cluster.tests.test_hierarchy.TestFcluster.test_fcluster_maxclusts_4(self)
scipy.cluster.tests.test_hierarchy.TestFcluster.test_fclusterdata_maxclusts_2(self)
scipy.cluster.tests.test_hierarchy.TestFcluster.test_fclusterdata_maxclusts_3(self)
scipy.cluster.tests.test_hierarchy.TestFcluster.test_fclusterdata_maxclusts_4(self)
scipy.cluster.tests.test_hierarchy.TestFromMLabLinkage(TestCase)
scipy.cluster.tests.test_hierarchy.TestFromMLabLinkage.test_from_mlab_linkage_empty(self)
scipy.cluster.tests.test_hierarchy.TestFromMLabLinkage.test_from_mlab_linkage_multiple_rows(self)
scipy.cluster.tests.test_hierarchy.TestFromMLabLinkage.test_from_mlab_linkage_single_row(self)
scipy.cluster.tests.test_hierarchy.TestInconsistent(TestCase)
scipy.cluster.tests.test_hierarchy.TestInconsistent.test_complete_inconsistent_tdist_1(self)
scipy.cluster.tests.test_hierarchy.TestInconsistent.test_complete_inconsistent_tdist_2(self)
scipy.cluster.tests.test_hierarchy.TestInconsistent.test_complete_inconsistent_tdist_3(self)
scipy.cluster.tests.test_hierarchy.TestInconsistent.test_complete_inconsistent_tdist_4(self)
scipy.cluster.tests.test_hierarchy.TestInconsistent.test_single_inconsistent_Q_1(self)
scipy.cluster.tests.test_hierarchy.TestInconsistent.test_single_inconsistent_Q_2(self)
scipy.cluster.tests.test_hierarchy.TestInconsistent.test_single_inconsistent_Q_3(self)
scipy.cluster.tests.test_hierarchy.TestInconsistent.test_single_inconsistent_Q_4(self)
scipy.cluster.tests.test_hierarchy.TestInconsistent.test_single_inconsistent_tdist_1(self)
scipy.cluster.tests.test_hierarchy.TestInconsistent.test_single_inconsistent_tdist_2(self)
scipy.cluster.tests.test_hierarchy.TestInconsistent.test_single_inconsistent_tdist_3(self)
scipy.cluster.tests.test_hierarchy.TestInconsistent.test_single_inconsistent_tdist_4(self)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic(TestCase)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.help_is_isomorphic_randperm(self,nobs,nclusters,noniso=False,nerrors=0)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.test_is_isomorphic_1(self)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.test_is_isomorphic_2(self)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.test_is_isomorphic_3(self)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.test_is_isomorphic_4A(self)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.test_is_isomorphic_4B(self)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.test_is_isomorphic_4C(self)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.test_is_isomorphic_5A(self)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.test_is_isomorphic_5B(self)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.test_is_isomorphic_5C(self)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.test_is_isomorphic_6A(self)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.test_is_isomorphic_6B(self)
scipy.cluster.tests.test_hierarchy.TestIsIsomorphic.test_is_isomorphic_6C(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic(TestCase)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_1x4(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_2x4_F(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_2x4_T(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_3x4_F1(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_3x4_F2(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_3x4_F3(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_3x4_T(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_empty(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_iris_linkage(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_tdist_linkage1(self)
scipy.cluster.tests.test_hierarchy.TestIsMonotonic.test_is_monotonic_tdist_linkage2(self)
scipy.cluster.tests.test_hierarchy.TestIsValidInconsistent(TestCase)
scipy.cluster.tests.test_hierarchy.TestIsValidInconsistent.test_is_valid_im_1x4(self)
scipy.cluster.tests.test_hierarchy.TestIsValidInconsistent.test_is_valid_im_2x4(self)
scipy.cluster.tests.test_hierarchy.TestIsValidInconsistent.test_is_valid_im_3_columns(self)
scipy.cluster.tests.test_hierarchy.TestIsValidInconsistent.test_is_valid_im_4_and_up(self)
scipy.cluster.tests.test_hierarchy.TestIsValidInconsistent.test_is_valid_im_4_and_up_neg_dist(self)
scipy.cluster.tests.test_hierarchy.TestIsValidInconsistent.test_is_valid_im_4_and_up_neg_index_left(self)
scipy.cluster.tests.test_hierarchy.TestIsValidInconsistent.test_is_valid_im_4_and_up_neg_index_right(self)
scipy.cluster.tests.test_hierarchy.TestIsValidInconsistent.test_is_valid_im_5_columns(self)
scipy.cluster.tests.test_hierarchy.TestIsValidInconsistent.test_is_valid_im_empty(self)
scipy.cluster.tests.test_hierarchy.TestIsValidInconsistent.test_is_valid_im_int_type(self)
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage(TestCase)
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage.test_is_valid_linkage_1x4(self)
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage.test_is_valid_linkage_2x4(self)
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage.test_is_valid_linkage_3_columns(self)
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage.test_is_valid_linkage_4_and_up(self)
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage.test_is_valid_linkage_4_and_up_neg_counts(self)
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage.test_is_valid_linkage_4_and_up_neg_dist(self)
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage.test_is_valid_linkage_4_and_up_neg_index_left(self)
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage.test_is_valid_linkage_4_and_up_neg_index_right(self)
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage.test_is_valid_linkage_5_columns(self)
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage.test_is_valid_linkage_empty(self)
scipy.cluster.tests.test_hierarchy.TestIsValidLinkage.test_is_valid_linkage_int_type(self)
scipy.cluster.tests.test_hierarchy.TestLeaders(TestCase)
scipy.cluster.tests.test_hierarchy.TestLeaders.test_leaders_single(self)
scipy.cluster.tests.test_hierarchy.TestLeavesList(TestCase)
scipy.cluster.tests.test_hierarchy.TestLeavesList.test_leaves_list_1x4(self)
scipy.cluster.tests.test_hierarchy.TestLeavesList.test_leaves_list_2x4(self)
scipy.cluster.tests.test_hierarchy.TestLeavesList.test_leaves_list_iris_average(self)
scipy.cluster.tests.test_hierarchy.TestLeavesList.test_leaves_list_iris_centroid(self)
scipy.cluster.tests.test_hierarchy.TestLeavesList.test_leaves_list_iris_complete(self)
scipy.cluster.tests.test_hierarchy.TestLeavesList.test_leaves_list_iris_median(self)
scipy.cluster.tests.test_hierarchy.TestLeavesList.test_leaves_list_iris_single(self)
scipy.cluster.tests.test_hierarchy.TestLeavesList.test_leaves_list_iris_ward(self)
scipy.cluster.tests.test_hierarchy.TestLinkage(TestCase)
scipy.cluster.tests.test_hierarchy.TestLinkage.test_linkage_average_tdist(self)
scipy.cluster.tests.test_hierarchy.TestLinkage.test_linkage_centroid_q(self)
scipy.cluster.tests.test_hierarchy.TestLinkage.test_linkage_complete_q(self)
scipy.cluster.tests.test_hierarchy.TestLinkage.test_linkage_complete_tdist(self)
scipy.cluster.tests.test_hierarchy.TestLinkage.test_linkage_empty_distance_matrix(self)
scipy.cluster.tests.test_hierarchy.TestLinkage.test_linkage_single_q(self)
scipy.cluster.tests.test_hierarchy.TestLinkage.test_linkage_single_tdist(self)
scipy.cluster.tests.test_hierarchy.TestLinkage.test_linkage_weighted_q(self)
scipy.cluster.tests.test_hierarchy.TestLinkage.test_linkage_weighted_tdist(self)
scipy.cluster.tests.test_hierarchy.TestMaxDists(TestCase)
scipy.cluster.tests.test_hierarchy.TestMaxDists.test_maxdists_Q_linkage_centroid(self)
scipy.cluster.tests.test_hierarchy.TestMaxDists.test_maxdists_Q_linkage_complete(self)
scipy.cluster.tests.test_hierarchy.TestMaxDists.test_maxdists_Q_linkage_median(self)
scipy.cluster.tests.test_hierarchy.TestMaxDists.test_maxdists_Q_linkage_single(self)
scipy.cluster.tests.test_hierarchy.TestMaxDists.test_maxdists_Q_linkage_ward(self)
scipy.cluster.tests.test_hierarchy.TestMaxDists.test_maxdists_empty_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxDists.test_maxdists_one_cluster_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxInconsts(TestCase)
scipy.cluster.tests.test_hierarchy.TestMaxInconsts.test_maxinconsts_Q_linkage_centroid(self)
scipy.cluster.tests.test_hierarchy.TestMaxInconsts.test_maxinconsts_Q_linkage_complete(self)
scipy.cluster.tests.test_hierarchy.TestMaxInconsts.test_maxinconsts_Q_linkage_median(self)
scipy.cluster.tests.test_hierarchy.TestMaxInconsts.test_maxinconsts_Q_linkage_single(self)
scipy.cluster.tests.test_hierarchy.TestMaxInconsts.test_maxinconsts_Q_linkage_ward(self)
scipy.cluster.tests.test_hierarchy.TestMaxInconsts.test_maxinconsts_difrow_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxInconsts.test_maxinconsts_empty_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxInconsts.test_maxinconsts_one_cluster_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat(TestCase)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_0_Q_linkage_centroid(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_0_Q_linkage_complete(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_0_Q_linkage_median(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_0_Q_linkage_single(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_0_Q_linkage_ward(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_0_difrow_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_0_empty_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_0_one_cluster_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_1_Q_linkage_centroid(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_1_Q_linkage_complete(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_1_Q_linkage_median(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_1_Q_linkage_single(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_1_Q_linkage_ward(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_1_difrow_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_1_empty_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_1_one_cluster_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_2_Q_linkage_centroid(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_2_Q_linkage_complete(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_2_Q_linkage_median(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_2_Q_linkage_single(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_2_Q_linkage_ward(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_2_difrow_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_2_empty_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_2_one_cluster_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_3_Q_linkage_centroid(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_3_Q_linkage_complete(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_3_Q_linkage_median(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_3_Q_linkage_single(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_3_Q_linkage_ward(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_3_difrow_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_3_empty_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_3_one_cluster_linkage(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_float_index(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_neg_index(self)
scipy.cluster.tests.test_hierarchy.TestMaxRStat.test_maxRstat_oob_pos_index(self)
scipy.cluster.tests.test_hierarchy.TestNumObsLinkage(TestCase)
scipy.cluster.tests.test_hierarchy.TestNumObsLinkage.test_num_obs_linkage_1x4(self)
scipy.cluster.tests.test_hierarchy.TestNumObsLinkage.test_num_obs_linkage_2x4(self)
scipy.cluster.tests.test_hierarchy.TestNumObsLinkage.test_num_obs_linkage_4_and_up(self)
scipy.cluster.tests.test_hierarchy.TestNumObsLinkage.test_num_obs_linkage_empty(self)
scipy.cluster.tests.test_hierarchy.TestToMLabLinkage(TestCase)
scipy.cluster.tests.test_hierarchy.TestToMLabLinkage.test_from_mlab_linkage_multiple_rows(self)
scipy.cluster.tests.test_hierarchy.TestToMLabLinkage.test_to_mlab_linkage_empty(self)
scipy.cluster.tests.test_hierarchy.TestToMLabLinkage.test_to_mlab_linkage_single_row(self)
scipy.cluster.tests.test_hierarchy.calculate_maximum_distances(Z)
scipy.cluster.tests.test_hierarchy.calculate_maximum_inconsistencies(Z,R,k=3)
scipy.cluster.tests.test_hierarchy.load_testing_files()
scipy.cluster.tests.test_hierarchy.within_tol(a,b,tol)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/cluster/tests/vq_test.py----------------------------------------
A:scipy.cluster.tests.vq_test.t1->time.time()
A:scipy.cluster.tests.vq_test.(codes1, dist1)->scipy.cluster.vq.vq(float_obs, float_code)
A:scipy.cluster.tests.vq_test.t2->time.time()
A:scipy.cluster.tests.vq_test.float_obs->all_data.astype(np.float32)
A:scipy.cluster.tests.vq_test.float_code->numpy.random.normal(0, 1, (Ncodes, Nfeatures)).astype(np.float32)
A:scipy.cluster.tests.vq_test.f->open(name, 'r')
A:scipy.cluster.tests.vq_test.code_book->numpy.random.normal(0, 1, (Ncodes, Nfeatures))
A:scipy.cluster.tests.vq_test.features->numpy.random.normal(0, 1, (Nobs, Nfeatures))
A:scipy.cluster.tests.vq_test.(codes, dist)->python_vq(features, code_book)
scipy.cluster.tests.vq_test.main()
scipy.cluster.tests.vq_test.python_vq(all_data,code_book)
scipy.cluster.tests.vq_test.read_data(name)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/netcdf.py----------------------------------------
A:scipy.io.netcdf.self.fp->open(self.filename, '%sb' % mode)
A:scipy.io.netcdf.shape->property(shape)
A:scipy.io.netcdf.shape_->tuple([dim or 0 for dim in shape])
A:scipy.io.netcdf.type->dtype(type)
A:scipy.io.netcdf.data->fromstring(self.fp.read(a_size), dtype=dtype_)
A:scipy.io.netcdf.self.variables[name]->netcdf_variable(data, typecode, size, shape, dimensions, attributes)
A:scipy.io.netcdf.self.__dict__['_recs']->self._unpack_int()
A:scipy.io.netcdf.self.__dict__['_recsize']->sum([var._vsize for var in self.variables.values() if var.isrec])
A:scipy.io.netcdf.dimid->self._unpack_int()
A:scipy.io.netcdf.rec_vars->len([var for var in self.variables.values() if var.isrec])
A:scipy.io.netcdf.self.variables[name].__dict__['_begin']->self.fp.tell()
A:scipy.io.netcdf.the_beguine->self.fp.tell()
A:scipy.io.netcdf.pos0pos->self.fp.tell()
A:scipy.io.netcdf.rec->rec.byteswap().byteswap()
A:scipy.io.netcdf.values->values.rstrip(b'\x00').rstrip(b'\x00')
A:scipy.io.netcdf.magic->self.fp.read(3)
A:scipy.io.netcdf.header->self.fp.read(4)
A:scipy.io.netcdf.count->self._unpack_int()
A:scipy.io.netcdf.name->asstr(self._unpack_string())
A:scipy.io.netcdf.attributes[name]->self._read_values()
A:scipy.io.netcdf.(name, dimensions, shape, attributes, typecode, size, dtype_, begin_, vsize)->self._read_var()
A:scipy.io.netcdf.mm->mmap(self.fp.fileno(), begin + self._recs * self._recsize, access=ACCESS_READ)
A:scipy.io.netcdf.pos->self.fp.tell()
A:scipy.io.netcdf.rec_array->fromstring(self.fp.read(self._recs * self._recsize), dtype=dtypes)
A:scipy.io.netcdf.dims->self._unpack_int()
A:scipy.io.netcdf.dimensions->tuple(dimensions)
A:scipy.io.netcdf.attributes->self._read_att_array()
A:scipy.io.netcdf.nc_type->self.fp.read(4)
A:scipy.io.netcdf.vsize->self._unpack_int()
A:scipy.io.netcdf.begin->[self._unpack_int, self._unpack_int64][self.version_byte - 1]()
A:scipy.io.netcdf.n->self._unpack_int()
A:scipy.io.netcdf.s->self.fp.read(count).rstrip(b'\x00')
A:scipy.io.netcdf.isrec->property(isrec)
scipy.io.netcdf.netcdf_file(self,filename,mode='r',mmap=None,version=1)
scipy.io.netcdf.netcdf_file.__init__(self,filename,mode='r',mmap=None,version=1)
scipy.io.netcdf.netcdf_file.__setattr__(self,attr,value)
scipy.io.netcdf.netcdf_file._pack_begin(self,begin)
scipy.io.netcdf.netcdf_file._pack_int(self,value)
scipy.io.netcdf.netcdf_file._pack_int64(self,value)
scipy.io.netcdf.netcdf_file._pack_string(self,s)
scipy.io.netcdf.netcdf_file._read(self)
scipy.io.netcdf.netcdf_file._read_att_array(self)
scipy.io.netcdf.netcdf_file._read_dim_array(self)
scipy.io.netcdf.netcdf_file._read_gatt_array(self)
scipy.io.netcdf.netcdf_file._read_numrecs(self)
scipy.io.netcdf.netcdf_file._read_values(self)
scipy.io.netcdf.netcdf_file._read_var(self)
scipy.io.netcdf.netcdf_file._read_var_array(self)
scipy.io.netcdf.netcdf_file._unpack_int(self)
scipy.io.netcdf.netcdf_file._unpack_int64(self)
scipy.io.netcdf.netcdf_file._unpack_string(self)
scipy.io.netcdf.netcdf_file._write(self)
scipy.io.netcdf.netcdf_file._write_att_array(self,attributes)
scipy.io.netcdf.netcdf_file._write_dim_array(self)
scipy.io.netcdf.netcdf_file._write_gatt_array(self)
scipy.io.netcdf.netcdf_file._write_numrecs(self)
scipy.io.netcdf.netcdf_file._write_values(self,values)
scipy.io.netcdf.netcdf_file._write_var_array(self)
scipy.io.netcdf.netcdf_file._write_var_data(self,name)
scipy.io.netcdf.netcdf_file._write_var_metadata(self,name)
scipy.io.netcdf.netcdf_file.close(self)
scipy.io.netcdf.netcdf_file.createDimension(self,name,length)
scipy.io.netcdf.netcdf_file.createVariable(self,name,type,dimensions)
scipy.io.netcdf.netcdf_file.flush(self)
scipy.io.netcdf.netcdf_variable(self,data,typecode,size,shape,dimensions,attributes=None)
scipy.io.netcdf.netcdf_variable.__getitem__(self,index)
scipy.io.netcdf.netcdf_variable.__init__(self,data,typecode,size,shape,dimensions,attributes=None)
scipy.io.netcdf.netcdf_variable.__setattr__(self,attr,value)
scipy.io.netcdf.netcdf_variable.__setitem__(self,index,data)
scipy.io.netcdf.netcdf_variable.assignValue(self,value)
scipy.io.netcdf.netcdf_variable.getValue(self)
scipy.io.netcdf.netcdf_variable.isrec(self)
scipy.io.netcdf.netcdf_variable.itemsize(self)
scipy.io.netcdf.netcdf_variable.shape(self)
scipy.io.netcdf.netcdf_variable.typecode(self)
scipy.io.netcdf_file(self,filename,mode='r',mmap=None,version=1)
scipy.io.netcdf_file.__setattr__(self,attr,value)
scipy.io.netcdf_file._pack_begin(self,begin)
scipy.io.netcdf_file._pack_int(self,value)
scipy.io.netcdf_file._pack_int64(self,value)
scipy.io.netcdf_file._pack_string(self,s)
scipy.io.netcdf_file._read(self)
scipy.io.netcdf_file._read_att_array(self)
scipy.io.netcdf_file._read_dim_array(self)
scipy.io.netcdf_file._read_gatt_array(self)
scipy.io.netcdf_file._read_numrecs(self)
scipy.io.netcdf_file._read_values(self)
scipy.io.netcdf_file._read_var(self)
scipy.io.netcdf_file._read_var_array(self)
scipy.io.netcdf_file._unpack_int(self)
scipy.io.netcdf_file._unpack_int64(self)
scipy.io.netcdf_file._unpack_string(self)
scipy.io.netcdf_file._write(self)
scipy.io.netcdf_file._write_att_array(self,attributes)
scipy.io.netcdf_file._write_dim_array(self)
scipy.io.netcdf_file._write_gatt_array(self)
scipy.io.netcdf_file._write_numrecs(self)
scipy.io.netcdf_file._write_values(self,values)
scipy.io.netcdf_file._write_var_array(self)
scipy.io.netcdf_file._write_var_data(self,name)
scipy.io.netcdf_file._write_var_metadata(self,name)
scipy.io.netcdf_file.close(self)
scipy.io.netcdf_file.createDimension(self,name,length)
scipy.io.netcdf_file.createVariable(self,name,type,dimensions)
scipy.io.netcdf_file.flush(self)
scipy.io.netcdf_variable(self,data,typecode,size,shape,dimensions,attributes=None)
scipy.io.netcdf_variable.__getitem__(self,index)
scipy.io.netcdf_variable.__setattr__(self,attr,value)
scipy.io.netcdf_variable.__setitem__(self,index,data)
scipy.io.netcdf_variable.assignValue(self,value)
scipy.io.netcdf_variable.getValue(self)
scipy.io.netcdf_variable.isrec(self)
scipy.io.netcdf_variable.itemsize(self)
scipy.io.netcdf_variable.shape(self)
scipy.io.netcdf_variable.typecode(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/wavfile.py----------------------------------------
A:scipy.io.wavfile.res->struct.unpack(fmt + 'ihHIIHH', fid.read(20))
A:scipy.io.wavfile.data->data.byteswap().byteswap()
A:scipy.io.wavfile.start->open(filename, 'wb').tell()
A:scipy.io.wavfile.str1->open(filename, 'wb').read(4)
A:scipy.io.wavfile.str2->open(filename, 'wb').read(4)
A:scipy.io.wavfile.fid->open(filename, 'wb')
A:scipy.io.wavfile.fsize->_read_riff_chunk(fid)
A:scipy.io.wavfile.chunk_id->open(filename, 'wb').read(4)
A:scipy.io.wavfile.(size, comp, noc, rate, sbytes, ba, bits)->_read_fmt_chunk(fid)
A:scipy.io.wavfile.size->open(filename, 'wb').tell()
scipy.io.wavfile.WavFileWarning(UserWarning)
scipy.io.wavfile._read_data_chunk(fid,noc,bits,mmap=False)
scipy.io.wavfile._read_fmt_chunk(fid)
scipy.io.wavfile._read_riff_chunk(fid)
scipy.io.wavfile._skip_unknown_chunk(fid)
scipy.io.wavfile.read(file,mmap=False)
scipy.io.wavfile.write(filename,rate,data)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/setupscons.py----------------------------------------
A:scipy.io.setupscons.config->Configuration('io', parent_package, top_path, setup_name='setupscons.py')
scipy.io.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/mmio.py----------------------------------------
A:scipy.io.mmio.(source, close_it)->self._open(source)
A:scipy.io.mmio.line->open(filespec, mode).readline()
A:scipy.io.mmio.(rows, cols)->map(float, line)
A:scipy.io.mmio.(rows, cols, entries)->map(float, line)
A:scipy.io.mmio.stream->open(filespec, mode)
A:scipy.io.mmio.(stream, close_it)->self._open(target, 'wb')
A:scipy.io.mmio.(rows, cols, entries, format, field, symmetry)->self.__class__.info(stream)
A:scipy.io.mmio.dtype->self.DTYPES_BY_FIELD.get(field, None)
A:scipy.io.mmio.a->a.astype('D').astype('D')
A:scipy.io.mmio.aij->float(l[2])
A:scipy.io.mmio.a[j, i]->conj(aij)
A:scipy.io.mmio.l->open(filespec, mode).readline().split()
A:scipy.io.mmio.(i, j)->map(int, l[:2])
A:scipy.io.mmio.flat_data->flat_data.reshape(-1, 3).reshape(-1, 3)
A:scipy.io.mmio.I->concatenate((I, od_J))
A:scipy.io.mmio.J->concatenate((J, od_I))
A:scipy.io.mmio.V->concatenate((V, od_V))
A:scipy.io.mmio.od_V->od_V.conjugate().conjugate()
A:scipy.io.mmio.entries->a.astype('D').astype('D').getnnz()
A:scipy.io.mmio.symm->self._get_symmetry(a)
A:scipy.io.mmio.template->self._field_template(field, precision)
A:scipy.io.mmio.coo->a.astype('D').astype('D').tocoo()
A:scipy.io.mmio.t->time.time()
scipy.io.mminfo(source)
scipy.io.mmio.MMFile(self,**kwargs)
scipy.io.mmio.MMFile.__init__(self,**kwargs)
scipy.io.mmio.MMFile._field_template(field,precision)
scipy.io.mmio.MMFile._get_symmetry(a)
scipy.io.mmio.MMFile._init_attrs(self,**kwargs)
scipy.io.mmio.MMFile._open(filespec,mode='rb')
scipy.io.mmio.MMFile._parse_body(self,stream)
scipy.io.mmio.MMFile._parse_header(self,stream)
scipy.io.mmio.MMFile._validate_field(self,field)
scipy.io.mmio.MMFile._validate_format(self,format)
scipy.io.mmio.MMFile._validate_symmetry(self,symmetry)
scipy.io.mmio.MMFile._write(self,stream,a,comment='',field=None,precision=None)
scipy.io.mmio.MMFile.cols(self)
scipy.io.mmio.MMFile.entries(self)
scipy.io.mmio.MMFile.field(self)
scipy.io.mmio.MMFile.format(self)
scipy.io.mmio.MMFile.has_symmetry(self)
scipy.io.mmio.MMFile.info(self,source)
scipy.io.mmio.MMFile.read(self,source)
scipy.io.mmio.MMFile.reader()
scipy.io.mmio.MMFile.rows(self)
scipy.io.mmio.MMFile.symmetry(self)
scipy.io.mmio.MMFile.write(self,target,a,comment='',field=None,precision=None)
scipy.io.mmio.MMFile.writer()
scipy.io.mmio.mminfo(source)
scipy.io.mmio.mmread(source)
scipy.io.mmio.mmwrite(target,a,comment='',field=None,precision=None)
scipy.io.mmread(source)
scipy.io.mmwrite(target,a,comment='',field=None,precision=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/setup.py----------------------------------------
A:scipy.io.setup.config->Configuration('io', parent_package, top_path)
scipy.io.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/idl.py----------------------------------------
A:scipy.io.idl.pos->open(file_name, 'rb').tell()
A:scipy.io.idl.length->_read_long(f)
A:scipy.io.idl.chars->asstr(chars)
A:scipy.io.idl.string_data->_read_bytes(f, length)
A:scipy.io.idl.real->_read_float64(f)
A:scipy.io.idl.imag->_read_float64(f)
A:scipy.io.idl.structure->structure.reshape(dims).reshape(dims)
A:scipy.io.idl.structure[col['name']][i]->_read_data(f, dtype)
A:scipy.io.idl.nbytes->_read_int32(f)
A:scipy.io.idl.array->array.reshape(dims).reshape(dims)
A:scipy.io.idl.data->_read_data(f, dtype)
A:scipy.io.idl.recpos->open(file_name, 'rb').tell()
A:scipy.io.idl.record['rectype']->_read_long(f)
A:scipy.io.idl.nextrec->_read_uint32(f)
A:scipy.io.idl.record['varname']->_read_string(f)
A:scipy.io.idl.record['heap_index']->_read_long(f)
A:scipy.io.idl.rectypedesc->_read_typedesc(f)
A:scipy.io.idl.varstart->_read_long(f)
A:scipy.io.idl.record['data']->_read_data(f, dtype)
A:scipy.io.idl.record['date']->_read_string(f)
A:scipy.io.idl.record['user']->_read_string(f)
A:scipy.io.idl.record['host']->_read_string(f)
A:scipy.io.idl.record['format']->_read_long(f)
A:scipy.io.idl.record['arch']->_read_string(f)
A:scipy.io.idl.record['os']->_read_string(f)
A:scipy.io.idl.record['release']->_read_string(f)
A:scipy.io.idl.record['author']->_read_string(f)
A:scipy.io.idl.record['title']->_read_string(f)
A:scipy.io.idl.record['idcode']->_read_string(f)
A:scipy.io.idl.record['notice']->_read_string(f)
A:scipy.io.idl.record['nvalues']->_read_long(f)
A:scipy.io.idl.record['nvars']->_read_long(f)
A:scipy.io.idl.record['name']->_read_string(f)
A:scipy.io.idl.typedesc['typecode']->_read_long(f)
A:scipy.io.idl.typedesc['varflags']->_read_long(f)
A:scipy.io.idl.typedesc['array_desc']->_read_arraydesc(f)
A:scipy.io.idl.typedesc['struct_desc']->_read_structdesc(f)
A:scipy.io.idl.arraydesc['arrstart']->_read_long(f)
A:scipy.io.idl.arraydesc['nbytes']->_read_uint64(f)
A:scipy.io.idl.arraydesc['nelements']->_read_uint64(f)
A:scipy.io.idl.arraydesc['ndims']->_read_long(f)
A:scipy.io.idl.arraydesc['nmax']->_read_long(f)
A:scipy.io.idl.v->_read_long(f)
A:scipy.io.idl.structstart->_read_long(f)
A:scipy.io.idl.structdesc['name']->_read_string(f)
A:scipy.io.idl.predef->_read_long(f)
A:scipy.io.idl.structdesc['ntags']->_read_long(f)
A:scipy.io.idl.structdesc['nbytes']->_read_long(f)
A:scipy.io.idl.tag['name']->_read_string(f)
A:scipy.io.idl.structdesc['arrtable'][tag['name']]->_read_arraydesc(f)
A:scipy.io.idl.structdesc['structtable'][tag['name']]->_read_structdesc(f)
A:scipy.io.idl.structdesc['classname']->_read_string(f)
A:scipy.io.idl.structdesc['nsupclasses']->_read_long(f)
A:scipy.io.idl.tagdesc['offset']->_read_uint64(f)
A:scipy.io.idl.tagdesc['typecode']->_read_long(f)
A:scipy.io.idl.tagflags->_read_long(f)
A:scipy.io.idl.(replace, new)->_replace_heap(r['data'], heap)
A:scipy.io.idl.variables->AttrDict()
A:scipy.io.idl.f->open(file_name, 'rb')
A:scipy.io.idl.signature->_read_bytes(f, 2)
A:scipy.io.idl.recfmt->_read_bytes(f, 2)
A:scipy.io.idl.fout->tempfile.NamedTemporaryFile(suffix='.sav')
A:scipy.io.idl.rectype->_read_long(f)
A:scipy.io.idl.unknown->open(file_name, 'rb').read(4)
A:scipy.io.idl.rec_string->zlib.decompress(f.read(nextrec - pos))
A:scipy.io.idl.r->_read_record(f)
scipy.io.idl.AttrDict(self,init={})
scipy.io.idl.AttrDict.__getitem__(self,name)
scipy.io.idl.AttrDict.__init__(self,init={})
scipy.io.idl.AttrDict.__setitem__(self,key,value)
scipy.io.idl.ObjectPointer(Pointer)
scipy.io.idl.Pointer(self,index)
scipy.io.idl.Pointer.__init__(self,index)
scipy.io.idl._align_32(f)
scipy.io.idl._read_array(f,typecode,array_desc)
scipy.io.idl._read_arraydesc(f)
scipy.io.idl._read_byte(f)
scipy.io.idl._read_bytes(f,n)
scipy.io.idl._read_data(f,dtype)
scipy.io.idl._read_float32(f)
scipy.io.idl._read_float64(f)
scipy.io.idl._read_int16(f)
scipy.io.idl._read_int32(f)
scipy.io.idl._read_int64(f)
scipy.io.idl._read_long(f)
scipy.io.idl._read_record(f)
scipy.io.idl._read_string(f)
scipy.io.idl._read_string_data(f)
scipy.io.idl._read_structdesc(f)
scipy.io.idl._read_structure(f,array_desc,struct_desc)
scipy.io.idl._read_tagdesc(f)
scipy.io.idl._read_typedesc(f)
scipy.io.idl._read_uint16(f)
scipy.io.idl._read_uint32(f)
scipy.io.idl._read_uint64(f)
scipy.io.idl._replace_heap(variable,heap)
scipy.io.idl._skip_bytes(f,n)
scipy.io.idl.readsav(file_name,idict=None,python_dict=False,uncompressed_file_name=None,verbose=False)
scipy.io.readsav(file_name,idict=None,python_dict=False,uncompressed_file_name=None,verbose=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/arff/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/arff/utils.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/arff/setup.py----------------------------------------
A:scipy.io.arff.setup.config->Configuration('arff', parent_package, top_path)
scipy.io.arff.setup.configuration(parent_package='io',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/arff/arffread.py----------------------------------------
A:scipy.io.arff.arffread.r_meta->re.compile('^\\s*@')
A:scipy.io.arff.arffread.r_comment->re.compile('^%')
A:scipy.io.arff.arffread.r_empty->re.compile('^\\s+$')
A:scipy.io.arff.arffread.r_headerline->re.compile('^@\\S*')
A:scipy.io.arff.arffread.r_datameta->re.compile('^@[Dd][Aa][Tt][Aa]')
A:scipy.io.arff.arffread.r_relation->re.compile('^@[Rr][Ee][Ll][Aa][Tt][Ii][Oo][Nn]\\s*(\\S*)')
A:scipy.io.arff.arffread.r_attribute->re.compile('^@[Aa][Tt][Tt][Rr][Ii][Bb][Uu][Tt][Ee]\\s*(..*$)')
A:scipy.io.arff.arffread.r_comattrval->re.compile("'(..+)'\\s+(..+$)")
A:scipy.io.arff.arffread.r_mcomattrval->re.compile("'([..\\n]+)'\\s+(..+$)")
A:scipy.io.arff.arffread.r_wcomattrval->re.compile('(\\S+)\\s+(..+$)')
A:scipy.io.arff.arffread.uattribute->attrtype.lower().strip()
A:scipy.io.arff.arffread.nomtp->get_nom_val(atrv)
A:scipy.io.arff.arffread.r_nominal->re.compile('{(..+)}')
A:scipy.io.arff.arffread.m->re.compile('^@\\S*').match(i)
A:scipy.io.arff.arffread.sattr->attribute.strip()
A:scipy.io.arff.arffread.mattr->re.compile('^@[Aa][Tt][Tt][Rr][Ii][Bb][Uu][Tt][Ee]\\s*(..*$)').match(sattr)
A:scipy.io.arff.arffread.atrv->re.compile('^@[Aa][Tt][Tt][Rr][Ii][Bb][Uu][Tt][Ee]\\s*(..*$)').match(sattr).group(1)
A:scipy.io.arff.arffread.(name, type)->tokenize_single_wcomma(atrv)
A:scipy.io.arff.arffread.next_item->next(iterable)
A:scipy.io.arff.arffread.i->next(ofile)
A:scipy.io.arff.arffread.name->re.compile('^@\\S*').match(i).group(1).strip()
A:scipy.io.arff.arffread.type->parse_type(value)
A:scipy.io.arff.arffread.isattr->re.compile('^@[Aa][Tt][Tt][Rr][Ii][Bb][Uu][Tt][Ee]\\s*(..*$)').match(i)
A:scipy.io.arff.arffread.(name, type, i)->tokenize_attribute(ofile, i)
A:scipy.io.arff.arffread.isrel->re.compile('^@[Rr][Ee][Ll][Aa][Tt][Ii][Oo][Nn]\\s*(\\S*)').match(i)
A:scipy.io.arff.arffread.relation->re.compile('^@[Rr][Ee][Ll][Aa][Tt][Ii][Oo][Nn]\\s*(\\S*)').match(i).group(1)
A:scipy.io.arff.arffread.svalue->value.strip()
A:scipy.io.arff.arffread.tp->parse_type(value)
A:scipy.io.arff.arffread.ofile->go_data(ofile)
A:scipy.io.arff.arffread.(rel, attr)->read_header(ofile)
A:scipy.io.arff.arffread.meta->MetaData(rel, attr)
A:scipy.io.arff.arffread.n->maxnomlen(value)
A:scipy.io.arff.arffread.pvalue->get_nom_val(value)
A:scipy.io.arff.arffread.ni->len(convertors)
A:scipy.io.arff.arffread.raw->next(row_iter)
A:scipy.io.arff.arffread.dtline->next_data_line(ofile)
A:scipy.io.arff.arffread.delim->get_delim(dtline)
A:scipy.io.arff.arffread.elems->list(range(ni))
A:scipy.io.arff.arffread.row->next(row_iter).split(delim)
A:scipy.io.arff.arffread.a->generator(ofile, delim=delim)
A:scipy.io.arff.arffread.data->numpy.fromiter(a, descr)
A:scipy.io.arff.arffread.(min, max, mean, std)->basic_stats(data)
A:scipy.io.arff.arffread.(data, meta)->loadarff(filename)
A:scipy.io.arff.arffread.itp->iter(types)
scipy.io.arff.ArffError(IOError)
scipy.io.arff.MetaData(self,rel,attr)
scipy.io.arff.MetaData.__getitem__(self,key)
scipy.io.arff.MetaData.__iter__(self)
scipy.io.arff.MetaData.__repr__(self)
scipy.io.arff.MetaData.names(self)
scipy.io.arff.MetaData.types(self)
scipy.io.arff.ParseArffError(ArffError)
scipy.io.arff._loadarff(ofile)
scipy.io.arff.arffread.ArffError(IOError)
scipy.io.arff.arffread.MetaData(self,rel,attr)
scipy.io.arff.arffread.MetaData.__getitem__(self,key)
scipy.io.arff.arffread.MetaData.__init__(self,rel,attr)
scipy.io.arff.arffread.MetaData.__iter__(self)
scipy.io.arff.arffread.MetaData.__repr__(self)
scipy.io.arff.arffread.MetaData.names(self)
scipy.io.arff.arffread.MetaData.types(self)
scipy.io.arff.arffread.ParseArffError(ArffError)
scipy.io.arff.arffread._loadarff(ofile)
scipy.io.arff.arffread.basic_stats(data)
scipy.io.arff.arffread.floupi(filename)
scipy.io.arff.arffread.get_delim(line)
scipy.io.arff.arffread.get_ndata(ofile)
scipy.io.arff.arffread.get_nom_val(atrv)
scipy.io.arff.arffread.get_nominal(attribute)
scipy.io.arff.arffread.go_data(ofile)
scipy.io.arff.arffread.loadarff(f)
scipy.io.arff.arffread.maxnomlen(atrv)
scipy.io.arff.arffread.parse_type(attrtype)
scipy.io.arff.arffread.print_attribute(name,tp,data)
scipy.io.arff.arffread.read_data_list(ofile)
scipy.io.arff.arffread.read_header(ofile)
scipy.io.arff.arffread.safe_float(x)
scipy.io.arff.arffread.safe_nominal(value,pvalue)
scipy.io.arff.arffread.test_weka(filename)
scipy.io.arff.arffread.tokenize_attribute(iterable,attribute)
scipy.io.arff.arffread.tokenize_multilines(iterable,val)
scipy.io.arff.arffread.tokenize_single_comma(val)
scipy.io.arff.arffread.tokenize_single_wcomma(val)
scipy.io.arff.basic_stats(data)
scipy.io.arff.floupi(filename)
scipy.io.arff.get_delim(line)
scipy.io.arff.get_ndata(ofile)
scipy.io.arff.get_nom_val(atrv)
scipy.io.arff.get_nominal(attribute)
scipy.io.arff.go_data(ofile)
scipy.io.arff.loadarff(f)
scipy.io.arff.maxnomlen(atrv)
scipy.io.arff.parse_type(attrtype)
scipy.io.arff.print_attribute(name,tp,data)
scipy.io.arff.read_data_list(ofile)
scipy.io.arff.read_header(ofile)
scipy.io.arff.safe_float(x)
scipy.io.arff.safe_nominal(value,pvalue)
scipy.io.arff.test_weka(filename)
scipy.io.arff.tokenize_attribute(iterable,attribute)
scipy.io.arff.tokenize_multilines(iterable,val)
scipy.io.arff.tokenize_single_comma(val)
scipy.io.arff.tokenize_single_wcomma(val)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/arff/myfunctools.py----------------------------------------
A:scipy.io.arff.myfunctools.self.kwargs->kwargs.copy()
A:scipy.io.arff.myfunctools.kw->self.kwargs.copy()
scipy.io.arff.myfunctools.partial(self,fun,*args,**kwargs)
scipy.io.arff.myfunctools.partial.__init__(self,fun,*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/arff/tests/test_arffread.py----------------------------------------
A:scipy.io.arff.tests.test_arffread.data_path->pjoin(os.path.dirname(__file__), 'data')
A:scipy.io.arff.tests.test_arffread.test1->os.path.join(data_path, 'test1.arff')
A:scipy.io.arff.tests.test_arffread.test2->os.path.join(data_path, 'test2.arff')
A:scipy.io.arff.tests.test_arffread.test3->os.path.join(data_path, 'test3.arff')
A:scipy.io.arff.tests.test_arffread.test4->pjoin(data_path, 'test4.arff')
A:scipy.io.arff.tests.test_arffread.test5->pjoin(data_path, 'test5.arff')
A:scipy.io.arff.tests.test_arffread.missing->pjoin(data_path, 'missing.arff')
A:scipy.io.arff.tests.test_arffread.expect_missing_raw->numpy.array([[1, 5], [2, 4], [np.nan, np.nan]])
A:scipy.io.arff.tests.test_arffread.expect_missing->numpy.empty(3, [('yop', np.float), ('yap', np.float)])
A:scipy.io.arff.tests.test_arffread.(data, meta)->loadarff(missing)
A:scipy.io.arff.tests.test_arffread.f1->open(test1)
A:scipy.io.arff.tests.test_arffread.(data1, meta1)->loadarff(f1)
A:scipy.io.arff.tests.test_arffread.f2->open(test1)
A:scipy.io.arff.tests.test_arffread.(data2, meta2)->loadarff(StringIO(f2.read()))
A:scipy.io.arff.tests.test_arffread.ofile->open(test1)
A:scipy.io.arff.tests.test_arffread.(rel, attrs)->read_header(ofile)
scipy.io.arff.tests.test_DataTest(TestCase)
scipy.io.arff.tests.test_DataTest._test(self,test_file)
scipy.io.arff.tests.test_DataTest.test1(self)
scipy.io.arff.tests.test_DataTest.test2(self)
scipy.io.arff.tests.test_DataTest.test_filelike(self)
scipy.io.arff.tests.test_HeaderTest(TestCase)
scipy.io.arff.tests.test_HeaderTest.test_badtype_parsing(self)
scipy.io.arff.tests.test_HeaderTest.test_fullheader1(self)
scipy.io.arff.tests.test_HeaderTest.test_type_parsing(self)
scipy.io.arff.tests.test_MissingDataTest(TestCase)
scipy.io.arff.tests.test_MissingDataTest.test_missing(self)
scipy.io.arff.tests.test_arffread.DataTest(TestCase)
scipy.io.arff.tests.test_arffread.DataTest._test(self,test_file)
scipy.io.arff.tests.test_arffread.DataTest.test1(self)
scipy.io.arff.tests.test_arffread.DataTest.test2(self)
scipy.io.arff.tests.test_arffread.DataTest.test_filelike(self)
scipy.io.arff.tests.test_arffread.HeaderTest(TestCase)
scipy.io.arff.tests.test_arffread.HeaderTest.test_badtype_parsing(self)
scipy.io.arff.tests.test_arffread.HeaderTest.test_fullheader1(self)
scipy.io.arff.tests.test_arffread.HeaderTest.test_type_parsing(self)
scipy.io.arff.tests.test_arffread.MissingDataTest(TestCase)
scipy.io.arff.tests.test_arffread.MissingDataTest.test_missing(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/matlab/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/matlab/mio4.py----------------------------------------
A:scipy.io.matlab.mio4.data->read_dtype(self.mat_stream, self.dtypes['header'])
A:scipy.io.matlab.mio4.name->asstr(hdr.name)
A:scipy.io.matlab.mio4.(M, rest)->divmod(data['mopt'], 1000)
A:scipy.io.matlab.mio4.(O, rest)->divmod(rest, 100)
A:scipy.io.matlab.mio4.(P, rest)->divmod(rest, 10)
A:scipy.io.matlab.mio4.arr->numpy.ndarray(shape=dims, dtype='S1', buffer=st)
A:scipy.io.matlab.mio4.res->self.read_sub_array(hdr)
A:scipy.io.matlab.mio4.res_j->self.read_sub_array(hdr, copy=False)
A:scipy.io.matlab.mio4.S->numpy.ndarray(shape=dims, dtype='S1', buffer=st).tostring().decode('ascii')
A:scipy.io.matlab.mio4.I->numpy.ascontiguousarray(tmp[:, 0], dtype='intc')
A:scipy.io.matlab.mio4.J->numpy.ascontiguousarray(tmp[:, 1], dtype='intc')
A:scipy.io.matlab.mio4.V->numpy.ascontiguousarray(tmp[:, 2], dtype='complex')
A:scipy.io.matlab.mio4.shape->self._matrix_reader.shape_from_header(hdr)
A:scipy.io.matlab.mio4.rows->numpy.ndarray(shape=(1,), dtype=dt, buffer=self.mat_stream.read(dt.itemsize))
A:scipy.io.matlab.mio4.cols->numpy.ndarray(shape=(1,), dtype=dt, buffer=self.mat_stream.read(dt.itemsize))
A:scipy.io.matlab.mio4.mopt->read_dtype(self.mat_stream, np.dtype('i4'))
A:scipy.io.matlab.mio4.self.dtypes->convert_dtypes(mdtypes_template, self.byte_order)
A:scipy.io.matlab.mio4.self._matrix_reader->VarReader4(self)
A:scipy.io.matlab.mio4.hdr->self._matrix_reader.read_header()
A:scipy.io.matlab.mio4.n->reduce(lambda x, y: x * y, hdr.dims, 1)
A:scipy.io.matlab.mio4.(hdr, next_position)->self.read_var_header()
A:scipy.io.matlab.mio4.mdict[name]->self.read_var_array(hdr)
A:scipy.io.matlab.mio4.info->mclass_info.get(hdr.mclass, 'unknown')
A:scipy.io.matlab.mio4.dims->matdims(arr, oned_as)
A:scipy.io.matlab.mio4.header->numpy.empty((), mdtypes_template['header'])
A:scipy.io.matlab.mio4.n_chars->numpy.product(dims)
A:scipy.io.matlab.mio4.st_arr->numpy.ndarray(shape=(), dtype=arr_dtype_number(arr, n_chars), buffer=arr)
A:scipy.io.matlab.mio4.st->numpy.ndarray(shape=(), dtype=arr_dtype_number(arr, n_chars), buffer=arr).item().encode('ascii')
A:scipy.io.matlab.mio4.A->numpy.ndarray(shape=dims, dtype='S1', buffer=st).tocoo()
A:scipy.io.matlab.mio4.ijv->numpy.zeros((A.nnz + 1, 3 + imagf), dtype='f8')
A:scipy.io.matlab.mio4.self._matrix_writer->VarWriter4(self)
scipy.io.matlab.mio4.MatFile4Reader(self,mat_stream,*args,**kwargs)
scipy.io.matlab.mio4.MatFile4Reader.__init__(self,mat_stream,*args,**kwargs)
scipy.io.matlab.mio4.MatFile4Reader.get_variables(self,variable_names=None)
scipy.io.matlab.mio4.MatFile4Reader.guess_byte_order(self)
scipy.io.matlab.mio4.MatFile4Reader.initialize_read(self)
scipy.io.matlab.mio4.MatFile4Reader.list_variables(self)
scipy.io.matlab.mio4.MatFile4Reader.read_var_array(self,header,process=True)
scipy.io.matlab.mio4.MatFile4Reader.read_var_header(self)
scipy.io.matlab.mio4.MatFile4Writer(self,file_stream,oned_as=None)
scipy.io.matlab.mio4.MatFile4Writer.__init__(self,file_stream,oned_as=None)
scipy.io.matlab.mio4.MatFile4Writer.put_variables(self,mdict,write_header=None)
scipy.io.matlab.mio4.VarHeader4(self,name,dtype,mclass,dims,is_complex)
scipy.io.matlab.mio4.VarHeader4.__init__(self,name,dtype,mclass,dims,is_complex)
scipy.io.matlab.mio4.VarReader4(self,file_reader)
scipy.io.matlab.mio4.VarReader4.__init__(self,file_reader)
scipy.io.matlab.mio4.VarReader4.array_from_header(self,hdr,process=True)
scipy.io.matlab.mio4.VarReader4.read_char_array(self,hdr)
scipy.io.matlab.mio4.VarReader4.read_full_array(self,hdr)
scipy.io.matlab.mio4.VarReader4.read_header(self)
scipy.io.matlab.mio4.VarReader4.read_sparse_array(self,hdr)
scipy.io.matlab.mio4.VarReader4.read_sub_array(self,hdr,copy=True)
scipy.io.matlab.mio4.VarReader4.shape_from_header(self,hdr)
scipy.io.matlab.mio4.VarWriter4(self,file_writer)
scipy.io.matlab.mio4.VarWriter4.__init__(self,file_writer)
scipy.io.matlab.mio4.VarWriter4.write(self,arr,name)
scipy.io.matlab.mio4.VarWriter4.write_bytes(self,arr)
scipy.io.matlab.mio4.VarWriter4.write_char(self,arr,name)
scipy.io.matlab.mio4.VarWriter4.write_header(self,name,shape,P=miDOUBLE,T=mxFULL_CLASS,imagf=0)
scipy.io.matlab.mio4.VarWriter4.write_numeric(self,arr,name)
scipy.io.matlab.mio4.VarWriter4.write_sparse(self,arr,name)
scipy.io.matlab.mio4.VarWriter4.write_string(self,s)
scipy.io.matlab.mio4.arr_to_2d(arr,oned_as='row')


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/matlab/setupscons.py----------------------------------------
A:scipy.io.matlab.setupscons.config->Configuration('matlab', parent_package, top_path)
scipy.io.matlab.setupscons.configuration(parent_package='io',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/matlab/miobase.py----------------------------------------
A:scipy.io.matlab.miobase.docfiller->scipy.misc.doccer.filldoc(doc_dict)
A:scipy.io.matlab.miobase.dtypes->dtype_template.copy()
A:scipy.io.matlab.miobase.dtypes[k]->numpy.dtype(dtypes[k]).newbyteorder(order_code)
A:scipy.io.matlab.miobase.arr->arr.copy().copy()
A:scipy.io.matlab.miobase.mopt_bytes->numpy.ndarray(shape=(4,), dtype=np.uint8, buffer=fileobj.read(4))
A:scipy.io.matlab.miobase.tst_str->fileobj.read(4)
A:scipy.io.matlab.miobase.maj_ind->int(tst_str[2] == b'I'[0])
A:scipy.io.matlab.miobase.maj_val->byteord(tst_str[maj_ind])
A:scipy.io.matlab.miobase.min_val->byteord(tst_str[1 - maj_ind])
A:scipy.io.matlab.miobase.byte_order->boc.to_numpy_code(byte_order)
A:scipy.io.matlab.miobase.b->self.mat_stream.read(1)
A:scipy.io.matlab.miobase.curpos->self.mat_stream.tell()
A:scipy.io.matlab.miobase.dims->list(arr.shape)
scipy.io.matlab.miobase.MatFileReader(self,mat_stream,byte_order=None,mat_dtype=False,squeeze_me=False,chars_as_strings=True,matlab_compatible=False,struct_as_record=True)
scipy.io.matlab.miobase.MatFileReader.__init__(self,mat_stream,byte_order=None,mat_dtype=False,squeeze_me=False,chars_as_strings=True,matlab_compatible=False,struct_as_record=True)
scipy.io.matlab.miobase.MatFileReader.end_of_stream(self)
scipy.io.matlab.miobase.MatFileReader.guess_byte_order(self)
scipy.io.matlab.miobase.MatFileReader.set_matlab_compatible(self)
scipy.io.matlab.miobase.MatReadError(Exception)
scipy.io.matlab.miobase.MatReadWarning(UserWarning)
scipy.io.matlab.miobase.MatVarReader(self,file_reader)
scipy.io.matlab.miobase.MatVarReader.__init__(self,file_reader)
scipy.io.matlab.miobase.MatVarReader.array_from_header(self,header)
scipy.io.matlab.miobase.MatVarReader.read_header(self)
scipy.io.matlab.miobase.MatWriteError(Exception)
scipy.io.matlab.miobase.arr_dtype_number(arr,num)
scipy.io.matlab.miobase.arr_to_chars(arr)
scipy.io.matlab.miobase.convert_dtypes(dtype_template,order_code)
scipy.io.matlab.miobase.get_matfile_version(fileobj)
scipy.io.matlab.miobase.matdims(arr,oned_as='column')
scipy.io.matlab.miobase.read_dtype(mat_stream,a_dtype)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/matlab/mio5_params.py----------------------------------------
A:scipy.io.matlab.mio5_params._def['dtypes']->convert_dtypes(mdtypes_template, _bytecode)
A:scipy.io.matlab.mio5_params._def['classes']->convert_dtypes(mclass_dtypes_template, _bytecode)
A:scipy.io.matlab.mio5_params._def['codecs']->_convert_codecs(codecs_template, _bytecode)
A:scipy.io.matlab.mio5_params.obj->numpy.asarray(input_array).view(cls)
A:scipy.io.matlab.mio5_params.self.classname->getattr(obj, 'classname', None)
A:scipy.io.matlab.mio5_params.OPAQUE_DTYPE->numpy.dtype([('s0', 'O'), ('s1', 'O'), ('s2', 'O'), ('arr', 'O')])
scipy.io.matlab.mio5_params.MatlabFunction(cls,input_array)
scipy.io.matlab.mio5_params.MatlabFunction.__new__(cls,input_array)
scipy.io.matlab.mio5_params.MatlabObject(cls,input_array,classname=None)
scipy.io.matlab.mio5_params.MatlabObject.__array_finalize__(self,obj)
scipy.io.matlab.mio5_params.MatlabObject.__new__(cls,input_array,classname=None)
scipy.io.matlab.mio5_params.MatlabOpaque(cls,input_array)
scipy.io.matlab.mio5_params.MatlabOpaque.__new__(cls,input_array)
scipy.io.matlab.mio5_params._convert_codecs(template,byte_order)
scipy.io.matlab.mio5_params.mat_struct(object)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/matlab/byteordercodes.py----------------------------------------
A:scipy.io.matlab.byteordercodes.code->code.lower().lower()
scipy.io.byteordercodes.to_numpy_code(code)
scipy.io.matlab.byteordercodes.to_numpy_code(code)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/matlab/mio.py----------------------------------------
A:scipy.io.matlab.mio.(junk, file_name)->os.path.split(file_name)
A:scipy.io.matlab.mio.test_name->os.path.join(path, file_name)
A:scipy.io.matlab.mio.fid->open(test_name, 'rb')
A:scipy.io.matlab.mio.full_name->find_mat_file(file_like, appendmat)
A:scipy.io.matlab.mio.byte_stream->_open_file(file_name, appendmat)
A:scipy.io.matlab.mio.(mjv, mnv)->get_matfile_version(byte_stream)
A:scipy.io.matlab.mio.variable_names->kwargs.pop('variable_names', None)
A:scipy.io.matlab.mio.MR->mat_reader_factory(file_name, appendmat, **kwargs)
A:scipy.io.matlab.mio.matfile_dict->mat_reader_factory(file_name, appendmat, **kwargs).get_variables(variable_names)
A:scipy.io.matlab.mio.file_is_string->isinstance(file_name, string_types)
A:scipy.io.matlab.mio.file_stream->open(file_name, 'wb')
A:scipy.io.matlab.mio.MW->MatFile5Writer(file_stream, do_compression=do_compression, unicode_strings=True, long_field_names=long_field_names, oned_as=oned_as)
A:scipy.io.matlab.mio.ML->mat_reader_factory(file_name, **kwargs)
A:scipy.io.matlab.mio.variables->mat_reader_factory(file_name, **kwargs).list_variables()
scipy.io.loadmat(file_name,mdict=None,appendmat=True,**kwargs)
scipy.io.matlab.mio._open_file(file_like,appendmat)
scipy.io.matlab.mio.find_mat_file(file_name,appendmat=True)
scipy.io.matlab.mio.loadmat(file_name,mdict=None,appendmat=True,**kwargs)
scipy.io.matlab.mio.mat_reader_factory(file_name,appendmat=True,**kwargs)
scipy.io.matlab.mio.savemat(file_name,mdict,appendmat=True,format='5',long_field_names=False,do_compression=False,oned_as=None)
scipy.io.matlab.mio.whosmat(file_name,appendmat=True,**kwargs)
scipy.io.savemat(file_name,mdict,appendmat=True,format='5',long_field_names=False,do_compression=False,oned_as=None)
scipy.io.whosmat(file_name,appendmat=True,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/matlab/setup.py----------------------------------------
A:scipy.io.matlab.setup.config->Configuration('matlab', parent_package, top_path)
scipy.io.matlab.setup.configuration(parent_package='io',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/matlab/mio5.py----------------------------------------
A:scipy.io.matlab.mio5.uint16_codec->sys.getdefaultencoding()
A:scipy.io.matlab.mio5.mi->self.mat_stream.read(2)
A:scipy.io.matlab.mio5.hdr->numpy.zeros((), NDT_FILE_HDR)
A:scipy.io.matlab.mio5.hdict['__header__']->hdr['description'].item().strip(b' \t\n\x00')
A:scipy.io.matlab.mio5.self._file_reader->VarReader5(self)
A:scipy.io.matlab.mio5.self._matrix_reader->VarReader5(self)
A:scipy.io.matlab.mio5.(mdtype, byte_count)->self._matrix_reader.read_full_tag()
A:scipy.io.matlab.mio5.data->self.mat_stream.read(byte_count)
A:scipy.io.matlab.mio5.dcor->zlib.decompressobj()
A:scipy.io.matlab.mio5.stream->BytesIO()
A:scipy.io.matlab.mio5.header->self._matrix_reader.read_header()
A:scipy.io.matlab.mio5.mdict->MatFile5Reader(file_obj).read_file_header()
A:scipy.io.matlab.mio5.(hdr, next_position)->MatFile5Reader(file_obj).read_var_header()
A:scipy.io.matlab.mio5.name->numpy.asarray(name)
A:scipy.io.matlab.mio5.res->self.read_var_array(hdr, process)
A:scipy.io.matlab.mio5.shape->self._matrix_reader.shape_from_header(hdr)
A:scipy.io.matlab.mio5.info->mio5_params.mclass_info.get(hdr.mclass, 'unknown')
A:scipy.io.matlab.mio5.rdr->MatFile5Reader(file_obj)
A:scipy.io.matlab.mio5.raw_hdr->file_obj.read(hdr_len)
A:scipy.io.matlab.mio5.next_position->file_obj.tell()
A:scipy.io.matlab.mio5.var_str->file_obj.read(byte_count)
A:scipy.io.matlab.mio5.out_obj->BytesIO()
A:scipy.io.matlab.mio5.source->dict(((key, value) for (key, value) in source.__dict__.items() if not key.startswith('_')))
A:scipy.io.matlab.mio5.narr->to_writeable(arr)
A:scipy.io.matlab.mio5.mat_tag->numpy.zeros((), NDT_TAG_FULL)
A:scipy.io.matlab.mio5.tag->numpy.empty((), NDT_TAG_FULL)
A:scipy.io.matlab.mio5.tag['data']->numpy.ndarray(shape=(len(st),), dtype='S1', buffer=st).tostring(order='F')
A:scipy.io.matlab.mio5.self._mat_tag_pos->self.file_stream.tell()
A:scipy.io.matlab.mio5.af->numpy.zeros((), NDT_ARRAY_FLAGS)
A:scipy.io.matlab.mio5.curr_pos->self.file_stream.tell()
A:scipy.io.matlab.mio5.mat_tag_pos->self.file_stream.tell()
A:scipy.io.matlab.mio5.arr->numpy.ndarray(shape=(len(st),), dtype='S1', buffer=st)
A:scipy.io.matlab.mio5.n_chars->numpy.product(shape)
A:scipy.io.matlab.mio5.st_arr->numpy.ndarray(shape=(), dtype=arr_dtype_number(arr, n_chars), buffer=arr.T.copy())
A:scipy.io.matlab.mio5.st->numpy.ndarray(shape=(), dtype=arr_dtype_number(arr, n_chars), buffer=arr.T.copy()).item().encode(codec)
A:scipy.io.matlab.mio5.A->numpy.atleast_2d(arr).flatten('F')
A:scipy.io.matlab.mio5.hdr['endian_test']->numpy.ndarray(shape=(), dtype='S2', buffer=np.uint16(19785))
A:scipy.io.matlab.mio5.self._matrix_writer->VarWriter5(self)
A:scipy.io.matlab.mio5.out_str->zlib.compress(stream.getvalue())
A:scipy.io.matlab.mio5.tag['byte_count']->len(out_str)
scipy.io.matlab.mio5.MatFile5Reader(self,mat_stream,byte_order=None,mat_dtype=False,squeeze_me=False,chars_as_strings=True,matlab_compatible=False,struct_as_record=True,uint16_codec=None)
scipy.io.matlab.mio5.MatFile5Reader.__init__(self,mat_stream,byte_order=None,mat_dtype=False,squeeze_me=False,chars_as_strings=True,matlab_compatible=False,struct_as_record=True,uint16_codec=None)
scipy.io.matlab.mio5.MatFile5Reader.get_variables(self,variable_names=None)
scipy.io.matlab.mio5.MatFile5Reader.guess_byte_order(self)
scipy.io.matlab.mio5.MatFile5Reader.initialize_read(self)
scipy.io.matlab.mio5.MatFile5Reader.list_variables(self)
scipy.io.matlab.mio5.MatFile5Reader.read_file_header(self)
scipy.io.matlab.mio5.MatFile5Reader.read_var_array(self,header,process=True)
scipy.io.matlab.mio5.MatFile5Reader.read_var_header(self)
scipy.io.matlab.mio5.MatFile5Writer(self,file_stream,do_compression=False,unicode_strings=False,global_vars=None,long_field_names=False,oned_as=None)
scipy.io.matlab.mio5.MatFile5Writer.__init__(self,file_stream,do_compression=False,unicode_strings=False,global_vars=None,long_field_names=False,oned_as=None)
scipy.io.matlab.mio5.MatFile5Writer.put_variables(self,mdict,write_header=None)
scipy.io.matlab.mio5.MatFile5Writer.write_file_header(self)
scipy.io.matlab.mio5.VarWriter5(self,file_writer)
scipy.io.matlab.mio5.VarWriter5.__init__(self,file_writer)
scipy.io.matlab.mio5.VarWriter5._write_items(self,arr)
scipy.io.matlab.mio5.VarWriter5.update_matrix_tag(self,start_pos)
scipy.io.matlab.mio5.VarWriter5.write(self,arr)
scipy.io.matlab.mio5.VarWriter5.write_bytes(self,arr)
scipy.io.matlab.mio5.VarWriter5.write_cells(self,arr)
scipy.io.matlab.mio5.VarWriter5.write_char(self,arr,codec='ascii')
scipy.io.matlab.mio5.VarWriter5.write_element(self,arr,mdtype=None)
scipy.io.matlab.mio5.VarWriter5.write_header(self,shape,mclass,is_complex=False,is_logical=False,nzmax=0)
scipy.io.matlab.mio5.VarWriter5.write_numeric(self,arr)
scipy.io.matlab.mio5.VarWriter5.write_object(self,arr)
scipy.io.matlab.mio5.VarWriter5.write_regular_element(self,arr,mdtype,byte_count)
scipy.io.matlab.mio5.VarWriter5.write_smalldata_element(self,arr,mdtype,byte_count)
scipy.io.matlab.mio5.VarWriter5.write_sparse(self,arr)
scipy.io.matlab.mio5.VarWriter5.write_string(self,s)
scipy.io.matlab.mio5.VarWriter5.write_struct(self,arr)
scipy.io.matlab.mio5.VarWriter5.write_top(self,arr,name,is_global)
scipy.io.matlab.mio5.to_writeable(source)
scipy.io.matlab.mio5.varmats_from_mat(file_obj)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/matlab/tests/test_mio.py----------------------------------------
A:scipy.io.matlab.tests.test_mio.savemat_future->partial(savemat, oned_as='row')
A:scipy.io.matlab.tests.test_mio.sar->kwargs.get('struct_as_record')
A:scipy.io.matlab.tests.test_mio.test_data_path->pjoin(dirname(__file__), 'data')
A:scipy.io.matlab.tests.test_mio.arr->numpy.arange(10)
A:scipy.io.matlab.tests.test_mio.arr.shape->matdims(arr)
A:scipy.io.matlab.tests.test_mio.A->numpy.zeros((3, 5))
A:scipy.io.matlab.tests.test_mio.A[0]->list(range(1, 6))
A:scipy.io.matlab.tests.test_mio.A[:, 0]->list(range(1, 4))
A:scipy.io.matlab.tests.test_mio.B->numpy.zeros((3, 5)).astype(complex)
A:scipy.io.matlab.tests.test_mio.CA->mlarr(([], mlarr([1]), mlarr([[1, 2]]), mlarr([[1, 2, 3]])), dtype=object).reshape(1, -1)
A:scipy.io.matlab.tests.test_mio.CA[0, 0]->array([u('This cell contains this string and 3 arrays of increasing length')])
A:scipy.io.matlab.tests.test_mio.CAE->mlarr((mlarr(1), mlarr(2), mlarr([]), mlarr([]), mlarr(3)), dtype=object).reshape(1, -1)
A:scipy.io.matlab.tests.test_mio.objarr->numpy.empty((1, 1), dtype=object)
A:scipy.io.matlab.tests.test_mio.objarr[0, 0]->mlarr(1)
A:scipy.io.matlab.tests.test_mio.st_sub_arr->array([np.sqrt(2), np.exp(1), np.pi]).reshape(1, 3)
A:scipy.io.matlab.tests.test_mio.st1->numpy.zeros((1, 1), dtype=[(fldname, object)])
A:scipy.io.matlab.tests.test_mio.st1['stringfield'][0, 0]->array([u('Rats live on no evil star.')])
A:scipy.io.matlab.tests.test_mio.CN->numpy.zeros((1, 2), dtype=object)
A:scipy.io.matlab.tests.test_mio.CN[0, 0]->mlarr(1)
A:scipy.io.matlab.tests.test_mio.CN[0, 1]->numpy.zeros((1, 3), dtype=object)
A:scipy.io.matlab.tests.test_mio.CN[0, 1][0, 0]->mlarr(2, dtype=np.uint8)
A:scipy.io.matlab.tests.test_mio.CN[0, 1][0, 1]->mlarr([[3]], dtype=np.uint8)
A:scipy.io.matlab.tests.test_mio.CN[0, 1][0, 2]->numpy.zeros((1, 2), dtype=object)
A:scipy.io.matlab.tests.test_mio.CN[0, 1][0, 2][0, 0]->mlarr(4, dtype=np.uint8)
A:scipy.io.matlab.tests.test_mio.CN[0, 1][0, 2][0, 1]->mlarr(5, dtype=np.uint8)
A:scipy.io.matlab.tests.test_mio.st2->numpy.empty((1, 1), dtype=[(n, object) for n in ['one', 'two']])
A:scipy.io.matlab.tests.test_mio.st2[0, 0]['one']->mlarr(1)
A:scipy.io.matlab.tests.test_mio.st2[0, 0]['two']->numpy.empty((1, 1), dtype=[('three', object)])
A:scipy.io.matlab.tests.test_mio.st2[0, 0]['two'][0, 0]['three']->array([u('number 3')])
A:scipy.io.matlab.tests.test_mio.a->numpy.empty((1, 2), dtype=[(n, object) for n in ['one', 'two']])
A:scipy.io.matlab.tests.test_mio.a[0, 0]['one']->mlarr(1)
A:scipy.io.matlab.tests.test_mio.a[0, 0]['two']->mlarr(2)
A:scipy.io.matlab.tests.test_mio.a[0, 1]['one']->array([u('number 1')])
A:scipy.io.matlab.tests.test_mio.a[0, 1]['two']->array([u('number 2')])
A:scipy.io.matlab.tests.test_mio.ODT->numpy.dtype([(n, object) for n in ['expr', 'inputExpr', 'args', 'isEmpty', 'numArgs', 'version']])
A:scipy.io.matlab.tests.test_mio.MO->MatlabObject(np.zeros((1, 1), dtype=ODT), 'inline')
A:scipy.io.matlab.tests.test_mio.m0['expr']->array([u('x')])
A:scipy.io.matlab.tests.test_mio.m0['inputExpr']->array([u(' x = INLINE_INPUTS_{1};')])
A:scipy.io.matlab.tests.test_mio.m0['args']->array([u('x')])
A:scipy.io.matlab.tests.test_mio.m0['isEmpty']->mlarr(0)
A:scipy.io.matlab.tests.test_mio.m0['numArgs']->mlarr(1)
A:scipy.io.matlab.tests.test_mio.m0['version']->mlarr(1)
A:scipy.io.matlab.tests.test_mio.fp_u_str->open(pjoin(test_data_path, 'japanese_utf8.txt'), 'rb')
A:scipy.io.matlab.tests.test_mio.u_str->open(pjoin(test_data_path, 'japanese_utf8.txt'), 'rb').read().decode('utf-8')
A:scipy.io.matlab.tests.test_mio.type1->type(var1)
A:scipy.io.matlab.tests.test_mio.type2->type(var2)
A:scipy.io.matlab.tests.test_mio.matdict->loadmat(file_name, struct_as_record=True)
A:scipy.io.matlab.tests.test_mio.whos->whosmat(file_name)
A:scipy.io.matlab.tests.test_mio.mat_stream->BytesIO()
A:scipy.io.matlab.tests.test_mio.filt->pjoin(test_data_path, 'test%s_*.mat' % name)
A:scipy.io.matlab.tests.test_mio.files->glob(filt)
A:scipy.io.matlab.tests.test_mio.xdense->numpy.zeros((20, 20))
A:scipy.io.matlab.tests.test_mio.x->dict(x=np.zeros((2, 2)))
A:scipy.io.matlab.tests.test_mio.tmpdir->mkdtemp()
A:scipy.io.matlab.tests.test_mio.fname->pjoin(test_data_path, 'testdouble_7.1_GLNX86.mat')
A:scipy.io.matlab.tests.test_mio.actual->loadmat(mat_stream, struct_as_record=True)
A:scipy.io.matlab.tests.test_mio.f->open(fname, 'rb')
A:scipy.io.matlab.tests.test_mio.filenames->glob(pjoin(test_data_path, 'testhdf5*.mat'))
A:scipy.io.matlab.tests.test_mio.fp->open(func_eg, 'rb')
A:scipy.io.matlab.tests.test_mio.warn_ctx->WarningManager()
A:scipy.io.matlab.tests.test_mio.mres->loadmat(fname, struct_as_record=False)
A:scipy.io.matlab.tests.test_mio.my_struct->numpy.zeros((1, 1), dtype=[('my_fieldname', object)])
A:scipy.io.matlab.tests.test_mio.cell->numpy.ndarray((1, 2), dtype=object)
A:scipy.io.matlab.tests.test_mio.cells->numpy.ndarray((1, 1), dtype=object)
A:scipy.io.matlab.tests.test_mio.mfw->MatFile5Writer(BytesIO(), oned_as='row')
A:scipy.io.matlab.tests.test_mio.sio->BytesIO()
A:scipy.io.matlab.tests.test_mio.wtr->MatFile5Writer(stream, oned_as='row')
A:scipy.io.matlab.tests.test_mio.w_sz->len(sio.getvalue())
A:scipy.io.matlab.tests.test_mio.ab_exp->numpy.array([[(1, 2)]], dtype=[('a', object), ('b', object)])
A:scipy.io.matlab.tests.test_mio.ba_exp->numpy.array([[(2, 1)]], dtype=[('b', object), ('a', object)])
A:scipy.io.matlab.tests.test_mio.d->MatFile5Reader_future(fp).get_variables()
A:scipy.io.matlab.tests.test_mio.stream->BytesIO()
A:scipy.io.matlab.tests.test_mio.vals->loadmat(stream)
A:scipy.io.matlab.tests.test_mio.raw_len->len(stream.getvalue())
A:scipy.io.matlab.tests.test_mio.compressed_len->len(stream.getvalue())
A:scipy.io.matlab.tests.test_mio.arr2->numpy.arange(10).copy()
A:scipy.io.matlab.tests.test_mio.filename->pjoin(test_data_path, 'test_empty_struct.mat')
A:scipy.io.matlab.tests.test_mio.factory->mat_reader_factory(filename, struct_as_record=True)
A:scipy.io.matlab.tests.test_mio.c->C()
A:scipy.io.matlab.tests.test_mio.rdr->MatFile5Reader_future(fp)
A:scipy.io.matlab.tests.test_mio.back_dict->MatFile5Reader_future(fp).get_variables()
A:scipy.io.matlab.tests.test_mio.carr->numpy.atleast_2d(np.array(list(arr.item()), dtype='U1'))
A:scipy.io.matlab.tests.test_mio.estring_fname->pjoin(test_data_path, 'single_empty_string.mat')
A:scipy.io.matlab.tests.test_mio.func_eg->pjoin(test_data_path, 'one_by_zero_char.mat')
A:scipy.io.matlab.tests.test_mio.double_eg->pjoin(test_data_path, 'testmatrix_6.1_SOL2.mat')
A:scipy.io.matlab.tests.test_mio.out_d->loadmat(stream, squeeze_me=True)
A:scipy.io.matlab.tests.test_mio.in_arr->numpy.array(['Hello', 'Foob'])
A:scipy.io.matlab.tests.test_mio.out_arr->numpy.array(['Hello', 'Foob '])
A:scipy.io.matlab.tests.test_mio.res->loadmat(var_stream)
A:scipy.io.matlab.tests.test_mio.in_str->numpy.array(['Hello', 'Foob']).tostring(order='F')
A:scipy.io.matlab.tests.test_mio.in_from_str->numpy.ndarray(shape=a.shape, dtype=in_arr.dtype, order='F', buffer=in_str)
A:scipy.io.matlab.tests.test_mio.in_arr_u->numpy.array(['Hello', 'Foob']).astype('U')
A:scipy.io.matlab.tests.test_mio.out_arr_u->numpy.array(['Hello', 'Foob ']).astype('U')
A:scipy.io.matlab.tests.test_mio.eg_file->pjoin(test_data_path, 'testmulti_7.4_GLNX86.mat')
A:scipy.io.matlab.tests.test_mio.vars->loadmat(mat4_fname)
A:scipy.io.matlab.tests.test_mio.varmats->varmats_from_mat(stream)
A:scipy.io.matlab.tests.test_mio.mat4_fname->pjoin(test_data_path, 'test_mat4_le_floats.mat')
scipy.io.matlab.tests.test_mio.MatFile5Reader_future(self,*args,**kwargs)
scipy.io.matlab.tests.test_mio.MatFile5Reader_future.__init__(self,*args,**kwargs)
scipy.io.matlab.tests.test_mio._check_level(label,expected,actual)
scipy.io.matlab.tests.test_mio._load_check_case(name,files,case)
scipy.io.matlab.tests.test_mio._rt_check_case(name,expected,format)
scipy.io.matlab.tests.test_mio._whos_check_case(name,files,case,classes)
scipy.io.matlab.tests.test_mio.mlarr(*args,**kwargs)
scipy.io.matlab.tests.test_mio.test_1d_shape()
scipy.io.matlab.tests.test_mio.test_4_and_long_field_names_incompatible()
scipy.io.matlab.tests.test_mio.test_cell_with_one_thing_in_it()
scipy.io.matlab.tests.test_mio.test_compression()
scipy.io.matlab.tests.test_mio.test_empty_string()
scipy.io.matlab.tests.test_mio.test_empty_struct()
scipy.io.matlab.tests.test_mio.test_fieldnames()
scipy.io.matlab.tests.test_mio.test_func_read()
scipy.io.matlab.tests.test_mio.test_gzip_simple()
scipy.io.matlab.tests.test_mio.test_load()
scipy.io.matlab.tests.test_mio.test_load_mat4_le()
scipy.io.matlab.tests.test_mio.test_loadmat_varnames()
scipy.io.matlab.tests.test_mio.test_long_field_names()
scipy.io.matlab.tests.test_mio.test_long_field_names_in_struct()
scipy.io.matlab.tests.test_mio.test_mat4_3d()
scipy.io.matlab.tests.test_mio.test_mat73()
scipy.io.matlab.tests.test_mio.test_mat_dtype()
scipy.io.matlab.tests.test_mio.test_mat_struct_squeeze()
scipy.io.matlab.tests.test_mio.test_multiple_open()
scipy.io.matlab.tests.test_mio.test_one_by_zero()
scipy.io.matlab.tests.test_mio.test_read_opts()
scipy.io.matlab.tests.test_mio.test_recarray()
scipy.io.matlab.tests.test_mio.test_regression_653()
scipy.io.matlab.tests.test_mio.test_round_trip()
scipy.io.matlab.tests.test_mio.test_round_types()
scipy.io.matlab.tests.test_mio.test_save_dict()
scipy.io.matlab.tests.test_mio.test_save_object()
scipy.io.matlab.tests.test_mio.test_scalar_squeeze()
scipy.io.matlab.tests.test_mio.test_single_object()
scipy.io.matlab.tests.test_mio.test_skip_variable()
scipy.io.matlab.tests.test_mio.test_sparse_in_struct()
scipy.io.matlab.tests.test_mio.test_str_round()
scipy.io.matlab.tests.test_mio.test_structname_len()
scipy.io.matlab.tests.test_mio.test_use_small_element()
scipy.io.matlab.tests.test_mio.test_varmats_from_mat()
scipy.io.matlab.tests.test_mio.test_warnings()
scipy.io.matlab.tests.test_mio.test_whos()
scipy.io.matlab.tests.test_mio.test_writer_properties()
scipy.io.matlab.tests.test_mio.types_compatible(var1,var2)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/matlab/tests/test_mio_funcs.py----------------------------------------
A:scipy.io.matlab.tests.test_mio_funcs.test_data_path->pjoin(dirname(__file__), 'data')
A:scipy.io.matlab.tests.test_mio_funcs.(hdr, next_position)->MatFile5Reader(fp, struct_as_record=True).read_var_header()
A:scipy.io.matlab.tests.test_mio_funcs.name->asstr(hdr.name)
A:scipy.io.matlab.tests.test_mio_funcs.res->MatFile5Reader(fp, struct_as_record=True).read_var_array(hdr, process=False)
A:scipy.io.matlab.tests.test_mio_funcs.fp->open(fname, 'rb')
A:scipy.io.matlab.tests.test_mio_funcs.rdr->MatFile5Reader(fp, struct_as_record=True)
A:scipy.io.matlab.tests.test_mio_funcs.vars->MatFile5Reader(fp, struct_as_record=True).get_variables()
A:scipy.io.matlab.tests.test_mio_funcs.ws_bs->BytesIO(fws.tostring())
A:scipy.io.matlab.tests.test_mio_funcs.mi->MatFile5Reader(fp, struct_as_record=True).mat_stream.read(2)
A:scipy.io.matlab.tests.test_mio_funcs.mdict->read_minimat_vars(rdr)
A:scipy.io.matlab.tests.test_mio_funcs.fname->pjoin(test_data_path, 'parabola.mat')
A:scipy.io.matlab.tests.test_mio_funcs.ws_vars->read_workspace_vars(fname)
scipy.io.matlab.tests.test_mio_funcs.read_minimat_vars(rdr)
scipy.io.matlab.tests.test_mio_funcs.read_workspace_vars(fname)
scipy.io.matlab.tests.test_mio_funcs.test_jottings()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/matlab/tests/test_mio_utils.py----------------------------------------
A:scipy.io.matlab.tests.test_mio_utils.a->numpy.zeros((1, 3))
A:scipy.io.matlab.tests.test_mio_utils.sq_int->squeeze_element(np.zeros((1, 1), dtype=np.float))
A:scipy.io.matlab.tests.test_mio_utils.sq_sa->squeeze_element(np.zeros((1, 1), dtype=[('f1', 'f')]))
A:scipy.io.matlab.tests.test_mio_utils.str_arr->numpy.array(strings, dtype='U6')
A:scipy.io.matlab.tests.test_mio_utils.char_arr->numpy.array(chars, dtype='U1')
A:scipy.io.matlab.tests.test_mio_utils.ca2d->numpy.array(chars, dtype='U1').reshape((2, 2, 6))
A:scipy.io.matlab.tests.test_mio_utils.sa2d->numpy.array(strings, dtype='U6').reshape((2, 2))
A:scipy.io.matlab.tests.test_mio_utils.ca3d->numpy.array(chars, dtype='U1').reshape((1, 2, 2, 6))
A:scipy.io.matlab.tests.test_mio_utils.sa3d->numpy.array(strings, dtype='U6').reshape((1, 2, 2))
A:scipy.io.matlab.tests.test_mio_utils.char_arrf->numpy.array(chars, dtype='U1', order='F')
A:scipy.io.matlab.tests.test_mio_utils.arr->numpy.array([['']], dtype='U1')
A:scipy.io.matlab.tests.test_mio_utils.out_arr->numpy.array([''], dtype='U1')
scipy.io.matlab.tests.test_mio_utils.test_chars_strings()
scipy.io.matlab.tests.test_mio_utils.test_cproduct()
scipy.io.matlab.tests.test_mio_utils.test_squeeze_element()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/matlab/tests/test_mio5_utils.py----------------------------------------
A:scipy.io.matlab.tests.test_mio5_utils.a->_make_tag(dt, 30, mio5p.miUINT16, 0)
A:scipy.io.matlab.tests.test_mio5_utils.b->_make_tag(dt, 30, mio5p.miUINT16, 0).byteswap()
A:scipy.io.matlab.tests.test_mio5_utils.c->scipy.io.matlab.mio5_utils.byteswap_u4(a)
A:scipy.io.matlab.tests.test_mio5_utils.d->scipy.io.matlab.mio5_utils.byteswap_u4(c)
A:scipy.io.matlab.tests.test_mio5_utils.base_dt->numpy.dtype(base_dt)
A:scipy.io.matlab.tests.test_mio5_utils.bo->scipy.io.matlab.byteordercodes.to_numpy_code(base_dt.byteorder)
A:scipy.io.matlab.tests.test_mio5_utils.tag->numpy.zeros((1,), dtype=tag_dt)
A:scipy.io.matlab.tests.test_mio5_utils.r->_make_readerlike(str_io, boc.native_code)
A:scipy.io.matlab.tests.test_mio5_utils.r.uint16_codec->sys.getdefaultencoding()
A:scipy.io.matlab.tests.test_mio5_utils.str_io->cStringIO()
A:scipy.io.matlab.tests.test_mio5_utils.c_reader->scipy.io.matlab.mio5_utils.VarReader5(r)
A:scipy.io.matlab.tests.test_mio5_utils.tag_str->numpy.zeros((1,), dtype=tag_dt).tostring()
A:scipy.io.matlab.tests.test_mio5_utils.st->scipy.io.matlab.streams.make_stream(str_io)
A:scipy.io.matlab.tests.test_mio5_utils.s->scipy.io.matlab.streams._read_into(st, tag.itemsize)
A:scipy.io.matlab.tests.test_mio5_utils.dt->numpy.dtype('<u2')
A:scipy.io.matlab.tests.test_mio5_utils.a_str->_make_tag(dt, 30, mio5p.miUINT16, 0).tostring()
A:scipy.io.matlab.tests.test_mio5_utils.el->scipy.io.matlab.mio5_utils.VarReader5(r).read_numeric()
A:scipy.io.matlab.tests.test_mio5_utils.tag_dt->numpy.dtype([('mdtype', 'u4'), ('byte_count', 'u4')])
A:scipy.io.matlab.tests.test_mio5_utils.hdr->scipy.io.matlab.mio5_utils.VarHeader5()
A:scipy.io.matlab.tests.test_mio5_utils.val->scipy.io.matlab.mio5_utils.VarReader5(r).read_char(hdr)
scipy.io.matlab.tests.test_mio5_utils._make_readerlike(stream,byte_order=boc.native_code)
scipy.io.matlab.tests.test_mio5_utils._make_tag(base_dt,val,mdtype,sde=False)
scipy.io.matlab.tests.test_mio5_utils._write_stream(stream,*strings)
scipy.io.matlab.tests.test_mio5_utils.test_byteswap()
scipy.io.matlab.tests.test_mio5_utils.test_read_numeric()
scipy.io.matlab.tests.test_mio5_utils.test_read_numeric_writeable()
scipy.io.matlab.tests.test_mio5_utils.test_read_stream()
scipy.io.matlab.tests.test_mio5_utils.test_read_tag()
scipy.io.matlab.tests.test_mio5_utils.test_zero_byte_string()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/matlab/tests/test_byteordercodes.py----------------------------------------
scipy.io.matlab.tests.test_byteordercodes.test_native()
scipy.io.matlab.tests.test_byteordercodes.test_to_numpy()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/matlab/tests/test_streams.py----------------------------------------
A:scipy.io.matlab.tests.test_streams.(fd, fname)->mkstemp()
A:scipy.io.matlab.tests.test_streams.fs->open(fname, 'rb')
A:scipy.io.matlab.tests.test_streams.gs->BytesIO(val)
A:scipy.io.matlab.tests.test_streams.cs->cStringIO(val)
A:scipy.io.matlab.tests.test_streams.st->make_stream(s)
A:scipy.io.matlab.tests.test_streams.res->_read_string(st, 4)
scipy.io.matlab.tests.test_streams.setup()
scipy.io.matlab.tests.test_streams.teardown()
scipy.io.matlab.tests.test_streams.test_make_stream()
scipy.io.matlab.tests.test_streams.test_read()
scipy.io.matlab.tests.test_streams.test_tell_seek()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/matlab/tests/test_pathological.py----------------------------------------
A:scipy.io.matlab.tests.test_pathological.TEST_DATA_PATH->pjoin(dirname(__file__), 'data')
A:scipy.io.matlab.tests.test_pathological.multi_fname->pjoin(TEST_DATA_PATH, 'nasty_duplicate_fieldnames.mat')
A:scipy.io.matlab.tests.test_pathological.vars->loadmat(multi_fname)
scipy.io.matlab.tests.test_pathological.test_multiple_fieldnames()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/matlab/benchmarks/bench_structarr.py----------------------------------------
A:scipy.io.matlab.benchmarks.bench_structarr.s_arrs->numpy.zeros((n_structs,), dtype=end_dtype)
A:scipy.io.matlab.benchmarks.bench_structarr.str_io->StringIO()
A:scipy.io.matlab.benchmarks.bench_structarr.var_dict->make_structarr(n_vars, n_fields, n_structs)
A:scipy.io.matlab.benchmarks.bench_structarr.write_time->measure('sio.savemat(str_io, var_dict)')
A:scipy.io.matlab.benchmarks.bench_structarr.read_time->measure('sio.loadmat(str_io)')
scipy.io.matlab.benchmarks.bench_structarr.bench_run()
scipy.io.matlab.benchmarks.bench_structarr.make_structarr(n_vars,n_fields,n_structs)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/tests/test_mmio.py----------------------------------------
A:scipy.io.tests.test_mmio.fn->mktemp()
A:scipy.io.tests.test_mmio.b->mmread(fn).todense()
A:scipy.io.tests.test_mmio.a->mmread(fn).todense().todense()
A:scipy.io.tests.test_mmio.f->open(fn, 'w')
A:scipy.io.tests.test_mmio.I->array([0, 0, 1, 2, 3, 3, 3, 4])
A:scipy.io.tests.test_mmio.J->array([0, 3, 1, 2, 1, 3, 4, 4])
A:scipy.io.tests.test_mmio.V->array([1.0 + 3j, 6.0 + 2j, 10.5 + 0.9j, 0.015 + -4.4j, 250.5 + 0j, -280.0 + 5j, 33.32 + 6.4j, 12.0 + 0.8j])
A:scipy.io.tests.test_mmio.expected->mat.todense()
A:scipy.io.tests.test_mmio.result->mmread(fn).todense()
scipy.io.tests.test_mmio.TestMMIOArray(TestCase)
scipy.io.tests.test_mmio.TestMMIOArray.test_random_rect_real(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_random_symmetric_real(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_simple(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_simple_complex(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_simple_hermitian(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_simple_real(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_simple_rectangular(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_simple_rectangular_real(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_simple_skew_symmetric(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_simple_skew_symmetric_float(self)
scipy.io.tests.test_mmio.TestMMIOArray.test_simple_symmetric(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate(TestCase)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_complex_write_read(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_empty_write_read(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_read_general(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_read_hermitian(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_read_skew(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_read_symmetric(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_read_symmetric_pattern(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_real_write_read(self)
scipy.io.tests.test_mmio.TestMMIOCoordinate.test_sparse_formats(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/tests/test_idl.py----------------------------------------
A:scipy.io.tests.test_idl.DATA_PATH->os.path.join(path.dirname(__file__), 'data')
A:scipy.io.tests.test_idl.array->numpy.empty(len(args), dtype=np.object)
A:scipy.io.tests.test_idl.vect_id->numpy.vectorize(id)
A:scipy.io.tests.test_idl.original_id->id(custom_dict)
A:scipy.io.tests.test_idl.s->readsav(path.join(DATA_PATH, 'struct_pointer_arrays_replicated_3d.sav'), verbose=False)
A:scipy.io.tests.test_idl.warn_ctx->WarningManager()
scipy.io.tests.test_idl.TestArrayDimensions
scipy.io.tests.test_idl.TestArrayDimensions.test_1d(self)
scipy.io.tests.test_idl.TestArrayDimensions.test_2d(self)
scipy.io.tests.test_idl.TestArrayDimensions.test_3d(self)
scipy.io.tests.test_idl.TestArrayDimensions.test_4d(self)
scipy.io.tests.test_idl.TestArrayDimensions.test_5d(self)
scipy.io.tests.test_idl.TestArrayDimensions.test_6d(self)
scipy.io.tests.test_idl.TestArrayDimensions.test_7d(self)
scipy.io.tests.test_idl.TestArrayDimensions.test_8d(self)
scipy.io.tests.test_idl.TestCompressed(TestScalars)
scipy.io.tests.test_idl.TestCompressed.test_compressed(self)
scipy.io.tests.test_idl.TestIdict
scipy.io.tests.test_idl.TestIdict.test_idict(self)
scipy.io.tests.test_idl.TestPointerArray
scipy.io.tests.test_idl.TestPointerArray.test_1d(self)
scipy.io.tests.test_idl.TestPointerArray.test_2d(self)
scipy.io.tests.test_idl.TestPointerArray.test_3d(self)
scipy.io.tests.test_idl.TestPointerArray.test_4d(self)
scipy.io.tests.test_idl.TestPointerArray.test_5d(self)
scipy.io.tests.test_idl.TestPointerArray.test_6d(self)
scipy.io.tests.test_idl.TestPointerArray.test_7d(self)
scipy.io.tests.test_idl.TestPointerArray.test_8d(self)
scipy.io.tests.test_idl.TestPointerStructures
scipy.io.tests.test_idl.TestPointerStructures.test_arrays(self)
scipy.io.tests.test_idl.TestPointerStructures.test_arrays_replicated(self)
scipy.io.tests.test_idl.TestPointerStructures.test_arrays_replicated_3d(self)
scipy.io.tests.test_idl.TestPointerStructures.test_pointers_replicated(self)
scipy.io.tests.test_idl.TestPointerStructures.test_pointers_replicated_3d(self)
scipy.io.tests.test_idl.TestPointerStructures.test_scalars(self)
scipy.io.tests.test_idl.TestPointers
scipy.io.tests.test_idl.TestPointers.test_pointers(self)
scipy.io.tests.test_idl.TestScalars
scipy.io.tests.test_idl.TestScalars.test_byte(self)
scipy.io.tests.test_idl.TestScalars.test_bytes(self)
scipy.io.tests.test_idl.TestScalars.test_complex32(self)
scipy.io.tests.test_idl.TestScalars.test_complex64(self)
scipy.io.tests.test_idl.TestScalars.test_float32(self)
scipy.io.tests.test_idl.TestScalars.test_float64(self)
scipy.io.tests.test_idl.TestScalars.test_heap_pointer(self)
scipy.io.tests.test_idl.TestScalars.test_int16(self)
scipy.io.tests.test_idl.TestScalars.test_int32(self)
scipy.io.tests.test_idl.TestScalars.test_int64(self)
scipy.io.tests.test_idl.TestScalars.test_object_reference(self)
scipy.io.tests.test_idl.TestScalars.test_structure(self)
scipy.io.tests.test_idl.TestScalars.test_uint16(self)
scipy.io.tests.test_idl.TestScalars.test_uint32(self)
scipy.io.tests.test_idl.TestScalars.test_uint64(self)
scipy.io.tests.test_idl.TestStructures
scipy.io.tests.test_idl.TestStructures.test_arrays(self)
scipy.io.tests.test_idl.TestStructures.test_arrays_replicated(self)
scipy.io.tests.test_idl.TestStructures.test_arrays_replicated_3d(self)
scipy.io.tests.test_idl.TestStructures.test_inheritance(self)
scipy.io.tests.test_idl.TestStructures.test_scalars(self)
scipy.io.tests.test_idl.TestStructures.test_scalars_replicated(self)
scipy.io.tests.test_idl.TestStructures.test_scalars_replicated_3d(self)
scipy.io.tests.test_idl.assert_array_identical(a,b)
scipy.io.tests.test_idl.assert_identical(a,b)
scipy.io.tests.test_idl.object_array(*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/tests/test_wavfile.py----------------------------------------
A:scipy.io.tests.test_wavfile.warn_ctx->WarningManager()
A:scipy.io.tests.test_wavfile.(rate, data)->scipy.io.wavfile.read(datafile('test-8000-le-2ch-1byteu.wav'), mmap=mmap)
A:scipy.io.tests.test_wavfile.fp->open(datafile('example_1.nc'))
A:scipy.io.tests.test_wavfile.(fd, tmpfile)->tempfile.mkstemp(suffix='.wav')
A:scipy.io.tests.test_wavfile.data->(data * 128).astype(dtype)
A:scipy.io.tests.test_wavfile.(rate2, data2)->scipy.io.wavfile.read(tmpfile, mmap=mmap)
A:scipy.io.tests.test_wavfile.dt->numpy.dtype('%s%s%d' % (endianness, signed, size))
scipy.io.tests.test_wavfile._check_roundtrip(rate,dtype,channels)
scipy.io.tests.test_wavfile.datafile(fn)
scipy.io.tests.test_wavfile.test_read_1()
scipy.io.tests.test_wavfile.test_read_2()
scipy.io.tests.test_wavfile.test_read_fail()
scipy.io.tests.test_wavfile.test_write_roundtrip()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/tests/test_netcdf.py----------------------------------------
A:scipy.io.tests.test_netcdf.TEST_DATA_PATH->pjoin(dirname(__file__), 'data')
A:scipy.io.tests.test_netcdf.f->netcdf_file(io, 'r')
A:scipy.io.tests.test_netcdf.time->netcdf_file(io, 'r').createVariable('time', VARTYPE_EG, ('time',))
A:scipy.io.tests.test_netcdf.time[:]->numpy.arange(N_EG_ELS)
A:scipy.io.tests.test_netcdf.cwd->os.getcwd()
A:scipy.io.tests.test_netcdf.tmpdir->tempfile.mkdtemp()
A:scipy.io.tests.test_netcdf.fobj->open('simple.nc', 'rb')
A:scipy.io.tests.test_netcdf.eg_sio1->BytesIO()
A:scipy.io.tests.test_netcdf.f1->make_simple(eg_sio1, 'w')
A:scipy.io.tests.test_netcdf.str_val->BytesIO(str_val).getvalue()
A:scipy.io.tests.test_netcdf.eg_sio2->BytesIO(str_val)
A:scipy.io.tests.test_netcdf.f2->netcdf_file(eg_sio2)
A:scipy.io.tests.test_netcdf.eg_sio3->BytesIO(str_val)
A:scipy.io.tests.test_netcdf.eg_sio_64->BytesIO(str_val)
A:scipy.io.tests.test_netcdf.f_64->netcdf_file(eg_sio_64, version=2)
A:scipy.io.tests.test_netcdf.filename->pjoin(TEST_DATA_PATH, 'example_1.nc')
A:scipy.io.tests.test_netcdf.stream->BytesIO()
A:scipy.io.tests.test_netcdf.x->netcdf_file(io, 'r').createDimension('x', 4)
A:scipy.io.tests.test_netcdf.v->netcdf_file(io, 'r').createVariable('v', 'i2', ['x'])
A:scipy.io.tests.test_netcdf.len_single->len(stream.getvalue())
A:scipy.io.tests.test_netcdf.len_double->len(stream.getvalue())
A:scipy.io.tests.test_netcdf.v1->netcdf_file(io, 'r').createVariable('v1', 'i2', ['x'])
A:scipy.io.tests.test_netcdf.v2->netcdf_file(io, 'r').createVariable('v2', np.int16, ['x'])
A:scipy.io.tests.test_netcdf.v3->netcdf_file(io, 'r').createVariable('v3', np.dtype(np.int16), ['x'])
A:scipy.io.tests.test_netcdf.io->BytesIO(contents)
A:scipy.io.tests.test_netcdf.float_var->netcdf_file(io, 'r').createVariable('float_var', 'f', ('float_var',))
A:scipy.io.tests.test_netcdf.contents->BytesIO(contents).getvalue()
scipy.io.tests.test_netcdf.gen_for_simple(ncfileobj)
scipy.io.tests.test_netcdf.make_simple(*args,**kwargs)
scipy.io.tests.test_netcdf.test_dtype_specifiers()
scipy.io.tests.test_netcdf.test_flush_rewind()
scipy.io.tests.test_netcdf.test_itemset_no_segfault_on_readonly()
scipy.io.tests.test_netcdf.test_read_example_data()
scipy.io.tests.test_netcdf.test_read_write_files()
scipy.io.tests.test_netcdf.test_read_write_sio()
scipy.io.tests.test_netcdf.test_ticket_1720()
scipy.io.tests.test_netcdf.test_write_invalid_dtype()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/harwell_boeing/hb.py----------------------------------------
A:scipy.io.harwell_boeing.hb.pointer_fmt->scipy.io.harwell_boeing._fortran_format_parser.IntFormat.from_number(np.max(pointer + 1))
A:scipy.io.harwell_boeing.hb.indices_fmt->scipy.io.harwell_boeing._fortran_format_parser.IntFormat.from_number(np.max(indices + 1))
A:scipy.io.harwell_boeing.hb.values_fmt->scipy.io.harwell_boeing._fortran_format_parser.IntFormat.from_number(-np.max(np.abs(values)))
A:scipy.io.harwell_boeing.hb.mxtype->HBMatrixType.from_fortran(mxtype_s)
A:scipy.io.harwell_boeing.hb.pointer_nlines->_expect_int(line[14:28])
A:scipy.io.harwell_boeing.hb.indices_nlines->_expect_int(line[28:42])
A:scipy.io.harwell_boeing.hb.values_nlines->_expect_int(line[42:56])
A:scipy.io.harwell_boeing.hb.line->open(file, 'w').readline().strip('\n')
A:scipy.io.harwell_boeing.hb.total_nlines->_expect_int(line[:14])
A:scipy.io.harwell_boeing.hb.rhs_nlines->_expect_int(rhs_nlines)
A:scipy.io.harwell_boeing.hb.mxtype_s->line[:3].upper()
A:scipy.io.harwell_boeing.hb.nrows->_expect_int(line[14:28])
A:scipy.io.harwell_boeing.hb.ncols->_expect_int(line[28:42])
A:scipy.io.harwell_boeing.hb.nnon_zeros->_expect_int(line[42:56])
A:scipy.io.harwell_boeing.hb.nelementals->_expect_int(line[56:70])
A:scipy.io.harwell_boeing.hb.ct->open(file, 'w').readline().strip('\n').split()
A:scipy.io.harwell_boeing.hb.parser->FortranFormatParser()
A:scipy.io.harwell_boeing.hb.pointer_format->FortranFormatParser().parse(pointer_format_str)
A:scipy.io.harwell_boeing.hb.indices_format->FortranFormatParser().parse(indices_format_str)
A:scipy.io.harwell_boeing.hb.values_format->FortranFormatParser().parse(values_format_str)
A:scipy.io.harwell_boeing.hb.self.pointer_nbytes_full->_nbytes_full(pointer_format, pointer_nlines)
A:scipy.io.harwell_boeing.hb.self.indices_nbytes_full->_nbytes_full(indices_format, indices_nlines)
A:scipy.io.harwell_boeing.hb.self.values_nbytes_full->_nbytes_full(values_format, values_nlines)
A:scipy.io.harwell_boeing.hb.ptr_string->''.join([content.read(header.pointer_nbytes_full), content.readline()])
A:scipy.io.harwell_boeing.hb.ptr->numpy.fromstring(ptr_string, dtype=np.int, sep=' ')
A:scipy.io.harwell_boeing.hb.ind_string->''.join([content.read(header.indices_nbytes_full), content.readline()])
A:scipy.io.harwell_boeing.hb.ind->numpy.fromstring(ind_string, dtype=np.int, sep=' ')
A:scipy.io.harwell_boeing.hb.val_string->''.join([content.read(header.values_nbytes_full), content.readline()])
A:scipy.io.harwell_boeing.hb.val->numpy.fromstring(val_string, dtype=header.values_dtype, sep=' ')
A:scipy.io.harwell_boeing.hb._f2q_type->dict([(j, i) for (i, j) in _q2f_type.items()])
A:scipy.io.harwell_boeing.hb._f2q_structure->dict([(j, i) for (i, j) in _q2f_structure.items()])
A:scipy.io.harwell_boeing.hb._f2q_storage->dict([(j, i) for (i, j) in _q2f_storage.items()])
A:scipy.io.harwell_boeing.hb.self._hb_info->HBInfo.from_file(file)
A:scipy.io.harwell_boeing.hb.hb->HBFile(fid, hb_info)
A:scipy.io.harwell_boeing.hb.fid->open(file, 'w')
A:scipy.io.harwell_boeing.hb.hb_info->HBInfo.from_data(m)
scipy.io.harwell_boeing.HBFile(self,file,hb_info=None)
scipy.io.harwell_boeing.HBFile.key(self)
scipy.io.harwell_boeing.HBFile.read_matrix(self)
scipy.io.harwell_boeing.HBFile.storage(self)
scipy.io.harwell_boeing.HBFile.structure(self)
scipy.io.harwell_boeing.HBFile.title(self)
scipy.io.harwell_boeing.HBFile.type(self)
scipy.io.harwell_boeing.HBFile.write_matrix(self,m)
scipy.io.harwell_boeing.HBInfo(self,title,key,total_nlines,pointer_nlines,indices_nlines,values_nlines,mxtype,nrows,ncols,nnon_zeros,pointer_format_str,indices_format_str,values_format_str,right_hand_sides_nlines=0,nelementals=0)
scipy.io.harwell_boeing.HBInfo.dump(self)
scipy.io.harwell_boeing.HBInfo.from_data(cls,m,title='Defaulttitle',key='0',mxtype=None,fmt=None)
scipy.io.harwell_boeing.HBInfo.from_file(cls,fid)
scipy.io.harwell_boeing.HBMatrixType(self,value_type,structure,storage='assembled')
scipy.io.harwell_boeing.HBMatrixType.__repr__(self)
scipy.io.harwell_boeing.HBMatrixType.fortran_format(self)
scipy.io.harwell_boeing.HBMatrixType.from_fortran(cls,fmt)
scipy.io.harwell_boeing.MalformedHeader(Exception)
scipy.io.harwell_boeing.hb.HBFile(self,file,hb_info=None)
scipy.io.harwell_boeing.hb.HBFile.__init__(self,file,hb_info=None)
scipy.io.harwell_boeing.hb.HBFile.key(self)
scipy.io.harwell_boeing.hb.HBFile.read_matrix(self)
scipy.io.harwell_boeing.hb.HBFile.storage(self)
scipy.io.harwell_boeing.hb.HBFile.structure(self)
scipy.io.harwell_boeing.hb.HBFile.title(self)
scipy.io.harwell_boeing.hb.HBFile.type(self)
scipy.io.harwell_boeing.hb.HBFile.write_matrix(self,m)
scipy.io.harwell_boeing.hb.HBInfo(self,title,key,total_nlines,pointer_nlines,indices_nlines,values_nlines,mxtype,nrows,ncols,nnon_zeros,pointer_format_str,indices_format_str,values_format_str,right_hand_sides_nlines=0,nelementals=0)
scipy.io.harwell_boeing.hb.HBInfo.__init__(self,title,key,total_nlines,pointer_nlines,indices_nlines,values_nlines,mxtype,nrows,ncols,nnon_zeros,pointer_format_str,indices_format_str,values_format_str,right_hand_sides_nlines=0,nelementals=0)
scipy.io.harwell_boeing.hb.HBInfo.dump(self)
scipy.io.harwell_boeing.hb.HBInfo.from_data(cls,m,title='Defaulttitle',key='0',mxtype=None,fmt=None)
scipy.io.harwell_boeing.hb.HBInfo.from_file(cls,fid)
scipy.io.harwell_boeing.hb.HBMatrixType(self,value_type,structure,storage='assembled')
scipy.io.harwell_boeing.hb.HBMatrixType.__init__(self,value_type,structure,storage='assembled')
scipy.io.harwell_boeing.hb.HBMatrixType.__repr__(self)
scipy.io.harwell_boeing.hb.HBMatrixType.fortran_format(self)
scipy.io.harwell_boeing.hb.HBMatrixType.from_fortran(cls,fmt)
scipy.io.harwell_boeing.hb.LineOverflow(Warning)
scipy.io.harwell_boeing.hb.MalformedHeader(Exception)
scipy.io.harwell_boeing.hb._expect_int(value,msg=None)
scipy.io.harwell_boeing.hb._nbytes_full(fmt,nlines)
scipy.io.harwell_boeing.hb._read_hb_data(content,header)
scipy.io.harwell_boeing.hb._write_data(m,fid,header)
scipy.io.harwell_boeing.hb.hb_read(file)
scipy.io.harwell_boeing.hb.hb_write(file,m,hb_info=None)
scipy.io.hb_read(file)
scipy.io.hb_write(file,m,hb_info=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/harwell_boeing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/harwell_boeing/setupscons.py----------------------------------------
A:scipy.io.harwell_boeing.setupscons.config->Configuration('harwell_boeing', parent_package, top_path)
scipy.io.harwell_boeing.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/harwell_boeing/setup.py----------------------------------------
A:scipy.io.harwell_boeing.setup.config->Configuration('harwell_boeing', parent_package, top_path)
scipy.io.harwell_boeing.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/harwell_boeing/_fortran_format_parser.py----------------------------------------
A:scipy.io.harwell_boeing._fortran_format_parser.finfo->numpy.finfo(n.dtype)
A:scipy.io.harwell_boeing._fortran_format_parser.n_exp->number_digits(np.max(np.abs([finfo.maxexp, finfo.minexp])))
A:scipy.io.harwell_boeing._fortran_format_parser.repeat->int(tokens.pop(0).value)
A:scipy.io.harwell_boeing._fortran_format_parser.self.tokens->list(TOKENS.keys())
A:scipy.io.harwell_boeing._fortran_format_parser.self.len->len(s)
A:scipy.io.harwell_boeing._fortran_format_parser.m->r.match(self.data, curpos)
A:scipy.io.harwell_boeing._fortran_format_parser.self.curpos->r.match(self.data, curpos).end()
A:scipy.io.harwell_boeing._fortran_format_parser.self.tokenizer->Tokenizer()
A:scipy.io.harwell_boeing._fortran_format_parser.t->self.tokenizer.next_token()
A:scipy.io.harwell_boeing._fortran_format_parser.next->tokens.pop(0)
A:scipy.io.harwell_boeing._fortran_format_parser.width->int(next.value)
A:scipy.io.harwell_boeing._fortran_format_parser.min->int(next.value)
A:scipy.io.harwell_boeing._fortran_format_parser.significand->int(next.value)
scipy.io.harwell_boeing._fortran_format_parser.BadFortranFormat(SyntaxError)
scipy.io.harwell_boeing._fortran_format_parser.ExpFormat(self,width,significand,min=None,repeat=None)
scipy.io.harwell_boeing._fortran_format_parser.ExpFormat.__init__(self,width,significand,min=None,repeat=None)
scipy.io.harwell_boeing._fortran_format_parser.ExpFormat.__repr__(self)
scipy.io.harwell_boeing._fortran_format_parser.ExpFormat.fortran_format(self)
scipy.io.harwell_boeing._fortran_format_parser.ExpFormat.from_number(cls,n,min=None)
scipy.io.harwell_boeing._fortran_format_parser.ExpFormat.python_format(self)
scipy.io.harwell_boeing._fortran_format_parser.FortranFormatParser(self)
scipy.io.harwell_boeing._fortran_format_parser.FortranFormatParser.__init__(self)
scipy.io.harwell_boeing._fortran_format_parser.FortranFormatParser._expect(self,token,tp)
scipy.io.harwell_boeing._fortran_format_parser.FortranFormatParser._get_min(self,tokens)
scipy.io.harwell_boeing._fortran_format_parser.FortranFormatParser._next(self,tokens,tp)
scipy.io.harwell_boeing._fortran_format_parser.FortranFormatParser._parse_format(self,tokens)
scipy.io.harwell_boeing._fortran_format_parser.FortranFormatParser.parse(self,s)
scipy.io.harwell_boeing._fortran_format_parser.IntFormat(self,width,min=None,repeat=None)
scipy.io.harwell_boeing._fortran_format_parser.IntFormat.__init__(self,width,min=None,repeat=None)
scipy.io.harwell_boeing._fortran_format_parser.IntFormat.__repr__(self)
scipy.io.harwell_boeing._fortran_format_parser.IntFormat.fortran_format(self)
scipy.io.harwell_boeing._fortran_format_parser.IntFormat.from_number(cls,n,min=None)
scipy.io.harwell_boeing._fortran_format_parser.IntFormat.python_format(self)
scipy.io.harwell_boeing._fortran_format_parser.Token(self,type,value,pos)
scipy.io.harwell_boeing._fortran_format_parser.Token.__init__(self,type,value,pos)
scipy.io.harwell_boeing._fortran_format_parser.Token.__repr__(self)
scipy.io.harwell_boeing._fortran_format_parser.Token.__str__(self)
scipy.io.harwell_boeing._fortran_format_parser.Tokenizer(self)
scipy.io.harwell_boeing._fortran_format_parser.Tokenizer.__init__(self)
scipy.io.harwell_boeing._fortran_format_parser.Tokenizer.input(self,s)
scipy.io.harwell_boeing._fortran_format_parser.Tokenizer.next_token(self)
scipy.io.harwell_boeing._fortran_format_parser.number_digits(n)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/harwell_boeing/tests/test_hb.py----------------------------------------
A:scipy.io.harwell_boeing.tests.test_hb.SIMPLE_MATRIX->coo_matrix(((0.297124379969, 0.366236668288, 0.47869621747, 0.649006864799, 0.0661749042483, 0.887037034319, 0.419647859016, 0.564960307211, 0.993442388709, 0.691233499152), np.array([[36, 70, 88, 17, 29, 44, 69, 18, 24, 51], [0, 4, 58, 61, 61, 72, 72, 73, 99, 99]])))
A:scipy.io.harwell_boeing.tests.test_hb.r->csc_matrix(r)
A:scipy.io.harwell_boeing.tests.test_hb.l->csc_matrix(l)
A:scipy.io.harwell_boeing.tests.test_hb.m->hb_read(filename)
A:scipy.io.harwell_boeing.tests.test_hb.rm->rand(100, 1000, 0.05).tocsc()
A:scipy.io.harwell_boeing.tests.test_hb.(fd, filename)->tempfile.mkstemp(suffix='rb')
scipy.io.harwell_boeing.tests.test_hb.TestHBReader(TestCase)
scipy.io.harwell_boeing.tests.test_hb.TestHBReader.test_simple(self)
scipy.io.harwell_boeing.tests.test_hb.TestRBRoundtrip(TestCase)
scipy.io.harwell_boeing.tests.test_hb.TestRBRoundtrip.test_simple(self)
scipy.io.harwell_boeing.tests.test_hb.assert_csc_almost_equal(r,l)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/io/harwell_boeing/tests/test_fortran_format.py----------------------------------------
A:scipy.io.harwell_boeing.tests.test_fortran_format.self.parser->FortranFormatParser()
A:scipy.io.harwell_boeing.tests.test_fortran_format.ret->self.parser.parse(format)
A:scipy.io.harwell_boeing.tests.test_fortran_format.f->numpy.array([1.0, -1.2])
scipy.io.harwell_boeing.tests.test_fortran_format.TestExpFormat(TestCase)
scipy.io.harwell_boeing.tests.test_fortran_format.TestExpFormat.test_from_number(self)
scipy.io.harwell_boeing.tests.test_fortran_format.TestExpFormat.test_to_fortran(self)
scipy.io.harwell_boeing.tests.test_fortran_format.TestFortranFormatParser(TestCase)
scipy.io.harwell_boeing.tests.test_fortran_format.TestFortranFormatParser._test_equal(self,format,ref)
scipy.io.harwell_boeing.tests.test_fortran_format.TestFortranFormatParser.setUp(self)
scipy.io.harwell_boeing.tests.test_fortran_format.TestFortranFormatParser.test_exp_exp(self)
scipy.io.harwell_boeing.tests.test_fortran_format.TestFortranFormatParser.test_repeat_exp(self)
scipy.io.harwell_boeing.tests.test_fortran_format.TestFortranFormatParser.test_repeat_exp_exp(self)
scipy.io.harwell_boeing.tests.test_fortran_format.TestFortranFormatParser.test_simple_exp(self)
scipy.io.harwell_boeing.tests.test_fortran_format.TestFortranFormatParser.test_simple_int(self)
scipy.io.harwell_boeing.tests.test_fortran_format.TestFortranFormatParser.test_simple_repeated_int(self)
scipy.io.harwell_boeing.tests.test_fortran_format.TestFortranFormatParser.test_wrong_formats(self)
scipy.io.harwell_boeing.tests.test_fortran_format.TestIntFormat(TestCase)
scipy.io.harwell_boeing.tests.test_fortran_format.TestIntFormat.test_from_number(self)
scipy.io.harwell_boeing.tests.test_fortran_format.TestIntFormat.test_to_fortran(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/lib/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/lib/decorator.py----------------------------------------
A:scipy.lib.decorator.kw->cls(func, name, signature, defaults, doc, module).keywords.copy()
A:scipy.lib.decorator.(self.args, self.varargs, self.varkw, self.defaults)->inspect.getargspec(f)
A:scipy.lib.decorator.self.annotations->getattr(f, '__annotations__', {})
A:scipy.lib.decorator.DEF->re.compile('\\s*def\\s*([_\\w][_\\w\\d]*)\\s*\\(')
A:scipy.lib.decorator.argspec->getfullargspec(func)
A:scipy.lib.decorator.allargs->list(self.args)
A:scipy.lib.decorator.self.shortsignature->', '.join(allargs)
A:scipy.lib.decorator.self.dict->func.__dict__.copy()
A:scipy.lib.decorator.func.__doc__->getattr(self, 'doc', None)
A:scipy.lib.decorator.func.__dict__->getattr(self, 'dict', {})
A:scipy.lib.decorator.func.__defaults__->getattr(self, 'defaults', ())
A:scipy.lib.decorator.func.func_defaults->getattr(self, 'defaults', ())
A:scipy.lib.decorator.func.__kwdefaults__->getattr(self, 'kwonlydefaults', None)
A:scipy.lib.decorator.callermodule->sys._getframe(3).f_globals.get('__name__', '?')
A:scipy.lib.decorator.func.__module__->getattr(self, 'module', callermodule)
A:scipy.lib.decorator.mo->re.compile('\\s*def\\s*([_\\w][_\\w\\d]*)\\s*\\(').match(src)
A:scipy.lib.decorator.name->re.compile('\\s*def\\s*([_\\w][_\\w\\d]*)\\s*\\(').match(src).group(1)
A:scipy.lib.decorator.names->set([name] + [arg.strip(' *') for arg in self.shortsignature.split(',')])
A:scipy.lib.decorator.code->compile(src, '<string>', 'single')
A:scipy.lib.decorator.(name, rest)->obj.strip().split('(', 1)
A:scipy.lib.decorator.self->cls(func, name, signature, defaults, doc, module)
A:scipy.lib.decorator.ibody->'\n'.join(('    ' + line for line in body.splitlines()))
A:scipy.lib.decorator.evaldict->caller.func_globals.copy()
scipy.lib.decorator.FunctionMaker(self,func=None,name=None,signature=None,defaults=None,doc=None,module=None,funcdict=None)
scipy.lib.decorator.FunctionMaker.__init__(self,func=None,name=None,signature=None,defaults=None,doc=None,module=None,funcdict=None)
scipy.lib.decorator.FunctionMaker.create(cls,obj,body,evaldict,defaults=None,doc=None,module=None,addsource=True,**attrs)
scipy.lib.decorator.FunctionMaker.make(self,src_templ,evaldict=None,addsource=False,**attrs)
scipy.lib.decorator.FunctionMaker.update(self,func,**kw)
scipy.lib.decorator.decorator(caller,func=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/lib/_util.py----------------------------------------
scipy.lib._util.DeprecatedImport(self,old_module_name,new_module_name)
scipy.lib._util.DeprecatedImport.__dir__(self)
scipy.lib._util.DeprecatedImport.__getattr__(self,name)
scipy.lib._util.DeprecatedImport.__init__(self,old_module_name,new_module_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/lib/setupscons.py----------------------------------------
A:scipy.lib.setupscons.config->Configuration('lib', parent_package, top_path, setup_name='setupscons.py')
scipy.lib.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/lib/six.py----------------------------------------
A:scipy.lib.six.MAXSIZE->int((1 << 63) - 1)
A:scipy.lib.six.result->self._resolve()
A:scipy.lib.six.module->_import_module(self.mod)
A:scipy.lib.six.movessys.modules[__name__ + '.moves']->_MovedItems('moves')
A:scipy.lib.six.get_method_function->operator.attrgetter(_meth_func)
A:scipy.lib.six.get_method_self->operator.attrgetter(_meth_self)
A:scipy.lib.six.get_function_code->operator.attrgetter(_func_code)
A:scipy.lib.six.get_function_defaults->operator.attrgetter(_func_defaults)
A:scipy.lib.six.int2byte->operator.methodcaller('to_bytes', 1, 'big')
A:scipy.lib.six.exec_->getattr(builtins, 'exec')
A:scipy.lib.six.print_->getattr(builtins, 'print')
A:scipy.lib.six.frame->sys._getframe(1)
A:scipy.lib.six.fp->kwargs.pop('file', sys.stdout)
A:scipy.lib.six.data->str(data)
A:scipy.lib.six.sep->kwargs.pop('sep', None)
A:scipy.lib.six.end->kwargs.pop('end', None)
A:scipy.lib.six.newline->unicode('\n')
A:scipy.lib.six.space->unicode(' ')
scipy.lib.six.MovedAttribute(self,name,old_mod,new_mod,old_attr=None,new_attr=None)
scipy.lib.six.MovedAttribute.__init__(self,name,old_mod,new_mod,old_attr=None,new_attr=None)
scipy.lib.six.MovedAttribute._resolve(self)
scipy.lib.six.MovedModule(self,name,old,new=None)
scipy.lib.six.MovedModule.__init__(self,name,old,new=None)
scipy.lib.six.MovedModule._resolve(self)
scipy.lib.six._LazyDescr(self,name)
scipy.lib.six._LazyDescr.__get__(self,obj,tp)
scipy.lib.six._LazyDescr.__init__(self,name)
scipy.lib.six._MovedItems(types.ModuleType)
scipy.lib.six._add_doc(func,doc)
scipy.lib.six._import_module(name)
scipy.lib.six.add_move(move)
scipy.lib.six.iteritems(d)
scipy.lib.six.iterkeys(d)
scipy.lib.six.itervalues(d)
scipy.lib.six.remove_move(name)
scipy.lib.six.with_metaclass(meta,base=object)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/lib/setup.py----------------------------------------
A:scipy.lib.setup.config->Configuration('lib', parent_package, top_path)
scipy.lib.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/lib/blas/__init__.py----------------------------------------
A:scipy.lib.blas.__init__.func->getattr(m2, func_name)
scipy.lib.blas.__init__._deprecated()
scipy.lib.blas.__init__.get_blas_funcs(names,arrays=(),debug=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/lib/blas/scons_support.py----------------------------------------
A:scipy.lib.blas.scons_support.base->str(target[0])
A:scipy.lib.blas.scons_support.target_name->str(target[0])
A:scipy.lib.blas.scons_support.source_name->str(source[0])
A:scipy.lib.blas.scons_support.f->open(target_name, 'w')
scipy.lib.blas.scons_support.do_generate_fake_interface(target,source,env)
scipy.lib.blas.scons_support.generate_interface_emitter(target,source,env)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/lib/blas/setupscons.py----------------------------------------
A:scipy.lib.blas.setupscons.config->Configuration('blas', parent_package, top_path)
scipy.lib.blas.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/lib/blas/setup.py----------------------------------------
A:scipy.lib.blas.setup.r_accel->re.compile('Accelerate')
A:scipy.lib.blas.setup.r_vec->re.compile('vecLib')
A:scipy.lib.blas.setup.config->Configuration('blas', parent_package, top_path)
A:scipy.lib.blas.setup.blas_opt->get_info('blas_opt', notfound_action=2)
A:scipy.lib.blas.setup.target->join(build_dir, target_dir, 'cblas.pyf')
A:scipy.lib.blas.setup.f->open(target, 'w')
scipy.lib.blas.setup.configuration(parent_package='',top_path=None)
scipy.lib.blas.setup.needs_cblas_wrapper(info)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/lib/blas/tests/test_fblas.py----------------------------------------
A:scipy.lib.blas.tests.test_fblas.c->c.reshape((a.shape[0],)).reshape((a.shape[0],))
A:scipy.lib.blas.tests.test_fblas.x->arange(12.0, dtype=self.dtype)
A:scipy.lib.blas.tests.test_fblas.y->self.blas_func(1, a, x, 1, y, trans=1, incy=3)
A:scipy.lib.blas.tests.test_fblas.real_x->arange(12.0, dtype=self.dtype).copy()
A:scipy.lib.blas.tests.test_fblas.desired_x->self.blas_func(1, a, x, 1, y, trans=1, incy=3).copy()
A:scipy.lib.blas.tests.test_fblas.desired_y->self.blas_func(1, a, x, 1, y, trans=1, incy=3).copy()
A:scipy.lib.blas.tests.test_fblas.mult->array(1 + 1j, dtype=self.dtype)
A:scipy.lib.blas.tests.test_fblas.(alpha, beta, a, x, y)->self.get_data(y_stride=2)
scipy.lib.blas.tests.test_fblas.BaseAxpy(object)
scipy.lib.blas.tests.test_fblas.BaseAxpy.test_default_a(self)
scipy.lib.blas.tests.test_fblas.BaseAxpy.test_simple(self)
scipy.lib.blas.tests.test_fblas.BaseAxpy.test_x_and_y_stride(self)
scipy.lib.blas.tests.test_fblas.BaseAxpy.test_x_bad_size(self)
scipy.lib.blas.tests.test_fblas.BaseAxpy.test_x_stride(self)
scipy.lib.blas.tests.test_fblas.BaseAxpy.test_y_bad_size(self)
scipy.lib.blas.tests.test_fblas.BaseAxpy.test_y_stride(self)
scipy.lib.blas.tests.test_fblas.BaseCopy(object)
scipy.lib.blas.tests.test_fblas.BaseCopy.test_simple(self)
scipy.lib.blas.tests.test_fblas.BaseCopy.test_x_and_y_stride(self)
scipy.lib.blas.tests.test_fblas.BaseCopy.test_x_bad_size(self)
scipy.lib.blas.tests.test_fblas.BaseCopy.test_x_stride(self)
scipy.lib.blas.tests.test_fblas.BaseCopy.test_y_bad_size(self)
scipy.lib.blas.tests.test_fblas.BaseCopy.test_y_stride(self)
scipy.lib.blas.tests.test_fblas.BaseGemv(object)
scipy.lib.blas.tests.test_fblas.BaseGemv.get_data(self,x_stride=1,y_stride=1)
scipy.lib.blas.tests.test_fblas.BaseGemv.test_default_beta_y(self)
scipy.lib.blas.tests.test_fblas.BaseGemv.test_simple(self)
scipy.lib.blas.tests.test_fblas.BaseGemv.test_simple_transpose(self)
scipy.lib.blas.tests.test_fblas.BaseGemv.test_simple_transpose_conj(self)
scipy.lib.blas.tests.test_fblas.BaseGemv.test_x_stride(self)
scipy.lib.blas.tests.test_fblas.BaseGemv.test_x_stride_assert(self)
scipy.lib.blas.tests.test_fblas.BaseGemv.test_x_stride_transpose(self)
scipy.lib.blas.tests.test_fblas.BaseGemv.test_y_stride(self)
scipy.lib.blas.tests.test_fblas.BaseGemv.test_y_stride_assert(self)
scipy.lib.blas.tests.test_fblas.BaseGemv.test_y_stride_transpose(self)
scipy.lib.blas.tests.test_fblas.BaseScal(object)
scipy.lib.blas.tests.test_fblas.BaseScal.test_simple(self)
scipy.lib.blas.tests.test_fblas.BaseScal.test_x_bad_size(self)
scipy.lib.blas.tests.test_fblas.BaseScal.test_x_stride(self)
scipy.lib.blas.tests.test_fblas.BaseSwap(object)
scipy.lib.blas.tests.test_fblas.BaseSwap.test_simple(self)
scipy.lib.blas.tests.test_fblas.BaseSwap.test_x_and_y_stride(self)
scipy.lib.blas.tests.test_fblas.BaseSwap.test_x_bad_size(self)
scipy.lib.blas.tests.test_fblas.BaseSwap.test_x_stride(self)
scipy.lib.blas.tests.test_fblas.BaseSwap.test_y_bad_size(self)
scipy.lib.blas.tests.test_fblas.BaseSwap.test_y_stride(self)
scipy.lib.blas.tests.test_fblas.TestDaxpy(TestCase,BaseAxpy)
scipy.lib.blas.tests.test_fblas.TestDcopy(TestCase,BaseCopy)
scipy.lib.blas.tests.test_fblas.TestDgemv(TestCase,BaseGemv)
scipy.lib.blas.tests.test_fblas.TestDscal(TestCase,BaseScal)
scipy.lib.blas.tests.test_fblas.TestDswap(TestCase,BaseSwap)
scipy.lib.blas.tests.test_fblas.TestZaxpy(TestCase,BaseAxpy)
scipy.lib.blas.tests.test_fblas.TestZcopy(TestCase,BaseCopy)
scipy.lib.blas.tests.test_fblas.TestZgemv(TestCase,BaseGemv)
scipy.lib.blas.tests.test_fblas.TestZscal(TestCase,BaseScal)
scipy.lib.blas.tests.test_fblas.TestZswap(TestCase,BaseSwap)
scipy.lib.blas.tests.test_fblas.matrixmultiply(a,b)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/lib/blas/tests/test_blas.py----------------------------------------
A:scipy.lib.blas.tests.test_blas.f->getattr(fblas, p + 'gemm', None)
A:scipy.lib.blas.tests.test_blas.(x1, y1)->f(x, y)
A:scipy.lib.blas.tests.test_blas.a->array([[1, 1, 1]])
A:scipy.lib.blas.tests.test_blas.b->array([[1], [1], [1]])
A:scipy.lib.blas.tests.test_blas.warn_ctx->WarningManager()
A:scipy.lib.blas.tests.test_blas.(gemm,)->get_blas_funcs(('gemm',), (a, b))
scipy.lib.blas.tests.test_blas.TestBLAS(TestCase)
scipy.lib.blas.tests.test_blas.TestBLAS.test_blas(self)
scipy.lib.blas.tests.test_blas.TestCBLAS1Simple(TestCase)
scipy.lib.blas.tests.test_blas.TestCBLAS1Simple.test_axpy(self)
scipy.lib.blas.tests.test_blas.TestFBLAS1Simple(TestCase)
scipy.lib.blas.tests.test_blas.TestFBLAS1Simple.test_amax(self)
scipy.lib.blas.tests.test_blas.TestFBLAS1Simple.test_asum(self)
scipy.lib.blas.tests.test_blas.TestFBLAS1Simple.test_axpy(self)
scipy.lib.blas.tests.test_blas.TestFBLAS1Simple.test_copy(self)
scipy.lib.blas.tests.test_blas.TestFBLAS1Simple.test_dot(self)
scipy.lib.blas.tests.test_blas.TestFBLAS1Simple.test_nrm2(self)
scipy.lib.blas.tests.test_blas.TestFBLAS1Simple.test_scal(self)
scipy.lib.blas.tests.test_blas.TestFBLAS1Simple.test_swap(self)
scipy.lib.blas.tests.test_blas.TestFBLAS2Simple(TestCase)
scipy.lib.blas.tests.test_blas.TestFBLAS2Simple.test_gemv(self)
scipy.lib.blas.tests.test_blas.TestFBLAS2Simple.test_ger(self)
scipy.lib.blas.tests.test_blas.TestFBLAS3Simple(TestCase)
scipy.lib.blas.tests.test_blas.TestFBLAS3Simple.test_gemm(self)
scipy.lib.blas.tests.test_blas.TestFBLAS3Simple.test_gemm2(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/lib/lapack/__init__.py----------------------------------------
A:scipy.lib.lapack.__init__.func->new.function(func_code, {'clapack_func': func2}, func_name)
A:scipy.lib.lapack.__init__.func2->getattr(m2, func_name, None)
scipy.lib.lapack.__init__._deprecated()
scipy.lib.lapack.__init__.get_lapack_funcs(names,arrays=(),debug=0,force_clapack=1)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/lib/lapack/scons_support.py----------------------------------------
A:scipy.lib.lapack.scons_support.base->str(target[0])
A:scipy.lib.lapack.scons_support.target_name->str(target[0])
A:scipy.lib.lapack.scons_support.source_name->str(source[0])
A:scipy.lib.lapack.scons_support.f->open(target_name, 'w')
scipy.lib.lapack.scons_support.do_generate_fake_interface(target,source,env)
scipy.lib.lapack.scons_support.generate_interface_emitter(target,source,env)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/lib/lapack/setupscons.py----------------------------------------
A:scipy.lib.lapack.setupscons.config->Configuration('lapack', parent_package, top_path)
scipy.lib.lapack.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/lib/lapack/setup.py----------------------------------------
A:scipy.lib.lapack.setup.config->Configuration('lapack', parent_package, top_path)
A:scipy.lib.lapack.setup.lapack_opt->get_info('lapack_opt', notfound_action=2)
A:scipy.lib.lapack.setup.target->os.path.join(build_dir, target_dir, 'clapack.pyf')
A:scipy.lib.lapack.setup.f->open(target, 'w')
scipy.lib.lapack.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/lib/lapack/tests/test_gesv.py----------------------------------------
A:scipy.lib.lapack.tests.test_gesv.A->numpy.array([[1, 2, 3], [2, 2, 3], [3, 3, 6]])
A:scipy.lib.lapack.tests.test_gesv.B->numpy.array([[10, -1, 1], [-1, 8, -2], [1, -2, 6]])
A:scipy.lib.lapack.tests.test_gesv.a->numpy.array([[1, 2, 3], [2, 2, 3], [3, 3, 6]]).astype(tp)
A:scipy.lib.lapack.tests.test_gesv.b->numpy.array([[10, -1, 1], [-1, 8, -2], [1, -2, 6]]).astype(tp)
A:scipy.lib.lapack.tests.test_gesv.(w, v, info)->f(a, b, itype=itype)
scipy.lib.lapack.tests.test_gesv.TestSygv(TestCase)
scipy.lib.lapack.tests.test_gesv.TestSygv._test_base(self,func,lang,itype)
scipy.lib.lapack.tests.test_gesv.TestSygv.test_clapack_dsygv_1(self)
scipy.lib.lapack.tests.test_gesv.TestSygv.test_clapack_dsygv_2(self)
scipy.lib.lapack.tests.test_gesv.TestSygv.test_clapack_dsygv_3(self)
scipy.lib.lapack.tests.test_gesv.TestSygv.test_clapack_ssygv_1(self)
scipy.lib.lapack.tests.test_gesv.TestSygv.test_clapack_ssygv_2(self)
scipy.lib.lapack.tests.test_gesv.TestSygv.test_clapack_ssygv_3(self)
scipy.lib.lapack.tests.test_gesv.TestSygv.test_dsygv_1(self)
scipy.lib.lapack.tests.test_gesv.TestSygv.test_dsygv_2(self)
scipy.lib.lapack.tests.test_gesv.TestSygv.test_dsygv_3(self)
scipy.lib.lapack.tests.test_gesv.TestSygv.test_ssygv_1(self)
scipy.lib.lapack.tests.test_gesv.TestSygv.test_ssygv_2(self)
scipy.lib.lapack.tests.test_gesv.TestSygv.test_ssygv_3(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/lib/lapack/tests/test_lapack.py----------------------------------------
A:scipy.lib.lapack.tests.test_lapack.a->numpy.array([[-149, -50, -154], [537, 180, 546], [-27, -9, -25]]).astype(tp)
A:scipy.lib.lapack.tests.test_lapack.a1->numpy.array([[1, 0, 0, 0.0003], [4, 0, 0, 0.002], [7, 1, 0, 0], [0, 1, 0, 0]]).astype(tp)
A:scipy.lib.lapack.tests.test_lapack.(ba, lo, hi, pivscale, info)->f(a1, permute=1, scale=1)
A:scipy.lib.lapack.tests.test_lapack.(ht, tau, info)->f(a)
scipy.lib.lapack.tests.test_lapack.TestLapack(TestCase)
scipy.lib.lapack.tests.test_lapack.TestLapack._test_gebal_base(self,func,lang)
scipy.lib.lapack.tests.test_lapack.TestLapack._test_gehrd_base(self,func,lang)
scipy.lib.lapack.tests.test_lapack.TestLapack.test_clapack_dgebal(self)
scipy.lib.lapack.tests.test_lapack.TestLapack.test_clapack_dgehrd(self)
scipy.lib.lapack.tests.test_lapack.TestLapack.test_clapack_sgebal(self)
scipy.lib.lapack.tests.test_lapack.TestLapack.test_clapack_sgehrd(self)
scipy.lib.lapack.tests.test_lapack.TestLapack.test_dgebal(self)
scipy.lib.lapack.tests.test_lapack.TestLapack.test_dgehrd(self)
scipy.lib.lapack.tests.test_lapack.TestLapack.test_sgebal(self)
scipy.lib.lapack.tests.test_lapack.TestLapack.test_sgehrd(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/lib/lapack/tests/common.py----------------------------------------
A:scipy.lib.lapack.tests.common.FUNCS_FLAPACK[f]->getattr(flapack, f)
A:scipy.lib.lapack.tests.common.FUNCS_CLAPACK[f]->getattr(clapack, f)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/lib/lapack/tests/test_esv.py----------------------------------------
A:scipy.lib.lapack.tests.test_esv.SYEV_ARG->numpy.array([[1, 2, 3], [2, 2, 3], [3, 3, 6]])
A:scipy.lib.lapack.tests.test_esv.SYEV_REF->numpy.array([-0.6699243371851366, 0.4876938861533345, 9.182230451031804])
A:scipy.lib.lapack.tests.test_esv.a->numpy.array([[1, 2, 3], [2, 2, 3], [3, 3, 6]]).astype(tp)
A:scipy.lib.lapack.tests.test_esv.(w, v, info)->f(a, vrange=vrange)
A:scipy.lib.lapack.tests.test_esv.rslice->slice(irange[0], irange[1] + 1)
scipy.lib.lapack.tests.test_esv.TestEsv(TestCase)
scipy.lib.lapack.tests.test_esv.TestEsv._test_base(self,func,lang)
scipy.lib.lapack.tests.test_esv.TestEsv._test_base_irange(self,func,irange,lang)
scipy.lib.lapack.tests.test_esv.TestEsv._test_base_vrange(self,func,vrange,lang)
scipy.lib.lapack.tests.test_esv.TestEsv._test_syevr_ranges(self,func,lang)
scipy.lib.lapack.tests.test_esv.TestEsv.test_clapack_dsyev(self)
scipy.lib.lapack.tests.test_esv.TestEsv.test_clapack_dsyevr(self)
scipy.lib.lapack.tests.test_esv.TestEsv.test_clapack_dsyevr_ranges(self)
scipy.lib.lapack.tests.test_esv.TestEsv.test_clapack_ssyev(self)
scipy.lib.lapack.tests.test_esv.TestEsv.test_clapack_ssyevr(self)
scipy.lib.lapack.tests.test_esv.TestEsv.test_clapack_ssyevr_ranges(self)
scipy.lib.lapack.tests.test_esv.TestEsv.test_dsyev(self)
scipy.lib.lapack.tests.test_esv.TestEsv.test_dsyevr(self)
scipy.lib.lapack.tests.test_esv.TestEsv.test_dsyevr_ranges(self)
scipy.lib.lapack.tests.test_esv.TestEsv.test_ssyev(self)
scipy.lib.lapack.tests.test_esv.TestEsv.test_ssyevr(self)
scipy.lib.lapack.tests.test_esv.TestEsv.test_ssyevr_ranges(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/fftpack/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/fftpack/pseudo_diffs.py----------------------------------------
A:scipy.fftpack.pseudo_diffs.tmp->asarray(x)
A:scipy.fftpack.pseudo_diffs.n->len(x)
A:scipy.fftpack.pseudo_diffs.omega->_cache.get((n, a))
A:scipy.fftpack.pseudo_diffs.overwrite_x->_datacopied(tmp, x)
A:scipy.fftpack.pseudo_diffs.omega_real->convolve.init_convolution_kernel(n, kernel_real, d=0, zero_nyquist=0)
A:scipy.fftpack.pseudo_diffs.omega_imag->convolve.init_convolution_kernel(n, kernel_imag, d=1, zero_nyquist=0)
scipy.fftpack.cc_diff(x,a,b,period=None,_cache=_cache)
scipy.fftpack.cs_diff(x,a,b,period=None,_cache=_cache)
scipy.fftpack.diff(x,order=1,period=None,_cache=_cache)
scipy.fftpack.hilbert(x,_cache=_cache)
scipy.fftpack.ihilbert(x)
scipy.fftpack.itilbert(x,h,period=None,_cache=_cache)
scipy.fftpack.pseudo_diffs.cc_diff(x,a,b,period=None,_cache=_cache)
scipy.fftpack.pseudo_diffs.cs_diff(x,a,b,period=None,_cache=_cache)
scipy.fftpack.pseudo_diffs.diff(x,order=1,period=None,_cache=_cache)
scipy.fftpack.pseudo_diffs.hilbert(x,_cache=_cache)
scipy.fftpack.pseudo_diffs.ihilbert(x)
scipy.fftpack.pseudo_diffs.itilbert(x,h,period=None,_cache=_cache)
scipy.fftpack.pseudo_diffs.sc_diff(x,a,b,period=None,_cache=_cache)
scipy.fftpack.pseudo_diffs.shift(x,a,period=None,_cache=_cache)
scipy.fftpack.pseudo_diffs.ss_diff(x,a,b,period=None,_cache=_cache)
scipy.fftpack.pseudo_diffs.tilbert(x,h,period=None,_cache=_cache)
scipy.fftpack.sc_diff(x,a,b,period=None,_cache=_cache)
scipy.fftpack.shift(x,a,period=None,_cache=_cache)
scipy.fftpack.ss_diff(x,a,b,period=None,_cache=_cache)
scipy.fftpack.tilbert(x,h,period=None,_cache=_cache)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/fftpack/setupscons.py----------------------------------------
A:scipy.fftpack.setupscons.config->Configuration('fftpack', parent_package, top_path)
scipy.fftpack.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/fftpack/basic.py----------------------------------------
A:scipy.fftpack.basic.n->int(n)
A:scipy.fftpack.basic.ret->numpy.asarray(x)
A:scipy.fftpack.basic.s->tuple(s)
A:scipy.fftpack.basic.index[axis]->slice(0, s[axis])
A:scipy.fftpack.basic.z->zeros(s, x.dtype.char)
A:scipy.fftpack.basic.(x, copy_made)->_fix_shape(x, s[i], waxes[i])
A:scipy.fftpack.basic.r->numpy.swapaxes(r, -i, axes[-i])
A:scipy.fftpack.basic.x->numpy.swapaxes(x, axes[-i], -i)
A:scipy.fftpack.basic.tmp->_asfarray(x)
A:scipy.fftpack.basic.(tmp, copy_made)->_fix_shape(tmp, n, axis)
A:scipy.fftpack.basic.axes->list(range(-x.ndim, 0))
A:scipy.fftpack.basic.id->numpy.argsort(axes)
A:scipy.fftpack.basic.waxes->list(range(x.ndim - len(axes), x.ndim))
A:scipy.fftpack.basic.shape->numpy.ones(x.ndim)
scipy.fftpack._asfarray(x)
scipy.fftpack._datacopied(arr,original)
scipy.fftpack._fake_cfft(x,n,*a,**kw)
scipy.fftpack._fake_cfftnd(x,shape,*a,**kw)
scipy.fftpack._fake_crfft(x,n,*a,**kw)
scipy.fftpack._fake_rfft(x,n,*a,**kw)
scipy.fftpack._fix_shape(x,n,axis)
scipy.fftpack._is_safe_size(n)
scipy.fftpack._raw_fft(x,n,axis,direction,overwrite_x,work_function)
scipy.fftpack._raw_fftn_dispatch(x,shape,axes,overwrite_x,direction)
scipy.fftpack._raw_fftnd(x,s,axes,direction,overwrite_x,work_function)
scipy.fftpack.basic._asfarray(x)
scipy.fftpack.basic._datacopied(arr,original)
scipy.fftpack.basic._fake_cfft(x,n,*a,**kw)
scipy.fftpack.basic._fake_cfftnd(x,shape,*a,**kw)
scipy.fftpack.basic._fake_crfft(x,n,*a,**kw)
scipy.fftpack.basic._fake_rfft(x,n,*a,**kw)
scipy.fftpack.basic._fix_shape(x,n,axis)
scipy.fftpack.basic._is_safe_size(n)
scipy.fftpack.basic._raw_fft(x,n,axis,direction,overwrite_x,work_function)
scipy.fftpack.basic._raw_fftn_dispatch(x,shape,axes,overwrite_x,direction)
scipy.fftpack.basic._raw_fftnd(x,s,axes,direction,overwrite_x,work_function)
scipy.fftpack.basic.fft(x,n=None,axis=-1,overwrite_x=0)
scipy.fftpack.basic.fft2(x,shape=None,axes=(-2,-1),overwrite_x=0)
scipy.fftpack.basic.fftn(x,shape=None,axes=None,overwrite_x=0)
scipy.fftpack.basic.ifft(x,n=None,axis=-1,overwrite_x=0)
scipy.fftpack.basic.ifft2(x,shape=None,axes=(-2,-1),overwrite_x=0)
scipy.fftpack.basic.ifftn(x,shape=None,axes=None,overwrite_x=0)
scipy.fftpack.basic.irfft(x,n=None,axis=-1,overwrite_x=0)
scipy.fftpack.basic.istype(arr,typeclass)
scipy.fftpack.basic.rfft(x,n=None,axis=-1,overwrite_x=0)
scipy.fftpack.fft(x,n=None,axis=-1,overwrite_x=0)
scipy.fftpack.fft2(x,shape=None,axes=(-2,-1),overwrite_x=0)
scipy.fftpack.fftn(x,shape=None,axes=None,overwrite_x=0)
scipy.fftpack.ifft(x,n=None,axis=-1,overwrite_x=0)
scipy.fftpack.ifft2(x,shape=None,axes=(-2,-1),overwrite_x=0)
scipy.fftpack.ifftn(x,shape=None,axes=None,overwrite_x=0)
scipy.fftpack.irfft(x,n=None,axis=-1,overwrite_x=0)
scipy.fftpack.istype(arr,typeclass)
scipy.fftpack.rfft(x,n=None,axis=-1,overwrite_x=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/fftpack/fftpack_version.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/fftpack/setup.py----------------------------------------
A:scipy.fftpack.setup.config->Configuration('fftpack', parent_package, top_path)
scipy.fftpack.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/fftpack/realtransforms.py----------------------------------------
A:scipy.fftpack.realtransforms.tmp->f(tmp, n, nm, overwrite_x)
scipy.fftpack._dct(x,type,n=None,axis=-1,overwrite_x=0,normalize=None)
scipy.fftpack._dst(x,type,n=None,axis=-1,overwrite_x=0,normalize=None)
scipy.fftpack.dct(x,type=2,n=None,axis=-1,norm=None,overwrite_x=0)
scipy.fftpack.dst(x,type=2,n=None,axis=-1,norm=None,overwrite_x=0)
scipy.fftpack.idct(x,type=2,n=None,axis=-1,norm=None,overwrite_x=0)
scipy.fftpack.idst(x,type=2,n=None,axis=-1,norm=None,overwrite_x=0)
scipy.fftpack.realtransforms._dct(x,type,n=None,axis=-1,overwrite_x=0,normalize=None)
scipy.fftpack.realtransforms._dst(x,type,n=None,axis=-1,overwrite_x=0,normalize=None)
scipy.fftpack.realtransforms.dct(x,type=2,n=None,axis=-1,norm=None,overwrite_x=0)
scipy.fftpack.realtransforms.dst(x,type=2,n=None,axis=-1,norm=None,overwrite_x=0)
scipy.fftpack.realtransforms.idct(x,type=2,n=None,axis=-1,norm=None,overwrite_x=0)
scipy.fftpack.realtransforms.idst(x,type=2,n=None,axis=-1,norm=None,overwrite_x=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/fftpack/helper.py----------------------------------------
scipy.fftpack.helper.rfftfreq(n,d=1.0)
scipy.fftpack.rfftfreq(n,d=1.0)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/fftpack/tests/gen_fftw_ref.py----------------------------------------
A:scipy.fftpack.tests.gen_fftw_ref.a->Popen([pg, str(type), str(sz)], stdout=PIPE, stderr=STDOUT)
A:scipy.fftpack.tests.gen_fftw_ref.arrays[type][sz]->numpy.fromstring(','.join(st), sep=',', dtype=dt)
A:scipy.fftpack.tests.gen_fftw_ref.data->gen_data(np.float64)
scipy.fftpack.tests.gen_fftw_ref.gen_data(dt)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/fftpack/tests/gendata.py----------------------------------------
A:scipy.fftpack.tests.gendata.m->loadmat('test.mat', squeeze_me=True, struct_as_record=True, mat_dtype=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/fftpack/tests/test_basic.py----------------------------------------
A:scipy.fftpack.tests.test_basic.data->data.astype(dtype).astype(dtype)
A:scipy.fftpack.tests.test_basic.x->numpy.random.randn(10).astype(np.longcomplex)
A:scipy.fftpack.tests.test_basic.n->len(x)
A:scipy.fftpack.tests.test_basic.y->routine(fake(x2), fftsize, axis, overwrite_x=overwrite_x)
A:scipy.fftpack.tests.test_basic.y[i]->dot(exp(i * w), x)
A:scipy.fftpack.tests.test_basic.r->zeros(n, dtype=double)
A:scipy.fftpack.tests.test_basic.x1->zeros((n,), dtype=cdouble)
A:scipy.fftpack.tests.test_basic.y1->fftn(x.real.astype(np.float32))
A:scipy.fftpack.tests.test_basic.x2->numpy.random.randn(10).astype(np.longcomplex).copy()
A:scipy.fftpack.tests.test_basic.y2->fftn(x.real.astype(np.float64)).astype(np.complex64)
A:scipy.fftpack.tests.test_basic.y_r->numpy.array(fftn(x), np.complex64)
A:scipy.fftpack.tests.test_basic.large_x1->array([[1, 2, 3, 0], [4, 5, 6, 0], [7, 8, 9, 0], [0, 0, 0, 0]])
A:scipy.fftpack.tests.test_basic.part_shape->tuple(np.take(shape, axes))
scipy.fftpack.tests.test_FakeArray(self,data)
scipy.fftpack.tests.test_FakeArray2(self,data)
scipy.fftpack.tests.test_FakeArray2.__array__(self)
scipy.fftpack.tests.test_TestDoubleFFT(_TestFFTBase)
scipy.fftpack.tests.test_TestDoubleFFT.setUp(self)
scipy.fftpack.tests.test_TestDoubleIFFT(_TestIFFTBase)
scipy.fftpack.tests.test_TestDoubleIFFT.setUp(self)
scipy.fftpack.tests.test_TestFftn(TestCase)
scipy.fftpack.tests.test_TestFftn.setUp(self)
scipy.fftpack.tests.test_TestFftn.test_axes_argument(self)
scipy.fftpack.tests.test_TestFftn.test_definition(self)
scipy.fftpack.tests.test_TestFftn.test_shape_argument(self)
scipy.fftpack.tests.test_TestFftn.test_shape_argument_more(self)
scipy.fftpack.tests.test_TestFftn.test_shape_axes_argument(self)
scipy.fftpack.tests.test_TestFftn.test_shape_axes_argument2(self)
scipy.fftpack.tests.test_TestFftnSingle(TestCase)
scipy.fftpack.tests.test_TestFftnSingle.setUp(self)
scipy.fftpack.tests.test_TestFftnSingle.test_definition(self)
scipy.fftpack.tests.test_TestFftnSingle.test_size_accuracy(self)
scipy.fftpack.tests.test_TestIRFFTDouble(_TestIRFFTBase)
scipy.fftpack.tests.test_TestIRFFTDouble.setUp(self)
scipy.fftpack.tests.test_TestIRFFTSingle(_TestIRFFTBase)
scipy.fftpack.tests.test_TestIRFFTSingle.setUp(self)
scipy.fftpack.tests.test_TestIfftnDouble(_TestIfftn)
scipy.fftpack.tests.test_TestIfftnSingle(_TestIfftn)
scipy.fftpack.tests.test_TestLongDoubleFailure(TestCase)
scipy.fftpack.tests.test_TestLongDoubleFailure.setUp(self)
scipy.fftpack.tests.test_TestLongDoubleFailure.test_complex(self)
scipy.fftpack.tests.test_TestLongDoubleFailure.test_real(self)
scipy.fftpack.tests.test_TestOverwrite(object)
scipy.fftpack.tests.test_TestOverwrite._check(self,x,routine,fftsize,axis,overwrite_x,should_overwrite)
scipy.fftpack.tests.test_TestOverwrite._check_1d(self,routine,dtype,shape,axis,overwritable_dtypes)
scipy.fftpack.tests.test_TestOverwrite._check_nd(self,routine,dtype,overwritable)
scipy.fftpack.tests.test_TestOverwrite._check_nd_one(self,routine,dtype,shape,axes,overwritable_dtypes)
scipy.fftpack.tests.test_TestOverwrite.test_fft(self)
scipy.fftpack.tests.test_TestOverwrite.test_fftn(self)
scipy.fftpack.tests.test_TestOverwrite.test_ifft(self)
scipy.fftpack.tests.test_TestOverwrite.test_ifftn(self)
scipy.fftpack.tests.test_TestOverwrite.test_irfft(self)
scipy.fftpack.tests.test_TestOverwrite.test_rfft(self)
scipy.fftpack.tests.test_TestRFFTDouble(_TestRFFTBase)
scipy.fftpack.tests.test_TestRFFTDouble.setUp(self)
scipy.fftpack.tests.test_TestRFFTSingle(_TestRFFTBase)
scipy.fftpack.tests.test_TestRFFTSingle.setUp(self)
scipy.fftpack.tests.test_TestSingleFFT(_TestFFTBase)
scipy.fftpack.tests.test_TestSingleFFT.setUp(self)
scipy.fftpack.tests.test_TestSingleFFT.test_notice(self)
scipy.fftpack.tests.test_TestSingleIFFT(_TestIFFTBase)
scipy.fftpack.tests.test_TestSingleIFFT.setUp(self)
scipy.fftpack.tests.test_Testfft2(TestCase)
scipy.fftpack.tests.test_Testfft2.setUp(self)
scipy.fftpack.tests.test_Testfft2.test_regression_244(self)
scipy.fftpack.tests.test__TestFFTBase(TestCase)
scipy.fftpack.tests.test__TestFFTBase._test_n_argument_complex(self)
scipy.fftpack.tests.test__TestFFTBase.setUp(self)
scipy.fftpack.tests.test__TestFFTBase.test_definition(self)
scipy.fftpack.tests.test__TestFFTBase.test_djbfft(self)
scipy.fftpack.tests.test__TestFFTBase.test_n_argument_real(self)
scipy.fftpack.tests.test__TestIFFTBase(TestCase)
scipy.fftpack.tests.test__TestIFFTBase.setUp(self)
scipy.fftpack.tests.test__TestIFFTBase.test_definition(self)
scipy.fftpack.tests.test__TestIFFTBase.test_definition_real(self)
scipy.fftpack.tests.test__TestIFFTBase.test_djbfft(self)
scipy.fftpack.tests.test__TestIFFTBase.test_random_complex(self)
scipy.fftpack.tests.test__TestIFFTBase.test_random_real(self)
scipy.fftpack.tests.test__TestIFFTBase.test_size_accuracy(self)
scipy.fftpack.tests.test__TestIRFFTBase(TestCase)
scipy.fftpack.tests.test__TestIRFFTBase.setUp(self)
scipy.fftpack.tests.test__TestIRFFTBase.test_definition(self)
scipy.fftpack.tests.test__TestIRFFTBase.test_djbfft(self)
scipy.fftpack.tests.test__TestIRFFTBase.test_random_real(self)
scipy.fftpack.tests.test__TestIRFFTBase.test_size_accuracy(self)
scipy.fftpack.tests.test__TestIfftn(TestCase)
scipy.fftpack.tests.test__TestIfftn.setUp(self)
scipy.fftpack.tests.test__TestIfftn.test_definition(self)
scipy.fftpack.tests.test__TestIfftn.test_random_complex(self)
scipy.fftpack.tests.test__TestRFFTBase(TestCase)
scipy.fftpack.tests.test__TestRFFTBase.setUp(self)
scipy.fftpack.tests.test__TestRFFTBase.test_definition(self)
scipy.fftpack.tests.test__TestRFFTBase.test_djbfft(self)
scipy.fftpack.tests.test_basic.FakeArray(self,data)
scipy.fftpack.tests.test_basic.FakeArray.__init__(self,data)
scipy.fftpack.tests.test_basic.FakeArray2(self,data)
scipy.fftpack.tests.test_basic.FakeArray2.__array__(self)
scipy.fftpack.tests.test_basic.FakeArray2.__init__(self,data)
scipy.fftpack.tests.test_basic.TestDoubleFFT(_TestFFTBase)
scipy.fftpack.tests.test_basic.TestDoubleFFT.setUp(self)
scipy.fftpack.tests.test_basic.TestDoubleIFFT(_TestIFFTBase)
scipy.fftpack.tests.test_basic.TestDoubleIFFT.setUp(self)
scipy.fftpack.tests.test_basic.TestFftn(TestCase)
scipy.fftpack.tests.test_basic.TestFftn.setUp(self)
scipy.fftpack.tests.test_basic.TestFftn.test_axes_argument(self)
scipy.fftpack.tests.test_basic.TestFftn.test_definition(self)
scipy.fftpack.tests.test_basic.TestFftn.test_shape_argument(self)
scipy.fftpack.tests.test_basic.TestFftn.test_shape_argument_more(self)
scipy.fftpack.tests.test_basic.TestFftn.test_shape_axes_argument(self)
scipy.fftpack.tests.test_basic.TestFftn.test_shape_axes_argument2(self)
scipy.fftpack.tests.test_basic.TestFftnSingle(TestCase)
scipy.fftpack.tests.test_basic.TestFftnSingle.setUp(self)
scipy.fftpack.tests.test_basic.TestFftnSingle.test_definition(self)
scipy.fftpack.tests.test_basic.TestFftnSingle.test_size_accuracy(self)
scipy.fftpack.tests.test_basic.TestIRFFTDouble(_TestIRFFTBase)
scipy.fftpack.tests.test_basic.TestIRFFTDouble.setUp(self)
scipy.fftpack.tests.test_basic.TestIRFFTSingle(_TestIRFFTBase)
scipy.fftpack.tests.test_basic.TestIRFFTSingle.setUp(self)
scipy.fftpack.tests.test_basic.TestIfftnDouble(_TestIfftn)
scipy.fftpack.tests.test_basic.TestIfftnSingle(_TestIfftn)
scipy.fftpack.tests.test_basic.TestLongDoubleFailure(TestCase)
scipy.fftpack.tests.test_basic.TestLongDoubleFailure.setUp(self)
scipy.fftpack.tests.test_basic.TestLongDoubleFailure.test_complex(self)
scipy.fftpack.tests.test_basic.TestLongDoubleFailure.test_real(self)
scipy.fftpack.tests.test_basic.TestOverwrite(object)
scipy.fftpack.tests.test_basic.TestOverwrite._check(self,x,routine,fftsize,axis,overwrite_x,should_overwrite)
scipy.fftpack.tests.test_basic.TestOverwrite._check_1d(self,routine,dtype,shape,axis,overwritable_dtypes)
scipy.fftpack.tests.test_basic.TestOverwrite._check_nd(self,routine,dtype,overwritable)
scipy.fftpack.tests.test_basic.TestOverwrite._check_nd_one(self,routine,dtype,shape,axes,overwritable_dtypes)
scipy.fftpack.tests.test_basic.TestOverwrite.test_fft(self)
scipy.fftpack.tests.test_basic.TestOverwrite.test_fftn(self)
scipy.fftpack.tests.test_basic.TestOverwrite.test_ifft(self)
scipy.fftpack.tests.test_basic.TestOverwrite.test_ifftn(self)
scipy.fftpack.tests.test_basic.TestOverwrite.test_irfft(self)
scipy.fftpack.tests.test_basic.TestOverwrite.test_rfft(self)
scipy.fftpack.tests.test_basic.TestRFFTDouble(_TestRFFTBase)
scipy.fftpack.tests.test_basic.TestRFFTDouble.setUp(self)
scipy.fftpack.tests.test_basic.TestRFFTSingle(_TestRFFTBase)
scipy.fftpack.tests.test_basic.TestRFFTSingle.setUp(self)
scipy.fftpack.tests.test_basic.TestSingleFFT(_TestFFTBase)
scipy.fftpack.tests.test_basic.TestSingleFFT.setUp(self)
scipy.fftpack.tests.test_basic.TestSingleFFT.test_notice(self)
scipy.fftpack.tests.test_basic.TestSingleIFFT(_TestIFFTBase)
scipy.fftpack.tests.test_basic.TestSingleIFFT.setUp(self)
scipy.fftpack.tests.test_basic.Testfft2(TestCase)
scipy.fftpack.tests.test_basic.Testfft2.setUp(self)
scipy.fftpack.tests.test_basic.Testfft2.test_regression_244(self)
scipy.fftpack.tests.test_basic._TestFFTBase(TestCase)
scipy.fftpack.tests.test_basic._TestFFTBase._test_n_argument_complex(self)
scipy.fftpack.tests.test_basic._TestFFTBase.setUp(self)
scipy.fftpack.tests.test_basic._TestFFTBase.test_definition(self)
scipy.fftpack.tests.test_basic._TestFFTBase.test_djbfft(self)
scipy.fftpack.tests.test_basic._TestFFTBase.test_n_argument_real(self)
scipy.fftpack.tests.test_basic._TestIFFTBase(TestCase)
scipy.fftpack.tests.test_basic._TestIFFTBase.setUp(self)
scipy.fftpack.tests.test_basic._TestIFFTBase.test_definition(self)
scipy.fftpack.tests.test_basic._TestIFFTBase.test_definition_real(self)
scipy.fftpack.tests.test_basic._TestIFFTBase.test_djbfft(self)
scipy.fftpack.tests.test_basic._TestIFFTBase.test_random_complex(self)
scipy.fftpack.tests.test_basic._TestIFFTBase.test_random_real(self)
scipy.fftpack.tests.test_basic._TestIFFTBase.test_size_accuracy(self)
scipy.fftpack.tests.test_basic._TestIRFFTBase(TestCase)
scipy.fftpack.tests.test_basic._TestIRFFTBase.setUp(self)
scipy.fftpack.tests.test_basic._TestIRFFTBase.test_definition(self)
scipy.fftpack.tests.test_basic._TestIRFFTBase.test_djbfft(self)
scipy.fftpack.tests.test_basic._TestIRFFTBase.test_random_real(self)
scipy.fftpack.tests.test_basic._TestIRFFTBase.test_size_accuracy(self)
scipy.fftpack.tests.test_basic._TestIfftn(TestCase)
scipy.fftpack.tests.test_basic._TestIfftn.setUp(self)
scipy.fftpack.tests.test_basic._TestIfftn.test_definition(self)
scipy.fftpack.tests.test_basic._TestIfftn.test_random_complex(self)
scipy.fftpack.tests.test_basic._TestRFFTBase(TestCase)
scipy.fftpack.tests.test_basic._TestRFFTBase.setUp(self)
scipy.fftpack.tests.test_basic._TestRFFTBase.test_definition(self)
scipy.fftpack.tests.test_basic._TestRFFTBase.test_djbfft(self)
scipy.fftpack.tests.test_basic.direct_dft(x)
scipy.fftpack.tests.test_basic.direct_dftn(x)
scipy.fftpack.tests.test_basic.direct_idft(x)
scipy.fftpack.tests.test_basic.direct_idftn(x)
scipy.fftpack.tests.test_basic.direct_irdft(x)
scipy.fftpack.tests.test_basic.direct_rdft(x)
scipy.fftpack.tests.test_basic.get_mat(n)
scipy.fftpack.tests.test_basic.random(size)
scipy.fftpack.tests.test_direct_dft(x)
scipy.fftpack.tests.test_direct_dftn(x)
scipy.fftpack.tests.test_direct_idft(x)
scipy.fftpack.tests.test_direct_idftn(x)
scipy.fftpack.tests.test_direct_irdft(x)
scipy.fftpack.tests.test_direct_rdft(x)
scipy.fftpack.tests.test_get_mat(n)
scipy.fftpack.tests.test_random(size)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/fftpack/tests/test_real_transforms.py----------------------------------------
A:scipy.fftpack.tests.test_real_transforms.MDATA->numpy.load(join(dirname(__file__), 'test.npz'))
A:scipy.fftpack.tests.test_real_transforms.FFTWDATA_DOUBLE->numpy.load(join(dirname(__file__), 'fftw_double_ref.npz'))
A:scipy.fftpack.tests.test_real_transforms.FFTWDATA_SINGLE->numpy.load(join(dirname(__file__), 'fftw_single_ref.npz'))
A:scipy.fftpack.tests.test_real_transforms.x->idst(yr, type=self.type)
A:scipy.fftpack.tests.test_real_transforms.y->routine(x2, type, fftsize, axis, norm, overwrite_x=overwrite_x)
A:scipy.fftpack.tests.test_real_transforms.(x, yr)->fftw_dct_ref(self.type, i, self.rdt)
A:scipy.fftpack.tests.test_real_transforms.xi->dct(y, norm='ortho', type=3)
A:scipy.fftpack.tests.test_real_transforms.(xr, yr)->fftw_dst_ref(self.type, i, self.rdt)
A:scipy.fftpack.tests.test_real_transforms.x2->idst(yr, type=self.type).copy()
A:scipy.fftpack.tests.test_real_transforms.data->data.astype(dtype).astype(dtype)
scipy.fftpack.tests.test_real_transforms.TestDCTIDouble(_TestDCTBase)
scipy.fftpack.tests.test_real_transforms.TestDCTIDouble.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestDCTIFloat(_TestDCTBase)
scipy.fftpack.tests.test_real_transforms.TestDCTIFloat.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestDCTIIDouble(_TestDCTIIBase)
scipy.fftpack.tests.test_real_transforms.TestDCTIIDouble.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestDCTIIFloat(_TestDCTIIBase)
scipy.fftpack.tests.test_real_transforms.TestDCTIIFloat.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestDCTIIIDouble(_TestDCTIIIBase)
scipy.fftpack.tests.test_real_transforms.TestDCTIIIDouble.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestDCTIIIFloat(_TestDCTIIIBase)
scipy.fftpack.tests.test_real_transforms.TestDCTIIIFloat.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestDSTIDouble(_TestDSTBase)
scipy.fftpack.tests.test_real_transforms.TestDSTIDouble.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestDSTIFloat(_TestDSTBase)
scipy.fftpack.tests.test_real_transforms.TestDSTIFloat.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestDSTIIDouble(_TestDSTBase)
scipy.fftpack.tests.test_real_transforms.TestDSTIIDouble.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestDSTIIFloat(_TestDSTBase)
scipy.fftpack.tests.test_real_transforms.TestDSTIIFloat.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestDSTIIIDouble(_TestDSTBase)
scipy.fftpack.tests.test_real_transforms.TestDSTIIIDouble.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestDSTIIIFloat(_TestDSTBase)
scipy.fftpack.tests.test_real_transforms.TestDSTIIIFloat.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestIDCTIDouble(_TestIDCTBase)
scipy.fftpack.tests.test_real_transforms.TestIDCTIDouble.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestIDCTIFloat(_TestIDCTBase)
scipy.fftpack.tests.test_real_transforms.TestIDCTIFloat.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestIDCTIIDouble(_TestIDCTBase)
scipy.fftpack.tests.test_real_transforms.TestIDCTIIDouble.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestIDCTIIFloat(_TestIDCTBase)
scipy.fftpack.tests.test_real_transforms.TestIDCTIIFloat.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestIDCTIIIDouble(_TestIDCTBase)
scipy.fftpack.tests.test_real_transforms.TestIDCTIIIDouble.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestIDCTIIIFloat(_TestIDCTBase)
scipy.fftpack.tests.test_real_transforms.TestIDCTIIIFloat.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestIDSTIDouble(_TestIDSTBase)
scipy.fftpack.tests.test_real_transforms.TestIDSTIDouble.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestIDSTIFloat(_TestIDSTBase)
scipy.fftpack.tests.test_real_transforms.TestIDSTIFloat.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestIDSTIIDouble(_TestIDSTBase)
scipy.fftpack.tests.test_real_transforms.TestIDSTIIDouble.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestIDSTIIFloat(_TestIDSTBase)
scipy.fftpack.tests.test_real_transforms.TestIDSTIIFloat.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestIDSTIIIDouble(_TestIDSTBase)
scipy.fftpack.tests.test_real_transforms.TestIDSTIIIDouble.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestIDSTIIIFloat(_TestIDSTBase)
scipy.fftpack.tests.test_real_transforms.TestIDSTIIIFloat.setUp(self)
scipy.fftpack.tests.test_real_transforms.TestOverwrite(object)
scipy.fftpack.tests.test_real_transforms.TestOverwrite._check(self,x,routine,type,fftsize,axis,norm,overwrite_x,should_overwrite,**kw)
scipy.fftpack.tests.test_real_transforms.TestOverwrite._check_1d(self,routine,dtype,shape,axis,overwritable_dtypes)
scipy.fftpack.tests.test_real_transforms.TestOverwrite.test_dct(self)
scipy.fftpack.tests.test_real_transforms.TestOverwrite.test_dst(self)
scipy.fftpack.tests.test_real_transforms.TestOverwrite.test_idct(self)
scipy.fftpack.tests.test_real_transforms.TestOverwrite.test_idst(self)
scipy.fftpack.tests.test_real_transforms._TestDCTBase(TestCase)
scipy.fftpack.tests.test_real_transforms._TestDCTBase.setUp(self)
scipy.fftpack.tests.test_real_transforms._TestDCTBase.test_axis(self)
scipy.fftpack.tests.test_real_transforms._TestDCTBase.test_definition(self)
scipy.fftpack.tests.test_real_transforms._TestDCTIIBase(_TestDCTBase)
scipy.fftpack.tests.test_real_transforms._TestDCTIIBase.test_definition_matlab(self)
scipy.fftpack.tests.test_real_transforms._TestDCTIIIBase(_TestDCTBase)
scipy.fftpack.tests.test_real_transforms._TestDCTIIIBase.test_definition_ortho(self)
scipy.fftpack.tests.test_real_transforms._TestDSTBase(TestCase)
scipy.fftpack.tests.test_real_transforms._TestDSTBase.setUp(self)
scipy.fftpack.tests.test_real_transforms._TestDSTBase.test_definition(self)
scipy.fftpack.tests.test_real_transforms._TestIDCTBase(TestCase)
scipy.fftpack.tests.test_real_transforms._TestIDCTBase.setUp(self)
scipy.fftpack.tests.test_real_transforms._TestIDCTBase.test_definition(self)
scipy.fftpack.tests.test_real_transforms._TestIDSTBase(TestCase)
scipy.fftpack.tests.test_real_transforms._TestIDSTBase.setUp(self)
scipy.fftpack.tests.test_real_transforms._TestIDSTBase.test_definition(self)
scipy.fftpack.tests.test_real_transforms.fftw_dct_ref(type,size,dt)
scipy.fftpack.tests.test_real_transforms.fftw_dst_ref(type,size,dt)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/fftpack/tests/test_helper.py----------------------------------------
A:scipy.fftpack.tests.test_helper.x->random((n,))
scipy.fftpack.tests.test_TestFFTFreq(TestCase)
scipy.fftpack.tests.test_TestFFTFreq.test_definition(self)
scipy.fftpack.tests.test_TestFFTShift(TestCase)
scipy.fftpack.tests.test_TestFFTShift.test_definition(self)
scipy.fftpack.tests.test_TestFFTShift.test_inverse(self)
scipy.fftpack.tests.test_TestRFFTFreq(TestCase)
scipy.fftpack.tests.test_TestRFFTFreq.test_definition(self)
scipy.fftpack.tests.test_helper.TestFFTFreq(TestCase)
scipy.fftpack.tests.test_helper.TestFFTFreq.test_definition(self)
scipy.fftpack.tests.test_helper.TestFFTShift(TestCase)
scipy.fftpack.tests.test_helper.TestFFTShift.test_definition(self)
scipy.fftpack.tests.test_helper.TestFFTShift.test_inverse(self)
scipy.fftpack.tests.test_helper.TestRFFTFreq(TestCase)
scipy.fftpack.tests.test_helper.TestRFFTFreq.test_definition(self)
scipy.fftpack.tests.test_helper.random(size)
scipy.fftpack.tests.test_random(size)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/fftpack/tests/test_pseudo_diffs.py----------------------------------------
A:scipy.fftpack.tests.test_pseudo_diffs.fx->fft(x)
A:scipy.fftpack.tests.test_pseudo_diffs.n->len(x)
A:scipy.fftpack.tests.test_pseudo_diffs.d1->diff(f)
A:scipy.fftpack.tests.test_pseudo_diffs.f->diff(diff(f, 1), -1)
A:scipy.fftpack.tests.test_pseudo_diffs.y->routine(x2, *args, **kwargs)
A:scipy.fftpack.tests.test_pseudo_diffs.y1->direct_ihilbert(f)
A:scipy.fftpack.tests.test_pseudo_diffs.y2->itilbert(f, h=10)
A:scipy.fftpack.tests.test_pseudo_diffs.x2->x.copy()
A:scipy.fftpack.tests.test_pseudo_diffs.data->data.astype(dtype).astype(dtype)
scipy.fftpack.tests.test_TestDiff(TestCase)
scipy.fftpack.tests.test_TestDiff.test_definition(self)
scipy.fftpack.tests.test_TestDiff.test_expr(self)
scipy.fftpack.tests.test_TestDiff.test_expr_large(self)
scipy.fftpack.tests.test_TestDiff.test_int(self)
scipy.fftpack.tests.test_TestDiff.test_period(self)
scipy.fftpack.tests.test_TestDiff.test_random_even(self)
scipy.fftpack.tests.test_TestDiff.test_random_odd(self)
scipy.fftpack.tests.test_TestDiff.test_sin(self)
scipy.fftpack.tests.test_TestDiff.test_zero_nyquist(self)
scipy.fftpack.tests.test_TestHilbert(TestCase)
scipy.fftpack.tests.test_TestHilbert.test_definition(self)
scipy.fftpack.tests.test_TestHilbert.test_random_even(self)
scipy.fftpack.tests.test_TestHilbert.test_random_odd(self)
scipy.fftpack.tests.test_TestHilbert.test_tilbert_relation(self)
scipy.fftpack.tests.test_TestIHilbert(TestCase)
scipy.fftpack.tests.test_TestIHilbert.test_definition(self)
scipy.fftpack.tests.test_TestIHilbert.test_itilbert_relation(self)
scipy.fftpack.tests.test_TestITilbert(TestCase)
scipy.fftpack.tests.test_TestITilbert.test_definition(self)
scipy.fftpack.tests.test_TestOverwrite(object)
scipy.fftpack.tests.test_TestOverwrite._check(self,x,routine,*args,**kwargs)
scipy.fftpack.tests.test_TestOverwrite._check_1d(self,routine,dtype,shape,*args,**kwargs)
scipy.fftpack.tests.test_TestOverwrite.test_cc_diff(self)
scipy.fftpack.tests.test_TestOverwrite.test_cs_diff(self)
scipy.fftpack.tests.test_TestOverwrite.test_diff(self)
scipy.fftpack.tests.test_TestOverwrite.test_hilbert(self)
scipy.fftpack.tests.test_TestOverwrite.test_itilbert(self)
scipy.fftpack.tests.test_TestOverwrite.test_sc_diff(self)
scipy.fftpack.tests.test_TestOverwrite.test_shift(self)
scipy.fftpack.tests.test_TestOverwrite.test_ss_diff(self)
scipy.fftpack.tests.test_TestOverwrite.test_tilbert(self)
scipy.fftpack.tests.test_TestShift(TestCase)
scipy.fftpack.tests.test_TestShift.test_definition(self)
scipy.fftpack.tests.test_TestTilbert(TestCase)
scipy.fftpack.tests.test_TestTilbert.test_definition(self)
scipy.fftpack.tests.test_TestTilbert.test_random_even(self)
scipy.fftpack.tests.test_TestTilbert.test_random_odd(self)
scipy.fftpack.tests.test_direct_diff(x,k=1,period=None)
scipy.fftpack.tests.test_direct_hilbert(x)
scipy.fftpack.tests.test_direct_ihilbert(x)
scipy.fftpack.tests.test_direct_itilbert(x,h=1,period=None)
scipy.fftpack.tests.test_direct_shift(x,a,period=None)
scipy.fftpack.tests.test_direct_tilbert(x,h=1,period=None)
scipy.fftpack.tests.test_pseudo_diffs.TestDiff(TestCase)
scipy.fftpack.tests.test_pseudo_diffs.TestDiff.test_definition(self)
scipy.fftpack.tests.test_pseudo_diffs.TestDiff.test_expr(self)
scipy.fftpack.tests.test_pseudo_diffs.TestDiff.test_expr_large(self)
scipy.fftpack.tests.test_pseudo_diffs.TestDiff.test_int(self)
scipy.fftpack.tests.test_pseudo_diffs.TestDiff.test_period(self)
scipy.fftpack.tests.test_pseudo_diffs.TestDiff.test_random_even(self)
scipy.fftpack.tests.test_pseudo_diffs.TestDiff.test_random_odd(self)
scipy.fftpack.tests.test_pseudo_diffs.TestDiff.test_sin(self)
scipy.fftpack.tests.test_pseudo_diffs.TestDiff.test_zero_nyquist(self)
scipy.fftpack.tests.test_pseudo_diffs.TestHilbert(TestCase)
scipy.fftpack.tests.test_pseudo_diffs.TestHilbert.test_definition(self)
scipy.fftpack.tests.test_pseudo_diffs.TestHilbert.test_random_even(self)
scipy.fftpack.tests.test_pseudo_diffs.TestHilbert.test_random_odd(self)
scipy.fftpack.tests.test_pseudo_diffs.TestHilbert.test_tilbert_relation(self)
scipy.fftpack.tests.test_pseudo_diffs.TestIHilbert(TestCase)
scipy.fftpack.tests.test_pseudo_diffs.TestIHilbert.test_definition(self)
scipy.fftpack.tests.test_pseudo_diffs.TestIHilbert.test_itilbert_relation(self)
scipy.fftpack.tests.test_pseudo_diffs.TestITilbert(TestCase)
scipy.fftpack.tests.test_pseudo_diffs.TestITilbert.test_definition(self)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite(object)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite._check(self,x,routine,*args,**kwargs)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite._check_1d(self,routine,dtype,shape,*args,**kwargs)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite.test_cc_diff(self)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite.test_cs_diff(self)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite.test_diff(self)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite.test_hilbert(self)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite.test_itilbert(self)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite.test_sc_diff(self)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite.test_shift(self)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite.test_ss_diff(self)
scipy.fftpack.tests.test_pseudo_diffs.TestOverwrite.test_tilbert(self)
scipy.fftpack.tests.test_pseudo_diffs.TestShift(TestCase)
scipy.fftpack.tests.test_pseudo_diffs.TestShift.test_definition(self)
scipy.fftpack.tests.test_pseudo_diffs.TestTilbert(TestCase)
scipy.fftpack.tests.test_pseudo_diffs.TestTilbert.test_definition(self)
scipy.fftpack.tests.test_pseudo_diffs.TestTilbert.test_random_even(self)
scipy.fftpack.tests.test_pseudo_diffs.TestTilbert.test_random_odd(self)
scipy.fftpack.tests.test_pseudo_diffs.direct_diff(x,k=1,period=None)
scipy.fftpack.tests.test_pseudo_diffs.direct_hilbert(x)
scipy.fftpack.tests.test_pseudo_diffs.direct_ihilbert(x)
scipy.fftpack.tests.test_pseudo_diffs.direct_itilbert(x,h=1,period=None)
scipy.fftpack.tests.test_pseudo_diffs.direct_shift(x,a,period=None)
scipy.fftpack.tests.test_pseudo_diffs.direct_tilbert(x,h=1,period=None)
scipy.fftpack.tests.test_pseudo_diffs.random(size)
scipy.fftpack.tests.test_random(size)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/fftpack/benchmarks/bench_pseudo_diffs.py----------------------------------------
A:scipy.fftpack.benchmarks.bench_pseudo_diffs.fx->fft(x)
A:scipy.fftpack.benchmarks.bench_pseudo_diffs.n->len(x)
scipy.fftpack.benchmarks.bench_TestDiff(TestCase)
scipy.fftpack.benchmarks.bench_TestDiff.bench_random(self)
scipy.fftpack.benchmarks.bench_TestHilbert(TestCase)
scipy.fftpack.benchmarks.bench_TestHilbert.bench_random(self)
scipy.fftpack.benchmarks.bench_TestShift(TestCase)
scipy.fftpack.benchmarks.bench_TestShift.bench_random(self)
scipy.fftpack.benchmarks.bench_TestTilbert(TestCase)
scipy.fftpack.benchmarks.bench_TestTilbert.bench_random(self)
scipy.fftpack.benchmarks.bench_direct_diff(x,k=1,period=None)
scipy.fftpack.benchmarks.bench_direct_hilbert(x)
scipy.fftpack.benchmarks.bench_direct_shift(x,a,period=None)
scipy.fftpack.benchmarks.bench_direct_tilbert(x,h=1,period=None)
scipy.fftpack.benchmarks.bench_pseudo_diffs.TestDiff(TestCase)
scipy.fftpack.benchmarks.bench_pseudo_diffs.TestDiff.bench_random(self)
scipy.fftpack.benchmarks.bench_pseudo_diffs.TestHilbert(TestCase)
scipy.fftpack.benchmarks.bench_pseudo_diffs.TestHilbert.bench_random(self)
scipy.fftpack.benchmarks.bench_pseudo_diffs.TestShift(TestCase)
scipy.fftpack.benchmarks.bench_pseudo_diffs.TestShift.bench_random(self)
scipy.fftpack.benchmarks.bench_pseudo_diffs.TestTilbert(TestCase)
scipy.fftpack.benchmarks.bench_pseudo_diffs.TestTilbert.bench_random(self)
scipy.fftpack.benchmarks.bench_pseudo_diffs.direct_diff(x,k=1,period=None)
scipy.fftpack.benchmarks.bench_pseudo_diffs.direct_hilbert(x)
scipy.fftpack.benchmarks.bench_pseudo_diffs.direct_shift(x,a,period=None)
scipy.fftpack.benchmarks.bench_pseudo_diffs.direct_tilbert(x,h=1,period=None)
scipy.fftpack.benchmarks.bench_pseudo_diffs.random(size)
scipy.fftpack.benchmarks.bench_random(size)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/fftpack/benchmarks/bench_basic.py----------------------------------------
A:scipy.fftpack.benchmarks.bench_basic.x->random([size]).astype(double)
A:scipy.fftpack.benchmarks.bench_basic.n->len(x)
A:scipy.fftpack.benchmarks.bench_basic.y->fftn(x)
A:scipy.fftpack.benchmarks.bench_basic.y[i]->dot(exp(i * w), x)
A:scipy.fftpack.benchmarks.bench_basic.x1->zeros(size / 2 + 1, dtype=cdouble)
scipy.fftpack.benchmarks.bench_TestFft(TestCase)
scipy.fftpack.benchmarks.bench_TestFft.bench_random(self)
scipy.fftpack.benchmarks.bench_TestFftn(TestCase)
scipy.fftpack.benchmarks.bench_TestFftn.bench_random(self)
scipy.fftpack.benchmarks.bench_TestIfft(TestCase)
scipy.fftpack.benchmarks.bench_TestIfft.bench_random(self)
scipy.fftpack.benchmarks.bench_TestIrfft(TestCase)
scipy.fftpack.benchmarks.bench_TestIrfft.bench_random(self)
scipy.fftpack.benchmarks.bench_TestRfft(TestCase)
scipy.fftpack.benchmarks.bench_TestRfft.bench_random(self)
scipy.fftpack.benchmarks.bench_basic.TestFft(TestCase)
scipy.fftpack.benchmarks.bench_basic.TestFft.bench_random(self)
scipy.fftpack.benchmarks.bench_basic.TestFftn(TestCase)
scipy.fftpack.benchmarks.bench_basic.TestFftn.bench_random(self)
scipy.fftpack.benchmarks.bench_basic.TestIfft(TestCase)
scipy.fftpack.benchmarks.bench_basic.TestIfft.bench_random(self)
scipy.fftpack.benchmarks.bench_basic.TestIrfft(TestCase)
scipy.fftpack.benchmarks.bench_basic.TestIrfft.bench_random(self)
scipy.fftpack.benchmarks.bench_basic.TestRfft(TestCase)
scipy.fftpack.benchmarks.bench_basic.TestRfft.bench_random(self)
scipy.fftpack.benchmarks.bench_basic.direct_dft(x)
scipy.fftpack.benchmarks.bench_basic.direct_idft(x)
scipy.fftpack.benchmarks.bench_basic.random(size)
scipy.fftpack.benchmarks.bench_direct_dft(x)
scipy.fftpack.benchmarks.bench_direct_idft(x)
scipy.fftpack.benchmarks.bench_random(size)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/integrate/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/integrate/quadpack.py----------------------------------------
A:scipy.integrate.quadpack.retval->_quad_weight(func, a, b, args, full_output, epsabs, epsrel, limlst, limit, maxp1, weight, wvar, wopts)
A:scipy.integrate.quadpack.nl->len(points)
A:scipy.integrate.quadpack.the_points->numpy.zeros((nl + 2,), float)
A:scipy.integrate.quadpack.a->gfun(x)
A:scipy.integrate.quadpack.b->hfun(x)
A:scipy.integrate.quadpack.a2->qfun(x, y)
A:scipy.integrate.quadpack.b2->rfun(x, y)
scipy.integrate._infunc(x,func,gfun,hfun,more_args)
scipy.integrate._infunc2(y,x,func,qfun,rfun,more_args)
scipy.integrate._quad(func,a,b,args,full_output,epsabs,epsrel,limit,points)
scipy.integrate._quad_weight(func,a,b,args,full_output,epsabs,epsrel,limlst,limit,maxp1,weight,wvar,wopts)
scipy.integrate.dblquad(func,a,b,gfun,hfun,args=(),epsabs=1.49e-08,epsrel=1.49e-08)
scipy.integrate.quad(func,a,b,args=(),full_output=0,epsabs=1.49e-08,epsrel=1.49e-08,limit=50,points=None,weight=None,wvar=None,wopts=None,maxp1=50,limlst=50)
scipy.integrate.quad_explain(output=sys.stdout)
scipy.integrate.quadpack._infunc(x,func,gfun,hfun,more_args)
scipy.integrate.quadpack._infunc2(y,x,func,qfun,rfun,more_args)
scipy.integrate.quadpack._quad(func,a,b,args,full_output,epsabs,epsrel,limit,points)
scipy.integrate.quadpack._quad_weight(func,a,b,args,full_output,epsabs,epsrel,limlst,limit,maxp1,weight,wvar,wopts)
scipy.integrate.quadpack.dblquad(func,a,b,gfun,hfun,args=(),epsabs=1.49e-08,epsrel=1.49e-08)
scipy.integrate.quadpack.quad(func,a,b,args=(),full_output=0,epsabs=1.49e-08,epsrel=1.49e-08,limit=50,points=None,weight=None,wvar=None,wopts=None,maxp1=50,limlst=50)
scipy.integrate.quadpack.quad_explain(output=sys.stdout)
scipy.integrate.quadpack.tplquad(func,a,b,gfun,hfun,qfun,rfun,args=(),epsabs=1.49e-08,epsrel=1.49e-08)
scipy.integrate.tplquad(func,a,b,gfun,hfun,qfun,rfun,args=(),epsabs=1.49e-08,epsrel=1.49e-08)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/integrate/setupscons.py----------------------------------------
A:scipy.integrate.setupscons.config->Configuration('integrate', parent_package, top_path)
scipy.integrate.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/integrate/quadrature.py----------------------------------------
A:scipy.integrate.quadrature.[x, w]->p_roots(n)
A:scipy.integrate.quadrature.x->x.reshape(saveshape).reshape(saveshape)
A:scipy.integrate.quadrature.(ainf, binf)->map(isinf, (a, b))
A:scipy.integrate.quadrature.y0->func(x[0], *args)
A:scipy.integrate.quadrature.n->len(x)
A:scipy.integrate.quadrature.output->empty((n,), dtype=type(y0))
A:scipy.integrate.quadrature.output[i]->func(x[i], *args)
A:scipy.integrate.quadrature.vfunc->vectorize1(function, args, vec_func=vec_func)
A:scipy.integrate.quadrature.err->abs(result - lastresult)
A:scipy.integrate.quadrature.l->list(t)
A:scipy.integrate.quadrature.y->asarray(y)
A:scipy.integrate.quadrature.d->diff(x, axis=axis)
A:scipy.integrate.quadrature.nd->len(y.shape)
A:scipy.integrate.quadrature.slice1->tupleset(slice1, axis, 0)
A:scipy.integrate.quadrature.slice2->tupleset(slice2, axis, 1)
A:scipy.integrate.quadrature.res->numpy.concatenate([np.ones(shape, dtype=res.dtype) * initial, res], axis=axis)
A:scipy.integrate.quadrature.shape->list(res.shape)
A:scipy.integrate.quadrature.slice0->tupleset(all, axis, 0)
A:scipy.integrate.quadrature.result->_basic_simps(y, 0, N - 2, x, dx, axis)
A:scipy.integrate.quadrature.h->diff(x, axis=axis)
A:scipy.integrate.quadrature.sl0->tupleset(all, axis, slice(start, stop, step))
A:scipy.integrate.quadrature.sl1->tupleset(all, axis, slice(start + 1, stop + 1, step))
A:scipy.integrate.quadrature.shapex->ones(nd)
A:scipy.integrate.quadrature.slicem1->tupleset(all, axis, -1)
A:scipy.integrate.quadrature.slice_R->tupleset(slice_R, axis, slice(start, stop, step))
A:scipy.integrate.quadrature.s->sum(function(points), 0)
A:scipy.integrate.quadrature.ordsum->_difftrap(vfunc, interval, n)
A:scipy.integrate.quadrature.rn->numpy.arange(N + 1)
A:scipy.integrate.quadrature.nvec->numpy.arange(0, N + 1)
A:scipy.integrate.quadrature.C->numpy.mat(ti ** nvec[:, np.newaxis])
A:scipy.integrate.quadrature.fac->math.exp(fac)
scipy.integrate.AccuracyWarning(Warning)
scipy.integrate._basic_simps(y,start,stop,x,dx,axis)
scipy.integrate._difftrap(function,interval,numtraps)
scipy.integrate._printresmat(function,interval,resmat)
scipy.integrate._romberg_diff(b,c,k)
scipy.integrate.cumtrapz(y,x=None,dx=1.0,axis=-1,initial=None)
scipy.integrate.fixed_quad(func,a,b,args=(),n=5)
scipy.integrate.newton_cotes(rn,equal=0)
scipy.integrate.quadrature(func,a,b,args=(),tol=1.49e-08,rtol=1.49e-08,maxiter=50,vec_func=True)
scipy.integrate.quadrature.AccuracyWarning(Warning)
scipy.integrate.quadrature._basic_simps(y,start,stop,x,dx,axis)
scipy.integrate.quadrature._difftrap(function,interval,numtraps)
scipy.integrate.quadrature._printresmat(function,interval,resmat)
scipy.integrate.quadrature._romberg_diff(b,c,k)
scipy.integrate.quadrature.cumtrapz(y,x=None,dx=1.0,axis=-1,initial=None)
scipy.integrate.quadrature.fixed_quad(func,a,b,args=(),n=5)
scipy.integrate.quadrature.newton_cotes(rn,equal=0)
scipy.integrate.quadrature.quadrature(func,a,b,args=(),tol=1.49e-08,rtol=1.49e-08,maxiter=50,vec_func=True)
scipy.integrate.quadrature.romb(y,dx=1.0,axis=-1,show=False)
scipy.integrate.quadrature.romberg(function,a,b,args=(),tol=1.48e-08,rtol=1.48e-08,show=False,divmax=10,vec_func=False)
scipy.integrate.quadrature.simps(y,x=None,dx=1,axis=-1,even='avg')
scipy.integrate.quadrature.tupleset(t,i,value)
scipy.integrate.quadrature.vectorize1(func,args=(),vec_func=False)
scipy.integrate.romb(y,dx=1.0,axis=-1,show=False)
scipy.integrate.romberg(function,a,b,args=(),tol=1.48e-08,rtol=1.48e-08,show=False,divmax=10,vec_func=False)
scipy.integrate.simps(y,x=None,dx=1,axis=-1,even='avg')
scipy.integrate.tupleset(t,i,value)
scipy.integrate.vectorize1(func,args=(),vec_func=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/integrate/setup.py----------------------------------------
A:scipy.integrate.setup.config->Configuration('integrate', parent_package, top_path)
A:scipy.integrate.setup.blas_opt->get_info('blas_opt', notfound_action=2)
scipy.integrate.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/integrate/_ode.py----------------------------------------
A:scipy.integrate._ode.n_prev->len(self._y)
A:scipy.integrate._ode.self._y->array([0.0], self._integrator.scalar)
A:scipy.integrate._ode.integrator->find_integrator(name)
A:scipy.integrate._ode.self._integrator->integrator(**integrator_params)
A:scipy.integrate._ode.(self._y, self.t)->mth(self.f, self.jac or (lambda : None), self._y, self.t, t, self.f_params, self.jac_params)
A:scipy.integrate._ode.f->self.cf(*(t, y[::2] + 1j * y[1::2]) + f_args)
A:scipy.integrate._ode.self.tmp[::2]->real(y)
A:scipy.integrate._ode.self.tmp[1::2]->imag(y)
A:scipy.integrate._ode.jac->self.cjac(*(t, y[::2] + 1j * y[1::2]) + jac_args)
A:scipy.integrate._ode.self.jac_tmp[1::2, 1::2]self.jac_tmp[::2, ::2]->real(jac)
A:scipy.integrate._ode.self.jac_tmp[1::2, ::2]->imag(jac)
A:scipy.integrate._ode.y->ode.integrate(self, t, step, relax)
A:scipy.integrate._ode.self.tmp->zeros(y.size * 2, 'float')
A:scipy.integrate._ode.self.jac_tmp->zeros((y.size * 2, y.size * 2), 'float')
A:scipy.integrate._ode.runner->getattr(_lsoda, 'lsoda', None)
A:scipy.integrate._ode.rwork->zeros((lrw,), float)
A:scipy.integrate._ode.iwork->zeros((liw,), int32)
A:scipy.integrate._ode.(y1, t, istate)->self.runner(*args)
A:scipy.integrate._ode.r->self.run(*args)
A:scipy.integrate._ode.zwork->zeros((lzw,), complex)
A:scipy.integrate._ode.work->zeros((11 * n + 21,), float)
A:scipy.integrate._ode.(x, y, iwork, idid)->self.runner(*(f, t0, y0, t1) + tuple(self.call_args) + (f_params,))
A:scipy.integrate._ode.lrw->max(lrn, lrs)
scipy.integrate.IntegratorBase(object)
scipy.integrate.IntegratorBase.acquire_new_handle(self)
scipy.integrate.IntegratorBase.check_handle(self)
scipy.integrate.IntegratorBase.reset(self,n,has_jac)
scipy.integrate.IntegratorBase.run(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate.IntegratorBase.run_relax(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate.IntegratorBase.step(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate.IntegratorConcurrencyError(self,name)
scipy.integrate._ode.IntegratorBase(object)
scipy.integrate._ode.IntegratorBase.acquire_new_handle(self)
scipy.integrate._ode.IntegratorBase.check_handle(self)
scipy.integrate._ode.IntegratorBase.reset(self,n,has_jac)
scipy.integrate._ode.IntegratorBase.run(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate._ode.IntegratorBase.run_relax(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate._ode.IntegratorBase.step(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate._ode.IntegratorConcurrencyError(self,name)
scipy.integrate._ode.IntegratorConcurrencyError.__init__(self,name)
scipy.integrate._ode.complex_ode(self,f,jac=None)
scipy.integrate._ode.complex_ode.__init__(self,f,jac=None)
scipy.integrate._ode.complex_ode._wrap(self,t,y,*f_args)
scipy.integrate._ode.complex_ode._wrap_jac(self,t,y,*jac_args)
scipy.integrate._ode.complex_ode.integrate(self,t,step=0,relax=0)
scipy.integrate._ode.complex_ode.set_initial_value(self,y,t=0.0)
scipy.integrate._ode.complex_ode.set_integrator(self,name,**integrator_params)
scipy.integrate._ode.complex_ode.y(self)
scipy.integrate._ode.dop853(self,rtol=1e-06,atol=1e-12,nsteps=500,max_step=0.0,first_step=0.0,safety=0.9,ifactor=6.0,dfactor=0.3,beta=0.0,method=None)
scipy.integrate._ode.dop853.__init__(self,rtol=1e-06,atol=1e-12,nsteps=500,max_step=0.0,first_step=0.0,safety=0.9,ifactor=6.0,dfactor=0.3,beta=0.0,method=None)
scipy.integrate._ode.dop853.reset(self,n,has_jac)
scipy.integrate._ode.dopri5(self,rtol=1e-06,atol=1e-12,nsteps=500,max_step=0.0,first_step=0.0,safety=0.9,ifactor=10.0,dfactor=0.2,beta=0.0,method=None)
scipy.integrate._ode.dopri5.__init__(self,rtol=1e-06,atol=1e-12,nsteps=500,max_step=0.0,first_step=0.0,safety=0.9,ifactor=10.0,dfactor=0.2,beta=0.0,method=None)
scipy.integrate._ode.dopri5._solout(self,*args)
scipy.integrate._ode.dopri5.reset(self,n,has_jac)
scipy.integrate._ode.dopri5.run(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate._ode.find_integrator(name)
scipy.integrate._ode.lsoda(self,with_jacobian=0,rtol=1e-06,atol=1e-12,lband=None,uband=None,nsteps=500,max_step=0.0,min_step=0.0,first_step=0.0,ixpr=0,max_hnil=0,max_order_ns=12,max_order_s=5,method=None)
scipy.integrate._ode.lsoda.__init__(self,with_jacobian=0,rtol=1e-06,atol=1e-12,lband=None,uband=None,nsteps=500,max_step=0.0,min_step=0.0,first_step=0.0,ixpr=0,max_hnil=0,max_order_ns=12,max_order_s=5,method=None)
scipy.integrate._ode.lsoda.reset(self,n,has_jac)
scipy.integrate._ode.lsoda.run(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate._ode.lsoda.run_relax(self,*args)
scipy.integrate._ode.lsoda.step(self,*args)
scipy.integrate._ode.ode(self,f,jac=None)
scipy.integrate._ode.ode.__init__(self,f,jac=None)
scipy.integrate._ode.ode.integrate(self,t,step=0,relax=0)
scipy.integrate._ode.ode.set_f_params(self,*args)
scipy.integrate._ode.ode.set_initial_value(self,y,t=0.0)
scipy.integrate._ode.ode.set_integrator(self,name,**integrator_params)
scipy.integrate._ode.ode.set_jac_params(self,*args)
scipy.integrate._ode.ode.successful(self)
scipy.integrate._ode.ode.y(self)
scipy.integrate._ode.vode(self,method='adams',with_jacobian=0,rtol=1e-06,atol=1e-12,lband=None,uband=None,order=12,nsteps=500,max_step=0.0,min_step=0.0,first_step=0.0)
scipy.integrate._ode.vode.__init__(self,method='adams',with_jacobian=0,rtol=1e-06,atol=1e-12,lband=None,uband=None,order=12,nsteps=500,max_step=0.0,min_step=0.0,first_step=0.0)
scipy.integrate._ode.vode.reset(self,n,has_jac)
scipy.integrate._ode.vode.run(self,*args)
scipy.integrate._ode.vode.run_relax(self,*args)
scipy.integrate._ode.vode.step(self,*args)
scipy.integrate._ode.zvode(vode)
scipy.integrate._ode.zvode.reset(self,n,has_jac)
scipy.integrate._ode.zvode.run(self,*args)
scipy.integrate.complex_ode(self,f,jac=None)
scipy.integrate.complex_wrap(self,t,y,*f_args)
scipy.integrate.complex_wrap_jac(self,t,y,*jac_args)
scipy.integrate.complexintegrate(self,t,step=0,relax=0)
scipy.integrate.complexset_initial_value(self,y,t=0.0)
scipy.integrate.complexset_integrator(self,name,**integrator_params)
scipy.integrate.complexy(self)
scipy.integrate.dop853(self,rtol=1e-06,atol=1e-12,nsteps=500,max_step=0.0,first_step=0.0,safety=0.9,ifactor=6.0,dfactor=0.3,beta=0.0,method=None)
scipy.integrate.dop853.reset(self,n,has_jac)
scipy.integrate.dopri5(self,rtol=1e-06,atol=1e-12,nsteps=500,max_step=0.0,first_step=0.0,safety=0.9,ifactor=10.0,dfactor=0.2,beta=0.0,method=None)
scipy.integrate.dopri5._solout(self,*args)
scipy.integrate.dopri5.reset(self,n,has_jac)
scipy.integrate.dopri5.run(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate.find_integrator(name)
scipy.integrate.lsoda(self,with_jacobian=0,rtol=1e-06,atol=1e-12,lband=None,uband=None,nsteps=500,max_step=0.0,min_step=0.0,first_step=0.0,ixpr=0,max_hnil=0,max_order_ns=12,max_order_s=5,method=None)
scipy.integrate.lsoda.reset(self,n,has_jac)
scipy.integrate.lsoda.run(self,f,jac,y0,t0,t1,f_params,jac_params)
scipy.integrate.lsoda.run_relax(self,*args)
scipy.integrate.lsoda.step(self,*args)
scipy.integrate.ode(self,f,jac=None)
scipy.integrate.ode.integrate(self,t,step=0,relax=0)
scipy.integrate.ode.set_f_params(self,*args)
scipy.integrate.ode.set_initial_value(self,y,t=0.0)
scipy.integrate.ode.set_integrator(self,name,**integrator_params)
scipy.integrate.ode.set_jac_params(self,*args)
scipy.integrate.ode.successful(self)
scipy.integrate.ode.y(self)
scipy.integrate.vode(self,method='adams',with_jacobian=0,rtol=1e-06,atol=1e-12,lband=None,uband=None,order=12,nsteps=500,max_step=0.0,min_step=0.0,first_step=0.0)
scipy.integrate.vode.reset(self,n,has_jac)
scipy.integrate.vode.run(self,*args)
scipy.integrate.vode.run_relax(self,*args)
scipy.integrate.vode.step(self,*args)
scipy.integrate.zvode(vode)
scipy.integrate.zvode.reset(self,n,has_jac)
scipy.integrate.zvode.run(self,*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/integrate/odepack.py----------------------------------------
A:scipy.integrate.odepack.t->copy(t)
A:scipy.integrate.odepack.y0->copy(y0)
A:scipy.integrate.odepack.output->_odepack.odeint(func, y0, t, args, Dfun, col_deriv, ml, mu, full_output, rtol, atol, tcrit, h0, hmax, hmin, ixpr, mxstep, mxhnil, mxordn, mxords)
scipy.integrate.odeint(func,y0,t,args=(),Dfun=None,col_deriv=0,full_output=0,ml=None,mu=None,rtol=None,atol=None,tcrit=None,h0=0.0,hmax=0.0,hmin=0.0,ixpr=0,mxstep=0,mxhnil=0,mxordn=12,mxords=5,printmessg=0)
scipy.integrate.odepack.odeint(func,y0,t,args=(),Dfun=None,col_deriv=0,full_output=0,ml=None,mu=None,rtol=None,atol=None,tcrit=None,h0=0.0,hmax=0.0,hmin=0.0,ixpr=0,mxstep=0,mxhnil=0,mxordn=12,mxords=5,printmessg=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/integrate/tests/test_quadpack.py----------------------------------------
A:scipy.integrate.tests.test_quadpack.self.lib->ctypes.CDLL(file)
A:scipy.integrate.tests.test_quadpack.func->getattr(self.lib, name)
A:scipy.integrate.tests.test_quadpack.start->time.time()
scipy.integrate.tests.test_TestCtypesQuad(TestCase)
scipy.integrate.tests.test_TestCtypesQuad.setUp(self)
scipy.integrate.tests.test_TestCtypesQuad.test_improvement(self)
scipy.integrate.tests.test_TestCtypesQuad.test_typical(self)
scipy.integrate.tests.test_TestQuad(TestCase)
scipy.integrate.tests.test_TestQuad.test_algebraic_log_weight(self)
scipy.integrate.tests.test_TestQuad.test_cauchypv_weight(self)
scipy.integrate.tests.test_TestQuad.test_cosine_weighted_infinite(self)
scipy.integrate.tests.test_TestQuad.test_double_integral(self)
scipy.integrate.tests.test_TestQuad.test_indefinite(self)
scipy.integrate.tests.test_TestQuad.test_sine_weighted_finite(self)
scipy.integrate.tests.test_TestQuad.test_sine_weighted_infinite(self)
scipy.integrate.tests.test_TestQuad.test_singular(self)
scipy.integrate.tests.test_TestQuad.test_triple_integral(self)
scipy.integrate.tests.test_TestQuad.test_typical(self)
scipy.integrate.tests.test_assert_quad(value_and_err,tabledValue,errTol=1.5e-08)
scipy.integrate.tests.test_quadpack.TestCtypesQuad(TestCase)
scipy.integrate.tests.test_quadpack.TestCtypesQuad.setUp(self)
scipy.integrate.tests.test_quadpack.TestCtypesQuad.test_improvement(self)
scipy.integrate.tests.test_quadpack.TestCtypesQuad.test_typical(self)
scipy.integrate.tests.test_quadpack.TestQuad(TestCase)
scipy.integrate.tests.test_quadpack.TestQuad.test_algebraic_log_weight(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_cauchypv_weight(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_cosine_weighted_infinite(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_double_integral(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_indefinite(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_sine_weighted_finite(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_sine_weighted_infinite(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_singular(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_triple_integral(self)
scipy.integrate.tests.test_quadpack.TestQuad.test_typical(self)
scipy.integrate.tests.test_quadpack.assert_quad(value_and_err,tabledValue,errTol=1.5e-08)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/integrate/tests/test_integrate.py----------------------------------------
A:scipy.integrate.tests.test_integrate.t->arange(0.0, problem.stop_t, 0.05)
A:scipy.integrate.tests.test_integrate.(z, infodict)->odeint(problem.f, problem.z0, t, full_output=True)
A:scipy.integrate.tests.test_integrate.problem->problem_cls()
A:scipy.integrate.tests.test_integrate.ig->complex_ode(f, jac)
A:scipy.integrate.tests.test_integrate.z->complex_ode(f, jac).integrate(problem.stop_t)
A:scipy.integrate.tests.test_integrate.r->ode(f).set_integrator(sol)
A:scipy.integrate.tests.test_integrate.r2->ode(f).set_integrator(sol)
A:scipy.integrate.tests.test_integrate.z0->exp([1j, 2j, 3j, 4j, 5j])
A:scipy.integrate.tests.test_integrate.tmp->zeros((2, 2), float)
A:scipy.integrate.tests.test_integrate.omega->sqrt(self.k / self.m)
A:scipy.integrate.tests.test_integrate.j->array([[0.0, omega[0]], [-omega[1], 0.0]])
A:scipy.integrate.tests.test_integrate.solver->self._get_solver(fv, jacv)
scipy.integrate.tests.test_integrate.ComplexExp(ODE)
scipy.integrate.tests.test_integrate.ComplexExp.f(self,z,t)
scipy.integrate.tests.test_integrate.ComplexExp.jac(self,z,t)
scipy.integrate.tests.test_integrate.ComplexExp.verify(self,zs,t)
scipy.integrate.tests.test_integrate.DOP853CheckParameterUse(ODECheckParameterUse,TestCase)
scipy.integrate.tests.test_integrate.DOPRI5CheckParameterUse(ODECheckParameterUse,TestCase)
scipy.integrate.tests.test_integrate.LSODACheckParameterUse(ODECheckParameterUse,TestCase)
scipy.integrate.tests.test_integrate.ODE
scipy.integrate.tests.test_integrate.ODECheckParameterUse(object)
scipy.integrate.tests.test_integrate.ODECheckParameterUse._check_solver(self,solver)
scipy.integrate.tests.test_integrate.ODECheckParameterUse._get_solver(self,f,jac)
scipy.integrate.tests.test_integrate.ODECheckParameterUse.test_no_params(self)
scipy.integrate.tests.test_integrate.ODECheckParameterUse.test_one_scalar_param(self)
scipy.integrate.tests.test_integrate.ODECheckParameterUse.test_two_scalar_params(self)
scipy.integrate.tests.test_integrate.ODECheckParameterUse.test_vector_param(self)
scipy.integrate.tests.test_integrate.Pi(ODE)
scipy.integrate.tests.test_integrate.Pi.f(self,z,t)
scipy.integrate.tests.test_integrate.Pi.verify(self,zs,t)
scipy.integrate.tests.test_integrate.SimpleOscillator(ODE)
scipy.integrate.tests.test_integrate.SimpleOscillator.f(self,z,t)
scipy.integrate.tests.test_integrate.SimpleOscillator.verify(self,zs,t)
scipy.integrate.tests.test_integrate.TestComplexOde(TestCase)
scipy.integrate.tests.test_integrate.TestComplexOde._do_problem(self,problem,integrator,method='adams')
scipy.integrate.tests.test_integrate.TestComplexOde.test_dop853(self)
scipy.integrate.tests.test_integrate.TestComplexOde.test_dopri5(self)
scipy.integrate.tests.test_integrate.TestComplexOde.test_lsoda(self)
scipy.integrate.tests.test_integrate.TestComplexOde.test_vode(self)
scipy.integrate.tests.test_integrate.TestOde(TestCase)
scipy.integrate.tests.test_integrate.TestOde._do_problem(self,problem,integrator,method='adams')
scipy.integrate.tests.test_integrate.TestOde.test_concurrent_fail(self)
scipy.integrate.tests.test_integrate.TestOde.test_concurrent_ok(self)
scipy.integrate.tests.test_integrate.TestOde.test_dop853(self)
scipy.integrate.tests.test_integrate.TestOde.test_dopri5(self)
scipy.integrate.tests.test_integrate.TestOde.test_lsoda(self)
scipy.integrate.tests.test_integrate.TestOde.test_vode(self)
scipy.integrate.tests.test_integrate.TestOde.test_zvode(self)
scipy.integrate.tests.test_integrate.TestOdeint(TestCase)
scipy.integrate.tests.test_integrate.TestOdeint._do_problem(self,problem)
scipy.integrate.tests.test_integrate.TestOdeint.test_odeint(self)
scipy.integrate.tests.test_integrate.VODECheckParameterUse(ODECheckParameterUse,TestCase)
scipy.integrate.tests.test_integrate.ZVODECheckParameterUse(ODECheckParameterUse,TestCase)
scipy.integrate.tests.test_integrate.f(t,x)
scipy.integrate.tests.test_integrate.f1(t,x,omega)
scipy.integrate.tests.test_integrate.f2(t,x,omega1,omega2)
scipy.integrate.tests.test_integrate.fv(t,x,omega)
scipy.integrate.tests.test_integrate.jac(t,x)
scipy.integrate.tests.test_integrate.jac1(t,x,omega)
scipy.integrate.tests.test_integrate.jac2(t,x,omega1,omega2)
scipy.integrate.tests.test_integrate.jacv(t,x,omega)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/integrate/tests/test_quadrature.py----------------------------------------
A:scipy.integrate.tests.test_quadrature.(val, err)->quadrature(myfunc, 0, pi, (2, 1.8), rtol=1e-10)
A:scipy.integrate.tests.test_quadrature.val->romberg(myfunc, 0, pi, args=(2, 1.8), rtol=1e-10)
A:scipy.integrate.tests.test_quadrature.valmath->romberg(math.sin, 0, 1)
A:scipy.integrate.tests.test_quadrature.(wts, errcoff)->newton_cotes(x)
A:scipy.integrate.tests.test_quadrature.x->numpy.arange(3 * 2 * 4).reshape(3, 2, 4)
A:scipy.integrate.tests.test_quadrature.numeric_integral->numpy.dot(wts, y)
A:scipy.integrate.tests.test_quadrature.y_int->cumtrapz(y, dx=3, initial=1.23)
A:scipy.integrate.tests.test_quadrature.y_expected->numpy.array([[[0.0, 0.5, 2.0, 4.5], [0.0, 4.5, 10.0, 16.5]], [[0.0, 8.5, 18.0, 28.5], [0.0, 12.5, 26.0, 40.5]], [[0.0, 16.5, 34.0, 52.5], [0.0, 20.5, 42.0, 64.5]]])
A:scipy.integrate.tests.test_quadrature.y->numpy.linspace(-2, 2, num=5)
scipy.integrate.tests.test_TestCumtrapz(TestCase)
scipy.integrate.tests.test_TestCumtrapz.test_1d(self)
scipy.integrate.tests.test_TestCumtrapz.test_nd(self)
scipy.integrate.tests.test_TestCumtrapz.test_x_none(self)
scipy.integrate.tests.test_TestQuadrature(TestCase)
scipy.integrate.tests.test_TestQuadrature.quad(self,x,a,b,args)
scipy.integrate.tests.test_TestQuadrature.test_newton_cotes(self)
scipy.integrate.tests.test_TestQuadrature.test_newton_cotes2(self)
scipy.integrate.tests.test_TestQuadrature.test_non_dtype(self)
scipy.integrate.tests.test_TestQuadrature.test_quadrature(self)
scipy.integrate.tests.test_TestQuadrature.test_quadrature_rtol(self)
scipy.integrate.tests.test_TestQuadrature.test_romb(self)
scipy.integrate.tests.test_TestQuadrature.test_romberg(self)
scipy.integrate.tests.test_TestQuadrature.test_romberg_rtol(self)
scipy.integrate.tests.test_quadrature.TestCumtrapz(TestCase)
scipy.integrate.tests.test_quadrature.TestCumtrapz.test_1d(self)
scipy.integrate.tests.test_quadrature.TestCumtrapz.test_nd(self)
scipy.integrate.tests.test_quadrature.TestCumtrapz.test_x_none(self)
scipy.integrate.tests.test_quadrature.TestQuadrature(TestCase)
scipy.integrate.tests.test_quadrature.TestQuadrature.quad(self,x,a,b,args)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_newton_cotes(self)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_newton_cotes2(self)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_non_dtype(self)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_quadrature(self)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_quadrature_rtol(self)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_romb(self)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_romberg(self)
scipy.integrate.tests.test_quadrature.TestQuadrature.test_romberg_rtol(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/extract.py----------------------------------------
A:scipy.sparse.extract.A->coo_matrix(A, copy=False)
scipy.sparse.extract.find(A)
scipy.sparse.extract.tril(A,k=0,format=None)
scipy.sparse.extract.triu(A,k=0,format=None)
scipy.sparse.find(A)
scipy.sparse.tril(A,k=0,format=None)
scipy.sparse.triu(A,k=0,format=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/sputils.py----------------------------------------
A:scipy.sparse.sputils.t->upcast(*map(np.dtype, args))
A:scipy.sparse.sputils.upcast->numpy.find_common_type(args, [])
A:scipy.sparse.sputils.newdtype->numpy.dtype(dtype)
scipy.sparse.sputils.getdtype(dtype,a=None,default=None)
scipy.sparse.sputils.isdense(x)
scipy.sparse.sputils.isintlike(x)
scipy.sparse.sputils.isscalarlike(x)
scipy.sparse.sputils.issequence(t)
scipy.sparse.sputils.isshape(x)
scipy.sparse.sputils.to_native(A)
scipy.sparse.sputils.upcast(*args)
scipy.sparse.sputils.upcast_char(*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/spfuncs.py----------------------------------------
A:scipy.sparse.spfuncs.A->csr_matrix(A)
A:scipy.sparse.spfuncs.nnz->float(A.nnz)
scipy.sparse.spfuncs.count_blocks(A,blocksize)
scipy.sparse.spfuncs.estimate_blocksize(A,efficiency=0.7)
scipy.sparse.spfuncs.extract_diagonal(A)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/csr.py----------------------------------------
A:scipy.sparse.csr.lil->lil_matrix(self.shape, dtype=self.dtype)
A:scipy.sparse.csr.rows[n]->ind[start:end].tolist()
A:scipy.sparse.csr.data[n]->dat[start:end].tolist()
A:scipy.sparse.csr.indptr->numpy.arange(len(indices) + 1, dtype=np.intc)
A:scipy.sparse.csr.indices->indices.copy().copy()
A:scipy.sparse.csr.data->numpy.ones(len(indices), dtype=self.dtype)
A:scipy.sparse.csr.A->csc_matrix((data, indices, indptr), shape=self.shape)
A:scipy.sparse.csr.blks->csr_count_blocks(M, N, R, C, self.indptr, self.indices)
A:scipy.sparse.csr.x->numpy.asarray(x, dtype=np.intc)
A:scipy.sparse.csr.max_indx->indices.copy().copy().max()
A:scipy.sparse.csr.min_indx->indices.copy().copy().min()
A:scipy.sparse.csr.(min_indx, max_indx)->check_bounds(indices, N)
A:scipy.sparse.csr.P->extractor(row, self.shape[0])
A:scipy.sparse.csr.row->numpy.ravel(row)
A:scipy.sparse.csr.col->asindices(col)
A:scipy.sparse.csr.num_samples->len(row)
A:scipy.sparse.csr.val->numpy.empty(num_samples, dtype=self.dtype)
A:scipy.sparse.csr.num_matches->len(indxs)
A:scipy.sparse.csr.(start, stop, stride)->cslice.indices(self.shape[1])
A:scipy.sparse.csr.row_slice->csr_matrix((row_data, row_indices, row_indptr), shape=shape)
A:scipy.sparse.csr.row_indptr->numpy.array([0, len(row_indices)])
A:scipy.sparse.csr.row_indices->abs(row_indices[::-1])
A:scipy.sparse.csr.(i0, i1)->process_slice(row_slice, M)
A:scipy.sparse.csr.(j0, j1)->process_slice(col_slice, N)
A:scipy.sparse.csr.(indptr, indices, data)->get_csr_submatrix(M, N, self.indptr, self.indices, self.data, int(i0), int(i1), int(j0), int(j1))
scipy.sparse.csr.csr_matrix(_cs_matrix)
scipy.sparse.csr.csr_matrix.__getitem__(self,key)
scipy.sparse.csr.csr_matrix._get_row_slice(self,i,cslice)
scipy.sparse.csr.csr_matrix._get_single_element(self,row,col)
scipy.sparse.csr.csr_matrix._get_submatrix(self,row_slice,col_slice)
scipy.sparse.csr.csr_matrix._swap(self,x)
scipy.sparse.csr.csr_matrix.getcol(self,i)
scipy.sparse.csr.csr_matrix.getrow(self,i)
scipy.sparse.csr.csr_matrix.tobsr(self,blocksize=None,copy=True)
scipy.sparse.csr.csr_matrix.tocsc(self)
scipy.sparse.csr.csr_matrix.tocsr(self,copy=False)
scipy.sparse.csr.csr_matrix.tolil(self)
scipy.sparse.csr.csr_matrix.transpose(self,copy=False)
scipy.sparse.csr.isspmatrix_csr(x)
scipy.sparse.csr_matrix(_cs_matrix)
scipy.sparse.csr_matrix.__getitem__(self,key)
scipy.sparse.csr_matrix._get_row_slice(self,i,cslice)
scipy.sparse.csr_matrix._get_single_element(self,row,col)
scipy.sparse.csr_matrix._get_submatrix(self,row_slice,col_slice)
scipy.sparse.csr_matrix._swap(self,x)
scipy.sparse.csr_matrix.getcol(self,i)
scipy.sparse.csr_matrix.getrow(self,i)
scipy.sparse.csr_matrix.tobsr(self,blocksize=None,copy=True)
scipy.sparse.csr_matrix.tocsc(self)
scipy.sparse.csr_matrix.tocsr(self,copy=False)
scipy.sparse.csr_matrix.tolil(self)
scipy.sparse.csr_matrix.transpose(self,copy=False)
scipy.sparse.isspmatrix_csr(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/csc.py----------------------------------------
A:scipy.sparse.csc.csr->self.tocsr()
A:scipy.sparse.csc.indptr->numpy.empty(M + 1, dtype=np.intc)
A:scipy.sparse.csc.indices->numpy.empty(self.nnz, dtype=np.intc)
A:scipy.sparse.csc.data->numpy.empty(self.nnz, dtype=upcast(self.dtype))
A:scipy.sparse.csc.A->csr_matrix((data, indices, indptr), shape=self.shape)
A:scipy.sparse.csc.row->row.reshape(-1).reshape(-1)
A:scipy.sparse.csc.col->col.reshape(-1, 1).reshape(-1, 1)
scipy.sparse.csc.csc_matrix(_cs_matrix)
scipy.sparse.csc.csc_matrix.__getitem__(self,key)
scipy.sparse.csc.csc_matrix.__iter__(self)
scipy.sparse.csc.csc_matrix._swap(self,x)
scipy.sparse.csc.csc_matrix.getcol(self,i)
scipy.sparse.csc.csc_matrix.getrow(self,i)
scipy.sparse.csc.csc_matrix.tocsc(self,copy=False)
scipy.sparse.csc.csc_matrix.tocsr(self)
scipy.sparse.csc.csc_matrix.transpose(self,copy=False)
scipy.sparse.csc.isspmatrix_csc(x)
scipy.sparse.csc_matrix(_cs_matrix)
scipy.sparse.csc_matrix.__getitem__(self,key)
scipy.sparse.csc_matrix.__iter__(self)
scipy.sparse.csc_matrix._swap(self,x)
scipy.sparse.csc_matrix.getcol(self,i)
scipy.sparse.csc_matrix.getrow(self,i)
scipy.sparse.csc_matrix.tocsc(self,copy=False)
scipy.sparse.csc_matrix.tocsr(self)
scipy.sparse.csc_matrix.transpose(self,copy=False)
scipy.sparse.isspmatrix_csc(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/coo.py----------------------------------------
A:scipy.sparse.coo.self.row->numpy.asarray(self.row, dtype=np.intc)
A:scipy.sparse.coo.self.col->numpy.asarray(self.col, dtype=np.intc)
A:scipy.sparse.coo.self.data->to_native(self.data)
A:scipy.sparse.coo.coo->arg1.tocoo()
A:scipy.sparse.coo.M->numpy.atleast_2d(np.asarray(arg1))
A:scipy.sparse.coo.(self.row, self.col)->numpy.atleast_2d(np.asarray(arg1)).nonzero()
A:scipy.sparse.coo.nnz->property(fget=getnnz)
A:scipy.sparse.coo.B->self._process_toarray_args(order, out)
A:scipy.sparse.coo.fortran->int(B.flags.f_contiguous)
A:scipy.sparse.coo.indptr->numpy.empty(M + 1, dtype=np.intc)
A:scipy.sparse.coo.indices->numpy.empty(self.nnz, dtype=np.intc)
A:scipy.sparse.coo.data->numpy.zeros((len(diags), self.col.max() + 1), dtype=self.dtype)
A:scipy.sparse.coo.A->csr_matrix((data, indices, indptr), shape=self.shape)
A:scipy.sparse.coo.diags->numpy.unique(ks)
A:scipy.sparse.coo.dok->dok_matrix(self.shape, dtype=self.dtype)
A:scipy.sparse.coo.result->numpy.zeros(self.shape[0], dtype=upcast_char(self.dtype.char, other.dtype.char))
scipy.sparse.coo.coo_matrix(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse.coo.coo_matrix.__init__(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse.coo.coo_matrix._check(self)
scipy.sparse.coo.coo_matrix._mul_multivector(self,other)
scipy.sparse.coo.coo_matrix._mul_vector(self,other)
scipy.sparse.coo.coo_matrix._with_data(self,data,copy=True)
scipy.sparse.coo.coo_matrix.getnnz(self)
scipy.sparse.coo.coo_matrix.toarray(self,order=None,out=None)
scipy.sparse.coo.coo_matrix.tocoo(self,copy=False)
scipy.sparse.coo.coo_matrix.tocsc(self)
scipy.sparse.coo.coo_matrix.tocsr(self)
scipy.sparse.coo.coo_matrix.todia(self)
scipy.sparse.coo.coo_matrix.todok(self)
scipy.sparse.coo.coo_matrix.transpose(self,copy=False)
scipy.sparse.coo.isspmatrix_coo(x)
scipy.sparse.coo_matrix(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse.coo_matrix._check(self)
scipy.sparse.coo_matrix._mul_multivector(self,other)
scipy.sparse.coo_matrix._mul_vector(self,other)
scipy.sparse.coo_matrix._with_data(self,data,copy=True)
scipy.sparse.coo_matrix.getnnz(self)
scipy.sparse.coo_matrix.toarray(self,order=None,out=None)
scipy.sparse.coo_matrix.tocoo(self,copy=False)
scipy.sparse.coo_matrix.tocsc(self)
scipy.sparse.coo_matrix.tocsr(self)
scipy.sparse.coo_matrix.todia(self)
scipy.sparse.coo_matrix.todok(self)
scipy.sparse.coo_matrix.transpose(self,copy=False)
scipy.sparse.isspmatrix_coo(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/dok.py----------------------------------------
A:scipy.sparse.dok.self.dtype->getdtype(dtype, default=float)
A:scipy.sparse.dok.arg1->numpy.asarray(arg1)
A:scipy.sparse.dok.nnz->property(fget=getnnz)
A:scipy.sparse.dok.seq->xrange(j.start or 0, j.stop or self.shape[1], j.step or 1)
A:scipy.sparse.dok.new->dok_matrix(dtype=self.dtype)
A:scipy.sparse.dok.csc->self.tocsc()
A:scipy.sparse.dok.result->numpy.zeros((M, n_vecs), dtype=upcast(self.dtype, other.dtype))
A:scipy.sparse.dok.new[key[1], key[0]]->numpy.conj(value)
A:scipy.sparse.dok.indx->int(columns == 1)
A:scipy.sparse.dok.N->len(cols_or_rows)
A:scipy.sparse.dok.num->numpy.searchsorted(cols_or_rows, key[0])
A:scipy.sparse.dok.base->dok_matrix()
A:scipy.sparse.dok.ext->dok_matrix()
A:scipy.sparse.dok.data->numpy.asarray(list(self.values()), dtype=self.dtype)
scipy.sparse.dok.dok_matrix(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse.dok.dok_matrix.__add__(self,other)
scipy.sparse.dok.dok_matrix.__getitem__(self,key)
scipy.sparse.dok.dok_matrix.__imul__(self,other)
scipy.sparse.dok.dok_matrix.__init__(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse.dok.dok_matrix.__itruediv__(self,other)
scipy.sparse.dok.dok_matrix.__len__(self)
scipy.sparse.dok.dok_matrix.__neg__(self)
scipy.sparse.dok.dok_matrix.__radd__(self,other)
scipy.sparse.dok.dok_matrix.__setitem__(self,key,value)
scipy.sparse.dok.dok_matrix.__truediv__(self,other)
scipy.sparse.dok.dok_matrix._mul_multivector(self,other)
scipy.sparse.dok.dok_matrix._mul_scalar(self,other)
scipy.sparse.dok.dok_matrix._mul_vector(self,other)
scipy.sparse.dok.dok_matrix.conjtransp(self)
scipy.sparse.dok.dok_matrix.copy(self)
scipy.sparse.dok.dok_matrix.get(self,key,default=0.0)
scipy.sparse.dok.dok_matrix.getnnz(self)
scipy.sparse.dok.dok_matrix.resize(self,shape)
scipy.sparse.dok.dok_matrix.split(self,cols_or_rows,columns=1)
scipy.sparse.dok.dok_matrix.take(self,cols_or_rows,columns=1)
scipy.sparse.dok.dok_matrix.toarray(self,order=None,out=None)
scipy.sparse.dok.dok_matrix.tocoo(self)
scipy.sparse.dok.dok_matrix.tocsc(self)
scipy.sparse.dok.dok_matrix.tocsr(self)
scipy.sparse.dok.dok_matrix.todok(self,copy=False)
scipy.sparse.dok.dok_matrix.transpose(self)
scipy.sparse.dok.isspmatrix_dok(x)
scipy.sparse.dok_matrix(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse.dok_matrix.__add__(self,other)
scipy.sparse.dok_matrix.__getitem__(self,key)
scipy.sparse.dok_matrix.__imul__(self,other)
scipy.sparse.dok_matrix.__itruediv__(self,other)
scipy.sparse.dok_matrix.__len__(self)
scipy.sparse.dok_matrix.__neg__(self)
scipy.sparse.dok_matrix.__radd__(self,other)
scipy.sparse.dok_matrix.__setitem__(self,key,value)
scipy.sparse.dok_matrix.__truediv__(self,other)
scipy.sparse.dok_matrix._mul_multivector(self,other)
scipy.sparse.dok_matrix._mul_scalar(self,other)
scipy.sparse.dok_matrix._mul_vector(self,other)
scipy.sparse.dok_matrix.conjtransp(self)
scipy.sparse.dok_matrix.copy(self)
scipy.sparse.dok_matrix.get(self,key,default=0.0)
scipy.sparse.dok_matrix.getnnz(self)
scipy.sparse.dok_matrix.resize(self,shape)
scipy.sparse.dok_matrix.split(self,cols_or_rows,columns=1)
scipy.sparse.dok_matrix.take(self,cols_or_rows,columns=1)
scipy.sparse.dok_matrix.toarray(self,order=None,out=None)
scipy.sparse.dok_matrix.tocoo(self)
scipy.sparse.dok_matrix.tocsc(self)
scipy.sparse.dok_matrix.tocsr(self)
scipy.sparse.dok_matrix.todok(self,copy=False)
scipy.sparse.dok_matrix.transpose(self)
scipy.sparse.isspmatrix_dok(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/dia.py----------------------------------------
A:scipy.sparse.dia.arg1->numpy.asarray(arg1)
A:scipy.sparse.dia.A->coo_matrix(arg1, dtype=dtype).todia()
A:scipy.sparse.dia.self.data->self.data.astype(dtype)
A:scipy.sparse.dia.self.offsets->numpy.atleast_1d(np.array(arg1[1], dtype=np.intc, copy=copy))
A:scipy.sparse.dia.nnz->property(fget=getnnz)
A:scipy.sparse.dia.format->self.getformat()
A:scipy.sparse.dia.y->numpy.zeros(self.shape[0], dtype=upcast_char(self.dtype.char, x.dtype.char))
A:scipy.sparse.dia.num_data->len(self.data)
A:scipy.sparse.dia.row->numpy.arange(len_data).reshape(1, -1).repeat(num_data, axis=0)
A:scipy.sparse.dia.col->numpy.arange(len_data).reshape(1, -1).repeat(num_data, axis=0).copy()
scipy.sparse.dia.dia_matrix(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse.dia.dia_matrix.__init__(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse.dia.dia_matrix.__repr__(self)
scipy.sparse.dia.dia_matrix._mul_multimatrix(self,other)
scipy.sparse.dia.dia_matrix._mul_vector(self,other)
scipy.sparse.dia.dia_matrix._with_data(self,data,copy=True)
scipy.sparse.dia.dia_matrix.getnnz(self)
scipy.sparse.dia.dia_matrix.tocoo(self)
scipy.sparse.dia.dia_matrix.tocsc(self)
scipy.sparse.dia.dia_matrix.tocsr(self)
scipy.sparse.dia.dia_matrix.todia(self,copy=False)
scipy.sparse.dia.isspmatrix_dia(x)
scipy.sparse.dia_matrix(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse.dia_matrix.__repr__(self)
scipy.sparse.dia_matrix._mul_multimatrix(self,other)
scipy.sparse.dia_matrix._mul_vector(self,other)
scipy.sparse.dia_matrix._with_data(self,data,copy=True)
scipy.sparse.dia_matrix.getnnz(self)
scipy.sparse.dia_matrix.tocoo(self)
scipy.sparse.dia_matrix.tocsc(self)
scipy.sparse.dia_matrix.tocsr(self)
scipy.sparse.dia_matrix.todia(self,copy=False)
scipy.sparse.isspmatrix_dia(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/compressed.py----------------------------------------
A:scipy.sparse.compressed.arg1->numpy.asarray(arg1)
A:scipy.sparse.compressed.self.data->numpy.concatenate((self.data[:newindx], val, self.data[newindx:]))
A:scipy.sparse.compressed.self.indices->numpy.concatenate((self.indices[:newindx], minor_index, self.indices[newindx:]))
A:scipy.sparse.compressed.self.indptr->self.indptr.copy()
A:scipy.sparse.compressed.other->self.__class__(other)
A:scipy.sparse.compressed.self.shape->self._swap((major_dim, minor_dim))
A:scipy.sparse.compressed.nnz->property(fget=getnnz)
A:scipy.sparse.compressed.(major_name, minor_name)->self._swap(('row', 'column'))
A:scipy.sparse.compressed.(major_dim, minor_dim)->self._swap(self.shape)
A:scipy.sparse.compressed.result->numpy.zeros((M, n_vecs), dtype=upcast_char(self.dtype.char, other.dtype.char))
A:scipy.sparse.compressed.fn->getattr(sparsetools, self.format + op + self.format)
A:scipy.sparse.compressed.indptr->numpy.empty_like(self.indptr)
A:scipy.sparse.compressed.indices->indices.copy().copy()
A:scipy.sparse.compressed.data->data.copy().copy()
A:scipy.sparse.compressed.y->numpy.empty(min(self.shape), dtype=upcast(self.dtype))
A:scipy.sparse.compressed.(major, minor)->self._swap((row, col))
A:scipy.sparse.compressed.(start, stop, stride)->minor.indices(minor_shape)
A:scipy.sparse.compressed.out_shape->self._swap((1, stop - start))
A:scipy.sparse.compressed.(major_index, minor_index)->self._swap((row, col))
A:scipy.sparse.compressed.num_matches->len(indxs)
A:scipy.sparse.compressed.(slice0, slice1)->self._swap((slice0, slice1))
A:scipy.sparse.compressed.(shape0, shape1)->self._swap(self.shape)
A:scipy.sparse.compressed.(i0, i1)->_process_slice(slice0, shape0)
A:scipy.sparse.compressed.(j0, j1)->_process_slice(slice1, shape1)
A:scipy.sparse.compressed.aux->sparsetools.get_csr_submatrix(shape0, shape1, self.indptr, self.indices, self.data, i0, i1, j0, j1)
A:scipy.sparse.compressed.shape->self._swap((i1 - i0, j1 - j0))
A:scipy.sparse.compressed.val->numpy.array([val], dtype=self.data.dtype)
A:scipy.sparse.compressed.minor_index->numpy.array([minor_index], dtype=self.indices.dtype)
A:scipy.sparse.compressed.minor_indices->minor_indices.copy().copy()
A:scipy.sparse.compressed.major_indices->numpy.empty(len(minor_indices), dtype=np.intc)
A:scipy.sparse.compressed.(row, col)->self._swap((major_indices, minor_indices))
A:scipy.sparse.compressed.(M, N)->self._swap(self.shape)
A:scipy.sparse.compressed.self.__has_sorted_indices->bool(val)
A:scipy.sparse.compressed.has_sorted_indices->property(fget=__get_sorted, fset=__set_sorted)
A:scipy.sparse.compressed.A->self.__class__((data, indices, indptr), shape=self.shape)
scipy.sparse.compressed._cs_matrix(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse.compressed._cs_matrix.__add__(self,other)
scipy.sparse.compressed._cs_matrix.__get_sorted(self)
scipy.sparse.compressed._cs_matrix.__getitem__(self,key)
scipy.sparse.compressed._cs_matrix.__init__(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse.compressed._cs_matrix.__radd__(self,other)
scipy.sparse.compressed._cs_matrix.__rsub__(self,other)
scipy.sparse.compressed._cs_matrix.__set_sorted(self,val)
scipy.sparse.compressed._cs_matrix.__setitem__(self,key,val)
scipy.sparse.compressed._cs_matrix.__sub__(self,other)
scipy.sparse.compressed._cs_matrix.__truediv__(self,other)
scipy.sparse.compressed._cs_matrix._binopt(self,other,op)
scipy.sparse.compressed._cs_matrix._get_single_element(self,row,col)
scipy.sparse.compressed._cs_matrix._get_slice(self,i,start,stop,stride,shape)
scipy.sparse.compressed._cs_matrix._get_submatrix(self,slice0,slice1)
scipy.sparse.compressed._cs_matrix._mul_multivector(self,other)
scipy.sparse.compressed._cs_matrix._mul_sparse_matrix(self,other)
scipy.sparse.compressed._cs_matrix._mul_vector(self,other)
scipy.sparse.compressed._cs_matrix._set_self(self,other,copy=False)
scipy.sparse.compressed._cs_matrix._with_data(self,data,copy=True)
scipy.sparse.compressed._cs_matrix.check_format(self,full_check=True)
scipy.sparse.compressed._cs_matrix.diagonal(self)
scipy.sparse.compressed._cs_matrix.eliminate_zeros(self)
scipy.sparse.compressed._cs_matrix.getnnz(self)
scipy.sparse.compressed._cs_matrix.multiply(self,other)
scipy.sparse.compressed._cs_matrix.prune(self)
scipy.sparse.compressed._cs_matrix.sort_indices(self)
scipy.sparse.compressed._cs_matrix.sorted_indices(self)
scipy.sparse.compressed._cs_matrix.sum(self,axis=None)
scipy.sparse.compressed._cs_matrix.sum_duplicates(self)
scipy.sparse.compressed._cs_matrix.toarray(self,order=None,out=None)
scipy.sparse.compressed._cs_matrix.tocoo(self,copy=True)
scipy.sparse.compressed._cs_matrix.todia(self)
scipy.sparse.compressed._cs_matrix.todok(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/setupscons.py----------------------------------------
A:scipy.sparse.setupscons.config->Configuration('sparse', parent_package, top_path, setup_name='setupscons.py')
scipy.sparse.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/construct.py----------------------------------------
A:scipy.sparse.construct.diagonals->list(map(np.atleast_1d, diagonals))
A:scipy.sparse.construct.offsets->numpy.atleast_1d(offsets)
A:scipy.sparse.construct.dtype->upcast(*tuple([A.dtype for A in blocks[block_mask]]))
A:scipy.sparse.construct.M->max(0, M)
A:scipy.sparse.construct.data_arr->numpy.zeros((len(offsets), M), dtype=dtype)
A:scipy.sparse.construct.k->int(density * m * n)
A:scipy.sparse.construct.length->min(m + offset, n - offset)
A:scipy.sparse.construct.indptr->numpy.arange(n + 1, dtype=np.intc)
A:scipy.sparse.construct.indices->numpy.arange(n, dtype=np.intc)
A:scipy.sparse.construct.data->numpy.empty(nnz, dtype=dtype)
A:scipy.sparse.construct.row->numpy.empty(nnz, dtype=np.intc)
A:scipy.sparse.construct.col->numpy.empty(nnz, dtype=np.intc)
A:scipy.sparse.construct.diags->numpy.ones((1, max(0, min(m + k, n))), dtype=dtype)
A:scipy.sparse.construct.B->coo_matrix(B)
A:scipy.sparse.construct.A->coo_matrix(blocks[i, j])
A:scipy.sparse.construct.L->kron(eye(B.shape[0], dtype=dtype), A, format=format)
A:scipy.sparse.construct.R->kron(B, eye(A.shape[0], dtype=dtype), format=format)
A:scipy.sparse.construct.blocks->numpy.asarray(blocks, dtype='object')
A:scipy.sparse.construct.block_mask->numpy.zeros(blocks.shape, dtype=np.bool)
A:scipy.sparse.construct.brow_lengths->numpy.zeros(blocks.shape[0], dtype=np.intc)
A:scipy.sparse.construct.bcol_lengths->numpy.zeros(blocks.shape[1], dtype=np.intc)
A:scipy.sparse.construct.nnz->sum([A.nnz for A in blocks[block_mask]])
A:scipy.sparse.construct.row_offsets->numpy.concatenate(([0], np.cumsum(brow_lengths)))
A:scipy.sparse.construct.col_offsets->numpy.concatenate(([0], np.cumsum(bcol_lengths)))
A:scipy.sparse.construct.nmat->len(mats)
A:scipy.sparse.construct.row[ia]->coo_matrix(a)
A:scipy.sparse.construct.gk->min(k + mlow, fac * k)
A:scipy.sparse.construct.id->_gen_unique_rand(gk)
A:scipy.sparse.construct.j->numpy.floor(id * 1.0 / m).astype(tp)
A:scipy.sparse.construct.i->(id - j * m).astype(tp)
A:scipy.sparse.construct.vals->numpy.random.rand(k).astype(dtype)
scipy.sparse.block_diag(mats,format=None,dtype=None)
scipy.sparse.bmat(blocks,format=None,dtype=None)
scipy.sparse.construct.block_diag(mats,format=None,dtype=None)
scipy.sparse.construct.bmat(blocks,format=None,dtype=None)
scipy.sparse.construct.diags(diagonals,offsets,shape=None,format=None,dtype=None)
scipy.sparse.construct.eye(m,n=None,k=0,dtype=float,format=None)
scipy.sparse.construct.hstack(blocks,format=None,dtype=None)
scipy.sparse.construct.identity(n,dtype='d',format=None)
scipy.sparse.construct.kron(A,B,format=None)
scipy.sparse.construct.kronsum(A,B,format=None)
scipy.sparse.construct.rand(m,n,density=0.01,format='coo',dtype=None)
scipy.sparse.construct.spdiags(data,diags,m,n,format=None)
scipy.sparse.construct.vstack(blocks,format=None,dtype=None)
scipy.sparse.diags(diagonals,offsets,shape=None,format=None,dtype=None)
scipy.sparse.eye(m,n=None,k=0,dtype=float,format=None)
scipy.sparse.hstack(blocks,format=None,dtype=None)
scipy.sparse.identity(n,dtype='d',format=None)
scipy.sparse.kron(A,B,format=None)
scipy.sparse.kronsum(A,B,format=None)
scipy.sparse.rand(m,n,density=0.01,format='coo',dtype=None)
scipy.sparse.spdiags(data,diags,m,n,format=None)
scipy.sparse.vstack(blocks,format=None,dtype=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/setup.py----------------------------------------
A:scipy.sparse.setup.config->Configuration('sparse', parent_package, top_path)
scipy.sparse.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/data.py----------------------------------------
A:scipy.sparse.data.dtype->property(fget=_get_dtype, fset=_set_dtype)
A:scipy.sparse.data.result->op(self.data)
A:scipy.sparse.data.x->self._with_data(result, copy=True)
scipy.sparse.data._data_matrix(self)
scipy.sparse.data._data_matrix.__abs__(self)
scipy.sparse.data._data_matrix.__imul__(self,other)
scipy.sparse.data._data_matrix.__init__(self)
scipy.sparse.data._data_matrix.__itruediv__(self,other)
scipy.sparse.data._data_matrix.__neg__(self)
scipy.sparse.data._data_matrix._get_dtype(self)
scipy.sparse.data._data_matrix._imag(self)
scipy.sparse.data._data_matrix._mul_scalar(self,other)
scipy.sparse.data._data_matrix._real(self)
scipy.sparse.data._data_matrix._set_dtype(self,newtype)
scipy.sparse.data._data_matrix.astype(self,t)
scipy.sparse.data._data_matrix.conj(self)
scipy.sparse.data._data_matrix.copy(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/bsr.py----------------------------------------
A:scipy.sparse.bsr.arg1->coo_matrix(arg1, dtype=dtype).tobsr(blocksize=blocksize)
A:scipy.sparse.bsr.blocksize->property(fget=_get_blocksize)
A:scipy.sparse.bsr.self.data->to_native(self.data)
A:scipy.sparse.bsr.self.indices->numpy.asarray(self.indices, np.intc)
A:scipy.sparse.bsr.self.indptr->numpy.asarray(self.indptr, np.intc)
A:scipy.sparse.bsr.nnz->self.getnnz()
A:scipy.sparse.bsr.format->self.getformat()
A:scipy.sparse.bsr.y->numpy.empty(min(M, N), dtype=upcast(self.dtype))
A:scipy.sparse.bsr.result->numpy.zeros((M, n_vecs), dtype=upcast(self.dtype, other.dtype))
A:scipy.sparse.bsr.indptr->numpy.empty_like(self.indptr)
A:scipy.sparse.bsr.other->self.__class__(other, blocksize=self.blocksize)
A:scipy.sparse.bsr.indices->indices.copy().copy()
A:scipy.sparse.bsr.data->data.reshape(-1, R, C).reshape(-1, R, C)
A:scipy.sparse.bsr.row->row.reshape(-1).reshape(-1)
A:scipy.sparse.bsr.col->col.reshape(-1).reshape(-1)
A:scipy.sparse.bsr.mask->(self.data != 0).reshape(-1, R * C).sum(axis=1)
A:scipy.sparse.bsr.proxy->csr_matrix((mask, self.indices, self.indptr), shape=(M // R, N // C))
A:scipy.sparse.bsr.fn->getattr(sparsetools, self.format + op + self.format)
scipy.sparse.bsr.bsr_matrix(self,arg1,shape=None,dtype=None,copy=False,blocksize=None)
scipy.sparse.bsr.bsr_matrix.__getitem__(self,key)
scipy.sparse.bsr.bsr_matrix.__init__(self,arg1,shape=None,dtype=None,copy=False,blocksize=None)
scipy.sparse.bsr.bsr_matrix.__repr__(self)
scipy.sparse.bsr.bsr_matrix.__setitem__(self,key,val)
scipy.sparse.bsr.bsr_matrix._binopt(self,other,op,in_shape=None,out_shape=None)
scipy.sparse.bsr.bsr_matrix._get_blocksize(self)
scipy.sparse.bsr.bsr_matrix._mul_multivector(self,other)
scipy.sparse.bsr.bsr_matrix._mul_sparse_matrix(self,other)
scipy.sparse.bsr.bsr_matrix._mul_vector(self,other)
scipy.sparse.bsr.bsr_matrix._with_data(self,data,copy=True)
scipy.sparse.bsr.bsr_matrix.check_format(self,full_check=True)
scipy.sparse.bsr.bsr_matrix.diagonal(self)
scipy.sparse.bsr.bsr_matrix.eliminate_zeros(self)
scipy.sparse.bsr.bsr_matrix.getdata(self,ind)
scipy.sparse.bsr.bsr_matrix.getnnz(self)
scipy.sparse.bsr.bsr_matrix.matmat(self,other)
scipy.sparse.bsr.bsr_matrix.matvec(self,other)
scipy.sparse.bsr.bsr_matrix.prune(self)
scipy.sparse.bsr.bsr_matrix.sort_indices(self)
scipy.sparse.bsr.bsr_matrix.sum_duplicates(self)
scipy.sparse.bsr.bsr_matrix.tobsr(self,blocksize=None,copy=False)
scipy.sparse.bsr.bsr_matrix.tocoo(self,copy=True)
scipy.sparse.bsr.bsr_matrix.tocsc(self)
scipy.sparse.bsr.bsr_matrix.tocsr(self)
scipy.sparse.bsr.bsr_matrix.transpose(self)
scipy.sparse.bsr.isspmatrix_bsr(x)
scipy.sparse.bsr_matrix(self,arg1,shape=None,dtype=None,copy=False,blocksize=None)
scipy.sparse.bsr_matrix.__getitem__(self,key)
scipy.sparse.bsr_matrix.__repr__(self)
scipy.sparse.bsr_matrix.__setitem__(self,key,val)
scipy.sparse.bsr_matrix._binopt(self,other,op,in_shape=None,out_shape=None)
scipy.sparse.bsr_matrix._get_blocksize(self)
scipy.sparse.bsr_matrix._mul_multivector(self,other)
scipy.sparse.bsr_matrix._mul_sparse_matrix(self,other)
scipy.sparse.bsr_matrix._mul_vector(self,other)
scipy.sparse.bsr_matrix._with_data(self,data,copy=True)
scipy.sparse.bsr_matrix.check_format(self,full_check=True)
scipy.sparse.bsr_matrix.diagonal(self)
scipy.sparse.bsr_matrix.eliminate_zeros(self)
scipy.sparse.bsr_matrix.getdata(self,ind)
scipy.sparse.bsr_matrix.getnnz(self)
scipy.sparse.bsr_matrix.matmat(self,other)
scipy.sparse.bsr_matrix.matvec(self,other)
scipy.sparse.bsr_matrix.prune(self)
scipy.sparse.bsr_matrix.sort_indices(self)
scipy.sparse.bsr_matrix.sum_duplicates(self)
scipy.sparse.bsr_matrix.tobsr(self,blocksize=None,copy=False)
scipy.sparse.bsr_matrix.tocoo(self,copy=True)
scipy.sparse.bsr_matrix.tocsc(self)
scipy.sparse.bsr_matrix.tocsr(self)
scipy.sparse.bsr_matrix.transpose(self)
scipy.sparse.isspmatrix_bsr(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/base.py----------------------------------------
A:scipy.sparse.base.shape->property(fget=get_shape, fset=set_shape)
A:scipy.sparse.base.self->self.reshape(shape).reshape(shape)
A:scipy.sparse.base.nnz->self.reshape(shape).reshape(shape).getnnz()
A:scipy.sparse.base.format->self.reshape(shape).reshape(shape).getformat()
A:scipy.sparse.base.maxprint->self.reshape(shape).reshape(shape).getmaxprint()
A:scipy.sparse.base.A->self.reshape(shape).reshape(shape).tocoo()
A:scipy.sparse.base.triples->zip(list(zip(row, col)), data)
A:scipy.sparse.base.out->tostr(A.row, A.col, A.data)
A:scipy.sparse.base.other->int(other)
A:scipy.sparse.base.result->numpy.asmatrix(result)
A:scipy.sparse.base.tr->numpy.asarray(other).transpose()
A:scipy.sparse.base.col_selector->csc_matrix(([1], [[j], [0]]), shape=(n, 1), dtype=self.dtype)
A:scipy.sparse.base.row_selector->csr_matrix(([1], [[0], [i]]), shape=(1, m), dtype=self.dtype)
A:scipy.sparse.base.mean->self.reshape(shape).reshape(shape).sum(1)
A:scipy.sparse.base.max_index->min(M, N - k, len(values))
scipy.sparse.SparseEfficiencyWarning(SparseWarning)
scipy.sparse.SparseFormatWarning(SparseWarning)
scipy.sparse.SparseWarning(Warning)
scipy.sparse.base.SparseEfficiencyWarning(SparseWarning)
scipy.sparse.base.SparseFormatWarning(SparseWarning)
scipy.sparse.base.SparseWarning(Warning)
scipy.sparse.base.isspmatrix(x)
scipy.sparse.base.spmatrix(self,maxprint=MAXPRINT)
scipy.sparse.base.spmatrix.__abs__(self)
scipy.sparse.base.spmatrix.__add__(self,other)
scipy.sparse.base.spmatrix.__div__(self,other)
scipy.sparse.base.spmatrix.__getattr__(self,attr)
scipy.sparse.base.spmatrix.__iadd__(self,other)
scipy.sparse.base.spmatrix.__idiv__(self,other)
scipy.sparse.base.spmatrix.__imul__(self,other)
scipy.sparse.base.spmatrix.__init__(self,maxprint=MAXPRINT)
scipy.sparse.base.spmatrix.__isub__(self,other)
scipy.sparse.base.spmatrix.__iter__(self)
scipy.sparse.base.spmatrix.__itruediv__(self,other)
scipy.sparse.base.spmatrix.__len__(self)
scipy.sparse.base.spmatrix.__mul__(self,other)
scipy.sparse.base.spmatrix.__neg__(self)
scipy.sparse.base.spmatrix.__pow__(self,other)
scipy.sparse.base.spmatrix.__radd__(self,other)
scipy.sparse.base.spmatrix.__repr__(self)
scipy.sparse.base.spmatrix.__rmul__(self,other)
scipy.sparse.base.spmatrix.__rsub__(self,other)
scipy.sparse.base.spmatrix.__str__(self)
scipy.sparse.base.spmatrix.__sub__(self,other)
scipy.sparse.base.spmatrix.__truediv__(self,other)
scipy.sparse.base.spmatrix._imag(self)
scipy.sparse.base.spmatrix._mul_multivector(self,other)
scipy.sparse.base.spmatrix._mul_scalar(self,other)
scipy.sparse.base.spmatrix._mul_sparse_matrix(self,other)
scipy.sparse.base.spmatrix._mul_vector(self,other)
scipy.sparse.base.spmatrix._process_toarray_args(self,order,out)
scipy.sparse.base.spmatrix._real(self)
scipy.sparse.base.spmatrix.asformat(self,format)
scipy.sparse.base.spmatrix.asfptype(self)
scipy.sparse.base.spmatrix.astype(self,t)
scipy.sparse.base.spmatrix.conj(self)
scipy.sparse.base.spmatrix.conjugate(self)
scipy.sparse.base.spmatrix.copy(self)
scipy.sparse.base.spmatrix.diagonal(self)
scipy.sparse.base.spmatrix.dot(self,other)
scipy.sparse.base.spmatrix.getH(self)
scipy.sparse.base.spmatrix.get_shape(self)
scipy.sparse.base.spmatrix.getcol(self,j)
scipy.sparse.base.spmatrix.getformat(self)
scipy.sparse.base.spmatrix.getmaxprint(self)
scipy.sparse.base.spmatrix.getnnz(self)
scipy.sparse.base.spmatrix.getrow(self,i)
scipy.sparse.base.spmatrix.mean(self,axis=None)
scipy.sparse.base.spmatrix.multiply(self,other)
scipy.sparse.base.spmatrix.nonzero(self)
scipy.sparse.base.spmatrix.reshape(self,shape)
scipy.sparse.base.spmatrix.set_shape(self,shape)
scipy.sparse.base.spmatrix.setdiag(self,values,k=0)
scipy.sparse.base.spmatrix.sum(self,axis=None)
scipy.sparse.base.spmatrix.toarray(self,order=None,out=None)
scipy.sparse.base.spmatrix.tobsr(self,blocksize=None)
scipy.sparse.base.spmatrix.tocoo(self)
scipy.sparse.base.spmatrix.todense(self,order=None,out=None)
scipy.sparse.base.spmatrix.todia(self)
scipy.sparse.base.spmatrix.todok(self)
scipy.sparse.base.spmatrix.tolil(self)
scipy.sparse.base.spmatrix.transpose(self)
scipy.sparse.isspmatrix(x)
scipy.sparse.spmatrix(self,maxprint=MAXPRINT)
scipy.sparse.spmatrix.__abs__(self)
scipy.sparse.spmatrix.__add__(self,other)
scipy.sparse.spmatrix.__div__(self,other)
scipy.sparse.spmatrix.__getattr__(self,attr)
scipy.sparse.spmatrix.__iadd__(self,other)
scipy.sparse.spmatrix.__idiv__(self,other)
scipy.sparse.spmatrix.__imul__(self,other)
scipy.sparse.spmatrix.__isub__(self,other)
scipy.sparse.spmatrix.__iter__(self)
scipy.sparse.spmatrix.__itruediv__(self,other)
scipy.sparse.spmatrix.__len__(self)
scipy.sparse.spmatrix.__mul__(self,other)
scipy.sparse.spmatrix.__neg__(self)
scipy.sparse.spmatrix.__pow__(self,other)
scipy.sparse.spmatrix.__radd__(self,other)
scipy.sparse.spmatrix.__repr__(self)
scipy.sparse.spmatrix.__rmul__(self,other)
scipy.sparse.spmatrix.__rsub__(self,other)
scipy.sparse.spmatrix.__str__(self)
scipy.sparse.spmatrix.__sub__(self,other)
scipy.sparse.spmatrix.__truediv__(self,other)
scipy.sparse.spmatrix._imag(self)
scipy.sparse.spmatrix._mul_multivector(self,other)
scipy.sparse.spmatrix._mul_scalar(self,other)
scipy.sparse.spmatrix._mul_sparse_matrix(self,other)
scipy.sparse.spmatrix._mul_vector(self,other)
scipy.sparse.spmatrix._process_toarray_args(self,order,out)
scipy.sparse.spmatrix._real(self)
scipy.sparse.spmatrix.asformat(self,format)
scipy.sparse.spmatrix.asfptype(self)
scipy.sparse.spmatrix.astype(self,t)
scipy.sparse.spmatrix.conj(self)
scipy.sparse.spmatrix.conjugate(self)
scipy.sparse.spmatrix.copy(self)
scipy.sparse.spmatrix.diagonal(self)
scipy.sparse.spmatrix.dot(self,other)
scipy.sparse.spmatrix.getH(self)
scipy.sparse.spmatrix.get_shape(self)
scipy.sparse.spmatrix.getcol(self,j)
scipy.sparse.spmatrix.getformat(self)
scipy.sparse.spmatrix.getmaxprint(self)
scipy.sparse.spmatrix.getnnz(self)
scipy.sparse.spmatrix.getrow(self,i)
scipy.sparse.spmatrix.mean(self,axis=None)
scipy.sparse.spmatrix.multiply(self,other)
scipy.sparse.spmatrix.nonzero(self)
scipy.sparse.spmatrix.reshape(self,shape)
scipy.sparse.spmatrix.set_shape(self,shape)
scipy.sparse.spmatrix.setdiag(self,values,k=0)
scipy.sparse.spmatrix.sum(self,axis=None)
scipy.sparse.spmatrix.toarray(self,order=None,out=None)
scipy.sparse.spmatrix.tobsr(self,blocksize=None)
scipy.sparse.spmatrix.tocoo(self)
scipy.sparse.spmatrix.todense(self,order=None,out=None)
scipy.sparse.spmatrix.todia(self)
scipy.sparse.spmatrix.todok(self)
scipy.sparse.spmatrix.tolil(self)
scipy.sparse.spmatrix.transpose(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/lil.py----------------------------------------
A:scipy.sparse.lil.self.dtype->getdtype(dtype, arg1, default=float)
A:scipy.sparse.lil.A->csr_matrix(A, dtype=dtype).tolil()
A:scipy.sparse.lil.self.rows->numpy.empty((M,), dtype=object)
A:scipy.sparse.lil.self.data->numpy.empty((M,), dtype=object)
A:scipy.sparse.lil.nnz->property(fget=getnnz)
A:scipy.sparse.lil.new->lil_matrix(shape, dtype=self.dtype)
A:scipy.sparse.lil.pos->bisect_left(xrow, xi)
A:scipy.sparse.lil.j->self._slicetoseq(j, self.shape[1])
A:scipy.sparse.lil.i->list(i)
A:scipy.sparse.lil.x->lil_matrix(x, copy=False)
A:scipy.sparse.lil.new.data->deepcopy(self.data)
A:scipy.sparse.lil.new.rows->deepcopy(self.rows)
A:scipy.sparse.lil.(new_r, new_c)->numpy.unravel_index(i * j_max + j, shape)
A:scipy.sparse.lil.d->self._process_toarray_args(order, out)
A:scipy.sparse.lil.indptr->numpy.concatenate((np.array([0], dtype=np.intc), np.cumsum(indptr)))
A:scipy.sparse.lil.indices->numpy.asarray(indices, dtype=np.intc)
A:scipy.sparse.lil.data->numpy.asarray(data, dtype=self.dtype)
scipy.sparse.isspmatrix_lil(x)
scipy.sparse.lil.isspmatrix_lil(x)
scipy.sparse.lil.lil_matrix(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse.lil.lil_matrix.__getitem__(self,index)
scipy.sparse.lil.lil_matrix.__iadd__(self,other)
scipy.sparse.lil.lil_matrix.__imul__(self,other)
scipy.sparse.lil.lil_matrix.__init__(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse.lil.lil_matrix.__isub__(self,other)
scipy.sparse.lil.lil_matrix.__itruediv__(self,other)
scipy.sparse.lil.lil_matrix.__setitem__(self,index,x)
scipy.sparse.lil.lil_matrix.__str__(self)
scipy.sparse.lil.lil_matrix.__truediv__(self,other)
scipy.sparse.lil.lil_matrix._get1(self,i,j)
scipy.sparse.lil.lil_matrix._insertat2(self,row,data,j,x)
scipy.sparse.lil.lil_matrix._mul_scalar(self,other)
scipy.sparse.lil.lil_matrix._setitem_setrow(self,row,data,j,xrow,xdata,xcols)
scipy.sparse.lil.lil_matrix._slicetoseq(self,j,shape)
scipy.sparse.lil.lil_matrix.copy(self)
scipy.sparse.lil.lil_matrix.getnnz(self)
scipy.sparse.lil.lil_matrix.getrow(self,i)
scipy.sparse.lil.lil_matrix.getrowview(self,i)
scipy.sparse.lil.lil_matrix.reshape(self,shape)
scipy.sparse.lil.lil_matrix.toarray(self,order=None,out=None)
scipy.sparse.lil.lil_matrix.tocsc(self)
scipy.sparse.lil.lil_matrix.tocsr(self)
scipy.sparse.lil.lil_matrix.tolil(self,copy=False)
scipy.sparse.lil.lil_matrix.transpose(self)
scipy.sparse.lil_matrix(self,arg1,shape=None,dtype=None,copy=False)
scipy.sparse.lil_matrix.__getitem__(self,index)
scipy.sparse.lil_matrix.__iadd__(self,other)
scipy.sparse.lil_matrix.__imul__(self,other)
scipy.sparse.lil_matrix.__isub__(self,other)
scipy.sparse.lil_matrix.__itruediv__(self,other)
scipy.sparse.lil_matrix.__setitem__(self,index,x)
scipy.sparse.lil_matrix.__str__(self)
scipy.sparse.lil_matrix.__truediv__(self,other)
scipy.sparse.lil_matrix._get1(self,i,j)
scipy.sparse.lil_matrix._insertat2(self,row,data,j,x)
scipy.sparse.lil_matrix._mul_scalar(self,other)
scipy.sparse.lil_matrix._setitem_setrow(self,row,data,j,xrow,xdata,xcols)
scipy.sparse.lil_matrix._slicetoseq(self,j,shape)
scipy.sparse.lil_matrix.copy(self)
scipy.sparse.lil_matrix.getnnz(self)
scipy.sparse.lil_matrix.getrow(self,i)
scipy.sparse.lil_matrix.getrowview(self,i)
scipy.sparse.lil_matrix.reshape(self,shape)
scipy.sparse.lil_matrix.toarray(self,order=None,out=None)
scipy.sparse.lil_matrix.tocsc(self)
scipy.sparse.lil_matrix.tocsr(self)
scipy.sparse.lil_matrix.tolil(self,copy=False)
scipy.sparse.lil_matrix.transpose(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/tests/test_base.py----------------------------------------
A:scipy.sparse.tests.test_base.self.dat->matrix([[1, 0, 0, 2], [3, 0, 1, 0], [0, 2, 0, 0]], 'd')
A:scipy.sparse.tests.test_base.self.datsp->self.spmatrix(self.dat)
A:scipy.sparse.tests.test_base.a->lil_matrix(np.ones((3, 3)))
A:scipy.sparse.tests.test_base.A->bsr_matrix(arange(2 * 3 * 4 * 5).reshape(2 * 4, 3 * 5), blocksize=(4, 5))
A:scipy.sparse.tests.test_base.D->matrix([[1, 0, 3, 0], [1, 2, 0, 4], [0, 2, 3, 0], [0, 0, 3, 4]])
A:scipy.sparse.tests.test_base.Asp->bsr_matrix((data, indices, indptr))
A:scipy.sparse.tests.test_base.A_nz->set([tuple(ij) for ij in transpose(A.nonzero())])
A:scipy.sparse.tests.test_base.Asp_nz->set([tuple(ij) for ij in transpose(Asp.nonzero())])
A:scipy.sparse.tests.test_base.M->arange(25).reshape(5, 5)
A:scipy.sparse.tests.test_base.sM->self.spmatrix(M, shape=(3, 3), dtype=float)
A:scipy.sparse.tests.test_base.Mexp->scipy.linalg.expm(M)
A:scipy.sparse.tests.test_base.sMexp->expm(sM).todense()
A:scipy.sparse.tests.test_base.N->array([[3.0, 0.0, 1.0], [0.0, 2.0, 0.0], [0.0, 0.0, 0.0]])
A:scipy.sparse.tests.test_base.sN->self.spmatrix(N, shape=(3, 3), dtype=float)
A:scipy.sparse.tests.test_base.Nexp->scipy.linalg.expm(N)
A:scipy.sparse.tests.test_base.sNexp->expm(sN).todense()
A:scipy.sparse.tests.test_base.sMinv->inv(sM)
A:scipy.sparse.tests.test_base.S->self.spmatrix(D)
A:scipy.sparse.tests.test_base.chk->self.datsp.toarray(order='F')
A:scipy.sparse.tests.test_base.out->numpy.zeros(self.datsp.shape, dtype=self.datsp.dtype)
A:scipy.sparse.tests.test_base.dat->asarray(self.dat)
A:scipy.sparse.tests.test_base.dense_dot_dense->dot(dat, b)
A:scipy.sparse.tests.test_base.check->dot(a, self.datsp.toarray())
A:scipy.sparse.tests.test_base.b->matrix([[0, 1], [1, 0], [0, 2]], 'd')
A:scipy.sparse.tests.test_base.check2->dot(self.datsp.toarray(), b)
A:scipy.sparse.tests.test_base.B->lil_matrix((10, 10))
A:scipy.sparse.tests.test_base.C->lil_matrix((10, 10)).tocsr()
A:scipy.sparse.tests.test_base.sumS->sum([k * self.datsp for k in range(1, 3)])
A:scipy.sparse.tests.test_base.sumD->sum([k * self.dat for k in range(1, 3)])
A:scipy.sparse.tests.test_base.Bsp->self.spmatrix(B)
A:scipy.sparse.tests.test_base.Csp->self.spmatrix(C)
A:scipy.sparse.tests.test_base.Dsp->self.spmatrix(D)
A:scipy.sparse.tests.test_base.denom->self.spmatrix(matrix([[1, 0, 0, 4], [-1, 0, 0, 0], [0, 8, 0, -5]], 'd'))
A:scipy.sparse.tests.test_base.res->matrix([[1, 0, 0, 0.5], [-3, 0, inf, 0], [0, 0.25, 0, 0]], 'd')
A:scipy.sparse.tests.test_base.row->array([0, 1, 2, 2, 2, 2, 0, 0, 2, 2])
A:scipy.sparse.tests.test_base.a2->array([[3, 0, 0], [0, 1, 0], [2, 0, 3.0], [2, 3, 0]])
A:scipy.sparse.tests.test_base.asp->bsr_matrix((data, indices, indptr), shape=(4, 20))
A:scipy.sparse.tests.test_base.bsp->bsr_matrix((data, indices, indptr), shape=(4, 20)).copy()
A:scipy.sparse.tests.test_base.csp->bsr_matrix((data, indices, indptr), shape=(4, 20)).copy().tocoo()
A:scipy.sparse.tests.test_base.r->random.random()
A:scipy.sparse.tests.test_base.c->csr_matrix(b)
A:scipy.sparse.tests.test_base.x->arange(A.shape[1] * 6).reshape(-1, 6)
A:scipy.sparse.tests.test_base.y->array([[0, 1, 2], [3, 0, 5]])
A:scipy.sparse.tests.test_base.fn->getattr(Asp, 'to' + format)
A:scipy.sparse.tests.test_base.toself->getattr(A, 'to' + A.format)
A:scipy.sparse.tests.test_base.A[i + 1, i]->conjugate(y[i])
A:scipy.sparse.tests.test_base.E->matrix([[1, 0, 1], [4, 0, 0], [0, 0, 0], [0, 0, 1]])
A:scipy.sparse.tests.test_base.F->self.spmatrix(E)
A:scipy.sparse.tests.test_base.s->slice(int8(2), int8(4), None)
A:scipy.sparse.tests.test_base.I->numpy.random.random_integers(-M + 1, M - 1, size=NUM_SAMPLES)
A:scipy.sparse.tests.test_base.J->numpy.random.random_integers(-N + 1, N - 1, size=NUM_SAMPLES)
A:scipy.sparse.tests.test_base.self.A->matrix([[-1.5, 6.5, 0, 2.25, 0, 0], [3.125, -7.875, 0.625, 0, 0, 0], [0, 0, -0.125, 1.0, 0, 0], [0, 0, 8.375, 0, 0, 0]], 'float64')
A:scipy.sparse.tests.test_base.self.B->matrix([[0.375, 0, 0, 0, -5, 2.5], [14.25, -3.75, 0, 0, -0.125, 0], [0, 7.25, 0, 0, 0, 0], [18.5, -0.0625, 0, 0, 0, 0]], 'complex128')
A:scipy.sparse.tests.test_base.self.B.imag->matrix([[1.25, 0, 0, 0, 6, -3.875], [2.25, 4.125, 0, 0, 0, 2.75], [0, 4.125, 0, 0, 0, 0], [-0.0625, 0, 0, 0, 0, 0]], 'float64')
A:scipy.sparse.tests.test_base.self.Asp->self.spmatrix(self.A)
A:scipy.sparse.tests.test_base.self.Bsp->self.spmatrix(self.B)
A:scipy.sparse.tests.test_base.col->array([0, 2, 0, 2, 1, 1, 1, 0, 0, 2])
A:scipy.sparse.tests.test_base.data->data.reshape(-1, 2, 2).reshape(-1, 2, 2)
A:scipy.sparse.tests.test_base.ij->vstack((row, col))
A:scipy.sparse.tests.test_base.csr->matrix([[0, 1], [1, 0], [0, 2]], 'd').tocsr()
A:scipy.sparse.tests.test_base.indptr->array([0, 3, 8])
A:scipy.sparse.tests.test_base.indices->array([1, 2, 3, 4, 5, 6, 7, 8])
A:scipy.sparse.tests.test_base.X->csc_matrix(np.arange(21).reshape(7, 3) / 21.0)
A:scipy.sparse.tests.test_base.X2->getattr(X, f)()
A:scipy.sparse.tests.test_base.csc->lil_matrix(np.ones((3, 3))).tocsc()
A:scipy.sparse.tests.test_base.A[1:5, 0]->range(1, 5)
A:scipy.sparse.tests.test_base.B[1:5, 0]->range(1, 5)
A:scipy.sparse.tests.test_base.A[0, 1:10:2]->xrange(1, 10, 2)
A:scipy.sparse.tests.test_base.B[0, 1:10:2]->xrange(1, 10, 2)
A:scipy.sparse.tests.test_base.A[0, 0]->arange(100)
A:scipy.sparse.tests.test_base.A[0, :]->list(range(100))
A:scipy.sparse.tests.test_base.A[:, 1]->bsr_matrix(arange(2 * 3 * 4 * 5).reshape(2 * 4, 3 * 5), blocksize=(4, 5)).copy()
A:scipy.sparse.tests.test_base.expected1->array([[1, 0], [1, 0]])
A:scipy.sparse.tests.test_base.expected2->array([[1, 0], [1, 0], [0, 0]])
A:scipy.sparse.tests.test_base.result->bsr_matrix(arange(2 * 3 * 4 * 5).reshape(2 * 4, 3 * 5), blocksize=(4, 5)).copy()
A:scipy.sparse.tests.test_base.expected->array([[10, 0, 0], [0, 0, 6], [0, 14, 0], [0, 0, 0]])
A:scipy.sparse.tests.test_base.B[:2, :2]->csc_matrix(array(block))
A:scipy.sparse.tests.test_base.i2->array(i0)
A:scipy.sparse.tests.test_base.l->lil_matrix((4, 3))
A:scipy.sparse.tests.test_base.m->lil_matrix((4, 3))
A:scipy.sparse.tests.test_base.coo->coo_matrix(mat)
A:scipy.sparse.tests.test_base.mat->array([0, 1, 0, 0])
A:scipy.sparse.tests.test_base.offsets->numpy.array([0, -1, 2])
A:scipy.sparse.tests.test_base.data[0]->array([[0, 1, 2], [3, 0, 5]])
A:scipy.sparse.tests.test_base.data[1]->array([[0, 2, 4], [6, 0, 10]])
A:scipy.sparse.tests.test_base.data[2]->array([[0, 4, 8], [12, 0, 20]])
A:scipy.sparse.tests.test_base.data[3]->array([[0, 5, 10], [15, 0, 25]])
scipy.sparse.tests.test_TestBSR(_TestCommon,_TestArithmetic,_TestInplaceArithmetic,TestCase)
scipy.sparse.tests.test_TestBSR.test_bsr_matvec(self)
scipy.sparse.tests.test_TestBSR.test_bsr_matvecs(self)
scipy.sparse.tests.test_TestBSR.test_constructor1(self)
scipy.sparse.tests.test_TestBSR.test_constructor2(self)
scipy.sparse.tests.test_TestBSR.test_eliminate_zeros(self)
scipy.sparse.tests.test_TestCOO(_TestCommon,TestCase)
scipy.sparse.tests.test_TestCOO.test_constructor1(self)
scipy.sparse.tests.test_TestCOO.test_constructor2(self)
scipy.sparse.tests.test_TestCOO.test_constructor3(self)
scipy.sparse.tests.test_TestCOO.test_constructor4(self)
scipy.sparse.tests.test_TestCSC(_TestCommon,_TestGetSet,_TestSolve,_TestInplaceArithmetic,_TestArithmetic,_TestHorizSlicing,_TestVertSlicing,_TestBothSlicing,_TestFancyIndexing,_Test2DSlicingRegression,TestCase)
scipy.sparse.tests.test_TestCSC.test_constructor1(self)
scipy.sparse.tests.test_TestCSC.test_constructor2(self)
scipy.sparse.tests.test_TestCSC.test_constructor3(self)
scipy.sparse.tests.test_TestCSC.test_constructor4(self)
scipy.sparse.tests.test_TestCSC.test_constructor5(self)
scipy.sparse.tests.test_TestCSC.test_eliminate_zeros(self)
scipy.sparse.tests.test_TestCSC.test_fancy_indexing_set(self)
scipy.sparse.tests.test_TestCSC.test_sort_indices(self)
scipy.sparse.tests.test_TestCSC.test_ufuncs(self)
scipy.sparse.tests.test_TestCSC.test_unsorted_arithmetic(self)
scipy.sparse.tests.test_TestCSR(_TestCommon,_TestGetSet,_TestSolve,_TestInplaceArithmetic,_TestArithmetic,_TestHorizSlicing,_TestVertSlicing,_TestBothSlicing,_TestFancyIndexing,_Test2DSlicingRegression,TestCase)
scipy.sparse.tests.test_TestCSR.test_constructor1(self)
scipy.sparse.tests.test_TestCSR.test_constructor2(self)
scipy.sparse.tests.test_TestCSR.test_constructor3(self)
scipy.sparse.tests.test_TestCSR.test_constructor4(self)
scipy.sparse.tests.test_TestCSR.test_constructor5(self)
scipy.sparse.tests.test_TestCSR.test_eliminate_zeros(self)
scipy.sparse.tests.test_TestCSR.test_fancy_indexing_set(self)
scipy.sparse.tests.test_TestCSR.test_sort_indices(self)
scipy.sparse.tests.test_TestCSR.test_ufuncs(self)
scipy.sparse.tests.test_TestCSR.test_unsorted_arithmetic(self)
scipy.sparse.tests.test_TestDIA(_TestCommon,_TestArithmetic,TestCase)
scipy.sparse.tests.test_TestDIA.test_constructor1(self)
scipy.sparse.tests.test_TestDOK(_TestCommon,_TestGetSet,_TestSolve,TestCase)
scipy.sparse.tests.test_TestDOK.test_add(self)
scipy.sparse.tests.test_TestDOK.test_add_dense(self)
scipy.sparse.tests.test_TestDOK.test_convert(self)
scipy.sparse.tests.test_TestDOK.test_ctor(self)
scipy.sparse.tests.test_TestDOK.test_matmat_sparse(self)
scipy.sparse.tests.test_TestDOK.test_mult(self)
scipy.sparse.tests.test_TestDOK.test_radd(self)
scipy.sparse.tests.test_TestDOK.test_resize(self)
scipy.sparse.tests.test_TestDOK.test_rsub(self)
scipy.sparse.tests.test_TestDOK.test_set_slice(self)
scipy.sparse.tests.test_TestDOK.test_sub_dense(self)
scipy.sparse.tests.test_TestDOK.test_ticket1160(self)
scipy.sparse.tests.test_TestLIL(_TestCommon,_TestHorizSlicing,_TestVertSlicing,_TestBothSlicing,_TestGetSet,_TestSolve,_TestArithmetic,_TestInplaceArithmetic,_TestFancyIndexing,TestCase)
scipy.sparse.tests.test_TestLIL.test_dot(self)
scipy.sparse.tests.test_TestLIL.test_fancy_indexing(self)
scipy.sparse.tests.test_TestLIL.test_fancy_indexing_randomized(self)
scipy.sparse.tests.test_TestLIL.test_fancy_indexing_set(self)
scipy.sparse.tests.test_TestLIL.test_inplace_ops(self)
scipy.sparse.tests.test_TestLIL.test_lil_from_csr(self)
scipy.sparse.tests.test_TestLIL.test_lil_iteration(self)
scipy.sparse.tests.test_TestLIL.test_lil_lil_assignment(self)
scipy.sparse.tests.test_TestLIL.test_lil_multiply_removal(self)
scipy.sparse.tests.test_TestLIL.test_lil_sequence_assignment(self)
scipy.sparse.tests.test_TestLIL.test_lil_slice_assignment(self)
scipy.sparse.tests.test_TestLIL.test_point_wise_multiply(self)
scipy.sparse.tests.test_TestLIL.test_reshape(self)
scipy.sparse.tests.test_TestLIL.test_scalar_mul(self)
scipy.sparse.tests.test__Test2DSlicingRegression
scipy.sparse.tests.test__Test2DSlicingRegression.test_non_unit_stride_2d_indexing_raises_exception(self)
scipy.sparse.tests.test__TestArithmetic
scipy.sparse.tests.test__TestArithmetic.arith_init(self)
scipy.sparse.tests.test__TestArithmetic.test_add_sub(self)
scipy.sparse.tests.test__TestArithmetic.test_mu(self)
scipy.sparse.tests.test__TestBothSlicing
scipy.sparse.tests.test__TestBothSlicing.test_get_slices(self)
scipy.sparse.tests.test__TestCommon
scipy.sparse.tests.test__TestCommon.setUp(self)
scipy.sparse.tests.test__TestCommon.test_abs(self)
scipy.sparse.tests.test__TestCommon.test_add(self)
scipy.sparse.tests.test__TestCommon.test_add0(self)
scipy.sparse.tests.test__TestCommon.test_add_dense(self)
scipy.sparse.tests.test__TestCommon.test_asfptype(self)
scipy.sparse.tests.test__TestCommon.test_astype(self)
scipy.sparse.tests.test__TestCommon.test_copy(self)
scipy.sparse.tests.test__TestCommon.test_diagonal(self)
scipy.sparse.tests.test__TestCommon.test_elementwise_divide(self)
scipy.sparse.tests.test__TestCommon.test_elementwise_multiply(self)
scipy.sparse.tests.test__TestCommon.test_empty(self)
scipy.sparse.tests.test__TestCommon.test_empty_arithmetic(self)
scipy.sparse.tests.test__TestCommon.test_expm(self)
scipy.sparse.tests.test__TestCommon.test_from_array(self)
scipy.sparse.tests.test__TestCommon.test_from_list(self)
scipy.sparse.tests.test__TestCommon.test_from_matrix(self)
scipy.sparse.tests.test__TestCommon.test_from_sparse(self)
scipy.sparse.tests.test__TestCommon.test_getcol(self)
scipy.sparse.tests.test__TestCommon.test_getrow(self)
scipy.sparse.tests.test__TestCommon.test_imag(self)
scipy.sparse.tests.test__TestCommon.test_inv(self)
scipy.sparse.tests.test__TestCommon.test_invalid_shapes(self)
scipy.sparse.tests.test__TestCommon.test_matmat_dense(self)
scipy.sparse.tests.test__TestCommon.test_matmat_sparse(self)
scipy.sparse.tests.test__TestCommon.test_matvec(self)
scipy.sparse.tests.test__TestCommon.test_mean(self)
scipy.sparse.tests.test__TestCommon.test_mul_scalar(self)
scipy.sparse.tests.test__TestCommon.test_neg(self)
scipy.sparse.tests.test__TestCommon.test_nonzero(self)
scipy.sparse.tests.test__TestCommon.test_pow(self)
scipy.sparse.tests.test__TestCommon.test_radd(self)
scipy.sparse.tests.test__TestCommon.test_real(self)
scipy.sparse.tests.test__TestCommon.test_repr(self)
scipy.sparse.tests.test__TestCommon.test_rmatvec(self)
scipy.sparse.tests.test__TestCommon.test_rmul_scalar(self)
scipy.sparse.tests.test__TestCommon.test_rsub(self)
scipy.sparse.tests.test__TestCommon.test_small_multiplication(self)
scipy.sparse.tests.test__TestCommon.test_sparse_format_conversions(self)
scipy.sparse.tests.test__TestCommon.test_str(self)
scipy.sparse.tests.test__TestCommon.test_sub(self)
scipy.sparse.tests.test__TestCommon.test_sub_dense(self)
scipy.sparse.tests.test__TestCommon.test_sum(self)
scipy.sparse.tests.test__TestCommon.test_toarray(self)
scipy.sparse.tests.test__TestCommon.test_tobsr(self)
scipy.sparse.tests.test__TestCommon.test_todense(self)
scipy.sparse.tests.test__TestCommon.test_transpose(self)
scipy.sparse.tests.test__TestFancyIndexing
scipy.sparse.tests.test__TestFancyIndexing.test_fancy_indexing(self)
scipy.sparse.tests.test__TestFancyIndexing.test_fancy_indexing_randomized(self)
scipy.sparse.tests.test__TestFancyIndexing.test_fancy_indexing_set(self)
scipy.sparse.tests.test__TestGetSet
scipy.sparse.tests.test__TestGetSet.test_getelement(self)
scipy.sparse.tests.test__TestGetSet.test_setelement(self)
scipy.sparse.tests.test__TestHorizSlicing
scipy.sparse.tests.test__TestHorizSlicing.test_get_horiz_slice(self)
scipy.sparse.tests.test__TestInplaceArithmetic
scipy.sparse.tests.test__TestInplaceArithmetic.test_idiv_scalar(self)
scipy.sparse.tests.test__TestInplaceArithmetic.test_imul_scalar(self)
scipy.sparse.tests.test__TestSolve
scipy.sparse.tests.test__TestSolve.test_solve(self)
scipy.sparse.tests.test__TestVertSlicing
scipy.sparse.tests.test__TestVertSlicing.test_get_vert_slice(self)
scipy.sparse.tests.test_base.TestBSR(_TestCommon,_TestArithmetic,_TestInplaceArithmetic,TestCase)
scipy.sparse.tests.test_base.TestBSR.test_bsr_matvec(self)
scipy.sparse.tests.test_base.TestBSR.test_bsr_matvecs(self)
scipy.sparse.tests.test_base.TestBSR.test_constructor1(self)
scipy.sparse.tests.test_base.TestBSR.test_constructor2(self)
scipy.sparse.tests.test_base.TestBSR.test_eliminate_zeros(self)
scipy.sparse.tests.test_base.TestCOO(_TestCommon,TestCase)
scipy.sparse.tests.test_base.TestCOO.test_constructor1(self)
scipy.sparse.tests.test_base.TestCOO.test_constructor2(self)
scipy.sparse.tests.test_base.TestCOO.test_constructor3(self)
scipy.sparse.tests.test_base.TestCOO.test_constructor4(self)
scipy.sparse.tests.test_base.TestCSC(_TestCommon,_TestGetSet,_TestSolve,_TestInplaceArithmetic,_TestArithmetic,_TestHorizSlicing,_TestVertSlicing,_TestBothSlicing,_TestFancyIndexing,_Test2DSlicingRegression,TestCase)
scipy.sparse.tests.test_base.TestCSC.test_constructor1(self)
scipy.sparse.tests.test_base.TestCSC.test_constructor2(self)
scipy.sparse.tests.test_base.TestCSC.test_constructor3(self)
scipy.sparse.tests.test_base.TestCSC.test_constructor4(self)
scipy.sparse.tests.test_base.TestCSC.test_constructor5(self)
scipy.sparse.tests.test_base.TestCSC.test_eliminate_zeros(self)
scipy.sparse.tests.test_base.TestCSC.test_fancy_indexing_set(self)
scipy.sparse.tests.test_base.TestCSC.test_sort_indices(self)
scipy.sparse.tests.test_base.TestCSC.test_ufuncs(self)
scipy.sparse.tests.test_base.TestCSC.test_unsorted_arithmetic(self)
scipy.sparse.tests.test_base.TestCSR(_TestCommon,_TestGetSet,_TestSolve,_TestInplaceArithmetic,_TestArithmetic,_TestHorizSlicing,_TestVertSlicing,_TestBothSlicing,_TestFancyIndexing,_Test2DSlicingRegression,TestCase)
scipy.sparse.tests.test_base.TestCSR.test_constructor1(self)
scipy.sparse.tests.test_base.TestCSR.test_constructor2(self)
scipy.sparse.tests.test_base.TestCSR.test_constructor3(self)
scipy.sparse.tests.test_base.TestCSR.test_constructor4(self)
scipy.sparse.tests.test_base.TestCSR.test_constructor5(self)
scipy.sparse.tests.test_base.TestCSR.test_eliminate_zeros(self)
scipy.sparse.tests.test_base.TestCSR.test_fancy_indexing_set(self)
scipy.sparse.tests.test_base.TestCSR.test_sort_indices(self)
scipy.sparse.tests.test_base.TestCSR.test_ufuncs(self)
scipy.sparse.tests.test_base.TestCSR.test_unsorted_arithmetic(self)
scipy.sparse.tests.test_base.TestDIA(_TestCommon,_TestArithmetic,TestCase)
scipy.sparse.tests.test_base.TestDIA.test_constructor1(self)
scipy.sparse.tests.test_base.TestDOK(_TestCommon,_TestGetSet,_TestSolve,TestCase)
scipy.sparse.tests.test_base.TestDOK.test_add(self)
scipy.sparse.tests.test_base.TestDOK.test_add_dense(self)
scipy.sparse.tests.test_base.TestDOK.test_convert(self)
scipy.sparse.tests.test_base.TestDOK.test_ctor(self)
scipy.sparse.tests.test_base.TestDOK.test_matmat_sparse(self)
scipy.sparse.tests.test_base.TestDOK.test_mult(self)
scipy.sparse.tests.test_base.TestDOK.test_radd(self)
scipy.sparse.tests.test_base.TestDOK.test_resize(self)
scipy.sparse.tests.test_base.TestDOK.test_rsub(self)
scipy.sparse.tests.test_base.TestDOK.test_set_slice(self)
scipy.sparse.tests.test_base.TestDOK.test_sub_dense(self)
scipy.sparse.tests.test_base.TestDOK.test_ticket1160(self)
scipy.sparse.tests.test_base.TestLIL(_TestCommon,_TestHorizSlicing,_TestVertSlicing,_TestBothSlicing,_TestGetSet,_TestSolve,_TestArithmetic,_TestInplaceArithmetic,_TestFancyIndexing,TestCase)
scipy.sparse.tests.test_base.TestLIL.test_dot(self)
scipy.sparse.tests.test_base.TestLIL.test_fancy_indexing(self)
scipy.sparse.tests.test_base.TestLIL.test_fancy_indexing_randomized(self)
scipy.sparse.tests.test_base.TestLIL.test_fancy_indexing_set(self)
scipy.sparse.tests.test_base.TestLIL.test_inplace_ops(self)
scipy.sparse.tests.test_base.TestLIL.test_lil_from_csr(self)
scipy.sparse.tests.test_base.TestLIL.test_lil_iteration(self)
scipy.sparse.tests.test_base.TestLIL.test_lil_lil_assignment(self)
scipy.sparse.tests.test_base.TestLIL.test_lil_multiply_removal(self)
scipy.sparse.tests.test_base.TestLIL.test_lil_sequence_assignment(self)
scipy.sparse.tests.test_base.TestLIL.test_lil_slice_assignment(self)
scipy.sparse.tests.test_base.TestLIL.test_point_wise_multiply(self)
scipy.sparse.tests.test_base.TestLIL.test_reshape(self)
scipy.sparse.tests.test_base.TestLIL.test_scalar_mul(self)
scipy.sparse.tests.test_base._Test2DSlicingRegression
scipy.sparse.tests.test_base._Test2DSlicingRegression.test_non_unit_stride_2d_indexing_raises_exception(self)
scipy.sparse.tests.test_base._TestArithmetic
scipy.sparse.tests.test_base._TestArithmetic.arith_init(self)
scipy.sparse.tests.test_base._TestArithmetic.test_add_sub(self)
scipy.sparse.tests.test_base._TestArithmetic.test_mu(self)
scipy.sparse.tests.test_base._TestBothSlicing
scipy.sparse.tests.test_base._TestBothSlicing.test_get_slices(self)
scipy.sparse.tests.test_base._TestCommon
scipy.sparse.tests.test_base._TestCommon.setUp(self)
scipy.sparse.tests.test_base._TestCommon.test_abs(self)
scipy.sparse.tests.test_base._TestCommon.test_add(self)
scipy.sparse.tests.test_base._TestCommon.test_add0(self)
scipy.sparse.tests.test_base._TestCommon.test_add_dense(self)
scipy.sparse.tests.test_base._TestCommon.test_asfptype(self)
scipy.sparse.tests.test_base._TestCommon.test_astype(self)
scipy.sparse.tests.test_base._TestCommon.test_copy(self)
scipy.sparse.tests.test_base._TestCommon.test_diagonal(self)
scipy.sparse.tests.test_base._TestCommon.test_elementwise_divide(self)
scipy.sparse.tests.test_base._TestCommon.test_elementwise_multiply(self)
scipy.sparse.tests.test_base._TestCommon.test_empty(self)
scipy.sparse.tests.test_base._TestCommon.test_empty_arithmetic(self)
scipy.sparse.tests.test_base._TestCommon.test_expm(self)
scipy.sparse.tests.test_base._TestCommon.test_from_array(self)
scipy.sparse.tests.test_base._TestCommon.test_from_list(self)
scipy.sparse.tests.test_base._TestCommon.test_from_matrix(self)
scipy.sparse.tests.test_base._TestCommon.test_from_sparse(self)
scipy.sparse.tests.test_base._TestCommon.test_getcol(self)
scipy.sparse.tests.test_base._TestCommon.test_getrow(self)
scipy.sparse.tests.test_base._TestCommon.test_imag(self)
scipy.sparse.tests.test_base._TestCommon.test_inv(self)
scipy.sparse.tests.test_base._TestCommon.test_invalid_shapes(self)
scipy.sparse.tests.test_base._TestCommon.test_matmat_dense(self)
scipy.sparse.tests.test_base._TestCommon.test_matmat_sparse(self)
scipy.sparse.tests.test_base._TestCommon.test_matvec(self)
scipy.sparse.tests.test_base._TestCommon.test_mean(self)
scipy.sparse.tests.test_base._TestCommon.test_mul_scalar(self)
scipy.sparse.tests.test_base._TestCommon.test_neg(self)
scipy.sparse.tests.test_base._TestCommon.test_nonzero(self)
scipy.sparse.tests.test_base._TestCommon.test_pow(self)
scipy.sparse.tests.test_base._TestCommon.test_radd(self)
scipy.sparse.tests.test_base._TestCommon.test_real(self)
scipy.sparse.tests.test_base._TestCommon.test_repr(self)
scipy.sparse.tests.test_base._TestCommon.test_rmatvec(self)
scipy.sparse.tests.test_base._TestCommon.test_rmul_scalar(self)
scipy.sparse.tests.test_base._TestCommon.test_rsub(self)
scipy.sparse.tests.test_base._TestCommon.test_small_multiplication(self)
scipy.sparse.tests.test_base._TestCommon.test_sparse_format_conversions(self)
scipy.sparse.tests.test_base._TestCommon.test_str(self)
scipy.sparse.tests.test_base._TestCommon.test_sub(self)
scipy.sparse.tests.test_base._TestCommon.test_sub_dense(self)
scipy.sparse.tests.test_base._TestCommon.test_sum(self)
scipy.sparse.tests.test_base._TestCommon.test_toarray(self)
scipy.sparse.tests.test_base._TestCommon.test_tobsr(self)
scipy.sparse.tests.test_base._TestCommon.test_todense(self)
scipy.sparse.tests.test_base._TestCommon.test_transpose(self)
scipy.sparse.tests.test_base._TestFancyIndexing
scipy.sparse.tests.test_base._TestFancyIndexing.test_fancy_indexing(self)
scipy.sparse.tests.test_base._TestFancyIndexing.test_fancy_indexing_randomized(self)
scipy.sparse.tests.test_base._TestFancyIndexing.test_fancy_indexing_set(self)
scipy.sparse.tests.test_base._TestGetSet
scipy.sparse.tests.test_base._TestGetSet.test_getelement(self)
scipy.sparse.tests.test_base._TestGetSet.test_setelement(self)
scipy.sparse.tests.test_base._TestHorizSlicing
scipy.sparse.tests.test_base._TestHorizSlicing.test_get_horiz_slice(self)
scipy.sparse.tests.test_base._TestInplaceArithmetic
scipy.sparse.tests.test_base._TestInplaceArithmetic.test_idiv_scalar(self)
scipy.sparse.tests.test_base._TestInplaceArithmetic.test_imul_scalar(self)
scipy.sparse.tests.test_base._TestSolve
scipy.sparse.tests.test_base._TestSolve.test_solve(self)
scipy.sparse.tests.test_base._TestVertSlicing
scipy.sparse.tests.test_base._TestVertSlicing.test_get_vert_slice(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/tests/test_construct.py----------------------------------------
A:scipy.sparse.tests.test_construct.diags1->array([[1, 2, 3, 4, 5]])
A:scipy.sparse.tests.test_construct.diags2->array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
A:scipy.sparse.tests.test_construct.diags3->array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]])
A:scipy.sparse.tests.test_construct.a->array([1, 2, 3, 4, 5])
A:scipy.sparse.tests.test_construct.b->array([6, 7, 8, 9, 10])
A:scipy.sparse.tests.test_construct.c->array([11, 12, 13, 14, 15])
A:scipy.sparse.tests.test_construct.offsets->numpy.arange(-n + 1, n - 1)
A:scipy.sparse.tests.test_construct.mat->scipy.sparse.construct.diags(diagonals[0], offsets[0])
A:scipy.sparse.tests.test_construct.dense_mat->numpy.diag(diagonals[0], offsets[0])
A:scipy.sparse.tests.test_construct.x->sprand(5, 10, format=fmt)
A:scipy.sparse.tests.test_construct.d->list(range(5))
A:scipy.sparse.tests.test_construct.I->scipy.sparse.construct.eye(3, format=fmt)
A:scipy.sparse.tests.test_construct.result->scipy.sparse.construct.kronsum(csr_matrix(a), csr_matrix(b)).todense()
A:scipy.sparse.tests.test_construct.expected->matrix([[1, 2, 0, 0], [3, 4, 0, 0], [0, 0, 5, 0], [0, 0, 6, 0], [0, 0, 0, 7]])
A:scipy.sparse.tests.test_construct.A->coo_matrix([[1, 2], [3, 4]])
A:scipy.sparse.tests.test_construct.B->coo_matrix([[5], [6]])
A:scipy.sparse.tests.test_construct.C->coo_matrix([[7]])
scipy.sparse.tests.test_TestConstructUtils(TestCase)
scipy.sparse.tests.test_TestConstructUtils.test_block_diag_1(self)
scipy.sparse.tests.test_TestConstructUtils.test_block_diag_basic(self)
scipy.sparse.tests.test_TestConstructUtils.test_block_diag_scalar_1d_args(self)
scipy.sparse.tests.test_TestConstructUtils.test_bmat(self)
scipy.sparse.tests.test_TestConstructUtils.test_diags(self)
scipy.sparse.tests.test_TestConstructUtils.test_diags_bad(self)
scipy.sparse.tests.test_TestConstructUtils.test_diags_dtype(self)
scipy.sparse.tests.test_TestConstructUtils.test_diags_one_diagonal(self)
scipy.sparse.tests.test_TestConstructUtils.test_diags_vs_diag(self)
scipy.sparse.tests.test_TestConstructUtils.test_eye(self)
scipy.sparse.tests.test_TestConstructUtils.test_eye_one(self)
scipy.sparse.tests.test_TestConstructUtils.test_hstack(self)
scipy.sparse.tests.test_TestConstructUtils.test_identity(self)
scipy.sparse.tests.test_TestConstructUtils.test_kron(self)
scipy.sparse.tests.test_TestConstructUtils.test_kronsum(self)
scipy.sparse.tests.test_TestConstructUtils.test_rand(self)
scipy.sparse.tests.test_TestConstructUtils.test_spdiags(self)
scipy.sparse.tests.test_TestConstructUtils.test_vstack(self)
scipy.sparse.tests.test_construct.TestConstructUtils(TestCase)
scipy.sparse.tests.test_construct.TestConstructUtils.test_block_diag_1(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_block_diag_basic(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_block_diag_scalar_1d_args(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_bmat(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_diags(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_diags_bad(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_diags_dtype(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_diags_one_diagonal(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_diags_vs_diag(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_eye(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_eye_one(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_hstack(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_identity(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_kron(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_kronsum(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_rand(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_spdiags(self)
scipy.sparse.tests.test_construct.TestConstructUtils.test_vstack(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/tests/test_csr.py----------------------------------------
A:scipy.sparse.tests.test_csr.X->numpy.random.random((N, N))
A:scipy.sparse.tests.test_csr.Xcsr->csr_matrix(X)
A:scipy.sparse.tests.test_csr.csr_row->csr_matrix(X).getrow(i)
A:scipy.sparse.tests.test_csr.csr_col->csr_matrix(X).getcol(i)
scipy.sparse.tests.test__check_csr_rowslice(i,sl,X,Xcsr)
scipy.sparse.tests.test_csr._check_csr_rowslice(i,sl,X,Xcsr)
scipy.sparse.tests.test_csr.test_csr_getcol()
scipy.sparse.tests.test_csr.test_csr_getrow()
scipy.sparse.tests.test_csr.test_csr_rowslice()
scipy.sparse.tests.test_test_csr_getcol()
scipy.sparse.tests.test_test_csr_getrow()
scipy.sparse.tests.test_test_csr_rowslice()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/tests/test_spfuncs.py----------------------------------------
A:scipy.sparse.tests.test_spfuncs.D->matrix([[1, 0, 0, 2, 3], [0, 4, 0, 5, 0], [0, 0, 6, 7, 0]])
A:scipy.sparse.tests.test_spfuncs.S->bsr_matrix(E, blocksize=(2, 3))
A:scipy.sparse.tests.test_spfuncs.v->array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
A:scipy.sparse.tests.test_spfuncs.E->kron(D, [[1, 2, 3], [4, 5, 6]])
A:scipy.sparse.tests.test_spfuncs.X->kron([[1, 1, 0], [0, 0, 1], [1, 0, 1]], [[1, 1]])
A:scipy.sparse.tests.test_spfuncs.(r, c)->scipy.sparse.spfuncs.estimate_blocksize(X)
A:scipy.sparse.tests.test_spfuncs.(I, J)->A.nonzero()
A:scipy.sparse.tests.test_spfuncs.Y->csc_matrix(X)
scipy.sparse.tests.test_spfuncs.TestSparseFunctions(TestCase)
scipy.sparse.tests.test_spfuncs.TestSparseFunctions.test_count_blocks(self)
scipy.sparse.tests.test_spfuncs.TestSparseFunctions.test_estimate_blocksize(self)
scipy.sparse.tests.test_spfuncs.TestSparseFunctions.test_scale_rows_and_cols(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/tests/test_sputils.py----------------------------------------
A:scipy.sparse.tests.test_sputils.A->numpy.array([1], dtype='int8')
scipy.sparse.tests.test_sputils.TestSparseUtils(TestCase)
scipy.sparse.tests.test_sputils.TestSparseUtils.test_getdtype(self)
scipy.sparse.tests.test_sputils.TestSparseUtils.test_isdense(self)
scipy.sparse.tests.test_sputils.TestSparseUtils.test_isintlike(self)
scipy.sparse.tests.test_sputils.TestSparseUtils.test_isscalarlike(self)
scipy.sparse.tests.test_sputils.TestSparseUtils.test_issequence(self)
scipy.sparse.tests.test_sputils.TestSparseUtils.test_isshape(self)
scipy.sparse.tests.test_sputils.TestSparseUtils.test_upcast(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/tests/test_extract.py----------------------------------------
A:scipy.sparse.tests.test_extract.(I, J, V)->scipy.sparse.extract.find(A)
A:scipy.sparse.tests.test_extract.B->A.toarray()
scipy.sparse.tests.test_TestExtract(TestCase)
scipy.sparse.tests.test_TestExtract.find(self)
scipy.sparse.tests.test_TestExtract.setUp(self)
scipy.sparse.tests.test_TestExtract.test_tril(self)
scipy.sparse.tests.test_TestExtract.test_triu(self)
scipy.sparse.tests.test_extract.TestExtract(TestCase)
scipy.sparse.tests.test_extract.TestExtract.find(self)
scipy.sparse.tests.test_extract.TestExtract.setUp(self)
scipy.sparse.tests.test_extract.TestExtract.test_tril(self)
scipy.sparse.tests.test_extract.TestExtract.test_triu(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/tests/test_csc.py----------------------------------------
A:scipy.sparse.tests.test_csc.X->numpy.random.random((N, N))
A:scipy.sparse.tests.test_csc.Xcsc->csc_matrix(X)
A:scipy.sparse.tests.test_csc.csc_row->csc_matrix(X).getrow(i)
A:scipy.sparse.tests.test_csc.csc_col->csc_matrix(X).getcol(i)
scipy.sparse.tests.test_csc.test_csc_getcol()
scipy.sparse.tests.test_csc.test_csc_getrow()
scipy.sparse.tests.test_test_csc_getcol()
scipy.sparse.tests.test_test_csc_getrow()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/setupscons.py----------------------------------------
A:scipy.sparse.linalg.setupscons.config->Configuration('linalg', parent_package, top_path, setup_name='setupscons.py')
scipy.sparse.linalg.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/interface.py----------------------------------------
A:scipy.sparse.linalg.interface.shape->tuple(shape)
A:scipy.sparse.linalg.interface.self.dtype->numpy.dtype(dtype)
A:scipy.sparse.linalg.interface.x->numpy.asarray(x)
A:scipy.sparse.linalg.interface.y->y.reshape(M, 1).reshape(M, 1)
A:scipy.sparse.linalg.interface.X->numpy.asanyarray(X)
A:scipy.sparse.linalg.interface.Y->numpy.asmatrix(Y)
A:scipy.sparse.linalg.interface.self.A_conj->self.A.T.conj()
A:scipy.sparse.linalg.interface.A->numpy.atleast_2d(np.asarray(A))
scipy.sparse.linalg.IdentityOperator(self,shape,dtype)
scipy.sparse.linalg.IdentityOperator.__mul__(self,x)
scipy.sparse.linalg.IdentityOperator.matmat(self,x)
scipy.sparse.linalg.IdentityOperator.matvec(self,x)
scipy.sparse.linalg.IdentityOperator.rmatvec(self,x)
scipy.sparse.linalg.LinearOperator(self,shape,matvec,rmatvec=None,matmat=None,dtype=None)
scipy.sparse.linalg.LinearOperator.__mul__(self,x)
scipy.sparse.linalg.LinearOperator.__repr__(self)
scipy.sparse.linalg.LinearOperator._matmat(self,X)
scipy.sparse.linalg.LinearOperator.matmat(self,X)
scipy.sparse.linalg.LinearOperator.matvec(self,x)
scipy.sparse.linalg.MatrixLinearOperator(self,A)
scipy.sparse.linalg.MatrixLinearOperator.rmatvec(self,x)
scipy.sparse.linalg.aslinearoperator(A)
scipy.sparse.linalg.interface.IdentityOperator(self,shape,dtype)
scipy.sparse.linalg.interface.IdentityOperator.__init__(self,shape,dtype)
scipy.sparse.linalg.interface.IdentityOperator.__mul__(self,x)
scipy.sparse.linalg.interface.IdentityOperator.matmat(self,x)
scipy.sparse.linalg.interface.IdentityOperator.matvec(self,x)
scipy.sparse.linalg.interface.IdentityOperator.rmatvec(self,x)
scipy.sparse.linalg.interface.LinearOperator(self,shape,matvec,rmatvec=None,matmat=None,dtype=None)
scipy.sparse.linalg.interface.LinearOperator.__init__(self,shape,matvec,rmatvec=None,matmat=None,dtype=None)
scipy.sparse.linalg.interface.LinearOperator.__mul__(self,x)
scipy.sparse.linalg.interface.LinearOperator.__repr__(self)
scipy.sparse.linalg.interface.LinearOperator._matmat(self,X)
scipy.sparse.linalg.interface.LinearOperator.matmat(self,X)
scipy.sparse.linalg.interface.LinearOperator.matvec(self,x)
scipy.sparse.linalg.interface.MatrixLinearOperator(self,A)
scipy.sparse.linalg.interface.MatrixLinearOperator.__init__(self,A)
scipy.sparse.linalg.interface.MatrixLinearOperator.rmatvec(self,x)
scipy.sparse.linalg.interface.aslinearoperator(A)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/setup.py----------------------------------------
A:scipy.sparse.linalg.setup.config->Configuration('linalg', parent_package, top_path)
scipy.sparse.linalg.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/matfuncs.py----------------------------------------
A:scipy.sparse.linalg.matfuncs.I->speye(A.shape[0], A.shape[1], dtype=A.dtype, format=A.format)
A:scipy.sparse.linalg.matfuncs.Ainv->spsolve(A, I)
A:scipy.sparse.linalg.matfuncs.Aissparse->isspmatrix(A)
A:scipy.sparse.linalg.matfuncs.A_L1->norm(A, 1)
A:scipy.sparse.linalg.matfuncs.ident->eye(A.shape[0], A.shape[1], dtype=A.dtype)
A:scipy.sparse.linalg.matfuncs.A->asarray(A)
A:scipy.sparse.linalg.matfuncs.(U, V)->_pade7(A, ident)
A:scipy.sparse.linalg.matfuncs.n_squarings->max(0, int(ceil(log2(A_L1 / maxnorm))))
A:scipy.sparse.linalg.matfuncs.R->R.dot(R).dot(R)
A:scipy.sparse.linalg.matfuncs.A2->asarray(A).dot(A)
A:scipy.sparse.linalg.matfuncs.U->asarray(A).dot(A6.dot(b[13] * A6 + b[11] * A4 + b[9] * A2) + b[7] * A6 + b[5] * A4 + b[3] * A2 + b[1] * ident)
A:scipy.sparse.linalg.matfuncs.A4->asarray(A).dot(A).dot(A2)
A:scipy.sparse.linalg.matfuncs.A6->asarray(A).dot(A).dot(A2).dot(A2)
A:scipy.sparse.linalg.matfuncs.A8->asarray(A).dot(A).dot(A2).dot(A2).dot(A2)
scipy.sparse.linalg._pade13(A,ident)
scipy.sparse.linalg._pade3(A,ident)
scipy.sparse.linalg._pade5(A,ident)
scipy.sparse.linalg._pade7(A,ident)
scipy.sparse.linalg._pade9(A,ident)
scipy.sparse.linalg.expm(A)
scipy.sparse.linalg.inv(A)
scipy.sparse.linalg.matfuncs._pade13(A,ident)
scipy.sparse.linalg.matfuncs._pade3(A,ident)
scipy.sparse.linalg.matfuncs._pade5(A,ident)
scipy.sparse.linalg.matfuncs._pade7(A,ident)
scipy.sparse.linalg.matfuncs._pade9(A,ident)
scipy.sparse.linalg.matfuncs.expm(A)
scipy.sparse.linalg.matfuncs.inv(A)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/tests/test_interface.py----------------------------------------
A:scipy.sparse.linalg.tests.test_interface.A->scipy.sparse.linalg.interface.aslinearoperator(M)
A:scipy.sparse.linalg.tests.test_interface.self.dtype->numpy.dtype(dtype)
A:scipy.sparse.linalg.tests.test_interface.y->y.reshape(-1, 1).reshape(-1, 1)
scipy.sparse.linalg.tests.test_TestAsLinearOperator(TestCase)
scipy.sparse.linalg.tests.test_TestAsLinearOperator.setUp(self)
scipy.sparse.linalg.tests.test_TestAsLinearOperator.test_basic(self)
scipy.sparse.linalg.tests.test_TestLinearOperator(TestCase)
scipy.sparse.linalg.tests.test_TestLinearOperator.setUp(self)
scipy.sparse.linalg.tests.test_TestLinearOperator.test_matvec(self)
scipy.sparse.linalg.tests.test_interface.TestAsLinearOperator(TestCase)
scipy.sparse.linalg.tests.test_interface.TestAsLinearOperator.setUp(self)
scipy.sparse.linalg.tests.test_interface.TestAsLinearOperator.test_basic(self)
scipy.sparse.linalg.tests.test_interface.TestLinearOperator(TestCase)
scipy.sparse.linalg.tests.test_interface.TestLinearOperator.setUp(self)
scipy.sparse.linalg.tests.test_interface.TestLinearOperator.test_matvec(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/tests/test_matfuncs.py----------------------------------------
A:scipy.sparse.linalg.tests.test_matfuncs.a->(eye(n) + random.rand(n, n) * scale).astype(dtype)
scipy.sparse.linalg.tests.test_TestExpM(TestCase)
scipy.sparse.linalg.tests.test_TestExpM.test_logm_consistency(self)
scipy.sparse.linalg.tests.test_TestExpM.test_padecases_dtype(self)
scipy.sparse.linalg.tests.test_TestExpM.test_padecases_dtype_sparse(self)
scipy.sparse.linalg.tests.test_TestExpM.test_zero(self)
scipy.sparse.linalg.tests.test_TestExpM.test_zero_sparse(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM(TestCase)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_logm_consistency(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_padecases_dtype(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_padecases_dtype_sparse(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_zero(self)
scipy.sparse.linalg.tests.test_matfuncs.TestExpM.test_zero_sparse(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/eigen/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/eigen/setupscons.py----------------------------------------
A:scipy.sparse.linalg.eigen.setupscons.config->Configuration('eigen', parent_package, top_path, setup_name='setupscons.py')
scipy.sparse.linalg.eigen.setupscons.configuration(parent_package='',top_path=None)
scipy.sparse.linalg.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/eigen/setup.py----------------------------------------
A:scipy.sparse.linalg.eigen.setup.config->Configuration('eigen', parent_package, top_path)
scipy.sparse.linalg.eigen.setup.configuration(parent_package='',top_path=None)
scipy.sparse.linalg.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/eigen/lobpcg/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/eigen/lobpcg/setupscons.py----------------------------------------
A:scipy.sparse.linalg.eigen.lobpcg.setupscons.config->Configuration('lobpcg', parent_package, top_path)
scipy.sparse.linalg.eigen.lobpcg.setupscons.configuration(parent_package='',top_path=None)
scipy.sparse.linalg.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/eigen/lobpcg/setup.py----------------------------------------
A:scipy.sparse.linalg.eigen.lobpcg.setup.config->Configuration('lobpcg', parent_package, top_path)
scipy.sparse.linalg.eigen.lobpcg.setup.configuration(parent_package='',top_path=None)
scipy.sparse.linalg.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/eigen/lobpcg/lobpcg.py----------------------------------------
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.fun->scipy.linalg.get_lapack_funcs('sygv', arrays=(mtxA,))
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.out->scipy.linalg.eig(mtxA, mtxB, right=eigenvectors)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.ii->numpy.where(residualNorms > residualTolerance, True, False)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.aux->numpy.sum(blockVectorR.conjugate() * blockVectorR, 0)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.operator->aslinearoperator(operatorInput)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.gramYBV->scipy.dot(blockVectorBY.T, blockVectorV)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.tmp->scipy.linalg.cho_solve(factYBY, gramYBV)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.blockVectorBV->scipy.dot(blockVectorBV, gramVBV)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.gramVBV->scipy.linalg.inv(gramVBV, overwrite_a=True)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.blockVectorV->scipy.dot(blockVectorV, gramVBV)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.A->spdiags(vals, 0, n, n)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.B->numpy.eye(n, n)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.M->makeOperator(M, (n, n))
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.A_dense->A(np.eye(n))
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.B_dense->B(np.eye(n))
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.(_lambda, eigBlockVector)->symeig(gramA, gramB)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.maxIterations->min(n, maxIterations)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.blockVectorBY->B(blockVectorY)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.gramYBY->scipy.linalg.cho_factor(gramYBY)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.(blockVectorX, blockVectorBX)->b_orthonormalize(B, blockVectorX)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.blockVectorAX->scipy.dot(blockVectorAX, eigBlockVector)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.gramXAX->scipy.dot(blockVectorX.T, blockVectorAX)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.gramXBX->scipy.dot(blockVectorX.T, blockVectorX)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.eigBlockVector->numpy.asarray(eigBlockVector[:, ii].astype(np.float64))
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.blockVectorX->scipy.dot(blockVectorX, eigBlockVector)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.blockVectorBX->scipy.dot(blockVectorBX, eigBlockVector)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.activeMask->numpy.ones((sizeX,), dtype=np.bool)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.ident->numpy.eye(currentBlockSize, dtype=A.dtype)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.ident0->numpy.eye(sizeX, dtype=A.dtype)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.residualNorms->numpy.sqrt(aux)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.currentBlockSize->numpy.ones((sizeX,), dtype=np.bool).sum()
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.activeBlockVectorR->M(activeBlockVectorR)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.activeBlockVectorP->as2d(blockVectorP[:, activeMask])
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.activeBlockVectorAP->scipy.dot(activeBlockVectorAP, invR)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.activeBlockVectorBP->as2d(blockVectorBP[:, activeMask])
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.activeBlockVectorAR->A(activeBlockVectorR)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.xaw->scipy.dot(blockVectorX.T, activeBlockVectorAR)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.waw->scipy.dot(activeBlockVectorR.T, activeBlockVectorAR)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.xbw->scipy.dot(blockVectorX.T, activeBlockVectorBR)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.xap->scipy.dot(blockVectorX.T, activeBlockVectorAP)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.wap->scipy.dot(activeBlockVectorR.T, activeBlockVectorAP)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.pap->scipy.dot(activeBlockVectorP.T, activeBlockVectorAP)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.xbp->scipy.dot(blockVectorX.T, activeBlockVectorBP)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.wbp->scipy.dot(activeBlockVectorR.T, activeBlockVectorBP)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.gramA->numpy.bmat([[np.diag(_lambda), xaw], [xaw.T, waw]])
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.gramB->numpy.bmat([[ident0, xbw], [xbw.T, ident]])
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg._lambda->_lambda[ii].astype(np.float64)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.pp->scipy.dot(activeBlockVectorR, eigBlockVectorR)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.app->scipy.dot(activeBlockVectorAR, eigBlockVectorR)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.bpp->scipy.dot(activeBlockVectorBR, eigBlockVectorR)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.Y->numpy.eye(n, 3)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.X->numpy.fromfile(xfile[n], dtype=np.float64, sep=' ')
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.invA->spdiags(ivals, 0, n, n)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.y->y.toarray().toarray()
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.precond->spdiags(ivals, 0, n, n)
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.tt->time.clock()
A:scipy.sparse.linalg.eigen.lobpcg.lobpcg.(eigs, vecs)->lobpcg(X, A, B, blockVectorY=Y, M=precond, residualTolerance=0.0001, maxIterations=40, largest=False, verbosityLevel=1)
scipy.sparse.linalg.CallableLinearOperator(self,x)
scipy.sparse.linalg.applyConstraints(blockVectorV,factYBY,blockVectorBY,blockVectorY)
scipy.sparse.linalg.as2d(ar)
scipy.sparse.linalg.b_orthonormalize(B,blockVectorV,blockVectorBV=None,retInvR=False)
scipy.sparse.linalg.eigen.lobpcg.lobpcg.CallableLinearOperator(self,x)
scipy.sparse.linalg.eigen.lobpcg.lobpcg.CallableLinearOperator.__call__(self,x)
scipy.sparse.linalg.eigen.lobpcg.lobpcg.applyConstraints(blockVectorV,factYBY,blockVectorBY,blockVectorY)
scipy.sparse.linalg.eigen.lobpcg.lobpcg.as2d(ar)
scipy.sparse.linalg.eigen.lobpcg.lobpcg.b_orthonormalize(B,blockVectorV,blockVectorBV=None,retInvR=False)
scipy.sparse.linalg.eigen.lobpcg.lobpcg.lobpcg(A,X,B=None,M=None,Y=None,tol=None,maxiter=20,largest=True,verbosityLevel=0,retLambdaHistory=False,retResidualNormsHistory=False)
scipy.sparse.linalg.eigen.lobpcg.lobpcg.makeOperator(operatorInput,expectedShape)
scipy.sparse.linalg.eigen.lobpcg.lobpcg.pause()
scipy.sparse.linalg.eigen.lobpcg.lobpcg.save(ar,fileName)
scipy.sparse.linalg.eigen.lobpcg.lobpcg.symeig(mtxA,mtxB=None,eigenvectors=True,select=None)
scipy.sparse.linalg.lobpcg(A,X,B=None,M=None,Y=None,tol=None,maxiter=20,largest=True,verbosityLevel=0,retLambdaHistory=False,retResidualNormsHistory=False)
scipy.sparse.linalg.makeOperator(operatorInput,expectedShape)
scipy.sparse.linalg.pause()
scipy.sparse.linalg.save(ar,fileName)
scipy.sparse.linalg.symeig(mtxA,mtxB=None,eigenvectors=True,select=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/eigen/lobpcg/tests/test_lobpcg.py----------------------------------------
A:scipy.sparse.linalg.eigen.lobpcg.tests.test_lobpcg.x->arange(1, n + 1)
A:scipy.sparse.linalg.eigen.lobpcg.tests.test_lobpcg.B->diag(1.0 / x)
A:scipy.sparse.linalg.eigen.lobpcg.tests.test_lobpcg.y->arange(n - 1, 0, -1)
A:scipy.sparse.linalg.eigen.lobpcg.tests.test_lobpcg.z->arange(2 * n - 1, 0, -2)
A:scipy.sparse.linalg.eigen.lobpcg.tests.test_lobpcg.V->rand(n, m)
A:scipy.sparse.linalg.eigen.lobpcg.tests.test_lobpcg.X->ones((n, 1))
A:scipy.sparse.linalg.eigen.lobpcg.tests.test_lobpcg.(eigs, vecs)->lobpcg(A, X, B=B, tol=1e-05, maxiter=30)
A:scipy.sparse.linalg.eigen.lobpcg.tests.test_lobpcg.(w, v)->eig(A, b=B)
A:scipy.sparse.linalg.eigen.lobpcg.tests.test_lobpcg.(A, B)->MikotaPair(100)
A:scipy.sparse.linalg.eigen.lobpcg.tests.test_lobpcg.A->eye(n)
scipy.sparse.linalg.eigen.lobpcg.tests.test_lobpcg.ElasticRod(n)
scipy.sparse.linalg.eigen.lobpcg.tests.test_lobpcg.MikotaPair(n)
scipy.sparse.linalg.eigen.lobpcg.tests.test_lobpcg.compare_solutions(A,B,m)
scipy.sparse.linalg.eigen.lobpcg.tests.test_lobpcg.test_ElasticRod()
scipy.sparse.linalg.eigen.lobpcg.tests.test_lobpcg.test_MikotaPair()
scipy.sparse.linalg.eigen.lobpcg.tests.test_lobpcg.test_Small()
scipy.sparse.linalg.eigen.lobpcg.tests.test_lobpcg.test_trivial()
scipy.sparse.linalg.tests.test_ElasticRod(n)
scipy.sparse.linalg.tests.test_MikotaPair(n)
scipy.sparse.linalg.tests.test_compare_solutions(A,B,m)
scipy.sparse.linalg.tests.test_test_ElasticRod()
scipy.sparse.linalg.tests.test_test_MikotaPair()
scipy.sparse.linalg.tests.test_test_Small()
scipy.sparse.linalg.tests.test_test_trivial()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/eigen/lobpcg/tests/benchmark.py----------------------------------------
A:scipy.sparse.linalg.eigen.lobpcg.tests.benchmark.x->arange(1, n + 1)
A:scipy.sparse.linalg.eigen.lobpcg.tests.benchmark.B->diag(1.0 / x)
A:scipy.sparse.linalg.eigen.lobpcg.tests.benchmark.y->linalg.cho_solve((LorU, lower), x)
A:scipy.sparse.linalg.eigen.lobpcg.tests.benchmark.z->arange(2 * n - 1, 0, -2)
A:scipy.sparse.linalg.eigen.lobpcg.tests.benchmark.aux->nm.array(ar, copy=False)
A:scipy.sparse.linalg.eigen.lobpcg.tests.benchmark.N->array([128, 256, 512, 1024, 2048])
A:scipy.sparse.linalg.eigen.lobpcg.tests.benchmark.(A, B)->test(n)
A:scipy.sparse.linalg.eigen.lobpcg.tests.benchmark.X->linalg.orth(X)
A:scipy.sparse.linalg.eigen.lobpcg.tests.benchmark.tt->time.clock()
A:scipy.sparse.linalg.eigen.lobpcg.tests.benchmark.(LorU, lower)->linalg.cho_factor(A, lower=0, overwrite_a=0)
A:scipy.sparse.linalg.eigen.lobpcg.tests.benchmark.(eigs, vecs)->scipy.sparse.linalg.lobpcg.lobpcg(X, A, B, operatorT=precond, residualTolerance=0.0001, maxIterations=40)
A:scipy.sparse.linalg.eigen.lobpcg.tests.benchmark.eigs->sort(eigs)
A:scipy.sparse.linalg.eigen.lobpcg.tests.benchmark.(w, v)->symeig(A, B, range=(1, m))
scipy.sparse.linalg.eigen.lobpcg.tests.benchmark.as2d(ar)
scipy.sparse.linalg.eigen.lobpcg.tests.benchmark.precond(x)
scipy.sparse.linalg.eigen.lobpcg.tests.benchmark.test(n)
scipy.sparse.linalg.tests.benchmark.as2d(ar)
scipy.sparse.linalg.tests.benchmark.precond(x)
scipy.sparse.linalg.tests.benchmark.test(n)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/eigen/lobpcg/tests/large_scale.py----------------------------------------
A:scipy.sparse.linalg.eigen.lobpcg.tests.large_scale.A->scipy.sparse.eye(n, n)
A:scipy.sparse.linalg.eigen.lobpcg.tests.large_scale.d0->array(r_[5, 6 * ones(n - 2), 5])
A:scipy.sparse.linalg.eigen.lobpcg.tests.large_scale.d2->ones(n)
A:scipy.sparse.linalg.eigen.lobpcg.tests.large_scale.B->scipy.sparse.spdiags([d2, d1, d0, d1, d2], [-2, -1, 0, 1, 2], n, n)
A:scipy.sparse.linalg.eigen.lobpcg.tests.large_scale.k->arange(1, n + 1)
A:scipy.sparse.linalg.eigen.lobpcg.tests.large_scale.w_ex->sort(1.0 / (16.0 * pow(cos(0.5 * k * pi / (n + 1)), 4)))
A:scipy.sparse.linalg.eigen.lobpcg.tests.large_scale.(A, B, w_ex)->sakurai(n)
A:scipy.sparse.linalg.eigen.lobpcg.tests.large_scale.X->rand(n, m)
A:scipy.sparse.linalg.eigen.lobpcg.tests.large_scale.tt->time.clock()
A:scipy.sparse.linalg.eigen.lobpcg.tests.large_scale.(eigs, vecs, resnh)->lobpcg(X, A, B, residualTolerance=1e-06, maxIterations=500, retResidualNormsHistory=1)
scipy.sparse.linalg.eigen.lobpcg.tests.large_scale.sakurai(n)
scipy.sparse.linalg.tests.large_scale.sakurai(n)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/eigen/arpack/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/eigen/arpack/setupscons.py----------------------------------------
A:scipy.sparse.linalg.eigen.arpack.setupscons.config->Configuration('arpack', parent_package, top_path)
scipy.sparse.linalg.eigen.arpack.setupscons.configuration(parent_package='',top_path=None)
scipy.sparse.linalg.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/eigen/arpack/arpack.py----------------------------------------
A:scipy.sparse.linalg.eigen.arpack.arpack.ZNAUPD_ERRORS->DNAUPD_ERRORS.copy()
A:scipy.sparse.linalg.eigen.arpack.arpack.SNEUPD_ERRORS->DNEUPD_ERRORS.copy()
A:scipy.sparse.linalg.eigen.arpack.arpack.CNEUPD_ERRORS->ZNEUPD_ERRORS.copy()
A:scipy.sparse.linalg.eigen.arpack.arpack.SSEUPD_ERRORS->DSEUPD_ERRORS.copy()
A:scipy.sparse.linalg.eigen.arpack.arpack.msg->infodict.get(info, 'Unknown error')
A:scipy.sparse.linalg.eigen.arpack.arpack.tp->_single_precision_cast(tp)
A:scipy.sparse.linalg.eigen.arpack.arpack.self.resid->numpy.zeros(n, tp)
A:scipy.sparse.linalg.eigen.arpack.arpack.ncv->min(ncv, n)
A:scipy.sparse.linalg.eigen.arpack.arpack.self.v->numpy.zeros((n, ncv), tp)
A:scipy.sparse.linalg.eigen.arpack.arpack.self.iparam->numpy.zeros(11, 'int')
A:scipy.sparse.linalg.eigen.arpack.arpack.(ev, vec)->self.extract(True)
A:scipy.sparse.linalg.eigen.arpack.arpack.ev->numpy.zeros((0,))
A:scipy.sparse.linalg.eigen.arpack.arpack.vec->numpy.zeros((self.n, 0))
A:scipy.sparse.linalg.eigen.arpack.arpack.self.workd->numpy.zeros(3 * n, self.tp)
A:scipy.sparse.linalg.eigen.arpack.arpack.self.workl->numpy.zeros(3 * self.ncv * (self.ncv + 2), self.tp)
A:scipy.sparse.linalg.eigen.arpack.arpack.self.ipntr->numpy.zeros(14, 'int')
A:scipy.sparse.linalg.eigen.arpack.arpack.(self.ido, self.tol, self.resid, self.v, self.iparam, self.ipntr, self.info)->self._arpack_solver(self.ido, self.bmat, self.which, self.k, self.tol, self.resid, self.v, self.iparam, self.ipntr, self.workd, self.workl, self.rwork, self.info)
A:scipy.sparse.linalg.eigen.arpack.arpack.xslice->slice(self.ipntr[0] - 1, self.ipntr[0] - 1 + self.n)
A:scipy.sparse.linalg.eigen.arpack.arpack.yslice->slice(self.ipntr[1] - 1, self.ipntr[1] - 1 + self.n)
A:scipy.sparse.linalg.eigen.arpack.arpack.self.workd[yslice]->self.B(self.workd[xslice])
A:scipy.sparse.linalg.eigen.arpack.arpack.self.workd[xslice]->self.OPb(self.workd[xslice])
A:scipy.sparse.linalg.eigen.arpack.arpack.Bxslice->slice(self.ipntr[2] - 1, self.ipntr[2] - 1 + self.n)
A:scipy.sparse.linalg.eigen.arpack.arpack.Ax->self.A_matvec(self.workd[xslice])
A:scipy.sparse.linalg.eigen.arpack.arpack.sselect->numpy.zeros(self.ncv, 'int')
A:scipy.sparse.linalg.eigen.arpack.arpack.(d, z, ierr)->self._arpack_extract(return_eigenvectors, howmny, sselect, self.sigma, workev, self.bmat, self.which, k, self.tol, self.resid, self.v, self.iparam, self.ipntr, self.workd, self.workl, self.rwork, ierr)
A:scipy.sparse.linalg.eigen.arpack.arpack.self.rwork->numpy.zeros(self.ncv, self.tp.lower())
A:scipy.sparse.linalg.eigen.arpack.arpack.sigmar->numpy.real(self.sigma)
A:scipy.sparse.linalg.eigen.arpack.arpack.sigmai->numpy.imag(self.sigma)
A:scipy.sparse.linalg.eigen.arpack.arpack.workev->numpy.zeros(3 * self.ncv, self.tp)
A:scipy.sparse.linalg.eigen.arpack.arpack.dr->numpy.zeros(k + 1, self.tp)
A:scipy.sparse.linalg.eigen.arpack.arpack.di->numpy.zeros(k + 1, self.tp)
A:scipy.sparse.linalg.eigen.arpack.arpack.zr->numpy.zeros((n, k + 1), self.tp)
A:scipy.sparse.linalg.eigen.arpack.arpack.(dr, di, zr, ierr)->self._arpack_extract(return_eigenvectors, howmny, sselect, sigmar, sigmai, workev, self.bmat, self.which, k, self.tol, self.resid, self.v, self.iparam, self.ipntr, self.workd, self.workl, self.info)
A:scipy.sparse.linalg.eigen.arpack.arpack.z->numpy.zeros((n, k + 1), self.tp).astype(self.tp.upper())
A:scipy.sparse.linalg.eigen.arpack.arpack.z[:, i + 1]->z[:, i].conjugate()
A:scipy.sparse.linalg.eigen.arpack.arpack.d[i]->numpy.dot(zr[:, i], self.matvec(zr[:, i]))
A:scipy.sparse.linalg.eigen.arpack.arpack.d[i + 1]->numpy.dot(zr[:, i], self.matvec(zr[:, i])).conj()
A:scipy.sparse.linalg.eigen.arpack.arpack.rd->numpy.round(d, decimals=_ndigits[self.tp])
A:scipy.sparse.linalg.eigen.arpack.arpack.ind->numpy.argsort(abs(rd))
A:scipy.sparse.linalg.eigen.arpack.arpack.m->aslinearoperator(m)
A:scipy.sparse.linalg.eigen.arpack.arpack.x->numpy.zeros(A.shape[1])
A:scipy.sparse.linalg.eigen.arpack.arpack.self.M_lu->lu_factor(M)
A:scipy.sparse.linalg.eigen.arpack.arpack.(b, info)->self.ifunc(self.OP, x, tol=self.tol)
A:scipy.sparse.linalg.eigen.arpack.arpack.self.OP->LinearOperator(self.A.shape, self.mult_func, dtype=dtype)
A:scipy.sparse.linalg.eigen.arpack.arpack.A->numpy.asarray(A)
A:scipy.sparse.linalg.eigen.arpack.arpack.Minv_matvec->get_OPinv_matvec(A, M, sigma, symmetric=True, tol=tol)
A:scipy.sparse.linalg.eigen.arpack.arpack.Minv->_aslinearoperator_with_dtype(Minv)
A:scipy.sparse.linalg.eigen.arpack.arpack.OPinv->_aslinearoperator_with_dtype(OPinv)
A:scipy.sparse.linalg.eigen.arpack.arpack.params->_SymmetricArpackParams(n, k, A.dtype.char, matvec, mode, M_matvec, Minv_matvec, sigma, ncv, v0, maxiter, which, tol)
A:scipy.sparse.linalg.eigen.arpack.arpack.ret->eigs(A, k, M=M, sigma=sigma, which=which, v0=v0, ncv=ncv, maxiter=maxiter, tol=tol, return_eigenvectors=return_eigenvectors, Minv=Minv, OPinv=OPinv)
A:scipy.sparse.linalg.eigen.arpack.arpack.M->_aslinearoperator_with_dtype(M)
A:scipy.sparse.linalg.eigen.arpack.arpack.XH->herm(A)
A:scipy.sparse.linalg.eigen.arpack.arpack.X->herm(A)
A:scipy.sparse.linalg.eigen.arpack.arpack.XH_X->LinearOperator(matvec=matvec_XH_X, dtype=X.dtype, shape=(X.shape[1], X.shape[1]))
A:scipy.sparse.linalg.eigen.arpack.arpack.(eigvals, eigvec)->eigensolver(XH_X, k=k, tol=tol ** 2, maxiter=maxiter, ncv=ncv, which=which, v0=v0)
A:scipy.sparse.linalg.eigen.arpack.arpack.s->numpy.sqrt(eigvals)
A:scipy.sparse.linalg.eigen.arpack.arpack.eigvals->eigensolver(XH_X, k=k, tol=tol ** 2, maxiter=maxiter, ncv=ncv, which=which, v0=v0, return_eigenvectors=False)
A:scipy.sparse.linalg.eigen.arpack.arpack.vh->herm(X.dot(u) / s)
scipy.sparse.linalg.ArpackError(self,info,infodict=_NAUPD_ERRORS)
scipy.sparse.linalg.ArpackNoConvergence(self,msg,eigenvalues,eigenvectors)
scipy.sparse.linalg.IterInv(self,M,ifunc=gmres,tol=0)
scipy.sparse.linalg.IterInv._matvec(self,x)
scipy.sparse.linalg.IterOpInv(self,A,M,sigma,ifunc=gmres,tol=0)
scipy.sparse.linalg.IterOpInv._matvec(self,x)
scipy.sparse.linalg.IterOpInv.mult_func(self,x)
scipy.sparse.linalg.IterOpInv.mult_func_M_None(self,x)
scipy.sparse.linalg.LuInv(self,M)
scipy.sparse.linalg.LuInv._matvec(self,x)
scipy.sparse.linalg.SpLuInv(self,M)
scipy.sparse.linalg.SpLuInv._matvec(self,x)
scipy.sparse.linalg._ArpackParams(self,n,k,tp,mode=1,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
scipy.sparse.linalg._ArpackParams._raise_no_convergence(self)
scipy.sparse.linalg._SymmetricArpackParams(self,n,k,tp,matvec,mode=1,M_matvec=None,Minv_matvec=None,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
scipy.sparse.linalg._SymmetricArpackParams.extract(self,return_eigenvectors)
scipy.sparse.linalg._SymmetricArpackParams.iterate(self)
scipy.sparse.linalg._UnsymmetricArpackParams(self,n,k,tp,matvec,mode=1,M_matvec=None,Minv_matvec=None,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
scipy.sparse.linalg._UnsymmetricArpackParams.extract(self,return_eigenvectors)
scipy.sparse.linalg._UnsymmetricArpackParams.iterate(self)
scipy.sparse.linalg._aslinearoperator_with_dtype(m)
scipy.sparse.linalg._single_precision_cast(typechar)
scipy.sparse.linalg.eigen.arpack.arpack.ArpackError(self,info,infodict=_NAUPD_ERRORS)
scipy.sparse.linalg.eigen.arpack.arpack.ArpackError.__init__(self,info,infodict=_NAUPD_ERRORS)
scipy.sparse.linalg.eigen.arpack.arpack.ArpackNoConvergence(self,msg,eigenvalues,eigenvectors)
scipy.sparse.linalg.eigen.arpack.arpack.ArpackNoConvergence.__init__(self,msg,eigenvalues,eigenvectors)
scipy.sparse.linalg.eigen.arpack.arpack.IterInv(self,M,ifunc=gmres,tol=0)
scipy.sparse.linalg.eigen.arpack.arpack.IterInv.__init__(self,M,ifunc=gmres,tol=0)
scipy.sparse.linalg.eigen.arpack.arpack.IterInv._matvec(self,x)
scipy.sparse.linalg.eigen.arpack.arpack.IterOpInv(self,A,M,sigma,ifunc=gmres,tol=0)
scipy.sparse.linalg.eigen.arpack.arpack.IterOpInv.__init__(self,A,M,sigma,ifunc=gmres,tol=0)
scipy.sparse.linalg.eigen.arpack.arpack.IterOpInv._matvec(self,x)
scipy.sparse.linalg.eigen.arpack.arpack.IterOpInv.mult_func(self,x)
scipy.sparse.linalg.eigen.arpack.arpack.IterOpInv.mult_func_M_None(self,x)
scipy.sparse.linalg.eigen.arpack.arpack.LuInv(self,M)
scipy.sparse.linalg.eigen.arpack.arpack.LuInv.__init__(self,M)
scipy.sparse.linalg.eigen.arpack.arpack.LuInv._matvec(self,x)
scipy.sparse.linalg.eigen.arpack.arpack.SpLuInv(self,M)
scipy.sparse.linalg.eigen.arpack.arpack.SpLuInv.__init__(self,M)
scipy.sparse.linalg.eigen.arpack.arpack.SpLuInv._matvec(self,x)
scipy.sparse.linalg.eigen.arpack.arpack._ArpackParams(self,n,k,tp,mode=1,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
scipy.sparse.linalg.eigen.arpack.arpack._ArpackParams.__init__(self,n,k,tp,mode=1,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
scipy.sparse.linalg.eigen.arpack.arpack._ArpackParams._raise_no_convergence(self)
scipy.sparse.linalg.eigen.arpack.arpack._SymmetricArpackParams(self,n,k,tp,matvec,mode=1,M_matvec=None,Minv_matvec=None,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
scipy.sparse.linalg.eigen.arpack.arpack._SymmetricArpackParams.__init__(self,n,k,tp,matvec,mode=1,M_matvec=None,Minv_matvec=None,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
scipy.sparse.linalg.eigen.arpack.arpack._SymmetricArpackParams.extract(self,return_eigenvectors)
scipy.sparse.linalg.eigen.arpack.arpack._SymmetricArpackParams.iterate(self)
scipy.sparse.linalg.eigen.arpack.arpack._UnsymmetricArpackParams(self,n,k,tp,matvec,mode=1,M_matvec=None,Minv_matvec=None,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
scipy.sparse.linalg.eigen.arpack.arpack._UnsymmetricArpackParams.__init__(self,n,k,tp,matvec,mode=1,M_matvec=None,Minv_matvec=None,sigma=None,ncv=None,v0=None,maxiter=None,which='LM',tol=0)
scipy.sparse.linalg.eigen.arpack.arpack._UnsymmetricArpackParams.extract(self,return_eigenvectors)
scipy.sparse.linalg.eigen.arpack.arpack._UnsymmetricArpackParams.iterate(self)
scipy.sparse.linalg.eigen.arpack.arpack._aslinearoperator_with_dtype(m)
scipy.sparse.linalg.eigen.arpack.arpack._single_precision_cast(typechar)
scipy.sparse.linalg.eigen.arpack.arpack.eigs(A,k=6,M=None,sigma=None,which='LM',v0=None,ncv=None,maxiter=None,tol=0,return_eigenvectors=True,Minv=None,OPinv=None,OPpart=None)
scipy.sparse.linalg.eigen.arpack.arpack.eigsh(A,k=6,M=None,sigma=None,which='LM',v0=None,ncv=None,maxiter=None,tol=0,return_eigenvectors=True,Minv=None,OPinv=None,mode='normal')
scipy.sparse.linalg.eigen.arpack.arpack.get_OPinv_matvec(A,M,sigma,symmetric=False,tol=0)
scipy.sparse.linalg.eigen.arpack.arpack.get_inv_matvec(M,symmetric=False,tol=0)
scipy.sparse.linalg.eigen.arpack.arpack.svds(A,k=6,ncv=None,tol=0,which='LM',v0=None,maxiter=None,return_singular_vectors=True)
scipy.sparse.linalg.eigs(A,k=6,M=None,sigma=None,which='LM',v0=None,ncv=None,maxiter=None,tol=0,return_eigenvectors=True,Minv=None,OPinv=None,OPpart=None)
scipy.sparse.linalg.eigsh(A,k=6,M=None,sigma=None,which='LM',v0=None,ncv=None,maxiter=None,tol=0,return_eigenvectors=True,Minv=None,OPinv=None,mode='normal')
scipy.sparse.linalg.get_OPinv_matvec(A,M,sigma,symmetric=False,tol=0)
scipy.sparse.linalg.get_inv_matvec(M,symmetric=False,tol=0)
scipy.sparse.linalg.svds(A,k=6,ncv=None,tol=0,which='LM',v0=None,maxiter=None,return_singular_vectors=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/eigen/arpack/setup.py----------------------------------------
A:scipy.sparse.linalg.eigen.arpack.setup.config->Configuration('arpack', parent_package, top_path)
A:scipy.sparse.linalg.eigen.arpack.setup.lapack_opt->get_info('lapack_opt')
scipy.sparse.linalg.eigen.arpack.setup.configuration(parent_package='',top_path=None)
scipy.sparse.linalg.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/eigen/arpack/tests/test_arpack.py----------------------------------------
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.M->generate_matrix(N, hermitian=True, pos_definite=True).astype('f').astype('d')
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.i->numpy.random.randint(N, size=N * N // 2)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.j->numpy.random.randint(N, size=N * N // 2)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.(i, j)->numpy.meshgrid(i, j)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.ind->argsort_which(eval, typ, k, which, sigma, OPpart, mode)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.m->m.todense().todense()
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.x->numpy.array([[1, 2, 3, 4], [5, 6, 7, 8]], float)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.reval->numpy.round(reval, decimals=_ndigits[typ])
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.a->d['mat'].astype(typ)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.ac->mattype(a)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.b->d['bmat'].astype(typ.lower())
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.bc->mattype(b)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.exact_eval->d['eval'].astype(typ.upper())
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.kwargs->dict(which=which, v0=v0, sigma=sigma)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.(kwargs['tol'], rtol, atol)->_get_test_tolerance(typ, mattype, sigma)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.(eval, evec)->eigs_func(ac, k, **kwargs)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.LHS->numpy.dot(a, evec)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.Ar->generate_matrix(N).astype('f').astype('d')
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.Ac->generate_matrix(N, complex=True).astype('F').astype('D')
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.v0->numpy.array([-0.7106356825890785, -0.8318511179572923, -0.343659253822274, 0.4612253368455228, -0.5800134111596904, -0.07884487757008429], dtype=dtype)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.SS->DictWithRepr('std-symmetric')
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.SS['eval']->eigh(SS['mat'], eigvals_only=True)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.GS->DictWithRepr('gen-symmetric')
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.GS['eval']->eigh(GS['mat'], GS['bmat'], eigvals_only=True)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.SH->DictWithRepr('std-hermitian')
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.SH['eval']->eigh(SH['mat'], eigvals_only=True)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.GH->DictWithRepr('gen-hermitian')
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.GH['eval']->eigh(GH['mat'], GH['bmat'], eigvals_only=True)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.SNR->DictWithRepr('std-real-nonsym')
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.SNR['eval']->eig(SNR['mat'], left=False, right=False)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.GNR->DictWithRepr('gen-real-nonsym')
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.GNR['eval']->eig(GNR['mat'], GNR['bmat'], left=False, right=False)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.SNC->DictWithRepr('std-cmplx-nonsym')
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.SNC['eval']->eig(SNC['mat'], left=False, right=False)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.GNC->DictWithRepr('gen-cmplx-nonsym')
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.GNC['eval']->eig(GNC['mat'], GNC['bmat'], left=False, right=False)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.params->NonSymmetricParams()
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.(tol, rtol, atol)->_get_test_tolerance('d')
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.(w, v)->eigs(m, 4, which='LM', v0=m[:, 0], maxiter=5, tol=tol)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.k->len(err.eigenvalues)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.A->numpy.random.random((N, N)).astype(dtype)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.(evals, evecs)->eigs(A, k, v0=v0)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.(u, s, vh)->svds(x, 1)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.y->numpy.array([[1, 2, 3, 8 + 5j], [3 - 2j, 4, 3, 5], [1, 0, 2, 3], [0, 0, 1, 0]], np.complex)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.z->csc_matrix(x)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.(su, ss, svh)->svds(m, k)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.m_hat->svd_estimate(u, s, vh)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.sm_hat->svd_estimate(su, ss, svh)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.(u, s, vt)->svds(x, 1, maxiter=100)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.(_, s, _)->sorted_svd(x, 2, which=which)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.ss->svds(x, 2, which=which, return_singular_vectors=False)
A:scipy.sparse.linalg.eigen.arpack.tests.test_arpack.(u2, s2, vh2)->svds(x, 1, v0=u[:, 0])
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.DictWithRepr(self,name)
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.DictWithRepr.__init__(self,name)
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.DictWithRepr.__repr__(self)
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.NonSymmetricParams(self)
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.NonSymmetricParams.__init__(self)
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.SymmetricParams(self)
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.SymmetricParams.__init__(self)
scipy.sparse.linalg.eigen.arpack.tests.test_arpack._aslinearoperator_with_dtype(m)
scipy.sparse.linalg.eigen.arpack.tests.test_arpack._get_test_tolerance(type_char,mattype=None,sigma=None)
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.argsort_which(eval,typ,k,which,sigma=None,OPpart=None,mode=None)
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.assert_allclose_cc(actual,desired,**kw)
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.eval_evec(symmetric,d,typ,k,which,v0=None,sigma=None,mattype=np.asarray,OPpart=None,mode='normal')
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.generate_matrix(N,complex=False,hermitian=False,pos_definite=False,sparse=False)
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.setup_module()
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.sorted_svd(m,k,which='LM')
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.svd_estimate(u,s,vh)
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.teardown_module()
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.test_complex_nonsymmetric_modes()
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.test_eigen_bad_kwargs()
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.test_eigen_bad_shapes()
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.test_general_nonsymmetric_starting_vector()
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.test_hermitian_modes()
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.test_real_nonsymmetric_modes()
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.test_standard_nonsymmetric_no_convergence()
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.test_standard_nonsymmetric_starting_vector()
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.test_svd_maxiter()
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.test_svd_return()
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.test_svd_simple_complex()
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.test_svd_simple_real()
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.test_svd_v0()
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.test_svd_which()
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.test_symmetric_modes()
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.test_symmetric_no_convergence()
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.test_symmetric_starting_vector()
scipy.sparse.linalg.eigen.arpack.tests.test_arpack.test_ticket_1459_arpack_crash()
scipy.sparse.linalg.tests.test_DictWithRepr(self,name)
scipy.sparse.linalg.tests.test_DictWithRepr.__repr__(self)
scipy.sparse.linalg.tests.test_NonSymmetricParams(self)
scipy.sparse.linalg.tests.test_SymmetricParams(self)
scipy.sparse.linalg.tests.test__aslinearoperator_with_dtype(m)
scipy.sparse.linalg.tests.test__get_test_tolerance(type_char,mattype=None,sigma=None)
scipy.sparse.linalg.tests.test_argsort_which(eval,typ,k,which,sigma=None,OPpart=None,mode=None)
scipy.sparse.linalg.tests.test_assert_allclose_cc(actual,desired,**kw)
scipy.sparse.linalg.tests.test_eval_evec(symmetric,d,typ,k,which,v0=None,sigma=None,mattype=np.asarray,OPpart=None,mode='normal')
scipy.sparse.linalg.tests.test_generate_matrix(N,complex=False,hermitian=False,pos_definite=False,sparse=False)
scipy.sparse.linalg.tests.test_setup_module()
scipy.sparse.linalg.tests.test_sorted_svd(m,k,which='LM')
scipy.sparse.linalg.tests.test_svd_estimate(u,s,vh)
scipy.sparse.linalg.tests.test_teardown_module()
scipy.sparse.linalg.tests.test_test_complex_nonsymmetric_modes()
scipy.sparse.linalg.tests.test_test_eigen_bad_kwargs()
scipy.sparse.linalg.tests.test_test_eigen_bad_shapes()
scipy.sparse.linalg.tests.test_test_general_nonsymmetric_starting_vector()
scipy.sparse.linalg.tests.test_test_hermitian_modes()
scipy.sparse.linalg.tests.test_test_real_nonsymmetric_modes()
scipy.sparse.linalg.tests.test_test_standard_nonsymmetric_no_convergence()
scipy.sparse.linalg.tests.test_test_standard_nonsymmetric_starting_vector()
scipy.sparse.linalg.tests.test_test_svd_maxiter()
scipy.sparse.linalg.tests.test_test_svd_return()
scipy.sparse.linalg.tests.test_test_svd_simple_complex()
scipy.sparse.linalg.tests.test_test_svd_simple_real()
scipy.sparse.linalg.tests.test_test_svd_v0()
scipy.sparse.linalg.tests.test_test_svd_which()
scipy.sparse.linalg.tests.test_test_symmetric_modes()
scipy.sparse.linalg.tests.test_test_symmetric_no_convergence()
scipy.sparse.linalg.tests.test_test_symmetric_starting_vector()
scipy.sparse.linalg.tests.test_test_ticket_1459_arpack_crash()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/dsolve/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/dsolve/setupscons.py----------------------------------------
A:scipy.sparse.linalg.dsolve.setupscons.config->Configuration('dsolve', parent_package, top_path, setup_name='setupscons.py')
scipy.sparse.linalg.dsolve.setupscons.configuration(parent_package='',top_path=None)
scipy.sparse.linalg.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/dsolve/setup.py----------------------------------------
A:scipy.sparse.linalg.dsolve.setup.config->Configuration('dsolve', parent_package, top_path)
A:scipy.sparse.linalg.dsolve.setup.lapack_opt->get_info('lapack_opt', notfound_action=2)
A:scipy.sparse.linalg.dsolve.setup.superlu_src->join(dirname(__file__), 'SuperLU', 'SRC')
A:scipy.sparse.linalg.dsolve.setup.sources->list(glob.glob(join(superlu_src, '*.c')))
scipy.sparse.linalg.dsolve.setup.configuration(parent_package='',top_path=None)
scipy.sparse.linalg.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/dsolve/linsolve.py----------------------------------------
A:scipy.sparse.linalg.dsolve.linsolve.isUmfpack->hasattr(umfpack, 'UMFPACK_OK')
A:scipy.sparse.linalg.dsolve.linsolve.A->A.asfptype().asfptype()
A:scipy.sparse.linalg.dsolve.linsolve.b->asarray(b, dtype=A.dtype)
A:scipy.sparse.linalg.dsolve.linsolve.umf->scikits.umfpack.UmfpackContext(family[A.dtype.char])
A:scipy.sparse.linalg.dsolve.linsolve.x->A.asfptype().asfptype().__class__(b.shape)
A:scipy.sparse.linalg.dsolve.linsolve.options->dict(ColPerm=permc_spec)
A:scipy.sparse.linalg.dsolve.linsolve.Afactsolve->factorized(A)
A:scipy.sparse.linalg.dsolve.linsolve.tempj->empty(M, dtype=int)
A:scipy.sparse.linalg.dsolve.linsolve.xj->Afactsolve(squeeze(b[:, j].toarray()))
A:scipy.sparse.linalg.dsolve.linsolve._options->dict(ILU_DropRule=drop_rule, ILU_DropTol=drop_tol, ILU_FillFactor=fill_factor, DiagPivotThresh=diag_pivot_thresh, ColPerm=permc_spec, PanelSize=panel_size, Relax=relax)
scipy.sparse.linalg.dsolve.linsolve.factorized(A)
scipy.sparse.linalg.dsolve.linsolve.spilu(A,drop_tol=None,fill_factor=None,drop_rule=None,permc_spec=None,diag_pivot_thresh=None,relax=None,panel_size=None,options=None)
scipy.sparse.linalg.dsolve.linsolve.splu(A,permc_spec=None,diag_pivot_thresh=None,drop_tol=None,relax=None,panel_size=None,options=dict())
scipy.sparse.linalg.dsolve.linsolve.spsolve(A,b,permc_spec=None,use_umfpack=True)
scipy.sparse.linalg.dsolve.linsolve.use_solver(**kwargs)
scipy.sparse.linalg.factorized(A)
scipy.sparse.linalg.spilu(A,drop_tol=None,fill_factor=None,drop_rule=None,permc_spec=None,diag_pivot_thresh=None,relax=None,panel_size=None,options=None)
scipy.sparse.linalg.splu(A,permc_spec=None,diag_pivot_thresh=None,drop_tol=None,relax=None,panel_size=None,options=dict())
scipy.sparse.linalg.spsolve(A,b,permc_spec=None,use_umfpack=True)
scipy.sparse.linalg.use_solver(**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/dsolve/umfpack/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/dsolve/umfpack/setupscons.py----------------------------------------
A:scipy.sparse.linalg.dsolve.umfpack.setupscons.config->Configuration('umfpack', parent_package, top_path)
scipy.sparse.linalg.dsolve.umfpack.setupscons.configuration(parent_package='',top_path=None)
scipy.sparse.linalg.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/dsolve/umfpack/setup.py----------------------------------------
A:scipy.sparse.linalg.dsolve.umfpack.setup.config->Configuration('umfpack', parent_package, top_path)
A:scipy.sparse.linalg.dsolve.umfpack.setup.umf_info->get_info('umfpack', notfound_action=1)
A:scipy.sparse.linalg.dsolve.umfpack.setup.blas_info->get_info('blas_opt')
scipy.sparse.linalg.dsolve.umfpack.setup.configuration(parent_package='',top_path=None)
scipy.sparse.linalg.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py----------------------------------------
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.outName->match(name).group(group)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.umfDefines->updateDictWithVars({}, _um, 'UMFPACK_.*')
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.aux->aux.replace('\n', '\n    ').replace('\n', '\n    ')
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.self.control->numpy.zeros((UMFPACK_CONTROL,), dtype=np.double)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.self.info->numpy.zeros((UMFPACK_INFO,), dtype=np.double)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.fn->updateDictWithVars({}, _um, pattern, group=1)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.self.funs->Struct(**fn)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.maxLen->max([len(name) for name in umfInfo])
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.indx->self._getIndx(mtx)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.(status, self._symbolic)->self.funs.symbolic(mtx.shape[0], mtx.shape[1], mtx.indptr, indx, real, imag, self.control, self.info)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.(status, self._numeric)->self.funs.numeric(mtx.indptr, indx, real, imag, self._symbolic, self.control, self.info)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.rhs->rhs.astype(np.complex128).astype(np.complex128)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.sol->self.solve(sys, mtx, rhs, autoTranspose)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.status->self.funs.solve(sys, mtx.indptr, indx, mreal, mimag, sreal, simag, rreal, rimag, self._numeric, self.control, self.info)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.mtx->mtx.tocsc().tocsc()
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.(status, lnz, unz, n_row, n_col, nz_udiag)->self.funs.get_lunz(self._numeric)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.Lp->numpy.zeros((n_row + 1,), dtype=i_type)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.Lj->numpy.zeros((lnz,), dtype=i_type)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.Lx->numpy.zeros((lnz,), dtype=np.double)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.Up->numpy.zeros((n_col + 1,), dtype=i_type)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.Ui->numpy.zeros((unz,), dtype=i_type)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.Ux->numpy.zeros((unz,), dtype=np.double)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.P->numpy.zeros((n_row,), dtype=i_type)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.Q->numpy.zeros((n_col,), dtype=i_type)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.Dx->numpy.zeros((min(n_row, n_col),), dtype=np.double)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.Rs->numpy.zeros((n_row,), dtype=np.double)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.(status, do_recip)->self.funs.get_numeric(Lp, Lj, Lx, Lz, Up, Ui, Ux, Uz, P, Q, Dx, Dz, Rs, self._numeric)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.L->scipy.sparse.csr_matrix((Lxz, Lj, Lp), (n_row, min(n_row, n_col)))
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.U->scipy.sparse.csc_matrix((Uxz, Ui, Up), (min(n_row, n_col), n_col))
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.Lz->numpy.zeros((lnz,), dtype=np.double)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.Uz->numpy.zeros((unz,), dtype=np.double)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.Dz->numpy.zeros((min(n_row, n_col),), dtype=np.double)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.Lxz->numpy.zeros((lnz,), dtype=np.complex128)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.Uxz->numpy.zeros((unz,), dtype=np.complex128)
A:scipy.sparse.linalg.dsolve.umfpack.umfpack.Dxz->numpy.zeros((min(n_row, n_col),), dtype=np.complex128)
scipy.sparse.linalg.Struct(self,**kwargs)
scipy.sparse.linalg.Struct.__str__(self)
scipy.sparse.linalg.UmfpackContext(self,family='di',**kwargs)
scipy.sparse.linalg.UmfpackContext.__del__(self)
scipy.sparse.linalg.UmfpackContext._getIndx(self,mtx)
scipy.sparse.linalg.UmfpackContext.free(self)
scipy.sparse.linalg.UmfpackContext.free_numeric(self)
scipy.sparse.linalg.UmfpackContext.free_symbolic(self)
scipy.sparse.linalg.UmfpackContext.linsolve(self,sys,mtx,rhs,autoTranspose=False)
scipy.sparse.linalg.UmfpackContext.lu(self,mtx)
scipy.sparse.linalg.UmfpackContext.numeric(self,mtx)
scipy.sparse.linalg.UmfpackContext.report_control(self)
scipy.sparse.linalg.UmfpackContext.report_info(self)
scipy.sparse.linalg.UmfpackContext.report_numeric(self)
scipy.sparse.linalg.UmfpackContext.report_symbolic(self)
scipy.sparse.linalg.UmfpackContext.solve(self,sys,mtx,rhs,autoTranspose=False)
scipy.sparse.linalg.UmfpackContext.strControl(self)
scipy.sparse.linalg.UmfpackContext.strInfo(self)
scipy.sparse.linalg.UmfpackContext.symbolic(self,mtx)
scipy.sparse.linalg.UmfpackWarning(UserWarning)
scipy.sparse.linalg.configure(**kwargs)
scipy.sparse.linalg.dsolve.umfpack.umfpack.Struct(self,**kwargs)
scipy.sparse.linalg.dsolve.umfpack.umfpack.Struct.__init__(self,**kwargs)
scipy.sparse.linalg.dsolve.umfpack.umfpack.Struct.__str__(self)
scipy.sparse.linalg.dsolve.umfpack.umfpack.UmfpackContext(self,family='di',**kwargs)
scipy.sparse.linalg.dsolve.umfpack.umfpack.UmfpackContext.__del__(self)
scipy.sparse.linalg.dsolve.umfpack.umfpack.UmfpackContext.__init__(self,family='di',**kwargs)
scipy.sparse.linalg.dsolve.umfpack.umfpack.UmfpackContext._getIndx(self,mtx)
scipy.sparse.linalg.dsolve.umfpack.umfpack.UmfpackContext.free(self)
scipy.sparse.linalg.dsolve.umfpack.umfpack.UmfpackContext.free_numeric(self)
scipy.sparse.linalg.dsolve.umfpack.umfpack.UmfpackContext.free_symbolic(self)
scipy.sparse.linalg.dsolve.umfpack.umfpack.UmfpackContext.linsolve(self,sys,mtx,rhs,autoTranspose=False)
scipy.sparse.linalg.dsolve.umfpack.umfpack.UmfpackContext.lu(self,mtx)
scipy.sparse.linalg.dsolve.umfpack.umfpack.UmfpackContext.numeric(self,mtx)
scipy.sparse.linalg.dsolve.umfpack.umfpack.UmfpackContext.report_control(self)
scipy.sparse.linalg.dsolve.umfpack.umfpack.UmfpackContext.report_info(self)
scipy.sparse.linalg.dsolve.umfpack.umfpack.UmfpackContext.report_numeric(self)
scipy.sparse.linalg.dsolve.umfpack.umfpack.UmfpackContext.report_symbolic(self)
scipy.sparse.linalg.dsolve.umfpack.umfpack.UmfpackContext.solve(self,sys,mtx,rhs,autoTranspose=False)
scipy.sparse.linalg.dsolve.umfpack.umfpack.UmfpackContext.strControl(self)
scipy.sparse.linalg.dsolve.umfpack.umfpack.UmfpackContext.strInfo(self)
scipy.sparse.linalg.dsolve.umfpack.umfpack.UmfpackContext.symbolic(self,mtx)
scipy.sparse.linalg.dsolve.umfpack.umfpack.UmfpackWarning(UserWarning)
scipy.sparse.linalg.dsolve.umfpack.umfpack.configure(**kwargs)
scipy.sparse.linalg.dsolve.umfpack.umfpack.updateDictWithVars(adict,module,pattern,group=None)
scipy.sparse.linalg.updateDictWithVars(adict,module,pattern,group=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/dsolve/umfpack/tests/test_umfpack.py----------------------------------------
A:scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack._umfpack_skip->numpy.testing.dec.skipif(not _have_umfpack, 'UMFPACK appears not to be compiled')
A:scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.self.mgr->WarningManager()
A:scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.a->self.a.astype('d')
A:scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.x->scipy.sparse.linalg.linsolve.spsolve(a, b)
A:scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.b->csc_matrix(self.b)
A:scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.solve->scipy.sparse.linalg.linsolve.factorized(a)
A:scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.x1->solve(self.b)
A:scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.x2->solve(self.b2)
A:scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.self.a->spdiags([[1, 2, 3, 4, 5], [6, 5, 8, 9, 10]], [0, 1], 5, 5)
A:scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.self.b->numpy.array([1, 2, 3, 4, 5])
A:scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.self.b2->numpy.array([5, 4, 3, 2, 1])
A:scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.umfpack->scipy.sparse.linalg.dsolve.umfpack.UmfpackContext('di')
A:scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.(L, U, P, Q, R, do_recip)->scipy.sparse.linalg.dsolve.umfpack.UmfpackContext('di').lu(A)
A:scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.L->L.todense().todense()
A:scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.U->U.todense().todense()
A:scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.A->A.todense().todense()
A:scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.R->matrix(diag(R))
scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.TestFactorization(_DeprecationAccept)
scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.TestFactorization.setUp(self)
scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.TestFactorization.test_complex_lu(self)
scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.TestFactorization.test_real_lu(self)
scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.TestSolvers(_DeprecationAccept)
scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.TestSolvers.setUp(self)
scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.TestSolvers.test_factorized_umfpack(self)
scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.TestSolvers.test_factorized_without_umfpack(self)
scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.TestSolvers.test_solve_complex_umfpack(self)
scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.TestSolvers.test_solve_complex_without_umfpack(self)
scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.TestSolvers.test_solve_sparse_rhs(self)
scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.TestSolvers.test_solve_umfpack(self)
scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack.TestSolvers.test_solve_without_umfpack(self)
scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack._DeprecationAccept
scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack._DeprecationAccept.setUp(self)
scipy.sparse.linalg.dsolve.umfpack.tests.test_umfpack._DeprecationAccept.tearDown(self)
scipy.sparse.linalg.tests.test_TestFactorization(_DeprecationAccept)
scipy.sparse.linalg.tests.test_TestFactorization.setUp(self)
scipy.sparse.linalg.tests.test_TestFactorization.test_complex_lu(self)
scipy.sparse.linalg.tests.test_TestFactorization.test_real_lu(self)
scipy.sparse.linalg.tests.test_TestSolvers(_DeprecationAccept)
scipy.sparse.linalg.tests.test_TestSolvers.setUp(self)
scipy.sparse.linalg.tests.test_TestSolvers.test_factorized_umfpack(self)
scipy.sparse.linalg.tests.test_TestSolvers.test_factorized_without_umfpack(self)
scipy.sparse.linalg.tests.test_TestSolvers.test_solve_complex_umfpack(self)
scipy.sparse.linalg.tests.test_TestSolvers.test_solve_complex_without_umfpack(self)
scipy.sparse.linalg.tests.test_TestSolvers.test_solve_sparse_rhs(self)
scipy.sparse.linalg.tests.test_TestSolvers.test_solve_umfpack(self)
scipy.sparse.linalg.tests.test_TestSolvers.test_solve_without_umfpack(self)
scipy.sparse.linalg.tests.test__DeprecationAccept
scipy.sparse.linalg.tests.test__DeprecationAccept.setUp(self)
scipy.sparse.linalg.tests.test__DeprecationAccept.tearDown(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/dsolve/umfpack/tests/try_umfpack.py----------------------------------------
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.(nRow, nCol)->map(int, fd.readline().split())
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.nItem->int(fd.readline())
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.ij->numpy.zeros((nItem, 2), np.int32)
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.val->numpy.zeros((nItem,), np.float64)
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.aux->row.split()
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.val[ii]->float(aux[2])
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.mtx->readMatrix(matrixName, options)
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.(ij, val)->io.read_array(fd, columns=[(0, 1), (2,)], atype=(np.int32, np.float64), rowsize=nItem)
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.(fileName, status)->urllib.urlretrieve(matrixName)
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.fd->open(fileName)
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.parser->OptionParser(usage=usage)
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.(options, args)->OptionParser(usage=usage).parse_args()
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.tts->numpy.zeros((2,), dtype=np.double)
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.err->numpy.zeros((2, 2), dtype=np.double)
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.sol0->numpy.ones((mtx.shape[0],), dtype=np.double)
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.umfpack->scipy.sparse.linalg.dsolve.umfpack.UmfpackContext()
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.tt->time.clock()
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.sol->scipy.sparse.solve(mtx, rhs)
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.err[0, 0]->scipy.linalg.norm(error)
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.err[0, 1]->scipy.linalg.norm(error)
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.err[1, 0]->scipy.linalg.norm(error)
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.err[1, 1]->scipy.linalg.norm(error)
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.times->numpy.array(times)
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.ax->pylab.axis()
A:scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.xrng->list(range(len(nnzs)))
scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.main()
scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.readMatrix(matrixName,options)
scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.read_triplet(fd)
scipy.sparse.linalg.dsolve.umfpack.tests.try_umfpack.read_triplet2(fd)
scipy.sparse.linalg.tests.try_main()
scipy.sparse.linalg.tests.try_readMatrix(matrixName,options)
scipy.sparse.linalg.tests.try_read_triplet(fd)
scipy.sparse.linalg.tests.try_read_triplet2(fd)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/dsolve/tests/test_linsolve.py----------------------------------------
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.A->csc_matrix((5, 5), dtype='d')
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.b->ones(n)
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.x->splu(a_).solve(b)
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.Asp->csc_matrix((5, 5), dtype='d').astype(t).asformat(format)
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.Adense->matrix([[0.0, 1.0, 1.0], [1.0, 0.0, 1.0], [0.0, 0.0, 1.0]])
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.As->csc_matrix(Adense)
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.x2->spsolve(As, Bs)
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.Bdense->csc_matrix(Adense).dot(x)
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.Bs->csc_matrix(Bdense)
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.A2->csc_matrix(eye(3))
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.b2->array([1.0, 2.0])
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.row->array([0, 0, 1, 1, 0, 0])
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.col->array([0, 2, 1, 1, 0, 0])
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.data->array([1, 1, 1, 1, 1, 1])
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.sM->csr_matrix((data, (row, col)), shape=(3, 3), dtype=float)
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.M->csr_matrix((data, (row, col)), shape=(3, 3), dtype=float).todense()
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.sN->csr_matrix((data, (row, col)), shape=(3, 3), dtype=float)
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.N->csr_matrix((data, (row, col)), shape=(3, 3), dtype=float).todense()
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.sX->spsolve(sM, sN)
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.X->scipy.linalg.solve(M, N)
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.self.A->spdiags((d, 2 * d, d[::-1]), (-3, 0, 5), n, n)
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.lu->splu(a_)
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.a->numpy.random.random((n, n))
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.a_->csc_matrix(a)
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.rc->sys.getrefcount(lu)
A:scipy.sparse.linalg.dsolve.tests.test_linsolve.perm->getattr(lu, attr)
scipy.sparse.linalg.dsolve.tests.test_linsolve.TestLinsolve(TestCase)
scipy.sparse.linalg.dsolve.tests.test_linsolve.TestLinsolve.test_bmatrix_smoketest(self)
scipy.sparse.linalg.dsolve.tests.test_linsolve.TestLinsolve.test_bvector_smoketest(self)
scipy.sparse.linalg.dsolve.tests.test_linsolve.TestLinsolve.test_example_comparison(self)
scipy.sparse.linalg.dsolve.tests.test_linsolve.TestLinsolve.test_non_square(self)
scipy.sparse.linalg.dsolve.tests.test_linsolve.TestLinsolve.test_singular(self)
scipy.sparse.linalg.dsolve.tests.test_linsolve.TestLinsolve.test_twodiags(self)
scipy.sparse.linalg.dsolve.tests.test_linsolve.TestSplu(object)
scipy.sparse.linalg.dsolve.tests.test_linsolve.TestSplu.setUp(self)
scipy.sparse.linalg.dsolve.tests.test_linsolve.TestSplu.test_lu_refcount(self)
scipy.sparse.linalg.dsolve.tests.test_linsolve.TestSplu.test_spilu_nnz0(self)
scipy.sparse.linalg.dsolve.tests.test_linsolve.TestSplu.test_spilu_smoketest(self)
scipy.sparse.linalg.dsolve.tests.test_linsolve.TestSplu.test_splu_basic(self)
scipy.sparse.linalg.dsolve.tests.test_linsolve.TestSplu.test_splu_nnz0(self)
scipy.sparse.linalg.dsolve.tests.test_linsolve.TestSplu.test_splu_perm(self)
scipy.sparse.linalg.dsolve.tests.test_linsolve.TestSplu.test_splu_smoketest(self)
scipy.sparse.linalg.tests.test_TestLinsolve(TestCase)
scipy.sparse.linalg.tests.test_TestLinsolve.test_bmatrix_smoketest(self)
scipy.sparse.linalg.tests.test_TestLinsolve.test_bvector_smoketest(self)
scipy.sparse.linalg.tests.test_TestLinsolve.test_example_comparison(self)
scipy.sparse.linalg.tests.test_TestLinsolve.test_non_square(self)
scipy.sparse.linalg.tests.test_TestLinsolve.test_singular(self)
scipy.sparse.linalg.tests.test_TestLinsolve.test_twodiags(self)
scipy.sparse.linalg.tests.test_TestSplu(object)
scipy.sparse.linalg.tests.test_TestSplu.setUp(self)
scipy.sparse.linalg.tests.test_TestSplu.test_lu_refcount(self)
scipy.sparse.linalg.tests.test_TestSplu.test_spilu_nnz0(self)
scipy.sparse.linalg.tests.test_TestSplu.test_spilu_smoketest(self)
scipy.sparse.linalg.tests.test_TestSplu.test_splu_basic(self)
scipy.sparse.linalg.tests.test_TestSplu.test_splu_nnz0(self)
scipy.sparse.linalg.tests.test_TestSplu.test_splu_perm(self)
scipy.sparse.linalg.tests.test_TestSplu.test_splu_smoketest(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/isolve/lgmres.py----------------------------------------
A:scipy.sparse.linalg.isolve.lgmres.q->numpy.dot(hess, y)
A:scipy.sparse.linalg.isolve.lgmres.nrm2->get_blas_funcs('nrm2', dtype=q.dtype)
A:scipy.sparse.linalg.isolve.lgmres.(A, M, x, b, postprocess)->make_system(A, M, x0, b)
A:scipy.sparse.linalg.isolve.lgmres.b_norm->norm2(b)
A:scipy.sparse.linalg.isolve.lgmres.x->x.astype(r_outer.dtype).astype(r_outer.dtype)
A:scipy.sparse.linalg.isolve.lgmres.(axpy, dot, scal)->get_blas_funcs(['axpy', 'dot', 'scal'], (x, r_outer))
A:scipy.sparse.linalg.isolve.lgmres.r_norm->norm2(r_outer)
A:scipy.sparse.linalg.isolve.lgmres.inner_res_0->norm2(vs0)
A:scipy.sparse.linalg.isolve.lgmres.rnorm->norm2(r_outer)
A:scipy.sparse.linalg.isolve.lgmres.vs0->scal(1.0 / inner_res_0, vs0)
A:scipy.sparse.linalg.isolve.lgmres.v_new->scal(1.0 / hcur[-1], v_new)
A:scipy.sparse.linalg.isolve.lgmres.alpha->dot(v, v_new)
A:scipy.sparse.linalg.isolve.lgmres.hess->numpy.zeros((j + 1, j), x.dtype)
A:scipy.sparse.linalg.isolve.lgmres.e1->numpy.zeros((j + 1,), x.dtype)
A:scipy.sparse.linalg.isolve.lgmres.(y, resids, rank, s)->lstsq(hess, e1)
A:scipy.sparse.linalg.isolve.lgmres.inner_res->norm2(np.dot(hess, y) - e1)
A:scipy.sparse.linalg.isolve.lgmres.dx->axpy(w, dx, dx.shape[0], yc)
A:scipy.sparse.linalg.isolve.lgmres.nx->norm2(dx)
A:scipy.sparse.linalg.isolve.lgmres.ax->axpy(v, ax, ax.shape[0], qc)
scipy.sparse.linalg.isolve.lgmres.lgmres(A,b,x0=None,tol=1e-05,maxiter=1000,M=None,callback=None,inner_m=30,outer_k=3,outer_v=None,store_outer_Av=True)
scipy.sparse.linalg.isolve.lgmres.norm2(q)
scipy.sparse.linalg.lgmres(A,b,x0=None,tol=1e-05,maxiter=1000,M=None,callback=None,inner_m=30,outer_k=3,outer_v=None,store_outer_Av=True)
scipy.sparse.linalg.lgmres.norm2(q)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/isolve/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/isolve/iterative.py----------------------------------------
A:scipy.sparse.linalg.isolve.iterative.fn.__doc__->'\n'.join((header, common_doc1, '    ' + Ainfo.replace('\n', '\n    '), common_doc2, footer))
A:scipy.sparse.linalg.isolve.iterative.(A, M, x, b, postprocess)->make_system(A, None, x0, b, xtype)
A:scipy.sparse.linalg.isolve.iterative.n->len(b)
A:scipy.sparse.linalg.isolve.iterative.revcom->getattr(_iterative, ltr + 'qmrrevcom')
A:scipy.sparse.linalg.isolve.iterative.stoptest->getattr(_iterative, ltr + 'stoptest2')
A:scipy.sparse.linalg.isolve.iterative.work->numpy.zeros(11 * n, x.dtype)
A:scipy.sparse.linalg.isolve.iterative.(x, iter_, resid, info, ndx1, ndx2, sclr1, sclr2, ijob)->revcom(b, x, work, iter_, resid, info, ndx1, ndx2, ijob)
A:scipy.sparse.linalg.isolve.iterative.slice1->slice(ndx1 - 1, ndx1 - 1 + n)
A:scipy.sparse.linalg.isolve.iterative.slice2->slice(ndx2 - 1, ndx2 - 1 + n)
A:scipy.sparse.linalg.isolve.iterative.work[slice1]->LinearOperator(A.shape, matvec=id, rmatvec=id).rmatvec(work[slice2])
A:scipy.sparse.linalg.isolve.iterative.(bnrm2, resid, info)->stoptest(work[slice1], b, bnrm2, tol, info)
A:scipy.sparse.linalg.isolve.iterative.psolve->get_psolve(A)
A:scipy.sparse.linalg.isolve.iterative.restrt->min(restrt, n)
A:scipy.sparse.linalg.isolve.iterative.work2->numpy.zeros((restrt + 1) * (2 * restrt + 2), dtype=x.dtype)
A:scipy.sparse.linalg.isolve.iterative.M1->LinearOperator(A.shape, matvec=id, rmatvec=id)
A:scipy.sparse.linalg.isolve.iterative.M2->LinearOperator(A.shape, matvec=id, rmatvec=id)
scipy.sparse.linalg.bicg(A,b,x0=None,tol=1e-05,maxiter=None,xtype=None,M=None,callback=None)
scipy.sparse.linalg.bicgstab(A,b,x0=None,tol=1e-05,maxiter=None,xtype=None,M=None,callback=None)
scipy.sparse.linalg.cg(A,b,x0=None,tol=1e-05,maxiter=None,xtype=None,M=None,callback=None)
scipy.sparse.linalg.cgs(A,b,x0=None,tol=1e-05,maxiter=None,xtype=None,M=None,callback=None)
scipy.sparse.linalg.gmres(A,b,x0=None,tol=1e-05,restart=None,maxiter=None,xtype=None,M=None,callback=None,restrt=None)
scipy.sparse.linalg.isolve.iterative.bicg(A,b,x0=None,tol=1e-05,maxiter=None,xtype=None,M=None,callback=None)
scipy.sparse.linalg.isolve.iterative.bicgstab(A,b,x0=None,tol=1e-05,maxiter=None,xtype=None,M=None,callback=None)
scipy.sparse.linalg.isolve.iterative.cg(A,b,x0=None,tol=1e-05,maxiter=None,xtype=None,M=None,callback=None)
scipy.sparse.linalg.isolve.iterative.cgs(A,b,x0=None,tol=1e-05,maxiter=None,xtype=None,M=None,callback=None)
scipy.sparse.linalg.isolve.iterative.gmres(A,b,x0=None,tol=1e-05,restart=None,maxiter=None,xtype=None,M=None,callback=None,restrt=None)
scipy.sparse.linalg.isolve.iterative.non_reentrant(func,*a,**kw)
scipy.sparse.linalg.isolve.iterative.qmr(A,b,x0=None,tol=1e-05,maxiter=None,xtype=None,M1=None,M2=None,callback=None)
scipy.sparse.linalg.isolve.iterative.set_docstring(header,Ainfo,footer='')
scipy.sparse.linalg.non_reentrant(func,*a,**kw)
scipy.sparse.linalg.qmr(A,b,x0=None,tol=1e-05,maxiter=None,xtype=None,M1=None,M2=None,callback=None)
scipy.sparse.linalg.set_docstring(header,Ainfo,footer='')


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/isolve/minres.py----------------------------------------
A:scipy.sparse.linalg.isolve.minres.(A, M, x, b, postprocess)->make_system(A, M, x0, b, xtype)
A:scipy.sparse.linalg.isolve.minres.x->minres(A, b, tol=1e-12, maxiter=None, callback=cb)
A:scipy.sparse.linalg.isolve.minres.y->psolve(r2)
A:scipy.sparse.linalg.isolve.minres.beta1->sqrt(beta1)
A:scipy.sparse.linalg.isolve.minres.w->zeros(n, dtype=xtype)
A:scipy.sparse.linalg.isolve.minres.r2->psolve(y)
A:scipy.sparse.linalg.isolve.minres.s->inner(y, y)
A:scipy.sparse.linalg.isolve.minres.t->inner(r1, r2)
A:scipy.sparse.linalg.isolve.minres.z->abs(s - t)
A:scipy.sparse.linalg.isolve.minres.w2->zeros(n, dtype=xtype)
A:scipy.sparse.linalg.isolve.minres.alfa->inner(v, y)
A:scipy.sparse.linalg.isolve.minres.beta->sqrt(beta)
A:scipy.sparse.linalg.isolve.minres.gmax->max(gmax, gamma)
A:scipy.sparse.linalg.isolve.minres.root->norm([gbar, dbar])
A:scipy.sparse.linalg.isolve.minres.gamma->max(gamma, eps)
A:scipy.sparse.linalg.isolve.minres.gmin->min(gmin, gamma)
A:scipy.sparse.linalg.isolve.minres.Anorm->sqrt(tnorm2)
A:scipy.sparse.linalg.isolve.minres.ynorm->sqrt(ynorm2)
A:scipy.sparse.linalg.isolve.minres.A->spdiags([arange(1, n + 1, dtype=float)], [0], n, n, format='csr')
A:scipy.sparse.linalg.isolve.minres.M->spdiags([1.0 / arange(1, n + 1, dtype=float)], [0], n, n, format='csr')
scipy.sparse.linalg.isolve.minres.minres(A,b,x0=None,shift=0.0,tol=1e-05,maxiter=None,xtype=None,M=None,callback=None,show=False,check=False)
scipy.sparse.linalg.minres(A,b,x0=None,shift=0.0,tol=1e-05,maxiter=None,xtype=None,M=None,callback=None,show=False,check=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/isolve/utils.py----------------------------------------
A:scipy.sparse.linalg.isolve.utils.A->aslinearoperator(A)
A:scipy.sparse.linalg.isolve.utils.b->b.ravel().ravel()
A:scipy.sparse.linalg.isolve.utils.x->x.ravel().ravel()
A:scipy.sparse.linalg.isolve.utils.xtype->coerce(xtype, b.dtype.char)
A:scipy.sparse.linalg.isolve.utils.M->aslinearoperator(M)
scipy.sparse.linalg.isolve.utils.coerce(x,y)
scipy.sparse.linalg.isolve.utils.id(x)
scipy.sparse.linalg.isolve.utils.make_system(A,M,x0,b,xtype=None)
scipy.sparse.linalg.utils.coerce(x,y)
scipy.sparse.linalg.utils.id(x)
scipy.sparse.linalg.utils.make_system(A,M,x0,b,xtype=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/isolve/setupscons.py----------------------------------------
A:scipy.sparse.linalg.isolve.setupscons.config->Configuration('isolve', parent_package, top_path)
scipy.sparse.linalg.isolve.setupscons.configuration(parent_package='',top_path=None)
scipy.sparse.linalg.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/isolve/lsmr.py----------------------------------------
A:scipy.sparse.linalg.isolve.lsmr.A->aslinearoperator(A)
A:scipy.sparse.linalg.isolve.lsmr.b->b.squeeze().squeeze()
A:scipy.sparse.linalg.isolve.lsmr.minDim->min([m, n])
A:scipy.sparse.linalg.isolve.lsmr.beta->norm(u)
A:scipy.sparse.linalg.isolve.lsmr.v->aslinearoperator(A).rmatvec(u)
A:scipy.sparse.linalg.isolve.lsmr.alpha->norm(v)
A:scipy.sparse.linalg.isolve.lsmr.h->aslinearoperator(A).rmatvec(u).copy()
A:scipy.sparse.linalg.isolve.lsmr.hbar->zeros(n)
A:scipy.sparse.linalg.isolve.lsmr.x->zeros(n)
A:scipy.sparse.linalg.isolve.lsmr.normA->sqrt(normA2)
A:scipy.sparse.linalg.isolve.lsmr.(chat, shat, alphahat)->_sym_ortho(alphabar, damp)
A:scipy.sparse.linalg.isolve.lsmr.(c, s, rho)->_sym_ortho(alphahat, beta)
A:scipy.sparse.linalg.isolve.lsmr.(cbar, sbar, rhobar)->_sym_ortho(cbar * rho, thetanew)
A:scipy.sparse.linalg.isolve.lsmr.(ctildeold, stildeold, rhotildeold)->_sym_ortho(rhodold, thetabar)
A:scipy.sparse.linalg.isolve.lsmr.normr->sqrt(d + (betad - taud) ** 2 + betadd * betadd)
A:scipy.sparse.linalg.isolve.lsmr.maxrbar->max(maxrbar, rhobarold)
A:scipy.sparse.linalg.isolve.lsmr.minrbar->min(minrbar, rhobarold)
A:scipy.sparse.linalg.isolve.lsmr.normar->abs(zetabar)
A:scipy.sparse.linalg.isolve.lsmr.normx->norm(x)
scipy.sparse.linalg.isolve.lsmr.lsmr(A,b,damp=0.0,atol=1e-06,btol=1e-06,conlim=100000000.0,maxiter=None,show=False)
scipy.sparse.linalg.lsmr(A,b,damp=0.0,atol=1e-06,btol=1e-06,conlim=100000000.0,maxiter=None,show=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/isolve/setup.py----------------------------------------
A:scipy.sparse.linalg.isolve.setup.config->Configuration('isolve', parent_package, top_path)
A:scipy.sparse.linalg.isolve.setup.lapack_opt->get_info('lapack_opt')
scipy.sparse.linalg.isolve.setup.configuration(parent_package='',top_path=None)
scipy.sparse.linalg.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/isolve/lsqr.py----------------------------------------
A:scipy.sparse.linalg.isolve.lsqr.A->aslinearoperator(A)
A:scipy.sparse.linalg.isolve.lsqr.b->b.squeeze().squeeze()
A:scipy.sparse.linalg.isolve.lsqr.var->numpy.zeros(n)
A:scipy.sparse.linalg.isolve.lsqr.__xm->numpy.zeros(m)
A:scipy.sparse.linalg.isolve.lsqr.__xn->numpy.zeros(n)
A:scipy.sparse.linalg.isolve.lsqr.v->aslinearoperator(A).rmatvec(u)
A:scipy.sparse.linalg.isolve.lsqr.x->numpy.zeros(n)
A:scipy.sparse.linalg.isolve.lsqr.beta->numpy.linalg.norm(u)
A:scipy.sparse.linalg.isolve.lsqr.w->aslinearoperator(A).rmatvec(u).copy()
A:scipy.sparse.linalg.isolve.lsqr.alfa->numpy.linalg.norm(v)
A:scipy.sparse.linalg.isolve.lsqr.anorm->sqrt(anorm ** 2 + alfa ** 2 + beta ** 2 + damp ** 2)
A:scipy.sparse.linalg.isolve.lsqr.rhobar1->sqrt(rhobar ** 2 + damp ** 2)
A:scipy.sparse.linalg.isolve.lsqr.(cs, sn, rho)->_sym_ortho(rhobar1, beta)
A:scipy.sparse.linalg.isolve.lsqr.xnorm->sqrt(xxnorm + zbar ** 2)
A:scipy.sparse.linalg.isolve.lsqr.gamma->sqrt(gambar ** 2 + theta ** 2)
A:scipy.sparse.linalg.isolve.lsqr.rnorm->sqrt(res1 + res2)
A:scipy.sparse.linalg.isolve.lsqr.r1norm->sqrt(abs(r1sq))
scipy.sparse.linalg.isolve.lsqr._sym_ortho(a,b)
scipy.sparse.linalg.isolve.lsqr.lsqr(A,b,damp=0.0,atol=1e-08,btol=1e-08,conlim=100000000.0,iter_lim=None,show=False,calc_var=False)
scipy.sparse.linalg.lsqr(A,b,damp=0.0,atol=1e-08,btol=1e-08,conlim=100000000.0,iter_lim=None,show=False,calc_var=False)
scipy.sparse.linalg.lsqr._sym_ortho(a,b)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/isolve/tests/test_lgmres.py----------------------------------------
A:scipy.sparse.linalg.isolve.tests.test_lgmres.Am->csr_matrix(array([[-2, 1, 0, 0, 0, 9], [1, -2, 1, 0, 5, 0], [0, 1, -2, 1, 0, 0], [0, 0, 1, -2, 1, 0], [0, 3, 0, 1, -2, 1], [1, 0, 0, 0, 1, -2]]))
A:scipy.sparse.linalg.isolve.tests.test_lgmres.b->array([1, 2, 3, 4, 5, 6])
A:scipy.sparse.linalg.isolve.tests.test_lgmres.A->LinearOperator(matvec=matvec, shape=Am.shape, dtype=Am.dtype)
A:scipy.sparse.linalg.isolve.tests.test_lgmres.(x0, flag)->lgmres(A, b, x0=zeros(A.shape[0]), inner_m=6, tol=1e-14, **kw)
A:scipy.sparse.linalg.isolve.tests.test_lgmres.pc->splu(Am.tocsc())
A:scipy.sparse.linalg.isolve.tests.test_lgmres.M->LinearOperator(matvec=pc.solve, shape=A.shape, dtype=A.dtype)
A:scipy.sparse.linalg.isolve.tests.test_lgmres.(x0, count_0)->do_solve(outer_k=6, outer_v=outer_v, store_outer_Av=False)
A:scipy.sparse.linalg.isolve.tests.test_lgmres.(x1, count_1)->do_solve(outer_k=6, outer_v=outer_v)
scipy.sparse.linalg.isolve.tests.test_lgmres.TestLGMRES(TestCase)
scipy.sparse.linalg.isolve.tests.test_lgmres.TestLGMRES.test_outer_v(self)
scipy.sparse.linalg.isolve.tests.test_lgmres.TestLGMRES.test_preconditioner(self)
scipy.sparse.linalg.isolve.tests.test_lgmres.do_solve(**kw)
scipy.sparse.linalg.isolve.tests.test_lgmres.matvec(v)
scipy.sparse.linalg.tests.test_lgmres.TestLGMRES(TestCase)
scipy.sparse.linalg.tests.test_lgmres.TestLGMRES.test_outer_v(self)
scipy.sparse.linalg.tests.test_lgmres.TestLGMRES.test_preconditioner(self)
scipy.sparse.linalg.tests.test_lgmres.do_solve(**kw)
scipy.sparse.linalg.tests.test_lgmres.matvec(v)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/isolve/tests/test_lsmr.py----------------------------------------
A:scipy.sparse.linalg.isolve.tests.test_lsmr.Afun->aslinearoperator(A)
A:scipy.sparse.linalg.isolve.tests.test_lsmr.b->aslinearoperator(A).matvec(xtrue)
A:scipy.sparse.linalg.isolve.tests.test_lsmr.A->lowerBidiagonalMatrix(m, n)
A:scipy.sparse.linalg.isolve.tests.test_lsmr.xtrue->arange(n, 0, -1, dtype=float)
A:scipy.sparse.linalg.isolve.tests.test_lsmr.self.A->lowerBidiagonalMatrix(20, self.n)
A:scipy.sparse.linalg.isolve.tests.test_lsmr.self.xtrue->transpose(arange(self.n, 0, -1))
A:scipy.sparse.linalg.isolve.tests.test_lsmr.self.Afun->aslinearoperator(self.A)
A:scipy.sparse.linalg.isolve.tests.test_lsmr.self.b->self.Afun.matvec(self.xtrue)
A:scipy.sparse.linalg.isolve.tests.test_lsmr.self.returnValues->lsmr(self.A, self.b)
A:scipy.sparse.linalg.isolve.tests.test_lsmr.row->hstack((arange(n, dtype=int), arange(1, n + 1, dtype=int)))
A:scipy.sparse.linalg.isolve.tests.test_lsmr.col->hstack((arange(n, dtype=int), arange(n, dtype=int)))
A:scipy.sparse.linalg.isolve.tests.test_lsmr.data->hstack((arange(1, n + 1, dtype=float), arange(1, n + 1, dtype=float)))
A:scipy.sparse.linalg.isolve.tests.test_lsmr.(x, istop, itn, normr, normar, norma, conda, normx)->lsmr(A, b, damp, atol, btol, conlim, itnlim, show)
A:scipy.sparse.linalg.isolve.tests.test_lsmr.j1->min(n, 5)
A:scipy.sparse.linalg.isolve.tests.test_lsmr.j2->max(n - 4, 1)
A:scipy.sparse.linalg.isolve.tests.test_lsmr.r2->sqrt(norm(r) ** 2 + (damp * norm(x)) ** 2)
scipy.sparse.linalg.isolve.tests.test_lsmr.TestLSMR
scipy.sparse.linalg.isolve.tests.test_lsmr.TestLSMR.assertCompatibleSystem(self,A,xtrue)
scipy.sparse.linalg.isolve.tests.test_lsmr.TestLSMR.setUp(self)
scipy.sparse.linalg.isolve.tests.test_lsmr.TestLSMR.testBidiagonalA(self)
scipy.sparse.linalg.isolve.tests.test_lsmr.TestLSMR.testIdentityACase1(self)
scipy.sparse.linalg.isolve.tests.test_lsmr.TestLSMR.testIdentityACase2(self)
scipy.sparse.linalg.isolve.tests.test_lsmr.TestLSMR.testIdentityACase3(self)
scipy.sparse.linalg.isolve.tests.test_lsmr.TestLSMRReturns
scipy.sparse.linalg.isolve.tests.test_lsmr.TestLSMRReturns.setUp(self)
scipy.sparse.linalg.isolve.tests.test_lsmr.TestLSMRReturns.testNormar(self)
scipy.sparse.linalg.isolve.tests.test_lsmr.TestLSMRReturns.testNormr(self)
scipy.sparse.linalg.isolve.tests.test_lsmr.TestLSMRReturns.testNormx(self)
scipy.sparse.linalg.isolve.tests.test_lsmr.lowerBidiagonalMatrix(m,n)
scipy.sparse.linalg.isolve.tests.test_lsmr.lsmrtest(m,n,damp)
scipy.sparse.linalg.tests.test_lsmr.TestLSMR
scipy.sparse.linalg.tests.test_lsmr.TestLSMR.assertCompatibleSystem(self,A,xtrue)
scipy.sparse.linalg.tests.test_lsmr.TestLSMR.setUp(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMR.testBidiagonalA(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMR.testIdentityACase1(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMR.testIdentityACase2(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMR.testIdentityACase3(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMRReturns
scipy.sparse.linalg.tests.test_lsmr.TestLSMRReturns.setUp(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMRReturns.testNormar(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMRReturns.testNormr(self)
scipy.sparse.linalg.tests.test_lsmr.TestLSMRReturns.testNormx(self)
scipy.sparse.linalg.tests.test_lsmr.lowerBidiagonalMatrix(m,n)
scipy.sparse.linalg.tests.test_lsmrtest(m,n,damp)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/isolve/tests/test_lsqr.py----------------------------------------
A:scipy.sparse.linalg.isolve.tests.test_lsqr.G->numpy.eye(n)
A:scipy.sparse.linalg.isolve.tests.test_lsqr.gg->normal(size=n)
A:scipy.sparse.linalg.isolve.tests.test_lsqr.b->normal(size=n)
A:scipy.sparse.linalg.isolve.tests.test_lsqr.svx->numpy.linalg.solve(G, b)
A:scipy.sparse.linalg.isolve.tests.test_lsqr.X->lsqr(G, b, show=show, atol=tol, btol=tol, iter_lim=maxit)
A:scipy.sparse.linalg.isolve.tests.test_lsqr.tic->time()
A:scipy.sparse.linalg.isolve.tests.test_lsqr.mg->numpy.amax(G - G.T)
scipy.sparse.linalg.isolve.tests.test_lsqr.test_basic()
scipy.sparse.linalg.tests.test_lsqr.test_basic()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/isolve/tests/test_utils.py----------------------------------------
scipy.sparse.linalg.isolve.tests.test_utils.test_make_system_bad_shape()
scipy.sparse.linalg.tests.test_utils.test_make_system_bad_shape()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/isolve/tests/test_iterative.py----------------------------------------
A:scipy.sparse.linalg.isolve.tests.test_iterative.data->ones((2, 10))
A:scipy.sparse.linalg.isolve.tests.test_iterative.Poisson1D->spdiags(data, [0, -1, 1], N, N, format='csr')
A:scipy.sparse.linalg.isolve.tests.test_iterative.self.Poisson1D->Case('poisson1d', Poisson1D)
A:scipy.sparse.linalg.isolve.tests.test_iterative.RandDiag->spdiags(data, [0], 10, 10, format='csr')
A:scipy.sparse.linalg.isolve.tests.test_iterative.A->eye(2)
A:scipy.sparse.linalg.isolve.tests.test_iterative.params->IterativeParams()
A:scipy.sparse.linalg.isolve.tests.test_iterative.b->ones(2)
A:scipy.sparse.linalg.isolve.tests.test_iterative.(x, info)->gmres(A.astype(complex), b.astype(complex))
A:scipy.sparse.linalg.isolve.tests.test_iterative.residual->norm(a - b)
A:scipy.sparse.linalg.isolve.tests.test_iterative.D->spdiags([1.0 / A.diagonal()], [0], M, N)
A:scipy.sparse.linalg.isolve.tests.test_iterative.precond->LinearOperator(A.shape, identity, rmatvec=identity)
A:scipy.sparse.linalg.isolve.tests.test_iterative.x->numpy.linalg.solve(A, b)
A:scipy.sparse.linalg.isolve.tests.test_iterative.(x_gm, err)->gmres(A, b, restart=5, maxiter=1)
A:scipy.sparse.linalg.isolve.tests.test_iterative.(y, info)->solver(op, b)
A:scipy.sparse.linalg.isolve.tests.test_iterative.op->LinearOperator((3, 3), matvec=matvec, rmatvec=matvec, dtype=b.dtype)
A:scipy.sparse.linalg.isolve.tests.test_iterative.dat->ones(n)
A:scipy.sparse.linalg.isolve.tests.test_iterative.L->spdiags([-dat / 2, dat], [-1, 0], n, n)
A:scipy.sparse.linalg.isolve.tests.test_iterative.U->spdiags([4 * dat, -dat], [0, 1], n, n)
A:scipy.sparse.linalg.isolve.tests.test_iterative.L_solver->splu(L)
A:scipy.sparse.linalg.isolve.tests.test_iterative.U_solver->splu(U)
A:scipy.sparse.linalg.isolve.tests.test_iterative.M1->LinearOperator((n, n), matvec=L_solve, rmatvec=LT_solve)
A:scipy.sparse.linalg.isolve.tests.test_iterative.M2->LinearOperator((n, n), matvec=U_solve, rmatvec=UT_solve)
A:scipy.sparse.linalg.isolve.tests.test_iterative.rvec->zeros(maxiter + 1)
A:scipy.sparse.linalg.isolve.tests.test_iterative.(x, flag)->gmres(A, b, x0=zeros(A.shape[0]), tol=1e-16, maxiter=maxiter, callback=callback)
A:scipy.sparse.linalg.isolve.tests.test_iterative.diff->max(abs(rvec - array([1.0, 0.816496580927726])))
A:scipy.sparse.linalg.isolve.tests.test_iterative.(r_x, r_info)->gmres(A, b)
A:scipy.sparse.linalg.isolve.tests.test_iterative.r_x->r_x.astype(complex).astype(complex)
scipy.sparse.linalg.isolve.tests.test_iterative.Case(self,name,A,skip=None)
scipy.sparse.linalg.isolve.tests.test_iterative.Case.__init__(self,name,A,skip=None)
scipy.sparse.linalg.isolve.tests.test_iterative.Case.__repr__(self)
scipy.sparse.linalg.isolve.tests.test_iterative.IterativeParams(self)
scipy.sparse.linalg.isolve.tests.test_iterative.IterativeParams.__init__(self)
scipy.sparse.linalg.isolve.tests.test_iterative.TestGMRES(TestCase)
scipy.sparse.linalg.isolve.tests.test_iterative.TestGMRES.test_abi(self)
scipy.sparse.linalg.isolve.tests.test_iterative.TestGMRES.test_callback(self)
scipy.sparse.linalg.isolve.tests.test_iterative.TestQMR(TestCase)
scipy.sparse.linalg.isolve.tests.test_iterative.TestQMR.test_leftright_precond(self)
scipy.sparse.linalg.isolve.tests.test_iterative._check_reentrancy(solver,is_reentrant)
scipy.sparse.linalg.isolve.tests.test_iterative.assert_normclose(a,b,tol=1e-08)
scipy.sparse.linalg.isolve.tests.test_iterative.check_convergence(solver,case)
scipy.sparse.linalg.isolve.tests.test_iterative.check_maxiter(solver,case)
scipy.sparse.linalg.isolve.tests.test_iterative.check_precond_dummy(solver,case)
scipy.sparse.linalg.isolve.tests.test_iterative.setup_module()
scipy.sparse.linalg.isolve.tests.test_iterative.test_convergence()
scipy.sparse.linalg.isolve.tests.test_iterative.test_gmres_basic()
scipy.sparse.linalg.isolve.tests.test_iterative.test_maxiter()
scipy.sparse.linalg.isolve.tests.test_iterative.test_precond_dummy()
scipy.sparse.linalg.isolve.tests.test_iterative.test_reentrancy()
scipy.sparse.linalg.tests.test_Case(self,name,A,skip=None)
scipy.sparse.linalg.tests.test_Case.__repr__(self)
scipy.sparse.linalg.tests.test_IterativeParams(self)
scipy.sparse.linalg.tests.test_TestGMRES(TestCase)
scipy.sparse.linalg.tests.test_TestGMRES.test_abi(self)
scipy.sparse.linalg.tests.test_TestGMRES.test_callback(self)
scipy.sparse.linalg.tests.test_TestQMR(TestCase)
scipy.sparse.linalg.tests.test_TestQMR.test_leftright_precond(self)
scipy.sparse.linalg.tests.test__check_reentrancy(solver,is_reentrant)
scipy.sparse.linalg.tests.test_assert_normclose(a,b,tol=1e-08)
scipy.sparse.linalg.tests.test_check_convergence(solver,case)
scipy.sparse.linalg.tests.test_check_maxiter(solver,case)
scipy.sparse.linalg.tests.test_check_precond_dummy(solver,case)
scipy.sparse.linalg.tests.test_setup_module()
scipy.sparse.linalg.tests.test_test_convergence()
scipy.sparse.linalg.tests.test_test_gmres_basic()
scipy.sparse.linalg.tests.test_test_maxiter()
scipy.sparse.linalg.tests.test_test_precond_dummy()
scipy.sparse.linalg.tests.test_test_reentrancy()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/linalg/isolve/tests/demo_lgmres.py----------------------------------------
A:scipy.sparse.linalg.isolve.tests.demo_lgmres.mm->numpy.lib._datasource.Repository('ftp://math.nist.gov/pub/MatrixMarket2/')
A:scipy.sparse.linalg.isolve.tests.demo_lgmres.f->numpy.lib._datasource.Repository('ftp://math.nist.gov/pub/MatrixMarket2/').open('%s_rhs1.mtx.gz' % problem)
A:scipy.sparse.linalg.isolve.tests.demo_lgmres.Am->scipy.io.mmread(f).tocsr()
A:scipy.sparse.linalg.isolve.tests.demo_lgmres.b->numpy.array(io.mmread(f)).ravel()
A:scipy.sparse.linalg.isolve.tests.demo_lgmres.A->scipy.sparse.linalg.LinearOperator(matvec=matvec, shape=Am.shape, dtype=Am.dtype)
A:scipy.sparse.linalg.isolve.tests.demo_lgmres.(x0, info)->scipy.sparse.linalg.gmres(A, b, restrt=M, tol=1e-14)
A:scipy.sparse.linalg.isolve.tests.demo_lgmres.(x1, info)->scipy.sparse.linalg.lgmres(A, b, inner_m=M - 6 * 2, outer_k=6, tol=1e-14)
A:scipy.sparse.linalg.isolve.tests.demo_lgmres.(x2, info)->scipy.sparse.linalg.lgmres(A, b, inner_m=M - 6, outer_k=6, tol=1e-14)
scipy.sparse.linalg.isolve.tests.demo_lgmres.matvec(v)
scipy.sparse.linalg.tests.demo_lgmres.matvec(v)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/benchmarks/bench_sparse.py----------------------------------------
A:scipy.sparse.benchmarks.bench_sparse.rows->numpy.arange(m).repeat(nnz_per_row)
A:scipy.sparse.benchmarks.bench_sparse.cols->numpy.random.random_integers(low=0, high=n - 1, size=nnz_per_row * m)
A:scipy.sparse.benchmarks.bench_sparse.vals->numpy.random.random_sample(m * nnz_per_row)
A:scipy.sparse.benchmarks.bench_sparse.diags->empty((5, N ** 2), dtype=dtype)
A:scipy.sparse.benchmarks.bench_sparse.offsets->array([0, -N, N, -1, 1])
A:scipy.sparse.benchmarks.bench_sparse.name->name.center(12).center(12)
A:scipy.sparse.benchmarks.bench_sparse.shape->('%s' % (A.shape,)).center(20)
A:scipy.sparse.benchmarks.bench_sparse.dtype->mat.dtype.name.center(9)
A:scipy.sparse.benchmarks.bench_sparse.vars->dict([(var, mat.asformat(format)) for (var, name, mat) in matrices])
A:scipy.sparse.benchmarks.bench_sparse.fn->getattr(base, 'to' + tofmt)
A:scipy.sparse.benchmarks.bench_sparse.start->time.clock()
A:scipy.sparse.benchmarks.bench_sparse.end->time.clock()
A:scipy.sparse.benchmarks.bench_sparse.operation->(X + '.' + op + '(' + Y + ')').center(17)
A:scipy.sparse.benchmarks.bench_sparse.N->int(N)
A:scipy.sparse.benchmarks.bench_sparse.A->poisson2d(100)
A:scipy.sparse.benchmarks.bench_sparse.x->fn()
A:scipy.sparse.benchmarks.bench_sparse.T->eval(format + '_matrix')(A.shape)
A:scipy.sparse.benchmarks.bench_sparse.base->getattr(A, 'to' + fromfmt)()
scipy.sparse.benchmarks.bench_sparse.BenchmarkSparse(TestCase)
scipy.sparse.benchmarks.bench_sparse.BenchmarkSparse.bench_arithmetic(self)
scipy.sparse.benchmarks.bench_sparse.BenchmarkSparse.bench_construction(self)
scipy.sparse.benchmarks.bench_sparse.BenchmarkSparse.bench_conversion(self)
scipy.sparse.benchmarks.bench_sparse.BenchmarkSparse.bench_matvec(self)
scipy.sparse.benchmarks.bench_sparse.BenchmarkSparse.bench_matvecs(self)
scipy.sparse.benchmarks.bench_sparse.BenchmarkSparse.bench_sort(self)
scipy.sparse.benchmarks.bench_sparse.poisson2d(N,dtype='d',format=None)
scipy.sparse.benchmarks.bench_sparse.random_sparse(m,n,nnz_per_row)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/sparsetools/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/sparsetools/csr.py----------------------------------------
A:scipy.sparse.sparsetools.csr.(fp, pathname, description)->imp.find_module('_csr', [dirname(__file__)])
A:scipy.sparse.sparsetools.csr._mod->imp.load_module('_csr', fp, pathname, description)
A:scipy.sparse.sparsetools.csr._csr->swig_import_helper()
A:scipy.sparse.sparsetools.csr.method->class_type.__swig_getmethods__.get(name, None)
scipy.sparse.sparsetools._swig_getattr(self,class_type,name)
scipy.sparse.sparsetools._swig_repr(self)
scipy.sparse.sparsetools._swig_setattr(self,class_type,name,value)
scipy.sparse.sparsetools._swig_setattr_nondynamic(self,class_type,name,value,static=1)
scipy.sparse.sparsetools.csr._swig_getattr(self,class_type,name)
scipy.sparse.sparsetools.csr._swig_repr(self)
scipy.sparse.sparsetools.csr._swig_setattr(self,class_type,name,value)
scipy.sparse.sparsetools.csr._swig_setattr_nondynamic(self,class_type,name,value,static=1)
scipy.sparse.sparsetools.csr.csr_count_blocks(*args)
scipy.sparse.sparsetools.csr.csr_diagonal(*args)
scipy.sparse.sparsetools.csr.csr_eldiv_csr(*args)
scipy.sparse.sparsetools.csr.csr_eliminate_zeros(*args)
scipy.sparse.sparsetools.csr.csr_elmul_csr(*args)
scipy.sparse.sparsetools.csr.csr_has_sorted_indices(*args)
scipy.sparse.sparsetools.csr.csr_matmat_pass1(*args)
scipy.sparse.sparsetools.csr.csr_matmat_pass2(*args)
scipy.sparse.sparsetools.csr.csr_matvec(*args)
scipy.sparse.sparsetools.csr.csr_matvecs(*args)
scipy.sparse.sparsetools.csr.csr_minus_csr(*args)
scipy.sparse.sparsetools.csr.csr_plus_csr(*args)
scipy.sparse.sparsetools.csr.csr_sample_values(*args)
scipy.sparse.sparsetools.csr.csr_scale_columns(*args)
scipy.sparse.sparsetools.csr.csr_scale_rows(*args)
scipy.sparse.sparsetools.csr.csr_sort_indices(*args)
scipy.sparse.sparsetools.csr.csr_sum_duplicates(*args)
scipy.sparse.sparsetools.csr.csr_tobsr(*args)
scipy.sparse.sparsetools.csr.csr_tocsc(*args)
scipy.sparse.sparsetools.csr.expandptr(*args)
scipy.sparse.sparsetools.csr.get_csr_submatrix(*args)
scipy.sparse.sparsetools.csr_count_blocks(*args)
scipy.sparse.sparsetools.csr_diagonal(*args)
scipy.sparse.sparsetools.csr_eldiv_csr(*args)
scipy.sparse.sparsetools.csr_eliminate_zeros(*args)
scipy.sparse.sparsetools.csr_elmul_csr(*args)
scipy.sparse.sparsetools.csr_has_sorted_indices(*args)
scipy.sparse.sparsetools.csr_matmat_pass1(*args)
scipy.sparse.sparsetools.csr_matmat_pass2(*args)
scipy.sparse.sparsetools.csr_matvec(*args)
scipy.sparse.sparsetools.csr_matvecs(*args)
scipy.sparse.sparsetools.csr_minus_csr(*args)
scipy.sparse.sparsetools.csr_plus_csr(*args)
scipy.sparse.sparsetools.csr_sample_values(*args)
scipy.sparse.sparsetools.csr_scale_columns(*args)
scipy.sparse.sparsetools.csr_scale_rows(*args)
scipy.sparse.sparsetools.csr_sort_indices(*args)
scipy.sparse.sparsetools.csr_sum_duplicates(*args)
scipy.sparse.sparsetools.csr_tobsr(*args)
scipy.sparse.sparsetools.csr_tocsc(*args)
scipy.sparse.sparsetools.expandptr(*args)
scipy.sparse.sparsetools.get_csr_submatrix(*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/sparsetools/csc.py----------------------------------------
A:scipy.sparse.sparsetools.csc.(fp, pathname, description)->imp.find_module('_csc', [dirname(__file__)])
A:scipy.sparse.sparsetools.csc._mod->imp.load_module('_csc', fp, pathname, description)
A:scipy.sparse.sparsetools.csc._csc->swig_import_helper()
A:scipy.sparse.sparsetools.csc.method->class_type.__swig_getmethods__.get(name, None)
scipy.sparse.sparsetools._swig_getattr(self,class_type,name)
scipy.sparse.sparsetools._swig_repr(self)
scipy.sparse.sparsetools._swig_setattr(self,class_type,name,value)
scipy.sparse.sparsetools._swig_setattr_nondynamic(self,class_type,name,value,static=1)
scipy.sparse.sparsetools.csc._swig_getattr(self,class_type,name)
scipy.sparse.sparsetools.csc._swig_repr(self)
scipy.sparse.sparsetools.csc._swig_setattr(self,class_type,name,value)
scipy.sparse.sparsetools.csc._swig_setattr_nondynamic(self,class_type,name,value,static=1)
scipy.sparse.sparsetools.csc.csc_diagonal(*args)
scipy.sparse.sparsetools.csc.csc_eldiv_csc(*args)
scipy.sparse.sparsetools.csc.csc_elmul_csc(*args)
scipy.sparse.sparsetools.csc.csc_matmat_pass1(*args)
scipy.sparse.sparsetools.csc.csc_matmat_pass2(*args)
scipy.sparse.sparsetools.csc.csc_matvec(*args)
scipy.sparse.sparsetools.csc.csc_matvecs(*args)
scipy.sparse.sparsetools.csc.csc_minus_csc(*args)
scipy.sparse.sparsetools.csc.csc_plus_csc(*args)
scipy.sparse.sparsetools.csc.csc_tocsr(*args)
scipy.sparse.sparsetools.csc_diagonal(*args)
scipy.sparse.sparsetools.csc_eldiv_csc(*args)
scipy.sparse.sparsetools.csc_elmul_csc(*args)
scipy.sparse.sparsetools.csc_matmat_pass1(*args)
scipy.sparse.sparsetools.csc_matmat_pass2(*args)
scipy.sparse.sparsetools.csc_matvec(*args)
scipy.sparse.sparsetools.csc_matvecs(*args)
scipy.sparse.sparsetools.csc_minus_csc(*args)
scipy.sparse.sparsetools.csc_plus_csc(*args)
scipy.sparse.sparsetools.csc_tocsr(*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/sparsetools/coo.py----------------------------------------
A:scipy.sparse.sparsetools.coo.(fp, pathname, description)->imp.find_module('_coo', [dirname(__file__)])
A:scipy.sparse.sparsetools.coo._mod->imp.load_module('_coo', fp, pathname, description)
A:scipy.sparse.sparsetools.coo._coo->swig_import_helper()
A:scipy.sparse.sparsetools.coo.method->class_type.__swig_getmethods__.get(name, None)
scipy.sparse.sparsetools._swig_getattr(self,class_type,name)
scipy.sparse.sparsetools._swig_repr(self)
scipy.sparse.sparsetools._swig_setattr(self,class_type,name,value)
scipy.sparse.sparsetools._swig_setattr_nondynamic(self,class_type,name,value,static=1)
scipy.sparse.sparsetools.coo._swig_getattr(self,class_type,name)
scipy.sparse.sparsetools.coo._swig_repr(self)
scipy.sparse.sparsetools.coo._swig_setattr(self,class_type,name,value)
scipy.sparse.sparsetools.coo._swig_setattr_nondynamic(self,class_type,name,value,static=1)
scipy.sparse.sparsetools.coo.coo_count_diagonals(*args)
scipy.sparse.sparsetools.coo.coo_matvec(*args)
scipy.sparse.sparsetools.coo.coo_tocsc(*args)
scipy.sparse.sparsetools.coo.coo_tocsr(*args)
scipy.sparse.sparsetools.coo.coo_todense(*args)
scipy.sparse.sparsetools.coo_count_diagonals(*args)
scipy.sparse.sparsetools.coo_matvec(*args)
scipy.sparse.sparsetools.coo_tocsc(*args)
scipy.sparse.sparsetools.coo_tocsr(*args)
scipy.sparse.sparsetools.coo_todense(*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/sparsetools/dia.py----------------------------------------
A:scipy.sparse.sparsetools.dia.(fp, pathname, description)->imp.find_module('_dia', [dirname(__file__)])
A:scipy.sparse.sparsetools.dia._mod->imp.load_module('_dia', fp, pathname, description)
A:scipy.sparse.sparsetools.dia._dia->swig_import_helper()
A:scipy.sparse.sparsetools.dia.method->class_type.__swig_getmethods__.get(name, None)
scipy.sparse.sparsetools._swig_getattr(self,class_type,name)
scipy.sparse.sparsetools._swig_repr(self)
scipy.sparse.sparsetools._swig_setattr(self,class_type,name,value)
scipy.sparse.sparsetools._swig_setattr_nondynamic(self,class_type,name,value,static=1)
scipy.sparse.sparsetools.dia._swig_getattr(self,class_type,name)
scipy.sparse.sparsetools.dia._swig_repr(self)
scipy.sparse.sparsetools.dia._swig_setattr(self,class_type,name,value)
scipy.sparse.sparsetools.dia._swig_setattr_nondynamic(self,class_type,name,value,static=1)
scipy.sparse.sparsetools.dia.dia_matvec(*args)
scipy.sparse.sparsetools.dia_matvec(*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/sparsetools/setupscons.py----------------------------------------
A:scipy.sparse.sparsetools.setupscons.config->Configuration('sparsetools', parent_package, top_path, setup_name='setupscons.py')
scipy.sparse.sparsetools.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/sparsetools/setup.py----------------------------------------
A:scipy.sparse.sparsetools.setup.config->Configuration('sparsetools', parent_package, top_path)
scipy.sparse.sparsetools.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/sparsetools/bsr.py----------------------------------------
A:scipy.sparse.sparsetools.bsr.(fp, pathname, description)->imp.find_module('_bsr', [dirname(__file__)])
A:scipy.sparse.sparsetools.bsr._mod->imp.load_module('_bsr', fp, pathname, description)
A:scipy.sparse.sparsetools.bsr._bsr->swig_import_helper()
A:scipy.sparse.sparsetools.bsr.method->class_type.__swig_getmethods__.get(name, None)
scipy.sparse.sparsetools._swig_getattr(self,class_type,name)
scipy.sparse.sparsetools._swig_repr(self)
scipy.sparse.sparsetools._swig_setattr(self,class_type,name,value)
scipy.sparse.sparsetools._swig_setattr_nondynamic(self,class_type,name,value,static=1)
scipy.sparse.sparsetools.bsr._swig_getattr(self,class_type,name)
scipy.sparse.sparsetools.bsr._swig_repr(self)
scipy.sparse.sparsetools.bsr._swig_setattr(self,class_type,name,value)
scipy.sparse.sparsetools.bsr._swig_setattr_nondynamic(self,class_type,name,value,static=1)
scipy.sparse.sparsetools.bsr.bsr_diagonal(*args)
scipy.sparse.sparsetools.bsr.bsr_eldiv_bsr(*args)
scipy.sparse.sparsetools.bsr.bsr_elmul_bsr(*args)
scipy.sparse.sparsetools.bsr.bsr_matmat_pass2(*args)
scipy.sparse.sparsetools.bsr.bsr_matvec(*args)
scipy.sparse.sparsetools.bsr.bsr_matvecs(*args)
scipy.sparse.sparsetools.bsr.bsr_minus_bsr(*args)
scipy.sparse.sparsetools.bsr.bsr_plus_bsr(*args)
scipy.sparse.sparsetools.bsr.bsr_scale_columns(*args)
scipy.sparse.sparsetools.bsr.bsr_scale_rows(*args)
scipy.sparse.sparsetools.bsr.bsr_sort_indices(*args)
scipy.sparse.sparsetools.bsr.bsr_transpose(*args)
scipy.sparse.sparsetools.bsr_diagonal(*args)
scipy.sparse.sparsetools.bsr_eldiv_bsr(*args)
scipy.sparse.sparsetools.bsr_elmul_bsr(*args)
scipy.sparse.sparsetools.bsr_matmat_pass2(*args)
scipy.sparse.sparsetools.bsr_matvec(*args)
scipy.sparse.sparsetools.bsr_matvecs(*args)
scipy.sparse.sparsetools.bsr_minus_bsr(*args)
scipy.sparse.sparsetools.bsr_plus_bsr(*args)
scipy.sparse.sparsetools.bsr_scale_columns(*args)
scipy.sparse.sparsetools.bsr_scale_rows(*args)
scipy.sparse.sparsetools.bsr_sort_indices(*args)
scipy.sparse.sparsetools.bsr_transpose(*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/sparsetools/csgraph.py----------------------------------------
A:scipy.sparse.sparsetools.csgraph.(fp, pathname, description)->imp.find_module('_csgraph', [dirname(__file__)])
A:scipy.sparse.sparsetools.csgraph._mod->imp.load_module('_csgraph', fp, pathname, description)
A:scipy.sparse.sparsetools.csgraph._csgraph->swig_import_helper()
A:scipy.sparse.sparsetools.csgraph.method->class_type.__swig_getmethods__.get(name, None)
scipy.sparse.sparsetools._swig_getattr(self,class_type,name)
scipy.sparse.sparsetools._swig_repr(self)
scipy.sparse.sparsetools._swig_setattr(self,class_type,name,value)
scipy.sparse.sparsetools._swig_setattr_nondynamic(self,class_type,name,value,static=1)
scipy.sparse.sparsetools.cs_graph_components(*args)
scipy.sparse.sparsetools.csgraph._swig_getattr(self,class_type,name)
scipy.sparse.sparsetools.csgraph._swig_repr(self)
scipy.sparse.sparsetools.csgraph._swig_setattr(self,class_type,name,value)
scipy.sparse.sparsetools.csgraph._swig_setattr_nondynamic(self,class_type,name,value,static=1)
scipy.sparse.sparsetools.csgraph.cs_graph_components(*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/csgraph/__init__.py----------------------------------------
A:scipy.sparse.csgraph.__init__.cs_graph_components->_deprecate(cs_graph_components, message='In the future, use csgraph.connected_components. Note that this new function has a slightly different interface: see the docstring for more information.')


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/csgraph/setupscons.py----------------------------------------
A:scipy.sparse.csgraph.setupscons.config->Configuration('csgraph', parent_package, top_path)
scipy.sparse.csgraph.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/csgraph/setup.py----------------------------------------
A:scipy.sparse.csgraph.setup.config->Configuration('csgraph', parent_package, top_path)
scipy.sparse.csgraph.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/csgraph/_components.py----------------------------------------
A:scipy.sparse.csgraph._components.x->csr_matrix(x)
A:scipy.sparse.csgraph._components.label->numpy.empty((shape[0],), dtype=x.indptr.dtype)
A:scipy.sparse.csgraph._components.n_comp->_cs_graph_components(shape[0], x.indptr, x.indices, label)
scipy.sparse.cs_graph_components(x)
scipy.sparse.csgraph._components.cs_graph_components(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/csgraph/_validation.py----------------------------------------
A:scipy.sparse.csgraph._validation.csgraph->csgraph_from_dense(csgraph, null_value=null_value_in, infinity_null=infinity_null, nan_null=nan_null)
scipy.sparse.csgraph._validation.validate_graph(csgraph,directed,dtype=DTYPE,csr_output=True,dense_output=True,copy_if_dense=False,copy_if_sparse=False,null_value_in=0,null_value_out=np.inf,infinity_null=True,nan_null=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/csgraph/_laplacian.py----------------------------------------
A:scipy.sparse.csgraph._laplacian.csgraph->csgraph.astype(np.float).astype(np.float)
A:scipy.sparse.csgraph._laplacian.lap->coo_matrix((new_data, (new_row, new_col)), shape=lap.shape)
A:scipy.sparse.csgraph._laplacian.diagonal_holes->list(set(range(n_nodes)).difference(diag_idx))
A:scipy.sparse.csgraph._laplacian.new_data->numpy.concatenate([lap.data, np.ones(len(diagonal_holes))])
A:scipy.sparse.csgraph._laplacian.new_row->numpy.concatenate([lap.row, diagonal_holes])
A:scipy.sparse.csgraph._laplacian.new_col->numpy.concatenate([lap.col, diagonal_holes])
A:scipy.sparse.csgraph._laplacian.w->numpy.sqrt(w)
A:scipy.sparse.csgraph._laplacian.lap.data[diag_mask]->(1 - w_zeros[lap.row[diag_mask]]).astype(lap.data.dtype)
scipy.sparse.csgraph._laplacian._laplacian_dense(graph,normed=False,return_diag=False)
scipy.sparse.csgraph._laplacian._laplacian_sparse(graph,normed=False,return_diag=False)
scipy.sparse.csgraph._laplacian.laplacian(csgraph,normed=False,return_diag=False)
scipy.sparse.csgraph.laplacian(csgraph,normed=False,return_diag=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/csgraph/tests/test_graph_components.py----------------------------------------
A:scipy.sparse.csgraph.tests.test_graph_components.D->numpy.eye(4, dtype=np.bool)
A:scipy.sparse.csgraph.tests.test_graph_components.warn_ctx->WarningManager()
A:scipy.sparse.csgraph.tests.test_graph_components.(n_comp, flag)->scipy.sparse.csgraph.cs_graph_components(csr_matrix(D))
scipy.sparse.csgraph.tests.test_graph_components.test_cs_graph_components()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/csgraph/tests/test_connected_components.py----------------------------------------
A:scipy.sparse.csgraph.tests.test_connected_components.Xde->numpy.array([[0, 1, 0], [0, 0, 0], [0, 0, 0]])
A:scipy.sparse.csgraph.tests.test_connected_components.Xsp->scipy.sparse.csgraph.csgraph_from_dense(Xde, null_value=0)
A:scipy.sparse.csgraph.tests.test_connected_components.(n_components, labels)->scipy.sparse.csgraph.connected_components(g, connection='strong')
A:scipy.sparse.csgraph.tests.test_connected_components.X1de->numpy.array([[0, 1, 0], [0, 0, 0], [0, 0, 0]])
A:scipy.sparse.csgraph.tests.test_connected_components.X1sp->scipy.sparse.csgraph.csgraph_from_dense(X1de, null_value=0)
A:scipy.sparse.csgraph.tests.test_connected_components.X2sp->scipy.sparse.csgraph.csgraph_from_dense(X2de, null_value=0)
A:scipy.sparse.csgraph.tests.test_connected_components.X->numpy.array([[0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0]])
A:scipy.sparse.csgraph.tests.test_connected_components.g->numpy.array([[0, 1, 1, 0], [1, 0, 0, 1], [0, 0, 0, 1], [0, 0, 1, 0]])
scipy.sparse.csgraph.tests.test_connected_components.test_strong_connections()
scipy.sparse.csgraph.tests.test_connected_components.test_strong_connections2()
scipy.sparse.csgraph.tests.test_connected_components.test_ticket1876()
scipy.sparse.csgraph.tests.test_connected_components.test_weak_connections()
scipy.sparse.csgraph.tests.test_connected_components.test_weak_connections2()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/csgraph/tests/test_traversal.py----------------------------------------
A:scipy.sparse.csgraph.tests.test_traversal.csgraph->csgraph_from_dense(csgraph, null_value=0)
A:scipy.sparse.csgraph.tests.test_traversal.bfirst->numpy.array([[0, 1, 2, 0, 0], [0, 0, 0, 0, 3], [0, 0, 0, 7, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]])
A:scipy.sparse.csgraph.tests.test_traversal.bfirst_test->breadth_first_tree(csgraph, 0, directed)
A:scipy.sparse.csgraph.tests.test_traversal.dfirst->numpy.array([[0, 1, 0, 0, 0], [0, 0, 0, 0, 3], [0, 0, 0, 0, 0], [0, 0, 7, 0, 0], [0, 0, 0, 1, 0]])
A:scipy.sparse.csgraph.tests.test_traversal.dfirst_test->depth_first_tree(csgraph, 0, directed)
scipy.sparse.csgraph.tests.test_traversal.test_graph_breadth_first()
scipy.sparse.csgraph.tests.test_traversal.test_graph_depth_first()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/csgraph/tests/test_conversions.py----------------------------------------
A:scipy.sparse.csgraph.tests.test_conversions.G->numpy.random.random((10, 10))
A:scipy.sparse.csgraph.tests.test_conversions.olderr->numpy.seterr(invalid='ignore')
A:scipy.sparse.csgraph.tests.test_conversions.G_csr->csgraph_from_dense(G)
A:scipy.sparse.csgraph.tests.test_conversions.X->numpy.random.random((10, 10))
A:scipy.sparse.csgraph.tests.test_conversions.Xcsr->csr_matrix(X)
A:scipy.sparse.csgraph.tests.test_conversions.Xdense->csgraph_to_dense(Xcsr)
scipy.sparse.csgraph.tests.test_conversions.test_csgraph_from_dense()
scipy.sparse.csgraph.tests.test_conversions.test_csgraph_to_dense()
scipy.sparse.csgraph.tests.test_conversions.test_multiple_edges()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/csgraph/tests/test_shortest_path.py----------------------------------------
A:scipy.sparse.csgraph.tests.test_shortest_path.directed_G->numpy.array([[0, 3, 3, 0, 0], [0, 0, 0, 2, 4], [0, 0, 0, 0, 0], [1, 0, 0, 0, 0], [2, 0, 0, 2, 0]], dtype=float)
A:scipy.sparse.csgraph.tests.test_shortest_path.undirected_G->numpy.array([[0, 3, 3, 1, 2], [3, 0, 0, 2, 4], [3, 0, 0, 0, 0], [1, 2, 0, 0, 2], [2, 4, 0, 2, 0]], dtype=float)
A:scipy.sparse.csgraph.tests.test_shortest_path.unweighted_G->(directed_G > 0).astype(float)
A:scipy.sparse.csgraph.tests.test_shortest_path.directed_pred->numpy.array([[-9999, 0, 0, 1, 1], [3, -9999, 0, 1, 1], [-9999, -9999, -9999, -9999, -9999], [3, 0, 0, -9999, 1], [4, 0, 0, 4, -9999]], dtype=float)
A:scipy.sparse.csgraph.tests.test_shortest_path.undirected_SP->numpy.array([[0, 3, 3, 1, 2], [3, 0, 6, 2, 4], [3, 6, 0, 4, 5], [1, 2, 4, 0, 2], [2, 4, 5, 2, 0]], dtype=float)
A:scipy.sparse.csgraph.tests.test_shortest_path.undirected_pred->numpy.array([[-9999, 0, 0, 0, 0], [1, -9999, 0, 1, 1], [2, 0, -9999, 0, 0], [3, 3, 0, -9999, 3], [4, 4, 0, 4, -9999]], dtype=float)
A:scipy.sparse.csgraph.tests.test_shortest_path.SP->shortest_path(directed_G, method=method, directed=True, overwrite=False)
A:scipy.sparse.csgraph.tests.test_shortest_path.SP1->shortest_path(directed_G, directed=directed, overwrite=False, unweighted=True)
A:scipy.sparse.csgraph.tests.test_shortest_path.SP2->shortest_path(unweighted_G, directed=directed, overwrite=False, unweighted=False)
A:scipy.sparse.csgraph.tests.test_shortest_path.indices->numpy.arange(4)
A:scipy.sparse.csgraph.tests.test_shortest_path.(SP, pred)->shortest_path(directed_G, method, directed=directed, overwrite=False, return_predecessors=True)
A:scipy.sparse.csgraph.tests.test_shortest_path.(SP1, pred)->shortest_path(directed_G, directed=directed, overwrite=False, return_predecessors=True)
A:scipy.sparse.csgraph.tests.test_shortest_path.graph->numpy.ones([5, 5])
A:scipy.sparse.csgraph.tests.test_shortest_path.G->numpy.ma.masked_equal(directed_G, 0)
scipy.sparse.csgraph.tests.test_shortest_path.test_construct_shortest_path()
scipy.sparse.csgraph.tests.test_shortest_path.test_directed()
scipy.sparse.csgraph.tests.test_shortest_path.test_masked_input()
scipy.sparse.csgraph.tests.test_shortest_path.test_negative_cycles()
scipy.sparse.csgraph.tests.test_shortest_path.test_predecessors()
scipy.sparse.csgraph.tests.test_shortest_path.test_shortest_path_indices()
scipy.sparse.csgraph.tests.test_shortest_path.test_undirected()
scipy.sparse.csgraph.tests.test_shortest_path.test_unweighted_path()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/csgraph/tests/test_spanning_tree.py----------------------------------------
A:scipy.sparse.csgraph.tests.test_spanning_tree.graph->numpy.asarray(graph)
A:scipy.sparse.csgraph.tests.test_spanning_tree.expected->numpy.zeros((N, N))
A:scipy.sparse.csgraph.tests.test_spanning_tree.csgraph->csr_matrix(graph)
A:scipy.sparse.csgraph.tests.test_spanning_tree.mintree->minimum_spanning_tree(csgraph)
A:scipy.sparse.csgraph.tests.test_spanning_tree.idx->numpy.arange(N - 1)
scipy.sparse.csgraph.tests.test_spanning_tree.test_minimum_spanning_tree()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/sparse/csgraph/tests/test_graph_laplacian.py----------------------------------------
A:scipy.sparse.csgraph.tests.test_graph_laplacian.x->numpy.asarray(x)
A:scipy.sparse.csgraph.tests.test_graph_laplacian.d->numpy.diag(y).copy()
A:scipy.sparse.csgraph.tests.test_graph_laplacian.mat->scipy.sparse.csr_matrix(mat).todense()
A:scipy.sparse.csgraph.tests.test_graph_laplacian.sp_mat->scipy.sparse.csr_matrix(mat)
A:scipy.sparse.csgraph.tests.test_graph_laplacian.laplacian->scipy.sparse.csgraph.laplacian(mat, normed=normed)
scipy.sparse.csgraph.tests.test_graph_laplacian._check_graph_laplacian(mat,normed)
scipy.sparse.csgraph.tests.test_graph_laplacian._explicit_laplacian(x,normed=False)
scipy.sparse.csgraph.tests.test_graph_laplacian.test_graph_laplacian()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/decomp_qr.py----------------------------------------
A:scipy.linalg.decomp_qr.lwork->work[0].real.astype(numpy.int)
A:scipy.linalg.decomp_qr.ret->f(*args, **kwargs)
A:scipy.linalg.decomp_qr.kwargs['lwork']->ret[-2][0].real.astype(numpy.int)
A:scipy.linalg.decomp_qr.a1->numpy.asarray(a)
A:scipy.linalg.decomp_qr.(geqp3,)->get_lapack_funcs(('geqp3',), (a1,))
A:scipy.linalg.decomp_qr.(qr, jpvt, tau)->safecall(geqp3, 'geqp3', a1, overwrite_a=overwrite_a)
A:scipy.linalg.decomp_qr.(geqrf,)->get_lapack_funcs(('geqrf',), (a1,))
A:scipy.linalg.decomp_qr.(qr, tau)->safecall(geqrf, 'geqrf', a1, lwork=lwork, overwrite_a=overwrite_a)
A:scipy.linalg.decomp_qr.R->numpy.triu(rq[-M:, -M:])
A:scipy.linalg.decomp_qr.(gor_un_gqr,)->get_lapack_funcs(('orgqr',), (qr,))
A:scipy.linalg.decomp_qr.(Q,)->safecall(gor_un_gqr, 'gorgqr/gungqr', qqr, tau, lwork=lwork, overwrite_a=1)
A:scipy.linalg.decomp_qr.qqr->numpy.empty((M, M), dtype=t)
A:scipy.linalg.decomp_qr.c->c.reshape(1, len(c)).reshape(1, len(c))
A:scipy.linalg.decomp_qr.a->numpy.asarray(a)
A:scipy.linalg.decomp_qr.raw->qr(a, overwrite_a, None, 'raw', pivoting)
A:scipy.linalg.decomp_qr.(gor_un_mqr,)->get_lapack_funcs(('ormqr',), (Q,))
A:scipy.linalg.decomp_qr.cc->numpy.zeros((M, c.shape[1]), dtype=c.dtype, order='F')
A:scipy.linalg.decomp_qr.(cQ,)->safecall(gor_un_mqr, 'gormqr/gunmqr', lr, trans, Q, tau, cc, overwrite_c=overwrite_c)
A:scipy.linalg.decomp_qr.cQ->cQ.ravel().ravel()
A:scipy.linalg.decomp_qr.(qr, tau, work, info)->geqrf(a1, lwork=lwork, overwrite_a=overwrite_a)
A:scipy.linalg.decomp_qr.(gemm,)->get_blas_funcs(('gemm',), (qr,))
A:scipy.linalg.decomp_qr.Q->gemm(1, Q, H)
A:scipy.linalg.decomp_qr.ident->numpy.identity(M, dtype=t)
A:scipy.linalg.decomp_qr.v->zeros((M,), t)
A:scipy.linalg.decomp_qr.H->gemm(-tau[i], v, v, 1 + 0j, ident, trans_b=2)
A:scipy.linalg.decomp_qr.(gerqf,)->get_lapack_funcs(('gerqf',), (a1,))
A:scipy.linalg.decomp_qr.(rq, tau, work, info)->gerqf(a1, lwork=lwork, overwrite_a=overwrite_a)
A:scipy.linalg.decomp_qr.(gor_un_grq,)->get_lapack_funcs(('orgrq',), (rq,))
A:scipy.linalg.decomp_qr.(Q, work, info)->gor_un_grq(rq1, tau, lwork=lwork, overwrite_a=1)
A:scipy.linalg.decomp_qr.rq1->numpy.empty((N, N), dtype=rq.dtype)
scipy.linalg.decomp_qr.qr(a,overwrite_a=False,lwork=None,mode='full',pivoting=False,check_finite=True)
scipy.linalg.decomp_qr.qr_multiply(a,c,mode='right',pivoting=False,conjugate=False,overwrite_a=False,overwrite_c=False)
scipy.linalg.decomp_qr.qr_old(a,overwrite_a=False,lwork=None,check_finite=True)
scipy.linalg.decomp_qr.rq(a,overwrite_a=False,lwork=None,mode='full',check_finite=True)
scipy.linalg.decomp_qr.safecall(f,name,*args,**kwargs)
scipy.linalg.qr(a,overwrite_a=False,lwork=None,mode='full',pivoting=False,check_finite=True)
scipy.linalg.qr_multiply(a,c,mode='right',pivoting=False,conjugate=False,overwrite_a=False,overwrite_c=False)
scipy.linalg.qr_old(a,overwrite_a=False,lwork=None,check_finite=True)
scipy.linalg.rq(a,overwrite_a=False,lwork=None,mode='full',check_finite=True)
scipy.linalg.safecall(f,name,*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/decomp_lu.py----------------------------------------
A:scipy.linalg.decomp_lu.a1->asarray(a)
A:scipy.linalg.decomp_lu.(getrf,)->get_lapack_funcs(('getrf',), (a1,))
A:scipy.linalg.decomp_lu.(lu, piv, info)->getrf(a1, overwrite_a=overwrite_a)
A:scipy.linalg.decomp_lu.b1->asarray(b)
A:scipy.linalg.decomp_lu.(getrs,)->get_lapack_funcs(('getrs',), (lu, b1))
A:scipy.linalg.decomp_lu.(x, info)->getrs(lu, piv, b1, trans=trans, overwrite_b=overwrite_b)
A:scipy.linalg.decomp_lu.(flu,)->get_flinalg_funcs(('lu',), (a1,))
A:scipy.linalg.decomp_lu.(p, l, u, info)->flu(a1, permute_l=permute_l, overwrite_a=overwrite_a)
scipy.linalg.decomp_lu.lu(a,permute_l=False,overwrite_a=False,check_finite=True)
scipy.linalg.decomp_lu.lu_factor(a,overwrite_a=False,check_finite=True)
scipy.linalg.decomp_lu.lu_solve(lu_and_piv,b,trans=0,overwrite_b=False,check_finite=True)
scipy.linalg.lu(a,permute_l=False,overwrite_a=False,check_finite=True)
scipy.linalg.lu_factor(a,overwrite_a=False,check_finite=True)
scipy.linalg.lu_solve(lu_and_piv,b,trans=0,overwrite_b=False,check_finite=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/decomp.py----------------------------------------
A:scipy.linalg.decomp._I->cast['F'](1j)
A:scipy.linalg.decomp.v->zeros(n, dtype=typecode)
A:scipy.linalg.decomp.(ggev,)->get_lapack_funcs(('ggev',), (a1, b1))
A:scipy.linalg.decomp.res->ggev(a1, b1, lwork=-1)
A:scipy.linalg.decomp.lwork->scipy.linalg.calc_lwork.gehrd(gehrd.typecode, n, lo, hi)
A:scipy.linalg.decomp.(alpha, beta, vl, vr, work, info)->ggev(a1, b1, cvl, cvr, lwork, overwrite_a, overwrite_b)
A:scipy.linalg.decomp.(alphar, alphai, beta, vl, vr, work, info)->ggev(a1, b1, cvl, cvr, lwork, overwrite_a, overwrite_b)
A:scipy.linalg.decomp.only_real->numpy.logical_and.reduce(numpy.equal(w.imag, 0.0))
A:scipy.linalg.decomp.vl->_make_complex_eigvecs(w, vl, t)
A:scipy.linalg.decomp.vr->_make_complex_eigvecs(w, vr, t)
A:scipy.linalg.decomp.a1->asarray(a)
A:scipy.linalg.decomp.b1->asarray(b)
A:scipy.linalg.decomp.(geev,)->get_lapack_funcs(('geev',), (a1,))
A:scipy.linalg.decomp.(w, vl, vr, info)->geev(a1, lwork=lwork, compute_vl=compute_vl, compute_vr=compute_vr, overwrite_a=overwrite_a)
A:scipy.linalg.decomp.(wr, wi, vl, vr, info)->geev(a1, lwork=lwork, compute_vl=compute_vl, compute_vr=compute_vr, overwrite_a=overwrite_a)
A:scipy.linalg.decomp.(evr,)->get_lapack_funcs((pfx + 'evr',), (a1,))
A:scipy.linalg.decomp.(w, v, info)->bevd(a1, compute_v=not eigvals_only, lower=lower, overwrite_ab=overwrite_a_band)
A:scipy.linalg.decomp.(w_tot, v, info)->evr(a1, uplo=uplo, jobz=_job, range='I', il=lo, iu=hi, overwrite_a=overwrite_a)
A:scipy.linalg.decomp.(gvx,)->get_lapack_funcs((pfx + 'gvx',), (a1, b1))
A:scipy.linalg.decomp.(w_tot, v, ifail, info)->gvx(a1, b1, uplo=uplo, iu=hi, itype=type, jobz=_job, il=lo, overwrite_a=overwrite_a, overwrite_b=overwrite_b)
A:scipy.linalg.decomp.(gvd,)->get_lapack_funcs((pfx + 'gvd',), (a1, b1))
A:scipy.linalg.decomp.(v, w, info)->gv(a1, b1, uplo=uplo, itype=type, jobz=_job, overwrite_a=overwrite_a, overwrite_b=overwrite_b)
A:scipy.linalg.decomp.(gv,)->get_lapack_funcs((pfx + 'gv',), (a1, b1))
A:scipy.linalg.decomp.(bevd,)->get_lapack_funcs(('sbevd',), (a1,))
A:scipy.linalg.decomp.(lamch,)->get_lapack_funcs(('lamch',), (array(0, dtype='d'),))
A:scipy.linalg.decomp.(bevx,)->get_lapack_funcs(('sbevx',), (a1,))
A:scipy.linalg.decomp.(w, v, m, ifail, info)->bevx(a1, vl, vu, il + 1, iu + 1, compute_v=not eigvals_only, mmax=max_ev, range=select, lower=lower, overwrite_ab=overwrite_a_band, abstol=abstol)
A:scipy.linalg.decomp.(gehrd, gebal)->get_lapack_funcs(('gehrd', 'gebal'), (a1,))
A:scipy.linalg.decomp.(ba, lo, hi, pivscale, info)->gebal(a1, permute=1, overwrite_a=overwrite_a)
A:scipy.linalg.decomp.n->len(a1)
A:scipy.linalg.decomp.(hq, tau, info)->gehrd(ba, lo=lo, hi=hi, lwork=lwork, overwrite_a=1)
A:scipy.linalg.decomp.(ger, gemm)->get_blas_funcs(('ger', 'gemm'), dtype=typecode)
A:scipy.linalg.decomp.h->ger(-tau[i], v, v, a=diag(ones(n, dtype=typecode)), overwrite_a=1)
A:scipy.linalg.decomp.q->diag(ones(n, dtype=typecode))
scipy.linalg._geneig(a1,b1,left,right,overwrite_a,overwrite_b)
scipy.linalg._make_complex_eigvecs(w,vin,dtype)
scipy.linalg.decomp._geneig(a1,b1,left,right,overwrite_a,overwrite_b)
scipy.linalg.decomp._make_complex_eigvecs(w,vin,dtype)
scipy.linalg.decomp.eig(a,b=None,left=False,right=True,overwrite_a=False,overwrite_b=False,check_finite=True)
scipy.linalg.decomp.eig_banded(a_band,lower=False,eigvals_only=False,overwrite_a_band=False,select='a',select_range=None,max_ev=0,check_finite=True)
scipy.linalg.decomp.eigh(a,b=None,lower=True,eigvals_only=False,overwrite_a=False,overwrite_b=False,turbo=True,eigvals=None,type=1,check_finite=True)
scipy.linalg.decomp.eigvals(a,b=None,overwrite_a=False,check_finite=True)
scipy.linalg.decomp.eigvals_banded(a_band,lower=False,overwrite_a_band=False,select='a',select_range=None,check_finite=True)
scipy.linalg.decomp.eigvalsh(a,b=None,lower=True,overwrite_a=False,overwrite_b=False,turbo=True,eigvals=None,type=1,check_finite=True)
scipy.linalg.decomp.hessenberg(a,calc_q=False,overwrite_a=False,check_finite=True)
scipy.linalg.eig(a,b=None,left=False,right=True,overwrite_a=False,overwrite_b=False,check_finite=True)
scipy.linalg.eig_banded(a_band,lower=False,eigvals_only=False,overwrite_a_band=False,select='a',select_range=None,max_ev=0,check_finite=True)
scipy.linalg.eigh(a,b=None,lower=True,eigvals_only=False,overwrite_a=False,overwrite_b=False,turbo=True,eigvals=None,type=1,check_finite=True)
scipy.linalg.eigvals(a,b=None,overwrite_a=False,check_finite=True)
scipy.linalg.eigvals_banded(a_band,lower=False,overwrite_a_band=False,select='a',select_range=None,check_finite=True)
scipy.linalg.eigvalsh(a,b=None,lower=True,overwrite_a=False,overwrite_b=False,turbo=True,eigvals=None,type=1,check_finite=True)
scipy.linalg.hessenberg(a,calc_q=False,overwrite_a=False,check_finite=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/decomp_schur.py----------------------------------------
A:scipy.linalg.decomp_schur.a1->a1.astype('F').astype('F')
A:scipy.linalg.decomp_schur.(gees,)->get_lapack_funcs(('gees',), (a1,))
A:scipy.linalg.decomp_schur.result->gees(sfunction, a1, lwork=lwork, overwrite_a=overwrite_a, sort_t=sort_t)
A:scipy.linalg.decomp_schur.lwork->result[-2][0].real.astype(numpy.int)
A:scipy.linalg.decomp_schur.kind->max(kind, _array_kind[t])
A:scipy.linalg.decomp_schur.precision->max(precision, _array_precision[t])
A:scipy.linalg.decomp_schur.(Z, T)->_castCopy(t, Z, T)
A:scipy.linalg.decomp_schur.t->_commonType(Z, T, arr([3.0], 'F'))
A:scipy.linalg.decomp_schur.k->slice(m - 1, m + 1)
A:scipy.linalg.decomp_schur.r->misc.norm([mu[0], T[m, m - 1]])
A:scipy.linalg.decomp_schur.Gc->conj(transp(G))
A:scipy.linalg.decomp_schur.j->slice(m - 1, N)
A:scipy.linalg.decomp_schur.T[k, j]->dot(G, T[k, j])
A:scipy.linalg.decomp_schur.i->slice(0, N)
A:scipy.linalg.decomp_schur.T[i, k]->dot(T[i, k], Gc)
A:scipy.linalg.decomp_schur.Z[i, k]->dot(Z[i, k], Gc)
scipy.linalg._castCopy(type,*arrays)
scipy.linalg._commonType(*arrays)
scipy.linalg.decomp_schur._castCopy(type,*arrays)
scipy.linalg.decomp_schur._commonType(*arrays)
scipy.linalg.decomp_schur.rsf2csf(T,Z,check_finite=True)
scipy.linalg.decomp_schur.schur(a,output='real',lwork=None,overwrite_a=False,sort=None,check_finite=True)
scipy.linalg.rsf2csf(T,Z,check_finite=True)
scipy.linalg.schur(a,output='real',lwork=None,overwrite_a=False,sort=None,check_finite=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/cblas.py----------------------------------------
scipy.linalg.c_deprecate()
scipy.linalg.cblas._deprecate()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/_solvers.py----------------------------------------
A:scipy.linalg._solvers.(r, u)->schur(a, output='real')
A:scipy.linalg._solvers.(s, v)->schur(b.conj().transpose(), output='real')
A:scipy.linalg._solvers.f->numpy.dot(np.dot(u.conj().transpose(), q), v)
A:scipy.linalg._solvers.(trsyl,)->get_lapack_funcs(('trsyl',), (r, s, f))
A:scipy.linalg._solvers.(y, scale, info)->trsyl(r, s, f, tranb='C')
A:scipy.linalg._solvers.lhs->kron(a, a.conj())
A:scipy.linalg._solvers.x->solve(lhs, q.flatten())
A:scipy.linalg._solvers.g->numpy.dot(np.dot(b, g), b.conj().transpose())
A:scipy.linalg._solvers.z->numpy.vstack((np.hstack((z11, z12)), np.hstack((z21, z22))))
A:scipy.linalg._solvers.[s, u, sorted]->schur(z, sort='iuc')
A:scipy.linalg._solvers.u11i->inv(u11)
A:scipy.linalg._solvers.ait->inv(a).conj().transpose()
scipy.linalg._solvers.solve_continuous_are(a,b,q,r)
scipy.linalg._solvers.solve_discrete_are(a,b,q,r)
scipy.linalg._solvers.solve_discrete_lyapunov(a,q)
scipy.linalg._solvers.solve_lyapunov(a,q)
scipy.linalg._solvers.solve_sylvester(a,b,q)
scipy.linalg.solve_continuous_are(a,b,q,r)
scipy.linalg.solve_discrete_are(a,b,q,r)
scipy.linalg.solve_discrete_lyapunov(a,q)
scipy.linalg.solve_lyapunov(a,q)
scipy.linalg.solve_sylvester(a,b,q)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/setupscons.py----------------------------------------
A:scipy.linalg.setupscons.config->Configuration('linalg', parent_package, top_path)
scipy.linalg.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/linalg_version.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/lapack.py----------------------------------------
A:scipy.linalg.lapack.clapack->_DeprecatedImport('scipy.linalg.blas.clapack', 'scipy.linalg.lapack')
A:scipy.linalg.lapack.flapack->_DeprecatedImport('scipy.linalg.blas.flapack', 'scipy.linalg.lapack')
scipy.linalg.get_lapack_funcs(names,arrays=(),dtype=None)
scipy.linalg.lapack.get_lapack_funcs(names,arrays=(),dtype=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/flinalg.py----------------------------------------
A:scipy.linalg.flinalg.func->getattr(_flinalg, func_name + suffix1, getattr(_flinalg, func_name + suffix2, None))
scipy.linalg.flinalg.get_flinalg_funcs(names,arrays=(),debug=0)
scipy.linalg.flinalg.has_column_major_storage(arr)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/flapack.py----------------------------------------
scipy.linalg.f_deprecate()
scipy.linalg.flapack._deprecate()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/_testutils.py----------------------------------------
A:scipy.linalg._testutils.x->numpy.zeros(shape, dtype=dtype)
A:scipy.linalg._testutils.j->numpy.arange(shape[0])
scipy.linalg._testutils._FakeMatrix(self,data)
scipy.linalg._testutils._FakeMatrix.__init__(self,data)
scipy.linalg._testutils._FakeMatrix2(self,data)
scipy.linalg._testutils._FakeMatrix2.__array__(self)
scipy.linalg._testutils._FakeMatrix2.__init__(self,data)
scipy.linalg._testutils._get_array(shape,dtype)
scipy.linalg._testutils._id(x)
scipy.linalg._testutils.assert_no_overwrite(call,shapes,dtypes=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/decomp_cholesky.py----------------------------------------
A:scipy.linalg.decomp_cholesky.a1->asarray(a)
A:scipy.linalg.decomp_cholesky.(potrf,)->get_lapack_funcs(('potrf',), (a1,))
A:scipy.linalg.decomp_cholesky.(c, info)->pbtrf(ab, lower=lower, overwrite_ab=overwrite_ab)
A:scipy.linalg.decomp_cholesky.(c, lower)->_cholesky(a, lower=lower, overwrite_a=overwrite_a, clean=False, check_finite=check_finite)
A:scipy.linalg.decomp_cholesky.b1->asarray(b)
A:scipy.linalg.decomp_cholesky.c->asarray(c)
A:scipy.linalg.decomp_cholesky.(potrs,)->get_lapack_funcs(('potrs',), (c, b1))
A:scipy.linalg.decomp_cholesky.(x, info)->pbtrs(cb, b, lower=lower, overwrite_b=overwrite_b)
A:scipy.linalg.decomp_cholesky.ab->asarray(ab)
A:scipy.linalg.decomp_cholesky.(pbtrf,)->get_lapack_funcs(('pbtrf',), (ab,))
A:scipy.linalg.decomp_cholesky.cb->asarray(cb)
A:scipy.linalg.decomp_cholesky.b->asarray(b)
A:scipy.linalg.decomp_cholesky.(pbtrs,)->get_lapack_funcs(('pbtrs',), (cb, b))
scipy.linalg._cholesky(a,lower=False,overwrite_a=False,clean=True,check_finite=True)
scipy.linalg.cho_factor(a,lower=False,overwrite_a=False,check_finite=True)
scipy.linalg.cho_solve(c_and_lower,b,overwrite_b=False,check_finite=True)
scipy.linalg.cho_solve_banded(cb_and_lower,b,overwrite_b=False,check_finite=True)
scipy.linalg.cholesky(a,lower=False,overwrite_a=False,check_finite=True)
scipy.linalg.cholesky_banded(ab,overwrite_ab=False,lower=False,check_finite=True)
scipy.linalg.decomp_cholesky._cholesky(a,lower=False,overwrite_a=False,clean=True,check_finite=True)
scipy.linalg.decomp_cholesky.cho_factor(a,lower=False,overwrite_a=False,check_finite=True)
scipy.linalg.decomp_cholesky.cho_solve(c_and_lower,b,overwrite_b=False,check_finite=True)
scipy.linalg.decomp_cholesky.cho_solve_banded(cb_and_lower,b,overwrite_b=False,check_finite=True)
scipy.linalg.decomp_cholesky.cholesky(a,lower=False,overwrite_a=False,check_finite=True)
scipy.linalg.decomp_cholesky.cholesky_banded(ab,overwrite_ab=False,lower=False,check_finite=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/decomp_svd.py----------------------------------------
A:scipy.linalg.decomp_svd.a1->asarray(a)
A:scipy.linalg.decomp_svd.(gesdd,)->get_lapack_funcs(('gesdd',), (a1,))
A:scipy.linalg.decomp_svd.(u, s, v, info)->gesdd(a1, compute_uv=compute_uv, lwork=lwork, full_matrices=full_matrices, overwrite_a=overwrite_a)
A:scipy.linalg.decomp_svd.part->diag(s)
A:scipy.linalg.decomp_svd.MorN->len(s)
A:scipy.linalg.decomp_svd.(u, s, vh)->svd(A)
A:scipy.linalg.decomp_svd.num->numpy.sum(s > tol, dtype=int)
scipy.linalg.decomp_svd.diagsvd(s,M,N)
scipy.linalg.decomp_svd.orth(A)
scipy.linalg.decomp_svd.svd(a,full_matrices=True,compute_uv=True,overwrite_a=False,check_finite=True)
scipy.linalg.decomp_svd.svdvals(a,overwrite_a=False,check_finite=True)
scipy.linalg.diagsvd(s,M,N)
scipy.linalg.orth(A)
scipy.linalg.svd(a,full_matrices=True,compute_uv=True,overwrite_a=False,check_finite=True)
scipy.linalg.svdvals(a,overwrite_a=False,check_finite=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/basic.py----------------------------------------
A:scipy.linalg.basic.(a1, b1)->map(np.asarray, (a, b))
A:scipy.linalg.basic.(posv,)->get_lapack_funcs(('posv',), (a1, b1))
A:scipy.linalg.basic.(c, x, info)->pbsv(ab, b, lower=lower, overwrite_ab=overwrite_ab, overwrite_b=overwrite_b)
A:scipy.linalg.basic.(gesv,)->get_lapack_funcs(('gesv',), (a1, b1))
A:scipy.linalg.basic.(lu, piv, x, info)->gbsv(l, u, a2, b1, overwrite_ab=True, overwrite_b=overwrite_b)
A:scipy.linalg.basic.trans->{'N': 0, 'T': 1, 'C': 2}.get(trans, trans)
A:scipy.linalg.basic.(trtrs,)->get_lapack_funcs(('trtrs',), (a1, b1))
A:scipy.linalg.basic.(x, info)->trtrs(a1, b1, overwrite_b=overwrite_b, lower=lower, trans=trans, unitdiag=unit_diagonal)
A:scipy.linalg.basic.(gbsv,)->get_lapack_funcs(('gbsv',), (a1, b1))
A:scipy.linalg.basic.a2->numpy.zeros((2 * l + u + 1, a1.shape[1]), dtype=gbsv.dtype)
A:scipy.linalg.basic.(ab, b)->map(np.asarray, (ab, b))
A:scipy.linalg.basic.(pbsv,)->get_lapack_funcs(('pbsv',), (ab, b))
A:scipy.linalg.basic.a1->numpy.asarray(a)
A:scipy.linalg.basic.(getrf, getri)->get_lapack_funcs(('getrf', 'getri'), (a1,))
A:scipy.linalg.basic.(lu, piv, info)->getrf(a1, overwrite_a=overwrite_a)
A:scipy.linalg.basic.lwork->work[0].real.astype(np.int)
A:scipy.linalg.basic.(inv_a, info)->getri(lu, piv, lwork=lwork, overwrite_lu=1)
A:scipy.linalg.basic.(fdet,)->get_flinalg_funcs(('det',), (a1,))
A:scipy.linalg.basic.(a_det, info)->fdet(a1, overwrite_a=overwrite_a)
A:scipy.linalg.basic.(gelss,)->get_lapack_funcs(('gelss',), (a1, b1))
A:scipy.linalg.basic.b2->numpy.zeros(n, dtype=gelss.dtype)
A:scipy.linalg.basic.(v, x, s, rank, work, info)->gelss(a1, b1, cond=cond, lwork=lwork, overwrite_a=overwrite_a, overwrite_b=overwrite_b)
A:scipy.linalg.basic.resids->numpy.sum(np.abs(x[n:]) ** 2, axis=0)
A:scipy.linalg.basic.a->numpy.asarray(a)
A:scipy.linalg.basic.b->numpy.identity(a.shape[0], dtype=a.dtype)
A:scipy.linalg.basic.(x, resids, rank, s)->lstsq(a, b, cond=cond)
A:scipy.linalg.basic.(u, s, vh)->decomp_svd.svd(a, full_matrices=False)
A:scipy.linalg.basic.t->u.dtype.char.lower()
A:scipy.linalg.basic.rank->numpy.sum(s > cond * np.max(s))
A:scipy.linalg.basic.B->numpy.dot(u * psigma_diag, np.conjugate(u).T)
A:scipy.linalg.basic.(s, u)->decomp.eigh(a, lower=lower)
scipy.linalg.basic.det(a,overwrite_a=False,check_finite=True)
scipy.linalg.basic.inv(a,overwrite_a=False,check_finite=True)
scipy.linalg.basic.lstsq(a,b,cond=None,overwrite_a=False,overwrite_b=False,check_finite=True)
scipy.linalg.basic.pinv(a,cond=None,rcond=None,return_rank=False,check_finite=True)
scipy.linalg.basic.pinv2(a,cond=None,rcond=None,return_rank=False,check_finite=True)
scipy.linalg.basic.pinvh(a,cond=None,rcond=None,lower=True,return_rank=False,check_finite=True)
scipy.linalg.basic.solve(a,b,sym_pos=False,lower=False,overwrite_a=False,overwrite_b=False,debug=False,check_finite=True)
scipy.linalg.basic.solve_banded(l_and_u,ab,b,overwrite_ab=False,overwrite_b=False,debug=False,check_finite=True)
scipy.linalg.basic.solve_triangular(a,b,trans=0,lower=False,unit_diagonal=False,overwrite_b=False,debug=False,check_finite=True)
scipy.linalg.basic.solveh_banded(ab,b,overwrite_ab=False,overwrite_b=False,lower=False,check_finite=True)
scipy.linalg.det(a,overwrite_a=False,check_finite=True)
scipy.linalg.inv(a,overwrite_a=False,check_finite=True)
scipy.linalg.lstsq(a,b,cond=None,overwrite_a=False,overwrite_b=False,check_finite=True)
scipy.linalg.pinv(a,cond=None,rcond=None,return_rank=False,check_finite=True)
scipy.linalg.pinv2(a,cond=None,rcond=None,return_rank=False,check_finite=True)
scipy.linalg.pinvh(a,cond=None,rcond=None,lower=True,return_rank=False,check_finite=True)
scipy.linalg.solve(a,b,sym_pos=False,lower=False,overwrite_a=False,overwrite_b=False,debug=False,check_finite=True)
scipy.linalg.solve_banded(l_and_u,ab,b,overwrite_ab=False,overwrite_b=False,debug=False,check_finite=True)
scipy.linalg.solve_triangular(a,b,trans=0,lower=False,unit_diagonal=False,overwrite_b=False,debug=False,check_finite=True)
scipy.linalg.solveh_banded(ab,b,overwrite_ab=False,overwrite_b=False,lower=False,check_finite=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/clapack.py----------------------------------------
scipy.linalg.c_deprecate()
scipy.linalg.clapack._deprecate()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/setup.py----------------------------------------
A:scipy.linalg.setup.config->Configuration('linalg', parent_package, top_path)
A:scipy.linalg.setup.lapack_opt->get_info('lapack_opt')
scipy.linalg.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/_decomp_qz.py----------------------------------------
A:scipy.linalg._decomp_qz.a1->a1.astype('F').astype('F')
A:scipy.linalg._decomp_qz.b1->b1.astype('F').astype('F')
A:scipy.linalg._decomp_qz.(gges,)->get_lapack_funcs(('gges',), (a1, b1))
A:scipy.linalg._decomp_qz.result->gges(sfunction, a1, b1, lwork=lwork, overwrite_a=overwrite_a, overwrite_b=overwrite_b, sort_t=sort_t)
A:scipy.linalg._decomp_qz.lwork->result[-2][0].real.astype(np.int)
A:scipy.linalg._decomp_qz.sfunction->_select_function(sort, typa)
scipy.linalg._decomp_qz._select_function(sort,typ)
scipy.linalg._decomp_qz.qz(A,B,output='real',lwork=None,sort=None,overwrite_a=False,overwrite_b=False,check_finite=True)
scipy.linalg._select_function(sort,typ)
scipy.linalg.qz(A,B,output='real',lwork=None,sort=None,overwrite_a=False,overwrite_b=False,check_finite=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/misc.py----------------------------------------
A:scipy.linalg.misc.a->numpy.asarray_chkfinite(a)
A:scipy.linalg.misc.nrm2->getattr(blas, func_name)
scipy.linalg._datacopied(arr,original)
scipy.linalg.misc._datacopied(arr,original)
scipy.linalg.misc.norm(a,ord=None)
scipy.linalg.norm(a,ord=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/blas.py----------------------------------------
A:scipy.linalg.blas.cblas->_DeprecatedImport('scipy.linalg.blas.cblas', 'scipy.linalg.blas')
A:scipy.linalg.blas.fblas->_DeprecatedImport('scipy.linalg.blas.fblas', 'scipy.linalg.blas')
A:scipy.linalg.blas.dtype->numpy.dtype(dtype)
A:scipy.linalg.blas.index->dtypes.index(dtype)
A:scipy.linalg.blas.prefix->_type_conv.get(dtype.char, 'd')
A:scipy.linalg.blas.(prefix, dtype, prefer_fortran)->find_best_blas_type(arrays, dtype)
A:scipy.linalg.blas.func_name->alias.get(func_name, func_name)
A:scipy.linalg.blas.func->getattr(module2[0], func_name, None)
scipy.linalg._get_funcs(names,arrays,dtype,lib_name,fmodule,cmodule,fmodule_name,cmodule_name,alias)
scipy.linalg.blas._get_funcs(names,arrays,dtype,lib_name,fmodule,cmodule,fmodule_name,cmodule_name,alias)
scipy.linalg.blas.find_best_blas_type(arrays=(),dtype=None)
scipy.linalg.blas.get_blas_funcs(names,arrays=(),dtype=None)
scipy.linalg.find_best_blas_type(arrays=(),dtype=None)
scipy.linalg.get_blas_funcs(names,arrays=(),dtype=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/special_matrices.py----------------------------------------
A:scipy.linalg.special_matrices.m->numpy.asarray(m)
A:scipy.linalg.special_matrices.c->numpy.zeros((n - 1, n - 1), dtype=first_row.dtype)
A:scipy.linalg.special_matrices.r->numpy.asarray(r).ravel()
A:scipy.linalg.special_matrices.vals->numpy.concatenate((c, r[1:]))
A:scipy.linalg.special_matrices.lg2->int(math.log(n, 2))
A:scipy.linalg.special_matrices.H->numpy.vstack((np.hstack((H, H)), np.hstack((H, -H))))
A:scipy.linalg.special_matrices.f->numpy.atleast_1d(f)
A:scipy.linalg.special_matrices.s->numpy.atleast_1d(s)
A:scipy.linalg.special_matrices.a->numpy.atleast_1d(a)
A:scipy.linalg.special_matrices.b->numpy.reshape(b, b.shape)
A:scipy.linalg.special_matrices.o->o.reshape(a.shape + b.shape).reshape(a.shape + b.shape)
A:scipy.linalg.special_matrices.shapes->numpy.array([a.shape for a in arrs])
A:scipy.linalg.special_matrices.out->numpy.zeros(np.sum(shapes, axis=0), dtype=arrs[0].dtype)
A:scipy.linalg.special_matrices.h->hankel(values[:n], r=values[n - 1:])
A:scipy.linalg.special_matrices.invh->numpy.empty((n, n), dtype=dtype)
A:scipy.linalg.special_matrices.L_n->comb(*np.ogrid[:n, :n])
A:scipy.linalg.special_matrices.L_n[i, j]->comb(i, j, exact=True)
A:scipy.linalg.special_matrices.p->numpy.dot(L_n, L_n.T)
scipy.linalg.all_mat(*args)
scipy.linalg.block_diag(*arrs)
scipy.linalg.circulant(c)
scipy.linalg.companion(a)
scipy.linalg.hadamard(n,dtype=int)
scipy.linalg.hankel(c,r=None)
scipy.linalg.hilbert(n)
scipy.linalg.invhilbert(n,exact=False)
scipy.linalg.kron(a,b)
scipy.linalg.leslie(f,s)
scipy.linalg.pascal(n,kind='symmetric',exact=True)
scipy.linalg.special_matrices.all_mat(*args)
scipy.linalg.special_matrices.block_diag(*arrs)
scipy.linalg.special_matrices.circulant(c)
scipy.linalg.special_matrices.companion(a)
scipy.linalg.special_matrices.hadamard(n,dtype=int)
scipy.linalg.special_matrices.hankel(c,r=None)
scipy.linalg.special_matrices.hilbert(n)
scipy.linalg.special_matrices.invhilbert(n,exact=False)
scipy.linalg.special_matrices.kron(a,b)
scipy.linalg.special_matrices.leslie(f,s)
scipy.linalg.special_matrices.pascal(n,kind='symmetric',exact=True)
scipy.linalg.special_matrices.toeplitz(c,r=None)
scipy.linalg.special_matrices.tri(N,M=None,k=0,dtype=None)
scipy.linalg.special_matrices.tril(m,k=0)
scipy.linalg.special_matrices.triu(m,k=0)
scipy.linalg.toeplitz(c,r=None)
scipy.linalg.tri(N,M=None,k=0,dtype=None)
scipy.linalg.tril(m,k=0)
scipy.linalg.triu(m,k=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/fblas.py----------------------------------------
scipy.linalg.f_deprecate()
scipy.linalg.fblas._deprecate()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/matfuncs.py----------------------------------------
A:scipy.linalg.matfuncs.A->asarray(A)
A:scipy.linalg.matfuncs.(s, vr)->eig(A)
A:scipy.linalg.matfuncs.vri->inv(vr)
A:scipy.linalg.matfuncs.r->dot(dot(vr, diag(exp(s))), vri)
A:scipy.linalg.matfuncs.eA->eye(*A.shape, **{'dtype': t})
A:scipy.linalg.matfuncs.trm->mat(eA, copy=True)
A:scipy.linalg.matfuncs.(T, Z)->rsf2csf(T, Z)
A:scipy.linalg.matfuncs.F->mat(real(F))
A:scipy.linalg.matfuncs.minden->min(minden, abs(den))
A:scipy.linalg.matfuncs.ksl->slice(i, j - 1)
A:scipy.linalg.matfuncs.err->min(1, max(tol, tol / minden * norm(triu(T, 1), 1)))
A:scipy.linalg.matfuncs.(F, errest)->funm(A, log, disp=0)
A:scipy.linalg.matfuncs.R->numpy.zeros((n, n), T.dtype.char)
A:scipy.linalg.matfuncs.(F, dontcare)->funm(R * A * R.H, log, disp=0)
A:scipy.linalg.matfuncs.E->mat(expm(F))
A:scipy.linalg.matfuncs.temp->mat(solve(E.T, (E - A).T))
A:scipy.linalg.matfuncs.rx->real(x)
A:scipy.linalg.matfuncs.(result, errest)->funm(a, rounded_sign, disp=0)
A:scipy.linalg.matfuncs.a->asarray(a)
A:scipy.linalg.matfuncs.vals->svd(a, compute_uv=0)
A:scipy.linalg.matfuncs.max_sv->numpy.amax(vals)
A:scipy.linalg.matfuncs.iS0->inv(S0)
A:scipy.linalg.matfuncs.errest->norm(dot(Pp, Pp) - Pp, 1)
A:scipy.linalg.matfuncs.R[j, j]->sqrt(T[j, j])
A:scipy.linalg.matfuncs.(R, Z)->all_mat(R, Z)
A:scipy.linalg.matfuncs.nzeig->numpy.any(diag(T) == 0)
scipy.linalg.coshm(A)
scipy.linalg.cosm(A)
scipy.linalg.expm(A,q=None)
scipy.linalg.expm2(A)
scipy.linalg.expm3(A,q=20)
scipy.linalg.funm(A,func,disp=True)
scipy.linalg.logm(A,disp=True)
scipy.linalg.matfuncs.coshm(A)
scipy.linalg.matfuncs.cosm(A)
scipy.linalg.matfuncs.expm(A,q=None)
scipy.linalg.matfuncs.expm2(A)
scipy.linalg.matfuncs.expm3(A,q=20)
scipy.linalg.matfuncs.funm(A,func,disp=True)
scipy.linalg.matfuncs.logm(A,disp=True)
scipy.linalg.matfuncs.signm(a,disp=True)
scipy.linalg.matfuncs.sinhm(A)
scipy.linalg.matfuncs.sinm(A)
scipy.linalg.matfuncs.sqrtm(A,disp=True)
scipy.linalg.matfuncs.tanhm(A)
scipy.linalg.matfuncs.tanm(A)
scipy.linalg.matfuncs.toreal(arr,tol=None)
scipy.linalg.signm(a,disp=True)
scipy.linalg.sinhm(A)
scipy.linalg.sinm(A)
scipy.linalg.sqrtm(A,disp=True)
scipy.linalg.tanhm(A)
scipy.linalg.tanm(A)
scipy.linalg.toreal(arr,tol=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/tests/test_build.py----------------------------------------
A:scipy.linalg.tests.test_build.st->call(self.cmd, stdout=PIPE, stderr=PIPE)
A:scipy.linalg.tests.test_build.p->Popen(self.cmd + [file], stdout=PIPE, stderr=PIPE)
A:scipy.linalg.tests.test_build.(stdout, stderr)->Popen(self.cmd + [file], stdout=PIPE, stderr=PIPE).communicate()
A:scipy.linalg.tests.test_build.stdout->self.get_dependencies(file)
A:scipy.linalg.tests.test_build.rdeps->dict([(asbytes(dep), re.compile(asbytes(dep))) for dep in deps])
A:scipy.linalg.tests.test_build.f->FindDependenciesLdd()
A:scipy.linalg.tests.test_build.deps->FindDependenciesLdd().grep_dependencies(flapack.__file__, ['libg2c', 'libgfortran'])
scipy.linalg.tests.test_build.FindDependenciesLdd(self)
scipy.linalg.tests.test_build.FindDependenciesLdd.__init__(self)
scipy.linalg.tests.test_build.FindDependenciesLdd.get_dependencies(self,file)
scipy.linalg.tests.test_build.FindDependenciesLdd.grep_dependencies(self,file,deps)
scipy.linalg.tests.test_build.TestF77Mismatch(TestCase)
scipy.linalg.tests.test_build.TestF77Mismatch.test_lapack(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/tests/test_decomp.py----------------------------------------
A:scipy.linalg.tests.test_decomp.act->dtype(act)
A:scipy.linalg.tests.test_decomp.des->dtype(des)
A:scipy.linalg.tests.test_decomp.v->numpy.ones(3, dtype=float)
A:scipy.linalg.tests.test_decomp.h->dot(dot(v.T.conj(), diag(d)), v)
A:scipy.linalg.tests.test_decomp.H->dot(H, mat)
A:scipy.linalg.tests.test_decomp.D->array(([1, -1, 0], [-1, 1, 0], [0, 0, 0]))
A:scipy.linalg.tests.test_decomp.x->numpy.array([[1, 2, 3], [4, 5, 6], [7, 8, 8]])
A:scipy.linalg.tests.test_decomp.D[n - 1]->sign(x[0])
A:scipy.linalg.tests.test_decomp.mat->eye(dim)
A:scipy.linalg.tests.test_decomp.w->w.astype(dtype).astype(dtype)
A:scipy.linalg.tests.test_decomp.a->zeros(1608, dtype=np.uint8)
A:scipy.linalg.tests.test_decomp.(w, v)->eig(a, check_finite=False)
A:scipy.linalg.tests.test_decomp.v0->array([1, 1, (1 + sqrt(93) / 3) / 2])
A:scipy.linalg.tests.test_decomp.v1->array([3.0, 0, -1])
A:scipy.linalg.tests.test_decomp.v2->array([1, 1, (1 - sqrt(93) / 3) / 2])
A:scipy.linalg.tests.test_decomp.(w, vl, vr)->eig(a, left=1, right=1)
A:scipy.linalg.tests.test_decomp.(w, vr)->eig(A, B)
A:scipy.linalg.tests.test_decomp.wt->eigvals(A, B)
A:scipy.linalg.tests.test_decomp.val1->dot(A, vr)
A:scipy.linalg.tests.test_decomp.A->asarray(M)
A:scipy.linalg.tests.test_decomp.B->random([n, n])
A:scipy.linalg.tests.test_decomp.olderr->numpy.seterr(all='ignore')
A:scipy.linalg.tests.test_decomp.M->numpy.eye(10, dtype=float)
A:scipy.linalg.tests.test_decomp.K->array(([2, -1, -1], [-1, 2, -1], [-1, -1, 2]))
A:scipy.linalg.tests.test_decomp.Z->zeros((3, 3))
A:scipy.linalg.tests.test_decomp.I->identity(3)
A:scipy.linalg.tests.test_decomp.(A, B)->matrices(omega=k * 5.0 / 100)
A:scipy.linalg.tests.test_decomp.(ew, ev)->numpy.linalg.eig(self.herm_mat)
A:scipy.linalg.tests.test_decomp.args->list(args)
A:scipy.linalg.tests.test_decomp.self.bandmat_sym->zeros((LDAB, N), dtype=float)
A:scipy.linalg.tests.test_decomp.self.bandmat_herm->zeros((LDAB, N), dtype=complex)
A:scipy.linalg.tests.test_decomp.self.bandmat_sym[LDAB - i - 1, i:N]->diag(self.sym_mat, i)
A:scipy.linalg.tests.test_decomp.self.bandmat_herm[LDAB - i - 1, i:N]->diag(self.herm_mat, i)
A:scipy.linalg.tests.test_decomp.self.bandmat_real->zeros((LDAB, N), dtype=float)
A:scipy.linalg.tests.test_decomp.self.bandmat_real[2 * self.KL, :]->diag(self.real_mat)
A:scipy.linalg.tests.test_decomp.self.bandmat_real[2 * self.KL - 1 - i, i + 1:N]->diag(self.real_mat, i + 1)
A:scipy.linalg.tests.test_decomp.self.bandmat_real[2 * self.KL + 1 + i, 0:N - 1 - i]->diag(self.real_mat, -i - 1)
A:scipy.linalg.tests.test_decomp.self.bandmat_comp->zeros((LDAB, N), dtype=complex)
A:scipy.linalg.tests.test_decomp.self.bandmat_comp[2 * self.KL, :]->diag(self.comp_mat)
A:scipy.linalg.tests.test_decomp.self.bandmat_comp[2 * self.KL - 1 - i, i + 1:N]->diag(self.comp_mat, i + 1)
A:scipy.linalg.tests.test_decomp.self.bandmat_comp[2 * self.KL + 1 + i, 0:N - 1 - i]->diag(self.comp_mat, -i - 1)
A:scipy.linalg.tests.test_decomp.(w, evec, info)->zhbevd(self.bandmat_herm, compute_v=1)
A:scipy.linalg.tests.test_decomp.(N, N)->shape(self.herm_mat)
A:scipy.linalg.tests.test_decomp.(w, evec, num, ifail, info)->zhbevx(self.bandmat_herm, 0.0, 0.0, 1, N, compute_v=1, range=2)
A:scipy.linalg.tests.test_decomp.w_sym->eigvals_banded(self.bandmat_sym, check_finite=False)
A:scipy.linalg.tests.test_decomp.w_herm->eigvals_banded(self.bandmat_herm)
A:scipy.linalg.tests.test_decomp.w_sym_ind->eigvals_banded(self.bandmat_sym, select='i', select_range=(ind1, ind2))
A:scipy.linalg.tests.test_decomp.w_herm_ind->eigvals_banded(self.bandmat_herm, select='i', select_range=(ind1, ind2))
A:scipy.linalg.tests.test_decomp.w_sym_val->eigvals_banded(self.bandmat_sym, select='v', select_range=(v_lower, v_upper))
A:scipy.linalg.tests.test_decomp.w_herm_val->eigvals_banded(self.bandmat_herm, select='v', select_range=(v_lower, v_upper))
A:scipy.linalg.tests.test_decomp.(w_sym, evec_sym)->eig_banded(self.bandmat_sym, check_finite=False)
A:scipy.linalg.tests.test_decomp.(w_herm, evec_herm)->eig_banded(self.bandmat_herm)
A:scipy.linalg.tests.test_decomp.(w_sym_ind, evec_sym_ind)->eig_banded(self.bandmat_sym, select='i', select_range=(ind1, ind2))
A:scipy.linalg.tests.test_decomp.(w_herm_ind, evec_herm_ind)->eig_banded(self.bandmat_herm, select='i', select_range=(ind1, ind2))
A:scipy.linalg.tests.test_decomp.(w_sym_val, evec_sym_val)->eig_banded(self.bandmat_sym, select='v', select_range=(v_lower, v_upper))
A:scipy.linalg.tests.test_decomp.(w_herm_val, evec_herm_val)->eig_banded(self.bandmat_herm, select='v', select_range=(v_lower, v_upper))
A:scipy.linalg.tests.test_decomp.(M, N)->shape(self.comp_mat)
A:scipy.linalg.tests.test_decomp.(lu_symm_band, ipiv, info)->zgbtrf(self.bandmat_comp, self.KL, self.KU)
A:scipy.linalg.tests.test_decomp.u->diag(lu_symm_band[2 * self.KL, :])
A:scipy.linalg.tests.test_decomp.(p_lin, l_lin, u_lin)->lu(self.comp_mat, permute_l=0)
A:scipy.linalg.tests.test_decomp.(y, info)->zgbtrs(lu_symm_band, self.KL, self.KU, self.bc, ipiv)
A:scipy.linalg.tests.test_decomp.y_lin->numpy.linalg.solve(self.comp_mat, self.bc)
A:scipy.linalg.tests.test_decomp.a_c->zeros(1608, dtype=np.uint8).copy()
A:scipy.linalg.tests.test_decomp.(w, z)->eigh(a, b)
A:scipy.linalg.tests.test_decomp.b->numpy.ones(10)
A:scipy.linalg.tests.test_decomp.self.a->self.a.astype(float32)
A:scipy.linalg.tests.test_decomp.self.ca->self.ca.astype(complex64)
A:scipy.linalg.tests.test_decomp.self.b->self.b.astype(float32)
A:scipy.linalg.tests.test_decomp.self.cb->self.cb.astype(complex64)
A:scipy.linalg.tests.test_decomp.self.hrect->self.hrect.astype(float32)
A:scipy.linalg.tests.test_decomp.self.vrect->self.vrect.astype(float32)
A:scipy.linalg.tests.test_decomp.self.med->self.vrect.astype(float32)
A:scipy.linalg.tests.test_decomp.(p, l, u)->lu(self.a, check_finite=False)
A:scipy.linalg.tests.test_decomp.(pl, u)->lu(data, permute_l=1)
A:scipy.linalg.tests.test_decomp.(LU, P)->lu_factor(A)
A:scipy.linalg.tests.test_decomp.self.chrect->self.hrect.astype(complex64)
A:scipy.linalg.tests.test_decomp.self.cvrect->self.vrect.astype(complex64)
A:scipy.linalg.tests.test_decomp.self.cmed->self.vrect.astype(complex64)
A:scipy.linalg.tests.test_decomp.a0->random((10, 10))
A:scipy.linalg.tests.test_decomp.x1->solve(a, b)
A:scipy.linalg.tests.test_decomp.lu_a->lu_factor(a, check_finite=False)
A:scipy.linalg.tests.test_decomp.x2->lu_solve(lu_a, b, check_finite=False)
A:scipy.linalg.tests.test_decomp.(u, s, vh)->svd(a, check_finite=False)
A:scipy.linalg.tests.test_decomp.sigma->zeros((u.shape[0], vh.shape[0]), s.dtype.char)
A:scipy.linalg.tests.test_decomp.s->svdvals(a, check_finite=False)
A:scipy.linalg.tests.test_decomp.(q, r)->qr(a, check_finite=False)
A:scipy.linalg.tests.test_decomp.(qc, r)->qr_multiply(a, identity(n), 'left')
A:scipy.linalg.tests.test_decomp.(qc, r2)->qr_multiply(a, c, 'left', overwrite_c=True)
A:scipy.linalg.tests.test_decomp.(q, r, p)->qr(a, pivoting=True)
A:scipy.linalg.tests.test_decomp.d->abs(diag(r))
A:scipy.linalg.tests.test_decomp.(q2, r2)->qr(a[:, p])
A:scipy.linalg.tests.test_decomp.(q, r, jpvt)->qr(a, pivoting=True)
A:scipy.linalg.tests.test_decomp.(qc, r, jpvt)->qr_multiply(a, c, pivoting=True)
A:scipy.linalg.tests.test_decomp.c->random([m])
A:scipy.linalg.tests.test_decomp.(qc, r, kpvt)->qr_multiply(a, c, 'left', True)
A:scipy.linalg.tests.test_decomp.(cq, r2)->qr_multiply(a, c)
A:scipy.linalg.tests.test_decomp.(cq, r)->qr_multiply(a, identity(n))
A:scipy.linalg.tests.test_decomp.(cq, r, jpvt)->qr_multiply(a, identity(2), pivoting=True)
A:scipy.linalg.tests.test_decomp.(r, q)->rq(a, check_finite=False)
A:scipy.linalg.tests.test_decomp.r2->rq(a, mode='r')
A:scipy.linalg.tests.test_decomp.(t, z)->schur(a, check_finite=False)
A:scipy.linalg.tests.test_decomp.(tc, zc)->schur(a, 'complex')
A:scipy.linalg.tests.test_decomp.(tc2, zc2)->rsf2csf(tc, zc)
A:scipy.linalg.tests.test_decomp.(s, u, sdim)->schur(a, sort=rhp_function)
A:scipy.linalg.tests.test_decomp.(h, q)->hessenberg(a, calc_q=1, check_finite=False)
A:scipy.linalg.tests.test_decomp.h1->dot(transp(conj(q)), dot(a, q))
A:scipy.linalg.tests.test_decomp.(AA, BB, Q, Z)->qz(A, B, check_finite=False)
A:scipy.linalg.tests.test_decomp.aa->numpy.frombuffer(aa.data, offset=4, count=a[i].size, dtype=a[i].dtype)
A:scipy.linalg.tests.test_decomp.bb->dot(dot(Q, BB), Z.conjugate().T)
A:scipy.linalg.tests.test_decomp.(AA, BB, Q, Z, sdim)->qz(A, B, sort=sort)
A:scipy.linalg.tests.test_decomp.L->numpy.eye(10, dtype=float).tolist()
A:scipy.linalg.tests.test_decomp.M2->numpy.eye(10, dtype=float).copy()
A:scipy.linalg.tests.test_decomp.F1->Fake1()
A:scipy.linalg.tests.test_decomp.F2->Fake2()
A:scipy.linalg.tests.test_decomp.AF1->asarray(F1)
A:scipy.linalg.tests.test_decomp.AF2->asarray(F2)
A:scipy.linalg.tests.test_decomp.arr->asarray(item)
A:scipy.linalg.tests.test_decomp.z->numpy.frombuffer(a.data, offset=8, count=100, dtype=complex)
A:scipy.linalg.tests.test_decomp.R->numpy.arange(100)
A:scipy.linalg.tests.test_decomp.S->numpy.frombuffer(S.data, offset=4, count=100, dtype=np.float)
A:scipy.linalg.tests.test_decomp.(LU, piv)->lu_factor(S)
A:scipy.linalg.tests.test_decomp.xlu->lu_factor(x)
scipy.linalg.tests.test_TestDatacopied(TestCase)
scipy.linalg.tests.test_TestDatacopied.test_datacopied(self)
scipy.linalg.tests.test_TestDiagSVD(TestCase)
scipy.linalg.tests.test_TestDiagSVD.test_simple(self)
scipy.linalg.tests.test_TestEig(object)
scipy.linalg.tests.test_TestEig._check_gen_eig(self,A,B)
scipy.linalg.tests.test_TestEig.test_bad_geneig(self)
scipy.linalg.tests.test_TestEig.test_check_finite(self)
scipy.linalg.tests.test_TestEig.test_falker(self)
scipy.linalg.tests.test_TestEig.test_not_square_error(self)
scipy.linalg.tests.test_TestEig.test_shape_mismatch(self)
scipy.linalg.tests.test_TestEig.test_simple(self)
scipy.linalg.tests.test_TestEig.test_simple_complex(self)
scipy.linalg.tests.test_TestEig.test_simple_complex_eig(self)
scipy.linalg.tests.test_TestEig.test_singular(self)
scipy.linalg.tests.test_TestEigBanded(self,*args)
scipy.linalg.tests.test_TestEigBanded.create_bandmat(self)
scipy.linalg.tests.test_TestEigBanded.test_dgbtrf(self)
scipy.linalg.tests.test_TestEigBanded.test_dgbtrs(self)
scipy.linalg.tests.test_TestEigBanded.test_dsbev(self)
scipy.linalg.tests.test_TestEigBanded.test_dsbevd(self)
scipy.linalg.tests.test_TestEigBanded.test_dsbevx(self)
scipy.linalg.tests.test_TestEigBanded.test_eig_banded(self)
scipy.linalg.tests.test_TestEigBanded.test_eigvals_banded(self)
scipy.linalg.tests.test_TestEigBanded.test_zgbtrf(self)
scipy.linalg.tests.test_TestEigBanded.test_zgbtrs(self)
scipy.linalg.tests.test_TestEigBanded.test_zhbevd(self)
scipy.linalg.tests.test_TestEigBanded.test_zhbevx(self)
scipy.linalg.tests.test_TestEigVals(TestCase)
scipy.linalg.tests.test_TestEigVals.test_check_finite(self)
scipy.linalg.tests.test_TestEigVals.test_simple(self)
scipy.linalg.tests.test_TestEigVals.test_simple_complex(self)
scipy.linalg.tests.test_TestEigVals.test_simple_tr(self)
scipy.linalg.tests.test_TestHessenberg(TestCase)
scipy.linalg.tests.test_TestHessenberg.test_check_finite(self)
scipy.linalg.tests.test_TestHessenberg.test_random(self)
scipy.linalg.tests.test_TestHessenberg.test_random_complex(self)
scipy.linalg.tests.test_TestHessenberg.test_simple(self)
scipy.linalg.tests.test_TestHessenberg.test_simple2(self)
scipy.linalg.tests.test_TestHessenberg.test_simple_complex(self)
scipy.linalg.tests.test_TestLU(self,*args,**kw)
scipy.linalg.tests.test_TestLU._test_common(self,data)
scipy.linalg.tests.test_TestLU.test_check_finite(self)
scipy.linalg.tests.test_TestLU.test_hrectangular(self)
scipy.linalg.tests.test_TestLU.test_hrectangular_complex(self)
scipy.linalg.tests.test_TestLU.test_medium1(self)
scipy.linalg.tests.test_TestLU.test_medium1_complex(self)
scipy.linalg.tests.test_TestLU.test_simple(self)
scipy.linalg.tests.test_TestLU.test_simple2(self)
scipy.linalg.tests.test_TestLU.test_simple2_complex(self)
scipy.linalg.tests.test_TestLU.test_simple_complex(self)
scipy.linalg.tests.test_TestLU.test_simple_known(self)
scipy.linalg.tests.test_TestLU.test_vrectangular(self)
scipy.linalg.tests.test_TestLU.test_vrectangular_complex(self)
scipy.linalg.tests.test_TestLUSingle(self,*args,**kw)
scipy.linalg.tests.test_TestLUSolve(TestCase)
scipy.linalg.tests.test_TestLUSolve.setUp(self)
scipy.linalg.tests.test_TestLUSolve.test_check_finite(self)
scipy.linalg.tests.test_TestLUSolve.test_lu(self)
scipy.linalg.tests.test_TestOverwrite(object)
scipy.linalg.tests.test_TestOverwrite.test_eig(self)
scipy.linalg.tests.test_TestOverwrite.test_eig_banded(self)
scipy.linalg.tests.test_TestOverwrite.test_eigh(self)
scipy.linalg.tests.test_TestOverwrite.test_eigvals(self)
scipy.linalg.tests.test_TestOverwrite.test_eigvals_banded(self)
scipy.linalg.tests.test_TestOverwrite.test_eigvalsh(self)
scipy.linalg.tests.test_TestOverwrite.test_hessenberg(self)
scipy.linalg.tests.test_TestOverwrite.test_lu(self)
scipy.linalg.tests.test_TestOverwrite.test_lu_factor(self)
scipy.linalg.tests.test_TestOverwrite.test_lu_solve(self)
scipy.linalg.tests.test_TestOverwrite.test_qr(self)
scipy.linalg.tests.test_TestOverwrite.test_rq(self)
scipy.linalg.tests.test_TestOverwrite.test_schur(self)
scipy.linalg.tests.test_TestOverwrite.test_schur_complex(self)
scipy.linalg.tests.test_TestOverwrite.test_svd(self)
scipy.linalg.tests.test_TestOverwrite.test_svdvals(self)
scipy.linalg.tests.test_TestQR(TestCase)
scipy.linalg.tests.test_TestQR.setUp(self)
scipy.linalg.tests.test_TestQR.test_check_finite(self)
scipy.linalg.tests.test_TestQR.test_random(self)
scipy.linalg.tests.test_TestQR.test_random_complex(self)
scipy.linalg.tests.test_TestQR.test_random_complex_left(self)
scipy.linalg.tests.test_TestQR.test_random_complex_pivoting(self)
scipy.linalg.tests.test_TestQR.test_random_complex_right(self)
scipy.linalg.tests.test_TestQR.test_random_left(self)
scipy.linalg.tests.test_TestQR.test_random_pivoting(self)
scipy.linalg.tests.test_TestQR.test_random_right(self)
scipy.linalg.tests.test_TestQR.test_random_tall(self)
scipy.linalg.tests.test_TestQR.test_random_tall_e(self)
scipy.linalg.tests.test_TestQR.test_random_tall_e_pivoting(self)
scipy.linalg.tests.test_TestQR.test_random_tall_left(self)
scipy.linalg.tests.test_TestQR.test_random_tall_pivoting(self)
scipy.linalg.tests.test_TestQR.test_random_tall_right(self)
scipy.linalg.tests.test_TestQR.test_random_trap(self)
scipy.linalg.tests.test_TestQR.test_random_trap_pivoting(self)
scipy.linalg.tests.test_TestQR.test_simple(self)
scipy.linalg.tests.test_TestQR.test_simple_complex(self)
scipy.linalg.tests.test_TestQR.test_simple_complex_left(self)
scipy.linalg.tests.test_TestQR.test_simple_complex_left_conjugate(self)
scipy.linalg.tests.test_TestQR.test_simple_complex_left_pivoting(self)
scipy.linalg.tests.test_TestQR.test_simple_complex_pivoting(self)
scipy.linalg.tests.test_TestQR.test_simple_complex_right(self)
scipy.linalg.tests.test_TestQR.test_simple_complex_right_conjugate(self)
scipy.linalg.tests.test_TestQR.test_simple_complex_right_pivoting(self)
scipy.linalg.tests.test_TestQR.test_simple_complex_tall_left_conjugate(self)
scipy.linalg.tests.test_TestQR.test_simple_fat(self)
scipy.linalg.tests.test_TestQR.test_simple_fat_e(self)
scipy.linalg.tests.test_TestQR.test_simple_fat_e_pivoting(self)
scipy.linalg.tests.test_TestQR.test_simple_fat_left(self)
scipy.linalg.tests.test_TestQR.test_simple_fat_left_pivoting(self)
scipy.linalg.tests.test_TestQR.test_simple_fat_pivoting(self)
scipy.linalg.tests.test_TestQR.test_simple_fat_right(self)
scipy.linalg.tests.test_TestQR.test_simple_fat_right_pivoting(self)
scipy.linalg.tests.test_TestQR.test_simple_left(self)
scipy.linalg.tests.test_TestQR.test_simple_left(self)
scipy.linalg.tests.test_TestQR.test_simple_left_pivoting(self)
scipy.linalg.tests.test_TestQR.test_simple_pivoting(self)
scipy.linalg.tests.test_TestQR.test_simple_right(self)
scipy.linalg.tests.test_TestQR.test_simple_right(self)
scipy.linalg.tests.test_TestQR.test_simple_right_pivoting(self)
scipy.linalg.tests.test_TestQR.test_simple_tall(self)
scipy.linalg.tests.test_TestQR.test_simple_tall_complex_left(self)
scipy.linalg.tests.test_TestQR.test_simple_tall_e(self)
scipy.linalg.tests.test_TestQR.test_simple_tall_e_pivoting(self)
scipy.linalg.tests.test_TestQR.test_simple_tall_left(self)
scipy.linalg.tests.test_TestQR.test_simple_tall_left_pivoting(self)
scipy.linalg.tests.test_TestQR.test_simple_tall_pivoting(self)
scipy.linalg.tests.test_TestQR.test_simple_tall_right(self)
scipy.linalg.tests.test_TestQR.test_simple_tall_right_pivoting(self)
scipy.linalg.tests.test_TestQR.test_simple_trap(self)
scipy.linalg.tests.test_TestQR.test_simple_trap_pivoting(self)
scipy.linalg.tests.test_TestQZ(TestCase)
scipy.linalg.tests.test_TestQZ.setUp(self)
scipy.linalg.tests.test_TestQZ.test_check_finite(self)
scipy.linalg.tests.test_TestQZ.test_qz_complex(self)
scipy.linalg.tests.test_TestQZ.test_qz_complex64(self)
scipy.linalg.tests.test_TestQZ.test_qz_double(self)
scipy.linalg.tests.test_TestQZ.test_qz_double_complex(self)
scipy.linalg.tests.test_TestQZ.test_qz_double_sort(self)
scipy.linalg.tests.test_TestQZ.test_qz_single(self)
scipy.linalg.tests.test_TestRQ(TestCase)
scipy.linalg.tests.test_TestRQ.setUp(self)
scipy.linalg.tests.test_TestRQ.test_check_finite(self)
scipy.linalg.tests.test_TestRQ.test_r(self)
scipy.linalg.tests.test_TestRQ.test_random(self)
scipy.linalg.tests.test_TestRQ.test_random_complex(self)
scipy.linalg.tests.test_TestRQ.test_random_complex_economic(self)
scipy.linalg.tests.test_TestRQ.test_random_tall(self)
scipy.linalg.tests.test_TestRQ.test_random_trap(self)
scipy.linalg.tests.test_TestRQ.test_random_trap_economic(self)
scipy.linalg.tests.test_TestRQ.test_simple(self)
scipy.linalg.tests.test_TestRQ.test_simple_complex(self)
scipy.linalg.tests.test_TestRQ.test_simple_fat(self)
scipy.linalg.tests.test_TestRQ.test_simple_tall(self)
scipy.linalg.tests.test_TestRQ.test_simple_trap(self)
scipy.linalg.tests.test_TestSVD(TestCase)
scipy.linalg.tests.test_TestSVD.setUp(self)
scipy.linalg.tests.test_TestSVD.test_check_finite(self)
scipy.linalg.tests.test_TestSVD.test_crash_1580(self)
scipy.linalg.tests.test_TestSVD.test_random(self)
scipy.linalg.tests.test_TestSVD.test_random_complex(self)
scipy.linalg.tests.test_TestSVD.test_simple(self)
scipy.linalg.tests.test_TestSVD.test_simple_complex(self)
scipy.linalg.tests.test_TestSVD.test_simple_overdet(self)
scipy.linalg.tests.test_TestSVD.test_simple_singular(self)
scipy.linalg.tests.test_TestSVD.test_simple_underdet(self)
scipy.linalg.tests.test_TestSVDVals(TestCase)
scipy.linalg.tests.test_TestSVDVals.test_check_finite(self)
scipy.linalg.tests.test_TestSVDVals.test_simple(self)
scipy.linalg.tests.test_TestSVDVals.test_simple_complex(self)
scipy.linalg.tests.test_TestSVDVals.test_simple_overdet(self)
scipy.linalg.tests.test_TestSVDVals.test_simple_overdet_complex(self)
scipy.linalg.tests.test_TestSVDVals.test_simple_underdet(self)
scipy.linalg.tests.test_TestSVDVals.test_simple_underdet_complex(self)
scipy.linalg.tests.test_TestSchur(TestCase)
scipy.linalg.tests.test_TestSchur.test_check_finite(self)
scipy.linalg.tests.test_TestSchur.test_simple(self)
scipy.linalg.tests.test_TestSchur.test_sort(self)
scipy.linalg.tests.test_TestSchur.test_sort_errors(self)
scipy.linalg.tests.test__complex_symrand(dim,dtype)
scipy.linalg.tests.test_assert_dtype_equal(act,des)
scipy.linalg.tests.test_check_lapack_misaligned(func,args,kwargs)
scipy.linalg.tests.test_decomp.TestDatacopied(TestCase)
scipy.linalg.tests.test_decomp.TestDatacopied.test_datacopied(self)
scipy.linalg.tests.test_decomp.TestDiagSVD(TestCase)
scipy.linalg.tests.test_decomp.TestDiagSVD.test_simple(self)
scipy.linalg.tests.test_decomp.TestEig(object)
scipy.linalg.tests.test_decomp.TestEig._check_gen_eig(self,A,B)
scipy.linalg.tests.test_decomp.TestEig.test_bad_geneig(self)
scipy.linalg.tests.test_decomp.TestEig.test_check_finite(self)
scipy.linalg.tests.test_decomp.TestEig.test_falker(self)
scipy.linalg.tests.test_decomp.TestEig.test_not_square_error(self)
scipy.linalg.tests.test_decomp.TestEig.test_shape_mismatch(self)
scipy.linalg.tests.test_decomp.TestEig.test_simple(self)
scipy.linalg.tests.test_decomp.TestEig.test_simple_complex(self)
scipy.linalg.tests.test_decomp.TestEig.test_simple_complex_eig(self)
scipy.linalg.tests.test_decomp.TestEig.test_singular(self)
scipy.linalg.tests.test_decomp.TestEigBanded(self,*args)
scipy.linalg.tests.test_decomp.TestEigBanded.__init__(self,*args)
scipy.linalg.tests.test_decomp.TestEigBanded.create_bandmat(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_dgbtrf(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_dgbtrs(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_dsbev(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_dsbevd(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_dsbevx(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_eig_banded(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_eigvals_banded(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_zgbtrf(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_zgbtrs(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_zhbevd(self)
scipy.linalg.tests.test_decomp.TestEigBanded.test_zhbevx(self)
scipy.linalg.tests.test_decomp.TestEigVals(TestCase)
scipy.linalg.tests.test_decomp.TestEigVals.test_check_finite(self)
scipy.linalg.tests.test_decomp.TestEigVals.test_simple(self)
scipy.linalg.tests.test_decomp.TestEigVals.test_simple_complex(self)
scipy.linalg.tests.test_decomp.TestEigVals.test_simple_tr(self)
scipy.linalg.tests.test_decomp.TestHessenberg(TestCase)
scipy.linalg.tests.test_decomp.TestHessenberg.test_check_finite(self)
scipy.linalg.tests.test_decomp.TestHessenberg.test_random(self)
scipy.linalg.tests.test_decomp.TestHessenberg.test_random_complex(self)
scipy.linalg.tests.test_decomp.TestHessenberg.test_simple(self)
scipy.linalg.tests.test_decomp.TestHessenberg.test_simple2(self)
scipy.linalg.tests.test_decomp.TestHessenberg.test_simple_complex(self)
scipy.linalg.tests.test_decomp.TestLU(self,*args,**kw)
scipy.linalg.tests.test_decomp.TestLU.__init__(self,*args,**kw)
scipy.linalg.tests.test_decomp.TestLU._test_common(self,data)
scipy.linalg.tests.test_decomp.TestLU.test_check_finite(self)
scipy.linalg.tests.test_decomp.TestLU.test_hrectangular(self)
scipy.linalg.tests.test_decomp.TestLU.test_hrectangular_complex(self)
scipy.linalg.tests.test_decomp.TestLU.test_medium1(self)
scipy.linalg.tests.test_decomp.TestLU.test_medium1_complex(self)
scipy.linalg.tests.test_decomp.TestLU.test_simple(self)
scipy.linalg.tests.test_decomp.TestLU.test_simple2(self)
scipy.linalg.tests.test_decomp.TestLU.test_simple2_complex(self)
scipy.linalg.tests.test_decomp.TestLU.test_simple_complex(self)
scipy.linalg.tests.test_decomp.TestLU.test_simple_known(self)
scipy.linalg.tests.test_decomp.TestLU.test_vrectangular(self)
scipy.linalg.tests.test_decomp.TestLU.test_vrectangular_complex(self)
scipy.linalg.tests.test_decomp.TestLUSingle(self,*args,**kw)
scipy.linalg.tests.test_decomp.TestLUSingle.__init__(self,*args,**kw)
scipy.linalg.tests.test_decomp.TestLUSolve(TestCase)
scipy.linalg.tests.test_decomp.TestLUSolve.setUp(self)
scipy.linalg.tests.test_decomp.TestLUSolve.test_check_finite(self)
scipy.linalg.tests.test_decomp.TestLUSolve.test_lu(self)
scipy.linalg.tests.test_decomp.TestOverwrite(object)
scipy.linalg.tests.test_decomp.TestOverwrite.test_eig(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_eig_banded(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_eigh(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_eigvals(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_eigvals_banded(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_eigvalsh(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_hessenberg(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_lu(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_lu_factor(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_lu_solve(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_qr(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_rq(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_schur(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_schur_complex(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_svd(self)
scipy.linalg.tests.test_decomp.TestOverwrite.test_svdvals(self)
scipy.linalg.tests.test_decomp.TestQR(TestCase)
scipy.linalg.tests.test_decomp.TestQR.setUp(self)
scipy.linalg.tests.test_decomp.TestQR.test_check_finite(self)
scipy.linalg.tests.test_decomp.TestQR.test_random(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_complex(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_complex_left(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_complex_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_complex_right(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_left(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_right(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_tall(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_tall_e(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_tall_e_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_tall_left(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_tall_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_tall_right(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_trap(self)
scipy.linalg.tests.test_decomp.TestQR.test_random_trap_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_complex(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_complex_left(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_complex_left_conjugate(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_complex_left_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_complex_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_complex_right(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_complex_right_conjugate(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_complex_right_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_complex_tall_left_conjugate(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_fat(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_fat_e(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_fat_e_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_fat_left(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_fat_left_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_fat_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_fat_right(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_fat_right_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_left(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_left(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_left_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_right(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_right(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_right_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_tall(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_tall_complex_left(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_tall_e(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_tall_e_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_tall_left(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_tall_left_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_tall_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_tall_right(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_tall_right_pivoting(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_trap(self)
scipy.linalg.tests.test_decomp.TestQR.test_simple_trap_pivoting(self)
scipy.linalg.tests.test_decomp.TestQZ(TestCase)
scipy.linalg.tests.test_decomp.TestQZ.setUp(self)
scipy.linalg.tests.test_decomp.TestQZ.test_check_finite(self)
scipy.linalg.tests.test_decomp.TestQZ.test_qz_complex(self)
scipy.linalg.tests.test_decomp.TestQZ.test_qz_complex64(self)
scipy.linalg.tests.test_decomp.TestQZ.test_qz_double(self)
scipy.linalg.tests.test_decomp.TestQZ.test_qz_double_complex(self)
scipy.linalg.tests.test_decomp.TestQZ.test_qz_double_sort(self)
scipy.linalg.tests.test_decomp.TestQZ.test_qz_single(self)
scipy.linalg.tests.test_decomp.TestRQ(TestCase)
scipy.linalg.tests.test_decomp.TestRQ.setUp(self)
scipy.linalg.tests.test_decomp.TestRQ.test_check_finite(self)
scipy.linalg.tests.test_decomp.TestRQ.test_r(self)
scipy.linalg.tests.test_decomp.TestRQ.test_random(self)
scipy.linalg.tests.test_decomp.TestRQ.test_random_complex(self)
scipy.linalg.tests.test_decomp.TestRQ.test_random_complex_economic(self)
scipy.linalg.tests.test_decomp.TestRQ.test_random_tall(self)
scipy.linalg.tests.test_decomp.TestRQ.test_random_trap(self)
scipy.linalg.tests.test_decomp.TestRQ.test_random_trap_economic(self)
scipy.linalg.tests.test_decomp.TestRQ.test_simple(self)
scipy.linalg.tests.test_decomp.TestRQ.test_simple_complex(self)
scipy.linalg.tests.test_decomp.TestRQ.test_simple_fat(self)
scipy.linalg.tests.test_decomp.TestRQ.test_simple_tall(self)
scipy.linalg.tests.test_decomp.TestRQ.test_simple_trap(self)
scipy.linalg.tests.test_decomp.TestSVD(TestCase)
scipy.linalg.tests.test_decomp.TestSVD.setUp(self)
scipy.linalg.tests.test_decomp.TestSVD.test_check_finite(self)
scipy.linalg.tests.test_decomp.TestSVD.test_crash_1580(self)
scipy.linalg.tests.test_decomp.TestSVD.test_random(self)
scipy.linalg.tests.test_decomp.TestSVD.test_random_complex(self)
scipy.linalg.tests.test_decomp.TestSVD.test_simple(self)
scipy.linalg.tests.test_decomp.TestSVD.test_simple_complex(self)
scipy.linalg.tests.test_decomp.TestSVD.test_simple_overdet(self)
scipy.linalg.tests.test_decomp.TestSVD.test_simple_singular(self)
scipy.linalg.tests.test_decomp.TestSVD.test_simple_underdet(self)
scipy.linalg.tests.test_decomp.TestSVDVals(TestCase)
scipy.linalg.tests.test_decomp.TestSVDVals.test_check_finite(self)
scipy.linalg.tests.test_decomp.TestSVDVals.test_simple(self)
scipy.linalg.tests.test_decomp.TestSVDVals.test_simple_complex(self)
scipy.linalg.tests.test_decomp.TestSVDVals.test_simple_overdet(self)
scipy.linalg.tests.test_decomp.TestSVDVals.test_simple_overdet_complex(self)
scipy.linalg.tests.test_decomp.TestSVDVals.test_simple_underdet(self)
scipy.linalg.tests.test_decomp.TestSVDVals.test_simple_underdet_complex(self)
scipy.linalg.tests.test_decomp.TestSchur(TestCase)
scipy.linalg.tests.test_decomp.TestSchur.test_check_finite(self)
scipy.linalg.tests.test_decomp.TestSchur.test_simple(self)
scipy.linalg.tests.test_decomp.TestSchur.test_sort(self)
scipy.linalg.tests.test_decomp.TestSchur.test_sort_errors(self)
scipy.linalg.tests.test_decomp._complex_symrand(dim,dtype)
scipy.linalg.tests.test_decomp.assert_dtype_equal(act,des)
scipy.linalg.tests.test_decomp.check_lapack_misaligned(func,args,kwargs)
scipy.linalg.tests.test_decomp.eigenhproblem_general(desc,dim,dtype,overwrite,lower,turbo,eigvals)
scipy.linalg.tests.test_decomp.eigenhproblem_standard(desc,dim,dtype,overwrite,lower,turbo,eigvals)
scipy.linalg.tests.test_decomp.random(size)
scipy.linalg.tests.test_decomp.random_rot(dim)
scipy.linalg.tests.test_decomp.symrand(dim_or_eigv)
scipy.linalg.tests.test_decomp.test_aligned_mem()
scipy.linalg.tests.test_decomp.test_aligned_mem_complex()
scipy.linalg.tests.test_decomp.test_aligned_mem_float()
scipy.linalg.tests.test_decomp.test_eigh()
scipy.linalg.tests.test_decomp.test_eigh_integer()
scipy.linalg.tests.test_decomp.test_lapack_misaligned()
scipy.linalg.tests.test_eigenhproblem_general(desc,dim,dtype,overwrite,lower,turbo,eigvals)
scipy.linalg.tests.test_eigenhproblem_standard(desc,dim,dtype,overwrite,lower,turbo,eigvals)
scipy.linalg.tests.test_random(size)
scipy.linalg.tests.test_random_rot(dim)
scipy.linalg.tests.test_symrand(dim_or_eigv)
scipy.linalg.tests.test_test_aligned_mem()
scipy.linalg.tests.test_test_aligned_mem_complex()
scipy.linalg.tests.test_test_aligned_mem_float()
scipy.linalg.tests.test_test_eigh()
scipy.linalg.tests.test_test_eigh_integer()
scipy.linalg.tests.test_test_lapack_misaligned()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/tests/test_fblas.py----------------------------------------
A:scipy.linalg.tests.test_fblas.c->c.reshape((a.shape[0],)).reshape((a.shape[0],))
A:scipy.linalg.tests.test_fblas.x->arange(12.0, dtype=self.dtype)
A:scipy.linalg.tests.test_fblas.y->self.blas_func(1, a, x, 1, y, trans=1, incy=3)
A:scipy.linalg.tests.test_fblas.real_x->arange(12.0, dtype=self.dtype).copy()
A:scipy.linalg.tests.test_fblas.desired_x->self.blas_func(1, a, x, 1, y, trans=1, incy=3).copy()
A:scipy.linalg.tests.test_fblas.desired_y->self.blas_func(1, a, x, 1, y, trans=1, incy=3).copy()
A:scipy.linalg.tests.test_fblas.mult->array(1 + 1j, dtype=self.dtype)
A:scipy.linalg.tests.test_fblas.(alpha, beta, a, x, y)->self.get_data(y_stride=2)
scipy.linalg.tests.test_fBaseAxpy(object)
scipy.linalg.tests.test_fBaseAxpy.test_default_a(self)
scipy.linalg.tests.test_fBaseAxpy.test_simple(self)
scipy.linalg.tests.test_fBaseAxpy.test_x_and_y_stride(self)
scipy.linalg.tests.test_fBaseAxpy.test_x_bad_size(self)
scipy.linalg.tests.test_fBaseAxpy.test_x_stride(self)
scipy.linalg.tests.test_fBaseAxpy.test_y_bad_size(self)
scipy.linalg.tests.test_fBaseAxpy.test_y_stride(self)
scipy.linalg.tests.test_fBaseCopy(object)
scipy.linalg.tests.test_fBaseCopy.test_simple(self)
scipy.linalg.tests.test_fBaseCopy.test_x_and_y_stride(self)
scipy.linalg.tests.test_fBaseCopy.test_x_bad_size(self)
scipy.linalg.tests.test_fBaseCopy.test_x_stride(self)
scipy.linalg.tests.test_fBaseCopy.test_y_bad_size(self)
scipy.linalg.tests.test_fBaseCopy.test_y_stride(self)
scipy.linalg.tests.test_fBaseGemv(object)
scipy.linalg.tests.test_fBaseGemv.get_data(self,x_stride=1,y_stride=1)
scipy.linalg.tests.test_fBaseGemv.test_default_beta_y(self)
scipy.linalg.tests.test_fBaseGemv.test_simple(self)
scipy.linalg.tests.test_fBaseGemv.test_simple_transpose(self)
scipy.linalg.tests.test_fBaseGemv.test_simple_transpose_conj(self)
scipy.linalg.tests.test_fBaseGemv.test_x_stride(self)
scipy.linalg.tests.test_fBaseGemv.test_x_stride_assert(self)
scipy.linalg.tests.test_fBaseGemv.test_x_stride_transpose(self)
scipy.linalg.tests.test_fBaseGemv.test_y_stride(self)
scipy.linalg.tests.test_fBaseGemv.test_y_stride_assert(self)
scipy.linalg.tests.test_fBaseGemv.test_y_stride_transpose(self)
scipy.linalg.tests.test_fBaseScal(object)
scipy.linalg.tests.test_fBaseScal.test_simple(self)
scipy.linalg.tests.test_fBaseScal.test_x_bad_size(self)
scipy.linalg.tests.test_fBaseScal.test_x_stride(self)
scipy.linalg.tests.test_fBaseSwap(object)
scipy.linalg.tests.test_fBaseSwap.test_simple(self)
scipy.linalg.tests.test_fBaseSwap.test_x_and_y_stride(self)
scipy.linalg.tests.test_fBaseSwap.test_x_bad_size(self)
scipy.linalg.tests.test_fBaseSwap.test_x_stride(self)
scipy.linalg.tests.test_fBaseSwap.test_y_bad_size(self)
scipy.linalg.tests.test_fBaseSwap.test_y_stride(self)
scipy.linalg.tests.test_fTestDaxpy(TestCase,BaseAxpy)
scipy.linalg.tests.test_fTestDcopy(TestCase,BaseCopy)
scipy.linalg.tests.test_fTestDgemv(TestCase,BaseGemv)
scipy.linalg.tests.test_fTestDscal(TestCase,BaseScal)
scipy.linalg.tests.test_fTestDswap(TestCase,BaseSwap)
scipy.linalg.tests.test_fTestZaxpy(TestCase,BaseAxpy)
scipy.linalg.tests.test_fTestZcopy(TestCase,BaseCopy)
scipy.linalg.tests.test_fTestZgemv(TestCase,BaseGemv)
scipy.linalg.tests.test_fTestZscal(TestCase,BaseScal)
scipy.linalg.tests.test_fTestZswap(TestCase,BaseSwap)
scipy.linalg.tests.test_fblas.BaseAxpy(object)
scipy.linalg.tests.test_fblas.BaseAxpy.test_default_a(self)
scipy.linalg.tests.test_fblas.BaseAxpy.test_simple(self)
scipy.linalg.tests.test_fblas.BaseAxpy.test_x_and_y_stride(self)
scipy.linalg.tests.test_fblas.BaseAxpy.test_x_bad_size(self)
scipy.linalg.tests.test_fblas.BaseAxpy.test_x_stride(self)
scipy.linalg.tests.test_fblas.BaseAxpy.test_y_bad_size(self)
scipy.linalg.tests.test_fblas.BaseAxpy.test_y_stride(self)
scipy.linalg.tests.test_fblas.BaseCopy(object)
scipy.linalg.tests.test_fblas.BaseCopy.test_simple(self)
scipy.linalg.tests.test_fblas.BaseCopy.test_x_and_y_stride(self)
scipy.linalg.tests.test_fblas.BaseCopy.test_x_bad_size(self)
scipy.linalg.tests.test_fblas.BaseCopy.test_x_stride(self)
scipy.linalg.tests.test_fblas.BaseCopy.test_y_bad_size(self)
scipy.linalg.tests.test_fblas.BaseCopy.test_y_stride(self)
scipy.linalg.tests.test_fblas.BaseGemv(object)
scipy.linalg.tests.test_fblas.BaseGemv.get_data(self,x_stride=1,y_stride=1)
scipy.linalg.tests.test_fblas.BaseGemv.test_default_beta_y(self)
scipy.linalg.tests.test_fblas.BaseGemv.test_simple(self)
scipy.linalg.tests.test_fblas.BaseGemv.test_simple_transpose(self)
scipy.linalg.tests.test_fblas.BaseGemv.test_simple_transpose_conj(self)
scipy.linalg.tests.test_fblas.BaseGemv.test_x_stride(self)
scipy.linalg.tests.test_fblas.BaseGemv.test_x_stride_assert(self)
scipy.linalg.tests.test_fblas.BaseGemv.test_x_stride_transpose(self)
scipy.linalg.tests.test_fblas.BaseGemv.test_y_stride(self)
scipy.linalg.tests.test_fblas.BaseGemv.test_y_stride_assert(self)
scipy.linalg.tests.test_fblas.BaseGemv.test_y_stride_transpose(self)
scipy.linalg.tests.test_fblas.BaseScal(object)
scipy.linalg.tests.test_fblas.BaseScal.test_simple(self)
scipy.linalg.tests.test_fblas.BaseScal.test_x_bad_size(self)
scipy.linalg.tests.test_fblas.BaseScal.test_x_stride(self)
scipy.linalg.tests.test_fblas.BaseSwap(object)
scipy.linalg.tests.test_fblas.BaseSwap.test_simple(self)
scipy.linalg.tests.test_fblas.BaseSwap.test_x_and_y_stride(self)
scipy.linalg.tests.test_fblas.BaseSwap.test_x_bad_size(self)
scipy.linalg.tests.test_fblas.BaseSwap.test_x_stride(self)
scipy.linalg.tests.test_fblas.BaseSwap.test_y_bad_size(self)
scipy.linalg.tests.test_fblas.BaseSwap.test_y_stride(self)
scipy.linalg.tests.test_fblas.TestDaxpy(TestCase,BaseAxpy)
scipy.linalg.tests.test_fblas.TestDcopy(TestCase,BaseCopy)
scipy.linalg.tests.test_fblas.TestDgemv(TestCase,BaseGemv)
scipy.linalg.tests.test_fblas.TestDscal(TestCase,BaseScal)
scipy.linalg.tests.test_fblas.TestDswap(TestCase,BaseSwap)
scipy.linalg.tests.test_fblas.TestZaxpy(TestCase,BaseAxpy)
scipy.linalg.tests.test_fblas.TestZcopy(TestCase,BaseCopy)
scipy.linalg.tests.test_fblas.TestZgemv(TestCase,BaseGemv)
scipy.linalg.tests.test_fblas.TestZscal(TestCase,BaseScal)
scipy.linalg.tests.test_fblas.TestZswap(TestCase,BaseSwap)
scipy.linalg.tests.test_fblas.matrixmultiply(a,b)
scipy.linalg.tests.test_fmatrixmultiply(a,b)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/tests/test_basic.py----------------------------------------
A:scipy.linalg.tests.test_basic.a->array([10000.0] + [1] * 10000, dtype=float32)
A:scipy.linalg.tests.test_basic.ab->array([[-99, 1.0, 1.0], [4.0, 4.0, 4.0]])
A:scipy.linalg.tests.test_basic.b4->array([10.0, 0.0, 2.0, 14.0])
A:scipy.linalg.tests.test_basic.b4by1->array([10.0, 0.0, 2.0, 14.0]).reshape(-1, 1)
A:scipy.linalg.tests.test_basic.b4by2->array([[2, 1], [-30, 4], [2, 3], [1, 3]])
A:scipy.linalg.tests.test_basic.b4by4->array([[1, 0, 0, 0], [0, 0, 0, 1j], [0, 1, 0, 0], [0, 1, 0, 0]])
A:scipy.linalg.tests.test_basic.x->numpy.array([1j, 2j, 3j], dtype=dtype)
A:scipy.linalg.tests.test_basic.bad->array([1.0, 2.0, 3.0, 4.0]).reshape(-1, 4)
A:scipy.linalg.tests.test_basic.b->random([n, 3])
A:scipy.linalg.tests.test_basic.expected->array([[0.0, 1j], [1.0, 0.0], [1.0, 1.0]])
A:scipy.linalg.tests.test_basic.x0->solve(a, b)
A:scipy.linalg.tests.test_basic.X->zeros((n, n), 'D')
A:scipy.linalg.tests.test_basic.Ainv->inv(A)
A:scipy.linalg.tests.test_basic.X[:, i]->solve(A, r)
A:scipy.linalg.tests.test_basic.a[i, i]->abs(20 * (0.1 + a[i, i]))
A:scipy.linalg.tests.test_basic.a[i, j]->conjugate(a[j, i])
A:scipy.linalg.tests.test_basic.A->array([[1, 0], [1, 2]])
A:scipy.linalg.tests.test_basic.sol->solve_triangular(A, b, lower=True, check_finite=False)
A:scipy.linalg.tests.test_basic.a_inv->inv(a, check_finite=False)
A:scipy.linalg.tests.test_basic.a_det->det(a, check_finite=False)
A:scipy.linalg.tests.test_basic.d1->det(a)
A:scipy.linalg.tests.test_basic.d2->basic_det(a)
A:scipy.linalg.tests.test_basic.at->conjugate(at)
A:scipy.linalg.tests.test_basic.a1->dot(at, a)
A:scipy.linalg.tests.test_basic.b1->dot(at, b)
A:scipy.linalg.tests.test_basic.(x, res, r, s)->lstsq(a, b)
A:scipy.linalg.tests.test_basic.a_pinv->pinvh(a)
A:scipy.linalg.tests.test_basic.a_pinv2->pinv2(a)
A:scipy.linalg.tests.test_basic.(u, s, vt)->numpy.linalg.svd(a)
A:scipy.linalg.tests.test_basic.a_pinvh->pinvh(a)
A:scipy.linalg.tests.test_basic.tol->max(1e-15, np.finfo(dtype).eps.real * 20)
scipy.linalg.tests.test_TestDet(TestCase)
scipy.linalg.tests.test_TestDet.setUp(self)
scipy.linalg.tests.test_TestDet.test_check_finite(self)
scipy.linalg.tests.test_TestDet.test_random(self)
scipy.linalg.tests.test_TestDet.test_random_complex(self)
scipy.linalg.tests.test_TestDet.test_simple(self)
scipy.linalg.tests.test_TestDet.test_simple_complex(self)
scipy.linalg.tests.test_TestInv(TestCase)
scipy.linalg.tests.test_TestInv.setUp(self)
scipy.linalg.tests.test_TestInv.test_check_finite(self)
scipy.linalg.tests.test_TestInv.test_random(self)
scipy.linalg.tests.test_TestInv.test_random_complex(self)
scipy.linalg.tests.test_TestInv.test_simple(self)
scipy.linalg.tests.test_TestInv.test_simple_complex(self)
scipy.linalg.tests.test_TestLstsq(TestCase)
scipy.linalg.tests.test_TestLstsq.setUp(self)
scipy.linalg.tests.test_TestLstsq.test_check_finite(self)
scipy.linalg.tests.test_TestLstsq.test_random_complex_exact(self)
scipy.linalg.tests.test_TestLstsq.test_random_complex_overdet(self)
scipy.linalg.tests.test_TestLstsq.test_random_exact(self)
scipy.linalg.tests.test_TestLstsq.test_random_overdet(self)
scipy.linalg.tests.test_TestLstsq.test_random_overdet_large(self)
scipy.linalg.tests.test_TestLstsq.test_simple_exact(self)
scipy.linalg.tests.test_TestLstsq.test_simple_overdet(self)
scipy.linalg.tests.test_TestLstsq.test_simple_overdet_complex(self)
scipy.linalg.tests.test_TestLstsq.test_simple_underdet(self)
scipy.linalg.tests.test_TestNorm(object)
scipy.linalg.tests.test_TestNorm.test_overflow(self)
scipy.linalg.tests.test_TestNorm.test_stable(self)
scipy.linalg.tests.test_TestNorm.test_types(self)
scipy.linalg.tests.test_TestNorm.test_zero_norm(self)
scipy.linalg.tests.test_TestOverwrite(object)
scipy.linalg.tests.test_TestOverwrite.test_det(self)
scipy.linalg.tests.test_TestOverwrite.test_inv(self)
scipy.linalg.tests.test_TestOverwrite.test_lstsq(self)
scipy.linalg.tests.test_TestOverwrite.test_pinv(self)
scipy.linalg.tests.test_TestOverwrite.test_pinv2(self)
scipy.linalg.tests.test_TestOverwrite.test_pinvh(self)
scipy.linalg.tests.test_TestOverwrite.test_solve(self)
scipy.linalg.tests.test_TestOverwrite.test_solve_banded(self)
scipy.linalg.tests.test_TestOverwrite.test_solve_triangular(self)
scipy.linalg.tests.test_TestOverwrite.test_solveh_banded(self)
scipy.linalg.tests.test_TestPinv(TestCase)
scipy.linalg.tests.test_TestPinv.test_check_finite(self)
scipy.linalg.tests.test_TestPinv.test_simple_cols(self)
scipy.linalg.tests.test_TestPinv.test_simple_complex(self)
scipy.linalg.tests.test_TestPinv.test_simple_real(self)
scipy.linalg.tests.test_TestPinv.test_simple_rows(self)
scipy.linalg.tests.test_TestPinv.test_simple_singular(self)
scipy.linalg.tests.test_TestPinvSymmetric(TestCase)
scipy.linalg.tests.test_TestPinvSymmetric.test_nonpositive(self)
scipy.linalg.tests.test_TestPinvSymmetric.test_simple_complex(self)
scipy.linalg.tests.test_TestPinvSymmetric.test_simple_real(self)
scipy.linalg.tests.test_TestSolve(TestCase)
scipy.linalg.tests.test_TestSolve.setUp(self)
scipy.linalg.tests.test_TestSolve.test_20Feb04_bug(self)
scipy.linalg.tests.test_TestSolve.test_check_finite(self)
scipy.linalg.tests.test_TestSolve.test_nils_20Feb04(self)
scipy.linalg.tests.test_TestSolve.test_random(self)
scipy.linalg.tests.test_TestSolve.test_random_complex(self)
scipy.linalg.tests.test_TestSolve.test_random_sym(self)
scipy.linalg.tests.test_TestSolve.test_random_sym_complex(self)
scipy.linalg.tests.test_TestSolve.test_simple(self)
scipy.linalg.tests.test_TestSolve.test_simple_complex(self)
scipy.linalg.tests.test_TestSolve.test_simple_sym(self)
scipy.linalg.tests.test_TestSolve.test_simple_sym_complex(self)
scipy.linalg.tests.test_TestSolveBanded(TestCase)
scipy.linalg.tests.test_TestSolveBanded.test_bad_shape(self)
scipy.linalg.tests.test_TestSolveBanded.test_check_finite(self)
scipy.linalg.tests.test_TestSolveBanded.test_complex(self)
scipy.linalg.tests.test_TestSolveBanded.test_real(self)
scipy.linalg.tests.test_TestSolveHBanded(TestCase)
scipy.linalg.tests.test_TestSolveHBanded.test_01_complex(self)
scipy.linalg.tests.test_TestSolveHBanded.test_01_float32(self)
scipy.linalg.tests.test_TestSolveHBanded.test_01_lower(self)
scipy.linalg.tests.test_TestSolveHBanded.test_01_upper(self)
scipy.linalg.tests.test_TestSolveHBanded.test_02_complex(self)
scipy.linalg.tests.test_TestSolveHBanded.test_02_float32(self)
scipy.linalg.tests.test_TestSolveHBanded.test_02_lower(self)
scipy.linalg.tests.test_TestSolveHBanded.test_02_upper(self)
scipy.linalg.tests.test_TestSolveHBanded.test_03_upper(self)
scipy.linalg.tests.test_TestSolveHBanded.test_bad_shapes(self)
scipy.linalg.tests.test_TestSolveHBanded.test_check_finite(self)
scipy.linalg.tests.test_TestSolveTriangular(TestCase)
scipy.linalg.tests.test_TestSolveTriangular.test_check_finite(self)
scipy.linalg.tests.test_TestSolveTriangular.test_simple(self)
scipy.linalg.tests.test_TestSolveTriangular.test_simple_complex(self)
scipy.linalg.tests.test_basic.TestDet(TestCase)
scipy.linalg.tests.test_basic.TestDet.setUp(self)
scipy.linalg.tests.test_basic.TestDet.test_check_finite(self)
scipy.linalg.tests.test_basic.TestDet.test_random(self)
scipy.linalg.tests.test_basic.TestDet.test_random_complex(self)
scipy.linalg.tests.test_basic.TestDet.test_simple(self)
scipy.linalg.tests.test_basic.TestDet.test_simple_complex(self)
scipy.linalg.tests.test_basic.TestInv(TestCase)
scipy.linalg.tests.test_basic.TestInv.setUp(self)
scipy.linalg.tests.test_basic.TestInv.test_check_finite(self)
scipy.linalg.tests.test_basic.TestInv.test_random(self)
scipy.linalg.tests.test_basic.TestInv.test_random_complex(self)
scipy.linalg.tests.test_basic.TestInv.test_simple(self)
scipy.linalg.tests.test_basic.TestInv.test_simple_complex(self)
scipy.linalg.tests.test_basic.TestLstsq(TestCase)
scipy.linalg.tests.test_basic.TestLstsq.setUp(self)
scipy.linalg.tests.test_basic.TestLstsq.test_check_finite(self)
scipy.linalg.tests.test_basic.TestLstsq.test_random_complex_exact(self)
scipy.linalg.tests.test_basic.TestLstsq.test_random_complex_overdet(self)
scipy.linalg.tests.test_basic.TestLstsq.test_random_exact(self)
scipy.linalg.tests.test_basic.TestLstsq.test_random_overdet(self)
scipy.linalg.tests.test_basic.TestLstsq.test_random_overdet_large(self)
scipy.linalg.tests.test_basic.TestLstsq.test_simple_exact(self)
scipy.linalg.tests.test_basic.TestLstsq.test_simple_overdet(self)
scipy.linalg.tests.test_basic.TestLstsq.test_simple_overdet_complex(self)
scipy.linalg.tests.test_basic.TestLstsq.test_simple_underdet(self)
scipy.linalg.tests.test_basic.TestNorm(object)
scipy.linalg.tests.test_basic.TestNorm.test_overflow(self)
scipy.linalg.tests.test_basic.TestNorm.test_stable(self)
scipy.linalg.tests.test_basic.TestNorm.test_types(self)
scipy.linalg.tests.test_basic.TestNorm.test_zero_norm(self)
scipy.linalg.tests.test_basic.TestOverwrite(object)
scipy.linalg.tests.test_basic.TestOverwrite.test_det(self)
scipy.linalg.tests.test_basic.TestOverwrite.test_inv(self)
scipy.linalg.tests.test_basic.TestOverwrite.test_lstsq(self)
scipy.linalg.tests.test_basic.TestOverwrite.test_pinv(self)
scipy.linalg.tests.test_basic.TestOverwrite.test_pinv2(self)
scipy.linalg.tests.test_basic.TestOverwrite.test_pinvh(self)
scipy.linalg.tests.test_basic.TestOverwrite.test_solve(self)
scipy.linalg.tests.test_basic.TestOverwrite.test_solve_banded(self)
scipy.linalg.tests.test_basic.TestOverwrite.test_solve_triangular(self)
scipy.linalg.tests.test_basic.TestOverwrite.test_solveh_banded(self)
scipy.linalg.tests.test_basic.TestPinv(TestCase)
scipy.linalg.tests.test_basic.TestPinv.test_check_finite(self)
scipy.linalg.tests.test_basic.TestPinv.test_simple_cols(self)
scipy.linalg.tests.test_basic.TestPinv.test_simple_complex(self)
scipy.linalg.tests.test_basic.TestPinv.test_simple_real(self)
scipy.linalg.tests.test_basic.TestPinv.test_simple_rows(self)
scipy.linalg.tests.test_basic.TestPinv.test_simple_singular(self)
scipy.linalg.tests.test_basic.TestPinvSymmetric(TestCase)
scipy.linalg.tests.test_basic.TestPinvSymmetric.test_nonpositive(self)
scipy.linalg.tests.test_basic.TestPinvSymmetric.test_simple_complex(self)
scipy.linalg.tests.test_basic.TestPinvSymmetric.test_simple_real(self)
scipy.linalg.tests.test_basic.TestSolve(TestCase)
scipy.linalg.tests.test_basic.TestSolve.setUp(self)
scipy.linalg.tests.test_basic.TestSolve.test_20Feb04_bug(self)
scipy.linalg.tests.test_basic.TestSolve.test_check_finite(self)
scipy.linalg.tests.test_basic.TestSolve.test_nils_20Feb04(self)
scipy.linalg.tests.test_basic.TestSolve.test_random(self)
scipy.linalg.tests.test_basic.TestSolve.test_random_complex(self)
scipy.linalg.tests.test_basic.TestSolve.test_random_sym(self)
scipy.linalg.tests.test_basic.TestSolve.test_random_sym_complex(self)
scipy.linalg.tests.test_basic.TestSolve.test_simple(self)
scipy.linalg.tests.test_basic.TestSolve.test_simple_complex(self)
scipy.linalg.tests.test_basic.TestSolve.test_simple_sym(self)
scipy.linalg.tests.test_basic.TestSolve.test_simple_sym_complex(self)
scipy.linalg.tests.test_basic.TestSolveBanded(TestCase)
scipy.linalg.tests.test_basic.TestSolveBanded.test_bad_shape(self)
scipy.linalg.tests.test_basic.TestSolveBanded.test_check_finite(self)
scipy.linalg.tests.test_basic.TestSolveBanded.test_complex(self)
scipy.linalg.tests.test_basic.TestSolveBanded.test_real(self)
scipy.linalg.tests.test_basic.TestSolveHBanded(TestCase)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_01_complex(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_01_float32(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_01_lower(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_01_upper(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_02_complex(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_02_float32(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_02_lower(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_02_upper(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_03_upper(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_bad_shapes(self)
scipy.linalg.tests.test_basic.TestSolveHBanded.test_check_finite(self)
scipy.linalg.tests.test_basic.TestSolveTriangular(TestCase)
scipy.linalg.tests.test_basic.TestSolveTriangular.test_check_finite(self)
scipy.linalg.tests.test_basic.TestSolveTriangular.test_simple(self)
scipy.linalg.tests.test_basic.TestSolveTriangular.test_simple_complex(self)
scipy.linalg.tests.test_basic.direct_lstsq(a,b,cmplx=0)
scipy.linalg.tests.test_basic.random(size)
scipy.linalg.tests.test_direct_lstsq(a,b,cmplx=0)
scipy.linalg.tests.test_random(size)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/tests/test_decomp_cholesky.py----------------------------------------
A:scipy.linalg.tests.test_decomp_cholesky.c->cholesky_banded(ab, lower=True)
A:scipy.linalg.tests.test_decomp_cholesky.a->array([[4.0, 1.0, 0.0, 0.0], [1.0, 4.0, 0.5, 0.0], [0.0, 0.5, 4.0, -0.2j], [0.0, 0.0, 0.2j, 4.0]])
A:scipy.linalg.tests.test_decomp_cholesky.m->random([n, n])
A:scipy.linalg.tests.test_decomp_cholesky.a1->dot(transpose(conjugate(c)), c)
A:scipy.linalg.tests.test_decomp_cholesky.ab->array([[4.0, 4.0, 4.0, 4.0], [1.0, 0.5, 0.2j, -1.0]])
A:scipy.linalg.tests.test_decomp_cholesky.ufac->zeros_like(a)
A:scipy.linalg.tests.test_decomp_cholesky.b->array([0.0, 0.5j, 3.8j, 3.8])
A:scipy.linalg.tests.test_decomp_cholesky.x->array([[0, -1, -1], [2, 2, 2]])
A:scipy.linalg.tests.test_decomp_cholesky.lfac->zeros_like(a)
A:scipy.linalg.tests.test_decomp_cholesky.xcho->cholesky_banded(x)
scipy.linalg.tests.test_TestCholesky(TestCase)
scipy.linalg.tests.test_TestCholesky.test_check_finite(self)
scipy.linalg.tests.test_TestCholesky.test_random(self)
scipy.linalg.tests.test_TestCholesky.test_random_complex(self)
scipy.linalg.tests.test_TestCholesky.test_simple(self)
scipy.linalg.tests.test_TestCholesky.test_simple_complex(self)
scipy.linalg.tests.test_TestCholeskyBanded(TestCase)
scipy.linalg.tests.test_TestCholeskyBanded.test_check_finite(self)
scipy.linalg.tests.test_TestCholeskyBanded.test_lower_complex(self)
scipy.linalg.tests.test_TestCholeskyBanded.test_lower_real(self)
scipy.linalg.tests.test_TestCholeskyBanded.test_upper_complex(self)
scipy.linalg.tests.test_TestCholeskyBanded.test_upper_real(self)
scipy.linalg.tests.test_TestOverwrite(object)
scipy.linalg.tests.test_TestOverwrite.test_cho_factor(self)
scipy.linalg.tests.test_TestOverwrite.test_cho_solve(self)
scipy.linalg.tests.test_TestOverwrite.test_cho_solve_banded(self)
scipy.linalg.tests.test_TestOverwrite.test_cholesky(self)
scipy.linalg.tests.test_TestOverwrite.test_cholesky_banded(self)
scipy.linalg.tests.test_decomp_cholesky.TestCholesky(TestCase)
scipy.linalg.tests.test_decomp_cholesky.TestCholesky.test_check_finite(self)
scipy.linalg.tests.test_decomp_cholesky.TestCholesky.test_random(self)
scipy.linalg.tests.test_decomp_cholesky.TestCholesky.test_random_complex(self)
scipy.linalg.tests.test_decomp_cholesky.TestCholesky.test_simple(self)
scipy.linalg.tests.test_decomp_cholesky.TestCholesky.test_simple_complex(self)
scipy.linalg.tests.test_decomp_cholesky.TestCholeskyBanded(TestCase)
scipy.linalg.tests.test_decomp_cholesky.TestCholeskyBanded.test_check_finite(self)
scipy.linalg.tests.test_decomp_cholesky.TestCholeskyBanded.test_lower_complex(self)
scipy.linalg.tests.test_decomp_cholesky.TestCholeskyBanded.test_lower_real(self)
scipy.linalg.tests.test_decomp_cholesky.TestCholeskyBanded.test_upper_complex(self)
scipy.linalg.tests.test_decomp_cholesky.TestCholeskyBanded.test_upper_real(self)
scipy.linalg.tests.test_decomp_cholesky.TestOverwrite(object)
scipy.linalg.tests.test_decomp_cholesky.TestOverwrite.test_cho_factor(self)
scipy.linalg.tests.test_decomp_cholesky.TestOverwrite.test_cho_solve(self)
scipy.linalg.tests.test_decomp_cholesky.TestOverwrite.test_cho_solve_banded(self)
scipy.linalg.tests.test_decomp_cholesky.TestOverwrite.test_cholesky(self)
scipy.linalg.tests.test_decomp_cholesky.TestOverwrite.test_cholesky_banded(self)
scipy.linalg.tests.test_decomp_cholesky.random(size)
scipy.linalg.tests.test_random(size)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/tests/test_matfuncs.py----------------------------------------
A:scipy.linalg.tests.test_matfuncs.a->array([[1j, 1], [-1, -2j]])
A:scipy.linalg.tests.test_matfuncs.cr->array([[11.94933333, -2.24533333, 15.31733333, 21.65333333, -2.24533333], [-3.84266667, 0.49866667, -4.59066667, -7.18666667, 0.49866667], [-4.08, 0.56, -4.92, -7.6, 0.56], [-4.03466667, 1.04266667, -5.59866667, -7.02666667, 1.04266667], [4.15733333, -0.50133333, 4.90933333, 7.81333333, -0.50133333]])
A:scipy.linalg.tests.test_matfuncs.r->signm(a, disp=False)
A:scipy.linalg.tests.test_matfuncs.se->sqrt(e)
A:scipy.linalg.tests.test_matfuncs.sa->array([[1, 0, 0, 0.5], [0, se, 0, 0], [0, 0, se, 0], [0, 0, 0, 1]])
scipy.linalg.tests.test_TestExpM(TestCase)
scipy.linalg.tests.test_TestExpM.test_consistency(self)
scipy.linalg.tests.test_TestExpM.test_zero(self)
scipy.linalg.tests.test_TestLogM(TestCase)
scipy.linalg.tests.test_TestLogM.test_nils(self)
scipy.linalg.tests.test_TestSignM(TestCase)
scipy.linalg.tests.test_TestSignM.test_defective1(self)
scipy.linalg.tests.test_TestSignM.test_defective2(self)
scipy.linalg.tests.test_TestSignM.test_defective3(self)
scipy.linalg.tests.test_TestSignM.test_nils(self)
scipy.linalg.tests.test_TestSqrtM(TestCase)
scipy.linalg.tests.test_TestSqrtM.test_bad(self)
scipy.linalg.tests.test_matfuncs.TestExpM(TestCase)
scipy.linalg.tests.test_matfuncs.TestExpM.test_consistency(self)
scipy.linalg.tests.test_matfuncs.TestExpM.test_zero(self)
scipy.linalg.tests.test_matfuncs.TestLogM(TestCase)
scipy.linalg.tests.test_matfuncs.TestLogM.test_nils(self)
scipy.linalg.tests.test_matfuncs.TestSignM(TestCase)
scipy.linalg.tests.test_matfuncs.TestSignM.test_defective1(self)
scipy.linalg.tests.test_matfuncs.TestSignM.test_defective2(self)
scipy.linalg.tests.test_matfuncs.TestSignM.test_defective3(self)
scipy.linalg.tests.test_matfuncs.TestSignM.test_nils(self)
scipy.linalg.tests.test_matfuncs.TestSqrtM(TestCase)
scipy.linalg.tests.test_matfuncs.TestSqrtM.test_bad(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/tests/test_lapack.py----------------------------------------
A:scipy.linalg.tests.test_lapack.f->getattr(flapack, p + 'gehrd', None)
A:scipy.linalg.tests.test_lapack.(ba, lo, hi, pivscale, info)->f(a1, permute=1, scale=1)
A:scipy.linalg.tests.test_lapack.(ht, tau, info)->f(a)
A:scipy.linalg.tests.test_lapack.a->numpy.zeros((300, 2), dtype=dtype)
A:scipy.linalg.tests.test_lapack.b->numpy.array([[5, 6], [0, 8]])
A:scipy.linalg.tests.test_lapack.c->numpy.array([[9, 10], [11, 12]])
A:scipy.linalg.tests.test_lapack.(trsyl,)->get_lapack_funcs(('trsyl',), (a1,))
A:scipy.linalg.tests.test_lapack.(x, scale, info)->trsyl(a1, b1, c1, isgn=-1)
A:scipy.linalg.tests.test_lapack.(gerqf,)->get_lapack_funcs(['gerqf'], [a])
A:scipy.linalg.tests.test_lapack.(rq, tau, work, info)->gerqf(a)
A:scipy.linalg.tests.test_lapack.(orgrq,)->get_lapack_funcs(['orgrq'], [a])
A:scipy.linalg.tests.test_lapack.(ungrq,)->get_lapack_funcs(['ungrq'], [a])
scipy.linalg.tests.test_TestFlapackSimple(TestCase)
scipy.linalg.tests.test_TestFlapackSimple.test_gebal(self)
scipy.linalg.tests.test_TestFlapackSimple.test_gehrd(self)
scipy.linalg.tests.test_TestFlapackSimple.test_trsyl(self)
scipy.linalg.tests.test_TestLapack(TestCase)
scipy.linalg.tests.test_TestLapack.test_clapack(self)
scipy.linalg.tests.test_TestLapack.test_flapack(self)
scipy.linalg.tests.test_TestRegression(TestCase)
scipy.linalg.tests.test_TestRegression.test_ticket_1645(self)
scipy.linalg.tests.test_lapack.TestFlapackSimple(TestCase)
scipy.linalg.tests.test_lapack.TestFlapackSimple.test_gebal(self)
scipy.linalg.tests.test_lapack.TestFlapackSimple.test_gehrd(self)
scipy.linalg.tests.test_lapack.TestFlapackSimple.test_trsyl(self)
scipy.linalg.tests.test_lapack.TestLapack(TestCase)
scipy.linalg.tests.test_lapack.TestLapack.test_clapack(self)
scipy.linalg.tests.test_lapack.TestLapack.test_flapack(self)
scipy.linalg.tests.test_lapack.TestRegression(TestCase)
scipy.linalg.tests.test_lapack.TestRegression.test_ticket_1645(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/tests/test_special_matrices.py----------------------------------------
A:scipy.linalg.tests.test_special_matrices.data->numpy.add.outer(data, data)
A:scipy.linalg.tests.test_special_matrices.a->hilbert(n)
A:scipy.linalg.tests.test_special_matrices.b->invhilbert(n)
A:scipy.linalg.tests.test_special_matrices.y->hadamard(4)
A:scipy.linalg.tests.test_special_matrices.x->block_diag([[True]])
A:scipy.linalg.tests.test_special_matrices.t->toeplitz(1, r)
A:scipy.linalg.tests.test_special_matrices.c->cond(a)
A:scipy.linalg.tests.test_special_matrices.r->array([10, 2, 3])
A:scipy.linalg.tests.test_special_matrices.expected->array([[10, 20], [11, 22], [30, 40], [33, 44]])
A:scipy.linalg.tests.test_special_matrices.m1->array([[1, 2], [3, 4]])
A:scipy.linalg.tests.test_special_matrices.m2->array([[10], [11]])
A:scipy.linalg.tests.test_special_matrices.h3->array([[1.0, 1 / 2.0, 1 / 3.0], [1 / 2.0, 1 / 3.0, 1 / 4.0], [1 / 3.0, 1 / 4.0, 1 / 5.0]])
A:scipy.linalg.tests.test_special_matrices.h0->hilbert(0)
A:scipy.linalg.tests.test_special_matrices.invh1->array([[1]])
A:scipy.linalg.tests.test_special_matrices.invh2->array([[4, -6], [-6, 12]])
A:scipy.linalg.tests.test_special_matrices.invh3->array([[9, -36, 30], [-36, 192, -180], [30, -180, 180]])
A:scipy.linalg.tests.test_special_matrices.invh4->array([[16, -120, 240, -140], [-120, 1200, -2700, 1680], [240, -2700, 6480, -4200], [-140, 1680, -4200, 2800]])
A:scipy.linalg.tests.test_special_matrices.invh5->array([[25, -300, 1050, -1400, 630], [-300, 4800, -18900, 26880, -12600], [1050, -18900, 79380, -117600, 56700], [-1400, 26880, -117600, 179200, -88200], [630, -12600, 56700, -88200, 44100]])
A:scipy.linalg.tests.test_special_matrices.invh17->array([[289, -41616, 1976760, -46124400, 629598060, -5540462928, 33374693352, -143034400080, 446982500250, -1033026222800, 1774926873720, -2258997839280, 2099709530100, -1384423866000, 613101997800, -163493866080, 19835652870], [-41616, 7990272, -426980160, 10627061760, -151103534400, 1367702848512, -8410422724704, 36616806420480, -115857864064800, 270465047424000, -468580694662080, 600545887119360, -561522320049600, 372133135180800, -165537539406000, 44316454993920, -5395297580640], [1976760, -426980160, 24337869120, -630981792000, 9228108708000, -85267724461920, 532660105897920, -2348052711713280, 7504429831470000, -17664748409880000, 30818191841236800, -39732544853164800, 37341234283298400, -24857330514030000, 11100752642520000, -2982128117299200, 364182586693200], [-46124400, 10627061760, -630981792000, 16826181120000, -251209625940000, 2358021022156800, -14914482965141760, 66409571644416000, -214015221119700000, 507295338950400000, -890303319857952000, 1153715376477081600, -1089119333262870000, 727848632044800000, -326170262829600000, 87894302404608000, -10763618673376800], [629598060, -151103534400, 9228108708000, -251209625940000, 3810012660090000, -36210360321495360, 231343968720664800, -1038687206500944000, 3370739732635275000, -8037460526495400000, 14178080368737885600, -18454939322943942000, 17489975175339030000, -11728977435138600000, 5272370630081100000, -1424711708039692800, 174908803442373000], [-5540462928, 1367702848512, -85267724461920, 2358021022156800, -36210360321495360, 347619459086355456, -2239409617216035264, 10124803292907663360, -33052510749726468000, 79217210949138662400, -140362995650505067440, 183420385176741672960, -174433352415381259200, 117339159519533952000, -52892422160973595200, 14328529177999196160, -1763080738699119840], [33374693352, -8410422724704, 532660105897920, -14914482965141760, 231343968720664800, -2239409617216035264, 14527452132196331328, -66072377044391477760, 216799987176909536400, -521925895055522958000, 928414062734059661760, -1217424500995626443520, 1161358898976091015200, -783401860847777371200, 354015418167362952000, -96120549902411274240, 11851820521255194480], [-143034400080, 36616806420480, -2348052711713280, 66409571644416000, -1038687206500944000, 10124803292907663360, -66072377044391477760, 302045152202932469760, -995510145200094810000, 2405996923185123840000, -4294704507885446054400, 5649058909023744614400, -5403874060541811254400, 3654352703663101440000, -1655137020003255360000, 450325202737117593600, -55630994283442749600], [446982500250, -115857864064800, 7504429831470000, -214015221119700000, 3370739732635275000, -33052510749726468000, 216799987176909536400, -995510145200094810000, 3293967392206196062500, -7988661659013106500000, 14303908928401362270000, -18866974090684772052000, 18093328327706957325000, -12263364009096700500000, 5565847995255512250000, -1517208935002984080000, 187754605706619279900], [-1033026222800, 270465047424000, -17664748409880000, 507295338950400000, -8037460526495400000, 79217210949138662400, -521925895055522958000, 2405996923185123840000, -7988661659013106500000, 19434404971634224000000, -34894474126569249192000, 46141453390504792320000, -44349976506971935800000, 30121928988527376000000, -13697025107665828500000, 3740200989399948902400, -463591619028689580000], [1774926873720, -468580694662080, 30818191841236800, -890303319857952000, 14178080368737885600, -140362995650505067440, 928414062734059661760, -4294704507885446054400, 14303908928401362270000, -34894474126569249192000, 62810053427824648545600, -83243376594051600326400, 80177044485212743068000, -54558343880470209780000, 24851882355348879230400, -6797096028813368678400, 843736746632215035600], [-2258997839280, 600545887119360, -39732544853164800, 1153715376477081600, -18454939322943942000, 183420385176741672960, -1217424500995626443520, 5649058909023744614400, -18866974090684772052000, 46141453390504792320000, -83243376594051600326400, 110552468520163390156800, -106681852579497947388000, 72720410752415168870400, -33177973900974346080000, 9087761081682520473600, -1129631016152221783200], [2099709530100, -561522320049600, 37341234283298400, -1089119333262870000, 17489975175339030000, -174433352415381259200, 1161358898976091015200, -5403874060541811254400, 18093328327706957325000, -44349976506971935800000, 80177044485212743068000, -106681852579497947388000, 103125790826848015808400, -70409051543137015800000, 32171029219823375700000, -8824053728865840192000, 1098252376814660067000], [-1384423866000, 372133135180800, -24857330514030000, 727848632044800000, -11728977435138600000, 117339159519533952000, -783401860847777371200, 3654352703663101440000, -12263364009096700500000, 30121928988527376000000, -54558343880470209780000, 72720410752415168870400, -70409051543137015800000, 48142941226076592000000, -22027500987368499000000, 6049545098753157120000, -753830033789944188000], [613101997800, -165537539406000, 11100752642520000, -326170262829600000, 5272370630081100000, -52892422160973595200, 354015418167362952000, -1655137020003255360000, 5565847995255512250000, -13697025107665828500000, 24851882355348879230400, -33177973900974346080000, 32171029219823375700000, -22027500987368499000000, 10091416708498869000000, -2774765838662800128000, 346146444087219270000], [-163493866080, 44316454993920, -2982128117299200, 87894302404608000, -1424711708039692800, 14328529177999196160, -96120549902411274240, 450325202737117593600, -1517208935002984080000, 3740200989399948902400, -6797096028813368678400, 9087761081682520473600, -8824053728865840192000, 6049545098753157120000, -2774765838662800128000, 763806510427609497600, -95382575704033754400], [19835652870, -5395297580640, 364182586693200, -10763618673376800, 174908803442373000, -1763080738699119840, 11851820521255194480, -55630994283442749600, 187754605706619279900, -463591619028689580000, 843736746632215035600, -1129631016152221783200, 1098252376814660067000, -753830033789944188000, 346146444087219270000, -95382575704033754400, 11922821963004219300]])
A:scipy.linalg.tests.test_special_matrices.p->pascal(50)
scipy.linalg.tests.test_TestBlockDiag
scipy.linalg.tests.test_TestBlockDiag.test_bad_arg(self)
scipy.linalg.tests.test_TestBlockDiag.test_basic(self)
scipy.linalg.tests.test_TestBlockDiag.test_dtype(self)
scipy.linalg.tests.test_TestBlockDiag.test_no_args(self)
scipy.linalg.tests.test_TestBlockDiag.test_scalar_and_1d_args(self)
scipy.linalg.tests.test_TestCirculant(TestCase)
scipy.linalg.tests.test_TestCirculant.test_basic(self)
scipy.linalg.tests.test_TestCompanion(TestCase)
scipy.linalg.tests.test_TestCompanion.test_bad_shapes(self)
scipy.linalg.tests.test_TestCompanion.test_basic(self)
scipy.linalg.tests.test_TestHadamard(TestCase)
scipy.linalg.tests.test_TestHadamard.test_basic(self)
scipy.linalg.tests.test_TestHankel(TestCase)
scipy.linalg.tests.test_TestHankel.test_basic(self)
scipy.linalg.tests.test_TestHilbert(TestCase)
scipy.linalg.tests.test_TestHilbert.test_basic(self)
scipy.linalg.tests.test_TestInvHilbert(TestCase)
scipy.linalg.tests.test_TestInvHilbert.test_basic(self)
scipy.linalg.tests.test_TestInvHilbert.test_inverse(self)
scipy.linalg.tests.test_TestKron
scipy.linalg.tests.test_TestKron.test_basic(self)
scipy.linalg.tests.test_TestLeslie(TestCase)
scipy.linalg.tests.test_TestLeslie.test_bad_shapes(self)
scipy.linalg.tests.test_TestLeslie.test_basic(self)
scipy.linalg.tests.test_TestPascal(TestCase)
scipy.linalg.tests.test_TestPascal.check_case(self,n,sym,low)
scipy.linalg.tests.test_TestPascal.test_big(self)
scipy.linalg.tests.test_TestPascal.test_cases(self)
scipy.linalg.tests.test_TestToeplitz(TestCase)
scipy.linalg.tests.test_TestToeplitz.test_basic(self)
scipy.linalg.tests.test_TestToeplitz.test_complex_01(self)
scipy.linalg.tests.test_TestToeplitz.test_scalar_00(self)
scipy.linalg.tests.test_TestToeplitz.test_scalar_01(self)
scipy.linalg.tests.test_TestToeplitz.test_scalar_02(self)
scipy.linalg.tests.test_TestToeplitz.test_scalar_03(self)
scipy.linalg.tests.test_TestToeplitz.test_scalar_04(self)
scipy.linalg.tests.test_TestTri(TestCase)
scipy.linalg.tests.test_TestTri.test_2d(self)
scipy.linalg.tests.test_TestTri.test_basic(self)
scipy.linalg.tests.test_TestTri.test_diag(self)
scipy.linalg.tests.test_TestTri.test_diag2d(self)
scipy.linalg.tests.test_TestTril(TestCase)
scipy.linalg.tests.test_TestTril.test_basic(self)
scipy.linalg.tests.test_TestTril.test_diag(self)
scipy.linalg.tests.test_TestTriu(TestCase)
scipy.linalg.tests.test_TestTriu.test_basic(self)
scipy.linalg.tests.test_TestTriu.test_diag(self)
scipy.linalg.tests.test_get_mat(n)
scipy.linalg.tests.test_special_matrices.TestBlockDiag
scipy.linalg.tests.test_special_matrices.TestBlockDiag.test_bad_arg(self)
scipy.linalg.tests.test_special_matrices.TestBlockDiag.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestBlockDiag.test_dtype(self)
scipy.linalg.tests.test_special_matrices.TestBlockDiag.test_no_args(self)
scipy.linalg.tests.test_special_matrices.TestBlockDiag.test_scalar_and_1d_args(self)
scipy.linalg.tests.test_special_matrices.TestCirculant(TestCase)
scipy.linalg.tests.test_special_matrices.TestCirculant.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestCompanion(TestCase)
scipy.linalg.tests.test_special_matrices.TestCompanion.test_bad_shapes(self)
scipy.linalg.tests.test_special_matrices.TestCompanion.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestHadamard(TestCase)
scipy.linalg.tests.test_special_matrices.TestHadamard.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestHankel(TestCase)
scipy.linalg.tests.test_special_matrices.TestHankel.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestHilbert(TestCase)
scipy.linalg.tests.test_special_matrices.TestHilbert.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestInvHilbert(TestCase)
scipy.linalg.tests.test_special_matrices.TestInvHilbert.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestInvHilbert.test_inverse(self)
scipy.linalg.tests.test_special_matrices.TestKron
scipy.linalg.tests.test_special_matrices.TestKron.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestLeslie(TestCase)
scipy.linalg.tests.test_special_matrices.TestLeslie.test_bad_shapes(self)
scipy.linalg.tests.test_special_matrices.TestLeslie.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestPascal(TestCase)
scipy.linalg.tests.test_special_matrices.TestPascal.check_case(self,n,sym,low)
scipy.linalg.tests.test_special_matrices.TestPascal.test_big(self)
scipy.linalg.tests.test_special_matrices.TestPascal.test_cases(self)
scipy.linalg.tests.test_special_matrices.TestToeplitz(TestCase)
scipy.linalg.tests.test_special_matrices.TestToeplitz.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestToeplitz.test_complex_01(self)
scipy.linalg.tests.test_special_matrices.TestToeplitz.test_scalar_00(self)
scipy.linalg.tests.test_special_matrices.TestToeplitz.test_scalar_01(self)
scipy.linalg.tests.test_special_matrices.TestToeplitz.test_scalar_02(self)
scipy.linalg.tests.test_special_matrices.TestToeplitz.test_scalar_03(self)
scipy.linalg.tests.test_special_matrices.TestToeplitz.test_scalar_04(self)
scipy.linalg.tests.test_special_matrices.TestTri(TestCase)
scipy.linalg.tests.test_special_matrices.TestTri.test_2d(self)
scipy.linalg.tests.test_special_matrices.TestTri.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestTri.test_diag(self)
scipy.linalg.tests.test_special_matrices.TestTri.test_diag2d(self)
scipy.linalg.tests.test_special_matrices.TestTril(TestCase)
scipy.linalg.tests.test_special_matrices.TestTril.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestTril.test_diag(self)
scipy.linalg.tests.test_special_matrices.TestTriu(TestCase)
scipy.linalg.tests.test_special_matrices.TestTriu.test_basic(self)
scipy.linalg.tests.test_special_matrices.TestTriu.test_diag(self)
scipy.linalg.tests.test_special_matrices.get_mat(n)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/tests/test_blas.py----------------------------------------
A:scipy.linalg.tests.test_blas.(f1, f2, f3)->get_blas_funcs(('axpy', 'axpy', 'axpy'), (np.empty((2, 2), dtype=np.complex64, order='F'), np.empty((2, 2), dtype=np.complex128, order='C')))
A:scipy.linalg.tests.test_blas.f1->get_blas_funcs('axpy', (np.empty((2, 2), dtype=np.float64), np.empty((2, 2), dtype=np.complex64)))
A:scipy.linalg.tests.test_blas.(f, g)->get_blas_funcs(('nrm2', 'dot'), dtype=np.complex64)
A:scipy.linalg.tests.test_blas.(f, g, h)->get_blas_funcs(('dot', 'dotc', 'dotu'), dtype=np.float64)
A:scipy.linalg.tests.test_blas.f->getattr(fblas, p + 'gemm', None)
A:scipy.linalg.tests.test_blas.(x1, y1)->f(x, y)
scipy.linalg.tests.test_TestCBLAS1Simple(TestCase)
scipy.linalg.tests.test_TestCBLAS1Simple.test_axpy(self)
scipy.linalg.tests.test_TestFBLAS1Simple(TestCase)
scipy.linalg.tests.test_TestFBLAS1Simple.test_amax(self)
scipy.linalg.tests.test_TestFBLAS1Simple.test_asum(self)
scipy.linalg.tests.test_TestFBLAS1Simple.test_axpy(self)
scipy.linalg.tests.test_TestFBLAS1Simple.test_complex_dotc(self)
scipy.linalg.tests.test_TestFBLAS1Simple.test_complex_dotu(self)
scipy.linalg.tests.test_TestFBLAS1Simple.test_copy(self)
scipy.linalg.tests.test_TestFBLAS1Simple.test_dot(self)
scipy.linalg.tests.test_TestFBLAS1Simple.test_nrm2(self)
scipy.linalg.tests.test_TestFBLAS1Simple.test_scal(self)
scipy.linalg.tests.test_TestFBLAS1Simple.test_swap(self)
scipy.linalg.tests.test_TestFBLAS2Simple(TestCase)
scipy.linalg.tests.test_TestFBLAS2Simple.test_gemv(self)
scipy.linalg.tests.test_TestFBLAS2Simple.test_ger(self)
scipy.linalg.tests.test_TestFBLAS3Simple(TestCase)
scipy.linalg.tests.test_TestFBLAS3Simple.test_gemm(self)
scipy.linalg.tests.test_blas.TestCBLAS1Simple(TestCase)
scipy.linalg.tests.test_blas.TestCBLAS1Simple.test_axpy(self)
scipy.linalg.tests.test_blas.TestFBLAS1Simple(TestCase)
scipy.linalg.tests.test_blas.TestFBLAS1Simple.test_amax(self)
scipy.linalg.tests.test_blas.TestFBLAS1Simple.test_asum(self)
scipy.linalg.tests.test_blas.TestFBLAS1Simple.test_axpy(self)
scipy.linalg.tests.test_blas.TestFBLAS1Simple.test_complex_dotc(self)
scipy.linalg.tests.test_blas.TestFBLAS1Simple.test_complex_dotu(self)
scipy.linalg.tests.test_blas.TestFBLAS1Simple.test_copy(self)
scipy.linalg.tests.test_blas.TestFBLAS1Simple.test_dot(self)
scipy.linalg.tests.test_blas.TestFBLAS1Simple.test_nrm2(self)
scipy.linalg.tests.test_blas.TestFBLAS1Simple.test_scal(self)
scipy.linalg.tests.test_blas.TestFBLAS1Simple.test_swap(self)
scipy.linalg.tests.test_blas.TestFBLAS2Simple(TestCase)
scipy.linalg.tests.test_blas.TestFBLAS2Simple.test_gemv(self)
scipy.linalg.tests.test_blas.TestFBLAS2Simple.test_ger(self)
scipy.linalg.tests.test_blas.TestFBLAS3Simple(TestCase)
scipy.linalg.tests.test_blas.TestFBLAS3Simple.test_gemm(self)
scipy.linalg.tests.test_blas.test_get_blas_funcs()
scipy.linalg.tests.test_blas.test_get_blas_funcs_alias()
scipy.linalg.tests.test_test_get_blas_funcs()
scipy.linalg.tests.test_test_get_blas_funcs_alias()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/tests/test_solvers.py----------------------------------------
A:scipy.linalg.tests.test_solvers.x->solve_sylvester(a, b, c)
A:scipy.linalg.tests.test_solvers.a->numpy.array([[1.0, 0.0], [0.0, 1.0]])
A:scipy.linalg.tests.test_solvers.b->numpy.array([[1.0]])
A:scipy.linalg.tests.test_solvers.c->numpy.array([2.0, 2.0]).reshape(-1, 1)
scipy.linalg.tests.testTestSolveContinuousARE(TestCase)
scipy.linalg.tests.testTestSolveContinuousARE.check_case(self,a,b,q,r)
scipy.linalg.tests.testTestSolveContinuousARE.test_cases(self)
scipy.linalg.tests.testTestSolveDiscreteARE(TestCase)
scipy.linalg.tests.testTestSolveDiscreteARE.check_case(self,a,b,q,r)
scipy.linalg.tests.testTestSolveDiscreteARE.test_cases(self)
scipy.linalg.tests.testTestSolveLyapunov(TestCase)
scipy.linalg.tests.testTestSolveLyapunov.check_continuous_case(self,a,q)
scipy.linalg.tests.testTestSolveLyapunov.check_discrete_case(self,a,q)
scipy.linalg.tests.testTestSolveLyapunov.test_cases(self)
scipy.linalg.tests.testTestSolveSylvester(TestCase)
scipy.linalg.tests.testTestSolveSylvester.check_case(self,a,b,c)
scipy.linalg.tests.testTestSolveSylvester.test_cases(self)
scipy.linalg.tests.testTestSolveSylvester.test_trivial(self)
scipy.linalg.tests.test_solvers.TestSolveContinuousARE(TestCase)
scipy.linalg.tests.test_solvers.TestSolveContinuousARE.check_case(self,a,b,q,r)
scipy.linalg.tests.test_solvers.TestSolveContinuousARE.test_cases(self)
scipy.linalg.tests.test_solvers.TestSolveDiscreteARE(TestCase)
scipy.linalg.tests.test_solvers.TestSolveDiscreteARE.check_case(self,a,b,q,r)
scipy.linalg.tests.test_solvers.TestSolveDiscreteARE.test_cases(self)
scipy.linalg.tests.test_solvers.TestSolveLyapunov(TestCase)
scipy.linalg.tests.test_solvers.TestSolveLyapunov.check_continuous_case(self,a,q)
scipy.linalg.tests.test_solvers.TestSolveLyapunov.check_discrete_case(self,a,q)
scipy.linalg.tests.test_solvers.TestSolveLyapunov.test_cases(self)
scipy.linalg.tests.test_solvers.TestSolveSylvester(TestCase)
scipy.linalg.tests.test_solvers.TestSolveSylvester.check_case(self,a,b,c)
scipy.linalg.tests.test_solvers.TestSolveSylvester.test_cases(self)
scipy.linalg.tests.test_solvers.TestSolveSylvester.test_trivial(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/benchmarks/bench_decom.py----------------------------------------
A:scipy.linalg.benchmarks.bench_decom.a->random([size, size])
scipy.linalg.benchmarks.bench_decom.bench_random()
scipy.linalg.benchmarks.bench_decom.random(size)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/linalg/benchmarks/bench_basic.py----------------------------------------
A:scipy.linalg.benchmarks.bench_basic.a->random([size, size])
A:scipy.linalg.benchmarks.bench_basic.b->random([size])
scipy.linalg.benchmarks.bench_TestDet(TestCase)
scipy.linalg.benchmarks.bench_TestDet.bench_random(self)
scipy.linalg.benchmarks.bench_TestInv(TestCase)
scipy.linalg.benchmarks.bench_TestInv.bench_random(self)
scipy.linalg.benchmarks.bench_TestSolve(TestCase)
scipy.linalg.benchmarks.bench_TestSolve.bench_random(self)
scipy.linalg.benchmarks.bench_basic.TestDet(TestCase)
scipy.linalg.benchmarks.bench_basic.TestDet.bench_random(self)
scipy.linalg.benchmarks.bench_basic.TestInv(TestCase)
scipy.linalg.benchmarks.bench_basic.TestInv.bench_random(self)
scipy.linalg.benchmarks.bench_basic.TestSolve(TestCase)
scipy.linalg.benchmarks.bench_basic.TestSolve.bench_random(self)
scipy.linalg.benchmarks.bench_basic.random(size)
scipy.linalg.benchmarks.bench_random(size)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/spatial/_plotutils.py----------------------------------------
A:scipy.spatial._plotutils.fig->matplotlib.pyplot.figure()
A:scipy.spatial._plotutils.ax->matplotlib.pyplot.figure().gca()
A:scipy.spatial._plotutils.was_held->matplotlib.pyplot.figure().gca().ishold()
A:scipy.spatial._plotutils.ptp_bound->vor.points.ptp(axis=0)
A:scipy.spatial._plotutils.simplex->numpy.asarray(simplex)
A:scipy.spatial._plotutils.center->vor.points.mean(axis=0)
A:scipy.spatial._plotutils.n->numpy.array([-t[1], t[0]])
A:scipy.spatial._plotutils.midpoint->vor.points[pointidx].mean(axis=0)
scipy.spatial._adjust_bounds(ax,points)
scipy.spatial._held_figure(func,obj,ax=None,**kw)
scipy.spatial._plotutils._adjust_bounds(ax,points)
scipy.spatial._plotutils._held_figure(func,obj,ax=None,**kw)
scipy.spatial._plotutils.convex_hull_plot_2d(hull,ax=None)
scipy.spatial._plotutils.delaunay_plot_2d(tri,ax=None)
scipy.spatial._plotutils.voronoi_plot_2d(vor,ax=None)
scipy.spatial.convex_hull_plot_2d(hull,ax=None)
scipy.spatial.delaunay_plot_2d(tri,ax=None)
scipy.spatial.voronoi_plot_2d(vor,ax=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/spatial/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/spatial/distance.py----------------------------------------
A:scipy.spatial.distance.X->numpy.vstack([XA, XB])
A:scipy.spatial.distance.u->_validate_vector(u)
A:scipy.spatial.distance.v->numpy.zeros((d * (d - 1) / 2,), dtype=np.double)
A:scipy.spatial.distance.dist->((u - v) ** 2).sum()
A:scipy.spatial.distance.w->_validate_vector(w)
A:scipy.spatial.distance.umu->_validate_vector(u).mean()
A:scipy.spatial.distance.vmu->numpy.zeros((d * (d - 1) / 2,), dtype=np.double).mean()
A:scipy.spatial.distance.n->float(len(u))
A:scipy.spatial.distance.(nff, nft, ntf, ntt)->_nbool_correspond_all(u, v)
A:scipy.spatial.distance.V->numpy.cov(X.T)
A:scipy.spatial.distance.VI->numpy.asarray(VI, order='c')
A:scipy.spatial.distance.m->numpy.dot(np.dot(delta, VI), delta)
A:scipy.spatial.distance.olderr->numpy.seterr(invalid='ignore')
A:scipy.spatial.distance.d->int(np.ceil(np.sqrt(k * 2)))
A:scipy.spatial.distance.nff->((1.0 - u) * (1.0 - v)).sum()
A:scipy.spatial.distance.nft->(not_u & v).sum()
A:scipy.spatial.distance.ntf->(u & not_v).sum()
A:scipy.spatial.distance.ntt->(u * v).sum()
A:scipy.spatial.distance.(nft, ntf)->_nbool_correspond_ft_tf(u, v)
A:scipy.spatial.distance.[X]->_copy_arrays_if_base_present([X])
A:scipy.spatial.distance.dm->cdist(XA, XB, sokalmichener)
A:scipy.spatial.distance.dm[k]->dfun(X[i], X[j])
A:scipy.spatial.distance.mstr->metric.lower()
A:scipy.spatial.distance.[VV]->_copy_arrays_if_base_present([_convert_to_double(V)])
A:scipy.spatial.distance.VV->numpy.var(X, axis=0, ddof=1)
A:scipy.spatial.distance.norms->numpy.sqrt(np.sum(X2 * X2, axis=1))
A:scipy.spatial.distance.nV->numpy.sqrt(np.sum(X2 * X2, axis=1)).reshape(m, 1)
A:scipy.spatial.distance.nm->numpy.dot(X, X.T)
A:scipy.spatial.distance.de->numpy.dot(nV, nV.T)
A:scipy.spatial.distance.[VI]->_copy_arrays_if_base_present([VI])
A:scipy.spatial.distance.M->numpy.zeros((d, d), dtype=np.double)
A:scipy.spatial.distance.D->numpy.asarray(D, order='c')
A:scipy.spatial.distance.y->numpy.asarray(y, order='c')
A:scipy.spatial.distance.Y->numpy.asarray(Y, order='c')
A:scipy.spatial.distance.XA->numpy.asarray(XA, order='c')
A:scipy.spatial.distance.XB->numpy.asarray(XB, order='c')
A:scipy.spatial.distance.[XA]->_copy_arrays_if_base_present([_convert_to_double(XA)])
A:scipy.spatial.distance.[XB]->_copy_arrays_if_base_present([_convert_to_double(XB)])
A:scipy.spatial.distance.dm[i, j]->metric(XA[i, :], XB[j, :])
A:scipy.spatial.distance.normsA->numpy.sqrt(np.sum(XA2 * XA2, axis=1))
A:scipy.spatial.distance.normsB->numpy.sqrt(np.sum(XB2 * XB2, axis=1))
scipy.spatial.distance._convert_to_bool(X)
scipy.spatial.distance._convert_to_double(X)
scipy.spatial.distance._copy_array_if_base_present(a)
scipy.spatial.distance._copy_arrays_if_base_present(T)
scipy.spatial.distance._nbool_correspond_all(u,v)
scipy.spatial.distance._nbool_correspond_ft_tf(u,v)
scipy.spatial.distance._validate_vector(u,dtype=None)
scipy.spatial.distance.braycurtis(u,v)
scipy.spatial.distance.canberra(u,v)
scipy.spatial.distance.cdist(XA,XB,metric='euclidean',p=2,V=None,VI=None,w=None)
scipy.spatial.distance.chebyshev(u,v)
scipy.spatial.distance.cityblock(u,v)
scipy.spatial.distance.correlation(u,v)
scipy.spatial.distance.cosine(u,v)
scipy.spatial.distance.dice(u,v)
scipy.spatial.distance.euclidean(u,v)
scipy.spatial.distance.hamming(u,v)
scipy.spatial.distance.is_valid_dm(D,tol=0.0,throw=False,name='D',warning=False)
scipy.spatial.distance.is_valid_y(y,warning=False,throw=False,name=None)
scipy.spatial.distance.jaccard(u,v)
scipy.spatial.distance.kulsinski(u,v)
scipy.spatial.distance.mahalanobis(u,v,VI)
scipy.spatial.distance.matching(u,v)
scipy.spatial.distance.minkowski(u,v,p)
scipy.spatial.distance.num_obs_dm(d)
scipy.spatial.distance.num_obs_y(Y)
scipy.spatial.distance.pdist(X,metric='euclidean',p=2,w=None,V=None,VI=None)
scipy.spatial.distance.rogerstanimoto(u,v)
scipy.spatial.distance.russellrao(u,v)
scipy.spatial.distance.seuclidean(u,v,V)
scipy.spatial.distance.sokalmichener(u,v)
scipy.spatial.distance.sokalsneath(u,v)
scipy.spatial.distance.sqeuclidean(u,v)
scipy.spatial.distance.squareform(X,force='no',checks=True)
scipy.spatial.distance.wminkowski(u,v,p,w)
scipy.spatial.distance.yule(u,v)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/spatial/setupscons.py----------------------------------------
A:scipy.spatial.setupscons.config->Configuration('spatial', parent_package, top_path)
scipy.spatial.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/spatial/kdtree.py----------------------------------------
A:scipy.spatial.kdtree.x->numpy.asarray(x)
A:scipy.spatial.kdtree.y->numpy.asarray(y)
A:scipy.spatial.kdtree.self.maxes->numpy.amax(self.data, axis=0)
A:scipy.spatial.kdtree.self.mins->numpy.amin(self.data, axis=0)
A:scipy.spatial.kdtree.mid->numpy.copy(self.mins)
A:scipy.spatial.kdtree.less->Rectangle(self.mins, mid)
A:scipy.spatial.kdtree.greater->Rectangle(mid, self.maxes)
A:scipy.spatial.kdtree.self.data->numpy.asarray(data)
A:scipy.spatial.kdtree.(self.n, self.m)->numpy.shape(self.data)
A:scipy.spatial.kdtree.self.leafsize->int(leafsize)
A:scipy.spatial.kdtree.self.tree->self.__build(np.arange(self.n), self.maxes, self.mins)
A:scipy.spatial.kdtree.self.children->len(idx)
A:scipy.spatial.kdtree.d->minkowski_distance(self.data[i], other.data[j], p)
A:scipy.spatial.kdtree.split->numpy.amax(data)
A:scipy.spatial.kdtree.less_idx->numpy.arange(len(data) - 1)
A:scipy.spatial.kdtree.greater_idx->numpy.array([len(data) - 1])
A:scipy.spatial.kdtree.lessmaxes->numpy.copy(maxes)
A:scipy.spatial.kdtree.greatermins->numpy.copy(mins)
A:scipy.spatial.kdtree.side_distances->numpy.maximum(0, np.maximum(x - self.maxes, self.mins - x))
A:scipy.spatial.kdtree.min_distance->max(min_distance, abs(node.split - x[node.split_dim]))
A:scipy.spatial.kdtree.(min_distance, side_distances, node)->heappop(q)
A:scipy.spatial.kdtree.ds->minkowski_distance(self.data[node1.idx][:, np.newaxis, :], other.data[node2.idx][np.newaxis, :, :], p).ravel()
A:scipy.spatial.kdtree.sd->list(side_distances)
A:scipy.spatial.kdtree.sd[node.split_dim]->numpy.abs(node.split - x[node.split_dim])
A:scipy.spatial.kdtree.dd->numpy.empty(k, dtype=np.float)
A:scipy.spatial.kdtree.ii->numpy.empty(k, dtype=np.int)
A:scipy.spatial.kdtree.hits->self.__query(x, k=k, eps=eps, p=p, distance_upper_bound=distance_upper_bound)
A:scipy.spatial.kdtree.R->Rectangle(self.maxes, self.mins)
A:scipy.spatial.kdtree.(less, greater)->rect1.split(node1.split_dim, node1.split)
A:scipy.spatial.kdtree.result->numpy.empty((m, n), dtype=np.float)
A:scipy.spatial.kdtree.result[c]->self.__query_ball_point(x[c], r, p=p, eps=eps)
A:scipy.spatial.kdtree.(less1, greater1)->rect1.split(node1.split_dim, node1.split)
A:scipy.spatial.kdtree.(less2, greater2)->rect2.split(node2.split_dim, node2.split)
A:scipy.spatial.kdtree.results->set()
A:scipy.spatial.kdtree.min_r->rect1.min_distance_rectangle(rect2, p)
A:scipy.spatial.kdtree.max_r->rect1.max_distance_rectangle(rect2, p)
A:scipy.spatial.kdtree.R1->Rectangle(self.maxes, self.mins)
A:scipy.spatial.kdtree.R2->Rectangle(other.maxes, other.mins)
A:scipy.spatial.kdtree.r->numpy.asarray(r)
A:scipy.spatial.kdtree.result[i, :]->minkowski_distance(x[i], y, p)
A:scipy.spatial.kdtree.result[:, j]->minkowski_distance(x, y[j], p)
scipy.spatial.KDTree(self,data,leafsize=10)
scipy.spatial.KDTree.__build(self,idx,maxes,mins)
scipy.spatial.KDTree.__query(self,x,k=1,eps=0,p=2,distance_upper_bound=np.inf)
scipy.spatial.KDTree.__query_ball_point(self,x,r,p=2.0,eps=0)
scipy.spatial.KDTree.count_neighbors(self,other,r,p=2.0)
scipy.spatial.KDTree.innernode(self,split_dim,split,less,greater)
scipy.spatial.KDTree.leafnode(self,idx)
scipy.spatial.KDTree.node(object)
scipy.spatial.KDTree.query(self,x,k=1,eps=0,p=2,distance_upper_bound=np.inf)
scipy.spatial.KDTree.query_ball_point(self,x,r,p=2.0,eps=0)
scipy.spatial.KDTree.query_ball_tree(self,other,r,p=2.0,eps=0)
scipy.spatial.KDTree.query_pairs(self,r,p=2.0,eps=0)
scipy.spatial.KDTree.sparse_distance_matrix(self,other,max_distance,p=2.0)
scipy.spatial.Rectangle(self,maxes,mins)
scipy.spatial.Rectangle.__repr__(self)
scipy.spatial.Rectangle.max_distance_point(self,x,p=2.0)
scipy.spatial.Rectangle.max_distance_rectangle(self,other,p=2.0)
scipy.spatial.Rectangle.min_distance_point(self,x,p=2.0)
scipy.spatial.Rectangle.min_distance_rectangle(self,other,p=2.0)
scipy.spatial.Rectangle.split(self,d,split)
scipy.spatial.Rectangle.volume(self)
scipy.spatial.distance_matrix(x,y,p=2,threshold=1000000)
scipy.spatial.kdtree.KDTree(self,data,leafsize=10)
scipy.spatial.kdtree.KDTree.__build(self,idx,maxes,mins)
scipy.spatial.kdtree.KDTree.__init__(self,data,leafsize=10)
scipy.spatial.kdtree.KDTree.__query(self,x,k=1,eps=0,p=2,distance_upper_bound=np.inf)
scipy.spatial.kdtree.KDTree.__query_ball_point(self,x,r,p=2.0,eps=0)
scipy.spatial.kdtree.KDTree.count_neighbors(self,other,r,p=2.0)
scipy.spatial.kdtree.KDTree.innernode(self,split_dim,split,less,greater)
scipy.spatial.kdtree.KDTree.innernode.__init__(self,split_dim,split,less,greater)
scipy.spatial.kdtree.KDTree.leafnode(self,idx)
scipy.spatial.kdtree.KDTree.leafnode.__init__(self,idx)
scipy.spatial.kdtree.KDTree.node(object)
scipy.spatial.kdtree.KDTree.query(self,x,k=1,eps=0,p=2,distance_upper_bound=np.inf)
scipy.spatial.kdtree.KDTree.query_ball_point(self,x,r,p=2.0,eps=0)
scipy.spatial.kdtree.KDTree.query_ball_tree(self,other,r,p=2.0,eps=0)
scipy.spatial.kdtree.KDTree.query_pairs(self,r,p=2.0,eps=0)
scipy.spatial.kdtree.KDTree.sparse_distance_matrix(self,other,max_distance,p=2.0)
scipy.spatial.kdtree.Rectangle(self,maxes,mins)
scipy.spatial.kdtree.Rectangle.__init__(self,maxes,mins)
scipy.spatial.kdtree.Rectangle.__repr__(self)
scipy.spatial.kdtree.Rectangle.max_distance_point(self,x,p=2.0)
scipy.spatial.kdtree.Rectangle.max_distance_rectangle(self,other,p=2.0)
scipy.spatial.kdtree.Rectangle.min_distance_point(self,x,p=2.0)
scipy.spatial.kdtree.Rectangle.min_distance_rectangle(self,other,p=2.0)
scipy.spatial.kdtree.Rectangle.split(self,d,split)
scipy.spatial.kdtree.Rectangle.volume(self)
scipy.spatial.kdtree.distance_matrix(x,y,p=2,threshold=1000000)
scipy.spatial.kdtree.minkowski_distance(x,y,p=2)
scipy.spatial.kdtree.minkowski_distance_p(x,y,p=2)
scipy.spatial.minkowski_distance(x,y,p=2)
scipy.spatial.minkowski_distance_p(x,y,p=2)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/spatial/setup.py----------------------------------------
A:scipy.spatial.setup.config->Configuration('spatial', parent_package, top_path)
A:scipy.spatial.setup.cfg->dict(get_info('lapack_opt'))
scipy.spatial.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/spatial/tests/test__plotutils.py----------------------------------------
A:scipy.spatial.tests.test__plotutils.fig->matplotlib.pyplot.figure()
A:scipy.spatial.tests.test__plotutils.obj->Voronoi(self.points)
A:scipy.spatial.tests.test__plotutils.s_before->Voronoi(self.points).simplices.copy()
A:scipy.spatial.tests.test__plotutils.r->convex_hull_plot_2d(tri, ax=fig.gca())
A:scipy.spatial.tests.test__plotutils.tri->ConvexHull(self.points)
scipy.spatial.tests.test_TestPlotting
scipy.spatial.tests.test_TestPlotting.test_convex_hull(self)
scipy.spatial.tests.test_TestPlotting.test_delaunay(self)
scipy.spatial.tests.test_TestPlotting.test_voronoi(self)
scipy.spatial.tests.test__plotutils.TestPlotting
scipy.spatial.tests.test__plotutils.TestPlotting.test_convex_hull(self)
scipy.spatial.tests.test__plotutils.TestPlotting.test_delaunay(self)
scipy.spatial.tests.test__plotutils.TestPlotting.test_voronoi(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/spatial/tests/test_kdtree.py----------------------------------------
A:scipy.spatial.tests.test_kdtree.(d, i)->self.kdtree.query(np.zeros((2, 4, 3)), k=kk)
A:scipy.spatial.tests.test_kdtree.(dd, ii)->self.kdtree.query(x, k=self.kdtree.n, p=np.inf, distance_upper_bound=d)
A:scipy.spatial.tests.test_kdtree.d->numpy.amax(dd)
A:scipy.spatial.tests.test_kdtree.(d_real, i_real)->self.kdtree.query(x, k)
A:scipy.spatial.tests.test_kdtree.self.data->numpy.random.randn(n, m)
A:scipy.spatial.tests.test_kdtree.self.kdtree->cKDTree(self.data)
A:scipy.spatial.tests.test_kdtree.self.x->numpy.random.randn(m)
A:scipy.spatial.tests.test_kdtree.(ds, i_s)->self.kdtree.query(qs)
A:scipy.spatial.tests.test_kdtree.l->self.T.query_ball_point(self.x, self.d, p=self.p, eps=self.eps)
A:scipy.spatial.tests.test_kdtree.c->numpy.ones(self.T2.n, dtype=np.bool)
A:scipy.spatial.tests.test_kdtree.self.T->cKDTree(self.data, leafsize=2)
A:scipy.spatial.tests.test_kdtree.T->cKDTree(points)
A:scipy.spatial.tests.test_kdtree.r->cKDTree(points).query_ball_tree(T, d)
A:scipy.spatial.tests.test_kdtree.self.data1->numpy.random.randn(n, m)
A:scipy.spatial.tests.test_kdtree.self.T1->cKDTree(np.random.randn(n, m), leafsize=2)
A:scipy.spatial.tests.test_kdtree.self.data2->numpy.random.randn(n, m)
A:scipy.spatial.tests.test_kdtree.self.T2->cKDTree(np.random.randn(n, m), leafsize=2)
A:scipy.spatial.tests.test_kdtree.self.rect->Rectangle([0, 0], [1, 1])
A:scipy.spatial.tests.test_kdtree.(less, greater)->self.rect.split(0, 0.1)
A:scipy.spatial.tests.test_kdtree.x->numpy.random.randn(10, 1, 3)
A:scipy.spatial.tests.test_kdtree.y->numpy.random.randn(1, 7, 3)
A:scipy.spatial.tests.test_kdtree.rs->numpy.exp(np.linspace(np.log(0.01), np.log(10), 3))
A:scipy.spatial.tests.test_kdtree.results->self.T1.count_neighbors(self.T2, rs)
A:scipy.spatial.tests.test_kdtree.M->self.T1.sparse_distance_matrix(self.T1, self.r)
A:scipy.spatial.tests.test_kdtree.xs->numpy.random.randn(m, k)
A:scipy.spatial.tests.test_kdtree.ys->numpy.random.randn(n, k)
A:scipy.spatial.tests.test_kdtree.ds->distance_matrix(xs, ys)
A:scipy.spatial.tests.test_kdtree.dsl->distance_matrix(xs, ys, threshold=1)
A:scipy.spatial.tests.test_kdtree.s->set()
A:scipy.spatial.tests.test_kdtree.points->numpy.asarray(points, dtype=np.float)
A:scipy.spatial.tests.test_kdtree.tree->KDTree(points)
scipy.spatial.tests.test_ConsistencyTests
scipy.spatial.tests.test_ConsistencyTests.test_approx(self)
scipy.spatial.tests.test_ConsistencyTests.test_m_nearest(self)
scipy.spatial.tests.test_ConsistencyTests.test_nearest(self)
scipy.spatial.tests.test_ConsistencyTests.test_points_near(self)
scipy.spatial.tests.test_ConsistencyTests.test_points_near_l1(self)
scipy.spatial.tests.test_ConsistencyTests.test_points_near_linf(self)
scipy.spatial.tests.test_ball_consistency
scipy.spatial.tests.test_ball_consistency.test_found_all(self)
scipy.spatial.tests.test_ball_consistency.test_in_ball(self)
scipy.spatial.tests.test_check_onetree_query(T,d)
scipy.spatial.tests.test_kdtree.ConsistencyTests
scipy.spatial.tests.test_kdtree.ConsistencyTests.test_approx(self)
scipy.spatial.tests.test_kdtree.ConsistencyTests.test_m_nearest(self)
scipy.spatial.tests.test_kdtree.ConsistencyTests.test_nearest(self)
scipy.spatial.tests.test_kdtree.ConsistencyTests.test_points_near(self)
scipy.spatial.tests.test_kdtree.ConsistencyTests.test_points_near_l1(self)
scipy.spatial.tests.test_kdtree.ConsistencyTests.test_points_near_linf(self)
scipy.spatial.tests.test_kdtree.ball_consistency
scipy.spatial.tests.test_kdtree.ball_consistency.test_found_all(self)
scipy.spatial.tests.test_kdtree.ball_consistency.test_in_ball(self)
scipy.spatial.tests.test_kdtree.check_onetree_query(T,d)
scipy.spatial.tests.test_kdtree.test_ball_point_ints()
scipy.spatial.tests.test_kdtree.test_count_neighbors
scipy.spatial.tests.test_kdtree.test_count_neighbors.setUp(self)
scipy.spatial.tests.test_kdtree.test_count_neighbors.test_large_radius(self)
scipy.spatial.tests.test_kdtree.test_count_neighbors.test_multiple_radius(self)
scipy.spatial.tests.test_kdtree.test_count_neighbors.test_one_radius(self)
scipy.spatial.tests.test_kdtree.test_count_neighbors_compiled
scipy.spatial.tests.test_kdtree.test_count_neighbors_compiled.setUp(self)
scipy.spatial.tests.test_kdtree.test_count_neighbors_compiled.test_large_radius(self)
scipy.spatial.tests.test_kdtree.test_count_neighbors_compiled.test_multiple_radius(self)
scipy.spatial.tests.test_kdtree.test_count_neighbors_compiled.test_one_radius(self)
scipy.spatial.tests.test_kdtree.test_distance_l1()
scipy.spatial.tests.test_kdtree.test_distance_l2()
scipy.spatial.tests.test_kdtree.test_distance_linf()
scipy.spatial.tests.test_kdtree.test_distance_matrix()
scipy.spatial.tests.test_kdtree.test_distance_matrix_looping()
scipy.spatial.tests.test_kdtree.test_distance_vectorization()
scipy.spatial.tests.test_kdtree.test_onetree_query()
scipy.spatial.tests.test_kdtree.test_onetree_query_compiled()
scipy.spatial.tests.test_kdtree.test_query_pairs_single_node()
scipy.spatial.tests.test_kdtree.test_query_pairs_single_node_compiled()
scipy.spatial.tests.test_kdtree.test_random(ConsistencyTests)
scipy.spatial.tests.test_kdtree.test_random.setUp(self)
scipy.spatial.tests.test_kdtree.test_random_ball(ball_consistency)
scipy.spatial.tests.test_kdtree.test_random_ball.setUp(self)
scipy.spatial.tests.test_kdtree.test_random_ball_approx(test_random_ball)
scipy.spatial.tests.test_kdtree.test_random_ball_approx.setUp(self)
scipy.spatial.tests.test_kdtree.test_random_ball_approx_compiled(test_random_ball_compiled)
scipy.spatial.tests.test_kdtree.test_random_ball_approx_compiled.setUp(self)
scipy.spatial.tests.test_kdtree.test_random_ball_compiled(ball_consistency)
scipy.spatial.tests.test_kdtree.test_random_ball_compiled.setUp(self)
scipy.spatial.tests.test_kdtree.test_random_ball_far(test_random_ball)
scipy.spatial.tests.test_kdtree.test_random_ball_far.setUp(self)
scipy.spatial.tests.test_kdtree.test_random_ball_far_compiled(test_random_ball_compiled)
scipy.spatial.tests.test_kdtree.test_random_ball_far_compiled.setUp(self)
scipy.spatial.tests.test_kdtree.test_random_ball_l1(test_random_ball)
scipy.spatial.tests.test_kdtree.test_random_ball_l1.setUp(self)
scipy.spatial.tests.test_kdtree.test_random_ball_l1_compiled(test_random_ball_compiled)
scipy.spatial.tests.test_kdtree.test_random_ball_l1_compiled.setUp(self)
scipy.spatial.tests.test_kdtree.test_random_ball_linf(test_random_ball)
scipy.spatial.tests.test_kdtree.test_random_ball_linf.setUp(self)
scipy.spatial.tests.test_kdtree.test_random_ball_linf_compiled(test_random_ball_compiled)
scipy.spatial.tests.test_kdtree.test_random_ball_linf_compiled.setUp(self)
scipy.spatial.tests.test_kdtree.test_random_ball_vectorized()
scipy.spatial.tests.test_kdtree.test_random_ball_vectorized_compiled()
scipy.spatial.tests.test_kdtree.test_random_compiled(test_random)
scipy.spatial.tests.test_kdtree.test_random_compiled.setUp(self)
scipy.spatial.tests.test_kdtree.test_random_far(test_random)
scipy.spatial.tests.test_kdtree.test_random_far.setUp(self)
scipy.spatial.tests.test_kdtree.test_random_far_compiled(test_random_far)
scipy.spatial.tests.test_kdtree.test_random_far_compiled.setUp(self)
scipy.spatial.tests.test_kdtree.test_rectangle
scipy.spatial.tests.test_kdtree.test_rectangle.setUp(self)
scipy.spatial.tests.test_kdtree.test_rectangle.test_max_inside(self)
scipy.spatial.tests.test_kdtree.test_rectangle.test_max_one_side(self)
scipy.spatial.tests.test_kdtree.test_rectangle.test_max_two_sides(self)
scipy.spatial.tests.test_kdtree.test_rectangle.test_min_inside(self)
scipy.spatial.tests.test_kdtree.test_rectangle.test_min_one_side(self)
scipy.spatial.tests.test_kdtree.test_rectangle.test_min_two_sides(self)
scipy.spatial.tests.test_kdtree.test_rectangle.test_split(self)
scipy.spatial.tests.test_kdtree.test_small(ConsistencyTests)
scipy.spatial.tests.test_kdtree.test_small.setUp(self)
scipy.spatial.tests.test_kdtree.test_small.test_nearest(self)
scipy.spatial.tests.test_kdtree.test_small.test_nearest_two(self)
scipy.spatial.tests.test_kdtree.test_small_compiled(test_small)
scipy.spatial.tests.test_kdtree.test_small_compiled.setUp(self)
scipy.spatial.tests.test_kdtree.test_small_nonleaf(test_small)
scipy.spatial.tests.test_kdtree.test_small_nonleaf.setUp(self)
scipy.spatial.tests.test_kdtree.test_small_nonleaf_compiled(test_small)
scipy.spatial.tests.test_kdtree.test_small_nonleaf_compiled.setUp(self)
scipy.spatial.tests.test_kdtree.test_sparse_distance_matrix
scipy.spatial.tests.test_kdtree.test_sparse_distance_matrix.setUp(self)
scipy.spatial.tests.test_kdtree.test_sparse_distance_matrix.test_consistency_with_neighbors(self)
scipy.spatial.tests.test_kdtree.test_sparse_distance_matrix.test_zero_distance(self)
scipy.spatial.tests.test_kdtree.test_sparse_distance_matrix_compiled
scipy.spatial.tests.test_kdtree.test_sparse_distance_matrix_compiled.setUp(self)
scipy.spatial.tests.test_kdtree.test_sparse_distance_matrix_compiled.test_consistency_with_neighbors(self)
scipy.spatial.tests.test_kdtree.test_sparse_distance_matrix_compiled.test_zero_distance(self)
scipy.spatial.tests.test_kdtree.test_two_random_trees(two_trees_consistency)
scipy.spatial.tests.test_kdtree.test_two_random_trees.setUp(self)
scipy.spatial.tests.test_kdtree.test_two_random_trees_compiled(two_trees_consistency)
scipy.spatial.tests.test_kdtree.test_two_random_trees_compiled.setUp(self)
scipy.spatial.tests.test_kdtree.test_two_random_trees_far(test_two_random_trees)
scipy.spatial.tests.test_kdtree.test_two_random_trees_far.setUp(self)
scipy.spatial.tests.test_kdtree.test_two_random_trees_far_compiled(test_two_random_trees_compiled)
scipy.spatial.tests.test_kdtree.test_two_random_trees_far_compiled.setUp(self)
scipy.spatial.tests.test_kdtree.test_two_random_trees_linf(test_two_random_trees)
scipy.spatial.tests.test_kdtree.test_two_random_trees_linf.setUp(self)
scipy.spatial.tests.test_kdtree.test_two_random_trees_linf_compiled(test_two_random_trees_compiled)
scipy.spatial.tests.test_kdtree.test_two_random_trees_linf_compiled.setUp(self)
scipy.spatial.tests.test_kdtree.test_vectorization
scipy.spatial.tests.test_kdtree.test_vectorization.setUp(self)
scipy.spatial.tests.test_kdtree.test_vectorization.test_single_query(self)
scipy.spatial.tests.test_kdtree.test_vectorization.test_single_query_all_neighbors(self)
scipy.spatial.tests.test_kdtree.test_vectorization.test_single_query_multiple_neighbors(self)
scipy.spatial.tests.test_kdtree.test_vectorization.test_vectorized_query(self)
scipy.spatial.tests.test_kdtree.test_vectorization.test_vectorized_query_all_neighbors(self)
scipy.spatial.tests.test_kdtree.test_vectorization.test_vectorized_query_multiple_neighbors(self)
scipy.spatial.tests.test_kdtree.test_vectorization_compiled
scipy.spatial.tests.test_kdtree.test_vectorization_compiled.setUp(self)
scipy.spatial.tests.test_kdtree.test_vectorization_compiled.test_single_query(self)
scipy.spatial.tests.test_kdtree.test_vectorization_compiled.test_single_query_multiple_neighbors(self)
scipy.spatial.tests.test_kdtree.test_vectorization_compiled.test_vectorized_query(self)
scipy.spatial.tests.test_kdtree.test_vectorization_compiled.test_vectorized_query_multiple_neighbors(self)
scipy.spatial.tests.test_kdtree.test_vectorization_compiled.test_vectorized_query_noncontiguous_values(self)
scipy.spatial.tests.test_kdtree.two_trees_consistency
scipy.spatial.tests.test_kdtree.two_trees_consistency.test_all_in_ball(self)
scipy.spatial.tests.test_kdtree.two_trees_consistency.test_found_all(self)
scipy.spatial.tests.test_test_ball_point_ints()
scipy.spatial.tests.test_test_count_neighbors
scipy.spatial.tests.test_test_count_neighbors.setUp(self)
scipy.spatial.tests.test_test_count_neighbors.test_large_radius(self)
scipy.spatial.tests.test_test_count_neighbors.test_multiple_radius(self)
scipy.spatial.tests.test_test_count_neighbors.test_one_radius(self)
scipy.spatial.tests.test_test_count_neighbors_compiled
scipy.spatial.tests.test_test_count_neighbors_compiled.setUp(self)
scipy.spatial.tests.test_test_count_neighbors_compiled.test_large_radius(self)
scipy.spatial.tests.test_test_count_neighbors_compiled.test_multiple_radius(self)
scipy.spatial.tests.test_test_count_neighbors_compiled.test_one_radius(self)
scipy.spatial.tests.test_test_distance_l1()
scipy.spatial.tests.test_test_distance_l2()
scipy.spatial.tests.test_test_distance_linf()
scipy.spatial.tests.test_test_distance_matrix()
scipy.spatial.tests.test_test_distance_matrix_looping()
scipy.spatial.tests.test_test_distance_vectorization()
scipy.spatial.tests.test_test_onetree_query()
scipy.spatial.tests.test_test_onetree_query_compiled()
scipy.spatial.tests.test_test_query_pairs_single_node()
scipy.spatial.tests.test_test_query_pairs_single_node_compiled()
scipy.spatial.tests.test_test_random(ConsistencyTests)
scipy.spatial.tests.test_test_random.setUp(self)
scipy.spatial.tests.test_test_random_ball(ball_consistency)
scipy.spatial.tests.test_test_random_ball.setUp(self)
scipy.spatial.tests.test_test_random_ball_approx(test_random_ball)
scipy.spatial.tests.test_test_random_ball_approx.setUp(self)
scipy.spatial.tests.test_test_random_ball_approx_compiled(test_random_ball_compiled)
scipy.spatial.tests.test_test_random_ball_approx_compiled.setUp(self)
scipy.spatial.tests.test_test_random_ball_compiled(ball_consistency)
scipy.spatial.tests.test_test_random_ball_compiled.setUp(self)
scipy.spatial.tests.test_test_random_ball_far(test_random_ball)
scipy.spatial.tests.test_test_random_ball_far.setUp(self)
scipy.spatial.tests.test_test_random_ball_far_compiled(test_random_ball_compiled)
scipy.spatial.tests.test_test_random_ball_far_compiled.setUp(self)
scipy.spatial.tests.test_test_random_ball_l1(test_random_ball)
scipy.spatial.tests.test_test_random_ball_l1.setUp(self)
scipy.spatial.tests.test_test_random_ball_l1_compiled(test_random_ball_compiled)
scipy.spatial.tests.test_test_random_ball_l1_compiled.setUp(self)
scipy.spatial.tests.test_test_random_ball_linf(test_random_ball)
scipy.spatial.tests.test_test_random_ball_linf.setUp(self)
scipy.spatial.tests.test_test_random_ball_linf_compiled(test_random_ball_compiled)
scipy.spatial.tests.test_test_random_ball_linf_compiled.setUp(self)
scipy.spatial.tests.test_test_random_ball_vectorized()
scipy.spatial.tests.test_test_random_ball_vectorized_compiled()
scipy.spatial.tests.test_test_random_compiled(test_random)
scipy.spatial.tests.test_test_random_compiled.setUp(self)
scipy.spatial.tests.test_test_random_far(test_random)
scipy.spatial.tests.test_test_random_far.setUp(self)
scipy.spatial.tests.test_test_random_far_compiled(test_random_far)
scipy.spatial.tests.test_test_random_far_compiled.setUp(self)
scipy.spatial.tests.test_test_rectangle
scipy.spatial.tests.test_test_rectangle.setUp(self)
scipy.spatial.tests.test_test_rectangle.test_max_inside(self)
scipy.spatial.tests.test_test_rectangle.test_max_one_side(self)
scipy.spatial.tests.test_test_rectangle.test_max_two_sides(self)
scipy.spatial.tests.test_test_rectangle.test_min_inside(self)
scipy.spatial.tests.test_test_rectangle.test_min_one_side(self)
scipy.spatial.tests.test_test_rectangle.test_min_two_sides(self)
scipy.spatial.tests.test_test_rectangle.test_split(self)
scipy.spatial.tests.test_test_small(ConsistencyTests)
scipy.spatial.tests.test_test_small.setUp(self)
scipy.spatial.tests.test_test_small.test_nearest(self)
scipy.spatial.tests.test_test_small.test_nearest_two(self)
scipy.spatial.tests.test_test_small_compiled(test_small)
scipy.spatial.tests.test_test_small_compiled.setUp(self)
scipy.spatial.tests.test_test_small_nonleaf(test_small)
scipy.spatial.tests.test_test_small_nonleaf.setUp(self)
scipy.spatial.tests.test_test_small_nonleaf_compiled(test_small)
scipy.spatial.tests.test_test_small_nonleaf_compiled.setUp(self)
scipy.spatial.tests.test_test_sparse_distance_matrix
scipy.spatial.tests.test_test_sparse_distance_matrix.setUp(self)
scipy.spatial.tests.test_test_sparse_distance_matrix.test_consistency_with_neighbors(self)
scipy.spatial.tests.test_test_sparse_distance_matrix.test_zero_distance(self)
scipy.spatial.tests.test_test_sparse_distance_matrix_compiled
scipy.spatial.tests.test_test_sparse_distance_matrix_compiled.setUp(self)
scipy.spatial.tests.test_test_sparse_distance_matrix_compiled.test_consistency_with_neighbors(self)
scipy.spatial.tests.test_test_sparse_distance_matrix_compiled.test_zero_distance(self)
scipy.spatial.tests.test_test_two_random_trees(two_trees_consistency)
scipy.spatial.tests.test_test_two_random_trees.setUp(self)
scipy.spatial.tests.test_test_two_random_trees_compiled(two_trees_consistency)
scipy.spatial.tests.test_test_two_random_trees_compiled.setUp(self)
scipy.spatial.tests.test_test_two_random_trees_far(test_two_random_trees)
scipy.spatial.tests.test_test_two_random_trees_far.setUp(self)
scipy.spatial.tests.test_test_two_random_trees_far_compiled(test_two_random_trees_compiled)
scipy.spatial.tests.test_test_two_random_trees_far_compiled.setUp(self)
scipy.spatial.tests.test_test_two_random_trees_linf(test_two_random_trees)
scipy.spatial.tests.test_test_two_random_trees_linf.setUp(self)
scipy.spatial.tests.test_test_two_random_trees_linf_compiled(test_two_random_trees_compiled)
scipy.spatial.tests.test_test_two_random_trees_linf_compiled.setUp(self)
scipy.spatial.tests.test_test_vectorization
scipy.spatial.tests.test_test_vectorization.setUp(self)
scipy.spatial.tests.test_test_vectorization.test_single_query(self)
scipy.spatial.tests.test_test_vectorization.test_single_query_all_neighbors(self)
scipy.spatial.tests.test_test_vectorization.test_single_query_multiple_neighbors(self)
scipy.spatial.tests.test_test_vectorization.test_vectorized_query(self)
scipy.spatial.tests.test_test_vectorization.test_vectorized_query_all_neighbors(self)
scipy.spatial.tests.test_test_vectorization.test_vectorized_query_multiple_neighbors(self)
scipy.spatial.tests.test_test_vectorization_compiled
scipy.spatial.tests.test_test_vectorization_compiled.setUp(self)
scipy.spatial.tests.test_test_vectorization_compiled.test_single_query(self)
scipy.spatial.tests.test_test_vectorization_compiled.test_single_query_multiple_neighbors(self)
scipy.spatial.tests.test_test_vectorization_compiled.test_vectorized_query(self)
scipy.spatial.tests.test_test_vectorization_compiled.test_vectorized_query_multiple_neighbors(self)
scipy.spatial.tests.test_test_vectorization_compiled.test_vectorized_query_noncontiguous_values(self)
scipy.spatial.tests.test_two_trees_consistency
scipy.spatial.tests.test_two_trees_consistency.test_all_in_ball(self)
scipy.spatial.tests.test_two_trees_consistency.test_found_all(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/spatial/tests/test_qhull.py----------------------------------------
A:scipy.spatial.tests.test_qhull.a->list(map(tpl, a))
A:scipy.spatial.tests.test_qhull.b->list(map(tpl, b))
A:scipy.spatial.tests.test_qhull.pathological_data_1->numpy.array([[-3.14, -3.14], [-3.14, -2.36], [-3.14, -1.57], [-3.14, -0.79], [-3.14, 0.0], [-3.14, 0.79], [-3.14, 1.57], [-3.14, 2.36], [-3.14, 3.14], [-2.36, -3.14], [-2.36, -2.36], [-2.36, -1.57], [-2.36, -0.79], [-2.36, 0.0], [-2.36, 0.79], [-2.36, 1.57], [-2.36, 2.36], [-2.36, 3.14], [-1.57, -0.79], [-1.57, 0.79], [-1.57, -1.57], [-1.57, 0.0], [-1.57, 1.57], [-1.57, -3.14], [-1.57, -2.36], [-1.57, 2.36], [-1.57, 3.14], [-0.79, -1.57], [-0.79, 1.57], [-0.79, -3.14], [-0.79, -2.36], [-0.79, -0.79], [-0.79, 0.0], [-0.79, 0.79], [-0.79, 2.36], [-0.79, 3.14], [0.0, -3.14], [0.0, -2.36], [0.0, -1.57], [0.0, -0.79], [0.0, 0.0], [0.0, 0.79], [0.0, 1.57], [0.0, 2.36], [0.0, 3.14], [0.79, -3.14], [0.79, -2.36], [0.79, -0.79], [0.79, 0.0], [0.79, 0.79], [0.79, 2.36], [0.79, 3.14], [0.79, -1.57], [0.79, 1.57], [1.57, -3.14], [1.57, -2.36], [1.57, 2.36], [1.57, 3.14], [1.57, -1.57], [1.57, 0.0], [1.57, 1.57], [1.57, -0.79], [1.57, 0.79], [2.36, -3.14], [2.36, -2.36], [2.36, -1.57], [2.36, -0.79], [2.36, 0.0], [2.36, 0.79], [2.36, 1.57], [2.36, 2.36], [2.36, 3.14], [3.14, -3.14], [3.14, -2.36], [3.14, -1.57], [3.14, -0.79], [3.14, 0.0], [3.14, 0.79], [3.14, 1.57], [3.14, 2.36], [3.14, 3.14]])
A:scipy.spatial.tests.test_qhull.pathological_data_2->numpy.array([[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 0], [0, 1], [1, -1 - np.finfo(np.float_).eps], [1, 0], [1, 1]])
A:scipy.spatial.tests.test_qhull.x->numpy.array([0, 1, 0, 1], dtype=np.float64)
A:scipy.spatial.tests.test_qhull.xd->copy.deepcopy(x.get_voronoi_diagram())
A:scipy.spatial.tests.test_qhull.y->numpy.array([0, 0, 1, 1], dtype=np.float64)
A:scipy.spatial.tests.test_qhull.yd->copy.deepcopy(y.get_voronoi_diagram())
A:scipy.spatial.tests.test_qhull.xd2->copy.deepcopy(x.get_voronoi_diagram())
A:scipy.spatial.tests.test_qhull.yd2->copy.deepcopy(y.get_voronoi_diagram())
A:scipy.spatial.tests.test_qhull.points->numpy.random.rand(10, 2)
A:scipy.spatial.tests.test_qhull.tri->scipy.spatial.qhull.Delaunay(points)
A:scipy.spatial.tests.test_qhull.i->scipy.spatial.qhull.Delaunay(points).find_simplex(p[:2])
A:scipy.spatial.tests.test_qhull.j->scipy.spatial.qhull.Delaunay(points).find_simplex(centroids)
A:scipy.spatial.tests.test_qhull.p->numpy.array([0.99966555, 0.15685619], dtype=np.double)
A:scipy.spatial.tests.test_qhull.z->scipy.spatial.qhull.Delaunay(points).lift_points(x)
A:scipy.spatial.tests.test_qhull.pz->scipy.spatial.qhull.Delaunay(points).lift_points(p)
A:scipy.spatial.tests.test_qhull.dist->scipy.spatial.qhull.Delaunay(points).plane_distance(p)
A:scipy.spatial.tests.test_qhull.n->numpy.array([-t[1], t[0]])
A:scipy.spatial.tests.test_qhull.d->numpy.dot(n, pz - x3)
A:scipy.spatial.tests.test_qhull.c->barycentric_transform(tri.transform, centroids)
A:scipy.spatial.tests.test_qhull.olderr->numpy.seterr(invalid='ignore')
A:scipy.spatial.tests.test_qhull.volume->numpy.array([np.linalg.det(q[k, :, :]) for k in range(tri.nsimplex)])
A:scipy.spatial.tests.test_qhull.at_boundary->(centroids <= unit_cube_tol).any(axis=1)
A:scipy.spatial.tests.test_qhull.data->numpy.load(os.path.join(os.path.dirname(__file__), 'data', 'degenerate_pointset.npz'))
A:scipy.spatial.tests.test_qhull.bad_count->numpy.isnan(tri.transform[:, 0, 0]).sum()
A:scipy.spatial.tests.test_qhull.tri2->scipy.spatial.qhull.Delaunay(np.c_[xp, yp])
A:scipy.spatial.tests.test_qhull.expected->numpy.array([(1, 4, 0), (2, 4, 0)])
A:scipy.spatial.tests.test_qhull.obj->scipy.spatial.qhull.Voronoi(points[:nmin], incremental=True, qhull_options=opts)
A:scipy.spatial.tests.test_qhull.obj2->scipy.spatial.qhull.Voronoi(points)
A:scipy.spatial.tests.test_qhull.obj3->scipy.spatial.qhull.Voronoi(points[:nmin], incremental=True, qhull_options=opts)
A:scipy.spatial.tests.test_qhull.facets_1->set(map(sorted_tuple, facets_1))
A:scipy.spatial.tests.test_qhull.facets_2->set(map(sorted_tuple, facets_2))
A:scipy.spatial.tests.test_qhull.c1->numpy.dot(t, points[a] - points[ap])
A:scipy.spatial.tests.test_qhull.c2->numpy.dot(t, points[b] - points[ap])
A:scipy.spatial.tests.test_qhull.c3->numpy.dot(t, points[bp] - points[ap])
A:scipy.spatial.tests.test_qhull.hull->scipy.spatial.qhull.ConvexHull(points)
A:scipy.spatial.tests.test_qhull.nvertex->int(output[1][0])
A:scipy.spatial.tests.test_qhull.vertices->list(map(tuple, output[3:2 + nvertex]))
A:scipy.spatial.tests.test_qhull.nregion->int(output[1][1])
A:scipy.spatial.tests.test_qhull.nridge->int(output[2 + nvertex + nregion][0])
A:scipy.spatial.tests.test_qhull.vor->scipy.spatial.qhull.Voronoi(points)
A:scipy.spatial.tests.test_qhull.p1->list(zip(list(map(sorttuple, ridge_points)), list(map(sorttuple, ridge_vertices))))
A:scipy.spatial.tests.test_qhull.p2->list(zip(list(map(sorttuple, vor.ridge_points.tolist())), list(map(sorttuple, vor.ridge_vertices))))
A:scipy.spatial.tests.test_qhull.tree->KDTree(points)
A:scipy.spatial.tests.test_qhull.ridge_midpoint->scipy.spatial.qhull.Voronoi(points).vertices[v].mean(axis=0)
A:scipy.spatial.tests.test_qhull.(dist, k)->KDTree(points).query(ridge_midpoint - d, k=1)
A:scipy.spatial.tests.test_qhull.items->set(map(sorted_tuple, x))
scipy.spatial.tests.test_TestConvexHull
scipy.spatial.tests.test_TestConvexHull.test_hull_consistency_tri(self)
scipy.spatial.tests.test_TestConvexHull.test_incremental(self)
scipy.spatial.tests.test_TestDelaunay(object)
scipy.spatial.tests.test_TestDelaunay.test_2d_square(self)
scipy.spatial.tests.test_TestDelaunay.test_coplanar(self)
scipy.spatial.tests.test_TestDelaunay.test_duplicate_points(self)
scipy.spatial.tests.test_TestDelaunay.test_furthest_site(self)
scipy.spatial.tests.test_TestDelaunay.test_incremental(self)
scipy.spatial.tests.test_TestDelaunay.test_joggle(self)
scipy.spatial.tests.test_TestDelaunay.test_nd_simplex(self)
scipy.spatial.tests.test_TestDelaunay.test_pathological(self)
scipy.spatial.tests.test_TestRidgeIter2D(object)
scipy.spatial.tests.test_TestRidgeIter2D._check_ridges(self,tri,vertex,expected)
scipy.spatial.tests.test_TestRidgeIter2D.test_complicated(self)
scipy.spatial.tests.test_TestRidgeIter2D.test_rectangle(self)
scipy.spatial.tests.test_TestRidgeIter2D.test_triangle(self)
scipy.spatial.tests.test_TestUtilities(object)
scipy.spatial.tests.test_TestUtilities._check_barycentric_transforms(self,tri,err_msg='',unit_cube=False,unit_cube_tol=0)
scipy.spatial.tests.test_TestUtilities.test_convex_hull(self)
scipy.spatial.tests.test_TestUtilities.test_degenerate_barycentric_transforms(self)
scipy.spatial.tests.test_TestUtilities.test_find_simplex(self)
scipy.spatial.tests.test_TestUtilities.test_more_barycentric_transforms(self)
scipy.spatial.tests.test_TestUtilities.test_plane_distance(self)
scipy.spatial.tests.test_TestVoronoi
scipy.spatial.tests.test_TestVoronoi._compare_qvoronoi(self,points,output,**kw)
scipy.spatial.tests.test_TestVoronoi.test_furthest_site(self)
scipy.spatial.tests.test_TestVoronoi.test_incremental(self)
scipy.spatial.tests.test_TestVoronoi.test_ridges(self)
scipy.spatial.tests.test_TestVoronoi.test_simple(self)
scipy.spatial.tests.test_Test_Qhull(object)
scipy.spatial.tests.test_Test_Qhull.test_swapping(self)
scipy.spatial.tests.test_assert_hulls_equal(points,facets_1,facets_2)
scipy.spatial.tests.test_assert_unordered_tuple_list_equal(a,b,tpl=tuple)
scipy.spatial.tests.test_qhull.TestConvexHull
scipy.spatial.tests.test_qhull.TestConvexHull.test_hull_consistency_tri(self)
scipy.spatial.tests.test_qhull.TestConvexHull.test_incremental(self)
scipy.spatial.tests.test_qhull.TestDelaunay(object)
scipy.spatial.tests.test_qhull.TestDelaunay.test_2d_square(self)
scipy.spatial.tests.test_qhull.TestDelaunay.test_coplanar(self)
scipy.spatial.tests.test_qhull.TestDelaunay.test_duplicate_points(self)
scipy.spatial.tests.test_qhull.TestDelaunay.test_furthest_site(self)
scipy.spatial.tests.test_qhull.TestDelaunay.test_incremental(self)
scipy.spatial.tests.test_qhull.TestDelaunay.test_joggle(self)
scipy.spatial.tests.test_qhull.TestDelaunay.test_nd_simplex(self)
scipy.spatial.tests.test_qhull.TestDelaunay.test_pathological(self)
scipy.spatial.tests.test_qhull.TestRidgeIter2D(object)
scipy.spatial.tests.test_qhull.TestRidgeIter2D._check_ridges(self,tri,vertex,expected)
scipy.spatial.tests.test_qhull.TestRidgeIter2D.test_complicated(self)
scipy.spatial.tests.test_qhull.TestRidgeIter2D.test_rectangle(self)
scipy.spatial.tests.test_qhull.TestRidgeIter2D.test_triangle(self)
scipy.spatial.tests.test_qhull.TestUtilities(object)
scipy.spatial.tests.test_qhull.TestUtilities._check_barycentric_transforms(self,tri,err_msg='',unit_cube=False,unit_cube_tol=0)
scipy.spatial.tests.test_qhull.TestUtilities.test_convex_hull(self)
scipy.spatial.tests.test_qhull.TestUtilities.test_degenerate_barycentric_transforms(self)
scipy.spatial.tests.test_qhull.TestUtilities.test_find_simplex(self)
scipy.spatial.tests.test_qhull.TestUtilities.test_more_barycentric_transforms(self)
scipy.spatial.tests.test_qhull.TestUtilities.test_plane_distance(self)
scipy.spatial.tests.test_qhull.TestVoronoi
scipy.spatial.tests.test_qhull.TestVoronoi._compare_qvoronoi(self,points,output,**kw)
scipy.spatial.tests.test_qhull.TestVoronoi.test_furthest_site(self)
scipy.spatial.tests.test_qhull.TestVoronoi.test_incremental(self)
scipy.spatial.tests.test_qhull.TestVoronoi.test_ridges(self)
scipy.spatial.tests.test_qhull.TestVoronoi.test_simple(self)
scipy.spatial.tests.test_qhull.Test_Qhull(object)
scipy.spatial.tests.test_qhull.Test_Qhull.test_swapping(self)
scipy.spatial.tests.test_qhull.assert_hulls_equal(points,facets_1,facets_2)
scipy.spatial.tests.test_qhull.assert_unordered_tuple_list_equal(a,b,tpl=tuple)
scipy.spatial.tests.test_qhull.sorted_tuple(x)
scipy.spatial.tests.test_qhull.sorted_unique_tuple(x)
scipy.spatial.tests.test_sorted_tuple(x)
scipy.spatial.tests.test_sorted_unique_tuple(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/spatial/tests/test_distance.py----------------------------------------
A:scipy.spatial.tests.test_distance._tdist->numpy.array([[0, 662, 877, 255, 412, 996], [662, 0, 295, 468, 268, 400], [877, 295, 0, 754, 564, 138], [255, 468, 754, 0, 219, 869], [412, 268, 564, 219, 0, 669], [996, 400, 138, 869, 669, 0]], dtype='double')
A:scipy.spatial.tests.test_distance._ytdist->squareform(_tdist)
A:scipy.spatial.tests.test_distance.name->fn.replace('.txt', '').replace('-ml', '')
A:scipy.spatial.tests.test_distance.fqfn->os.path.join(os.path.dirname(__file__), 'data', fn)
A:scipy.spatial.tests.test_distance.fp->open(fqfn)
A:scipy.spatial.tests.test_distance.eo[name]->numpy.loadtxt(fp)
A:scipy.spatial.tests.test_distance.eo['pdist-boolean-inp']->numpy.bool_(eo['pdist-boolean-inp'])
A:scipy.spatial.tests.test_distance.Y1->cdist(X1, X2, 'sokalsneath')
A:scipy.spatial.tests.test_distance.Y2->cdist(X1, X2, 'test_sokalsneath')
A:scipy.spatial.tests.test_distance.Y_test1->pdist(X, 'chebychev')
A:scipy.spatial.tests.test_distance.X->numpy.random.rand(n, 4)
A:scipy.spatial.tests.test_distance.Y_test2->pdist(X, 'test_chebychev')
A:scipy.spatial.tests.test_distance.Y_right->numpy.float32(eo['pdist-correlation-iris'])
A:scipy.spatial.tests.test_distance.x->numpy.arange(5).reshape(1, -1, 1)
A:scipy.spatial.tests.test_distance.dist->mahalanobis(x, y, vi)
A:scipy.spatial.tests.test_distance.m->russellrao(np.array([1, 0, 1]), np.array([1, 1, 0]))
A:scipy.spatial.tests.test_distance.m2->russellrao(np.array([1, 0, 1], dtype=np.bool), np.array([1, 1, 0], dtype=np.bool))
A:scipy.spatial.tests.test_distance.B->numpy.bool_(D)
A:scipy.spatial.tests.test_distance.y1->pdist(D, 'canberra')
A:scipy.spatial.tests.test_distance.y2->pdist(D, 'test_canberra')
A:scipy.spatial.tests.test_distance.y3->pdist(np.bool_(D), 'test_kulsinski')
A:scipy.spatial.tests.test_distance.pdist_y->pdist(([3.3], [3.4]), 'canberra')
A:scipy.spatial.tests.test_distance.y->_validate_vector(x)
A:scipy.spatial.tests.test_distance.dist1->sokalmichener(p, q)
A:scipy.spatial.tests.test_distance.dist1p5->wminkowski(x, y, p=1.5, w=w)
A:scipy.spatial.tests.test_distance.dist2->sokalmichener(x, y)
A:scipy.spatial.tests.test_distance.w->numpy.array([1.0, 2.0, 0.5])
A:scipy.spatial.tests.test_distance.xm->numpy.array([-1.0, 0, 1.0])
A:scipy.spatial.tests.test_distance.ym->numpy.array([-4.0 / 3, -4.0 / 3, 5.0 - 7.0 / 3])
A:scipy.spatial.tests.test_distance.vi->numpy.array([[2.0, 1.0, 0.0], [1.0, 2.0, 1.0], [0.0, 1.0, 2.0]])
A:scipy.spatial.tests.test_distance.A->squareform(Y)
A:scipy.spatial.tests.test_distance.rA->squareform(np.array(A, dtype='double'))
A:scipy.spatial.tests.test_distance.v->numpy.ones((1,), dtype=np.bool)
A:scipy.spatial.tests.test_distance.rv->squareform(v)
A:scipy.spatial.tests.test_distance.Y->pdist(X)
A:scipy.spatial.tests.test_distance.Yr->squareform(A)
A:scipy.spatial.tests.test_distance.a->set([])
A:scipy.spatial.tests.test_distance.D->squareform(y)
A:scipy.spatial.tests.test_distance.x1->numpy.array([1, 1, 1])
A:scipy.spatial.tests.test_distance.x2->numpy.array([0, 0, 0])
A:scipy.spatial.tests.test_distance.rs->numpy.random.RandomState(1234567890)
A:scipy.spatial.tests.test_distance.d1->euclidean(x, y)
A:scipy.spatial.tests.test_distance.d2->sqeuclidean(x, y)
scipy.spatial.tests.test_distance.TestCdist(TestCase)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_braycurtis_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_canberra_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_chebychev_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_cityblock_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_correlation_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_cosine_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_dice_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_euclidean_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_euclidean_random_unicode(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_hamming_bool_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_hamming_double_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_jaccard_bool_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_jaccard_double_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_kulsinski_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_mahalanobis_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_matching_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_minkowski_random_p1d23(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_minkowski_random_p3d8(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_minkowski_random_p4d6(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_rogerstanimoto_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_russellrao_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_seuclidean_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_sokalmichener_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_sokalsneath_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_sqeuclidean_random(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_wminkowski_random_p1d23(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_wminkowski_random_p3d8(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_wminkowski_random_p4d6(self)
scipy.spatial.tests.test_distance.TestCdist.test_cdist_yule_random(self)
scipy.spatial.tests.test_distance.TestIsValidDM(TestCase)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_assymetric_E(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_assymetric_F(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_correct_1_by_1(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_correct_2_by_2(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_correct_3_by_3(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_correct_4_by_4(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_correct_5_by_5(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_improper_shape_1D_E(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_improper_shape_1D_F(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_improper_shape_3D_E(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_improper_shape_3D_F(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_int16_array_E(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_int16_array_F(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_nonzero_diagonal_E(self)
scipy.spatial.tests.test_distance.TestIsValidDM.test_is_valid_dm_nonzero_diagonal_F(self)
scipy.spatial.tests.test_distance.TestIsValidY(TestCase)
scipy.spatial.tests.test_distance.TestIsValidY.bad_y(self,n)
scipy.spatial.tests.test_distance.TestIsValidY.correct_n_by_n(self,n)
scipy.spatial.tests.test_distance.TestIsValidY.test_is_valid_y_2_100(self)
scipy.spatial.tests.test_distance.TestIsValidY.test_is_valid_y_correct_2_by_2(self)
scipy.spatial.tests.test_distance.TestIsValidY.test_is_valid_y_correct_3_by_3(self)
scipy.spatial.tests.test_distance.TestIsValidY.test_is_valid_y_correct_4_by_4(self)
scipy.spatial.tests.test_distance.TestIsValidY.test_is_valid_y_correct_5_by_5(self)
scipy.spatial.tests.test_distance.TestIsValidY.test_is_valid_y_improper_shape_2D_E(self)
scipy.spatial.tests.test_distance.TestIsValidY.test_is_valid_y_improper_shape_2D_F(self)
scipy.spatial.tests.test_distance.TestIsValidY.test_is_valid_y_improper_shape_3D_E(self)
scipy.spatial.tests.test_distance.TestIsValidY.test_is_valid_y_improper_shape_3D_F(self)
scipy.spatial.tests.test_distance.TestIsValidY.test_is_valid_y_int16_array_E(self)
scipy.spatial.tests.test_distance.TestIsValidY.test_is_valid_y_int16_array_F(self)
scipy.spatial.tests.test_distance.TestNumObsDM(TestCase)
scipy.spatial.tests.test_distance.TestNumObsDM.check_D(self,n)
scipy.spatial.tests.test_distance.TestNumObsDM.make_D(self,n)
scipy.spatial.tests.test_distance.TestNumObsDM.test_num_obs_dm_0(self)
scipy.spatial.tests.test_distance.TestNumObsDM.test_num_obs_dm_1(self)
scipy.spatial.tests.test_distance.TestNumObsDM.test_num_obs_dm_2(self)
scipy.spatial.tests.test_distance.TestNumObsDM.test_num_obs_dm_3(self)
scipy.spatial.tests.test_distance.TestNumObsDM.test_num_obs_dm_4(self)
scipy.spatial.tests.test_distance.TestNumObsDM.test_num_obs_dm_multi_matrix(self)
scipy.spatial.tests.test_distance.TestNumObsY(TestCase)
scipy.spatial.tests.test_distance.TestNumObsY.bad_y(self,n)
scipy.spatial.tests.test_distance.TestNumObsY.check_y(self,n)
scipy.spatial.tests.test_distance.TestNumObsY.make_y(self,n)
scipy.spatial.tests.test_distance.TestNumObsY.minit(self,n)
scipy.spatial.tests.test_distance.TestNumObsY.test_num_obs_y_1(self)
scipy.spatial.tests.test_distance.TestNumObsY.test_num_obs_y_2(self)
scipy.spatial.tests.test_distance.TestNumObsY.test_num_obs_y_2_100(self)
scipy.spatial.tests.test_distance.TestNumObsY.test_num_obs_y_3(self)
scipy.spatial.tests.test_distance.TestNumObsY.test_num_obs_y_4(self)
scipy.spatial.tests.test_distance.TestNumObsY.test_num_obs_y_5_10(self)
scipy.spatial.tests.test_distance.TestNumObsY.test_num_obs_y_multi_matrix(self)
scipy.spatial.tests.test_distance.TestPdist(TestCase)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_canberra_match(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_canberra_ticket_711(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_chebychev_iris(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_chebychev_iris_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_chebychev_iris_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_chebychev_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_chebychev_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_chebychev_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cityblock_iris(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cityblock_iris_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cityblock_iris_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cityblock_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cityblock_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cityblock_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_correlation_iris(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_correlation_iris_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_correlation_iris_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_correlation_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_correlation_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_correlation_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cosine_iris(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cosine_iris_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cosine_iris_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cosine_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cosine_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_cosine_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_dhamming_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_dhamming_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_dhamming_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_dice_match(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_dice_mtica1(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_dice_mtica2(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_djaccard_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_djaccard_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_djaccard_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_euclidean_iris_double(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_euclidean_iris_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_euclidean_iris_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_euclidean_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_euclidean_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_euclidean_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_euclidean_random_u(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_hamming_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_hamming_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_hamming_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_jaccard_match(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_jaccard_mtica1(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_jaccard_mtica2(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_jaccard_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_jaccard_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_jaccard_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_kulsinski_match(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_matching_match(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_matching_mtica1(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_matching_mtica2(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_minkowski_3_2_iris(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_minkowski_3_2_iris_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_minkowski_3_2_iris_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_minkowski_5_8_iris(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_minkowski_5_8_iris_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_minkowski_5_8_iris_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_minkowski_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_minkowski_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_minkowski_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_rogerstanimoto_match(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_rogerstanimoto_mtica1(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_rogerstanimoto_mtica2(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_russellrao_match(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_russellrao_mtica1(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_russellrao_mtica2(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_seuclidean_iris(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_seuclidean_iris_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_seuclidean_iris_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_seuclidean_random(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_seuclidean_random_float32(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_seuclidean_random_nonC(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_sokalmichener_match(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_sokalsneath_match(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_sokalsneath_mtica1(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_sokalsneath_mtica2(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_wminkowski(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_yule_match(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_yule_mtica1(self)
scipy.spatial.tests.test_distance.TestPdist.test_pdist_yule_mtica2(self)
scipy.spatial.tests.test_distance.TestSomeDistanceFunctions(TestCase)
scipy.spatial.tests.test_distance.TestSomeDistanceFunctions.setUp(self)
scipy.spatial.tests.test_distance.TestSomeDistanceFunctions.test_correlation(self)
scipy.spatial.tests.test_distance.TestSomeDistanceFunctions.test_cosine(self)
scipy.spatial.tests.test_distance.TestSomeDistanceFunctions.test_euclidean(self)
scipy.spatial.tests.test_distance.TestSomeDistanceFunctions.test_mahalanobis(self)
scipy.spatial.tests.test_distance.TestSomeDistanceFunctions.test_minkowski(self)
scipy.spatial.tests.test_distance.TestSomeDistanceFunctions.test_sqeuclidean(self)
scipy.spatial.tests.test_distance.TestSomeDistanceFunctions.test_wminkowski(self)
scipy.spatial.tests.test_distance.TestSquareForm(TestCase)
scipy.spatial.tests.test_distance.TestSquareForm.check_squareform_multi_matrix(self,n)
scipy.spatial.tests.test_distance.TestSquareForm.test_squareform_1by1_matrix(self)
scipy.spatial.tests.test_distance.TestSquareForm.test_squareform_2by2_matrix(self)
scipy.spatial.tests.test_distance.TestSquareForm.test_squareform_empty_matrix(self)
scipy.spatial.tests.test_distance.TestSquareForm.test_squareform_empty_vector(self)
scipy.spatial.tests.test_distance.TestSquareForm.test_squareform_multi_matrix(self)
scipy.spatial.tests.test_distance.TestSquareForm.test_squareform_one_binary_vector(self)
scipy.spatial.tests.test_distance.TestSquareForm.test_squareform_one_vector(self)
scipy.spatial.tests.test_distance.is_valid_dm_throw(D)
scipy.spatial.tests.test_distance.is_valid_y_throw(y)
scipy.spatial.tests.test_distance.load_testing_files()
scipy.spatial.tests.test_distance.test__validate_vector()
scipy.spatial.tests.test_distance.test_bad_p()
scipy.spatial.tests.test_distance.test_braycurtis()
scipy.spatial.tests.test_distance.test_canberra()
scipy.spatial.tests.test_distance.test_euclideans()
scipy.spatial.tests.test_distance.test_sokalmichener()
scipy.spatial.tests.test_distance.test_sokalsneath_all_false()
scipy.spatial.tests.test_distance.within_tol(a,b,tol)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/spatial/benchmarks/bench_ckdtree.py----------------------------------------
A:scipy.spatial.benchmarks.bench_ckdtree.data->numpy.concatenate((np.random.randn(n // 2, m), np.random.randn(n - n // 2, m) + np.ones(m)))
A:scipy.spatial.benchmarks.bench_ckdtree.queries->numpy.concatenate((np.random.randn(r // 2, m), np.random.randn(r - r // 2, m) + np.ones(m)))
A:scipy.spatial.benchmarks.bench_ckdtree.T1->KDTree(data1)
A:scipy.spatial.benchmarks.bench_ckdtree.T2->KDTree(data2)
A:scipy.spatial.benchmarks.bench_ckdtree.T3->cKDTree(data, leafsize=n)
A:scipy.spatial.benchmarks.bench_ckdtree.data1->numpy.concatenate((np.random.randn(n1 // 2, m), np.random.randn(n1 - n1 // 2, m) + np.ones(m)))
A:scipy.spatial.benchmarks.bench_ckdtree.data2->numpy.concatenate((np.random.randn(n2 // 2, m), np.random.randn(n2 - n2 // 2, m) + np.ones(m)))
A:scipy.spatial.benchmarks.bench_ckdtree.cT1->cKDTree(data1)
A:scipy.spatial.benchmarks.bench_ckdtree.cT2->cKDTree(data2)
scipy.spatial.benchmarks.bench_TestBuild(TestCase)
scipy.spatial.benchmarks.bench_TestBuild.bench_build(self)
scipy.spatial.benchmarks.bench_TestCountNeighbors(TestCase)
scipy.spatial.benchmarks.bench_TestCountNeighbors.bench_count_neighbors(self)
scipy.spatial.benchmarks.bench_TestQuery(TestCase)
scipy.spatial.benchmarks.bench_TestQuery.bench_query(self)
scipy.spatial.benchmarks.bench_TestQueryBallPoint(TestCase)
scipy.spatial.benchmarks.bench_TestQueryBallPoint.bench_query_ball_point(self)
scipy.spatial.benchmarks.bench_TestQueryPairs(TestCase)
scipy.spatial.benchmarks.bench_TestQueryPairs.bench_query_pairs(self)
scipy.spatial.benchmarks.bench_TestSparseDistanceMatrix(TestCase)
scipy.spatial.benchmarks.bench_TestSparseDistanceMatrix.bench_sparse_distance_matrix(self)
scipy.spatial.benchmarks.bench_ckdtree.TestBuild(TestCase)
scipy.spatial.benchmarks.bench_ckdtree.TestBuild.bench_build(self)
scipy.spatial.benchmarks.bench_ckdtree.TestCountNeighbors(TestCase)
scipy.spatial.benchmarks.bench_ckdtree.TestCountNeighbors.bench_count_neighbors(self)
scipy.spatial.benchmarks.bench_ckdtree.TestQuery(TestCase)
scipy.spatial.benchmarks.bench_ckdtree.TestQuery.bench_query(self)
scipy.spatial.benchmarks.bench_ckdtree.TestQueryBallPoint(TestCase)
scipy.spatial.benchmarks.bench_ckdtree.TestQueryBallPoint.bench_query_ball_point(self)
scipy.spatial.benchmarks.bench_ckdtree.TestQueryPairs(TestCase)
scipy.spatial.benchmarks.bench_ckdtree.TestQueryPairs.bench_query_pairs(self)
scipy.spatial.benchmarks.bench_ckdtree.TestSparseDistanceMatrix(TestCase)
scipy.spatial.benchmarks.bench_ckdtree.TestSparseDistanceMatrix.bench_sparse_distance_matrix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/special/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/special/add_newdocs.py----------------------------------------
scipy.special.add_newdocs.add_newdoc(place,name,doc)
scipy.special.add_newdocs.get(name)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/special/setupscons.py----------------------------------------
A:scipy.special.setupscons.config->Configuration('special', parent_package, top_path)
scipy.special.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/special/_testutils.py----------------------------------------
A:scipy.special._testutils.old_filters->list(getattr(warnings, 'filters', []))
A:scipy.special._testutils.old_errprint->scipy.special.errprint(1)
A:scipy.special._testutils.points->numpy.asarray(points)
A:scipy.special._testutils.results->numpy.asarray(results)
A:scipy.special._testutils.fdata->FuncData(func, data, list(range(npoints)), list(range(npoints, data.shape[1])), rtol=rtol, atol=atol, param_filter=param_filter, knownfailure=knownfailure)
A:scipy.special._testutils.self.param_columns->tuple(param_columns)
A:scipy.special._testutils.self.result_columns->tuple(result_columns)
A:scipy.special._testutils.info->numpy.finfo(dtype)
A:scipy.special._testutils.data->data.astype(dtype).astype(dtype)
A:scipy.special._testutils.(rtol, atol)->self.get_tolerances(dtype)
A:scipy.special._testutils.param_mask->numpy.ones((data.shape[0],), np.bool_)
A:scipy.special._testutils.j->int(j)
A:scipy.special._testutils.wanted->tuple([data[:, j] for j in self.result_columns])
A:scipy.special._testutils.got->self.func(*params)
A:scipy.special._testutils.nan_x->numpy.isnan(x)
A:scipy.special._testutils.nan_y->numpy.isnan(y)
A:scipy.special._testutils.olderr->numpy.seterr(all='ignore')
A:scipy.special._testutils.abs_y->numpy.absolute(y)
A:scipy.special._testutils.diff->numpy.absolute(x - y)
A:scipy.special._testutils.a->'  '.join(map(fmt, params))
A:scipy.special._testutils.b->'  '.join(map(fmt, got))
A:scipy.special._testutils.c->'  '.join(map(fmt, wanted))
A:scipy.special._testutils.d->fmt(rdiff)
scipy.special._testutils.FuncData(self,func,data,param_columns,result_columns,rtol=None,atol=None,param_filter=None,knownfailure=None,dataname=None)
scipy.special._testutils.FuncData.__init__(self,func,data,param_columns,result_columns,rtol=None,atol=None,param_filter=None,knownfailure=None,dataname=None)
scipy.special._testutils.FuncData.__repr__(self)
scipy.special._testutils.FuncData.check(self,data=None,dtype=None)
scipy.special._testutils.FuncData.get_tolerances(self,dtype)
scipy.special._testutils.assert_func_equal(func,results,points,rtol=None,atol=None,param_filter=None,knownfailure=None,vectorized=True,dtype=None)
scipy.special._testutils.assert_tol_equal(a,b,rtol=1e-07,atol=0,err_msg='',verbose=True)
scipy.special._testutils.with_special_errors(func)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/special/basic.py----------------------------------------
A:scipy.special.basic.x->cos(phi)
A:scipy.special.basic.old_settings->seterr(all='ignore')
A:scipy.special.basic.n->int(v)
A:scipy.special.basic.y->zeros(x.shape, ytype)
A:scipy.special.basic.z->atleast_1d(z)
A:scipy.special.basic.zsub->extract(mask2, z)
A:scipy.special.basic.nsub->extract(mask, n)
A:scipy.special.basic.xsub->extract(mask, x)
A:scipy.special.basic.nt->int(nt)
A:scipy.special.basic.(n, m, t, zo)->specfun.jdzo(nt)
A:scipy.special.basic.s->L(v - n, z)
A:scipy.special.basic.(nm, jn, jnp, yn, ynp)->specfun.csphjy(n1, z)
A:scipy.special.basic.(nm, jn, jnp)->specfun.rcty(n1, x)
A:scipy.special.basic.(nm, yn, ynp)->specfun.sphy(n1, z)
A:scipy.special.basic.(nm, In, Inp, kn, knp)->specfun.csphik(n, z)
A:scipy.special.basic.(nm, In, Inp)->specfun.sphi(n, z)
A:scipy.special.basic.(nm, kn, knp)->specfun.sphk(n, z)
A:scipy.special.basic.(Pmn, Pmn_deriv)->lpmn(m, n, x)
A:scipy.special.basic.sph_harm->vectorize(_sph_harmonic, 'D')
A:scipy.special.basic.v->atleast_1d(v)
A:scipy.special.basic.(v, z)->numpy.broadcast_arrays(v, z)
A:scipy.special.basic.old_err->numpy.seterr(all='ignore')
A:scipy.special.basic.num->where(z.real >= 0, iv(v - 1, arg), jv(v - 1, arg))
A:scipy.special.basic.km->int(qm + 0.5 * m)
A:scipy.special.basic.m->int(m)
A:scipy.special.basic.a->mathieu_a(m, q)
A:scipy.special.basic.fc->specfun.fcoef(kd, m, q, b)
A:scipy.special.basic.b->mathieu_b(m, q)
A:scipy.special.basic.sv->errprint(sv)
A:scipy.special.basic.fixarr->where(mf > nf, 0.0, (-1) ** mf * gamma(nf - mf + 1) / gamma(nf + mf + 1))
A:scipy.special.basic.(p, pd)->specfun.lpmn(mp, n, z)
A:scipy.special.basic.mm->max(1, m)
A:scipy.special.basic.nn->max(1, n)
A:scipy.special.basic.(q, qd)->specfun.lqmn(mm, nn, z)
A:scipy.special.basic.(pn, pd)->specfun.lpn(n1, z)
A:scipy.special.basic.(qn, qd)->specfun.lqnb(n1, z)
A:scipy.special.basic.(vm, vl, dl)->specfun.lamn(v1, x)
A:scipy.special.basic.(dv, dp, pdf, pdd)->specfun.pbvv(v1, x)
A:scipy.special.basic.(cpb, cpd)->specfun.cpbdn(n1, z)
scipy.special.SpecialFunctionWarning(Warning)
scipy.special._sph_harmonic(m,n,theta,phi)
scipy.special.agm(a,b)
scipy.special.ai_zeros(nt)
scipy.special.assoc_laguerre(x,n,k=0.0)
scipy.special.basic.SpecialFunctionWarning(Warning)
scipy.special.basic._sph_harmonic(m,n,theta,phi)
scipy.special.basic.agm(a,b)
scipy.special.basic.ai_zeros(nt)
scipy.special.basic.assoc_laguerre(x,n,k=0.0)
scipy.special.basic.bei_zeros(nt)
scipy.special.basic.beip_zeros(nt)
scipy.special.basic.ber_zeros(nt)
scipy.special.basic.bernoulli(n)
scipy.special.basic.berp_zeros(nt)
scipy.special.basic.bessel_diff_formula(v,z,n,L,phase)
scipy.special.basic.bi_zeros(nt)
scipy.special.basic.diric(x,n)
scipy.special.basic.ellipk(m)
scipy.special.basic.erf_zeros(nt)
scipy.special.basic.erfcinv(y)
scipy.special.basic.erfinv(y)
scipy.special.basic.errprint(inflag=None)
scipy.special.basic.euler(n)
scipy.special.basic.fresnel_zeros(nt)
scipy.special.basic.fresnelc_zeros(nt)
scipy.special.basic.fresnels_zeros(nt)
scipy.special.basic.h1vp(v,z,n=1)
scipy.special.basic.h2vp(v,z,n=1)
scipy.special.basic.hyp0f1(v,z)
scipy.special.basic.ivp(v,z,n=1)
scipy.special.basic.jn_zeros(n,nt)
scipy.special.basic.jnjnp_zeros(nt)
scipy.special.basic.jnp_zeros(n,nt)
scipy.special.basic.jnyn_zeros(n,nt)
scipy.special.basic.jvp(v,z,n=1)
scipy.special.basic.kei_zeros(nt)
scipy.special.basic.keip_zeros(nt)
scipy.special.basic.kelvin_zeros(nt)
scipy.special.basic.ker_zeros(nt)
scipy.special.basic.kerp_zeros(nt)
scipy.special.basic.kvp(v,z,n=1)
scipy.special.basic.lmbda(v,x)
scipy.special.basic.lpmn(m,n,z)
scipy.special.basic.lpn(n,z)
scipy.special.basic.lqmn(m,n,z)
scipy.special.basic.lqn(n,z)
scipy.special.basic.mathieu_even_coef(m,q)
scipy.special.basic.mathieu_odd_coef(m,q)
scipy.special.basic.obl_cv_seq(m,n,c)
scipy.special.basic.pbdn_seq(n,z)
scipy.special.basic.pbdv_seq(v,x)
scipy.special.basic.pbvv_seq(v,x)
scipy.special.basic.polygamma(n,x)
scipy.special.basic.pro_cv_seq(m,n,c)
scipy.special.basic.riccati_jn(n,x)
scipy.special.basic.riccati_yn(n,x)
scipy.special.basic.sinc(x)
scipy.special.basic.sph_in(n,z)
scipy.special.basic.sph_inkn(n,z)
scipy.special.basic.sph_jn(n,z)
scipy.special.basic.sph_jnyn(n,z)
scipy.special.basic.sph_kn(n,z)
scipy.special.basic.sph_yn(n,z)
scipy.special.basic.y0_zeros(nt,complex=0)
scipy.special.basic.y1_zeros(nt,complex=0)
scipy.special.basic.y1p_zeros(nt,complex=0)
scipy.special.basic.yn_zeros(n,nt)
scipy.special.basic.ynp_zeros(n,nt)
scipy.special.basic.yvp(v,z,n=1)
scipy.special.bei_zeros(nt)
scipy.special.beip_zeros(nt)
scipy.special.ber_zeros(nt)
scipy.special.bernoulli(n)
scipy.special.berp_zeros(nt)
scipy.special.bessel_diff_formula(v,z,n,L,phase)
scipy.special.bi_zeros(nt)
scipy.special.diric(x,n)
scipy.special.ellipk(m)
scipy.special.erf_zeros(nt)
scipy.special.erfcinv(y)
scipy.special.erfinv(y)
scipy.special.errprint(inflag=None)
scipy.special.euler(n)
scipy.special.fresnel_zeros(nt)
scipy.special.fresnelc_zeros(nt)
scipy.special.fresnels_zeros(nt)
scipy.special.h1vp(v,z,n=1)
scipy.special.h2vp(v,z,n=1)
scipy.special.hyp0f1(v,z)
scipy.special.ivp(v,z,n=1)
scipy.special.jn_zeros(n,nt)
scipy.special.jnjnp_zeros(nt)
scipy.special.jnp_zeros(n,nt)
scipy.special.jnyn_zeros(n,nt)
scipy.special.jvp(v,z,n=1)
scipy.special.kei_zeros(nt)
scipy.special.keip_zeros(nt)
scipy.special.kelvin_zeros(nt)
scipy.special.ker_zeros(nt)
scipy.special.kerp_zeros(nt)
scipy.special.kvp(v,z,n=1)
scipy.special.lmbda(v,x)
scipy.special.lpmn(m,n,z)
scipy.special.lpn(n,z)
scipy.special.lqmn(m,n,z)
scipy.special.lqn(n,z)
scipy.special.mathieu_even_coef(m,q)
scipy.special.mathieu_odd_coef(m,q)
scipy.special.obl_cv_seq(m,n,c)
scipy.special.pbdn_seq(n,z)
scipy.special.pbdv_seq(v,x)
scipy.special.pbvv_seq(v,x)
scipy.special.polygamma(n,x)
scipy.special.pro_cv_seq(m,n,c)
scipy.special.riccati_jn(n,x)
scipy.special.riccati_yn(n,x)
scipy.special.sinc(x)
scipy.special.sph_in(n,z)
scipy.special.sph_inkn(n,z)
scipy.special.sph_jn(n,z)
scipy.special.sph_jnyn(n,z)
scipy.special.sph_kn(n,z)
scipy.special.sph_yn(n,z)
scipy.special.y0_zeros(nt,complex=0)
scipy.special.y1_zeros(nt,complex=0)
scipy.special.y1p_zeros(nt,complex=0)
scipy.special.yn_zeros(n,nt)
scipy.special.ynp_zeros(n,nt)
scipy.special.yvp(v,z,n=1)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/special/generate_ufuncs.py----------------------------------------
A:scipy.special.generate_ufuncs.add_newdocs->__import__('add_newdocs')
A:scipy.special.generate_ufuncs.DANGEROUS_DOWNCAST->set([('F', 'i'), ('F', 'l'), ('F', 'f'), ('F', 'd'), ('F', 'g'), ('D', 'i'), ('D', 'l'), ('D', 'f'), ('D', 'd'), ('D', 'g'), ('G', 'i'), ('G', 'l'), ('G', 'f'), ('G', 'd'), ('G', 'g'), ('f', 'i'), ('f', 'l'), ('d', 'i'), ('d', 'l'), ('g', 'i'), ('g', 'l'), ('l', 'i')])
A:scipy.special.generate_ufuncs.new_inputs->new_inputs.replace(a, b).replace(a, b)
A:scipy.special.generate_ufuncs.new_outputs->new_outputs.replace(a, b).replace(a, b)
A:scipy.special.generate_ufuncs.self.signatures->self._parse_signatures(signatures)
A:scipy.special.generate_ufuncs.self.doc->textwrap.dedent(self.doc).strip()
A:scipy.special.generate_ufuncs.m->re.match('^([a-z0-9_]+)\\s*--\\s*(.*?)\\s*(--.*)?$', line)
A:scipy.special.generate_ufuncs.seen->set()
A:scipy.special.generate_ufuncs.(loop_name, loop)->generate_loop(inarg, outarg, ret, inp, outp)
A:scipy.special.generate_ufuncs.ret->ret.replace('*', '').replace('*', '')
A:scipy.special.generate_ufuncs.inarg_num->len(inarg)
A:scipy.special.generate_ufuncs.outarg_num->len(outp)
A:scipy.special.generate_ufuncs.(c_base_name, fused_part)->re.match('^([a-z0-9_]+)\\s*--\\s*(.*?)\\s*(--.*)?$', line).groups()
A:scipy.special.generate_ufuncs.(variants, inarg_num, outarg_num)->self._get_signatures_and_loops(all_loops)
A:scipy.special.generate_ufuncs.proto_h_basename->os.path.basename(proto_h_filename)
A:scipy.special.generate_ufuncs.lines->ufunc_str.splitlines()
A:scipy.special.generate_ufuncs.line->line.strip().strip()
A:scipy.special.generate_ufuncs.t->ufunc.generate(all_loops)
A:scipy.special.generate_ufuncs.cfuncs->ufunc.get_prototypes()
A:scipy.special.generate_ufuncs.hdrs->headers.get(ufunc.name, ['cephes.h'])
A:scipy.special.generate_ufuncs.var_name->c_name.replace('[', '_').replace(']', '_').replace(' ', '_')
A:scipy.special.generate_ufuncs.toplevel->'\n'.join(list(all_loops.values()) + [defs, toplevel])
A:scipy.special.generate_ufuncs.f->open(fn, 'w')
A:scipy.special.generate_ufuncs.defs_h->unique(defs_h)
A:scipy.special.generate_ufuncs.p->optparse.OptionParser(usage=__doc__.strip())
A:scipy.special.generate_ufuncs.(options, args)->optparse.OptionParser(usage=__doc__.strip()).parse_args()
A:scipy.special.generate_ufuncs.text->re.compile('/\\*(.*?)\\*/', re.S).sub('', text)
A:scipy.special.generate_ufuncs.r->re.compile('/\\*(.*?)\\*/', re.S)
scipy.special.generateUfunc(self,name,signatures)
scipy.special.generateUfunc._get_signatures_and_loops(self,all_loops)
scipy.special.generateUfunc._parse_signature(self,sig)
scipy.special.generateUfunc._parse_signatures(self,sigs)
scipy.special.generateUfunc.cython_func_name(self,c_name,specialized=False,prefix='_func_')
scipy.special.generateUfunc.generate(self,all_loops)
scipy.special.generateUfunc.get_prototypes(self)
scipy.special.generate_ufuncs.Ufunc(self,name,signatures)
scipy.special.generate_ufuncs.Ufunc.__init__(self,name,signatures)
scipy.special.generate_ufuncs.Ufunc._get_signatures_and_loops(self,all_loops)
scipy.special.generate_ufuncs.Ufunc._parse_signature(self,sig)
scipy.special.generate_ufuncs.Ufunc._parse_signatures(self,sigs)
scipy.special.generate_ufuncs.Ufunc.cython_func_name(self,c_name,specialized=False,prefix='_func_')
scipy.special.generate_ufuncs.Ufunc.generate(self,all_loops)
scipy.special.generate_ufuncs.Ufunc.get_prototypes(self)
scipy.special.generate_ufuncs.cast_order(c)
scipy.special.generate_ufuncs.generate(filename,ufunc_str,extra_code)
scipy.special.generate_ufuncs.generate_loop(func_inputs,func_outputs,func_retval,ufunc_inputs,ufunc_outputs)
scipy.special.generate_ufuncs.iter_variants(inputs,outputs)
scipy.special.generate_ufuncs.main()
scipy.special.generate_ufuncs.unique(lst)
scipy.special.generatecast_order(c)
scipy.special.generategenerate(filename,ufunc_str,extra_code)
scipy.special.generategenerate_loop(func_inputs,func_outputs,func_retval,ufunc_inputs,ufunc_outputs)
scipy.special.generateiter_variants(inputs,outputs)
scipy.special.generatemain()
scipy.special.generateunique(lst)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/special/setup.py----------------------------------------
A:scipy.special.setup.config->Configuration('special', parent_package, top_path)
A:scipy.special.setup.curdir->os.path.abspath(os.path.dirname(__file__))
scipy.special.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/special/orthogonal.py----------------------------------------
A:scipy.special.orthogonal.self.__dict__['weights']->numpy.array(list(zip(roots, weights, equiv_weights)))
A:scipy.special.orthogonal.mu->sqrt(hn)
A:scipy.special.orthogonal.nn->numpy.arange(1.0, n)
A:scipy.special.orthogonal.sqrt_bn->sqrt_bn_func(nn)
A:scipy.special.orthogonal.an->an_func(np.concatenate(([0], nn)))
A:scipy.special.orthogonal.(x, v)->eig(np.diagflat(an) + np.diagflat(sqrt_bn, 1) + np.diagflat(sqrt_bn, -1))
A:scipy.special.orthogonal.sortind->x.real.argsort()
A:scipy.special.orthogonal.olderr->numpy.seterr(all='ignore')
A:scipy.special.orthogonal.val->gen_roots_and_weights(n, an_J, sbn_J, mu0)
A:scipy.special.orthogonal.(x, w, mu)->t_roots(n1, mu=1)
A:scipy.special.orthogonal.p->orthopoly1d(x, w, hn, kn, wfunc, limits=(0, 1), monic=monic, eval_func=lambda x: eval_sh_legendre(n, x))
A:scipy.special.orthogonal.(x, w, mu0)->ps_roots(n, mu=1)
A:scipy.special.orthogonal.pp->orthopoly1d(x, w, hn, kn, wfunc=wfunc, limits=(0, 1), monic=monic, eval_func=lambda x: eval_sh_jacobi(n, p, q, x))
A:scipy.special.orthogonal.mu0->sqrt(2 * pi)
A:scipy.special.orthogonal.base->sh_jacobi(n, 2.0, 1.5, monic=monic)
A:scipy.special.orthogonal.[x, w, mu0]->j_roots(n, 0.5, 0.5, mu=1)
A:scipy.special.orthogonal.[x, w]->j_roots(n, 0.5, 0.5, mu=0)
scipy.special.c_roots(n,mu=0)
scipy.special.cg_roots(n,alpha,mu=0)
scipy.special.chebyc(n,monic=0)
scipy.special.chebys(n,monic=0)
scipy.special.chebyt(n,monic=0)
scipy.special.chebyu(n,monic=0)
scipy.special.gegenbauer(n,alpha,monic=0)
scipy.special.gen_roots_and_weights(n,an_func,sqrt_bn_func,mu)
scipy.special.genlaguerre(n,alpha,monic=0)
scipy.special.h_roots(n,mu=0)
scipy.special.he_roots(n,mu=0)
scipy.special.hermite(n,monic=0)
scipy.special.hermitenorm(n,monic=0)
scipy.special.j_roots(n,alpha,beta,mu=0)
scipy.special.jacobi(n,alpha,beta,monic=0)
scipy.special.js_roots(n,p1,q1,mu=0)
scipy.special.l_roots(n,mu=0)
scipy.special.la_roots(n,alpha,mu=0)
scipy.special.laguerre(n,monic=0)
scipy.special.legendre(n,monic=0)
scipy.special.orthogonal.c_roots(n,mu=0)
scipy.special.orthogonal.cg_roots(n,alpha,mu=0)
scipy.special.orthogonal.chebyc(n,monic=0)
scipy.special.orthogonal.chebys(n,monic=0)
scipy.special.orthogonal.chebyt(n,monic=0)
scipy.special.orthogonal.chebyu(n,monic=0)
scipy.special.orthogonal.gegenbauer(n,alpha,monic=0)
scipy.special.orthogonal.gen_roots_and_weights(n,an_func,sqrt_bn_func,mu)
scipy.special.orthogonal.genlaguerre(n,alpha,monic=0)
scipy.special.orthogonal.h_roots(n,mu=0)
scipy.special.orthogonal.he_roots(n,mu=0)
scipy.special.orthogonal.hermite(n,monic=0)
scipy.special.orthogonal.hermitenorm(n,monic=0)
scipy.special.orthogonal.j_roots(n,alpha,beta,mu=0)
scipy.special.orthogonal.jacobi(n,alpha,beta,monic=0)
scipy.special.orthogonal.js_roots(n,p1,q1,mu=0)
scipy.special.orthogonal.l_roots(n,mu=0)
scipy.special.orthogonal.la_roots(n,alpha,mu=0)
scipy.special.orthogonal.laguerre(n,monic=0)
scipy.special.orthogonal.legendre(n,monic=0)
scipy.special.orthogonal.orthopoly1d(self,roots,weights=None,hn=1.0,kn=1.0,wfunc=None,limits=None,monic=0,eval_func=None)
scipy.special.orthogonal.orthopoly1d.__init__(self,roots,weights=None,hn=1.0,kn=1.0,wfunc=None,limits=None,monic=0,eval_func=None)
scipy.special.orthogonal.orthopoly1d._scale(self,p)
scipy.special.orthogonal.p_roots(n,mu=0)
scipy.special.orthogonal.poch(z,m)
scipy.special.orthogonal.ps_roots(n,mu=0)
scipy.special.orthogonal.s_roots(n,mu=0)
scipy.special.orthogonal.sh_chebyt(n,monic=0)
scipy.special.orthogonal.sh_chebyu(n,monic=0)
scipy.special.orthogonal.sh_jacobi(n,p,q,monic=0)
scipy.special.orthogonal.sh_legendre(n,monic=0)
scipy.special.orthogonal.t_roots(n,mu=0)
scipy.special.orthogonal.ts_roots(n,mu=0)
scipy.special.orthogonal.u_roots(n,mu=0)
scipy.special.orthogonal.us_roots(n,mu=0)
scipy.special.orthopoly1d(self,roots,weights=None,hn=1.0,kn=1.0,wfunc=None,limits=None,monic=0,eval_func=None)
scipy.special.orthopoly1d._scale(self,p)
scipy.special.p_roots(n,mu=0)
scipy.special.poch(z,m)
scipy.special.ps_roots(n,mu=0)
scipy.special.s_roots(n,mu=0)
scipy.special.sh_chebyt(n,monic=0)
scipy.special.sh_chebyu(n,monic=0)
scipy.special.sh_jacobi(n,p,q,monic=0)
scipy.special.sh_legendre(n,monic=0)
scipy.special.t_roots(n,mu=0)
scipy.special.ts_roots(n,mu=0)
scipy.special.u_roots(n,mu=0)
scipy.special.us_roots(n,mu=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/special/lambertw.py----------------------------------------
scipy.special.lambertw(z,k=0,tol=1e-08)
scipy.special.lambertw.lambertw(z,k=0,tol=1e-08)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/special/spfun_stats.py----------------------------------------
A:scipy.special.spfun_stats.a->numpy.asarray(a)
scipy.special.multigammaln(a,d)
scipy.special.spfun_stats.multigammaln(a,d)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/special/tests/test_basic.py----------------------------------------
A:scipy.special.tests.test_basic.n->numpy.arange(1, 15)
A:scipy.special.tests.test_basic.k->arange(0, n)
A:scipy.special.tests.test_basic.rknown->numpy.array([[-0.097152, 0.9263051596159367, 0.01858423645695389, -0.007581020651518199], [6, 2.0214389119675666, 0, 2.9827344527963846], [10.92, 2.22993515861399, -0.00585728, 10.468891352063146], [136, 3.5252179590758828, 19448, 1024.5526916174495]])
A:scipy.special.tests.test_basic.num->int(1)
A:scipy.special.tests.test_basic.den->int(1)
A:scipy.special.tests.test_basic.p->scipy.special.pbvv(eta, x)
A:scipy.special.tests.test_basic.a->scipy.special.errprint()
A:scipy.special.tests.test_basic.b->scipy.special.airy(0.01)
A:scipy.special.tests.test_basic.vals->numpy.array([-4, -3.5, -2.3, 1, 4.2], np.float64)
A:scipy.special.tests.test_basic.m->numpy.arange(1, 100)
A:scipy.special.tests.test_basic.v->scipy.special._ufuncs.mathieu_modsem2(2, 100, -1)
A:scipy.special.tests.test_basic.result->scipy.special.hyp1f1(a, b, c)
A:scipy.special.tests.test_basic.warn_ctx->WarningManager()
A:scipy.special.tests.test_basic.(s, c)->scipy.special._ufuncs.sici(-np.inf)
A:scipy.special.tests.test_basic.x->scipy.special.ivp(1, 2)
A:scipy.special.tests.test_basic.bi->scipy.special.bi_zeros(5)
A:scipy.special.tests.test_basic.ai->scipy.special.ai_zeros(1)
A:scipy.special.tests.test_basic.a1->scipy.special.genlaguerre(11, 1)
A:scipy.special.tests.test_basic.a2->scipy.special.assoc_laguerre(1, 11, 1)
A:scipy.special.tests.test_basic.mbei->scipy.special.bei(2)
A:scipy.special.tests.test_basic.mbeip->scipy.special.beip(2)
A:scipy.special.tests.test_basic.mber->scipy.special.ber(2)
A:scipy.special.tests.test_basic.mberp->scipy.special.berp(2)
A:scipy.special.tests.test_basic.bip->scipy.special.beip_zeros(5)
A:scipy.special.tests.test_basic.ber->scipy.special.ber_zeros(5)
A:scipy.special.tests.test_basic.brp->scipy.special.berp_zeros(5)
A:scipy.special.tests.test_basic.mkelv->scipy.special.kelvin(2)
A:scipy.special.tests.test_basic.mkei->scipy.special.kei(2)
A:scipy.special.tests.test_basic.mkeip->scipy.special.keip(2)
A:scipy.special.tests.test_basic.mker->scipy.special.ker(2)
A:scipy.special.tests.test_basic.mkerp->scipy.special.kerp(2)
A:scipy.special.tests.test_basic.kei->scipy.special.kei_zeros(5)
A:scipy.special.tests.test_basic.keip->scipy.special.keip_zeros(5)
A:scipy.special.tests.test_basic.tmp->scipy.special.kelvin_zeros(5)
A:scipy.special.tests.test_basic.ker->scipy.special.ker_zeros(5)
A:scipy.special.tests.test_basic.kerp->scipy.special.kerp_zeros(5)
A:scipy.special.tests.test_basic.brn->scipy.special.bernoulli(5)
A:scipy.special.tests.test_basic.bet->log(abs(special.beta(2, 4)))
A:scipy.special.tests.test_basic.betln->scipy.special.betaln(2, 4)
A:scipy.special.tests.test_basic.btinc->scipy.special.betainc(1, 1, 0.2)
A:scipy.special.tests.test_basic.y->scipy.special.gammaincinv(0.4, xp)
A:scipy.special.tests.test_basic.comp->scipy.special.betainc(2, 4, y)
A:scipy.special.tests.test_basic.cb->scipy.special.cbrt(27)
A:scipy.special.tests.test_basic.cb1->scipy.special.cbrt(27.9)
A:scipy.special.tests.test_basic.cdg->scipy.special.cosdg(90)
A:scipy.special.tests.test_basic.cdgrl->cos(pi / 2.0)
A:scipy.special.tests.test_basic.cdgm->scipy.special.cosdg(30)
A:scipy.special.tests.test_basic.cdgmrl->cos(pi / 6.0)
A:scipy.special.tests.test_basic.ct->scipy.special.cotdg(30)
A:scipy.special.tests.test_basic.ct1->scipy.special.cotdg(45)
A:scipy.special.tests.test_basic.c->scipy.special.errprint(b)
A:scipy.special.tests.test_basic.sn->scipy.special.sindg(90)
A:scipy.special.tests.test_basic.snm->scipy.special.sindg(30)
A:scipy.special.tests.test_basic.snmrl->sin(pi / 6.0)
A:scipy.special.tests.test_basic.snm1->scipy.special.sindg(45)
A:scipy.special.tests.test_basic.snmrl1->sin(pi / 4.0)
A:scipy.special.tests.test_basic.tn->scipy.special.tandg(30)
A:scipy.special.tests.test_basic.tnrl->tan(pi / 6.0)
A:scipy.special.tests.test_basic.tnm->scipy.special.tandg(45)
A:scipy.special.tests.test_basic.tnmrl->tan(pi / 4.0)
A:scipy.special.tests.test_basic.tnm1->scipy.special.tandg(60)
A:scipy.special.tests.test_basic.tnmrl1->tan(pi / 3.0)
A:scipy.special.tests.test_basic.el->scipy.special.ellipj(0.2, 0)
A:scipy.special.tests.test_basic.elk->scipy.special.ellipk(0.2)
A:scipy.special.tests.test_basic.elkinc->scipy.special.ellipkinc(phi, m)
A:scipy.special.tests.test_basic.ele->scipy.special.ellipe(0.2)
A:scipy.special.tests.test_basic.eleinc->scipy.special.ellipeinc(phi, m)
A:scipy.special.tests.test_basic.er->scipy.special.erf(0.25)
A:scipy.special.tests.test_basic.erz->scipy.special.erf_zeros(5)
A:scipy.special.tests.test_basic.erzr->array([1.45061616 + 1.880943j, 2.24465928 + 2.61657514j, 2.83974105 + 3.1756281j, 3.33546074 + 3.64617438j, 3.76900557 + 4.06069723j])
A:scipy.special.tests.test_basic.old_errors->numpy.seterr(all='ignore')
A:scipy.special.tests.test_basic.w->other_func(z)
A:scipy.special.tests.test_basic.mask->numpy.isfinite(w_real)
A:scipy.special.tests.test_basic.i->scipy.special.erfinv(0)
A:scipy.special.tests.test_basic.d->scipy.special.errprint(a)
A:scipy.special.tests.test_basic.eu0->scipy.special.euler(0)
A:scipy.special.tests.test_basic.eu1->scipy.special.euler(1)
A:scipy.special.tests.test_basic.eu2->scipy.special.euler(2)
A:scipy.special.tests.test_basic.eu24->scipy.special.euler(24)
A:scipy.special.tests.test_basic.correct->zeros((25,), 'd')
A:scipy.special.tests.test_basic.correct[2 * k]->float(mathworld[k])
A:scipy.special.tests.test_basic.olderr->numpy.seterr(all='ignore')
A:scipy.special.tests.test_basic.err->nan_to_num((eu24 - correct) / correct)
A:scipy.special.tests.test_basic.errmax->max(err)
A:scipy.special.tests.test_basic.ex->scipy.special.exp10(2)
A:scipy.special.tests.test_basic.exm->scipy.special.exp10(2.5)
A:scipy.special.tests.test_basic.frs->scipy.special.fresnels_zeros(5)
A:scipy.special.tests.test_basic.(szo, czo)->scipy.special.fresnel_zeros(5)
A:scipy.special.tests.test_basic.frc->scipy.special.fresnelc_zeros(6)
A:scipy.special.tests.test_basic.gam->scipy.special.gamma(5)
A:scipy.special.tests.test_basic.gamln->scipy.special.gammaln(3)
A:scipy.special.tests.test_basic.lngam->log(special.gamma(3))
A:scipy.special.tests.test_basic.gama->scipy.special.gammaincc(-1, 1)
A:scipy.special.tests.test_basic.gicc->scipy.special.gammaincc(0.5, 0.5)
A:scipy.special.tests.test_basic.gccinv->scipy.special.gammainccinv(0.5, 0.5)
A:scipy.special.tests.test_basic.gcinv->scipy.special.gammaincinv(0.5, 0.5)
A:scipy.special.tests.test_basic.rgam->scipy.special.rgamma(8)
A:scipy.special.tests.test_basic.hank1->scipy.special.hankel1(1, 0.1)
A:scipy.special.tests.test_basic.hank1e->scipy.special.hankel1e(1, 0.1)
A:scipy.special.tests.test_basic.hank2->scipy.special.hankel2(1, 0.1)
A:scipy.special.tests.test_basic.hank2e->scipy.special.hankel2e(1, 0.1)
A:scipy.special.tests.test_basic.hankrl2e->scipy.special.hankel2e(1, 0.1)
A:scipy.special.tests.test_basic.h1->scipy.special.h1vp(1, 0.1)
A:scipy.special.tests.test_basic.h2->scipy.special.h2vp(1, 0.1)
A:scipy.special.tests.test_basic.expected->numpy.row_stack([expected] * 2)
A:scipy.special.tests.test_basic.hyp1->scipy.special.hyp1f1(0.1, 0.1, 0.3)
A:scipy.special.tests.test_basic.ref_data->array([[-8.38132975, -12.8436461, -29.1081397, 10417.833], [2.91076882, -6.35234333, -12.7083993, 6.68132725], [-14.2938258, 0.180869131, 19.0038728, 101385.897], [5.84069088, 13.3187908, 29.1290106, 159469411.0], [-27.0433202, -11.6274873, -28.9582384, 1.39900152e+24], [4.26344966, -23.2701773, 19.1635759, 6.13816915e+21], [12.051434, -3.4026024, 7.26832235, 11769611200000.0], [27.7372955, -1.99424687, 3.61332246, 30741961500000.0], [15.0310939, -29.1198675, -15.358108, -379.166033], [14.3995827, 9.84311196, 19.3204553, 25583626400.0], [-4.08759686, 13.4437025, -14.2072843, 17.0778449], [8.05595738, -13.1019838, 15.2180721, 3.06233294e+21], [18.1815804, -14.2908793, 9.57868793, -2.84771348e+20], [-24.9671396, 12.5082843, -17.1562286, 23629042.6], [26.7277673, 17.0315414, 6.1270145, 7779.17232], [24.9565476, 29.1694684, 6.2962266, 235.300027], [6.11924542, -1.59943768, 9.57009289, 132906326000.0], [-14.7863653, 24.1691301, -18.9981821, 2730.64953], [22.4070483, -2.93647433, 8.19281432, -6.42000372e+17], [0.8040426, 18.2710085, -19.7814534, 0.548372441], [13.959039, 19.7318686, 2.37606635, 5.51923681], [-4.66640483, -20.023793, 7.40365095, 4.50310752], [27.6821999, -6.36563968, 11.1533984, -9.28725179e+23], [-25.6764457, 1.24544906, 10.6407572, 12.5922076], [3.20447808, 13.0874383, 22.6098014, 20320.2059], [-12.4809647, 4.15137113, -29.22657, 239621411.0], [21.4778108, -2.3516296, -11.3758664, 0.446882152], [-9.85469168, -3.2815768, 16.7447548, -10734239.0], [10.812231, -24.7353236, -11.5622349, -2917.33796], [-26.7933347, -3.39100709, 25.6006986, -5292753820.0], [-8.60066776, -8.02200924, 10.7231926, 1335483.2], [-0.101724238, -11.8479709, -25.5407104, 1.5543657], [-3.93356771, 21.1106818, -25.7598485, 21.346784], [3.74750503, 15.5687633, -29.284172, 0.0143873509], [6.99726781, 26.9855571, -16.3707771, 0.0308098673], [-23.1996011, 3.47631054, 0.975119815, 0.0179971073], [23.8951044, -29.146019, -2.50774708, 9.56934814], [15.2730825, 5.77062507, 12.1922003, 1323453070.0], [17.4673917, 18.9723426, 4.9490325, 99.0859484], [18.8971241, 28.6255413, 0.552360109, 1.4416536], [10.2002319, -16.6855152, -25.5426235, 656.481554], [-17.9474153, 12.22102, -18.4058212, 824041.812], [-13.6147103, 1.32365492, -7.223752, 992446.491], [7.57407832, 25.9738234, -13.4139168, 0.0364037761], [2.21110169, 12.8012666, 16.2529102, 133.433085], [-26.4297569, -16.3176658, -11.1642006, -24479725100000.0], [-24.6622944, -3.02147372, 8.29159315, -321799.07], [-13.7215095, -19.6680183, 29.1940118, 3214575200000.0], [-5.45566105, 28.1292086, 0.172548215, 0.966973], [-1.55751298, -8.65703373, 26.8622026, -3.17190834e+16], [24.5393609, -27.0571903, 19.6815505, 1.80708004e+37], [5.77482829, 15.3203143, 25.0534322, 1143042.42], [-10.2626819, 23.6887658, -23.2152102, 728.965646], [-1.30833446, -12.831021, 18.7275544, -9334879040000.0], [5.83024676, -14.9279672, 24.4957538, -7.6108307e+27], [-20.3130747, 25.9641715, -20.6174328, 45474.4859], [19.7684551, -22.1410519, -22.672874, 3531130.26], [27.3673444, 26.4491725, 15.7599882, 10738511.8], [5.73287971, 12.1111904, 13.3080171, 2632.20467], [-28.2751072, 20.8605881, 9.098389, -6.60957033e-07], [18.7270691, -17.4437016, 15.2413599, 6.59572851e+27], [6.60681457, -2.69449855, 9.78972047, -2385878700000.0], [12.0895561, -25.1355765, 23.0096101, 7.58739886e+32], [-24.4682278, 21.0673441, -13.6705538, 45421.355], [-4.50665152, 3.72292059, -4.83403707, 26.8938214], [-7.46540049, -10.8422222, -17.2203805, -209.402162], [-20.0307551, -7.50604431, -27.864002, 4.15985444e+19], [19.9890876, 22.0677419, -25.1301778, 1.23840297e-09], [20.3183823, -7.66942559, 21.034007, 1.46285095e+31], [-2.90315825, -25.5785967, -9.58779316, 0.265714264], [27.3960829, -18.0097203, -2.03070131, 252.908999], [-21.1708058, -27.0304032, 24.8257944, 309027527.0], [22.1959758, 4.00258675, -16.2853977, -9.1628009e-09], [16.166184, -22.684515, 21.722694, -8.24774394e+33], [-3.35030306, 1.32670581, 9.39711214, -14.7303163], [7.23720726, -22.9763909, 23.4709682, -9.20711735e+29], [27.1013568, 16.1951087, -0.711388906, 0.298750911], [8.40057933, -7.4966522, 29.5587388, 6.59465635e+29], [-15.1603423, 19.4032322, -7.60044357, 105.186941], [-8.83788031, -27.2018313, 1.88269907, 1.81687019], [-18.7283712, 5.8747957, -19.1210203, 252235612.0], [-0.561338513, 26.9490237, 0.116660111, 0.997567783], [-5.44354025, -12.6721408, -4.66831036, 0.106660735], [-2.18846497, 23.3299566, 9.62564397, 0.303842061], [6.65661299, -23.9048713, 10.4191807, 47370045100000.0], [-25.7298921, -26.0811296, 27.439811, -532566307000.0], [-11.1431826, -15.942016, -18.4880553, -101.514747], [6.50301931, 25.9859051, -23.3270137, 0.01227605], [-19.4987891, -26.2123262, 3.90323225, 17.1658894], [7.26164601, -14.1469402, 28.1499763, -2.50068329e+31], [-15.242404, 29.9719005, -28.5753678, 13190.6693], [5.24149291, -17.2807223, 22.2129493, 2.50748475e+25], [0.36320723, -0.0954120862, -28.3874044, 0.943854939], [-2.11326457, -12.5707023, 1.1717213, 1.20812698], [2.48513582, 10.3652647, -18.4625148, 0.0647910997], [26.5395942, 27.4794672, 12.9413428, 289306.132], [-9.4944546, 15.9930921, -14.9596331, 327.574841], [-5.89173945, 9.96742426, 26.0318889, -0.315842908], [-11.5387239, -22.1433107, -21.7686413, 0.156724718], [-5.30592244, -24.275219, 1.29734035, 1.31985534]])
A:scipy.special.tests.test_basic.cv->scipy.special.hyp2f1(a, b, c, x)
A:scipy.special.tests.test_basic.val1->scipy.special.hyperu(1, 0.1, 100)
A:scipy.special.tests.test_basic.hypu->scipy.special.hyperu(a, b, z)
A:scipy.special.tests.test_basic.it0->array(special.itj0y0(0.2))
A:scipy.special.tests.test_basic.it2->array(special.it2j0y0(0.2))
A:scipy.special.tests.test_basic.oz->scipy.special.y0(0.1)
A:scipy.special.tests.test_basic.ozr->scipy.special.yn(0, 0.1)
A:scipy.special.tests.test_basic.o1->scipy.special.y1(0.1)
A:scipy.special.tests.test_basic.o1r->scipy.special.yn(1, 0.1)
A:scipy.special.tests.test_basic.jnnr->scipy.special.jn(1, 0.2)
A:scipy.special.tests.test_basic.yc->scipy.special.jv(v, x)
A:scipy.special.tests.test_basic.jvexp->scipy.special.jve(1, 0.2)
A:scipy.special.tests.test_basic.jvexp1->scipy.special.jve(1, 0.2 + 1j)
A:scipy.special.tests.test_basic.jn0->scipy.special.jn_zeros(0, 300)
A:scipy.special.tests.test_basic.jn1->scipy.special.jn_zeros(1, 5)
A:scipy.special.tests.test_basic.jn102->scipy.special.jn_zeros(102, 5)
A:scipy.special.tests.test_basic.jn301->scipy.special.jn_zeros(301, 5)
A:scipy.special.tests.test_basic.jn10->scipy.special.jn_zeros(10, 300)
A:scipy.special.tests.test_basic.jn3010->scipy.special.jn_zeros(3010, 5)
A:scipy.special.tests.test_basic.(z, n, m, t)->scipy.special.jnjnp_zeros(nt)
A:scipy.special.tests.test_basic.jnp->scipy.special.jnp_zeros(443, 5)
A:scipy.special.tests.test_basic.jnz->scipy.special.jnyn_zeros(1, 5)
A:scipy.special.tests.test_basic.jvprim->scipy.special.jvp(2, 2)
A:scipy.special.tests.test_basic.ozk->scipy.special.k0(0.1)
A:scipy.special.tests.test_basic.ozkr->scipy.special.kv(0, 0.1)
A:scipy.special.tests.test_basic.ozke->scipy.special.k0e(0.1)
A:scipy.special.tests.test_basic.ozker->scipy.special.kve(0, 0.1)
A:scipy.special.tests.test_basic.o1k->scipy.special.k1(0.1)
A:scipy.special.tests.test_basic.o1kr->scipy.special.kv(1, 0.1)
A:scipy.special.tests.test_basic.o1ke->scipy.special.k1e(0.1)
A:scipy.special.tests.test_basic.o1ker->scipy.special.kve(1, 0.1)
A:scipy.special.tests.test_basic.P0->scipy.special.jacobi(0, a, b)
A:scipy.special.tests.test_basic.P1->scipy.special.jacobi(1, a, b)
A:scipy.special.tests.test_basic.P2->scipy.special.jacobi(2, a, b)
A:scipy.special.tests.test_basic.P3->scipy.special.jacobi(3, a, b)
A:scipy.special.tests.test_basic.kn1->scipy.special.kn(0, 0.2)
A:scipy.special.tests.test_basic.kv0->scipy.special.kv(0, 0.2)
A:scipy.special.tests.test_basic.kv1->scipy.special.kv(1, 0.2)
A:scipy.special.tests.test_basic.kv2->scipy.special.kv(2, 0.2)
A:scipy.special.tests.test_basic.kve1->scipy.special.kve(0, 0.2)
A:scipy.special.tests.test_basic.kve2->scipy.special.kve(0, z)
A:scipy.special.tests.test_basic.(yo, ypo)->scipy.special.y0_zeros(2)
A:scipy.special.tests.test_basic.(zo, zpo)->scipy.special.y0_zeros(2, complex=1)
A:scipy.special.tests.test_basic.y1->scipy.special.y1_zeros(1)
A:scipy.special.tests.test_basic.y1p->scipy.special.y1p_zeros(1, complex=1)
A:scipy.special.tests.test_basic.an->scipy.special.yn_zeros(443, 5)
A:scipy.special.tests.test_basic.ao->scipy.special.ynp_zeros(443, 5)
A:scipy.special.tests.test_basic.yn2n->scipy.special.yn(1, 0.2)
A:scipy.special.tests.test_basic.yv2->scipy.special.yv(1, 0.2)
A:scipy.special.tests.test_basic.yve2->scipy.special.yve(1, 0.2)
A:scipy.special.tests.test_basic.yve22->scipy.special.yve(1, 0.2 + 1j)
A:scipy.special.tests.test_basic.yvp1->scipy.special.yvp(2, 0.2)
A:scipy.special.tests.test_basic.v[imsk]->v[imsk].astype(int).astype(int)
A:scipy.special.tests.test_basic.old_err->numpy.seterr(all='ignore')
A:scipy.special.tests.test_basic.c1->scipy.special.iv(v, x)
A:scipy.special.tests.test_basic.c2->scipy.special.iv(v, x + 0j)
A:scipy.special.tests.test_basic.dc->abs(c1 / c2 - 1)
A:scipy.special.tests.test_basic.r->exp(r)
A:scipy.special.tests.test_basic.(value, err)->self._series(v, z)
A:scipy.special.tests.test_basic.oize->scipy.special.i0e(0.1)
A:scipy.special.tests.test_basic.oizer->scipy.special.ive(0, 0.1)
A:scipy.special.tests.test_basic.oi1e->scipy.special.i1e(0.1)
A:scipy.special.tests.test_basic.oi1er->scipy.special.ive(1, 0.1)
A:scipy.special.tests.test_basic.iti0->array(special.iti0k0(5))
A:scipy.special.tests.test_basic.it2k->scipy.special.it2i0k0(0.1)
A:scipy.special.tests.test_basic.ive1->scipy.special.ive(0, 0.1)
A:scipy.special.tests.test_basic.lag0->scipy.special.genlaguerre(0, k)
A:scipy.special.tests.test_basic.lag1->scipy.special.genlaguerre(1, k)
A:scipy.special.tests.test_basic.lag2->scipy.special.genlaguerre(2, k)
A:scipy.special.tests.test_basic.lag3->scipy.special.genlaguerre(3, k)
A:scipy.special.tests.test_basic.lag4->scipy.special.laguerre(4)
A:scipy.special.tests.test_basic.lag5->scipy.special.laguerre(5)
A:scipy.special.tests.test_basic.leg0->scipy.special.legendre(0)
A:scipy.special.tests.test_basic.leg1->scipy.special.legendre(1)
A:scipy.special.tests.test_basic.leg2->scipy.special.legendre(2)
A:scipy.special.tests.test_basic.leg3->scipy.special.legendre(3)
A:scipy.special.tests.test_basic.leg4->scipy.special.legendre(4)
A:scipy.special.tests.test_basic.leg5->scipy.special.legendre(5)
A:scipy.special.tests.test_basic.lam->scipy.special.lmbda(1, 0.1)
A:scipy.special.tests.test_basic.lp->scipy.special.lpmv(-1, -1, 0.001)
A:scipy.special.tests.test_basic.lpnf->scipy.special.lpn(2, 0.5)
A:scipy.special.tests.test_basic.lqmnf->scipy.special.lqmn(0, 2, 0.5)
A:scipy.special.tests.test_basic.lqf->scipy.special.lqn(2, 0.5)
A:scipy.special.tests.test_basic.(a, b)->scipy.special.lqmn(4, 0, 1.1)
A:scipy.special.tests.test_basic.mc->scipy.special.mathieu_even_coef(2, 5)
A:scipy.special.tests.test_basic.obl->scipy.special.obl_cv_seq(0, 3, 1)
A:scipy.special.tests.test_basic.pb->scipy.special.pbdn_seq(1, 0.1)
A:scipy.special.tests.test_basic.pbv->scipy.special.pbdv_seq(1, 0.1)
A:scipy.special.tests.test_basic.pbn->scipy.special.pbdn_seq(1, 0.1)
A:scipy.special.tests.test_basic.eta->numpy.linspace(-10, 10, 5)
A:scipy.special.tests.test_basic.poly2->scipy.special.polygamma(2, 1)
A:scipy.special.tests.test_basic.poly3->scipy.special.polygamma(3, 1)
A:scipy.special.tests.test_basic.prol->scipy.special.pro_cv_seq(0, 3, 1)
A:scipy.special.tests.test_basic.ps->scipy.special.psi(1)
A:scipy.special.tests.test_basic.rad->scipy.special.radian(90, 0, 0)
A:scipy.special.tests.test_basic.rad1->scipy.special.radian(90, 1, 60)
A:scipy.special.tests.test_basic.ricjn->scipy.special.riccati_jn(1, 0.2)
A:scipy.special.tests.test_basic.ricyn->scipy.special.riccati_yn(1, 0.2)
A:scipy.special.tests.test_basic.rnd->list(map(int, (special.round(10.1), special.round(10.4), special.round(10.5), special.round(10.6))))
A:scipy.special.tests.test_basic.i1n->scipy.special.sph_in(1, 0.2)
A:scipy.special.tests.test_basic.s1->scipy.special.sph_jn(2, 0.2)
A:scipy.special.tests.test_basic.kn->scipy.special.sph_kn(2, 0.2)
scipy.special.tests.test_TestAiry(TestCase)
scipy.special.tests.test_TestAiry.test_ai_zeros(self)
scipy.special.tests.test_TestAiry.test_airy(self)
scipy.special.tests.test_TestAiry.test_airye(self)
scipy.special.tests.test_TestAiry.test_bi_zeros(self)
scipy.special.tests.test_TestAssocLaguerre(TestCase)
scipy.special.tests.test_TestAssocLaguerre.test_assoc_laguerre(self)
scipy.special.tests.test_TestBernoulli(TestCase)
scipy.special.tests.test_TestBernoulli.test_bernoulli(self)
scipy.special.tests.test_TestBessel(TestCase)
scipy.special.tests.test_TestBessel._cephes_vs_amos_points(self)
scipy.special.tests.test_TestBessel.check_cephes_vs_amos(self,f1,f2,rtol=1e-11,atol=0,skip=None)
scipy.special.tests.test_TestBessel.iv_series(self,v,z,n=200)
scipy.special.tests.test_TestBessel.test_i0(self)
scipy.special.tests.test_TestBessel.test_i0_series(self)
scipy.special.tests.test_TestBessel.test_i0e(self)
scipy.special.tests.test_TestBessel.test_i1(self)
scipy.special.tests.test_TestBessel.test_i1_series(self)
scipy.special.tests.test_TestBessel.test_i1e(self)
scipy.special.tests.test_TestBessel.test_it2i0k0(self)
scipy.special.tests.test_TestBessel.test_it2j0y0(self)
scipy.special.tests.test_TestBessel.test_iti0k0(self)
scipy.special.tests.test_TestBessel.test_itj0y0(self)
scipy.special.tests.test_TestBessel.test_iv(self)
scipy.special.tests.test_TestBessel.test_iv_cephes_vs_amos(self)
scipy.special.tests.test_TestBessel.test_iv_cephes_vs_amos_mass_test(self)
scipy.special.tests.test_TestBessel.test_iv_hyperg_poles(self)
scipy.special.tests.test_TestBessel.test_iv_series(self)
scipy.special.tests.test_TestBessel.test_ive(self)
scipy.special.tests.test_TestBessel.test_ivp(self)
scipy.special.tests.test_TestBessel.test_ivp0(self)
scipy.special.tests.test_TestBessel.test_j0(self)
scipy.special.tests.test_TestBessel.test_j1(self)
scipy.special.tests.test_TestBessel.test_jacobi(self)
scipy.special.tests.test_TestBessel.test_jn(self)
scipy.special.tests.test_TestBessel.test_jn_zeros(self)
scipy.special.tests.test_TestBessel.test_jn_zeros_slow(self)
scipy.special.tests.test_TestBessel.test_jnjnp_zeros(self)
scipy.special.tests.test_TestBessel.test_jnp_zeros(self)
scipy.special.tests.test_TestBessel.test_jnyn_zeros(self)
scipy.special.tests.test_TestBessel.test_jv(self)
scipy.special.tests.test_TestBessel.test_jv_cephes_vs_amos(self)
scipy.special.tests.test_TestBessel.test_jve(self)
scipy.special.tests.test_TestBessel.test_jvp(self)
scipy.special.tests.test_TestBessel.test_k0(self)
scipy.special.tests.test_TestBessel.test_k0e(self)
scipy.special.tests.test_TestBessel.test_k1(self)
scipy.special.tests.test_TestBessel.test_k1e(self)
scipy.special.tests.test_TestBessel.test_kn(self)
scipy.special.tests.test_TestBessel.test_kv0(self)
scipy.special.tests.test_TestBessel.test_kv1(self)
scipy.special.tests.test_TestBessel.test_kv2(self)
scipy.special.tests.test_TestBessel.test_kv_cephes_vs_amos(self)
scipy.special.tests.test_TestBessel.test_kve(self)
scipy.special.tests.test_TestBessel.test_kvp_n1(self)
scipy.special.tests.test_TestBessel.test_kvp_n2(self)
scipy.special.tests.test_TestBessel.test_kvp_v0n1(self)
scipy.special.tests.test_TestBessel.test_negv_iv(self)
scipy.special.tests.test_TestBessel.test_negv_ive(self)
scipy.special.tests.test_TestBessel.test_negv_jv(self)
scipy.special.tests.test_TestBessel.test_negv_jve(self)
scipy.special.tests.test_TestBessel.test_negv_kv(self)
scipy.special.tests.test_TestBessel.test_negv_kve(self)
scipy.special.tests.test_TestBessel.test_negv_yv(self)
scipy.special.tests.test_TestBessel.test_negv_yve(self)
scipy.special.tests.test_TestBessel.test_ticket_503(self)
scipy.special.tests.test_TestBessel.test_ticket_623(self)
scipy.special.tests.test_TestBessel.test_ticket_853(self)
scipy.special.tests.test_TestBessel.test_ticket_854(self)
scipy.special.tests.test_TestBessel.test_y0(self)
scipy.special.tests.test_TestBessel.test_y0_zeros(self)
scipy.special.tests.test_TestBessel.test_y1(self)
scipy.special.tests.test_TestBessel.test_y1_zeros(self)
scipy.special.tests.test_TestBessel.test_y1p_zeros(self)
scipy.special.tests.test_TestBessel.test_yn(self)
scipy.special.tests.test_TestBessel.test_yn_zeros(self)
scipy.special.tests.test_TestBessel.test_ynp_zeros(self)
scipy.special.tests.test_TestBessel.test_ynp_zeros_large_order(self)
scipy.special.tests.test_TestBessel.test_yv(self)
scipy.special.tests.test_TestBessel.test_yv_cephes_vs_amos(self)
scipy.special.tests.test_TestBessel.test_yv_cephes_vs_amos_only_small_orders(self)
scipy.special.tests.test_TestBessel.test_yve(self)
scipy.special.tests.test_TestBessel.test_yvp(self)
scipy.special.tests.test_TestBesselpoly(TestCase)
scipy.special.tests.test_TestBesselpoly.test_besselpoly(self)
scipy.special.tests.test_TestBeta(TestCase)
scipy.special.tests.test_TestBeta.test_beta(self)
scipy.special.tests.test_TestBeta.test_betainc(self)
scipy.special.tests.test_TestBeta.test_betaincinv(self)
scipy.special.tests.test_TestBeta.test_betaln(self)
scipy.special.tests.test_TestCephes(TestCase)
scipy.special.tests.test_TestCephes.__check_nbdtrik(self)
scipy.special.tests.test_TestCephes.__check_ncfdtridfn(self)
scipy.special.tests.test_TestCephes.__check_ncfdtrinc(self)
scipy.special.tests.test_TestCephes.__check_nctdtridf(self)
scipy.special.tests.test_TestCephes._check_ive(self)
scipy.special.tests.test_TestCephes._check_jve(self)
scipy.special.tests.test_TestCephes._check_kelvin(self)
scipy.special.tests.test_TestCephes._check_kv(self)
scipy.special.tests.test_TestCephes._check_kve(self)
scipy.special.tests.test_TestCephes._check_modstruve(self)
scipy.special.tests.test_TestCephes._check_obl_cv(self)
scipy.special.tests.test_TestCephes._check_pro_cv(self)
scipy.special.tests.test_TestCephes._check_yve(self)
scipy.special.tests.test_TestCephes.test_airy(self)
scipy.special.tests.test_TestCephes.test_airye(self)
scipy.special.tests.test_TestCephes.test_bdtr(self)
scipy.special.tests.test_TestCephes.test_bdtrc(self)
scipy.special.tests.test_TestCephes.test_bdtri(self)
scipy.special.tests.test_TestCephes.test_bdtrik(self)
scipy.special.tests.test_TestCephes.test_bdtrin(self)
scipy.special.tests.test_TestCephes.test_bei(self)
scipy.special.tests.test_TestCephes.test_beip(self)
scipy.special.tests.test_TestCephes.test_ber(self)
scipy.special.tests.test_TestCephes.test_berp(self)
scipy.special.tests.test_TestCephes.test_besselpoly(self)
scipy.special.tests.test_TestCephes.test_beta(self)
scipy.special.tests.test_TestCephes.test_beta_inf(self)
scipy.special.tests.test_TestCephes.test_betainc(self)
scipy.special.tests.test_TestCephes.test_betaincinv(self)
scipy.special.tests.test_TestCephes.test_betaln(self)
scipy.special.tests.test_TestCephes.test_binom(self)
scipy.special.tests.test_TestCephes.test_binom_2(self)
scipy.special.tests.test_TestCephes.test_binom_exact(self)
scipy.special.tests.test_TestCephes.test_btdtr(self)
scipy.special.tests.test_TestCephes.test_btdtri(self)
scipy.special.tests.test_TestCephes.test_btdtria(self)
scipy.special.tests.test_TestCephes.test_btdtrib(self)
scipy.special.tests.test_TestCephes.test_cbrt(self)
scipy.special.tests.test_TestCephes.test_chdtr(self)
scipy.special.tests.test_TestCephes.test_chdtrc(self)
scipy.special.tests.test_TestCephes.test_chdtri(self)
scipy.special.tests.test_TestCephes.test_chdtriv(self)
scipy.special.tests.test_TestCephes.test_chndtr(self)
scipy.special.tests.test_TestCephes.test_chndtridf(self)
scipy.special.tests.test_TestCephes.test_chndtrinc(self)
scipy.special.tests.test_TestCephes.test_chndtrix(self)
scipy.special.tests.test_TestCephes.test_cosdg(self)
scipy.special.tests.test_TestCephes.test_cosm1(self)
scipy.special.tests.test_TestCephes.test_cotdg(self)
scipy.special.tests.test_TestCephes.test_dawsn(self)
scipy.special.tests.test_TestCephes.test_ellipe(self)
scipy.special.tests.test_TestCephes.test_ellipeinc(self)
scipy.special.tests.test_TestCephes.test_ellipj(self)
scipy.special.tests.test_TestCephes.test_ellipk(self)
scipy.special.tests.test_TestCephes.test_ellipkinc(self)
scipy.special.tests.test_TestCephes.test_erf(self)
scipy.special.tests.test_TestCephes.test_erfc(self)
scipy.special.tests.test_TestCephes.test_exp1(self)
scipy.special.tests.test_TestCephes.test_exp10(self)
scipy.special.tests.test_TestCephes.test_exp1_reg(self)
scipy.special.tests.test_TestCephes.test_exp2(self)
scipy.special.tests.test_TestCephes.test_expi(self)
scipy.special.tests.test_TestCephes.test_expm1(self)
scipy.special.tests.test_TestCephes.test_expn(self)
scipy.special.tests.test_TestCephes.test_fdtr(self)
scipy.special.tests.test_TestCephes.test_fdtrc(self)
scipy.special.tests.test_TestCephes.test_fdtri(self)
scipy.special.tests.test_TestCephes.test_fdtridfd(self)
scipy.special.tests.test_TestCephes.test_fresnel(self)
scipy.special.tests.test_TestCephes.test_gamma(self)
scipy.special.tests.test_TestCephes.test_gammainc(self)
scipy.special.tests.test_TestCephes.test_gammaincc(self)
scipy.special.tests.test_TestCephes.test_gammainccinv(self)
scipy.special.tests.test_TestCephes.test_gammaln(self)
scipy.special.tests.test_TestCephes.test_gammasgn(self)
scipy.special.tests.test_TestCephes.test_gdtr(self)
scipy.special.tests.test_TestCephes.test_gdtrc(self)
scipy.special.tests.test_TestCephes.test_gdtria(self)
scipy.special.tests.test_TestCephes.test_gdtrib(self)
scipy.special.tests.test_TestCephes.test_gdtrix(self)
scipy.special.tests.test_TestCephes.test_hankel1(self)
scipy.special.tests.test_TestCephes.test_hankel1e(self)
scipy.special.tests.test_TestCephes.test_hankel2(self)
scipy.special.tests.test_TestCephes.test_hankel2e(self)
scipy.special.tests.test_TestCephes.test_hyp1f1(self)
scipy.special.tests.test_TestCephes.test_hyp1f2(self)
scipy.special.tests.test_TestCephes.test_hyp2f0(self)
scipy.special.tests.test_TestCephes.test_hyp2f1(self)
scipy.special.tests.test_TestCephes.test_hyp3f0(self)
scipy.special.tests.test_TestCephes.test_hyperu(self)
scipy.special.tests.test_TestCephes.test_i0(self)
scipy.special.tests.test_TestCephes.test_i0e(self)
scipy.special.tests.test_TestCephes.test_i1(self)
scipy.special.tests.test_TestCephes.test_i1e(self)
scipy.special.tests.test_TestCephes.test_it2i0k0(self)
scipy.special.tests.test_TestCephes.test_it2j0y0(self)
scipy.special.tests.test_TestCephes.test_it2struve0(self)
scipy.special.tests.test_TestCephes.test_itairy(self)
scipy.special.tests.test_TestCephes.test_iti0k0(self)
scipy.special.tests.test_TestCephes.test_itj0y0(self)
scipy.special.tests.test_TestCephes.test_itmodstruve0(self)
scipy.special.tests.test_TestCephes.test_itstruve0(self)
scipy.special.tests.test_TestCephes.test_iv(self)
scipy.special.tests.test_TestCephes.test_j0(self)
scipy.special.tests.test_TestCephes.test_j1(self)
scipy.special.tests.test_TestCephes.test_jn(self)
scipy.special.tests.test_TestCephes.test_jv(self)
scipy.special.tests.test_TestCephes.test_k0(self)
scipy.special.tests.test_TestCephes.test_k0e(self)
scipy.special.tests.test_TestCephes.test_k1(self)
scipy.special.tests.test_TestCephes.test_k1e(self)
scipy.special.tests.test_TestCephes.test_kei(self)
scipy.special.tests.test_TestCephes.test_keip(self)
scipy.special.tests.test_TestCephes.test_ker(self)
scipy.special.tests.test_TestCephes.test_kerp(self)
scipy.special.tests.test_TestCephes.test_kn(self)
scipy.special.tests.test_TestCephes.test_kolmogi(self)
scipy.special.tests.test_TestCephes.test_kolmogorov(self)
scipy.special.tests.test_TestCephes.test_log1p(self)
scipy.special.tests.test_TestCephes.test_lpmv(self)
scipy.special.tests.test_TestCephes.test_mathieu_a(self)
scipy.special.tests.test_TestCephes.test_mathieu_b(self)
scipy.special.tests.test_TestCephes.test_mathieu_cem(self)
scipy.special.tests.test_TestCephes.test_mathieu_modcem1(self)
scipy.special.tests.test_TestCephes.test_mathieu_modcem2(self)
scipy.special.tests.test_TestCephes.test_mathieu_modsem1(self)
scipy.special.tests.test_TestCephes.test_mathieu_modsem2(self)
scipy.special.tests.test_TestCephes.test_mathieu_overflow(self)
scipy.special.tests.test_TestCephes.test_mathieu_sem(self)
scipy.special.tests.test_TestCephes.test_mathieu_ticket_1847(self)
scipy.special.tests.test_TestCephes.test_modfresnelm(self)
scipy.special.tests.test_TestCephes.test_modfresnelp(self)
scipy.special.tests.test_TestCephes.test_nbdtr(self)
scipy.special.tests.test_TestCephes.test_nbdtrc(self)
scipy.special.tests.test_TestCephes.test_nbdtri(self)
scipy.special.tests.test_TestCephes.test_nbdtrin(self)
scipy.special.tests.test_TestCephes.test_ncfdtr(self)
scipy.special.tests.test_TestCephes.test_ncfdtri(self)
scipy.special.tests.test_TestCephes.test_ncfdtridfd(self)
scipy.special.tests.test_TestCephes.test_nctdtr(self)
scipy.special.tests.test_TestCephes.test_nctdtrinc(self)
scipy.special.tests.test_TestCephes.test_nctdtrit(self)
scipy.special.tests.test_TestCephes.test_ndtr(self)
scipy.special.tests.test_TestCephes.test_ndtri(self)
scipy.special.tests.test_TestCephes.test_nrdtrimn(self)
scipy.special.tests.test_TestCephes.test_nrdtrisd(self)
scipy.special.tests.test_TestCephes.test_obl_ang1(self)
scipy.special.tests.test_TestCephes.test_obl_ang1_cv(self)
scipy.special.tests.test_TestCephes.test_obl_rad1(self)
scipy.special.tests.test_TestCephes.test_obl_rad1_cv(self)
scipy.special.tests.test_TestCephes.test_obl_rad2(self)
scipy.special.tests.test_TestCephes.test_obl_rad2_cv(self)
scipy.special.tests.test_TestCephes.test_pbdv(self)
scipy.special.tests.test_TestCephes.test_pbvv(self)
scipy.special.tests.test_TestCephes.test_pbwa(self)
scipy.special.tests.test_TestCephes.test_pdtr(self)
scipy.special.tests.test_TestCephes.test_pdtrc(self)
scipy.special.tests.test_TestCephes.test_pdtri(self)
scipy.special.tests.test_TestCephes.test_pdtrik(self)
scipy.special.tests.test_TestCephes.test_pro_ang1(self)
scipy.special.tests.test_TestCephes.test_pro_ang1_cv(self)
scipy.special.tests.test_TestCephes.test_pro_rad1(self)
scipy.special.tests.test_TestCephes.test_pro_rad1_cv(self)
scipy.special.tests.test_TestCephes.test_pro_rad2(self)
scipy.special.tests.test_TestCephes.test_pro_rad2_cv(self)
scipy.special.tests.test_TestCephes.test_psi(self)
scipy.special.tests.test_TestCephes.test_radian(self)
scipy.special.tests.test_TestCephes.test_rgamma(self)
scipy.special.tests.test_TestCephes.test_round(self)
scipy.special.tests.test_TestCephes.test_shichi(self)
scipy.special.tests.test_TestCephes.test_sici(self)
scipy.special.tests.test_TestCephes.test_sindg(self)
scipy.special.tests.test_TestCephes.test_smirnov(self)
scipy.special.tests.test_TestCephes.test_smirnovi(self)
scipy.special.tests.test_TestCephes.test_spence(self)
scipy.special.tests.test_TestCephes.test_stdtr(self)
scipy.special.tests.test_TestCephes.test_stdtridf(self)
scipy.special.tests.test_TestCephes.test_stdtrit(self)
scipy.special.tests.test_TestCephes.test_struve(self)
scipy.special.tests.test_TestCephes.test_tandg(self)
scipy.special.tests.test_TestCephes.test_tklmbda(self)
scipy.special.tests.test_TestCephes.test_wofz(self)
scipy.special.tests.test_TestCephes.test_y0(self)
scipy.special.tests.test_TestCephes.test_y1(self)
scipy.special.tests.test_TestCephes.test_yn(self)
scipy.special.tests.test_TestCephes.test_yv(self)
scipy.special.tests.test_TestCephes.test_zeta(self)
scipy.special.tests.test_TestCephes.test_zetac(self)
scipy.special.tests.test_TestEllip(TestCase)
scipy.special.tests.test_TestEllip.test_ellipe(self)
scipy.special.tests.test_TestEllip.test_ellipeinc(self)
scipy.special.tests.test_TestEllip.test_ellipj(self)
scipy.special.tests.test_TestEllip.test_ellipj_nan(self)
scipy.special.tests.test_TestEllip.test_ellipk(self)
scipy.special.tests.test_TestEllip.test_ellipkinc(self)
scipy.special.tests.test_TestErf(TestCase)
scipy.special.tests.test_TestErf._check_variant_func(self,func,other_func,rtol,atol=0)
scipy.special.tests.test_TestErf.test_dawsn_consistent(self)
scipy.special.tests.test_TestErf.test_erf(self)
scipy.special.tests.test_TestErf.test_erf_zeros(self)
scipy.special.tests.test_TestErf.test_erfc_consistent(self)
scipy.special.tests.test_TestErf.test_erfcinv(self)
scipy.special.tests.test_TestErf.test_erfcx_consistent(self)
scipy.special.tests.test_TestErf.test_erfi_consistent(self)
scipy.special.tests.test_TestErf.test_erfinv(self)
scipy.special.tests.test_TestErf.test_errprint(self)
scipy.special.tests.test_TestEuler(TestCase)
scipy.special.tests.test_TestEuler.test_euler(self)
scipy.special.tests.test_TestExp(TestCase)
scipy.special.tests.test_TestExp.test_exp10(self)
scipy.special.tests.test_TestExp.test_exp10more(self)
scipy.special.tests.test_TestExp.test_exp2(self)
scipy.special.tests.test_TestExp.test_exp2more(self)
scipy.special.tests.test_TestExp.test_expm1(self)
scipy.special.tests.test_TestExp.test_expm1more(self)
scipy.special.tests.test_TestFresnel(TestCase)
scipy.special.tests.test_TestFresnel.test_fresnel(self)
scipy.special.tests.test_TestFresnel.test_fresnel_zeros(self)
scipy.special.tests.test_TestFresnel.test_fresnelc_zeros(self)
scipy.special.tests.test_TestFresnel.test_fresnels_zeros(self)
scipy.special.tests.test_TestFresnelIntegral(TestCase)
scipy.special.tests.test_TestFresnelIntegral.test_modfresnelm(self)
scipy.special.tests.test_TestFresnelIntegral.test_modfresnelp(self)
scipy.special.tests.test_TestGamma(TestCase)
scipy.special.tests.test_TestGamma.test_975(self)
scipy.special.tests.test_TestGamma.test_gamma(self)
scipy.special.tests.test_TestGamma.test_gammainc(self)
scipy.special.tests.test_TestGamma.test_gammaincc(self)
scipy.special.tests.test_TestGamma.test_gammainccinv(self)
scipy.special.tests.test_TestGamma.test_gammainccnan(self)
scipy.special.tests.test_TestGamma.test_gammaincinv(self)
scipy.special.tests.test_TestGamma.test_gammaincnan(self)
scipy.special.tests.test_TestGamma.test_gammainczero(self)
scipy.special.tests.test_TestGamma.test_gammaln(self)
scipy.special.tests.test_TestGamma.test_infinity(self)
scipy.special.tests.test_TestGamma.test_rgamma(self)
scipy.special.tests.test_TestHankel(TestCase)
scipy.special.tests.test_TestHankel.test_hankel1(self)
scipy.special.tests.test_TestHankel.test_hankel1e(self)
scipy.special.tests.test_TestHankel.test_hankel2(self)
scipy.special.tests.test_TestHankel.test_hankl2e(self)
scipy.special.tests.test_TestHankel.test_neg2e(self)
scipy.special.tests.test_TestHankel.test_negv1(self)
scipy.special.tests.test_TestHankel.test_negv1e(self)
scipy.special.tests.test_TestHankel.test_negv2(self)
scipy.special.tests.test_TestHyper(TestCase)
scipy.special.tests.test_TestHyper.test_h1vp(self)
scipy.special.tests.test_TestHyper.test_h2vp(self)
scipy.special.tests.test_TestHyper.test_hyp0f1(self)
scipy.special.tests.test_TestHyper.test_hyp1f1(self)
scipy.special.tests.test_TestHyper.test_hyp1f2(self)
scipy.special.tests.test_TestHyper.test_hyp2f0(self)
scipy.special.tests.test_TestHyper.test_hyp2f1(self)
scipy.special.tests.test_TestHyper.test_hyp3f0(self)
scipy.special.tests.test_TestHyper.test_hyperu(self)
scipy.special.tests.test_TestKelvin(TestCase)
scipy.special.tests.test_TestKelvin.test_bei(self)
scipy.special.tests.test_TestKelvin.test_bei_zeros(self)
scipy.special.tests.test_TestKelvin.test_beip(self)
scipy.special.tests.test_TestKelvin.test_beip_zeros(self)
scipy.special.tests.test_TestKelvin.test_ber(self)
scipy.special.tests.test_TestKelvin.test_ber_zeros(self)
scipy.special.tests.test_TestKelvin.test_berp(self)
scipy.special.tests.test_TestKelvin.test_berp_zeros(self)
scipy.special.tests.test_TestKelvin.test_kei(self)
scipy.special.tests.test_TestKelvin.test_kei_zeros(self)
scipy.special.tests.test_TestKelvin.test_keip(self)
scipy.special.tests.test_TestKelvin.test_keip_zeros(self)
scipy.special.tests.test_TestKelvin.test_kelvin(self)
scipy.special.tests.test_TestKelvin.test_kelvin_zeros(self)
scipy.special.tests.test_TestKelvin.test_ker(self)
scipy.special.tests.test_TestKelvin.test_ker_zeros(self)
scipy.special.tests.test_TestKelvin.test_kerp(self)
scipy.special.tests.test_TestKelvin.test_kerp_zeros(self)
scipy.special.tests.test_TestLaguerre(TestCase)
scipy.special.tests.test_TestLaguerre.test_genlaguerre(self)
scipy.special.tests.test_TestLaguerre.test_laguerre(self)
scipy.special.tests.test_TestLambda(TestCase)
scipy.special.tests.test_TestLambda.test_lmbda(self)
scipy.special.tests.test_TestLegendre(TestCase)
scipy.special.tests.test_TestLegendre.test_legendre(self)
scipy.special.tests.test_TestLegendreFunctions(TestCase)
scipy.special.tests.test_TestLegendreFunctions.test_lpmn(self)
scipy.special.tests.test_TestLegendreFunctions.test_lpmv(self)
scipy.special.tests.test_TestLegendreFunctions.test_lpn(self)
scipy.special.tests.test_TestLegendreFunctions.test_lqmn(self)
scipy.special.tests.test_TestLegendreFunctions.test_lqmn_shape(self)
scipy.special.tests.test_TestLegendreFunctions.test_lqn(self)
scipy.special.tests.test_TestLog1p(TestCase)
scipy.special.tests.test_TestLog1p.test_log1p(self)
scipy.special.tests.test_TestLog1p.test_log1pmore(self)
scipy.special.tests.test_TestMathieu(TestCase)
scipy.special.tests.test_TestMathieu.test_mathieu_a(self)
scipy.special.tests.test_TestMathieu.test_mathieu_even_coef(self)
scipy.special.tests.test_TestMathieu.test_mathieu_odd_coef(self)
scipy.special.tests.test_TestOblCvSeq(TestCase)
scipy.special.tests.test_TestOblCvSeq.test_obl_cv_seq(self)
scipy.special.tests.test_TestParabolicCylinder(TestCase)
scipy.special.tests.test_TestParabolicCylinder.test_pbdn_seq(self)
scipy.special.tests.test_TestParabolicCylinder.test_pbdv(self)
scipy.special.tests.test_TestParabolicCylinder.test_pbdv_gradient(self)
scipy.special.tests.test_TestParabolicCylinder.test_pbdv_points(self)
scipy.special.tests.test_TestParabolicCylinder.test_pbdv_seq(self)
scipy.special.tests.test_TestParabolicCylinder.test_pbvv_gradient(self)
scipy.special.tests.test_TestPolygamma(TestCase)
scipy.special.tests.test_TestPolygamma.test_polygamma(self)
scipy.special.tests.test_TestProCvSeq(TestCase)
scipy.special.tests.test_TestProCvSeq.test_pro_cv_seq(self)
scipy.special.tests.test_TestPsi(TestCase)
scipy.special.tests.test_TestPsi.test_psi(self)
scipy.special.tests.test_TestRadian(TestCase)
scipy.special.tests.test_TestRadian.test_radian(self)
scipy.special.tests.test_TestRadian.test_radianmore(self)
scipy.special.tests.test_TestRiccati(TestCase)
scipy.special.tests.test_TestRiccati.test_riccati_jn(self)
scipy.special.tests.test_TestRiccati.test_riccati_yn(self)
scipy.special.tests.test_TestRound(TestCase)
scipy.special.tests.test_TestRound.test_round(self)
scipy.special.tests.test_TestSpherical(TestCase)
scipy.special.tests.test_TestSpherical.test_sph_harm(self)
scipy.special.tests.test_TestSpherical.test_sph_in(self)
scipy.special.tests.test_TestSpherical.test_sph_inkn(self)
scipy.special.tests.test_TestSpherical.test_sph_jn(self)
scipy.special.tests.test_TestSpherical.test_sph_jnyn(self)
scipy.special.tests.test_TestSpherical.test_sph_kn(self)
scipy.special.tests.test_TestSpherical.test_sph_yn(self)
scipy.special.tests.test_TestStruve(object)
scipy.special.tests.test_TestStruve._series(self,v,z,n=100)
scipy.special.tests.test_TestStruve.test_regression_679(self)
scipy.special.tests.test_TestStruve.test_some_values(self)
scipy.special.tests.test_TestStruve.test_vs_series(self)
scipy.special.tests.test_TestTandg(TestCase)
scipy.special.tests.test_TestTandg.test_specialpoints(self)
scipy.special.tests.test_TestTandg.test_tandg(self)
scipy.special.tests.test_TestTandg.test_tandgmore(self)
scipy.special.tests.test_TestTrigonometric(TestCase)
scipy.special.tests.test_TestTrigonometric.test_0(self)
scipy.special.tests.test_TestTrigonometric.test_cbrt(self)
scipy.special.tests.test_TestTrigonometric.test_cbrtmore(self)
scipy.special.tests.test_TestTrigonometric.test_cosdg(self)
scipy.special.tests.test_TestTrigonometric.test_cosdgmore(self)
scipy.special.tests.test_TestTrigonometric.test_cosm1(self)
scipy.special.tests.test_TestTrigonometric.test_cotdg(self)
scipy.special.tests.test_TestTrigonometric.test_cotdgmore(self)
scipy.special.tests.test_TestTrigonometric.test_sinc(self)
scipy.special.tests.test_TestTrigonometric.test_sindg(self)
scipy.special.tests.test_TestTrigonometric.test_sindgmore(self)
scipy.special.tests.test_TestTrigonometric.test_specialpoints(self)
scipy.special.tests.test_basic.TestAiry(TestCase)
scipy.special.tests.test_basic.TestAiry.test_ai_zeros(self)
scipy.special.tests.test_basic.TestAiry.test_airy(self)
scipy.special.tests.test_basic.TestAiry.test_airye(self)
scipy.special.tests.test_basic.TestAiry.test_bi_zeros(self)
scipy.special.tests.test_basic.TestAssocLaguerre(TestCase)
scipy.special.tests.test_basic.TestAssocLaguerre.test_assoc_laguerre(self)
scipy.special.tests.test_basic.TestBernoulli(TestCase)
scipy.special.tests.test_basic.TestBernoulli.test_bernoulli(self)
scipy.special.tests.test_basic.TestBessel(TestCase)
scipy.special.tests.test_basic.TestBessel._cephes_vs_amos_points(self)
scipy.special.tests.test_basic.TestBessel.check_cephes_vs_amos(self,f1,f2,rtol=1e-11,atol=0,skip=None)
scipy.special.tests.test_basic.TestBessel.iv_series(self,v,z,n=200)
scipy.special.tests.test_basic.TestBessel.test_i0(self)
scipy.special.tests.test_basic.TestBessel.test_i0_series(self)
scipy.special.tests.test_basic.TestBessel.test_i0e(self)
scipy.special.tests.test_basic.TestBessel.test_i1(self)
scipy.special.tests.test_basic.TestBessel.test_i1_series(self)
scipy.special.tests.test_basic.TestBessel.test_i1e(self)
scipy.special.tests.test_basic.TestBessel.test_it2i0k0(self)
scipy.special.tests.test_basic.TestBessel.test_it2j0y0(self)
scipy.special.tests.test_basic.TestBessel.test_iti0k0(self)
scipy.special.tests.test_basic.TestBessel.test_itj0y0(self)
scipy.special.tests.test_basic.TestBessel.test_iv(self)
scipy.special.tests.test_basic.TestBessel.test_iv_cephes_vs_amos(self)
scipy.special.tests.test_basic.TestBessel.test_iv_cephes_vs_amos_mass_test(self)
scipy.special.tests.test_basic.TestBessel.test_iv_hyperg_poles(self)
scipy.special.tests.test_basic.TestBessel.test_iv_series(self)
scipy.special.tests.test_basic.TestBessel.test_ive(self)
scipy.special.tests.test_basic.TestBessel.test_ivp(self)
scipy.special.tests.test_basic.TestBessel.test_ivp0(self)
scipy.special.tests.test_basic.TestBessel.test_j0(self)
scipy.special.tests.test_basic.TestBessel.test_j1(self)
scipy.special.tests.test_basic.TestBessel.test_jacobi(self)
scipy.special.tests.test_basic.TestBessel.test_jn(self)
scipy.special.tests.test_basic.TestBessel.test_jn_zeros(self)
scipy.special.tests.test_basic.TestBessel.test_jn_zeros_slow(self)
scipy.special.tests.test_basic.TestBessel.test_jnjnp_zeros(self)
scipy.special.tests.test_basic.TestBessel.test_jnp_zeros(self)
scipy.special.tests.test_basic.TestBessel.test_jnyn_zeros(self)
scipy.special.tests.test_basic.TestBessel.test_jv(self)
scipy.special.tests.test_basic.TestBessel.test_jv_cephes_vs_amos(self)
scipy.special.tests.test_basic.TestBessel.test_jve(self)
scipy.special.tests.test_basic.TestBessel.test_jvp(self)
scipy.special.tests.test_basic.TestBessel.test_k0(self)
scipy.special.tests.test_basic.TestBessel.test_k0e(self)
scipy.special.tests.test_basic.TestBessel.test_k1(self)
scipy.special.tests.test_basic.TestBessel.test_k1e(self)
scipy.special.tests.test_basic.TestBessel.test_kn(self)
scipy.special.tests.test_basic.TestBessel.test_kv0(self)
scipy.special.tests.test_basic.TestBessel.test_kv1(self)
scipy.special.tests.test_basic.TestBessel.test_kv2(self)
scipy.special.tests.test_basic.TestBessel.test_kv_cephes_vs_amos(self)
scipy.special.tests.test_basic.TestBessel.test_kve(self)
scipy.special.tests.test_basic.TestBessel.test_kvp_n1(self)
scipy.special.tests.test_basic.TestBessel.test_kvp_n2(self)
scipy.special.tests.test_basic.TestBessel.test_kvp_v0n1(self)
scipy.special.tests.test_basic.TestBessel.test_negv_iv(self)
scipy.special.tests.test_basic.TestBessel.test_negv_ive(self)
scipy.special.tests.test_basic.TestBessel.test_negv_jv(self)
scipy.special.tests.test_basic.TestBessel.test_negv_jve(self)
scipy.special.tests.test_basic.TestBessel.test_negv_kv(self)
scipy.special.tests.test_basic.TestBessel.test_negv_kve(self)
scipy.special.tests.test_basic.TestBessel.test_negv_yv(self)
scipy.special.tests.test_basic.TestBessel.test_negv_yve(self)
scipy.special.tests.test_basic.TestBessel.test_ticket_503(self)
scipy.special.tests.test_basic.TestBessel.test_ticket_623(self)
scipy.special.tests.test_basic.TestBessel.test_ticket_853(self)
scipy.special.tests.test_basic.TestBessel.test_ticket_854(self)
scipy.special.tests.test_basic.TestBessel.test_y0(self)
scipy.special.tests.test_basic.TestBessel.test_y0_zeros(self)
scipy.special.tests.test_basic.TestBessel.test_y1(self)
scipy.special.tests.test_basic.TestBessel.test_y1_zeros(self)
scipy.special.tests.test_basic.TestBessel.test_y1p_zeros(self)
scipy.special.tests.test_basic.TestBessel.test_yn(self)
scipy.special.tests.test_basic.TestBessel.test_yn_zeros(self)
scipy.special.tests.test_basic.TestBessel.test_ynp_zeros(self)
scipy.special.tests.test_basic.TestBessel.test_ynp_zeros_large_order(self)
scipy.special.tests.test_basic.TestBessel.test_yv(self)
scipy.special.tests.test_basic.TestBessel.test_yv_cephes_vs_amos(self)
scipy.special.tests.test_basic.TestBessel.test_yv_cephes_vs_amos_only_small_orders(self)
scipy.special.tests.test_basic.TestBessel.test_yve(self)
scipy.special.tests.test_basic.TestBessel.test_yvp(self)
scipy.special.tests.test_basic.TestBesselpoly(TestCase)
scipy.special.tests.test_basic.TestBesselpoly.test_besselpoly(self)
scipy.special.tests.test_basic.TestBeta(TestCase)
scipy.special.tests.test_basic.TestBeta.test_beta(self)
scipy.special.tests.test_basic.TestBeta.test_betainc(self)
scipy.special.tests.test_basic.TestBeta.test_betaincinv(self)
scipy.special.tests.test_basic.TestBeta.test_betaln(self)
scipy.special.tests.test_basic.TestCephes(TestCase)
scipy.special.tests.test_basic.TestCephes.__check_nbdtrik(self)
scipy.special.tests.test_basic.TestCephes.__check_ncfdtridfn(self)
scipy.special.tests.test_basic.TestCephes.__check_ncfdtrinc(self)
scipy.special.tests.test_basic.TestCephes.__check_nctdtridf(self)
scipy.special.tests.test_basic.TestCephes._check_ive(self)
scipy.special.tests.test_basic.TestCephes._check_jve(self)
scipy.special.tests.test_basic.TestCephes._check_kelvin(self)
scipy.special.tests.test_basic.TestCephes._check_kv(self)
scipy.special.tests.test_basic.TestCephes._check_kve(self)
scipy.special.tests.test_basic.TestCephes._check_modstruve(self)
scipy.special.tests.test_basic.TestCephes._check_obl_cv(self)
scipy.special.tests.test_basic.TestCephes._check_pro_cv(self)
scipy.special.tests.test_basic.TestCephes._check_yve(self)
scipy.special.tests.test_basic.TestCephes.test_airy(self)
scipy.special.tests.test_basic.TestCephes.test_airye(self)
scipy.special.tests.test_basic.TestCephes.test_bdtr(self)
scipy.special.tests.test_basic.TestCephes.test_bdtrc(self)
scipy.special.tests.test_basic.TestCephes.test_bdtri(self)
scipy.special.tests.test_basic.TestCephes.test_bdtrik(self)
scipy.special.tests.test_basic.TestCephes.test_bdtrin(self)
scipy.special.tests.test_basic.TestCephes.test_bei(self)
scipy.special.tests.test_basic.TestCephes.test_beip(self)
scipy.special.tests.test_basic.TestCephes.test_ber(self)
scipy.special.tests.test_basic.TestCephes.test_berp(self)
scipy.special.tests.test_basic.TestCephes.test_besselpoly(self)
scipy.special.tests.test_basic.TestCephes.test_beta(self)
scipy.special.tests.test_basic.TestCephes.test_beta_inf(self)
scipy.special.tests.test_basic.TestCephes.test_betainc(self)
scipy.special.tests.test_basic.TestCephes.test_betaincinv(self)
scipy.special.tests.test_basic.TestCephes.test_betaln(self)
scipy.special.tests.test_basic.TestCephes.test_binom(self)
scipy.special.tests.test_basic.TestCephes.test_binom_2(self)
scipy.special.tests.test_basic.TestCephes.test_binom_exact(self)
scipy.special.tests.test_basic.TestCephes.test_btdtr(self)
scipy.special.tests.test_basic.TestCephes.test_btdtri(self)
scipy.special.tests.test_basic.TestCephes.test_btdtria(self)
scipy.special.tests.test_basic.TestCephes.test_btdtrib(self)
scipy.special.tests.test_basic.TestCephes.test_cbrt(self)
scipy.special.tests.test_basic.TestCephes.test_chdtr(self)
scipy.special.tests.test_basic.TestCephes.test_chdtrc(self)
scipy.special.tests.test_basic.TestCephes.test_chdtri(self)
scipy.special.tests.test_basic.TestCephes.test_chdtriv(self)
scipy.special.tests.test_basic.TestCephes.test_chndtr(self)
scipy.special.tests.test_basic.TestCephes.test_chndtridf(self)
scipy.special.tests.test_basic.TestCephes.test_chndtrinc(self)
scipy.special.tests.test_basic.TestCephes.test_chndtrix(self)
scipy.special.tests.test_basic.TestCephes.test_cosdg(self)
scipy.special.tests.test_basic.TestCephes.test_cosm1(self)
scipy.special.tests.test_basic.TestCephes.test_cotdg(self)
scipy.special.tests.test_basic.TestCephes.test_dawsn(self)
scipy.special.tests.test_basic.TestCephes.test_ellipe(self)
scipy.special.tests.test_basic.TestCephes.test_ellipeinc(self)
scipy.special.tests.test_basic.TestCephes.test_ellipj(self)
scipy.special.tests.test_basic.TestCephes.test_ellipk(self)
scipy.special.tests.test_basic.TestCephes.test_ellipkinc(self)
scipy.special.tests.test_basic.TestCephes.test_erf(self)
scipy.special.tests.test_basic.TestCephes.test_erfc(self)
scipy.special.tests.test_basic.TestCephes.test_exp1(self)
scipy.special.tests.test_basic.TestCephes.test_exp10(self)
scipy.special.tests.test_basic.TestCephes.test_exp1_reg(self)
scipy.special.tests.test_basic.TestCephes.test_exp2(self)
scipy.special.tests.test_basic.TestCephes.test_expi(self)
scipy.special.tests.test_basic.TestCephes.test_expm1(self)
scipy.special.tests.test_basic.TestCephes.test_expn(self)
scipy.special.tests.test_basic.TestCephes.test_fdtr(self)
scipy.special.tests.test_basic.TestCephes.test_fdtrc(self)
scipy.special.tests.test_basic.TestCephes.test_fdtri(self)
scipy.special.tests.test_basic.TestCephes.test_fdtridfd(self)
scipy.special.tests.test_basic.TestCephes.test_fresnel(self)
scipy.special.tests.test_basic.TestCephes.test_gamma(self)
scipy.special.tests.test_basic.TestCephes.test_gammainc(self)
scipy.special.tests.test_basic.TestCephes.test_gammaincc(self)
scipy.special.tests.test_basic.TestCephes.test_gammainccinv(self)
scipy.special.tests.test_basic.TestCephes.test_gammaln(self)
scipy.special.tests.test_basic.TestCephes.test_gammasgn(self)
scipy.special.tests.test_basic.TestCephes.test_gdtr(self)
scipy.special.tests.test_basic.TestCephes.test_gdtrc(self)
scipy.special.tests.test_basic.TestCephes.test_gdtria(self)
scipy.special.tests.test_basic.TestCephes.test_gdtrib(self)
scipy.special.tests.test_basic.TestCephes.test_gdtrix(self)
scipy.special.tests.test_basic.TestCephes.test_hankel1(self)
scipy.special.tests.test_basic.TestCephes.test_hankel1e(self)
scipy.special.tests.test_basic.TestCephes.test_hankel2(self)
scipy.special.tests.test_basic.TestCephes.test_hankel2e(self)
scipy.special.tests.test_basic.TestCephes.test_hyp1f1(self)
scipy.special.tests.test_basic.TestCephes.test_hyp1f2(self)
scipy.special.tests.test_basic.TestCephes.test_hyp2f0(self)
scipy.special.tests.test_basic.TestCephes.test_hyp2f1(self)
scipy.special.tests.test_basic.TestCephes.test_hyp3f0(self)
scipy.special.tests.test_basic.TestCephes.test_hyperu(self)
scipy.special.tests.test_basic.TestCephes.test_i0(self)
scipy.special.tests.test_basic.TestCephes.test_i0e(self)
scipy.special.tests.test_basic.TestCephes.test_i1(self)
scipy.special.tests.test_basic.TestCephes.test_i1e(self)
scipy.special.tests.test_basic.TestCephes.test_it2i0k0(self)
scipy.special.tests.test_basic.TestCephes.test_it2j0y0(self)
scipy.special.tests.test_basic.TestCephes.test_it2struve0(self)
scipy.special.tests.test_basic.TestCephes.test_itairy(self)
scipy.special.tests.test_basic.TestCephes.test_iti0k0(self)
scipy.special.tests.test_basic.TestCephes.test_itj0y0(self)
scipy.special.tests.test_basic.TestCephes.test_itmodstruve0(self)
scipy.special.tests.test_basic.TestCephes.test_itstruve0(self)
scipy.special.tests.test_basic.TestCephes.test_iv(self)
scipy.special.tests.test_basic.TestCephes.test_j0(self)
scipy.special.tests.test_basic.TestCephes.test_j1(self)
scipy.special.tests.test_basic.TestCephes.test_jn(self)
scipy.special.tests.test_basic.TestCephes.test_jv(self)
scipy.special.tests.test_basic.TestCephes.test_k0(self)
scipy.special.tests.test_basic.TestCephes.test_k0e(self)
scipy.special.tests.test_basic.TestCephes.test_k1(self)
scipy.special.tests.test_basic.TestCephes.test_k1e(self)
scipy.special.tests.test_basic.TestCephes.test_kei(self)
scipy.special.tests.test_basic.TestCephes.test_keip(self)
scipy.special.tests.test_basic.TestCephes.test_ker(self)
scipy.special.tests.test_basic.TestCephes.test_kerp(self)
scipy.special.tests.test_basic.TestCephes.test_kn(self)
scipy.special.tests.test_basic.TestCephes.test_kolmogi(self)
scipy.special.tests.test_basic.TestCephes.test_kolmogorov(self)
scipy.special.tests.test_basic.TestCephes.test_log1p(self)
scipy.special.tests.test_basic.TestCephes.test_lpmv(self)
scipy.special.tests.test_basic.TestCephes.test_mathieu_a(self)
scipy.special.tests.test_basic.TestCephes.test_mathieu_b(self)
scipy.special.tests.test_basic.TestCephes.test_mathieu_cem(self)
scipy.special.tests.test_basic.TestCephes.test_mathieu_modcem1(self)
scipy.special.tests.test_basic.TestCephes.test_mathieu_modcem2(self)
scipy.special.tests.test_basic.TestCephes.test_mathieu_modsem1(self)
scipy.special.tests.test_basic.TestCephes.test_mathieu_modsem2(self)
scipy.special.tests.test_basic.TestCephes.test_mathieu_overflow(self)
scipy.special.tests.test_basic.TestCephes.test_mathieu_sem(self)
scipy.special.tests.test_basic.TestCephes.test_mathieu_ticket_1847(self)
scipy.special.tests.test_basic.TestCephes.test_modfresnelm(self)
scipy.special.tests.test_basic.TestCephes.test_modfresnelp(self)
scipy.special.tests.test_basic.TestCephes.test_nbdtr(self)
scipy.special.tests.test_basic.TestCephes.test_nbdtrc(self)
scipy.special.tests.test_basic.TestCephes.test_nbdtri(self)
scipy.special.tests.test_basic.TestCephes.test_nbdtrin(self)
scipy.special.tests.test_basic.TestCephes.test_ncfdtr(self)
scipy.special.tests.test_basic.TestCephes.test_ncfdtri(self)
scipy.special.tests.test_basic.TestCephes.test_ncfdtridfd(self)
scipy.special.tests.test_basic.TestCephes.test_nctdtr(self)
scipy.special.tests.test_basic.TestCephes.test_nctdtrinc(self)
scipy.special.tests.test_basic.TestCephes.test_nctdtrit(self)
scipy.special.tests.test_basic.TestCephes.test_ndtr(self)
scipy.special.tests.test_basic.TestCephes.test_ndtri(self)
scipy.special.tests.test_basic.TestCephes.test_nrdtrimn(self)
scipy.special.tests.test_basic.TestCephes.test_nrdtrisd(self)
scipy.special.tests.test_basic.TestCephes.test_obl_ang1(self)
scipy.special.tests.test_basic.TestCephes.test_obl_ang1_cv(self)
scipy.special.tests.test_basic.TestCephes.test_obl_rad1(self)
scipy.special.tests.test_basic.TestCephes.test_obl_rad1_cv(self)
scipy.special.tests.test_basic.TestCephes.test_obl_rad2(self)
scipy.special.tests.test_basic.TestCephes.test_obl_rad2_cv(self)
scipy.special.tests.test_basic.TestCephes.test_pbdv(self)
scipy.special.tests.test_basic.TestCephes.test_pbvv(self)
scipy.special.tests.test_basic.TestCephes.test_pbwa(self)
scipy.special.tests.test_basic.TestCephes.test_pdtr(self)
scipy.special.tests.test_basic.TestCephes.test_pdtrc(self)
scipy.special.tests.test_basic.TestCephes.test_pdtri(self)
scipy.special.tests.test_basic.TestCephes.test_pdtrik(self)
scipy.special.tests.test_basic.TestCephes.test_pro_ang1(self)
scipy.special.tests.test_basic.TestCephes.test_pro_ang1_cv(self)
scipy.special.tests.test_basic.TestCephes.test_pro_rad1(self)
scipy.special.tests.test_basic.TestCephes.test_pro_rad1_cv(self)
scipy.special.tests.test_basic.TestCephes.test_pro_rad2(self)
scipy.special.tests.test_basic.TestCephes.test_pro_rad2_cv(self)
scipy.special.tests.test_basic.TestCephes.test_psi(self)
scipy.special.tests.test_basic.TestCephes.test_radian(self)
scipy.special.tests.test_basic.TestCephes.test_rgamma(self)
scipy.special.tests.test_basic.TestCephes.test_round(self)
scipy.special.tests.test_basic.TestCephes.test_shichi(self)
scipy.special.tests.test_basic.TestCephes.test_sici(self)
scipy.special.tests.test_basic.TestCephes.test_sindg(self)
scipy.special.tests.test_basic.TestCephes.test_smirnov(self)
scipy.special.tests.test_basic.TestCephes.test_smirnovi(self)
scipy.special.tests.test_basic.TestCephes.test_spence(self)
scipy.special.tests.test_basic.TestCephes.test_stdtr(self)
scipy.special.tests.test_basic.TestCephes.test_stdtridf(self)
scipy.special.tests.test_basic.TestCephes.test_stdtrit(self)
scipy.special.tests.test_basic.TestCephes.test_struve(self)
scipy.special.tests.test_basic.TestCephes.test_tandg(self)
scipy.special.tests.test_basic.TestCephes.test_tklmbda(self)
scipy.special.tests.test_basic.TestCephes.test_wofz(self)
scipy.special.tests.test_basic.TestCephes.test_y0(self)
scipy.special.tests.test_basic.TestCephes.test_y1(self)
scipy.special.tests.test_basic.TestCephes.test_yn(self)
scipy.special.tests.test_basic.TestCephes.test_yv(self)
scipy.special.tests.test_basic.TestCephes.test_zeta(self)
scipy.special.tests.test_basic.TestCephes.test_zetac(self)
scipy.special.tests.test_basic.TestEllip(TestCase)
scipy.special.tests.test_basic.TestEllip.test_ellipe(self)
scipy.special.tests.test_basic.TestEllip.test_ellipeinc(self)
scipy.special.tests.test_basic.TestEllip.test_ellipj(self)
scipy.special.tests.test_basic.TestEllip.test_ellipj_nan(self)
scipy.special.tests.test_basic.TestEllip.test_ellipk(self)
scipy.special.tests.test_basic.TestEllip.test_ellipkinc(self)
scipy.special.tests.test_basic.TestErf(TestCase)
scipy.special.tests.test_basic.TestErf._check_variant_func(self,func,other_func,rtol,atol=0)
scipy.special.tests.test_basic.TestErf.test_dawsn_consistent(self)
scipy.special.tests.test_basic.TestErf.test_erf(self)
scipy.special.tests.test_basic.TestErf.test_erf_zeros(self)
scipy.special.tests.test_basic.TestErf.test_erfc_consistent(self)
scipy.special.tests.test_basic.TestErf.test_erfcinv(self)
scipy.special.tests.test_basic.TestErf.test_erfcx_consistent(self)
scipy.special.tests.test_basic.TestErf.test_erfi_consistent(self)
scipy.special.tests.test_basic.TestErf.test_erfinv(self)
scipy.special.tests.test_basic.TestErf.test_errprint(self)
scipy.special.tests.test_basic.TestEuler(TestCase)
scipy.special.tests.test_basic.TestEuler.test_euler(self)
scipy.special.tests.test_basic.TestExp(TestCase)
scipy.special.tests.test_basic.TestExp.test_exp10(self)
scipy.special.tests.test_basic.TestExp.test_exp10more(self)
scipy.special.tests.test_basic.TestExp.test_exp2(self)
scipy.special.tests.test_basic.TestExp.test_exp2more(self)
scipy.special.tests.test_basic.TestExp.test_expm1(self)
scipy.special.tests.test_basic.TestExp.test_expm1more(self)
scipy.special.tests.test_basic.TestFresnel(TestCase)
scipy.special.tests.test_basic.TestFresnel.test_fresnel(self)
scipy.special.tests.test_basic.TestFresnel.test_fresnel_zeros(self)
scipy.special.tests.test_basic.TestFresnel.test_fresnelc_zeros(self)
scipy.special.tests.test_basic.TestFresnel.test_fresnels_zeros(self)
scipy.special.tests.test_basic.TestFresnelIntegral(TestCase)
scipy.special.tests.test_basic.TestFresnelIntegral.test_modfresnelm(self)
scipy.special.tests.test_basic.TestFresnelIntegral.test_modfresnelp(self)
scipy.special.tests.test_basic.TestGamma(TestCase)
scipy.special.tests.test_basic.TestGamma.test_975(self)
scipy.special.tests.test_basic.TestGamma.test_gamma(self)
scipy.special.tests.test_basic.TestGamma.test_gammainc(self)
scipy.special.tests.test_basic.TestGamma.test_gammaincc(self)
scipy.special.tests.test_basic.TestGamma.test_gammainccinv(self)
scipy.special.tests.test_basic.TestGamma.test_gammainccnan(self)
scipy.special.tests.test_basic.TestGamma.test_gammaincinv(self)
scipy.special.tests.test_basic.TestGamma.test_gammaincnan(self)
scipy.special.tests.test_basic.TestGamma.test_gammainczero(self)
scipy.special.tests.test_basic.TestGamma.test_gammaln(self)
scipy.special.tests.test_basic.TestGamma.test_infinity(self)
scipy.special.tests.test_basic.TestGamma.test_rgamma(self)
scipy.special.tests.test_basic.TestHankel(TestCase)
scipy.special.tests.test_basic.TestHankel.test_hankel1(self)
scipy.special.tests.test_basic.TestHankel.test_hankel1e(self)
scipy.special.tests.test_basic.TestHankel.test_hankel2(self)
scipy.special.tests.test_basic.TestHankel.test_hankl2e(self)
scipy.special.tests.test_basic.TestHankel.test_neg2e(self)
scipy.special.tests.test_basic.TestHankel.test_negv1(self)
scipy.special.tests.test_basic.TestHankel.test_negv1e(self)
scipy.special.tests.test_basic.TestHankel.test_negv2(self)
scipy.special.tests.test_basic.TestHyper(TestCase)
scipy.special.tests.test_basic.TestHyper.test_h1vp(self)
scipy.special.tests.test_basic.TestHyper.test_h2vp(self)
scipy.special.tests.test_basic.TestHyper.test_hyp0f1(self)
scipy.special.tests.test_basic.TestHyper.test_hyp1f1(self)
scipy.special.tests.test_basic.TestHyper.test_hyp1f2(self)
scipy.special.tests.test_basic.TestHyper.test_hyp2f0(self)
scipy.special.tests.test_basic.TestHyper.test_hyp2f1(self)
scipy.special.tests.test_basic.TestHyper.test_hyp3f0(self)
scipy.special.tests.test_basic.TestHyper.test_hyperu(self)
scipy.special.tests.test_basic.TestKelvin(TestCase)
scipy.special.tests.test_basic.TestKelvin.test_bei(self)
scipy.special.tests.test_basic.TestKelvin.test_bei_zeros(self)
scipy.special.tests.test_basic.TestKelvin.test_beip(self)
scipy.special.tests.test_basic.TestKelvin.test_beip_zeros(self)
scipy.special.tests.test_basic.TestKelvin.test_ber(self)
scipy.special.tests.test_basic.TestKelvin.test_ber_zeros(self)
scipy.special.tests.test_basic.TestKelvin.test_berp(self)
scipy.special.tests.test_basic.TestKelvin.test_berp_zeros(self)
scipy.special.tests.test_basic.TestKelvin.test_kei(self)
scipy.special.tests.test_basic.TestKelvin.test_kei_zeros(self)
scipy.special.tests.test_basic.TestKelvin.test_keip(self)
scipy.special.tests.test_basic.TestKelvin.test_keip_zeros(self)
scipy.special.tests.test_basic.TestKelvin.test_kelvin(self)
scipy.special.tests.test_basic.TestKelvin.test_kelvin_zeros(self)
scipy.special.tests.test_basic.TestKelvin.test_ker(self)
scipy.special.tests.test_basic.TestKelvin.test_ker_zeros(self)
scipy.special.tests.test_basic.TestKelvin.test_kerp(self)
scipy.special.tests.test_basic.TestKelvin.test_kerp_zeros(self)
scipy.special.tests.test_basic.TestLaguerre(TestCase)
scipy.special.tests.test_basic.TestLaguerre.test_genlaguerre(self)
scipy.special.tests.test_basic.TestLaguerre.test_laguerre(self)
scipy.special.tests.test_basic.TestLambda(TestCase)
scipy.special.tests.test_basic.TestLambda.test_lmbda(self)
scipy.special.tests.test_basic.TestLegendre(TestCase)
scipy.special.tests.test_basic.TestLegendre.test_legendre(self)
scipy.special.tests.test_basic.TestLegendreFunctions(TestCase)
scipy.special.tests.test_basic.TestLegendreFunctions.test_lpmn(self)
scipy.special.tests.test_basic.TestLegendreFunctions.test_lpmv(self)
scipy.special.tests.test_basic.TestLegendreFunctions.test_lpn(self)
scipy.special.tests.test_basic.TestLegendreFunctions.test_lqmn(self)
scipy.special.tests.test_basic.TestLegendreFunctions.test_lqmn_shape(self)
scipy.special.tests.test_basic.TestLegendreFunctions.test_lqn(self)
scipy.special.tests.test_basic.TestLog1p(TestCase)
scipy.special.tests.test_basic.TestLog1p.test_log1p(self)
scipy.special.tests.test_basic.TestLog1p.test_log1pmore(self)
scipy.special.tests.test_basic.TestMathieu(TestCase)
scipy.special.tests.test_basic.TestMathieu.test_mathieu_a(self)
scipy.special.tests.test_basic.TestMathieu.test_mathieu_even_coef(self)
scipy.special.tests.test_basic.TestMathieu.test_mathieu_odd_coef(self)
scipy.special.tests.test_basic.TestOblCvSeq(TestCase)
scipy.special.tests.test_basic.TestOblCvSeq.test_obl_cv_seq(self)
scipy.special.tests.test_basic.TestParabolicCylinder(TestCase)
scipy.special.tests.test_basic.TestParabolicCylinder.test_pbdn_seq(self)
scipy.special.tests.test_basic.TestParabolicCylinder.test_pbdv(self)
scipy.special.tests.test_basic.TestParabolicCylinder.test_pbdv_gradient(self)
scipy.special.tests.test_basic.TestParabolicCylinder.test_pbdv_points(self)
scipy.special.tests.test_basic.TestParabolicCylinder.test_pbdv_seq(self)
scipy.special.tests.test_basic.TestParabolicCylinder.test_pbvv_gradient(self)
scipy.special.tests.test_basic.TestPolygamma(TestCase)
scipy.special.tests.test_basic.TestPolygamma.test_polygamma(self)
scipy.special.tests.test_basic.TestProCvSeq(TestCase)
scipy.special.tests.test_basic.TestProCvSeq.test_pro_cv_seq(self)
scipy.special.tests.test_basic.TestPsi(TestCase)
scipy.special.tests.test_basic.TestPsi.test_psi(self)
scipy.special.tests.test_basic.TestRadian(TestCase)
scipy.special.tests.test_basic.TestRadian.test_radian(self)
scipy.special.tests.test_basic.TestRadian.test_radianmore(self)
scipy.special.tests.test_basic.TestRiccati(TestCase)
scipy.special.tests.test_basic.TestRiccati.test_riccati_jn(self)
scipy.special.tests.test_basic.TestRiccati.test_riccati_yn(self)
scipy.special.tests.test_basic.TestRound(TestCase)
scipy.special.tests.test_basic.TestRound.test_round(self)
scipy.special.tests.test_basic.TestSpherical(TestCase)
scipy.special.tests.test_basic.TestSpherical.test_sph_harm(self)
scipy.special.tests.test_basic.TestSpherical.test_sph_in(self)
scipy.special.tests.test_basic.TestSpherical.test_sph_inkn(self)
scipy.special.tests.test_basic.TestSpherical.test_sph_jn(self)
scipy.special.tests.test_basic.TestSpherical.test_sph_jnyn(self)
scipy.special.tests.test_basic.TestSpherical.test_sph_kn(self)
scipy.special.tests.test_basic.TestSpherical.test_sph_yn(self)
scipy.special.tests.test_basic.TestStruve(object)
scipy.special.tests.test_basic.TestStruve._series(self,v,z,n=100)
scipy.special.tests.test_basic.TestStruve.test_regression_679(self)
scipy.special.tests.test_basic.TestStruve.test_some_values(self)
scipy.special.tests.test_basic.TestStruve.test_vs_series(self)
scipy.special.tests.test_basic.TestTandg(TestCase)
scipy.special.tests.test_basic.TestTandg.test_specialpoints(self)
scipy.special.tests.test_basic.TestTandg.test_tandg(self)
scipy.special.tests.test_basic.TestTandg.test_tandgmore(self)
scipy.special.tests.test_basic.TestTrigonometric(TestCase)
scipy.special.tests.test_basic.TestTrigonometric.test_0(self)
scipy.special.tests.test_basic.TestTrigonometric.test_cbrt(self)
scipy.special.tests.test_basic.TestTrigonometric.test_cbrtmore(self)
scipy.special.tests.test_basic.TestTrigonometric.test_cosdg(self)
scipy.special.tests.test_basic.TestTrigonometric.test_cosdgmore(self)
scipy.special.tests.test_basic.TestTrigonometric.test_cosm1(self)
scipy.special.tests.test_basic.TestTrigonometric.test_cotdg(self)
scipy.special.tests.test_basic.TestTrigonometric.test_cotdgmore(self)
scipy.special.tests.test_basic.TestTrigonometric.test_sinc(self)
scipy.special.tests.test_basic.TestTrigonometric.test_sindg(self)
scipy.special.tests.test_basic.TestTrigonometric.test_sindgmore(self)
scipy.special.tests.test_basic.TestTrigonometric.test_specialpoints(self)
scipy.special.tests.test_basic.test_agm_simple()
scipy.special.tests.test_basic.test_chi2_inv_smalldf()
scipy.special.tests.test_basic.test_chi2_smalldf()
scipy.special.tests.test_basic.test_chi2c_smalldf()
scipy.special.tests.test_basic.test_error_raising()
scipy.special.tests.test_basic.test_legacy()
scipy.special.tests.test_basic.test_sph_harm()
scipy.special.tests.test_test_agm_simple()
scipy.special.tests.test_test_chi2_inv_smalldf()
scipy.special.tests.test_test_chi2_smalldf()
scipy.special.tests.test_test_chi2c_smalldf()
scipy.special.tests.test_test_error_raising()
scipy.special.tests.test_test_legacy()
scipy.special.tests.test_test_sph_harm()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/special/tests/test_orthogonal.py----------------------------------------
A:scipy.special.tests.test_orthogonal.C0->scipy.special.orthogonal.chebyc(0)
A:scipy.special.tests.test_orthogonal.C1->scipy.special.orthogonal.chebyc(1)
A:scipy.special.tests.test_orthogonal.olderr->numpy.seterr(all='ignore')
A:scipy.special.tests.test_orthogonal.C2->scipy.special.orthogonal.chebyc(2)
A:scipy.special.tests.test_orthogonal.C3->scipy.special.orthogonal.chebyc(3)
A:scipy.special.tests.test_orthogonal.C4->scipy.special.orthogonal.chebyc(4)
A:scipy.special.tests.test_orthogonal.C5->scipy.special.orthogonal.chebyc(5)
A:scipy.special.tests.test_orthogonal.S0->scipy.special.orthogonal.chebys(0)
A:scipy.special.tests.test_orthogonal.S1->scipy.special.orthogonal.chebys(1)
A:scipy.special.tests.test_orthogonal.S2->scipy.special.orthogonal.chebys(2)
A:scipy.special.tests.test_orthogonal.S3->scipy.special.orthogonal.chebys(3)
A:scipy.special.tests.test_orthogonal.S4->scipy.special.orthogonal.chebys(4)
A:scipy.special.tests.test_orthogonal.S5->scipy.special.orthogonal.chebys(5)
A:scipy.special.tests.test_orthogonal.T0->scipy.special.orthogonal.chebyt(0)
A:scipy.special.tests.test_orthogonal.T1->scipy.special.orthogonal.chebyt(1)
A:scipy.special.tests.test_orthogonal.T2->scipy.special.orthogonal.chebyt(2)
A:scipy.special.tests.test_orthogonal.T3->scipy.special.orthogonal.chebyt(3)
A:scipy.special.tests.test_orthogonal.T4->scipy.special.orthogonal.chebyt(4)
A:scipy.special.tests.test_orthogonal.T5->scipy.special.orthogonal.chebyt(5)
A:scipy.special.tests.test_orthogonal.U0->scipy.special.orthogonal.chebyu(0)
A:scipy.special.tests.test_orthogonal.U1->scipy.special.orthogonal.chebyu(1)
A:scipy.special.tests.test_orthogonal.U2->scipy.special.orthogonal.chebyu(2)
A:scipy.special.tests.test_orthogonal.U3->scipy.special.orthogonal.chebyu(3)
A:scipy.special.tests.test_orthogonal.U4->scipy.special.orthogonal.chebyu(4)
A:scipy.special.tests.test_orthogonal.U5->scipy.special.orthogonal.chebyu(5)
A:scipy.special.tests.test_orthogonal.Ca0->scipy.special.orthogonal.gegenbauer(0, a)
A:scipy.special.tests.test_orthogonal.Ca1->scipy.special.orthogonal.gegenbauer(1, a)
A:scipy.special.tests.test_orthogonal.Ca2->scipy.special.orthogonal.gegenbauer(2, a)
A:scipy.special.tests.test_orthogonal.Ca3->scipy.special.orthogonal.gegenbauer(3, a)
A:scipy.special.tests.test_orthogonal.Ca4->scipy.special.orthogonal.gegenbauer(4, a)
A:scipy.special.tests.test_orthogonal.Ca5->scipy.special.orthogonal.gegenbauer(5, a)
A:scipy.special.tests.test_orthogonal.H0->scipy.special.orthogonal.hermitenorm(0)
A:scipy.special.tests.test_orthogonal.H1->scipy.special.orthogonal.hermitenorm(1)
A:scipy.special.tests.test_orthogonal.H2->scipy.special.orthogonal.hermitenorm(2)
A:scipy.special.tests.test_orthogonal.H3->scipy.special.orthogonal.hermitenorm(3)
A:scipy.special.tests.test_orthogonal.H4->scipy.special.orthogonal.hermitenorm(4)
A:scipy.special.tests.test_orthogonal.H5->scipy.special.orthogonal.hermitenorm(5)
A:scipy.special.tests.test_orthogonal.psub->numpy.poly1d([2, -1])
A:scipy.special.tests.test_orthogonal.he0->scipy.special.orthogonal.hermite(0)(psub)
A:scipy.special.tests.test_orthogonal.Ps0->scipy.special.orthogonal.sh_legendre(0)
A:scipy.special.tests.test_orthogonal.Ps1->scipy.special.orthogonal.sh_legendre(1)
A:scipy.special.tests.test_orthogonal.Ps2->scipy.special.orthogonal.sh_legendre(2)
A:scipy.special.tests.test_orthogonal.Ps3->scipy.special.orthogonal.sh_legendre(3)
A:scipy.special.tests.test_orthogonal.Ps4->scipy.special.orthogonal.sh_legendre(4)
A:scipy.special.tests.test_orthogonal.Ps5->scipy.special.orthogonal.sh_legendre(5)
A:scipy.special.tests.test_orthogonal.pse0->scipy.special.orthogonal.legendre(0)(psub)
A:scipy.special.tests.test_orthogonal.pse1->scipy.special.orthogonal.legendre(1)(psub)
A:scipy.special.tests.test_orthogonal.pse2->scipy.special.orthogonal.legendre(2)(psub)
A:scipy.special.tests.test_orthogonal.pse3->scipy.special.orthogonal.legendre(3)(psub)
A:scipy.special.tests.test_orthogonal.pse4->scipy.special.orthogonal.legendre(4)(psub)
A:scipy.special.tests.test_orthogonal.pse5->scipy.special.orthogonal.legendre(5)(psub)
A:scipy.special.tests.test_orthogonal.Ts0->scipy.special.orthogonal.sh_chebyt(0)
A:scipy.special.tests.test_orthogonal.Ts1->scipy.special.orthogonal.sh_chebyt(1)
A:scipy.special.tests.test_orthogonal.Ts2->scipy.special.orthogonal.sh_chebyt(2)
A:scipy.special.tests.test_orthogonal.Ts3->scipy.special.orthogonal.sh_chebyt(3)
A:scipy.special.tests.test_orthogonal.Ts4->scipy.special.orthogonal.sh_chebyt(4)
A:scipy.special.tests.test_orthogonal.Ts5->scipy.special.orthogonal.sh_chebyt(5)
A:scipy.special.tests.test_orthogonal.tse0->scipy.special.orthogonal.chebyt(0)(psub)
A:scipy.special.tests.test_orthogonal.tse1->scipy.special.orthogonal.chebyt(1)(psub)
A:scipy.special.tests.test_orthogonal.tse2->scipy.special.orthogonal.chebyt(2)(psub)
A:scipy.special.tests.test_orthogonal.tse3->scipy.special.orthogonal.chebyt(3)(psub)
A:scipy.special.tests.test_orthogonal.tse4->scipy.special.orthogonal.chebyt(4)(psub)
A:scipy.special.tests.test_orthogonal.tse5->scipy.special.orthogonal.chebyt(5)(psub)
A:scipy.special.tests.test_orthogonal.Us0->scipy.special.orthogonal.sh_chebyu(0)
A:scipy.special.tests.test_orthogonal.Us1->scipy.special.orthogonal.sh_chebyu(1)
A:scipy.special.tests.test_orthogonal.Us2->scipy.special.orthogonal.sh_chebyu(2)
A:scipy.special.tests.test_orthogonal.Us3->scipy.special.orthogonal.sh_chebyu(3)
A:scipy.special.tests.test_orthogonal.Us4->scipy.special.orthogonal.sh_chebyu(4)
A:scipy.special.tests.test_orthogonal.Us5->scipy.special.orthogonal.sh_chebyu(5)
A:scipy.special.tests.test_orthogonal.use0->scipy.special.orthogonal.chebyu(0)(psub)
A:scipy.special.tests.test_orthogonal.use1->scipy.special.orthogonal.chebyu(1)(psub)
A:scipy.special.tests.test_orthogonal.use2->scipy.special.orthogonal.chebyu(2)(psub)
A:scipy.special.tests.test_orthogonal.use3->scipy.special.orthogonal.chebyu(3)(psub)
A:scipy.special.tests.test_orthogonal.use4->scipy.special.orthogonal.chebyu(4)(psub)
A:scipy.special.tests.test_orthogonal.use5->scipy.special.orthogonal.chebyu(5)(psub)
A:scipy.special.tests.test_orthogonal.G0->scipy.special.orthogonal.sh_jacobi(0, p, q)
A:scipy.special.tests.test_orthogonal.G1->scipy.special.orthogonal.sh_jacobi(1, p, q)
A:scipy.special.tests.test_orthogonal.G2->scipy.special.orthogonal.sh_jacobi(2, p, q)
A:scipy.special.tests.test_orthogonal.G3->scipy.special.orthogonal.sh_jacobi(3, p, q)
A:scipy.special.tests.test_orthogonal.G4->scipy.special.orthogonal.sh_jacobi(4, p, q)
A:scipy.special.tests.test_orthogonal.G5->scipy.special.orthogonal.sh_jacobi(5, p, q)
A:scipy.special.tests.test_orthogonal.p->eval(pstr)
scipy.special.tests.test_TestCall(object)
scipy.special.tests.test_TestCall.test_call(self)
scipy.special.tests.test_TestCheby(TestCase)
scipy.special.tests.test_TestCheby.test_chebyc(self)
scipy.special.tests.test_TestCheby.test_chebys(self)
scipy.special.tests.test_TestCheby.test_chebyt(self)
scipy.special.tests.test_TestCheby.test_chebyu(self)
scipy.special.tests.test_TestGegenbauer(TestCase)
scipy.special.tests.test_TestGegenbauer.test_gegenbauer(self)
scipy.special.tests.test_TestHermite(TestCase)
scipy.special.tests.test_TestHermite.test_hermite(self)
scipy.special.tests.test_TestHermite.test_hermitenorm(self)
scipy.special.tests.test__test_sh_chebyt(TestCase)
scipy.special.tests.test__test_sh_chebyt.test_sh_chebyt(self)
scipy.special.tests.test__test_sh_chebyu(TestCase)
scipy.special.tests.test__test_sh_chebyu.test_sh_chebyu(self)
scipy.special.tests.test__test_sh_jacobi(TestCase)
scipy.special.tests.test__test_sh_jacobi.test_sh_jacobi(self)
scipy.special.tests.test__test_sh_legendre(TestCase)
scipy.special.tests.test__test_sh_legendre.test_sh_legendre(self)
scipy.special.tests.test_orthogonal.TestCall(object)
scipy.special.tests.test_orthogonal.TestCall.test_call(self)
scipy.special.tests.test_orthogonal.TestCheby(TestCase)
scipy.special.tests.test_orthogonal.TestCheby.test_chebyc(self)
scipy.special.tests.test_orthogonal.TestCheby.test_chebys(self)
scipy.special.tests.test_orthogonal.TestCheby.test_chebyt(self)
scipy.special.tests.test_orthogonal.TestCheby.test_chebyu(self)
scipy.special.tests.test_orthogonal.TestGegenbauer(TestCase)
scipy.special.tests.test_orthogonal.TestGegenbauer.test_gegenbauer(self)
scipy.special.tests.test_orthogonal.TestHermite(TestCase)
scipy.special.tests.test_orthogonal.TestHermite.test_hermite(self)
scipy.special.tests.test_orthogonal.TestHermite.test_hermitenorm(self)
scipy.special.tests.test_orthogonal._test_sh_chebyt(TestCase)
scipy.special.tests.test_orthogonal._test_sh_chebyt.test_sh_chebyt(self)
scipy.special.tests.test_orthogonal._test_sh_chebyu(TestCase)
scipy.special.tests.test_orthogonal._test_sh_chebyu.test_sh_chebyu(self)
scipy.special.tests.test_orthogonal._test_sh_jacobi(TestCase)
scipy.special.tests.test_orthogonal._test_sh_jacobi.test_sh_jacobi(self)
scipy.special.tests.test_orthogonal._test_sh_legendre(TestCase)
scipy.special.tests.test_orthogonal._test_sh_legendre.test_sh_legendre(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/special/tests/test_mpmath.py----------------------------------------
A:scipy.special.tests.test_mpmath.dataset->numpy.array(dataset, dtype=np.float_)
A:scipy.special.tests.test_mpmath.kw->dict(eliminate=True)
A:scipy.special.tests.test_mpmath.olderr->numpy.seterr(invalid='ignore')
A:scipy.special.tests.test_mpmath.v->float(mpmath.hyp2f1(a, b, c, z))
A:scipy.special.tests.test_mpmath.dataset[:, 0]->numpy.random.pareto(1.5, npoints)
A:scipy.special.tests.test_mpmath.dataset[:, 1]->numpy.random.pareto(1.5, npoints)
A:scipy.special.tests.test_mpmath.dataset[:, 2]->numpy.random.pareto(1.5, npoints)
A:scipy.special.tests.test_mpmath.ds[2]->abs(ds[:2]).max()
A:scipy.special.tests.test_mpmath.ds[4]->float(mpmath.hyp2f1(*tuple(ds[:4])))
A:scipy.special.tests.test_mpmath.(x1, y1)->numpy.meshgrid(np.linspace(-10, 1, 31), np.linspace(-10, 1, 11))
A:scipy.special.tests.test_mpmath.(x2, y2)->numpy.meshgrid(np.logspace(-80, 0.8, 31), np.logspace(-80, 0.8, 11))
scipy.special.tests.test_mpmath.mpmath_check(min_ver)
scipy.special.tests.test_mpmath.test_beta()
scipy.special.tests.test_mpmath.test_erf_complex()
scipy.special.tests.test_mpmath.test_expi_complex()
scipy.special.tests.test_mpmath.test_hyp2f1_real_random()
scipy.special.tests.test_mpmath.test_hyp2f1_real_some()
scipy.special.tests.test_mpmath.test_hyp2f1_real_some_points()
scipy.special.tests.test_mpmath.test_hyp2f1_some_points_2()
scipy.special.tests.test_mpmath.test_hyp2f1_strange_points()
scipy.special.tests.test_mpmath.test_lpmv()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/special/tests/test_logit.py----------------------------------------
A:scipy.special.tests.test_logit.a->numpy.array(a, dtype=dtype)
A:scipy.special.tests.test_logit.olderr->numpy.seterr(invalid='ignore')
A:scipy.special.tests.test_logit.actual->expit(a)
A:scipy.special.tests.test_logit.expected->numpy.array([0.01798621, 0.04265125, 0.0977726, 0.20860853, 0.39068246, 0.60931754, 0.79139147, 0.9022274, 0.95734875, 0.98201379])
scipy.special.tests.test_logit.TestExpit(TestCase)
scipy.special.tests.test_logit.TestExpit.check_expit_out(self,dtype,expected)
scipy.special.tests.test_logit.TestExpit.test_float32(self)
scipy.special.tests.test_logit.TestExpit.test_float64(self)
scipy.special.tests.test_logit.TestLogit(TestCase)
scipy.special.tests.test_logit.TestLogit.check_logit_out(self,dtype,expected)
scipy.special.tests.test_logit.TestLogit.test_float32(self)
scipy.special.tests.test_logit.TestLogit.test_float64(self)
scipy.special.tests.test_logit.TestLogit.test_nan(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/special/tests/test_lambertw.py----------------------------------------
A:scipy.special.tests.test_lambertw.data->array(data, dtype=complex_)
A:scipy.special.tests.test_lambertw.olderr->numpy.seterr(all='ignore')
scipy.special.tests.test_lambertw.test_ufunc()
scipy.special.tests.test_lambertw.test_values()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/special/tests/test_orthogonal_eval.py----------------------------------------
A:scipy.special.tests.test_orthogonal_eval.n->numpy.arange(0, 10000, 7)
A:scipy.special.tests.test_orthogonal_eval.v1->numpy.cos(n * np.arccos(x))
A:scipy.special.tests.test_orthogonal_eval.v2->scipy.special.orthogonal.eval_chebyt(n, x)
A:scipy.special.tests.test_orthogonal_eval.olderr->numpy.seterr(all='raise')
A:scipy.special.tests.test_orthogonal_eval.poly->numpy.poly1d(cls(*p))
A:scipy.special.tests.test_orthogonal_eval.dataset->numpy.concatenate(dataset, axis=0)
A:scipy.special.tests.test_orthogonal_eval.ds->FuncData(polyfunc, dataset, list(range(len(param_ranges) + 2)), -1, rtol=rtol)
A:scipy.special.tests.test_orthogonal_eval.kw->dict(sig='l' + (len(p) - 1) * 'd' + '->d')
scipy.special.tests.test_orthogonal_eval.TestPolys(object)
scipy.special.tests.test_orthogonal_eval.TestPolys.check_poly(self,func,cls,param_ranges=[],x_range=[],nn=10,nparam=10,nx=10,rtol=1e-08)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_chebyc(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_chebys(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_chebyt(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_chebyu(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_gegenbauer(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_genlaguerre(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_hermite(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_hermitenorm(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_jacobi(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_laguerre(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_legendre(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_sh_chebyt(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_sh_chebyu(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_sh_jacobi(self)
scipy.special.tests.test_orthogonal_eval.TestPolys.test_sh_legendre(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence(object)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.check_poly(self,func,param_ranges=[],x_range=[],nn=10,nparam=10,nx=10,rtol=1e-08)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_chebyc(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_chebys(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_chebyt(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_chebyu(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_gegenbauer(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_genlaguerre(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_jacobi(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_laguerre(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_legendre(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_sh_chebyt(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_sh_chebyu(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_sh_jacobi(self)
scipy.special.tests.test_orthogonal_eval.TestRecurrence.test_sh_legendre(self)
scipy.special.tests.test_orthogonal_eval.test_eval_chebyt()
scipy.special.tests.test_orthogonal_eval.test_warnings()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/special/tests/test_data.py----------------------------------------
A:scipy.special.tests.test_data.DATASETS_BOOST->numpy.load(os.path.join(os.path.dirname(__file__), 'data', 'boost.npz'))
A:scipy.special.tests.test_data.DATASETS_GSL->numpy.load(os.path.join(os.path.dirname(__file__), 'data', 'gsl.npz'))
A:scipy.special.tests.test_data.olderr->numpy.seterr(all='ignore')
scipy.special.tests.test_data._test_factory(test,dtype=np.double)
scipy.special.tests.test_data.assoc_legendre_p_boost_(nu,mu,x)
scipy.special.tests.test_data.data(func,dataname,*a,**kw)
scipy.special.tests.test_data.data_gsl(func,dataname,*a,**kw)
scipy.special.tests.test_data.ellipe_(k)
scipy.special.tests.test_data.ellipeinc_(f,k)
scipy.special.tests.test_data.ellipj_(k)
scipy.special.tests.test_data.ellipk_(k)
scipy.special.tests.test_data.legendre_p_via_assoc_(nu,x)
scipy.special.tests.test_data.mathieu_ce_rad(m,q,x)
scipy.special.tests.test_data.mathieu_mc1_scaled(m,q,x)
scipy.special.tests.test_data.mathieu_mc2_scaled(m,q,x)
scipy.special.tests.test_data.mathieu_ms1_scaled(m,q,x)
scipy.special.tests.test_data.mathieu_ms2_scaled(m,q,x)
scipy.special.tests.test_data.mathieu_se_rad(m,q,x)
scipy.special.tests.test_data.test_boost()
scipy.special.tests.test_data.test_gsl()
scipy.special.tests.test_data.zeta_(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/special/tests/test_spfun_stats.py----------------------------------------
A:scipy.special.tests.test_spfun_stats.a->numpy.abs(np.random.randn())
A:scipy.special.tests.test_spfun_stats.tr->multigammaln(a, d)
scipy.special.tests.test_spfun_stats.TestMultiGammaLn(TestCase)
scipy.special.tests.test_spfun_stats.TestMultiGammaLn.test1(self)
scipy.special.tests.test_spfun_stats.TestMultiGammaLn.test_ararg(self)
scipy.special.tests.test_spfun_stats.TestMultiGammaLn.test_bararg(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/_tukeylambda_stats.py----------------------------------------
A:scipy.stats._tukeylambda_stats._tukeylambda_var_p->poly1d(_tukeylambda_var_pc[::-1])
A:scipy.stats._tukeylambda_stats._tukeylambda_var_q->poly1d(_tukeylambda_var_qc[::-1])
A:scipy.stats._tukeylambda_stats.lam->numpy.atleast_1d(lam).astype(np.float64)
A:scipy.stats._tukeylambda_stats.v->numpy.empty_like(lam)
A:scipy.stats._tukeylambda_stats._tukeylambda_kurt_p->poly1d(_tukeylambda_kurt_pc[::-1])
A:scipy.stats._tukeylambda_stats._tukeylambda_kurt_q->poly1d(_tukeylambda_kurt_qc[::-1])
A:scipy.stats._tukeylambda_stats.k->numpy.empty_like(lam)
scipy._tukeylambda_tukeylambda_kurtosis(lam)
scipy._tukeylambda_tukeylambda_variance(lam)
scipy.stats._tukeylambda_stats.tukeylambda_kurtosis(lam)
scipy.stats._tukeylambda_stats.tukeylambda_variance(lam)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/rv.py----------------------------------------
A:scipy.stats.rv.U->random_sample(size=size)
A:scipy.stats.rv._vppf->vectorize(_ppf)
scipy.stats.randwcdf(cdf,mean=1.0,args=(),size=None)
scipy.stats.randwppf(ppf,args=(),size=None)
scipy.stats.rv.randwcdf(cdf,mean=1.0,args=(),size=None)
scipy.stats.rv.randwppf(ppf,args=(),size=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/kde.py----------------------------------------
A:scipy.stats.kde.self.dataset->atleast_2d(dataset)
A:scipy.stats.kde.points->reshape(points, (self.d, 1))
A:scipy.stats.kde.result->zeros((m,), dtype=np.float)
A:scipy.stats.kde.tdiff->dot(linalg.inv(sum_cov), diff)
A:scipy.stats.kde.result[i]->sum(exp(-energy), axis=0)
A:scipy.stats.kde.mean->atleast_1d(squeeze(mean))
A:scipy.stats.kde.cov->atleast_2d(cov)
A:scipy.stats.kde.normalized_low->ravel((low - self.dataset) / stdev)
A:scipy.stats.kde.normalized_high->ravel((high - self.dataset) / stdev)
A:scipy.stats.kde.value->numpy.mean(special.ndtr(normalized_high) - special.ndtr(normalized_low))
A:scipy.stats.kde.(value, inform)->mvn.mvnun(low_bounds, high_bounds, self.dataset, self.covariance, **extra_kwds)
A:scipy.stats.kde.norm->transpose(multivariate_normal(zeros((self.d,), float), self.covariance, size=size))
A:scipy.stats.kde.indices->randint(0, self.n, size=size)
A:scipy.stats.kde.self.factor->self.covariance_factor()
A:scipy.stats.kde.self._data_covariance->atleast_2d(np.cov(self.dataset, rowvar=1, bias=False))
A:scipy.stats.kde.self._data_inv_cov->scipy.linalg.inv(self._data_covariance)
scipy.stats.gaussian_kde(self,dataset,bw_method=None)
scipy.stats.gaussian_kde._compute_covariance(self)
scipy.stats.gaussian_kde.evaluate(self,points)
scipy.stats.gaussian_kde.integrate_box(self,low_bounds,high_bounds,maxpts=None)
scipy.stats.gaussian_kde.integrate_box_1d(self,low,high)
scipy.stats.gaussian_kde.integrate_gaussian(self,mean,cov)
scipy.stats.gaussian_kde.integrate_kde(self,other)
scipy.stats.gaussian_kde.resample(self,size=None)
scipy.stats.gaussian_kde.scotts_factor(self)
scipy.stats.gaussian_kde.set_bandwidth(self,bw_method=None)
scipy.stats.gaussian_kde.silverman_factor(self)
scipy.stats.kde.gaussian_kde(self,dataset,bw_method=None)
scipy.stats.kde.gaussian_kde.__init__(self,dataset,bw_method=None)
scipy.stats.kde.gaussian_kde._compute_covariance(self)
scipy.stats.kde.gaussian_kde.evaluate(self,points)
scipy.stats.kde.gaussian_kde.integrate_box(self,low_bounds,high_bounds,maxpts=None)
scipy.stats.kde.gaussian_kde.integrate_box_1d(self,low,high)
scipy.stats.kde.gaussian_kde.integrate_gaussian(self,mean,cov)
scipy.stats.kde.gaussian_kde.integrate_kde(self,other)
scipy.stats.kde.gaussian_kde.resample(self,size=None)
scipy.stats.kde.gaussian_kde.scotts_factor(self)
scipy.stats.kde.gaussian_kde.set_bandwidth(self,bw_method=None)
scipy.stats.kde.gaussian_kde.silverman_factor(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/_binned_statistic.py----------------------------------------
A:scipy.stats._binned_statistic.N->len(bins)
A:scipy.stats._binned_statistic.(medians, edges, xy)->binned_statistic_dd([x, y], values, statistic, bins, range)
A:scipy.stats._binned_statistic.xedgesyedges->numpy.asarray(bins, float)
A:scipy.stats._binned_statistic.nbin->numpy.asarray(nbin)
A:scipy.stats._binned_statistic.M->len(bins)
A:scipy.stats._binned_statistic.smin->numpy.zeros(D)
A:scipy.stats._binned_statistic.smax->numpy.zeros(D)
A:scipy.stats._binned_statistic.edges[i]->numpy.asarray(bins[i], float)
A:scipy.stats._binned_statistic.dedges[i]->numpy.diff(edges[i])
A:scipy.stats._binned_statistic.Ncount[i]->numpy.digitize(sample[:, i], edges[i])
A:scipy.stats._binned_statistic.ni->numpy.asarray(nbin).argsort()
A:scipy.stats._binned_statistic.xy->numpy.zeros(N, int)
A:scipy.stats._binned_statistic.result->result.swapaxes(i, j).swapaxes(i, j)
A:scipy.stats._binned_statistic.flatcount->numpy.bincount(xy, None)
A:scipy.stats._binned_statistic.flatsum->numpy.bincount(xy, values)
A:scipy.stats._binned_statistic.a->numpy.arange(len(flatsum))
A:scipy.stats._binned_statistic.flatsum2->numpy.bincount(xy, values ** 2)
A:scipy.stats._binned_statistic.result[a]->numpy.sqrt(flatsum2[a] / flatcount[a] - (flatsum[a] / flatcount[a]) ** 2)
A:scipy.stats._binned_statistic.result[i]->statistic(values[xy == i])
A:scipy.stats._binned_statistic.old->numpy.seterr(invalid='ignore')
A:scipy.stats._binned_statistic.null->statistic([])
scipy.stats._binned_statistic.binned_statistic(x,values,statistic='mean',bins=10,range=None)
scipy.stats._binned_statistic.binned_statistic_2d(x,y,values,statistic='mean',bins=10,range=None)
scipy.stats._binned_statistic.binned_statistic_dd(sample,values,statistic='mean',bins=10,range=None)
scipy.stats.binned_statistic(x,values,statistic='mean',bins=10,range=None)
scipy.stats.binned_statistic_2d(x,y,values,statistic='mean',bins=10,range=None)
scipy.stats.binned_statistic_dd(sample,values,statistic='mean',bins=10,range=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/stats.py----------------------------------------
A:scipy.stats.stats.(v1, v2, n)->futil.dfreps(arr)
A:scipy.stats.stats.(x, axis)->_chk_asarray(x, axis)
A:scipy.stats.stats.x->zeros((n, len(p)))
A:scipy.stats.stats.log_a->numpy.log(a)
A:scipy.stats.stats.a->asarray(a)
A:scipy.stats.stats.size->asarray(a).count(axis)
A:scipy.stats.stats.n->len(para)
A:scipy.stats.stats.amin->asarray(a).min()
A:scipy.stats.stats.amax->asarray(a).max()
A:scipy.stats.stats.(hist, bins)->numpy.histogram(a, numbins, range=(amin - binsize * 0.5, amax + binsize * 0.5))
A:scipy.stats.stats.cumhist->numpy.cumsum(h * 1, axis=0)
A:scipy.stats.stats.cfbin->numpy.searchsorted(cumhist, n / 2.0)
A:scipy.stats.stats.(a, axis)->_chk_asarray(a, axis)
A:scipy.stats.stats.scores->numpy.sort(scores)
A:scipy.stats.stats.testshape->list(a.shape)
A:scipy.stats.stats.oldmostfreq->numpy.zeros(testshape)
A:scipy.stats.stats.oldcounts->numpy.maximum(counts, oldcounts)
A:scipy.stats.stats.counts->numpy.expand_dims(np.sum(template, axis), axis)
A:scipy.stats.stats.mostfrequent->numpy.where(counts > oldcounts, score, oldmostfreq)
A:scipy.stats.stats.am->mask_to_limits(a.ravel(), limits, inclusive)
A:scipy.stats.stats.m->asarray(a).mean(axis)
A:scipy.stats.stats.s->numpy.sum(a, axis)
A:scipy.stats.stats.sd->numpy.sqrt(T * n1 * n2 * (n1 + n2 + 1) / 12.0)
A:scipy.stats.stats.shape->list(a.shape)
A:scipy.stats.stats.mn->numpy.expand_dims(np.mean(a, axis), axis)
A:scipy.stats.stats.m2->numpy.extract(can_correct, m2)
A:scipy.stats.stats.m3->numpy.extract(can_correct, m3)
A:scipy.stats.stats.vals->numpy.sort(rvs)
A:scipy.stats.stats.m4->numpy.extract(can_correct, m4)
A:scipy.stats.stats.olderr->numpy.seterr(divide='ignore')
A:scipy.stats.stats.v->numpy.var(d, axis, ddof=1)
A:scipy.stats.stats.sk->skew(a, axis)
A:scipy.stats.stats.kurt->kurtosis(a, axis)
A:scipy.stats.stats.b2->kurtosis(a, axis, fisher=False)
A:scipy.stats.stats.alpha->math.sqrt(2.0 / (W2 - 1))
A:scipy.stats.stats.y->asarray(y)
A:scipy.stats.stats.denom->numpy.sqrt(v / float(n))
A:scipy.stats.stats.term2->numpy.where(denom < 0, term1, np.power((1 - 2.0 / A) / denom, 1 / 3.0))
A:scipy.stats.stats.Z->numpy.where(denom == 99, 0, Z)
A:scipy.stats.stats.(s, p)->skewtest(a, axis)
A:scipy.stats.stats.(k, p)->kurtosistest(a, axis)
A:scipy.stats.stats.mu->zeros((n, len(p))).mean()
A:scipy.stats.stats.freq->zeros(len(scores))
A:scipy.stats.stats.freq[i]->numpy.add.reduce(np.equal(a, scores[i]))
A:scipy.stats.stats.sorted->numpy.sort(a, axis=axis)
A:scipy.stats.stats.idx->int(np.ceil(idx))
A:scipy.stats.stats.i->int(idx)
A:scipy.stats.stats.indexer[axis]->slice(i, i + 2)
A:scipy.stats.stats.weights->array([j - idx, idx - i], float)
A:scipy.stats.stats.sumval->array([j - idx, idx - i], float).sum()
A:scipy.stats.stats.a_len->numpy.array(list(range(len(a))))
A:scipy.stats.stats.data_min->asarray(a).min()
A:scipy.stats.stats.data_max->asarray(a).max()
A:scipy.stats.stats.(hist, bin_edges)->numpy.histogram(a, bins=numbins, range=defaultlimits, weights=weights)
A:scipy.stats.stats.hist->numpy.array(hist, dtype=float)
A:scipy.stats.stats.extrapoints->len([v for v in a if defaultlimits[0] > v or v > defaultlimits[1]])
A:scipy.stats.stats.(h, l, b, e)->histogram(a, numbins, defaultreallimits, weights=weights)
A:scipy.stats.stats.h->numpy.array(h / float(np.array(a).shape[0]))
A:scipy.stats.stats.k->len(args)
A:scipy.stats.stats.n[i]->float(len(nargs[i]))
A:scipy.stats.stats.v[i]->numpy.var(nargs[i], ddof=1)
A:scipy.stats.stats.m[i]->numpy.mean(nargs[i])
A:scipy.stats.stats.mns->compare.mean(axis=axis)
A:scipy.stats.stats.sstd->compare.std(axis=axis, ddof=ddof)
A:scipy.stats.stats.(scores, compare)->map(np.asanyarray, [scores, compare])
A:scipy.stats.stats.mask->zeros(a.shape, dtype=bool)
A:scipy.stats.stats.c->array([1, -1])
A:scipy.stats.stats.c_std->array([1, -1]).std()
A:scipy.stats.stats.c_mean->array([1, -1]).mean()
A:scipy.stats.stats.lowercut->int(proportiontocut * len(a))
A:scipy.stats.stats.uppercut->len(a)
A:scipy.stats.stats.newa->trimboth(np.sort(a), proportiontocut)
A:scipy.stats.stats.args->list(map(np.asarray, args))
A:scipy.stats.stats.na->len(args)
A:scipy.stats.stats.alldata->numpy.concatenate(args)
A:scipy.stats.stats.bign->len(alldata)
A:scipy.stats.stats.prob->ksprob((en + 0.12 + 0.11 / en) * d)
A:scipy.stats.stats.mx->zeros((n, len(p))).mean()
A:scipy.stats.stats.my->asarray(y).mean()
A:scipy.stats.stats.r->max(min(r, 1.0), -1.0)
A:scipy.stats.stats.pguess->hypergeom.pmf(guess, n1 + n2, n1, n)
A:scipy.stats.stats.pvalue->hypergeom.cdf(c[0, 1], n1 + n2, n1, c[0, 1] + c[1, 1])
A:scipy.stats.stats.mode->int(float((n + 1) * (n1 + 1)) / (n1 + n2 + 2))
A:scipy.stats.stats.pexact->hypergeom.pmf(c[0, 0], n1 + n2, n1, n)
A:scipy.stats.stats.pmode->hypergeom.pmf(mode, n1 + n2, n1, n)
A:scipy.stats.stats.plower->hypergeom.cdf(c[0, 0], n1 + n2, n1, n)
A:scipy.stats.stats.guess->binary_search(n, n1, n2, 'lower')
A:scipy.stats.stats.pupper->hypergeom.sf(c[0, 0] - 1, n1 + n2, n1, n)
A:scipy.stats.stats.(a, axisout)->_chk_asarray(a, axis)
A:scipy.stats.stats.ar->numpy.apply_along_axis(rankdata, axisout, a)
A:scipy.stats.stats.(b, axisout)->_chk_asarray(b, axis)
A:scipy.stats.stats.br->numpy.apply_along_axis(rankdata, axisout, b)
A:scipy.stats.stats.rs->numpy.corrcoef(ar, br, rowvar=axisout)
A:scipy.stats.stats.y0m->y0.mean()
A:scipy.stats.stats.y1m->y1.mean()
A:scipy.stats.stats.temp->list(range(n))
A:scipy.stats.stats.perm->list(range(n))
A:scipy.stats.stats.exchanges->mergesort(0, n)
A:scipy.stats.stats.xmean->numpy.mean(x, None)
A:scipy.stats.stats.ymean->numpy.mean(y, None)
A:scipy.stats.stats.r_den->numpy.sqrt(ssxm * ssym)
A:scipy.stats.stats.sterrest->numpy.sqrt((1 - r * r) * ssym / ssxm / df)
A:scipy.stats.stats.t->numpy.divide(dm, denom)
A:scipy.stats.stats.(t, prob)->_ttest_finish(df, t)
A:scipy.stats.stats.(a, b, axis)->_chk2_asarray(a, b, axis)
A:scipy.stats.stats.v1->numpy.var(a, axis, ddof=1)
A:scipy.stats.stats.v2->numpy.var(b, axis, ddof=1)
A:scipy.stats.stats.df->float(n - 1)
A:scipy.stats.stats.d->numpy.max(np.absolute(cdf1 - cdf2))
A:scipy.stats.stats.dm->numpy.mean(d, axis)
A:scipy.stats.stats.N->len(vals)
A:scipy.stats.stats.cdfvals->cdf(vals, *args)
A:scipy.stats.stats.Dplus->(np.arange(1.0, N + 1) / N - cdfvals).max()
A:scipy.stats.stats.Dmin->(cdfvals - np.arange(0.0, N) / N).max()
A:scipy.stats.stats.D->numpy.max([Dplus, Dmin])
A:scipy.stats.stats.pval_two->distributions.kstwobign.sf(D * np.sqrt(N))
A:scipy.stats.stats.f_obs->asarray(f_obs)
A:scipy.stats.stats.f_exp->f_exp.astype(float).astype(float)
A:scipy.stats.stats.chisq->numpy.add.reduce((f_obs - f_exp) ** 2 / f_exp)
A:scipy.stats.stats.(data1, data2)->map(asarray, (data1, data2))
A:scipy.stats.stats.n1->len(x)
A:scipy.stats.stats.n2->len(y)
A:scipy.stats.stats.data1->numpy.sort(data1)
A:scipy.stats.stats.data2->numpy.sort(data2)
A:scipy.stats.stats.data_all->numpy.concatenate([data1, data2])
A:scipy.stats.stats.en->numpy.sqrt(n1 * n2 / float(n1 + n2))
A:scipy.stats.stats.ranked->rankdata(alldata)
A:scipy.stats.stats.bigu->max(u1, u2)
A:scipy.stats.stats.smallu->min(u1, u2)
A:scipy.stats.stats.T->tiecorrect(ranked)
A:scipy.stats.stats.z->abs((bigu - n1 * n2 / 2.0) / sd)
A:scipy.stats.stats.(x, y)->map(np.asarray, (x, y))
A:scipy.stats.stats.j->numpy.insert(np.cumsum(n), 0, 0)
A:scipy.stats.stats.totaln->numpy.sum(n)
A:scipy.stats.stats.data->data.astype(float).astype(float)
A:scipy.stats.stats.data[i]->rankdata(data[i])
A:scipy.stats.stats.(replist, repnum)->find_repeats(array(data[i]))
A:scipy.stats.stats.ssbn->pysum(pysum(data) ** 2)
A:scipy.stats.stats.p->_support.unique(para)
A:scipy.stats.stats.b->dot(dot(linalg.inv(dot(np.transpose(x), x)), np.transpose(x)), data)
A:scipy.stats.stats.fact->numpy.sum(1.0 / np.sum(x, 0), axis=0)
A:scipy.stats.stats.probs->betai(0.5 * df, 0.5, float(df) / (df + t * t))
A:scipy.stats.stats.ER->array([[ER]])
A:scipy.stats.stats.EF->array([[EF]])
A:scipy.stats.stats.q->numpy.sqrt(((a - 1) ** 2 * (b - 1) ** 2 - 2) / ((a - 1) ** 2 + (b - 1) ** 2 - 5))
A:scipy.stats.stats.it->numpy.argsort(a)
scipy._compute_qth_percentile(sorted,per,interpolation_method,axis)
scipy._nanmedian(arr1d)
scipy._ttest_finish(df,t)
scipy.betai(a,b,x)
scipy.chisqprob(chisq,df)
scipy.chisquare(f_obs,f_exp=None,ddof=0)
scipy.cmedian(a,numbins=1000)
scipy.cumfreq(a,numbins=10,defaultreallimits=None,weights=None)
scipy.describe(a,axis=0)
scipy.f_oneway(*args)
scipy.f_value(ER,EF,dfR,dfF)
scipy.f_value_multivariate(ER,EF,dfnum,dfden)
scipy.f_value_wilks_lambda(ER,EF,dfnum,dfden,a,b)
scipy.fastsort(a)
scipy.find_repeats(arr)
scipy.fisher_exact(table,alternative='two-sided')
scipy.friedmanchisquare(*args)
scipy.glm(data,para)
scipy.gmean(a,axis=0,dtype=None)
scipy.histogram(a,numbins=10,defaultlimits=None,weights=None,printextras=False)
scipy.histogram2(a,bins)
scipy.hmean(a,axis=0,dtype=None)
scipy.itemfreq(a)
scipy.jarque_bera(x)
scipy.kendalltau(x,y,initial_lexsort=True)
scipy.kruskal(*args)
scipy.ks_2samp(data1,data2)
scipy.kstest(rvs,cdf,args=(),N=20,alternative='two-sided',mode='approx',**kwds)
scipy.kurtosis(a,axis=0,fisher=True,bias=True)
scipy.kurtosistest(a,axis=0)
scipy.linregress(x,y=None)
scipy.mannwhitneyu(x,y,use_continuity=True)
scipy.mask_to_limits(a,limits,inclusive)
scipy.masked_var(am)
scipy.mode(a,axis=0)
scipy.moment(a,moment=1,axis=0)
scipy.nanmean(x,axis=0)
scipy.nanmedian(x,axis=0)
scipy.nanstd(x,axis=0,bias=False)
scipy.normaltest(a,axis=0)
scipy.obrientransform(*args)
scipy.pearsonr(x,y)
scipy.percentileofscore(a,score,kind='rank')
scipy.pointbiserialr(x,y)
scipy.ranksums(x,y)
scipy.relfreq(a,numbins=10,defaultreallimits=None,weights=None)
scipy.scoreatpercentile(a,per,limit=(),interpolation_method='fraction',axis=None)
scipy.sem(a,axis=0,ddof=1)
scipy.sigmaclip(a,low=4.0,high=4.0)
scipy.signaltonoise(a,axis=0,ddof=0)
scipy.skew(a,axis=0,bias=True)
scipy.skewtest(a,axis=0)
scipy.spearmanr(a,b=None,axis=0)
scipy.square_of_sums(a,axis=0)
scipy.ss(a,axis=0)
scipy.stats.stats._compute_qth_percentile(sorted,per,interpolation_method,axis)
scipy.stats.stats._nanmedian(arr1d)
scipy.stats.stats._ttest_finish(df,t)
scipy.stats.stats.betai(a,b,x)
scipy.stats.stats.chisqprob(chisq,df)
scipy.stats.stats.chisquare(f_obs,f_exp=None,ddof=0)
scipy.stats.stats.cmedian(a,numbins=1000)
scipy.stats.stats.cumfreq(a,numbins=10,defaultreallimits=None,weights=None)
scipy.stats.stats.describe(a,axis=0)
scipy.stats.stats.f_oneway(*args)
scipy.stats.stats.f_value(ER,EF,dfR,dfF)
scipy.stats.stats.f_value_multivariate(ER,EF,dfnum,dfden)
scipy.stats.stats.f_value_wilks_lambda(ER,EF,dfnum,dfden,a,b)
scipy.stats.stats.fastsort(a)
scipy.stats.stats.find_repeats(arr)
scipy.stats.stats.fisher_exact(table,alternative='two-sided')
scipy.stats.stats.friedmanchisquare(*args)
scipy.stats.stats.glm(data,para)
scipy.stats.stats.gmean(a,axis=0,dtype=None)
scipy.stats.stats.histogram(a,numbins=10,defaultlimits=None,weights=None,printextras=False)
scipy.stats.stats.histogram2(a,bins)
scipy.stats.stats.hmean(a,axis=0,dtype=None)
scipy.stats.stats.itemfreq(a)
scipy.stats.stats.jarque_bera(x)
scipy.stats.stats.kendalltau(x,y,initial_lexsort=True)
scipy.stats.stats.kruskal(*args)
scipy.stats.stats.ks_2samp(data1,data2)
scipy.stats.stats.kstest(rvs,cdf,args=(),N=20,alternative='two-sided',mode='approx',**kwds)
scipy.stats.stats.kurtosis(a,axis=0,fisher=True,bias=True)
scipy.stats.stats.kurtosistest(a,axis=0)
scipy.stats.stats.linregress(x,y=None)
scipy.stats.stats.mannwhitneyu(x,y,use_continuity=True)
scipy.stats.stats.mask_to_limits(a,limits,inclusive)
scipy.stats.stats.masked_var(am)
scipy.stats.stats.mode(a,axis=0)
scipy.stats.stats.moment(a,moment=1,axis=0)
scipy.stats.stats.nanmean(x,axis=0)
scipy.stats.stats.nanmedian(x,axis=0)
scipy.stats.stats.nanstd(x,axis=0,bias=False)
scipy.stats.stats.normaltest(a,axis=0)
scipy.stats.stats.obrientransform(*args)
scipy.stats.stats.pearsonr(x,y)
scipy.stats.stats.percentileofscore(a,score,kind='rank')
scipy.stats.stats.pointbiserialr(x,y)
scipy.stats.stats.ranksums(x,y)
scipy.stats.stats.relfreq(a,numbins=10,defaultreallimits=None,weights=None)
scipy.stats.stats.scoreatpercentile(a,per,limit=(),interpolation_method='fraction',axis=None)
scipy.stats.stats.sem(a,axis=0,ddof=1)
scipy.stats.stats.sigmaclip(a,low=4.0,high=4.0)
scipy.stats.stats.signaltonoise(a,axis=0,ddof=0)
scipy.stats.stats.skew(a,axis=0,bias=True)
scipy.stats.stats.skewtest(a,axis=0)
scipy.stats.stats.spearmanr(a,b=None,axis=0)
scipy.stats.stats.square_of_sums(a,axis=0)
scipy.stats.stats.ss(a,axis=0)
scipy.stats.stats.threshold(a,threshmin=None,threshmax=None,newval=0)
scipy.stats.stats.tmax(a,upperlimit,axis=0,inclusive=True)
scipy.stats.stats.tmean(a,limits=None,inclusive=(True,True))
scipy.stats.stats.tmin(a,lowerlimit=None,axis=0,inclusive=True)
scipy.stats.stats.trim1(a,proportiontocut,tail='right')
scipy.stats.stats.trim_mean(a,proportiontocut)
scipy.stats.stats.trimboth(a,proportiontocut)
scipy.stats.stats.tsem(a,limits=None,inclusive=(True,True))
scipy.stats.stats.tstd(a,limits=None,inclusive=(True,True))
scipy.stats.stats.ttest_1samp(a,popmean,axis=0)
scipy.stats.stats.ttest_ind(a,b,axis=0,equal_var=True)
scipy.stats.stats.ttest_rel(a,b,axis=0)
scipy.stats.stats.tvar(a,limits=None,inclusive=(True,True))
scipy.stats.stats.variation(a,axis=0)
scipy.stats.stats.zmap(scores,compare,axis=0,ddof=0)
scipy.stats.stats.zscore(a,axis=0,ddof=0)
scipy.threshold(a,threshmin=None,threshmax=None,newval=0)
scipy.tmax(a,upperlimit,axis=0,inclusive=True)
scipy.tmean(a,limits=None,inclusive=(True,True))
scipy.tmin(a,lowerlimit=None,axis=0,inclusive=True)
scipy.trim1(a,proportiontocut,tail='right')
scipy.trim_mean(a,proportiontocut)
scipy.trimboth(a,proportiontocut)
scipy.tsem(a,limits=None,inclusive=(True,True))
scipy.tstd(a,limits=None,inclusive=(True,True))
scipy.ttest_1samp(a,popmean,axis=0)
scipy.ttest_ind(a,b,axis=0,equal_var=True)
scipy.ttest_rel(a,b,axis=0)
scipy.tvar(a,limits=None,inclusive=(True,True))
scipy.variation(a,axis=0)
scipy.zmap(scores,compare,axis=0,ddof=0)
scipy.zscore(a,axis=0,ddof=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/_support.py----------------------------------------
A:scipy.stats._support.source->numpy.concatenate((source, addon), 1)
A:scipy.stats._support.addon->numpy.resize(addon, [source.shape[0], addon.shape[1]])
A:scipy.stats._support.inarray->asarray(inarray)
A:scipy.stats._support.uniques->unique(values).tolist()
A:scipy.stats._support.test->numpy.sum(abs(np.array(list(map(cmp, item, unq)))), axis=0)
A:scipy.stats._support.cols->numpy.take(a, indices, axis)
A:scipy.stats._support.lines->numpy.array(lines, 'O')
A:scipy.stats._support.a->numpy.asarray(a)
A:scipy.stats._support.critval->str(valuelist[i])
A:scipy.stats._support.avgcol->colex(tmprows, col)
A:scipy.stats._support.means->cfcn(avgcol)
A:scipy.stats._support.values->colex(a, keepcols)
A:scipy.stats._support.tmprows->linexand(a, keepcols, item)
A:scipy.stats._support.new_a->numpy.array(newlist, 'O')
A:scipy.stats._support.b->numpy.asarray(b)
A:scipy.stats._support.(a, axis)->_chk_asarray(a, axis)
scipy._support._chk2_asarray(a,b,axis)
scipy._support._chk_asarray(a,axis)
scipy._support.abut(source,*args)
scipy._support.adm(a,criterion)
scipy._support.colex(a,indices,axis=1)
scipy._support.collapse(a,keepcols,collapsecols,stderr=0,ns=0,cfcn=None)
scipy._support.compute_stderr(a,axis=0,ddof=1)
scipy._support.linexand(a,columnlist,valuelist)
scipy._support.unique(inarray)
scipy.stats._support._chk2_asarray(a,b,axis)
scipy.stats._support._chk_asarray(a,axis)
scipy.stats._support.abut(source,*args)
scipy.stats._support.adm(a,criterion)
scipy.stats._support.colex(a,indices,axis=1)
scipy.stats._support.collapse(a,keepcols,collapsecols,stderr=0,ns=0,cfcn=None)
scipy.stats._support.compute_stderr(a,axis=0,ddof=1)
scipy.stats._support.linexand(a,columnlist,valuelist)
scipy.stats._support.unique(inarray)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/setupscons.py----------------------------------------
A:scipy.stats.setupscons.config->Configuration('stats', parent_package, top_path)
scipy.setupscons.configuration(parent_package='',top_path=None)
scipy.stats.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/vonmises.py----------------------------------------
A:scipy.stats.vonmises.x->float(x)
A:scipy.stats.vonmises.s->numpy.sin(x)
A:scipy.stats.vonmises.c->numpy.cos(x)
A:scipy.stats.vonmises.sn->numpy.sin(p * x)
A:scipy.stats.vonmises.cn->numpy.cos(p * x)
A:scipy.stats.vonmises.k->float(k)
A:scipy.stats.vonmises.p->int(np.ceil(a[0] + a[1] * k - a[2] / (k + a[3])))
A:scipy.stats.vonmises.F->von_mises_cdf_normalapprox(k, x, C1)
scipy.stats.vonmises.von_mises_cdf(k,x)
scipy.stats.vonmises.von_mises_cdf_normalapprox(k,x,C1)
scipy.stats.vonmises.von_mises_cdf_series(k,x,p)
scipy.vonmises.von_mises_cdf(k,x)
scipy.vonmises.von_mises_cdf_normalapprox(k,x,C1)
scipy.vonmises.von_mises_cdf_series(k,x,p)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/contingency.py----------------------------------------
A:scipy.stats.contingency.ranged->list(range(a.ndim))
A:scipy.stats.contingency.marg->numpy.apply_over_axes(np.sum, a, [j for j in ranged if j != k])
A:scipy.stats.contingency.observed->numpy.asarray(observed)
A:scipy.stats.contingency.margsums->margins(observed)
A:scipy.stats.contingency.expected->expected_freq(observed)
A:scipy.stats.contingency.zeropos->list(np.where(expected == 0)[0])
A:scipy.stats.contingency.chi2->((observed - expected) ** 2 / expected).sum()
A:scipy.stats.contingency.p->scipy.special.chdtrc(dof, chi2)
scipy.contingency.expected_freq(observed)
scipy.contingency.margins(a)
scipy.stats.chi2_contingency(observed,correction=True)
scipy.stats.contingency.chi2_contingency(observed,correction=True)
scipy.stats.contingency.expected_freq(observed)
scipy.stats.contingency.margins(a)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/setup.py----------------------------------------
A:scipy.stats.setup.config->Configuration('stats', parent_package, top_path)
scipy.setup.configuration(parent_package='',top_path=None)
scipy.stats.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/mstats.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/mstats_extras.py----------------------------------------
A:scipy.stats.mstats_extras.xsorted->numpy.sort(data.compressed())
A:scipy.stats.mstats_extras.hd->numpy.empty((2, len(prob)), float_)
A:scipy.stats.mstats_extras._w->betacdf(vv, (n + 1) * p, (n + 1) * (1 - p))
A:scipy.stats.mstats_extras.hd_mean->numpy.dot(w, xsorted)
A:scipy.stats.mstats_extras.hd[1, i]->numpy.dot(w, (xsorted - hd_mean) ** 2)
A:scipy.stats.mstats_extras.data->numpy.ma.array(data, copy=False)
A:scipy.stats.mstats_extras.p->numpy.array(prob, copy=False, ndmin=1)
A:scipy.stats.mstats_extras.result->numpy.ma.apply_along_axis(_cihs_1D, axis, data, alpha)
A:scipy.stats.mstats_extras.n->numpy.ma.array(data, copy=False).count()
A:scipy.stats.mstats_extras.hdsd->numpy.empty(len(prob), float_)
A:scipy.stats.mstats_extras.mx_->numpy.fromiter([np.dot(w, xsorted[np.r_[list(range(0, k)), list(range(k + 1, n))].astype(int_)]) for k in range(n)], dtype=float_)
A:scipy.stats.mstats_extras.trimmed->mstats.trimr(data, limits=limits, inclusive=inclusive, axis=axis)
A:scipy.stats.mstats_extras.tmean->mstats.trimr(data, limits=limits, inclusive=inclusive, axis=axis).mean(axis)
A:scipy.stats.mstats_extras.tstde->mstats.trimmed_stde(data, limits=limits, inclusive=inclusive, axis=axis)
A:scipy.stats.mstats_extras.tppf->scipy.stats.distributions.t.ppf(1 - alpha / 2.0, df)
A:scipy.stats.mstats_extras.prob->(np.array(p) * n + 0.5).astype(int_)
A:scipy.stats.mstats_extras.mj->numpy.empty(len(prob), float_)
A:scipy.stats.mstats_extras.C1->numpy.dot(W, data)
A:scipy.stats.mstats_extras.C2->numpy.dot(W, data ** 2)
A:scipy.stats.mstats_extras.mj[i]->numpy.sqrt(C2 - C1 ** 2)
A:scipy.stats.mstats_extras.alpha->min(alpha, 1 - alpha)
A:scipy.stats.mstats_extras.z->scipy.stats.distributions.norm.ppf(1 - alpha / 2.0)
A:scipy.stats.mstats_extras.xq->mstats.mquantiles(data, prob, alphap=0, betap=0, axis=axis)
A:scipy.stats.mstats_extras.smj->mjci(data, prob, axis=axis)
A:scipy.stats.mstats_extras.k->int(binom._ppf(alpha / 2.0, n, 0.5))
A:scipy.stats.mstats_extras.x->numpy.ma.array(data, copy=False).compressed()
A:scipy.stats.mstats_extras.(j, h)->divmod(n / 4.0 + 5 / 12.0, 1)
A:scipy.stats.mstats_extras.j->int(j)
A:scipy.stats.mstats_extras.points->numpy.array(points, copy=False, ndmin=1)
A:scipy.stats.mstats_extras.r->idealfourths(data, axis=None)
A:scipy.stats.mstats_extras.nhi->(data[:, None] <= points[None, :] + h).sum(0)
A:scipy.stats.mstats_extras.nlo->(data[:, None] < points[None, :] - h).sum(0)
scipy.mstats_extras.compare_medians_ms(group_1,group_2,axis=None)
scipy.mstats_extras.hdmedian(data,axis=-1,var=False)
scipy.mstats_extras.hdquantiles(data,prob=list([0.25,0.5,0.75]),axis=None,var=False)
scipy.mstats_extras.hdquantiles_sd(data,prob=list([0.25,0.5,0.75]),axis=None)
scipy.mstats_extras.idealfourths(data,axis=None)
scipy.mstats_extras.median_cihs(data,alpha=0.05,axis=None)
scipy.mstats_extras.mjci(data,prob=[0.25,0.5,0.75],axis=None)
scipy.mstats_extras.mquantiles_cimj(data,prob=[0.25,0.5,0.75],alpha=0.05,axis=None)
scipy.mstats_extras.rsh(data,points=None)
scipy.mstats_extras.trimmed_mean_ci(data,limits=(0.2,0.2),inclusive=(True,True),alpha=0.05,axis=None)
scipy.stats.mstats_extras.compare_medians_ms(group_1,group_2,axis=None)
scipy.stats.mstats_extras.hdmedian(data,axis=-1,var=False)
scipy.stats.mstats_extras.hdquantiles(data,prob=list([0.25,0.5,0.75]),axis=None,var=False)
scipy.stats.mstats_extras.hdquantiles_sd(data,prob=list([0.25,0.5,0.75]),axis=None)
scipy.stats.mstats_extras.idealfourths(data,axis=None)
scipy.stats.mstats_extras.median_cihs(data,alpha=0.05,axis=None)
scipy.stats.mstats_extras.mjci(data,prob=[0.25,0.5,0.75],axis=None)
scipy.stats.mstats_extras.mquantiles_cimj(data,prob=[0.25,0.5,0.75],alpha=0.05,axis=None)
scipy.stats.mstats_extras.rsh(data,points=None)
scipy.stats.mstats_extras.trimmed_mean_ci(data,limits=(0.2,0.2),inclusive=(True,True),alpha=0.05,axis=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/morestats.py----------------------------------------
A:scipy.stats.morestats.res->numpy.mean(exp(1j * ang), axis=axis)
A:scipy.stats.morestats.x->atleast_1d(x).astype(np.integer)
A:scipy.stats.morestats.n->len(x)
A:scipy.stats.morestats.xbar->numpy.mean(x, axis=0)
A:scipy.stats.morestats.C->atleast_1d(x).astype(np.integer).var()
A:scipy.stats.morestats.mdist->distributions.t(nm1, loc=xbar, scale=math.sqrt(C / nm1))
A:scipy.stats.morestats.sdist->distributions.gengamma(val, -2, scale=math.sqrt(fac))
A:scipy.stats.morestats.vdist->distributions.invgamma(val, scale=fac)
A:scipy.stats.morestats.S->sum((2 * i - 1.0) / N * (log(z) + log(1 - z[::-1])), axis=0)
A:scipy.stats.morestats.data->ravel(data)
A:scipy.stats.morestats.N->sum(Ni, axis=0)
A:scipy.stats.morestats.S[k]->sum(data ** k, axis=0)
A:scipy.stats.morestats.k2->kstat(data, n=2)
A:scipy.stats.morestats.k4->kstat(data, n=4)
A:scipy.stats.morestats.i->numpy.arange(np.floor(p * n))
A:scipy.stats.morestats.ppf_func->eval('distributions.%s.ppf' % dist)
A:scipy.stats.morestats.sparams->tuple(sparams)
A:scipy.stats.morestats.osm->ppf_func(Ui, *sparams)
A:scipy.stats.morestats.osr->sort(x)
A:scipy.stats.morestats.(slope, intercept, r, prob, sterrest)->stats.linregress(osm, osr)
A:scipy.stats.morestats.xmin->amin(osm)
A:scipy.stats.morestats.xmax->amax(osm)
A:scipy.stats.morestats.ymin->amin(x)
A:scipy.stats.morestats.ymax->amax(x)
A:scipy.stats.morestats.xvals->distributions.norm.ppf(Ui)
A:scipy.stats.morestats.(r, prob)->stats.pearsonr(xvals, yvals)
A:scipy.stats.morestats.(r1, r2)->probplot(z, dist='norm', fit=1)
A:scipy.stats.morestats.y->numpy.sum(distributions.binom.pmf(i, n, p) <= d * rerr, axis=0)
A:scipy.stats.morestats.my->numpy.mean(y, axis=0)
A:scipy.stats.morestats.lmplus->scipy.optimize.brentq(rootfunc, lmax, newlm, args=(x, target))
A:scipy.stats.morestats.lmminus->scipy.optimize.brentq(rootfunc, newlm, lmax, args=(x, target))
A:scipy.stats.morestats.lmax->scipy.optimize.brent(tempfunc, brack=(-2.0, 2.0), args=(x,))
A:scipy.stats.morestats.interval->_boxcox_conf_interval(x, lmax, alpha)
A:scipy.stats.morestats.yvals->sort(y)
A:scipy.stats.morestats.z->distributions.gumbel_l.cdf(w)
A:scipy.stats.morestats.a->distributions.norm.ppf(ranks / (2 * (Ntot + 1.0)) + 0.5)
A:scipy.stats.morestats.(a, w, pw, ifault)->statlib.swilk(y, a[:N // 2], init)
A:scipy.stats.morestats._Avals_norm->array([0.576, 0.656, 0.787, 0.918, 1.092])
A:scipy.stats.morestats._Avals_expon->array([0.922, 1.078, 1.341, 1.606, 1.957])
A:scipy.stats.morestats._Avals_gumbel->array([0.474, 0.637, 0.757, 0.877, 1.038])
A:scipy.stats.morestats._Avals_logistic->array([0.426, 0.563, 0.66, 0.769, 0.906, 1.01])
A:scipy.stats.morestats.s->numpy.std(x, ddof=1, axis=0)
A:scipy.stats.morestats.sig->sqrt(sigsq)
A:scipy.stats.morestats.critical->around(_Avals_gumbel / (1.0 + 0.2 / sqrt(N)), 3)
A:scipy.stats.morestats.tmp2->exp(tmp)
A:scipy.stats.morestats.sol0->array([xbar, np.std(x, ddof=1, axis=0)])
A:scipy.stats.morestats.sol->scipy.optimize.fsolve(rootfunc, sol0, args=(x, N), xtol=1e-05)
A:scipy.stats.morestats.(xbar, s)->distributions.gumbel_l.fit(x)
A:scipy.stats.morestats.m->len(y)
A:scipy.stats.morestats.rank->stats.rankdata(xy)
A:scipy.stats.morestats.symrank->amin(array((rank, N - rank + 1)), 0)
A:scipy.stats.morestats.AB->sum(symrank[:n], axis=0)
A:scipy.stats.morestats.uxy->unique(xy)
A:scipy.stats.morestats.(astart, a1, ifault)->statlib.gscale(n, m)
A:scipy.stats.morestats.total->sum(a1, axis=0)
A:scipy.stats.morestats.cind->int(ceil(ind))
A:scipy.stats.morestats.find->int(floor(ind))
A:scipy.stats.morestats.fac->sum(symrank ** 2, axis=0)
A:scipy.stats.morestats.k->len(args)
A:scipy.stats.morestats.Ni->array([len(args[i]) for i in range(k)])
A:scipy.stats.morestats.ssq->zeros(k, 'd')
A:scipy.stats.morestats.Ni[j]->len(args[j])
A:scipy.stats.morestats.ssq[j]->numpy.var(args[j], ddof=1)
A:scipy.stats.morestats.Ntot->sum(Ni, axis=0)
A:scipy.stats.morestats.pval->distributions.f.sf(F, k - 1.0, 1.0 / (3 * tmp))
A:scipy.stats.morestats.Yci->asarray([func(args[j]) for j in range(k)])
A:scipy.stats.morestats.args->tuple((stats.trimboth(arg, proportiontocut) for arg in args))
A:scipy.stats.morestats.Yci[j]->func(args[j])
A:scipy.stats.morestats.Zij[i]->abs(asarray(args[i]) - Yci[i])
A:scipy.stats.morestats.Zbari->zeros(k, 'd')
A:scipy.stats.morestats.Zbari[i]->numpy.mean(Zij[i], axis=0)
A:scipy.stats.morestats.d->compress(not_equal(d, 0), d, axis=-1)
A:scipy.stats.morestats.g->unique(r_[0, g, len(x)])
A:scipy.stats.morestats.ranks->stats.rankdata(xy)
A:scipy.stats.morestats.anbar->numpy.mean(a, axis=0)
A:scipy.stats.morestats.varsq->numpy.var(a, axis=0, ddof=1)
A:scipy.stats.morestats.M->sum((Ri - (N + 1.0) / 2) ** 2, axis=0)
A:scipy.stats.morestats.Mi->array([np.mean(args[i], axis=0) for i in range(k)])
A:scipy.stats.morestats.Vi->array([np.var(args[i]) for i in range(k)])
A:scipy.stats.morestats.swi->sum(Wi, axis=0)
A:scipy.stats.morestats.(x, y)->map(asarray, (x, y))
A:scipy.stats.morestats.count->len(d)
A:scipy.stats.morestats.r->stats.rankdata(abs(d))
A:scipy.stats.morestats.r_plus->sum((d > 0) * r, axis=0)
A:scipy.stats.morestats.r_minus->sum((d < 0) * r, axis=0)
A:scipy.stats.morestats.r_zero->sum((d == 0) * r, axis=0)
A:scipy.stats.morestats.T->min(r_plus, r_minus)
A:scipy.stats.morestats.(replist, repnum)->find_repeats(r)
A:scipy.stats.morestats.se->sqrt(se / 24)
A:scipy.stats.morestats.plist[0]->poly1d(1)
A:scipy.stats.morestats.p12->_hermnorm(13)
A:scipy.stats.morestats.R->abs(res)
scipy.stats._apply_func(x,g,func)
scipy.stats._boxcox_conf_interval(x,lmax,alpha)
scipy.stats._hermnorm(N)
scipy.stats.anderson(x,dist='norm')
scipy.stats.ansari(x,y)
scipy.stats.bartlett(*args)
scipy.stats.bayes_mvs(data,alpha=0.9)
scipy.stats.binom_test(x,n=None,p=0.5)
scipy.stats.boxcox(x,lmbda=None,alpha=None)
scipy.stats.boxcox_llf(lmb,data)
scipy.stats.boxcox_normmax(x,brack=(-1.0,1.0))
scipy.stats.boxcox_normplot(x,la,lb,plot=None,N=80)
scipy.stats.circmean(samples,high=2*pi,low=0,axis=None)
scipy.stats.circstd(samples,high=2*pi,low=0,axis=None)
scipy.stats.circvar(samples,high=2*pi,low=0,axis=None)
scipy.stats.fligner(*args,**kwds)
scipy.stats.kstat(data,n=2)
scipy.stats.kstatvar(data,n=2)
scipy.stats.levene(*args,**kwds)
scipy.stats.mood(x,y)
scipy.stats.morestats._apply_func(x,g,func)
scipy.stats.morestats._boxcox_conf_interval(x,lmax,alpha)
scipy.stats.morestats._hermnorm(N)
scipy.stats.morestats.anderson(x,dist='norm')
scipy.stats.morestats.ansari(x,y)
scipy.stats.morestats.bartlett(*args)
scipy.stats.morestats.bayes_mvs(data,alpha=0.9)
scipy.stats.morestats.binom_test(x,n=None,p=0.5)
scipy.stats.morestats.boxcox(x,lmbda=None,alpha=None)
scipy.stats.morestats.boxcox_llf(lmb,data)
scipy.stats.morestats.boxcox_normmax(x,brack=(-1.0,1.0))
scipy.stats.morestats.boxcox_normplot(x,la,lb,plot=None,N=80)
scipy.stats.morestats.circmean(samples,high=2*pi,low=0,axis=None)
scipy.stats.morestats.circstd(samples,high=2*pi,low=0,axis=None)
scipy.stats.morestats.circvar(samples,high=2*pi,low=0,axis=None)
scipy.stats.morestats.fligner(*args,**kwds)
scipy.stats.morestats.kstat(data,n=2)
scipy.stats.morestats.kstatvar(data,n=2)
scipy.stats.morestats.levene(*args,**kwds)
scipy.stats.morestats.mood(x,y)
scipy.stats.morestats.mvsdist(data)
scipy.stats.morestats.oneway(*args,**kwds)
scipy.stats.morestats.pdf_fromgamma(g1,g2,g3=0.0,g4=None)
scipy.stats.morestats.ppcc_max(x,brack=(0.0,1.0),dist='tukeylambda')
scipy.stats.morestats.ppcc_plot(x,a,b,dist='tukeylambda',plot=None,N=80)
scipy.stats.morestats.probplot(x,sparams=(),dist='norm',fit=True,plot=None)
scipy.stats.morestats.shapiro(x,a=None,reta=False)
scipy.stats.morestats.wilcoxon(x,y=None,zero_method='wilcox')
scipy.stats.mvsdist(data)
scipy.stats.oneway(*args,**kwds)
scipy.stats.pdf_fromgamma(g1,g2,g3=0.0,g4=None)
scipy.stats.ppcc_max(x,brack=(0.0,1.0),dist='tukeylambda')
scipy.stats.ppcc_plot(x,a,b,dist='tukeylambda',plot=None,N=80)
scipy.stats.probplot(x,sparams=(),dist='norm',fit=True,plot=None)
scipy.stats.shapiro(x,a=None,reta=False)
scipy.stats.wilcoxon(x,y=None,zero_method='wilcox')


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/mstats_basic.py----------------------------------------
A:scipy.stats.mstats_basic.a->a.ravel().ravel()
A:scipy.stats.mstats_basic.b->numpy.ma.asanyarray(b)
A:scipy.stats.mstats_basic.output->argstoarray(*args)
A:scipy.stats.mstats_basic.n->a.ravel().ravel().count(axis=axis)
A:scipy.stats.mstats_basic.m->argstoarray(*args).astype(float).mean(axis)
A:scipy.stats.mstats_basic.marr->numpy.ma.compressed(arr)
A:scipy.stats.mstats_basic.(v1, v2, n)->futil.dfreps(ma.array(ma.compressed(arr), copy=True))
A:scipy.stats.mstats_basic.nmasked->numpy.ma.getmask(x).sum()
A:scipy.stats.mstats_basic.data->argstoarray(*args).astype(float)
A:scipy.stats.mstats_basic.(ties, counts)->find_repeats(data)
A:scipy.stats.mstats_basic.nties->dict(zip(np.unique(counts), itertools.repeat(1)))
A:scipy.stats.mstats_basic.rk->numpy.empty(data.size, dtype=float)
A:scipy.stats.mstats_basic.idx->a.ravel().ravel().argsort()
A:scipy.stats.mstats_basic.rk[idx[:n]]->numpy.arange(1, n + 1)
A:scipy.stats.mstats_basic.repeats->numpy.array([find_repeats(_) for _ in ranked.T], dtype=object)
A:scipy.stats.mstats_basic.condition->(data == r).filled(False)
A:scipy.stats.mstats_basic.rk[condition]->rk[condition].mean().mean()
A:scipy.stats.mstats_basic.(a, axis)->_chk_asarray(a, axis)
A:scipy.stats.mstats_basic.log_a->numpy.ma.log(a)
A:scipy.stats.mstats_basic.size->a.ravel().ravel().count(axis)
A:scipy.stats.mstats_basic.(rep, cnt)->find_repeats(a)
A:scipy.stats.mstats_basic.newshape->list(a.shape)
A:scipy.stats.mstats_basic.modes->output[tuple(slices)].reshape(newshape)
A:scipy.stats.mstats_basic.counts->output[tuple(slices)].reshape(newshape)
A:scipy.stats.mstats_basic.x->numpy.sort(data.compressed())
A:scipy.stats.mstats_basic.(x, y, n)->_chk_size(x, y)
A:scipy.stats.mstats_basic.r->max(r, -1.0)
A:scipy.stats.mstats_basic.prob->stats.fprob(dfbg, dfwg, f)
A:scipy.stats.mstats_basic.y->numpy.ma.where(y == 0, 1, y)
A:scipy.stats.mstats_basic.rankx->rankdata(x)
A:scipy.stats.mstats_basic.ranky->rankdata(y)
A:scipy.stats.mstats_basic.dsq->numpy.add.reduce((rankx - ranky) ** 2)
A:scipy.stats.mstats_basic.xties->count_tied_groups(x)
A:scipy.stats.mstats_basic.yties->count_tied_groups(y)
A:scipy.stats.mstats_basic.rx->numpy.ma.masked_equal(rankdata(x, use_missing=use_missing), 0)
A:scipy.stats.mstats_basic.ry->numpy.ma.masked_equal(rankdata(y, use_missing=use_missing), 0)
A:scipy.stats.mstats_basic.C->numpy.sum([((ry[i + 1:] > ry[i]) * (rx[i + 1:] > rx[i])).filled(0).sum() for i in range(len(ry) - 1)], dtype=float)
A:scipy.stats.mstats_basic.D->numpy.sum([((ry[i + 1:] < ry[i]) * (rx[i + 1:] > rx[i])).filled(0).sum() for i in range(len(ry) - 1)], dtype=float)
A:scipy.stats.mstats_basic.corr_x->numpy.sum([v * k * (k - 1) for (k, v) in iteritems(xties)], dtype=float)
A:scipy.stats.mstats_basic.corr_y->numpy.sum([v * k * (k - 1) for (k, v) in iteritems(yties)], dtype=float)
A:scipy.stats.mstats_basic.denom->numpy.ma.sqrt((n * ma.add.reduce(d * d, axis) - ma.add.reduce(d, axis) ** 2) / df)
A:scipy.stats.mstats_basic.n_p->numpy.sort(data.compressed()).count(0)
A:scipy.stats.mstats_basic.S_szn->numpy.sum((msign(x[i:] - x[i]).sum(0) for i in range(n)))
A:scipy.stats.mstats_basic.S_tot->numpy.sum((msign(x[i:] - x[i]).sum(0) for i in range(n))).sum()
A:scipy.stats.mstats_basic.n_tot->numpy.sort(data.compressed()).count()
A:scipy.stats.mstats_basic.ties->repeats[repeats.nonzero()].reshape(-1, 2)[:, -1].astype(int)
A:scipy.stats.mstats_basic.corr_ties->numpy.sum((v * k * (k - 1) for (k, v) in iteritems(ties)))
A:scipy.stats.mstats_basic.R->rankdata(x, axis=0, use_missing=True)
A:scipy.stats.mstats_basic.K->numpy.ma.empty((m, m), dtype=int)
A:scipy.stats.mstats_basic.covmat->numpy.ma.empty((m, m), dtype=float)
A:scipy.stats.mstats_basic.denom_szn->numpy.ma.empty(m, dtype=float)
A:scipy.stats.mstats_basic.ties_j->count_tied_groups(x[:, j].compressed())
A:scipy.stats.mstats_basic.corr_j->numpy.sum((v * k * (k - 1) for (k, v) in iteritems(ties_j)))
A:scipy.stats.mstats_basic.K[j, k]->numpy.sum((msign((x[i:, j] - x[i, j]) * (x[i:, k] - x[i, k])).sum() for i in range(n)))
A:scipy.stats.mstats_basic.var_szn->numpy.ma.empty((m, m), dtype=float).diagonal()
A:scipy.stats.mstats_basic.prob_szn->scipy.special.erfc(abs(z_szn) / np.sqrt(2))
A:scipy.stats.mstats_basic.prob_tot_ind->scipy.special.erfc(abs(z_tot_ind) / np.sqrt(2))
A:scipy.stats.mstats_basic.prob_tot_dep->scipy.special.erfc(abs(z_tot_dep) / np.sqrt(2))
A:scipy.stats.mstats_basic.chi2_tot->(z_szn * z_szn).sum()
A:scipy.stats.mstats_basic.unmask->numpy.logical_not(m)
A:scipy.stats.mstats_basic.y0m->y0.mean()
A:scipy.stats.mstats_basic.y1m->y1.mean()
A:scipy.stats.mstats_basic.args->numpy.ma.array(args[0], copy=True)
A:scipy.stats.mstats_basic.Sxy->numpy.ma.add.reduce(xm * ym)
A:scipy.stats.mstats_basic.r_den->numpy.ma.sqrt(Sxx * Syy)
A:scipy.stats.mstats_basic.ny->numpy.ma.where(y == 0, 1, y).count()
A:scipy.stats.mstats_basic.slopes->numpy.ma.hstack([(y[i + 1:] - y[i]) / (x[i + 1:] - x[i]) for i in range(n - 1)])
A:scipy.stats.mstats_basic.medslope->numpy.ma.median(szn_slopes, axis=None)
A:scipy.stats.mstats_basic.z->stats.distributions.norm.ppf(alpha / 2.0)
A:scipy.stats.mstats_basic.sigma->numpy.sqrt(sigsq)
A:scipy.stats.mstats_basic.Ru->min(np.round((nt - z * sigma) / 2.0 + 1), len(slopes) - 1)
A:scipy.stats.mstats_basic.Rl->max(np.round((nt + z * sigma) / 2.0), 0)
A:scipy.stats.mstats_basic.szn_slopes->numpy.ma.vstack([(x[i + 1:] - x[i]) / np.arange(1, n - i)[:, None] for i in range(n)])
A:scipy.stats.mstats_basic.szn_medslopes->numpy.ma.median(szn_slopes, axis=0)
A:scipy.stats.mstats_basic.v->argstoarray(*args).astype(float).var(axis=0, ddof=1)
A:scipy.stats.mstats_basic.(a, b, axis)->_chk2_asarray(a, b, axis)
A:scipy.stats.mstats_basic.t->numpy.ma.filled(t, 1)
A:scipy.stats.mstats_basic.probs->betai(0.5 * df, 0.5, df / (df + t * t)).reshape(t.shape).squeeze()
A:scipy.stats.mstats_basic.d->numpy.where(mixsort < n1, 1.0 / n1, -1.0 / n2).cumsum().max()
A:scipy.stats.mstats_basic.f_obs->numpy.ma.asarray(f_obs)
A:scipy.stats.mstats_basic.f_exp->f_exp.astype(float).astype(float)
A:scipy.stats.mstats_basic.chisq->numpy.ma.add.reduce((f_obs - f_exp) ** 2 / f_exp)
A:scipy.stats.mstats_basic.ranks->numpy.ma.masked_equal(rankdata(output, use_missing=False), 0)
A:scipy.stats.mstats_basic.U->max(U, nx * ny - U)
A:scipy.stats.mstats_basic.sumrk->numpy.ma.masked_equal(rankdata(output, use_missing=False), 0).sum(-1)
A:scipy.stats.mstats_basic.ngrp->numpy.ma.masked_equal(rankdata(output, use_missing=False), 0).count(-1)
A:scipy.stats.mstats_basic.ntot->argstoarray(*args).astype(float).count()
A:scipy.stats.mstats_basic.j->numpy.arange(np.floor(n * (1 - x)) + 1)
A:scipy.stats.mstats_basic.mix->numpy.ma.concatenate((data1.compressed(), data2.compressed()))
A:scipy.stats.mstats_basic.mixsort->numpy.ma.concatenate((data1.compressed(), data2.compressed())).argsort(kind='mergesort')
A:scipy.stats.mstats_basic.csum->numpy.where(mixsort < n1, 1.0 / n1, -1.0 / n2).cumsum()
A:scipy.stats.mstats_basic.mask->numpy.zeros(a.shape, dtype=bool)
A:scipy.stats.mstats_basic.lowidx->numpy.round(low_limit * n)
A:scipy.stats.mstats_basic.out->trima(a, limits=limits, inclusive=inclusive)
A:scipy.stats.mstats_basic.nsize->a.ravel().ravel().count()
A:scipy.stats.mstats_basic.winstd->a.ravel().ravel().std(ddof=1)
A:scipy.stats.mstats_basic.am->trima(a.ravel(), limits, inclusive)
A:scipy.stats.mstats_basic.sd->argstoarray(*args).astype(float).std(axis, ddof=0)
A:scipy.stats.mstats_basic.shape->list(a.shape)
A:scipy.stats.mstats_basic.mn->numpy.ma.expand_dims(a.mean(axis=axis), axis)
A:scipy.stats.mstats_basic.s->numpy.ma.power(a - mn, moment)
A:scipy.stats.mstats_basic.m2->numpy.extract(can_correct, m2)
A:scipy.stats.mstats_basic.m3->numpy.extract(can_correct, m3)
A:scipy.stats.mstats_basic.olderr->numpy.seterr(all='ignore')
A:scipy.stats.mstats_basic.vals->numpy.ma.where(m2 == 0, 0, m4 / m2 ** 2.0)
A:scipy.stats.mstats_basic.m4->numpy.extract(can_correct, m4)
A:scipy.stats.mstats_basic.sk->skew(a, axis)
A:scipy.stats.mstats_basic.kurt->kurtosis(a, axis)
A:scipy.stats.mstats_basic.k->len(data)
A:scipy.stats.mstats_basic.b2->kurtosis(a, axis, fisher=False)
A:scipy.stats.mstats_basic.alpha->numpy.ma.sqrt(2.0 / (W2 - 1))
A:scipy.stats.mstats_basic.term2->numpy.ma.power((1 - 2.0 / A) / denom, 1 / 3.0)
A:scipy.stats.mstats_basic.(s, _)->skewtest(a, axis)
A:scipy.stats.mstats_basic.(k, _)->kurtosistest(a, axis)
A:scipy.stats.mstats_basic.gamma->(aleph - k).clip(0, 1)
A:scipy.stats.mstats_basic.p->numpy.array(prob, copy=False, ndmin=1)
A:scipy.stats.mstats_basic.plpos->numpy.empty(data.size, dtype=float)
A:scipy.stats.mstats_basic.ngroups->len(data)
A:scipy.stats.mstats_basic.ssbg->numpy.sum((ranked.sum(-1) - n * (k + 1) / 2.0) ** 2)
A:scipy.stats.mstats_basic.ER->numpy.ma.array(ER, copy=False, ndmin=2)
A:scipy.stats.mstats_basic.EF->numpy.ma.array(EF, copy=False, ndmin=2)
A:scipy.stats.mstats_basic.q->numpy.ma.filled(q, 1)
A:scipy.stats.mstats_basic.ranked->ranked.compressed().reshape(k, -1).view(ndarray).compressed().reshape(k, -1).view(ndarray)
scipy.mstats_basic._chk2_asarray(a,b,axis)
scipy.mstats_basic._chk_asarray(a,axis)
scipy.mstats_basic._chk_size(a,b)
scipy.mstats_basic._kolmog1(x,n)
scipy.mstats_basic.argstoarray(*args)
scipy.mstats_basic.betai(a,b,x)
scipy.mstats_basic.chisquare(f_obs,f_exp=None)
scipy.mstats_basic.count_tied_groups(x,use_missing=False)
scipy.mstats_basic.describe(a,axis=0)
scipy.mstats_basic.f_oneway(*args)
scipy.mstats_basic.f_value_wilks_lambda(ER,EF,dfnum,dfden,a,b)
scipy.mstats_basic.find_repeats(arr)
scipy.mstats_basic.friedmanchisquare(*args)
scipy.mstats_basic.gmean(a,axis=0)
scipy.mstats_basic.hmean(a,axis=0)
scipy.mstats_basic.kendalltau(x,y,use_ties=True,use_missing=False)
scipy.mstats_basic.kendalltau_seasonal(x)
scipy.mstats_basic.kruskalwallis(*args)
scipy.mstats_basic.ks_twosamp(data1,data2,alternative='two-sided')
scipy.mstats_basic.ks_twosamp_old(data1,data2)
scipy.mstats_basic.kurtosis(a,axis=0,fisher=True,bias=True)
scipy.mstats_basic.kurtosistest(a,axis=0)
scipy.mstats_basic.linregress(*args)
scipy.mstats_basic.mannwhitneyu(x,y,use_continuity=True)
scipy.mstats_basic.mode(a,axis=0)
scipy.mstats_basic.moment(a,moment=1,axis=0)
scipy.mstats_basic.mquantiles(a,prob=list([0.25,0.5,0.75]),alphap=0.4,betap=0.4,axis=None,limit=())
scipy.mstats_basic.msign(x)
scipy.mstats_basic.normaltest(a,axis=0)
scipy.mstats_basic.obrientransform(*args)
scipy.mstats_basic.pearsonr(x,y)
scipy.mstats_basic.plotting_positions(data,alpha=0.4,beta=0.4)
scipy.mstats_basic.pointbiserialr(x,y)
scipy.mstats_basic.rankdata(data,axis=None,use_missing=False)
scipy.mstats_basic.scoreatpercentile(data,per,limit=(),alphap=0.4,betap=0.4)
scipy.mstats_basic.sem(a,axis=0)
scipy.mstats_basic.sen_seasonal_slopes(x)
scipy.mstats_basic.signaltonoise(data,axis=0)
scipy.mstats_basic.skew(a,axis=0,bias=True)
scipy.mstats_basic.skewtest(a,axis=0)
scipy.mstats_basic.spearmanr(x,y,use_ties=True)
scipy.mstats_basic.stde_median(data,axis=None)
scipy.mstats_basic.theilslopes(y,x=None,alpha=0.05)
scipy.mstats_basic.threshold(a,threshmin=None,threshmax=None,newval=0)
scipy.mstats_basic.tmax(a,upperlimit,axis=0,inclusive=True)
scipy.mstats_basic.tmean(a,limits=None,inclusive=(True,True))
scipy.mstats_basic.tmin(a,lowerlimit=None,axis=0,inclusive=True)
scipy.mstats_basic.trim(a,limits=None,inclusive=(True,True),relative=False,axis=None)
scipy.mstats_basic.trima(a,limits=None,inclusive=(True,True))
scipy.mstats_basic.trimboth(data,proportiontocut=0.2,inclusive=(True,True),axis=None)
scipy.mstats_basic.trimmed_mean(a,limits=(0.1,0.1),inclusive=(1,1),relative=True,axis=None)
scipy.mstats_basic.trimmed_std(a,limits=(0.1,0.1),inclusive=(1,1),relative=True,axis=None,ddof=0)
scipy.mstats_basic.trimmed_stde(a,limits=(0.1,0.1),inclusive=(1,1),axis=None)
scipy.mstats_basic.trimmed_var(a,limits=(0.1,0.1),inclusive=(1,1),relative=True,axis=None,ddof=0)
scipy.mstats_basic.trimr(a,limits=None,inclusive=(True,True),axis=None)
scipy.mstats_basic.trimtail(data,proportiontocut=0.2,tail='left',inclusive=(True,True),axis=None)
scipy.mstats_basic.tsem(a,limits=None,inclusive=(True,True))
scipy.mstats_basic.ttest_ind(a,b,axis=0)
scipy.mstats_basic.ttest_onesamp(a,popmean)
scipy.mstats_basic.ttest_rel(a,b,axis=None)
scipy.mstats_basic.tvar(a,limits=None,inclusive=(True,True))
scipy.mstats_basic.variation(a,axis=0)
scipy.mstats_basic.winsorize(a,limits=None,inclusive=(True,True),inplace=False,axis=None)
scipy.stats.mstats_basic._chk2_asarray(a,b,axis)
scipy.stats.mstats_basic._chk_asarray(a,axis)
scipy.stats.mstats_basic._chk_size(a,b)
scipy.stats.mstats_basic._kolmog1(x,n)
scipy.stats.mstats_basic.argstoarray(*args)
scipy.stats.mstats_basic.betai(a,b,x)
scipy.stats.mstats_basic.chisquare(f_obs,f_exp=None)
scipy.stats.mstats_basic.count_tied_groups(x,use_missing=False)
scipy.stats.mstats_basic.describe(a,axis=0)
scipy.stats.mstats_basic.f_oneway(*args)
scipy.stats.mstats_basic.f_value_wilks_lambda(ER,EF,dfnum,dfden,a,b)
scipy.stats.mstats_basic.find_repeats(arr)
scipy.stats.mstats_basic.friedmanchisquare(*args)
scipy.stats.mstats_basic.gmean(a,axis=0)
scipy.stats.mstats_basic.hmean(a,axis=0)
scipy.stats.mstats_basic.kendalltau(x,y,use_ties=True,use_missing=False)
scipy.stats.mstats_basic.kendalltau_seasonal(x)
scipy.stats.mstats_basic.kruskalwallis(*args)
scipy.stats.mstats_basic.ks_twosamp(data1,data2,alternative='two-sided')
scipy.stats.mstats_basic.ks_twosamp_old(data1,data2)
scipy.stats.mstats_basic.kurtosis(a,axis=0,fisher=True,bias=True)
scipy.stats.mstats_basic.kurtosistest(a,axis=0)
scipy.stats.mstats_basic.linregress(*args)
scipy.stats.mstats_basic.mannwhitneyu(x,y,use_continuity=True)
scipy.stats.mstats_basic.mode(a,axis=0)
scipy.stats.mstats_basic.moment(a,moment=1,axis=0)
scipy.stats.mstats_basic.mquantiles(a,prob=list([0.25,0.5,0.75]),alphap=0.4,betap=0.4,axis=None,limit=())
scipy.stats.mstats_basic.msign(x)
scipy.stats.mstats_basic.normaltest(a,axis=0)
scipy.stats.mstats_basic.obrientransform(*args)
scipy.stats.mstats_basic.pearsonr(x,y)
scipy.stats.mstats_basic.plotting_positions(data,alpha=0.4,beta=0.4)
scipy.stats.mstats_basic.pointbiserialr(x,y)
scipy.stats.mstats_basic.rankdata(data,axis=None,use_missing=False)
scipy.stats.mstats_basic.scoreatpercentile(data,per,limit=(),alphap=0.4,betap=0.4)
scipy.stats.mstats_basic.sem(a,axis=0)
scipy.stats.mstats_basic.sen_seasonal_slopes(x)
scipy.stats.mstats_basic.signaltonoise(data,axis=0)
scipy.stats.mstats_basic.skew(a,axis=0,bias=True)
scipy.stats.mstats_basic.skewtest(a,axis=0)
scipy.stats.mstats_basic.spearmanr(x,y,use_ties=True)
scipy.stats.mstats_basic.stde_median(data,axis=None)
scipy.stats.mstats_basic.theilslopes(y,x=None,alpha=0.05)
scipy.stats.mstats_basic.threshold(a,threshmin=None,threshmax=None,newval=0)
scipy.stats.mstats_basic.tmax(a,upperlimit,axis=0,inclusive=True)
scipy.stats.mstats_basic.tmean(a,limits=None,inclusive=(True,True))
scipy.stats.mstats_basic.tmin(a,lowerlimit=None,axis=0,inclusive=True)
scipy.stats.mstats_basic.trim(a,limits=None,inclusive=(True,True),relative=False,axis=None)
scipy.stats.mstats_basic.trima(a,limits=None,inclusive=(True,True))
scipy.stats.mstats_basic.trimboth(data,proportiontocut=0.2,inclusive=(True,True),axis=None)
scipy.stats.mstats_basic.trimmed_mean(a,limits=(0.1,0.1),inclusive=(1,1),relative=True,axis=None)
scipy.stats.mstats_basic.trimmed_std(a,limits=(0.1,0.1),inclusive=(1,1),relative=True,axis=None,ddof=0)
scipy.stats.mstats_basic.trimmed_stde(a,limits=(0.1,0.1),inclusive=(1,1),axis=None)
scipy.stats.mstats_basic.trimmed_var(a,limits=(0.1,0.1),inclusive=(1,1),relative=True,axis=None,ddof=0)
scipy.stats.mstats_basic.trimr(a,limits=None,inclusive=(True,True),axis=None)
scipy.stats.mstats_basic.trimtail(data,proportiontocut=0.2,tail='left',inclusive=(True,True),axis=None)
scipy.stats.mstats_basic.tsem(a,limits=None,inclusive=(True,True))
scipy.stats.mstats_basic.ttest_ind(a,b,axis=0)
scipy.stats.mstats_basic.ttest_onesamp(a,popmean)
scipy.stats.mstats_basic.ttest_rel(a,b,axis=None)
scipy.stats.mstats_basic.tvar(a,limits=None,inclusive=(True,True))
scipy.stats.mstats_basic.variation(a,axis=0)
scipy.stats.mstats_basic.winsorize(a,limits=None,inclusive=(True,True),inplace=False,axis=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/distributions.py----------------------------------------
A:scipy.stats.distributions.floatinfo->numpy.finfo(float)
A:scipy.stats.distributions._doc_allmethods->''.join([docdict_discrete[obj] for obj in _doc_disc_methods])
A:scipy.stats.distributions._doc_default->''.join([_doc_default_longsummary, _doc_allmethods, _doc_default_callparams, _doc_default_frozen_note, _doc_default_example])
A:scipy.stats.distributions._doc_default_before_notes->''.join([docdict_discrete['longsummary'], docdict_discrete['allmethods'], docdict_discrete['callparams'], docdict_discrete['frozennote']])
A:scipy.stats.distributions.docdict_discrete->docdict.copy()
A:scipy.stats.distributions.docdict_discrete[obj]->docdict_discrete[obj].replace(', scale=1', '').replace(', scale=1', '')
A:scipy.stats.distributions.docdict_discrete['longsummary']->_doc_default_longsummary.replace('Continuous', 'Discrete')
A:scipy.stats.distributions._doc_default_disc->''.join([docdict_discrete['longsummary'], docdict_discrete['allmethods'], docdict_discrete['frozennote'], docdict_discrete['example']])
A:scipy.stats.distributions.mu->int(self.stats(*args, **{'moments': 'm'}))
A:scipy.stats.distributions.val->self.pmf(mu - k, *args)
A:scipy.stats.distributions.data->numpy.ravel(data)
A:scipy.stats.distributions.m2->((data - mu) ** 2).mean()
A:scipy.stats.distributions.m3->((data - mu) ** 3).mean()
A:scipy.stats.distributions.m4->((data - mu) ** 4).mean()
A:scipy.stats.distributions.kwds->self.kwds.copy()
A:scipy.stats.distributions.out->asarray(out)
A:scipy.stats.distributions.newargs->atleast_1d(*args)
A:scipy.stats.distributions.(args, loc, scale, kwarg3)->self._fix_loc_scale_kwarg3(args, loc, scale, None, None)
A:scipy.stats.distributions.N->len(args)
A:scipy.stats.distributions.(args, loc, scale)->self._fix_loc_scale(args, loc, scale)
A:scipy.stats.distributions.(loc, scale, size, discrete)->map(kwds.get, kwd_names, [None] * len(kwd_names))
A:scipy.stats.distributions.(args, loc, scale, size)->self._fix_loc_scale_kwarg3(args, loc, scale, size)
A:scipy.stats.distributions.cond->rv_discrete._argcheck(self, M, n, N)
A:scipy.stats.distributions.self._size->product(size, axis=0)
A:scipy.stats.distributions.size->numpy.array(size, ndmin=1)
A:scipy.stats.distributions.vals->ceil(where(ind, log(q * cons2) / a - 1, -log((1 - q) * cons2) / a))
A:scipy.stats.distributions.res->sqrt(self.stats(*args, **kwds))
A:scipy.stats.distributions.alpha->alpha_gen(a=0.0, name='alpha', shapes='a')
A:scipy.stats.distributions.a->int(min(-100 * q, -10))
A:scipy.stats.distributions.b->int(max(100 * q, 10))
A:scipy.stats.distributions.cdf_signature->inspect.getargspec(get_method_function(self._cdf))
A:scipy.stats.distributions.pdf_signature->inspect.getargspec(get_method_function(self._pdf))
A:scipy.stats.distributions.self.numargs->max(numargs1, numargs2)
A:scipy.stats.distributions.self.vecfunc->sgf(self._ppf_single_call, otypes='d')
A:scipy.stats.distributions.self.vecentropy->vectorize(self._entropy)
A:scipy.stats.distributions.self.veccdf->sgf(self._cdf_single_call, otypes='d')
A:scipy.stats.distributions.self.generic_moment->instancemethod(self.vec_generic_moment, self, rv_discrete)
A:scipy.stats.distributions.self.__doc__->scipy.misc.doccer.docformat(self.__doc__, tempdict)
A:scipy.stats.distributions.tempdict->docdict.copy().copy()
A:scipy.stats.distributions.tempdict[item]->tempdict[item].replace('\n%(shapes)s : array_like\n    shape parameters', '').replace('\n%(shapes)s : array_like\n    shape parameters', '')
A:scipy.stats.distributions.U->numpy.random.sample(self._size)
A:scipy.stats.distributions.Y->self._ppf(U, *args)
A:scipy.stats.distributions.(loc, scale)->map(kwds.get, ['loc', 'scale'])
A:scipy.stats.distributions.(x, loc, scale)->map(asarray, (x, loc, scale))
A:scipy.stats.distributions.args->list(map(asarray, args))
A:scipy.stats.distributions.x->numpy.floor(x)
A:scipy.stats.distributions.output->zeros(shape(cond0), 'd')
A:scipy.stats.distributions.goodargs->argsreduce(cond0, *args)
A:scipy.stats.distributions.(q, loc, scale)->map(asarray, (q, loc, scale))
A:scipy.stats.distributions.(loc, scale, moments)->map(kwds.get, ['loc', 'scale', 'moments'])
A:scipy.stats.distributions.(args, loc, scale, moments)->self._fix_loc_scale_kwarg3(args, loc, scale, moments, 'mv')
A:scipy.stats.distributions.signature->inspect.getargspec(get_method_function(self._stats))
A:scipy.stats.distributions.(mu, mu2, g1, g2)->self._stats(*args, **dict)
A:scipy.stats.distributions.default->valarray(shape(cond), self.badvalue)
A:scipy.stats.distributions.out0->valarray(shape(cond), self.badvalue).copy()
A:scipy.stats.distributions.mu2p->self._munp(2.0, *goodargs)
A:scipy.stats.distributions.mu3p->self._munp(3.0, *goodargs)
A:scipy.stats.distributions.mu4p->self._munp(4.0, *goodargs)
A:scipy.stats.distributions.loc->asarray(loc)
A:scipy.stats.distributions.scale->self.kwds.copy().get('scale', 1)
A:scipy.stats.distributions.valk->_moment_from_stats(k, mu, mu2, g1, g2, self._munp, args)
A:scipy.stats.distributions.Nargs->len(args)
A:scipy.stats.distributions.index->list(range(Nargs))
A:scipy.stats.distributions.newtheta->restore(args[:], theta)
A:scipy.stats.distributions.Narg->len(args)
A:scipy.stats.distributions.start->self._fitstart(data)
A:scipy.stats.distributions.(x0, func, restore, args)->self._reduce_func(args, kwds)
A:scipy.stats.distributions.optimizer->getattr(optimize, optimizer)
A:scipy.stats.distributions.(mu, mu2)->self.stats(*args, **{'moments': 'mv'})
A:scipy.stats.distributions.tmp->asarray(mu)
A:scipy.stats.distributions.muhat->asarray(mu).mean()
A:scipy.stats.distributions.mu2hat->asarray(mu).var()
A:scipy.stats.distributions.Shat->sqrt(mu2hat / mu2)
A:scipy.stats.distributions.(low, upp)->self.ppf([0.001, 0.999], *args)
A:scipy.stats.distributions.ksone->ksone_gen(a=0.0, name='ksone', shapes='n')
A:scipy.stats.distributions.kstwobign->kstwobign_gen(a=0.0, name='kstwobign')
A:scipy.stats.distributions._norm_pdf_C->math.sqrt(2 * pi)
A:scipy.stats.distributions._norm_pdf_logC->math.log(_norm_pdf_C)
A:scipy.stats.distributions.norm->norm_gen(name='norm')
A:scipy.stats.distributions.anglit->anglit_gen(a=-pi / 4, b=pi / 4, name='anglit')
A:scipy.stats.distributions.arcsine->arcsine_gen(a=0.0, b=1.0, name='arcsine')
A:scipy.stats.distributions.g1->valarray(shape(b), value=nan)
A:scipy.stats.distributions.g2->valarray(shape(b), value=nan)
A:scipy.stats.distributions.(a, b)->scipy.optimize.fsolve(func, (1.0, 1.0))
A:scipy.stats.distributions.floc->self.kwds.copy().get('floc', None)
A:scipy.stats.distributions.fscale->self.kwds.copy().get('fscale', None)
A:scipy.stats.distributions.xbar->ravel(data).mean()
A:scipy.stats.distributions.v->where(c < -0.5, nan, g1 ** 2.0 * gam2k)
A:scipy.stats.distributions.beta->beta_gen(a=0.0, b=1.0, name='beta', shapes='a, b')
A:scipy.stats.distributions.u1->gamma_gen(a=0.0, name='gamma', shapes='a').rvs(a, size=self._size)
A:scipy.stats.distributions.u2->gamma_gen(a=0.0, name='gamma', shapes='a').rvs(b, size=self._size)
A:scipy.stats.distributions.betaprime->betaprime_gen(a=0.0, b=500.0, name='betaprime', shapes='a, b')
A:scipy.stats.distributions.k->floor(x)
A:scipy.stats.distributions.bradford->bradford_gen(a=0.0, b=1.0, name='bradford', shapes='c')
A:scipy.stats.distributions.gd->gam(d)
A:scipy.stats.distributions.g3c->gam(1 - 3.0 / c)
A:scipy.stats.distributions.g3cd->gam(3.0 / c + d)
A:scipy.stats.distributions.burr->burr_gen(a=0.0, name='burr', shapes='c, d')
A:scipy.stats.distributions.fisk->fisk_gen(a=0.0, name='fisk', shapes='c')
A:scipy.stats.distributions.cauchy->cauchy_gen(name='cauchy')
A:scipy.stats.distributions.chi->chi_gen(a=0.0, name='chi', shapes='df')
A:scipy.stats.distributions.chi2->chi2_gen(a=0.0, name='chi2', shapes='df')
A:scipy.stats.distributions.cosine->cosine_gen(a=-pi, b=pi, name='cosine')
A:scipy.stats.distributions.u->random(size=self._size)
A:scipy.stats.distributions.ax->abs(x)
A:scipy.stats.distributions.fac->asarray(special.zeta(a, 1))
A:scipy.stats.distributions.dgamma->dgamma_gen(name='dgamma', shapes='a')
A:scipy.stats.distributions.var->gam(1 + 2.0 / c)
A:scipy.stats.distributions.dweibull->dweibull_gen(name='dweibull', shapes='c')
A:scipy.stats.distributions.erlang->erlang_gen(a=0.0, name='erlang', shapes='a')
A:scipy.stats.distributions.expon->expon_gen(a=0.0, name='expon')
A:scipy.stats.distributions.exc->exp(-x ** c)
A:scipy.stats.distributions.exponweib->exponweib_gen(a=0.0, name='exponweib', shapes='a, c')
A:scipy.stats.distributions.exponpow->exponpow_gen(a=0.0, name='exponpow', shapes='b')
A:scipy.stats.distributions.z->exp(-lambda_)
A:scipy.stats.distributions.fatiguelife->fatiguelife_gen(a=0.0, name='fatiguelife', shapes='c')
A:scipy.stats.distributions.foldcauchy->foldcauchy_gen(a=0.0, name='foldcauchy', shapes='c')
A:scipy.stats.distributions.v2->asarray(dfd * 1.0)
A:scipy.stats.distributions.v1->asarray(dfn * 1.0)
A:scipy.stats.distributions.mu2->valarray(shape(b), value=inf)
A:scipy.stats.distributions.f->f_gen(a=0.0, name='f', shapes='dfn, dfd')
A:scipy.stats.distributions.foldnorm->foldnorm_gen(a=0.0, name='foldnorm', shapes='c')
A:scipy.stats.distributions.frechet_r->frechet_r_gen(a=0.0, name='frechet_r', shapes='c')
A:scipy.stats.distributions.weibull_min->frechet_r_gen(a=0.0, name='weibull_min', shapes='c')
A:scipy.stats.distributions.frechet_l->frechet_l_gen(b=0.0, name='frechet_l', shapes='c')
A:scipy.stats.distributions.weibull_max->frechet_l_gen(b=0.0, name='weibull_max', shapes='c')
A:scipy.stats.distributions.genlogistic->genlogistic_gen(name='genlogistic', shapes='c')
A:scipy.stats.distributions.c->int((a + b) / 2.0)
A:scipy.stats.distributions.self.b->min(n, N)
A:scipy.stats.distributions.Px->exp(trm1)
A:scipy.stats.distributions.genpareto->genpareto_gen(a=0.0, name='genpareto', shapes='c')
A:scipy.stats.distributions.genexpon->genexpon_gen(a=0.0, name='genexpon', shapes='a, b, c')
A:scipy.stats.distributions.self.a->max(N - (M - n), 0)
A:scipy.stats.distributions.logex2->where((c == 0) * (x == x), 0.0, log1p(-cx))
A:scipy.stats.distributions.logpex2->where((c == 0) * (x == x), -x, logex2 / c)
A:scipy.stats.distributions.pex2->exp(logpex2)
A:scipy.stats.distributions.logpdf->where((cx == 1) | (cx == -inf), -inf, -pex2 + logpex2 - logex2)
A:scipy.stats.distributions.loglogcdf->where((c == 0) * (x == x), -x, log1p(-c * x) / c)
A:scipy.stats.distributions.g3->g(3)
A:scipy.stats.distributions.g4->g(4)
A:scipy.stats.distributions.g2mg12->where(abs(c) < 1e-07, (c * pi) ** 2.0 / 6.0, g2 - g1 ** 2.0)
A:scipy.stats.distributions.gam2k->where(abs(c) < 1e-07, pi ** 2.0 / 6.0, expm1(gamln(2.0 * c + 1.0) - 2 * gamln(c + 1.0)) / c ** 2.0)
A:scipy.stats.distributions.gamk->where(abs(c) < eps, -_EULER, expm1(gamln(c + 1)) / c)
A:scipy.stats.distributions.m->arange(int(self.a), k + 1)
A:scipy.stats.distributions.sk1->where(c < -1.0 / 3, nan, np.sign(c) * (-g3 + (g2 + 2 * g2mg12) * g1) / g2mg12 ** (3.0 / 2.0))
A:scipy.stats.distributions.sk->where(abs(c) <= eps ** 0.29, 12 * sqrt(6) * _ZETA3 / pi ** 3, sk1)
A:scipy.stats.distributions.ku1->where(c < -1.0 / 4, nan, (g4 + (-4 * g3 + 3 * (g2 + g2mg12) * g1) * g1) / g2mg12 ** 2)
A:scipy.stats.distributions.ku->where(abs(c) <= eps ** 0.23, 12.0 / 5.0, ku1 - 3.0)
A:scipy.stats.distributions.genextreme->genextreme_gen(name='genextreme', shapes='c')
A:scipy.stats.distributions.logx_bar->ravel(log(data)).mean()
A:scipy.stats.distributions.gamma->gamma_gen(a=0.0, name='gamma', shapes='a')
A:scipy.stats.distributions.val1->gam((df - 1.0) / 2.0)
A:scipy.stats.distributions.val2->gam(df / 2.0)
A:scipy.stats.distributions.gengamma->gengamma_gen(a=0.0, name='gengamma', shapes='a, c')
A:scipy.stats.distributions.genhalflogistic->genhalflogistic_gen(a=0.0, name='genhalflogistic', shapes='c')
A:scipy.stats.distributions.ex->exp(-x)
A:scipy.stats.distributions.gompertz->gompertz_gen(a=0.0, name='gompertz', shapes='c')
A:scipy.stats.distributions.gumbel_r->gumbel_r_gen(name='gumbel_r')
A:scipy.stats.distributions.gumbel_l->gumbel_l_gen(name='gumbel_l')
A:scipy.stats.distributions.halfcauchy->halfcauchy_gen(a=0.0, name='halfcauchy')
A:scipy.stats.distributions.halflogistic->halflogistic_gen(a=0.0, name='halflogistic')
A:scipy.stats.distributions.halfnorm->halfnorm_gen(a=0.0, name='halfnorm')
A:scipy.stats.distributions.hypsecant->hypsecant_gen(name='hypsecant')
A:scipy.stats.distributions.num->scipy.special.hyp2f1(c, a + n, a + b + n, -z)
A:scipy.stats.distributions.den->scipy.special.hyp2f1(c, a, a + b, -z)
A:scipy.stats.distributions.gausshyper->gausshyper_gen(a=0.0, b=1.0, name='gausshyper', shapes='a, b, c, z')
A:scipy.stats.distributions.invgamma->invgamma_gen(a=0.0, name='invgamma', shapes='a')
A:scipy.stats.distributions.C1->norm_gen(name='norm').cdf(fac * (x - mu) / mu)
A:scipy.stats.distributions.invgauss->invgauss_gen(a=0.0, name='invgauss', shapes='mu')
A:scipy.stats.distributions.xc2->exp(-xc2)
A:scipy.stats.distributions.invweibull->invweibull_gen(a=0, name='invweibull', shapes='c')
A:scipy.stats.distributions.trm->norm_gen(name='norm').pdf(a + b * log(x + sqrt(x2 + 1)))
A:scipy.stats.distributions.johnsonsb->johnsonsb_gen(a=0.0, b=1.0, name='johnsonb', shapes='a, b')
A:scipy.stats.distributions.johnsonsu->johnsonsu_gen(name='johnsonsu', shapes='a, b')
A:scipy.stats.distributions.laplace->laplace_gen(name='laplace')
A:scipy.stats.distributions.levy->levy_gen(a=0.0, name='levy')
A:scipy.stats.distributions.levy_l->levy_l_gen(b=0.0, name='levy_l')
A:scipy.stats.distributions.TH->uniform_gen(a=0.0, b=1.0, name='uniform').rvs(loc=-pi / 2.0, scale=pi, size=sz)
A:scipy.stats.distributions.W->expon_gen(a=0.0, name='expon').rvs(size=sz)
A:scipy.stats.distributions.levy_stable->levy_stable_gen(name='levy_stable', shapes='alpha, beta')
A:scipy.stats.distributions.logistic->logistic_gen(name='logistic')
A:scipy.stats.distributions.loggamma->loggamma_gen(name='loggamma', shapes='c')
A:scipy.stats.distributions.loglaplace->loglaplace_gen(a=0.0, name='loglaplace', shapes='c')
A:scipy.stats.distributions.p->exp(s * s)
A:scipy.stats.distributions.lognorm->lognorm_gen(a=0.0, name='lognorm', shapes='s')
A:scipy.stats.distributions.gilbrat->gilbrat_gen(a=0.0, name='gilbrat')
A:scipy.stats.distributions.maxwell->maxwell_gen(a=0.0, name='maxwell')
A:scipy.stats.distributions.qsk->pow(q, s * 1.0 / k)
A:scipy.stats.distributions.mielke->mielke_gen(a=0.0, name='mielke', shapes='k, s')
A:scipy.stats.distributions.nakagami->nakagami_gen(a=0.0, name='nakagami', shapes='nu')
A:scipy.stats.distributions.ncx2->ncx2_gen(a=0.0, name='ncx2', shapes='df, nc')
A:scipy.stats.distributions.ncf->ncf_gen(a=0.0, name='ncf', shapes='dfn, dfd, nc')
A:scipy.stats.distributions.r->log(1 - pr)
A:scipy.stats.distributions.t->asarray(t)
A:scipy.stats.distributions.trm2->scipy.special.hyp1f1((n + 1) / 2, 0.5, valF)
A:scipy.stats.distributions.nct->nct_gen(name='nct', shapes='df, nc')
A:scipy.stats.distributions.bt->extract(mask, b)
A:scipy.stats.distributions.pareto->pareto_gen(a=1.0, name='pareto', shapes='b')
A:scipy.stats.distributions.lomax->lomax_gen(a=0.0, name='lomax', shapes='c')
A:scipy.stats.distributions.(ans, x, skew)->numpy.broadcast_arrays([1.0], x, skew)
A:scipy.stats.distributions.ans->exp(self._logpdf(x, skew))
A:scipy.stats.distributions.(ans, x, transx, skew, mask, invmask, beta, alpha, zeta)->self._preprocess([0], skew)
A:scipy.stats.distributions.ans[mask]->_norm_ppf(q[mask])
A:scipy.stats.distributions.ans[invmask]->gamma_gen(a=0.0, name='gamma', shapes='a')._cdf(transx, alpha)
A:scipy.stats.distributions.(ans, q, transq, skew, mask, invmask, beta, alpha, zeta)->self._preprocess(q, skew)
A:scipy.stats.distributions.pearson3->pearson3_gen(name='pearson3', shapes='skew')
A:scipy.stats.distributions.powerlaw->powerlaw_gen(a=0.0, b=1.0, name='powerlaw', shapes='a')
A:scipy.stats.distributions.powerlognorm->powerlognorm_gen(a=0.0, name='powerlognorm', shapes='c, s')
A:scipy.stats.distributions.powernorm->powernorm_gen(name='powernorm', shapes='c')
A:scipy.stats.distributions.rdist->rdist_gen(a=-1.0, b=1.0, name='rdist', shapes='c')
A:scipy.stats.distributions.rayleigh->rayleigh_gen(a=0.0, name='rayleigh')
A:scipy.stats.distributions.self.d->log(b * 1.0 / a)
A:scipy.stats.distributions.reciprocal->reciprocal_gen(name='reciprocal', shapes='a, b')
A:scipy.stats.distributions.rice->rice_gen(a=0.0, name='rice', shapes='b')
A:scipy.stats.distributions.recipinvgauss->recipinvgauss_gen(a=0.0, name='recipinvgauss', shapes='mu')
A:scipy.stats.distributions.semicircular->semicircular_gen(a=-1.0, b=1.0, name='semicircular')
A:scipy.stats.distributions.triang->triang_gen(a=0.0, b=1.0, name='triang', shapes='c')
A:scipy.stats.distributions.eB->exp(b)
A:scipy.stats.distributions.truncexpon->truncexpon_gen(a=0.0, name='truncexpon', shapes='b')
A:scipy.stats.distributions.self._nb->_norm_cdf(b)
A:scipy.stats.distributions.self._na->_norm_cdf(a)
A:scipy.stats.distributions.self._logdelta->log(self._delta)
A:scipy.stats.distributions.truncnorm->truncnorm_gen(name='truncnorm', shapes='a, b')
A:scipy.stats.distributions.Fx->asarray(special.tklmbda(x, lam))
A:scipy.stats.distributions.vals2->log(q / (1 - q))
A:scipy.stats.distributions.tukeylambda->tukeylambda_gen(name='tukeylambda', shapes='lam')
A:scipy.stats.distributions.uniform->uniform_gen(a=0.0, b=1.0, name='uniform')
A:scipy.stats.distributions.vonmises->vonmises_gen(name='vonmises', shapes='b')
A:scipy.stats.distributions.wald->wald_gen(a=0.0, name='wald')
A:scipy.stats.distributions.xp->extract(c1, x)
A:scipy.stats.distributions.xn->extract(c2, x)
A:scipy.stats.distributions.valn->extract(c2, np.ones_like(x) * val)
A:scipy.stats.distributions.yn->tan(xn / 2.0)
A:scipy.stats.distributions.valp->extract(c1, np.ones_like(x) * val)
A:scipy.stats.distributions.yp->tan(xp / 2.0)
A:scipy.stats.distributions.wrapcauchy->wrapcauchy_gen(a=0.0, b=2 * pi, name='wrapcauchy', shapes='c')
A:scipy.stats.distributions.pk->asarray(pk)
A:scipy.stats.distributions.vec->where(pk == 0, 0.0, -pk * log(pk / qk))
A:scipy.stats.distributions.qk->asarray(qk)
A:scipy.stats.distributions.indx->argsort(ravel(self.xk))
A:scipy.stats.distributions.n->asarray(n)
A:scipy.stats.distributions.pos->max(0.0, 1.0 * self.a)
A:scipy.stats.distributions.ulimit->max(1000, (min(self.b, 1000) + max(self.a, -1000)) / 2.0)
A:scipy.stats.distributions.llimit->min(-1000, (min(self.b, 1000) + max(self.a, -1000)) / 2.0)
A:scipy.stats.distributions.qb->self._cdf(b, *args)
A:scipy.stats.distributions.qa->self._cdf(a, *args)
A:scipy.stats.distributions.qc->self._cdf(c, *args)
A:scipy.stats.distributions.sorted_keys->list(dict.keys())
A:scipy.stats.distributions.self._cdfvec->sgf(self._cdfsingle, otypes='d')
A:scipy.stats.distributions.self.xk->take(ravel(self.xk), indx, 0)
A:scipy.stats.distributions.self.pk->take(ravel(self.pk), indx, 0)
A:scipy.stats.distributions.self.P->make_dict(self.xk, self.pk)
A:scipy.stats.distributions.self.qvals->numpy.cumsum(self.pk, axis=0)
A:scipy.stats.distributions.self.F->make_dict(self.xk, self.qvals)
A:scipy.stats.distributions.self.Finv->reverse_dict(self.F)
A:scipy.stats.distributions.self._ppf->instancemethod(sgf(_drv_ppf, otypes='d'), self, rv_discrete)
A:scipy.stats.distributions.self._pmf->instancemethod(sgf(_drv_pmf, otypes='d'), self, rv_discrete)
A:scipy.stats.distributions.self._cdf->instancemethod(sgf(_drv_cdf, otypes='d'), self, rv_discrete)
A:scipy.stats.distributions.self._nonzero->instancemethod(_drv_nonzero, self, rv_discrete)
A:scipy.stats.distributions.self.moment_gen->instancemethod(_drv_moment_gen, self, rv_discrete)
A:scipy.stats.distributions.pmf_signature->inspect.getargspec(get_method_function(self._pmf))
A:scipy.stats.distributions.self.vec_generic_moment->sgf(_drv2_moment, otypes='d')
A:scipy.stats.distributions._vppf->sgf(_drv2_ppfsingle, otypes='d')
A:scipy.stats.distributions.self._vecppf->instancemethod(_vppf, self, rv_discrete)
A:scipy.stats.distributions.(args, loc)->self._fix_loc(args, loc)
A:scipy.stats.distributions.(k, loc)->map(asarray, (k, loc))
A:scipy.stats.distributions.cond0->self._argcheck(*args)
A:scipy.stats.distributions.(q, loc)->map(asarray, (q, loc))
A:scipy.stats.distributions.(loc, moments)->map(kwds.get, ['loc', 'moments'])
A:scipy.stats.distributions.low->max(min(-suppnmin, low), lb)
A:scipy.stats.distributions.upp->min(max(suppnmin, upp), ub)
A:scipy.stats.distributions.supp->numpy.arange(low, upp + 1, self.inc)
A:scipy.stats.distributions.tot->numpy.sum(fun(supp))
A:scipy.stats.distributions.diff->fun(pos)
A:scipy.stats.distributions.temp->self._cdf(vals1, a)
A:scipy.stats.distributions.lvals->where(vals == 0.0, 0.0, log(vals))
A:scipy.stats.distributions.binom->binom_gen(name='binom', shapes='n, p')
A:scipy.stats.distributions.bernoulli->bernoulli_gen(b=1, name='bernoulli', shapes='p')
A:scipy.stats.distributions.vals1->(vals - 1).clip(min, max)
A:scipy.stats.distributions.nbinom->nbinom_gen(name='nbinom', shapes='n, p')
A:scipy.stats.distributions.geom->geom_gen(a=1, name='geom', longname='A geometric', shapes='p')
A:scipy.stats.distributions.k2->numpy.arange(quant + 1, draw + 1)
A:scipy.stats.distributions.hypergeom->hypergeom_gen(name='hypergeom', shapes='M, n, N')
A:scipy.stats.distributions.logser->logser_gen(a=1, name='logser', longname='A logarithmic', shapes='p')
A:scipy.stats.distributions.poisson->poisson_gen(name='poisson', longname='A Poisson', shapes='mu')
A:scipy.stats.distributions.planck->planck_gen(name='planck', longname='A discrete exponential ', shapes='lamda')
A:scipy.stats.distributions.zN->exp(-lambda_ * N)
A:scipy.stats.distributions.boltzmann->boltzmann_gen(name='boltzmann', longname='A truncated discrete exponential ', shapes='lamda, N')
A:scipy.stats.distributions.randint->randint_gen(name='randint', longname='A discrete uniform (random integer)', shapes='min, max')
A:scipy.stats.distributions.sv->scipy.special.errprint(sv)
A:scipy.stats.distributions.zipf->zipf_gen(a=1, name='zipf', longname='A Zipf', shapes='a')
A:scipy.stats.distributions.ea->exp(-a)
A:scipy.stats.distributions.e2a->exp(-2 * a)
A:scipy.stats.distributions.e3a->exp(-3 * a)
A:scipy.stats.distributions.e4a->exp(-4 * a)
A:scipy.stats.distributions.dlaplace->dlaplace_gen(a=-inf, name='dlaplace', longname='A discrete Laplacian', shapes='a')
A:scipy.stats.distributions.px->numpy.where(x < 0, ncx2.cdf(2 * mu2, -2 * x, 2 * mu1), 1 - ncx2.cdf(2 * mu1, 2 * (x + 1), 2 * mu2))
A:scipy.stats.distributions.skellam->skellam_gen(a=-np.inf, name='skellam', longname='A Skellam', shapes='mu1,mu2')
scipy.stats._drv2_moment(self,n,*args)
scipy.stats._drv2_ppfsingle(self,q,*args)
scipy.stats._drv_cdf(self,xk,*args)
scipy.stats._drv_moment(self,n,*args)
scipy.stats._drv_moment_gen(self,t,*args)
scipy.stats._drv_nonzero(self,k,*args)
scipy.stats._drv_pmf(self,xk,*args)
scipy.stats._drv_ppf(self,q,*args)
scipy.stats._kurtosis(data)
scipy.stats._moment(data,n,mu=None)
scipy.stats._moment_from_stats(n,mu,mu2,g1,g2,moment_func,args)
scipy.stats._norm_cdf(x)
scipy.stats._norm_logcdf(x)
scipy.stats._norm_logpdf(x)
scipy.stats._norm_pdf(x)
scipy.stats._norm_ppf(q)
scipy.stats._skew(data)
scipy.stats.alpha_gen(rv_continuous)
scipy.stats.alpha_gen._cdf(self,x,a)
scipy.stats.alpha_gen._logpdf(self,x,a)
scipy.stats.alpha_gen._pdf(self,x,a)
scipy.stats.alpha_gen._ppf(self,q,a)
scipy.stats.alpha_gen._stats(self,a)
scipy.stats.anglit_gen(rv_continuous)
scipy.stats.anglit_gen._cdf(self,x)
scipy.stats.anglit_gen._entropy(self)
scipy.stats.anglit_gen._pdf(self,x)
scipy.stats.anglit_gen._ppf(self,q)
scipy.stats.anglit_gen._stats(self)
scipy.stats.arcsine_gen(rv_continuous)
scipy.stats.arcsine_gen._cdf(self,x)
scipy.stats.arcsine_gen._entropy(self)
scipy.stats.arcsine_gen._pdf(self,x)
scipy.stats.arcsine_gen._ppf(self,q)
scipy.stats.arcsine_gen._stats(self)
scipy.stats.argsreduce(cond,*args)
scipy.stats.bernoulli_gen(binom_gen)
scipy.stats.bernoulli_gen._argcheck(self,pr)
scipy.stats.bernoulli_gen._cdf(self,x,pr)
scipy.stats.bernoulli_gen._entropy(self,pr)
scipy.stats.bernoulli_gen._logpmf(self,x,pr)
scipy.stats.bernoulli_gen._pmf(self,x,pr)
scipy.stats.bernoulli_gen._ppf(self,q,pr)
scipy.stats.bernoulli_gen._rvs(self,pr)
scipy.stats.bernoulli_gen._sf(self,x,pr)
scipy.stats.bernoulli_gen._stats(self,pr)
scipy.stats.beta_gen(rv_continuous)
scipy.stats.beta_gen._cdf(self,x,a,b)
scipy.stats.beta_gen._fitstart(self,data)
scipy.stats.beta_gen._logpdf(self,x,a,b)
scipy.stats.beta_gen._pdf(self,x,a,b)
scipy.stats.beta_gen._ppf(self,q,a,b)
scipy.stats.beta_gen._rvs(self,a,b)
scipy.stats.beta_gen._stats(self,a,b)
scipy.stats.beta_gen.fit(self,data,*args,**kwds)
scipy.stats.betaprime_gen(rv_continuous)
scipy.stats.betaprime_gen._cdf_skip(self,x,a,b)
scipy.stats.betaprime_gen._logpdf(self,x,a,b)
scipy.stats.betaprime_gen._munp(self,n,a,b)
scipy.stats.betaprime_gen._pdf(self,x,a,b)
scipy.stats.betaprime_gen._rvs(self,a,b)
scipy.stats.binom_gen(rv_discrete)
scipy.stats.binom_gen._argcheck(self,n,p)
scipy.stats.binom_gen._cdf(self,x,n,p)
scipy.stats.binom_gen._entropy(self,n,p)
scipy.stats.binom_gen._logpmf(self,x,n,p)
scipy.stats.binom_gen._pmf(self,x,n,p)
scipy.stats.binom_gen._ppf(self,q,n,p)
scipy.stats.binom_gen._rvs(self,n,p)
scipy.stats.binom_gen._sf(self,x,n,p)
scipy.stats.binom_gen._stats(self,n,p)
scipy.stats.boltzmann_gen(rv_discrete)
scipy.stats.boltzmann_gen._cdf(self,x,lambda_,N)
scipy.stats.boltzmann_gen._pmf(self,k,lambda_,N)
scipy.stats.boltzmann_gen._ppf(self,q,lambda_,N)
scipy.stats.boltzmann_gen._stats(self,lambda_,N)
scipy.stats.bradford_gen(rv_continuous)
scipy.stats.bradford_gen._cdf(self,x,c)
scipy.stats.bradford_gen._entropy(self,c)
scipy.stats.bradford_gen._pdf(self,x,c)
scipy.stats.bradford_gen._ppf(self,q,c)
scipy.stats.bradford_gen._stats(self,c,moments='mv')
scipy.stats.burr_gen(rv_continuous)
scipy.stats.burr_gen._cdf(self,x,c,d)
scipy.stats.burr_gen._pdf(self,x,c,d)
scipy.stats.burr_gen._ppf(self,q,c,d)
scipy.stats.burr_gen._stats(self,c,d,moments='mv')
scipy.stats.cauchy_gen(rv_continuous)
scipy.stats.cauchy_gen._cdf(self,x)
scipy.stats.cauchy_gen._entropy(self)
scipy.stats.cauchy_gen._fitstart(data,args=None)
scipy.stats.cauchy_gen._isf(self,q)
scipy.stats.cauchy_gen._pdf(self,x)
scipy.stats.cauchy_gen._ppf(self,q)
scipy.stats.cauchy_gen._sf(self,x)
scipy.stats.cauchy_gen._stats(self)
scipy.stats.chi2_gen(rv_continuous)
scipy.stats.chi2_gen._cdf(self,x,df)
scipy.stats.chi2_gen._isf(self,p,df)
scipy.stats.chi2_gen._logpdf(self,x,df)
scipy.stats.chi2_gen._pdf(self,x,df)
scipy.stats.chi2_gen._ppf(self,p,df)
scipy.stats.chi2_gen._rvs(self,df)
scipy.stats.chi2_gen._sf(self,x,df)
scipy.stats.chi2_gen._stats(self,df)
scipy.stats.chi_gen(rv_continuous)
scipy.stats.chi_gen._cdf(self,x,df)
scipy.stats.chi_gen._pdf(self,x,df)
scipy.stats.chi_gen._ppf(self,q,df)
scipy.stats.chi_gen._rvs(self,df)
scipy.stats.chi_gen._stats(self,df)
scipy.stats.cosine_gen(rv_continuous)
scipy.stats.cosine_gen._cdf(self,x)
scipy.stats.cosine_gen._entropy(self)
scipy.stats.cosine_gen._pdf(self,x)
scipy.stats.cosine_gen._stats(self)
scipy.stats.dgamma_gen(rv_continuous)
scipy.stats.dgamma_gen._cdf(self,x,a)
scipy.stats.dgamma_gen._logpdf(self,x,a)
scipy.stats.dgamma_gen._pdf(self,x,a)
scipy.stats.dgamma_gen._ppf(self,q,a)
scipy.stats.dgamma_gen._rvs(self,a)
scipy.stats.dgamma_gen._sf(self,x,a)
scipy.stats.dgamma_gen._stats(self,a)
scipy.stats.distributions._drv2_moment(self,n,*args)
scipy.stats.distributions._drv2_ppfsingle(self,q,*args)
scipy.stats.distributions._drv_cdf(self,xk,*args)
scipy.stats.distributions._drv_moment(self,n,*args)
scipy.stats.distributions._drv_moment_gen(self,t,*args)
scipy.stats.distributions._drv_nonzero(self,k,*args)
scipy.stats.distributions._drv_pmf(self,xk,*args)
scipy.stats.distributions._drv_ppf(self,q,*args)
scipy.stats.distributions._kurtosis(data)
scipy.stats.distributions._moment(data,n,mu=None)
scipy.stats.distributions._moment_from_stats(n,mu,mu2,g1,g2,moment_func,args)
scipy.stats.distributions._norm_cdf(x)
scipy.stats.distributions._norm_logcdf(x)
scipy.stats.distributions._norm_logpdf(x)
scipy.stats.distributions._norm_pdf(x)
scipy.stats.distributions._norm_ppf(q)
scipy.stats.distributions._skew(data)
scipy.stats.distributions.alpha_gen(rv_continuous)
scipy.stats.distributions.alpha_gen._cdf(self,x,a)
scipy.stats.distributions.alpha_gen._logpdf(self,x,a)
scipy.stats.distributions.alpha_gen._pdf(self,x,a)
scipy.stats.distributions.alpha_gen._ppf(self,q,a)
scipy.stats.distributions.alpha_gen._stats(self,a)
scipy.stats.distributions.anglit_gen(rv_continuous)
scipy.stats.distributions.anglit_gen._cdf(self,x)
scipy.stats.distributions.anglit_gen._entropy(self)
scipy.stats.distributions.anglit_gen._pdf(self,x)
scipy.stats.distributions.anglit_gen._ppf(self,q)
scipy.stats.distributions.anglit_gen._stats(self)
scipy.stats.distributions.arcsine_gen(rv_continuous)
scipy.stats.distributions.arcsine_gen._cdf(self,x)
scipy.stats.distributions.arcsine_gen._entropy(self)
scipy.stats.distributions.arcsine_gen._pdf(self,x)
scipy.stats.distributions.arcsine_gen._ppf(self,q)
scipy.stats.distributions.arcsine_gen._stats(self)
scipy.stats.distributions.argsreduce(cond,*args)
scipy.stats.distributions.bernoulli_gen(binom_gen)
scipy.stats.distributions.bernoulli_gen._argcheck(self,pr)
scipy.stats.distributions.bernoulli_gen._cdf(self,x,pr)
scipy.stats.distributions.bernoulli_gen._entropy(self,pr)
scipy.stats.distributions.bernoulli_gen._logpmf(self,x,pr)
scipy.stats.distributions.bernoulli_gen._pmf(self,x,pr)
scipy.stats.distributions.bernoulli_gen._ppf(self,q,pr)
scipy.stats.distributions.bernoulli_gen._rvs(self,pr)
scipy.stats.distributions.bernoulli_gen._sf(self,x,pr)
scipy.stats.distributions.bernoulli_gen._stats(self,pr)
scipy.stats.distributions.beta_gen(rv_continuous)
scipy.stats.distributions.beta_gen._cdf(self,x,a,b)
scipy.stats.distributions.beta_gen._fitstart(self,data)
scipy.stats.distributions.beta_gen._logpdf(self,x,a,b)
scipy.stats.distributions.beta_gen._pdf(self,x,a,b)
scipy.stats.distributions.beta_gen._ppf(self,q,a,b)
scipy.stats.distributions.beta_gen._rvs(self,a,b)
scipy.stats.distributions.beta_gen._stats(self,a,b)
scipy.stats.distributions.beta_gen.fit(self,data,*args,**kwds)
scipy.stats.distributions.betaprime_gen(rv_continuous)
scipy.stats.distributions.betaprime_gen._cdf_skip(self,x,a,b)
scipy.stats.distributions.betaprime_gen._logpdf(self,x,a,b)
scipy.stats.distributions.betaprime_gen._munp(self,n,a,b)
scipy.stats.distributions.betaprime_gen._pdf(self,x,a,b)
scipy.stats.distributions.betaprime_gen._rvs(self,a,b)
scipy.stats.distributions.binom_gen(rv_discrete)
scipy.stats.distributions.binom_gen._argcheck(self,n,p)
scipy.stats.distributions.binom_gen._cdf(self,x,n,p)
scipy.stats.distributions.binom_gen._entropy(self,n,p)
scipy.stats.distributions.binom_gen._logpmf(self,x,n,p)
scipy.stats.distributions.binom_gen._pmf(self,x,n,p)
scipy.stats.distributions.binom_gen._ppf(self,q,n,p)
scipy.stats.distributions.binom_gen._rvs(self,n,p)
scipy.stats.distributions.binom_gen._sf(self,x,n,p)
scipy.stats.distributions.binom_gen._stats(self,n,p)
scipy.stats.distributions.boltzmann_gen(rv_discrete)
scipy.stats.distributions.boltzmann_gen._cdf(self,x,lambda_,N)
scipy.stats.distributions.boltzmann_gen._pmf(self,k,lambda_,N)
scipy.stats.distributions.boltzmann_gen._ppf(self,q,lambda_,N)
scipy.stats.distributions.boltzmann_gen._stats(self,lambda_,N)
scipy.stats.distributions.bradford_gen(rv_continuous)
scipy.stats.distributions.bradford_gen._cdf(self,x,c)
scipy.stats.distributions.bradford_gen._entropy(self,c)
scipy.stats.distributions.bradford_gen._pdf(self,x,c)
scipy.stats.distributions.bradford_gen._ppf(self,q,c)
scipy.stats.distributions.bradford_gen._stats(self,c,moments='mv')
scipy.stats.distributions.burr_gen(rv_continuous)
scipy.stats.distributions.burr_gen._cdf(self,x,c,d)
scipy.stats.distributions.burr_gen._pdf(self,x,c,d)
scipy.stats.distributions.burr_gen._ppf(self,q,c,d)
scipy.stats.distributions.burr_gen._stats(self,c,d,moments='mv')
scipy.stats.distributions.cauchy_gen(rv_continuous)
scipy.stats.distributions.cauchy_gen._cdf(self,x)
scipy.stats.distributions.cauchy_gen._entropy(self)
scipy.stats.distributions.cauchy_gen._fitstart(data,args=None)
scipy.stats.distributions.cauchy_gen._isf(self,q)
scipy.stats.distributions.cauchy_gen._pdf(self,x)
scipy.stats.distributions.cauchy_gen._ppf(self,q)
scipy.stats.distributions.cauchy_gen._sf(self,x)
scipy.stats.distributions.cauchy_gen._stats(self)
scipy.stats.distributions.chi2_gen(rv_continuous)
scipy.stats.distributions.chi2_gen._cdf(self,x,df)
scipy.stats.distributions.chi2_gen._isf(self,p,df)
scipy.stats.distributions.chi2_gen._logpdf(self,x,df)
scipy.stats.distributions.chi2_gen._pdf(self,x,df)
scipy.stats.distributions.chi2_gen._ppf(self,p,df)
scipy.stats.distributions.chi2_gen._rvs(self,df)
scipy.stats.distributions.chi2_gen._sf(self,x,df)
scipy.stats.distributions.chi2_gen._stats(self,df)
scipy.stats.distributions.chi_gen(rv_continuous)
scipy.stats.distributions.chi_gen._cdf(self,x,df)
scipy.stats.distributions.chi_gen._pdf(self,x,df)
scipy.stats.distributions.chi_gen._ppf(self,q,df)
scipy.stats.distributions.chi_gen._rvs(self,df)
scipy.stats.distributions.chi_gen._stats(self,df)
scipy.stats.distributions.cosine_gen(rv_continuous)
scipy.stats.distributions.cosine_gen._cdf(self,x)
scipy.stats.distributions.cosine_gen._entropy(self)
scipy.stats.distributions.cosine_gen._pdf(self,x)
scipy.stats.distributions.cosine_gen._stats(self)
scipy.stats.distributions.dgamma_gen(rv_continuous)
scipy.stats.distributions.dgamma_gen._cdf(self,x,a)
scipy.stats.distributions.dgamma_gen._logpdf(self,x,a)
scipy.stats.distributions.dgamma_gen._pdf(self,x,a)
scipy.stats.distributions.dgamma_gen._ppf(self,q,a)
scipy.stats.distributions.dgamma_gen._rvs(self,a)
scipy.stats.distributions.dgamma_gen._sf(self,x,a)
scipy.stats.distributions.dgamma_gen._stats(self,a)
scipy.stats.distributions.dlaplace_gen(rv_discrete)
scipy.stats.distributions.dlaplace_gen._cdf(self,x,a)
scipy.stats.distributions.dlaplace_gen._entropy(self,a)
scipy.stats.distributions.dlaplace_gen._pmf(self,k,a)
scipy.stats.distributions.dlaplace_gen._ppf(self,q,a)
scipy.stats.distributions.dlaplace_gen._stats_skip(self,a)
scipy.stats.distributions.dweibull_gen(rv_continuous)
scipy.stats.distributions.dweibull_gen._cdf(self,x,c)
scipy.stats.distributions.dweibull_gen._logpdf(self,x,c)
scipy.stats.distributions.dweibull_gen._pdf(self,x,c)
scipy.stats.distributions.dweibull_gen._ppf_skip(self,q,c)
scipy.stats.distributions.dweibull_gen._rvs(self,c)
scipy.stats.distributions.dweibull_gen._stats(self,c)
scipy.stats.distributions.entropy(pk,qk=None,base=None)
scipy.stats.distributions.erlang_gen(rv_continuous)
scipy.stats.distributions.erlang_gen._arg_check(self,a)
scipy.stats.distributions.erlang_gen._cdf(self,x,a)
scipy.stats.distributions.erlang_gen._entropy(self,a)
scipy.stats.distributions.erlang_gen._logpdf(self,x,a)
scipy.stats.distributions.erlang_gen._pdf(self,x,a)
scipy.stats.distributions.erlang_gen._ppf(self,q,a)
scipy.stats.distributions.erlang_gen._rvs(self,a)
scipy.stats.distributions.erlang_gen._sf(self,x,a)
scipy.stats.distributions.erlang_gen._stats(self,a)
scipy.stats.distributions.expon_gen(rv_continuous)
scipy.stats.distributions.expon_gen._cdf(self,x)
scipy.stats.distributions.expon_gen._entropy(self)
scipy.stats.distributions.expon_gen._isf(self,q)
scipy.stats.distributions.expon_gen._logpdf(self,x)
scipy.stats.distributions.expon_gen._logsf(self,x)
scipy.stats.distributions.expon_gen._pdf(self,x)
scipy.stats.distributions.expon_gen._ppf(self,q)
scipy.stats.distributions.expon_gen._rvs(self)
scipy.stats.distributions.expon_gen._sf(self,x)
scipy.stats.distributions.expon_gen._stats(self)
scipy.stats.distributions.exponpow_gen(rv_continuous)
scipy.stats.distributions.exponpow_gen._cdf(self,x,b)
scipy.stats.distributions.exponpow_gen._isf(self,x,b)
scipy.stats.distributions.exponpow_gen._logpdf(self,x,b)
scipy.stats.distributions.exponpow_gen._pdf(self,x,b)
scipy.stats.distributions.exponpow_gen._ppf(self,q,b)
scipy.stats.distributions.exponpow_gen._sf(self,x,b)
scipy.stats.distributions.exponweib_gen(rv_continuous)
scipy.stats.distributions.exponweib_gen._cdf(self,x,a,c)
scipy.stats.distributions.exponweib_gen._logpdf(self,x,a,c)
scipy.stats.distributions.exponweib_gen._pdf(self,x,a,c)
scipy.stats.distributions.exponweib_gen._ppf(self,q,a,c)
scipy.stats.distributions.f_gen(rv_continuous)
scipy.stats.distributions.f_gen._cdf(self,x,dfn,dfd)
scipy.stats.distributions.f_gen._logpdf(self,x,dfn,dfd)
scipy.stats.distributions.f_gen._pdf(self,x,dfn,dfd)
scipy.stats.distributions.f_gen._ppf(self,q,dfn,dfd)
scipy.stats.distributions.f_gen._rvs(self,dfn,dfd)
scipy.stats.distributions.f_gen._sf(self,x,dfn,dfd)
scipy.stats.distributions.f_gen._stats(self,dfn,dfd)
scipy.stats.distributions.fatiguelife_gen(rv_continuous)
scipy.stats.distributions.fatiguelife_gen._cdf(self,x,c)
scipy.stats.distributions.fatiguelife_gen._logpdf(self,x,c)
scipy.stats.distributions.fatiguelife_gen._pdf(self,x,c)
scipy.stats.distributions.fatiguelife_gen._ppf(self,q,c)
scipy.stats.distributions.fatiguelife_gen._rvs(self,c)
scipy.stats.distributions.fatiguelife_gen._stats(self,c)
scipy.stats.distributions.fisk_gen(burr_gen)
scipy.stats.distributions.fisk_gen._cdf(self,x,c)
scipy.stats.distributions.fisk_gen._entropy(self,c)
scipy.stats.distributions.fisk_gen._pdf(self,x,c)
scipy.stats.distributions.fisk_gen._ppf(self,x,c)
scipy.stats.distributions.fisk_gen._stats(self,c)
scipy.stats.distributions.foldcauchy_gen(rv_continuous)
scipy.stats.distributions.foldcauchy_gen._cdf(self,x,c)
scipy.stats.distributions.foldcauchy_gen._pdf(self,x,c)
scipy.stats.distributions.foldcauchy_gen._rvs(self,c)
scipy.stats.distributions.foldcauchy_gen._stats(self,c)
scipy.stats.distributions.foldnorm_gen(rv_continuous)
scipy.stats.distributions.foldnorm_gen._cdf(self,x,c)
scipy.stats.distributions.foldnorm_gen._pdf(self,x,c)
scipy.stats.distributions.foldnorm_gen._rvs(self,c)
scipy.stats.distributions.foldnorm_gen._stats(self,c)
scipy.stats.distributions.frechet_l_gen(rv_continuous)
scipy.stats.distributions.frechet_l_gen._cdf(self,x,c)
scipy.stats.distributions.frechet_l_gen._entropy(self,c)
scipy.stats.distributions.frechet_l_gen._munp(self,n,c)
scipy.stats.distributions.frechet_l_gen._pdf(self,x,c)
scipy.stats.distributions.frechet_l_gen._ppf(self,q,c)
scipy.stats.distributions.frechet_r_gen(rv_continuous)
scipy.stats.distributions.frechet_r_gen._cdf(self,x,c)
scipy.stats.distributions.frechet_r_gen._entropy(self,c)
scipy.stats.distributions.frechet_r_gen._logpdf(self,x,c)
scipy.stats.distributions.frechet_r_gen._munp(self,n,c)
scipy.stats.distributions.frechet_r_gen._pdf(self,x,c)
scipy.stats.distributions.frechet_r_gen._ppf(self,q,c)
scipy.stats.distributions.gamma_gen(rv_continuous)
scipy.stats.distributions.gamma_gen._cdf(self,x,a)
scipy.stats.distributions.gamma_gen._entropy(self,a)
scipy.stats.distributions.gamma_gen._fitstart(self,data)
scipy.stats.distributions.gamma_gen._logpdf(self,x,a)
scipy.stats.distributions.gamma_gen._pdf(self,x,a)
scipy.stats.distributions.gamma_gen._ppf(self,q,a)
scipy.stats.distributions.gamma_gen._rvs(self,a)
scipy.stats.distributions.gamma_gen._stats(self,a)
scipy.stats.distributions.gamma_gen.fit(self,data,*args,**kwds)
scipy.stats.distributions.gausshyper_gen(rv_continuous)
scipy.stats.distributions.gausshyper_gen._argcheck(self,a,b,c,z)
scipy.stats.distributions.gausshyper_gen._munp(self,n,a,b,c,z)
scipy.stats.distributions.gausshyper_gen._pdf(self,x,a,b,c,z)
scipy.stats.distributions.genexpon_gen(rv_continuous)
scipy.stats.distributions.genexpon_gen._cdf(self,x,a,b,c)
scipy.stats.distributions.genexpon_gen._logpdf(self,x,a,b,c)
scipy.stats.distributions.genexpon_gen._pdf(self,x,a,b,c)
scipy.stats.distributions.genextreme_gen(rv_continuous)
scipy.stats.distributions.genextreme_gen._argcheck(self,c)
scipy.stats.distributions.genextreme_gen._cdf(self,x,c)
scipy.stats.distributions.genextreme_gen._munp(self,n,c)
scipy.stats.distributions.genextreme_gen._pdf(self,x,c)
scipy.stats.distributions.genextreme_gen._ppf(self,q,c)
scipy.stats.distributions.genextreme_gen._stats(self,c)
scipy.stats.distributions.gengamma_gen(rv_continuous)
scipy.stats.distributions.gengamma_gen._argcheck(self,a,c)
scipy.stats.distributions.gengamma_gen._cdf(self,x,a,c)
scipy.stats.distributions.gengamma_gen._entropy(self,a,c)
scipy.stats.distributions.gengamma_gen._munp(self,n,a,c)
scipy.stats.distributions.gengamma_gen._pdf(self,x,a,c)
scipy.stats.distributions.gengamma_gen._ppf(self,q,a,c)
scipy.stats.distributions.genhalflogistic_gen(rv_continuous)
scipy.stats.distributions.genhalflogistic_gen._argcheck(self,c)
scipy.stats.distributions.genhalflogistic_gen._cdf(self,x,c)
scipy.stats.distributions.genhalflogistic_gen._entropy(self,c)
scipy.stats.distributions.genhalflogistic_gen._pdf(self,x,c)
scipy.stats.distributions.genhalflogistic_gen._ppf(self,q,c)
scipy.stats.distributions.genlogistic_gen(rv_continuous)
scipy.stats.distributions.genlogistic_gen._cdf(self,x,c)
scipy.stats.distributions.genlogistic_gen._logpdf(self,x,c)
scipy.stats.distributions.genlogistic_gen._pdf(self,x,c)
scipy.stats.distributions.genlogistic_gen._ppf(self,q,c)
scipy.stats.distributions.genlogistic_gen._stats(self,c)
scipy.stats.distributions.genpareto_gen(rv_continuous)
scipy.stats.distributions.genpareto_gen._argcheck(self,c)
scipy.stats.distributions.genpareto_gen._cdf(self,x,c)
scipy.stats.distributions.genpareto_gen._entropy(self,c)
scipy.stats.distributions.genpareto_gen._logpdf(self,x,c)
scipy.stats.distributions.genpareto_gen._munp(self,n,c)
scipy.stats.distributions.genpareto_gen._pdf(self,x,c)
scipy.stats.distributions.genpareto_gen._ppf(self,q,c)
scipy.stats.distributions.geom_gen(rv_discrete)
scipy.stats.distributions.geom_gen._argcheck(self,p)
scipy.stats.distributions.geom_gen._cdf(self,x,p)
scipy.stats.distributions.geom_gen._logpmf(self,k,p)
scipy.stats.distributions.geom_gen._pmf(self,k,p)
scipy.stats.distributions.geom_gen._ppf(self,q,p)
scipy.stats.distributions.geom_gen._rvs(self,p)
scipy.stats.distributions.geom_gen._sf(self,x,p)
scipy.stats.distributions.geom_gen._stats(self,p)
scipy.stats.distributions.gilbrat_gen(lognorm_gen)
scipy.stats.distributions.gilbrat_gen._cdf(self,x)
scipy.stats.distributions.gilbrat_gen._entropy(self)
scipy.stats.distributions.gilbrat_gen._pdf(self,x)
scipy.stats.distributions.gilbrat_gen._ppf(self,q)
scipy.stats.distributions.gilbrat_gen._rvs(self)
scipy.stats.distributions.gilbrat_gen._stats(self)
scipy.stats.distributions.gompertz_gen(rv_continuous)
scipy.stats.distributions.gompertz_gen._cdf(self,x,c)
scipy.stats.distributions.gompertz_gen._entropy(self,c)
scipy.stats.distributions.gompertz_gen._pdf(self,x,c)
scipy.stats.distributions.gompertz_gen._ppf(self,q,c)
scipy.stats.distributions.gumbel_l_gen(rv_continuous)
scipy.stats.distributions.gumbel_l_gen._cdf(self,x)
scipy.stats.distributions.gumbel_l_gen._entropy(self)
scipy.stats.distributions.gumbel_l_gen._logpdf(self,x)
scipy.stats.distributions.gumbel_l_gen._pdf(self,x)
scipy.stats.distributions.gumbel_l_gen._ppf(self,q)
scipy.stats.distributions.gumbel_l_gen._stats(self)
scipy.stats.distributions.gumbel_r_gen(rv_continuous)
scipy.stats.distributions.gumbel_r_gen._cdf(self,x)
scipy.stats.distributions.gumbel_r_gen._entropy(self)
scipy.stats.distributions.gumbel_r_gen._logcdf(self,x)
scipy.stats.distributions.gumbel_r_gen._logpdf(self,x)
scipy.stats.distributions.gumbel_r_gen._pdf(self,x)
scipy.stats.distributions.gumbel_r_gen._ppf(self,q)
scipy.stats.distributions.gumbel_r_gen._stats(self)
scipy.stats.distributions.halfcauchy_gen(rv_continuous)
scipy.stats.distributions.halfcauchy_gen._cdf(self,x)
scipy.stats.distributions.halfcauchy_gen._entropy(self)
scipy.stats.distributions.halfcauchy_gen._logpdf(self,x)
scipy.stats.distributions.halfcauchy_gen._pdf(self,x)
scipy.stats.distributions.halfcauchy_gen._ppf(self,q)
scipy.stats.distributions.halfcauchy_gen._stats(self)
scipy.stats.distributions.halflogistic_gen(rv_continuous)
scipy.stats.distributions.halflogistic_gen._cdf(self,x)
scipy.stats.distributions.halflogistic_gen._entropy(self)
scipy.stats.distributions.halflogistic_gen._munp(self,n)
scipy.stats.distributions.halflogistic_gen._pdf(self,x)
scipy.stats.distributions.halflogistic_gen._ppf(self,q)
scipy.stats.distributions.halfnorm_gen(rv_continuous)
scipy.stats.distributions.halfnorm_gen._cdf(self,x)
scipy.stats.distributions.halfnorm_gen._entropy(self)
scipy.stats.distributions.halfnorm_gen._logpdf(self,x)
scipy.stats.distributions.halfnorm_gen._pdf(self,x)
scipy.stats.distributions.halfnorm_gen._ppf(self,q)
scipy.stats.distributions.halfnorm_gen._rvs(self)
scipy.stats.distributions.halfnorm_gen._stats(self)
scipy.stats.distributions.hypergeom_gen(rv_discrete)
scipy.stats.distributions.hypergeom_gen._argcheck(self,M,n,N)
scipy.stats.distributions.hypergeom_gen._entropy(self,M,n,N)
scipy.stats.distributions.hypergeom_gen._logpmf(self,k,M,n,N)
scipy.stats.distributions.hypergeom_gen._pmf(self,k,M,n,N)
scipy.stats.distributions.hypergeom_gen._rvs(self,M,n,N)
scipy.stats.distributions.hypergeom_gen._sf(self,k,M,n,N)
scipy.stats.distributions.hypergeom_gen._stats(self,M,n,N)
scipy.stats.distributions.hypsecant_gen(rv_continuous)
scipy.stats.distributions.hypsecant_gen._cdf(self,x)
scipy.stats.distributions.hypsecant_gen._entropy(self)
scipy.stats.distributions.hypsecant_gen._pdf(self,x)
scipy.stats.distributions.hypsecant_gen._ppf(self,q)
scipy.stats.distributions.hypsecant_gen._stats(self)
scipy.stats.distributions.invgamma_gen(rv_continuous)
scipy.stats.distributions.invgamma_gen._cdf(self,x,a)
scipy.stats.distributions.invgamma_gen._entropy(self,a)
scipy.stats.distributions.invgamma_gen._logpdf(self,x,a)
scipy.stats.distributions.invgamma_gen._munp(self,n,a)
scipy.stats.distributions.invgamma_gen._pdf(self,x,a)
scipy.stats.distributions.invgamma_gen._ppf(self,q,a)
scipy.stats.distributions.invgauss_gen(rv_continuous)
scipy.stats.distributions.invgauss_gen._cdf(self,x,mu)
scipy.stats.distributions.invgauss_gen._logpdf(self,x,mu)
scipy.stats.distributions.invgauss_gen._pdf(self,x,mu)
scipy.stats.distributions.invgauss_gen._rvs(self,mu)
scipy.stats.distributions.invgauss_gen._stats(self,mu)
scipy.stats.distributions.invweibull_gen(rv_continuous)
scipy.stats.distributions.invweibull_gen._cdf(self,x,c)
scipy.stats.distributions.invweibull_gen._entropy(self,c)
scipy.stats.distributions.invweibull_gen._pdf(self,x,c)
scipy.stats.distributions.invweibull_gen._ppf(self,q,c)
scipy.stats.distributions.johnsonsb_gen(rv_continuous)
scipy.stats.distributions.johnsonsb_gen._argcheck(self,a,b)
scipy.stats.distributions.johnsonsb_gen._cdf(self,x,a,b)
scipy.stats.distributions.johnsonsb_gen._pdf(self,x,a,b)
scipy.stats.distributions.johnsonsb_gen._ppf(self,q,a,b)
scipy.stats.distributions.johnsonsu_gen(rv_continuous)
scipy.stats.distributions.johnsonsu_gen._argcheck(self,a,b)
scipy.stats.distributions.johnsonsu_gen._cdf(self,x,a,b)
scipy.stats.distributions.johnsonsu_gen._pdf(self,x,a,b)
scipy.stats.distributions.johnsonsu_gen._ppf(self,q,a,b)
scipy.stats.distributions.ksone_gen(rv_continuous)
scipy.stats.distributions.ksone_gen._cdf(self,x,n)
scipy.stats.distributions.ksone_gen._ppf(self,q,n)
scipy.stats.distributions.kstwobign_gen(rv_continuous)
scipy.stats.distributions.kstwobign_gen._cdf(self,x)
scipy.stats.distributions.kstwobign_gen._ppf(self,q)
scipy.stats.distributions.kstwobign_gen._sf(self,x)
scipy.stats.distributions.laplace_gen(rv_continuous)
scipy.stats.distributions.laplace_gen._cdf(self,x)
scipy.stats.distributions.laplace_gen._entropy(self)
scipy.stats.distributions.laplace_gen._pdf(self,x)
scipy.stats.distributions.laplace_gen._ppf(self,q)
scipy.stats.distributions.laplace_gen._rvs(self)
scipy.stats.distributions.laplace_gen._stats(self)
scipy.stats.distributions.levy_gen(rv_continuous)
scipy.stats.distributions.levy_gen._cdf(self,x)
scipy.stats.distributions.levy_gen._pdf(self,x)
scipy.stats.distributions.levy_gen._ppf(self,q)
scipy.stats.distributions.levy_gen._stats(self)
scipy.stats.distributions.levy_l_gen(rv_continuous)
scipy.stats.distributions.levy_l_gen._cdf(self,x)
scipy.stats.distributions.levy_l_gen._pdf(self,x)
scipy.stats.distributions.levy_l_gen._ppf(self,q)
scipy.stats.distributions.levy_l_gen._stats(self)
scipy.stats.distributions.levy_stable_gen(rv_continuous)
scipy.stats.distributions.levy_stable_gen._argcheck(self,alpha,beta)
scipy.stats.distributions.levy_stable_gen._pdf(self,x,alpha,beta)
scipy.stats.distributions.levy_stable_gen._rvs(self,alpha,beta)
scipy.stats.distributions.loggamma_gen(rv_continuous)
scipy.stats.distributions.loggamma_gen._cdf(self,x,c)
scipy.stats.distributions.loggamma_gen._munp(self,n,*args)
scipy.stats.distributions.loggamma_gen._pdf(self,x,c)
scipy.stats.distributions.loggamma_gen._ppf(self,q,c)
scipy.stats.distributions.loggamma_gen._rvs(self,c)
scipy.stats.distributions.logistic_gen(rv_continuous)
scipy.stats.distributions.logistic_gen._cdf(self,x)
scipy.stats.distributions.logistic_gen._entropy(self)
scipy.stats.distributions.logistic_gen._pdf(self,x)
scipy.stats.distributions.logistic_gen._ppf(self,q)
scipy.stats.distributions.logistic_gen._rvs(self)
scipy.stats.distributions.logistic_gen._stats(self)
scipy.stats.distributions.loglaplace_gen(rv_continuous)
scipy.stats.distributions.loglaplace_gen._cdf(self,x,c)
scipy.stats.distributions.loglaplace_gen._entropy(self,c)
scipy.stats.distributions.loglaplace_gen._pdf(self,x,c)
scipy.stats.distributions.loglaplace_gen._ppf(self,q,c)
scipy.stats.distributions.lognorm_gen(rv_continuous)
scipy.stats.distributions.lognorm_gen._cdf(self,x,s)
scipy.stats.distributions.lognorm_gen._entropy(self,s)
scipy.stats.distributions.lognorm_gen._pdf(self,x,s)
scipy.stats.distributions.lognorm_gen._ppf(self,q,s)
scipy.stats.distributions.lognorm_gen._rvs(self,s)
scipy.stats.distributions.lognorm_gen._stats(self,s)
scipy.stats.distributions.logser_gen(rv_discrete)
scipy.stats.distributions.logser_gen._argcheck(self,pr)
scipy.stats.distributions.logser_gen._pmf(self,k,pr)
scipy.stats.distributions.logser_gen._rvs(self,pr)
scipy.stats.distributions.logser_gen._stats(self,pr)
scipy.stats.distributions.lomax_gen(rv_continuous)
scipy.stats.distributions.lomax_gen._cdf(self,x,c)
scipy.stats.distributions.lomax_gen._entropy(self,c)
scipy.stats.distributions.lomax_gen._logpdf(self,x,c)
scipy.stats.distributions.lomax_gen._logsf(self,x,c)
scipy.stats.distributions.lomax_gen._pdf(self,x,c)
scipy.stats.distributions.lomax_gen._ppf(self,q,c)
scipy.stats.distributions.lomax_gen._sf(self,x,c)
scipy.stats.distributions.lomax_gen._stats(self,c)
scipy.stats.distributions.make_dict(keys,values)
scipy.stats.distributions.maxwell_gen(rv_continuous)
scipy.stats.distributions.maxwell_gen._cdf(self,x)
scipy.stats.distributions.maxwell_gen._entropy(self)
scipy.stats.distributions.maxwell_gen._pdf(self,x)
scipy.stats.distributions.maxwell_gen._ppf(self,q)
scipy.stats.distributions.maxwell_gen._rvs(self)
scipy.stats.distributions.maxwell_gen._stats(self)
scipy.stats.distributions.mielke_gen(rv_continuous)
scipy.stats.distributions.mielke_gen._cdf(self,x,k,s)
scipy.stats.distributions.mielke_gen._pdf(self,x,k,s)
scipy.stats.distributions.mielke_gen._ppf(self,q,k,s)
scipy.stats.distributions.nakagami_gen(rv_continuous)
scipy.stats.distributions.nakagami_gen._cdf(self,x,nu)
scipy.stats.distributions.nakagami_gen._pdf(self,x,nu)
scipy.stats.distributions.nakagami_gen._ppf(self,q,nu)
scipy.stats.distributions.nakagami_gen._stats(self,nu)
scipy.stats.distributions.nbinom_gen(rv_discrete)
scipy.stats.distributions.nbinom_gen._argcheck(self,n,p)
scipy.stats.distributions.nbinom_gen._cdf(self,x,n,p)
scipy.stats.distributions.nbinom_gen._logpmf(self,x,n,p)
scipy.stats.distributions.nbinom_gen._pmf(self,x,n,p)
scipy.stats.distributions.nbinom_gen._ppf(self,q,n,p)
scipy.stats.distributions.nbinom_gen._rvs(self,n,p)
scipy.stats.distributions.nbinom_gen._sf_skip(self,x,n,p)
scipy.stats.distributions.nbinom_gen._stats(self,n,p)
scipy.stats.distributions.ncf_gen(rv_continuous)
scipy.stats.distributions.ncf_gen._cdf(self,x,dfn,dfd,nc)
scipy.stats.distributions.ncf_gen._munp(self,n,dfn,dfd,nc)
scipy.stats.distributions.ncf_gen._pdf_skip(self,x,dfn,dfd,nc)
scipy.stats.distributions.ncf_gen._ppf(self,q,dfn,dfd,nc)
scipy.stats.distributions.ncf_gen._rvs(self,dfn,dfd,nc)
scipy.stats.distributions.ncf_gen._stats(self,dfn,dfd,nc)
scipy.stats.distributions.nct_gen(rv_continuous)
scipy.stats.distributions.nct_gen._cdf(self,x,df,nc)
scipy.stats.distributions.nct_gen._pdf(self,x,df,nc)
scipy.stats.distributions.nct_gen._ppf(self,q,df,nc)
scipy.stats.distributions.nct_gen._rvs(self,df,nc)
scipy.stats.distributions.nct_gen._stats(self,df,nc,moments='mv')
scipy.stats.distributions.ncx2_gen(rv_continuous)
scipy.stats.distributions.ncx2_gen._cdf(self,x,df,nc)
scipy.stats.distributions.ncx2_gen._logpdf(self,x,df,nc)
scipy.stats.distributions.ncx2_gen._pdf(self,x,df,nc)
scipy.stats.distributions.ncx2_gen._ppf(self,q,df,nc)
scipy.stats.distributions.ncx2_gen._rvs(self,df,nc)
scipy.stats.distributions.ncx2_gen._stats(self,df,nc)
scipy.stats.distributions.norm_gen(rv_continuous)
scipy.stats.distributions.norm_gen._cdf(self,x)
scipy.stats.distributions.norm_gen._entropy(self)
scipy.stats.distributions.norm_gen._isf(self,q)
scipy.stats.distributions.norm_gen._logcdf(self,x)
scipy.stats.distributions.norm_gen._logpdf(self,x)
scipy.stats.distributions.norm_gen._logsf(self,x)
scipy.stats.distributions.norm_gen._pdf(self,x)
scipy.stats.distributions.norm_gen._ppf(self,q)
scipy.stats.distributions.norm_gen._rvs(self)
scipy.stats.distributions.norm_gen._sf(self,x)
scipy.stats.distributions.norm_gen._stats(self)
scipy.stats.distributions.pareto_gen(rv_continuous)
scipy.stats.distributions.pareto_gen._cdf(self,x,b)
scipy.stats.distributions.pareto_gen._entropy(self,c)
scipy.stats.distributions.pareto_gen._pdf(self,x,b)
scipy.stats.distributions.pareto_gen._ppf(self,q,b)
scipy.stats.distributions.pareto_gen._stats(self,b,moments='mv')
scipy.stats.distributions.pearson3_gen(rv_continuous)
scipy.stats.distributions.pearson3_gen._argcheck(self,skew)
scipy.stats.distributions.pearson3_gen._cdf(self,x,skew)
scipy.stats.distributions.pearson3_gen._logpdf(self,x,skew)
scipy.stats.distributions.pearson3_gen._pdf(self,x,skew)
scipy.stats.distributions.pearson3_gen._ppf(self,q,skew)
scipy.stats.distributions.pearson3_gen._preprocess(self,x,skew)
scipy.stats.distributions.pearson3_gen._rvs(self,skew)
scipy.stats.distributions.pearson3_gen._stats(self,skew)
scipy.stats.distributions.planck_gen(rv_discrete)
scipy.stats.distributions.planck_gen._argcheck(self,lambda_)
scipy.stats.distributions.planck_gen._cdf(self,x,lambda_)
scipy.stats.distributions.planck_gen._entropy(self,lambda_)
scipy.stats.distributions.planck_gen._pmf(self,k,lambda_)
scipy.stats.distributions.planck_gen._ppf(self,q,lambda_)
scipy.stats.distributions.planck_gen._stats(self,lambda_)
scipy.stats.distributions.poisson_gen(rv_discrete)
scipy.stats.distributions.poisson_gen._cdf(self,x,mu)
scipy.stats.distributions.poisson_gen._logpmf(self,k,mu)
scipy.stats.distributions.poisson_gen._pmf(self,k,mu)
scipy.stats.distributions.poisson_gen._ppf(self,q,mu)
scipy.stats.distributions.poisson_gen._rvs(self,mu)
scipy.stats.distributions.poisson_gen._sf(self,x,mu)
scipy.stats.distributions.poisson_gen._stats(self,mu)
scipy.stats.distributions.powerlaw_gen(rv_continuous)
scipy.stats.distributions.powerlaw_gen._cdf(self,x,a)
scipy.stats.distributions.powerlaw_gen._entropy(self,a)
scipy.stats.distributions.powerlaw_gen._logcdf(self,x,a)
scipy.stats.distributions.powerlaw_gen._logpdf(self,x,a)
scipy.stats.distributions.powerlaw_gen._pdf(self,x,a)
scipy.stats.distributions.powerlaw_gen._ppf(self,q,a)
scipy.stats.distributions.powerlaw_gen._stats(self,a)
scipy.stats.distributions.powerlognorm_gen(rv_continuous)
scipy.stats.distributions.powerlognorm_gen._cdf(self,x,c,s)
scipy.stats.distributions.powerlognorm_gen._pdf(self,x,c,s)
scipy.stats.distributions.powerlognorm_gen._ppf(self,q,c,s)
scipy.stats.distributions.powernorm_gen(rv_continuous)
scipy.stats.distributions.powernorm_gen._cdf(self,x,c)
scipy.stats.distributions.powernorm_gen._logpdf(self,x,c)
scipy.stats.distributions.powernorm_gen._pdf(self,x,c)
scipy.stats.distributions.powernorm_gen._ppf(self,q,c)
scipy.stats.distributions.randint_gen(rv_discrete)
scipy.stats.distributions.randint_gen._argcheck(self,min,max)
scipy.stats.distributions.randint_gen._cdf(self,x,min,max)
scipy.stats.distributions.randint_gen._entropy(self,min,max)
scipy.stats.distributions.randint_gen._pmf(self,k,min,max)
scipy.stats.distributions.randint_gen._ppf(self,q,min,max)
scipy.stats.distributions.randint_gen._rvs(self,min,max=None)
scipy.stats.distributions.randint_gen._stats(self,min,max)
scipy.stats.distributions.rayleigh_gen(rv_continuous)
scipy.stats.distributions.rayleigh_gen._cdf(self,r)
scipy.stats.distributions.rayleigh_gen._entropy(self)
scipy.stats.distributions.rayleigh_gen._pdf(self,r)
scipy.stats.distributions.rayleigh_gen._ppf(self,q)
scipy.stats.distributions.rayleigh_gen._rvs(self)
scipy.stats.distributions.rayleigh_gen._stats(self)
scipy.stats.distributions.rdist_gen(rv_continuous)
scipy.stats.distributions.rdist_gen._cdf_skip(self,x,c)
scipy.stats.distributions.rdist_gen._munp(self,n,c)
scipy.stats.distributions.rdist_gen._pdf(self,x,c)
scipy.stats.distributions.recipinvgauss_gen(rv_continuous)
scipy.stats.distributions.recipinvgauss_gen._cdf(self,x,mu)
scipy.stats.distributions.recipinvgauss_gen._logpdf(self,x,mu)
scipy.stats.distributions.recipinvgauss_gen._pdf(self,x,mu)
scipy.stats.distributions.recipinvgauss_gen._rvs(self,mu)
scipy.stats.distributions.reciprocal_gen(rv_continuous)
scipy.stats.distributions.reciprocal_gen._argcheck(self,a,b)
scipy.stats.distributions.reciprocal_gen._cdf(self,x,a,b)
scipy.stats.distributions.reciprocal_gen._entropy(self,a,b)
scipy.stats.distributions.reciprocal_gen._logpdf(self,x,a,b)
scipy.stats.distributions.reciprocal_gen._munp(self,n,a,b)
scipy.stats.distributions.reciprocal_gen._pdf(self,x,a,b)
scipy.stats.distributions.reciprocal_gen._ppf(self,q,a,b)
scipy.stats.distributions.reverse_dict(dict)
scipy.stats.distributions.rice_gen(rv_continuous)
scipy.stats.distributions.rice_gen._logpdf(self,x,b)
scipy.stats.distributions.rice_gen._munp(self,n,b)
scipy.stats.distributions.rice_gen._pdf(self,x,b)
scipy.stats.distributions.rv_continuous(self,momtype=1,a=None,b=None,xa=None,xb=None,xtol=1e-14,badvalue=None,name=None,longname=None,shapes=None,extradoc=None)
scipy.stats.distributions.rv_continuous.__init__(self,momtype=1,a=None,b=None,xa=None,xb=None,xtol=1e-14,badvalue=None,name=None,longname=None,shapes=None,extradoc=None)
scipy.stats.distributions.rv_continuous._argcheck(self,*args)
scipy.stats.distributions.rv_continuous._cdf(self,x,*args)
scipy.stats.distributions.rv_continuous._cdf_single_call(self,x,*args)
scipy.stats.distributions.rv_continuous._construct_default_doc(self,longname=None,extradoc=None)
scipy.stats.distributions.rv_continuous._construct_doc(self)
scipy.stats.distributions.rv_continuous._entropy(self,*args)
scipy.stats.distributions.rv_continuous._fitstart(self,data,args=None)
scipy.stats.distributions.rv_continuous._isf(self,q,*args)
scipy.stats.distributions.rv_continuous._logcdf(self,x,*args)
scipy.stats.distributions.rv_continuous._logpdf(self,x,*args)
scipy.stats.distributions.rv_continuous._logsf(self,x,*args)
scipy.stats.distributions.rv_continuous._mom0_sc(self,m,*args)
scipy.stats.distributions.rv_continuous._mom1_sc(self,m,*args)
scipy.stats.distributions.rv_continuous._mom_integ0(self,x,m,*args)
scipy.stats.distributions.rv_continuous._mom_integ1(self,q,m,*args)
scipy.stats.distributions.rv_continuous._munp(self,n,*args)
scipy.stats.distributions.rv_continuous._nnlf(self,x,*args)
scipy.stats.distributions.rv_continuous._pdf(self,x,*args)
scipy.stats.distributions.rv_continuous._ppf(self,q,*args)
scipy.stats.distributions.rv_continuous._ppf_single_call(self,q,*args)
scipy.stats.distributions.rv_continuous._ppf_to_solve(self,x,q,*args)
scipy.stats.distributions.rv_continuous._reduce_func(self,args,kwds)
scipy.stats.distributions.rv_continuous._rvs(self,*args)
scipy.stats.distributions.rv_continuous._sf(self,x,*args)
scipy.stats.distributions.rv_continuous._stats(self,*args,**kwds)
scipy.stats.distributions.rv_continuous.cdf(self,x,*args,**kwds)
scipy.stats.distributions.rv_continuous.entropy(self,*args,**kwds)
scipy.stats.distributions.rv_continuous.est_loc_scale(self,data,*args)
scipy.stats.distributions.rv_continuous.expect(self,func=None,args=(),loc=0,scale=1,lb=None,ub=None,conditional=False,**kwds)
scipy.stats.distributions.rv_continuous.fit(self,data,*args,**kwds)
scipy.stats.distributions.rv_continuous.fit_loc_scale(self,data,*args)
scipy.stats.distributions.rv_continuous.freeze(self,*args,**kwds)
scipy.stats.distributions.rv_continuous.isf(self,q,*args,**kwds)
scipy.stats.distributions.rv_continuous.logcdf(self,x,*args,**kwds)
scipy.stats.distributions.rv_continuous.logpdf(self,x,*args,**kwds)
scipy.stats.distributions.rv_continuous.logsf(self,x,*args,**kwds)
scipy.stats.distributions.rv_continuous.moment(self,n,*args,**kwds)
scipy.stats.distributions.rv_continuous.nnlf(self,theta,x)
scipy.stats.distributions.rv_continuous.pdf(self,x,*args,**kwds)
scipy.stats.distributions.rv_continuous.ppf(self,q,*args,**kwds)
scipy.stats.distributions.rv_continuous.sf(self,x,*args,**kwds)
scipy.stats.distributions.rv_continuous.stats(self,*args,**kwds)
scipy.stats.distributions.rv_discrete(self,a=0,b=inf,name=None,badvalue=None,moment_tol=1e-08,values=None,inc=1,longname=None,shapes=None,extradoc=None)
scipy.stats.distributions.rv_discrete.__init__(self,a=0,b=inf,name=None,badvalue=None,moment_tol=1e-08,values=None,inc=1,longname=None,shapes=None,extradoc=None)
scipy.stats.distributions.rv_discrete._argcheck(self,*args)
scipy.stats.distributions.rv_discrete._cdf(self,x,*args)
scipy.stats.distributions.rv_discrete._cdfsingle(self,k,*args)
scipy.stats.distributions.rv_discrete._construct_default_doc(self,longname=None,extradoc=None)
scipy.stats.distributions.rv_discrete._construct_doc(self)
scipy.stats.distributions.rv_discrete._entropy(self,*args)
scipy.stats.distributions.rv_discrete._isf(self,q,*args)
scipy.stats.distributions.rv_discrete._logcdf(self,x,*args)
scipy.stats.distributions.rv_discrete._logpmf(self,k,*args)
scipy.stats.distributions.rv_discrete._logsf(self,x,*args)
scipy.stats.distributions.rv_discrete._munp(self,n,*args)
scipy.stats.distributions.rv_discrete._nonzero(self,k,*args)
scipy.stats.distributions.rv_discrete._pmf(self,k,*args)
scipy.stats.distributions.rv_discrete._ppf(self,q,*args)
scipy.stats.distributions.rv_discrete._rvs(self,*args)
scipy.stats.distributions.rv_discrete._sf(self,x,*args)
scipy.stats.distributions.rv_discrete._stats(self,*args)
scipy.stats.distributions.rv_discrete.cdf(self,k,*args,**kwds)
scipy.stats.distributions.rv_discrete.entropy(self,*args,**kwds)
scipy.stats.distributions.rv_discrete.expect(self,func=None,args=(),loc=0,lb=None,ub=None,conditional=False)
scipy.stats.distributions.rv_discrete.freeze(self,*args,**kwds)
scipy.stats.distributions.rv_discrete.isf(self,q,*args,**kwds)
scipy.stats.distributions.rv_discrete.logcdf(self,k,*args,**kwds)
scipy.stats.distributions.rv_discrete.logpmf(self,k,*args,**kwds)
scipy.stats.distributions.rv_discrete.logsf(self,k,*args,**kwds)
scipy.stats.distributions.rv_discrete.moment(self,n,*args,**kwds)
scipy.stats.distributions.rv_discrete.pmf(self,k,*args,**kwds)
scipy.stats.distributions.rv_discrete.ppf(self,q,*args,**kwds)
scipy.stats.distributions.rv_discrete.rvs(self,*args,**kwargs)
scipy.stats.distributions.rv_discrete.sf(self,k,*args,**kwds)
scipy.stats.distributions.rv_discrete.stats(self,*args,**kwds)
scipy.stats.distributions.rv_frozen(self,dist,*args,**kwds)
scipy.stats.distributions.rv_frozen.__init__(self,dist,*args,**kwds)
scipy.stats.distributions.rv_frozen.cdf(self,x)
scipy.stats.distributions.rv_frozen.entropy(self)
scipy.stats.distributions.rv_frozen.interval(self,alpha)
scipy.stats.distributions.rv_frozen.isf(self,q)
scipy.stats.distributions.rv_frozen.logcdf(self,x)
scipy.stats.distributions.rv_frozen.logpdf(self,x)
scipy.stats.distributions.rv_frozen.logpmf(self,k)
scipy.stats.distributions.rv_frozen.logsf(self,x)
scipy.stats.distributions.rv_frozen.mean(self)
scipy.stats.distributions.rv_frozen.median(self)
scipy.stats.distributions.rv_frozen.moment(self,n)
scipy.stats.distributions.rv_frozen.pdf(self,x)
scipy.stats.distributions.rv_frozen.pmf(self,k)
scipy.stats.distributions.rv_frozen.ppf(self,q)
scipy.stats.distributions.rv_frozen.rvs(self,size=None)
scipy.stats.distributions.rv_frozen.sf(self,x)
scipy.stats.distributions.rv_frozen.stats(self,moments='mv')
scipy.stats.distributions.rv_frozen.std(self)
scipy.stats.distributions.rv_frozen.var(self)
scipy.stats.distributions.rv_generic(object)
scipy.stats.distributions.rv_generic._fix_loc(self,args,loc)
scipy.stats.distributions.rv_generic._fix_loc_scale(self,args,loc,scale=1)
scipy.stats.distributions.rv_generic._fix_loc_scale_kwarg3(self,args,loc,scale=1,kwarg3=1,kwarg3_default=None)
scipy.stats.distributions.rv_generic.interval(self,alpha,*args,**kwds)
scipy.stats.distributions.rv_generic.mean(self,*args,**kwds)
scipy.stats.distributions.rv_generic.median(self,*args,**kwds)
scipy.stats.distributions.rv_generic.rvs(self,*args,**kwds)
scipy.stats.distributions.rv_generic.std(self,*args,**kwds)
scipy.stats.distributions.rv_generic.var(self,*args,**kwds)
scipy.stats.distributions.semicircular_gen(rv_continuous)
scipy.stats.distributions.semicircular_gen._cdf(self,x)
scipy.stats.distributions.semicircular_gen._entropy(self)
scipy.stats.distributions.semicircular_gen._pdf(self,x)
scipy.stats.distributions.semicircular_gen._stats(self)
scipy.stats.distributions.skellam_gen(rv_discrete)
scipy.stats.distributions.skellam_gen._cdf(self,x,mu1,mu2)
scipy.stats.distributions.skellam_gen._pmf(self,x,mu1,mu2)
scipy.stats.distributions.skellam_gen._rvs(self,mu1,mu2)
scipy.stats.distributions.skellam_gen._stats(self,mu1,mu2)
scipy.stats.distributions.t_gen(rv_continuous)
scipy.stats.distributions.t_gen._cdf(self,x,df)
scipy.stats.distributions.t_gen._isf(self,q,df)
scipy.stats.distributions.t_gen._logpdf(self,x,df)
scipy.stats.distributions.t_gen._pdf(self,x,df)
scipy.stats.distributions.t_gen._ppf(self,q,df)
scipy.stats.distributions.t_gen._rvs(self,df)
scipy.stats.distributions.t_gen._sf(self,x,df)
scipy.stats.distributions.t_gen._stats(self,df)
scipy.stats.distributions.triang_gen(rv_continuous)
scipy.stats.distributions.triang_gen._argcheck(self,c)
scipy.stats.distributions.triang_gen._cdf(self,x,c)
scipy.stats.distributions.triang_gen._entropy(self,c)
scipy.stats.distributions.triang_gen._pdf(self,x,c)
scipy.stats.distributions.triang_gen._ppf(self,q,c)
scipy.stats.distributions.triang_gen._rvs(self,c)
scipy.stats.distributions.triang_gen._stats(self,c)
scipy.stats.distributions.truncexpon_gen(rv_continuous)
scipy.stats.distributions.truncexpon_gen._argcheck(self,b)
scipy.stats.distributions.truncexpon_gen._cdf(self,x,b)
scipy.stats.distributions.truncexpon_gen._entropy(self,b)
scipy.stats.distributions.truncexpon_gen._logpdf(self,x,b)
scipy.stats.distributions.truncexpon_gen._munp(self,n,b)
scipy.stats.distributions.truncexpon_gen._pdf(self,x,b)
scipy.stats.distributions.truncexpon_gen._ppf(self,q,b)
scipy.stats.distributions.truncnorm_gen(rv_continuous)
scipy.stats.distributions.truncnorm_gen._argcheck(self,a,b)
scipy.stats.distributions.truncnorm_gen._cdf(self,x,a,b)
scipy.stats.distributions.truncnorm_gen._logpdf(self,x,a,b)
scipy.stats.distributions.truncnorm_gen._pdf(self,x,a,b)
scipy.stats.distributions.truncnorm_gen._ppf(self,q,a,b)
scipy.stats.distributions.truncnorm_gen._stats(self,a,b)
scipy.stats.distributions.tukeylambda_gen(rv_continuous)
scipy.stats.distributions.tukeylambda_gen._argcheck(self,lam)
scipy.stats.distributions.tukeylambda_gen._cdf(self,x,lam)
scipy.stats.distributions.tukeylambda_gen._entropy(self,lam)
scipy.stats.distributions.tukeylambda_gen._pdf(self,x,lam)
scipy.stats.distributions.tukeylambda_gen._ppf(self,q,lam)
scipy.stats.distributions.tukeylambda_gen._stats(self,lam)
scipy.stats.distributions.uniform_gen(rv_continuous)
scipy.stats.distributions.uniform_gen._cdf(self,x)
scipy.stats.distributions.uniform_gen._entropy(self)
scipy.stats.distributions.uniform_gen._pdf(self,x)
scipy.stats.distributions.uniform_gen._ppf(self,q)
scipy.stats.distributions.uniform_gen._rvs(self)
scipy.stats.distributions.uniform_gen._stats(self)
scipy.stats.distributions.valarray(shape,value=nan,typecode=None)
scipy.stats.distributions.vonmises_gen(rv_continuous)
scipy.stats.distributions.vonmises_gen._cdf(self,x,b)
scipy.stats.distributions.vonmises_gen._pdf(self,x,b)
scipy.stats.distributions.vonmises_gen._rvs(self,b)
scipy.stats.distributions.vonmises_gen._stats_skip(self,b)
scipy.stats.distributions.wald_gen(invgauss_gen)
scipy.stats.distributions.wald_gen._cdf(self,x)
scipy.stats.distributions.wald_gen._logpdf(self,x)
scipy.stats.distributions.wald_gen._pdf(self,x)
scipy.stats.distributions.wald_gen._rvs(self)
scipy.stats.distributions.wald_gen._stats(self)
scipy.stats.distributions.wrapcauchy_gen(rv_continuous)
scipy.stats.distributions.wrapcauchy_gen._argcheck(self,c)
scipy.stats.distributions.wrapcauchy_gen._cdf(self,x,c)
scipy.stats.distributions.wrapcauchy_gen._entropy(self,c)
scipy.stats.distributions.wrapcauchy_gen._pdf(self,x,c)
scipy.stats.distributions.wrapcauchy_gen._ppf(self,q,c)
scipy.stats.distributions.zipf_gen(rv_discrete)
scipy.stats.distributions.zipf_gen._argcheck(self,a)
scipy.stats.distributions.zipf_gen._munp(self,n,a)
scipy.stats.distributions.zipf_gen._pmf(self,k,a)
scipy.stats.distributions.zipf_gen._rvs(self,a)
scipy.stats.distributions.zipf_gen._stats(self,a)
scipy.stats.dlaplace_gen(rv_discrete)
scipy.stats.dlaplace_gen._cdf(self,x,a)
scipy.stats.dlaplace_gen._entropy(self,a)
scipy.stats.dlaplace_gen._pmf(self,k,a)
scipy.stats.dlaplace_gen._ppf(self,q,a)
scipy.stats.dlaplace_gen._stats_skip(self,a)
scipy.stats.dweibull_gen(rv_continuous)
scipy.stats.dweibull_gen._cdf(self,x,c)
scipy.stats.dweibull_gen._logpdf(self,x,c)
scipy.stats.dweibull_gen._pdf(self,x,c)
scipy.stats.dweibull_gen._ppf_skip(self,q,c)
scipy.stats.dweibull_gen._rvs(self,c)
scipy.stats.dweibull_gen._stats(self,c)
scipy.stats.entropy(pk,qk=None,base=None)
scipy.stats.erlang_gen(rv_continuous)
scipy.stats.erlang_gen._arg_check(self,a)
scipy.stats.erlang_gen._cdf(self,x,a)
scipy.stats.erlang_gen._entropy(self,a)
scipy.stats.erlang_gen._logpdf(self,x,a)
scipy.stats.erlang_gen._pdf(self,x,a)
scipy.stats.erlang_gen._ppf(self,q,a)
scipy.stats.erlang_gen._rvs(self,a)
scipy.stats.erlang_gen._sf(self,x,a)
scipy.stats.erlang_gen._stats(self,a)
scipy.stats.expon_gen(rv_continuous)
scipy.stats.expon_gen._cdf(self,x)
scipy.stats.expon_gen._entropy(self)
scipy.stats.expon_gen._isf(self,q)
scipy.stats.expon_gen._logpdf(self,x)
scipy.stats.expon_gen._logsf(self,x)
scipy.stats.expon_gen._pdf(self,x)
scipy.stats.expon_gen._ppf(self,q)
scipy.stats.expon_gen._rvs(self)
scipy.stats.expon_gen._sf(self,x)
scipy.stats.expon_gen._stats(self)
scipy.stats.exponpow_gen(rv_continuous)
scipy.stats.exponpow_gen._cdf(self,x,b)
scipy.stats.exponpow_gen._isf(self,x,b)
scipy.stats.exponpow_gen._logpdf(self,x,b)
scipy.stats.exponpow_gen._pdf(self,x,b)
scipy.stats.exponpow_gen._ppf(self,q,b)
scipy.stats.exponpow_gen._sf(self,x,b)
scipy.stats.exponweib_gen(rv_continuous)
scipy.stats.exponweib_gen._cdf(self,x,a,c)
scipy.stats.exponweib_gen._logpdf(self,x,a,c)
scipy.stats.exponweib_gen._pdf(self,x,a,c)
scipy.stats.exponweib_gen._ppf(self,q,a,c)
scipy.stats.f_gen(rv_continuous)
scipy.stats.f_gen._cdf(self,x,dfn,dfd)
scipy.stats.f_gen._logpdf(self,x,dfn,dfd)
scipy.stats.f_gen._pdf(self,x,dfn,dfd)
scipy.stats.f_gen._ppf(self,q,dfn,dfd)
scipy.stats.f_gen._rvs(self,dfn,dfd)
scipy.stats.f_gen._sf(self,x,dfn,dfd)
scipy.stats.f_gen._stats(self,dfn,dfd)
scipy.stats.fatiguelife_gen(rv_continuous)
scipy.stats.fatiguelife_gen._cdf(self,x,c)
scipy.stats.fatiguelife_gen._logpdf(self,x,c)
scipy.stats.fatiguelife_gen._pdf(self,x,c)
scipy.stats.fatiguelife_gen._ppf(self,q,c)
scipy.stats.fatiguelife_gen._rvs(self,c)
scipy.stats.fatiguelife_gen._stats(self,c)
scipy.stats.fisk_gen(burr_gen)
scipy.stats.fisk_gen._cdf(self,x,c)
scipy.stats.fisk_gen._entropy(self,c)
scipy.stats.fisk_gen._pdf(self,x,c)
scipy.stats.fisk_gen._ppf(self,x,c)
scipy.stats.fisk_gen._stats(self,c)
scipy.stats.foldcauchy_gen(rv_continuous)
scipy.stats.foldcauchy_gen._cdf(self,x,c)
scipy.stats.foldcauchy_gen._pdf(self,x,c)
scipy.stats.foldcauchy_gen._rvs(self,c)
scipy.stats.foldcauchy_gen._stats(self,c)
scipy.stats.foldnorm_gen(rv_continuous)
scipy.stats.foldnorm_gen._cdf(self,x,c)
scipy.stats.foldnorm_gen._pdf(self,x,c)
scipy.stats.foldnorm_gen._rvs(self,c)
scipy.stats.foldnorm_gen._stats(self,c)
scipy.stats.frechet_l_gen(rv_continuous)
scipy.stats.frechet_l_gen._cdf(self,x,c)
scipy.stats.frechet_l_gen._entropy(self,c)
scipy.stats.frechet_l_gen._munp(self,n,c)
scipy.stats.frechet_l_gen._pdf(self,x,c)
scipy.stats.frechet_l_gen._ppf(self,q,c)
scipy.stats.frechet_r_gen(rv_continuous)
scipy.stats.frechet_r_gen._cdf(self,x,c)
scipy.stats.frechet_r_gen._entropy(self,c)
scipy.stats.frechet_r_gen._logpdf(self,x,c)
scipy.stats.frechet_r_gen._munp(self,n,c)
scipy.stats.frechet_r_gen._pdf(self,x,c)
scipy.stats.frechet_r_gen._ppf(self,q,c)
scipy.stats.gamma_gen(rv_continuous)
scipy.stats.gamma_gen._cdf(self,x,a)
scipy.stats.gamma_gen._entropy(self,a)
scipy.stats.gamma_gen._fitstart(self,data)
scipy.stats.gamma_gen._logpdf(self,x,a)
scipy.stats.gamma_gen._pdf(self,x,a)
scipy.stats.gamma_gen._ppf(self,q,a)
scipy.stats.gamma_gen._rvs(self,a)
scipy.stats.gamma_gen._stats(self,a)
scipy.stats.gamma_gen.fit(self,data,*args,**kwds)
scipy.stats.gausshyper_gen(rv_continuous)
scipy.stats.gausshyper_gen._argcheck(self,a,b,c,z)
scipy.stats.gausshyper_gen._munp(self,n,a,b,c,z)
scipy.stats.gausshyper_gen._pdf(self,x,a,b,c,z)
scipy.stats.genexpon_gen(rv_continuous)
scipy.stats.genexpon_gen._cdf(self,x,a,b,c)
scipy.stats.genexpon_gen._logpdf(self,x,a,b,c)
scipy.stats.genexpon_gen._pdf(self,x,a,b,c)
scipy.stats.genextreme_gen(rv_continuous)
scipy.stats.genextreme_gen._argcheck(self,c)
scipy.stats.genextreme_gen._cdf(self,x,c)
scipy.stats.genextreme_gen._munp(self,n,c)
scipy.stats.genextreme_gen._pdf(self,x,c)
scipy.stats.genextreme_gen._ppf(self,q,c)
scipy.stats.genextreme_gen._stats(self,c)
scipy.stats.gengamma_gen(rv_continuous)
scipy.stats.gengamma_gen._argcheck(self,a,c)
scipy.stats.gengamma_gen._cdf(self,x,a,c)
scipy.stats.gengamma_gen._entropy(self,a,c)
scipy.stats.gengamma_gen._munp(self,n,a,c)
scipy.stats.gengamma_gen._pdf(self,x,a,c)
scipy.stats.gengamma_gen._ppf(self,q,a,c)
scipy.stats.genhalflogistic_gen(rv_continuous)
scipy.stats.genhalflogistic_gen._argcheck(self,c)
scipy.stats.genhalflogistic_gen._cdf(self,x,c)
scipy.stats.genhalflogistic_gen._entropy(self,c)
scipy.stats.genhalflogistic_gen._pdf(self,x,c)
scipy.stats.genhalflogistic_gen._ppf(self,q,c)
scipy.stats.genlogistic_gen(rv_continuous)
scipy.stats.genlogistic_gen._cdf(self,x,c)
scipy.stats.genlogistic_gen._logpdf(self,x,c)
scipy.stats.genlogistic_gen._pdf(self,x,c)
scipy.stats.genlogistic_gen._ppf(self,q,c)
scipy.stats.genlogistic_gen._stats(self,c)
scipy.stats.genpareto_gen(rv_continuous)
scipy.stats.genpareto_gen._argcheck(self,c)
scipy.stats.genpareto_gen._cdf(self,x,c)
scipy.stats.genpareto_gen._entropy(self,c)
scipy.stats.genpareto_gen._logpdf(self,x,c)
scipy.stats.genpareto_gen._munp(self,n,c)
scipy.stats.genpareto_gen._pdf(self,x,c)
scipy.stats.genpareto_gen._ppf(self,q,c)
scipy.stats.geom_gen(rv_discrete)
scipy.stats.geom_gen._argcheck(self,p)
scipy.stats.geom_gen._cdf(self,x,p)
scipy.stats.geom_gen._logpmf(self,k,p)
scipy.stats.geom_gen._pmf(self,k,p)
scipy.stats.geom_gen._ppf(self,q,p)
scipy.stats.geom_gen._rvs(self,p)
scipy.stats.geom_gen._sf(self,x,p)
scipy.stats.geom_gen._stats(self,p)
scipy.stats.gilbrat_gen(lognorm_gen)
scipy.stats.gilbrat_gen._cdf(self,x)
scipy.stats.gilbrat_gen._entropy(self)
scipy.stats.gilbrat_gen._pdf(self,x)
scipy.stats.gilbrat_gen._ppf(self,q)
scipy.stats.gilbrat_gen._rvs(self)
scipy.stats.gilbrat_gen._stats(self)
scipy.stats.gompertz_gen(rv_continuous)
scipy.stats.gompertz_gen._cdf(self,x,c)
scipy.stats.gompertz_gen._entropy(self,c)
scipy.stats.gompertz_gen._pdf(self,x,c)
scipy.stats.gompertz_gen._ppf(self,q,c)
scipy.stats.gumbel_l_gen(rv_continuous)
scipy.stats.gumbel_l_gen._cdf(self,x)
scipy.stats.gumbel_l_gen._entropy(self)
scipy.stats.gumbel_l_gen._logpdf(self,x)
scipy.stats.gumbel_l_gen._pdf(self,x)
scipy.stats.gumbel_l_gen._ppf(self,q)
scipy.stats.gumbel_l_gen._stats(self)
scipy.stats.gumbel_r_gen(rv_continuous)
scipy.stats.gumbel_r_gen._cdf(self,x)
scipy.stats.gumbel_r_gen._entropy(self)
scipy.stats.gumbel_r_gen._logcdf(self,x)
scipy.stats.gumbel_r_gen._logpdf(self,x)
scipy.stats.gumbel_r_gen._pdf(self,x)
scipy.stats.gumbel_r_gen._ppf(self,q)
scipy.stats.gumbel_r_gen._stats(self)
scipy.stats.halfcauchy_gen(rv_continuous)
scipy.stats.halfcauchy_gen._cdf(self,x)
scipy.stats.halfcauchy_gen._entropy(self)
scipy.stats.halfcauchy_gen._logpdf(self,x)
scipy.stats.halfcauchy_gen._pdf(self,x)
scipy.stats.halfcauchy_gen._ppf(self,q)
scipy.stats.halfcauchy_gen._stats(self)
scipy.stats.halflogistic_gen(rv_continuous)
scipy.stats.halflogistic_gen._cdf(self,x)
scipy.stats.halflogistic_gen._entropy(self)
scipy.stats.halflogistic_gen._munp(self,n)
scipy.stats.halflogistic_gen._pdf(self,x)
scipy.stats.halflogistic_gen._ppf(self,q)
scipy.stats.halfnorm_gen(rv_continuous)
scipy.stats.halfnorm_gen._cdf(self,x)
scipy.stats.halfnorm_gen._entropy(self)
scipy.stats.halfnorm_gen._logpdf(self,x)
scipy.stats.halfnorm_gen._pdf(self,x)
scipy.stats.halfnorm_gen._ppf(self,q)
scipy.stats.halfnorm_gen._rvs(self)
scipy.stats.halfnorm_gen._stats(self)
scipy.stats.hypergeom_gen(rv_discrete)
scipy.stats.hypergeom_gen._argcheck(self,M,n,N)
scipy.stats.hypergeom_gen._entropy(self,M,n,N)
scipy.stats.hypergeom_gen._logpmf(self,k,M,n,N)
scipy.stats.hypergeom_gen._pmf(self,k,M,n,N)
scipy.stats.hypergeom_gen._rvs(self,M,n,N)
scipy.stats.hypergeom_gen._sf(self,k,M,n,N)
scipy.stats.hypergeom_gen._stats(self,M,n,N)
scipy.stats.hypsecant_gen(rv_continuous)
scipy.stats.hypsecant_gen._cdf(self,x)
scipy.stats.hypsecant_gen._entropy(self)
scipy.stats.hypsecant_gen._pdf(self,x)
scipy.stats.hypsecant_gen._ppf(self,q)
scipy.stats.hypsecant_gen._stats(self)
scipy.stats.invgamma_gen(rv_continuous)
scipy.stats.invgamma_gen._cdf(self,x,a)
scipy.stats.invgamma_gen._entropy(self,a)
scipy.stats.invgamma_gen._logpdf(self,x,a)
scipy.stats.invgamma_gen._munp(self,n,a)
scipy.stats.invgamma_gen._pdf(self,x,a)
scipy.stats.invgamma_gen._ppf(self,q,a)
scipy.stats.invgauss_gen(rv_continuous)
scipy.stats.invgauss_gen._cdf(self,x,mu)
scipy.stats.invgauss_gen._logpdf(self,x,mu)
scipy.stats.invgauss_gen._pdf(self,x,mu)
scipy.stats.invgauss_gen._rvs(self,mu)
scipy.stats.invgauss_gen._stats(self,mu)
scipy.stats.invweibull_gen(rv_continuous)
scipy.stats.invweibull_gen._cdf(self,x,c)
scipy.stats.invweibull_gen._entropy(self,c)
scipy.stats.invweibull_gen._pdf(self,x,c)
scipy.stats.invweibull_gen._ppf(self,q,c)
scipy.stats.johnsonsb_gen(rv_continuous)
scipy.stats.johnsonsb_gen._argcheck(self,a,b)
scipy.stats.johnsonsb_gen._cdf(self,x,a,b)
scipy.stats.johnsonsb_gen._pdf(self,x,a,b)
scipy.stats.johnsonsb_gen._ppf(self,q,a,b)
scipy.stats.johnsonsu_gen(rv_continuous)
scipy.stats.johnsonsu_gen._argcheck(self,a,b)
scipy.stats.johnsonsu_gen._cdf(self,x,a,b)
scipy.stats.johnsonsu_gen._pdf(self,x,a,b)
scipy.stats.johnsonsu_gen._ppf(self,q,a,b)
scipy.stats.ksone_gen(rv_continuous)
scipy.stats.ksone_gen._cdf(self,x,n)
scipy.stats.ksone_gen._ppf(self,q,n)
scipy.stats.kstwobign_gen(rv_continuous)
scipy.stats.kstwobign_gen._cdf(self,x)
scipy.stats.kstwobign_gen._ppf(self,q)
scipy.stats.kstwobign_gen._sf(self,x)
scipy.stats.laplace_gen(rv_continuous)
scipy.stats.laplace_gen._cdf(self,x)
scipy.stats.laplace_gen._entropy(self)
scipy.stats.laplace_gen._pdf(self,x)
scipy.stats.laplace_gen._ppf(self,q)
scipy.stats.laplace_gen._rvs(self)
scipy.stats.laplace_gen._stats(self)
scipy.stats.levy_gen(rv_continuous)
scipy.stats.levy_gen._cdf(self,x)
scipy.stats.levy_gen._pdf(self,x)
scipy.stats.levy_gen._ppf(self,q)
scipy.stats.levy_gen._stats(self)
scipy.stats.levy_l_gen(rv_continuous)
scipy.stats.levy_l_gen._cdf(self,x)
scipy.stats.levy_l_gen._pdf(self,x)
scipy.stats.levy_l_gen._ppf(self,q)
scipy.stats.levy_l_gen._stats(self)
scipy.stats.levy_stable_gen(rv_continuous)
scipy.stats.levy_stable_gen._argcheck(self,alpha,beta)
scipy.stats.levy_stable_gen._pdf(self,x,alpha,beta)
scipy.stats.levy_stable_gen._rvs(self,alpha,beta)
scipy.stats.loggamma_gen(rv_continuous)
scipy.stats.loggamma_gen._cdf(self,x,c)
scipy.stats.loggamma_gen._munp(self,n,*args)
scipy.stats.loggamma_gen._pdf(self,x,c)
scipy.stats.loggamma_gen._ppf(self,q,c)
scipy.stats.loggamma_gen._rvs(self,c)
scipy.stats.logistic_gen(rv_continuous)
scipy.stats.logistic_gen._cdf(self,x)
scipy.stats.logistic_gen._entropy(self)
scipy.stats.logistic_gen._pdf(self,x)
scipy.stats.logistic_gen._ppf(self,q)
scipy.stats.logistic_gen._rvs(self)
scipy.stats.logistic_gen._stats(self)
scipy.stats.loglaplace_gen(rv_continuous)
scipy.stats.loglaplace_gen._cdf(self,x,c)
scipy.stats.loglaplace_gen._entropy(self,c)
scipy.stats.loglaplace_gen._pdf(self,x,c)
scipy.stats.loglaplace_gen._ppf(self,q,c)
scipy.stats.lognorm_gen(rv_continuous)
scipy.stats.lognorm_gen._cdf(self,x,s)
scipy.stats.lognorm_gen._entropy(self,s)
scipy.stats.lognorm_gen._pdf(self,x,s)
scipy.stats.lognorm_gen._ppf(self,q,s)
scipy.stats.lognorm_gen._rvs(self,s)
scipy.stats.lognorm_gen._stats(self,s)
scipy.stats.logser_gen(rv_discrete)
scipy.stats.logser_gen._argcheck(self,pr)
scipy.stats.logser_gen._pmf(self,k,pr)
scipy.stats.logser_gen._rvs(self,pr)
scipy.stats.logser_gen._stats(self,pr)
scipy.stats.lomax_gen(rv_continuous)
scipy.stats.lomax_gen._cdf(self,x,c)
scipy.stats.lomax_gen._entropy(self,c)
scipy.stats.lomax_gen._logpdf(self,x,c)
scipy.stats.lomax_gen._logsf(self,x,c)
scipy.stats.lomax_gen._pdf(self,x,c)
scipy.stats.lomax_gen._ppf(self,q,c)
scipy.stats.lomax_gen._sf(self,x,c)
scipy.stats.lomax_gen._stats(self,c)
scipy.stats.make_dict(keys,values)
scipy.stats.maxwell_gen(rv_continuous)
scipy.stats.maxwell_gen._cdf(self,x)
scipy.stats.maxwell_gen._entropy(self)
scipy.stats.maxwell_gen._pdf(self,x)
scipy.stats.maxwell_gen._ppf(self,q)
scipy.stats.maxwell_gen._rvs(self)
scipy.stats.maxwell_gen._stats(self)
scipy.stats.mielke_gen(rv_continuous)
scipy.stats.mielke_gen._cdf(self,x,k,s)
scipy.stats.mielke_gen._pdf(self,x,k,s)
scipy.stats.mielke_gen._ppf(self,q,k,s)
scipy.stats.nakagami_gen(rv_continuous)
scipy.stats.nakagami_gen._cdf(self,x,nu)
scipy.stats.nakagami_gen._pdf(self,x,nu)
scipy.stats.nakagami_gen._ppf(self,q,nu)
scipy.stats.nakagami_gen._stats(self,nu)
scipy.stats.nbinom_gen(rv_discrete)
scipy.stats.nbinom_gen._argcheck(self,n,p)
scipy.stats.nbinom_gen._cdf(self,x,n,p)
scipy.stats.nbinom_gen._logpmf(self,x,n,p)
scipy.stats.nbinom_gen._pmf(self,x,n,p)
scipy.stats.nbinom_gen._ppf(self,q,n,p)
scipy.stats.nbinom_gen._rvs(self,n,p)
scipy.stats.nbinom_gen._sf_skip(self,x,n,p)
scipy.stats.nbinom_gen._stats(self,n,p)
scipy.stats.ncf_gen(rv_continuous)
scipy.stats.ncf_gen._cdf(self,x,dfn,dfd,nc)
scipy.stats.ncf_gen._munp(self,n,dfn,dfd,nc)
scipy.stats.ncf_gen._pdf_skip(self,x,dfn,dfd,nc)
scipy.stats.ncf_gen._ppf(self,q,dfn,dfd,nc)
scipy.stats.ncf_gen._rvs(self,dfn,dfd,nc)
scipy.stats.ncf_gen._stats(self,dfn,dfd,nc)
scipy.stats.nct_gen(rv_continuous)
scipy.stats.nct_gen._cdf(self,x,df,nc)
scipy.stats.nct_gen._pdf(self,x,df,nc)
scipy.stats.nct_gen._ppf(self,q,df,nc)
scipy.stats.nct_gen._rvs(self,df,nc)
scipy.stats.nct_gen._stats(self,df,nc,moments='mv')
scipy.stats.ncx2_gen(rv_continuous)
scipy.stats.ncx2_gen._cdf(self,x,df,nc)
scipy.stats.ncx2_gen._logpdf(self,x,df,nc)
scipy.stats.ncx2_gen._pdf(self,x,df,nc)
scipy.stats.ncx2_gen._ppf(self,q,df,nc)
scipy.stats.ncx2_gen._rvs(self,df,nc)
scipy.stats.ncx2_gen._stats(self,df,nc)
scipy.stats.norm_gen(rv_continuous)
scipy.stats.norm_gen._cdf(self,x)
scipy.stats.norm_gen._entropy(self)
scipy.stats.norm_gen._isf(self,q)
scipy.stats.norm_gen._logcdf(self,x)
scipy.stats.norm_gen._logpdf(self,x)
scipy.stats.norm_gen._logsf(self,x)
scipy.stats.norm_gen._pdf(self,x)
scipy.stats.norm_gen._ppf(self,q)
scipy.stats.norm_gen._rvs(self)
scipy.stats.norm_gen._sf(self,x)
scipy.stats.norm_gen._stats(self)
scipy.stats.pareto_gen(rv_continuous)
scipy.stats.pareto_gen._cdf(self,x,b)
scipy.stats.pareto_gen._entropy(self,c)
scipy.stats.pareto_gen._pdf(self,x,b)
scipy.stats.pareto_gen._ppf(self,q,b)
scipy.stats.pareto_gen._stats(self,b,moments='mv')
scipy.stats.pearson3_gen(rv_continuous)
scipy.stats.pearson3_gen._argcheck(self,skew)
scipy.stats.pearson3_gen._cdf(self,x,skew)
scipy.stats.pearson3_gen._logpdf(self,x,skew)
scipy.stats.pearson3_gen._pdf(self,x,skew)
scipy.stats.pearson3_gen._ppf(self,q,skew)
scipy.stats.pearson3_gen._preprocess(self,x,skew)
scipy.stats.pearson3_gen._rvs(self,skew)
scipy.stats.pearson3_gen._stats(self,skew)
scipy.stats.planck_gen(rv_discrete)
scipy.stats.planck_gen._argcheck(self,lambda_)
scipy.stats.planck_gen._cdf(self,x,lambda_)
scipy.stats.planck_gen._entropy(self,lambda_)
scipy.stats.planck_gen._pmf(self,k,lambda_)
scipy.stats.planck_gen._ppf(self,q,lambda_)
scipy.stats.planck_gen._stats(self,lambda_)
scipy.stats.poisson_gen(rv_discrete)
scipy.stats.poisson_gen._cdf(self,x,mu)
scipy.stats.poisson_gen._logpmf(self,k,mu)
scipy.stats.poisson_gen._pmf(self,k,mu)
scipy.stats.poisson_gen._ppf(self,q,mu)
scipy.stats.poisson_gen._rvs(self,mu)
scipy.stats.poisson_gen._sf(self,x,mu)
scipy.stats.poisson_gen._stats(self,mu)
scipy.stats.powerlaw_gen(rv_continuous)
scipy.stats.powerlaw_gen._cdf(self,x,a)
scipy.stats.powerlaw_gen._entropy(self,a)
scipy.stats.powerlaw_gen._logcdf(self,x,a)
scipy.stats.powerlaw_gen._logpdf(self,x,a)
scipy.stats.powerlaw_gen._pdf(self,x,a)
scipy.stats.powerlaw_gen._ppf(self,q,a)
scipy.stats.powerlaw_gen._stats(self,a)
scipy.stats.powerlognorm_gen(rv_continuous)
scipy.stats.powerlognorm_gen._cdf(self,x,c,s)
scipy.stats.powerlognorm_gen._pdf(self,x,c,s)
scipy.stats.powerlognorm_gen._ppf(self,q,c,s)
scipy.stats.powernorm_gen(rv_continuous)
scipy.stats.powernorm_gen._cdf(self,x,c)
scipy.stats.powernorm_gen._logpdf(self,x,c)
scipy.stats.powernorm_gen._pdf(self,x,c)
scipy.stats.powernorm_gen._ppf(self,q,c)
scipy.stats.randint_gen(rv_discrete)
scipy.stats.randint_gen._argcheck(self,min,max)
scipy.stats.randint_gen._cdf(self,x,min,max)
scipy.stats.randint_gen._entropy(self,min,max)
scipy.stats.randint_gen._pmf(self,k,min,max)
scipy.stats.randint_gen._ppf(self,q,min,max)
scipy.stats.randint_gen._rvs(self,min,max=None)
scipy.stats.randint_gen._stats(self,min,max)
scipy.stats.rayleigh_gen(rv_continuous)
scipy.stats.rayleigh_gen._cdf(self,r)
scipy.stats.rayleigh_gen._entropy(self)
scipy.stats.rayleigh_gen._pdf(self,r)
scipy.stats.rayleigh_gen._ppf(self,q)
scipy.stats.rayleigh_gen._rvs(self)
scipy.stats.rayleigh_gen._stats(self)
scipy.stats.rdist_gen(rv_continuous)
scipy.stats.rdist_gen._cdf_skip(self,x,c)
scipy.stats.rdist_gen._munp(self,n,c)
scipy.stats.rdist_gen._pdf(self,x,c)
scipy.stats.recipinvgauss_gen(rv_continuous)
scipy.stats.recipinvgauss_gen._cdf(self,x,mu)
scipy.stats.recipinvgauss_gen._logpdf(self,x,mu)
scipy.stats.recipinvgauss_gen._pdf(self,x,mu)
scipy.stats.recipinvgauss_gen._rvs(self,mu)
scipy.stats.reciprocal_gen(rv_continuous)
scipy.stats.reciprocal_gen._argcheck(self,a,b)
scipy.stats.reciprocal_gen._cdf(self,x,a,b)
scipy.stats.reciprocal_gen._entropy(self,a,b)
scipy.stats.reciprocal_gen._logpdf(self,x,a,b)
scipy.stats.reciprocal_gen._munp(self,n,a,b)
scipy.stats.reciprocal_gen._pdf(self,x,a,b)
scipy.stats.reciprocal_gen._ppf(self,q,a,b)
scipy.stats.reverse_dict(dict)
scipy.stats.rice_gen(rv_continuous)
scipy.stats.rice_gen._logpdf(self,x,b)
scipy.stats.rice_gen._munp(self,n,b)
scipy.stats.rice_gen._pdf(self,x,b)
scipy.stats.rv_continuous(self,momtype=1,a=None,b=None,xa=None,xb=None,xtol=1e-14,badvalue=None,name=None,longname=None,shapes=None,extradoc=None)
scipy.stats.rv_continuous._argcheck(self,*args)
scipy.stats.rv_continuous._cdf(self,x,*args)
scipy.stats.rv_continuous._cdf_single_call(self,x,*args)
scipy.stats.rv_continuous._construct_default_doc(self,longname=None,extradoc=None)
scipy.stats.rv_continuous._construct_doc(self)
scipy.stats.rv_continuous._entropy(self,*args)
scipy.stats.rv_continuous._fitstart(self,data,args=None)
scipy.stats.rv_continuous._isf(self,q,*args)
scipy.stats.rv_continuous._logcdf(self,x,*args)
scipy.stats.rv_continuous._logpdf(self,x,*args)
scipy.stats.rv_continuous._logsf(self,x,*args)
scipy.stats.rv_continuous._mom0_sc(self,m,*args)
scipy.stats.rv_continuous._mom1_sc(self,m,*args)
scipy.stats.rv_continuous._mom_integ0(self,x,m,*args)
scipy.stats.rv_continuous._mom_integ1(self,q,m,*args)
scipy.stats.rv_continuous._munp(self,n,*args)
scipy.stats.rv_continuous._nnlf(self,x,*args)
scipy.stats.rv_continuous._pdf(self,x,*args)
scipy.stats.rv_continuous._ppf(self,q,*args)
scipy.stats.rv_continuous._ppf_single_call(self,q,*args)
scipy.stats.rv_continuous._ppf_to_solve(self,x,q,*args)
scipy.stats.rv_continuous._reduce_func(self,args,kwds)
scipy.stats.rv_continuous._rvs(self,*args)
scipy.stats.rv_continuous._sf(self,x,*args)
scipy.stats.rv_continuous._stats(self,*args,**kwds)
scipy.stats.rv_continuous.cdf(self,x,*args,**kwds)
scipy.stats.rv_continuous.entropy(self,*args,**kwds)
scipy.stats.rv_continuous.est_loc_scale(self,data,*args)
scipy.stats.rv_continuous.expect(self,func=None,args=(),loc=0,scale=1,lb=None,ub=None,conditional=False,**kwds)
scipy.stats.rv_continuous.fit(self,data,*args,**kwds)
scipy.stats.rv_continuous.fit_loc_scale(self,data,*args)
scipy.stats.rv_continuous.freeze(self,*args,**kwds)
scipy.stats.rv_continuous.isf(self,q,*args,**kwds)
scipy.stats.rv_continuous.logcdf(self,x,*args,**kwds)
scipy.stats.rv_continuous.logpdf(self,x,*args,**kwds)
scipy.stats.rv_continuous.logsf(self,x,*args,**kwds)
scipy.stats.rv_continuous.moment(self,n,*args,**kwds)
scipy.stats.rv_continuous.nnlf(self,theta,x)
scipy.stats.rv_continuous.pdf(self,x,*args,**kwds)
scipy.stats.rv_continuous.ppf(self,q,*args,**kwds)
scipy.stats.rv_continuous.sf(self,x,*args,**kwds)
scipy.stats.rv_continuous.stats(self,*args,**kwds)
scipy.stats.rv_discrete(self,a=0,b=inf,name=None,badvalue=None,moment_tol=1e-08,values=None,inc=1,longname=None,shapes=None,extradoc=None)
scipy.stats.rv_discrete._argcheck(self,*args)
scipy.stats.rv_discrete._cdf(self,x,*args)
scipy.stats.rv_discrete._cdfsingle(self,k,*args)
scipy.stats.rv_discrete._construct_default_doc(self,longname=None,extradoc=None)
scipy.stats.rv_discrete._construct_doc(self)
scipy.stats.rv_discrete._entropy(self,*args)
scipy.stats.rv_discrete._isf(self,q,*args)
scipy.stats.rv_discrete._logcdf(self,x,*args)
scipy.stats.rv_discrete._logpmf(self,k,*args)
scipy.stats.rv_discrete._logsf(self,x,*args)
scipy.stats.rv_discrete._munp(self,n,*args)
scipy.stats.rv_discrete._nonzero(self,k,*args)
scipy.stats.rv_discrete._pmf(self,k,*args)
scipy.stats.rv_discrete._ppf(self,q,*args)
scipy.stats.rv_discrete._rvs(self,*args)
scipy.stats.rv_discrete._sf(self,x,*args)
scipy.stats.rv_discrete._stats(self,*args)
scipy.stats.rv_discrete.cdf(self,k,*args,**kwds)
scipy.stats.rv_discrete.entropy(self,*args,**kwds)
scipy.stats.rv_discrete.expect(self,func=None,args=(),loc=0,lb=None,ub=None,conditional=False)
scipy.stats.rv_discrete.freeze(self,*args,**kwds)
scipy.stats.rv_discrete.isf(self,q,*args,**kwds)
scipy.stats.rv_discrete.logcdf(self,k,*args,**kwds)
scipy.stats.rv_discrete.logpmf(self,k,*args,**kwds)
scipy.stats.rv_discrete.logsf(self,k,*args,**kwds)
scipy.stats.rv_discrete.moment(self,n,*args,**kwds)
scipy.stats.rv_discrete.pmf(self,k,*args,**kwds)
scipy.stats.rv_discrete.ppf(self,q,*args,**kwds)
scipy.stats.rv_discrete.rvs(self,*args,**kwargs)
scipy.stats.rv_discrete.sf(self,k,*args,**kwds)
scipy.stats.rv_discrete.stats(self,*args,**kwds)
scipy.stats.rv_frozen(self,dist,*args,**kwds)
scipy.stats.rv_frozen.cdf(self,x)
scipy.stats.rv_frozen.entropy(self)
scipy.stats.rv_frozen.interval(self,alpha)
scipy.stats.rv_frozen.isf(self,q)
scipy.stats.rv_frozen.logcdf(self,x)
scipy.stats.rv_frozen.logpdf(self,x)
scipy.stats.rv_frozen.logpmf(self,k)
scipy.stats.rv_frozen.logsf(self,x)
scipy.stats.rv_frozen.mean(self)
scipy.stats.rv_frozen.median(self)
scipy.stats.rv_frozen.moment(self,n)
scipy.stats.rv_frozen.pdf(self,x)
scipy.stats.rv_frozen.pmf(self,k)
scipy.stats.rv_frozen.ppf(self,q)
scipy.stats.rv_frozen.rvs(self,size=None)
scipy.stats.rv_frozen.sf(self,x)
scipy.stats.rv_frozen.stats(self,moments='mv')
scipy.stats.rv_frozen.std(self)
scipy.stats.rv_frozen.var(self)
scipy.stats.rv_generic(object)
scipy.stats.rv_generic._fix_loc(self,args,loc)
scipy.stats.rv_generic._fix_loc_scale(self,args,loc,scale=1)
scipy.stats.rv_generic._fix_loc_scale_kwarg3(self,args,loc,scale=1,kwarg3=1,kwarg3_default=None)
scipy.stats.rv_generic.interval(self,alpha,*args,**kwds)
scipy.stats.rv_generic.mean(self,*args,**kwds)
scipy.stats.rv_generic.median(self,*args,**kwds)
scipy.stats.rv_generic.rvs(self,*args,**kwds)
scipy.stats.rv_generic.std(self,*args,**kwds)
scipy.stats.rv_generic.var(self,*args,**kwds)
scipy.stats.semicircular_gen(rv_continuous)
scipy.stats.semicircular_gen._cdf(self,x)
scipy.stats.semicircular_gen._entropy(self)
scipy.stats.semicircular_gen._pdf(self,x)
scipy.stats.semicircular_gen._stats(self)
scipy.stats.skellam_gen(rv_discrete)
scipy.stats.skellam_gen._cdf(self,x,mu1,mu2)
scipy.stats.skellam_gen._pmf(self,x,mu1,mu2)
scipy.stats.skellam_gen._rvs(self,mu1,mu2)
scipy.stats.skellam_gen._stats(self,mu1,mu2)
scipy.stats.t_gen(rv_continuous)
scipy.stats.t_gen._cdf(self,x,df)
scipy.stats.t_gen._isf(self,q,df)
scipy.stats.t_gen._logpdf(self,x,df)
scipy.stats.t_gen._pdf(self,x,df)
scipy.stats.t_gen._ppf(self,q,df)
scipy.stats.t_gen._rvs(self,df)
scipy.stats.t_gen._sf(self,x,df)
scipy.stats.t_gen._stats(self,df)
scipy.stats.triang_gen(rv_continuous)
scipy.stats.triang_gen._argcheck(self,c)
scipy.stats.triang_gen._cdf(self,x,c)
scipy.stats.triang_gen._entropy(self,c)
scipy.stats.triang_gen._pdf(self,x,c)
scipy.stats.triang_gen._ppf(self,q,c)
scipy.stats.triang_gen._rvs(self,c)
scipy.stats.triang_gen._stats(self,c)
scipy.stats.truncexpon_gen(rv_continuous)
scipy.stats.truncexpon_gen._argcheck(self,b)
scipy.stats.truncexpon_gen._cdf(self,x,b)
scipy.stats.truncexpon_gen._entropy(self,b)
scipy.stats.truncexpon_gen._logpdf(self,x,b)
scipy.stats.truncexpon_gen._munp(self,n,b)
scipy.stats.truncexpon_gen._pdf(self,x,b)
scipy.stats.truncexpon_gen._ppf(self,q,b)
scipy.stats.truncnorm_gen(rv_continuous)
scipy.stats.truncnorm_gen._argcheck(self,a,b)
scipy.stats.truncnorm_gen._cdf(self,x,a,b)
scipy.stats.truncnorm_gen._logpdf(self,x,a,b)
scipy.stats.truncnorm_gen._pdf(self,x,a,b)
scipy.stats.truncnorm_gen._ppf(self,q,a,b)
scipy.stats.truncnorm_gen._stats(self,a,b)
scipy.stats.tukeylambda_gen(rv_continuous)
scipy.stats.tukeylambda_gen._argcheck(self,lam)
scipy.stats.tukeylambda_gen._cdf(self,x,lam)
scipy.stats.tukeylambda_gen._entropy(self,lam)
scipy.stats.tukeylambda_gen._pdf(self,x,lam)
scipy.stats.tukeylambda_gen._ppf(self,q,lam)
scipy.stats.tukeylambda_gen._stats(self,lam)
scipy.stats.uniform_gen(rv_continuous)
scipy.stats.uniform_gen._cdf(self,x)
scipy.stats.uniform_gen._entropy(self)
scipy.stats.uniform_gen._pdf(self,x)
scipy.stats.uniform_gen._ppf(self,q)
scipy.stats.uniform_gen._rvs(self)
scipy.stats.uniform_gen._stats(self)
scipy.stats.valarray(shape,value=nan,typecode=None)
scipy.stats.vonmises_gen(rv_continuous)
scipy.stats.vonmises_gen._cdf(self,x,b)
scipy.stats.vonmises_gen._pdf(self,x,b)
scipy.stats.vonmises_gen._rvs(self,b)
scipy.stats.vonmises_gen._stats_skip(self,b)
scipy.stats.wald_gen(invgauss_gen)
scipy.stats.wald_gen._cdf(self,x)
scipy.stats.wald_gen._logpdf(self,x)
scipy.stats.wald_gen._pdf(self,x)
scipy.stats.wald_gen._rvs(self)
scipy.stats.wald_gen._stats(self)
scipy.stats.wrapcauchy_gen(rv_continuous)
scipy.stats.wrapcauchy_gen._argcheck(self,c)
scipy.stats.wrapcauchy_gen._cdf(self,x,c)
scipy.stats.wrapcauchy_gen._entropy(self,c)
scipy.stats.wrapcauchy_gen._pdf(self,x,c)
scipy.stats.wrapcauchy_gen._ppf(self,q,c)
scipy.stats.zipf_gen(rv_discrete)
scipy.stats.zipf_gen._argcheck(self,a)
scipy.stats.zipf_gen._munp(self,n,a)
scipy.stats.zipf_gen._pmf(self,k,a)
scipy.stats.zipf_gen._rvs(self,a)
scipy.stats.zipf_gen._stats(self,a)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/tests/test_continuous_basic.py----------------------------------------
A:scipy.stats.tests.test_continuous_basic.olderr->numpy.seterr(all='ignore')
A:scipy.stats.tests.test_continuous_basic.distfn->getattr(stats, distname)
A:scipy.stats.tests.test_continuous_basic.rvs->getattr(stats, distname).rvs(*arg, size=sn)
A:scipy.stats.tests.test_continuous_basic.sm->getattr(stats, distname).rvs(*arg, size=sn).mean()
A:scipy.stats.tests.test_continuous_basic.sv->getattr(stats, distname).rvs(*arg, size=sn).var()
A:scipy.stats.tests.test_continuous_basic.skurt->scipy.stats.kurtosis(rvs)
A:scipy.stats.tests.test_continuous_basic.sskew->scipy.stats.skew(rvs)
A:scipy.stats.tests.test_continuous_basic.(m, v)->getattr(stats, distname).stats(*arg)
A:scipy.stats.tests.test_continuous_basic.m1->getattr(stats, distname).moment(1, *arg)
A:scipy.stats.tests.test_continuous_basic.m2->getattr(stats, distname).moment(2, *arg)
A:scipy.stats.tests.test_continuous_basic.prob->scipy.stats.betai(0.5 * df, 0.5, df / (df + t * t))
A:scipy.stats.tests.test_continuous_basic.(skew, kurt)->getattr(stats, distname).stats(*arg, moments='sk')
A:scipy.stats.tests.test_continuous_basic.median->getattr(stats, distname).ppf(0.5, *arg)
A:scipy.stats.tests.test_continuous_basic.pdfv->getattr(stats, distname).pdf(median, *arg)
A:scipy.stats.tests.test_continuous_basic.points->numpy.array([0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8])
A:scipy.stats.tests.test_continuous_basic.vals->getattr(stats, distname).ppf(points, *args)
A:scipy.stats.tests.test_continuous_basic.pdf->getattr(stats, distname).pdf(vals, *args)
A:scipy.stats.tests.test_continuous_basic.logpdf->getattr(stats, distname).logpdf(vals, *args)
A:scipy.stats.tests.test_continuous_basic.sf->getattr(stats, distname).sf(vals, *args)
A:scipy.stats.tests.test_continuous_basic.logsf->getattr(stats, distname).logsf(vals, *args)
A:scipy.stats.tests.test_continuous_basic.cdf->getattr(stats, distname).cdf(vals, *args)
A:scipy.stats.tests.test_continuous_basic.logcdf->getattr(stats, distname).logcdf(vals, *args)
A:scipy.stats.tests.test_continuous_basic.(D, pval)->scipy.stats.kstest(dist, '', args=args, N=1000)
scipy.stats.tests.test_continuous_basic._silence_fp_errors(func)
scipy.stats.tests.test_continuous_basic.check_cdf_logcdf(distfn,args,msg)
scipy.stats.tests.test_continuous_basic.check_cdf_ppf(distfn,arg,msg)
scipy.stats.tests.test_continuous_basic.check_distribution_rvs(dist,args,alpha,rvs)
scipy.stats.tests.test_continuous_basic.check_moment(distfn,arg,m,v,msg)
scipy.stats.tests.test_continuous_basic.check_pdf(distfn,arg,msg)
scipy.stats.tests.test_continuous_basic.check_pdf_logpdf(distfn,args,msg)
scipy.stats.tests.test_continuous_basic.check_sample_mean(sm,v,n,popmean)
scipy.stats.tests.test_continuous_basic.check_sample_meanvar(sm,m,msg)
scipy.stats.tests.test_continuous_basic.check_sample_meanvar_(distfn,arg,m,v,sm,sv,sn,msg)
scipy.stats.tests.test_continuous_basic.check_sample_skew_kurt(distfn,arg,ss,sk,msg)
scipy.stats.tests.test_continuous_basic.check_sample_var(sv,n,popvar)
scipy.stats.tests.test_continuous_basic.check_sf_isf(distfn,arg,msg)
scipy.stats.tests.test_continuous_basic.check_sf_logsf(distfn,args,msg)
scipy.stats.tests.test_continuous_basic.test_cont_basic()
scipy.stats.tests.test_continuous_basic.test_cont_basic_slow()
scipy.tests.test_continuous_basic._silence_fp_errors(func)
scipy.tests.test_continuous_basic.check_cdf_logcdf(distfn,args,msg)
scipy.tests.test_continuous_basic.check_cdf_ppf(distfn,arg,msg)
scipy.tests.test_continuous_basic.check_distribution_rvs(dist,args,alpha,rvs)
scipy.tests.test_continuous_basic.check_moment(distfn,arg,m,v,msg)
scipy.tests.test_continuous_basic.check_pdf(distfn,arg,msg)
scipy.tests.test_continuous_basic.check_pdf_logpdf(distfn,args,msg)
scipy.tests.test_continuous_basic.check_sample_mean(sm,v,n,popmean)
scipy.tests.test_continuous_basic.check_sample_meanvar(sm,m,msg)
scipy.tests.test_continuous_basic.check_sample_meanvar_(distfn,arg,m,v,sm,sv,sn,msg)
scipy.tests.test_continuous_basic.check_sample_skew_kurt(distfn,arg,ss,sk,msg)
scipy.tests.test_continuous_basic.check_sample_var(sv,n,popvar)
scipy.tests.test_continuous_basic.check_sf_isf(distfn,arg,msg)
scipy.tests.test_continuous_basic.check_sf_logsf(distfn,args,msg)
scipy.tests.test_continuous_basic.test_cont_basic()
scipy.tests.test_continuous_basic.test_cont_basic_slow()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/tests/test_mstats_basic.py----------------------------------------
A:scipy.stats.tests.test_mstats_basic.data->numpy.ma.array([77, 87, 88, 114, 151, 210, 219, 246, 253, 262, 296, 299, 306, 376, 428, 515, 666, 1310, 2611])
A:scipy.stats.tests.test_mstats_basic.quants->scipy.stats.mstats.mquantiles(data, axis=0, limit=(0, 50))
A:scipy.stats.tests.test_mstats_basic.actual->scipy.stats.mstats.hmean(a)
A:scipy.stats.tests.test_mstats_basic.desired->numpy.ma.fix_invalid([-1.3416407864999, -0.44721359549996, 0.44721359549996, 1.3416407864999, np.nan])
A:scipy.stats.tests.test_mstats_basic.desired1->scipy.stats.mstats.hmean(a, axis=-1)
A:scipy.stats.tests.test_mstats_basic.a->numpy.ma.arange(12)
A:scipy.stats.tests.test_mstats_basic.actual1->scipy.stats.mstats.hmean(a, axis=-1)
A:scipy.stats.tests.test_mstats_basic.x->numpy.linspace(0, 100, 100)
A:scipy.stats.tests.test_mstats_basic.olderr->numpy.seterr(all='ignore')
A:scipy.stats.tests.test_mstats_basic.pr->scipy.stats.mstats.pearsonr(x, x)
A:scipy.stats.tests.test_mstats_basic.y->scipy.stats.mstats.zscore(self.testcase)
A:scipy.stats.tests.test_mstats_basic.z->numpy.ma.fix_invalid([1.65, 2.64, 2.64, 6.95, np.nan])
A:scipy.stats.tests.test_mstats_basic.result->scipy.stats.mstats.friedmanchisquare(*x)
A:scipy.stats.tests.test_mstats_basic.output->scipy.stats.mstats.kendalltau_seasonal(x)
A:scipy.stats.tests.test_mstats_basic.trimx->scipy.stats.mstats.trimboth(x)
A:scipy.stats.tests.test_mstats_basic.winsorized->scipy.stats.mstats.winsorize(data)
A:scipy.stats.tests.test_mstats_basic.testmathworks->numpy.ma.fix_invalid([1.165, 0.6268, 0.0751, 0.3516, -0.6965, np.nan])
A:scipy.stats.tests.test_mstats_basic.testcase_2d->numpy.ma.array(np.array([[0.05245846, 0.50344235, 0.86589117, 0.36936353, 0.46961149], [0.11574073, 0.31299969, 0.45925772, 0.72618805, 0.75194407], [0.67696689, 0.91878127, 0.09769044, 0.04645137, 0.37615733], [0.05903624, 0.29908861, 0.34088298, 0.66216337, 0.83160998], [0.64619526, 0.94894632, 0.27855892, 0.0706151, 0.39962917]]), mask=np.array([[True, False, False, True, False], [True, True, True, False, True], [False, False, False, False, False], [True, True, True, True, True], [False, False, True, False, False]], dtype=np.bool))
A:scipy.stats.tests.test_mstats_basic.correct_2d->numpy.ma.array(np.array([-1.5, -3.0, -1.47247052385, 0.0, -1.26979517952]), mask=np.array([False, False, False, True, False], dtype=np.bool))
A:scipy.stats.tests.test_mstats_basic.correct_2d_bias_corrected->numpy.ma.array(np.array([-1.5, -3.0, -1.88988209538, 0.0, -0.5234638463918877]), mask=np.array([False, False, False, True, False], dtype=np.bool))
A:scipy.stats.tests.test_mstats_basic.a2->numpy.reshape(a1, (3, 5))
A:scipy.stats.tests.test_mstats_basic.ma1->numpy.ma.masked_where(ma.array(a1) > 2, a1)
A:scipy.stats.tests.test_mstats_basic.ma2->numpy.ma.masked_where(a2 > 2, a2)
A:scipy.stats.tests.test_mstats_basic.testcase->numpy.ma.fix_invalid([1, 2, 3, 4, np.nan])
A:scipy.stats.tests.test_mstats_basic.(slope, intercept, r_value, p_value, sterr)->scipy.stats.mstats.linregress(x, y)
A:scipy.stats.tests.test_mstats_basic.pos->scipy.stats.mstats.plotting_positions(np.arange(3), 0, 0)
scipy.stats.tests.test_mstats_basic.TestCorr(TestCase)
scipy.stats.tests.test_mstats_basic.TestCorr.test_kendalltau(self)
scipy.stats.tests.test_mstats_basic.TestCorr.test_kendalltau_seasonal(self)
scipy.stats.tests.test_mstats_basic.TestCorr.test_pearsonr(self)
scipy.stats.tests.test_mstats_basic.TestCorr.test_pointbiserial(self)
scipy.stats.tests.test_mstats_basic.TestCorr.test_spearmanr(self)
scipy.stats.tests.test_mstats_basic.TestGMean(TestCase)
scipy.stats.tests.test_mstats_basic.TestGMean.test_1D(self)
scipy.stats.tests.test_mstats_basic.TestGMean.test_2D(self)
scipy.stats.tests.test_mstats_basic.TestHMean(TestCase)
scipy.stats.tests.test_mstats_basic.TestHMean.test_1D(self)
scipy.stats.tests.test_mstats_basic.TestHMean.test_2D(self)
scipy.stats.tests.test_mstats_basic.TestMisc(TestCase)
scipy.stats.tests.test_mstats_basic.TestMisc.test_friedmanchisq(self)
scipy.stats.tests.test_mstats_basic.TestMisc.test_kstwosamp(self)
scipy.stats.tests.test_mstats_basic.TestMisc.test_obrientransform(self)
scipy.stats.tests.test_mstats_basic.TestMoments(TestCase)
scipy.stats.tests.test_mstats_basic.TestMoments.test_kurtosis(self)
scipy.stats.tests.test_mstats_basic.TestMoments.test_mode(self)
scipy.stats.tests.test_mstats_basic.TestMoments.test_moment(self)
scipy.stats.tests.test_mstats_basic.TestMoments.test_skewness(self)
scipy.stats.tests.test_mstats_basic.TestMoments.test_variation(self)
scipy.stats.tests.test_mstats_basic.TestMquantiles(TestCase)
scipy.stats.tests.test_mstats_basic.TestMquantiles.test_mquantiles_limit_keyword(self)
scipy.stats.tests.test_mstats_basic.TestPercentile(TestCase)
scipy.stats.tests.test_mstats_basic.TestPercentile.setUp(self)
scipy.stats.tests.test_mstats_basic.TestPercentile.test_2D(self)
scipy.stats.tests.test_mstats_basic.TestPercentile.test_percentile(self)
scipy.stats.tests.test_mstats_basic.TestRanking(self,*args,**kwargs)
scipy.stats.tests.test_mstats_basic.TestRanking.__init__(self,*args,**kwargs)
scipy.stats.tests.test_mstats_basic.TestRanking.test_ranking(self)
scipy.stats.tests.test_mstats_basic.TestTrimming(TestCase)
scipy.stats.tests.test_mstats_basic.TestTrimming.test_trim(self)
scipy.stats.tests.test_mstats_basic.TestTrimming.test_trim_old(self)
scipy.stats.tests.test_mstats_basic.TestTrimming.test_trimmed_stde(self)
scipy.stats.tests.test_mstats_basic.TestTrimming.test_trimmedmean(self)
scipy.stats.tests.test_mstats_basic.TestTrimming.test_winsorization(self)
scipy.stats.tests.test_mstats_basic.TestVariability(TestCase)
scipy.stats.tests.test_mstats_basic.TestVariability.test_sem(self)
scipy.stats.tests.test_mstats_basic.TestVariability.test_signaltonoise(self)
scipy.stats.tests.test_mstats_basic.TestVariability.test_zmap(self)
scipy.stats.tests.test_mstats_basic.TestVariability.test_zscore(self)
scipy.stats.tests.test_mstats_basic.test_plotting_positions()
scipy.stats.tests.test_mstats_basic.test_regress_simple()
scipy.tests.test_mstats_basic.TestCorr(TestCase)
scipy.tests.test_mstats_basic.TestCorr.test_kendalltau(self)
scipy.tests.test_mstats_basic.TestCorr.test_kendalltau_seasonal(self)
scipy.tests.test_mstats_basic.TestCorr.test_pearsonr(self)
scipy.tests.test_mstats_basic.TestCorr.test_pointbiserial(self)
scipy.tests.test_mstats_basic.TestCorr.test_spearmanr(self)
scipy.tests.test_mstats_basic.TestGMean(TestCase)
scipy.tests.test_mstats_basic.TestGMean.test_1D(self)
scipy.tests.test_mstats_basic.TestGMean.test_2D(self)
scipy.tests.test_mstats_basic.TestHMean(TestCase)
scipy.tests.test_mstats_basic.TestHMean.test_1D(self)
scipy.tests.test_mstats_basic.TestHMean.test_2D(self)
scipy.tests.test_mstats_basic.TestMisc(TestCase)
scipy.tests.test_mstats_basic.TestMisc.test_friedmanchisq(self)
scipy.tests.test_mstats_basic.TestMisc.test_kstwosamp(self)
scipy.tests.test_mstats_basic.TestMisc.test_obrientransform(self)
scipy.tests.test_mstats_basic.TestMoments(TestCase)
scipy.tests.test_mstats_basic.TestMoments.test_kurtosis(self)
scipy.tests.test_mstats_basic.TestMoments.test_mode(self)
scipy.tests.test_mstats_basic.TestMoments.test_moment(self)
scipy.tests.test_mstats_basic.TestMoments.test_skewness(self)
scipy.tests.test_mstats_basic.TestMoments.test_variation(self)
scipy.tests.test_mstats_basic.TestMquantiles(TestCase)
scipy.tests.test_mstats_basic.TestMquantiles.test_mquantiles_limit_keyword(self)
scipy.tests.test_mstats_basic.TestPercentile(TestCase)
scipy.tests.test_mstats_basic.TestPercentile.setUp(self)
scipy.tests.test_mstats_basic.TestPercentile.test_2D(self)
scipy.tests.test_mstats_basic.TestPercentile.test_percentile(self)
scipy.tests.test_mstats_basic.TestRanking(self,*args,**kwargs)
scipy.tests.test_mstats_basic.TestRanking.test_ranking(self)
scipy.tests.test_mstats_basic.TestTrimming(TestCase)
scipy.tests.test_mstats_basic.TestTrimming.test_trim(self)
scipy.tests.test_mstats_basic.TestTrimming.test_trim_old(self)
scipy.tests.test_mstats_basic.TestTrimming.test_trimmed_stde(self)
scipy.tests.test_mstats_basic.TestTrimming.test_trimmedmean(self)
scipy.tests.test_mstats_basic.TestTrimming.test_winsorization(self)
scipy.tests.test_mstats_basic.TestVariability(TestCase)
scipy.tests.test_mstats_basic.TestVariability.test_sem(self)
scipy.tests.test_mstats_basic.TestVariability.test_signaltonoise(self)
scipy.tests.test_mstats_basic.TestVariability.test_zmap(self)
scipy.tests.test_mstats_basic.TestVariability.test_zscore(self)
scipy.tests.test_mstats_basic.test_plotting_positions()
scipy.tests.test_mstats_basic.test_regress_simple()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/tests/test_fit.py----------------------------------------
A:scipy.stats.tests.test_fit.distfn->getattr(stats, distname)
A:scipy.stats.tests.test_fit.rvs->numpy.concatenate([rvs, distfn.rvs(*arg, size=n_repl2 - n_repl1)])
A:scipy.stats.tests.test_fit.est->getattr(stats, distname).fit(rvs)
A:scipy.stats.tests.test_fit.truearg->numpy.hstack([arg, [0.0, 1.0]])
A:scipy.stats.tests.test_fit.diffthreshold->numpy.max(np.vstack([truearg * thresh_percent, np.ones(distfn.numargs + 2) * thresh_min]), 0)
A:scipy.stats.tests.test_fit.diffthreshold[-2]->numpy.max([np.abs(rvs.mean()) * thresh_percent, thresh_min])
scipy.stats.tests.test_fit._est_cont_fit()
scipy.stats.tests.test_fit.check_cont_fit(distname,arg)
scipy.tests.test_fit._est_cont_fit()
scipy.tests.test_fit.check_cont_fit(distname,arg)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/tests/test_binned_statistic.py----------------------------------------
A:scipy.stats.tests.test_binned_statistic.cls.x->numpy.random.random(100)
A:scipy.stats.tests.test_binned_statistic.cls.y->numpy.random.random(100)
A:scipy.stats.tests.test_binned_statistic.cls.v->numpy.random.random(100)
A:scipy.stats.tests.test_binned_statistic.cls.X->numpy.random.random((100, 3))
A:scipy.stats.tests.test_binned_statistic.(count1, edges1, bc)->binned_statistic_dd(X, v, 'count', bins=3)
A:scipy.stats.tests.test_binned_statistic.(count2, edges2)->numpy.histogramdd(X, bins=3)
A:scipy.stats.tests.test_binned_statistic.(sum1, edges1, bc)->binned_statistic_dd(X, v, 'sum', bins=3)
A:scipy.stats.tests.test_binned_statistic.(sum2, edges2)->numpy.histogramdd(X, bins=3, weights=v)
A:scipy.stats.tests.test_binned_statistic.(stat1, edges1, bc)->binned_statistic_dd(X, v, 'median', bins=3)
A:scipy.stats.tests.test_binned_statistic.(stat2, edges2, bc)->binned_statistic_dd(X, v, np.median, bins=3)
A:scipy.stats.tests.test_binned_statistic.bc2->numpy.array([63, 33, 86, 83, 88, 67, 57, 33, 42, 41, 82, 83, 92, 32, 36, 91, 43, 87, 81, 81])
A:scipy.stats.tests.test_binned_statistic.(count1, binx1, biny1, bc)->binned_statistic_2d(x, y, v, 'count', bins=3)
A:scipy.stats.tests.test_binned_statistic.(count2, binx2, biny2)->numpy.histogram2d(x, y, bins=5)
A:scipy.stats.tests.test_binned_statistic.(sum1, binx1, biny1, bc)->binned_statistic_2d(x, y, v, 'sum', bins=5)
A:scipy.stats.tests.test_binned_statistic.(sum2, binx2, biny2)->numpy.histogram2d(x, y, bins=5, weights=v)
A:scipy.stats.tests.test_binned_statistic.(stat1, binx1, biny1, bc)->binned_statistic_2d(x, y, v, 'median', bins=5)
A:scipy.stats.tests.test_binned_statistic.(stat2, binx2, biny2, bc)->binned_statistic_2d(x, y, v, np.median, bins=5)
scipy.stats.tests.testTestBinnedStatistic(object)
scipy.stats.tests.testTestBinnedStatistic.setup_class(cls)
scipy.stats.tests.testTestBinnedStatistic.test_1d_bincode(self)
scipy.stats.tests.testTestBinnedStatistic.test_1d_count(self)
scipy.stats.tests.testTestBinnedStatistic.test_1d_mean(self)
scipy.stats.tests.testTestBinnedStatistic.test_1d_median(self)
scipy.stats.tests.testTestBinnedStatistic.test_1d_std(self)
scipy.stats.tests.testTestBinnedStatistic.test_1d_sum(self)
scipy.stats.tests.testTestBinnedStatistic.test_2d_bincode(self)
scipy.stats.tests.testTestBinnedStatistic.test_2d_count(self)
scipy.stats.tests.testTestBinnedStatistic.test_2d_mean(self)
scipy.stats.tests.testTestBinnedStatistic.test_2d_median(self)
scipy.stats.tests.testTestBinnedStatistic.test_2d_std(self)
scipy.stats.tests.testTestBinnedStatistic.test_2d_sum(self)
scipy.stats.tests.testTestBinnedStatistic.test_dd_bincode(self)
scipy.stats.tests.testTestBinnedStatistic.test_dd_count(self)
scipy.stats.tests.testTestBinnedStatistic.test_dd_mean(self)
scipy.stats.tests.testTestBinnedStatistic.test_dd_median(self)
scipy.stats.tests.testTestBinnedStatistic.test_dd_std(self)
scipy.stats.tests.testTestBinnedStatistic.test_dd_sum(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic(object)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.setup_class(cls)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_1d_bincode(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_1d_count(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_1d_mean(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_1d_median(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_1d_std(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_1d_sum(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_2d_bincode(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_2d_count(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_2d_mean(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_2d_median(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_2d_std(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_2d_sum(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_dd_bincode(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_dd_count(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_dd_mean(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_dd_median(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_dd_std(self)
scipy.stats.tests.test_binned_statistic.TestBinnedStatistic.test_dd_sum(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/tests/test_distributions.py----------------------------------------
A:scipy.stats.tests.test_distributions.qtest->scipy.stats.ksoneisf(significance, N)
A:scipy.stats.tests.test_distributions.cdf->scipy.stats.genexpon.cdf(numpy.arange(0, 10, 0.01), 0.5, 0.5, 2.0)
A:scipy.stats.tests.test_distributions.dist->eval('stats.' + diststr)
A:scipy.stats.tests.test_distributions.vals->getattr(stats, dist).fit(res, floc=0)
A:scipy.stats.tests.test_distributions.cdfvals->cdf(vals, *args)
A:scipy.stats.tests.test_distributions.q->max(abs(cdfvals - np.arange(1.0, N + 1) / N))
A:scipy.stats.tests.test_distributions.(D, pval)->scipy.stats.kstest(dist, '', args=args, N=1000)
A:scipy.stats.tests.test_distributions.distfunc->getattr(stats, dist)
A:scipy.stats.tests.test_distributions.args->tuple(1.0 + rand(nargs))
A:scipy.stats.tests.test_distributions.vm->scipy.stats.vonmises(k, loc=l, scale=s)
A:scipy.stats.tests.test_distributions.val->scipy.stats.dlaplace(1.5).rvs(3)
A:scipy.stats.tests.test_distributions.out->numpy.select([k >= 30, k >= 5], [1.0, (k - 5.0 + 1) / (30 - 5.0)], 0)
A:scipy.stats.tests.test_distributions.k->numpy.arange(-10, 15)
A:scipy.stats.tests.test_distributions.vals1->numpy.log(stats.geom.pmf([1, 2, 3], 0.5))
A:scipy.stats.tests.test_distributions.vals2->getattr(stats, dist).fit(res, fscale=1)
A:scipy.stats.tests.test_distributions.vals_sf->scipy.stats.geom.sf([1, 2, 3], 0.5)
A:scipy.stats.tests.test_distributions.expected->numpy.array([floc, np.sqrt(((x - floc) ** 2).mean())])
A:scipy.stats.tests.test_distributions.hgpmf->scipy.stats.hypergeom.pmf(2, tot, good, N)
A:scipy.stats.tests.test_distributions.res2->scipy.stats.hypergeom.sf(quantiles, oranges + pears, oranges, 42000.0)
A:scipy.stats.tests.test_distributions.r->scipy.stats.rv_discrete(name='sample', values=(states, probability))
A:scipy.stats.tests.test_distributions.x->numpy.linspace(0.1, 0.7, num=5)
A:scipy.stats.tests.test_distributions.skpmfR->numpy.array([4.225458296192689e-05, 0.00011404838449648488, 0.0002897962580175266, 0.0006917707818210123, 0.0015480716105844708, 0.003241227496343389, 0.006337370717512329, 0.011552351566696643, 0.019606152375042644, 0.030947164083410337, 0.04540173756676736, 0.06189432816682069, 0.07842460950017058, 0.09241881253357313, 0.10139793148019728, 0.10371927988298846, 0.09907658307740609, 0.08854666007308956, 0.07418784205248681, 0.05839277286220025, 0.04326869295301316, 0.030248159818374226, 0.01999143430560302, 0.01251687730330118, 0.007438987622622971])
A:scipy.stats.tests.test_distributions.skcdfR->numpy.array([6.40614753861921e-05, 0.00017810985988267694, 0.00046790611790020336, 0.0011596768997212152, 0.0027077485103056847, 0.005948976006649072, 0.012286346724161398, 0.023838698290858034, 0.04344485066590067, 0.074392014749311, 0.11979375231607835, 0.181688080482899, 0.2601126899830695, 0.3525315025166426, 0.4539294339968399, 0.5576487138798283, 0.6567252969572344, 0.7452719570303239, 0.8194597990828106, 0.8778525719450109, 0.921121264898024, 0.9513694247163982, 0.9713608590220012, 0.9838777363253024, 0.9913167239479254])
A:scipy.stats.tests.test_distributions.pdf->scipy.stats.gamma.pdf(3, 10, scale=1.0 / 5)
A:scipy.stats.tests.test_distributions.rvs->scipy.stats.cauchy.rvs(size=100)
A:scipy.stats.tests.test_distributions.eself->scipy.stats.entropy(pk, pk)
A:scipy.stats.tests.test_distributions.edouble->scipy.stats.entropy(pk, qk)
A:scipy.stats.tests.test_distributions.pk->numpy.ones(16, float)
A:scipy.stats.tests.test_distributions.S->scipy.stats.entropy(pk, qk)
A:scipy.stats.tests.test_distributions.qk->numpy.ones(16, float)
A:scipy.stats.tests.test_distributions.S2->scipy.stats.entropy(pk, qk, base=2.0)
A:scipy.stats.tests.test_distributions.a->scipy.stats.ncx2.cdf(np.arange(20, 25, 0.2), 2, 107.458615)
A:scipy.stats.tests.test_distributions.(b, c)->argsreduce(a > 0, a, 2)
A:scipy.stats.tests.test_distributions.res->getattr(stats, dist).rvs(*args, **{'size': 200})
A:scipy.stats.tests.test_distributions.vals3->getattr(stats, dist).fit(res, f0=args[0])
A:scipy.stats.tests.test_distributions.vals4->getattr(stats, dist).fit(res, f1=args[1])
A:scipy.stats.tests.test_distributions.vals5->getattr(stats, dist).fit(res, f2=args[2])
A:scipy.stats.tests.test_distributions.frozen->scipy.stats.lognorm(1)
A:scipy.stats.tests.test_distributions.result_f->scipy.stats.lognorm(1).moment(2)
A:scipy.stats.tests.test_distributions.result->eval('stats.' + diststr).moment(2, a)
A:scipy.stats.tests.test_distributions.m1->scipy.stats.lognorm(1).moment(2)
A:scipy.stats.tests.test_distributions.s->scipy.stats.lognorm(1).stats(moments='mvsk')
A:scipy.stats.tests.test_distributions.m2->scipy.stats.lognorm(1).moment(2)
A:scipy.stats.tests.test_distributions.v->scipy.stats.hypergeom.expect(lambda x: (x - 9.0) ** 2, args=(20, 10, 8), loc=5.0)
A:scipy.stats.tests.test_distributions.m->scipy.stats.hypergeom.expect(lambda x: x, args=(20, 10, 8), loc=5.0)
A:scipy.stats.tests.test_distributions.lb->scipy.stats.beta.ppf(0.05, 10, 10, loc=5, scale=2)
A:scipy.stats.tests.test_distributions.ub->scipy.stats.beta.ppf(0.95, 10, 10, loc=5, scale=2)
A:scipy.stats.tests.test_distributions.prob90->scipy.stats.beta.expect(lambda x: 1.0, args=(10, 10), loc=5.0, scale=2.0, lb=lb, ub=ub, conditional=False)
A:scipy.stats.tests.test_distributions.prob90c->scipy.stats.beta.expect(lambda x: 1, args=(10, 10), loc=5, scale=2, lb=lb, ub=ub, conditional=True)
A:scipy.stats.tests.test_distributions.(m_true, v_true)->scipy.stats.hypergeom.stats(20, 10, 8, loc=5.0)
A:scipy.stats.tests.test_distributions.v_bounds->scipy.stats.hypergeom.expect(lambda x: (x - 9.0) ** 2, args=(20, 10, 8), loc=5.0, lb=5, ub=13)
A:scipy.stats.tests.test_distributions.prob_bounds->scipy.stats.poisson.expect(lambda x: 1, args=(2,), lb=3, conditional=False)
A:scipy.stats.tests.test_distributions.prob_bc->scipy.stats.hypergeom.expect(lambda x: 1, args=(20, 10, 8), loc=5.0, lb=6, ub=12, conditional=True)
A:scipy.stats.tests.test_distributions.prob_b->scipy.stats.hypergeom.expect(lambda x: 1, args=(20, 10, 8), lb=0, ub=8)
A:scipy.stats.tests.test_distributions.prob_lb->scipy.stats.poisson.expect(lambda x: 1, args=(2,), lb=2, conditional=True)
A:scipy.stats.tests.test_distributions.g->scipy.stats.distributions.gamma_gen(name='gamma')
A:scipy.stats.tests.test_distributions.olderr->numpy.seterr(divide='ignore')
A:scipy.stats.tests.test_distributions.p->scipy.stats.tukeylambda.pdf(x, lam)
A:scipy.stats.tests.test_distributions.lam->numpy.array([[-1.0], [0.0], [2.0]])
A:scipy.stats.tests.test_distributions.true->numpy.array([0.25, 0.0, 0.5])
A:scipy.stats.tests.test_distributions.params->scipy.stats.cauchy.fit(rvs)
A:scipy.stats.tests.test_distributions.mv->scipy.stats.tukeylambda.stats(0.14, moments='mvsk')
A:scipy.stats.tests.test_distributions.mvsk->scipy.stats.powerlaw.stats(a, moments='mvsk')
A:scipy.stats.tests.test_distributions.d->numpy.array([-0.18879233, 0.15734249, 0.18695107, 0.27908787, -0.248649, -0.2171497, 0.12233512, 0.15126419, 0.03119282, 0.4365294, 0.08930393, -0.23509903, 0.28231224, -0.09974875, -0.25196048, 0.11102028, 0.1427649, 0.10176452, 0.18754054, 0.25826724, 0.05988819, 0.0531668, 0.21906056, 0.32106729, 0.2117662, 0.10886442, 0.09375789, 0.24583286, -0.22968366, -0.07842391, -0.31195432, -0.21271196, 0.1114243, -0.13293002, 0.01331725, -0.04330977, -0.09485776, -0.28434547, 0.22245721, -0.18518199, -0.10943985, -0.35243174, 0.06897665, -0.03553363, -0.0701746, -0.06037974, 0.37670779, -0.21684405])
A:scipy.stats.tests.test_distributions.warn_ctx->WarningManager()
A:scipy.stats.tests.test_distributions.b->scipy.stats.ncx2.veccdf(np.arange(20, 25, 0.2), 2, 107.458615)
scipy.stats.tests.test_TestArgsreduce()
scipy.stats.tests.test_TestArrayArgument(TestCase)
scipy.stats.tests.test_TestArrayArgument.test_noexception(self)
scipy.stats.tests.test_TestBernoulli(TestCase)
scipy.stats.tests.test_TestBernoulli.test_rvs(self)
scipy.stats.tests.test_TestBinom(TestCase)
scipy.stats.tests.test_TestBinom.test_rvs(self)
scipy.stats.tests.test_TestChi2(TestCase)
scipy.stats.tests.test_TestChi2.test_precision(self)
scipy.stats.tests.test_TestDLaplace(TestCase)
scipy.stats.tests.test_TestDLaplace.test_rvs(self)
scipy.stats.tests.test_TestDocstring(TestCase)
scipy.stats.tests.test_TestDocstring.test_docstrings(self)
scipy.stats.tests.test_TestDocstring.test_no_name_arg(self)
scipy.stats.tests.test_TestEntropy(TestCase)
scipy.stats.tests.test_TestEntropy.test_entropy_base(self)
scipy.stats.tests.test_TestEntropy.test_entropy_positive(self)
scipy.stats.tests.test_TestExpect(TestCase)
scipy.stats.tests.test_TestExpect.test_beta(self)
scipy.stats.tests.test_TestExpect.test_hypergeom(self)
scipy.stats.tests.test_TestExpect.test_norm(self)
scipy.stats.tests.test_TestExpect.test_poisson(self)
scipy.stats.tests.test_TestExpon(TestCase)
scipy.stats.tests.test_TestExpon.test_tail(self)
scipy.stats.tests.test_TestExpon.test_zero(self)
scipy.stats.tests.test_TestExponpow(TestCase)
scipy.stats.tests.test_TestExponpow.test_tail(self)
scipy.stats.tests.test_TestFitMethod(TestCase)
scipy.stats.tests.test_TestFitMethod.test_fit(self)
scipy.stats.tests.test_TestFitMethod.test_fix_fit(self)
scipy.stats.tests.test_TestFitMethod.test_fix_fit_2args_lognorm(self)
scipy.stats.tests.test_TestFrozen(TestCase)
scipy.stats.tests.test_TestFrozen.test_gamma(self)
scipy.stats.tests.test_TestFrozen.test_norm(self)
scipy.stats.tests.test_TestFrozen.test_regression_02(self)
scipy.stats.tests.test_TestGamma(TestCase)
scipy.stats.tests.test_TestGamma.test_pdf(self)
scipy.stats.tests.test_TestGenExpon(TestCase)
scipy.stats.tests.test_TestGenExpon.test_cdf_bounds(self)
scipy.stats.tests.test_TestGenExpon.test_pdf_unity_area(self)
scipy.stats.tests.test_TestGeom(TestCase)
scipy.stats.tests.test_TestGeom.test_cdf_sf(self)
scipy.stats.tests.test_TestGeom.test_logpmf(self)
scipy.stats.tests.test_TestGeom.test_pmf(self)
scipy.stats.tests.test_TestGeom.test_rvs(self)
scipy.stats.tests.test_TestHypergeom(TestCase)
scipy.stats.tests.test_TestHypergeom.test_precision(self)
scipy.stats.tests.test_TestHypergeom.test_precision2(self)
scipy.stats.tests.test_TestHypergeom.test_rvs(self)
scipy.stats.tests.test_TestLogser(TestCase)
scipy.stats.tests.test_TestLogser.test_rvs(self)
scipy.stats.tests.test_TestNBinom(TestCase)
scipy.stats.tests.test_TestNBinom.test_pmf(self)
scipy.stats.tests.test_TestNBinom.test_rvs(self)
scipy.stats.tests.test_TestPearson3(TestCase)
scipy.stats.tests.test_TestPearson3.test_cdf(self)
scipy.stats.tests.test_TestPearson3.test_pdf(self)
scipy.stats.tests.test_TestPearson3.test_rvs(self)
scipy.stats.tests.test_TestPoisson(TestCase)
scipy.stats.tests.test_TestPoisson.test_rvs(self)
scipy.stats.tests.test_TestRandInt(TestCase)
scipy.stats.tests.test_TestRandInt.test_cdf(self)
scipy.stats.tests.test_TestRandInt.test_pdf(self)
scipy.stats.tests.test_TestRandInt.test_rvs(self)
scipy.stats.tests.test_TestRvDiscrete(TestCase)
scipy.stats.tests.test_TestRvDiscrete.test_rvs(self)
scipy.stats.tests.test_TestSkellam(TestCase)
scipy.stats.tests.test_TestSkellam.test_cdf(self)
scipy.stats.tests.test_TestSkellam.test_pmf(self)
scipy.stats.tests.test_TestZipf(TestCase)
scipy.stats.tests.test_TestZipf.test_rvs(self)
scipy.stats.tests.test_check_distribution(dist,args,alpha)
scipy.stats.tests.test_check_vonmises_cdf_periodic(k,l,s,x)
scipy.stats.tests.test_check_vonmises_pdf_periodic(k,l,s,x)
scipy.stats.tests.test_distributions.TestArgsreduce()
scipy.stats.tests.test_distributions.TestArrayArgument(TestCase)
scipy.stats.tests.test_distributions.TestArrayArgument.test_noexception(self)
scipy.stats.tests.test_distributions.TestBernoulli(TestCase)
scipy.stats.tests.test_distributions.TestBernoulli.test_rvs(self)
scipy.stats.tests.test_distributions.TestBinom(TestCase)
scipy.stats.tests.test_distributions.TestBinom.test_rvs(self)
scipy.stats.tests.test_distributions.TestChi2(TestCase)
scipy.stats.tests.test_distributions.TestChi2.test_precision(self)
scipy.stats.tests.test_distributions.TestDLaplace(TestCase)
scipy.stats.tests.test_distributions.TestDLaplace.test_rvs(self)
scipy.stats.tests.test_distributions.TestDocstring(TestCase)
scipy.stats.tests.test_distributions.TestDocstring.test_docstrings(self)
scipy.stats.tests.test_distributions.TestDocstring.test_no_name_arg(self)
scipy.stats.tests.test_distributions.TestEntropy(TestCase)
scipy.stats.tests.test_distributions.TestEntropy.test_entropy_base(self)
scipy.stats.tests.test_distributions.TestEntropy.test_entropy_positive(self)
scipy.stats.tests.test_distributions.TestExpect(TestCase)
scipy.stats.tests.test_distributions.TestExpect.test_beta(self)
scipy.stats.tests.test_distributions.TestExpect.test_hypergeom(self)
scipy.stats.tests.test_distributions.TestExpect.test_norm(self)
scipy.stats.tests.test_distributions.TestExpect.test_poisson(self)
scipy.stats.tests.test_distributions.TestExpon(TestCase)
scipy.stats.tests.test_distributions.TestExpon.test_tail(self)
scipy.stats.tests.test_distributions.TestExpon.test_zero(self)
scipy.stats.tests.test_distributions.TestExponpow(TestCase)
scipy.stats.tests.test_distributions.TestExponpow.test_tail(self)
scipy.stats.tests.test_distributions.TestFitMethod(TestCase)
scipy.stats.tests.test_distributions.TestFitMethod.test_fit(self)
scipy.stats.tests.test_distributions.TestFitMethod.test_fix_fit(self)
scipy.stats.tests.test_distributions.TestFitMethod.test_fix_fit_2args_lognorm(self)
scipy.stats.tests.test_distributions.TestFrozen(TestCase)
scipy.stats.tests.test_distributions.TestFrozen.test_gamma(self)
scipy.stats.tests.test_distributions.TestFrozen.test_norm(self)
scipy.stats.tests.test_distributions.TestFrozen.test_regression_02(self)
scipy.stats.tests.test_distributions.TestGamma(TestCase)
scipy.stats.tests.test_distributions.TestGamma.test_pdf(self)
scipy.stats.tests.test_distributions.TestGenExpon(TestCase)
scipy.stats.tests.test_distributions.TestGenExpon.test_cdf_bounds(self)
scipy.stats.tests.test_distributions.TestGenExpon.test_pdf_unity_area(self)
scipy.stats.tests.test_distributions.TestGeom(TestCase)
scipy.stats.tests.test_distributions.TestGeom.test_cdf_sf(self)
scipy.stats.tests.test_distributions.TestGeom.test_logpmf(self)
scipy.stats.tests.test_distributions.TestGeom.test_pmf(self)
scipy.stats.tests.test_distributions.TestGeom.test_rvs(self)
scipy.stats.tests.test_distributions.TestHypergeom(TestCase)
scipy.stats.tests.test_distributions.TestHypergeom.test_precision(self)
scipy.stats.tests.test_distributions.TestHypergeom.test_precision2(self)
scipy.stats.tests.test_distributions.TestHypergeom.test_rvs(self)
scipy.stats.tests.test_distributions.TestLogser(TestCase)
scipy.stats.tests.test_distributions.TestLogser.test_rvs(self)
scipy.stats.tests.test_distributions.TestNBinom(TestCase)
scipy.stats.tests.test_distributions.TestNBinom.test_pmf(self)
scipy.stats.tests.test_distributions.TestNBinom.test_rvs(self)
scipy.stats.tests.test_distributions.TestPearson3(TestCase)
scipy.stats.tests.test_distributions.TestPearson3.test_cdf(self)
scipy.stats.tests.test_distributions.TestPearson3.test_pdf(self)
scipy.stats.tests.test_distributions.TestPearson3.test_rvs(self)
scipy.stats.tests.test_distributions.TestPoisson(TestCase)
scipy.stats.tests.test_distributions.TestPoisson.test_rvs(self)
scipy.stats.tests.test_distributions.TestRandInt(TestCase)
scipy.stats.tests.test_distributions.TestRandInt.test_cdf(self)
scipy.stats.tests.test_distributions.TestRandInt.test_pdf(self)
scipy.stats.tests.test_distributions.TestRandInt.test_rvs(self)
scipy.stats.tests.test_distributions.TestRvDiscrete(TestCase)
scipy.stats.tests.test_distributions.TestRvDiscrete.test_rvs(self)
scipy.stats.tests.test_distributions.TestSkellam(TestCase)
scipy.stats.tests.test_distributions.TestSkellam.test_cdf(self)
scipy.stats.tests.test_distributions.TestSkellam.test_pmf(self)
scipy.stats.tests.test_distributions.TestZipf(TestCase)
scipy.stats.tests.test_distributions.TestZipf.test_rvs(self)
scipy.stats.tests.test_distributions.check_distribution(dist,args,alpha)
scipy.stats.tests.test_distributions.check_vonmises_cdf_periodic(k,l,s,x)
scipy.stats.tests.test_distributions.check_vonmises_pdf_periodic(k,l,s,x)
scipy.stats.tests.test_distributions.kolmogorov_check(diststr,args=(),N=20,significance=0.01)
scipy.stats.tests.test_distributions.test_all_distributions()
scipy.stats.tests.test_distributions.test_distribution_too_many_args()
scipy.stats.tests.test_distributions.test_frozen_fit_ticket_1536()
scipy.stats.tests.test_distributions.test_hypergeom_interval_1802()
scipy.stats.tests.test_distributions.test_ksone_fit_freeze()
scipy.stats.tests.test_distributions.test_nan_arguments_ticket_835()
scipy.stats.tests.test_distributions.test_ncx2_tails_ticket_955()
scipy.stats.tests.test_distributions.test_norm_logcdf()
scipy.stats.tests.test_distributions.test_poisson_logpmf_ticket_1436()
scipy.stats.tests.test_distributions.test_powerlaw_stats()
scipy.stats.tests.test_distributions.test_regression_ticket_1316()
scipy.stats.tests.test_distributions.test_regression_ticket_1326()
scipy.stats.tests.test_distributions.test_regression_ticket_1421()
scipy.stats.tests.test_distributions.test_regression_ticket_1530()
scipy.stats.tests.test_distributions.test_regression_tukey_lambda()
scipy.stats.tests.test_distributions.test_rvgeneric_std()
scipy.stats.tests.test_distributions.test_tukeylambda_stats_ticket_1545()
scipy.stats.tests.test_distributions.test_vonmises_pdf_periodic()
scipy.stats.tests.test_kolmogorov_check(diststr,args=(),N=20,significance=0.01)
scipy.stats.tests.test_test_all_distributions()
scipy.stats.tests.test_test_distribution_too_many_args()
scipy.stats.tests.test_test_frozen_fit_ticket_1536()
scipy.stats.tests.test_test_hypergeom_interval_1802()
scipy.stats.tests.test_test_ksone_fit_freeze()
scipy.stats.tests.test_test_nan_arguments_ticket_835()
scipy.stats.tests.test_test_ncx2_tails_ticket_955()
scipy.stats.tests.test_test_norm_logcdf()
scipy.stats.tests.test_test_poisson_logpmf_ticket_1436()
scipy.stats.tests.test_test_powerlaw_stats()
scipy.stats.tests.test_test_regression_ticket_1316()
scipy.stats.tests.test_test_regression_ticket_1326()
scipy.stats.tests.test_test_regression_ticket_1421()
scipy.stats.tests.test_test_regression_ticket_1530()
scipy.stats.tests.test_test_regression_tukey_lambda()
scipy.stats.tests.test_test_rvgeneric_std()
scipy.stats.tests.test_test_tukeylambda_stats_ticket_1545()
scipy.stats.tests.test_test_vonmises_pdf_periodic()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/tests/test_rank.py----------------------------------------
A:scipy.stats.tests.test_rank.ranks->numpy.array([1.5, 1.5, 4.0, 4.0, 4.0])
A:scipy.stats.tests.test_rank.c->tiecorrect(ranks)
A:scipy.stats.tests.test_rank.a->numpy.array(data, dtype=np.int)
A:scipy.stats.tests.test_rank.r->rankdata(data)
A:scipy.stats.tests.test_rank.expected->numpy.array([5.0, 5.0, 5.0, 2.0, 2.0, 2.0], dtype=np.float64)
A:scipy.stats.tests.test_rank.a2d->numpy.array(data, dtype=np.int).reshape(2, 3)
A:scipy.stats.tests.test_rank.data->numpy.array([2 ** 60, -2 ** 60 + 1], dtype=np.int64)
scipy.stats.tests.test_rank.TestRankData(TestCase)
scipy.stats.tests.test_rank.TestRankData.test_basic(self)
scipy.stats.tests.test_rank.TestRankData.test_empty(self)
scipy.stats.tests.test_rank.TestRankData.test_large_int(self)
scipy.stats.tests.test_rank.TestRankData.test_one(self)
scipy.stats.tests.test_rank.TestTieCorrect(TestCase)
scipy.stats.tests.test_rank.TestTieCorrect.test_basic(self)
scipy.stats.tests.test_rank.TestTieCorrect.test_empty(self)
scipy.stats.tests.test_rank.TestTieCorrect.test_no_correction(self)
scipy.stats.tests.test_rank.TestTieCorrect.test_one(self)
scipy.tests.test_rank.TestRankData(TestCase)
scipy.tests.test_rank.TestRankData.test_basic(self)
scipy.tests.test_rank.TestRankData.test_empty(self)
scipy.tests.test_rank.TestRankData.test_large_int(self)
scipy.tests.test_rank.TestRankData.test_one(self)
scipy.tests.test_rank.TestTieCorrect(TestCase)
scipy.tests.test_rank.TestTieCorrect.test_basic(self)
scipy.tests.test_rank.TestTieCorrect.test_empty(self)
scipy.tests.test_rank.TestTieCorrect.test_no_correction(self)
scipy.tests.test_rank.TestTieCorrect.test_one(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/tests/test_stats.py----------------------------------------
A:scipy.stats.tests.test_stats.X->array([1, 2, 3, 4, 5, 6, 7, 8, 9], float)
A:scipy.stats.tests.test_stats.ZERO->array([0, 0, 0, 0, 0, 0, 0, 0, 0], float)
A:scipy.stats.tests.test_stats.BIG->array([99999991, 99999992, 99999993, 99999994, 99999995, 99999996, 99999997, 99999998, 99999999], float)
A:scipy.stats.tests.test_stats.LITTLE->array([0.99999991, 0.99999992, 0.99999993, 0.99999994, 0.99999995, 0.99999996, 0.99999997, 0.99999998, 0.99999999], float)
A:scipy.stats.tests.test_stats.HUGE->array([1000000000000.0, 2000000000000.0, 3000000000000.0, 4000000000000.0, 5000000000000.0, 6000000000000.0, 7000000000000.0, 8000000000000.0, 9000000000000.0], float)
A:scipy.stats.tests.test_stats.TINY->array([1e-12, 2e-12, 3e-12, 4e-12, 5e-12, 6e-12, 7e-12, 8e-12, 9e-12], float)
A:scipy.stats.tests.test_stats.ROUND->array([0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5], float)
A:scipy.stats.tests.test_stats.y->numpy.array([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])
A:scipy.stats.tests.test_stats.self.X->array([1, 2, 3, 4, 5, 6, 7, 8, 9], float).copy()
A:scipy.stats.tests.test_stats.self.Xall->array([1, 2, 3, 4, 5, 6, 7, 8, 9], float).copy()
A:scipy.stats.tests.test_stats.self.Xsome->array([1, 2, 3, 4, 5, 6, 7, 8, 9], float).copy()
A:scipy.stats.tests.test_stats.self.Xsomet->array([1, 2, 3, 4, 5, 6, 7, 8, 9], float).copy()
A:scipy.stats.tests.test_stats.m->scipy.stats.nanmedian(self.Xall)
A:scipy.stats.tests.test_stats.olderr->numpy.seterr(all='ignore')
A:scipy.stats.tests.test_stats.s->scipy.stats.nanstd(self.Xall)
A:scipy.stats.tests.test_stats.x->scipy.stats.gmean(a, axis=axis, dtype=dtype)
A:scipy.stats.tests.test_stats.a->numpy.concatenate((np.linspace(9.5, 10.5, 11), np.linspace(-100, -50, 3)))
A:scipy.stats.tests.test_stats.(r, prob)->scipy.stats.pearsonr(a, b)
A:scipy.stats.tests.test_stats.res->scipy.stats.linregress(x, y)
A:scipy.stats.tests.test_stats.(oddsratio, pval)->scipy.stats.fisher_exact(table)
A:scipy.stats.tests.test_stats.sr->scipy.stats.spearmanr(x, y)
A:scipy.stats.tests.test_stats.pr->scipy.stats.pearsonr(xr, yr)
A:scipy.stats.tests.test_stats.rows->numpy.vstack((x, y))
A:scipy.stats.tests.test_stats.cols->numpy.hstack((np.expand_dims(x, 1), np.expand_dims(y, 1)))
A:scipy.stats.tests.test_stats.low_values->numpy.array([0.2, 0.3, 0.4, 0.5, 0.5, 0.6, 0.7, 0.8, 0.9, 1.1, 1.2], dtype=float)
A:scipy.stats.tests.test_stats.high_range->numpy.array([2, 3, 4, 2, 21, 32, 78, 95, 65, 66, 66, 66, 66, 4], dtype=float)
A:scipy.stats.tests.test_stats.low_range->numpy.array([2, 3, 3, 2, 3, 2.4, 2.1, 3.1, 2.9, 2.6, 2.7, 2.8, 2.2, 2.001], dtype=float)
A:scipy.stats.tests.test_stats.few_values->numpy.array([2.0, 3.0, -1.0, 0.0], dtype=float)
A:scipy.stats.tests.test_stats.given_results->scipy.stats.histogram(inputs, numbins=20)
A:scipy.stats.tests.test_stats.weights->numpy.array([1.0, 3.0, 4.5, 0.1, -1.0, 0.0, 0.3, 7.0, 103.2, 2, 40, 0, 0, 1])
A:scipy.stats.tests.test_stats.(cumfreqs, lowlim, binsize, extrapoints)->scipy.stats.cumfreq(x, numbins=4, defaultreallimits=(1.5, 5))
A:scipy.stats.tests.test_stats.(relfreqs, lowlim, binsize, extrapoints)->scipy.stats.relfreq(a, numbins=4)
A:scipy.stats.tests.test_stats.(relfreqs2, lowlim, binsize, extrapoints)->scipy.stats.relfreq([1, 4, 2, 1, 3, 1], numbins=4)
A:scipy.stats.tests.test_stats.actual->scipy.stats.hmean(a)
A:scipy.stats.tests.test_stats.desired->array((1.0, 2.0, 3.0, 4.0))
A:scipy.stats.tests.test_stats.desired1->array((v, v, v))
A:scipy.stats.tests.test_stats.v->power(1 * 2 * 3 * 4, 1.0 / 4.0)
A:scipy.stats.tests.test_stats.actual1->scipy.stats.hmean(a, axis=1)
A:scipy.stats.tests.test_stats.vals->scipy.stats.mode(data1)
A:scipy.stats.tests.test_stats.t3->numpy.sqrt(2.0)
A:scipy.stats.tests.test_stats.z0->scipy.stats.zscore(x, axis=0)
A:scipy.stats.tests.test_stats.z1->scipy.stats.zscore(x, axis=1)
A:scipy.stats.tests.test_stats.z->numpy.random.rayleigh(1, 100000)
A:scipy.stats.tests.test_stats.X1->numpy.array([-1, 0, 1])
A:scipy.stats.tests.test_stats.X2->numpy.array([0, 1, 2])
A:scipy.stats.tests.test_stats.(t, p)->scipy.stats.ttest_1samp([0, 0, 0], 1)
A:scipy.stats.tests.test_stats.(D, p)->scipy.stats.kstest(x, 'norm', mode='asymp')
A:scipy.stats.tests.test_stats.data1->numpy.array([1.0, 2.0])
A:scipy.stats.tests.test_stats.data2->numpy.array([1.0, 2.0, 3.0])
A:scipy.stats.tests.test_stats.rvs1->numpy.linspace(5, 105, 100)
A:scipy.stats.tests.test_stats.rvs2->numpy.linspace(1, 100, 100)
A:scipy.stats.tests.test_stats.rvs1_2D->numpy.array([rvs1, rvs2])
A:scipy.stats.tests.test_stats.rvs2_2D->numpy.array([rvs2, rvs1])
A:scipy.stats.tests.test_stats.rvs1_3D->numpy.dstack([rvs1_2D, rvs1_2D, rvs1_2D])
A:scipy.stats.tests.test_stats.rvs2_3D->numpy.dstack([rvs2_2D, rvs2_2D, rvs2_2D])
A:scipy.stats.tests.test_stats.anan->numpy.array([[1, np.nan], [-1, 1]])
A:scipy.stats.tests.test_stats.rvs3->numpy.linspace(1, 100, 25)
A:scipy.stats.tests.test_stats.rvn1->scipy.stats.norm.rvs(loc=5, scale=10, size=(n1, n2, n3))
A:scipy.stats.tests.test_stats.(t1, p1)->scipy.stats.ttest_1samp(rvn1[:, :, :], np.ones((n1, n2)), axis=2)
A:scipy.stats.tests.test_stats.(t2, p2)->scipy.stats.ttest_1samp(rvn1[:, :, :], 1, axis=2)
A:scipy.stats.tests.test_stats.(t3, p3)->scipy.stats.ttest_1samp(rvn1[0, 0, :], 1)
A:scipy.stats.tests.test_stats.mc->numpy.array([1.4, 1.4, 1.4, 1.4])
A:scipy.stats.tests.test_stats.vc->numpy.array([0.3, 0.3, 0.3, 0.3])
A:scipy.stats.tests.test_stats.(n, mm, m, v, sk, kurt)->scipy.stats.describe(x.T, axis=1)
A:scipy.stats.tests.test_stats.(JB1, p1)->scipy.stats.jarque_bera(list(x))
A:scipy.stats.tests.test_stats.(JB2, p2)->scipy.stats.jarque_bera(tuple(x))
A:scipy.stats.tests.test_stats.(JB3, p3)->scipy.stats.jarque_bera(x.reshape(2, 50000))
A:scipy.stats.tests.test_stats.x1->numpy.arange(5)
A:scipy.stats.tests.test_stats.result->numpy.array([[5.41666667, 1.04166667, -0.41666667, 1.04166667, 5.41666667], [21.66666667, 4.16666667, -1.66666667, 4.16666667, 21.66666667]])
A:scipy.stats.tests.test_stats.b->numpy.matrix([[35.56893304, 49.32424149, 61.3579244, 72.68482371]])
A:scipy.stats.tests.test_stats.pp->numpy.concatenate((np.linspace(0.1, 0.2, 5), np.linspace(0.45, 0.65, 5), np.linspace(0.85, 0.95, 5)))
A:scipy.stats.tests.test_stats.(c, low, upp)->scipy.stats.sigmaclip(a, fact, fact)
A:scipy.stats.tests.test_stats.(F, p)->scipy.stats.f_oneway([0, 2], [2, 4])
A:scipy.stats.tests.test_stats.(h, p)->scipy.stats.kruskal(x, y, z)
scipy.stats.tests.test_stats.GeoMeanTestCase
scipy.stats.tests.test_stats.GeoMeanTestCase.test_1darray(self)
scipy.stats.tests.test_stats.GeoMeanTestCase.test_1darray0(self)
scipy.stats.tests.test_stats.GeoMeanTestCase.test_1dlist(self)
scipy.stats.tests.test_stats.GeoMeanTestCase.test_1dlist0(self)
scipy.stats.tests.test_stats.GeoMeanTestCase.test_1dma(self)
scipy.stats.tests.test_stats.GeoMeanTestCase.test_1dma0(self)
scipy.stats.tests.test_stats.GeoMeanTestCase.test_1dmainf(self)
scipy.stats.tests.test_stats.GeoMeanTestCase.test_1dmavalue(self)
scipy.stats.tests.test_stats.GeoMeanTestCase.test_2darray(self)
scipy.stats.tests.test_stats.GeoMeanTestCase.test_2daxis0(self)
scipy.stats.tests.test_stats.GeoMeanTestCase.test_2daxis1(self)
scipy.stats.tests.test_stats.GeoMeanTestCase.test_2dlist(self)
scipy.stats.tests.test_stats.GeoMeanTestCase.test_2dma(self)
scipy.stats.tests.test_stats.GeoMeanTestCase.test_2dmatrixaxis1(self)
scipy.stats.tests.test_stats.GeoMeanTestCase.test_2dmatrixdaxis0(self)
scipy.stats.tests.test_stats.HarMeanTestCase
scipy.stats.tests.test_stats.HarMeanTestCase.test_1darray(self)
scipy.stats.tests.test_stats.HarMeanTestCase.test_1dlist(self)
scipy.stats.tests.test_stats.HarMeanTestCase.test_1dma(self)
scipy.stats.tests.test_stats.HarMeanTestCase.test_1dmavalue(self)
scipy.stats.tests.test_stats.HarMeanTestCase.test_2darray(self)
scipy.stats.tests.test_stats.HarMeanTestCase.test_2daxis0(self)
scipy.stats.tests.test_stats.HarMeanTestCase.test_2daxis1(self)
scipy.stats.tests.test_stats.HarMeanTestCase.test_2dlist(self)
scipy.stats.tests.test_stats.HarMeanTestCase.test_2dma(self)
scipy.stats.tests.test_stats.HarMeanTestCase.test_2dmatrixaxis1(self)
scipy.stats.tests.test_stats.HarMeanTestCase.test_2dmatrixdaxis0(self)
scipy.stats.tests.test_stats.TestBasicStats(TestCase)
scipy.stats.tests.test_stats.TestBasicStats.test_tmeanX(self)
scipy.stats.tests.test_stats.TestBasicStats.test_tstdX(self)
scipy.stats.tests.test_stats.TestBasicStats.test_tvarX(self)
scipy.stats.tests.test_stats.TestCMedian(TestCase)
scipy.stats.tests.test_stats.TestCMedian.test_basic(self)
scipy.stats.tests.test_stats.TestCorrPearsonr(TestCase)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pBIGBIG(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pBIGHUGE(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pBIGLITTLE(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pBIGROUND(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pBIGTINY(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pHUGEHUGE(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pHUGEROUND(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pHUGETINY(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pLITTLEHUGE(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pLITTLELITTLE(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pLITTLEROUND(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pLITTLETINY(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pROUNDROUND(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pTINYROUND(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pTINYTINY(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pXBIG(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pXHUGE(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pXLITTLE(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pXROUND(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pXTINY(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_pXX(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_r_exactly_neg1(self)
scipy.stats.tests.test_stats.TestCorrPearsonr.test_r_exactly_pos1(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr(TestCase)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sBIGBIG(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sBIGHUGE(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sBIGLITTLE(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sBIGROUND(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sBIGTINY(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sHUGEHUGE(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sHUGEROUND(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sHUGETINY(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sLITTLEHUGE(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sLITTLELITTLE(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sLITTLEROUND(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sLITTLETINY(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sROUNDROUND(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sTINYROUND(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sTINYTINY(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sXBIG(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sXHUGE(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sXLITTLE(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sXROUND(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sXTINY(self)
scipy.stats.tests.test_stats.TestCorrSpearmanr.test_sXX(self)
scipy.stats.tests.test_stats.TestCorrSpearmanrTies(TestCase)
scipy.stats.tests.test_stats.TestCorrSpearmanrTies.test_tie1(self)
scipy.stats.tests.test_stats.TestFOneWay(TestCase)
scipy.stats.tests.test_stats.TestFOneWay.test_basic(self)
scipy.stats.tests.test_stats.TestFOneWay.test_trivial(self)
scipy.stats.tests.test_stats.TestFisherExact(TestCase)
scipy.stats.tests.test_stats.TestFisherExact.test_basic(self)
scipy.stats.tests.test_stats.TestFisherExact.test_large_numbers(self)
scipy.stats.tests.test_stats.TestFisherExact.test_less_greater(self)
scipy.stats.tests.test_stats.TestFisherExact.test_precise(self)
scipy.stats.tests.test_stats.TestFisherExact.test_raises(self)
scipy.stats.tests.test_stats.TestFisherExact.test_row_or_col_zero(self)
scipy.stats.tests.test_stats.TestGMean(TestCase)
scipy.stats.tests.test_stats.TestGMean.test_1D_array(self)
scipy.stats.tests.test_stats.TestGMean.test_1D_list(self)
scipy.stats.tests.test_stats.TestGMean.test_2D_array_default(self)
scipy.stats.tests.test_stats.TestGMean.test_2D_array_dim1(self)
scipy.stats.tests.test_stats.TestGMean.test_large_values(self)
scipy.stats.tests.test_stats.TestGeoMean(GeoMeanTestCase,TestCase)
scipy.stats.tests.test_stats.TestGeoMean.do(self,a,b,axis=None,dtype=None)
scipy.stats.tests.test_stats.TestHMean(TestCase)
scipy.stats.tests.test_stats.TestHMean.test_1D_array(self)
scipy.stats.tests.test_stats.TestHMean.test_1D_list(self)
scipy.stats.tests.test_stats.TestHMean.test_2D_array_default(self)
scipy.stats.tests.test_stats.TestHMean.test_2D_array_dim1(self)
scipy.stats.tests.test_stats.TestHarMean(HarMeanTestCase,TestCase)
scipy.stats.tests.test_stats.TestHarMean.do(self,a,b,axis=None,dtype=None)
scipy.stats.tests.test_stats.TestHistogram(TestCase)
scipy.stats.tests.test_stats.TestHistogram.test_increased_bins(self)
scipy.stats.tests.test_stats.TestHistogram.test_reduced_bins(self)
scipy.stats.tests.test_stats.TestHistogram.test_simple(self)
scipy.stats.tests.test_stats.TestHistogram.test_weighting(self)
scipy.stats.tests.test_stats.TestJarqueBera(TestCase)
scipy.stats.tests.test_stats.TestJarqueBera.test_jarque_bera_array_like(self)
scipy.stats.tests.test_stats.TestJarqueBera.test_jarque_bera_size(self)
scipy.stats.tests.test_stats.TestJarqueBera.test_jarque_bera_stats(self)
scipy.stats.tests.test_stats.TestKruskal(TestCase)
scipy.stats.tests.test_stats.TestKruskal.test_another_tie(self)
scipy.stats.tests.test_stats.TestKruskal.test_basic(self)
scipy.stats.tests.test_stats.TestKruskal.test_simple(self)
scipy.stats.tests.test_stats.TestKruskal.test_simple_tie(self)
scipy.stats.tests.test_stats.TestKruskal.test_three_groups(self)
scipy.stats.tests.test_stats.TestMode(TestCase)
scipy.stats.tests.test_stats.TestMode.test_basic(self)
scipy.stats.tests.test_stats.TestMoments(TestCase)
scipy.stats.tests.test_stats.TestMoments.test_kurtosis(self)
scipy.stats.tests.test_stats.TestMoments.test_kurtosis_array_scalar(self)
scipy.stats.tests.test_stats.TestMoments.test_moment(self)
scipy.stats.tests.test_stats.TestMoments.test_skewness(self)
scipy.stats.tests.test_stats.TestMoments.test_skewness_scalar(self)
scipy.stats.tests.test_stats.TestMoments.test_variation(self)
scipy.stats.tests.test_stats.TestNanFunc(self,*args,**kw)
scipy.stats.tests.test_stats.TestNanFunc.__init__(self,*args,**kw)
scipy.stats.tests.test_stats.TestNanFunc.test_nanmean_all(self)
scipy.stats.tests.test_stats.TestNanFunc.test_nanmean_none(self)
scipy.stats.tests.test_stats.TestNanFunc.test_nanmean_some(self)
scipy.stats.tests.test_stats.TestNanFunc.test_nanmedian_all(self)
scipy.stats.tests.test_stats.TestNanFunc.test_nanmedian_none(self)
scipy.stats.tests.test_stats.TestNanFunc.test_nanmedian_scalars(self)
scipy.stats.tests.test_stats.TestNanFunc.test_nanmedian_some(self)
scipy.stats.tests.test_stats.TestNanFunc.test_nanstd_all(self)
scipy.stats.tests.test_stats.TestNanFunc.test_nanstd_negative_axis(self)
scipy.stats.tests.test_stats.TestNanFunc.test_nanstd_none(self)
scipy.stats.tests.test_stats.TestNanFunc.test_nanstd_some(self)
scipy.stats.tests.test_stats.TestRegression(TestCase)
scipy.stats.tests.test_stats.TestRegression.test_linregress(self)
scipy.stats.tests.test_stats.TestRegression.test_linregressBIGX(self)
scipy.stats.tests.test_stats.TestRegression.test_regressXX(self)
scipy.stats.tests.test_stats.TestRegression.test_regressZEROX(self)
scipy.stats.tests.test_stats.TestRegression.test_regress_shape_error(self)
scipy.stats.tests.test_stats.TestRegression.test_regress_simple(self)
scipy.stats.tests.test_stats.TestRegression.test_regress_simple_negative_cor(self)
scipy.stats.tests.test_stats.TestRegression.test_regress_simple_onearg_cols(self)
scipy.stats.tests.test_stats.TestRegression.test_regress_simple_onearg_rows(self)
scipy.stats.tests.test_stats.TestRound(TestCase)
scipy.stats.tests.test_stats.TestRound.test_rounding0(self)
scipy.stats.tests.test_stats.TestRound.test_rounding1(self)
scipy.stats.tests.test_stats.TestRound.test_rounding2(self)
scipy.stats.tests.test_stats.TestRound.test_rounding3(self)
scipy.stats.tests.test_stats.TestScoreatpercentile(TestCase)
scipy.stats.tests.test_stats.TestScoreatpercentile.setUp(self)
scipy.stats.tests.test_stats.TestScoreatpercentile.test_2D(self)
scipy.stats.tests.test_stats.TestScoreatpercentile.test_axis(self)
scipy.stats.tests.test_stats.TestScoreatpercentile.test_basic(self)
scipy.stats.tests.test_stats.TestScoreatpercentile.test_exception(self)
scipy.stats.tests.test_stats.TestScoreatpercentile.test_fraction(self)
scipy.stats.tests.test_stats.TestScoreatpercentile.test_lower_higher(self)
scipy.stats.tests.test_stats.TestScoreatpercentile.test_sequence(self)
scipy.stats.tests.test_stats.TestSigamClip(object)
scipy.stats.tests.test_stats.TestSigamClip.test_sigmaclip1(self)
scipy.stats.tests.test_stats.TestSigamClip.test_sigmaclip2(self)
scipy.stats.tests.test_stats.TestSigamClip.test_sigmaclip3(self)
scipy.stats.tests.test_stats.TestStudentTest(TestCase)
scipy.stats.tests.test_stats.TestStudentTest.test_onesample(self)
scipy.stats.tests.test_stats.TestThreshold(TestCase)
scipy.stats.tests.test_stats.TestThreshold.test_basic(self)
scipy.stats.tests.test_stats.TestVariability(TestCase)
scipy.stats.tests.test_stats.TestVariability.test_sem(self)
scipy.stats.tests.test_stats.TestVariability.test_signaltonoise(self)
scipy.stats.tests.test_stats.TestVariability.test_zmap(self)
scipy.stats.tests.test_stats.TestVariability.test_zmap_axis(self)
scipy.stats.tests.test_stats.TestVariability.test_zmap_ddof(self)
scipy.stats.tests.test_stats.TestVariability.test_zscore(self)
scipy.stats.tests.test_stats.TestVariability.test_zscore_axis(self)
scipy.stats.tests.test_stats.TestVariability.test_zscore_ddof(self)
scipy.stats.tests.test_stats.Test_Trim(object)
scipy.stats.tests.test_stats.Test_Trim.test_trim1(self)
scipy.stats.tests.test_stats.Test_Trim.test_trim_mean(self)
scipy.stats.tests.test_stats.Test_Trim.test_trimboth(self)
scipy.stats.tests.test_stats.compare_results(res,desired)
scipy.stats.tests.test_stats.mannwhitneyu()
scipy.stats.tests.test_stats.test_binomtest()
scipy.stats.tests.test_stats.test_cumfreq()
scipy.stats.tests.test_stats.test_describe()
scipy.stats.tests.test_stats.test_friedmanchisquare()
scipy.stats.tests.test_stats.test_kendalltau()
scipy.stats.tests.test_stats.test_ks_2samp()
scipy.stats.tests.test_stats.test_kstest()
scipy.stats.tests.test_stats.test_kurtosistest_too_few_samples()
scipy.stats.tests.test_stats.test_normalitytests()
scipy.stats.tests.test_stats.test_obrientransform()
scipy.stats.tests.test_stats.test_percentileofscore()
scipy.stats.tests.test_stats.test_pointbiserial()
scipy.stats.tests.test_stats.test_relfreq()
scipy.stats.tests.test_stats.test_skewtest_too_few_samples()
scipy.stats.tests.test_stats.test_ttest_1samp_new()
scipy.stats.tests.test_stats.test_ttest_ind()
scipy.stats.tests.test_stats.test_ttest_ind_with_uneq_var()
scipy.stats.tests.test_stats.test_ttest_rel()
scipy.tests.test_GeoMeanTestCase
scipy.tests.test_GeoMeanTestCase.test_1darray(self)
scipy.tests.test_GeoMeanTestCase.test_1darray0(self)
scipy.tests.test_GeoMeanTestCase.test_1dlist(self)
scipy.tests.test_GeoMeanTestCase.test_1dlist0(self)
scipy.tests.test_GeoMeanTestCase.test_1dma(self)
scipy.tests.test_GeoMeanTestCase.test_1dma0(self)
scipy.tests.test_GeoMeanTestCase.test_1dmainf(self)
scipy.tests.test_GeoMeanTestCase.test_1dmavalue(self)
scipy.tests.test_GeoMeanTestCase.test_2darray(self)
scipy.tests.test_GeoMeanTestCase.test_2daxis0(self)
scipy.tests.test_GeoMeanTestCase.test_2daxis1(self)
scipy.tests.test_GeoMeanTestCase.test_2dlist(self)
scipy.tests.test_GeoMeanTestCase.test_2dma(self)
scipy.tests.test_GeoMeanTestCase.test_2dmatrixaxis1(self)
scipy.tests.test_GeoMeanTestCase.test_2dmatrixdaxis0(self)
scipy.tests.test_HarMeanTestCase
scipy.tests.test_HarMeanTestCase.test_1darray(self)
scipy.tests.test_HarMeanTestCase.test_1dlist(self)
scipy.tests.test_HarMeanTestCase.test_1dma(self)
scipy.tests.test_HarMeanTestCase.test_1dmavalue(self)
scipy.tests.test_HarMeanTestCase.test_2darray(self)
scipy.tests.test_HarMeanTestCase.test_2daxis0(self)
scipy.tests.test_HarMeanTestCase.test_2daxis1(self)
scipy.tests.test_HarMeanTestCase.test_2dlist(self)
scipy.tests.test_HarMeanTestCase.test_2dma(self)
scipy.tests.test_HarMeanTestCase.test_2dmatrixaxis1(self)
scipy.tests.test_HarMeanTestCase.test_2dmatrixdaxis0(self)
scipy.tests.test_TestBasicStats(TestCase)
scipy.tests.test_TestBasicStats.test_tmeanX(self)
scipy.tests.test_TestBasicStats.test_tstdX(self)
scipy.tests.test_TestBasicStats.test_tvarX(self)
scipy.tests.test_TestCMedian(TestCase)
scipy.tests.test_TestCMedian.test_basic(self)
scipy.tests.test_TestCorrPearsonr(TestCase)
scipy.tests.test_TestCorrPearsonr.test_pBIGBIG(self)
scipy.tests.test_TestCorrPearsonr.test_pBIGHUGE(self)
scipy.tests.test_TestCorrPearsonr.test_pBIGLITTLE(self)
scipy.tests.test_TestCorrPearsonr.test_pBIGROUND(self)
scipy.tests.test_TestCorrPearsonr.test_pBIGTINY(self)
scipy.tests.test_TestCorrPearsonr.test_pHUGEHUGE(self)
scipy.tests.test_TestCorrPearsonr.test_pHUGEROUND(self)
scipy.tests.test_TestCorrPearsonr.test_pHUGETINY(self)
scipy.tests.test_TestCorrPearsonr.test_pLITTLEHUGE(self)
scipy.tests.test_TestCorrPearsonr.test_pLITTLELITTLE(self)
scipy.tests.test_TestCorrPearsonr.test_pLITTLEROUND(self)
scipy.tests.test_TestCorrPearsonr.test_pLITTLETINY(self)
scipy.tests.test_TestCorrPearsonr.test_pROUNDROUND(self)
scipy.tests.test_TestCorrPearsonr.test_pTINYROUND(self)
scipy.tests.test_TestCorrPearsonr.test_pTINYTINY(self)
scipy.tests.test_TestCorrPearsonr.test_pXBIG(self)
scipy.tests.test_TestCorrPearsonr.test_pXHUGE(self)
scipy.tests.test_TestCorrPearsonr.test_pXLITTLE(self)
scipy.tests.test_TestCorrPearsonr.test_pXROUND(self)
scipy.tests.test_TestCorrPearsonr.test_pXTINY(self)
scipy.tests.test_TestCorrPearsonr.test_pXX(self)
scipy.tests.test_TestCorrPearsonr.test_r_exactly_neg1(self)
scipy.tests.test_TestCorrPearsonr.test_r_exactly_pos1(self)
scipy.tests.test_TestCorrSpearmanr(TestCase)
scipy.tests.test_TestCorrSpearmanr.test_sBIGBIG(self)
scipy.tests.test_TestCorrSpearmanr.test_sBIGHUGE(self)
scipy.tests.test_TestCorrSpearmanr.test_sBIGLITTLE(self)
scipy.tests.test_TestCorrSpearmanr.test_sBIGROUND(self)
scipy.tests.test_TestCorrSpearmanr.test_sBIGTINY(self)
scipy.tests.test_TestCorrSpearmanr.test_sHUGEHUGE(self)
scipy.tests.test_TestCorrSpearmanr.test_sHUGEROUND(self)
scipy.tests.test_TestCorrSpearmanr.test_sHUGETINY(self)
scipy.tests.test_TestCorrSpearmanr.test_sLITTLEHUGE(self)
scipy.tests.test_TestCorrSpearmanr.test_sLITTLELITTLE(self)
scipy.tests.test_TestCorrSpearmanr.test_sLITTLEROUND(self)
scipy.tests.test_TestCorrSpearmanr.test_sLITTLETINY(self)
scipy.tests.test_TestCorrSpearmanr.test_sROUNDROUND(self)
scipy.tests.test_TestCorrSpearmanr.test_sTINYROUND(self)
scipy.tests.test_TestCorrSpearmanr.test_sTINYTINY(self)
scipy.tests.test_TestCorrSpearmanr.test_sXBIG(self)
scipy.tests.test_TestCorrSpearmanr.test_sXHUGE(self)
scipy.tests.test_TestCorrSpearmanr.test_sXLITTLE(self)
scipy.tests.test_TestCorrSpearmanr.test_sXROUND(self)
scipy.tests.test_TestCorrSpearmanr.test_sXTINY(self)
scipy.tests.test_TestCorrSpearmanr.test_sXX(self)
scipy.tests.test_TestCorrSpearmanrTies(TestCase)
scipy.tests.test_TestCorrSpearmanrTies.test_tie1(self)
scipy.tests.test_TestFOneWay(TestCase)
scipy.tests.test_TestFOneWay.test_basic(self)
scipy.tests.test_TestFOneWay.test_trivial(self)
scipy.tests.test_TestFisherExact(TestCase)
scipy.tests.test_TestFisherExact.test_basic(self)
scipy.tests.test_TestFisherExact.test_large_numbers(self)
scipy.tests.test_TestFisherExact.test_less_greater(self)
scipy.tests.test_TestFisherExact.test_precise(self)
scipy.tests.test_TestFisherExact.test_raises(self)
scipy.tests.test_TestFisherExact.test_row_or_col_zero(self)
scipy.tests.test_TestGMean(TestCase)
scipy.tests.test_TestGMean.test_1D_array(self)
scipy.tests.test_TestGMean.test_1D_list(self)
scipy.tests.test_TestGMean.test_2D_array_default(self)
scipy.tests.test_TestGMean.test_2D_array_dim1(self)
scipy.tests.test_TestGMean.test_large_values(self)
scipy.tests.test_TestGeoMean(GeoMeanTestCase,TestCase)
scipy.tests.test_TestGeoMean.do(self,a,b,axis=None,dtype=None)
scipy.tests.test_TestHMean(TestCase)
scipy.tests.test_TestHMean.test_1D_array(self)
scipy.tests.test_TestHMean.test_1D_list(self)
scipy.tests.test_TestHMean.test_2D_array_default(self)
scipy.tests.test_TestHMean.test_2D_array_dim1(self)
scipy.tests.test_TestHarMean(HarMeanTestCase,TestCase)
scipy.tests.test_TestHarMean.do(self,a,b,axis=None,dtype=None)
scipy.tests.test_TestHistogram(TestCase)
scipy.tests.test_TestHistogram.test_increased_bins(self)
scipy.tests.test_TestHistogram.test_reduced_bins(self)
scipy.tests.test_TestHistogram.test_simple(self)
scipy.tests.test_TestHistogram.test_weighting(self)
scipy.tests.test_TestJarqueBera(TestCase)
scipy.tests.test_TestJarqueBera.test_jarque_bera_array_like(self)
scipy.tests.test_TestJarqueBera.test_jarque_bera_size(self)
scipy.tests.test_TestJarqueBera.test_jarque_bera_stats(self)
scipy.tests.test_TestKruskal(TestCase)
scipy.tests.test_TestKruskal.test_another_tie(self)
scipy.tests.test_TestKruskal.test_basic(self)
scipy.tests.test_TestKruskal.test_simple(self)
scipy.tests.test_TestKruskal.test_simple_tie(self)
scipy.tests.test_TestKruskal.test_three_groups(self)
scipy.tests.test_TestMode(TestCase)
scipy.tests.test_TestMode.test_basic(self)
scipy.tests.test_TestMoments(TestCase)
scipy.tests.test_TestMoments.test_kurtosis(self)
scipy.tests.test_TestMoments.test_kurtosis_array_scalar(self)
scipy.tests.test_TestMoments.test_moment(self)
scipy.tests.test_TestMoments.test_skewness(self)
scipy.tests.test_TestMoments.test_skewness_scalar(self)
scipy.tests.test_TestMoments.test_variation(self)
scipy.tests.test_TestNanFunc(self,*args,**kw)
scipy.tests.test_TestNanFunc.test_nanmean_all(self)
scipy.tests.test_TestNanFunc.test_nanmean_none(self)
scipy.tests.test_TestNanFunc.test_nanmean_some(self)
scipy.tests.test_TestNanFunc.test_nanmedian_all(self)
scipy.tests.test_TestNanFunc.test_nanmedian_none(self)
scipy.tests.test_TestNanFunc.test_nanmedian_scalars(self)
scipy.tests.test_TestNanFunc.test_nanmedian_some(self)
scipy.tests.test_TestNanFunc.test_nanstd_all(self)
scipy.tests.test_TestNanFunc.test_nanstd_negative_axis(self)
scipy.tests.test_TestNanFunc.test_nanstd_none(self)
scipy.tests.test_TestNanFunc.test_nanstd_some(self)
scipy.tests.test_TestRegression(TestCase)
scipy.tests.test_TestRegression.test_linregress(self)
scipy.tests.test_TestRegression.test_linregressBIGX(self)
scipy.tests.test_TestRegression.test_regressXX(self)
scipy.tests.test_TestRegression.test_regressZEROX(self)
scipy.tests.test_TestRegression.test_regress_shape_error(self)
scipy.tests.test_TestRegression.test_regress_simple(self)
scipy.tests.test_TestRegression.test_regress_simple_negative_cor(self)
scipy.tests.test_TestRegression.test_regress_simple_onearg_cols(self)
scipy.tests.test_TestRegression.test_regress_simple_onearg_rows(self)
scipy.tests.test_TestRound(TestCase)
scipy.tests.test_TestRound.test_rounding0(self)
scipy.tests.test_TestRound.test_rounding1(self)
scipy.tests.test_TestRound.test_rounding2(self)
scipy.tests.test_TestRound.test_rounding3(self)
scipy.tests.test_TestScoreatpercentile(TestCase)
scipy.tests.test_TestScoreatpercentile.setUp(self)
scipy.tests.test_TestScoreatpercentile.test_2D(self)
scipy.tests.test_TestScoreatpercentile.test_axis(self)
scipy.tests.test_TestScoreatpercentile.test_basic(self)
scipy.tests.test_TestScoreatpercentile.test_exception(self)
scipy.tests.test_TestScoreatpercentile.test_fraction(self)
scipy.tests.test_TestScoreatpercentile.test_lower_higher(self)
scipy.tests.test_TestScoreatpercentile.test_sequence(self)
scipy.tests.test_TestSigamClip(object)
scipy.tests.test_TestSigamClip.test_sigmaclip1(self)
scipy.tests.test_TestSigamClip.test_sigmaclip2(self)
scipy.tests.test_TestSigamClip.test_sigmaclip3(self)
scipy.tests.test_TestStudentTest(TestCase)
scipy.tests.test_TestStudentTest.test_onesample(self)
scipy.tests.test_TestThreshold(TestCase)
scipy.tests.test_TestThreshold.test_basic(self)
scipy.tests.test_TestVariability(TestCase)
scipy.tests.test_TestVariability.test_sem(self)
scipy.tests.test_TestVariability.test_signaltonoise(self)
scipy.tests.test_TestVariability.test_zmap(self)
scipy.tests.test_TestVariability.test_zmap_axis(self)
scipy.tests.test_TestVariability.test_zmap_ddof(self)
scipy.tests.test_TestVariability.test_zscore(self)
scipy.tests.test_TestVariability.test_zscore_axis(self)
scipy.tests.test_TestVariability.test_zscore_ddof(self)
scipy.tests.test_Test_Trim(object)
scipy.tests.test_Test_Trim.test_trim1(self)
scipy.tests.test_Test_Trim.test_trim_mean(self)
scipy.tests.test_Test_Trim.test_trimboth(self)
scipy.tests.test_compare_results(res,desired)
scipy.tests.test_mannwhitneyu()
scipy.tests.test_test_binomtest()
scipy.tests.test_test_cumfreq()
scipy.tests.test_test_describe()
scipy.tests.test_test_friedmanchisquare()
scipy.tests.test_test_kendalltau()
scipy.tests.test_test_ks_2samp()
scipy.tests.test_test_kstest()
scipy.tests.test_test_kurtosistest_too_few_samples()
scipy.tests.test_test_normalitytests()
scipy.tests.test_test_obrientransform()
scipy.tests.test_test_percentileofscore()
scipy.tests.test_test_pointbiserial()
scipy.tests.test_test_relfreq()
scipy.tests.test_test_skewtest_too_few_samples()
scipy.tests.test_test_ttest_1samp_new()
scipy.tests.test_test_ttest_ind()
scipy.tests.test_test_ttest_ind_with_uneq_var()
scipy.tests.test_test_ttest_rel()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/tests/test_kdeoth.py----------------------------------------
A:scipy.stats.tests.test_kdeoth.xn->numpy.random.randn(n_basesample)
A:scipy.stats.tests.test_kdeoth.xnmean->numpy.random.randn(n_basesample).mean()
A:scipy.stats.tests.test_kdeoth.xnstd->numpy.random.randn(n_basesample).std(ddof=1)
A:scipy.stats.tests.test_kdeoth.gkde->scipy.stats.gaussian_kde(xn)
A:scipy.stats.tests.test_kdeoth.xs->numpy.linspace(-10, 10, num=50)
A:scipy.stats.tests.test_kdeoth.kdepdf->scipy.stats.gaussian_kde(xn).evaluate(xs)
A:scipy.stats.tests.test_kdeoth.normpdf->scipy.stats.norm.pdf(xs, loc=xnmean, scale=xnstd)
A:scipy.stats.tests.test_kdeoth.prob1->scipy.stats.gaussian_kde(xn).integrate_box_1d(xnmean, np.inf)
A:scipy.stats.tests.test_kdeoth.prob2->scipy.stats.gaussian_kde(xn).integrate_box_1d(-np.inf, xnmean)
A:scipy.stats.tests.test_kdeoth.gkde2->scipy.stats.gaussian_kde(xn, bw_method=scotts_factor)
A:scipy.stats.tests.test_kdeoth.gkde3->scipy.stats.gaussian_kde(xn, bw_method=gkde.factor)
A:scipy.stats.tests.test_kdeoth.kdepdf2->scipy.stats.gaussian_kde(xn, bw_method=scotts_factor).evaluate(xs)
A:scipy.stats.tests.test_kdeoth.kdepdf3->scipy.stats.gaussian_kde(xn, bw_method=gkde.factor).evaluate(xs)
A:scipy.stats.tests.test_kdeoth.self.dataset->numpy.atleast_2d(dataset)
A:scipy.stats.tests.test_kdeoth.self.inv_cov->numpy.linalg.inv(self.covariance)
A:scipy.stats.tests.test_kdeoth.x1->numpy.arange(5)
A:scipy.stats.tests.test_kdeoth.kde->scipy.stats.gaussian_kde(x1)
A:scipy.stats.tests.test_kdeoth.ys->kde(xs)
A:scipy.stats.tests.test_kdeoth.kde1->_kde_subclass1(x1)
A:scipy.stats.tests.test_kdeoth.y1->kde(xs)
A:scipy.stats.tests.test_kdeoth.kde2->scipy.stats.gaussian_kde(x1, bw_method='silverman')
A:scipy.stats.tests.test_kdeoth.y2->kde2(xs)
A:scipy.stats.tests.test_kdeoth.kde3->_kde_subclass3(x1, kde.covariance)
A:scipy.stats.tests.test_kdeoth.y3->kde3(xs)
A:scipy.stats.tests.test_kdeoth.kde4->_kde_subclass4(x1)
A:scipy.stats.tests.test_kdeoth.y4->kde4(x1)
A:scipy.stats.tests.test_kdeoth.y5->kde5(xs)
scipy.stats.tests.test_kdeoth._kde_subclass1(self,dataset)
scipy.stats.tests.test_kdeoth._kde_subclass1.__init__(self,dataset)
scipy.stats.tests.test_kdeoth._kde_subclass2(self,dataset)
scipy.stats.tests.test_kdeoth._kde_subclass2.__init__(self,dataset)
scipy.stats.tests.test_kdeoth._kde_subclass3(self,dataset,covariance)
scipy.stats.tests.test_kdeoth._kde_subclass3.__init__(self,dataset,covariance)
scipy.stats.tests.test_kdeoth._kde_subclass3._compute_covariance(self)
scipy.stats.tests.test_kdeoth._kde_subclass4(stats.gaussian_kde)
scipy.stats.tests.test_kdeoth._kde_subclass4.covariance_factor(self)
scipy.stats.tests.test_kdeoth.test_gaussian_kde_covariance_caching()
scipy.stats.tests.test_kdeoth.test_gaussian_kde_monkeypatch()
scipy.stats.tests.test_kdeoth.test_gaussian_kde_subclassing()
scipy.stats.tests.test_kdeoth.test_kde_1d()
scipy.stats.tests.test_kdeoth.test_kde_bandwidth_method()
scipy.stats.tests.test_kdeoth.test_kde_integer_input()
scipy.tests.test_kdeoth._kde_subclass1(self,dataset)
scipy.tests.test_kdeoth._kde_subclass2(self,dataset)
scipy.tests.test_kdeoth._kde_subclass3(self,dataset,covariance)
scipy.tests.test_kdeoth._kde_subclass3._compute_covariance(self)
scipy.tests.test_kdeoth._kde_subclass4(stats.gaussian_kde)
scipy.tests.test_kdeoth._kde_subclass4.covariance_factor(self)
scipy.tests.test_kdeoth.test_gaussian_kde_covariance_caching()
scipy.tests.test_kdeoth.test_gaussian_kde_monkeypatch()
scipy.tests.test_kdeoth.test_gaussian_kde_subclassing()
scipy.tests.test_kdeoth.test_kde_1d()
scipy.tests.test_kdeoth.test_kde_bandwidth_method()
scipy.tests.test_kdeoth.test_kde_integer_input()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/tests/test_discrete_basic.py----------------------------------------
A:scipy.stats.tests.test_discrete_basic.distfn->getattr(stats, distname)
A:scipy.stats.tests.test_discrete_basic.rvs->getattr(stats, distname).rvs(*arg, size=10000)
A:scipy.stats.tests.test_discrete_basic.supp->numpy.unique(rvs)
A:scipy.stats.tests.test_discrete_basic.(m, v)->getattr(stats, distname).stats(*arg)
A:scipy.stats.tests.test_discrete_basic.skurt->scipy.stats.kurtosis(rvs)
A:scipy.stats.tests.test_discrete_basic.sskew->scipy.stats.skew(rvs)
A:scipy.stats.tests.test_discrete_basic.ppf05->getattr(stats, distname)._ppf(0.5, *arg)
A:scipy.stats.tests.test_discrete_basic.cdf05->getattr(stats, distname).cdf(ppf05, *arg)
A:scipy.stats.tests.test_discrete_basic.ppfs->getattr(stats, distname).ppf([0.5, 0.9], *arg)
A:scipy.stats.tests.test_discrete_basic.startind->numpy.int(distfn._ppf(0.01, *arg) - 1)
A:scipy.stats.tests.test_discrete_basic.index->list(range(startind, startind + 10))
A:scipy.stats.tests.test_discrete_basic.cdfs->getattr(stats, distname).cdf(distsupp, *arg)
A:scipy.stats.tests.test_discrete_basic.meanint->round(float(distfn.stats(*arg)[0]))
A:scipy.stats.tests.test_discrete_basic.median_sf->getattr(stats, distname).isf(0.5, *arg)
A:scipy.stats.tests.test_discrete_basic.(below, low, upp, above)->getattr(stats, distname).isf([-1, 0, 1, 2], *arg)
A:scipy.stats.tests.test_discrete_basic.(k, s)->getattr(stats, distname).stats(*arg, moment='ks')
A:scipy.stats.tests.test_discrete_basic.ent->getattr(stats, distname).entropy(*arg)
A:scipy.stats.tests.test_discrete_basic.n->len(rvs)
A:scipy.stats.tests.test_discrete_basic.distsupport->xrange(max(distfn.a, -1000), min(distfn.b, 1000) + 1)
A:scipy.stats.tests.test_discrete_basic.current->getattr(stats, distname).cdf(ii, *arg)
A:scipy.stats.tests.test_discrete_basic.distsupp->numpy.array(distsupp)
A:scipy.stats.tests.test_discrete_basic.distmass->numpy.array(distmass)
A:scipy.stats.tests.test_discrete_basic.(freq, hsupp)->numpy.histogram(rvs, histsupp)
A:scipy.stats.tests.test_discrete_basic.(chis, pval)->scipy.stats.chisquare(np.array(freq), n * distmass)
scipy.stats.tests.test_discrete_basic.assert_equal_inf_nan(v1,v2,msg)
scipy.stats.tests.test_discrete_basic.check_cdf_ppf(distfn,arg,msg)
scipy.stats.tests.test_discrete_basic.check_cdf_ppf2(distfn,arg,supp,msg)
scipy.stats.tests.test_discrete_basic.check_cdf_ppf_private(distfn,arg,msg)
scipy.stats.tests.test_discrete_basic.check_discrete_chisquare(distfn,arg,rvs,alpha,msg)
scipy.stats.tests.test_discrete_basic.check_entropy(distfn,arg,msg)
scipy.stats.tests.test_discrete_basic.check_generic_moment(distfn,arg,m,k,decim)
scipy.stats.tests.test_discrete_basic.check_isf_limits(distfn,arg,msg)
scipy.stats.tests.test_discrete_basic.check_moment_frozen(distfn,arg,m,k,decim)
scipy.stats.tests.test_discrete_basic.check_oth(distfn,arg,msg)
scipy.stats.tests.test_discrete_basic.check_pmf_cdf(distfn,arg,msg)
scipy.stats.tests.test_discrete_basic.check_ppf_limits(distfn,arg,msg)
scipy.stats.tests.test_discrete_basic.check_ppf_ppf(distfn,arg)
scipy.stats.tests.test_discrete_basic.check_sample_meanvar(sm,m,msg)
scipy.stats.tests.test_discrete_basic.check_sample_skew_kurt(distfn,arg,sk,ss,msg)
scipy.stats.tests.test_discrete_basic.check_sample_var(sm,m,msg)
scipy.stats.tests.test_discrete_basic.test_discrete_basic()
scipy.stats.tests.test_discrete_basic.test_discrete_extra()
scipy.stats.tests.test_discrete_basic.test_discrete_private()
scipy.tests.test_discrete_basic.assert_equal_inf_nan(v1,v2,msg)
scipy.tests.test_discrete_basic.check_cdf_ppf(distfn,arg,msg)
scipy.tests.test_discrete_basic.check_cdf_ppf2(distfn,arg,supp,msg)
scipy.tests.test_discrete_basic.check_cdf_ppf_private(distfn,arg,msg)
scipy.tests.test_discrete_basic.check_discrete_chisquare(distfn,arg,rvs,alpha,msg)
scipy.tests.test_discrete_basic.check_entropy(distfn,arg,msg)
scipy.tests.test_discrete_basic.check_generic_moment(distfn,arg,m,k,decim)
scipy.tests.test_discrete_basic.check_isf_limits(distfn,arg,msg)
scipy.tests.test_discrete_basic.check_moment_frozen(distfn,arg,m,k,decim)
scipy.tests.test_discrete_basic.check_oth(distfn,arg,msg)
scipy.tests.test_discrete_basic.check_pmf_cdf(distfn,arg,msg)
scipy.tests.test_discrete_basic.check_ppf_limits(distfn,arg,msg)
scipy.tests.test_discrete_basic.check_ppf_ppf(distfn,arg)
scipy.tests.test_discrete_basic.check_sample_meanvar(sm,m,msg)
scipy.tests.test_discrete_basic.check_sample_skew_kurt(distfn,arg,sk,ss,msg)
scipy.tests.test_discrete_basic.check_sample_var(sm,m,msg)
scipy.tests.test_discrete_basic.test_discrete_basic()
scipy.tests.test_discrete_basic.test_discrete_extra()
scipy.tests.test_discrete_basic.test_discrete_private()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/tests/test_mstats_extras.py----------------------------------------
A:scipy.stats.tests.test_mstats_extras.data->numpy.array(data).reshape(10, 10)
A:scipy.stats.tests.test_mstats_extras.test->numpy.arange(100)
A:scipy.stats.tests.test_mstats_extras.test_2D->numpy.arange(100).repeat(3).reshape(-1, 3)
A:scipy.stats.tests.test_mstats_extras._result->scipy.stats.mstats.idealfourths(test)
A:scipy.stats.tests.test_mstats_extras.hdq->scipy.stats.mstats.hdquantiles(data, [0.25, 0.5, 0.75], axis=0, var=True)
scipy.stats.tests.test_mstats_extras.TestMisc(self,*args,**kwargs)
scipy.stats.tests.test_mstats_extras.TestMisc.__init__(self,*args,**kwargs)
scipy.stats.tests.test_mstats_extras.TestMisc.test_idealfourths(self)
scipy.stats.tests.test_mstats_extras.TestMisc.test_mjci(self)
scipy.stats.tests.test_mstats_extras.TestMisc.test_trimmedmeanci(self)
scipy.stats.tests.test_mstats_extras.TestQuantiles(self,*args,**kwargs)
scipy.stats.tests.test_mstats_extras.TestQuantiles.__init__(self,*args,**kwargs)
scipy.stats.tests.test_mstats_extras.TestQuantiles.test_hdquantiles(self)
scipy.tests.test_mstats_extras.TestMisc(self,*args,**kwargs)
scipy.tests.test_mstats_extras.TestMisc.test_idealfourths(self)
scipy.tests.test_mstats_extras.TestMisc.test_mjci(self)
scipy.tests.test_mstats_extras.TestMisc.test_trimmedmeanci(self)
scipy.tests.test_mstats_extras.TestQuantiles(self,*args,**kwargs)
scipy.tests.test_mstats_extras.TestQuantiles.test_hdquantiles(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/tests/test_continuous_extra.py----------------------------------------
A:scipy.stats.tests.test_continuous_extra.distfn->getattr(stats, distname)
A:scipy.stats.tests.test_continuous_extra.(below, low, upp, above)->getattr(stats, distname).isf([-1, 0, 1, 2], *arg)
A:scipy.stats.tests.test_continuous_extra.ppfs->getattr(stats, distname)._ppf(np.array([0.1, 0.5, 0.9]), *arg)
A:scipy.stats.tests.test_continuous_extra.(m, v)->getattr(stats, distname).stats(*arg)
A:scipy.stats.tests.test_continuous_extra.(mt, vt)->getattr(stats, distname).stats(*arg, loc=loc, scale=scale)
A:scipy.stats.tests.test_continuous_extra.ent->getattr(stats, distname).entropy(*arg)
scipy.stats.tests.test_continuous_extra._est_cont_skip()
scipy.stats.tests.test_continuous_extra.assert_equal_inf_nan(v1,v2,msg)
scipy.stats.tests.test_continuous_extra.check_entropy(distfn,arg,msg)
scipy.stats.tests.test_continuous_extra.check_isf_limits(distfn,arg,msg)
scipy.stats.tests.test_continuous_extra.check_loc_scale(distfn,arg,msg)
scipy.stats.tests.test_continuous_extra.check_ppf_limits(distfn,arg,msg)
scipy.stats.tests.test_continuous_extra.check_ppf_private(distfn,arg,msg)
scipy.stats.tests.test_continuous_extra.test_540_567()
scipy.stats.tests.test_continuous_extra.test_cont_extra()
scipy.tests.test_continuous_extra._est_cont_skip()
scipy.tests.test_continuous_extra.assert_equal_inf_nan(v1,v2,msg)
scipy.tests.test_continuous_extra.check_entropy(distfn,arg,msg)
scipy.tests.test_continuous_extra.check_isf_limits(distfn,arg,msg)
scipy.tests.test_continuous_extra.check_loc_scale(distfn,arg,msg)
scipy.tests.test_continuous_extra.check_ppf_limits(distfn,arg,msg)
scipy.tests.test_continuous_extra.check_ppf_private(distfn,arg,msg)
scipy.tests.test_continuous_extra.test_540_567()
scipy.tests.test_continuous_extra.test_cont_extra()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/tests/test_contingency.py----------------------------------------
A:scipy.stats.tests.test_contingency.a->numpy.arange(24).reshape(2, 3, 4)
A:scipy.stats.tests.test_contingency.m->margins(a)
A:scipy.stats.tests.test_contingency.(m0, m1)->margins(a)
A:scipy.stats.tests.test_contingency.expected0->numpy.array([[[66]], [[210]]])
A:scipy.stats.tests.test_contingency.expected1->numpy.array([[[60], [92], [124]]])
A:scipy.stats.tests.test_contingency.(m0, m1, m2)->margins(a)
A:scipy.stats.tests.test_contingency.expected2->numpy.array([[[60, 66, 72, 78]]])
A:scipy.stats.tests.test_contingency.observed->numpy.array([[10, 10, 20], [20, 20, 20]])
A:scipy.stats.tests.test_contingency.e->expected_freq(observed)
A:scipy.stats.tests.test_contingency.correct->numpy.array([[12.0, 12.0, 16.0], [18.0, 18.0, 24.0]])
A:scipy.stats.tests.test_contingency.obs->numpy.empty((0, 8))
A:scipy.stats.tests.test_contingency.(chi2, p, dof, expected)->chi2_contingency(obs)
scipy.stats.tests.test_contingency.test_chi2_contingency_R()
scipy.stats.tests.test_contingency.test_chi2_contingency_bad_args()
scipy.stats.tests.test_contingency.test_chi2_contingency_trivial()
scipy.stats.tests.test_contingency.test_expected_freq()
scipy.stats.tests.test_contingency.test_margins()
scipy.tests.test_contingency.test_chi2_contingency_R()
scipy.tests.test_contingency.test_chi2_contingency_bad_args()
scipy.tests.test_contingency.test_chi2_contingency_trivial()
scipy.tests.test_contingency.test_expected_freq()
scipy.tests.test_contingency.test_margins()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/tests/test_morestats.py----------------------------------------
A:scipy.stats.tests.test_morestats.(w, pw)->scipy.stats.shapiro(x2)
A:scipy.stats.tests.test_morestats.rs->RandomState(1234567890)
A:scipy.stats.tests.test_morestats.x1->numpy.arange(5)
A:scipy.stats.tests.test_morestats.x2->RandomState(1234567890).standard_normal(size=50)
A:scipy.stats.tests.test_morestats.(A, crit, sig)->scipy.stats.anderson(x2, 'expon')
A:scipy.stats.tests.test_morestats.olderr->numpy.seterr(all='ignore')
A:scipy.stats.tests.test_morestats.(W, pval)->scipy.stats.levene(*args)
A:scipy.stats.tests.test_morestats.ramsay->numpy.array((111, 107, 100, 99, 102, 106, 109, 108, 104, 99, 101, 96, 97, 102, 107, 113, 116, 113, 110, 98))
A:scipy.stats.tests.test_morestats.parekh->numpy.array((107, 108, 106, 98, 105, 103, 110, 105, 104, 100, 96, 108, 103, 104, 114, 114, 113, 108, 106, 99))
A:scipy.stats.tests.test_morestats.warn_ctx->WarningManager()
A:scipy.stats.tests.test_morestats.(T, pval)->scipy.stats.bartlett(*args)
A:scipy.stats.tests.test_morestats.(W1, pval1)->scipy.stats.levene(x, y, center='mean')
A:scipy.stats.tests.test_morestats.(W2, pval2)->scipy.stats.levene(x, y, center='median')
A:scipy.stats.tests.test_morestats.x->numpy.concatenate([[u] * v for (u, v) in zip(nums, freq)])
A:scipy.stats.tests.test_morestats.pval->scipy.stats.binom_test([682, 243], p=3.0 / 4)
A:scipy.stats.tests.test_morestats.(res, nums)->scipy.stats.find_repeats(a)
A:scipy.stats.tests.test_morestats.(Xsq1, pval1)->scipy.stats.fligner(x, y, center='trimmed', proportiontocut=0.125)
A:scipy.stats.tests.test_morestats.(Xsq2, pval2)->scipy.stats.fligner(x[1:-1], y[1:-1], center='mean')
A:scipy.stats.tests.test_morestats.M->scipy.stats.circmean(x, high=360)
A:scipy.stats.tests.test_morestats.V->scipy.stats.circvar(x, high=360)
A:scipy.stats.tests.test_morestats.S->scipy.stats.circstd(x, high=360)
A:scipy.stats.tests.test_morestats.M1->numpy.concatenate([[u] * v for (u, v) in zip(nums, freq)]).mean()
A:scipy.stats.tests.test_morestats.M2->scipy.stats.circmean(x, high=360)
A:scipy.stats.tests.test_morestats.V1->numpy.concatenate([[u] * v for (u, v) in zip(nums, freq)]).var()
A:scipy.stats.tests.test_morestats.V2->scipy.stats.circvar(x, high=360)
A:scipy.stats.tests.test_morestats.S1->numpy.concatenate([[u] * v for (u, v) in zip(nums, freq)]).std()
A:scipy.stats.tests.test_morestats.S2->scipy.stats.circstd(x, high=360)
A:scipy.stats.tests.test_morestats.nums->range(-4, 5)
A:scipy.stats.tests.test_morestats.y->numpy.zeros(x.size)
A:scipy.stats.tests.test_morestats.(T, p)->scipy.stats.wilcoxon(x, y, 'wilcox')
scipy.stats.tests.test_TestAnderson(TestCase)
scipy.stats.tests.test_TestAnderson.test_bad_arg(self)
scipy.stats.tests.test_TestAnderson.test_expon(self)
scipy.stats.tests.test_TestAnderson.test_normal(self)
scipy.stats.tests.test_TestAnsari(TestCase)
scipy.stats.tests.test_TestAnsari.test_approx(self)
scipy.stats.tests.test_TestAnsari.test_bad_arg(self)
scipy.stats.tests.test_TestAnsari.test_exact(self)
scipy.stats.tests.test_TestAnsari.test_small(self)
scipy.stats.tests.test_TestBartlett(TestCase)
scipy.stats.tests.test_TestBartlett.test_bad_arg(self)
scipy.stats.tests.test_TestBartlett.test_data(self)
scipy.stats.tests.test_TestBinomP(TestCase)
scipy.stats.tests.test_TestBinomP.test_bad_len_x(self)
scipy.stats.tests.test_TestBinomP.test_bad_n(self)
scipy.stats.tests.test_TestBinomP.test_bad_p(self)
scipy.stats.tests.test_TestBinomP.test_data(self)
scipy.stats.tests.test_TestFindRepeats(TestCase)
scipy.stats.tests.test_TestFindRepeats.test_basic(self)
scipy.stats.tests.test_TestFligner(TestCase)
scipy.stats.tests.test_TestFligner.test_bad_center_value(self)
scipy.stats.tests.test_TestFligner.test_bad_keyword(self)
scipy.stats.tests.test_TestFligner.test_bad_num_args(self)
scipy.stats.tests.test_TestFligner.test_data(self)
scipy.stats.tests.test_TestFligner.test_trimmed1(self)
scipy.stats.tests.test_TestFligner.test_trimmed2(self)
scipy.stats.tests.test_TestLevene(TestCase)
scipy.stats.tests.test_TestLevene.test_bad_center_value(self)
scipy.stats.tests.test_TestLevene.test_bad_keyword(self)
scipy.stats.tests.test_TestLevene.test_data(self)
scipy.stats.tests.test_TestLevene.test_equal_mean_median(self)
scipy.stats.tests.test_TestLevene.test_too_few_args(self)
scipy.stats.tests.test_TestLevene.test_trimmed1(self)
scipy.stats.tests.test_TestLevene.test_trimmed2(self)
scipy.stats.tests.test_TestShapiro(TestCase)
scipy.stats.tests.test_TestShapiro.test_bad_arg(self)
scipy.stats.tests.test_TestShapiro.test_basic(self)
scipy.stats.tests.test_morestats.TestAnderson(TestCase)
scipy.stats.tests.test_morestats.TestAnderson.test_bad_arg(self)
scipy.stats.tests.test_morestats.TestAnderson.test_expon(self)
scipy.stats.tests.test_morestats.TestAnderson.test_normal(self)
scipy.stats.tests.test_morestats.TestAnsari(TestCase)
scipy.stats.tests.test_morestats.TestAnsari.test_approx(self)
scipy.stats.tests.test_morestats.TestAnsari.test_bad_arg(self)
scipy.stats.tests.test_morestats.TestAnsari.test_exact(self)
scipy.stats.tests.test_morestats.TestAnsari.test_small(self)
scipy.stats.tests.test_morestats.TestBartlett(TestCase)
scipy.stats.tests.test_morestats.TestBartlett.test_bad_arg(self)
scipy.stats.tests.test_morestats.TestBartlett.test_data(self)
scipy.stats.tests.test_morestats.TestBinomP(TestCase)
scipy.stats.tests.test_morestats.TestBinomP.test_bad_len_x(self)
scipy.stats.tests.test_morestats.TestBinomP.test_bad_n(self)
scipy.stats.tests.test_morestats.TestBinomP.test_bad_p(self)
scipy.stats.tests.test_morestats.TestBinomP.test_data(self)
scipy.stats.tests.test_morestats.TestFindRepeats(TestCase)
scipy.stats.tests.test_morestats.TestFindRepeats.test_basic(self)
scipy.stats.tests.test_morestats.TestFligner(TestCase)
scipy.stats.tests.test_morestats.TestFligner.test_bad_center_value(self)
scipy.stats.tests.test_morestats.TestFligner.test_bad_keyword(self)
scipy.stats.tests.test_morestats.TestFligner.test_bad_num_args(self)
scipy.stats.tests.test_morestats.TestFligner.test_data(self)
scipy.stats.tests.test_morestats.TestFligner.test_trimmed1(self)
scipy.stats.tests.test_morestats.TestFligner.test_trimmed2(self)
scipy.stats.tests.test_morestats.TestLevene(TestCase)
scipy.stats.tests.test_morestats.TestLevene.test_bad_center_value(self)
scipy.stats.tests.test_morestats.TestLevene.test_bad_keyword(self)
scipy.stats.tests.test_morestats.TestLevene.test_data(self)
scipy.stats.tests.test_morestats.TestLevene.test_equal_mean_median(self)
scipy.stats.tests.test_morestats.TestLevene.test_too_few_args(self)
scipy.stats.tests.test_morestats.TestLevene.test_trimmed1(self)
scipy.stats.tests.test_morestats.TestLevene.test_trimmed2(self)
scipy.stats.tests.test_morestats.TestShapiro(TestCase)
scipy.stats.tests.test_morestats.TestShapiro.test_bad_arg(self)
scipy.stats.tests.test_morestats.TestShapiro.test_basic(self)
scipy.stats.tests.test_morestats.test_accuracy_wilcoxon()
scipy.stats.tests.test_morestats.test_boxcox_bad_arg()
scipy.stats.tests.test_morestats.test_circmean_axis()
scipy.stats.tests.test_morestats.test_circstats()
scipy.stats.tests.test_morestats.test_circstats_small()
scipy.stats.tests.test_morestats.test_circstd_axis()
scipy.stats.tests.test_morestats.test_circvar_axis()
scipy.stats.tests.test_morestats.test_kstat_bad_arg()
scipy.stats.tests.test_morestats.test_kstatvar_bad_arg()
scipy.stats.tests.test_morestats.test_mood()
scipy.stats.tests.test_morestats.test_mood_bad_arg()
scipy.stats.tests.test_morestats.test_mvsdist_bad_arg()
scipy.stats.tests.test_morestats.test_oneway_bad_arg()
scipy.stats.tests.test_morestats.test_ppcc_max_bad_arg()
scipy.stats.tests.test_morestats.test_probplot_bad_arg()
scipy.stats.tests.test_morestats.test_wilcoxon_bad_arg()
scipy.stats.tests.test_test_accuracy_wilcoxon()
scipy.stats.tests.test_test_boxcox_bad_arg()
scipy.stats.tests.test_test_circmean_axis()
scipy.stats.tests.test_test_circstats()
scipy.stats.tests.test_test_circstats_small()
scipy.stats.tests.test_test_circstd_axis()
scipy.stats.tests.test_test_circvar_axis()
scipy.stats.tests.test_test_kstat_bad_arg()
scipy.stats.tests.test_test_kstatvar_bad_arg()
scipy.stats.tests.test_test_mood()
scipy.stats.tests.test_test_mood_bad_arg()
scipy.stats.tests.test_test_mvsdist_bad_arg()
scipy.stats.tests.test_test_oneway_bad_arg()
scipy.stats.tests.test_test_ppcc_max_bad_arg()
scipy.stats.tests.test_test_probplot_bad_arg()
scipy.stats.tests.test_test_wilcoxon_bad_arg()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/stats/tests/test_tukeylambda_stats.py----------------------------------------
A:scipy.stats.tests.test_tukeylambda_stats.var->tukeylambda_variance(lam)
A:scipy.stats.tests.test_tukeylambda_stats.kurt->tukeylambda_kurtosis(lam)
A:scipy.stats.tests.test_tukeylambda_stats.a10->dict(atol=1e-10, rtol=0)
A:scipy.stats.tests.test_tukeylambda_stats.a12->dict(atol=1e-12, rtol=0)
A:scipy.stats.tests.test_tukeylambda_stats.(lam, var_expected, kurt_expected)->zip(*data)
scipy.stats.tests.test_tukeylambda_stats.test_tukeylambda_stats_invalid()
scipy.stats.tests.test_tukeylambda_stats.test_tukeylambda_stats_known_exact()
scipy.stats.tests.test_tukeylambda_stats.test_tukeylambda_stats_mpmath()
scipy.tests.test_tukeylambda_test_tukeylambda_stats_invalid()
scipy.tests.test_tukeylambda_test_tukeylambda_stats_known_exact()
scipy.tests.test_tukeylambda_test_tukeylambda_stats_mpmath()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/ndimage/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/ndimage/_ni_support.py----------------------------------------
A:scipy.ndimage._ni_support.normalized->list(input)
A:scipy.ndimage._ni_support.output->numpy.zeros(shape, dtype=output)
scipy.ndimage._ni_support._check_axis(axis,rank)
scipy.ndimage._ni_support._extend_mode_to_code(mode)
scipy.ndimage._ni_support._get_output(output,input,shape=None)
scipy.ndimage._ni_support._normalize_sequence(input,rank,array_type=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/ndimage/filters.py----------------------------------------
A:scipy.ndimage.filters.docfiller->scipy.misc.doccer.filldoc(docdict)
A:scipy.ndimage.filters.input->numpy.asarray(input)
A:scipy.ndimage.filters.(output, return_value)->_ni_support._get_output(output, input)
A:scipy.ndimage.filters.weights->weights.copy().copy()
A:scipy.ndimage.filters.axis->_ni_support._check_axis(axis, input.ndim)
A:scipy.ndimage.filters.mode->_ni_support._extend_mode_to_code(mode)
A:scipy.ndimage.filters.sd->float(sigma)
A:scipy.ndimage.filters.lw->int(4.0 * sd + 0.5)
A:scipy.ndimage.filters.tmp->derivative(input, axes[ii], output.dtype, mode, cval, *extra_arguments, **extra_keywords)
A:scipy.ndimage.filters.x->float(ii)
A:scipy.ndimage.filters.orders->_ni_support._normalize_sequence(order, input.ndim)
A:scipy.ndimage.filters.sigmas->_ni_support._normalize_sequence(sigma, input.ndim)
A:scipy.ndimage.filters.axes->list(range(input.ndim))
A:scipy.ndimage.filters.origins->_ni_support._normalize_sequence(origin, input.ndim)
A:scipy.ndimage.filters.sizes->_ni_support._normalize_sequence(size, input.ndim)
A:scipy.ndimage.filters.footprint->footprint.copy().copy()
A:scipy.ndimage.filters.structure->structure.copy().copy()
A:scipy.ndimage.filters.filter_size->numpy.where(footprint, 1, 0).sum()
A:scipy.ndimage.filters.rank->int(float(filter_size) * percentile / 100.0)
scipy.ndimage._correlate_or_convolve(input,weights,output,mode,cval,origin,convolution)
scipy.ndimage._min_or_max_filter(input,size,footprint,structure,output,mode,cval,origin,minimum)
scipy.ndimage._rank_filter(input,rank,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0,operation='rank')
scipy.ndimage.convolve(input,weights,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.convolve1d(input,weights,axis=-1,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.correlate(input,weights,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.correlate1d(input,weights,axis=-1,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.filters._correlate_or_convolve(input,weights,output,mode,cval,origin,convolution)
scipy.ndimage.filters._min_or_max_filter(input,size,footprint,structure,output,mode,cval,origin,minimum)
scipy.ndimage.filters._rank_filter(input,rank,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0,operation='rank')
scipy.ndimage.filters.convolve(input,weights,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.filters.convolve1d(input,weights,axis=-1,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.filters.correlate(input,weights,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.filters.correlate1d(input,weights,axis=-1,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.filters.gaussian_filter(input,sigma,order=0,output=None,mode='reflect',cval=0.0)
scipy.ndimage.filters.gaussian_filter1d(input,sigma,axis=-1,order=0,output=None,mode='reflect',cval=0.0)
scipy.ndimage.filters.gaussian_gradient_magnitude(input,sigma,output=None,mode='reflect',cval=0.0)
scipy.ndimage.filters.gaussian_laplace(input,sigma,output=None,mode='reflect',cval=0.0)
scipy.ndimage.filters.generic_filter(input,function,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0,extra_arguments=(),extra_keywords=None)
scipy.ndimage.filters.generic_filter1d(input,function,filter_size,axis=-1,output=None,mode='reflect',cval=0.0,origin=0,extra_arguments=(),extra_keywords=None)
scipy.ndimage.filters.generic_gradient_magnitude(input,derivative,output=None,mode='reflect',cval=0.0,extra_arguments=(),extra_keywords=None)
scipy.ndimage.filters.generic_laplace(input,derivative2,output=None,mode='reflect',cval=0.0,extra_arguments=(),extra_keywords=None)
scipy.ndimage.filters.laplace(input,output=None,mode='reflect',cval=0.0)
scipy.ndimage.filters.maximum_filter(input,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.filters.maximum_filter1d(input,size,axis=-1,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.filters.median_filter(input,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.filters.minimum_filter(input,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.filters.minimum_filter1d(input,size,axis=-1,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.filters.percentile_filter(input,percentile,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.filters.prewitt(input,axis=-1,output=None,mode='reflect',cval=0.0)
scipy.ndimage.filters.rank_filter(input,rank,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.filters.sobel(input,axis=-1,output=None,mode='reflect',cval=0.0)
scipy.ndimage.filters.uniform_filter(input,size=3,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.filters.uniform_filter1d(input,size,axis=-1,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.gaussian_filter(input,sigma,order=0,output=None,mode='reflect',cval=0.0)
scipy.ndimage.gaussian_filter1d(input,sigma,axis=-1,order=0,output=None,mode='reflect',cval=0.0)
scipy.ndimage.gaussian_gradient_magnitude(input,sigma,output=None,mode='reflect',cval=0.0)
scipy.ndimage.gaussian_laplace(input,sigma,output=None,mode='reflect',cval=0.0)
scipy.ndimage.generic_filter(input,function,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0,extra_arguments=(),extra_keywords=None)
scipy.ndimage.generic_filter1d(input,function,filter_size,axis=-1,output=None,mode='reflect',cval=0.0,origin=0,extra_arguments=(),extra_keywords=None)
scipy.ndimage.generic_gradient_magnitude(input,derivative,output=None,mode='reflect',cval=0.0,extra_arguments=(),extra_keywords=None)
scipy.ndimage.generic_laplace(input,derivative2,output=None,mode='reflect',cval=0.0,extra_arguments=(),extra_keywords=None)
scipy.ndimage.laplace(input,output=None,mode='reflect',cval=0.0)
scipy.ndimage.maximum_filter(input,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.maximum_filter1d(input,size,axis=-1,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.median_filter(input,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.minimum_filter(input,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.minimum_filter1d(input,size,axis=-1,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.percentile_filter(input,percentile,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.prewitt(input,axis=-1,output=None,mode='reflect',cval=0.0)
scipy.ndimage.rank_filter(input,rank,size=None,footprint=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.sobel(input,axis=-1,output=None,mode='reflect',cval=0.0)
scipy.ndimage.uniform_filter(input,size=3,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.uniform_filter1d(input,size,axis=-1,output=None,mode='reflect',cval=0.0,origin=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/ndimage/setupscons.py----------------------------------------
A:scipy.ndimage.setupscons.config->Configuration('ndimage', parent_package, top_path)
scipy.ndimage.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/ndimage/interpolation.py----------------------------------------
A:scipy.ndimage.interpolation.mode->_extend_mode_to_code(mode)
A:scipy.ndimage.interpolation.input->numpy.asarray(input)
A:scipy.ndimage.interpolation.(output, return_value)->_ni_support._get_output(output, input, shape=output_shape)
A:scipy.ndimage.interpolation.output[...]->numpy.array(input)
A:scipy.ndimage.interpolation.axis->_ni_support._check_axis(axis, input.ndim)
A:scipy.ndimage.interpolation.filtered->spline_filter(input, order, output=numpy.float64)
A:scipy.ndimage.interpolation.coordinates->numpy.asarray(coordinates)
A:scipy.ndimage.interpolation.matrix->numpy.array([[m11, m12], [m21, m22]], dtype=numpy.float64)
A:scipy.ndimage.interpolation.offset->numpy.dot(matrix, offset)
A:scipy.ndimage.interpolation.shift->shift.copy().copy()
A:scipy.ndimage.interpolation.zoom->numpy.ascontiguousarray(zoom)
A:scipy.ndimage.interpolation.output_shape->tuple(output_shape)
A:scipy.ndimage.interpolation.axes->list(axes)
A:scipy.ndimage.interpolation.m11->math.cos(angle)
A:scipy.ndimage.interpolation.m12->math.sin(angle)
A:scipy.ndimage.interpolation.m22->math.cos(angle)
A:scipy.ndimage.interpolation.mtrx->numpy.array([[m11, -m21], [-m12, m22]], dtype=numpy.float64)
A:scipy.ndimage.interpolation.coor->numpy.dot(mtrx, [iy, ix])
A:scipy.ndimage.interpolation.(minc, maxc)->_minmax(coor, minc, maxc)
A:scipy.ndimage.interpolation.oy->int(maxc[0] - minc[0] + 0.5)
A:scipy.ndimage.interpolation.ox->int(maxc[1] - minc[1] + 0.5)
A:scipy.ndimage.interpolation.tmp->numpy.zeros((2,), dtype=numpy.float64)
A:scipy.ndimage.interpolation.size->numpy.product(input.shape, axis=0)
A:scipy.ndimage.interpolation.iter_axes->list(range(input.ndim))
scipy.ndimage._extend_mode_to_code(mode)
scipy.ndimage._minmax(coor,minc,maxc)
scipy.ndimage.affine_transform(input,matrix,offset=0.0,output_shape=None,output=None,order=3,mode='constant',cval=0.0,prefilter=True)
scipy.ndimage.geometric_transform(input,mapping,output_shape=None,output=None,order=3,mode='constant',cval=0.0,prefilter=True,extra_arguments=(),extra_keywords={})
scipy.ndimage.interpolation._extend_mode_to_code(mode)
scipy.ndimage.interpolation._minmax(coor,minc,maxc)
scipy.ndimage.interpolation.affine_transform(input,matrix,offset=0.0,output_shape=None,output=None,order=3,mode='constant',cval=0.0,prefilter=True)
scipy.ndimage.interpolation.geometric_transform(input,mapping,output_shape=None,output=None,order=3,mode='constant',cval=0.0,prefilter=True,extra_arguments=(),extra_keywords={})
scipy.ndimage.interpolation.map_coordinates(input,coordinates,output=None,order=3,mode='constant',cval=0.0,prefilter=True)
scipy.ndimage.interpolation.rotate(input,angle,axes=(1,0),reshape=True,output=None,order=3,mode='constant',cval=0.0,prefilter=True)
scipy.ndimage.interpolation.shift(input,shift,output=None,order=3,mode='constant',cval=0.0,prefilter=True)
scipy.ndimage.interpolation.spline_filter(input,order=3,output=numpy.float64)
scipy.ndimage.interpolation.spline_filter1d(input,order=3,axis=-1,output=numpy.float64)
scipy.ndimage.interpolation.zoom(input,zoom,output=None,order=3,mode='constant',cval=0.0,prefilter=True)
scipy.ndimage.map_coordinates(input,coordinates,output=None,order=3,mode='constant',cval=0.0,prefilter=True)
scipy.ndimage.rotate(input,angle,axes=(1,0),reshape=True,output=None,order=3,mode='constant',cval=0.0,prefilter=True)
scipy.ndimage.shift(input,shift,output=None,order=3,mode='constant',cval=0.0,prefilter=True)
scipy.ndimage.spline_filter(input,order=3,output=numpy.float64)
scipy.ndimage.spline_filter1d(input,order=3,axis=-1,output=numpy.float64)
scipy.ndimage.zoom(input,zoom,output=None,order=3,mode='constant',cval=0.0,prefilter=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/ndimage/morphology.py----------------------------------------
A:scipy.ndimage.morphology.structure->numpy.asarray(structure)
A:scipy.ndimage.morphology.coor->tuple([oo + ss // 2 for (ss, oo) in zip(structure.shape, origin)])
A:scipy.ndimage.morphology.out->binary_dilation(out, structure, iterations=ni)
A:scipy.ndimage.morphology.origin->_ni_support._normalize_sequence(origin, input.ndim)
A:scipy.ndimage.morphology.output->binary_dilation(tmp, structure, -1, mask, None, 1, origin)
A:scipy.ndimage.morphology.input->numpy.atleast_1d(numpy.where(input, 1, 0).astype(numpy.int8))
A:scipy.ndimage.morphology.mask->numpy.logical_not(input)
A:scipy.ndimage.morphology.cit->_center_is_true(structure, origin)
A:scipy.ndimage.morphology.(output, return_value)->_ni_support._get_output(output, input)
A:scipy.ndimage.morphology.(changed, coordinate_list)->_nd_image.binary_erosion(input, structure, mask, output, border_value, origin, invert, cit, 1)
A:scipy.ndimage.morphology.msk->numpy.logical_not(input).copy()
A:scipy.ndimage.morphology.tmp_in->numpy.zeros(input.shape, bool)
A:scipy.ndimage.morphology.tmp_out->numpy.zeros(input.shape, bool)
A:scipy.ndimage.morphology.changed->_nd_image.binary_erosion(tmp_in, structure, mask, tmp_out, border_value, origin, invert, cit, 0)
A:scipy.ndimage.morphology.tmp->numpy.indices(dt.shape, dtype=numpy.int32)
A:scipy.ndimage.morphology.structure1->generate_binary_structure(input.ndim, 1)
A:scipy.ndimage.morphology.structure2->numpy.logical_not(structure1)
A:scipy.ndimage.morphology.origin1->_ni_support._normalize_sequence(origin1, input.ndim)
A:scipy.ndimage.morphology.origin2->_ni_support._normalize_sequence(origin2, input.ndim)
A:scipy.ndimage.morphology.tmp1->grey_dilation(input, size, footprint, structure, None, mode, cval, origin)
A:scipy.ndimage.morphology.inplace->isinstance(output, numpy.ndarray)
A:scipy.ndimage.morphology.result->_binary_erosion(input, structure2, 1, None, output, 0, origin2, 1, False)
A:scipy.ndimage.morphology.footprint->numpy.asarray(footprint)
A:scipy.ndimage.morphology.tmp2->numpy.indices(tmp1.shape, dtype=numpy.int32)
A:scipy.ndimage.morphology.struct->generate_binary_structure(tmp1.ndim, tmp1.ndim)
A:scipy.ndimage.morphology.metric->metric.copy().copy()
A:scipy.ndimage.morphology.sampling->sampling.copy().copy()
A:scipy.ndimage.morphology.ft->numpy.zeros((input.ndim,) + input.shape, dtype=numpy.int32)
A:scipy.ndimage.morphology.dt->numpy.sqrt(dt)
A:scipy.ndimage.morphology.ft_inplace->isinstance(indices, numpy.ndarray)
A:scipy.ndimage.morphology.dt_inplace->isinstance(distances, numpy.ndarray)
A:scipy.ndimage.morphology.dt[...]->numpy.where(input, -1, 0).astype(numpy.int32)
A:scipy.ndimage.morphology.sz->numpy.product(dt.shape, axis=0)
scipy.ndimage._binary_erosion(input,structure,iterations,mask,output,border_value,origin,invert,brute_force)
scipy.ndimage._center_is_true(structure,origin)
scipy.ndimage.binary_closing(input,structure=None,iterations=1,output=None,origin=0)
scipy.ndimage.binary_dilation(input,structure=None,iterations=1,mask=None,output=None,border_value=0,origin=0,brute_force=False)
scipy.ndimage.binary_erosion(input,structure=None,iterations=1,mask=None,output=None,border_value=0,origin=0,brute_force=False)
scipy.ndimage.binary_fill_holes(input,structure=None,output=None,origin=0)
scipy.ndimage.binary_hit_or_miss(input,structure1=None,structure2=None,output=None,origin1=0,origin2=None)
scipy.ndimage.binary_opening(input,structure=None,iterations=1,output=None,origin=0)
scipy.ndimage.binary_propagation(input,structure=None,mask=None,output=None,border_value=0,origin=0)
scipy.ndimage.black_tophat(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.distance_transform_bf(input,metric='euclidean',sampling=None,return_distances=True,return_indices=False,distances=None,indices=None)
scipy.ndimage.distance_transform_cdt(input,metric='chessboard',return_distances=True,return_indices=False,distances=None,indices=None)
scipy.ndimage.distance_transform_edt(input,sampling=None,return_distances=True,return_indices=False,distances=None,indices=None)
scipy.ndimage.generate_binary_structure(rank,connectivity)
scipy.ndimage.grey_closing(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.grey_dilation(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.grey_erosion(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.grey_opening(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.iterate_structure(structure,iterations,origin=None)
scipy.ndimage.morphological_gradient(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.morphological_laplace(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.morphology._binary_erosion(input,structure,iterations,mask,output,border_value,origin,invert,brute_force)
scipy.ndimage.morphology._center_is_true(structure,origin)
scipy.ndimage.morphology.binary_closing(input,structure=None,iterations=1,output=None,origin=0)
scipy.ndimage.morphology.binary_dilation(input,structure=None,iterations=1,mask=None,output=None,border_value=0,origin=0,brute_force=False)
scipy.ndimage.morphology.binary_erosion(input,structure=None,iterations=1,mask=None,output=None,border_value=0,origin=0,brute_force=False)
scipy.ndimage.morphology.binary_fill_holes(input,structure=None,output=None,origin=0)
scipy.ndimage.morphology.binary_hit_or_miss(input,structure1=None,structure2=None,output=None,origin1=0,origin2=None)
scipy.ndimage.morphology.binary_opening(input,structure=None,iterations=1,output=None,origin=0)
scipy.ndimage.morphology.binary_propagation(input,structure=None,mask=None,output=None,border_value=0,origin=0)
scipy.ndimage.morphology.black_tophat(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.morphology.distance_transform_bf(input,metric='euclidean',sampling=None,return_distances=True,return_indices=False,distances=None,indices=None)
scipy.ndimage.morphology.distance_transform_cdt(input,metric='chessboard',return_distances=True,return_indices=False,distances=None,indices=None)
scipy.ndimage.morphology.distance_transform_edt(input,sampling=None,return_distances=True,return_indices=False,distances=None,indices=None)
scipy.ndimage.morphology.generate_binary_structure(rank,connectivity)
scipy.ndimage.morphology.grey_closing(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.morphology.grey_dilation(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.morphology.grey_erosion(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.morphology.grey_opening(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.morphology.iterate_structure(structure,iterations,origin=None)
scipy.ndimage.morphology.morphological_gradient(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.morphology.morphological_laplace(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.morphology.white_tophat(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)
scipy.ndimage.white_tophat(input,size=None,footprint=None,structure=None,output=None,mode='reflect',cval=0.0,origin=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/ndimage/setup.py----------------------------------------
A:scipy.ndimage.setup.config->Configuration('ndimage', parent_package, top_path)
scipy.ndimage.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/ndimage/io.py----------------------------------------
A:scipy.ndimage.io.fp->open(fname, 'rb')
A:scipy.ndimage.io.im->im.convert('F').convert('F')
A:scipy.ndimage.io.result->array(im)
scipy.ndimage.imread(fname,flatten=False)
scipy.ndimage.io.imread(fname,flatten=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/ndimage/measurements.py----------------------------------------
A:scipy.ndimage.measurements.input->numpy.asarray(input)
A:scipy.ndimage.measurements.structure->structure.copy().copy()
A:scipy.ndimage.measurements.(output, return_value)->_ni_support._get_output(output, input)
A:scipy.ndimage.measurements.max_label->numpy.asarray(input).max()
A:scipy.ndimage.measurements.return_value->return_value.astype(requested_dtype).astype(requested_dtype)
A:scipy.ndimage.measurements.as_scalar->numpy.isscalar(index)
A:scipy.ndimage.measurements.positions->numpy.arange(input.size).reshape(input.shape)
A:scipy.ndimage.measurements.(input, labels)->numpy.broadcast_arrays(input, labels)
A:scipy.ndimage.measurements.index->index.astype(labels.dtype).astype(labels.dtype)
A:scipy.ndimage.measurements.lo->numpy.zeros(labels.max() + 2, numpy.int)
A:scipy.ndimage.measurements.hi->numpy.zeros(labels.max() + 2, numpy.int)
A:scipy.ndimage.measurements.label_order->labels.argsort()
A:scipy.ndimage.measurements.index_order->index.astype(labels.dtype).astype(labels.dtype).argsort()
A:scipy.ndimage.measurements.output[i]->func(*[inp[l:h] for inp in inputs])
A:scipy.ndimage.measurements.temp->numpy.empty(index.shape, out_dtype)
A:scipy.ndimage.measurements.output->numpy.zeros(index.shape, out_dtype)
A:scipy.ndimage.measurements.bc->numpy.bincount(labels.ravel(), weights=(centered_input * centered_input.conjugate()).ravel())
A:scipy.ndimage.measurements.(unique_labels, new_labels)->numpy.unique(labels, return_inverse=True)
A:scipy.ndimage.measurements.counts->numpy.bincount(labels.ravel())
A:scipy.ndimage.measurements.sums->numpy.bincount(labels.ravel(), weights=input.ravel())
A:scipy.ndimage.measurements.sums_c->_sum_centered(labels)
A:scipy.ndimage.measurements.idxs->numpy.asanyarray(index, numpy.int).copy()
A:scipy.ndimage.measurements.(count, sum)->_stats(input, labels, index)
A:scipy.ndimage.measurements.(count, sum, sum_c_sq)->_stats(input, labels, index, centered=True)
A:scipy.ndimage.measurements.(unique_labels, labels)->numpy.unique(labels, return_inverse=True)
A:scipy.ndimage.measurements.order->numpy.asarray(input).ravel().argsort()
A:scipy.ndimage.measurements.mins->numpy.zeros(labels.max() + 2, input.dtype)
A:scipy.ndimage.measurements.minpos->numpy.zeros(labels.max() + 2)
A:scipy.ndimage.measurements.maxs->numpy.zeros(labels.max() + 2, input.dtype)
A:scipy.ndimage.measurements.maxpos->numpy.zeros(labels.max() + 2)
A:scipy.ndimage.measurements.locs->numpy.arange(len(labels))
A:scipy.ndimage.measurements.dims->numpy.array(numpy.asarray(input).shape)
A:scipy.ndimage.measurements.(minimums, min_positions, maximums, max_positions)->_select(input, labels, index, find_min=True, find_max=True, find_min_positions=True, find_max_positions=True)
A:scipy.ndimage.measurements.normalizer->sum(input, labels, index)
A:scipy.ndimage.measurements._bins->numpy.linspace(min, max, bins + 1)
A:scipy.ndimage.measurements.markers->numpy.asarray(markers)
scipy.ndimage._safely_castable_to_int(dt)
scipy.ndimage._select(input,labels=None,index=None,find_min=False,find_max=False,find_min_positions=False,find_max_positions=False,find_median=False)
scipy.ndimage._stats(input,labels=None,index=None,centered=False)
scipy.ndimage.center_of_mass(input,labels=None,index=None)
scipy.ndimage.extrema(input,labels=None,index=None)
scipy.ndimage.find_objects(input,max_label=0)
scipy.ndimage.histogram(input,min,max,bins,labels=None,index=None)
scipy.ndimage.label(input,structure=None,output=None)
scipy.ndimage.labeled_comprehension(input,labels,index,func,out_dtype,default,pass_positions=False)
scipy.ndimage.maximum(input,labels=None,index=None)
scipy.ndimage.maximum_position(input,labels=None,index=None)
scipy.ndimage.mean(input,labels=None,index=None)
scipy.ndimage.measurements._safely_castable_to_int(dt)
scipy.ndimage.measurements._select(input,labels=None,index=None,find_min=False,find_max=False,find_min_positions=False,find_max_positions=False,find_median=False)
scipy.ndimage.measurements._stats(input,labels=None,index=None,centered=False)
scipy.ndimage.measurements.center_of_mass(input,labels=None,index=None)
scipy.ndimage.measurements.extrema(input,labels=None,index=None)
scipy.ndimage.measurements.find_objects(input,max_label=0)
scipy.ndimage.measurements.histogram(input,min,max,bins,labels=None,index=None)
scipy.ndimage.measurements.label(input,structure=None,output=None)
scipy.ndimage.measurements.labeled_comprehension(input,labels,index,func,out_dtype,default,pass_positions=False)
scipy.ndimage.measurements.maximum(input,labels=None,index=None)
scipy.ndimage.measurements.maximum_position(input,labels=None,index=None)
scipy.ndimage.measurements.mean(input,labels=None,index=None)
scipy.ndimage.measurements.median(input,labels=None,index=None)
scipy.ndimage.measurements.minimum(input,labels=None,index=None)
scipy.ndimage.measurements.minimum_position(input,labels=None,index=None)
scipy.ndimage.measurements.standard_deviation(input,labels=None,index=None)
scipy.ndimage.measurements.sum(input,labels=None,index=None)
scipy.ndimage.measurements.variance(input,labels=None,index=None)
scipy.ndimage.measurements.watershed_ift(input,markers,structure=None,output=None)
scipy.ndimage.median(input,labels=None,index=None)
scipy.ndimage.minimum(input,labels=None,index=None)
scipy.ndimage.minimum_position(input,labels=None,index=None)
scipy.ndimage.standard_deviation(input,labels=None,index=None)
scipy.ndimage.sum(input,labels=None,index=None)
scipy.ndimage.variance(input,labels=None,index=None)
scipy.ndimage.watershed_ift(input,markers,structure=None,output=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/ndimage/fourier.py----------------------------------------
A:scipy.ndimage.fourier.output->numpy.zeros(input.shape, dtype=output)
A:scipy.ndimage.fourier.input->numpy.asarray(input)
A:scipy.ndimage.fourier.(output, return_value)->_get_output_fourier_complex(output, input)
A:scipy.ndimage.fourier.axis->_ni_support._check_axis(axis, input.ndim)
A:scipy.ndimage.fourier.sigmas->sigmas.copy().copy()
A:scipy.ndimage.fourier.sizes->sizes.copy().copy()
A:scipy.ndimage.fourier.shifts->shifts.copy().copy()
scipy.ndimage._get_output_fourier(output,input)
scipy.ndimage._get_output_fourier_complex(output,input)
scipy.ndimage.fourier._get_output_fourier(output,input)
scipy.ndimage.fourier._get_output_fourier_complex(output,input)
scipy.ndimage.fourier.fourier_ellipsoid(input,size,n=-1,axis=-1,output=None)
scipy.ndimage.fourier.fourier_gaussian(input,sigma,n=-1,axis=-1,output=None)
scipy.ndimage.fourier.fourier_shift(input,shift,n=-1,axis=-1,output=None)
scipy.ndimage.fourier.fourier_uniform(input,size,n=-1,axis=-1,output=None)
scipy.ndimage.fourier_ellipsoid(input,size,n=-1,axis=-1,output=None)
scipy.ndimage.fourier_gaussian(input,sigma,n=-1,axis=-1,output=None)
scipy.ndimage.fourier_shift(input,shift,n=-1,axis=-1,output=None)
scipy.ndimage.fourier_uniform(input,size,n=-1,axis=-1,output=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/ndimage/tests/test_measurements.py----------------------------------------
A:scipy.ndimage.tests.test_measurements.x->numpy.array([-3, -2, -1])
A:scipy.ndimage.tests.test_measurements.labels->numpy.array([[1, 2], [2, 3]])
A:scipy.ndimage.tests.test_measurements.(counts, sums)->scipy.ndimage.measurements._stats(x, labels=labels, index=index)
A:scipy.ndimage.tests.test_measurements.(counts, sums, centers)->scipy.ndimage.measurements._stats(x, labels=labels, index=index, centered=True)
A:scipy.ndimage.tests.test_measurements.result->scipy.ndimage.measurements._select(x, labels=labels, index=index, find_max=True, find_max_positions=True)
A:scipy.ndimage.tests.test_measurements.data->numpy.array([[1, 0, 0, 0, 0, 0], [0, 0, 2, 2, 0, 0], [0, 0, 2, 2, 2, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 4, 0]])
A:scipy.ndimage.tests.test_measurements.(out, n)->scipy.ndimage.label(data)
A:scipy.ndimage.tests.test_measurements.struct->scipy.ndimage.generate_binary_structure(2, 2)
A:scipy.ndimage.tests.test_measurements.output->scipy.ndimage.histogram(input, 0, 4, 5, labels, (1, 2))
A:scipy.ndimage.tests.test_measurements.n->scipy.ndimage.label(data, output=output)
A:scipy.ndimage.tests.test_measurements.(output, n)->scipy.ndimage.label(data, output=t)
A:scipy.ndimage.tests.test_measurements.out->scipy.ndimage.find_objects(data)
A:scipy.ndimage.tests.test_measurements.input->numpy.array([1, 1, 3, 4, 3, 5, 3, 3])
A:scipy.ndimage.tests.test_measurements.olderr->numpy.seterr(all='ignore')
A:scipy.ndimage.tests.test_measurements.a->numpy.array([[5, 6, 0, 0, 0], [8, 9, 0, 0, 0], [0, 0, 0, 3, 5]])
A:scipy.ndimage.tests.test_measurements.output1->scipy.ndimage.extrema(input, labels, [1, 2])
A:scipy.ndimage.tests.test_measurements.output2->scipy.ndimage.minimum(input, labels, [1, 2])
A:scipy.ndimage.tests.test_measurements.output3->scipy.ndimage.maximum(input, labels, [1, 2])
A:scipy.ndimage.tests.test_measurements.output4->scipy.ndimage.minimum_position(input, labels, [1, 2])
A:scipy.ndimage.tests.test_measurements.output5->scipy.ndimage.maximum_position(input, labels, [1, 2])
A:scipy.ndimage.tests.test_measurements.expected->numpy.ones(10)
A:scipy.ndimage.tests.test_measurements.lbl->numpy.array([[1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 0, 2, 2]])
A:scipy.ndimage.tests.test_measurements.mean->scipy.ndimage.mean(a, labels=lbl, index=[1, 2])
A:scipy.ndimage.tests.test_measurements.var->scipy.ndimage.variance(a, labels=lbl, index=[1, 2])
A:scipy.ndimage.tests.test_measurements.std->scipy.ndimage.standard_deviation(a, labels=lbl, index=[1, 2])
A:scipy.ndimage.tests.test_measurements.med->scipy.ndimage.median(a, labels=lbl, index=[1, 2])
A:scipy.ndimage.tests.test_measurements.min->scipy.ndimage.minimum(a, labels=lbl, index=[1, 2])
A:scipy.ndimage.tests.test_measurements.max->scipy.ndimage.maximum(a, labels=lbl, index=[1, 2])
scipy.ndimage.tests.test_Test_measurements_select(TestCase)
scipy.ndimage.tests.test_Test_measurements_select.test_basic(self)
scipy.ndimage.tests.test_Test_measurements_stats(TestCase)
scipy.ndimage.tests.test_Test_measurements_stats.test_a(self)
scipy.ndimage.tests.test_Test_measurements_stats.test_a_centered(self)
scipy.ndimage.tests.test_Test_measurements_stats.test_b(self)
scipy.ndimage.tests.test_Test_measurements_stats.test_b_centered(self)
scipy.ndimage.tests.test_Test_measurements_stats.test_nonint_labels(self)
scipy.ndimage.tests.test_measurements.Test_measurements_select(TestCase)
scipy.ndimage.tests.test_measurements.Test_measurements_select.test_basic(self)
scipy.ndimage.tests.test_measurements.Test_measurements_stats(TestCase)
scipy.ndimage.tests.test_measurements.Test_measurements_stats.test_a(self)
scipy.ndimage.tests.test_measurements.Test_measurements_stats.test_a_centered(self)
scipy.ndimage.tests.test_measurements.Test_measurements_stats.test_b(self)
scipy.ndimage.tests.test_measurements.Test_measurements_stats.test_b_centered(self)
scipy.ndimage.tests.test_measurements.Test_measurements_stats.test_nonint_labels(self)
scipy.ndimage.tests.test_measurements.test_center_of_mass01()
scipy.ndimage.tests.test_measurements.test_center_of_mass02()
scipy.ndimage.tests.test_measurements.test_center_of_mass03()
scipy.ndimage.tests.test_measurements.test_center_of_mass04()
scipy.ndimage.tests.test_measurements.test_center_of_mass05()
scipy.ndimage.tests.test_measurements.test_center_of_mass06()
scipy.ndimage.tests.test_measurements.test_center_of_mass07()
scipy.ndimage.tests.test_measurements.test_center_of_mass08()
scipy.ndimage.tests.test_measurements.test_center_of_mass09()
scipy.ndimage.tests.test_measurements.test_extrema01()
scipy.ndimage.tests.test_measurements.test_extrema02()
scipy.ndimage.tests.test_measurements.test_extrema03()
scipy.ndimage.tests.test_measurements.test_extrema04()
scipy.ndimage.tests.test_measurements.test_find_objects01()
scipy.ndimage.tests.test_measurements.test_find_objects02()
scipy.ndimage.tests.test_measurements.test_find_objects03()
scipy.ndimage.tests.test_measurements.test_find_objects04()
scipy.ndimage.tests.test_measurements.test_find_objects05()
scipy.ndimage.tests.test_measurements.test_find_objects06()
scipy.ndimage.tests.test_measurements.test_find_objects07()
scipy.ndimage.tests.test_measurements.test_find_objects08()
scipy.ndimage.tests.test_measurements.test_find_objects09()
scipy.ndimage.tests.test_measurements.test_histogram01()
scipy.ndimage.tests.test_measurements.test_histogram02()
scipy.ndimage.tests.test_measurements.test_histogram03()
scipy.ndimage.tests.test_measurements.test_label01()
scipy.ndimage.tests.test_measurements.test_label02()
scipy.ndimage.tests.test_measurements.test_label03()
scipy.ndimage.tests.test_measurements.test_label04()
scipy.ndimage.tests.test_measurements.test_label05()
scipy.ndimage.tests.test_measurements.test_label06()
scipy.ndimage.tests.test_measurements.test_label07()
scipy.ndimage.tests.test_measurements.test_label08()
scipy.ndimage.tests.test_measurements.test_label09()
scipy.ndimage.tests.test_measurements.test_label10()
scipy.ndimage.tests.test_measurements.test_label11()
scipy.ndimage.tests.test_measurements.test_label12()
scipy.ndimage.tests.test_measurements.test_label13()
scipy.ndimage.tests.test_measurements.test_label_output_dtype()
scipy.ndimage.tests.test_measurements.test_label_output_typed()
scipy.ndimage.tests.test_measurements.test_label_output_wrong_size()
scipy.ndimage.tests.test_measurements.test_maximum01()
scipy.ndimage.tests.test_measurements.test_maximum02()
scipy.ndimage.tests.test_measurements.test_maximum03()
scipy.ndimage.tests.test_measurements.test_maximum04()
scipy.ndimage.tests.test_measurements.test_maximum05()
scipy.ndimage.tests.test_measurements.test_maximum_position01()
scipy.ndimage.tests.test_measurements.test_maximum_position02()
scipy.ndimage.tests.test_measurements.test_maximum_position03()
scipy.ndimage.tests.test_measurements.test_maximum_position04()
scipy.ndimage.tests.test_measurements.test_maximum_position05()
scipy.ndimage.tests.test_measurements.test_maximum_position06()
scipy.ndimage.tests.test_measurements.test_maximum_position07()
scipy.ndimage.tests.test_measurements.test_mean01()
scipy.ndimage.tests.test_measurements.test_mean02()
scipy.ndimage.tests.test_measurements.test_mean03()
scipy.ndimage.tests.test_measurements.test_mean04()
scipy.ndimage.tests.test_measurements.test_median01()
scipy.ndimage.tests.test_measurements.test_median02()
scipy.ndimage.tests.test_measurements.test_median03()
scipy.ndimage.tests.test_measurements.test_minimum01()
scipy.ndimage.tests.test_measurements.test_minimum02()
scipy.ndimage.tests.test_measurements.test_minimum03()
scipy.ndimage.tests.test_measurements.test_minimum04()
scipy.ndimage.tests.test_measurements.test_minimum_position01()
scipy.ndimage.tests.test_measurements.test_minimum_position02()
scipy.ndimage.tests.test_measurements.test_minimum_position03()
scipy.ndimage.tests.test_measurements.test_minimum_position04()
scipy.ndimage.tests.test_measurements.test_minimum_position05()
scipy.ndimage.tests.test_measurements.test_minimum_position06()
scipy.ndimage.tests.test_measurements.test_minimum_position07()
scipy.ndimage.tests.test_measurements.test_standard_deviation01()
scipy.ndimage.tests.test_measurements.test_standard_deviation02()
scipy.ndimage.tests.test_measurements.test_standard_deviation03()
scipy.ndimage.tests.test_measurements.test_standard_deviation04()
scipy.ndimage.tests.test_measurements.test_standard_deviation05()
scipy.ndimage.tests.test_measurements.test_standard_deviation06()
scipy.ndimage.tests.test_measurements.test_standard_deviation07()
scipy.ndimage.tests.test_measurements.test_stat_funcs_2d()
scipy.ndimage.tests.test_measurements.test_sum01()
scipy.ndimage.tests.test_measurements.test_sum02()
scipy.ndimage.tests.test_measurements.test_sum03()
scipy.ndimage.tests.test_measurements.test_sum04()
scipy.ndimage.tests.test_measurements.test_sum05()
scipy.ndimage.tests.test_measurements.test_sum06()
scipy.ndimage.tests.test_measurements.test_sum07()
scipy.ndimage.tests.test_measurements.test_sum08()
scipy.ndimage.tests.test_measurements.test_sum09()
scipy.ndimage.tests.test_measurements.test_sum10()
scipy.ndimage.tests.test_measurements.test_sum11()
scipy.ndimage.tests.test_measurements.test_sum12()
scipy.ndimage.tests.test_measurements.test_variance01()
scipy.ndimage.tests.test_measurements.test_variance02()
scipy.ndimage.tests.test_measurements.test_variance03()
scipy.ndimage.tests.test_measurements.test_variance04()
scipy.ndimage.tests.test_measurements.test_variance05()
scipy.ndimage.tests.test_measurements.test_variance06()
scipy.ndimage.tests.test_test_center_of_mass01()
scipy.ndimage.tests.test_test_center_of_mass02()
scipy.ndimage.tests.test_test_center_of_mass03()
scipy.ndimage.tests.test_test_center_of_mass04()
scipy.ndimage.tests.test_test_center_of_mass05()
scipy.ndimage.tests.test_test_center_of_mass06()
scipy.ndimage.tests.test_test_center_of_mass07()
scipy.ndimage.tests.test_test_center_of_mass08()
scipy.ndimage.tests.test_test_center_of_mass09()
scipy.ndimage.tests.test_test_extrema01()
scipy.ndimage.tests.test_test_extrema02()
scipy.ndimage.tests.test_test_extrema03()
scipy.ndimage.tests.test_test_extrema04()
scipy.ndimage.tests.test_test_find_objects01()
scipy.ndimage.tests.test_test_find_objects02()
scipy.ndimage.tests.test_test_find_objects03()
scipy.ndimage.tests.test_test_find_objects04()
scipy.ndimage.tests.test_test_find_objects05()
scipy.ndimage.tests.test_test_find_objects06()
scipy.ndimage.tests.test_test_find_objects07()
scipy.ndimage.tests.test_test_find_objects08()
scipy.ndimage.tests.test_test_find_objects09()
scipy.ndimage.tests.test_test_histogram01()
scipy.ndimage.tests.test_test_histogram02()
scipy.ndimage.tests.test_test_histogram03()
scipy.ndimage.tests.test_test_label01()
scipy.ndimage.tests.test_test_label02()
scipy.ndimage.tests.test_test_label03()
scipy.ndimage.tests.test_test_label04()
scipy.ndimage.tests.test_test_label05()
scipy.ndimage.tests.test_test_label06()
scipy.ndimage.tests.test_test_label07()
scipy.ndimage.tests.test_test_label08()
scipy.ndimage.tests.test_test_label09()
scipy.ndimage.tests.test_test_label10()
scipy.ndimage.tests.test_test_label11()
scipy.ndimage.tests.test_test_label12()
scipy.ndimage.tests.test_test_label13()
scipy.ndimage.tests.test_test_label_output_dtype()
scipy.ndimage.tests.test_test_label_output_typed()
scipy.ndimage.tests.test_test_label_output_wrong_size()
scipy.ndimage.tests.test_test_maximum01()
scipy.ndimage.tests.test_test_maximum02()
scipy.ndimage.tests.test_test_maximum03()
scipy.ndimage.tests.test_test_maximum04()
scipy.ndimage.tests.test_test_maximum05()
scipy.ndimage.tests.test_test_maximum_position01()
scipy.ndimage.tests.test_test_maximum_position02()
scipy.ndimage.tests.test_test_maximum_position03()
scipy.ndimage.tests.test_test_maximum_position04()
scipy.ndimage.tests.test_test_maximum_position05()
scipy.ndimage.tests.test_test_maximum_position06()
scipy.ndimage.tests.test_test_maximum_position07()
scipy.ndimage.tests.test_test_mean01()
scipy.ndimage.tests.test_test_mean02()
scipy.ndimage.tests.test_test_mean03()
scipy.ndimage.tests.test_test_mean04()
scipy.ndimage.tests.test_test_median01()
scipy.ndimage.tests.test_test_median02()
scipy.ndimage.tests.test_test_median03()
scipy.ndimage.tests.test_test_minimum01()
scipy.ndimage.tests.test_test_minimum02()
scipy.ndimage.tests.test_test_minimum03()
scipy.ndimage.tests.test_test_minimum04()
scipy.ndimage.tests.test_test_minimum_position01()
scipy.ndimage.tests.test_test_minimum_position02()
scipy.ndimage.tests.test_test_minimum_position03()
scipy.ndimage.tests.test_test_minimum_position04()
scipy.ndimage.tests.test_test_minimum_position05()
scipy.ndimage.tests.test_test_minimum_position06()
scipy.ndimage.tests.test_test_minimum_position07()
scipy.ndimage.tests.test_test_standard_deviation01()
scipy.ndimage.tests.test_test_standard_deviation02()
scipy.ndimage.tests.test_test_standard_deviation03()
scipy.ndimage.tests.test_test_standard_deviation04()
scipy.ndimage.tests.test_test_standard_deviation05()
scipy.ndimage.tests.test_test_standard_deviation06()
scipy.ndimage.tests.test_test_standard_deviation07()
scipy.ndimage.tests.test_test_stat_funcs_2d()
scipy.ndimage.tests.test_test_sum01()
scipy.ndimage.tests.test_test_sum02()
scipy.ndimage.tests.test_test_sum03()
scipy.ndimage.tests.test_test_sum04()
scipy.ndimage.tests.test_test_sum05()
scipy.ndimage.tests.test_test_sum06()
scipy.ndimage.tests.test_test_sum07()
scipy.ndimage.tests.test_test_sum08()
scipy.ndimage.tests.test_test_sum09()
scipy.ndimage.tests.test_test_sum10()
scipy.ndimage.tests.test_test_sum11()
scipy.ndimage.tests.test_test_sum12()
scipy.ndimage.tests.test_test_variance01()
scipy.ndimage.tests.test_test_variance02()
scipy.ndimage.tests.test_test_variance03()
scipy.ndimage.tests.test_test_variance04()
scipy.ndimage.tests.test_test_variance05()
scipy.ndimage.tests.test_test_variance06()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/ndimage/tests/test_regression.py----------------------------------------
A:scipy.ndimage.tests.test_regression.a->numpy.random.rand(np.product(shape)).reshape(shape)
A:scipy.ndimage.tests.test_regression.ref->scipy.ndimage.filters.median_filter(a, (3, 3))
A:scipy.ndimage.tests.test_regression.b->numpy.arange(9, dtype='>f4').reshape(3, 3)
A:scipy.ndimage.tests.test_regression.t->scipy.ndimage.filters.median_filter(b, (3, 3))
A:scipy.ndimage.tests.test_regression.x->numpy.arange(12).reshape((3, 4))
A:scipy.ndimage.tests.test_regression.rank->len(mask.shape)
A:scipy.ndimage.tests.test_regression.(la, co)->scipy.ndimage.label(mask, ndimage.generate_binary_structure(rank, rank))
A:scipy.ndimage.tests.test_regression.slices->scipy.ndimage.find_objects(la)
scipy.ndimage.tests.test_regression.test_byte_order_median()
scipy.ndimage.tests.test_regression.test_ticket_742()
scipy.ndimage.tests.test_regression.test_zoom_output_shape()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/ndimage/tests/test_datatypes.py----------------------------------------
A:scipy.ndimage.tests.test_datatypes.data->numpy.array([[4, 1, 3, 2], [7, 6, 8, 5], [3, 5, 3, 6]])
A:scipy.ndimage.tests.test_datatypes.shifted_data->numpy.array([[0, 0, 0, 0], [0, 4, 1, 3], [0, 7, 6, 8]])
A:scipy.ndimage.tests.test_datatypes.idx->numpy.indices(data.shape)
A:scipy.ndimage.tests.test_datatypes.these_data->numpy.array([[4, 1, 3, 2], [7, 6, 8, 5], [3, 5, 3, 6]]).astype(data_dt)
A:scipy.ndimage.tests.test_datatypes.mat->numpy.eye(2, dtype=coord_dt)
A:scipy.ndimage.tests.test_datatypes.off->numpy.zeros((2,), dtype=coord_dt)
A:scipy.ndimage.tests.test_datatypes.out->scipy.ndimage.zoom(these_data, 1)
A:scipy.ndimage.tests.test_datatypes.arr->numpy.array([big, big, big], dtype=np.uint64)
A:scipy.ndimage.tests.test_datatypes.x->scipy.ndimage.shift(arr, 0.1)
scipy.ndimage.tests.test_datatypes.test_map_coordinates_dts()
scipy.ndimage.tests.test_datatypes.test_uint64_max()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/ndimage/tests/test_io.py----------------------------------------
A:scipy.ndimage.tests.test_io.lp->os.path.join(os.path.dirname(__file__), 'dots.png')
A:scipy.ndimage.tests.test_io.img->scipy.ndimage.imread(lp, flatten=True)
scipy.ndimage.tests.test_io.test_imread()
scipy.ndimage.tests.test_test_imread()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/ndimage/tests/test_filters.py----------------------------------------
A:scipy.ndimage.tests.test_filters.arr->numpy.zeros((1,))
A:scipy.ndimage.tests.test_filters.res->scipy.ndimage.generic_filter(arr, func, size=(1, 1))
A:scipy.ndimage.tests.test_filters.res2->scipy.ndimage.generic_filter(arr, func, size=1)
A:scipy.ndimage.tests.test_filters.data->numpy.array([1, 2, 3, 4, 5], dtype=np.float64)
scipy.ndimage.tests.test_filters.test_orders_gauss()
scipy.ndimage.tests.test_filters.test_ticket_701()
scipy.ndimage.tests.test_filters.test_valid_origins()
scipy.ndimage.tests.test_test_orders_gauss()
scipy.ndimage.tests.test_test_ticket_701()
scipy.ndimage.tests.test_test_valid_origins()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/ndimage/tests/test_ndimage.py----------------------------------------
A:scipy.ndimage.tests.test_ndimage.array->numpy.array([[3, 2, 5, 1, 4], [7, 6, 9, 3, 5], [5, 8, 3, 7, 1]])
A:scipy.ndimage.tests.test_ndimage.weights->numpy.array([[0], [0], [0], [0], [0], [0], [0], [0], [1]])
A:scipy.ndimage.tests.test_ndimage.output->scipy.ndimage.black_tophat(array, footprint=footprint, structure=structure)
A:scipy.ndimage.tests.test_ndimage.kernel->numpy.array([2, 3])
A:scipy.ndimage.tests.test_ndimage.input->numpy.asarray(input)
A:scipy.ndimage.tests.test_ndimage.output1->scipy.ndimage.gaussian_filter(input, [1.0, 1.0], output=otype)
A:scipy.ndimage.tests.test_ndimage.output2->scipy.ndimage.gaussian_filter(input, 1.0, output=otype)
A:scipy.ndimage.tests.test_ndimage.t->scipy.ndimage.sobel(array, -1)
A:scipy.ndimage.tests.test_ndimage.tmp1->scipy.ndimage.grey_dilation(array, footprint=footprint, structure=structure)
A:scipy.ndimage.tests.test_ndimage.tmp2->scipy.ndimage.grey_erosion(array, footprint=footprint, structure=structure)
A:scipy.ndimage.tests.test_ndimage.tmp->scipy.ndimage.grey_closing(array, footprint=footprint, structure=structure)
A:scipy.ndimage.tests.test_ndimage.expected->scipy.ndimage.grey_erosion(tmp, footprint=footprint, structure=structure)
A:scipy.ndimage.tests.test_ndimage.filter_shape->numpy.array([2, 3])
A:scipy.ndimage.tests.test_ndimage.a->numpy.fft.ifft(a, shape[0], 0)
A:scipy.ndimage.tests.test_ndimage.r1->scipy.ndimage.correlate(a, filter_ * footprint)
A:scipy.ndimage.tests.test_ndimage.r2->scipy.ndimage.generic_filter(a, _filter_func, footprint=footprint, extra_arguments=(cf,), extra_keywords={'total': cf.sum()})
A:scipy.ndimage.tests.test_ndimage.filter_->numpy.array([[1.0, 2.0], [3.0, 4.0]])
A:scipy.ndimage.tests.test_ndimage.footprint->numpy.array([[1, 0], [0, 1]])
A:scipy.ndimage.tests.test_ndimage.cf->numpy.array([1.0, 4.0])
A:scipy.ndimage.tests.test_ndimage.data->numpy.array([[0, 1, 0, 0, 1, 1, 1, 0], [1, 1, 1, 0, 0, 0, 0, 0], [0, 1, 0, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0], [0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0]], type)
A:scipy.ndimage.tests.test_ndimage.out->scipy.ndimage.binary_hit_or_miss(data, struct1, struct2)
A:scipy.ndimage.tests.test_ndimage.filtered->scipy.ndimage.spline_filter(data, order=order)
A:scipy.ndimage.tests.test_ndimage.idx->numpy.indices(data.shape, numpy.float64)
A:scipy.ndimage.tests.test_ndimage.out1->scipy.ndimage.zoom(arr, (2, 1))
A:scipy.ndimage.tests.test_ndimage.out2->scipy.ndimage.zoom(arr, (1, 2))
A:scipy.ndimage.tests.test_ndimage.arr->numpy.zeros((1, 5, 5))
A:scipy.ndimage.tests.test_ndimage.err->numpy.seterr(invalid='ignore')
A:scipy.ndimage.tests.test_ndimage.ref->scipy.ndimage.distance_transform_bf(data, 'euclidean', sampling=[2, 1])
A:scipy.ndimage.tests.test_ndimage.data[:, :, i]->numpy.array([[0, 0, 0, 0], [0, 1, 1, 0], [0, 0, 0, 0]], dtype=numpy.float64)
A:scipy.ndimage.tests.test_ndimage.markers->numpy.array([[-1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], numpy.int8)
A:scipy.ndimage.tests.test_ndimage.data[...]->numpy.array([[0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 0, 0, 1, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], numpy.uint8)
A:scipy.ndimage.tests.test_ndimage.(out, ft)->scipy.ndimage.distance_transform_edt(data, return_indices=True)
A:scipy.ndimage.tests.test_ndimage.(tdt, tft)->scipy.ndimage.distance_transform_edt(data, return_indices=True)
A:scipy.ndimage.tests.test_ndimage.dt->numpy.zeros(data.shape, dtype=numpy.float64)
A:scipy.ndimage.tests.test_ndimage.ft->numpy.indices(data.shape, dtype=numpy.int32)
A:scipy.ndimage.tests.test_ndimage.(dt, ft)->scipy.ndimage.distance_transform_edt(data, return_indices=True)
A:scipy.ndimage.tests.test_ndimage.bf->scipy.ndimage.distance_transform_bf(data, 'euclidean')
A:scipy.ndimage.tests.test_ndimage.struct->scipy.ndimage.generate_binary_structure(2, 2)
A:scipy.ndimage.tests.test_ndimage.mask->numpy.array([[0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]], bool)
A:scipy.ndimage.tests.test_ndimage.self.array->numpy.array([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 1, 1, 0], [0, 0, 0, 0, 0]], dtype=numpy.uint8)
A:scipy.ndimage.tests.test_ndimage.self.sq3x3->numpy.ones((3, 3))
A:scipy.ndimage.tests.test_ndimage.dilated3x3->scipy.ndimage.binary_dilation(self.array, structure=self.sq3x3)
A:scipy.ndimage.tests.test_ndimage.self.dilated3x3->scipy.ndimage.binary_dilation(self.array, structure=self.sq3x3).view(numpy.uint8)
A:scipy.ndimage.tests.test_ndimage.result->scipy.ndimage.grey_dilation(self.array, size=3)
scipy.ndimage.tests.test_ndimage.TestDilateFix
scipy.ndimage.tests.test_ndimage.TestDilateFix.setUp(self)
scipy.ndimage.tests.test_ndimage.TestDilateFix.test_dilation_scalar_size(self)
scipy.ndimage.tests.test_ndimage.TestDilateFix.test_dilation_square_structure(self)
scipy.ndimage.tests.test_ndimage.TestNdimage
scipy.ndimage.tests.test_ndimage.TestNdimage.setUp(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_affine_transform01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_affine_transform02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_affine_transform03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_affine_transform04(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_affine_transform05(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_affine_transform06(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_affine_transform07(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_affine_transform08(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_affine_transform09(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_affine_transform10(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_affine_transform11(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_affine_transform12(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_affine_transform13(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_affine_transform14(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_affine_transform15(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_affine_transform16(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_affine_transform17(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_affine_transform18(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_affine_transform19(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_affine_transform20(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_affine_transform21(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_closing01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_closing02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation04(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation05(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation06(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation07(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation08(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation09(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation10(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation11(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation12(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation13(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation14(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation15(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation16(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation17(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation18(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation19(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation20(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation21(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation22(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation23(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation24(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation25(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation26(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation27(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation28(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation29(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation30(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation31(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation32(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation33(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation34(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_dilation35(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion04(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion05(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion06(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion07(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion08(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion09(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion10(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion11(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion12(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion13(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion14(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion15(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion16(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion17(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion18(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion19(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion20(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion21(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion22(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion23(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion24(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion25(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion26(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion27(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion28(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion29(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion30(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion31(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion32(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion33(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion34(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion35(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_erosion36(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_fill_holes01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_fill_holes02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_fill_holes03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_opening01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_opening02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_propagation01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_binary_propagation02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_black_tophat01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_black_tophat02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_boundaries(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_boundaries2(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate04(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate05(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate06(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate07(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate08(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate09(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate10(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate11(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate12(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate13(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate14(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate15(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate16(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate17(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate18(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate19(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate20(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate21(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate22(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate23(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate24(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_correlate25(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_distance_transform_bf01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_distance_transform_bf02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_distance_transform_bf03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_distance_transform_bf04(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_distance_transform_bf05(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_distance_transform_bf06(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_distance_transform_cdt01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_distance_transform_cdt02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_distance_transform_cdt03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_distance_transform_edt01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_distance_transform_edt02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_distance_transform_edt03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_distance_transform_edt4(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_distance_transform_edt5(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_extend01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_extend02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_extend03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_extend04(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_extend05(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_extend06(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_extend07(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_extend08(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_extend09(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_extend10(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_fourier_ellipsoid_complex01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_fourier_ellipsoid_real01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_fourier_gaussian_complex01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_fourier_gaussian_real01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_fourier_shift_complex01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_fourier_shift_real01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_fourier_uniform_complex01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_fourier_uniform_real01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_gauss01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_gauss02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_gauss03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_gauss04(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_gauss05(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_gauss06(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_gaussian_gradient_magnitude01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_gaussian_gradient_magnitude02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_gaussian_laplace01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_gaussian_laplace02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_generate_structure01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_generate_structure02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_generate_structure03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_generate_structure04(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_generic_filter01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_generic_filter1d01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_generic_gradient_magnitude01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_generic_laplace01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_geometric_transform01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_geometric_transform02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_geometric_transform03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_geometric_transform04(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_geometric_transform05(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_geometric_transform06(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_geometric_transform07(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_geometric_transform08(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_geometric_transform10(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_geometric_transform13(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_geometric_transform14(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_geometric_transform15(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_geometric_transform16(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_geometric_transform17(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_geometric_transform18(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_geometric_transform19(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_geometric_transform20(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_geometric_transform21(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_geometric_transform22(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_geometric_transform23(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_geometric_transform24(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_grey_closing01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_grey_closing02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_grey_dilation01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_grey_dilation02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_grey_dilation03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_grey_erosion01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_grey_erosion02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_grey_erosion03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_grey_opening01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_grey_opening02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_hit_or_miss01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_hit_or_miss02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_hit_or_miss03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_iterate_structure01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_iterate_structure02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_iterate_structure03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_laplace01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_laplace02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_map_coordinates01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_map_coordinates02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_maximum_filter01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_maximum_filter02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_maximum_filter03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_maximum_filter04(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_maximum_filter05(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_maximum_filter06(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_maximum_filter07(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_maximum_filter08(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_maximum_filter09(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_minimum_filter01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_minimum_filter02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_minimum_filter03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_minimum_filter04(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_minimum_filter05(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_minimum_filter06(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_minimum_filter07(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_minimum_filter08(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_minimum_filter09(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_morphological_gradient01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_morphological_gradient02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_morphological_laplace01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_morphological_laplace02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_prewitt01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_prewitt02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_prewitt03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_prewitt04(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rank01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rank02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rank03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rank04(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rank05(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rank06(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rank07(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rank08(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rank09(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rank10(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rank11(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rank12(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rank13(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rank14(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rotate01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rotate02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rotate03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rotate04(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rotate05(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rotate06(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rotate07(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_rotate08(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_shift01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_shift02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_shift03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_shift04(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_shift05(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_shift06(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_shift07(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_shift08(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_shift09(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_sobel01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_sobel02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_sobel03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_sobel04(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_spline01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_spline02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_spline03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_spline04(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_spline05(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_uniform01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_uniform02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_uniform03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_uniform04(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_uniform05(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_uniform06(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_watershed_ift01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_watershed_ift02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_watershed_ift03(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_watershed_ift04(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_watershed_ift05(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_watershed_ift06(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_watershed_ift07(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_white_tophat01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_white_tophat02(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_zoom1(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_zoom2(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_zoom3(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_zoom_affine01(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_zoom_infinity(self)
scipy.ndimage.tests.test_ndimage.TestNdimage.test_zoom_zoomfactor_one(self)
scipy.ndimage.tests.test_ndimage.sumsq(a,b)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/zeros.py----------------------------------------
A:scipy.optimize.zeros.results->RootResults(root=x, iterations=iterations, function_calls=funcalls, flag=flag)
A:scipy.optimize.zeros.fder->fprime(*myargs)
A:scipy.optimize.zeros.fval->func(*myargs)
A:scipy.optimize.zeros.fder2->fprime2(*myargs)
A:scipy.optimize.zeros.q0->func(*(p0,) + args)
A:scipy.optimize.zeros.q1->func(*(p1,) + args)
A:scipy.optimize.zeros.r->_zeros._brenth(f, a, b, xtol, maxiter, args, full_output, disp)
scipy.optimize.RootResults(self,root,iterations,function_calls,flag)
scipy.optimize.bisect(f,a,b,args=(),xtol=_xtol,rtol=_rtol,maxiter=_iter,full_output=False,disp=True)
scipy.optimize.brenth(f,a,b,args=(),xtol=_xtol,rtol=_rtol,maxiter=_iter,full_output=False,disp=True)
scipy.optimize.brentq(f,a,b,args=(),xtol=_xtol,rtol=_rtol,maxiter=_iter,full_output=False,disp=True)
scipy.optimize.newton(func,x0,fprime=None,args=(),tol=1.48e-08,maxiter=50,fprime2=None)
scipy.optimize.results_c(full_output,r)
scipy.optimize.ridder(f,a,b,args=(),xtol=_xtol,rtol=_rtol,maxiter=_iter,full_output=False,disp=True)
scipy.optimize.zeros.RootResults(self,root,iterations,function_calls,flag)
scipy.optimize.zeros.RootResults.__init__(self,root,iterations,function_calls,flag)
scipy.optimize.zeros.bisect(f,a,b,args=(),xtol=_xtol,rtol=_rtol,maxiter=_iter,full_output=False,disp=True)
scipy.optimize.zeros.brenth(f,a,b,args=(),xtol=_xtol,rtol=_rtol,maxiter=_iter,full_output=False,disp=True)
scipy.optimize.zeros.brentq(f,a,b,args=(),xtol=_xtol,rtol=_rtol,maxiter=_iter,full_output=False,disp=True)
scipy.optimize.zeros.newton(func,x0,fprime=None,args=(),tol=1.48e-08,maxiter=50,fprime2=None)
scipy.optimize.zeros.results_c(full_output,r)
scipy.optimize.zeros.ridder(f,a,b,args=(),xtol=_xtol,rtol=_rtol,maxiter=_iter,full_output=False,disp=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/anneal.py----------------------------------------
A:scipy.optimize.anneal.self.lower->where(self.lower == numpy.NINF, -_double_max, self.lower)
A:scipy.optimize.anneal.self.upper->where(self.upper == numpy.PINF, _double_max, self.upper)
A:scipy.optimize.anneal.fval->func(x0, *args)
A:scipy.optimize.anneal.best_state.x->last_state.x.copy()
A:scipy.optimize.anneal.p->exp(-dE * 1.0 / self.boltzmann / T)
A:scipy.optimize.anneal.x0->eval(schedule + '_sa()').getstart_temp(best_state)
A:scipy.optimize.anneal.u->squeeze(random.uniform(0.0, 1.0, size=self.dims))
A:scipy.optimize.anneal.numbers->squeeze(random.uniform(-pi / 2, pi / 2, size=self.dims))
A:scipy.optimize.anneal.std->minimum(sqrt(self.T) * ones(self.dims), (self.upper - self.lower) / 3.0 / self.learn_rate)
A:scipy.optimize.anneal.xc->squeeze(random.normal(0, 1.0, size=self.dims))
A:scipy.optimize.anneal.res->_minimize_anneal(func, x0, args, **opts)
A:scipy.optimize.anneal.lower->asarray(lower)
A:scipy.optimize.anneal.upper->asarray(upper)
A:scipy.optimize.anneal.schedule->eval(schedule + '_sa()')
A:scipy.optimize.anneal.last_state.x->current_state.x.copy()
A:scipy.optimize.anneal.current_state.x->eval(schedule + '_sa()').update_guess(last_state.x)
A:scipy.optimize.anneal.current_state.cost->func(current_state.x, *args)
A:scipy.optimize.anneal.result->Result(x=best_state.x, fun=best_state.cost, T=schedule.T, nfev=schedule.feval, nit=iters, accept=schedule.accepted, status=retval, success=retval <= 1, message={0: 'Points no longer changing', 1: 'Cooled to final temperature', 2: 'Maximum function evaluations', 3: 'Maximum cooling iterations reached', 4: 'Maximum accepted query locations reached', 5: 'Final point not the minimum amongst encountered points'}[retval])
scipy.optimize._minimize_anneal(func,x0,args=(),schedule='fast',T0=None,Tf=1e-12,maxfev=None,maxaccept=None,maxiter=400,boltzmann=1.0,learn_rate=0.5,ftol=1e-06,quench=1.0,m=1.0,n=1.0,lower=-100,upper=100,dwell=50,disp=False,**unknown_options)
scipy.optimize._state(self)
scipy.optimize.anneal(func,x0,args=(),schedule='fast',full_output=0,T0=None,Tf=1e-12,maxeval=None,maxaccept=None,maxiter=400,boltzmann=1.0,learn_rate=0.5,feps=1e-06,quench=1.0,m=1.0,n=1.0,lower=-100,upper=100,dwell=50,disp=True)
scipy.optimize.anneal._minimize_anneal(func,x0,args=(),schedule='fast',T0=None,Tf=1e-12,maxfev=None,maxaccept=None,maxiter=400,boltzmann=1.0,learn_rate=0.5,ftol=1e-06,quench=1.0,m=1.0,n=1.0,lower=-100,upper=100,dwell=50,disp=False,**unknown_options)
scipy.optimize.anneal._state(self)
scipy.optimize.anneal._state.__init__(self)
scipy.optimize.anneal.anneal(func,x0,args=(),schedule='fast',full_output=0,T0=None,Tf=1e-12,maxeval=None,maxaccept=None,maxiter=400,boltzmann=1.0,learn_rate=0.5,feps=1e-06,quench=1.0,m=1.0,n=1.0,lower=-100,upper=100,dwell=50,disp=True)
scipy.optimize.anneal.base_schedule(self)
scipy.optimize.anneal.base_schedule.__init__(self)
scipy.optimize.anneal.base_schedule.accept_test(self,dE)
scipy.optimize.anneal.base_schedule.getstart_temp(self,best_state)
scipy.optimize.anneal.base_schedule.init(self,**options)
scipy.optimize.anneal.base_schedule.update_guess(self,x0)
scipy.optimize.anneal.base_schedule.update_temp(self,x0)
scipy.optimize.anneal.boltzmann_sa(base_schedule)
scipy.optimize.anneal.boltzmann_sa.update_guess(self,x0)
scipy.optimize.anneal.boltzmann_sa.update_temp(self)
scipy.optimize.anneal.cauchy_sa(base_schedule)
scipy.optimize.anneal.cauchy_sa.update_guess(self,x0)
scipy.optimize.anneal.cauchy_sa.update_temp(self)
scipy.optimize.anneal.fast_sa(base_schedule)
scipy.optimize.anneal.fast_sa.init(self,**options)
scipy.optimize.anneal.fast_sa.update_guess(self,x0)
scipy.optimize.anneal.fast_sa.update_temp(self)
scipy.optimize.base_schedule(self)
scipy.optimize.base_schedule.accept_test(self,dE)
scipy.optimize.base_schedule.getstart_temp(self,best_state)
scipy.optimize.base_schedule.init(self,**options)
scipy.optimize.base_schedule.update_guess(self,x0)
scipy.optimize.base_schedule.update_temp(self,x0)
scipy.optimize.boltzmann_sa(base_schedule)
scipy.optimize.boltzmann_sa.update_guess(self,x0)
scipy.optimize.boltzmann_sa.update_temp(self)
scipy.optimize.cauchy_sa(base_schedule)
scipy.optimize.cauchy_sa.update_guess(self,x0)
scipy.optimize.cauchy_sa.update_temp(self)
scipy.optimize.fast_sa(base_schedule)
scipy.optimize.fast_sa.init(self,**options)
scipy.optimize.fast_sa.update_guess(self,x0)
scipy.optimize.fast_sa.update_temp(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/minpack.py----------------------------------------
A:scipy.optimize.minpack.res->leastsq(func, p0, args=args, full_output=1, **kw)
A:scipy.optimize.minpack.func_name->getattr(thefunc, '__name__', None)
A:scipy.optimize.minpack.dt->dtype(float)
A:scipy.optimize.minpack.info->dict(((k, res.get(k)) for k in ('nfev', 'njev', 'fjac', 'r', 'qtf') if k in res))
A:scipy.optimize.minpack.x0->asarray(x0)
A:scipy.optimize.minpack.n->len(x)
A:scipy.optimize.minpack.(shape, dtype)->_check_func('leastsq', 'func', func, x0, args, n)
A:scipy.optimize.minpack.epsfcn->sqrt(finfo(dtype).eps)
A:scipy.optimize.minpack.retval->_minpack._lmder(func, Dfun, x0, args, full_output, col_deriv, ftol, xtol, gtol, maxfev, factor, diag)
A:scipy.optimize.minpack.info['fun']->dict(((k, res.get(k)) for k in ('nfev', 'njev', 'fjac', 'r', 'qtf') if k in res)).pop('fvec')
A:scipy.optimize.minpack.sol->Result(x=x, success=status == 1, status=status)
A:scipy.optimize.minpack.perm->take(eye(n), retval[1]['ipvt'] - 1, 0)
A:scipy.optimize.minpack.r->triu(transpose(retval[1]['fjac'])[:n, :])
A:scipy.optimize.minpack.R->dot(r, perm)
A:scipy.optimize.minpack.cov_x->inv(dot(transpose(R), R))
A:scipy.optimize.minpack.(args, varargs, varkw, defaults)->inspect.getargspec(f)
A:scipy.optimize.minpack.p0->array([p0])
A:scipy.optimize.minpack.return_full->kw.pop('full_output', False)
A:scipy.optimize.minpack.x->x.reshape((n,)).reshape((n,))
A:scipy.optimize.minpack.fvec->fvec.reshape((m,)).reshape((m,))
A:scipy.optimize.minpack.m->len(fvec)
A:scipy.optimize.minpack.fjac->transpose(fjac)
A:scipy.optimize.minpack.xp->zeros((n,), float)
A:scipy.optimize.minpack.err->zeros((m,), float)
A:scipy.optimize.minpack.fvecp->fvecp.reshape((m,)).reshape((m,))
A:scipy.optimize.minpack.good->product(greater(err, 0.5), axis=0)
A:scipy.optimize.minpack.p1->func(p0, *args)
A:scipy.optimize.minpack.p2->func(p1, *args)
A:scipy.optimize.minpack.p->where(d == 0, p2, p0 - (p1 - p0) * (p1 - p0) / d)
A:scipy.optimize.minpack.relerr->where(p0 == 0, p, (p - p0) / p0)
scipy.optimize._check_func(checker,argname,thefunc,x0,args,numinputs,output_shape=None)
scipy.optimize._general_function(params,xdata,ydata,function)
scipy.optimize._root_hybr(func,x0,args=(),jac=None,col_deriv=0,xtol=1.49012e-08,maxfev=0,band=None,eps=None,factor=100,diag=None,full_output=0,**unknown_options)
scipy.optimize._weighted_general_function(params,xdata,ydata,function,weights)
scipy.optimize.check_gradient(fcn,Dfcn,x0,args=(),col_deriv=0)
scipy.optimize.curve_fit(f,xdata,ydata,p0=None,sigma=None,**kw)
scipy.optimize.fixed_point(func,x0,args=(),xtol=1e-08,maxiter=500)
scipy.optimize.fsolve(func,x0,args=(),fprime=None,full_output=0,col_deriv=0,xtol=1.49012e-08,maxfev=0,band=None,epsfcn=None,factor=100,diag=None)
scipy.optimize.leastsq(func,x0,args=(),Dfun=None,full_output=0,col_deriv=0,ftol=1.49012e-08,xtol=1.49012e-08,gtol=0.0,maxfev=0,epsfcn=None,factor=100,diag=None)
scipy.optimize.minpack._check_func(checker,argname,thefunc,x0,args,numinputs,output_shape=None)
scipy.optimize.minpack._general_function(params,xdata,ydata,function)
scipy.optimize.minpack._root_hybr(func,x0,args=(),jac=None,col_deriv=0,xtol=1.49012e-08,maxfev=0,band=None,eps=None,factor=100,diag=None,full_output=0,**unknown_options)
scipy.optimize.minpack._weighted_general_function(params,xdata,ydata,function,weights)
scipy.optimize.minpack.check_gradient(fcn,Dfcn,x0,args=(),col_deriv=0)
scipy.optimize.minpack.curve_fit(f,xdata,ydata,p0=None,sigma=None,**kw)
scipy.optimize.minpack.fixed_point(func,x0,args=(),xtol=1e-08,maxiter=500)
scipy.optimize.minpack.fsolve(func,x0,args=(),fprime=None,full_output=0,col_deriv=0,xtol=1.49012e-08,maxfev=0,band=None,epsfcn=None,factor=100,diag=None)
scipy.optimize.minpack.leastsq(func,x0,args=(),Dfun=None,full_output=0,col_deriv=0,ftol=1.49012e-08,xtol=1.49012e-08,gtol=0.0,maxfev=0,epsfcn=None,factor=100,diag=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/optimize.py----------------------------------------
A:scipy.optimize.optimize.self.x->numpy.asarray(x).copy()
A:scipy.optimize.optimize.fg->self.fun(x, *args)
A:scipy.optimize.optimize.msg->', '.join(map(str, unknown_options.keys()))
A:scipy.optimize.optimize._epsilon->sqrt(numpy.finfo(float).eps)
A:scipy.optimize.optimize.x->fmin_ncg(rosen, x0, rosen_der, fhess=rosen_hess, maxiter=80)
A:scipy.optimize.optimize.der->numpy.zeros_like(x)
A:scipy.optimize.optimize.diagonal->numpy.zeros(len(x), dtype=x.dtype)
A:scipy.optimize.optimize.Hp->numpy.zeros(len(x), dtype=x.dtype)
A:scipy.optimize.optimize.res->_minimize_powell(func, x0, args, callback=callback, **opts)
A:scipy.optimize.optimize.(fcalls, func)->wrap_function(func, args)
A:scipy.optimize.optimize.x0->asarray(x0).flatten()
A:scipy.optimize.optimize.N->len(ranges)
A:scipy.optimize.optimize.rank->len(x.shape)
A:scipy.optimize.optimize.one2np1->list(range(1, N + 1))
A:scipy.optimize.optimize.sim->numpy.take(sim, ind, 0)
A:scipy.optimize.optimize.fsim->numpy.take(fsim, ind, 0)
A:scipy.optimize.optimize.fsim[0]->func(x0)
A:scipy.optimize.optimize.y->numpy.array(x0, copy=True)
A:scipy.optimize.optimize.f->func(y)
A:scipy.optimize.optimize.ind->numpy.argsort(fsim)
A:scipy.optimize.optimize.fxr->func(xr)
A:scipy.optimize.optimize.fxe->func(xe)
A:scipy.optimize.optimize.fxc->func(xc)
A:scipy.optimize.optimize.fxcc->func(xcc)
A:scipy.optimize.optimize.fsim[j]->func(sim[j])
A:scipy.optimize.optimize.fval->squeeze(func(x))
A:scipy.optimize.optimize.result->Result(fun=fval, direc=direc, nit=iter, nfev=fcalls[0], status=warnflag, success=warnflag == 0, message=msg, x=x)
A:scipy.optimize.optimize.f0->f(*(xk,) + args)
A:scipy.optimize.optimize.grad->numpy.zeros((len(xk),), float)
A:scipy.optimize.optimize.ei->numpy.zeros((len(xk),), float)
A:scipy.optimize.optimize.f2->func(*(x2,) + args)
A:scipy.optimize.optimize.f1->func(*(x1,) + args)
A:scipy.optimize.optimize.(func_calls, f)->wrap_function(f, args)
A:scipy.optimize.optimize.(grad_calls, myfprime)->wrap_function(fprime, args)
A:scipy.optimize.optimize.gfk->myfprime(x0)
A:scipy.optimize.optimize.I->numpy.eye(N, dtype=int)
A:scipy.optimize.optimize.old_fval->f(x0)
A:scipy.optimize.optimize.gnorm->vecnorm(gfk, ord=norm)
A:scipy.optimize.optimize.(alpha_k, fc, gc, old_fval2, old_old_fval2, gfkp1)->line_search_wolfe1(f, myfprime, xk, pk, gfk, old_fval, old_old_fval)
A:scipy.optimize.optimize.(alpha_k, fc, gc, old_fval, old_old_fval, gfkp1)->line_search_wolfe2(f, myfprime, xk, pk, gfk, old_fval_backup, old_old_fval_backup)
A:scipy.optimize.optimize.gfkp1->myfprime(xk)
A:scipy.optimize.optimize.deltak->numpy.dot(gfk, gfk)
A:scipy.optimize.optimize.beta_k->max(0, numpy.dot(yk, gfkp1) / deltak)
A:scipy.optimize.optimize.(fcalls, f)->wrap_function(f, args)
A:scipy.optimize.optimize.(gcalls, fprime)->wrap_function(fprime, args)
A:scipy.optimize.optimize.maggrad->numpy.add.reduce(numpy.abs(b))
A:scipy.optimize.optimize.eta->numpy.min([0.5, numpy.sqrt(maggrad)])
A:scipy.optimize.optimize.xsupi->zeros(len(x0), dtype=x0.dtype)
A:scipy.optimize.optimize.dri0->numpy.dot(ri, ri)
A:scipy.optimize.optimize.A->fhess(*(xk,) + args)
A:scipy.optimize.optimize.Ap->asarray(Ap).squeeze()
A:scipy.optimize.optimize.curv->numpy.dot(psupi, Ap)
A:scipy.optimize.optimize.dri1->numpy.dot(ri, ri)
A:scipy.optimize.optimize.(alphak, fc, gc, old_fval)->line_search_BFGS(f, xk, pk, gfk, old_fval)
A:scipy.optimize.optimize.sqrt_eps->sqrt(2.2e-16)
A:scipy.optimize.optimize.fx->func(x, *args)
A:scipy.optimize.optimize.q->numpy.abs(q)
A:scipy.optimize.optimize.fu->func(*(u,) + self.args)
A:scipy.optimize.optimize.(xa, xb, xc, fa, fb, fc, funcalls)->bracket(func, xa=brack[0], xb=brack[1], args=args)
A:scipy.optimize.optimize.fa->func(*(xa,) + args)
A:scipy.optimize.optimize.fb->func(*(xb,) + args)
A:scipy.optimize.optimize.fc->func(*(xc,) + args)
A:scipy.optimize.optimize.fwfvfx->func(*(x,) + self.args)
A:scipy.optimize.optimize.tmp2->numpy.abs(tmp2)
A:scipy.optimize.optimize.brent->Brent(func=func, args=args, tol=tol, full_output=True, maxiter=maxiter)
A:scipy.optimize.optimize.(x, fval, nit, nfev)->Brent(func=func, args=args, tol=tol, full_output=True, maxiter=maxiter).get_result(full_output=True)
A:scipy.optimize.optimize.fw->func(*(w,) + args)
A:scipy.optimize.optimize.(alpha_min, fret, iter, num)->brent(myfunc, full_output=1, tol=tol)
A:scipy.optimize.optimize.direc->asarray(direc, dtype=float)
A:scipy.optimize.optimize.x1->fmin_ncg(rosen, x0, rosen_der, fhess=rosen_hess, maxiter=80).copy()
A:scipy.optimize.optimize.ilist->list(range(N))
A:scipy.optimize.optimize.(fval, x, direc1)->_linesearch_powell(func, x, direc1, tol=xtol * 100)
A:scipy.optimize.optimize.fx2->squeeze(func(x2))
A:scipy.optimize.optimize.lrange->list(ranges)
A:scipy.optimize.optimize.lrange[k]->slice(*lrange[k])
A:scipy.optimize.optimize.params->squeeze(asarray(params))
A:scipy.optimize.optimize.vecfunc->vectorize(_scalarfunc)
A:scipy.optimize.optimize.Jout->vecfunc(*grid)
A:scipy.optimize.optimize.Nshape->shape(Jout)
A:scipy.optimize.optimize.indx->argmin(Jout.ravel(), axis=-1)
A:scipy.optimize.optimize.Nindx->zeros(N, int)
A:scipy.optimize.optimize.xmin->zeros(N, float)
A:scipy.optimize.optimize.vals->finish(func, xmin, args=args, full_output=1, disp=disp)
A:scipy.optimize.optimize.solver->solver.lower().lower()
A:scipy.optimize.optimize.start->time.time()
scipy.Brent(self,func,args=(),tol=1.48e-08,maxiter=500,full_output=0)
scipy.Brent.get_bracket_info(self)
scipy.Brent.get_result(self,full_output=False)
scipy.Brent.optimize(self)
scipy.Brent.set_bracket(self,brack=None)
scipy.MemoizeJac(self,fun)
scipy.MemoizeJac.derivative(self,x,*args)
scipy.OptimizeWarning(UserWarning)
scipy.Result(dict)
scipy.Result.__getattr__(self,name)
scipy.Result.__repr__(self)
scipy._check_unknown_options(unknown_options)
scipy._endprint(x,flag,fval,maxfun,xtol,disp)
scipy._linesearch_powell(func,p,xi,tol=0.001)
scipy._minimize_bfgs(fun,x0,args=(),jac=None,callback=None,gtol=1e-05,norm=Inf,eps=_epsilon,maxiter=None,disp=False,return_all=False,**unknown_options)
scipy._minimize_cg(fun,x0,args=(),jac=None,callback=None,gtol=1e-05,norm=Inf,eps=_epsilon,maxiter=None,disp=False,return_all=False,**unknown_options)
scipy._minimize_neldermead(func,x0,args=(),callback=None,xtol=0.0001,ftol=0.0001,maxiter=None,maxfev=None,disp=False,return_all=False,**unknown_options)
scipy._minimize_newtoncg(fun,x0,args=(),jac=None,hess=None,hessp=None,callback=None,xtol=1e-05,eps=_epsilon,maxiter=None,disp=False,return_all=False,**unknown_options)
scipy._minimize_powell(func,x0,args=(),callback=None,xtol=0.0001,ftol=0.0001,maxiter=None,maxfev=None,disp=False,direc=None,return_all=False,**unknown_options)
scipy._minimize_scalar_bounded(func,bounds,args=(),xtol=1e-05,maxiter=500,disp=0,**unknown_options)
scipy._minimize_scalar_brent(func,brack=None,args=(),xtol=1.48e-08,maxiter=500,**unknown_options)
scipy._minimize_scalar_golden(func,brack=None,args=(),xtol=_epsilon,**unknown_options)
scipy.approx_fhess_p(x0,p,fprime,epsilon,*args)
scipy.approx_fprime(xk,f,epsilon,*args)
scipy.bracket(func,xa=0.0,xb=1.0,args=(),grow_limit=110.0,maxiter=1000)
scipy.brent(func,args=(),brack=None,tol=1.48e-08,full_output=0,maxiter=500)
scipy.brute(func,ranges,args=(),Ns=20,full_output=0,finish=fmin,disp=False)
scipy.check_grad(func,grad,x0,*args)
scipy.fmin(func,x0,args=(),xtol=0.0001,ftol=0.0001,maxiter=None,maxfun=None,full_output=0,disp=1,retall=0,callback=None)
scipy.fmin_bfgs(f,x0,fprime=None,args=(),gtol=1e-05,norm=Inf,epsilon=_epsilon,maxiter=None,full_output=0,disp=1,retall=0,callback=None)
scipy.fmin_cg(f,x0,fprime=None,args=(),gtol=1e-05,norm=Inf,epsilon=_epsilon,maxiter=None,full_output=0,disp=1,retall=0,callback=None)
scipy.fmin_ncg(f,x0,fprime,fhess_p=None,fhess=None,args=(),avextol=1e-05,epsilon=_epsilon,maxiter=None,full_output=0,disp=1,retall=0,callback=None)
scipy.fmin_powell(func,x0,args=(),xtol=0.0001,ftol=0.0001,maxiter=None,maxfun=None,full_output=0,disp=1,retall=0,callback=None,direc=None)
scipy.fminbound(func,x1,x2,args=(),xtol=1e-05,maxfun=500,full_output=0,disp=1)
scipy.golden(func,args=(),brack=None,tol=_epsilon,full_output=0)
scipy.is_array_scalar(x)
scipy.main()
scipy.optimize.optimize.Brent(self,func,args=(),tol=1.48e-08,maxiter=500,full_output=0)
scipy.optimize.optimize.Brent.__init__(self,func,args=(),tol=1.48e-08,maxiter=500,full_output=0)
scipy.optimize.optimize.Brent.get_bracket_info(self)
scipy.optimize.optimize.Brent.get_result(self,full_output=False)
scipy.optimize.optimize.Brent.optimize(self)
scipy.optimize.optimize.Brent.set_bracket(self,brack=None)
scipy.optimize.optimize.MemoizeJac(self,fun)
scipy.optimize.optimize.MemoizeJac.__init__(self,fun)
scipy.optimize.optimize.MemoizeJac.derivative(self,x,*args)
scipy.optimize.optimize.OptimizeWarning(UserWarning)
scipy.optimize.optimize.Result(dict)
scipy.optimize.optimize.Result.__getattr__(self,name)
scipy.optimize.optimize.Result.__repr__(self)
scipy.optimize.optimize._check_unknown_options(unknown_options)
scipy.optimize.optimize._endprint(x,flag,fval,maxfun,xtol,disp)
scipy.optimize.optimize._linesearch_powell(func,p,xi,tol=0.001)
scipy.optimize.optimize._minimize_bfgs(fun,x0,args=(),jac=None,callback=None,gtol=1e-05,norm=Inf,eps=_epsilon,maxiter=None,disp=False,return_all=False,**unknown_options)
scipy.optimize.optimize._minimize_cg(fun,x0,args=(),jac=None,callback=None,gtol=1e-05,norm=Inf,eps=_epsilon,maxiter=None,disp=False,return_all=False,**unknown_options)
scipy.optimize.optimize._minimize_neldermead(func,x0,args=(),callback=None,xtol=0.0001,ftol=0.0001,maxiter=None,maxfev=None,disp=False,return_all=False,**unknown_options)
scipy.optimize.optimize._minimize_newtoncg(fun,x0,args=(),jac=None,hess=None,hessp=None,callback=None,xtol=1e-05,eps=_epsilon,maxiter=None,disp=False,return_all=False,**unknown_options)
scipy.optimize.optimize._minimize_powell(func,x0,args=(),callback=None,xtol=0.0001,ftol=0.0001,maxiter=None,maxfev=None,disp=False,direc=None,return_all=False,**unknown_options)
scipy.optimize.optimize._minimize_scalar_bounded(func,bounds,args=(),xtol=1e-05,maxiter=500,disp=0,**unknown_options)
scipy.optimize.optimize._minimize_scalar_brent(func,brack=None,args=(),xtol=1.48e-08,maxiter=500,**unknown_options)
scipy.optimize.optimize._minimize_scalar_golden(func,brack=None,args=(),xtol=_epsilon,**unknown_options)
scipy.optimize.optimize.approx_fhess_p(x0,p,fprime,epsilon,*args)
scipy.optimize.optimize.approx_fprime(xk,f,epsilon,*args)
scipy.optimize.optimize.bracket(func,xa=0.0,xb=1.0,args=(),grow_limit=110.0,maxiter=1000)
scipy.optimize.optimize.brent(func,args=(),brack=None,tol=1.48e-08,full_output=0,maxiter=500)
scipy.optimize.optimize.brute(func,ranges,args=(),Ns=20,full_output=0,finish=fmin,disp=False)
scipy.optimize.optimize.check_grad(func,grad,x0,*args)
scipy.optimize.optimize.fmin(func,x0,args=(),xtol=0.0001,ftol=0.0001,maxiter=None,maxfun=None,full_output=0,disp=1,retall=0,callback=None)
scipy.optimize.optimize.fmin_bfgs(f,x0,fprime=None,args=(),gtol=1e-05,norm=Inf,epsilon=_epsilon,maxiter=None,full_output=0,disp=1,retall=0,callback=None)
scipy.optimize.optimize.fmin_cg(f,x0,fprime=None,args=(),gtol=1e-05,norm=Inf,epsilon=_epsilon,maxiter=None,full_output=0,disp=1,retall=0,callback=None)
scipy.optimize.optimize.fmin_ncg(f,x0,fprime,fhess_p=None,fhess=None,args=(),avextol=1e-05,epsilon=_epsilon,maxiter=None,full_output=0,disp=1,retall=0,callback=None)
scipy.optimize.optimize.fmin_powell(func,x0,args=(),xtol=0.0001,ftol=0.0001,maxiter=None,maxfun=None,full_output=0,disp=1,retall=0,callback=None,direc=None)
scipy.optimize.optimize.fminbound(func,x1,x2,args=(),xtol=1e-05,maxfun=500,full_output=0,disp=1)
scipy.optimize.optimize.golden(func,args=(),brack=None,tol=_epsilon,full_output=0)
scipy.optimize.optimize.is_array_scalar(x)
scipy.optimize.optimize.main()
scipy.optimize.optimize.rosen(x)
scipy.optimize.optimize.rosen_der(x)
scipy.optimize.optimize.rosen_hess(x)
scipy.optimize.optimize.rosen_hess_prod(x,p)
scipy.optimize.optimize.show_options(solver,method=None)
scipy.optimize.optimize.vecnorm(x,ord=2)
scipy.optimize.optimize.wrap_function(function,args)
scipy.rosen(x)
scipy.rosen_der(x)
scipy.rosen_hess(x)
scipy.rosen_hess_prod(x,p)
scipy.show_options(solver,method=None)
scipy.vecnorm(x,ord=2)
scipy.wrap_function(function,args)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/_tstutils.py----------------------------------------
scipy._tstutils.f1(x)
scipy._tstutils.f2(x)
scipy._tstutils.f3(x)
scipy._tstutils.f4(x)
scipy._tstutils.f5(x)
scipy._tstutils.f6(x)
scipy.optimize._tstutils.f1(x)
scipy.optimize._tstutils.f2(x)
scipy.optimize._tstutils.f3(x)
scipy.optimize._tstutils.f4(x)
scipy.optimize._tstutils.f5(x)
scipy.optimize._tstutils.f6(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/nonlin.py----------------------------------------
A:scipy.optimize.nonlin.x->_as_inexact(x0).flatten()
A:scipy.optimize.nonlin.wrap->getattr(x0, '__array_wrap__', x.__array_wrap__)
A:scipy.optimize.nonlin._doc_parts->dict(params_basic='\n    F : function(x) -> f\n        Function whose root to find; should take and return an array-like\n        object.\n    x0 : array_like\n        Initial guess for the solution\n    '.strip(), params_extra="\n    iter : int, optional\n        Number of iterations to make. If omitted (default), make as many\n        as required to meet tolerances.\n    verbose : bool, optional\n        Print status to stdout on every iteration.\n    maxiter : int, optional\n        Maximum number of iterations to make. If more are needed to\n        meet convergence, `NoConvergence` is raised.\n    f_tol : float, optional\n        Absolute tolerance (in max-norm) for the residual.\n        If omitted, default is 6e-6.\n    f_rtol : float, optional\n        Relative tolerance for the residual. If omitted, not used.\n    x_tol : float, optional\n        Absolute minimum step size, as determined from the Jacobian\n        approximation. If the step size is smaller than this, optimization\n        is terminated as successful. If omitted, not used.\n    x_rtol : float, optional\n        Relative minimum step size. If omitted, not used.\n    tol_norm : function(vector) -> scalar, optional\n        Norm to use in convergence check. Default is the maximum norm.\n    line_search : {None, 'armijo' (default), 'wolfe'}, optional\n        Which type of a line search to use to determine the step size in the\n        direction given by the Jacobian approximation. Defaults to 'armijo'.\n    callback : function, optional\n        Optional callback function. It is called on every iteration as\n        ``callback(x, f)`` where `x` is the current solution and `f`\n        the corresponding residual.\n\n    Returns\n    -------\n    sol : ndarray\n        An array (of similar array type as `x0`) containing the final solution.\n\n    Raises\n    ------\n    NoConvergence\n        When a solution was not found.\n\n    ".strip())
A:scipy.optimize.nonlin.condition->TerminationCondition(f_tol=f_tol, f_rtol=f_rtol, x_tol=x_tol, x_rtol=x_rtol, iter=iter, norm=tol_norm)
A:scipy.optimize.nonlin.x0->_as_inexact(x0)
A:scipy.optimize.nonlin.Fx->func(x)
A:scipy.optimize.nonlin.Fx_norm->norm(Fx)
A:scipy.optimize.nonlin.jacobian->asjacobian(jacobian)
A:scipy.optimize.nonlin.status->TerminationCondition(f_tol=f_tol, f_rtol=f_rtol, x_tol=x_tol, x_rtol=x_rtol, iter=iter, norm=tol_norm).check(Fx, x, dx)
A:scipy.optimize.nonlin.tol->min(eta, eta * Fx_norm)
A:scipy.optimize.nonlin.(s, x, Fx, Fx_norm_new)->_nonlin_line_search(func, x, Fx, dx, line_search)
A:scipy.optimize.nonlin.Fx_norm_new->norm(Fx)
A:scipy.optimize.nonlin.eta->min(eta_max, max(eta_A, gamma * eta ** 2))
A:scipy.optimize.nonlin.v->self.Gm.rmatvec(dx)
A:scipy.optimize.nonlin.(s, phi1, phi0)->scalar_search_wolfe1(phi, derphi, tmp_phi[0], xtol=0.01, amin=smin)
A:scipy.optimize.nonlin.(s, phi1)->scalar_search_armijo(phi, tmp_phi[0], -tmp_phi[0], amin=smin)
A:scipy.optimize.nonlin.f_norm->self.norm(f)
A:scipy.optimize.nonlin.x_norm->self.norm(x)
A:scipy.optimize.nonlin.dx_norm->self.norm(dx)
A:scipy.optimize.nonlin.J->numpy.atleast_2d(np.asarray(J))
A:scipy.optimize.nonlin.m->len(self.cs)
A:scipy.optimize.nonlin.(axpy, scal, dotc)->get_blas_funcs(['axpy', 'scal', 'dotc'], cs[:1] + [v])
A:scipy.optimize.nonlin.a->numpy.zeros((n, n), dtype=f.dtype)
A:scipy.optimize.nonlin.w->axpy(c, w, w.size, -qc)
A:scipy.optimize.nonlin.(axpy, dotc)->get_blas_funcs(['axpy', 'dotc'], cs[:1] + [v])
A:scipy.optimize.nonlin.q->max(0, min(q, p - 1))
A:scipy.optimize.nonlin.q[j]->dotc(d, v)
A:scipy.optimize.nonlin.self.collapsed->numpy.array(self)
A:scipy.optimize.nonlin.p->min(p, len(self.cs[0]))
A:scipy.optimize.nonlin.(D, R)->qr(D, mode='economic')
A:scipy.optimize.nonlin.C->dot(C, inv(WH))
A:scipy.optimize.nonlin.(U, S, WH)->svd(C, full_matrices=False, compute_uv=True)
A:scipy.optimize.nonlin.D->dot(D, WH.T.conj())
A:scipy.optimize.nonlin.self.cs[k]->C[:, k].copy()
A:scipy.optimize.nonlin.self.ds[k]->D[:, k].copy()
A:scipy.optimize.nonlin._doc_parts['broyden_params']->'\n    alpha : float, optional\n        Initial guess for the Jacobian is ``(-1/alpha)``.\n    reduction_method : str or tuple, optional\n        Method used in ensuring that the rank of the Broyden matrix\n        stays low. Can either be a string giving the name of the method,\n        or a tuple of the form ``(method, param1, param2, ...)``\n        that gives the name of the method and values for additional parameters.\n\n        Methods available:\n\n            - ``restart``: drop all matrix columns. Has no extra parameters.\n            - ``simple``: drop oldest matrix column. Has no extra parameters.\n            - ``svd``: keep only the most significant SVD components.\n              Takes an extra parameter, ``to_retain`, which determines the\n              number of SVD components to retain when rank reduction is done.\n              Default is ``max_rank - 2``.\n\n    max_rank : int, optional\n        Maximum rank for the Broyden matrix.\n        Default is infinity (ie., no rank reduction).\n    '.strip()
A:scipy.optimize.nonlin.self.Gm->LowRankMatrix(-self.alpha, self.shape[0], self.dtype)
A:scipy.optimize.nonlin.r->self.Gm.matvec(f)
A:scipy.optimize.nonlin.n->len(self.dx)
A:scipy.optimize.nonlin.df_f->numpy.empty(n, dtype=f.dtype)
A:scipy.optimize.nonlin.df_f[k]->vdot(self.df[k], f)
A:scipy.optimize.nonlin.gamma->solve(b, df_f)
A:scipy.optimize.nonlin.b->numpy.empty((n, n), dtype=f.dtype)
A:scipy.optimize.nonlin.b[i, j]->vdot(self.df[i], self.dx[j])
A:scipy.optimize.nonlin.self.method->dict(bicgstab=scipy.sparse.linalg.bicgstab, gmres=scipy.sparse.linalg.gmres, lgmres=scipy.sparse.linalg.lgmres, cgs=scipy.sparse.linalg.cgs, minres=scipy.sparse.linalg.minres).get(method, method)
A:scipy.optimize.nonlin.self.method_kw->dict(maxiter=inner_maxiter, M=self.preconditioner)
A:scipy.optimize.nonlin.mx->abs(self.x0).max()
A:scipy.optimize.nonlin.mf->abs(self.f0).max()
A:scipy.optimize.nonlin.nv->norm(v)
A:scipy.optimize.nonlin.(sol, info)->self.method(self.op, rhs, tol=tol, **self.method_kw)
A:scipy.optimize.nonlin.self.op->scipy.sparse.linalg.aslinearoperator(self)
A:scipy.optimize.nonlin.(args, varargs, varkw, defaults)->inspect.getargspec(jac.__init__)
A:scipy.optimize.nonlin.kwargs->list(zip(args[-len(defaults):], defaults))
A:scipy.optimize.nonlin.kw_str->', '.join(['%s=%r' % (k, v) for (k, v) in kwargs])
A:scipy.optimize.nonlin.kwkw_str->', '.join(['%s=%s' % (k, k) for (k, v) in kwargs])
A:scipy.optimize.nonlin.broyden1->_nonlin_wrapper('broyden1', BroydenFirst)
A:scipy.optimize.nonlin.broyden2->_nonlin_wrapper('broyden2', BroydenSecond)
A:scipy.optimize.nonlin.anderson->_nonlin_wrapper('anderson', Anderson)
A:scipy.optimize.nonlin.linearmixing->_nonlin_wrapper('linearmixing', LinearMixing)
A:scipy.optimize.nonlin.diagbroyden->_nonlin_wrapper('diagbroyden', DiagBroyden)
A:scipy.optimize.nonlin.excitingmixing->_nonlin_wrapper('excitingmixing', ExcitingMixing)
A:scipy.optimize.nonlin.newton_krylov->_nonlin_wrapper('newton_krylov', KrylovJacobian)
scipy.optimize.Anderson(self,alpha=None,w0=0.01,M=5)
scipy.optimize.Anderson._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize.Anderson.matvec(self,f)
scipy.optimize.Anderson.solve(self,f,tol=0)
scipy.optimize.BroydenFirst(self,alpha=None,reduction_method='restart',max_rank=None)
scipy.optimize.BroydenFirst._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize.BroydenFirst.matvec(self,f)
scipy.optimize.BroydenFirst.rmatvec(self,f)
scipy.optimize.BroydenFirst.rsolve(self,f,tol=0)
scipy.optimize.BroydenFirst.setup(self,x,F,func)
scipy.optimize.BroydenFirst.solve(self,f,tol=0)
scipy.optimize.BroydenFirst.todense(self)
scipy.optimize.BroydenSecond(BroydenFirst)
scipy.optimize.BroydenSecond._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize.DiagBroyden(self,alpha=None)
scipy.optimize.DiagBroyden._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize.DiagBroyden.matvec(self,f)
scipy.optimize.DiagBroyden.rmatvec(self,f)
scipy.optimize.DiagBroyden.rsolve(self,f,tol=0)
scipy.optimize.DiagBroyden.setup(self,x,F,func)
scipy.optimize.DiagBroyden.solve(self,f,tol=0)
scipy.optimize.DiagBroyden.todense(self)
scipy.optimize.ExcitingMixing(self,alpha=None,alphamax=1.0)
scipy.optimize.ExcitingMixing._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize.ExcitingMixing.matvec(self,f)
scipy.optimize.ExcitingMixing.rmatvec(self,f)
scipy.optimize.ExcitingMixing.rsolve(self,f,tol=0)
scipy.optimize.ExcitingMixing.setup(self,x,F,func)
scipy.optimize.ExcitingMixing.solve(self,f,tol=0)
scipy.optimize.ExcitingMixing.todense(self)
scipy.optimize.GenericBroyden(Jacobian)
scipy.optimize.GenericBroyden._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize.GenericBroyden.setup(self,x0,f0,func)
scipy.optimize.GenericBroyden.update(self,x,f)
scipy.optimize.InverseJacobian(self,jacobian)
scipy.optimize.InverseJacobian.dtype(self)
scipy.optimize.InverseJacobian.shape(self)
scipy.optimize.Jacobian(self,**kw)
scipy.optimize.Jacobian.aspreconditioner(self)
scipy.optimize.Jacobian.setup(self,x,F,func)
scipy.optimize.Jacobian.solve(self,v,tol=0)
scipy.optimize.Jacobian.update(self,x,F)
scipy.optimize.KrylovJacobian(self,rdiff=None,method='lgmres',inner_maxiter=20,inner_M=None,outer_k=10,**kw)
scipy.optimize.KrylovJacobian._update_diff_step(self)
scipy.optimize.KrylovJacobian.matvec(self,v)
scipy.optimize.KrylovJacobian.setup(self,x,f,func)
scipy.optimize.KrylovJacobian.solve(self,rhs,tol=0)
scipy.optimize.KrylovJacobian.update(self,x,f)
scipy.optimize.LinearMixing(self,alpha=None)
scipy.optimize.LinearMixing._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize.LinearMixing.matvec(self,f)
scipy.optimize.LinearMixing.rmatvec(self,f)
scipy.optimize.LinearMixing.rsolve(self,f,tol=0)
scipy.optimize.LinearMixing.solve(self,f,tol=0)
scipy.optimize.LinearMixing.todense(self)
scipy.optimize.LowRankMatrix(self,alpha,n,dtype)
scipy.optimize.LowRankMatrix.__array__(self)
scipy.optimize.LowRankMatrix._matvec(v,alpha,cs,ds)
scipy.optimize.LowRankMatrix._solve(v,alpha,cs,ds)
scipy.optimize.LowRankMatrix.append(self,c,d)
scipy.optimize.LowRankMatrix.collapse(self)
scipy.optimize.LowRankMatrix.matvec(self,v)
scipy.optimize.LowRankMatrix.restart_reduce(self,rank)
scipy.optimize.LowRankMatrix.rmatvec(self,v)
scipy.optimize.LowRankMatrix.rsolve(self,v,tol=0)
scipy.optimize.LowRankMatrix.simple_reduce(self,rank)
scipy.optimize.LowRankMatrix.solve(self,v,tol=0)
scipy.optimize.LowRankMatrix.svd_reduce(self,max_rank,to_retain=None)
scipy.optimize.NoConvergence(Exception)
scipy.optimize.TerminationCondition(self,f_tol=None,f_rtol=None,x_tol=None,x_rtol=None,iter=None,norm=maxnorm)
scipy.optimize.TerminationCondition.check(self,f,x,dx)
scipy.optimize._array_like(x,x0)
scipy.optimize._as_inexact(x)
scipy.optimize._nonlin_line_search(func,x,Fx,dx,search_type='armijo',rdiff=1e-08,smin=0.01)
scipy.optimize._nonlin_wrapper(name,jac)
scipy.optimize._safe_norm(v)
scipy.optimize._set_doc(obj)
scipy.optimize.asjacobian(J)
scipy.optimize.maxnorm(x)
scipy.optimize.nonlin.Anderson(self,alpha=None,w0=0.01,M=5)
scipy.optimize.nonlin.Anderson.__init__(self,alpha=None,w0=0.01,M=5)
scipy.optimize.nonlin.Anderson._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize.nonlin.Anderson.matvec(self,f)
scipy.optimize.nonlin.Anderson.solve(self,f,tol=0)
scipy.optimize.nonlin.BroydenFirst(self,alpha=None,reduction_method='restart',max_rank=None)
scipy.optimize.nonlin.BroydenFirst.__init__(self,alpha=None,reduction_method='restart',max_rank=None)
scipy.optimize.nonlin.BroydenFirst._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize.nonlin.BroydenFirst.matvec(self,f)
scipy.optimize.nonlin.BroydenFirst.rmatvec(self,f)
scipy.optimize.nonlin.BroydenFirst.rsolve(self,f,tol=0)
scipy.optimize.nonlin.BroydenFirst.setup(self,x,F,func)
scipy.optimize.nonlin.BroydenFirst.solve(self,f,tol=0)
scipy.optimize.nonlin.BroydenFirst.todense(self)
scipy.optimize.nonlin.BroydenSecond(BroydenFirst)
scipy.optimize.nonlin.BroydenSecond._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize.nonlin.DiagBroyden(self,alpha=None)
scipy.optimize.nonlin.DiagBroyden.__init__(self,alpha=None)
scipy.optimize.nonlin.DiagBroyden._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize.nonlin.DiagBroyden.matvec(self,f)
scipy.optimize.nonlin.DiagBroyden.rmatvec(self,f)
scipy.optimize.nonlin.DiagBroyden.rsolve(self,f,tol=0)
scipy.optimize.nonlin.DiagBroyden.setup(self,x,F,func)
scipy.optimize.nonlin.DiagBroyden.solve(self,f,tol=0)
scipy.optimize.nonlin.DiagBroyden.todense(self)
scipy.optimize.nonlin.ExcitingMixing(self,alpha=None,alphamax=1.0)
scipy.optimize.nonlin.ExcitingMixing.__init__(self,alpha=None,alphamax=1.0)
scipy.optimize.nonlin.ExcitingMixing._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize.nonlin.ExcitingMixing.matvec(self,f)
scipy.optimize.nonlin.ExcitingMixing.rmatvec(self,f)
scipy.optimize.nonlin.ExcitingMixing.rsolve(self,f,tol=0)
scipy.optimize.nonlin.ExcitingMixing.setup(self,x,F,func)
scipy.optimize.nonlin.ExcitingMixing.solve(self,f,tol=0)
scipy.optimize.nonlin.ExcitingMixing.todense(self)
scipy.optimize.nonlin.GenericBroyden(Jacobian)
scipy.optimize.nonlin.GenericBroyden._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize.nonlin.GenericBroyden.setup(self,x0,f0,func)
scipy.optimize.nonlin.GenericBroyden.update(self,x,f)
scipy.optimize.nonlin.InverseJacobian(self,jacobian)
scipy.optimize.nonlin.InverseJacobian.__init__(self,jacobian)
scipy.optimize.nonlin.InverseJacobian.dtype(self)
scipy.optimize.nonlin.InverseJacobian.shape(self)
scipy.optimize.nonlin.Jacobian(self,**kw)
scipy.optimize.nonlin.Jacobian.__init__(self,**kw)
scipy.optimize.nonlin.Jacobian.aspreconditioner(self)
scipy.optimize.nonlin.Jacobian.setup(self,x,F,func)
scipy.optimize.nonlin.Jacobian.solve(self,v,tol=0)
scipy.optimize.nonlin.Jacobian.update(self,x,F)
scipy.optimize.nonlin.KrylovJacobian(self,rdiff=None,method='lgmres',inner_maxiter=20,inner_M=None,outer_k=10,**kw)
scipy.optimize.nonlin.KrylovJacobian.__init__(self,rdiff=None,method='lgmres',inner_maxiter=20,inner_M=None,outer_k=10,**kw)
scipy.optimize.nonlin.KrylovJacobian._update_diff_step(self)
scipy.optimize.nonlin.KrylovJacobian.matvec(self,v)
scipy.optimize.nonlin.KrylovJacobian.setup(self,x,f,func)
scipy.optimize.nonlin.KrylovJacobian.solve(self,rhs,tol=0)
scipy.optimize.nonlin.KrylovJacobian.update(self,x,f)
scipy.optimize.nonlin.LinearMixing(self,alpha=None)
scipy.optimize.nonlin.LinearMixing.__init__(self,alpha=None)
scipy.optimize.nonlin.LinearMixing._update(self,x,f,dx,df,dx_norm,df_norm)
scipy.optimize.nonlin.LinearMixing.matvec(self,f)
scipy.optimize.nonlin.LinearMixing.rmatvec(self,f)
scipy.optimize.nonlin.LinearMixing.rsolve(self,f,tol=0)
scipy.optimize.nonlin.LinearMixing.solve(self,f,tol=0)
scipy.optimize.nonlin.LinearMixing.todense(self)
scipy.optimize.nonlin.LowRankMatrix(self,alpha,n,dtype)
scipy.optimize.nonlin.LowRankMatrix.__array__(self)
scipy.optimize.nonlin.LowRankMatrix.__init__(self,alpha,n,dtype)
scipy.optimize.nonlin.LowRankMatrix._matvec(v,alpha,cs,ds)
scipy.optimize.nonlin.LowRankMatrix._solve(v,alpha,cs,ds)
scipy.optimize.nonlin.LowRankMatrix.append(self,c,d)
scipy.optimize.nonlin.LowRankMatrix.collapse(self)
scipy.optimize.nonlin.LowRankMatrix.matvec(self,v)
scipy.optimize.nonlin.LowRankMatrix.restart_reduce(self,rank)
scipy.optimize.nonlin.LowRankMatrix.rmatvec(self,v)
scipy.optimize.nonlin.LowRankMatrix.rsolve(self,v,tol=0)
scipy.optimize.nonlin.LowRankMatrix.simple_reduce(self,rank)
scipy.optimize.nonlin.LowRankMatrix.solve(self,v,tol=0)
scipy.optimize.nonlin.LowRankMatrix.svd_reduce(self,max_rank,to_retain=None)
scipy.optimize.nonlin.NoConvergence(Exception)
scipy.optimize.nonlin.TerminationCondition(self,f_tol=None,f_rtol=None,x_tol=None,x_rtol=None,iter=None,norm=maxnorm)
scipy.optimize.nonlin.TerminationCondition.__init__(self,f_tol=None,f_rtol=None,x_tol=None,x_rtol=None,iter=None,norm=maxnorm)
scipy.optimize.nonlin.TerminationCondition.check(self,f,x,dx)
scipy.optimize.nonlin._array_like(x,x0)
scipy.optimize.nonlin._as_inexact(x)
scipy.optimize.nonlin._nonlin_line_search(func,x,Fx,dx,search_type='armijo',rdiff=1e-08,smin=0.01)
scipy.optimize.nonlin._nonlin_wrapper(name,jac)
scipy.optimize.nonlin._safe_norm(v)
scipy.optimize.nonlin._set_doc(obj)
scipy.optimize.nonlin.asjacobian(J)
scipy.optimize.nonlin.maxnorm(x)
scipy.optimize.nonlin.nonlin_solve(F,x0,jacobian='krylov',iter=None,verbose=False,maxiter=None,f_tol=None,f_rtol=None,x_tol=None,x_rtol=None,tol_norm=None,line_search='armijo',callback=None,full_output=False,raise_exception=True)
scipy.optimize.nonlin_solve(F,x0,jacobian='krylov',iter=None,verbose=False,maxiter=None,f_tol=None,f_rtol=None,x_tol=None,x_rtol=None,tol_norm=None,line_search='armijo',callback=None,full_output=False,raise_exception=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/_root.py----------------------------------------
A:scipy.optimize._root.meth->method.lower()
A:scipy.optimize._root.fun->MemoizeJac(fun)
A:scipy.optimize._root.options->dict(options)
A:scipy.optimize._root.sol->Result(x=x)
A:scipy.optimize._root.(x, cov_x, info, msg, ier)->leastsq(func, x0, args=args, Dfun=jac, full_output=True, col_deriv=col_deriv, xtol=xtol, ftol=ftol, gtol=gtol, maxfev=maxiter, epsfcn=eps, factor=factor, diag=diag)
A:scipy.optimize._root.jac_options->dict()
A:scipy.optimize._root.(x, info)->nonlin.nonlin_solve(f, x0, jacobian=jacobian(**jac_options), iter=nit, verbose=verbose, maxiter=maxiter, f_tol=f_tol, f_rtol=f_rtol, x_tol=x_tol, x_rtol=x_rtol, tol_norm=tol_norm, line_search=line_search, callback=_callback, full_output=True, raise_exception=False)
scipy.optimize._root._root_leastsq(func,x0,args=(),jac=None,col_deriv=0,xtol=1.49012e-08,ftol=1.49012e-08,gtol=0.0,maxiter=0,eps=0.0,factor=100,diag=None,**unknown_options)
scipy.optimize._root._root_nonlin_solve(func,x0,args=(),jac=None,_callback=None,_method=None,nit=None,disp=False,maxiter=None,ftol=None,fatol=None,xtol=None,xatol=None,tol_norm=None,line_search='armijo',jac_options=None,**unknown_options)
scipy.optimize._root.root(fun,x0,args=(),method='hybr',jac=None,tol=None,callback=None,options=None)
scipy.optimize._root_leastsq(func,x0,args=(),jac=None,col_deriv=0,xtol=1.49012e-08,ftol=1.49012e-08,gtol=0.0,maxiter=0,eps=0.0,factor=100,diag=None,**unknown_options)
scipy.optimize._root_nonlin_solve(func,x0,args=(),jac=None,_callback=None,_method=None,nit=None,disp=False,maxiter=None,ftol=None,fatol=None,xtol=None,xatol=None,tol_norm=None,line_search='armijo',jac_options=None,**unknown_options)
scipy.optimize.root(fun,x0,args=(),method='hybr',jac=None,tol=None,callback=None,options=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/setupscons.py----------------------------------------
A:scipy.optimize.setupscons.config->Configuration('optimize', parent_package, top_path)
scipy.optimize.setupscons.configuration(parent_package='',top_path=None)
scipy.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/lbfgsb.py----------------------------------------
A:scipy.optimize.lbfgsb.fun->MemoizeJac(func)
A:scipy.optimize.lbfgsb.res->_minimize_lbfgsb(fun, x0, args=args, jac=jac, bounds=bounds, **opts)
A:scipy.optimize.lbfgsb.x0->zeros((n,), float64)
A:scipy.optimize.lbfgsb.f->array(0.0, float64)
A:scipy.optimize.lbfgsb.g->zeros(x.shape, float64)
A:scipy.optimize.lbfgsb.nbd->zeros(n, int32)
A:scipy.optimize.lbfgsb.low_bnd->zeros(n, float64)
A:scipy.optimize.lbfgsb.upper_bnd->zeros(n, float64)
A:scipy.optimize.lbfgsb.x->array(x0, float64)
A:scipy.optimize.lbfgsb.wa->zeros(2 * m * n + 5 * n + 11 * m * m + 8 * m, float64)
A:scipy.optimize.lbfgsb.iwa->zeros(3 * n, int32)
A:scipy.optimize.lbfgsb.task->zeros(1, 'S60')
A:scipy.optimize.lbfgsb.csave->zeros(1, 'S60')
A:scipy.optimize.lbfgsb.lsave->zeros(4, int32)
A:scipy.optimize.lbfgsb.isave->zeros(44, int32)
A:scipy.optimize.lbfgsb.dsave->zeros(29, float64)
A:scipy.optimize.lbfgsb.task_str->zeros(1, 'S60').tostring().strip(b'\x00').strip()
A:scipy.optimize.lbfgsb.(f, g)->func_and_grad(x)
A:scipy.optimize.lbfgsb.(x, f, d)->fmin_l_bfgs_b(p.fun, x0, approx_grad=0, m=m, factr=factr, pgtol=pgtol)
A:scipy.optimize.lbfgsb.p->Problem()
scipy.lbfgsb._minimize_lbfgsb(fun,x0,args=(),jac=None,bounds=None,disp=None,maxcor=10,ftol=2.220446049250313e-09,gtol=1e-05,eps=1e-08,maxfun=15000,maxiter=15000,iprint=-1,callback=None,**unknown_options)
scipy.optimize.fmin_l_bfgs_b(func,x0,fprime=None,args=(),approx_grad=0,bounds=None,m=10,factr=10000000.0,pgtol=1e-05,epsilon=1e-08,iprint=-1,maxfun=15000,maxiter=15000,disp=None,callback=None)
scipy.optimize.lbfgsb._minimize_lbfgsb(fun,x0,args=(),jac=None,bounds=None,disp=None,maxcor=10,ftol=2.220446049250313e-09,gtol=1e-05,eps=1e-08,maxfun=15000,maxiter=15000,iprint=-1,callback=None,**unknown_options)
scipy.optimize.lbfgsb.fmin_l_bfgs_b(func,x0,fprime=None,args=(),approx_grad=0,bounds=None,m=10,factr=10000000.0,pgtol=1e-05,epsilon=1e-08,iprint=-1,maxfun=15000,maxiter=15000,disp=None,callback=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/_minimize.py----------------------------------------
A:scipy.optimize._minimize.meth->method.lower()
A:scipy.optimize._minimize.fun->MemoizeJac(fun)
A:scipy.optimize._minimize.options->dict(options)
scipy.optimize._minimize.minimize(fun,x0,args=(),method='BFGS',jac=None,hess=None,hessp=None,bounds=None,constraints=(),tol=None,callback=None,options=None)
scipy.optimize._minimize.minimize_scalar(fun,bracket=None,bounds=None,args=(),method='brent',tol=None,options=None)
scipy.optimize.minimize(fun,x0,args=(),method='BFGS',jac=None,hess=None,hessp=None,bounds=None,constraints=(),tol=None,callback=None,options=None)
scipy.optimize.minimize_scalar(fun,bracket=None,bounds=None,args=(),method='brent',tol=None,options=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/nnls.py----------------------------------------
A:scipy.optimize.nnls.(A, b)->map(asarray_chkfinite, (A, b))
A:scipy.optimize.nnls.w->zeros((n,), dtype=double)
A:scipy.optimize.nnls.zz->zeros((m,), dtype=double)
A:scipy.optimize.nnls.index->zeros((n,), dtype=int)
A:scipy.optimize.nnls.(x, rnorm, mode)->_nnls.nnls(A, m, n, b, w, zz, index)
scipy.optimize.nnls(A,b)
scipy.optimize.nnls.nnls(A,b)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/_basinhopping.py----------------------------------------
A:scipy.optimize._basinhopping.self.x->numpy.copy(xtrial)
A:scipy.optimize._basinhopping.minres->self.minimizer(x_after_step)
A:scipy.optimize._basinhopping.self.storage->Storage(self.x, self.energy)
A:scipy.optimize._basinhopping.self.res->scipy.optimize.Result()
A:scipy.optimize._basinhopping.x_after_step->self.step_taking(x_after_step)
A:scipy.optimize._basinhopping.testres->test(f_new=energy_after_quench, x_new=x_after_quench, f_old=self.energy, x_old=self.x)
A:scipy.optimize._basinhopping.(xtrial, energy_trial, accept)->self._monte_carlo_step()
A:scipy.optimize._basinhopping.new_global_min->BasinHoppingRunner(x0, wrapped_minimizer, take_step_wrapped, accept_tests, disp=disp).one_cycle()
A:scipy.optimize._basinhopping.(xlowest, energy_lowest)->self.storage.get_lowest()
A:scipy.optimize._basinhopping.w->min(1.0, np.exp(-(energy_new - energy_old) * self.beta))
A:scipy.optimize._basinhopping.rand->numpy.random.rand()
A:scipy.optimize._basinhopping.x0->numpy.array([1.0, 1.0])
A:scipy.optimize._basinhopping.minimizer_kwargs->dict()
A:scipy.optimize._basinhopping.wrapped_minimizer->MinimizerWrapper(scipy.optimize.minimize, func, **minimizer_kwargs)
A:scipy.optimize._basinhopping.take_step_wrapped->AdaptiveStepsize(displace, interval=interval, verbose=disp)
A:scipy.optimize._basinhopping.displace->RandomDisplacement(stepsize=stepsize)
A:scipy.optimize._basinhopping.metropolis->Metropolis(T)
A:scipy.optimize._basinhopping.bh->BasinHoppingRunner(x0, wrapped_minimizer, take_step_wrapped, accept_tests, disp=disp)
A:scipy.optimize._basinhopping.val->callback(bh.xtrial, bh.energy_trial, bh.accept)
A:scipy.optimize._basinhopping.lowest->BasinHoppingRunner(x0, wrapped_minimizer, take_step_wrapped, accept_tests, disp=disp).storage.get_lowest()
A:scipy.optimize._basinhopping.res.x->numpy.copy(lowest[0])
A:scipy.optimize._basinhopping.df->numpy.zeros(2)
A:scipy.optimize._basinhopping.ret->basinhopping(_test_func2d, x0, minimizer_kwargs=kwargs, niter=200, disp=False)
scipy._basinhopping.AdaptiveStepsize(self,takestep,accept_rate=0.5,interval=50,factor=0.9,verbose=True)
scipy._basinhopping.AdaptiveStepsize._adjust_step_size(self)
scipy._basinhopping.AdaptiveStepsize.report(self,accept,**kwargs)
scipy._basinhopping.AdaptiveStepsize.take_step(self,x)
scipy._basinhopping.BasinHoppingRunner(self,x0,minimizer,step_taking,accept_tests,disp=False)
scipy._basinhopping.BasinHoppingRunner._monte_carlo_step(self)
scipy._basinhopping.BasinHoppingRunner.one_cycle(self)
scipy._basinhopping.BasinHoppingRunner.print_report(self,energy_trial,accept)
scipy._basinhopping.Metropolis(self,T)
scipy._basinhopping.Metropolis.accept_reject(self,energy_new,energy_old)
scipy._basinhopping.MinimizerWrapper(self,minimizer,func=None,**kwargs)
scipy._basinhopping.RandomDisplacement(self,stepsize=0.5)
scipy._basinhopping.Storage(self,x,f)
scipy._basinhopping.Storage._add(self,x,f)
scipy._basinhopping.Storage.get_lowest(self)
scipy._basinhopping.Storage.update(self,x,f)
scipy._basinhopping._test_func2d(x)
scipy._basinhopping._test_func2d_nograd(x)
scipy.optimize._basinhopping.AdaptiveStepsize(self,takestep,accept_rate=0.5,interval=50,factor=0.9,verbose=True)
scipy.optimize._basinhopping.AdaptiveStepsize.__init__(self,takestep,accept_rate=0.5,interval=50,factor=0.9,verbose=True)
scipy.optimize._basinhopping.AdaptiveStepsize._adjust_step_size(self)
scipy.optimize._basinhopping.AdaptiveStepsize.report(self,accept,**kwargs)
scipy.optimize._basinhopping.AdaptiveStepsize.take_step(self,x)
scipy.optimize._basinhopping.BasinHoppingRunner(self,x0,minimizer,step_taking,accept_tests,disp=False)
scipy.optimize._basinhopping.BasinHoppingRunner.__init__(self,x0,minimizer,step_taking,accept_tests,disp=False)
scipy.optimize._basinhopping.BasinHoppingRunner._monte_carlo_step(self)
scipy.optimize._basinhopping.BasinHoppingRunner.one_cycle(self)
scipy.optimize._basinhopping.BasinHoppingRunner.print_report(self,energy_trial,accept)
scipy.optimize._basinhopping.Metropolis(self,T)
scipy.optimize._basinhopping.Metropolis.__init__(self,T)
scipy.optimize._basinhopping.Metropolis.accept_reject(self,energy_new,energy_old)
scipy.optimize._basinhopping.MinimizerWrapper(self,minimizer,func=None,**kwargs)
scipy.optimize._basinhopping.MinimizerWrapper.__init__(self,minimizer,func=None,**kwargs)
scipy.optimize._basinhopping.RandomDisplacement(self,stepsize=0.5)
scipy.optimize._basinhopping.RandomDisplacement.__init__(self,stepsize=0.5)
scipy.optimize._basinhopping.Storage(self,x,f)
scipy.optimize._basinhopping.Storage.__init__(self,x,f)
scipy.optimize._basinhopping.Storage._add(self,x,f)
scipy.optimize._basinhopping.Storage.get_lowest(self)
scipy.optimize._basinhopping.Storage.update(self,x,f)
scipy.optimize._basinhopping._test_func2d(x)
scipy.optimize._basinhopping._test_func2d_nograd(x)
scipy.optimize._basinhopping.basinhopping(func,x0,niter=100,T=1.0,stepsize=0.5,minimizer_kwargs=None,take_step=None,accept_test=None,callback=None,interval=50,disp=False,niter_success=None)
scipy.optimize.basinhopping(func,x0,niter=100,T=1.0,stepsize=0.5,minimizer_kwargs=None,take_step=None,accept_test=None,callback=None,interval=50,disp=False,niter_success=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/linesearch.py----------------------------------------
A:scipy.optimize.linesearch.gfk->fprime(xk)
A:scipy.optimize.linesearch.gval[0]->fprime(xk + alpha * pk, *args)
A:scipy.optimize.linesearch.derphi0->numpy.dot(gfk, pk)
A:scipy.optimize.linesearch.(stp, fval, old_fval)->scalar_search_wolfe1(phi, derphi, old_fval, old_old_fval, derphi0, c1=c1, c2=c2, amax=amax, amin=amin, xtol=xtol)
A:scipy.optimize.linesearch.phi0->phi(0.0)
A:scipy.optimize.linesearch.alpha1->min(1.0, 1.01 * 2 * (phi0 - old_phi0) / derphi0)
A:scipy.optimize.linesearch.isave->numpy.zeros((2,), np.intc)
A:scipy.optimize.linesearch.dsave->numpy.zeros((13,), float)
A:scipy.optimize.linesearch.(stp, phi1, derphi1, task)->scipy.optimize.minpack2.dcsrch(alpha1, phi1, derphi1, c1, c2, xtol, task, amin, amax, isave, dsave)
A:scipy.optimize.linesearch.phi1->phi(stp)
A:scipy.optimize.linesearch.derphi1->derphi(stp)
A:scipy.optimize.linesearch.(alpha_star, phi_star, old_fval, derphi_star)->scalar_search_wolfe2(phi, derphi, old_fval, old_old_fval, derphi0, c1, c2, amax)
A:scipy.optimize.linesearch.phi_a1->phi(alpha1)
A:scipy.optimize.linesearch.(alpha_star, phi_star, derphi_star)->_zoom(alpha1, alpha0, phi_a1, phi_a0, derphi_a1, phi, derphi, phi0, derphi0, c1, c2)
A:scipy.optimize.linesearch.derphi_a1->derphi(alpha1)
A:scipy.optimize.linesearch.d1->numpy.empty((2, 2))
A:scipy.optimize.linesearch.[A, B]->numpy.dot(d1, np.asarray([fb - fa - C * db, fc - fa - C * dc]).flatten())
A:scipy.optimize.linesearch.a_j->_quadmin(a_lo, phi_lo, derphi_lo, a_hi, phi_hi)
A:scipy.optimize.linesearch.phi_aj->phi(a_j)
A:scipy.optimize.linesearch.derphi_aj->derphi(a_j)
A:scipy.optimize.linesearch.xk->numpy.atleast_1d(xk)
A:scipy.optimize.linesearch.(alpha, phi1)->scalar_search_armijo(phi, phi0, derphi0, c1=c1, alpha0=alpha0)
A:scipy.optimize.linesearch.r->line_search_armijo(f, xk, pk, gfk, old_fval, args=args, c1=c1, alpha0=alpha0)
A:scipy.optimize.linesearch.phi_a0->phi(alpha0)
A:scipy.optimize.linesearch.phi_a2->phi(alpha2)
scipy.linesearch._cubicmin(a,fa,fpa,b,fb,c,fc)
scipy.linesearch._quadmin(a,fa,fpa,b,fb)
scipy.linesearch._zoom(a_lo,a_hi,phi_lo,phi_hi,derphi_lo,phi,derphi,phi0,derphi0,c1,c2)
scipy.linesearch.line_search_BFGS(f,xk,pk,gfk,old_fval,args=(),c1=0.0001,alpha0=1)
scipy.linesearch.line_search_armijo(f,xk,pk,gfk,old_fval,args=(),c1=0.0001,alpha0=1)
scipy.linesearch.line_search_wolfe1(f,fprime,xk,pk,gfk=None,old_fval=None,old_old_fval=None,args=(),c1=0.0001,c2=0.9,amax=50,amin=1e-08,xtol=1e-14)
scipy.linesearch.line_search_wolfe2(f,myfprime,xk,pk,gfk=None,old_fval=None,old_old_fval=None,args=(),c1=0.0001,c2=0.9,amax=50)
scipy.linesearch.scalar_search_armijo(phi,phi0,derphi0,c1=0.0001,alpha0=1,amin=0)
scipy.linesearch.scalar_search_wolfe1(phi,derphi,phi0=None,old_phi0=None,derphi0=None,c1=0.0001,c2=0.9,amax=50,amin=1e-08,xtol=1e-14)
scipy.linesearch.scalar_search_wolfe2(phi,derphi=None,phi0=None,old_phi0=None,derphi0=None,c1=0.0001,c2=0.9,amax=50)
scipy.optimize.linesearch._cubicmin(a,fa,fpa,b,fb,c,fc)
scipy.optimize.linesearch._quadmin(a,fa,fpa,b,fb)
scipy.optimize.linesearch._zoom(a_lo,a_hi,phi_lo,phi_hi,derphi_lo,phi,derphi,phi0,derphi0,c1,c2)
scipy.optimize.linesearch.line_search_BFGS(f,xk,pk,gfk,old_fval,args=(),c1=0.0001,alpha0=1)
scipy.optimize.linesearch.line_search_armijo(f,xk,pk,gfk,old_fval,args=(),c1=0.0001,alpha0=1)
scipy.optimize.linesearch.line_search_wolfe1(f,fprime,xk,pk,gfk=None,old_fval=None,old_old_fval=None,args=(),c1=0.0001,c2=0.9,amax=50,amin=1e-08,xtol=1e-14)
scipy.optimize.linesearch.line_search_wolfe2(f,myfprime,xk,pk,gfk=None,old_fval=None,old_old_fval=None,args=(),c1=0.0001,c2=0.9,amax=50)
scipy.optimize.linesearch.scalar_search_armijo(phi,phi0,derphi0,c1=0.0001,alpha0=1,amin=0)
scipy.optimize.linesearch.scalar_search_wolfe1(phi,derphi,phi0=None,old_phi0=None,derphi0=None,c1=0.0001,c2=0.9,amax=50,amin=1e-08,xtol=1e-14)
scipy.optimize.linesearch.scalar_search_wolfe2(phi,derphi=None,phi0=None,old_phi0=None,derphi0=None,c1=0.0001,c2=0.9,amax=50)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/tnc.py----------------------------------------
A:scipy.optimize.tnc.fun->MemoizeJac(func)
A:scipy.optimize.tnc.mesg_num->{0: MSG_NONE, 1: MSG_ITER, 2: MSG_INFO, 3: MSG_VERS, 4: MSG_EXIT, 5: MSG_ALL}.get(messages, MSG_ALL)
A:scipy.optimize.tnc.res->_minimize_tnc(fun, x0, args, jac, bounds, callback=callback, **opts)
A:scipy.optimize.tnc.x0->asarray(x0, dtype=float).tolist()
A:scipy.optimize.tnc.n->len(x0)
A:scipy.optimize.tnc.messages->{0: MSG_NONE, 1: MSG_ITER, 2: MSG_INFO, 3: MSG_VERS, 4: MSG_EXIT, 5: MSG_ALL}.get(mesg_num, MSG_ALL)
A:scipy.optimize.tnc.x->asarray(x)
A:scipy.optimize.tnc.f->fun(x, *args)
A:scipy.optimize.tnc.g->jac(x, *args)
A:scipy.optimize.tnc.maxfun->max(100, 10 * len(x0))
A:scipy.optimize.tnc.(rc, nf, nit, x)->scipy.optimize.moduleTNC.minimize(func_and_grad, x0, low, up, scale, offset, messages, maxCGit, maxfun, eta, stepmx, accuracy, fmin, ftol, xtol, pgtol, rescale, callback)
A:scipy.optimize.tnc.xopt->array(x)
A:scipy.optimize.tnc.(funv, jacv)->func_and_grad(xopt)
A:scipy.optimize.tnc.(x, nf, rc)->fmin_tnc(function, [-7, 3], bounds=([-10, 1], [10, 10]))
scipy.optimize.fmin_tnc(func,x0,fprime=None,args=(),approx_grad=0,bounds=None,epsilon=1e-08,scale=None,offset=None,messages=MSG_ALL,maxCGit=-1,maxfun=None,eta=-1,stepmx=0,accuracy=0,fmin=0,ftol=-1,xtol=-1,pgtol=-1,rescale=-1,disp=None,callback=None)
scipy.optimize.tnc._minimize_tnc(fun,x0,args=(),jac=None,bounds=None,eps=1e-08,scale=None,offset=None,mesg_num=None,maxCGit=-1,maxiter=None,eta=-1,stepmx=0,accuracy=0,minfev=0,ftol=-1,xtol=-1,gtol=-1,rescale=-1,disp=False,callback=None,**unknown_options)
scipy.optimize.tnc.fmin_tnc(func,x0,fprime=None,args=(),approx_grad=0,bounds=None,epsilon=1e-08,scale=None,offset=None,messages=MSG_ALL,maxCGit=-1,maxfun=None,eta=-1,stepmx=0,accuracy=0,fmin=0,ftol=-1,xtol=-1,pgtol=-1,rescale=-1,disp=None,callback=None)
scipy.tnc._minimize_tnc(fun,x0,args=(),jac=None,bounds=None,eps=1e-08,scale=None,offset=None,mesg_num=None,maxCGit=-1,maxiter=None,eta=-1,stepmx=0,accuracy=0,minfev=0,ftol=-1,xtol=-1,gtol=-1,rescale=-1,disp=False,callback=None,**unknown_options)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/setup.py----------------------------------------
A:scipy.optimize.setup.config->Configuration('optimize', parent_package, top_path)
A:scipy.optimize.setup.lapack->get_info('lapack_opt')
scipy.optimize.setup.configuration(parent_package='',top_path=None)
scipy.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/slsqp.py----------------------------------------
A:scipy.optimize.slsqp._epsilon->sqrt(finfo(float).eps)
A:scipy.optimize.slsqp.x0->asfarray(x)
A:scipy.optimize.slsqp.f0->atleast_1d(func(*(x0,) + args))
A:scipy.optimize.slsqp.jac->zeros([len(x0), len(f0)])
A:scipy.optimize.slsqp.dx->zeros(len(x0))
A:scipy.optimize.slsqp.res->_minimize_slsqp(fun, array([-1, 1]), constraints=cons, **{'disp': True})
A:scipy.optimize.slsqp.ctype->con['type'].lower()
A:scipy.optimize.slsqp.cjac->con.get('jac')
A:scipy.optimize.slsqp.(feval, func)->wrap_function(func, args)
A:scipy.optimize.slsqp.(geval, fprime)->wrap_function(approx_jacobian, (func, epsilon))
A:scipy.optimize.slsqp.x->asfarray(x0).flatten()
A:scipy.optimize.slsqp.meq->sum(map(len, [atleast_1d(c['fun'](x, *c['args'])) for c in cons['eq']]))
A:scipy.optimize.slsqp.mieq->sum(map(len, [atleast_1d(c['fun'](x, *c['args'])) for c in cons['ineq']]))
A:scipy.optimize.slsqp.la->array([1, m]).max()
A:scipy.optimize.slsqp.n->len(x)
A:scipy.optimize.slsqp.w->zeros(len_w)
A:scipy.optimize.slsqp.jw->zeros(len_jw)
A:scipy.optimize.slsqp.bnds->array(bounds, float)
A:scipy.optimize.slsqp.infbnd->isinf(bnds)
A:scipy.optimize.slsqp.mode->array(0, int)
A:scipy.optimize.slsqp.acc->array(acc, float)
A:scipy.optimize.slsqp.majiter->array(iter, int)
A:scipy.optimize.slsqp.fx->func(x)
A:scipy.optimize.slsqp.c_eq->zeros(0)
A:scipy.optimize.slsqp.c_ieq->zeros(0)
A:scipy.optimize.slsqp.c->concatenate((c_eq, c_ieq))
A:scipy.optimize.slsqp.g->append(fprime(x), 0.0)
A:scipy.optimize.slsqp.a_eq->zeros((meq, n))
A:scipy.optimize.slsqp.a_ieq->zeros((mieq, n))
A:scipy.optimize.slsqp.a->concatenate((a, zeros([la, 1])), 1)
A:scipy.optimize.slsqp.majiter_prev->int(majiter)
scipy.optimize.fmin_slsqp(func,x0,eqcons=[],f_eqcons=None,ieqcons=[],f_ieqcons=None,bounds=[],fprime=None,fprime_eqcons=None,fprime_ieqcons=None,args=(),iter=100,acc=1e-06,iprint=1,disp=None,full_output=0,epsilon=_epsilon)
scipy.optimize.slsqp._minimize_slsqp(func,x0,args=(),jac=None,bounds=None,constraints=(),maxiter=100,ftol=1e-06,iprint=1,disp=False,eps=_epsilon,**unknown_options)
scipy.optimize.slsqp.approx_jacobian(x,func,epsilon,*args)
scipy.optimize.slsqp.fmin_slsqp(func,x0,eqcons=[],f_eqcons=None,ieqcons=[],f_ieqcons=None,bounds=[],fprime=None,fprime_eqcons=None,fprime_ieqcons=None,args=(),iter=100,acc=1e-06,iprint=1,disp=None,full_output=0,epsilon=_epsilon)
scipy.slsqp._minimize_slsqp(func,x0,args=(),jac=None,bounds=None,constraints=(),maxiter=100,ftol=1e-06,iprint=1,disp=False,eps=_epsilon,**unknown_options)
scipy.slsqp.approx_jacobian(x,func,epsilon,*args)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/cobyla.py----------------------------------------
A:scipy.optimize.cobyla.m->len(constraints)
A:scipy.optimize.cobyla.con->tuple(({'type': 'ineq', 'fun': c, 'args': consargs} for c in cons))
A:scipy.optimize.cobyla.ctype->con['type'].lower()
A:scipy.optimize.cobyla.f->fun(x, *args)
A:scipy.optimize.cobyla.con[k]->c['fun'](x, *c['args'])
A:scipy.optimize.cobyla.info->numpy.zeros(4, np.float64)
A:scipy.optimize.cobyla.(xopt, info)->scipy.optimize._cobyla.minimize(calcfc, m=m, x=np.copy(x0), rhobeg=rhobeg, rhoend=rhoend, iprint=iprint, maxfun=maxfun, dinfo=info)
A:scipy.optimize.cobyla.x->fmin_cobyla(fun, [1.0, 1.0], cons, iprint=3, disp=1)
scipy.cobyla._minimize_cobyla(fun,x0,args=(),constraints=(),rhobeg=1.0,tol=0.0001,iprint=1,maxiter=1000,disp=False,**unknown_options)
scipy.optimize.cobyla._minimize_cobyla(fun,x0,args=(),constraints=(),rhobeg=1.0,tol=0.0001,iprint=1,maxiter=1000,disp=False,**unknown_options)
scipy.optimize.cobyla.fmin_cobyla(func,x0,cons,args=(),consargs=None,rhobeg=1.0,rhoend=0.0001,iprint=1,maxfun=1000,disp=None)
scipy.optimize.fmin_cobyla(func,x0,cons,args=(),consargs=None,rhobeg=1.0,rhoend=0.0001,iprint=1,maxfun=1000,disp=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/tests/test_linesearch.py----------------------------------------
A:scipy.optimize.tests.test_linesearch.phi1->phi(s)
A:scipy.optimize.tests.test_linesearch.phi0->phi(0)
A:scipy.optimize.tests.test_linesearch.derphi0->derphi(0)
A:scipy.optimize.tests.test_linesearch.derphi1->derphi(s)
A:scipy.optimize.tests.test_linesearch.f->numpy.dot(x, x)
A:scipy.optimize.tests.test_linesearch.df->numpy.dot(self.A + self.A.T, x)
A:scipy.optimize.tests.test_linesearch.value->getattr(self, name)
A:scipy.optimize.tests.test_linesearch.self.A->numpy.random.randn(self.N, self.N)
A:scipy.optimize.tests.test_linesearch.x->numpy.random.randn(self.N)
A:scipy.optimize.tests.test_linesearch.p->numpy.random.randn(self.N)
A:scipy.optimize.tests.test_linesearch.old_fv->float(np.random.randn())
A:scipy.optimize.tests.test_linesearch.(s, phi1, phi0)->scipy.optimize.linesearch.scalar_search_wolfe1(phi, derphi, phi(0), old_phi0, derphi(0))
A:scipy.optimize.tests.test_linesearch.(s, phi1, phi0, derphi1)->scipy.optimize.linesearch.scalar_search_wolfe2(phi, derphi, phi(0), old_phi0, derphi(0))
A:scipy.optimize.tests.test_linesearch.(s, phi1)->scipy.optimize.linesearch.scalar_search_armijo(phi, phi(0), -1, alpha0=1)
A:scipy.optimize.tests.test_linesearch.f0->f(x)
A:scipy.optimize.tests.test_linesearch.g0->fprime(x)
A:scipy.optimize.tests.test_linesearch.(s, fc, gc, fv, ofv, gv)->scipy.optimize.linesearch.line_search_wolfe2(f, fprime, x, p, g0, f0, old_f, amax=smax)
A:scipy.optimize.tests.test_linesearch.(s, fc, fv)->scipy.optimize.linesearch.line_search_armijo(f, x, p, g0, f0)
A:scipy.optimize.tests.test_linesearch.r->func(phi, derphi, phi(0), None, derphi(0))
scipy.optimize.tests.test_linesearch.TestLineSearch(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.__init__(self)
scipy.optimize.tests.test_linesearch.TestLineSearch._line_func_1(self,x)
scipy.optimize.tests.test_linesearch.TestLineSearch._line_func_2(self,x)
scipy.optimize.tests.test_linesearch.TestLineSearch._scalar_func_1(self,s)
scipy.optimize.tests.test_linesearch.TestLineSearch._scalar_func_2(self,s)
scipy.optimize.tests.test_linesearch.TestLineSearch._scalar_func_3(self,s)
scipy.optimize.tests.test_linesearch.TestLineSearch.line_iter(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.scalar_iter(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.setUp(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.test_armijo_terminate_1(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.test_line_search_armijo(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.test_line_search_wolfe1(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.test_line_search_wolfe2(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.test_scalar_search_armijo(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.test_scalar_search_wolfe1(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.test_scalar_search_wolfe2(self)
scipy.optimize.tests.test_linesearch.TestLineSearch.test_wolfe_terminate(self)
scipy.optimize.tests.test_linesearch.assert_armijo(s,phi,c1=0.0001,err_msg='')
scipy.optimize.tests.test_linesearch.assert_fp_equal(x,y,err_msg='',nulp=50)
scipy.optimize.tests.test_linesearch.assert_line_armijo(x,p,s,f,**kw)
scipy.optimize.tests.test_linesearch.assert_line_wolfe(x,p,s,f,fprime,**kw)
scipy.optimize.tests.test_linesearch.assert_wolfe(s,phi,derphi,c1=0.0001,c2=0.9,err_msg='')
scipy.tests.test_linesearch.TestLineSearch(self)
scipy.tests.test_linesearch.TestLineSearch._line_func_1(self,x)
scipy.tests.test_linesearch.TestLineSearch._line_func_2(self,x)
scipy.tests.test_linesearch.TestLineSearch._scalar_func_1(self,s)
scipy.tests.test_linesearch.TestLineSearch._scalar_func_2(self,s)
scipy.tests.test_linesearch.TestLineSearch._scalar_func_3(self,s)
scipy.tests.test_linesearch.TestLineSearch.line_iter(self)
scipy.tests.test_linesearch.TestLineSearch.scalar_iter(self)
scipy.tests.test_linesearch.TestLineSearch.setUp(self)
scipy.tests.test_linesearch.TestLineSearch.test_armijo_terminate_1(self)
scipy.tests.test_linesearch.TestLineSearch.test_line_search_armijo(self)
scipy.tests.test_linesearch.TestLineSearch.test_line_search_wolfe1(self)
scipy.tests.test_linesearch.TestLineSearch.test_line_search_wolfe2(self)
scipy.tests.test_linesearch.TestLineSearch.test_scalar_search_armijo(self)
scipy.tests.test_linesearch.TestLineSearch.test_scalar_search_wolfe1(self)
scipy.tests.test_linesearch.TestLineSearch.test_scalar_search_wolfe2(self)
scipy.tests.test_linesearch.TestLineSearch.test_wolfe_terminate(self)
scipy.tests.test_linesearch.assert_armijo(s,phi,c1=0.0001,err_msg='')
scipy.tests.test_linesearch.assert_fp_equal(x,y,err_msg='',nulp=50)
scipy.tests.test_linesearch.assert_line_armijo(x,p,s,f,**kw)
scipy.tests.test_linesearch.assert_line_wolfe(x,p,s,f,fprime,**kw)
scipy.tests.test_linesearch.assert_wolfe(s,phi,derphi,c1=0.0001,c2=0.9,err_msg='')


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/tests/test_anneal.py----------------------------------------
A:scipy.optimize.tests.test_anneal.res->minimize(self.fun[n], self.x0[n], method='anneal', options=opts)
A:scipy.optimize.tests.test_anneal.(x, retval)->anneal(self.fun[n], self.x0[n], full_output=False, upper=self.upper[n], lower=self.lower[n], feps=0.001, maxiter=self.maxiter, schedule=schedule, disp=False)
A:scipy.optimize.tests.test_anneal.retval->self.anneal_schedule('cauchy', use_wrapper)
scipy.optimize.tests.test_TestAnneal(TestCase)
scipy.optimize.tests.test_TestAnneal.anneal_schedule(self,schedule='fast',use_wrapper=False)
scipy.optimize.tests.test_TestAnneal.setUp(self)
scipy.optimize.tests.test_TestAnneal.test_boltzmann(self,use_wrapper=False)
scipy.optimize.tests.test_TestAnneal.test_cauchy(self,use_wrapper=False)
scipy.optimize.tests.test_TestAnneal.test_fast(self,use_wrapper=False)
scipy.optimize.tests.test_TestAnneal.test_minimize(self)
scipy.optimize.tests.test_anneal.TestAnneal(TestCase)
scipy.optimize.tests.test_anneal.TestAnneal.anneal_schedule(self,schedule='fast',use_wrapper=False)
scipy.optimize.tests.test_anneal.TestAnneal.setUp(self)
scipy.optimize.tests.test_anneal.TestAnneal.test_boltzmann(self,use_wrapper=False)
scipy.optimize.tests.test_anneal.TestAnneal.test_cauchy(self,use_wrapper=False)
scipy.optimize.tests.test_anneal.TestAnneal.test_fast(self,use_wrapper=False)
scipy.optimize.tests.test_anneal.TestAnneal.test_minimize(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/tests/test_minpack.py----------------------------------------
A:scipy.optimize.tests.test_minpack.F->numpy.hstack((P[1:] - P[0], flow_rates.sum() - Qtot))
A:scipy.optimize.tests.test_minpack.n->len(flow_rates)
A:scipy.optimize.tests.test_minpack.pdiff->numpy.diag(flow_rates[1:] * 2 * k[1:] - 2 * flow_rates[0] * k[0])
A:scipy.optimize.tests.test_minpack.jac->numpy.empty((n, n))
A:scipy.optimize.tests.test_minpack.jac[n - 1, :]->numpy.ones(n)
A:scipy.optimize.tests.test_minpack.initial_guess->array([2.0, 0.0, 2.0, 0.0])
A:scipy.optimize.tests.test_minpack.(final_flows, info, ier, mesg)->scipy.optimize.fsolve(pressure_network, initial_guess, args=(Qtot, k), full_output=True)
A:scipy.optimize.tests.test_minpack.final_flows->scipy.optimize.fsolve(pressure_network, initial_guess, args=(Qtot, k), fprime=pressure_network_jacobian)
A:scipy.optimize.tests.test_minpack.func->ReturnShape(1)
A:scipy.optimize.tests.test_minpack.deriv_func->ReturnShape((2, 2))
A:scipy.optimize.tests.test_minpack.p->scipy.optimize.fsolve(func, np.array([1, 1], np.float32))
A:scipy.optimize.tests.test_minpack.x->fixed_point(func, x0, args=(c,))
A:scipy.optimize.tests.test_minpack.p0->numpy.array([1.0, 1.0, 1.0, 1.0])
A:scipy.optimize.tests.test_minpack.(params_fit, ier)->leastsq(self.residuals, p0, args=(self.y_meas, self.x))
A:scipy.optimize.tests.test_minpack.full_output->leastsq(self.residuals, p0, args=(self.y_meas, self.x), full_output=True)
A:scipy.optimize.tests.test_minpack.p0_copy->array(p0, copy=True)
A:scipy.optimize.tests.test_minpack.y->numpy.array([0.0168, 0.0193, 0.0211, 0.0202, 0.0171, 0.0151, 0.0185, 0.0258, 0.034, 0.0396], dtype=np.float32)
A:scipy.optimize.tests.test_minpack.(p1, success)->scipy.optimize.leastsq(func, p0, args=(x, y))
A:scipy.optimize.tests.test_minpack.self.y->array([1.0, 3.2, 9.5, 13.7])
A:scipy.optimize.tests.test_minpack.self.x->array([1.0, 2.0, 3.0, 4.0])
A:scipy.optimize.tests.test_minpack.(popt, pcov)->curve_fit(test_self_inst.func, self.x, self.y)
A:scipy.optimize.tests.test_minpack.res->curve_fit(func, self.x, self.y, full_output=1)
A:scipy.optimize.tests.test_minpack.test_self_inst->test_self()
A:scipy.optimize.tests.test_minpack.olderr->numpy.seterr(all='ignore')
A:scipy.optimize.tests.test_minpack.c->array([0.75, 1.0, 1.25])
scipy.optimize.tests.test_ReturnShape(self,shape)
scipy.optimize.tests.test_TestCurveFit(TestCase)
scipy.optimize.tests.test_TestCurveFit.setUp(self)
scipy.optimize.tests.test_TestCurveFit.test_func_is_classmethod(self)
scipy.optimize.tests.test_TestCurveFit.test_one_argument(self)
scipy.optimize.tests.test_TestCurveFit.test_two_argument(self)
scipy.optimize.tests.test_TestFSolve(TestCase)
scipy.optimize.tests.test_TestFSolve.test_float32(self)
scipy.optimize.tests.test_TestFSolve.test_pressure_network_no_gradient(self)
scipy.optimize.tests.test_TestFSolve.test_pressure_network_with_gradient(self)
scipy.optimize.tests.test_TestFSolve.test_wrong_shape_fprime_callable(self)
scipy.optimize.tests.test_TestFSolve.test_wrong_shape_fprime_function(self)
scipy.optimize.tests.test_TestFSolve.test_wrong_shape_func_callable(self)
scipy.optimize.tests.test_TestFSolve.test_wrong_shape_func_function(self)
scipy.optimize.tests.test_TestFixedPoint(TestCase)
scipy.optimize.tests.test_TestFixedPoint.test_array_basic1(self)
scipy.optimize.tests.test_TestFixedPoint.test_array_basic2(self)
scipy.optimize.tests.test_TestFixedPoint.test_array_trivial(self)
scipy.optimize.tests.test_TestFixedPoint.test_scalar_basic1(self)
scipy.optimize.tests.test_TestFixedPoint.test_scalar_basic2(self)
scipy.optimize.tests.test_TestFixedPoint.test_scalar_trivial(self)
scipy.optimize.tests.test_TestLeastSq(TestCase)
scipy.optimize.tests.test_TestLeastSq.residuals(self,p,y,x)
scipy.optimize.tests.test_TestLeastSq.setUp(self)
scipy.optimize.tests.test_TestLeastSq.test_basic(self)
scipy.optimize.tests.test_TestLeastSq.test_float32(self)
scipy.optimize.tests.test_TestLeastSq.test_full_output(self)
scipy.optimize.tests.test_TestLeastSq.test_input_untouched(self)
scipy.optimize.tests.test_TestLeastSq.test_wrong_shape_Dfun_callable(self)
scipy.optimize.tests.test_TestLeastSq.test_wrong_shape_Dfun_function(self)
scipy.optimize.tests.test_TestLeastSq.test_wrong_shape_func_callable(self)
scipy.optimize.tests.test_TestLeastSq.test_wrong_shape_func_function(self)
scipy.optimize.tests.test_TestRootHybr(TestCase)
scipy.optimize.tests.test_TestRootHybr.test_pressure_network_no_gradient(self)
scipy.optimize.tests.test_TestRootHybr.test_pressure_network_with_gradient(self)
scipy.optimize.tests.test_TestRootHybr.test_pressure_network_with_gradient_combined(self)
scipy.optimize.tests.test_TestRootLM(TestCase)
scipy.optimize.tests.test_TestRootLM.test_pressure_network_no_gradient(self)
scipy.optimize.tests.test_dummy_func(x,shape)
scipy.optimize.tests.test_minpack.ReturnShape(self,shape)
scipy.optimize.tests.test_minpack.ReturnShape.__init__(self,shape)
scipy.optimize.tests.test_minpack.TestCurveFit(TestCase)
scipy.optimize.tests.test_minpack.TestCurveFit.setUp(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_func_is_classmethod(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_one_argument(self)
scipy.optimize.tests.test_minpack.TestCurveFit.test_two_argument(self)
scipy.optimize.tests.test_minpack.TestFSolve(TestCase)
scipy.optimize.tests.test_minpack.TestFSolve.test_float32(self)
scipy.optimize.tests.test_minpack.TestFSolve.test_pressure_network_no_gradient(self)
scipy.optimize.tests.test_minpack.TestFSolve.test_pressure_network_with_gradient(self)
scipy.optimize.tests.test_minpack.TestFSolve.test_wrong_shape_fprime_callable(self)
scipy.optimize.tests.test_minpack.TestFSolve.test_wrong_shape_fprime_function(self)
scipy.optimize.tests.test_minpack.TestFSolve.test_wrong_shape_func_callable(self)
scipy.optimize.tests.test_minpack.TestFSolve.test_wrong_shape_func_function(self)
scipy.optimize.tests.test_minpack.TestFixedPoint(TestCase)
scipy.optimize.tests.test_minpack.TestFixedPoint.test_array_basic1(self)
scipy.optimize.tests.test_minpack.TestFixedPoint.test_array_basic2(self)
scipy.optimize.tests.test_minpack.TestFixedPoint.test_array_trivial(self)
scipy.optimize.tests.test_minpack.TestFixedPoint.test_scalar_basic1(self)
scipy.optimize.tests.test_minpack.TestFixedPoint.test_scalar_basic2(self)
scipy.optimize.tests.test_minpack.TestFixedPoint.test_scalar_trivial(self)
scipy.optimize.tests.test_minpack.TestLeastSq(TestCase)
scipy.optimize.tests.test_minpack.TestLeastSq.residuals(self,p,y,x)
scipy.optimize.tests.test_minpack.TestLeastSq.setUp(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_basic(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_float32(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_full_output(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_input_untouched(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_wrong_shape_Dfun_callable(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_wrong_shape_Dfun_function(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_wrong_shape_func_callable(self)
scipy.optimize.tests.test_minpack.TestLeastSq.test_wrong_shape_func_function(self)
scipy.optimize.tests.test_minpack.TestRootHybr(TestCase)
scipy.optimize.tests.test_minpack.TestRootHybr.test_pressure_network_no_gradient(self)
scipy.optimize.tests.test_minpack.TestRootHybr.test_pressure_network_with_gradient(self)
scipy.optimize.tests.test_minpack.TestRootHybr.test_pressure_network_with_gradient_combined(self)
scipy.optimize.tests.test_minpack.TestRootLM(TestCase)
scipy.optimize.tests.test_minpack.TestRootLM.test_pressure_network_no_gradient(self)
scipy.optimize.tests.test_minpack.dummy_func(x,shape)
scipy.optimize.tests.test_minpack.pressure_network(flow_rates,Qtot,k)
scipy.optimize.tests.test_minpack.pressure_network_fun_and_grad(flow_rates,Qtot,k)
scipy.optimize.tests.test_minpack.pressure_network_jacobian(flow_rates,Qtot,k)
scipy.optimize.tests.test_pressure_network(flow_rates,Qtot,k)
scipy.optimize.tests.test_pressure_network_fun_and_grad(flow_rates,Qtot,k)
scipy.optimize.tests.test_pressure_network_jacobian(flow_rates,Qtot,k)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/tests/test_optimize.py----------------------------------------
A:scipy.optimize.tests.test_optimize.self.F->numpy.array([[1, 1, 1], [1, 1, 0], [1, 0, 1], [1, 0, 0], [1, 0, 0]])
A:scipy.optimize.tests.test_optimize.self.K->numpy.array([1.0, 0.3, 0.5])
A:scipy.optimize.tests.test_optimize.self.startparams->numpy.zeros(3, np.float64)
A:scipy.optimize.tests.test_optimize.self.solution->numpy.array([0.0, -0.524869316, 0.48752586])
A:scipy.optimize.tests.test_optimize.log_pdot->numpy.dot(self.F, x)
A:scipy.optimize.tests.test_optimize.logZ->numpy.log(sum(np.exp(log_pdot)))
A:scipy.optimize.tests.test_optimize.p->numpy.array([2, 2, 2])
A:scipy.optimize.tests.test_optimize.res->scipy.optimize.minimize(self.f1, x0, method='TNC', jac=self.g1, bounds=bnds, options=self.opts, callback=iterx.append)
A:scipy.optimize.tests.test_optimize.retval->scipy.optimize.fmin_l_bfgs_b(fun, self.startparams, maxiter=self.maxiter)
A:scipy.optimize.tests.test_optimize.olderr->numpy.seterr(over='ignore')
A:scipy.optimize.tests.test_optimize.x->numpy.array([3, 4, 5])
A:scipy.optimize.tests.test_optimize.params->scipy.optimize.fmin_bfgs(self.func, self.startparams, epsilon=epsilon, args=(), maxiter=self.maxiter, disp=False)
A:scipy.optimize.tests.test_optimize.sol->scipy.optimize.minimize(self.func, self.startparams, method='L-BFGS-B', jac=self.grad, options=opts)
A:scipy.optimize.tests.test_optimize.v->self.func(sol.x)
A:scipy.optimize.tests.test_optimize.sol1->scipy.optimize.minimize(func, [1, 1], jac=jac, tol=1e-10, method=method)
A:scipy.optimize.tests.test_optimize.sol2->scipy.optimize.minimize(func, [1, 1], jac=jac, tol=1.0, method=method)
A:scipy.optimize.tests.test_optimize.(x, f, d)->scipy.optimize.fmin_l_bfgs_b(self.fj, [0, -1], args=(2.0,), bounds=self.bounds)
A:scipy.optimize.tests.test_optimize.dif[0]->pow(x[0] + 1.0, 2)
A:scipy.optimize.tests.test_optimize.v1->numpy.cos(x[0] + x[1])
A:scipy.optimize.tests.test_optimize.(x, nf, rc)->scipy.optimize.fmin_tnc(fg, x, bounds=bounds, messages=optimize.tnc.MSG_NONE, maxfun=200)
A:scipy.optimize.tests.test_optimize.hp->scipy.optimize.rosen_hess_prod(x, p)
A:scipy.optimize.tests.test_optimize.dothp->numpy.dot(optimize.rosen_hess(x), p)
scipy.optimize.tests.test_optimize.TestLBFGSBBounds(TestCase)
scipy.optimize.tests.test_optimize.TestLBFGSBBounds.fj(self,x,p=2.0)
scipy.optimize.tests.test_optimize.TestLBFGSBBounds.fun(self,x,p=2.0)
scipy.optimize.tests.test_optimize.TestLBFGSBBounds.jac(self,x,p=2.0)
scipy.optimize.tests.test_optimize.TestLBFGSBBounds.setUp(self)
scipy.optimize.tests.test_optimize.TestLBFGSBBounds.test_l_bfgs_b_bounds(self)
scipy.optimize.tests.test_optimize.TestLBFGSBBounds.test_l_bfgs_b_funjac(self)
scipy.optimize.tests.test_optimize.TestLBFGSBBounds.test_minimize_l_bfgs_b_bounds(self)
scipy.optimize.tests.test_optimize.TestOptimize(TestCase)
scipy.optimize.tests.test_optimize.TestOptimize.func(self,x)
scipy.optimize.tests.test_optimize.TestOptimize.grad(self,x)
scipy.optimize.tests.test_optimize.TestOptimize.hess(self,x)
scipy.optimize.tests.test_optimize.TestOptimize.hessp(self,x,p)
scipy.optimize.tests.test_optimize.TestOptimize.setUp(self)
scipy.optimize.tests.test_optimize.TestOptimize.test_bfgs(self,use_wrapper=False)
scipy.optimize.tests.test_optimize.TestOptimize.test_bfgs_infinite(self,use_wrapper=False)
scipy.optimize.tests.test_optimize.TestOptimize.test_bfgs_nan(self)
scipy.optimize.tests.test_optimize.TestOptimize.test_bfgs_numerical_jacobian(self)
scipy.optimize.tests.test_optimize.TestOptimize.test_cg(self,use_wrapper=False)
scipy.optimize.tests.test_optimize.TestOptimize.test_l_bfgs_b(self)
scipy.optimize.tests.test_optimize.TestOptimize.test_l_bfgs_b_funjac(self)
scipy.optimize.tests.test_optimize.TestOptimize.test_l_bfgs_b_numjac(self)
scipy.optimize.tests.test_optimize.TestOptimize.test_minimize(self)
scipy.optimize.tests.test_optimize.TestOptimize.test_minimize_l_bfgs_b(self)
scipy.optimize.tests.test_optimize.TestOptimize.test_minimize_l_bfgs_b_ftol(self)
scipy.optimize.tests.test_optimize.TestOptimize.test_minimize_tol_parameter(self)
scipy.optimize.tests.test_optimize.TestOptimize.test_ncg(self,use_wrapper=False)
scipy.optimize.tests.test_optimize.TestOptimize.test_ncg_hess(self,use_wrapper=False)
scipy.optimize.tests.test_optimize.TestOptimize.test_ncg_hessp(self,use_wrapper=False)
scipy.optimize.tests.test_optimize.TestOptimize.test_neldermead(self,use_wrapper=False)
scipy.optimize.tests.test_optimize.TestOptimize.test_powell(self,use_wrapper=False)
scipy.optimize.tests.test_optimize.TestOptimizeScalar(TestCase)
scipy.optimize.tests.test_optimize.TestOptimizeScalar.fun(self,x,a=1.5)
scipy.optimize.tests.test_optimize.TestOptimizeScalar.setUp(self)
scipy.optimize.tests.test_optimize.TestOptimizeScalar.test_brent(self)
scipy.optimize.tests.test_optimize.TestOptimizeScalar.test_fminbound(self)
scipy.optimize.tests.test_optimize.TestOptimizeScalar.test_fminbound_scalar(self)
scipy.optimize.tests.test_optimize.TestOptimizeScalar.test_golden(self)
scipy.optimize.tests.test_optimize.TestOptimizeScalar.test_minimize_scalar(self)
scipy.optimize.tests.test_optimize.TestRosen(TestCase)
scipy.optimize.tests.test_optimize.TestRosen.test_hess(self)
scipy.optimize.tests.test_optimize.TestTnc(TestCase)
scipy.optimize.tests.test_optimize.TestTnc.f1(self,x,a=100.0)
scipy.optimize.tests.test_optimize.TestTnc.f3(self,x)
scipy.optimize.tests.test_optimize.TestTnc.f38(self,x)
scipy.optimize.tests.test_optimize.TestTnc.f4(self,x)
scipy.optimize.tests.test_optimize.TestTnc.f45(self,x)
scipy.optimize.tests.test_optimize.TestTnc.f5(self,x)
scipy.optimize.tests.test_optimize.TestTnc.fg1(self,x,a=100.0)
scipy.optimize.tests.test_optimize.TestTnc.fg3(self,x)
scipy.optimize.tests.test_optimize.TestTnc.fg38(self,x)
scipy.optimize.tests.test_optimize.TestTnc.fg4(self,x)
scipy.optimize.tests.test_optimize.TestTnc.fg45(self,x)
scipy.optimize.tests.test_optimize.TestTnc.fg5(self,x)
scipy.optimize.tests.test_optimize.TestTnc.g1(self,x,a=100.0)
scipy.optimize.tests.test_optimize.TestTnc.g3(self,x)
scipy.optimize.tests.test_optimize.TestTnc.g38(self,x)
scipy.optimize.tests.test_optimize.TestTnc.g4(self,x)
scipy.optimize.tests.test_optimize.TestTnc.g45(self,x)
scipy.optimize.tests.test_optimize.TestTnc.g5(self,x)
scipy.optimize.tests.test_optimize.TestTnc.setUp(self)
scipy.optimize.tests.test_optimize.TestTnc.test_minimize_tnc1(self)
scipy.optimize.tests.test_optimize.TestTnc.test_minimize_tnc1b(self)
scipy.optimize.tests.test_optimize.TestTnc.test_minimize_tnc1c(self)
scipy.optimize.tests.test_optimize.TestTnc.test_minimize_tnc2(self)
scipy.optimize.tests.test_optimize.TestTnc.test_minimize_tnc3(self)
scipy.optimize.tests.test_optimize.TestTnc.test_minimize_tnc38(self)
scipy.optimize.tests.test_optimize.TestTnc.test_minimize_tnc4(self)
scipy.optimize.tests.test_optimize.TestTnc.test_minimize_tnc45(self)
scipy.optimize.tests.test_optimize.TestTnc.test_minimize_tnc5(self)
scipy.optimize.tests.test_optimize.TestTnc.test_tnc1(self)
scipy.optimize.tests.test_optimize.TestTnc.test_tnc1b(self)
scipy.optimize.tests.test_optimize.TestTnc.test_tnc1c(self)
scipy.optimize.tests.test_optimize.TestTnc.test_tnc2(self)
scipy.optimize.tests.test_optimize.TestTnc.test_tnc3(self)
scipy.optimize.tests.test_optimize.TestTnc.test_tnc38(self)
scipy.optimize.tests.test_optimize.TestTnc.test_tnc4(self)
scipy.optimize.tests.test_optimize.TestTnc.test_tnc45(self)
scipy.optimize.tests.test_optimize.TestTnc.test_tnc5(self)
scipy.tests.test_TestLBFGSBBounds(TestCase)
scipy.tests.test_TestLBFGSBBounds.fj(self,x,p=2.0)
scipy.tests.test_TestLBFGSBBounds.fun(self,x,p=2.0)
scipy.tests.test_TestLBFGSBBounds.jac(self,x,p=2.0)
scipy.tests.test_TestLBFGSBBounds.setUp(self)
scipy.tests.test_TestLBFGSBBounds.test_l_bfgs_b_bounds(self)
scipy.tests.test_TestLBFGSBBounds.test_l_bfgs_b_funjac(self)
scipy.tests.test_TestLBFGSBBounds.test_minimize_l_bfgs_b_bounds(self)
scipy.tests.test_TestOptimize(TestCase)
scipy.tests.test_TestOptimize.func(self,x)
scipy.tests.test_TestOptimize.grad(self,x)
scipy.tests.test_TestOptimize.hess(self,x)
scipy.tests.test_TestOptimize.hessp(self,x,p)
scipy.tests.test_TestOptimize.setUp(self)
scipy.tests.test_TestOptimize.test_bfgs(self,use_wrapper=False)
scipy.tests.test_TestOptimize.test_bfgs_infinite(self,use_wrapper=False)
scipy.tests.test_TestOptimize.test_bfgs_nan(self)
scipy.tests.test_TestOptimize.test_bfgs_numerical_jacobian(self)
scipy.tests.test_TestOptimize.test_cg(self,use_wrapper=False)
scipy.tests.test_TestOptimize.test_l_bfgs_b(self)
scipy.tests.test_TestOptimize.test_l_bfgs_b_funjac(self)
scipy.tests.test_TestOptimize.test_l_bfgs_b_numjac(self)
scipy.tests.test_TestOptimize.test_minimize(self)
scipy.tests.test_TestOptimize.test_minimize_l_bfgs_b(self)
scipy.tests.test_TestOptimize.test_minimize_l_bfgs_b_ftol(self)
scipy.tests.test_TestOptimize.test_minimize_tol_parameter(self)
scipy.tests.test_TestOptimize.test_ncg(self,use_wrapper=False)
scipy.tests.test_TestOptimize.test_ncg_hess(self,use_wrapper=False)
scipy.tests.test_TestOptimize.test_ncg_hessp(self,use_wrapper=False)
scipy.tests.test_TestOptimize.test_neldermead(self,use_wrapper=False)
scipy.tests.test_TestOptimize.test_powell(self,use_wrapper=False)
scipy.tests.test_TestOptimizeScalar(TestCase)
scipy.tests.test_TestOptimizeScalar.fun(self,x,a=1.5)
scipy.tests.test_TestOptimizeScalar.setUp(self)
scipy.tests.test_TestOptimizeScalar.test_brent(self)
scipy.tests.test_TestOptimizeScalar.test_fminbound(self)
scipy.tests.test_TestOptimizeScalar.test_fminbound_scalar(self)
scipy.tests.test_TestOptimizeScalar.test_golden(self)
scipy.tests.test_TestOptimizeScalar.test_minimize_scalar(self)
scipy.tests.test_TestRosen(TestCase)
scipy.tests.test_TestRosen.test_hess(self)
scipy.tests.test_TestTnc(TestCase)
scipy.tests.test_TestTnc.f1(self,x,a=100.0)
scipy.tests.test_TestTnc.f3(self,x)
scipy.tests.test_TestTnc.f38(self,x)
scipy.tests.test_TestTnc.f4(self,x)
scipy.tests.test_TestTnc.f45(self,x)
scipy.tests.test_TestTnc.f5(self,x)
scipy.tests.test_TestTnc.fg1(self,x,a=100.0)
scipy.tests.test_TestTnc.fg3(self,x)
scipy.tests.test_TestTnc.fg38(self,x)
scipy.tests.test_TestTnc.fg4(self,x)
scipy.tests.test_TestTnc.fg45(self,x)
scipy.tests.test_TestTnc.fg5(self,x)
scipy.tests.test_TestTnc.g1(self,x,a=100.0)
scipy.tests.test_TestTnc.g3(self,x)
scipy.tests.test_TestTnc.g38(self,x)
scipy.tests.test_TestTnc.g4(self,x)
scipy.tests.test_TestTnc.g45(self,x)
scipy.tests.test_TestTnc.g5(self,x)
scipy.tests.test_TestTnc.setUp(self)
scipy.tests.test_TestTnc.test_minimize_tnc1(self)
scipy.tests.test_TestTnc.test_minimize_tnc1b(self)
scipy.tests.test_TestTnc.test_minimize_tnc1c(self)
scipy.tests.test_TestTnc.test_minimize_tnc2(self)
scipy.tests.test_TestTnc.test_minimize_tnc3(self)
scipy.tests.test_TestTnc.test_minimize_tnc38(self)
scipy.tests.test_TestTnc.test_minimize_tnc4(self)
scipy.tests.test_TestTnc.test_minimize_tnc45(self)
scipy.tests.test_TestTnc.test_minimize_tnc5(self)
scipy.tests.test_TestTnc.test_tnc1(self)
scipy.tests.test_TestTnc.test_tnc1b(self)
scipy.tests.test_TestTnc.test_tnc1c(self)
scipy.tests.test_TestTnc.test_tnc2(self)
scipy.tests.test_TestTnc.test_tnc3(self)
scipy.tests.test_TestTnc.test_tnc38(self)
scipy.tests.test_TestTnc.test_tnc4(self)
scipy.tests.test_TestTnc.test_tnc45(self)
scipy.tests.test_TestTnc.test_tnc5(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/tests/test__basinhopping.py----------------------------------------
A:scipy.optimize.tests.test__basinhopping.df->numpy.zeros(2)
A:scipy.optimize.tests.test__basinhopping.kwargs->dict(list(newkwargs.items()) + list(self.kwargs.items()))
A:scipy.optimize.tests.test__basinhopping.res->basinhopping(func2d, self.x0[i], minimizer_kwargs=self.kwargs, niter=30, disp=self.disp, callback=callback)
A:scipy.optimize.tests.test__basinhopping.minimizer_kwargs->copy.copy(self.kwargs)
A:scipy.optimize.tests.test__basinhopping.takestep->MyTakeStep1()
A:scipy.optimize.tests.test__basinhopping.accept_test->MyAcceptTest()
A:scipy.optimize.tests.test__basinhopping.callback->MyCallBack()
A:scipy.optimize.tests.test__basinhopping.self.x0->numpy.zeros([self.N])
A:scipy.optimize.tests.test__basinhopping.self.storage->Storage(self.x0, self.f0)
A:scipy.optimize.tests.test__basinhopping.ret->self.met(f_new=1.0, f_old=0.5)
A:scipy.optimize.tests.test__basinhopping.(x, f)->self.storage.get_lowest()
A:scipy.optimize.tests.test__basinhopping.self.displace->RandomDisplacement(stepsize=self.stepsize)
A:scipy.optimize.tests.test__basinhopping.x->self.displace(self.x0)
A:scipy.optimize.tests.test__basinhopping.self.met->Metropolis(self.T)
A:scipy.optimize.tests.test__basinhopping.self.ts->RandomDisplacement(stepsize=self.stepsize)
A:scipy.optimize.tests.test__basinhopping.self.takestep->AdaptiveStepsize(takestep=self.ts, verbose=False, accept_rate=self.target_accept_rate)
scipy.optimize.tests.test__basinhopping.Minimizer(self,func,**kwargs)
scipy.optimize.tests.test__basinhopping.Minimizer.__init__(self,func,**kwargs)
scipy.optimize.tests.test__basinhopping.MyAcceptTest(self)
scipy.optimize.tests.test__basinhopping.MyAcceptTest.__init__(self)
scipy.optimize.tests.test__basinhopping.MyCallBack(self)
scipy.optimize.tests.test__basinhopping.MyCallBack.__init__(self)
scipy.optimize.tests.test__basinhopping.MyTakeStep1(self)
scipy.optimize.tests.test__basinhopping.MyTakeStep1.__init__(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping(TestCase)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.setUp(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_1d_grad(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_2d(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_2d_nograd(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_TypeError(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_all_minimizers(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_njev(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_pass_accept_test(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_pass_callback(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_pass_simple_takestep(self)
scipy.optimize.tests.test__basinhopping.TestBasinHopping.test_pass_takestep(self)
scipy.optimize.tests.test__basinhopping.Test_AdaptiveStepsize(TestCase)
scipy.optimize.tests.test__basinhopping.Test_AdaptiveStepsize.setUp(self)
scipy.optimize.tests.test__basinhopping.Test_AdaptiveStepsize.test_adaptive_decrease(self)
scipy.optimize.tests.test__basinhopping.Test_AdaptiveStepsize.test_adaptive_increase(self)
scipy.optimize.tests.test__basinhopping.Test_AdaptiveStepsize.test_all_accepted(self)
scipy.optimize.tests.test__basinhopping.Test_AdaptiveStepsize.test_all_rejected(self)
scipy.optimize.tests.test__basinhopping.Test_Metropolis(TestCase)
scipy.optimize.tests.test__basinhopping.Test_Metropolis.setUp(self)
scipy.optimize.tests.test__basinhopping.Test_Metropolis.test_KeyError(self)
scipy.optimize.tests.test__basinhopping.Test_Metropolis.test_accept(self)
scipy.optimize.tests.test__basinhopping.Test_Metropolis.test_boolean_return(self)
scipy.optimize.tests.test__basinhopping.Test_Metropolis.test_lower_f_accepted(self)
scipy.optimize.tests.test__basinhopping.Test_RandomDisplacement(TestCase)
scipy.optimize.tests.test__basinhopping.Test_RandomDisplacement.setUp(self)
scipy.optimize.tests.test__basinhopping.Test_RandomDisplacement.test_random(self)
scipy.optimize.tests.test__basinhopping.Test_Storage(TestCase)
scipy.optimize.tests.test__basinhopping.Test_Storage.setUp(self)
scipy.optimize.tests.test__basinhopping.Test_Storage.test_higher_f_rejected(self)
scipy.optimize.tests.test__basinhopping.Test_Storage.test_lower_f_accepted(self)
scipy.optimize.tests.test__basinhopping.func1d(x)
scipy.optimize.tests.test__basinhopping.func1d_nograd(x)
scipy.optimize.tests.test__basinhopping.func2d(x)
scipy.optimize.tests.test__basinhopping.func2d_nograd(x)
scipy.optimize.tests.test__basinhopping.myTakeStep2(x)
scipy.tests.test__basinhopping.Minimizer(self,func,**kwargs)
scipy.tests.test__basinhopping.MyAcceptTest(self)
scipy.tests.test__basinhopping.MyCallBack(self)
scipy.tests.test__basinhopping.MyTakeStep1(self)
scipy.tests.test__basinhopping.TestBasinHopping(TestCase)
scipy.tests.test__basinhopping.TestBasinHopping.setUp(self)
scipy.tests.test__basinhopping.TestBasinHopping.test_1d_grad(self)
scipy.tests.test__basinhopping.TestBasinHopping.test_2d(self)
scipy.tests.test__basinhopping.TestBasinHopping.test_2d_nograd(self)
scipy.tests.test__basinhopping.TestBasinHopping.test_TypeError(self)
scipy.tests.test__basinhopping.TestBasinHopping.test_all_minimizers(self)
scipy.tests.test__basinhopping.TestBasinHopping.test_njev(self)
scipy.tests.test__basinhopping.TestBasinHopping.test_pass_accept_test(self)
scipy.tests.test__basinhopping.TestBasinHopping.test_pass_callback(self)
scipy.tests.test__basinhopping.TestBasinHopping.test_pass_simple_takestep(self)
scipy.tests.test__basinhopping.TestBasinHopping.test_pass_takestep(self)
scipy.tests.test__basinhopping.Test_AdaptiveStepsize(TestCase)
scipy.tests.test__basinhopping.Test_AdaptiveStepsize.setUp(self)
scipy.tests.test__basinhopping.Test_AdaptiveStepsize.test_adaptive_decrease(self)
scipy.tests.test__basinhopping.Test_AdaptiveStepsize.test_adaptive_increase(self)
scipy.tests.test__basinhopping.Test_AdaptiveStepsize.test_all_accepted(self)
scipy.tests.test__basinhopping.Test_AdaptiveStepsize.test_all_rejected(self)
scipy.tests.test__basinhopping.Test_Metropolis(TestCase)
scipy.tests.test__basinhopping.Test_Metropolis.setUp(self)
scipy.tests.test__basinhopping.Test_Metropolis.test_KeyError(self)
scipy.tests.test__basinhopping.Test_Metropolis.test_accept(self)
scipy.tests.test__basinhopping.Test_Metropolis.test_boolean_return(self)
scipy.tests.test__basinhopping.Test_Metropolis.test_lower_f_accepted(self)
scipy.tests.test__basinhopping.Test_RandomDisplacement(TestCase)
scipy.tests.test__basinhopping.Test_RandomDisplacement.setUp(self)
scipy.tests.test__basinhopping.Test_RandomDisplacement.test_random(self)
scipy.tests.test__basinhopping.Test_Storage(TestCase)
scipy.tests.test__basinhopping.Test_Storage.setUp(self)
scipy.tests.test__basinhopping.Test_Storage.test_higher_f_rejected(self)
scipy.tests.test__basinhopping.Test_Storage.test_lower_f_accepted(self)
scipy.tests.test__basinhopping.func1d(x)
scipy.tests.test__basinhopping.func1d_nograd(x)
scipy.tests.test__basinhopping.func2d(x)
scipy.tests.test__basinhopping.func2d_nograd(x)
scipy.tests.test__basinhopping.myTakeStep2(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/tests/test_cobyla.py----------------------------------------
A:scipy.optimize.tests.test_cobyla.x->fmin_cobyla(self.fun, self.x0, [self.con1, self.con2], rhobeg=1, rhoend=1e-05, iprint=0, maxfun=100)
A:scipy.optimize.tests.test_cobyla.sol->minimize(self.fun, self.x0, method='cobyla', constraints=cons, options=self.opts)
scipy.optimize.tests.test_cobyla.TestCobyla(TestCase)
scipy.optimize.tests.test_cobyla.TestCobyla.con1(self,x)
scipy.optimize.tests.test_cobyla.TestCobyla.con2(self,x)
scipy.optimize.tests.test_cobyla.TestCobyla.fun(self,x)
scipy.optimize.tests.test_cobyla.TestCobyla.setUp(self)
scipy.optimize.tests.test_cobyla.TestCobyla.test_minimize_simple(self)
scipy.optimize.tests.test_cobyla.TestCobyla.test_simple(self)
scipy.tests.test_cobyla.TestCobyla(TestCase)
scipy.tests.test_cobyla.TestCobyla.con1(self,x)
scipy.tests.test_cobyla.TestCobyla.con2(self,x)
scipy.tests.test_cobyla.TestCobyla.fun(self,x)
scipy.tests.test_cobyla.TestCobyla.setUp(self)
scipy.tests.test_cobyla.TestCobyla.test_minimize_simple(self)
scipy.tests.test_cobyla.TestCobyla.test_simple(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/tests/test_nonlin.py----------------------------------------
A:scipy.optimize.tests.test_nonlin.d->abs(a - b).max()
A:scipy.optimize.tests.test_nonlin.A->numpy.random.randn(N, N)
A:scipy.optimize.tests.test_nonlin.b->numpy.random.randn(N)
A:scipy.optimize.tests.test_nonlin.J0->numpy.array([[-4.256, 14.7], [0.8394989, 0.59964207]])
A:scipy.optimize.tests.test_nonlin.v->rand(N)
A:scipy.optimize.tests.test_nonlin.x->scipy.optimize.nonlin.diagbroyden(F, F.xin, iter=11, alpha=1)
A:scipy.optimize.tests.test_nonlin.res->root(F, F.xin, method='diagbroyden', options={'nit': 11, 'jac_options': {'alpha': 1}})
A:scipy.optimize.tests.test_nonlin.jac->jac_cls(**kw)
A:scipy.optimize.tests.test_nonlin.sol->scipy.optimize.nonlin.nonlin_solve(func, np.zeros(N), jac, maxiter=maxiter, f_tol=1e-06, line_search=None, verbose=0)
A:scipy.optimize.tests.test_nonlin.q->numpy.random.rand(*a)
A:scipy.optimize.tests.test_nonlin.self.A->rand(N, N)
A:scipy.optimize.tests.test_nonlin.x0->numpy.random.rand(N)
A:scipy.optimize.tests.test_nonlin.Jd->numpy.array(jac)
A:scipy.optimize.tests.test_nonlin.Gv->jac_cls(**kw).rsolve(v)
A:scipy.optimize.tests.test_nonlin.Gv2->numpy.linalg.solve(Jd.T.conj(), v)
A:scipy.optimize.tests.test_nonlin.Jv->jac_cls(**kw).rmatvec(v)
A:scipy.optimize.tests.test_nonlin.Jv2->jac_cls(**kw).rmatvec(jac.rsolve(Jv))
scipy.optimize.tests.test_F(x)
scipy.optimize.tests.test_F2(x)
scipy.optimize.tests.test_F3(x)
scipy.optimize.tests.test_F4_powell(x)
scipy.optimize.tests.test_F5(x)
scipy.optimize.tests.test_F6(x)
scipy.optimize.tests.test_TestJacobianDotSolve(object)
scipy.optimize.tests.test_TestJacobianDotSolve._check_dot(self,jac_cls,complex=False,tol=1e-06,**kw)
scipy.optimize.tests.test_TestJacobianDotSolve._func(self,x)
scipy.optimize.tests.test_TestJacobianDotSolve.test_anderson(self)
scipy.optimize.tests.test_TestJacobianDotSolve.test_broyden1(self)
scipy.optimize.tests.test_TestJacobianDotSolve.test_broyden2(self)
scipy.optimize.tests.test_TestJacobianDotSolve.test_diagbroyden(self)
scipy.optimize.tests.test_TestJacobianDotSolve.test_excitingmixing(self)
scipy.optimize.tests.test_TestJacobianDotSolve.test_krylov(self)
scipy.optimize.tests.test_TestJacobianDotSolve.test_linearmixing(self)
scipy.optimize.tests.test_TestLinear(TestCase)
scipy.optimize.tests.test_TestLinear._check(self,jac,N,maxiter,complex=False,**kw)
scipy.optimize.tests.test_TestLinear.test_anderson(self)
scipy.optimize.tests.test_TestLinear.test_broyden1(self)
scipy.optimize.tests.test_TestLinear.test_broyden2(self)
scipy.optimize.tests.test_TestLinear.test_krylov(self)
scipy.optimize.tests.test_TestNonlin(object)
scipy.optimize.tests.test_TestNonlin._check_func_fail(self,*a,**kw)
scipy.optimize.tests.test_TestNonlin._check_nonlin_func(self,f,func,f_tol=0.01)
scipy.optimize.tests.test_TestNonlin._check_root(self,f,method,f_tol=0.01)
scipy.optimize.tests.test_TestNonlin.test_problem_nonlin(self)
scipy.optimize.tests.test_TestNonlin.test_problem_root(self)
scipy.optimize.tests.test_TestNonlinOldTests(TestCase)
scipy.optimize.tests.test_TestNonlinOldTests.test_anderson(self)
scipy.optimize.tests.test_TestNonlinOldTests.test_broyden1(self)
scipy.optimize.tests.test_TestNonlinOldTests.test_broyden2(self)
scipy.optimize.tests.test_TestNonlinOldTests.test_diagbroyden(self)
scipy.optimize.tests.test_TestNonlinOldTests.test_exciting(self)
scipy.optimize.tests.test_TestNonlinOldTests.test_linearmixing(self)
scipy.optimize.tests.test_TestNonlinOldTests.test_root_anderson(self)
scipy.optimize.tests.test_TestNonlinOldTests.test_root_broyden1(self)
scipy.optimize.tests.test_TestNonlinOldTests.test_root_broyden2(self)
scipy.optimize.tests.test_TestNonlinOldTests.test_root_diagbroyden(self)
scipy.optimize.tests.test_TestNonlinOldTests.test_root_excitingmixing(self)
scipy.optimize.tests.test_TestNonlinOldTests.test_root_linearmixing(self)
scipy.optimize.tests.test_TestSecant(TestCase)
scipy.optimize.tests.test_TestSecant._check_secant(self,jac_cls,npoints=1,**kw)
scipy.optimize.tests.test_TestSecant.test_anderson(self)
scipy.optimize.tests.test_TestSecant.test_broyden1(self)
scipy.optimize.tests.test_TestSecant.test_broyden1_update(self)
scipy.optimize.tests.test_TestSecant.test_broyden2(self)
scipy.optimize.tests.test_TestSecant.test_broyden2_update(self)
scipy.optimize.tests.test_nonlin.F(x)
scipy.optimize.tests.test_nonlin.F2(x)
scipy.optimize.tests.test_nonlin.F3(x)
scipy.optimize.tests.test_nonlin.F4_powell(x)
scipy.optimize.tests.test_nonlin.F5(x)
scipy.optimize.tests.test_nonlin.F6(x)
scipy.optimize.tests.test_nonlin.TestJacobianDotSolve(object)
scipy.optimize.tests.test_nonlin.TestJacobianDotSolve._check_dot(self,jac_cls,complex=False,tol=1e-06,**kw)
scipy.optimize.tests.test_nonlin.TestJacobianDotSolve._func(self,x)
scipy.optimize.tests.test_nonlin.TestJacobianDotSolve.test_anderson(self)
scipy.optimize.tests.test_nonlin.TestJacobianDotSolve.test_broyden1(self)
scipy.optimize.tests.test_nonlin.TestJacobianDotSolve.test_broyden2(self)
scipy.optimize.tests.test_nonlin.TestJacobianDotSolve.test_diagbroyden(self)
scipy.optimize.tests.test_nonlin.TestJacobianDotSolve.test_excitingmixing(self)
scipy.optimize.tests.test_nonlin.TestJacobianDotSolve.test_krylov(self)
scipy.optimize.tests.test_nonlin.TestJacobianDotSolve.test_linearmixing(self)
scipy.optimize.tests.test_nonlin.TestLinear(TestCase)
scipy.optimize.tests.test_nonlin.TestLinear._check(self,jac,N,maxiter,complex=False,**kw)
scipy.optimize.tests.test_nonlin.TestLinear.test_anderson(self)
scipy.optimize.tests.test_nonlin.TestLinear.test_broyden1(self)
scipy.optimize.tests.test_nonlin.TestLinear.test_broyden2(self)
scipy.optimize.tests.test_nonlin.TestLinear.test_krylov(self)
scipy.optimize.tests.test_nonlin.TestNonlin(object)
scipy.optimize.tests.test_nonlin.TestNonlin._check_func_fail(self,*a,**kw)
scipy.optimize.tests.test_nonlin.TestNonlin._check_nonlin_func(self,f,func,f_tol=0.01)
scipy.optimize.tests.test_nonlin.TestNonlin._check_root(self,f,method,f_tol=0.01)
scipy.optimize.tests.test_nonlin.TestNonlin.test_problem_nonlin(self)
scipy.optimize.tests.test_nonlin.TestNonlin.test_problem_root(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests(TestCase)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_anderson(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_broyden1(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_broyden2(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_diagbroyden(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_exciting(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_linearmixing(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_root_anderson(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_root_broyden1(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_root_broyden2(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_root_diagbroyden(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_root_excitingmixing(self)
scipy.optimize.tests.test_nonlin.TestNonlinOldTests.test_root_linearmixing(self)
scipy.optimize.tests.test_nonlin.TestSecant(TestCase)
scipy.optimize.tests.test_nonlin.TestSecant._check_secant(self,jac_cls,npoints=1,**kw)
scipy.optimize.tests.test_nonlin.TestSecant.test_anderson(self)
scipy.optimize.tests.test_nonlin.TestSecant.test_broyden1(self)
scipy.optimize.tests.test_nonlin.TestSecant.test_broyden1_update(self)
scipy.optimize.tests.test_nonlin.TestSecant.test_broyden2(self)
scipy.optimize.tests.test_nonlin.TestSecant.test_broyden2_update(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/tests/test_slsqp.py----------------------------------------
A:scipy.optimize.tests.test_slsqp.res->fmin_slsqp(self.fun, [-1.0, 1.0], fprime=self.jac, args=(-1.0,), bounds=[(-0.8, 1.0), (-1, 0.8)], f_eqcons=self.f_eqcon, fprime_eqcons=self.fprime_eqcon, iprint=0, full_output=1)
A:scipy.optimize.tests.test_slsqp.x->fmin_slsqp(lambda z: z ** 2, [3.0], f_ieqcons=lambda z: [z[0] - 1], iprint=0)
scipy.optimize.tests.test_slsqp.TestSLSQP(TestCase)
scipy.optimize.tests.test_slsqp.TestSLSQP.f_eqcon(self,x,sign=1.0)
scipy.optimize.tests.test_slsqp.TestSLSQP.f_eqcon_scalar(self,x,sign=1.0)
scipy.optimize.tests.test_slsqp.TestSLSQP.f_ieqcon(self,x,sign=1.0)
scipy.optimize.tests.test_slsqp.TestSLSQP.f_ieqcon2(self,x)
scipy.optimize.tests.test_slsqp.TestSLSQP.fprime_eqcon(self,x,sign=1.0)
scipy.optimize.tests.test_slsqp.TestSLSQP.fprime_eqcon_scalar(self,x,sign=1.0)
scipy.optimize.tests.test_slsqp.TestSLSQP.fprime_ieqcon(self,x,sign=1.0)
scipy.optimize.tests.test_slsqp.TestSLSQP.fprime_ieqcon2(self,x)
scipy.optimize.tests.test_slsqp.TestSLSQP.fun(self,d,sign=1.0)
scipy.optimize.tests.test_slsqp.TestSLSQP.fun_and_jac(self,d,sign=1.0)
scipy.optimize.tests.test_slsqp.TestSLSQP.jac(self,d,sign=1.0)
scipy.optimize.tests.test_slsqp.TestSLSQP.setUp(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_bound_equality_given2(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_equality_approximated(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_equality_given(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_equality_given2(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_inequality_given(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_integer_bounds(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_bound_equality_given2(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_equality_approximated(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_equality_given(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_equality_given2(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_equality_given_cons_scalar(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_inequality_given(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_inequality_given_vector_constraints(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_unbounded_approximated(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_unbounded_combined(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_minimize_unbounded_given(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_scalar_constraints(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_unbounded_approximated(self)
scipy.optimize.tests.test_slsqp.TestSLSQP.test_unbounded_given(self)
scipy.tests.test_slsqp.TestSLSQP(TestCase)
scipy.tests.test_slsqp.TestSLSQP.f_eqcon(self,x,sign=1.0)
scipy.tests.test_slsqp.TestSLSQP.f_eqcon_scalar(self,x,sign=1.0)
scipy.tests.test_slsqp.TestSLSQP.f_ieqcon(self,x,sign=1.0)
scipy.tests.test_slsqp.TestSLSQP.f_ieqcon2(self,x)
scipy.tests.test_slsqp.TestSLSQP.fprime_eqcon(self,x,sign=1.0)
scipy.tests.test_slsqp.TestSLSQP.fprime_eqcon_scalar(self,x,sign=1.0)
scipy.tests.test_slsqp.TestSLSQP.fprime_ieqcon(self,x,sign=1.0)
scipy.tests.test_slsqp.TestSLSQP.fprime_ieqcon2(self,x)
scipy.tests.test_slsqp.TestSLSQP.fun(self,d,sign=1.0)
scipy.tests.test_slsqp.TestSLSQP.fun_and_jac(self,d,sign=1.0)
scipy.tests.test_slsqp.TestSLSQP.jac(self,d,sign=1.0)
scipy.tests.test_slsqp.TestSLSQP.setUp(self)
scipy.tests.test_slsqp.TestSLSQP.test_bound_equality_given2(self)
scipy.tests.test_slsqp.TestSLSQP.test_equality_approximated(self)
scipy.tests.test_slsqp.TestSLSQP.test_equality_given(self)
scipy.tests.test_slsqp.TestSLSQP.test_equality_given2(self)
scipy.tests.test_slsqp.TestSLSQP.test_inequality_given(self)
scipy.tests.test_slsqp.TestSLSQP.test_integer_bounds(self)
scipy.tests.test_slsqp.TestSLSQP.test_minimize_bound_equality_given2(self)
scipy.tests.test_slsqp.TestSLSQP.test_minimize_equality_approximated(self)
scipy.tests.test_slsqp.TestSLSQP.test_minimize_equality_given(self)
scipy.tests.test_slsqp.TestSLSQP.test_minimize_equality_given2(self)
scipy.tests.test_slsqp.TestSLSQP.test_minimize_equality_given_cons_scalar(self)
scipy.tests.test_slsqp.TestSLSQP.test_minimize_inequality_given(self)
scipy.tests.test_slsqp.TestSLSQP.test_minimize_inequality_given_vector_constraints(self)
scipy.tests.test_slsqp.TestSLSQP.test_minimize_unbounded_approximated(self)
scipy.tests.test_slsqp.TestSLSQP.test_minimize_unbounded_combined(self)
scipy.tests.test_slsqp.TestSLSQP.test_minimize_unbounded_given(self)
scipy.tests.test_slsqp.TestSLSQP.test_scalar_constraints(self)
scipy.tests.test_slsqp.TestSLSQP.test_unbounded_approximated(self)
scipy.tests.test_slsqp.TestSLSQP.test_unbounded_given(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/tests/test_zeros.py----------------------------------------
A:scipy.optimize.tests.test_zeros.b->sqrt(3)
A:scipy.optimize.tests.test_zeros.(zero, r)->method(function, a, b, xtol=1e-13, full_output=True)
A:scipy.optimize.tests.test_zeros.x->scipy.optimize.zeros.newton(f, 3, fprime=f_1, fprime2=f_2, tol=1e-06)
scipy.optimize.tests.test_TestBasic(TestCase)
scipy.optimize.tests.test_TestBasic.run_check(self,method,name)
scipy.optimize.tests.test_TestBasic.test_bisect(self)
scipy.optimize.tests.test_TestBasic.test_brenth(self)
scipy.optimize.tests.test_TestBasic.test_brentq(self)
scipy.optimize.tests.test_TestBasic.test_deriv_zero_warning(self)
scipy.optimize.tests.test_TestBasic.test_newton(self)
scipy.optimize.tests.test_TestBasic.test_ridder(self)
scipy.optimize.tests.test_zeros.TestBasic(TestCase)
scipy.optimize.tests.test_zeros.TestBasic.run_check(self,method,name)
scipy.optimize.tests.test_zeros.TestBasic.test_bisect(self)
scipy.optimize.tests.test_zeros.TestBasic.test_brenth(self)
scipy.optimize.tests.test_zeros.TestBasic.test_brentq(self)
scipy.optimize.tests.test_zeros.TestBasic.test_deriv_zero_warning(self)
scipy.optimize.tests.test_zeros.TestBasic.test_newton(self)
scipy.optimize.tests.test_zeros.TestBasic.test_ridder(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/tests/test_nnls.py----------------------------------------
A:scipy.optimize.tests.test_nnls.a->arange(25.0).reshape(-1, 5)
A:scipy.optimize.tests.test_nnls.x->arange(5.0)
A:scipy.optimize.tests.test_nnls.y->dot(a, x)
A:scipy.optimize.tests.test_nnls.(x, res)->nnls(a, y)
scipy.optimize.tests.test_nnls.TestNNLS(TestCase)
scipy.optimize.tests.test_nnls.TestNNLS.test_nnls(self)
scipy.tests.test_nnls.TestNNLS(TestCase)
scipy.tests.test_nnls.TestNNLS.test_nnls(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/tests/test__root.py----------------------------------------
A:scipy.optimize.tests.test__root.sol1->root(func, [1.1, 1.1], jac=jac, tol=0.0001, method=method)
A:scipy.optimize.tests.test__root.sol2->root(func, [1.1, 1.1], jac=jac, tol=0.5, method=method)
scipy.optimize.tests.test_TestRoot(object)
scipy.optimize.tests.test_TestRoot.test_tol_parameter(self)
scipy.optimize.tests.test__root.TestRoot(object)
scipy.optimize.tests.test__root.TestRoot.test_tol_parameter(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/tests/test_regression.py----------------------------------------
A:scipy.optimize.tests.test_regression.res->scipy.optimize.newton(lambda x: x - 1, 0)
A:scipy.optimize.tests.test_regression.root->scipy.optimize.newton(lambda x: x ** 2 - 1, x0=2, fprime=lambda x: 2 * x)
scipy.optimize.tests.test_regression.TestRegression(TestCase)
scipy.optimize.tests.test_regression.TestRegression.test_newton_integers(self)
scipy.optimize.tests.test_regression.TestRegression.test_newton_x0_is_0(self)
scipy.tests.test_regression.TestRegression(TestCase)
scipy.tests.test_regression.TestRegression.test_newton_integers(self)
scipy.tests.test_regression.TestRegression.test_newton_x0_is_0(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/optimize/benchmarks/bench_zeros.py----------------------------------------
A:scipy.optimize.benchmarks.bench_zeros.b->sqrt(3)
A:scipy.optimize.benchmarks.bench_zeros.t->measure('meth(func,a,b)', repeat)
scipy.optimize.benchmarks.bench_BenchZeros(TestCase)
scipy.optimize.benchmarks.bench_BenchZeros.bench_run(self)
scipy.optimize.benchmarks.bench_zeros.BenchZeros(TestCase)
scipy.optimize.benchmarks.bench_zeros.BenchZeros.bench_run(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/size_check.py----------------------------------------
A:scipy.weave.size_check.ex->ones((10, 10, 10), dtype=float32)
A:scipy.weave.size_check.ca_x->ones((10, 10, 10), dtype=float32)
A:scipy.weave.size_check.cb_y_x->ones((10, 10, 10), dtype=float32)
A:scipy.weave.size_check.cb_z_x->ones((10, 10, 10), dtype=float32)
A:scipy.weave.size_check.hz->ones((10, 10, 10), dtype=float32)
A:scipy.weave.size_check.hy->ones((10, 10, 10), dtype=float32)
A:scipy.weave.size_check.t1->time.time()
A:scipy.weave.size_check.passed->check_expr(expr, locals())
A:scipy.weave.size_check.t2->time.time()
A:scipy.weave.size_check.values[var]->dummy_array(val, name=var)
A:scipy.weave.size_check.empty->array(())
A:scipy.weave.size_check.empty_slice->slice(None)
A:scipy.weave.size_check.Nx->len(x)
A:scipy.weave.size_check.Ny->len(y)
A:scipy.weave.size_check.diff->abs(Nx - Ny)
A:scipy.weave.size_check.front->ones(diff, int)
A:scipy.weave.size_check.(x, y)->make_same_length(xx, yy)
A:scipy.weave.size_check.res->zeros(len(x))
A:scipy.weave.size_check.self.shape->shape(ary)
A:scipy.weave.size_check.new_shape->binary_op_size(self.shape, x)
A:scipy.weave.size_check.i->max(i, 0)
A:scipy.weave.size_check.j->max(j, 0)
A:scipy.weave.size_check.slc_len->abs(divide(end - beg - 1, step) + 1)
A:scipy.weave.size_check.val->str((self.name, str(self.shape)))
scipy.weave.size_check.binary_op_size(xx,yy)
scipy.weave.size_check.check_expr(expr,local_vars,global_vars={})
scipy.weave.size_check.dummy_array(self,ary,ary_is_shape=0,name=None)
scipy.weave.size_check.dummy_array.__abs__(self,other)
scipy.weave.size_check.dummy_array.__add__(self,other)
scipy.weave.size_check.dummy_array.__cmp__(self,other)
scipy.weave.size_check.dummy_array.__div__(self,other)
scipy.weave.size_check.dummy_array.__getitem__(self,indices)
scipy.weave.size_check.dummy_array.__getslice__(self,i,j)
scipy.weave.size_check.dummy_array.__init__(self,ary,ary_is_shape=0,name=None)
scipy.weave.size_check.dummy_array.__invert__(self,other)
scipy.weave.size_check.dummy_array.__len__(self)
scipy.weave.size_check.dummy_array.__lshift__(self,other)
scipy.weave.size_check.dummy_array.__mod__(self,other)
scipy.weave.size_check.dummy_array.__mul__(self,other)
scipy.weave.size_check.dummy_array.__neg__(self,other)
scipy.weave.size_check.dummy_array.__pos__(self,other)
scipy.weave.size_check.dummy_array.__radd__(self,other)
scipy.weave.size_check.dummy_array.__rdiv__(self,other)
scipy.weave.size_check.dummy_array.__repr__(self)
scipy.weave.size_check.dummy_array.__rmod__(self,other)
scipy.weave.size_check.dummy_array.__rmul__(self,other)
scipy.weave.size_check.dummy_array.__rshift__(self,other)
scipy.weave.size_check.dummy_array.__rsub__(self,other)
scipy.weave.size_check.dummy_array.__setitem__(self,indices,val)
scipy.weave.size_check.dummy_array.__sub__(self,other)
scipy.weave.size_check.dummy_array.binary_op(self,other)
scipy.weave.size_check.isnumeric(t)
scipy.weave.size_check.make_same_length(x,y)
scipy.weave.size_check.not_implemented(ary)
scipy.weave.size_check.reduction(ary,axis=0)
scipy.weave.size_check.take(ary,axis=0)
scipy.weave.size_check.time_it()
scipy.weave.size_check.unary(ary)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/base_info.py----------------------------------------
A:scipy.weave.base_info.vals->eval('info.' + attribute + '()')
scipy.weave.base_info.base_info(object)
scipy.weave.base_info.base_info.check_compiler(self,compiler)
scipy.weave.base_info.base_info.define_macros(self)
scipy.weave.base_info.base_info.extra_compile_args(self)
scipy.weave.base_info.base_info.extra_link_args(self)
scipy.weave.base_info.base_info.headers(self)
scipy.weave.base_info.base_info.include_dirs(self)
scipy.weave.base_info.base_info.libraries(self)
scipy.weave.base_info.base_info.library_dirs(self)
scipy.weave.base_info.base_info.module_init_code(self)
scipy.weave.base_info.base_info.set_compiler(self,compiler)
scipy.weave.base_info.base_info.sources(self)
scipy.weave.base_info.base_info.support_code(self)
scipy.weave.base_info.base_info.undefine_macros(self)
scipy.weave.base_info.base_info.warnings(self)
scipy.weave.base_info.custom_info(self)
scipy.weave.base_info.custom_info.__init__(self)
scipy.weave.base_info.custom_info.add_define_macro(self,define_macro)
scipy.weave.base_info.custom_info.add_extra_compile_arg(self,compile_arg)
scipy.weave.base_info.custom_info.add_extra_link_arg(self,link_arg)
scipy.weave.base_info.custom_info.add_header(self,header)
scipy.weave.base_info.custom_info.add_include_dir(self,include_dir)
scipy.weave.base_info.custom_info.add_library(self,library)
scipy.weave.base_info.custom_info.add_library_dir(self,library_dir)
scipy.weave.base_info.custom_info.add_module_init_code(self,module_init_code)
scipy.weave.base_info.custom_info.add_source(self,source)
scipy.weave.base_info.custom_info.add_support_code(self,support_code)
scipy.weave.base_info.custom_info.add_undefine_macro(self,undefine_macro)
scipy.weave.base_info.custom_info.add_warning(self,warning)
scipy.weave.base_info.info_list(UserList.UserList)
scipy.weave.base_info.info_list.define_macros(self)
scipy.weave.base_info.info_list.extra_compile_args(self)
scipy.weave.base_info.info_list.extra_link_args(self)
scipy.weave.base_info.info_list.get_unique_values(self,attribute)
scipy.weave.base_info.info_list.headers(self)
scipy.weave.base_info.info_list.include_dirs(self)
scipy.weave.base_info.info_list.libraries(self)
scipy.weave.base_info.info_list.library_dirs(self)
scipy.weave.base_info.info_list.module_init_code(self)
scipy.weave.base_info.info_list.sources(self)
scipy.weave.base_info.info_list.sources(self)
scipy.weave.base_info.info_list.support_code(self)
scipy.weave.base_info.info_list.warnings(self)
scipy.weave.base_info.unique_values(lst)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/numpy_scalar_spec.py----------------------------------------
scipy.weave.numpy_scalar_spec.numpy_complex_scalar_converter(c_spec.complex_converter)
scipy.weave.numpy_scalar_spec.numpy_complex_scalar_converter.init_info(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/common_info.py----------------------------------------
scipy.weave.common_info.basic_module_info(base_info.base_info)
scipy.weave.common_info.inline_info(base_info.base_info)
scipy.weave.common_info.swig_info(base_info.base_info)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/build_tools.py----------------------------------------
A:scipy.weave.build_tools.link_cmds->ld.replace('-arch i386', '').split()
A:scipy.weave.build_tools.ld->ld.replace('-arch i386', '').replace('-arch i386', '')
A:scipy.weave.build_tools.flags->flags.replace('-Wall', '').replace('-Wall', '')
A:scipy.weave.build_tools.(module_dir, cpp_name)->os.path.split(os.path.abspath(module_path))
A:scipy.weave.build_tools.(module_name, ext)->os.path.splitext(cpp_name)
A:scipy.weave.build_tools.sources->kw.get('sources', [])
A:scipy.weave.build_tools.extra_include_dirs->path_string.split(':')
A:scipy.weave.build_tools.include_dirs->kw.get('include_dirs', [])
A:scipy.weave.build_tools.version->sys.version.lower()
A:scipy.weave.build_tools.extra_link_args->kw.get('extra_link_args', [])
A:scipy.weave.build_tools.ext->create_extension(module_path, **kw)
A:scipy.weave.build_tools.temp_dir->tempfile.gettempdir()
A:scipy.weave.build_tools.build_dir->tempfile.gettempdir()
A:scipy.weave.build_tools.compiler_dir->platform_info.get_compiler_dir(compiler_name)
A:scipy.weave.build_tools.compiler_name->choose_compiler(compiler_name)
A:scipy.weave.build_tools.t1->time.time()
A:scipy.weave.build_tools.environ->copy.deepcopy(os.environ)
A:scipy.weave.build_tools.t2->time.time()
A:scipy.weave.build_tools.p->subprocess.Popen(['gcc', ' -dumpversion'], shell=True, stdout=subprocess.PIPE)
A:scipy.weave.build_tools.str_result->subprocess.Popen(['gcc', ' -dumpversion'], shell=True, stdout=subprocess.PIPE).stdout.read()
A:scipy.weave.build_tools.cc->distutils.msvccompiler.MSVCCompiler()
A:scipy.weave.build_tools.text->subprocess.Popen(['gcc', ' -dumpversion'], shell=True, stdout=subprocess.PIPE).stdout.read()
A:scipy.weave.build_tools.out_string->subprocess.Popen(['gcc', ' -dumpversion'], shell=True, stdout=subprocess.PIPE).stdout.read()
A:scipy.weave.build_tools.result->re.search('(\\d+\\.\\d+)', out_string)
A:scipy.weave.build_tools.self.gcc_version->StrictVersion(result.group(1))
A:scipy.weave.build_tools.full_path->os.path.join(sys.prefix, 'libs', lib_name)
A:scipy.weave.build_tools.lib_file->os.path.join(sys.prefix, 'libs', lib_name)
A:scipy.weave.build_tools.def_file->os.path.join(sys.prefix, 'libs', def_name)
A:scipy.weave.build_tools.nm_output->numpy.distutils.lib2def.getnm(nm_cmd)
A:scipy.weave.build_tools.(dlist, flist)->numpy.distutils.lib2def.parse_nm(nm_output)
A:scipy.weave.build_tools.out_file->os.path.join(sys.prefix, 'libs', out_name)
scipy.weave.build_tools.CompileError(Exception)
scipy.weave.build_tools._init_posix()
scipy.weave.build_tools.build_extension(module_path,compiler_name='',build_dir=None,temp_dir=None,verbose=0,**kw)
scipy.weave.build_tools.choose_compiler(compiler_name='')
scipy.weave.build_tools.configure_build_dir(build_dir=None)
scipy.weave.build_tools.configure_python_path(build_dir)
scipy.weave.build_tools.configure_sys_argv(compiler_name,temp_dir,build_dir)
scipy.weave.build_tools.configure_temp_dir(temp_dir=None)
scipy.weave.build_tools.create_extension(module_path,**kw)
scipy.weave.build_tools.gcc_exists(name='gcc')
scipy.weave.build_tools.msvc_exists()
scipy.weave.build_tools.restore_sys_argv()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/md5_load.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/platform_info.py----------------------------------------
A:scipy.weave.platform_info.dist->dummy_dist()
A:scipy.weave.platform_info.opts->dummy_dist().command_options.get('build_ext', None)
A:scipy.weave.platform_info.comp->dummy_dist().command_options.get('build_ext', None).get('compiler', ('', ''))
A:scipy.weave.platform_info.compiler->new_compiler(compiler=compiler_name)
A:scipy.weave.platform_info.path_string->os.path.expanduser(path_string)
A:scipy.weave.platform_info.paths->os.path.expanduser(path_string).split(os.pathsep)
A:scipy.weave.platform_info.path->get_compiler_dir('msvc')
A:scipy.weave.platform_info.f->open(file, 'r')
A:scipy.weave.platform_info.bytes->open(file, 'r').read(-1)
A:scipy.weave.platform_info.chk_sum->check_sum(exe_path)
A:scipy.weave.platform_info.compiler_type->choose_compiler(compiler_name)
A:scipy.weave.platform_info.compiler_obj->create_compiler_instance(dist)
A:scipy.weave.platform_info.exe_name->compiler_exe_name(compiler_obj)
A:scipy.weave.platform_info.exe_path->compiler_exe_path(exe_name)
A:scipy.weave.platform_info.p->subprocess.Popen(['cl'], shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
A:scipy.weave.platform_info.str_result->subprocess.Popen(['cl'], shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).stdout.read()
A:scipy.weave.platform_info.version->distutils.msvccompiler.get_build_version()
scipy.weave.platform_info.check_sum(file)
scipy.weave.platform_info.choose_compiler(compiler_name='')
scipy.weave.platform_info.compiler_exe_name(compiler)
scipy.weave.platform_info.compiler_exe_path(exe_name)
scipy.weave.platform_info.configure_sys_argv(compiler_name)
scipy.weave.platform_info.create_compiler_instance(dist)
scipy.weave.platform_info.dummy_dist()
scipy.weave.platform_info.gcc_exists(name='gcc')
scipy.weave.platform_info.get_compiler_dir(compiler_name)
scipy.weave.platform_info.msvc_exists()
scipy.weave.platform_info.restore_sys_argv()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/blitz_spec.py----------------------------------------
A:scipy.weave.blitz_spec.(local_dir, junk)->os.path.split(os.path.abspath(__file__))
A:scipy.weave.blitz_spec.blitz_dir->os.path.join(local_dir, 'blitz')
A:scipy.weave.blitz_spec.new_spec->standard_array_spec.array_converter.type_spec(self, name, value)
A:scipy.weave.blitz_spec.new_spec.dims->len(value.shape)
A:scipy.weave.blitz_spec.res->standard_array_spec.array_converter.template_vars(self, inline)
scipy.weave.blitz_spec.array_converter(standard_array_spec.array_converter)
scipy.weave.blitz_spec.array_converter.__cmp__(self,other)
scipy.weave.blitz_spec.array_converter.declaration_code(self,templatize=0,inline=0)
scipy.weave.blitz_spec.array_converter.info_object(self)
scipy.weave.blitz_spec.array_converter.init_info(self)
scipy.weave.blitz_spec.array_converter.template_vars(self,inline=0)
scipy.weave.blitz_spec.array_converter.type_spec(self,name,value)
scipy.weave.blitz_spec.array_info(base_info.custom_info)
scipy.weave.blitz_spec.array_info.check_compiler(self,compiler)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/base_spec.py----------------------------------------
A:scipy.weave.base_spec.all_info->base_info.info_list()
scipy.weave.base_spec.arg_spec_list(UserList.UserList)
scipy.weave.base_spec.arg_spec_list.build_information(self)
scipy.weave.base_spec.arg_spec_list.init_flags(self)
scipy.weave.base_spec.arg_spec_list.pointers(self)
scipy.weave.base_spec.arg_spec_list.py_pointers(self)
scipy.weave.base_spec.arg_spec_list.py_references(self)
scipy.weave.base_spec.arg_spec_list.py_variables(self)
scipy.weave.base_spec.arg_spec_list.references(self)
scipy.weave.base_spec.arg_spec_list.variable_as_strings(self)
scipy.weave.base_spec.arg_spec_list.variables(self)
scipy.weave.base_spec.base_converter(object)
scipy.weave.base_spec.base_converter.build_information(self)
scipy.weave.base_spec.base_converter.cleanup_code(self)
scipy.weave.base_spec.base_converter.declaration_code(self,templatize=0)
scipy.weave.base_spec.base_converter.init_flag(self)
scipy.weave.base_spec.base_converter.local_dict_code(self)
scipy.weave.base_spec.base_converter.pointer(self)
scipy.weave.base_spec.base_converter.py_pointer(self)
scipy.weave.base_spec.base_converter.py_reference(self)
scipy.weave.base_spec.base_converter.py_variable(self)
scipy.weave.base_spec.base_converter.reference(self)
scipy.weave.base_spec.base_converter.retrieve_py_variable(self,inline=0)
scipy.weave.base_spec.base_converter.set_compiler(self,compiler)
scipy.weave.base_spec.base_converter.type_match(self,value)
scipy.weave.base_spec.base_converter.type_spec(self,name,value)
scipy.weave.base_spec.base_converter.variable(self)
scipy.weave.base_spec.base_converter.variable_as_string(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/setupscons.py----------------------------------------
A:scipy.weave.setupscons.config->Configuration('weave', parent_package, top_path)
scipy.weave.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/inline_tools.py----------------------------------------
A:scipy.weave.inline_tools.function_catalog->catalog.catalog()
A:scipy.weave.inline_tools.py_objects->', '.join(self.arg_specs.py_pointers())
A:scipy.weave.inline_tools.py_vars->' = '.join(self.arg_specs.py_variables())
A:scipy.weave.inline_tools.decl_code->indent(self.arg_declaration_code(), 4)
A:scipy.weave.inline_tools.cleanup_code->indent(self.arg_cleanup_code(), 4)
A:scipy.weave.inline_tools.function_code->indent(self.code_block, 4)
A:scipy.weave.inline_tools.module_dir->global_dict.get('__file__', None)
A:scipy.weave.inline_tools.func->eval(module_name + '.compiled_func')
A:scipy.weave.inline_tools.results->apply(func, (local_dict, global_dict))
A:scipy.weave.inline_tools.msg->str(msg).strip()
A:scipy.weave.inline_tools.function_list->catalog.catalog().get_functions(code, module_dir)
A:scipy.weave.inline_tools.ext_func->inline_ext_function('compiled_func', code, arg_names, local_dict, global_dict, auto_downcast, type_converters=type_converters)
A:scipy.weave.inline_tools.compiler->build_tools.choose_compiler(compiler)
A:scipy.weave.inline_tools.module_path->catalog.catalog().unique_module_name(code, module_dir)
A:scipy.weave.inline_tools.(storage_dir, module_name)->os.path.split(module_path)
A:scipy.weave.inline_tools.mod->inline_ext_module(module_name, compiler)
scipy.weave.inline(code,arg_names=[],local_dict=None,global_dict=None,force=0,compiler='',verbose=0,support_code=None,headers=[],customize=None,type_converters=None,auto_downcast=1,newarr_converter=0,**kw)
scipy.weave.inline_ext_function(ext_tools.ext_function)
scipy.weave.inline_ext_function.arg_cleanup_code(self)
scipy.weave.inline_ext_function.arg_declaration_code(self)
scipy.weave.inline_ext_function.arg_local_dict_code(self)
scipy.weave.inline_ext_function.function_code(self)
scipy.weave.inline_ext_function.function_declaration_code(self)
scipy.weave.inline_ext_function.parse_tuple_code(self)
scipy.weave.inline_ext_function.python_function_definition_code(self)
scipy.weave.inline_ext_function.template_declaration_code(self)
scipy.weave.inline_ext_module(self,name,compiler='')
scipy.weave.inline_function_code(code,arg_names,local_dict=None,global_dict=None,auto_downcast=1,type_converters=None,compiler='')
scipy.weave.inline_tools.attempt_function_call(code,local_dict,global_dict)
scipy.weave.inline_tools.compile_function(code,arg_names,local_dict,global_dict,module_dir,compiler='',verbose=1,support_code=None,headers=[],customize=None,type_converters=None,auto_downcast=1,**kw)
scipy.weave.inline_tools.inline(code,arg_names=[],local_dict=None,global_dict=None,force=0,compiler='',verbose=0,support_code=None,headers=[],customize=None,type_converters=None,auto_downcast=1,newarr_converter=0,**kw)
scipy.weave.inline_tools.inline_ext_function(ext_tools.ext_function)
scipy.weave.inline_tools.inline_ext_function.arg_cleanup_code(self)
scipy.weave.inline_tools.inline_ext_function.arg_declaration_code(self)
scipy.weave.inline_tools.inline_ext_function.arg_local_dict_code(self)
scipy.weave.inline_tools.inline_ext_function.function_code(self)
scipy.weave.inline_tools.inline_ext_function.function_declaration_code(self)
scipy.weave.inline_tools.inline_ext_function.parse_tuple_code(self)
scipy.weave.inline_tools.inline_ext_function.python_function_definition_code(self)
scipy.weave.inline_tools.inline_ext_function.template_declaration_code(self)
scipy.weave.inline_tools.inline_ext_module(self,name,compiler='')
scipy.weave.inline_tools.inline_ext_module.__init__(self,name,compiler='')
scipy.weave.inline_tools.inline_function_code(code,arg_names,local_dict=None,global_dict=None,auto_downcast=1,type_converters=None,compiler='')


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/bytecodecompiler.py----------------------------------------
A:scipy.weave.bytecodecompiler.length->len(s)
A:scipy.weave.bytecodecompiler.bytecode->ord(s[i])
A:scipy.weave.bytecodecompiler.lines->open(filename).readlines()
A:scipy.weave.bytecodecompiler.opcode->ord(code[pc])
A:scipy.weave.bytecodecompiler.method->getattr(self, name)
A:scipy.weave.bytecodecompiler.(next, opcode, argument)->self.fetch(pc, code)
A:scipy.weave.bytecodecompiler.goto->self.execute(next, opcode, argument)
A:scipy.weave.bytecodecompiler.self.stack->list(self.codeobject.co_varnames)
A:scipy.weave.bytecodecompiler.bytes->len(code)
A:scipy.weave.bytecodecompiler.pc->self.evaluate(pc, code)
A:scipy.weave.bytecodecompiler.source->inspect.getsource(self.function)
A:scipy.weave.bytecodecompiler.comments->inspect.getcomments(self.function)
A:scipy.weave.bytecodecompiler.code->self.generate()
A:scipy.weave.bytecodecompiler.(result, owned)->self.rtype.outbound('_result')
A:scipy.weave.bytecodecompiler.descriptor->self.function_by_signature(signature)
A:scipy.weave.bytecodecompiler.rhs->self.function_by_signature(signature).literalizer(v)
A:scipy.weave.bytecodecompiler.lhs->self.unique()
A:scipy.weave.bytecodecompiler.myHash->id(self.function.func_globals)
A:scipy.weave.bytecodecompiler.(v2, t2)->self.pop()
A:scipy.weave.bytecodecompiler.(v1, t1)->self.pop()
A:scipy.weave.bytecodecompiler.(rhs, rhs_type)->t1.setitem(v1, v2, t2)
A:scipy.weave.bytecodecompiler.(v0, t0)->self.pop()
A:scipy.weave.bytecodecompiler.symbol->self.cmp_op(opname)
A:scipy.weave.bytecodecompiler.w->self.unique()
A:scipy.weave.bytecodecompiler.(v, t)->self.pop()
A:scipy.weave.bytecodecompiler.py->self.unique()
A:scipy.weave.bytecodecompiler.(code, owned)->self.function_by_signature(signature).outbound(v)
A:scipy.weave.bytecodecompiler.t->type(F)
A:scipy.weave.bytecodecompiler.(aType, aCode)->type(F).set_attribute(attr_name)
A:scipy.weave.bytecodecompiler.(module_name, var_name)->self.global_info(var_num)
A:scipy.weave.bytecodecompiler.native->self.unique()
A:scipy.weave.bytecodecompiler.mod->self.unique()
A:scipy.weave.bytecodecompiler.(f, t)->self.pop()
A:scipy.weave.bytecodecompiler.temp->self.unique()
scipy.weave.bytecodecompiler.ByteCodeMeaning(object)
scipy.weave.bytecodecompiler.ByteCodeMeaning.BINARY_ADD(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.BINARY_AND(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.BINARY_DIVIDE(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.BINARY_LSHIFT(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.BINARY_MODULO(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.BINARY_MULTIPLY(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.BINARY_OR(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.BINARY_POWER(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.BINARY_RSHIFT(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.BINARY_SUBSCR(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.BINARY_SUBTRACT(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.BINARY_XOR(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.BREAK_LOOP(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.BUILD_CLASS(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.BUILD_LIST(self,pc,count)
scipy.weave.bytecodecompiler.ByteCodeMeaning.BUILD_MAP(self,pc,zero)
scipy.weave.bytecodecompiler.ByteCodeMeaning.BUILD_SLICE(self,pc,argc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.BUILD_TUPLE(self,pc,count)
scipy.weave.bytecodecompiler.ByteCodeMeaning.CALL_FUNCTION(self,pc,argc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.CALL_FUNCTION_KW(self,pc,argc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.CALL_FUNCTION_VAR(self,pc,argc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.CALL_FUNCTION_VAR_KW(self,pc,argc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.COMPARE_OP(self,pc,opname)
scipy.weave.bytecodecompiler.ByteCodeMeaning.DELETE_ATTR(self,pc,namei)
scipy.weave.bytecodecompiler.ByteCodeMeaning.DELETE_FAST(self,pc,var_num)
scipy.weave.bytecodecompiler.ByteCodeMeaning.DELETE_GLOBAL(self,pc,namei)
scipy.weave.bytecodecompiler.ByteCodeMeaning.DELETE_NAME(self,pc,namei)
scipy.weave.bytecodecompiler.ByteCodeMeaning.DELETE_SLICE_0(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.DELETE_SLICE_1(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.DELETE_SLICE_2(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.DELETE_SLICE_3(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.DELETE_SUBSCR(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.DUP_TOP(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.DUP_TOPX(self,pc,count)
scipy.weave.bytecodecompiler.ByteCodeMeaning.END_FINALLY(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.EXEC_STMT(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.EXTENDED_ARG(self,pc,ext)
scipy.weave.bytecodecompiler.ByteCodeMeaning.FOR_LOOP(self,pc,delta)
scipy.weave.bytecodecompiler.ByteCodeMeaning.IMPORT_FROM(self,pc,namei)
scipy.weave.bytecodecompiler.ByteCodeMeaning.IMPORT_NAME(self,pc,namei)
scipy.weave.bytecodecompiler.ByteCodeMeaning.IMPORT_STAR(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.INPLACE_ADD(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.INPLACE_AND(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.INPLACE_DIVIDE(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.INPLACE_LSHIFT(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.INPLACE_MODULO(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.INPLACE_MULTIPLY(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.INPLACE_OR(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.INPLACE_POWER(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.INPLACE_RSHIFT(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.INPLACE_SUBTRACT(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.INPLACE_XOR(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.JUMP_ABSOLUTE(self,pc,target)
scipy.weave.bytecodecompiler.ByteCodeMeaning.JUMP_FORWARD(self,pc,delta)
scipy.weave.bytecodecompiler.ByteCodeMeaning.JUMP_IF_FALSE(self,pc,delta)
scipy.weave.bytecodecompiler.ByteCodeMeaning.JUMP_IF_TRUE(self,pc,delta)
scipy.weave.bytecodecompiler.ByteCodeMeaning.LOAD_ATTR(self,pc,namei)
scipy.weave.bytecodecompiler.ByteCodeMeaning.LOAD_CLOSURE(self,pc,i)
scipy.weave.bytecodecompiler.ByteCodeMeaning.LOAD_CONST(self,pc,consti)
scipy.weave.bytecodecompiler.ByteCodeMeaning.LOAD_DEREF(self,pc,i)
scipy.weave.bytecodecompiler.ByteCodeMeaning.LOAD_FAST(self,pc,var_num)
scipy.weave.bytecodecompiler.ByteCodeMeaning.LOAD_GLOBAL(self,pc,namei)
scipy.weave.bytecodecompiler.ByteCodeMeaning.LOAD_LOCALS(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.LOAD_NAME(self,pc,namei)
scipy.weave.bytecodecompiler.ByteCodeMeaning.MAKE_CLOSURE(self,pc,argc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.MAKE_FUNCTION(self,pc,argc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.POP_BLOCK(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.POP_TOP(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.PRINT_EXPR(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.PRINT_ITEM(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.PRINT_ITEM_TO(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.PRINT_NEWLINE(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.PRINT_NEWLINE_TO(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.RAISE_VARARGS(self,pc,argc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.RETURN_VALUE(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.ROT_FOUR(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.ROT_THREE(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.ROT_TWO(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.SETUP_EXCEPT(self,pc,delta)
scipy.weave.bytecodecompiler.ByteCodeMeaning.SETUP_FINALLY(self,pc,delta)
scipy.weave.bytecodecompiler.ByteCodeMeaning.SETUP_LOOP(self,pc,delta)
scipy.weave.bytecodecompiler.ByteCodeMeaning.SET_LINENO(self,pc,lineno)
scipy.weave.bytecodecompiler.ByteCodeMeaning.SLICE_0(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.SLICE_1(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.SLICE_2(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.SLICE_3(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.STOP_CODE(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.STORE_ATTR(self,pc,namei)
scipy.weave.bytecodecompiler.ByteCodeMeaning.STORE_DEREF(self,pc,i)
scipy.weave.bytecodecompiler.ByteCodeMeaning.STORE_FAST(self,pc,var_num)
scipy.weave.bytecodecompiler.ByteCodeMeaning.STORE_GLOBAL(self,pc,namei)
scipy.weave.bytecodecompiler.ByteCodeMeaning.STORE_NAME(self,pc,namei)
scipy.weave.bytecodecompiler.ByteCodeMeaning.STORE_SLICE_0(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.STORE_SLICE_1(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.STORE_SLICE_2(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.STORE_SLICE_3(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.STORE_SUBSCR(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.UNARY_CONVERT(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.UNARY_INVERT(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.UNARY_NEGATIVE(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.UNARY_NOT(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.UNARY_POSITIVE(self,pc)
scipy.weave.bytecodecompiler.ByteCodeMeaning.UNPACK_SEQUENCE(self,pc,count)
scipy.weave.bytecodecompiler.ByteCodeMeaning.cmp_op(self,opname)
scipy.weave.bytecodecompiler.ByteCodeMeaning.evaluate(self,pc,code)
scipy.weave.bytecodecompiler.ByteCodeMeaning.execute(self,pc,opcode,argument)
scipy.weave.bytecodecompiler.ByteCodeMeaning.fetch(self,pc,code)
scipy.weave.bytecodecompiler.CXXCoder(self,function,signature,name=None)
scipy.weave.bytecodecompiler.CXXCoder.BINARY_ADD(self,pc)
scipy.weave.bytecodecompiler.CXXCoder.BINARY_DIVIDE(self,pc)
scipy.weave.bytecodecompiler.CXXCoder.BINARY_MODULO(self,pc)
scipy.weave.bytecodecompiler.CXXCoder.BINARY_MULTIPLY(self,pc)
scipy.weave.bytecodecompiler.CXXCoder.BINARY_SUBSCR(self,pc)
scipy.weave.bytecodecompiler.CXXCoder.BINARY_SUBTRACT(self,pc)
scipy.weave.bytecodecompiler.CXXCoder.BUILD_TUPLE(self,pc,count)
scipy.weave.bytecodecompiler.CXXCoder.CALL_FUNCTION(self,pc,argc)
scipy.weave.bytecodecompiler.CXXCoder.COMPARE_OP(self,pc,opname)
scipy.weave.bytecodecompiler.CXXCoder.FOR_LOOP(self,pc,delta)
scipy.weave.bytecodecompiler.CXXCoder.JUMP_ABSOLUTE(self,pc,target)
scipy.weave.bytecodecompiler.CXXCoder.JUMP_FORWARD(self,pc,delta)
scipy.weave.bytecodecompiler.CXXCoder.JUMP_IF_FALSE(self,pc,delta)
scipy.weave.bytecodecompiler.CXXCoder.LOAD_ATTR(self,pc,namei)
scipy.weave.bytecodecompiler.CXXCoder.LOAD_CONST(self,pc,consti)
scipy.weave.bytecodecompiler.CXXCoder.LOAD_FAST(self,pc,var_num)
scipy.weave.bytecodecompiler.CXXCoder.LOAD_GLOBAL(self,pc,var_num)
scipy.weave.bytecodecompiler.CXXCoder.POP_BLOCK(self,pc)
scipy.weave.bytecodecompiler.CXXCoder.POP_TOP(self,pc)
scipy.weave.bytecodecompiler.CXXCoder.PRINT_ITEM(self,pc)
scipy.weave.bytecodecompiler.CXXCoder.PRINT_NEWLINE(self,pc)
scipy.weave.bytecodecompiler.CXXCoder.RETURN_VALUE(self,pc)
scipy.weave.bytecodecompiler.CXXCoder.SETUP_LOOP(self,pc,delta)
scipy.weave.bytecodecompiler.CXXCoder.SET_LINENO(self,pc,lineno)
scipy.weave.bytecodecompiler.CXXCoder.STORE_ATTR(self,pc,namei)
scipy.weave.bytecodecompiler.CXXCoder.STORE_FAST(self,pc,var_num)
scipy.weave.bytecodecompiler.CXXCoder.STORE_GLOBAL(self,pc,var_num)
scipy.weave.bytecodecompiler.CXXCoder.STORE_SUBSCR(self,pc)
scipy.weave.bytecodecompiler.CXXCoder.__init__(self,function,signature,name=None)
scipy.weave.bytecodecompiler.CXXCoder.binop(self,pc,symbol)
scipy.weave.bytecodecompiler.CXXCoder.codeup(self,rhs,rhs_type)
scipy.weave.bytecodecompiler.CXXCoder.dedent(self)
scipy.weave.bytecodecompiler.CXXCoder.emit(self,s)
scipy.weave.bytecodecompiler.CXXCoder.emit_value(self,v)
scipy.weave.bytecodecompiler.CXXCoder.evaluate(self,pc,code)
scipy.weave.bytecodecompiler.CXXCoder.generate(self)
scipy.weave.bytecodecompiler.CXXCoder.global_info(self,var_num)
scipy.weave.bytecodecompiler.CXXCoder.indent(self)
scipy.weave.bytecodecompiler.CXXCoder.multiarg(self)
scipy.weave.bytecodecompiler.CXXCoder.pop(self)
scipy.weave.bytecodecompiler.CXXCoder.popTuple(self)
scipy.weave.bytecodecompiler.CXXCoder.post(self,pc,action)
scipy.weave.bytecodecompiler.CXXCoder.push(self,v,t)
scipy.weave.bytecodecompiler.CXXCoder.pushTuple(self,V,T)
scipy.weave.bytecodecompiler.CXXCoder.typedef_by_value(self,v)
scipy.weave.bytecodecompiler.CXXCoder.unique(self)
scipy.weave.bytecodecompiler.CXXCoder.wrapped_code(self)
scipy.weave.bytecodecompiler.Function_Descriptor(self,code,return_type,support='')
scipy.weave.bytecodecompiler.Function_Descriptor.__init__(self,code,return_type,support='')
scipy.weave.bytecodecompiler.Type_Descriptor(__Descriptor)
scipy.weave.bytecodecompiler.__Descriptor(object)
scipy.weave.bytecodecompiler.__Descriptor.__repr__(self)
scipy.weave.bytecodecompiler.listing(f)
scipy.weave.bytecodecompiler.opcodize(s)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/vtk_spec.py----------------------------------------
A:scipy.weave.vtk_spec.res->base_info.base_info()
A:scipy.weave.vtk_spec.new_spec->self.__class__(class_name)
scipy.weave.vtk_spec.vtk_converter(self,class_name='undefined')
scipy.weave.vtk_spec.vtk_converter.__cmp__(self,other)
scipy.weave.vtk_spec.vtk_converter.__init__(self,class_name='undefined')
scipy.weave.vtk_spec.vtk_converter.c_to_py_code(self)
scipy.weave.vtk_spec.vtk_converter.generate_build_info(self)
scipy.weave.vtk_spec.vtk_converter.init_info(self)
scipy.weave.vtk_spec.vtk_converter.py_to_c_code(self)
scipy.weave.vtk_spec.vtk_converter.type_match(self,value)
scipy.weave.vtk_spec.vtk_converter.type_spec(self,name,value)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/catalog.py----------------------------------------
A:scipy.weave.catalog.value->inspect.getmodule(object)
A:scipy.weave.catalog.files->glob.glob(cat_file + '*')
A:scipy.weave.catalog.base->expr_to_filename(expr)
A:scipy.weave.catalog.tmp->tempfile.TemporaryFile(prefix=prefix, dir=dir)
A:scipy.weave.catalog.path->os.path.join(default_dir(), 'temp')
A:scipy.weave.catalog.module_path->os.path.abspath(module_path)
A:scipy.weave.catalog.(module_path, dummy)->os.path.split(module_path)
A:scipy.weave.catalog.catalog_file->catalog_path(module_path)
A:scipy.weave.catalog.sh->shelve.open(catalog_file, mode)
A:scipy.weave.catalog.paths->path_string.split(os.path.pathsep)
A:scipy.weave.catalog.cat->get_catalog(cat_dir, mode)
A:scipy.weave.catalog.writable->filter(file_test, files)
A:scipy.weave.catalog.d->self.get_writable_dir()
A:scipy.weave.catalog.self.paths_added->len(paths)
A:scipy.weave.catalog.writable_cat->get_catalog(catalog_path, 'w')
A:scipy.weave.catalog.path_key->self.path_key(code)
A:scipy.weave.catalog.function_list->self.get_cataloged_functions(code)
A:scipy.weave.catalog.self.cache[code]->self.get_functions(code)
A:scipy.weave.catalog.cat_dir->default_dir()
A:scipy.weave.catalog.cat_file->catalog_path(cat_dir)
A:scipy.weave.catalog.module->getmodule(function)
A:scipy.weave.catalog.(mod_path, f)->os.path.split(os.path.abspath(module.__file__))
A:scipy.weave.catalog.pkey->self.path_key(code)
scipy.weave.catalog.catalog(self,user_path_list=None)
scipy.weave.catalog.catalog.__init__(self,user_path_list=None)
scipy.weave.catalog.catalog.add_function(self,code,function,module_dir=None)
scipy.weave.catalog.catalog.add_function_persistent(self,code,function)
scipy.weave.catalog.catalog.build_search_order(self)
scipy.weave.catalog.catalog.clear_module_directory(self)
scipy.weave.catalog.catalog.configure_path(self,cat,code)
scipy.weave.catalog.catalog.fast_cache(self,code,function)
scipy.weave.catalog.catalog.get_catalog_files(self)
scipy.weave.catalog.catalog.get_cataloged_functions(self,code)
scipy.weave.catalog.catalog.get_environ_path(self)
scipy.weave.catalog.catalog.get_existing_files(self)
scipy.weave.catalog.catalog.get_functions(self,code,module_dir=None)
scipy.weave.catalog.catalog.get_functions_fast(self,code)
scipy.weave.catalog.catalog.get_module_directory(self)
scipy.weave.catalog.catalog.get_writable_dir(self)
scipy.weave.catalog.catalog.get_writable_file(self,existing_only=0)
scipy.weave.catalog.catalog.path_key(self,code)
scipy.weave.catalog.catalog.repair_catalog(self,catalog_path,code)
scipy.weave.catalog.catalog.set_module_directory(self,module_dir)
scipy.weave.catalog.catalog.unconfigure_path(self)
scipy.weave.catalog.catalog.unique_module_name(self,code,module_dir=None)
scipy.weave.catalog.catalog_path(module_path)
scipy.weave.catalog.default_dir()
scipy.weave.catalog.default_temp_dir()
scipy.weave.catalog.expr_to_filename(expr)
scipy.weave.catalog.get_catalog(module_path,mode='r')
scipy.weave.catalog.getmodule(object)
scipy.weave.catalog.intermediate_dir()
scipy.weave.catalog.is_writable(dir)
scipy.weave.catalog.os_dependent_catalog_name()
scipy.weave.catalog.unique_file(d,expr)
scipy.weave.catalog.whoami()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/cpp_namespace_spec.py----------------------------------------
A:scipy.weave.cpp_namespace_spec.clean_name->clean_name.replace(' ', '_').replace(' ', '_')
A:scipy.weave.cpp_namespace_spec.custom->weave.base_info.base_info()
A:scipy.weave.cpp_namespace_spec.ptr_fields->value.split('_')
A:scipy.weave.cpp_namespace_spec.class_name->'_'.join(ptr_fields[2:-1])
A:scipy.weave.cpp_namespace_spec.new_spec->self.__class__(class_name)
A:scipy.weave.cpp_namespace_spec.clean_type->type.replace('::', '_')
A:scipy.weave.cpp_namespace_spec.var_name->self.retrieve_py_variable(inline)
scipy.weave.cpp_namespace_spec.cpp_namespace_converter(self,class_name=None)
scipy.weave.cpp_namespace_spec.cpp_namespace_converter.__cmp__(self,other)
scipy.weave.cpp_namespace_spec.cpp_namespace_converter.__init__(self,class_name=None)
scipy.weave.cpp_namespace_spec.cpp_namespace_converter.__repr__(self)
scipy.weave.cpp_namespace_spec.cpp_namespace_converter.declaration_code(self,inline=0)
scipy.weave.cpp_namespace_spec.cpp_namespace_converter.type_match(self,value)
scipy.weave.cpp_namespace_spec.cpp_namespace_converter.type_spec(self,name,value)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/blitz_tools.py----------------------------------------
A:scipy.weave.blitz_tools.results->attempt_function_call(expr, local_dict, global_dict)
A:scipy.weave.blitz_tools.ast->parser.suite(expr)
A:scipy.weave.blitz_tools.ast_list->parser.suite(expr).tolist()
A:scipy.weave.blitz_tools.expr_code->ast_to_blitz_expr(ast_list)
A:scipy.weave.blitz_tools.arg_names->ast_tools.harvest_variables(ast_list)
A:scipy.weave.blitz_tools.module_dir->global_dict.get('__file__', None)
A:scipy.weave.blitz_tools.func->inline_tools.compile_function(expr_code, arg_names, local_dict, global_dict, module_dir, compiler='gcc', auto_downcast=1, verbose=verbose, type_converters=converters.blitz, **kw)
A:scipy.weave.blitz_tools.ast_seq->copy.deepcopy(ast_seq)
A:scipy.weave.blitz_tools.expr->expr.replace('_stp', '1').replace('_stp', '1')
A:scipy.weave.blitz_tools.ex->numpy.ones((1, 1, 1), dtype=numpy.float32)
A:scipy.weave.blitz_tools.ca_x->numpy.ones((1, 1, 1), dtype=numpy.float32)
A:scipy.weave.blitz_tools.cb_y_x->numpy.ones((1, 1, 1), dtype=numpy.float32)
A:scipy.weave.blitz_tools.cb_z_x->numpy.ones((1, 1, 1), dtype=numpy.float32)
A:scipy.weave.blitz_tools.hz->numpy.ones((1, 1, 1), dtype=numpy.float32)
A:scipy.weave.blitz_tools.hy->numpy.ones((1, 1, 1), dtype=numpy.float32)
scipy.weave.blitz(expr,local_dict=None,global_dict=None,check_size=1,verbose=0,**kw)
scipy.weave.blitz_tools.ast_to_blitz_expr(ast_seq)
scipy.weave.blitz_tools.blitz(expr,local_dict=None,global_dict=None,check_size=1,verbose=0,**kw)
scipy.weave.blitz_tools.test_function()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/swigptr2.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/swigptr.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/setup.py----------------------------------------
A:scipy.weave.setup.config->Configuration('weave', parent_package, top_path)
scipy.weave.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/ast_tools.py----------------------------------------
A:scipy.weave.ast_tools.(found, data)->match(name_pattern, ast_list)
A:scipy.weave.ast_tools.variables->remove_reserved_names(variables)
A:scipy.weave.ast_tools.(same, vars)->match(pattern, data, vars)
scipy.weave.ast_tools.ast_to_string(ast_seq)
scipy.weave.ast_tools.atom_list(expr_string)
scipy.weave.ast_tools.atom_tuple(expr_string)
scipy.weave.ast_tools.build_atom(expr_string)
scipy.weave.ast_tools.find_first_pattern(ast_tuple,pattern_list)
scipy.weave.ast_tools.harvest_variables(ast_list)
scipy.weave.ast_tools.int_to_symbol(i)
scipy.weave.ast_tools.issequence(t)
scipy.weave.ast_tools.match(pattern,data,vars=None)
scipy.weave.ast_tools.remove_duplicates(lst)
scipy.weave.ast_tools.remove_reserved_names(lst)
scipy.weave.ast_tools.translate_symbols(ast_tuple)
scipy.weave.ast_tools.tuples_to_lists(ast_tuple)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/standard_array_spec.py----------------------------------------
A:scipy.weave.standard_array_spec.res->self.template_vars(inline=inline)
A:scipy.weave.standard_array_spec.res['cap_name']->self.name.upper()
A:scipy.weave.standard_array_spec.cap_name->self.name.upper()
A:scipy.weave.standard_array_spec.code->c_spec.common_base_converter.cleanup_code(self)
scipy.weave.standard_array_spec.array_converter(common_base_converter)
scipy.weave.standard_array_spec.array_converter.cleanup_code(self)
scipy.weave.standard_array_spec.array_converter.declaration_code(self,templatize=0,inline=0)
scipy.weave.standard_array_spec.array_converter.get_var_type(self,value)
scipy.weave.standard_array_spec.array_converter.init_info(self)
scipy.weave.standard_array_spec.array_converter.template_vars(self,inline=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/c_spec.py----------------------------------------
A:scipy.weave.c_spec.info->self.info_object()
A:scipy.weave.c_spec.new_spec->self.__class__()
A:scipy.weave.c_spec.new_spec.var_type->self.get_var_type(value)
A:scipy.weave.c_spec.d['py_var']->self.py_variable()
A:scipy.weave.c_spec.d['var_lookup']->self.retrieve_py_variable(inline)
A:scipy.weave.c_spec.(local_dir, junk)->os.path.split(os.path.abspath(__file__))
A:scipy.weave.c_spec.scxx_dir->os.path.join(local_dir, 'scxx')
A:scipy.weave.c_spec.x->list_converter().type_spec('x', 1)
scipy.weave.c_spec.catchall_converter(scxx_converter)
scipy.weave.c_spec.catchall_converter.init_info(self)
scipy.weave.c_spec.catchall_converter.type_match(self,value)
scipy.weave.c_spec.common_base_converter(self)
scipy.weave.c_spec.common_base_converter.__cmp__(self,other)
scipy.weave.c_spec.common_base_converter.__init__(self)
scipy.weave.c_spec.common_base_converter.__repr__(self)
scipy.weave.c_spec.common_base_converter.c_to_py_code(self)
scipy.weave.c_spec.common_base_converter.cleanup_code(self)
scipy.weave.c_spec.common_base_converter.declaration_code(self,templatize=0,inline=0)
scipy.weave.c_spec.common_base_converter.generate_build_info(self)
scipy.weave.c_spec.common_base_converter.get_var_type(self,value)
scipy.weave.c_spec.common_base_converter.info_object(self)
scipy.weave.c_spec.common_base_converter.init_info(self)
scipy.weave.c_spec.common_base_converter.py_to_c_code(self)
scipy.weave.c_spec.common_base_converter.template_vars(self,inline=0)
scipy.weave.c_spec.common_base_converter.type_match(self,value)
scipy.weave.c_spec.common_base_converter.type_spec(self,name,value)
scipy.weave.c_spec.complex_converter(scalar_converter)
scipy.weave.c_spec.complex_converter.init_info(self)
scipy.weave.c_spec.dict_converter(scxx_converter)
scipy.weave.c_spec.dict_converter.init_info(self)
scipy.weave.c_spec.file_converter(common_base_converter)
scipy.weave.c_spec.file_converter.c_to_py_code(self)
scipy.weave.c_spec.file_converter.init_info(self)
scipy.weave.c_spec.float_converter(scalar_converter)
scipy.weave.c_spec.float_converter.init_info(self)
scipy.weave.c_spec.instance_converter(scxx_converter)
scipy.weave.c_spec.instance_converter.init_info(self)
scipy.weave.c_spec.int_converter(scalar_converter)
scipy.weave.c_spec.int_converter.init_info(self)
scipy.weave.c_spec.list_converter(scxx_converter)
scipy.weave.c_spec.list_converter.init_info(self)
scipy.weave.c_spec.long_converter(scalar_converter)
scipy.weave.c_spec.long_converter.init_info(self)
scipy.weave.c_spec.module_converter(common_base_converter)
scipy.weave.c_spec.module_converter.init_info(self)
scipy.weave.c_spec.scalar_converter(common_base_converter)
scipy.weave.c_spec.scalar_converter.init_info(self)
scipy.weave.c_spec.scxx_converter(common_base_converter)
scipy.weave.c_spec.scxx_converter.init_info(self)
scipy.weave.c_spec.string_converter(common_base_converter)
scipy.weave.c_spec.string_converter.c_to_py_code(self)
scipy.weave.c_spec.string_converter.init_info(self)
scipy.weave.c_spec.tuple_converter(scxx_converter)
scipy.weave.c_spec.tuple_converter.init_info(self)
scipy.weave.c_spec.unicode_converter(common_base_converter)
scipy.weave.c_spec.unicode_converter.declaration_code(self,templatize=0,inline=0)
scipy.weave.c_spec.unicode_converter.init_info(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/slice_handler.py----------------------------------------
A:scipy.weave.slice_handler.(found, data)->match(indexed_array_pattern, ast_list)
A:scipy.weave.slice_handler.data[key]->ast_to_string(data[key])
A:scipy.weave.slice_handler.begin->slice_vars['begin'].strip()
A:scipy.weave.slice_handler.end->slice_vars['end'].strip()
A:scipy.weave.slice_handler.val->atom_list(expr)
A:scipy.weave.slice_handler.slice_vars->slice_ast_to_dict(subscript_list[i])
A:scipy.weave.slice_handler.subscript_list[i]->build_slice_atom(slice_vars, slice_position)
A:scipy.weave.slice_handler.all_dicts->harvest_subscript_dicts(ast_list)
scipy.weave.slice_handler.build_slice_atom(slice_vars,position)
scipy.weave.slice_handler.harvest_subscript_dicts(ast_list)
scipy.weave.slice_handler.slice_ast_to_dict(ast_seq)
scipy.weave.slice_handler.transform_slices(ast_list)
scipy.weave.slice_handler.transform_subscript_list(subscript_dict)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/weave_version.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/accelerate_tools.py----------------------------------------
A:scipy.weave.accelerate_tools.r->repr('"' + s)
A:scipy.weave.accelerate_tools.proto->getattr(self.prototype, name)
A:scipy.weave.accelerate_tools.T->lookup_type(v)
A:scipy.weave.accelerate_tools.convert->lookup_type(v).inbound('tempPY')
A:scipy.weave.accelerate_tools.(convert, owned)->lookup_type(v).outbound('%(rhs)s')
A:scipy.weave.accelerate_tools.Integer->Integer()
A:scipy.weave.accelerate_tools.Double->Double()
A:scipy.weave.accelerate_tools.String->String()
A:scipy.weave.accelerate_tools.IntegerVector->IntegerVector()
A:scipy.weave.accelerate_tools.Integermatrix->Integermatrix()
A:scipy.weave.accelerate_tools.LongVector->LongVector()
A:scipy.weave.accelerate_tools.Longmatrix->Longmatrix()
A:scipy.weave.accelerate_tools.DoubleVector->DoubleVector()
A:scipy.weave.accelerate_tools.Doublematrix->Doublematrix()
A:scipy.weave.accelerate_tools.XRange->XRange()
A:scipy.weave.accelerate_tools.self.module->inspect.getmodule(function)
A:scipy.weave.accelerate_tools.signature->tuple(map(lookup_type, args))
A:scipy.weave.accelerate_tools.fast->getattr(accelerated_module, identifier)
A:scipy.weave.accelerate_tools.identifier->self.identifier(signature)
A:scipy.weave.accelerate_tools.accelerated_module->__import__(self.module.__name__ + '_weave')
A:scipy.weave.accelerate_tools.P->Python2CXX(self.function, signature, name=identifier)
A:scipy.weave.accelerate_tools.E->scipy.weave.ext_tools.ext_module(self.module.__name__ + '_weave')
A:scipy.weave.accelerate_tools.self.customize->scipy.weave.base_info.custom_info()
A:scipy.weave.accelerate_tools.code->self.wrapped_code()
scipy.weave.accelerate(self,function,*args,**kw)
scipy.weave.accelerate.__cache(self,*args)
scipy.weave.accelerate.accelerate(self,signature,identifier)
scipy.weave.accelerate.code(self,*args)
scipy.weave.accelerate.identifier(self,signature)
scipy.weave.accelerate.signature(self,*args)
scipy.weave.accelerate.singleton(self,signature)
scipy.weave.accelerate_tools.Basic(Type_Descriptor)
scipy.weave.accelerate_tools.Basic.check(self,s)
scipy.weave.accelerate_tools.Basic.inbound(self,s)
scipy.weave.accelerate_tools.Basic.outbound(self,s)
scipy.weave.accelerate_tools.Basic_Number(Basic)
scipy.weave.accelerate_tools.Basic_Number.binop(self,symbol,a,b)
scipy.weave.accelerate_tools.Basic_Number.literalizer(self,s)
scipy.weave.accelerate_tools.CStr(s)
scipy.weave.accelerate_tools.Double(Basic_Number)
scipy.weave.accelerate_tools.DoubleVector(Vector)
scipy.weave.accelerate_tools.Doublematrix(matrix)
scipy.weave.accelerate_tools.Instance(self,prototype)
scipy.weave.accelerate_tools.Instance.__init__(self,prototype)
scipy.weave.accelerate_tools.Instance.check(self,s)
scipy.weave.accelerate_tools.Instance.get_attribute(self,name)
scipy.weave.accelerate_tools.Instance.inbound(self,s)
scipy.weave.accelerate_tools.Instance.outbound(self,s)
scipy.weave.accelerate_tools.Instance.set_attribute(self,name)
scipy.weave.accelerate_tools.Integer(Basic_Number)
scipy.weave.accelerate_tools.IntegerVector(Vector)
scipy.weave.accelerate_tools.Integermatrix(matrix)
scipy.weave.accelerate_tools.LongVector(Vector)
scipy.weave.accelerate_tools.Longmatrix(matrix)
scipy.weave.accelerate_tools.Python2CXX(self,f,signature,name=None)
scipy.weave.accelerate_tools.Python2CXX.__init__(self,f,signature,name=None)
scipy.weave.accelerate_tools.Python2CXX.function_by_signature(self,signature)
scipy.weave.accelerate_tools.Python2CXX.function_code(self)
scipy.weave.accelerate_tools.Python2CXX.python_function_definition_code(self)
scipy.weave.accelerate_tools.Python2CXX.typedef_by_value(self,v)
scipy.weave.accelerate_tools.String(Basic)
scipy.weave.accelerate_tools.String.literalizer(self,s)
scipy.weave.accelerate_tools.Vector(Type_Descriptor)
scipy.weave.accelerate_tools.Vector.check(self,s)
scipy.weave.accelerate_tools.Vector.getitem(self,A,v,t)
scipy.weave.accelerate_tools.Vector.inbound(self,s)
scipy.weave.accelerate_tools.Vector.outbound(self,s)
scipy.weave.accelerate_tools.Vector.setitem(self,A,v,t)
scipy.weave.accelerate_tools.XRange(Type_Descriptor)
scipy.weave.accelerate_tools.accelerate(self,function,*args,**kw)
scipy.weave.accelerate_tools.accelerate.__cache(self,*args)
scipy.weave.accelerate_tools.accelerate.__init__(self,function,*args,**kw)
scipy.weave.accelerate_tools.accelerate.accelerate(self,signature,identifier)
scipy.weave.accelerate_tools.accelerate.code(self,*args)
scipy.weave.accelerate_tools.accelerate.identifier(self,signature)
scipy.weave.accelerate_tools.accelerate.signature(self,*args)
scipy.weave.accelerate_tools.accelerate.singleton(self,signature)
scipy.weave.accelerate_tools.lookup_type(x)
scipy.weave.accelerate_tools.matrix(Vector)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/swig2_spec.py----------------------------------------
A:scipy.weave.swig2_spec.idx->key.find('swig_runtime_data')
A:scipy.weave.swig2_spec.ver->int(key[idx + 17:])
A:scipy.weave.swig2_spec.nver->len(versions)
A:scipy.weave.swig2_spec.self.runtime_version->self._get_swig_runtime_version()
A:scipy.weave.swig2_spec.type_this->type(value.this)
A:scipy.weave.swig2_spec.type_str->str(type_this)
A:scipy.weave.swig2_spec.data->value.this.split('_')
A:scipy.weave.swig2_spec.res->base_info.base_info()
A:scipy.weave.swig2_spec.swig_ob_type->self._get_swig_type(value)
A:scipy.weave.swig2_spec.new_spec->self.__class__(class_name, pycobj, self.runtime_version)
scipy.weave.swig2_spec.swig2_converter(self,class_name='undefined',pycobj=0,runtime_version=None)
scipy.weave.swig2_spec.swig2_converter.__cmp__(self,other)
scipy.weave.swig2_spec.swig2_converter.__init__(self,class_name='undefined',pycobj=0,runtime_version=None)
scipy.weave.swig2_spec.swig2_converter._get_swig_runtime_version(self)
scipy.weave.swig2_spec.swig2_converter._get_swig_type(self,value)
scipy.weave.swig2_spec.swig2_converter.c_to_py_code(self)
scipy.weave.swig2_spec.swig2_converter.generate_build_info(self)
scipy.weave.swig2_spec.swig2_converter.init_info(self,runtime=0)
scipy.weave.swig2_spec.swig2_converter.py_to_c_code(self)
scipy.weave.swig2_spec.swig2_converter.type_match(self,value)
scipy.weave.swig2_spec.swig2_converter.type_spec(self,name,value)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/ext_tools.py----------------------------------------
A:scipy.weave.ext_tools.self.arg_specs->base_spec.arg_spec_list(arg_specs)
A:scipy.weave.ext_tools.self.customize->base_info.custom_info()
A:scipy.weave.ext_tools.arg_strings->','.join(arg_string_list)
A:scipy.weave.ext_tools.py_objects->', '.join(self.arg_specs.py_pointers())
A:scipy.weave.ext_tools.init_flags->', '.join(self.arg_specs.init_flags())
A:scipy.weave.ext_tools.init_flags_init->'= '.join(self.arg_specs.init_flags())
A:scipy.weave.ext_tools.py_vars->' = '.join(self.arg_specs.py_variables())
A:scipy.weave.ext_tools.ref_string->', '.join(self.arg_specs.py_references())
A:scipy.weave.ext_tools.code->self.module_code()
A:scipy.weave.ext_tools.have_cleanup->filter(lambda x: x.cleanup_code(), self.arg_specs)
A:scipy.weave.ext_tools.decl_code->indent(self.arg_declaration_code(), 4)
A:scipy.weave.ext_tools.cleanup_code->indent(self.arg_cleanup_code(), 4)
A:scipy.weave.ext_tools.function_code->indent(self.code_block, 4)
A:scipy.weave.ext_tools.local_dict_code->indent(self.arg_local_dict_code(), 4)
A:scipy.weave.ext_tools.arg_specs->self.arg_specs()
A:scipy.weave.ext_tools.self._build_information->base_info.info_list(standard_info)
A:scipy.weave.ext_tools.all_arg_specs->base_spec.arg_spec_list()
A:scipy.weave.ext_tools.all_headers->self.build_information().headers()
A:scipy.weave.ext_tools.all_warnings->self.build_information().warnings()
A:scipy.weave.ext_tools.w->map(lambda x: '#pragma warning(%s)\n' % x, all_warnings)
A:scipy.weave.ext_tools.h->map(lambda x: '#include ' + x + '\n', h)
A:scipy.weave.ext_tools.all_definition_code->indent(''.join(all_definition_code), 4)
A:scipy.weave.ext_tools.init_code_list->self.build_information().module_init_code()
A:scipy.weave.ext_tools.init_code->indent(''.join(init_code_list), 4)
A:scipy.weave.ext_tools.name->generate_file_name(file_name, location)
A:scipy.weave.ext_tools.info->self.build_information()
A:scipy.weave.ext_tools._source_files->self.build_information().sources()
A:scipy.weave.ext_tools.source_files->source_files.keys().keys()
A:scipy.weave.ext_tools.file->self.generate_file(location=location)
A:scipy.weave.ext_tools.(kw, file)->self.build_kw_and_file(location, kw)
A:scipy.weave.ext_tools.temp->catalog.intermediate_dir()
A:scipy.weave.ext_tools.success->build_tools.build_extension(file, temp_dir=temp, compiler_name=compiler, verbose=verbose, **kw)
A:scipy.weave.ext_tools.module_file->os.path.join(module_location, module_name)
A:scipy.weave.ext_tools.f->open(module_file, 'w')
A:scipy.weave.ext_tools.old_string->open(module_file, 'w').read()
A:scipy.weave.ext_tools.spec->factory.type_spec(var, example_type)
A:scipy.weave.ext_tools.variable_specs->downcast(variable_specs)
A:scipy.weave.ext_tools.indented->re.sub(' +$', '', indented)
A:scipy.weave.ext_tools.msg->cStringIO.StringIO()
scipy.weave.ext_function(self,name,code_block,args,local_dict=None,global_dict=None,auto_downcast=1,type_converters=None)
scipy.weave.ext_function_from_specs(self,name,code_block,arg_specs)
scipy.weave.ext_function_from_specs.arg_cleanup_code(self)
scipy.weave.ext_function_from_specs.arg_declaration_code(self)
scipy.weave.ext_function_from_specs.arg_local_dict_code(self)
scipy.weave.ext_function_from_specs.function_code(self)
scipy.weave.ext_function_from_specs.function_declaration_code(self)
scipy.weave.ext_function_from_specs.header_code(self)
scipy.weave.ext_function_from_specs.parse_tuple_code(self)
scipy.weave.ext_function_from_specs.python_function_definition_code(self)
scipy.weave.ext_function_from_specs.set_compiler(self,compiler)
scipy.weave.ext_function_from_specs.template_declaration_code(self)
scipy.weave.ext_module(self,name,compiler='')
scipy.weave.ext_module.add_function(self,func)
scipy.weave.ext_module.arg_specs(self)
scipy.weave.ext_module.build_information(self)
scipy.weave.ext_module.build_kw_and_file(self,location,kw)
scipy.weave.ext_module.compile(self,location='.',compiler=None,verbose=0,**kw)
scipy.weave.ext_module.function_code(self)
scipy.weave.ext_module.generate_file(self,file_name='',location='.')
scipy.weave.ext_module.get_headers(self)
scipy.weave.ext_module.header_code(self)
scipy.weave.ext_module.module_code(self)
scipy.weave.ext_module.module_init_code(self)
scipy.weave.ext_module.python_function_definition_code(self)
scipy.weave.ext_module.set_compiler(self,compiler)
scipy.weave.ext_module.setup_extension(self,location='.',**kw)
scipy.weave.ext_module.support_code(self)
scipy.weave.ext_module.warning_code(self)
scipy.weave.ext_tools.assign_variable_types(variables,local_dict={},global_dict={},auto_downcast=1,type_converters=converters.default)
scipy.weave.ext_tools.downcast(var_specs)
scipy.weave.ext_tools.ext_function(self,name,code_block,args,local_dict=None,global_dict=None,auto_downcast=1,type_converters=None)
scipy.weave.ext_tools.ext_function.__init__(self,name,code_block,args,local_dict=None,global_dict=None,auto_downcast=1,type_converters=None)
scipy.weave.ext_tools.ext_function_from_specs(self,name,code_block,arg_specs)
scipy.weave.ext_tools.ext_function_from_specs.__init__(self,name,code_block,arg_specs)
scipy.weave.ext_tools.ext_function_from_specs.arg_cleanup_code(self)
scipy.weave.ext_tools.ext_function_from_specs.arg_declaration_code(self)
scipy.weave.ext_tools.ext_function_from_specs.arg_local_dict_code(self)
scipy.weave.ext_tools.ext_function_from_specs.function_code(self)
scipy.weave.ext_tools.ext_function_from_specs.function_declaration_code(self)
scipy.weave.ext_tools.ext_function_from_specs.header_code(self)
scipy.weave.ext_tools.ext_function_from_specs.parse_tuple_code(self)
scipy.weave.ext_tools.ext_function_from_specs.python_function_definition_code(self)
scipy.weave.ext_tools.ext_function_from_specs.set_compiler(self,compiler)
scipy.weave.ext_tools.ext_function_from_specs.template_declaration_code(self)
scipy.weave.ext_tools.ext_module(self,name,compiler='')
scipy.weave.ext_tools.ext_module.__init__(self,name,compiler='')
scipy.weave.ext_tools.ext_module.add_function(self,func)
scipy.weave.ext_tools.ext_module.arg_specs(self)
scipy.weave.ext_tools.ext_module.build_information(self)
scipy.weave.ext_tools.ext_module.build_kw_and_file(self,location,kw)
scipy.weave.ext_tools.ext_module.compile(self,location='.',compiler=None,verbose=0,**kw)
scipy.weave.ext_tools.ext_module.function_code(self)
scipy.weave.ext_tools.ext_module.generate_file(self,file_name='',location='.')
scipy.weave.ext_tools.ext_module.get_headers(self)
scipy.weave.ext_tools.ext_module.header_code(self)
scipy.weave.ext_tools.ext_module.module_code(self)
scipy.weave.ext_tools.ext_module.module_init_code(self)
scipy.weave.ext_tools.ext_module.python_function_definition_code(self)
scipy.weave.ext_tools.ext_module.set_compiler(self,compiler)
scipy.weave.ext_tools.ext_module.setup_extension(self,location='.',**kw)
scipy.weave.ext_tools.ext_module.support_code(self)
scipy.weave.ext_tools.ext_module.warning_code(self)
scipy.weave.ext_tools.format_error_msg(errors)
scipy.weave.ext_tools.generate_file_name(module_name,module_location)
scipy.weave.ext_tools.generate_module(module_string,module_file)
scipy.weave.ext_tools.indent(st,spaces)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/converters.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/_dumb_shelve.py----------------------------------------
A:scipy.weave._dumb_shelve.r->zlib.decompress(compressed)
A:scipy.weave._dumb_shelve.s->pickle.dumps(value, 1)
A:scipy.weave._dumb_shelve.self.dict[key]->zlib.compress(s)
scipy.weave._dumb_shelve.DbfilenameShelf(self,filename,flag='c')
scipy.weave._dumb_shelve.DbfilenameShelf.__getitem__(self,key)
scipy.weave._dumb_shelve.DbfilenameShelf.__init__(self,filename,flag='c')
scipy.weave._dumb_shelve.DbfilenameShelf.__setitem__(self,key,value)
scipy.weave._dumb_shelve.open(filename,flag='c')


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/_dumbdbm_patched.py----------------------------------------
A:scipy.weave._dumbdbm_patched._os->__import__('os')
A:scipy.weave._dumbdbm_patched.f->_open(self._dirfile, 'a')
A:scipy.weave._dumbdbm_patched.line->string.rstrip(f.readline())
A:scipy.weave._dumbdbm_patched.(key, (pos, siz))->eval(line)
A:scipy.weave._dumbdbm_patched.dat->_open(self._dirfile, 'a').read(siz)
A:scipy.weave._dumbdbm_patched.pos->_open(self._dirfile, 'a').tell()
A:scipy.weave._dumbdbm_patched.(pos, siz)->self._addval(val)
scipy.weave._dumbdbm_patched._Database(self,file)
scipy.weave._dumbdbm_patched._Database.__contains__(self,key)
scipy.weave._dumbdbm_patched._Database.__delitem__(self,key)
scipy.weave._dumbdbm_patched._Database.__getitem__(self,key)
scipy.weave._dumbdbm_patched._Database.__init__(self,file)
scipy.weave._dumbdbm_patched._Database.__len__(self)
scipy.weave._dumbdbm_patched._Database.__setitem__(self,key,val)
scipy.weave._dumbdbm_patched._Database._addkey(self,key,pos_and_siz)
scipy.weave._dumbdbm_patched._Database._addval(self,val)
scipy.weave._dumbdbm_patched._Database._commit(self)
scipy.weave._dumbdbm_patched._Database._setval(self,pos,val)
scipy.weave._dumbdbm_patched._Database._update(self)
scipy.weave._dumbdbm_patched._Database.close(self)
scipy.weave._dumbdbm_patched._Database.has_key(self,key)
scipy.weave._dumbdbm_patched._Database.keys(self)
scipy.weave._dumbdbm_patched.open(file,flag=None,mode=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/tests/test_catalog.py----------------------------------------
A:scipy.weave.tests.test_catalog.path->scipy.weave.catalog.catalog().get_environ_path()
A:scipy.weave.tests.test_catalog.name->os.path.join(path, 'dummy_catalog')
A:scipy.weave.tests.test_catalog.test_file->open(name, 'w')
A:scipy.weave.tests.test_catalog.in_path->scipy.weave.catalog.default_dir()
A:scipy.weave.tests.test_catalog.(d, f)->os.path.split(path)
A:scipy.weave.tests.test_catalog.(d2, f)->os.path.split(path)
A:scipy.weave.tests.test_catalog.(in_path, f)->os.path.split(os.__file__)
A:scipy.weave.tests.test_catalog.pardir->self.get_test_dir(erase=1)
A:scipy.weave.tests.test_catalog.cat_glob->os.path.join(pardir, catalog.os_dependent_catalog_name() + '.*')
A:scipy.weave.tests.test_catalog.cat_files->glob.glob(cat_glob)
A:scipy.weave.tests.test_catalog.cat->scipy.weave.catalog.get_catalog(pardir, 'c')
A:scipy.weave.tests.test_catalog.q->scipy.weave.catalog.catalog()
A:scipy.weave.tests.test_catalog.r->scipy.weave.catalog.catalog(env_dir)
A:scipy.weave.tests.test_catalog.os.environ['PYTHONCOMPILED']->sep.join('_bad_path_name_')
A:scipy.weave.tests.test_catalog.order->scipy.weave.catalog.catalog().build_search_order()
A:scipy.weave.tests.test_catalog.files->scipy.weave.catalog.catalog().get_existing_files()
A:scipy.weave.tests.test_catalog.file->scipy.weave.catalog.catalog().unique_module_name('bob')
A:scipy.weave.tests.test_catalog.f->open(cfile1, 'w')
A:scipy.weave.tests.test_catalog.d->scipy.weave.catalog.catalog().get_writable_dir()
A:scipy.weave.tests.test_catalog.pfuncs->scipy.weave.catalog.catalog().get_cataloged_functions('code')
A:scipy.weave.tests.test_catalog.env_dir->empty_temp_dir()
A:scipy.weave.tests.test_catalog.user_dir->empty_temp_dir()
A:scipy.weave.tests.test_catalog.s->scipy.weave.catalog.catalog(user_dir)
A:scipy.weave.tests.test_catalog.t->scipy.weave.catalog.catalog(user_dir)
A:scipy.weave.tests.test_catalog.funcs1->scipy.weave.catalog.catalog(user_dir).get_functions('f')
A:scipy.weave.tests.test_catalog.funcs2->scipy.weave.catalog.catalog(user_dir).get_functions('ff')
A:scipy.weave.tests.test_catalog.funcs3->scipy.weave.catalog.catalog(user_dir).get_functions('fff')
scipy.weave.tests.test_catalog.TestCatalog(TestCase)
scipy.weave.tests.test_catalog.TestCatalog.clear_environ(self)
scipy.weave.tests.test_catalog.TestCatalog.reset_environ(self)
scipy.weave.tests.test_catalog.TestCatalog.setUp(self)
scipy.weave.tests.test_catalog.TestCatalog.tearDown(self)
scipy.weave.tests.test_catalog.TestCatalog.test_access_writable_file(self)
scipy.weave.tests.test_catalog.TestCatalog.test_add_function_ordered(self)
scipy.weave.tests.test_catalog.TestCatalog.test_add_function_persistent1(self)
scipy.weave.tests.test_catalog.TestCatalog.test_build_search_order1(self)
scipy.weave.tests.test_catalog.TestCatalog.test_build_search_order2(self)
scipy.weave.tests.test_catalog.TestCatalog.test_build_search_order3(self)
scipy.weave.tests.test_catalog.TestCatalog.test_build_search_order4(self)
scipy.weave.tests.test_catalog.TestCatalog.test_catalog_files1(self)
scipy.weave.tests.test_catalog.TestCatalog.test_catalog_files2(self)
scipy.weave.tests.test_catalog.TestCatalog.test_clear_module_directory(self)
scipy.weave.tests.test_catalog.TestCatalog.test_get_environ_path(self)
scipy.weave.tests.test_catalog.TestCatalog.test_get_existing_files1(self)
scipy.weave.tests.test_catalog.TestCatalog.test_get_existing_files2(self)
scipy.weave.tests.test_catalog.TestCatalog.test_set_module_directory(self)
scipy.weave.tests.test_catalog.TestCatalog.test_unique_module_name(self)
scipy.weave.tests.test_catalog.TestCatalog.test_writable_dir(self)
scipy.weave.tests.test_catalog.TestCatalog.test_writable_with_bad_path(self)
scipy.weave.tests.test_catalog.TestCatalogPath(TestCase)
scipy.weave.tests.test_catalog.TestCatalogPath.test_bad_path(self)
scipy.weave.tests.test_catalog.TestCatalogPath.test_current(self)
scipy.weave.tests.test_catalog.TestCatalogPath.test_default(self)
scipy.weave.tests.test_catalog.TestCatalogPath.test_module(self)
scipy.weave.tests.test_catalog.TestCatalogPath.test_path(self)
scipy.weave.tests.test_catalog.TestCatalogPath.test_user(path)
scipy.weave.tests.test_catalog.TestDefaultDir(TestCase)
scipy.weave.tests.test_catalog.TestDefaultDir.test_is_writable(self)
scipy.weave.tests.test_catalog.TestGetCatalog(TestCase)
scipy.weave.tests.test_catalog.TestGetCatalog.get_test_dir(self,erase=0)
scipy.weave.tests.test_catalog.TestGetCatalog.remove_dir(self,d)
scipy.weave.tests.test_catalog.TestGetCatalog.test_create_catalog(self)
scipy.weave.tests.test_catalog.TestGetCatalog.test_nonexistent_catalog_is_none(self)
scipy.weave.tests.test_catalog.TestOsDependentCatalogName(TestCase)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/tests/test_size_check.py----------------------------------------
A:scipy.weave.tests.test_size_check.empty->numpy.array(())
A:scipy.weave.tests.test_size_check.actual->scipy.weave.size_check.reduction(a, 1)
A:scipy.weave.tests.test_size_check.desired->numpy.zeros(())
A:scipy.weave.tests.test_size_check.x->numpy.array(eval(expr, kw))
A:scipy.weave.tests.test_size_check.y->numpy.ones(y)
A:scipy.weave.tests.test_size_check.xx->scipy.weave.size_check.dummy_array(x)
A:scipy.weave.tests.test_size_check.yy->scipy.weave.size_check.dummy_array(y)
A:scipy.weave.tests.test_size_check.a->numpy.ones((10, 20, 1))
A:scipy.weave.tests.test_size_check.beg->random.choice(choices)
A:scipy.weave.tests.test_size_check.end->random.choice(choices)
A:scipy.weave.tests.test_size_check.step->random.choice(choices)
A:scipy.weave.tests.test_size_check.beg2->random.choice(choices)
A:scipy.weave.tests.test_size_check.end2->random.choice(choices)
A:scipy.weave.tests.test_size_check.step2->random.choice(choices)
A:scipy.weave.tests.test_size_check.val->random.choice(choices)
A:scipy.weave.tests.test_size_check.ast_list->parser.expr(expr).tolist()
A:scipy.weave.tests.test_size_check.args->harvest_variables(ast_list)
A:scipy.weave.tests.test_size_check.loc->locals().update(kw)
A:scipy.weave.tests.test_size_check.b->numpy.ones((1, 10))
scipy.weave.tests.test_size_check.TestBinaryOpSize(TestCase)
scipy.weave.tests.test_size_check.TestBinaryOpSize.desired_type(self,val)
scipy.weave.tests.test_size_check.TestBinaryOpSize.generic_check(self,x,y,desired)
scipy.weave.tests.test_size_check.TestBinaryOpSize.generic_error_check(self,x,y)
scipy.weave.tests.test_size_check.TestBinaryOpSize.test_error1(self)
scipy.weave.tests.test_size_check.TestBinaryOpSize.test_error2(self)
scipy.weave.tests.test_size_check.TestBinaryOpSize.test_scalar(self)
scipy.weave.tests.test_size_check.TestBinaryOpSize.test_x1(self)
scipy.weave.tests.test_size_check.TestBinaryOpSize.test_x_y(self)
scipy.weave.tests.test_size_check.TestBinaryOpSize.test_x_y2(self)
scipy.weave.tests.test_size_check.TestBinaryOpSize.test_x_y3(self)
scipy.weave.tests.test_size_check.TestBinaryOpSize.test_x_y4(self)
scipy.weave.tests.test_size_check.TestBinaryOpSize.test_x_y5(self)
scipy.weave.tests.test_size_check.TestBinaryOpSize.test_x_y6(self)
scipy.weave.tests.test_size_check.TestBinaryOpSize.test_x_y7(self)
scipy.weave.tests.test_size_check.TestBinaryOpSize.test_y1(self)
scipy.weave.tests.test_size_check.TestDummyArray(TestBinaryOpSize)
scipy.weave.tests.test_size_check.TestDummyArray.desired_type(self,val)
scipy.weave.tests.test_size_check.TestDummyArray.generic_check(self,x,y,desired)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing(TestCase)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.generic_1d(self,expr)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.generic_1d_index(self,expr)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.generic_2d(self,expr)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.generic_3d(self,expr)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.generic_check(self,ary,expr,desired)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.generic_wrap(self,a,expr)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_0(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_1(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_10(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_2(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_3(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_4(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_5(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_6(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_7(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_8(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_9(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_index_0(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_index_1(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_index_2(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_index_3(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_index_calculated(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_random(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_stride_0(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_stride_1(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_stride_10(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_stride_11(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_stride_12(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_stride_2(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_stride_3(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_stride_4(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_stride_5(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_stride_6(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_stride_7(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_stride_8(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_1d_stride_9(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_2d_0(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_2d_1(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_2d_2(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_2d_random(self)
scipy.weave.tests.test_size_check.TestDummyArrayIndexing.test_3d_random(self)
scipy.weave.tests.test_size_check.TestExpressions(TestCase)
scipy.weave.tests.test_size_check.TestExpressions.generic_2d(self,expr)
scipy.weave.tests.test_size_check.TestExpressions.generic_3d(self,expr)
scipy.weave.tests.test_size_check.TestExpressions.generic_check(self,expr,desired,**kw)
scipy.weave.tests.test_size_check.TestExpressions.generic_wrap(self,expr,**kw)
scipy.weave.tests.test_size_check.TestExpressions.test_calculated_index(self)
scipy.weave.tests.test_size_check.TestExpressions.test_calculated_index2(self)
scipy.weave.tests.test_size_check.TestExpressions.test_generic_1d(self)
scipy.weave.tests.test_size_check.TestExpressions.test_single_index(self)
scipy.weave.tests.test_size_check.TestMakeSameLength(TestCase)
scipy.weave.tests.test_size_check.TestMakeSameLength.generic_check(self,x,y,desired)
scipy.weave.tests.test_size_check.TestMakeSameLength.test_scalar(self)
scipy.weave.tests.test_size_check.TestMakeSameLength.test_x_scalar(self)
scipy.weave.tests.test_size_check.TestMakeSameLength.test_x_short(self)
scipy.weave.tests.test_size_check.TestMakeSameLength.test_y_scalar(self)
scipy.weave.tests.test_size_check.TestMakeSameLength.test_y_short(self)
scipy.weave.tests.test_size_check.TestReduction(TestCase)
scipy.weave.tests.test_size_check.TestReduction.test_1d_0(self)
scipy.weave.tests.test_size_check.TestReduction.test_2d_0(self)
scipy.weave.tests.test_size_check.TestReduction.test_2d_1(self)
scipy.weave.tests.test_size_check.TestReduction.test_3d_0(self)
scipy.weave.tests.test_size_check.TestReduction.test_error0(self)
scipy.weave.tests.test_size_check.TestReduction.test_error1(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/tests/test_scxx_dict.py----------------------------------------
A:scipy.weave.tests.test_scxx_dict.res->scipy.weave.inline_tools.inline(code, args)
A:scipy.weave.tests.test_scxx_dict.key->Foo()
A:scipy.weave.tests.test_scxx_dict.before_overwritten->sys.getrefcount(overwritten)
A:scipy.weave.tests.test_scxx_dict.after_overwritten->sys.getrefcount(overwritten)
A:scipy.weave.tests.test_scxx_dict.items->scipy.weave.inline_tools.inline('return_val = a.items();', ['a'])
A:scipy.weave.tests.test_scxx_dict.values->scipy.weave.inline_tools.inline('return_val = a.values();', ['a'])
A:scipy.weave.tests.test_scxx_dict.keys->scipy.weave.inline_tools.inline('return_val = a.keys();', ['a'])
scipy.weave.tests.test_scxx_dict.TestDictConstruct(TestCase)
scipy.weave.tests.test_scxx_dict.TestDictConstruct.test_empty(self)
scipy.weave.tests.test_scxx_dict.TestDictDel(TestCase)
scipy.weave.tests.test_scxx_dict.TestDictDel.generic(self,key)
scipy.weave.tests.test_scxx_dict.TestDictDel.test_complex(self)
scipy.weave.tests.test_scxx_dict.TestDictDel.test_double(self)
scipy.weave.tests.test_scxx_dict.TestDictDel.test_int(self)
scipy.weave.tests.test_scxx_dict.TestDictDel.test_obj(self)
scipy.weave.tests.test_scxx_dict.TestDictDel.test_std_string(self)
scipy.weave.tests.test_scxx_dict.TestDictGetItemOp(TestCase)
scipy.weave.tests.test_scxx_dict.TestDictGetItemOp.generic_get(self,code,args=['a'])
scipy.weave.tests.test_scxx_dict.TestDictGetItemOp.test_char(self)
scipy.weave.tests.test_scxx_dict.TestDictGetItemOp.test_char_fail(self)
scipy.weave.tests.test_scxx_dict.TestDictGetItemOp.test_obj(self)
scipy.weave.tests.test_scxx_dict.TestDictGetItemOp.test_obj_fail(self)
scipy.weave.tests.test_scxx_dict.TestDictGetItemOp.test_string(self)
scipy.weave.tests.test_scxx_dict.TestDictHasKey(TestCase)
scipy.weave.tests.test_scxx_dict.TestDictHasKey.test_complex(self)
scipy.weave.tests.test_scxx_dict.TestDictHasKey.test_double(self)
scipy.weave.tests.test_scxx_dict.TestDictHasKey.test_int(self)
scipy.weave.tests.test_scxx_dict.TestDictHasKey.test_obj(self)
scipy.weave.tests.test_scxx_dict.TestDictHasKey.test_std_string(self)
scipy.weave.tests.test_scxx_dict.TestDictHasKey.test_string(self)
scipy.weave.tests.test_scxx_dict.TestDictHasKey.test_string_fail(self)
scipy.weave.tests.test_scxx_dict.TestDictOthers(TestCase)
scipy.weave.tests.test_scxx_dict.TestDictOthers.test_clear(self)
scipy.weave.tests.test_scxx_dict.TestDictOthers.test_items(self)
scipy.weave.tests.test_scxx_dict.TestDictOthers.test_keys(self)
scipy.weave.tests.test_scxx_dict.TestDictOthers.test_update(self)
scipy.weave.tests.test_scxx_dict.TestDictOthers.test_values(self)
scipy.weave.tests.test_scxx_dict.TestDictSetOperator(TestCase)
scipy.weave.tests.test_scxx_dict.TestDictSetOperator.generic_new(self,key,val)
scipy.weave.tests.test_scxx_dict.TestDictSetOperator.generic_overwrite(self,key,val)
scipy.weave.tests.test_scxx_dict.TestDictSetOperator.test_new_complex_int(self)
scipy.weave.tests.test_scxx_dict.TestDictSetOperator.test_new_double_int(self)
scipy.weave.tests.test_scxx_dict.TestDictSetOperator.test_new_int_int(self)
scipy.weave.tests.test_scxx_dict.TestDictSetOperator.test_new_obj_int(self)
scipy.weave.tests.test_scxx_dict.TestDictSetOperator.test_new_std_string_int(self)
scipy.weave.tests.test_scxx_dict.TestDictSetOperator.test_overwrite_complex_int(self)
scipy.weave.tests.test_scxx_dict.TestDictSetOperator.test_overwrite_double_int(self)
scipy.weave.tests.test_scxx_dict.TestDictSetOperator.test_overwrite_int_int(self)
scipy.weave.tests.test_scxx_dict.TestDictSetOperator.test_overwrite_obj_int(self)
scipy.weave.tests.test_scxx_dict.TestDictSetOperator.test_overwrite_std_string_int(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/tests/test_ext_tools.py----------------------------------------
A:scipy.weave.tests.test_ext_tools.build_dir->empty_temp_dir()
A:scipy.weave.tests.test_ext_tools.mod->scipy.weave.ext_tools.ext_module('simple_ext_function')
A:scipy.weave.tests.test_ext_tools.test->scipy.weave.ext_tools.ext_function_from_specs('test', code, var_specs)
A:scipy.weave.tests.test_ext_tools.test2->scipy.weave.ext_tools.ext_function_from_specs('test2', code, var_specs)
A:scipy.weave.tests.test_ext_tools.var_specs->scipy.weave.ext_tools.assign_variable_types(['a'], locals())
A:scipy.weave.tests.test_ext_tools.c->ext_string_and_int.test(a, b)
A:scipy.weave.tests.test_ext_tools.(c, d)->ext_return_tuple.test(a)
A:scipy.weave.tests.test_ext_tools.a->arange(10, typecode=Float32)
A:scipy.weave.tests.test_ext_tools.b->arange(5, typecode=Float64)
A:scipy.weave.tests.test_ext_tools.actual->scipy.weave.ext_tools.assign_variable_types(arg_list, locals())
A:scipy.weave.tests.test_ext_tools.ad->array_converter()
A:scipy.weave.tests.test_ext_tools.bd->array_converter()
A:scipy.weave.tests.test_ext_tools.cd->scipy.weave.c_spec.int_converter()
scipy.weave.tests.test_ext_tools.TestAssignVariableTypes(TestCase)
scipy.weave.tests.test_ext_tools.TestAssignVariableTypes.test_assign_variable_types(self)
scipy.weave.tests.test_ext_tools.TestExtFunction(TestCase)
scipy.weave.tests.test_ext_tools.TestExtFunction.test_simple(self)
scipy.weave.tests.test_ext_tools.TestExtModule(TestCase)
scipy.weave.tests.test_ext_tools.TestExtModule.test_multi_functions(self)
scipy.weave.tests.test_ext_tools.TestExtModule.test_return_tuple(self)
scipy.weave.tests.test_ext_tools.TestExtModule.test_simple(self)
scipy.weave.tests.test_ext_tools.TestExtModule.test_string_and_int(self)
scipy.weave.tests.test_ext_tools.TestExtModule.test_with_include(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/tests/test_c_spec.py----------------------------------------
A:scipy.weave.tests.test_c_spec.f->os.path.basename(unique_file(d, file_name))
A:scipy.weave.tests.test_c_spec.out->out.replace('\n', '').replace('\n', '')
A:scipy.weave.tests.test_c_spec.s->scipy.weave.c_spec.dict_converter()
A:scipy.weave.tests.test_c_spec.mod_name->unique_mod(test_dir, mod_name)
A:scipy.weave.tests.test_c_spec.mod->scipy.weave.ext_tools.ext_module(mod_name)
A:scipy.weave.tests.test_c_spec.test->scipy.weave.ext_tools.ext_function('test', code, ['a'])
A:scipy.weave.tests.test_c_spec.c->test(b)
A:scipy.weave.tests.test_c_spec.file_name->tempfile.mktemp()
A:scipy.weave.tests.test_c_spec.file->open(file_name, 'r')
A:scipy.weave.tests.test_c_spec.actual->scipy.weave.inline_tools.inline(code, ['func', 'search_str', 'sub_str'], compiler=self.compiler, force=1)
A:scipy.weave.tests.test_c_spec.desired->func(search_str, sub_str)
A:scipy.weave.tests.test_c_spec.a->range(1000000)
A:scipy.weave.tests.test_c_spec.with_cxx->scipy.weave.ext_tools.ext_function('with_cxx', code, ['a'])
A:scipy.weave.tests.test_c_spec.no_checking->scipy.weave.ext_tools.ext_function('no_checking', code, ['a'])
A:scipy.weave.tests.test_c_spec.t1->time.time()
A:scipy.weave.tests.test_c_spec.sum1->with_cxx(a)
A:scipy.weave.tests.test_c_spec.t2->time.time()
A:scipy.weave.tests.test_c_spec.sum2->no_checking(a)
A:scipy.weave.tests.test_c_spec.test_dir->os.path.abspath(name)
scipy.weave.tests.test_c_spec.CallableConverter(TestCase)
scipy.weave.tests.test_c_spec.CallableConverter.test_call_function(self)
scipy.weave.tests.test_c_spec.ComplexConverter(TestCase)
scipy.weave.tests.test_c_spec.ComplexConverter.test_complex_return(self)
scipy.weave.tests.test_c_spec.ComplexConverter.test_complex_var_in(self)
scipy.weave.tests.test_c_spec.ComplexConverter.test_type_match_complex(self)
scipy.weave.tests.test_c_spec.ComplexConverter.test_type_match_float(self)
scipy.weave.tests.test_c_spec.ComplexConverter.test_type_match_int(self)
scipy.weave.tests.test_c_spec.ComplexConverter.test_type_match_string(self)
scipy.weave.tests.test_c_spec.DictConverter(TestCase)
scipy.weave.tests.test_c_spec.DictConverter.test_return(self)
scipy.weave.tests.test_c_spec.DictConverter.test_type_match_bad(self)
scipy.weave.tests.test_c_spec.DictConverter.test_type_match_good(self)
scipy.weave.tests.test_c_spec.DictConverter.test_var_in(self)
scipy.weave.tests.test_c_spec.FileConverter(TestCase)
scipy.weave.tests.test_c_spec.FileConverter.test_file_to_py(self)
scipy.weave.tests.test_c_spec.FileConverter.test_py_to_file(self)
scipy.weave.tests.test_c_spec.FloatConverter(TestCase)
scipy.weave.tests.test_c_spec.FloatConverter.test_float_return(self)
scipy.weave.tests.test_c_spec.FloatConverter.test_float_var_in(self)
scipy.weave.tests.test_c_spec.FloatConverter.test_type_match_complex(self)
scipy.weave.tests.test_c_spec.FloatConverter.test_type_match_float(self)
scipy.weave.tests.test_c_spec.FloatConverter.test_type_match_int(self)
scipy.weave.tests.test_c_spec.FloatConverter.test_type_match_string(self)
scipy.weave.tests.test_c_spec.InstanceConverter(TestCase)
scipy.weave.tests.test_c_spec.IntConverter(TestCase)
scipy.weave.tests.test_c_spec.IntConverter.test_int_return(self)
scipy.weave.tests.test_c_spec.IntConverter.test_type_match_complex(self)
scipy.weave.tests.test_c_spec.IntConverter.test_type_match_float(self)
scipy.weave.tests.test_c_spec.IntConverter.test_type_match_int(self)
scipy.weave.tests.test_c_spec.IntConverter.test_type_match_string(self)
scipy.weave.tests.test_c_spec.IntConverter.test_var_in(self)
scipy.weave.tests.test_c_spec.ListConverter(TestCase)
scipy.weave.tests.test_c_spec.ListConverter.test_return(self)
scipy.weave.tests.test_c_spec.ListConverter.test_speed(self)
scipy.weave.tests.test_c_spec.ListConverter.test_type_match_bad(self)
scipy.weave.tests.test_c_spec.ListConverter.test_type_match_good(self)
scipy.weave.tests.test_c_spec.ListConverter.test_var_in(self)
scipy.weave.tests.test_c_spec.SequenceConverter(TestCase)
scipy.weave.tests.test_c_spec.SequenceConverter.test_convert_to_dict(self)
scipy.weave.tests.test_c_spec.SequenceConverter.test_convert_to_list(self)
scipy.weave.tests.test_c_spec.SequenceConverter.test_convert_to_string(self)
scipy.weave.tests.test_c_spec.SequenceConverter.test_convert_to_tuple(self)
scipy.weave.tests.test_c_spec.StringConverter(TestCase)
scipy.weave.tests.test_c_spec.StringConverter.test_return(self)
scipy.weave.tests.test_c_spec.StringConverter.test_type_match_complex(self)
scipy.weave.tests.test_c_spec.StringConverter.test_type_match_float(self)
scipy.weave.tests.test_c_spec.StringConverter.test_type_match_int(self)
scipy.weave.tests.test_c_spec.StringConverter.test_type_match_string(self)
scipy.weave.tests.test_c_spec.StringConverter.test_var_in(self)
scipy.weave.tests.test_c_spec.TupleConverter(TestCase)
scipy.weave.tests.test_c_spec.TupleConverter.test_return(self)
scipy.weave.tests.test_c_spec.TupleConverter.test_type_match_bad(self)
scipy.weave.tests.test_c_spec.TupleConverter.test_type_match_good(self)
scipy.weave.tests.test_c_spec.TupleConverter.test_var_in(self)
scipy.weave.tests.test_c_spec.remove_file(name)
scipy.weave.tests.test_c_spec.remove_whitespace(in_str)
scipy.weave.tests.test_c_spec.setup_location()
scipy.weave.tests.test_c_spec.teardown_location()
scipy.weave.tests.test_c_spec.unique_mod(d,file_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/tests/test_build_tools.py----------------------------------------
A:scipy.weave.tests.test_build_tools.d->scipy.weave.build_tools.configure_temp_dir()
A:scipy.weave.tests.test_build_tools.d2->scipy.weave.build_tools.configure_build_dir()
scipy.weave.tests.test_build_tools.TestConfigureBuildDir(TestCase)
scipy.weave.tests.test_build_tools.TestConfigureBuildDir.test_bad_path(self)
scipy.weave.tests.test_build_tools.TestConfigureBuildDir.test_curdir(self)
scipy.weave.tests.test_build_tools.TestConfigureBuildDir.test_default(self)
scipy.weave.tests.test_build_tools.TestConfigureBuildDir.test_pardir(self)
scipy.weave.tests.test_build_tools.TestConfigureSysArgv(TestCase)
scipy.weave.tests.test_build_tools.TestConfigureSysArgv.test_simple(self)
scipy.weave.tests.test_build_tools.TestConfigureTempDir(TestConfigureBuildDir)
scipy.weave.tests.test_build_tools.TestConfigureTempDir.test_default(self)
scipy.weave.tests.test_build_tools.is_writable(val)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/tests/test_slice_handler.py----------------------------------------
A:scipy.weave.tests.test_slice_handler.ast_list->parser.suite(suite_string).tolist()
A:scipy.weave.tests.test_slice_handler.actual->replace_whitespace(actual)
A:scipy.weave.tests.test_slice_handler.ast_tuple->parser.suite(suite_string).totuple()
A:scipy.weave.tests.test_slice_handler.(found, data)->find_first_pattern(ast_tuple, indexed_array_pattern)
A:scipy.weave.tests.test_slice_handler.out->out.replace('\n', '').replace('\n', '')
A:scipy.weave.tests.test_slice_handler.desired->replace_whitespace(desired)
scipy.weave.tests.test_slice_handler.TestBuildSliceAtom(TestCase)
scipy.weave.tests.test_slice_handler.TestBuildSliceAtom.generic_check(self,slice_vars,desired)
scipy.weave.tests.test_slice_handler.TestBuildSliceAtom.test_exclusive_end(self)
scipy.weave.tests.test_slice_handler.TestSlice(TestCase)
scipy.weave.tests.test_slice_handler.TestSlice.generic_check(self,suite_string,desired)
scipy.weave.tests.test_slice_handler.TestSlice.test_begin_2_slice(self)
scipy.weave.tests.test_slice_handler.TestSlice.test_begin_3_slice(self)
scipy.weave.tests.test_slice_handler.TestSlice.test_begin_end_2_slice(self)
scipy.weave.tests.test_slice_handler.TestSlice.test_begin_end_3_slice(self)
scipy.weave.tests.test_slice_handler.TestSlice.test_begin_end_stp3_slice(self)
scipy.weave.tests.test_slice_handler.TestSlice.test_begin_step_3_slice(self)
scipy.weave.tests.test_slice_handler.TestSlice.test_empty_2_slice(self)
scipy.weave.tests.test_slice_handler.TestSlice.test_empty_3_slice(self)
scipy.weave.tests.test_slice_handler.TestSlice.test_end_2_slice(self)
scipy.weave.tests.test_slice_handler.TestSlice.test_end_3_slice(self)
scipy.weave.tests.test_slice_handler.TestSlice.test_end_step_3_slice(self)
scipy.weave.tests.test_slice_handler.TestSlice.test_expr_3_slice(self)
scipy.weave.tests.test_slice_handler.TestSlice.test_single_index(self)
scipy.weave.tests.test_slice_handler.TestSlice.test_stp3_slice(self)
scipy.weave.tests.test_slice_handler.TestTransformSlices(TestCase)
scipy.weave.tests.test_slice_handler.TestTransformSlices.generic_check(self,suite_string,desired)
scipy.weave.tests.test_slice_handler.TestTransformSlices.test_simple_expr1(self)
scipy.weave.tests.test_slice_handler.TestTransformSlices.test_simple_expr2(self)
scipy.weave.tests.test_slice_handler.replace_whitespace(in_str)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/tests/test_blitz_tools.py----------------------------------------
A:scipy.weave.tests.test_blitz_tools.ast->parser.suite(expr)
A:scipy.weave.tests.test_blitz_tools.ast_list->parser.suite(expr).tolist()
A:scipy.weave.tests.test_blitz_tools.actual->remove_whitespace(actual)
A:scipy.weave.tests.test_blitz_tools.desired->remove_whitespace(desired)
A:scipy.weave.tests.test_blitz_tools.clean_result->array(arg_dict['result'], copy=1)
A:scipy.weave.tests.test_blitz_tools.t1->time.time()
A:scipy.weave.tests.test_blitz_tools.t2->time.time()
A:scipy.weave.tests.test_blitz_tools.old_env->os.environ.get('PYTHONCOMPILED', '')
A:scipy.weave.tests.test_blitz_tools.mod_location->empty_temp_dir()
A:scipy.weave.tests.test_blitz_tools.arg_list->harvest_variables(ast.tolist())
A:scipy.weave.tests.test_blitz_tools.result->zeros(size, typ)
A:scipy.weave.tests.test_blitz_tools.arg_dict[arg]->numpy.random.normal(0, 1, size).astype(typ)
A:scipy.weave.tests.test_blitz_tools.(standard, compiled)->self.generic_check(expr, arg_dict, type, size, mod_location)
scipy.weave.tests.test_blitz_tools.TestAstToBlitzExpr(TestCase)
scipy.weave.tests.test_blitz_tools.TestAstToBlitzExpr.generic_check(self,expr,desired)
scipy.weave.tests.test_blitz_tools.TestAstToBlitzExpr.test_fdtd_expr(self)
scipy.weave.tests.test_blitz_tools.TestAstToBlitzExpr.test_simple_expr(self)
scipy.weave.tests.test_blitz_tools.TestBlitz(TestCase)
scipy.weave.tests.test_blitz_tools.TestBlitz._check_5point_avg_2d_complex_float(self)
scipy.weave.tests.test_blitz_tools.TestBlitz.generic_2d(self,expr,typ)
scipy.weave.tests.test_blitz_tools.TestBlitz.generic_check(self,expr,arg_dict,type,size,mod_location)
scipy.weave.tests.test_blitz_tools.TestBlitz.test_5point_avg_2d_complex_double(self)
scipy.weave.tests.test_blitz_tools.TestBlitz.test_5point_avg_2d_double(self)
scipy.weave.tests.test_blitz_tools.TestBlitz.test_5point_avg_2d_float(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/tests/test_inline_tools.py----------------------------------------
A:scipy.weave.tests.test_inline_tools.result->scipy.weave.inline_tools.inline(code, ['a'])
scipy.weave.tests.test_inline_tools.TestInline(TestCase)
scipy.weave.tests.test_inline_tools.TestInline.test_exceptions(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/tests/weave_test_utils.py----------------------------------------
A:scipy.weave.tests.weave_test_utils.out->out.replace('\n', '').replace('\n', '')
A:scipy.weave.tests.weave_test_utils.d->scipy.weave.catalog.default_dir()
A:scipy.weave.tests.weave_test_utils.f->scipy.weave.catalog.os_dependent_catalog_name()
A:scipy.weave.tests.weave_test_utils.backup_dir->tempfile.mktemp()
A:scipy.weave.tests.weave_test_utils.cat_dir->scipy.weave.catalog.default_dir()
A:scipy.weave.tests.weave_test_utils.file->os.path.join(backup_dir, file)
A:scipy.weave.tests.weave_test_utils.(d, f)->os.path.split(file)
A:scipy.weave.tests.weave_test_utils.dst_file->os.path.join(cat_dir, f)
A:scipy.weave.tests.weave_test_utils.new_d->os.path.join(d, tempfile.gettempprefix()[1:-1] + repr(i))
A:scipy.weave.tests.weave_test_utils.files->map(lambda x, d=d: os.path.join(d, x), os.listdir(d))
A:scipy.weave.tests.weave_test_utils.dst->os.path.join(dst, basename(src))
scipy.weave.tests.weave_test_utils.cleanup_temp_dir(d)
scipy.weave.tests.weave_test_utils.clear_temp_catalog()
scipy.weave.tests.weave_test_utils.empty_temp_dir()
scipy.weave.tests.weave_test_utils.move_file(src,dst,verbose=0,dry_run=0)
scipy.weave.tests.weave_test_utils.remove_whitespace(in_str)
scipy.weave.tests.weave_test_utils.restore_temp_catalog()
scipy.weave.tests.weave_test_utils.temp_catalog_files(prefix='')


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/tests/test_scxx_object.py----------------------------------------
A:scipy.weave.tests.test_scxx_object.res->scipy.weave.inline_tools.inline('return_val = a.length();', ['a'])
A:scipy.weave.tests.test_scxx_object.file_imposter->cStringIO.StringIO()
A:scipy.weave.tests.test_scxx_object.a->UserDict()
A:scipy.weave.tests.test_scxx_object.before->sys.getrefcount(a.b)
A:scipy.weave.tests.test_scxx_object.after->sys.getrefcount(a.b)
A:scipy.weave.tests.test_scxx_object.after2->sys.getrefcount(a)
A:scipy.weave.tests.test_scxx_object.first->sys.getrefcount(key)
A:scipy.weave.tests.test_scxx_object.second->sys.getrefcount(key)
A:scipy.weave.tests.test_scxx_object.third->sys.getrefcount(a)
A:scipy.weave.tests.test_scxx_object.before1->sys.getrefcount(a)
A:scipy.weave.tests.test_scxx_object.after1->sys.getrefcount(a)
A:scipy.weave.tests.test_scxx_object.(obj, key, val)->scipy.weave.inline_tools.inline(code, ['a'])
A:scipy.weave.tests.test_scxx_object.key->Foo(4)
scipy.weave.tests.test_scxx_object.Foo
scipy.weave.tests.test_scxx_object.Foo.bar(self)
scipy.weave.tests.test_scxx_object.Foo.bar2(self,val1,val2)
scipy.weave.tests.test_scxx_object.Foo.bar3(self,val1,val2,val3=1)
scipy.weave.tests.test_scxx_object.TestObjectAttr(TestCase)
scipy.weave.tests.test_scxx_object.TestObjectAttr.generic_attr(self,code,args=['a'])
scipy.weave.tests.test_scxx_object.TestObjectAttr.test_attr_call(self)
scipy.weave.tests.test_scxx_object.TestObjectAttr.test_char(self)
scipy.weave.tests.test_scxx_object.TestObjectAttr.test_char_fail(self)
scipy.weave.tests.test_scxx_object.TestObjectAttr.test_obj(self)
scipy.weave.tests.test_scxx_object.TestObjectAttr.test_obj_fail(self)
scipy.weave.tests.test_scxx_object.TestObjectAttr.test_string(self)
scipy.weave.tests.test_scxx_object.TestObjectAttr.test_string_fail(self)
scipy.weave.tests.test_scxx_object.TestObjectCall(TestCase)
scipy.weave.tests.test_scxx_object.TestObjectCall.test_args(self)
scipy.weave.tests.test_scxx_object.TestObjectCall.test_args_kw(self)
scipy.weave.tests.test_scxx_object.TestObjectCall.test_noargs(self)
scipy.weave.tests.test_scxx_object.TestObjectCall.test_noargs_with_args(self)
scipy.weave.tests.test_scxx_object.TestObjectCast(TestCase)
scipy.weave.tests.test_scxx_object.TestObjectCast.test_complex_cast(self)
scipy.weave.tests.test_scxx_object.TestObjectCast.test_double_cast(self)
scipy.weave.tests.test_scxx_object.TestObjectCast.test_float_cast(self)
scipy.weave.tests.test_scxx_object.TestObjectCast.test_int_cast(self)
scipy.weave.tests.test_scxx_object.TestObjectCast.test_string_cast(self)
scipy.weave.tests.test_scxx_object.TestObjectCmp(TestCase)
scipy.weave.tests.test_scxx_object.TestObjectCmp.test_char(self)
scipy.weave.tests.test_scxx_object.TestObjectCmp.test_double(self)
scipy.weave.tests.test_scxx_object.TestObjectCmp.test_equal(self)
scipy.weave.tests.test_scxx_object.TestObjectCmp.test_equal_objects(self)
scipy.weave.tests.test_scxx_object.TestObjectCmp.test_gt(self)
scipy.weave.tests.test_scxx_object.TestObjectCmp.test_gte(self)
scipy.weave.tests.test_scxx_object.TestObjectCmp.test_int(self)
scipy.weave.tests.test_scxx_object.TestObjectCmp.test_int2(self)
scipy.weave.tests.test_scxx_object.TestObjectCmp.test_lt(self)
scipy.weave.tests.test_scxx_object.TestObjectCmp.test_lte(self)
scipy.weave.tests.test_scxx_object.TestObjectCmp.test_not_equal(self)
scipy.weave.tests.test_scxx_object.TestObjectCmp.test_std_string(self)
scipy.weave.tests.test_scxx_object.TestObjectCmp.test_unsigned_long(self)
scipy.weave.tests.test_scxx_object.TestObjectConstruct(TestCase)
scipy.weave.tests.test_scxx_object.TestObjectConstruct.test_complex(self)
scipy.weave.tests.test_scxx_object.TestObjectConstruct.test_double(self)
scipy.weave.tests.test_scxx_object.TestObjectConstruct.test_float(self)
scipy.weave.tests.test_scxx_object.TestObjectConstruct.test_int(self)
scipy.weave.tests.test_scxx_object.TestObjectConstruct.test_std_string(self)
scipy.weave.tests.test_scxx_object.TestObjectConstruct.test_string(self)
scipy.weave.tests.test_scxx_object.TestObjectDel(TestCase)
scipy.weave.tests.test_scxx_object.TestObjectDel.generic(self,code)
scipy.weave.tests.test_scxx_object.TestObjectDel.test_char(self)
scipy.weave.tests.test_scxx_object.TestObjectDel.test_object(self)
scipy.weave.tests.test_scxx_object.TestObjectDel.test_string(self)
scipy.weave.tests.test_scxx_object.TestObjectHasattr(TestCase)
scipy.weave.tests.test_scxx_object.TestObjectHasattr.test_func(self)
scipy.weave.tests.test_scxx_object.TestObjectHasattr.test_inline(self)
scipy.weave.tests.test_scxx_object.TestObjectHasattr.test_std_string(self)
scipy.weave.tests.test_scxx_object.TestObjectHasattr.test_string(self)
scipy.weave.tests.test_scxx_object.TestObjectHasattr.test_string_fail(self)
scipy.weave.tests.test_scxx_object.TestObjectHash(TestCase)
scipy.weave.tests.test_scxx_object.TestObjectHash.test_hash(self)
scipy.weave.tests.test_scxx_object.TestObjectIsCallable(TestCase)
scipy.weave.tests.test_scxx_object.TestObjectIsCallable.test_false(self)
scipy.weave.tests.test_scxx_object.TestObjectIsCallable.test_true(self)
scipy.weave.tests.test_scxx_object.TestObjectIsTrue(TestCase)
scipy.weave.tests.test_scxx_object.TestObjectIsTrue.test_false(self)
scipy.weave.tests.test_scxx_object.TestObjectIsTrue.test_true(self)
scipy.weave.tests.test_scxx_object.TestObjectMcall(TestCase)
scipy.weave.tests.test_scxx_object.TestObjectMcall.test_args(self)
scipy.weave.tests.test_scxx_object.TestObjectMcall.test_args_kw(self)
scipy.weave.tests.test_scxx_object.TestObjectMcall.test_noargs(self)
scipy.weave.tests.test_scxx_object.TestObjectMcall.test_noargs_with_args(self)
scipy.weave.tests.test_scxx_object.TestObjectMcall.test_std_args(self)
scipy.weave.tests.test_scxx_object.TestObjectMcall.test_std_args_kw(self)
scipy.weave.tests.test_scxx_object.TestObjectMcall.test_std_noargs(self)
scipy.weave.tests.test_scxx_object.TestObjectPrint(TestCase)
scipy.weave.tests.test_scxx_object.TestObjectPrint.test_stringio(self)
scipy.weave.tests.test_scxx_object.TestObjectRepr(TestCase)
scipy.weave.tests.test_scxx_object.TestObjectRepr.test_repr(self)
scipy.weave.tests.test_scxx_object.TestObjectSetAttr(TestCase)
scipy.weave.tests.test_scxx_object.TestObjectSetAttr.generic_existing(self,code,desired)
scipy.weave.tests.test_scxx_object.TestObjectSetAttr.generic_new(self,code,desired)
scipy.weave.tests.test_scxx_object.TestObjectSetAttr.test_existing_char(self)
scipy.weave.tests.test_scxx_object.TestObjectSetAttr.test_existing_char1(self)
scipy.weave.tests.test_scxx_object.TestObjectSetAttr.test_existing_complex(self)
scipy.weave.tests.test_scxx_object.TestObjectSetAttr.test_existing_double(self)
scipy.weave.tests.test_scxx_object.TestObjectSetAttr.test_existing_int(self)
scipy.weave.tests.test_scxx_object.TestObjectSetAttr.test_existing_object(self)
scipy.weave.tests.test_scxx_object.TestObjectSetAttr.test_existing_string(self)
scipy.weave.tests.test_scxx_object.TestObjectSetAttr.test_existing_string1(self)
scipy.weave.tests.test_scxx_object.TestObjectSetAttr.test_new_char(self)
scipy.weave.tests.test_scxx_object.TestObjectSetAttr.test_new_fail(self)
scipy.weave.tests.test_scxx_object.TestObjectSetAttr.test_new_object(self)
scipy.weave.tests.test_scxx_object.TestObjectSetAttr.test_new_string(self)
scipy.weave.tests.test_scxx_object.TestObjectSetItemOpIndex(TestCase)
scipy.weave.tests.test_scxx_object.TestObjectSetItemOpIndex.test_list_refcount(self)
scipy.weave.tests.test_scxx_object.TestObjectSetItemOpIndex.test_set_char(self)
scipy.weave.tests.test_scxx_object.TestObjectSetItemOpIndex.test_set_double(self)
scipy.weave.tests.test_scxx_object.TestObjectSetItemOpIndex.test_set_int(self)
scipy.weave.tests.test_scxx_object.TestObjectSetItemOpIndex.test_set_string1(self)
scipy.weave.tests.test_scxx_object.TestObjectSetItemOpIndex.test_set_string2(self)
scipy.weave.tests.test_scxx_object.TestObjectSetItemOpKey(TestCase)
scipy.weave.tests.test_scxx_object.TestObjectSetItemOpKey.test_key_refcount(self)
scipy.weave.tests.test_scxx_object.TestObjectSetItemOpKey.test_set_char(self)
scipy.weave.tests.test_scxx_object.TestObjectSetItemOpKey.test_set_class(self)
scipy.weave.tests.test_scxx_object.TestObjectSetItemOpKey.test_set_complex(self)
scipy.weave.tests.test_scxx_object.TestObjectSetItemOpKey.test_set_double_exists(self)
scipy.weave.tests.test_scxx_object.TestObjectSetItemOpKey.test_set_double_new(self)
scipy.weave.tests.test_scxx_object.TestObjectSetItemOpKey.test_set_from_member(self)
scipy.weave.tests.test_scxx_object.TestObjectSize(TestCase)
scipy.weave.tests.test_scxx_object.TestObjectSize.test_len(self)
scipy.weave.tests.test_scxx_object.TestObjectSize.test_length(self)
scipy.weave.tests.test_scxx_object.TestObjectSize.test_size(self)
scipy.weave.tests.test_scxx_object.TestObjectStr(TestCase)
scipy.weave.tests.test_scxx_object.TestObjectStr.test_str(self)
scipy.weave.tests.test_scxx_object.TestObjectType(TestCase)
scipy.weave.tests.test_scxx_object.TestObjectType.test_type(self)
scipy.weave.tests.test_scxx_object.TestObjectUnicode(TestCase)
scipy.weave.tests.test_scxx_object.TestObjectUnicode.test_unicode(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/tests/test_scxx_sequence.py----------------------------------------
A:scipy.weave.tests.test_scxx_sequence.a->scipy.weave.inline_tools.inline(code)
A:scipy.weave.tests.test_scxx_sequence.before->sys.getrefcount(a)
A:scipy.weave.tests.test_scxx_sequence.after->sys.getrefcount(a)
A:scipy.weave.tests.test_scxx_sequence.res->scipy.weave.inline_tools.inline(code, ['a'])
A:scipy.weave.tests.test_scxx_sequence.t1->time.time()
A:scipy.weave.tests.test_scxx_sequence.t2->time.time()
A:scipy.weave.tests.test_scxx_sequence.before1->sys.getrefcount(a)
A:scipy.weave.tests.test_scxx_sequence.before2->sys.getrefcount(item)
A:scipy.weave.tests.test_scxx_sequence.after1->sys.getrefcount(a)
A:scipy.weave.tests.test_scxx_sequence.after2->sys.getrefcount(item)
scipy.weave.tests.test_scxx_sequence.TestList(_TestSequenceBase)
scipy.weave.tests.test_scxx_sequence.TestList.test_append(self)
scipy.weave.tests.test_scxx_sequence.TestList.test_append_passed_item(self)
scipy.weave.tests.test_scxx_sequence.TestList.test_get_item_index_error(self)
scipy.weave.tests.test_scxx_sequence.TestList.test_insert(self)
scipy.weave.tests.test_scxx_sequence.TestList.test_int_add_speed(self)
scipy.weave.tests.test_scxx_sequence.TestList.test_set_item_index_error(self)
scipy.weave.tests.test_scxx_sequence.TestList.test_set_item_operator_equal(self)
scipy.weave.tests.test_scxx_sequence.TestList.test_set_item_operator_equal_created(self)
scipy.weave.tests.test_scxx_sequence.TestList.test_string_add_speed(self)
scipy.weave.tests.test_scxx_sequence.TestTuple(_TestSequenceBase)
scipy.weave.tests.test_scxx_sequence.TestTuple.test_get_item_operator_index_error(self)
scipy.weave.tests.test_scxx_sequence.TestTuple.test_set_item_index_error(self)
scipy.weave.tests.test_scxx_sequence.TestTuple.test_set_item_operator_equal(self)
scipy.weave.tests.test_scxx_sequence.TestTuple.test_set_item_operator_equal_fail(self)
scipy.weave.tests.test_scxx_sequence._TestSequenceBase(TestCase)
scipy.weave.tests.test_scxx_sequence._TestSequenceBase.test_access_set_speed(self)
scipy.weave.tests.test_scxx_sequence._TestSequenceBase.test_access_speed(self)
scipy.weave.tests.test_scxx_sequence._TestSequenceBase.test_conversion(self)
scipy.weave.tests.test_scxx_sequence._TestSequenceBase.test_count(self)
scipy.weave.tests.test_scxx_sequence._TestSequenceBase.test_in(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/tests/test_ast_tools.py----------------------------------------
A:scipy.weave.tests.test_ast_tools.ast_list->parser.suite(expr).tolist()
A:scipy.weave.tests.test_ast_tools.actual->scipy.weave.ast_tools.harvest_variables(ast_list)
scipy.weave.tests.test_ast_tools.TestHarvestVariables(TestCase)
scipy.weave.tests.test_ast_tools.TestHarvestVariables.generic_check(self,expr,desired)
scipy.weave.tests.test_ast_tools.TestHarvestVariables.test_simple_expr(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/tests/test_standard_array_spec.py----------------------------------------
A:scipy.weave.tests.test_standard_array_spec.out->out.replace('\n', '').replace('\n', '')
A:scipy.weave.tests.test_standard_array_spec.s->scipy.weave.standard_array_spec.array_converter()
scipy.weave.tests.test_standard_array_spec.TestArrayConverter(TestCase)
scipy.weave.tests.test_standard_array_spec.TestArrayConverter.test_type_match_array(self)
scipy.weave.tests.test_standard_array_spec.TestArrayConverter.test_type_match_int(self)
scipy.weave.tests.test_standard_array_spec.TestArrayConverter.test_type_match_string(self)
scipy.weave.tests.test_standard_array_spec.remove_whitespace(in_str)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/tests/test_numpy_scalar_spec.py----------------------------------------
A:scipy.weave.tests.test_numpy_scalar_spec.f->os.path.basename(unique_file(d, file_name))
A:scipy.weave.tests.test_numpy_scalar_spec.out->out.replace('\n', '').replace('\n', '')
A:scipy.weave.tests.test_numpy_scalar_spec.self.converter->numpy_complex_scalar_converter()
A:scipy.weave.tests.test_numpy_scalar_spec.mod_name->unique_mod(test_dir, mod_name)
A:scipy.weave.tests.test_numpy_scalar_spec.mod->scipy.weave.ext_tools.ext_module(mod_name)
A:scipy.weave.tests.test_numpy_scalar_spec.a->numpy.complex128(1 + 1j)
A:scipy.weave.tests.test_numpy_scalar_spec.test->scipy.weave.ext_tools.ext_function('test', code, ['a'])
A:scipy.weave.tests.test_numpy_scalar_spec.b->numpy.complex128(1.0 + 1j)
A:scipy.weave.tests.test_numpy_scalar_spec.c->test(b)
A:scipy.weave.tests.test_numpy_scalar_spec.result->scipy.weave.inline_tools.inline('return_val=1.0/a;', ['a'])
A:scipy.weave.tests.test_numpy_scalar_spec.test_dir->os.path.abspath(name)
scipy.weave.tests.test_numpy_scalar_spec.NumpyComplexScalarConverter(TestCase)
scipy.weave.tests.test_numpy_scalar_spec.NumpyComplexScalarConverter.setUp(self)
scipy.weave.tests.test_numpy_scalar_spec.NumpyComplexScalarConverter.test_complex_return(self)
scipy.weave.tests.test_numpy_scalar_spec.NumpyComplexScalarConverter.test_complex_var_in(self)
scipy.weave.tests.test_numpy_scalar_spec.NumpyComplexScalarConverter.test_inline(self)
scipy.weave.tests.test_numpy_scalar_spec.NumpyComplexScalarConverter.test_type_match_complex128(self)
scipy.weave.tests.test_numpy_scalar_spec.NumpyComplexScalarConverter.test_type_match_float(self)
scipy.weave.tests.test_numpy_scalar_spec.NumpyComplexScalarConverter.test_type_match_int(self)
scipy.weave.tests.test_numpy_scalar_spec.NumpyComplexScalarConverter.test_type_match_string(self)
scipy.weave.tests.test_numpy_scalar_spec.remove_file(name)
scipy.weave.tests.test_numpy_scalar_spec.remove_whitespace(in_str)
scipy.weave.tests.test_numpy_scalar_spec.setup_test_location()
scipy.weave.tests.test_numpy_scalar_spec.teardown_test_location()
scipy.weave.tests.test_numpy_scalar_spec.unique_mod(d,file_name)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/tests/scxx_timings.py----------------------------------------
A:scipy.weave.tests.scxx_timings.t1->time.time()
A:scipy.weave.tests.scxx_timings.t2->time.time()
scipy.weave.tests.scxx_timings.list_append_c(a,Na)
scipy.weave.tests.scxx_timings.list_append_py(a,Na)
scipy.weave.tests.scxx_timings.list_append_scxx(a,Na)
scipy.weave.tests.scxx_timings.list_copy_c(a,b)
scipy.weave.tests.scxx_timings.list_copy_py(a,b)
scipy.weave.tests.scxx_timings.list_copy_scxx(a,b)
scipy.weave.tests.scxx_timings.time_list_append(Na)
scipy.weave.tests.scxx_timings.time_list_copy(N)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/examples/functional.py----------------------------------------
A:scipy.weave.examples.functional.t1->time.time()
A:scipy.weave.examples.functional.result->c_list_map2(len, seq)
A:scipy.weave.examples.functional.t2->time.time()
scipy.weave.examples.functional.c_list_map(func,seq)
scipy.weave.examples.functional.c_list_map2(func,seq)
scipy.weave.examples.functional.main()
scipy.weave.examples.functional.time_it(m,n)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/examples/print_example.py----------------------------------------
A:scipy.weave.examples.print_example.t1->time.time()
A:scipy.weave.examples.print_example.t2->time.time()
scipy.weave.examples.print_example.cout_example(lst)
scipy.weave.examples.print_example.print_compare(n)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/examples/ramp.py----------------------------------------
A:scipy.weave.examples.ramp.t1->time.time()
A:scipy.weave.examples.ramp.t2->time.time()
A:scipy.weave.examples.ramp.arr1->array([0] * N_array, float)
A:scipy.weave.examples.ramp.arr2->array([0] * N_array, float)
scipy.weave.examples.ramp.Ramp(result,size,start,end)
scipy.weave.examples.ramp.Ramp_list1(result,start,end)
scipy.weave.examples.ramp.Ramp_list2(result,start,end)
scipy.weave.examples.ramp.Ramp_numeric1(result,start,end)
scipy.weave.examples.ramp.Ramp_numeric2(result,start,end)
scipy.weave.examples.ramp.main()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/examples/vq.py----------------------------------------
A:scipy.weave.examples.vq.obs->RandomArray.normal(0.0, 1.0, (Nobs, Nfeatures))
A:scipy.weave.examples.vq.code_book->asarray(code_book)
A:scipy.weave.examples.vq.obs_sh->shape(obs)
A:scipy.weave.examples.vq.code_book_sh->shape(code_book)
A:scipy.weave.examples.vq.(code, distortion)->scipy.weave.inline_tools.inline(code, ['obs', 'code_book'])
A:scipy.weave.examples.vq.codes->RandomArray.normal(0.0, 1.0, (Ncodes, Nfeatures))
A:scipy.weave.examples.vq.t1->time.time()
A:scipy.weave.examples.vq.(code, dist)->vq3(obs, codes)
A:scipy.weave.examples.vq.t2->time.time()
A:scipy.weave.examples.vq.b->vq3(obs, codes)
scipy.weave.examples.vq.compare(m,Nobs,Ncodes,Nfeatures)
scipy.weave.examples.vq.vq(obs,code_book)
scipy.weave.examples.vq.vq2(obs,code_book)
scipy.weave.examples.vq.vq3(obs,code_book)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/examples/binary_search.py----------------------------------------
A:scipy.weave.examples.binary_search.t1->time.time()
A:scipy.weave.examples.binary_search.t2->time.time()
A:scipy.weave.examples.binary_search.a->range(m)
scipy.weave.examples.binary_search.c_int_search(seq,t,chk=1)
scipy.weave.examples.binary_search.c_int_search_scxx(seq,t,chk=1)
scipy.weave.examples.binary_search.py_int_search(seq,t)
scipy.weave.examples.binary_search.search_compare(a,n)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/examples/py_none.py----------------------------------------
A:scipy.weave.examples.py_none.t1->time.time()
A:scipy.weave.examples.py_none.t2->time.time()
scipy.weave.examples.py_none.py_func()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/examples/vtk_example.py----------------------------------------
A:scipy.weave.examples.vtk_example.a->vtk.vtkStructuredPoints()
A:scipy.weave.examples.vtk_example.arr->numpy.arange(0, 10, 0.0001, 'f')
A:scipy.weave.examples.vtk_example.v_arr->vtk.vtkFloatArray()
A:scipy.weave.examples.vtk_example.ts->time.clock()
scipy.weave.examples.vtk_example.array_test()
scipy.weave.examples.vtk_example.simple_test()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/examples/wx_example.py----------------------------------------
A:scipy.weave.examples.wx_example.dc->wxClientDC(self)
A:scipy.weave.examples.wx_example.te->wxClientDC(self).GetTextExtent('Hello World')
A:scipy.weave.examples.wx_example.font->wxFont(20, wxSWISS, wxNORMAL, wxNORMAL)
A:scipy.weave.examples.wx_example.red->wxNamedColour('RED')
A:scipy.weave.examples.wx_example.blue->wxNamedColour('BLUE')
A:scipy.weave.examples.wx_example.(self.x, self.y)->self.ConvertEventCoords(event)
A:scipy.weave.examples.wx_example.(xView, yView)->self.GetViewStart()
A:scipy.weave.examples.wx_example.(xDelta, yDelta)->self.GetScrollPixelsPerUnit()
A:scipy.weave.examples.wx_example.background->wx.wxNamedColour('white')
A:scipy.weave.examples.wx_example.canvas->MyCanvas(self, -1)
A:scipy.weave.examples.wx_example.win->MyFrame(NULL, -1, 'This is a wxFrame', size=(350, 200), style=wxDEFAULT_FRAME_STYLE)
A:scipy.weave.examples.wx_example.app->MyApp(0)
scipy.weave.examples.wx_example.MyApp(wxApp)
scipy.weave.examples.wx_example.MyApp.OnInit(self)
scipy.weave.examples.wx_example.MyCanvas(self,parent,id=-1,size=wxDefaultSize)
scipy.weave.examples.wx_example.MyCanvas.ConvertEventCoords(self,event)
scipy.weave.examples.wx_example.MyCanvas.DoDrawing(self,dc)
scipy.weave.examples.wx_example.MyCanvas.DoDrawing2(self,dc)
scipy.weave.examples.wx_example.MyCanvas.DrawSavedLines(self,dc)
scipy.weave.examples.wx_example.MyCanvas.OnLeftButtonEvent(self,event)
scipy.weave.examples.wx_example.MyCanvas.OnPaint(self,event)
scipy.weave.examples.wx_example.MyCanvas.SetXY(self,event)
scipy.weave.examples.wx_example.MyCanvas.__init__(self,parent,id=-1,size=wxDefaultSize)
scipy.weave.examples.wx_example.MyCanvas.getHeight(self)
scipy.weave.examples.wx_example.MyCanvas.getWidth(self)
scipy.weave.examples.wx_example.MyFrame(self,parent,ID,title,pos=wxDefaultPosition,size=wxDefaultSize,style=wxDEFAULT_FRAME_STYLE)
scipy.weave.examples.wx_example.MyFrame.__init__(self,parent,ID,title,pos=wxDefaultPosition,size=wxDefaultSize,style=wxDEFAULT_FRAME_STYLE)
scipy.weave.examples.wx_example.py_canvas(self,parent,id=-1,pos=wx.wxPyDefaultPosition,size=wx.wxPyDefaultSize,**attr)
scipy.weave.examples.wx_example.py_canvas.__init__(self,parent,id=-1,pos=wx.wxPyDefaultPosition,size=wx.wxPyDefaultSize,**attr)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/examples/array3d.py----------------------------------------
A:scipy.weave.examples.array3d.arr->create_array()
scipy.weave.examples.array3d.blitz_inline(arr)
scipy.weave.examples.array3d.create_array()
scipy.weave.examples.array3d.main()
scipy.weave.examples.array3d.pure_inline(arr)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/examples/wx_speed.py----------------------------------------
A:scipy.weave.examples.wx_speed.line->line.astype(uint16).astype(uint16)
A:scipy.weave.examples.wx_speed.max_pt->maximum.reduce(line, 0)
A:scipy.weave.examples.wx_speed.min_pt->minimum.reduce(line, 0)
A:scipy.weave.examples.wx_speed.(w, h)->self.GetSizeTuple()
A:scipy.weave.examples.wx_speed.x->arange(0, w, typecode=int32)
A:scipy.weave.examples.wx_speed.y->y.astype(int32).astype(int32)
A:scipy.weave.examples.wx_speed.self.points->concatenate((x[:, newaxis], y[:, newaxis]), -1)
A:scipy.weave.examples.wx_speed.dc->wxPaintDC(self)
A:scipy.weave.examples.wx_speed.pt_copy->self.points.copy()
A:scipy.weave.examples.wx_speed.t1->time.clock()
A:scipy.weave.examples.wx_speed.offset->array((1, 0))
A:scipy.weave.examples.wx_speed.mod->array((w, 0))
A:scipy.weave.examples.wx_speed.red_pen->wxPen('red', size)
A:scipy.weave.examples.wx_speed.white_pen->wxPen('white', size)
A:scipy.weave.examples.wx_speed.blue_pen->wxPen('blue', size)
A:scipy.weave.examples.wx_speed.pens->iter([red_pen, white_pen, blue_pen])
A:scipy.weave.examples.wx_speed.pen->iter([red_pen, white_pen, blue_pen]).next()
A:scipy.weave.examples.wx_speed.next_y->(h / 2.0 * sin(x * ang - phase) + h / 2.0).astype(int32)
A:scipy.weave.examples.wx_speed.t2->time.clock()
A:scipy.weave.examples.wx_speed.self.canvas->Canvas(self)
A:scipy.weave.examples.wx_speed.frame->CanvasWindow(title='Speed Examples', size=(500, 500))
A:scipy.weave.examples.wx_speed.app->MyApp(0)
scipy.weave.examples.wx_speed.NewDrawLines(dc,line)
scipy.weave.examples.wx_speed.polyline(dc,line,xoffset=0,yoffset=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/examples/swig2_example.py----------------------------------------
A:scipy.weave.examples.swig2_example.a->swig2_ext.A()
A:scipy.weave.examples.swig2_example.b->swig2_ext.foo()
scipy.weave.examples.swig2_example.test()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/examples/increment_example.py----------------------------------------
A:scipy.weave.examples.increment_example.mod->ext_tools.ext_module('increment_ext')
A:scipy.weave.examples.increment_example.func->ext_tools.ext_function('increment_by_2', ext_code, ['a'])
scipy.weave.examples.increment_example.build_increment_ext()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/examples/object.py----------------------------------------
A:scipy.weave.examples.object.obj->UserList([1, [1, 2], 'hello'])
scipy.weave.examples.object.Foo(self)
scipy.weave.examples.object.Foo.__init__(self)
scipy.weave.examples.object.Foo.inc(self,amount)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/examples/fibonacci.py----------------------------------------
A:scipy.weave.examples.fibonacci.mod->ext_tools.ext_module('fibonacci_ext')
A:scipy.weave.examples.fibonacci.fib->ext_tools.ext_function('c_fib2', ext_code, ['a'])
A:scipy.weave.examples.fibonacci.t1->time.time()
A:scipy.weave.examples.fibonacci.t2->time.time()
scipy.weave.examples.fibonacci.build_fibonacci()
scipy.weave.examples.fibonacci.loop_compare(m,n)
scipy.weave.examples.fibonacci.py_fib1(a)
scipy.weave.examples.fibonacci.py_fib2(a)
scipy.weave.examples.fibonacci.recurse_compare(n)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/examples/support_code_example.py----------------------------------------
A:scipy.weave.examples.support_code_example.val->inline_tools.inline('return_val = length(a);', ['a'], support_code=support_code)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/examples/cast_copy_transpose.py----------------------------------------
A:scipy.weave.examples.cast_copy_transpose.new_array->zeros(shape(a_2d), type)
A:scipy.weave.examples.cast_copy_transpose.a->ones((n, n), float64)
A:scipy.weave.examples.cast_copy_transpose.t1->time.time()
A:scipy.weave.examples.cast_copy_transpose.b->_inplace_transpose(a)
A:scipy.weave.examples.cast_copy_transpose.t2->time.time()
scipy.weave.examples.cast_copy_transpose._castCopyAndTranspose(type,*arrays)
scipy.weave.examples.cast_copy_transpose._cast_copy_transpose(type,a_2d)
scipy.weave.examples.cast_copy_transpose._cast_copy_transpose2(type,a_2d)
scipy.weave.examples.cast_copy_transpose._inplace_transpose(a_2d)
scipy.weave.examples.cast_copy_transpose.cast_copy_transpose(type,*arrays)
scipy.weave.examples.cast_copy_transpose.cast_copy_transpose2(type,*arrays)
scipy.weave.examples.cast_copy_transpose.compare(m,n)
scipy.weave.examples.cast_copy_transpose.inplace_cast_copy_transpose(*arrays)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/examples/md5_speed.py----------------------------------------
A:scipy.weave.examples.md5_speed.t1->time.time()
A:scipy.weave.examples.md5_speed.q->md5.new(s).digest()
A:scipy.weave.examples.md5_speed.t2->time.time()
A:scipy.weave.examples.md5_speed.new_str->cStringIO.StringIO()
A:scipy.weave.examples.md5_speed.l->random.randrange(lo, hi)
A:scipy.weave.examples.md5_speed.key->md5.new(s).digest()
A:scipy.weave.examples.md5_speed.lst->generate_random(m, n)
scipy.weave.examples.md5_speed.generate_random(avg_length,count)
scipy.weave.examples.md5_speed.md5_dict(lst)
scipy.weave.examples.md5_speed.run(m=200,n=10)
scipy.weave.examples.md5_speed.speed(n,m)
scipy.weave.examples.md5_speed.std_dict(lst)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/examples/tuple_return.py----------------------------------------
A:scipy.weave.examples.tuple_return.t1->time.time()
A:scipy.weave.examples.tuple_return.py_result->multi_return()
A:scipy.weave.examples.tuple_return.t2->time.time()
A:scipy.weave.examples.tuple_return.result->c_multi_return()
A:scipy.weave.examples.tuple_return.c_result->c_multi_return()
scipy.weave.examples.tuple_return.c_multi_return()
scipy.weave.examples.tuple_return.compare(m)
scipy.weave.examples.tuple_return.multi_return()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/examples/dict_sort.py----------------------------------------
A:scipy.weave.examples.dict_sort.items->adict.items()
A:scipy.weave.examples.dict_sort.keys->adict.keys()
A:scipy.weave.examples.dict_sort.t1->time.time()
A:scipy.weave.examples.dict_sort.b->c_sort2(a)
A:scipy.weave.examples.dict_sort.t2->time.time()
A:scipy.weave.examples.dict_sort.a->setup_dict(m)
A:scipy.weave.examples.dict_sort.key->random.choice(a)
scipy.weave.examples.dict_sort.c_sort(adict)
scipy.weave.examples.dict_sort.c_sort2(adict)
scipy.weave.examples.dict_sort.setup_dict(m)
scipy.weave.examples.dict_sort.sort_compare(a,n)
scipy.weave.examples.dict_sort.sortedDictValues1(adict)
scipy.weave.examples.dict_sort.sortedDictValues2(adict)
scipy.weave.examples.dict_sort.sortedDictValues3(adict)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/weave/examples/ramp2.py----------------------------------------
A:scipy.weave.examples.ramp2.mod->scipy.weave.ext_tools.ext_module('ramp_ext')
A:scipy.weave.examples.ramp2.result->array([0], float64)
A:scipy.weave.examples.ramp2.func->scipy.weave.ext_tools.ext_function('Ramp', code, ['result', 'start', 'end'])
A:scipy.weave.examples.ramp2.t1->time.time()
A:scipy.weave.examples.ramp2.t2->time.time()
A:scipy.weave.examples.ramp2.arr->array([0] * 10000, float64)
scipy.weave.examples.ramp2.Ramp(result,size,start,end)
scipy.weave.examples.ramp2.build_ramp_ext()
scipy.weave.examples.ramp2.main()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/interpolate/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/interpolate/ndgriddata.py----------------------------------------
A:scipy.interpolate.ndgriddata.x->_ndim_coords_from_arrays(x)
A:scipy.interpolate.ndgriddata.self.tree->cKDTree(x)
A:scipy.interpolate.ndgriddata.xi->self._check_call_shape(xi)
A:scipy.interpolate.ndgriddata.(dist, i)->self.tree.query(xi)
A:scipy.interpolate.ndgriddata.points->points.ravel().ravel()
A:scipy.interpolate.ndgriddata.idx->numpy.argsort(points)
A:scipy.interpolate.ndgriddata.ip->CloughTocher2DInterpolator(points, values, fill_value=fill_value)
scipy.interpolate.NearestNDInterpolator(self,x,y)
scipy.interpolate.griddata(points,values,xi,method='linear',fill_value=np.nan)
scipy.interpolate.ndgriddata.NearestNDInterpolator(self,x,y)
scipy.interpolate.ndgriddata.NearestNDInterpolator.__init__(self,x,y)
scipy.interpolate.ndgriddata.griddata(points,values,xi,method='linear',fill_value=np.nan)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/interpolate/interpolate_wrapper.py----------------------------------------
A:scipy.interpolate.interpolate_wrapper.shifted_x->numpy.concatenate((np.array([x[0] - 1]), x[0:-1]))
A:scipy.interpolate.interpolate_wrapper.midpoints_of_x->atleast_1d_and_contiguous(0.5 * (x + shifted_x))
A:scipy.interpolate.interpolate_wrapper.new_x->atleast_1d_and_contiguous(new_x, np.float64)
A:scipy.interpolate.interpolate_wrapper.indices->numpy.atleast_1d(np.clip(indices, 0, np.Inf).astype(np.int))
A:scipy.interpolate.interpolate_wrapper.new_y->numpy.take(y, indices, axis=-1)
A:scipy.interpolate.interpolate_wrapper.x->atleast_1d_and_contiguous(x, np.float64)
A:scipy.interpolate.interpolate_wrapper.y->atleast_1d_and_contiguous(y, np.float64)
A:scipy.interpolate.interpolate_wrapper.bad_index->_interpolate.block_average_above_dddd(x, y, new_x, new_y)
scipy.interpolate.interpolate_wrapper.atleast_1d_and_contiguous(ary,dtype=np.float64)
scipy.interpolate.interpolate_wrapper.block(x,y,new_x)
scipy.interpolate.interpolate_wrapper.block_average_above(x,y,new_x)
scipy.interpolate.interpolate_wrapper.linear(x,y,new_x)
scipy.interpolate.interpolate_wrapper.logarithmic(x,y,new_x)
scipy.interpolate.interpolate_wrapper.nearest(x,y,new_x)
scipy.interpolate_wrapper.atleast_1d_and_contiguous(ary,dtype=np.float64)
scipy.interpolate_wrapper.block(x,y,new_x)
scipy.interpolate_wrapper.block_average_above(x,y,new_x)
scipy.interpolate_wrapper.linear(x,y,new_x)
scipy.interpolate_wrapper.logarithmic(x,y,new_x)
scipy.interpolate_wrapper.nearest(x,y,new_x)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/interpolate/polyint.py----------------------------------------
A:scipy.interpolate.polyint.(x, x_shape)->self._prepare_x(x)
A:scipy.interpolate.polyint.y->numpy.asarray(y)
A:scipy.interpolate.polyint.x->numpy.asarray(x)
A:scipy.interpolate.polyint.nx->len(x_shape)
A:scipy.interpolate.polyint.ny->len(self._y_extra_shape)
A:scipy.interpolate.polyint.yi->self._reshape_yi(yi, check=True)
A:scipy.interpolate.polyint.self.xi->numpy.concatenate((self.xi, xi))
A:scipy.interpolate.polyint.self.yi->numpy.vstack((self.yi, yi))
A:scipy.interpolate.polyint.c->numpy.zeros((self.n + 1, self.r), dtype=self.dtype)
A:scipy.interpolate.polyint.Vk->numpy.zeros((self.n, self.r), dtype=self.dtype)
A:scipy.interpolate.polyint.p->numpy.zeros((0, self.r), dtype=self.dtype)
A:scipy.interpolate.polyint.pi->numpy.zeros((n, len(x)))
A:scipy.interpolate.polyint.w->numpy.zeros((n, len(x)))
A:scipy.interpolate.polyint.cn->numpy.zeros((max(der, n + 1), len(x), r), dtype=self.dtype)
A:scipy.interpolate.polyint.P->PchipInterpolator(xi, yi, axis=axis)
A:scipy.interpolate.polyint.d->PchipInterpolator(xi, yi, axis=axis).derivatives(x, der=degree + 1)
A:scipy.interpolate.polyint.self.n->len(self.xi)
A:scipy.interpolate.polyint.self.wi->numpy.zeros(self.n)
A:scipy.interpolate.polyint.self.wi[j]->numpy.multiply.reduce(self.xi[:j] - self.xi[j])
A:scipy.interpolate.polyint.r->numpy.nonzero(z)
A:scipy.interpolate.polyint.slice1->slice(1, None, None)
A:scipy.interpolate.polyint.yi0->numpy.asarray(yi[slice0])
A:scipy.interpolate.polyint.self.r->numpy.prod(self._y_extra_shape)
A:scipy.interpolate.polyint.n1->len(self.yi[-2])
A:scipy.interpolate.polyint.n2->len(self.yi[-1])
A:scipy.interpolate.polyint.xi->numpy.zeros(n)
A:scipy.interpolate.polyint.yi[:n1]->y1[:n1].reshape((n1, self.r))
A:scipy.interpolate.polyint.yi[n1:]->y2[:n2].reshape((n2, self.r))
A:scipy.interpolate.polyint.self.direction->numpy.sign(xi - self.xi[-1])
A:scipy.interpolate.polyint.pos->numpy.clip(np.searchsorted(self.xi, x) - 1, 0, self.n - 2)
A:scipy.interpolate.polyint.m->len(x)
A:scipy.interpolate.polyint.y[c]->self.polynomials[i](x[c])
A:scipy.interpolate.polyint.y[:, c]->self.polynomials[i].derivatives(x[c], der=der)
A:scipy.interpolate.polyint.xp->numpy.asarray(x).reshape((x.shape[0],) + (1,) * (y.ndim - 1))
A:scipy.interpolate.polyint.yp->numpy.rollaxis(y, axis)
A:scipy.interpolate.polyint.data->data.transpose(s).transpose(s)
A:scipy.interpolate.polyint.data[:, 1]->PchipInterpolator._find_derivatives(xp, yp)
A:scipy.interpolate.polyint.s->list(range(2, y.ndim + 1))
A:scipy.interpolate.polyint.m0->numpy.atleast_1d(m0)
A:scipy.interpolate.polyint.d1->numpy.atleast_1d(d1)
A:scipy.interpolate.polyint.smk->numpy.sign(mk)
A:scipy.interpolate.polyint.dk->numpy.zeros_like(y)
scipy.interpolate.BarycentricInterpolator(self,xi,yi=None,axis=0)
scipy.interpolate.BarycentricInterpolator._evaluate(self,x)
scipy.interpolate.BarycentricInterpolator.add_xi(self,xi,yi=None)
scipy.interpolate.BarycentricInterpolator.set_yi(self,yi,axis=None)
scipy.interpolate.KroghInterpolator(self,xi,yi,axis=0)
scipy.interpolate.KroghInterpolator._evaluate(self,x)
scipy.interpolate.KroghInterpolator._evaluate_derivatives(self,x,der=None)
scipy.interpolate.PchipInterpolator(self,x,y,axis=0)
scipy.interpolate.PchipInterpolator._edge_case(m0,d1,out)
scipy.interpolate.PchipInterpolator._find_derivatives(x,y)
scipy.interpolate.PiecewisePolynomial(self,xi,yi,orders=None,direction=None,axis=0)
scipy.interpolate.PiecewisePolynomial._evaluate(self,x)
scipy.interpolate.PiecewisePolynomial._evaluate_derivatives(self,x,der=None)
scipy.interpolate.PiecewisePolynomial._make_polynomial(self,x1,y1,x2,y2,order,direction)
scipy.interpolate.PiecewisePolynomial.append(self,xi,yi,order=None)
scipy.interpolate.PiecewisePolynomial.extend(self,xi,yi,orders=None)
scipy.interpolate._Interpolator1D(self,xi=None,yi=None,axis=None)
scipy.interpolate._Interpolator1D._finish_y(self,y,x_shape)
scipy.interpolate._Interpolator1D._prepare_x(self,x)
scipy.interpolate._Interpolator1D._reshape_yi(self,yi,check=False)
scipy.interpolate._Interpolator1D._set_dtype(self,dtype,union=False)
scipy.interpolate._Interpolator1D._set_yi(self,yi,xi=None,axis=None)
scipy.interpolate._Interpolator1DWithDerivatives(_Interpolator1D)
scipy.interpolate._Interpolator1DWithDerivatives.derivative(self,x,der=1)
scipy.interpolate._Interpolator1DWithDerivatives.derivatives(self,x,der=None)
scipy.interpolate._isscalar(x)
scipy.interpolate.approximate_taylor_polynomial(f,x,degree,scale,order=None)
scipy.interpolate.barycentric_interpolate(xi,yi,x,axis=0)
scipy.interpolate.krogh_interpolate(xi,yi,x,der=0,axis=0)
scipy.interpolate.pchip_interpolate(xi,yi,x,der=0,axis=0)
scipy.interpolate.piecewise_polynomial_interpolate(xi,yi,x,orders=None,der=0,axis=0)
scipy.interpolate.polyint.BarycentricInterpolator(self,xi,yi=None,axis=0)
scipy.interpolate.polyint.BarycentricInterpolator.__init__(self,xi,yi=None,axis=0)
scipy.interpolate.polyint.BarycentricInterpolator._evaluate(self,x)
scipy.interpolate.polyint.BarycentricInterpolator.add_xi(self,xi,yi=None)
scipy.interpolate.polyint.BarycentricInterpolator.set_yi(self,yi,axis=None)
scipy.interpolate.polyint.KroghInterpolator(self,xi,yi,axis=0)
scipy.interpolate.polyint.KroghInterpolator.__init__(self,xi,yi,axis=0)
scipy.interpolate.polyint.KroghInterpolator._evaluate(self,x)
scipy.interpolate.polyint.KroghInterpolator._evaluate_derivatives(self,x,der=None)
scipy.interpolate.polyint.PchipInterpolator(self,x,y,axis=0)
scipy.interpolate.polyint.PchipInterpolator.__init__(self,x,y,axis=0)
scipy.interpolate.polyint.PchipInterpolator._edge_case(m0,d1,out)
scipy.interpolate.polyint.PchipInterpolator._find_derivatives(x,y)
scipy.interpolate.polyint.PiecewisePolynomial(self,xi,yi,orders=None,direction=None,axis=0)
scipy.interpolate.polyint.PiecewisePolynomial.__init__(self,xi,yi,orders=None,direction=None,axis=0)
scipy.interpolate.polyint.PiecewisePolynomial._evaluate(self,x)
scipy.interpolate.polyint.PiecewisePolynomial._evaluate_derivatives(self,x,der=None)
scipy.interpolate.polyint.PiecewisePolynomial._make_polynomial(self,x1,y1,x2,y2,order,direction)
scipy.interpolate.polyint.PiecewisePolynomial.append(self,xi,yi,order=None)
scipy.interpolate.polyint.PiecewisePolynomial.extend(self,xi,yi,orders=None)
scipy.interpolate.polyint._Interpolator1D(self,xi=None,yi=None,axis=None)
scipy.interpolate.polyint._Interpolator1D.__init__(self,xi=None,yi=None,axis=None)
scipy.interpolate.polyint._Interpolator1D._finish_y(self,y,x_shape)
scipy.interpolate.polyint._Interpolator1D._prepare_x(self,x)
scipy.interpolate.polyint._Interpolator1D._reshape_yi(self,yi,check=False)
scipy.interpolate.polyint._Interpolator1D._set_dtype(self,dtype,union=False)
scipy.interpolate.polyint._Interpolator1D._set_yi(self,yi,xi=None,axis=None)
scipy.interpolate.polyint._Interpolator1DWithDerivatives(_Interpolator1D)
scipy.interpolate.polyint._Interpolator1DWithDerivatives.derivative(self,x,der=1)
scipy.interpolate.polyint._Interpolator1DWithDerivatives.derivatives(self,x,der=None)
scipy.interpolate.polyint._isscalar(x)
scipy.interpolate.polyint.approximate_taylor_polynomial(f,x,degree,scale,order=None)
scipy.interpolate.polyint.barycentric_interpolate(xi,yi,x,axis=0)
scipy.interpolate.polyint.krogh_interpolate(xi,yi,x,der=0,axis=0)
scipy.interpolate.polyint.pchip_interpolate(xi,yi,x,der=0,axis=0)
scipy.interpolate.polyint.piecewise_polynomial_interpolate(xi,yi,x,orders=None,der=0,axis=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/interpolate/setupscons.py----------------------------------------
A:scipy.interpolate.setupscons.config->Configuration('interpolate', parent_package, top_path)
scipy.interpolate.setupscons.configuration(parent_package='',top_path=None)
scipy.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/interpolate/fitpack2.py----------------------------------------
A:scipy.interpolate.fitpack2.data->dfitpack.fpcurfm1(x, y, k, t, w=w, xb=xb, xe=xe)
A:scipy.interpolate.fitpack2.message->_surfit_messages.copy().get(ier, 'ier=%s' % ier)
A:scipy.interpolate.fitpack2.x->numpy.asarray(x)
A:scipy.interpolate.fitpack2.(d, ier)->dfitpack.spalde(*self._eval_args + (x,))
A:scipy.interpolate.fitpack2.(z, m, ier)->dfitpack.sproot(*self._eval_args[:2])
A:scipy.interpolate.fitpack2.self._data->dfitpack.fpcurf0(x, y, k, w=w, xb=bbox[0], xe=bbox[1], s=0)
A:scipy.interpolate.fitpack2.t->concatenate(([xb] * (k + 1), t, [xe] * (k + 1)))
A:scipy.interpolate.fitpack2.n->len(t)
A:scipy.interpolate.fitpack2.y->numpy.asarray(y)
A:scipy.interpolate.fitpack2.(z, ier)->dfitpack.bispev(tx, ty, c, kx, ky, theta, phi)
A:scipy.interpolate.fitpack2.(zi, ier)->dfitpack.bispeu(tx, ty, c, kx, ky, thetai, phii)
A:scipy.interpolate.fitpack2.(nx, tx, ny, ty, c, fp, wrk1, ier)->dfitpack.surfit_smth(x, y, z, w, xb, xe, yb, ye, kx, ky, s=s, eps=eps, lwrk2=1)
A:scipy.interpolate.fitpack2.tx1->zeros((nx,), float)
A:scipy.interpolate.fitpack2.ty1->zeros((ny,), float)
A:scipy.interpolate.fitpack2.(tx1, ty1, c, fp, ier)->dfitpack.surfit_lsq(x, y, z, tx1, ty1, w, xb, xe, yb, ye, kx, ky, eps, lwrk2=ier)
A:scipy.interpolate.fitpack2.z->ravel(z)
A:scipy.interpolate.fitpack2.(nx, tx, ny, ty, c, fp, ier)->dfitpack.regrid_smth(x, y, z, xb, xe, yb, ye, kx, ky, s)
A:scipy.interpolate.fitpack2.msg->_surfit_messages.copy().get(ier, 'ier=%s' % ier)
A:scipy.interpolate.fitpack2._spherefit_messages->_surfit_messages.copy()
A:scipy.interpolate.fitpack2.theta->numpy.asarray(theta)
A:scipy.interpolate.fitpack2.phi->numpy.asarray(phi)
A:scipy.interpolate.fitpack2.thetai->numpy.asarray(thetai)
A:scipy.interpolate.fitpack2.phii->numpy.asarray(phii)
A:scipy.interpolate.fitpack2.(nt_, tt_, np_, tp_, c, fp, ier)->dfitpack.spherfit_smth(theta, phi, r, w=w, s=s, eps=eps)
A:scipy.interpolate.fitpack2.(tt_, tp_, c, fp, ier)->dfitpack.spherfit_lsq(theta, phi, r, tt_, tp_, w=w, eps=eps)
A:scipy.interpolate.fitpack2._spfit_messages->_surfit_messages.copy()
A:scipy.interpolate.fitpack2.iopt->numpy.array([0, 0, 0], dtype=int)
A:scipy.interpolate.fitpack2.ider->numpy.array([-1, 0, -1, 0], dtype=int)
A:scipy.interpolate.fitpack2.r->numpy.ravel(r)
A:scipy.interpolate.fitpack2.(nu, tu, nv, tv, c, fp, ier)->dfitpack.regrid_smth_spher(iopt, ider, u.copy(), v.copy(), r.copy(), r0, r1, s)
scipy.interpolate.BivariateSpline(self,x,y,mth='array')
scipy.interpolate.BivariateSpline.ev(self,xi,yi)
scipy.interpolate.BivariateSpline.integral(self,xa,xb,ya,yb)
scipy.interpolate.InterpolatedUnivariateSpline(self,x,y,w=None,bbox=[None]*2,k=3)
scipy.interpolate.LSQBivariateSpline(self,x,y,z,tx,ty,w=None,bbox=[None]*4,kx=3,ky=3,eps=None)
scipy.interpolate.LSQSphereBivariateSpline(self,theta,phi,r,tt,tp,w=None,eps=1e-16)
scipy.interpolate.LSQUnivariateSpline(self,x,y,t,w=None,bbox=[None]*2,k=3)
scipy.interpolate.RectBivariateSpline(self,x,y,z,bbox=[None]*4,kx=3,ky=3,s=0)
scipy.interpolate.RectSphereBivariateSpline(self,u,v,r,s=0.0,pole_continuity=False,pole_values=None,pole_exact=False,pole_flat=False)
scipy.interpolate.SmoothBivariateSpline(self,x,y,z,w=None,bbox=[None]*4,kx=3,ky=3,s=None,eps=None)
scipy.interpolate.SmoothSphereBivariateSpline(self,theta,phi,r,w=None,s=0.0,eps=1e-16)
scipy.interpolate.SphereBivariateSpline(self,theta,phi)
scipy.interpolate.SphereBivariateSpline.ev(self,thetai,phii)
scipy.interpolate.UnivariateSpline(self,x,y,w=None,bbox=[None]*2,k=3,s=None)
scipy.interpolate.UnivariateSpline._reset_class(self)
scipy.interpolate.UnivariateSpline._reset_nest(self,data,nest=None)
scipy.interpolate.UnivariateSpline._set_class(self,cls)
scipy.interpolate.UnivariateSpline.derivatives(self,x)
scipy.interpolate.UnivariateSpline.get_coeffs(self)
scipy.interpolate.UnivariateSpline.get_knots(self)
scipy.interpolate.UnivariateSpline.get_residual(self)
scipy.interpolate.UnivariateSpline.integral(self,a,b)
scipy.interpolate.UnivariateSpline.roots(self)
scipy.interpolate.UnivariateSpline.set_smoothing_factor(self,s)
scipy.interpolate._BivariateSplineBase(object)
scipy.interpolate._BivariateSplineBase.get_coeffs(self)
scipy.interpolate._BivariateSplineBase.get_knots(self)
scipy.interpolate._BivariateSplineBase.get_residual(self)
scipy.interpolate.fitpack2.BivariateSpline(self,x,y,mth='array')
scipy.interpolate.fitpack2.BivariateSpline.__call__(self,x,y,mth='array')
scipy.interpolate.fitpack2.BivariateSpline.ev(self,xi,yi)
scipy.interpolate.fitpack2.BivariateSpline.integral(self,xa,xb,ya,yb)
scipy.interpolate.fitpack2.InterpolatedUnivariateSpline(self,x,y,w=None,bbox=[None]*2,k=3)
scipy.interpolate.fitpack2.InterpolatedUnivariateSpline.__init__(self,x,y,w=None,bbox=[None]*2,k=3)
scipy.interpolate.fitpack2.LSQBivariateSpline(self,x,y,z,tx,ty,w=None,bbox=[None]*4,kx=3,ky=3,eps=None)
scipy.interpolate.fitpack2.LSQBivariateSpline.__init__(self,x,y,z,tx,ty,w=None,bbox=[None]*4,kx=3,ky=3,eps=None)
scipy.interpolate.fitpack2.LSQSphereBivariateSpline(self,theta,phi,r,tt,tp,w=None,eps=1e-16)
scipy.interpolate.fitpack2.LSQSphereBivariateSpline.__init__(self,theta,phi,r,tt,tp,w=None,eps=1e-16)
scipy.interpolate.fitpack2.LSQUnivariateSpline(self,x,y,t,w=None,bbox=[None]*2,k=3)
scipy.interpolate.fitpack2.LSQUnivariateSpline.__init__(self,x,y,t,w=None,bbox=[None]*2,k=3)
scipy.interpolate.fitpack2.RectBivariateSpline(self,x,y,z,bbox=[None]*4,kx=3,ky=3,s=0)
scipy.interpolate.fitpack2.RectBivariateSpline.__init__(self,x,y,z,bbox=[None]*4,kx=3,ky=3,s=0)
scipy.interpolate.fitpack2.RectSphereBivariateSpline(self,u,v,r,s=0.0,pole_continuity=False,pole_values=None,pole_exact=False,pole_flat=False)
scipy.interpolate.fitpack2.RectSphereBivariateSpline.__init__(self,u,v,r,s=0.0,pole_continuity=False,pole_values=None,pole_exact=False,pole_flat=False)
scipy.interpolate.fitpack2.SmoothBivariateSpline(self,x,y,z,w=None,bbox=[None]*4,kx=3,ky=3,s=None,eps=None)
scipy.interpolate.fitpack2.SmoothBivariateSpline.__init__(self,x,y,z,w=None,bbox=[None]*4,kx=3,ky=3,s=None,eps=None)
scipy.interpolate.fitpack2.SmoothSphereBivariateSpline(self,theta,phi,r,w=None,s=0.0,eps=1e-16)
scipy.interpolate.fitpack2.SmoothSphereBivariateSpline.__init__(self,theta,phi,r,w=None,s=0.0,eps=1e-16)
scipy.interpolate.fitpack2.SphereBivariateSpline(self,theta,phi)
scipy.interpolate.fitpack2.SphereBivariateSpline.__call__(self,theta,phi)
scipy.interpolate.fitpack2.SphereBivariateSpline.ev(self,thetai,phii)
scipy.interpolate.fitpack2.UnivariateSpline(self,x,y,w=None,bbox=[None]*2,k=3,s=None)
scipy.interpolate.fitpack2.UnivariateSpline.__init__(self,x,y,w=None,bbox=[None]*2,k=3,s=None)
scipy.interpolate.fitpack2.UnivariateSpline._reset_class(self)
scipy.interpolate.fitpack2.UnivariateSpline._reset_nest(self,data,nest=None)
scipy.interpolate.fitpack2.UnivariateSpline._set_class(self,cls)
scipy.interpolate.fitpack2.UnivariateSpline.derivatives(self,x)
scipy.interpolate.fitpack2.UnivariateSpline.get_coeffs(self)
scipy.interpolate.fitpack2.UnivariateSpline.get_knots(self)
scipy.interpolate.fitpack2.UnivariateSpline.get_residual(self)
scipy.interpolate.fitpack2.UnivariateSpline.integral(self,a,b)
scipy.interpolate.fitpack2.UnivariateSpline.roots(self)
scipy.interpolate.fitpack2.UnivariateSpline.set_smoothing_factor(self,s)
scipy.interpolate.fitpack2._BivariateSplineBase(object)
scipy.interpolate.fitpack2._BivariateSplineBase.get_coeffs(self)
scipy.interpolate.fitpack2._BivariateSplineBase.get_knots(self)
scipy.interpolate.fitpack2._BivariateSplineBase.get_residual(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/interpolate/fitpack.py----------------------------------------
A:scipy.interpolate.fitpack.x->myasarray(x)
A:scipy.interpolate.fitpack.w->myasarray(w)
A:scipy.interpolate.fitpack._parcur_cache['u']->zeros(m, float)
A:scipy.interpolate.fitpack._parcur_cache['t']->myasarray(t)
A:scipy.interpolate.fitpack.n->len(_parcur_cache['t'])
A:scipy.interpolate.fitpack.nest->max(m + k + 1, 2 * k + 3)
A:scipy.interpolate.fitpack.(t, c, o)->_fitpack._parcur(ravel(transpose(x)), w, u, ub, ue, k, task, ipar, s, t, nest, wrk, iwrk, per)
A:scipy.interpolate.fitpack.(x, y)->map(myasarray, [x, y])
A:scipy.interpolate.fitpack.m->len(x)
A:scipy.interpolate.fitpack.numknots->len(t)
A:scipy.interpolate.fitpack._curfit_cache['t']->empty((numknots + 2 * k + 2,), float)
A:scipy.interpolate.fitpack.t->empty((nest,), float)
A:scipy.interpolate.fitpack._curfit_cache['wrk']->empty((m * (k + 1) + nest * (7 + 3 * k),), float)
A:scipy.interpolate.fitpack._curfit_cache['iwrk']->empty((nest,), int32)
A:scipy.interpolate.fitpack.(n, c, fp, ier)->dfitpack.percur(task, x, y, w, t, wrk, iwrk, k, s)
A:scipy.interpolate.fitpack.(y, ier)->_fitpack._spl_(x, der, t, c, k, ext)
A:scipy.interpolate.fitpack.(aint, wrk)->_fitpack._splint(t, c, k, a, b)
A:scipy.interpolate.fitpack.(z, ier)->_fitpack._bispev(tx, ty, c, kx, ky, x, y, dx, dy)
A:scipy.interpolate.fitpack.(d, ier)->_fitpack._spalde(t, c, k, x[0])
A:scipy.interpolate.fitpack.(x, y, z)->map(ravel, [x, y, z])
A:scipy.interpolate.fitpack.xb->myasarray(x).min()
A:scipy.interpolate.fitpack.xe->myasarray(x).max()
A:scipy.interpolate.fitpack.yb->y.min()
A:scipy.interpolate.fitpack.ye->y.max()
A:scipy.interpolate.fitpack._surfit_cache['tx']->myasarray(tx)
A:scipy.interpolate.fitpack.nx->len(_surfit_cache['tx'])
A:scipy.interpolate.fitpack._surfit_cache['ty']->myasarray(ty)
A:scipy.interpolate.fitpack.ny->len(_surfit_cache['ty'])
A:scipy.interpolate.fitpack.nxest->int(kx + sqrt(3 * m))
A:scipy.interpolate.fitpack.nyest->int(ky + sqrt(3 * m))
A:scipy.interpolate.fitpack.lwrk1->int32(u * v * (2 + b1 + b2) + 2 * (u + v + km * (m + ne) + ne - kx - ky) + b2 + 1)
A:scipy.interpolate.fitpack.lwrk2->int32(u * v * (b2 + 1) + b2)
A:scipy.interpolate.fitpack.(tx, ty, c, o)->_fitpack._surfit(x, y, z, w, xb, xe, yb, ye, kx, ky, task, s, eps, tx, ty, nxest, nyest, wrk, lwrk1, lwrk2)
A:scipy.interpolate.fitpack.ierm->min(11, max(-3, ier))
A:scipy.interpolate.fitpack.(tt, cc_val, kk)->insert(x, [t, c_vals, k], m)
A:scipy.interpolate.fitpack.(tt, cc, ier)->_fitpack._insert(per, t, c, k, x, m)
scipy.interpolate._ntlist(l)
scipy.interpolate.bisplev(x,y,tck,dx=0,dy=0)
scipy.interpolate.bisplrep(x,y,z,w=None,xb=None,xe=None,yb=None,ye=None,kx=3,ky=3,task=0,s=None,eps=1e-16,tx=None,ty=None,full_output=0,nxest=None,nyest=None,quiet=1)
scipy.interpolate.dblint(xa,xb,ya,yb,tck)
scipy.interpolate.fitpack._ntlist(l)
scipy.interpolate.fitpack.bisplev(x,y,tck,dx=0,dy=0)
scipy.interpolate.fitpack.bisplrep(x,y,z,w=None,xb=None,xe=None,yb=None,ye=None,kx=3,ky=3,task=0,s=None,eps=1e-16,tx=None,ty=None,full_output=0,nxest=None,nyest=None,quiet=1)
scipy.interpolate.fitpack.dblint(xa,xb,ya,yb,tck)
scipy.interpolate.fitpack.insert(x,tck,m=1,per=0)
scipy.interpolate.fitpack.spalde(x,tck)
scipy.interpolate.fitpack.splev(x,tck,der=0,ext=0)
scipy.interpolate.fitpack.splint(a,b,tck,full_output=0)
scipy.interpolate.fitpack.splprep(x,w=None,u=None,ub=None,ue=None,k=3,task=0,s=None,t=None,full_output=0,nest=None,per=0,quiet=1)
scipy.interpolate.fitpack.splrep(x,y,w=None,xb=None,xe=None,k=3,task=0,s=None,t=None,full_output=0,per=0,quiet=1)
scipy.interpolate.fitpack.sproot(tck,mest=10)
scipy.interpolate.insert(x,tck,m=1,per=0)
scipy.interpolate.spalde(x,tck)
scipy.interpolate.splev(x,tck,der=0,ext=0)
scipy.interpolate.splint(a,b,tck,full_output=0)
scipy.interpolate.splprep(x,w=None,u=None,ub=None,ue=None,k=3,task=0,s=None,t=None,full_output=0,nest=None,per=0,quiet=1)
scipy.interpolate.splrep(x,y,w=None,xb=None,xe=None,k=3,task=0,s=None,t=None,full_output=0,per=0,quiet=1)
scipy.interpolate.sproot(tck,mest=10)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/interpolate/setup.py----------------------------------------
A:scipy.interpolate.setup.config->Configuration('interpolate', parent_package, top_path)
scipy.interpolate.setup.configuration(parent_package='',top_path=None)
scipy.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/interpolate/interpolate.py----------------------------------------
A:scipy.interpolate.interpolate.all->sometrue(all, axis=0)
A:scipy.interpolate.interpolate.M->len(x)
A:scipy.interpolate.interpolate.p->numpy.dual.solve(Q, tmp)
A:scipy.interpolate.interpolate.pt->poly1d(w[j])
A:scipy.interpolate.interpolate.x->array(x, copy=self.copy)
A:scipy.interpolate.interpolate.y->self._reshape_yi(y)
A:scipy.interpolate.interpolate.z->transpose(z)
A:scipy.interpolate.interpolate.j->numpy.argsort(y)
A:scipy.interpolate.interpolate.self.tck->fitpack.bisplrep(x, y, z, kx=kx, ky=ky, s=0.0)
A:scipy.interpolate.interpolate.(nx, tx, ny, ty, c, fp, ier)->dfitpack.regrid_smth(x, y, z, None, None, None, None, kx=kx, ky=ky, s=0.0)
A:scipy.interpolate.interpolate.any_out_of_bounds_x->numpy.any(out_of_bounds_x)
A:scipy.interpolate.interpolate.any_out_of_bounds_y->numpy.any(out_of_bounds_y)
A:scipy.interpolate.interpolate.self._spline->splmake(x, y, order=order)
A:scipy.interpolate.interpolate.x_new_indices->x_new_indices.clip(0, len(self.x) - 1).astype(intp).clip(0, len(self.x) - 1).astype(intp)
A:scipy.interpolate.interpolate.x_new->asarray(x_new)
A:scipy.interpolate.interpolate.out_of_bounds->logical_or(below_bounds, above_bounds)
A:scipy.interpolate.interpolate.y_new->self._call(x_new)
A:scipy.interpolate.interpolate.self.coeffs->numpy.asarray(coeffs)
A:scipy.interpolate.interpolate.self.breaks->numpy.asarray(breaks)
A:scipy.interpolate.interpolate.saveshape->numpy.shape(xnew)
A:scipy.interpolate.interpolate.xnew->numpy.ravel(xnew)
A:scipy.interpolate.interpolate.res->numpy.empty(xx.shape + sh, dtype=cvals.dtype)
A:scipy.interpolate.interpolate.xx->numpy.ravel(xnew)
A:scipy.interpolate.interpolate.indxs->indxs.clip(0, len(self.breaks)).clip(0, len(self.breaks))
A:scipy.interpolate.interpolate.V->numpy.vander(diff, N=self.K)
A:scipy.interpolate.interpolate.values->array([dot(V[k, :], pp[:, indxs[k]]) for k in xrange(len(xx))])
A:scipy.interpolate.interpolate.sivals->numpy.empty((order + 1, N), dtype=float)
A:scipy.interpolate.interpolate.fact->scipy.special.gamma(m + 1)
A:scipy.interpolate.interpolate.fromspline->classmethod(fromspline)
A:scipy.interpolate.interpolate.axes->list(range(b.ndim))
A:scipy.interpolate.interpolate.B->_fitpack._bsplmat(order, xk)
A:scipy.interpolate.interpolate.J->numpy.zeros((N - 1, N + 1))
A:scipy.interpolate.interpolate.(u, s, vh)->numpy.dual.svd(B)
A:scipy.interpolate.interpolate.A->dot(J.T, J)
A:scipy.interpolate.interpolate.tmp->dot(tmp, u.T)
A:scipy.interpolate.interpolate.Q->dot(tmp, V2)
A:scipy.interpolate.interpolate.Bd->numpy.empty((Np1, N))
A:scipy.interpolate.interpolate.l->numpy.arange(k, N)
A:scipy.interpolate.interpolate.V2->numpy.ones((Np1,))
A:scipy.interpolate.interpolate.dk->numpy.diff(xk)
A:scipy.interpolate.interpolate.val->dot(V2, dot(A, V2))
A:scipy.interpolate.interpolate.res1->dot(np.outer(V2, V2) / val, A)
A:scipy.interpolate.interpolate.mk->numpy.concatenate((mk, mb), axis=0)
A:scipy.interpolate.interpolate.Np1->len(xk)
A:scipy.interpolate.interpolate.zrs->numpy.zeros((1,) + yk.shape[1:])
A:scipy.interpolate.interpolate.b->numpy.empty((Np1,) + yk.shape[1:])
A:scipy.interpolate.interpolate.ma->array(m0, copy=0, ndmin=yk.ndim)
A:scipy.interpolate.interpolate.mb->array(mN, copy=0, ndmin=yk.ndim)
A:scipy.interpolate.interpolate.w->numpy.concatenate((yk, rh), axis=0)
A:scipy.interpolate.interpolate.yk->numpy.asanyarray(yk)
A:scipy.interpolate.interpolate.order->int(order)
A:scipy.interpolate.interpolate.func->eval('_find_%s' % kind)
A:scipy.interpolate.interpolate.coefs->func(xk, yk, order, conds, B)
A:scipy.interpolate.interpolate.oldshape->numpy.shape(xnew)
A:scipy.interpolate.interpolate.res[sl].real->_fitpack._bspleval(xx, xj, cvals.real[sl], k, deriv)
A:scipy.interpolate.interpolate.res[sl].imag->_fitpack._bspleval(xx, xj, cvals.imag[sl], k, deriv)
A:scipy.interpolate.interpolate.res[sl]->_fitpack._bspleval(xx, xj, cvals[sl], k, deriv)
scipy._dot0(a,b)
scipy._find_clamped(xk,yk,order,conds,B)
scipy._find_fixed(xk,yk,order,conds,B)
scipy._find_mixed(xk,yk,order,conds,B)
scipy._find_natural(xk,yk,order,conds,B)
scipy._find_not_a_knot(xk,yk,order,conds,B)
scipy._find_periodic(xk,yk,order,conds,B)
scipy._find_smoothest(xk,yk,order,conds=None,B=None)
scipy._find_smoothest2(xk,yk)
scipy._find_symmetric(xk,yk,order,conds,B)
scipy._find_user(xk,yk,order,conds,B)
scipy._get_spline2_Bb(xk,yk,kind,conds)
scipy._get_spline3_Bb(xk,yk,kind,conds)
scipy._setdiag(a,k,v)
scipy.interp1d(self,x,y,kind='linear',axis=-1,copy=True,bounds_error=True,fill_value=np.nan)
scipy.interp1d._call_linear(self,x_new)
scipy.interp1d._call_nearest(self,x_new)
scipy.interp1d._call_spline(self,x_new)
scipy.interp1d._check_bounds(self,x_new)
scipy.interp1d._evaluate(self,x_new)
scipy.interp2d(self,x,y,z,kind='linear',copy=True,bounds_error=False,fill_value=None)
scipy.interpolate.interpolate._dot0(a,b)
scipy.interpolate.interpolate._find_clamped(xk,yk,order,conds,B)
scipy.interpolate.interpolate._find_fixed(xk,yk,order,conds,B)
scipy.interpolate.interpolate._find_mixed(xk,yk,order,conds,B)
scipy.interpolate.interpolate._find_natural(xk,yk,order,conds,B)
scipy.interpolate.interpolate._find_not_a_knot(xk,yk,order,conds,B)
scipy.interpolate.interpolate._find_periodic(xk,yk,order,conds,B)
scipy.interpolate.interpolate._find_smoothest(xk,yk,order,conds=None,B=None)
scipy.interpolate.interpolate._find_smoothest2(xk,yk)
scipy.interpolate.interpolate._find_symmetric(xk,yk,order,conds,B)
scipy.interpolate.interpolate._find_user(xk,yk,order,conds,B)
scipy.interpolate.interpolate._get_spline2_Bb(xk,yk,kind,conds)
scipy.interpolate.interpolate._get_spline3_Bb(xk,yk,kind,conds)
scipy.interpolate.interpolate._setdiag(a,k,v)
scipy.interpolate.interpolate.interp1d(self,x,y,kind='linear',axis=-1,copy=True,bounds_error=True,fill_value=np.nan)
scipy.interpolate.interpolate.interp1d.__init__(self,x,y,kind='linear',axis=-1,copy=True,bounds_error=True,fill_value=np.nan)
scipy.interpolate.interpolate.interp1d._call_linear(self,x_new)
scipy.interpolate.interpolate.interp1d._call_nearest(self,x_new)
scipy.interpolate.interpolate.interp1d._call_spline(self,x_new)
scipy.interpolate.interpolate.interp1d._check_bounds(self,x_new)
scipy.interpolate.interpolate.interp1d._evaluate(self,x_new)
scipy.interpolate.interpolate.interp2d(self,x,y,z,kind='linear',copy=True,bounds_error=False,fill_value=None)
scipy.interpolate.interpolate.interp2d.__init__(self,x,y,z,kind='linear',copy=True,bounds_error=False,fill_value=None)
scipy.interpolate.interpolate.lagrange(x,w)
scipy.interpolate.interpolate.ppform(self,coeffs,breaks,fill=0.0,sort=False)
scipy.interpolate.interpolate.ppform.__init__(self,coeffs,breaks,fill=0.0,sort=False)
scipy.interpolate.interpolate.ppform.fromspline(cls,xk,cvals,order,fill=0.0)
scipy.interpolate.interpolate.reduce_sometrue(a)
scipy.interpolate.interpolate.spleval(xck,xnew,deriv=0)
scipy.interpolate.interpolate.spline(xk,yk,xnew,order=3,kind='smoothest',conds=None)
scipy.interpolate.interpolate.splmake(xk,yk,order=3,kind='smoothest',conds=None)
scipy.interpolate.interpolate.spltopp(xk,cvals,k)
scipy.lagrange(x,w)
scipy.ppform(self,coeffs,breaks,fill=0.0,sort=False)
scipy.ppform.fromspline(cls,xk,cvals,order,fill=0.0)
scipy.reduce_sometrue(a)
scipy.spleval(xck,xnew,deriv=0)
scipy.spline(xk,yk,xnew,order=3,kind='smoothest',conds=None)
scipy.splmake(xk,yk,order=3,kind='smoothest',conds=None)
scipy.spltopp(xk,cvals,k)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/interpolate/interpnd_info.py----------------------------------------
A:scipy.interpolate.interpnd_info.(f1, f2, df1, df2, x)->symbols(['f1', 'f2', 'df1', 'df2', 'x'])
A:scipy.interpolate.interpnd_info.wpp->w.diff(x, 2).expand()
A:scipy.interpolate.interpnd_info.intwpp2->(wpp ** 2).integrate((x, 0, 1)).expand()
A:scipy.interpolate.interpnd_info.A->Matrix([[intwpp2.coeff(df1 ** 2), intwpp2.coeff(df1 * df2) / 2], [intwpp2.coeff(df1 * df2) / 2, intwpp2.coeff(df2 ** 2)]])
scipy.interpnd_info._estimate_gradients_2d_global()
scipy.interpolate.interpnd_info._estimate_gradients_2d_global()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/interpolate/rbf.py----------------------------------------
A:scipy.interpolate.rbf.self.function->kwargs.pop('function', 'multiquadric')
A:scipy.interpolate.rbf.self._function->new.instancemethod(self.function, self, Rbf)
A:scipy.interpolate.rbf.val->get_method_function(self.function.__call__)
A:scipy.interpolate.rbf.a0->self._function(r)
A:scipy.interpolate.rbf.self.xi->asarray([asarray(a, dtype=float_).flatten() for a in args[:-1]])
A:scipy.interpolate.rbf.self.di->asarray(args[-1]).flatten()
A:scipy.interpolate.rbf.self.norm->kwargs.pop('norm', self._euclidean_norm)
A:scipy.interpolate.rbf.r->self._call_norm(self.xa, self.xi)
A:scipy.interpolate.rbf.self.epsilon->self._call_norm(self.xa, self.xi).mean()
A:scipy.interpolate.rbf.self.smooth->kwargs.pop('smooth', 0.0)
A:scipy.interpolate.rbf.self.nodes->scipy.linalg.solve(self.A, self.di)
A:scipy.interpolate.rbf.self.xa->asarray([a.flatten() for a in args], dtype=float_)
scipy.interpolate.Rbf(self,*args,**kwargs)
scipy.interpolate.Rbf._call_norm(self,x1,x2)
scipy.interpolate.Rbf._euclidean_norm(self,x1,x2)
scipy.interpolate.Rbf._h_cubic(self,r)
scipy.interpolate.Rbf._h_gaussian(self,r)
scipy.interpolate.Rbf._h_inverse_multiquadric(self,r)
scipy.interpolate.Rbf._h_linear(self,r)
scipy.interpolate.Rbf._h_multiquadric(self,r)
scipy.interpolate.Rbf._h_quintic(self,r)
scipy.interpolate.Rbf._h_thin_plate(self,r)
scipy.interpolate.Rbf._init_function(self,r)
scipy.interpolate.rbf.Rbf(self,*args,**kwargs)
scipy.interpolate.rbf.Rbf.__init__(self,*args,**kwargs)
scipy.interpolate.rbf.Rbf._call_norm(self,x1,x2)
scipy.interpolate.rbf.Rbf._euclidean_norm(self,x1,x2)
scipy.interpolate.rbf.Rbf._h_cubic(self,r)
scipy.interpolate.rbf.Rbf._h_gaussian(self,r)
scipy.interpolate.rbf.Rbf._h_inverse_multiquadric(self,r)
scipy.interpolate.rbf.Rbf._h_linear(self,r)
scipy.interpolate.rbf.Rbf._h_multiquadric(self,r)
scipy.interpolate.rbf.Rbf._h_quintic(self,r)
scipy.interpolate.rbf.Rbf._h_thin_plate(self,r)
scipy.interpolate.rbf.Rbf._init_function(self,r)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/interpolate/tests/test_interpnd.py----------------------------------------
A:scipy.interpolate.tests.test_interpnd.x->numpy.random.rand(30, 2)
A:scipy.interpolate.tests.test_interpnd.y->numpy.random.randn(30)
A:scipy.interpolate.tests.test_interpnd.yi->scipy.interpolate.interpnd.CloughTocher2DInterpolator(tri, y)(x)
A:scipy.interpolate.tests.test_interpnd.tri->scipy.spatial.qhull.Delaunay(x)
A:scipy.interpolate.tests.test_interpnd.points->numpy.array([(0, 0), (0, 1), (1, 1), (1, 0)], dtype=np.double)
A:scipy.interpolate.tests.test_interpnd.values->numpy.array([1.0, 2.0, -3.0, 5.0], dtype=np.double)
A:scipy.interpolate.tests.test_interpnd.(xx, yy)->numpy.broadcast_arrays(np.linspace(0, 1, 14)[:, None], np.linspace(0, 1, 14)[None, :])
A:scipy.interpolate.tests.test_interpnd.xx->xx.ravel().ravel()
A:scipy.interpolate.tests.test_interpnd.yy->yy.ravel().ravel()
A:scipy.interpolate.tests.test_interpnd.xi->numpy.array([xx, yy]).T.copy()
A:scipy.interpolate.tests.test_interpnd.zi->scipy.interpolate.interpnd.LinearNDInterpolator(points, values)(xi)
A:scipy.interpolate.tests.test_interpnd.ip->scipy.interpolate.interpnd.CloughTocher2DInterpolator(x, y)
A:scipy.interpolate.tests.test_interpnd.ip2->pickle.loads(pickle.dumps(ip))
A:scipy.interpolate.tests.test_interpnd.z->func(x[:, 0], x[:, 1])
A:scipy.interpolate.tests.test_interpnd.dz->scipy.interpolate.interpnd.estimate_gradients_2d_global(tri, z, tol=1e-06)
A:scipy.interpolate.tests.test_interpnd.p->numpy.random.rand(50, 2)
A:scipy.interpolate.tests.test_interpnd.a->ip(p[:, 0], p[:, 1])
A:scipy.interpolate.tests.test_interpnd.b->func(p[:, 0], p[:, 1])
scipy.interpolate.tests.test_interpnd.TestCloughTocher2DInterpolator(object)
scipy.interpolate.tests.test_interpnd.TestCloughTocher2DInterpolator._check_accuracy(self,func,x=None,tol=1e-06,alternate=False,**kw)
scipy.interpolate.tests.test_interpnd.TestCloughTocher2DInterpolator.test_dense(self)
scipy.interpolate.tests.test_interpnd.TestCloughTocher2DInterpolator.test_linear_smoketest(self)
scipy.interpolate.tests.test_interpnd.TestCloughTocher2DInterpolator.test_pickle(self)
scipy.interpolate.tests.test_interpnd.TestCloughTocher2DInterpolator.test_quadratic_smoketest(self)
scipy.interpolate.tests.test_interpnd.TestCloughTocher2DInterpolator.test_tri_input(self)
scipy.interpolate.tests.test_interpnd.TestCloughTocher2DInterpolator.test_wrong_ndim(self)
scipy.interpolate.tests.test_interpnd.TestEstimateGradients2DGlobal(object)
scipy.interpolate.tests.test_interpnd.TestEstimateGradients2DGlobal.test_smoketest(self)
scipy.interpolate.tests.test_interpnd.TestLinearNDInterpolation(object)
scipy.interpolate.tests.test_interpnd.TestLinearNDInterpolation.test_complex_smoketest(self)
scipy.interpolate.tests.test_interpnd.TestLinearNDInterpolation.test_pickle(self)
scipy.interpolate.tests.test_interpnd.TestLinearNDInterpolation.test_smoketest(self)
scipy.interpolate.tests.test_interpnd.TestLinearNDInterpolation.test_smoketest_alternate(self)
scipy.interpolate.tests.test_interpnd.TestLinearNDInterpolation.test_square(self)
scipy.interpolate.tests.test_interpnd.TestLinearNDInterpolation.test_tri_input(self)
scipy.tests.test_interpnd.TestCloughTocher2DInterpolator(object)
scipy.tests.test_interpnd.TestCloughTocher2DInterpolator._check_accuracy(self,func,x=None,tol=1e-06,alternate=False,**kw)
scipy.tests.test_interpnd.TestCloughTocher2DInterpolator.test_dense(self)
scipy.tests.test_interpnd.TestCloughTocher2DInterpolator.test_linear_smoketest(self)
scipy.tests.test_interpnd.TestCloughTocher2DInterpolator.test_pickle(self)
scipy.tests.test_interpnd.TestCloughTocher2DInterpolator.test_quadratic_smoketest(self)
scipy.tests.test_interpnd.TestCloughTocher2DInterpolator.test_tri_input(self)
scipy.tests.test_interpnd.TestCloughTocher2DInterpolator.test_wrong_ndim(self)
scipy.tests.test_interpnd.TestEstimateGradients2DGlobal(object)
scipy.tests.test_interpnd.TestEstimateGradients2DGlobal.test_smoketest(self)
scipy.tests.test_interpnd.TestLinearNDInterpolation(object)
scipy.tests.test_interpnd.TestLinearNDInterpolation.test_complex_smoketest(self)
scipy.tests.test_interpnd.TestLinearNDInterpolation.test_pickle(self)
scipy.tests.test_interpnd.TestLinearNDInterpolation.test_smoketest(self)
scipy.tests.test_interpnd.TestLinearNDInterpolation.test_smoketest_alternate(self)
scipy.tests.test_interpnd.TestLinearNDInterpolation.test_square(self)
scipy.tests.test_interpnd.TestLinearNDInterpolation.test_tri_input(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/interpolate/tests/test_polyint.py----------------------------------------
A:scipy.interpolate.tests.test_polyint.s->list(range(1, len(y_shape) + 1))
A:scipy.interpolate.tests.test_polyint.y->numpy.random.rand(*(3,) + y_shape).transpose(s)
A:scipy.interpolate.tests.test_polyint.xi->numpy.zeros(x_shape)
A:scipy.interpolate.tests.test_polyint.yi->numpy.multiply.outer(np.asarray(self.yi), np.arange(1))
A:scipy.interpolate.tests.test_polyint.yv->y[(slice(None, None, None),) * (axis % y.ndim) + (1,)].reshape(bs_shape)
A:scipy.interpolate.tests.test_polyint.(yi, y)->numpy.broadcast_arrays(yi, yv)
A:scipy.interpolate.tests.test_polyint.p->p.deriv().deriv()
A:scipy.interpolate.tests.test_polyint.self.true_poly->scipy.poly1d([-2, 3, 1, 5, -4])
A:scipy.interpolate.tests.test_polyint.self.test_xs->numpy.linspace(-1, 6, 100)
A:scipy.interpolate.tests.test_polyint.self.xs->numpy.linspace(-1, 1, 5)
A:scipy.interpolate.tests.test_polyint.self.ys->self.true_poly(self.xs)
A:scipy.interpolate.tests.test_polyint.P->PiecewisePolynomial(self.xi, self.yi)
A:scipy.interpolate.tests.test_polyint.D->PiecewisePolynomial(self.xi, self.yi).derivatives(self.test_xs, len(self.xs) + 2)
A:scipy.interpolate.tests.test_polyint.r->PiecewisePolynomial(self.xi, self.yi).derivatives(self.test_xs, m)
A:scipy.interpolate.tests.test_polyint.ys->numpy.array([[0, 1], [1, 0], [2, 1]])
A:scipy.interpolate.tests.test_polyint.test_xs->numpy.linspace(-1, 3, 100)
A:scipy.interpolate.tests.test_polyint.self.tck->splrep([0, 1, 2, 3, 4, 5], [0, 10, -1, 3, 7, 2], s=0)
A:scipy.interpolate.tests.test_polyint.self.spline_ys->splev(self.test_xs, self.tck)
A:scipy.interpolate.tests.test_polyint.self.spline_yps->splev(self.test_xs, self.tck, der=1)
A:scipy.interpolate.tests.test_polyint.self.xi->numpy.unique(self.tck[0])
scipy.interpolate.tests.test_CheckBarycentric(TestCase)
scipy.interpolate.tests.test_CheckBarycentric.setUp(self)
scipy.interpolate.tests.test_CheckBarycentric.test_append(self)
scipy.interpolate.tests.test_CheckBarycentric.test_delayed(self)
scipy.interpolate.tests.test_CheckBarycentric.test_lagrange(self)
scipy.interpolate.tests.test_CheckBarycentric.test_scalar(self)
scipy.interpolate.tests.test_CheckBarycentric.test_shapes_1d_vectorvalue(self)
scipy.interpolate.tests.test_CheckBarycentric.test_shapes_scalarvalue(self)
scipy.interpolate.tests.test_CheckBarycentric.test_shapes_vectorvalue(self)
scipy.interpolate.tests.test_CheckBarycentric.test_vector(self)
scipy.interpolate.tests.test_CheckBarycentric.test_wrapper(self)
scipy.interpolate.tests.test_CheckKrogh(TestCase)
scipy.interpolate.tests.test_CheckKrogh.setUp(self)
scipy.interpolate.tests.test_CheckKrogh.test_derivative(self)
scipy.interpolate.tests.test_CheckKrogh.test_derivatives(self)
scipy.interpolate.tests.test_CheckKrogh.test_empty(self)
scipy.interpolate.tests.test_CheckKrogh.test_hermite(self)
scipy.interpolate.tests.test_CheckKrogh.test_high_derivative(self)
scipy.interpolate.tests.test_CheckKrogh.test_lagrange(self)
scipy.interpolate.tests.test_CheckKrogh.test_low_derivatives(self)
scipy.interpolate.tests.test_CheckKrogh.test_scalar(self)
scipy.interpolate.tests.test_CheckKrogh.test_shapes_1d_vectorvalue(self)
scipy.interpolate.tests.test_CheckKrogh.test_shapes_scalarvalue(self)
scipy.interpolate.tests.test_CheckKrogh.test_shapes_scalarvalue_derivative(self)
scipy.interpolate.tests.test_CheckKrogh.test_shapes_vectorvalue(self)
scipy.interpolate.tests.test_CheckKrogh.test_shapes_vectorvalue_derivative(self)
scipy.interpolate.tests.test_CheckKrogh.test_vector(self)
scipy.interpolate.tests.test_CheckKrogh.test_wrapper(self)
scipy.interpolate.tests.test_CheckPiecewise(TestCase)
scipy.interpolate.tests.test_CheckPiecewise.setUp(self)
scipy.interpolate.tests.test_CheckPiecewise.test_construction(self)
scipy.interpolate.tests.test_CheckPiecewise.test_derivative(self)
scipy.interpolate.tests.test_CheckPiecewise.test_derivatives(self)
scipy.interpolate.tests.test_CheckPiecewise.test_incremental(self)
scipy.interpolate.tests.test_CheckPiecewise.test_scalar(self)
scipy.interpolate.tests.test_CheckPiecewise.test_shapes_scalarvalue(self)
scipy.interpolate.tests.test_CheckPiecewise.test_shapes_scalarvalue_derivative(self)
scipy.interpolate.tests.test_CheckPiecewise.test_shapes_vectorvalue(self)
scipy.interpolate.tests.test_CheckPiecewise.test_shapes_vectorvalue_1d(self)
scipy.interpolate.tests.test_CheckPiecewise.test_shapes_vectorvalue_derivative(self)
scipy.interpolate.tests.test_CheckPiecewise.test_vector(self)
scipy.interpolate.tests.test_CheckPiecewise.test_wrapper(self)
scipy.interpolate.tests.test_CheckTaylor(TestCase)
scipy.interpolate.tests.test_CheckTaylor.test_exponential(self)
scipy.interpolate.tests.test__check_complex(ip)
scipy.interpolate.tests.test_check_shape(interpolator_cls,x_shape,y_shape,deriv_shape=None,axis=0)
scipy.interpolate.tests.test_polyint.CheckBarycentric(TestCase)
scipy.interpolate.tests.test_polyint.CheckBarycentric.setUp(self)
scipy.interpolate.tests.test_polyint.CheckBarycentric.test_append(self)
scipy.interpolate.tests.test_polyint.CheckBarycentric.test_delayed(self)
scipy.interpolate.tests.test_polyint.CheckBarycentric.test_lagrange(self)
scipy.interpolate.tests.test_polyint.CheckBarycentric.test_scalar(self)
scipy.interpolate.tests.test_polyint.CheckBarycentric.test_shapes_1d_vectorvalue(self)
scipy.interpolate.tests.test_polyint.CheckBarycentric.test_shapes_scalarvalue(self)
scipy.interpolate.tests.test_polyint.CheckBarycentric.test_shapes_vectorvalue(self)
scipy.interpolate.tests.test_polyint.CheckBarycentric.test_vector(self)
scipy.interpolate.tests.test_polyint.CheckBarycentric.test_wrapper(self)
scipy.interpolate.tests.test_polyint.CheckKrogh(TestCase)
scipy.interpolate.tests.test_polyint.CheckKrogh.setUp(self)
scipy.interpolate.tests.test_polyint.CheckKrogh.test_derivative(self)
scipy.interpolate.tests.test_polyint.CheckKrogh.test_derivatives(self)
scipy.interpolate.tests.test_polyint.CheckKrogh.test_empty(self)
scipy.interpolate.tests.test_polyint.CheckKrogh.test_hermite(self)
scipy.interpolate.tests.test_polyint.CheckKrogh.test_high_derivative(self)
scipy.interpolate.tests.test_polyint.CheckKrogh.test_lagrange(self)
scipy.interpolate.tests.test_polyint.CheckKrogh.test_low_derivatives(self)
scipy.interpolate.tests.test_polyint.CheckKrogh.test_scalar(self)
scipy.interpolate.tests.test_polyint.CheckKrogh.test_shapes_1d_vectorvalue(self)
scipy.interpolate.tests.test_polyint.CheckKrogh.test_shapes_scalarvalue(self)
scipy.interpolate.tests.test_polyint.CheckKrogh.test_shapes_scalarvalue_derivative(self)
scipy.interpolate.tests.test_polyint.CheckKrogh.test_shapes_vectorvalue(self)
scipy.interpolate.tests.test_polyint.CheckKrogh.test_shapes_vectorvalue_derivative(self)
scipy.interpolate.tests.test_polyint.CheckKrogh.test_vector(self)
scipy.interpolate.tests.test_polyint.CheckKrogh.test_wrapper(self)
scipy.interpolate.tests.test_polyint.CheckPiecewise(TestCase)
scipy.interpolate.tests.test_polyint.CheckPiecewise.setUp(self)
scipy.interpolate.tests.test_polyint.CheckPiecewise.test_construction(self)
scipy.interpolate.tests.test_polyint.CheckPiecewise.test_derivative(self)
scipy.interpolate.tests.test_polyint.CheckPiecewise.test_derivatives(self)
scipy.interpolate.tests.test_polyint.CheckPiecewise.test_incremental(self)
scipy.interpolate.tests.test_polyint.CheckPiecewise.test_scalar(self)
scipy.interpolate.tests.test_polyint.CheckPiecewise.test_shapes_scalarvalue(self)
scipy.interpolate.tests.test_polyint.CheckPiecewise.test_shapes_scalarvalue_derivative(self)
scipy.interpolate.tests.test_polyint.CheckPiecewise.test_shapes_vectorvalue(self)
scipy.interpolate.tests.test_polyint.CheckPiecewise.test_shapes_vectorvalue_1d(self)
scipy.interpolate.tests.test_polyint.CheckPiecewise.test_shapes_vectorvalue_derivative(self)
scipy.interpolate.tests.test_polyint.CheckPiecewise.test_vector(self)
scipy.interpolate.tests.test_polyint.CheckPiecewise.test_wrapper(self)
scipy.interpolate.tests.test_polyint.CheckTaylor(TestCase)
scipy.interpolate.tests.test_polyint.CheckTaylor.test_exponential(self)
scipy.interpolate.tests.test_polyint._check_complex(ip)
scipy.interpolate.tests.test_polyint.check_shape(interpolator_cls,x_shape,y_shape,deriv_shape=None,axis=0)
scipy.interpolate.tests.test_polyint.test_complex()
scipy.interpolate.tests.test_polyint.test_deriv_shapes()
scipy.interpolate.tests.test_polyint.test_derivs_shapes()
scipy.interpolate.tests.test_polyint.test_shapes()
scipy.interpolate.tests.test_test_complex()
scipy.interpolate.tests.test_test_deriv_shapes()
scipy.interpolate.tests.test_test_derivs_shapes()
scipy.interpolate.tests.test_test_shapes()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/interpolate/tests/test_ndgriddata.py----------------------------------------
A:scipy.interpolate.tests.test_ndgriddata.yi->griddata(x, y, xi, method=method)
A:scipy.interpolate.tests.test_ndgriddata.x->numpy.array([2.5, 1, 4.5, 5, 6, 3])
A:scipy.interpolate.tests.test_ndgriddata.y->numpy.array([1, 2, 0, 3.9, 2, 1])
scipy.interpolate.tests.test_TestGriddata(object)
scipy.interpolate.tests.test_TestGriddata.test_1d(self)
scipy.interpolate.tests.test_TestGriddata.test_1d_unsorted(self)
scipy.interpolate.tests.test_TestGriddata.test_alternative_call(self)
scipy.interpolate.tests.test_TestGriddata.test_complex_2d(self)
scipy.interpolate.tests.test_TestGriddata.test_fill_value(self)
scipy.interpolate.tests.test_TestGriddata.test_multipoint_2d(self)
scipy.interpolate.tests.test_TestGriddata.test_multivalue_2d(self)
scipy.interpolate.tests.test_ndgriddata.TestGriddata(object)
scipy.interpolate.tests.test_ndgriddata.TestGriddata.test_1d(self)
scipy.interpolate.tests.test_ndgriddata.TestGriddata.test_1d_unsorted(self)
scipy.interpolate.tests.test_ndgriddata.TestGriddata.test_alternative_call(self)
scipy.interpolate.tests.test_ndgriddata.TestGriddata.test_complex_2d(self)
scipy.interpolate.tests.test_ndgriddata.TestGriddata.test_fill_value(self)
scipy.interpolate.tests.test_ndgriddata.TestGriddata.test_multipoint_2d(self)
scipy.interpolate.tests.test_ndgriddata.TestGriddata.test_multivalue_2d(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/interpolate/tests/test_interpolate_wrapper.py----------------------------------------
A:scipy.interpolate.tests.test_interpolate_wrapper.x->arange(N)
A:scipy.interpolate.tests.test_interpolate_wrapper.y->arange(N)
A:scipy.interpolate.tests.test_interpolate_wrapper.t1->time.clock()
A:scipy.interpolate.tests.test_interpolate_wrapper.new_y->logarithmic(x, y, new_x)
A:scipy.interpolate.tests.test_interpolate_wrapper.t2->time.clock()
scipy.interpolate.tests.test_interpolate_wrapper.Test(unittest.TestCase)
scipy.interpolate.tests.test_interpolate_wrapper.Test.assertAllclose(self,x,y,rtol=1e-05)
scipy.interpolate.tests.test_interpolate_wrapper.Test.runTest(self)
scipy.interpolate.tests.test_interpolate_wrapper.Test.test_block_average_above(self)
scipy.interpolate.tests.test_interpolate_wrapper.Test.test_linear(self)
scipy.interpolate.tests.test_interpolate_wrapper.Test.test_linear2(self)
scipy.interpolate.tests.test_interpolate_wrapper.Test.test_logarithmic(self)
scipy.interpolate.tests.test_interpolate_wrapper.Test.test_nearest(self)
scipy.tests.test_interpolate_wrapper.Test(unittest.TestCase)
scipy.tests.test_interpolate_wrapper.Test.assertAllclose(self,x,y,rtol=1e-05)
scipy.tests.test_interpolate_wrapper.Test.runTest(self)
scipy.tests.test_interpolate_wrapper.Test.test_block_average_above(self)
scipy.tests.test_interpolate_wrapper.Test.test_linear(self)
scipy.tests.test_interpolate_wrapper.Test.test_linear2(self)
scipy.tests.test_interpolate_wrapper.Test.test_logarithmic(self)
scipy.tests.test_interpolate_wrapper.Test.test_nearest(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/interpolate/tests/test_rbf.py----------------------------------------
A:scipy.interpolate.tests.test_rbf.olderr->numpy.seterr(all='ignore')
A:scipy.interpolate.tests.test_rbf.x->linspace(0, 10, 9)
A:scipy.interpolate.tests.test_rbf.y->sin(x)
A:scipy.interpolate.tests.test_rbf.rbf->Rbf(x, y, epsilon=None)
A:scipy.interpolate.tests.test_rbf.yi->rbf(x)
A:scipy.interpolate.tests.test_rbf.zi->rbf(x, y)
A:scipy.interpolate.tests.test_rbf.di->rbf(x, y, z)
A:scipy.interpolate.tests.test_rbf.xi->linspace(0, 10, 100)
scipy.interpolate.tests.test_rbf.check_rbf1d_interpolation(function)
scipy.interpolate.tests.test_rbf.check_rbf1d_regularity(function,atol)
scipy.interpolate.tests.test_rbf.check_rbf2d_interpolation(function)
scipy.interpolate.tests.test_rbf.check_rbf3d_interpolation(function)
scipy.interpolate.tests.test_rbf.test_default_construction()
scipy.interpolate.tests.test_rbf.test_function_is_callable()
scipy.interpolate.tests.test_rbf.test_rbf_epsilon_none()
scipy.interpolate.tests.test_rbf.test_rbf_interpolation()
scipy.interpolate.tests.test_rbf.test_rbf_regularity()
scipy.interpolate.tests.test_rbf.test_two_arg_function_is_callable()
scipy.tests.test_rbf.check_rbf1d_interpolation(function)
scipy.tests.test_rbf.check_rbf1d_regularity(function,atol)
scipy.tests.test_rbf.check_rbf2d_interpolation(function)
scipy.tests.test_rbf.check_rbf3d_interpolation(function)
scipy.tests.test_rbf.test_default_construction()
scipy.tests.test_rbf.test_function_is_callable()
scipy.tests.test_rbf.test_rbf_epsilon_none()
scipy.tests.test_rbf.test_rbf_interpolation()
scipy.tests.test_rbf.test_rbf_regularity()
scipy.tests.test_rbf.test_two_arg_function_is_callable()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/interpolate/tests/test_interpolate.py----------------------------------------
A:scipy.interpolate.tests.test_interpolate.z->interp1d(x, y, axis=n, kind=kind)
A:scipy.interpolate.tests.test_interpolate.I->interp2d(x, y, z)
A:scipy.interpolate.tests.test_interpolate.x->numpy.array([1, 2.5, 3, 3.1, 4, 6.4, 7.9, 8.0, 9.5, 10])
A:scipy.interpolate.tests.test_interpolate.y->y.astype(dtype).astype(dtype)
A:scipy.interpolate.tests.test_interpolate.ip1->interp2d(x.copy(), y.copy(), z, kind='cubic')
A:scipy.interpolate.tests.test_interpolate.ip2->interp2d(x.copy(), y.copy(), z, kind='cubic')
A:scipy.interpolate.tests.test_interpolate.ip3->interp2d(x, y, z, kind='cubic')
A:scipy.interpolate.tests.test_interpolate.a->numpy.zeros([5, 5])
A:scipy.interpolate.tests.test_interpolate.xy->numpy.arange(5)
A:scipy.interpolate.tests.test_interpolate.b->list(a)
A:scipy.interpolate.tests.test_interpolate.ix->numpy.linspace(-1, 3, 31)
A:scipy.interpolate.tests.test_interpolate.iy->numpy.linspace(-1, 3, 33)
A:scipy.interpolate.tests.test_interpolate.iz->b(ix, iy)
A:scipy.interpolate.tests.test_interpolate.self.x10->numpy.arange(10.0)
A:scipy.interpolate.tests.test_interpolate.self.y10->numpy.arange(10.0)
A:scipy.interpolate.tests.test_interpolate.self.x25->self.x10.reshape((2, 5))
A:scipy.interpolate.tests.test_interpolate.self.x2->numpy.arange(2.0)
A:scipy.interpolate.tests.test_interpolate.self.y2->numpy.arange(2.0)
A:scipy.interpolate.tests.test_interpolate.self.x1->numpy.array([0.0])
A:scipy.interpolate.tests.test_interpolate.self.y1->numpy.array([0.0])
A:scipy.interpolate.tests.test_interpolate.self.y210->numpy.arange(20.0).reshape((2, 10))
A:scipy.interpolate.tests.test_interpolate.self.y102->numpy.arange(20.0).reshape((10, 2))
A:scipy.interpolate.tests.test_interpolate.interp10->interp1d(self.x10, self.y10, kind=kind)
A:scipy.interpolate.tests.test_interpolate.extrap10->interp1d(self.x10, self.y10, fill_value=self.fill_value, bounds_error=False, kind=kind)
A:scipy.interpolate.tests.test_interpolate.raises_bounds_error->interp1d(self.x10, self.y10, bounds_error=True, kind=kind)
A:scipy.interpolate.tests.test_interpolate.c->interp1d(x, y, kind=kind)
A:scipy.interpolate.tests.test_interpolate.yi->c(x - 1)
A:scipy.interpolate.tests.test_interpolate.interp210->interp1d(self.x10, self.y210, kind=kind)
A:scipy.interpolate.tests.test_interpolate.interp102->interp1d(self.x10, self.y102, axis=0, kind=kind)
A:scipy.interpolate.tests.test_interpolate.x_new->numpy.array([[3.0, 5.0], [2.0, 7.0]])
A:scipy.interpolate.tests.test_interpolate.xi->numpy.linspace(1, 10, 31)
A:scipy.interpolate.tests.test_interpolate.cr->interp1d(x, y.real, kind=kind)
A:scipy.interpolate.tests.test_interpolate.ci->interp1d(x, y.imag, kind=kind)
A:scipy.interpolate.tests.test_interpolate.p->poly1d([5, 2, 1, 4, 3])
A:scipy.interpolate.tests.test_interpolate.xs->numpy.arange(len(p.coeffs))
A:scipy.interpolate.tests.test_interpolate.ys->p(xs)
A:scipy.interpolate.tests.test_interpolate.pl->lagrange(xs, ys)
scipy.interpolate.tests.test_interpolate.TestInterp1D(object)
scipy.interpolate.tests.test_interpolate.TestInterp1D._bounds_check(self,kind='linear')
scipy.interpolate.tests.test_interpolate.TestInterp1D._bounds_check_int_nan_fill(self,kind='linear')
scipy.interpolate.tests.test_interpolate.TestInterp1D._check_complex(self,dtype=np.complex_,kind='linear')
scipy.interpolate.tests.test_interpolate.TestInterp1D._nd_check_interp(self,kind='linear')
scipy.interpolate.tests.test_interpolate.TestInterp1D._nd_check_shape(self,kind='linear')
scipy.interpolate.tests.test_interpolate.TestInterp1D.setUp(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_bounds(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_complex(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_cubic(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_init(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_linear(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_nd(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_nd_zero_spline(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_nearest(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_validation(self)
scipy.interpolate.tests.test_interpolate.TestInterp1D.test_zero(self)
scipy.interpolate.tests.test_interpolate.TestInterp2D(TestCase)
scipy.interpolate.tests.test_interpolate.TestInterp2D.test_interp2d(self)
scipy.interpolate.tests.test_interpolate.TestInterp2D.test_interp2d_bounds(self)
scipy.interpolate.tests.test_interpolate.TestInterp2D.test_interp2d_linear(self)
scipy.interpolate.tests.test_interpolate.TestInterp2D.test_interp2d_meshgrid_input(self)
scipy.interpolate.tests.test_interpolate.TestInterp2D.test_interp2d_meshgrid_input_unsorted(self)
scipy.interpolate.tests.test_interpolate.TestLagrange(TestCase)
scipy.interpolate.tests.test_interpolate.TestLagrange.test_lagrange(self)
scipy.tests.test_TestInterp1D(object)
scipy.tests.test_TestInterp1D._bounds_check(self,kind='linear')
scipy.tests.test_TestInterp1D._bounds_check_int_nan_fill(self,kind='linear')
scipy.tests.test_TestInterp1D._check_complex(self,dtype=np.complex_,kind='linear')
scipy.tests.test_TestInterp1D._nd_check_interp(self,kind='linear')
scipy.tests.test_TestInterp1D._nd_check_shape(self,kind='linear')
scipy.tests.test_TestInterp1D.setUp(self)
scipy.tests.test_TestInterp1D.test_bounds(self)
scipy.tests.test_TestInterp1D.test_complex(self)
scipy.tests.test_TestInterp1D.test_cubic(self)
scipy.tests.test_TestInterp1D.test_init(self)
scipy.tests.test_TestInterp1D.test_linear(self)
scipy.tests.test_TestInterp1D.test_nd(self)
scipy.tests.test_TestInterp1D.test_nd_zero_spline(self)
scipy.tests.test_TestInterp1D.test_nearest(self)
scipy.tests.test_TestInterp1D.test_validation(self)
scipy.tests.test_TestInterp1D.test_zero(self)
scipy.tests.test_TestInterp2D(TestCase)
scipy.tests.test_TestInterp2D.test_interp2d(self)
scipy.tests.test_TestInterp2D.test_interp2d_bounds(self)
scipy.tests.test_TestInterp2D.test_interp2d_linear(self)
scipy.tests.test_TestInterp2D.test_interp2d_meshgrid_input(self)
scipy.tests.test_TestInterp2D.test_interp2d_meshgrid_input_unsorted(self)
scipy.tests.test_TestLagrange(TestCase)
scipy.tests.test_TestLagrange.test_lagrange(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/interpolate/tests/test_fitpack2.py----------------------------------------
A:scipy.interpolate.tests.test_fitpack2.lut->RectSphereBivariateSpline(x, y, z)
A:scipy.interpolate.tests.test_fitpack2.sp->ZeroSpline([1, 2, 3, 4, 5], [3, 2, 3, 2, 3], k=2)
A:scipy.interpolate.tests.test_fitpack2.spl->UnivariateSpline(x=x, y=y, w=w, s=None)
A:scipy.interpolate.tests.test_fitpack2.desired->array([0.35100374, 0.51715855, 0.87789547, 0.98719344])
A:scipy.interpolate.tests.test_fitpack2.warn_ctx->WarningManager()
A:scipy.interpolate.tests.test_fitpack2.(tx, ty)->RectSphereBivariateSpline(x, y, z).get_knots()
A:scipy.interpolate.tests.test_fitpack2.z->array([[1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1], [1, 2, 3, 2, 1, 2, 1], [1, 2, 2, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1], [1, 2, 2, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1]])
A:scipy.interpolate.tests.test_fitpack2.tz->lut(tx[:-1], ty[:-1])
A:scipy.interpolate.tests.test_fitpack2.lut2->SmoothBivariateSpline(x, y, z, kx=2, ky=2, s=0)
A:scipy.interpolate.tests.test_fitpack2.data->ones((theta.shape[0], phi.shape[0]))
A:scipy.interpolate.tests.test_fitpack2.(lats, lons)->meshgrid(theta, phi)
A:scipy.interpolate.tests.test_fitpack2.lut_lsq->LSQSphereBivariateSpline(lats.ravel(), lons.ravel(), data.T.ravel(), knotst, knotsp)
A:scipy.interpolate.tests.test_fitpack2.theta->array([0.25 * pi, 0.25 * pi, 0.25 * pi, 0.5 * pi, 0.5 * pi, 0.5 * pi, 0.75 * pi, 0.75 * pi, 0.75 * pi])
A:scipy.interpolate.tests.test_fitpack2.phi->array([0.5 * pi, pi, 1.5 * pi, 0.5 * pi, pi, 1.5 * pi, 0.5 * pi, pi, 1.5 * pi])
A:scipy.interpolate.tests.test_fitpack2.r->array([3, 3, 3, 3, 3, 3, 3, 3, 3])
A:scipy.interpolate.tests.test_fitpack2.self.lut->SmoothSphereBivariateSpline(theta, phi, r, s=10000000000.0)
A:scipy.interpolate.tests.test_fitpack2.x->linspace(0.01, pi - 0.01, 7)
A:scipy.interpolate.tests.test_fitpack2.y->linspace(0.01, 2 * pi - 0.01, 7)
A:scipy.interpolate.tests.test_fitpack2.zi->RectSphereBivariateSpline(x, y, z).ev(xi, yi)
A:scipy.interpolate.tests.test_fitpack2.zi2->array([lut(xp, yp)[0, 0] for (xp, yp) in zip(xi, yi)])
scipy.interpolate.tests.test_TestLSQBivariateSpline(TestCase)
scipy.interpolate.tests.test_TestLSQBivariateSpline.test_bilinearity(self)
scipy.interpolate.tests.test_TestLSQBivariateSpline.test_empty_input(self)
scipy.interpolate.tests.test_TestLSQBivariateSpline.test_integral(self)
scipy.interpolate.tests.test_TestLSQBivariateSpline.test_linear_constant(self)
scipy.interpolate.tests.test_TestLSQSphereBivariateSpline(TestCase)
scipy.interpolate.tests.test_TestLSQSphereBivariateSpline.setUp(self)
scipy.interpolate.tests.test_TestLSQSphereBivariateSpline.test_empty_input(self)
scipy.interpolate.tests.test_TestLSQSphereBivariateSpline.test_linear_constant(self)
scipy.interpolate.tests.test_TestRectBivariateSpline(TestCase)
scipy.interpolate.tests.test_TestRectBivariateSpline.test_defaults(self)
scipy.interpolate.tests.test_TestRectBivariateSpline.test_evaluate(self)
scipy.interpolate.tests.test_TestRectSphereBivariateSpline(TestCase)
scipy.interpolate.tests.test_TestRectSphereBivariateSpline.test_defaults(self)
scipy.interpolate.tests.test_TestRectSphereBivariateSpline.test_evaluate(self)
scipy.interpolate.tests.test_TestSmoothBivariateSpline(TestCase)
scipy.interpolate.tests.test_TestSmoothBivariateSpline.test_integral(self)
scipy.interpolate.tests.test_TestSmoothBivariateSpline.test_linear_1d(self)
scipy.interpolate.tests.test_TestSmoothBivariateSpline.test_linear_constant(self)
scipy.interpolate.tests.test_TestSmoothSphereBivariateSpline(TestCase)
scipy.interpolate.tests.test_TestSmoothSphereBivariateSpline.setUp(self)
scipy.interpolate.tests.test_TestSmoothSphereBivariateSpline.test_empty_input(self)
scipy.interpolate.tests.test_TestSmoothSphereBivariateSpline.test_linear_constant(self)
scipy.interpolate.tests.test_TestUnivariateSpline(TestCase)
scipy.interpolate.tests.test_TestUnivariateSpline.test_empty_input(self)
scipy.interpolate.tests.test_TestUnivariateSpline.test_linear_1d(self)
scipy.interpolate.tests.test_TestUnivariateSpline.test_linear_constant(self)
scipy.interpolate.tests.test_TestUnivariateSpline.test_preserve_shape(self)
scipy.interpolate.tests.test_TestUnivariateSpline.test_resize_regression(self)
scipy.interpolate.tests.test_TestUnivariateSpline.test_subclassing(self)
scipy.interpolate.tests.test_fitpack2.TestLSQBivariateSpline(TestCase)
scipy.interpolate.tests.test_fitpack2.TestLSQBivariateSpline.test_bilinearity(self)
scipy.interpolate.tests.test_fitpack2.TestLSQBivariateSpline.test_empty_input(self)
scipy.interpolate.tests.test_fitpack2.TestLSQBivariateSpline.test_integral(self)
scipy.interpolate.tests.test_fitpack2.TestLSQBivariateSpline.test_linear_constant(self)
scipy.interpolate.tests.test_fitpack2.TestLSQSphereBivariateSpline(TestCase)
scipy.interpolate.tests.test_fitpack2.TestLSQSphereBivariateSpline.setUp(self)
scipy.interpolate.tests.test_fitpack2.TestLSQSphereBivariateSpline.test_empty_input(self)
scipy.interpolate.tests.test_fitpack2.TestLSQSphereBivariateSpline.test_linear_constant(self)
scipy.interpolate.tests.test_fitpack2.TestRectBivariateSpline(TestCase)
scipy.interpolate.tests.test_fitpack2.TestRectBivariateSpline.test_defaults(self)
scipy.interpolate.tests.test_fitpack2.TestRectBivariateSpline.test_evaluate(self)
scipy.interpolate.tests.test_fitpack2.TestRectSphereBivariateSpline(TestCase)
scipy.interpolate.tests.test_fitpack2.TestRectSphereBivariateSpline.test_defaults(self)
scipy.interpolate.tests.test_fitpack2.TestRectSphereBivariateSpline.test_evaluate(self)
scipy.interpolate.tests.test_fitpack2.TestSmoothBivariateSpline(TestCase)
scipy.interpolate.tests.test_fitpack2.TestSmoothBivariateSpline.test_integral(self)
scipy.interpolate.tests.test_fitpack2.TestSmoothBivariateSpline.test_linear_1d(self)
scipy.interpolate.tests.test_fitpack2.TestSmoothBivariateSpline.test_linear_constant(self)
scipy.interpolate.tests.test_fitpack2.TestSmoothSphereBivariateSpline(TestCase)
scipy.interpolate.tests.test_fitpack2.TestSmoothSphereBivariateSpline.setUp(self)
scipy.interpolate.tests.test_fitpack2.TestSmoothSphereBivariateSpline.test_empty_input(self)
scipy.interpolate.tests.test_fitpack2.TestSmoothSphereBivariateSpline.test_linear_constant(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline(TestCase)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_empty_input(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_linear_1d(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_linear_constant(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_preserve_shape(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_resize_regression(self)
scipy.interpolate.tests.test_fitpack2.TestUnivariateSpline.test_subclassing(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/interpolate/tests/test_fitpack.py----------------------------------------
A:scipy.interpolate.tests.test_fitpack.xy->makepairs(x, y)
A:scipy.interpolate.tests.test_fitpack.tck->splrep(x, y)
A:scipy.interpolate.tests.test_fitpack.tol->err_est(k, d)
A:scipy.interpolate.tests.test_fitpack.v->f(x)
A:scipy.interpolate.tests.test_fitpack.err->norm2(ravel(v1 - v2))
A:scipy.interpolate.tests.test_fitpack.roots->sproot(tck)
A:scipy.interpolate.tests.test_fitpack.(tckp, u)->splprep([x, v], s=s, per=per, k=k, nest=-1)
A:scipy.interpolate.tests.test_fitpack.uv->splev(dx, tckp, d)
A:scipy.interpolate.tests.test_fitpack.err1->abs(uv[1] - f(uv[0]))
A:scipy.interpolate.tests.test_fitpack.err2->abs(splev(uv[0], tck) - f(uv[0]))
A:scipy.interpolate.tests.test_fitpack.t2->makepairs(tt[0], tt[1])
A:scipy.interpolate.tests.test_fitpack.v1->bisplev(tt[0], tt[1], tck)
A:scipy.interpolate.tests.test_fitpack.v2->f2(t2[0], t2[1])
A:scipy.interpolate.tests.test_fitpack.z->splev(1, tck)
scipy.interpolate.tests.test_TestSmokeTests(TestCase)
scipy.interpolate.tests.test_TestSmokeTests.check_1(self,f=f1,per=0,s=0,a=0,b=2*pi,N=20,at=0,xb=None,xe=None)
scipy.interpolate.tests.test_TestSmokeTests.check_2(self,f=f1,per=0,s=0,a=0,b=2*pi,N=20,xb=None,xe=None,ia=0,ib=2*pi,dx=0.2*pi)
scipy.interpolate.tests.test_TestSmokeTests.check_3(self,f=f1,per=0,s=0,a=0,b=2*pi,N=20,xb=None,xe=None,ia=0,ib=2*pi,dx=0.2*pi)
scipy.interpolate.tests.test_TestSmokeTests.check_4(self,f=f1,per=0,s=0,a=0,b=2*pi,N=20,xb=None,xe=None,ia=0,ib=2*pi,dx=0.2*pi)
scipy.interpolate.tests.test_TestSmokeTests.check_5(self,f=f2,kx=3,ky=3,xb=0,xe=2*pi,yb=0,ye=2*pi,Nx=20,Ny=20,s=0)
scipy.interpolate.tests.test_TestSmokeTests.test_smoke_bisplrep_bisplev(self)
scipy.interpolate.tests.test_TestSmokeTests.test_smoke_splint_spalde(self)
scipy.interpolate.tests.test_TestSmokeTests.test_smoke_splprep_splrep_splev(self)
scipy.interpolate.tests.test_TestSmokeTests.test_smoke_splrep_splev(self)
scipy.interpolate.tests.test_TestSmokeTests.test_smoke_sproot(self)
scipy.interpolate.tests.test_TestSplev(TestCase)
scipy.interpolate.tests.test_TestSplev.test_1d_shape(self)
scipy.interpolate.tests.test_f1(x,d=0)
scipy.interpolate.tests.test_f2(x,y=0,dx=0,dy=0)
scipy.interpolate.tests.test_fitpack.TestSmokeTests(TestCase)
scipy.interpolate.tests.test_fitpack.TestSmokeTests.check_1(self,f=f1,per=0,s=0,a=0,b=2*pi,N=20,at=0,xb=None,xe=None)
scipy.interpolate.tests.test_fitpack.TestSmokeTests.check_2(self,f=f1,per=0,s=0,a=0,b=2*pi,N=20,xb=None,xe=None,ia=0,ib=2*pi,dx=0.2*pi)
scipy.interpolate.tests.test_fitpack.TestSmokeTests.check_3(self,f=f1,per=0,s=0,a=0,b=2*pi,N=20,xb=None,xe=None,ia=0,ib=2*pi,dx=0.2*pi)
scipy.interpolate.tests.test_fitpack.TestSmokeTests.check_4(self,f=f1,per=0,s=0,a=0,b=2*pi,N=20,xb=None,xe=None,ia=0,ib=2*pi,dx=0.2*pi)
scipy.interpolate.tests.test_fitpack.TestSmokeTests.check_5(self,f=f2,kx=3,ky=3,xb=0,xe=2*pi,yb=0,ye=2*pi,Nx=20,Ny=20,s=0)
scipy.interpolate.tests.test_fitpack.TestSmokeTests.test_smoke_bisplrep_bisplev(self)
scipy.interpolate.tests.test_fitpack.TestSmokeTests.test_smoke_splint_spalde(self)
scipy.interpolate.tests.test_fitpack.TestSmokeTests.test_smoke_splprep_splrep_splev(self)
scipy.interpolate.tests.test_fitpack.TestSmokeTests.test_smoke_splrep_splev(self)
scipy.interpolate.tests.test_fitpack.TestSmokeTests.test_smoke_sproot(self)
scipy.interpolate.tests.test_fitpack.TestSplev(TestCase)
scipy.interpolate.tests.test_fitpack.TestSplev.test_1d_shape(self)
scipy.interpolate.tests.test_fitpack.f1(x,d=0)
scipy.interpolate.tests.test_fitpack.f2(x,y=0,dx=0,dy=0)
scipy.interpolate.tests.test_fitpack.makepairs(x,y)
scipy.interpolate.tests.test_fitpack.norm2(x)
scipy.interpolate.tests.test_fitpack.put(*a)
scipy.interpolate.tests.test_makepairs(x,y)
scipy.interpolate.tests.test_norm2(x)
scipy.interpolate.tests.test_put(*a)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/interpolate/tests/test_regression.py----------------------------------------
A:scipy.interpolate.tests.test_regression.x->numpy.linspace(0, 10)
A:scipy.interpolate.tests.test_regression.tck->scipy.interpolate.splrep(x, y, k=3, t=[5])
A:scipy.interpolate.tests.test_regression.res->scipy.interpolate.spalde(np.float64(1), tck)
A:scipy.interpolate.tests.test_regression.des->numpy.array([1.0, 3.0, 6.0, 6.0])
scipy.interpolate.tests.test_regression.TestRegression(TestCase)
scipy.interpolate.tests.test_regression.TestRegression.test_spalde_scalar_input(self)
scipy.tests.test_regression.TestRegression(TestCase)
scipy.tests.test_regression.TestRegression.test_spalde_scalar_input(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/bsplines.py----------------------------------------
A:scipy.signal.bsplines.Iin->Iin.astype('F').astype('F')
A:scipy.signal.bsplines.ckr->cspline2d(Iin, lmbda)
A:scipy.signal.bsplines.cki->cspline2d(Iin.imag, lmbda)
A:scipy.signal.bsplines.outr->sepfir2d(ckr, hcol, hcol)
A:scipy.signal.bsplines.outi->sepfir2d(cki, hcol, hcol)
A:scipy.signal.bsplines.out->out.astype(intype).astype(intype)
A:scipy.signal.bsplines.fval->factorial(order)
A:scipy.signal.bsplines.(funclist, condfuncs)->_bspline_piecefunctions(n)
A:scipy.signal.bsplines.ax->abs(asarray(x))
A:scipy.signal.bsplines.res->zeros_like(newx)
A:scipy.signal.bsplines.cond1->less(ax, 0.5)
A:scipy.signal.bsplines.omeg->arctan2(sqrt(144 * lam - 1), sqrt(xi))
A:scipy.signal.bsplines.ak->abs(k)
A:scipy.signal.bsplines.(rho, omega)->_coeff_smooth(lamb)
A:scipy.signal.bsplines.K->len(signal)
A:scipy.signal.bsplines.yp->zeros((K,), signal.dtype.char)
A:scipy.signal.bsplines.k->arange(K)
A:scipy.signal.bsplines.y->zeros((K,), signal.dtype.char)
A:scipy.signal.bsplines.y[K - 1]->numpy.core.umath.add.reduce((_hs(k, cs, rho, omega) + _hs(k + 1, cs, rho, omega)) * signal[::-1])
A:scipy.signal.bsplines.y[K - 2]->numpy.core.umath.add.reduce((_hs(k - 1, cs, rho, omega) + _hs(k + 2, cs, rho, omega)) * signal[::-1])
A:scipy.signal.bsplines.yplus->zeros((K,), signal.dtype.char)
A:scipy.signal.bsplines.output->zeros((K,), signal.dtype.char)
A:scipy.signal.bsplines.N->len(cj)
A:scipy.signal.bsplines.res[cond1]->qspline1d_eval(cj, -newx[cond1])
A:scipy.signal.bsplines.res[cond2]->qspline1d_eval(cj, 2 * (N - 1) - newx[cond2])
A:scipy.signal.bsplines.result->zeros_like(newx)
A:scipy.signal.bsplines.indj->thisj.clip(0, N - 1)
scipy.signal._bspline_piecefunctions(order)
scipy.signal._coeff_smooth(lam)
scipy.signal._cubic_coeff(signal)
scipy.signal._cubic_smooth_coeff(signal,lamb)
scipy.signal._hc(k,cs,rho,omega)
scipy.signal._hs(k,cs,rho,omega)
scipy.signal._quadratic_coeff(signal)
scipy.signal.bspline(x,n)
scipy.signal.bsplines._bspline_piecefunctions(order)
scipy.signal.bsplines._coeff_smooth(lam)
scipy.signal.bsplines._cubic_coeff(signal)
scipy.signal.bsplines._cubic_smooth_coeff(signal,lamb)
scipy.signal.bsplines._hc(k,cs,rho,omega)
scipy.signal.bsplines._hs(k,cs,rho,omega)
scipy.signal.bsplines._quadratic_coeff(signal)
scipy.signal.bsplines.bspline(x,n)
scipy.signal.bsplines.cspline1d(signal,lamb=0.0)
scipy.signal.bsplines.cspline1d_eval(cj,newx,dx=1.0,x0=0)
scipy.signal.bsplines.cubic(x)
scipy.signal.bsplines.factorial(n)
scipy.signal.bsplines.gauss_spline(x,n)
scipy.signal.bsplines.qspline1d(signal,lamb=0.0)
scipy.signal.bsplines.qspline1d_eval(cj,newx,dx=1.0,x0=0)
scipy.signal.bsplines.quadratic(x)
scipy.signal.bsplines.spline_filter(Iin,lmbda=5.0)
scipy.signal.cspline1d(signal,lamb=0.0)
scipy.signal.cspline1d_eval(cj,newx,dx=1.0,x0=0)
scipy.signal.cubic(x)
scipy.signal.factorial(n)
scipy.signal.gauss_spline(x,n)
scipy.signal.qspline1d(signal,lamb=0.0)
scipy.signal.qspline1d_eval(cj,newx,dx=1.0,x0=0)
scipy.signal.quadratic(x)
scipy.signal.spline_filter(Iin,lmbda=5.0)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/windows.py----------------------------------------
A:scipy.signal.windows.n->numpy.arange(0, M)
A:scipy.signal.windows.na->numpy.extract(n < -(M - 1) / 4.0, n)
A:scipy.signal.windows.nb->numpy.extract(abs(n) <= (M - 1) / 4.0, n)
A:scipy.signal.windows.fac->numpy.abs(n / (M - 1.0) - 0.5)
A:scipy.signal.windows.w->numpy.abs(vec[:, ind])
A:scipy.signal.windows.beta->float(window)
A:scipy.signal.windows.p->numpy.zeros(x.shape)
A:scipy.signal.windows.p[x > 1]->numpy.cosh(order * np.arccosh(x[x > 1]))
A:scipy.signal.windows.p[np.abs(x) <= 1]->numpy.cos(order * np.arccos(x[np.abs(x) <= 1]))
A:scipy.signal.windows.[lam, vec]->scipy.linalg.eig(AF)
A:scipy.signal.windows.ind->numpy.argmax(abs(lam), axis=-1)
scipy.signal.barthann(M,sym=True)
scipy.signal.bartlett(M,sym=True)
scipy.signal.blackman(M,sym=True)
scipy.signal.blackmanharris(M,sym=True)
scipy.signal.bohman(M,sym=True)
scipy.signal.boxcar(M,sym=True)
scipy.signal.chebwin(M,at,sym=True)
scipy.signal.flattop(M,sym=True)
scipy.signal.gaussian(M,std,sym=True)
scipy.signal.general_gaussian(M,p,sig,sym=True)
scipy.signal.get_window(window,Nx,fftbins=True)
scipy.signal.hamming(M,sym=True)
scipy.signal.hann(M,sym=True)
scipy.signal.kaiser(M,beta,sym=True)
scipy.signal.nuttall(M,sym=True)
scipy.signal.parzen(M,sym=True)
scipy.signal.slepian(M,width,sym=True)
scipy.signal.triang(M,sym=True)
scipy.signal.windows.barthann(M,sym=True)
scipy.signal.windows.bartlett(M,sym=True)
scipy.signal.windows.blackman(M,sym=True)
scipy.signal.windows.blackmanharris(M,sym=True)
scipy.signal.windows.bohman(M,sym=True)
scipy.signal.windows.boxcar(M,sym=True)
scipy.signal.windows.chebwin(M,at,sym=True)
scipy.signal.windows.flattop(M,sym=True)
scipy.signal.windows.gaussian(M,std,sym=True)
scipy.signal.windows.general_gaussian(M,p,sig,sym=True)
scipy.signal.windows.get_window(window,Nx,fftbins=True)
scipy.signal.windows.hamming(M,sym=True)
scipy.signal.windows.hann(M,sym=True)
scipy.signal.windows.kaiser(M,beta,sym=True)
scipy.signal.windows.nuttall(M,sym=True)
scipy.signal.windows.parzen(M,sym=True)
scipy.signal.windows.slepian(M,width,sym=True)
scipy.signal.windows.triang(M,sym=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/_peak_finding.py----------------------------------------
A:scipy.signal._peak_finding.locs->numpy.arange(0, datalen)
A:scipy.signal._peak_finding.results->_boolrelextrema(data, comparator, axis, order, mode)
A:scipy.signal._peak_finding.main->data.take(locs, axis=axis, mode=mode)
A:scipy.signal._peak_finding.plus->data.take(locs + shift, axis=axis, mode=mode)
A:scipy.signal._peak_finding.minus->data.take(locs - shift, axis=axis, mode=mode)
A:scipy.signal._peak_finding.all_max_cols->_boolrelextrema(matr, np.greater, axis=1, order=1)
A:scipy.signal._peak_finding.rows->numpy.arange(start_row - 1, -1, -1)
A:scipy.signal._peak_finding.cols->numpy.arange(0, matr.shape[1])
A:scipy.signal._peak_finding.prev_ridge_cols->numpy.array([line[1][-1] for line in ridge_lines])
A:scipy.signal._peak_finding.diffs->numpy.abs(col - prev_ridge_cols)
A:scipy.signal._peak_finding.closest->numpy.argmin(diffs)
A:scipy.signal._peak_finding.sortargs->numpy.array(np.argsort(line[0]))
A:scipy.signal._peak_finding.min_length->numpy.ceil(cwt.shape[0] / 4)
A:scipy.signal._peak_finding.window_size->numpy.ceil(num_points / 20)
A:scipy.signal._peak_finding.noises->numpy.zeros_like(row_one)
A:scipy.signal._peak_finding.window->window.astype(int).astype(int)
A:scipy.signal._peak_finding.noises[ind]->scoreatpercentile(row_one[window], per=noise_perc)
A:scipy.signal._peak_finding.snr->abs(cwt[line[0][0], line[1][0]] / noises[line[1][0]])
A:scipy.signal._peak_finding.gap_thresh->numpy.ceil(widths[0])
A:scipy.signal._peak_finding.cwt_dat->cwt(vector, wavelet, widths)
A:scipy.signal._peak_finding.ridge_lines->_identify_ridge_lines(cwt_dat, max_distances, gap_thresh)
A:scipy.signal._peak_finding.filtered->_filter_ridge_lines(cwt_dat, ridge_lines, min_length=min_length, min_snr=min_snr, noise_perc=noise_perc)
scipy.signal._boolrelextrema(data,comparator,axis=0,order=1,mode='clip')
scipy.signal._filter_ridge_lines(cwt,ridge_lines,window_size=None,min_length=None,min_snr=1,noise_perc=10)
scipy.signal._identify_ridge_lines(matr,max_distances,gap_thresh)
scipy.signal._peak_finding._boolrelextrema(data,comparator,axis=0,order=1,mode='clip')
scipy.signal._peak_finding._filter_ridge_lines(cwt,ridge_lines,window_size=None,min_length=None,min_snr=1,noise_perc=10)
scipy.signal._peak_finding._identify_ridge_lines(matr,max_distances,gap_thresh)
scipy.signal._peak_finding.argrelextrema(data,comparator,axis=0,order=1,mode='clip')
scipy.signal._peak_finding.argrelmax(data,axis=0,order=1,mode='clip')
scipy.signal._peak_finding.argrelmin(data,axis=0,order=1,mode='clip')
scipy.signal._peak_finding.find_peaks_cwt(vector,widths,wavelet=None,max_distances=None,gap_thresh=None,min_length=None,min_snr=1,noise_perc=10)
scipy.signal.argrelextrema(data,comparator,axis=0,order=1,mode='clip')
scipy.signal.argrelmax(data,axis=0,order=1,mode='clip')
scipy.signal.argrelmin(data,axis=0,order=1,mode='clip')
scipy.signal.find_peaks_cwt(vector,widths,wavelet=None,max_distances=None,gap_thresh=None,min_length=None,min_snr=1,noise_perc=10)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/cont2discrete.py----------------------------------------
A:scipy.signal.cont2discrete.sysd->cont2discrete(zpk2ss(sys[0], sys[1], sys[2]), dt, method=method, alpha=alpha)
A:scipy.signal.cont2discrete.ad->scipy.linalg.solve(ima, np.eye(a.shape[0]) + (1.0 - alpha) * dt * a)
A:scipy.signal.cont2discrete.bd->scipy.linalg.solve(ima, dt * b)
A:scipy.signal.cont2discrete.cd->cd.transpose().transpose()
A:scipy.signal.cont2discrete.em_upper->numpy.hstack((a, b))
A:scipy.signal.cont2discrete.em_lower->numpy.hstack((np.zeros((b.shape[1], a.shape[0])), np.zeros((b.shape[1], b.shape[1]))))
A:scipy.signal.cont2discrete.em->numpy.vstack((em_upper, em_lower))
A:scipy.signal.cont2discrete.ms->scipy.linalg.expm(dt * em)
scipy.signal.cont2discrete(sys,dt,method='zoh',alpha=None)
scipy.signal.cont2discrete.cont2discrete(sys,dt,method='zoh',alpha=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/dltisys.py----------------------------------------
A:scipy.signal.dltisys.(a, b, c, d)->zpk2ss(system[0], system[1], system[2])
A:scipy.signal.dltisys.out_samples->max(u.shape)
A:scipy.signal.dltisys.xout->numpy.zeros((out_samples, a.shape[0]))
A:scipy.signal.dltisys.yout->numpy.zeros((out_samples, c.shape[0]))
A:scipy.signal.dltisys.tout->numpy.linspace(0.0, stoptime, num=out_samples)
A:scipy.signal.dltisys.xout[0, :]->numpy.asarray(x0)
A:scipy.signal.dltisys.u_dt_interp->interp1d(t, u.transpose(), copy=False, bounds_error=True)
A:scipy.signal.dltisys.u_dt->u_dt_interp(tout).transpose()
A:scipy.signal.dltisys.t->numpy.arange(0, n * dt, dt)
A:scipy.signal.dltisys.u->numpy.zeros((t.shape[0], n_inputs))
A:scipy.signal.dltisys.one_output->dlsim(system, u, t=t, x0=x0)
A:scipy.signal.dltisys.u[:, i]->numpy.ones((t.shape[0],))
scipy.signal.ddimpulse(system,x0=None,t=None,n=None)
scipy.signal.ddlsim(system,u,t=None,x0=None)
scipy.signal.ddstep(system,x0=None,t=None,n=None)
scipy.signal.dltisys.dimpulse(system,x0=None,t=None,n=None)
scipy.signal.dltisys.dlsim(system,u,t=None,x0=None)
scipy.signal.dltisys.dstep(system,x0=None,t=None,n=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/setupscons.py----------------------------------------
A:scipy.signal.setupscons.config->Configuration('signal', parent_package, top_path)
scipy.signal.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/signaltools.py----------------------------------------
A:scipy.signal.signaltools.in1->asarray(in1)
A:scipy.signal.signaltools.in2->asarray(in2)
A:scipy.signal.signaltools.val->_valfrommode(mode)
A:scipy.signal.signaltools.out->sigtools._convolve2d(in1, in2, 0, val, bval, fillvalue)
A:scipy.signal.signaltools.z->sigtools._correlateND(in1zpadded, in2, out, val)
A:scipy.signal.signaltools.in1zpadded->numpy.zeros(ps, in1.dtype)
A:scipy.signal.signaltools.in1zpadded[sc]->asarray(in1).copy()
A:scipy.signal.signaltools.newsize->asarray(newsize)
A:scipy.signal.signaltools.currsize->array(arr.shape)
A:scipy.signal.signaltools.s1->array(in1.shape)
A:scipy.signal.signaltools.s2->array(in2.shape)
A:scipy.signal.signaltools.fslice->tuple([slice(0, int(sz)) for sz in size])
A:scipy.signal.signaltools.ret->transpose(ret, tuple(olddims))
A:scipy.signal.signaltools.volume->atleast_1d(volume)
A:scipy.signal.signaltools.kernel->asarray(in2)
A:scipy.signal.signaltools.domain->ones(kernel_size)
A:scipy.signal.signaltools.kernel_size->asarray(kernel_size)
A:scipy.signal.signaltools.numels->product(kernel_size, axis=0)
A:scipy.signal.signaltools.im->asarray(im)
A:scipy.signal.signaltools.mysize->asarray(mysize)
A:scipy.signal.signaltools.noise->mean(ravel(lVar), axis=0)
A:scipy.signal.signaltools.bval->_bvalfromboundary(boundary)
A:scipy.signal.signaltools.image->asarray(input)
A:scipy.signal.signaltools.K->max(M, N)
A:scipy.signal.signaltools.y->lfilter(b, a, x, axis=axis)
A:scipy.signal.signaltools.zi->numpy.reshape(zi, zi_shape)
A:scipy.signal.signaltools.x->numpy.asarray(x)
A:scipy.signal.signaltools.L->numpy.size(y)
A:scipy.signal.signaltools.zi[m]->sum(b[m + 1:] * x[:M - m], axis=0)
A:scipy.signal.signaltools.num->atleast_1d(signal)
A:scipy.signal.signaltools.den->atleast_1d(divisor)
A:scipy.signal.signaltools.N->int(np.minimum(num, Nx))
A:scipy.signal.signaltools.D->len(den)
A:scipy.signal.signaltools.input->ones(N - D + 1, float)
A:scipy.signal.signaltools.quot->lfilter(num, den, input)
A:scipy.signal.signaltools.Xf->fft2(x, N, axes=(0, 1))
A:scipy.signal.signaltools.h->eval('h%d' % (p + 1))
A:scipy.signal.signaltools.ind[axis]->slice(None)
A:scipy.signal.signaltools.h1->zeros(N[0], 'd')
A:scipy.signal.signaltools.h2->zeros(N[1], 'd')
A:scipy.signal.signaltools.k->len(x.shape)
A:scipy.signal.signaltools.p->asarray(p)
A:scipy.signal.signaltools.indx->argsort(p)
A:scipy.signal.signaltools.tol->abs(tol)
A:scipy.signal.signaltools.(p, indx)->cmplx_sort(p)
A:scipy.signal.signaltools.curp->comproot(sameroots)
A:scipy.signal.signaltools.r->take(r, indx, 0)
A:scipy.signal.signaltools.(pout, mult)->unique_roots(p, tol=tol, rtype=rtype)
A:scipy.signal.signaltools.a->numpy.asarray(a)
A:scipy.signal.signaltools.b->firwin(n + 1, 1.0 / q, window='hamming')
A:scipy.signal.signaltools.(b, a)->cheby1(n, 0.05, 0.8 / q)
A:scipy.signal.signaltools.(k, b)->polydiv(b, a)
A:scipy.signal.signaltools.bn->polysub(term1, term2)
A:scipy.signal.signaltools.an->polymul(an, an)
A:scipy.signal.signaltools.term1->polymul(polyder(bn, 1), an)
A:scipy.signal.signaltools.term2->polymul(bn, polyder(an, 1))
A:scipy.signal.signaltools.(krev, brev)->polydiv(brev, arev)
A:scipy.signal.signaltools.extra->asarray(k)
A:scipy.signal.signaltools.brev->polyadd(brev, (r[indx] * poly(t2))[::-1])
A:scipy.signal.signaltools.X->fft(x, axis=axis)
A:scipy.signal.signaltools.W->ifftshift(get_window(window, Nx))
A:scipy.signal.signaltools.newshape->list(x.shape)
A:scipy.signal.signaltools.newshape[axis]->len(W)
A:scipy.signal.signaltools.Y->zeros(newshape, 'D')
A:scipy.signal.signaltools.sl[axis]->slice(None, None, q)
A:scipy.signal.signaltools.data->asarray(data)
A:scipy.signal.signaltools.bp->sort(unique(r_[0, bp, N]))
A:scipy.signal.signaltools.rnk->len(dshape)
A:scipy.signal.signaltools.newdata->newdata.astype(dtype).astype(dtype)
A:scipy.signal.signaltools.A->ones((Npts, 2), dtype)
A:scipy.signal.signaltools.A[:, 0]->cast[dtype](arange(1, Npts + 1) * 1.0 / Npts)
A:scipy.signal.signaltools.sl->slice(bp[m], bp[m + 1])
A:scipy.signal.signaltools.(coef, resids, rank, s)->scipy.linalg.lstsq(A, newdata[sl])
A:scipy.signal.signaltools.tdshape->take(dshape, newdims, 0)
A:scipy.signal.signaltools.vals->list(range(1, rnk))
A:scipy.signal.signaltools.n->max(len(a), len(b))
A:scipy.signal.signaltools.ntaps->max(len(a), len(b))
A:scipy.signal.signaltools.ext->const_ext(x, edge, axis=axis)
A:scipy.signal.signaltools.x0->axis_slice(ext, stop=1, axis=axis)
A:scipy.signal.signaltools.(y, zf)->lfilter(b, a, axis_reverse(y, axis=axis), axis=axis, zi=zi * y0)
A:scipy.signal.signaltools.y0->axis_slice(y, start=-1, axis=axis)
scipy.signal._bvalfromboundary(boundary)
scipy.signal._centered(arr,newsize)
scipy.signal._check_valid_mode_shapes(shape1,shape2)
scipy.signal._valfrommode(mode)
scipy.signal.cmplx_sort(p)
scipy.signal.convolve(in1,in2,mode='full')
scipy.signal.convolve2d(in1,in2,mode='full',boundary='fill',fillvalue=0)
scipy.signal.correlate(in1,in2,mode='full')
scipy.signal.correlate2d(in1,in2,mode='full',boundary='fill',fillvalue=0)
scipy.signal.decimate(x,q,n=None,ftype='iir',axis=-1)
scipy.signal.deconvolve(signal,divisor)
scipy.signal.detrend(data,axis=-1,type='linear',bp=0)
scipy.signal.fftconvolve(in1,in2,mode='full')
scipy.signal.filtfilt(b,a,x,axis=-1,padtype='odd',padlen=None)
scipy.signal.hilbert(x,N=None,axis=-1)
scipy.signal.hilbert2(x,N=None)
scipy.signal.invres(r,p,k,tol=0.001,rtype='avg')
scipy.signal.invresz(r,p,k,tol=0.001,rtype='avg')
scipy.signal.lfilter(b,a,x,axis=-1,zi=None)
scipy.signal.lfilter_zi(b,a)
scipy.signal.lfiltic(b,a,y,x=None)
scipy.signal.medfilt(volume,kernel_size=None)
scipy.signal.medfilt2d(input,kernel_size=3)
scipy.signal.order_filter(a,domain,rank)
scipy.signal.resample(x,num,t=None,axis=0,window=None)
scipy.signal.residue(b,a,tol=0.001,rtype='avg')
scipy.signal.residuez(b,a,tol=0.001,rtype='avg')
scipy.signal.signaltools._bvalfromboundary(boundary)
scipy.signal.signaltools._centered(arr,newsize)
scipy.signal.signaltools._check_valid_mode_shapes(shape1,shape2)
scipy.signal.signaltools._valfrommode(mode)
scipy.signal.signaltools.cmplx_sort(p)
scipy.signal.signaltools.convolve(in1,in2,mode='full')
scipy.signal.signaltools.convolve2d(in1,in2,mode='full',boundary='fill',fillvalue=0)
scipy.signal.signaltools.correlate(in1,in2,mode='full')
scipy.signal.signaltools.correlate2d(in1,in2,mode='full',boundary='fill',fillvalue=0)
scipy.signal.signaltools.decimate(x,q,n=None,ftype='iir',axis=-1)
scipy.signal.signaltools.deconvolve(signal,divisor)
scipy.signal.signaltools.detrend(data,axis=-1,type='linear',bp=0)
scipy.signal.signaltools.fftconvolve(in1,in2,mode='full')
scipy.signal.signaltools.filtfilt(b,a,x,axis=-1,padtype='odd',padlen=None)
scipy.signal.signaltools.hilbert(x,N=None,axis=-1)
scipy.signal.signaltools.hilbert2(x,N=None)
scipy.signal.signaltools.invres(r,p,k,tol=0.001,rtype='avg')
scipy.signal.signaltools.invresz(r,p,k,tol=0.001,rtype='avg')
scipy.signal.signaltools.lfilter(b,a,x,axis=-1,zi=None)
scipy.signal.signaltools.lfilter_zi(b,a)
scipy.signal.signaltools.lfiltic(b,a,y,x=None)
scipy.signal.signaltools.medfilt(volume,kernel_size=None)
scipy.signal.signaltools.medfilt2d(input,kernel_size=3)
scipy.signal.signaltools.order_filter(a,domain,rank)
scipy.signal.signaltools.resample(x,num,t=None,axis=0,window=None)
scipy.signal.signaltools.residue(b,a,tol=0.001,rtype='avg')
scipy.signal.signaltools.residuez(b,a,tol=0.001,rtype='avg')
scipy.signal.signaltools.unique_roots(p,tol=0.001,rtype='min')
scipy.signal.signaltools.wiener(im,mysize=None,noise=None)
scipy.signal.unique_roots(p,tol=0.001,rtype='min')
scipy.signal.wiener(im,mysize=None,noise=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/spectral.py----------------------------------------
A:scipy.signal.spectral.x->numpy.rollaxis(x, axis, len(x.shape))
A:scipy.signal.spectral.win->numpy.asarray(window)
A:scipy.signal.spectral.seg->detrend(seg)
A:scipy.signal.spectral.indices->numpy.arange(0, x.shape[-1] - nperseg + 1, step)
A:scipy.signal.spectral.outshape->list(x.shape)
A:scipy.signal.spectral.Pxx->numpy.rollaxis(Pxx, -1, axis)
A:scipy.signal.spectral.x_dt->detrend_func(x[..., ind:ind + nperseg])
A:scipy.signal.spectral.xft->scipy.fftpack.fft(x_dt * win, nfft)
A:scipy.signal.spectral.f->scipy.fftpack.fftfreq(nfft, 1.0 / fs)
scipy.signal.periodogram(x,fs=1.0,window=None,nfft=None,detrend='constant',return_onesided=True,scaling='density',axis=-1)
scipy.signal.spectral.periodogram(x,fs=1.0,window=None,nfft=None,detrend='constant',return_onesided=True,scaling='density',axis=-1)
scipy.signal.spectral.welch(x,fs=1.0,window='hanning',nperseg=256,noverlap=None,nfft=None,detrend='constant',return_onesided=True,scaling='density',axis=-1)
scipy.signal.welch(x,fs=1.0,window='hanning',nperseg=256,noverlap=None,nfft=None,detrend='constant',return_onesided=True,scaling='density',axis=-1)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/fir_filter_design.py----------------------------------------
A:scipy.signal.fir_filter_design.A->abs(ripple)
A:scipy.signal.fir_filter_design.beta->kaiser_beta(atten)
A:scipy.signal.fir_filter_design.atten->kaiser_atten(numtaps, float(width) / nyq)
A:scipy.signal.fir_filter_design.cutoff->numpy.hstack(([0.0] * pass_zero, cutoff, [1.0] * pass_nyquist))
A:scipy.signal.fir_filter_design.bands->numpy.asarray(bands).copy()
A:scipy.signal.fir_filter_design.win->get_window(window, numtaps, fftbins=False)
A:scipy.signal.fir_filter_design.c->numpy.cos(np.pi * m * scale_frequency)
A:scipy.signal.fir_filter_design.s->numpy.sum(h * c)
A:scipy.signal.fir_filter_design.d->numpy.diff(freq)
A:scipy.signal.fir_filter_design.x->numpy.linspace(0.0, nyq, nfreqs)
A:scipy.signal.fir_filter_design.fx->numpy.interp(x, freq, gain)
A:scipy.signal.fir_filter_design.shift->numpy.exp(-(numtaps - 1) / 2.0 * 1j * np.pi * x / nyq)
A:scipy.signal.fir_filter_design.out_full->irfft(fx2)
A:scipy.signal.fir_filter_design.wind->get_window(window, numtaps, fftbins=False)
scipy.signal.fir_filter_design.firwin(numtaps,cutoff,width=None,window='hamming',pass_zero=True,scale=True,nyq=1.0)
scipy.signal.fir_filter_design.firwin2(numtaps,freq,gain,nfreqs=None,window='hamming',nyq=1.0,antisymmetric=False)
scipy.signal.fir_filter_design.kaiser_atten(numtaps,width)
scipy.signal.fir_filter_design.kaiser_beta(a)
scipy.signal.fir_filter_design.kaiserord(ripple,width)
scipy.signal.fir_filter_design.remez(numtaps,bands,desired,weight=None,Hz=1,type='bandpass',maxiter=25,grid_density=16)
scipy.signal.firwin(numtaps,cutoff,width=None,window='hamming',pass_zero=True,scale=True,nyq=1.0)
scipy.signal.firwin2(numtaps,freq,gain,nfreqs=None,window='hamming',nyq=1.0,antisymmetric=False)
scipy.signal.kaiser_atten(numtaps,width)
scipy.signal.kaiser_beta(a)
scipy.signal.kaiserord(ripple,width)
scipy.signal.remez(numtaps,bands,desired,weight=None,Hz=1,type='bandpass',maxiter=25,grid_density=16)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/filter_design.py----------------------------------------
A:scipy.signal.filter_design.hfreq->numpy.around(numpy.log10(numpy.max(3 * abs(ez.real + integ) + 1.5 * ez.imag)) + 0.5)
A:scipy.signal.filter_design.lfreq->numpy.around(numpy.log10(0.1 * numpy.min(abs(real(ez + integ)) + 2 * ez.imag)) - 0.5)
A:scipy.signal.filter_design.w->atleast_1d(w)
A:scipy.signal.filter_design.(b, a)->bilinear(b, a, fs=fs)
A:scipy.signal.filter_design.zm1->exp(-1j * w)
A:scipy.signal.filter_design.z->numpy.concatenate((z, conjugate(z)))
A:scipy.signal.filter_design.p->numpy.concatenate((p, conjugate(p)))
A:scipy.signal.filter_design.k->scipy.special.ellipk([m, 1 - m])
A:scipy.signal.filter_design.temp->poly(z[0])
A:scipy.signal.filter_design.b->asarray([b], b.dtype.char)
A:scipy.signal.filter_design.a->atleast_1d(poly(p))
A:scipy.signal.filter_design.(a, b)->map(atleast_1d, (a, b))
A:scipy.signal.filter_design.wo->sqrt(warped[0] * warped[1])
A:scipy.signal.filter_design.d->len(a)
A:scipy.signal.filter_design.n->numpy.arange(1, 2 * N, 2)
A:scipy.signal.filter_design.M->max([N, D])
A:scipy.signal.filter_design.pwo->numpy.ones(max((d, n)), b.dtype.char)
A:scipy.signal.filter_design.start1->max((n - d, 0))
A:scipy.signal.filter_design.start2->max((d - n, 0))
A:scipy.signal.filter_design.outb->resize(b, (d,))
A:scipy.signal.filter_design.outa->resize(a, (n,))
A:scipy.signal.filter_design.artype->mintypecode((a, b))
A:scipy.signal.filter_design.ma->max([N, D])
A:scipy.signal.filter_design.bprime->numpy.zeros(Np + 1, artype)
A:scipy.signal.filter_design.aprime->numpy.zeros(Dp + 1, artype)
A:scipy.signal.filter_design.fs->float(fs)
A:scipy.signal.filter_design.bprime[j]->real(val)
A:scipy.signal.filter_design.aprime[j]->real(val)
A:scipy.signal.filter_design.wp->atleast_1d(wp)
A:scipy.signal.filter_design.ws->atleast_1d(ws)
A:scipy.signal.filter_design.(N, Wn)->ordfunc(wp, ws, gpass, gstop, analog=analog)
A:scipy.signal.filter_design.Wn->asarray(Wn)
A:scipy.signal.filter_design.(z, p, k)->typefunc(N, rp, rs)
A:scipy.signal.filter_design.passbC->tan(wp * pi / 2.0).copy()
A:scipy.signal.filter_design.nat->min(abs(nat))
A:scipy.signal.filter_design.arg1->sqrt((GPASS - 1.0) / (GSTOP - 1.0))
A:scipy.signal.filter_design.d0->scipy.special.ellipk([arg0 ** 2, 1 - arg0 ** 2])
A:scipy.signal.filter_design.d1->scipy.special.ellipk([arg1 ** 2, 1 - arg1 ** 2])
A:scipy.signal.filter_design.passb->tan(wp * pi / 2.0)
A:scipy.signal.filter_design.stopb->tan(ws * pi / 2.0)
A:scipy.signal.filter_design.wp0->scipy.optimize.fminbound(band_stop_obj, passb[0], stopb[0] - 1e-12, args=(0, passb, stopb, gpass, gstop, 'ellip'), disp=0)
A:scipy.signal.filter_design.wp1->scipy.optimize.fminbound(band_stop_obj, stopb[1] + 1e-12, passb[1], args=(1, passb, stopb, gpass, gstop, 'ellip'), disp=0)
A:scipy.signal.filter_design.ord->int(ceil(d0[0] * d1[1] / (d0[1] * d1[0])))
A:scipy.signal.filter_design.WN->numpy.sort(abs(WN))
A:scipy.signal.filter_design.discr->sqrt((passb[1] - passb[0]) ** 2 + 4 * W0 ** 2 * passb[0] * passb[1])
A:scipy.signal.filter_design.W0->numpy.array([-W0, W0], float)
A:scipy.signal.filter_design.new_freq->cosh(1.0 / ord * arccosh(sqrt((GSTOP - 1.0) / (GPASS - 1.0))))
A:scipy.signal.filter_design.eps->numpy.sqrt(10 ** (0.1 * rp) - 1)
A:scipy.signal.filter_design.[s, c, d, phi]->scipy.special.ellipj(j * capk / N, m * numpy.ones(jj))
A:scipy.signal.filter_design.ret->abs(ineps - s / c)
A:scipy.signal.filter_design.m->scipy.optimize.fminbound(_kratio, 0, 1, args=(krat,), maxfun=250, maxiter=250, disp=0)
A:scipy.signal.filter_design.ck1p->numpy.sqrt(1 - ck1 * ck1)
A:scipy.signal.filter_design.val->scipy.special.ellipk([ck1 * ck1, ck1p * ck1p])
A:scipy.signal.filter_design.capk->scipy.special.ellipk(m)
A:scipy.signal.filter_design.j->numpy.arange(1 - N % 2, N, 2)
A:scipy.signal.filter_design.jj->len(j)
A:scipy.signal.filter_design.snew->numpy.compress(abs(s) > EPSILON, s, axis=-1)
A:scipy.signal.filter_design.r->scipy.optimize.fmin(_vratio, special.ellipk(m), args=(1.0 / eps, ck1p * ck1p), maxfun=250, maxiter=250, disp=0)
A:scipy.signal.filter_design.[sv, cv, dv, phi]->scipy.special.ellipj(v0, 1 - m)
A:scipy.signal.filter_design.newp->numpy.compress(abs(p.imag) > EPSILON * numpy.sqrt(numpy.sum(p * numpy.conjugate(p), axis=0).real), p, axis=-1)
scipy.signal.BadCoefficients(UserWarning)
scipy.signal._kratio(m,k_ratio)
scipy.signal._vratio(u,ineps,mp)
scipy.signal.band_stop_obj(wp,ind,passb,stopb,gpass,gstop,type)
scipy.signal.bessel(N,Wn,btype='low',analog=False,output='ba')
scipy.signal.besselap(N)
scipy.signal.bilinear(b,a,fs=1.0)
scipy.signal.buttap(N)
scipy.signal.butter(N,Wn,btype='low',analog=False,output='ba')
scipy.signal.buttord(wp,ws,gpass,gstop,analog=False)
scipy.signal.cheb1ap(N,rp)
scipy.signal.cheb1ord(wp,ws,gpass,gstop,analog=False)
scipy.signal.cheb2ap(N,rs)
scipy.signal.cheb2ord(wp,ws,gpass,gstop,analog=False)
scipy.signal.cheby1(N,rp,Wn,btype='low',analog=False,output='ba')
scipy.signal.cheby2(N,rs,Wn,btype='low',analog=False,output='ba')
scipy.signal.ellip(N,rp,rs,Wn,btype='low',analog=False,output='ba')
scipy.signal.ellipap(N,rp,rs)
scipy.signal.ellipord(wp,ws,gpass,gstop,analog=False)
scipy.signal.filter_design.BadCoefficients(UserWarning)
scipy.signal.filter_design._kratio(m,k_ratio)
scipy.signal.filter_design._vratio(u,ineps,mp)
scipy.signal.filter_design.band_stop_obj(wp,ind,passb,stopb,gpass,gstop,type)
scipy.signal.filter_design.bessel(N,Wn,btype='low',analog=False,output='ba')
scipy.signal.filter_design.besselap(N)
scipy.signal.filter_design.bilinear(b,a,fs=1.0)
scipy.signal.filter_design.buttap(N)
scipy.signal.filter_design.butter(N,Wn,btype='low',analog=False,output='ba')
scipy.signal.filter_design.buttord(wp,ws,gpass,gstop,analog=False)
scipy.signal.filter_design.cheb1ap(N,rp)
scipy.signal.filter_design.cheb1ord(wp,ws,gpass,gstop,analog=False)
scipy.signal.filter_design.cheb2ap(N,rs)
scipy.signal.filter_design.cheb2ord(wp,ws,gpass,gstop,analog=False)
scipy.signal.filter_design.cheby1(N,rp,Wn,btype='low',analog=False,output='ba')
scipy.signal.filter_design.cheby2(N,rs,Wn,btype='low',analog=False,output='ba')
scipy.signal.filter_design.ellip(N,rp,rs,Wn,btype='low',analog=False,output='ba')
scipy.signal.filter_design.ellipap(N,rp,rs)
scipy.signal.filter_design.ellipord(wp,ws,gpass,gstop,analog=False)
scipy.signal.filter_design.findfreqs(num,den,N)
scipy.signal.filter_design.freqs(b,a,worN=None,plot=None)
scipy.signal.filter_design.freqz(b,a=1,worN=None,whole=0,plot=None)
scipy.signal.filter_design.iirdesign(wp,ws,gpass,gstop,analog=False,ftype='ellip',output='ba')
scipy.signal.filter_design.iirfilter(N,Wn,rp=None,rs=None,btype='band',analog=False,ftype='butter',output='ba')
scipy.signal.filter_design.lp2bp(b,a,wo=1.0,bw=1.0)
scipy.signal.filter_design.lp2bs(b,a,wo=1,bw=1)
scipy.signal.filter_design.lp2hp(b,a,wo=1.0)
scipy.signal.filter_design.lp2lp(b,a,wo=1.0)
scipy.signal.filter_design.maxflat()
scipy.signal.filter_design.normalize(b,a)
scipy.signal.filter_design.tf2zpk(b,a)
scipy.signal.filter_design.yulewalk()
scipy.signal.filter_design.zpk2tf(z,p,k)
scipy.signal.findfreqs(num,den,N)
scipy.signal.freqs(b,a,worN=None,plot=None)
scipy.signal.freqz(b,a=1,worN=None,whole=0,plot=None)
scipy.signal.iirdesign(wp,ws,gpass,gstop,analog=False,ftype='ellip',output='ba')
scipy.signal.iirfilter(N,Wn,rp=None,rs=None,btype='band',analog=False,ftype='butter',output='ba')
scipy.signal.lp2bp(b,a,wo=1.0,bw=1.0)
scipy.signal.lp2bs(b,a,wo=1,bw=1)
scipy.signal.lp2hp(b,a,wo=1.0)
scipy.signal.lp2lp(b,a,wo=1.0)
scipy.signal.maxflat()
scipy.signal.normalize(b,a)
scipy.signal.tf2zpk(b,a)
scipy.signal.yulewalk()
scipy.signal.zpk2tf(z,p,k)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/ltisys.py----------------------------------------
A:scipy.signal.ltisys.(num, den)->normalize(num, den)
A:scipy.signal.ltisys.nn->len(num.shape)
A:scipy.signal.ltisys.num->numpy.zeros((nout, num_states + 1), type_test.dtype)
A:scipy.signal.ltisys.K->len(den)
A:scipy.signal.ltisys.D->zeros(MD, ND)
A:scipy.signal.ltisys.B->B.squeeze().squeeze()
A:scipy.signal.ltisys.(A, B, C, D)->abcd_normalize(A, B, C, D)
A:scipy.signal.ltisys.C->zeros((MC, NC))
A:scipy.signal.ltisys.A->zeros(MA, NA)
A:scipy.signal.ltisys.den->poly(A)
A:scipy.signal.ltisys.Ck->atleast_2d(C[k, :])
A:scipy.signal.ltisys.N->len(args)
A:scipy.signal.ltisys.(self.__dict__['num'], self.__dict__['den'])->ss2tf(self.A, self.B, self.C, self.D)
A:scipy.signal.ltisys.(self.__dict__['zeros'], self.__dict__['poles'], self.__dict__['gain'])->ss2zpk(self.A, self.B, self.C, self.D)
A:scipy.signal.ltisys.(self.__dict__['A'], self.__dict__['B'], self.__dict__['C'], self.__dict__['D'])->zpk2ss(self.zeros, self.poles, self.gain)
A:scipy.signal.ltisys.self.zeros->numpy.asarray(self.zeros)
A:scipy.signal.ltisys.self.poles->numpy.asarray(self.poles)
A:scipy.signal.ltisys.sys->lti(*system)
A:scipy.signal.ltisys.X0->zeros_like(B)
A:scipy.signal.ltisys.T->_default_response_times(sys.A, N)
A:scipy.signal.ltisys.U->ones(T.shape, sys.A.dtype)
A:scipy.signal.ltisys.ufunc->scipy.interpolate.interp1d(T, U, kind='linear', axis=0, bounds_error=False)
A:scipy.signal.ltisys.xout->zeros((len(T), sys.B.shape[0]), sys.A.dtype)
A:scipy.signal.ltisys.yout->dot(sys.C, transpose(xout))
A:scipy.signal.ltisys.(lam, v)->scipy.linalg.eig(A)
A:scipy.signal.ltisys.vt->transpose(v)
A:scipy.signal.ltisys.vti->scipy.linalg.inv(vt)
A:scipy.signal.ltisys.GT->dot(dot(vti, diag(numpy.exp(dt * lam))), vt).astype(xout.dtype)
A:scipy.signal.ltisys.ATm1->scipy.linalg.inv(AT)
A:scipy.signal.ltisys.ATm2->dot(ATm1, ATm1)
A:scipy.signal.ltisys.I->eye(A.shape[0], dtype=A.dtype)
A:scipy.signal.ltisys.F1T->dot(dot(BT, GTmI), ATm1)
A:scipy.signal.ltisys.F2T->dot(BT, dot(GTmI, ATm2) / dt - ATm1)
A:scipy.signal.ltisys.vals->lsim2(sys, U, T, X0=X0, **kwargs)
A:scipy.signal.ltisys.r->min(abs(real(vals)))
A:scipy.signal.ltisys.t->linspace(0.0, 7 * tc, n)
A:scipy.signal.ltisys.minpole->min(abs(real(poles)))
A:scipy.signal.ltisys.maxpole->max(abs(real(poles)))
A:scipy.signal.ltisys.w->numpy.asarray(w)
A:scipy.signal.ltisys.h->zeros(T.shape, sys.A.dtype)
A:scipy.signal.ltisys.(s, v)->scipy.linalg.eig(sys.A)
A:scipy.signal.ltisys.vi->scipy.linalg.inv(v)
A:scipy.signal.ltisys.es->diag(numpy.exp(s * T[k]))
A:scipy.signal.ltisys.eA->dot(dot(v, es), vi).astype(h.dtype)
A:scipy.signal.ltisys.h[k]->squeeze(dot(dot(C, eA), B))
A:scipy.signal.ltisys.(Tr, Yr, Xr)->lsim2(sys, U, T, ic, **kwargs)
scipy.signal._default_response_frequencies(A,n)
scipy.signal._default_response_times(A,n)
scipy.signal._none_to_empty(arg)
scipy.signal.abcd_normalize(A=None,B=None,C=None,D=None)
scipy.signal.bode(system,w=None,n=100)
scipy.signal.freqresp(system,w=None,n=10000)
scipy.signal.impulse(system,X0=None,T=None,N=None)
scipy.signal.impulse2(system,X0=None,T=None,N=None,**kwargs)
scipy.signal.lsim(system,U,T,X0=None,interp=1)
scipy.signal.lsim2(system,U=None,T=None,X0=None,**kwargs)
scipy.signal.lti(self,*args,**kwords)
scipy.signal.lti.__setattr__(self,attr,val)
scipy.signal.lti.bode(self,w=None,n=100)
scipy.signal.lti.freqresp(self,w=None,n=10000)
scipy.signal.lti.impulse(self,X0=None,T=None,N=None)
scipy.signal.lti.output(self,U,T,X0=None)
scipy.signal.lti.step(self,X0=None,T=None,N=None)
scipy.signal.ltisys._default_response_frequencies(A,n)
scipy.signal.ltisys._default_response_times(A,n)
scipy.signal.ltisys._none_to_empty(arg)
scipy.signal.ltisys.abcd_normalize(A=None,B=None,C=None,D=None)
scipy.signal.ltisys.bode(system,w=None,n=100)
scipy.signal.ltisys.freqresp(system,w=None,n=10000)
scipy.signal.ltisys.impulse(system,X0=None,T=None,N=None)
scipy.signal.ltisys.impulse2(system,X0=None,T=None,N=None,**kwargs)
scipy.signal.ltisys.lsim(system,U,T,X0=None,interp=1)
scipy.signal.ltisys.lsim2(system,U=None,T=None,X0=None,**kwargs)
scipy.signal.ltisys.lti(self,*args,**kwords)
scipy.signal.ltisys.lti.__init__(self,*args,**kwords)
scipy.signal.ltisys.lti.__setattr__(self,attr,val)
scipy.signal.ltisys.lti.bode(self,w=None,n=100)
scipy.signal.ltisys.lti.freqresp(self,w=None,n=10000)
scipy.signal.ltisys.lti.impulse(self,X0=None,T=None,N=None)
scipy.signal.ltisys.lti.output(self,U,T,X0=None)
scipy.signal.ltisys.lti.step(self,X0=None,T=None,N=None)
scipy.signal.ltisys.ss2tf(A,B,C,D,input=0)
scipy.signal.ltisys.ss2zpk(A,B,C,D,input=0)
scipy.signal.ltisys.step(system,X0=None,T=None,N=None)
scipy.signal.ltisys.step2(system,X0=None,T=None,N=None,**kwargs)
scipy.signal.ltisys.tf2ss(num,den)
scipy.signal.ltisys.zpk2ss(z,p,k)
scipy.signal.ss2tf(A,B,C,D,input=0)
scipy.signal.ss2zpk(A,B,C,D,input=0)
scipy.signal.step(system,X0=None,T=None,N=None)
scipy.signal.step2(system,X0=None,T=None,N=None,**kwargs)
scipy.signal.tf2ss(num,den)
scipy.signal.zpk2ss(z,p,k)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/setup.py----------------------------------------
A:scipy.signal.setup.config->Configuration('signal', parent_package, top_path)
scipy.signal.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/waveforms.py----------------------------------------
A:scipy.signal.waveforms.w->asarray(w + (t - t))
A:scipy.signal.waveforms.t->asarray(t + (w - w))
A:scipy.signal.waveforms.y->zeros(t.shape, ytype)
A:scipy.signal.waveforms.tmod->mod(t, 2 * pi)
A:scipy.signal.waveforms.tsub->extract(mask3, tmod)
A:scipy.signal.waveforms.wsub->extract(mask3, w)
A:scipy.signal.waveforms.ref->pow(10.0, bwr / 20.0)
A:scipy.signal.waveforms.tref->pow(10.0, tpr / 20.0)
A:scipy.signal.waveforms.yenv->exp(-a * t * t)
A:scipy.signal.waveforms.phase->_sweep_poly_phase(t, poly)
A:scipy.signal.waveforms.f0->float(f0)
A:scipy.signal.waveforms.t1->float(t1)
A:scipy.signal.waveforms.f1->float(f1)
A:scipy.signal.waveforms.intpoly->polyint(poly)
scipy.signal._chirp_phase(t,f0,t1,f1,method='linear',vertex_zero=True)
scipy.signal._sweep_poly_phase(t,poly)
scipy.signal.chirp(t,f0,t1,f1,method='linear',phi=0,vertex_zero=True)
scipy.signal.gausspulse(t,fc=1000,bw=0.5,bwr=-6,tpr=-60,retquad=False,retenv=False)
scipy.signal.sawtooth(t,width=1)
scipy.signal.square(t,duty=0.5)
scipy.signal.sweep_poly(t,poly,phi=0)
scipy.signal.waveforms._chirp_phase(t,f0,t1,f1,method='linear',vertex_zero=True)
scipy.signal.waveforms._sweep_poly_phase(t,poly)
scipy.signal.waveforms.chirp(t,f0,t1,f1,method='linear',phi=0,vertex_zero=True)
scipy.signal.waveforms.gausspulse(t,fc=1000,bw=0.5,bwr=-6,tpr=-60,retquad=False,retenv=False)
scipy.signal.waveforms.sawtooth(t,width=1)
scipy.signal.waveforms.square(t,duty=0.5)
scipy.signal.waveforms.sweep_poly(t,poly,phi=0)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/wavelets.py----------------------------------------
A:scipy.signal.wavelets.c->sqrt(3)
A:scipy.signal.wavelets.z1c->numpy.conj(z1)
A:scipy.signal.wavelets.d0->numpy.real((1 - z1) * (1 - z1c))
A:scipy.signal.wavelets.a0->numpy.real(z1 * z1c)
A:scipy.signal.wavelets.yj->numpy.roots(P)
A:scipy.signal.wavelets.q->numpy.poly1d([1])
A:scipy.signal.wavelets.gk->qmf(hk)
A:scipy.signal.wavelets.s2->numpy.sqrt(2)
A:scipy.signal.wavelets.indx1->numpy.clip(2 * nn - kk, -1, N + 1)
A:scipy.signal.wavelets.indx2->numpy.clip(2 * nn - kk + 1, -1, N + 1)
A:scipy.signal.wavelets.m->numpy.zeros((2, 2, N, N), 'd')
A:scipy.signal.wavelets.m[0, 0]->numpy.take(thk, indx1, 0)
A:scipy.signal.wavelets.m[0, 1]->numpy.take(thk, indx2, 0)
A:scipy.signal.wavelets.m[1, 0]->numpy.take(tgk, indx1, 0)
A:scipy.signal.wavelets.m[1, 1]->numpy.take(tgk, indx2, 0)
A:scipy.signal.wavelets.(lam, v)->eig(m[0, 0])
A:scipy.signal.wavelets.ind->numpy.argmin(np.absolute(lam - 1))
A:scipy.signal.wavelets.v->numpy.real(v[:, ind])
A:scipy.signal.wavelets.sm->numpy.sum(v)
A:scipy.signal.wavelets.bitdic['1']->numpy.dot(m[0, 1], bitdic['0'])
A:scipy.signal.wavelets.psi[::step]->numpy.dot(m[1, 0], bitdic['0'])
A:scipy.signal.wavelets.psi[1 << J - 1::step]->numpy.dot(m[1, 1], bitdic['0'])
A:scipy.signal.wavelets.ii->int(key[0])
A:scipy.signal.wavelets.temp->numpy.dot(m[0, ii], pastphi)
A:scipy.signal.wavelets.psi[num * fac::step]->numpy.dot(m[1, ii], pastphi)
A:scipy.signal.wavelets.x->linspace(-s * 2 * pi, s * 2 * pi, M)
A:scipy.signal.wavelets.output->numpy.zeros([len(widths), len(data)])
A:scipy.signal.wavelets.gauss->numpy.exp(-tsq / (2 * wsq))
A:scipy.signal.wavelets.wavelet_data->wavelet(min(10 * width, len(data)), width)
A:scipy.signal.wavelets.output[ind, :]->convolve(data, wavelet_data, mode='same')
scipy.signal.cascade(hk,J=7)
scipy.signal.cwt(data,wavelet,widths)
scipy.signal.daub(p)
scipy.signal.morlet(M,w=5.0,s=1.0,complete=True)
scipy.signal.qmf(hk)
scipy.signal.ricker(points,a)
scipy.signal.wavedec(amn,hk)
scipy.signal.wavelets.cascade(hk,J=7)
scipy.signal.wavelets.cwt(data,wavelet,widths)
scipy.signal.wavelets.daub(p)
scipy.signal.wavelets.morlet(M,w=5.0,s=1.0,complete=True)
scipy.signal.wavelets.qmf(hk)
scipy.signal.wavelets.ricker(points,a)
scipy.signal.wavelets.wavedec(amn,hk)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/_arraytools.py----------------------------------------
A:scipy.signal._arraytools.a_slice[axis]->slice(start, stop, step)
A:scipy.signal._arraytools.left_end->axis_slice(x, start=0, stop=1, axis=axis)
A:scipy.signal._arraytools.left_ext->axis_slice(x, start=n, stop=0, step=-1, axis=axis)
A:scipy.signal._arraytools.right_end->axis_slice(x, start=-1, axis=axis)
A:scipy.signal._arraytools.right_ext->axis_slice(x, start=-2, stop=-(n + 2), step=-1, axis=axis)
A:scipy.signal._arraytools.ext->numpy.concatenate((left_ext, x, right_ext), axis=axis)
A:scipy.signal._arraytools.ones->numpy.ones(ones_shape, dtype=x.dtype)
scipy.signal._arraytools.axis_reverse(a,axis=-1)
scipy.signal._arraytools.axis_slice(a,start=None,stop=None,step=None,axis=-1)
scipy.signal._arraytools.const_ext(x,n,axis=-1)
scipy.signal._arraytools.even_ext(x,n,axis=-1)
scipy.signal._arraytools.odd_ext(x,n,axis=-1)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/tests/test_windows.py----------------------------------------
A:scipy.signal.tests.test_windows.cheb_odd_true->array([0.200938, 0.107729, 0.134941, 0.165348, 0.198891, 0.23545, 0.274846, 0.316836, 0.361119, 0.407338, 0.455079, 0.503883, 0.553248, 0.602637, 0.651489, 0.699227, 0.745266, 0.789028, 0.829947, 0.867485, 0.901138, 0.930448, 0.95501, 0.974482, 0.988591, 0.997138, 1.0, 0.997138, 0.988591, 0.974482, 0.95501, 0.930448, 0.901138, 0.867485, 0.829947, 0.789028, 0.745266, 0.699227, 0.651489, 0.602637, 0.553248, 0.503883, 0.455079, 0.407338, 0.361119, 0.316836, 0.274846, 0.23545, 0.198891, 0.165348, 0.134941, 0.107729, 0.200938])
A:scipy.signal.tests.test_windows.cheb_even_true->array([0.203894, 0.107279, 0.133904, 0.163608, 0.196338, 0.231986, 0.270385, 0.311313, 0.354493, 0.399594, 0.446233, 0.493983, 0.542378, 0.590916, 0.639071, 0.686302, 0.732055, 0.775783, 0.816944, 0.855021, 0.889525, 0.920006, 0.94606, 0.967339, 0.983557, 0.994494, 1.0, 1.0, 0.994494, 0.983557, 0.967339, 0.94606, 0.920006, 0.889525, 0.855021, 0.816944, 0.775783, 0.732055, 0.686302, 0.639071, 0.590916, 0.542378, 0.493983, 0.446233, 0.399594, 0.354493, 0.311313, 0.270385, 0.231986, 0.196338, 0.163608, 0.133904, 0.107279, 0.203894])
A:scipy.signal.tests.test_windows.cheb_odd->scipy.signal.chebwin(53, at=-40)
A:scipy.signal.tests.test_windows.cheb_even->scipy.signal.chebwin(54, at=-40)
A:scipy.signal.tests.test_windows.w->scipy.signal.get_window(('chebwin', -40), 54, fftbins=False)
scipy.signal.tests.test_TestChebWin(object)
scipy.signal.tests.test_TestChebWin.test_cheb_even(self)
scipy.signal.tests.test_TestChebWin.test_cheb_odd(self)
scipy.signal.tests.test_TestGetWindow(object)
scipy.signal.tests.test_TestGetWindow.test_boxcar(self)
scipy.signal.tests.test_TestGetWindow.test_cheb_even(self)
scipy.signal.tests.test_TestGetWindow.test_cheb_odd(self)
scipy.signal.tests.test_windows.TestChebWin(object)
scipy.signal.tests.test_windows.TestChebWin.test_cheb_even(self)
scipy.signal.tests.test_windows.TestChebWin.test_cheb_odd(self)
scipy.signal.tests.test_windows.TestGetWindow(object)
scipy.signal.tests.test_windows.TestGetWindow.test_boxcar(self)
scipy.signal.tests.test_windows.TestGetWindow.test_cheb_even(self)
scipy.signal.tests.test_windows.TestGetWindow.test_cheb_odd(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/tests/test_dltisys.py----------------------------------------
A:scipy.signal.tests.test_dltisys.a->numpy.array([[lambda1, 0.0], [0.0, lambda2]])
A:scipy.signal.tests.test_dltisys.b->numpy.array([[1.0, 0.0], [0.0, 1.0]])
A:scipy.signal.tests.test_dltisys.c->numpy.array([[1.0, 1.0]])
A:scipy.signal.tests.test_dltisys.d->numpy.array([[0.0, 0.0]])
A:scipy.signal.tests.test_dltisys.u->numpy.zeros(n).reshape(-1, 1)
A:scipy.signal.tests.test_dltisys.t_in->numpy.linspace(0, 2.0, num=5)
A:scipy.signal.tests.test_dltisys.yout_truth->numpy.asmatrix([0.0, 1.0, 2.0, 2.25, 2.5]).transpose()
A:scipy.signal.tests.test_dltisys.xout_truth->numpy.asarray([[0, 0], [0.0012, 0.0005], [0.40233, 0.00071], [1.163368, -0.079327], [2.2402985, -0.3035679]])
A:scipy.signal.tests.test_dltisys.(tout, yout, xout)->dlsim((a, b, c, d, 1), u, x0=1)
A:scipy.signal.tests.test_dltisys.t_sparse->numpy.asarray([0.0, 2.0])
A:scipy.signal.tests.test_dltisys.num->numpy.asarray([1.0, -0.1])
A:scipy.signal.tests.test_dltisys.den->numpy.asarray([0.3, 1.0, 0.2])
A:scipy.signal.tests.test_dltisys.(tout, yout)->dimpulse(zpkin, n=3)
A:scipy.signal.tests.test_dltisys.uflat->uflat.reshape((5,)).reshape((5,))
A:scipy.signal.tests.test_dltisys.zd->numpy.array([0.5, -0.5])
A:scipy.signal.tests.test_dltisys.pd->numpy.array([1j / np.sqrt(2), -1j / np.sqrt(2)])
A:scipy.signal.tests.test_dltisys.yout_tfstep->numpy.asarray([0.0, 1.0, 0.0])
A:scipy.signal.tests.test_dltisys.yout_tfimpulse->numpy.asarray([0.0, 1.0, -1.0])
A:scipy.signal.tests.test_dltisys.expected->(0.5 ** np.arange(float(n))).reshape(-1, 1)
A:scipy.signal.tests.test_dltisys.(ts, ys)->dstep((a, b, c, d, 1), n=n)
A:scipy.signal.tests.test_dltisys.x0->numpy.array([1.0, 1.0])
A:scipy.signal.tests.test_dltisys.(ti, yi)->dimpulse((a, b, c, d, 1), n=n, x0=x0)
scipy.signal.tests.test_dTestDLTI(TestCase)
scipy.signal.tests.test_dTestDLTI.test_dimpulse(self)
scipy.signal.tests.test_dTestDLTI.test_dlsim(self)
scipy.signal.tests.test_dTestDLTI.test_dlsim_simple1d(self)
scipy.signal.tests.test_dTestDLTI.test_dlsim_simple2d(self)
scipy.signal.tests.test_dTestDLTI.test_dlsim_trivial(self)
scipy.signal.tests.test_dTestDLTI.test_dstep(self)
scipy.signal.tests.test_dTestDLTI.test_more_step_and_impulse(self)
scipy.signal.tests.test_dltisys.TestDLTI(TestCase)
scipy.signal.tests.test_dltisys.TestDLTI.test_dimpulse(self)
scipy.signal.tests.test_dltisys.TestDLTI.test_dlsim(self)
scipy.signal.tests.test_dltisys.TestDLTI.test_dlsim_simple1d(self)
scipy.signal.tests.test_dltisys.TestDLTI.test_dlsim_simple2d(self)
scipy.signal.tests.test_dltisys.TestDLTI.test_dlsim_trivial(self)
scipy.signal.tests.test_dltisys.TestDLTI.test_dstep(self)
scipy.signal.tests.test_dltisys.TestDLTI.test_more_step_and_impulse(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/tests/test_signaltools.py----------------------------------------
A:scipy.signal.tests.test_signaltools.c->fftconvolve(a, b, 'full')
A:scipy.signal.tests.test_signaltools.x->numpy.arange(16).reshape(4, 4)
A:scipy.signal.tests.test_signaltools.y->filtfilt(b, a, x, padlen=n)
A:scipy.signal.tests.test_signaltools.z->numpy.zeros((10, 10))
A:scipy.signal.tests.test_signaltools.a->numpy.arange(18).reshape(3, 6)
A:scipy.signal.tests.test_signaltools.b->numpy.array([1.0, 0.0, 2.0])
A:scipy.signal.tests.test_signaltools.d->scipy.signal.medfilt(f, [7, 3])
A:scipy.signal.tests.test_signaltools.e->scipy.signal.medfilt2d(np.array(f, np.float), [7, 3])
A:scipy.signal.tests.test_signaltools.g->array([[5, 6, 4, 3], [3, 5, 6, 2], [2, 3, 5, 6], [1, 6, 9, 7]], 'd')
A:scipy.signal.tests.test_signaltools.h->hilbert(a)
A:scipy.signal.tests.test_signaltools.dummy->numpy.arange(10, dtype=np.float64)
A:scipy.signal.tests.test_signaltools.cj->scipy.signal.cspline1d(y)
A:scipy.signal.tests.test_signaltools.y2->filtfilt(b, a, np.swapaxes(x, 0, 2), padlen=0, axis=2)
A:scipy.signal.tests.test_signaltools.y_r->(correlate(a.real, b.real) + correlate(a.imag, b.imag)).astype(self.dt)
A:scipy.signal.tests.test_signaltools.zi->lfilter_zi(b, a)
A:scipy.signal.tests.test_signaltools.zf_r->numpy.array([[-23, -23, -23]], dtype=self.dt)
A:scipy.signal.tests.test_signaltools.(y, zf)->lfilter(b, a, x, zi=zi)
A:scipy.signal.tests.test_signaltools.y_r2_a0->numpy.array([[0, 2, 4], [6, 4, 2], [0, 2, 4], [6, 4, 2]], dtype=self.dt)
A:scipy.signal.tests.test_signaltools.y_r2_a1->numpy.array([[0, 2, 0], [6, -4, 6], [12, -10, 12], [18, -16, 18]], dtype=self.dt)
A:scipy.signal.tests.test_signaltools.y_r2_a0_1->numpy.array([[1, 1, 1], [7, -5, 7], [13, -11, 13], [19, -17, 19]], dtype=self.dt)
A:scipy.signal.tests.test_signaltools.y_r2_a0_0->numpy.array([[1, 3, 5], [5, 3, 1], [1, 3, 5], [5, 3, 1]], dtype=self.dt)
A:scipy.signal.tests.test_signaltools.dt->numpy.dtype(Decimal)
A:scipy.signal.tests.test_signaltools.(a, b, y_r)->self._setup_rank1('full')
A:scipy.signal.tests.test_signaltools.cls->_get_testcorrelate_class(datatype, _TestCorrelateComplex)
A:scipy.signal.tests.test_signaltools.cls.decimal->int(2 * np.finfo(datatype).precision / 3)
A:scipy.signal.tests.test_signaltools.zi_expected->numpy.array([5.0, -1.0])
A:scipy.signal.tests.test_signaltools.out->scipy.signal.filtfilt([1, 2, 3], [1, 2, 3], np.arange(12))
A:scipy.signal.tests.test_signaltools.t->numpy.arange(0, 2 * pi, pi / 256)
A:scipy.signal.tests.test_signaltools.xlow->numpy.sin(5 * 2 * np.pi * t)
A:scipy.signal.tests.test_signaltools.xhigh->numpy.sin(250 * 2 * np.pi * t)
A:scipy.signal.tests.test_signaltools.(b, a)->butter(3, 0.125)
A:scipy.signal.tests.test_signaltools.(z, p, k)->tf2zpk(b, a)
A:scipy.signal.tests.test_signaltools.r->numpy.abs(p).max()
A:scipy.signal.tests.test_signaltools.n->int(np.ceil(np.log(eps) / np.log(r)))
A:scipy.signal.tests.test_signaltools.err->numpy.abs(y2d - xlow).max()
A:scipy.signal.tests.test_signaltools.x2d->numpy.vstack([xlow, xlow + xhigh])
A:scipy.signal.tests.test_signaltools.y2d->filtfilt(b, a, x2d, padlen=n, axis=1)
A:scipy.signal.tests.test_signaltools.y2dt->filtfilt(b, a, x2d.T, padlen=n, axis=0)
A:scipy.signal.tests.test_signaltools.y0->filtfilt(b, a, x, padlen=0, axis=0)
A:scipy.signal.tests.test_signaltools.y1->filtfilt(b, a, np.swapaxes(x, 0, 1), padlen=0, axis=1)
A:scipy.signal.tests.test_signaltools.d0->scipy.signal.decimate(z, 2, axis=0)
A:scipy.signal.tests.test_signaltools.d1->scipy.signal.decimate(z, 2, axis=1)
A:scipy.signal.tests.test_signaltools.a0->numpy.sin(t)
A:scipy.signal.tests.test_signaltools.a1->numpy.cos(t)
A:scipy.signal.tests.test_signaltools.a2->numpy.sin(2 * t)
A:scipy.signal.tests.test_signaltools.a3->numpy.cos(2 * t)
A:scipy.signal.tests.test_signaltools.h_abs->numpy.abs(h)
A:scipy.signal.tests.test_signaltools.h_angle->numpy.angle(h)
A:scipy.signal.tests.test_signaltools.h_real->numpy.real(h)
A:scipy.signal.tests.test_signaltools.aa->hilbert(a, axis=-1)
A:scipy.signal.tests.test_signaltools.aan->hilbert(a, N=20, axis=-1)
A:scipy.signal.tests.test_signaltools.a0hilb->numpy.array([0.0 - 1.72015830311905j, 1.0 - 2.047794505137069j, 1.999999999999999 - 2.244055555687583j, 3.0 - 1.262750302935009j, 4.0 - 1.066489252384493j, 5.0 + 2.918022706971047j, 8.881784197001253e-17 + 3.845658908989067j, -9.444121133484362e-17 + 0.985044202202061j, -1.776356839400251e-16 + 1.332257797702019j, -3.996802888650564e-16 + 0.501905089898885j, 1.332267629550188e-16 + 0.668696078880782j, -1.192678053963799e-16 + 0.235487067862679j, -1.776356839400251e-16 + 0.286439612812121j, 3.108624468950438e-16 + 0.031676888064907j, 1.332267629550188e-16 - 0.019275656884536j, -2.360035624836702e-16 - 0.1652588660287j, 0.0 - 0.332049855010597j, 3.552713678800501e-16 - 0.403810179797771j, 8.881784197001253e-17 - 0.751023775297729j, 9.444121133484362e-17 - 0.79252210110103j])
scipy.signal.tests.test_TestCSpline1DEval(TestCase)
scipy.signal.tests.test_TestCSpline1DEval.test_basic(self)
scipy.signal.tests.test_TestConvolve(_TestConvolve)
scipy.signal.tests.test_TestConvolve.test_same_mode(self)
scipy.signal.tests.test_TestConvolve.test_valid_mode(self)
scipy.signal.tests.test_TestConvolve2d(_TestConvolve2d)
scipy.signal.tests.test_TestConvolve2d.test_consistency_convolve_funcs(self)
scipy.signal.tests.test_TestConvolve2d.test_same_mode(self)
scipy.signal.tests.test_TestConvolve2d.test_valid_mode2(self)
scipy.signal.tests.test_TestCorrelate2d(TestCase)
scipy.signal.tests.test_TestCorrelate2d.test_consistency_correlate_funcs(self)
scipy.signal.tests.test_TestDecimate
scipy.signal.tests.test_TestDecimate.test_basic(self)
scipy.signal.tests.test_TestDecimate.test_shape(self)
scipy.signal.tests.test_TestFFTConvolve(TestCase)
scipy.signal.tests.test_TestFFTConvolve.test_2d_complex_same(self)
scipy.signal.tests.test_TestFFTConvolve.test_2d_real_same(self)
scipy.signal.tests.test_TestFFTConvolve.test_complex(self)
scipy.signal.tests.test_TestFFTConvolve.test_empty(self)
scipy.signal.tests.test_TestFFTConvolve.test_random_data(self)
scipy.signal.tests.test_TestFFTConvolve.test_real(self)
scipy.signal.tests.test_TestFFTConvolve.test_real_same_mode(self)
scipy.signal.tests.test_TestFFTConvolve.test_real_same_mode2(self)
scipy.signal.tests.test_TestFFTConvolve.test_real_valid_mode(self)
scipy.signal.tests.test_TestFFTConvolve.test_real_valid_mode2(self)
scipy.signal.tests.test_TestFFTConvolve.test_single_element(self)
scipy.signal.tests.test_TestFFTConvolve.test_zero_rank(self)
scipy.signal.tests.test_TestFiltFilt(TestCase)
scipy.signal.tests.test_TestFiltFilt.test_axis(self)
scipy.signal.tests.test_TestFiltFilt.test_basic(self)
scipy.signal.tests.test_TestFiltFilt.test_sine(self)
scipy.signal.tests.test_TestHilbert(object)
scipy.signal.tests.test_TestHilbert.test_bad_args(self)
scipy.signal.tests.test_TestHilbert.test_hilbert_axisN(self)
scipy.signal.tests.test_TestHilbert.test_hilbert_theoretical(self)
scipy.signal.tests.test_TestHilbert2(object)
scipy.signal.tests.test_TestHilbert2.test_bad_args(self)
scipy.signal.tests.test_TestLFilterZI(TestCase)
scipy.signal.tests.test_TestLFilterZI.test_basic(self)
scipy.signal.tests.test_TestLinearFilterComplex128(_TestLinearFilter)
scipy.signal.tests.test_TestLinearFilterComplex64(_TestLinearFilter)
scipy.signal.tests.test_TestLinearFilterComplexxxiExtended28(_TestLinearFilter)
scipy.signal.tests.test_TestLinearFilterDecimal(_TestLinearFilter)
scipy.signal.tests.test_TestLinearFilterFloat32(_TestLinearFilter)
scipy.signal.tests.test_TestLinearFilterFloat64(_TestLinearFilter)
scipy.signal.tests.test_TestLinearFilterFloatExtended(_TestLinearFilter)
scipy.signal.tests.test_TestLinearFilterObject(_TestLinearFilter)
scipy.signal.tests.test_TestMedFilt(TestCase)
scipy.signal.tests.test_TestMedFilt.test_basic(self)
scipy.signal.tests.test_TestMedFilt.test_none(self)
scipy.signal.tests.test_TestOrderFilt(TestCase)
scipy.signal.tests.test_TestOrderFilt.test_basic(self)
scipy.signal.tests.test_TestWiener(TestCase)
scipy.signal.tests.test_TestWiener.test_basic(self)
scipy.signal.tests.test__TestConvolve(TestCase)
scipy.signal.tests.test__TestConvolve.test_2d_arrays(self)
scipy.signal.tests.test__TestConvolve.test_basic(self)
scipy.signal.tests.test__TestConvolve.test_complex(self)
scipy.signal.tests.test__TestConvolve.test_single_element(self)
scipy.signal.tests.test__TestConvolve.test_valid_mode(self)
scipy.signal.tests.test__TestConvolve.test_zero_rank(self)
scipy.signal.tests.test__TestConvolve2d(TestCase)
scipy.signal.tests.test__TestConvolve2d.test_2d_arrays(self)
scipy.signal.tests.test__TestConvolve2d.test_fillvalue(self)
scipy.signal.tests.test__TestConvolve2d.test_sym_boundary(self)
scipy.signal.tests.test__TestConvolve2d.test_valid_mode(self)
scipy.signal.tests.test__TestConvolve2d.test_wrap_boundary(self)
scipy.signal.tests.test__TestCorrelateComplex(TestCase)
scipy.signal.tests.test__TestCorrelateComplex._setup_rank1(self,mode)
scipy.signal.tests.test__TestCorrelateComplex.test_rank1_full(self)
scipy.signal.tests.test__TestCorrelateComplex.test_rank1_same(self)
scipy.signal.tests.test__TestCorrelateComplex.test_rank1_valid(self)
scipy.signal.tests.test__TestCorrelateComplex.test_rank3(self)
scipy.signal.tests.test__TestCorrelateReal(TestCase)
scipy.signal.tests.test__TestCorrelateReal._setup_rank1(self)
scipy.signal.tests.test__TestCorrelateReal._setup_rank3(self)
scipy.signal.tests.test__TestCorrelateReal.test_rank1_full(self)
scipy.signal.tests.test__TestCorrelateReal.test_rank1_same(self)
scipy.signal.tests.test__TestCorrelateReal.test_rank1_valid(self)
scipy.signal.tests.test__TestCorrelateReal.test_rank3_all(self)
scipy.signal.tests.test__TestCorrelateReal.test_rank3_same(self)
scipy.signal.tests.test__TestCorrelateReal.test_rank3_valid(self)
scipy.signal.tests.test__TestLinearFilter(TestCase)
scipy.signal.tests.test__TestLinearFilter.test_empty_zi(self)
scipy.signal.tests.test__TestLinearFilter.test_rank1(self)
scipy.signal.tests.test__TestLinearFilter.test_rank2(self)
scipy.signal.tests.test__TestLinearFilter.test_rank2_init_cond_a0(self)
scipy.signal.tests.test__TestLinearFilter.test_rank2_init_cond_a1(self)
scipy.signal.tests.test__TestLinearFilter.test_rank3(self)
scipy.signal.tests.test__get_testcorrelate_class(datatype,base)
scipy.signal.tests.test_signaltools.TestCSpline1DEval(TestCase)
scipy.signal.tests.test_signaltools.TestCSpline1DEval.test_basic(self)
scipy.signal.tests.test_signaltools.TestConvolve(_TestConvolve)
scipy.signal.tests.test_signaltools.TestConvolve.test_same_mode(self)
scipy.signal.tests.test_signaltools.TestConvolve.test_valid_mode(self)
scipy.signal.tests.test_signaltools.TestConvolve2d(_TestConvolve2d)
scipy.signal.tests.test_signaltools.TestConvolve2d.test_consistency_convolve_funcs(self)
scipy.signal.tests.test_signaltools.TestConvolve2d.test_same_mode(self)
scipy.signal.tests.test_signaltools.TestConvolve2d.test_valid_mode2(self)
scipy.signal.tests.test_signaltools.TestCorrelate2d(TestCase)
scipy.signal.tests.test_signaltools.TestCorrelate2d.test_consistency_correlate_funcs(self)
scipy.signal.tests.test_signaltools.TestDecimate
scipy.signal.tests.test_signaltools.TestDecimate.test_basic(self)
scipy.signal.tests.test_signaltools.TestDecimate.test_shape(self)
scipy.signal.tests.test_signaltools.TestFFTConvolve(TestCase)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_2d_complex_same(self)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_2d_real_same(self)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_complex(self)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_empty(self)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_random_data(self)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_real(self)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_real_same_mode(self)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_real_same_mode2(self)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_real_valid_mode(self)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_real_valid_mode2(self)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_single_element(self)
scipy.signal.tests.test_signaltools.TestFFTConvolve.test_zero_rank(self)
scipy.signal.tests.test_signaltools.TestFiltFilt(TestCase)
scipy.signal.tests.test_signaltools.TestFiltFilt.test_axis(self)
scipy.signal.tests.test_signaltools.TestFiltFilt.test_basic(self)
scipy.signal.tests.test_signaltools.TestFiltFilt.test_sine(self)
scipy.signal.tests.test_signaltools.TestHilbert(object)
scipy.signal.tests.test_signaltools.TestHilbert.test_bad_args(self)
scipy.signal.tests.test_signaltools.TestHilbert.test_hilbert_axisN(self)
scipy.signal.tests.test_signaltools.TestHilbert.test_hilbert_theoretical(self)
scipy.signal.tests.test_signaltools.TestHilbert2(object)
scipy.signal.tests.test_signaltools.TestHilbert2.test_bad_args(self)
scipy.signal.tests.test_signaltools.TestLFilterZI(TestCase)
scipy.signal.tests.test_signaltools.TestLFilterZI.test_basic(self)
scipy.signal.tests.test_signaltools.TestLinearFilterComplex128(_TestLinearFilter)
scipy.signal.tests.test_signaltools.TestLinearFilterComplex64(_TestLinearFilter)
scipy.signal.tests.test_signaltools.TestLinearFilterComplexxxiExtended28(_TestLinearFilter)
scipy.signal.tests.test_signaltools.TestLinearFilterDecimal(_TestLinearFilter)
scipy.signal.tests.test_signaltools.TestLinearFilterFloat32(_TestLinearFilter)
scipy.signal.tests.test_signaltools.TestLinearFilterFloat64(_TestLinearFilter)
scipy.signal.tests.test_signaltools.TestLinearFilterFloatExtended(_TestLinearFilter)
scipy.signal.tests.test_signaltools.TestLinearFilterObject(_TestLinearFilter)
scipy.signal.tests.test_signaltools.TestMedFilt(TestCase)
scipy.signal.tests.test_signaltools.TestMedFilt.test_basic(self)
scipy.signal.tests.test_signaltools.TestMedFilt.test_none(self)
scipy.signal.tests.test_signaltools.TestOrderFilt(TestCase)
scipy.signal.tests.test_signaltools.TestOrderFilt.test_basic(self)
scipy.signal.tests.test_signaltools.TestWiener(TestCase)
scipy.signal.tests.test_signaltools.TestWiener.test_basic(self)
scipy.signal.tests.test_signaltools._TestConvolve(TestCase)
scipy.signal.tests.test_signaltools._TestConvolve.test_2d_arrays(self)
scipy.signal.tests.test_signaltools._TestConvolve.test_basic(self)
scipy.signal.tests.test_signaltools._TestConvolve.test_complex(self)
scipy.signal.tests.test_signaltools._TestConvolve.test_single_element(self)
scipy.signal.tests.test_signaltools._TestConvolve.test_valid_mode(self)
scipy.signal.tests.test_signaltools._TestConvolve.test_zero_rank(self)
scipy.signal.tests.test_signaltools._TestConvolve2d(TestCase)
scipy.signal.tests.test_signaltools._TestConvolve2d.test_2d_arrays(self)
scipy.signal.tests.test_signaltools._TestConvolve2d.test_fillvalue(self)
scipy.signal.tests.test_signaltools._TestConvolve2d.test_sym_boundary(self)
scipy.signal.tests.test_signaltools._TestConvolve2d.test_valid_mode(self)
scipy.signal.tests.test_signaltools._TestConvolve2d.test_wrap_boundary(self)
scipy.signal.tests.test_signaltools._TestCorrelateComplex(TestCase)
scipy.signal.tests.test_signaltools._TestCorrelateComplex._setup_rank1(self,mode)
scipy.signal.tests.test_signaltools._TestCorrelateComplex.test_rank1_full(self)
scipy.signal.tests.test_signaltools._TestCorrelateComplex.test_rank1_same(self)
scipy.signal.tests.test_signaltools._TestCorrelateComplex.test_rank1_valid(self)
scipy.signal.tests.test_signaltools._TestCorrelateComplex.test_rank3(self)
scipy.signal.tests.test_signaltools._TestCorrelateReal(TestCase)
scipy.signal.tests.test_signaltools._TestCorrelateReal._setup_rank1(self)
scipy.signal.tests.test_signaltools._TestCorrelateReal._setup_rank3(self)
scipy.signal.tests.test_signaltools._TestCorrelateReal.test_rank1_full(self)
scipy.signal.tests.test_signaltools._TestCorrelateReal.test_rank1_same(self)
scipy.signal.tests.test_signaltools._TestCorrelateReal.test_rank1_valid(self)
scipy.signal.tests.test_signaltools._TestCorrelateReal.test_rank3_all(self)
scipy.signal.tests.test_signaltools._TestCorrelateReal.test_rank3_same(self)
scipy.signal.tests.test_signaltools._TestCorrelateReal.test_rank3_valid(self)
scipy.signal.tests.test_signaltools._TestLinearFilter(TestCase)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_empty_zi(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_rank1(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_rank2(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_rank2_init_cond_a0(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_rank2_init_cond_a1(self)
scipy.signal.tests.test_signaltools._TestLinearFilter.test_rank3(self)
scipy.signal.tests.test_signaltools._get_testcorrelate_class(datatype,base)
scipy.signal.tests.test_signaltools.test_lfilter_bad_object()
scipy.signal.tests.test_test_lfilter_bad_object()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/tests/test_waveforms.py----------------------------------------
A:scipy.signal.tests.test_waveforms.w->scipy.signal.waveforms.chirp(t=0, f0=10.0, f1=1.0, t1=1.0, method='hyperbolic')
A:scipy.signal.tests.test_waveforms.t->numpy.linspace(0, 2.0, 10000)
A:scipy.signal.tests.test_waveforms.phase->scipy.signal.waveforms._sweep_poly_phase(t, p)
A:scipy.signal.tests.test_waveforms.(tf, f)->compute_frequency(t, phase)
A:scipy.signal.tests.test_waveforms.abserr->numpy.max(np.abs(f - expected))
A:scipy.signal.tests.test_waveforms.float_result->scipy.signal.waveforms.gausspulse('cutoff', tpr=-60.0)
A:scipy.signal.tests.test_waveforms.int_result->scipy.signal.waveforms.gausspulse('cutoff', tpr=-60)
A:scipy.signal.tests.test_waveforms.p->numpy.array([2.0, 1.0, 0.0, -2.0])
A:scipy.signal.tests.test_waveforms.expected->numpy.poly1d(p)(tf)
scipy.signal.tests.test_TestChirp(TestCase)
scipy.signal.tests.test_TestChirp.test_hyperbolic_at_zero(self)
scipy.signal.tests.test_TestChirp.test_hyperbolic_freq_01(self)
scipy.signal.tests.test_TestChirp.test_hyperbolic_freq_02(self)
scipy.signal.tests.test_TestChirp.test_hyperbolic_freq_03(self)
scipy.signal.tests.test_TestChirp.test_integer_all(self)
scipy.signal.tests.test_TestChirp.test_integer_f0(self)
scipy.signal.tests.test_TestChirp.test_integer_f1(self)
scipy.signal.tests.test_TestChirp.test_integer_t1(self)
scipy.signal.tests.test_TestChirp.test_linear_at_zero(self)
scipy.signal.tests.test_TestChirp.test_linear_freq_01(self)
scipy.signal.tests.test_TestChirp.test_linear_freq_02(self)
scipy.signal.tests.test_TestChirp.test_logarithmic_at_zero(self)
scipy.signal.tests.test_TestChirp.test_logarithmic_freq_01(self)
scipy.signal.tests.test_TestChirp.test_logarithmic_freq_02(self)
scipy.signal.tests.test_TestChirp.test_logarithmic_freq_03(self)
scipy.signal.tests.test_TestChirp.test_quadratic_at_zero(self)
scipy.signal.tests.test_TestChirp.test_quadratic_at_zero2(self)
scipy.signal.tests.test_TestChirp.test_quadratic_freq_01(self)
scipy.signal.tests.test_TestChirp.test_quadratic_freq_02(self)
scipy.signal.tests.test_TestChirp.test_unknown_method(self)
scipy.signal.tests.test_TestGaussPulse(TestCase)
scipy.signal.tests.test_TestGaussPulse.test_integer_bw(self)
scipy.signal.tests.test_TestGaussPulse.test_integer_bwr(self)
scipy.signal.tests.test_TestGaussPulse.test_integer_fc(self)
scipy.signal.tests.test_TestGaussPulse.test_integer_tpr(self)
scipy.signal.tests.test_TestSweepPoly(TestCase)
scipy.signal.tests.test_TestSweepPoly.test_sweep_poly_const(self)
scipy.signal.tests.test_TestSweepPoly.test_sweep_poly_cubic(self)
scipy.signal.tests.test_TestSweepPoly.test_sweep_poly_cubic2(self)
scipy.signal.tests.test_TestSweepPoly.test_sweep_poly_cubic3(self)
scipy.signal.tests.test_TestSweepPoly.test_sweep_poly_linear(self)
scipy.signal.tests.test_TestSweepPoly.test_sweep_poly_quad1(self)
scipy.signal.tests.test_TestSweepPoly.test_sweep_poly_quad2(self)
scipy.signal.tests.test_chirp_geometric(t,f0,f1,t1)
scipy.signal.tests.test_chirp_hyperbolic(t,f0,f1,t1)
scipy.signal.tests.test_chirp_linear(t,f0,f1,t1)
scipy.signal.tests.test_chirp_quadratic(t,f0,f1,t1,vertex_zero=True)
scipy.signal.tests.test_compute_frequency(t,theta)
scipy.signal.tests.test_waveforms.TestChirp(TestCase)
scipy.signal.tests.test_waveforms.TestChirp.test_hyperbolic_at_zero(self)
scipy.signal.tests.test_waveforms.TestChirp.test_hyperbolic_freq_01(self)
scipy.signal.tests.test_waveforms.TestChirp.test_hyperbolic_freq_02(self)
scipy.signal.tests.test_waveforms.TestChirp.test_hyperbolic_freq_03(self)
scipy.signal.tests.test_waveforms.TestChirp.test_integer_all(self)
scipy.signal.tests.test_waveforms.TestChirp.test_integer_f0(self)
scipy.signal.tests.test_waveforms.TestChirp.test_integer_f1(self)
scipy.signal.tests.test_waveforms.TestChirp.test_integer_t1(self)
scipy.signal.tests.test_waveforms.TestChirp.test_linear_at_zero(self)
scipy.signal.tests.test_waveforms.TestChirp.test_linear_freq_01(self)
scipy.signal.tests.test_waveforms.TestChirp.test_linear_freq_02(self)
scipy.signal.tests.test_waveforms.TestChirp.test_logarithmic_at_zero(self)
scipy.signal.tests.test_waveforms.TestChirp.test_logarithmic_freq_01(self)
scipy.signal.tests.test_waveforms.TestChirp.test_logarithmic_freq_02(self)
scipy.signal.tests.test_waveforms.TestChirp.test_logarithmic_freq_03(self)
scipy.signal.tests.test_waveforms.TestChirp.test_quadratic_at_zero(self)
scipy.signal.tests.test_waveforms.TestChirp.test_quadratic_at_zero2(self)
scipy.signal.tests.test_waveforms.TestChirp.test_quadratic_freq_01(self)
scipy.signal.tests.test_waveforms.TestChirp.test_quadratic_freq_02(self)
scipy.signal.tests.test_waveforms.TestChirp.test_unknown_method(self)
scipy.signal.tests.test_waveforms.TestGaussPulse(TestCase)
scipy.signal.tests.test_waveforms.TestGaussPulse.test_integer_bw(self)
scipy.signal.tests.test_waveforms.TestGaussPulse.test_integer_bwr(self)
scipy.signal.tests.test_waveforms.TestGaussPulse.test_integer_fc(self)
scipy.signal.tests.test_waveforms.TestGaussPulse.test_integer_tpr(self)
scipy.signal.tests.test_waveforms.TestSweepPoly(TestCase)
scipy.signal.tests.test_waveforms.TestSweepPoly.test_sweep_poly_const(self)
scipy.signal.tests.test_waveforms.TestSweepPoly.test_sweep_poly_cubic(self)
scipy.signal.tests.test_waveforms.TestSweepPoly.test_sweep_poly_cubic2(self)
scipy.signal.tests.test_waveforms.TestSweepPoly.test_sweep_poly_cubic3(self)
scipy.signal.tests.test_waveforms.TestSweepPoly.test_sweep_poly_linear(self)
scipy.signal.tests.test_waveforms.TestSweepPoly.test_sweep_poly_quad1(self)
scipy.signal.tests.test_waveforms.TestSweepPoly.test_sweep_poly_quad2(self)
scipy.signal.tests.test_waveforms.chirp_geometric(t,f0,f1,t1)
scipy.signal.tests.test_waveforms.chirp_hyperbolic(t,f0,f1,t1)
scipy.signal.tests.test_waveforms.chirp_linear(t,f0,f1,t1)
scipy.signal.tests.test_waveforms.chirp_quadratic(t,f0,f1,t1,vertex_zero=True)
scipy.signal.tests.test_waveforms.compute_frequency(t,theta)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/tests/test_cont2discrete.py----------------------------------------
A:scipy.signal.tests.test_cont2discrete.ac->numpy.eye(2)
A:scipy.signal.tests.test_cont2discrete.cc->numpy.array([[0.75, 1.0], [1.0, 1.0], [1.0, 0.25]])
A:scipy.signal.tests.test_cont2discrete.dc->numpy.array([[0.0], [0.0], [-0.33]])
A:scipy.signal.tests.test_cont2discrete.(ad, bd, cd, dd, dt)->c2d((ac, bc, cc, dc), dt_requested, method='bilinear')
A:scipy.signal.tests.test_cont2discrete.cd_truth->numpy.array([[0.9, 1.2], [1.2, 1.2], [1.2, 0.3]])
A:scipy.signal.tests.test_cont2discrete.dd_truth->numpy.array([[0.175], [0.2], [-0.205]])
A:scipy.signal.tests.test_cont2discrete.numc->numpy.array([0.25, 0.25, 0.5])
A:scipy.signal.tests.test_cont2discrete.denc->numpy.array([0.75, 0.75, 1.0])
A:scipy.signal.tests.test_cont2discrete.numd->numpy.array([[1.0 / 3.0, -0.427419169438754, 0.221654141101125]])
A:scipy.signal.tests.test_cont2discrete.dend->numpy.array([1.0, -1.351394049721225, 0.606530659712634])
A:scipy.signal.tests.test_cont2discrete.(num, den, dt)->c2d((numc, denc), dt_requested, method='zoh')
A:scipy.signal.tests.test_cont2discrete.zeros_c->numpy.array([0.5, -0.5])
A:scipy.signal.tests.test_cont2discrete.poles_c->numpy.array([1j / np.sqrt(2), -1j / np.sqrt(2)])
A:scipy.signal.tests.test_cont2discrete.(zeros, poles, k, dt)->c2d((zeros_c, poles_c, k_c), dt_requested, method='zoh')
A:scipy.signal.tests.test_cont2discrete.(cnum, cden)->ss2tf(A, B, C, D)
A:scipy.signal.tests.test_cont2discrete.(cz, cp, ck)->ss2zpk(A, B, C, D)
A:scipy.signal.tests.test_cont2discrete.(dnum, dden)->ss2tf(Ad, Bd, Cd, Dd)
A:scipy.signal.tests.test_cont2discrete.(c2dnum, c2dden, dt)->c2d((cnum, cden), h, method='gbt', alpha=alpha)
A:scipy.signal.tests.test_cont2discrete.(dz, dp, dk)->ss2zpk(Ad, Bd, Cd, Dd)
A:scipy.signal.tests.test_cont2discrete.(c2dz, c2dp, c2dk, dt)->c2d((cz, cp, ck), h, method='gbt', alpha=alpha)
A:scipy.signal.tests.test_cont2discrete.a->numpy.array([[-0.01]])
A:scipy.signal.tests.test_cont2discrete.b->numpy.array([[1.0]])
A:scipy.signal.tests.test_cont2discrete.c->numpy.array([[1.0]])
A:scipy.signal.tests.test_cont2discrete.d->numpy.array([[0.2]])
A:scipy.signal.tests.test_cont2discrete.t->numpy.linspace(0, 10.0, 101)
A:scipy.signal.tests.test_cont2discrete.u1->u(t)
A:scipy.signal.tests.test_cont2discrete.(t, yout, xout)->lsim2((a, b, c, d), T=t, U=u1, X0=x0, rtol=1e-09, atol=1e-11)
A:scipy.signal.tests.test_cont2discrete.dsys->c2d((a, b, c, d), dt, method='bilinear')
A:scipy.signal.tests.test_cont2discrete.(td2, yd2, xd2)->dlsim(dsys, u=u2.reshape(-1, 1), t=t2, x0=x0)
scipy.signal.tests.test_TestC2D(TestCase)
scipy.signal.tests.test_TestC2D.test_backward_diff(self)
scipy.signal.tests.test_TestC2D.test_bilinear(self)
scipy.signal.tests.test_TestC2D.test_discrete_approx(self)
scipy.signal.tests.test_TestC2D.test_euler(self)
scipy.signal.tests.test_TestC2D.test_gbt(self)
scipy.signal.tests.test_TestC2D.test_gbt_with_sio_tf_and_zpk(self)
scipy.signal.tests.test_TestC2D.test_transferfunction(self)
scipy.signal.tests.test_TestC2D.test_zerospolesgain(self)
scipy.signal.tests.test_TestC2D.test_zoh(self)
scipy.signal.tests.test_cont2discrete.TestC2D(TestCase)
scipy.signal.tests.test_cont2discrete.TestC2D.test_backward_diff(self)
scipy.signal.tests.test_cont2discrete.TestC2D.test_bilinear(self)
scipy.signal.tests.test_cont2discrete.TestC2D.test_discrete_approx(self)
scipy.signal.tests.test_cont2discrete.TestC2D.test_euler(self)
scipy.signal.tests.test_cont2discrete.TestC2D.test_gbt(self)
scipy.signal.tests.test_cont2discrete.TestC2D.test_gbt_with_sio_tf_and_zpk(self)
scipy.signal.tests.test_cont2discrete.TestC2D.test_transferfunction(self)
scipy.signal.tests.test_cont2discrete.TestC2D.test_zerospolesgain(self)
scipy.signal.tests.test_cont2discrete.TestC2D.test_zoh(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/tests/test_peak_finding.py----------------------------------------
A:scipy.signal.tests.test_peak_finding.num_peaks->len(sigmas)
A:scipy.signal.tests.test_peak_finding.xdata->numpy.arange(0, total_length).astype(float)
A:scipy.signal.tests.test_peak_finding.out_data->_gen_gaussians(center_locs, sigmas, total_length)
A:scipy.signal.tests.test_peak_finding.center_locs->numpy.linspace(delta, total_length - delta, num=num_peaks).astype(int)
A:scipy.signal.tests.test_peak_finding.out->min(out, max_val)
A:scipy.signal.tests.test_peak_finding.gaps->copy.deepcopy(gaps)
A:scipy.signal.tests.test_peak_finding.distances->copy.deepcopy(distances)
A:scipy.signal.tests.test_peak_finding.locs->numpy.zeros([length, 2], dtype=int)
A:scipy.signal.tests.test_peak_finding.nextrow->keep_bounds(nextrow, max_locs[0])
A:scipy.signal.tests.test_peak_finding.nextcol->keep_bounds(nextcol, max_locs[1])
A:scipy.signal.tests.test_peak_finding.test_matr->numpy.zeros([50, 50])
A:scipy.signal.tests.test_peak_finding.lines->_identify_ridge_lines(test_matr, 2 * np.ones(20), 1)
A:scipy.signal.tests.test_peak_finding.line->_gen_ridge_line([0, 25], test_matr.shape, length, distances, gaps)
A:scipy.signal.tests.test_peak_finding.identified_lines->_identify_ridge_lines(test_matr, max_distances, max_gap)
A:scipy.signal.tests.test_peak_finding.adists->numpy.diff(iline[1])
A:scipy.signal.tests.test_peak_finding.agaps->numpy.diff(iline[0])
A:scipy.signal.tests.test_peak_finding.(test_data, act_locs)->_gen_gaussians_even(sigmas, num_points)
A:scipy.signal.tests.test_peak_finding.test_data_2->numpy.vstack([test_data, test_data[rot_range]])
A:scipy.signal.tests.test_peak_finding.(rel_max_rows, rel_max_cols)->argrelmax(test_data_2, axis=1, order=1)
A:scipy.signal.tests.test_peak_finding.widths->numpy.arange(10, 50)
A:scipy.signal.tests.test_peak_finding.found_locs->find_peaks_cwt(test_data, widths, min_snr=5, noise_perc=30)
A:scipy.signal.tests.test_peak_finding.diffs->numpy.abs(found_locs - act_locs)
scipy.signal.tests.testTestArgrelmax(TestCase)
scipy.signal.tests.testTestArgrelmax.test_2d_gaussians(self)
scipy.signal.tests.testTestArgrelmax.test_highorder(self,order=2)
scipy.signal.tests.testTestFindPeaks(TestCase)
scipy.signal.tests.testTestFindPeaks.test_find_peaks_exact(self)
scipy.signal.tests.testTestFindPeaks.test_find_peaks_nopeak(self)
scipy.signal.tests.testTestFindPeaks.test_find_peaks_withnoise(self)
scipy.signal.tests.testTestRidgeLines(TestCase)
scipy.signal.tests.testTestRidgeLines.test_empty(self)
scipy.signal.tests.testTestRidgeLines.test_minimal(self)
scipy.signal.tests.testTestRidgeLines.test_single_bigdist(self)
scipy.signal.tests.testTestRidgeLines.test_single_biggap(self)
scipy.signal.tests.testTestRidgeLines.test_single_biggaps(self)
scipy.signal.tests.testTestRidgeLines.test_single_pass(self)
scipy.signal.tests.test_gen_gaussians(center_locs,sigmas,total_length)
scipy.signal.tests.test_gen_gaussians_even(sigmas,total_length)
scipy.signal.tests.test_gen_ridge_line(start_locs,max_locs,length,distances,gaps)
scipy.signal.tests.test_peak_finding.TestArgrelmax(TestCase)
scipy.signal.tests.test_peak_finding.TestArgrelmax.test_2d_gaussians(self)
scipy.signal.tests.test_peak_finding.TestArgrelmax.test_highorder(self,order=2)
scipy.signal.tests.test_peak_finding.TestFindPeaks(TestCase)
scipy.signal.tests.test_peak_finding.TestFindPeaks.test_find_peaks_exact(self)
scipy.signal.tests.test_peak_finding.TestFindPeaks.test_find_peaks_nopeak(self)
scipy.signal.tests.test_peak_finding.TestFindPeaks.test_find_peaks_withnoise(self)
scipy.signal.tests.test_peak_finding.TestRidgeLines(TestCase)
scipy.signal.tests.test_peak_finding.TestRidgeLines.test_empty(self)
scipy.signal.tests.test_peak_finding.TestRidgeLines.test_minimal(self)
scipy.signal.tests.test_peak_finding.TestRidgeLines.test_single_bigdist(self)
scipy.signal.tests.test_peak_finding.TestRidgeLines.test_single_biggap(self)
scipy.signal.tests.test_peak_finding.TestRidgeLines.test_single_biggaps(self)
scipy.signal.tests.test_peak_finding.TestRidgeLines.test_single_pass(self)
scipy.signal.tests.test_peak_finding._gen_gaussians(center_locs,sigmas,total_length)
scipy.signal.tests.test_peak_finding._gen_gaussians_even(sigmas,total_length)
scipy.signal.tests.test_peak_finding._gen_ridge_line(start_locs,max_locs,length,distances,gaps)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/tests/test_spectral.py----------------------------------------
A:scipy.signal.tests.test_spectral.x->numpy.zeros(1)
A:scipy.signal.tests.test_spectral.(f, p)->welch(x, nperseg=16, noverlap=4)
A:scipy.signal.tests.test_spectral.q->numpy.array([0, 1.0 / 12.0, 1.0 / 3.0, 1.0 / 5.0, 1.0 / 3.0, 1.0 / 5.0, 1.0 / 3.0, 1.0 / 5.0, 1.0 / 6.0])
A:scipy.signal.tests.test_spectral.(g, q)->periodogram(x, scaling='density')
A:scipy.signal.tests.test_spectral.(f0, p0)->welch(x[:, 0, 0], nperseg=10)
A:scipy.signal.tests.test_spectral.win->scipy.signal.get_window('hanning', 8)
A:scipy.signal.tests.test_spectral.(fe, pe)->welch(x, 10, win, 8)
A:scipy.signal.tests.test_spectral.(fp, pp)->periodogram(x, nfft=32)
A:scipy.signal.tests.test_spectral.(f1, p1)->welch(x, nperseg=8)
A:scipy.signal.tests.test_spectral.r->numpy.random.rand(nin)
A:scipy.signal.tests.test_spectral.f->numpy.zeros(1)
A:scipy.signal.tests.test_spectral.P->lombscargle(t, x, f)
A:scipy.signal.tests.test_spectral.pgram->numpy.sqrt(4 * pgram / t.shape[0])
A:scipy.signal.tests.test_spectral.t->numpy.zeros(1)
scipy.signal.tests.test_TestLombscargle
scipy.signal.tests.test_TestLombscargle.test_amplitude(self)
scipy.signal.tests.test_TestLombscargle.test_frequency(self)
scipy.signal.tests.test_TestLombscargle.test_wrong_shape(self)
scipy.signal.tests.test_TestPeriodogram(TestCase)
scipy.signal.tests.test_TestPeriodogram.test_complex(self)
scipy.signal.tests.test_TestPeriodogram.test_empty_input(self)
scipy.signal.tests.test_TestPeriodogram.test_nd_axis_0(self)
scipy.signal.tests.test_TestPeriodogram.test_nd_axis_m1(self)
scipy.signal.tests.test_TestPeriodogram.test_nfft_is_xshape(self)
scipy.signal.tests.test_TestPeriodogram.test_padded_fft(self)
scipy.signal.tests.test_TestPeriodogram.test_real_onesided_even(self)
scipy.signal.tests.test_TestPeriodogram.test_real_onesided_odd(self)
scipy.signal.tests.test_TestPeriodogram.test_real_spectrum(self)
scipy.signal.tests.test_TestPeriodogram.test_real_twosided(self)
scipy.signal.tests.test_TestPeriodogram.test_short_nfft(self)
scipy.signal.tests.test_TestPeriodogram.test_unk_scaling(self)
scipy.signal.tests.test_TestPeriodogram.test_window_external(self)
scipy.signal.tests.test_TestWelch(TestCase)
scipy.signal.tests.test_TestWelch.test_bad_noverlap(self)
scipy.signal.tests.test_TestWelch.test_complex(self)
scipy.signal.tests.test_TestWelch.test_detrend_external(self)
scipy.signal.tests.test_TestWelch.test_detrend_external_nd_0(self)
scipy.signal.tests.test_TestWelch.test_detrend_external_nd_m1(self)
scipy.signal.tests.test_TestWelch.test_detrend_linear(self)
scipy.signal.tests.test_TestWelch.test_empty_input(self)
scipy.signal.tests.test_TestWelch.test_nd_axis_0(self)
scipy.signal.tests.test_TestWelch.test_nd_axis_m1(self)
scipy.signal.tests.test_TestWelch.test_nfft_too_short(self)
scipy.signal.tests.test_TestWelch.test_nondefault_noverlap(self)
scipy.signal.tests.test_TestWelch.test_real_onesided_even(self)
scipy.signal.tests.test_TestWelch.test_real_onesided_odd(self)
scipy.signal.tests.test_TestWelch.test_real_spectrum(self)
scipy.signal.tests.test_TestWelch.test_real_twosided(self)
scipy.signal.tests.test_TestWelch.test_short_data(self)
scipy.signal.tests.test_TestWelch.test_unk_scaling(self)
scipy.signal.tests.test_TestWelch.test_window_external(self)
scipy.signal.tests.test_TestWelch.test_window_long_or_nd(self)
scipy.signal.tests.test_spectral.TestLombscargle
scipy.signal.tests.test_spectral.TestLombscargle.test_amplitude(self)
scipy.signal.tests.test_spectral.TestLombscargle.test_frequency(self)
scipy.signal.tests.test_spectral.TestLombscargle.test_wrong_shape(self)
scipy.signal.tests.test_spectral.TestLombscargle.test_zero_division(self)
scipy.signal.tests.test_spectral.TestPeriodogram(TestCase)
scipy.signal.tests.test_spectral.TestPeriodogram.test_complex(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_empty_input(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_nd_axis_0(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_nd_axis_m1(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_nfft_is_xshape(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_padded_fft(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_real_onesided_even(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_real_onesided_odd(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_real_spectrum(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_real_twosided(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_short_nfft(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_unk_scaling(self)
scipy.signal.tests.test_spectral.TestPeriodogram.test_window_external(self)
scipy.signal.tests.test_spectral.TestWelch(TestCase)
scipy.signal.tests.test_spectral.TestWelch.test_bad_noverlap(self)
scipy.signal.tests.test_spectral.TestWelch.test_complex(self)
scipy.signal.tests.test_spectral.TestWelch.test_detrend_external(self)
scipy.signal.tests.test_spectral.TestWelch.test_detrend_external_nd_0(self)
scipy.signal.tests.test_spectral.TestWelch.test_detrend_external_nd_m1(self)
scipy.signal.tests.test_spectral.TestWelch.test_detrend_linear(self)
scipy.signal.tests.test_spectral.TestWelch.test_empty_input(self)
scipy.signal.tests.test_spectral.TestWelch.test_nd_axis_0(self)
scipy.signal.tests.test_spectral.TestWelch.test_nd_axis_m1(self)
scipy.signal.tests.test_spectral.TestWelch.test_nfft_too_short(self)
scipy.signal.tests.test_spectral.TestWelch.test_nondefault_noverlap(self)
scipy.signal.tests.test_spectral.TestWelch.test_real_onesided_even(self)
scipy.signal.tests.test_spectral.TestWelch.test_real_onesided_odd(self)
scipy.signal.tests.test_spectral.TestWelch.test_real_spectrum(self)
scipy.signal.tests.test_spectral.TestWelch.test_real_twosided(self)
scipy.signal.tests.test_spectral.TestWelch.test_short_data(self)
scipy.signal.tests.test_spectral.TestWelch.test_unk_scaling(self)
scipy.signal.tests.test_spectral.TestWelch.test_window_external(self)
scipy.signal.tests.test_spectral.TestWelch.test_window_long_or_nd(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/tests/test_fir_filter_design.py----------------------------------------
A:scipy.signal.tests.test_fir_filter_design.b->kaiser_beta(10.0)
A:scipy.signal.tests.test_fir_filter_design.a->kaiser_atten(2, 1 / np.pi)
A:scipy.signal.tests.test_fir_filter_design.(numtaps, beta)->kaiserord(2.285 + 7.95 - 0.001, 1 / np.pi)
A:scipy.signal.tests.test_fir_filter_design.N->len(h)
A:scipy.signal.tests.test_fir_filter_design.actual->abs(np.sum(h * np.exp(-1j * np.pi * m * freq)))
A:scipy.signal.tests.test_fir_filter_design.h->remez(11, [a, 0.5 - a], [1], type='hilbert')
A:scipy.signal.tests.test_fir_filter_design.(w, H)->freqz(h, 1)
A:scipy.signal.tests.test_fir_filter_design.passIndicator->numpy.zeros(len(w), bool)
A:scipy.signal.tests.test_fir_filter_design.Hideal->numpy.where(passIndicator, 1, 0)
A:scipy.signal.tests.test_fir_filter_design.mse->numpy.mean(abs(abs(H) - Hideal) ** 2)
A:scipy.signal.tests.test_fir_filter_design.hs->firwin(N, cutoff, scale=True, pass_zero=pass_zero, window='ones')
A:scipy.signal.tests.test_fir_filter_design.(ntaps, beta)->kaiserord(120, width)
A:scipy.signal.tests.test_fir_filter_design.taps->firwin2(ntaps, freq, gain, window=None, antisymmetric=True)
A:scipy.signal.tests.test_fir_filter_design.freq_samples->numpy.array([0.0, 0.4 - width, 0.4 + width, 0.45, 0.5 - width, 0.5 + width, 0.75, 1.0])
A:scipy.signal.tests.test_fir_filter_design.(freqs, response)->freqz(taps, worN=2048)
A:scipy.signal.tests.test_fir_filter_design.(freqs, response1)->freqz(taps, worN=2048)
A:scipy.signal.tests.test_fir_filter_design.response2->numpy.interp(freqs / np.pi, freq, gain)
A:scipy.signal.tests.test_fir_filter_design.taps1->firwin2(80, [0.0, 0.5, 1.0], [1.0, 1.0, 0.0])
A:scipy.signal.tests.test_fir_filter_design.taps2->firwin2(80, [0.0, 30.0, 60.0], [1.0, 1.0, 0.0], nyq=60.0)
A:scipy.signal.tests.test_fir_filter_design.Hmag->abs(H)
scipy.signal.tests.test_TestFirWinMore(TestCase)
scipy.signal.tests.test_TestFirWinMore.test_bad_cutoff(self)
scipy.signal.tests.test_TestFirWinMore.test_bandpass(self)
scipy.signal.tests.test_TestFirWinMore.test_even_highpass_raises_value_error(self)
scipy.signal.tests.test_TestFirWinMore.test_highpass(self)
scipy.signal.tests.test_TestFirWinMore.test_lowpass(self)
scipy.signal.tests.test_TestFirWinMore.test_multi(self)
scipy.signal.tests.test_TestFirWinMore.test_nyq(self)
scipy.signal.tests.test_TestFirwin(TestCase)
scipy.signal.tests.test_TestFirwin.check_response(self,h,expected_response,tol=0.05)
scipy.signal.tests.test_TestFirwin.mse(self,h,bands)
scipy.signal.tests.test_TestFirwin.test_response(self)
scipy.signal.tests.test_TestFirwin.test_scaling(self)
scipy.signal.tests.test_TestFirwin2(TestCase)
scipy.signal.tests.test_TestFirwin2.test01(self)
scipy.signal.tests.test_TestFirwin2.test02(self)
scipy.signal.tests.test_TestFirwin2.test03(self)
scipy.signal.tests.test_TestFirwin2.test04(self)
scipy.signal.tests.test_TestFirwin2.test05(self)
scipy.signal.tests.test_TestFirwin2.test06(self)
scipy.signal.tests.test_TestFirwin2.test_invalid_args(self)
scipy.signal.tests.test_TestFirwin2.test_nyq(self)
scipy.signal.tests.test_TestRemez(TestCase)
scipy.signal.tests.test_TestRemez.test_bad_args(self)
scipy.signal.tests.test_TestRemez.test_hilbert(self)
scipy.signal.tests.test_fir_filter_design.TestFirWinMore(TestCase)
scipy.signal.tests.test_fir_filter_design.TestFirWinMore.test_bad_cutoff(self)
scipy.signal.tests.test_fir_filter_design.TestFirWinMore.test_bandpass(self)
scipy.signal.tests.test_fir_filter_design.TestFirWinMore.test_even_highpass_raises_value_error(self)
scipy.signal.tests.test_fir_filter_design.TestFirWinMore.test_highpass(self)
scipy.signal.tests.test_fir_filter_design.TestFirWinMore.test_lowpass(self)
scipy.signal.tests.test_fir_filter_design.TestFirWinMore.test_multi(self)
scipy.signal.tests.test_fir_filter_design.TestFirWinMore.test_nyq(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin(TestCase)
scipy.signal.tests.test_fir_filter_design.TestFirwin.check_response(self,h,expected_response,tol=0.05)
scipy.signal.tests.test_fir_filter_design.TestFirwin.mse(self,h,bands)
scipy.signal.tests.test_fir_filter_design.TestFirwin.test_response(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin.test_scaling(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin2(TestCase)
scipy.signal.tests.test_fir_filter_design.TestFirwin2.test01(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin2.test02(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin2.test03(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin2.test04(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin2.test05(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin2.test06(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin2.test_invalid_args(self)
scipy.signal.tests.test_fir_filter_design.TestFirwin2.test_nyq(self)
scipy.signal.tests.test_fir_filter_design.TestRemez(TestCase)
scipy.signal.tests.test_fir_filter_design.TestRemez.test_bad_args(self)
scipy.signal.tests.test_fir_filter_design.TestRemez.test_hilbert(self)
scipy.signal.tests.test_fir_filter_design.test_kaiser_atten()
scipy.signal.tests.test_fir_filter_design.test_kaiser_beta()
scipy.signal.tests.test_fir_filter_design.test_kaiserord()
scipy.signal.tests.test_test_kaiser_atten()
scipy.signal.tests.test_test_kaiser_beta()
scipy.signal.tests.test_test_kaiserord()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/tests/test_array_tools.py----------------------------------------
A:scipy.signal.tests.test_array_tools.a->numpy.array([[1, 2, 3, 4, 5], [9, 8, 7, 6, 5]])
A:scipy.signal.tests.test_array_tools.s->axis_slice(a, start=0, step=2, axis=1)
A:scipy.signal.tests.test_array_tools.r->axis_reverse(a, axis=1)
A:scipy.signal.tests.test_array_tools.odd->odd_ext(a, 1, axis=0)
A:scipy.signal.tests.test_array_tools.expected->numpy.array([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [9, 8, 7, 6, 5], [9, 8, 7, 6, 5]])
A:scipy.signal.tests.test_array_tools.even->even_ext(a, 1, axis=0)
A:scipy.signal.tests.test_array_tools.const->const_ext(a, 1, axis=0)
scipy.signal.tests.test_array_tools.TestArrayTools(TestCase)
scipy.signal.tests.test_array_tools.TestArrayTools.test_axis_reverse(self)
scipy.signal.tests.test_array_tools.TestArrayTools.test_axis_slice(self)
scipy.signal.tests.test_array_tools.TestArrayTools.test_const_ext(self)
scipy.signal.tests.test_array_tools.TestArrayTools.test_even_ext(self)
scipy.signal.tests.test_array_tools.TestArrayTools.test_odd_ext(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/tests/test_wavelets.py----------------------------------------
A:scipy.signal.tests.test_wavelets.lpcoef->scipy.signal.wavelets.daub(i)
A:scipy.signal.tests.test_wavelets.k->len(lpcoef)
A:scipy.signal.tests.test_wavelets.(x, phi, psi)->scipy.signal.wavelets.cascade(lpcoef, J)
A:scipy.signal.tests.test_wavelets.x->scipy.signal.wavelets.morlet(10000, w=7, s=10, complete=False)
A:scipy.signal.tests.test_wavelets.y->scipy.signal.wavelets.morlet(3, w=2, complete=False)
A:scipy.signal.tests.test_wavelets.w->scipy.signal.wavelets.ricker(points, a)
A:scipy.signal.tests.test_wavelets.max_loc->numpy.argmax(w)
A:scipy.signal.tests.test_wavelets.half_vec->numpy.arange(0, points // 2)
A:scipy.signal.tests.test_wavelets.exp_zero1->numpy.argmin(np.abs(vec - a))
A:scipy.signal.tests.test_wavelets.exp_zero2->numpy.argmin(np.abs(vec + a))
A:scipy.signal.tests.test_wavelets.test_data->numpy.sin(np.pi * np.arange(0, len_data) / 10.0)
A:scipy.signal.tests.test_wavelets.cwt_dat->scipy.signal.wavelets.cwt(test_data, flat_wavelet, widths)
scipy.signal.tests.test_TestWavelets(TestCase)
scipy.signal.tests.test_TestWavelets.test_cascade(self)
scipy.signal.tests.test_TestWavelets.test_cwt(self)
scipy.signal.tests.test_TestWavelets.test_daub(self)
scipy.signal.tests.test_TestWavelets.test_morlet(self)
scipy.signal.tests.test_TestWavelets.test_qmf(self)
scipy.signal.tests.test_TestWavelets.test_ricker(self)
scipy.signal.tests.test_wavelets.TestWavelets(TestCase)
scipy.signal.tests.test_wavelets.TestWavelets.test_cascade(self)
scipy.signal.tests.test_wavelets.TestWavelets.test_cwt(self)
scipy.signal.tests.test_wavelets.TestWavelets.test_daub(self)
scipy.signal.tests.test_wavelets.TestWavelets.test_morlet(self)
scipy.signal.tests.test_wavelets.TestWavelets.test_qmf(self)
scipy.signal.tests.test_wavelets.TestWavelets.test_ricker(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/tests/test_ltisys.py----------------------------------------
A:scipy.signal.tests.test_ltisys.t->numpy.linspace(0, 2.0, n)
A:scipy.signal.tests.test_ltisys.u->numpy.zeros_like(t)
A:scipy.signal.tests.test_ltisys.(tout, y, x)->lsim2(system, X0=[1.0, 0.0])
A:scipy.signal.tests.test_ltisys.expected_x->numpy.array([0.0, 0.0, 0.0, 0.1, 0.1, 0.1])
A:scipy.signal.tests.test_ltisys.A->numpy.array([[-1.0, 0.0], [0.0, -2.0]])
A:scipy.signal.tests.test_ltisys.B->numpy.array([[1.0, 0.0], [0.0, 1.0]])
A:scipy.signal.tests.test_ltisys.C->numpy.array([1.0, 0.0])
A:scipy.signal.tests.test_ltisys.D->numpy.zeros((1, 2))
A:scipy.signal.tests.test_ltisys.expected_y->numpy.ones_like(tout)
A:scipy.signal.tests.test_ltisys.expected_x0->numpy.exp(-tout)
A:scipy.signal.tests.test_ltisys.expected_x1->numpy.exp(-2.0 * tout)
A:scipy.signal.tests.test_ltisys.(tout, y)->step2(system, atol=1e-10, rtol=1e-08)
A:scipy.signal.tests.test_ltisys.s->lti([1], [-1], 1, 3)
A:scipy.signal.tests.test_ltisys.system->lti([1], [1, 0])
A:scipy.signal.tests.test_ltisys.(w, mag, phase)->bode(system, n=2)
A:scipy.signal.tests.test_ltisys.vals->scipy.linalg.eigvals(system.A)
A:scipy.signal.tests.test_ltisys.minpole->min(abs(np.real(vals)))
A:scipy.signal.tests.test_ltisys.maxpole->max(abs(np.real(vals)))
A:scipy.signal.tests.test_ltisys.expected_w->numpy.logspace(-2, 1, n)
A:scipy.signal.tests.test_ltisys.(w, H)->freqresp(system, n=2)
scipy.signal.tests.test_TestSS2TF
scipy.signal.tests.test_TestSS2TF.test_basic(self)
scipy.signal.tests.test_TestSS2TF.tst_matrix_shapes(self,p,q,r)
scipy.signal.tests.test_Test_bode(object)
scipy.signal.tests.test_Test_bode.test_01(self)
scipy.signal.tests.test_Test_bode.test_02(self)
scipy.signal.tests.test_Test_bode.test_03(self)
scipy.signal.tests.test_Test_bode.test_04(self)
scipy.signal.tests.test_Test_bode.test_05(self)
scipy.signal.tests.test_Test_bode.test_06(self)
scipy.signal.tests.test_Test_freqresp(object)
scipy.signal.tests.test_Test_freqresp.test_freq_range(self)
scipy.signal.tests.test_Test_freqresp.test_imag_part(self)
scipy.signal.tests.test_Test_freqresp.test_imag_part_manual(self)
scipy.signal.tests.test_Test_freqresp.test_pole_zero(self)
scipy.signal.tests.test_Test_freqresp.test_real_part(self)
scipy.signal.tests.test_Test_freqresp.test_real_part_manual(self)
scipy.signal.tests.test_Test_impulse2(object)
scipy.signal.tests.test_Test_impulse2.test_01(self)
scipy.signal.tests.test_Test_impulse2.test_02(self)
scipy.signal.tests.test_Test_impulse2.test_03(self)
scipy.signal.tests.test_Test_impulse2.test_04(self)
scipy.signal.tests.test_Test_impulse2.test_05(self)
scipy.signal.tests.test_Test_impulse2.test_06(self)
scipy.signal.tests.test_Test_lsim2(object)
scipy.signal.tests.test_Test_lsim2.test_01(self)
scipy.signal.tests.test_Test_lsim2.test_02(self)
scipy.signal.tests.test_Test_lsim2.test_03(self)
scipy.signal.tests.test_Test_lsim2.test_04(self)
scipy.signal.tests.test_Test_lsim2.test_05(self)
scipy.signal.tests.test_Test_lsim2.test_06(self)
scipy.signal.tests.test_Test_step2(object)
scipy.signal.tests.test_Test_step2.test_01(self)
scipy.signal.tests.test_Test_step2.test_02(self)
scipy.signal.tests.test_Test_step2.test_03(self)
scipy.signal.tests.test_Test_step2.test_04(self)
scipy.signal.tests.test_Test_step2.test_05(self)
scipy.signal.tests.test_Test_step2.test_06(self)
scipy.signal.tests.test_ltisys.TestSS2TF
scipy.signal.tests.test_ltisys.TestSS2TF.test_basic(self)
scipy.signal.tests.test_ltisys.TestSS2TF.tst_matrix_shapes(self,p,q,r)
scipy.signal.tests.test_ltisys.Test_bode(object)
scipy.signal.tests.test_ltisys.Test_bode.test_01(self)
scipy.signal.tests.test_ltisys.Test_bode.test_02(self)
scipy.signal.tests.test_ltisys.Test_bode.test_03(self)
scipy.signal.tests.test_ltisys.Test_bode.test_04(self)
scipy.signal.tests.test_ltisys.Test_bode.test_05(self)
scipy.signal.tests.test_ltisys.Test_bode.test_06(self)
scipy.signal.tests.test_ltisys.Test_freqresp(object)
scipy.signal.tests.test_ltisys.Test_freqresp.test_freq_range(self)
scipy.signal.tests.test_ltisys.Test_freqresp.test_imag_part(self)
scipy.signal.tests.test_ltisys.Test_freqresp.test_imag_part_manual(self)
scipy.signal.tests.test_ltisys.Test_freqresp.test_pole_zero(self)
scipy.signal.tests.test_ltisys.Test_freqresp.test_real_part(self)
scipy.signal.tests.test_ltisys.Test_freqresp.test_real_part_manual(self)
scipy.signal.tests.test_ltisys.Test_impulse2(object)
scipy.signal.tests.test_ltisys.Test_impulse2.test_01(self)
scipy.signal.tests.test_ltisys.Test_impulse2.test_02(self)
scipy.signal.tests.test_ltisys.Test_impulse2.test_03(self)
scipy.signal.tests.test_ltisys.Test_impulse2.test_04(self)
scipy.signal.tests.test_ltisys.Test_impulse2.test_05(self)
scipy.signal.tests.test_ltisys.Test_impulse2.test_06(self)
scipy.signal.tests.test_ltisys.Test_lsim2(object)
scipy.signal.tests.test_ltisys.Test_lsim2.test_01(self)
scipy.signal.tests.test_ltisys.Test_lsim2.test_02(self)
scipy.signal.tests.test_ltisys.Test_lsim2.test_03(self)
scipy.signal.tests.test_ltisys.Test_lsim2.test_04(self)
scipy.signal.tests.test_ltisys.Test_lsim2.test_05(self)
scipy.signal.tests.test_ltisys.Test_lsim2.test_06(self)
scipy.signal.tests.test_ltisys.Test_step2(object)
scipy.signal.tests.test_ltisys.Test_step2.test_01(self)
scipy.signal.tests.test_ltisys.Test_step2.test_02(self)
scipy.signal.tests.test_ltisys.Test_step2.test_03(self)
scipy.signal.tests.test_ltisys.Test_step2.test_04(self)
scipy.signal.tests.test_ltisys.Test_step2.test_05(self)
scipy.signal.tests.test_ltisys.Test_step2.test_06(self)
scipy.signal.tests.test_ltisys.test_lti_instantiation()
scipy.signal.tests.test_test_lti_instantiation()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/signal/tests/test_filter_design.py----------------------------------------
A:scipy.signal.tests.test_filter_design.z_r->numpy.array([0.5, -0.5])
A:scipy.signal.tests.test_filter_design.p_r->numpy.array([1j / np.sqrt(2), -1j / np.sqrt(2)])
A:scipy.signal.tests.test_filter_design.b->numpy.poly(z_r)
A:scipy.signal.tests.test_filter_design.a->numpy.poly(p_r)
A:scipy.signal.tests.test_filter_design.(z, p, k)->tf2zpk(b, a)
A:scipy.signal.tests.test_filter_design.(b, a)->zpk2tf(z, p, k)
A:scipy.signal.tests.test_filter_design.b_r->numpy.array([1.0])
A:scipy.signal.tests.test_filter_design.a_r->numpy.array([1.0])
A:scipy.signal.tests.test_filter_design.(w, h)->freqz([1.0], worN=8, whole=True)
A:scipy.signal.tests.test_filter_design.b_matlab->numpy.array([2.150733144728282e-11, 1.720586515782626e-10, 6.02205280523919e-10, 1.204410561047838e-09, 1.505513201309798e-09, 1.204410561047838e-09, 6.02205280523919e-10, 1.720586515782626e-10, 2.150733144728282e-11])
A:scipy.signal.tests.test_filter_design.a_matlab->numpy.array([1.0, -7.782402035027959, 26.54354569747454, -51.82182531666387, 63.34127355102684, -49.63358186631157, 24.34862182949389, -6.836925348604676, 0.841293494444914])
A:scipy.signal.tests.test_filter_design.b_norm_in->numpy.array([1.5543135865293012e-06, 1.2434508692234413e-05, 4.352078042282045e-05, 8.70415608456409e-05, 0.00010880195105705122, 8.704156084564097e-05, 4.352078042282045e-05, 1.2434508692234413e-05, 1.5543135865293012e-06])
A:scipy.signal.tests.test_filter_design.a_norm_in->numpy.array([72269.02590912717, -562426.6143046797, 1918276.1917308895, -3745112.8364682454, 4577612.139376277, -3586970.6138592605, 1759651.1818472347, -494097.93515707983, 60799.46134721965])
A:scipy.signal.tests.test_filter_design.(b_output, a_output)->normalize(b_norm_in, a_norm_in)
scipy.signal.tests.test_TestFreqz(TestCase)
scipy.signal.tests.test_TestFreqz.test_basic(self)
scipy.signal.tests.test_TestFreqz.test_basic_whole(self)
scipy.signal.tests.test_TestFreqz.test_plot(self)
scipy.signal.tests.test_TestFreqz.test_ticket1441(self)
scipy.signal.tests.test_TestNormalize(TestCase)
scipy.signal.tests.test_TestNormalize.test_allclose(self)
scipy.signal.tests.test_TestTf2zpk(TestCase)
scipy.signal.tests.test_TestTf2zpk.test_bad_filter(self)
scipy.signal.tests.test_TestTf2zpk.test_simple(self)
scipy.signal.tests.test_TestZpk2Tf(TestCase)
scipy.signal.tests.test_TestZpk2Tf.test_identity(self)
scipy.signal.tests.test_filter_design.TestFreqz(TestCase)
scipy.signal.tests.test_filter_design.TestFreqz.test_basic(self)
scipy.signal.tests.test_filter_design.TestFreqz.test_basic_whole(self)
scipy.signal.tests.test_filter_design.TestFreqz.test_plot(self)
scipy.signal.tests.test_filter_design.TestFreqz.test_ticket1441(self)
scipy.signal.tests.test_filter_design.TestNormalize(TestCase)
scipy.signal.tests.test_filter_design.TestNormalize.test_allclose(self)
scipy.signal.tests.test_filter_design.TestTf2zpk(TestCase)
scipy.signal.tests.test_filter_design.TestTf2zpk.test_bad_filter(self)
scipy.signal.tests.test_filter_design.TestTf2zpk.test_simple(self)
scipy.signal.tests.test_filter_design.TestZpk2Tf(TestCase)
scipy.signal.tests.test_filter_design.TestZpk2Tf.test_identity(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/misc/doccer.py----------------------------------------
A:scipy.misc.doccer.lines->docstring.expandtabs().splitlines()
A:scipy.misc.doccer.icount->indentcount_lines(lines)
A:scipy.misc.doccer.indented[name]->'\n'.join(newlines)
A:scipy.misc.doccer.stripped->line.lstrip()
A:scipy.misc.doccer.indentno->min(indentno, len(line) - len(stripped))
A:scipy.misc.doccer.docdict->unindent_dict(docdict)
A:scipy.misc.doccer.f.__doc__->docformat(f.__doc__, docdict)
A:scipy.misc.doccer.can_dict[name]->unindent_string(dstr)
scipy.misc.doccer.docformat(docstring,docdict=None)
scipy.misc.doccer.filldoc(docdict,unindent_params=True)
scipy.misc.doccer.indentcount_lines(lines)
scipy.misc.doccer.unindent_dict(docdict)
scipy.misc.doccer.unindent_string(docstring)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/misc/__init__.py----------------------------------------
scipy.misc.__init__._info(object=None,maxwidth=76,output=sys.stdout,toplevel='scipy')
scipy.misc.__init__.info(object=None,maxwidth=76,output=sys.stdout,toplevel='scipy')


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/misc/setupscons.py----------------------------------------
A:scipy.misc.setupscons.config->Configuration('misc', parent_package, top_path)
scipy.misc.setupscons.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/misc/pilutil.py----------------------------------------
A:scipy.misc.pilutil.cmin->amin(ravel(data))
A:scipy.misc.pilutil.cmax->amax(ravel(data))
A:scipy.misc.pilutil.im->imrotate(arr, -th)
A:scipy.misc.pilutil.data->asarray(arr)
A:scipy.misc.pilutil.shape->list(data.shape)
A:scipy.misc.pilutil.data32->asarray(arr).astype(numpy.uint32)
A:scipy.misc.pilutil.image->Image.fromstring(mode, shape, strdata)
A:scipy.misc.pilutil.bytedata->bytescale(data, high=high, low=low, cmin=cmin, cmax=cmax)
A:scipy.misc.pilutil.ca->numpy.flatnonzero(asarray(shape) == 4)
A:scipy.misc.pilutil.strdata->transpose(bytedata, (1, 2, 0)).tostring()
A:scipy.misc.pilutil.arr->asarray(arr)
A:scipy.misc.pilutil.(fnum, fname)->tempfile.mkstemp('.png')
A:scipy.misc.pilutil.cmd->os.environ.get('SCIPY_PIL_IMAGE_VIEWER', 'see')
A:scipy.misc.pilutil.status->os.system('%s %s' % (cmd, fname))
A:scipy.misc.pilutil.ts->type(size)
A:scipy.misc.pilutil.size->(array(im.size) * size).astype(int)
A:scipy.misc.pilutil.imnew->imrotate(arr, -th).resize(size, resample=func[interp])
A:scipy.misc.pilutil.s->zeros((arr.shape[1], len(theta)), float)
A:scipy.misc.pilutil.s[:, k]->sum(im, axis=0)
A:scipy.misc.pilutil.radon->numpy.deprecate(radon)
scipy.misc.bytescale(data,cmin=None,cmax=None,high=255,low=0)
scipy.misc.fromimage(im,flatten=0)
scipy.misc.imfilter(arr,ftype)
scipy.misc.imread(name,flatten=0)
scipy.misc.imresize(arr,size,interp='bilinear',mode=None)
scipy.misc.imrotate(arr,angle,interp='bilinear')
scipy.misc.imsave(name,arr)
scipy.misc.imshow(arr)
scipy.misc.pilutil.bytescale(data,cmin=None,cmax=None,high=255,low=0)
scipy.misc.pilutil.fromimage(im,flatten=0)
scipy.misc.pilutil.imfilter(arr,ftype)
scipy.misc.pilutil.imread(name,flatten=0)
scipy.misc.pilutil.imresize(arr,size,interp='bilinear',mode=None)
scipy.misc.pilutil.imrotate(arr,angle,interp='bilinear')
scipy.misc.pilutil.imsave(name,arr)
scipy.misc.pilutil.imshow(arr)
scipy.misc.pilutil.radon(arr,theta=None)
scipy.misc.pilutil.toimage(arr,high=255,low=0,cmin=None,cmax=None,pal=None,mode=None,channel_axis=None)
scipy.misc.radon(arr,theta=None)
scipy.misc.toimage(arr,high=255,low=0,cmin=None,cmax=None,pal=None,mode=None,channel_axis=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/misc/setup.py----------------------------------------
A:scipy.misc.setup.config->Configuration('misc', parent_package, top_path)
scipy.misc.setup.configuration(parent_package='',top_path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/misc/common.py----------------------------------------
A:scipy.misc.common.a->rollaxis(a, axis)
A:scipy.misc.common.a_max->rollaxis(a, axis).max(axis=0)
A:scipy.misc.common.b->rollaxis(b, axis)
A:scipy.misc.common.out->log(sum(exp(a - a_max), axis=0))
A:scipy.misc.common.n->asarray(n)
A:scipy.misc.common.sv->scipy.special.errprint(sv)
A:scipy.misc.common.vals->exp(lgam(N + 1) - lgam(N - k + 1) - lgam(k + 1))
A:scipy.misc.common.oddn->extract(cond1, n)
A:scipy.misc.common.evenn->extract(cond2, n)
A:scipy.misc.common.x->arange(-ho, ho + 1.0)
A:scipy.misc.common.X->hstack([X, x ** k])
A:scipy.misc.common.weights->central_diff_weights(order, n)
A:scipy.misc.common.an->asarray(an)
A:scipy.misc.common.Akj->eye(N + 1, n + 1)
A:scipy.misc.common.Bkj->zeros((N + 1, m), 'd')
A:scipy.misc.common.C->hstack((Akj, Bkj))
A:scipy.misc.common.pq->scipy.linalg.solve(C, an)
A:scipy.misc.common.fname->os.path.join(os.path.dirname(__file__), 'ascent.dat')
A:scipy.misc.common.f->open(fname, 'rb')
A:scipy.misc.common.lena->array(pickle.load(f))
A:scipy.misc.common.ascent->array(pickle.load(f))
A:scipy.misc.common.rawdata->open(os.path.join(os.path.dirname(__file__), 'face.dat')).read()
A:scipy.misc.common.data->bz2.decompress(rawdata)
A:scipy.misc.common.face->(0.21 * face[:, :, 0] + 0.71 * face[:, :, 1] + 0.07 * face[:, :, 2]).astype('uint8')
scipy.misc.ascent()
scipy.misc.central_diff_weights(Np,ndiv=1)
scipy.misc.comb(N,k,exact=0)
scipy.misc.common.ascent()
scipy.misc.common.central_diff_weights(Np,ndiv=1)
scipy.misc.common.comb(N,k,exact=0)
scipy.misc.common.derivative(func,x0,dx=1.0,n=1,args=(),order=3)
scipy.misc.common.face(gray=False)
scipy.misc.common.factorial(n,exact=0)
scipy.misc.common.factorial2(n,exact=False)
scipy.misc.common.factorialk(n,k,exact=1)
scipy.misc.common.lena()
scipy.misc.common.logsumexp(a,axis=None,b=None)
scipy.misc.common.pade(an,m)
scipy.misc.derivative(func,x0,dx=1.0,n=1,args=(),order=3)
scipy.misc.face(gray=False)
scipy.misc.factorial(n,exact=0)
scipy.misc.factorial2(n,exact=False)
scipy.misc.factorialk(n,k,exact=1)
scipy.misc.lena()
scipy.misc.logsumexp(a,axis=None,b=None)
scipy.misc.pade(an,m)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/misc/tests/test_doccer.py----------------------------------------
A:scipy.misc.tests.test_doccer.d2->scipy.misc.doccer.unindent_dict(doc_dict)
A:scipy.misc.tests.test_doccer.udd->scipy.misc.doccer.unindent_dict(doc_dict)
A:scipy.misc.tests.test_doccer.formatted->scipy.misc.doccer.docformat(single_doc, doc_dict)
A:scipy.misc.tests.test_doccer.decorator->scipy.misc.doccer.filldoc(doc_dict, False)
scipy.misc.tests.test_doccer.test_decorator()
scipy.misc.tests.test_doccer.test_docformat()
scipy.misc.tests.test_doccer.test_unindent()
scipy.misc.tests.test_doccer.test_unindent_dict()


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/misc/tests/test_pilutil.py----------------------------------------
A:scipy.misc.tests.test_pilutil._pilskip->numpy.testing.dec.skipif(not _have_PIL, 'Need to import PIL for this test')
A:scipy.misc.tests.test_pilutil.datapath->os.path.dirname(__file__)
A:scipy.misc.tests.test_pilutil.im->numpy.random.random((15, 30))
A:scipy.misc.tests.test_pilutil.im1->scipy.misc.imresize(im, T(1.101))
A:scipy.misc.tests.test_pilutil.im2->scipy.misc.imresize(im, (30, 60), interp='nearest')
A:scipy.misc.tests.test_pilutil.x->numpy.array([40, 60, 120, 200, 300, 500])
A:scipy.misc.tests.test_pilutil.y->numpy.array([0, 1, 2])
A:scipy.misc.tests.test_pilutil.res_lowhigh->scipy.misc.bytescale(x, low=10, high=143)
A:scipy.misc.tests.test_pilutil.res_cmincmax->scipy.misc.bytescale(x, cmin=60, cmax=300)
A:scipy.misc.tests.test_pilutil.fp->open(filename, 'rb')
A:scipy.misc.tests.test_pilutil.img->scipy.misc.fromimage(PIL.Image.open(fp))
scipy.misc.tests.test_TestPILUtil(TestCase)
scipy.misc.tests.test_TestPILUtil.test_bytescale(self)
scipy.misc.tests.test_TestPILUtil.test_bytescale_keywords(self)
scipy.misc.tests.test_TestPILUtil.test_imresize(self)
scipy.misc.tests.test_TestPILUtil.test_imresize2(self)
scipy.misc.tests.test_TestPILUtil.test_imresize3(self)
scipy.misc.tests.test_pilutil.TestPILUtil(TestCase)
scipy.misc.tests.test_pilutil.TestPILUtil.test_bytescale(self)
scipy.misc.tests.test_pilutil.TestPILUtil.test_bytescale_keywords(self)
scipy.misc.tests.test_pilutil.TestPILUtil.test_imresize(self)
scipy.misc.tests.test_pilutil.TestPILUtil.test_imresize2(self)
scipy.misc.tests.test_pilutil.TestPILUtil.test_imresize3(self)
scipy.misc.tests.test_pilutil.test_fromimage()
scipy.misc.tests.test_pilutil.tst_fromimage(filename,irange)
scipy.misc.tests.test_test_fromimage()
scipy.misc.tests.test_tst_fromimage(filename,irange)


----------------------------------------/dataset/nuaa/anaconda3/envs/scipy0.12.0/lib/python3.4/site-packages/scipy/misc/tests/test_common.py----------------------------------------
A:scipy.misc.tests.test_common.(nump, denomp)->pade(an, 3)
A:scipy.misc.tests.test_common.a->numpy.arange(200)
A:scipy.misc.tests.test_common.desired->numpy.log(np.sum(b * np.exp(a)))
A:scipy.misc.tests.test_common.x->numpy.array([1e-40] * 100000)
A:scipy.misc.tests.test_common.logx->numpy.log(x)
A:scipy.misc.tests.test_common.X->numpy.vstack((x, x))
A:scipy.misc.tests.test_common.logX->numpy.vstack((logx, logx))
A:scipy.misc.tests.test_common.b->numpy.linspace(1, 1000, 100000.0)
A:scipy.misc.tests.test_common.B->numpy.vstack((b, b))
scipy.misc.tests.test_common.test_logsumexp()
scipy.misc.tests.test_common.test_logsumexp_b()
scipy.misc.tests.test_common.test_pade_4term_exp()
scipy.misc.tests.test_common.test_pade_trivial()
scipy.misc.tests.test_test_logsumexp()
scipy.misc.tests.test_test_logsumexp_b()
scipy.misc.tests.test_test_pade_4term_exp()
scipy.misc.tests.test_test_pade_trivial()

