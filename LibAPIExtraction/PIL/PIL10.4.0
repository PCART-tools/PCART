
----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/GimpGradientFile.py----------------------------------------
A:PIL.GimpGradientFile.scale->segment((xm - x0) / w, (x - x0) / w)
A:PIL.GimpGradientFile.r->o8(int(255 * ((rgb1[0] - rgb0[0]) * scale + rgb0[0]) + 0.5))
A:PIL.GimpGradientFile.g->o8(int(255 * ((rgb1[1] - rgb0[1]) * scale + rgb0[1]) + 0.5))
A:PIL.GimpGradientFile.b->o8(int(255 * ((rgb1[2] - rgb0[2]) * scale + rgb0[2]) + 0.5))
A:PIL.GimpGradientFile.a->o8(int(255 * ((rgb1[3] - rgb0[3]) * scale + rgb0[3]) + 0.5))
A:PIL.GimpGradientFile.line->fp.readline().strip()
A:PIL.GimpGradientFile.count->int(line)
A:PIL.GimpGradientFile.s->fp.readline().split()
A:PIL.GimpGradientFile.cspace->int(s[12])
PIL.GimpGradientFile.GimpGradientFile(self,fp:IO[bytes])
PIL.GimpGradientFile.GimpGradientFile.__init__(self,fp:IO[bytes])
PIL.GimpGradientFile.GradientFile
PIL.GimpGradientFile.GradientFile.getpalette(self,entries:int=256)->tuple[bytes, str]
PIL.GimpGradientFile.curved(middle:float,pos:float)->float
PIL.GimpGradientFile.linear(middle:float,pos:float)->float
PIL.GimpGradientFile.sine(middle:float,pos:float)->float
PIL.GimpGradientFile.sphere_decreasing(middle:float,pos:float)->float
PIL.GimpGradientFile.sphere_increasing(middle:float,pos:float)->float


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/BmpImagePlugin.py----------------------------------------
A:PIL.BmpImagePlugin.header_data->ImageFile._safe_read(self.fp, file_info['header_size'] - 4)
A:PIL.BmpImagePlugin.file_info['width']->i32(header_data, 0)
A:PIL.BmpImagePlugin.file_info['height']->i16(header_data, 2)
A:PIL.BmpImagePlugin.file_info['planes']->i16(header_data, 8)
A:PIL.BmpImagePlugin.file_info['bits']->i16(header_data, 10)
A:PIL.BmpImagePlugin.file_info['compression']->i32(header_data, 12)
A:PIL.BmpImagePlugin.file_info['data_size']->i32(header_data, 16)
A:PIL.BmpImagePlugin.file_info['colors']->i32(header_data, 28)
A:PIL.BmpImagePlugin.self.info['dpi']->tuple((x / 39.3701 for x in file_info['pixels_per_meter']))
A:PIL.BmpImagePlugin.file_info[mask]->i32(read(4))
A:PIL.BmpImagePlugin.(self._mode, raw_mode)->BIT2MODE.get(file_info['bits'], (None, None))
A:PIL.BmpImagePlugin.palette->im.im.getpalette('RGB', 'BGRX')
A:PIL.BmpImagePlugin.self.palette->ImagePalette.raw('BGRX' if padding == 4 else 'BGR', palette)
A:PIL.BmpImagePlugin.head_data->self.fp.read(14)
A:PIL.BmpImagePlugin.offset->i32(head_data, 10)
A:PIL.BmpImagePlugin.data->bytearray()
A:PIL.BmpImagePlugin.pixels->self.fd.read(1)
A:PIL.BmpImagePlugin.byte->self.fd.read(1)
A:PIL.BmpImagePlugin.num_pixels->max(0, self.state.xsize - x)
A:PIL.BmpImagePlugin.first_pixel->o8(byte[0] >> 4)
A:PIL.BmpImagePlugin.second_pixel->o8(byte[0] & 15)
A:PIL.BmpImagePlugin.bytes_read->self.fd.read(byte_count)
A:PIL.BmpImagePlugin.(right, up)->self.fd.read(2)
A:PIL.BmpImagePlugin.dpi->info.get('dpi', (96, 96))
A:PIL.BmpImagePlugin.ppm->tuple((int(x * 39.3701 + 0.5) for x in dpi))
PIL.BmpImagePlugin.BmpImageFile(ImageFile.ImageFile)
PIL.BmpImagePlugin.BmpImageFile._bitmap(self,header=0,offset=0)
PIL.BmpImagePlugin.BmpImageFile._open(self)->None
PIL.BmpImagePlugin.BmpRleDecoder(ImageFile.PyDecoder)
PIL.BmpImagePlugin.BmpRleDecoder.decode(self,buffer:bytes)->tuple[int, int]
PIL.BmpImagePlugin.DibImageFile(BmpImageFile)
PIL.BmpImagePlugin.DibImageFile._open(self)->None
PIL.BmpImagePlugin._accept(prefix:bytes)->bool
PIL.BmpImagePlugin._dib_accept(prefix:bytes)->bool
PIL.BmpImagePlugin._dib_save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None
PIL.BmpImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes,bitmap_header:bool=True)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/PngImagePlugin.py----------------------------------------
A:PIL.PngImagePlugin.logger->logging.getLogger(__name__)
A:PIL.PngImagePlugin._simple_palette->re.compile(b'^\xff*\x00\xff*$')
A:PIL.PngImagePlugin.dobj->zlib.decompressobj()
A:PIL.PngImagePlugin.plaintext->zlib.decompressobj().decompress(s, MAX_TEXT_CHUNK)
A:PIL.PngImagePlugin.(cid, pos, length)->str.__new__(cls, text).png.read()
A:PIL.PngImagePlugin.s->ImageFile._safe_read(self.fp, length)
A:PIL.PngImagePlugin.pos->str.__new__(cls, text).fp.tell()
A:PIL.PngImagePlugin.length->i32(s)
A:PIL.PngImagePlugin.crc1->_crc32(data, _crc32(cid))
A:PIL.PngImagePlugin.crc2->i32(self.fp.read(4))
A:PIL.PngImagePlugin.self->str.__new__(cls, text)
A:PIL.PngImagePlugin.key->key.encode('latin-1', 'strict').encode('latin-1', 'strict')
A:PIL.PngImagePlugin.value->value.encode('latin-1', 'strict').encode('latin-1', 'strict')
A:PIL.PngImagePlugin.lang->lang.decode('utf-8', 'strict').decode('utf-8', 'strict')
A:PIL.PngImagePlugin.tkey->tkey.encode('utf-8', 'strict').encode('utf-8', 'strict')
A:PIL.PngImagePlugin.self.im_info->str.__new__(cls, text).rewind_state['info'].copy()
A:PIL.PngImagePlugin.i->ImageFile._safe_read(self.fp, length).find(b'\x00')
A:PIL.PngImagePlugin.icc_profile->_safe_zlib_decompress(s[i + 2:])
A:PIL.PngImagePlugin.self.im_info['transparency']->i16(s)
A:PIL.PngImagePlugin.raw_vals->struct.unpack('>%dI' % (len(s) // 4), s)
A:PIL.PngImagePlugin.self.im_info['chromaticity']->tuple((elt / 100000.0 for elt in raw_vals))
A:PIL.PngImagePlugin.(k, v)->ImageFile._safe_read(self.fp, length).split(b'\x00', 1)
A:PIL.PngImagePlugin.k->k.decode('latin-1', 'strict').decode('latin-1', 'strict')
A:PIL.PngImagePlugin.v_str->v.decode('utf-8', 'strict').decode('latin-1', 'replace')
A:PIL.PngImagePlugin.v->v.decode('utf-8', 'strict').decode('utf-8', 'strict')
A:PIL.PngImagePlugin.rs->ImageFile._safe_read(self.fp, length)
A:PIL.PngImagePlugin.(k, r)->r.split(b'\x00', 1)
A:PIL.PngImagePlugin.(lang, tk, v)->r.split(b'\x00', 2)
A:PIL.PngImagePlugin.tk->tk.decode('utf-8', 'strict').decode('utf-8', 'strict')
A:PIL.PngImagePlugin.self.im_info[k]self.im_text[k]->iTXt(v, lang, tk)
A:PIL.PngImagePlugin.n_frames->i32(s)
A:PIL.PngImagePlugin.self.im_info['loop']->i32(s, 4)
A:PIL.PngImagePlugin.seq->i32(s)
A:PIL.PngImagePlugin.self.default_image->str.__new__(cls, text).info.get('default_image', False)
A:PIL.PngImagePlugin.self.palette->ImagePalette.raw(rawmode, data)
A:PIL.PngImagePlugin.self.__rewind->str.__new__(cls, text)._fp.tell()
A:PIL.PngImagePlugin.self.dispose_op->str.__new__(cls, text).info.get('disposal')
A:PIL.PngImagePlugin.self.blend_op->str.__new__(cls, text).info.get('blend')
A:PIL.PngImagePlugin.self.dispose_extent->str.__new__(cls, text).info.get('bbox')
A:PIL.PngImagePlugin.self._prev_im->str.__new__(cls, text).im.copy()
A:PIL.PngImagePlugin.self.dispose->str.__new__(cls, text)._crop(self.dispose, self.dispose_extent)
A:PIL.PngImagePlugin.read_bytes->min(read_bytes, self.__idat)
A:PIL.PngImagePlugin.updated->str.__new__(cls, text)._crop(self.im, self.dispose_extent)
A:PIL.PngImagePlugin.mask->str.__new__(cls, text)._crop(self.im, self.dispose_extent).convert('RGBA')
A:PIL.PngImagePlugin.data->b''.join(data)
A:PIL.PngImagePlugin.crc->o32(_crc32(data, _crc32(cid)))
A:PIL.PngImagePlugin.duration->_write_multiple_frames(im, fp, chunk, mode, rawmode, default_image, append_images).encoderinfo.get('duration')
A:PIL.PngImagePlugin.loop->_write_multiple_frames(im, fp, chunk, mode, rawmode, default_image, append_images).encoderinfo.get('loop', im.info.get('loop', 0))
A:PIL.PngImagePlugin.disposal->_write_multiple_frames(im, fp, chunk, mode, rawmode, default_image, append_images).encoderinfo.get('disposal', im.info.get('disposal', Disposal.OP_NONE))
A:PIL.PngImagePlugin.blend->_write_multiple_frames(im, fp, chunk, mode, rawmode, default_image, append_images).encoderinfo.get('blend', im.info.get('blend', Blend.OP_SOURCE))
A:PIL.PngImagePlugin.chain->itertools.chain([im], append_images)
A:PIL.PngImagePlugin.im_frame->im_frame.crop(bbox).crop(bbox)
A:PIL.PngImagePlugin.encoderinfo->_write_multiple_frames(im, fp, chunk, mode, rawmode, default_image, append_images).encoderinfo.copy()
A:PIL.PngImagePlugin.prev_disposal->previous['encoderinfo'].get('disposal')
A:PIL.PngImagePlugin.prev_blend->previous['encoderinfo'].get('blend')
A:PIL.PngImagePlugin.base_im->previous['im'].copy()
A:PIL.PngImagePlugin.dispose->dispose.crop(bbox).crop(bbox)
A:PIL.PngImagePlugin.delta->ImageChops.subtract_modulo(im_frame.convert('RGBA'), base_im.convert('RGBA'))
A:PIL.PngImagePlugin.bbox->ImageChops.subtract_modulo(im_frame.convert('RGBA'), base_im.convert('RGBA')).getbbox(alpha_only=False)
A:PIL.PngImagePlugin.im->_write_multiple_frames(im, fp, chunk, mode, rawmode, default_image, append_images)
A:PIL.PngImagePlugin.frame_duration->int(round(encoderinfo.get('duration', 0)))
A:PIL.PngImagePlugin.frame_disposal->_write_multiple_frames(im, fp, chunk, mode, rawmode, default_image, append_images).encoderinfo.copy().get('disposal', disposal)
A:PIL.PngImagePlugin.frame_blend->_write_multiple_frames(im, fp, chunk, mode, rawmode, default_image, append_images).encoderinfo.copy().get('blend', blend)
A:PIL.PngImagePlugin.fdat_chunks->_fdat(fp, chunk, seq_num)
A:PIL.PngImagePlugin.default_image->_write_multiple_frames(im, fp, chunk, mode, rawmode, default_image, append_images).encoderinfo.get('default_image', im.info.get('default_image'))
A:PIL.PngImagePlugin.modes->set()
A:PIL.PngImagePlugin.sizes->set()
A:PIL.PngImagePlugin.append_images->_write_multiple_frames(im, fp, chunk, mode, rawmode, default_image, append_images).encoderinfo.get('append_images', [])
A:PIL.PngImagePlugin.mode->set().pop()
A:PIL.PngImagePlugin.size->tuple((max((frame_size[i] for frame_size in sizes)) for i in range(2)))
A:PIL.PngImagePlugin.colors->max(min(len(im.palette.getdata()[1]) // 3, 256), 1)
A:PIL.PngImagePlugin.icc->_write_multiple_frames(im, fp, chunk, mode, rawmode, default_image, append_images).encoderinfo.get('icc_profile', im.info.get('icc_profile'))
A:PIL.PngImagePlugin.info->_write_multiple_frames(im, fp, chunk, mode, rawmode, default_image, append_images).encoderinfo.get('pnginfo')
A:PIL.PngImagePlugin.transparency->max(0, min(65535, transparency))
A:PIL.PngImagePlugin.alpha->_write_multiple_frames(im, fp, chunk, mode, rawmode, default_image, append_images).im.getpalette('RGBA', 'A')
A:PIL.PngImagePlugin.dpi->_write_multiple_frames(im, fp, chunk, mode, rawmode, default_image, append_images).encoderinfo.get('dpi')
A:PIL.PngImagePlugin.exif->exif.tobytes(8).tobytes(8)
A:PIL.PngImagePlugin.fp->collector()
PIL.PngImagePlugin.Blend(IntEnum)
PIL.PngImagePlugin.ChunkStream(self,fp:IO[bytes])
PIL.PngImagePlugin.ChunkStream.__enter__(self)->ChunkStream
PIL.PngImagePlugin.ChunkStream.__exit__(self,*args:object)->None
PIL.PngImagePlugin.ChunkStream.__init__(self,fp:IO[bytes])
PIL.PngImagePlugin.ChunkStream.call(self,cid,pos,length)
PIL.PngImagePlugin.ChunkStream.close(self)->None
PIL.PngImagePlugin.ChunkStream.crc(self,cid:bytes,data:bytes)->None
PIL.PngImagePlugin.ChunkStream.crc_skip(self,cid:bytes,data:bytes)->None
PIL.PngImagePlugin.ChunkStream.push(self,cid:bytes,pos:int,length:int)->None
PIL.PngImagePlugin.ChunkStream.read(self)->tuple[bytes, int, int]
PIL.PngImagePlugin.ChunkStream.verify(self,endchunk:bytes=b'IEND')->list[bytes]
PIL.PngImagePlugin.Disposal(IntEnum)
PIL.PngImagePlugin.PngImageFile(ImageFile.ImageFile)
PIL.PngImagePlugin.PngImageFile._getexif(self)->dict[str, Any] | None
PIL.PngImagePlugin.PngImageFile._open(self)->None
PIL.PngImagePlugin.PngImageFile._seek(self,frame:int,rewind:bool=False)->None
PIL.PngImagePlugin.PngImageFile.getexif(self)->Image.Exif
PIL.PngImagePlugin.PngImageFile.load_end(self)->None
PIL.PngImagePlugin.PngImageFile.load_prepare(self)->None
PIL.PngImagePlugin.PngImageFile.load_read(self,read_bytes:int)->bytes
PIL.PngImagePlugin.PngImageFile.seek(self,frame:int)->None
PIL.PngImagePlugin.PngImageFile.tell(self)->int
PIL.PngImagePlugin.PngImageFile.text(self)
PIL.PngImagePlugin.PngImageFile.verify(self)->None
PIL.PngImagePlugin.PngInfo(self)
PIL.PngImagePlugin.PngInfo.__init__(self)
PIL.PngImagePlugin.PngInfo.add(self,cid:bytes,data:bytes,after_idat:bool=False)->None
PIL.PngImagePlugin.PngInfo.add_itxt(self,key:str|bytes,value:str|bytes,lang:str|bytes='',tkey:str|bytes='',zip:bool=False)->None
PIL.PngImagePlugin.PngInfo.add_text(self,key:str|bytes,value:str|bytes|iTXt,zip:bool=False)->None
PIL.PngImagePlugin.PngStream(self,fp)
PIL.PngImagePlugin.PngStream.__init__(self,fp)
PIL.PngImagePlugin.PngStream.check_text_memory(self,chunklen:int)->None
PIL.PngImagePlugin.PngStream.chunk_IDAT(self,pos:int,length:int)->NoReturn
PIL.PngImagePlugin.PngStream.chunk_IEND(self,pos:int,length:int)->NoReturn
PIL.PngImagePlugin.PngStream.chunk_IHDR(self,pos:int,length:int)->bytes
PIL.PngImagePlugin.PngStream.chunk_PLTE(self,pos:int,length:int)->bytes
PIL.PngImagePlugin.PngStream.chunk_acTL(self,pos:int,length:int)->bytes
PIL.PngImagePlugin.PngStream.chunk_cHRM(self,pos:int,length:int)->bytes
PIL.PngImagePlugin.PngStream.chunk_eXIf(self,pos:int,length:int)->bytes
PIL.PngImagePlugin.PngStream.chunk_fcTL(self,pos:int,length:int)->bytes
PIL.PngImagePlugin.PngStream.chunk_fdAT(self,pos:int,length:int)->bytes
PIL.PngImagePlugin.PngStream.chunk_gAMA(self,pos:int,length:int)->bytes
PIL.PngImagePlugin.PngStream.chunk_iCCP(self,pos:int,length:int)->bytes
PIL.PngImagePlugin.PngStream.chunk_iTXt(self,pos:int,length:int)->bytes
PIL.PngImagePlugin.PngStream.chunk_pHYs(self,pos:int,length:int)->bytes
PIL.PngImagePlugin.PngStream.chunk_sRGB(self,pos:int,length:int)->bytes
PIL.PngImagePlugin.PngStream.chunk_tEXt(self,pos:int,length:int)->bytes
PIL.PngImagePlugin.PngStream.chunk_tRNS(self,pos:int,length:int)->bytes
PIL.PngImagePlugin.PngStream.chunk_zTXt(self,pos:int,length:int)->bytes
PIL.PngImagePlugin.PngStream.rewind(self)->None
PIL.PngImagePlugin.PngStream.save_rewind(self)->None
PIL.PngImagePlugin._accept(prefix:bytes)->bool
PIL.PngImagePlugin._crc32(data,seed=0)
PIL.PngImagePlugin._fdat(self,fp,chunk,seq_num)
PIL.PngImagePlugin._fdat.__init__(self,fp,chunk,seq_num)
PIL.PngImagePlugin._fdat.write(self,data:bytes)->None
PIL.PngImagePlugin._idat(self,fp,chunk)
PIL.PngImagePlugin._idat.__init__(self,fp,chunk)
PIL.PngImagePlugin._idat.write(self,data:bytes)->None
PIL.PngImagePlugin._safe_zlib_decompress(s)
PIL.PngImagePlugin._save(im,fp,filename,chunk=putchunk,save_all=False)
PIL.PngImagePlugin._save_all(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None
PIL.PngImagePlugin._write_multiple_frames(im,fp,chunk,mode,rawmode,default_image,append_images)
PIL.PngImagePlugin.getchunks(im,**params)
PIL.PngImagePlugin.iTXt(cls,text,lang=None,tkey=None)
PIL.PngImagePlugin.iTXt.__new__(cls,text,lang=None,tkey=None)
PIL.PngImagePlugin.putchunk(fp,cid,*data)


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/PSDraw.py----------------------------------------
A:PIL.PSDraw.font_bytes->bytes(font, 'UTF-8')
A:PIL.PSDraw.text_bytes->b'\\)'.join(text_bytes.split(b')'))
A:PIL.PSDraw.xmax->float(box[2] - box[0])
A:PIL.PSDraw.ymax->float(box[3] - box[1])
PIL.PSDraw.PSDraw(self,fp=None)
PIL.PSDraw.PSDraw.__init__(self,fp=None)
PIL.PSDraw.PSDraw.begin_document(self,id:str|None=None)->None
PIL.PSDraw.PSDraw.end_document(self)->None
PIL.PSDraw.PSDraw.image(self,box:tuple[int,int,int,int],im:Image.Image,dpi:int|None=None)->None
PIL.PSDraw.PSDraw.line(self,xy0:tuple[int,int],xy1:tuple[int,int])->None
PIL.PSDraw.PSDraw.rectangle(self,box:tuple[int,int,int,int])->None
PIL.PSDraw.PSDraw.setfont(self,font:str,size:int)->None
PIL.PSDraw.PSDraw.text(self,xy:tuple[int,int],text:str)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/__main__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/FtexImagePlugin.py----------------------------------------
A:PIL.FtexImagePlugin.self._size->struct.unpack('<2i', self.fp.read(8))
A:PIL.FtexImagePlugin.(mipmap_count, format_count)->struct.unpack('<2i', self.fp.read(8))
A:PIL.FtexImagePlugin.(format, where)->struct.unpack('<2i', self.fp.read(8))
A:PIL.FtexImagePlugin.(mipmap_size,)->struct.unpack('<i', self.fp.read(4))
A:PIL.FtexImagePlugin.data->self.fp.read(mipmap_size)
A:PIL.FtexImagePlugin.self.fp->BytesIO(data)
PIL.FtexImagePlugin.Format(IntEnum)
PIL.FtexImagePlugin.FtexImageFile(ImageFile.ImageFile)
PIL.FtexImagePlugin.FtexImageFile._open(self)->None
PIL.FtexImagePlugin.FtexImageFile.load_seek(self,pos:int)->None
PIL.FtexImagePlugin._accept(prefix:bytes)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/__init__.py----------------------------------------
PIL.__init__.UnidentifiedImageError(OSError)


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/MicImagePlugin.py----------------------------------------
A:PIL.MicImagePlugin.self.ole->olefile.OleFileIO(self.fp)
A:PIL.MicImagePlugin.self._n_frames->len(self.images)
A:PIL.MicImagePlugin.self.fp->self.ole.openstream(filename)
PIL.MicImagePlugin.MicImageFile(TiffImagePlugin.TiffImageFile)
PIL.MicImagePlugin.MicImageFile.__exit__(self,*args:object)->None
PIL.MicImagePlugin.MicImageFile._open(self)->None
PIL.MicImagePlugin.MicImageFile.close(self)->None
PIL.MicImagePlugin.MicImageFile.seek(self,frame)
PIL.MicImagePlugin.MicImageFile.tell(self)->int
PIL.MicImagePlugin._accept(prefix:bytes)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/WmfImagePlugin.py----------------------------------------
A:PIL.WmfImagePlugin.s->self.fp.read(80)
A:PIL.WmfImagePlugin.self._inch->word(s, 14)
A:PIL.WmfImagePlugin.x0->_long(s, 8)
A:PIL.WmfImagePlugin.y0->_long(s, 12)
A:PIL.WmfImagePlugin.x1->_long(s, 16)
A:PIL.WmfImagePlugin.y1->_long(s, 20)
A:PIL.WmfImagePlugin.loader->self._load()
PIL.WmfImagePlugin.WmfStubImageFile(ImageFile.StubImageFile)
PIL.WmfImagePlugin.WmfStubImageFile._load(self)->ImageFile.StubHandler | None
PIL.WmfImagePlugin.WmfStubImageFile._open(self)->None
PIL.WmfImagePlugin.WmfStubImageFile.load(self,dpi=None)
PIL.WmfImagePlugin._accept(prefix:bytes)->bool
PIL.WmfImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None
PIL.WmfImagePlugin.register_handler(handler:ImageFile.StubHandler|None)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/PcfFontFile.py----------------------------------------
A:PIL.PcfFontFile.magic->l32(fp.read(4))
A:PIL.PcfFontFile.count->l32(fp.read(4))
A:PIL.PcfFontFile.type->l32(fp.read(4))
A:PIL.PcfFontFile.self.info->self._load_properties()
A:PIL.PcfFontFile.metrics->self._load_metrics()
A:PIL.PcfFontFile.bitmaps->self._load_bitmaps(metrics)
A:PIL.PcfFontFile.encoding->self._load_encoding()
A:PIL.PcfFontFile.format->l32(fp.read(4))
A:PIL.PcfFontFile.(fp, format, i16, i32)->self._getformat(PCF_BDF_ENCODINGS)
A:PIL.PcfFontFile.nprops->i32(fp.read(4))
A:PIL.PcfFontFile.data->fp.read(bitmapsize)
A:PIL.PcfFontFile.left->i16(fp.read(2))
A:PIL.PcfFontFile.right->i16(fp.read(2))
A:PIL.PcfFontFile.width->i16(fp.read(2))
A:PIL.PcfFontFile.ascent->i16(fp.read(2))
A:PIL.PcfFontFile.descent->i16(fp.read(2))
A:PIL.PcfFontFile.attributes->i16(fp.read(2))
A:PIL.PcfFontFile.nbitmaps->i32(fp.read(4))
PIL.PcfFontFile.PcfFontFile(self,fp:BinaryIO,charset_encoding:str='iso8859-1')
PIL.PcfFontFile.PcfFontFile.__init__(self,fp:BinaryIO,charset_encoding:str='iso8859-1')
PIL.PcfFontFile.PcfFontFile._getformat(self,tag:int)->tuple[BinaryIO, int, Callable[[bytes], int], Callable[[bytes], int]]
PIL.PcfFontFile.PcfFontFile._load_bitmaps(self,metrics:list[tuple[int,int,int,int,int,int,int,int]])->list[Image.Image]
PIL.PcfFontFile.PcfFontFile._load_encoding(self)->list[int | None]
PIL.PcfFontFile.PcfFontFile._load_metrics(self)->list[tuple[int, int, int, int, int, int, int, int]]
PIL.PcfFontFile.PcfFontFile._load_properties(self)->dict[bytes, bytes | int]
PIL.PcfFontFile.sz(s:bytes,o:int)->bytes


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/MpoImagePlugin.py----------------------------------------
A:PIL.MpoImagePlugin.append_images->im.encoderinfo.get('append_images', [])
A:PIL.MpoImagePlugin.exif->exif.tobytes().tobytes()
A:PIL.MpoImagePlugin.ifd->TiffImagePlugin.ImageFileDirectory_v2()
A:PIL.MpoImagePlugin.ifd[45057]->len(offsets)
A:PIL.MpoImagePlugin.original_exif->self.info.get('exif')
PIL.MpoImagePlugin.MpoImageFile(JpegImagePlugin.JpegImageFile)
PIL.MpoImagePlugin.MpoImageFile._after_jpeg_open(self,mpheader=None)
PIL.MpoImagePlugin.MpoImageFile._open(self)->None
PIL.MpoImagePlugin.MpoImageFile.adopt(jpeg_instance,mpheader=None)
PIL.MpoImagePlugin.MpoImageFile.load_seek(self,pos:int)->None
PIL.MpoImagePlugin.MpoImageFile.seek(self,frame:int)->None
PIL.MpoImagePlugin.MpoImageFile.tell(self)->int
PIL.MpoImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None
PIL.MpoImagePlugin._save_all(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImImagePlugin.py----------------------------------------
A:PIL.ImImagePlugin.split->re.compile(b'^([A-Za-z][^:]*):[ \\t]*(.*)[ \\t]*$')
A:PIL.ImImagePlugin.s->self.fp.read(1)
A:PIL.ImImagePlugin.m->re.compile(b'^([A-Za-z][^:]*):[ \\t]*(.*)[ \\t]*$').match(s)
A:PIL.ImImagePlugin.(k, v)->re.compile(b'^([A-Za-z][^:]*):[ \\t]*(.*)[ \\t]*$').match(s).group(1, 2)
A:PIL.ImImagePlugin.k->k.decode('latin-1', 'replace').decode('latin-1', 'replace')
A:PIL.ImImagePlugin.v->tuple(map(number, v.split(',')))
A:PIL.ImImagePlugin.palette->self.fp.read(768)
A:PIL.ImImagePlugin.self.lut->list(palette)
A:PIL.ImImagePlugin.self.palette->ImagePalette.raw('RGB;L', palette)
A:PIL.ImImagePlugin.self.__offsetoffs->self.fp.tell()
A:PIL.ImImagePlugin.bits->int(self.rawmode[2:])
A:PIL.ImImagePlugin.frames->im.encoderinfo.get('frames', 1)
A:PIL.ImImagePlugin.filename->filename.decode('ascii').decode('ascii')
A:PIL.ImImagePlugin.(name, ext)->os.path.splitext(os.path.basename(filename))
A:PIL.ImImagePlugin.name->''.join([name[:92 - len(ext)], ext])
A:PIL.ImImagePlugin.im_palette->im.im.getpalette('RGB', 'RGB;L')
PIL.ImImagePlugin.ImImageFile(ImageFile.ImageFile)
PIL.ImImagePlugin.ImImageFile._open(self)->None
PIL.ImImagePlugin.ImImageFile.is_animated(self)->bool
PIL.ImImagePlugin.ImImageFile.n_frames(self)->int
PIL.ImImagePlugin.ImImageFile.seek(self,frame:int)->None
PIL.ImImagePlugin.ImImageFile.tell(self)->int
PIL.ImImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None
PIL.ImImagePlugin.number(s:Any)->float


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/GimpPaletteFile.py----------------------------------------
A:PIL.GimpPaletteFile.s->fp.readline()
A:PIL.GimpPaletteFile.v->tuple(map(int, s.split()[:3]))
A:PIL.GimpPaletteFile.self.palette->b''.join(palette)
PIL.GimpPaletteFile.GimpPaletteFile(self,fp:IO[bytes])
PIL.GimpPaletteFile.GimpPaletteFile.__init__(self,fp:IO[bytes])
PIL.GimpPaletteFile.GimpPaletteFile.getpalette(self)->tuple[bytes, str]


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/CurImagePlugin.py----------------------------------------
A:PIL.CurImagePlugin.offset->self.fp.tell()
A:PIL.CurImagePlugin.s->self.fp.read(16)
PIL.CurImagePlugin.CurImageFile(BmpImagePlugin.BmpImageFile)
PIL.CurImagePlugin.CurImageFile._open(self)->None
PIL.CurImagePlugin._accept(prefix:bytes)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/_util.py----------------------------------------
PIL._util.DeferredError(self,ex:BaseException)
PIL._util.DeferredError.__getattr__(self,elt:str)->NoReturn
PIL._util.DeferredError.__init__(self,ex:BaseException)
PIL._util.DeferredError.new(ex:BaseException)->Any
PIL._util.is_directory(f:Any)->TypeGuard[StrOrBytesPath]
PIL._util.is_path(f:Any)->TypeGuard[StrOrBytesPath]


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/EpsImagePlugin.py----------------------------------------
A:PIL.EpsImagePlugin.split->re.compile('^%%([^:]*):[ \\t]*(.*)[ \\t]*$')
A:PIL.EpsImagePlugin.field->re.compile('^%[%!\\w]([^:]*)[ \\t]*$')
A:PIL.EpsImagePlugin.(out_fd, outfile)->tempfile.mkstemp()
A:PIL.EpsImagePlugin.(in_fd, infile_temp)->tempfile.mkstemp()
A:PIL.EpsImagePlugin.fsize->fp.tell()
A:PIL.EpsImagePlugin.s->fp.read(8)
A:PIL.EpsImagePlugin.startupinfo->subprocess.STARTUPINFO()
A:PIL.EpsImagePlugin.out_im->Image.open(outfile)
A:PIL.EpsImagePlugin.im->Image.open(outfile).im.copy()
A:PIL.EpsImagePlugin.c->self.fp.read(1)
A:PIL.EpsImagePlugin.self.char->self.fp.read(1)
A:PIL.EpsImagePlugin.(length, offset)->self._find_offset(self.fp)
A:PIL.EpsImagePlugin.byte_arr->bytearray(255)
A:PIL.EpsImagePlugin.bytes_mv->memoryview(byte_arr)
A:PIL.EpsImagePlugin.m->re.compile('^%[%!\\w]([^:]*)[ \\t]*$').match(s)
A:PIL.EpsImagePlugin.(k, v)->re.compile('^%[%!\\w]([^:]*)[ \\t]*$').match(s).group(1, 2)
A:PIL.EpsImagePlugin.byte->self.fp.read(1)
A:PIL.EpsImagePlugin.k->re.compile('^%[%!\\w]([^:]*)[ \\t]*$').match(s).group(1)
A:PIL.EpsImagePlugin.image_data_values->byte_arr[11:bytes_read].split(None, 7)
A:PIL.EpsImagePlugin.length->i32(s, 4)
A:PIL.EpsImagePlugin.offset->i32(s)
A:PIL.EpsImagePlugin.self.im->Ghostscript(self.tile, self.size, self.fp, scale, transparency)
PIL.EpsImagePlugin.EpsImageFile(ImageFile.ImageFile)
PIL.EpsImagePlugin.EpsImageFile._find_offset(self,fp)
PIL.EpsImagePlugin.EpsImageFile._open(self)->None
PIL.EpsImagePlugin.EpsImageFile.load(self,scale=1,transparency=False)
PIL.EpsImagePlugin.EpsImageFile.load_seek(self,pos:int)->None
PIL.EpsImagePlugin.Ghostscript(tile,size,fp,scale=1,transparency=False)
PIL.EpsImagePlugin.PSFile(self,fp)
PIL.EpsImagePlugin.PSFile.__init__(self,fp)
PIL.EpsImagePlugin.PSFile.readline(self)->str
PIL.EpsImagePlugin.PSFile.seek(self,offset,whence=io.SEEK_SET)
PIL.EpsImagePlugin._accept(prefix:bytes)->bool
PIL.EpsImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes,eps:int=1)->None
PIL.EpsImagePlugin.has_ghostscript()->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/QoiImagePlugin.py----------------------------------------
A:PIL.QoiImagePlugin.self._size->tuple((i32(self.fp.read(4)) for i in range(2)))
A:PIL.QoiImagePlugin.data->bytearray()
A:PIL.QoiImagePlugin.bands->Image.getmodebands(self.mode)
A:PIL.QoiImagePlugin.value->bytearray(tuple(((self._previous_pixel[i] + diff_green + diff) % 256 for (i, diff) in enumerate((diff_red, 0, diff_blue)))))
PIL.QoiImagePlugin.QoiDecoder(ImageFile.PyDecoder)
PIL.QoiImagePlugin.QoiDecoder._add_to_previous_pixels(self,value:bytes|bytearray)->None
PIL.QoiImagePlugin.QoiDecoder.decode(self,buffer:bytes)->tuple[int, int]
PIL.QoiImagePlugin.QoiImageFile(ImageFile.ImageFile)
PIL.QoiImagePlugin.QoiImageFile._open(self)->None
PIL.QoiImagePlugin._accept(prefix:bytes)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/XbmImagePlugin.py----------------------------------------
A:PIL.XbmImagePlugin.xbm_head->re.compile(b'\\s*#define[ \\t]+.*_width[ \\t]+(?P<width>[0-9]+)[\\r\\n]+#define[ \t]+.*_height[ \t]+(?P<height>[0-9]+)[\r\n]+(?P<hotspot>#define[ \t]+[^_]*_x_hot[ \t]+(?P<xhot>[0-9]+)[\r\n]+#define[ \t]+[^_]*_y_hot[ \t]+(?P<yhot>[0-9]+)[\r\n]+)?[\\000-\\377]*_bits\\[]')
A:PIL.XbmImagePlugin.m->re.compile(b'\\s*#define[ \\t]+.*_width[ \\t]+(?P<width>[0-9]+)[\\r\\n]+#define[ \t]+.*_height[ \t]+(?P<height>[0-9]+)[\r\n]+(?P<hotspot>#define[ \t]+[^_]*_x_hot[ \t]+(?P<xhot>[0-9]+)[\r\n]+#define[ \t]+[^_]*_y_hot[ \t]+(?P<yhot>[0-9]+)[\r\n]+)?[\\000-\\377]*_bits\\[]').match(self.fp.read(512))
A:PIL.XbmImagePlugin.xsize->int(m.group('width'))
A:PIL.XbmImagePlugin.ysize->int(m.group('height'))
A:PIL.XbmImagePlugin.hotspot->im.encoderinfo.get('hotspot')
PIL.XbmImagePlugin.XbmImageFile(ImageFile.ImageFile)
PIL.XbmImagePlugin.XbmImageFile._open(self)->None
PIL.XbmImagePlugin._accept(prefix:bytes)->bool
PIL.XbmImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/PsdImagePlugin.py----------------------------------------
A:PIL.PsdImagePlugin.s->read(26)
A:PIL.PsdImagePlugin.psd_bits->i16(s, 22)
A:PIL.PsdImagePlugin.psd_channels->i16(s, 12)
A:PIL.PsdImagePlugin.psd_mode->i16(s, 24)
A:PIL.PsdImagePlugin.size->i32(read(4))
A:PIL.PsdImagePlugin.data->read(i32(read(4)))
A:PIL.PsdImagePlugin.self.palette->ImagePalette.raw('RGB;L', data)
A:PIL.PsdImagePlugin.id->i16(read(2))
A:PIL.PsdImagePlugin.name->read(length).decode('latin-1', 'replace')
A:PIL.PsdImagePlugin.self._layers_position->self.fp.tell()
A:PIL.PsdImagePlugin.self.tile->_maketile(self.fp, mode, (0, 0) + self.size, channels)
A:PIL.PsdImagePlugin._layer_data->io.BytesIO(ImageFile._safe_read(self._fp, self._layers_size))
A:PIL.PsdImagePlugin.layers->_layerinfo(_layer_data, self._layers_size)
A:PIL.PsdImagePlugin.self._n_frames->len(self.layers)
A:PIL.PsdImagePlugin.ct->si16(read(2))
A:PIL.PsdImagePlugin.y0->si32(read(4))
A:PIL.PsdImagePlugin.x0->si32(read(4))
A:PIL.PsdImagePlugin.y1->si32(read(4))
A:PIL.PsdImagePlugin.x1->si32(read(4))
A:PIL.PsdImagePlugin.ct_types->i16(read(2))
A:PIL.PsdImagePlugin.type->i16(read(2))
A:PIL.PsdImagePlugin.length->i8(read(1))
A:PIL.PsdImagePlugin.t->_maketile(fp, m, bbox, 1)
A:PIL.PsdImagePlugin.compression->i16(read(2))
A:PIL.PsdImagePlugin.offset->file.tell()
A:PIL.PsdImagePlugin.bytecount->read(channels * ysize * 2)
PIL.PsdImagePlugin.PsdImageFile(ImageFile.ImageFile)
PIL.PsdImagePlugin.PsdImageFile._open(self)->None
PIL.PsdImagePlugin.PsdImageFile.is_animated(self)->bool
PIL.PsdImagePlugin.PsdImageFile.layers(self)
PIL.PsdImagePlugin.PsdImageFile.n_frames(self)->int
PIL.PsdImagePlugin.PsdImageFile.seek(self,layer:int)->None
PIL.PsdImagePlugin.PsdImageFile.tell(self)->int
PIL.PsdImagePlugin._accept(prefix:bytes)->bool
PIL.PsdImagePlugin._layerinfo(fp,ct_bytes)
PIL.PsdImagePlugin._maketile(file,mode,bbox,channels)


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImageStat.py----------------------------------------
A:PIL.ImageStat.self.h->image_or_list.histogram(mask)
A:PIL.ImageStat.self.bands->list(range(len(self.h) // 256))
PIL.ImageStat.Stat(self,image_or_list:Image.Image|list[int],mask:Image.Image|None=None)
PIL.ImageStat.Stat.__init__(self,image_or_list:Image.Image|list[int],mask:Image.Image|None=None)
PIL.ImageStat.Stat.count(self)->list[int]
PIL.ImageStat.Stat.extrema(self)->list[tuple[int, int]]
PIL.ImageStat.Stat.mean(self)->list[float]
PIL.ImageStat.Stat.median(self)->list[int]
PIL.ImageStat.Stat.rms(self)->list[float]
PIL.ImageStat.Stat.stddev(self)->list[float]
PIL.ImageStat.Stat.sum(self)->list[float]
PIL.ImageStat.Stat.sum2(self)->list[float]
PIL.ImageStat.Stat.var(self)->list[float]


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/WebPImagePlugin.py----------------------------------------
A:PIL.WebPImagePlugin.(data, width, height, self._mode, icc_profile, exif)->_webp.WebPDecode(self.fp.read())
A:PIL.WebPImagePlugin.self.fp->BytesIO(data)
A:PIL.WebPImagePlugin.self._decoder->_webp.WebPAnimDecoder(self.fp.read())
A:PIL.WebPImagePlugin.(width, height, loop_count, bgcolor, frame_count, mode)->self._decoder.get_info()
A:PIL.WebPImagePlugin.icc_profile->self._decoder.get_chunk('ICCP')
A:PIL.WebPImagePlugin.exif->exif.tobytes().tobytes()
A:PIL.WebPImagePlugin.xmp->im.convert('RGBA' if im.has_transparency_data else 'RGB').encoderinfo.get('xmp', '')
A:PIL.WebPImagePlugin.ret->self._decoder.get_next()
A:PIL.WebPImagePlugin.(data, timestamp, duration)->self._get_next()
A:PIL.WebPImagePlugin.encoderinfo->im.convert('RGBA' if im.has_transparency_data else 'RGB').encoderinfo.copy()
A:PIL.WebPImagePlugin.append_images->list(encoderinfo.get('append_images', []))
A:PIL.WebPImagePlugin.palette->im.convert('RGBA' if im.has_transparency_data else 'RGB').getpalette()
A:PIL.WebPImagePlugin.duration->im.convert('RGBA' if im.has_transparency_data else 'RGB').encoderinfo.get('duration', im.info.get('duration', 0))
A:PIL.WebPImagePlugin.loop->im.convert('RGBA' if im.has_transparency_data else 'RGB').encoderinfo.get('loop', 0)
A:PIL.WebPImagePlugin.minimize_size->im.convert('RGBA' if im.has_transparency_data else 'RGB').encoderinfo.get('minimize_size', False)
A:PIL.WebPImagePlugin.kmin->im.convert('RGBA' if im.has_transparency_data else 'RGB').encoderinfo.get('kmin', None)
A:PIL.WebPImagePlugin.kmax->im.convert('RGBA' if im.has_transparency_data else 'RGB').encoderinfo.get('kmax', None)
A:PIL.WebPImagePlugin.allow_mixed->im.convert('RGBA' if im.has_transparency_data else 'RGB').encoderinfo.get('allow_mixed', False)
A:PIL.WebPImagePlugin.lossless->im.convert('RGBA' if im.has_transparency_data else 'RGB').encoderinfo.get('lossless', False)
A:PIL.WebPImagePlugin.quality->im.convert('RGBA' if im.has_transparency_data else 'RGB').encoderinfo.get('quality', 80)
A:PIL.WebPImagePlugin.alpha_quality->im.convert('RGBA' if im.has_transparency_data else 'RGB').encoderinfo.get('alpha_quality', 100)
A:PIL.WebPImagePlugin.method->im.convert('RGBA' if im.has_transparency_data else 'RGB').encoderinfo.get('method', 4)
A:PIL.WebPImagePlugin.enc->_webp.WebPAnimEncoder(im.size[0], im.size[1], background, loop, minimize_size, kmin, kmax, allow_mixed, verbose)
A:PIL.WebPImagePlugin.cur_idx->im.convert('RGBA' if im.has_transparency_data else 'RGB').tell()
A:PIL.WebPImagePlugin.nfr->getattr(ims, 'n_frames', 1)
A:PIL.WebPImagePlugin.frame->ims.convert(rawmode)
A:PIL.WebPImagePlugin.data->_webp.WebPEncode(im.tobytes(), im.size[0], im.size[1], lossless, float(quality), float(alpha_quality), im.mode, icc_profile, method, exact, exif, xmp)
A:PIL.WebPImagePlugin.im->im.convert('RGBA' if im.has_transparency_data else 'RGB').convert('RGBA' if im.has_transparency_data else 'RGB')
PIL.WebPImagePlugin.WebPImageFile(ImageFile.ImageFile)
PIL.WebPImagePlugin.WebPImageFile._get_next(self)
PIL.WebPImagePlugin.WebPImageFile._getexif(self)->dict[str, Any] | None
PIL.WebPImagePlugin.WebPImageFile._open(self)->None
PIL.WebPImagePlugin.WebPImageFile._reset(self,reset:bool=True)->None
PIL.WebPImagePlugin.WebPImageFile._seek(self,frame:int)->None
PIL.WebPImagePlugin.WebPImageFile.load(self)
PIL.WebPImagePlugin.WebPImageFile.load_seek(self,pos:int)->None
PIL.WebPImagePlugin.WebPImageFile.seek(self,frame:int)->None
PIL.WebPImagePlugin.WebPImageFile.tell(self)->int
PIL.WebPImagePlugin._accept(prefix:bytes)->bool | str
PIL.WebPImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None
PIL.WebPImagePlugin._save_all(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ContainerIO.py----------------------------------------
A:PIL.ContainerIO.self.pos->max(0, min(self.pos, self.length))
A:PIL.ContainerIO.n->min(n, self.length - self.pos)
A:PIL.ContainerIO.c->self.read(1)
A:PIL.ContainerIO.s->self.readline()
PIL.ContainerIO.ContainerIO(self,file:IO[AnyStr],offset:int,length:int)
PIL.ContainerIO.ContainerIO.__init__(self,file:IO[AnyStr],offset:int,length:int)
PIL.ContainerIO.ContainerIO.isatty(self)->bool
PIL.ContainerIO.ContainerIO.read(self,n:int=0)->AnyStr
PIL.ContainerIO.ContainerIO.readline(self)->AnyStr
PIL.ContainerIO.ContainerIO.readlines(self)->list[AnyStr]
PIL.ContainerIO.ContainerIO.seek(self,offset:int,mode:Literal[0,1,2]=io.SEEK_SET)->None
PIL.ContainerIO.ContainerIO.tell(self)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/PixarImagePlugin.py----------------------------------------
A:PIL.PixarImagePlugin.s->self.fp.read(4)
PIL.PixarImagePlugin.PixarImageFile(ImageFile.ImageFile)
PIL.PixarImagePlugin.PixarImageFile._open(self)->None
PIL.PixarImagePlugin._accept(prefix:bytes)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/TiffTags.py----------------------------------------
A:PIL.TiffTags.info->TAGS_V2.get(tag)
A:PIL.TiffTags.TAGS_V2[k]->TagInfo(k, *v)
A:PIL.TiffTags.tags[k]->TagInfo(k, *v)
PIL.TiffTags.TagInfo(cls,value=None,name='unknown',type=None,length=None,enum=None)
PIL.TiffTags.TagInfo.__new__(cls,value=None,name='unknown',type=None,length=None,enum=None)
PIL.TiffTags.TagInfo.cvt_enum(self,value)
PIL.TiffTags._TagInfo(NamedTuple)
PIL.TiffTags._populate()
PIL.TiffTags.lookup(tag,group=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/GribStubImagePlugin.py----------------------------------------
A:PIL.GribStubImagePlugin.offset->self.fp.tell()
A:PIL.GribStubImagePlugin.loader->self._load()
PIL.GribStubImagePlugin.GribStubImageFile(ImageFile.StubImageFile)
PIL.GribStubImagePlugin.GribStubImageFile._load(self)->ImageFile.StubHandler | None
PIL.GribStubImagePlugin.GribStubImageFile._open(self)->None
PIL.GribStubImagePlugin._accept(prefix:bytes)->bool
PIL.GribStubImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None
PIL.GribStubImagePlugin.register_handler(handler:ImageFile.StubHandler|None)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImageMath.py----------------------------------------
A:PIL.ImageMath.im_1->im_1.crop((0, 0) + size).crop((0, 0) + size)
A:PIL.ImageMath.out->builtins.eval(expression, {'__builtins': {'abs': abs}}, args)
A:PIL.ImageMath.op->getattr(_imagingmath, f'{op}_{im_1.mode}')
A:PIL.ImageMath.im_2->im_2.crop((0, 0) + size).crop((0, 0) + size)
A:PIL.ImageMath.args[k]->_Operand(v)
A:PIL.ImageMath.compiled_code->compile(expression, '<string>', 'eval')
PIL.ImageMath._Operand(self,im:Image.Image)
PIL.ImageMath._Operand.__abs__(self)->_Operand
PIL.ImageMath._Operand.__add__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__and__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__bool__(self)->bool
PIL.ImageMath._Operand.__eq__(self,other)
PIL.ImageMath._Operand.__fixup(self,im1:_Operand|float)->Image.Image
PIL.ImageMath._Operand.__ge__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__gt__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__init__(self,im:Image.Image)
PIL.ImageMath._Operand.__invert__(self)->_Operand
PIL.ImageMath._Operand.__le__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__lshift__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__lt__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__mod__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__mul__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__ne__(self,other)
PIL.ImageMath._Operand.__neg__(self)->_Operand
PIL.ImageMath._Operand.__or__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__pos__(self)->_Operand
PIL.ImageMath._Operand.__pow__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__radd__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__rand__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__rmod__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__rmul__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__ror__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__rpow__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__rshift__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__rsub__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__rtruediv__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__rxor__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__sub__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__truediv__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.__xor__(self,other:_Operand|float)->_Operand
PIL.ImageMath._Operand.apply(self,op:str,im1:_Operand|float,im2:_Operand|float|None=None,mode:str|None=None)->_Operand
PIL.ImageMath.eval(expression:str,_dict:dict[str,Any]={},**kw:Any)->Any
PIL.ImageMath.imagemath_convert(self:_Operand,mode:str)->_Operand
PIL.ImageMath.imagemath_equal(self:_Operand,other:_Operand|float|None)->_Operand
PIL.ImageMath.imagemath_float(self:_Operand)->_Operand
PIL.ImageMath.imagemath_int(self:_Operand)->_Operand
PIL.ImageMath.imagemath_max(self:_Operand,other:_Operand|float|None)->_Operand
PIL.ImageMath.imagemath_min(self:_Operand,other:_Operand|float|None)->_Operand
PIL.ImageMath.imagemath_notequal(self:_Operand,other:_Operand|float|None)->_Operand
PIL.ImageMath.lambda_eval(expression:Callable[[dict[str,Any]],Any],options:dict[str,Any]={},**kw:Any)->Any
PIL.ImageMath.unsafe_eval(expression:str,options:dict[str,Any]={},**kw:Any)->Any


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/BlpImagePlugin.py----------------------------------------
A:PIL.BlpImagePlugin.(color0, color1, bits)->struct.unpack_from('<HHI', data, idx)
A:PIL.BlpImagePlugin.(r0, g0, b0)->unpack_565(color0)
A:PIL.BlpImagePlugin.(r1, g1, b1)->unpack_565(color1)
A:PIL.BlpImagePlugin.bits->struct.unpack_from('<6B', block, 2)
A:PIL.BlpImagePlugin.(color0, color1)->struct.unpack_from('<HH', block, 8)
A:PIL.BlpImagePlugin.(code,)->struct.unpack_from('<I', block, 12)
A:PIL.BlpImagePlugin.(a0, a1)->struct.unpack_from('<BB', block)
A:PIL.BlpImagePlugin.self.magic->self.fp.read(4)
A:PIL.BlpImagePlugin.(self._blp_alpha_depth,)->struct.unpack('<b', self._safe_read(1))
A:PIL.BlpImagePlugin.self._size->struct.unpack('<II', self.fp.read(8))
A:PIL.BlpImagePlugin.decoder->self.magic.decode()
A:PIL.BlpImagePlugin.(self._blp_compression,)->struct.unpack('<i', self._safe_read(4))
A:PIL.BlpImagePlugin.(self._blp_encoding,)->struct.unpack('<i', self._safe_read(4))
A:PIL.BlpImagePlugin.(self._blp_alpha_encoding,)->struct.unpack('<b', self._safe_read(1))
A:PIL.BlpImagePlugin.self.size->struct.unpack('<II', self._safe_read(8))
A:PIL.BlpImagePlugin.self._blp_offsets->struct.unpack('<16I', self._safe_read(16 * 4))
A:PIL.BlpImagePlugin.self._blp_lengths->struct.unpack('<16I', self._safe_read(16 * 4))
A:PIL.BlpImagePlugin.(b, g, r, a)->struct.unpack('<4B', self._safe_read(4))
A:PIL.BlpImagePlugin.data->struct.pack('<16I', offset, *(0,) * 15)
A:PIL.BlpImagePlugin._data->BytesIO(self._safe_read(self._blp_lengths[0]))
A:PIL.BlpImagePlugin.(offset,)->struct.unpack('<B', _data.read(1))
A:PIL.BlpImagePlugin.palette->self.im.getpalette('RGBA', 'RGBA')
A:PIL.BlpImagePlugin.(jpeg_header_size,)->struct.unpack('<I', self._safe_read(4))
A:PIL.BlpImagePlugin.jpeg_header->self._safe_read(jpeg_header_size)
A:PIL.BlpImagePlugin.image->JpegImageFile(BytesIO(data))
A:PIL.BlpImagePlugin.(r, g, b)->JpegImageFile(BytesIO(data)).convert('RGB').split()
A:PIL.BlpImagePlugin.reversed_image->Image.merge('RGB', (b, g, r))
A:PIL.BlpImagePlugin.palette_data->self._write_palette()
PIL.BlpImagePlugin.AlphaEncoding(IntEnum)
PIL.BlpImagePlugin.BLP1Decoder(_BLPBaseDecoder)
PIL.BlpImagePlugin.BLP1Decoder._decode_jpeg_stream(self)->None
PIL.BlpImagePlugin.BLP1Decoder._load(self)->None
PIL.BlpImagePlugin.BLP2Decoder(_BLPBaseDecoder)
PIL.BlpImagePlugin.BLP2Decoder._load(self)->None
PIL.BlpImagePlugin.BLPEncoder(ImageFile.PyEncoder)
PIL.BlpImagePlugin.BLPEncoder._write_palette(self)->bytes
PIL.BlpImagePlugin.BLPEncoder.encode(self,bufsize:int)->tuple[int, int, bytes]
PIL.BlpImagePlugin.BLPFormatError(NotImplementedError)
PIL.BlpImagePlugin.BlpImageFile(ImageFile.ImageFile)
PIL.BlpImagePlugin.BlpImageFile._open(self)->None
PIL.BlpImagePlugin.Encoding(IntEnum)
PIL.BlpImagePlugin.Format(IntEnum)
PIL.BlpImagePlugin._BLPBaseDecoder(ImageFile.PyDecoder)
PIL.BlpImagePlugin._BLPBaseDecoder._load(self)->None
PIL.BlpImagePlugin._BLPBaseDecoder._read_bgra(self,palette:list[tuple[int,int,int,int]])->bytearray
PIL.BlpImagePlugin._BLPBaseDecoder._read_blp_header(self)->None
PIL.BlpImagePlugin._BLPBaseDecoder._read_palette(self)->list[tuple[int, int, int, int]]
PIL.BlpImagePlugin._BLPBaseDecoder._safe_read(self,length:int)->bytes
PIL.BlpImagePlugin._BLPBaseDecoder.decode(self,buffer:bytes)->tuple[int, int]
PIL.BlpImagePlugin._accept(prefix:bytes)->bool
PIL.BlpImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None
PIL.BlpImagePlugin.decode_dxt1(data:bytes,alpha:bool=False)->tuple[bytearray, bytearray, bytearray, bytearray]
PIL.BlpImagePlugin.decode_dxt3(data:bytes)->tuple[bytearray, bytearray, bytearray, bytearray]
PIL.BlpImagePlugin.decode_dxt5(data:bytes)->tuple[bytearray, bytearray, bytearray, bytearray]
PIL.BlpImagePlugin.unpack_565(i:int)->tuple[int, int, int]


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/XpmImagePlugin.py----------------------------------------
A:PIL.XpmImagePlugin.xpm_head->re.compile(b'"([0-9]*) ([0-9]*) ([0-9]*) ([0-9]*)')
A:PIL.XpmImagePlugin.s->s[2:-2].split()
A:PIL.XpmImagePlugin.m->re.compile(b'"([0-9]*) ([0-9]*) ([0-9]*) ([0-9]*)').match(s)
A:PIL.XpmImagePlugin.pal->int(m.group(3))
A:PIL.XpmImagePlugin.bpp->int(m.group(4))
A:PIL.XpmImagePlugin.rgb->int(rgb[1:], 16)
A:PIL.XpmImagePlugin.self.palette->ImagePalette.raw('RGB', b''.join(palette))
PIL.XpmImagePlugin.XpmImageFile(ImageFile.ImageFile)
PIL.XpmImagePlugin.XpmImageFile._open(self)->None
PIL.XpmImagePlugin.XpmImageFile.load_read(self,read_bytes:int)->bytes
PIL.XpmImagePlugin._accept(prefix:bytes)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/DdsImagePlugin.py----------------------------------------
A:PIL.DdsImagePlugin.UYVY->i32(b'UYVY')
A:PIL.DdsImagePlugin.R8G8_B8G8->i32(b'RGBG')
A:PIL.DdsImagePlugin.YUY2->i32(b'YUY2')
A:PIL.DdsImagePlugin.G8R8_G8B8->i32(b'GRGB')
A:PIL.DdsImagePlugin.DXT1->i32(b'DXT1')
A:PIL.DdsImagePlugin.DXT2->i32(b'DXT2')
A:PIL.DdsImagePlugin.DXT3->i32(b'DXT3')
A:PIL.DdsImagePlugin.DXT4->i32(b'DXT4')
A:PIL.DdsImagePlugin.DXT5->i32(b'DXT5')
A:PIL.DdsImagePlugin.DX10->i32(b'DX10')
A:PIL.DdsImagePlugin.BC4S->i32(b'BC4S')
A:PIL.DdsImagePlugin.BC4U->i32(b'BC4U')
A:PIL.DdsImagePlugin.BC5S->i32(b'BC5S')
A:PIL.DdsImagePlugin.BC5U->i32(b'BC5U')
A:PIL.DdsImagePlugin.ATI1->i32(b'ATI1')
A:PIL.DdsImagePlugin.ATI2->i32(b'ATI2')
A:PIL.DdsImagePlugin.MULTI2_ARGB8->i32(b'MET1')
A:PIL.DdsImagePlugin.(header_size,)->struct.unpack('<I', self.fp.read(4))
A:PIL.DdsImagePlugin.header_bytes->self.fp.read(header_size - 4)
A:PIL.DdsImagePlugin.header->io.BytesIO(header_bytes)
A:PIL.DdsImagePlugin.(flags, height, width)->struct.unpack('<3I', header.read(12))
A:PIL.DdsImagePlugin.(pitch, depth, mipmaps)->struct.unpack('<3I', header.read(12))
A:PIL.DdsImagePlugin.(pfsize, pfflags, fourcc, bitcount)->struct.unpack('<4I', header.read(16))
A:PIL.DdsImagePlugin.masks->struct.unpack(f'<{mask_count}I', header.read(mask_count * 4))
A:PIL.DdsImagePlugin.self.palette->ImagePalette.raw('RGBA', self.fp.read(1024))
A:PIL.DdsImagePlugin.(dxgi_format,)->struct.unpack('<I', self.fp.read(4))
A:PIL.DdsImagePlugin.data->bytearray()
A:PIL.DdsImagePlugin.value->int.from_bytes(self.fd.read(bytecount), 'little')
A:PIL.DdsImagePlugin.(r, g, b, a)->Image.merge('RGBA', (a, r, g, b)).split()
A:PIL.DdsImagePlugin.im->Image.merge('RGBA', (a, r, g, b))
PIL.DdsImagePlugin.D3DFMT(IntEnum)
PIL.DdsImagePlugin.DDPF(IntFlag)
PIL.DdsImagePlugin.DDSCAPS(IntFlag)
PIL.DdsImagePlugin.DDSCAPS2(IntFlag)
PIL.DdsImagePlugin.DDSD(IntFlag)
PIL.DdsImagePlugin.DXGI_FORMAT(IntEnum)
PIL.DdsImagePlugin.DdsImageFile(ImageFile.ImageFile)
PIL.DdsImagePlugin.DdsImageFile._open(self)->None
PIL.DdsImagePlugin.DdsImageFile.load_seek(self,pos:int)->None
PIL.DdsImagePlugin.DdsRgbDecoder(ImageFile.PyDecoder)
PIL.DdsImagePlugin.DdsRgbDecoder.decode(self,buffer:bytes)->tuple[int, int]
PIL.DdsImagePlugin._accept(prefix:bytes)->bool
PIL.DdsImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImtImagePlugin.py----------------------------------------
A:PIL.ImtImagePlugin.field->re.compile(b'([a-z]*) ([^ \\r\\n]*)')
A:PIL.ImtImagePlugin.buffer->b'\n'.join(lines)
A:PIL.ImtImagePlugin.s->self.fp.read(1)
A:PIL.ImtImagePlugin.lines->b'\n'.join(lines).split(b'\n')
A:PIL.ImtImagePlugin.m->re.compile(b'([a-z]*) ([^ \\r\\n]*)').match(s)
A:PIL.ImtImagePlugin.(k, v)->re.compile(b'([a-z]*) ([^ \\r\\n]*)').match(s).group(1, 2)
A:PIL.ImtImagePlugin.xsize->int(v)
A:PIL.ImtImagePlugin.ysize->int(v)
PIL.ImtImagePlugin.ImtImageFile(ImageFile.ImageFile)
PIL.ImtImagePlugin.ImtImageFile._open(self)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/TiffImagePlugin.py----------------------------------------
A:PIL.TiffImagePlugin.logger->logging.getLogger(__name__)
A:PIL.TiffImagePlugin.MAX_SAMPLESPERPIXEL->max((len(key_tp[4]) for key_tp in OPEN_INFO))
A:PIL.TiffImagePlugin.n_d->_limit_rational(val, max_val)
A:PIL.TiffImagePlugin.frac->Fraction(val)
A:PIL.TiffImagePlugin.val->self.tag_v2.get(ExifTags.Base.ImageResources)
A:PIL.TiffImagePlugin.self._val->Fraction(value, denominator)
A:PIL.TiffImagePlugin.f->self._val.limit_denominator(max_denominator)
A:PIL.TiffImagePlugin.__add__->_delegate('__add__')
A:PIL.TiffImagePlugin.__radd__->_delegate('__radd__')
A:PIL.TiffImagePlugin.__sub__->_delegate('__sub__')
A:PIL.TiffImagePlugin.__rsub__->_delegate('__rsub__')
A:PIL.TiffImagePlugin.__mul__->_delegate('__mul__')
A:PIL.TiffImagePlugin.__rmul__->_delegate('__rmul__')
A:PIL.TiffImagePlugin.__truediv__->_delegate('__truediv__')
A:PIL.TiffImagePlugin.__rtruediv__->_delegate('__rtruediv__')
A:PIL.TiffImagePlugin.__floordiv__->_delegate('__floordiv__')
A:PIL.TiffImagePlugin.__rfloordiv__->_delegate('__rfloordiv__')
A:PIL.TiffImagePlugin.__mod__->_delegate('__mod__')
A:PIL.TiffImagePlugin.__rmod__->_delegate('__rmod__')
A:PIL.TiffImagePlugin.__pow__->_delegate('__pow__')
A:PIL.TiffImagePlugin.__rpow__->_delegate('__rpow__')
A:PIL.TiffImagePlugin.__pos__->_delegate('__pos__')
A:PIL.TiffImagePlugin.__neg__->_delegate('__neg__')
A:PIL.TiffImagePlugin.__abs__->_delegate('__abs__')
A:PIL.TiffImagePlugin.__trunc__->_delegate('__trunc__')
A:PIL.TiffImagePlugin.__lt__->_delegate('__lt__')
A:PIL.TiffImagePlugin.__gt__->_delegate('__gt__')
A:PIL.TiffImagePlugin.__le__->_delegate('__le__')
A:PIL.TiffImagePlugin.__ge__->_delegate('__ge__')
A:PIL.TiffImagePlugin.__bool__->_delegate('__bool__')
A:PIL.TiffImagePlugin.__ceil__->_delegate('__ceil__')
A:PIL.TiffImagePlugin.__floor__->_delegate('__floor__')
A:PIL.TiffImagePlugin.__round__->_delegate('__round__')
A:PIL.TiffImagePlugin.__int__->_delegate('__int__')
A:PIL.TiffImagePlugin.TYPES[idx]->func.__name__[5:].replace('_', ' ')
A:PIL.TiffImagePlugin.size->i32(val[6 + n:10 + n])
A:PIL.TiffImagePlugin.prefix->property(lambda self: self._prefix)
A:PIL.TiffImagePlugin.offset->ImageFileDirectory_v2(prefix=prefix).save(fp)
A:PIL.TiffImagePlugin.self[tag]->handler(self, data, self.legacy_api)
A:PIL.TiffImagePlugin.info->info.to_v2().to_v2()
A:PIL.TiffImagePlugin.values->tuple((info.cvt_enum(value) for value in values))
A:PIL.TiffImagePlugin.data->self._write_dispatch[typ](self, *values)
A:PIL.TiffImagePlugin.value->self._pack('L', self._unpack('L', value)[0] + offset)
A:PIL.TiffImagePlugin.vals->self._unpack(f'{len(data) // 4}l', data)
A:PIL.TiffImagePlugin.ret->fp.read(size)
A:PIL.TiffImagePlugin.self._offset->fp.tell()
A:PIL.TiffImagePlugin.typname->TiffTags.TYPES.get(typ, 'unknown')
A:PIL.TiffImagePlugin.here->fp.tell()
A:PIL.TiffImagePlugin.(offset,)->self._unpack('Q' if self._bigtiff else 'L', data)
A:PIL.TiffImagePlugin.result->self.tobytes(offset)
A:PIL.TiffImagePlugin.stripoffsets->len(entries)
A:PIL.TiffImagePlugin.typ->self.tagtype.get(tag)
A:PIL.TiffImagePlugin.ifd->ImageFileDirectory_v2(prefix=prefix)
A:PIL.TiffImagePlugin.count->len(values)
A:PIL.TiffImagePlugin.name->name.replace(' ', '_').replace(' ', '_')
A:PIL.TiffImagePlugin.tags->list(atts.items())
A:PIL.TiffImagePlugin.tagdata->property(lambda self: self._tagdata)
A:PIL.TiffImagePlugin.ifd._tagdata->dict(self._tagdata)
A:PIL.TiffImagePlugin.ifd.tagtype->dict(self.tagtype)
A:PIL.TiffImagePlugin.ifd._tags_v2->dict(self._tags_v2)
A:PIL.TiffImagePlugin.ifh->self.fp.read(8)
A:PIL.TiffImagePlugin.self.tag_v2->ImageFileDirectory_v2(ifh)
A:PIL.TiffImagePlugin.current->self.tell()
A:PIL.TiffImagePlugin.self.im->Image.core.new(self.mode, self.size)
A:PIL.TiffImagePlugin.self.tagself.ifd->ImageFileDirectory_v1.from_v2(self.tag_v2)
A:PIL.TiffImagePlugin.id->i16(val[4:6])
A:PIL.TiffImagePlugin.exif->Image.Exif()
A:PIL.TiffImagePlugin.args->list(self.tile[0][3])
A:PIL.TiffImagePlugin.decoder->Image._getdecoder(self.mode, 'libtiff', tuple(args), self.decoderconfig)
A:PIL.TiffImagePlugin.(n, err)->Image._getdecoder(self.mode, 'libtiff', tuple(args), self.decoderconfig).decode(self.fp.read())
A:PIL.TiffImagePlugin.self._planar_configuration->self.tag_v2.get(PLANAR_CONFIGURATION, 1)
A:PIL.TiffImagePlugin.photo->self.tag_v2.get(PHOTOMETRIC_INTERPRETATION, 0)
A:PIL.TiffImagePlugin.fillorder->self.tag_v2.get(FILLORDER, 1)
A:PIL.TiffImagePlugin.xsize->int(self.tag_v2.get(IMAGEWIDTH))
A:PIL.TiffImagePlugin.ysize->int(self.tag_v2.get(IMAGELENGTH))
A:PIL.TiffImagePlugin.sample_format->self.tag_v2.get(SAMPLEFORMAT, (1,))
A:PIL.TiffImagePlugin.bps_tuple->self.tag_v2.get(BITSPERSAMPLE, (1,))
A:PIL.TiffImagePlugin.extra_tuple->self.tag_v2.get(EXTRASAMPLES, ())
A:PIL.TiffImagePlugin.bps_actual_count->len(bps_tuple)
A:PIL.TiffImagePlugin.samples_per_pixel->self.tag_v2.get(SAMPLESPERPIXEL, 3 if self._compression == 'tiff_jpeg' and photo in (2, 6) else 1)
A:PIL.TiffImagePlugin.xres->self.tag_v2.get(X_RESOLUTION, 1)
A:PIL.TiffImagePlugin.yres->self.tag_v2.get(Y_RESOLUTION, 1)
A:PIL.TiffImagePlugin.resunit->self.tag_v2.get(RESOLUTION_UNIT)
A:PIL.TiffImagePlugin.rawmode->rawmode.replace(';16L', ';16N').replace(';16L', ';16N')
A:PIL.TiffImagePlugin.h->self.tag_v2.get(TILELENGTH)
A:PIL.TiffImagePlugin.w->self.tag_v2.get(TILEWIDTH)
A:PIL.TiffImagePlugin.self.palette->ImagePalette.raw('RGB;L', b''.join(palette))
A:PIL.TiffImagePlugin.compression->ImageOps.invert(im).info.get('compression')
A:PIL.TiffImagePlugin.ifd[key]->info.to_v2().to_v2().get(key)
A:PIL.TiffImagePlugin.legacy_ifd->ImageOps.invert(im).tag.to_v2()
A:PIL.TiffImagePlugin.icc->im.encoderinfo.copy().get('icc_profile', im.info.get('icc_profile'))
A:PIL.TiffImagePlugin.dpi->im.encoderinfo.copy().get('dpi')
A:PIL.TiffImagePlugin.ifd[SAMPLESPERPIXEL]->len(bits)
A:PIL.TiffImagePlugin.inverted_im->ImageOps.invert(im).copy()
A:PIL.TiffImagePlugin.px->ImageOps.invert(im).copy().load()
A:PIL.TiffImagePlugin.im->ImageOps.invert(im)
A:PIL.TiffImagePlugin.lut->ImageOps.invert(im).im.getpalette('RGB', 'RGB;L')
A:PIL.TiffImagePlugin.im_strip_size->im.encoderinfo.copy().get('strip_size', STRIP_SIZE)
A:PIL.TiffImagePlugin.rows_per_strip->min((rows_per_strip + 7) // 8 * 8, h)
A:PIL.TiffImagePlugin.ifd[STRIPOFFSETS]->tuple(range(0, strip_byte_counts * strips_per_image, strip_byte_counts))
A:PIL.TiffImagePlugin.ifd[COMPRESSION]->COMPRESSION_INFO_REV.get(compression, 1)
A:PIL.TiffImagePlugin._fp->os.dup(fp.fileno())
A:PIL.TiffImagePlugin.atts[tag]->float(value)
A:PIL.TiffImagePlugin.encoder->Image._getencoder(im.mode, 'libtiff', a, encoderconfig)
A:PIL.TiffImagePlugin.self.f->open(fn, 'w+b')
A:PIL.TiffImagePlugin.self.beginning->self.f.tell()
A:PIL.TiffImagePlugin.self.IIMMiimm->self.f.read(4)
A:PIL.TiffImagePlugin.iimm->self.f.read(4)
A:PIL.TiffImagePlugin.ifd_offset->self.readLong()
A:PIL.TiffImagePlugin.pos->self.f.tell()
A:PIL.TiffImagePlugin.self.offsetOfNewPage->self.f.tell()
A:PIL.TiffImagePlugin.num_tags->self.readShort()
A:PIL.TiffImagePlugin.(value,)->struct.unpack(self.longFmt, self.f.read(4))
A:PIL.TiffImagePlugin.bytes_written->self.f.write(struct.pack(self.longFmt, value))
A:PIL.TiffImagePlugin.(tag, field_type, count)->struct.unpack(self.tagFormat, self.f.read(8))
A:PIL.TiffImagePlugin.cur_pos->self.f.tell()
A:PIL.TiffImagePlugin.encoderinfo->ImageOps.invert(im).encoderinfo.copy()
A:PIL.TiffImagePlugin.append_images->list(encoderinfo.get('append_images', []))
A:PIL.TiffImagePlugin.cur_idx->ImageOps.invert(im).tell()
PIL.TiffImagePlugin.AppendingTiffWriter(self,fn,new=False)
PIL.TiffImagePlugin.AppendingTiffWriter.__enter__(self)->AppendingTiffWriter
PIL.TiffImagePlugin.AppendingTiffWriter.__exit__(self,*args:object)->None
PIL.TiffImagePlugin.AppendingTiffWriter.__init__(self,fn,new=False)
PIL.TiffImagePlugin.AppendingTiffWriter.close(self)->None
PIL.TiffImagePlugin.AppendingTiffWriter.finalize(self)->None
PIL.TiffImagePlugin.AppendingTiffWriter.fixIFD(self)->None
PIL.TiffImagePlugin.AppendingTiffWriter.fixOffsets(self,count:int,isShort:bool=False,isLong:bool=False)->None
PIL.TiffImagePlugin.AppendingTiffWriter.goToEnd(self)->None
PIL.TiffImagePlugin.AppendingTiffWriter.newFrame(self)->None
PIL.TiffImagePlugin.AppendingTiffWriter.readLong(self)->int
PIL.TiffImagePlugin.AppendingTiffWriter.readShort(self)->int
PIL.TiffImagePlugin.AppendingTiffWriter.rewriteLastLong(self,value:int)->None
PIL.TiffImagePlugin.AppendingTiffWriter.rewriteLastShort(self,value:int)->None
PIL.TiffImagePlugin.AppendingTiffWriter.rewriteLastShortToLong(self,value:int)->None
PIL.TiffImagePlugin.AppendingTiffWriter.seek(self,offset,whence=io.SEEK_SET)
PIL.TiffImagePlugin.AppendingTiffWriter.setEndian(self,endian:str)->None
PIL.TiffImagePlugin.AppendingTiffWriter.setup(self)->None
PIL.TiffImagePlugin.AppendingTiffWriter.skipIFDs(self)->None
PIL.TiffImagePlugin.AppendingTiffWriter.tell(self)->int
PIL.TiffImagePlugin.AppendingTiffWriter.write(self,data:bytes)->int | None
PIL.TiffImagePlugin.AppendingTiffWriter.writeLong(self,value:int)->None
PIL.TiffImagePlugin.AppendingTiffWriter.writeShort(self,value:int)->None
PIL.TiffImagePlugin.IFDRational(self,value,denominator=1)
PIL.TiffImagePlugin.IFDRational.__eq__(self,other:object)->bool
PIL.TiffImagePlugin.IFDRational.__getstate__(self)
PIL.TiffImagePlugin.IFDRational.__hash__(self)->int
PIL.TiffImagePlugin.IFDRational.__init__(self,value,denominator=1)
PIL.TiffImagePlugin.IFDRational.__repr__(self)->str
PIL.TiffImagePlugin.IFDRational.__setstate__(self,state)
PIL.TiffImagePlugin.IFDRational.denominator(self)
PIL.TiffImagePlugin.IFDRational.limit_rational(self,max_denominator)
PIL.TiffImagePlugin.IFDRational.numerator(self)
PIL.TiffImagePlugin.ImageFileDirectory_v1(self,*args,**kwargs)
PIL.TiffImagePlugin.ImageFileDirectory_v1.__contains__(self,tag)
PIL.TiffImagePlugin.ImageFileDirectory_v1.__getitem__(self,tag)
PIL.TiffImagePlugin.ImageFileDirectory_v1.__init__(self,*args,**kwargs)
PIL.TiffImagePlugin.ImageFileDirectory_v1.__iter__(self)
PIL.TiffImagePlugin.ImageFileDirectory_v1.__len__(self)->int
PIL.TiffImagePlugin.ImageFileDirectory_v1.__setitem__(self,tag,value)
PIL.TiffImagePlugin.ImageFileDirectory_v1.from_v2(cls,original)
PIL.TiffImagePlugin.ImageFileDirectory_v1.to_v2(self)->ImageFileDirectory_v2
PIL.TiffImagePlugin.ImageFileDirectory_v2(self,ifh:bytes=b'II*\x00\x00\x00\x00\x00',prefix:bytes|None=None,group:int|None=None)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__contains__(self,tag)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__delitem__(self,tag:int)->None
PIL.TiffImagePlugin.ImageFileDirectory_v2.__getitem__(self,tag)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__init__(self,ifh:bytes=b'II*\x00\x00\x00\x00\x00',prefix:bytes|None=None,group:int|None=None)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__iter__(self)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__len__(self)->int
PIL.TiffImagePlugin.ImageFileDirectory_v2.__setitem__(self,tag,value)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__str__(self)->str
PIL.TiffImagePlugin.ImageFileDirectory_v2._ensure_read(self,fp,size)
PIL.TiffImagePlugin.ImageFileDirectory_v2._pack(self,fmt,*values)
PIL.TiffImagePlugin.ImageFileDirectory_v2._setitem(self,tag,value,legacy_api)
PIL.TiffImagePlugin.ImageFileDirectory_v2._unpack(self,fmt,data)
PIL.TiffImagePlugin.ImageFileDirectory_v2.legacy_api(self)->bool
PIL.TiffImagePlugin.ImageFileDirectory_v2.legacy_api(self,value:bool)->NoReturn
PIL.TiffImagePlugin.ImageFileDirectory_v2.load(self,fp)
PIL.TiffImagePlugin.ImageFileDirectory_v2.load_byte(self,data,legacy_api=True)
PIL.TiffImagePlugin.ImageFileDirectory_v2.load_rational(self,data,legacy_api=True)
PIL.TiffImagePlugin.ImageFileDirectory_v2.load_signed_rational(self,data,legacy_api=True)
PIL.TiffImagePlugin.ImageFileDirectory_v2.load_string(self,data,legacy_api=True)
PIL.TiffImagePlugin.ImageFileDirectory_v2.load_undefined(self,data,legacy_api=True)
PIL.TiffImagePlugin.ImageFileDirectory_v2.named(self)
PIL.TiffImagePlugin.ImageFileDirectory_v2.reset(self)->None
PIL.TiffImagePlugin.ImageFileDirectory_v2.save(self,fp)
PIL.TiffImagePlugin.ImageFileDirectory_v2.tobytes(self,offset=0)
PIL.TiffImagePlugin.ImageFileDirectory_v2.write_byte(self,data)
PIL.TiffImagePlugin.ImageFileDirectory_v2.write_rational(self,*values)
PIL.TiffImagePlugin.ImageFileDirectory_v2.write_signed_rational(self,*values)
PIL.TiffImagePlugin.ImageFileDirectory_v2.write_string(self,value)
PIL.TiffImagePlugin.ImageFileDirectory_v2.write_undefined(self,value)
PIL.TiffImagePlugin.TiffImageFile(self,fp=None,filename=None)
PIL.TiffImagePlugin.TiffImageFile.__init__(self,fp=None,filename=None)
PIL.TiffImagePlugin.TiffImageFile._load_libtiff(self)
PIL.TiffImagePlugin.TiffImageFile._open(self)->None
PIL.TiffImagePlugin.TiffImageFile._seek(self,frame:int)->None
PIL.TiffImagePlugin.TiffImageFile._setup(self)
PIL.TiffImagePlugin.TiffImageFile.get_photoshop_blocks(self)
PIL.TiffImagePlugin.TiffImageFile.load(self)
PIL.TiffImagePlugin.TiffImageFile.load_end(self)->None
PIL.TiffImagePlugin.TiffImageFile.n_frames(self)
PIL.TiffImagePlugin.TiffImageFile.seek(self,frame:int)->None
PIL.TiffImagePlugin.TiffImageFile.tell(self)->int
PIL.TiffImagePlugin._accept(prefix:bytes)->bool
PIL.TiffImagePlugin._delegate(op)
PIL.TiffImagePlugin._limit_rational(val,max_val)
PIL.TiffImagePlugin._limit_signed_rational(val,max_val,min_val)
PIL.TiffImagePlugin._register_basic(idx_fmt_name)
PIL.TiffImagePlugin._register_loader(idx,size)
PIL.TiffImagePlugin._register_writer(idx)
PIL.TiffImagePlugin._save(im,fp,filename)
PIL.TiffImagePlugin._save_all(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/_binary.py----------------------------------------
PIL._binary.i16be(c:bytes,o:int=0)->int
PIL._binary.i16le(c:bytes,o:int=0)->int
PIL._binary.i32be(c:bytes,o:int=0)->int
PIL._binary.i32le(c:bytes,o:int=0)->int
PIL._binary.i8(c:bytes)->int
PIL._binary.o16be(i:int)->bytes
PIL._binary.o16le(i:int)->bytes
PIL._binary.o32be(i:int)->bytes
PIL._binary.o32le(i:int)->bytes
PIL._binary.o8(i:int)->bytes
PIL._binary.si16be(c:bytes,o:int=0)->int
PIL._binary.si16le(c:bytes,o:int=0)->int
PIL._binary.si32be(c:bytes,o:int=0)->int
PIL._binary.si32le(c:bytes,o:int=0)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImagePalette.py----------------------------------------
A:PIL.ImagePalette.mode_len->len(self.mode)
A:PIL.ImagePalette.color->tuple(self.palette[i:i + mode_len])
A:PIL.ImagePalette.new->ImagePalette()
A:PIL.ImagePalette.arr->array.array('B', self.palette)
A:PIL.ImagePalette.self._palette->bytearray(self.palette)
A:PIL.ImagePalette.index->self._new_color_index(image, e)
A:PIL.ImagePalette.fp->open(fp, 'w')
A:PIL.ImagePalette.palette->list(range(256 * len(mode)))
A:PIL.ImagePalette.lut->paletteHandler(fp).getpalette()
PIL.ImagePalette.ImagePalette(self,mode:str='RGB',palette:Sequence[int]|bytes|bytearray|None=None)
PIL.ImagePalette.ImagePalette.__init__(self,mode:str='RGB',palette:Sequence[int]|bytes|bytearray|None=None)
PIL.ImagePalette.ImagePalette._new_color_index(self,image:Image.Image|None=None,e:Exception|None=None)->int
PIL.ImagePalette.ImagePalette.colors(self)->dict[tuple[int, ...], int]
PIL.ImagePalette.ImagePalette.colors(self,colors:dict[tuple[int,...],int])->None
PIL.ImagePalette.ImagePalette.copy(self)->ImagePalette
PIL.ImagePalette.ImagePalette.getcolor(self,color:tuple[int,...],image:Image.Image|None=None)->int
PIL.ImagePalette.ImagePalette.getdata(self)->tuple[str, Sequence[int] | bytes | bytearray]
PIL.ImagePalette.ImagePalette.palette(self)->Sequence[int] | bytes | bytearray
PIL.ImagePalette.ImagePalette.palette(self,palette:Sequence[int]|bytes|bytearray)->None
PIL.ImagePalette.ImagePalette.save(self,fp:str|IO[str])->None
PIL.ImagePalette.ImagePalette.tobytes(self)->bytes
PIL.ImagePalette.load(filename:str)->tuple[bytes, str]
PIL.ImagePalette.make_gamma_lut(exp:float)->list[int]
PIL.ImagePalette.make_linear_lut(black:int,white:float)->list[int]
PIL.ImagePalette.negative(mode:str='RGB')->ImagePalette
PIL.ImagePalette.random(mode:str='RGB')->ImagePalette
PIL.ImagePalette.raw(rawmode,data:Sequence[int]|bytes|bytearray)->ImagePalette
PIL.ImagePalette.sepia(white:str='#fff0c0')->ImagePalette
PIL.ImagePalette.wedge(mode:str='RGB')->ImagePalette


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/SunImagePlugin.py----------------------------------------
A:PIL.SunImagePlugin.s->self.fp.read(32)
A:PIL.SunImagePlugin.depth->i32(s, 12)
A:PIL.SunImagePlugin.file_type->i32(s, 20)
A:PIL.SunImagePlugin.palette_type->i32(s, 24)
A:PIL.SunImagePlugin.palette_length->i32(s, 28)
A:PIL.SunImagePlugin.self.palette->ImagePalette.raw('RGB;L', self.fp.read(palette_length))
A:PIL.SunImagePlugin.rawmode->rawmode.replace('L', 'P').replace('L', 'P')
PIL.SunImagePlugin.SunImageFile(ImageFile.ImageFile)
PIL.SunImagePlugin.SunImageFile._open(self)->None
PIL.SunImagePlugin._accept(prefix:bytes)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/_version.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImageDraw2.py----------------------------------------
A:PIL.ImageDraw2.self.color->ImageColor.getrgb(color)
A:PIL.ImageDraw2.self.font->ImageFont.truetype(file, size)
A:PIL.ImageDraw2.image->Image.new(image, size, color)
A:PIL.ImageDraw2.self.draw->ImageDraw.Draw(image)
A:PIL.ImageDraw2.xy->ImagePath.Path(xy)
PIL.ImageDraw2.Brush(self,color:str,opacity:int=255)
PIL.ImageDraw2.Brush.__init__(self,color:str,opacity:int=255)
PIL.ImageDraw2.Draw(self,image:Image.Image|str,size:tuple[int,int]|list[int]|None=None,color:float|tuple[float,...]|str|None=None)
PIL.ImageDraw2.Draw.__init__(self,image:Image.Image|str,size:tuple[int,int]|list[int]|None=None,color:float|tuple[float,...]|str|None=None)
PIL.ImageDraw2.Draw.arc(self,xy,start,end,*options)
PIL.ImageDraw2.Draw.chord(self,xy,start,end,*options)
PIL.ImageDraw2.Draw.ellipse(self,xy,*options)
PIL.ImageDraw2.Draw.flush(self)->Image.Image
PIL.ImageDraw2.Draw.line(self,xy,*options)
PIL.ImageDraw2.Draw.pieslice(self,xy,start,end,*options)
PIL.ImageDraw2.Draw.polygon(self,xy,*options)
PIL.ImageDraw2.Draw.rectangle(self,xy,*options)
PIL.ImageDraw2.Draw.render(self,op,xy,pen,brush=None)
PIL.ImageDraw2.Draw.settransform(self,offset)
PIL.ImageDraw2.Draw.text(self,xy,text,font)
PIL.ImageDraw2.Draw.textbbox(self,xy,text,font)
PIL.ImageDraw2.Draw.textlength(self,text,font)
PIL.ImageDraw2.Font(self,color:str,file:StrOrBytesPath|BinaryIO,size:float=12)
PIL.ImageDraw2.Font.__init__(self,color:str,file:StrOrBytesPath|BinaryIO,size:float=12)
PIL.ImageDraw2.Pen(self,color:str,width:int=1,opacity:int=255)
PIL.ImageDraw2.Pen.__init__(self,color:str,width:int=1,opacity:int=255)


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/PalmImagePlugin.py----------------------------------------
A:PIL.PalmImagePlugin.image->Image.new('L', (1, len(_Palm8BitColormapValues)))
A:PIL.PalmImagePlugin.Palm8BitColormapImage->build_prototype_image()
A:PIL.PalmImagePlugin.im->im.point(lambda x: maxval - (x & maxval)).point(lambda x: maxval - (x & maxval))
A:PIL.PalmImagePlugin.colormap->im.point(lambda x: maxval - (x & maxval)).point(lambda x: maxval - (x & maxval)).getdata().getpalette()
PIL.PalmImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None
PIL.PalmImagePlugin.build_prototype_image()->Image.Image


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImagePath.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ExifTags.py----------------------------------------
PIL.ExifTags.Base(IntEnum)
PIL.ExifTags.GPS(IntEnum)
PIL.ExifTags.IFD(IntEnum)
PIL.ExifTags.Interop(IntEnum)
PIL.ExifTags.LightSource(IntEnum)


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImageChops.py----------------------------------------
PIL.ImageChops.add(image1:Image.Image,image2:Image.Image,scale:float=1.0,offset:float=0)->Image.Image
PIL.ImageChops.add_modulo(image1:Image.Image,image2:Image.Image)->Image.Image
PIL.ImageChops.blend(image1:Image.Image,image2:Image.Image,alpha:float)->Image.Image
PIL.ImageChops.composite(image1:Image.Image,image2:Image.Image,mask:Image.Image)->Image.Image
PIL.ImageChops.constant(image:Image.Image,value:int)->Image.Image
PIL.ImageChops.darker(image1:Image.Image,image2:Image.Image)->Image.Image
PIL.ImageChops.difference(image1:Image.Image,image2:Image.Image)->Image.Image
PIL.ImageChops.duplicate(image:Image.Image)->Image.Image
PIL.ImageChops.hard_light(image1:Image.Image,image2:Image.Image)->Image.Image
PIL.ImageChops.invert(image:Image.Image)->Image.Image
PIL.ImageChops.lighter(image1:Image.Image,image2:Image.Image)->Image.Image
PIL.ImageChops.logical_and(image1:Image.Image,image2:Image.Image)->Image.Image
PIL.ImageChops.logical_or(image1:Image.Image,image2:Image.Image)->Image.Image
PIL.ImageChops.logical_xor(image1:Image.Image,image2:Image.Image)->Image.Image
PIL.ImageChops.multiply(image1:Image.Image,image2:Image.Image)->Image.Image
PIL.ImageChops.offset(image:Image.Image,xoffset:int,yoffset:int|None=None)->Image.Image
PIL.ImageChops.overlay(image1:Image.Image,image2:Image.Image)->Image.Image
PIL.ImageChops.screen(image1:Image.Image,image2:Image.Image)->Image.Image
PIL.ImageChops.soft_light(image1:Image.Image,image2:Image.Image)->Image.Image
PIL.ImageChops.subtract(image1:Image.Image,image2:Image.Image,scale:float=1.0,offset:float=0)->Image.Image
PIL.ImageChops.subtract_modulo(image1:Image.Image,image2:Image.Image)->Image.Image


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/McIdasImagePlugin.py----------------------------------------
A:PIL.McIdasImagePlugin.s->self.fp.read(256)
PIL.McIdasImagePlugin.McIdasImageFile(ImageFile.ImageFile)
PIL.McIdasImagePlugin.McIdasImageFile._open(self)->None
PIL.McIdasImagePlugin._accept(prefix:bytes)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImageMorph.py----------------------------------------
A:PIL.ImageMorph.self.lut->bytearray(f.read())
A:PIL.ImageMorph.n->len(patterns)
A:PIL.ImageMorph.pattern->pattern.replace(' ', '').replace('\n', '').replace(' ', '').replace('\n', '')
A:PIL.ImageMorph.m->re.search('(\\w*):?\\s*\\((.+?)\\)\\s*->\\s*(\\d)', p.replace('\n', ''))
A:PIL.ImageMorph.options->re.search('(\\w*):?\\s*\\((.+?)\\)\\s*->\\s*(\\d)', p.replace('\n', '')).group(1)
A:PIL.ImageMorph.result->int(m.group(3))
A:PIL.ImageMorph.p->pattern[0].replace('.', 'X').replace('X', '[01]')
A:PIL.ImageMorph.outimage->Image.new(image.mode, image.size, None)
A:PIL.ImageMorph.count->_imagingmorph.apply(bytes(self.lut), image.im.id, outimage.im.id)
PIL.ImageMorph.LutBuilder(self,patterns:list[str]|None=None,op_name:str|None=None)
PIL.ImageMorph.LutBuilder.__init__(self,patterns:list[str]|None=None,op_name:str|None=None)
PIL.ImageMorph.LutBuilder._pattern_permute(self,basic_pattern:str,options:str,basic_result:int)->list[tuple[str, int]]
PIL.ImageMorph.LutBuilder._string_permute(self,pattern:str,permutation:list[int])->str
PIL.ImageMorph.LutBuilder.add_patterns(self,patterns:list[str])->None
PIL.ImageMorph.LutBuilder.build_default_lut(self)->None
PIL.ImageMorph.LutBuilder.build_lut(self)->bytearray
PIL.ImageMorph.LutBuilder.get_lut(self)->bytearray | None
PIL.ImageMorph.MorphOp(self,lut:bytearray|None=None,op_name:str|None=None,patterns:list[str]|None=None)
PIL.ImageMorph.MorphOp.__init__(self,lut:bytearray|None=None,op_name:str|None=None,patterns:list[str]|None=None)
PIL.ImageMorph.MorphOp.apply(self,image:Image.Image)->tuple[int, Image.Image]
PIL.ImageMorph.MorphOp.get_on_pixels(self,image:Image.Image)->list[tuple[int, int]]
PIL.ImageMorph.MorphOp.load_lut(self,filename:str)->None
PIL.ImageMorph.MorphOp.match(self,image:Image.Image)->list[tuple[int, int]]
PIL.ImageMorph.MorphOp.save_lut(self,filename:str)->None
PIL.ImageMorph.MorphOp.set_lut(self,lut:bytearray|None)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/PcxImagePlugin.py----------------------------------------
A:PIL.PcxImagePlugin.logger->logging.getLogger(__name__)
A:PIL.PcxImagePlugin.s->self.fp.read(769)
A:PIL.PcxImagePlugin.provided_stride->i16(s, 66)
A:PIL.PcxImagePlugin.self.palette->ImagePalette.raw('RGB', s[1:])
A:PIL.PcxImagePlugin.palette->im.im.getpalette('RGB', 'RGB')
PIL.PcxImagePlugin.PcxImageFile(ImageFile.ImageFile)
PIL.PcxImagePlugin.PcxImageFile._open(self)->None
PIL.PcxImagePlugin._accept(prefix:bytes)->bool
PIL.PcxImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/PdfImagePlugin.py----------------------------------------
A:PIL.PdfImagePlugin.params->PdfParser.PdfArray([PdfParser.PdfDict({'K': -1, 'BlackIs1': True, 'Columns': width, 'Rows': height})])
A:PIL.PdfImagePlugin.dict_obj['ColorSpace']->PdfParser.PdfName('DeviceCMYK')
A:PIL.PdfImagePlugin.palette->im.getpalette()
A:PIL.PdfImagePlugin.smask->im.convert('LA').getchannel('A')
A:PIL.PdfImagePlugin.op->io.BytesIO()
A:PIL.PdfImagePlugin.stream->io.BytesIO().getvalue()
A:PIL.PdfImagePlugin.filter->PdfParser.PdfName(filter)
A:PIL.PdfImagePlugin.image_ref->image_refs.pop(0)
A:PIL.PdfImagePlugin.is_appending->im.encoderinfo.get('append', False)
A:PIL.PdfImagePlugin.existing_pdf->PdfParser.PdfParser(f=fp, filename=filename, mode='w+b')
A:PIL.PdfImagePlugin.dpi->im.encoderinfo.get('dpi')
A:PIL.PdfImagePlugin.x_resolutiony_resolution->im.encoderinfo.get('resolution', 72.0)
A:PIL.PdfImagePlugin.append_images->im.encoderinfo.get('append_images', [])
A:PIL.PdfImagePlugin.append_im.encoderinfo->im.encoderinfo.copy()
A:PIL.PdfImagePlugin.(image_ref, procset)->_write_image(im, filename, existing_pdf, image_refs)
PIL.PdfImagePlugin._save(im,fp,filename,save_all=False)
PIL.PdfImagePlugin._save_all(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None
PIL.PdfImagePlugin._write_image(im,filename,existing_pdf,image_refs)


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/SpiderImagePlugin.py----------------------------------------
A:PIL.SpiderImagePlugin.i->int(f)
A:PIL.SpiderImagePlugin.iform->int(h[5])
A:PIL.SpiderImagePlugin.labrec->int(1024 / lenbyt)
A:PIL.SpiderImagePlugin.labbyt->int(h[22])
A:PIL.SpiderImagePlugin.lenbyt->int(h[23])
A:PIL.SpiderImagePlugin.f->self.fp.read(n)
A:PIL.SpiderImagePlugin.t->struct.unpack('<27f', f)
A:PIL.SpiderImagePlugin.hdrlen->isSpiderHeader(t)
A:PIL.SpiderImagePlugin.self.istack->int(h[24])
A:PIL.SpiderImagePlugin.self.imgnumber->int(h[27])
A:PIL.SpiderImagePlugin.self._nimages->int(h[26])
A:PIL.SpiderImagePlugin.extrema->self.getextrema()
A:PIL.SpiderImagePlugin.(minimum, maximum)->cast(Tuple[float, float], extrema)
A:PIL.SpiderImagePlugin.im->im.transpose(Image.Transpose.FLIP_LEFT_RIGHT).transpose(Image.Transpose.FLIP_LEFT_RIGHT)
A:PIL.SpiderImagePlugin.nvalues->int(labbyt / 4)
A:PIL.SpiderImagePlugin.hdr[2]->float(nrow)
A:PIL.SpiderImagePlugin.hdr[3]->float(nrow)
A:PIL.SpiderImagePlugin.hdr[12]->float(nsam)
A:PIL.SpiderImagePlugin.hdr[13]->float(labrec)
A:PIL.SpiderImagePlugin.hdr[22]->float(labbyt)
A:PIL.SpiderImagePlugin.hdr[23]->float(lenbyt)
A:PIL.SpiderImagePlugin.hdr->makeSpiderHeader(im)
PIL.SpiderImagePlugin.SpiderImageFile(ImageFile.ImageFile)
PIL.SpiderImagePlugin.SpiderImageFile._open(self)->None
PIL.SpiderImagePlugin.SpiderImageFile.convert2byte(self,depth:int=255)->Image.Image
PIL.SpiderImagePlugin.SpiderImageFile.is_animated(self)->bool
PIL.SpiderImagePlugin.SpiderImageFile.n_frames(self)->int
PIL.SpiderImagePlugin.SpiderImageFile.seek(self,frame:int)->None
PIL.SpiderImagePlugin.SpiderImageFile.tell(self)->int
PIL.SpiderImagePlugin.SpiderImageFile.tkPhotoImage(self)->ImageTk.PhotoImage
PIL.SpiderImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None
PIL.SpiderImagePlugin._save_spider(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None
PIL.SpiderImagePlugin.isInt(f:Any)->int
PIL.SpiderImagePlugin.isSpiderHeader(t:tuple[float,...])->int
PIL.SpiderImagePlugin.isSpiderImage(filename:str)->int
PIL.SpiderImagePlugin.loadImageSeries(filelist:list[str]|None=None)->list[SpiderImageFile] | None
PIL.SpiderImagePlugin.makeSpiderHeader(im:Image.Image)->list[bytes]


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/JpegImagePlugin.py----------------------------------------
A:PIL.JpegImagePlugin.s->self.fp.read(read_bytes)
A:PIL.JpegImagePlugin.self.info['jfif']version->i16(s, 5)
A:PIL.JpegImagePlugin.self.info['jfif_version']->divmod(version, 256)
A:PIL.JpegImagePlugin.photoshop->self.info.setdefault('photoshop', {})
A:PIL.JpegImagePlugin.code->i16(s, offset)
A:PIL.JpegImagePlugin.size->o16(2 + ICC_OVERHEAD_LEN + len(marker))
A:PIL.JpegImagePlugin.self.info['adobe']->i16(s, 5)
A:PIL.JpegImagePlugin.icc_profile->TiffImagePlugin.ImageFileDirectory_v2(head).get('icc_profile')
A:PIL.JpegImagePlugin.data->array.array('B' if precision == 1 else 'H', s[1:qt_length])
A:PIL.JpegImagePlugin.i->i16(s)
A:PIL.JpegImagePlugin.scale->min(self.size[0] // size[0], self.size[1] // size[1])
A:PIL.JpegImagePlugin.(f, path)->im._dump().mkstemp()
A:PIL.JpegImagePlugin.exif->exif.tobytes().tobytes()
A:PIL.JpegImagePlugin.file_contents->io.BytesIO(data)
A:PIL.JpegImagePlugin.head->io.BytesIO(data).read(8)
A:PIL.JpegImagePlugin.info->TiffImagePlugin.ImageFileDirectory_v2(head)
A:PIL.JpegImagePlugin.mp->dict(info)
A:PIL.JpegImagePlugin.unpackedentry->struct.unpack_from(f'{endianness}LLLHH', rawmpentries, entrynum * 16)
A:PIL.JpegImagePlugin.mpentry->dict(zip(labels, unpackedentry))
A:PIL.JpegImagePlugin.mpentryattr['MPType']->mptypemap.get(mpentryattr['MPType'], 'Unknown')
A:PIL.JpegImagePlugin.quality->TiffImagePlugin.ImageFileDirectory_v2(head).get('quality', -1)
A:PIL.JpegImagePlugin.subsampling->get_sampling(im)
A:PIL.JpegImagePlugin.qtables->validate_qtables(qtables)
A:PIL.JpegImagePlugin.table->array.array('H', table)
A:PIL.JpegImagePlugin.qtables[idx]->list(table)
A:PIL.JpegImagePlugin.extra->TiffImagePlugin.ImageFileDirectory_v2(head).get('extra', b'')
A:PIL.JpegImagePlugin.comment->TiffImagePlugin.ImageFileDirectory_v2(head).get('comment', im.info.get('comment'))
A:PIL.JpegImagePlugin.optimize->TiffImagePlugin.ImageFileDirectory_v2(head).get('optimize', False)
A:PIL.JpegImagePlugin.bufsize->max(bufsize, len(exif) + 5, len(extra) + 1)
A:PIL.JpegImagePlugin.tempfile->MpoImagePlugin.MpoImageFile.adopt(im, mpheader)._dump()
A:PIL.JpegImagePlugin.im->MpoImagePlugin.MpoImageFile.adopt(im, mpheader)
A:PIL.JpegImagePlugin.mpheader->MpoImagePlugin.MpoImageFile.adopt(im, mpheader)._getmp()
PIL.JpegImagePlugin.APP(self,marker)
PIL.JpegImagePlugin.COM(self:JpegImageFile,marker:int)->None
PIL.JpegImagePlugin.DQT(self:JpegImageFile,marker:int)->None
PIL.JpegImagePlugin.JpegImageFile(ImageFile.ImageFile)
PIL.JpegImagePlugin.JpegImageFile._getexif(self)->dict[str, Any] | None
PIL.JpegImagePlugin.JpegImageFile._getmp(self)
PIL.JpegImagePlugin.JpegImageFile._open(self)
PIL.JpegImagePlugin.JpegImageFile._read_dpi_from_exif(self)->None
PIL.JpegImagePlugin.JpegImageFile.draft(self,mode:str|None,size:tuple[int,int]|None)->tuple[str, tuple[int, int, float, float]] | None
PIL.JpegImagePlugin.JpegImageFile.load_djpeg(self)->None
PIL.JpegImagePlugin.JpegImageFile.load_read(self,read_bytes:int)->bytes
PIL.JpegImagePlugin.SOF(self:JpegImageFile,marker:int)->None
PIL.JpegImagePlugin.Skip(self:JpegImageFile,marker:int)->None
PIL.JpegImagePlugin._accept(prefix:bytes)->bool
PIL.JpegImagePlugin._getexif(self)->dict[str, Any] | None
PIL.JpegImagePlugin._getmp(self)
PIL.JpegImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None
PIL.JpegImagePlugin._save_cjpeg(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None
PIL.JpegImagePlugin.get_sampling(im)
PIL.JpegImagePlugin.jpeg_factory(fp=None,filename=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImageGrab.py----------------------------------------
A:PIL.ImageGrab.(fh, filepath)->tempfile.mkstemp('.png')
A:PIL.ImageGrab.im->Image.open(data)
A:PIL.ImageGrab.im_resized->Image.open(data).resize((right - left, bottom - top))
A:PIL.ImageGrab.(offset, size, data)->Image.core.grabscreen_win32(include_layered_windows, all_screens)
A:PIL.ImageGrab.(size, data)->Image.core.grabscreen_x11(display_name)
A:PIL.ImageGrab.im_cropped->Image.open(data).crop(bbox)
A:PIL.ImageGrab.(fmt, data)->Image.core.grabclipboard_win32()
A:PIL.ImageGrab.files->data[o:].decode('mbcs').split('\x00')
A:PIL.ImageGrab.data->io.BytesIO(p.stdout)
A:PIL.ImageGrab.p->subprocess.run(args, capture_output=True)
PIL.ImageGrab.grab(bbox:tuple[int,int,int,int]|None=None,include_layered_windows:bool=False,all_screens:bool=False,xdisplay:str|None=None)->Image.Image
PIL.ImageGrab.grabclipboard()->Image.Image | list[str] | None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImageWin.py----------------------------------------
A:PIL.ImageWin.mode->Image.getmodebase(mode)
A:PIL.ImageWin.self.image->Image.core.display(mode, size)
A:PIL.ImageWin.dc->self.image.getdc(handle)
A:PIL.ImageWin.result->self.image.query_palette(handle)
A:PIL.ImageWin.handle->self.image.getdc(handle)
A:PIL.ImageWin.im->im.convert(self.mode).convert(self.mode)
A:PIL.ImageWin.self.hwnd->Image.core.createwindow(title, self.__dispatcher, width or 0, height or 0)
A:PIL.ImageWin.image->Dib(image)
PIL.ImageWin.Dib(self,image:Image.Image|str,size:tuple[int,int]|list[int]|None=None)
PIL.ImageWin.Dib.__init__(self,image:Image.Image|str,size:tuple[int,int]|list[int]|None=None)
PIL.ImageWin.Dib.draw(self,handle,dst,src=None)
PIL.ImageWin.Dib.expose(self,handle)
PIL.ImageWin.Dib.frombytes(self,buffer:bytes)->None
PIL.ImageWin.Dib.paste(self,im:Image.Image,box:tuple[int,int,int,int]|None=None)->None
PIL.ImageWin.Dib.query_palette(self,handle)
PIL.ImageWin.Dib.tobytes(self)->bytes
PIL.ImageWin.HDC(self,dc:int)
PIL.ImageWin.HDC.__init__(self,dc:int)
PIL.ImageWin.HDC.__int__(self)->int
PIL.ImageWin.HWND(self,wnd:int)
PIL.ImageWin.HWND.__init__(self,wnd:int)
PIL.ImageWin.HWND.__int__(self)->int
PIL.ImageWin.ImageWindow(self,image,title='PIL')
PIL.ImageWin.ImageWindow.__init__(self,image,title='PIL')
PIL.ImageWin.ImageWindow.ui_handle_repair(self,dc,x0,y0,x1,y1)
PIL.ImageWin.Window(self,title:str='PIL',width:int|None=None,height:int|None=None)
PIL.ImageWin.Window.__dispatcher(self,action,*args)
PIL.ImageWin.Window.__init__(self,title:str='PIL',width:int|None=None,height:int|None=None)
PIL.ImageWin.Window.mainloop(self)->None
PIL.ImageWin.Window.ui_handle_clear(self,dc,x0,y0,x1,y1)
PIL.ImageWin.Window.ui_handle_damage(self,x0,y0,x1,y1)
PIL.ImageWin.Window.ui_handle_destroy(self)->None
PIL.ImageWin.Window.ui_handle_repair(self,dc,x0,y0,x1,y1)
PIL.ImageWin.Window.ui_handle_resize(self,width,height)


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImageCms.py----------------------------------------
A:PIL.ImageCms.core->_util.DeferredError.new(ex)
A:PIL.ImageCms._MAX_FLAG->reduce(operator.or_, Flags)
A:PIL.ImageCms.profile_bytes_path->ImageCmsProfile(profile).encode()
A:PIL.ImageCms.self.transform->_util.DeferredError.new(ex).buildProofTransform(input.profile, output.profile, proof.profile, input_mode, output_mode, intent, proof_intent, flags)
A:PIL.ImageCms.imOut->ImageCmsTransform(inputProfile, outputProfile, im.mode, outputMode, renderingIntent, flags=flags).apply(im)
A:PIL.ImageCms.imOut.info['icc_profile']->self.output_profile.tobytes()
A:PIL.ImageCms.im.info['icc_profile']->self.output_profile.tobytes()
A:PIL.ImageCms.profile->ImageCmsProfile(profile)
A:PIL.ImageCms.inputProfile->ImageCmsProfile(inputProfile)
A:PIL.ImageCms.outputProfile->ImageCmsProfile(outputProfile)
A:PIL.ImageCms.transform->ImageCmsTransform(inputProfile, outputProfile, im.mode, outputMode, renderingIntent, flags=flags)
A:PIL.ImageCms.proofProfile->ImageCmsProfile(proofProfile)
A:PIL.ImageCms.colorTemp->float(colorTemp)
PIL.ImageCms.Direction(IntEnum)
PIL.ImageCms.Flags(IntFlag)
PIL.ImageCms.Flags.GRIDPOINTS(n:int)->Flags
PIL.ImageCms.ImageCmsProfile(self,profile:str|SupportsRead[bytes]|core.CmsProfile)
PIL.ImageCms.ImageCmsProfile.__init__(self,profile:str|SupportsRead[bytes]|core.CmsProfile)
PIL.ImageCms.ImageCmsProfile._set(self,profile:core.CmsProfile,filename:str|None=None)->None
PIL.ImageCms.ImageCmsProfile.tobytes(self)->bytes
PIL.ImageCms.ImageCmsTransform(self,input:ImageCmsProfile,output:ImageCmsProfile,input_mode:str,output_mode:str,intent:Intent=Intent.PERCEPTUAL,proof:ImageCmsProfile|None=None,proof_intent:Intent=Intent.ABSOLUTE_COLORIMETRIC,flags:Flags=Flags.NONE)
PIL.ImageCms.ImageCmsTransform.__init__(self,input:ImageCmsProfile,output:ImageCmsProfile,input_mode:str,output_mode:str,intent:Intent=Intent.PERCEPTUAL,proof:ImageCmsProfile|None=None,proof_intent:Intent=Intent.ABSOLUTE_COLORIMETRIC,flags:Flags=Flags.NONE)
PIL.ImageCms.ImageCmsTransform.apply(self,im:Image.Image,imOut:Image.Image|None=None)->Image.Image
PIL.ImageCms.ImageCmsTransform.apply_in_place(self,im:Image.Image)->Image.Image
PIL.ImageCms.ImageCmsTransform.point(self,im:Image.Image)->Image.Image
PIL.ImageCms.Intent(IntEnum)
PIL.ImageCms.PyCMSError(Exception)
PIL.ImageCms.__getattr__(name:str)->Any
PIL.ImageCms.applyTransform(im:Image.Image,transform:ImageCmsTransform,inPlace:bool=False)->Image.Image | None
PIL.ImageCms.buildProofTransform(inputProfile:_CmsProfileCompatible,outputProfile:_CmsProfileCompatible,proofProfile:_CmsProfileCompatible,inMode:str,outMode:str,renderingIntent:Intent=Intent.PERCEPTUAL,proofRenderingIntent:Intent=Intent.ABSOLUTE_COLORIMETRIC,flags:Flags=Flags.SOFTPROOFING)->ImageCmsTransform
PIL.ImageCms.buildTransform(inputProfile:_CmsProfileCompatible,outputProfile:_CmsProfileCompatible,inMode:str,outMode:str,renderingIntent:Intent=Intent.PERCEPTUAL,flags:Flags=Flags.NONE)->ImageCmsTransform
PIL.ImageCms.createProfile(colorSpace:Literal['LAB','XYZ','sRGB'],colorTemp:SupportsFloat=0)->core.CmsProfile
PIL.ImageCms.getDefaultIntent(profile:_CmsProfileCompatible)->int
PIL.ImageCms.getOpenProfile(profileFilename:str|SupportsRead[bytes]|core.CmsProfile)->ImageCmsProfile
PIL.ImageCms.getProfileCopyright(profile:_CmsProfileCompatible)->str
PIL.ImageCms.getProfileDescription(profile:_CmsProfileCompatible)->str
PIL.ImageCms.getProfileInfo(profile:_CmsProfileCompatible)->str
PIL.ImageCms.getProfileManufacturer(profile:_CmsProfileCompatible)->str
PIL.ImageCms.getProfileModel(profile:_CmsProfileCompatible)->str
PIL.ImageCms.getProfileName(profile:_CmsProfileCompatible)->str
PIL.ImageCms.get_display_profile(handle:SupportsInt|None=None)->ImageCmsProfile | None
PIL.ImageCms.isIntentSupported(profile:_CmsProfileCompatible,intent:Intent,direction:Direction)->Literal[-1, 1]
PIL.ImageCms.profileToProfile(im:Image.Image,inputProfile:_CmsProfileCompatible,outputProfile:_CmsProfileCompatible,renderingIntent:Intent=Intent.PERCEPTUAL,outputMode:str|None=None,inPlace:bool=False,flags:Flags=Flags.NONE)->Image.Image | None
PIL.ImageCms.versions()->tuple[str, str | None, str, str]


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/FpxImagePlugin.py----------------------------------------
A:PIL.FpxImagePlugin.self.ole->olefile.OleFileIO(self.fp)
A:PIL.FpxImagePlugin.prop->self.ole.getproperties([f'Data Object Store {index:06d}', '\x05Image Contents'])
A:PIL.FpxImagePlugin.size->max(self.size)
A:PIL.FpxImagePlugin.bands->i32(s, 4)
A:PIL.FpxImagePlugin.colors->tuple((i32(s, 8 + i * 4) & 2147483647 for i in range(bands)))
A:PIL.FpxImagePlugin.fp->self.ole.openstream(stream)
A:PIL.FpxImagePlugin.s->self.ole.openstream(stream).read(i32(s, 12) * length)
A:PIL.FpxImagePlugin.offset->i32(s, 28)
A:PIL.FpxImagePlugin.length->i32(s, 32)
A:PIL.FpxImagePlugin.x1->min(xsize, x + xtile)
A:PIL.FpxImagePlugin.y1->min(ysize, y + ytile)
A:PIL.FpxImagePlugin.compression->i32(s, i + 8)
A:PIL.FpxImagePlugin.self.fp->self.ole.openstream(self.stream[:2] + ['Subimage 0000 Data'])
PIL.FpxImagePlugin.FpxImageFile(ImageFile.ImageFile)
PIL.FpxImagePlugin.FpxImageFile.__exit__(self,*args:object)->None
PIL.FpxImagePlugin.FpxImageFile._open(self)
PIL.FpxImagePlugin.FpxImageFile._open_index(self,index:int=1)->None
PIL.FpxImagePlugin.FpxImageFile._open_subimage(self,index:int=1,subimage:int=0)->None
PIL.FpxImagePlugin.FpxImageFile.close(self)->None
PIL.FpxImagePlugin.FpxImageFile.load(self)
PIL.FpxImagePlugin._accept(prefix:bytes)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/BdfFontFile.py----------------------------------------
A:PIL.BdfFontFile.s->fp.readline()
A:PIL.BdfFontFile.id->s[9:].strip().decode('ascii')
A:PIL.BdfFontFile.i->fp.readline().find(b' ')
A:PIL.BdfFontFile.props[s[:i].decode('ascii')]->s[i + 1:-1].decode('ascii')
A:PIL.BdfFontFile.bitmap->bytearray()
A:PIL.BdfFontFile.im->Image.new('1', (width, height))
A:PIL.BdfFontFile.c->bdf_char(fp)
PIL.BdfFontFile.BdfFontFile(self,fp:BinaryIO)
PIL.BdfFontFile.BdfFontFile.__init__(self,fp:BinaryIO)
PIL.BdfFontFile.bdf_char(f:BinaryIO)->tuple[str, int, tuple[tuple[int, int], tuple[int, int, int, int], tuple[int, int, int, int]], Image.Image] | None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/PyAccess.py----------------------------------------
A:PIL.PyAccess.ffi->FFI()
A:PIL.PyAccess.FFIffi->_util.DeferredError.new(ex)
A:PIL.PyAccess.logger->logging.getLogger(__name__)
A:PIL.PyAccess.vals->dict(img.im.unsafe_ptrs)
A:PIL.PyAccess.self.image8->FFI().cast('unsigned char **', vals['image8'])
A:PIL.PyAccess.self.image32->FFI().cast('int **', vals['image32'])
A:PIL.PyAccess.self.image->FFI().cast('unsigned char **', vals['image'])
A:PIL.PyAccess.(x, y)->self.check_xy((x, y))
A:PIL.PyAccess.palette_index->self._palette.getcolor(color, self._img)
A:PIL.PyAccess.self.pixels->FFI().cast('float **', self.image32)
A:PIL.PyAccess.pixel.r->min(color[0], 255)
A:PIL.PyAccess.pixel.a->min(color[3], 255)
A:PIL.PyAccess.pixel.g->min(color[1], 255)
A:PIL.PyAccess.pixel.b->min(color[2], 255)
A:PIL.PyAccess.self.pixels[y][x]->self.reverse(color)
A:PIL.PyAccess.color->min(color[0], 65535)
A:PIL.PyAccess.orig->FFI().new('int *', i)
A:PIL.PyAccess.chars->FFI().cast('unsigned char *', orig)
A:PIL.PyAccess.access_type->mode_map.get(img.mode, None)
PIL.PyAccess.PyAccess(self,img:Image.Image,readonly:bool=False)
PIL.PyAccess.PyAccess.__getitem__(self,xy:tuple[int,int]|list[int])->float | tuple[int, ...]
PIL.PyAccess.PyAccess.__init__(self,img:Image.Image,readonly:bool=False)
PIL.PyAccess.PyAccess.__setitem__(self,xy:tuple[int,int]|list[int],color:float|tuple[int,...]|list[int])->None
PIL.PyAccess.PyAccess._post_init(self)->None
PIL.PyAccess.PyAccess.check_xy(self,xy:tuple[int,int])->tuple[int, int]
PIL.PyAccess.PyAccess.get_pixel(self,x:int,y:int)->float | tuple[int, ...]
PIL.PyAccess.PyAccess.set_pixel(self,x:int,y:int,color:float|tuple[int,...]|list[int])->None
PIL.PyAccess._PyAccess32_2(PyAccess)
PIL.PyAccess._PyAccess32_2._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccess32_2.get_pixel(self,x:int,y:int)->tuple[int, int]
PIL.PyAccess._PyAccess32_2.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccess32_3(PyAccess)
PIL.PyAccess._PyAccess32_3._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccess32_3.get_pixel(self,x:int,y:int)->tuple[int, int, int]
PIL.PyAccess._PyAccess32_3.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccess32_4(PyAccess)
PIL.PyAccess._PyAccess32_4._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccess32_4.get_pixel(self,x:int,y:int)->tuple[int, int, int, int]
PIL.PyAccess._PyAccess32_4.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccess8(PyAccess)
PIL.PyAccess._PyAccess8._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccess8.get_pixel(self,x:int,y:int)->int
PIL.PyAccess._PyAccess8.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccessF(PyAccess)
PIL.PyAccess._PyAccessF._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccessF.get_pixel(self,x:int,y:int)->float
PIL.PyAccess._PyAccessF.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccessI16_B(PyAccess)
PIL.PyAccess._PyAccessI16_B._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccessI16_B.get_pixel(self,x:int,y:int)->int
PIL.PyAccess._PyAccessI16_B.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccessI16_L(PyAccess)
PIL.PyAccess._PyAccessI16_L._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccessI16_L.get_pixel(self,x:int,y:int)->int
PIL.PyAccess._PyAccessI16_L.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccessI16_N(PyAccess)
PIL.PyAccess._PyAccessI16_N._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccessI16_N.get_pixel(self,x:int,y:int)->int
PIL.PyAccess._PyAccessI16_N.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccessI32_N(PyAccess)
PIL.PyAccess._PyAccessI32_N._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccessI32_N.get_pixel(self,x:int,y:int)->int
PIL.PyAccess._PyAccessI32_N.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccessI32_Swap(PyAccess)
PIL.PyAccess._PyAccessI32_Swap._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccessI32_Swap.get_pixel(self,x:int,y:int)->int
PIL.PyAccess._PyAccessI32_Swap.reverse(self,i)
PIL.PyAccess._PyAccessI32_Swap.set_pixel(self,x,y,color)
PIL.PyAccess.new(img:Image.Image,readonly:bool=False)->PyAccess | None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImageMode.py----------------------------------------
PIL.ImageMode.ModeDescriptor(NamedTuple)
PIL.ImageMode.ModeDescriptor.__str__(self)->str
PIL.ImageMode.getmode(mode:str)->ModeDescriptor


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/features.py----------------------------------------
A:PIL.features.version->getattr(Image.core, f'{lib}_version')
A:PIL.features.imported_module->__import__(module, fromlist=['PIL'])
A:PIL.features.ret->get_supported_modules()
A:PIL.features.py_version_lines->sys.version.splitlines()
A:PIL.features.libjpeg_turbo_version->version_feature('libjpeg_turbo')
A:PIL.features.v->version(name)
A:PIL.features.v2->version_feature(f)
A:PIL.features.extensions->collections.defaultdict(list)
PIL.features.check(feature:str)->bool | None
PIL.features.check_codec(feature:str)->bool
PIL.features.check_feature(feature:str)->bool | None
PIL.features.check_module(feature:str)->bool
PIL.features.get_supported()->list[str]
PIL.features.get_supported_codecs()->list[str]
PIL.features.get_supported_features()->list[str]
PIL.features.get_supported_modules()->list[str]
PIL.features.pilinfo(out:IO[str]|None=None,supported_formats:bool=True)->None
PIL.features.version(feature:str)->str | None
PIL.features.version_codec(feature:str)->str | None
PIL.features.version_feature(feature:str)->str | None
PIL.features.version_module(feature:str)->str | None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/Hdf5StubImagePlugin.py----------------------------------------
A:PIL.Hdf5StubImagePlugin.offset->self.fp.tell()
A:PIL.Hdf5StubImagePlugin.loader->self._load()
PIL.Hdf5StubImagePlugin.HDF5StubImageFile(ImageFile.StubImageFile)
PIL.Hdf5StubImagePlugin.HDF5StubImageFile._load(self)->ImageFile.StubHandler | None
PIL.Hdf5StubImagePlugin.HDF5StubImageFile._open(self)->None
PIL.Hdf5StubImagePlugin._accept(prefix:bytes)->bool
PIL.Hdf5StubImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None
PIL.Hdf5StubImagePlugin.register_handler(handler:ImageFile.StubHandler|None)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImageFilter.py----------------------------------------
A:PIL.ImageFilter.scale->functools.reduce(lambda a, b: a + b, kernel)
A:PIL.ImageFilter.image->image.expand(self.size // 2, self.size // 2).expand(self.size // 2, self.size // 2)
A:PIL.ImageFilter.self.sizesize->self._check_size(size)
A:PIL.ImageFilter.copy_table->kwargs.get('_copy_table', True)
A:PIL.ImageFilter.numpy_table->numpy_table.copy().copy()
A:PIL.ImageFilter.table->list(table)
A:PIL.ImageFilter.raw_table->cast(Sequence[Sequence[int]], table)
A:PIL.ImageFilter.size->tuple((int(x) for x in size))
A:PIL.ImageFilter.(size_1d, size_2d, size_3d)->cls._check_size(size)
A:PIL.ImageFilter.table[idx_out:idx_out + channels]->callback(r / (size_1d - 1), g / (size_2d - 1), b / (size_3d - 1))
A:PIL.ImageFilter.values->callback(*values)
PIL.ImageFilter.BLUR(BuiltinFilter)
PIL.ImageFilter.BoxBlur(self,radius:float|Sequence[float])
PIL.ImageFilter.BoxBlur.__init__(self,radius:float|Sequence[float])
PIL.ImageFilter.BoxBlur.filter(self,image:_imaging.ImagingCore)->_imaging.ImagingCore
PIL.ImageFilter.BuiltinFilter(MultibandFilter)
PIL.ImageFilter.BuiltinFilter.filter(self,image:_imaging.ImagingCore)->_imaging.ImagingCore
PIL.ImageFilter.CONTOUR(BuiltinFilter)
PIL.ImageFilter.Color3DLUT(self,size:int|tuple[int,int,int],table:Sequence[float]|Sequence[Sequence[int]]|NumpyArray,channels:int=3,target_mode:str|None=None,**kwargs:bool)
PIL.ImageFilter.Color3DLUT.__init__(self,size:int|tuple[int,int,int],table:Sequence[float]|Sequence[Sequence[int]]|NumpyArray,channels:int=3,target_mode:str|None=None,**kwargs:bool)
PIL.ImageFilter.Color3DLUT.__repr__(self)->str
PIL.ImageFilter.Color3DLUT._check_size(size:Any)->tuple[int, int, int]
PIL.ImageFilter.Color3DLUT.filter(self,image:_imaging.ImagingCore)->_imaging.ImagingCore
PIL.ImageFilter.Color3DLUT.generate(cls,size:int|tuple[int,int,int],callback:Callable[[float,float,float],tuple[float,...]],channels:int=3,target_mode:str|None=None)->Color3DLUT
PIL.ImageFilter.Color3DLUT.transform(self,callback:Callable[...,tuple[float,...]],with_normals:bool=False,channels:int|None=None,target_mode:str|None=None)->Color3DLUT
PIL.ImageFilter.DETAIL(BuiltinFilter)
PIL.ImageFilter.EDGE_ENHANCE(BuiltinFilter)
PIL.ImageFilter.EDGE_ENHANCE_MORE(BuiltinFilter)
PIL.ImageFilter.EMBOSS(BuiltinFilter)
PIL.ImageFilter.FIND_EDGES(BuiltinFilter)
PIL.ImageFilter.Filter
PIL.ImageFilter.Filter.filter(self,image:_imaging.ImagingCore)->_imaging.ImagingCore
PIL.ImageFilter.GaussianBlur(self,radius:float|Sequence[float]=2)
PIL.ImageFilter.GaussianBlur.__init__(self,radius:float|Sequence[float]=2)
PIL.ImageFilter.GaussianBlur.filter(self,image:_imaging.ImagingCore)->_imaging.ImagingCore
PIL.ImageFilter.Kernel(self,size:tuple[int,int],kernel:Sequence[float],scale:float|None=None,offset:float=0)
PIL.ImageFilter.Kernel.__init__(self,size:tuple[int,int],kernel:Sequence[float],scale:float|None=None,offset:float=0)
PIL.ImageFilter.MaxFilter(self,size:int=3)
PIL.ImageFilter.MaxFilter.__init__(self,size:int=3)
PIL.ImageFilter.MedianFilter(self,size:int=3)
PIL.ImageFilter.MedianFilter.__init__(self,size:int=3)
PIL.ImageFilter.MinFilter(self,size:int=3)
PIL.ImageFilter.MinFilter.__init__(self,size:int=3)
PIL.ImageFilter.ModeFilter(self,size:int=3)
PIL.ImageFilter.ModeFilter.__init__(self,size:int=3)
PIL.ImageFilter.ModeFilter.filter(self,image:_imaging.ImagingCore)->_imaging.ImagingCore
PIL.ImageFilter.MultibandFilter(Filter)
PIL.ImageFilter.RankFilter(self,size:int,rank:int)
PIL.ImageFilter.RankFilter.__init__(self,size:int,rank:int)
PIL.ImageFilter.RankFilter.filter(self,image:_imaging.ImagingCore)->_imaging.ImagingCore
PIL.ImageFilter.SHARPEN(BuiltinFilter)
PIL.ImageFilter.SMOOTH(BuiltinFilter)
PIL.ImageFilter.SMOOTH_MORE(BuiltinFilter)
PIL.ImageFilter.UnsharpMask(self,radius:float=2,percent:int=150,threshold:int=3)
PIL.ImageFilter.UnsharpMask.__init__(self,radius:float=2,percent:int=150,threshold:int=3)
PIL.ImageFilter.UnsharpMask.filter(self,image:_imaging.ImagingCore)->_imaging.ImagingCore


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/IcoImagePlugin.py----------------------------------------
A:PIL.IcoImagePlugin.sizes->list(self.info['sizes'])
A:PIL.IcoImagePlugin.frame->provided_im.copy()
A:PIL.IcoImagePlugin.image_io->BytesIO()
A:PIL.IcoImagePlugin.and_mask->Image.new('1', size)
A:PIL.IcoImagePlugin.image_bytes->BytesIO().read()
A:PIL.IcoImagePlugin.bytes_len->len(image_bytes)
A:PIL.IcoImagePlugin.current->fp.tell()
A:PIL.IcoImagePlugin.s->buf.read(16)
A:PIL.IcoImagePlugin.self.nb_items->i16(s, 4)
A:PIL.IcoImagePlugin.self.entry->sorted(self.entry, key=lambda x: x['square'], reverse=True)
A:PIL.IcoImagePlugin.data->self.buf.read(8)
A:PIL.IcoImagePlugin.im->self.ico.getimage(self.size)
A:PIL.IcoImagePlugin.mask->Image.frombuffer('1', im.size, mask_data, 'raw', ('1;I', int(w / 8), -1))
A:PIL.IcoImagePlugin.total_bytes->int(w * im.size[1] / 8)
A:PIL.IcoImagePlugin.mask_data->self.buf.read(total_bytes)
A:PIL.IcoImagePlugin.self.ico->IcoFile(self.fp)
A:PIL.IcoImagePlugin.self.info['sizes']->set(sizes)
A:PIL.IcoImagePlugin.index->self.ico.getentryindex(self.size)
PIL.IcoImagePlugin.IcoFile(self,buf)
PIL.IcoImagePlugin.IcoFile.__init__(self,buf)
PIL.IcoImagePlugin.IcoFile.frame(self,idx:int)->Image.Image
PIL.IcoImagePlugin.IcoFile.getentryindex(self,size,bpp=False)
PIL.IcoImagePlugin.IcoFile.getimage(self,size,bpp=False)
PIL.IcoImagePlugin.IcoFile.sizes(self)
PIL.IcoImagePlugin.IcoImageFile(ImageFile.ImageFile)
PIL.IcoImagePlugin.IcoImageFile._open(self)->None
PIL.IcoImagePlugin.IcoImageFile.load(self)
PIL.IcoImagePlugin.IcoImageFile.load_seek(self,pos:int)->None
PIL.IcoImagePlugin.IcoImageFile.size(self)
PIL.IcoImagePlugin.IcoImageFile.size(self,value)
PIL.IcoImagePlugin._accept(prefix:bytes)->bool
PIL.IcoImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/_imaging.pyi----------------------------------------
PIL._imaging.ImagingCore
PIL._imaging.ImagingCore.__getattr__(self,name:str)->Any
PIL._imaging.ImagingDecoder
PIL._imaging.ImagingDecoder.__getattr__(self,name:str)->Any
PIL._imaging.ImagingDraw
PIL._imaging.ImagingDraw.__getattr__(self,name:str)->Any
PIL._imaging.ImagingEncoder
PIL._imaging.ImagingEncoder.__getattr__(self,name:str)->Any
PIL._imaging.ImagingFont
PIL._imaging.ImagingFont.__getattr__(self,name:str)->Any
PIL._imaging.PixelAccess
PIL._imaging.PixelAccess.__getitem__(self,xy:tuple[int,int])->float | tuple[int, ...]
PIL._imaging.PixelAccess.__setitem__(self,xy:tuple[int,int],color:float|tuple[int,...])->None
PIL._imaging._Outline
PIL._imaging._Outline.__getattr__(self,name:str)->Any
PIL._imaging._Outline.close(self)->None
PIL._imaging.__getattr__(name:str)->Any
PIL._imaging.font(image:ImagingCore,glyphdata:bytes)->ImagingFont
PIL._imaging.outline()->_Outline


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImageColor.py----------------------------------------
A:PIL.ImageColor.color->color.lower().lower()
A:PIL.ImageColor.rgb->colormap.get(color, None)
A:PIL.ImageColor.rgb_tuple->getrgb(rgb)
A:PIL.ImageColor.m->re.match('rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)$', color)
A:PIL.ImageColor.rgb_floats->hsv_to_rgb(float(m.group(1)) / 360.0, float(m.group(2)) / 100.0, float(m.group(3)) / 100.0)
A:PIL.ImageColor.(h, s, v)->rgb_to_hsv(r / 255, g / 255, b / 255)
PIL.ImageColor.getcolor(color:str,mode:str)->int | tuple[int, ...]
PIL.ImageColor.getrgb(color:str)->tuple[int, int, int] | tuple[int, int, int, int]


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/TgaImagePlugin.py----------------------------------------
A:PIL.TgaImagePlugin.s->self.fp.read(18)
A:PIL.TgaImagePlugin.self.info['id_section']->self.fp.read(id_len)
A:PIL.TgaImagePlugin.self.palette->ImagePalette.raw('BGRA', bytes(4 * start) + self.fp.read(4 * size))
A:PIL.TgaImagePlugin.self.im->self.im.transpose(Image.Transpose.FLIP_LEFT_RIGHT)
A:PIL.TgaImagePlugin.compression->im.encoderinfo.get('compression', im.info.get('compression'))
A:PIL.TgaImagePlugin.id_section->im.encoderinfo.get('id_section', im.info.get('id_section', ''))
A:PIL.TgaImagePlugin.id_len->len(id_section)
A:PIL.TgaImagePlugin.palette->im.im.getpalette('RGB', 'BGR')
A:PIL.TgaImagePlugin.orientation->im.encoderinfo.get('orientation', im.info.get('orientation', -1))
PIL.TgaImagePlugin.TgaImageFile(ImageFile.ImageFile)
PIL.TgaImagePlugin.TgaImageFile._open(self)->None
PIL.TgaImagePlugin.TgaImageFile.load_end(self)->None
PIL.TgaImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/BufrStubImagePlugin.py----------------------------------------
A:PIL.BufrStubImagePlugin.offset->self.fp.tell()
A:PIL.BufrStubImagePlugin.loader->self._load()
PIL.BufrStubImagePlugin.BufrStubImageFile(ImageFile.StubImageFile)
PIL.BufrStubImagePlugin.BufrStubImageFile._load(self)->ImageFile.StubHandler | None
PIL.BufrStubImagePlugin.BufrStubImageFile._open(self)->None
PIL.BufrStubImagePlugin._accept(prefix:bytes)->bool
PIL.BufrStubImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None
PIL.BufrStubImagePlugin.register_handler(handler:ImageFile.StubHandler|None)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/FitsImagePlugin.py----------------------------------------
A:PIL.FitsImagePlugin.header->self.fp.read(80)
A:PIL.FitsImagePlugin.keyword->header[:8].strip()
A:PIL.FitsImagePlugin.(decoder_name, offset, args)->self._parse_headers(headers)
A:PIL.FitsImagePlugin.value->gzip.decompress(self.fd.read())
A:PIL.FitsImagePlugin.naxis->int(headers[prefix + b'NAXIS'])
A:PIL.FitsImagePlugin.number_of_bits->min(self.args[0] // 8, 4)
A:PIL.FitsImagePlugin.size->self._get_size(headers, prefix)
A:PIL.FitsImagePlugin.row->bytearray()
PIL.FitsImagePlugin.FitsGzipDecoder(ImageFile.PyDecoder)
PIL.FitsImagePlugin.FitsGzipDecoder.decode(self,buffer:bytes)->tuple[int, int]
PIL.FitsImagePlugin.FitsImageFile(ImageFile.ImageFile)
PIL.FitsImagePlugin.FitsImageFile._get_size(self,headers:dict[bytes,bytes],prefix:bytes)->tuple[int, int] | None
PIL.FitsImagePlugin.FitsImageFile._open(self)->None
PIL.FitsImagePlugin.FitsImageFile._parse_headers(self,headers:dict[bytes,bytes])->tuple[str, int, tuple[str | int, ...]]
PIL.FitsImagePlugin._accept(prefix:bytes)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/JpegPresets.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/GbrImagePlugin.py----------------------------------------
A:PIL.GbrImagePlugin.header_size->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.version->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.width->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.height->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.color_depth->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.magic_number->self.fp.read(4)
A:PIL.GbrImagePlugin.self.info['spacing']->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.self.im->Image.core.new(self.mode, self.size)
PIL.GbrImagePlugin.GbrImageFile(ImageFile.ImageFile)
PIL.GbrImagePlugin.GbrImageFile._open(self)->None
PIL.GbrImagePlugin.GbrImageFile.load(self)
PIL.GbrImagePlugin._accept(prefix:bytes)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/report.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/_imagingmorph.pyi----------------------------------------
PIL._imagingmorph.__getattr__(name:str)->Any


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImageQt.py----------------------------------------
A:PIL.ImageQt.buffer->QBuffer()
A:PIL.ImageQt.b->BytesIO()
A:PIL.ImageQt.(full_bytes_per_line, remaining_bits_per_line)->divmod(bits_per_line, 8)
A:PIL.ImageQt.im->im.point(lambda i: i * 256).point(lambda i: i * 256)
A:PIL.ImageQt.palette->im.point(lambda i: i * 256).point(lambda i: i * 256).getpalette()
A:PIL.ImageQt.data->im.point(lambda i: i * 256).point(lambda i: i * 256).tobytes('raw', 'BGRA')
A:PIL.ImageQt.im_data->_toqclass_helper(im)
A:PIL.ImageQt.qimage->toqimage(im)
PIL.ImageQt._toqclass_helper(im)
PIL.ImageQt.align8to32(bytes,width,mode)
PIL.ImageQt.fromqimage(im)
PIL.ImageQt.fromqpixmap(im)
PIL.ImageQt.rgb(r,g,b,a=255)
PIL.ImageQt.toqimage(im)->ImageQt
PIL.ImageQt.toqpixmap(im)


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/Image.py----------------------------------------
A:PIL.Image.logger->logging.getLogger(__name__)
A:PIL.Image.core->_util.DeferredError.new(ImportError('The _imaging C module is not installed.'))
A:PIL.Image.m->ImageMode.getmode(im.mode)
A:PIL.Image.extra->len(m.bands)
A:PIL.Image.decoder->getattr(core, f'{decoder_name}_decoder')
A:PIL.Image.encoder->getattr(core, f'{encoder_name}_encoder')
A:PIL.Image.a->expr(_E(1, 0))
A:PIL.Image.new->Image()
A:PIL.Image.new.palette->ImagePalette.ImagePalette()
A:PIL.Image.new.info->self.info.copy()
A:PIL.Image.self._fp->DeferredError(ValueError('Operation on closed image'))
A:PIL.Image.self.im->_util.DeferredError.new(ImportError('The _imaging C module is not installed.')).new(mode, size)
A:PIL.Image.(f, filename)->tempfile.mkstemp(suffix)
A:PIL.Image.b->io.BytesIO()
A:PIL.Image.new['data']->self.tobytes()
A:PIL.Image.(new['shape'], new['typestr'])->_conv_type_shape(self)
A:PIL.Image.im_data->self.tobytes()
A:PIL.Image.e->_getencoder(self.mode, encoder_name, encoder_args)
A:PIL.Image.bufsize->max(65536, self.size[0] * 4)
A:PIL.Image.(bytes_consumed, errcode, data)->_getencoder(self.mode, encoder_name, encoder_args).encode(bufsize)
A:PIL.Image.data->bytes(data)
A:PIL.Image.d->_getdecoder(self.mode, decoder_name, decoder_args)
A:PIL.Image.s->_getdecoder(self.mode, decoder_name, decoder_args).decode(data)
A:PIL.Image.(mode, arr)->self.palette.getdata()
A:PIL.Image.self.palette.palette->self.im.getpalette(self.palette.mode, self.palette.mode)
A:PIL.Image.self.pyaccess->PyAccess.new(self, self.readonly)
A:PIL.Image.im->_open_core(fp, filename, prefix, tuple((format for format in formats if format not in checked_formats)))
A:PIL.Image.new_im->self._new(im)
A:PIL.Image.transparency->tuple((convert_transparency(matrix[i * 4:i * 4 + 4], transparency) for i in range(0, len(transparency))))
A:PIL.Image.trns_im->trns_im.convert('RGB').convert('RGB')
A:PIL.Image.t->trns_im.convert('RGB').convert('RGB').palette.getcolor(t, self)
A:PIL.Image.trns->trns_im.convert('RGB').convert('RGB').getpixel((0, 0))
A:PIL.Image.new_im.palette->ImagePalette.raw(rawmode, data).palette.copy()
A:PIL.Image.new_im.info['transparency']->self._new(im).palette.getcolor(trns, new_im)
A:PIL.Image.srgb->ImageCms.createProfile('sRGB')
A:PIL.Image.lab->ImageCms.createProfile('LAB')
A:PIL.Image.transform->ImageCms.buildTransform(profiles[0], profiles[1], self.mode, mode)
A:PIL.Image.modebase->getmodebase(self.mode)
A:PIL.Image.mode->self.im.getpalettemode()
A:PIL.Image.im.palette->ImagePalette.ImagePalette('RGB', im.im.getpalette('RGB'))
A:PIL.Image.(x0, y0, x1, y1)->map(int, map(round, box))
A:PIL.Image.filter->filter()
A:PIL.Image.multiband->isinstance(filter, ImageFilter.MultibandFilter)
A:PIL.Image.h->self.im.histogram()
A:PIL.Image.children->list(element)
A:PIL.Image.name->get_name(child.tag)
A:PIL.Image.child_value->get_value(child)
A:PIL.Image.root->defusedxml.ElementTree.fromstring(self.info['xmp'].rstrip(b'\x00'))
A:PIL.Image.self._exif->Exif()
A:PIL.Image.exif_info->bytes.fromhex(''.join(self.info['Raw profile type exif'].split('\n')[3:]))
A:PIL.Image.xmp_tags->self.info.get('XML:com.adobe.xmp')
A:PIL.Image.match->re.search('tiff:Orientation(="|>)([0-9])', xmp_tags)
A:PIL.Image.self._exif[ExifTags.Base.Orientation]->int(match[2])
A:PIL.Image.exif->self.getexif()
A:PIL.Image.ifd1->self.getexif().get_ifd(ExifTags.IFD.IFD1)
A:PIL.Image.current_offset->self.fp.tell()
A:PIL.Image.thumbnail_offset->self._ifds.get(tag, {}).get(513)
A:PIL.Image.fp->io.BytesIO(fp.read())
A:PIL.Image.palette->ImagePalette.raw(rawmode, data)
A:PIL.Image.self.palette->ImagePalette.ImagePalette('RGBA', bytes(palette))
A:PIL.Image.(x, y)->transform(x, y, matrix)
A:PIL.Image.extrema->self.getextrema()
A:PIL.Image.overlay_crop_box->tuple(source)
A:PIL.Image.overlay->_open_core(fp, filename, prefix, tuple((format for format in formats if format not in checked_formats))).crop(overlay_crop_box)
A:PIL.Image.background->self.crop(box)
A:PIL.Image.result->alpha_composite(background, overlay)
A:PIL.Image.(scale, offset)->_getscaleoffset(lut)
A:PIL.Image.alpha->new('L', self.size, alpha)
A:PIL.Image.palette_index->self.palette.getcolor(value, self)
A:PIL.Image.palette_mode->self.im.getpalettemode()
A:PIL.Image.source_palette->bytearray((i // 3 for i in range(768)))
A:PIL.Image.mapping_palette->bytearray(new_positions)
A:PIL.Image.m_im->m_im.convert('L').convert('L')
A:PIL.Image.m_im.palette->ImagePalette.ImagePalette(palette_mode, palette=palette_bytes)
A:PIL.Image.m_im.info['transparency']->dest_map.index(self.info['transparency'])
A:PIL.Image.reduce_box->self._get_safe_box(size, resample, box)
A:PIL.Image.(matrix[2], matrix[5])->transform(-(nw - w) / 2.0, -(nh - h) / 2.0, matrix)
A:PIL.Image.filename->os.path.realpath(os.fspath(fp))
A:PIL.Image.save_all->params.pop('save_all', False)
A:PIL.Image.filename_ext->os.path.splitext(filename)[1].lower()
A:PIL.Image.channel->self.getbands().index(channel)
A:PIL.Image.provided_size->tuple(map(math.floor, size))
A:PIL.Image.x->round_aspect(y * aspect, key=lambda n: abs(aspect - n / y))
A:PIL.Image.y->round_aspect(x / aspect, key=lambda n: 0 if n == 0 else abs(aspect - x / n))
A:PIL.Image.preserved_size->preserve_aspect_ratio()
A:PIL.Image.res->self.draft(None, (int(size[0] * reducing_gap), int(size[1] * reducing_gap)))
A:PIL.Image.(method, data)->method.getdata()
A:PIL.Image.im.info->self.info.copy()
A:PIL.Image.color->_open_core(fp, filename, prefix, tuple((format for format in formats if format not in checked_formats))).palette.getcolor(color_ints)
A:PIL.Image.ndim->len(shape)
A:PIL.Image.strides->arr.get('strides', None)
A:PIL.Image.obj->obj.tostring().tostring()
A:PIL.Image.prefix->io.BytesIO(fp.read()).read(16)
A:PIL.Image.i->i.upper().upper()
A:PIL.Image.checked_formats->ID.copy()
A:PIL.Image.image->image2.copy()
A:PIL.Image.id->id.upper().upper()
A:PIL.Image.EXTENSION[extension.lower()]->id.upper().upper().upper()
A:PIL.Image.var->env_dict[var_name].lower()
A:PIL.Image.info->TiffImagePlugin.ImageFileDirectory_v2(self.head, group=group)
A:PIL.Image.self.fp->io.BytesIO(data)
A:PIL.Image.self.head->self.fp.read(8)
A:PIL.Image.self._info->TiffImagePlugin.ImageFileDirectory_v2(self.head)
A:PIL.Image.merged_dict->dict(self)
A:PIL.Image.ifd->self._ifds.get(tag, {})
A:PIL.Image.merged_dict[ExifTags.IFD.GPSInfo]->self._get_ifd_dict(self[ExifTags.IFD.GPSInfo], ExifTags.IFD.GPSInfo)
A:PIL.Image.head->self._get_head()
A:PIL.Image.value->value.copy().copy()
A:PIL.Image.value[ExifTags.IFD.Interop]->self.get_ifd(ExifTags.IFD.Interop)
A:PIL.Image.self._ifds[tag]->self._get_ifd_dict(tag_data, tag)
A:PIL.Image.offset->self._hidden_data.get(tag, self.get(tag))
A:PIL.Image.ifd_offset->i32le(tag_data, 8)
A:PIL.Image.(ifd_tag, typ, count, data)->struct.unpack('>HHL4s', tag_data[i * 12 + 2:(i + 1) * 12 + 2])
A:PIL.Image.(offset,)->struct.unpack('>L', data)
A:PIL.Image.makernote[ifd_tag]->handler(ImageFileDirectory_v2(), data, False)
A:PIL.Image.camerainfo['TimeStamp']->i32le(self.fp.read(12))
A:PIL.Image.camerainfo['InternalSerialNumber']->self.fp.read(4)
A:PIL.Image.parallax->self.fp.read(4)
A:PIL.Image.camerainfo['Parallax']->handler(ImageFileDirectory_v2(), parallax, False)
A:PIL.Image.camerainfo['Category']->self.fp.read(2)
A:PIL.Image.keys->set(self._data)
A:PIL.Image.self._data[tag]->self._fixup(self._info[tag])
PIL.Image.DecompressionBombError(Exception)
PIL.Image.DecompressionBombWarning(RuntimeWarning)
PIL.Image.Dither(IntEnum)
PIL.Image.Exif(self)
PIL.Image.Exif.__contains__(self,tag)->bool
PIL.Image.Exif.__delitem__(self,tag:int)->None
PIL.Image.Exif.__getitem__(self,tag)
PIL.Image.Exif.__init__(self)
PIL.Image.Exif.__iter__(self)
PIL.Image.Exif.__len__(self)->int
PIL.Image.Exif.__setitem__(self,tag,value)->None
PIL.Image.Exif.__str__(self)->str
PIL.Image.Exif._fixup(self,value)
PIL.Image.Exif._fixup_dict(self,src_dict)
PIL.Image.Exif._get_head(self)
PIL.Image.Exif._get_ifd_dict(self,offset,group=None)
PIL.Image.Exif._get_merged_dict(self)
PIL.Image.Exif.get_ifd(self,tag)
PIL.Image.Exif.hide_offsets(self)->None
PIL.Image.Exif.load(self,data)
PIL.Image.Exif.load_from_fp(self,fp,offset=None)
PIL.Image.Exif.tobytes(self,offset:int=8)->bytes
PIL.Image.Image(self)
PIL.Image.Image.__array_interface__(self)
PIL.Image.Image.__enter__(self)
PIL.Image.Image.__eq__(self,other:object)->bool
PIL.Image.Image.__exit__(self,*args)
PIL.Image.Image.__getstate__(self)
PIL.Image.Image.__init__(self)
PIL.Image.Image.__repr__(self)->str
PIL.Image.Image.__setstate__(self,state)->None
PIL.Image.Image.__transformer(self,box,image,method,data,resample=Resampling.NEAREST,fill=1)
PIL.Image.Image._close_fp(self)
PIL.Image.Image._copy(self)->None
PIL.Image.Image._crop(self,im:core.ImagingCore,box:tuple[float,float,float,float])->core.ImagingCore
PIL.Image.Image._dump(self,file:str|None=None,format:str|None=None,**options:Any)->str
PIL.Image.Image._ensure_mutable(self)->None
PIL.Image.Image._expand(self,xmargin:int,ymargin:int|None=None)->Image
PIL.Image.Image._get_safe_box(self,size,resample,box)
PIL.Image.Image._new(self,im:core.ImagingCore)->Image
PIL.Image.Image._reload_exif(self)->None
PIL.Image.Image._repr_image(self,image_format:str,**kwargs:Any)->bytes | None
PIL.Image.Image._repr_jpeg_(self)->bytes | None
PIL.Image.Image._repr_png_(self)->bytes | None
PIL.Image.Image._repr_pretty_(self,p,cycle)->None
PIL.Image.Image.alpha_composite(self,im:Image,dest:Sequence[int]=(0,0),source:Sequence[int]=(0,0))->None
PIL.Image.Image.apply_transparency(self)->None
PIL.Image.Image.close(self)->None
PIL.Image.Image.convert(self,mode:str|None=None,matrix:tuple[float,...]|None=None,dither:Dither|None=None,palette:Palette=Palette.WEB,colors:int=256)->Image
PIL.Image.Image.copy(self)->Image
PIL.Image.Image.crop(self,box:tuple[float,float,float,float]|None=None)->Image
PIL.Image.Image.draft(self,mode:str|None,size:tuple[int,int]|None)->tuple[str, tuple[int, int, float, float]] | None
PIL.Image.Image.effect_spread(self,distance:int)->Image
PIL.Image.Image.entropy(self,mask=None,extrema=None)
PIL.Image.Image.filter(self,filter:ImageFilter.Filter|type[ImageFilter.Filter])->Image
PIL.Image.Image.frombytes(self,data:bytes|bytearray,decoder_name:str='raw',*args:Any)->None
PIL.Image.Image.get_child_images(self)->list[ImageFile.ImageFile]
PIL.Image.Image.getbands(self)->tuple[str, ...]
PIL.Image.Image.getbbox(self,*,alpha_only:bool=True)->tuple[int, int, int, int] | None
PIL.Image.Image.getchannel(self,channel:int|str)->Image
PIL.Image.Image.getcolors(self,maxcolors:int=256)
PIL.Image.Image.getdata(self,band:int|None=None)
PIL.Image.Image.getexif(self)->Exif
PIL.Image.Image.getextrema(self)->tuple[float, float] | tuple[tuple[int, int], ...]
PIL.Image.Image.getim(self)
PIL.Image.Image.getpalette(self,rawmode:str|None='RGB')->list[int] | None
PIL.Image.Image.getpixel(self,xy:tuple[int,int]|list[int])->float | tuple[int, ...] | None
PIL.Image.Image.getprojection(self)->tuple[list[int], list[int]]
PIL.Image.Image.getxmp(self)
PIL.Image.Image.has_transparency_data(self)->bool
PIL.Image.Image.height(self)->int
PIL.Image.Image.histogram(self,mask:Image|None=None,extrema=None)->list[int]
PIL.Image.Image.load(self)->core.PixelAccess | PyAccess.PyAccess | None
PIL.Image.Image.mode(self)->str
PIL.Image.Image.paste(self,im:Image|str|float|tuple[float,...],box:Image|tuple[int,int,int,int]|tuple[int,int]|None=None,mask:Image|None=None)->None
PIL.Image.Image.point(self,lut:Sequence[float]|Callable[[int],float]|ImagePointHandler,mode:str|None=None)->Image
PIL.Image.Image.putalpha(self,alpha:Image|int)->None
PIL.Image.Image.putdata(self,data:Sequence[float]|Sequence[Sequence[int]],scale:float=1.0,offset:float=0.0)->None
PIL.Image.Image.putpalette(self,data,rawmode='RGB')->None
PIL.Image.Image.putpixel(self,xy:tuple[int,int],value:float|tuple[int,...]|list[int])->None
PIL.Image.Image.quantize(self,colors:int=256,method:int|None=None,kmeans:int=0,palette=None,dither:Dither=Dither.FLOYDSTEINBERG)->Image
PIL.Image.Image.reduce(self,factor:int|tuple[int,int],box:tuple[int,int,int,int]|None=None)->Image
PIL.Image.Image.remap_palette(self,dest_map,source_palette=None)
PIL.Image.Image.resize(self,size:tuple[int,int],resample:int|None=None,box:tuple[float,float,float,float]|None=None,reducing_gap:float|None=None)->Image
PIL.Image.Image.rotate(self,angle:float,resample:Resampling=Resampling.NEAREST,expand:int|bool=False,center:tuple[float,float]|None=None,translate:tuple[int,int]|None=None,fillcolor:float|tuple[float,...]|str|None=None)->Image
PIL.Image.Image.save(self,fp:StrOrBytesPath|IO[bytes],format:str|None=None,**params:Any)->None
PIL.Image.Image.seek(self,frame:int)->None
PIL.Image.Image.show(self,title:str|None=None)->None
PIL.Image.Image.size(self)->tuple[int, int]
PIL.Image.Image.split(self)->tuple[Image, ...]
PIL.Image.Image.tell(self)->int
PIL.Image.Image.thumbnail(self,size:tuple[float,float],resample:Resampling=Resampling.BICUBIC,reducing_gap:float|None=2.0)->None
PIL.Image.Image.tobitmap(self,name:str='image')->bytes
PIL.Image.Image.tobytes(self,encoder_name:str='raw',*args:Any)->bytes
PIL.Image.Image.toqimage(self)
PIL.Image.Image.toqpixmap(self)
PIL.Image.Image.transform(self,size:tuple[int,int],method:Transform|ImageTransformHandler|SupportsGetData,data:Sequence[Any]|None=None,resample:int=Resampling.NEAREST,fill:int=1,fillcolor:float|tuple[float,...]|str|None=None)->Image
PIL.Image.Image.transpose(self,method:Transpose)->Image
PIL.Image.Image.verify(self)->None
PIL.Image.Image.width(self)->int
PIL.Image.ImagePointHandler
PIL.Image.ImagePointHandler.point(self,im:Image)->Image
PIL.Image.ImageTransformHandler
PIL.Image.ImageTransformHandler.transform(self,size:tuple[int,int],image:Image,**options:Any)->Image
PIL.Image.Palette(IntEnum)
PIL.Image.Quantize(IntEnum)
PIL.Image.Resampling(IntEnum)
PIL.Image.SupportsArrayInterface(Protocol)
PIL.Image.SupportsArrayInterface.__array_interface__(self)->dict[str, Any]
PIL.Image.SupportsGetData(Protocol)
PIL.Image.SupportsGetData.getdata(self)->tuple[Transform, Sequence[int]]
PIL.Image.Transform(IntEnum)
PIL.Image.Transpose(IntEnum)
PIL.Image._E(self,scale,offset)
PIL.Image._E.__add__(self,other)
PIL.Image._E.__init__(self,scale,offset)
PIL.Image._E.__mul__(self,other)
PIL.Image._E.__neg__(self)
PIL.Image._E.__rsub__(self,other)
PIL.Image._E.__sub__(self,other)
PIL.Image._E.__truediv__(self,other)
PIL.Image._apply_env_variables(env:dict[str,str]|None=None)->None
PIL.Image._check_size(size:Any)->None
PIL.Image._conv_type_shape(im)
PIL.Image._decompression_bomb_check(size:tuple[int,int])->None
PIL.Image._getdecoder(mode:str,decoder_name:str,args:Any,extra:tuple[Any,...]=())->core.ImagingDecoder | ImageFile.PyDecoder
PIL.Image._getencoder(mode:str,encoder_name:str,args:Any,extra:tuple[Any,...]=())->core.ImagingEncoder | ImageFile.PyEncoder
PIL.Image._getscaleoffset(expr)
PIL.Image._show(image:Image,**options:Any)->None
PIL.Image._wedge()->Image
PIL.Image.alpha_composite(im1:Image,im2:Image)->Image
PIL.Image.blend(im1:Image,im2:Image,alpha:float)->Image
PIL.Image.composite(image1:Image,image2:Image,mask:Image)->Image
PIL.Image.effect_mandelbrot(size:tuple[int,int],extent:tuple[float,float,float,float],quality:int)->Image
PIL.Image.effect_noise(size:tuple[int,int],sigma:float)->Image
PIL.Image.eval(image,*args)
PIL.Image.fromarray(obj:SupportsArrayInterface,mode:str|None=None)->Image
PIL.Image.frombuffer(mode:str,size:tuple[int,int],data,decoder_name:str='raw',*args:Any)->Image
PIL.Image.frombytes(mode:str,size:tuple[int,int],data:bytes|bytearray,decoder_name:str='raw',*args:Any)->Image
PIL.Image.fromqimage(im)
PIL.Image.fromqpixmap(im)
PIL.Image.getmodebandnames(mode:str)->tuple[str, ...]
PIL.Image.getmodebands(mode:str)->int
PIL.Image.getmodebase(mode:str)->str
PIL.Image.getmodetype(mode:str)->str
PIL.Image.init()->bool
PIL.Image.isImageType(t:Any)->TypeGuard[Image]
PIL.Image.linear_gradient(mode:str)->Image
PIL.Image.merge(mode:str,bands:Sequence[Image])->Image
PIL.Image.new(mode:str,size:tuple[int,int]|list[int],color:float|tuple[float,...]|str|None=0)->Image
PIL.Image.open(fp:StrOrBytesPath|IO[bytes],mode:Literal['r']='r',formats:list[str]|tuple[str,...]|None=None)->ImageFile.ImageFile
PIL.Image.preinit()->None
PIL.Image.radial_gradient(mode:str)->Image
PIL.Image.register_decoder(name:str,decoder:type[ImageFile.PyDecoder])->None
PIL.Image.register_encoder(name:str,encoder:type[ImageFile.PyEncoder])->None
PIL.Image.register_extension(id:str,extension:str)->None
PIL.Image.register_extensions(id:str,extensions:list[str])->None
PIL.Image.register_mime(id:str,mimetype:str)->None
PIL.Image.register_open(id:str,factory:Callable[[IO[bytes],str|bytes],ImageFile.ImageFile],accept:Callable[[bytes],bool|str]|None=None)->None
PIL.Image.register_save(id:str,driver:Callable[[Image,IO[bytes],str|bytes],None])->None
PIL.Image.register_save_all(id:str,driver:Callable[[Image,IO[bytes],str|bytes],None])->None
PIL.Image.registered_extensions()->dict[str, str]


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/DcxImagePlugin.py----------------------------------------
A:PIL.DcxImagePlugin.s->self.fp.read(4)
A:PIL.DcxImagePlugin.offset->i32(self.fp.read(4))
A:PIL.DcxImagePlugin.self.n_frames->len(self._offset)
PIL.DcxImagePlugin.DcxImageFile(PcxImageFile)
PIL.DcxImagePlugin.DcxImageFile._open(self)->None
PIL.DcxImagePlugin.DcxImageFile.seek(self,frame:int)->None
PIL.DcxImagePlugin.DcxImageFile.tell(self)->int
PIL.DcxImagePlugin._accept(prefix:bytes)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImageFont.py----------------------------------------
A:PIL.ImageFont.core->_util.DeferredError.new(ex)
A:PIL.ImageFont.image->Image.open(fullname)
A:PIL.ImageFont.s->file.readline()
A:PIL.ImageFont.data->file.read(256 * 20)
A:PIL.ImageFont.self.font->_util.DeferredError.new(ex).getfont(font, size, index, encoding, layout_engine=layout_engine)
A:PIL.ImageFont.(width, height)->self.font.getsize(text)
A:PIL.ImageFont.self.font_bytes->ImageFont().read()
A:PIL.ImageFont.font->BytesIO(self.font_bytes)
A:PIL.ImageFont.(size, offset)->self.font.getsize(text, mode, direction, features, language, anchor)
A:PIL.ImageFont.names->self.get_variation_names()
A:PIL.ImageFont.name->name.encode().encode()
A:PIL.ImageFont.axes->self.font.getvaraxes()
A:PIL.ImageFont.axis['name']->axis['name'].replace(b'\x00', b'').replace(b'\x00', b'')
A:PIL.ImageFont.im->self.font.getmask(text, mode, *args, **kwargs)
A:PIL.ImageFont.(left, top, right, bottom)->self.font.getbbox(text, *args, **kwargs)
A:PIL.ImageFont.f->ImageFont()
A:PIL.ImageFont.ttf_filename->os.path.basename(font)
A:PIL.ImageFont.windir->os.environ.get('WINDIR')
A:PIL.ImageFont.data_home->os.path.expanduser('~/.local/share')
A:PIL.ImageFont.data_dirs->os.environ.get('XDG_DATA_DIRS')
A:PIL.ImageFont.fontpath->os.path.join(walkroot, walkfilename)
A:PIL.ImageFont.filename->filename.decode('utf-8').decode('utf-8')
PIL.ImageFont.FreeTypeFont(self,font:StrOrBytesPath|BinaryIO|None=None,size:float=10,index:int=0,encoding:str='',layout_engine:Layout|None=None)
PIL.ImageFont.FreeTypeFont.__getstate__(self)
PIL.ImageFont.FreeTypeFont.__init__(self,font:StrOrBytesPath|BinaryIO|None=None,size:float=10,index:int=0,encoding:str='',layout_engine:Layout|None=None)
PIL.ImageFont.FreeTypeFont.__setstate__(self,state)
PIL.ImageFont.FreeTypeFont.font_variant(self,font=None,size=None,index=None,encoding=None,layout_engine=None)
PIL.ImageFont.FreeTypeFont.get_variation_axes(self)
PIL.ImageFont.FreeTypeFont.get_variation_names(self)->list[bytes]
PIL.ImageFont.FreeTypeFont.getbbox(self,text:str|bytes,mode:str='',direction:str|None=None,features:list[str]|None=None,language:str|None=None,stroke_width:float=0,anchor:str|None=None)->tuple[float, float, float, float]
PIL.ImageFont.FreeTypeFont.getlength(self,text:str|bytes,mode='',direction=None,features=None,language=None)->float
PIL.ImageFont.FreeTypeFont.getmask(self,text,mode='',direction=None,features=None,language=None,stroke_width=0,anchor=None,ink=0,start=None)
PIL.ImageFont.FreeTypeFont.getmask2(self,text:str|bytes,mode='',direction=None,features=None,language=None,stroke_width=0,anchor=None,ink=0,start=None,*args,**kwargs)
PIL.ImageFont.FreeTypeFont.getmetrics(self)->tuple[int, int]
PIL.ImageFont.FreeTypeFont.getname(self)->tuple[str | None, str | None]
PIL.ImageFont.FreeTypeFont.set_variation_by_axes(self,axes:list[float])->None
PIL.ImageFont.FreeTypeFont.set_variation_by_name(self,name)
PIL.ImageFont.ImageFont
PIL.ImageFont.ImageFont._load_pilfont(self,filename:str)->None
PIL.ImageFont.ImageFont._load_pilfont_data(self,file:IO[bytes],image:Image.Image)->None
PIL.ImageFont.ImageFont.getbbox(self,text:str|bytes|bytearray,*args:Any,**kwargs:Any)->tuple[int, int, int, int]
PIL.ImageFont.ImageFont.getlength(self,text:str|bytes|bytearray,*args:Any,**kwargs:Any)->int
PIL.ImageFont.ImageFont.getmask(self,text,mode='',*args,**kwargs)
PIL.ImageFont.Layout(IntEnum)
PIL.ImageFont.TransposedFont(self,font,orientation=None)
PIL.ImageFont.TransposedFont.__init__(self,font,orientation=None)
PIL.ImageFont.TransposedFont.getbbox(self,text,*args,**kwargs)
PIL.ImageFont.TransposedFont.getlength(self,text:str|bytes,*args,**kwargs)->float
PIL.ImageFont.TransposedFont.getmask(self,text,mode='',*args,**kwargs)
PIL.ImageFont._string_length_check(text:str|bytes|bytearray)->None
PIL.ImageFont.load(filename:str)->ImageFont
PIL.ImageFont.load_default(size:float|None=None)->FreeTypeFont | ImageFont
PIL.ImageFont.load_default_imagefont()->ImageFont
PIL.ImageFont.load_path(filename:str|bytes)->ImageFont
PIL.ImageFont.truetype(font:StrOrBytesPath|BinaryIO|None=None,size:float=10,index:int=0,encoding:str='',layout_engine:Layout|None=None)->FreeTypeFont


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/_imagingmath.pyi----------------------------------------
PIL._imagingmath.__getattr__(name:str)->Any


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/FontFile.py----------------------------------------
A:PIL.FontFile.h->max(h, src[3] - src[1])
A:PIL.FontFile.maxwidth->max(maxwidth, w)
A:PIL.FontFile.self.bitmap->Image.new('1', (xsize, ysize))
PIL.FontFile.FontFile(self)
PIL.FontFile.FontFile.__getitem__(self,ix:int)->tuple[tuple[int, int], tuple[int, int, int, int], tuple[int, int, int, int], Image.Image] | None
PIL.FontFile.FontFile.__init__(self)
PIL.FontFile.FontFile.compile(self)->None
PIL.FontFile.FontFile.save(self,filename:str)->None
PIL.FontFile.puti16(fp:BinaryIO,values:tuple[int,int,int,int,int,int,int,int,int,int])->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/MpegImagePlugin.py----------------------------------------
A:PIL.MpegImagePlugin.c->self.next()
A:PIL.MpegImagePlugin.v->self.peek(bits)
A:PIL.MpegImagePlugin.s->BitStream(self.fp)
PIL.MpegImagePlugin.BitStream(self,fp:SupportsRead[bytes])
PIL.MpegImagePlugin.BitStream.__init__(self,fp:SupportsRead[bytes])
PIL.MpegImagePlugin.BitStream.next(self)->int
PIL.MpegImagePlugin.BitStream.peek(self,bits:int)->int
PIL.MpegImagePlugin.BitStream.read(self,bits:int)->int
PIL.MpegImagePlugin.BitStream.skip(self,bits:int)->None
PIL.MpegImagePlugin.MpegImageFile(ImageFile.ImageFile)
PIL.MpegImagePlugin.MpegImageFile._open(self)->None
PIL.MpegImagePlugin._accept(prefix:bytes)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/XVThumbImagePlugin.py----------------------------------------
A:PIL.XVThumbImagePlugin.s->s.strip().split().strip().split()
A:PIL.XVThumbImagePlugin.self.palette->ImagePalette.raw('RGB', PALETTE)
PIL.XVThumbImagePlugin.XVThumbImageFile(ImageFile.ImageFile)
PIL.XVThumbImagePlugin.XVThumbImageFile._open(self)->None
PIL.XVThumbImagePlugin._accept(prefix:bytes)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/GifImagePlugin.py----------------------------------------
A:PIL.GifImagePlugin.s->self.fp.read(9)
A:PIL.GifImagePlugin.p->self.fp.read(3 << bits)
A:PIL.GifImagePlugin.self.__rewind->self.fp.tell()
A:PIL.GifImagePlugin.current->self.tell()
A:PIL.GifImagePlugin.block->self.data()
A:PIL.GifImagePlugin.self.info['loop']->i16(block, 1)
A:PIL.GifImagePlugin.palette->im.remap_palette(used_palette_colors, source_palette).encoderinfo.get('palette', im.info.get('palette'))
A:PIL.GifImagePlugin.self.__offset->self.fp.tell()
A:PIL.GifImagePlugin.self.im->self.im.convert(self.mode, Image.Dither.FLOYDSTEINBERG)
A:PIL.GifImagePlugin.color->im.remap_palette(used_palette_colors, source_palette).encoderinfo.get('transparency', im.info.get('transparency', (0, 0, 0)))
A:PIL.GifImagePlugin.self.dispose->Image.core.fill(dispose_mode, dispose_size, color)
A:PIL.GifImagePlugin.frame_im->self._crop(frame_im, self.dispose_extent)
A:PIL.GifImagePlugin.im->im.remap_palette(used_palette_colors, source_palette).remap_palette(used_palette_colors, source_palette)
A:PIL.GifImagePlugin.source_palette->bytearray((i // 3 for i in range(768)))
A:PIL.GifImagePlugin.im.palette->ImagePalette.ImagePalette('RGB', palette=source_palette)
A:PIL.GifImagePlugin.source_color->tuple(source_palette[i:i + 3])
A:PIL.GifImagePlugin.index->im.remap_palette(used_palette_colors, source_palette).remap_palette(used_palette_colors, source_palette).palette.colors.get(source_color)
A:PIL.GifImagePlugin.used_palette_colors->_get_optimize(im, info)
A:PIL.GifImagePlugin.info['transparency']->_get_optimize(im, info).index(info['transparency'])
A:PIL.GifImagePlugin.im_out->_normalize_palette(im_out, palette, im.encoderinfo)
A:PIL.GifImagePlugin.im_frame->im_frame.crop(frame_data.bbox).crop(frame_data.bbox)
A:PIL.GifImagePlugin.base_im->base_im.convert('RGBA').convert('RGBA')
A:PIL.GifImagePlugin.delta->ImageChops.subtract_modulo(im_frame, base_im)
A:PIL.GifImagePlugin.duration->int(im.encoderinfo['duration'] / 10)
A:PIL.GifImagePlugin.disposal->int(im.encoderinfo.get('disposal', 0))
A:PIL.GifImagePlugin.encoderinfo->im.remap_palette(used_palette_colors, source_palette).remap_palette(used_palette_colors, source_palette).encoderinfo.copy()
A:PIL.GifImagePlugin.(delta, bbox)->_getbbox(previous_im, im_frame)
A:PIL.GifImagePlugin.background->_get_background(im, info.get('background'))
A:PIL.GifImagePlugin.background_im->Image.new('P', im_frame.size, background)
A:PIL.GifImagePlugin.encoderinfo['transparency']->im_frame.crop(frame_data.bbox).crop(frame_data.bbox).palette._new_color_index(im_frame)
A:PIL.GifImagePlugin.diff_frame->im_frame.crop(frame_data.bbox).crop(frame_data.bbox).copy()
A:PIL.GifImagePlugin.fill->Image.new('P', delta.size, encoderinfo['transparency'])
A:PIL.GifImagePlugin.(r, g, b, a)->ImageChops.subtract_modulo(im_frame, base_im).split()
A:PIL.GifImagePlugin.mask->ImageMath.lambda_eval(lambda args: args['convert'](args['im'] * 255, '1'), im=delta)
A:PIL.GifImagePlugin.delta_l->Image.new('L', delta.size)
A:PIL.GifImagePlugin.interlace->im.remap_palette(used_palette_colors, source_palette).remap_palette(used_palette_colors, source_palette).encoderinfo.get('interlace', 1)
A:PIL.GifImagePlugin.include_color_table->im.remap_palette(used_palette_colors, source_palette).remap_palette(used_palette_colors, source_palette).encoderinfo.get('include_color_table')
A:PIL.GifImagePlugin.palette_bytes->_get_palette_bytes(im)
A:PIL.GifImagePlugin.color_table_size->_get_color_table_size(palette_bytes)
A:PIL.GifImagePlugin.tempfile->im.remap_palette(used_palette_colors, source_palette).remap_palette(used_palette_colors, source_palette)._dump()
A:PIL.GifImagePlugin.quant_proc->subprocess.Popen(quant_cmd, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
A:PIL.GifImagePlugin.togif_proc->subprocess.Popen(togif_cmd, stdin=quant_proc.stdout, stdout=f, stderr=subprocess.DEVNULL)
A:PIL.GifImagePlugin.retcode->subprocess.Popen(togif_cmd, stdin=quant_proc.stdout, stdout=f, stderr=subprocess.DEVNULL).wait()
A:PIL.GifImagePlugin.comment->comment.encode().encode()
A:PIL.GifImagePlugin.im_mod->_normalize_palette(im, palette, info)
A:PIL.GifImagePlugin.header->_get_global_header(im, info)
A:PIL.GifImagePlugin.fp->Collector()
PIL.GifImagePlugin.GifImageFile(ImageFile.ImageFile)
PIL.GifImagePlugin.GifImageFile._is_palette_needed(self,p:bytes)->bool
PIL.GifImagePlugin.GifImageFile._open(self)->None
PIL.GifImagePlugin.GifImageFile._seek(self,frame:int,update_image:bool=True)->None
PIL.GifImagePlugin.GifImageFile.data(self)->bytes | None
PIL.GifImagePlugin.GifImageFile.is_animated(self)->bool
PIL.GifImagePlugin.GifImageFile.load_end(self)->None
PIL.GifImagePlugin.GifImageFile.load_prepare(self)->None
PIL.GifImagePlugin.GifImageFile.n_frames(self)->int
PIL.GifImagePlugin.GifImageFile.seek(self,frame:int)->None
PIL.GifImagePlugin.GifImageFile.tell(self)->int
PIL.GifImagePlugin.LoadingStrategy(IntEnum)
PIL.GifImagePlugin._Frame(NamedTuple)
PIL.GifImagePlugin._accept(prefix:bytes)->bool
PIL.GifImagePlugin._get_background(im:Image.Image,info_background:int|tuple[int,int,int]|tuple[int,int,int,int]|None)->int
PIL.GifImagePlugin._get_color_table_size(palette_bytes:bytes)->int
PIL.GifImagePlugin._get_global_header(im:Image.Image,info:dict[str,Any])->list[bytes]
PIL.GifImagePlugin._get_header_palette(palette_bytes:bytes)->bytes
PIL.GifImagePlugin._get_optimize(im:Image.Image,info:dict[str,Any])->list[int] | None
PIL.GifImagePlugin._get_palette_bytes(im:Image.Image)->bytes
PIL.GifImagePlugin._getbbox(base_im:Image.Image,im_frame:Image.Image)->tuple[Image.Image, tuple[int, int, int, int] | None]
PIL.GifImagePlugin._normalize_mode(im:Image.Image)->Image.Image
PIL.GifImagePlugin._normalize_palette(im:Image.Image,palette:_Palette|None,info:dict[str,Any])->Image.Image
PIL.GifImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes,save_all:bool=False)->None
PIL.GifImagePlugin._save_all(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None
PIL.GifImagePlugin._save_netpbm(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None
PIL.GifImagePlugin._write_frame_data(fp:IO[bytes],im_frame:Image.Image,offset:tuple[int,int],params:dict[str,Any])->None
PIL.GifImagePlugin._write_local_header(fp:IO[bytes],im:Image.Image,offset:tuple[int,int],flags:int)->None
PIL.GifImagePlugin._write_multiple_frames(im:Image.Image,fp:IO[bytes],palette:_Palette|None)->bool
PIL.GifImagePlugin._write_single_frame(im:Image.Image,fp:IO[bytes],palette:_Palette|None)->None
PIL.GifImagePlugin.get_interlace(im:Image.Image)->int
PIL.GifImagePlugin.getdata(im:Image.Image,offset:tuple[int,int]=(0,0),**params:Any)->list[bytes]
PIL.GifImagePlugin.getheader(im:Image.Image,palette:_Palette|None=None,info:dict[str,Any]|None=None)->tuple[list[bytes], list[int] | None]


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/_tkinter_finder.py----------------------------------------
A:PIL._tkinter_finder.tk->getattr(tkinter, '_tkinter')
A:PIL._tkinter_finder.tk_version->str(tkinter.TkVersion)


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImageFile.py----------------------------------------
A:PIL.ImageFile.msg->ERRORS.get(error)
A:PIL.ImageFile.self.fp->open(fp, 'rb')
A:PIL.ImageFile.pixel->Image.Image.load(self)
A:PIL.ImageFile.self.map->mmap.mmap(fp.fileno(), 0, access=mmap.ACCESS_READ)
A:PIL.ImageFile.self.im->Image.core.new(self.mode, self.size)
A:PIL.ImageFile.decoder->Image._getdecoder(self.mode, decoder_name, args, self.decoderconfig)
A:PIL.ImageFile.s->Image._getdecoder(self.mode, 'raw', rawmode).decode(data)
A:PIL.ImageFile.(n, err_code)->Image._getdecoder(self.mode, decoder_name, args, self.decoderconfig).decode(b)
A:PIL.ImageFile.loader->self._load()
A:PIL.ImageFile.image->self._load().load(self)
A:PIL.ImageFile.skip->min(len(self.data), self.offset)
A:PIL.ImageFile.(n, e)->self.decoder.decode(self.data)
A:PIL.ImageFile.im->Image.open(fp)
A:PIL.ImageFile.self.decoder->Image._getdecoder(im.mode, d, a, im.decoderconfig)
A:PIL.ImageFile.self.image->Image.open(fp)
A:PIL.ImageFile.bufsize->max(MAXBLOCK, bufsize, im.size[0] * 4)
A:PIL.ImageFile.fh->fp.fileno()
A:PIL.ImageFile.encoder->Image._getencoder(im.mode, encoder_name, args, im.encoderconfig)
A:PIL.ImageFile.errcode->Image._getencoder(im.mode, encoder_name, args, im.encoderconfig).encode_to_file(fh, bufsize)
A:PIL.ImageFile.data->fp.read(size)
A:PIL.ImageFile.block->fp.read(min(remaining_size, SAFEBLOCK))
A:PIL.ImageFile.self.state->PyCodecState()
A:PIL.ImageFile.d->Image._getdecoder(self.mode, 'raw', rawmode)
A:PIL.ImageFile.(bytes_consumed, errcode, data)->self.encode(0)
A:PIL.ImageFile.(status, errcode, buf)->self.encode(bufsize)
PIL.ImageFile.ImageFile(self,fp=None,filename=None)
PIL.ImageFile.ImageFile.__init__(self,fp=None,filename=None)
PIL.ImageFile.ImageFile.__setstate__(self,state)
PIL.ImageFile.ImageFile._seek_check(self,frame)
PIL.ImageFile.ImageFile.get_format_mimetype(self)->str | None
PIL.ImageFile.ImageFile.load(self)
PIL.ImageFile.ImageFile.load_end(self)->None
PIL.ImageFile.ImageFile.load_prepare(self)->None
PIL.ImageFile.ImageFile.verify(self)->None
PIL.ImageFile.Parser
PIL.ImageFile.Parser.__enter__(self)
PIL.ImageFile.Parser.__exit__(self,*args:object)->None
PIL.ImageFile.Parser.close(self)
PIL.ImageFile.Parser.feed(self,data)
PIL.ImageFile.Parser.reset(self)->None
PIL.ImageFile.PyCodec(self,mode,*args)
PIL.ImageFile.PyCodec.__init__(self,mode,*args)
PIL.ImageFile.PyCodec.cleanup(self)->None
PIL.ImageFile.PyCodec.init(self,args)
PIL.ImageFile.PyCodec.setfd(self,fd)
PIL.ImageFile.PyCodec.setimage(self,im,extents:tuple[int,int,int,int]|None=None)->None
PIL.ImageFile.PyCodecState(self)
PIL.ImageFile.PyCodecState.__init__(self)
PIL.ImageFile.PyCodecState.extents(self)->tuple[int, int, int, int]
PIL.ImageFile.PyDecoder(PyCodec)
PIL.ImageFile.PyDecoder.decode(self,buffer:bytes)->tuple[int, int]
PIL.ImageFile.PyDecoder.pulls_fd(self)->bool
PIL.ImageFile.PyDecoder.set_as_raw(self,data:bytes,rawmode=None)->None
PIL.ImageFile.PyEncoder(PyCodec)
PIL.ImageFile.PyEncoder.encode(self,bufsize:int)->tuple[int, int, bytes]
PIL.ImageFile.PyEncoder.encode_to_file(self,fh,bufsize)
PIL.ImageFile.PyEncoder.encode_to_pyfd(self)->tuple[int, int]
PIL.ImageFile.PyEncoder.pushes_fd(self)->bool
PIL.ImageFile.StubHandler
PIL.ImageFile.StubHandler.load(self,im:StubImageFile)->Image.Image
PIL.ImageFile.StubHandler.open(self,im:StubImageFile)->None
PIL.ImageFile.StubImageFile(ImageFile)
PIL.ImageFile.StubImageFile._load(self)->StubHandler | None
PIL.ImageFile.StubImageFile._open(self)->None
PIL.ImageFile.StubImageFile.load(self)
PIL.ImageFile._Tile(NamedTuple)
PIL.ImageFile._encode_tile(im,fp,tile:list[_Tile],bufsize,fh,exc=None)
PIL.ImageFile._get_oserror(error:int,*,encoder:bool)->OSError
PIL.ImageFile._safe_read(fp,size)
PIL.ImageFile._save(im,fp,tile,bufsize=0)->None
PIL.ImageFile._tilesort(t)
PIL.ImageFile.raise_oserror(error:int)->OSError


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImageShow.py----------------------------------------
A:PIL.ImageShow.viewer->viewer()
A:PIL.ImageShow.base->Image.getmodebase(image.mode)
A:PIL.ImageShow.image->image.convert(base).convert(base)
A:PIL.ImageShow.title->options.get('title')
PIL.ImageShow.DisplayViewer(UnixViewer)
PIL.ImageShow.DisplayViewer.get_command_ex(self,file:str,title:str|None=None,**options:Any)->tuple[str, str]
PIL.ImageShow.DisplayViewer.show_file(self,path:str,**options:Any)->int
PIL.ImageShow.EogViewer(UnixViewer)
PIL.ImageShow.EogViewer.get_command_ex(self,file:str,**options:Any)->tuple[str, str]
PIL.ImageShow.EogViewer.show_file(self,path:str,**options:Any)->int
PIL.ImageShow.GmDisplayViewer(UnixViewer)
PIL.ImageShow.GmDisplayViewer.get_command_ex(self,file:str,**options:Any)->tuple[str, str]
PIL.ImageShow.GmDisplayViewer.show_file(self,path:str,**options:Any)->int
PIL.ImageShow.IPythonViewer(Viewer)
PIL.ImageShow.IPythonViewer.show_image(self,image:Image.Image,**options:Any)->int
PIL.ImageShow.MacViewer(Viewer)
PIL.ImageShow.MacViewer.get_command(self,file:str,**options:Any)->str
PIL.ImageShow.MacViewer.show_file(self,path:str,**options:Any)->int
PIL.ImageShow.UnixViewer(Viewer)
PIL.ImageShow.UnixViewer.get_command(self,file:str,**options:Any)->str
PIL.ImageShow.UnixViewer.get_command_ex(self,file:str,**options:Any)->tuple[str, str]
PIL.ImageShow.Viewer
PIL.ImageShow.Viewer.get_command(self,file:str,**options:Any)->str
PIL.ImageShow.Viewer.get_format(self,image:Image.Image)->str | None
PIL.ImageShow.Viewer.save_image(self,image:Image.Image)->str
PIL.ImageShow.Viewer.show(self,image:Image.Image,**options:Any)->int
PIL.ImageShow.Viewer.show_file(self,path:str,**options:Any)->int
PIL.ImageShow.Viewer.show_image(self,image:Image.Image,**options:Any)->int
PIL.ImageShow.WindowsViewer(Viewer)
PIL.ImageShow.WindowsViewer.get_command(self,file:str,**options:Any)->str
PIL.ImageShow.WindowsViewer.show_file(self,path:str,**options:Any)->int
PIL.ImageShow.XDGViewer(UnixViewer)
PIL.ImageShow.XDGViewer.get_command_ex(self,file:str,**options:Any)->tuple[str, str]
PIL.ImageShow.XDGViewer.show_file(self,path:str,**options:Any)->int
PIL.ImageShow.XVViewer(UnixViewer)
PIL.ImageShow.XVViewer.get_command_ex(self,file:str,title:str|None=None,**options:Any)->tuple[str, str]
PIL.ImageShow.XVViewer.show_file(self,path:str,**options:Any)->int
PIL.ImageShow.register(viewer,order:int=1)->None
PIL.ImageShow.show(image:Image.Image,title:str|None=None,**options:Any)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImageTransform.py----------------------------------------
A:PIL.ImageTransform.(method, data)->self.getdata()
PIL.ImageTransform.AffineTransform(Transform)
PIL.ImageTransform.ExtentTransform(Transform)
PIL.ImageTransform.MeshTransform(Transform)
PIL.ImageTransform.PerspectiveTransform(Transform)
PIL.ImageTransform.QuadTransform(Transform)
PIL.ImageTransform.Transform(self,data:Sequence[Any])
PIL.ImageTransform.Transform.__init__(self,data:Sequence[Any])
PIL.ImageTransform.Transform.getdata(self)->tuple[Image.Transform, Sequence[int]]
PIL.ImageTransform.Transform.transform(self,size:tuple[int,int],image:Image.Image,**options:Any)->Image.Image


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/PcdImagePlugin.py----------------------------------------
A:PIL.PcdImagePlugin.s->self.fp.read(2048)
A:PIL.PcdImagePlugin.self.im->self.im.rotate(self.tile_post_rotate)
PIL.PcdImagePlugin.PcdImageFile(ImageFile.ImageFile)
PIL.PcdImagePlugin.PcdImageFile._open(self)->None
PIL.PcdImagePlugin.PcdImageFile.load_end(self)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/IptcImagePlugin.py----------------------------------------
A:PIL.IptcImagePlugin.s->self.fp.read(min(size, 8192))
A:PIL.IptcImagePlugin.size->i16(s, 3)
A:PIL.IptcImagePlugin.offset->self.fp.tell()
A:PIL.IptcImagePlugin.(tag, size)->self.field()
A:PIL.IptcImagePlugin.tagdata->self.fp.read(size)
A:PIL.IptcImagePlugin.o->BytesIO()
A:PIL.IptcImagePlugin.(type, size)->self.field()
A:PIL.IptcImagePlugin.photoshop->FakeImage().info.get('photoshop')
A:PIL.IptcImagePlugin.data->FakeImage().info.get('photoshop').get(1028)
A:PIL.IptcImagePlugin.im->FakeImage()
A:PIL.IptcImagePlugin.im.fp->BytesIO(data)
PIL.IptcImagePlugin.IptcImageFile(ImageFile.ImageFile)
PIL.IptcImagePlugin.IptcImageFile._open(self)->None
PIL.IptcImagePlugin.IptcImageFile.field(self)->tuple[tuple[int, int] | None, int]
PIL.IptcImagePlugin.IptcImageFile.getint(self,key:tuple[int,int])->int
PIL.IptcImagePlugin.IptcImageFile.load(self)
PIL.IptcImagePlugin.__getattr__(name:str)->bytes
PIL.IptcImagePlugin._i(c:bytes)->int
PIL.IptcImagePlugin._i8(c:int|bytes)->int
PIL.IptcImagePlugin.dump(c:Sequence[int|bytes])->None
PIL.IptcImagePlugin.getiptcinfo(im)
PIL.IptcImagePlugin.i(c:bytes)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/WalImageFile.py----------------------------------------
A:PIL.WalImageFile.header->self.fp.read(32 + 24 + 32 + 12)
A:PIL.WalImageFile.offset->i32(header, 40)
A:PIL.WalImageFile.self.im->Image.core.new(self.mode, self.size)
PIL.WalImageFile.WalImageFile(ImageFile.ImageFile)
PIL.WalImageFile.WalImageFile._open(self)->None
PIL.WalImageFile.WalImageFile.load(self)
PIL.WalImageFile.open(filename)


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImageEnhance.py----------------------------------------
A:PIL.ImageEnhance.self.degenerate->image.filter(ImageFilter.SMOOTH)
A:PIL.ImageEnhance.mean->int(ImageStat.Stat(image.convert('L')).mean[0] + 0.5)
PIL.ImageEnhance.Brightness(self,image:Image.Image)
PIL.ImageEnhance.Brightness.__init__(self,image:Image.Image)
PIL.ImageEnhance.Color(self,image:Image.Image)
PIL.ImageEnhance.Color.__init__(self,image:Image.Image)
PIL.ImageEnhance.Contrast(self,image:Image.Image)
PIL.ImageEnhance.Contrast.__init__(self,image:Image.Image)
PIL.ImageEnhance.Sharpness(self,image:Image.Image)
PIL.ImageEnhance.Sharpness.__init__(self,image:Image.Image)
PIL.ImageEnhance._Enhance
PIL.ImageEnhance._Enhance.enhance(self,factor:float)->Image.Image


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/IcnsImagePlugin.py----------------------------------------
A:PIL.IcnsImagePlugin.enable_jpeg2k->features.check_codec('jpg_2000')
A:PIL.IcnsImagePlugin.sig->fobj.read(12)
A:PIL.IcnsImagePlugin.indata->fobj.read(length)
A:PIL.IcnsImagePlugin.im->self.icns.getimage(self.best_size)
A:PIL.IcnsImagePlugin.byte->fobj.read(1)
A:PIL.IcnsImagePlugin.band->Image.frombuffer('L', pixel_size, fobj.read(sizesq), 'raw', 'L', 0, 1)
A:PIL.IcnsImagePlugin.jp2kstream->fobj.read(length)
A:PIL.IcnsImagePlugin.f->io.BytesIO(jp2kstream)
A:PIL.IcnsImagePlugin.(sig, filesize)->nextheader(fobj)
A:PIL.IcnsImagePlugin.(sig, blocksize)->nextheader(fobj)
A:PIL.IcnsImagePlugin.sizes->self.itersizes()
A:PIL.IcnsImagePlugin.desc->self.dct.get(code)
A:PIL.IcnsImagePlugin.size->self.bestsize()
A:PIL.IcnsImagePlugin.channels->self.dataforsize(size)
A:PIL.IcnsImagePlugin.self.icns->IcnsFile(self.fp)
A:PIL.IcnsImagePlugin.self.info['sizes']->self.icns.itersizes()
A:PIL.IcnsImagePlugin.self.best_size->self.icns.bestsize()
A:PIL.IcnsImagePlugin.px->self.icns.getimage(self.best_size).load()
A:PIL.IcnsImagePlugin.temp->io.BytesIO()
A:PIL.IcnsImagePlugin.size_streams[size]->io.BytesIO().getvalue()
A:PIL.IcnsImagePlugin.imf->IcnsImageFile(fp)
PIL.IcnsImagePlugin.IcnsFile(self,fobj)
PIL.IcnsImagePlugin.IcnsFile.__init__(self,fobj)
PIL.IcnsImagePlugin.IcnsFile.bestsize(self)
PIL.IcnsImagePlugin.IcnsFile.dataforsize(self,size)
PIL.IcnsImagePlugin.IcnsFile.getimage(self,size=None)
PIL.IcnsImagePlugin.IcnsFile.itersizes(self)
PIL.IcnsImagePlugin.IcnsImageFile(ImageFile.ImageFile)
PIL.IcnsImagePlugin.IcnsImageFile._open(self)->None
PIL.IcnsImagePlugin.IcnsImageFile.load(self)
PIL.IcnsImagePlugin.IcnsImageFile.size(self)
PIL.IcnsImagePlugin.IcnsImageFile.size(self,value)
PIL.IcnsImagePlugin._accept(prefix:bytes)->bool
PIL.IcnsImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None
PIL.IcnsImagePlugin.nextheader(fobj)
PIL.IcnsImagePlugin.read_32(fobj,start_length,size)
PIL.IcnsImagePlugin.read_32t(fobj,start_length,size)
PIL.IcnsImagePlugin.read_mk(fobj,start_length,size)
PIL.IcnsImagePlugin.read_png_or_jpeg2000(fobj,start_length,size)


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/GdImageFile.py----------------------------------------
A:PIL.GdImageFile.s->self.fp.read(1037)
A:PIL.GdImageFile.tindex->i32(s, 7 + true_color_offset)
A:PIL.GdImageFile.self.palette->ImagePalette.raw('XBGR', s[7 + true_color_offset + 4:7 + true_color_offset + 4 + 256 * 4])
PIL.GdImageFile.GdImageFile(ImageFile.ImageFile)
PIL.GdImageFile.GdImageFile._open(self)->None
PIL.GdImageFile.open(fp:StrOrBytesPath|IO[bytes],mode:str='r')->GdImageFile


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/PdfParser.py----------------------------------------
A:PIL.PdfParser.keys->sorted(set(self.new_entries.keys()) | set(self.deleted_entries.keys()))
A:PIL.PdfParser.deleted_keys->sorted(set(self.deleted_entries.keys()))
A:PIL.PdfParser.startxref->f.tell()
A:PIL.PdfParser.this_deleted_object_id->sorted(set(self.deleted_entries.keys())).pop(0)
A:PIL.PdfParser.self.name->name.encode('us-ascii')
A:PIL.PdfParser.result->bytearray()
A:PIL.PdfParser.value->pdf_repr(value)
A:PIL.PdfParser.out->bytearray(b'<<')
A:PIL.PdfParser.x->x.replace(b')', b'\\)').replace(b')', b'\\)')
A:PIL.PdfParser.self.ff->open(filename, mode)
A:PIL.PdfParser.self.bufbuf->self.get_buf_from_file(f)
A:PIL.PdfParser.self.root->PdfDict(self.read_indirect(self.root_ref))
A:PIL.PdfParser.self.info->PdfDict(self.read_indirect(self.info_ref))
A:PIL.PdfParser.self.xref_table->XrefTable()
A:PIL.PdfParser.self.root_ref->self.next_object_id(self.f.tell())
A:PIL.PdfParser.self.pages_ref->self.next_object_id(0)
A:PIL.PdfParser.new_page_ref->self.write_page(None, **stringified_page_info)
A:PIL.PdfParser.pages_tree_node_ref->pages_tree_node.get(b'Parent', None)
A:PIL.PdfParser.self.info_ref->self.trailer_dict.get(b'Info', None)
A:PIL.PdfParser.start_xref->self.xref_table.write(self.f)
A:PIL.PdfParser.num_entries->len(self.xref_table)
A:PIL.PdfParser.dict_obj['Type']->PdfName(b'Page')
A:PIL.PdfParser.ref->self.next_object_id(f.tell())
A:PIL.PdfParser.stream->dict_obj.pop('stream', None)
A:PIL.PdfParser.dict_obj['Length']->len(stream)
A:PIL.PdfParser.self.file_size_total->len(self.buf)
A:PIL.PdfParser.self.page_tree_root->self.read_indirect(self.pages_ref)
A:PIL.PdfParser.self.pages->self.linearize_page_tree(self.page_tree_root)
A:PIL.PdfParser.reference->IndirectReference(1, 0)
A:PIL.PdfParser.re_trailer_end->re.compile(whitespace_mandatory + b'trailer' + whitespace_optional + b'<<(.*>>)' + newline + b'startxref' + newline + b'([0-9]+)' + newline + b'%%EOF' + whitespace_optional + b'$', re.DOTALL)
A:PIL.PdfParser.re_trailer_prev->re.compile(whitespace_optional + b'trailer' + whitespace_optional + b'<<(.*?>>)' + newline + b'startxref' + newline + b'([0-9]+)' + newline + b'%%EOF' + whitespace_optional, re.DOTALL)
A:PIL.PdfParser.m->self.re_xref_entry.match(self.buf, offset)
A:PIL.PdfParser.trailer_data->self.re_xref_entry.match(self.buf, offset).group(1)
A:PIL.PdfParser.self.last_xref_section_offset->int(m.group(2))
A:PIL.PdfParser.self.trailer_dict->self.interpret_trailer(trailer_data)
A:PIL.PdfParser.trailer_offset->self.read_xref_table(xref_section_offset=xref_section_offset)
A:PIL.PdfParser.trailer_dict->self.interpret_trailer(trailer_data)
A:PIL.PdfParser.re_whitespace_optional->re.compile(whitespace_optional)
A:PIL.PdfParser.re_name->re.compile(whitespace_optional + b"/([!-$&'*-.0-;=?-Z\\\\^-z|~]+)(?=" + delimiter_or_ws + b')')
A:PIL.PdfParser.re_dict_start->re.compile(whitespace_optional + b'<<')
A:PIL.PdfParser.re_dict_end->re.compile(whitespace_optional + b'>>' + whitespace_optional)
A:PIL.PdfParser.key->cls.interpret_name(m.group(1))
A:PIL.PdfParser.(value, offset)->cls.get_value(data, offset, max_nesting=max_nesting - 1)
A:PIL.PdfParser.re_hashes_in_name->re.compile(b'([^#]*)(#([0-9a-fA-F]{2}))?')
A:PIL.PdfParser.re_null->re.compile(whitespace_optional + b'null(?=' + delimiter_or_ws + b')')
A:PIL.PdfParser.re_true->re.compile(whitespace_optional + b'true(?=' + delimiter_or_ws + b')')
A:PIL.PdfParser.re_false->re.compile(whitespace_optional + b'false(?=' + delimiter_or_ws + b')')
A:PIL.PdfParser.re_int->re.compile(whitespace_optional + b'([-+]?[0-9]+)(?=' + delimiter_or_ws + b')')
A:PIL.PdfParser.re_real->re.compile(whitespace_optional + b'([-+]?([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+))(?=' + delimiter_or_ws + b')')
A:PIL.PdfParser.re_array_start->re.compile(whitespace_optional + b'\\[')
A:PIL.PdfParser.re_array_end->re.compile(whitespace_optional + b']')
A:PIL.PdfParser.re_string_hex->re.compile(whitespace_optional + b'<(' + whitespace_or_hex + b'*)>')
A:PIL.PdfParser.re_string_lit->re.compile(whitespace_optional + b'\\(')
A:PIL.PdfParser.re_indirect_reference->re.compile(whitespace_optional + b'([-+]?[0-9]+)' + whitespace_mandatory + b'([-+]?[0-9]+)' + whitespace_mandatory + b'R(?=' + delimiter_or_ws + b')')
A:PIL.PdfParser.re_indirect_def_start->re.compile(whitespace_optional + b'([-+]?[0-9]+)' + whitespace_mandatory + b'([-+]?[0-9]+)' + whitespace_mandatory + b'obj(?=' + delimiter_or_ws + b')')
A:PIL.PdfParser.re_indirect_def_end->re.compile(whitespace_optional + b'endobj(?=' + delimiter_or_ws + b')')
A:PIL.PdfParser.re_comment->re.compile(b'(' + whitespace_optional + b'%[^\\r\\n]*' + newline + b')*')
A:PIL.PdfParser.re_stream_start->re.compile(whitespace_optional + b'stream\\r?\\n')
A:PIL.PdfParser.re_stream_end->re.compile(whitespace_optional + b'endstream(?=' + delimiter_or_ws + b')')
A:PIL.PdfParser.offset->self.re_xref_entry.match(self.buf, offset).end()
A:PIL.PdfParser.(object, offset)->cls.get_value(data, m.end(), max_nesting=max_nesting - 1)
A:PIL.PdfParser.(key, offset)->cls.get_value(data, offset, max_nesting=max_nesting - 1)
A:PIL.PdfParser.stream_len_str->bytearray().get(b'Length')
A:PIL.PdfParser.stream_len->int(stream_len_str)
A:PIL.PdfParser.hex_string->bytearray((b for b in m.group(1) if b in b'0123456789abcdefABCDEF'))
A:PIL.PdfParser.re_lit_str_token->re.compile(b'(\\\\[nrtbf()\\\\])|(\\\\[0-9]{1,3})|(\\\\(\\r\\n|\\r|\\n))|(\\r\\n|\\r|\\n)|(\\()|(\\))')
A:PIL.PdfParser.re_xref_section_start->re.compile(whitespace_optional + b'xref' + newline)
A:PIL.PdfParser.re_xref_subsection_start->re.compile(whitespace_optional + b'([0-9]+)' + whitespace_mandatory + b'([0-9]+)' + whitespace_optional + newline_only)
A:PIL.PdfParser.re_xref_entry->re.compile(b'([0-9]{10}) ([0-9]{5}) ([fn])( \\r| \\n|\\r\\n)')
A:PIL.PdfParser.first_object->int(m.group(1))
A:PIL.PdfParser.num_objects->int(m.group(2))
A:PIL.PdfParser.generation->int(m.group(2))
A:PIL.PdfParser.kid_object->self.read_indirect(kid)
PIL.PdfParser.IndirectObjectDef(IndirectReference)
PIL.PdfParser.IndirectObjectDef.__str__(self)->str
PIL.PdfParser.IndirectReference(IndirectReferenceTuple)
PIL.PdfParser.IndirectReference.__bytes__(self)->bytes
PIL.PdfParser.IndirectReference.__eq__(self,other:object)->bool
PIL.PdfParser.IndirectReference.__hash__(self)->int
PIL.PdfParser.IndirectReference.__ne__(self,other)
PIL.PdfParser.IndirectReference.__str__(self)->str
PIL.PdfParser.IndirectReferenceTuple(NamedTuple)
PIL.PdfParser.PdfArray(List[Any])
PIL.PdfParser.PdfArray.__bytes__(self)->bytes
PIL.PdfParser.PdfBinary(self,data)
PIL.PdfParser.PdfBinary.__bytes__(self)->bytes
PIL.PdfParser.PdfBinary.__init__(self,data)
PIL.PdfParser.PdfDict(_DictBase)
PIL.PdfParser.PdfDict.__bytes__(self)->bytes
PIL.PdfParser.PdfDict.__getattr__(self,key)
PIL.PdfParser.PdfDict.__setattr__(self,key,value)
PIL.PdfParser.PdfFormatError(RuntimeError)
PIL.PdfParser.PdfName(self,name)
PIL.PdfParser.PdfName.__bytes__(self)->bytes
PIL.PdfParser.PdfName.__eq__(self,other)
PIL.PdfParser.PdfName.__hash__(self)->int
PIL.PdfParser.PdfName.__init__(self,name)
PIL.PdfParser.PdfName.__repr__(self)->str
PIL.PdfParser.PdfName.from_pdf_stream(cls,data)
PIL.PdfParser.PdfName.name_as_str(self)->str
PIL.PdfParser.PdfParser(self,filename=None,f=None,buf=None,start_offset=0,mode='rb')
PIL.PdfParser.PdfParser.__enter__(self)->PdfParser
PIL.PdfParser.PdfParser.__exit__(self,*args:object)->None
PIL.PdfParser.PdfParser.__init__(self,filename=None,f=None,buf=None,start_offset=0,mode='rb')
PIL.PdfParser.PdfParser.close(self)->None
PIL.PdfParser.PdfParser.close_buf(self)->None
PIL.PdfParser.PdfParser.del_root(self)->None
PIL.PdfParser.PdfParser.get_buf_from_file(f)
PIL.PdfParser.PdfParser.get_literal_string(cls,data,offset)
PIL.PdfParser.PdfParser.get_value(cls,data,offset,expect_indirect=None,max_nesting=-1)
PIL.PdfParser.PdfParser.interpret_name(cls,raw,as_text=False)
PIL.PdfParser.PdfParser.interpret_trailer(cls,trailer_data)
PIL.PdfParser.PdfParser.linearize_page_tree(self,node=None)
PIL.PdfParser.PdfParser.next_object_id(self,offset=None)
PIL.PdfParser.PdfParser.read_indirect(self,ref,max_nesting=-1)
PIL.PdfParser.PdfParser.read_pdf_info(self)->None
PIL.PdfParser.PdfParser.read_prev_trailer(self,xref_section_offset)
PIL.PdfParser.PdfParser.read_trailer(self)
PIL.PdfParser.PdfParser.read_xref_table(self,xref_section_offset)
PIL.PdfParser.PdfParser.rewrite_pages(self)->None
PIL.PdfParser.PdfParser.seek_end(self)->None
PIL.PdfParser.PdfParser.start_writing(self)->None
PIL.PdfParser.PdfParser.write_catalog(self)->IndirectReference
PIL.PdfParser.PdfParser.write_comment(self,s)
PIL.PdfParser.PdfParser.write_header(self)->None
PIL.PdfParser.PdfParser.write_obj(self,ref,*objs,**dict_obj)
PIL.PdfParser.PdfParser.write_page(self,ref,*objs,**dict_obj)
PIL.PdfParser.PdfParser.write_xref_and_trailer(self,new_root_ref=None)
PIL.PdfParser.PdfStream(self,dictionary,buf)
PIL.PdfParser.PdfStream.__init__(self,dictionary,buf)
PIL.PdfParser.PdfStream.decode(self)
PIL.PdfParser.XrefTable(self)
PIL.PdfParser.XrefTable.__contains__(self,key)
PIL.PdfParser.XrefTable.__delitem__(self,key)
PIL.PdfParser.XrefTable.__getitem__(self,key)
PIL.PdfParser.XrefTable.__init__(self)
PIL.PdfParser.XrefTable.__len__(self)->int
PIL.PdfParser.XrefTable.__setitem__(self,key,value)
PIL.PdfParser.XrefTable.keys(self)
PIL.PdfParser.XrefTable.write(self,f)
PIL.PdfParser.check_format_condition(condition:bool,error_message:str)->None
PIL.PdfParser.decode_text(b)
PIL.PdfParser.encode_text(s:str)->bytes
PIL.PdfParser.pdf_repr(x)


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/PaletteFile.py----------------------------------------
A:PIL.PaletteFile.s->fp.readline()
A:PIL.PaletteFile.self.palette->b''.join(palette)
PIL.PaletteFile.PaletteFile(self,fp:IO[bytes])
PIL.PaletteFile.PaletteFile.__init__(self,fp:IO[bytes])
PIL.PaletteFile.PaletteFile.getpalette(self)->tuple[bytes, str]


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/_deprecate.py----------------------------------------
PIL._deprecate.deprecate(deprecated:str,when:int|None,replacement:str|None=None,*,action:str|None=None,plural:bool=False)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/_imagingft.pyi----------------------------------------
PIL._imagingft.Font
PIL._imagingft.Font.ascent(self)->int
PIL._imagingft.Font.descent(self)->int
PIL._imagingft.Font.family(self)->str | None
PIL._imagingft.Font.getlength(self,string:str|bytes,mode=...,dir=...,features=...,lang=...,/)->float
PIL._imagingft.Font.getsize(self,string:str|bytes|bytearray,mode=...,dir=...,features=...,lang=...,anchor=...,/)->tuple[tuple[int, int], tuple[int, int]]
PIL._imagingft.Font.getvaraxes(self)->list[_Axis] | None
PIL._imagingft.Font.getvarnames(self)->list[bytes]
PIL._imagingft.Font.glyphs(self)->int
PIL._imagingft.Font.height(self)->int
PIL._imagingft.Font.render(self,string:str|bytes,fill,mode=...,dir=...,features=...,lang=...,stroke_width=...,anchor=...,foreground_ink_long=...,x_start=...,y_start=...,/)->tuple[_imaging.ImagingCore, tuple[int, int]]
PIL._imagingft.Font.setvaraxes(self,axes:list[float],/)->None
PIL._imagingft.Font.setvarname(self,instance_index:int,/)->None
PIL._imagingft.Font.style(self)->str | None
PIL._imagingft.Font.x_ppem(self)->int
PIL._imagingft.Font.y_ppem(self)->int
PIL._imagingft._Axis(TypedDict)
PIL._imagingft.__getattr__(name:str)->Any
PIL._imagingft.getfont(filename:str|bytes,size:float,index=...,encoding=...,font_bytes=...,layout_engine=...)->Font


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/FliImagePlugin.py----------------------------------------
A:PIL.FliImagePlugin.s->self.fp.read(4)
A:PIL.FliImagePlugin.self.n_frames->i16(s, 6)
A:PIL.FliImagePlugin.duration->i32(s, 16)
A:PIL.FliImagePlugin.magic->i16(s, 4)
A:PIL.FliImagePlugin.number_of_subchunks->i16(s, 6)
A:PIL.FliImagePlugin.chunk_type->i16(s, 4)
A:PIL.FliImagePlugin.chunk_size->i32(s)
A:PIL.FliImagePlugin.self.palette->ImagePalette.raw('RGB', b''.join(palette))
A:PIL.FliImagePlugin.self.__rewind->self.fp.tell()
A:PIL.FliImagePlugin.framesize->i32(s)
PIL.FliImagePlugin.FliImageFile(ImageFile.ImageFile)
PIL.FliImagePlugin.FliImageFile._open(self)
PIL.FliImagePlugin.FliImageFile._palette(self,palette,shift)
PIL.FliImagePlugin.FliImageFile._seek(self,frame:int)->None
PIL.FliImagePlugin.FliImageFile.seek(self,frame:int)->None
PIL.FliImagePlugin.FliImageFile.tell(self)->int
PIL.FliImagePlugin._accept(prefix:bytes)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImageDraw.py----------------------------------------
A:PIL.ImageDraw.self.draw->Image.core.draw(self.im, blend)
A:PIL.ImageDraw.self.ink->self.draw.draw_ink(-1)
A:PIL.ImageDraw.self.font->ImageFont.load_default()
A:PIL.ImageDraw.ink->getink(fill)
A:PIL.ImageDraw.result_ink->self.draw.draw_ink(ink)
A:PIL.ImageDraw.fill->self.palette.getcolor(fill, self._image)
A:PIL.ImageDraw.result_fill->self.draw.draw_ink(fill)
A:PIL.ImageDraw.(ink, fill)->self._getink(fill)
A:PIL.ImageDraw.(ink, fill_ink)->self._getink(fill)
A:PIL.ImageDraw.points->cast(Sequence[Sequence[float]], xy)
A:PIL.ImageDraw.mask->self._getfont(font_size).getmask(text)
A:PIL.ImageDraw.fill_im->self._getfont(font_size).getmask(text).copy()
A:PIL.ImageDraw.draw->Draw(im)
A:PIL.ImageDraw.ink_im->self._getfont(font_size).getmask(text).copy()
A:PIL.ImageDraw.im->Image.new(self.mode, self.im.size)
A:PIL.ImageDraw.xy->_compute_regular_polygon_vertices(bounding_circle, n_sides, rotation)
A:PIL.ImageDraw.((x0, y0), (x1, y1))->cast(Sequence[Sequence[float]], xy)
A:PIL.ImageDraw.(x0, y0, x1, y1)->cast(Sequence[float], xy)
A:PIL.ImageDraw.x0->round(x0)
A:PIL.ImageDraw.y0->round(y0)
A:PIL.ImageDraw.x1->round(x1)
A:PIL.ImageDraw.y1->round(y1)
A:PIL.ImageDraw.r->int(d // 2)
A:PIL.ImageDraw.parts->tuple((part for (i, part) in enumerate((((x0, y0, x0 + d, y0 + d), 180, 270), ((x1 - d, y0, x1, y0 + d), 270, 360), ((x1 - d, y1 - d, x1, y1), 0, 90), ((x0, y1 - d, x0 + d, y1), 90, 180))) if corners[i]))
A:PIL.ImageDraw.font->self._getfont(font_size)
A:PIL.ImageDraw.(mask, offset)->self._getfont(font_size).getmask2(text, mode, *args, direction=direction, features=features, language=language, stroke_width=stroke_width, anchor=anchor, ink=ink, start=start, **kwargs)
A:PIL.ImageDraw.lines->self._multiline_split(text)
A:PIL.ImageDraw.line_spacing->self._multiline_spacing(font, spacing, stroke_width)
A:PIL.ImageDraw.line_width->self.textlength(line, font, direction=direction, features=features, language=language, embedded_color=embedded_color)
A:PIL.ImageDraw.max_width->max(max_width, line_width)
A:PIL.ImageDraw.bbox->self._getfont(font_size).getbbox(text, mode, direction, features, language, stroke_width, anchor)
A:PIL.ImageDraw.bbox_line->self.textbbox((left, top), line, font, anchor, direction=direction, features=features, language=language, stroke_width=stroke_width, embedded_color=embedded_color)
A:PIL.ImageDraw.pixel->image.load()
A:PIL.ImageDraw.full_edge->set()
A:PIL.ImageDraw.new_edge->set()
A:PIL.ImageDraw.(*centroid, polygon_radius)->cast(List[float], list(bounding_circle))
A:PIL.ImageDraw.centroid->cast(List[float], list(bounding_circle[0]))
A:PIL.ImageDraw.polygon_radius->cast(float, bounding_circle[1])
A:PIL.ImageDraw.angles->_get_angles(n_sides, rotation)
PIL.ImageDraw.Draw(im:Image.Image,mode:str|None=None)->ImageDraw
PIL.ImageDraw.ImageDraw(self,im:Image.Image,mode:str|None=None)
PIL.ImageDraw.ImageDraw.__init__(self,im:Image.Image,mode:str|None=None)
PIL.ImageDraw.ImageDraw._getfont(self,font_size:float|None)->ImageFont.ImageFont | ImageFont.FreeTypeFont | ImageFont.TransposedFont
PIL.ImageDraw.ImageDraw._getink(self,ink:_Ink|None,fill:_Ink|None=None)->tuple[int | None, int | None]
PIL.ImageDraw.ImageDraw._multiline_check(self,text:AnyStr)->bool
PIL.ImageDraw.ImageDraw._multiline_spacing(self,font,spacing,stroke_width)
PIL.ImageDraw.ImageDraw._multiline_split(self,text:AnyStr)->list[AnyStr]
PIL.ImageDraw.ImageDraw.arc(self,xy:Coords,start:float,end:float,fill:_Ink|None=None,width:int=1)->None
PIL.ImageDraw.ImageDraw.bitmap(self,xy:Sequence[int],bitmap:Image.Image,fill:_Ink|None=None)->None
PIL.ImageDraw.ImageDraw.chord(self,xy:Coords,start:float,end:float,fill:_Ink|None=None,outline:_Ink|None=None,width:int=1)->None
PIL.ImageDraw.ImageDraw.circle(self,xy:Sequence[float],radius:float,fill:_Ink|None=None,outline:_Ink|None=None,width:int=1)->None
PIL.ImageDraw.ImageDraw.ellipse(self,xy:Coords,fill:_Ink|None=None,outline:_Ink|None=None,width:int=1)->None
PIL.ImageDraw.ImageDraw.getfont(self)->ImageFont.ImageFont | ImageFont.FreeTypeFont | ImageFont.TransposedFont
PIL.ImageDraw.ImageDraw.line(self,xy:Coords,fill:_Ink|None=None,width:int=0,joint:str|None=None)->None
PIL.ImageDraw.ImageDraw.multiline_text(self,xy:tuple[float,float],text:str,fill=None,font:ImageFont.ImageFont|ImageFont.FreeTypeFont|ImageFont.TransposedFont|None=None,anchor=None,spacing=4,align='left',direction=None,features=None,language=None,stroke_width=0,stroke_fill=None,embedded_color=False,*,font_size=None)->None
PIL.ImageDraw.ImageDraw.multiline_textbbox(self,xy,text,font=None,anchor=None,spacing=4,align='left',direction=None,features=None,language=None,stroke_width=0,embedded_color=False,*,font_size=None)->tuple[int, int, int, int]
PIL.ImageDraw.ImageDraw.pieslice(self,xy:Coords,start:float,end:float,fill:_Ink|None=None,outline:_Ink|None=None,width:int=1)->None
PIL.ImageDraw.ImageDraw.point(self,xy:Coords,fill:_Ink|None=None)->None
PIL.ImageDraw.ImageDraw.polygon(self,xy:Coords,fill:_Ink|None=None,outline:_Ink|None=None,width:int=1)->None
PIL.ImageDraw.ImageDraw.rectangle(self,xy:Coords,fill:_Ink|None=None,outline:_Ink|None=None,width:int=1)->None
PIL.ImageDraw.ImageDraw.regular_polygon(self,bounding_circle:Sequence[Sequence[float]|float],n_sides:int,rotation:float=0,fill:_Ink|None=None,outline:_Ink|None=None,width:int=1)->None
PIL.ImageDraw.ImageDraw.rounded_rectangle(self,xy:Coords,radius:float=0,fill:_Ink|None=None,outline:_Ink|None=None,width:int=1,*,corners:tuple[bool,bool,bool,bool]|None=None)->None
PIL.ImageDraw.ImageDraw.shape(self,shape:Image.core._Outline,fill:_Ink|None=None,outline:_Ink|None=None)->None
PIL.ImageDraw.ImageDraw.text(self,xy:tuple[float,float],text:str,fill=None,font:ImageFont.ImageFont|ImageFont.FreeTypeFont|ImageFont.TransposedFont|None=None,anchor=None,spacing=4,align='left',direction=None,features=None,language=None,stroke_width=0,stroke_fill=None,embedded_color=False,*args,**kwargs)->None
PIL.ImageDraw.ImageDraw.textbbox(self,xy,text,font=None,anchor=None,spacing=4,align='left',direction=None,features=None,language=None,stroke_width=0,embedded_color=False,*,font_size=None)->tuple[int, int, int, int]
PIL.ImageDraw.ImageDraw.textlength(self,text:str,font:ImageFont.ImageFont|ImageFont.FreeTypeFont|ImageFont.TransposedFont|None=None,direction=None,features=None,language=None,embedded_color=False,*,font_size=None)->float
PIL.ImageDraw._color_diff(color1:float|tuple[int,...],color2:float|tuple[int,...])->float
PIL.ImageDraw._compute_regular_polygon_vertices(bounding_circle:Sequence[Sequence[float]|float],n_sides:int,rotation:float)->list[tuple[float, float]]
PIL.ImageDraw.floodfill(image:Image.Image,xy:tuple[int,int],value:float|tuple[int,...],border:float|tuple[int,...]|None=None,thresh:float=0)->None
PIL.ImageDraw.getdraw(im:Image.Image|None=None,hints:list[str]|None=None)->tuple[ImageDraw2.Draw | None, ModuleType]


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImageOps.py----------------------------------------
A:PIL.ImageOps.color->ImagePalette.ImagePalette(palette=image.getpalette()).getcolor(color)
A:PIL.ImageOps.histogram->image.convert('RGB').histogram(mask)
A:PIL.ImageOps.cut->int(n * cutoff[1] // 100)
A:PIL.ImageOps.ix->int(ix * scale + offset)
A:PIL.ImageOps.rgb_black->cast(Sequence[int], _color(black, 'RGB'))
A:PIL.ImageOps.rgb_white->cast(Sequence[int], _color(white, 'RGB'))
A:PIL.ImageOps.range_map->range(0, whitepoint - blackpoint)
A:PIL.ImageOps.range_map1->range(0, midpoint - blackpoint)
A:PIL.ImageOps.range_map2->range(0, whitepoint - midpoint)
A:PIL.ImageOps.image->image.convert('RGB').convert('RGB')
A:PIL.ImageOps.new_height->round(image.height / image.width * size[0])
A:PIL.ImageOps.new_width->round(image.width / image.height * size[1])
A:PIL.ImageOps.resized->contain(image, size, method)
A:PIL.ImageOps.out->Image.new(image.mode, (width, height), color)
A:PIL.ImageOps.x->round((size[0] - resized.width) * max(0, min(centering[0], 1)))
A:PIL.ImageOps.y->round((size[1] - resized.height) * max(0, min(centering[1], 1)))
A:PIL.ImageOps.(left, top, right, bottom)->_border(border)
A:PIL.ImageOps.h->image.convert('RGB').convert('RGB').histogram(mask)
A:PIL.ImageOps.palette->ImagePalette.ImagePalette(palette=image.getpalette())
A:PIL.ImageOps.lut->list(range(255, -1, -1))
A:PIL.ImageOps.image_exif->image.convert('RGB').convert('RGB').getexif()
A:PIL.ImageOps.orientation->image.convert('RGB').convert('RGB').getexif().get(ExifTags.Base.Orientation, 1)
A:PIL.ImageOps.method->{2: Image.Transpose.FLIP_LEFT_RIGHT, 3: Image.Transpose.ROTATE_180, 4: Image.Transpose.FLIP_TOP_BOTTOM, 5: Image.Transpose.TRANSPOSE, 6: Image.Transpose.ROTATE_270, 7: Image.Transpose.TRANSVERSE, 8: Image.Transpose.ROTATE_90}.get(orientation)
A:PIL.ImageOps.transposed_image->image.convert('RGB').convert('RGB').transpose(method)
A:PIL.ImageOps.exif->exif_image.getexif()
A:PIL.ImageOps.exif_image.info['exif']->exif_image.getexif().tobytes()
A:PIL.ImageOps.exif_image.info['Raw profile type exif']->exif_image.getexif().tobytes().hex()
PIL.ImageOps.SupportsGetMesh(Protocol)
PIL.ImageOps.SupportsGetMesh.getmesh(self,image:Image.Image)->list[tuple[tuple[int, int, int, int], tuple[int, int, int, int, int, int, int, int]]]
PIL.ImageOps._border(border:int|tuple[int,...])->tuple[int, int, int, int]
PIL.ImageOps._color(color:str|int|tuple[int,...],mode:str)->int | tuple[int, ...]
PIL.ImageOps._lut(image:Image.Image,lut:list[int])->Image.Image
PIL.ImageOps.autocontrast(image:Image.Image,cutoff:float|tuple[float,float]=0,ignore:int|Sequence[int]|None=None,mask:Image.Image|None=None,preserve_tone:bool=False)->Image.Image
PIL.ImageOps.colorize(image:Image.Image,black:str|tuple[int,...],white:str|tuple[int,...],mid:str|int|tuple[int,...]|None=None,blackpoint:int=0,whitepoint:int=255,midpoint:int=127)->Image.Image
PIL.ImageOps.contain(image:Image.Image,size:tuple[int,int],method:int=Image.Resampling.BICUBIC)->Image.Image
PIL.ImageOps.cover(image:Image.Image,size:tuple[int,int],method:int=Image.Resampling.BICUBIC)->Image.Image
PIL.ImageOps.crop(image:Image.Image,border:int=0)->Image.Image
PIL.ImageOps.deform(image:Image.Image,deformer:SupportsGetMesh,resample:int=Image.Resampling.BILINEAR)->Image.Image
PIL.ImageOps.equalize(image:Image.Image,mask:Image.Image|None=None)->Image.Image
PIL.ImageOps.exif_transpose(image:Image.Image,*,in_place:bool=False)->Image.Image | None
PIL.ImageOps.expand(image:Image.Image,border:int|tuple[int,...]=0,fill:str|int|tuple[int,...]=0)->Image.Image
PIL.ImageOps.fit(image:Image.Image,size:tuple[int,int],method:int=Image.Resampling.BICUBIC,bleed:float=0.0,centering:tuple[float,float]=(0.5,0.5))->Image.Image
PIL.ImageOps.flip(image:Image.Image)->Image.Image
PIL.ImageOps.grayscale(image:Image.Image)->Image.Image
PIL.ImageOps.invert(image:Image.Image)->Image.Image
PIL.ImageOps.mirror(image:Image.Image)->Image.Image
PIL.ImageOps.pad(image:Image.Image,size:tuple[int,int],method:int=Image.Resampling.BICUBIC,color:str|int|tuple[int,...]|None=None,centering:tuple[float,float]=(0.5,0.5))->Image.Image
PIL.ImageOps.posterize(image:Image.Image,bits:int)->Image.Image
PIL.ImageOps.scale(image:Image.Image,factor:float,resample:int=Image.Resampling.BICUBIC)->Image.Image
PIL.ImageOps.solarize(image:Image.Image,threshold:int=128)->Image.Image


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/_webp.pyi----------------------------------------
PIL._webp.__getattr__(name:str)->Any


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/Jpeg2KImagePlugin.py----------------------------------------
A:PIL.Jpeg2KImagePlugin.data->self._read_bytes(size)
A:PIL.Jpeg2KImagePlugin.size->struct.calcsize(field_format)
A:PIL.Jpeg2KImagePlugin.(lbox, tbox)->cast(Tuple[int, bytes], self.read_fields('>I4s'))
A:PIL.Jpeg2KImagePlugin.lbox->cast(int, self.read_fields('>Q')[0])
A:PIL.Jpeg2KImagePlugin.hdr->self.fp.read(2)
A:PIL.Jpeg2KImagePlugin.lsiz->_binary.i16be(hdr)
A:PIL.Jpeg2KImagePlugin.(lsiz, rsiz, xsiz, ysiz, xosiz, yosiz, _, _, _, _, csiz)->struct.unpack_from('>HHIIIIIIIIH', siz)
A:PIL.Jpeg2KImagePlugin.ssiz->struct.unpack_from('>B', siz, 38)
A:PIL.Jpeg2KImagePlugin.reader->BoxReader(fp)
A:PIL.Jpeg2KImagePlugin.tbox->_parse_jp2_header(self.fp).next_box_type()
A:PIL.Jpeg2KImagePlugin.header->_parse_jp2_header(self.fp)
A:PIL.Jpeg2KImagePlugin.(height, width, nc, bpc)->_parse_jp2_header(self.fp).read_fields('>IIHB')
A:PIL.Jpeg2KImagePlugin.(meth, _, _, enumcs)->_parse_jp2_header(self.fp).read_fields('>BBBI')
A:PIL.Jpeg2KImagePlugin.(ne, npc)->_parse_jp2_header(self.fp).read_fields('>HB')
A:PIL.Jpeg2KImagePlugin.bitdepths->_parse_jp2_header(self.fp).read_fields('>' + 'B' * npc)
A:PIL.Jpeg2KImagePlugin.palette->ImagePalette.ImagePalette()
A:PIL.Jpeg2KImagePlugin.res->_parse_jp2_header(self.fp).read_boxes()
A:PIL.Jpeg2KImagePlugin.tres->_parse_jp2_header(self.fp).read_boxes().next_box_type()
A:PIL.Jpeg2KImagePlugin.(vrcn, vrcd, hrcn, hrcd, vrce, hrce)->_parse_jp2_header(self.fp).read_boxes().read_fields('>HHHHBB')
A:PIL.Jpeg2KImagePlugin.hres->_res_to_dpi(hrcn, hrcd, hrce)
A:PIL.Jpeg2KImagePlugin.vres->_res_to_dpi(vrcn, vrcd, vrce)
A:PIL.Jpeg2KImagePlugin.sig->self.fp.read(4)
A:PIL.Jpeg2KImagePlugin.(self._size, self._mode)->_parse_codestream(self.fp)
A:PIL.Jpeg2KImagePlugin.fd->fp.fileno()
A:PIL.Jpeg2KImagePlugin.pos->self.fp.tell()
A:PIL.Jpeg2KImagePlugin.length->_binary.i16be(hdr)
A:PIL.Jpeg2KImagePlugin.marker->self.fp.read(2)
A:PIL.Jpeg2KImagePlugin.filename->filename.encode().encode()
A:PIL.Jpeg2KImagePlugin.offset->info.get('offset', None)
A:PIL.Jpeg2KImagePlugin.tile_offset->info.get('tile_offset', None)
A:PIL.Jpeg2KImagePlugin.tile_size->info.get('tile_size', None)
A:PIL.Jpeg2KImagePlugin.quality_mode->info.get('quality_mode', 'rates')
A:PIL.Jpeg2KImagePlugin.quality_layers->info.get('quality_layers', None)
A:PIL.Jpeg2KImagePlugin.num_resolutions->info.get('num_resolutions', 0)
A:PIL.Jpeg2KImagePlugin.cblk_size->info.get('codeblock_size', None)
A:PIL.Jpeg2KImagePlugin.precinct_size->info.get('precinct_size', None)
A:PIL.Jpeg2KImagePlugin.irreversible->info.get('irreversible', False)
A:PIL.Jpeg2KImagePlugin.progression->info.get('progression', 'LRCP')
A:PIL.Jpeg2KImagePlugin.cinema_mode->info.get('cinema_mode', 'no')
A:PIL.Jpeg2KImagePlugin.mct->info.get('mct', 0)
A:PIL.Jpeg2KImagePlugin.signed->info.get('signed', False)
A:PIL.Jpeg2KImagePlugin.comment->comment.encode().encode()
A:PIL.Jpeg2KImagePlugin.plt->info.get('plt', False)
PIL.Jpeg2KImagePlugin.BoxReader(self,fp,length=-1)
PIL.Jpeg2KImagePlugin.BoxReader.__init__(self,fp,length=-1)
PIL.Jpeg2KImagePlugin.BoxReader._can_read(self,num_bytes:int)->bool
PIL.Jpeg2KImagePlugin.BoxReader._read_bytes(self,num_bytes:int)->bytes
PIL.Jpeg2KImagePlugin.BoxReader.has_next_box(self)->bool
PIL.Jpeg2KImagePlugin.BoxReader.next_box_type(self)->bytes
PIL.Jpeg2KImagePlugin.BoxReader.read_boxes(self)->BoxReader
PIL.Jpeg2KImagePlugin.BoxReader.read_fields(self,field_format:str)->tuple[int | bytes, ...]
PIL.Jpeg2KImagePlugin.Jpeg2KImageFile(ImageFile.ImageFile)
PIL.Jpeg2KImagePlugin.Jpeg2KImageFile._open(self)->None
PIL.Jpeg2KImagePlugin.Jpeg2KImageFile._parse_comment(self)->None
PIL.Jpeg2KImagePlugin.Jpeg2KImageFile.load(self)
PIL.Jpeg2KImagePlugin.Jpeg2KImageFile.reduce(self)
PIL.Jpeg2KImagePlugin.Jpeg2KImageFile.reduce(self,value)
PIL.Jpeg2KImagePlugin._accept(prefix:bytes)->bool
PIL.Jpeg2KImagePlugin._parse_codestream(fp)->tuple[tuple[int, int], str]
PIL.Jpeg2KImagePlugin._parse_jp2_header(fp)
PIL.Jpeg2KImagePlugin._res_to_dpi(num:int,denom:int,exp:int)->float | None
PIL.Jpeg2KImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/PpmImagePlugin.py----------------------------------------
A:PIL.PpmImagePlugin.c->self.fp.read(1)
A:PIL.PpmImagePlugin.magic_number->self._read_magic()
A:PIL.PpmImagePlugin.scale->float(self._read_token())
A:PIL.PpmImagePlugin.self.info['scale']->abs(scale)
A:PIL.PpmImagePlugin.maxval->int(self._read_token())
A:PIL.PpmImagePlugin.a->self._ignore_comments(block).find(b'\n', start)
A:PIL.PpmImagePlugin.b->self._ignore_comments(block).find(b'\r', start)
A:PIL.PpmImagePlugin.comment_end->self._find_comment_end(block, comment_start)
A:PIL.PpmImagePlugin.block->self._ignore_comments(block)
A:PIL.PpmImagePlugin.comment_start->self._ignore_comments(block).find(b'#')
A:PIL.PpmImagePlugin.data->bytearray()
A:PIL.PpmImagePlugin.tokens->self._ignore_comments(block).split()
A:PIL.PpmImagePlugin.invert->bytes.maketrans(b'01', b'\xff\x00')
A:PIL.PpmImagePlugin.bands->Image.getmodebands(self.mode)
A:PIL.PpmImagePlugin.half_token->self._ignore_comments(block).split().pop()
A:PIL.PpmImagePlugin.value->min(out_max, round(value / maxval * out_max))
A:PIL.PpmImagePlugin.pixels->self.fd.read(in_byte_count * bands)
PIL.PpmImagePlugin.PpmDecoder(ImageFile.PyDecoder)
PIL.PpmImagePlugin.PpmDecoder.decode(self,buffer:bytes)->tuple[int, int]
PIL.PpmImagePlugin.PpmImageFile(ImageFile.ImageFile)
PIL.PpmImagePlugin.PpmImageFile._open(self)->None
PIL.PpmImagePlugin.PpmImageFile._read_magic(self)->bytes
PIL.PpmImagePlugin.PpmImageFile._read_token(self)->bytes
PIL.PpmImagePlugin.PpmPlainDecoder(ImageFile.PyDecoder)
PIL.PpmImagePlugin.PpmPlainDecoder._decode_bitonal(self)->bytearray
PIL.PpmImagePlugin.PpmPlainDecoder._decode_blocks(self,maxval:int)->bytearray
PIL.PpmImagePlugin.PpmPlainDecoder._find_comment_end(self,block:bytes,start:int=0)->int
PIL.PpmImagePlugin.PpmPlainDecoder._ignore_comments(self,block:bytes)->bytes
PIL.PpmImagePlugin.PpmPlainDecoder._read_block(self)->bytes
PIL.PpmImagePlugin.PpmPlainDecoder.decode(self,buffer:bytes)->tuple[int, int]
PIL.PpmImagePlugin._accept(prefix:bytes)->bool
PIL.PpmImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/MspImagePlugin.py----------------------------------------
A:PIL.MspImagePlugin.s->self.fp.read(32)
A:PIL.MspImagePlugin.img->io.BytesIO()
A:PIL.MspImagePlugin.blank_line->bytearray((255,) * ((self.state.xsize + 7) // 8))
A:PIL.MspImagePlugin.rowmap->struct.unpack_from(f'<{self.state.ysize}H', self.fd.read(self.state.ysize * 2))
A:PIL.MspImagePlugin.row->self.fd.read(rowlen)
A:PIL.MspImagePlugin.(runcount, runval)->struct.unpack_from('Bc', row, idx)
PIL.MspImagePlugin.MspDecoder(ImageFile.PyDecoder)
PIL.MspImagePlugin.MspDecoder.decode(self,buffer:bytes)->tuple[int, int]
PIL.MspImagePlugin.MspImageFile(ImageFile.ImageFile)
PIL.MspImagePlugin.MspImageFile._open(self)->None
PIL.MspImagePlugin._accept(prefix:bytes)->bool
PIL.MspImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImageSequence.py----------------------------------------
A:PIL.ImageSequence.self.position->getattr(self.im, '_min_frame', 0)
A:PIL.ImageSequence.current->imSequence.tell()
PIL.ImageSequence.Iterator(self,im:Image.Image)
PIL.ImageSequence.Iterator.__getitem__(self,ix:int)->Image.Image
PIL.ImageSequence.Iterator.__init__(self,im:Image.Image)
PIL.ImageSequence.Iterator.__iter__(self)->Iterator
PIL.ImageSequence.Iterator.__next__(self)->Image.Image
PIL.ImageSequence.all_frames(im:Image.Image|list[Image.Image],func:Callable[[Image.Image],Image.Image]|None=None)->list[Image.Image]


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/_imagingcms.pyi----------------------------------------
PIL._imagingcms.CmsProfile
PIL._imagingcms.CmsProfile.attributes(self)->int
PIL._imagingcms.CmsProfile.blue_colorant(self)->_Tuple2x3f | None
PIL._imagingcms.CmsProfile.blue_primary(self)->_Tuple2x3f | None
PIL._imagingcms.CmsProfile.chromatic_adaptation(self)->tuple[_Tuple3x3f, _Tuple3x3f] | None
PIL._imagingcms.CmsProfile.chromaticity(self)->_Tuple3x3f | None
PIL._imagingcms.CmsProfile.clut(self)->dict[int, tuple[bool, bool, bool]] | None
PIL._imagingcms.CmsProfile.colorant_table(self)->list[str] | None
PIL._imagingcms.CmsProfile.colorant_table_out(self)->list[str] | None
PIL._imagingcms.CmsProfile.colorimetric_intent(self)->str | None
PIL._imagingcms.CmsProfile.connection_space(self)->str
PIL._imagingcms.CmsProfile.copyright(self)->str | None
PIL._imagingcms.CmsProfile.creation_date(self)->datetime.datetime | None
PIL._imagingcms.CmsProfile.device_class(self)->str
PIL._imagingcms.CmsProfile.green_colorant(self)->_Tuple2x3f | None
PIL._imagingcms.CmsProfile.green_primary(self)->_Tuple2x3f | None
PIL._imagingcms.CmsProfile.header_flags(self)->int
PIL._imagingcms.CmsProfile.header_manufacturer(self)->str
PIL._imagingcms.CmsProfile.header_model(self)->str
PIL._imagingcms.CmsProfile.icc_measurement_condition(self)->_IccMeasurementCondition | None
PIL._imagingcms.CmsProfile.icc_version(self)->int
PIL._imagingcms.CmsProfile.icc_viewing_condition(self)->_IccViewingCondition | None
PIL._imagingcms.CmsProfile.intent_supported(self)->dict[int, tuple[bool, bool, bool]] | None
PIL._imagingcms.CmsProfile.is_intent_supported(self,intent:int,direction:int,/)->int
PIL._imagingcms.CmsProfile.is_matrix_shaper(self)->bool
PIL._imagingcms.CmsProfile.luminance(self)->_Tuple2x3f | None
PIL._imagingcms.CmsProfile.manufacturer(self)->str | None
PIL._imagingcms.CmsProfile.media_black_point(self)->_Tuple2x3f | None
PIL._imagingcms.CmsProfile.media_white_point(self)->_Tuple2x3f | None
PIL._imagingcms.CmsProfile.media_white_point_temperature(self)->float | None
PIL._imagingcms.CmsProfile.model(self)->str | None
PIL._imagingcms.CmsProfile.perceptual_rendering_intent_gamut(self)->str | None
PIL._imagingcms.CmsProfile.profile_description(self)->str | None
PIL._imagingcms.CmsProfile.profile_id(self)->bytes
PIL._imagingcms.CmsProfile.red_colorant(self)->_Tuple2x3f | None
PIL._imagingcms.CmsProfile.red_primary(self)->_Tuple2x3f | None
PIL._imagingcms.CmsProfile.rendering_intent(self)->int
PIL._imagingcms.CmsProfile.saturation_rendering_intent_gamut(self)->str | None
PIL._imagingcms.CmsProfile.screening_description(self)->str | None
PIL._imagingcms.CmsProfile.target(self)->str | None
PIL._imagingcms.CmsProfile.technology(self)->str | None
PIL._imagingcms.CmsProfile.version(self)->float
PIL._imagingcms.CmsProfile.viewing_condition(self)->str | None
PIL._imagingcms.CmsProfile.xcolor_space(self)->str
PIL._imagingcms.CmsTransform
PIL._imagingcms.CmsTransform.apply(self,id_in:int,id_out:int)->int
PIL._imagingcms._IccMeasurementCondition(TypedDict)
PIL._imagingcms._IccViewingCondition(TypedDict)
PIL._imagingcms.buildProofTransform(input_profile:CmsProfile,output_profile:CmsProfile,proof_profile:CmsProfile,in_mode:str,out_mode:str,rendering_intent:int=0,proof_intent:int=0,cms_flags:int=0,/)->CmsTransform
PIL._imagingcms.buildTransform(input_profile:CmsProfile,output_profile:CmsProfile,in_mode:str,out_mode:str,rendering_intent:int=0,cms_flags:int=0,/)->CmsTransform
PIL._imagingcms.createProfile(color_space:Literal['LAB','XYZ','sRGB'],color_temp:SupportsFloat=0.0,/)->CmsProfile
PIL._imagingcms.profile_frombytes(profile:bytes,/)->CmsProfile
PIL._imagingcms.profile_open(profile:str,/)->CmsProfile
PIL._imagingcms.profile_tobytes(profile:CmsProfile,/)->bytes


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/ImageTk.py----------------------------------------
A:PIL.ImageTk.im->Image.new('RGBA', (photo.width(), photo.height()))
A:PIL.ImageTk.source->BytesIO(kw.pop('data'))
A:PIL.ImageTk.image->_get_image_from_kw(kw)
A:PIL.ImageTk.mode->Image.getmodebase(mode)
A:PIL.ImageTk.self.__photo->tkinter.BitmapImage(**kw)
A:PIL.ImageTk.block->_get_image_from_kw(kw).new_block(self.__mode, im.size)
A:PIL.ImageTk.kw['data']->_get_image_from_kw(kw).tobitmap()
A:PIL.ImageTk.self.image->PhotoImage(im, master=master)
A:PIL.ImageTk.top->tkinter.Toplevel()
PIL.ImageTk.BitmapImage(self,image=None,**kw)
PIL.ImageTk.BitmapImage.__del__(self)->None
PIL.ImageTk.BitmapImage.__init__(self,image=None,**kw)
PIL.ImageTk.BitmapImage.__str__(self)->str
PIL.ImageTk.BitmapImage.height(self)->int
PIL.ImageTk.BitmapImage.width(self)->int
PIL.ImageTk.PhotoImage(self,image=None,size=None,**kw)
PIL.ImageTk.PhotoImage.__del__(self)->None
PIL.ImageTk.PhotoImage.__init__(self,image=None,size=None,**kw)
PIL.ImageTk.PhotoImage.__str__(self)->str
PIL.ImageTk.PhotoImage.height(self)->int
PIL.ImageTk.PhotoImage.paste(self,im:Image.Image)->None
PIL.ImageTk.PhotoImage.width(self)->int
PIL.ImageTk._get_image_from_kw(kw)
PIL.ImageTk._pilbitmap_check()->int
PIL.ImageTk._pyimagingtkcall(command,photo,id)
PIL.ImageTk._show(image,title)
PIL.ImageTk.getimage(photo:PhotoImage)->Image.Image


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/_typing.py----------------------------------------
A:PIL._typing._T_co->TypeVar('_T_co', covariant=True)
PIL._typing.SupportsRead(Protocol[_T_co])
PIL._typing.SupportsRead.read(self,__length:int=...)->_T_co


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/SgiImagePlugin.py----------------------------------------
A:PIL.SgiImagePlugin.s->self.fp.read(headlen)
A:PIL.SgiImagePlugin.dimension->i16(s, 4)
A:PIL.SgiImagePlugin.xsize->i16(s, 6)
A:PIL.SgiImagePlugin.ysize->i16(s, 8)
A:PIL.SgiImagePlugin.zsize->len(self.mode)
A:PIL.SgiImagePlugin.bpc->info.get('bpc', 1)
A:PIL.SgiImagePlugin.z->len(im.mode)
A:PIL.SgiImagePlugin.img_name->img_name.encode('ascii', 'ignore').encode('ascii', 'ignore')
A:PIL.SgiImagePlugin.channel->Image.new('L', (self.state.xsize, self.state.ysize))
PIL.SgiImagePlugin.SGI16Decoder(ImageFile.PyDecoder)
PIL.SgiImagePlugin.SGI16Decoder.decode(self,buffer:bytes)->tuple[int, int]
PIL.SgiImagePlugin.SgiImageFile(ImageFile.ImageFile)
PIL.SgiImagePlugin.SgiImageFile._open(self)->None
PIL.SgiImagePlugin._accept(prefix:bytes)->bool
PIL.SgiImagePlugin._save(im:Image.Image,fp:IO[bytes],filename:str|bytes)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/PIL10.4.0/lib/python3.9/site-packages/PIL/TarIO.py----------------------------------------
A:PIL.TarIO.self.fh->open(tarfile, 'rb')
A:PIL.TarIO.s->self.fh.read(512)
A:PIL.TarIO.name->s[:100].decode('utf-8')
A:PIL.TarIO.i->s[:100].decode('utf-8').find('\x00')
A:PIL.TarIO.size->int(s[124:135], 8)
PIL.TarIO.TarIO(self,tarfile:str,file:str)
PIL.TarIO.TarIO.__enter__(self)->TarIO
PIL.TarIO.TarIO.__exit__(self,*args:object)->None
PIL.TarIO.TarIO.__init__(self,tarfile:str,file:str)
PIL.TarIO.TarIO.close(self)->None

