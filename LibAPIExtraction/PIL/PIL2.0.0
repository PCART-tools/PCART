
----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/PcxImagePlugin.py----------------------------------------
A:PIL.PcxImagePlugin.s->self.fp.read(769)
A:PIL.PcxImagePlugin.version->i8(s[1])
A:PIL.PcxImagePlugin.bits->i8(s[3])
A:PIL.PcxImagePlugin.planes->i8(s[65])
A:PIL.PcxImagePlugin.stride->i16(s, 66)
A:PIL.PcxImagePlugin.self.palette->PIL.ImagePalette.raw('RGB', s[1:])
PIL.PcxImagePlugin.PcxImageFile(ImageFile.ImageFile)
PIL.PcxImagePlugin.PcxImageFile._open(self)
PIL.PcxImagePlugin._accept(prefix)
PIL.PcxImagePlugin._save(im,fp,filename,check=0)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/FpxImagePlugin.py----------------------------------------
A:PIL.FpxImagePlugin.self.ole->OleFileIO(self.fp)
A:PIL.FpxImagePlugin.prop->self.ole.getproperties(['Data Object Store %06d' % index, '\x05Image Contents'])
A:PIL.FpxImagePlugin.size->max(self.size)
A:PIL.FpxImagePlugin.fp->self.ole.openstream(stream)
A:PIL.FpxImagePlugin.p->self.ole.openstream(stream).read(28)
A:PIL.FpxImagePlugin.s->self.ole.openstream(stream).read(i32(s, 12) * length)
A:PIL.FpxImagePlugin.tilecount->i32(s, 12)
A:PIL.FpxImagePlugin.channels->i32(s, 24)
A:PIL.FpxImagePlugin.offset->i32(s, 28)
A:PIL.FpxImagePlugin.length->i32(s, 32)
A:PIL.FpxImagePlugin.compression->i32(s, i + 8)
A:PIL.FpxImagePlugin.internal_color_conversion->i8(s[14])
A:PIL.FpxImagePlugin.jpeg_tables->i8(s[15])
A:PIL.FpxImagePlugin.self.fp->self.ole.openstream(self.stream[:2] + ['Subimage 0000 Data'])
PIL.FpxImagePlugin.FpxImageFile(ImageFile.ImageFile)
PIL.FpxImagePlugin.FpxImageFile._open(self)
PIL.FpxImagePlugin.FpxImageFile._open_index(self,index=1)
PIL.FpxImagePlugin.FpxImageFile._open_subimage(self,index=1,subimage=0)
PIL.FpxImagePlugin.FpxImageFile.load(self)
PIL.FpxImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/SunImagePlugin.py----------------------------------------
A:PIL.SunImagePlugin.s->self.fp.read(32)
A:PIL.SunImagePlugin.depth->i32(s[12:16])
A:PIL.SunImagePlugin.compression->i32(s[20:24])
A:PIL.SunImagePlugin.length->i32(s[28:32])
A:PIL.SunImagePlugin.self.palette->PIL.ImagePalette.raw('RGB;L', self.fp.read(length))
PIL.SunImagePlugin.SunImageFile(ImageFile.ImageFile)
PIL.SunImagePlugin.SunImageFile._open(self)
PIL.SunImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/CurImagePlugin.py----------------------------------------
A:PIL.CurImagePlugin.offset->self.fp.tell()
A:PIL.CurImagePlugin.s->self.fp.read(16)
PIL.CurImagePlugin.CurImageFile(BmpImagePlugin.BmpImageFile)
PIL.CurImagePlugin.CurImageFile._open(self)
PIL.CurImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageColor.py----------------------------------------
A:PIL.ImageColor.colormap[color]rgb->getrgb(rgb)
A:PIL.ImageColor.m->re.match('hsl\\(\\s*(\\d+)\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*\\)$', color)
A:PIL.ImageColor.rgb->hls_to_rgb(float(m.group(1)) / 360.0, float(m.group(3)) / 100.0, float(m.group(2)) / 100.0)
A:PIL.ImageColor.color->getrgb(color)
PIL.ImageColor.getcolor(color,mode)
PIL.ImageColor.getrgb(color)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageTk.py----------------------------------------
A:PIL.ImageTk.im->PIL.Image.new('1', (1, 1))
A:PIL.ImageTk.image->PIL.Image.open(BytesIO(kw['data']))
A:PIL.ImageTk.mode->PIL.Image.getmodebase(mode)
A:PIL.ImageTk.self.__photo->Tkinter.BitmapImage(**kw)
A:PIL.ImageTk.block->PIL.Image.open(BytesIO(kw['data'])).new_block(self.__mode, im.size)
A:PIL.ImageTk.kw['data']->PIL.Image.open(BytesIO(kw['data'])).tobitmap()
A:PIL.ImageTk.self.image->PhotoImage(im, master=master)
A:PIL.ImageTk.top->Tkinter.Toplevel()
PIL.ImageTk.BitmapImage(self,image=None,**kw)
PIL.ImageTk.BitmapImage.__del__(self)
PIL.ImageTk.BitmapImage.__init__(self,image=None,**kw)
PIL.ImageTk.BitmapImage.__str__(self)
PIL.ImageTk.BitmapImage.height(self)
PIL.ImageTk.BitmapImage.width(self)
PIL.ImageTk.PhotoImage(self,image=None,size=None,**kw)
PIL.ImageTk.PhotoImage.__del__(self)
PIL.ImageTk.PhotoImage.__init__(self,image=None,size=None,**kw)
PIL.ImageTk.PhotoImage.__str__(self)
PIL.ImageTk.PhotoImage.height(self)
PIL.ImageTk.PhotoImage.paste(self,im,box=None)
PIL.ImageTk.PhotoImage.width(self)
PIL.ImageTk._pilbitmap_check()
PIL.ImageTk._show(image,title)
PIL.ImageTk.getimage(photo)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageDraw.py----------------------------------------
A:PIL.ImageDraw.self.draw->PIL.Image.core.draw(self.im, blend)
A:PIL.ImageDraw.self.ink->self.draw.draw_ink(ink, self.mode)
A:PIL.ImageDraw.ink->self.draw.draw_ink(ink, self.mode)
A:PIL.ImageDraw.self.font->PIL.ImageFont.load_default()
A:PIL.ImageDraw.fill->self.draw.draw_ink(fill, self.mode)
A:PIL.ImageDraw.(ink, fill)->self._getink(fill)
A:PIL.ImageDraw.font->self.getfont()
A:PIL.ImageDraw.(mask, offset)->self.getfont().getmask2(text, self.fontmode)
A:PIL.ImageDraw.mask->self.getfont().getmask(text)
A:PIL.ImageDraw.im->PIL.ImageDraw2.Draw(im)
A:PIL.ImageDraw.pixel->image.load()
PIL.ImageDraw.Draw(im,mode=None)
PIL.ImageDraw.ImageDraw(self,im,mode=None)
PIL.ImageDraw.ImageDraw.__init__(self,im,mode=None)
PIL.ImageDraw.ImageDraw._getink(self,ink,fill=None)
PIL.ImageDraw.ImageDraw.arc(self,xy,start,end,fill=None)
PIL.ImageDraw.ImageDraw.bitmap(self,xy,bitmap,fill=None)
PIL.ImageDraw.ImageDraw.chord(self,xy,start,end,fill=None,outline=None)
PIL.ImageDraw.ImageDraw.ellipse(self,xy,fill=None,outline=None)
PIL.ImageDraw.ImageDraw.getfont(self)
PIL.ImageDraw.ImageDraw.line(self,xy,fill=None,width=0)
PIL.ImageDraw.ImageDraw.pieslice(self,xy,start,end,fill=None,outline=None)
PIL.ImageDraw.ImageDraw.point(self,xy,fill=None)
PIL.ImageDraw.ImageDraw.polygon(self,xy,fill=None,outline=None)
PIL.ImageDraw.ImageDraw.rectangle(self,xy,fill=None,outline=None)
PIL.ImageDraw.ImageDraw.setfill(self,onoff)
PIL.ImageDraw.ImageDraw.setfont(self,font)
PIL.ImageDraw.ImageDraw.setink(self,ink)
PIL.ImageDraw.ImageDraw.shape(self,shape,fill=None,outline=None)
PIL.ImageDraw.ImageDraw.text(self,xy,text,fill=None,font=None,anchor=None)
PIL.ImageDraw.ImageDraw.textsize(self,text,font=None)
PIL.ImageDraw.floodfill(image,xy,value,border=None)
PIL.ImageDraw.getdraw(im=None,hints=None)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/TarIO.py----------------------------------------
A:PIL.TarIO.fh->open(tarfile, 'rb')
A:PIL.TarIO.s->open(tarfile, 'rb').read(512)
A:PIL.TarIO.name->s[:100].decode('utf-8')
A:PIL.TarIO.i->s[:100].decode('utf-8').find('\x00')
A:PIL.TarIO.size->int(s[124:135], 8)
PIL.TarIO.TarIO(self,tarfile,file)
PIL.TarIO.TarIO.__init__(self,tarfile,file)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ArgImagePlugin.py----------------------------------------
A:PIL.ArgImagePlugin.s->self.fp.read(bytes)
A:PIL.ArgImagePlugin.self.id->i16(s)
A:PIL.ArgImagePlugin.self.count->i16(s[2:4])
A:PIL.ArgImagePlugin.self.repair->i16(s[4:6])
A:PIL.ArgImagePlugin.name->self.fp.read(bytes)
A:PIL.ArgImagePlugin.self.images[self.id]->self.images[self.repair].copy()
A:PIL.ArgImagePlugin.(size, mode, rawmode)->self.__getmodesize(s, 0)
A:PIL.ArgImagePlugin.self.im->PIL.Image.core.new(mode, size)
A:PIL.ArgImagePlugin.self.decoder->PIL.Image.core.raw_decoder(rawmode)
A:PIL.ArgImagePlugin.diff->i8(s[13])
A:PIL.ArgImagePlugin.(n, e)->self.decoder.decode(self.data)
A:PIL.ArgImagePlugin.im1->im1.chop_add_modulo(im0.crop(bbox)).chop_add_modulo(im0.crop(bbox))
A:PIL.ArgImagePlugin.self.palette->PIL.ImagePalette.raw('RGB', s)
A:PIL.ArgImagePlugin.self.arg->ArgStream(self.fp)
A:PIL.ArgImagePlugin.(cid, offset, bytes)->self.arg.read()
PIL.ArgImagePlugin.ArgImageFile(ImageFile.ImageFile)
PIL.ArgImagePlugin.ArgImageFile._open(self)
PIL.ArgImagePlugin.ArgImageFile.load(self)
PIL.ArgImagePlugin.ArgImageFile.seek(self,frame)
PIL.ArgImagePlugin.ArgImageFile.tell(self)
PIL.ArgImagePlugin.ArgImageFile.verify(self)
PIL.ArgImagePlugin.ArgStream(self,fp)
PIL.ArgImagePlugin.ArgStream.__getmodesize(self,s,full=1)
PIL.ArgImagePlugin.ArgStream.__init__(self,fp)
PIL.ArgImagePlugin.ArgStream.__reset(self)
PIL.ArgImagePlugin.ArgStream.__store(self)
PIL.ArgImagePlugin.ArgStream.chunk_ADEF(self,offset,bytes)
PIL.ArgImagePlugin.ArgStream.chunk_AEND(self,offset,bytes)
PIL.ArgImagePlugin.ArgStream.chunk_AFRM(self,offset,bytes)
PIL.ArgImagePlugin.ArgStream.chunk_AHDR(self,offset,bytes)
PIL.ArgImagePlugin.ArgStream.chunk_BLNK(self,offset,bytes)
PIL.ArgImagePlugin.ArgStream.chunk_DEND(self,offset,bytes)
PIL.ArgImagePlugin.ArgStream.chunk_DHDR(self,offset,bytes)
PIL.ArgImagePlugin.ArgStream.chunk_IDAT(self,offset,bytes)
PIL.ArgImagePlugin.ArgStream.chunk_IEND(self,offset,bytes)
PIL.ArgImagePlugin.ArgStream.chunk_IHDR(self,offset,bytes)
PIL.ArgImagePlugin.ArgStream.chunk_JEND(self,offset,bytes)
PIL.ArgImagePlugin.ArgStream.chunk_JHDR(self,offset,bytes)
PIL.ArgImagePlugin.ArgStream.chunk_NAME(self,offset,bytes)
PIL.ArgImagePlugin.ArgStream.chunk_PAST(self,offset,bytes)
PIL.ArgImagePlugin.ArgStream.chunk_PLTE(self,offset,bytes)
PIL.ArgImagePlugin.ArgStream.chunk_UEND(self,offset,bytes)
PIL.ArgImagePlugin.ArgStream.chunk_UHDR(self,offset,bytes)
PIL.ArgImagePlugin.ArgStream.chunk_sYNC(self,offset,bytes)
PIL.ArgImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/IptcImagePlugin.py----------------------------------------
A:PIL.IptcImagePlugin.s->self.fp.read(min(size, 8192))
A:PIL.IptcImagePlugin.size->PIL.JpegImagePlugin.i32(app, offset)
A:PIL.IptcImagePlugin.(t, sz)->self.field()
A:PIL.IptcImagePlugin.(t, s)->self.field()
A:PIL.IptcImagePlugin.offset->self.fp.tell()
A:PIL.IptcImagePlugin.(tag, size)->self.field()
A:PIL.IptcImagePlugin.tagdata->self.fp.read(size)
A:PIL.IptcImagePlugin.layers->i8(self.info[3, 60][0])
A:PIL.IptcImagePlugin.component->i8(self.info[3, 60][1])
A:PIL.IptcImagePlugin.outfile->tempfile.mktemp()
A:PIL.IptcImagePlugin.o->open(outfile, 'wb')
A:PIL.IptcImagePlugin.(type, size)->self.field()
A:PIL.IptcImagePlugin.self.im->PIL.Image.core.open_ppm(outfile)
A:PIL.IptcImagePlugin.im->FakeImage()
A:PIL.IptcImagePlugin.code->PIL.JpegImagePlugin.i16(app, offset)
A:PIL.IptcImagePlugin.name_len->i8(app[offset])
A:PIL.IptcImagePlugin.im.fp->io.BytesIO(data)
PIL.IptcImagePlugin.IptcImageFile(ImageFile.ImageFile)
PIL.IptcImagePlugin.IptcImageFile._is_raw(self,offset,size)
PIL.IptcImagePlugin.IptcImageFile._open(self)
PIL.IptcImagePlugin.IptcImageFile.field(self)
PIL.IptcImagePlugin.IptcImageFile.getint(self,key)
PIL.IptcImagePlugin.IptcImageFile.load(self)
PIL.IptcImagePlugin.dump(c)
PIL.IptcImagePlugin.getiptcinfo(im)
PIL.IptcImagePlugin.i(c)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImImagePlugin.py----------------------------------------
A:PIL.ImImagePlugin.split->re.compile(b'^([A-Za-z][^:]*):[ \\t]*(.*)[ \\t]*$')
A:PIL.ImImagePlugin.s->self.fp.read(1)
A:PIL.ImImagePlugin.m->re.compile(b'^([A-Za-z][^:]*):[ \\t]*(.*)[ \\t]*$').match(s)
A:PIL.ImImagePlugin.(k, v)->re.compile(b'^([A-Za-z][^:]*):[ \\t]*(.*)[ \\t]*$').match(s).group(1, 2)
A:PIL.ImImagePlugin.k->k.decode('latin-1', 'replace').decode('latin-1', 'replace')
A:PIL.ImImagePlugin.v->tuple(map(number, v.split(',')))
A:PIL.ImImagePlugin.palette->self.fp.read(768)
A:PIL.ImImagePlugin.self.palette->PIL.ImagePalette.raw('RGB;L', palette)
A:PIL.ImImagePlugin.self.__offsetoffs->self.fp.tell()
A:PIL.ImImagePlugin.bits->int(self.rawmode[2:])
PIL.ImImagePlugin.ImImageFile(ImageFile.ImageFile)
PIL.ImImagePlugin.ImImageFile._open(self)
PIL.ImImagePlugin.ImImageFile.seek(self,frame)
PIL.ImImagePlugin.ImImageFile.tell(self)
PIL.ImImagePlugin._save(im,fp,filename,check=0)
PIL.ImImagePlugin.number(s)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/WmfImagePlugin.py----------------------------------------
A:PIL.WmfImagePlugin.v->word(c, o)
A:PIL.WmfImagePlugin.s->self.fp.read(80)
A:PIL.WmfImagePlugin.inch->word(s, 14)
A:PIL.WmfImagePlugin.x0->dword(s, 8)
A:PIL.WmfImagePlugin.y0->dword(s, 12)
A:PIL.WmfImagePlugin.x1->dword(s, 16)
A:PIL.WmfImagePlugin.y1->dword(s, 20)
A:PIL.WmfImagePlugin.loader->self._load()
PIL.WmfImagePlugin.WmfStubImageFile(ImageFile.StubImageFile)
PIL.WmfImagePlugin.WmfStubImageFile._load(self)
PIL.WmfImagePlugin.WmfStubImageFile._open(self)
PIL.WmfImagePlugin._accept(prefix)
PIL.WmfImagePlugin._save(im,fp,filename)
PIL.WmfImagePlugin.register_handler(handler)
PIL.WmfImagePlugin.short(c,o=0)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageFileIO.py----------------------------------------
A:PIL.ImageFileIO.data->fp.read()
PIL.ImageFileIO.ImageFileIO(self,fp)
PIL.ImageFileIO.ImageFileIO.__init__(self,fp)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageDraw2.py----------------------------------------
A:PIL.ImageDraw2.self.color->PIL.ImageColor.getrgb(color)
A:PIL.ImageDraw2.self.font->PIL.ImageFont.truetype(file, size)
A:PIL.ImageDraw2.image->PIL.Image.new(image, size, color)
A:PIL.ImageDraw2.self.draw->PIL.ImageDraw.Draw(image)
A:PIL.ImageDraw2.xy->PIL.ImagePath.Path(xy)
PIL.ImageDraw2.Brush(self,color,opacity=255)
PIL.ImageDraw2.Brush.__init__(self,color,opacity=255)
PIL.ImageDraw2.Draw(self,image,size=None,color=None)
PIL.ImageDraw2.Draw.__init__(self,image,size=None,color=None)
PIL.ImageDraw2.Draw.arc(self,xy,start,end,*options)
PIL.ImageDraw2.Draw.chord(self,xy,start,end,*options)
PIL.ImageDraw2.Draw.ellipse(self,xy,*options)
PIL.ImageDraw2.Draw.flush(self)
PIL.ImageDraw2.Draw.line(self,xy,*options)
PIL.ImageDraw2.Draw.pieslice(self,xy,start,end,*options)
PIL.ImageDraw2.Draw.polygon(self,xy,*options)
PIL.ImageDraw2.Draw.rectangle(self,xy,*options)
PIL.ImageDraw2.Draw.render(self,op,xy,pen,brush=None)
PIL.ImageDraw2.Draw.settransform(self,offset)
PIL.ImageDraw2.Draw.symbol(self,xy,symbol,*options)
PIL.ImageDraw2.Draw.text(self,xy,text,font)
PIL.ImageDraw2.Draw.textsize(self,text,font)
PIL.ImageDraw2.Font(self,color,file,size=12)
PIL.ImageDraw2.Font.__init__(self,color,file,size=12)
PIL.ImageDraw2.Pen(self,color,width=1,opacity=255)
PIL.ImageDraw2.Pen.__init__(self,color,width=1,opacity=255)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/FitsStubImagePlugin.py----------------------------------------
A:PIL.FitsStubImagePlugin.offset->self.fp.tell()
A:PIL.FitsStubImagePlugin.loader->self._load()
PIL.FitsStubImagePlugin.FITSStubImageFile(ImageFile.StubImageFile)
PIL.FitsStubImagePlugin.FITSStubImageFile._load(self)
PIL.FitsStubImagePlugin.FITSStubImageFile._open(self)
PIL.FitsStubImagePlugin._accept(prefix)
PIL.FitsStubImagePlugin._save(im,fp,filename)
PIL.FitsStubImagePlugin.register_handler(handler)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/TgaImagePlugin.py----------------------------------------
A:PIL.TgaImagePlugin.s->self.fp.read(18)
A:PIL.TgaImagePlugin.id->i8(s[0])
A:PIL.TgaImagePlugin.colormaptype->i8(s[1])
A:PIL.TgaImagePlugin.imagetype->i8(s[2])
A:PIL.TgaImagePlugin.depth->i8(s[16])
A:PIL.TgaImagePlugin.flags->i8(s[17])
A:PIL.TgaImagePlugin.self.palette->PIL.ImagePalette.raw('BGRA', b'\x00' * 4 * start + self.fp.read(4 * size))
A:PIL.TgaImagePlugin.orientation->im.info.get('orientation', -1)
PIL.TgaImagePlugin.TgaImageFile(ImageFile.ImageFile)
PIL.TgaImagePlugin.TgaImageFile._open(self)
PIL.TgaImagePlugin._accept(prefix)
PIL.TgaImagePlugin._save(im,fp,filename,check=0)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ExifTags.py----------------------------------------


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/PixarImagePlugin.py----------------------------------------
A:PIL.PixarImagePlugin.s->self.fp.read(4)
PIL.PixarImagePlugin.PixarImageFile(ImageFile.ImageFile)
PIL.PixarImagePlugin.PixarImageFile._open(self)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/PaletteFile.py----------------------------------------
A:PIL.PaletteFile.s->fp.readline()
A:PIL.PaletteFile.self.palette->b''.join(self.palette)
PIL.PaletteFile.PaletteFile(self,fp)
PIL.PaletteFile.PaletteFile.__init__(self,fp)
PIL.PaletteFile.PaletteFile.getpalette(self)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/SpiderImagePlugin.py----------------------------------------
A:PIL.SpiderImagePlugin.i->int(f)
A:PIL.SpiderImagePlugin.iform->int(h[5])
A:PIL.SpiderImagePlugin.labrec->int(h[13])
A:PIL.SpiderImagePlugin.labbyt->int(h[22])
A:PIL.SpiderImagePlugin.lenbyt->int(h[23])
A:PIL.SpiderImagePlugin.fp->open(filename, 'wb')
A:PIL.SpiderImagePlugin.f->self.fp.read(n)
A:PIL.SpiderImagePlugin.t->struct.unpack('<27f', f)
A:PIL.SpiderImagePlugin.hdrlen->isSpiderHeader(t)
A:PIL.SpiderImagePlugin.self.istack->int(h[24])
A:PIL.SpiderImagePlugin.self.imgnumber->int(h[27])
A:PIL.SpiderImagePlugin.self.nimages->int(h[26])
A:PIL.SpiderImagePlugin.(min, max)->self.getextrema()
A:PIL.SpiderImagePlugin.im->im.transpose(Image.FLIP_LEFT_RIGHT).transpose(Image.FLIP_LEFT_RIGHT)
A:PIL.SpiderImagePlugin.hdr[2]->float(nrow)
A:PIL.SpiderImagePlugin.hdr[12]->float(nsam)
A:PIL.SpiderImagePlugin.hdr[13]->float(labrec)
A:PIL.SpiderImagePlugin.hdr[22]->float(labbyt)
A:PIL.SpiderImagePlugin.hdr[23]->float(lenbyt)
A:PIL.SpiderImagePlugin.hdr->makeSpiderHeader(im)
A:PIL.SpiderImagePlugin.(fn, ext)->os.path.splitext(filename)
PIL.SpiderImagePlugin.SpiderImageFile(ImageFile.ImageFile)
PIL.SpiderImagePlugin.SpiderImageFile._open(self)
PIL.SpiderImagePlugin.SpiderImageFile.convert2byte(self,depth=255)
PIL.SpiderImagePlugin.SpiderImageFile.seek(self,frame)
PIL.SpiderImagePlugin.SpiderImageFile.tell(self)
PIL.SpiderImagePlugin.SpiderImageFile.tkPhotoImage(self)
PIL.SpiderImagePlugin._save(im,fp,filename)
PIL.SpiderImagePlugin._save_spider(im,fp,filename)
PIL.SpiderImagePlugin.isInt(f)
PIL.SpiderImagePlugin.isSpiderHeader(t)
PIL.SpiderImagePlugin.isSpiderImage(filename)
PIL.SpiderImagePlugin.loadImageSeries(filelist=None)
PIL.SpiderImagePlugin.makeSpiderHeader(im)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageGL.py----------------------------------------
PIL.ImageGL.TextureFactory


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/MpegImagePlugin.py----------------------------------------
A:PIL.MpegImagePlugin.c->self.next()
A:PIL.MpegImagePlugin.v->self.peek(bits)
A:PIL.MpegImagePlugin.s->BitStream(self.fp)
PIL.MpegImagePlugin.BitStream(self,fp)
PIL.MpegImagePlugin.BitStream.__init__(self,fp)
PIL.MpegImagePlugin.BitStream.next(self)
PIL.MpegImagePlugin.BitStream.peek(self,bits)
PIL.MpegImagePlugin.BitStream.read(self,bits)
PIL.MpegImagePlugin.BitStream.skip(self,bits)
PIL.MpegImagePlugin.MpegImageFile(ImageFile.ImageFile)
PIL.MpegImagePlugin.MpegImageFile._open(self)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/Hdf5StubImagePlugin.py----------------------------------------
A:PIL.Hdf5StubImagePlugin.offset->self.fp.tell()
A:PIL.Hdf5StubImagePlugin.loader->self._load()
PIL.Hdf5StubImagePlugin.HDF5StubImageFile(ImageFile.StubImageFile)
PIL.Hdf5StubImagePlugin.HDF5StubImageFile._load(self)
PIL.Hdf5StubImagePlugin.HDF5StubImageFile._open(self)
PIL.Hdf5StubImagePlugin._accept(prefix)
PIL.Hdf5StubImagePlugin._save(im,fp,filename)
PIL.Hdf5StubImagePlugin.register_handler(handler)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageShow.py----------------------------------------
A:PIL.ImageShow.viewer->viewer()
A:PIL.ImageShow.base->PIL.Image.getmodebase(image.mode)
A:PIL.ImageShow.image->image.convert(base).convert(base)
A:PIL.ImageShow.path->os.environ.get('PATH')
A:PIL.ImageShow.filename->os.path.join(dirname, executable)
A:PIL.ImageShow.(command, executable)->self.get_command_ex(file, **options)
PIL.ImageShow.Viewer
PIL.ImageShow.Viewer.get_command(self,file,**options)
PIL.ImageShow.Viewer.get_format(self,image)
PIL.ImageShow.Viewer.save_image(self,image)
PIL.ImageShow.Viewer.show(self,image,**options)
PIL.ImageShow.Viewer.show_file(self,file,**options)
PIL.ImageShow.Viewer.show_image(self,image,**options)
PIL.ImageShow.register(viewer,order=1)
PIL.ImageShow.show(image,title=None,**options)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/BufrStubImagePlugin.py----------------------------------------
A:PIL.BufrStubImagePlugin.offset->self.fp.tell()
A:PIL.BufrStubImagePlugin.loader->self._load()
PIL.BufrStubImagePlugin.BufrStubImageFile(ImageFile.StubImageFile)
PIL.BufrStubImagePlugin.BufrStubImageFile._load(self)
PIL.BufrStubImagePlugin.BufrStubImageFile._open(self)
PIL.BufrStubImagePlugin._accept(prefix)
PIL.BufrStubImagePlugin._save(im,fp,filename)
PIL.BufrStubImagePlugin.register_handler(handler)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/PcfFontFile.py----------------------------------------
A:PIL.PcfFontFile.magic->l32(fp.read(4))
A:PIL.PcfFontFile.count->l32(fp.read(4))
A:PIL.PcfFontFile.type->l32(fp.read(4))
A:PIL.PcfFontFile.self.info->self._load_properties()
A:PIL.PcfFontFile.metrics->self._load_metrics()
A:PIL.PcfFontFile.bitmaps->self._load_bitmaps(metrics)
A:PIL.PcfFontFile.encoding->self._load_encoding()
A:PIL.PcfFontFile.format->l32(fp.read(4))
A:PIL.PcfFontFile.(fp, format, i16, i32)->self._getformat(PCF_BDF_ENCODINGS)
A:PIL.PcfFontFile.nprops->i32(fp.read(4))
A:PIL.PcfFontFile.data->fp.read(bitmapsize)
A:PIL.PcfFontFile.k->sz(data, k)
A:PIL.PcfFontFile.v->sz(data, v)
A:PIL.PcfFontFile.left->i16(fp.read(2))
A:PIL.PcfFontFile.right->i16(fp.read(2))
A:PIL.PcfFontFile.width->i16(fp.read(2))
A:PIL.PcfFontFile.ascent->i16(fp.read(2))
A:PIL.PcfFontFile.descent->i16(fp.read(2))
A:PIL.PcfFontFile.attributes->i16(fp.read(2))
A:PIL.PcfFontFile.nbitmaps->i32(fp.read(4))
A:PIL.PcfFontFile.default->i16(fp.read(2))
A:PIL.PcfFontFile.encodingOffset->i16(fp.read(2))
PIL.PcfFontFile.PcfFontFile(self,fp)
PIL.PcfFontFile.PcfFontFile.__init__(self,fp)
PIL.PcfFontFile.PcfFontFile._getformat(self,tag)
PIL.PcfFontFile.PcfFontFile._load_bitmaps(self,metrics)
PIL.PcfFontFile.PcfFontFile._load_encoding(self)
PIL.PcfFontFile.PcfFontFile._load_metrics(self)
PIL.PcfFontFile.PcfFontFile._load_properties(self)
PIL.PcfFontFile.sz(s,o)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageStat.py----------------------------------------
A:PIL.ImageStat.self.h->image_or_list.histogram()
A:PIL.ImageStat.self.bands->list(range(len(self.h) // 256))
A:PIL.ImageStat.v->getattr(self, '_get' + id)()
A:PIL.ImageStat.n->min(n, i)
A:PIL.ImageStat.x->max(x, i)
PIL.ImageStat.Stat(self,image_or_list,mask=None)
PIL.ImageStat.Stat.__getattr__(self,id)
PIL.ImageStat.Stat.__init__(self,image_or_list,mask=None)
PIL.ImageStat.Stat._getcount(self)
PIL.ImageStat.Stat._getextrema(self)
PIL.ImageStat.Stat._getmean(self)
PIL.ImageStat.Stat._getmedian(self)
PIL.ImageStat.Stat._getrms(self)
PIL.ImageStat.Stat._getstddev(self)
PIL.ImageStat.Stat._getsum(self)
PIL.ImageStat.Stat._getsum2(self)
PIL.ImageStat.Stat._getvar(self)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageOps.py----------------------------------------
A:PIL.ImageOps.color->PIL.ImageColor.getcolor(color, mode)
A:PIL.ImageOps.histogram->image.convert('RGB').histogram()
A:PIL.ImageOps.ix->int(ix * scale + offset)
A:PIL.ImageOps.black->_color(black, 'RGB')
A:PIL.ImageOps.white->_color(white, 'RGB')
A:PIL.ImageOps.image->image.convert('RGB').convert('RGB')
A:PIL.ImageOps.(left, top, right, bottom)->_border(border)
A:PIL.ImageOps.h->image.convert('RGB').convert('RGB').histogram(mask)
A:PIL.ImageOps.out->image.convert('RGB').convert('RGB').crop((leftSide, topSide, leftSide + cropWidth, topSide + cropHeight))
A:PIL.ImageOps.cropWidth->int(aspectRatio * float(liveSize[1]) + 0.5)
A:PIL.ImageOps.cropHeight->int(float(liveSize[0]) / aspectRatio + 0.5)
A:PIL.ImageOps.leftSide->int(liveArea[0] + float(liveSize[0] - cropWidth) * centering[0])
A:PIL.ImageOps.topSide->int(liveArea[1] + float(liveSize[1] - cropHeight) * centering[1])
PIL.ImageOps._border(border)
PIL.ImageOps._color(color,mode)
PIL.ImageOps._lut(image,lut)
PIL.ImageOps.autocontrast(image,cutoff=0,ignore=None)
PIL.ImageOps.colorize(image,black,white)
PIL.ImageOps.crop(image,border=0)
PIL.ImageOps.deform(image,deformer,resample=Image.BILINEAR)
PIL.ImageOps.equalize(image,mask=None)
PIL.ImageOps.expand(image,border=0,fill=0)
PIL.ImageOps.fit(image,size,method=Image.NEAREST,bleed=0.0,centering=(0.5,0.5))
PIL.ImageOps.flip(image)
PIL.ImageOps.gaussian_blur(im,radius=None)
PIL.ImageOps.grayscale(image)
PIL.ImageOps.invert(image)
PIL.ImageOps.mirror(image)
PIL.ImageOps.posterize(image,bits)
PIL.ImageOps.solarize(image,threshold=128)
PIL.ImageOps.unsharp_mask(im,radius=None,percent=None,threshold=None)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageFilter.py----------------------------------------
A:PIL.ImageFilter.scale->reduce(lambda a, b: a + b, kernel)
A:PIL.ImageFilter.image->image.expand(self.size // 2, self.size // 2).expand(self.size // 2, self.size // 2)
PIL.ImageFilter.BLUR(BuiltinFilter)
PIL.ImageFilter.BuiltinFilter(self)
PIL.ImageFilter.BuiltinFilter.__init__(self)
PIL.ImageFilter.CONTOUR(BuiltinFilter)
PIL.ImageFilter.DETAIL(BuiltinFilter)
PIL.ImageFilter.EDGE_ENHANCE(BuiltinFilter)
PIL.ImageFilter.EDGE_ENHANCE_MORE(BuiltinFilter)
PIL.ImageFilter.EMBOSS(BuiltinFilter)
PIL.ImageFilter.FIND_EDGES(BuiltinFilter)
PIL.ImageFilter.Filter
PIL.ImageFilter.GaussianBlur(self,radius=2)
PIL.ImageFilter.GaussianBlur.__init__(self,radius=2)
PIL.ImageFilter.GaussianBlur.filter(self,image)
PIL.ImageFilter.Kernel(self,size,kernel,scale=None,offset=0)
PIL.ImageFilter.Kernel.__init__(self,size,kernel,scale=None,offset=0)
PIL.ImageFilter.Kernel.filter(self,image)
PIL.ImageFilter.MaxFilter(self,size=3)
PIL.ImageFilter.MaxFilter.__init__(self,size=3)
PIL.ImageFilter.MedianFilter(self,size=3)
PIL.ImageFilter.MedianFilter.__init__(self,size=3)
PIL.ImageFilter.MinFilter(self,size=3)
PIL.ImageFilter.MinFilter.__init__(self,size=3)
PIL.ImageFilter.ModeFilter(self,size=3)
PIL.ImageFilter.ModeFilter.__init__(self,size=3)
PIL.ImageFilter.ModeFilter.filter(self,image)
PIL.ImageFilter.RankFilter(self,size,rank)
PIL.ImageFilter.RankFilter.__init__(self,size,rank)
PIL.ImageFilter.RankFilter.filter(self,image)
PIL.ImageFilter.SHARPEN(BuiltinFilter)
PIL.ImageFilter.SMOOTH(BuiltinFilter)
PIL.ImageFilter.SMOOTH_MORE(BuiltinFilter)
PIL.ImageFilter.UnsharpMask(self,radius=2,percent=150,threshold=3)
PIL.ImageFilter.UnsharpMask.__init__(self,radius=2,percent=150,threshold=3)
PIL.ImageFilter.UnsharpMask.filter(self,image)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageFont.py----------------------------------------
A:PIL.ImageFont.core->_imagingft_not_installed()
A:PIL.ImageFont.file->open(filename, 'rb')
A:PIL.ImageFont.image->PIL.Image.open(fullname)
A:PIL.ImageFont.d->open(filename, 'rb').readline().split(b';')
A:PIL.ImageFont.s->open(filename, 'rb').readline()
A:PIL.ImageFont.data->open(filename, 'rb').read(256 * 20)
A:PIL.ImageFont.self.font->_imagingft_not_installed().getfont(file, size, index, encoding)
A:PIL.ImageFont.(size, offset)->self.font.getsize(text)
A:PIL.ImageFont.im->self.font.getmask(text, mode)
A:PIL.ImageFont.(w, h)->self.font.getsize(text)
A:PIL.ImageFont.f->ImageFont()
A:PIL.ImageFont.windir->os.environ.get('WINDIR')
A:PIL.ImageFont.filename->os.path.join(windir, 'fonts', filename)
PIL.ImageFont.FreeTypeFont(self,file,size,index=0,encoding='')
PIL.ImageFont.FreeTypeFont.__init__(self,file,size,index=0,encoding='')
PIL.ImageFont.FreeTypeFont.getmask(self,text,mode='')
PIL.ImageFont.FreeTypeFont.getmask2(self,text,mode='',fill=Image.core.fill)
PIL.ImageFont.FreeTypeFont.getmetrics(self)
PIL.ImageFont.FreeTypeFont.getname(self)
PIL.ImageFont.FreeTypeFont.getsize(self,text)
PIL.ImageFont.ImageFont
PIL.ImageFont.ImageFont._load_pilfont(self,filename)
PIL.ImageFont.ImageFont._load_pilfont_data(self,file,image)
PIL.ImageFont.TransposedFont(self,font,orientation=None)
PIL.ImageFont.TransposedFont.__init__(self,font,orientation=None)
PIL.ImageFont.TransposedFont.getmask(self,text,mode='')
PIL.ImageFont.TransposedFont.getsize(self,text)
PIL.ImageFont._imagingft_not_installed
PIL.ImageFont._imagingft_not_installed.__getattr__(self,id)
PIL.ImageFont.load(filename)
PIL.ImageFont.load_default()
PIL.ImageFont.load_path(filename)
PIL.ImageFont.truetype(filename,size,index=0,encoding='')


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/PalmImagePlugin.py----------------------------------------
A:PIL.PalmImagePlugin.image->PIL.Image.new('L', (1, len(_Palm8BitColormapValues)))
A:PIL.PalmImagePlugin.Palm8BitColormapImage->build_prototype_image()
A:PIL.PalmImagePlugin.im->im.point(lambda x, maxval=(1 << bpp) - 1: maxval - (x & maxval)).point(lambda x, maxval=(1 << bpp) - 1: maxval - (x & maxval))
A:PIL.PalmImagePlugin.colormap->im.point(lambda x, maxval=(1 << bpp) - 1: maxval - (x & maxval)).point(lambda x, maxval=(1 << bpp) - 1: maxval - (x & maxval)).getdata().getpalette()
PIL.PalmImagePlugin._save(im,fp,filename,check=0)
PIL.PalmImagePlugin.build_prototype_image()


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageChops.py----------------------------------------
PIL.ImageChops.add(image1,image2,scale=1.0,offset=0)
PIL.ImageChops.add_modulo(image1,image2)
PIL.ImageChops.blend(image1,image2,alpha)
PIL.ImageChops.composite(image1,image2,mask)
PIL.ImageChops.constant(image,value)
PIL.ImageChops.darker(image1,image2)
PIL.ImageChops.difference(image1,image2)
PIL.ImageChops.duplicate(image)
PIL.ImageChops.invert(image)
PIL.ImageChops.lighter(image1,image2)
PIL.ImageChops.logical_and(image1,image2)
PIL.ImageChops.logical_or(image1,image2)
PIL.ImageChops.logical_xor(image1,image2)
PIL.ImageChops.multiply(image1,image2)
PIL.ImageChops.offset(image,xoffset,yoffset=None)
PIL.ImageChops.screen(image1,image2)
PIL.ImageChops.subtract(image1,image2,scale=1.0,offset=0)
PIL.ImageChops.subtract_modulo(image1,image2)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/XVThumbImagePlugin.py----------------------------------------
A:PIL.XVThumbImagePlugin.s->s.strip().split().strip().split()
A:PIL.XVThumbImagePlugin.self.palette->PIL.ImagePalette.raw('RGB', PALETTE)
PIL.XVThumbImagePlugin.XVThumbImageFile(ImageFile.ImageFile)
PIL.XVThumbImagePlugin.XVThumbImageFile._open(self)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/_binary.py----------------------------------------
PIL._binary.i16be(c,o=0)
PIL._binary.i16le(c,o=0)
PIL._binary.i32be(c,o=0)
PIL._binary.i32le(c,o=0)
PIL._binary.o16be(i)
PIL._binary.o16le(i)
PIL._binary.o32be(i)
PIL._binary.o32le(i)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/GimpPaletteFile.py----------------------------------------
A:PIL.GimpPaletteFile.s->fp.readline()
A:PIL.GimpPaletteFile.v->tuple(map(int, s.split()[:3]))
A:PIL.GimpPaletteFile.self.palette->b''.join(self.palette)
PIL.GimpPaletteFile.GimpPaletteFile(self,fp)
PIL.GimpPaletteFile.GimpPaletteFile.__init__(self,fp)
PIL.GimpPaletteFile.GimpPaletteFile.getpalette(self)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/EpsImagePlugin.py----------------------------------------
A:PIL.EpsImagePlugin.split->re.compile('^%%([^:]*):[ \\t]*(.*)[ \\t]*$')
A:PIL.EpsImagePlugin.field->re.compile('^%[%!\\w]([^:]*)[ \\t]*$')
A:PIL.EpsImagePlugin.file->tempfile.mktemp()
A:PIL.EpsImagePlugin.command->' '.join(command)
A:PIL.EpsImagePlugin.gs->os.popen(command, 'w')
A:PIL.EpsImagePlugin.s->io.TextIOWrapper(NoCloseStream(fp), encoding='latin-1').readline()
A:PIL.EpsImagePlugin.status->os.popen(command, 'w').close()
A:PIL.EpsImagePlugin.im->PIL.Image.core.open_ppm(file)
A:PIL.EpsImagePlugin.v->getattr(self.fp, id)
A:PIL.EpsImagePlugin.pos->self.fp.tell()
A:PIL.EpsImagePlugin.c->self.fp.read(1)
A:PIL.EpsImagePlugin.self.char->self.fp.read(1)
A:PIL.EpsImagePlugin.fp->io.TextIOWrapper(NoCloseStream(fp), encoding='latin-1')
A:PIL.EpsImagePlugin.length->i32(s[8:])
A:PIL.EpsImagePlugin.offset->i32(s[4:])
A:PIL.EpsImagePlugin.m->re.compile('^%[%!\\w]([^:]*)[ \\t]*$').match(s)
A:PIL.EpsImagePlugin.(k, v)->re.compile('^%[%!\\w]([^:]*)[ \\t]*$').match(s).group(1, 2)
A:PIL.EpsImagePlugin.k->re.compile('^%[%!\\w]([^:]*)[ \\t]*$').match(s).group(1)
A:PIL.EpsImagePlugin.[x, y, bi, mo, z3, z4, en, id]->s[11:].split(None, 7)
A:PIL.EpsImagePlugin.x->int(x)
A:PIL.EpsImagePlugin.y->int(y)
A:PIL.EpsImagePlugin.bi->int(bi)
A:PIL.EpsImagePlugin.mo->int(mo)
A:PIL.EpsImagePlugin.en->int(en)
A:PIL.EpsImagePlugin.self.im->Ghostscript(self.tile, self.size, self.fp)
PIL.EpsImagePlugin.EpsImageFile(ImageFile.ImageFile)
PIL.EpsImagePlugin.EpsImageFile._open(self)
PIL.EpsImagePlugin.EpsImageFile.load(self)
PIL.EpsImagePlugin.Ghostscript(tile,size,fp)
PIL.EpsImagePlugin.PSFile(self,fp)
PIL.EpsImagePlugin.PSFile.__getattr__(self,id)
PIL.EpsImagePlugin.PSFile.__init__(self,fp)
PIL.EpsImagePlugin.PSFile.read(self,count)
PIL.EpsImagePlugin.PSFile.readline(self)
PIL.EpsImagePlugin.PSFile.seek(self,offset,whence=0)
PIL.EpsImagePlugin.PSFile.tell(self)
PIL.EpsImagePlugin._accept(prefix)
PIL.EpsImagePlugin._save(im,fp,filename,eps=1)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/DcxImagePlugin.py----------------------------------------
A:PIL.DcxImagePlugin.s->self.fp.read(4)
A:PIL.DcxImagePlugin.offset->i32(self.fp.read(4))
PIL.DcxImagePlugin.DcxImageFile(PcxImageFile)
PIL.DcxImagePlugin.DcxImageFile._open(self)
PIL.DcxImagePlugin.DcxImageFile.seek(self,frame)
PIL.DcxImagePlugin.DcxImageFile.tell(self)
PIL.DcxImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageMath.py----------------------------------------
A:PIL.ImageMath.im1->im1.crop((0, 0) + size).crop((0, 0) + size)
A:PIL.ImageMath.out->builtins.eval(expression, args)
A:PIL.ImageMath.op->getattr(_imagingmath, op + '_' + im1.mode)
A:PIL.ImageMath.im2->im2.crop((0, 0) + size).crop((0, 0) + size)
A:PIL.ImageMath.args->ops.copy()
A:PIL.ImageMath.args[k]->_Operand(v)
PIL.ImageMath._Operand(self,im)
PIL.ImageMath._Operand.__abs__(self)
PIL.ImageMath._Operand.__add__(self,other)
PIL.ImageMath._Operand.__and__(self,other)
PIL.ImageMath._Operand.__bool__(self)
PIL.ImageMath._Operand.__eq__(self,other)
PIL.ImageMath._Operand.__fixup(self,im1)
PIL.ImageMath._Operand.__ge__(self,other)
PIL.ImageMath._Operand.__gt__(self,other)
PIL.ImageMath._Operand.__init__(self,im)
PIL.ImageMath._Operand.__invert__(self)
PIL.ImageMath._Operand.__le__(self,other)
PIL.ImageMath._Operand.__lshift__(self,other)
PIL.ImageMath._Operand.__lt__(self,other)
PIL.ImageMath._Operand.__mod__(self,other)
PIL.ImageMath._Operand.__mul__(self,other)
PIL.ImageMath._Operand.__ne__(self,other)
PIL.ImageMath._Operand.__neg__(self)
PIL.ImageMath._Operand.__or__(self,other)
PIL.ImageMath._Operand.__pos__(self)
PIL.ImageMath._Operand.__pow__(self,other)
PIL.ImageMath._Operand.__radd__(self,other)
PIL.ImageMath._Operand.__rand__(self,other)
PIL.ImageMath._Operand.__rmod__(self,other)
PIL.ImageMath._Operand.__rmul__(self,other)
PIL.ImageMath._Operand.__ror__(self,other)
PIL.ImageMath._Operand.__rpow__(self,other)
PIL.ImageMath._Operand.__rshift__(self,other)
PIL.ImageMath._Operand.__rsub__(self,other)
PIL.ImageMath._Operand.__rtruediv__(self,other)
PIL.ImageMath._Operand.__rxor__(self,other)
PIL.ImageMath._Operand.__sub__(self,other)
PIL.ImageMath._Operand.__truediv__(self,other)
PIL.ImageMath._Operand.__xor__(self,other)
PIL.ImageMath._Operand.apply(self,op,im1,im2=None,mode=None)
PIL.ImageMath._isconstant(v)
PIL.ImageMath.eval(expression,_dict={},**kw)
PIL.ImageMath.imagemath_convert(self,mode)
PIL.ImageMath.imagemath_equal(self,other)
PIL.ImageMath.imagemath_float(self)
PIL.ImageMath.imagemath_int(self)
PIL.ImageMath.imagemath_max(self,other)
PIL.ImageMath.imagemath_min(self,other)
PIL.ImageMath.imagemath_notequal(self,other)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/PdfImagePlugin.py----------------------------------------
A:PIL.PdfImagePlugin.resolution->PIL.Image.new('L', (len(data), 1), None).encoderinfo.get('resolution', 72.0)
A:PIL.PdfImagePlugin.fp->TextWriter(fp)
A:PIL.PdfImagePlugin.palette->PIL.Image.new('L', (len(data), 1), None).im.getpalette('RGB')
A:PIL.PdfImagePlugin.r->i8(palette[i * 3])
A:PIL.PdfImagePlugin.g->i8(palette[i * 3 + 1])
A:PIL.PdfImagePlugin.b->i8(palette[i * 3 + 2])
A:PIL.PdfImagePlugin.xref[1]->TextWriter(fp).tell()
A:PIL.PdfImagePlugin.xref[2]->TextWriter(fp).tell()
A:PIL.PdfImagePlugin.op->TextWriter(io.BytesIO())
A:PIL.PdfImagePlugin.data->PIL.Image.new('L', (len(data), 1), None).tostring('raw', '1')
A:PIL.PdfImagePlugin.im->PIL.Image.new('L', (len(data), 1), None)
A:PIL.PdfImagePlugin.xref[3]->TextWriter(fp).tell()
A:PIL.PdfImagePlugin.xref[4]->TextWriter(fp).tell()
A:PIL.PdfImagePlugin.xref[5]->TextWriter(fp).tell()
A:PIL.PdfImagePlugin.startxref->TextWriter(fp).tell()
PIL.PdfImagePlugin._endobj(fp)
PIL.PdfImagePlugin._obj(fp,obj,**dict)
PIL.PdfImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/McIdasImagePlugin.py----------------------------------------
A:PIL.McIdasImagePlugin.s->self.fp.read(256)
PIL.McIdasImagePlugin.McIdasImageFile(ImageFile.ImageFile)
PIL.McIdasImagePlugin.McIdasImageFile._open(self)
PIL.McIdasImagePlugin._accept(s)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageFile.py----------------------------------------
A:PIL.ImageFile.message->ERRORS.get(error)
A:PIL.ImageFile.self.fp->open(fp, 'rb')
A:PIL.ImageFile.pixel->PIL.Image.Image.load(self)
A:PIL.ImageFile.self.map->mmap.mmap(file.fileno(), size)
A:PIL.ImageFile.self.im->PIL.Image.core.new(self.mode, self.size)
A:PIL.ImageFile.file->open(self.filename, 'r+')
A:PIL.ImageFile.size->os.path.getsize(self.filename)
A:PIL.ImageFile.d->PIL.Image._getdecoder(self.mode, d, a, self.decoderconfig)
A:PIL.ImageFile.t->len(b)
A:PIL.ImageFile.s->PIL.Image._getencoder(im.mode, e, a, im.encoderconfig).encode_to_file(fh, bufsize)
A:PIL.ImageFile.(n, e)->self.decoder.decode(self.data)
A:PIL.ImageFile.loader->self._load()
A:PIL.ImageFile.image->self._load().load(self)
A:PIL.ImageFile.skip->min(len(self.data), self.offset)
A:PIL.ImageFile.fp->io.BytesIO(self.data)
A:PIL.ImageFile.im->PIL.Image.open(fp)
A:PIL.ImageFile.self.decoder->PIL.Image._getdecoder(im.mode, d, a, im.decoderconfig)
A:PIL.ImageFile.self.image->PIL.Image.open(fp)
A:PIL.ImageFile.bufsize->max(MAXBLOCK, im.size[0] * 4)
A:PIL.ImageFile.fh->io.BytesIO(self.data).fileno()
A:PIL.ImageFile.e->PIL.Image._getencoder(im.mode, e, a, im.encoderconfig)
A:PIL.ImageFile.(l, s, d)->PIL.Image._getencoder(im.mode, e, a, im.encoderconfig).encode(bufsize)
A:PIL.ImageFile.block->io.BytesIO(self.data).read(min(size, SAFEBLOCK))
PIL.ImageFile.ImageFile(self,fp=None,filename=None)
PIL.ImageFile.ImageFile.__init__(self,fp=None,filename=None)
PIL.ImageFile.ImageFile.draft(self,mode,size)
PIL.ImageFile.ImageFile.load(self)
PIL.ImageFile.ImageFile.load_end(self)
PIL.ImageFile.ImageFile.load_prepare(self)
PIL.ImageFile.ImageFile.verify(self)
PIL.ImageFile.Parser
PIL.ImageFile.Parser.close(self)
PIL.ImageFile.Parser.feed(self,data)
PIL.ImageFile.Parser.reset(self)
PIL.ImageFile.StubImageFile(ImageFile)
PIL.ImageFile.StubImageFile._load(self)
PIL.ImageFile.StubImageFile._open(self)
PIL.ImageFile.StubImageFile.load(self)
PIL.ImageFile._safe_read(fp,size)
PIL.ImageFile._save(im,fp,tile)
PIL.ImageFile._tilesort(t)
PIL.ImageFile.raise_ioerror(error)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/PSDraw.py----------------------------------------
A:PIL.PSDraw.text->'\\)'.join(text.split(')'))
A:PIL.PSDraw.xmax->float(box[2] - box[0])
A:PIL.PSDraw.ymax->float(box[3] - box[1])
PIL.PSDraw.PSDraw(self,fp=None)
PIL.PSDraw.PSDraw.__init__(self,fp=None)
PIL.PSDraw.PSDraw.begin_document(self,id=None)
PIL.PSDraw.PSDraw.end_document(self)
PIL.PSDraw.PSDraw.image(self,box,im,dpi=None)
PIL.PSDraw.PSDraw.line(self,xy0,xy1)
PIL.PSDraw.PSDraw.rectangle(self,box)
PIL.PSDraw.PSDraw.setfont(self,font,size)
PIL.PSDraw.PSDraw.setink(self,ink)
PIL.PSDraw.PSDraw.text(self,xy,text)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/TiffTags.py----------------------------------------


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImtImagePlugin.py----------------------------------------
A:PIL.ImtImagePlugin.field->re.compile(b'([a-z]*) ([^ \\r\\n]*)')
A:PIL.ImtImagePlugin.s->self.fp.read(1)
A:PIL.ImtImagePlugin.m->re.compile(b'([a-z]*) ([^ \\r\\n]*)').match(s)
A:PIL.ImtImagePlugin.(k, v)->re.compile(b'([a-z]*) ([^ \\r\\n]*)').match(s).group(1, 2)
A:PIL.ImtImagePlugin.xsize->int(v)
A:PIL.ImtImagePlugin.ysize->int(v)
PIL.ImtImagePlugin.ImtImageFile(ImageFile.ImageFile)
PIL.ImtImagePlugin.ImtImageFile._open(self)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/TiffImagePlugin.py----------------------------------------
A:PIL.TiffImagePlugin.COMPRESSION_INFO_REV->dict([(v, k) for (k, v) in COMPRESSION_INFO.items()])
A:PIL.TiffImagePlugin.tag_name->PIL.TiffTags.TAGS.get(tag_code, tag_code)
A:PIL.TiffImagePlugin.self.tags[tag]data->handler(self, data)
A:PIL.TiffImagePlugin.keys->list(self.__iter__())
A:PIL.TiffImagePlugin.a->self._decoder(rawmode, l)
A:PIL.TiffImagePlugin.ifd->ImageFileDirectory(prefix)
A:PIL.TiffImagePlugin.tagname->PIL.TiffTags.TAGS.get(tag, 'unknown')
A:PIL.TiffImagePlugin.typname->PIL.TiffTags.TYPES.get(typ, 'unknown')
A:PIL.TiffImagePlugin.here->fp.tell()
A:PIL.TiffImagePlugin.data->b''.join(map(o32, value))
A:PIL.TiffImagePlugin.self.next->i32(fp.read(4))
A:PIL.TiffImagePlugin.tags->sorted(self.tags.items())
A:PIL.TiffImagePlugin.datavalue->b''.join(value)
A:PIL.TiffImagePlugin.stripoffsets->len(directory)
A:PIL.TiffImagePlugin.size->len(data)
A:PIL.TiffImagePlugin.count->len(value)
A:PIL.TiffImagePlugin.value->float(value)
A:PIL.TiffImagePlugin.ifh->self.fp.read(8)
A:PIL.TiffImagePlugin.self.tagself.ifd->ImageFileDirectory(ifh[:2])
A:PIL.TiffImagePlugin.self.__firstself.__next->self.ifd.i32(ifh, 4)
A:PIL.TiffImagePlugin.pixel->PIL.Image.Image.load(self)
A:PIL.TiffImagePlugin.d->PIL.Image._getdecoder(self.mode, d, a, self.decoderconfig)
A:PIL.TiffImagePlugin.(n, e)->PIL.Image._getdecoder(self.mode, d, a, self.decoderconfig).decode(self.fp.read())
A:PIL.TiffImagePlugin.self._planar_configuration->getscalar(PLANAR_CONFIGURATION, 1)
A:PIL.TiffImagePlugin.photo->getscalar(PHOTOMETRIC_INTERPRETATION, 0)
A:PIL.TiffImagePlugin.fillorder->getscalar(FILLORDER, 1)
A:PIL.TiffImagePlugin.xsize->getscalar(IMAGEWIDTH)
A:PIL.TiffImagePlugin.ysize->getscalar(IMAGELENGTH)
A:PIL.TiffImagePlugin.format->getscalar(SAMPLEFORMAT, 1)
A:PIL.TiffImagePlugin.xres->getscalar(X_RESOLUTION, (1, 1))
A:PIL.TiffImagePlugin.yres->getscalar(Y_RESOLUTION, (1, 1))
A:PIL.TiffImagePlugin.resunit->getscalar(RESOLUTION_UNIT, 1)
A:PIL.TiffImagePlugin.h->getscalar(323)
A:PIL.TiffImagePlugin.w->getscalar(322)
A:PIL.TiffImagePlugin.self.palette->PIL.ImagePalette.raw('RGB;L', b''.join(palette))
A:PIL.TiffImagePlugin.compression->im.info.get('compression', 'raw')
A:PIL.TiffImagePlugin.ifd[key]->im.tag.tagdata.get(key)
A:PIL.TiffImagePlugin.ifd[X_RESOLUTION]ifd[Y_RESOLUTION]->_cvt_res(im.encoderinfo['resolution'])
A:PIL.TiffImagePlugin.ifd[X_RESOLUTION]->_cvt_res(dpi[0])
A:PIL.TiffImagePlugin.ifd[Y_RESOLUTION]->_cvt_res(dpi[1])
A:PIL.TiffImagePlugin.dpi->im.encoderinfo.get('dpi')
A:PIL.TiffImagePlugin.ifd[SAMPLESPERPIXEL]->len(bits)
A:PIL.TiffImagePlugin.lut->im.im.getpalette('RGB', 'RGB;L')
A:PIL.TiffImagePlugin.ifd[COLORMAP]->tuple((i8(v) * 256 for v in lut))
A:PIL.TiffImagePlugin.ifd[COMPRESSION]->dict([(v, k) for (k, v) in COMPRESSION_INFO.items()]).get(compression, 1)
A:PIL.TiffImagePlugin._fp->os.dup(fp.fileno())
A:PIL.TiffImagePlugin.atts->dict([(k, v) for (k, (v,)) in ifd.items() if k not in blocklist])
A:PIL.TiffImagePlugin.e->PIL.Image._getencoder(im.mode, compression, a, im.encoderconfig)
A:PIL.TiffImagePlugin.(l, s, d)->PIL.Image._getencoder(im.mode, compression, a, im.encoderconfig).encode(16 * 1024)
A:PIL.TiffImagePlugin.offset->ImageFileDirectory(prefix).save(fp)
PIL.TiffImagePlugin.ImageFileDirectory(self,prefix)
PIL.TiffImagePlugin.ImageFileDirectory.__contains__(self,tag)
PIL.TiffImagePlugin.ImageFileDirectory.__delitem__(self,tag)
PIL.TiffImagePlugin.ImageFileDirectory.__getitem__(self,tag)
PIL.TiffImagePlugin.ImageFileDirectory.__init__(self,prefix)
PIL.TiffImagePlugin.ImageFileDirectory.__iter__(self)
PIL.TiffImagePlugin.ImageFileDirectory.__len__(self)
PIL.TiffImagePlugin.ImageFileDirectory.__setitem__(self,tag,value)
PIL.TiffImagePlugin.ImageFileDirectory.__str__(self)
PIL.TiffImagePlugin.ImageFileDirectory.as_dict(self)
PIL.TiffImagePlugin.ImageFileDirectory.getscalar(self,tag,default=None)
PIL.TiffImagePlugin.ImageFileDirectory.items(self)
PIL.TiffImagePlugin.ImageFileDirectory.load(self,fp)
PIL.TiffImagePlugin.ImageFileDirectory.load_byte(self,data)
PIL.TiffImagePlugin.ImageFileDirectory.load_double(self,data)
PIL.TiffImagePlugin.ImageFileDirectory.load_float(self,data)
PIL.TiffImagePlugin.ImageFileDirectory.load_long(self,data)
PIL.TiffImagePlugin.ImageFileDirectory.load_rational(self,data)
PIL.TiffImagePlugin.ImageFileDirectory.load_short(self,data)
PIL.TiffImagePlugin.ImageFileDirectory.load_string(self,data)
PIL.TiffImagePlugin.ImageFileDirectory.load_undefined(self,data)
PIL.TiffImagePlugin.ImageFileDirectory.named(self)
PIL.TiffImagePlugin.ImageFileDirectory.reset(self)
PIL.TiffImagePlugin.ImageFileDirectory.save(self,fp)
PIL.TiffImagePlugin.TiffImageFile(ImageFile.ImageFile)
PIL.TiffImagePlugin.TiffImageFile._decoder(self,rawmode,layer,tile=None)
PIL.TiffImagePlugin.TiffImageFile._load_libtiff(self)
PIL.TiffImagePlugin.TiffImageFile._open(self)
PIL.TiffImagePlugin.TiffImageFile._seek(self,frame)
PIL.TiffImagePlugin.TiffImageFile._setup(self)
PIL.TiffImagePlugin.TiffImageFile._tell(self)
PIL.TiffImagePlugin.TiffImageFile.seek(self,frame)
PIL.TiffImagePlugin.TiffImageFile.tell(self)
PIL.TiffImagePlugin._accept(prefix)
PIL.TiffImagePlugin._cvt_res(value)
PIL.TiffImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/IcnsImagePlugin.py----------------------------------------
A:PIL.IcnsImagePlugin.sig->fobj.read(4)
A:PIL.IcnsImagePlugin.indata->fobj.read(length)
A:PIL.IcnsImagePlugin.im->PIL.Image.open(open(sys.argv[1], 'rb'))
A:PIL.IcnsImagePlugin.byte->fobj.read(1)
A:PIL.IcnsImagePlugin.band->PIL.Image.frombuffer('L', size, fobj.read(size[0] * size[1]), 'raw', 'L', 0, 1)
A:PIL.IcnsImagePlugin.(sig, filesize)->nextheader(fobj)
A:PIL.IcnsImagePlugin.(sig, blocksize)->nextheader(fobj)
A:PIL.IcnsImagePlugin.sizes->self.itersizes()
A:PIL.IcnsImagePlugin.desc->self.dct.get(code)
A:PIL.IcnsImagePlugin.size->self.bestsize()
A:PIL.IcnsImagePlugin.channels->self.dataforsize(size)
A:PIL.IcnsImagePlugin.self.icns->IcnsFile(self.fp)
A:PIL.IcnsImagePlugin.self.size->self.icns.bestsize()
A:PIL.IcnsImagePlugin.self.info['sizes']->self.icns.itersizes()
PIL.IcnsImagePlugin.IcnsFile(self,fobj)
PIL.IcnsImagePlugin.IcnsFile.__init__(self,fobj)
PIL.IcnsImagePlugin.IcnsFile.bestsize(self)
PIL.IcnsImagePlugin.IcnsFile.dataforsize(self,size)
PIL.IcnsImagePlugin.IcnsFile.getimage(self,size=None)
PIL.IcnsImagePlugin.IcnsFile.itersizes(self)
PIL.IcnsImagePlugin.IcnsImageFile(ImageFile.ImageFile)
PIL.IcnsImagePlugin.IcnsImageFile._open(self)
PIL.IcnsImagePlugin.IcnsImageFile.load(self)
PIL.IcnsImagePlugin.nextheader(fobj)
PIL.IcnsImagePlugin.read_32(fobj,start_length,size)
PIL.IcnsImagePlugin.read_32t(fobj,start_length,size)
PIL.IcnsImagePlugin.read_mk(fobj,start_length,size)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImagePalette.py----------------------------------------
A:PIL.ImagePalette.index->len(self.colors)
A:PIL.ImagePalette.fp->open(filename, 'rb')
A:PIL.ImagePalette.palette->list(range(256))
A:PIL.ImagePalette.(r, g, b)->PIL.ImageColor.getrgb(white)
A:PIL.ImagePalette.r->_make_linear_lut(0, r)
A:PIL.ImagePalette.g->_make_linear_lut(0, g)
A:PIL.ImagePalette.b->_make_linear_lut(0, b)
A:PIL.ImagePalette.p->PIL.PaletteFile.PaletteFile(fp)
A:PIL.ImagePalette.lut->PIL.PaletteFile.PaletteFile(fp).getpalette()
PIL.ImagePalette.ImagePalette(self,mode='RGB',palette=None)
PIL.ImagePalette.ImagePalette.__init__(self,mode='RGB',palette=None)
PIL.ImagePalette.ImagePalette.getcolor(self,color)
PIL.ImagePalette.ImagePalette.getdata(self)
PIL.ImagePalette.ImagePalette.save(self,fp)
PIL.ImagePalette.ImagePalette.tobytes(self)
PIL.ImagePalette._make_gamma_lut(exp,mode='RGB')
PIL.ImagePalette._make_linear_lut(black,white)
PIL.ImagePalette.load(filename)
PIL.ImagePalette.negative(mode='RGB')
PIL.ImagePalette.new(mode,data)
PIL.ImagePalette.random(mode='RGB')
PIL.ImagePalette.raw(rawmode,data)
PIL.ImagePalette.sepia(white='#fff0c0')
PIL.ImagePalette.wedge(mode='RGB')


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ContainerIO.py----------------------------------------
A:PIL.ContainerIO.self.pos->max(0, min(self.pos, self.length))
A:PIL.ContainerIO.n->min(n, self.length - self.pos)
A:PIL.ContainerIO.c->self.read(1)
A:PIL.ContainerIO.s->self.readline()
PIL.ContainerIO.ContainerIO(self,file,offset,length)
PIL.ContainerIO.ContainerIO.__init__(self,file,offset,length)
PIL.ContainerIO.ContainerIO.isatty(self)
PIL.ContainerIO.ContainerIO.read(self,n=0)
PIL.ContainerIO.ContainerIO.readline(self)
PIL.ContainerIO.ContainerIO.readlines(self)
PIL.ContainerIO.ContainerIO.seek(self,offset,mode=0)
PIL.ContainerIO.ContainerIO.tell(self)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/PsdImagePlugin.py----------------------------------------
A:PIL.PsdImagePlugin.s->read(26)
A:PIL.PsdImagePlugin.psd_bits->i16(s[22:])
A:PIL.PsdImagePlugin.psd_channels->i16(s[12:])
A:PIL.PsdImagePlugin.psd_mode->i16(s[24:])
A:PIL.PsdImagePlugin.size->i32(read(4))
A:PIL.PsdImagePlugin.data->read(i32(read(4)))
A:PIL.PsdImagePlugin.self.palette->PIL.ImagePalette.raw('RGB;L', data)
A:PIL.PsdImagePlugin.signature->read(4)
A:PIL.PsdImagePlugin.id->i16(read(2))
A:PIL.PsdImagePlugin.name->read(length).decode('latin-1', 'replace')
A:PIL.PsdImagePlugin.self.layers->_layerinfo(self.fp)
A:PIL.PsdImagePlugin.self.tile->_maketile(self.fp, mode, (0, 0) + self.size, channels)
A:PIL.PsdImagePlugin.self.im->PIL.Image.core.fill(self.mode, self.size, 0)
A:PIL.PsdImagePlugin.y0->i32(read(4))
A:PIL.PsdImagePlugin.x0->i32(read(4))
A:PIL.PsdImagePlugin.y1->i32(read(4))
A:PIL.PsdImagePlugin.x1->i32(read(4))
A:PIL.PsdImagePlugin.types->list(range(i16(read(2))))
A:PIL.PsdImagePlugin.type->i16(read(2))
A:PIL.PsdImagePlugin.filler->read(12)
A:PIL.PsdImagePlugin.length->i8(read(1))
A:PIL.PsdImagePlugin.mask_y->i32(read(4))
A:PIL.PsdImagePlugin.mask_x->i32(read(4))
A:PIL.PsdImagePlugin.t->_maketile(file, m, bbox, 1)
A:PIL.PsdImagePlugin.compression->i16(read(2))
A:PIL.PsdImagePlugin.offset->file.tell()
A:PIL.PsdImagePlugin.bytecount->read(channels * ysize * 2)
PIL.PsdImagePlugin.PsdImageFile(ImageFile.ImageFile)
PIL.PsdImagePlugin.PsdImageFile._open(self)
PIL.PsdImagePlugin.PsdImageFile.load_prepare(self)
PIL.PsdImagePlugin.PsdImageFile.seek(self,layer)
PIL.PsdImagePlugin.PsdImageFile.tell(self)
PIL.PsdImagePlugin._accept(prefix)
PIL.PsdImagePlugin._layerinfo(file)
PIL.PsdImagePlugin._maketile(file,mode,bbox,channels)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/BmpImagePlugin.py----------------------------------------
A:PIL.BmpImagePlugin.s->self.fp.read(14)
A:PIL.BmpImagePlugin.bits->i16(s[14:])
A:PIL.BmpImagePlugin.compression->i32(s[16:])
A:PIL.BmpImagePlugin.colors->i32(s[32:])
A:PIL.BmpImagePlugin.indices->list(range(colors))
A:PIL.BmpImagePlugin.self.palette->PIL.ImagePalette.raw('BGR', b''.join(palette))
A:PIL.BmpImagePlugin.offset->i32(s[10:])
PIL.BmpImagePlugin.BmpImageFile(ImageFile.ImageFile)
PIL.BmpImagePlugin.BmpImageFile._bitmap(self,header=0,offset=0)
PIL.BmpImagePlugin.BmpImageFile._open(self)
PIL.BmpImagePlugin.DibImageFile(BmpImageFile)
PIL.BmpImagePlugin.DibImageFile._open(self)
PIL.BmpImagePlugin._accept(prefix)
PIL.BmpImagePlugin._save(im,fp,filename,check=0)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageCms.py----------------------------------------
A:PIL.ImageCms.self.transform->core.buildProofTransform(input.profile, output.profile, proof.profile, input_mode, output_mode, intent, proof_intent, flags)
A:PIL.ImageCms.imOut->ImageCmsTransform(inputProfile, outputProfile, im.mode, outputMode, renderingIntent, flags=flags).apply(im)
A:PIL.ImageCms.result->self.transform.apply(im.im.id, im.im.id)
A:PIL.ImageCms.profile->ImageCmsProfile(profile)
A:PIL.ImageCms.inputProfile->ImageCmsProfile(inputProfile)
A:PIL.ImageCms.outputProfile->ImageCmsProfile(outputProfile)
A:PIL.ImageCms.transform->ImageCmsTransform(inputProfile, outputProfile, im.mode, outputMode, renderingIntent, flags=flags)
A:PIL.ImageCms.proofProfile->ImageCmsProfile(proofProfile)
A:PIL.ImageCms.colorTemp->int(colorTemp + 0.5)
PIL.ImageCms.ImageCmsProfile(self,profile)
PIL.ImageCms.ImageCmsProfile.__init__(self,profile)
PIL.ImageCms.ImageCmsProfile._set(self,profile,filename=None)
PIL.ImageCms.ImageCmsTransform(self,input,output,input_mode,output_mode,intent=INTENT_PERCEPTUAL,proof=None,proof_intent=INTENT_ABSOLUTE_COLORIMETRIC,flags=0)
PIL.ImageCms.ImageCmsTransform.__init__(self,input,output,input_mode,output_mode,intent=INTENT_PERCEPTUAL,proof=None,proof_intent=INTENT_ABSOLUTE_COLORIMETRIC,flags=0)
PIL.ImageCms.ImageCmsTransform.apply(self,im,imOut=None)
PIL.ImageCms.ImageCmsTransform.apply_in_place(self,im)
PIL.ImageCms.ImageCmsTransform.point(self,im)
PIL.ImageCms.PyCMSError(Exception)
PIL.ImageCms.applyTransform(im,transform,inPlace=0)
PIL.ImageCms.buildProofTransform(inputProfile,outputProfile,proofProfile,inMode,outMode,renderingIntent=INTENT_PERCEPTUAL,proofRenderingIntent=INTENT_ABSOLUTE_COLORIMETRIC,flags=FLAGS['SOFTPROOFING'])
PIL.ImageCms.buildTransform(inputProfile,outputProfile,inMode,outMode,renderingIntent=INTENT_PERCEPTUAL,flags=0)
PIL.ImageCms.createProfile(colorSpace,colorTemp=-1)
PIL.ImageCms.getDefaultIntent(profile)
PIL.ImageCms.getOpenProfile(profileFilename)
PIL.ImageCms.getProfileInfo(profile)
PIL.ImageCms.getProfileName(profile)
PIL.ImageCms.get_display_profile(handle=None)
PIL.ImageCms.isIntentSupported(profile,intent,direction)
PIL.ImageCms.profileToProfile(im,inputProfile,outputProfile,renderingIntent=INTENT_PERCEPTUAL,outputMode=None,inPlace=0,flags=0)
PIL.ImageCms.versions()


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/GribStubImagePlugin.py----------------------------------------
A:PIL.GribStubImagePlugin.offset->self.fp.tell()
A:PIL.GribStubImagePlugin.loader->self._load()
PIL.GribStubImagePlugin.GribStubImageFile(ImageFile.StubImageFile)
PIL.GribStubImagePlugin.GribStubImageFile._load(self)
PIL.GribStubImagePlugin.GribStubImageFile._open(self)
PIL.GribStubImagePlugin._accept(prefix)
PIL.GribStubImagePlugin._save(im,fp,filename)
PIL.GribStubImagePlugin.register_handler(handler)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/GifImagePlugin.py----------------------------------------
A:PIL.GifImagePlugin.s->self.fp.read(9)
A:PIL.GifImagePlugin.flags->i8(s[8])
A:PIL.GifImagePlugin.self.info['background']->i8(s[11])
A:PIL.GifImagePlugin.p->PIL.ImagePalette.raw('RGB', p)
A:PIL.GifImagePlugin.self.__rewind->self.fp.tell()
A:PIL.GifImagePlugin.block->self.data()
A:PIL.GifImagePlugin.self.info['transparency']->i8(block[3])
A:PIL.GifImagePlugin.self.dispose->self.im.copy()
A:PIL.GifImagePlugin.self.info['loop']->i16(block[1:3])
A:PIL.GifImagePlugin.self.palette->PIL.ImagePalette.raw('RGB', self.fp.read(3 << bits))
A:PIL.GifImagePlugin.bits->i8(self.fp.read(1))
A:PIL.GifImagePlugin.self.__offset->self.fp.tell()
A:PIL.GifImagePlugin.imOut->im.convert('L')
A:PIL.GifImagePlugin.file->im._dump()
A:PIL.GifImagePlugin.fp->collector()
PIL.GifImagePlugin.GifImageFile(ImageFile.ImageFile)
PIL.GifImagePlugin.GifImageFile._open(self)
PIL.GifImagePlugin.GifImageFile.data(self)
PIL.GifImagePlugin.GifImageFile.seek(self,frame)
PIL.GifImagePlugin.GifImageFile.tell(self)
PIL.GifImagePlugin._accept(prefix)
PIL.GifImagePlugin._save(im,fp,filename)
PIL.GifImagePlugin._save_netpbm(im,fp,filename)
PIL.GifImagePlugin.getdata(im,offset=(0,0),**params)
PIL.GifImagePlugin.getheader(im,palette=None,info=None)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/GdImageFile.py----------------------------------------
A:PIL.GdImageFile.s->self.fp.read(775)
A:PIL.GdImageFile.tindex->i16(s[5:7])
A:PIL.GdImageFile.self.palette->PIL.ImagePalette.raw('RGB', s[7:])
A:PIL.GdImageFile.fp->builtins.open(fp, 'rb')
PIL.GdImageFile.GdImageFile(ImageFile.ImageFile)
PIL.GdImageFile.GdImageFile._open(self)
PIL.GdImageFile.open(fp,mode='r')


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/JpegPresets.py----------------------------------------


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageTransform.py----------------------------------------
A:PIL.ImageTransform.(method, data)->self.getdata()
PIL.ImageTransform.AffineTransform(Transform)
PIL.ImageTransform.ExtentTransform(Transform)
PIL.ImageTransform.MeshTransform(Transform)
PIL.ImageTransform.QuadTransform(Transform)
PIL.ImageTransform.Transform(self,data)
PIL.ImageTransform.Transform.__init__(self,data)
PIL.ImageTransform.Transform.getdata(self)
PIL.ImageTransform.Transform.transform(self,size,image,**options)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/GimpGradientFile.py----------------------------------------
A:PIL.GimpGradientFile.scale->segment((xm - x0) / w, (x - x0) / w)
A:PIL.GimpGradientFile.r->o8(int(255 * ((rgb1[0] - rgb0[0]) * scale + rgb0[0]) + 0.5))
A:PIL.GimpGradientFile.g->o8(int(255 * ((rgb1[1] - rgb0[1]) * scale + rgb0[1]) + 0.5))
A:PIL.GimpGradientFile.b->o8(int(255 * ((rgb1[2] - rgb0[2]) * scale + rgb0[2]) + 0.5))
A:PIL.GimpGradientFile.a->o8(int(255 * ((rgb1[3] - rgb0[3]) * scale + rgb0[3]) + 0.5))
A:PIL.GimpGradientFile.count->int(fp.readline())
A:PIL.GimpGradientFile.s->fp.readline().split()
A:PIL.GimpGradientFile.cspace->int(s[12])
PIL.GimpGradientFile.GimpGradientFile(self,fp)
PIL.GimpGradientFile.GimpGradientFile.__init__(self,fp)
PIL.GimpGradientFile.GradientFile
PIL.GimpGradientFile.GradientFile.getpalette(self,entries=256)
PIL.GimpGradientFile.curved(middle,pos)
PIL.GimpGradientFile.linear(middle,pos)
PIL.GimpGradientFile.sine(middle,pos)
PIL.GimpGradientFile.sphere_decreasing(middle,pos)
PIL.GimpGradientFile.sphere_increasing(middle,pos)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/XpmImagePlugin.py----------------------------------------
A:PIL.XpmImagePlugin.xpm_head->re.compile(b'"([0-9]*) ([0-9]*) ([0-9]*) ([0-9]*)')
A:PIL.XpmImagePlugin.s->s[2:-2].split()
A:PIL.XpmImagePlugin.m->re.compile(b'"([0-9]*) ([0-9]*) ([0-9]*) ([0-9]*)').match(s)
A:PIL.XpmImagePlugin.pal->int(m.group(3))
A:PIL.XpmImagePlugin.bpp->int(m.group(4))
A:PIL.XpmImagePlugin.c->i8(s[1])
A:PIL.XpmImagePlugin.rgb->int(rgb[1:], 16)
A:PIL.XpmImagePlugin.self.palette->PIL.ImagePalette.raw('RGB', b''.join(palette))
A:PIL.XpmImagePlugin.s[i]->self.fp.readline()[1:xsize + 1].ljust(xsize)
PIL.XpmImagePlugin.XpmImageFile(ImageFile.ImageFile)
PIL.XpmImagePlugin.XpmImageFile._open(self)
PIL.XpmImagePlugin.XpmImageFile.load_read(self,bytes)
PIL.XpmImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageWin.py----------------------------------------
A:PIL.ImageWin.mode->PIL.Image.getmodebase(mode)
A:PIL.ImageWin.self.image->PIL.Image.core.display(mode, size)
A:PIL.ImageWin.dc->self.image.getdc(handle)
A:PIL.ImageWin.result->self.image.query_palette(handle)
A:PIL.ImageWin.handle->self.image.getdc(handle)
A:PIL.ImageWin.im->im.convert(self.mode).convert(self.mode)
A:PIL.ImageWin.self.hwnd->PIL.Image.core.createwindow(title, self.__dispatcher, width or 0, height or 0)
A:PIL.ImageWin.image->Dib(image)
PIL.ImageWin.Dib(self,image,size=None)
PIL.ImageWin.Dib.__init__(self,image,size=None)
PIL.ImageWin.Dib.draw(self,handle,dst,src=None)
PIL.ImageWin.Dib.expose(self,handle)
PIL.ImageWin.Dib.frombytes(self,buffer)
PIL.ImageWin.Dib.fromstring(self,*args,**kw)
PIL.ImageWin.Dib.paste(self,im,box=None)
PIL.ImageWin.Dib.query_palette(self,handle)
PIL.ImageWin.Dib.tobytes(self)
PIL.ImageWin.Dib.tostring(self)
PIL.ImageWin.HDC(self,dc)
PIL.ImageWin.HDC.__init__(self,dc)
PIL.ImageWin.HDC.__int__(self)
PIL.ImageWin.HWND(self,wnd)
PIL.ImageWin.HWND.__init__(self,wnd)
PIL.ImageWin.HWND.__int__(self)
PIL.ImageWin.ImageWindow(self,image,title='PIL')
PIL.ImageWin.ImageWindow.__init__(self,image,title='PIL')
PIL.ImageWin.ImageWindow.ui_handle_repair(self,dc,x0,y0,x1,y1)
PIL.ImageWin.Window(self,title='PIL',width=None,height=None)
PIL.ImageWin.Window.__dispatcher(self,action,*args)
PIL.ImageWin.Window.__init__(self,title='PIL',width=None,height=None)
PIL.ImageWin.Window.mainloop(self)
PIL.ImageWin.Window.ui_handle_clear(self,dc,x0,y0,x1,y1)
PIL.ImageWin.Window.ui_handle_damage(self,x0,y0,x1,y1)
PIL.ImageWin.Window.ui_handle_destroy(self)
PIL.ImageWin.Window.ui_handle_repair(self,dc,x0,y0,x1,y1)
PIL.ImageWin.Window.ui_handle_resize(self,width,height)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/IcoImagePlugin.py----------------------------------------
A:PIL.IcoImagePlugin.s->self.fp.read(16)
PIL.IcoImagePlugin.IcoImageFile(BmpImagePlugin.BmpImageFile)
PIL.IcoImagePlugin.IcoImageFile._open(self)
PIL.IcoImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/Image.py----------------------------------------
A:PIL.Image.core->_imaging_not_installed()
A:PIL.Image.MODES->sorted(_MODEINFO.keys())
A:PIL.Image.fullpath->os.path.abspath(directory)
A:PIL.Image.(f, e)->os.path.splitext(file)
A:PIL.Image.decoder->getattr(core, decoder_name + '_decoder')
A:PIL.Image.encoder->getattr(core, encoder_name + '_encoder')
A:PIL.Image.new->Image()
A:PIL.Image.new.palette->PIL.ImagePalette.ImagePalette()
A:PIL.Image.new.info->self.info.copy()
A:PIL.Image.self.im->self.im.crop(self.__crop)
A:PIL.Image.file->tempfile.mktemp()
A:PIL.Image.(shape, typestr)->_conv_type_shape(self)
A:PIL.Image.new['data']->self.tobytes()
A:PIL.Image.e->_getencoder(self.mode, encoder_name, args)
A:PIL.Image.bufsize->max(65536, self.size[0] * 4)
A:PIL.Image.(l, s, d)->_getencoder(self.mode, encoder_name, args).encode(bufsize)
A:PIL.Image.data->bytes(data)
A:PIL.Image.d->_getdecoder(self.mode, decoder_name, args)
A:PIL.Image.s->_getdecoder(self.mode, decoder_name, args).decode(data)
A:PIL.Image.im->_imaging_not_installed().new(mode, bands[0].size)
A:PIL.Image.filter->filter()
A:PIL.Image.h->int(math.ceil(max(yy)) - math.floor(min(yy)))
A:PIL.Image.(x, y)->transform(w / 2.0, h / 2.0)
A:PIL.Image.extrema->self.getextrema()
A:PIL.Image.(scale, offset)->_getscaleoffset(lut)
A:PIL.Image.alpha->new('L', self.size, alpha)
A:PIL.Image.palette->PIL.ImagePalette.raw(rawmode, data)
A:PIL.Image.w->int(math.ceil(max(xx)) - math.floor(min(xx)))
A:PIL.Image.ext->os.path.splitext(filename)[1].lower()
A:PIL.Image.fp->builtins.open(fp, 'rb')
A:PIL.Image.y->int(size[1])
A:PIL.Image.x->int(max(x * size[1] / y, 1))
A:PIL.Image.(method, data)->method.getdata()
A:PIL.Image.color->PIL.ImageColor.getcolor(color, mode)
A:PIL.Image.ndim->len(shape)
A:PIL.Image.obj->obj.tobytes().tobytes()
A:PIL.Image.prefix->builtins.open(fp, 'rb').read(16)
A:PIL.Image.image->image2.copy()
A:PIL.Image.id->id.upper().upper()
A:PIL.Image.EXTENSION[extension.lower()]->id.upper().upper().upper()
PIL.Image.Image(self)
PIL.Image.Image.__getattr__(self,name)
PIL.Image.Image.__init__(self)
PIL.Image.Image.__repr__(self)
PIL.Image.Image.__transformer(self,box,image,method,data,resample=NEAREST,fill=1)
PIL.Image.Image._copy(self)
PIL.Image.Image._dump(self,file=None,format=None)
PIL.Image.Image._expand(self,xmargin,ymargin=None)
PIL.Image.Image._new(self,im)
PIL.Image.Image.convert(self,mode=None,data=None,dither=None,palette=WEB,colors=256)
PIL.Image.Image.copy(self)
PIL.Image.Image.crop(self,box=None)
PIL.Image.Image.draft(self,mode,size)
PIL.Image.Image.filter(self,filter)
PIL.Image.Image.frombytes(self,data,decoder_name='raw',*args)
PIL.Image.Image.fromstring(self,*args,**kw)
PIL.Image.Image.getbands(self)
PIL.Image.Image.getbbox(self)
PIL.Image.Image.getcolors(self,maxcolors=256)
PIL.Image.Image.getdata(self,band=None)
PIL.Image.Image.getextrema(self)
PIL.Image.Image.getim(self)
PIL.Image.Image.getpalette(self)
PIL.Image.Image.getpixel(self,xy)
PIL.Image.Image.getprojection(self)
PIL.Image.Image.histogram(self,mask=None,extrema=None)
PIL.Image.Image.load(self)
PIL.Image.Image.offset(self,xoffset,yoffset=None)
PIL.Image.Image.paste(self,im,box=None,mask=None)
PIL.Image.Image.point(self,lut,mode=None)
PIL.Image.Image.putalpha(self,alpha)
PIL.Image.Image.putdata(self,data,scale=1.0,offset=0.0)
PIL.Image.Image.putpalette(self,data,rawmode='RGB')
PIL.Image.Image.putpixel(self,xy,value)
PIL.Image.Image.quantize(self,colors=256,method=0,kmeans=0,palette=None)
PIL.Image.Image.resize(self,size,resample=NEAREST)
PIL.Image.Image.rotate(self,angle,resample=NEAREST,expand=0)
PIL.Image.Image.save(self,fp,format=None,**params)
PIL.Image.Image.seek(self,frame)
PIL.Image.Image.show(self,title=None,command=None)
PIL.Image.Image.split(self)
PIL.Image.Image.tell(self)
PIL.Image.Image.thumbnail(self,size,resample=NEAREST)
PIL.Image.Image.tobitmap(self,name='image')
PIL.Image.Image.tobytes(self,encoder_name='raw',*args)
PIL.Image.Image.tostring(self,*args,**kw)
PIL.Image.Image.transform(self,size,method,data=None,resample=NEAREST,fill=1)
PIL.Image.Image.transpose(self,method)
PIL.Image.Image.verify(self)
PIL.Image.ImagePointHandler
PIL.Image.ImageTransformHandler
PIL.Image._E(self,data)
PIL.Image._E.__add__(self,other)
PIL.Image._E.__init__(self,data)
PIL.Image._E.__mul__(self,other)
PIL.Image._ImageCrop(self,im,box)
PIL.Image._ImageCrop.__init__(self,im,box)
PIL.Image._ImageCrop.load(self)
PIL.Image._conv_type_shape(im)
PIL.Image._getdecoder(mode,decoder_name,args,extra=())
PIL.Image._getencoder(mode,encoder_name,args,extra=())
PIL.Image._getscaleoffset(expr)
PIL.Image._imaging_not_installed
PIL.Image._imaging_not_installed.__getattr__(self,id)
PIL.Image._show(image,**options)
PIL.Image._showxv(image,title=None,**options)
PIL.Image._wedge()
PIL.Image.alpha_composite(im1,im2)
PIL.Image.blend(im1,im2,alpha)
PIL.Image.coerce_e(value)
PIL.Image.composite(image1,image2,mask)
PIL.Image.eval(image,*args)
PIL.Image.fromarray(obj,mode=None)
PIL.Image.frombuffer(mode,size,data,decoder_name='raw',*args)
PIL.Image.frombytes(mode,size,data,decoder_name='raw',*args)
PIL.Image.fromstring(*args,**kw)
PIL.Image.getmodebandnames(mode)
PIL.Image.getmodebands(mode)
PIL.Image.getmodebase(mode)
PIL.Image.getmodetype(mode)
PIL.Image.init()
PIL.Image.isDirectory(f)
PIL.Image.isImageType(t)
PIL.Image.merge(mode,bands)
PIL.Image.new(mode,size,color=0)
PIL.Image.open(fp,mode='r')
PIL.Image.preinit()
PIL.Image.register_extension(id,extension)
PIL.Image.register_mime(id,mimetype)
PIL.Image.register_open(id,factory,accept=None)
PIL.Image.register_save(id,driver)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/PngImagePlugin.py----------------------------------------
A:PIL.PngImagePlugin._simple_palette->re.compile(b'^\xff+\x00+$')
A:PIL.PngImagePlugin.s->PIL.ImageFile._safe_read(self.fp, len)
A:PIL.PngImagePlugin.pos->self.fp.tell()
A:PIL.PngImagePlugin.len->i32(s)
A:PIL.PngImagePlugin.crc1->PIL.Image.core.crc32(data, Image.core.crc32(cid))
A:PIL.PngImagePlugin.(cid, pos, len)->self.png.read()
A:PIL.PngImagePlugin.key->key.encode('latin-1', 'strict').encode('latin-1', 'strict')
A:PIL.PngImagePlugin.value->value.encode('latin-1', 'replace').encode('latin-1', 'replace')
A:PIL.PngImagePlugin.i->PIL.ImageFile._safe_read(self.fp, len).find(b'\x00')
A:PIL.PngImagePlugin.comp_method->i8(v[0])
A:PIL.PngImagePlugin.icc_profile->zlib.decompress(s[i + 2:])
A:PIL.PngImagePlugin.self.im_info['transparency']->i16(s)
A:PIL.PngImagePlugin.unit->i8(s[8])
A:PIL.PngImagePlugin.(k, v)->PIL.ImageFile._safe_read(self.fp, len).split(b'\x00', 1)
A:PIL.PngImagePlugin.k->k.decode('latin-1', 'strict').decode('latin-1', 'strict')
A:PIL.PngImagePlugin.v->v.decode('latin-1', 'replace').decode('latin-1', 'replace')
A:PIL.PngImagePlugin.self.png->PngStream(self.fp)
A:PIL.PngImagePlugin.self.palette->PIL.ImagePalette.raw(rawmode, data)
A:PIL.PngImagePlugin.bytes->min(bytes, self.__idat)
A:PIL.PngImagePlugin.data->b''.join(data)
A:PIL.PngImagePlugin.(hi, lo)->PIL.Image.core.crc32(data, Image.core.crc32(cid))
A:PIL.PngImagePlugin.transparency->max(0, min(65535, im.encoderinfo['transparency']))
A:PIL.PngImagePlugin.alpha->im.im.getpalette('RGBA', 'A')
A:PIL.PngImagePlugin.dpi->im.encoderinfo.get('dpi')
A:PIL.PngImagePlugin.info->im.encoderinfo.get('pnginfo')
A:PIL.PngImagePlugin.p->ICCProfile.ICCProfile(im.info['icc_profile'])
A:PIL.PngImagePlugin.fp->collector()
PIL.PngImagePlugin.ChunkStream(self,fp)
PIL.PngImagePlugin.ChunkStream.__init__(self,fp)
PIL.PngImagePlugin.ChunkStream.call(self,cid,pos,len)
PIL.PngImagePlugin.ChunkStream.close(self)
PIL.PngImagePlugin.ChunkStream.crc(self,cid,data)
PIL.PngImagePlugin.ChunkStream.crc_skip(self,cid,data)
PIL.PngImagePlugin.ChunkStream.push(self,cid,pos,len)
PIL.PngImagePlugin.ChunkStream.read(self)
PIL.PngImagePlugin.ChunkStream.verify(self,endchunk=b'IEND')
PIL.PngImagePlugin.PngImageFile(ImageFile.ImageFile)
PIL.PngImagePlugin.PngImageFile._open(self)
PIL.PngImagePlugin.PngImageFile.load_end(self)
PIL.PngImagePlugin.PngImageFile.load_prepare(self)
PIL.PngImagePlugin.PngImageFile.load_read(self,bytes)
PIL.PngImagePlugin.PngImageFile.verify(self)
PIL.PngImagePlugin.PngInfo(self)
PIL.PngImagePlugin.PngInfo.__init__(self)
PIL.PngImagePlugin.PngInfo.add(self,cid,data)
PIL.PngImagePlugin.PngInfo.add_text(self,key,value,zip=0)
PIL.PngImagePlugin.PngStream(self,fp)
PIL.PngImagePlugin.PngStream.__init__(self,fp)
PIL.PngImagePlugin.PngStream.chunk_IDAT(self,pos,len)
PIL.PngImagePlugin.PngStream.chunk_IEND(self,pos,len)
PIL.PngImagePlugin.PngStream.chunk_IHDR(self,pos,len)
PIL.PngImagePlugin.PngStream.chunk_PLTE(self,pos,len)
PIL.PngImagePlugin.PngStream.chunk_gAMA(self,pos,len)
PIL.PngImagePlugin.PngStream.chunk_iCCP(self,pos,len)
PIL.PngImagePlugin.PngStream.chunk_pHYs(self,pos,len)
PIL.PngImagePlugin.PngStream.chunk_tEXt(self,pos,len)
PIL.PngImagePlugin.PngStream.chunk_tRNS(self,pos,len)
PIL.PngImagePlugin.PngStream.chunk_zTXt(self,pos,len)
PIL.PngImagePlugin._accept(prefix)
PIL.PngImagePlugin._idat(self,fp,chunk)
PIL.PngImagePlugin._idat.__init__(self,fp,chunk)
PIL.PngImagePlugin._idat.write(self,data)
PIL.PngImagePlugin._save(im,fp,filename,chunk=putchunk,check=0)
PIL.PngImagePlugin.getchunks(im,**params)
PIL.PngImagePlugin.putchunk(fp,cid,*data)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/SgiImagePlugin.py----------------------------------------
A:PIL.SgiImagePlugin.s->self.fp.read(512)
A:PIL.SgiImagePlugin.compression->i8(s[2])
PIL.SgiImagePlugin.SgiImageFile(ImageFile.ImageFile)
PIL.SgiImagePlugin.SgiImageFile._open(self)
PIL.SgiImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/OleFileIO.py----------------------------------------
A:PIL.OleFileIO.data->b''.join(data)
A:PIL.OleFileIO.self.fp->open(filename, 'rb')
A:PIL.OleFileIO.header->self.fp.read(512)
A:PIL.OleFileIO.clsid->self._clsid(s[8:24])
A:PIL.OleFileIO.self.minisectorcutoff->i32(header, 56)
A:PIL.OleFileIO.self.minifatsect->i32(header, 60)
A:PIL.OleFileIO.ix->i32(sect, i)
A:PIL.OleFileIO.s->self.openstream(filename).read(20)
A:PIL.OleFileIO.fp->self.openstream(filename)
A:PIL.OleFileIO.entry->self.openstream(filename).read(128)
A:PIL.OleFileIO.type->i32(s, offset)
A:PIL.OleFileIO.name->self._unicode(entry[0:0 + i16(entry, 64)])
A:PIL.OleFileIO.self.root->_OleDirectoryEntry(self.sidlist, 0)
A:PIL.OleFileIO.self.ministream->self._open(self.sidlist[0][2])
A:PIL.OleFileIO.slot->self._find(filename)
A:PIL.OleFileIO.fmtid->self._clsid(s[:16])
A:PIL.OleFileIO.id->i32(s, 8 + i * 8)
A:PIL.OleFileIO.offset->i32(s, 12 + i * 8)
A:PIL.OleFileIO.value->self._clsid(s[offset + 4:offset + 20])
A:PIL.OleFileIO.count->i32(s, offset + 4)
A:PIL.OleFileIO.ole->OleFileIO(file)
A:PIL.OleFileIO.props->sorted(props.items())
PIL.OleFileIO.OleFileIO(self,filename=None)
PIL.OleFileIO.OleFileIO.__init__(self,filename=None)
PIL.OleFileIO.OleFileIO._clsid(self,clsid)
PIL.OleFileIO.OleFileIO._find(self,filename)
PIL.OleFileIO.OleFileIO._list(self,files,prefix,node)
PIL.OleFileIO.OleFileIO._open(self,start,size=2147483647)
PIL.OleFileIO.OleFileIO._unicode(self,s)
PIL.OleFileIO.OleFileIO.dumpdirectory(self)
PIL.OleFileIO.OleFileIO.getproperties(self,filename)
PIL.OleFileIO.OleFileIO.getsect(self,sect)
PIL.OleFileIO.OleFileIO.listdir(self)
PIL.OleFileIO.OleFileIO.loaddirectory(self,sect)
PIL.OleFileIO.OleFileIO.loadfat(self,header)
PIL.OleFileIO.OleFileIO.loadminifat(self)
PIL.OleFileIO.OleFileIO.open(self,filename)
PIL.OleFileIO.OleFileIO.openstream(self,filename)
PIL.OleFileIO._OleDirectoryEntry(self,sidlist,sid)
PIL.OleFileIO._OleDirectoryEntry.__cmp__(self,other)
PIL.OleFileIO._OleDirectoryEntry.__init__(self,sidlist,sid)
PIL.OleFileIO._OleDirectoryEntry.dump(self,tab=0)
PIL.OleFileIO._OleStream(self,fp,sect,size,offset,sectorsize,fat)
PIL.OleFileIO._OleStream.__init__(self,fp,sect,size,offset,sectorsize,fat)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/JpegImagePlugin.py----------------------------------------
A:PIL.JpegImagePlugin.s->self.fp.read(1)
A:PIL.JpegImagePlugin.self.info['jfif']version->i16(s, 5)
A:PIL.JpegImagePlugin.self.info['jfif_version']->divmod(version, 256)
A:PIL.JpegImagePlugin.jfif_unit->i8(s[7])
A:PIL.JpegImagePlugin.self.info['adobe']->i16(s, 5)
A:PIL.JpegImagePlugin.adobe_transform->i8(s[1])
A:PIL.JpegImagePlugin.self.bits->i8(s[0])
A:PIL.JpegImagePlugin.self.layers->i8(s[5])
A:PIL.JpegImagePlugin.icc_profile->PIL.TiffImagePlugin.ImageFileDirectory(head).get('icc_profile')
A:PIL.JpegImagePlugin.v->i8(s[0])
A:PIL.JpegImagePlugin.self.quantization[v & 15]->array.array('b', s[1:65])
A:PIL.JpegImagePlugin.i->i16(s)
A:PIL.JpegImagePlugin.scale->max(self.size[0] // size[0], self.size[1] // size[1])
A:PIL.JpegImagePlugin.file->im._dump()
A:PIL.JpegImagePlugin.self.im->PIL.Image.core.open_ppm(file)
A:PIL.JpegImagePlugin.head->im._dump().read(8)
A:PIL.JpegImagePlugin.info->PIL.TiffImagePlugin.ImageFileDirectory(head)
A:PIL.JpegImagePlugin.exif[key]->fixup(value)
A:PIL.JpegImagePlugin.gps[key]->fixup(value)
A:PIL.JpegImagePlugin.dpi->PIL.TiffImagePlugin.ImageFileDirectory(head).get('dpi', (0, 0))
A:PIL.JpegImagePlugin.quality->PIL.TiffImagePlugin.ImageFileDirectory(head).get('quality', 0)
A:PIL.JpegImagePlugin.subsampling->get_sampling(im)
A:PIL.JpegImagePlugin.qtables->validate_qtables(qtables)
A:PIL.JpegImagePlugin.table->array.array('b', table)
A:PIL.JpegImagePlugin.qtables[idx]->list(table)
A:PIL.JpegImagePlugin.size->struct.pack('>H', 2 + ICC_OVERHEAD_LEN + len(marker))
PIL.JpegImagePlugin.APP(self,marker)
PIL.JpegImagePlugin.COM(self,marker)
PIL.JpegImagePlugin.DQT(self,marker)
PIL.JpegImagePlugin.JpegImageFile(ImageFile.ImageFile)
PIL.JpegImagePlugin.JpegImageFile._getexif(self)
PIL.JpegImagePlugin.JpegImageFile._open(self)
PIL.JpegImagePlugin.JpegImageFile.draft(self,mode,size)
PIL.JpegImagePlugin.JpegImageFile.load_djpeg(self)
PIL.JpegImagePlugin.SOF(self,marker)
PIL.JpegImagePlugin.Skip(self,marker)
PIL.JpegImagePlugin._accept(prefix)
PIL.JpegImagePlugin._save(im,fp,filename)
PIL.JpegImagePlugin._save_cjpeg(im,fp,filename)
PIL.JpegImagePlugin.convert_dict_qtables(qtables)
PIL.JpegImagePlugin.get_sampling(im)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageMode.py----------------------------------------
A:PIL.ImageMode._modes[m]->ModeDescriptor(m, bands, basemode, basetype)
A:PIL.ImageMode._modes['LA']->ModeDescriptor('LA', ('L', 'A'), 'L', 'L')
A:PIL.ImageMode._modes['PA']->ModeDescriptor('PA', ('P', 'A'), 'RGB', 'L')
A:PIL.ImageMode._modes['I;16']->ModeDescriptor('I;16', 'I', 'L', 'L')
A:PIL.ImageMode._modes['I;16L']->ModeDescriptor('I;16L', 'I', 'L', 'L')
A:PIL.ImageMode._modes['I;16B']->ModeDescriptor('I;16B', 'I', 'L', 'L')
PIL.ImageMode.ModeDescriptor(self,mode,bands,basemode,basetype)
PIL.ImageMode.ModeDescriptor.__init__(self,mode,bands,basemode,basetype)
PIL.ImageMode.ModeDescriptor.__str__(self)
PIL.ImageMode.getmode(mode)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/FliImagePlugin.py----------------------------------------
A:PIL.FliImagePlugin.s->self.fp.read(4)
A:PIL.FliImagePlugin.magic->i16(s[4:6])
A:PIL.FliImagePlugin.duration->i32(s[16:20])
A:PIL.FliImagePlugin.self.palette->PIL.ImagePalette.raw('RGB', b''.join(palette))
A:PIL.FliImagePlugin.n->i8(s[1])
A:PIL.FliImagePlugin.framesize->i32(s)
PIL.FliImagePlugin.FliImageFile(ImageFile.ImageFile)
PIL.FliImagePlugin.FliImageFile._open(self)
PIL.FliImagePlugin.FliImageFile._palette(self,palette,shift)
PIL.FliImagePlugin.FliImageFile.seek(self,frame)
PIL.FliImagePlugin.FliImageFile.tell(self)
PIL.FliImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/FontFile.py----------------------------------------
A:PIL.FontFile.h->max(h, src[3] - src[1])
A:PIL.FontFile.maxwidth->max(maxwidth, w)
A:PIL.FontFile.self.bitmap->PIL.Image.new('1', (xsize, ysize))
A:PIL.FontFile.fp->open(os.path.splitext(filename)[0] + '.pil', 'wb')
A:PIL.FontFile.data->marshal.dumps((self.metrics, self.info))
PIL.FontFile.FontFile(self)
PIL.FontFile.FontFile.__getitem__(self,ix)
PIL.FontFile.FontFile.__init__(self)
PIL.FontFile.FontFile.compile(self)
PIL.FontFile.FontFile.save1(self,filename)
PIL.FontFile.FontFile.save2(self,filename)
PIL.FontFile.puti16(fp,values)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/GbrImagePlugin.py----------------------------------------
A:PIL.GbrImagePlugin.header_size->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.version->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.width->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.height->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.bytes->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.self.data->self.fp.read(width * height)
A:PIL.GbrImagePlugin.self.im->PIL.Image.core.new(self.mode, self.size)
PIL.GbrImagePlugin.GbrImageFile(ImageFile.ImageFile)
PIL.GbrImagePlugin.GbrImageFile._open(self)
PIL.GbrImagePlugin.GbrImageFile.load(self)
PIL.GbrImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageGrab.py----------------------------------------
A:PIL.ImageGrab.(size, data)->grabber()
A:PIL.ImageGrab.im->im.crop(bbox).crop(bbox)
A:PIL.ImageGrab.data->PIL.Image.core.grabclipboard(debug)
PIL.ImageGrab.grab(bbox=None)
PIL.ImageGrab.grabclipboard()


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/MspImagePlugin.py----------------------------------------
A:PIL.MspImagePlugin.s->self.fp.read(32)
PIL.MspImagePlugin.MspImageFile(ImageFile.ImageFile)
PIL.MspImagePlugin.MspImageFile._open(self)
PIL.MspImagePlugin._accept(prefix)
PIL.MspImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageQt.py----------------------------------------
A:PIL.ImageQt.im->PIL.Image.merge('RGBA', (b, g, r, a))
A:PIL.ImageQt.palette->PIL.Image.merge('RGBA', (b, g, r, a)).getpalette()
A:PIL.ImageQt.data->PIL.Image.merge('RGBA', (b, g, r, a)).tobytes('raw', 'BGRA')
A:PIL.ImageQt.(r, g, b, a)->PIL.Image.merge('RGBA', (b, g, r, a)).split()
PIL.ImageQt.ImageQt(self,im)
PIL.ImageQt.ImageQt.__init__(self,im)
PIL.ImageQt.rgb(r,g,b)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/XbmImagePlugin.py----------------------------------------
A:PIL.XbmImagePlugin.xbm_head->re.compile(b'\\s*#define[ \t]+[^_]*_width[ \t]+(?P<width>[0-9]+)[\r\n]+#define[ \t]+[^_]*_height[ \t]+(?P<height>[0-9]+)[\r\n]+(?P<hotspot>#define[ \t]+[^_]*_x_hot[ \t]+(?P<xhot>[0-9]+)[\r\n]+#define[ \t]+[^_]*_y_hot[ \t]+(?P<yhot>[0-9]+)[\r\n]+)?[\\000-\\377]*_bits\\[\\]')
A:PIL.XbmImagePlugin.m->re.compile(b'\\s*#define[ \t]+[^_]*_width[ \t]+(?P<width>[0-9]+)[\r\n]+#define[ \t]+[^_]*_height[ \t]+(?P<height>[0-9]+)[\r\n]+(?P<hotspot>#define[ \t]+[^_]*_x_hot[ \t]+(?P<xhot>[0-9]+)[\r\n]+#define[ \t]+[^_]*_y_hot[ \t]+(?P<yhot>[0-9]+)[\r\n]+)?[\\000-\\377]*_bits\\[\\]').match(self.fp.read(512))
A:PIL.XbmImagePlugin.xsize->int(m.group('width'))
A:PIL.XbmImagePlugin.ysize->int(m.group('height'))
A:PIL.XbmImagePlugin.hotspot->im.encoderinfo.get('hotspot')
PIL.XbmImagePlugin.XbmImageFile(ImageFile.ImageFile)
PIL.XbmImagePlugin.XbmImageFile._open(self)
PIL.XbmImagePlugin._accept(prefix)
PIL.XbmImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageSequence.py----------------------------------------
PIL.ImageSequence.Iterator(self,im)
PIL.ImageSequence.Iterator.__getitem__(self,ix)
PIL.ImageSequence.Iterator.__init__(self,im)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/PpmImagePlugin.py----------------------------------------
A:PIL.PpmImagePlugin.b_whitespace->string.whitespace.encode()
A:PIL.PpmImagePlugin.c->self.fp.read(1)
A:PIL.PpmImagePlugin.s->int(self._token(s))
PIL.PpmImagePlugin.PpmImageFile(ImageFile.ImageFile)
PIL.PpmImagePlugin.PpmImageFile._open(self)
PIL.PpmImagePlugin.PpmImageFile._token(self,s=b'')
PIL.PpmImagePlugin._accept(prefix)
PIL.PpmImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/WebPImagePlugin.py----------------------------------------
A:PIL.WebPImagePlugin.(data, width, height)->_webp.WebPDecodeRGB(self.fp.read())
A:PIL.WebPImagePlugin.self.fp->BytesIO(data)
A:PIL.WebPImagePlugin.quality->im.encoderinfo.get('quality', 80)
A:PIL.WebPImagePlugin.data->_webp.WebPEncodeRGB(im.tostring(), im.size[0], im.size[1], im.size[0] * 3, float(quality))
PIL.WebPImagePlugin.WebPImageFile(ImageFile.ImageFile)
PIL.WebPImagePlugin.WebPImageFile._open(self)
PIL.WebPImagePlugin._accept(prefix)
PIL.WebPImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImageEnhance.py----------------------------------------
A:PIL.ImageEnhance.self.degenerate->image.filter(ImageFilter.SMOOTH)
A:PIL.ImageEnhance.mean->int(ImageStat.Stat(image.convert('L')).mean[0] + 0.5)
PIL.ImageEnhance.Brightness(self,image)
PIL.ImageEnhance.Brightness.__init__(self,image)
PIL.ImageEnhance.Color(self,image)
PIL.ImageEnhance.Color.__init__(self,image)
PIL.ImageEnhance.Contrast(self,image)
PIL.ImageEnhance.Contrast.__init__(self,image)
PIL.ImageEnhance.Sharpness(self,image)
PIL.ImageEnhance.Sharpness.__init__(self,image)
PIL.ImageEnhance._Enhance
PIL.ImageEnhance._Enhance.enhance(self,factor)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/BdfFontFile.py----------------------------------------
A:PIL.BdfFontFile.s->fp.readline()
A:PIL.BdfFontFile.id->s[9:].strip().decode('ascii')
A:PIL.BdfFontFile.i->fp.readline().find(b' ')
A:PIL.BdfFontFile.props[s[:i].decode('ascii')]->s[i + 1:-1].decode('ascii')
A:PIL.BdfFontFile.bitmap->b''.join(bitmap)
A:PIL.BdfFontFile.im->PIL.Image.new('1', (x, y))
A:PIL.BdfFontFile.font->props['FONT'].split('-')
A:PIL.BdfFontFile.ascent->int(props['FONT_ASCENT'])
A:PIL.BdfFontFile.descent->int(props['FONT_DESCENT'])
A:PIL.BdfFontFile.fontname->';'.join(font[1:])
A:PIL.BdfFontFile.c->bdf_char(fp)
PIL.BdfFontFile.BdfFontFile(self,fp)
PIL.BdfFontFile.BdfFontFile.__init__(self,fp)
PIL.BdfFontFile.bdf_char(f)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/PcdImagePlugin.py----------------------------------------
A:PIL.PcdImagePlugin.s->self.fp.read(2048)
A:PIL.PcdImagePlugin.scale->max(self.size[0] / size[0], self.size[1] / size[1])
PIL.PcdImagePlugin.PcdImageFile(ImageFile.ImageFile)
PIL.PcdImagePlugin.PcdImageFile._open(self)
PIL.PcdImagePlugin.PcdImageFile.draft(self,mode,size)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/MicImagePlugin.py----------------------------------------
A:PIL.MicImagePlugin.self.ole->OleFileIO(self.fp)
A:PIL.MicImagePlugin.self.fp->self.ole.openstream(filename)
PIL.MicImagePlugin.MicImageFile(TiffImagePlugin.TiffImageFile)
PIL.MicImagePlugin.MicImageFile._open(self)
PIL.MicImagePlugin.MicImageFile.seek(self,frame)
PIL.MicImagePlugin.MicImageFile.tell(self)
PIL.MicImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL2.0.0/ImagePath.py----------------------------------------
PIL.ImagePath.Path(self,xy)
PIL.ImagePath.Path.__init__(self,xy)
PIL.ImagePath.Path.compact(self,distance=2)
PIL.ImagePath.Path.getbbox(self)
PIL.ImagePath.Path.map(self,function)
PIL.ImagePath.Path.tolist(self,flat=0)
PIL.ImagePath.Path.transform(self,matrix)

