
----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/PcxImagePlugin.py----------------------------------------
A:PIL.PcxImagePlugin.logger->logging.getLogger(__name__)
A:PIL.PcxImagePlugin.s->self.fp.read(769)
A:PIL.PcxImagePlugin.version->i8(s[1])
A:PIL.PcxImagePlugin.bits->i8(s[3])
A:PIL.PcxImagePlugin.planes->i8(s[65])
A:PIL.PcxImagePlugin.stride->i16(s, 66)
A:PIL.PcxImagePlugin.self.palette->ImagePalette.raw('RGB', s[1:])
PIL.PcxImagePlugin.PcxImageFile(ImageFile.ImageFile)
PIL.PcxImagePlugin.PcxImageFile._open(self)
PIL.PcxImagePlugin._accept(prefix)
PIL.PcxImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/FpxImagePlugin.py----------------------------------------
A:PIL.FpxImagePlugin.self.ole->olefile.OleFileIO(self.fp)
A:PIL.FpxImagePlugin.prop->self.ole.getproperties([f'Data Object Store {index:06d}', '\x05Image Contents'])
A:PIL.FpxImagePlugin.size->max(self.size)
A:PIL.FpxImagePlugin.bands->i32(s, 4)
A:PIL.FpxImagePlugin.fp->self.ole.openstream(stream)
A:PIL.FpxImagePlugin.s->self.ole.openstream(stream).read(i32(s, 12) * length)
A:PIL.FpxImagePlugin.offset->i32(s, 28)
A:PIL.FpxImagePlugin.length->i32(s, 32)
A:PIL.FpxImagePlugin.compression->i32(s, i + 8)
A:PIL.FpxImagePlugin.internal_color_conversion->i8(s[14])
A:PIL.FpxImagePlugin.jpeg_tables->i8(s[15])
A:PIL.FpxImagePlugin.self.fp->self.ole.openstream(self.stream[:2] + ['Subimage 0000 Data'])
PIL.FpxImagePlugin.FpxImageFile(ImageFile.ImageFile)
PIL.FpxImagePlugin.FpxImageFile._open(self)
PIL.FpxImagePlugin.FpxImageFile._open_index(self,index=1)
PIL.FpxImagePlugin.FpxImageFile._open_subimage(self,index=1,subimage=0)
PIL.FpxImagePlugin.FpxImageFile.load(self)
PIL.FpxImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/SunImagePlugin.py----------------------------------------
A:PIL.SunImagePlugin.s->self.fp.read(32)
A:PIL.SunImagePlugin.depth->i32(s[12:16])
A:PIL.SunImagePlugin.file_type->i32(s[20:24])
A:PIL.SunImagePlugin.palette_type->i32(s[24:28])
A:PIL.SunImagePlugin.palette_length->i32(s[28:32])
A:PIL.SunImagePlugin.self.palette->ImagePalette.raw('RGB;L', self.fp.read(palette_length))
A:PIL.SunImagePlugin.rawmode->rawmode.replace('L', 'P').replace('L', 'P')
PIL.SunImagePlugin.SunImageFile(ImageFile.ImageFile)
PIL.SunImagePlugin.SunImageFile._open(self)
PIL.SunImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/CurImagePlugin.py----------------------------------------
A:PIL.CurImagePlugin.offset->self.fp.tell()
A:PIL.CurImagePlugin.s->self.fp.read(16)
PIL.CurImagePlugin.CurImageFile(BmpImagePlugin.BmpImageFile)
PIL.CurImagePlugin.CurImageFile._open(self)
PIL.CurImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImageColor.py----------------------------------------
A:PIL.ImageColor.color->color.lower().lower()
A:PIL.ImageColor.rgb->hsv_to_rgb(float(m.group(1)) / 360.0, float(m.group(2)) / 100.0, float(m.group(3)) / 100.0)
A:PIL.ImageColor.colormap[color]rgb->getrgb(rgb)
A:PIL.ImageColor.m->re.match('rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)$', color)
PIL.ImageColor.getcolor(color,mode)
PIL.ImageColor.getrgb(color)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImageTk.py----------------------------------------
A:PIL.ImageTk.im->Image.new('RGBA', (photo.width(), photo.height()))
A:PIL.ImageTk.source->BytesIO(kw.pop('data'))
A:PIL.ImageTk.image->_get_image_from_kw(kw)
A:PIL.ImageTk.mode->Image.getmodebase(mode)
A:PIL.ImageTk.self.__photo->tkinter.BitmapImage(**kw)
A:PIL.ImageTk.block->_get_image_from_kw(kw).new_block(self.__mode, im.size)
A:PIL.ImageTk.ffi->FFI()
A:PIL.ImageTk.kw['data']->_get_image_from_kw(kw).tobitmap()
A:PIL.ImageTk.self.image->PhotoImage(im, master=master)
A:PIL.ImageTk.top->tkinter.Toplevel()
PIL.ImageTk.BitmapImage(self,image=None,**kw)
PIL.ImageTk.BitmapImage.__del__(self)
PIL.ImageTk.BitmapImage.__init__(self,image=None,**kw)
PIL.ImageTk.BitmapImage.__str__(self)
PIL.ImageTk.BitmapImage.height(self)
PIL.ImageTk.BitmapImage.width(self)
PIL.ImageTk.PhotoImage(self,image=None,size=None,**kw)
PIL.ImageTk.PhotoImage.__del__(self)
PIL.ImageTk.PhotoImage.__init__(self,image=None,size=None,**kw)
PIL.ImageTk.PhotoImage.__str__(self)
PIL.ImageTk.PhotoImage.height(self)
PIL.ImageTk.PhotoImage.paste(self,im,box=None)
PIL.ImageTk.PhotoImage.width(self)
PIL.ImageTk._get_image_from_kw(kw)
PIL.ImageTk._pilbitmap_check()
PIL.ImageTk._show(image,title)
PIL.ImageTk.getimage(photo)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImageDraw.py----------------------------------------
A:PIL.ImageDraw.self.draw->Image.core.draw(self.im, blend)
A:PIL.ImageDraw.self.ink->self.draw.draw_ink(-1)
A:PIL.ImageDraw.self.font->ImageFont.load_default()
A:PIL.ImageDraw.ink->getink(fill)
A:PIL.ImageDraw.fill->self.draw.draw_ink(fill)
A:PIL.ImageDraw.(ink, fill)->self._getink(fill)
A:PIL.ImageDraw.xy->_compute_regular_polygon_vertices(bounding_circle, n_sides, rotation)
A:PIL.ImageDraw.font->self.getfont()
A:PIL.ImageDraw.(mask, offset)->self.getfont().getmask2(text, mode, *args, direction=direction, features=features, language=language, stroke_width=stroke_width, anchor=anchor, ink=ink, **kwargs)
A:PIL.ImageDraw.mask->self.getfont().getmask(text)
A:PIL.ImageDraw.lines->self._multiline_split(text)
A:PIL.ImageDraw.line_width->self.textlength(line, font, direction=direction, features=features, language=language, embedded_color=embedded_color)
A:PIL.ImageDraw.max_width->max(max_width, line_width)
A:PIL.ImageDraw.(line_width, line_height)->self.textsize(line, font, spacing, direction, features, language, stroke_width)
A:PIL.ImageDraw.size->self.textsize(text, font, direction=direction, features=features, language=language)
A:PIL.ImageDraw.bbox->self.getfont().getbbox(text, mode, direction, features, language, stroke_width, anchor)
A:PIL.ImageDraw.bbox_line->self.textbbox((left, top), line, font, anchor, direction=direction, features=features, language=language, stroke_width=stroke_width, embedded_color=embedded_color)
A:PIL.ImageDraw.im->handler.Draw(im)
A:PIL.ImageDraw.pixel->image.load()
A:PIL.ImageDraw.full_edge->set()
A:PIL.ImageDraw.new_edge->set()
A:PIL.ImageDraw.angles->_get_angles(n_sides, rotation)
PIL.ImageDraw.Draw(im,mode=None)
PIL.ImageDraw.ImageDraw(self,im,mode=None)
PIL.ImageDraw.ImageDraw.__init__(self,im,mode=None)
PIL.ImageDraw.ImageDraw._getink(self,ink,fill=None)
PIL.ImageDraw.ImageDraw._multiline_check(self,text)
PIL.ImageDraw.ImageDraw._multiline_split(self,text)
PIL.ImageDraw.ImageDraw.arc(self,xy,start,end,fill=None,width=1)
PIL.ImageDraw.ImageDraw.bitmap(self,xy,bitmap,fill=None)
PIL.ImageDraw.ImageDraw.chord(self,xy,start,end,fill=None,outline=None,width=1)
PIL.ImageDraw.ImageDraw.ellipse(self,xy,fill=None,outline=None,width=1)
PIL.ImageDraw.ImageDraw.getfont(self)
PIL.ImageDraw.ImageDraw.line(self,xy,fill=None,width=0,joint=None)
PIL.ImageDraw.ImageDraw.multiline_text(self,xy,text,fill=None,font=None,anchor=None,spacing=4,align='left',direction=None,features=None,language=None,stroke_width=0,stroke_fill=None,embedded_color=False)
PIL.ImageDraw.ImageDraw.multiline_textbbox(self,xy,text,font=None,anchor=None,spacing=4,align='left',direction=None,features=None,language=None,stroke_width=0,embedded_color=False)
PIL.ImageDraw.ImageDraw.multiline_textsize(self,text,font=None,spacing=4,direction=None,features=None,language=None,stroke_width=0)
PIL.ImageDraw.ImageDraw.pieslice(self,xy,start,end,fill=None,outline=None,width=1)
PIL.ImageDraw.ImageDraw.point(self,xy,fill=None)
PIL.ImageDraw.ImageDraw.polygon(self,xy,fill=None,outline=None)
PIL.ImageDraw.ImageDraw.rectangle(self,xy,fill=None,outline=None,width=1)
PIL.ImageDraw.ImageDraw.regular_polygon(self,bounding_circle,n_sides,rotation=0,fill=None,outline=None)
PIL.ImageDraw.ImageDraw.shape(self,shape,fill=None,outline=None)
PIL.ImageDraw.ImageDraw.text(self,xy,text,fill=None,font=None,anchor=None,spacing=4,align='left',direction=None,features=None,language=None,stroke_width=0,stroke_fill=None,embedded_color=False,*args,**kwargs)
PIL.ImageDraw.ImageDraw.textbbox(self,xy,text,font=None,anchor=None,spacing=4,align='left',direction=None,features=None,language=None,stroke_width=0,embedded_color=False)
PIL.ImageDraw.ImageDraw.textlength(self,text,font=None,direction=None,features=None,language=None,embedded_color=False)
PIL.ImageDraw.ImageDraw.textsize(self,text,font=None,spacing=4,direction=None,features=None,language=None,stroke_width=0)
PIL.ImageDraw._color_diff(color1,color2)
PIL.ImageDraw._compute_regular_polygon_vertices(bounding_circle,n_sides,rotation)
PIL.ImageDraw.floodfill(image,xy,value,border=None,thresh=0)
PIL.ImageDraw.getdraw(im=None,hints=None)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/TarIO.py----------------------------------------
A:PIL.TarIO.self.fh->open(tarfile, 'rb')
A:PIL.TarIO.s->self.fh.read(512)
A:PIL.TarIO.name->s[:100].decode('utf-8')
A:PIL.TarIO.i->s[:100].decode('utf-8').find('\x00')
A:PIL.TarIO.size->int(s[124:135], 8)
PIL.TarIO.TarIO(self,tarfile,file)
PIL.TarIO.TarIO.__enter__(self)
PIL.TarIO.TarIO.__exit__(self,*args)
PIL.TarIO.TarIO.__init__(self,tarfile,file)
PIL.TarIO.TarIO.close(self)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/IptcImagePlugin.py----------------------------------------
A:PIL.IptcImagePlugin.s->self.fp.read(min(size, 8192))
A:PIL.IptcImagePlugin.size->i16(s[3:])
A:PIL.IptcImagePlugin.offset->self.fp.tell()
A:PIL.IptcImagePlugin.(tag, size)->self.field()
A:PIL.IptcImagePlugin.tagdata->self.fp.read(size)
A:PIL.IptcImagePlugin.layers->i8(self.info[3, 60][0])
A:PIL.IptcImagePlugin.component->i8(self.info[3, 60][1])
A:PIL.IptcImagePlugin.(o_fd, outfile)->tempfile.mkstemp(text=False)
A:PIL.IptcImagePlugin.o->os.fdopen(o_fd)
A:PIL.IptcImagePlugin.(type, size)->self.field()
A:PIL.IptcImagePlugin.photoshop->FakeImage().info.get('photoshop')
A:PIL.IptcImagePlugin.data->FakeImage().info.get('photoshop').get(1028)
A:PIL.IptcImagePlugin.im->FakeImage()
A:PIL.IptcImagePlugin.im.fp->io.BytesIO(data)
PIL.IptcImagePlugin.IptcImageFile(ImageFile.ImageFile)
PIL.IptcImagePlugin.IptcImageFile._open(self)
PIL.IptcImagePlugin.IptcImageFile.field(self)
PIL.IptcImagePlugin.IptcImageFile.getint(self,key)
PIL.IptcImagePlugin.IptcImageFile.load(self)
PIL.IptcImagePlugin.dump(c)
PIL.IptcImagePlugin.getiptcinfo(im)
PIL.IptcImagePlugin.i(c)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/_tkinter_finder.py----------------------------------------


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImImagePlugin.py----------------------------------------
A:PIL.ImImagePlugin.split->re.compile(b'^([A-Za-z][^:]*):[ \\t]*(.*)[ \\t]*$')
A:PIL.ImImagePlugin.s->self.fp.read(1)
A:PIL.ImImagePlugin.m->re.compile(b'^([A-Za-z][^:]*):[ \\t]*(.*)[ \\t]*$').match(s)
A:PIL.ImImagePlugin.(k, v)->re.compile(b'^([A-Za-z][^:]*):[ \\t]*(.*)[ \\t]*$').match(s).group(1, 2)
A:PIL.ImImagePlugin.k->k.decode('latin-1', 'replace').decode('latin-1', 'replace')
A:PIL.ImImagePlugin.v->tuple(map(number, v.split(',')))
A:PIL.ImImagePlugin.palette->self.fp.read(768)
A:PIL.ImImagePlugin.self.palette->ImagePalette.raw('RGB;L', palette)
A:PIL.ImImagePlugin.self.__offsetoffs->self.fp.tell()
A:PIL.ImImagePlugin.bits->int(self.rawmode[2:])
A:PIL.ImImagePlugin.frames->im.encoderinfo.get('frames', 1)
A:PIL.ImImagePlugin.(name, ext)->os.path.splitext(os.path.basename(filename))
A:PIL.ImImagePlugin.name->''.join([name[:92 - len(ext)], ext])
PIL.ImImagePlugin.ImImageFile(ImageFile.ImageFile)
PIL.ImImagePlugin.ImImageFile._close__fp(self)
PIL.ImImagePlugin.ImImageFile._open(self)
PIL.ImImagePlugin.ImImageFile.is_animated(self)
PIL.ImImagePlugin.ImImageFile.n_frames(self)
PIL.ImImagePlugin.ImImageFile.seek(self,frame)
PIL.ImImagePlugin.ImImageFile.tell(self)
PIL.ImImagePlugin._save(im,fp,filename)
PIL.ImImagePlugin.number(s)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/WmfImagePlugin.py----------------------------------------
A:PIL.WmfImagePlugin.s->self.fp.read(80)
A:PIL.WmfImagePlugin.self._inch->word(s, 14)
A:PIL.WmfImagePlugin.x0->_long(s, 8)
A:PIL.WmfImagePlugin.y0->_long(s, 12)
A:PIL.WmfImagePlugin.x1->_long(s, 16)
A:PIL.WmfImagePlugin.y1->_long(s, 20)
A:PIL.WmfImagePlugin.xdpi->int(2540.0 * (x1 - y0) / (frame[2] - frame[0]) + 0.5)
A:PIL.WmfImagePlugin.ydpi->int(2540.0 * (y1 - y0) / (frame[3] - frame[1]) + 0.5)
A:PIL.WmfImagePlugin.loader->self._load()
A:PIL.WmfImagePlugin.self.info['dpi']->int(dpi + 0.5)
PIL.WmfImagePlugin.WmfStubImageFile(ImageFile.StubImageFile)
PIL.WmfImagePlugin.WmfStubImageFile._load(self)
PIL.WmfImagePlugin.WmfStubImageFile._open(self)
PIL.WmfImagePlugin.WmfStubImageFile.load(self,dpi=None)
PIL.WmfImagePlugin._accept(prefix)
PIL.WmfImagePlugin._save(im,fp,filename)
PIL.WmfImagePlugin.register_handler(handler)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImageDraw2.py----------------------------------------
A:PIL.ImageDraw2.self.color->ImageColor.getrgb(color)
A:PIL.ImageDraw2.self.font->ImageFont.truetype(file, size)
A:PIL.ImageDraw2.image->Image.new(image, size, color)
A:PIL.ImageDraw2.self.draw->ImageDraw.Draw(image)
A:PIL.ImageDraw2.xy->ImagePath.Path(xy)
PIL.ImageDraw2.Brush(self,color,opacity=255)
PIL.ImageDraw2.Brush.__init__(self,color,opacity=255)
PIL.ImageDraw2.Draw(self,image,size=None,color=None)
PIL.ImageDraw2.Draw.__init__(self,image,size=None,color=None)
PIL.ImageDraw2.Draw.arc(self,xy,start,end,*options)
PIL.ImageDraw2.Draw.chord(self,xy,start,end,*options)
PIL.ImageDraw2.Draw.ellipse(self,xy,*options)
PIL.ImageDraw2.Draw.flush(self)
PIL.ImageDraw2.Draw.line(self,xy,*options)
PIL.ImageDraw2.Draw.pieslice(self,xy,start,end,*options)
PIL.ImageDraw2.Draw.polygon(self,xy,*options)
PIL.ImageDraw2.Draw.rectangle(self,xy,*options)
PIL.ImageDraw2.Draw.render(self,op,xy,pen,brush=None)
PIL.ImageDraw2.Draw.settransform(self,offset)
PIL.ImageDraw2.Draw.text(self,xy,text,font)
PIL.ImageDraw2.Draw.textsize(self,text,font)
PIL.ImageDraw2.Font(self,color,file,size=12)
PIL.ImageDraw2.Font.__init__(self,color,file,size=12)
PIL.ImageDraw2.Pen(self,color,width=1,opacity=255)
PIL.ImageDraw2.Pen.__init__(self,color,width=1,opacity=255)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/FitsStubImagePlugin.py----------------------------------------
A:PIL.FitsStubImagePlugin.offset->self.fp.tell()
A:PIL.FitsStubImagePlugin.loader->self._load()
PIL.FitsStubImagePlugin.FITSStubImageFile(ImageFile.StubImageFile)
PIL.FitsStubImagePlugin.FITSStubImageFile._load(self)
PIL.FitsStubImagePlugin.FITSStubImageFile._open(self)
PIL.FitsStubImagePlugin._accept(prefix)
PIL.FitsStubImagePlugin._save(im,fp,filename)
PIL.FitsStubImagePlugin.register_handler(handler)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/DdsImagePlugin.py----------------------------------------
A:PIL.DdsImagePlugin.(magic, header_size)->struct.unpack('<II', self.fp.read(8))
A:PIL.DdsImagePlugin.header_bytes->self.fp.read(header_size - 4)
A:PIL.DdsImagePlugin.header->BytesIO(header_bytes)
A:PIL.DdsImagePlugin.(flags, height, width)->struct.unpack('<3I', header.read(12))
A:PIL.DdsImagePlugin.(pitch, depth, mipmaps)->struct.unpack('<3I', header.read(12))
A:PIL.DdsImagePlugin.(pfsize, pfflags)->struct.unpack('<2I', header.read(8))
A:PIL.DdsImagePlugin.fourcc->BytesIO(header_bytes).read(4)
A:PIL.DdsImagePlugin.(bitcount,)->struct.unpack('<I', header.read(4))
A:PIL.DdsImagePlugin.masks->struct.unpack('<4I', header.read(16))
A:PIL.DdsImagePlugin.dxt10->BytesIO(self.fp.read(20))
A:PIL.DdsImagePlugin.(dxgi_format, dimension)->struct.unpack('<II', dxt10.read(8))
PIL.DdsImagePlugin.DdsImageFile(ImageFile.ImageFile)
PIL.DdsImagePlugin.DdsImageFile._open(self)
PIL.DdsImagePlugin.DdsImageFile.load_seek(self,pos)
PIL.DdsImagePlugin._validate(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/TgaImagePlugin.py----------------------------------------
A:PIL.TgaImagePlugin.s->self.fp.read(18)
A:PIL.TgaImagePlugin.id_len->len(id_section)
A:PIL.TgaImagePlugin.colormaptype->i8(s[1])
A:PIL.TgaImagePlugin.imagetype->i8(s[2])
A:PIL.TgaImagePlugin.depth->i8(s[16])
A:PIL.TgaImagePlugin.flags->i8(s[17])
A:PIL.TgaImagePlugin.self.info['id_section']->self.fp.read(id_len)
A:PIL.TgaImagePlugin.self.palette->ImagePalette.raw('BGRA', b'\x00' * 4 * start + self.fp.read(4 * size))
A:PIL.TgaImagePlugin.compression->im.encoderinfo.get('compression', im.info.get('compression'))
A:PIL.TgaImagePlugin.id_section->im.encoderinfo.get('id_section', im.info.get('id_section', ''))
A:PIL.TgaImagePlugin.orientation->im.encoderinfo.get('orientation', im.info.get('orientation', -1))
PIL.TgaImagePlugin.TgaImageFile(ImageFile.ImageFile)
PIL.TgaImagePlugin.TgaImageFile._open(self)
PIL.TgaImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ExifTags.py----------------------------------------


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/PixarImagePlugin.py----------------------------------------
A:PIL.PixarImagePlugin.s->self.fp.read(4)
PIL.PixarImagePlugin.PixarImageFile(ImageFile.ImageFile)
PIL.PixarImagePlugin.PixarImageFile._open(self)
PIL.PixarImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/MpoImagePlugin.py----------------------------------------
A:PIL.MpoImagePlugin.segment->self.fp.read(2)
A:PIL.MpoImagePlugin.self.info['exif']->ImageFile._safe_read(self.fp, n)
A:PIL.MpoImagePlugin.exif->self.getexif()
PIL.MpoImagePlugin.MpoImageFile(JpegImagePlugin.JpegImageFile)
PIL.MpoImagePlugin.MpoImageFile._after_jpeg_open(self,mpheader=None)
PIL.MpoImagePlugin.MpoImageFile._close__fp(self)
PIL.MpoImagePlugin.MpoImageFile._open(self)
PIL.MpoImagePlugin.MpoImageFile.adopt(jpeg_instance,mpheader=None)
PIL.MpoImagePlugin.MpoImageFile.load_seek(self,pos)
PIL.MpoImagePlugin.MpoImageFile.seek(self,frame)
PIL.MpoImagePlugin.MpoImageFile.tell(self)
PIL.MpoImagePlugin._accept(prefix)
PIL.MpoImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/PaletteFile.py----------------------------------------
A:PIL.PaletteFile.s->fp.readline()
A:PIL.PaletteFile.self.palette->b''.join(self.palette)
PIL.PaletteFile.PaletteFile(self,fp)
PIL.PaletteFile.PaletteFile.__init__(self,fp)
PIL.PaletteFile.PaletteFile.getpalette(self)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/_util.py----------------------------------------
PIL._util.deferred_error(self,ex)
PIL._util.deferred_error.__getattr__(self,elt)
PIL._util.deferred_error.__init__(self,ex)
PIL._util.isDirectory(f)
PIL._util.isPath(f)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/SpiderImagePlugin.py----------------------------------------
A:PIL.SpiderImagePlugin.i->int(f)
A:PIL.SpiderImagePlugin.iform->int(h[5])
A:PIL.SpiderImagePlugin.labrec->int(1024 / lenbyt)
A:PIL.SpiderImagePlugin.labbyt->int(h[22])
A:PIL.SpiderImagePlugin.lenbyt->int(h[23])
A:PIL.SpiderImagePlugin.f->self.fp.read(n)
A:PIL.SpiderImagePlugin.t->struct.unpack('<27f', f)
A:PIL.SpiderImagePlugin.hdrlen->isSpiderHeader(t)
A:PIL.SpiderImagePlugin.self.istack->int(h[24])
A:PIL.SpiderImagePlugin.self.imgnumber->int(h[27])
A:PIL.SpiderImagePlugin.self._nimages->int(h[26])
A:PIL.SpiderImagePlugin.(minimum, maximum)->self.getextrema()
A:PIL.SpiderImagePlugin.im->im.transpose(Image.FLIP_LEFT_RIGHT).transpose(Image.FLIP_LEFT_RIGHT)
A:PIL.SpiderImagePlugin.nvalues->int(labbyt / 4)
A:PIL.SpiderImagePlugin.hdr[2]->float(nrow)
A:PIL.SpiderImagePlugin.hdr[12]->float(nsam)
A:PIL.SpiderImagePlugin.hdr[13]->float(labrec)
A:PIL.SpiderImagePlugin.hdr[22]->float(labbyt)
A:PIL.SpiderImagePlugin.hdr[23]->float(lenbyt)
A:PIL.SpiderImagePlugin.hdr->makeSpiderHeader(im)
PIL.SpiderImagePlugin.SpiderImageFile(ImageFile.ImageFile)
PIL.SpiderImagePlugin.SpiderImageFile._close__fp(self)
PIL.SpiderImagePlugin.SpiderImageFile._open(self)
PIL.SpiderImagePlugin.SpiderImageFile.convert2byte(self,depth=255)
PIL.SpiderImagePlugin.SpiderImageFile.is_animated(self)
PIL.SpiderImagePlugin.SpiderImageFile.n_frames(self)
PIL.SpiderImagePlugin.SpiderImageFile.seek(self,frame)
PIL.SpiderImagePlugin.SpiderImageFile.tell(self)
PIL.SpiderImagePlugin.SpiderImageFile.tkPhotoImage(self)
PIL.SpiderImagePlugin._save(im,fp,filename)
PIL.SpiderImagePlugin._save_spider(im,fp,filename)
PIL.SpiderImagePlugin.isInt(f)
PIL.SpiderImagePlugin.isSpiderHeader(t)
PIL.SpiderImagePlugin.isSpiderImage(filename)
PIL.SpiderImagePlugin.loadImageSeries(filelist=None)
PIL.SpiderImagePlugin.makeSpiderHeader(im)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/MpegImagePlugin.py----------------------------------------
A:PIL.MpegImagePlugin.c->self.next()
A:PIL.MpegImagePlugin.v->self.peek(bits)
A:PIL.MpegImagePlugin.s->BitStream(self.fp)
PIL.MpegImagePlugin.BitStream(self,fp)
PIL.MpegImagePlugin.BitStream.__init__(self,fp)
PIL.MpegImagePlugin.BitStream.next(self)
PIL.MpegImagePlugin.BitStream.peek(self,bits)
PIL.MpegImagePlugin.BitStream.read(self,bits)
PIL.MpegImagePlugin.BitStream.skip(self,bits)
PIL.MpegImagePlugin.MpegImageFile(ImageFile.ImageFile)
PIL.MpegImagePlugin.MpegImageFile._open(self)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/Hdf5StubImagePlugin.py----------------------------------------
A:PIL.Hdf5StubImagePlugin.offset->self.fp.tell()
A:PIL.Hdf5StubImagePlugin.loader->self._load()
PIL.Hdf5StubImagePlugin.HDF5StubImageFile(ImageFile.StubImageFile)
PIL.Hdf5StubImagePlugin.HDF5StubImageFile._load(self)
PIL.Hdf5StubImagePlugin.HDF5StubImageFile._open(self)
PIL.Hdf5StubImagePlugin._accept(prefix)
PIL.Hdf5StubImagePlugin._save(im,fp,filename)
PIL.Hdf5StubImagePlugin.register_handler(handler)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImageShow.py----------------------------------------
A:PIL.ImageShow.viewer->viewer()
A:PIL.ImageShow.base->PIL.Image.getmodebase(image.mode)
A:PIL.ImageShow.image->image.convert(base).convert(base)
A:PIL.ImageShow.(fd, path)->tempfile.mkstemp()
PIL.ImageShow.DisplayViewer(UnixViewer)
PIL.ImageShow.DisplayViewer.get_command_ex(self,file,**options)
PIL.ImageShow.EogViewer(UnixViewer)
PIL.ImageShow.EogViewer.get_command_ex(self,file,**options)
PIL.ImageShow.MacViewer(Viewer)
PIL.ImageShow.MacViewer.get_command(self,file,**options)
PIL.ImageShow.MacViewer.show_file(self,file,**options)
PIL.ImageShow.UnixViewer(Viewer)
PIL.ImageShow.UnixViewer.get_command(self,file,**options)
PIL.ImageShow.UnixViewer.show_file(self,file,**options)
PIL.ImageShow.Viewer
PIL.ImageShow.Viewer.get_command(self,file,**options)
PIL.ImageShow.Viewer.get_format(self,image)
PIL.ImageShow.Viewer.save_image(self,image)
PIL.ImageShow.Viewer.show(self,image,**options)
PIL.ImageShow.Viewer.show_file(self,file,**options)
PIL.ImageShow.Viewer.show_image(self,image,**options)
PIL.ImageShow.WindowsViewer(Viewer)
PIL.ImageShow.WindowsViewer.get_command(self,file,**options)
PIL.ImageShow.XVViewer(UnixViewer)
PIL.ImageShow.XVViewer.get_command_ex(self,file,title=None,**options)
PIL.ImageShow.register(viewer,order=1)
PIL.ImageShow.show(image,title=None,**options)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/BufrStubImagePlugin.py----------------------------------------
A:PIL.BufrStubImagePlugin.offset->self.fp.tell()
A:PIL.BufrStubImagePlugin.loader->self._load()
PIL.BufrStubImagePlugin.BufrStubImageFile(ImageFile.StubImageFile)
PIL.BufrStubImagePlugin.BufrStubImageFile._load(self)
PIL.BufrStubImagePlugin.BufrStubImageFile._open(self)
PIL.BufrStubImagePlugin._accept(prefix)
PIL.BufrStubImagePlugin._save(im,fp,filename)
PIL.BufrStubImagePlugin.register_handler(handler)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/PcfFontFile.py----------------------------------------
A:PIL.PcfFontFile.magic->l32(fp.read(4))
A:PIL.PcfFontFile.count->l32(fp.read(4))
A:PIL.PcfFontFile.type->l32(fp.read(4))
A:PIL.PcfFontFile.self.info->self._load_properties()
A:PIL.PcfFontFile.metrics->self._load_metrics()
A:PIL.PcfFontFile.bitmaps->self._load_bitmaps(metrics)
A:PIL.PcfFontFile.encoding->self._load_encoding()
A:PIL.PcfFontFile.format->l32(fp.read(4))
A:PIL.PcfFontFile.(fp, format, i16, i32)->self._getformat(PCF_BDF_ENCODINGS)
A:PIL.PcfFontFile.nprops->i32(fp.read(4))
A:PIL.PcfFontFile.data->fp.read(bitmapsize)
A:PIL.PcfFontFile.k->sz(data, k)
A:PIL.PcfFontFile.v->sz(data, v)
A:PIL.PcfFontFile.left->i16(fp.read(2))
A:PIL.PcfFontFile.right->i16(fp.read(2))
A:PIL.PcfFontFile.width->i16(fp.read(2))
A:PIL.PcfFontFile.ascent->i16(fp.read(2))
A:PIL.PcfFontFile.descent->i16(fp.read(2))
A:PIL.PcfFontFile.attributes->i16(fp.read(2))
A:PIL.PcfFontFile.nbitmaps->i32(fp.read(4))
PIL.PcfFontFile.PcfFontFile(self,fp,charset_encoding='iso8859-1')
PIL.PcfFontFile.PcfFontFile.__init__(self,fp,charset_encoding='iso8859-1')
PIL.PcfFontFile.PcfFontFile._getformat(self,tag)
PIL.PcfFontFile.PcfFontFile._load_bitmaps(self,metrics)
PIL.PcfFontFile.PcfFontFile._load_encoding(self)
PIL.PcfFontFile.PcfFontFile._load_metrics(self)
PIL.PcfFontFile.PcfFontFile._load_properties(self)
PIL.PcfFontFile.sz(s,o)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImageStat.py----------------------------------------
A:PIL.ImageStat.self.h->image_or_list.histogram()
A:PIL.ImageStat.self.bands->list(range(len(self.h) // 256))
A:PIL.ImageStat.v->getattr(self, '_get' + id)()
A:PIL.ImageStat.n->min(n, i)
A:PIL.ImageStat.x->max(x, i)
PIL.ImageStat.Stat(self,image_or_list,mask=None)
PIL.ImageStat.Stat.__getattr__(self,id)
PIL.ImageStat.Stat.__init__(self,image_or_list,mask=None)
PIL.ImageStat.Stat._getcount(self)
PIL.ImageStat.Stat._getextrema(self)
PIL.ImageStat.Stat._getmean(self)
PIL.ImageStat.Stat._getmedian(self)
PIL.ImageStat.Stat._getrms(self)
PIL.ImageStat.Stat._getstddev(self)
PIL.ImageStat.Stat._getsum(self)
PIL.ImageStat.Stat._getsum2(self)
PIL.ImageStat.Stat._getvar(self)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/PdfParser.py----------------------------------------
A:PIL.PdfParser.keys->sorted(set(self.new_entries.keys()) | set(self.deleted_entries.keys()))
A:PIL.PdfParser.deleted_keys->sorted(set(self.deleted_entries.keys()))
A:PIL.PdfParser.startxref->f.tell()
A:PIL.PdfParser.this_deleted_object_id->sorted(set(self.deleted_entries.keys())).pop(0)
A:PIL.PdfParser.self.name->name.encode('us-ascii')
A:PIL.PdfParser.result->bytearray()
A:PIL.PdfParser.value->pdf_repr(value)
A:PIL.PdfParser.out->bytearray(b'<<')
A:PIL.PdfParser.x->x.replace(b')', b'\\)').replace(b')', b'\\)')
A:PIL.PdfParser.self.ff->open(filename, mode)
A:PIL.PdfParser.self.bufbuf->self.get_buf_from_file(f)
A:PIL.PdfParser.self.root->PdfDict(self.read_indirect(self.root_ref))
A:PIL.PdfParser.self.info->PdfDict(self.read_indirect(self.info_ref))
A:PIL.PdfParser.self.xref_table->XrefTable()
A:PIL.PdfParser.self.root_ref->self.next_object_id(self.f.tell())
A:PIL.PdfParser.self.pages_ref->self.next_object_id(0)
A:PIL.PdfParser.new_page_ref->self.write_page(None, **stringified_page_info)
A:PIL.PdfParser.pages_tree_node_ref->pages_tree_node.get(b'Parent', None)
A:PIL.PdfParser.self.info_ref->self.trailer_dict.get(b'Info', None)
A:PIL.PdfParser.start_xref->self.xref_table.write(self.f)
A:PIL.PdfParser.num_entries->len(self.xref_table)
A:PIL.PdfParser.dict_obj['Type']->PdfName(b'Page')
A:PIL.PdfParser.ref->self.next_object_id(f.tell())
A:PIL.PdfParser.stream->dict_obj.pop('stream', None)
A:PIL.PdfParser.dict_obj['Length']->len(stream)
A:PIL.PdfParser.self.file_size_total->len(self.buf)
A:PIL.PdfParser.self.page_tree_root->self.read_indirect(self.pages_ref)
A:PIL.PdfParser.self.pages->self.linearize_page_tree(self.page_tree_root)
A:PIL.PdfParser.reference->IndirectReference(1, 0)
A:PIL.PdfParser.re_trailer_end->re.compile(whitespace_mandatory + b'trailer' + whitespace_optional + b'\\<\\<(.*\\>\\>)' + newline + b'startxref' + newline + b'([0-9]+)' + newline + b'%%EOF' + whitespace_optional + b'$', re.DOTALL)
A:PIL.PdfParser.re_trailer_prev->re.compile(whitespace_optional + b'trailer' + whitespace_optional + b'\\<\\<(.*?\\>\\>)' + newline + b'startxref' + newline + b'([0-9]+)' + newline + b'%%EOF' + whitespace_optional, re.DOTALL)
A:PIL.PdfParser.m->self.re_xref_entry.match(self.buf, offset)
A:PIL.PdfParser.trailer_data->self.re_xref_entry.match(self.buf, offset).group(1)
A:PIL.PdfParser.self.last_xref_section_offset->int(m.group(2))
A:PIL.PdfParser.self.trailer_dict->self.interpret_trailer(trailer_data)
A:PIL.PdfParser.trailer_offset->self.read_xref_table(xref_section_offset=xref_section_offset)
A:PIL.PdfParser.trailer_dict->self.interpret_trailer(trailer_data)
A:PIL.PdfParser.re_whitespace_optional->re.compile(whitespace_optional)
A:PIL.PdfParser.re_name->re.compile(whitespace_optional + b"/([!-$&'*-.0-;=?-Z\\\\^-z|~]+)(?=" + delimiter_or_ws + b')')
A:PIL.PdfParser.re_dict_start->re.compile(whitespace_optional + b'\\<\\<')
A:PIL.PdfParser.re_dict_end->re.compile(whitespace_optional + b'\\>\\>' + whitespace_optional)
A:PIL.PdfParser.key->cls.interpret_name(m.group(1))
A:PIL.PdfParser.(value, offset)->cls.get_value(data, offset, max_nesting=max_nesting - 1)
A:PIL.PdfParser.re_hashes_in_name->re.compile(b'([^#]*)(#([0-9a-fA-F]{2}))?')
A:PIL.PdfParser.re_null->re.compile(whitespace_optional + b'null(?=' + delimiter_or_ws + b')')
A:PIL.PdfParser.re_true->re.compile(whitespace_optional + b'true(?=' + delimiter_or_ws + b')')
A:PIL.PdfParser.re_false->re.compile(whitespace_optional + b'false(?=' + delimiter_or_ws + b')')
A:PIL.PdfParser.re_int->re.compile(whitespace_optional + b'([-+]?[0-9]+)(?=' + delimiter_or_ws + b')')
A:PIL.PdfParser.re_real->re.compile(whitespace_optional + b'([-+]?([0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+))(?=' + delimiter_or_ws + b')')
A:PIL.PdfParser.re_array_start->re.compile(whitespace_optional + b'\\[')
A:PIL.PdfParser.re_array_end->re.compile(whitespace_optional + b']')
A:PIL.PdfParser.re_string_hex->re.compile(whitespace_optional + b'\\<(' + whitespace_or_hex + b'*)\\>')
A:PIL.PdfParser.re_string_lit->re.compile(whitespace_optional + b'\\(')
A:PIL.PdfParser.re_indirect_reference->re.compile(whitespace_optional + b'([-+]?[0-9]+)' + whitespace_mandatory + b'([-+]?[0-9]+)' + whitespace_mandatory + b'R(?=' + delimiter_or_ws + b')')
A:PIL.PdfParser.re_indirect_def_start->re.compile(whitespace_optional + b'([-+]?[0-9]+)' + whitespace_mandatory + b'([-+]?[0-9]+)' + whitespace_mandatory + b'obj(?=' + delimiter_or_ws + b')')
A:PIL.PdfParser.re_indirect_def_end->re.compile(whitespace_optional + b'endobj(?=' + delimiter_or_ws + b')')
A:PIL.PdfParser.re_comment->re.compile(b'(' + whitespace_optional + b'%[^\\r\\n]*' + newline + b')*')
A:PIL.PdfParser.re_stream_start->re.compile(whitespace_optional + b'stream\\r?\\n')
A:PIL.PdfParser.re_stream_end->re.compile(whitespace_optional + b'endstream(?=' + delimiter_or_ws + b')')
A:PIL.PdfParser.offset->self.re_xref_entry.match(self.buf, offset).end()
A:PIL.PdfParser.(object, offset)->cls.get_value(data, m.end(), max_nesting=max_nesting - 1)
A:PIL.PdfParser.(key, offset)->cls.get_value(data, offset, max_nesting=max_nesting - 1)
A:PIL.PdfParser.stream_len->int(result[b'Length'])
A:PIL.PdfParser.hex_string->bytearray([b for b in m.group(1) if b in b'0123456789abcdefABCDEF'])
A:PIL.PdfParser.re_lit_str_token->re.compile(b'(\\\\[nrtbf()\\\\])|(\\\\[0-9]{1,3})|(\\\\(\\r\\n|\\r|\\n))|(\\r\\n|\\r|\\n)|(\\()|(\\))')
A:PIL.PdfParser.re_xref_section_start->re.compile(whitespace_optional + b'xref' + newline)
A:PIL.PdfParser.re_xref_subsection_start->re.compile(whitespace_optional + b'([0-9]+)' + whitespace_mandatory + b'([0-9]+)' + whitespace_optional + newline_only)
A:PIL.PdfParser.re_xref_entry->re.compile(b'([0-9]{10}) ([0-9]{5}) ([fn])( \\r| \\n|\\r\\n)')
A:PIL.PdfParser.first_object->int(m.group(1))
A:PIL.PdfParser.num_objects->int(m.group(2))
A:PIL.PdfParser.generation->int(m.group(2))
A:PIL.PdfParser.kid_object->self.read_indirect(kid)
PIL.PdfParser.IndirectObjectDef(IndirectReference)
PIL.PdfParser.IndirectObjectDef.__str__(self)
PIL.PdfParser.IndirectReference(collections.namedtuple('IndirectReferenceTuple',['object_id','generation']))
PIL.PdfParser.IndirectReference.__bytes__(self)
PIL.PdfParser.IndirectReference.__eq__(self,other)
PIL.PdfParser.IndirectReference.__hash__(self)
PIL.PdfParser.IndirectReference.__ne__(self,other)
PIL.PdfParser.IndirectReference.__str__(self)
PIL.PdfParser.PdfArray(list)
PIL.PdfParser.PdfArray.__bytes__(self)
PIL.PdfParser.PdfBinary(self,data)
PIL.PdfParser.PdfBinary.__bytes__(self)
PIL.PdfParser.PdfBinary.__init__(self,data)
PIL.PdfParser.PdfDict(collections.UserDict)
PIL.PdfParser.PdfDict.__bytes__(self)
PIL.PdfParser.PdfDict.__getattr__(self,key)
PIL.PdfParser.PdfDict.__setattr__(self,key,value)
PIL.PdfParser.PdfFormatError(RuntimeError)
PIL.PdfParser.PdfName(self,name)
PIL.PdfParser.PdfName.__bytes__(self)
PIL.PdfParser.PdfName.__eq__(self,other)
PIL.PdfParser.PdfName.__hash__(self)
PIL.PdfParser.PdfName.__init__(self,name)
PIL.PdfParser.PdfName.__repr__(self)
PIL.PdfParser.PdfName.from_pdf_stream(cls,data)
PIL.PdfParser.PdfName.name_as_str(self)
PIL.PdfParser.PdfParser(self,filename=None,f=None,buf=None,start_offset=0,mode='rb')
PIL.PdfParser.PdfParser.__enter__(self)
PIL.PdfParser.PdfParser.__exit__(self,exc_type,exc_value,traceback)
PIL.PdfParser.PdfParser.__init__(self,filename=None,f=None,buf=None,start_offset=0,mode='rb')
PIL.PdfParser.PdfParser.close(self)
PIL.PdfParser.PdfParser.close_buf(self)
PIL.PdfParser.PdfParser.del_root(self)
PIL.PdfParser.PdfParser.get_buf_from_file(f)
PIL.PdfParser.PdfParser.get_literal_string(cls,data,offset)
PIL.PdfParser.PdfParser.get_value(cls,data,offset,expect_indirect=None,max_nesting=-1)
PIL.PdfParser.PdfParser.interpret_name(cls,raw,as_text=False)
PIL.PdfParser.PdfParser.interpret_trailer(cls,trailer_data)
PIL.PdfParser.PdfParser.linearize_page_tree(self,node=None)
PIL.PdfParser.PdfParser.next_object_id(self,offset=None)
PIL.PdfParser.PdfParser.read_indirect(self,ref,max_nesting=-1)
PIL.PdfParser.PdfParser.read_pdf_info(self)
PIL.PdfParser.PdfParser.read_prev_trailer(self,xref_section_offset)
PIL.PdfParser.PdfParser.read_trailer(self)
PIL.PdfParser.PdfParser.read_xref_table(self,xref_section_offset)
PIL.PdfParser.PdfParser.rewrite_pages(self)
PIL.PdfParser.PdfParser.seek_end(self)
PIL.PdfParser.PdfParser.start_writing(self)
PIL.PdfParser.PdfParser.write_catalog(self)
PIL.PdfParser.PdfParser.write_comment(self,s)
PIL.PdfParser.PdfParser.write_header(self)
PIL.PdfParser.PdfParser.write_obj(self,ref,*objs,**dict_obj)
PIL.PdfParser.PdfParser.write_page(self,ref,*objs,**dict_obj)
PIL.PdfParser.PdfParser.write_xref_and_trailer(self,new_root_ref=None)
PIL.PdfParser.PdfStream(self,dictionary,buf)
PIL.PdfParser.PdfStream.__init__(self,dictionary,buf)
PIL.PdfParser.PdfStream.decode(self)
PIL.PdfParser.XrefTable(self)
PIL.PdfParser.XrefTable.__contains__(self,key)
PIL.PdfParser.XrefTable.__delitem__(self,key)
PIL.PdfParser.XrefTable.__getitem__(self,key)
PIL.PdfParser.XrefTable.__init__(self)
PIL.PdfParser.XrefTable.__len__(self)
PIL.PdfParser.XrefTable.__setitem__(self,key,value)
PIL.PdfParser.XrefTable.keys(self)
PIL.PdfParser.XrefTable.write(self,f)
PIL.PdfParser.check_format_condition(condition,error_message)
PIL.PdfParser.decode_text(b)
PIL.PdfParser.encode_text(s)
PIL.PdfParser.pdf_repr(x)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/_version.py----------------------------------------


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImageOps.py----------------------------------------
A:PIL.ImageOps.color->ImageColor.getcolor(color, mode)
A:PIL.ImageOps.histogram->image.convert('RGB').histogram(mask)
A:PIL.ImageOps.ix->int(ix * scale + offset)
A:PIL.ImageOps.black->_color(black, 'RGB')
A:PIL.ImageOps.white->_color(white, 'RGB')
A:PIL.ImageOps.mid->_color(mid, 'RGB')
A:PIL.ImageOps.range_map->range(0, whitepoint - blackpoint)
A:PIL.ImageOps.range_map1->range(0, midpoint - blackpoint)
A:PIL.ImageOps.range_map2->range(0, whitepoint - midpoint)
A:PIL.ImageOps.image->image.convert('RGB').convert('RGB')
A:PIL.ImageOps.out->Image.new(image.mode, (width, height), _color(fill, image.mode))
A:PIL.ImageOps.new_height->int(image.height / image.width * size[0])
A:PIL.ImageOps.y->int((size[1] - new_height) * max(0, min(centering[1], 1)))
A:PIL.ImageOps.new_width->int(image.width / image.height * size[1])
A:PIL.ImageOps.x->int((size[0] - new_width) * max(0, min(centering[0], 1)))
A:PIL.ImageOps.(left, top, right, bottom)->_border(border)
A:PIL.ImageOps.h->image.convert('RGB').convert('RGB').histogram(mask)
A:PIL.ImageOps.centering->list(centering)
A:PIL.ImageOps.exif->image.convert('RGB').convert('RGB').getexif()
A:PIL.ImageOps.orientation->image.convert('RGB').convert('RGB').getexif().get(274)
A:PIL.ImageOps.method->{2: Image.FLIP_LEFT_RIGHT, 3: Image.ROTATE_180, 4: Image.FLIP_TOP_BOTTOM, 5: Image.TRANSPOSE, 6: Image.ROTATE_270, 7: Image.TRANSVERSE, 8: Image.ROTATE_90}.get(orientation)
A:PIL.ImageOps.transposed_image->image.convert('RGB').convert('RGB').transpose(method)
A:PIL.ImageOps.transposed_image.info['exif']->image.convert('RGB').convert('RGB').getexif().tobytes()
PIL.ImageOps._border(border)
PIL.ImageOps._color(color,mode)
PIL.ImageOps._lut(image,lut)
PIL.ImageOps.autocontrast(image,cutoff=0,ignore=None,mask=None)
PIL.ImageOps.colorize(image,black,white,mid=None,blackpoint=0,whitepoint=255,midpoint=127)
PIL.ImageOps.crop(image,border=0)
PIL.ImageOps.deform(image,deformer,resample=Image.BILINEAR)
PIL.ImageOps.equalize(image,mask=None)
PIL.ImageOps.exif_transpose(image)
PIL.ImageOps.expand(image,border=0,fill=0)
PIL.ImageOps.fit(image,size,method=Image.BICUBIC,bleed=0.0,centering=(0.5,0.5))
PIL.ImageOps.flip(image)
PIL.ImageOps.grayscale(image)
PIL.ImageOps.invert(image)
PIL.ImageOps.mirror(image)
PIL.ImageOps.pad(image,size,method=Image.BICUBIC,color=None,centering=(0.5,0.5))
PIL.ImageOps.posterize(image,bits)
PIL.ImageOps.scale(image,factor,resample=Image.BICUBIC)
PIL.ImageOps.solarize(image,threshold=128)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImageFilter.py----------------------------------------
A:PIL.ImageFilter.scale->functools.reduce(lambda a, b: a + b, kernel)
A:PIL.ImageFilter.image->image.expand(self.size // 2, self.size // 2).expand(self.size // 2, self.size // 2)
A:PIL.ImageFilter.self.sizesize->self._check_size(size)
A:PIL.ImageFilter.copy_table->kwargs.get('_copy_table', True)
A:PIL.ImageFilter.table->list(table)
A:PIL.ImageFilter.(size1D, size2D, size3D)->cls._check_size(size)
A:PIL.ImageFilter.table[idx_out:idx_out + channels]->callback(r / (size1D - 1), g / (size2D - 1), b / (size3D - 1))
A:PIL.ImageFilter.values->callback(*values)
PIL.ImageFilter.BLUR(BuiltinFilter)
PIL.ImageFilter.BoxBlur(self,radius)
PIL.ImageFilter.BoxBlur.__init__(self,radius)
PIL.ImageFilter.BoxBlur.filter(self,image)
PIL.ImageFilter.BuiltinFilter(MultibandFilter)
PIL.ImageFilter.BuiltinFilter.filter(self,image)
PIL.ImageFilter.CONTOUR(BuiltinFilter)
PIL.ImageFilter.Color3DLUT(self,size,table,channels=3,target_mode=None,**kwargs)
PIL.ImageFilter.Color3DLUT.__init__(self,size,table,channels=3,target_mode=None,**kwargs)
PIL.ImageFilter.Color3DLUT.__repr__(self)
PIL.ImageFilter.Color3DLUT._check_size(size)
PIL.ImageFilter.Color3DLUT.filter(self,image)
PIL.ImageFilter.Color3DLUT.generate(cls,size,callback,channels=3,target_mode=None)
PIL.ImageFilter.Color3DLUT.transform(self,callback,with_normals=False,channels=None,target_mode=None)
PIL.ImageFilter.DETAIL(BuiltinFilter)
PIL.ImageFilter.EDGE_ENHANCE(BuiltinFilter)
PIL.ImageFilter.EDGE_ENHANCE_MORE(BuiltinFilter)
PIL.ImageFilter.EMBOSS(BuiltinFilter)
PIL.ImageFilter.FIND_EDGES(BuiltinFilter)
PIL.ImageFilter.Filter
PIL.ImageFilter.GaussianBlur(self,radius=2)
PIL.ImageFilter.GaussianBlur.__init__(self,radius=2)
PIL.ImageFilter.GaussianBlur.filter(self,image)
PIL.ImageFilter.Kernel(self,size,kernel,scale=None,offset=0)
PIL.ImageFilter.Kernel.__init__(self,size,kernel,scale=None,offset=0)
PIL.ImageFilter.MaxFilter(self,size=3)
PIL.ImageFilter.MaxFilter.__init__(self,size=3)
PIL.ImageFilter.MedianFilter(self,size=3)
PIL.ImageFilter.MedianFilter.__init__(self,size=3)
PIL.ImageFilter.MinFilter(self,size=3)
PIL.ImageFilter.MinFilter.__init__(self,size=3)
PIL.ImageFilter.ModeFilter(self,size=3)
PIL.ImageFilter.ModeFilter.__init__(self,size=3)
PIL.ImageFilter.ModeFilter.filter(self,image)
PIL.ImageFilter.MultibandFilter(Filter)
PIL.ImageFilter.RankFilter(self,size,rank)
PIL.ImageFilter.RankFilter.__init__(self,size,rank)
PIL.ImageFilter.RankFilter.filter(self,image)
PIL.ImageFilter.SHARPEN(BuiltinFilter)
PIL.ImageFilter.SMOOTH(BuiltinFilter)
PIL.ImageFilter.SMOOTH_MORE(BuiltinFilter)
PIL.ImageFilter.UnsharpMask(self,radius=2,percent=150,threshold=3)
PIL.ImageFilter.UnsharpMask.__init__(self,radius=2,percent=150,threshold=3)
PIL.ImageFilter.UnsharpMask.filter(self,image)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImageFont.py----------------------------------------
A:PIL.ImageFont.core->_imagingft_not_installed()
A:PIL.ImageFont.image->Image.open(fullname)
A:PIL.ImageFont.s->file.readline()
A:PIL.ImageFont.data->file.read(256 * 20)
A:PIL.ImageFont.self.font->_imagingft_not_installed().getfont(font, size, index, encoding, layout_engine=layout_engine)
A:PIL.ImageFont.self.font_bytes->ImageFont().read()
A:PIL.ImageFont.(size, offset)->self.font.getsize(text, mode, direction, features, language, anchor)
A:PIL.ImageFont.lines->self._multiline_split(text)
A:PIL.ImageFont.(line_width, line_height)->self.getsize(line, direction, features, language, stroke_width)
A:PIL.ImageFont.max_width->max(max_width, line_width)
A:PIL.ImageFont.im->self.font.getmask(text, mode, *args, **kwargs)
A:PIL.ImageFont.names->self.get_variation_names()
A:PIL.ImageFont.name->name.encode().encode()
A:PIL.ImageFont.index->self.get_variation_names().index(name)
A:PIL.ImageFont.axes->self.font.getvaraxes()
A:PIL.ImageFont.axis['name']->axis['name'].replace(b'\x00', b'').replace(b'\x00', b'')
A:PIL.ImageFont.(w, h)->self.font.getsize(text)
A:PIL.ImageFont.f->ImageFont()
A:PIL.ImageFont.ttf_filename->os.path.basename(font)
A:PIL.ImageFont.windir->os.environ.get('WINDIR')
A:PIL.ImageFont.lindirs->os.environ.get('XDG_DATA_DIRS', '')
A:PIL.ImageFont.fontpath->os.path.join(walkroot, walkfilename)
A:PIL.ImageFont.filename->filename.decode('utf-8').decode('utf-8')
PIL.ImageFont.FreeTypeFont(self,font=None,size=10,index=0,encoding='',layout_engine=None)
PIL.ImageFont.FreeTypeFont.__init__(self,font=None,size=10,index=0,encoding='',layout_engine=None)
PIL.ImageFont.FreeTypeFont._multiline_split(self,text)
PIL.ImageFont.FreeTypeFont.font_variant(self,font=None,size=None,index=None,encoding=None,layout_engine=None)
PIL.ImageFont.FreeTypeFont.get_variation_axes(self)
PIL.ImageFont.FreeTypeFont.get_variation_names(self)
PIL.ImageFont.FreeTypeFont.getbbox(self,text,mode='',direction=None,features=None,language=None,stroke_width=0,anchor=None)
PIL.ImageFont.FreeTypeFont.getlength(self,text,mode='',direction=None,features=None,language=None)
PIL.ImageFont.FreeTypeFont.getmask(self,text,mode='',direction=None,features=None,language=None,stroke_width=0,anchor=None,ink=0)
PIL.ImageFont.FreeTypeFont.getmask2(self,text,mode='',fill=Image.core.fill,direction=None,features=None,language=None,stroke_width=0,anchor=None,ink=0,*args,**kwargs)
PIL.ImageFont.FreeTypeFont.getmetrics(self)
PIL.ImageFont.FreeTypeFont.getname(self)
PIL.ImageFont.FreeTypeFont.getoffset(self,text)
PIL.ImageFont.FreeTypeFont.getsize(self,text,direction=None,features=None,language=None,stroke_width=0)
PIL.ImageFont.FreeTypeFont.getsize_multiline(self,text,direction=None,spacing=4,features=None,language=None,stroke_width=0)
PIL.ImageFont.FreeTypeFont.set_variation_by_axes(self,axes)
PIL.ImageFont.FreeTypeFont.set_variation_by_name(self,name)
PIL.ImageFont.ImageFont
PIL.ImageFont.ImageFont._load_pilfont(self,filename)
PIL.ImageFont.ImageFont._load_pilfont_data(self,file,image)
PIL.ImageFont.ImageFont.getmask(self,text,mode='',*args,**kwargs)
PIL.ImageFont.ImageFont.getsize(self,text,*args,**kwargs)
PIL.ImageFont.TransposedFont(self,font,orientation=None)
PIL.ImageFont.TransposedFont.__init__(self,font,orientation=None)
PIL.ImageFont.TransposedFont.getmask(self,text,mode='',*args,**kwargs)
PIL.ImageFont.TransposedFont.getsize(self,text,*args,**kwargs)
PIL.ImageFont._imagingft_not_installed
PIL.ImageFont._imagingft_not_installed.__getattr__(self,id)
PIL.ImageFont.load(filename)
PIL.ImageFont.load_default()
PIL.ImageFont.load_path(filename)
PIL.ImageFont.truetype(font=None,size=10,index=0,encoding='',layout_engine=None)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/PalmImagePlugin.py----------------------------------------
A:PIL.PalmImagePlugin.image->Image.new('L', (1, len(_Palm8BitColormapValues)))
A:PIL.PalmImagePlugin.Palm8BitColormapImage->build_prototype_image()
A:PIL.PalmImagePlugin.im->im.point(lambda x, maxval=(1 << bpp) - 1: maxval - (x & maxval)).point(lambda x, maxval=(1 << bpp) - 1: maxval - (x & maxval))
A:PIL.PalmImagePlugin.colormap->im.point(lambda x, maxval=(1 << bpp) - 1: maxval - (x & maxval)).point(lambda x, maxval=(1 << bpp) - 1: maxval - (x & maxval)).getdata().getpalette()
PIL.PalmImagePlugin._save(im,fp,filename)
PIL.PalmImagePlugin.build_prototype_image()


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImageChops.py----------------------------------------
PIL.ImageChops.add(image1,image2,scale=1.0,offset=0)
PIL.ImageChops.add_modulo(image1,image2)
PIL.ImageChops.blend(image1,image2,alpha)
PIL.ImageChops.composite(image1,image2,mask)
PIL.ImageChops.constant(image,value)
PIL.ImageChops.darker(image1,image2)
PIL.ImageChops.difference(image1,image2)
PIL.ImageChops.duplicate(image)
PIL.ImageChops.hard_light(image1,image2)
PIL.ImageChops.invert(image)
PIL.ImageChops.lighter(image1,image2)
PIL.ImageChops.logical_and(image1,image2)
PIL.ImageChops.logical_or(image1,image2)
PIL.ImageChops.logical_xor(image1,image2)
PIL.ImageChops.multiply(image1,image2)
PIL.ImageChops.offset(image,xoffset,yoffset=None)
PIL.ImageChops.overlay(image1,image2)
PIL.ImageChops.screen(image1,image2)
PIL.ImageChops.soft_light(image1,image2)
PIL.ImageChops.subtract(image1,image2,scale=1.0,offset=0)
PIL.ImageChops.subtract_modulo(image1,image2)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/features.py----------------------------------------
A:PIL.features.version->getattr(Image.core, lib + '_version')
A:PIL.features.imported_module->__import__(module, fromlist=['PIL'])
A:PIL.features.ret->get_supported_modules()
A:PIL.features.py_version->sys.version.splitlines()
A:PIL.features.v->version(name)
A:PIL.features.extensions->collections.defaultdict(list)
PIL.features.check(feature)
PIL.features.check_codec(feature)
PIL.features.check_feature(feature)
PIL.features.check_module(feature)
PIL.features.get_supported()
PIL.features.get_supported_codecs()
PIL.features.get_supported_features()
PIL.features.get_supported_modules()
PIL.features.pilinfo(out=None,supported_formats=True)
PIL.features.version(feature)
PIL.features.version_codec(feature)
PIL.features.version_feature(feature)
PIL.features.version_module(feature)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/XVThumbImagePlugin.py----------------------------------------
A:PIL.XVThumbImagePlugin.s->s.strip().split().strip().split()
A:PIL.XVThumbImagePlugin.self.palette->ImagePalette.raw('RGB', PALETTE)
PIL.XVThumbImagePlugin.XVThumbImageFile(ImageFile.ImageFile)
PIL.XVThumbImagePlugin.XVThumbImageFile._open(self)
PIL.XVThumbImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/_binary.py----------------------------------------
PIL._binary.i16be(c,o=0)
PIL._binary.i16le(c,o=0)
PIL._binary.i32be(c,o=0)
PIL._binary.i32le(c,o=0)
PIL._binary.i8(c)
PIL._binary.o16be(i)
PIL._binary.o16le(i)
PIL._binary.o32be(i)
PIL._binary.o32le(i)
PIL._binary.o8(i)
PIL._binary.si16le(c,o=0)
PIL._binary.si32le(c,o=0)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/GimpPaletteFile.py----------------------------------------
A:PIL.GimpPaletteFile.s->fp.readline()
A:PIL.GimpPaletteFile.v->tuple(map(int, s.split()[:3]))
A:PIL.GimpPaletteFile.self.palette->b''.join(self.palette)
PIL.GimpPaletteFile.GimpPaletteFile(self,fp)
PIL.GimpPaletteFile.GimpPaletteFile.__init__(self,fp)
PIL.GimpPaletteFile.GimpPaletteFile.getpalette(self)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/EpsImagePlugin.py----------------------------------------
A:PIL.EpsImagePlugin.split->re.compile('^%%([^:]*):[ \\t]*(.*)[ \\t]*$')
A:PIL.EpsImagePlugin.field->re.compile('^%[%!\\w]([^:]*)[ \\t]*$')
A:PIL.EpsImagePlugin.(out_fd, outfile)->tempfile.mkstemp()
A:PIL.EpsImagePlugin.(in_fd, infile_temp)->tempfile.mkstemp()
A:PIL.EpsImagePlugin.fsize->io.TextIOWrapper(fp, encoding='latin-1').tell()
A:PIL.EpsImagePlugin.s->io.TextIOWrapper(fp, encoding='latin-1').read(160)
A:PIL.EpsImagePlugin.startupinfo->subprocess.STARTUPINFO()
A:PIL.EpsImagePlugin.out_im->Image.open(outfile)
A:PIL.EpsImagePlugin.im->Image.open(outfile).im.copy()
A:PIL.EpsImagePlugin.c->self.fp.read(1)
A:PIL.EpsImagePlugin.self.char->self.fp.read(1)
A:PIL.EpsImagePlugin.(length, offset)->self._find_offset(self.fp)
A:PIL.EpsImagePlugin.fp->io.TextIOWrapper(fp, encoding='latin-1')
A:PIL.EpsImagePlugin.s_raw->io.TextIOWrapper(fp, encoding='latin-1').readline()
A:PIL.EpsImagePlugin.m->re.compile('^%[%!\\w]([^:]*)[ \\t]*$').match(s)
A:PIL.EpsImagePlugin.(k, v)->re.compile('^%[%!\\w]([^:]*)[ \\t]*$').match(s).group(1, 2)
A:PIL.EpsImagePlugin.k->re.compile('^%[%!\\w]([^:]*)[ \\t]*$').match(s).group(1)
A:PIL.EpsImagePlugin.length->i32(s[8:12])
A:PIL.EpsImagePlugin.offset->i32(s[4:8])
A:PIL.EpsImagePlugin.self.im->Ghostscript(self.tile, self.size, self.fp, scale)
PIL.EpsImagePlugin.EpsImageFile(ImageFile.ImageFile)
PIL.EpsImagePlugin.EpsImageFile._find_offset(self,fp)
PIL.EpsImagePlugin.EpsImageFile._open(self)
PIL.EpsImagePlugin.EpsImageFile.load(self,scale=1)
PIL.EpsImagePlugin.EpsImageFile.load_seek(self,*args,**kwargs)
PIL.EpsImagePlugin.Ghostscript(tile,size,fp,scale=1)
PIL.EpsImagePlugin.PSFile(self,fp)
PIL.EpsImagePlugin.PSFile.__init__(self,fp)
PIL.EpsImagePlugin.PSFile.readline(self)
PIL.EpsImagePlugin.PSFile.seek(self,offset,whence=io.SEEK_SET)
PIL.EpsImagePlugin._accept(prefix)
PIL.EpsImagePlugin._save(im,fp,filename,eps=1)
PIL.EpsImagePlugin.has_ghostscript()


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/DcxImagePlugin.py----------------------------------------
A:PIL.DcxImagePlugin.s->self.fp.read(4)
A:PIL.DcxImagePlugin.offset->i32(self.fp.read(4))
A:PIL.DcxImagePlugin.self.n_frames->len(self._offset)
PIL.DcxImagePlugin.DcxImageFile(PcxImageFile)
PIL.DcxImagePlugin.DcxImageFile._close__fp(self)
PIL.DcxImagePlugin.DcxImageFile._open(self)
PIL.DcxImagePlugin.DcxImageFile.seek(self,frame)
PIL.DcxImagePlugin.DcxImageFile.tell(self)
PIL.DcxImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImageMath.py----------------------------------------
A:PIL.ImageMath.im1->im1.crop((0, 0) + size).crop((0, 0) + size)
A:PIL.ImageMath.out->builtins.eval(expression, args)
A:PIL.ImageMath.op->getattr(_imagingmath, op + '_' + im1.mode)
A:PIL.ImageMath.im2->im2.crop((0, 0) + size).crop((0, 0) + size)
A:PIL.ImageMath.args->ops.copy()
A:PIL.ImageMath.args[k]->_Operand(v)
PIL.ImageMath._Operand(self,im)
PIL.ImageMath._Operand.__abs__(self)
PIL.ImageMath._Operand.__add__(self,other)
PIL.ImageMath._Operand.__and__(self,other)
PIL.ImageMath._Operand.__bool__(self)
PIL.ImageMath._Operand.__eq__(self,other)
PIL.ImageMath._Operand.__fixup(self,im1)
PIL.ImageMath._Operand.__ge__(self,other)
PIL.ImageMath._Operand.__gt__(self,other)
PIL.ImageMath._Operand.__init__(self,im)
PIL.ImageMath._Operand.__invert__(self)
PIL.ImageMath._Operand.__le__(self,other)
PIL.ImageMath._Operand.__lshift__(self,other)
PIL.ImageMath._Operand.__lt__(self,other)
PIL.ImageMath._Operand.__mod__(self,other)
PIL.ImageMath._Operand.__mul__(self,other)
PIL.ImageMath._Operand.__ne__(self,other)
PIL.ImageMath._Operand.__neg__(self)
PIL.ImageMath._Operand.__or__(self,other)
PIL.ImageMath._Operand.__pos__(self)
PIL.ImageMath._Operand.__pow__(self,other)
PIL.ImageMath._Operand.__radd__(self,other)
PIL.ImageMath._Operand.__rand__(self,other)
PIL.ImageMath._Operand.__rmod__(self,other)
PIL.ImageMath._Operand.__rmul__(self,other)
PIL.ImageMath._Operand.__ror__(self,other)
PIL.ImageMath._Operand.__rpow__(self,other)
PIL.ImageMath._Operand.__rshift__(self,other)
PIL.ImageMath._Operand.__rsub__(self,other)
PIL.ImageMath._Operand.__rtruediv__(self,other)
PIL.ImageMath._Operand.__rxor__(self,other)
PIL.ImageMath._Operand.__sub__(self,other)
PIL.ImageMath._Operand.__truediv__(self,other)
PIL.ImageMath._Operand.__xor__(self,other)
PIL.ImageMath._Operand.apply(self,op,im1,im2=None,mode=None)
PIL.ImageMath._isconstant(v)
PIL.ImageMath.eval(expression,_dict={},**kw)
PIL.ImageMath.imagemath_convert(self,mode)
PIL.ImageMath.imagemath_equal(self,other)
PIL.ImageMath.imagemath_float(self)
PIL.ImageMath.imagemath_int(self)
PIL.ImageMath.imagemath_max(self,other)
PIL.ImageMath.imagemath_min(self,other)
PIL.ImageMath.imagemath_notequal(self,other)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/PdfImagePlugin.py----------------------------------------
A:PIL.PdfImagePlugin.is_appending->Image.new('L', im.size).encoderinfo.get('append', False)
A:PIL.PdfImagePlugin.existing_pdf->PdfParser.PdfParser(f=fp, filename=filename, mode='w+b')
A:PIL.PdfImagePlugin.resolution->Image.new('L', im.size).encoderinfo.get('resolution', 72.0)
A:PIL.PdfImagePlugin.append_images->Image.new('L', im.size).encoderinfo.get('append_images', [])
A:PIL.PdfImagePlugin.append_im.encoderinfo->Image.new('L', im.size).encoderinfo.copy()
A:PIL.PdfImagePlugin.colorspace->PdfParser.PdfName('DeviceCMYK')
A:PIL.PdfImagePlugin.palette->Image.new('L', im.size).im.getpalette('RGB')
A:PIL.PdfImagePlugin.op->io.BytesIO()
A:PIL.PdfImagePlugin.data->Image.new('L', im.size).tobytes('raw', '1')
A:PIL.PdfImagePlugin.im->Image.new('L', im.size)
PIL.PdfImagePlugin._save(im,fp,filename,save_all=False)
PIL.PdfImagePlugin._save_all(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/McIdasImagePlugin.py----------------------------------------
A:PIL.McIdasImagePlugin.s->self.fp.read(256)
PIL.McIdasImagePlugin.McIdasImageFile(ImageFile.ImageFile)
PIL.McIdasImagePlugin.McIdasImageFile._open(self)
PIL.McIdasImagePlugin._accept(s)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImageFile.py----------------------------------------
A:PIL.ImageFile.message->ERRORS.get(error)
A:PIL.ImageFile.self.fp->open(fp, 'rb')
A:PIL.ImageFile.pixel->Image.Image.load(self)
A:PIL.ImageFile.self.map->mmap.mmap(fp.fileno(), 0, access=mmap.ACCESS_READ)
A:PIL.ImageFile.self.im->Image.core.new(self.mode, self.size)
A:PIL.ImageFile.decoder->Image._getdecoder(self.mode, decoder_name, args, self.decoderconfig)
A:PIL.ImageFile.(status, err_code)->Image._getdecoder(self.mode, decoder_name, args, self.decoderconfig).decode(b'')
A:PIL.ImageFile.s->Image._getdecoder(self.mode, 'raw', rawmode).decode(data)
A:PIL.ImageFile.(n, err_code)->Image._getdecoder(self.mode, decoder_name, args, self.decoderconfig).decode(b)
A:PIL.ImageFile.loader->self._load()
A:PIL.ImageFile.image->self._load().load(self)
A:PIL.ImageFile.skip->min(len(self.data), self.offset)
A:PIL.ImageFile.(n, e)->self.decoder.decode(self.data)
A:PIL.ImageFile.im->Image.open(fp)
A:PIL.ImageFile.self.decoder->Image._getdecoder(im.mode, d, a, im.decoderconfig)
A:PIL.ImageFile.self.image->Image.open(fp)
A:PIL.ImageFile.bufsize->max(MAXBLOCK, bufsize, im.size[0] * 4)
A:PIL.ImageFile.fh->fp.fileno()
A:PIL.ImageFile.e->Image._getencoder(im.mode, e, a, im.encoderconfig)
A:PIL.ImageFile.(l, s)->Image._getencoder(im.mode, e, a, im.encoderconfig).encode_to_pyfd()
A:PIL.ImageFile.(l, s, d)->Image._getencoder(im.mode, e, a, im.encoderconfig).encode(bufsize)
A:PIL.ImageFile.block->fp.read(min(size, SAFEBLOCK))
A:PIL.ImageFile.self.state->PyCodecState()
A:PIL.ImageFile.d->Image._getdecoder(self.mode, 'raw', rawmode)
PIL.ImageFile.ImageFile(self,fp=None,filename=None)
PIL.ImageFile.ImageFile.__init__(self,fp=None,filename=None)
PIL.ImageFile.ImageFile._seek_check(self,frame)
PIL.ImageFile.ImageFile.get_format_mimetype(self)
PIL.ImageFile.ImageFile.load(self)
PIL.ImageFile.ImageFile.load_end(self)
PIL.ImageFile.ImageFile.load_prepare(self)
PIL.ImageFile.ImageFile.verify(self)
PIL.ImageFile.Parser
PIL.ImageFile.Parser.__enter__(self)
PIL.ImageFile.Parser.__exit__(self,*args)
PIL.ImageFile.Parser.close(self)
PIL.ImageFile.Parser.feed(self,data)
PIL.ImageFile.Parser.reset(self)
PIL.ImageFile.PyCodecState(self)
PIL.ImageFile.PyCodecState.__init__(self)
PIL.ImageFile.PyCodecState.extents(self)
PIL.ImageFile.PyDecoder(self,mode,*args)
PIL.ImageFile.PyDecoder.__init__(self,mode,*args)
PIL.ImageFile.PyDecoder.cleanup(self)
PIL.ImageFile.PyDecoder.decode(self,buffer)
PIL.ImageFile.PyDecoder.init(self,args)
PIL.ImageFile.PyDecoder.pulls_fd(self)
PIL.ImageFile.PyDecoder.set_as_raw(self,data,rawmode=None)
PIL.ImageFile.PyDecoder.setfd(self,fd)
PIL.ImageFile.PyDecoder.setimage(self,im,extents=None)
PIL.ImageFile.StubImageFile(ImageFile)
PIL.ImageFile.StubImageFile._load(self)
PIL.ImageFile.StubImageFile._open(self)
PIL.ImageFile.StubImageFile.load(self)
PIL.ImageFile._safe_read(fp,size)
PIL.ImageFile._save(im,fp,tile,bufsize=0)
PIL.ImageFile._tilesort(t)
PIL.ImageFile.raise_ioerror(error)
PIL.ImageFile.raise_oserror(error)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/PSDraw.py----------------------------------------
A:PIL.PSDraw.text->'\\)'.join(text.split(')'))
A:PIL.PSDraw.xmax->float(box[2] - box[0])
A:PIL.PSDraw.ymax->float(box[3] - box[1])
PIL.PSDraw.PSDraw(self,fp=None)
PIL.PSDraw.PSDraw.__init__(self,fp=None)
PIL.PSDraw.PSDraw._fp_write(self,to_write)
PIL.PSDraw.PSDraw.begin_document(self,id=None)
PIL.PSDraw.PSDraw.end_document(self)
PIL.PSDraw.PSDraw.image(self,box,im,dpi=None)
PIL.PSDraw.PSDraw.line(self,xy0,xy1)
PIL.PSDraw.PSDraw.rectangle(self,box)
PIL.PSDraw.PSDraw.setfont(self,font,size)
PIL.PSDraw.PSDraw.text(self,xy,text)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/TiffTags.py----------------------------------------
A:PIL.TiffTags.TAGS_V2[k]->TagInfo(k, *v)
PIL.TiffTags.TagInfo(cls,value=None,name='unknown',type=None,length=None,enum=None)
PIL.TiffTags.TagInfo.__new__(cls,value=None,name='unknown',type=None,length=None,enum=None)
PIL.TiffTags.TagInfo.cvt_enum(self,value)
PIL.TiffTags._populate()
PIL.TiffTags.lookup(tag)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImtImagePlugin.py----------------------------------------
A:PIL.ImtImagePlugin.field->re.compile(b'([a-z]*) ([^ \\r\\n]*)')
A:PIL.ImtImagePlugin.s->self.fp.read(1)
A:PIL.ImtImagePlugin.m->re.compile(b'([a-z]*) ([^ \\r\\n]*)').match(s)
A:PIL.ImtImagePlugin.(k, v)->re.compile(b'([a-z]*) ([^ \\r\\n]*)').match(s).group(1, 2)
A:PIL.ImtImagePlugin.xsize->int(v)
A:PIL.ImtImagePlugin.ysize->int(v)
PIL.ImtImagePlugin.ImtImageFile(ImageFile.ImageFile)
PIL.ImtImagePlugin.ImtImageFile._open(self)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/TiffImagePlugin.py----------------------------------------
A:PIL.TiffImagePlugin.logger->logging.getLogger(__name__)
A:PIL.TiffImagePlugin.n_d->_limit_rational(val, max_val)
A:PIL.TiffImagePlugin.frac->Fraction(val)
A:PIL.TiffImagePlugin.val->Fraction(*n_d)
A:PIL.TiffImagePlugin.self._val->Fraction(value, denominator)
A:PIL.TiffImagePlugin.f->self._val.limit_denominator(max_denominator)
A:PIL.TiffImagePlugin.__add__->_delegate('__add__')
A:PIL.TiffImagePlugin.__radd__->_delegate('__radd__')
A:PIL.TiffImagePlugin.__sub__->_delegate('__sub__')
A:PIL.TiffImagePlugin.__rsub__->_delegate('__rsub__')
A:PIL.TiffImagePlugin.__mul__->_delegate('__mul__')
A:PIL.TiffImagePlugin.__rmul__->_delegate('__rmul__')
A:PIL.TiffImagePlugin.__truediv__->_delegate('__truediv__')
A:PIL.TiffImagePlugin.__rtruediv__->_delegate('__rtruediv__')
A:PIL.TiffImagePlugin.__floordiv__->_delegate('__floordiv__')
A:PIL.TiffImagePlugin.__rfloordiv__->_delegate('__rfloordiv__')
A:PIL.TiffImagePlugin.__mod__->_delegate('__mod__')
A:PIL.TiffImagePlugin.__rmod__->_delegate('__rmod__')
A:PIL.TiffImagePlugin.__pow__->_delegate('__pow__')
A:PIL.TiffImagePlugin.__rpow__->_delegate('__rpow__')
A:PIL.TiffImagePlugin.__pos__->_delegate('__pos__')
A:PIL.TiffImagePlugin.__neg__->_delegate('__neg__')
A:PIL.TiffImagePlugin.__abs__->_delegate('__abs__')
A:PIL.TiffImagePlugin.__trunc__->_delegate('__trunc__')
A:PIL.TiffImagePlugin.__lt__->_delegate('__lt__')
A:PIL.TiffImagePlugin.__gt__->_delegate('__gt__')
A:PIL.TiffImagePlugin.__le__->_delegate('__le__')
A:PIL.TiffImagePlugin.__ge__->_delegate('__ge__')
A:PIL.TiffImagePlugin.__bool__->_delegate('__bool__')
A:PIL.TiffImagePlugin.__ceil__->_delegate('__ceil__')
A:PIL.TiffImagePlugin.__floor__->_delegate('__floor__')
A:PIL.TiffImagePlugin.__round__->_delegate('__round__')
A:PIL.TiffImagePlugin.(self.next,)->self._unpack('L', self._ensure_read(fp, 4))
A:PIL.TiffImagePlugin.prefix->property(lambda self: self._prefix)
A:PIL.TiffImagePlugin.offset->self.readLong()
A:PIL.TiffImagePlugin.legacy_api->property(lambda self: self._legacy_api)
A:PIL.TiffImagePlugin.self[tag]->handler(self, data, self.legacy_api)
A:PIL.TiffImagePlugin.info->info.to_v2().to_v2()
A:PIL.TiffImagePlugin.values->tuple((info.cvt_enum(value) for value in values))
A:PIL.TiffImagePlugin.TYPES[idx]->func.__name__[5:].replace('_', ' ')
A:PIL.TiffImagePlugin.size->struct.calcsize('=' + fmt)
A:PIL.TiffImagePlugin.vals->self._unpack('{}l'.format(len(data) // 4), data)
A:PIL.TiffImagePlugin.ret->fp.read(size)
A:PIL.TiffImagePlugin.self._offset->fp.tell()
A:PIL.TiffImagePlugin.(tag, typ, count, data)->self._unpack('HHL4s', self._ensure_read(fp, 12))
A:PIL.TiffImagePlugin.typname->TiffTags.TYPES.get(typ, 'unknown')
A:PIL.TiffImagePlugin.here->fp.tell()
A:PIL.TiffImagePlugin.(offset,)->self._unpack('L', data)
A:PIL.TiffImagePlugin.data->self._write_dispatch[typ](self, *values)
A:PIL.TiffImagePlugin.result->self.tobytes(offset)
A:PIL.TiffImagePlugin.stripoffsets->len(entries)
A:PIL.TiffImagePlugin.typ->self.tagtype.get(tag)
A:PIL.TiffImagePlugin.ifd->ImageFileDirectory_v2(prefix=prefix)
A:PIL.TiffImagePlugin.count->len(values)
A:PIL.TiffImagePlugin.value->self._pack('L', self._unpack('L', value)[0] + offset)
A:PIL.TiffImagePlugin.name->name.replace(' ', '_').replace(' ', '_')
A:PIL.TiffImagePlugin.tags->list(atts.items())
A:PIL.TiffImagePlugin.tagdata->property(lambda self: self._tagdata)
A:PIL.TiffImagePlugin.ifd._tagdata->dict(self._tagdata)
A:PIL.TiffImagePlugin.ifd.tagtype->dict(self.tagtype)
A:PIL.TiffImagePlugin.ifd._tags_v2->dict(self._tags_v2)
A:PIL.TiffImagePlugin.ifh->self.fp.read(8)
A:PIL.TiffImagePlugin.self.tag_v2->ImageFileDirectory_v2(ifh)
A:PIL.TiffImagePlugin.current->self.tell()
A:PIL.TiffImagePlugin.self.im->self.im.transpose(method)
A:PIL.TiffImagePlugin.self.tagself.ifd->ImageFileDirectory_v1.from_v2(self.tag_v2)
A:PIL.TiffImagePlugin.method->{2: Image.FLIP_LEFT_RIGHT, 3: Image.ROTATE_180, 4: Image.FLIP_TOP_BOTTOM, 5: Image.TRANSPOSE, 6: Image.ROTATE_270, 7: Image.TRANSVERSE, 8: Image.ROTATE_90}.get(self._tile_orientation)
A:PIL.TiffImagePlugin.args->list(self.tile[0][3])
A:PIL.TiffImagePlugin.decoder->Image._getdecoder(self.mode, 'libtiff', tuple(args), self.decoderconfig)
A:PIL.TiffImagePlugin.(n, err)->Image._getdecoder(self.mode, 'libtiff', tuple(args), self.decoderconfig).decode(self.fp.read())
A:PIL.TiffImagePlugin.self._planar_configuration->self.tag_v2.get(PLANAR_CONFIGURATION, 1)
A:PIL.TiffImagePlugin.photo->self.tag_v2.get(PHOTOMETRIC_INTERPRETATION, 0)
A:PIL.TiffImagePlugin.fillorder->self.tag_v2.get(FILLORDER, 1)
A:PIL.TiffImagePlugin.xsize->int(self.tag_v2.get(IMAGEWIDTH))
A:PIL.TiffImagePlugin.ysize->int(self.tag_v2.get(IMAGELENGTH))
A:PIL.TiffImagePlugin.sampleFormat->self.tag_v2.get(SAMPLEFORMAT, (1,))
A:PIL.TiffImagePlugin.bps_tuple->self.tag_v2.get(BITSPERSAMPLE, (1,))
A:PIL.TiffImagePlugin.extra_tuple->self.tag_v2.get(EXTRASAMPLES, ())
A:PIL.TiffImagePlugin.xres->self.tag_v2.get(X_RESOLUTION, 1)
A:PIL.TiffImagePlugin.yres->self.tag_v2.get(Y_RESOLUTION, 1)
A:PIL.TiffImagePlugin.resunit->self.tag_v2.get(RESOLUTION_UNIT)
A:PIL.TiffImagePlugin.rawmode->rawmode.replace(';16L', ';16N').replace(';16L', ';16N')
A:PIL.TiffImagePlugin.h->self.tag_v2.get(323)
A:PIL.TiffImagePlugin.w->self.tag_v2.get(322)
A:PIL.TiffImagePlugin.self.palette->ImagePalette.raw('RGB;L', b''.join(palette))
A:PIL.TiffImagePlugin.self._tile_orientation->self.tag_v2.get(274)
A:PIL.TiffImagePlugin.compression->im.encoderinfo.get('compression', im.info.get('compression'))
A:PIL.TiffImagePlugin.ifd[PLANAR_CONFIGURATION]->getattr(im, '_planar_configuration', 1)
A:PIL.TiffImagePlugin.ifd[key]->info.to_v2().to_v2().get(key)
A:PIL.TiffImagePlugin.dpi->im.encoderinfo.get('dpi')
A:PIL.TiffImagePlugin.ifd[X_RESOLUTION]->int(dpi[0] + 0.5)
A:PIL.TiffImagePlugin.ifd[Y_RESOLUTION]->int(dpi[1] + 0.5)
A:PIL.TiffImagePlugin.ifd[SAMPLESPERPIXEL]->len(bits)
A:PIL.TiffImagePlugin.lut->im.im.getpalette('RGB', 'RGB;L')
A:PIL.TiffImagePlugin.ifd[COLORMAP]->tuple((i8(v) * 256 for v in lut))
A:PIL.TiffImagePlugin.ifd[COMPRESSION]->COMPRESSION_INFO_REV.get(compression, 1)
A:PIL.TiffImagePlugin._fp->os.dup(fp.fileno())
A:PIL.TiffImagePlugin.legacy_ifd->im.tag.to_v2()
A:PIL.TiffImagePlugin.atts[tag]->float(value)
A:PIL.TiffImagePlugin.e->Image._getencoder(im.mode, 'libtiff', a, im.encoderconfig)
A:PIL.TiffImagePlugin.(l, s, d)->Image._getencoder(im.mode, 'libtiff', a, im.encoderconfig).encode(16 * 1024)
A:PIL.TiffImagePlugin.self.f->open(fn, 'w+b')
A:PIL.TiffImagePlugin.self.beginning->self.f.tell()
A:PIL.TiffImagePlugin.self.IIMMIIMM->self.f.read(4)
A:PIL.TiffImagePlugin.IIMM->self.f.read(4)
A:PIL.TiffImagePlugin.IFDoffset->self.readLong()
A:PIL.TiffImagePlugin.pos->self.f.tell()
A:PIL.TiffImagePlugin.self.offsetOfNewPage->self.f.tell()
A:PIL.TiffImagePlugin.numTags->self.readShort()
A:PIL.TiffImagePlugin.(value,)->struct.unpack(self.longFmt, self.f.read(4))
A:PIL.TiffImagePlugin.bytesWritten->self.f.write(struct.pack(self.longFmt, value))
A:PIL.TiffImagePlugin.(tag, fieldType, count)->struct.unpack(self.tagFormat, self.f.read(8))
A:PIL.TiffImagePlugin.curPos->self.f.tell()
A:PIL.TiffImagePlugin.encoderinfo->im.encoderinfo.copy()
A:PIL.TiffImagePlugin.append_images->list(encoderinfo.get('append_images', []))
A:PIL.TiffImagePlugin.cur_idx->im.tell()
PIL.TiffImagePlugin.AppendingTiffWriter(self,fn,new=False)
PIL.TiffImagePlugin.AppendingTiffWriter.__enter__(self)
PIL.TiffImagePlugin.AppendingTiffWriter.__exit__(self,exc_type,exc_value,traceback)
PIL.TiffImagePlugin.AppendingTiffWriter.__init__(self,fn,new=False)
PIL.TiffImagePlugin.AppendingTiffWriter.close(self)
PIL.TiffImagePlugin.AppendingTiffWriter.finalize(self)
PIL.TiffImagePlugin.AppendingTiffWriter.fixIFD(self)
PIL.TiffImagePlugin.AppendingTiffWriter.fixOffsets(self,count,isShort=False,isLong=False)
PIL.TiffImagePlugin.AppendingTiffWriter.goToEnd(self)
PIL.TiffImagePlugin.AppendingTiffWriter.newFrame(self)
PIL.TiffImagePlugin.AppendingTiffWriter.readLong(self)
PIL.TiffImagePlugin.AppendingTiffWriter.readShort(self)
PIL.TiffImagePlugin.AppendingTiffWriter.rewriteLastLong(self,value)
PIL.TiffImagePlugin.AppendingTiffWriter.rewriteLastShort(self,value)
PIL.TiffImagePlugin.AppendingTiffWriter.rewriteLastShortToLong(self,value)
PIL.TiffImagePlugin.AppendingTiffWriter.seek(self,offset,whence=io.SEEK_SET)
PIL.TiffImagePlugin.AppendingTiffWriter.setEndian(self,endian)
PIL.TiffImagePlugin.AppendingTiffWriter.setup(self)
PIL.TiffImagePlugin.AppendingTiffWriter.skipIFDs(self)
PIL.TiffImagePlugin.AppendingTiffWriter.tell(self)
PIL.TiffImagePlugin.AppendingTiffWriter.write(self,data)
PIL.TiffImagePlugin.AppendingTiffWriter.writeLong(self,value)
PIL.TiffImagePlugin.AppendingTiffWriter.writeShort(self,value)
PIL.TiffImagePlugin.IFDRational(self,value,denominator=1)
PIL.TiffImagePlugin.IFDRational.__eq__(self,other)
PIL.TiffImagePlugin.IFDRational.__hash__(self)
PIL.TiffImagePlugin.IFDRational.__init__(self,value,denominator=1)
PIL.TiffImagePlugin.IFDRational.__repr__(self)
PIL.TiffImagePlugin.IFDRational._delegate(op)
PIL.TiffImagePlugin.IFDRational.denominator(a)
PIL.TiffImagePlugin.IFDRational.limit_rational(self,max_denominator)
PIL.TiffImagePlugin.IFDRational.numerator(a)
PIL.TiffImagePlugin.ImageFileDirectory_v1(self,*args,**kwargs)
PIL.TiffImagePlugin.ImageFileDirectory_v1.__contains__(self,tag)
PIL.TiffImagePlugin.ImageFileDirectory_v1.__getitem__(self,tag)
PIL.TiffImagePlugin.ImageFileDirectory_v1.__init__(self,*args,**kwargs)
PIL.TiffImagePlugin.ImageFileDirectory_v1.__iter__(self)
PIL.TiffImagePlugin.ImageFileDirectory_v1.__len__(self)
PIL.TiffImagePlugin.ImageFileDirectory_v1.__setitem__(self,tag,value)
PIL.TiffImagePlugin.ImageFileDirectory_v1.from_v2(cls,original)
PIL.TiffImagePlugin.ImageFileDirectory_v1.to_v2(self)
PIL.TiffImagePlugin.ImageFileDirectory_v2(self,ifh=b'II*\x00\x00\x00\x00\x00',prefix=None)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__contains__(self,tag)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__delitem__(self,tag)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__getitem__(self,tag)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__init__(self,ifh=b'II*\x00\x00\x00\x00\x00',prefix=None)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__iter__(self)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__len__(self)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__setitem__(self,tag,value)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__str__(self)
PIL.TiffImagePlugin.ImageFileDirectory_v2._ensure_read(self,fp,size)
PIL.TiffImagePlugin.ImageFileDirectory_v2._pack(self,fmt,*values)
PIL.TiffImagePlugin.ImageFileDirectory_v2._register_basic(idx_fmt_name)
PIL.TiffImagePlugin.ImageFileDirectory_v2._register_loader(idx,size)
PIL.TiffImagePlugin.ImageFileDirectory_v2._register_writer(idx)
PIL.TiffImagePlugin.ImageFileDirectory_v2._setitem(self,tag,value,legacy_api)
PIL.TiffImagePlugin.ImageFileDirectory_v2._unpack(self,fmt,data)
PIL.TiffImagePlugin.ImageFileDirectory_v2.legacy_api(self,value)
PIL.TiffImagePlugin.ImageFileDirectory_v2.load(self,fp)
PIL.TiffImagePlugin.ImageFileDirectory_v2.load_byte(self,data,legacy_api=True)
PIL.TiffImagePlugin.ImageFileDirectory_v2.load_rational(self,data,legacy_api=True)
PIL.TiffImagePlugin.ImageFileDirectory_v2.load_signed_rational(self,data,legacy_api=True)
PIL.TiffImagePlugin.ImageFileDirectory_v2.load_string(self,data,legacy_api=True)
PIL.TiffImagePlugin.ImageFileDirectory_v2.load_undefined(self,data,legacy_api=True)
PIL.TiffImagePlugin.ImageFileDirectory_v2.named(self)
PIL.TiffImagePlugin.ImageFileDirectory_v2.reset(self)
PIL.TiffImagePlugin.ImageFileDirectory_v2.save(self,fp)
PIL.TiffImagePlugin.ImageFileDirectory_v2.tobytes(self,offset=0)
PIL.TiffImagePlugin.ImageFileDirectory_v2.write_byte(self,data)
PIL.TiffImagePlugin.ImageFileDirectory_v2.write_rational(self,*values)
PIL.TiffImagePlugin.ImageFileDirectory_v2.write_signed_rational(self,*values)
PIL.TiffImagePlugin.ImageFileDirectory_v2.write_string(self,value)
PIL.TiffImagePlugin.ImageFileDirectory_v2.write_undefined(self,value)
PIL.TiffImagePlugin.TiffImageFile(self,fp=None,filename=None)
PIL.TiffImagePlugin.TiffImageFile.__init__(self,fp=None,filename=None)
PIL.TiffImagePlugin.TiffImageFile._close__fp(self)
PIL.TiffImagePlugin.TiffImageFile._load_libtiff(self)
PIL.TiffImagePlugin.TiffImageFile._open(self)
PIL.TiffImagePlugin.TiffImageFile._seek(self,frame)
PIL.TiffImagePlugin.TiffImageFile._setup(self)
PIL.TiffImagePlugin.TiffImageFile.load(self)
PIL.TiffImagePlugin.TiffImageFile.load_end(self)
PIL.TiffImagePlugin.TiffImageFile.n_frames(self)
PIL.TiffImagePlugin.TiffImageFile.seek(self,frame)
PIL.TiffImagePlugin.TiffImageFile.tell(self)
PIL.TiffImagePlugin._accept(prefix)
PIL.TiffImagePlugin._limit_rational(val,max_val)
PIL.TiffImagePlugin._limit_signed_rational(val,max_val,min_val)
PIL.TiffImagePlugin._save(im,fp,filename)
PIL.TiffImagePlugin._save_all(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/IcnsImagePlugin.py----------------------------------------
A:PIL.IcnsImagePlugin.enable_jpeg2k->PIL.features.check_codec('jpg_2000')
A:PIL.IcnsImagePlugin.sig->fobj.read(12)
A:PIL.IcnsImagePlugin.indata->fobj.read(length)
A:PIL.IcnsImagePlugin.im->self.icns.getimage(self.best_size)
A:PIL.IcnsImagePlugin.byte->fobj.read(1)
A:PIL.IcnsImagePlugin.band->PIL.Image.frombuffer('L', pixel_size, fobj.read(sizesq), 'raw', 'L', 0, 1)
A:PIL.IcnsImagePlugin.jp2kstream->fobj.read(length)
A:PIL.IcnsImagePlugin.f->io.BytesIO(jp2kstream)
A:PIL.IcnsImagePlugin.(sig, filesize)->nextheader(fobj)
A:PIL.IcnsImagePlugin.(sig, blocksize)->nextheader(fobj)
A:PIL.IcnsImagePlugin.sizes->self.itersizes()
A:PIL.IcnsImagePlugin.desc->self.dct.get(code)
A:PIL.IcnsImagePlugin.size->self.bestsize()
A:PIL.IcnsImagePlugin.channels->self.dataforsize(size)
A:PIL.IcnsImagePlugin.self.icns->IcnsFile(self.fp)
A:PIL.IcnsImagePlugin.self.info['sizes']->self.icns.itersizes()
A:PIL.IcnsImagePlugin.self.best_size->self.icns.bestsize()
A:PIL.IcnsImagePlugin.first_path->os.path.join(iconset, prefix + '.png')
A:PIL.IcnsImagePlugin.im_w->provided_images.get(w, im.resize((w, w), Image.LANCZOS))
A:PIL.IcnsImagePlugin.second_path->os.path.join(iconset, prefix + '@2x.png')
A:PIL.IcnsImagePlugin.im_w2->provided_images.get(w * 2, im.resize((w * 2, w * 2), Image.LANCZOS))
A:PIL.IcnsImagePlugin.(f, filename)->tempfile.mkstemp('.icns')
A:PIL.IcnsImagePlugin.convert_proc->subprocess.Popen(convert_cmd, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
A:PIL.IcnsImagePlugin.retcode->subprocess.Popen(convert_cmd, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL).wait()
A:PIL.IcnsImagePlugin.imf->IcnsImageFile(fp)
PIL.IcnsImagePlugin.IcnsFile(self,fobj)
PIL.IcnsImagePlugin.IcnsFile.__init__(self,fobj)
PIL.IcnsImagePlugin.IcnsFile.bestsize(self)
PIL.IcnsImagePlugin.IcnsFile.dataforsize(self,size)
PIL.IcnsImagePlugin.IcnsFile.getimage(self,size=None)
PIL.IcnsImagePlugin.IcnsFile.itersizes(self)
PIL.IcnsImagePlugin.IcnsImageFile(ImageFile.ImageFile)
PIL.IcnsImagePlugin.IcnsImageFile._open(self)
PIL.IcnsImagePlugin.IcnsImageFile.load(self)
PIL.IcnsImagePlugin.IcnsImageFile.size(self)
PIL.IcnsImagePlugin.IcnsImageFile.size(self,value)
PIL.IcnsImagePlugin._save(im,fp,filename)
PIL.IcnsImagePlugin.nextheader(fobj)
PIL.IcnsImagePlugin.read_32(fobj,start_length,size)
PIL.IcnsImagePlugin.read_32t(fobj,start_length,size)
PIL.IcnsImagePlugin.read_mk(fobj,start_length,size)
PIL.IcnsImagePlugin.read_png_or_jpeg2000(fobj,start_length,size)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImageMorph.py----------------------------------------
A:PIL.ImageMorph.self.lut->bytearray(f.read())
A:PIL.ImageMorph.n->len(patterns)
A:PIL.ImageMorph.pattern->pattern.replace(' ', '').replace('\n', '').replace(' ', '').replace('\n', '')
A:PIL.ImageMorph.m->re.search('(\\w*):?\\s*\\((.+?)\\)\\s*->\\s*(\\d)', p.replace('\n', ''))
A:PIL.ImageMorph.options->re.search('(\\w*):?\\s*\\((.+?)\\)\\s*->\\s*(\\d)', p.replace('\n', '')).group(1)
A:PIL.ImageMorph.result->int(m.group(3))
A:PIL.ImageMorph.p->re.compile(p)
A:PIL.ImageMorph.outimage->Image.new(image.mode, image.size, None)
A:PIL.ImageMorph.count->_imagingmorph.apply(bytes(self.lut), image.im.id, outimage.im.id)
PIL.ImageMorph.LutBuilder(self,patterns=None,op_name=None)
PIL.ImageMorph.LutBuilder.__init__(self,patterns=None,op_name=None)
PIL.ImageMorph.LutBuilder._pattern_permute(self,basic_pattern,options,basic_result)
PIL.ImageMorph.LutBuilder._string_permute(self,pattern,permutation)
PIL.ImageMorph.LutBuilder.add_patterns(self,patterns)
PIL.ImageMorph.LutBuilder.build_default_lut(self)
PIL.ImageMorph.LutBuilder.build_lut(self)
PIL.ImageMorph.LutBuilder.get_lut(self)
PIL.ImageMorph.MorphOp(self,lut=None,op_name=None,patterns=None)
PIL.ImageMorph.MorphOp.__init__(self,lut=None,op_name=None,patterns=None)
PIL.ImageMorph.MorphOp.apply(self,image)
PIL.ImageMorph.MorphOp.get_on_pixels(self,image)
PIL.ImageMorph.MorphOp.load_lut(self,filename)
PIL.ImageMorph.MorphOp.match(self,image)
PIL.ImageMorph.MorphOp.save_lut(self,filename)
PIL.ImageMorph.MorphOp.set_lut(self,lut)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImagePalette.py----------------------------------------
A:PIL.ImagePalette.new->ImagePalette()
A:PIL.ImagePalette.new.colors->self.colors.copy()
A:PIL.ImagePalette.arr->array.array('B', self.palette)
A:PIL.ImagePalette.self.palette->bytearray(self.palette)
A:PIL.ImagePalette.index->len(self.colors)
A:PIL.ImagePalette.fp->open(fp, 'w')
A:PIL.ImagePalette.palette->list(range(256))
A:PIL.ImagePalette.(r, g, b)->ImageColor.getrgb(white)
A:PIL.ImagePalette.r->make_linear_lut(0, r)
A:PIL.ImagePalette.g->make_linear_lut(0, g)
A:PIL.ImagePalette.b->make_linear_lut(0, b)
A:PIL.ImagePalette.lut->paletteHandler(fp).getpalette()
PIL.ImagePalette.ImagePalette(self,mode='RGB',palette=None,size=0)
PIL.ImagePalette.ImagePalette.__init__(self,mode='RGB',palette=None,size=0)
PIL.ImagePalette.ImagePalette.copy(self)
PIL.ImagePalette.ImagePalette.getcolor(self,color)
PIL.ImagePalette.ImagePalette.getdata(self)
PIL.ImagePalette.ImagePalette.save(self,fp)
PIL.ImagePalette.ImagePalette.tobytes(self)
PIL.ImagePalette.load(filename)
PIL.ImagePalette.make_gamma_lut(exp)
PIL.ImagePalette.make_linear_lut(black,white)
PIL.ImagePalette.negative(mode='RGB')
PIL.ImagePalette.random(mode='RGB')
PIL.ImagePalette.raw(rawmode,data)
PIL.ImagePalette.sepia(white='#fff0c0')
PIL.ImagePalette.wedge(mode='RGB')


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ContainerIO.py----------------------------------------
A:PIL.ContainerIO.self.pos->max(0, min(self.pos, self.length))
A:PIL.ContainerIO.n->min(n, self.length - self.pos)
A:PIL.ContainerIO.c->self.read(1)
A:PIL.ContainerIO.s->self.readline()
PIL.ContainerIO.ContainerIO(self,file,offset,length)
PIL.ContainerIO.ContainerIO.__init__(self,file,offset,length)
PIL.ContainerIO.ContainerIO.isatty(self)
PIL.ContainerIO.ContainerIO.read(self,n=0)
PIL.ContainerIO.ContainerIO.readline(self)
PIL.ContainerIO.ContainerIO.readlines(self)
PIL.ContainerIO.ContainerIO.seek(self,offset,mode=io.SEEK_SET)
PIL.ContainerIO.ContainerIO.tell(self)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/PsdImagePlugin.py----------------------------------------
A:PIL.PsdImagePlugin.s->read(26)
A:PIL.PsdImagePlugin.psd_bits->i16(s[22:])
A:PIL.PsdImagePlugin.psd_channels->i16(s[12:])
A:PIL.PsdImagePlugin.psd_mode->i16(s[24:])
A:PIL.PsdImagePlugin.size->i32(read(4))
A:PIL.PsdImagePlugin.data->read(i32(read(4)))
A:PIL.PsdImagePlugin.self.palette->ImagePalette.raw('RGB;L', data)
A:PIL.PsdImagePlugin.id->i16(read(2))
A:PIL.PsdImagePlugin.name->read(length).decode('latin-1', 'replace')
A:PIL.PsdImagePlugin.self.layers->_layerinfo(self.fp)
A:PIL.PsdImagePlugin.self.n_frames->len(self.layers)
A:PIL.PsdImagePlugin.self.tile->_maketile(self.fp, mode, (0, 0) + self.size, channels)
A:PIL.PsdImagePlugin.self.im->Image.core.fill(self.mode, self.size, 0)
A:PIL.PsdImagePlugin.y0->i32(read(4))
A:PIL.PsdImagePlugin.x0->i32(read(4))
A:PIL.PsdImagePlugin.y1->i32(read(4))
A:PIL.PsdImagePlugin.x1->i32(read(4))
A:PIL.PsdImagePlugin.types->list(range(i16(read(2))))
A:PIL.PsdImagePlugin.type->i16(read(2))
A:PIL.PsdImagePlugin.length->i8(read(1))
A:PIL.PsdImagePlugin.t->_maketile(file, m, bbox, 1)
A:PIL.PsdImagePlugin.compression->i16(read(2))
A:PIL.PsdImagePlugin.offset->file.tell()
A:PIL.PsdImagePlugin.bytecount->read(channels * ysize * 2)
PIL.PsdImagePlugin.PsdImageFile(ImageFile.ImageFile)
PIL.PsdImagePlugin.PsdImageFile._close__fp(self)
PIL.PsdImagePlugin.PsdImageFile._open(self)
PIL.PsdImagePlugin.PsdImageFile.load_prepare(self)
PIL.PsdImagePlugin.PsdImageFile.seek(self,layer)
PIL.PsdImagePlugin.PsdImageFile.tell(self)
PIL.PsdImagePlugin._accept(prefix)
PIL.PsdImagePlugin._layerinfo(file)
PIL.PsdImagePlugin._maketile(file,mode,bbox,channels)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/BmpImagePlugin.py----------------------------------------
A:PIL.BmpImagePlugin.file_info['header_size']->i32(read(4))
A:PIL.BmpImagePlugin.header_data->ImageFile._safe_read(self.fp, file_info['header_size'] - 4)
A:PIL.BmpImagePlugin.file_info['width']->i32(header_data[0:4])
A:PIL.BmpImagePlugin.file_info['height']->i16(header_data[2:4])
A:PIL.BmpImagePlugin.file_info['planes']->i16(header_data[8:10])
A:PIL.BmpImagePlugin.file_info['bits']->i16(header_data[10:12])
A:PIL.BmpImagePlugin.file_info['compression']->i32(header_data[12:16])
A:PIL.BmpImagePlugin.file_info['data_size']->i32(header_data[16:20])
A:PIL.BmpImagePlugin.file_info['colors']->i32(header_data[28:32])
A:PIL.BmpImagePlugin.self.info['dpi']->tuple((int(x / 39.3701 + 0.5) for x in file_info['pixels_per_meter']))
A:PIL.BmpImagePlugin.file_info[mask]->i32(read(4))
A:PIL.BmpImagePlugin.(self.mode, raw_mode)->BIT2MODE.get(file_info['bits'], (None, None))
A:PIL.BmpImagePlugin.palette->read(padding * file_info['colors'])
A:PIL.BmpImagePlugin.self.palette->ImagePalette.raw('BGRX' if padding == 4 else 'BGR', palette)
A:PIL.BmpImagePlugin.head_data->self.fp.read(14)
A:PIL.BmpImagePlugin.offset->i32(head_data[10:14])
A:PIL.BmpImagePlugin.dpi->info.get('dpi', (96, 96))
A:PIL.BmpImagePlugin.ppm->tuple(map(lambda x: int(x * 39.3701 + 0.5), dpi))
PIL.BmpImagePlugin.BmpImageFile(ImageFile.ImageFile)
PIL.BmpImagePlugin.BmpImageFile._bitmap(self,header=0,offset=0)
PIL.BmpImagePlugin.BmpImageFile._open(self)
PIL.BmpImagePlugin.DibImageFile(BmpImageFile)
PIL.BmpImagePlugin.DibImageFile._open(self)
PIL.BmpImagePlugin._accept(prefix)
PIL.BmpImagePlugin._dib_accept(prefix)
PIL.BmpImagePlugin._dib_save(im,fp,filename)
PIL.BmpImagePlugin._save(im,fp,filename,bitmap_header=True)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImageCms.py----------------------------------------
A:PIL.ImageCms._imagingcms->deferred_error(ex)
A:PIL.ImageCms.profile_bytes_path->ImageCmsProfile(profile).encode()
A:PIL.ImageCms.self.transform->core.buildProofTransform(input.profile, output.profile, proof.profile, input_mode, output_mode, intent, proof_intent, flags)
A:PIL.ImageCms.imOut->ImageCmsTransform(inputProfile, outputProfile, im.mode, outputMode, renderingIntent, flags=flags).apply(im)
A:PIL.ImageCms.imOut.info['icc_profile']->self.output_profile.tobytes()
A:PIL.ImageCms.im.info['icc_profile']->self.output_profile.tobytes()
A:PIL.ImageCms.profile->ImageCmsProfile(profile)
A:PIL.ImageCms.inputProfile->ImageCmsProfile(inputProfile)
A:PIL.ImageCms.outputProfile->ImageCmsProfile(outputProfile)
A:PIL.ImageCms.transform->ImageCmsTransform(inputProfile, outputProfile, im.mode, outputMode, renderingIntent, flags=flags)
A:PIL.ImageCms.proofProfile->ImageCmsProfile(proofProfile)
A:PIL.ImageCms.colorTemp->float(colorTemp)
PIL.ImageCms.ImageCmsProfile(self,profile)
PIL.ImageCms.ImageCmsProfile.__init__(self,profile)
PIL.ImageCms.ImageCmsProfile._set(self,profile,filename=None)
PIL.ImageCms.ImageCmsProfile.tobytes(self)
PIL.ImageCms.ImageCmsTransform(self,input,output,input_mode,output_mode,intent=INTENT_PERCEPTUAL,proof=None,proof_intent=INTENT_ABSOLUTE_COLORIMETRIC,flags=0)
PIL.ImageCms.ImageCmsTransform.__init__(self,input,output,input_mode,output_mode,intent=INTENT_PERCEPTUAL,proof=None,proof_intent=INTENT_ABSOLUTE_COLORIMETRIC,flags=0)
PIL.ImageCms.ImageCmsTransform.apply(self,im,imOut=None)
PIL.ImageCms.ImageCmsTransform.apply_in_place(self,im)
PIL.ImageCms.ImageCmsTransform.point(self,im)
PIL.ImageCms.PyCMSError(Exception)
PIL.ImageCms.applyTransform(im,transform,inPlace=False)
PIL.ImageCms.buildProofTransform(inputProfile,outputProfile,proofProfile,inMode,outMode,renderingIntent=INTENT_PERCEPTUAL,proofRenderingIntent=INTENT_ABSOLUTE_COLORIMETRIC,flags=FLAGS['SOFTPROOFING'])
PIL.ImageCms.buildTransform(inputProfile,outputProfile,inMode,outMode,renderingIntent=INTENT_PERCEPTUAL,flags=0)
PIL.ImageCms.createProfile(colorSpace,colorTemp=-1)
PIL.ImageCms.getDefaultIntent(profile)
PIL.ImageCms.getOpenProfile(profileFilename)
PIL.ImageCms.getProfileCopyright(profile)
PIL.ImageCms.getProfileDescription(profile)
PIL.ImageCms.getProfileInfo(profile)
PIL.ImageCms.getProfileManufacturer(profile)
PIL.ImageCms.getProfileModel(profile)
PIL.ImageCms.getProfileName(profile)
PIL.ImageCms.get_display_profile(handle=None)
PIL.ImageCms.isIntentSupported(profile,intent,direction)
PIL.ImageCms.profileToProfile(im,inputProfile,outputProfile,renderingIntent=INTENT_PERCEPTUAL,outputMode=None,inPlace=False,flags=0)
PIL.ImageCms.versions()


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/GribStubImagePlugin.py----------------------------------------
A:PIL.GribStubImagePlugin.offset->self.fp.tell()
A:PIL.GribStubImagePlugin.loader->self._load()
PIL.GribStubImagePlugin.GribStubImageFile(ImageFile.StubImageFile)
PIL.GribStubImagePlugin.GribStubImageFile._load(self)
PIL.GribStubImagePlugin.GribStubImageFile._open(self)
PIL.GribStubImagePlugin._accept(prefix)
PIL.GribStubImagePlugin._save(im,fp,filename)
PIL.GribStubImagePlugin.register_handler(handler)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/FtexImagePlugin.py----------------------------------------
A:PIL.FtexImagePlugin.self._size->struct.unpack('<2i', self.fp.read(8))
A:PIL.FtexImagePlugin.(mipmap_count, format_count)->struct.unpack('<2i', self.fp.read(8))
A:PIL.FtexImagePlugin.(format, where)->struct.unpack('<2i', self.fp.read(8))
A:PIL.FtexImagePlugin.(mipmap_size,)->struct.unpack('<i', self.fp.read(4))
A:PIL.FtexImagePlugin.data->self.fp.read(mipmap_size)
A:PIL.FtexImagePlugin.self.fp->BytesIO(data)
PIL.FtexImagePlugin.FtexImageFile(ImageFile.ImageFile)
PIL.FtexImagePlugin.FtexImageFile._open(self)
PIL.FtexImagePlugin.FtexImageFile.load_seek(self,pos)
PIL.FtexImagePlugin._validate(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/GifImagePlugin.py----------------------------------------
A:PIL.GifImagePlugin.s->self.fp.read(9)
A:PIL.GifImagePlugin.flags->i8(s[8])
A:PIL.GifImagePlugin.self.info['background']->i8(s[11])
A:PIL.GifImagePlugin.p->ImagePalette.raw('RGB', p)
A:PIL.GifImagePlugin.self.__rewind->self.fp.tell()
A:PIL.GifImagePlugin.current->self.tell()
A:PIL.GifImagePlugin.self.palette->ImagePalette.raw('RGB', self.fp.read(3 << bits))
A:PIL.GifImagePlugin.block->self.data()
A:PIL.GifImagePlugin.info['transparency']->i8(block[3])
A:PIL.GifImagePlugin.info['loop']->i16(block[1:3])
A:PIL.GifImagePlugin.bits->i8(self.fp.read(1))
A:PIL.GifImagePlugin.self.__offset->self.fp.tell()
A:PIL.GifImagePlugin.self.dispose->self._crop(self.dispose, self.dispose_extent)
A:PIL.GifImagePlugin.updated->self._crop(self.im, self.dispose_extent)
A:PIL.GifImagePlugin.self._prev_im->self.im.copy()
A:PIL.GifImagePlugin.source_palette->bytearray((i // 3 for i in range(768)))
A:PIL.GifImagePlugin.im.palette->ImagePalette.ImagePalette('RGB', palette=source_palette)
A:PIL.GifImagePlugin.used_palette_colors->_get_optimize(im, info)
A:PIL.GifImagePlugin.im_out->_normalize_palette(im_out, palette, im.encoderinfo)
A:PIL.GifImagePlugin.duration->int(im.encoderinfo['duration'] / 10)
A:PIL.GifImagePlugin.disposal->int(im.encoderinfo.get('disposal', 0))
A:PIL.GifImagePlugin.im_frame->im_frame.crop(frame_data['bbox']).crop(frame_data['bbox'])
A:PIL.GifImagePlugin.encoderinfo->im.encoderinfo.copy()
A:PIL.GifImagePlugin.background->_get_background(im, info.get('background'))
A:PIL.GifImagePlugin.background_im->Image.new('P', im_frame.size, background)
A:PIL.GifImagePlugin.delta->ImageChops.subtract_modulo(im_frame.convert('RGB'), base_im.convert('RGB'))
A:PIL.GifImagePlugin.bbox->ImageChops.subtract_modulo(im_frame.convert('RGB'), base_im.convert('RGB')).getbbox()
A:PIL.GifImagePlugin.im.encoderinfo['duration']->sum(im.encoderinfo['duration'])
A:PIL.GifImagePlugin.palette->im.encoderinfo.get('palette', im.info.get('palette'))
A:PIL.GifImagePlugin.im.encoderinfo['optimize']->im.encoderinfo.get('optimize', True)
A:PIL.GifImagePlugin.interlace->im.encoderinfo.get('interlace', 1)
A:PIL.GifImagePlugin.transparency->_get_optimize(im, info).index(transparency)
A:PIL.GifImagePlugin.comment->comment.encode().encode()
A:PIL.GifImagePlugin.include_color_table->im.encoderinfo.get('include_color_table')
A:PIL.GifImagePlugin.palette_bytes->_get_palette_bytes(im)
A:PIL.GifImagePlugin.color_table_size->_get_color_table_size(palette_bytes)
A:PIL.GifImagePlugin.tempfile->im._dump()
A:PIL.GifImagePlugin.quant_proc->subprocess.Popen(quant_cmd, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
A:PIL.GifImagePlugin.togif_proc->subprocess.Popen(togif_cmd, stdin=quant_proc.stdout, stdout=f, stderr=subprocess.DEVNULL)
A:PIL.GifImagePlugin.retcode->subprocess.Popen(togif_cmd, stdin=quant_proc.stdout, stdout=f, stderr=subprocess.DEVNULL).wait()
A:PIL.GifImagePlugin.im_mod->_normalize_palette(im, palette, info)
A:PIL.GifImagePlugin.header->_get_global_header(im, info)
A:PIL.GifImagePlugin.fp->Collector()
PIL.GifImagePlugin.GifImageFile(ImageFile.ImageFile)
PIL.GifImagePlugin.GifImageFile._close__fp(self)
PIL.GifImagePlugin.GifImageFile._open(self)
PIL.GifImagePlugin.GifImageFile._seek(self,frame)
PIL.GifImagePlugin.GifImageFile.data(self)
PIL.GifImagePlugin.GifImageFile.is_animated(self)
PIL.GifImagePlugin.GifImageFile.load_end(self)
PIL.GifImagePlugin.GifImageFile.n_frames(self)
PIL.GifImagePlugin.GifImageFile.seek(self,frame)
PIL.GifImagePlugin.GifImageFile.tell(self)
PIL.GifImagePlugin._accept(prefix)
PIL.GifImagePlugin._get_background(im,infoBackground)
PIL.GifImagePlugin._get_color_table_size(palette_bytes)
PIL.GifImagePlugin._get_global_header(im,info)
PIL.GifImagePlugin._get_header_palette(palette_bytes)
PIL.GifImagePlugin._get_optimize(im,info)
PIL.GifImagePlugin._get_palette_bytes(im)
PIL.GifImagePlugin._normalize_mode(im,initial_call=False)
PIL.GifImagePlugin._normalize_palette(im,palette,info)
PIL.GifImagePlugin._save(im,fp,filename,save_all=False)
PIL.GifImagePlugin._save_all(im,fp,filename)
PIL.GifImagePlugin._save_netpbm(im,fp,filename)
PIL.GifImagePlugin._write_frame_data(fp,im_frame,offset,params)
PIL.GifImagePlugin._write_local_header(fp,im,offset,flags)
PIL.GifImagePlugin._write_multiple_frames(im,fp,palette)
PIL.GifImagePlugin._write_single_frame(im,fp,palette)
PIL.GifImagePlugin.get_interlace(im)
PIL.GifImagePlugin.getdata(im,offset=(0,0),**params)
PIL.GifImagePlugin.getheader(im,palette=None,info=None)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/GdImageFile.py----------------------------------------
A:PIL.GdImageFile.s->self.fp.read(1037)
A:PIL.GdImageFile.trueColor->i8(s[6])
A:PIL.GdImageFile.tindex->i32(s[7 + trueColorOffset:7 + trueColorOffset + 4])
A:PIL.GdImageFile.self.palette->ImagePalette.raw('XBGR', s[7 + trueColorOffset + 4:7 + trueColorOffset + 4 + 256 * 4])
PIL.GdImageFile.GdImageFile(ImageFile.ImageFile)
PIL.GdImageFile.GdImageFile._open(self)
PIL.GdImageFile.open(fp,mode='r')


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/JpegPresets.py----------------------------------------


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImageTransform.py----------------------------------------
A:PIL.ImageTransform.(method, data)->self.getdata()
PIL.ImageTransform.AffineTransform(Transform)
PIL.ImageTransform.ExtentTransform(Transform)
PIL.ImageTransform.MeshTransform(Transform)
PIL.ImageTransform.QuadTransform(Transform)
PIL.ImageTransform.Transform(self,data)
PIL.ImageTransform.Transform.__init__(self,data)
PIL.ImageTransform.Transform.getdata(self)
PIL.ImageTransform.Transform.transform(self,size,image,**options)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/GimpGradientFile.py----------------------------------------
A:PIL.GimpGradientFile.scale->segment((xm - x0) / w, (x - x0) / w)
A:PIL.GimpGradientFile.r->o8(int(255 * ((rgb1[0] - rgb0[0]) * scale + rgb0[0]) + 0.5))
A:PIL.GimpGradientFile.g->o8(int(255 * ((rgb1[1] - rgb0[1]) * scale + rgb0[1]) + 0.5))
A:PIL.GimpGradientFile.b->o8(int(255 * ((rgb1[2] - rgb0[2]) * scale + rgb0[2]) + 0.5))
A:PIL.GimpGradientFile.a->o8(int(255 * ((rgb1[3] - rgb0[3]) * scale + rgb0[3]) + 0.5))
A:PIL.GimpGradientFile.line->fp.readline().strip()
A:PIL.GimpGradientFile.count->int(line)
A:PIL.GimpGradientFile.s->fp.readline().split()
A:PIL.GimpGradientFile.cspace->int(s[12])
PIL.GimpGradientFile.GimpGradientFile(self,fp)
PIL.GimpGradientFile.GimpGradientFile.__init__(self,fp)
PIL.GimpGradientFile.GradientFile
PIL.GimpGradientFile.GradientFile.getpalette(self,entries=256)
PIL.GimpGradientFile.curved(middle,pos)
PIL.GimpGradientFile.linear(middle,pos)
PIL.GimpGradientFile.sine(middle,pos)
PIL.GimpGradientFile.sphere_decreasing(middle,pos)
PIL.GimpGradientFile.sphere_increasing(middle,pos)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/XpmImagePlugin.py----------------------------------------
A:PIL.XpmImagePlugin.xpm_head->re.compile(b'"([0-9]*) ([0-9]*) ([0-9]*) ([0-9]*)')
A:PIL.XpmImagePlugin.s->s[2:-2].split()
A:PIL.XpmImagePlugin.m->re.compile(b'"([0-9]*) ([0-9]*) ([0-9]*) ([0-9]*)').match(s)
A:PIL.XpmImagePlugin.pal->int(m.group(3))
A:PIL.XpmImagePlugin.bpp->int(m.group(4))
A:PIL.XpmImagePlugin.c->i8(s[1])
A:PIL.XpmImagePlugin.rgb->int(rgb[1:], 16)
A:PIL.XpmImagePlugin.self.palette->ImagePalette.raw('RGB', b''.join(palette))
A:PIL.XpmImagePlugin.s[i]->self.fp.readline()[1:xsize + 1].ljust(xsize)
PIL.XpmImagePlugin.XpmImageFile(ImageFile.ImageFile)
PIL.XpmImagePlugin.XpmImageFile._open(self)
PIL.XpmImagePlugin.XpmImageFile.load_read(self,bytes)
PIL.XpmImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImageWin.py----------------------------------------
A:PIL.ImageWin.mode->Image.getmodebase(mode)
A:PIL.ImageWin.self.image->Image.core.display(mode, size)
A:PIL.ImageWin.dc->self.image.getdc(handle)
A:PIL.ImageWin.result->self.image.query_palette(handle)
A:PIL.ImageWin.handle->self.image.getdc(handle)
A:PIL.ImageWin.im->im.convert(self.mode).convert(self.mode)
A:PIL.ImageWin.self.hwnd->Image.core.createwindow(title, self.__dispatcher, width or 0, height or 0)
A:PIL.ImageWin.image->Dib(image)
PIL.ImageWin.Dib(self,image,size=None)
PIL.ImageWin.Dib.__init__(self,image,size=None)
PIL.ImageWin.Dib.draw(self,handle,dst,src=None)
PIL.ImageWin.Dib.expose(self,handle)
PIL.ImageWin.Dib.frombytes(self,buffer)
PIL.ImageWin.Dib.paste(self,im,box=None)
PIL.ImageWin.Dib.query_palette(self,handle)
PIL.ImageWin.Dib.tobytes(self)
PIL.ImageWin.HDC(self,dc)
PIL.ImageWin.HDC.__init__(self,dc)
PIL.ImageWin.HDC.__int__(self)
PIL.ImageWin.HWND(self,wnd)
PIL.ImageWin.HWND.__init__(self,wnd)
PIL.ImageWin.HWND.__int__(self)
PIL.ImageWin.ImageWindow(self,image,title='PIL')
PIL.ImageWin.ImageWindow.__init__(self,image,title='PIL')
PIL.ImageWin.ImageWindow.ui_handle_repair(self,dc,x0,y0,x1,y1)
PIL.ImageWin.Window(self,title='PIL',width=None,height=None)
PIL.ImageWin.Window.__dispatcher(self,action,*args)
PIL.ImageWin.Window.__init__(self,title='PIL',width=None,height=None)
PIL.ImageWin.Window.mainloop(self)
PIL.ImageWin.Window.ui_handle_clear(self,dc,x0,y0,x1,y1)
PIL.ImageWin.Window.ui_handle_damage(self,x0,y0,x1,y1)
PIL.ImageWin.Window.ui_handle_destroy(self)
PIL.ImageWin.Window.ui_handle_repair(self,dc,x0,y0,x1,y1)
PIL.ImageWin.Window.ui_handle_resize(self,width,height)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/IcoImagePlugin.py----------------------------------------
A:PIL.IcoImagePlugin.sizes->list(self.info['sizes'])
A:PIL.IcoImagePlugin.image_io->BytesIO()
A:PIL.IcoImagePlugin.tmp->self.ico.getimage(self.size).copy()
A:PIL.IcoImagePlugin.image_bytes->BytesIO().read()
A:PIL.IcoImagePlugin.bytes_len->len(image_bytes)
A:PIL.IcoImagePlugin.current->fp.tell()
A:PIL.IcoImagePlugin.s->buf.read(16)
A:PIL.IcoImagePlugin.self.nb_items->i16(s[4:])
A:PIL.IcoImagePlugin.self.entry->sorted(self.entry, key=lambda x: x['square'])
A:PIL.IcoImagePlugin.data->self.buf.read(8)
A:PIL.IcoImagePlugin.im->self.ico.getimage(self.size)
A:PIL.IcoImagePlugin.mask->Image.frombuffer('1', im.size, mask_data, 'raw', ('1;I', int(w / 8), -1))
A:PIL.IcoImagePlugin.total_bytes->int(w * im.size[1] / 8)
A:PIL.IcoImagePlugin.mask_data->self.buf.read(total_bytes)
A:PIL.IcoImagePlugin.self.ico->IcoFile(self.fp)
A:PIL.IcoImagePlugin.self.info['sizes']->set(sizes)
A:PIL.IcoImagePlugin.index->self.ico.getentryindex(self.size)
PIL.IcoImagePlugin.IcoFile(self,buf)
PIL.IcoImagePlugin.IcoFile.__init__(self,buf)
PIL.IcoImagePlugin.IcoFile.frame(self,idx)
PIL.IcoImagePlugin.IcoFile.getentryindex(self,size,bpp=False)
PIL.IcoImagePlugin.IcoFile.getimage(self,size,bpp=False)
PIL.IcoImagePlugin.IcoFile.sizes(self)
PIL.IcoImagePlugin.IcoImageFile(ImageFile.ImageFile)
PIL.IcoImagePlugin.IcoImageFile._open(self)
PIL.IcoImagePlugin.IcoImageFile.load(self)
PIL.IcoImagePlugin.IcoImageFile.load_seek(self)
PIL.IcoImagePlugin.IcoImageFile.size(self)
PIL.IcoImagePlugin.IcoImageFile.size(self,value)
PIL.IcoImagePlugin._accept(prefix)
PIL.IcoImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/Image.py----------------------------------------
A:PIL.Image.logger->logging.getLogger(__name__)
A:PIL.Image.MAX_IMAGE_PIXELS->int(1024 * 1024 * 1024 // 4 // 3)
A:PIL.Image.core->deferred_error(ImportError('The _imaging C module is not installed.'))
A:PIL.Image.USE_CFFI_ACCESS->hasattr(sys, 'pypy_version_info')
A:PIL.Image.MODES->sorted(_MODEINFO)
A:PIL.Image.decoder->getattr(core, decoder_name + '_decoder')
A:PIL.Image.encoder->getattr(core, encoder_name + '_encoder')
A:PIL.Image.new->Image.reduce(self, factor, box=reduce_box)._new(im)
A:PIL.Image.new.palette->ImagePalette.raw('RGB', new.im.getpalette('RGB'))
A:PIL.Image.new.info->Image.reduce(self, factor, box=reduce_box).info.copy()
A:PIL.Image.self.im->deferred_error(ImportError('The _imaging C module is not installed.')).new(mode, size)
A:PIL.Image.(f, filename)->tempfile.mkstemp(suffix)
A:PIL.Image.b->io.BytesIO()
A:PIL.Image.(shape, typestr)->_conv_type_shape(self)
A:PIL.Image.new['data']->Image.reduce(self, factor, box=reduce_box).tobytes()
A:PIL.Image.e->_getencoder(self.mode, encoder_name, args)
A:PIL.Image.bufsize->max(65536, self.size[0] * 4)
A:PIL.Image.(l, s, d)->_getencoder(self.mode, encoder_name, args).encode(bufsize)
A:PIL.Image.data->bytes(data)
A:PIL.Image.d->_getdecoder(self.mode, decoder_name, args)
A:PIL.Image.s->_getdecoder(self.mode, decoder_name, args).decode(data)
A:PIL.Image.self.pyaccess->PyAccess.new(self, self.readonly)
A:PIL.Image.im->_open_core(fp, filename, prefix, formats)
A:PIL.Image.transparency->tuple([convert_transparency(matrix[i * 4:i * 4 + 4], transparency) for i in range(0, len(transparency))])
A:PIL.Image.new_im->Image.reduce(self, factor, box=reduce_box)._new(im)
A:PIL.Image.trns_im->trns_im.convert('RGB').convert('RGB')
A:PIL.Image.t->trns_im.convert('RGB').convert('RGB').palette.getcolor(t)
A:PIL.Image.trns->trns_im.convert('RGB').convert('RGB').getpixel((0, 0))
A:PIL.Image.new.info['transparency']->Image.reduce(self, factor, box=reduce_box)._new(im).palette.getcolor(trns)
A:PIL.Image.new_im.info['transparency']->Image.reduce(self, factor, box=reduce_box)._new(im).palette.getcolor(trns)
A:PIL.Image.mode->_open_core(fp, filename, prefix, formats).im.getpalettemode()
A:PIL.Image.im.palette->ImagePalette.ImagePalette()
A:PIL.Image.(x0, y0, x1, y1)->map(int, map(round, box))
A:PIL.Image.filter->filter()
A:PIL.Image.multiband->isinstance(filter, ImageFilter.MultibandFilter)
A:PIL.Image.h->Image.reduce(self, factor, box=reduce_box).im.histogram()
A:PIL.Image.self._exif->Exif()
A:PIL.Image.exif_info->bytes.fromhex(''.join(self.info['Raw profile type exif'].split('\n')[3:]))
A:PIL.Image.xmp_tags->Image.reduce(self, factor, box=reduce_box).info.get('XML:com.adobe.xmp')
A:PIL.Image.root->xml.etree.ElementTree.fromstring(xmp_tags)
A:PIL.Image.orientation->elem.attrib.get('{http://ns.adobe.com/tiff/1.0/}Orientation')
A:PIL.Image.self._exif[274]->int(orientation)
A:PIL.Image.(x, y)->map(math.floor, size)
A:PIL.Image.extrema->Image.reduce(self, factor, box=reduce_box).getextrema()
A:PIL.Image.overlay->_open_core(fp, filename, prefix, formats).crop(source)
A:PIL.Image.background->Image.reduce(self, factor, box=reduce_box).crop(box)
A:PIL.Image.result->alpha_composite(background, overlay)
A:PIL.Image.(scale, offset)->_getscaleoffset(lut)
A:PIL.Image.alpha->new('L', self.size, alpha)
A:PIL.Image.palette->ImagePalette.raw(rawmode, data)
A:PIL.Image.value->Image.reduce(self, factor, box=reduce_box).palette.getcolor(value)
A:PIL.Image.real_source_palette->bytearray((i // 3 for i in range(768)))
A:PIL.Image.mapping_palette->bytearray(new_positions)
A:PIL.Image.m_im->m_im.convert('L').convert('L')
A:PIL.Image.m_im.palette->ImagePalette.ImagePalette('RGB', palette=palette_bytes, size=len(palette_bytes))
A:PIL.Image.size->tuple(size)
A:PIL.Image.box->tuple(box)
A:PIL.Image.reduce_box->Image.reduce(self, factor, box=reduce_box)._get_safe_box(size, resample, box)
A:PIL.Image.self->Image.reduce(self, factor, box=reduce_box)
A:PIL.Image.(matrix[2], matrix[5])->transform(-(nw - w) / 2.0, -(nh - h) / 2.0, matrix)
A:PIL.Image.filename->str(fp.resolve())
A:PIL.Image.save_all->params.pop('save_all', False)
A:PIL.Image.ext->os.path.splitext(filename)[1].lower()
A:PIL.Image.fp->io.BytesIO(fp.read())
A:PIL.Image.ims->map(self._new, self.im.split())
A:PIL.Image.channel->Image.reduce(self, factor, box=reduce_box).getbands().index(channel)
A:PIL.Image.x->round_aspect(y * aspect, key=lambda n: abs(aspect - n / y))
A:PIL.Image.y->round_aspect(x / aspect, key=lambda n: 0 if n == 0 else abs(aspect - x / n))
A:PIL.Image.res->Image.reduce(self, factor, box=reduce_box).draft(None, (size[0] * reducing_gap, size[1] * reducing_gap))
A:PIL.Image.(method, data)->method.getdata()
A:PIL.Image.im.info->Image.reduce(self, factor, box=reduce_box).info.copy()
A:PIL.Image.color->_open_core(fp, filename, prefix, formats).palette.getcolor(color)
A:PIL.Image.ndim->len(shape)
A:PIL.Image.strides->arr.get('strides', None)
A:PIL.Image.obj->obj.tostring().tostring()
A:PIL.Image.prefix->io.BytesIO(fp.read()).read(16)
A:PIL.Image.image->image2.copy()
A:PIL.Image.id->id.upper().upper()
A:PIL.Image.EXTENSION[extension.lower()]->id.upper().upper().upper()
A:PIL.Image.var->env[var_name].lower()
A:PIL.Image.info->TiffImagePlugin.ImageFileDirectory_v2(self.head)
A:PIL.Image.self.fp->io.BytesIO(data)
A:PIL.Image.self.head->Image.reduce(self, factor, box=reduce_box).fp.read(8)
A:PIL.Image.self._info->TiffImagePlugin.ImageFileDirectory_v2(self.head)
A:PIL.Image.ifd->TiffImagePlugin.ImageFileDirectory_v2(ifh=head)
A:PIL.Image.self._ifds[tag]->Image.reduce(self, factor, box=reduce_box)._get_ifd_dict(tag)
A:PIL.Image.ifd_offset->i32le(exif_data[8:12])
A:PIL.Image.(ifd_tag, typ, count, data)->struct.unpack('>HHL4s', ifd_data[i * 12 + 2:(i + 1) * 12 + 2])
A:PIL.Image.(offset,)->struct.unpack('>L', data)
A:PIL.Image.makernote[ifd_tag]->handler(ImageFileDirectory_v2(), data, False)
A:PIL.Image.self._ifds[37500]->dict(self._fixup_dict(makernote))
A:PIL.Image.camerainfo['TimeStamp']->i32le(self.fp.read(12))
A:PIL.Image.camerainfo['InternalSerialNumber']->Image.reduce(self, factor, box=reduce_box).fp.read(4)
A:PIL.Image.parallax->Image.reduce(self, factor, box=reduce_box).fp.read(4)
A:PIL.Image.camerainfo['Parallax']->handler(ImageFileDirectory_v2(), parallax, False)
A:PIL.Image.camerainfo['Category']->Image.reduce(self, factor, box=reduce_box).fp.read(2)
A:PIL.Image.keys->set(self._data)
A:PIL.Image.self._data[tag]->Image.reduce(self, factor, box=reduce_box).get_ifd(tag)
PIL.Image.DecompressionBombError(Exception)
PIL.Image.DecompressionBombWarning(RuntimeWarning)
PIL.Image.Exif(self)
PIL.Image.Exif.__contains__(self,tag)
PIL.Image.Exif.__delitem__(self,tag)
PIL.Image.Exif.__getitem__(self,tag)
PIL.Image.Exif.__init__(self)
PIL.Image.Exif.__iter__(self)
PIL.Image.Exif.__len__(self)
PIL.Image.Exif.__setitem__(self,tag,value)
PIL.Image.Exif.__str__(self)
PIL.Image.Exif._fixup(self,value)
PIL.Image.Exif._fixup_dict(self,src_dict)
PIL.Image.Exif._get_ifd_dict(self,tag)
PIL.Image.Exif.get_ifd(self,tag)
PIL.Image.Exif.load(self,data)
PIL.Image.Exif.tobytes(self,offset=8)
PIL.Image.Image(self)
PIL.Image.Image.__array_interface__(self)
PIL.Image.Image.__enter__(self)
PIL.Image.Image.__eq__(self,other)
PIL.Image.Image.__exit__(self,*args)
PIL.Image.Image.__getstate__(self)
PIL.Image.Image.__init__(self)
PIL.Image.Image.__repr__(self)
PIL.Image.Image.__setstate__(self,state)
PIL.Image.Image.__transformer(self,box,image,method,data,resample=NEAREST,fill=1)
PIL.Image.Image._copy(self)
PIL.Image.Image._crop(self,im,box)
PIL.Image.Image._dump(self,file=None,format=None,**options)
PIL.Image.Image._ensure_mutable(self)
PIL.Image.Image._expand(self,xmargin,ymargin=None)
PIL.Image.Image._get_safe_box(self,size,resample,box)
PIL.Image.Image._new(self,im)
PIL.Image.Image._repr_png_(self)
PIL.Image.Image.alpha_composite(self,im,dest=(0,0),source=(0,0))
PIL.Image.Image.close(self)
PIL.Image.Image.convert(self,mode=None,matrix=None,dither=None,palette=WEB,colors=256)
PIL.Image.Image.copy(self)
PIL.Image.Image.crop(self,box=None)
PIL.Image.Image.draft(self,mode,size)
PIL.Image.Image.effect_spread(self,distance)
PIL.Image.Image.entropy(self,mask=None,extrema=None)
PIL.Image.Image.filter(self,filter)
PIL.Image.Image.frombytes(self,data,decoder_name='raw',*args)
PIL.Image.Image.getbands(self)
PIL.Image.Image.getbbox(self)
PIL.Image.Image.getchannel(self,channel)
PIL.Image.Image.getcolors(self,maxcolors=256)
PIL.Image.Image.getdata(self,band=None)
PIL.Image.Image.getexif(self)
PIL.Image.Image.getextrema(self)
PIL.Image.Image.getim(self)
PIL.Image.Image.getpalette(self)
PIL.Image.Image.getpixel(self,xy)
PIL.Image.Image.getprojection(self)
PIL.Image.Image.height(self)
PIL.Image.Image.histogram(self,mask=None,extrema=None)
PIL.Image.Image.load(self)
PIL.Image.Image.paste(self,im,box=None,mask=None)
PIL.Image.Image.point(self,lut,mode=None)
PIL.Image.Image.putalpha(self,alpha)
PIL.Image.Image.putdata(self,data,scale=1.0,offset=0.0)
PIL.Image.Image.putpalette(self,data,rawmode='RGB')
PIL.Image.Image.putpixel(self,xy,value)
PIL.Image.Image.quantize(self,colors=256,method=None,kmeans=0,palette=None,dither=1)
PIL.Image.Image.reduce(self,factor,box=None)
PIL.Image.Image.remap_palette(self,dest_map,source_palette=None)
PIL.Image.Image.resize(self,size,resample=BICUBIC,box=None,reducing_gap=None)
PIL.Image.Image.rotate(self,angle,resample=NEAREST,expand=0,center=None,translate=None,fillcolor=None)
PIL.Image.Image.save(self,fp,format=None,**params)
PIL.Image.Image.seek(self,frame)
PIL.Image.Image.show(self,title=None,command=None)
PIL.Image.Image.size(self)
PIL.Image.Image.split(self)
PIL.Image.Image.tell(self)
PIL.Image.Image.thumbnail(self,size,resample=BICUBIC,reducing_gap=2.0)
PIL.Image.Image.tobitmap(self,name='image')
PIL.Image.Image.tobytes(self,encoder_name='raw',*args)
PIL.Image.Image.toqimage(self)
PIL.Image.Image.toqpixmap(self)
PIL.Image.Image.transform(self,size,method,data=None,resample=NEAREST,fill=1,fillcolor=None)
PIL.Image.Image.transpose(self,method)
PIL.Image.Image.verify(self)
PIL.Image.Image.width(self)
PIL.Image.ImagePointHandler
PIL.Image.ImageTransformHandler
PIL.Image._E(self,data)
PIL.Image._E.__add__(self,other)
PIL.Image._E.__init__(self,data)
PIL.Image._E.__mul__(self,other)
PIL.Image._apply_env_variables(env=None)
PIL.Image._check_size(size)
PIL.Image._conv_type_shape(im)
PIL.Image._decompression_bomb_check(size)
PIL.Image._getdecoder(mode,decoder_name,args,extra=())
PIL.Image._getencoder(mode,encoder_name,args,extra=())
PIL.Image._getscaleoffset(expr)
PIL.Image._show(image,**options)
PIL.Image._showxv(image,title=None,**options)
PIL.Image._wedge()
PIL.Image.alpha_composite(im1,im2)
PIL.Image.blend(im1,im2,alpha)
PIL.Image.coerce_e(value)
PIL.Image.composite(image1,image2,mask)
PIL.Image.effect_mandelbrot(size,extent,quality)
PIL.Image.effect_noise(size,sigma)
PIL.Image.eval(image,*args)
PIL.Image.fromarray(obj,mode=None)
PIL.Image.frombuffer(mode,size,data,decoder_name='raw',*args)
PIL.Image.frombytes(mode,size,data,decoder_name='raw',*args)
PIL.Image.fromqimage(im)
PIL.Image.fromqpixmap(im)
PIL.Image.getmodebandnames(mode)
PIL.Image.getmodebands(mode)
PIL.Image.getmodebase(mode)
PIL.Image.getmodetype(mode)
PIL.Image.init()
PIL.Image.isImageType(t)
PIL.Image.linear_gradient(mode)
PIL.Image.merge(mode,bands)
PIL.Image.new(mode,size,color=0)
PIL.Image.open(fp,mode='r',formats=None)
PIL.Image.preinit()
PIL.Image.radial_gradient(mode)
PIL.Image.register_decoder(name,decoder)
PIL.Image.register_encoder(name,encoder)
PIL.Image.register_extension(id,extension)
PIL.Image.register_extensions(id,extensions)
PIL.Image.register_mime(id,mimetype)
PIL.Image.register_open(id,factory,accept=None)
PIL.Image.register_save(id,driver)
PIL.Image.register_save_all(id,driver)
PIL.Image.registered_extensions()


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/__main__.py----------------------------------------


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/PngImagePlugin.py----------------------------------------
A:PIL.PngImagePlugin.logger->logging.getLogger(__name__)
A:PIL.PngImagePlugin._simple_palette->re.compile(b'^\xff*\x00\xff*$')
A:PIL.PngImagePlugin.dobj->zlib.decompressobj()
A:PIL.PngImagePlugin.plaintext->zlib.decompressobj().decompress(s, MAX_TEXT_CHUNK)
A:PIL.PngImagePlugin.(cid, pos, length)->str.__new__(cls, text).png.read()
A:PIL.PngImagePlugin.s->ImageFile._safe_read(self.fp, length)
A:PIL.PngImagePlugin.pos->str.__new__(cls, text).fp.tell()
A:PIL.PngImagePlugin.length->i32(s)
A:PIL.PngImagePlugin.crc1->_crc32(data, _crc32(cid))
A:PIL.PngImagePlugin.crc2->i32(self.fp.read(4))
A:PIL.PngImagePlugin.self->str.__new__(cls, text)
A:PIL.PngImagePlugin.key->key.encode('latin-1', 'strict').encode('latin-1', 'strict')
A:PIL.PngImagePlugin.value->value.encode('latin-1', 'strict').encode('latin-1', 'strict')
A:PIL.PngImagePlugin.lang->lang.decode('utf-8', 'strict').decode('utf-8', 'strict')
A:PIL.PngImagePlugin.tkey->tkey.encode('utf-8', 'strict').encode('utf-8', 'strict')
A:PIL.PngImagePlugin.i->ImageFile._safe_read(self.fp, length).find(b'\x00')
A:PIL.PngImagePlugin.comp_method->i8(v[0])
A:PIL.PngImagePlugin.icc_profile->_safe_zlib_decompress(s[i + 2:])
A:PIL.PngImagePlugin.self.im_info['transparency']->i16(s)
A:PIL.PngImagePlugin.raw_vals->struct.unpack('>%dI' % (len(s) // 4), s)
A:PIL.PngImagePlugin.self.im_info['chromaticity']->tuple((elt / 100000.0 for elt in raw_vals))
A:PIL.PngImagePlugin.self.im_info['srgb']->i8(s)
A:PIL.PngImagePlugin.unit->i8(s[8])
A:PIL.PngImagePlugin.(k, v)->ImageFile._safe_read(self.fp, length).split(b'\x00', 1)
A:PIL.PngImagePlugin.k->k.decode('latin-1', 'strict').decode('latin-1', 'strict')
A:PIL.PngImagePlugin.v_str->v.decode('utf-8', 'strict').decode('latin-1', 'replace')
A:PIL.PngImagePlugin.v->v.decode('utf-8', 'strict').decode('utf-8', 'strict')
A:PIL.PngImagePlugin.rs->ImageFile._safe_read(self.fp, length)
A:PIL.PngImagePlugin.(k, r)->r.split(b'\x00', 1)
A:PIL.PngImagePlugin.(lang, tk, v)->r.split(b'\x00', 2)
A:PIL.PngImagePlugin.tk->tk.decode('utf-8', 'strict').decode('utf-8', 'strict')
A:PIL.PngImagePlugin.self.im_info[k]self.im_text[k]->iTXt(v, lang, tk)
A:PIL.PngImagePlugin.n_frames->i32(s)
A:PIL.PngImagePlugin.self.im_info['loop']->i32(s[4:])
A:PIL.PngImagePlugin.seq->i32(s)
A:PIL.PngImagePlugin.self.im_info['disposal']->i8(s[24])
A:PIL.PngImagePlugin.self.im_info['blend']->i8(s[25])
A:PIL.PngImagePlugin.self.png->PngStream(self.fp)
A:PIL.PngImagePlugin.self.default_image->str.__new__(cls, text).info.get('default_image', False)
A:PIL.PngImagePlugin.self.palette->ImagePalette.raw(rawmode, data)
A:PIL.PngImagePlugin.self.__rewind->str.__new__(cls, text).__fp.tell()
A:PIL.PngImagePlugin.self.dispose_op->str.__new__(cls, text).info.get('disposal')
A:PIL.PngImagePlugin.self.blend_op->str.__new__(cls, text).info.get('blend')
A:PIL.PngImagePlugin.self.dispose_extent->str.__new__(cls, text).info.get('bbox')
A:PIL.PngImagePlugin.read_bytes->min(read_bytes, self.__idat)
A:PIL.PngImagePlugin.dispose->dispose.crop(bbox).crop(bbox)
A:PIL.PngImagePlugin.updated->str.__new__(cls, text)._crop(self.im, self.dispose_extent)
A:PIL.PngImagePlugin.self._prev_im->str.__new__(cls, text).im.copy()
A:PIL.PngImagePlugin.data->b''.join(data)
A:PIL.PngImagePlugin.crc->o32(_crc32(data, _crc32(cid)))
A:PIL.PngImagePlugin.default_image->im.encoderinfo.get('default_image', im.info.get('default_image'))
A:PIL.PngImagePlugin.duration->int(round(frame_data['encoderinfo'].get('duration', 0)))
A:PIL.PngImagePlugin.loop->im.encoderinfo.get('loop', im.info.get('loop', 0))
A:PIL.PngImagePlugin.disposal->frame_data['encoderinfo'].get('disposal', APNG_DISPOSE_OP_NONE)
A:PIL.PngImagePlugin.blend->frame_data['encoderinfo'].get('blend', APNG_BLEND_OP_SOURCE)
A:PIL.PngImagePlugin.chain->itertools.chain([im], im.encoderinfo.get('append_images', []))
A:PIL.PngImagePlugin.im_frame->im_frame.crop(bbox).crop(bbox)
A:PIL.PngImagePlugin.encoderinfo->im.encoderinfo.copy()
A:PIL.PngImagePlugin.prev_disposal->previous['encoderinfo'].get('disposal')
A:PIL.PngImagePlugin.prev_blend->previous['encoderinfo'].get('blend')
A:PIL.PngImagePlugin.delta->ImageChops.subtract_modulo(im_frame.convert('RGB'), base_im.convert('RGB'))
A:PIL.PngImagePlugin.bbox->ImageChops.subtract_modulo(im_frame.convert('RGB'), base_im.convert('RGB')).getbbox()
A:PIL.PngImagePlugin.fdat_chunks->_fdat(fp, chunk, seq_num)
A:PIL.PngImagePlugin.colors->max(min(len(im.palette.getdata()[1]) // 3, 256), 2)
A:PIL.PngImagePlugin.icc->im.encoderinfo.get('icc_profile', im.info.get('icc_profile'))
A:PIL.PngImagePlugin.info->im.encoderinfo.get('pnginfo')
A:PIL.PngImagePlugin.transparency->max(0, min(65535, transparency))
A:PIL.PngImagePlugin.alpha->im.im.getpalette('RGBA', 'A')
A:PIL.PngImagePlugin.dpi->im.encoderinfo.get('dpi')
A:PIL.PngImagePlugin.exif->exif.tobytes(8).tobytes(8)
A:PIL.PngImagePlugin.fp->collector()
PIL.PngImagePlugin.ChunkStream(self,fp)
PIL.PngImagePlugin.ChunkStream.__enter__(self)
PIL.PngImagePlugin.ChunkStream.__exit__(self,*args)
PIL.PngImagePlugin.ChunkStream.__init__(self,fp)
PIL.PngImagePlugin.ChunkStream.call(self,cid,pos,length)
PIL.PngImagePlugin.ChunkStream.close(self)
PIL.PngImagePlugin.ChunkStream.crc(self,cid,data)
PIL.PngImagePlugin.ChunkStream.crc_skip(self,cid,data)
PIL.PngImagePlugin.ChunkStream.push(self,cid,pos,length)
PIL.PngImagePlugin.ChunkStream.read(self)
PIL.PngImagePlugin.ChunkStream.verify(self,endchunk=b'IEND')
PIL.PngImagePlugin.PngImageFile(ImageFile.ImageFile)
PIL.PngImagePlugin.PngImageFile._close__fp(self)
PIL.PngImagePlugin.PngImageFile._getexif(self)
PIL.PngImagePlugin.PngImageFile._open(self)
PIL.PngImagePlugin.PngImageFile._seek(self,frame,rewind=False)
PIL.PngImagePlugin.PngImageFile.getexif(self)
PIL.PngImagePlugin.PngImageFile.load_end(self)
PIL.PngImagePlugin.PngImageFile.load_prepare(self)
PIL.PngImagePlugin.PngImageFile.load_read(self,read_bytes)
PIL.PngImagePlugin.PngImageFile.seek(self,frame)
PIL.PngImagePlugin.PngImageFile.tell(self)
PIL.PngImagePlugin.PngImageFile.text(self)
PIL.PngImagePlugin.PngImageFile.verify(self)
PIL.PngImagePlugin.PngInfo(self)
PIL.PngImagePlugin.PngInfo.__init__(self)
PIL.PngImagePlugin.PngInfo.add(self,cid,data,after_idat=False)
PIL.PngImagePlugin.PngInfo.add_itxt(self,key,value,lang='',tkey='',zip=False)
PIL.PngImagePlugin.PngInfo.add_text(self,key,value,zip=False)
PIL.PngImagePlugin.PngStream(self,fp)
PIL.PngImagePlugin.PngStream.__init__(self,fp)
PIL.PngImagePlugin.PngStream.check_text_memory(self,chunklen)
PIL.PngImagePlugin.PngStream.chunk_IDAT(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_IEND(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_IHDR(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_PLTE(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_acTL(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_cHRM(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_eXIf(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_fcTL(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_fdAT(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_gAMA(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_iCCP(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_iTXt(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_pHYs(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_sRGB(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_tEXt(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_tRNS(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_zTXt(self,pos,length)
PIL.PngImagePlugin.PngStream.rewind(self)
PIL.PngImagePlugin.PngStream.save_rewind(self)
PIL.PngImagePlugin._accept(prefix)
PIL.PngImagePlugin._crc32(data,seed=0)
PIL.PngImagePlugin._fdat(self,fp,chunk,seq_num)
PIL.PngImagePlugin._fdat.__init__(self,fp,chunk,seq_num)
PIL.PngImagePlugin._fdat.write(self,data)
PIL.PngImagePlugin._idat(self,fp,chunk)
PIL.PngImagePlugin._idat.__init__(self,fp,chunk)
PIL.PngImagePlugin._idat.write(self,data)
PIL.PngImagePlugin._safe_zlib_decompress(s)
PIL.PngImagePlugin._save(im,fp,filename,chunk=putchunk,save_all=False)
PIL.PngImagePlugin._save_all(im,fp,filename)
PIL.PngImagePlugin._write_multiple_frames(im,fp,chunk,rawmode)
PIL.PngImagePlugin.getchunks(im,**params)
PIL.PngImagePlugin.iTXt(cls,text,lang=None,tkey=None)
PIL.PngImagePlugin.iTXt.__new__(cls,text,lang=None,tkey=None)
PIL.PngImagePlugin.putchunk(fp,cid,*data)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/SgiImagePlugin.py----------------------------------------
A:PIL.SgiImagePlugin.s->self.fp.read(headlen)
A:PIL.SgiImagePlugin.compression->i8(s[2])
A:PIL.SgiImagePlugin.bpc->info.get('bpc', 1)
A:PIL.SgiImagePlugin.dimension->i16(s[4:])
A:PIL.SgiImagePlugin.xsize->i16(s[6:])
A:PIL.SgiImagePlugin.ysize->i16(s[8:])
A:PIL.SgiImagePlugin.zsize->len(self.mode)
A:PIL.SgiImagePlugin.z->len(im.mode)
A:PIL.SgiImagePlugin.imgName->imgName.encode('ascii', 'ignore').encode('ascii', 'ignore')
A:PIL.SgiImagePlugin.channel->Image.new('L', (self.state.xsize, self.state.ysize))
PIL.SgiImagePlugin.SGI16Decoder(ImageFile.PyDecoder)
PIL.SgiImagePlugin.SGI16Decoder.decode(self,buffer)
PIL.SgiImagePlugin.SgiImageFile(ImageFile.ImageFile)
PIL.SgiImagePlugin.SgiImageFile._open(self)
PIL.SgiImagePlugin._accept(prefix)
PIL.SgiImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/PyAccess.py----------------------------------------
A:PIL.PyAccess.ffi->FFI()
A:PIL.PyAccess.FFIffi->deferred_error(ex)
A:PIL.PyAccess.logger->logging.getLogger(__name__)
A:PIL.PyAccess.vals->dict(img.im.unsafe_ptrs)
A:PIL.PyAccess.self.image8->FFI().cast('unsigned char **', vals['image8'])
A:PIL.PyAccess.self.image32->FFI().cast('int **', vals['image32'])
A:PIL.PyAccess.self.image->FFI().cast('unsigned char **', vals['image'])
A:PIL.PyAccess.(x, y)->self.check_xy((x, y))
A:PIL.PyAccess.color->min(color[0], 65535)
A:PIL.PyAccess.self.pixels->FFI().cast('float **', self.image32)
A:PIL.PyAccess.pixel.r->min(color[0], 255)
A:PIL.PyAccess.pixel.a->min(color[3], 255)
A:PIL.PyAccess.pixel.g->min(color[1], 255)
A:PIL.PyAccess.pixel.b->min(color[2], 255)
A:PIL.PyAccess.self.pixels[y][x]->self.reverse(color)
A:PIL.PyAccess.orig->FFI().new('int *', i)
A:PIL.PyAccess.chars->FFI().cast('unsigned char *', orig)
A:PIL.PyAccess.access_type->mode_map.get(img.mode, None)
PIL.PyAccess.PyAccess(self,img,readonly=False)
PIL.PyAccess.PyAccess.__getitem__(self,xy)
PIL.PyAccess.PyAccess.__init__(self,img,readonly=False)
PIL.PyAccess.PyAccess.__setitem__(self,xy,color)
PIL.PyAccess.PyAccess._post_init(self)
PIL.PyAccess.PyAccess.check_xy(self,xy)
PIL.PyAccess._PyAccess32_2(PyAccess)
PIL.PyAccess._PyAccess32_2._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccess32_2.get_pixel(self,x,y)
PIL.PyAccess._PyAccess32_2.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccess32_3(PyAccess)
PIL.PyAccess._PyAccess32_3._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccess32_3.get_pixel(self,x,y)
PIL.PyAccess._PyAccess32_3.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccess32_4(PyAccess)
PIL.PyAccess._PyAccess32_4._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccess32_4.get_pixel(self,x,y)
PIL.PyAccess._PyAccess32_4.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccess8(PyAccess)
PIL.PyAccess._PyAccess8._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccess8.get_pixel(self,x,y)
PIL.PyAccess._PyAccess8.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccessF(PyAccess)
PIL.PyAccess._PyAccessF._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccessF.get_pixel(self,x,y)
PIL.PyAccess._PyAccessF.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccessI16_B(PyAccess)
PIL.PyAccess._PyAccessI16_B._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccessI16_B.get_pixel(self,x,y)
PIL.PyAccess._PyAccessI16_B.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccessI16_L(PyAccess)
PIL.PyAccess._PyAccessI16_L._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccessI16_L.get_pixel(self,x,y)
PIL.PyAccess._PyAccessI16_L.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccessI16_N(PyAccess)
PIL.PyAccess._PyAccessI16_N._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccessI16_N.get_pixel(self,x,y)
PIL.PyAccess._PyAccessI16_N.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccessI32_N(PyAccess)
PIL.PyAccess._PyAccessI32_N._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccessI32_N.get_pixel(self,x,y)
PIL.PyAccess._PyAccessI32_N.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccessI32_Swap(PyAccess)
PIL.PyAccess._PyAccessI32_Swap._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccessI32_Swap.get_pixel(self,x,y)
PIL.PyAccess._PyAccessI32_Swap.reverse(self,i)
PIL.PyAccess._PyAccessI32_Swap.set_pixel(self,x,y,color)
PIL.PyAccess.new(img,readonly=False)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/JpegImagePlugin.py----------------------------------------
A:PIL.JpegImagePlugin.s->self.fp.read(read_bytes)
A:PIL.JpegImagePlugin.self.info['jfif']version->i16(s, 5)
A:PIL.JpegImagePlugin.self.info['jfif_version']->divmod(version, 256)
A:PIL.JpegImagePlugin.jfif_unit->i8(s[7])
A:PIL.JpegImagePlugin.photoshop->self.info.setdefault('photoshop', {})
A:PIL.JpegImagePlugin.code->i16(s, offset)
A:PIL.JpegImagePlugin.name_len->i8(s[offset])
A:PIL.JpegImagePlugin.size->struct.pack('>H', 2 + ICC_OVERHEAD_LEN + len(marker))
A:PIL.JpegImagePlugin.self.info['adobe']->i16(s, 5)
A:PIL.JpegImagePlugin.adobe_transform->i8(s[1])
A:PIL.JpegImagePlugin.exif->exif.tobytes().tobytes()
A:PIL.JpegImagePlugin.self.bits->i8(s[0])
A:PIL.JpegImagePlugin.self.layers->i8(s[5])
A:PIL.JpegImagePlugin.icc_profile->TiffImagePlugin.ImageFileDirectory_v2(head).get('icc_profile')
A:PIL.JpegImagePlugin.v->i8(s[0])
A:PIL.JpegImagePlugin.data->array.array('B' if precision == 1 else 'H', s[1:qt_length])
A:PIL.JpegImagePlugin.i->i16(s)
A:PIL.JpegImagePlugin.scale->min(self.size[0] // size[0], self.size[1] // size[1])
A:PIL.JpegImagePlugin.(f, path)->im._dump().mkstemp()
A:PIL.JpegImagePlugin.file_contents->io.BytesIO(data)
A:PIL.JpegImagePlugin.head->io.BytesIO(data).read(8)
A:PIL.JpegImagePlugin.info->TiffImagePlugin.ImageFileDirectory_v2(head)
A:PIL.JpegImagePlugin.mp->dict(info)
A:PIL.JpegImagePlugin.unpackedentry->struct.unpack_from(f'{endianness}LLLHH', rawmpentries, entrynum * 16)
A:PIL.JpegImagePlugin.mpentry->dict(zip(labels, unpackedentry))
A:PIL.JpegImagePlugin.mpentryattr['MPType']->mptypemap.get(mpentryattr['MPType'], 'Unknown')
A:PIL.JpegImagePlugin.quality->TiffImagePlugin.ImageFileDirectory_v2(head).get('quality', -1)
A:PIL.JpegImagePlugin.subsampling->get_sampling(im)
A:PIL.JpegImagePlugin.qtables->validate_qtables(qtables)
A:PIL.JpegImagePlugin.table->array.array('H', table)
A:PIL.JpegImagePlugin.qtables[idx]->list(table)
A:PIL.JpegImagePlugin.optimize->TiffImagePlugin.ImageFileDirectory_v2(head).get('optimize', False)
A:PIL.JpegImagePlugin.bufsize->max(ImageFile.MAXBLOCK, bufsize, len(exif) + 5, len(extra) + 1)
A:PIL.JpegImagePlugin.tempfile->MpoImagePlugin.MpoImageFile.adopt(im, mpheader)._dump()
A:PIL.JpegImagePlugin.im->MpoImagePlugin.MpoImageFile.adopt(im, mpheader)
A:PIL.JpegImagePlugin.mpheader->MpoImagePlugin.MpoImageFile.adopt(im, mpheader)._getmp()
PIL.JpegImagePlugin.APP(self,marker)
PIL.JpegImagePlugin.COM(self,marker)
PIL.JpegImagePlugin.DQT(self,marker)
PIL.JpegImagePlugin.JpegImageFile(ImageFile.ImageFile)
PIL.JpegImagePlugin.JpegImageFile._getexif(self)
PIL.JpegImagePlugin.JpegImageFile._getmp(self)
PIL.JpegImagePlugin.JpegImageFile._open(self)
PIL.JpegImagePlugin.JpegImageFile.draft(self,mode,size)
PIL.JpegImagePlugin.JpegImageFile.load_djpeg(self)
PIL.JpegImagePlugin.JpegImageFile.load_read(self,read_bytes)
PIL.JpegImagePlugin.SOF(self,marker)
PIL.JpegImagePlugin.Skip(self,marker)
PIL.JpegImagePlugin._accept(prefix)
PIL.JpegImagePlugin._getexif(self)
PIL.JpegImagePlugin._getmp(self)
PIL.JpegImagePlugin._save(im,fp,filename)
PIL.JpegImagePlugin._save_cjpeg(im,fp,filename)
PIL.JpegImagePlugin.convert_dict_qtables(qtables)
PIL.JpegImagePlugin.get_sampling(im)
PIL.JpegImagePlugin.jpeg_factory(fp=None,filename=None)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImageMode.py----------------------------------------
A:PIL.ImageMode.modes[m]->ModeDescriptor(m, bands, basemode, basetype)
A:PIL.ImageMode.modes['RGBa']->ModeDescriptor('RGBa', ('R', 'G', 'B', 'a'), 'RGB', 'L')
A:PIL.ImageMode.modes['LA']->ModeDescriptor('LA', ('L', 'A'), 'L', 'L')
A:PIL.ImageMode.modes['La']->ModeDescriptor('La', ('L', 'a'), 'L', 'L')
A:PIL.ImageMode.modes['PA']->ModeDescriptor('PA', ('P', 'A'), 'RGB', 'L')
A:PIL.ImageMode.modes[i16mode]->ModeDescriptor(i16mode, ('I',), 'L', 'L')
PIL.ImageMode.ModeDescriptor(self,mode,bands,basemode,basetype)
PIL.ImageMode.ModeDescriptor.__init__(self,mode,bands,basemode,basetype)
PIL.ImageMode.ModeDescriptor.__str__(self)
PIL.ImageMode.getmode(mode)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/FliImagePlugin.py----------------------------------------
A:PIL.FliImagePlugin.s->self.fp.read(4)
A:PIL.FliImagePlugin.self.n_frames->i16(s[6:8])
A:PIL.FliImagePlugin.duration->i32(s[16:20])
A:PIL.FliImagePlugin.magic->i16(s[4:6])
A:PIL.FliImagePlugin.self.palette->ImagePalette.raw('RGB', b''.join(palette))
A:PIL.FliImagePlugin.self.__rewind->self.fp.tell()
A:PIL.FliImagePlugin.n->i8(s[1])
A:PIL.FliImagePlugin.framesize->i32(s)
PIL.FliImagePlugin.FliImageFile(ImageFile.ImageFile)
PIL.FliImagePlugin.FliImageFile._close__fp(self)
PIL.FliImagePlugin.FliImageFile._open(self)
PIL.FliImagePlugin.FliImageFile._palette(self,palette,shift)
PIL.FliImagePlugin.FliImageFile._seek(self,frame)
PIL.FliImagePlugin.FliImageFile.seek(self,frame)
PIL.FliImagePlugin.FliImageFile.tell(self)
PIL.FliImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/__init__.py----------------------------------------
A:PIL.__init__.PILLOW_VERSION->_Deprecated_Version(__version__)
PIL.__init__.UnidentifiedImageError(OSError)
PIL.__init__._raise_version_warning()


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/FontFile.py----------------------------------------
A:PIL.FontFile.h->max(h, src[3] - src[1])
A:PIL.FontFile.maxwidth->max(maxwidth, w)
A:PIL.FontFile.self.bitmap->Image.new('1', (xsize, ysize))
PIL.FontFile.FontFile(self)
PIL.FontFile.FontFile.__getitem__(self,ix)
PIL.FontFile.FontFile.__init__(self)
PIL.FontFile.FontFile.compile(self)
PIL.FontFile.FontFile.save(self,filename)
PIL.FontFile.puti16(fp,values)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/GbrImagePlugin.py----------------------------------------
A:PIL.GbrImagePlugin.header_size->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.version->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.width->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.height->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.color_depth->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.magic_number->self.fp.read(4)
A:PIL.GbrImagePlugin.self.info['spacing']->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.self.im->Image.core.new(self.mode, self.size)
PIL.GbrImagePlugin.GbrImageFile(ImageFile.ImageFile)
PIL.GbrImagePlugin.GbrImageFile._open(self)
PIL.GbrImagePlugin.GbrImageFile.load(self)
PIL.GbrImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImageGrab.py----------------------------------------
A:PIL.ImageGrab.(fh, filepath)->tempfile.mkstemp('.jpg')
A:PIL.ImageGrab.im->Image.open(filepath)
A:PIL.ImageGrab.im_cropped->Image.open(filepath).crop(bbox)
A:PIL.ImageGrab.(offset, size, data)->Image.core.grabscreen_win32(include_layered_windows, all_screens)
A:PIL.ImageGrab.(size, data)->Image.core.grabscreen_x11(xdisplay)
A:PIL.ImageGrab.(fmt, data)->Image.core.grabclipboard_win32()
A:PIL.ImageGrab.files->data[o:].decode('mbcs').split('\x00')
A:PIL.ImageGrab.data->io.BytesIO(data)
PIL.ImageGrab.grab(bbox=None,include_layered_windows=False,all_screens=False,xdisplay=None)
PIL.ImageGrab.grabclipboard()


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/MspImagePlugin.py----------------------------------------
A:PIL.MspImagePlugin.s->self.fp.read(32)
A:PIL.MspImagePlugin.img->io.BytesIO()
A:PIL.MspImagePlugin.blank_line->bytearray((255,) * ((self.state.xsize + 7) // 8))
A:PIL.MspImagePlugin.rowmap->struct.unpack_from(f'<{self.state.ysize}H', self.fd.read(self.state.ysize * 2))
A:PIL.MspImagePlugin.row->self.fd.read(rowlen)
A:PIL.MspImagePlugin.runtype->i8(row[idx])
A:PIL.MspImagePlugin.(runcount, runval)->struct.unpack_from('Bc', row, idx)
PIL.MspImagePlugin.MspDecoder(ImageFile.PyDecoder)
PIL.MspImagePlugin.MspDecoder.decode(self,buffer)
PIL.MspImagePlugin.MspImageFile(ImageFile.ImageFile)
PIL.MspImagePlugin.MspImageFile._open(self)
PIL.MspImagePlugin._accept(prefix)
PIL.MspImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImageQt.py----------------------------------------
A:PIL.ImageQt.buffer->QBuffer()
A:PIL.ImageQt.b->BytesIO()
A:PIL.ImageQt.(full_bytes_per_line, remaining_bits_per_line)->divmod(bits_per_line, 8)
A:PIL.ImageQt.im->im.convert('RGBA').convert('RGBA')
A:PIL.ImageQt.palette->im.convert('RGBA').convert('RGBA').getpalette()
A:PIL.ImageQt.data->im.convert('RGBA').convert('RGBA').tobytes('raw', 'BGRA')
A:PIL.ImageQt.im_data->_toqclass_helper(im)
A:PIL.ImageQt.qimage->toqimage(im)
PIL.ImageQt._toqclass_helper(im)
PIL.ImageQt.align8to32(bytes,width,mode)
PIL.ImageQt.fromqimage(im)
PIL.ImageQt.fromqpixmap(im)
PIL.ImageQt.rgb(r,g,b,a=255)
PIL.ImageQt.toqimage(im)
PIL.ImageQt.toqpixmap(im)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/Jpeg2KImagePlugin.py----------------------------------------
A:PIL.Jpeg2KImagePlugin.hdr->fp.read(2)
A:PIL.Jpeg2KImagePlugin.(lsiz, rsiz, xsiz, ysiz, xosiz, yosiz, _, _, _, _, csiz)->struct.unpack_from('>HHIIIIIIIIH', siz)
A:PIL.Jpeg2KImagePlugin.(ssiz[i], xrsiz[i], yrsiz[i])->struct.unpack_from('>BBB', siz, 36 + 3 * i)
A:PIL.Jpeg2KImagePlugin.(lbox, tbox)->struct.unpack('>I4s', hio.read(8))
A:PIL.Jpeg2KImagePlugin.header->_parse_jp2_header(self.fp)
A:PIL.Jpeg2KImagePlugin.hio->io.BytesIO(header)
A:PIL.Jpeg2KImagePlugin.content->io.BytesIO(header).read(lbox - hlen)
A:PIL.Jpeg2KImagePlugin.(height, width, nc, bpc, c, unkc, ipr)->struct.unpack('>IIHBBBB', content)
A:PIL.Jpeg2KImagePlugin.(meth, prec, approx)->struct.unpack_from('>BBB', content)
A:PIL.Jpeg2KImagePlugin.sig->self.fp.read(4)
A:PIL.Jpeg2KImagePlugin.(self._size, self.mode)->_parse_codestream(self.fp)
A:PIL.Jpeg2KImagePlugin.fd->fp.fileno()
A:PIL.Jpeg2KImagePlugin.pos->self.fp.tell()
A:PIL.Jpeg2KImagePlugin.length->self.fp.tell()
A:PIL.Jpeg2KImagePlugin.offset->info.get('offset', None)
A:PIL.Jpeg2KImagePlugin.tile_offset->info.get('tile_offset', None)
A:PIL.Jpeg2KImagePlugin.tile_size->info.get('tile_size', None)
A:PIL.Jpeg2KImagePlugin.quality_mode->info.get('quality_mode', 'rates')
A:PIL.Jpeg2KImagePlugin.quality_layers->info.get('quality_layers', None)
A:PIL.Jpeg2KImagePlugin.num_resolutions->info.get('num_resolutions', 0)
A:PIL.Jpeg2KImagePlugin.cblk_size->info.get('codeblock_size', None)
A:PIL.Jpeg2KImagePlugin.precinct_size->info.get('precinct_size', None)
A:PIL.Jpeg2KImagePlugin.irreversible->info.get('irreversible', False)
A:PIL.Jpeg2KImagePlugin.progression->info.get('progression', 'LRCP')
A:PIL.Jpeg2KImagePlugin.cinema_mode->info.get('cinema_mode', 'no')
PIL.Jpeg2KImagePlugin.Jpeg2KImageFile(ImageFile.ImageFile)
PIL.Jpeg2KImagePlugin.Jpeg2KImageFile._open(self)
PIL.Jpeg2KImagePlugin.Jpeg2KImageFile.load(self)
PIL.Jpeg2KImagePlugin.Jpeg2KImageFile.reduce(self)
PIL.Jpeg2KImagePlugin.Jpeg2KImageFile.reduce(self,value)
PIL.Jpeg2KImagePlugin._accept(prefix)
PIL.Jpeg2KImagePlugin._parse_codestream(fp)
PIL.Jpeg2KImagePlugin._parse_jp2_header(fp)
PIL.Jpeg2KImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/XbmImagePlugin.py----------------------------------------
A:PIL.XbmImagePlugin.xbm_head->re.compile(b'\\s*#define[ \\t]+.*_width[ \\t]+(?P<width>[0-9]+)[\\r\\n]+#define[ \t]+.*_height[ \t]+(?P<height>[0-9]+)[\r\n]+(?P<hotspot>#define[ \t]+[^_]*_x_hot[ \t]+(?P<xhot>[0-9]+)[\r\n]+#define[ \t]+[^_]*_y_hot[ \t]+(?P<yhot>[0-9]+)[\r\n]+)?[\\000-\\377]*_bits\\[\\]')
A:PIL.XbmImagePlugin.m->re.compile(b'\\s*#define[ \\t]+.*_width[ \\t]+(?P<width>[0-9]+)[\\r\\n]+#define[ \t]+.*_height[ \t]+(?P<height>[0-9]+)[\r\n]+(?P<hotspot>#define[ \t]+[^_]*_x_hot[ \t]+(?P<xhot>[0-9]+)[\r\n]+#define[ \t]+[^_]*_y_hot[ \t]+(?P<yhot>[0-9]+)[\r\n]+)?[\\000-\\377]*_bits\\[\\]').match(self.fp.read(512))
A:PIL.XbmImagePlugin.xsize->int(m.group('width'))
A:PIL.XbmImagePlugin.ysize->int(m.group('height'))
A:PIL.XbmImagePlugin.hotspot->im.encoderinfo.get('hotspot')
PIL.XbmImagePlugin.XbmImageFile(ImageFile.ImageFile)
PIL.XbmImagePlugin.XbmImageFile._open(self)
PIL.XbmImagePlugin._accept(prefix)
PIL.XbmImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImageSequence.py----------------------------------------
A:PIL.ImageSequence.self.position->getattr(self.im, '_min_frame', 0)
A:PIL.ImageSequence.current->imSequence.tell()
PIL.ImageSequence.Iterator(self,im)
PIL.ImageSequence.Iterator.__getitem__(self,ix)
PIL.ImageSequence.Iterator.__init__(self,im)
PIL.ImageSequence.Iterator.__iter__(self)
PIL.ImageSequence.Iterator.__next__(self)
PIL.ImageSequence.all_frames(im,func=None)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/WalImageFile.py----------------------------------------
A:PIL.WalImageFile.header->fp.read(32 + 24 + 32 + 12)
A:PIL.WalImageFile.offset->i32(header, 40)
A:PIL.WalImageFile.im->Image.frombytes('P', size, fp.read(size[0] * size[1]))
PIL.WalImageFile.open(filename)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/PpmImagePlugin.py----------------------------------------
A:PIL.PpmImagePlugin.c->self.fp.read(1)
A:PIL.PpmImagePlugin.s->int(self._token(s))
A:PIL.PpmImagePlugin.magic_number->self._token(s)
A:PIL.PpmImagePlugin.self.custom_mimetype->{b'P4': 'image/x-portable-bitmap', b'P5': 'image/x-portable-graymap', b'P6': 'image/x-portable-pixmap'}.get(magic_number)
PIL.PpmImagePlugin.PpmImageFile(ImageFile.ImageFile)
PIL.PpmImagePlugin.PpmImageFile._open(self)
PIL.PpmImagePlugin.PpmImageFile._token(self,s=b'')
PIL.PpmImagePlugin._accept(prefix)
PIL.PpmImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/BlpImagePlugin.py----------------------------------------
A:PIL.BlpImagePlugin.(color0, color1, bits)->struct.unpack_from('<HHI', data, idx)
A:PIL.BlpImagePlugin.(r0, g0, b0)->unpack_565(color0)
A:PIL.BlpImagePlugin.(r1, g1, b1)->unpack_565(color1)
A:PIL.BlpImagePlugin.bits->struct.unpack_from('<6B', block, 2)
A:PIL.BlpImagePlugin.(color0, color1)->struct.unpack_from('<HH', block, 8)
A:PIL.BlpImagePlugin.(code,)->struct.unpack_from('<I', block, 12)
A:PIL.BlpImagePlugin.(a0, a1)->struct.unpack_from('<BB', block)
A:PIL.BlpImagePlugin.self.magic->self.fd.read(4)
A:PIL.BlpImagePlugin.(self._blp_compression,)->struct.unpack('<i', self.fd.read(4))
A:PIL.BlpImagePlugin.(self._blp_encoding,)->struct.unpack('<i', self.fd.read(4))
A:PIL.BlpImagePlugin.(self._blp_alpha_depth,)->struct.unpack('<b', self.fd.read(1))
A:PIL.BlpImagePlugin.(self._blp_alpha_encoding,)->struct.unpack('<b', self.fd.read(1))
A:PIL.BlpImagePlugin.(self._blp_mips,)->struct.unpack('<b', self.fd.read(1))
A:PIL.BlpImagePlugin.self._size->struct.unpack('<II', self.fp.read(8))
A:PIL.BlpImagePlugin.(self._blp_subtype,)->struct.unpack('<i', self.fd.read(4))
A:PIL.BlpImagePlugin.self._blp_offsets->struct.unpack('<16I', self.fd.read(16 * 4))
A:PIL.BlpImagePlugin.self._blp_lengths->struct.unpack('<16I', self.fd.read(16 * 4))
A:PIL.BlpImagePlugin.(b, g, r, a)->struct.unpack('<4B', self.fd.read(4))
A:PIL.BlpImagePlugin.self.size->struct.unpack('<II', self.fd.read(8))
A:PIL.BlpImagePlugin.data->bytearray()
A:PIL.BlpImagePlugin.palette->self._read_palette()
A:PIL.BlpImagePlugin._data->BytesIO(self.fd.read(self._blp_lengths[0]))
A:PIL.BlpImagePlugin.(offset,)->struct.unpack('<B', _data.read(1))
A:PIL.BlpImagePlugin.(jpeg_header_size,)->struct.unpack('<I', self.fd.read(4))
A:PIL.BlpImagePlugin.jpeg_header->self.fd.read(jpeg_header_size)
A:PIL.BlpImagePlugin.image->JpegImageFile(data)
PIL.BlpImagePlugin.BLP1Decoder(_BLPBaseDecoder)
PIL.BlpImagePlugin.BLP1Decoder._decode_jpeg_stream(self)
PIL.BlpImagePlugin.BLP1Decoder._load(self)
PIL.BlpImagePlugin.BLP2Decoder(_BLPBaseDecoder)
PIL.BlpImagePlugin.BLP2Decoder._load(self)
PIL.BlpImagePlugin.BLPFormatError(NotImplementedError)
PIL.BlpImagePlugin.BlpImageFile(ImageFile.ImageFile)
PIL.BlpImagePlugin.BlpImageFile._open(self)
PIL.BlpImagePlugin.BlpImageFile._read_blp_header(self)
PIL.BlpImagePlugin._BLPBaseDecoder(ImageFile.PyDecoder)
PIL.BlpImagePlugin._BLPBaseDecoder._read_blp_header(self)
PIL.BlpImagePlugin._BLPBaseDecoder._read_palette(self)
PIL.BlpImagePlugin._BLPBaseDecoder.decode(self,buffer)
PIL.BlpImagePlugin.decode_dxt1(data,alpha=False)
PIL.BlpImagePlugin.decode_dxt3(data)
PIL.BlpImagePlugin.decode_dxt5(data)
PIL.BlpImagePlugin.unpack_565(i)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/WebPImagePlugin.py----------------------------------------
A:PIL.WebPImagePlugin.(data, width, height, self.mode, icc_profile, exif)->_webp.WebPDecode(self.fp.read())
A:PIL.WebPImagePlugin.self.fp->BytesIO(data)
A:PIL.WebPImagePlugin.self._decoder->_webp.WebPAnimDecoder(self.fp.read())
A:PIL.WebPImagePlugin.(width, height, loop_count, bgcolor, frame_count, mode)->self._decoder.get_info()
A:PIL.WebPImagePlugin.icc_profile->im.convert('RGBA' if alpha else 'RGB').encoderinfo.get('icc_profile', '')
A:PIL.WebPImagePlugin.exif->exif.tobytes().tobytes()
A:PIL.WebPImagePlugin.xmp->im.convert('RGBA' if alpha else 'RGB').encoderinfo.get('xmp', '')
A:PIL.WebPImagePlugin.ret->self._decoder.get_next()
A:PIL.WebPImagePlugin.(data, timestamp, duration)->self._get_next()
A:PIL.WebPImagePlugin.encoderinfo->im.convert('RGBA' if alpha else 'RGB').encoderinfo.copy()
A:PIL.WebPImagePlugin.append_images->list(encoderinfo.get('append_images', []))
A:PIL.WebPImagePlugin.palette->im.convert('RGBA' if alpha else 'RGB').getpalette()
A:PIL.WebPImagePlugin.duration->im.convert('RGBA' if alpha else 'RGB').encoderinfo.get('duration', 0)
A:PIL.WebPImagePlugin.loop->im.convert('RGBA' if alpha else 'RGB').encoderinfo.get('loop', 0)
A:PIL.WebPImagePlugin.minimize_size->im.convert('RGBA' if alpha else 'RGB').encoderinfo.get('minimize_size', False)
A:PIL.WebPImagePlugin.kmin->im.convert('RGBA' if alpha else 'RGB').encoderinfo.get('kmin', None)
A:PIL.WebPImagePlugin.kmax->im.convert('RGBA' if alpha else 'RGB').encoderinfo.get('kmax', None)
A:PIL.WebPImagePlugin.allow_mixed->im.convert('RGBA' if alpha else 'RGB').encoderinfo.get('allow_mixed', False)
A:PIL.WebPImagePlugin.lossless->im.convert('RGBA' if alpha else 'RGB').encoderinfo.get('lossless', False)
A:PIL.WebPImagePlugin.quality->im.convert('RGBA' if alpha else 'RGB').encoderinfo.get('quality', 80)
A:PIL.WebPImagePlugin.method->im.convert('RGBA' if alpha else 'RGB').encoderinfo.get('method', 0)
A:PIL.WebPImagePlugin.enc->_webp.WebPAnimEncoder(im.size[0], im.size[1], background, loop, minimize_size, kmin, kmax, allow_mixed, verbose)
A:PIL.WebPImagePlugin.cur_idx->im.convert('RGBA' if alpha else 'RGB').tell()
A:PIL.WebPImagePlugin.nfr->getattr(ims, 'n_frames', 1)
A:PIL.WebPImagePlugin.frame->ims.convert(rawmode)
A:PIL.WebPImagePlugin.data->_webp.WebPEncode(im.tobytes(), im.size[0], im.size[1], lossless, float(quality), im.mode, icc_profile, method, exif, xmp)
A:PIL.WebPImagePlugin.im->im.convert('RGBA' if alpha else 'RGB').convert('RGBA' if alpha else 'RGB')
PIL.WebPImagePlugin.WebPImageFile(ImageFile.ImageFile)
PIL.WebPImagePlugin.WebPImageFile._get_next(self)
PIL.WebPImagePlugin.WebPImageFile._getexif(self)
PIL.WebPImagePlugin.WebPImageFile._open(self)
PIL.WebPImagePlugin.WebPImageFile._reset(self,reset=True)
PIL.WebPImagePlugin.WebPImageFile._seek(self,frame)
PIL.WebPImagePlugin.WebPImageFile.load(self)
PIL.WebPImagePlugin.WebPImageFile.seek(self,frame)
PIL.WebPImagePlugin.WebPImageFile.tell(self)
PIL.WebPImagePlugin._accept(prefix)
PIL.WebPImagePlugin._save(im,fp,filename)
PIL.WebPImagePlugin._save_all(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImageEnhance.py----------------------------------------
A:PIL.ImageEnhance.self.degenerate->image.filter(ImageFilter.SMOOTH)
A:PIL.ImageEnhance.mean->int(ImageStat.Stat(image.convert('L')).mean[0] + 0.5)
PIL.ImageEnhance.Brightness(self,image)
PIL.ImageEnhance.Brightness.__init__(self,image)
PIL.ImageEnhance.Color(self,image)
PIL.ImageEnhance.Color.__init__(self,image)
PIL.ImageEnhance.Contrast(self,image)
PIL.ImageEnhance.Contrast.__init__(self,image)
PIL.ImageEnhance.Sharpness(self,image)
PIL.ImageEnhance.Sharpness.__init__(self,image)
PIL.ImageEnhance._Enhance
PIL.ImageEnhance._Enhance.enhance(self,factor)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/BdfFontFile.py----------------------------------------
A:PIL.BdfFontFile.s->fp.readline()
A:PIL.BdfFontFile.id->s[9:].strip().decode('ascii')
A:PIL.BdfFontFile.i->fp.readline().find(b' ')
A:PIL.BdfFontFile.props[s[:i].decode('ascii')]->s[i + 1:-1].decode('ascii')
A:PIL.BdfFontFile.bitmap->b''.join(bitmap)
A:PIL.BdfFontFile.im->Image.new('1', (x, y))
A:PIL.BdfFontFile.c->bdf_char(fp)
PIL.BdfFontFile.BdfFontFile(self,fp)
PIL.BdfFontFile.BdfFontFile.__init__(self,fp)
PIL.BdfFontFile.bdf_char(f)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/PcdImagePlugin.py----------------------------------------
A:PIL.PcdImagePlugin.s->self.fp.read(2048)
A:PIL.PcdImagePlugin.self.im->self.im.rotate(self.tile_post_rotate)
PIL.PcdImagePlugin.PcdImageFile(ImageFile.ImageFile)
PIL.PcdImagePlugin.PcdImageFile._open(self)
PIL.PcdImagePlugin.PcdImageFile.load_end(self)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/MicImagePlugin.py----------------------------------------
A:PIL.MicImagePlugin.self.ole->olefile.OleFileIO(self.fp)
A:PIL.MicImagePlugin.self._n_frames->len(self.images)
A:PIL.MicImagePlugin.self.fp->self.ole.openstream(filename)
PIL.MicImagePlugin.MicImageFile(TiffImagePlugin.TiffImageFile)
PIL.MicImagePlugin.MicImageFile._close__fp(self)
PIL.MicImagePlugin.MicImageFile._open(self)
PIL.MicImagePlugin.MicImageFile.seek(self,frame)
PIL.MicImagePlugin.MicImageFile.tell(self)
PIL.MicImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL8.0.0/ImagePath.py----------------------------------------

