
----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/PcxImagePlugin.py----------------------------------------
A:PIL.PcxImagePlugin.logger->logging.getLogger(__name__)
A:PIL.PcxImagePlugin.s->self.fp.read(769)
A:PIL.PcxImagePlugin.version->i8(s[1])
A:PIL.PcxImagePlugin.bits->i8(s[3])
A:PIL.PcxImagePlugin.planes->i8(s[65])
A:PIL.PcxImagePlugin.stride->i16(s, 66)
A:PIL.PcxImagePlugin.self.palette->PIL.ImagePalette.raw('RGB', s[1:])
PIL.PcxImagePlugin.PcxImageFile(ImageFile.ImageFile)
PIL.PcxImagePlugin.PcxImageFile._open(self)
PIL.PcxImagePlugin._accept(prefix)
PIL.PcxImagePlugin._save(im,fp,filename,check=0)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/FpxImagePlugin.py----------------------------------------
A:PIL.FpxImagePlugin.self.ole->OleFileIO(self.fp)
A:PIL.FpxImagePlugin.prop->self.ole.getproperties(['Data Object Store %06d' % index, '\x05Image Contents'])
A:PIL.FpxImagePlugin.size->max(self.size)
A:PIL.FpxImagePlugin.fp->self.ole.openstream(stream)
A:PIL.FpxImagePlugin.s->self.ole.openstream(stream).read(i32(s, 12) * length)
A:PIL.FpxImagePlugin.offset->i32(s, 28)
A:PIL.FpxImagePlugin.length->i32(s, 32)
A:PIL.FpxImagePlugin.compression->i32(s, i + 8)
A:PIL.FpxImagePlugin.internal_color_conversion->i8(s[14])
A:PIL.FpxImagePlugin.jpeg_tables->i8(s[15])
A:PIL.FpxImagePlugin.self.fp->self.ole.openstream(self.stream[:2] + ['Subimage 0000 Data'])
PIL.FpxImagePlugin.FpxImageFile(ImageFile.ImageFile)
PIL.FpxImagePlugin.FpxImageFile._open(self)
PIL.FpxImagePlugin.FpxImageFile._open_index(self,index=1)
PIL.FpxImagePlugin.FpxImageFile._open_subimage(self,index=1,subimage=0)
PIL.FpxImagePlugin.FpxImageFile.load(self)
PIL.FpxImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/SunImagePlugin.py----------------------------------------
A:PIL.SunImagePlugin.s->self.fp.read(32)
A:PIL.SunImagePlugin.depth->i32(s[12:16])
A:PIL.SunImagePlugin.compression->i32(s[20:24])
A:PIL.SunImagePlugin.length->i32(s[28:32])
A:PIL.SunImagePlugin.self.palette->PIL.ImagePalette.raw('RGB;L', self.fp.read(length))
PIL.SunImagePlugin.SunImageFile(ImageFile.ImageFile)
PIL.SunImagePlugin.SunImageFile._open(self)
PIL.SunImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/CurImagePlugin.py----------------------------------------
A:PIL.CurImagePlugin.offset->self.fp.tell()
A:PIL.CurImagePlugin.s->self.fp.read(16)
PIL.CurImagePlugin.CurImageFile(BmpImagePlugin.BmpImageFile)
PIL.CurImagePlugin.CurImageFile._open(self)
PIL.CurImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImageColor.py----------------------------------------
A:PIL.ImageColor.colormap[color]rgb->getrgb(rgb)
A:PIL.ImageColor.m->re.match('rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)$', color)
A:PIL.ImageColor.rgb->hls_to_rgb(float(m.group(1)) / 360.0, float(m.group(3)) / 100.0, float(m.group(2)) / 100.0)
PIL.ImageColor.getcolor(color,mode)
PIL.ImageColor.getrgb(color)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImageTk.py----------------------------------------
A:PIL.ImageTk.im->PIL.Image.new('1', (1, 1))
A:PIL.ImageTk.source->BytesIO(kw.pop('data'))
A:PIL.ImageTk.image->_get_image_from_kw(kw)
A:PIL.ImageTk.mode->PIL.Image.getmodebase(mode)
A:PIL.ImageTk.self.__photo->tkinter.BitmapImage(**kw)
A:PIL.ImageTk.block->_get_image_from_kw(kw).new_block(self.__mode, im.size)
A:PIL.ImageTk.kw['data']->_get_image_from_kw(kw).tobitmap()
A:PIL.ImageTk.self.image->PhotoImage(im, master=master)
A:PIL.ImageTk.top->tkinter.Toplevel()
PIL.ImageTk.BitmapImage(self,image=None,**kw)
PIL.ImageTk.BitmapImage.__del__(self)
PIL.ImageTk.BitmapImage.__init__(self,image=None,**kw)
PIL.ImageTk.BitmapImage.__str__(self)
PIL.ImageTk.BitmapImage.height(self)
PIL.ImageTk.BitmapImage.width(self)
PIL.ImageTk.PhotoImage(self,image=None,size=None,**kw)
PIL.ImageTk.PhotoImage.__del__(self)
PIL.ImageTk.PhotoImage.__init__(self,image=None,size=None,**kw)
PIL.ImageTk.PhotoImage.__str__(self)
PIL.ImageTk.PhotoImage.height(self)
PIL.ImageTk.PhotoImage.paste(self,im,box=None)
PIL.ImageTk.PhotoImage.width(self)
PIL.ImageTk._get_image_from_kw(kw)
PIL.ImageTk._pilbitmap_check()
PIL.ImageTk._show(image,title)
PIL.ImageTk.getimage(photo)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImageDraw.py----------------------------------------
A:PIL.ImageDraw.self.draw->PIL.Image.core.draw(self.im, blend)
A:PIL.ImageDraw.self.ink->self.draw.draw_ink(-1, mode)
A:PIL.ImageDraw.self.font->PIL.ImageFont.load_default()
A:PIL.ImageDraw.ink->self.draw.draw_ink(ink, self.mode)
A:PIL.ImageDraw.fill->self.draw.draw_ink(fill, self.mode)
A:PIL.ImageDraw.(ink, fill)->self._getink(fill)
A:PIL.ImageDraw.font->self.getfont()
A:PIL.ImageDraw.(mask, offset)->self.getfont().getmask2(text, self.fontmode)
A:PIL.ImageDraw.mask->self.getfont().getmask(text)
A:PIL.ImageDraw.lines->self._multiline_split(text)
A:PIL.ImageDraw.(line_width, line_height)->self.textsize(line, font)
A:PIL.ImageDraw.max_width->max(max_width, line_width)
A:PIL.ImageDraw.im->PIL.ImageDraw2.Draw(im)
A:PIL.ImageDraw.pixel->image.load()
PIL.ImageDraw.Draw(im,mode=None)
PIL.ImageDraw.ImageDraw(self,im,mode=None)
PIL.ImageDraw.ImageDraw.__init__(self,im,mode=None)
PIL.ImageDraw.ImageDraw._getink(self,ink,fill=None)
PIL.ImageDraw.ImageDraw._multiline_check(self,text)
PIL.ImageDraw.ImageDraw._multiline_split(self,text)
PIL.ImageDraw.ImageDraw.arc(self,xy,start,end,fill=None)
PIL.ImageDraw.ImageDraw.bitmap(self,xy,bitmap,fill=None)
PIL.ImageDraw.ImageDraw.chord(self,xy,start,end,fill=None,outline=None)
PIL.ImageDraw.ImageDraw.ellipse(self,xy,fill=None,outline=None)
PIL.ImageDraw.ImageDraw.getfont(self)
PIL.ImageDraw.ImageDraw.line(self,xy,fill=None,width=0)
PIL.ImageDraw.ImageDraw.multiline_text(self,xy,text,fill=None,font=None,anchor=None,spacing=4,align='left')
PIL.ImageDraw.ImageDraw.multiline_textsize(self,text,font=None,spacing=4)
PIL.ImageDraw.ImageDraw.pieslice(self,xy,start,end,fill=None,outline=None)
PIL.ImageDraw.ImageDraw.point(self,xy,fill=None)
PIL.ImageDraw.ImageDraw.polygon(self,xy,fill=None,outline=None)
PIL.ImageDraw.ImageDraw.rectangle(self,xy,fill=None,outline=None)
PIL.ImageDraw.ImageDraw.setfill(self,onoff)
PIL.ImageDraw.ImageDraw.setfont(self,font)
PIL.ImageDraw.ImageDraw.setink(self,ink)
PIL.ImageDraw.ImageDraw.shape(self,shape,fill=None,outline=None)
PIL.ImageDraw.ImageDraw.text(self,xy,text,fill=None,font=None,anchor=None,*args,**kwargs)
PIL.ImageDraw.ImageDraw.textsize(self,text,font=None,*args,**kwargs)
PIL.ImageDraw.floodfill(image,xy,value,border=None)
PIL.ImageDraw.getdraw(im=None,hints=None)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/TarIO.py----------------------------------------
A:PIL.TarIO.fh->open(tarfile, 'rb')
A:PIL.TarIO.s->open(tarfile, 'rb').read(512)
A:PIL.TarIO.name->s[:100].decode('utf-8')
A:PIL.TarIO.i->s[:100].decode('utf-8').find('\x00')
A:PIL.TarIO.size->int(s[124:135], 8)
PIL.TarIO.TarIO(self,tarfile,file)
PIL.TarIO.TarIO.__init__(self,tarfile,file)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/IptcImagePlugin.py----------------------------------------
A:PIL.IptcImagePlugin.s->self.fp.read(min(size, 8192))
A:PIL.IptcImagePlugin.size->i32(app, offset)
A:PIL.IptcImagePlugin.offset->self.fp.tell()
A:PIL.IptcImagePlugin.(tag, size)->self.field()
A:PIL.IptcImagePlugin.tagdata->self.fp.read(size)
A:PIL.IptcImagePlugin.layers->i8(self.info[3, 60][0])
A:PIL.IptcImagePlugin.component->i8(self.info[3, 60][1])
A:PIL.IptcImagePlugin.(o_fd, outfile)->tempfile.mkstemp(text=False)
A:PIL.IptcImagePlugin.o->os.fdopen(o_fd)
A:PIL.IptcImagePlugin.(type, size)->self.field()
A:PIL.IptcImagePlugin.self.im->PIL.Image.core.open_ppm(outfile)
A:PIL.IptcImagePlugin.im->FakeImage()
A:PIL.IptcImagePlugin.code->i16(app, offset)
A:PIL.IptcImagePlugin.name_len->i8(app[offset])
A:PIL.IptcImagePlugin.im.fp->io.BytesIO(data)
PIL.IptcImagePlugin.IptcImageFile(ImageFile.ImageFile)
PIL.IptcImagePlugin.IptcImageFile._open(self)
PIL.IptcImagePlugin.IptcImageFile.field(self)
PIL.IptcImagePlugin.IptcImageFile.getint(self,key)
PIL.IptcImagePlugin.IptcImageFile.load(self)
PIL.IptcImagePlugin.dump(c)
PIL.IptcImagePlugin.getiptcinfo(im)
PIL.IptcImagePlugin.i(c)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/_tkinter_finder.py----------------------------------------


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImImagePlugin.py----------------------------------------
A:PIL.ImImagePlugin.split->re.compile(b'^([A-Za-z][^:]*):[ \\t]*(.*)[ \\t]*$')
A:PIL.ImImagePlugin.s->self.fp.read(1)
A:PIL.ImImagePlugin.m->re.compile(b'^([A-Za-z][^:]*):[ \\t]*(.*)[ \\t]*$').match(s)
A:PIL.ImImagePlugin.(k, v)->re.compile(b'^([A-Za-z][^:]*):[ \\t]*(.*)[ \\t]*$').match(s).group(1, 2)
A:PIL.ImImagePlugin.k->k.decode('latin-1', 'replace').decode('latin-1', 'replace')
A:PIL.ImImagePlugin.v->tuple(map(number, v.split(',')))
A:PIL.ImImagePlugin.palette->self.fp.read(768)
A:PIL.ImImagePlugin.self.palette->PIL.ImagePalette.raw('RGB;L', palette)
A:PIL.ImImagePlugin.self.__offsetoffs->self.fp.tell()
A:PIL.ImImagePlugin.bits->int(self.rawmode[2:])
PIL.ImImagePlugin.ImImageFile(ImageFile.ImageFile)
PIL.ImImagePlugin.ImImageFile._open(self)
PIL.ImImagePlugin.ImImageFile.is_animated(self)
PIL.ImImagePlugin.ImImageFile.n_frames(self)
PIL.ImImagePlugin.ImImageFile.seek(self,frame)
PIL.ImImagePlugin.ImImageFile.tell(self)
PIL.ImImagePlugin._save(im,fp,filename,check=0)
PIL.ImImagePlugin.number(s)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/WmfImagePlugin.py----------------------------------------
A:PIL.WmfImagePlugin.v->word(c, o)
A:PIL.WmfImagePlugin.s->self.fp.read(80)
A:PIL.WmfImagePlugin.inch->word(s, 14)
A:PIL.WmfImagePlugin.x0->dword(s, 8)
A:PIL.WmfImagePlugin.y0->dword(s, 12)
A:PIL.WmfImagePlugin.x1->dword(s, 16)
A:PIL.WmfImagePlugin.y1->dword(s, 20)
A:PIL.WmfImagePlugin.loader->self._load()
PIL.WmfImagePlugin.WmfStubImageFile(ImageFile.StubImageFile)
PIL.WmfImagePlugin.WmfStubImageFile._load(self)
PIL.WmfImagePlugin.WmfStubImageFile._open(self)
PIL.WmfImagePlugin._accept(prefix)
PIL.WmfImagePlugin._save(im,fp,filename)
PIL.WmfImagePlugin.register_handler(handler)
PIL.WmfImagePlugin.short(c,o=0)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImageDraw2.py----------------------------------------
A:PIL.ImageDraw2.self.color->PIL.ImageColor.getrgb(color)
A:PIL.ImageDraw2.self.font->PIL.ImageFont.truetype(file, size)
A:PIL.ImageDraw2.image->PIL.Image.new(image, size, color)
A:PIL.ImageDraw2.self.draw->PIL.ImageDraw.Draw(image)
A:PIL.ImageDraw2.xy->PIL.ImagePath.Path(xy)
PIL.ImageDraw2.Brush(self,color,opacity=255)
PIL.ImageDraw2.Brush.__init__(self,color,opacity=255)
PIL.ImageDraw2.Draw(self,image,size=None,color=None)
PIL.ImageDraw2.Draw.__init__(self,image,size=None,color=None)
PIL.ImageDraw2.Draw.arc(self,xy,start,end,*options)
PIL.ImageDraw2.Draw.chord(self,xy,start,end,*options)
PIL.ImageDraw2.Draw.ellipse(self,xy,*options)
PIL.ImageDraw2.Draw.flush(self)
PIL.ImageDraw2.Draw.line(self,xy,*options)
PIL.ImageDraw2.Draw.pieslice(self,xy,start,end,*options)
PIL.ImageDraw2.Draw.polygon(self,xy,*options)
PIL.ImageDraw2.Draw.rectangle(self,xy,*options)
PIL.ImageDraw2.Draw.render(self,op,xy,pen,brush=None)
PIL.ImageDraw2.Draw.settransform(self,offset)
PIL.ImageDraw2.Draw.symbol(self,xy,symbol,*options)
PIL.ImageDraw2.Draw.text(self,xy,text,font)
PIL.ImageDraw2.Draw.textsize(self,text,font)
PIL.ImageDraw2.Font(self,color,file,size=12)
PIL.ImageDraw2.Font.__init__(self,color,file,size=12)
PIL.ImageDraw2.Pen(self,color,width=1,opacity=255)
PIL.ImageDraw2.Pen.__init__(self,color,width=1,opacity=255)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/FitsStubImagePlugin.py----------------------------------------
A:PIL.FitsStubImagePlugin.offset->self.fp.tell()
A:PIL.FitsStubImagePlugin.loader->self._load()
PIL.FitsStubImagePlugin.FITSStubImageFile(ImageFile.StubImageFile)
PIL.FitsStubImagePlugin.FITSStubImageFile._load(self)
PIL.FitsStubImagePlugin.FITSStubImageFile._open(self)
PIL.FitsStubImagePlugin._accept(prefix)
PIL.FitsStubImagePlugin._save(im,fp,filename)
PIL.FitsStubImagePlugin.register_handler(handler)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/DdsImagePlugin.py----------------------------------------
A:PIL.DdsImagePlugin.ret->bytearray(4 * width * height)
A:PIL.DdsImagePlugin.(color0, color1, bits)->struct.unpack('<HHI', data.read(8))
A:PIL.DdsImagePlugin.(r0, g0, b0)->_decode565(c0)
A:PIL.DdsImagePlugin.(r1, g1, b1)->_decode565(c1)
A:PIL.DdsImagePlugin.ret[idx:idx + 4]->struct.pack('4B', r, g, b, alpha)
A:PIL.DdsImagePlugin.(a0, a1, ac0, ac1, c0, c1, code)->struct.unpack('<2BHI2HI', data.read(16))
A:PIL.DdsImagePlugin.alpha->_dxtc_alpha(a0, a1, ac0, ac1, ai)
A:PIL.DdsImagePlugin.(magic, header_size)->struct.unpack('<II', self.fp.read(8))
A:PIL.DdsImagePlugin.header_bytes->self.fp.read(header_size - 4)
A:PIL.DdsImagePlugin.header->BytesIO(header_bytes)
A:PIL.DdsImagePlugin.(flags, height, width)->struct.unpack('<3I', header.read(12))
A:PIL.DdsImagePlugin.(pitch, depth, mipmaps)->struct.unpack('<3I', header.read(12))
A:PIL.DdsImagePlugin.reserved->struct.unpack('<11I', header.read(44))
A:PIL.DdsImagePlugin.(pfsize, pfflags)->struct.unpack('<2I', header.read(8))
A:PIL.DdsImagePlugin.fourcc->BytesIO(header_bytes).read(4)
A:PIL.DdsImagePlugin.(bitcount, rmask, gmask, bmask, amask)->struct.unpack('<5I', header.read(20))
A:PIL.DdsImagePlugin.decoded_data->codec(self.fp, self.width, self.height)
A:PIL.DdsImagePlugin.self.fp->BytesIO(decoded_data)
PIL.DdsImagePlugin.DdsImageFile(ImageFile.ImageFile)
PIL.DdsImagePlugin.DdsImageFile._open(self)
PIL.DdsImagePlugin.DdsImageFile.load_seek(self,pos)
PIL.DdsImagePlugin._c2a(a,b)
PIL.DdsImagePlugin._c2b(a,b)
PIL.DdsImagePlugin._c3(a,b)
PIL.DdsImagePlugin._decode565(bits)
PIL.DdsImagePlugin._dxt1(data,width,height)
PIL.DdsImagePlugin._dxt5(data,width,height)
PIL.DdsImagePlugin._dxtc_alpha(a0,a1,ac0,ac1,ai)
PIL.DdsImagePlugin._validate(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/TgaImagePlugin.py----------------------------------------
A:PIL.TgaImagePlugin.s->self.fp.read(18)
A:PIL.TgaImagePlugin.idlen->i8(s[0])
A:PIL.TgaImagePlugin.colormaptype->i8(s[1])
A:PIL.TgaImagePlugin.imagetype->i8(s[2])
A:PIL.TgaImagePlugin.depth->i8(s[16])
A:PIL.TgaImagePlugin.flags->i8(s[17])
A:PIL.TgaImagePlugin.self.info['id_section']->self.fp.read(idlen)
A:PIL.TgaImagePlugin.self.palette->PIL.ImagePalette.raw('BGRA', b'\x00' * 4 * start + self.fp.read(4 * size))
A:PIL.TgaImagePlugin.orientation->im.info.get('orientation', -1)
PIL.TgaImagePlugin.TgaImageFile(ImageFile.ImageFile)
PIL.TgaImagePlugin.TgaImageFile._open(self)
PIL.TgaImagePlugin._save(im,fp,filename,check=0)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ExifTags.py----------------------------------------


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/PixarImagePlugin.py----------------------------------------
A:PIL.PixarImagePlugin.s->self.fp.read(4)
PIL.PixarImagePlugin.PixarImageFile(ImageFile.ImageFile)
PIL.PixarImagePlugin.PixarImageFile._open(self)
PIL.PixarImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/MpoImagePlugin.py----------------------------------------
A:PIL.MpoImagePlugin.self.mpinfo->self._getmp()
PIL.MpoImagePlugin.MpoImageFile(JpegImagePlugin.JpegImageFile)
PIL.MpoImagePlugin.MpoImageFile._open(self)
PIL.MpoImagePlugin.MpoImageFile.is_animated(self)
PIL.MpoImagePlugin.MpoImageFile.load_seek(self,pos)
PIL.MpoImagePlugin.MpoImageFile.n_frames(self)
PIL.MpoImagePlugin.MpoImageFile.seek(self,frame)
PIL.MpoImagePlugin.MpoImageFile.tell(self)
PIL.MpoImagePlugin._accept(prefix)
PIL.MpoImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/PaletteFile.py----------------------------------------
A:PIL.PaletteFile.s->fp.readline()
A:PIL.PaletteFile.self.palette->b''.join(self.palette)
PIL.PaletteFile.PaletteFile(self,fp)
PIL.PaletteFile.PaletteFile.__init__(self,fp)
PIL.PaletteFile.PaletteFile.getpalette(self)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/_util.py----------------------------------------
PIL._util.deferred_error(self,ex)
PIL._util.deferred_error.__getattr__(self,elt)
PIL._util.deferred_error.__init__(self,ex)
PIL._util.isDirectory(f)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/SpiderImagePlugin.py----------------------------------------
A:PIL.SpiderImagePlugin.i->int(f)
A:PIL.SpiderImagePlugin.iform->int(h[5])
A:PIL.SpiderImagePlugin.labrec->int(h[13])
A:PIL.SpiderImagePlugin.labbyt->int(h[22])
A:PIL.SpiderImagePlugin.lenbyt->int(h[23])
A:PIL.SpiderImagePlugin.fp->open(filename, 'wb')
A:PIL.SpiderImagePlugin.f->self.fp.read(n)
A:PIL.SpiderImagePlugin.t->struct.unpack('<27f', f)
A:PIL.SpiderImagePlugin.hdrlen->isSpiderHeader(t)
A:PIL.SpiderImagePlugin.self.istack->int(h[24])
A:PIL.SpiderImagePlugin.self.imgnumber->int(h[27])
A:PIL.SpiderImagePlugin.self._nimages->int(h[26])
A:PIL.SpiderImagePlugin.(minimum, maximum)->self.getextrema()
A:PIL.SpiderImagePlugin.im->im.transpose(Image.FLIP_LEFT_RIGHT).transpose(Image.FLIP_LEFT_RIGHT)
A:PIL.SpiderImagePlugin.nvalues->int(labbyt / 4)
A:PIL.SpiderImagePlugin.hdr[2]->float(nrow)
A:PIL.SpiderImagePlugin.hdr[12]->float(nsam)
A:PIL.SpiderImagePlugin.hdr[13]->float(labrec)
A:PIL.SpiderImagePlugin.hdr[22]->float(labbyt)
A:PIL.SpiderImagePlugin.hdr[23]->float(lenbyt)
A:PIL.SpiderImagePlugin.hdr->makeSpiderHeader(im)
PIL.SpiderImagePlugin.SpiderImageFile(ImageFile.ImageFile)
PIL.SpiderImagePlugin.SpiderImageFile._open(self)
PIL.SpiderImagePlugin.SpiderImageFile.convert2byte(self,depth=255)
PIL.SpiderImagePlugin.SpiderImageFile.is_animated(self)
PIL.SpiderImagePlugin.SpiderImageFile.n_frames(self)
PIL.SpiderImagePlugin.SpiderImageFile.seek(self,frame)
PIL.SpiderImagePlugin.SpiderImageFile.tell(self)
PIL.SpiderImagePlugin.SpiderImageFile.tkPhotoImage(self)
PIL.SpiderImagePlugin._save(im,fp,filename)
PIL.SpiderImagePlugin._save_spider(im,fp,filename)
PIL.SpiderImagePlugin.isInt(f)
PIL.SpiderImagePlugin.isSpiderHeader(t)
PIL.SpiderImagePlugin.isSpiderImage(filename)
PIL.SpiderImagePlugin.loadImageSeries(filelist=None)
PIL.SpiderImagePlugin.makeSpiderHeader(im)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/MpegImagePlugin.py----------------------------------------
A:PIL.MpegImagePlugin.c->self.next()
A:PIL.MpegImagePlugin.v->self.peek(bits)
A:PIL.MpegImagePlugin.s->BitStream(self.fp)
PIL.MpegImagePlugin.BitStream(self,fp)
PIL.MpegImagePlugin.BitStream.__init__(self,fp)
PIL.MpegImagePlugin.BitStream.next(self)
PIL.MpegImagePlugin.BitStream.peek(self,bits)
PIL.MpegImagePlugin.BitStream.read(self,bits)
PIL.MpegImagePlugin.BitStream.skip(self,bits)
PIL.MpegImagePlugin.MpegImageFile(ImageFile.ImageFile)
PIL.MpegImagePlugin.MpegImageFile._open(self)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/Hdf5StubImagePlugin.py----------------------------------------
A:PIL.Hdf5StubImagePlugin.offset->self.fp.tell()
A:PIL.Hdf5StubImagePlugin.loader->self._load()
PIL.Hdf5StubImagePlugin.HDF5StubImageFile(ImageFile.StubImageFile)
PIL.Hdf5StubImagePlugin.HDF5StubImageFile._load(self)
PIL.Hdf5StubImagePlugin.HDF5StubImageFile._open(self)
PIL.Hdf5StubImagePlugin._accept(prefix)
PIL.Hdf5StubImagePlugin._save(im,fp,filename)
PIL.Hdf5StubImagePlugin.register_handler(handler)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImageShow.py----------------------------------------
A:PIL.ImageShow.viewer->viewer()
A:PIL.ImageShow.base->PIL.Image.getmodebase(image.mode)
A:PIL.ImageShow.image->image.convert(base).convert(base)
A:PIL.ImageShow.path->os.environ.get('PATH')
A:PIL.ImageShow.filename->os.path.join(dirname, executable)
A:PIL.ImageShow.(command, executable)->self.get_command_ex(file, **options)
PIL.ImageShow.Viewer(object)
PIL.ImageShow.Viewer.get_command(self,file,**options)
PIL.ImageShow.Viewer.get_format(self,image)
PIL.ImageShow.Viewer.save_image(self,image)
PIL.ImageShow.Viewer.show(self,image,**options)
PIL.ImageShow.Viewer.show_file(self,file,**options)
PIL.ImageShow.Viewer.show_image(self,image,**options)
PIL.ImageShow.register(viewer,order=1)
PIL.ImageShow.show(image,title=None,**options)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/BufrStubImagePlugin.py----------------------------------------
A:PIL.BufrStubImagePlugin.offset->self.fp.tell()
A:PIL.BufrStubImagePlugin.loader->self._load()
PIL.BufrStubImagePlugin.BufrStubImageFile(ImageFile.StubImageFile)
PIL.BufrStubImagePlugin.BufrStubImageFile._load(self)
PIL.BufrStubImagePlugin.BufrStubImageFile._open(self)
PIL.BufrStubImagePlugin._accept(prefix)
PIL.BufrStubImagePlugin._save(im,fp,filename)
PIL.BufrStubImagePlugin.register_handler(handler)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/PcfFontFile.py----------------------------------------
A:PIL.PcfFontFile.magic->l32(fp.read(4))
A:PIL.PcfFontFile.count->l32(fp.read(4))
A:PIL.PcfFontFile.type->l32(fp.read(4))
A:PIL.PcfFontFile.self.info->self._load_properties()
A:PIL.PcfFontFile.metrics->self._load_metrics()
A:PIL.PcfFontFile.bitmaps->self._load_bitmaps(metrics)
A:PIL.PcfFontFile.encoding->self._load_encoding()
A:PIL.PcfFontFile.format->l32(fp.read(4))
A:PIL.PcfFontFile.(fp, format, i16, i32)->self._getformat(PCF_BDF_ENCODINGS)
A:PIL.PcfFontFile.nprops->i32(fp.read(4))
A:PIL.PcfFontFile.data->fp.read(bitmapsize)
A:PIL.PcfFontFile.k->sz(data, k)
A:PIL.PcfFontFile.v->sz(data, v)
A:PIL.PcfFontFile.left->i16(fp.read(2))
A:PIL.PcfFontFile.right->i16(fp.read(2))
A:PIL.PcfFontFile.width->i16(fp.read(2))
A:PIL.PcfFontFile.ascent->i16(fp.read(2))
A:PIL.PcfFontFile.descent->i16(fp.read(2))
A:PIL.PcfFontFile.attributes->i16(fp.read(2))
A:PIL.PcfFontFile.nbitmaps->i32(fp.read(4))
A:PIL.PcfFontFile.default->i16(fp.read(2))
A:PIL.PcfFontFile.encodingOffset->i16(fp.read(2))
PIL.PcfFontFile.PcfFontFile(self,fp)
PIL.PcfFontFile.PcfFontFile.__init__(self,fp)
PIL.PcfFontFile.PcfFontFile._getformat(self,tag)
PIL.PcfFontFile.PcfFontFile._load_bitmaps(self,metrics)
PIL.PcfFontFile.PcfFontFile._load_encoding(self)
PIL.PcfFontFile.PcfFontFile._load_metrics(self)
PIL.PcfFontFile.PcfFontFile._load_properties(self)
PIL.PcfFontFile.sz(s,o)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImageStat.py----------------------------------------
A:PIL.ImageStat.self.h->image_or_list.histogram()
A:PIL.ImageStat.self.bands->list(range(len(self.h) // 256))
A:PIL.ImageStat.v->getattr(self, '_get' + id)()
A:PIL.ImageStat.n->min(n, i)
A:PIL.ImageStat.x->max(x, i)
PIL.ImageStat.Stat(self,image_or_list,mask=None)
PIL.ImageStat.Stat.__getattr__(self,id)
PIL.ImageStat.Stat.__init__(self,image_or_list,mask=None)
PIL.ImageStat.Stat._getcount(self)
PIL.ImageStat.Stat._getextrema(self)
PIL.ImageStat.Stat._getmean(self)
PIL.ImageStat.Stat._getmedian(self)
PIL.ImageStat.Stat._getrms(self)
PIL.ImageStat.Stat._getstddev(self)
PIL.ImageStat.Stat._getsum(self)
PIL.ImageStat.Stat._getsum2(self)
PIL.ImageStat.Stat._getvar(self)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImageOps.py----------------------------------------
A:PIL.ImageOps.color->PIL.ImageColor.getcolor(color, mode)
A:PIL.ImageOps.histogram->image.convert('RGB').histogram()
A:PIL.ImageOps.ix->int(ix * scale + offset)
A:PIL.ImageOps.black->_color(black, 'RGB')
A:PIL.ImageOps.white->_color(white, 'RGB')
A:PIL.ImageOps.image->image.convert('RGB').convert('RGB')
A:PIL.ImageOps.(left, top, right, bottom)->_border(border)
A:PIL.ImageOps.h->image.convert('RGB').convert('RGB').histogram(mask)
A:PIL.ImageOps.out->image.convert('RGB').convert('RGB').crop((leftSide, topSide, leftSide + cropWidth, topSide + cropHeight))
A:PIL.ImageOps.cropWidth->int(aspectRatio * float(liveSize[1]) + 0.5)
A:PIL.ImageOps.cropHeight->int(float(liveSize[0]) / aspectRatio + 0.5)
A:PIL.ImageOps.leftSide->int(liveArea[0] + float(liveSize[0] - cropWidth) * centering[0])
A:PIL.ImageOps.topSide->int(liveArea[1] + float(liveSize[1] - cropHeight) * centering[1])
PIL.ImageOps._border(border)
PIL.ImageOps._color(color,mode)
PIL.ImageOps._lut(image,lut)
PIL.ImageOps.autocontrast(image,cutoff=0,ignore=None)
PIL.ImageOps.box_blur(image,radius)
PIL.ImageOps.colorize(image,black,white)
PIL.ImageOps.crop(image,border=0)
PIL.ImageOps.deform(image,deformer,resample=Image.BILINEAR)
PIL.ImageOps.equalize(image,mask=None)
PIL.ImageOps.expand(image,border=0,fill=0)
PIL.ImageOps.fit(image,size,method=Image.NEAREST,bleed=0.0,centering=(0.5,0.5))
PIL.ImageOps.flip(image)
PIL.ImageOps.gaussian_blur(im,radius=None)
PIL.ImageOps.grayscale(image)
PIL.ImageOps.invert(image)
PIL.ImageOps.mirror(image)
PIL.ImageOps.posterize(image,bits)
PIL.ImageOps.solarize(image,threshold=128)
PIL.ImageOps.unsharp_mask(im,radius=None,percent=None,threshold=None)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImageFilter.py----------------------------------------
A:PIL.ImageFilter.scale->functools.reduce(lambda a, b: a + b, kernel)
A:PIL.ImageFilter.image->image.expand(self.size // 2, self.size // 2).expand(self.size // 2, self.size // 2)
PIL.ImageFilter.BLUR(BuiltinFilter)
PIL.ImageFilter.BuiltinFilter(self)
PIL.ImageFilter.BuiltinFilter.__init__(self)
PIL.ImageFilter.CONTOUR(BuiltinFilter)
PIL.ImageFilter.DETAIL(BuiltinFilter)
PIL.ImageFilter.EDGE_ENHANCE(BuiltinFilter)
PIL.ImageFilter.EDGE_ENHANCE_MORE(BuiltinFilter)
PIL.ImageFilter.EMBOSS(BuiltinFilter)
PIL.ImageFilter.FIND_EDGES(BuiltinFilter)
PIL.ImageFilter.Filter(object)
PIL.ImageFilter.GaussianBlur(self,radius=2)
PIL.ImageFilter.GaussianBlur.__init__(self,radius=2)
PIL.ImageFilter.GaussianBlur.filter(self,image)
PIL.ImageFilter.Kernel(self,size,kernel,scale=None,offset=0)
PIL.ImageFilter.Kernel.__init__(self,size,kernel,scale=None,offset=0)
PIL.ImageFilter.Kernel.filter(self,image)
PIL.ImageFilter.MaxFilter(self,size=3)
PIL.ImageFilter.MaxFilter.__init__(self,size=3)
PIL.ImageFilter.MedianFilter(self,size=3)
PIL.ImageFilter.MedianFilter.__init__(self,size=3)
PIL.ImageFilter.MinFilter(self,size=3)
PIL.ImageFilter.MinFilter.__init__(self,size=3)
PIL.ImageFilter.ModeFilter(self,size=3)
PIL.ImageFilter.ModeFilter.__init__(self,size=3)
PIL.ImageFilter.ModeFilter.filter(self,image)
PIL.ImageFilter.RankFilter(self,size,rank)
PIL.ImageFilter.RankFilter.__init__(self,size,rank)
PIL.ImageFilter.RankFilter.filter(self,image)
PIL.ImageFilter.SHARPEN(BuiltinFilter)
PIL.ImageFilter.SMOOTH(BuiltinFilter)
PIL.ImageFilter.SMOOTH_MORE(BuiltinFilter)
PIL.ImageFilter.UnsharpMask(self,radius=2,percent=150,threshold=3)
PIL.ImageFilter.UnsharpMask.__init__(self,radius=2,percent=150,threshold=3)
PIL.ImageFilter.UnsharpMask.filter(self,image)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImageFont.py----------------------------------------
A:PIL.ImageFont.core->_imagingft_not_installed()
A:PIL.ImageFont.fp->open(filename, 'rb')
A:PIL.ImageFont.image->PIL.Image.open(fullname)
A:PIL.ImageFont.s->file.readline()
A:PIL.ImageFont.data->file.read(256 * 20)
A:PIL.ImageFont.self.font->_imagingft_not_installed().getfont('', size, index, encoding, self.font_bytes)
A:PIL.ImageFont.self.font_bytes->font.read()
A:PIL.ImageFont.(size, offset)->self.font.getsize(text)
A:PIL.ImageFont.im->self.font.getmask(text, mode)
A:PIL.ImageFont.(w, h)->self.font.getsize(text)
A:PIL.ImageFont.f->ImageFont()
A:PIL.ImageFont.ttf_filename->os.path.basename(font)
A:PIL.ImageFont.windir->os.environ.get('WINDIR')
A:PIL.ImageFont.lindirs->os.environ.get('XDG_DATA_DIRS', '')
A:PIL.ImageFont.fontpath->os.path.join(walkroot, walkfilename)
A:PIL.ImageFont.filename->filename.decode('utf-8').decode('utf-8')
PIL.ImageFont.FreeTypeFont(self,font=None,size=10,index=0,encoding='')
PIL.ImageFont.FreeTypeFont.__init__(self,font=None,size=10,index=0,encoding='')
PIL.ImageFont.FreeTypeFont.font_variant(self,font=None,size=None,index=None,encoding=None)
PIL.ImageFont.FreeTypeFont.getmask(self,text,mode='')
PIL.ImageFont.FreeTypeFont.getmask2(self,text,mode='',fill=Image.core.fill)
PIL.ImageFont.FreeTypeFont.getmetrics(self)
PIL.ImageFont.FreeTypeFont.getname(self)
PIL.ImageFont.FreeTypeFont.getoffset(self,text)
PIL.ImageFont.FreeTypeFont.getsize(self,text)
PIL.ImageFont.ImageFont(object)
PIL.ImageFont.ImageFont._load_pilfont(self,filename)
PIL.ImageFont.ImageFont._load_pilfont_data(self,file,image)
PIL.ImageFont.TransposedFont(self,font,orientation=None)
PIL.ImageFont.TransposedFont.__init__(self,font,orientation=None)
PIL.ImageFont.TransposedFont.getmask(self,text,mode='')
PIL.ImageFont.TransposedFont.getsize(self,text)
PIL.ImageFont._imagingft_not_installed(object)
PIL.ImageFont._imagingft_not_installed.__getattr__(self,id)
PIL.ImageFont.load(filename)
PIL.ImageFont.load_default()
PIL.ImageFont.load_path(filename)
PIL.ImageFont.truetype(font=None,size=10,index=0,encoding='')


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/PalmImagePlugin.py----------------------------------------
A:PIL.PalmImagePlugin.image->PIL.Image.new('L', (1, len(_Palm8BitColormapValues)))
A:PIL.PalmImagePlugin.Palm8BitColormapImage->build_prototype_image()
A:PIL.PalmImagePlugin.im->im.point(lambda x, maxval=(1 << bpp) - 1: maxval - (x & maxval)).point(lambda x, maxval=(1 << bpp) - 1: maxval - (x & maxval))
A:PIL.PalmImagePlugin.colormap->im.point(lambda x, maxval=(1 << bpp) - 1: maxval - (x & maxval)).point(lambda x, maxval=(1 << bpp) - 1: maxval - (x & maxval)).getdata().getpalette()
PIL.PalmImagePlugin._save(im,fp,filename,check=0)
PIL.PalmImagePlugin.build_prototype_image()


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImageChops.py----------------------------------------
PIL.ImageChops.add(image1,image2,scale=1.0,offset=0)
PIL.ImageChops.add_modulo(image1,image2)
PIL.ImageChops.blend(image1,image2,alpha)
PIL.ImageChops.composite(image1,image2,mask)
PIL.ImageChops.constant(image,value)
PIL.ImageChops.darker(image1,image2)
PIL.ImageChops.difference(image1,image2)
PIL.ImageChops.duplicate(image)
PIL.ImageChops.invert(image)
PIL.ImageChops.lighter(image1,image2)
PIL.ImageChops.logical_and(image1,image2)
PIL.ImageChops.logical_or(image1,image2)
PIL.ImageChops.logical_xor(image1,image2)
PIL.ImageChops.multiply(image1,image2)
PIL.ImageChops.offset(image,xoffset,yoffset=None)
PIL.ImageChops.screen(image1,image2)
PIL.ImageChops.subtract(image1,image2,scale=1.0,offset=0)
PIL.ImageChops.subtract_modulo(image1,image2)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/features.py----------------------------------------
A:PIL.features.imported_module->__import__(module)
A:PIL.features.method->getattr(imported_module, method_to_call)
PIL.features.check_codec(feature)
PIL.features.check_module(feature)
PIL.features.get_supported_codecs()
PIL.features.get_supported_modules()


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/XVThumbImagePlugin.py----------------------------------------
A:PIL.XVThumbImagePlugin.s->s.strip().split().strip().split()
A:PIL.XVThumbImagePlugin.self.palette->PIL.ImagePalette.raw('RGB', PALETTE)
PIL.XVThumbImagePlugin.XVThumbImageFile(ImageFile.ImageFile)
PIL.XVThumbImagePlugin.XVThumbImageFile._open(self)
PIL.XVThumbImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/_binary.py----------------------------------------
PIL._binary.i16be(c,o=0)
PIL._binary.i16le(c,o=0)
PIL._binary.i32be(c,o=0)
PIL._binary.i32le(c,o=0)
PIL._binary.o16be(i)
PIL._binary.o16le(i)
PIL._binary.o32be(i)
PIL._binary.o32le(i)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/GimpPaletteFile.py----------------------------------------
A:PIL.GimpPaletteFile.s->fp.readline()
A:PIL.GimpPaletteFile.v->tuple(map(int, s.split()[:3]))
A:PIL.GimpPaletteFile.self.palette->b''.join(self.palette)
PIL.GimpPaletteFile.GimpPaletteFile(self,fp)
PIL.GimpPaletteFile.GimpPaletteFile.__init__(self,fp)
PIL.GimpPaletteFile.GimpPaletteFile.getpalette(self)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/EpsImagePlugin.py----------------------------------------
A:PIL.EpsImagePlugin.split->re.compile('^%%([^:]*):[ \\t]*(.*)[ \\t]*$')
A:PIL.EpsImagePlugin.field->re.compile('^%[%!\\w]([^:]*)[ \\t]*$')
A:PIL.EpsImagePlugin.gs->subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
A:PIL.EpsImagePlugin.(out_fd, outfile)->tempfile.mkstemp()
A:PIL.EpsImagePlugin.(in_fd, infile_temp)->tempfile.mkstemp()
A:PIL.EpsImagePlugin.fsize->io.TextIOWrapper(fp, encoding='latin-1').tell()
A:PIL.EpsImagePlugin.s->io.TextIOWrapper(fp, encoding='latin-1').read(160)
A:PIL.EpsImagePlugin.status->subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE).wait()
A:PIL.EpsImagePlugin.im->PIL.Image.core.open_ppm(outfile)
A:PIL.EpsImagePlugin.c->self.fp.read(1)
A:PIL.EpsImagePlugin.self.char->self.fp.read(1)
A:PIL.EpsImagePlugin.(length, offset)->self._find_offset(self.fp)
A:PIL.EpsImagePlugin.fp->io.TextIOWrapper(fp, encoding='latin-1')
A:PIL.EpsImagePlugin.m->re.compile('^%[%!\\w]([^:]*)[ \\t]*$').match(s)
A:PIL.EpsImagePlugin.(k, v)->re.compile('^%[%!\\w]([^:]*)[ \\t]*$').match(s).group(1, 2)
A:PIL.EpsImagePlugin.k->re.compile('^%[%!\\w]([^:]*)[ \\t]*$').match(s).group(1)
A:PIL.EpsImagePlugin.length->i32(s[8:12])
A:PIL.EpsImagePlugin.offset->i32(s[4:8])
A:PIL.EpsImagePlugin.self.im->Ghostscript(self.tile, self.size, self.fp, scale)
PIL.EpsImagePlugin.EpsImageFile(ImageFile.ImageFile)
PIL.EpsImagePlugin.EpsImageFile._find_offset(self,fp)
PIL.EpsImagePlugin.EpsImageFile._open(self)
PIL.EpsImagePlugin.EpsImageFile.load(self,scale=1)
PIL.EpsImagePlugin.EpsImageFile.load_seek(self,*args,**kwargs)
PIL.EpsImagePlugin.Ghostscript(tile,size,fp,scale=1)
PIL.EpsImagePlugin.PSFile(self,fp)
PIL.EpsImagePlugin.PSFile.__init__(self,fp)
PIL.EpsImagePlugin.PSFile.readline(self)
PIL.EpsImagePlugin.PSFile.seek(self,offset,whence=0)
PIL.EpsImagePlugin._accept(prefix)
PIL.EpsImagePlugin._save(im,fp,filename,eps=1)
PIL.EpsImagePlugin.has_ghostscript()


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/DcxImagePlugin.py----------------------------------------
A:PIL.DcxImagePlugin.s->self.fp.read(4)
A:PIL.DcxImagePlugin.offset->i32(self.fp.read(4))
PIL.DcxImagePlugin.DcxImageFile(PcxImageFile)
PIL.DcxImagePlugin.DcxImageFile._open(self)
PIL.DcxImagePlugin.DcxImageFile.is_animated(self)
PIL.DcxImagePlugin.DcxImageFile.n_frames(self)
PIL.DcxImagePlugin.DcxImageFile.seek(self,frame)
PIL.DcxImagePlugin.DcxImageFile.tell(self)
PIL.DcxImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImageMath.py----------------------------------------
A:PIL.ImageMath.im1->im1.crop((0, 0) + size).crop((0, 0) + size)
A:PIL.ImageMath.out->builtins.eval(expression, args)
A:PIL.ImageMath.op->getattr(_imagingmath, op + '_' + im1.mode)
A:PIL.ImageMath.im2->im2.crop((0, 0) + size).crop((0, 0) + size)
A:PIL.ImageMath.args->ops.copy()
A:PIL.ImageMath.args[k]->_Operand(v)
PIL.ImageMath._Operand(self,im)
PIL.ImageMath._Operand.__abs__(self)
PIL.ImageMath._Operand.__add__(self,other)
PIL.ImageMath._Operand.__and__(self,other)
PIL.ImageMath._Operand.__bool__(self)
PIL.ImageMath._Operand.__eq__(self,other)
PIL.ImageMath._Operand.__fixup(self,im1)
PIL.ImageMath._Operand.__ge__(self,other)
PIL.ImageMath._Operand.__gt__(self,other)
PIL.ImageMath._Operand.__init__(self,im)
PIL.ImageMath._Operand.__invert__(self)
PIL.ImageMath._Operand.__le__(self,other)
PIL.ImageMath._Operand.__lshift__(self,other)
PIL.ImageMath._Operand.__lt__(self,other)
PIL.ImageMath._Operand.__mod__(self,other)
PIL.ImageMath._Operand.__mul__(self,other)
PIL.ImageMath._Operand.__ne__(self,other)
PIL.ImageMath._Operand.__neg__(self)
PIL.ImageMath._Operand.__or__(self,other)
PIL.ImageMath._Operand.__pos__(self)
PIL.ImageMath._Operand.__pow__(self,other)
PIL.ImageMath._Operand.__radd__(self,other)
PIL.ImageMath._Operand.__rand__(self,other)
PIL.ImageMath._Operand.__rmod__(self,other)
PIL.ImageMath._Operand.__rmul__(self,other)
PIL.ImageMath._Operand.__ror__(self,other)
PIL.ImageMath._Operand.__rpow__(self,other)
PIL.ImageMath._Operand.__rshift__(self,other)
PIL.ImageMath._Operand.__rsub__(self,other)
PIL.ImageMath._Operand.__rtruediv__(self,other)
PIL.ImageMath._Operand.__rxor__(self,other)
PIL.ImageMath._Operand.__sub__(self,other)
PIL.ImageMath._Operand.__truediv__(self,other)
PIL.ImageMath._Operand.__xor__(self,other)
PIL.ImageMath._Operand.apply(self,op,im1,im2=None,mode=None)
PIL.ImageMath._isconstant(v)
PIL.ImageMath.eval(expression,_dict={},**kw)
PIL.ImageMath.imagemath_convert(self,mode)
PIL.ImageMath.imagemath_equal(self,other)
PIL.ImageMath.imagemath_float(self)
PIL.ImageMath.imagemath_int(self)
PIL.ImageMath.imagemath_max(self,other)
PIL.ImageMath.imagemath_min(self,other)
PIL.ImageMath.imagemath_notequal(self,other)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/PdfImagePlugin.py----------------------------------------
A:PIL.PdfImagePlugin.resolution->PIL.Image.new('L', (len(data), 1), None).encoderinfo.get('resolution', 72.0)
A:PIL.PdfImagePlugin.fp->TextWriter(fp)
A:PIL.PdfImagePlugin.palette->PIL.Image.new('L', (len(data), 1), None).im.getpalette('RGB')
A:PIL.PdfImagePlugin.r->i8(palette[i * 3])
A:PIL.PdfImagePlugin.g->i8(palette[i * 3 + 1])
A:PIL.PdfImagePlugin.b->i8(palette[i * 3 + 2])
A:PIL.PdfImagePlugin.op->TextWriter(io.BytesIO())
A:PIL.PdfImagePlugin.data->PIL.Image.new('L', (len(data), 1), None).tobytes('raw', '1')
A:PIL.PdfImagePlugin.im->PIL.Image.new('L', (len(data), 1), None)
A:PIL.PdfImagePlugin.startxref->TextWriter(fp).tell()
PIL.PdfImagePlugin._endobj(fp)
PIL.PdfImagePlugin._obj(fp,obj,**dict)
PIL.PdfImagePlugin._save(im,fp,filename,save_all=False)
PIL.PdfImagePlugin._save_all(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/McIdasImagePlugin.py----------------------------------------
A:PIL.McIdasImagePlugin.s->self.fp.read(256)
PIL.McIdasImagePlugin.McIdasImageFile(ImageFile.ImageFile)
PIL.McIdasImagePlugin.McIdasImageFile._open(self)
PIL.McIdasImagePlugin._accept(s)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImageFile.py----------------------------------------
A:PIL.ImageFile.message->ERRORS.get(error)
A:PIL.ImageFile.self.fp->open(fp, 'rb')
A:PIL.ImageFile.pixel->PIL.Image.Image.load(self)
A:PIL.ImageFile.self.map->mmap.mmap(fp.fileno(), size, access=mmap.ACCESS_READ)
A:PIL.ImageFile.self.im->PIL.Image.core.new(self.mode, self.size)
A:PIL.ImageFile.fp->io.BytesIO(self.data)
A:PIL.ImageFile.size->os.path.getsize(self.filename)
A:PIL.ImageFile.decoder->PIL.Image._getdecoder(self.mode, decoder_name, args, self.decoderconfig)
A:PIL.ImageFile.(status, err_code)->PIL.Image._getdecoder(self.mode, decoder_name, args, self.decoderconfig).decode(b'')
A:PIL.ImageFile.s->PIL.Image._getencoder(im.mode, e, a, im.encoderconfig).encode_to_file(fh, bufsize)
A:PIL.ImageFile.(n, err_code)->PIL.Image._getdecoder(self.mode, decoder_name, args, self.decoderconfig).decode(b)
A:PIL.ImageFile.loader->self._load()
A:PIL.ImageFile.image->self._load().load(self)
A:PIL.ImageFile.skip->min(len(self.data), self.offset)
A:PIL.ImageFile.(n, e)->self.decoder.decode(self.data)
A:PIL.ImageFile.im->PIL.Image.open(fp)
A:PIL.ImageFile.self.decoder->PIL.Image._getdecoder(im.mode, d, a, im.decoderconfig)
A:PIL.ImageFile.self.image->PIL.Image.open(fp)
A:PIL.ImageFile.bufsize->max(MAXBLOCK, bufsize, im.size[0] * 4)
A:PIL.ImageFile.fh->io.BytesIO(self.data).fileno()
A:PIL.ImageFile.e->PIL.Image._getencoder(im.mode, e, a, im.encoderconfig)
A:PIL.ImageFile.(l, s)->PIL.Image._getencoder(im.mode, e, a, im.encoderconfig).encode_to_pyfd()
A:PIL.ImageFile.(l, s, d)->PIL.Image._getencoder(im.mode, e, a, im.encoderconfig).encode(bufsize)
A:PIL.ImageFile.block->io.BytesIO(self.data).read(min(size, SAFEBLOCK))
PIL.ImageFile.ImageFile(self,fp=None,filename=None)
PIL.ImageFile.ImageFile.__init__(self,fp=None,filename=None)
PIL.ImageFile.ImageFile.draft(self,mode,size)
PIL.ImageFile.ImageFile.load(self)
PIL.ImageFile.ImageFile.load_end(self)
PIL.ImageFile.ImageFile.load_prepare(self)
PIL.ImageFile.ImageFile.verify(self)
PIL.ImageFile.Parser(object)
PIL.ImageFile.Parser.close(self)
PIL.ImageFile.Parser.feed(self,data)
PIL.ImageFile.Parser.reset(self)
PIL.ImageFile.StubImageFile(ImageFile)
PIL.ImageFile.StubImageFile._load(self)
PIL.ImageFile.StubImageFile._open(self)
PIL.ImageFile.StubImageFile.load(self)
PIL.ImageFile._safe_read(fp,size)
PIL.ImageFile._save(im,fp,tile,bufsize=0)
PIL.ImageFile._tilesort(t)
PIL.ImageFile.raise_ioerror(error)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/PSDraw.py----------------------------------------
A:PIL.PSDraw.text->'\\)'.join(text.split(')'))
A:PIL.PSDraw.xmax->float(box[2] - box[0])
A:PIL.PSDraw.ymax->float(box[3] - box[1])
PIL.PSDraw.PSDraw(self,fp=None)
PIL.PSDraw.PSDraw.__init__(self,fp=None)
PIL.PSDraw.PSDraw._fp_write(self,to_write)
PIL.PSDraw.PSDraw.begin_document(self,id=None)
PIL.PSDraw.PSDraw.end_document(self)
PIL.PSDraw.PSDraw.image(self,box,im,dpi=None)
PIL.PSDraw.PSDraw.line(self,xy0,xy1)
PIL.PSDraw.PSDraw.rectangle(self,box)
PIL.PSDraw.PSDraw.setfont(self,font,size)
PIL.PSDraw.PSDraw.text(self,xy,text)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/TiffTags.py----------------------------------------
A:PIL.TiffTags.TAGS_V2[k]->TagInfo(k, *v)
A:PIL.TiffTags.LIBTIFF_CORE->set([255, 256, 257, 258, 259, 262, 263, 266, 274, 277, 278, 280, 281, 340, 341, 282, 283, 284, 286, 287, 296, 297, 321, 320, 338, 32995, 322, 323, 32998, 32996, 339, 32997, 330, 531, 530, 301, 532, 333, 269])
PIL.TiffTags.TagInfo(cls,value=None,name='unknown',type=None,length=0,enum=None)
PIL.TiffTags.TagInfo.__new__(cls,value=None,name='unknown',type=None,length=0,enum=None)
PIL.TiffTags.TagInfo.cvt_enum(self,value)
PIL.TiffTags._populate()
PIL.TiffTags.lookup(tag)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImtImagePlugin.py----------------------------------------
A:PIL.ImtImagePlugin.field->re.compile(b'([a-z]*) ([^ \\r\\n]*)')
A:PIL.ImtImagePlugin.s->self.fp.read(1)
A:PIL.ImtImagePlugin.m->re.compile(b'([a-z]*) ([^ \\r\\n]*)').match(s)
A:PIL.ImtImagePlugin.(k, v)->re.compile(b'([a-z]*) ([^ \\r\\n]*)').match(s).group(1, 2)
A:PIL.ImtImagePlugin.xsize->int(v)
A:PIL.ImtImagePlugin.ysize->int(v)
PIL.ImtImagePlugin.ImtImageFile(ImageFile.ImageFile)
PIL.ImtImagePlugin.ImtImageFile._open(self)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/TiffImagePlugin.py----------------------------------------
A:PIL.TiffImagePlugin.COMPRESSION_INFO_REV->dict([(v, k) for (k, v) in COMPRESSION_INFO.items()])
A:PIL.TiffImagePlugin.n_d->IFDRational(1 / val if inv else val).limit_rational(max_val)
A:PIL.TiffImagePlugin.self._val->Fraction(value, denominator)
A:PIL.TiffImagePlugin.f->self._val.limit_denominator(max_denominator)
A:PIL.TiffImagePlugin.__add__->_delegate('__add__')
A:PIL.TiffImagePlugin.__radd__->_delegate('__radd__')
A:PIL.TiffImagePlugin.__sub__->_delegate('__sub__')
A:PIL.TiffImagePlugin.__rsub__->_delegate('__rsub__')
A:PIL.TiffImagePlugin.__div__->_delegate('__div__')
A:PIL.TiffImagePlugin.__rdiv__->_delegate('__rdiv__')
A:PIL.TiffImagePlugin.__mul__->_delegate('__mul__')
A:PIL.TiffImagePlugin.__rmul__->_delegate('__rmul__')
A:PIL.TiffImagePlugin.__truediv__->_delegate('__truediv__')
A:PIL.TiffImagePlugin.__rtruediv__->_delegate('__rtruediv__')
A:PIL.TiffImagePlugin.__floordiv__->_delegate('__floordiv__')
A:PIL.TiffImagePlugin.__rfloordiv__->_delegate('__rfloordiv__')
A:PIL.TiffImagePlugin.__mod__->_delegate('__mod__')
A:PIL.TiffImagePlugin.__rmod__->_delegate('__rmod__')
A:PIL.TiffImagePlugin.__pow__->_delegate('__pow__')
A:PIL.TiffImagePlugin.__rpow__->_delegate('__rpow__')
A:PIL.TiffImagePlugin.__pos__->_delegate('__pos__')
A:PIL.TiffImagePlugin.__neg__->_delegate('__neg__')
A:PIL.TiffImagePlugin.__abs__->_delegate('__abs__')
A:PIL.TiffImagePlugin.__trunc__->_delegate('__trunc__')
A:PIL.TiffImagePlugin.__lt__->_delegate('__lt__')
A:PIL.TiffImagePlugin.__gt__->_delegate('__gt__')
A:PIL.TiffImagePlugin.__le__->_delegate('__le__')
A:PIL.TiffImagePlugin.__ge__->_delegate('__ge__')
A:PIL.TiffImagePlugin.__nonzero__->_delegate('__nonzero__')
A:PIL.TiffImagePlugin.__ceil__->_delegate('__ceil__')
A:PIL.TiffImagePlugin.__floor__->_delegate('__floor__')
A:PIL.TiffImagePlugin.__round__->_delegate('__round__')
A:PIL.TiffImagePlugin.(self.next,)->self._unpack('L', self._ensure_read(fp, 4))
A:PIL.TiffImagePlugin.prefix->property(lambda self: self._prefix)
A:PIL.TiffImagePlugin.offset->ImageFileDirectory_v2(prefix=prefix).save(fp)
A:PIL.TiffImagePlugin.legacy_api->property(lambda self: self._legacy_api)
A:PIL.TiffImagePlugin.self[tag]->handler(self, data, self.legacy_api)
A:PIL.TiffImagePlugin.info->info.to_v2().to_v2()
A:PIL.TiffImagePlugin.values->tuple((info.cvt_enum(value) for value in values))
A:PIL.TiffImagePlugin.TYPES[idx]->func.__name__[5:].replace('_', ' ')
A:PIL.TiffImagePlugin.size->struct.calcsize('=' + fmt)
A:PIL.TiffImagePlugin.value->self._pack('L', self._unpack('L', value)[0] + offset)
A:PIL.TiffImagePlugin.vals->self._unpack('{0}l'.format(len(data) // 4), data)
A:PIL.TiffImagePlugin.ret->fp.read(size)
A:PIL.TiffImagePlugin.self._offset->fp.tell()
A:PIL.TiffImagePlugin.(tag, typ, count, data)->self._unpack('HHL4s', self._ensure_read(fp, 12))
A:PIL.TiffImagePlugin.typname->PIL.TiffTags.TYPES.get(typ, 'unknown')
A:PIL.TiffImagePlugin.here->fp.tell()
A:PIL.TiffImagePlugin.(offset,)->self._unpack('L', data)
A:PIL.TiffImagePlugin.data->self._write_dispatch[typ](self, *values)
A:PIL.TiffImagePlugin.stripoffsets->len(entries)
A:PIL.TiffImagePlugin.typ->self.tagtype.get(tag)
A:PIL.TiffImagePlugin.name->name.replace(' ', '_').replace(' ', '_')
A:PIL.TiffImagePlugin.tags->property(lambda self: self._tags_v1)
A:PIL.TiffImagePlugin.tagdata->property(lambda self: self._tagdata)
A:PIL.TiffImagePlugin.ifd->ImageFileDirectory_v2(prefix=prefix)
A:PIL.TiffImagePlugin.ifd._tagdata->dict(self._tagdata)
A:PIL.TiffImagePlugin.ifd.tagtype->dict(self.tagtype)
A:PIL.TiffImagePlugin.ifd._tags_v2->dict(self._tags_v2)
A:PIL.TiffImagePlugin.ifh->self.fp.read(8)
A:PIL.TiffImagePlugin.self.tag_v2->ImageFileDirectory_v2(ifh)
A:PIL.TiffImagePlugin.current->self.tell()
A:PIL.TiffImagePlugin.self.im->PIL.Image.core.new(self.mode, self.size)
A:PIL.TiffImagePlugin.self.tagself.ifd->ImageFileDirectory_v1.from_v2(self.tag_v2)
A:PIL.TiffImagePlugin.pixel->PIL.Image.Image.load(self)
A:PIL.TiffImagePlugin.decoder->PIL.Image._getdecoder(self.mode, 'libtiff', args, self.decoderconfig)
A:PIL.TiffImagePlugin.(n, err)->PIL.Image._getdecoder(self.mode, 'libtiff', args, self.decoderconfig).decode(self.fp.read())
A:PIL.TiffImagePlugin.self._planar_configuration->self.tag_v2.get(PLANAR_CONFIGURATION, 1)
A:PIL.TiffImagePlugin.photo->self.tag_v2.get(PHOTOMETRIC_INTERPRETATION, 0)
A:PIL.TiffImagePlugin.fillorder->self.tag_v2.get(FILLORDER, 1)
A:PIL.TiffImagePlugin.xsize->self.tag_v2.get(IMAGEWIDTH)
A:PIL.TiffImagePlugin.ysize->self.tag_v2.get(IMAGELENGTH)
A:PIL.TiffImagePlugin.sampleFormat->self.tag_v2.get(SAMPLEFORMAT, (1,))
A:PIL.TiffImagePlugin.xres->self.tag_v2.get(X_RESOLUTION, 1)
A:PIL.TiffImagePlugin.yres->self.tag_v2.get(Y_RESOLUTION, 1)
A:PIL.TiffImagePlugin.resunit->self.tag_v2.get(RESOLUTION_UNIT, 1)
A:PIL.TiffImagePlugin.h->self.tag_v2.get(323)
A:PIL.TiffImagePlugin.a->self._decoder(rawmode, l)
A:PIL.TiffImagePlugin.w->self.tag_v2.get(322)
A:PIL.TiffImagePlugin.self.palette->PIL.ImagePalette.raw('RGB;L', b''.join(palette))
A:PIL.TiffImagePlugin.compression->im.encoderinfo.get('compression', im.info.get('compression', 'raw'))
A:PIL.TiffImagePlugin.ifd[PLANAR_CONFIGURATION]->getattr(im, '_planar_configuration', 1)
A:PIL.TiffImagePlugin.ifd[key]->info.to_v2().to_v2().get(key)
A:PIL.TiffImagePlugin.ifd.tagtype[key]->im.tag_v2.tagtype.get(key, None)
A:PIL.TiffImagePlugin.name_with_spaces->name.replace(' ', '_').replace(' ', '_').replace('_', ' ')
A:PIL.TiffImagePlugin.dpi->im.encoderinfo.get('dpi')
A:PIL.TiffImagePlugin.ifd[SAMPLESPERPIXEL]->len(bits)
A:PIL.TiffImagePlugin.lut->im.im.getpalette('RGB', 'RGB;L')
A:PIL.TiffImagePlugin.ifd[COLORMAP]->tuple((i8(v) * 256 for v in lut))
A:PIL.TiffImagePlugin.ifd[COMPRESSION]->dict([(v, k) for (k, v) in COMPRESSION_INFO.items()]).get(compression, 1)
A:PIL.TiffImagePlugin._fp->os.dup(fp.fileno())
A:PIL.TiffImagePlugin.legacy_ifd->im.tag.to_v2()
A:PIL.TiffImagePlugin.atts[tag]->float(value)
A:PIL.TiffImagePlugin.e->PIL.Image._getencoder(im.mode, 'libtiff', a, im.encoderconfig)
A:PIL.TiffImagePlugin.(l, s, d)->PIL.Image._getencoder(im.mode, 'libtiff', a, im.encoderconfig).encode(16 * 1024)
PIL.TiffImagePlugin.IFDRational(self,value,denominator=1)
PIL.TiffImagePlugin.IFDRational.__eq__(self,other)
PIL.TiffImagePlugin.IFDRational.__hash__(self)
PIL.TiffImagePlugin.IFDRational.__init__(self,value,denominator=1)
PIL.TiffImagePlugin.IFDRational.__repr__(self)
PIL.TiffImagePlugin.IFDRational._delegate(op)
PIL.TiffImagePlugin.IFDRational.denominator(a)
PIL.TiffImagePlugin.IFDRational.limit_rational(self,max_denominator)
PIL.TiffImagePlugin.IFDRational.numerator(a)
PIL.TiffImagePlugin.ImageFileDirectory_v1(self,*args,**kwargs)
PIL.TiffImagePlugin.ImageFileDirectory_v1.__contains__(self,tag)
PIL.TiffImagePlugin.ImageFileDirectory_v1.__getitem__(self,tag)
PIL.TiffImagePlugin.ImageFileDirectory_v1.__init__(self,*args,**kwargs)
PIL.TiffImagePlugin.ImageFileDirectory_v1.__iter__(self)
PIL.TiffImagePlugin.ImageFileDirectory_v1.__len__(self)
PIL.TiffImagePlugin.ImageFileDirectory_v1.__setitem__(self,tag,value)
PIL.TiffImagePlugin.ImageFileDirectory_v1.from_v2(cls,original)
PIL.TiffImagePlugin.ImageFileDirectory_v1.to_v2(self)
PIL.TiffImagePlugin.ImageFileDirectory_v2(self,ifh=b'II*\x00\x00\x00\x00\x00',prefix=None)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__contains__(self,tag)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__delitem__(self,tag)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__getitem__(self,tag)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__init__(self,ifh=b'II*\x00\x00\x00\x00\x00',prefix=None)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__iter__(self)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__len__(self)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__setitem__(self,tag,value)
PIL.TiffImagePlugin.ImageFileDirectory_v2.__str__(self)
PIL.TiffImagePlugin.ImageFileDirectory_v2._ensure_read(self,fp,size)
PIL.TiffImagePlugin.ImageFileDirectory_v2._pack(self,fmt,*values)
PIL.TiffImagePlugin.ImageFileDirectory_v2._register_basic(idx_fmt_name)
PIL.TiffImagePlugin.ImageFileDirectory_v2._register_loader(idx,size)
PIL.TiffImagePlugin.ImageFileDirectory_v2._register_writer(idx)
PIL.TiffImagePlugin.ImageFileDirectory_v2._setitem(self,tag,value,legacy_api)
PIL.TiffImagePlugin.ImageFileDirectory_v2._unpack(self,fmt,data)
PIL.TiffImagePlugin.ImageFileDirectory_v2.as_dict(self)
PIL.TiffImagePlugin.ImageFileDirectory_v2.legacy_api(self,value)
PIL.TiffImagePlugin.ImageFileDirectory_v2.load(self,fp)
PIL.TiffImagePlugin.ImageFileDirectory_v2.load_byte(self,data,legacy_api=True)
PIL.TiffImagePlugin.ImageFileDirectory_v2.load_rational(self,data,legacy_api=True)
PIL.TiffImagePlugin.ImageFileDirectory_v2.load_signed_rational(self,data,legacy_api=True)
PIL.TiffImagePlugin.ImageFileDirectory_v2.load_string(self,data,legacy_api=True)
PIL.TiffImagePlugin.ImageFileDirectory_v2.load_undefined(self,data,legacy_api=True)
PIL.TiffImagePlugin.ImageFileDirectory_v2.named(self)
PIL.TiffImagePlugin.ImageFileDirectory_v2.reset(self)
PIL.TiffImagePlugin.ImageFileDirectory_v2.save(self,fp)
PIL.TiffImagePlugin.ImageFileDirectory_v2.write_byte(self,data)
PIL.TiffImagePlugin.ImageFileDirectory_v2.write_rational(self,*values)
PIL.TiffImagePlugin.ImageFileDirectory_v2.write_signed_rational(self,*values)
PIL.TiffImagePlugin.ImageFileDirectory_v2.write_string(self,value)
PIL.TiffImagePlugin.ImageFileDirectory_v2.write_undefined(self,value)
PIL.TiffImagePlugin.TiffImageFile(ImageFile.ImageFile)
PIL.TiffImagePlugin.TiffImageFile._decoder(self,rawmode,layer,tile=None)
PIL.TiffImagePlugin.TiffImageFile._load_libtiff(self)
PIL.TiffImagePlugin.TiffImageFile._open(self)
PIL.TiffImagePlugin.TiffImageFile._seek(self,frame)
PIL.TiffImagePlugin.TiffImageFile._setup(self)
PIL.TiffImagePlugin.TiffImageFile.is_animated(self)
PIL.TiffImagePlugin.TiffImageFile.load(self)
PIL.TiffImagePlugin.TiffImageFile.n_frames(self)
PIL.TiffImagePlugin.TiffImageFile.seek(self,frame)
PIL.TiffImagePlugin.TiffImageFile.tell(self)
PIL.TiffImagePlugin._accept(prefix)
PIL.TiffImagePlugin._limit_rational(val,max_val)
PIL.TiffImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/IcnsImagePlugin.py----------------------------------------
A:PIL.IcnsImagePlugin.enable_jpeg2k->hasattr(Image.core, 'jp2klib_version')
A:PIL.IcnsImagePlugin.sig->fobj.read(12)
A:PIL.IcnsImagePlugin.indata->fobj.read(length)
A:PIL.IcnsImagePlugin.im->PIL.Image.open(open(sys.argv[1], 'rb'))
A:PIL.IcnsImagePlugin.byte->fobj.read(1)
A:PIL.IcnsImagePlugin.band->PIL.Image.frombuffer('L', pixel_size, fobj.read(sizesq), 'raw', 'L', 0, 1)
A:PIL.IcnsImagePlugin.jp2kstream->fobj.read(length)
A:PIL.IcnsImagePlugin.f->io.BytesIO(jp2kstream)
A:PIL.IcnsImagePlugin.(sig, filesize)->nextheader(fobj)
A:PIL.IcnsImagePlugin.(sig, blocksize)->nextheader(fobj)
A:PIL.IcnsImagePlugin.sizes->self.itersizes()
A:PIL.IcnsImagePlugin.desc->self.dct.get(code)
A:PIL.IcnsImagePlugin.size->self.bestsize()
A:PIL.IcnsImagePlugin.channels->self.dataforsize(size)
A:PIL.IcnsImagePlugin.self.icns->IcnsFile(self.fp)
A:PIL.IcnsImagePlugin.self.best_size->self.icns.bestsize()
A:PIL.IcnsImagePlugin.self.info['sizes']->self.icns.itersizes()
A:PIL.IcnsImagePlugin.iconset->tempfile.mkdtemp('.iconset')
A:PIL.IcnsImagePlugin.prefix->'icon_{}x{}'.format(w, w)
A:PIL.IcnsImagePlugin.im_scaled->PIL.Image.open(open(sys.argv[1], 'rb')).resize((w * 2, w * 2), Image.LANCZOS)
A:PIL.IcnsImagePlugin.stderr->tempfile.TemporaryFile()
A:PIL.IcnsImagePlugin.convert_proc->Popen(convert_cmd, stdout=PIPE, stderr=stderr)
A:PIL.IcnsImagePlugin.retcode->Popen(convert_cmd, stdout=PIPE, stderr=stderr).wait()
A:PIL.IcnsImagePlugin.imf->IcnsImageFile(open(sys.argv[1], 'rb'))
PIL.IcnsImagePlugin.IcnsFile(self,fobj)
PIL.IcnsImagePlugin.IcnsFile.__init__(self,fobj)
PIL.IcnsImagePlugin.IcnsFile.bestsize(self)
PIL.IcnsImagePlugin.IcnsFile.dataforsize(self,size)
PIL.IcnsImagePlugin.IcnsFile.getimage(self,size=None)
PIL.IcnsImagePlugin.IcnsFile.itersizes(self)
PIL.IcnsImagePlugin.IcnsImageFile(ImageFile.ImageFile)
PIL.IcnsImagePlugin.IcnsImageFile._open(self)
PIL.IcnsImagePlugin.IcnsImageFile.load(self)
PIL.IcnsImagePlugin._save(im,fp,filename)
PIL.IcnsImagePlugin.nextheader(fobj)
PIL.IcnsImagePlugin.read_32(fobj,start_length,size)
PIL.IcnsImagePlugin.read_32t(fobj,start_length,size)
PIL.IcnsImagePlugin.read_mk(fobj,start_length,size)
PIL.IcnsImagePlugin.read_png_or_jpeg2000(fobj,start_length,size)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImageMorph.py----------------------------------------
A:PIL.ImageMorph.self.lut->bytearray(f.read())
A:PIL.ImageMorph.n->len(patterns)
A:PIL.ImageMorph.pattern->pattern.replace(' ', '').replace('\n', '').replace(' ', '').replace('\n', '')
A:PIL.ImageMorph.m->re.search('(\\w*):?\\s*\\((.+?)\\)\\s*->\\s*(\\d)', p.replace('\n', ''))
A:PIL.ImageMorph.options->re.search('(\\w*):?\\s*\\((.+?)\\)\\s*->\\s*(\\d)', p.replace('\n', '')).group(1)
A:PIL.ImageMorph.result->int(m.group(3))
A:PIL.ImageMorph.p->re.compile(p)
A:PIL.ImageMorph.outimage->PIL.Image.new(image.mode, image.size, None)
A:PIL.ImageMorph.count->PIL._imagingmorph.apply(bytes(self.lut), image.im.id, outimage.im.id)
PIL.ImageMorph.LutBuilder(self,patterns=None,op_name=None)
PIL.ImageMorph.LutBuilder.__init__(self,patterns=None,op_name=None)
PIL.ImageMorph.LutBuilder._pattern_permute(self,basic_pattern,options,basic_result)
PIL.ImageMorph.LutBuilder._string_permute(self,pattern,permutation)
PIL.ImageMorph.LutBuilder.add_patterns(self,patterns)
PIL.ImageMorph.LutBuilder.build_default_lut(self)
PIL.ImageMorph.LutBuilder.build_lut(self)
PIL.ImageMorph.LutBuilder.get_lut(self)
PIL.ImageMorph.MorphOp(self,lut=None,op_name=None,patterns=None)
PIL.ImageMorph.MorphOp.__init__(self,lut=None,op_name=None,patterns=None)
PIL.ImageMorph.MorphOp.apply(self,image)
PIL.ImageMorph.MorphOp.get_on_pixels(self,image)
PIL.ImageMorph.MorphOp.load_lut(self,filename)
PIL.ImageMorph.MorphOp.match(self,image)
PIL.ImageMorph.MorphOp.save_lut(self,filename)
PIL.ImageMorph.MorphOp.set_lut(self,lut)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImagePalette.py----------------------------------------
A:PIL.ImagePalette.new->ImagePalette()
A:PIL.ImagePalette.new.colors->self.colors.copy()
A:PIL.ImagePalette.arr->array.array('B', self.palette)
A:PIL.ImagePalette.self.palette->bytearray(self.palette)
A:PIL.ImagePalette.index->len(self.colors)
A:PIL.ImagePalette.fp->open(filename, 'rb')
A:PIL.ImagePalette.palette->list(range(256))
A:PIL.ImagePalette.(r, g, b)->PIL.ImageColor.getrgb(white)
A:PIL.ImagePalette.r->make_linear_lut(0, r)
A:PIL.ImagePalette.g->make_linear_lut(0, g)
A:PIL.ImagePalette.b->make_linear_lut(0, b)
A:PIL.ImagePalette.lut->paletteHandler(fp).getpalette()
PIL.ImagePalette.ImagePalette(self,mode='RGB',palette=None,size=0)
PIL.ImagePalette.ImagePalette.__init__(self,mode='RGB',palette=None,size=0)
PIL.ImagePalette.ImagePalette.copy(self)
PIL.ImagePalette.ImagePalette.getcolor(self,color)
PIL.ImagePalette.ImagePalette.getdata(self)
PIL.ImagePalette.ImagePalette.save(self,fp)
PIL.ImagePalette.ImagePalette.tobytes(self)
PIL.ImagePalette.load(filename)
PIL.ImagePalette.make_gamma_lut(exp)
PIL.ImagePalette.make_linear_lut(black,white)
PIL.ImagePalette.negative(mode='RGB')
PIL.ImagePalette.random(mode='RGB')
PIL.ImagePalette.raw(rawmode,data)
PIL.ImagePalette.sepia(white='#fff0c0')
PIL.ImagePalette.wedge(mode='RGB')


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ContainerIO.py----------------------------------------
A:PIL.ContainerIO.self.pos->max(0, min(self.pos, self.length))
A:PIL.ContainerIO.n->min(n, self.length - self.pos)
A:PIL.ContainerIO.c->self.read(1)
A:PIL.ContainerIO.s->self.readline()
PIL.ContainerIO.ContainerIO(self,file,offset,length)
PIL.ContainerIO.ContainerIO.__init__(self,file,offset,length)
PIL.ContainerIO.ContainerIO.isatty(self)
PIL.ContainerIO.ContainerIO.read(self,n=0)
PIL.ContainerIO.ContainerIO.readline(self)
PIL.ContainerIO.ContainerIO.readlines(self)
PIL.ContainerIO.ContainerIO.seek(self,offset,mode=0)
PIL.ContainerIO.ContainerIO.tell(self)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/PsdImagePlugin.py----------------------------------------
A:PIL.PsdImagePlugin.s->read(26)
A:PIL.PsdImagePlugin.psd_bits->i16(s[22:])
A:PIL.PsdImagePlugin.psd_channels->i16(s[12:])
A:PIL.PsdImagePlugin.psd_mode->i16(s[24:])
A:PIL.PsdImagePlugin.size->i32(read(4))
A:PIL.PsdImagePlugin.data->read(i32(read(4)))
A:PIL.PsdImagePlugin.self.palette->PIL.ImagePalette.raw('RGB;L', data)
A:PIL.PsdImagePlugin.signature->read(4)
A:PIL.PsdImagePlugin.id->i16(read(2))
A:PIL.PsdImagePlugin.name->read(length).decode('latin-1', 'replace')
A:PIL.PsdImagePlugin.self.layers->_layerinfo(self.fp)
A:PIL.PsdImagePlugin.self.tile->_maketile(self.fp, mode, (0, 0) + self.size, channels)
A:PIL.PsdImagePlugin.self.im->PIL.Image.core.fill(self.mode, self.size, 0)
A:PIL.PsdImagePlugin.y0->i32(read(4))
A:PIL.PsdImagePlugin.x0->i32(read(4))
A:PIL.PsdImagePlugin.y1->i32(read(4))
A:PIL.PsdImagePlugin.x1->i32(read(4))
A:PIL.PsdImagePlugin.types->list(range(i16(read(2))))
A:PIL.PsdImagePlugin.type->i16(read(2))
A:PIL.PsdImagePlugin.filler->read(12)
A:PIL.PsdImagePlugin.length->i8(read(1))
A:PIL.PsdImagePlugin.mask_y->i32(read(4))
A:PIL.PsdImagePlugin.mask_x->i32(read(4))
A:PIL.PsdImagePlugin.t->_maketile(file, m, bbox, 1)
A:PIL.PsdImagePlugin.compression->i16(read(2))
A:PIL.PsdImagePlugin.offset->file.tell()
A:PIL.PsdImagePlugin.bytecount->read(channels * ysize * 2)
PIL.PsdImagePlugin.PsdImageFile(ImageFile.ImageFile)
PIL.PsdImagePlugin.PsdImageFile._open(self)
PIL.PsdImagePlugin.PsdImageFile.is_animated(self)
PIL.PsdImagePlugin.PsdImageFile.load_prepare(self)
PIL.PsdImagePlugin.PsdImageFile.n_frames(self)
PIL.PsdImagePlugin.PsdImageFile.seek(self,layer)
PIL.PsdImagePlugin.PsdImageFile.tell(self)
PIL.PsdImagePlugin._accept(prefix)
PIL.PsdImagePlugin._layerinfo(file)
PIL.PsdImagePlugin._maketile(file,mode,bbox,channels)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/BmpImagePlugin.py----------------------------------------
A:PIL.BmpImagePlugin.file_info->dict()
A:PIL.BmpImagePlugin.file_info['header_size']->i32(read(4))
A:PIL.BmpImagePlugin.header_data->PIL.ImageFile._safe_read(self.fp, file_info['header_size'] - 4)
A:PIL.BmpImagePlugin.file_info['width']->i32(header_data[0:4])
A:PIL.BmpImagePlugin.file_info['height']->i16(header_data[2:4])
A:PIL.BmpImagePlugin.file_info['planes']->i16(header_data[8:10])
A:PIL.BmpImagePlugin.file_info['bits']->i16(header_data[10:12])
A:PIL.BmpImagePlugin.file_info['compression']->i32(header_data[12:16])
A:PIL.BmpImagePlugin.file_info['data_size']->i32(header_data[16:20])
A:PIL.BmpImagePlugin.file_info['colors']->i32(header_data[28:32])
A:PIL.BmpImagePlugin.self.info['dpi']->tuple(map(lambda x: int(math.ceil(x / 39.3701)), file_info['pixels_per_meter']))
A:PIL.BmpImagePlugin.file_info[mask]->i32(read(4))
A:PIL.BmpImagePlugin.(self.mode, raw_mode)->BIT2MODE.get(file_info['bits'], (None, None))
A:PIL.BmpImagePlugin.palette->read(padding * file_info['colors'])
A:PIL.BmpImagePlugin.self.palette->PIL.ImagePalette.raw('BGRX' if padding == 4 else 'BGR', palette)
A:PIL.BmpImagePlugin.head_data->self.fp.read(14)
A:PIL.BmpImagePlugin.offset->i32(head_data[10:14])
A:PIL.BmpImagePlugin.dpi->info.get('dpi', (96, 96))
A:PIL.BmpImagePlugin.ppm->tuple(map(lambda x: int(x * 39.3701), dpi))
PIL.BmpImagePlugin.BmpImageFile(ImageFile.ImageFile)
PIL.BmpImagePlugin.BmpImageFile._bitmap(self,header=0,offset=0)
PIL.BmpImagePlugin.BmpImageFile._open(self)
PIL.BmpImagePlugin.DibImageFile(BmpImageFile)
PIL.BmpImagePlugin.DibImageFile._open(self)
PIL.BmpImagePlugin._accept(prefix)
PIL.BmpImagePlugin._save(im,fp,filename,check=0)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImageCms.py----------------------------------------
A:PIL.ImageCms._imagingcms->deferred_error(ex)
A:PIL.ImageCms.self.transform->core.buildProofTransform(input.profile, output.profile, proof.profile, input_mode, output_mode, intent, proof_intent, flags)
A:PIL.ImageCms.imOut->ImageCmsTransform(inputProfile, outputProfile, im.mode, outputMode, renderingIntent, flags=flags).apply(im)
A:PIL.ImageCms.imOut.info['icc_profile']->self.output_profile.tobytes()
A:PIL.ImageCms.im.info['icc_profile']->self.output_profile.tobytes()
A:PIL.ImageCms.profile->ImageCmsProfile(profile)
A:PIL.ImageCms.inputProfile->ImageCmsProfile(inputProfile)
A:PIL.ImageCms.outputProfile->ImageCmsProfile(outputProfile)
A:PIL.ImageCms.transform->ImageCmsTransform(inputProfile, outputProfile, im.mode, outputMode, renderingIntent, flags=flags)
A:PIL.ImageCms.proofProfile->ImageCmsProfile(proofProfile)
A:PIL.ImageCms.colorTemp->float(colorTemp)
PIL.ImageCms.ImageCmsProfile(self,profile)
PIL.ImageCms.ImageCmsProfile.__init__(self,profile)
PIL.ImageCms.ImageCmsProfile._set(self,profile,filename=None)
PIL.ImageCms.ImageCmsProfile.tobytes(self)
PIL.ImageCms.ImageCmsTransform(self,input,output,input_mode,output_mode,intent=INTENT_PERCEPTUAL,proof=None,proof_intent=INTENT_ABSOLUTE_COLORIMETRIC,flags=0)
PIL.ImageCms.ImageCmsTransform.__init__(self,input,output,input_mode,output_mode,intent=INTENT_PERCEPTUAL,proof=None,proof_intent=INTENT_ABSOLUTE_COLORIMETRIC,flags=0)
PIL.ImageCms.ImageCmsTransform.apply(self,im,imOut=None)
PIL.ImageCms.ImageCmsTransform.apply_in_place(self,im)
PIL.ImageCms.ImageCmsTransform.point(self,im)
PIL.ImageCms.PyCMSError(Exception)
PIL.ImageCms.applyTransform(im,transform,inPlace=0)
PIL.ImageCms.buildProofTransform(inputProfile,outputProfile,proofProfile,inMode,outMode,renderingIntent=INTENT_PERCEPTUAL,proofRenderingIntent=INTENT_ABSOLUTE_COLORIMETRIC,flags=FLAGS['SOFTPROOFING'])
PIL.ImageCms.buildTransform(inputProfile,outputProfile,inMode,outMode,renderingIntent=INTENT_PERCEPTUAL,flags=0)
PIL.ImageCms.createProfile(colorSpace,colorTemp=-1)
PIL.ImageCms.getDefaultIntent(profile)
PIL.ImageCms.getOpenProfile(profileFilename)
PIL.ImageCms.getProfileCopyright(profile)
PIL.ImageCms.getProfileDescription(profile)
PIL.ImageCms.getProfileInfo(profile)
PIL.ImageCms.getProfileManufacturer(profile)
PIL.ImageCms.getProfileModel(profile)
PIL.ImageCms.getProfileName(profile)
PIL.ImageCms.get_display_profile(handle=None)
PIL.ImageCms.isIntentSupported(profile,intent,direction)
PIL.ImageCms.profileToProfile(im,inputProfile,outputProfile,renderingIntent=INTENT_PERCEPTUAL,outputMode=None,inPlace=0,flags=0)
PIL.ImageCms.versions()


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/GribStubImagePlugin.py----------------------------------------
A:PIL.GribStubImagePlugin.offset->self.fp.tell()
A:PIL.GribStubImagePlugin.loader->self._load()
PIL.GribStubImagePlugin.GribStubImageFile(ImageFile.StubImageFile)
PIL.GribStubImagePlugin.GribStubImageFile._load(self)
PIL.GribStubImagePlugin.GribStubImageFile._open(self)
PIL.GribStubImagePlugin._accept(prefix)
PIL.GribStubImagePlugin._save(im,fp,filename)
PIL.GribStubImagePlugin.register_handler(handler)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/FtexImagePlugin.py----------------------------------------
A:PIL.FtexImagePlugin.magic->struct.unpack('<I', self.fp.read(4))
A:PIL.FtexImagePlugin.version->struct.unpack('<i', self.fp.read(4))
A:PIL.FtexImagePlugin.self.size->struct.unpack('<2i', self.fp.read(8))
A:PIL.FtexImagePlugin.(mipmap_count, format_count)->struct.unpack('<2i', self.fp.read(8))
A:PIL.FtexImagePlugin.(format, where)->struct.unpack('<2i', self.fp.read(8))
A:PIL.FtexImagePlugin.(mipmap_size,)->struct.unpack('<i', self.fp.read(4))
A:PIL.FtexImagePlugin.data->_dxt1(BytesIO(data), self.width, self.height)
A:PIL.FtexImagePlugin.self.fp->BytesIO(data)
PIL.FtexImagePlugin.FtexImageFile(ImageFile.ImageFile)
PIL.FtexImagePlugin.FtexImageFile._open(self)
PIL.FtexImagePlugin.FtexImageFile.load_seek(self,pos)
PIL.FtexImagePlugin._validate(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/GifImagePlugin.py----------------------------------------
A:PIL.GifImagePlugin.s->self.fp.read(9)
A:PIL.GifImagePlugin.flags->i8(s[8])
A:PIL.GifImagePlugin.self.info['background']->i8(s[11])
A:PIL.GifImagePlugin.p->PIL.ImagePalette.raw('RGB', p)
A:PIL.GifImagePlugin.self.__rewind->self.fp.tell()
A:PIL.GifImagePlugin.current->self.tell()
A:PIL.GifImagePlugin.self.palette->PIL.ImagePalette.raw('RGB', self.fp.read(3 << bits))
A:PIL.GifImagePlugin.block->self.data()
A:PIL.GifImagePlugin.self.info['transparency']->i8(block[3])
A:PIL.GifImagePlugin.self.info['loop']->i16(block[1:3])
A:PIL.GifImagePlugin.bits->i8(self.fp.read(1))
A:PIL.GifImagePlugin.self.__offset->self.fp.tell()
A:PIL.GifImagePlugin.self.dispose->self.dispose.crop(self.dispose_extent)
A:PIL.GifImagePlugin.updated->self.im.crop(self.dispose_extent)
A:PIL.GifImagePlugin.self._prev_im->self.im.copy()
A:PIL.GifImagePlugin.im_out->_convert_mode(im, True)
A:PIL.GifImagePlugin.im.encoderinfo['optimize']->im.encoderinfo.get('optimize', True)
A:PIL.GifImagePlugin.im_frame->_convert_mode(im_frame)
A:PIL.GifImagePlugin.delta->PIL.ImageChops.subtract_modulo(im_frame, previous.copy())
A:PIL.GifImagePlugin.bbox->PIL.ImageChops.subtract_modulo(im_frame, previous.copy()).getbbox()
A:PIL.GifImagePlugin.transparency->int(transparency)
A:PIL.GifImagePlugin.used_palette_colors->_get_used_palette_colors(im)
A:PIL.GifImagePlugin.duration->int(im.encoderinfo['duration'] / 10)
A:PIL.GifImagePlugin.file->im._dump()
A:PIL.GifImagePlugin.stderr->tempfile.TemporaryFile()
A:PIL.GifImagePlugin.quant_proc->Popen(quant_cmd, stdout=PIPE, stderr=stderr)
A:PIL.GifImagePlugin.togif_proc->Popen(togif_cmd, stdin=quant_proc.stdout, stdout=f, stderr=stderr)
A:PIL.GifImagePlugin.retcode->Popen(togif_cmd, stdin=quant_proc.stdout, stdout=f, stderr=stderr).wait()
A:PIL.GifImagePlugin.source_palette->bytearray([i // 3 for i in range(768)])
A:PIL.GifImagePlugin.image_bytes->bytearray(im.tobytes())
A:PIL.GifImagePlugin.im.palette->PIL.ImagePalette.ImagePalette('RGB', palette=palette_bytes, size=len(palette_bytes))
A:PIL.GifImagePlugin.fp->Collector()
PIL.GifImagePlugin.GifImageFile(ImageFile.ImageFile)
PIL.GifImagePlugin.GifImageFile._open(self)
PIL.GifImagePlugin.GifImageFile._seek(self,frame)
PIL.GifImagePlugin.GifImageFile.data(self)
PIL.GifImagePlugin.GifImageFile.is_animated(self)
PIL.GifImagePlugin.GifImageFile.load_end(self)
PIL.GifImagePlugin.GifImageFile.n_frames(self)
PIL.GifImagePlugin.GifImageFile.seek(self,frame)
PIL.GifImagePlugin.GifImageFile.tell(self)
PIL.GifImagePlugin._accept(prefix)
PIL.GifImagePlugin._convert_mode(im,initial_call=False)
PIL.GifImagePlugin._get_local_header(fp,im,offset,flags)
PIL.GifImagePlugin._get_optimize(im,info)
PIL.GifImagePlugin._get_used_palette_colors(im)
PIL.GifImagePlugin._save(im,fp,filename,save_all=False)
PIL.GifImagePlugin._save_all(im,fp,filename)
PIL.GifImagePlugin._save_netpbm(im,fp,filename)
PIL.GifImagePlugin.get_interlace(im)
PIL.GifImagePlugin.getdata(im,offset=(0,0),**params)
PIL.GifImagePlugin.getheader(im,palette=None,info=None)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/GdImageFile.py----------------------------------------
A:PIL.GdImageFile.s->self.fp.read(775)
A:PIL.GdImageFile.tindex->i16(s[5:7])
A:PIL.GdImageFile.self.palette->PIL.ImagePalette.raw('RGB', s[7:])
A:PIL.GdImageFile.fp->builtins.open(fp, 'rb')
PIL.GdImageFile.GdImageFile(ImageFile.ImageFile)
PIL.GdImageFile.GdImageFile._open(self)
PIL.GdImageFile.open(fp,mode='r')


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/JpegPresets.py----------------------------------------


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImageTransform.py----------------------------------------
A:PIL.ImageTransform.(method, data)->self.getdata()
PIL.ImageTransform.AffineTransform(Transform)
PIL.ImageTransform.ExtentTransform(Transform)
PIL.ImageTransform.MeshTransform(Transform)
PIL.ImageTransform.QuadTransform(Transform)
PIL.ImageTransform.Transform(self,data)
PIL.ImageTransform.Transform.__init__(self,data)
PIL.ImageTransform.Transform.getdata(self)
PIL.ImageTransform.Transform.transform(self,size,image,**options)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/GimpGradientFile.py----------------------------------------
A:PIL.GimpGradientFile.scale->segment((xm - x0) / w, (x - x0) / w)
A:PIL.GimpGradientFile.r->o8(int(255 * ((rgb1[0] - rgb0[0]) * scale + rgb0[0]) + 0.5))
A:PIL.GimpGradientFile.g->o8(int(255 * ((rgb1[1] - rgb0[1]) * scale + rgb0[1]) + 0.5))
A:PIL.GimpGradientFile.b->o8(int(255 * ((rgb1[2] - rgb0[2]) * scale + rgb0[2]) + 0.5))
A:PIL.GimpGradientFile.a->o8(int(255 * ((rgb1[3] - rgb0[3]) * scale + rgb0[3]) + 0.5))
A:PIL.GimpGradientFile.line->fp.readline().strip()
A:PIL.GimpGradientFile.count->int(line)
A:PIL.GimpGradientFile.s->fp.readline().split()
A:PIL.GimpGradientFile.cspace->int(s[12])
PIL.GimpGradientFile.GimpGradientFile(self,fp)
PIL.GimpGradientFile.GimpGradientFile.__init__(self,fp)
PIL.GimpGradientFile.GradientFile(object)
PIL.GimpGradientFile.GradientFile.getpalette(self,entries=256)
PIL.GimpGradientFile.curved(middle,pos)
PIL.GimpGradientFile.linear(middle,pos)
PIL.GimpGradientFile.sine(middle,pos)
PIL.GimpGradientFile.sphere_decreasing(middle,pos)
PIL.GimpGradientFile.sphere_increasing(middle,pos)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/XpmImagePlugin.py----------------------------------------
A:PIL.XpmImagePlugin.xpm_head->re.compile(b'"([0-9]*) ([0-9]*) ([0-9]*) ([0-9]*)')
A:PIL.XpmImagePlugin.s->s[2:-2].split()
A:PIL.XpmImagePlugin.m->re.compile(b'"([0-9]*) ([0-9]*) ([0-9]*) ([0-9]*)').match(s)
A:PIL.XpmImagePlugin.pal->int(m.group(3))
A:PIL.XpmImagePlugin.bpp->int(m.group(4))
A:PIL.XpmImagePlugin.c->i8(s[1])
A:PIL.XpmImagePlugin.rgb->int(rgb[1:], 16)
A:PIL.XpmImagePlugin.self.palette->PIL.ImagePalette.raw('RGB', b''.join(palette))
A:PIL.XpmImagePlugin.s[i]->self.fp.readline()[1:xsize + 1].ljust(xsize)
PIL.XpmImagePlugin.XpmImageFile(ImageFile.ImageFile)
PIL.XpmImagePlugin.XpmImageFile._open(self)
PIL.XpmImagePlugin.XpmImageFile.load_read(self,bytes)
PIL.XpmImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImageWin.py----------------------------------------
A:PIL.ImageWin.mode->PIL.Image.getmodebase(mode)
A:PIL.ImageWin.self.image->PIL.Image.core.display(mode, size)
A:PIL.ImageWin.dc->self.image.getdc(handle)
A:PIL.ImageWin.result->self.image.query_palette(handle)
A:PIL.ImageWin.handle->self.image.getdc(handle)
A:PIL.ImageWin.im->im.convert(self.mode).convert(self.mode)
A:PIL.ImageWin.self.hwnd->PIL.Image.core.createwindow(title, self.__dispatcher, width or 0, height or 0)
A:PIL.ImageWin.image->Dib(image)
PIL.ImageWin.Dib(self,image,size=None)
PIL.ImageWin.Dib.__init__(self,image,size=None)
PIL.ImageWin.Dib.draw(self,handle,dst,src=None)
PIL.ImageWin.Dib.expose(self,handle)
PIL.ImageWin.Dib.frombytes(self,buffer)
PIL.ImageWin.Dib.fromstring(self,*args,**kw)
PIL.ImageWin.Dib.paste(self,im,box=None)
PIL.ImageWin.Dib.query_palette(self,handle)
PIL.ImageWin.Dib.tobytes(self)
PIL.ImageWin.Dib.tostring(self,*args,**kw)
PIL.ImageWin.HDC(self,dc)
PIL.ImageWin.HDC.__init__(self,dc)
PIL.ImageWin.HDC.__int__(self)
PIL.ImageWin.HWND(self,wnd)
PIL.ImageWin.HWND.__init__(self,wnd)
PIL.ImageWin.HWND.__int__(self)
PIL.ImageWin.ImageWindow(self,image,title='PIL')
PIL.ImageWin.ImageWindow.__init__(self,image,title='PIL')
PIL.ImageWin.ImageWindow.ui_handle_repair(self,dc,x0,y0,x1,y1)
PIL.ImageWin.Window(self,title='PIL',width=None,height=None)
PIL.ImageWin.Window.__dispatcher(self,action,*args)
PIL.ImageWin.Window.__init__(self,title='PIL',width=None,height=None)
PIL.ImageWin.Window.mainloop(self)
PIL.ImageWin.Window.ui_handle_clear(self,dc,x0,y0,x1,y1)
PIL.ImageWin.Window.ui_handle_damage(self,x0,y0,x1,y1)
PIL.ImageWin.Window.ui_handle_destroy(self)
PIL.ImageWin.Window.ui_handle_repair(self,dc,x0,y0,x1,y1)
PIL.ImageWin.Window.ui_handle_resize(self,width,height)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/IcoImagePlugin.py----------------------------------------
A:PIL.IcoImagePlugin.sizes->self.ico.getimage(self.size).encoderinfo.get('sizes', [(16, 16), (24, 24), (32, 32), (48, 48), (64, 64), (128, 128), (255, 255)])
A:PIL.IcoImagePlugin.image_io->BytesIO()
A:PIL.IcoImagePlugin.tmp->self.ico.getimage(self.size).copy()
A:PIL.IcoImagePlugin.image_bytes->BytesIO().read()
A:PIL.IcoImagePlugin.bytes_len->len(image_bytes)
A:PIL.IcoImagePlugin.current->fp.tell()
A:PIL.IcoImagePlugin.s->buf.read(16)
A:PIL.IcoImagePlugin.self.nb_items->i16(s[4:])
A:PIL.IcoImagePlugin.self.entry->sorted(self.entry, key=lambda x: x['square'])
A:PIL.IcoImagePlugin.data->self.buf.read(8)
A:PIL.IcoImagePlugin.im->self.ico.getimage(self.size)
A:PIL.IcoImagePlugin.mask->PIL.Image.frombuffer('1', im.size, maskData, 'raw', ('1;I', int(w / 8), -1))
A:PIL.IcoImagePlugin.total_bytes->int(w * im.size[1] / 8)
A:PIL.IcoImagePlugin.maskData->self.buf.read(total_bytes)
A:PIL.IcoImagePlugin.self.ico->IcoFile(self.fp)
A:PIL.IcoImagePlugin.self.info['sizes']->self.ico.sizes()
PIL.IcoImagePlugin.IcoFile(self,buf)
PIL.IcoImagePlugin.IcoFile.__init__(self,buf)
PIL.IcoImagePlugin.IcoFile.frame(self,idx)
PIL.IcoImagePlugin.IcoFile.getimage(self,size,bpp=False)
PIL.IcoImagePlugin.IcoFile.sizes(self)
PIL.IcoImagePlugin.IcoImageFile(ImageFile.ImageFile)
PIL.IcoImagePlugin.IcoImageFile._open(self)
PIL.IcoImagePlugin.IcoImageFile.load(self)
PIL.IcoImagePlugin.IcoImageFile.load_seek(self)
PIL.IcoImagePlugin._accept(prefix)
PIL.IcoImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/Image.py----------------------------------------
A:PIL.Image.logger->logging.getLogger(__name__)
A:PIL.Image.MAX_IMAGE_PIXELS->int(1024 * 1024 * 1024 / 4 / 3)
A:PIL.Image.core->_imaging_not_installed()
A:PIL.Image.USE_CFFI_ACCESS->hasattr(sys, 'pypy_version_info')
A:PIL.Image.MODES->sorted(_MODEINFO.keys())
A:PIL.Image.decoder->getattr(core, decoder_name + '_decoder')
A:PIL.Image.encoder->getattr(core, encoder_name + '_encoder')
A:PIL.Image.new->self._new(im)
A:PIL.Image.new.palette->PIL.ImagePalette.raw('RGB', new.im.getpalette('RGB'))
A:PIL.Image.new.info->self.info.copy()
A:PIL.Image.self.im->self.im.crop(self.__crop)
A:PIL.Image.(f, file)->tempfile.mkstemp(suffix)
A:PIL.Image.b->BytesIO()
A:PIL.Image.(shape, typestr)->_conv_type_shape(self)
A:PIL.Image.new['data']->self.tobytes()
A:PIL.Image.e->_getencoder(self.mode, encoder_name, args)
A:PIL.Image.bufsize->max(65536, self.size[0] * 4)
A:PIL.Image.(l, s, d)->_getencoder(self.mode, encoder_name, args).encode(bufsize)
A:PIL.Image.data->bytes(data)
A:PIL.Image.d->_getdecoder(self.mode, decoder_name, args)
A:PIL.Image.s->_getdecoder(self.mode, decoder_name, args).decode(data)
A:PIL.Image.self.pyaccess->PIL.PyAccess.new(self, self.readonly)
A:PIL.Image.im->_imaging_not_installed().new(mode, bands[0].size)
A:PIL.Image.trns_im->trns_im.convert('RGB').convert('RGB')
A:PIL.Image.t->trns_im.convert('RGB').convert('RGB').palette.getcolor(t)
A:PIL.Image.trns->trns_im.convert('RGB').convert('RGB').getpixel((0, 0))
A:PIL.Image.new.info['transparency']->self._new(im).palette.getcolor(trns)
A:PIL.Image.new_im->self._new(im)
A:PIL.Image.new_im.info['transparency']->self._new(im).palette.getcolor(trns)
A:PIL.Image.filter->filter()
A:PIL.Image.h->int(math.ceil(max(yy)) - math.floor(min(yy)))
A:PIL.Image.(x, y)->transform(w / 2.0, h / 2.0)
A:PIL.Image.extrema->self.getextrema()
A:PIL.Image.(scale, offset)->_getscaleoffset(lut)
A:PIL.Image.alpha->new('L', self.size, alpha)
A:PIL.Image.palette->PIL.ImagePalette.raw(rawmode, data)
A:PIL.Image.size->tuple(size)
A:PIL.Image.w->int(math.ceil(max(xx)) - math.floor(min(xx)))
A:PIL.Image.filename->str(fp.resolve())
A:PIL.Image.save_all->params.pop('save_all')
A:PIL.Image.ext->os.path.splitext(filename)[1].lower()
A:PIL.Image.fp->io.BytesIO(fp.read())
A:PIL.Image.y->int(size[1])
A:PIL.Image.x->int(max(x * size[1] / y, 1))
A:PIL.Image.(method, data)->method.getdata()
A:PIL.Image.(x0, y0, x1, y1)->map(int, map(round, box))
A:PIL.Image.color->PIL.ImageColor.getcolor(color, mode)
A:PIL.Image.ndim->len(shape)
A:PIL.Image.obj->obj.tostring().tostring()
A:PIL.Image.prefix->io.BytesIO(fp.read()).read(16)
A:PIL.Image.image->image2.copy()
A:PIL.Image.id->id.upper().upper()
A:PIL.Image.EXTENSION[extension.lower()]->id.upper().upper().upper()
PIL.Image.DecompressionBombWarning(RuntimeWarning)
PIL.Image.Image(self)
PIL.Image.Image.__enter__(self)
PIL.Image.Image.__eq__(self,other)
PIL.Image.Image.__exit__(self,*args)
PIL.Image.Image.__getattr__(self,name)
PIL.Image.Image.__getstate__(self)
PIL.Image.Image.__init__(self)
PIL.Image.Image.__ne__(self,other)
PIL.Image.Image.__repr__(self)
PIL.Image.Image.__setstate__(self,state)
PIL.Image.Image.__transformer(self,box,image,method,data,resample=NEAREST,fill=1)
PIL.Image.Image._copy(self)
PIL.Image.Image._dump(self,file=None,format=None)
PIL.Image.Image._expand(self,xmargin,ymargin=None)
PIL.Image.Image._new(self,im)
PIL.Image.Image._repr_png_(self)
PIL.Image.Image.close(self)
PIL.Image.Image.convert(self,mode=None,matrix=None,dither=None,palette=WEB,colors=256)
PIL.Image.Image.copy(self)
PIL.Image.Image.crop(self,box=None)
PIL.Image.Image.draft(self,mode,size)
PIL.Image.Image.effect_spread(self,distance)
PIL.Image.Image.filter(self,filter)
PIL.Image.Image.frombytes(self,data,decoder_name='raw',*args)
PIL.Image.Image.fromstring(self,*args,**kw)
PIL.Image.Image.getbands(self)
PIL.Image.Image.getbbox(self)
PIL.Image.Image.getcolors(self,maxcolors=256)
PIL.Image.Image.getdata(self,band=None)
PIL.Image.Image.getextrema(self)
PIL.Image.Image.getim(self)
PIL.Image.Image.getpalette(self)
PIL.Image.Image.getpixel(self,xy)
PIL.Image.Image.getprojection(self)
PIL.Image.Image.height(self)
PIL.Image.Image.histogram(self,mask=None,extrema=None)
PIL.Image.Image.load(self)
PIL.Image.Image.offset(self,xoffset,yoffset=None)
PIL.Image.Image.paste(self,im,box=None,mask=None)
PIL.Image.Image.point(self,lut,mode=None)
PIL.Image.Image.putalpha(self,alpha)
PIL.Image.Image.putdata(self,data,scale=1.0,offset=0.0)
PIL.Image.Image.putpalette(self,data,rawmode='RGB')
PIL.Image.Image.putpixel(self,xy,value)
PIL.Image.Image.quantize(self,colors=256,method=None,kmeans=0,palette=None)
PIL.Image.Image.resize(self,size,resample=NEAREST)
PIL.Image.Image.rotate(self,angle,resample=NEAREST,expand=0)
PIL.Image.Image.save(self,fp,format=None,**params)
PIL.Image.Image.seek(self,frame)
PIL.Image.Image.show(self,title=None,command=None)
PIL.Image.Image.split(self)
PIL.Image.Image.tell(self)
PIL.Image.Image.thumbnail(self,size,resample=BICUBIC)
PIL.Image.Image.tobitmap(self,name='image')
PIL.Image.Image.tobytes(self,encoder_name='raw',*args)
PIL.Image.Image.toqimage(self)
PIL.Image.Image.toqpixmap(self)
PIL.Image.Image.tostring(self,*args,**kw)
PIL.Image.Image.transform(self,size,method,data=None,resample=NEAREST,fill=1)
PIL.Image.Image.transpose(self,method)
PIL.Image.Image.verify(self)
PIL.Image.Image.width(self)
PIL.Image.ImagePointHandler(object)
PIL.Image.ImageTransformHandler(object)
PIL.Image._E(self,data)
PIL.Image._E.__add__(self,other)
PIL.Image._E.__init__(self,data)
PIL.Image._E.__mul__(self,other)
PIL.Image._ImageCrop(self,im,box)
PIL.Image._ImageCrop.__init__(self,im,box)
PIL.Image._ImageCrop.load(self)
PIL.Image._conv_type_shape(im)
PIL.Image._decompression_bomb_check(size)
PIL.Image._getdecoder(mode,decoder_name,args,extra=())
PIL.Image._getencoder(mode,encoder_name,args,extra=())
PIL.Image._getscaleoffset(expr)
PIL.Image._imaging_not_installed(object)
PIL.Image._imaging_not_installed.__getattr__(self,id)
PIL.Image._show(image,**options)
PIL.Image._showxv(image,title=None,**options)
PIL.Image._wedge()
PIL.Image.alpha_composite(im1,im2)
PIL.Image.blend(im1,im2,alpha)
PIL.Image.coerce_e(value)
PIL.Image.composite(image1,image2,mask)
PIL.Image.effect_mandelbrot(size,extent,quality)
PIL.Image.effect_noise(size,sigma)
PIL.Image.eval(image,*args)
PIL.Image.fromarray(obj,mode=None)
PIL.Image.frombuffer(mode,size,data,decoder_name='raw',*args)
PIL.Image.frombytes(mode,size,data,decoder_name='raw',*args)
PIL.Image.fromqimage(im)
PIL.Image.fromqpixmap(im)
PIL.Image.fromstring(*args,**kw)
PIL.Image.getmodebandnames(mode)
PIL.Image.getmodebands(mode)
PIL.Image.getmodebase(mode)
PIL.Image.getmodetype(mode)
PIL.Image.init()
PIL.Image.isImageType(t)
PIL.Image.merge(mode,bands)
PIL.Image.new(mode,size,color=0)
PIL.Image.open(fp,mode='r')
PIL.Image.preinit()
PIL.Image.register_extension(id,extension)
PIL.Image.register_mime(id,mimetype)
PIL.Image.register_open(id,factory,accept=None)
PIL.Image.register_save(id,driver)
PIL.Image.register_save_all(id,driver)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/PngImagePlugin.py----------------------------------------
A:PIL.PngImagePlugin.logger->logging.getLogger(__name__)
A:PIL.PngImagePlugin._simple_palette->re.compile(b'^\xff*\x00\xff*$')
A:PIL.PngImagePlugin.dobj->zlib.decompressobj()
A:PIL.PngImagePlugin.plaintext->zlib.decompressobj().decompress(s, MAX_TEXT_CHUNK)
A:PIL.PngImagePlugin.(cid, pos, length)->str.__new__(cls, text).png.read()
A:PIL.PngImagePlugin.s->PIL.ImageFile._safe_read(self.fp, length)
A:PIL.PngImagePlugin.pos->str.__new__(cls, text).fp.tell()
A:PIL.PngImagePlugin.length->i32(s)
A:PIL.PngImagePlugin.crc1->PIL.Image.core.crc32(data, Image.core.crc32(cid))
A:PIL.PngImagePlugin.self->str.__new__(cls, text)
A:PIL.PngImagePlugin.key->key.encode('latin-1', 'strict').encode('latin-1', 'strict')
A:PIL.PngImagePlugin.value->value.encode('latin-1', 'strict').encode('latin-1', 'strict')
A:PIL.PngImagePlugin.lang->lang.decode('utf-8', 'strict').decode('utf-8', 'strict')
A:PIL.PngImagePlugin.tkey->tkey.encode('utf-8', 'strict').encode('utf-8', 'strict')
A:PIL.PngImagePlugin.i->PIL.ImageFile._safe_read(self.fp, length).find(b'\x00')
A:PIL.PngImagePlugin.comp_method->i8(v[0])
A:PIL.PngImagePlugin.icc_profile->_safe_zlib_decompress(s[i + 2:])
A:PIL.PngImagePlugin.self.im_info['transparency']->i16(s)
A:PIL.PngImagePlugin.unit->i8(s[8])
A:PIL.PngImagePlugin.(k, v)->PIL.ImageFile._safe_read(self.fp, length).split(b'\x00', 1)
A:PIL.PngImagePlugin.k->k.decode('latin-1', 'strict').decode('latin-1', 'strict')
A:PIL.PngImagePlugin.v->v.decode('utf-8', 'strict').decode('utf-8', 'strict')
A:PIL.PngImagePlugin.rs->PIL.ImageFile._safe_read(self.fp, length)
A:PIL.PngImagePlugin.(k, r)->r.split(b'\x00', 1)
A:PIL.PngImagePlugin.(lang, tk, v)->r.split(b'\x00', 2)
A:PIL.PngImagePlugin.tk->tk.decode('utf-8', 'strict').decode('utf-8', 'strict')
A:PIL.PngImagePlugin.self.im_info[k]self.im_text[k]->iTXt(v, lang, tk)
A:PIL.PngImagePlugin.self.png->PngStream(self.fp)
A:PIL.PngImagePlugin.self.palette->PIL.ImagePalette.raw(rawmode, data)
A:PIL.PngImagePlugin.read_bytes->min(read_bytes, self.__idat)
A:PIL.PngImagePlugin.data->b''.join(data)
A:PIL.PngImagePlugin.(hi, lo)->PIL.Image.core.crc32(data, Image.core.crc32(cid))
A:PIL.PngImagePlugin.colors->max(min(len(im.palette.getdata()[1]) // 3, 256), 2)
A:PIL.PngImagePlugin.transparency->max(0, min(65535, transparency))
A:PIL.PngImagePlugin.alpha->im.im.getpalette('RGBA', 'A')
A:PIL.PngImagePlugin.dpi->im.encoderinfo.get('dpi')
A:PIL.PngImagePlugin.info->im.encoderinfo.get('pnginfo')
A:PIL.PngImagePlugin.icc->im.encoderinfo.get('icc_profile', im.info.get('icc_profile'))
A:PIL.PngImagePlugin.fp->collector()
PIL.PngImagePlugin.ChunkStream(self,fp)
PIL.PngImagePlugin.ChunkStream.__init__(self,fp)
PIL.PngImagePlugin.ChunkStream.call(self,cid,pos,length)
PIL.PngImagePlugin.ChunkStream.close(self)
PIL.PngImagePlugin.ChunkStream.crc(self,cid,data)
PIL.PngImagePlugin.ChunkStream.crc_skip(self,cid,data)
PIL.PngImagePlugin.ChunkStream.push(self,cid,pos,length)
PIL.PngImagePlugin.ChunkStream.read(self)
PIL.PngImagePlugin.ChunkStream.verify(self,endchunk=b'IEND')
PIL.PngImagePlugin.PngImageFile(ImageFile.ImageFile)
PIL.PngImagePlugin.PngImageFile._open(self)
PIL.PngImagePlugin.PngImageFile.load_end(self)
PIL.PngImagePlugin.PngImageFile.load_prepare(self)
PIL.PngImagePlugin.PngImageFile.load_read(self,read_bytes)
PIL.PngImagePlugin.PngImageFile.verify(self)
PIL.PngImagePlugin.PngInfo(self)
PIL.PngImagePlugin.PngInfo.__init__(self)
PIL.PngImagePlugin.PngInfo.add(self,cid,data)
PIL.PngImagePlugin.PngInfo.add_itxt(self,key,value,lang='',tkey='',zip=False)
PIL.PngImagePlugin.PngInfo.add_text(self,key,value,zip=0)
PIL.PngImagePlugin.PngStream(self,fp)
PIL.PngImagePlugin.PngStream.__init__(self,fp)
PIL.PngImagePlugin.PngStream.check_text_memory(self,chunklen)
PIL.PngImagePlugin.PngStream.chunk_IDAT(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_IEND(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_IHDR(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_PLTE(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_gAMA(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_iCCP(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_iTXt(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_pHYs(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_tEXt(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_tRNS(self,pos,length)
PIL.PngImagePlugin.PngStream.chunk_zTXt(self,pos,length)
PIL.PngImagePlugin._accept(prefix)
PIL.PngImagePlugin._idat(self,fp,chunk)
PIL.PngImagePlugin._idat.__init__(self,fp,chunk)
PIL.PngImagePlugin._idat.write(self,data)
PIL.PngImagePlugin._safe_zlib_decompress(s)
PIL.PngImagePlugin._save(im,fp,filename,chunk=putchunk,check=0)
PIL.PngImagePlugin.getchunks(im,**params)
PIL.PngImagePlugin.iTXt(cls,text,lang,tkey)
PIL.PngImagePlugin.iTXt.__new__(cls,text,lang,tkey)
PIL.PngImagePlugin.putchunk(fp,cid,*data)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/SgiImagePlugin.py----------------------------------------
A:PIL.SgiImagePlugin.s->self.fp.read(512)
A:PIL.SgiImagePlugin.compression->i8(s[2])
PIL.SgiImagePlugin.SgiImageFile(ImageFile.ImageFile)
PIL.SgiImagePlugin.SgiImageFile._open(self)
PIL.SgiImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/PyAccess.py----------------------------------------
A:PIL.PyAccess.logger->logging.getLogger(__name__)
A:PIL.PyAccess.ffi->FFI()
A:PIL.PyAccess.vals->dict(img.im.unsafe_ptrs)
A:PIL.PyAccess.self.image8->FFI().cast('unsigned char **', vals['image8'])
A:PIL.PyAccess.self.image32->FFI().cast('int **', vals['image32'])
A:PIL.PyAccess.self.image->FFI().cast('unsigned char **', vals['image'])
A:PIL.PyAccess.(x, y)->self.check_xy(xy)
A:PIL.PyAccess.self.pixels->FFI().cast('float **', self.image32)
A:PIL.PyAccess.pixel.r->min(color[0], 255)
A:PIL.PyAccess.pixel.a->min(color[3], 255)
A:PIL.PyAccess.pixel.g->min(color[1], 255)
A:PIL.PyAccess.pixel.b->min(color[2], 255)
A:PIL.PyAccess.self.pixels[y][x]->self.reverse(color)
A:PIL.PyAccess.color->min(color[0], 65535)
A:PIL.PyAccess.orig->FFI().new('int *', i)
A:PIL.PyAccess.chars->FFI().cast('unsigned char *', orig)
A:PIL.PyAccess.access_type->mode_map.get(img.mode, None)
PIL.PyAccess.PyAccess(self,img,readonly=False)
PIL.PyAccess.PyAccess.__getitem__(self,xy)
PIL.PyAccess.PyAccess.__init__(self,img,readonly=False)
PIL.PyAccess.PyAccess.__setitem__(self,xy,color)
PIL.PyAccess.PyAccess._post_init(self)
PIL.PyAccess.PyAccess.check_xy(self,xy)
PIL.PyAccess._PyAccess32_2(PyAccess)
PIL.PyAccess._PyAccess32_2._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccess32_2.get_pixel(self,x,y)
PIL.PyAccess._PyAccess32_2.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccess32_3(PyAccess)
PIL.PyAccess._PyAccess32_3._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccess32_3.get_pixel(self,x,y)
PIL.PyAccess._PyAccess32_3.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccess32_4(PyAccess)
PIL.PyAccess._PyAccess32_4._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccess32_4.get_pixel(self,x,y)
PIL.PyAccess._PyAccess32_4.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccess8(PyAccess)
PIL.PyAccess._PyAccess8._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccess8.get_pixel(self,x,y)
PIL.PyAccess._PyAccess8.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccessF(PyAccess)
PIL.PyAccess._PyAccessF._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccessF.get_pixel(self,x,y)
PIL.PyAccess._PyAccessF.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccessI16_B(PyAccess)
PIL.PyAccess._PyAccessI16_B._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccessI16_B.get_pixel(self,x,y)
PIL.PyAccess._PyAccessI16_B.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccessI16_L(PyAccess)
PIL.PyAccess._PyAccessI16_L._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccessI16_L.get_pixel(self,x,y)
PIL.PyAccess._PyAccessI16_L.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccessI16_N(PyAccess)
PIL.PyAccess._PyAccessI16_N._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccessI16_N.get_pixel(self,x,y)
PIL.PyAccess._PyAccessI16_N.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccessI32_N(PyAccess)
PIL.PyAccess._PyAccessI32_N._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccessI32_N.get_pixel(self,x,y)
PIL.PyAccess._PyAccessI32_N.set_pixel(self,x,y,color)
PIL.PyAccess._PyAccessI32_Swap(PyAccess)
PIL.PyAccess._PyAccessI32_Swap._post_init(self,*args,**kwargs)
PIL.PyAccess._PyAccessI32_Swap.get_pixel(self,x,y)
PIL.PyAccess._PyAccessI32_Swap.reverse(self,i)
PIL.PyAccess._PyAccessI32_Swap.set_pixel(self,x,y,color)
PIL.PyAccess.new(img,readonly=False)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/OleFileIO.py----------------------------------------
A:PIL.OleFileIO.header->self.fp.read(512)
A:PIL.OleFileIO._FILETIME_null_date->datetime.datetime(1601, 1, 1, 0, 0, 0)
A:PIL.OleFileIO.props->sorted(props.items())
A:PIL.OleFileIO.value->bool(i16(s, offset + 4))
A:PIL.OleFileIO.sector_data->self.openstream(filename).read(sectorsize)
A:PIL.OleFileIO.data->b''.join(data)
A:PIL.OleFileIO.self.size->len(data)
A:PIL.OleFileIO.(name, namelength, self.entry_type, self.color, self.sid_left, self.sid_right, self.sid_child, clsid, self.dwUserFlags, self.createTime, self.modifyTime, self.isectStart, sizeLow, sizeHigh)->struct.unpack(_OleDirectoryEntry.STRUCT_DIRENTRY, entry)
A:PIL.OleFileIO.self.name->olefile._decode_utf16_str(name)
A:PIL.OleFileIO.self.clsid->_clsid(header[8:24])
A:PIL.OleFileIO.child->self.olefile._load_direntry(child_sid)
A:PIL.OleFileIO.name_lower->self.olefile._load_direntry(child_sid).name.lower()
A:PIL.OleFileIO.unicode_str->utf16_str.decode('UTF-16LE', errors)
A:PIL.OleFileIO.self.fp->open(filename, mode)
A:PIL.OleFileIO.filesize->self.fp.tell()
A:PIL.OleFileIO.header_size->struct.calcsize(fmt_header)
A:PIL.OleFileIO.(self.Sig, self.clsid, self.MinorVersion, self.DllVersion, self.ByteOrder, self.SectorShift, self.MiniSectorShift, self.Reserved, self.Reserved1, self.csectDir, self.csectFat, self.sectDirStart, self.signature, self.MiniSectorCutoff, self.MiniFatStart, self.csectMiniFat, self.sectDifStart, self.csectDif)->struct.unpack(fmt_header, header1)
A:PIL.OleFileIO.nbsect->len(tab)
A:PIL.OleFileIO.tab->array.array(UINT32, sector)
A:PIL.OleFileIO.a->array.array(UINT32, sect)
A:PIL.OleFileIO.fat1->self.sect2array(sect)
A:PIL.OleFileIO.s->self.openstream(filename).read(20)
A:PIL.OleFileIO.nextfat->self.sect2array(s)
A:PIL.OleFileIO.self.fat->array.array(UINT32)
A:PIL.OleFileIO.sector_difat->self.getsect(isect_difat)
A:PIL.OleFileIO.difat->self.sect2array(sector_difat)
A:PIL.OleFileIO.self.minifat->self.sect2array(s)
A:PIL.OleFileIO.sector->self.fp.read(self.sectorsize)
A:PIL.OleFileIO.self.directory_fp->self._open(sect)
A:PIL.OleFileIO.root_entry->self._load_direntry(0)
A:PIL.OleFileIO.entry->self.directory_fp.read(128)
A:PIL.OleFileIO.self.direntries[sid]->_OleDirectoryEntry(entry, sid, self)
A:PIL.OleFileIO.self.ministream->self._open(self.root.isectStart, size_ministream, force_FAT=True)
A:PIL.OleFileIO.filename->filename.split('/').split('/')
A:PIL.OleFileIO.sid->self._find(filename)
A:PIL.OleFileIO.streampath->'/'.join(streampath)
A:PIL.OleFileIO.fp->self.openstream(filename)
A:PIL.OleFileIO.clsid->_clsid(s[8:24])
A:PIL.OleFileIO.fmtid->_clsid(s[:16])
A:PIL.OleFileIO.num_props->i32(s, 4)
A:PIL.OleFileIO.id->i32(s, 8 + i * 8)
A:PIL.OleFileIO.offset->i32(s, 12 + i * 8)
A:PIL.OleFileIO.type->i32(s, offset)
A:PIL.OleFileIO.count->i32(s, offset + 4)
A:PIL.OleFileIO.self.metadata->OleMetadata()
A:PIL.OleFileIO.ole->OleFileIO(filename)
A:PIL.OleFileIO.st_type->OleFileIO(filename).get_type(streamname)
A:PIL.OleFileIO.meta->OleFileIO(filename).get_metadata()
A:PIL.OleFileIO.root->OleFileIO(filename).get_rootentry_name()
PIL.OleFileIO.OleFileIO(self,filename=None,raise_defects=DEFECT_FATAL,write_mode=False,debug=False,path_encoding=DEFAULT_PATH_ENCODING)
PIL.OleFileIO.OleFileIO.__init__(self,filename=None,raise_defects=DEFECT_FATAL,write_mode=False,debug=False,path_encoding=DEFAULT_PATH_ENCODING)
PIL.OleFileIO.OleFileIO._check_duplicate_stream(self,first_sect,minifat=False)
PIL.OleFileIO.OleFileIO._decode_utf16_str(self,utf16_str,errors='replace')
PIL.OleFileIO.OleFileIO._find(self,filename)
PIL.OleFileIO.OleFileIO._list(self,files,prefix,node,streams=True,storages=False)
PIL.OleFileIO.OleFileIO._load_direntry(self,sid)
PIL.OleFileIO.OleFileIO._open(self,start,size=2147483647,force_FAT=False)
PIL.OleFileIO.OleFileIO.close(self)
PIL.OleFileIO.OleFileIO.dumpdirectory(self)
PIL.OleFileIO.OleFileIO.dumpfat(self,fat,firstindex=0)
PIL.OleFileIO.OleFileIO.dumpsect(self,sector,firstindex=0)
PIL.OleFileIO.OleFileIO.exists(self,filename)
PIL.OleFileIO.OleFileIO.get_metadata(self)
PIL.OleFileIO.OleFileIO.get_rootentry_name(self)
PIL.OleFileIO.OleFileIO.get_size(self,filename)
PIL.OleFileIO.OleFileIO.get_type(self,filename)
PIL.OleFileIO.OleFileIO.getctime(self,filename)
PIL.OleFileIO.OleFileIO.getmtime(self,filename)
PIL.OleFileIO.OleFileIO.getproperties(self,filename,convert_time=False,no_conversion=None)
PIL.OleFileIO.OleFileIO.getsect(self,sect)
PIL.OleFileIO.OleFileIO.listdir(self,streams=True,storages=False)
PIL.OleFileIO.OleFileIO.loaddirectory(self,sect)
PIL.OleFileIO.OleFileIO.loadfat(self,header)
PIL.OleFileIO.OleFileIO.loadfat_sect(self,sect)
PIL.OleFileIO.OleFileIO.loadminifat(self)
PIL.OleFileIO.OleFileIO.open(self,filename,write_mode=False)
PIL.OleFileIO.OleFileIO.openstream(self,filename)
PIL.OleFileIO.OleFileIO.raise_defect(self,defect_level,message,exception_type=IOError)
PIL.OleFileIO.OleFileIO.sect2array(self,sect)
PIL.OleFileIO.OleFileIO.write_sect(self,sect,data,padding=b'\x00')
PIL.OleFileIO.OleFileIO.write_stream(self,stream_name,data)
PIL.OleFileIO.OleMetadata(self)
PIL.OleFileIO.OleMetadata.__init__(self)
PIL.OleFileIO.OleMetadata.dump(self)
PIL.OleFileIO.OleMetadata.parse_properties(self,olefile)
PIL.OleFileIO._OleDirectoryEntry(self,entry,sid,olefile)
PIL.OleFileIO._OleDirectoryEntry.__eq__(self,other)
PIL.OleFileIO._OleDirectoryEntry.__init__(self,entry,sid,olefile)
PIL.OleFileIO._OleDirectoryEntry.__le__(self,other)
PIL.OleFileIO._OleDirectoryEntry.__lt__(self,other)
PIL.OleFileIO._OleDirectoryEntry.__ne__(self,other)
PIL.OleFileIO._OleDirectoryEntry.append_kids(self,child_sid)
PIL.OleFileIO._OleDirectoryEntry.build_storage_tree(self)
PIL.OleFileIO._OleDirectoryEntry.dump(self,tab=0)
PIL.OleFileIO._OleDirectoryEntry.getctime(self)
PIL.OleFileIO._OleDirectoryEntry.getmtime(self)
PIL.OleFileIO._OleStream(self,fp,sect,size,offset,sectorsize,fat,filesize)
PIL.OleFileIO._OleStream.__init__(self,fp,sect,size,offset,sectorsize,fat,filesize)
PIL.OleFileIO._clsid(clsid)
PIL.OleFileIO.debug_pass(msg)
PIL.OleFileIO.debug_print(msg)
PIL.OleFileIO.filetime2datetime(filetime)
PIL.OleFileIO.i16(c,o=0)
PIL.OleFileIO.i32(c,o=0)
PIL.OleFileIO.isOleFile(filename)
PIL.OleFileIO.set_debug_mode(debug_mode)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/JpegImagePlugin.py----------------------------------------
A:PIL.JpegImagePlugin.s->self.fp.read(1)
A:PIL.JpegImagePlugin.self.info['jfif']version->i16(s, 5)
A:PIL.JpegImagePlugin.self.info['jfif_version']->divmod(version, 256)
A:PIL.JpegImagePlugin.jfif_unit->i8(s[7])
A:PIL.JpegImagePlugin.self.info['adobe']->i16(s, 5)
A:PIL.JpegImagePlugin.adobe_transform->i8(s[1])
A:PIL.JpegImagePlugin.self.bits->i8(s[0])
A:PIL.JpegImagePlugin.self.layers->i8(s[5])
A:PIL.JpegImagePlugin.icc_profile->PIL.TiffImagePlugin.ImageFileDirectory_v2(head).get('icc_profile')
A:PIL.JpegImagePlugin.v->i8(s[0])
A:PIL.JpegImagePlugin.self.quantization[v & 15]->array.array('B', s[1:65])
A:PIL.JpegImagePlugin.i->i16(s)
A:PIL.JpegImagePlugin.scale->max(self.size[0] // size[0], self.size[1] // size[1])
A:PIL.JpegImagePlugin.(f, path)->im._dump().mkstemp()
A:PIL.JpegImagePlugin.self.im->PIL.Image.core.open_ppm(path)
A:PIL.JpegImagePlugin.file->io.BytesIO(data[6:])
A:PIL.JpegImagePlugin.head->io.BytesIO(data).read(8)
A:PIL.JpegImagePlugin.info->PIL.TiffImagePlugin.ImageFileDirectory_v2(head)
A:PIL.JpegImagePlugin.exif->dict(_fixup_dict(info))
A:PIL.JpegImagePlugin.exif[34853]->_fixup_dict(info)
A:PIL.JpegImagePlugin.file_contents->io.BytesIO(data)
A:PIL.JpegImagePlugin.mp->dict(info)
A:PIL.JpegImagePlugin.unpackedentry->unpack_from('{0}LLLHH'.format(endianness), rawmpentries, entrynum * 16)
A:PIL.JpegImagePlugin.mpentry->dict(zip(labels, unpackedentry))
A:PIL.JpegImagePlugin.mpentryattr['MPType']->mptypemap.get(mpentryattr['MPType'], 'Unknown')
A:PIL.JpegImagePlugin.dpi->PIL.TiffImagePlugin.ImageFileDirectory_v2(head).get('dpi', (0, 0))
A:PIL.JpegImagePlugin.quality->PIL.TiffImagePlugin.ImageFileDirectory_v2(head).get('quality', 0)
A:PIL.JpegImagePlugin.subsampling->get_sampling(im)
A:PIL.JpegImagePlugin.qtables->validate_qtables(qtables)
A:PIL.JpegImagePlugin.table->array.array('B', table)
A:PIL.JpegImagePlugin.qtables[idx]->list(table)
A:PIL.JpegImagePlugin.size->struct.pack('>H', 2 + ICC_OVERHEAD_LEN + len(marker))
A:PIL.JpegImagePlugin.bufsize->max(ImageFile.MAXBLOCK, bufsize, len(info.get('exif', b'')) + 5)
A:PIL.JpegImagePlugin.tempfile->MpoImageFile(fp, filename)._dump()
A:PIL.JpegImagePlugin.im->MpoImageFile(fp, filename)
A:PIL.JpegImagePlugin.mpheader->MpoImageFile(fp, filename)._getmp()
PIL.JpegImagePlugin.APP(self,marker)
PIL.JpegImagePlugin.COM(self,marker)
PIL.JpegImagePlugin.DQT(self,marker)
PIL.JpegImagePlugin.JpegImageFile(ImageFile.ImageFile)
PIL.JpegImagePlugin.JpegImageFile._getexif(self)
PIL.JpegImagePlugin.JpegImageFile._getmp(self)
PIL.JpegImagePlugin.JpegImageFile._open(self)
PIL.JpegImagePlugin.JpegImageFile.draft(self,mode,size)
PIL.JpegImagePlugin.JpegImageFile.load_djpeg(self)
PIL.JpegImagePlugin.SOF(self,marker)
PIL.JpegImagePlugin.Skip(self,marker)
PIL.JpegImagePlugin._accept(prefix)
PIL.JpegImagePlugin._fixup_dict(src_dict)
PIL.JpegImagePlugin._getexif(self)
PIL.JpegImagePlugin._getmp(self)
PIL.JpegImagePlugin._save(im,fp,filename)
PIL.JpegImagePlugin._save_cjpeg(im,fp,filename)
PIL.JpegImagePlugin.convert_dict_qtables(qtables)
PIL.JpegImagePlugin.get_sampling(im)
PIL.JpegImagePlugin.jpeg_factory(fp=None,filename=None)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImageMode.py----------------------------------------
A:PIL.ImageMode._modes[m]->ModeDescriptor(m, bands, basemode, basetype)
A:PIL.ImageMode._modes['RGBa']->ModeDescriptor('RGBa', ('R', 'G', 'B', 'a'), 'RGB', 'L')
A:PIL.ImageMode._modes['LA']->ModeDescriptor('LA', ('L', 'A'), 'L', 'L')
A:PIL.ImageMode._modes['La']->ModeDescriptor('La', ('L', 'a'), 'L', 'L')
A:PIL.ImageMode._modes['PA']->ModeDescriptor('PA', ('P', 'A'), 'RGB', 'L')
A:PIL.ImageMode._modes['I;16']->ModeDescriptor('I;16', 'I', 'L', 'L')
A:PIL.ImageMode._modes['I;16L']->ModeDescriptor('I;16L', 'I', 'L', 'L')
A:PIL.ImageMode._modes['I;16B']->ModeDescriptor('I;16B', 'I', 'L', 'L')
PIL.ImageMode.ModeDescriptor(self,mode,bands,basemode,basetype)
PIL.ImageMode.ModeDescriptor.__init__(self,mode,bands,basemode,basetype)
PIL.ImageMode.ModeDescriptor.__str__(self)
PIL.ImageMode.getmode(mode)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/FliImagePlugin.py----------------------------------------
A:PIL.FliImagePlugin.s->self.fp.read(4)
A:PIL.FliImagePlugin.magic->i16(s[4:6])
A:PIL.FliImagePlugin.duration->i32(s[16:20])
A:PIL.FliImagePlugin.self.palette->PIL.ImagePalette.raw('RGB', b''.join(palette))
A:PIL.FliImagePlugin.self.__rewind->self.fp.tell()
A:PIL.FliImagePlugin.n->i8(s[1])
A:PIL.FliImagePlugin.current->self.tell()
A:PIL.FliImagePlugin.framesize->i32(s)
PIL.FliImagePlugin.FliImageFile(ImageFile.ImageFile)
PIL.FliImagePlugin.FliImageFile._open(self)
PIL.FliImagePlugin.FliImageFile._palette(self,palette,shift)
PIL.FliImagePlugin.FliImageFile._seek(self,frame)
PIL.FliImagePlugin.FliImageFile.is_animated(self)
PIL.FliImagePlugin.FliImageFile.n_frames(self)
PIL.FliImagePlugin.FliImageFile.seek(self,frame)
PIL.FliImagePlugin.FliImageFile.tell(self)
PIL.FliImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/FontFile.py----------------------------------------
A:PIL.FontFile.h->max(h, src[3] - src[1])
A:PIL.FontFile.maxwidth->max(maxwidth, w)
A:PIL.FontFile.self.bitmap->PIL.Image.new('1', (xsize, ysize))
A:PIL.FontFile.fp->open(os.path.splitext(filename)[0] + '.pil', 'wb')
PIL.FontFile.FontFile(self)
PIL.FontFile.FontFile.__getitem__(self,ix)
PIL.FontFile.FontFile.__init__(self)
PIL.FontFile.FontFile.compile(self)
PIL.FontFile.FontFile.save(self,filename)
PIL.FontFile.puti16(fp,values)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/GbrImagePlugin.py----------------------------------------
A:PIL.GbrImagePlugin.header_size->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.version->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.width->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.height->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.color_depth->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.magic_number->self.fp.read(4)
A:PIL.GbrImagePlugin.self.info['spacing']->i32(self.fp.read(4))
A:PIL.GbrImagePlugin.self.im->PIL.Image.core.new(self.mode, self.size)
PIL.GbrImagePlugin.GbrImageFile(ImageFile.ImageFile)
PIL.GbrImagePlugin.GbrImageFile._open(self)
PIL.GbrImagePlugin.GbrImageFile.load(self)
PIL.GbrImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImageGrab.py----------------------------------------
A:PIL.ImageGrab.(fh, filepath)->tempfile.mkstemp('.jpg')
A:PIL.ImageGrab.im->PIL.Image.open(filepath)
A:PIL.ImageGrab.(size, data)->grabber()
A:PIL.ImageGrab.data->PIL.Image.core.grabclipboard(debug)
PIL.ImageGrab.grab(bbox=None)
PIL.ImageGrab.grabclipboard()


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/MspImagePlugin.py----------------------------------------
A:PIL.MspImagePlugin.s->self.fp.read(32)
PIL.MspImagePlugin.MspImageFile(ImageFile.ImageFile)
PIL.MspImagePlugin.MspImageFile._open(self)
PIL.MspImagePlugin._accept(prefix)
PIL.MspImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImageQt.py----------------------------------------
A:PIL.ImageQt.buffer->QBuffer()
A:PIL.ImageQt.b->BytesIO()
A:PIL.ImageQt.(full_bytes_per_line, remaining_bits_per_line)->divmod(bits_per_line, 8)
A:PIL.ImageQt.im->im.convert('RGBA').convert('RGBA')
A:PIL.ImageQt.palette->im.convert('RGBA').convert('RGBA').getpalette()
A:PIL.ImageQt.data->im.convert('RGBA').convert('RGBA').tobytes('raw', 'BGRA')
A:PIL.ImageQt.(r, g, b, a)->im.convert('RGBA').convert('RGBA').split()
A:PIL.ImageQt.im_data->_toqclass_helper(im)
A:PIL.ImageQt.qimage->toqimage(im)
PIL.ImageQt._toqclass_helper(im)
PIL.ImageQt.align8to32(bytes,width,mode)
PIL.ImageQt.fromqimage(im)
PIL.ImageQt.fromqpixmap(im)
PIL.ImageQt.rgb(r,g,b,a=255)
PIL.ImageQt.toqimage(im)
PIL.ImageQt.toqpixmap(im)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/Jpeg2KImagePlugin.py----------------------------------------
A:PIL.Jpeg2KImagePlugin.hdr->fp.read(2)
A:PIL.Jpeg2KImagePlugin.(lsiz, rsiz, xsiz, ysiz, xosiz, yosiz, xtsiz, ytsiz, xtosiz, ytosiz, csiz)->struct.unpack('>HHIIIIIIIIH', siz[:38])
A:PIL.Jpeg2KImagePlugin.(ssiz[i], xrsiz[i], yrsiz[i])->struct.unpack('>BBB', siz[36 + 3 * i:39 + 3 * i])
A:PIL.Jpeg2KImagePlugin.(lbox, tbox)->struct.unpack('>I4s', hio.read(8))
A:PIL.Jpeg2KImagePlugin.header->fp.read(lbox - hlen)
A:PIL.Jpeg2KImagePlugin.hio->io.BytesIO(header)
A:PIL.Jpeg2KImagePlugin.content->io.BytesIO(header).read(lbox - hlen)
A:PIL.Jpeg2KImagePlugin.(height, width, nc, bpc, c, unkc, ipr)->struct.unpack('>IIHBBBB', content)
A:PIL.Jpeg2KImagePlugin.(meth, prec, approx)->struct.unpack('>BBB', content[:3])
A:PIL.Jpeg2KImagePlugin.sig->self.fp.read(4)
A:PIL.Jpeg2KImagePlugin.(self.size, self.mode)->_parse_jp2_header(self.fp)
A:PIL.Jpeg2KImagePlugin.fd->fp.fileno()
A:PIL.Jpeg2KImagePlugin.pos->self.fp.tell()
A:PIL.Jpeg2KImagePlugin.length->self.fp.tell()
A:PIL.Jpeg2KImagePlugin.offset->info.get('offset', None)
A:PIL.Jpeg2KImagePlugin.tile_offset->info.get('tile_offset', None)
A:PIL.Jpeg2KImagePlugin.tile_size->info.get('tile_size', None)
A:PIL.Jpeg2KImagePlugin.quality_mode->info.get('quality_mode', 'rates')
A:PIL.Jpeg2KImagePlugin.quality_layers->info.get('quality_layers', None)
A:PIL.Jpeg2KImagePlugin.num_resolutions->info.get('num_resolutions', 0)
A:PIL.Jpeg2KImagePlugin.cblk_size->info.get('codeblock_size', None)
A:PIL.Jpeg2KImagePlugin.precinct_size->info.get('precinct_size', None)
A:PIL.Jpeg2KImagePlugin.irreversible->info.get('irreversible', False)
A:PIL.Jpeg2KImagePlugin.progression->info.get('progression', 'LRCP')
A:PIL.Jpeg2KImagePlugin.cinema_mode->info.get('cinema_mode', 'no')
PIL.Jpeg2KImagePlugin.Jpeg2KImageFile(ImageFile.ImageFile)
PIL.Jpeg2KImagePlugin.Jpeg2KImageFile._open(self)
PIL.Jpeg2KImagePlugin.Jpeg2KImageFile.load(self)
PIL.Jpeg2KImagePlugin._accept(prefix)
PIL.Jpeg2KImagePlugin._parse_codestream(fp)
PIL.Jpeg2KImagePlugin._parse_jp2_header(fp)
PIL.Jpeg2KImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/XbmImagePlugin.py----------------------------------------
A:PIL.XbmImagePlugin.xbm_head->re.compile(b'\\s*#define[ \t]+.*_width[ \t]+(?P<width>[0-9]+)[\r\n]+#define[ \t]+.*_height[ \t]+(?P<height>[0-9]+)[\r\n]+(?P<hotspot>#define[ \t]+[^_]*_x_hot[ \t]+(?P<xhot>[0-9]+)[\r\n]+#define[ \t]+[^_]*_y_hot[ \t]+(?P<yhot>[0-9]+)[\r\n]+)?[\\000-\\377]*_bits\\[\\]')
A:PIL.XbmImagePlugin.m->re.compile(b'\\s*#define[ \t]+.*_width[ \t]+(?P<width>[0-9]+)[\r\n]+#define[ \t]+.*_height[ \t]+(?P<height>[0-9]+)[\r\n]+(?P<hotspot>#define[ \t]+[^_]*_x_hot[ \t]+(?P<xhot>[0-9]+)[\r\n]+#define[ \t]+[^_]*_y_hot[ \t]+(?P<yhot>[0-9]+)[\r\n]+)?[\\000-\\377]*_bits\\[\\]').match(self.fp.read(512))
A:PIL.XbmImagePlugin.xsize->int(m.group('width'))
A:PIL.XbmImagePlugin.ysize->int(m.group('height'))
A:PIL.XbmImagePlugin.hotspot->im.encoderinfo.get('hotspot')
PIL.XbmImagePlugin.XbmImageFile(ImageFile.ImageFile)
PIL.XbmImagePlugin.XbmImageFile._open(self)
PIL.XbmImagePlugin._accept(prefix)
PIL.XbmImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImageSequence.py----------------------------------------
PIL.ImageSequence.Iterator(self,im)
PIL.ImageSequence.Iterator.__getitem__(self,ix)
PIL.ImageSequence.Iterator.__init__(self,im)
PIL.ImageSequence.Iterator.__iter__(self)
PIL.ImageSequence.Iterator.__next__(self)
PIL.ImageSequence.Iterator.next(self)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/WalImageFile.py----------------------------------------
A:PIL.WalImageFile.fp->builtins.open(filename, 'rb')
A:PIL.WalImageFile.header->builtins.open(filename, 'rb').read(32 + 24 + 32 + 12)
A:PIL.WalImageFile.offset->i32(header, 40)
A:PIL.WalImageFile.im->PIL.Image.frombytes('P', size, fp.read(size[0] * size[1]))
PIL.WalImageFile.open(filename)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/PpmImagePlugin.py----------------------------------------
A:PIL.PpmImagePlugin.(locale_lang, locale_enc)->locale.getdefaultlocale()
A:PIL.PpmImagePlugin.b_whitespace->b_whitespace.encode('ascii', 'ignore').encode('ascii', 'ignore')
A:PIL.PpmImagePlugin.c->self.fp.read(1)
A:PIL.PpmImagePlugin.s->int(self._token(s))
PIL.PpmImagePlugin.PpmImageFile(ImageFile.ImageFile)
PIL.PpmImagePlugin.PpmImageFile._open(self)
PIL.PpmImagePlugin.PpmImageFile._token(self,s=b'')
PIL.PpmImagePlugin._accept(prefix)
PIL.PpmImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/WebPImagePlugin.py----------------------------------------
A:PIL.WebPImagePlugin.(data, width, height, self.mode, icc_profile, exif)->PIL._webp.WebPDecode(self.fp.read())
A:PIL.WebPImagePlugin.self.fp->BytesIO(data)
A:PIL.WebPImagePlugin.lossless->im.encoderinfo.get('lossless', False)
A:PIL.WebPImagePlugin.quality->im.encoderinfo.get('quality', 80)
A:PIL.WebPImagePlugin.icc_profile->im.encoderinfo.get('icc_profile', '')
A:PIL.WebPImagePlugin.exif->im.encoderinfo.get('exif', '')
A:PIL.WebPImagePlugin.data->PIL._webp.WebPEncode(im.tobytes(), im.size[0], im.size[1], lossless, float(quality), im.mode, icc_profile, exif)
PIL.WebPImagePlugin.WebPImageFile(ImageFile.ImageFile)
PIL.WebPImagePlugin.WebPImageFile._getexif(self)
PIL.WebPImagePlugin.WebPImageFile._open(self)
PIL.WebPImagePlugin._accept(prefix)
PIL.WebPImagePlugin._save(im,fp,filename)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImageEnhance.py----------------------------------------
A:PIL.ImageEnhance.self.degenerate->image.filter(ImageFilter.SMOOTH)
A:PIL.ImageEnhance.mean->int(ImageStat.Stat(image.convert('L')).mean[0] + 0.5)
PIL.ImageEnhance.Brightness(self,image)
PIL.ImageEnhance.Brightness.__init__(self,image)
PIL.ImageEnhance.Color(self,image)
PIL.ImageEnhance.Color.__init__(self,image)
PIL.ImageEnhance.Contrast(self,image)
PIL.ImageEnhance.Contrast.__init__(self,image)
PIL.ImageEnhance.Sharpness(self,image)
PIL.ImageEnhance.Sharpness.__init__(self,image)
PIL.ImageEnhance._Enhance(object)
PIL.ImageEnhance._Enhance.enhance(self,factor)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/BdfFontFile.py----------------------------------------
A:PIL.BdfFontFile.s->fp.readline()
A:PIL.BdfFontFile.id->s[9:].strip().decode('ascii')
A:PIL.BdfFontFile.i->fp.readline().find(b' ')
A:PIL.BdfFontFile.props[s[:i].decode('ascii')]->s[i + 1:-1].decode('ascii')
A:PIL.BdfFontFile.bitmap->b''.join(bitmap)
A:PIL.BdfFontFile.im->PIL.Image.new('1', (x, y))
A:PIL.BdfFontFile.c->bdf_char(fp)
PIL.BdfFontFile.BdfFontFile(self,fp)
PIL.BdfFontFile.BdfFontFile.__init__(self,fp)
PIL.BdfFontFile.bdf_char(f)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/PcdImagePlugin.py----------------------------------------
A:PIL.PcdImagePlugin.s->self.fp.read(2048)
PIL.PcdImagePlugin.PcdImageFile(ImageFile.ImageFile)
PIL.PcdImagePlugin.PcdImageFile._open(self)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/MicImagePlugin.py----------------------------------------
A:PIL.MicImagePlugin.self.ole->OleFileIO(self.fp)
A:PIL.MicImagePlugin.self.fp->self.ole.openstream(filename)
PIL.MicImagePlugin.MicImageFile(TiffImagePlugin.TiffImageFile)
PIL.MicImagePlugin.MicImageFile._open(self)
PIL.MicImagePlugin.MicImageFile.is_animated(self)
PIL.MicImagePlugin.MicImageFile.n_frames(self)
PIL.MicImagePlugin.MicImageFile.seek(self,frame)
PIL.MicImagePlugin.MicImageFile.tell(self)
PIL.MicImagePlugin._accept(prefix)


----------------------------------------/home/zhang/Packages/PIL/PIL3.3.2/ImagePath.py----------------------------------------
PIL.ImagePath.Path(self,xy)
PIL.ImagePath.Path.__init__(self,xy)
PIL.ImagePath.Path.compact(self,distance=2)
PIL.ImagePath.Path.getbbox(self)
PIL.ImagePath.Path.map(self,function)
PIL.ImagePath.Path.tolist(self,flat=0)
PIL.ImagePath.Path.transform(self,matrix)

