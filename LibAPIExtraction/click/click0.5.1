
----------------------------------------/dataset/nuaa/anaconda3/envs/click0.5.1/lib/python3.6/site-packages/click/decorators.py----------------------------------------
A:click.decorators.obj->ctx.find_object(object_type)
A:click.decorators.help->help.decode('utf-8').decode('utf-8')
A:click.decorators.prog_name->attrs.pop('prog_name', None)
A:click.decorators.message->attrs.pop('message', '%(prog)s, version %(version)s')
click.argument(*param_decls,**attrs)
click.command(name=None,cls=None,**attrs)
click.confirmation_option(*param_decls,**attrs)
click.decorators._make_command(f,name,attrs,cls)
click.decorators._param_memo(f,param)
click.decorators.argument(*param_decls,**attrs)
click.decorators.command(name=None,cls=None,**attrs)
click.decorators.confirmation_option(*param_decls,**attrs)
click.decorators.group(name=None,**attrs)
click.decorators.help_option(*param_decls,**attrs)
click.decorators.make_pass_decorator(object_type,ensure=False)
click.decorators.option(*param_decls,**attrs)
click.decorators.pass_context(f)
click.decorators.pass_obj(f)
click.decorators.password_option(*param_decls,**attrs)
click.decorators.version_option(version,*param_decls,**attrs)
click.group(name=None,**attrs)
click.help_option(*param_decls,**attrs)
click.make_pass_decorator(object_type,ensure=False)
click.option(*param_decls,**attrs)
click.pass_context(f)
click.pass_obj(f)
click.password_option(*param_decls,**attrs)
click.version_option(version,*param_decls,**attrs)


----------------------------------------/dataset/nuaa/anaconda3/envs/click0.5.1/lib/python3.6/site-packages/click/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/click0.5.1/lib/python3.6/site-packages/click/helpers.py----------------------------------------
A:click.helpers.value_proc->convert_type(type, default)
A:click.helpers.value->visible_prompt_func(prompt).lower().strip()
A:click.helpers.result->value_proc(value)
A:click.helpers.value2->prompt_func('Repeat for confirmation: ')
A:click.helpers.shutil_get_terminal_size->getattr(shutil, 'get_terminal_size', None)
A:click.helpers.sz->shutil_get_terminal_size()
A:click.helpers.cr->ioctl_gwinsz(fd)
A:click.helpers.fd->os.open(os.ctermid(), os.O_RDONLY)
A:click.helpers.message->message.encode(encoding, 'replace').encode(encoding, 'replace')
A:click.helpers.encoding->get_best_encoding(sys.stdout)
A:click.helpers.text->text.encode(encoding, 'replace').encode(encoding, 'replace')
click.helpers.confirm(text,default=False,abort=False)
click.helpers.echo(message=None,file=None)
click.helpers.echo_via_pager(text)
click.helpers.get_terminal_size()
click.helpers.hidden_prompt_func(prompt)
click.helpers.prompt(text,default=None,hide_input=False,confirmation_prompt=False,type=None,value_proc=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/click0.5.1/lib/python3.6/site-packages/click/core.py----------------------------------------
A:click.core._missing->object()
A:click.core.self.auto_envvar_prefix->auto_envvar_prefix.upper()
A:click.core.rv->Parameter.value_from_envvar(self, ctx)
A:click.core.self.objrv->object_type()
A:click.core.short_help->make_default_short_help(help)
A:click.core.parser->Command.make_parser(self, ctx)
A:click.core.formatter->Context(self, info_name=info_name, parent=parent, **extra).make_formatter()
A:click.core.pieces->self.collect_usage_pieces(ctx)
A:click.core.default_map->parent.default_map.get(info_name)
A:click.core.ctx->Context(self, info_name=info_name, parent=parent, **extra)
A:click.core.(opts, args)->Command.make_parser(self, ctx).parse_args(args=args)
A:click.core.(value, args)->param.handle_parse_result(ctx, opts, args)
A:click.core.args->list(args)
A:click.core.prog_name->make_str(os.path.basename(sys.argv and sys.argv[0] or __file__))
A:click.core.cmd->group(*args, **kwargs)(f)
A:click.core.cmd_name->make_str(ctx.args[0])
A:click.core.(self.name, self.opts, self.secondary_opts)->self._parse_decls(param_decls or ())
A:click.core.self.type->IntRange(min=0)
A:click.core.metavar->self.type.name.upper()
A:click.core.value->self.callback(ctx, value)
A:click.core.prompt_text->self.name.replace('_', ' ').capitalize()
A:click.core.is_flag->bool(self.secondary_opts)
A:click.core.(first, second)->decl.split('/', 1)
A:click.core.name->name.replace('-', '_').replace('-', '_')
A:click.core.default->self.get_default(ctx)
A:click.core.var->self.name.upper()
click.Argument(self,param_decls,required=True,**attrs)
click.Argument._parse_decls(self,decls)
click.Argument.add_to_parser(self,parser,ctx)
click.Argument.get_usage_pieces(self,ctx)
click.Argument.make_metavar(self)
click.Command(self,name,callback=None,params=None,help=None,epilog=None,short_help=None,options_metavar='[OPTIONS]',add_help_option=True)
click.Command.collect_usage_pieces(self,ctx)
click.Command.format_epilog(self,ctx,formatter)
click.Command.format_help(self,ctx,formatter)
click.Command.format_options(self,ctx,formatter)
click.Command.format_usage(self,ctx,formatter)
click.Command.get_help(self,ctx)
click.Command.get_usage(self,ctx)
click.Command.invoke(self,ctx)
click.Command.iter_param_names(self)
click.Command.iter_params_for_processing(self)
click.Command.main(self,args=None,prog_name=None,**extra)
click.Command.make_context(self,info_name,args,parent=None,**extra)
click.Command.make_parser(self,ctx)
click.CommandCollection(self,name=None,sources=None,**attrs)
click.CommandCollection.add_source(self,multi_cmd)
click.CommandCollection.get_command(self,ctx,cmd_name)
click.CommandCollection.list_commands(self,ctx)
click.Context(self,command,parent=None,info_name=None,obj=None,auto_envvar_prefix=None,default_map=None,terminal_width=None)
click.Context.__enter__(self)
click.Context.__exit__(self,exc_type,exc_value,tb)
click.Context.abort(self)
click.Context.call_on_close(self,f)
click.Context.close(self)
click.Context.command_path(self)
click.Context.ensure_object(self,object_type)
click.Context.exit(self,code=0)
click.Context.fail(self,message)
click.Context.find_object(self,object_type)
click.Context.find_root(self)
click.Context.forward(*args,**kwargs)
click.Context.get_help(self)
click.Context.get_usage(self)
click.Context.invoke(*args,**kwargs)
click.Context.lookup_default(self,name)
click.Context.make_formatter(self)
click.Group(self,name=None,commands=None,**attrs)
click.Group.add_command(self,cmd,name=None)
click.Group.command(self,*args,**kwargs)
click.Group.get_command(self,ctx,cmd_name)
click.Group.group(self,*args,**kwargs)
click.Group.list_commands(self,ctx)
click.MultiCommand(self,name=None,invoke_without_command=False,no_args_is_help=None,subcommand_metavar='COMMAND[ARGS]...',**attrs)
click.MultiCommand.collect_usage_pieces(self,ctx)
click.MultiCommand.format_commands(self,ctx,formatter)
click.MultiCommand.format_options(self,ctx,formatter)
click.MultiCommand.get_command(self,ctx,cmd_name)
click.MultiCommand.invoke(self,ctx)
click.MultiCommand.invoke_subcommand(self,ctx,cmd,cmd_name,args)
click.MultiCommand.list_commands(self,ctx)
click.MultiCommand.make_parser(self,ctx)
click.Option(self,param_decls=None,show_default=False,prompt=False,confirmation_prompt=False,hide_input=False,is_flag=None,flag_value=None,multiple=False,count=False,allow_from_autoenv=True,type=None,help=None,**attrs)
click.Option._parse_decls(self,decls)
click.Option.add_to_parser(self,parser,ctx)
click.Option.full_process_value(self,ctx,value)
click.Option.get_default(self,ctx)
click.Option.get_help_record(self,ctx)
click.Option.prompt_for_value(self,ctx)
click.Option.value_from_envvar(self,ctx)
click.Parameter(self,param_decls=None,type=None,required=False,default=None,callback=None,nargs=1,metavar=None,expose_value=True,is_eager=False,envvar=None)
click.Parameter.add_to_parser(self,parser,ctx)
click.Parameter.consume_value(self,ctx,opts)
click.Parameter.full_process_value(self,ctx,value)
click.Parameter.get_default(self,ctx)
click.Parameter.get_help_record(self,ctx)
click.Parameter.get_missing_message(self,ctx)
click.Parameter.get_usage_pieces(self,ctx)
click.Parameter.handle_parse_result(self,ctx,opts,args)
click.Parameter.make_metavar(self)
click.Parameter.process_value(self,ctx,value)
click.Parameter.value_from_envvar(self,ctx)
click.Parameter.value_is_missing(self,value)
click.core.Argument(self,param_decls,required=True,**attrs)
click.core.Argument.__init__(self,param_decls,required=True,**attrs)
click.core.Argument._parse_decls(self,decls)
click.core.Argument.add_to_parser(self,parser,ctx)
click.core.Argument.get_usage_pieces(self,ctx)
click.core.Argument.make_metavar(self)
click.core.Command(self,name,callback=None,params=None,help=None,epilog=None,short_help=None,options_metavar='[OPTIONS]',add_help_option=True)
click.core.Command.__init__(self,name,callback=None,params=None,help=None,epilog=None,short_help=None,options_metavar='[OPTIONS]',add_help_option=True)
click.core.Command.collect_usage_pieces(self,ctx)
click.core.Command.format_epilog(self,ctx,formatter)
click.core.Command.format_help(self,ctx,formatter)
click.core.Command.format_options(self,ctx,formatter)
click.core.Command.format_usage(self,ctx,formatter)
click.core.Command.get_help(self,ctx)
click.core.Command.get_usage(self,ctx)
click.core.Command.invoke(self,ctx)
click.core.Command.iter_param_names(self)
click.core.Command.iter_params_for_processing(self)
click.core.Command.main(self,args=None,prog_name=None,**extra)
click.core.Command.make_context(self,info_name,args,parent=None,**extra)
click.core.Command.make_parser(self,ctx)
click.core.CommandCollection(self,name=None,sources=None,**attrs)
click.core.CommandCollection.__init__(self,name=None,sources=None,**attrs)
click.core.CommandCollection.add_source(self,multi_cmd)
click.core.CommandCollection.get_command(self,ctx,cmd_name)
click.core.CommandCollection.list_commands(self,ctx)
click.core.Context(self,command,parent=None,info_name=None,obj=None,auto_envvar_prefix=None,default_map=None,terminal_width=None)
click.core.Context.__enter__(self)
click.core.Context.__exit__(self,exc_type,exc_value,tb)
click.core.Context.__init__(self,command,parent=None,info_name=None,obj=None,auto_envvar_prefix=None,default_map=None,terminal_width=None)
click.core.Context.abort(self)
click.core.Context.call_on_close(self,f)
click.core.Context.close(self)
click.core.Context.command_path(self)
click.core.Context.ensure_object(self,object_type)
click.core.Context.exit(self,code=0)
click.core.Context.fail(self,message)
click.core.Context.find_object(self,object_type)
click.core.Context.find_root(self)
click.core.Context.forward(*args,**kwargs)
click.core.Context.get_help(self)
click.core.Context.get_usage(self)
click.core.Context.invoke(*args,**kwargs)
click.core.Context.lookup_default(self,name)
click.core.Context.make_formatter(self)
click.core.Group(self,name=None,commands=None,**attrs)
click.core.Group.__init__(self,name=None,commands=None,**attrs)
click.core.Group.add_command(self,cmd,name=None)
click.core.Group.command(self,*args,**kwargs)
click.core.Group.get_command(self,ctx,cmd_name)
click.core.Group.group(self,*args,**kwargs)
click.core.Group.list_commands(self,ctx)
click.core.MultiCommand(self,name=None,invoke_without_command=False,no_args_is_help=None,subcommand_metavar='COMMAND[ARGS]...',**attrs)
click.core.MultiCommand.__init__(self,name=None,invoke_without_command=False,no_args_is_help=None,subcommand_metavar='COMMAND[ARGS]...',**attrs)
click.core.MultiCommand.collect_usage_pieces(self,ctx)
click.core.MultiCommand.format_commands(self,ctx,formatter)
click.core.MultiCommand.format_options(self,ctx,formatter)
click.core.MultiCommand.get_command(self,ctx,cmd_name)
click.core.MultiCommand.invoke(self,ctx)
click.core.MultiCommand.invoke_subcommand(self,ctx,cmd,cmd_name,args)
click.core.MultiCommand.list_commands(self,ctx)
click.core.MultiCommand.make_parser(self,ctx)
click.core.Option(self,param_decls=None,show_default=False,prompt=False,confirmation_prompt=False,hide_input=False,is_flag=None,flag_value=None,multiple=False,count=False,allow_from_autoenv=True,type=None,help=None,**attrs)
click.core.Option.__init__(self,param_decls=None,show_default=False,prompt=False,confirmation_prompt=False,hide_input=False,is_flag=None,flag_value=None,multiple=False,count=False,allow_from_autoenv=True,type=None,help=None,**attrs)
click.core.Option._parse_decls(self,decls)
click.core.Option.add_to_parser(self,parser,ctx)
click.core.Option.full_process_value(self,ctx,value)
click.core.Option.get_default(self,ctx)
click.core.Option.get_help_record(self,ctx)
click.core.Option.prompt_for_value(self,ctx)
click.core.Option.value_from_envvar(self,ctx)
click.core.Parameter(self,param_decls=None,type=None,required=False,default=None,callback=None,nargs=1,metavar=None,expose_value=True,is_eager=False,envvar=None)
click.core.Parameter.__init__(self,param_decls=None,type=None,required=False,default=None,callback=None,nargs=1,metavar=None,expose_value=True,is_eager=False,envvar=None)
click.core.Parameter.add_to_parser(self,parser,ctx)
click.core.Parameter.consume_value(self,ctx,opts)
click.core.Parameter.full_process_value(self,ctx,value)
click.core.Parameter.get_default(self,ctx)
click.core.Parameter.get_help_record(self,ctx)
click.core.Parameter.get_missing_message(self,ctx)
click.core.Parameter.get_usage_pieces(self,ctx)
click.core.Parameter.handle_parse_result(self,ctx,opts,args)
click.core.Parameter.make_metavar(self)
click.core.Parameter.process_value(self,ctx,value)
click.core.Parameter.value_from_envvar(self,ctx)
click.core.Parameter.value_is_missing(self,value)


----------------------------------------/dataset/nuaa/anaconda3/envs/click0.5.1/lib/python3.6/site-packages/click/utils.py----------------------------------------
A:click.utils.args->deque(args)
A:click.utils.nargs_spec->deque(nargs_spec)
A:click.utils.nargs->_fetch(nargs_spec)
A:click.utils.spos->len(rv)
A:click.utils.rv[spos]->tuple(args)
A:click.utils.enc->getattr(stream, 'encoding', None)
A:click.utils.words->help.split()
A:click.utils.(self._f, self.should_close)->open_stream(filename, mode, encoding, errors)
A:click.utils.(rv, self.should_close)->open_stream(self.name, self.mode, self.encoding, self.errors)
A:click.utils.message->message.encode(encoding, 'replace').encode(encoding, 'replace')
A:click.utils.encoding->get_best_encoding(file)
click.echo(message=None,file=None)
click.utils.LazyFile(self,filename,mode='r',encoding=None,errors='strict')
click.utils.LazyFile.__enter__(self)
click.utils.LazyFile.__exit__(self,exc_type,exc_value,tb)
click.utils.LazyFile.__getattr__(self,name)
click.utils.LazyFile.__init__(self,filename,mode='r',encoding=None,errors='strict')
click.utils.LazyFile.__repr__(self)
click.utils.LazyFile.close(self)
click.utils.LazyFile.close_intelligently(self)
click.utils.LazyFile.open(self)
click.utils.echo(message=None,file=None)
click.utils.get_best_encoding(stream)
click.utils.is_ascii_encoding(encoding)
click.utils.make_default_short_help(help,max_length=45)
click.utils.make_str(value)
click.utils.safecall(func)
click.utils.unpack_args(args,nargs_spec)


----------------------------------------/dataset/nuaa/anaconda3/envs/click0.5.1/lib/python3.6/site-packages/click/_optparse.py----------------------------------------
A:click._optparse._gettext->sys.modules.get('gettext')
A:click._optparse.indent->len(prefix)
A:click._optparse.rv->optparse.OptionParser.format_option_help(self, formatter)
A:click._optparse.extra_help->self.__ctx.command._format_extra_help(self.__ctx)
click._optparse._SimplifiedFormatter(self)
click._optparse._SimplifiedFormatter.__init__(self)
click._optparse._SimplifiedFormatter._format_text(self,text)
click._optparse._SimplifiedFormatter.format_description(self,description)
click._optparse._SimplifiedFormatter.format_option_strings(self,option)
click._optparse._SimplifiedFormatter.format_usage(self,usage)
click._optparse._SimplifiedOptionParser(self,ctx,**extra)
click._optparse._SimplifiedOptionParser.__init__(self,ctx,**extra)
click._optparse._SimplifiedOptionParser.error(self,msg)
click._optparse._SimplifiedOptionParser.expand_prog_name(self,s)
click._optparse._SimplifiedOptionParser.format_option_help(self,formatter)


----------------------------------------/dataset/nuaa/anaconda3/envs/click0.5.1/lib/python3.6/site-packages/click/exceptions.py----------------------------------------
A:click.exceptions.ui_filename->filename_to_ui(filename)
click.Abort(RuntimeError)
click.ClickException(self,message)
click.ClickException.show(self,file=None)
click.FileError(self,filename,hint=None)
click.UsageError(self,message,ctx=None)
click.UsageError.show(self,file=None)
click.exceptions.Abort(RuntimeError)
click.exceptions.ClickException(self,message)
click.exceptions.ClickException.__init__(self,message)
click.exceptions.ClickException.show(self,file=None)
click.exceptions.FileError(self,filename,hint=None)
click.exceptions.FileError.__init__(self,filename,hint=None)
click.exceptions.UsageError(self,message,ctx=None)
click.exceptions.UsageError.__init__(self,message,ctx=None)
click.exceptions.UsageError.show(self,file=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/click0.5.1/lib/python3.6/site-packages/click/_compat.py----------------------------------------
A:click._compat.info->codecs.lookup(encoding)
A:click._compat.f->_wrap_stream_for_codec(f, encoding, errors)
A:click._compat._identifier_re->re.compile('^[a-zA-Z_][a-zA-Z0-9_]*$')
A:click._compat.value->value.encode('utf-8', 'surrogateescape').decode('utf-8', 'replace').encode('utf-8', 'surrogateescape').decode('utf-8', 'replace')
A:click._compat.buf->getattr(f, 'buffer', None)
A:click._compat.msg->msg.decode('utf-8', 'replace').decode('utf-8', 'replace')
click._compat._wrap_stream_for_codec(f,encoding=None,errors='strict')
click._compat.get_streerror(e,default=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/click0.5.1/lib/python3.6/site-packages/click/types.py----------------------------------------
A:click.types.value->value.lower().lower()
A:click.types.rv->IntParamType.convert(self, value, param, ctx)
A:click.types.lazy->self.resolve_lazy_flag(value)
A:click.types.f->LazyFile(value, self.mode, self.encoding, self.errors)
A:click.types.(f, should_close)->open_stream(value, self.mode, self.encoding, self.errors)
A:click.types.ty->type(default)
A:click.types.STRING->StringParamType()
A:click.types.INT->IntParamType()
A:click.types.FLOAT->FloatParamType()
A:click.types.BOOL->BoolParamType()
A:click.types.UUID->UUIDParameterType()
click.Choice(self,choices)
click.Choice.__repr__(self)
click.Choice.convert(self,value,param,ctx)
click.Choice.get_metavar(self,param)
click.File(self,mode='r',encoding=None,errors='strict',lazy=None)
click.File.convert(self,value,param,ctx)
click.File.resolve_lazy_flag(self,value)
click.IntRange(self,min=None,max=None,clamp=False)
click.IntRange.__repr__(self)
click.IntRange.convert(self,value,param,ctx)
click.ParamType(self,value,param=None,ctx=None)
click.ParamType.convert(self,param,ctx,value)
click.ParamType.fail(self,message,param=None,ctx=None)
click.ParamType.get_metavar(self,param)
click.UUIDParameterType(ParamType)
click.UUIDParameterType.__repr__(self)
click.UUIDParameterType.convert(self,value,param,ctx)
click.types.BoolParamType(ParamType)
click.types.BoolParamType.__repr__(self)
click.types.BoolParamType.convert(self,value,param,ctx)
click.types.Choice(self,choices)
click.types.Choice.__init__(self,choices)
click.types.Choice.__repr__(self)
click.types.Choice.convert(self,value,param,ctx)
click.types.Choice.get_metavar(self,param)
click.types.File(self,mode='r',encoding=None,errors='strict',lazy=None)
click.types.File.__init__(self,mode='r',encoding=None,errors='strict',lazy=None)
click.types.File.convert(self,value,param,ctx)
click.types.File.resolve_lazy_flag(self,value)
click.types.FloatParamType(ParamType)
click.types.FloatParamType.__repr__(self)
click.types.FloatParamType.convert(self,value,param,ctx)
click.types.FuncParamType(self,func)
click.types.FuncParamType.__init__(self,func)
click.types.FuncParamType.convert(self,value,param,ctx)
click.types.IntParamType(ParamType)
click.types.IntParamType.__repr__(self)
click.types.IntParamType.convert(self,value,param,ctx)
click.types.IntRange(self,min=None,max=None,clamp=False)
click.types.IntRange.__init__(self,min=None,max=None,clamp=False)
click.types.IntRange.__repr__(self)
click.types.IntRange.convert(self,value,param,ctx)
click.types.ParamType(self,value,param=None,ctx=None)
click.types.ParamType.__call__(self,value,param=None,ctx=None)
click.types.ParamType.convert(self,param,ctx,value)
click.types.ParamType.fail(self,message,param=None,ctx=None)
click.types.ParamType.get_metavar(self,param)
click.types.StringParamType(ParamType)
click.types.StringParamType.__repr__(self)
click.types.StringParamType.convert(self,value,param,ctx)
click.types.UUIDParameterType(ParamType)
click.types.UUIDParameterType.__repr__(self)
click.types.UUIDParameterType.convert(self,value,param,ctx)
click.types.convert_type(ty,default=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/click0.5.1/lib/python3.6/site-packages/click/formatting.py----------------------------------------
A:click.formatting.widths[idx]->max(widths.get(idx, 0), len(col))
A:click.formatting.row->tuple(row)
A:click.formatting.space_left->max(width - cur_len, 1)
A:click.formatting.(cut, res)->self._cutdown(reversed_chunks[-1], space_left)
A:click.formatting.text->text.expandtabs().expandtabs()
A:click.formatting.wrapper->TextWrapper(width, initial_indent=initial_indent, subsequent_indent=subsequent_indent, replace_whitespace=False)
A:click.formatting.orig_len->len(line)
A:click.formatting.line->line.lstrip().lstrip()
A:click.formatting.text_width->max(self.width - self.current_indent, 11)
A:click.formatting.rows->list(rows)
A:click.formatting.widths->measure_table(rows)
A:click.formatting.lines->iter(wrap_text(second, text_width).splitlines())
click.HelpFormatter(self,indent_increment=2,width=None)
click.HelpFormatter.dedent(self)
click.HelpFormatter.getvalue(self)
click.HelpFormatter.indent(self)
click.HelpFormatter.indentation(self)
click.HelpFormatter.section(self,name)
click.HelpFormatter.write(self,string)
click.HelpFormatter.write_dl(self,rows,col_max=30,col_spacing=2)
click.HelpFormatter.write_heading(self,heading)
click.HelpFormatter.write_paragraph(self)
click.HelpFormatter.write_text(self,text)
click.HelpFormatter.write_usage(self,prog,args='',prefix='Usage:')
click.formatting.HelpFormatter(self,indent_increment=2,width=None)
click.formatting.HelpFormatter.__init__(self,indent_increment=2,width=None)
click.formatting.HelpFormatter.dedent(self)
click.formatting.HelpFormatter.getvalue(self)
click.formatting.HelpFormatter.indent(self)
click.formatting.HelpFormatter.indentation(self)
click.formatting.HelpFormatter.section(self,name)
click.formatting.HelpFormatter.write(self,string)
click.formatting.HelpFormatter.write_dl(self,rows,col_max=30,col_spacing=2)
click.formatting.HelpFormatter.write_heading(self,heading)
click.formatting.HelpFormatter.write_paragraph(self)
click.formatting.HelpFormatter.write_text(self,text)
click.formatting.HelpFormatter.write_usage(self,prog,args='',prefix='Usage:')
click.formatting.TextWrapper(textwrap.TextWrapper)
click.formatting.TextWrapper._cutdown(self,ucstr,space_left)
click.formatting.TextWrapper._handle_long_word(self,reversed_chunks,cur_line,cur_len,width)
click.formatting.TextWrapper.extra_indent(self,indent)
click.formatting.TextWrapper.indent_only(self,text)
click.formatting.iter_rows(rows,col_count)
click.formatting.measure_table(rows)
click.formatting.wrap_text(text,width=78,initial_indent='',subsequent_indent='',preserve_paragraphs=False)
click.wrap_text(text,width=78,initial_indent='',subsequent_indent='',preserve_paragraphs=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/click0.5.1/lib/python3.6/site-packages/click/termui.py----------------------------------------
A:click.termui.value_proc->convert_type(type, default)
A:click.termui.prompt->_build_prompt(text, prompt_suffix, show_default, default and 'Yn' or 'yN')
A:click.termui.value->visible_prompt_func(prompt).lower().strip()
A:click.termui.result->value_proc(value)
A:click.termui.value2->prompt_func('Repeat for confirmation: ')
A:click.termui.shutil_get_terminal_size->getattr(shutil, 'get_terminal_size', None)
A:click.termui.sz->shutil_get_terminal_size()
A:click.termui.cr->ioctl_gwinsz(fd)
A:click.termui.fd->os.open(os.ctermid(), os.O_RDONLY)
A:click.termui.text->text.encode(encoding, 'replace').encode(encoding, 'replace')
A:click.termui.encoding->get_best_encoding(sys.stdout)
click.confirm(text,default=False,abort=False,prompt_suffix=':',show_default=True)
click.echo_via_pager(text)
click.get_terminal_size()
click.prompt(text,default=None,hide_input=False,confirmation_prompt=False,type=None,value_proc=None,prompt_suffix=':',show_default=True)
click.termui._build_prompt(text,suffix,show_default=False,default=None)
click.termui.confirm(text,default=False,abort=False,prompt_suffix=':',show_default=True)
click.termui.echo_via_pager(text)
click.termui.get_terminal_size()
click.termui.hidden_prompt_func(prompt)
click.termui.prompt(text,default=None,hide_input=False,confirmation_prompt=False,type=None,value_proc=None,prompt_suffix=':',show_default=True)


----------------------------------------/dataset/nuaa/anaconda3/envs/click0.5.1/lib/python3.6/site-packages/click/parser.py----------------------------------------
A:click.parser.self.prefixes->set()
A:click.parser.self._opt_prefixes->set(['-', '--'])
A:click.parser.option->self._short_opt.get(opt)
A:click.parser.args->self._process_args_for_args(largs, rargs, opts)
A:click.parser.(pargs, args)->unpack_args(largs + rargs, self._nargs)
A:click.parser.arg->rargs.pop(0)
A:click.parser.(opt, next_arg)->rargs.pop(0).split('=', 1)
A:click.parser.opt->self._match_long_opt(opt)
A:click.parser.value->tuple(rargs[:nargs])
click.OptionParser(self,ctx=None)
click.OptionParser._error(self,msg)
click.OptionParser._match_long_opt(self,opt)
click.OptionParser._process_args_for_args(self,largs,rargs,opts)
click.OptionParser._process_args_for_options(self,largs,rargs,opts)
click.OptionParser._process_long_opt(self,rargs,opts)
click.OptionParser._process_short_opts(self,rargs,opts)
click.OptionParser.add_argument(self,dest,nargs=1)
click.OptionParser.add_option(self,opts,dest,action=None,nargs=1,const=None)
click.OptionParser.parse_args(self,args)
click.parser.Option(self,opts,dest,action=None,nargs=1,const=None)
click.parser.Option.__init__(self,opts,dest,action=None,nargs=1,const=None)
click.parser.Option.process(self,opt,value,opts,parser)
click.parser.Option.takes_value(self)
click.parser.OptionParser(self,ctx=None)
click.parser.OptionParser.__init__(self,ctx=None)
click.parser.OptionParser._error(self,msg)
click.parser.OptionParser._match_long_opt(self,opt)
click.parser.OptionParser._process_args_for_args(self,largs,rargs,opts)
click.parser.OptionParser._process_args_for_options(self,largs,rargs,opts)
click.parser.OptionParser._process_long_opt(self,rargs,opts)
click.parser.OptionParser._process_short_opts(self,rargs,opts)
click.parser.OptionParser.add_argument(self,dest,nargs=1)
click.parser.OptionParser.add_option(self,opts,dest,action=None,nargs=1,const=None)
click.parser.OptionParser.parse_args(self,args)
click.parser.split_opt(opt)

