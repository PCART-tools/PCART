
----------------------------------------/home/zhang/Packages/click/click8.0.0rc1/_winconsole.py----------------------------------------
A:click._winconsole.c_ssize_p->POINTER(c_ssize_t)
A:click._winconsole.GetCommandLineW->WINFUNCTYPE(LPWSTR)(('GetCommandLineW', windll.kernel32))
A:click._winconsole.CommandLineToArgvW->WINFUNCTYPE(POINTER(LPWSTR), LPCWSTR, POINTER(c_int))(('CommandLineToArgvW', windll.shell32))
A:click._winconsole.LocalFree->WINFUNCTYPE(c_void_p, c_void_p)(('LocalFree', windll.kernel32))
A:click._winconsole.STDIN_HANDLE->GetStdHandle(-10)
A:click._winconsole.STDOUT_HANDLE->GetStdHandle(-11)
A:click._winconsole.STDERR_HANDLE->GetStdHandle(-12)
A:click._winconsole.buf->get_buffer(b)
A:click._winconsole.bytes_to_be_read->len(b)
A:click._winconsole.buffer->get_buffer(b, writable=True)
A:click._winconsole.code_units_read->c_ulong()
A:click._winconsole.rv->ReadConsoleW(HANDLE(self.handle), buffer, code_units_to_be_read, byref(code_units_read), None)
A:click._winconsole.bytes_to_be_written->len(b)
A:click._winconsole.code_units_written->c_ulong()
A:click._winconsole.total_to_write->len(text)
A:click._winconsole.to_write->min(total_to_write - written, MAX_BYTES_WRITTEN)
A:click._winconsole.text_stream->_NonClosingTextIOWrapper(io.BufferedWriter(_WindowsConsoleWriter(STDERR_HANDLE)), 'utf-16-le', 'strict', line_buffering=True)
A:click._winconsole.fileno->getattr(f, 'buffer', None).fileno()
A:click._winconsole.handle->msvcrt.get_osfhandle(fileno)
A:click._winconsole.func->_stream_factories.get(f.fileno())
A:click._winconsole.f->getattr(f, 'buffer', None)
click._winconsole.ConsoleStream(self,text_stream,byte_stream)
click._winconsole.ConsoleStream.__getattr__(self,name)
click._winconsole.ConsoleStream.__init__(self,text_stream,byte_stream)
click._winconsole.ConsoleStream.__repr__(self)
click._winconsole.ConsoleStream.isatty(self)
click._winconsole.ConsoleStream.name(self)
click._winconsole.ConsoleStream.write(self,x)
click._winconsole.ConsoleStream.writelines(self,lines)
click._winconsole.WindowsChunkedWriter(self,wrapped)
click._winconsole.WindowsChunkedWriter.__getattr__(self,name)
click._winconsole.WindowsChunkedWriter.__init__(self,wrapped)
click._winconsole.WindowsChunkedWriter.write(self,text)
click._winconsole._WindowsConsoleRawIOBase(self,handle)
click._winconsole._WindowsConsoleRawIOBase.__init__(self,handle)
click._winconsole._WindowsConsoleRawIOBase.isatty(self)
click._winconsole._WindowsConsoleReader(_WindowsConsoleRawIOBase)
click._winconsole._WindowsConsoleReader.readable(self)
click._winconsole._WindowsConsoleReader.readinto(self,b)
click._winconsole._WindowsConsoleWriter(_WindowsConsoleRawIOBase)
click._winconsole._WindowsConsoleWriter._get_error_message(errno)
click._winconsole._WindowsConsoleWriter.writable(self)
click._winconsole._WindowsConsoleWriter.write(self,b)
click._winconsole._get_text_stderr(buffer_stream)
click._winconsole._get_text_stdin(buffer_stream)
click._winconsole._get_text_stdout(buffer_stream)
click._winconsole._get_windows_console_stream(f,encoding,errors)
click._winconsole._is_console(f)


----------------------------------------/home/zhang/Packages/click/click8.0.0rc1/types.py----------------------------------------
A:click.types.info_dict->super().to_info_dict()
A:click.types.value->value.strip().strip()
A:click.types.enc->_get_argv_encoding()
A:click.types.fs_enc->get_filesystem_encoding()
A:click.types.choices_str->', '.join(map(repr, self.choices))
A:click.types.normed_value->normed_value.casefold().casefold()
A:click.types.str_choices->map(str, self.choices)
A:click.types.incomplete->incomplete.lower().lower()
A:click.types.converted->self._try_to_convert_date(value, format)
A:click.types.formats_str->', '.join(map(repr, self.formats))
A:click.types.rv->os.path.realpath(rv)
A:click.types.norm->value.strip().strip().strip().lower()
A:click.types.lazy->self.resolve_lazy_flag(value)
A:click.types.f->LazyFile(value, self.mode, self.encoding, self.errors, atomic=self.atomic)
A:click.types.(f, should_close)->open_stream(value, self.mode, self.encoding, self.errors, atomic=self.atomic)
A:click.types.self.name->_('path')
A:click.types.st->os.stat(rv)
A:click.types.len_type->len(self.types)
A:click.types.len_value->len(value)
A:click.types.ty->type(default)
A:click.types.UNPROCESSED->UnprocessedParamType()
A:click.types.STRING->StringParamType()
A:click.types.INT->IntParamType()
A:click.types.FLOAT->FloatParamType()
A:click.types.BOOL->BoolParamType()
A:click.types.UUID->UUIDParameterType()
click.Choice(self,choices,case_sensitive=True)
click.Choice.__repr__(self)
click.Choice.convert(self,value,param,ctx)
click.Choice.get_metavar(self,param)
click.Choice.get_missing_message(self,param)
click.Choice.shell_complete(self,ctx,param,incomplete)
click.Choice.to_info_dict(self)
click.DateTime(self,formats=None)
click.DateTime.__repr__(self)
click.DateTime._try_to_convert_date(self,value,format)
click.DateTime.convert(self,value,param,ctx)
click.DateTime.get_metavar(self,param)
click.DateTime.to_info_dict(self)
click.File(self,mode='r',encoding=None,errors='strict',lazy=None,atomic=False)
click.File.convert(self,value,param,ctx)
click.File.resolve_lazy_flag(self,value)
click.File.shell_complete(self,ctx,param,incomplete)
click.File.to_info_dict(self)
click.FloatRange(self,min=None,max=None,min_open=False,max_open=False,clamp=False)
click.FloatRange._clamp(self,bound,dir,open)
click.IntRange(_NumberRangeBase,IntParamType)
click.IntRange._clamp(self,bound,dir,open)
click.ParamType(self,value,param=None,ctx=None)
click.ParamType.convert(self,value,param,ctx)
click.ParamType.fail(self,message,param=None,ctx=None)
click.ParamType.get_metavar(self,param)
click.ParamType.get_missing_message(self,param)
click.ParamType.shell_complete(self,ctx,param,incomplete)
click.ParamType.split_envvar_value(self,rv)
click.ParamType.to_info_dict(self)
click.Path(self,exists=False,file_okay=True,dir_okay=True,writable=False,readable=True,resolve_path=False,allow_dash=False,path_type=None)
click.Path.coerce_path_result(self,rv)
click.Path.convert(self,value,param,ctx)
click.Path.shell_complete(self,ctx,param,incomplete)
click.Path.to_info_dict(self)
click.Tuple(self,types)
click.Tuple.arity(self)
click.Tuple.convert(self,value,param,ctx)
click.Tuple.name(self)
click.Tuple.to_info_dict(self)
click.UUIDParameterType(ParamType)
click.UUIDParameterType.__repr__(self)
click.UUIDParameterType.convert(self,value,param,ctx)
click.types.BoolParamType(ParamType)
click.types.BoolParamType.__repr__(self)
click.types.BoolParamType.convert(self,value,param,ctx)
click.types.Choice(self,choices,case_sensitive=True)
click.types.Choice.__init__(self,choices,case_sensitive=True)
click.types.Choice.__repr__(self)
click.types.Choice.convert(self,value,param,ctx)
click.types.Choice.get_metavar(self,param)
click.types.Choice.get_missing_message(self,param)
click.types.Choice.shell_complete(self,ctx,param,incomplete)
click.types.Choice.to_info_dict(self)
click.types.CompositeParamType(ParamType)
click.types.CompositeParamType.arity(self)
click.types.DateTime(self,formats=None)
click.types.DateTime.__init__(self,formats=None)
click.types.DateTime.__repr__(self)
click.types.DateTime._try_to_convert_date(self,value,format)
click.types.DateTime.convert(self,value,param,ctx)
click.types.DateTime.get_metavar(self,param)
click.types.DateTime.to_info_dict(self)
click.types.File(self,mode='r',encoding=None,errors='strict',lazy=None,atomic=False)
click.types.File.__init__(self,mode='r',encoding=None,errors='strict',lazy=None,atomic=False)
click.types.File.convert(self,value,param,ctx)
click.types.File.resolve_lazy_flag(self,value)
click.types.File.shell_complete(self,ctx,param,incomplete)
click.types.File.to_info_dict(self)
click.types.FloatParamType(_NumberParamTypeBase)
click.types.FloatParamType.__repr__(self)
click.types.FloatRange(self,min=None,max=None,min_open=False,max_open=False,clamp=False)
click.types.FloatRange.__init__(self,min=None,max=None,min_open=False,max_open=False,clamp=False)
click.types.FloatRange._clamp(self,bound,dir,open)
click.types.FuncParamType(self,func)
click.types.FuncParamType.__init__(self,func)
click.types.FuncParamType.convert(self,value,param,ctx)
click.types.FuncParamType.to_info_dict(self)
click.types.IntParamType(_NumberParamTypeBase)
click.types.IntParamType.__repr__(self)
click.types.IntRange(_NumberRangeBase,IntParamType)
click.types.IntRange._clamp(self,bound,dir,open)
click.types.ParamType(self,value,param=None,ctx=None)
click.types.ParamType.__call__(self,value,param=None,ctx=None)
click.types.ParamType.convert(self,value,param,ctx)
click.types.ParamType.fail(self,message,param=None,ctx=None)
click.types.ParamType.get_metavar(self,param)
click.types.ParamType.get_missing_message(self,param)
click.types.ParamType.shell_complete(self,ctx,param,incomplete)
click.types.ParamType.split_envvar_value(self,rv)
click.types.ParamType.to_info_dict(self)
click.types.Path(self,exists=False,file_okay=True,dir_okay=True,writable=False,readable=True,resolve_path=False,allow_dash=False,path_type=None)
click.types.Path.__init__(self,exists=False,file_okay=True,dir_okay=True,writable=False,readable=True,resolve_path=False,allow_dash=False,path_type=None)
click.types.Path.coerce_path_result(self,rv)
click.types.Path.convert(self,value,param,ctx)
click.types.Path.shell_complete(self,ctx,param,incomplete)
click.types.Path.to_info_dict(self)
click.types.StringParamType(ParamType)
click.types.StringParamType.__repr__(self)
click.types.StringParamType.convert(self,value,param,ctx)
click.types.Tuple(self,types)
click.types.Tuple.__init__(self,types)
click.types.Tuple.arity(self)
click.types.Tuple.convert(self,value,param,ctx)
click.types.Tuple.name(self)
click.types.Tuple.to_info_dict(self)
click.types.UUIDParameterType(ParamType)
click.types.UUIDParameterType.__repr__(self)
click.types.UUIDParameterType.convert(self,value,param,ctx)
click.types.UnprocessedParamType(ParamType)
click.types.UnprocessedParamType.__repr__(self)
click.types.UnprocessedParamType.convert(self,value,param,ctx)
click.types._NumberParamTypeBase(ParamType)
click.types._NumberParamTypeBase.convert(self,value,param,ctx)
click.types._NumberRangeBase(self,min=None,max=None,min_open=False,max_open=False,clamp=False)
click.types._NumberRangeBase.__init__(self,min=None,max=None,min_open=False,max_open=False,clamp=False)
click.types._NumberRangeBase.__repr__(self)
click.types._NumberRangeBase._clamp(self,bound,dir,open)
click.types._NumberRangeBase._describe_range(self)
click.types._NumberRangeBase.convert(self,value,param,ctx)
click.types._NumberRangeBase.to_info_dict(self)
click.types.convert_type(ty,default=None)


----------------------------------------/home/zhang/Packages/click/click8.0.0rc1/globals.py----------------------------------------
A:click.globals._local->local()
A:click.globals.ctx->get_current_context(silent=True)
click.get_current_context(silent=False)
click.globals.get_current_context(silent=False)
click.globals.pop_context()
click.globals.push_context(ctx)
click.globals.resolve_color_default(color=None)


----------------------------------------/home/zhang/Packages/click/click8.0.0rc1/testing.py----------------------------------------
A:click.testing.rv->dict(self.env)
A:click.testing.input->make_input_stream(input, self.charset)
A:click.testing.env->self.make_env(env)
A:click.testing.bytes_output->io.BytesIO()
A:click.testing.inputecho_input->EchoingStdin(input, bytes_output)
A:click.testing.sys.stdininput->_NamedTextIOWrapper(input, encoding=self.charset, name='<stdin>', mode='r')
A:click.testing.sys.stdout->_NamedTextIOWrapper(bytes_output, encoding=self.charset, name='<stdout>', mode='w')
A:click.testing.bytes_error->io.BytesIO()
A:click.testing.sys.stderr->_NamedTextIOWrapper(bytes_error, encoding=self.charset, name='<stderr>', mode='w', errors='backslashreplace')
A:click.testing.val->make_input_stream(input, self.charset).readline().rstrip('\r\n')
A:click.testing.char->sys.stdin.read(1)
A:click.testing.old_env[key]->os.environ.get(key)
A:click.testing.args->shlex.split(args)
A:click.testing.prog_name->self.get_default_prog_name(cli)
A:click.testing.return_value->cli.main(args=args or (), prog_name=prog_name, **extra)
A:click.testing.exc_info->sys.exc_info()
A:click.testing.stdout->outstreams[0].getvalue()
A:click.testing.stderr->outstreams[1].getvalue()
A:click.testing.cwd->os.getcwd()
A:click.testing.t->tempfile.mkdtemp(dir=temp_dir)
click.testing.CliRunner(self,charset='utf-8',env=None,echo_stdin=False,mix_stderr=True)
click.testing.CliRunner.__init__(self,charset='utf-8',env=None,echo_stdin=False,mix_stderr=True)
click.testing.CliRunner.get_default_prog_name(self,cli)
click.testing.CliRunner.invoke(self,cli,args=None,input=None,env=None,catch_exceptions=True,color=False,**extra)
click.testing.CliRunner.isolated_filesystem(self,temp_dir=None)
click.testing.CliRunner.isolation(self,input=None,env=None,color=False)
click.testing.CliRunner.make_env(self,overrides=None)
click.testing.EchoingStdin(self,input,output)
click.testing.EchoingStdin.__getattr__(self,x)
click.testing.EchoingStdin.__init__(self,input,output)
click.testing.EchoingStdin.__iter__(self)
click.testing.EchoingStdin.__repr__(self)
click.testing.EchoingStdin._echo(self,rv)
click.testing.EchoingStdin.read(self,n=-1)
click.testing.EchoingStdin.read1(self,n=-1)
click.testing.EchoingStdin.readline(self,n=-1)
click.testing.EchoingStdin.readlines(self)
click.testing.Result(self,runner,stdout_bytes,stderr_bytes,return_value,exit_code,exception,exc_info=None)
click.testing.Result.__init__(self,runner,stdout_bytes,stderr_bytes,return_value,exit_code,exception,exc_info=None)
click.testing.Result.__repr__(self)
click.testing.Result.output(self)
click.testing.Result.stderr(self)
click.testing.Result.stdout(self)
click.testing._NamedTextIOWrapper(self,buffer,name=None,mode=None,**kwargs)
click.testing._NamedTextIOWrapper.__init__(self,buffer,name=None,mode=None,**kwargs)
click.testing._NamedTextIOWrapper.mode(self)
click.testing._NamedTextIOWrapper.name(self)
click.testing._pause_echo(stream)
click.testing.make_input_stream(input,charset)


----------------------------------------/home/zhang/Packages/click/click8.0.0rc1/utils.py----------------------------------------
A:click.utils.paragraph_end->help.find('\n\n')
A:click.utils.words->help.split()
A:click.utils.(self._f, self.should_close)->open_stream(filename, mode, encoding, errors)
A:click.utils.(rv, self.should_close)->open_stream(self.name, self.mode, self.encoding, self.errors, atomic=self.atomic)
A:click.utils.file->auto_wrap_for_ansi(file)
A:click.utils.message->strip_ansi(message)
A:click.utils.binary_file->_find_binary_writer(file)
A:click.utils.color->resolve_color_default(color)
A:click.utils.opener->_compat.text_streams.get(name)
A:click.utils.(f, should_close)->open_stream(filename, mode, encoding, errors, atomic=atomic)
A:click.utils.f->KeepOpenFile(f)
A:click.utils.filename->os.path.basename(filename)
A:click.utils.folder->os.path.expanduser('~')
A:click.utils.arg->os.path.expandvars(arg)
A:click.utils.matches->glob(arg, recursive=glob_recursive)
click.echo(message=None,file=None,nl=True,err=False,color=None)
click.format_filename(filename,shorten=False)
click.get_app_dir(app_name,roaming=True,force_posix=False)
click.get_binary_stream(name)
click.get_os_args()
click.get_text_stream(name,encoding=None,errors='strict')
click.open_file(filename,mode='r',encoding=None,errors='strict',lazy=False,atomic=False)
click.utils.KeepOpenFile(self,file)
click.utils.KeepOpenFile.__enter__(self)
click.utils.KeepOpenFile.__exit__(self,exc_type,exc_value,tb)
click.utils.KeepOpenFile.__getattr__(self,name)
click.utils.KeepOpenFile.__init__(self,file)
click.utils.KeepOpenFile.__iter__(self)
click.utils.KeepOpenFile.__repr__(self)
click.utils.LazyFile(self,filename,mode='r',encoding=None,errors='strict',atomic=False)
click.utils.LazyFile.__enter__(self)
click.utils.LazyFile.__exit__(self,exc_type,exc_value,tb)
click.utils.LazyFile.__getattr__(self,name)
click.utils.LazyFile.__init__(self,filename,mode='r',encoding=None,errors='strict',atomic=False)
click.utils.LazyFile.__iter__(self)
click.utils.LazyFile.__repr__(self)
click.utils.LazyFile.close(self)
click.utils.LazyFile.close_intelligently(self)
click.utils.LazyFile.open(self)
click.utils.PacifyFlushWrapper(self,wrapped)
click.utils.PacifyFlushWrapper.__getattr__(self,attr)
click.utils.PacifyFlushWrapper.__init__(self,wrapped)
click.utils.PacifyFlushWrapper.flush(self)
click.utils._detect_program_name(path=None,_main=sys.modules['__main__'])
click.utils._expand_args(args:t.Iterable[str],*,user:bool=True,env:bool=True,glob_recursive:bool=True)->t.List[str]
click.utils._posixify(name)
click.utils.echo(message=None,file=None,nl=True,err=False,color=None)
click.utils.format_filename(filename,shorten=False)
click.utils.get_app_dir(app_name,roaming=True,force_posix=False)
click.utils.get_binary_stream(name)
click.utils.get_os_args()
click.utils.get_text_stream(name,encoding=None,errors='strict')
click.utils.make_default_short_help(help:str,max_length:int=45)->str
click.utils.make_str(value)
click.utils.open_file(filename,mode='r',encoding=None,errors='strict',lazy=False,atomic=False)
click.utils.safecall(func)


----------------------------------------/home/zhang/Packages/click/click8.0.0rc1/_termui_impl.py----------------------------------------
A:click._termui_impl.hint->get_hint(obj)
A:click._termui_impl.file->_default_text_stdout()
A:click._termui_impl.length->_length_hint(iterable)
A:click._termui_impl.iterable->range(length)
A:click._termui_impl.self.iter->iter(iterable)
A:click._termui_impl.self.startself.last_eta->time.time()
A:click._termui_impl.t->int(self.eta)
A:click._termui_impl.pos->str(self.pos)
A:click._termui_impl.bar_length->int(self.pct * self.width)
A:click._termui_impl.bar->''.join(bar)
A:click._termui_impl.item_info->self.item_show_func(self.current_item)
A:click._termui_impl.clutter_length->term_len(self.format_progress_line())
A:click._termui_impl.new_width->max(0, shutil.get_terminal_size().columns - clutter_length)
A:click._termui_impl.line->''.join(buf)
A:click._termui_impl.line_len->term_len(line)
A:click._termui_impl.self.last_eta->time.time()
A:click._termui_impl.stdout->_default_text_stdout()
A:click._termui_impl.pager_cmd->(os.environ.get('PAGER', None) or '').strip()
A:click._termui_impl.(fd, filename)->tempfile.mkstemp()
A:click._termui_impl.env->dict(os.environ)
A:click._termui_impl.cmd_detail->cmd.rsplit('/', 1)[-1].split()
A:click._termui_impl.c->subprocess.Popen(['xdg-open', url])
A:click._termui_impl.encoding->get_best_encoding(sys.stdout)
A:click._termui_impl.text->text.encode('utf-8').encode('utf-8')
A:click._termui_impl.filename->tempfile.mkstemp()
A:click._termui_impl.rv->func()
A:click._termui_impl.editor->self.get_editor()
A:click._termui_impl.environ->os.environ.copy()
A:click._termui_impl.exit_code->subprocess.Popen(['xdg-open', url]).wait()
A:click._termui_impl.is_bytes->isinstance(text, (bytes, bytearray))
A:click._termui_impl.(fd, name)->tempfile.mkstemp(prefix='editor-', suffix=self.extension)
A:click._termui_impl.timestamp->os.path.getmtime(name)
A:click._termui_impl.url->_unquote_file(url)
A:click._termui_impl.null->open('/dev/null', 'w')
A:click._termui_impl.f->open('/dev/tty')
A:click._termui_impl.fd->sys.stdin.fileno()
A:click._termui_impl.old_settings->termios.tcgetattr(fd)
A:click._termui_impl.ch->ch.decode(get_best_encoding(sys.stdin), 'replace').decode(get_best_encoding(sys.stdin), 'replace')
click._termui_impl.Editor(self,editor=None,env=None,require_save=True,extension='.txt')
click._termui_impl.Editor.__init__(self,editor=None,env=None,require_save=True,extension='.txt')
click._termui_impl.Editor.edit(self,text)
click._termui_impl.Editor.edit_file(self,filename)
click._termui_impl.Editor.get_editor(self)
click._termui_impl.ProgressBar(self,iterable,length=None,fill_char='#',empty_char='',bar_template='%(bar)s',info_sep='',show_eta=True,show_percent=None,show_pos=False,item_show_func=None,label=None,file=None,color=None,update_min_steps=1,width=30)
click._termui_impl.ProgressBar.__enter__(self)
click._termui_impl.ProgressBar.__exit__(self,exc_type,exc_value,tb)
click._termui_impl.ProgressBar.__init__(self,iterable,length=None,fill_char='#',empty_char='',bar_template='%(bar)s',info_sep='',show_eta=True,show_percent=None,show_pos=False,item_show_func=None,label=None,file=None,color=None,update_min_steps=1,width=30)
click._termui_impl.ProgressBar.__iter__(self)
click._termui_impl.ProgressBar.__next__(self)
click._termui_impl.ProgressBar.eta(self)
click._termui_impl.ProgressBar.finish(self)
click._termui_impl.ProgressBar.format_bar(self)
click._termui_impl.ProgressBar.format_eta(self)
click._termui_impl.ProgressBar.format_pct(self)
click._termui_impl.ProgressBar.format_pos(self)
click._termui_impl.ProgressBar.format_progress_line(self)
click._termui_impl.ProgressBar.generator(self)
click._termui_impl.ProgressBar.make_step(self,n_steps)
click._termui_impl.ProgressBar.pct(self)
click._termui_impl.ProgressBar.render_finish(self)
click._termui_impl.ProgressBar.render_progress(self)
click._termui_impl.ProgressBar.time_per_iteration(self)
click._termui_impl.ProgressBar.update(self,n_steps,current_item=None)
click._termui_impl._length_hint(obj)
click._termui_impl._nullpager(stream,generator,color)
click._termui_impl._pipepager(generator,cmd,color)
click._termui_impl._tempfilepager(generator,cmd,color)
click._termui_impl._translate_ch_to_exc(ch)
click._termui_impl.open_url(url,wait=False,locate=False)
click._termui_impl.pager(generator,color=None)


----------------------------------------/home/zhang/Packages/click/click8.0.0rc1/parser.py----------------------------------------
A:click.parser._flag_needs_value->object()
A:click.parser.args->deque(args)
A:click.parser.nargs_spec->deque(nargs_spec)
A:click.parser.nargs->_fetch(nargs_spec)
A:click.parser.spos->len(rv)
A:click.parser.rv[spos]->tuple(args)
A:click.parser.rv[spos + 1:]->reversed(rv[spos + 1:])
A:click.parser.(prefix, opt)->split_opt(opt)
A:click.parser.lex->shlex.shlex(string, posix=True)
A:click.parser.self.prefixes->set()
A:click.parser.(prefix, value)->split_opt(opt)
A:click.parser.holes->sum((1 for x in value if x is None))
A:click.parser.option->self._short_opt.get(opt)
A:click.parser.state->ParsingState(args)
A:click.parser.(pargs, args)->_unpack_args(state.largs + state.rargs, [x.nargs for x in self._args])
A:click.parser.arg->ParsingState(args).rargs.pop(0)
A:click.parser.arglen->len(arg)
A:click.parser.possibilities->get_close_matches(opt, self._long_opt)
A:click.parser.value->tuple(state.rargs[:nargs])
A:click.parser.opt->normalize_opt(f'{prefix}{ch}', self.ctx)
A:click.parser.(long_opt, explicit_value)->ParsingState(args).rargs.pop(0).split('=', 1)
A:click.parser.norm_long_opt->normalize_opt(long_opt, self.ctx)
click.OptionParser(self,ctx=None)
click.OptionParser._get_value_from_state(self,option_name,option,state)
click.OptionParser._match_long_opt(self,opt,explicit_value,state)
click.OptionParser._match_short_opt(self,arg,state)
click.OptionParser._process_args_for_args(self,state)
click.OptionParser._process_args_for_options(self,state)
click.OptionParser._process_opts(self,arg,state)
click.OptionParser.add_argument(self,dest,nargs=1,obj=None)
click.OptionParser.add_option(self,opts,dest,action=None,nargs=1,const=None,obj=None)
click.OptionParser.parse_args(self,args)
click.parser.Argument(self,dest,nargs=1,obj=None)
click.parser.Argument.__init__(self,dest,nargs=1,obj=None)
click.parser.Argument.process(self,value,state)
click.parser.Option(self,opts,dest,action=None,nargs=1,const=None,obj=None)
click.parser.Option.__init__(self,opts,dest,action=None,nargs=1,const=None,obj=None)
click.parser.Option.process(self,value,state)
click.parser.Option.takes_value(self)
click.parser.OptionParser(self,ctx=None)
click.parser.OptionParser.__init__(self,ctx=None)
click.parser.OptionParser._get_value_from_state(self,option_name,option,state)
click.parser.OptionParser._match_long_opt(self,opt,explicit_value,state)
click.parser.OptionParser._match_short_opt(self,arg,state)
click.parser.OptionParser._process_args_for_args(self,state)
click.parser.OptionParser._process_args_for_options(self,state)
click.parser.OptionParser._process_opts(self,arg,state)
click.parser.OptionParser.add_argument(self,dest,nargs=1,obj=None)
click.parser.OptionParser.add_option(self,opts,dest,action=None,nargs=1,const=None,obj=None)
click.parser.OptionParser.parse_args(self,args)
click.parser.ParsingState(self,rargs)
click.parser.ParsingState.__init__(self,rargs)
click.parser._unpack_args(args,nargs_spec)
click.parser.normalize_opt(opt,ctx)
click.parser.split_arg_string(string)
click.parser.split_opt(opt)


----------------------------------------/home/zhang/Packages/click/click8.0.0rc1/core.py----------------------------------------
A:click.core._missing->object()
A:click.core.command->self.get_command(ctx, name)
A:click.core.idx->float('inf')
A:click.core.COMMANDLINE->enum.auto()
A:click.core.ENVIRONMENT->enum.auto()
A:click.core.DEFAULT->enum.auto()
A:click.core.DEFAULT_MAP->enum.auto()
A:click.core.PROMPT->enum.auto()
A:click.core.self._meta->getattr(parent, 'meta', {})
A:click.core.default_map->parent.default_map.get(info_name)
A:click.core.auto_envvar_prefix->auto_envvar_prefix.replace('-', '_').replace('-', '_')
A:click.core.self._exit_stack->ExitStack()
A:click.core.rv->batch(rv, self.nargs)
A:click.core.self.objrv->object_type()
A:click.core.value->self.prompt_for_value(ctx)
A:click.core.ctx->self.context_class(self, info_name=info_name, parent=parent, **extra)
A:click.core.kwargs[param.name]->param.get_default(ctx)
A:click.core.args->list(args)
A:click.core.prog_name->_detect_program_name()
A:click.core.sys.stdout->PacifyFlushWrapper(sys.stdout)
A:click.core.sys.stderr->PacifyFlushWrapper(sys.stderr)
A:click.core.complete_var->f'_{prog_name}_COMPLETE'.replace('-', '_').upper()
A:click.core.instruction->os.environ.get(complete_var)
A:click.core.info_dict->super().to_info_dict()
A:click.core.formatter->self.context_class(self, info_name=info_name, parent=parent, **extra).make_formatter()
A:click.core.help_option->self.get_help_option(ctx)
A:click.core.pieces->self.collect_usage_pieces(ctx)
A:click.core.all_names->set(ctx.help_option_names)
A:click.core.help_options->self.get_help_option_names(ctx)
A:click.core.parser->self.make_parser(ctx)
A:click.core.text->_('(Deprecated) {text}').format(text=text)
A:click.core.(opts, args, param_order)->self.make_parser(ctx).parse_args(args=args)
A:click.core.(value, args)->param.handle_parse_result(ctx, opts, args)
A:click.core.sub_ctx->group(*args, **kwargs)(f).make_context(cmd_name, args, parent=ctx, allow_extra_args=True, allow_interspersed_args=False)
A:click.core.commands[name]->self.get_command(ctx, name).to_info_dict(sub_ctx)
A:click.core.self._result_callbackrv->update_wrapper(function, f)
A:click.core.cmd->group(*args, **kwargs)(f)
A:click.core.help->group(*args, **kwargs)(f).get_short_help_str(limit)
A:click.core.rest->super().parse_args(ctx, args)
A:click.core.(cmd_name, cmd, args)->self.resolve_command(ctx, args)
A:click.core.cmd_name->self.context_class(self, info_name=info_name, parent=parent, **extra).token_normalize_func(cmd_name)
A:click.core.kwargs['cls']->type(self)
A:click.core.(self.name, self.opts, self.secondary_opts)->self._parse_decls(param_decls or (), expose_value)
A:click.core.self.type->IntRange(min=0)
A:click.core.c->CompletionItem(c)
A:click.core.check_default->next(_check_iter(check_default), None)
A:click.core.metavar->self.type.name.upper()
A:click.core.convert->partial(self.type, param=self, ctx=ctx)
A:click.core.(value, source)->super().consume_value(ctx, opts)
A:click.core.results->self._custom_shell_complete(ctx, self, incomplete)
A:click.core.prompt_text->self.name.replace('_', ' ').capitalize()
A:click.core.is_flag->bool(self.secondary_opts)
A:click.core.(first, second)->decl.split(split_char, 1)
A:click.core.first->first.rstrip().rstrip()
A:click.core.second->second.lstrip().lstrip()
A:click.core.name->name.replace('-', '_').lower().replace('-', '_').lower()
A:click.core.(rv, any_slashes)->join_options(opts)
A:click.core.default_value->self.get_default(ctx, call=False)
A:click.core.show_default_is_str->isinstance(self.show_default, str)
A:click.core.default_string->_('(dynamic)')
A:click.core.range_str->self.type._describe_range()
A:click.core.extra_str->';'.join(extra)
A:click.core.default->self.get_default(ctx)
A:click.core.var->self.name.upper()
click.Argument(self,param_decls,required=None,**attrs)
click.Argument._parse_decls(self,decls,expose_value)
click.Argument.add_to_parser(self,parser,ctx)
click.Argument.get_error_hint(self,ctx)
click.Argument.get_usage_pieces(self,ctx)
click.Argument.human_readable_name(self)
click.Argument.make_metavar(self)
click.BaseCommand(self,name,context_settings=None)
click.BaseCommand.__repr__(self)
click.BaseCommand._main_shell_completion(self,ctx_args,prog_name,complete_var=None)
click.BaseCommand.get_help(self,ctx)
click.BaseCommand.get_usage(self,ctx)
click.BaseCommand.invoke(self,ctx)
click.BaseCommand.main(self,args=None,prog_name=None,complete_var=None,standalone_mode=True,**extra)
click.BaseCommand.make_context(self,info_name,args,parent=None,**extra)
click.BaseCommand.parse_args(self,ctx,args)
click.BaseCommand.shell_complete(self,ctx,incomplete)
click.BaseCommand.to_info_dict(self,ctx)
click.Command(self,name,context_settings=None,callback=None,params=None,help=None,epilog=None,short_help=None,options_metavar='[OPTIONS]',add_help_option=True,no_args_is_help=False,hidden=False,deprecated=False)
click.Command.__repr__(self)
click.Command.collect_usage_pieces(self,ctx)
click.Command.format_epilog(self,ctx,formatter)
click.Command.format_help(self,ctx,formatter)
click.Command.format_help_text(self,ctx,formatter)
click.Command.format_options(self,ctx,formatter)
click.Command.format_usage(self,ctx,formatter)
click.Command.get_help(self,ctx)
click.Command.get_help_option(self,ctx)
click.Command.get_help_option_names(self,ctx)
click.Command.get_params(self,ctx)
click.Command.get_short_help_str(self,limit=45)
click.Command.get_usage(self,ctx)
click.Command.invoke(self,ctx)
click.Command.make_parser(self,ctx)
click.Command.parse_args(self,ctx,args)
click.Command.shell_complete(self,ctx,incomplete)
click.Command.to_info_dict(self,ctx)
click.CommandCollection(self,name=None,sources=None,**attrs)
click.CommandCollection.add_source(self,multi_cmd)
click.CommandCollection.get_command(self,ctx,cmd_name)
click.CommandCollection.list_commands(self,ctx)
click.Context(self,command,parent=None,info_name=None,obj=None,auto_envvar_prefix=None,default_map=None,terminal_width=None,max_content_width=None,resilient_parsing=False,allow_extra_args=None,allow_interspersed_args=None,ignore_unknown_options=None,help_option_names=None,token_normalize_func=None,color=None,show_default=None)
click.Context.__enter__(self)
click.Context.__exit__(self,exc_type,exc_value,tb)
click.Context._make_sub_context(self,command)
click.Context.abort(self)
click.Context.call_on_close(self,f)
click.Context.close(self)
click.Context.command_path(self)
click.Context.ensure_object(self,object_type)
click.Context.exit(self,code=0)
click.Context.fail(self,message)
click.Context.find_object(self,object_type)
click.Context.find_root(self)
click.Context.forward(*args,**kwargs)
click.Context.get_help(self)
click.Context.get_parameter_source(self,name)
click.Context.get_usage(self)
click.Context.invoke(*args,**kwargs)
click.Context.lookup_default(self,name,call=True)
click.Context.make_formatter(self)
click.Context.meta(self)
click.Context.scope(self,cleanup=True)
click.Context.set_parameter_source(self,name,source)
click.Context.to_info_dict(self)
click.Context.with_resource(self,context_manager)
click.Group(self,name=None,commands=None,**attrs)
click.Group.add_command(self,cmd,name=None)
click.Group.command(self,*args,**kwargs)
click.Group.get_command(self,ctx,cmd_name)
click.Group.group(self,*args,**kwargs)
click.Group.list_commands(self,ctx)
click.MultiCommand(self,name=None,invoke_without_command=False,no_args_is_help=None,subcommand_metavar=None,chain=False,result_callback=None,**attrs)
click.MultiCommand.collect_usage_pieces(self,ctx)
click.MultiCommand.format_commands(self,ctx,formatter)
click.MultiCommand.format_options(self,ctx,formatter)
click.MultiCommand.get_command(self,ctx,cmd_name)
click.MultiCommand.invoke(self,ctx)
click.MultiCommand.list_commands(self,ctx)
click.MultiCommand.parse_args(self,ctx,args)
click.MultiCommand.resolve_command(self,ctx,args)
click.MultiCommand.result_callback(self,replace=False)
click.MultiCommand.resultcallback(self,replace=False)
click.MultiCommand.shell_complete(self,ctx,incomplete)
click.MultiCommand.to_info_dict(self,ctx)
click.Option(self,param_decls=None,show_default=False,prompt=False,confirmation_prompt=False,prompt_required=True,hide_input=False,is_flag=None,flag_value=None,multiple=False,count=False,allow_from_autoenv=True,type=None,help=None,hidden=False,show_choices=True,show_envvar=False,**attrs)
click.Option._parse_decls(self,decls,expose_value)
click.Option.add_to_parser(self,parser,ctx)
click.Option.consume_value(self,ctx,opts)
click.Option.get_default(self,ctx,call=True)
click.Option.get_help_record(self,ctx)
click.Option.prompt_for_value(self,ctx)
click.Option.resolve_envvar_value(self,ctx)
click.Option.to_info_dict(self)
click.Option.value_from_envvar(self,ctx)
click.Parameter(self,param_decls=None,type=None,required=False,default=None,callback=None,nargs=None,multiple=False,metavar=None,expose_value=True,is_eager=False,envvar=None,shell_complete=None,autocompletion=None)
click.Parameter.__repr__(self)
click.Parameter.add_to_parser(self,parser,ctx)
click.Parameter.consume_value(self,ctx,opts)
click.Parameter.get_default(self,ctx,call=True)
click.Parameter.get_error_hint(self,ctx)
click.Parameter.get_help_record(self,ctx)
click.Parameter.get_usage_pieces(self,ctx)
click.Parameter.handle_parse_result(self,ctx,opts,args)
click.Parameter.human_readable_name(self)
click.Parameter.make_metavar(self)
click.Parameter.process_value(self,ctx,value)
click.Parameter.resolve_envvar_value(self,ctx)
click.Parameter.shell_complete(self,ctx,incomplete)
click.Parameter.to_info_dict(self)
click.Parameter.type_cast_value(self,ctx,value)
click.Parameter.value_from_envvar(self,ctx)
click.Parameter.value_is_missing(self,value)
click.ParameterSource(enum.Enum)
click.core.Argument(self,param_decls,required=None,**attrs)
click.core.Argument.__init__(self,param_decls,required=None,**attrs)
click.core.Argument._parse_decls(self,decls,expose_value)
click.core.Argument.add_to_parser(self,parser,ctx)
click.core.Argument.get_error_hint(self,ctx)
click.core.Argument.get_usage_pieces(self,ctx)
click.core.Argument.human_readable_name(self)
click.core.Argument.make_metavar(self)
click.core.BaseCommand(self,name,context_settings=None)
click.core.BaseCommand.__init__(self,name,context_settings=None)
click.core.BaseCommand.__repr__(self)
click.core.BaseCommand._main_shell_completion(self,ctx_args,prog_name,complete_var=None)
click.core.BaseCommand.get_help(self,ctx)
click.core.BaseCommand.get_usage(self,ctx)
click.core.BaseCommand.invoke(self,ctx)
click.core.BaseCommand.main(self,args=None,prog_name=None,complete_var=None,standalone_mode=True,**extra)
click.core.BaseCommand.make_context(self,info_name,args,parent=None,**extra)
click.core.BaseCommand.parse_args(self,ctx,args)
click.core.BaseCommand.shell_complete(self,ctx,incomplete)
click.core.BaseCommand.to_info_dict(self,ctx)
click.core.Command(self,name,context_settings=None,callback=None,params=None,help=None,epilog=None,short_help=None,options_metavar='[OPTIONS]',add_help_option=True,no_args_is_help=False,hidden=False,deprecated=False)
click.core.Command.__init__(self,name,context_settings=None,callback=None,params=None,help=None,epilog=None,short_help=None,options_metavar='[OPTIONS]',add_help_option=True,no_args_is_help=False,hidden=False,deprecated=False)
click.core.Command.__repr__(self)
click.core.Command.collect_usage_pieces(self,ctx)
click.core.Command.format_epilog(self,ctx,formatter)
click.core.Command.format_help(self,ctx,formatter)
click.core.Command.format_help_text(self,ctx,formatter)
click.core.Command.format_options(self,ctx,formatter)
click.core.Command.format_usage(self,ctx,formatter)
click.core.Command.get_help(self,ctx)
click.core.Command.get_help_option(self,ctx)
click.core.Command.get_help_option_names(self,ctx)
click.core.Command.get_params(self,ctx)
click.core.Command.get_short_help_str(self,limit=45)
click.core.Command.get_usage(self,ctx)
click.core.Command.invoke(self,ctx)
click.core.Command.make_parser(self,ctx)
click.core.Command.parse_args(self,ctx,args)
click.core.Command.shell_complete(self,ctx,incomplete)
click.core.Command.to_info_dict(self,ctx)
click.core.CommandCollection(self,name=None,sources=None,**attrs)
click.core.CommandCollection.__init__(self,name=None,sources=None,**attrs)
click.core.CommandCollection.add_source(self,multi_cmd)
click.core.CommandCollection.get_command(self,ctx,cmd_name)
click.core.CommandCollection.list_commands(self,ctx)
click.core.Context(self,command,parent=None,info_name=None,obj=None,auto_envvar_prefix=None,default_map=None,terminal_width=None,max_content_width=None,resilient_parsing=False,allow_extra_args=None,allow_interspersed_args=None,ignore_unknown_options=None,help_option_names=None,token_normalize_func=None,color=None,show_default=None)
click.core.Context.__enter__(self)
click.core.Context.__exit__(self,exc_type,exc_value,tb)
click.core.Context.__init__(self,command,parent=None,info_name=None,obj=None,auto_envvar_prefix=None,default_map=None,terminal_width=None,max_content_width=None,resilient_parsing=False,allow_extra_args=None,allow_interspersed_args=None,ignore_unknown_options=None,help_option_names=None,token_normalize_func=None,color=None,show_default=None)
click.core.Context._make_sub_context(self,command)
click.core.Context.abort(self)
click.core.Context.call_on_close(self,f)
click.core.Context.close(self)
click.core.Context.command_path(self)
click.core.Context.ensure_object(self,object_type)
click.core.Context.exit(self,code=0)
click.core.Context.fail(self,message)
click.core.Context.find_object(self,object_type)
click.core.Context.find_root(self)
click.core.Context.forward(*args,**kwargs)
click.core.Context.get_help(self)
click.core.Context.get_parameter_source(self,name)
click.core.Context.get_usage(self)
click.core.Context.invoke(*args,**kwargs)
click.core.Context.lookup_default(self,name,call=True)
click.core.Context.make_formatter(self)
click.core.Context.meta(self)
click.core.Context.scope(self,cleanup=True)
click.core.Context.set_parameter_source(self,name,source)
click.core.Context.to_info_dict(self)
click.core.Context.with_resource(self,context_manager)
click.core.Group(self,name=None,commands=None,**attrs)
click.core.Group.__init__(self,name=None,commands=None,**attrs)
click.core.Group.add_command(self,cmd,name=None)
click.core.Group.command(self,*args,**kwargs)
click.core.Group.get_command(self,ctx,cmd_name)
click.core.Group.group(self,*args,**kwargs)
click.core.Group.list_commands(self,ctx)
click.core.MultiCommand(self,name=None,invoke_without_command=False,no_args_is_help=None,subcommand_metavar=None,chain=False,result_callback=None,**attrs)
click.core.MultiCommand.__init__(self,name=None,invoke_without_command=False,no_args_is_help=None,subcommand_metavar=None,chain=False,result_callback=None,**attrs)
click.core.MultiCommand.collect_usage_pieces(self,ctx)
click.core.MultiCommand.format_commands(self,ctx,formatter)
click.core.MultiCommand.format_options(self,ctx,formatter)
click.core.MultiCommand.get_command(self,ctx,cmd_name)
click.core.MultiCommand.invoke(self,ctx)
click.core.MultiCommand.list_commands(self,ctx)
click.core.MultiCommand.parse_args(self,ctx,args)
click.core.MultiCommand.resolve_command(self,ctx,args)
click.core.MultiCommand.result_callback(self,replace=False)
click.core.MultiCommand.resultcallback(self,replace=False)
click.core.MultiCommand.shell_complete(self,ctx,incomplete)
click.core.MultiCommand.to_info_dict(self,ctx)
click.core.Option(self,param_decls=None,show_default=False,prompt=False,confirmation_prompt=False,prompt_required=True,hide_input=False,is_flag=None,flag_value=None,multiple=False,count=False,allow_from_autoenv=True,type=None,help=None,hidden=False,show_choices=True,show_envvar=False,**attrs)
click.core.Option.__init__(self,param_decls=None,show_default=False,prompt=False,confirmation_prompt=False,prompt_required=True,hide_input=False,is_flag=None,flag_value=None,multiple=False,count=False,allow_from_autoenv=True,type=None,help=None,hidden=False,show_choices=True,show_envvar=False,**attrs)
click.core.Option._parse_decls(self,decls,expose_value)
click.core.Option.add_to_parser(self,parser,ctx)
click.core.Option.consume_value(self,ctx,opts)
click.core.Option.get_default(self,ctx,call=True)
click.core.Option.get_help_record(self,ctx)
click.core.Option.prompt_for_value(self,ctx)
click.core.Option.resolve_envvar_value(self,ctx)
click.core.Option.to_info_dict(self)
click.core.Option.value_from_envvar(self,ctx)
click.core.Parameter(self,param_decls=None,type=None,required=False,default=None,callback=None,nargs=None,multiple=False,metavar=None,expose_value=True,is_eager=False,envvar=None,shell_complete=None,autocompletion=None)
click.core.Parameter.__init__(self,param_decls=None,type=None,required=False,default=None,callback=None,nargs=None,multiple=False,metavar=None,expose_value=True,is_eager=False,envvar=None,shell_complete=None,autocompletion=None)
click.core.Parameter.__repr__(self)
click.core.Parameter.add_to_parser(self,parser,ctx)
click.core.Parameter.consume_value(self,ctx,opts)
click.core.Parameter.get_default(self,ctx,call=True)
click.core.Parameter.get_error_hint(self,ctx)
click.core.Parameter.get_help_record(self,ctx)
click.core.Parameter.get_usage_pieces(self,ctx)
click.core.Parameter.handle_parse_result(self,ctx,opts,args)
click.core.Parameter.human_readable_name(self)
click.core.Parameter.make_metavar(self)
click.core.Parameter.process_value(self,ctx,value)
click.core.Parameter.resolve_envvar_value(self,ctx)
click.core.Parameter.shell_complete(self,ctx,incomplete)
click.core.Parameter.to_info_dict(self)
click.core.Parameter.type_cast_value(self,ctx,value)
click.core.Parameter.value_from_envvar(self,ctx)
click.core.Parameter.value_is_missing(self,value)
click.core.ParameterSource(enum.Enum)
click.core._check_iter(value)
click.core._check_multicommand(base_command,cmd_name,cmd,register=False)
click.core._complete_visible_commands(ctx,incomplete)
click.core._fast_exit(code)
click.core.augment_usage_errors(ctx,param=None)
click.core.batch(iterable,batch_size)
click.core.iter_params_for_processing(invocation_order,declaration_order)


----------------------------------------/home/zhang/Packages/click/click8.0.0rc1/_unicodefun.py----------------------------------------
A:click._unicodefun.good_locales->set()
A:click._unicodefun.rv->rv.decode('ascii', 'replace').decode('ascii', 'replace')
A:click._unicodefun.locale->line.strip()
click._unicodefun._verify_python_env()


----------------------------------------/home/zhang/Packages/click/click8.0.0rc1/_compat.py----------------------------------------
A:click._compat.CYGWIN->sys.platform.startswith('cygwin')
A:click._compat._ansi_re->re.compile('\\033\\[[;?0-9]*[a-zA-Z]')
A:click._compat.encoding->get_best_encoding(stream)
A:click._compat.self._streamstream->_FixupStream(stream, force_readable, force_writable)
A:click._compat.f->_wrap_io_open(fd, mode, encoding, errors)
A:click._compat.x->getattr(self._stream, 'seekable', None)
A:click._compat.buf->getattr(stream, 'buffer', None)
A:click._compat.stream_value->getattr(stream, attr, None)
A:click._compat.binary_reader->find_binary(text_stream)
A:click._compat.reader->_find_binary_reader(sys.stdin)
A:click._compat.writer->_find_binary_writer(sys.stderr)
A:click._compat.rv->wrapper_func()
A:click._compat.msg->msg.decode('utf-8', 'replace').decode('utf-8', 'replace')
A:click._compat.tmp_filename->os.path.join(os.path.dirname(filename), f'.__atomic-write{random.randrange(1 << 32):08x}')
A:click._compat.fd->os.open(tmp_filename, flags, 438 if perm is None else perm)
A:click._compat.cached->_ansi_stream_wrappers.get(stream)
A:click._compat.strip->should_strip_ansi(stream, color)
A:click._compat.ansi_wrapper->colorama.AnsiToWin32(stream, strip=strip)
A:click._compat.cache->WeakKeyDictionary()
A:click._compat.stream->src_func()
A:click._compat._default_text_stdin->_make_cached_stream_func(lambda : sys.stdin, get_text_stdin)
A:click._compat._default_text_stdout->_make_cached_stream_func(lambda : sys.stdout, get_text_stdout)
A:click._compat._default_text_stderr->_make_cached_stream_func(lambda : sys.stderr, get_text_stderr)
click._compat._AtomicFile(self,f,tmp_filename,real_filename)
click._compat._AtomicFile.__enter__(self)
click._compat._AtomicFile.__exit__(self,exc_type,exc_value,tb)
click._compat._AtomicFile.__getattr__(self,name)
click._compat._AtomicFile.__init__(self,f,tmp_filename,real_filename)
click._compat._AtomicFile.__repr__(self)
click._compat._AtomicFile.close(self,delete=False)
click._compat._AtomicFile.name(self)
click._compat._FixupStream(self,stream,force_readable=False,force_writable=False)
click._compat._FixupStream.__getattr__(self,name)
click._compat._FixupStream.__init__(self,stream,force_readable=False,force_writable=False)
click._compat._FixupStream.read1(self,size)
click._compat._FixupStream.readable(self)
click._compat._FixupStream.seekable(self)
click._compat._FixupStream.writable(self)
click._compat._NonClosingTextIOWrapper(self,stream,encoding,errors,force_readable=False,force_writable=False,**extra)
click._compat._NonClosingTextIOWrapper.__del__(self)
click._compat._NonClosingTextIOWrapper.__init__(self,stream,encoding,errors,force_readable=False,force_writable=False,**extra)
click._compat._NonClosingTextIOWrapper.isatty(self)
click._compat._find_binary_reader(stream)
click._compat._find_binary_writer(stream)
click._compat._force_correct_text_reader(text_reader,encoding,errors,force_readable=False)
click._compat._force_correct_text_stream(text_stream,encoding,errors,is_binary,find_binary,force_readable=False,force_writable=False)
click._compat._force_correct_text_writer(text_writer,encoding,errors,force_writable=False)
click._compat._is_binary_reader(stream,default=False)
click._compat._is_binary_writer(stream,default=False)
click._compat._is_compat_stream_attr(stream,attr,value)
click._compat._is_compatible_text_stream(stream,encoding,errors)
click._compat._is_jupyter_kernel_output(stream)
click._compat._make_cached_stream_func(src_func,wrapper_func)
click._compat._make_text_stream(stream,encoding,errors,force_readable=False,force_writable=False)
click._compat._stream_is_misconfigured(stream)
click._compat._wrap_io_open(file,mode,encoding,errors)
click._compat.get_best_encoding(stream)
click._compat.get_binary_stderr()
click._compat.get_binary_stdin()
click._compat.get_binary_stdout()
click._compat.get_filesystem_encoding()
click._compat.get_strerror(e,default=None)
click._compat.get_text_stderr(encoding=None,errors=None)
click._compat.get_text_stdin(encoding=None,errors=None)
click._compat.get_text_stdout(encoding=None,errors=None)
click._compat.is_ascii_encoding(encoding)
click._compat.is_bytes(x)
click._compat.isatty(stream)
click._compat.open_stream(filename,mode='r',encoding=None,errors='strict',atomic=False)
click._compat.should_strip_ansi(stream=None,color=None)
click._compat.strip_ansi(value)
click._compat.term_len(x)


----------------------------------------/home/zhang/Packages/click/click8.0.0rc1/shell_completion.py----------------------------------------
A:click.shell_completion.(shell, _, instruction)->instruction.partition('_')
A:click.shell_completion.comp_cls->get_completion_class(shell)
A:click.shell_completion.comp->comp_cls(cli, ctx_args, prog_name, complete_var)
A:click.shell_completion.safe_name->re.sub('\\W*', '', self.prog_name.replace('-', '_'), re.ASCII)
A:click.shell_completion.ctx->cmd.make_context(name, args, parent=ctx, resilient_parsing=True)
A:click.shell_completion.(obj, incomplete)->_resolve_incomplete(ctx, args, incomplete)
A:click.shell_completion.(args, incomplete)->self.get_completion_args()
A:click.shell_completion.completions->self.get_completions(args, incomplete)
A:click.shell_completion.output->subprocess.run(['bash', '--version'], stdout=subprocess.PIPE)
A:click.shell_completion.match->re.search('version (\\d)\\.(\\d)\\.\\d', output.stdout.decode())
A:click.shell_completion.(major, minor)->re.search('version (\\d)\\.(\\d)\\.\\d', output.stdout.decode()).groups()
A:click.shell_completion.cwords->split_arg_string(os.environ['COMP_WORDS'])
A:click.shell_completion.cword->int(os.environ['COMP_CWORD'])
A:click.shell_completion.(name, cmd, args)->cmd.make_context(name, args, parent=ctx, resilient_parsing=True).command.resolve_command(ctx, args)
A:click.shell_completion.sub_ctx->cmd.make_context(name, args, parent=ctx, allow_extra_args=True, allow_interspersed_args=False, resilient_parsing=True)
A:click.shell_completion.(name, _, incomplete)->incomplete.partition('=')
A:click.shell_completion.params->cmd.make_context(name, args, parent=ctx, resilient_parsing=True).command.get_params(ctx)
click.shell_completion.BashComplete(ShellComplete)
click.shell_completion.BashComplete._check_version(self)
click.shell_completion.BashComplete.format_completion(self,item:CompletionItem)->str
click.shell_completion.BashComplete.get_completion_args(self)
click.shell_completion.BashComplete.source(self)
click.shell_completion.CompletionItem(self,value,type='plain',help=None,**kwargs)
click.shell_completion.CompletionItem.__getattr__(self,name)
click.shell_completion.CompletionItem.__init__(self,value,type='plain',help=None,**kwargs)
click.shell_completion.FishComplete(ShellComplete)
click.shell_completion.FishComplete.format_completion(self,item:CompletionItem)->str
click.shell_completion.FishComplete.get_completion_args(self)
click.shell_completion.ShellComplete(self,cli,ctx_args,prog_name,complete_var)
click.shell_completion.ShellComplete.__init__(self,cli,ctx_args,prog_name,complete_var)
click.shell_completion.ShellComplete.complete(self)
click.shell_completion.ShellComplete.format_completion(self,item)
click.shell_completion.ShellComplete.func_name(self)
click.shell_completion.ShellComplete.get_completion_args(self)
click.shell_completion.ShellComplete.get_completions(self,args,incomplete)
click.shell_completion.ShellComplete.source(self)
click.shell_completion.ShellComplete.source_vars(self)
click.shell_completion.ZshComplete(ShellComplete)
click.shell_completion.ZshComplete.format_completion(self,item:CompletionItem)->str
click.shell_completion.ZshComplete.get_completion_args(self)
click.shell_completion._is_incomplete_argument(ctx,param)
click.shell_completion._is_incomplete_option(args,param)
click.shell_completion._resolve_context(cli,ctx_args,prog_name,args)
click.shell_completion._resolve_incomplete(ctx,args,incomplete)
click.shell_completion._start_of_option(value)
click.shell_completion.add_completion_class(cls,name=None)
click.shell_completion.get_completion_class(shell)
click.shell_completion.shell_complete(cli,ctx_args,prog_name,complete_var,instruction)


----------------------------------------/home/zhang/Packages/click/click8.0.0rc1/formatting.py----------------------------------------
A:click.formatting.widths[idx]->max(widths.get(idx, 0), term_len(col))
A:click.formatting.row->tuple(row)
A:click.formatting.text->text.expandtabs().expandtabs()
A:click.formatting.wrapper->TextWrapper(width, initial_indent=initial_indent, subsequent_indent=subsequent_indent, replace_whitespace=False)
A:click.formatting.orig_len->term_len(line)
A:click.formatting.line->line.lstrip().lstrip()
A:click.formatting.width->max(min(shutil.get_terminal_size().columns, max_width) - 2, 50)
A:click.formatting.text_width->max(self.width - first_col - 2, 10)
A:click.formatting.rows->list(rows)
A:click.formatting.widths->measure_table(rows)
A:click.formatting.wrapped_text->wrap_text(second, text_width, preserve_paragraphs=True)
A:click.formatting.lines->wrap_text(second, text_width, preserve_paragraphs=True).splitlines()
A:click.formatting.rv->', '.join((x[1] for x in rv))
click.HelpFormatter(self,indent_increment=2,width=None,max_width=None)
click.HelpFormatter.dedent(self)
click.HelpFormatter.getvalue(self)
click.HelpFormatter.indent(self)
click.HelpFormatter.indentation(self)
click.HelpFormatter.section(self,name)
click.HelpFormatter.write(self,string)
click.HelpFormatter.write_dl(self,rows,col_max=30,col_spacing=2)
click.HelpFormatter.write_heading(self,heading)
click.HelpFormatter.write_paragraph(self)
click.HelpFormatter.write_text(self,text)
click.HelpFormatter.write_usage(self,prog,args='',prefix=None)
click.formatting.HelpFormatter(self,indent_increment=2,width=None,max_width=None)
click.formatting.HelpFormatter.__init__(self,indent_increment=2,width=None,max_width=None)
click.formatting.HelpFormatter.dedent(self)
click.formatting.HelpFormatter.getvalue(self)
click.formatting.HelpFormatter.indent(self)
click.formatting.HelpFormatter.indentation(self)
click.formatting.HelpFormatter.section(self,name)
click.formatting.HelpFormatter.write(self,string)
click.formatting.HelpFormatter.write_dl(self,rows,col_max=30,col_spacing=2)
click.formatting.HelpFormatter.write_heading(self,heading)
click.formatting.HelpFormatter.write_paragraph(self)
click.formatting.HelpFormatter.write_text(self,text)
click.formatting.HelpFormatter.write_usage(self,prog,args='',prefix=None)
click.formatting.iter_rows(rows,col_count)
click.formatting.join_options(options)
click.formatting.measure_table(rows)
click.formatting.wrap_text(text,width=78,initial_indent='',subsequent_indent='',preserve_paragraphs=False)
click.wrap_text(text,width=78,initial_indent='',subsequent_indent='',preserve_paragraphs=False)


----------------------------------------/home/zhang/Packages/click/click8.0.0rc1/exceptions.py----------------------------------------
A:click.exceptions.file->get_text_stderr()
A:click.exceptions.hint->_('unknown error')
A:click.exceptions.param_hint->_join_param_hints(param_hint)
A:click.exceptions.msg_extra->self.param.type.get_missing_message(self.param)
A:click.exceptions.missing->_('Missing {param_type}').format(param_type=param_type)
A:click.exceptions.message->_('No such option: {name}').format(name=option_name)
A:click.exceptions.possibility_str->', '.join(sorted(self.possibilities))
A:click.exceptions.suggest->ngettext('Did you mean {possibility}?', '(Possible options: {possibilities})', len(self.possibilities)).format(possibility=possibility_str, possibilities=possibility_str)
A:click.exceptions.self.ui_filename->os.fsdecode(filename)
click.Abort(RuntimeError)
click.BadArgumentUsage(UsageError)
click.BadOptionUsage(self,option_name,message,ctx=None)
click.BadParameter(self,message,ctx=None,param=None,param_hint=None)
click.BadParameter.format_message(self)
click.ClickException(self,message)
click.ClickException.__str__(self)
click.ClickException.format_message(self)
click.ClickException.show(self,file=None)
click.FileError(self,filename,hint=None)
click.FileError.format_message(self)
click.MissingParameter(self,message=None,ctx=None,param=None,param_hint=None,param_type=None)
click.MissingParameter.__str__(self)
click.MissingParameter.format_message(self)
click.NoSuchOption(self,option_name,message=None,possibilities=None,ctx=None)
click.NoSuchOption.format_message(self)
click.UsageError(self,message,ctx=None)
click.UsageError.show(self,file=None)
click.exceptions.Abort(RuntimeError)
click.exceptions.BadArgumentUsage(UsageError)
click.exceptions.BadOptionUsage(self,option_name,message,ctx=None)
click.exceptions.BadOptionUsage.__init__(self,option_name,message,ctx=None)
click.exceptions.BadParameter(self,message,ctx=None,param=None,param_hint=None)
click.exceptions.BadParameter.__init__(self,message,ctx=None,param=None,param_hint=None)
click.exceptions.BadParameter.format_message(self)
click.exceptions.ClickException(self,message)
click.exceptions.ClickException.__init__(self,message)
click.exceptions.ClickException.__str__(self)
click.exceptions.ClickException.format_message(self)
click.exceptions.ClickException.show(self,file=None)
click.exceptions.Exit(self,code=0)
click.exceptions.Exit.__init__(self,code=0)
click.exceptions.FileError(self,filename,hint=None)
click.exceptions.FileError.__init__(self,filename,hint=None)
click.exceptions.FileError.format_message(self)
click.exceptions.MissingParameter(self,message=None,ctx=None,param=None,param_hint=None,param_type=None)
click.exceptions.MissingParameter.__init__(self,message=None,ctx=None,param=None,param_hint=None,param_type=None)
click.exceptions.MissingParameter.__str__(self)
click.exceptions.MissingParameter.format_message(self)
click.exceptions.NoSuchOption(self,option_name,message=None,possibilities=None,ctx=None)
click.exceptions.NoSuchOption.__init__(self,option_name,message=None,possibilities=None,ctx=None)
click.exceptions.NoSuchOption.format_message(self)
click.exceptions.UsageError(self,message,ctx=None)
click.exceptions.UsageError.__init__(self,message,ctx=None)
click.exceptions.UsageError.show(self,file=None)
click.exceptions._join_param_hints(param_hint)


----------------------------------------/home/zhang/Packages/click/click8.0.0rc1/_textwrap.py----------------------------------------
A:click._textwrap.space_left->max(width - cur_len, 1)
click._textwrap.TextWrapper(textwrap.TextWrapper)
click._textwrap.TextWrapper._handle_long_word(self,reversed_chunks,cur_line,cur_len,width)
click._textwrap.TextWrapper.extra_indent(self,indent)
click._textwrap.TextWrapper.indent_only(self,text)


----------------------------------------/home/zhang/Packages/click/click8.0.0rc1/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/click/click8.0.0rc1/decorators.py----------------------------------------
A:click.decorators.F->typing.TypeVar('F', bound=t.Callable[..., t.Any])
A:click.decorators.ctx->get_current_context()
A:click.decorators.obj->get_current_context().find_object(object_type)
A:click.decorators.help->inspect.cleandoc(help)
A:click.decorators.cmd->_make_command(f, name, attrs, cls)
A:click.decorators.ArgumentClass->attrs.pop('cls', Argument)
A:click.decorators.option_attrs->attrs.copy()
A:click.decorators.option_attrs['help']->inspect.cleandoc(option_attrs['help'])
A:click.decorators.OptionClass->attrs.copy().pop('cls', Option)
A:click.decorators.message->_('%(prog)s, version %(version)s')
A:click.decorators.frame->inspect.currentframe()
A:click.decorators.package_name->f_globals.get('__package__')
A:click.decorators.version->importlib_metadata.version(package_name)
click.argument(*param_decls,**attrs)
click.command(name=None,cls=None,**attrs)
click.confirmation_option(*param_decls,**kwargs)
click.decorators._make_command(f,name,attrs,cls)
click.decorators._param_memo(f,param)
click.decorators.argument(*param_decls,**attrs)
click.decorators.command(name=None,cls=None,**attrs)
click.decorators.confirmation_option(*param_decls,**kwargs)
click.decorators.group(name=None,**attrs)
click.decorators.help_option(*param_decls,**kwargs)
click.decorators.make_pass_decorator(object_type:t.Type,ensure:bool=False)->'t.Callable[[F], F]'
click.decorators.option(*param_decls,**attrs)
click.decorators.pass_context(f:'F')->'F'
click.decorators.pass_meta_key(key:str,*,doc_description:t.Optional[str]=None)->'t.Callable[[F], F]'
click.decorators.pass_obj(f:'F')->'F'
click.decorators.password_option(*param_decls,**kwargs)
click.decorators.version_option(version=None,*param_decls,package_name=None,prog_name=None,message=None,**kwargs)
click.group(name=None,**attrs)
click.help_option(*param_decls,**kwargs)
click.make_pass_decorator(object_type:t.Type,ensure:bool=False)->'t.Callable[[F], F]'
click.option(*param_decls,**attrs)
click.pass_context(f:'F')->'F'
click.pass_obj(f:'F')->'F'
click.password_option(*param_decls,**kwargs)
click.version_option(version=None,*param_decls,package_name=None,prog_name=None,message=None,**kwargs)


----------------------------------------/home/zhang/Packages/click/click8.0.0rc1/termui.py----------------------------------------
A:click.termui.value_proc->convert_type(type, default)
A:click.termui.prompt->_build_prompt(text, prompt_suffix, show_default, 'y/n' if default is None else 'Y/n' if default else 'y/N')
A:click.termui.confirmation_prompt->_build_prompt(confirmation_prompt, prompt_suffix)
A:click.termui.value->visible_prompt_func('').lower().strip()
A:click.termui.result->value_proc(value)
A:click.termui.value2->prompt_func(confirmation_prompt)
A:click.termui.color->resolve_color_default(color)
A:click.termui.i->iter(text_or_generator)
A:click.termui.text->str(text)
A:click.termui.message->style(message, **styles)
A:click.termui.editor->Editor(editor=editor, env=env, require_save=require_save, extension=extension)
A:click.termui.info->_('Press any key to continue...')
click.clear()
click.confirm(text,default=False,abort=False,prompt_suffix=':',show_default=True,err=False)
click.echo_via_pager(text_or_generator,color=None)
click.edit(text=None,editor=None,env=None,require_save=True,extension='.txt',filename=None)
click.get_terminal_size()
click.getchar(echo=False)
click.launch(url,wait=False,locate=False)
click.pause(info=None,err=False)
click.progressbar(iterable=None,length=None,label=None,show_eta=True,show_percent=None,show_pos=False,item_show_func=None,fill_char='#',empty_char='-',bar_template='%(label)s[%(bar)s]%(info)s',info_sep='',width=36,file=None,color=None,update_min_steps=1)
click.prompt(text,default=None,hide_input=False,confirmation_prompt=False,type=None,value_proc=None,prompt_suffix=':',show_default=True,err=False,show_choices=True)
click.secho(message=None,file=None,nl=True,err=False,color=None,**styles)
click.style(text,fg=None,bg=None,bold=None,dim=None,underline=None,overline=None,italic=None,blink=None,reverse=None,strikethrough=None,reset=True)
click.termui._build_prompt(text,suffix,show_default=False,default=None,show_choices=True,type=None)
click.termui._format_default(default)
click.termui._interpret_color(color,offset=0)
click.termui.clear()
click.termui.confirm(text,default=False,abort=False,prompt_suffix=':',show_default=True,err=False)
click.termui.echo_via_pager(text_or_generator,color=None)
click.termui.edit(text=None,editor=None,env=None,require_save=True,extension='.txt',filename=None)
click.termui.get_terminal_size()
click.termui.getchar(echo=False)
click.termui.hidden_prompt_func(prompt)
click.termui.launch(url,wait=False,locate=False)
click.termui.pause(info=None,err=False)
click.termui.progressbar(iterable=None,length=None,label=None,show_eta=True,show_percent=None,show_pos=False,item_show_func=None,fill_char='#',empty_char='-',bar_template='%(label)s[%(bar)s]%(info)s',info_sep='',width=36,file=None,color=None,update_min_steps=1)
click.termui.prompt(text,default=None,hide_input=False,confirmation_prompt=False,type=None,value_proc=None,prompt_suffix=':',show_default=True,err=False,show_choices=True)
click.termui.raw_terminal()
click.termui.secho(message=None,file=None,nl=True,err=False,color=None,**styles)
click.termui.style(text,fg=None,bg=None,bold=None,dim=None,underline=None,overline=None,italic=None,blink=None,reverse=None,strikethrough=None,reset=True)
click.termui.unstyle(text)
click.unstyle(text)

