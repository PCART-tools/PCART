
----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/__init__.py----------------------------------------
A:xgboost.__init__.VERSION_FILE->os.path.join(os.path.dirname(__file__), 'VERSION')
A:xgboost.__init__.__version__->f.read().strip()


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/core.py----------------------------------------
A:xgboost.core.CallbackEnv->collections.namedtuple('XGBoostCallbackEnv', ['model', 'cvfolds', 'iteration', 'begin_iteration', 'end_iteration', 'rank', 'evaluation_result_list'])
A:xgboost.core.pointers->(ctypes.c_char_p * len(data))()
A:xgboost.core.lib_path->find_lib_path()
A:xgboost.core.lib->ctypes.cdll.LoadLibrary(lib_path[0])
A:xgboost.core._LIB->_load_lib()
A:xgboost.core.res->from_cstr_to_pystr(sarr, length)
A:xgboost.core.rptr->(ctypes.c_char * length).from_buffer(res)
A:xgboost.core.feature_names->list(feature_names)
A:xgboost.core.data->numpy.array(data, copy=False, dtype=np.float32)
A:xgboost.core.label->_maybe_pandas_label(label)
A:xgboost.core.(data, feature_names, feature_types)->_maybe_pandas_data(data, feature_names, feature_types)
A:xgboost.core.self.handle->ctypes.c_void_p()
A:xgboost.core.csr->scipy.sparse.csr_matrix(data)
A:xgboost.core.length->c_bst_ulong()
A:xgboost.core.ret->self.get_dump(fmap, with_stats)
A:xgboost.core.c_data->numpy.array(data, copy=False, dtype=np.float32).ctypes.data_as(ctypes.POINTER(ctypes.c_float))
A:xgboost.core.res.handle->ctypes.c_void_p()
A:xgboost.core.feature_types->list(feature_types)
A:xgboost.core.dmats->c_array(ctypes.c_void_p, [d[0].handle for d in evals])
A:xgboost.core.this->self.__dict__.copy()
A:xgboost.core.raw->self.save_raw()
A:xgboost.core.handle->ctypes.c_void_p()
A:xgboost.core.ptr->(ctypes.c_char * len(buf)).from_buffer(buf)
A:xgboost.core.version->ctypes.c_int()
A:xgboost.core.success->ctypes.c_int()
A:xgboost.core.sarr->ctypes.POINTER(ctypes.c_char_p)()
A:xgboost.core.attr_names->from_cstr_to_pystr(sarr, length)
A:xgboost.core.value->c_str(str(value))
A:xgboost.core.params->params.items().items()
A:xgboost.core.pred->self.predict(dtrain)
A:xgboost.core.(grad, hess)->fobj(pred, dtrain)
A:xgboost.core.evnames->c_array(ctypes.c_char_p, [c_str(d[1]) for d in evals])
A:xgboost.core.msg->ctypes.c_char_p()
A:xgboost.core.feval_ret->feval(self.predict(dmat), dmat)
A:xgboost.core.preds->preds.reshape(nrow, chunk_size).reshape(nrow, chunk_size)
A:xgboost.core.nrow->numpy.array(data, copy=False, dtype=np.float32).num_row()
A:xgboost.core.chunk_size->int(preds.size / nrow)
A:xgboost.core.ngroup->int(chunk_size / (data.num_col() + 1))
A:xgboost.core.cptr->ctypes.POINTER(ctypes.c_char)()
A:xgboost.core.fout->open(fout, 'w')
A:xgboost.core.flen->len(self.feature_names)
A:xgboost.core.fname->from_pystr_to_cstr(self.feature_names)
A:xgboost.core.ftype->from_pystr_to_cstr(self.feature_types)
A:xgboost.core.trees->self.get_dump(fmap, with_stats=True)
A:xgboost.core.arr->line.split('[')
A:xgboost.core.fid->arr[1].split(']')
A:xgboost.core.g->float(fid[1].split(importance_type)[1].split(',')[0])
A:xgboost.core.xgdump->self.get_dump(fmap=fmap)
A:xgboost.core.regexp->re.compile('\\[{0}<([\\d.Ee+-]+)\\]'.format(feature))
A:xgboost.core.m->re.findall(regexp, xgdump[i])
A:xgboost.core.n_unique->len(np.unique(values))
A:xgboost.core.bins->max(min(n_unique, bins) if bins is not None else n_unique, 1)
A:xgboost.core.nph->numpy.column_stack((nph[1][1:], nph[0]))
xgboost.Booster(self,params=None,cache=(),model_file=None)
xgboost.Booster.__copy__(self)
xgboost.Booster.__deepcopy__(self,_)
xgboost.Booster.__del__(self)
xgboost.Booster.__getstate__(self)
xgboost.Booster.__setstate__(self,state)
xgboost.Booster._validate_features(self,data)
xgboost.Booster.attr(self,key)
xgboost.Booster.attributes(self)
xgboost.Booster.boost(self,dtrain,grad,hess)
xgboost.Booster.copy(self)
xgboost.Booster.dump_model(self,fout,fmap='',with_stats=False)
xgboost.Booster.eval(self,data,name='eval',iteration=0)
xgboost.Booster.eval_set(self,evals,iteration=0,feval=None)
xgboost.Booster.get_dump(self,fmap='',with_stats=False,dump_format='text')
xgboost.Booster.get_fscore(self,fmap='')
xgboost.Booster.get_score(self,fmap='',importance_type='weight')
xgboost.Booster.get_split_value_histogram(self,feature,fmap='',bins=None,as_pandas=True)
xgboost.Booster.load_model(self,fname)
xgboost.Booster.load_rabit_checkpoint(self)
xgboost.Booster.predict(self,data,output_margin=False,ntree_limit=0,pred_leaf=False,pred_contribs=False,approx_contribs=False,pred_interactions=False)
xgboost.Booster.save_model(self,fname)
xgboost.Booster.save_rabit_checkpoint(self)
xgboost.Booster.save_raw(self)
xgboost.Booster.set_attr(self,**kwargs)
xgboost.Booster.set_param(self,params,value=None)
xgboost.Booster.update(self,dtrain,iteration,fobj=None)
xgboost.DMatrix(self,data,label=None,missing=None,weight=None,silent=False,feature_names=None,feature_types=None,nthread=None)
xgboost.DMatrix.__del__(self)
xgboost.DMatrix._init_from_csc(self,csc)
xgboost.DMatrix._init_from_csr(self,csr)
xgboost.DMatrix._init_from_npy2d(self,mat,missing,nthread)
xgboost.DMatrix.feature_names(self)
xgboost.DMatrix.feature_names(self,feature_names)
xgboost.DMatrix.feature_types(self)
xgboost.DMatrix.feature_types(self,feature_types)
xgboost.DMatrix.get_base_margin(self)
xgboost.DMatrix.get_float_info(self,field)
xgboost.DMatrix.get_label(self)
xgboost.DMatrix.get_uint_info(self,field)
xgboost.DMatrix.get_weight(self)
xgboost.DMatrix.num_col(self)
xgboost.DMatrix.num_row(self)
xgboost.DMatrix.save_binary(self,fname,silent=True)
xgboost.DMatrix.set_base_margin(self,margin)
xgboost.DMatrix.set_float_info(self,field,data)
xgboost.DMatrix.set_float_info_npy2d(self,field,data)
xgboost.DMatrix.set_group(self,group)
xgboost.DMatrix.set_label(self,label)
xgboost.DMatrix.set_label_npy2d(self,label)
xgboost.DMatrix.set_uint_info(self,field,data)
xgboost.DMatrix.set_weight(self,weight)
xgboost.DMatrix.set_weight_npy2d(self,weight)
xgboost.DMatrix.slice(self,rindex)
xgboost.core.Booster(self,params=None,cache=(),model_file=None)
xgboost.core.Booster.__copy__(self)
xgboost.core.Booster.__deepcopy__(self,_)
xgboost.core.Booster.__del__(self)
xgboost.core.Booster.__getstate__(self)
xgboost.core.Booster.__init__(self,params=None,cache=(),model_file=None)
xgboost.core.Booster.__setstate__(self,state)
xgboost.core.Booster._validate_features(self,data)
xgboost.core.Booster.attr(self,key)
xgboost.core.Booster.attributes(self)
xgboost.core.Booster.boost(self,dtrain,grad,hess)
xgboost.core.Booster.copy(self)
xgboost.core.Booster.dump_model(self,fout,fmap='',with_stats=False)
xgboost.core.Booster.eval(self,data,name='eval',iteration=0)
xgboost.core.Booster.eval_set(self,evals,iteration=0,feval=None)
xgboost.core.Booster.get_dump(self,fmap='',with_stats=False,dump_format='text')
xgboost.core.Booster.get_fscore(self,fmap='')
xgboost.core.Booster.get_score(self,fmap='',importance_type='weight')
xgboost.core.Booster.get_split_value_histogram(self,feature,fmap='',bins=None,as_pandas=True)
xgboost.core.Booster.load_model(self,fname)
xgboost.core.Booster.load_rabit_checkpoint(self)
xgboost.core.Booster.predict(self,data,output_margin=False,ntree_limit=0,pred_leaf=False,pred_contribs=False,approx_contribs=False,pred_interactions=False)
xgboost.core.Booster.save_model(self,fname)
xgboost.core.Booster.save_rabit_checkpoint(self)
xgboost.core.Booster.save_raw(self)
xgboost.core.Booster.set_attr(self,**kwargs)
xgboost.core.Booster.set_param(self,params,value=None)
xgboost.core.Booster.update(self,dtrain,iteration,fobj=None)
xgboost.core.DMatrix(self,data,label=None,missing=None,weight=None,silent=False,feature_names=None,feature_types=None,nthread=None)
xgboost.core.DMatrix.__del__(self)
xgboost.core.DMatrix.__init__(self,data,label=None,missing=None,weight=None,silent=False,feature_names=None,feature_types=None,nthread=None)
xgboost.core.DMatrix._init_from_csc(self,csc)
xgboost.core.DMatrix._init_from_csr(self,csr)
xgboost.core.DMatrix._init_from_npy2d(self,mat,missing,nthread)
xgboost.core.DMatrix.feature_names(self)
xgboost.core.DMatrix.feature_names(self,feature_names)
xgboost.core.DMatrix.feature_types(self)
xgboost.core.DMatrix.feature_types(self,feature_types)
xgboost.core.DMatrix.get_base_margin(self)
xgboost.core.DMatrix.get_float_info(self,field)
xgboost.core.DMatrix.get_label(self)
xgboost.core.DMatrix.get_uint_info(self,field)
xgboost.core.DMatrix.get_weight(self)
xgboost.core.DMatrix.num_col(self)
xgboost.core.DMatrix.num_row(self)
xgboost.core.DMatrix.save_binary(self,fname,silent=True)
xgboost.core.DMatrix.set_base_margin(self,margin)
xgboost.core.DMatrix.set_float_info(self,field,data)
xgboost.core.DMatrix.set_float_info_npy2d(self,field,data)
xgboost.core.DMatrix.set_group(self,group)
xgboost.core.DMatrix.set_label(self,label)
xgboost.core.DMatrix.set_label_npy2d(self,label)
xgboost.core.DMatrix.set_uint_info(self,field,data)
xgboost.core.DMatrix.set_weight(self,weight)
xgboost.core.DMatrix.set_weight_npy2d(self,weight)
xgboost.core.DMatrix.slice(self,rindex)
xgboost.core.EarlyStopException(self,best_iteration)
xgboost.core.EarlyStopException.__init__(self,best_iteration)
xgboost.core.XGBoostError(Exception)
xgboost.core._check_call(ret)
xgboost.core._load_lib()
xgboost.core._maybe_pandas_data(data,feature_names,feature_types)
xgboost.core._maybe_pandas_label(label)
xgboost.core.c_array(ctype,values)
xgboost.core.c_str(string)
xgboost.core.ctypes2buffer(cptr,length)
xgboost.core.ctypes2numpy(cptr,length,dtype)
xgboost.core.from_cstr_to_pystr(data,length)
xgboost.core.from_pystr_to_cstr(data)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/training.py----------------------------------------
A:xgboost.training.evals->list(evals)
A:xgboost.training.params->dict(((k, v) for (k, v) in params.items()))
A:xgboost.training.bst->Booster(params, [dtrain] + [d[0] for d in evals], model_file=xgb_model)
A:xgboost.training.xgb_model->xgb_model.save_raw().save_raw()
A:xgboost.training.nboost->len(bst.get_dump())
A:xgboost.training.version->Booster(params, [dtrain] + [d[0] for d in evals], model_file=xgb_model).load_rabit_checkpoint()
A:xgboost.training.rank->rabit.get_rank()
A:xgboost.training.start_iteration->int(version / 2)
A:xgboost.training.bst_eval_set->Booster(params, [dtrain] + [d[0] for d in evals], model_file=xgb_model).eval_set(evals, i, feval)
A:xgboost.training.msg->msg.decode().decode()
A:xgboost.training.bst.best_score->float(bst.attr('best_score'))
A:xgboost.training.bst.best_iteration->int(bst.attr('best_iteration'))
A:xgboost.training.self.bst->Booster(param, [dtrain, dtest])
A:xgboost.training.idx->numpy.arange(dall.num_row())
A:xgboost.training.idset->numpy.array_split(idx, nfold)
A:xgboost.training.nfold->len(idset)
A:xgboost.training.sfk->XGBStratifiedKFold(n_splits=nfold, shuffle=True, random_state=seed)
A:xgboost.training.dtrain->dall.slice(np.concatenate([idset[i] for i in range(nfold) if k != i]))
A:xgboost.training.dtest->dall.slice(idset[k])
A:xgboost.training.(dtrain, dtest, tparam)->fpreproc(dtrain, dtest, param.copy())
A:xgboost.training.arr->line.split()
A:xgboost.training.it->it.decode().decode()
A:xgboost.training.(k, v)->it.decode().decode().split(':')
A:xgboost.training.v->numpy.array(v)
A:xgboost.training.cvfolds->mknfold(dtrain, nfold, params, seed, metrics, fpreproc, stratified, folds, shuffle)
A:xgboost.training.res->aggcv([f.eval(i, feval) for f in cvfolds])
A:xgboost.training.results->pandas.DataFrame.from_dict(results)
xgboost.cv(params,dtrain,num_boost_round=10,nfold=3,stratified=False,folds=None,metrics=(),obj=None,feval=None,maximize=False,early_stopping_rounds=None,fpreproc=None,as_pandas=True,verbose_eval=None,show_stdv=True,seed=0,callbacks=None,shuffle=True)
xgboost.train(params,dtrain,num_boost_round=10,evals=(),obj=None,feval=None,maximize=False,early_stopping_rounds=None,evals_result=None,verbose_eval=True,xgb_model=None,callbacks=None,learning_rates=None)
xgboost.training.CVPack(self,dtrain,dtest,param)
xgboost.training.CVPack.__init__(self,dtrain,dtest,param)
xgboost.training.CVPack.eval(self,iteration,feval)
xgboost.training.CVPack.update(self,iteration,fobj)
xgboost.training._train_internal(params,dtrain,num_boost_round=10,evals=(),obj=None,feval=None,xgb_model=None,callbacks=None)
xgboost.training.aggcv(rlist)
xgboost.training.cv(params,dtrain,num_boost_round=10,nfold=3,stratified=False,folds=None,metrics=(),obj=None,feval=None,maximize=False,early_stopping_rounds=None,fpreproc=None,as_pandas=True,verbose_eval=None,show_stdv=True,seed=0,callbacks=None,shuffle=True)
xgboost.training.mknfold(dall,nfold,param,seed,evals=(),fpreproc=None,stratified=False,folds=None,shuffle=True)
xgboost.training.train(params,dtrain,num_boost_round=10,evals=(),obj=None,feval=None,maximize=False,early_stopping_rounds=None,evals_result=None,verbose_eval=True,xgb_model=None,callbacks=None,learning_rates=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/sklearn.py----------------------------------------
A:xgboost.sklearn.labels->dmatrix.get_label()
A:xgboost.sklearn.state['_Booster']->Booster(model_file=bst)
A:xgboost.sklearn.params->self.get_xgb_params()
A:xgboost.sklearn.xgb_params->self.get_params()
A:xgboost.sklearn.random_state->self.get_params().pop('random_state')
A:xgboost.sklearn.n_jobs->self.get_params().pop('n_jobs')
A:xgboost.sklearn.trainDmatrix->DMatrix(X, label=y, missing=self.missing, nthread=self.n_jobs)
A:xgboost.sklearn.evals->list(zip(evals, eval_names))
A:xgboost.sklearn.obj->_objective_decorator(self.objective)
A:xgboost.sklearn.self._Booster->train(xgb_options, train_dmatrix, self.n_estimators, evals=evals, early_stopping_rounds=early_stopping_rounds, evals_result=evals_result, obj=obj, feval=feval, verbose_eval=verbose, xgb_model=None)
A:xgboost.sklearn.test_dmatrix->DMatrix(data, missing=self.missing, nthread=self.n_jobs)
A:xgboost.sklearn.b->self.get_booster()
A:xgboost.sklearn.fs->self.get_booster().get_fscore()
A:xgboost.sklearn.all_features->numpy.array(all_features, dtype=np.float32)
A:xgboost.sklearn.self.classes_->numpy.unique(y)
A:xgboost.sklearn.self.n_classes_->len(self.classes_)
A:xgboost.sklearn.xgb_options->self.get_xgb_params()
A:xgboost.sklearn.self._le->XGBLabelEncoder().fit(y)
A:xgboost.sklearn.training_labels->self._le.transform(y)
A:xgboost.sklearn.nevals->len(evals)
A:xgboost.sklearn.train_dmatrix->DMatrix(X, label=training_labels, missing=self.missing, nthread=self.n_jobs)
A:xgboost.sklearn.class_probs->self.get_booster().predict(test_dmatrix, output_margin=output_margin, ntree_limit=ntree_limit)
A:xgboost.sklearn.column_indexes->numpy.repeat(0, class_probs.shape[0])
xgboost.XGBClassifier(self,max_depth=3,learning_rate=0.1,n_estimators=100,silent=True,objective='binary:logistic',booster='gbtree',n_jobs=1,nthread=None,gamma=0,min_child_weight=1,max_delta_step=0,subsample=1,colsample_bytree=1,colsample_bylevel=1,reg_alpha=0,reg_lambda=1,scale_pos_weight=1,base_score=0.5,random_state=0,seed=None,missing=None,**kwargs)
xgboost.XGBClassifier.evals_result(self)
xgboost.XGBClassifier.fit(self,X,y,sample_weight=None,eval_set=None,eval_metric=None,early_stopping_rounds=None,verbose=True,xgb_model=None)
xgboost.XGBClassifier.predict(self,data,output_margin=False,ntree_limit=0)
xgboost.XGBClassifier.predict_proba(self,data,output_margin=False,ntree_limit=0)
xgboost.XGBModel(self,max_depth=3,learning_rate=0.1,n_estimators=100,silent=True,objective='reg:linear',booster='gbtree',n_jobs=1,nthread=None,gamma=0,min_child_weight=1,max_delta_step=0,subsample=1,colsample_bytree=1,colsample_bylevel=1,reg_alpha=0,reg_lambda=1,scale_pos_weight=1,base_score=0.5,random_state=0,seed=None,missing=None,**kwargs)
xgboost.XGBModel.__setstate__(self,state)
xgboost.XGBModel.apply(self,X,ntree_limit=0)
xgboost.XGBModel.evals_result(self)
xgboost.XGBModel.feature_importances_(self)
xgboost.XGBModel.fit(self,X,y,sample_weight=None,eval_set=None,eval_metric=None,early_stopping_rounds=None,verbose=True,xgb_model=None)
xgboost.XGBModel.get_booster(self)
xgboost.XGBModel.get_params(self,deep=False)
xgboost.XGBModel.get_xgb_params(self)
xgboost.XGBModel.predict(self,data,output_margin=False,ntree_limit=0)
xgboost.XGBRegressor(XGBModel,XGBRegressorBase)
xgboost.sklearn.XGBClassifier(self,max_depth=3,learning_rate=0.1,n_estimators=100,silent=True,objective='binary:logistic',booster='gbtree',n_jobs=1,nthread=None,gamma=0,min_child_weight=1,max_delta_step=0,subsample=1,colsample_bytree=1,colsample_bylevel=1,reg_alpha=0,reg_lambda=1,scale_pos_weight=1,base_score=0.5,random_state=0,seed=None,missing=None,**kwargs)
xgboost.sklearn.XGBClassifier.__init__(self,max_depth=3,learning_rate=0.1,n_estimators=100,silent=True,objective='binary:logistic',booster='gbtree',n_jobs=1,nthread=None,gamma=0,min_child_weight=1,max_delta_step=0,subsample=1,colsample_bytree=1,colsample_bylevel=1,reg_alpha=0,reg_lambda=1,scale_pos_weight=1,base_score=0.5,random_state=0,seed=None,missing=None,**kwargs)
xgboost.sklearn.XGBClassifier.evals_result(self)
xgboost.sklearn.XGBClassifier.fit(self,X,y,sample_weight=None,eval_set=None,eval_metric=None,early_stopping_rounds=None,verbose=True,xgb_model=None)
xgboost.sklearn.XGBClassifier.predict(self,data,output_margin=False,ntree_limit=0)
xgboost.sklearn.XGBClassifier.predict_proba(self,data,output_margin=False,ntree_limit=0)
xgboost.sklearn.XGBModel(self,max_depth=3,learning_rate=0.1,n_estimators=100,silent=True,objective='reg:linear',booster='gbtree',n_jobs=1,nthread=None,gamma=0,min_child_weight=1,max_delta_step=0,subsample=1,colsample_bytree=1,colsample_bylevel=1,reg_alpha=0,reg_lambda=1,scale_pos_weight=1,base_score=0.5,random_state=0,seed=None,missing=None,**kwargs)
xgboost.sklearn.XGBModel.__init__(self,max_depth=3,learning_rate=0.1,n_estimators=100,silent=True,objective='reg:linear',booster='gbtree',n_jobs=1,nthread=None,gamma=0,min_child_weight=1,max_delta_step=0,subsample=1,colsample_bytree=1,colsample_bylevel=1,reg_alpha=0,reg_lambda=1,scale_pos_weight=1,base_score=0.5,random_state=0,seed=None,missing=None,**kwargs)
xgboost.sklearn.XGBModel.__setstate__(self,state)
xgboost.sklearn.XGBModel.apply(self,X,ntree_limit=0)
xgboost.sklearn.XGBModel.evals_result(self)
xgboost.sklearn.XGBModel.feature_importances_(self)
xgboost.sklearn.XGBModel.fit(self,X,y,sample_weight=None,eval_set=None,eval_metric=None,early_stopping_rounds=None,verbose=True,xgb_model=None)
xgboost.sklearn.XGBModel.get_booster(self)
xgboost.sklearn.XGBModel.get_params(self,deep=False)
xgboost.sklearn.XGBModel.get_xgb_params(self)
xgboost.sklearn.XGBModel.predict(self,data,output_margin=False,ntree_limit=0)
xgboost.sklearn.XGBRegressor(XGBModel,XGBRegressorBase)
xgboost.sklearn._objective_decorator(func)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/compat.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/libpath.py----------------------------------------
A:xgboost.libpath.curr_path->os.path.dirname(os.path.abspath(os.path.expanduser(__file__)))
xgboost.libpath.XGBoostLibraryNotFound(Exception)
xgboost.libpath.find_lib_path()


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/callback.py----------------------------------------
A:xgboost.callback.msg->'\t'.join([_fmt_metric(x, show_stdv) for x in env.evaluation_result_list])
A:xgboost.callback.pos->k.index('-')
A:xgboost.callback.new_learning_rate->learning_rates(i, n)
A:xgboost.callback.context->_get_callback_context(env)
A:xgboost.callback.state['best_score']->float(bst.attr('best_score'))
A:xgboost.callback.state['best_iteration']->int(bst.attr('best_iteration'))
A:xgboost.callback.state['best_msg']->bst.attr('best_msg')
xgboost.callback._fmt_metric(value,show_stdv=True)
xgboost.callback._get_callback_context(env)
xgboost.callback.early_stop(stopping_rounds,maximize=False,verbose=True)
xgboost.callback.print_evaluation(period=1,show_stdv=True)
xgboost.callback.record_evaluation(eval_result)
xgboost.callback.reset_learning_rate(learning_rates)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/rabit.py----------------------------------------
A:xgboost.rabit.arr->(ctypes.c_char_p * len(args))()
A:xgboost.rabit.ret->core._LIB.RabitVersionNumber()
A:xgboost.rabit.msg->str(msg)
A:xgboost.rabit.is_dist->core._LIB.RabitIsDistributed()
A:xgboost.rabit.length->ctypes.c_ulong()
A:xgboost.rabit.buf->buf.copy().copy()
A:xgboost.rabit.rank->get_rank()
A:xgboost.rabit.s->compat.pickle.dumps(data, protocol=pickle.HIGHEST_PROTOCOL)
A:xgboost.rabit.length.value->len(s)
A:xgboost.rabit.dptr->(ctypes.c_char * length.value)()
A:xgboost.rabit.data->compat.pickle.loads(dptr.raw)
A:xgboost.rabit.func_ptr->ctypes.CFUNCTYPE(None, ctypes.c_void_p)
xgboost.rabit._init_rabit()
xgboost.rabit.allreduce(data,op,prepare_fun=None)
xgboost.rabit.broadcast(data,root)
xgboost.rabit.finalize()
xgboost.rabit.get_processor_name()
xgboost.rabit.get_rank()
xgboost.rabit.get_world_size()
xgboost.rabit.init(args=None)
xgboost.rabit.tracker_print(msg)
xgboost.rabit.version_number()


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/plotting.py----------------------------------------
A:xgboost.plotting.importance->booster.get_booster().get_score(importance_type=importance_type)
A:xgboost.plotting.tuples->sorted(tuples, key=lambda x: x[1])
A:xgboost.plotting.(labels, values)->zip(*tuples)
A:xgboost.plotting.(_, ax)->matplotlib.pyplot.subplots(1, 1)
A:xgboost.plotting.ylocs->numpy.arange(len(values))
A:xgboost.plotting._NODEPAT->re.compile('(\\d+):\\[(.+)\\]')
A:xgboost.plotting._LEAFPAT->re.compile('(\\d+):(leaf=.+)')
A:xgboost.plotting._EDGEPAT->re.compile('yes=(\\d+),no=(\\d+),missing=(\\d+)')
A:xgboost.plotting._EDGEPAT2->re.compile('yes=(\\d+),no=(\\d+)')
A:xgboost.plotting.match->re.compile('yes=(\\d+),no=(\\d+)').match(text)
A:xgboost.plotting.node->_parse_node(graph, text)
A:xgboost.plotting.(yes, no, missing)->re.compile('yes=(\\d+),no=(\\d+)').match(text).groups()
A:xgboost.plotting.(yes, no)->re.compile('yes=(\\d+),no=(\\d+)').match(text).groups()
A:xgboost.plotting.booster->booster.get_booster().get_booster()
A:xgboost.plotting.tree->tree.split().split()
A:xgboost.plotting.kwargs->kwargs.copy().copy()
A:xgboost.plotting.graph->Digraph(graph_attr=kwargs)
A:xgboost.plotting.g->to_graphviz(booster, fmap=fmap, num_trees=num_trees, rankdir=rankdir, **kwargs)
A:xgboost.plotting.s->BytesIO()
A:xgboost.plotting.img->matplotlib.image.imread(s)
xgboost.plot_importance(booster,ax=None,height=0.2,xlim=None,ylim=None,title='Featureimportance',xlabel='Fscore',ylabel='Features',importance_type='weight',max_num_features=None,grid=True,show_values=True,**kwargs)
xgboost.plot_tree(booster,fmap='',num_trees=0,rankdir='UT',ax=None,**kwargs)
xgboost.plotting._parse_edge(graph,node,text,yes_color='#0000FF',no_color='#FF0000')
xgboost.plotting._parse_node(graph,text)
xgboost.plotting.plot_importance(booster,ax=None,height=0.2,xlim=None,ylim=None,title='Featureimportance',xlabel='Fscore',ylabel='Features',importance_type='weight',max_num_features=None,grid=True,show_values=True,**kwargs)
xgboost.plotting.plot_tree(booster,fmap='',num_trees=0,rankdir='UT',ax=None,**kwargs)
xgboost.plotting.to_graphviz(booster,fmap='',num_trees=0,rankdir='UT',yes_color='#0000FF',no_color='#FF0000',**kwargs)
xgboost.to_graphviz(booster,fmap='',num_trees=0,rankdir='UT',yes_color='#0000FF',no_color='#FF0000',**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/python/test_early_stopping.py----------------------------------------
A:xgboost.tests.python.test_early_stopping.rng->numpy.random.RandomState(1994)
A:xgboost.tests.python.test_early_stopping.digits->load_digits(2)
A:xgboost.tests.python.test_early_stopping.(X_train, X_test, y_train, y_test)->train_test_split(X, y, random_state=0)
A:xgboost.tests.python.test_early_stopping.clf1->xgboost.XGBClassifier()
A:xgboost.tests.python.test_early_stopping.clf2->xgboost.XGBClassifier()
A:xgboost.tests.python.test_early_stopping.clf3->xgboost.XGBClassifier()
A:xgboost.tests.python.test_early_stopping.labels->dtrain.get_label()
A:xgboost.tests.python.test_early_stopping.dm->xgboost.DMatrix(X, label=y)
A:xgboost.tests.python.test_early_stopping.cv->xgboost.cv(params, dm, num_boost_round=10, nfold=10, feval=self.evalerror, maximize=True, early_stopping_rounds=1)
xgboost.tests.python.test_early_stopping.TestEarlyStopping(unittest.TestCase)
xgboost.tests.python.test_early_stopping.TestEarlyStopping.evalerror(self,preds,dtrain)
xgboost.tests.python.test_early_stopping.TestEarlyStopping.test_cv_early_stopping(self)
xgboost.tests.python.test_early_stopping.TestEarlyStopping.test_early_stopping_nonparallel(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/python/test_basic_models.py----------------------------------------
A:xgboost.tests.python.test_basic_models.dtrain->xgboost.DMatrix(dpath + 'agaricus.txt.train')
A:xgboost.tests.python.test_basic_models.dtest->xgboost.DMatrix(dpath + 'agaricus.txt.test')
A:xgboost.tests.python.test_basic_models.rng->numpy.random.RandomState(1994)
A:xgboost.tests.python.test_basic_models.bst->xgboost.train([], dm2)
A:xgboost.tests.python.test_basic_models.preds->xgboost.train([], dm2).predict(dtest)
A:xgboost.tests.python.test_basic_models.labels->xgboost.DMatrix(dpath + 'agaricus.txt.train').get_label()
A:xgboost.tests.python.test_basic_models.bst2->xgboost.train(param, dtrain, num_round, watchlist, logregobj, neg_evalerror, maximize=True)
A:xgboost.tests.python.test_basic_models.dtest2->xgboost.DMatrix('dtest.buffer')
A:xgboost.tests.python.test_basic_models.preds2->xgboost.train(param, dtrain, num_round, watchlist, logregobj, neg_evalerror, maximize=True).predict(dtest)
A:xgboost.tests.python.test_basic_models.eval_errors->list(map(float, evals_result['eval']['error']))
A:xgboost.tests.python.test_basic_models.label->xgboost.DMatrix(dpath + 'agaricus.txt.train').get_label()
A:xgboost.tests.python.test_basic_models.X->numpy.random.random((10, 3))
A:xgboost.tests.python.test_basic_models.y->numpy.random.randint(2, size=(10,))
A:xgboost.tests.python.test_basic_models.dm1->xgboost.DMatrix(X, y)
A:xgboost.tests.python.test_basic_models.dm2->xgboost.DMatrix(X, y, feature_names=('a', 'b', 'c'))
xgboost.tests.python.test_basic_models.TestModels(unittest.TestCase)
xgboost.tests.python.test_basic_models.TestModels.test_custom_objective(self)
xgboost.tests.python.test_basic_models.TestModels.test_dart(self)
xgboost.tests.python.test_basic_models.TestModels.test_eta_decay(self)
xgboost.tests.python.test_basic_models.TestModels.test_feature_names_validation(self)
xgboost.tests.python.test_basic_models.TestModels.test_fpreproc(self)
xgboost.tests.python.test_basic_models.TestModels.test_glm(self)
xgboost.tests.python.test_basic_models.TestModels.test_multi_eval_metric(self)
xgboost.tests.python.test_basic_models.TestModels.test_show_stdv(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/python/test_fast_hist.py----------------------------------------
A:xgboost.tests.python.test_fast_hist.rng->numpy.random.RandomState(1994)
A:xgboost.tests.python.test_fast_hist.ag_dtrain->xgboost.DMatrix(dpath + 'agaricus.txt.train')
A:xgboost.tests.python.test_fast_hist.ag_dtest->xgboost.DMatrix(dpath + 'agaricus.txt.test')
A:xgboost.tests.python.test_fast_hist.digits->load_digits(2)
A:xgboost.tests.python.test_fast_hist.(X_train, X_test, y_train, y_test)->train_test_split(X, y, random_state=0)
A:xgboost.tests.python.test_fast_hist.dtrain->xgboost.DMatrix(X_train, y_train)
A:xgboost.tests.python.test_fast_hist.dtest->xgboost.DMatrix(X_test, y_test)
A:xgboost.tests.python.test_fast_hist.(X2, y2)->load_svmlight_file(dpath + 'agaricus.txt.train')
A:xgboost.tests.python.test_fast_hist.X2->X2.toarray().toarray()
A:xgboost.tests.python.test_fast_hist.dtrain2->xgboost.DMatrix(X2, label=y2)
A:xgboost.tests.python.test_fast_hist.dtrain3->xgboost.DMatrix(X2, label=y2)
A:xgboost.tests.python.test_fast_hist.dtrain4->xgboost.DMatrix(X2, label=y2)
xgboost.tests.python.test_fast_hist.TestFastHist(unittest.TestCase)
xgboost.tests.python.test_fast_hist.TestFastHist.non_decreasing(self,L)
xgboost.tests.python.test_fast_hist.TestFastHist.test_fast_hist(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/python/test_with_sklearn.py----------------------------------------
A:xgboost.tests.python.test_with_sklearn.rng->numpy.random.RandomState(1994)
A:xgboost.tests.python.test_with_sklearn.digits->load_digits(3)
A:xgboost.tests.python.test_with_sklearn.kf->KFold(y.shape[0], n_folds=2, shuffle=True, random_state=rng)
A:xgboost.tests.python.test_with_sklearn.xgb_model->xgboost.XGBClassifier(objective=dummy_objective)
A:xgboost.tests.python.test_with_sklearn.preds->xgboost.XGBClassifier().predict(te_d)
A:xgboost.tests.python.test_with_sklearn.iris->load_iris()
A:xgboost.tests.python.test_with_sklearn.preds2->xgboost.XGBClassifier(objective=dummy_objective).predict(X[test_index], output_margin=True, ntree_limit=3)
A:xgboost.tests.python.test_with_sklearn.preds3->xgboost.XGBClassifier(objective=dummy_objective).predict(X[test_index], output_margin=True, ntree_limit=0)
A:xgboost.tests.python.test_with_sklearn.preds4->xgboost.XGBClassifier(objective=dummy_objective).predict(X[test_index], output_margin=False, ntree_limit=3)
A:xgboost.tests.python.test_with_sklearn.exp->numpy.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00833333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.025, 0.14166667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00833333, 0.25833333, 0.0, 0.0, 0.0, 0.0, 0.03333334, 0.03333334, 0.0, 0.32499999, 0.0, 0.0, 0.0, 0.0, 0.05, 0.06666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04166667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00833333, 0.0, 0.0, 0.0, 0.0, 0.0], dtype=np.float32)
A:xgboost.tests.python.test_with_sklearn.y->pandas.Series(digits['target'])
A:xgboost.tests.python.test_with_sklearn.X->pandas.DataFrame(digits['data'])
A:xgboost.tests.python.test_with_sklearn.boston->load_boston()
A:xgboost.tests.python.test_with_sklearn.clf->xgboost.XGBClassifier(n_jobs=2, nthread=3)
A:xgboost.tests.python.test_with_sklearn.hess->numpy.ones(len(y_true))
A:xgboost.tests.python.test_with_sklearn.(tr_d, te_d, tr_l, te_l)->train_test_split(iris.data, iris.target, train_size=120)
A:xgboost.tests.python.test_with_sklearn.classifier->xgboost.XGBClassifier()
A:xgboost.tests.python.test_with_sklearn.ax->xgboost.plot_tree(classifier, num_trees=0)
A:xgboost.tests.python.test_with_sklearn.g->xgboost.to_graphviz(classifier, num_trees=0)
A:xgboost.tests.python.test_with_sklearn.dm->xgboost.DMatrix(X, label=y)
A:xgboost.tests.python.test_with_sklearn.skf->StratifiedKFold(n_splits=nfolds, shuffle=True, random_state=seed)
A:xgboost.tests.python.test_with_sklearn.cv1->xgboost.cv(params, dm, num_boost_round=10, nfold=nfolds, seed=seed)
A:xgboost.tests.python.test_with_sklearn.cv2->xgboost.cv(params, dm, num_boost_round=10, nfold=nfolds, folds=skf, seed=seed)
A:xgboost.tests.python.test_with_sklearn.cv3->xgboost.cv(params, dm, num_boost_round=10, nfold=nfolds, stratified=True, seed=seed)
A:xgboost.tests.python.test_with_sklearn.digits_2class->load_digits(2)
A:xgboost.tests.python.test_with_sklearn.gbdt->xgboost.train(params, dm, num_boost_round=10)
xgboost.tests.python.test_with_sklearn.test_binary_classification()
xgboost.tests.python.test_with_sklearn.test_boston_housing_regression()
xgboost.tests.python.test_with_sklearn.test_classification_with_custom_objective()
xgboost.tests.python.test_with_sklearn.test_feature_importances()
xgboost.tests.python.test_with_sklearn.test_kwargs()
xgboost.tests.python.test_with_sklearn.test_kwargs_error()
xgboost.tests.python.test_with_sklearn.test_multiclass_classification()
xgboost.tests.python.test_with_sklearn.test_parameter_tuning()
xgboost.tests.python.test_with_sklearn.test_regression_with_custom_objective()
xgboost.tests.python.test_with_sklearn.test_sklearn_api()
xgboost.tests.python.test_with_sklearn.test_sklearn_api_gblinear()
xgboost.tests.python.test_with_sklearn.test_sklearn_clone()
xgboost.tests.python.test_with_sklearn.test_sklearn_n_jobs()
xgboost.tests.python.test_with_sklearn.test_sklearn_nfolds_cv()
xgboost.tests.python.test_with_sklearn.test_sklearn_plotting()
xgboost.tests.python.test_with_sklearn.test_sklearn_random_state()
xgboost.tests.python.test_with_sklearn.test_split_value_histograms()


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/python/testing.py----------------------------------------
xgboost.tests.python.testing._skip_if_no_matplotlib()
xgboost.tests.python.testing._skip_if_no_pandas()
xgboost.tests.python.testing._skip_if_no_sklearn()


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/python/test_plotting.py----------------------------------------
A:xgboost.tests.python.test_plotting.rng->numpy.random.RandomState(1994)
A:xgboost.tests.python.test_plotting.bst2->xgboost.Booster(model_file='xgb.model')
A:xgboost.tests.python.test_plotting.ax->xgboost.plot_importance(bst, xlim=(0, 5), ylim=(10, 71))
A:xgboost.tests.python.test_plotting.g->xgboost.to_graphviz(bst2, num_trees=0)
A:xgboost.tests.python.test_plotting.dm->xgboost.DMatrix(np.random.randn(100, 100), label=[0, 1] * 50)
A:xgboost.tests.python.test_plotting.bst->xgboost.train({}, dm)
xgboost.tests.python.test_plotting.TestPlotting(unittest.TestCase)
xgboost.tests.python.test_plotting.TestPlotting.test_importance_plot_lim(self)
xgboost.tests.python.test_plotting.TestPlotting.test_plotting(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/python/test_basic.py----------------------------------------
A:xgboost.tests.python.test_basic.rng->numpy.random.RandomState(1994)
A:xgboost.tests.python.test_basic.dtrain->xgboost.DMatrix(dpath + 'agaricus.txt.train')
A:xgboost.tests.python.test_basic.dtest->xgboost.DMatrix(dpath + 'agaricus.txt.test')
A:xgboost.tests.python.test_basic.bst->xgboost.train(params, dm, num_boost_round=1)
A:xgboost.tests.python.test_basic.preds->xgboost.train(params, dm, num_boost_round=1).predict(dtest)
A:xgboost.tests.python.test_basic.labels->xgboost.DMatrix(dpath + 'agaricus.txt.test').get_label()
A:xgboost.tests.python.test_basic.bst2->xgboost.Booster(model_file='xgb.model')
A:xgboost.tests.python.test_basic.dtest2->xgboost.DMatrix('dtest.buffer')
A:xgboost.tests.python.test_basic.preds2->xgboost.Booster(model_file='xgb.model').predict(dtest2)
A:xgboost.tests.python.test_basic.data->numpy.array([['a', 'b'], ['c', 'd']])
A:xgboost.tests.python.test_basic.dm->xgboost.DMatrix(dpath + 'agaricus.txt.train')
A:xgboost.tests.python.test_basic.dm.feature_names->list('abcde')
A:xgboost.tests.python.test_basic.dm.feature_types->list('abcde')
A:xgboost.tests.python.test_basic.target->numpy.array([0, 1] * 50)
A:xgboost.tests.python.test_basic.scores->xgboost.train(params, dm, num_boost_round=1).get_fscore()
A:xgboost.tests.python.test_basic.dummy->numpy.random.randn(5, 5)
A:xgboost.tests.python.test_basic.dump1->xgboost.train(params, dm, num_boost_round=1).get_dump()
A:xgboost.tests.python.test_basic.dump2->xgboost.train(params, dm, num_boost_round=1).get_dump(with_stats=True)
A:xgboost.tests.python.test_basic.dump3->xgboost.train(params, dm, num_boost_round=1).get_dump(dump_format='json')
A:xgboost.tests.python.test_basic.dump3j->json.loads(dump3[0])
A:xgboost.tests.python.test_basic.dump4->xgboost.train(params, dm, num_boost_round=1).get_dump(dump_format='json', with_stats=True)
A:xgboost.tests.python.test_basic.dump4j->json.loads(dump4[0])
A:xgboost.tests.python.test_basic.X->numpy.random.randn(row, cols)
A:xgboost.tests.python.test_basic.y->numpy.random.randn(row).astype('f')
A:xgboost.tests.python.test_basic.cv->xgboost.cv(params, dm, num_boost_round=10, shuffle=False, nfold=10, as_pandas=False)
xgboost.tests.python.test_basic.TestBasic(unittest.TestCase)
xgboost.tests.python.test_basic.TestBasic.test_basic(self)
xgboost.tests.python.test_basic.TestBasic.test_cv(self)
xgboost.tests.python.test_basic.TestBasic.test_cv_no_shuffle(self)
xgboost.tests.python.test_basic.TestBasic.test_dmatrix_init(self)
xgboost.tests.python.test_basic.TestBasic.test_dmatrix_numpy_init(self)
xgboost.tests.python.test_basic.TestBasic.test_dmatrix_numpy_init_omp(self)
xgboost.tests.python.test_basic.TestBasic.test_dump(self)
xgboost.tests.python.test_basic.TestBasic.test_feature_names(self)
xgboost.tests.python.test_basic.TestBasic.test_load_file_invalid(self)
xgboost.tests.python.test_basic.TestBasic.test_multiclass(self)
xgboost.tests.python.test_basic.TestBasic.test_record_results(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/python/test_with_pandas.py----------------------------------------
A:xgboost.tests.python.test_with_pandas.rng->numpy.random.RandomState(1994)
A:xgboost.tests.python.test_with_pandas.df->pandas.DataFrame({'A': np.array([1, 2, 3], dtype=int)})
A:xgboost.tests.python.test_with_pandas.dm->xgboost.DMatrix(dpath + 'agaricus.txt.train')
A:xgboost.tests.python.test_with_pandas.dummies->pandas.get_dummies(df)
A:xgboost.tests.python.test_with_pandas.(result, _, _)->xgboost.core._maybe_pandas_data(dummies, None, None)
A:xgboost.tests.python.test_with_pandas.exp->pandas.Index([u'test-error-mean', u'test-error-std', u'train-error-mean', u'train-error-std'])
A:xgboost.tests.python.test_with_pandas.result->xgboost.core._maybe_pandas_label(df)
A:xgboost.tests.python.test_with_pandas.cv->xgboost.cv(params, dm, num_boost_round=10, nfold=10, as_pandas=True, metrics=['error'])
A:xgboost.tests.python.test_with_pandas.params->list(params.items())
xgboost.tests.python.test_with_pandas.TestPandas(unittest.TestCase)
xgboost.tests.python.test_with_pandas.TestPandas.test_cv_as_pandas(self)
xgboost.tests.python.test_with_pandas.TestPandas.test_pandas(self)
xgboost.tests.python.test_with_pandas.TestPandas.test_pandas_label(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/python/test_linear.py----------------------------------------
A:xgboost.tests.python.test_linear.rng->numpy.random.RandomState(199)
A:xgboost.tests.python.test_linear.enet->ElasticNet(alpha=reg_alpha + reg_lambda, l1_ratio=reg_alpha / (reg_alpha + reg_lambda))
A:xgboost.tests.python.test_linear.enet_pred->ElasticNet(alpha=reg_alpha + reg_lambda, l1_ratio=reg_alpha / (reg_alpha + reg_lambda)).predict(X)
A:xgboost.tests.python.test_linear.data->sklearn.datasets.load_boston()
A:xgboost.tests.python.test_linear.X->scale(data.data)
A:xgboost.tests.python.test_linear.dtrain->xgboost.DMatrix('tmptmp_1234.csv?format=csv&label_column=0#tmptmp_')
A:xgboost.tests.python.test_linear.bst->xgboost.train(param, dtrain, num_rounds)
A:xgboost.tests.python.test_linear.xgb_pred->xgboost.train(param, dtrain, num_rounds).predict(dtrain)
A:xgboost.tests.python.test_linear.xgb_score->sklearn.metrics.accuracy_score(y, np.round(xgb_pred))
A:xgboost.tests.python.test_linear.(X, y)->sklearn.datasets.make_classification(n_samples=100, random_state=rng, n_classes=num_class, n_informative=4, n_features=4, n_redundant=0)
A:xgboost.tests.python.test_linear.xgb_pred_ext->xgboost.train(param, dtrain, num_rounds).predict(dtrain)
A:xgboost.tests.python.test_linear.names->sorted(variable_param)
A:xgboost.tests.python.test_linear.combinations->itertools.product(*(variable_param[Name] for Name in names))
A:xgboost.tests.python.test_linear.param_tmp->param.copy()
xgboost.tests.python.test_linear.TestLinear(unittest.TestCase)
xgboost.tests.python.test_linear.TestLinear.test_coordinate(self)
xgboost.tests.python.test_linear.TestLinear.test_shotgun(self)
xgboost.tests.python.test_linear.assert_updater_accuracy(linear_updater,variable_param)
xgboost.tests.python.test_linear.check_ElasticNet(X,y,pred,tol,reg_alpha,reg_lambda,weights)
xgboost.tests.python.test_linear.is_float(s)
xgboost.tests.python.test_linear.train_boston(param_in)
xgboost.tests.python.test_linear.train_breast_cancer(param_in)
xgboost.tests.python.test_linear.train_classification(param_in)
xgboost.tests.python.test_linear.train_classification_multi(param_in)
xgboost.tests.python.test_linear.train_diabetes(param_in)
xgboost.tests.python.test_linear.train_external_mem(param_in)
xgboost.tests.python.test_linear.xgb_get_weights(bst)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/python/test_sparse_dmatrix.py----------------------------------------
A:xgboost.tests.python.test_sparse_dmatrix.rng->numpy.random.RandomState(1)
A:xgboost.tests.python.test_sparse_dmatrix.x->rand(nrow, ncol, density=0.0005, format='csc', random_state=rng)
A:xgboost.tests.python.test_sparse_dmatrix.dtrain->xgboost.DMatrix(x, label=np.random.binomial(1, 0.3, nrow))
A:xgboost.tests.python.test_sparse_dmatrix.bst->xgboost.train(param, dtrain, 5, watchlist)
xgboost.tests.python.test_sparse_dmatrix.test_sparse_dmatrix_csc()
xgboost.tests.python.test_sparse_dmatrix.test_sparse_dmatrix_csr()


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/python/test_eval_metrics.py----------------------------------------
A:xgboost.tests.python.test_eval_metrics.rng->numpy.random.RandomState(1337)
A:xgboost.tests.python.test_eval_metrics.labels->xgboost.DMatrix(Xt, label=yt).get_label()
A:xgboost.tests.python.test_eval_metrics.digits->load_digits(2)
A:xgboost.tests.python.test_eval_metrics.(Xt, Xv, yt, yv)->train_test_split(X, y, test_size=0.2, random_state=0)
A:xgboost.tests.python.test_eval_metrics.dtrain->xgboost.DMatrix(Xt, label=yt)
A:xgboost.tests.python.test_eval_metrics.dvalid->xgboost.DMatrix(Xv, label=yv)
A:xgboost.tests.python.test_eval_metrics.gbdt_01->xgboost.train(self.xgb_params_01, dtrain, 10, watchlist, early_stopping_rounds=2, feval=self.evalerror_01)
A:xgboost.tests.python.test_eval_metrics.gbdt_02->xgboost.train(self.xgb_params_02, dtrain, 10, watchlist, early_stopping_rounds=2, feval=self.evalerror_02)
A:xgboost.tests.python.test_eval_metrics.gbdt_03->xgboost.train(self.xgb_params_03, dtrain, 10, watchlist, early_stopping_rounds=2, feval=self.evalerror_03)
A:xgboost.tests.python.test_eval_metrics.gbdt_04->xgboost.train(self.xgb_params_04, dtrain, 10, watchlist, early_stopping_rounds=2, feval=self.evalerror_04)
xgboost.tests.python.test_eval_metrics.TestEvalMetrics(unittest.TestCase)
xgboost.tests.python.test_eval_metrics.TestEvalMetrics.evalerror_01(self,preds,dtrain)
xgboost.tests.python.test_eval_metrics.TestEvalMetrics.evalerror_02(self,preds,dtrain)
xgboost.tests.python.test_eval_metrics.TestEvalMetrics.evalerror_03(self,preds,dtrain)
xgboost.tests.python.test_eval_metrics.TestEvalMetrics.evalerror_04(self,preds,dtrain)
xgboost.tests.python.test_eval_metrics.TestEvalMetrics.test_eval_metrics(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/python/test_openmp.py----------------------------------------
A:xgboost.tests.python.test_openmp.A->csr_matrix((data, indices, indptr), shape=(7, 4))
A:xgboost.tests.python.test_openmp.dtrain->xgboost.DMatrix(A, label=y)
xgboost.tests.python.test_openmp.TestOMP(unittest.TestCase)
xgboost.tests.python.test_openmp.TestOMP.test_omp(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/python/test_training_continuation.py----------------------------------------
A:xgboost.tests.python.test_training_continuation.rng->numpy.random.RandomState(1337)
A:xgboost.tests.python.test_training_continuation.digits_2class->load_digits(2)
A:xgboost.tests.python.test_training_continuation.digits_5class->load_digits(5)
A:xgboost.tests.python.test_training_continuation.dtrain_2class->xgboost.DMatrix(X_2class, label=y_2class)
A:xgboost.tests.python.test_training_continuation.dtrain_5class->xgboost.DMatrix(X_5class, label=y_5class)
A:xgboost.tests.python.test_training_continuation.gbdt_01->xgboost.train(self.xgb_params_01, dtrain_2class, num_boost_round=10)
A:xgboost.tests.python.test_training_continuation.ntrees_01->len(gbdt_01.get_dump())
A:xgboost.tests.python.test_training_continuation.gbdt_02->xgboost.train(self.xgb_params_01, dtrain_2class, num_boost_round=0)
A:xgboost.tests.python.test_training_continuation.gbdt_02a->xgboost.train(self.xgb_params_01, dtrain_2class, num_boost_round=10, xgb_model=gbdt_02)
A:xgboost.tests.python.test_training_continuation.gbdt_02b->xgboost.train(self.xgb_params_01, dtrain_2class, num_boost_round=10, xgb_model='xgb_tc.model')
A:xgboost.tests.python.test_training_continuation.ntrees_02a->len(gbdt_02a.get_dump())
A:xgboost.tests.python.test_training_continuation.ntrees_02b->len(gbdt_02b.get_dump())
A:xgboost.tests.python.test_training_continuation.res1->xgboost.train(self.xgb_params_03, dtrain_5class, num_boost_round=3, xgb_model=gbdt_05).predict(dtrain_5class)
A:xgboost.tests.python.test_training_continuation.res2->xgboost.train(self.xgb_params_03, dtrain_5class, num_boost_round=3, xgb_model=gbdt_05).predict(dtrain_5class, ntree_limit=gbdt_05.best_ntree_limit)
A:xgboost.tests.python.test_training_continuation.gbdt_03->xgboost.train(self.xgb_params_01, dtrain_2class, num_boost_round=3)
A:xgboost.tests.python.test_training_continuation.gbdt_03a->xgboost.train(self.xgb_params_01, dtrain_2class, num_boost_round=7, xgb_model=gbdt_03)
A:xgboost.tests.python.test_training_continuation.gbdt_03b->xgboost.train(self.xgb_params_01, dtrain_2class, num_boost_round=7, xgb_model='xgb_tc.model')
A:xgboost.tests.python.test_training_continuation.ntrees_03a->len(gbdt_03a.get_dump())
A:xgboost.tests.python.test_training_continuation.ntrees_03b->len(gbdt_03b.get_dump())
A:xgboost.tests.python.test_training_continuation.gbdt_04->xgboost.train(self.xgb_params_02, dtrain_2class, num_boost_round=7, xgb_model=gbdt_04)
A:xgboost.tests.python.test_training_continuation.gbdt_05->xgboost.train(self.xgb_params_03, dtrain_5class, num_boost_round=3, xgb_model=gbdt_05)
xgboost.tests.python.test_training_continuation.TestTrainingContinuation(unittest.TestCase)
xgboost.tests.python.test_training_continuation.TestTrainingContinuation.test_training_continuation(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/python/test_monotone_constraints.py----------------------------------------
A:xgboost.tests.python.test_monotone_constraints.variable_x->numpy.linspace(0, 1, n).reshape((n, 1))
A:xgboost.tests.python.test_monotone_constraints.fixed_xs_values->numpy.linspace(0, 1, n)
A:xgboost.tests.python.test_monotone_constraints.monotonically_increasing_x->numpy.column_stack((variable_x, fixed_x))
A:xgboost.tests.python.test_monotone_constraints.monotonically_increasing_dset->xgboost.DMatrix(monotonically_increasing_x)
A:xgboost.tests.python.test_monotone_constraints.monotonically_increasing_y->learner.predict(monotonically_increasing_dset)
A:xgboost.tests.python.test_monotone_constraints.monotonically_decreasing_x->numpy.column_stack((fixed_x, variable_x))
A:xgboost.tests.python.test_monotone_constraints.monotonically_decreasing_dset->xgboost.DMatrix(monotonically_decreasing_x)
A:xgboost.tests.python.test_monotone_constraints.monotonically_decreasing_y->learner.predict(monotonically_decreasing_dset)
A:xgboost.tests.python.test_monotone_constraints.x1_positively_correlated_with_y->numpy.random.random(size=number_of_dpoints)
A:xgboost.tests.python.test_monotone_constraints.x2_negatively_correlated_with_y->numpy.random.random(size=number_of_dpoints)
A:xgboost.tests.python.test_monotone_constraints.x->numpy.column_stack((x1_positively_correlated_with_y, x2_negatively_correlated_with_y))
A:xgboost.tests.python.test_monotone_constraints.zs->numpy.random.normal(loc=0.0, scale=0.01, size=number_of_dpoints)
A:xgboost.tests.python.test_monotone_constraints.training_dset->xgboost.DMatrix(x, label=y)
A:xgboost.tests.python.test_monotone_constraints.constrained_exact_method->xgboost.train(params_for_constrained_exact_method, training_dset)
A:xgboost.tests.python.test_monotone_constraints.constrained_hist_method->xgboost.train(params_for_constrained_hist_method, training_dset)
xgboost.tests.python.test_monotone_constraints.TestMonotoneConstraints(unittest.TestCase)
xgboost.tests.python.test_monotone_constraints.TestMonotoneConstraints.test_monotone_constraints_for_exact_tree_method(self)
xgboost.tests.python.test_monotone_constraints.TestMonotoneConstraints.test_monotone_constraints_for_hist_tree_method(self)
xgboost.tests.python.test_monotone_constraints.is_correctly_constrained(learner)
xgboost.tests.python.test_monotone_constraints.is_decreasing(y)
xgboost.tests.python.test_monotone_constraints.is_increasing(y)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/python/test_shap.py----------------------------------------
A:xgboost.tests.python.test_shap.rng->numpy.random.RandomState(1994)
A:xgboost.tests.python.test_shap.data->numpy.random.randn(100, 5)
A:xgboost.tests.python.test_shap.target->numpy.array([0, 1] * 50)
A:xgboost.tests.python.test_shap.dm->xgboost.DMatrix(data, label=target, feature_names=features)
A:xgboost.tests.python.test_shap.bst->xgboost.train(param, xgb.DMatrix(X, label=y), 10)
A:xgboost.tests.python.test_shap.scores1->xgboost.train(param, xgb.DMatrix(X, label=y), 10).get_score()
A:xgboost.tests.python.test_shap.scores2->xgboost.train(param, xgb.DMatrix(X, label=y), 10).get_score(importance_type='weight')
A:xgboost.tests.python.test_shap.scores3->xgboost.train(param, xgb.DMatrix(X, label=y), 10).get_score(importance_type='cover')
A:xgboost.tests.python.test_shap.scores4->xgboost.train(param, xgb.DMatrix(X, label=y), 10).get_score(importance_type='gain')
A:xgboost.tests.python.test_shap.fscores->xgboost.train(param, xgb.DMatrix(X, label=y), 10).get_fscore()
A:xgboost.tests.python.test_shap.dtrain->xgboost.DMatrix(dpath + 'agaricus.txt.train')
A:xgboost.tests.python.test_shap.dtest->xgboost.DMatrix(dpath + 'agaricus.txt.test')
A:xgboost.tests.python.test_shap.preds->xgboost.train(param, xgb.DMatrix(X, label=y), 10).predict(dtest)
A:xgboost.tests.python.test_shap.contribs->xgboost.train(param, xgb.DMatrix(X, label=y), 10).predict(dtest, pred_contribs=True)
A:xgboost.tests.python.test_shap.X->numpy.random.randn(N, M)
A:xgboost.tests.python.test_shap.y->numpy.random.randn(N)
A:xgboost.tests.python.test_shap.out->numpy.zeros((M + 1, M + 1))
A:xgboost.tests.python.test_shap.lines->list(tree.splitlines())
A:xgboost.tests.python.test_shap.match->re.search(r_exp_leaf, line)
A:xgboost.tests.python.test_shap.ind->int(match.group(1))
A:xgboost.tests.python.test_shap.M->len(x)
A:xgboost.tests.python.test_shap.z->numpy.zeros(M)
A:xgboost.tests.python.test_shap.other_inds->list(set(range(M)) - set([i, j]))
A:xgboost.tests.python.test_shap.v1->exp_value(trees, z, x)
A:xgboost.tests.python.test_shap.v2->exp_value(trees, z, x)
A:xgboost.tests.python.test_shap.svals->shap_values(trees, x)
A:xgboost.tests.python.test_shap.v00->exp_value(trees, z, x)
A:xgboost.tests.python.test_shap.v10->exp_value(trees, z, x)
A:xgboost.tests.python.test_shap.v11->exp_value(trees, z, x)
A:xgboost.tests.python.test_shap.v01->exp_value(trees, z, x)
A:xgboost.tests.python.test_shap.brute_force->interaction_values(parse_model(bst), X[0, :])
A:xgboost.tests.python.test_shap.fast_method->xgboost.train(param, xgb.DMatrix(X, label=y), 10).predict(xgb.DMatrix(X[0:1, :]), pred_interactions=True)
xgboost.tests.python.test_shap.TestSHAP(unittest.TestCase)
xgboost.tests.python.test_shap.TestSHAP.test_feature_importances(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/python-gpu/test_monotonic_constraints.py----------------------------------------
A:xgboost.tests.python-gpu.test_monotonic_constraints.rng->numpy.random.RandomState(1994)
A:xgboost.tests.python-gpu.test_monotonic_constraints.(X, y)->make_regression(n, random_state=rng, n_features=1, n_informative=1)
A:xgboost.tests.python-gpu.test_monotonic_constraints.dtrain->xgboost.DMatrix(X, y)
A:xgboost.tests.python-gpu.test_monotonic_constraints.bst->xgboost.train(param, dtrain)
A:xgboost.tests.python-gpu.test_monotonic_constraints.dpredict->xgboost.DMatrix(X[X[:, 0].argsort()])
A:xgboost.tests.python-gpu.test_monotonic_constraints.pred->xgboost.train(param, dtrain).predict(dpredict)
xgboost.tests.python-gpu.test_monotonic_constraints.TestMonotonicConstraints(unittest.TestCase)
xgboost.tests.python-gpu.test_monotonic_constraints.TestMonotonicConstraints.test_exact(self)
xgboost.tests.python-gpu.test_monotonic_constraints.TestMonotonicConstraints.test_gpu_hist(self)
xgboost.tests.python-gpu.test_monotonic_constraints.assert_constraint(constraint,tree_method)
xgboost.tests.python-gpu.test_monotonic_constraints.non_decreasing(L)
xgboost.tests.python-gpu.test_monotonic_constraints.non_increasing(L)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/python-gpu/test_gpu_updaters.py----------------------------------------
A:xgboost.tests.python-gpu.test_gpu_updaters.rng->numpy.random.RandomState(1994)
A:xgboost.tests.python-gpu.test_gpu_updaters.data->load_breast_cancer()
A:xgboost.tests.python-gpu.test_gpu_updaters.dtrain->xgboost.DMatrix(X, label=y)
A:xgboost.tests.python-gpu.test_gpu_updaters.bst->xgboost.train(param, dtrain, num_rounds, [(dtrain, 'train')], evals_result=res_tmp)
A:xgboost.tests.python-gpu.test_gpu_updaters.(X, y)->make_regression(n, random_state=rng)
A:xgboost.tests.python-gpu.test_gpu_updaters.X->numpy.array([[np.nan if rng.uniform(0, 1) < sparsity else x for x in x_row] for x_row in X])
A:xgboost.tests.python-gpu.test_gpu_updaters.names->sorted(variable_param)
A:xgboost.tests.python-gpu.test_gpu_updaters.combinations->itertools.product(*(variable_param[Name] for Name in names))
A:xgboost.tests.python-gpu.test_gpu_updaters.param_tmp->param.copy()
xgboost.tests.python-gpu.test_gpu_updaters.TestGPU(unittest.TestCase)
xgboost.tests.python-gpu.test_gpu_updaters.TestGPU.test_gpu_exact(self)
xgboost.tests.python-gpu.test_gpu_updaters.TestGPU.test_gpu_hist(self)
xgboost.tests.python-gpu.test_gpu_updaters.assert_accuracy(res,tree_method,comparison_tree_method,tolerance,param)
xgboost.tests.python-gpu.test_gpu_updaters.assert_updater_accuracy(tree_method,comparison_tree_method,variable_param,tolerance)
xgboost.tests.python-gpu.test_gpu_updaters.non_increasing(L,tolerance)
xgboost.tests.python-gpu.test_gpu_updaters.train_boston(param_in,comparison_tree_method)
xgboost.tests.python-gpu.test_gpu_updaters.train_cancer(param_in,comparison_tree_method)
xgboost.tests.python-gpu.test_gpu_updaters.train_digits(param_in,comparison_tree_method)
xgboost.tests.python-gpu.test_gpu_updaters.train_sparse(param_in,comparison_tree_method)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/python-gpu/test_large_sizes.py----------------------------------------
A:xgboost.tests.python-gpu.test_large_sizes.rng->numpy.random.RandomState(1994)
A:xgboost.tests.python-gpu.test_large_sizes.tmp->time.time()
A:xgboost.tests.python-gpu.test_large_sizes.X->numpy.random.rand(rows, cols)
A:xgboost.tests.python-gpu.test_large_sizes.y->numpy.random.rand(rows)
A:xgboost.tests.python-gpu.test_large_sizes.ag_dtrain->xgboost.DMatrix(X, y, nthread=40)
xgboost.tests.python-gpu.test_large_sizes.TestGPU(unittest.TestCase)
xgboost.tests.python-gpu.test_large_sizes.TestGPU.test_large(self)
xgboost.tests.python-gpu.test_large_sizes.eprint(*args,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/python-gpu/test_gpu_prediction.py----------------------------------------
A:xgboost.tests.python-gpu.test_gpu_prediction.rng->numpy.random.RandomState(1994)
A:xgboost.tests.python-gpu.test_gpu_prediction.dtrain->xgboost.DMatrix(X_train, label=y_train)
A:xgboost.tests.python-gpu.test_gpu_prediction.dval->xgboost.DMatrix(np.random.randn(num_rows, num_cols), label=[0, 1] * int(num_rows / 2))
A:xgboost.tests.python-gpu.test_gpu_prediction.dtest->xgboost.DMatrix(X_test)
A:xgboost.tests.python-gpu.test_gpu_prediction.bst->xgboost.train(param, dtrain, iterations, evals=watchlist, evals_result=res)
A:xgboost.tests.python-gpu.test_gpu_prediction.gpu_pred_train->xgboost.train(param, dtrain, iterations, evals=watchlist, evals_result=res).predict(dtrain, output_margin=True)
A:xgboost.tests.python-gpu.test_gpu_prediction.gpu_pred_test->xgboost.train(param, dtrain, iterations, evals=watchlist, evals_result=res).predict(dtest, output_margin=True)
A:xgboost.tests.python-gpu.test_gpu_prediction.gpu_pred_val->xgboost.train(param, dtrain, iterations, evals=watchlist, evals_result=res).predict(dval, output_margin=True)
A:xgboost.tests.python-gpu.test_gpu_prediction.bst_cpu->xgboost.train(param, dtrain, iterations, evals=watchlist)
A:xgboost.tests.python-gpu.test_gpu_prediction.cpu_pred_train->xgboost.train(param, dtrain, iterations, evals=watchlist).predict(dtrain, output_margin=True)
A:xgboost.tests.python-gpu.test_gpu_prediction.cpu_pred_test->xgboost.train(param, dtrain, iterations, evals=watchlist).predict(dtest, output_margin=True)
A:xgboost.tests.python-gpu.test_gpu_prediction.cpu_pred_val->xgboost.train(param, dtrain, iterations, evals=watchlist).predict(dval, output_margin=True)
A:xgboost.tests.python-gpu.test_gpu_prediction.(X, y)->make_regression(n, random_state=rng)
A:xgboost.tests.python-gpu.test_gpu_prediction.(X_train, X_test, y_train, y_test)->train_test_split(X, y, random_state=123)
A:xgboost.tests.python-gpu.test_gpu_prediction.bst_gpu_predict->xgboost.train(params, dtrain)
A:xgboost.tests.python-gpu.test_gpu_prediction.bst_cpu_predict->xgboost.train(params, dtrain)
A:xgboost.tests.python-gpu.test_gpu_prediction.predict0->xgboost.train(params, dtrain).predict(dtest)
A:xgboost.tests.python-gpu.test_gpu_prediction.predict1->xgboost.train(params, dtrain).predict(dtest)
A:xgboost.tests.python-gpu.test_gpu_prediction.cpu_predict->xgboost.train(params, dtrain).predict(dtest)
A:xgboost.tests.python-gpu.test_gpu_prediction.X->numpy.random.rand(m, n)
A:xgboost.tests.python-gpu.test_gpu_prediction.m->xgboost.XGBRegressor(**params).fit(X_train, y_train)
A:xgboost.tests.python-gpu.test_gpu_prediction.cpu_train_score->xgboost.XGBRegressor(**params).fit(X_train, y_train).score(X_train, y_train)
A:xgboost.tests.python-gpu.test_gpu_prediction.cpu_test_score->xgboost.XGBRegressor(**params).fit(X_train, y_train).score(X_test, y_test)
A:xgboost.tests.python-gpu.test_gpu_prediction.gpu_train_score->xgboost.XGBRegressor(**params).fit(X_train, y_train).score(X_train, y_train)
A:xgboost.tests.python-gpu.test_gpu_prediction.gpu_test_score->xgboost.XGBRegressor(**params).fit(X_train, y_train).score(X_test, y_test)
xgboost.tests.python-gpu.test_gpu_prediction.TestGPUPredict(unittest.TestCase)
xgboost.tests.python-gpu.test_gpu_prediction.TestGPUPredict.non_decreasing(self,L)
xgboost.tests.python-gpu.test_gpu_prediction.TestGPUPredict.test_multi_predict(self)
xgboost.tests.python-gpu.test_gpu_prediction.TestGPUPredict.test_predict(self)
xgboost.tests.python-gpu.test_gpu_prediction.TestGPUPredict.test_sklearn(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/benchmark/benchmark_linear.py----------------------------------------
A:xgboost.tests.benchmark.benchmark_linear.rng->numpy.random.RandomState(1994)
A:xgboost.tests.benchmark.benchmark_linear.dtest->xgboost.DMatrix(X_test, y_test, nthread=-1)
A:xgboost.tests.benchmark.benchmark_linear.dtrain->xgboost.DMatrix(X_train, y_train)
A:xgboost.tests.benchmark.benchmark_linear.tmp->time.time()
A:xgboost.tests.benchmark.benchmark_linear.(X, y)->make_classification(args.rows, n_features=args.columns, n_redundant=0, n_informative=args.columns, n_repeated=0, random_state=7)
A:xgboost.tests.benchmark.benchmark_linear.X->numpy.array([[np.nan if rng.uniform(0, 1) < args.sparsity else x for x in x_row] for x_row in X])
A:xgboost.tests.benchmark.benchmark_linear.(X_train, X_test, y_train, y_test)->train_test_split(X, y, test_size=args.test_size, random_state=7)
A:xgboost.tests.benchmark.benchmark_linear.parser->argparse.ArgumentParser()
A:xgboost.tests.benchmark.benchmark_linear.args->argparse.ArgumentParser().parse_args()
xgboost.tests.benchmark.benchmark_linear.run_benchmark(args)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/benchmark/benchmark_tree.py----------------------------------------
A:xgboost.tests.benchmark.benchmark_tree.rng->numpy.random.RandomState(1994)
A:xgboost.tests.benchmark.benchmark_tree.dtest->xgboost.DMatrix(X_test, y_test, nthread=-1)
A:xgboost.tests.benchmark.benchmark_tree.dtrain->xgboost.DMatrix(X_train, y_train)
A:xgboost.tests.benchmark.benchmark_tree.tmp->time.time()
A:xgboost.tests.benchmark.benchmark_tree.(X, y)->make_classification(args.rows, n_features=args.columns, n_redundant=0, n_informative=args.columns, n_repeated=0, random_state=7)
A:xgboost.tests.benchmark.benchmark_tree.X->numpy.array([[np.nan if rng.uniform(0, 1) < args.sparsity else x for x in x_row] for x_row in X])
A:xgboost.tests.benchmark.benchmark_tree.(X_train, X_test, y_train, y_test)->train_test_split(X, y, test_size=args.test_size, random_state=7)
A:xgboost.tests.benchmark.benchmark_tree.parser->argparse.ArgumentParser()
A:xgboost.tests.benchmark.benchmark_tree.args->argparse.ArgumentParser().parse_args()
xgboost.tests.benchmark.benchmark_tree.run_benchmark(args)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/tests/distributed/test_basic.py----------------------------------------
A:xgboost.tests.distributed.test_basic.dtrain->xgboost.DMatrix('../../demo/data/agaricus.txt.train')
A:xgboost.tests.distributed.test_basic.dtest->xgboost.DMatrix('../../demo/data/agaricus.txt.test')
A:xgboost.tests.distributed.test_basic.bst->xgboost.train(param, dtrain, num_round, watchlist, early_stopping_rounds=2)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/rabit/python/rabit.py----------------------------------------
A:xgboost.rabit.python.rabit.curr_path->os.path.dirname(os.path.abspath(os.path.expanduser(__file__)))
A:xgboost.rabit.python.rabit._LIB->ctypes.cdll.LoadLibrary(_find_lib_path(dll_name)[0])
A:xgboost.rabit.python.rabit.arr->(ctypes.c_char_p * len(args))()
A:xgboost.rabit.python.rabit.ret->ctypes.cdll.LoadLibrary(_find_lib_path(dll_name)[0]).RabitVersionNumber()
A:xgboost.rabit.python.rabit.msg->str(msg)
A:xgboost.rabit.python.rabit.length->ctypes.c_ulong()
A:xgboost.rabit.python.rabit.buf->buf.copy().copy()
A:xgboost.rabit.python.rabit.rank->get_rank()
A:xgboost.rabit.python.rabit.s->cPickle.dumps(data, protocol=pickle.HIGHEST_PROTOCOL)
A:xgboost.rabit.python.rabit.length.value->len(s)
A:xgboost.rabit.python.rabit.dptr->(ctypes.c_char * length.value)()
A:xgboost.rabit.python.rabit.data->(ctypes.c_char * length).from_address(ctypes.addressof(ptr.contents))
A:xgboost.rabit.python.rabit.func_ptr->ctypes.CFUNCTYPE(None, ctypes.c_void_p)
A:xgboost.rabit.python.rabit.gptr->ctypes.POINTER(ctypes.c_char)()
A:xgboost.rabit.python.rabit.global_len->ctypes.c_ulong()
A:xgboost.rabit.python.rabit.lptr->ctypes.POINTER(ctypes.c_char)()
A:xgboost.rabit.python.rabit.local_len->ctypes.c_ulong()
A:xgboost.rabit.python.rabit.version->ctypes.cdll.LoadLibrary(_find_lib_path(dll_name)[0]).RabitLoadCheckPoint(ctypes.byref(gptr), ctypes.byref(global_len), None, None)
A:xgboost.rabit.python.rabit.sglobal->cPickle.dumps(global_model)
A:xgboost.rabit.python.rabit.slocal->cPickle.dumps(local_model)
xgboost.rabit.python.rabit._find_lib_path(dll_name)
xgboost.rabit.python.rabit._load_model(ptr,length)
xgboost.rabit.python.rabit._loadlib(lib='standard',lib_dll=None)
xgboost.rabit.python.rabit._unloadlib()
xgboost.rabit.python.rabit.allreduce(data,op,prepare_fun=None)
xgboost.rabit.python.rabit.broadcast(data,root)
xgboost.rabit.python.rabit.checkpoint(global_model,local_model=None)
xgboost.rabit.python.rabit.finalize()
xgboost.rabit.python.rabit.get_processor_name()
xgboost.rabit.python.rabit.get_rank()
xgboost.rabit.python.rabit.get_world_size()
xgboost.rabit.python.rabit.init(args=None,lib='standard',lib_dll=None)
xgboost.rabit.python.rabit.load_checkpoint(with_local=False)
xgboost.rabit.python.rabit.tracker_print(msg)
xgboost.rabit.python.rabit.version_number()


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/rabit/guide/lazy_allreduce.py----------------------------------------
A:xgboost.rabit.guide.lazy_allreduce.rank->rabit.get_rank()
A:xgboost.rabit.guide.lazy_allreduce.a->rabit.allreduce(a, rabit.SUM)
xgboost.rabit.guide.lazy_allreduce.prepare(a)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/rabit/doc/conf.py----------------------------------------
A:xgboost.rabit.doc.conf.curr_path->os.path.dirname(os.path.abspath(os.path.expanduser(__file__)))
A:xgboost.rabit.doc.conf.libpath->os.path.join(curr_path, '../wrapper/')
A:xgboost.rabit.doc.conf.retcode->subprocess.call('cp -rf doxygen/html _build/html/doxygen', shell=True)
xgboost.rabit.doc.conf.generate_doxygen_xml(app)
xgboost.rabit.doc.conf.run_build_lib(folder)
xgboost.rabit.doc.conf.run_doxygen(folder)
xgboost.rabit.doc.conf.setup(app)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/rabit/doc/sphinx_util.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/rabit/test/speed_runner.py----------------------------------------
A:xgboost.rabit.test.speed_runner.parser->argparse.ArgumentParser(description='TODO')
A:xgboost.rabit.test.speed_runner.args->argparse.ArgumentParser(description='TODO').parse_args()
A:xgboost.rabit.test.speed_runner.host_file->os.path.join(args.host_dir, 'hosts%d' % machine)
xgboost.rabit.test.speed_runner.main()


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/dmlc-core/tracker/dmlc_tracker/opts.py----------------------------------------
A:xgboost.dmlc-core.tracker.dmlc_tracker.opts.fset->set()
A:xgboost.dmlc-core.tracker.dmlc_tracker.opts.mem_str->mem_str.lower().lower()
A:xgboost.dmlc-core.tracker.dmlc_tracker.opts.parser->argparse.ArgumentParser(description='DMLC job submission.')
A:xgboost.dmlc-core.tracker.dmlc_tracker.opts.(args, unknown)->argparse.ArgumentParser(description='DMLC job submission.').parse_known_args(args)
A:xgboost.dmlc-core.tracker.dmlc_tracker.opts.args.cluster->os.getenv('DMLC_SUBMIT_CLUSTER', None)
A:xgboost.dmlc-core.tracker.dmlc_tracker.opts.args.worker_memory_mb->get_memory_mb(args.worker_memory)
A:xgboost.dmlc-core.tracker.dmlc_tracker.opts.args.server_memory_mb->get_memory_mb(args.server_memory)
xgboost.dmlc-core.tracker.dmlc_tracker.opts.get_cache_file_set(args)
xgboost.dmlc-core.tracker.dmlc_tracker.opts.get_memory_mb(mem_str)
xgboost.dmlc-core.tracker.dmlc_tracker.opts.get_opts(args=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/dmlc-core/tracker/dmlc_tracker/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/dmlc-core/tracker/dmlc_tracker/local.py----------------------------------------
A:xgboost.dmlc-core.tracker.dmlc_tracker.local.cmd->' '.join(cmd)
A:xgboost.dmlc-core.tracker.dmlc_tracker.local.env->os.environ.copy()
A:xgboost.dmlc-core.tracker.dmlc_tracker.local.env[k]->str(v)
A:xgboost.dmlc-core.tracker.dmlc_tracker.local.env['DMLC_TASK_ID']->str(taskid)
A:xgboost.dmlc-core.tracker.dmlc_tracker.local.env['DMLC_NUM_ATTEMPT']->str(ntrial)
A:xgboost.dmlc-core.tracker.dmlc_tracker.local.ret->subprocess.call(bash, shell=True, executable='bash', env=env)
A:xgboost.dmlc-core.tracker.dmlc_tracker.local.procs[i]->Thread(target=exec_cmd, args=(args.command, role, i, envs))
xgboost.dmlc-core.tracker.dmlc_tracker.local.exec_cmd(cmd,role,taskid,pass_env)
xgboost.dmlc-core.tracker.dmlc_tracker.local.submit(args)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/dmlc-core/tracker/dmlc_tracker/mpi.py----------------------------------------
A:xgboost.dmlc-core.tracker.dmlc_tracker.mpi.(_, err)->subprocess.Popen('mpirun', stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
A:xgboost.dmlc-core.tracker.dmlc_tracker.mpi.thread->Thread(target=run, args=(prog,))
xgboost.dmlc-core.tracker.dmlc_tracker.mpi.get_mpi_env(envs)
xgboost.dmlc-core.tracker.dmlc_tracker.mpi.submit(args)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/dmlc-core/tracker/dmlc_tracker/launcher.py----------------------------------------
A:xgboost.dmlc-core.tracker.dmlc_tracker.launcher.hadoop_home->os.getenv('HADOOP_HOME')
A:xgboost.dmlc-core.tracker.dmlc_tracker.launcher.hdfs_home->os.getenv('HADOOP_HDFS_HOME')
A:xgboost.dmlc-core.tracker.dmlc_tracker.launcher.java_home->os.getenv('JAVA_HOME')
A:xgboost.dmlc-core.tracker.dmlc_tracker.launcher.cluster->os.getenv('DMLC_JOB_CLUSTER')
A:xgboost.dmlc-core.tracker.dmlc_tracker.launcher.env->os.environ.copy()
A:xgboost.dmlc-core.tracker.dmlc_tracker.launcher.num_worker->int(env['DMLC_NUM_WORKER'])
A:xgboost.dmlc-core.tracker.dmlc_tracker.launcher.task_id->int(env['DMLC_TASK_ID'])
A:xgboost.dmlc-core.tracker.dmlc_tracker.launcher.(classpath, _)->subprocess.Popen('%s/bin/hadoop classpath' % hadoop_home, stdout=subprocess.PIPE, shell=True, env=os.environ).communicate()
A:xgboost.dmlc-core.tracker.dmlc_tracker.launcher.ret->subprocess.call(args=sys.argv[1:], env=env)
xgboost.dmlc-core.tracker.dmlc_tracker.launcher.main()
xgboost.dmlc-core.tracker.dmlc_tracker.launcher.unzip_archives(ar_list,env)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/dmlc-core/tracker/dmlc_tracker/yarn.py----------------------------------------
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.hadoop_home->os.getenv('HADOOP_HOME')
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.hadoop_binary->os.path.join(hadoop_home, 'bin', 'hadoop')
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.YARN_JAR_PATH->os.path.join(args.yarn_app_dir, 'dmlc-yarn.jar')
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.curr_path->os.path.dirname(os.path.abspath(os.path.expanduser(__file__)))
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.YARN_BOOT_PY->os.path.join(curr_path, 'launcher.py')
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.(out, _)->subprocess.Popen('%s version' % hadoop_binary, shell=True, stdout=subprocess.PIPE).communicate()
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.out->out.split('\n')[0].split().split('\n')[0].split()
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.hadoop_version->int(out[1].split('.')[0])
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.(classpath, _)->subprocess.Popen('%s classpath' % hadoop_binary, shell=True, stdout=subprocess.PIPE).communicate()
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.classpath->classpath.strip().strip()
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.(fset, new_command)->opts.get_cache_file_set(args)
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.JAVA_HOME->os.getenv('JAVA_HOME')
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.JAVA->os.path.join(JAVA_HOME, 'bin', 'java')
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.env->os.environ.copy()
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.env[k]->str(v)
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.env['DMLC_WORKER_CORES']->str(args.worker_cores)
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.env['DMLC_WORKER_MEMORY_MB']->str(args.worker_memory_mb)
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.env['DMLC_SERVER_CORES']->str(args.server_cores)
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.env['DMLC_SERVER_MEMORY_MB']->str(args.server_memory_mb)
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.env['DMLC_NUM_WORKER']->str(args.num_workers)
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.env['DMLC_NUM_SERVER']->str(args.num_servers)
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.env['DMLC_JOB_ARCHIVES']->':'.join(ar_list)
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.thread->Thread(target=run, args=())
xgboost.dmlc-core.tracker.dmlc_tracker.yarn.submit(args)
xgboost.dmlc-core.tracker.dmlc_tracker.yarn.yarn_submit(args,nworker,nserver,pass_env)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/dmlc-core/tracker/dmlc_tracker/submit.py----------------------------------------
A:xgboost.dmlc-core.tracker.dmlc_tracker.submit.console->logging.StreamHandler()
A:xgboost.dmlc-core.tracker.dmlc_tracker.submit.args->opts.get_opts()
xgboost.dmlc-core.tracker.dmlc_tracker.submit.config_logger(args)
xgboost.dmlc-core.tracker.dmlc_tracker.submit.main()


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/dmlc-core/tracker/dmlc_tracker/tracker.py----------------------------------------
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.chunk->self.sock.recv(min(nbytes - nread, 1024))
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.slen->self.recvint()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.slave->ExSocket(sock)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.self.host->get_some_ip(s_addr[0])
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.magic->ExSocket(sock).recvint()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.self.rank->ExSocket(sock).recvint()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.self.world_size->ExSocket(sock).recvint()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.self.jobid->ExSocket(sock).recvstr()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.self.cmd->ExSocket(sock).recvstr()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.nnset->set(tree_map[rank])
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.ngood->self.sock.recvint()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.goodset->set([])
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.nerr->self.sock.recvint()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.self.port->self.sock.recvint()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.sock->socket.socket(get_family(hostIP), socket.SOCK_STREAM)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.tree_map[r]->self.get_neighbor(r, nslave)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.nset->set(tree_map[r])
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.vlst->self.find_share_ring(tree_map, parent_map, v)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.rlst->self.find_share_ring(tree_map, parent_map, 0)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.nslave->len(tree_map)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.(tree_map, parent_map)->self.get_tree(nslave)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.ring_map->self.get_ring(tree_map, parent_map)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.(fd, s_addr)->self.sock.accept()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.s->socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.msg->socket.socket(socket.AF_INET, socket.SOCK_DGRAM).sock.recvstr()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.(tree_map, parent_map, ring_map)->self.get_link_map(nslave)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.todo_nodes->list(range(nslave))
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.rank->list(range(nslave)).pop(0)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.self.start_time->time.time()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.self.end_time->time.time()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.self.thread->Thread(target=lambda : subprocess.check_call(self.cmd, env=env, shell=True), args=())
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.env->os.environ.copy()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.env['DMLC_PS_ROOT_URI']->str(self.hostIP)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.env['DMLC_PS_ROOT_PORT']->str(self.port)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.env[k]->str(v)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.hostIP->get_host_ip(hostIP)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.rabit->RabitTracker(hostIP=get_host_ip(args.host_ip), nslave=args.num_workers)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.pserver->PSTracker(hostIP=hostIP, cmd=pscmd, envs=envs)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.parser->argparse.ArgumentParser(description='Rabit Tracker start.')
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.args->argparse.ArgumentParser(description='Rabit Tracker start.').parse_args()
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.ExSocket(self,sock)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.ExSocket.__init__(self,sock)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.ExSocket.recvall(self,nbytes)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.ExSocket.recvint(self)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.ExSocket.recvstr(self)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.ExSocket.sendint(self,n)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.ExSocket.sendstr(self,s)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.PSTracker(self,hostIP,cmd,port=9091,port_end=9999,envs=None)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.PSTracker.__init__(self,hostIP,cmd,port=9091,port_end=9999,envs=None)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.PSTracker.join(self)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.PSTracker.slave_envs(self)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker(self,hostIP,nslave,port=9091,port_end=9999)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.__del__(self)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.__init__(self,hostIP,nslave,port=9091,port_end=9999)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.accept_slaves(self,nslave)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.find_share_ring(self,tree_map,parent_map,r)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.get_link_map(self,nslave)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.get_neighbor(rank,nslave)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.get_ring(self,tree_map,parent_map)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.get_tree(self,nslave)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.join(self)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.slave_envs(self)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.start(self,nslave)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.SlaveEntry(self,sock,s_addr)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.SlaveEntry.__init__(self,sock,s_addr)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.SlaveEntry.assign_rank(self,rank,wait_conn,tree_map,parent_map,ring_map)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.SlaveEntry.decide_rank(self,job_map)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.get_family(addr)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.get_host_ip(hostIP=None)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.get_some_ip(host)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.main()
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.start_rabit_tracker(args)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.submit(nworker,nserver,fun_submit,hostIP='auto',pscmd=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/dmlc-core/tracker/dmlc_tracker/sge.py----------------------------------------
A:xgboost.dmlc-core.tracker.dmlc_tracker.sge.fo->open(runscript, 'w')
A:xgboost.dmlc-core.tracker.dmlc_tracker.sge.env_arg->','.join(['%s="%s"' % (k, str(v)) for (k, v) in pass_envs.items()])
xgboost.dmlc-core.tracker.dmlc_tracker.sge.submit(args)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/dmlc-core/tracker/dmlc_tracker/ssh.py----------------------------------------
A:xgboost.dmlc-core.tracker.dmlc_tracker.ssh.v->os.getenv(k)
A:xgboost.dmlc-core.tracker.dmlc_tracker.ssh.tmp->f.readlines()
A:xgboost.dmlc-core.tracker.dmlc_tracker.ssh.h->h.strip().strip()
A:xgboost.dmlc-core.tracker.dmlc_tracker.ssh.i->h.strip().strip().find(':')
A:xgboost.dmlc-core.tracker.dmlc_tracker.ssh.thread->Thread(target=run, args=(prog,))
xgboost.dmlc-core.tracker.dmlc_tracker.ssh.get_env(pass_envs)
xgboost.dmlc-core.tracker.dmlc_tracker.ssh.submit(args)
xgboost.dmlc-core.tracker.dmlc_tracker.ssh.sync_dir(local_dir,slave_node,slave_dir)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/dmlc-core/scripts/lint.py----------------------------------------
A:xgboost.dmlc-core.scripts.lint.CXX_SUFFIX->set(['cc', 'c', 'cpp', 'h', 'cu', 'hpp'])
A:xgboost.dmlc-core.scripts.lint.PYTHON_SUFFIX->set(['py'])
A:xgboost.dmlc-core.scripts.lint.npass->len([x for (k, x) in result_map.items() if len(x) == 0])
A:xgboost.dmlc-core.scripts.lint.self.pylint_cats->set(['error', 'warning', 'convention', 'refactor'])
A:xgboost.dmlc-core.scripts.lint._->cpplint.ParseArguments(cpplint_args)
A:xgboost.dmlc-core.scripts.lint.errors->cpplint._cpplint_state.errors_by_category.copy()
A:xgboost.dmlc-core.scripts.lint.(pylint_stdout, pylint_stderr)->pylint.epylint.py_run(' '.join([str(path)] + self.pylint_opts), return_std=True)
A:xgboost.dmlc-core.scripts.lint.err->pylint_stderr.read()
A:xgboost.dmlc-core.scripts.lint.key->line.split(':')[-1].split('(')[0].strip()
A:xgboost.dmlc-core.scripts.lint._HELPER->LintHelper()
A:xgboost.dmlc-core.scripts.lint.fileinfo->cpplint.FileInfo(filename)
A:xgboost.dmlc-core.scripts.lint.file_path_from_root->re.sub('^' + prefix, '', file_path_from_root)
A:xgboost.dmlc-core.scripts.lint.idx->re.sub('^' + prefix, '', file_path_from_root).find('src/')
A:xgboost.dmlc-core.scripts.lint.fname->str(fname)
A:xgboost.dmlc-core.scripts.lint.arr->str(fname).rsplit('.', 1)
A:xgboost.dmlc-core.scripts.lint.parser->argparse.ArgumentParser(description='lint source codes')
A:xgboost.dmlc-core.scripts.lint.args->argparse.ArgumentParser(description='lint source codes').parse_args()
A:xgboost.dmlc-core.scripts.lint.allow_type->set(allow_type)
A:xgboost.dmlc-core.scripts.lint.sys.stderr->codecs.StreamReaderWriter(sys.stderr, codecs.getreader('utf8'), codecs.getwriter('utf8'), 'replace')
A:xgboost.dmlc-core.scripts.lint.nerr->LintHelper().print_summary(sys.stderr)
xgboost.dmlc-core.scripts.lint.LintHelper(self)
xgboost.dmlc-core.scripts.lint.LintHelper.__init__(self)
xgboost.dmlc-core.scripts.lint.LintHelper._print_summary_map(strm,result_map,ftype)
xgboost.dmlc-core.scripts.lint.LintHelper.print_summary(self,strm)
xgboost.dmlc-core.scripts.lint.LintHelper.process_cpp(self,path,suffix)
xgboost.dmlc-core.scripts.lint.LintHelper.process_python(self,path)
xgboost.dmlc-core.scripts.lint.get_header_guard_dmlc(filename)
xgboost.dmlc-core.scripts.lint.main()
xgboost.dmlc-core.scripts.lint.process(fname,allow_type)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/dmlc-core/doc/conf.py----------------------------------------
A:xgboost.dmlc-core.doc.conf.curr_path->os.path.dirname(os.path.abspath(os.path.expanduser(__file__)))
A:xgboost.dmlc-core.doc.conf.retcode->subprocess.call('cp -rf doxygen/html _build/html/doxygen', shell=True)
xgboost.dmlc-core.doc.conf.generate_doxygen_xml(app)
xgboost.dmlc-core.doc.conf.run_doxygen(folder)
xgboost.dmlc-core.doc.conf.setup(app)


----------------------------------------/dataset/nuaa/anaconda3/envs/xgboost0.71/lib/python3.6/site-packages/xgboost/dmlc-core/doc/sphinx_util.py----------------------------------------

