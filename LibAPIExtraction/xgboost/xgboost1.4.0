
----------------------------------------/home/zhang/Packages/xgboost/xgboost1.4.0/dask.py----------------------------------------
A:xgboost.dask.dd->LazyLoader('dd', globals(), 'dask.dataframe')
A:xgboost.dask.da->LazyLoader('da', globals(), 'dask.array')
A:xgboost.dask.dask->LazyLoader('dask', globals(), 'dask')
A:xgboost.dask.distributed->LazyLoader('distributed', globals(), 'dask.distributed')
A:xgboost.dask.TrainReturnT->TypedDict('TrainReturnT', {'booster': Booster, 'history': Dict})
A:xgboost.dask.LOGGER->logging.getLogger('[xgboost.dask]')
A:xgboost.dask.host->get_host_ip('auto')
A:xgboost.dask.rabit_context->RabitTracker(hostIP=host, nslave=n_workers)
A:xgboost.dask.thread->Thread(target=rabit_context.join)
A:xgboost.dask.worker->LazyLoader('distributed', globals(), 'dask.distributed').get_worker()
A:xgboost.dask.d->DMatrix(numpy.empty((0, 0)), feature_names=feature_names, feature_types=feature_types)
A:xgboost.dask.client->_xgb_get_client(self._client)
A:xgboost.dask.self._init->_xgb_get_client(self._client).sync(self._map_local_data, client, data, label=label, weights=weight, base_margin=base_margin, qid=qid, feature_weights=feature_weights, label_lower_bound=label_lower_bound, label_upper_bound=label_upper_bound)
A:xgboost.dask.msg->'worker {address} has an empty DMatrix.  '.format(address=worker.address)
A:xgboost.dask.data->_xgb_get_client(self._client).persist(data)
A:xgboost.dask.meta->_xgb_get_client(self._client).persist(meta)
A:xgboost.dask.X_parts->X_parts.flatten().tolist().flatten().tolist()
A:xgboost.dask.meta_parts->meta_parts.flatten().tolist().flatten().tolist()
A:xgboost.dask.y_parts->flatten_meta(label)
A:xgboost.dask.w_parts->flatten_meta(weights)
A:xgboost.dask.margin_parts->flatten_meta(base_margin)
A:xgboost.dask.qid_parts->flatten_meta(qid)
A:xgboost.dask.ll_parts->flatten_meta(label_lower_bound)
A:xgboost.dask.lu_parts->flatten_meta(label_upper_bound)
A:xgboost.dask.parts->_xgb_get_client(self._client).compute(parts)
A:xgboost.dask.partitions->_get_worker_parts_ordered(meta_names, list_of_parts)
A:xgboost.dask.partitions_unzipped->_unzip(partitions)
A:xgboost.dask.feature_names->self.data().columns.format()
A:xgboost.dask.args->locals()
A:xgboost.dask.(data, labels, weights, base_margin, qid, label_lower_bound, label_upper_bound)->_get_worker_parts(list_of_parts, meta_names)
A:xgboost.dask.it->DaskPartitionIter(data=data, label=labels, weight=weights, base_margin=base_margin, qid=qid, label_lower_bound=label_lower_bound, label_upper_bound=label_upper_bound)
A:xgboost.dask.dmatrix->DMatrix(_data, _labels, missing=missing, feature_names=feature_names, feature_types=feature_types, nthread=worker.nthreads)
A:xgboost.dask.T->TypeVar('T')
A:xgboost.dask._labels->concat_or_none(labels)
A:xgboost.dask._weights->concat_or_none(weights)
A:xgboost.dask._base_margin->concat_or_none(base_margin)
A:xgboost.dask._qid->concat_or_none(qid)
A:xgboost.dask._label_lower_bound->concat_or_none(label_lower_bound)
A:xgboost.dask._label_upper_bound->concat_or_none(label_upper_bound)
A:xgboost.dask._data->concat(data)
A:xgboost.dask.worker_map->set(e[0].worker_map.keys())
A:xgboost.dask.X_worker_map->X_worker_map.union(worker_map).union(worker_map)
A:xgboost.dask.workers->_get_workers_from_data(dtrain, evals)
A:xgboost.dask.local_dtrain->_dmatrix_from_list_of_parts(**dtrain_ref)
A:xgboost.dask.local_param->super().get_xgb_params().copy()
A:xgboost.dask.val->super().get_xgb_params().copy().get(p, None)
A:xgboost.dask.bst->worker_train(params=local_param, dtrain=local_dtrain, num_boost_round=num_boost_round, evals_result=local_history, evals=local_evals, obj=obj, feval=feval, early_stopping_rounds=early_stopping_rounds, verbose_eval=verbose_eval, xgb_model=xgb_model, callbacks=callbacks)
A:xgboost.dask.f->_xgb_get_client(self._client).submit(dispatched_predict, _booster, part)
A:xgboost.dask.columns->list(meta.keys())
A:xgboost.dask.predictions->LazyLoader('da', globals(), 'dask.array').concatenate(arrays, axis=0)
A:xgboost.dask.new_axis->list(range(len(output_shape) - 2))
A:xgboost.dask.chunks->list(data.chunks)
A:xgboost.dask.rng->numpy.random.RandomState(1994)
A:xgboost.dask.test_sample->numpy.random.RandomState(1994).randn(1, features)
A:xgboost.dask.kwargs->kwargs.copy().copy()
A:xgboost.dask.m->DaskDMatrix(client=client, **kwargs)
A:xgboost.dask.test_predt->booster.predict(m, validate_features=False, **kwargs)
A:xgboost.dask.predt->booster.predict(m, output_margin=output_margin, pred_leaf=pred_leaf, pred_contribs=pred_contribs, approx_contribs=approx_contribs, pred_interactions=pred_interactions, validate_features=validate_features)
A:xgboost.dask.workers_address->list(data.worker_map.keys())
A:xgboost.dask.s->_xgb_get_client(self._client).submit(lambda part: part[0].shape[0], part)
A:xgboost.dask.parts_with_order->sorted(parts_with_order, key=lambda p: p[2])
A:xgboost.dask.prediction->DataFrame(prediction, columns=columns, dtype=numpy.float32)
A:xgboost.dask.(train_dmatrix, evals)->_wrap_evaluation_matrices(create_dmatrix=_inner, **kwargs)
A:xgboost.dask.iteration_range->self._get_iteration_range(iteration_range)
A:xgboost.dask.predts->predts.to_dask_array().to_dask_array()
A:xgboost.dask.this->self.__dict__.copy()
A:xgboost.dask.asynchronous->getattr(self, '_asynchronous', False)
A:xgboost.dask.ret->self.__dict__.copy().client.sync(func, **kwargs, asynchronous=asynchronous)
A:xgboost.dask.params->super().get_xgb_params()
A:xgboost.dask.obj->_objective_decorator(self.objective)
A:xgboost.dask.(model, metric, params)->self._configure_fit(booster=xgb_model, eval_metric=eval_metric, params=params)
A:xgboost.dask.self.n_classes_->len(self.classes_)
A:xgboost.dask.vstack->update_wrapper(partial(da.vstack, allow_unknown_chunksizes=True), da.vstack)
A:xgboost.dask.preds->LazyLoader('da', globals(), 'dask.array').map_blocks(_argmax, pred_probs, drop_axis=1)
xgboost.dask.DaskDMatrix(self,client:'distributed.Client',data:_DaskCollection,label:Optional[_DaskCollection]=None,*,weight:Optional[_DaskCollection]=None,base_margin:Optional[_DaskCollection]=None,missing:float=None,silent:bool=False,feature_names:Optional[Union[str,List[str]]]=None,feature_types:Optional[Union[Any,List[Any]]]=None,group:Optional[_DaskCollection]=None,qid:Optional[_DaskCollection]=None,label_lower_bound:Optional[_DaskCollection]=None,label_upper_bound:Optional[_DaskCollection]=None,feature_weights:Optional[_DaskCollection]=None,enable_categorical:bool=False)
xgboost.dask.DaskDMatrix.__await__(self)->Generator
xgboost.dask.DaskDMatrix.__init__(self,client:'distributed.Client',data:_DaskCollection,label:Optional[_DaskCollection]=None,*,weight:Optional[_DaskCollection]=None,base_margin:Optional[_DaskCollection]=None,missing:float=None,silent:bool=False,feature_names:Optional[Union[str,List[str]]]=None,feature_types:Optional[Union[Any,List[Any]]]=None,group:Optional[_DaskCollection]=None,qid:Optional[_DaskCollection]=None,label_lower_bound:Optional[_DaskCollection]=None,label_upper_bound:Optional[_DaskCollection]=None,feature_weights:Optional[_DaskCollection]=None,enable_categorical:bool=False)
xgboost.dask.DaskDMatrix._create_fn_args(self,worker_addr:str)->Dict[str, Any]
xgboost.dask.DaskDMatrix.num_col(self)->int
xgboost.dask.DaskDeviceQuantileDMatrix(self,client:'distributed.Client',data:_DaskCollection,label:Optional[_DaskCollection]=None,*,weight:Optional[_DaskCollection]=None,base_margin:Optional[_DaskCollection]=None,missing:float=None,silent:bool=False,feature_names:Optional[Union[str,List[str]]]=None,feature_types:Optional[Union[Any,List[Any]]]=None,max_bin:int=256,group:Optional[_DaskCollection]=None,qid:Optional[_DaskCollection]=None,label_lower_bound:Optional[_DaskCollection]=None,label_upper_bound:Optional[_DaskCollection]=None,feature_weights:Optional[_DaskCollection]=None,enable_categorical:bool=False)
xgboost.dask.DaskDeviceQuantileDMatrix.__init__(self,client:'distributed.Client',data:_DaskCollection,label:Optional[_DaskCollection]=None,*,weight:Optional[_DaskCollection]=None,base_margin:Optional[_DaskCollection]=None,missing:float=None,silent:bool=False,feature_names:Optional[Union[str,List[str]]]=None,feature_types:Optional[Union[Any,List[Any]]]=None,max_bin:int=256,group:Optional[_DaskCollection]=None,qid:Optional[_DaskCollection]=None,label_lower_bound:Optional[_DaskCollection]=None,label_upper_bound:Optional[_DaskCollection]=None,feature_weights:Optional[_DaskCollection]=None,enable_categorical:bool=False)
xgboost.dask.DaskDeviceQuantileDMatrix._create_fn_args(self,worker_addr:str)->Dict[str, Any]
xgboost.dask.DaskPartitionIter(self,data:Tuple[Any,...],label:Optional[Tuple[Any,...]]=None,weight:Optional[Tuple[Any,...]]=None,base_margin:Optional[Tuple[Any,...]]=None,qid:Optional[Tuple[Any,...]]=None,label_lower_bound:Optional[Tuple[Any,...]]=None,label_upper_bound:Optional[Tuple[Any,...]]=None,feature_names:Optional[Union[str,List[str]]]=None,feature_types:Optional[Union[Any,List[Any]]]=None)
xgboost.dask.DaskPartitionIter.__init__(self,data:Tuple[Any,...],label:Optional[Tuple[Any,...]]=None,weight:Optional[Tuple[Any,...]]=None,base_margin:Optional[Tuple[Any,...]]=None,qid:Optional[Tuple[Any,...]]=None,label_lower_bound:Optional[Tuple[Any,...]]=None,label_upper_bound:Optional[Tuple[Any,...]]=None,feature_names:Optional[Union[str,List[str]]]=None,feature_types:Optional[Union[Any,List[Any]]]=None)
xgboost.dask.DaskPartitionIter.base_margins(self)->Any
xgboost.dask.DaskPartitionIter.data(self)->Any
xgboost.dask.DaskPartitionIter.label_lower_bounds(self)->Any
xgboost.dask.DaskPartitionIter.label_upper_bounds(self)->Any
xgboost.dask.DaskPartitionIter.labels(self)->Any
xgboost.dask.DaskPartitionIter.next(self,input_data:Callable)->int
xgboost.dask.DaskPartitionIter.qids(self)->Any
xgboost.dask.DaskPartitionIter.reset(self)->None
xgboost.dask.DaskPartitionIter.weights(self)->Any
xgboost.dask.DaskScikitLearnBase(XGBModel)
xgboost.dask.DaskScikitLearnBase.__await__(self)->Awaitable[Any]
xgboost.dask.DaskScikitLearnBase.__getstate__(self)->Dict
xgboost.dask.DaskScikitLearnBase._client_sync(self,func:Callable,**kwargs:Any)->Any
xgboost.dask.DaskScikitLearnBase.apply(self,X:_DaskCollection,ntree_limit:Optional[int]=None,iteration_range:Optional[Tuple[int,int]]=None)->Any
xgboost.dask.DaskScikitLearnBase.client(self)->'distributed.Client'
xgboost.dask.DaskScikitLearnBase.client(self,clt:'distributed.Client')->None
xgboost.dask.DaskScikitLearnBase.predict(self,X:_DaskCollection,output_margin:bool=False,ntree_limit:Optional[int]=None,validate_features:bool=True,base_margin:Optional[_DaskCollection]=None,iteration_range:Optional[Tuple[int,int]]=None)->Any
xgboost.dask.DaskXGBClassifier(DaskScikitLearnBase,XGBClassifierBase)
xgboost.dask.DaskXGBClassifier.fit(self,X:_DaskCollection,y:_DaskCollection,*,sample_weight:Optional[_DaskCollection]=None,base_margin:Optional[_DaskCollection]=None,eval_set:Optional[List[Tuple[_DaskCollection,_DaskCollection]]]=None,eval_metric:Optional[Union[str,List[str],Metric]]=None,early_stopping_rounds:Optional[int]=None,verbose:bool=True,xgb_model:Optional[Union[Booster,XGBModel]]=None,sample_weight_eval_set:Optional[List[_DaskCollection]]=None,base_margin_eval_set:Optional[List[_DaskCollection]]=None,feature_weights:Optional[_DaskCollection]=None,callbacks:Optional[List[TrainingCallback]]=None)->'DaskXGBClassifier'
xgboost.dask.DaskXGBClassifier.predict_proba(self,X:_DaskCollection,ntree_limit:Optional[int]=None,validate_features:bool=True,base_margin:Optional[_DaskCollection]=None,iteration_range:Optional[Tuple[int,int]]=None)->Any
xgboost.dask.DaskXGBRFClassifier(self,*,learning_rate:Optional[float]=1,subsample:Optional[float]=0.8,colsample_bynode:Optional[float]=0.8,reg_lambda:Optional[float]=1e-05,**kwargs:Any)
xgboost.dask.DaskXGBRFClassifier.__init__(self,*,learning_rate:Optional[float]=1,subsample:Optional[float]=0.8,colsample_bynode:Optional[float]=0.8,reg_lambda:Optional[float]=1e-05,**kwargs:Any)
xgboost.dask.DaskXGBRFClassifier.get_num_boosting_rounds(self)->int
xgboost.dask.DaskXGBRFClassifier.get_xgb_params(self)->Dict[str, Any]
xgboost.dask.DaskXGBRFRegressor(self,*,learning_rate:Optional[float]=1,subsample:Optional[float]=0.8,colsample_bynode:Optional[float]=0.8,reg_lambda:Optional[float]=1e-05,**kwargs:Any)
xgboost.dask.DaskXGBRFRegressor.__init__(self,*,learning_rate:Optional[float]=1,subsample:Optional[float]=0.8,colsample_bynode:Optional[float]=0.8,reg_lambda:Optional[float]=1e-05,**kwargs:Any)
xgboost.dask.DaskXGBRFRegressor.get_num_boosting_rounds(self)->int
xgboost.dask.DaskXGBRFRegressor.get_xgb_params(self)->Dict[str, Any]
xgboost.dask.DaskXGBRanker(self,*,objective:str='rank:pairwise',**kwargs:Any)
xgboost.dask.DaskXGBRanker.__init__(self,*,objective:str='rank:pairwise',**kwargs:Any)
xgboost.dask.DaskXGBRanker.fit(self,X:_DaskCollection,y:_DaskCollection,*,group:Optional[_DaskCollection]=None,qid:Optional[_DaskCollection]=None,sample_weight:Optional[_DaskCollection]=None,base_margin:Optional[_DaskCollection]=None,eval_set:Optional[List[Tuple[_DaskCollection,_DaskCollection]]]=None,eval_group:Optional[List[_DaskCollection]]=None,eval_qid:Optional[List[_DaskCollection]]=None,eval_metric:Optional[Union[str,List[str],Metric]]=None,early_stopping_rounds:int=None,verbose:bool=False,xgb_model:Optional[Union[XGBModel,Booster]]=None,sample_weight_eval_set:Optional[List[_DaskCollection]]=None,base_margin_eval_set:Optional[List[_DaskCollection]]=None,feature_weights:Optional[_DaskCollection]=None,callbacks:Optional[List[TrainingCallback]]=None)->'DaskXGBRanker'
xgboost.dask.DaskXGBRegressor(DaskScikitLearnBase,XGBRegressorBase)
xgboost.dask.DaskXGBRegressor.fit(self,X:_DaskCollection,y:_DaskCollection,*,sample_weight:Optional[_DaskCollection]=None,base_margin:Optional[_DaskCollection]=None,eval_set:Optional[List[Tuple[_DaskCollection,_DaskCollection]]]=None,eval_metric:Optional[Union[str,List[str],Metric]]=None,early_stopping_rounds:Optional[int]=None,verbose:bool=True,xgb_model:Optional[Union[Booster,XGBModel]]=None,sample_weight_eval_set:Optional[List[_DaskCollection]]=None,base_margin_eval_set:Optional[List[_DaskCollection]]=None,feature_weights:Optional[_DaskCollection]=None,callbacks:Optional[List[TrainingCallback]]=None)->'DaskXGBRegressor'
xgboost.dask.RabitContext(self,args:List[bytes])
xgboost.dask.RabitContext.__enter__(self)->None
xgboost.dask.RabitContext.__exit__(self,*args:List)->None
xgboost.dask.RabitContext.__init__(self,args:List[bytes])
xgboost.dask._assert_dask_support()->None
xgboost.dask._can_output_df(is_df:bool,output_shape:Tuple)->bool
xgboost.dask._create_device_quantile_dmatrix(feature_names:Optional[Union[str,List[str]]],feature_types:Optional[Union[Any,List[Any]]],feature_weights:Optional[Any],meta_names:List[str],missing:float,parts:Optional[_DataParts],max_bin:int)->DeviceQuantileDMatrix
xgboost.dask._create_dmatrix(feature_names:Optional[Union[str,List[str]]],feature_types:Optional[Union[Any,List[Any]]],feature_weights:Optional[Any],meta_names:List[str],missing:float,parts:Optional[_DataParts])->DMatrix
xgboost.dask._dmatrix_from_list_of_parts(is_quantile:bool,**kwargs:Any)->Union[DMatrix, DeviceQuantileDMatrix]
xgboost.dask._get_worker_parts(list_of_parts:_DataParts,meta_names:List[str])->List[Tuple[Any, ...]]
xgboost.dask._get_worker_parts_ordered(meta_names:List[str],list_of_parts:_DataParts)->_DataParts
xgboost.dask._get_workers_from_data(dtrain:DaskDMatrix,evals:Optional[List[Tuple[DaskDMatrix,str]]])->List[str]
xgboost.dask._infer_predict_output(booster:Booster,features:int,is_df:bool,inplace:bool,**kwargs:Any)->Tuple[Tuple[int, ...], Dict[int, str]]
xgboost.dask._multi_lock()->Any
xgboost.dask._set_worker_client(model:'DaskScikitLearnBase',client:'distributed.Client')->Generator
xgboost.dask._start_tracker(n_workers:int)->Dict[str, Any]
xgboost.dask._unzip(list_of_parts:_DataParts)->List[Tuple[Any, ...]]
xgboost.dask._xgb_get_client(client:Optional['distributed.Client'])->'distributed.Client'
xgboost.dask.concat(value:Any)->Any
xgboost.dask.inplace_predict(client:'distributed.Client',model:Union[TrainReturnT,Booster,'distributed.Future'],data:_DaskCollection,iteration_range:Tuple[int,int]=(0,0),predict_type:str='value',missing:float=numpy.nan,validate_features:bool=True,base_margin:Optional[_DaskCollection]=None,strict_shape:bool=False)->Any
xgboost.dask.predict(client:'distributed.Client',model:Union[TrainReturnT,Booster,'distributed.Future'],data:Union[DaskDMatrix,_DaskCollection],output_margin:bool=False,missing:float=numpy.nan,pred_leaf:bool=False,pred_contribs:bool=False,approx_contribs:bool=False,pred_interactions:bool=False,validate_features:bool=True,iteration_range:Tuple[int,int]=(0,0),strict_shape:bool=False)->Any
xgboost.dask.train(client:'distributed.Client',params:Dict[str,Any],dtrain:DaskDMatrix,num_boost_round:int=10,evals:Optional[List[Tuple[DaskDMatrix,str]]]=None,obj:Optional[Objective]=None,feval:Optional[Metric]=None,early_stopping_rounds:Optional[int]=None,xgb_model:Optional[Booster]=None,verbose_eval:Union[int,bool]=True,callbacks:Optional[List[TrainingCallback]]=None)->Any


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.4.0/sklearn.py----------------------------------------
A:xgboost.sklearn.labels->dmatrix.get_label()
A:xgboost.sklearn.cls.__doc__->''.join(full_doc)
A:xgboost.sklearn.train_dmatrix->create_dmatrix(data=X, label=label_transform(y), group=group, qid=qid, weight=sample_weight, base_margin=base_margin, feature_weights=feature_weights, missing=missing)
A:xgboost.sklearn.sample_weight_eval_set->validate_or_none(sample_weight_eval_set, 'sample_weight_eval_set')
A:xgboost.sklearn.base_margin_eval_set->validate_or_none(base_margin_eval_set, 'base_margin_eval_set')
A:xgboost.sklearn.eval_group->validate_or_none(eval_group, 'eval_group')
A:xgboost.sklearn.eval_qid->validate_or_none(eval_qid, 'eval_qid')
A:xgboost.sklearn.m->create_dmatrix(data=valid_X, label=label_transform(valid_y), weight=sample_weight_eval_set[i], group=eval_group[i], qid=eval_qid[i], base_margin=base_margin_eval_set[i], missing=missing)
A:xgboost.sklearn.nevals->len(evals)
A:xgboost.sklearn.evals->list(zip(evals, eval_names))
A:xgboost.sklearn.parameters->self.get_xgb_params()
A:xgboost.sklearn.params->self.get_xgb_params()
A:xgboost.sklearn.cp->copy.copy(self)
A:xgboost.sklearn.params['random_state']->params['random_state'].randint(np.iinfo(np.int32).max).randint(np.iinfo(np.int32).max)
A:xgboost.sklearn.ret->t(value)
A:xgboost.sklearn.config->json.loads(self.get_booster().save_config())
A:xgboost.sklearn.obj->_objective_decorator(self.objective)
A:xgboost.sklearn.params[k]->parse_parameter(v)
A:xgboost.sklearn.filtered->dict()
A:xgboost.sklearn.meta->json.loads(meta)
A:xgboost.sklearn.meta['_le']->self._le.to_json()
A:xgboost.sklearn.meta['classes_']->self.classes_.tolist()
A:xgboost.sklearn.meta['_estimator_type']->self._get_type()
A:xgboost.sklearn.meta_str->json.dumps(meta)
A:xgboost.sklearn.self._Booster->train(params, train_dmatrix, self.n_estimators, early_stopping_rounds=early_stopping_rounds, evals=evals, evals_result=evals_result, feval=feval, verbose_eval=verbose, xgb_model=model, callbacks=callbacks)
A:xgboost.sklearn.states->dict()
A:xgboost.sklearn.self._le->XGBoostLabelEncoder().fit(y)
A:xgboost.sklearn.self.classes_->numpy.unique(y)
A:xgboost.sklearn.self.use_label_encoder->bool(v)
A:xgboost.sklearn.(train_dmatrix, evals)->_wrap_evaluation_matrices(missing=self.missing, X=X, y=y, group=group, qid=qid, sample_weight=sample_weight, base_margin=base_margin, feature_weights=feature_weights, eval_set=eval_set, sample_weight_eval_set=sample_weight_eval_set, base_margin_eval_set=base_margin_eval_set, eval_group=eval_group, eval_qid=eval_qid, create_dmatrix=lambda **kwargs: DMatrix(nthread=self.n_jobs, **kwargs))
A:xgboost.sklearn.(model, feval, params)->self._configure_fit(xgb_model, eval_metric, params)
A:xgboost.sklearn.iteration_range->self._get_iteration_range(iteration_range)
A:xgboost.sklearn.predts->cupy.asnumpy(predts)
A:xgboost.sklearn.test->DMatrix(X, base_margin=base_margin, missing=self.missing, nthread=self.n_jobs)
A:xgboost.sklearn.test_dmatrix->DMatrix(X, missing=self.missing, nthread=self.n_jobs)
A:xgboost.sklearn.booster->self.get_booster()
A:xgboost.sklearn.score->self.get_booster().get_score(importance_type=self.importance_type)
A:xgboost.sklearn.all_features->numpy.array(all_features, dtype=np.float32)
A:xgboost.sklearn.total->numpy.array(all_features, dtype=np.float32).sum()
A:xgboost.sklearn.b->self.get_booster()
A:xgboost.sklearn.coef->coef.reshape((n_classes, -1)).reshape((n_classes, -1))
A:xgboost.sklearn.n_classes->getattr(self, 'n_classes_', None)
A:xgboost.sklearn.PredtT->TypeVar('PredtT')
A:xgboost.sklearn.self.n_classes_->len(self.classes_)
A:xgboost.sklearn.expected_classes->copy.copy(self).arange(self.n_classes_)
A:xgboost.sklearn.fit.__doc__->XGBModel.fit.__doc__.replace('Fit gradient boosting model', 'Fit gradient boosting classifier', 1)
A:xgboost.sklearn.class_probs->super().predict(X=X, output_margin=self.objective == 'multi:softmax', ntree_limit=ntree_limit, validate_features=validate_features, base_margin=base_margin, iteration_range=iteration_range)
A:xgboost.sklearn.column_indexes->numpy.repeat(0, class_probs.shape[0])
xgboost.XGBClassifier(self,*,objective='binary:logistic',use_label_encoder=True,**kwargs)
xgboost.XGBClassifier.evals_result(self)
xgboost.XGBClassifier.fit(self,X,y,*,sample_weight=None,base_margin=None,eval_set=None,eval_metric=None,early_stopping_rounds=None,verbose=True,xgb_model=None,sample_weight_eval_set=None,base_margin_eval_set=None,feature_weights=None,callbacks=None)
xgboost.XGBClassifier.predict(self,X,output_margin=False,ntree_limit=None,validate_features=True,base_margin=None,iteration_range:Optional[Tuple[int,int]]=None)
xgboost.XGBClassifier.predict_proba(self,X,ntree_limit=None,validate_features=False,base_margin=None,iteration_range:Optional[Tuple[int,int]]=None)->np.ndarray
xgboost.XGBModel(self,max_depth=None,learning_rate=None,n_estimators=100,verbosity=None,objective=None,booster=None,tree_method=None,n_jobs=None,gamma=None,min_child_weight=None,max_delta_step=None,subsample=None,colsample_bytree=None,colsample_bylevel=None,colsample_bynode=None,reg_alpha=None,reg_lambda=None,scale_pos_weight=None,base_score=None,random_state=None,missing=np.nan,num_parallel_tree=None,monotone_constraints=None,interaction_constraints=None,importance_type='gain',gpu_id=None,validate_parameters=None,**kwargs)
xgboost.XGBModel._can_use_inplace_predict(self)->bool
xgboost.XGBModel._configure_fit(self,booster:Optional[Union[Booster,'XGBModel']],eval_metric:Optional[Union[Callable,str,List[str]]],params:Dict[str,Any])->Tuple[Booster, Optional[Metric], Dict[str, Any]]
xgboost.XGBModel._early_stopping_attr(self,attr:str)->Union[float, int]
xgboost.XGBModel._get_iteration_range(self,iteration_range:Optional[Tuple[int,int]])->Tuple[int, int]
xgboost.XGBModel._get_type(self)->str
xgboost.XGBModel._more_tags(self)
xgboost.XGBModel._set_evaluation_result(self,evals_result:Optional[dict])->None
xgboost.XGBModel.apply(self,X,ntree_limit:int=0,iteration_range:Optional[Tuple[int,int]]=None)->np.ndarray
xgboost.XGBModel.best_iteration(self)->int
xgboost.XGBModel.best_ntree_limit(self)->int
xgboost.XGBModel.best_score(self)->float
xgboost.XGBModel.coef_(self)
xgboost.XGBModel.evals_result(self)
xgboost.XGBModel.feature_importances_(self)
xgboost.XGBModel.fit(self,X,y,*,sample_weight=None,base_margin=None,eval_set=None,eval_metric=None,early_stopping_rounds=None,verbose=True,xgb_model:Optional[Union[Booster,str,'XGBModel']]=None,sample_weight_eval_set=None,base_margin_eval_set=None,feature_weights=None,callbacks=None)
xgboost.XGBModel.get_booster(self)
xgboost.XGBModel.get_num_boosting_rounds(self)
xgboost.XGBModel.get_params(self,deep=True)
xgboost.XGBModel.get_xgb_params(self)
xgboost.XGBModel.intercept_(self)
xgboost.XGBModel.load_model(self,fname)
xgboost.XGBModel.n_features_in_(self)->int
xgboost.XGBModel.predict(self,X,output_margin=False,ntree_limit=None,validate_features=True,base_margin=None,iteration_range=None)
xgboost.XGBModel.save_model(self,fname:str)
xgboost.XGBModel.set_params(self,**params)
xgboost.XGBRFClassifier(self,*,learning_rate=1,subsample=0.8,colsample_bynode=0.8,reg_lambda=1e-05,use_label_encoder=True,**kwargs)
xgboost.XGBRFClassifier.get_num_boosting_rounds(self)
xgboost.XGBRFClassifier.get_xgb_params(self)
xgboost.XGBRFRegressor(self,*,learning_rate=1,subsample=0.8,colsample_bynode=0.8,reg_lambda=1e-05,**kwargs)
xgboost.XGBRFRegressor.get_num_boosting_rounds(self)
xgboost.XGBRFRegressor.get_xgb_params(self)
xgboost.XGBRanker(self,*,objective='rank:pairwise',**kwargs)
xgboost.XGBRanker.fit(self,X,y,*,group=None,qid=None,sample_weight=None,base_margin=None,eval_set=None,eval_group=None,eval_qid=None,eval_metric=None,early_stopping_rounds=None,verbose=False,xgb_model:Optional[Union[Booster,str,XGBModel]]=None,sample_weight_eval_set=None,base_margin_eval_set=None,feature_weights=None,callbacks=None)->'XGBRanker'
xgboost.XGBRankerMixIn
xgboost.XGBRegressor(self,*,objective='reg:squarederror',**kwargs)
xgboost.sklearn.XGBClassifier(self,*,objective='binary:logistic',use_label_encoder=True,**kwargs)
xgboost.sklearn.XGBClassifier.__init__(self,*,objective='binary:logistic',use_label_encoder=True,**kwargs)
xgboost.sklearn.XGBClassifier.evals_result(self)
xgboost.sklearn.XGBClassifier.fit(self,X,y,*,sample_weight=None,base_margin=None,eval_set=None,eval_metric=None,early_stopping_rounds=None,verbose=True,xgb_model=None,sample_weight_eval_set=None,base_margin_eval_set=None,feature_weights=None,callbacks=None)
xgboost.sklearn.XGBClassifier.predict(self,X,output_margin=False,ntree_limit=None,validate_features=True,base_margin=None,iteration_range:Optional[Tuple[int,int]]=None)
xgboost.sklearn.XGBClassifier.predict_proba(self,X,ntree_limit=None,validate_features=False,base_margin=None,iteration_range:Optional[Tuple[int,int]]=None)->np.ndarray
xgboost.sklearn.XGBModel(self,max_depth=None,learning_rate=None,n_estimators=100,verbosity=None,objective=None,booster=None,tree_method=None,n_jobs=None,gamma=None,min_child_weight=None,max_delta_step=None,subsample=None,colsample_bytree=None,colsample_bylevel=None,colsample_bynode=None,reg_alpha=None,reg_lambda=None,scale_pos_weight=None,base_score=None,random_state=None,missing=np.nan,num_parallel_tree=None,monotone_constraints=None,interaction_constraints=None,importance_type='gain',gpu_id=None,validate_parameters=None,**kwargs)
xgboost.sklearn.XGBModel.__init__(self,max_depth=None,learning_rate=None,n_estimators=100,verbosity=None,objective=None,booster=None,tree_method=None,n_jobs=None,gamma=None,min_child_weight=None,max_delta_step=None,subsample=None,colsample_bytree=None,colsample_bylevel=None,colsample_bynode=None,reg_alpha=None,reg_lambda=None,scale_pos_weight=None,base_score=None,random_state=None,missing=np.nan,num_parallel_tree=None,monotone_constraints=None,interaction_constraints=None,importance_type='gain',gpu_id=None,validate_parameters=None,**kwargs)
xgboost.sklearn.XGBModel._can_use_inplace_predict(self)->bool
xgboost.sklearn.XGBModel._configure_fit(self,booster:Optional[Union[Booster,'XGBModel']],eval_metric:Optional[Union[Callable,str,List[str]]],params:Dict[str,Any])->Tuple[Booster, Optional[Metric], Dict[str, Any]]
xgboost.sklearn.XGBModel._early_stopping_attr(self,attr:str)->Union[float, int]
xgboost.sklearn.XGBModel._get_iteration_range(self,iteration_range:Optional[Tuple[int,int]])->Tuple[int, int]
xgboost.sklearn.XGBModel._get_type(self)->str
xgboost.sklearn.XGBModel._more_tags(self)
xgboost.sklearn.XGBModel._set_evaluation_result(self,evals_result:Optional[dict])->None
xgboost.sklearn.XGBModel.apply(self,X,ntree_limit:int=0,iteration_range:Optional[Tuple[int,int]]=None)->np.ndarray
xgboost.sklearn.XGBModel.best_iteration(self)->int
xgboost.sklearn.XGBModel.best_ntree_limit(self)->int
xgboost.sklearn.XGBModel.best_score(self)->float
xgboost.sklearn.XGBModel.coef_(self)
xgboost.sklearn.XGBModel.evals_result(self)
xgboost.sklearn.XGBModel.feature_importances_(self)
xgboost.sklearn.XGBModel.fit(self,X,y,*,sample_weight=None,base_margin=None,eval_set=None,eval_metric=None,early_stopping_rounds=None,verbose=True,xgb_model:Optional[Union[Booster,str,'XGBModel']]=None,sample_weight_eval_set=None,base_margin_eval_set=None,feature_weights=None,callbacks=None)
xgboost.sklearn.XGBModel.get_booster(self)
xgboost.sklearn.XGBModel.get_num_boosting_rounds(self)
xgboost.sklearn.XGBModel.get_params(self,deep=True)
xgboost.sklearn.XGBModel.get_xgb_params(self)
xgboost.sklearn.XGBModel.intercept_(self)
xgboost.sklearn.XGBModel.load_model(self,fname)
xgboost.sklearn.XGBModel.n_features_in_(self)->int
xgboost.sklearn.XGBModel.predict(self,X,output_margin=False,ntree_limit=None,validate_features=True,base_margin=None,iteration_range=None)
xgboost.sklearn.XGBModel.save_model(self,fname:str)
xgboost.sklearn.XGBModel.set_params(self,**params)
xgboost.sklearn.XGBRFClassifier(self,*,learning_rate=1,subsample=0.8,colsample_bynode=0.8,reg_lambda=1e-05,use_label_encoder=True,**kwargs)
xgboost.sklearn.XGBRFClassifier.__init__(self,*,learning_rate=1,subsample=0.8,colsample_bynode=0.8,reg_lambda=1e-05,use_label_encoder=True,**kwargs)
xgboost.sklearn.XGBRFClassifier.get_num_boosting_rounds(self)
xgboost.sklearn.XGBRFClassifier.get_xgb_params(self)
xgboost.sklearn.XGBRFRegressor(self,*,learning_rate=1,subsample=0.8,colsample_bynode=0.8,reg_lambda=1e-05,**kwargs)
xgboost.sklearn.XGBRFRegressor.__init__(self,*,learning_rate=1,subsample=0.8,colsample_bynode=0.8,reg_lambda=1e-05,**kwargs)
xgboost.sklearn.XGBRFRegressor.get_num_boosting_rounds(self)
xgboost.sklearn.XGBRFRegressor.get_xgb_params(self)
xgboost.sklearn.XGBRanker(self,*,objective='rank:pairwise',**kwargs)
xgboost.sklearn.XGBRanker.__init__(self,*,objective='rank:pairwise',**kwargs)
xgboost.sklearn.XGBRanker.fit(self,X,y,*,group=None,qid=None,sample_weight=None,base_margin=None,eval_set=None,eval_group=None,eval_qid=None,eval_metric=None,early_stopping_rounds=None,verbose=False,xgb_model:Optional[Union[Booster,str,XGBModel]]=None,sample_weight_eval_set=None,base_margin_eval_set=None,feature_weights=None,callbacks=None)->'XGBRanker'
xgboost.sklearn.XGBRankerMixIn
xgboost.sklearn.XGBRegressor(self,*,objective='reg:squarederror',**kwargs)
xgboost.sklearn.XGBRegressor.__init__(self,*,objective='reg:squarederror',**kwargs)
xgboost.sklearn._cls_predict_proba(n_classes:int,prediction:PredtT,vstack:Callable)->PredtT
xgboost.sklearn._objective_decorator(func)
xgboost.sklearn._wrap_evaluation_matrices(missing:float,X:Any,y:Any,group:Optional[Any],qid:Optional[Any],sample_weight:Optional[Any],base_margin:Optional[Any],feature_weights:Optional[Any],eval_set:Optional[List[Tuple[Any,Any]]],sample_weight_eval_set:Optional[List[Any]],base_margin_eval_set:Optional[List[Any]],eval_group:Optional[List[Any]],eval_qid:Optional[List[Any]],create_dmatrix:Callable,label_transform:Callable=lambdax:x)->Tuple[Any, Optional[List[Tuple[Any, str]]]]
xgboost.sklearn.xgboost_model_doc(header,items,extra_parameters=None,end_note=None)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.4.0/tracker.py----------------------------------------
A:xgboost.tracker.chunk->self.sock.recv(min(nbytes - nread, 1024))
A:xgboost.tracker.slen->self.recvint()
A:xgboost.tracker.hostIP->socket.gethostbyname(socket.gethostname())
A:xgboost.tracker.s->SlaveEntry(fd, s_addr)
A:xgboost.tracker.slave->ExSocket(sock)
A:xgboost.tracker.self.host->get_some_ip(s_addr[0])
A:xgboost.tracker.magic->ExSocket(sock).recvint()
A:xgboost.tracker.self.rank->ExSocket(sock).recvint()
A:xgboost.tracker.self.world_size->ExSocket(sock).recvint()
A:xgboost.tracker.self.jobid->ExSocket(sock).recvstr()
A:xgboost.tracker.self.cmd->ExSocket(sock).recvstr()
A:xgboost.tracker.nnset->set(tree_map[rank])
A:xgboost.tracker.ngood->self.sock.recvint()
A:xgboost.tracker.goodset->set([])
A:xgboost.tracker.nerr->self.sock.recvint()
A:xgboost.tracker.self.port->self.sock.recvint()
A:xgboost.tracker.sock->socket.socket(get_family(hostIP), socket.SOCK_STREAM)
A:xgboost.tracker.tree_map[r]->self.get_neighbor(r, nslave)
A:xgboost.tracker.nset->set(tree_map[r])
A:xgboost.tracker.vlst->self.find_share_ring(tree_map, parent_map, v)
A:xgboost.tracker.rlst->self.find_share_ring(tree_map, parent_map, 0)
A:xgboost.tracker.nslave->len(tree_map)
A:xgboost.tracker.(tree_map, parent_map)->self.get_tree(nslave)
A:xgboost.tracker.ring_map->self.get_ring(tree_map, parent_map)
A:xgboost.tracker.(fd, s_addr)->self.sock.accept()
A:xgboost.tracker.msg->SlaveEntry(fd, s_addr).sock.recvstr()
A:xgboost.tracker.(tree_map, parent_map, ring_map)->self.get_link_map(nslave)
A:xgboost.tracker.todo_nodes->list(range(nslave))
A:xgboost.tracker.rank->list(range(nslave)).pop(0)
A:xgboost.tracker.self.start_time->time.time()
A:xgboost.tracker.self.end_time->time.time()
A:xgboost.tracker.self.thread->Thread(target=run, args=())
xgboost.RabitTracker(self,hostIP,nslave,port=9091,port_end=9999)
xgboost.RabitTracker.__del__(self)
xgboost.RabitTracker.accept_slaves(self,nslave)
xgboost.RabitTracker.alive(self)
xgboost.RabitTracker.find_share_ring(self,tree_map,parent_map,r)
xgboost.RabitTracker.get_link_map(self,nslave)
xgboost.RabitTracker.get_neighbor(rank,nslave)
xgboost.RabitTracker.get_ring(self,tree_map,parent_map)
xgboost.RabitTracker.get_tree(self,nslave)
xgboost.RabitTracker.join(self)
xgboost.RabitTracker.slave_envs(self)
xgboost.RabitTracker.start(self,nslave)
xgboost.tracker.ExSocket(self,sock)
xgboost.tracker.ExSocket.__init__(self,sock)
xgboost.tracker.ExSocket.recvall(self,nbytes)
xgboost.tracker.ExSocket.recvint(self)
xgboost.tracker.ExSocket.recvstr(self)
xgboost.tracker.ExSocket.sendint(self,n)
xgboost.tracker.ExSocket.sendstr(self,s)
xgboost.tracker.RabitTracker(self,hostIP,nslave,port=9091,port_end=9999)
xgboost.tracker.RabitTracker.__del__(self)
xgboost.tracker.RabitTracker.__init__(self,hostIP,nslave,port=9091,port_end=9999)
xgboost.tracker.RabitTracker.accept_slaves(self,nslave)
xgboost.tracker.RabitTracker.alive(self)
xgboost.tracker.RabitTracker.find_share_ring(self,tree_map,parent_map,r)
xgboost.tracker.RabitTracker.get_link_map(self,nslave)
xgboost.tracker.RabitTracker.get_neighbor(rank,nslave)
xgboost.tracker.RabitTracker.get_ring(self,tree_map,parent_map)
xgboost.tracker.RabitTracker.get_tree(self,nslave)
xgboost.tracker.RabitTracker.join(self)
xgboost.tracker.RabitTracker.slave_envs(self)
xgboost.tracker.RabitTracker.start(self,nslave)
xgboost.tracker.SlaveEntry(self,sock,s_addr)
xgboost.tracker.SlaveEntry.__init__(self,sock,s_addr)
xgboost.tracker.SlaveEntry.assign_rank(self,rank,wait_conn,tree_map,parent_map,ring_map)
xgboost.tracker.SlaveEntry.decide_rank(self,job_map)
xgboost.tracker.get_family(addr)
xgboost.tracker.get_host_ip(hostIP=None)
xgboost.tracker.get_some_ip(host)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.4.0/rabit.py----------------------------------------
A:xgboost.rabit.arr->(ctypes.c_char_p * len(args))()
A:xgboost.rabit.ret->core._LIB.RabitVersionNumber()
A:xgboost.rabit.is_dist->core._LIB.RabitIsDistributed()
A:xgboost.rabit.msg->str(msg)
A:xgboost.rabit.length->ctypes.c_ulong()
A:xgboost.rabit.buf->buf.copy().copy()
A:xgboost.rabit.rank->get_rank()
A:xgboost.rabit.s->pickle.dumps(data, protocol=pickle.HIGHEST_PROTOCOL)
A:xgboost.rabit.length.value->len(s)
A:xgboost.rabit.dptr->(ctypes.c_char * length.value)()
A:xgboost.rabit.data->pickle.loads(dptr.raw)
A:xgboost.rabit.func_ptr->ctypes.CFUNCTYPE(None, ctypes.c_void_p)
xgboost.rabit.Op
xgboost.rabit._init_rabit()
xgboost.rabit.allreduce(data,op,prepare_fun=None)
xgboost.rabit.broadcast(data,root)
xgboost.rabit.finalize()
xgboost.rabit.get_processor_name()
xgboost.rabit.get_rank()
xgboost.rabit.get_world_size()
xgboost.rabit.init(args=None)
xgboost.rabit.is_distributed()
xgboost.rabit.tracker_print(msg)
xgboost.rabit.version_number()


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.4.0/data.py----------------------------------------
A:xgboost.data.handle->ctypes.c_void_p()
A:xgboost.data.config->bytes(json.dumps(args), 'utf-8')
A:xgboost.data.data->_transform_dlpack(data)
A:xgboost.data.flatten->_maybe_np_slice(flatten, np.float32)
A:xgboost.data.feature_names->_transform_dlpack(data).columns.format()
A:xgboost.data.(data, feature_names, feature_types)->_transform_cudf_df(data, feature_names, feature_types)
A:xgboost.data.data_types_names->tuple((lt.name for lt in data.ltypes))
A:xgboost.data.feature_types->numpy.vectorize(_dt_type_mapper2.get)(data_types_names).tolist()
A:xgboost.data.ptrs->(ctypes.c_void_p * data.ncols)()
A:xgboost.data.col->_transform_dlpack(data).internal.column(icol)
A:xgboost.data.ptrs[icol]->frame_column_data_r(data, icol)
A:xgboost.data.feature_type_strings->(ctypes.c_char_p * data.ncols)()
A:xgboost.data.feature_type_strings[icol]->ctypes.c_char_p(data.stypes[icol].name.encode('utf-8'))
A:xgboost.data.interfaces_str->_cudf_array_interfaces(data)
A:xgboost.data.interface_str->bytes(json.dumps(interface, indent=2), 'utf-8')
A:xgboost.data.converted->_convert_unknown_data(data)
A:xgboost.data.c_type->_to_data_type(str(data.dtype), field)
A:xgboost.data.ptr->ctypes.c_void_p(ptr)
A:xgboost.data.interface->bytes(json.dumps([data.__cuda_array_interface__], indent=2), 'utf-8')
A:xgboost.data.(data, _, _)->_transform_pandas_df(data, False, meta=name, meta_type=dtype)
xgboost.data.SingleBatchInternalIter(self,data,label,weight,base_margin,group,qid,label_lower_bound,label_upper_bound,feature_weights,feature_names,feature_types)
xgboost.data.SingleBatchInternalIter.__init__(self,data,label,weight,base_margin,group,qid,label_lower_bound,label_upper_bound,feature_weights,feature_names,feature_types)
xgboost.data.SingleBatchInternalIter.next(self,input_data)
xgboost.data.SingleBatchInternalIter.reset(self)
xgboost.data._check_complex(data)
xgboost.data._convert_unknown_data(data)
xgboost.data._cudf_array_interfaces(data)
xgboost.data._device_quantile_transform(data,feature_names,feature_types)
xgboost.data._from_cudf_df(data,missing,nthread,feature_names,feature_types)
xgboost.data._from_cupy_array(data,missing,nthread,feature_names,feature_types)
xgboost.data._from_dlpack(data,missing,nthread,feature_names,feature_types)
xgboost.data._from_dt_df(data,missing,nthread,feature_names,feature_types)
xgboost.data._from_list(data,missing,feature_names,feature_types)
xgboost.data._from_numpy_array(data,missing,nthread,feature_names,feature_types)
xgboost.data._from_pandas_df(data,enable_categorical,missing,nthread,feature_names,feature_types)
xgboost.data._from_pandas_series(data,missing,nthread,feature_types,feature_names)
xgboost.data._from_scipy_csc(data,missing,feature_names,feature_types)
xgboost.data._from_scipy_csr(data,missing,nthread,feature_names,feature_types)
xgboost.data._from_tuple(data,missing,feature_names,feature_types)
xgboost.data._from_uri(data,missing,feature_names,feature_types)
xgboost.data._has_array_protocol(data)
xgboost.data._is_cudf_df(data)
xgboost.data._is_cudf_ser(data)
xgboost.data._is_cupy_array(data)
xgboost.data._is_cupy_csc(data)
xgboost.data._is_cupy_csr(data)
xgboost.data._is_dlpack(data)
xgboost.data._is_dt_df(data)
xgboost.data._is_iter(data)
xgboost.data._is_list(data)
xgboost.data._is_modin_df(data)
xgboost.data._is_modin_series(data)
xgboost.data._is_numpy_array(data)
xgboost.data._is_pandas_df(data)
xgboost.data._is_pandas_series(data)
xgboost.data._is_scipy_coo(data)
xgboost.data._is_scipy_csc(data)
xgboost.data._is_scipy_csr(data)
xgboost.data._is_tuple(data)
xgboost.data._is_uri(data)
xgboost.data._maybe_np_slice(data,dtype)
xgboost.data._meta_from_cudf_df(data,field,handle)
xgboost.data._meta_from_cudf_series(data,field,handle)
xgboost.data._meta_from_cupy_array(data,field,handle)
xgboost.data._meta_from_dt(data,field,dtype,handle)
xgboost.data._meta_from_list(data,field,dtype,handle)
xgboost.data._meta_from_numpy(data,field,dtype,handle)
xgboost.data._meta_from_tuple(data,field,dtype,handle)
xgboost.data._to_data_type(dtype:str,name:str)
xgboost.data._transform_cudf_df(data,feature_names,feature_types)
xgboost.data._transform_cupy_array(data)
xgboost.data._transform_dlpack(data)
xgboost.data._transform_dt_df(data,feature_names,feature_types,meta=None,meta_type=None)
xgboost.data._transform_np_array(data:np.ndarray)->np.ndarray
xgboost.data._transform_pandas_df(data,enable_categorical,feature_names=None,feature_types=None,meta=None,meta_type=None)
xgboost.data._validate_meta_shape(data)
xgboost.data._warn_unused_missing(data,missing)
xgboost.data.dispatch_data_backend(data,missing,threads,feature_names,feature_types,enable_categorical=False)
xgboost.data.dispatch_device_quantile_dmatrix_set_data(proxy:_ProxyDMatrix,data:Any)->None
xgboost.data.dispatch_meta_backend(matrix:DMatrix,data,name:str,dtype:str=None)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.4.0/core.py----------------------------------------
A:xgboost.core.CallbackEnv->collections.namedtuple('XGBoostCallbackEnv', ['model', 'cvfolds', 'iteration', 'begin_iteration', 'end_iteration', 'rank', 'evaluation_result_list'])
A:xgboost.core.pointers->(ctypes.c_char_p * len(data))()
A:xgboost.core.(num_parallel_tree, num_groups)->_get_booster_layer_trees(booster)
A:xgboost.core.num_parallel_tree->int(config['learner']['gradient_booster']['gbtree_train_param']['num_parallel_tree'])
A:xgboost.core.num_groups->int(config['learner']['learner_model_param']['num_class'])
A:xgboost.core.CALLBACK->ctypes.CFUNCTYPE(None, ctypes.c_char_p)
A:xgboost.core.lib_paths->find_lib_path()
A:xgboost.core.pathBackup->os.environ['PATH'].split(os.pathsep)
A:xgboost.core.os.environ['PATH']->os.pathsep.join(pathBackup)
A:xgboost.core.lib->ctypes.cdll.LoadLibrary(lib_path)
A:xgboost.core.libname->os.path.basename(lib_paths[0])
A:xgboost.core.lib.callback->_get_log_callback_func()
A:xgboost.core._LIB->_load_lib()
A:xgboost.core.interface_str->bytes(json.dumps(interface, indent=2), 'utf-8')
A:xgboost.core.ctype->_numpy2ctypes_type(dtype)
A:xgboost.core.res->from_cstr_to_pystr(sarr, length)
A:xgboost.core.unownd->UnownedMemory(addr, length * ctypes.sizeof(CUPY_TO_CTYPES_MAPPING[dtype]), owner=None)
A:xgboost.core.memptr->MemoryPointer(unownd, 0)
A:xgboost.core.mem->cupy.ndarray((length,), dtype=dtype, memptr=memptr)
A:xgboost.core.arr->line.split('[')
A:xgboost.core.rptr->(ctypes.c_char * length).from_buffer(res)
A:xgboost.core.length->c_bst_ulong()
A:xgboost.core.arr_predict->arr_predict.reshape(arr_shape).reshape(arr_shape)
A:xgboost.core.self._handle->_ProxyDMatrix()
A:xgboost.core.(data, feature_names, feature_types)->_device_quantile_transform(data, feature_names, feature_types)
A:xgboost.core.ret->self.get_dump(fmap, with_stats, dump_format)
A:xgboost.core.self.exception->e.with_traceback(tb)
A:xgboost.core.sig->signature(f)
A:xgboost.core.(handle, feature_names, feature_types)->dispatch_data_backend(data, missing=self.missing, threads=self.nthread, feature_names=feature_names, feature_types=feature_types, enable_categorical=enable_categorical)
A:xgboost.core.fname->from_pystr_to_cstr(self.feature_names)
A:xgboost.core.res.handle->ctypes.c_void_p()
A:xgboost.core.rindex->_maybe_np_slice(rindex, dtype=np.int32)
A:xgboost.core.sarr->ctypes.POINTER(ctypes.c_char_p)()
A:xgboost.core.feature_names->list(feature_names)
A:xgboost.core.c_feature_names->(ctypes.c_char_p * len(c_feature_names))(*c_feature_names)
A:xgboost.core.feature_types->list(feature_types)
A:xgboost.core.c_feature_types->(ctypes.c_char_p * len(c_feature_types))(*c_feature_types)
A:xgboost.core.self.handle->ctypes.c_void_p()
A:xgboost.core.interfaces_str->_cudf_array_interfaces(data)
A:xgboost.core.data->_transform_cupy_array(data)
A:xgboost.core.it->SingleBatchInternalIter(data, **meta, feature_names=feature_names, feature_types=feature_types)
A:xgboost.core.reset_callback->ctypes.CFUNCTYPE(None, ctypes.c_void_p)(it.reset_wrapper)
A:xgboost.core.next_callback->ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_void_p)(it.next_wrapper)
A:xgboost.core.handle->ctypes.c_void_p()
A:xgboost.core.config->json.loads(model.save_config())
A:xgboost.core.dmats->c_array(ctypes.c_void_p, [d[0].handle for d in evals])
A:xgboost.core.params->params.items().items()
A:xgboost.core.state->model_file.__getstate__()
A:xgboost.core.ptr->(ctypes.c_char * len(buf)).from_buffer(buf)
A:xgboost.core.this->self.__dict__.copy()
A:xgboost.core.cptr->ctypes.POINTER(ctypes.c_char)()
A:xgboost.core.buf->ctypes2buffer(cptr, length.value)
A:xgboost.core.val->slice(val, val + 1)
A:xgboost.core.msg->ctypes.c_char_p()
A:xgboost.core.start->ctypes.c_int(start)
A:xgboost.core.stop->ctypes.c_int(stop)
A:xgboost.core.step->ctypes.c_int(step)
A:xgboost.core.sliced_handle->ctypes.c_void_p()
A:xgboost.core.status->_load_lib().XGBoosterSlice(self.handle, start, stop, step, ctypes.byref(sliced_handle))
A:xgboost.core.sliced->Booster()
A:xgboost.core.json_string->json_string.value.decode().value.decode()
A:xgboost.core.success->ctypes.c_int()
A:xgboost.core.attr_names->from_cstr_to_pystr(sarr, length)
A:xgboost.core.value->c_str(str(value))
A:xgboost.core.feature_info->from_cstr_to_pystr(sarr, length)
A:xgboost.core.c_feature_info->(ctypes.c_char_p * len(c_feature_info))(*c_feature_info)
A:xgboost.core.pred->self.predict(dtrain, output_margin=True, training=True)
A:xgboost.core.(grad, hess)->fobj(pred, dtrain)
A:xgboost.core.evnames->c_array(ctypes.c_char_p, [c_str(d[1]) for d in evals])
A:xgboost.core.feval_ret->feval(self.predict(dmat, training=False, output_margin=True), dmat)
A:xgboost.core.iteration_range->_convert_ntree_limit(self, ntree_limit, iteration_range)
A:xgboost.core.preds->ctypes.POINTER(ctypes.c_float)()
A:xgboost.core.shape->ctypes.POINTER(c_bst_ulong)()
A:xgboost.core.dims->c_bst_ulong()
A:xgboost.core.proxy->_ProxyDMatrix()
A:xgboost.core.p_handle->ctypes.c_void_p()
A:xgboost.core.self.best_iteration->int(self.attr('best_iteration'))
A:xgboost.core.self.best_score->float(self.attr('best_score'))
A:xgboost.core.self.best_ntree_limit->int(self.attr('best_ntree_limit'))
A:xgboost.core.rounds->ctypes.c_int()
A:xgboost.core.features->ctypes.c_int()
A:xgboost.core.fout->open(fout, 'w')
A:xgboost.core.fmap->os.fspath(os.path.expanduser(fmap))
A:xgboost.core.flen->len(self.feature_names)
A:xgboost.core.ftype->from_pystr_to_cstr(self.feature_types)
A:xgboost.core.trees->self.get_dump(fmap, with_stats=True)
A:xgboost.core.fid->arr[1].split(']')
A:xgboost.core.g->float(fid[1].split(importance_type)[1].split(',')[0])
A:xgboost.core.parse->fid[0].split('<')
A:xgboost.core.stats->re.split('=|,', fid[1])
A:xgboost.core.str_i->str(i)
A:xgboost.core.df->DataFrame({'Tree': tree_ids, 'Node': node_ids, 'ID': ids, 'Feature': fids, 'Split': splits, 'Yes': y_directs, 'No': n_directs, 'Missing': missings, 'Gain': gains, 'Cover': covers})
A:xgboost.core.xgdump->self.get_dump(fmap=fmap)
A:xgboost.core.regexp->re.compile('\\[{0}<([\\d.Ee+-]+)\\]'.format(feature))
A:xgboost.core.m->re.findall(regexp, xgdump[i])
A:xgboost.core.n_unique->len(np.unique(values))
A:xgboost.core.bins->max(min(n_unique, bins) if bins is not None else n_unique, 1)
A:xgboost.core.nph->numpy.column_stack((nph[1][1:], nph[0]))
xgboost.Booster(self,params=None,cache=(),model_file=None)
xgboost.Booster.__copy__(self)
xgboost.Booster.__deepcopy__(self,_)
xgboost.Booster.__del__(self)
xgboost.Booster.__getitem__(self,val)
xgboost.Booster.__getstate__(self)
xgboost.Booster.__setstate__(self,state)
xgboost.Booster._configure_metrics(self,params:Union[Dict,List])->Union[Dict, List]
xgboost.Booster._get_feature_info(self,field:str)
xgboost.Booster._set_feature_info(self,features:Optional[List[str]],field:str)->None
xgboost.Booster._validate_features(self,data:DMatrix)
xgboost.Booster.attr(self,key)
xgboost.Booster.attributes(self)
xgboost.Booster.boost(self,dtrain,grad,hess)
xgboost.Booster.copy(self)
xgboost.Booster.dump_model(self,fout,fmap='',with_stats=False,dump_format='text')
xgboost.Booster.eval(self,data,name='eval',iteration=0)
xgboost.Booster.eval_set(self,evals,iteration=0,feval=None)
xgboost.Booster.feature_names(self)->Optional[List[str]]
xgboost.Booster.feature_names(self,features:Optional[List[str]])->None
xgboost.Booster.feature_types(self)->Optional[List[str]]
xgboost.Booster.feature_types(self,features:Optional[List[str]])->None
xgboost.Booster.get_dump(self,fmap='',with_stats=False,dump_format='text')
xgboost.Booster.get_fscore(self,fmap='')
xgboost.Booster.get_score(self,fmap='',importance_type='weight')
xgboost.Booster.get_split_value_histogram(self,feature,fmap='',bins=None,as_pandas=True)
xgboost.Booster.inplace_predict(self,data:Any,iteration_range:Tuple[int,int]=(0,0),predict_type:str='value',missing:float=np.nan,validate_features:bool=True,base_margin:Any=None,strict_shape:bool=False)
xgboost.Booster.load_config(self,config)
xgboost.Booster.load_model(self,fname)
xgboost.Booster.num_boosted_rounds(self)->int
xgboost.Booster.num_features(self)->int
xgboost.Booster.predict(self,data:DMatrix,output_margin:bool=False,ntree_limit:int=0,pred_leaf:bool=False,pred_contribs:bool=False,approx_contribs:bool=False,pred_interactions:bool=False,validate_features:bool=True,training:bool=False,iteration_range:Tuple[int,int]=(0,0),strict_shape:bool=False)->np.ndarray
xgboost.Booster.save_config(self)
xgboost.Booster.save_model(self,fname)
xgboost.Booster.save_raw(self)
xgboost.Booster.set_attr(self,**kwargs)
xgboost.Booster.set_param(self,params,value=None)
xgboost.Booster.trees_to_dataframe(self,fmap='')
xgboost.Booster.update(self,dtrain,iteration,fobj=None)
xgboost.DMatrix(self,data,label=None,*,weight=None,base_margin=None,missing:Optional[float]=None,silent=False,feature_names=None,feature_types=None,nthread:Optional[int]=None,group=None,qid=None,label_lower_bound=None,label_upper_bound=None,feature_weights=None,enable_categorical:bool=False)
xgboost.DMatrix.__del__(self)
xgboost.DMatrix.feature_names(self)->List[str]
xgboost.DMatrix.feature_names(self,feature_names:Optional[Union[List[str],str]])->None
xgboost.DMatrix.feature_types(self)->Optional[List[str]]
xgboost.DMatrix.feature_types(self,feature_types:Optional[Union[List[Any],Any]])->None
xgboost.DMatrix.get_base_margin(self)
xgboost.DMatrix.get_float_info(self,field)
xgboost.DMatrix.get_label(self)
xgboost.DMatrix.get_uint_info(self,field)
xgboost.DMatrix.get_weight(self)
xgboost.DMatrix.num_col(self)
xgboost.DMatrix.num_row(self)
xgboost.DMatrix.save_binary(self,fname,silent=True)
xgboost.DMatrix.set_base_margin(self,margin)
xgboost.DMatrix.set_float_info(self,field,data)
xgboost.DMatrix.set_float_info_npy2d(self,field,data)
xgboost.DMatrix.set_group(self,group)
xgboost.DMatrix.set_info(self,*,label=None,weight=None,base_margin=None,group=None,qid=None,label_lower_bound=None,label_upper_bound=None,feature_names=None,feature_types=None,feature_weights=None)->None
xgboost.DMatrix.set_label(self,label)
xgboost.DMatrix.set_uint_info(self,field,data)
xgboost.DMatrix.set_weight(self,weight)
xgboost.DMatrix.slice(self,rindex:Union[List[int],np.ndarray],allow_groups:bool=False)->'DMatrix'
xgboost.DeviceQuantileDMatrix(self,data,label=None,*,weight=None,base_margin=None,missing=None,silent=False,feature_names=None,feature_types=None,nthread:Optional[int]=None,max_bin:int=256,group=None,qid=None,label_lower_bound=None,label_upper_bound=None,feature_weights=None,enable_categorical:bool=False)
xgboost.DeviceQuantileDMatrix._init(self,data,feature_names,feature_types,**meta)
xgboost.core.Booster(self,params=None,cache=(),model_file=None)
xgboost.core.Booster.__copy__(self)
xgboost.core.Booster.__deepcopy__(self,_)
xgboost.core.Booster.__del__(self)
xgboost.core.Booster.__getitem__(self,val)
xgboost.core.Booster.__getstate__(self)
xgboost.core.Booster.__init__(self,params=None,cache=(),model_file=None)
xgboost.core.Booster.__setstate__(self,state)
xgboost.core.Booster._configure_metrics(self,params:Union[Dict,List])->Union[Dict, List]
xgboost.core.Booster._get_feature_info(self,field:str)
xgboost.core.Booster._set_feature_info(self,features:Optional[List[str]],field:str)->None
xgboost.core.Booster._validate_features(self,data:DMatrix)
xgboost.core.Booster.attr(self,key)
xgboost.core.Booster.attributes(self)
xgboost.core.Booster.boost(self,dtrain,grad,hess)
xgboost.core.Booster.copy(self)
xgboost.core.Booster.dump_model(self,fout,fmap='',with_stats=False,dump_format='text')
xgboost.core.Booster.eval(self,data,name='eval',iteration=0)
xgboost.core.Booster.eval_set(self,evals,iteration=0,feval=None)
xgboost.core.Booster.feature_names(self)->Optional[List[str]]
xgboost.core.Booster.feature_names(self,features:Optional[List[str]])->None
xgboost.core.Booster.feature_types(self)->Optional[List[str]]
xgboost.core.Booster.feature_types(self,features:Optional[List[str]])->None
xgboost.core.Booster.get_dump(self,fmap='',with_stats=False,dump_format='text')
xgboost.core.Booster.get_fscore(self,fmap='')
xgboost.core.Booster.get_score(self,fmap='',importance_type='weight')
xgboost.core.Booster.get_split_value_histogram(self,feature,fmap='',bins=None,as_pandas=True)
xgboost.core.Booster.inplace_predict(self,data:Any,iteration_range:Tuple[int,int]=(0,0),predict_type:str='value',missing:float=np.nan,validate_features:bool=True,base_margin:Any=None,strict_shape:bool=False)
xgboost.core.Booster.load_config(self,config)
xgboost.core.Booster.load_model(self,fname)
xgboost.core.Booster.num_boosted_rounds(self)->int
xgboost.core.Booster.num_features(self)->int
xgboost.core.Booster.predict(self,data:DMatrix,output_margin:bool=False,ntree_limit:int=0,pred_leaf:bool=False,pred_contribs:bool=False,approx_contribs:bool=False,pred_interactions:bool=False,validate_features:bool=True,training:bool=False,iteration_range:Tuple[int,int]=(0,0),strict_shape:bool=False)->np.ndarray
xgboost.core.Booster.save_config(self)
xgboost.core.Booster.save_model(self,fname)
xgboost.core.Booster.save_raw(self)
xgboost.core.Booster.set_attr(self,**kwargs)
xgboost.core.Booster.set_param(self,params,value=None)
xgboost.core.Booster.trees_to_dataframe(self,fmap='')
xgboost.core.Booster.update(self,dtrain,iteration,fobj=None)
xgboost.core.DMatrix(self,data,label=None,*,weight=None,base_margin=None,missing:Optional[float]=None,silent=False,feature_names=None,feature_types=None,nthread:Optional[int]=None,group=None,qid=None,label_lower_bound=None,label_upper_bound=None,feature_weights=None,enable_categorical:bool=False)
xgboost.core.DMatrix.__del__(self)
xgboost.core.DMatrix.__init__(self,data,label=None,*,weight=None,base_margin=None,missing:Optional[float]=None,silent=False,feature_names=None,feature_types=None,nthread:Optional[int]=None,group=None,qid=None,label_lower_bound=None,label_upper_bound=None,feature_weights=None,enable_categorical:bool=False)
xgboost.core.DMatrix.feature_names(self)->List[str]
xgboost.core.DMatrix.feature_names(self,feature_names:Optional[Union[List[str],str]])->None
xgboost.core.DMatrix.feature_types(self)->Optional[List[str]]
xgboost.core.DMatrix.feature_types(self,feature_types:Optional[Union[List[Any],Any]])->None
xgboost.core.DMatrix.get_base_margin(self)
xgboost.core.DMatrix.get_float_info(self,field)
xgboost.core.DMatrix.get_label(self)
xgboost.core.DMatrix.get_uint_info(self,field)
xgboost.core.DMatrix.get_weight(self)
xgboost.core.DMatrix.num_col(self)
xgboost.core.DMatrix.num_row(self)
xgboost.core.DMatrix.save_binary(self,fname,silent=True)
xgboost.core.DMatrix.set_base_margin(self,margin)
xgboost.core.DMatrix.set_float_info(self,field,data)
xgboost.core.DMatrix.set_float_info_npy2d(self,field,data)
xgboost.core.DMatrix.set_group(self,group)
xgboost.core.DMatrix.set_info(self,*,label=None,weight=None,base_margin=None,group=None,qid=None,label_lower_bound=None,label_upper_bound=None,feature_names=None,feature_types=None,feature_weights=None)->None
xgboost.core.DMatrix.set_label(self,label)
xgboost.core.DMatrix.set_uint_info(self,field,data)
xgboost.core.DMatrix.set_weight(self,weight)
xgboost.core.DMatrix.slice(self,rindex:Union[List[int],np.ndarray],allow_groups:bool=False)->'DMatrix'
xgboost.core.DataIter(self)
xgboost.core.DataIter.__init__(self)
xgboost.core.DataIter.next(self,input_data)
xgboost.core.DataIter.next_wrapper(self,this)
xgboost.core.DataIter.proxy(self)
xgboost.core.DataIter.reset(self)
xgboost.core.DataIter.reset_wrapper(self,this)
xgboost.core.DeviceQuantileDMatrix(self,data,label=None,*,weight=None,base_margin=None,missing=None,silent=False,feature_names=None,feature_types=None,nthread:Optional[int]=None,max_bin:int=256,group=None,qid=None,label_lower_bound=None,label_upper_bound=None,feature_weights=None,enable_categorical:bool=False)
xgboost.core.DeviceQuantileDMatrix.__init__(self,data,label=None,*,weight=None,base_margin=None,missing=None,silent=False,feature_names=None,feature_types=None,nthread:Optional[int]=None,max_bin:int=256,group=None,qid=None,label_lower_bound=None,label_upper_bound=None,feature_weights=None,enable_categorical:bool=False)
xgboost.core.DeviceQuantileDMatrix._init(self,data,feature_names,feature_types,**meta)
xgboost.core.EarlyStopException(self,best_iteration)
xgboost.core.EarlyStopException.__init__(self,best_iteration)
xgboost.core.XGBoostError(ValueError)
xgboost.core._ProxyDMatrix(self)
xgboost.core._ProxyDMatrix.__init__(self)
xgboost.core._ProxyDMatrix._set_data_from_cuda_columnar(self,data)
xgboost.core._ProxyDMatrix._set_data_from_cuda_interface(self,data)
xgboost.core._array_interface(data:np.ndarray)->bytes
xgboost.core._check_call(ret)
xgboost.core._convert_ntree_limit(booster,ntree_limit,iteration_range)
xgboost.core._deprecate_positional_args(f)
xgboost.core._expect(expectations,got)
xgboost.core._get_booster_layer_trees(model:'Booster')->Tuple[int, int]
xgboost.core._get_log_callback_func()
xgboost.core._load_lib()
xgboost.core._log_callback(msg)
xgboost.core._numpy2ctypes_type(dtype)
xgboost.core._prediction_output(shape,dims,predts,is_cuda)
xgboost.core.c_array(ctype,values)
xgboost.core.c_str(string)
xgboost.core.ctypes2buffer(cptr,length)
xgboost.core.ctypes2cupy(cptr,length,dtype)
xgboost.core.ctypes2numpy(cptr,length,dtype)
xgboost.core.from_cstr_to_pystr(data,length)->List[str]
xgboost.core.from_pystr_to_cstr(data:Union[str,List[str]])


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.4.0/libpath.py----------------------------------------
A:xgboost.libpath.curr_path->os.path.dirname(os.path.abspath(os.path.expanduser(__file__)))
xgboost.libpath.XGBoostLibraryNotFound(Exception)
xgboost.libpath.find_lib_path()->List[str]


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.4.0/config.py----------------------------------------
A:xgboost.config.config->json.loads(py_str(config_str.value))
A:xgboost.config.config_str->ctypes.c_char_p()
A:xgboost.config.old_config->get_config().copy()
xgboost.config.config_context(**new_config)
xgboost.config.config_doc(*,header=None,extra_note=None,parameters=None,returns=None,see_also=None)
xgboost.config.get_config()
xgboost.config.set_config(**new_config)
xgboost.config_context(**new_config)
xgboost.get_config()
xgboost.set_config(**new_config)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.4.0/plotting.py----------------------------------------
A:xgboost.plotting.importance->booster.get_booster().get_score(importance_type=importance_type, fmap=fmap)
A:xgboost.plotting.tuples->sorted(tuples, key=lambda x: x[1])
A:xgboost.plotting.(labels, values)->zip(*tuples)
A:xgboost.plotting.(_, ax)->matplotlib.pyplot.subplots(1, 1)
A:xgboost.plotting.ylocs->numpy.arange(len(values))
A:xgboost.plotting.booster->booster.get_booster().get_booster()
A:xgboost.plotting.g->to_graphviz(booster, fmap=fmap, num_trees=num_trees, rankdir=rankdir, **kwargs)
A:xgboost.plotting.s->BytesIO()
A:xgboost.plotting.img->matplotlib.image.imread(s)
xgboost.plot_importance(booster,ax=None,height=0.2,xlim=None,ylim=None,title='Featureimportance',xlabel='Fscore',ylabel='Features',fmap='',importance_type='weight',max_num_features=None,grid=True,show_values=True,**kwargs)
xgboost.plot_tree(booster,fmap='',num_trees=0,rankdir=None,ax=None,**kwargs)
xgboost.plotting.plot_importance(booster,ax=None,height=0.2,xlim=None,ylim=None,title='Featureimportance',xlabel='Fscore',ylabel='Features',fmap='',importance_type='weight',max_num_features=None,grid=True,show_values=True,**kwargs)
xgboost.plotting.plot_tree(booster,fmap='',num_trees=0,rankdir=None,ax=None,**kwargs)
xgboost.plotting.to_graphviz(booster,fmap='',num_trees=0,rankdir=None,yes_color=None,no_color=None,condition_node_params=None,leaf_node_params=None,**kwargs)
xgboost.to_graphviz(booster,fmap='',num_trees=0,rankdir=None,yes_color=None,no_color=None,condition_node_params=None,leaf_node_params=None,**kwargs)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.4.0/callback.py----------------------------------------
A:xgboost.callback.msg->model.eval_set(evals, epoch, self.feval).decode()
A:xgboost.callback.pos->k.index('-')
A:xgboost.callback.new_learning_rate->learning_rates(i, n)
A:xgboost.callback.context->_get_callback_context(env)
A:xgboost.callback.state['best_score']->float(bst.attr('best_score'))
A:xgboost.callback.state['best_iteration']->int(bst.attr('best_iteration'))
A:xgboost.callback.state['best_msg']->bst.attr('best_msg')
A:xgboost.callback.arr->line.split()
A:xgboost.callback.it->it.decode().decode()
A:xgboost.callback.(k, v)->it.decode().decode().split(':')
A:xgboost.callback.v->numpy.array(v)
A:xgboost.callback.world->rabit.get_world_size()
A:xgboost.callback.score->c.after_training(model=model).eval_set(evals, epoch, self.metric)
A:xgboost.callback.self.callbacks->set(callbacks)
A:xgboost.callback.model->c.after_training(model=model)
A:xgboost.callback.std->float(d[2])
A:xgboost.callback.splited_names->name.split('-')
A:xgboost.callback.metric_name->'-'.join(splited_names[1:])
A:xgboost.callback.s->_allreduce_metric(s)
A:xgboost.callback.self.history[data_name]->collections.OrderedDict()
A:xgboost.callback.scores->c.after_training(model=model).eval(epoch, self.feval)
A:xgboost.callback.ret->any((c.after_iteration(model, epoch, self.history) for c in self.callbacks))
A:xgboost.callback.self.starting_round->c.after_training(model=model).num_boosted_rounds()
A:xgboost.callback.path->os.path.join(self._path, self._name + '_' + str(epoch) + ('.pkl' if self._as_pickle else '.json'))
A:xgboost.callback.rank->rabit.get_rank()
A:xgboost.callback.self.aggregated_cv->_aggcv(scores)
A:xgboost.callback.bst_eval_set->c.after_training(model=model).eval_set(evals, epoch, self.feval)
xgboost.callback.CallbackContainer(self,callbacks:List[TrainingCallback],metric:Callable=None,is_cv:bool=False)
xgboost.callback.CallbackContainer.__init__(self,callbacks:List[TrainingCallback],metric:Callable=None,is_cv:bool=False)
xgboost.callback.CallbackContainer._update_history(self,score,epoch)
xgboost.callback.CallbackContainer.after_iteration(self,model,epoch,dtrain,evals)->bool
xgboost.callback.CallbackContainer.after_training(self,model)
xgboost.callback.CallbackContainer.before_iteration(self,model,epoch,dtrain,evals)->bool
xgboost.callback.CallbackContainer.before_training(self,model)
xgboost.callback.EarlyStopping(self,rounds:int,metric_name:Optional[str]=None,data_name:Optional[str]=None,maximize:Optional[bool]=None,save_best:Optional[bool]=False)
xgboost.callback.EarlyStopping.__init__(self,rounds:int,metric_name:Optional[str]=None,data_name:Optional[str]=None,maximize:Optional[bool]=None,save_best:Optional[bool]=False)
xgboost.callback.EarlyStopping._update_rounds(self,score,name,metric,model,epoch)->bool
xgboost.callback.EarlyStopping.after_iteration(self,model,epoch:int,evals_log:CallbackContainer.EvalsLog)->bool
xgboost.callback.EarlyStopping.after_training(self,model)
xgboost.callback.EarlyStopping.before_training(self,model)
xgboost.callback.EvaluationMonitor(self,rank=0,period=1,show_stdv=False)
xgboost.callback.EvaluationMonitor.__init__(self,rank=0,period=1,show_stdv=False)
xgboost.callback.EvaluationMonitor._fmt_metric(self,data,metric,score,std)->str
xgboost.callback.EvaluationMonitor.after_iteration(self,model,epoch:int,evals_log:CallbackContainer.EvalsLog)->bool
xgboost.callback.EvaluationMonitor.after_training(self,model)
xgboost.callback.LearningRateScheduler(self,learning_rates)
xgboost.callback.LearningRateScheduler.__init__(self,learning_rates)
xgboost.callback.LearningRateScheduler.after_iteration(self,model,epoch,evals_log)->bool
xgboost.callback.LegacyCallbacks(self,callbacks,start_iteration,end_iteration,feval,cvfolds=None)
xgboost.callback.LegacyCallbacks.__init__(self,callbacks,start_iteration,end_iteration,feval,cvfolds=None)
xgboost.callback.LegacyCallbacks.after_iteration(self,model,epoch,dtrain,evals)
xgboost.callback.LegacyCallbacks.after_training(self,model)
xgboost.callback.LegacyCallbacks.before_iteration(self,model,epoch,dtrain,evals)
xgboost.callback.LegacyCallbacks.before_training(self,model)
xgboost.callback.TrainingCallback(self)
xgboost.callback.TrainingCallback.__init__(self)
xgboost.callback.TrainingCallback.after_iteration(self,model,epoch:int,evals_log:'CallbackContainer.EvalsLog')->bool
xgboost.callback.TrainingCallback.after_training(self,model)
xgboost.callback.TrainingCallback.before_iteration(self,model,epoch:int,evals_log:'CallbackContainer.EvalsLog')->bool
xgboost.callback.TrainingCallback.before_training(self,model)
xgboost.callback.TrainingCheckPoint(self,directory:os.PathLike,name:str='model',as_pickle=False,iterations:int=100)
xgboost.callback.TrainingCheckPoint.__init__(self,directory:os.PathLike,name:str='model',as_pickle=False,iterations:int=100)
xgboost.callback.TrainingCheckPoint.after_iteration(self,model,epoch:int,evals_log:CallbackContainer.EvalsLog)->bool
xgboost.callback._aggcv(rlist)
xgboost.callback._allreduce_metric(score)
xgboost.callback._fmt_metric(value,show_stdv=True)
xgboost.callback._get_callback_context(env)
xgboost.callback.early_stop(stopping_rounds,maximize=False,verbose=True)
xgboost.callback.print_evaluation(period=1,show_stdv=True)
xgboost.callback.record_evaluation(eval_result)
xgboost.callback.reset_learning_rate(learning_rates)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.4.0/training.py----------------------------------------
A:xgboost.training.callbacks->_configure_deprecated_callbacks(verbose_eval, early_stopping_rounds, maximize, 0, num_boost_round, feval, None, callbacks, show_stdv=show_stdv, cvfolds=cvfolds)
A:xgboost.training.evals->list(evals)
A:xgboost.training.bst->_train_internal(params, dtrain, num_boost_round=num_boost_round, evals=evals, obj=obj, feval=feval, xgb_model=xgb_model, callbacks=callbacks, verbose_eval=verbose_eval, evals_result=evals_result, maximize=maximize, early_stopping_rounds=early_stopping_rounds)
A:xgboost.training.is_new_callback->_is_new_callback(callbacks)
A:xgboost.training.(num_parallel_tree, _)->_get_booster_layer_trees(bst)
A:xgboost.training.bst.best_score->float(bst.attr('best_score'))
A:xgboost.training.bst.best_iteration->int(bst.attr('best_iteration'))
A:xgboost.training.bst.best_ntree_limit->int(bst.attr('best_ntree_limit'))
A:xgboost.training.self.bst->Booster(param, [dtrain, dtest])
A:xgboost.training.group_boundaries->dall.get_uint_info('group_ptr')
A:xgboost.training.group_sizes->numpy.diff(group_boundaries)
A:xgboost.training.idx->numpy.arange(dall.num_row())
A:xgboost.training.out_group_idset->numpy.array_split(idx, nfold)
A:xgboost.training.dtrain->dall.slice(in_idset[k])
A:xgboost.training.dtest->dall.slice(out_idset[k])
A:xgboost.training.(dtrain, dtest, tparam)->fpreproc(dtrain, dtest, param.copy())
A:xgboost.training.out_idset->numpy.array_split(idx, nfold)
A:xgboost.training.splits->list(sfk.split(X=dall.get_label(), y=dall.get_label()))
A:xgboost.training.nfold->len(out_idset)
A:xgboost.training.sfk->XGBStratifiedKFold(n_splits=nfold, shuffle=True, random_state=seed)
A:xgboost.training.params->dict(((k, v) for (k, v) in params.items()))
A:xgboost.training.cvfolds->mknfold(dtrain, nfold, params, seed, metrics, fpreproc, stratified, folds, shuffle)
A:xgboost.training.booster->_PackedBooster(cvfolds)
A:xgboost.training.should_break->_configure_deprecated_callbacks(verbose_eval, early_stopping_rounds, maximize, 0, num_boost_round, feval, None, callbacks, show_stdv=show_stdv, cvfolds=cvfolds).after_iteration(booster, i, dtrain, None)
A:xgboost.training.results->pandas.DataFrame.from_dict(results)
xgboost.cv(params,dtrain,num_boost_round=10,nfold=3,stratified=False,folds=None,metrics=(),obj=None,feval=None,maximize=None,early_stopping_rounds=None,fpreproc=None,as_pandas=True,verbose_eval=None,show_stdv=True,seed=0,callbacks=None,shuffle=True)
xgboost.train(params,dtrain,num_boost_round=10,evals=(),obj=None,feval=None,maximize=None,early_stopping_rounds=None,evals_result=None,verbose_eval=True,xgb_model=None,callbacks=None)
xgboost.training.CVPack(self,dtrain,dtest,param)
xgboost.training.CVPack.__getattr__(self,name)
xgboost.training.CVPack.__init__(self,dtrain,dtest,param)
xgboost.training.CVPack.eval(self,iteration,feval)
xgboost.training.CVPack.update(self,iteration,fobj)
xgboost.training._PackedBooster(self,cvfolds)
xgboost.training._PackedBooster.__init__(self,cvfolds)
xgboost.training._PackedBooster.attr(self,key)
xgboost.training._PackedBooster.best_iteration(self)
xgboost.training._PackedBooster.best_score(self)
xgboost.training._PackedBooster.eval(self,iteration,feval)
xgboost.training._PackedBooster.num_boosted_rounds(self)
xgboost.training._PackedBooster.set_attr(self,**kwargs)
xgboost.training._PackedBooster.set_param(self,params,value=None)
xgboost.training._PackedBooster.update(self,iteration,obj)
xgboost.training._configure_deprecated_callbacks(verbose_eval,early_stopping_rounds,maximize,start_iteration,num_boost_round,feval,evals_result,callbacks,show_stdv,cvfolds)
xgboost.training._is_new_callback(callbacks)
xgboost.training._train_internal(params,dtrain,num_boost_round=10,evals=(),obj=None,feval=None,xgb_model=None,callbacks=None,evals_result=None,maximize=None,verbose_eval=None,early_stopping_rounds=None)
xgboost.training.cv(params,dtrain,num_boost_round=10,nfold=3,stratified=False,folds=None,metrics=(),obj=None,feval=None,maximize=None,early_stopping_rounds=None,fpreproc=None,as_pandas=True,verbose_eval=None,show_stdv=True,seed=0,callbacks=None,shuffle=True)
xgboost.training.groups_to_rows(groups,boundaries)
xgboost.training.mkgroupfold(dall,nfold,param,evals=(),fpreproc=None,shuffle=True)
xgboost.training.mknfold(dall,nfold,param,seed,evals=(),fpreproc=None,stratified=False,folds=None,shuffle=True)
xgboost.training.train(params,dtrain,num_boost_round=10,evals=(),obj=None,feval=None,maximize=None,early_stopping_rounds=None,evals_result=None,verbose_eval=True,xgb_model=None,callbacks=None)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.4.0/compat.py----------------------------------------
A:xgboost.compat.meta->dict()
A:xgboost.compat.meta[k]->v.tolist()
A:xgboost.compat.self.classes_->numpy.array(v)
A:xgboost.compat.module->importlib.import_module(self.__name__)
A:xgboost.compat.self.module->self._load()
xgboost.compat.LazyLoader(self,local_name,parent_module_globals,name,warning=None)
xgboost.compat.LazyLoader.__dir__(self)
xgboost.compat.LazyLoader.__getattr__(self,item)
xgboost.compat.LazyLoader.__init__(self,local_name,parent_module_globals,name,warning=None)
xgboost.compat.LazyLoader._load(self)
xgboost.compat.lazy_isinstance(instance,module,name)
xgboost.compat.py_str(x)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.4.0/__init__.py----------------------------------------
A:xgboost.__init__.VERSION_FILE->os.path.join(os.path.dirname(__file__), 'VERSION')
A:xgboost.__init__.__version__->f.read().strip()

