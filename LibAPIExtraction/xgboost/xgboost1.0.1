
----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/dask.py----------------------------------------
A:xgboost.dask.rabit_context->RabitTracker(hostIP=host, nslave=n_workers)
A:xgboost.dask.thread->Thread(target=rabit_context.join)
A:xgboost.dask.client->_xgb_get_client(self._client)
A:xgboost.dask.msg->'worker {address} has an empty DMatrix.  All workers associated with this DMatrix: {workers}'.format(address=worker.address, workers=set(self.worker_map.keys()))
A:xgboost.dask.data->concat(data)
A:xgboost.dask.label->label.persist().persist()
A:xgboost.dask.weights->concat(weights)
A:xgboost.dask.X_parts->X_parts.flatten().tolist().flatten().tolist()
A:xgboost.dask.y_parts->y_parts.flatten().tolist().flatten().tolist()
A:xgboost.dask.w_parts->w_parts.flatten().tolist().flatten().tolist()
A:xgboost.dask.parts->_xgb_get_client(self._client).compute(parts)
A:xgboost.dask.worker_map->defaultdict(list)
A:xgboost.dask.list_of_parts->_xgb_get_client(self._client).gather(list_of_parts)
A:xgboost.dask.(data, labels, weights)->self.get_worker_parts(worker)
A:xgboost.dask.(data, labels)->zip(*list_of_parts)
A:xgboost.dask.d->DMatrix(numpy.empty((0, 0)), feature_names=self._feature_names, feature_types=self._feature_types)
A:xgboost.dask.labels->concat(labels)
A:xgboost.dask.dmatrix->DMatrix(data, labels, weight=weights, missing=self._missing, feature_names=self._feature_names, feature_types=self._feature_types)
A:xgboost.dask.(data, _, _)->self.get_worker_parts(worker)
A:xgboost.dask.host->compat.distributed_comm.get_address_host(client.scheduler.address)
A:xgboost.dask.env->_xgb_get_client(self._client).run_on_scheduler(_start_tracker, host.strip('/:'), len(worker_map))
A:xgboost.dask.workers->list(_get_client_workers(client).keys())
A:xgboost.dask.rabit_args->_get_rabit_args(worker_map, client)
A:xgboost.dask.worker->distributed_get_worker()
A:xgboost.dask.local_dtrain->DaskDMatrix(client=self.client, data=X, label=y, weight=sample_weights).get_worker_data(worker)
A:xgboost.dask.local_mat->mat.get_worker_data(worker)
A:xgboost.dask.local_param->self.get_xgb_params().copy()
A:xgboost.dask.bst->worker_train(*args, params=local_param, dtrain=local_dtrain, evals_result=local_history, evals=local_evals, **kwargs)
A:xgboost.dask.futures->_xgb_get_client(self._client).map(dispatched_predict, range(len(worker_map)), pure=False, workers=list(worker_map.keys()))
A:xgboost.dask.results->train(self.client, params, dtrain, num_boost_round=self.get_num_boosting_rounds(), evals=evals)
A:xgboost.dask.local_x->concat(data).get_worker_data(worker)
A:xgboost.dask.local_predictions->booster.predict(*args, data=local_x, validate_features=local_x.num_row() != 0)
A:xgboost.dask.(rows, _)->concat(data).get_worker_data_shape(worker)
A:xgboost.dask.futures_shape->_xgb_get_client(self._client).map(dispatched_get_shape, range(len(worker_map)), pure=False, workers=list(worker_map.keys()))
A:xgboost.dask.shapes->_xgb_get_client(self._client).gather(futures_shape)
A:xgboost.dask.predictions->compat.da.concatenate(arrays, axis=0)
A:xgboost.dask.dmat->DaskDMatrix(client=client, data=e[0], label=e[1], weight=w)
A:xgboost.dask.dtrain->DaskDMatrix(client=self.client, data=X, label=y, weight=sample_weights)
A:xgboost.dask.params->self.get_xgb_params()
A:xgboost.dask.evals->_evaluation_matrices(self.client, eval_set, sample_weight_eval_set)
A:xgboost.dask.test_dmatrix->DaskDMatrix(client=self.client, data=data)
A:xgboost.dask.pred_probs->predict(client=self.client, model=self.get_booster(), data=test_dmatrix)
A:xgboost.dask.self.classes_->y.drop_duplicates().compute()
A:xgboost.dask.self.n_classes_->len(self.classes_)
xgboost.dask.DaskDMatrix(self,client,data,label=None,missing=None,weight=None,feature_names=None,feature_types=None)
xgboost.dask.DaskDMatrix.__init__(self,client,data,label=None,missing=None,weight=None,feature_names=None,feature_types=None)
xgboost.dask.DaskDMatrix.get_worker_data(self,worker)
xgboost.dask.DaskDMatrix.get_worker_data_shape(self,worker)
xgboost.dask.DaskDMatrix.get_worker_parts(self,worker)
xgboost.dask.DaskScikitLearnBase(XGBModel)
xgboost.dask.DaskScikitLearnBase.client(self)
xgboost.dask.DaskScikitLearnBase.client(self,clt)
xgboost.dask.DaskScikitLearnBase.fit(self,X,y,sample_weights=None,eval_set=None,sample_weight_eval_set=None)
xgboost.dask.DaskScikitLearnBase.predict(self,data)
xgboost.dask.DaskXGBClassifier(DaskScikitLearnBase,XGBClassifierBase)
xgboost.dask.DaskXGBClassifier.fit(self,X,y,sample_weights=None,eval_set=None,sample_weight_eval_set=None)
xgboost.dask.DaskXGBClassifier.predict(self,data)
xgboost.dask.DaskXGBRegressor(DaskScikitLearnBase)
xgboost.dask.DaskXGBRegressor.fit(self,X,y,sample_weights=None,eval_set=None,sample_weight_eval_set=None)
xgboost.dask.DaskXGBRegressor.predict(self,data)
xgboost.dask.RabitContext(self,args)
xgboost.dask.RabitContext.__enter__(self)
xgboost.dask.RabitContext.__exit__(self,*args)
xgboost.dask.RabitContext.__init__(self,args)
xgboost.dask._assert_client(client)
xgboost.dask._assert_dask_support()
xgboost.dask._evaluation_matrices(client,validation_set,sample_weights)
xgboost.dask._get_client_workers(client)
xgboost.dask._get_rabit_args(worker_map,client)
xgboost.dask._start_tracker(host,n_workers)
xgboost.dask._xgb_get_client(client)
xgboost.dask.concat(value)
xgboost.dask.predict(client,model,data,*args)
xgboost.dask.train(client,params,dtrain,*args,evals=(),**kwargs)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/sklearn.py----------------------------------------
A:xgboost.sklearn.labels->dmatrix.get_label()
A:xgboost.sklearn.cls.__doc__->''.join(full_doc)
A:xgboost.sklearn.state['_Booster']->Booster(model_file=bst)
A:xgboost.sklearn.params->self.get_xgb_params()
A:xgboost.sklearn.cp->copy.copy(self)
A:xgboost.sklearn.params['random_state']->params['random_state'].randint(np.iinfo(np.int32).max).randint(np.iinfo(np.int32).max)
A:xgboost.sklearn.ret->DMatrix(**params)
A:xgboost.sklearn.config->json.loads(self.get_booster().save_config())
A:xgboost.sklearn.obj->_objective_decorator(self.objective)
A:xgboost.sklearn.params[k]->parse_parameter(v)
A:xgboost.sklearn.xgb_params->self.get_params()
A:xgboost.sklearn.meta->json.loads(meta)
A:xgboost.sklearn.meta['_le']->self._le.to_json()
A:xgboost.sklearn.meta['classes_']->self.classes_.tolist()
A:xgboost.sklearn.self._Booster->train(params, train_dmatrix, self.n_estimators, early_stopping_rounds=early_stopping_rounds, evals=evals, evals_result=evals_result, feval=feval, verbose_eval=verbose, xgb_model=xgb_model, callbacks=callbacks)
A:xgboost.sklearn.states->dict()
A:xgboost.sklearn.self._le->XGBoostLabelEncoder().fit(y)
A:xgboost.sklearn.self.classes_->numpy.unique(y)
A:xgboost.sklearn.train_dmatrix->DMatrix(data=X, label=y, weight=sample_weight, base_margin=base_margin, missing=self.missing, nthread=self.n_jobs)
A:xgboost.sklearn.evals->list(zip(evals, eval_names))
A:xgboost.sklearn.test_dmatrix->DMatrix(data, base_margin=base_margin, missing=self.missing)
A:xgboost.sklearn.ntree_limit->getattr(self, 'best_ntree_limit', 0)
A:xgboost.sklearn.b->self.get_booster()
A:xgboost.sklearn.score->self.get_booster().get_score(importance_type=self.importance_type)
A:xgboost.sklearn.all_features->numpy.array(all_features, dtype=np.float32)
A:xgboost.sklearn.coef->coef.reshape((n_classes, -1)).reshape((n_classes, -1))
A:xgboost.sklearn.n_classes->getattr(self, 'n_classes_', None)
A:xgboost.sklearn.self.n_classes_->len(self.classes_)
A:xgboost.sklearn.xgb_options->self.get_xgb_params()
A:xgboost.sklearn.training_labels->self._le.transform(y)
A:xgboost.sklearn.nevals->len(evals)
A:xgboost.sklearn.fit.__doc__->XGBModel.fit.__doc__.replace('Fit gradient boosting model', 'Fit gradient boosting classifier', 1)
A:xgboost.sklearn.class_probs->self.get_booster().predict(test_dmatrix, ntree_limit=ntree_limit, validate_features=validate_features)
A:xgboost.sklearn.column_indexes->numpy.repeat(0, class_probs.shape[0])
xgboost.XGBClassifier(self,objective='binary:logistic',**kwargs)
xgboost.XGBClassifier.evals_result(self)
xgboost.XGBClassifier.fit(self,X,y,sample_weight=None,base_margin=None,eval_set=None,eval_metric=None,early_stopping_rounds=None,verbose=True,xgb_model=None,sample_weight_eval_set=None,callbacks=None)
xgboost.XGBClassifier.predict(self,data,output_margin=False,ntree_limit=None,validate_features=True,base_margin=None)
xgboost.XGBClassifier.predict_proba(self,data,ntree_limit=None,validate_features=True,base_margin=None)
xgboost.XGBModel(self,max_depth=None,learning_rate=None,n_estimators=100,verbosity=None,objective=None,booster=None,tree_method=None,n_jobs=None,gamma=None,min_child_weight=None,max_delta_step=None,subsample=None,colsample_bytree=None,colsample_bylevel=None,colsample_bynode=None,reg_alpha=None,reg_lambda=None,scale_pos_weight=None,base_score=None,random_state=None,missing=None,num_parallel_tree=None,monotone_constraints=None,interaction_constraints=None,importance_type='gain',gpu_id=None,validate_parameters=False,**kwargs)
xgboost.XGBModel.__setstate__(self,state)
xgboost.XGBModel.apply(self,X,ntree_limit=0)
xgboost.XGBModel.coef_(self)
xgboost.XGBModel.evals_result(self)
xgboost.XGBModel.feature_importances_(self)
xgboost.XGBModel.fit(self,X,y,sample_weight=None,base_margin=None,eval_set=None,eval_metric=None,early_stopping_rounds=None,verbose=True,xgb_model=None,sample_weight_eval_set=None,callbacks=None)
xgboost.XGBModel.get_booster(self)
xgboost.XGBModel.get_num_boosting_rounds(self)
xgboost.XGBModel.get_params(self,deep=True)
xgboost.XGBModel.get_xgb_params(self)
xgboost.XGBModel.intercept_(self)
xgboost.XGBModel.load_model(self,fname)
xgboost.XGBModel.predict(self,data,output_margin=False,ntree_limit=None,validate_features=True,base_margin=None)
xgboost.XGBModel.save_model(self,fname:str)
xgboost.XGBModel.set_params(self,**params)
xgboost.XGBRFClassifier(self,learning_rate=1,subsample=0.8,colsample_bynode=0.8,reg_lambda=1e-05,**kwargs)
xgboost.XGBRFClassifier.get_num_boosting_rounds(self)
xgboost.XGBRFClassifier.get_xgb_params(self)
xgboost.XGBRFRegressor(self,learning_rate=1,subsample=0.8,colsample_bynode=0.8,reg_lambda=1e-05,**kwargs)
xgboost.XGBRFRegressor.get_num_boosting_rounds(self)
xgboost.XGBRFRegressor.get_xgb_params(self)
xgboost.XGBRanker(self,objective='rank:pairwise',**kwargs)
xgboost.XGBRanker.fit(self,X,y,group,sample_weight=None,base_margin=None,eval_set=None,sample_weight_eval_set=None,eval_group=None,eval_metric=None,early_stopping_rounds=None,verbose=False,xgb_model=None,callbacks=None)
xgboost.XGBRanker.predict(self,data,output_margin=False,ntree_limit=0,validate_features=True,base_margin=None)
xgboost.XGBRegressor(self,objective='reg:squarederror',**kwargs)
xgboost.sklearn.XGBClassifier(self,objective='binary:logistic',**kwargs)
xgboost.sklearn.XGBClassifier.__init__(self,objective='binary:logistic',**kwargs)
xgboost.sklearn.XGBClassifier.evals_result(self)
xgboost.sklearn.XGBClassifier.fit(self,X,y,sample_weight=None,base_margin=None,eval_set=None,eval_metric=None,early_stopping_rounds=None,verbose=True,xgb_model=None,sample_weight_eval_set=None,callbacks=None)
xgboost.sklearn.XGBClassifier.predict(self,data,output_margin=False,ntree_limit=None,validate_features=True,base_margin=None)
xgboost.sklearn.XGBClassifier.predict_proba(self,data,ntree_limit=None,validate_features=True,base_margin=None)
xgboost.sklearn.XGBModel(self,max_depth=None,learning_rate=None,n_estimators=100,verbosity=None,objective=None,booster=None,tree_method=None,n_jobs=None,gamma=None,min_child_weight=None,max_delta_step=None,subsample=None,colsample_bytree=None,colsample_bylevel=None,colsample_bynode=None,reg_alpha=None,reg_lambda=None,scale_pos_weight=None,base_score=None,random_state=None,missing=None,num_parallel_tree=None,monotone_constraints=None,interaction_constraints=None,importance_type='gain',gpu_id=None,validate_parameters=False,**kwargs)
xgboost.sklearn.XGBModel.__init__(self,max_depth=None,learning_rate=None,n_estimators=100,verbosity=None,objective=None,booster=None,tree_method=None,n_jobs=None,gamma=None,min_child_weight=None,max_delta_step=None,subsample=None,colsample_bytree=None,colsample_bylevel=None,colsample_bynode=None,reg_alpha=None,reg_lambda=None,scale_pos_weight=None,base_score=None,random_state=None,missing=None,num_parallel_tree=None,monotone_constraints=None,interaction_constraints=None,importance_type='gain',gpu_id=None,validate_parameters=False,**kwargs)
xgboost.sklearn.XGBModel.__setstate__(self,state)
xgboost.sklearn.XGBModel.apply(self,X,ntree_limit=0)
xgboost.sklearn.XGBModel.coef_(self)
xgboost.sklearn.XGBModel.evals_result(self)
xgboost.sklearn.XGBModel.feature_importances_(self)
xgboost.sklearn.XGBModel.fit(self,X,y,sample_weight=None,base_margin=None,eval_set=None,eval_metric=None,early_stopping_rounds=None,verbose=True,xgb_model=None,sample_weight_eval_set=None,callbacks=None)
xgboost.sklearn.XGBModel.get_booster(self)
xgboost.sklearn.XGBModel.get_num_boosting_rounds(self)
xgboost.sklearn.XGBModel.get_params(self,deep=True)
xgboost.sklearn.XGBModel.get_xgb_params(self)
xgboost.sklearn.XGBModel.intercept_(self)
xgboost.sklearn.XGBModel.load_model(self,fname)
xgboost.sklearn.XGBModel.predict(self,data,output_margin=False,ntree_limit=None,validate_features=True,base_margin=None)
xgboost.sklearn.XGBModel.save_model(self,fname:str)
xgboost.sklearn.XGBModel.set_params(self,**params)
xgboost.sklearn.XGBRFClassifier(self,learning_rate=1,subsample=0.8,colsample_bynode=0.8,reg_lambda=1e-05,**kwargs)
xgboost.sklearn.XGBRFClassifier.__init__(self,learning_rate=1,subsample=0.8,colsample_bynode=0.8,reg_lambda=1e-05,**kwargs)
xgboost.sklearn.XGBRFClassifier.get_num_boosting_rounds(self)
xgboost.sklearn.XGBRFClassifier.get_xgb_params(self)
xgboost.sklearn.XGBRFRegressor(self,learning_rate=1,subsample=0.8,colsample_bynode=0.8,reg_lambda=1e-05,**kwargs)
xgboost.sklearn.XGBRFRegressor.__init__(self,learning_rate=1,subsample=0.8,colsample_bynode=0.8,reg_lambda=1e-05,**kwargs)
xgboost.sklearn.XGBRFRegressor.get_num_boosting_rounds(self)
xgboost.sklearn.XGBRFRegressor.get_xgb_params(self)
xgboost.sklearn.XGBRanker(self,objective='rank:pairwise',**kwargs)
xgboost.sklearn.XGBRanker.__init__(self,objective='rank:pairwise',**kwargs)
xgboost.sklearn.XGBRanker.fit(self,X,y,group,sample_weight=None,base_margin=None,eval_set=None,sample_weight_eval_set=None,eval_group=None,eval_metric=None,early_stopping_rounds=None,verbose=False,xgb_model=None,callbacks=None)
xgboost.sklearn.XGBRanker.predict(self,data,output_margin=False,ntree_limit=0,validate_features=True,base_margin=None)
xgboost.sklearn.XGBRegressor(self,objective='reg:squarederror',**kwargs)
xgboost.sklearn.XGBRegressor.__init__(self,objective='reg:squarederror',**kwargs)
xgboost.sklearn._objective_decorator(func)
xgboost.sklearn.xgboost_model_doc(header,items,extra_parameters=None,end_note=None)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/tracker.py----------------------------------------
A:xgboost.tracker.chunk->self.sock.recv(min(nbytes - nread, 1024))
A:xgboost.tracker.slen->self.recvint()
A:xgboost.tracker.slave->ExSocket(sock)
A:xgboost.tracker.self.host->get_some_ip(s_addr[0])
A:xgboost.tracker.magic->ExSocket(sock).recvint()
A:xgboost.tracker.self.rank->ExSocket(sock).recvint()
A:xgboost.tracker.self.world_size->ExSocket(sock).recvint()
A:xgboost.tracker.self.jobid->ExSocket(sock).recvstr()
A:xgboost.tracker.self.cmd->ExSocket(sock).recvstr()
A:xgboost.tracker.nnset->set(tree_map[rank])
A:xgboost.tracker.ngood->self.sock.recvint()
A:xgboost.tracker.goodset->set([])
A:xgboost.tracker.nerr->self.sock.recvint()
A:xgboost.tracker.self.port->self.sock.recvint()
A:xgboost.tracker.sock->socket.socket(get_family(hostIP), socket.SOCK_STREAM)
A:xgboost.tracker.tree_map[r]->self.get_neighbor(r, nslave)
A:xgboost.tracker.nset->set(tree_map[r])
A:xgboost.tracker.vlst->self.find_share_ring(tree_map, parent_map, v)
A:xgboost.tracker.rlst->self.find_share_ring(tree_map, parent_map, 0)
A:xgboost.tracker.nslave->len(tree_map)
A:xgboost.tracker.(tree_map, parent_map)->self.get_tree(nslave)
A:xgboost.tracker.ring_map->self.get_ring(tree_map, parent_map)
A:xgboost.tracker.(fd, s_addr)->self.sock.accept()
A:xgboost.tracker.s->SlaveEntry(fd, s_addr)
A:xgboost.tracker.msg->SlaveEntry(fd, s_addr).sock.recvstr()
A:xgboost.tracker.(tree_map, parent_map, ring_map)->self.get_link_map(nslave)
A:xgboost.tracker.todo_nodes->list(range(nslave))
A:xgboost.tracker.rank->list(range(nslave)).pop(0)
A:xgboost.tracker.self.start_time->time.time()
A:xgboost.tracker.self.end_time->time.time()
A:xgboost.tracker.self.thread->Thread(target=run, args=())
xgboost.RabitTracker(self,hostIP,nslave,port=9091,port_end=9999)
xgboost.RabitTracker.__del__(self)
xgboost.RabitTracker.accept_slaves(self,nslave)
xgboost.RabitTracker.alive(self)
xgboost.RabitTracker.find_share_ring(self,tree_map,parent_map,r)
xgboost.RabitTracker.get_link_map(self,nslave)
xgboost.RabitTracker.get_neighbor(rank,nslave)
xgboost.RabitTracker.get_ring(self,tree_map,parent_map)
xgboost.RabitTracker.get_tree(self,nslave)
xgboost.RabitTracker.join(self)
xgboost.RabitTracker.slave_envs(self)
xgboost.RabitTracker.start(self,nslave)
xgboost.tracker.ExSocket(self,sock)
xgboost.tracker.ExSocket.__init__(self,sock)
xgboost.tracker.ExSocket.recvall(self,nbytes)
xgboost.tracker.ExSocket.recvint(self)
xgboost.tracker.ExSocket.recvstr(self)
xgboost.tracker.ExSocket.sendint(self,n)
xgboost.tracker.ExSocket.sendstr(self,s)
xgboost.tracker.RabitTracker(self,hostIP,nslave,port=9091,port_end=9999)
xgboost.tracker.RabitTracker.__del__(self)
xgboost.tracker.RabitTracker.__init__(self,hostIP,nslave,port=9091,port_end=9999)
xgboost.tracker.RabitTracker.accept_slaves(self,nslave)
xgboost.tracker.RabitTracker.alive(self)
xgboost.tracker.RabitTracker.find_share_ring(self,tree_map,parent_map,r)
xgboost.tracker.RabitTracker.get_link_map(self,nslave)
xgboost.tracker.RabitTracker.get_neighbor(rank,nslave)
xgboost.tracker.RabitTracker.get_ring(self,tree_map,parent_map)
xgboost.tracker.RabitTracker.get_tree(self,nslave)
xgboost.tracker.RabitTracker.join(self)
xgboost.tracker.RabitTracker.slave_envs(self)
xgboost.tracker.RabitTracker.start(self,nslave)
xgboost.tracker.SlaveEntry(self,sock,s_addr)
xgboost.tracker.SlaveEntry.__init__(self,sock,s_addr)
xgboost.tracker.SlaveEntry.assign_rank(self,rank,wait_conn,tree_map,parent_map,ring_map)
xgboost.tracker.SlaveEntry.decide_rank(self,job_map)
xgboost.tracker.get_family(addr)
xgboost.tracker.get_some_ip(host)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/rabit.py----------------------------------------
A:xgboost.rabit.arr->(ctypes.c_char_p * len(args))()
A:xgboost.rabit.ret->core._LIB.RabitVersionNumber()
A:xgboost.rabit.msg->str(msg)
A:xgboost.rabit.is_dist->core._LIB.RabitIsDistributed()
A:xgboost.rabit.length->ctypes.c_ulong()
A:xgboost.rabit.buf->buf.copy().copy()
A:xgboost.rabit.rank->get_rank()
A:xgboost.rabit.s->pickle.dumps(data, protocol=pickle.HIGHEST_PROTOCOL)
A:xgboost.rabit.length.value->len(s)
A:xgboost.rabit.dptr->(ctypes.c_char * length.value)()
A:xgboost.rabit.data->pickle.loads(dptr.raw)
A:xgboost.rabit.func_ptr->ctypes.CFUNCTYPE(None, ctypes.c_void_p)
xgboost.rabit._init_rabit()
xgboost.rabit.allreduce(data,op,prepare_fun=None)
xgboost.rabit.broadcast(data,root)
xgboost.rabit.finalize()
xgboost.rabit.get_processor_name()
xgboost.rabit.get_rank()
xgboost.rabit.get_world_size()
xgboost.rabit.init(args=None)
xgboost.rabit.tracker_print(msg)
xgboost.rabit.version_number()


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/core.py----------------------------------------
A:xgboost.core.CallbackEnv->collections.namedtuple('XGBoostCallbackEnv', ['model', 'cvfolds', 'iteration', 'begin_iteration', 'end_iteration', 'rank', 'evaluation_result_list'])
A:xgboost.core.pointers->(ctypes.c_char_p * len(data))()
A:xgboost.core.CALLBACK->ctypes.CFUNCTYPE(None, ctypes.c_char_p)
A:xgboost.core.lib_paths->find_lib_path()
A:xgboost.core.pathBackup->os.environ['PATH'].split(os.pathsep)
A:xgboost.core.os.environ['PATH']->os.pathsep.join(pathBackup)
A:xgboost.core.lib->ctypes.cdll.LoadLibrary(lib_path)
A:xgboost.core.libname->os.path.basename(lib_paths[0])
A:xgboost.core.lib.callback->_get_log_callback_func()
A:xgboost.core._LIB->_load_lib()
A:xgboost.core.res->from_cstr_to_pystr(sarr, length)
A:xgboost.core.rptr->(ctypes.c_char * length).from_buffer(res)
A:xgboost.core.feature_names->list(feature_names)
A:xgboost.core.data->numpy.array(data, copy=False, dtype=ctypes.c_uint)
A:xgboost.core.data_types_names->tuple((lt.name for lt in data.ltypes))
A:xgboost.core.feature_types->list(feature_types)
A:xgboost.core.(data, feature_names, feature_types)->_convert_dataframes(data, feature_names, feature_types)
A:xgboost.core.handle->ctypes.c_void_p()
A:xgboost.core.csr->scipy.sparse.csr_matrix(data)
A:xgboost.core.ptrs->(ctypes.c_void_p * data.ncols)()
A:xgboost.core.col->numpy.array(data, copy=False, dtype=ctypes.c_uint).internal.column(icol)
A:xgboost.core.ptrs[icol]->frame_column_data_r(data, icol)
A:xgboost.core.feature_type_strings->(ctypes.c_char_p * data.ncols)()
A:xgboost.core.feature_type_strings[icol]->ctypes.c_char_p(data.stypes[icol].name.encode('utf-8'))
A:xgboost.core.interfaces_str->bytes(json.dumps(interfaces, indent=2), 'utf-8')
A:xgboost.core.interface_str->bytes(json.dumps(interface, indent=2), 'utf-8')
A:xgboost.core.length->c_bst_ulong()
A:xgboost.core.ret->self.get_dump(fmap, with_stats, dump_format)
A:xgboost.core.(data, _, _)->_convert_dataframes(data, None, None, field, 'uint32')
A:xgboost.core.c_data->numpy.array(data, copy=False, dtype=ctypes.c_uint).ctypes.data_as(ctypes.POINTER(ctypes.c_float))
A:xgboost.core.interface->bytes(json.dumps([data.__cuda_array_interface__], indent=2), 'utf-8')
A:xgboost.core.res.handle->ctypes.c_void_p()
A:xgboost.core.dmats->c_array(ctypes.c_void_p, [d[0].handle for d in evals])
A:xgboost.core.self.handle->ctypes.c_void_p()
A:xgboost.core.state->model_file.__getstate__()
A:xgboost.core.ptr->(ctypes.c_char * len(buf)).from_buffer(buf)
A:xgboost.core.this->self.__dict__.copy()
A:xgboost.core.cptr->ctypes.POINTER(ctypes.c_char)()
A:xgboost.core.buf->ctypes2buffer(cptr, length.value)
A:xgboost.core.json_string->json_string.value.decode().value.decode()
A:xgboost.core.version->ctypes.c_int()
A:xgboost.core.success->ctypes.c_int()
A:xgboost.core.sarr->ctypes.POINTER(ctypes.c_char_p)()
A:xgboost.core.attr_names->from_cstr_to_pystr(sarr, length)
A:xgboost.core.value->c_str(str(value))
A:xgboost.core.params->params.items().items()
A:xgboost.core.pred->self.predict(dtrain, training=True)
A:xgboost.core.(grad, hess)->fobj(pred, dtrain)
A:xgboost.core.evnames->c_array(ctypes.c_char_p, [c_str(d[1]) for d in evals])
A:xgboost.core.msg->ctypes.c_char_p()
A:xgboost.core.feval_ret->feval(self.predict(dmat, training=False), dmat)
A:xgboost.core.preds->preds.reshape(nrow, chunk_size).reshape(nrow, chunk_size)
A:xgboost.core.nrow->numpy.array(data, copy=False, dtype=ctypes.c_uint).num_row()
A:xgboost.core.chunk_size->int(preds.size / nrow)
A:xgboost.core.ngroup->int(chunk_size / (data.num_col() + 1))
A:xgboost.core.fout->open(os_fspath(fout), 'w')
A:xgboost.core.fmap->os_fspath(fmap)
A:xgboost.core.flen->len(self.feature_names)
A:xgboost.core.fname->from_pystr_to_cstr(self.feature_names)
A:xgboost.core.ftype->from_pystr_to_cstr(self.feature_types)
A:xgboost.core.trees->self.get_dump(fmap, with_stats=True)
A:xgboost.core.arr->line.split('[')
A:xgboost.core.fid->arr[1].split(']')
A:xgboost.core.g->float(fid[1].split(importance_type)[1].split(',')[0])
A:xgboost.core.parse->fid[0].split('<')
A:xgboost.core.stats->re.split('=|,', fid[1])
A:xgboost.core.str_i->str(i)
A:xgboost.core.df->DataFrame({'Tree': tree_ids, 'Node': node_ids, 'ID': ids, 'Feature': fids, 'Split': splits, 'Yes': y_directs, 'No': n_directs, 'Missing': missings, 'Gain': gains, 'Cover': covers})
A:xgboost.core.xgdump->self.get_dump(fmap=fmap)
A:xgboost.core.regexp->re.compile('\\[{0}<([\\d.Ee+-]+)\\]'.format(feature))
A:xgboost.core.m->re.findall(regexp, xgdump[i])
A:xgboost.core.n_unique->len(np.unique(values))
A:xgboost.core.bins->max(min(n_unique, bins) if bins is not None else n_unique, 1)
A:xgboost.core.nph->numpy.column_stack((nph[1][1:], nph[0]))
xgboost.Booster(self,params=None,cache=(),model_file=None)
xgboost.Booster.__copy__(self)
xgboost.Booster.__deepcopy__(self,_)
xgboost.Booster.__del__(self)
xgboost.Booster.__getstate__(self)
xgboost.Booster.__setstate__(self,state)
xgboost.Booster._validate_features(self,data)
xgboost.Booster.attr(self,key)
xgboost.Booster.attributes(self)
xgboost.Booster.boost(self,dtrain,grad,hess)
xgboost.Booster.copy(self)
xgboost.Booster.dump_model(self,fout,fmap='',with_stats=False,dump_format='text')
xgboost.Booster.eval(self,data,name='eval',iteration=0)
xgboost.Booster.eval_set(self,evals,iteration=0,feval=None)
xgboost.Booster.get_dump(self,fmap='',with_stats=False,dump_format='text')
xgboost.Booster.get_fscore(self,fmap='')
xgboost.Booster.get_score(self,fmap='',importance_type='weight')
xgboost.Booster.get_split_value_histogram(self,feature,fmap='',bins=None,as_pandas=True)
xgboost.Booster.load_config(self,config)
xgboost.Booster.load_model(self,fname)
xgboost.Booster.load_rabit_checkpoint(self)
xgboost.Booster.predict(self,data,output_margin=False,ntree_limit=0,pred_leaf=False,pred_contribs=False,approx_contribs=False,pred_interactions=False,validate_features=True,training=False)
xgboost.Booster.save_config(self)
xgboost.Booster.save_model(self,fname)
xgboost.Booster.save_rabit_checkpoint(self)
xgboost.Booster.save_raw(self)
xgboost.Booster.set_attr(self,**kwargs)
xgboost.Booster.set_param(self,params,value=None)
xgboost.Booster.trees_to_dataframe(self,fmap='')
xgboost.Booster.update(self,dtrain,iteration,fobj=None)
xgboost.DMatrix(self,data,label=None,weight=None,base_margin=None,missing=None,silent=False,feature_names=None,feature_types=None,nthread=None)
xgboost.DMatrix.__del__(self)
xgboost.DMatrix._init_from_array_interface(self,data,missing,nthread)
xgboost.DMatrix._init_from_array_interface_columns(self,df,missing,nthread)
xgboost.DMatrix._init_from_csc(self,csc)
xgboost.DMatrix._init_from_csr(self,csr)
xgboost.DMatrix._init_from_dt(self,data,nthread)
xgboost.DMatrix._init_from_npy2d(self,mat,missing,nthread)
xgboost.DMatrix.feature_names(self)
xgboost.DMatrix.feature_names(self,feature_names)
xgboost.DMatrix.feature_types(self)
xgboost.DMatrix.feature_types(self,feature_types)
xgboost.DMatrix.get_base_margin(self)
xgboost.DMatrix.get_float_info(self,field)
xgboost.DMatrix.get_label(self)
xgboost.DMatrix.get_uint_info(self,field)
xgboost.DMatrix.get_weight(self)
xgboost.DMatrix.num_col(self)
xgboost.DMatrix.num_row(self)
xgboost.DMatrix.save_binary(self,fname,silent=True)
xgboost.DMatrix.set_base_margin(self,margin)
xgboost.DMatrix.set_float_info(self,field,data)
xgboost.DMatrix.set_float_info_npy2d(self,field,data)
xgboost.DMatrix.set_group(self,group)
xgboost.DMatrix.set_interface_info(self,field,data)
xgboost.DMatrix.set_label(self,label)
xgboost.DMatrix.set_uint_info(self,field,data)
xgboost.DMatrix.set_weight(self,weight)
xgboost.DMatrix.slice(self,rindex,allow_groups=False)
xgboost.core.Booster(self,params=None,cache=(),model_file=None)
xgboost.core.Booster.__copy__(self)
xgboost.core.Booster.__deepcopy__(self,_)
xgboost.core.Booster.__del__(self)
xgboost.core.Booster.__getstate__(self)
xgboost.core.Booster.__init__(self,params=None,cache=(),model_file=None)
xgboost.core.Booster.__setstate__(self,state)
xgboost.core.Booster._validate_features(self,data)
xgboost.core.Booster.attr(self,key)
xgboost.core.Booster.attributes(self)
xgboost.core.Booster.boost(self,dtrain,grad,hess)
xgboost.core.Booster.copy(self)
xgboost.core.Booster.dump_model(self,fout,fmap='',with_stats=False,dump_format='text')
xgboost.core.Booster.eval(self,data,name='eval',iteration=0)
xgboost.core.Booster.eval_set(self,evals,iteration=0,feval=None)
xgboost.core.Booster.get_dump(self,fmap='',with_stats=False,dump_format='text')
xgboost.core.Booster.get_fscore(self,fmap='')
xgboost.core.Booster.get_score(self,fmap='',importance_type='weight')
xgboost.core.Booster.get_split_value_histogram(self,feature,fmap='',bins=None,as_pandas=True)
xgboost.core.Booster.load_config(self,config)
xgboost.core.Booster.load_model(self,fname)
xgboost.core.Booster.load_rabit_checkpoint(self)
xgboost.core.Booster.predict(self,data,output_margin=False,ntree_limit=0,pred_leaf=False,pred_contribs=False,approx_contribs=False,pred_interactions=False,validate_features=True,training=False)
xgboost.core.Booster.save_config(self)
xgboost.core.Booster.save_model(self,fname)
xgboost.core.Booster.save_rabit_checkpoint(self)
xgboost.core.Booster.save_raw(self)
xgboost.core.Booster.set_attr(self,**kwargs)
xgboost.core.Booster.set_param(self,params,value=None)
xgboost.core.Booster.trees_to_dataframe(self,fmap='')
xgboost.core.Booster.update(self,dtrain,iteration,fobj=None)
xgboost.core.DMatrix(self,data,label=None,weight=None,base_margin=None,missing=None,silent=False,feature_names=None,feature_types=None,nthread=None)
xgboost.core.DMatrix.__del__(self)
xgboost.core.DMatrix.__init__(self,data,label=None,weight=None,base_margin=None,missing=None,silent=False,feature_names=None,feature_types=None,nthread=None)
xgboost.core.DMatrix._init_from_array_interface(self,data,missing,nthread)
xgboost.core.DMatrix._init_from_array_interface_columns(self,df,missing,nthread)
xgboost.core.DMatrix._init_from_csc(self,csc)
xgboost.core.DMatrix._init_from_csr(self,csr)
xgboost.core.DMatrix._init_from_dt(self,data,nthread)
xgboost.core.DMatrix._init_from_npy2d(self,mat,missing,nthread)
xgboost.core.DMatrix.feature_names(self)
xgboost.core.DMatrix.feature_names(self,feature_names)
xgboost.core.DMatrix.feature_types(self)
xgboost.core.DMatrix.feature_types(self,feature_types)
xgboost.core.DMatrix.get_base_margin(self)
xgboost.core.DMatrix.get_float_info(self,field)
xgboost.core.DMatrix.get_label(self)
xgboost.core.DMatrix.get_uint_info(self,field)
xgboost.core.DMatrix.get_weight(self)
xgboost.core.DMatrix.num_col(self)
xgboost.core.DMatrix.num_row(self)
xgboost.core.DMatrix.save_binary(self,fname,silent=True)
xgboost.core.DMatrix.set_base_margin(self,margin)
xgboost.core.DMatrix.set_float_info(self,field,data)
xgboost.core.DMatrix.set_float_info_npy2d(self,field,data)
xgboost.core.DMatrix.set_group(self,group)
xgboost.core.DMatrix.set_interface_info(self,field,data)
xgboost.core.DMatrix.set_label(self,label)
xgboost.core.DMatrix.set_uint_info(self,field,data)
xgboost.core.DMatrix.set_weight(self,weight)
xgboost.core.DMatrix.slice(self,rindex,allow_groups=False)
xgboost.core.EarlyStopException(self,best_iteration)
xgboost.core.EarlyStopException.__init__(self,best_iteration)
xgboost.core.XGBoostError(Exception)
xgboost.core._check_call(ret)
xgboost.core._convert_dataframes(data,feature_names,feature_types,meta=None,meta_type=None)
xgboost.core._expect(expectations,got)
xgboost.core._get_log_callback_func()
xgboost.core._has_cuda_array_interface(data)
xgboost.core._load_lib()
xgboost.core._log_callback(msg)
xgboost.core._maybe_cudf_dataframe(data,feature_names,feature_types)
xgboost.core._maybe_dt_data(data,feature_names,feature_types,meta=None,meta_type=None)
xgboost.core._maybe_np_slice(data,dtype=np.float32)
xgboost.core._maybe_pandas_data(data,feature_names,feature_types,meta=None,meta_type=None)
xgboost.core.c_array(ctype,values)
xgboost.core.c_str(string)
xgboost.core.ctypes2buffer(cptr,length)
xgboost.core.ctypes2numpy(cptr,length,dtype)
xgboost.core.from_cstr_to_pystr(data,length)
xgboost.core.from_pystr_to_cstr(data)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/libpath.py----------------------------------------
A:xgboost.libpath.curr_path->os.path.dirname(os.path.abspath(os.path.expanduser(__file__)))
xgboost.libpath.XGBoostLibraryNotFound(Exception)
xgboost.libpath.find_lib_path()


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/plotting.py----------------------------------------
A:xgboost.plotting.importance->booster.get_booster().get_score(importance_type=importance_type)
A:xgboost.plotting.tuples->sorted(tuples, key=lambda x: x[1])
A:xgboost.plotting.(labels, values)->zip(*tuples)
A:xgboost.plotting.(_, ax)->matplotlib.pyplot.subplots(1, 1)
A:xgboost.plotting.ylocs->numpy.arange(len(values))
A:xgboost.plotting.booster->booster.get_booster().get_booster()
A:xgboost.plotting.g->to_graphviz(booster, fmap=fmap, num_trees=num_trees, rankdir=rankdir, **kwargs)
A:xgboost.plotting.s->BytesIO()
A:xgboost.plotting.img->matplotlib.image.imread(s)
xgboost.plot_importance(booster,ax=None,height=0.2,xlim=None,ylim=None,title='Featureimportance',xlabel='Fscore',ylabel='Features',importance_type='weight',max_num_features=None,grid=True,show_values=True,**kwargs)
xgboost.plot_tree(booster,fmap='',num_trees=0,rankdir=None,ax=None,**kwargs)
xgboost.plotting.plot_importance(booster,ax=None,height=0.2,xlim=None,ylim=None,title='Featureimportance',xlabel='Fscore',ylabel='Features',importance_type='weight',max_num_features=None,grid=True,show_values=True,**kwargs)
xgboost.plotting.plot_tree(booster,fmap='',num_trees=0,rankdir=None,ax=None,**kwargs)
xgboost.plotting.to_graphviz(booster,fmap='',num_trees=0,rankdir=None,yes_color=None,no_color=None,condition_node_params=None,leaf_node_params=None,**kwargs)
xgboost.to_graphviz(booster,fmap='',num_trees=0,rankdir=None,yes_color=None,no_color=None,condition_node_params=None,leaf_node_params=None,**kwargs)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/callback.py----------------------------------------
A:xgboost.callback.msg->'\t'.join([_fmt_metric(x, show_stdv) for x in env.evaluation_result_list])
A:xgboost.callback.pos->k.index('-')
A:xgboost.callback.new_learning_rate->learning_rates(i, n)
A:xgboost.callback.context->_get_callback_context(env)
A:xgboost.callback.state['best_score']->float(bst.attr('best_score'))
A:xgboost.callback.state['best_iteration']->int(bst.attr('best_iteration'))
A:xgboost.callback.state['best_msg']->bst.attr('best_msg')
xgboost.callback._fmt_metric(value,show_stdv=True)
xgboost.callback._get_callback_context(env)
xgboost.callback.early_stop(stopping_rounds,maximize=False,verbose=True)
xgboost.callback.print_evaluation(period=1,show_stdv=True)
xgboost.callback.record_evaluation(eval_result)
xgboost.callback.reset_learning_rate(learning_rates)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/training.py----------------------------------------
A:xgboost.training.evals->list(evals)
A:xgboost.training.params->dict(((k, v) for (k, v) in params.items()))
A:xgboost.training.bst->Booster(params, [dtrain] + [d[0] for d in evals], model_file=xgb_model)
A:xgboost.training.nboost->len(bst.get_dump())
A:xgboost.training.version->Booster(params, [dtrain] + [d[0] for d in evals], model_file=xgb_model).load_rabit_checkpoint()
A:xgboost.training.rank->rabit.get_rank()
A:xgboost.training.start_iteration->int(version / 2)
A:xgboost.training.bst_eval_set->Booster(params, [dtrain] + [d[0] for d in evals], model_file=xgb_model).eval_set(evals, i, feval)
A:xgboost.training.msg->msg.decode().decode()
A:xgboost.training.bst.best_score->float(bst.attr('best_score'))
A:xgboost.training.bst.best_iteration->int(bst.attr('best_iteration'))
A:xgboost.training.self.bst->Booster(param, [dtrain, dtest])
A:xgboost.training.group_boundaries->dall.get_uint_info('group_ptr')
A:xgboost.training.group_sizes->numpy.diff(group_boundaries)
A:xgboost.training.idx->numpy.arange(dall.num_row())
A:xgboost.training.out_group_idset->numpy.array_split(idx, nfold)
A:xgboost.training.dtrain->dall.slice(in_idset[k])
A:xgboost.training.dtest->dall.slice(out_idset[k])
A:xgboost.training.(dtrain, dtest, tparam)->fpreproc(dtrain, dtest, param.copy())
A:xgboost.training.out_idset->numpy.array_split(idx, nfold)
A:xgboost.training.splits->list(sfk.split(X=dall.get_label(), y=dall.get_label()))
A:xgboost.training.nfold->len(out_idset)
A:xgboost.training.sfk->XGBStratifiedKFold(n_splits=nfold, shuffle=True, random_state=seed)
A:xgboost.training.arr->line.split()
A:xgboost.training.it->it.decode().decode()
A:xgboost.training.(k, v)->it.decode().decode().split(':')
A:xgboost.training.v->numpy.array(v)
A:xgboost.training.cvfolds->mknfold(dtrain, nfold, params, seed, metrics, fpreproc, stratified, folds, shuffle)
A:xgboost.training.res->aggcv([f.eval(i, feval) for f in cvfolds])
A:xgboost.training.results->pandas.DataFrame.from_dict(results)
xgboost.cv(params,dtrain,num_boost_round=10,nfold=3,stratified=False,folds=None,metrics=(),obj=None,feval=None,maximize=False,early_stopping_rounds=None,fpreproc=None,as_pandas=True,verbose_eval=None,show_stdv=True,seed=0,callbacks=None,shuffle=True)
xgboost.train(params,dtrain,num_boost_round=10,evals=(),obj=None,feval=None,maximize=False,early_stopping_rounds=None,evals_result=None,verbose_eval=True,xgb_model=None,callbacks=None)
xgboost.training.CVPack(self,dtrain,dtest,param)
xgboost.training.CVPack.__init__(self,dtrain,dtest,param)
xgboost.training.CVPack.eval(self,iteration,feval)
xgboost.training.CVPack.update(self,iteration,fobj)
xgboost.training._train_internal(params,dtrain,num_boost_round=10,evals=(),obj=None,feval=None,xgb_model=None,callbacks=None)
xgboost.training.aggcv(rlist)
xgboost.training.cv(params,dtrain,num_boost_round=10,nfold=3,stratified=False,folds=None,metrics=(),obj=None,feval=None,maximize=False,early_stopping_rounds=None,fpreproc=None,as_pandas=True,verbose_eval=None,show_stdv=True,seed=0,callbacks=None,shuffle=True)
xgboost.training.groups_to_rows(groups,boundaries)
xgboost.training.mkgroupfold(dall,nfold,param,evals=(),fpreproc=None,shuffle=True)
xgboost.training.mknfold(dall,nfold,param,seed,evals=(),fpreproc=None,stratified=False,folds=None,shuffle=True)
xgboost.training.train(params,dtrain,num_boost_round=10,evals=(),obj=None,feval=None,maximize=False,early_stopping_rounds=None,evals_result=None,verbose_eval=True,xgb_model=None,callbacks=None)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/compat.py----------------------------------------
A:xgboost.compat.path_type->type(path)
A:xgboost.compat.path_repr->type(path).__fspath__(path)
A:xgboost.compat.meta->dict()
A:xgboost.compat.meta[k]->v.tolist()
A:xgboost.compat.self.classes_->numpy.array(v)
xgboost.compat.py_str(x)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/__init__.py----------------------------------------
A:xgboost.__init__.VERSION_FILE->os.path.join(os.path.dirname(__file__), 'VERSION')
A:xgboost.__init__.__version__->f.read().strip()


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/dmlc-core/scripts/lint.py----------------------------------------
A:xgboost.dmlc-core.scripts.lint.CXX_SUFFIX->set(['cc', 'c', 'cpp', 'h', 'cu', 'hpp'])
A:xgboost.dmlc-core.scripts.lint.PYTHON_SUFFIX->set(['py'])
A:xgboost.dmlc-core.scripts.lint.npass->len([x for (k, x) in result_map.items() if len(x) == 0])
A:xgboost.dmlc-core.scripts.lint.self.pylint_cats->set(['error', 'warning', 'convention', 'refactor'])
A:xgboost.dmlc-core.scripts.lint._->cpplint.ParseArguments(cpplint_args)
A:xgboost.dmlc-core.scripts.lint.errors->cpplint._cpplint_state.errors_by_category.copy()
A:xgboost.dmlc-core.scripts.lint.(pylint_stdout, pylint_stderr)->pylint.epylint.py_run(' '.join([str(path)] + self.pylint_opts), return_std=True)
A:xgboost.dmlc-core.scripts.lint.err->pylint_stderr.read()
A:xgboost.dmlc-core.scripts.lint.key->line.split(':')[-1].split('(')[0].strip()
A:xgboost.dmlc-core.scripts.lint._HELPER->LintHelper()
A:xgboost.dmlc-core.scripts.lint.fileinfo->cpplint.FileInfo(filename)
A:xgboost.dmlc-core.scripts.lint.file_path_from_root->re.sub('^' + prefix, '', file_path_from_root)
A:xgboost.dmlc-core.scripts.lint.idx->re.sub('^' + prefix, '', file_path_from_root).find('include/')
A:xgboost.dmlc-core.scripts.lint.fname->str(fname)
A:xgboost.dmlc-core.scripts.lint.arr->str(fname).rsplit('.', 1)
A:xgboost.dmlc-core.scripts.lint.parser->argparse.ArgumentParser(description='lint source codes')
A:xgboost.dmlc-core.scripts.lint.args->argparse.ArgumentParser(description='lint source codes').parse_args()
A:xgboost.dmlc-core.scripts.lint.allow_type->set(allow_type)
A:xgboost.dmlc-core.scripts.lint.sys.stderr->codecs.StreamReaderWriter(sys.stderr, codecs.getreader('utf8'), codecs.getwriter('utf8'), 'replace')
A:xgboost.dmlc-core.scripts.lint.excluded_paths->filepath_enumerate(args.exclude_path)
A:xgboost.dmlc-core.scripts.lint.normpath->os.path.normpath(path)
A:xgboost.dmlc-core.scripts.lint.file_path->os.path.normpath(os.path.join(root, name))
A:xgboost.dmlc-core.scripts.lint.nerr->LintHelper().print_summary(sys.stderr)
xgboost.dmlc-core.scripts.lint.LintHelper(self)
xgboost.dmlc-core.scripts.lint.LintHelper.__init__(self)
xgboost.dmlc-core.scripts.lint.LintHelper._print_summary_map(strm,result_map,ftype)
xgboost.dmlc-core.scripts.lint.LintHelper.print_summary(self,strm)
xgboost.dmlc-core.scripts.lint.LintHelper.process_cpp(self,path,suffix)
xgboost.dmlc-core.scripts.lint.LintHelper.process_python(self,path)
xgboost.dmlc-core.scripts.lint.filepath_enumerate(paths)
xgboost.dmlc-core.scripts.lint.get_header_guard_dmlc(filename)
xgboost.dmlc-core.scripts.lint.main()
xgboost.dmlc-core.scripts.lint.process(fname,allow_type)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/dmlc-core/doc/conf.py----------------------------------------
A:xgboost.dmlc-core.doc.conf.curr_path->os.path.dirname(os.path.abspath(os.path.expanduser(__file__)))
A:xgboost.dmlc-core.doc.conf.retcode->subprocess.call('cp -rf doxygen/html _build/html/doxygen', shell=True)
xgboost.dmlc-core.doc.conf.generate_doxygen_xml(app)
xgboost.dmlc-core.doc.conf.run_doxygen(folder)
xgboost.dmlc-core.doc.conf.setup(app)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/dmlc-core/doc/sphinx_util.py----------------------------------------


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/dmlc-core/tracker/dmlc_tracker/util.py----------------------------------------


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/dmlc-core/tracker/dmlc_tracker/local.py----------------------------------------
A:xgboost.dmlc-core.tracker.dmlc_tracker.local.cmdline->' '.join(cmd + ['DMLC_NUM_ATTEMPT=' + str(num_trial)])
A:xgboost.dmlc-core.tracker.dmlc_tracker.local.env->os.environ.copy()
A:xgboost.dmlc-core.tracker.dmlc_tracker.local.env[k]->str(v)
A:xgboost.dmlc-core.tracker.dmlc_tracker.local.env['DMLC_TASK_ID']->str(taskid)
A:xgboost.dmlc-core.tracker.dmlc_tracker.local.num_retry->os.environ.copy().get('DMLC_NUM_ATTEMPT', num_attempt)
A:xgboost.dmlc-core.tracker.dmlc_tracker.local.ret->subprocess.call(cmdline, shell=True, executable='bash', env=env)
A:xgboost.dmlc-core.tracker.dmlc_tracker.local.procs[i]->Thread(target=exec_cmd, args=(args.command, args.local_num_attempt, role, i, envs))
xgboost.dmlc-core.tracker.dmlc_tracker.local.exec_cmd(cmd,num_attempt,role,taskid,pass_env)
xgboost.dmlc-core.tracker.dmlc_tracker.local.submit(args)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/dmlc-core/tracker/dmlc_tracker/opts.py----------------------------------------
A:xgboost.dmlc-core.tracker.dmlc_tracker.opts.fset->set()
A:xgboost.dmlc-core.tracker.dmlc_tracker.opts.mem_str->mem_str.lower().lower()
A:xgboost.dmlc-core.tracker.dmlc_tracker.opts.parser->argparse.ArgumentParser(description='DMLC job submission.')
A:xgboost.dmlc-core.tracker.dmlc_tracker.opts.(args, unknown)->argparse.ArgumentParser(description='DMLC job submission.').parse_known_args(args)
A:xgboost.dmlc-core.tracker.dmlc_tracker.opts.args.cluster->os.getenv('DMLC_SUBMIT_CLUSTER', None)
A:xgboost.dmlc-core.tracker.dmlc_tracker.opts.args.worker_memory_mb->get_memory_mb(args.worker_memory)
A:xgboost.dmlc-core.tracker.dmlc_tracker.opts.args.server_memory_mb->get_memory_mb(args.server_memory)
xgboost.dmlc-core.tracker.dmlc_tracker.opts.get_cache_file_set(args)
xgboost.dmlc-core.tracker.dmlc_tracker.opts.get_memory_mb(mem_str)
xgboost.dmlc-core.tracker.dmlc_tracker.opts.get_opts(args=None)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/dmlc-core/tracker/dmlc_tracker/sge.py----------------------------------------
A:xgboost.dmlc-core.tracker.dmlc_tracker.sge.fo->open(runscript, 'w')
A:xgboost.dmlc-core.tracker.dmlc_tracker.sge.env_arg->','.join(['%s="%s"' % (k, str(v)) for (k, v) in pass_envs.items()])
xgboost.dmlc-core.tracker.dmlc_tracker.sge.submit(args)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/dmlc-core/tracker/dmlc_tracker/tracker.py----------------------------------------
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.chunk->self.sock.recv(min(nbytes - nread, 1024))
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.slen->self.recvint()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.slave->ExSocket(sock)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.self.host->get_some_ip(s_addr[0])
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.magic->ExSocket(sock).recvint()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.self.rank->ExSocket(sock).recvint()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.self.world_size->ExSocket(sock).recvint()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.self.jobid->ExSocket(sock).recvstr()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.self.cmd->ExSocket(sock).recvstr()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.nnset->set(tree_map[rank])
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.ngood->self.sock.recvint()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.goodset->set([])
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.nerr->self.sock.recvint()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.self.port->self.sock.recvint()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.sock->socket.socket(get_family(hostIP), socket.SOCK_STREAM)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.tree_map[r]->self.get_neighbor(r, nslave)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.nset->set(tree_map[r])
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.vlst->self.find_share_ring(tree_map, parent_map, v)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.rlst->self.find_share_ring(tree_map, parent_map, 0)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.nslave->len(tree_map)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.(tree_map, parent_map)->self.get_tree(nslave)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.ring_map->self.get_ring(tree_map, parent_map)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.(fd, s_addr)->self.sock.accept()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.s->socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.msg->socket.socket(socket.AF_INET, socket.SOCK_DGRAM).sock.recvstr()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.(tree_map, parent_map, ring_map)->self.get_link_map(nslave)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.todo_nodes->list(range(nslave))
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.rank->list(range(nslave)).pop(0)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.self.start_time->time.time()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.self.end_time->time.time()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.self.thread->Thread(target=lambda : subprocess.check_call(self.cmd, env=env, shell=True, executable='/bin/bash'), args=())
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.env->os.environ.copy()
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.env['DMLC_PS_ROOT_URI']->str(self.hostIP)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.env['DMLC_PS_ROOT_PORT']->str(self.port)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.env[k]->str(v)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.hostIP->get_host_ip(hostIP)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.rabit->RabitTracker(hostIP=get_host_ip(args.host_ip), nslave=args.num_workers)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.pserver->PSTracker(hostIP=hostIP, cmd=pscmd, envs=envs)
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.parser->argparse.ArgumentParser(description='Rabit Tracker start.')
A:xgboost.dmlc-core.tracker.dmlc_tracker.tracker.args->argparse.ArgumentParser(description='Rabit Tracker start.').parse_args()
xgboost.dmlc-core.tracker.dmlc_tracker.RabitTracker(self,hostIP,nslave,port=9091,port_end=9999)
xgboost.dmlc-core.tracker.dmlc_tracker.RabitTracker.__del__(self)
xgboost.dmlc-core.tracker.dmlc_tracker.RabitTracker.accept_slaves(self,nslave)
xgboost.dmlc-core.tracker.dmlc_tracker.RabitTracker.alive(self)
xgboost.dmlc-core.tracker.dmlc_tracker.RabitTracker.find_share_ring(self,tree_map,parent_map,r)
xgboost.dmlc-core.tracker.dmlc_tracker.RabitTracker.get_link_map(self,nslave)
xgboost.dmlc-core.tracker.dmlc_tracker.RabitTracker.get_neighbor(rank,nslave)
xgboost.dmlc-core.tracker.dmlc_tracker.RabitTracker.get_ring(self,tree_map,parent_map)
xgboost.dmlc-core.tracker.dmlc_tracker.RabitTracker.get_tree(self,nslave)
xgboost.dmlc-core.tracker.dmlc_tracker.RabitTracker.join(self)
xgboost.dmlc-core.tracker.dmlc_tracker.RabitTracker.slave_envs(self)
xgboost.dmlc-core.tracker.dmlc_tracker.RabitTracker.start(self,nslave)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.ExSocket(self,sock)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.ExSocket.__init__(self,sock)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.ExSocket.recvall(self,nbytes)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.ExSocket.recvint(self)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.ExSocket.recvstr(self)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.ExSocket.sendint(self,n)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.ExSocket.sendstr(self,s)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.PSTracker(self,hostIP,cmd,port=9091,port_end=9999,envs=None)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.PSTracker.__init__(self,hostIP,cmd,port=9091,port_end=9999,envs=None)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.PSTracker.alive(self)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.PSTracker.join(self)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.PSTracker.slave_envs(self)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker(self,hostIP,nslave,port=9091,port_end=9999)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.__del__(self)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.__init__(self,hostIP,nslave,port=9091,port_end=9999)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.accept_slaves(self,nslave)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.alive(self)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.find_share_ring(self,tree_map,parent_map,r)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.get_link_map(self,nslave)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.get_neighbor(rank,nslave)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.get_ring(self,tree_map,parent_map)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.get_tree(self,nslave)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.join(self)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.slave_envs(self)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.RabitTracker.start(self,nslave)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.SlaveEntry(self,sock,s_addr)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.SlaveEntry.__init__(self,sock,s_addr)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.SlaveEntry.assign_rank(self,rank,wait_conn,tree_map,parent_map,ring_map)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.SlaveEntry.decide_rank(self,job_map)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.get_family(addr)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.get_host_ip(hostIP=None)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.get_some_ip(host)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.main()
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.start_rabit_tracker(args)
xgboost.dmlc-core.tracker.dmlc_tracker.tracker.submit(nworker,nserver,fun_submit,hostIP='auto',pscmd=None)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/dmlc-core/tracker/dmlc_tracker/slurm.py----------------------------------------
A:xgboost.dmlc-core.tracker.dmlc_tracker.slurm.cmd->' '.join(args.command)
A:xgboost.dmlc-core.tracker.dmlc_tracker.slurm.thread->Thread(target=run, args=(prog,))
xgboost.dmlc-core.tracker.dmlc_tracker.slurm.get_mpi_env(envs)
xgboost.dmlc-core.tracker.dmlc_tracker.slurm.submit(args)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/dmlc-core/tracker/dmlc_tracker/mpi.py----------------------------------------
A:xgboost.dmlc-core.tracker.dmlc_tracker.mpi.(out, err)->subprocess.Popen(['mpirun', '--version'], stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
A:xgboost.dmlc-core.tracker.dmlc_tracker.mpi.thread->Thread(target=run, args=(prog,))
xgboost.dmlc-core.tracker.dmlc_tracker.mpi.get_mpi_env(envs)
xgboost.dmlc-core.tracker.dmlc_tracker.mpi.submit(args)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/dmlc-core/tracker/dmlc_tracker/mesos.py----------------------------------------
A:xgboost.dmlc-core.tracker.dmlc_tracker.mesos.cwd->os.getcwd()
A:xgboost.dmlc-core.tracker.dmlc_tracker.mesos.DEVNULL->open(os.devnull, 'w')
A:xgboost.dmlc-core.tracker.dmlc_tracker.mesos.name->str(uuid.uuid4())
A:xgboost.dmlc-core.tracker.dmlc_tracker.mesos.resources->resources.replace("'", "\\'").replace("'", "\\'")
A:xgboost.dmlc-core.tracker.dmlc_tracker.mesos.prog->' '.join(args.command)
A:xgboost.dmlc-core.tracker.dmlc_tracker.mesos.env->json.dumps(env).replace("'", "\\'")
A:xgboost.dmlc-core.tracker.dmlc_tracker.mesos.keys->set(['OMP_NUM_THREADS', 'KMP_AFFINITY', 'LD_LIBRARY_PATH'])
A:xgboost.dmlc-core.tracker.dmlc_tracker.mesos.thread->Thread(target=_run, args=(prog, env, resources))
xgboost.dmlc-core.tracker.dmlc_tracker.mesos.get_env()
xgboost.dmlc-core.tracker.dmlc_tracker.mesos.submit(args)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/dmlc-core/tracker/dmlc_tracker/ssh.py----------------------------------------
A:xgboost.dmlc-core.tracker.dmlc_tracker.ssh.v->os.getenv(k)
A:xgboost.dmlc-core.tracker.dmlc_tracker.ssh.tmp->f.readlines()
A:xgboost.dmlc-core.tracker.dmlc_tracker.ssh.h->h.strip().strip()
A:xgboost.dmlc-core.tracker.dmlc_tracker.ssh.i->h.strip().strip().find(':')
A:xgboost.dmlc-core.tracker.dmlc_tracker.ssh.pool->Pool(processes=len(hosts))
A:xgboost.dmlc-core.tracker.dmlc_tracker.ssh.thread->Thread(target=run, args=(prog,))
xgboost.dmlc-core.tracker.dmlc_tracker.ssh.get_env(pass_envs)
xgboost.dmlc-core.tracker.dmlc_tracker.ssh.submit(args)
xgboost.dmlc-core.tracker.dmlc_tracker.ssh.sync_dir(local_dir,slave_node,slave_dir)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/dmlc-core/tracker/dmlc_tracker/launcher.py----------------------------------------
A:xgboost.dmlc-core.tracker.dmlc_tracker.launcher.hadoop_home->os.getenv('HADOOP_HOME')
A:xgboost.dmlc-core.tracker.dmlc_tracker.launcher.hdfs_home->os.getenv('HADOOP_HDFS_HOME')
A:xgboost.dmlc-core.tracker.dmlc_tracker.launcher.java_home->os.getenv('JAVA_HOME')
A:xgboost.dmlc-core.tracker.dmlc_tracker.launcher.cluster->os.getenv('DMLC_JOB_CLUSTER')
A:xgboost.dmlc-core.tracker.dmlc_tracker.launcher.env->os.environ.copy()
A:xgboost.dmlc-core.tracker.dmlc_tracker.launcher.num_worker->int(env['DMLC_NUM_WORKER'])
A:xgboost.dmlc-core.tracker.dmlc_tracker.launcher.task_id->int(env['DMLC_TASK_ID'])
A:xgboost.dmlc-core.tracker.dmlc_tracker.launcher.(classpath, _)->subprocess.Popen('%s/bin/hadoop classpath' % hadoop_home, stdout=subprocess.PIPE, shell=True, env=os.environ).communicate()
A:xgboost.dmlc-core.tracker.dmlc_tracker.launcher.classpath->py_str(class_path)
A:xgboost.dmlc-core.tracker.dmlc_tracker.launcher.ret->subprocess.call(args=sys.argv[1:], env=env)
xgboost.dmlc-core.tracker.dmlc_tracker.launcher.main()
xgboost.dmlc-core.tracker.dmlc_tracker.launcher.unzip_archives(ar_list,env)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/dmlc-core/tracker/dmlc_tracker/kubernetes.py----------------------------------------
A:xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.spec->kubernetes.client.V1ServiceSpec(selector={'app': name}, ports=[client.V1ServicePort(protocol='TCP', port=port, target_port=target_port)])
A:xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.service->kubernetes.client.V1Service(metadata=client.V1ObjectMeta(name=name), spec=spec)
A:xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.job->kubernetes.client.V1Job(api_version='batch/v1', kind='Job', spec=client.V1JobSpec(template=pod_temp), metadata=client.V1ObjectMeta(name=name))
A:xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.container->kubernetes.client.V1Container(image=image, command=commands, name=name, env=envs)
A:xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.pod_temp->kubernetes.client.V1PodTemplateSpec(spec=client.V1PodSpec(restart_policy='OnFailure', containers=[container]), metadata=client.V1ObjectMeta(name=name, labels={'app': name}))
A:xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.sd_envs->create_env(r_uri, r_port, nserver, nworker)
A:xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.mn_sh_job->create_sched_job_manifest(str(nworker), str(nserver), sd_envs, sv_image, args.command)
A:xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.mn_sh_svc->create_sched_svc_manifest(r_uri, r_port)
A:xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.envs->create_env(r_uri, r_port, nserver, nworker)
A:xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.mn_sv->create_ps_manifest(str(i), str(nserver), args.jobname, envs, sv_image, args.command, args.kube_server_template)
A:xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.mn_wk->create_wk_manifest(str(i), str(nworker), str(nserver), args.jobname, envs, wk_image, args.command, args.kube_worker_template)
A:xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.k8s_coreapi->kubernetes.client.CoreV1Api()
A:xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.k8s_batch->kubernetes.client.BatchV1Api()
A:xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.resp->kubernetes.client.BatchV1Api().create_namespaced_job(body=m, namespace='default')
xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.create_env(root_uri,root_port,sv_num,wk_num)
xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.create_job_manifest(envs,commands,name,image,template_file)
xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.create_ps_manifest(ps_id,ps_num,job_name,envs,image,commands,template_file)
xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.create_sched_job_manifest(wk_num,ps_num,envs,image,commands)
xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.create_sched_svc_manifest(name,port)
xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.create_svc_manifest(name,port,target_port)
xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.create_wk_manifest(wk_id,wk_num,ps_num,job_name,envs,image,commands,template_file)
xgboost.dmlc-core.tracker.dmlc_tracker.kubernetes.submit(args)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/dmlc-core/tracker/dmlc_tracker/yarn.py----------------------------------------
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.hadoop_home->os.getenv('HADOOP_HOME')
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.hadoop_binary->os.path.join(hadoop_home, 'bin', 'hadoop')
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.YARN_JAR_PATH->os.path.join(args.yarn_app_dir, 'dmlc-yarn.jar')
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.curr_path->os.path.dirname(os.path.abspath(os.path.expanduser(__file__)))
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.YARN_BOOT_PY->os.path.join(curr_path, 'launcher.py')
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.(out, _)->subprocess.Popen('%s version' % hadoop_binary, shell=True, stdout=subprocess.PIPE).communicate()
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.out->py_str(out).split('\n')[0].split()
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.hadoop_version->int(out[1].split('.')[0])
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.(classpath, _)->subprocess.Popen('%s classpath' % hadoop_binary, shell=True, stdout=subprocess.PIPE).communicate()
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.classpath->py_str(classpath).strip()
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.(fset, new_command)->opts.get_cache_file_set(args)
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.JAVA_HOME->os.getenv('JAVA_HOME')
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.JAVA->os.path.join(JAVA_HOME, 'bin', 'java')
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.env->os.environ.copy()
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.env[k]->str(v)
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.env['DMLC_WORKER_CORES']->str(args.worker_cores)
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.env['DMLC_WORKER_MEMORY_MB']->str(args.worker_memory_mb)
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.env['DMLC_SERVER_CORES']->str(args.server_cores)
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.env['DMLC_SERVER_MEMORY_MB']->str(args.server_memory_mb)
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.env['DMLC_NUM_WORKER']->str(args.num_workers)
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.env['DMLC_NUM_SERVER']->str(args.num_servers)
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.env['DMLC_JOB_ARCHIVES']->':'.join(ar_list)
A:xgboost.dmlc-core.tracker.dmlc_tracker.yarn.thread->Thread(target=run, args=())
xgboost.dmlc-core.tracker.dmlc_tracker.yarn.submit(args)
xgboost.dmlc-core.tracker.dmlc_tracker.yarn.yarn_submit(args,nworker,nserver,pass_env)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/dmlc-core/tracker/dmlc_tracker/submit.py----------------------------------------
A:xgboost.dmlc-core.tracker.dmlc_tracker.submit.console->logging.StreamHandler()
A:xgboost.dmlc-core.tracker.dmlc_tracker.submit.args->opts.get_opts()
xgboost.dmlc-core.tracker.dmlc_tracker.submit.config_logger(args)
xgboost.dmlc-core.tracker.dmlc_tracker.submit.main()


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/dmlc-core/tracker/dmlc_tracker/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/rabit/test/local_recover.py----------------------------------------
A:xgboost.rabit.test.local_recover.rank->rabit.get_rank()
A:xgboost.rabit.test.local_recover.(version, model, local)->rabit.load_checkpoint(True)
A:xgboost.rabit.test.local_recover.model->numpy.zeros(n)
A:xgboost.rabit.test.local_recover.local->numpy.ones(n)
A:xgboost.rabit.test.local_recover.res->rabit.allreduce(data + model + local, rabit.SUM)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/rabit/test/speed_runner.py----------------------------------------
A:xgboost.rabit.test.speed_runner.parser->argparse.ArgumentParser(description='TODO')
A:xgboost.rabit.test.speed_runner.args->argparse.ArgumentParser(description='TODO').parse_args()
A:xgboost.rabit.test.speed_runner.host_file->os.path.join(args.host_dir, 'hosts%d' % machine)
xgboost.rabit.test.speed_runner.main()


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/rabit/doc/conf.py----------------------------------------
A:xgboost.rabit.doc.conf.curr_path->os.path.dirname(os.path.abspath(os.path.expanduser(__file__)))
A:xgboost.rabit.doc.conf.libpath->os.path.join(curr_path, '../wrapper/')
A:xgboost.rabit.doc.conf.retcode->subprocess.call('cp -rf doxygen/html _build/html/doxygen', shell=True)
xgboost.rabit.doc.conf.generate_doxygen_xml(app)
xgboost.rabit.doc.conf.run_build_lib(folder)
xgboost.rabit.doc.conf.run_doxygen(folder)
xgboost.rabit.doc.conf.setup(app)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/rabit/doc/sphinx_util.py----------------------------------------


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/rabit/python/rabit.py----------------------------------------
A:xgboost.rabit.python.rabit.curr_path->os.path.dirname(os.path.abspath(os.path.expanduser(__file__)))
A:xgboost.rabit.python.rabit._LIB->ctypes.cdll.LoadLibrary(_find_lib_path(dll_name)[0])
A:xgboost.rabit.python.rabit.arr->(ctypes.c_char_p * len(args))()
A:xgboost.rabit.python.rabit.ret->ctypes.cdll.LoadLibrary(_find_lib_path(dll_name)[0]).RabitVersionNumber()
A:xgboost.rabit.python.rabit.msg->str(msg)
A:xgboost.rabit.python.rabit.length->ctypes.c_ulong()
A:xgboost.rabit.python.rabit.buf->buf.copy().copy()
A:xgboost.rabit.python.rabit.rank->get_rank()
A:xgboost.rabit.python.rabit.s->pickle.dumps(data, protocol=pickle.HIGHEST_PROTOCOL)
A:xgboost.rabit.python.rabit.length.value->len(s)
A:xgboost.rabit.python.rabit.dptr->(ctypes.c_char * length.value)()
A:xgboost.rabit.python.rabit.data->(ctypes.c_char * length).from_address(ctypes.addressof(ptr.contents))
A:xgboost.rabit.python.rabit.func_ptr->ctypes.CFUNCTYPE(None, ctypes.c_void_p)
A:xgboost.rabit.python.rabit.gptr->ctypes.POINTER(ctypes.c_char)()
A:xgboost.rabit.python.rabit.global_len->ctypes.c_ulong()
A:xgboost.rabit.python.rabit.lptr->ctypes.POINTER(ctypes.c_char)()
A:xgboost.rabit.python.rabit.local_len->ctypes.c_ulong()
A:xgboost.rabit.python.rabit.version->ctypes.cdll.LoadLibrary(_find_lib_path(dll_name)[0]).RabitLoadCheckPoint(ctypes.byref(gptr), ctypes.byref(global_len), None, None)
A:xgboost.rabit.python.rabit.sglobal->pickle.dumps(global_model)
A:xgboost.rabit.python.rabit.slocal->pickle.dumps(local_model)
xgboost.rabit.python.rabit._find_lib_path(dll_name)
xgboost.rabit.python.rabit._load_model(ptr,length)
xgboost.rabit.python.rabit._loadlib(lib='standard',lib_dll=None)
xgboost.rabit.python.rabit._unloadlib()
xgboost.rabit.python.rabit.allreduce(data,op,prepare_fun=None)
xgboost.rabit.python.rabit.broadcast(data,root)
xgboost.rabit.python.rabit.checkpoint(global_model,local_model=None)
xgboost.rabit.python.rabit.finalize()
xgboost.rabit.python.rabit.get_processor_name()
xgboost.rabit.python.rabit.get_rank()
xgboost.rabit.python.rabit.get_world_size()
xgboost.rabit.python.rabit.init(args=None,lib='standard',lib_dll=None)
xgboost.rabit.python.rabit.load_checkpoint(with_local=False)
xgboost.rabit.python.rabit.tracker_print(msg)
xgboost.rabit.python.rabit.version_number()


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/rabit/guide/basic.py----------------------------------------
A:xgboost.rabit.guide.basic.rank->rabit.get_rank()
A:xgboost.rabit.guide.basic.a->rabit.allreduce(a, rabit.SUM)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/rabit/guide/lazy_allreduce.py----------------------------------------
A:xgboost.rabit.guide.lazy_allreduce.rank->rabit.get_rank()
A:xgboost.rabit.guide.lazy_allreduce.a->rabit.allreduce(a, rabit.SUM)
xgboost.rabit.guide.lazy_allreduce.prepare(a)


----------------------------------------/home/zhang/Packages/xgboost/xgboost1.0.1/rabit/guide/broadcast.py----------------------------------------
A:xgboost.rabit.guide.broadcast.rank->rabit.get_rank()
A:xgboost.rabit.guide.broadcast.s->rabit.broadcast(s, 0)

