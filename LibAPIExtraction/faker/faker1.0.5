
----------------------------------------/home/zhang/Packages/faker/faker1.0.5/generator.py----------------------------------------
A:faker.generator._re_token->re.compile('\\{\\{(\\s?)(\\w+)(\\s?)\\}\\}')
A:faker.generator.random->random.Random()
A:faker.generator.self.__config->dict(list(self.__config.items()) + list(config.items()))
A:faker.generator.provider->provider(self)
A:faker.generator.faker_function->getattr(provider, method_name)
A:faker.generator.self.__random->random.Random()
A:faker.generator.msg->'Unknown formatter "{0}" with locale "{1}"'.format(formatter, self.__config['locale'])
A:faker.generator.formatter->list(matches.groups())
A:faker.generator.formatter[1]->self.format(formatter[1])
faker.Generator(self,**config)
faker.Generator.__format_token(self,matches)
faker.Generator.add_provider(self,provider)
faker.Generator.format(self,formatter,*args,**kwargs)
faker.Generator.get_formatter(self,formatter)
faker.Generator.get_providers(self)
faker.Generator.parse(self,text)
faker.Generator.provider(self,name)
faker.Generator.random(self)
faker.Generator.random(self,value)
faker.Generator.seed(cls,seed=None)
faker.Generator.seed_instance(self,seed=None)
faker.Generator.set_formatter(self,name,method)
faker.generator.Generator(self,**config)
faker.generator.Generator.__format_token(self,matches)
faker.generator.Generator.__init__(self,**config)
faker.generator.Generator.add_provider(self,provider)
faker.generator.Generator.format(self,formatter,*args,**kwargs)
faker.generator.Generator.get_formatter(self,formatter)
faker.generator.Generator.get_providers(self)
faker.generator.Generator.parse(self,text)
faker.generator.Generator.provider(self,name)
faker.generator.Generator.random(self)
faker.generator.Generator.random(self,value)
faker.generator.Generator.seed(cls,seed=None)
faker.generator.Generator.seed_instance(self,seed=None)
faker.generator.Generator.set_formatter(self,name,method)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/factory.py----------------------------------------
A:faker.factory.logger->logging.getLogger(__name__)
A:faker.factory.inREPL->bool(getattr(sys, 'ps1', False))
A:faker.factory.msg->'Unable to find provider `{0}` with locale `{1}`'.format(provider, locale)
A:faker.factory.(prov_cls, lang_found)->cls._get_provider_class(prov_name, locale)
A:faker.factory.provider->prov_cls(faker)
A:faker.factory.provider_class->cls._find_provider_class(provider)
A:faker.factory.provider_module->import_module(provider_path)
A:faker.factory.available_locales->list_module(provider_module)
A:faker.factory.locale->getattr(provider_module, 'default_locale', DEFAULT_LOCALE)
A:faker.factory.path->'{provider_path}.{locale}'.format(provider_path=provider_path, locale=locale)
faker.Factory(object)
faker.Factory._find_provider_class(cls,provider_path,locale=None)
faker.Factory._get_provider_class(cls,provider,locale='')
faker.Factory.create(cls,locale=None,providers=None,generator=None,includes=None,**config)
faker.factory.Factory(object)
faker.factory.Factory._find_provider_class(cls,provider_path,locale=None)
faker.factory.Factory._get_provider_class(cls,provider,locale='')
faker.factory.Factory.create(cls,locale=None,providers=None,generator=None,includes=None,**config)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/build_docs.py----------------------------------------
A:faker.build_docs.DOCS_ROOT->os.path.abspath(os.path.join('..', 'docs'))
A:faker.build_docs.title->'Language {0}\n'.format(lang)
A:faker.build_docs.example->pprint.pformat(example, indent=4)
A:faker.build_docs.lines->six.text_type(example).expandtabs().splitlines()
A:faker.build_docs.msg->'error on "{0}" with value "{1}"'.format(signature, example)
A:faker.build_docs.fake->Faker(locale=lang)
A:faker.build_docs.doc->faker.documentor.Documentor(fake)
A:faker.build_docs.formatters->faker.documentor.Documentor(fake).get_formatters(with_args=True, with_defaults=True)
A:faker.build_docs.provider_name->faker.documentor.Documentor(fake).get_provider_name(provider)
A:faker.build_docs.fname->os.path.join(DOCS_ROOT, 'locales', '%s.rst' % lang)
A:faker.build_docs.AVAILABLE_LOCALES->sorted(AVAILABLE_LOCALES)
A:faker.build_docs.d->faker.documentor.Documentor(fake)
faker.build_docs._main(app,*args,**kwargs)
faker.build_docs.setup(app)
faker.build_docs.write(fh,s)
faker.build_docs.write_docs(*args,**kwargs)
faker.build_docs.write_provider(fh,doc,provider,formatters,excludes=None)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/config.py----------------------------------------
A:faker.config.PROVIDERS->find_available_providers([import_module(path) for path in META_PROVIDERS_MODULES])
A:faker.config.AVAILABLE_LOCALES->find_available_locales(PROVIDERS)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/cli.py----------------------------------------
A:faker.cli.lines->six.text_type(example).expandtabs().splitlines()
A:faker.cli.margin->max(30, doc.max_name_len + 1)
A:faker.cli.fake->Faker(locale=language)
A:faker.cli.parts->provider_or_field.split('.')
A:faker.cli.doc->faker.documentor.Documentor(fake)
A:faker.cli.formatters->faker.documentor.Documentor(fake).get_formatters(with_args=True, with_defaults=True)
A:faker.cli.d->faker.documentor.Documentor(fake)
A:faker.cli.self.prog_name->os.path.basename(self.argv[0])
A:faker.cli.epilog->'supported locales:\n\n  {0}\n\n  Faker can take a locale as an optional argument, to return localized data. If\n  no locale argument is specified, the factory falls back to the user\'s OS\n  locale as long as it is supported by at least one of the providers.\n     - for this user, the default locale is {1}.\n\n  If the optional argument locale and/or user\'s default locale is not available\n  for the specified provider, the factory falls back to faker\'s default locale,\n  which is {2}.\n\nexamples:\n\n  $ faker address\n  968 Bahringer Garden Apt. 722\n  Kristinaland, NJ 09890\n\n  $ faker -l de_DE address\n  Samira-Niemeier-Allee 56\n  94812 Biedenkopf\n\n  $ faker profile ssn,birthdate\n  {{\'ssn\': u\'628-10-1085\', \'birthdate\': \'2008-03-29\'}}\n\n  $ faker -r=3 -s=";" name\n  Willam Kertzmann;\n  Josiah Maggio;\n  Gayla Schmitt;\n\n'.format(', '.join(sorted(AVAILABLE_LOCALES)), default_locale, DEFAULT_LOCALE)
A:faker.cli.parser->argparse.ArgumentParser(prog=self.prog_name, description='{0} version {1}'.format(self.prog_name, VERSION), epilog=epilog, formatter_class=formatter_class)
A:faker.cli.arguments->argparse.ArgumentParser(prog=self.prog_name, description='{0} version {1}'.format(self.prog_name, VERSION), epilog=epilog, formatter_class=formatter_class).parse_args(self.argv[1:])
A:faker.cli.seeds->random.sample(range(arguments.repeat * 10), arguments.repeat)
A:faker.cli.command->Command(argv)
faker.cli.Command(self,argv=None)
faker.cli.Command.__init__(self,argv=None)
faker.cli.Command.execute(self)
faker.cli.execute_from_command_line(argv=None)
faker.cli.print_doc(provider_or_field=None,args=None,lang=DEFAULT_LOCALE,output=None,seed=None,includes=None)
faker.cli.print_provider(doc,provider,formatters,excludes=None,output=None)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/__main__.py----------------------------------------


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/documentor.py----------------------------------------
A:faker.documentor.providers->self.generator.get_providers()
A:faker.documentor.argspec->getargspec(method)
A:faker.documentor.default->'{0}'.format(default)
A:faker.documentor.arg->'{0}={1}'.format(arg, default)
A:faker.documentor.signature->'{0}{1}({2})'.format(prefix, name, ', '.join(arguments))
A:faker.documentor.example->self.generator.format(name, *faker_args, **faker_kwargs)
A:faker.documentor.self.max_name_len->max(self.max_name_len, len(signature))
faker.documentor.Documentor(self,generator)
faker.documentor.Documentor.__init__(self,generator)
faker.documentor.Documentor.get_formatters(self,locale=None,excludes=None,**kwargs)
faker.documentor.Documentor.get_provider_formatters(self,provider,prefix='fake.',with_args=True,with_defaults=True)
faker.documentor.Documentor.get_provider_name(provider_class)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/compat.py----------------------------------------
A:faker.compat.self.argspec->_getargspec(method)
faker.compat.getargspec(self,method)
faker.compat.getargspec.__init__(self,method)
faker.compat.getargspec.args(self)
faker.compat.getargspec.defaults(self)
faker.compat.getargspec.varargs(self)
faker.compat.getargspec.varkw(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/utils/loading.py----------------------------------------
A:faker.utils.loading.lib_dir->os.path.join(base_dir, 'lib')
A:faker.utils.loading.base_dir->os.path.dirname(sys.executable)
A:faker.utils.loading.module_to_rel_path->os.path.join(*module.__package__.split('.'))
A:faker.utils.loading.path->get_path(module)
A:faker.utils.loading.available_locales->set()
A:faker.utils.loading.provider_module->import_module(provider_path)
A:faker.utils.loading.langs->list_module(provider_module)
A:faker.utils.loading.available_providers->set()
faker.utils.loading.find_available_locales(providers)
faker.utils.loading.find_available_providers(modules)
faker.utils.loading.get_path(module)
faker.utils.loading.list_module(module)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/utils/datetime_safe.py----------------------------------------
A:faker.utils.datetime_safe._illegal_formatting->re.compile('((^|[^%])(%%)*%[sy])')
A:faker.utils.datetime_safe.j->text.find(substr, i)
A:faker.utils.datetime_safe.illegal_formatting->re.compile('((^|[^%])(%%)*%[sy])').search(fmt)
A:faker.utils.datetime_safe.timetuple->dt.timetuple()
A:faker.utils.datetime_safe.s1->time.strftime(fmt, (year,) + timetuple[1:])
A:faker.utils.datetime_safe.sites1->_findall(s1, str(year))
A:faker.utils.datetime_safe.s2->time.strftime(fmt, (year + 28,) + timetuple[1:])
A:faker.utils.datetime_safe.sites2->_findall(s2, str(year + 28))
faker.utils.datetime_safe._findall(text,substr)
faker.utils.datetime_safe.date(real_date)
faker.utils.datetime_safe.date.strftime(self,fmt)
faker.utils.datetime_safe.datetime(real_datetime)
faker.utils.datetime_safe.datetime.combine(self,date,time)
faker.utils.datetime_safe.datetime.date(self)
faker.utils.datetime_safe.datetime.strftime(self,fmt)
faker.utils.datetime_safe.new_date(d)
faker.utils.datetime_safe.new_datetime(d)
faker.utils.datetime_safe.strftime(dt,fmt)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/utils/text.py----------------------------------------
A:faker.utils.text._re_pattern->re.compile('[^\\w\\s-]', flags=re.U)
A:faker.utils.text._re_pattern_allow_dots->re.compile('[^\\.\\w\\s-]', flags=re.U)
A:faker.utils.text._re_spaces->re.compile('[-\\s]+', flags=re.U)
A:faker.utils.text.value->pattern.sub('', value).strip().lower()
faker.utils.text.slugify(value,allow_dots=False,allow_unicode=False)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/utils/datasets.py----------------------------------------
faker.utils.datasets.add_dicts(*args)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/utils/distribution.py----------------------------------------
A:faker.utils.distribution.items->list(a)
A:faker.utils.distribution.probabilities->list(p)
A:faker.utils.distribution.cdf->list(cumsum(p))
A:faker.utils.distribution.uniform_sample->random_sample(random=random)
A:faker.utils.distribution.idx->bisect.bisect_right(cdf2, uniform_sample)
A:faker.utils.distribution.choices->random.choices(a, weights=p, k=length)
faker.utils.distribution.choices_distribution(a,p,random=None,length=1)
faker.utils.distribution.choices_distribution_unique(a,p,random=None,length=1)
faker.utils.distribution.cumsum(it)
faker.utils.distribution.random_sample(random=None)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/utils/__init__.py----------------------------------------
faker.utils.__init__.is_string(var)
faker.utils.__init__.quote(var)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/utils/decorators.py----------------------------------------
faker.utils.decorators.lowercase(fn)
faker.utils.decorators.slugify(fn)
faker.utils.decorators.slugify_domain(fn)
faker.utils.decorators.slugify_unicode(fn)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/__init__.py----------------------------------------
A:faker.providers.__init__._re_hash->re.compile('#')
A:faker.providers.__init__._re_perc->re.compile('%')
A:faker.providers.__init__._re_excl->re.compile('!')
A:faker.providers.__init__._re_at->re.compile('@')
A:faker.providers.__init__._re_qm->re.compile('\\?')
A:faker.providers.__init__._re_cir->re.compile('\\^')
A:faker.providers.__init__.language_code->self.language_code()
A:faker.providers.__init__.digits->self.random_digit()
A:faker.providers.__init__.length->self.generator.random.randint(1, len(elements))
A:faker.providers.__init__.choices->elements.keys()
A:faker.providers.__init__.probabilities->elements.values()
A:faker.providers.__init__.nb->int(number * self.generator.random.randint(_min, _max) / 100)
A:faker.providers.__init__.text->re.compile('@').sub(lambda x: str(self.random_digit_not_null_or_empty()), text)
A:faker.providers.__init__.letters->letters.upper().upper()
faker.providers.__init__.BaseProvider(self,generator)
faker.providers.__init__.BaseProvider.__init__(self,generator)
faker.providers.__init__.BaseProvider.bothify(self,text='##??',letters=string.ascii_letters)
faker.providers.__init__.BaseProvider.hexify(self,text='^^^^',upper=False)
faker.providers.__init__.BaseProvider.language_code(self)
faker.providers.__init__.BaseProvider.lexify(self,text='????',letters=string.ascii_letters)
faker.providers.__init__.BaseProvider.locale(self)
faker.providers.__init__.BaseProvider.numerify(self,text='###')
faker.providers.__init__.BaseProvider.random_choices(self,elements=('a','b','c'),length=None)
faker.providers.__init__.BaseProvider.random_digit(self)
faker.providers.__init__.BaseProvider.random_digit_not_null(self)
faker.providers.__init__.BaseProvider.random_digit_not_null_or_empty(self)
faker.providers.__init__.BaseProvider.random_digit_or_empty(self)
faker.providers.__init__.BaseProvider.random_element(self,elements=('a','b','c'))
faker.providers.__init__.BaseProvider.random_elements(self,elements=('a','b','c'),length=None,unique=False)
faker.providers.__init__.BaseProvider.random_int(self,min=0,max=9999)
faker.providers.__init__.BaseProvider.random_letter(self)
faker.providers.__init__.BaseProvider.random_letters(self,length=16)
faker.providers.__init__.BaseProvider.random_lowercase_letter(self)
faker.providers.__init__.BaseProvider.random_number(self,digits=None,fix_len=False)
faker.providers.__init__.BaseProvider.random_sample(self,elements=('a','b','c'),length=None)
faker.providers.__init__.BaseProvider.random_uppercase_letter(self)
faker.providers.__init__.BaseProvider.randomize_nb_elements(self,number=10,le=False,ge=False,min=None,max=None)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/misc/__init__.py----------------------------------------
A:faker.providers.misc.__init__.res->hashlib.sha256(str(self.generator.random.random()).encode('utf-8'))
A:faker.providers.misc.__init__.chars->self.random_choices(choices, length=length)
A:faker.providers.misc.__init__.random_indexes->set()
faker.providers.misc.__init__.Provider(BaseProvider)
faker.providers.misc.__init__.Provider.binary(self,length=1*1024*1024)
faker.providers.misc.__init__.Provider.boolean(self,chance_of_getting_true=50)
faker.providers.misc.__init__.Provider.md5(self,raw_output=False)
faker.providers.misc.__init__.Provider.null_boolean(self)
faker.providers.misc.__init__.Provider.password(self,length=10,special_chars=True,digits=True,upper_case=True,lower_case=True)
faker.providers.misc.__init__.Provider.sha1(self,raw_output=False)
faker.providers.misc.__init__.Provider.sha256(self,raw_output=False)
faker.providers.misc.__init__.Provider.uuid4(self,cast_to=str)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/misc/en_US/__init__.py----------------------------------------
faker.providers.misc.en_US.__init__.Provider(MiscProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/__init__.py----------------------------------------
A:faker.providers.address.__init__.pattern->self.random_element(self.address_formats)
faker.providers.address.__init__.Provider(BaseProvider)
faker.providers.address.__init__.Provider.address(self)
faker.providers.address.__init__.Provider.building_number(self)
faker.providers.address.__init__.Provider.city(self)
faker.providers.address.__init__.Provider.city_suffix(self)
faker.providers.address.__init__.Provider.country(self)
faker.providers.address.__init__.Provider.country_code(self,representation=ALPHA_2)
faker.providers.address.__init__.Provider.postcode(self)
faker.providers.address.__init__.Provider.street_address(self)
faker.providers.address.__init__.Provider.street_name(self)
faker.providers.address.__init__.Provider.street_suffix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/en_GB/__init__.py----------------------------------------
A:faker.providers.address.en_GB.__init__._postcode_sets->OrderedDict(((' ', ' '), ('N', [str(i) for i in range(0, 10)]), ('A', POSTAL_ZONES_ONE_CHAR), ('B', 'ABCDEFGHKLMNOPQRSTUVWXY'), ('C', 'ABCDEFGHJKSTUW'), ('D', 'ABEHMNPRVWXY'), ('E', 'ABDEFGHJLNPQRSTUWXYZ'), ('P', POSTAL_ZONES_TWO_CHARS)))
A:faker.providers.address.en_GB.__init__.pattern->self.random_element(self.postcode_formats)
faker.providers.address.en_GB.__init__.Provider(AddressProvider)
faker.providers.address.en_GB.__init__.Provider.city_prefix(self)
faker.providers.address.en_GB.__init__.Provider.postcode(self)
faker.providers.address.en_GB.__init__.Provider.secondary_address(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/en_NZ/__init__.py----------------------------------------
faker.providers.address.en_NZ.__init__.Provider(AddressProvider)
faker.providers.address.en_NZ.__init__.Provider.city_prefix(self)
faker.providers.address.en_NZ.__init__.Provider.city_suffix(self)
faker.providers.address.en_NZ.__init__.Provider.rd_number(self)
faker.providers.address.en_NZ.__init__.Provider.secondary_address(self)
faker.providers.address.en_NZ.__init__.Provider.state(self)
faker.providers.address.en_NZ.__init__.Provider.te_reo_ending(self)
faker.providers.address.en_NZ.__init__.Provider.te_reo_first(self)
faker.providers.address.en_NZ.__init__.Provider.te_reo_part(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/hu_HU/__init__.py----------------------------------------
A:faker.providers.address.hu_HU.__init__.street_suffixes->OrderedDict((('utca', 0.75), ('út', 0.1), ('tér', 0.1), ('köz', 0.001), ('körút', 0.001), ('sétány', 0.001)))
A:faker.providers.address.hu_HU.__init__.numeric_part->super(Provider, self).random_int(1, 250)
faker.providers.address.hu_HU.__init__.Provider(AddressProvider)
faker.providers.address.hu_HU.__init__.Provider.building_number(self)
faker.providers.address.hu_HU.__init__.Provider.city_part(self)
faker.providers.address.hu_HU.__init__.Provider.city_prefix(self)
faker.providers.address.hu_HU.__init__.Provider.county(self)
faker.providers.address.hu_HU.__init__.Provider.frequent_street_name(self)
faker.providers.address.hu_HU.__init__.Provider.postcode(self)
faker.providers.address.hu_HU.__init__.Provider.real_city_name(self)
faker.providers.address.hu_HU.__init__.Provider.street_address_with_county(self)
faker.providers.address.hu_HU.__init__.Provider.street_name(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/de/__init__.py----------------------------------------
faker.providers.address.de.__init__.Provider(AddressProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/he_IL/__init__.py----------------------------------------
faker.providers.address.he_IL.__init__.Provider(AddressProvider)
faker.providers.address.he_IL.__init__.Provider.city_name(self)
faker.providers.address.he_IL.__init__.Provider.street_title(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/no_NO/__init__.py----------------------------------------
A:faker.providers.address.no_NO.__init__.suffix->self.random_element(self.building_number_suffixes)
faker.providers.address.no_NO.__init__.Provider(AddressProvider)
faker.providers.address.no_NO.__init__.Provider.building_number(self)
faker.providers.address.no_NO.__init__.Provider.city_suffix(self)
faker.providers.address.no_NO.__init__.Provider.street_suffix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/sk_SK/__init__.py----------------------------------------
faker.providers.address.sk_SK.__init__.Provider(AddressProvider)
faker.providers.address.sk_SK.__init__.Provider.city_name(self)
faker.providers.address.sk_SK.__init__.Provider.state(self)
faker.providers.address.sk_SK.__init__.Provider.street_name(self)
faker.providers.address.sk_SK.__init__.Provider.street_suffix_long(self)
faker.providers.address.sk_SK.__init__.Provider.street_suffix_short(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/zh_CN/__init__.py----------------------------------------
faker.providers.address.zh_CN.__init__.Provider(AddressProvider)
faker.providers.address.zh_CN.__init__.Provider.building_number(self)
faker.providers.address.zh_CN.__init__.Provider.city_name(self)
faker.providers.address.zh_CN.__init__.Provider.district(self)
faker.providers.address.zh_CN.__init__.Provider.province(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/es_ES/__init__.py----------------------------------------
faker.providers.address.es_ES.__init__.Provider(AddressProvider)
faker.providers.address.es_ES.__init__.Provider.secondary_address(self)
faker.providers.address.es_ES.__init__.Provider.state(self)
faker.providers.address.es_ES.__init__.Provider.state_name(self)
faker.providers.address.es_ES.__init__.Provider.street_prefix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/hi_IN/__init__.py----------------------------------------
faker.providers.address.hi_IN.__init__.Provider(AddressProvider)
faker.providers.address.hi_IN.__init__.Provider.city_name(self)
faker.providers.address.hi_IN.__init__.Provider.state(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/pt_PT/__init__.py----------------------------------------
faker.providers.address.pt_PT.__init__.Provider(AddressProvider)
faker.providers.address.pt_PT.__init__.Provider.city_name(self)
faker.providers.address.pt_PT.__init__.Provider.distrito(self)
faker.providers.address.pt_PT.__init__.Provider.freguesia(self)
faker.providers.address.pt_PT.__init__.Provider.street_prefix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/es/__init__.py----------------------------------------
faker.providers.address.es.__init__.Provider(AddressProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/uk_UA/__init__.py----------------------------------------
faker.providers.address.uk_UA.__init__.Provider(AddressProvider)
faker.providers.address.uk_UA.__init__.Provider.city_prefix(self)
faker.providers.address.uk_UA.__init__.Provider.postcode(self)
faker.providers.address.uk_UA.__init__.Provider.street_prefix(self)
faker.providers.address.uk_UA.__init__.Provider.street_title(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/sl_SI/__init__.py----------------------------------------
faker.providers.address.sl_SI.__init__.Provider(AddressProvider)
faker.providers.address.sl_SI.__init__.Provider.city_name(self)
faker.providers.address.sl_SI.__init__.Provider.state(self)
faker.providers.address.sl_SI.__init__.Provider.street_name(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/fr_FR/__init__.py----------------------------------------
faker.providers.address.fr_FR.__init__.Provider(AddressProvider)
faker.providers.address.fr_FR.__init__.Provider.city_prefix(self)
faker.providers.address.fr_FR.__init__.Provider.department(self)
faker.providers.address.fr_FR.__init__.Provider.department_name(self)
faker.providers.address.fr_FR.__init__.Provider.department_number(self)
faker.providers.address.fr_FR.__init__.Provider.region(self)
faker.providers.address.fr_FR.__init__.Provider.street_prefix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/es_MX/__init__.py----------------------------------------
A:faker.providers.address.es_MX.__init__.zip_codes->OrderedDict((('AGS', (20000, 20999)), ('BC', (21000, 22999)), ('BCS', (23000, 23999)), ('CAMP', (24000, 24999)), ('COAH', (25000, 27999)), ('COL', (28000, 28999)), ('CHIS', (29000, 30999)), ('CHIH', (31000, 33999)), ('DF', (1000, 19999)), ('DGO', (36000, 35999)), ('GTO', (36000, 38999)), ('GRO', (39000, 41999)), ('HGO', (42000, 43999)), ('JAL', (44000, 49999)), ('MEX', (50000, 57999)), ('MICH', (58000, 61999)), ('MOR', (62000, 62999)), ('NAY', (63000, 63999)), ('NL', (64000, 67999)), ('OAX', (68000, 71999)), ('PUE', (72000, 75999)), ('QRO', (76000, 76999)), ('Q. ROO', (77000, 75999)), ('SLP', (78000, 79999)), ('SIN', (80000, 82999)), ('SON', (83000, 85999)), ('TAB', (86000, 86999)), ('TAMPS', (87000, 89999)), ('TLAX', (90000, 90999)), ('VER', (91000, 97999)), ('YUC', (97000, 97999)), ('ZAC', (98000, 99999))))
faker.providers.address.es_MX.__init__.Provider(AddressProvider)
faker.providers.address.es_MX.__init__.Provider.city_adjetive(self)
faker.providers.address.es_MX.__init__.Provider.city_prefix(self)
faker.providers.address.es_MX.__init__.Provider.city_suffix(self)
faker.providers.address.es_MX.__init__.Provider.secondary_address(self)
faker.providers.address.es_MX.__init__.Provider.state(self)
faker.providers.address.es_MX.__init__.Provider.state_abbr(self)
faker.providers.address.es_MX.__init__.Provider.street_prefix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/en/__init__.py----------------------------------------
faker.providers.address.en.__init__.Provider(AddressProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/hy_AM/__init__.py----------------------------------------
A:faker.providers.address.hy_AM.__init__.state_abbr->self.random_element(self.states_abbr)
faker.providers.address.hy_AM.__init__.Provider(AddressProvider)
faker.providers.address.hy_AM.__init__.Provider.city(self)
faker.providers.address.hy_AM.__init__.Provider.city_prefix(self)
faker.providers.address.hy_AM.__init__.Provider.postcode(self)
faker.providers.address.hy_AM.__init__.Provider.postcode_in_state(self,state_abbr=None)
faker.providers.address.hy_AM.__init__.Provider.secondary_address(self)
faker.providers.address.hy_AM.__init__.Provider.state(self)
faker.providers.address.hy_AM.__init__.Provider.state_abbr(self)
faker.providers.address.hy_AM.__init__.Provider.street(self)
faker.providers.address.hy_AM.__init__.Provider.street_prefix(self)
faker.providers.address.hy_AM.__init__.Provider.village(self)
faker.providers.address.hy_AM.__init__.Provider.village_prefix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/fa_IR/__init__.py----------------------------------------
faker.providers.address.fa_IR.__init__.Provider(AddressProvider)
faker.providers.address.fa_IR.__init__.Provider.city_prefix(self)
faker.providers.address.fa_IR.__init__.Provider.secondary_address(self)
faker.providers.address.fa_IR.__init__.Provider.state(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/ka_GE/__init__.py----------------------------------------
faker.providers.address.ka_GE.__init__.Provider(AddressProvider)
faker.providers.address.ka_GE.__init__.Provider.city_name(self)
faker.providers.address.ka_GE.__init__.Provider.street_title(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/ko_KR/__init__.py----------------------------------------
A:faker.providers.address.ko_KR.__init__.pattern->self.random_element(self.building_name_formats)
faker.providers.address.ko_KR.__init__.Provider(AddressProvider)
faker.providers.address.ko_KR.__init__.Provider.address_detail(self)
faker.providers.address.ko_KR.__init__.Provider.borough(self)
faker.providers.address.ko_KR.__init__.Provider.building_dong(self)
faker.providers.address.ko_KR.__init__.Provider.building_name(self)
faker.providers.address.ko_KR.__init__.Provider.building_suffix(self)
faker.providers.address.ko_KR.__init__.Provider.city(self)
faker.providers.address.ko_KR.__init__.Provider.land_address(self)
faker.providers.address.ko_KR.__init__.Provider.land_number(self)
faker.providers.address.ko_KR.__init__.Provider.metropolitan_city(self)
faker.providers.address.ko_KR.__init__.Provider.old_postal_code(self)
faker.providers.address.ko_KR.__init__.Provider.postal_code(self)
faker.providers.address.ko_KR.__init__.Provider.postcode(self)
faker.providers.address.ko_KR.__init__.Provider.province(self)
faker.providers.address.ko_KR.__init__.Provider.road(self)
faker.providers.address.ko_KR.__init__.Provider.road_address(self)
faker.providers.address.ko_KR.__init__.Provider.road_name(self)
faker.providers.address.ko_KR.__init__.Provider.road_number(self)
faker.providers.address.ko_KR.__init__.Provider.road_suffix(self)
faker.providers.address.ko_KR.__init__.Provider.town(self)
faker.providers.address.ko_KR.__init__.Provider.town_suffix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/nl_NL/__init__.py----------------------------------------
faker.providers.address.nl_NL.__init__.Provider(AddressProvider)
faker.providers.address.nl_NL.__init__.Provider.city(self)
faker.providers.address.nl_NL.__init__.Provider.province(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/cs_CZ/__init__.py----------------------------------------
faker.providers.address.cs_CZ.__init__.Provider(AddressProvider)
faker.providers.address.cs_CZ.__init__.Provider.city_name(self)
faker.providers.address.cs_CZ.__init__.Provider.city_with_postcode(self)
faker.providers.address.cs_CZ.__init__.Provider.postcode(self)
faker.providers.address.cs_CZ.__init__.Provider.state(self)
faker.providers.address.cs_CZ.__init__.Provider.street_name(self)
faker.providers.address.cs_CZ.__init__.Provider.street_suffix_long(self)
faker.providers.address.cs_CZ.__init__.Provider.street_suffix_short(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/en_US/__init__.py----------------------------------------
A:faker.providers.address.en_US.__init__.address_formats->OrderedDict((('{{street_address}}\n{{city}}, {{state_abbr}} {{postcode}}', 25), ('{{military_apo}}\nAPO {{military_state}} {{postcode}}', 1), ('{{military_ship}} {{last_name}}\nFPO {{military_state}} {{postcode}}', 1), ('{{military_dpo}}\nDPO {{military_state}} {{postcode}}', 1)))
A:faker.providers.address.en_US.__init__.state_abbr->self.random_element(self.states_abbr)
faker.providers.address.en_US.__init__.Provider(AddressProvider)
faker.providers.address.en_US.__init__.Provider.city_prefix(self)
faker.providers.address.en_US.__init__.Provider.military_apo(self)
faker.providers.address.en_US.__init__.Provider.military_dpo(self)
faker.providers.address.en_US.__init__.Provider.military_ship(self)
faker.providers.address.en_US.__init__.Provider.military_state(self)
faker.providers.address.en_US.__init__.Provider.postalcode(self)
faker.providers.address.en_US.__init__.Provider.postalcode_in_state(self,state_abbr=None)
faker.providers.address.en_US.__init__.Provider.postalcode_plus4(self)
faker.providers.address.en_US.__init__.Provider.postcode(self)
faker.providers.address.en_US.__init__.Provider.postcode_in_state(self,state_abbr=None)
faker.providers.address.en_US.__init__.Provider.secondary_address(self)
faker.providers.address.en_US.__init__.Provider.state(self)
faker.providers.address.en_US.__init__.Provider.state_abbr(self,include_territories=True)
faker.providers.address.en_US.__init__.Provider.zipcode(self)
faker.providers.address.en_US.__init__.Provider.zipcode_in_state(self,state_abbr=None)
faker.providers.address.en_US.__init__.Provider.zipcode_plus4(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/ja_JP/__init__.py----------------------------------------
faker.providers.address.ja_JP.__init__.Provider(AddressProvider)
faker.providers.address.ja_JP.__init__.Provider.ban(self)
faker.providers.address.ja_JP.__init__.Provider.building_name(self)
faker.providers.address.ja_JP.__init__.Provider.chome(self)
faker.providers.address.ja_JP.__init__.Provider.city(self)
faker.providers.address.ja_JP.__init__.Provider.gou(self)
faker.providers.address.ja_JP.__init__.Provider.postcode(self)
faker.providers.address.ja_JP.__init__.Provider.prefecture(self)
faker.providers.address.ja_JP.__init__.Provider.town(self)
faker.providers.address.ja_JP.__init__.Provider.zipcode(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/hr_HR/__init__.py----------------------------------------
faker.providers.address.hr_HR.__init__.Provider(AddressProvider)
faker.providers.address.hr_HR.__init__.Provider.city_name(self)
faker.providers.address.hr_HR.__init__.Provider.state(self)
faker.providers.address.hr_HR.__init__.Provider.street_name(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/id_ID/__init__.py----------------------------------------
faker.providers.address.id_ID.__init__.Provider(AddressProvider)
faker.providers.address.id_ID.__init__.Provider.city_name(self)
faker.providers.address.id_ID.__init__.Provider.country(self)
faker.providers.address.id_ID.__init__.Provider.state(self)
faker.providers.address.id_ID.__init__.Provider.state_abbr(self)
faker.providers.address.id_ID.__init__.Provider.street(self)
faker.providers.address.id_ID.__init__.Provider.street_prefix_long(self)
faker.providers.address.id_ID.__init__.Provider.street_prefix_short(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/nl_BE/__init__.py----------------------------------------
faker.providers.address.nl_BE.__init__.Provider(AddressProvider)
faker.providers.address.nl_BE.__init__.Provider.city(self)
faker.providers.address.nl_BE.__init__.Provider.province(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/el_GR/__init__.py----------------------------------------
A:faker.providers.address.el_GR.__init__.pattern->self.random_element(self.line_address_formats)
faker.providers.address.el_GR.__init__.Provider(AddressProvider)
faker.providers.address.el_GR.__init__.Provider.city(self)
faker.providers.address.el_GR.__init__.Provider.line_address(self)
faker.providers.address.el_GR.__init__.Provider.region(self)
faker.providers.address.el_GR.__init__.Provider.street(self)
faker.providers.address.el_GR.__init__.Provider.street_prefix(self)
faker.providers.address.el_GR.__init__.Provider.street_prefix_long(self)
faker.providers.address.el_GR.__init__.Provider.street_prefix_short(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/de_AT/__init__.py----------------------------------------
A:faker.providers.address.de_AT.__init__.pattern->self.random_element(self.city_with_postcode_formats)
faker.providers.address.de_AT.__init__.Provider(AddressProvider)
faker.providers.address.de_AT.__init__.Provider.city_name(self)
faker.providers.address.de_AT.__init__.Provider.city_with_postcode(self)
faker.providers.address.de_AT.__init__.Provider.state(self)
faker.providers.address.de_AT.__init__.Provider.street_suffix_long(self)
faker.providers.address.de_AT.__init__.Provider.street_suffix_short(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/pl_PL/__init__.py----------------------------------------
faker.providers.address.pl_PL.__init__.Provider(AddressProvider)
faker.providers.address.pl_PL.__init__.Provider.city(self)
faker.providers.address.pl_PL.__init__.Provider.region(self)
faker.providers.address.pl_PL.__init__.Provider.street_name(self)
faker.providers.address.pl_PL.__init__.Provider.street_prefix(self)
faker.providers.address.pl_PL.__init__.Provider.street_prefix_short(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/ru_RU/__init__.py----------------------------------------
faker.providers.address.ru_RU.__init__.Provider(AddressProvider)
faker.providers.address.ru_RU.__init__.Provider.city_name(self)
faker.providers.address.ru_RU.__init__.Provider.city_prefix(self)
faker.providers.address.ru_RU.__init__.Provider.street_title(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/ne_NP/__init__.py----------------------------------------
faker.providers.address.ne_NP.__init__.Provider(AddressProvider)
faker.providers.address.ne_NP.__init__.Provider.building_prefix(self)
faker.providers.address.ne_NP.__init__.Provider.city(self)
faker.providers.address.ne_NP.__init__.Provider.district(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/de_DE/__init__.py----------------------------------------
A:faker.providers.address.de_DE.__init__.pattern->self.random_element(self.city_with_postcode_formats)
faker.providers.address.de_DE.__init__.Provider(AddressProvider)
faker.providers.address.de_DE.__init__.Provider.city_name(self)
faker.providers.address.de_DE.__init__.Provider.city_with_postcode(self)
faker.providers.address.de_DE.__init__.Provider.state(self)
faker.providers.address.de_DE.__init__.Provider.street_suffix_long(self)
faker.providers.address.de_DE.__init__.Provider.street_suffix_short(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/en_AU/__init__.py----------------------------------------
faker.providers.address.en_AU.__init__.Provider(AddressProvider)
faker.providers.address.en_AU.__init__.Provider.city_prefix(self)
faker.providers.address.en_AU.__init__.Provider.secondary_address(self)
faker.providers.address.en_AU.__init__.Provider.state(self)
faker.providers.address.en_AU.__init__.Provider.state_abbr(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/pt_BR/__init__.py----------------------------------------
faker.providers.address.pt_BR.__init__.Provider(AddressProvider)
faker.providers.address.pt_BR.__init__.Provider.bairro(self)
faker.providers.address.pt_BR.__init__.Provider.estado(self)
faker.providers.address.pt_BR.__init__.Provider.estado_nome(self)
faker.providers.address.pt_BR.__init__.Provider.estado_sigla(self)
faker.providers.address.pt_BR.__init__.Provider.neighborhood(self)
faker.providers.address.pt_BR.__init__.Provider.state(self)
faker.providers.address.pt_BR.__init__.Provider.state_abbr(self)
faker.providers.address.pt_BR.__init__.Provider.street_prefix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/fi_FI/__init__.py----------------------------------------
faker.providers.address.fi_FI.__init__.Provider(AddressProvider)
faker.providers.address.fi_FI.__init__.Provider.city_name(self)
faker.providers.address.fi_FI.__init__.Provider.state(self)
faker.providers.address.fi_FI.__init__.Provider.street_prefix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/it_IT/__init__.py----------------------------------------
faker.providers.address.it_IT.__init__.Provider(AddressProvider)
faker.providers.address.it_IT.__init__.Provider.city_prefix(self)
faker.providers.address.it_IT.__init__.Provider.secondary_address(self)
faker.providers.address.it_IT.__init__.Provider.state(self)
faker.providers.address.it_IT.__init__.Provider.state_abbr(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/zh_TW/__init__.py----------------------------------------
faker.providers.address.zh_TW.__init__.Provider(AddressProvider)
faker.providers.address.zh_TW.__init__.Provider.building_number(self)
faker.providers.address.zh_TW.__init__.Provider.city_name(self)
faker.providers.address.zh_TW.__init__.Provider.city_name_suffix(self)
faker.providers.address.zh_TW.__init__.Provider.secondary_address(self)
faker.providers.address.zh_TW.__init__.Provider.section_number(self)
faker.providers.address.zh_TW.__init__.Provider.street_name(self)
faker.providers.address.zh_TW.__init__.Provider.street_name_suffix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/sv_SE/__init__.py----------------------------------------
faker.providers.address.sv_SE.__init__.Provider(AddressProvider)
faker.providers.address.sv_SE.__init__.Provider.city_name(self)
faker.providers.address.sv_SE.__init__.Provider.state(self)
faker.providers.address.sv_SE.__init__.Provider.street_prefix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/fr_CH/__init__.py----------------------------------------
faker.providers.address.fr_CH.__init__.Provider(AddressProvider)
faker.providers.address.fr_CH.__init__.Provider.canton(self)
faker.providers.address.fr_CH.__init__.Provider.canton_code(self)
faker.providers.address.fr_CH.__init__.Provider.canton_name(self)
faker.providers.address.fr_CH.__init__.Provider.city_prefix(self)
faker.providers.address.fr_CH.__init__.Provider.street_prefix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/address/en_CA/__init__.py----------------------------------------
A:faker.providers.address.en_CA.__init__.temp->re.sub('\\?', lambda x: self.postal_code_letter(), self.random_element(self.postal_code_formats))
faker.providers.address.en_CA.__init__.Provider(AddressProvider)
faker.providers.address.en_CA.__init__.Provider.city_prefix(self)
faker.providers.address.en_CA.__init__.Provider.postal_code_letter(self)
faker.providers.address.en_CA.__init__.Provider.postalcode(self)
faker.providers.address.en_CA.__init__.Provider.postcode(self)
faker.providers.address.en_CA.__init__.Provider.province(self)
faker.providers.address.en_CA.__init__.Provider.province_abbr(self)
faker.providers.address.en_CA.__init__.Provider.secondary_address(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/__init__.py----------------------------------------
A:faker.providers.person.__init__.pattern->self.random_element(formats)
A:faker.providers.person.__init__.prefixes->self.random_element((self.prefixes_male, self.prefixes_female))
A:faker.providers.person.__init__.suffixes->self.random_element((self.suffixes_male, self.suffixes_female))
faker.providers.person.__init__.Provider(BaseProvider)
faker.providers.person.__init__.Provider.first_name(self)
faker.providers.person.__init__.Provider.first_name_female(self)
faker.providers.person.__init__.Provider.first_name_male(self)
faker.providers.person.__init__.Provider.last_name(self)
faker.providers.person.__init__.Provider.last_name_female(self)
faker.providers.person.__init__.Provider.last_name_male(self)
faker.providers.person.__init__.Provider.name(self)
faker.providers.person.__init__.Provider.name_female(self)
faker.providers.person.__init__.Provider.name_male(self)
faker.providers.person.__init__.Provider.prefix(self)
faker.providers.person.__init__.Provider.prefix_female(self)
faker.providers.person.__init__.Provider.prefix_male(self)
faker.providers.person.__init__.Provider.suffix(self)
faker.providers.person.__init__.Provider.suffix_female(self)
faker.providers.person.__init__.Provider.suffix_male(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/en_GB/__init__.py----------------------------------------
A:faker.providers.person.en_GB.__init__.last_names->OrderedDict((('Savage', 0.04), ('Winter', 0.03), ('Metcalfe', 0.03), ('Harper', 0.06), ('Burgess', 0.06), ('Bailey', 0.15), ('Potts', 0.03), ('Boyle', 0.03), ('Brown', 0.51), ('Jennings', 0.05), ('Payne', 0.09), ('Day', 0.09), ('Holland', 0.07), ('Higgins', 0.05), ('Rhodes', 0.04), ('Hancock', 0.04), ('Howells', 0.03), ('Fowler', 0.04), ('Sims', 0.03), ('Thomas', 0.35), ('Parker', 0.17), ('Bentley', 0.04), ('Barnett', 0.05), ('Manning', 0.03), ('Collier', 0.03), ('Holloway', 0.03), ('Hartley', 0.04), ('George', 0.05), ('Tomlinson', 0.04), ('Howard', 0.09), ('Long', 0.06), ('Farmer', 0.03), ('Collins', 0.15), ('Rice', 0.03), ('Townsend', 0.04), ('Rees', 0.07), ('Bruce', 0.03), ('Hammond', 0.05), ('Ford', 0.09), ('Tucker', 0.05), ('Wallis', 0.03), ('Hamilton', 0.06), ('Ferguson', 0.04), ('Hooper', 0.03), ('Francis', 0.07), ('Reeves', 0.04), ('Barlow', 0.04), ('Short', 0.04), ('Cunningham', 0.05), ('Hopkins', 0.06), ('Nicholson', 0.06), ('Archer', 0.04), ('Green', 0.25), ('Glover', 0.04), ('Gibson', 0.09), ('Spencer', 0.08), ('Warner', 0.04), ('Webb', 0.12), ('Whitehouse', 0.03), ('Dean', 0.06), ('Griffiths', 0.16), ('Clark', 0.2), ('Hardy', 0.05), ('Iqbal', 0.03), ('Baldwin', 0.04), ("O'Neill", 0.06), ('Blake', 0.05), ('Lees', 0.03), ('Harvey', 0.1), ('Clarke', 0.24), ('Daniels', 0.04), ('Browne', 0.03), ('Macdonald', 0.04), ('Kirk', 0.04), ('Khan', 0.14), ('Davidson', 0.05), ('Dale', 0.04), ('Sanders', 0.04), ('Wilkins', 0.04), ('Connor', 0.03), ('Daly', 0.03), ('Lane', 0.06), ('Kennedy', 0.06), ('Bray', 0.03), ('Burrows', 0.04), ('Hayes', 0.07), ('Wyatt', 0.03), ('Gould', 0.03), ('Dyer', 0.03), ('Nash', 0.05), ('Bryan', 0.03), ('Pope', 0.03), ('Fraser', 0.04), ('Steele', 0.03), ('Walsh', 0.09), ('Wade', 0.04), ('Marsden', 0.03), ('Humphries', 0.03), ("O'Brien", 0.08), ('Thompson', 0.28), ('Lord', 0.03), ('Coleman', 0.06), ('Jarvis', 0.04), ('Noble', 0.03), ('Williamson', 0.06), ('Carpenter', 0.03), ('Gardner', 0.06), ('Farrell', 0.04), ('Clayton', 0.05), ('Akhtar', 0.05), ('Gallagher', 0.05), ('Skinner', 0.04), ('Birch', 0.04), ('Kay', 0.04), ('Barrett', 0.07), ('Bates', 0.06), ('Lucas', 0.04), ("O'Connor", 0.06), ('Chamberlain', 0.03), ('Chapman', 0.12), ('Ryan', 0.08), ('Thorpe', 0.04), ('Lawson', 0.04), ('Howell', 0.04), ('Martin', 0.23), ('Kelly', 0.16), ('Dobson', 0.04), ('Stevens', 0.1), ('Brennan', 0.04), ('Lloyd', 0.11), ('Quinn', 0.05), ('Morton', 0.04), ('Wilson', 0.35), ('Barnes', 0.11), ('Henry', 0.03), ('Smith', 1.15), ('Pritchard', 0.05), ('Phillips', 0.18), ('Dixon', 0.1), ('Sharpe', 0.03), ('Robertson', 0.07), ('White', 0.27), ('Bird', 0.06), ('Abbott', 0.04), ('Kirby', 0.04), ('Hussain', 0.11), ('Barber', 0.05), ('Harris', 0.25), ('Doyle', 0.05), ('Jordan', 0.05), ('Burns', 0.06), ('Hodgson', 0.06), ('Atkins', 0.04), ('Stokes', 0.05), ('Rogers', 0.12), ('Parkes', 0.03), ('Brookes', 0.04), ('Herbert', 0.03), ('Gordon', 0.05), ('Kemp', 0.05), ('Webster', 0.07), ('Sinclair', 0.03), ('McLean', 0.03), ('Saunders', 0.09), ('Stephens', 0.05), ('Newton', 0.07), ('Potter', 0.05), ('Storey', 0.03), ('Stanley', 0.04), ('Turnbull', 0.03), ('Duncan', 0.03), ('Rose', 0.08), ('Mills', 0.11), ('Sheppard', 0.03), ('Butcher', 0.03), ('Fry', 0.03), ('Ross', 0.06), ('Shepherd', 0.06), ('Goodwin', 0.05), ('Holt', 0.05), ('Haynes', 0.04), ('Cook', 0.15), ('Ward', 0.21), ('Godfrey', 0.03), ('Stone', 0.07), ('Dodd', 0.04), ('Parsons', 0.07), ('Ingram', 0.03), ('Nixon', 0.03), ('Evans', 0.39), ('Hargreaves', 0.03), ('Owen', 0.11), ('Chan', 0.03), ('Connolly', 0.03), ('Charlton', 0.03), ('Middleton', 0.04), ('Hyde', 0.03), ('Patel', 0.24), ('Owens', 0.03), ('Lamb', 0.04), ('Palmer', 0.11), ('Cooper', 0.22), ('McCarthy', 0.06), ('Black', 0.04), ('Dickinson', 0.04), ('Gilbert', 0.05), ('Leach', 0.03), ('North', 0.03), ('Byrne', 0.06), ('Frost', 0.05), ('Simmons', 0.04), ('Matthews', 0.11), ('Alexander', 0.04), ('Ahmed', 0.1), ('Gibbons', 0.03), ('Stevenson', 0.05), ('Rowley', 0.03), ('Miles', 0.05), ('Hanson', 0.03), ('Bolton', 0.03), ('Craig', 0.03), ('Ali', 0.12), ('Carroll', 0.04), ('Allan', 0.03), ('Sanderson', 0.03), ('Fletcher', 0.1), ('Burton', 0.08), ('Oliver', 0.07), ('Davison', 0.04), ('Douglas', 0.04), ('Field', 0.04), ('Pickering', 0.03), ('Pugh', 0.04), ('Rowe', 0.05), ('Mahmood', 0.03), ('Sykes', 0.03), ('Crawford', 0.03), ('Williams', 0.66), ('Parkin', 0.03), ('Patterson', 0.04), ('Power', 0.03), ('Price', 0.17), ('Murphy', 0.14), ('Hale', 0.03), ('Nicholls', 0.06), ('Hall', 0.25), ('Jones', 0.94), ('Hughes', 0.26), ('Stephenson', 0.05), ('Morley', 0.04), ('Knight', 0.11), ('Kerr', 0.03), ('Heath', 0.04), ('Pollard', 0.03), ('Lowe', 0.07), ("O'Sullivan", 0.04), ('Buckley', 0.05), ('Bond', 0.05), ('Dennis', 0.03), ('Lewis', 0.25), ('Weston', 0.04), ('Joyce', 0.03), ('Reynolds', 0.09), ('Bishop', 0.06), ('Norris', 0.04), ('Barry', 0.03), ('Whittaker', 0.04), ('Carey', 0.03), ('Hill', 0.22), ('Kent', 0.04), ('Ashton', 0.04), ('Wilkinson', 0.13), ('Powell', 0.12), ('Henderson', 0.06), ('Freeman', 0.06), ('Dunn', 0.07), ('Kaur', 0.09), ('French', 0.04), ('Parry', 0.06), ('Walton', 0.06), ('Fisher', 0.1), ('Naylor', 0.03), ('Duffy', 0.04), ('Humphreys', 0.04), ('Randall', 0.03), ('Bevan', 0.03), ('Doherty', 0.03), ('Moore', 0.21), ('Armstrong', 0.07), ('Sullivan', 0.05), ('Swift', 0.03), ('Pearce', 0.09), ('Tyler', 0.03), ('Bradshaw', 0.04), ('Allen', 0.19), ('Mellor', 0.03), ('Whitehead', 0.05), ('Jackson', 0.24), ('Grant', 0.07), ('Fox', 0.09), ('Wright', 0.28), ('Anderson', 0.13), ('Foster', 0.13), ('Gibbs', 0.04), ('Butler', 0.11), ('Jenkins', 0.1), ('John', 0.04), ('Morrison', 0.04), ('Talbot', 0.03), ('Blackburn', 0.03), ('Osborne', 0.05), ('Flynn', 0.04), ('Richards', 0.14), ('Hurst', 0.03), ('Bibi', 0.05), ('Houghton', 0.03), ('Johnson', 0.34), ('Yates', 0.06), ('Mistry', 0.03), ('Donnelly', 0.03), ('Parkinson', 0.04), ('Thomson', 0.05), ('Woods', 0.07), ('Todd', 0.04), ('Dawson', 0.08), ('Hart', 0.07), ('Graham', 0.1), ('Berry', 0.07), ('Willis', 0.05), ('Miah', 0.04), ('Brooks', 0.09), ('Horton', 0.03), ('Riley', 0.07), ('Lambert', 0.05), ('Waters', 0.04), ('Lynch', 0.05), ('Moss', 0.06), ('Slater', 0.05), ('Knowles', 0.04), ('Benson', 0.03), ('Adams', 0.13), ('King', 0.2), ('Davies', 0.48), ('Richardson', 0.15), ('Vincent', 0.03), ('Holmes', 0.11), ('Conway', 0.03), ('Marshall', 0.14), ('Faulkner', 0.03), ('Garner', 0.03), ('Booth', 0.08), ('Harrison', 0.2), ('Campbell', 0.11), ('Cole', 0.08), ('Goddard', 0.04), ('Walters', 0.05), ('Ellis', 0.13), ('Edwards', 0.27), ('Peters', 0.04), ('Atkinson', 0.08), ('Wood', 0.24), ('Briggs', 0.04), ('Elliott', 0.09), ('Chandler', 0.03), ('Hope', 0.03), ('Hunter', 0.07), ('Newman', 0.07), ('Pratt', 0.03), ('Rahman', 0.03), ('Hicks', 0.04), ('Cox', 0.14), ('Reid', 0.07), ('Morris', 0.21), ('Banks', 0.04), ('Myers', 0.03), ('Mitchell', 0.16), ('Davey', 0.04), ('Peacock', 0.03), ('Reed', 0.07), ('Carter', 0.15), ('Miller', 0.14), ('Perkins', 0.04), ('Read', 0.05), ('Hilton', 0.03), ('Moran', 0.03), ('Welch', 0.03), ('Vaughan', 0.04), ('Clements', 0.03), ('Griffin', 0.05), ('Russell', 0.1), ("O'Donnell", 0.03), ('Hobbs', 0.03), ('Marsh', 0.07), ('Porter', 0.07), ('Gill', 0.08), ('Leonard', 0.03), ('McKenzie', 0.03), ('Thornton', 0.04), ('Fitzgerald', 0.03), ('Greenwood', 0.05), ('Pearson', 0.1), ('James', 0.19), ('Coles', 0.03), ('Roberts', 0.33), ('Nelson', 0.05), ('Forster', 0.03), ('Gough', 0.03), ('Mann', 0.05), ('Law', 0.03), ('Barker', 0.1), ('Cartwright', 0.04), ('Bradley', 0.08), ('Sharp', 0.05), ('Warren', 0.06), ('Summers', 0.03), ('Little', 0.04), ('Perry', 0.08), ('Fuller', 0.04), ('West', 0.09), ('Mason', 0.12), ('Finch', 0.03), ('Norton', 0.03), ('Burke', 0.05), ('Holden', 0.04), ('Lee', 0.2), ('Smart', 0.04), ('Bull', 0.04), ('Bryant', 0.04), ('Gray', 0.12), ('Watts', 0.08), ('Brady', 0.03), ('Baker', 0.2), ('Barton', 0.05), ('Davis', 0.17), ('Baxter', 0.05), ('Taylor', 0.53), ('Carr', 0.07), ('Wong', 0.04), ('Cameron', 0.03), ('Gardiner', 0.03), ('Hawkins', 0.07), ('Shaw', 0.15), ('Wallace', 0.05), ('Young', 0.16), ('Shah', 0.06), ('Gregory', 0.07), ('Ball', 0.08), ('Norman', 0.04), ('Lawrence', 0.09), ('Bowen', 0.04), ('Wheeler', 0.05), ('Bartlett', 0.04), ('Sutton', 0.06), ('Lyons', 0.03), ('Hutchinson', 0.05), ('Poole', 0.05), ('Cooke', 0.06), ('Franklin', 0.03), ('Howe', 0.04), ('Walker', 0.27), ('Johnston', 0.05), ('Austin', 0.05), ('Chadwick', 0.03), ('Bell', 0.15), ('Wall', 0.04), ('Woodward', 0.05), ('Preston', 0.04), ('Bennett', 0.16), ('Murray', 0.1), ('Begum', 0.13), ('McDonald', 0.06), ('Hudson', 0.07), ('Cross', 0.06), ('Singh', 0.13), ('Howarth', 0.03), ('Hewitt', 0.05), ('Curtis', 0.06), ('Harding', 0.07), ('May', 0.05), ('Wells', 0.07), ('Giles', 0.03), ('Watson', 0.17), ('Nolan', 0.03), ('Andrews', 0.09), ('Hayward', 0.04), ('Schofield', 0.04), ('Hunt', 0.12), ('Robson', 0.06), ('Arnold', 0.05), ('Morgan', 0.19), ('Coates', 0.03), ('Page', 0.07), ('Simpson', 0.13), ('Stewart', 0.09), ('Robinson', 0.29), ('Fleming', 0.03), ('Scott', 0.18), ('Chambers', 0.06), ('Turner', 0.23), ('Watkins', 0.06)))
faker.providers.person.en_GB.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/ro_RO/__init__.py----------------------------------------
faker.providers.person.ro_RO.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/en_NZ/__init__.py----------------------------------------
A:faker.providers.person.en_NZ.__init__.first_names_male->OrderedDict((('Aaron', 9912), ('Adam', 7639), ('Adrian', 2420), ('Aidan', 1521), ('Aiden', 782), ('Alan', 5689), ('Alex', 2819), ('Alexander', 7783), ('Alistair', 429), ('Allan', 3148), ('Allen', 51), ('Andre', 127), ('Andrew', 25593), ('Angus', 1680), ('Anthony', 12549), ('Antony', 1594), ('Archer', 381), ('Archie', 774), ('Arlo', 584), ('Arthur', 630), ('Asher', 319), ('Ashley', 861), ('Ashton', 1236), ('Austin', 688), ('Bailey', 1304), ('Barry', 3624), ('Beau', 491), ('Beauden', 125), ('Ben', 2427), ('Benjamin', 15497), ('Bernard', 657), ('Bevan', 634), ('Blair', 2863), ('Blake', 3500), ('Bodhi', 70), ('Brad', 450), ('Bradley', 3910), ('Brandon', 1000), ('Braxton', 741), ('Brayden', 317), ('Brendan', 2010), ('Brendon', 3163), ('Brent', 5564), ('Brett', 4598), ('Brian', 6247), ('Brodie', 216), ('Brooklyn', 406), ('Bruce', 6079), ('Bryan', 1435), ('Caleb', 5374), ('Callum', 2364), ('Cameron', 7756), ('Campbell', 422), ('Carl', 3304), ('Carlos', 122), ('Carter', 1308), ('Charles', 3933), ('Charlie', 2367), ('Chase', 174), ('Christian', 1138), ('Christopher', 23459), ('Clayton', 59), ('Clinton', 1004), ('Cody', 2482), ('Cohen', 99), ('Cole', 648), ('Colin', 3980), ('Connor', 4632), ('Conor', 54), ('Cooper', 2113), ('Corey', 1656), ('Cory', 129), ('Craig', 12702), ('Cruz', 52), ('Damian', 1084), ('Damon', 211), ('Daniel', 23515), ('Darren', 3143), ('Darrin', 217), ('Darryl', 1517), ('Darryn', 260), ('Daryl', 421), ('David', 36792), ('Dean', 6096), ('Declan', 108), ('Denis', 66), ('Dennis', 1129), ('Derek', 1307), ('Desmond', 224), ('Dillon', 63), ('Dion', 1283), ('Dominic', 801), ('Donald', 2405), ('Douglas', 2587), ('Duncan', 471), ('Dwayne', 57), ('Dylan', 6564), ('Edward', 4864), ('Eli', 961), ('Elijah', 2137), ('Elliot', 54), ('Eric', 808), ('Ethan', 6578), ('Ezra', 309), ('Felix', 769), ('Finn', 2084), ('Fletcher', 447), ('Flynn', 1577), ('Francis', 420), ('Frank', 46), ('Fraser', 51), ('Frederick', 49), ('Gabriel', 739), ('Gareth', 2087), ('Garry', 1840), ('Gary', 5520), ('Gavin', 3197), ('Geoffrey', 4439), ('George', 7320), ('Gerald', 104), ('Gerard', 614), ('Glen', 2709), ('Glenn', 3983), ('Gordon', 1444), ('Graeme', 4705), ('Graham', 3746), ('Grant', 8355), ('Grayson', 259), ('Gregory', 7916), ('Hamish', 5758), ('Harley', 403), ('Harrison', 2800), ('Harry', 2454), ('Harvey', 192), ('Hayden', 5209), ('Henry', 3111), ('Hudson', 281), ('Hugh', 101), ('Hugo', 543), ('Hunter', 3044), ('Ian', 7592), ('Isaac', 4208), ('Isaiah', 349), ('Israel', 52), ('Ivan', 236), ('Jack', 9468), ('Jackson', 3088), ('Jacob', 8612), ('Jake', 2421), ('Jakob', 46), ('James', 27224), ('Jamie', 5064), ('Jared', 2840), ('Jarrod', 773), ('Jason', 14737), ('Jasper', 246), ('Jaxon', 623), ('Jayden', 4541), ('Jeffrey', 2826), ('Jeremy', 4775), ('Jesse', 3965), ('Joel', 2932), ('John', 26867), ('Jonathan', 7957), ('Jonathon', 349), ('Jordan', 6499), ('Joseph', 10061), ('Josh', 56), ('Joshua', 17109), ('Josiah', 52), ('Julian', 232), ('Justin', 3882), ('Kaleb', 492), ('Kane', 1236), ('Karl', 3822), ('Kayden', 123), ('Keanu', 54), ('Keegan', 351), ('Keith', 2175), ('Kelly', 58), ('Kelvin', 1262), ('Kenneth', 3240), ('Kerry', 2404), ('Kevin', 9358), ('Kieran', 1525), ('Kim', 125), ('Kingston', 692), ('Kurt', 515), ('Kyle', 2568), ('Lachlan', 2965), ('Lance', 2958), ('Lawrence', 226), ('Lee', 872), ('Leo', 1872), ('Leon', 967), ('Leonard', 102), ('Leslie', 1126), ('Levi', 2986), ('Lewis', 324), ('Liam', 8629), ('Lincoln', 857), ('Lindsay', 883), ('Lloyd', 46), ('Logan', 5063), ('Louis', 863), ('Luca', 1318), ('Lucas', 3329), ('Luka', 119), ('Lukas', 70), ('Luke', 8296), ('Malcolm', 2398), ('Marcus', 1129), ('Mark', 23154), ('Martin', 4260), ('Mason', 2613), ('Mathew', 3107), ('Matthew', 23181), ('Maurice', 385), ('Max', 3988), ('Maxwell', 172), ('Mervyn', 162), ('Micah', 52), ('Michael', 40099), ('Micheal', 49), ('Mitchell', 2730), ('Morgan', 58), ('Murray', 4843), ('Nate', 48), ('Nathan', 8920), ('Nathaniel', 329), ('Neil', 3392), ('Neville', 1268), ('Nicholas', 13132), ('Nigel', 4435), ('Nikau', 53), ('Nixon', 219), ('Noah', 3511), ('Noel', 778), ('Norman', 221), ('Oliver', 6515), ('Oscar', 1987), ('Owen', 484), ('Patrick', 6219), ('Paul', 22959), ('Peter', 23996), ('Philip', 7036), ('Phillip', 5977), ('Phoenix', 882), ('Quentin', 67), ('Quinn', 742), ('Raymond', 4404), ('Regan', 1182), ('Reuben', 1678), ('Rex', 561), ('Rhys', 967), ('Richard', 17664), ('Ricky', 806), ('Riley', 2771), ('Robert', 19791), ('Robin', 1431), ('Rodney', 1936), ('Roger', 2612), ('Roman', 429), ('Ronald', 1769), ('Rory', 220), ('Ross', 4823), ('Roy', 101), ('Russell', 2863), ('Ryan', 9965), ('Ryder', 727), ('Sam', 2347), ('Samuel', 15565), ('Scott', 9481), ('Sean', 5201), ('Sebastian', 1031), ('Seth', 780), ('Shane', 10213), ('Shannon', 1082), ('Shaun', 4397), ('Shayne', 296), ('Simon', 9846), ('Sione', 165), ('Spencer', 52), ('Stefan', 52), ('Stephen', 18603), ('Steven', 11007), ('Stewart', 499), ('Stuart', 4662), ('Taine', 204), ('Taylor', 1356), ('Terence', 1154), ('Terry', 860), ('Theo', 311), ('Theodore', 429), ('Thomas', 15382), ('Timothy', 10924), ('Toby', 1490), ('Todd', 1264), ('Tom', 47), ('Tony', 5670), ('Travis', 65), ('Trent', 524), ('Trevor', 3194), ('Tristan', 111), ('Troy', 2423), ('Tyler', 3765), ('Tyrone', 231), ('Tyson', 531), ('Vaughan', 322), ('Vincent', 907), ('Walter', 57), ('Warren', 3223), ('Warwick', 295), ('Wayne', 8542), ('William', 18322), ('Wyatt', 58), ('Xavier', 1879), ('Zac', 111), ('Zachary', 2569), ('Zane', 761), ('Zion', 217), ('Anaru', 735), ('Ari', 984), ('Ariki', 1178), ('Hemi', 1360), ('Hoani', 574), ('Ihaia', 476), ('Kahu', 700), ('Kahurangi', 939), ('Kauri', 1613), ('Manaaki', 574), ('Manaia', 1434), ('Manawa', 536), ('Matiu', 455), ('Mikaere', 1413), ('Nikau', 1942), ('Niko', 972), ('Nikora', 1766), ('Rawiri', 1553), ('Tai', 793), ('Tama', 1257), ('Tamati', 1766), ('Tane', 1698), ('Tangaroa', 605), ('Te Ariki', 1423), ('Te Koha', 537), ('Tiare', 476), ('Wiremu', 1923)))
A:faker.providers.person.en_NZ.__init__.first_names_female->OrderedDict((('Aaliyah', 1042), ('Abbey', 40), ('Abby', 503), ('Abigail', 2017), ('Addison', 538), ('Adrienne', 625), ('Aimee', 2315), ('Alana', 1194), ('Aleisha', 102), ('Alexandra', 2689), ('Alexis', 789), ('Alice', 3252), ('Alicia', 683), ('Alison', 3444), ('Alyssa', 1032), ('Amaia', 45), ('Amanda', 7667), ('Amber', 3661), ('Amelia', 4060), ('Amy', 7061), ('Anahera', 140), ('Andrea', 5003), ('Angel', 695), ('Angela', 9634), ('Angelina', 43), ('Anika', 46), ('Anita', 1526), ('Ann', 1834), ('Anna', 9371), ('Annabelle', 457), ('Anne', 3879), ('Annette', 2348), ('April', 49), ('Arabella', 42), ('Aria', 1025), ('Ariana', 473), ('Aroha', 50), ('Ashlee', 464), ('Ashleigh', 3158), ('Ashley', 2477), ('Aurora', 251), ('Ava', 2487), ('Ayla', 612), ('Bailey', 150), ('Barbara', 3531), ('Belinda', 1254), ('Bella', 1238), ('Beverley', 996), ('Billie', 45), ('Brenda', 2451), ('Briana', 49), ('Brianna', 740), ('Bridget', 1611), ('Britney', 64), ('Brittany', 1239), ('Bronwyn', 2406), ('Brooke', 3634), ('Brooklyn', 782), ('Caitlin', 3370), ('Caitlyn', 454), ('Carla', 323), ('Carmen', 233), ('Carol', 3626), ('Caroline', 2530), ('Carolyn', 3212), ('Casey', 1097), ('Cassandra', 489), ('Catherine', 7765), ('Chantelle', 55), ('Charlie', 215), ('Charlotte', 7759), ('Chelsea', 1943), ('Cherie', 1064), ('Cheryl', 1781), ('Cheyenne', 345), ('Chloe', 4582), ('Christina', 2675), ('Christine', 10604), ('Cindy', 65), ('Claire', 3174), ('Clara', 41), ('Clare', 55), ('Claudia', 804), ('Colleen', 1367), ('Courtney', 2941), ('Crystal', 828), ('Daisy', 197), ('Danielle', 4151), ('Dawn', 62), ('Debbie', 1389), ('Deborah', 8819), ('Debra', 3094), ('Denise', 3577), ('Destiny', 190), ('Diana', 977), ('Diane', 3952), ('Dianne', 2314), ('Donna', 7054), ('Dorothy', 303), ('Eden', 1578), ('Eilish', 52), ('Elaine', 381), ('Eleanor', 155), ('Elise', 48), ('Elizabeth', 11869), ('Ella', 5301), ('Ellen', 124), ('Ellie', 443), ('Elsie', 97), ('Emilia', 145), ('Emily', 7766), ('Emma', 13245), ('Erin', 1624), ('Esther', 88), ('Eva', 1637), ('Evelyn', 634), ('Evie', 419), ('Faith', 735), ('Fiona', 6039), ('Florence', 291), ('Frances', 1212), ('Frankie', 195), ('Freya', 218), ('Gabriella', 94), ('Gabrielle', 808), ('Gail', 1253), ('Gaylene', 82), ('Gemma', 2120), ('Georgia', 5613), ('Georgina', 786), ('Gillian', 1388), ('Gina', 301), ('Glenda', 859), ('Glenys', 410), ('Gloria', 127), ('Grace', 6036), ('Haley', 173), ('Hannah', 9082), ('Harmony', 300), ('Harper', 1186), ('Harriet', 210), ('Hayley', 4951), ('Hazel', 814), ('Heather', 4351), ('Heidi', 353), ('Helen', 7775), ('Holly', 4402), ('Hope', 142), ('Imogen', 293), ('Indi', 42), ('Indie', 494), ('Irene', 166), ('Isabel', 499), ('Isabella', 4257), ('Isabelle', 1182), ('Isla', 2246), ('Isobel', 85), ('Ivy', 577), ('Jacqueline', 5559), ('Jade', 3234), ('Jaime', 61), ('Jamie', 1066), ('Jan', 1587), ('Jane', 4932), ('Janet', 2253), ('Janette', 69), ('Janice', 1881), ('Janine', 2641), ('Jasmine', 3786), ('Jean', 64), ('Jeanette', 900), ('Jemma', 200), ('Jenna', 1162), ('Jennifer', 9991), ('Jessica', 12989), ('Jessie', 1123), ('Jill', 455), ('Jillian', 1571), ('Joan', 199), ('Joanna', 2716), ('Joanne', 9329), ('Jocelyn', 557), ('Jodi', 56), ('Jodie', 359), ('Jolene', 313), ('Jordan', 797), ('Jorja', 456), ('Josephine', 570), ('Joy', 487), ('Judith', 4677), ('Julia', 2092), ('Julie', 8289), ('Justine', 1127), ('Kaitlin', 45), ('Kaitlyn', 358), ('Karen', 13524), ('Karla', 62), ('Karyn', 429), ('Kate', 5782), ('Katelyn', 294), ('Katherine', 3912), ('Kathleen', 2503), ('Kathryn', 5104), ('Katie', 3455), ('Katrina', 3184), ('Kay', 1205), ('Kaye', 227), ('Kayla', 2806), ('Keira', 759), ('Kellie', 66), ('Kelly', 6137), ('Kelsey', 718), ('Kerry', 1917), ('Khloe', 98), ('Kim', 5667), ('Kimberley', 1578), ('Kiri', 130), ('Kirsten', 1183), ('Kirsty', 2083), ('Kristy', 172), ('Krystal', 650), ('Kyla', 41), ('Kylie', 3692), ('Laura', 4669), ('Lauren', 3275), ('Layla', 536), ('Leah', 1894), ('Leanne', 3478), ('Leonie', 52), ('Lesley', 1453), ('Libby', 48), ('Lilly', 813), ('Lily', 3546), ('Linda', 6288), ('Lisa', 11891), ('Lois', 278), ('Lola', 343), ('Lorraine', 1675), ('Louise', 4580), ('Lucia', 235), ('Lucy', 4938), ('Luna', 53), ('Lydia', 335), ('Lynda', 1972), ('Lynette', 3666), ('Lynley', 228), ('Lynn', 53), ('Lynne', 1025), ('Lynnette', 120), ('MacKenzie', 67), ('Mackenzie', 1039), ('Maddison', 1846), ('Madeleine', 780), ('Madeline', 184), ('Madison', 3128), ('Maia', 1937), ('Manaia', 204), ('Maree', 2270), ('Margaret', 5517), ('Maria', 5541), ('Marian', 60), ('Marie', 2582), ('Marilyn', 546), ('Marion', 370), ('Mary', 5891), ('Matilda', 570), ('Maureen', 1099), ('Maya', 432), ('Megan', 5869), ('Melanie', 4476), ('Melissa', 6898), ('Mia', 2627), ('Michaela', 687), ('Michele', 1082), ('Michelle', 12961), ('Mikaela', 48), ('Mikayla', 1492), ('Mila', 1139), ('Millie', 711), ('Molly', 1590), ('Monica', 56), ('Monique', 1859), ('Morgan', 646), ('Mya', 352), ('Nadine', 126), ('Naomi', 421), ('Natalie', 4112), ('Natasha', 5533), ('Nevaeh', 673), ('Ngaire', 116), ('Niamh', 49), ('Nicola', 10395), ('Nicole', 6011), ('Nikita', 1263), ('Nikki', 57), ('Nina', 379), ('Olive', 525), ('Olivia', 8816), ('Paige', 3719), ('Pamela', 2677), ('Paris', 551), ('Patricia', 5007), ('Paula', 3667), ('Pauline', 2404), ('Payton', 44), ('Penelope', 1213), ('Peyton', 621), ('Philippa', 1359), ('Phoebe', 1380), ('Piper', 580), ('Pippa', 416), ('Poppy', 842), ('Quinn', 213), ('Rachael', 3210), ('Rachel', 9769), ('Rachelle', 64), ('Raewyn', 3039), ('Rebecca', 11608), ('Rebekah', 1255), ('Renee', 3387), ('Rhonda', 131), ('Riley', 676), ('Robyn', 5598), ('Rochelle', 2086), ('Rose', 1384), ('Rosemary', 1918), ('Ruby', 4332), ('Ruth', 1616), ('Sadie', 151), ('Sally', 2445), ('Samantha', 7549), ('Sandra', 7429), ('Sara', 1121), ('Sarah', 19901), ('Sasha', 44), ('Savannah', 443), ('Scarlett', 1045), ('Shakira', 52), ('Shania', 338), ('Shannon', 2446), ('Sharlene', 220), ('Sharon', 7243), ('Shelley', 2569), ('Sheree', 169), ('Sheryl', 1688), ('Shirley', 1673), ('Shona', 1210), ('Sienna', 1358), ('Sinead', 53), ('Skye', 97), ('Skyla', 105), ('Skylar', 41), ('Sofia', 630), ('Sonia', 246), ('Sonya', 632), ('Sophia', 2595), ('Sophie', 7868), ('Stacey', 3037), ('Stella', 1323), ('Stephanie', 5794), ('Summer', 1477), ('Susan', 12686), ('Suzanne', 4705), ('Tamara', 312), ('Tania', 6879), ('Tanya', 1595), ('Tara', 503), ('Tayla', 1823), ('Taylor', 1499), ('Tegan', 318), ('Teresa', 2294), ('Tessa', 1439), ('Thea', 279), ('Tiana', 388), ('Tina', 2124), ('Toni', 2572), ('Tori', 50), ('Tracey', 6914), ('Tracy', 3999), ('Trinity', 401), ('Tyla', 98), ('Valerie', 394), ('Vanessa', 3941), ('Vicki', 3171), ('Vicky', 198), ('Victoria', 4823), ('Violet', 506), ('Virginia', 54), ('Vivienne', 802), ('Wendy', 6832), ('Whitney', 50), ('Willow', 743), ('Yvonne', 1822), ('Zara', 1292), ('Zoe', 3973), ('Zoey', 165), ('Amaia', 667), ('Ana', 730), ('Anahera', 1760), ('Anika', 1432), ('Aria', 1960), ('Ariana', 1729), ('Aroha', 1796), ('Ataahua', 876), ('Awhina', 583), ('Hana', 536), ('Hinewai', 536), ('Huia', 528), ('Kahurangi', 730), ('Kaia', 1576), ('Kora', 878), ('Mahi', 556), ('Maia', 1960), ('Manaia', 912), ('Maraea', 703), ('Mareikura', 948), ('Mereana', 637), ('Miriama', 614), ('Nia', 667), ('Ria', 703), ('Terina', 528), ('Tia', 1695), ('Tiare', 671), ('Tui', 1251), ('Waimarie', 671), ('Wikitoria', 583)))
A:faker.providers.person.en_NZ.__init__.first_names->OrderedDict((('Aaron', 9912), ('Adam', 7639), ('Adrian', 2420), ('Aidan', 1521), ('Aiden', 782), ('Alan', 5689), ('Alex', 2819), ('Alexander', 7783), ('Alistair', 429), ('Allan', 3148), ('Allen', 51), ('Andre', 127), ('Andrew', 25593), ('Angus', 1680), ('Anthony', 12549), ('Antony', 1594), ('Archer', 381), ('Archie', 774), ('Arlo', 584), ('Arthur', 630), ('Asher', 319), ('Ashley', 861), ('Ashton', 1236), ('Austin', 688), ('Bailey', 1304), ('Barry', 3624), ('Beau', 491), ('Beauden', 125), ('Ben', 2427), ('Benjamin', 15497), ('Bernard', 657), ('Bevan', 634), ('Blair', 2863), ('Blake', 3500), ('Bodhi', 70), ('Brad', 450), ('Bradley', 3910), ('Brandon', 1000), ('Braxton', 741), ('Brayden', 317), ('Brendan', 2010), ('Brendon', 3163), ('Brent', 5564), ('Brett', 4598), ('Brian', 6247), ('Brodie', 216), ('Brooklyn', 406), ('Bruce', 6079), ('Bryan', 1435), ('Caleb', 5374), ('Callum', 2364), ('Cameron', 7756), ('Campbell', 422), ('Carl', 3304), ('Carlos', 122), ('Carter', 1308), ('Charles', 3933), ('Charlie', 2367), ('Chase', 174), ('Christian', 1138), ('Christopher', 23459), ('Clayton', 59), ('Clinton', 1004), ('Cody', 2482), ('Cohen', 99), ('Cole', 648), ('Colin', 3980), ('Connor', 4632), ('Conor', 54), ('Cooper', 2113), ('Corey', 1656), ('Cory', 129), ('Craig', 12702), ('Cruz', 52), ('Damian', 1084), ('Damon', 211), ('Daniel', 23515), ('Darren', 3143), ('Darrin', 217), ('Darryl', 1517), ('Darryn', 260), ('Daryl', 421), ('David', 36792), ('Dean', 6096), ('Declan', 108), ('Denis', 66), ('Dennis', 1129), ('Derek', 1307), ('Desmond', 224), ('Dillon', 63), ('Dion', 1283), ('Dominic', 801), ('Donald', 2405), ('Douglas', 2587), ('Duncan', 471), ('Dwayne', 57), ('Dylan', 6564), ('Edward', 4864), ('Eli', 961), ('Elijah', 2137), ('Elliot', 54), ('Eric', 808), ('Ethan', 6578), ('Ezra', 309), ('Felix', 769), ('Finn', 2084), ('Fletcher', 447), ('Flynn', 1577), ('Francis', 420), ('Frank', 46), ('Fraser', 51), ('Frederick', 49), ('Gabriel', 739), ('Gareth', 2087), ('Garry', 1840), ('Gary', 5520), ('Gavin', 3197), ('Geoffrey', 4439), ('George', 7320), ('Gerald', 104), ('Gerard', 614), ('Glen', 2709), ('Glenn', 3983), ('Gordon', 1444), ('Graeme', 4705), ('Graham', 3746), ('Grant', 8355), ('Grayson', 259), ('Gregory', 7916), ('Hamish', 5758), ('Harley', 403), ('Harrison', 2800), ('Harry', 2454), ('Harvey', 192), ('Hayden', 5209), ('Henry', 3111), ('Hudson', 281), ('Hugh', 101), ('Hugo', 543), ('Hunter', 3044), ('Ian', 7592), ('Isaac', 4208), ('Isaiah', 349), ('Israel', 52), ('Ivan', 236), ('Jack', 9468), ('Jackson', 3088), ('Jacob', 8612), ('Jake', 2421), ('Jakob', 46), ('James', 27224), ('Jamie', 5064), ('Jared', 2840), ('Jarrod', 773), ('Jason', 14737), ('Jasper', 246), ('Jaxon', 623), ('Jayden', 4541), ('Jeffrey', 2826), ('Jeremy', 4775), ('Jesse', 3965), ('Joel', 2932), ('John', 26867), ('Jonathan', 7957), ('Jonathon', 349), ('Jordan', 6499), ('Joseph', 10061), ('Josh', 56), ('Joshua', 17109), ('Josiah', 52), ('Julian', 232), ('Justin', 3882), ('Kaleb', 492), ('Kane', 1236), ('Karl', 3822), ('Kayden', 123), ('Keanu', 54), ('Keegan', 351), ('Keith', 2175), ('Kelly', 58), ('Kelvin', 1262), ('Kenneth', 3240), ('Kerry', 2404), ('Kevin', 9358), ('Kieran', 1525), ('Kim', 125), ('Kingston', 692), ('Kurt', 515), ('Kyle', 2568), ('Lachlan', 2965), ('Lance', 2958), ('Lawrence', 226), ('Lee', 872), ('Leo', 1872), ('Leon', 967), ('Leonard', 102), ('Leslie', 1126), ('Levi', 2986), ('Lewis', 324), ('Liam', 8629), ('Lincoln', 857), ('Lindsay', 883), ('Lloyd', 46), ('Logan', 5063), ('Louis', 863), ('Luca', 1318), ('Lucas', 3329), ('Luka', 119), ('Lukas', 70), ('Luke', 8296), ('Malcolm', 2398), ('Marcus', 1129), ('Mark', 23154), ('Martin', 4260), ('Mason', 2613), ('Mathew', 3107), ('Matthew', 23181), ('Maurice', 385), ('Max', 3988), ('Maxwell', 172), ('Mervyn', 162), ('Micah', 52), ('Michael', 40099), ('Micheal', 49), ('Mitchell', 2730), ('Morgan', 58), ('Murray', 4843), ('Nate', 48), ('Nathan', 8920), ('Nathaniel', 329), ('Neil', 3392), ('Neville', 1268), ('Nicholas', 13132), ('Nigel', 4435), ('Nikau', 53), ('Nixon', 219), ('Noah', 3511), ('Noel', 778), ('Norman', 221), ('Oliver', 6515), ('Oscar', 1987), ('Owen', 484), ('Patrick', 6219), ('Paul', 22959), ('Peter', 23996), ('Philip', 7036), ('Phillip', 5977), ('Phoenix', 882), ('Quentin', 67), ('Quinn', 742), ('Raymond', 4404), ('Regan', 1182), ('Reuben', 1678), ('Rex', 561), ('Rhys', 967), ('Richard', 17664), ('Ricky', 806), ('Riley', 2771), ('Robert', 19791), ('Robin', 1431), ('Rodney', 1936), ('Roger', 2612), ('Roman', 429), ('Ronald', 1769), ('Rory', 220), ('Ross', 4823), ('Roy', 101), ('Russell', 2863), ('Ryan', 9965), ('Ryder', 727), ('Sam', 2347), ('Samuel', 15565), ('Scott', 9481), ('Sean', 5201), ('Sebastian', 1031), ('Seth', 780), ('Shane', 10213), ('Shannon', 1082), ('Shaun', 4397), ('Shayne', 296), ('Simon', 9846), ('Sione', 165), ('Spencer', 52), ('Stefan', 52), ('Stephen', 18603), ('Steven', 11007), ('Stewart', 499), ('Stuart', 4662), ('Taine', 204), ('Taylor', 1356), ('Terence', 1154), ('Terry', 860), ('Theo', 311), ('Theodore', 429), ('Thomas', 15382), ('Timothy', 10924), ('Toby', 1490), ('Todd', 1264), ('Tom', 47), ('Tony', 5670), ('Travis', 65), ('Trent', 524), ('Trevor', 3194), ('Tristan', 111), ('Troy', 2423), ('Tyler', 3765), ('Tyrone', 231), ('Tyson', 531), ('Vaughan', 322), ('Vincent', 907), ('Walter', 57), ('Warren', 3223), ('Warwick', 295), ('Wayne', 8542), ('William', 18322), ('Wyatt', 58), ('Xavier', 1879), ('Zac', 111), ('Zachary', 2569), ('Zane', 761), ('Zion', 217), ('Anaru', 735), ('Ari', 984), ('Ariki', 1178), ('Hemi', 1360), ('Hoani', 574), ('Ihaia', 476), ('Kahu', 700), ('Kahurangi', 939), ('Kauri', 1613), ('Manaaki', 574), ('Manaia', 1434), ('Manawa', 536), ('Matiu', 455), ('Mikaere', 1413), ('Nikau', 1942), ('Niko', 972), ('Nikora', 1766), ('Rawiri', 1553), ('Tai', 793), ('Tama', 1257), ('Tamati', 1766), ('Tane', 1698), ('Tangaroa', 605), ('Te Ariki', 1423), ('Te Koha', 537), ('Tiare', 476), ('Wiremu', 1923))).copy()
A:faker.providers.person.en_NZ.__init__.last_names->OrderedDict((('Smith', 948), ('Anderson', 394), ('Jones', 386), ('Taylor', 364), ('Brown', 350), ('Williams', 337), ('Thompson', 295), ('Scott', 266), ('Harris', 253), ('Mitchell', 217), ('Thomas', 214), ('Campbell', 193), ('Jackson', 191), ('Stewart', 188), ('Martin', 186), ('Turner', 174), ('Moore', 173), ('Simpson', 171), ('Hart', 166), ('Bell', 163), ('Evans', 161), ('Hansen', 160), ('Gray', 156), ('Henderson', 155), ('Edwards', 153), ('McDonald', 152), ('Davis', 150), ('Ward', 150), ('Cameron', 149), ('Wood', 149), ('MacDonald', 148), ('Reid', 140), ('Cook', 138), ('Bailey', 137), ('Adams', 136), ('Mason', 136), ('Baker', 135), ('Green', 134), ('Jensen', 134), ('Parker', 132), ('Neal', 131), ('Russell', 131), ('Carter', 128), ('Allen', 127), ('Roberts', 127), ('Knight', 126), ('Morgan', 126), ('Murphy', 126), ('Miller', 124), ('Morris', 124), ('McKay', 122), ('Morrison', 121), ('Wallace', 121), ('Stevens', 119), ('Johnston', 113), ('Jenkins', 111), ('Lewis', 110), ('Davies', 109), ('Oliver', 109), ('Ryan', 109), ('Marshall', 108), ('Webb', 108), ('Patchett', 107), ('Hughes', 106), ('Graham', 104), ('Wells', 104), ('Harrison', 103), ('Larsen', 103), ('Matthews', 103), ('Phillips', 102), ('Clarke', 100), ('Gibson', 99), ('Lucas', 99), ('Price', 97), ("O'Sullivan", 96), ('Barnes', 94), ('Gardiner', 92), ('Richards', 91), ('Boyce', 90), ('Duncan', 89), ('Fisher', 89), ('Gill', 89), ("O'Brien", 89), ('Gordon', 88), ('Olsen', 88), ('Powell', 86), ('Black', 85), ('Kennedy', 85), ('Dixon', 84), ('Jamieson', 84), ("O'Connor", 84), ('Sinclair', 84), ('Perry', 83), ('Williamson', 83), ('Day', 82), ('Pedersen', 81), ('Currie', 80), ('Grant', 80), ('Rush', 80), ('McEwen', 79), ('Wilton', 79), ('Kelly', 78), ('Nicholson', 77), ('Coleman', 76), ('Davidson', 76), ('Gardner', 76), ('Saunders', 76), ('Rogers', 75), ('Bryant', 74), ('Ferguson', 74), ('Ford', 73), ('Fowler', 73), ('McLean', 73), ('Holland', 72), ('Lloyd', 72), ('Page', 72), ('Francis', 71), ('Smart', 71), ('Weston', 71), ('Chapman', 70), ('Crawford', 70), ('Shaw', 70), ('Sullivan', 70), ('Webster', 70), ('Millar', 69), ('Burton', 68), ('Fuller', 68), ('Hamilton', 68), ('West', 68), ('Burns', 67), ('Cox', 67), ('Cresswell', 67), ('Holdaway', 67), ('Hodson', 66), ('Kerr', 66), ('Brooks', 64), ('Fletcher', 64), ('McCallum', 64), ('Allan', 63), ('Buchanan', 63), ('Carr', 63), ('Lee', 63), ('Pickering', 63), ('Pope', 63), ('Rowe', 63), ('Woolley', 63), ('McLeod', 62), ('Barnett', 61), ('Berry', 61), ('Lane', 61), ('Tapp', 61), ('Bartlett', 60), ('Elliott', 60), ('Pearson', 60), ('Wilkinson', 60), ('Atkinson', 59), ('Butler', 59), ('Douglas', 59), ('Pratt', 59), ('Cole', 58), ('Hayward', 58), ('Little', 58), ('Newman', 58), ('Simmons', 58), ('Barrett', 57), ('Cooksley', 57), ('Freeman', 57), ('Higgins', 57), ('Hope', 57), ('McGregor', 57), ('McMillan', 57), ('Rose', 57), ('Sutton', 57), ('Wong', 57), ('Harper', 56), ('Osborne', 56), ('Stevenson', 56), ('Bird', 55), ('Boyd', 55), ('Dick', 55), ('Field', 55), ('Greer', 55), ('Greig', 55), ('Nielsen', 55), ('Reynolds', 55), ('Forrest', 54), ('Bradley', 53), ('Gibbons', 53), ('Howard', 53), ('MacKenzie', 53), ('Nelson', 53), ('Todd', 53), ('Waters', 53), ('Ball', 52), ('Davey', 52), ('Holmes', 52), ('Rodgers', 52), ('Stratford', 52), ('Griffiths', 51), ('Small', 51), ('Watt', 51), ('Andrew', 50), ('Bishop', 50), ('Dunn', 50), ('Goodwin', 50), ('Gore', 50), ('Healy', 50), ('May', 50), ('Munro', 50), ('Parsons', 50), ('Poole', 50), ('Watts', 50), ('Hills', 49), ('Peters', 49), ('Vercoe', 49), ('Armstrong', 48), ('Bright', 48), ('Burgess', 48), ('Collis', 48), ("O'Neill", 48), ('Spencer', 48), ('Ritchie', 47), ('Alexander', 46), ('Curtis', 46), ('Freeth', 46), ('Nicol', 46), ('Robson', 46), ('Satherley', 46), ('Stuart', 46), ('Waugh', 46), ('Woods', 46), ('Coley', 45), ('Fitzgerald', 45), ('Fleming', 45), ('Herd', 45), ('Morton', 45), ('Beattie', 44), ('Clifford', 44), ('Costello', 44), ('Dawson', 44), ('Donaldson', 44), ('Fox', 44), ('Hay', 44), ('Jellyman', 44), ('Joe', 44), ('Johansen', 44), ('Knowles', 44), ('Lawson', 44), ("O'Donnell", 44), ('Patterson', 44), ('Payne', 44), ('Read', 44), ('Casey', 43), ('Chandler', 43), ('Donald', 43), ('Gilchrist', 43), ('Hyde', 43), ('McIntosh', 43), ('Paton', 43), ('Robb', 43), ('Rutherford', 43), ('Pike', 42), ('Dillon', 41), ('Drummond', 41), ('Hickey', 41), ('Hooper', 41), ('Jordan', 41), ('Judd', 41), ('Kenny', 41), ('Low', 41), ('Marfell', 41), ('Newton', 41), ("O'Leary", 41), ('Tucker', 41), ('Carson', 40), ('Dean', 40), ('Dickson', 40), ('George', 40), ('Ham', 40), ('McCarthy', 40), ('McIntyre', 40), ('Moran', 40), ("O'Connell", 40), ('Parkes', 40), ('Short', 40), ('Barr', 39), ('Baxter', 39), ('Dalton', 39), ('Forbes', 39), ('Hawkins', 39), ('Ireland', 39), ('Miles', 39), ('Nash', 39), ('Owen', 39), ('Perano', 39), ('Sowman', 39), ('Whyte', 39), ('Bush', 38), ('Drake', 38), ('Eden', 38), ('Giles', 38), ('Hoare', 38), ('Hubbard', 38), ('Hudson', 38), ('MacKay', 38), ('McKinnon', 38), ('Mears', 38), ('Prentice', 38), ('Schwass', 38), ('Simonsen', 38), ('Walton', 38), ('Wheeler', 38), ('Wratt', 38), ('Avery', 37), ('Barker', 37), ('Blake', 37), ('Conway', 37), ('Holloway', 37), ('Horton', 37), ('Manning', 37), ('Nolan', 37), ('Pritchard', 37), ('Bishell', 36), ('Blair', 36), ('Christiansen', 36), ('Fulton', 36), ('Gibbs', 36), ('Griffin', 36), ('Hook', 36), ('McGill', 36), ('Mercer', 36), ('Middleton', 36), ('Rayner', 36), ('Stone', 36), ('Terry', 36), ('Walsh', 36), ('Craig', 35), ('Craven', 35), ('Ellery', 35), ('Findlay', 35), ('Maxwell', 35), ('North', 35), ('Reardon', 35), ('Tait', 35), ('Baldwin', 34), ('Butcher', 34), ('Caldwell', 34), ('Doyle', 34), ('Eaton', 34), ('Flood', 34), ('Gifford', 34), ('Guy', 34), ('Jennings', 34), ('Leslie', 34), ('McMahon', 34), ('McNabb', 34), ('Paterson', 34), ('Porter', 34), ('Reeves', 34), ('Seymour', 34), ('Trask', 34), ('Warren', 34), ('Watkins', 34), ('Wills', 34), ('Best', 33), ('Bull', 33), ('Dawick', 33), ('Dobson', 33), ('Gledhill', 33), ('Hardy', 33), ('Hayes', 33), ('Kendall', 33), ('McCormick', 33), ('McPherson', 33), ('Pollard', 33), ('Rasmussen', 33), ('Shailer', 33), ('Shepherd', 33), ('Sheridan', 33), ('Simmonds', 33), ('Steele', 33), ('Booth', 32), ('Edmonds', 32), ('Gunn', 32), ('Hood', 32), ('Humphrey', 32), ('Hutchinson', 32), ('Laurenson', 32), ('Long', 32), ('Lowe', 32), ('Manson', 32), ('McGrath', 32), ('McKenna', 32), ('Muir', 32), ("O'Keefe", 32), ('Potter', 32), ('Searle', 32), ('Stubbs', 32), ('Wall', 32), ('Wallis', 32), ('Browne', 31), ('Carroll', 31), ('Cunningham', 31), ('Foley', 31), ('Franklin', 31), ('Furness', 31), ('Gilbert', 31), ('Hopkins', 31), ('Jefferies', 31), ('Johnstone', 31), ('Linton', 31), ('Mann', 31), ('Norton', 31), ('Rees', 31), ('Rowlands', 31), ('Sanders', 31), ('Bond', 30), ('Chambers', 30), ('Cragg', 30), ('Davison', 30), ('Gee', 30), ('Gleeson', 30), ('Gullery', 30), ('Hadfield', 30), ('Haines', 30), ('Hepburn', 30), ('Howell', 30), ('Jeffries', 30), ('Lamb', 30), ('Law', 30), ('MacPherson', 30), ('McIsaac', 30), ('Millard', 30), ('Paul', 30), ('Pearce', 30), ('Prouse', 30), ('Ramsay', 30), ('Rowland', 30), ('Spelman', 30), ('Waghorn', 30), ('Willis', 30), ('Zimmerman', 30), ('Aitken', 29), ('Booker', 29), ('Bruce', 29), ('Burrell', 29), ('Burt', 29), ('Funnell', 29), ('Gilmore', 29), ('Guthrie', 29), ('Hewitt', 29), ('Hogg', 29), ('Lammas', 29), ('Lang', 29), ('Lyons', 29), ('McDowall', 29), ('Neilson', 29), ('Norman', 29), ('Reed', 29), ('Rickard', 29), ('Stokes', 29), ('Stratton', 29), ('Strawbridge', 29), ('York', 29), ('Alve', 28), ('Baldick', 28), ('Banks', 28), ('Beard', 28), ('Bowden', 28), ('Boyle', 28), ('Carpenter', 28), ('Connolly', 28), ('Cooke', 28), ('Craw', 28), ('Cumming', 28), ('Drew', 28), ('Fairhall', 28), ('Gillespie', 28), ('Gillies', 28), ('Healey', 28), ('Horn', 28), ('Ingram', 28), ('Knox', 28), ('Lancaster', 28), ('Landon-Lane', 28), ('Marsh', 28), ('Mortimer', 28), ('Riley', 28), ('Sixtus', 28), ('Turnbull', 28), ('Warner', 28), ('Aldridge', 27), ('Allerby', 27), ('Arnold', 27), ('Blackwell', 27), ('Blick', 27), ('Boon', 27), ('Bowater', 27), ('Broughan', 27), ('Davenport', 27), ('Foote', 27), ('Forsyth', 27), ('Laing', 27), ('Mayo', 27), ('McFarlane', 27), ('McMurray', 27), ('Monk', 27), ('Orr', 27), ('Procter', 27), ('Shannon', 27), ('Southee', 27), ('Stace', 27), ('Waller', 27), ('Webby', 27), ('Arnott', 26), ('Baird', 26), ('Bary', 26), ('Bassett', 26), ('Buckley', 26), ('Burke', 26), ('Claridge', 26), ('Clunies-Ross', 26), ('Croad', 26), ('Dyer', 26), ('Ewart', 26), ('Faulkner', 26), ('Fenton', 26), ('Gibb', 26), ('Huddleston', 26), ('Jarvis', 26), ('Kay', 26), ('Kemp', 26), ('McLachlan', 26), ('Middlemiss', 26), ('Moody', 26), ('Mudgway', 26), ('Nicholas', 26), ('Reader', 26), ('Robert', 26), ('Steer', 26), ('Thornton', 26), ('Toms', 26), ('Twidle', 26), ('Vincent', 26), ('Way', 26), ('Whittaker', 26), ('Batchelar', 25), ('Boniface', 25), ('Botham', 25), ('Buick', 25), ('Burnett', 25), ('Ching', 25), ('Christie', 25), ('Corlett', 25), ('Coutts', 25), ('Eglinton', 25), ('Enright', 25), ('Foot', 25), ('Frost', 25), ('Gaskin', 25), ('Hanson', 25), ('Hardie', 25), ('Henry', 25), ('Hoskins', 25), ('Lambert', 25), ('Learmonth', 25), ('Logan', 25), ('Matheson', 25), ('McManaway', 25), ('Meads', 25), ('Meredith', 25), ('Montgomery', 25), ('Murdoch', 25), ('Orchard', 25), ('Perrin', 25), ('Peterson', 25), ('Priest', 25), ('Rossiter', 25), ('Shand', 25), ('Skinner', 25), ('Soper', 25), ('Street', 25), ('Tanner', 25), ('Aberhart', 24), ('Berkahn', 24), ('Burr', 24), ('Cairns', 24), ('Corbett', 24), ('Dalziel', 24), ('Doherty', 24), ('Esson', 24), ('Farland', 24), ('Godfrey', 24), ('Guard', 24), ('Hume', 24), ('Irving', 24), ('Jacques', 24), ('Kirk', 24), ('Love', 24), ('Lyon', 24)))
faker.providers.person.en_NZ.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/hu_HU/__init__.py----------------------------------------
A:faker.providers.person.hu_HU.__init__.formats_male->OrderedDict((('{{last_name}} {{first_name_male}}', 0.1), ('{{last_name}} {{last_name}} {{first_name_male}}', 0.1), ('{{last_name}} {{first_name_male}} {{first_name_male}}', 0.1), ('{{first_name_male_abbreviated}} {{last_name}} {{first_name_male}}', 0.1), ('{{last_name}} {{first_name_male_abbreviated}} {{first_name_male}}', 0.1), ('{{prefix}} {{last_name}} {{first_name_male}}', 0.05), ('{{prefix}} {{last_name}} {{last_name}} {{first_name_male}}', 0.05), ('{{prefix}} {{last_name}} {{first_name_male}} {{first_name_male}}', 0.05), ('{{prefix}} {{first_name_male_abbreviated}} {{last_name}} {{first_name_male}}', 0.05), ('{{prefix}} {{last_name}} {{first_name_male_abbreviated}} {{first_name_male}}', 0.05)))
A:faker.providers.person.hu_HU.__init__.formats_female->OrderedDict((('{{last_name}} {{first_name_female}}', 0.1), ('{{last_name}} {{last_name}} {{first_name_female}}', 0.1), ('{{last_name}} {{first_name_female}} {{first_name_female}}', 0.1), ('{{first_name_female_abbreviated}} {{last_name}} {{first_name_female}}', 0.1), ('{{last_name}} {{first_name_female_abbreviated}} {{first_name_female}}', 0.1), ('{{prefix}} {{last_name}} {{first_name_female}}', 0.05), ('{{prefix}} {{last_name}} {{last_name}} {{first_name_female}}', 0.05), ('{{prefix}} {{last_name}} {{first_name_female}} {{first_name_female}}', 0.05), ('{{prefix}} {{first_name_female_abbreviated}} {{last_name}} {{first_name_female}}', 0.05), ('{{prefix}} {{last_name}} {{first_name_female_abbreviated}} {{first_name_female}}', 0.05), ('{{last_name}}né {{last_name}} {{first_name_female}}', 0.1), ('{{last_name}}né {{last_name}} {{first_name_female}} {{first_name_female}}', 0.1), ('{{last_name}}né {{last_name}} {{first_name_female}} {{first_name_female}}', 0.05), ('{{last_name}} {{first_name_male}}né', 0.05), ('{{last_name}} {{first_name_male}}né {{last_name}} {{first_name_female}}', 0.1), ('{{prefix}} {{last_name}}né {{last_name}} {{first_name_female}}', 0.1), ('{{prefix}} {{last_name}}né {{last_name}} {{first_name_female}} {{first_name_female}}', 0.05), ('{{prefix}} {{last_name}}né {{last_name}} {{first_name_female}} {{first_name_female}}', 0.05), ('{{prefix}} {{last_name}} {{first_name_male}}né', 0.1), ('{{prefix}} {{last_name}} {{first_name_male}}né {{last_name}} {{first_name_female}}', 0.05), ('{{last_name}}né {{prefix}} {{last_name}} {{first_name_female}}', 0.1), ('{{last_name}}né {{prefix}} {{last_name}} {{first_name_female}} {{first_name_female}}', 0.05)))
A:faker.providers.person.hu_HU.__init__.formats->OrderedDict((('{{last_name}} {{first_name_male}}', 0.1), ('{{last_name}} {{last_name}} {{first_name_male}}', 0.1), ('{{last_name}} {{first_name_male}} {{first_name_male}}', 0.1), ('{{first_name_male_abbreviated}} {{last_name}} {{first_name_male}}', 0.1), ('{{last_name}} {{first_name_male_abbreviated}} {{first_name_male}}', 0.1), ('{{prefix}} {{last_name}} {{first_name_male}}', 0.05), ('{{prefix}} {{last_name}} {{last_name}} {{first_name_male}}', 0.05), ('{{prefix}} {{last_name}} {{first_name_male}} {{first_name_male}}', 0.05), ('{{prefix}} {{first_name_male_abbreviated}} {{last_name}} {{first_name_male}}', 0.05), ('{{prefix}} {{last_name}} {{first_name_male_abbreviated}} {{first_name_male}}', 0.05))).copy()
A:faker.providers.person.hu_HU.__init__.last_names->OrderedDict((('Nagy', 0.06992), ('Kovács', 0.06457), ('Tóth', 0.06316), ('Szabó', 0.06234), ('Horváth', 0.05995), ('Varga', 0.041), ('Kiss', 0.03891), ('Molnár', 0.03189), ('Németh', 0.02715), ('Farkas', 0.02499), ('Balogh', 0.02468), ('Papp', 0.01567), ('Takács', 0.01535), ('Juhász', 0.01516), ('Lakatos', 0.01486), ('Mészáros', 0.01183), ('Oláh', 0.01161), ('Simon', 0.01129), ('Rácz', 0.01063), ('Fekete', 0.01021), ('Szilágyi', 0.00959), ('Török', 0.0079), ('Fehér', 0.00786), ('Balázs', 0.00771), ('Gál', 0.00756), ('Kis', 0.0073), ('Szűcs', 0.00709), ('Kocsis', 0.007), ('Orsós', 0.00692), ('Pintér', 0.006), ('Fodor', 0.00686), ('Szalai', 0.00628), ('Sipos', 0.0062), ('Magyar', 0.0061), ('Lukács', 0.00611), ('Gulyás', 0.00591), ('Biró', 0.00576), ('Király', 0.0056), ('László', 0.00548), ('Katona', 0.00548), ('Jakab', 0.00541), ('Bogdán', 0.00536), ('Balog', 0.0053), ('Sándor', 0.0052), ('Boros', 0.00515), ('Fazekas', 0.005), ('Kelemen', 0.005), ('Váradi', 0.005), ('Antal', 0.0049), ('Somogyi', 0.00487), ('Orosz', 0.00484), ('Fülöp', 0.0048), ('Veres', 0.0047), ('Vincze', 0.00468), ('Hegedűs', 0.00458), ('Budai', 0.00453), ('Deák', 0.00449), ('Pap', 0.00442), ('Bálint', 0.00435), ('Pál', 0.00427), ('Illés', 0.0042), ('Vass', 0.0042), ('Szőke', 0.00419), ('Vörös', 0.00418), ('Bognár', 0.00416), ('Fábián', 0.00415), ('Lengyel', 0.00414), ('Bodnár', 0.00409), ('Szücs', 0.00403), ('Hajdu', 0.00391), ('Halász', 0.0039), ('Jónás', 0.00388), ('Máté', 0.00371), ('Székely', 0.00367), ('Kozma', 0.00366), ('Gáspár', 0.00364), ('Pásztor', 0.00356), ('Bakos', 0.00354), ('Dudás', 0.00348), ('Major', 0.00347), ('Orbán', 0.00343), ('Hegedüs', 0.00342), ('Virág', 0.00341), ('Barna', 0.00335), ('Novák', 0.00334), ('Soós', 0.00331), ('Tamás', 0.00326), ('Nemes', 0.00326), ('Pataki', 0.0032), ('Balla', 0.00313), ('Faragó', 0.00312), ('Kerekes', 0.0031), ('Borbély', 0.00311), ('Barta', 0.00308), ('Péter', 0.003), ('Szekeres', 0.00306), ('Csonka', 0.00305), ('Mezei', 0.00302), ('Márton', 0.003), ('Sárközi', 0.00298)))
A:faker.providers.person.hu_HU.__init__.first_names_male->OrderedDict((('László', 0.06640477), ('István', 0.060906051), ('József', 0.054476881), ('János', 0.047506017), ('Zoltán', 0.045579697), ('Sándor', 0.037170944), ('Gábor', 0.035546303), ('Ferenc', 0.034065759), ('Attila', 0.032146512), ('Péter', 0.03083703), ('Tamás', 0.030257321), ('Zsolt', 0.025204158), ('Tibor', 0.023296182), ('András', 0.021678391), ('Csaba', 0.020367141), ('Imre', 0.019339667), ('Lajos', 0.017901558), ('György', 0.01695188), ('Balázs', 0.015569685), ('Gyula', 0.014295123), ('Mihály', 0.013628337), ('Róbert', 0.013385668), ('Károly', 0.013181456), ('Dávid', 0.01315184), ('Dániel', 0.012373665), ('Ádám', 0.012290124), ('Béla', 0.012279294), ('Krisztián', 0.011589081), ('Miklós', 0.010985283), ('Norbert', 0.010746593), ('Bence', 0.010403586), ('Máté', 0.009479986), ('Pál', 0.007890264), ('Gergő', 0.007554993), ('Roland', 0.007535765), ('Szabolcs', 0.007522062), ('Bálint', 0.007021254), ('Levente', 0.006948763), ('Márk', 0.006873178), ('Richárd', 0.006811074), ('Antal', 0.006583213), ('Gergely', 0.006408174), ('Ákos', 0.006278662), ('Viktor', 0.005872447), ('Árpád', 0.005217153), ('Márton', 0.005061783), ('Géza', 0.005036367), ('Kristóf', 0.004518984), ('Milán', 0.003956735), ('Dominik', 0.003924247), ('Patrik', 0.003911428), ('Martin', 0.003747439), ('Barnabás', 0.003645333), ('Jenő', 0.003619917), ('Kálmán', 0.003613728), ('Marcell', 0.003571515), ('Áron', 0.003219668), ('Mátyás', 0.003028495), ('Ernő', 0.002998879), ('Endre', 0.002830912), ('Botond', 0.00282605), ('Zsombor', 0.002768366), ('Dezső', 0.002557523), ('Olivér', 0.002524814), ('Nándor', 0.002520394), ('Szilárd', 0.002422044), ('Erik', 0.002421381), ('Alex', 0.0023248), ('Benedek', 0.002119924), ('Vilmos', 0.002113515), ('Kornél', 0.002018481), ('Zalán', 0.001970964), ('Dénes', 0.001921458), ('Ottó', 0.001901788), ('Benjámin', 0.001738241), ('Bertalan', 0.001700227), ('Kevin', 0.001668623), ('Adrián', 0.001550603), ('Rudolf', 0.001386172), ('Noel', 0.001381973), ('Albert', 0.001355673), ('Vince', 0.001353463), ('Ervin', 0.001182622), ('Győző', 0.001125823), ('Zsigmond', 0.001120519), ('Andor', 0.001057531), ('Iván', 0.001016202), ('Szilveszter', 0.001010014), ('Gusztáv', 0.000994985), ('Barna', 0.000986808), ('Ábel', 0.000969569), ('Hunor', 0.000940396), ('Arnold', 0.000931777), ('Csongor', 0.00092824), ('Elemér', 0.000894868), ('Krisztofer', 0.000891111), ('Bendegúz', 0.000868347), ('Emil', 0.000791656), ('Tivadar', 0.000786573), ('Henrik', 0.000758063)))
A:faker.providers.person.hu_HU.__init__.first_names_female->OrderedDict((('Mária', 0.076200074), ('Erzsébet', 0.058002384), ('Katalin', 0.0429636), ('Éva', 0.039004017), ('Ilona', 0.038027669), ('Anna', 0.030819538), ('Zsuzsanna', 0.029737292), ('Margit', 0.024148354), ('Judit', 0.020956031), ('Ágnes', 0.020891678), ('Andrea', 0.020768845), ('Ildikó', 0.019861817), ('Julianna', 0.019458091), ('Erika', 0.018991368), ('Krisztina', 0.017491847), ('Irén', 0.015454477), ('Eszter', 0.014382165), ('Mónika', 0.014128821), ('Magdolna', 0.013536554), ('Edit', 0.013129441), ('Gabriella', 0.012887838), ('Szilvia', 0.012663621), ('Anita', 0.011554053), ('Viktória', 0.011388318), ('Anikó', 0.011180584), ('Márta', 0.010886596), ('Tímea', 0.010327747), ('Rozália', 0.009782898), ('Piroska', 0.009699353), ('Ibolya', 0.00922134), ('Klára', 0.008981769), ('Tünde', 0.008838839), ('Dóra', 0.008803841), ('Zsófia', 0.008600397), ('Alexandra', 0.007886652), ('Veronika', 0.00777443), ('Gizella', 0.007579567), ('Csilla', 0.007395768), ('Nikolett', 0.006972849), ('Melinda', 0.006857693), ('Réka', 0.0068385), ('Nóra', 0.006794469), ('Terézia', 0.006777535), ('Adrienn', 0.006753826), ('Beáta', 0.006526674), ('Marianna', 0.006462547), ('Vivien', 0.006299747), ('Renáta', 0.00626091), ('Barbara', 0.006076434), ('Enikő', 0.006052499), ('Bernadett', 0.005964438), ('Rita', 0.005917472), ('Brigitta', 0.005875926), ('Edina', 0.005745866), ('Hajnalka', 0.005696191), ('Gyöngyi', 0.005616484), ('Petra', 0.005609033), ('Boglárka', 0.005329496), ('Orsolya', 0.005328141), ('Jolán', 0.005184534), ('Noémi', 0.005078861), ('Etelka', 0.004833419), ('Valéria', 0.00472594), ('Fanni', 0.004716682), ('Borbála', 0.004701553), ('Annamária', 0.004528367), ('Kitti', 0.00439334), ('Teréz', 0.004384985), ('Nikoletta', 0.004310021), ('Laura', 0.004266893), ('Emese', 0.004212702), ('Lilla', 0.004193961), ('Hanna', 0.003921198), ('Aranka', 0.003884844), ('Kinga', 0.003755914), ('Klaudia', 0.003710077), ('Anett', 0.003661305), ('Róza', 0.003621339), ('Lili', 0.003436636), ('Zita', 0.00343212), ('Dorina', 0.003412476), ('Emma', 0.003374994), ('Beatrix', 0.003364381), ('Zsanett', 0.003276772), ('Sára', 0.003156873), ('Bianka', 0.003061135), ('Rózsa', 0.003006041), ('Jázmin', 0.002952527), ('Luca', 0.002949817), ('Júlia', 0.002917754), ('Diána', 0.002841434), ('Henrietta', 0.002798759), ('Györgyi', 0.002731471), ('Irma', 0.00272131), ('Dorottya', 0.002585154), ('Bettina', 0.002574316), ('Mariann', 0.002569349), ('Virág', 0.002557156), ('Gréta', 0.002515835), ('Rebeka', 0.002513351)))
A:faker.providers.person.hu_HU.__init__.first_names->OrderedDict((('László', 0.06640477), ('István', 0.060906051), ('József', 0.054476881), ('János', 0.047506017), ('Zoltán', 0.045579697), ('Sándor', 0.037170944), ('Gábor', 0.035546303), ('Ferenc', 0.034065759), ('Attila', 0.032146512), ('Péter', 0.03083703), ('Tamás', 0.030257321), ('Zsolt', 0.025204158), ('Tibor', 0.023296182), ('András', 0.021678391), ('Csaba', 0.020367141), ('Imre', 0.019339667), ('Lajos', 0.017901558), ('György', 0.01695188), ('Balázs', 0.015569685), ('Gyula', 0.014295123), ('Mihály', 0.013628337), ('Róbert', 0.013385668), ('Károly', 0.013181456), ('Dávid', 0.01315184), ('Dániel', 0.012373665), ('Ádám', 0.012290124), ('Béla', 0.012279294), ('Krisztián', 0.011589081), ('Miklós', 0.010985283), ('Norbert', 0.010746593), ('Bence', 0.010403586), ('Máté', 0.009479986), ('Pál', 0.007890264), ('Gergő', 0.007554993), ('Roland', 0.007535765), ('Szabolcs', 0.007522062), ('Bálint', 0.007021254), ('Levente', 0.006948763), ('Márk', 0.006873178), ('Richárd', 0.006811074), ('Antal', 0.006583213), ('Gergely', 0.006408174), ('Ákos', 0.006278662), ('Viktor', 0.005872447), ('Árpád', 0.005217153), ('Márton', 0.005061783), ('Géza', 0.005036367), ('Kristóf', 0.004518984), ('Milán', 0.003956735), ('Dominik', 0.003924247), ('Patrik', 0.003911428), ('Martin', 0.003747439), ('Barnabás', 0.003645333), ('Jenő', 0.003619917), ('Kálmán', 0.003613728), ('Marcell', 0.003571515), ('Áron', 0.003219668), ('Mátyás', 0.003028495), ('Ernő', 0.002998879), ('Endre', 0.002830912), ('Botond', 0.00282605), ('Zsombor', 0.002768366), ('Dezső', 0.002557523), ('Olivér', 0.002524814), ('Nándor', 0.002520394), ('Szilárd', 0.002422044), ('Erik', 0.002421381), ('Alex', 0.0023248), ('Benedek', 0.002119924), ('Vilmos', 0.002113515), ('Kornél', 0.002018481), ('Zalán', 0.001970964), ('Dénes', 0.001921458), ('Ottó', 0.001901788), ('Benjámin', 0.001738241), ('Bertalan', 0.001700227), ('Kevin', 0.001668623), ('Adrián', 0.001550603), ('Rudolf', 0.001386172), ('Noel', 0.001381973), ('Albert', 0.001355673), ('Vince', 0.001353463), ('Ervin', 0.001182622), ('Győző', 0.001125823), ('Zsigmond', 0.001120519), ('Andor', 0.001057531), ('Iván', 0.001016202), ('Szilveszter', 0.001010014), ('Gusztáv', 0.000994985), ('Barna', 0.000986808), ('Ábel', 0.000969569), ('Hunor', 0.000940396), ('Arnold', 0.000931777), ('Csongor', 0.00092824), ('Elemér', 0.000894868), ('Krisztofer', 0.000891111), ('Bendegúz', 0.000868347), ('Emil', 0.000791656), ('Tivadar', 0.000786573), ('Henrik', 0.000758063))).copy()
A:faker.providers.person.hu_HU.__init__.prefixes->OrderedDict((('Dr.', 0.95), ('Prof. Dr.', 0.05)))
faker.providers.person.hu_HU.__init__.Provider(PersonProvider)
faker.providers.person.hu_HU.__init__.Provider.first_name_female_abbreviated(self)
faker.providers.person.hu_HU.__init__.Provider.first_name_male_abbreviated(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/he_IL/__init__.py----------------------------------------
A:faker.providers.person.he_IL.__init__.formats_female->OrderedDict((('{{first_name_female}} {{last_name}}', 0.9), ('{{first_name_female}} {{last_name}}-{{last_name}}', 0.06), ('{{first_name_female}} {{first_name_female}} {{last_name}}', 0.04)))
A:faker.providers.person.he_IL.__init__.formats_male->OrderedDict((('{{first_name_male}} {{last_name}}', 0.95), ('{{first_name_male}} {{last_name}}-{{last_name}}', 0.025), ('{{first_name_male}} {{first_name_male}} {{last_name}}', 0.025)))
A:faker.providers.person.he_IL.__init__.formats->OrderedDict((('{{first_name_male}} {{last_name}}', 0.95), ('{{first_name_male}} {{last_name}}-{{last_name}}', 0.025), ('{{first_name_male}} {{first_name_male}} {{last_name}}', 0.025))).copy()
A:faker.providers.person.he_IL.__init__.first_names_female->OrderedDict((('אביב', 0.002782860042127), ('אביגיל', 0.017542780707554), ('אביה', 0.00339785673652), ('אביטל', 0.002644485785889), ('אבישג', 0.005288971571778), ('אגם', 0.0085330791347), ('אדוה', 0.001030119463108), ('אדל', 0.016512661244446), ('אדר', 0.000968619793669), ('אהובה', 0.000737996033271), ('אודיה', 0.000799495702711), ('אודל', 0.003059608554604), ('אודליה', 0.000999369628388), ('אווה', 0.00081487062007), ('אופיר', 0.004535600621147), ('אופל', 0.000568871942313), ('אופק', 0.000476622438154), ('אור', 0.004643225042665), ('אוראל', 0.000538122107594), ('אורה', 0.000784120785351), ('אורטל', 0.000322873264556), ('אורי', 0.004858473885703), ('אוריאן', 0.002198613182454), ('אוריה', 0.005688719423133), ('אורין', 0.002890484463646), ('אורן', 0.000461247520795), ('אושר', 0.000737996033271), ('אחינועם', 0.000999369628388), ('איה', 0.001091619132547), ('איה', 0.002936609215725), ('איטה', 0.000538122107594), ('איידל', 0.000307498347196), ('איילה', 0.015959164219492), ('איילת', 0.001506741901262), ('איימי', 0.000676496363832), ('אילין', 0.000153749173598), ('אילין', 0.001921864669977), ('אילת', 0.000461247520795), ('אימאן', 0.001030119463108), ('אלה', 0.009809197275565), ('אלומה', 0.000445872603435), ('אלונה', 0.002029489091496), ('אלטע', 0.000415122768715), ('אלי', 0.000799495702711), ('אליאן', 0.0017219907443), ('אליאנה', 0.000368998016636), ('אליה', 0.004443351116988), ('אלין', 0.000122999338879), ('אלין', 0.000538122107594), ('אלין', 0.003290232315001), ('אלין', 0.003982103596193), ('אלינור', 0.001030119463108), ('אליס', 0.000430497686075), ('אליסה', 0.000399747851355), ('אליענה', 0.00081487062007), ('אלישבע', 0.005319721406497), ('אלכס', 0.00086099537215), ('אלמא', 0.001106994049907), ('אלמה', 0.0033671069018), ('אלמוג', 0.00086099537215), ('אמה', 0.007748958349349), ('אמונה', 0.001199243554066), ('אמור', 0.000322873264556), ('אמי', 0.000538122107594), ('אמילי', 0.000153749173598), ('אמילי', 0.005873218431451), ('אמיליה', 0.00084562045479), ('אמל', 0.001967989422057), ('אמלי', 0.000737996033271), ('אן', 0.000661121446472), ('אנאבל', 0.000522747190234), ('אנאל', 0.00338248181916), ('אנה', 0.001229993388786), ('אסיל', 0.000169124090958), ('אסיל', 0.002075613843576), ('אסנת', 0.000322873264556), ('אסתר', 0.010639442812995), ('אפרת', 0.007041712150797), ('ארבל', 0.002213988099814), ('אריאל', 0.008287080456943), ('בארי', 0.000322873264556), ('ביאן', 0.001229993388786), ('בילא', 0.000784120785351), ('ביסאן', 0.002629110868529), ('בלומה', 0.001030119463108), ('בר', 0.002336987438693), ('ברכה', 0.002613735951169), ('בת', 0.001568241570702), ('בתיה', 0.002290862686613), ('בת שבע', 0.003259482480282), ('גאיה', 0.006672714134162), ("ג'ואל", 0.000138374256238), ("ג'וד", 0.001076244215187), ("ג'ויל", 0.000122999338879), ('גולדה', 0.000707246198552), ("ג'ולי", 0.000184499008318), ("ג'ולין", 0.000138374256238), ('גוני', 0.000368998016636), ("ג'ורי", 0.000138374256238), ('גורי', 0.00255223628173), ("ג'ורי", 0.002598361033809), ('גזל', 0.001752740579019), ('גיטל', 0.001368367645024), ('גיל', 0.000707246198552), ('גילה', 0.000691871281192), ('גילי', 0.003259482480282), ('גל', 0.001537491735982), ('גלי', 0.002967359050445), ('גליה', 0.00084562045479), ("ג'נא", 0.005688719423133), ('גפן', 0.00424347719131), ('דבורה', 0.00425885210867), ('דור', 0.000430497686075), ('דורון', 0.000722621115912), ('דורין', 0.000384372933995), ('דימא', 0.001337617810304), ('דינה', 0.00084562045479), ('דנה', 0.000753370950631), ('דני', 0.000445872603435), ('דניאל', 0.00427422702603), ('דניאלה', 0.003213357728202), ('דפנה', 0.000753370950631), ('דרור', 0.000491997355514), ('דריה', 0.001752740579019), ('הדס', 0.004950723389862), ('הדסה', 0.004643225042665), ('הדר', 0.005596469918974), ('הודיה', 0.009855322027644), ('היילי', 0.000322873264556), ('הילה', 0.007795083101428), ('הילי', 0.002798234959487), ('הינדא', 0.000584246859673), ('הלל', 0.006349840869605), ('הללי', 0.002029489091496), ('הניה', 0.000338248181916), ('הענא', 0.000384372933995), ('זהבה', 0.000522747190234), ('זואי', 0.001076244215187), ('זוהר', 0.003028858719884), ('זיו', 0.001645116157501), ('זינב', 0.0017219907443), ('זינה', 0.002998108885165), ('חגית', 0.000322873264556), ('חוה', 0.002090988760935), ('חיה', 0.008948201903415), ('חלא', 0.000261373595117), ('חלא', 0.003305607232361), ('חן', 0.001091619132547), ('חנה', 0.011577312771944), ('טובה', 0.001322242892944), ('טוהר', 0.005473470580096), ('טל', 0.001937239587337), ('טלי', 0.000599621777033), ('טליה', 0.016620285665965), ('יארא', 0.000169124090958), ('יהב', 0.001091619132547), ('יהודית', 0.004966098307222), ('יהל', 0.001337617810304), ('יהלי', 0.005734844175213), ('יובל', 0.009701572854046), ('יוטא', 0.000538122107594), ('יוכבד', 0.001276118140865), ('יולי', 0.002429236942851), ('ים', 0.000553497024953), ('יסכה', 0.001491366983902), ('יסמין', 0.000261373595117), ('יסמין', 0.001076244215187), ('יסמין', 0.003090358389324), ('יעל', 0.015713165541735), ('יעלה', 0.001291493058225), ('יערה', 0.002890484463646), ('יפה', 0.000691871281192), ('ירדן', 0.004105102935072), ('ירין', 0.000599621777033), ('כליל', 0.000399747851355), ('כנרת', 0.000368998016636), ('כרמל', 0.002752110207408), ('לאה', 0.005903968266171), ('לארא', 0.000122999338879), ('לוטם', 0.00084562045479), ('לור', 0.000122999338879), ('לורן', 0.001337617810304), ('לי', 0.000691871281192), ('ליאה', 0.000953244876309), ('ליאור', 0.002921234298366), ('ליאורה', 0.000538122107594), ('ליאל', 0.004489475869067), ('ליאם', 0.001475992066543), ('ליאן', 0.000169124090958), ('ליאן', 0.000384372933995), ('ליאן', 0.004889223720423), ('ליאן', 0.007010962316078), ('ליב', 0.000322873264556), ('ליבא', 0.00087637028951), ('ליבי', 0.004520225703787), ('ליה', 0.011285189342107), ('ליהי', 0.00167586599222), ('ליהיא', 0.001199243554066), ('ליטל', 0.000445872603435), ('לייה', 0.000907120124229), ('לילי', 0.000983994711028), ('לילך', 0.000476622438154), ('לין', 0.000153749173598), ('לין', 0.000384372933995), ('לין', 0.000691871281192), ('לין', 0.005427345828016), ('לינוי', 0.002075613843576), ('ליעד', 0.000368998016636), ('לירון', 0.000799495702711), ('לירז', 0.000553497024953), ('לירי', 0.001076244215187), ('למאר', 0.001491366983902), ('לנא', 0.000138374256238), ('לנא', 0.001245368306145), ('לני', 0.001429867314463), ('מאור', 0.00081487062007), ('מאורי', 0.000353623099276), ('מאי', 0.003459356405959), ('מאיה', 0.000153749173598), ('מאיה', 0.000245998677757), ('מאיה', 0.017588905459633), ('מור', 0.000522747190234), ('מוריה', 0.00428960194339), ('מיאל', 0.000599621777033), ('מיאר', 0.001383742562384), ('מיטל', 0.000430497686075), ('מייה', 0.000676496363832), ('מיכאלה', 0.0017219907443), ('מיכל', 0.010870066573392), ('מילא', 0.000169124090958), ('מילא', 0.000322873264556), ('מילה', 0.001245368306145), ('מילי', 0.000522747190234), ('מיקה', 0.004996848141941), ('מירא', 0.000138374256238), ('מירא', 0.00173736566166), ('מיראל', 0.000184499008318), ('מיראל', 0.000184499008318), ('מיראל', 0.001506741901262), ('מיריל', 0.000153749173598), ('מישל', 0.000937869958949), ('מיתר', 0.000676496363832), ('מלאק', 0.000169124090958), ('מלאק', 0.000169124090958), ('מלאק', 0.003874479174674), ('מלכה', 0.00513522239818), ('מנוחה', 0.000415122768715), ('מנור', 0.000645746529112), ('מעיין', 0.006503590043204), ('מרגלית', 0.000430497686075), ('מריה', 0.000399747851355), ('מריה', 0.001875739917898), ('מרים', 0.000184499008318), ('מרים', 0.007379960332713), ('מרים', 0.009424824341569), ('משי', 0.000707246198552), ('נאוה', 0.000399747851355), ('נאי', 0.000322873264556), ('נאי', 0.001183868636706), ('נאיא', 0.000184499008318), ('נאיא', 0.001475992066543), ('נאיה', 0.000169124090958), ('נאיה', 0.000322873264556), ('נגה', 0.007825832936148), ('נוי', 0.001399117479744), ('נויה', 0.010639442812995), ('נועה', 0.022216755584939), ('נועם', 0.005365846158577), ('נופר', 0.000645746529112), ('נור', 0.000153749173598), ('נור', 0.000261373595117), ('נור', 0.003720730001076), ('נחמה', 0.003843729339955), ('נטלי', 0.000276748512477), ('נטלי', 0.000553497024953), ('נטע', 0.005350471241217), ('נילי', 0.000722621115912), ('נינה', 0.001106994049907), ('ניצן', 0.001445242231823), ('ניקה', 0.000322873264556), ('ניקול', 0.000753370950631), ('נעמה', 0.005565720084255), ('נעמי', 0.008333205209022), ('סארה', 0.003905229009394), ('סהר', 0.000753370950631), ('סול', 0.00086099537215), ('סופי', 0.000322873264556), ('סופיה', 0.000907120124229), ('סיון', 0.000599621777033), ('סילא', 0.000169124090958), ('סילין', 0.000169124090958), ('סימה', 0.000430497686075), ('סלמא', 0.001460617149183), ('סמא', 0.000199873925678), ('ספיר', 0.001091619132547), ('סתיו', 0.00086099537215), ('עדי', 0.007118586737596), ('עדיה', 0.000553497024953), ('עדינה', 0.000691871281192), ('עדן', 0.001460617149183), ('עדן', 0.003812979505235), ('עומר', 0.0034439814886), ('עופרי', 0.005642594671054), ('עטרה', 0.000599621777033), ('עטרת', 0.000338248181916), ('עידן', 0.000384372933995), ('עלמה', 0.00847157946526), ('עמית', 0.004904598637782), ('עמליה', 0.001183868636706), ('עמנואל', 0.001552866653342), ('ענאל', 0.000322873264556), ('ענבל', 0.000384372933995), ('ענבר', 0.001937239587337), ('ענהאל', 0.002075613843576), ('פאטמה', 0.003305607232361), ('פאר', 0.000430497686075), ('פיגא', 0.001967989422057), ('פלג', 0.000445872603435), ('פנינה', 0.001122368967267), ('פערל', 0.000645746529112), ('פרח', 0.001552866653342), ('פריאל', 0.000691871281192), ('פריידא', 0.000445872603435), ('צביה', 0.00087637028951), ('צופיה', 0.001183868636706), ('צפורה', 0.002413862025492), ('קארין', 0.000399747851355), ('קורל', 0.000753370950631), ('קים', 0.000614996694393), ('קרן', 0.000507372272874), ('קרני', 0.000599621777033), ('ראשית', 0.000322873264556), ('רבקה', 0.009824572192924), ('רהף', 0.002828984794207), ('רוחמה', 0.000507372272874), ('רומי', 0.000722621115912), ('רומי', 0.011669562276103), ('רון', 0.000507372272874), ('רונה', 0.001998739256777), ('רוני', 0.012407558309374), ('רות', 0.008102581448625), ('רותם', 0.002475361694931), ('רז', 0.000753370950631), ('רחל', 0.009501698928368), ('רייזל', 0.000507372272874), ('רים', 0.001199243554066), ('רימא', 0.001060869297828), ('רימאס', 0.001629741240141), ('רינה', 0.000491997355514), ("ריתאג'", 0.001106994049907), ('ריתאל', 0.003643855414277), ('רני', 0.000968619793669), ('רננה', 0.001260743223505), ('רעות', 0.001368367645024), ('רעיה', 0.000338248181916), ('רפיף', 0.001537491735982), ('שאם', 0.000153749173598), ('שאם', 0.006196091696007), ('שהד', 0.002490736612291), ('שובל', 0.000645746529112), ('שוהם', 0.001952614504697), ('שולמית', 0.001829615165818), ('שושנה', 0.002213988099814), ('שחר', 0.004012853430913), ('שטערנא', 0.000353623099276), ('שי', 0.00338248181916), ('שיינא', 0.001168493719346), ('שיינדל', 0.000491997355514), ('שי לי', 0.002044864008856), ('שי-לי', 0.003244107562922), ('שילת', 0.002367737273412), ('שיר', 0.005534970249535), ('שיראל', 0.001921864669977), ('שירה', 0.016266662566689), ('שירי', 0.00087637028951), ('שלי', 0.00089174520687), ('שני', 0.003474731323319), ('שפרה', 0.00083024553743), ('שקד', 0.005488845497455), ('שרה', 0.000245998677757), ('שרה', 0.002167863347735), ('שרה', 0.014944419673744), ('תאיר', 0.00169124090958), ('תאלא', 0.000276748512477), ('תאלא', 0.002705985455328), ('תאלין', 0.002629110868529), ('תבל', 0.000476622438154), ('תהילה', 0.006303716117526), ('תהל', 0.008041081779185), ('תהלה', 0.000415122768715), ('תולין', 0.000322873264556), ('תולין', 0.001491366983902), ('תום', 0.000630371611753), ('תיא', 0.000199873925678), ('תיא', 0.000230623760397), ('תמר', 0.020341015667041), ('תמרה', 0.001060869297828), ('תפארת', 0.00083024553743)))
A:faker.providers.person.he_IL.__init__.first_names_male->OrderedDict((('אביאל', 0.004307179574083), ('אביב', 0.003911766367282), ('אביהו', 0.000395413206801), ('אביחי', 0.000762582613116), ('אבינועם', 0.00043777890753), ('אביעד', 0.001256849121618), ('אבישי', 0.002188894537649), ('אביתר', 0.004603739479184), ('אבראהים', 0.000155340902672), ('אבראהים', 0.004759080381856), ('אברהם', 0.012130712308648), ('אדיר', 0.002400723041292), ('אדם', 0.000225950403886), ('אדם', 0.000607241710445), ('אדם', 0.005846466700559), ('אדם', 0.007569338530193), ('אדר', 0.00107326441846), ('אהרון', 0.006453708411004), ('אוהד', 0.001454555725018), ('אופיר', 0.003756425464611), ('אופק', 0.003007964751737), ('אור', 0.005959441902502), ('אוראל', 0.003064452352709), ('אורון', 0.000466022708016), ('אורי', 0.018640908320624), ('אוריאל', 0.003417499858781), ('אוריה', 0.002598429644693), ('אורין', 0.000522510308987), ('אורן', 0.001143873919675), ('אושר', 0.00238660114105), ('אושרי', 0.001440433824775), ('אחיה', 0.001256849121618), ('אחמד', 0.011918883805005), ('איאן', 0.000381291306558), ('איהאם', 0.001553409026719), ('אייל', 0.003671694063153), ('אילון', 0.001059142518217), ('איליי', 0.001708749929391), ('אילן', 0.000607241710445), ('אימרי', 0.002513698243236), ('איתי', 0.016324916680789), ('איתיאל', 0.00043777890753), ('איתמר', 0.012413150313506), ('איתן', 0.017610009602892), ('אלדר', 0.00043777890753), ('אלון', 0.008247189741852), ('אלחנן', 0.002880867649551), ('אליאב', 0.003149183754166), ('אליאור', 0.00097441111676), ('אליאל', 0.00043777890753), ('אליאס', 0.000381291306558), ('אליה', 0.008614359148167), ('אליהו', 0.005973563802745), ('אלימלך', 0.000960289216517), ('אליעזר', 0.002541942043721), ('אלירז', 0.000367169406315), ('אלירן', 0.00063548551093), ('אלישע', 0.000833192114331), ('אלכס', 0.000649607411173), ('אלכסנדר', 0.000395413206801), ('אלמוג', 0.001779359430605), ('אלעד', 0.001835847031577), ('אלעזר', 0.002414844941535), ('אלקנה', 0.000564876009716), ('אלרואי', 0.003756425464611), ('אלרועי', 0.000564876009716), ('אמיר', 0.000183584703158), ('אמיר', 0.000395413206801), ('אמיר', 0.000946167316274), ('אמיר', 0.004956786985257), ('אמיתי', 0.002739648647122), ('אמרי', 0.001256849121618), ('אניל', 0.000240072304129), ('אסף', 0.003276280856352), ('אפק', 0.000508388408744), ('אפרים', 0.001341580523075), ('אראל', 0.000621363610687), ('ארבל', 0.001398068124047), ('ארד', 0.000790826413602), ('ארז', 0.000367169406315), ('ארז', 0.001299214822347), ('ארי', 0.002330113540078), ('אריאל', 0.01769474100435), ('אריה', 0.002061797435463), ('אשר', 0.00160989662769), ('בארי', 0.003050330452466), ('בועז', 0.001228605321132), ('בן', 0.006637293114161), ('בניה', 0.003488109359995), ('בניהו', 0.000466022708016), ('בנימין', 0.005931198102017), ('בצלאל', 0.000381291306558), ('בר', 0.001793481330848), ('ברוך', 0.001496921425747), ('ברק', 0.00063548551093), ('גבע', 0.000960289216517), ('גבריאל', 0.002118285036435), ("ג'וד", 0.000593119810202), ("ג'וד", 0.001087386318703), ('גוד', 0.002767892447608), ("ג'וד", 0.007004462520477), ("ג'וזף", 0.000324803705587), ("ג'וליאן", 0.000183584703158), ('גור', 0.000691973111902), ("ג'ורג'", 0.000395413206801), ('גיא', 0.008120092639666), ('גיל', 0.000790826413602), ('גילי', 0.000423657007287), ('גל', 0.001680506128905), ('גלעד', 0.001835847031577), ('גפן', 0.000748460712874), ('דב', 0.00107326441846), ('דביר', 0.00302208665198), ('דוד', 0.019770660340055), ('דולב', 0.000790826413602), ('דור', 0.003346890357567), ('דורון', 0.000578997909959), ('דילן', 0.000395413206801), ('דין', 0.000621363610687), ('דן', 0.000155340902672), ('דן', 0.002499576342993), ('דניאל', 0.000296559905101), ('דניאל', 0.01574591877083), ('דרור', 0.00151104332599), ('הדר', 0.001482799525504), ('הילל', 0.001595774727447), ('הלל', 0.005521662994973), ('הראל', 0.009729989267356), ('ורד', 0.000225950403886), ('זאב', 0.000932045416031), ('זוהר', 0.001285092922104), ('זיו', 0.00214652883692), ('זיין', 0.001270971021861), ("ח'אלד", 0.00321979325538), ('חגי', 0.000550754109473), ('חוסין', 0.00141219002429), ('חיים', 0.008713212449867), ('חמזה', 0.001624018527933), ('חנוך', 0.000494266508501), ('חסן', 0.002160650737163), ('טוביה', 0.000550754109473), ('טוהר', 0.000706095012145), ('טום', 0.001214483420889), ('טומי', 0.000593119810202), ('טל', 0.001779359430605), ('יאיר', 0.010831497486302), ('יאמן', 0.001680506128905), ('יאן', 0.000480144608258), ('יאסין', 0.001440433824775), ('יגל', 0.002344235440321), ('ידידיה', 0.002118285036435), ('יהב', 0.003078574252951), ('יהודה', 0.011226910693103), ('יהונתן', 0.015915381573745), ('יהושע', 0.002527820143479), ('יהל', 0.001299214822347), ('יהלי', 0.003233915155623), ('יואב', 0.005620516296673), ('יואל', 0.001680506128905), ('יובל', 0.005027396486471), ('יוגב', 0.00043777890753), ('יוחאי', 0.000578997909959), ('יוחנן', 0.00043777890753), ('יונתן', 0.011198666892617), ('יוסף', 0.000169462802915), ('יוסף', 0.000240072304129), ('יוסף', 0.008995650454725), ('יוסף', 0.016861548890019), ('יותם', 0.002527820143479), ('יזן', 0.001934700333277), ('יחזקאל', 0.00117211772016), ('יחיא', 0.001849968931819), ('יחיאל', 0.00151104332599), ('ינאי', 0.004942665085014), ('ינון', 0.002965599051008), ('יניב', 0.000409535107044), ('יעקב', 0.009532282663955), ('יפתח', 0.000932045416031), ('יצחק', 0.009292210359826), ('יקיר', 0.000494266508501), ('ירדן', 0.001807603231091), ('ירין', 0.002697282946393), ('ישי', 0.005549906795458), ('ישכר', 0.000381291306558), ('ישעיה', 0.000409535107044), ('ישראל', 0.009913573970513), ('יששכר', 0.000395413206801), ('כפיר', 0.001835847031577), ('כרים', 0.00248545444275), ('כריסטיאן', 0.000169462802915), ('כרם', 0.002259504038863), ('כרמל', 0.000649607411173), ('לאון', 0.000494266508501), ('לביא', 0.008600237247924), ('לוי', 0.001694628029148), ('ליאב', 0.001991187934248), ('ליאו', 0.00151104332599), ('ליאור', 0.004264813873355), ('ליאל', 0.001355702423318), ('ליאם', 0.000183584703158), ('ליאם', 0.005634638196916), ('לידור', 0.000946167316274), ('ליית', 0.000211828503643), ('ליעד', 0.001751115630119), ('ליעם', 0.000522510308987), ('לירוי', 0.00312093995368), ('לירון', 0.000593119810202), ('לירן', 0.000578997909959), ('לני', 0.000649607411173), ('מאור', 0.004744958481613), ('מאיר', 0.00570524769813), ("מג'ד", 0.000268316104615), ("מג'ד", 0.002033553634977), ('מוחמד', 0.038552787663108), ('מוסא', 0.001383946223804), ('מוסטפא', 0.002287747839349), ('מחמוד', 0.004688470880642), ('מיכאל', 0.009376941761283), ('מילאן', 0.000169462802915), ('מלאכי', 0.002287747839349), ('מנחם', 0.005210981189629), ('מעיין', 0.002880867649551), ('מרדכי', 0.00550754109473), ('מרום', 0.000494266508501), ('משה', 0.014305484946054), ('מתן', 0.004024741569226), ('מתנאל', 0.000649607411173), ('מתניה', 0.000451900807773), ('נאור', 0.001242727221375), ('נבו', 0.003036208552223), ('נדב', 0.006128904705417), ('נהוראי', 0.00667965881489), ('נוה', 0.003135061853923), ('נועם', 0.019968366943456), ('נח', 0.000466022708016), ('נחמן', 0.002753770547365), ('נטע', 0.001002654917246), ('ניב', 0.00087555781506), ('ניל', 0.000282438004858), ('ניסים', 0.000423657007287), ('ניצן', 0.00043777890753), ('ניר', 0.000946167316274), ('ניתאי', 0.005747613398859), ('נפתלי', 0.001878212732305), ('נריה', 0.002796136248094), ('נתן', 0.004589617578941), ('נתנאל', 0.006425464610518), ('סאלח', 0.001186239620403), ('סארי', 0.000169462802915), ('סהר', 0.001934700333277), ('סולימאן', 0.000282438004858), ('סולימאן', 0.001779359430605), ('סיני', 0.000508388408744), ('סמיר', 0.000155340902672), ('סער', 0.000621363610687), ('סתיו', 0.000466022708016), ('עבד', 0.006623171213919), ('עבדאללה', 0.002005309834491), ('עברי', 0.001369824323561), ('עדי', 0.001426311924533), ('עדיאל', 0.000917923515788), ('עדן', 0.000691973111902), ('עובדיה', 0.001496921425747), ('עוז', 0.002753770547365), ('עומר', 0.007922386036265), ('עומר', 0.009984183471728), ('עומרי', 0.000240072304129), ('עומרי', 0.004857933683556), ('עופר', 0.000663729311416), ('עופרי', 0.00097441111676), ('עידו', 0.01228605321132), ('עידן', 0.004151838671412), ('עילאי', 0.007781167033836), ('עילי', 0.001468677625261), ('עלי', 0.006001807603231), ('עמיחי', 0.001143873919675), ('עמית', 0.00809184883918), ('עמנואל', 0.00097441111676), ('ענבר', 0.000409535107044), ('עקיבא', 0.001101508218946), ('ערן', 0.000381291306558), ('עתי', 0.001482799525504), ('פאר', 0.000649607411173), ('פלג', 0.00160989662769), ('פנחס', 0.001722871829633), ('צבי', 0.002598429644693), ('צור', 0.000847314014574), ('קדם', 0.000889679715302), ('קוסאי', 0.001482799525504), ('קורן', 0.000903801615545), ('ראובן', 0.001242727221375), ('ראם', 0.000225950403886), ('ראם', 0.00151104332599), ('רביד', 0.000395413206801), ('רואי', 0.00117211772016), ('רוי', 0.002203016437892), ('רום', 0.002654917245665), ('רון', 0.002626673445179), ('רוני', 0.000494266508501), ('רועי', 0.005055640286957), ('רותם', 0.001991187934248), ('רז', 0.001440433824775), ('ריאן', 0.000296559905101), ('ריאן', 0.001525165226233), ('ריף', 0.000578997909959), ('רם', 0.000183584703158), ('רן', 0.000621363610687), ('רני', 0.001157995819918), ('רעי', 0.000381291306558), ('רפאל', 0.007710557532622), ('שאול', 0.000804948313845), ('שגב', 0.000508388408744), ('שגיא', 0.001285092922104), ('שוהם', 0.000946167316274), ('שון', 0.001525165226233), ('שחר', 0.003855278766311), ('שי', 0.002541942043721), ('שילה', 0.002824380048579), ('שיר', 0.000480144608258), ('שלו', 0.001468677625261), ('שלום', 0.002880867649551), ('שליו', 0.001751115630119), ('שלמה', 0.007526972829464), ('שמואל', 0.010294865277072), ('שמחה', 0.001299214822347), ('שמעון', 0.007767045133593), ('שניאור', 0.001383946223804), ('שקד', 0.001736993729876), ('שרבל', 0.000508388408744), ('תבור', 0.000409535107044), ('תום', 0.001962944133763), ('תומר', 0.002669039145907), ('תיים', 0.000211828503643), ('תמיר', 0.000720216912388)))
A:faker.providers.person.he_IL.__init__.first_names->OrderedDict((('אביאל', 0.004307179574083), ('אביב', 0.003911766367282), ('אביהו', 0.000395413206801), ('אביחי', 0.000762582613116), ('אבינועם', 0.00043777890753), ('אביעד', 0.001256849121618), ('אבישי', 0.002188894537649), ('אביתר', 0.004603739479184), ('אבראהים', 0.000155340902672), ('אבראהים', 0.004759080381856), ('אברהם', 0.012130712308648), ('אדיר', 0.002400723041292), ('אדם', 0.000225950403886), ('אדם', 0.000607241710445), ('אדם', 0.005846466700559), ('אדם', 0.007569338530193), ('אדר', 0.00107326441846), ('אהרון', 0.006453708411004), ('אוהד', 0.001454555725018), ('אופיר', 0.003756425464611), ('אופק', 0.003007964751737), ('אור', 0.005959441902502), ('אוראל', 0.003064452352709), ('אורון', 0.000466022708016), ('אורי', 0.018640908320624), ('אוריאל', 0.003417499858781), ('אוריה', 0.002598429644693), ('אורין', 0.000522510308987), ('אורן', 0.001143873919675), ('אושר', 0.00238660114105), ('אושרי', 0.001440433824775), ('אחיה', 0.001256849121618), ('אחמד', 0.011918883805005), ('איאן', 0.000381291306558), ('איהאם', 0.001553409026719), ('אייל', 0.003671694063153), ('אילון', 0.001059142518217), ('איליי', 0.001708749929391), ('אילן', 0.000607241710445), ('אימרי', 0.002513698243236), ('איתי', 0.016324916680789), ('איתיאל', 0.00043777890753), ('איתמר', 0.012413150313506), ('איתן', 0.017610009602892), ('אלדר', 0.00043777890753), ('אלון', 0.008247189741852), ('אלחנן', 0.002880867649551), ('אליאב', 0.003149183754166), ('אליאור', 0.00097441111676), ('אליאל', 0.00043777890753), ('אליאס', 0.000381291306558), ('אליה', 0.008614359148167), ('אליהו', 0.005973563802745), ('אלימלך', 0.000960289216517), ('אליעזר', 0.002541942043721), ('אלירז', 0.000367169406315), ('אלירן', 0.00063548551093), ('אלישע', 0.000833192114331), ('אלכס', 0.000649607411173), ('אלכסנדר', 0.000395413206801), ('אלמוג', 0.001779359430605), ('אלעד', 0.001835847031577), ('אלעזר', 0.002414844941535), ('אלקנה', 0.000564876009716), ('אלרואי', 0.003756425464611), ('אלרועי', 0.000564876009716), ('אמיר', 0.000183584703158), ('אמיר', 0.000395413206801), ('אמיר', 0.000946167316274), ('אמיר', 0.004956786985257), ('אמיתי', 0.002739648647122), ('אמרי', 0.001256849121618), ('אניל', 0.000240072304129), ('אסף', 0.003276280856352), ('אפק', 0.000508388408744), ('אפרים', 0.001341580523075), ('אראל', 0.000621363610687), ('ארבל', 0.001398068124047), ('ארד', 0.000790826413602), ('ארז', 0.000367169406315), ('ארז', 0.001299214822347), ('ארי', 0.002330113540078), ('אריאל', 0.01769474100435), ('אריה', 0.002061797435463), ('אשר', 0.00160989662769), ('בארי', 0.003050330452466), ('בועז', 0.001228605321132), ('בן', 0.006637293114161), ('בניה', 0.003488109359995), ('בניהו', 0.000466022708016), ('בנימין', 0.005931198102017), ('בצלאל', 0.000381291306558), ('בר', 0.001793481330848), ('ברוך', 0.001496921425747), ('ברק', 0.00063548551093), ('גבע', 0.000960289216517), ('גבריאל', 0.002118285036435), ("ג'וד", 0.000593119810202), ("ג'וד", 0.001087386318703), ('גוד', 0.002767892447608), ("ג'וד", 0.007004462520477), ("ג'וזף", 0.000324803705587), ("ג'וליאן", 0.000183584703158), ('גור', 0.000691973111902), ("ג'ורג'", 0.000395413206801), ('גיא', 0.008120092639666), ('גיל', 0.000790826413602), ('גילי', 0.000423657007287), ('גל', 0.001680506128905), ('גלעד', 0.001835847031577), ('גפן', 0.000748460712874), ('דב', 0.00107326441846), ('דביר', 0.00302208665198), ('דוד', 0.019770660340055), ('דולב', 0.000790826413602), ('דור', 0.003346890357567), ('דורון', 0.000578997909959), ('דילן', 0.000395413206801), ('דין', 0.000621363610687), ('דן', 0.000155340902672), ('דן', 0.002499576342993), ('דניאל', 0.000296559905101), ('דניאל', 0.01574591877083), ('דרור', 0.00151104332599), ('הדר', 0.001482799525504), ('הילל', 0.001595774727447), ('הלל', 0.005521662994973), ('הראל', 0.009729989267356), ('ורד', 0.000225950403886), ('זאב', 0.000932045416031), ('זוהר', 0.001285092922104), ('זיו', 0.00214652883692), ('זיין', 0.001270971021861), ("ח'אלד", 0.00321979325538), ('חגי', 0.000550754109473), ('חוסין', 0.00141219002429), ('חיים', 0.008713212449867), ('חמזה', 0.001624018527933), ('חנוך', 0.000494266508501), ('חסן', 0.002160650737163), ('טוביה', 0.000550754109473), ('טוהר', 0.000706095012145), ('טום', 0.001214483420889), ('טומי', 0.000593119810202), ('טל', 0.001779359430605), ('יאיר', 0.010831497486302), ('יאמן', 0.001680506128905), ('יאן', 0.000480144608258), ('יאסין', 0.001440433824775), ('יגל', 0.002344235440321), ('ידידיה', 0.002118285036435), ('יהב', 0.003078574252951), ('יהודה', 0.011226910693103), ('יהונתן', 0.015915381573745), ('יהושע', 0.002527820143479), ('יהל', 0.001299214822347), ('יהלי', 0.003233915155623), ('יואב', 0.005620516296673), ('יואל', 0.001680506128905), ('יובל', 0.005027396486471), ('יוגב', 0.00043777890753), ('יוחאי', 0.000578997909959), ('יוחנן', 0.00043777890753), ('יונתן', 0.011198666892617), ('יוסף', 0.000169462802915), ('יוסף', 0.000240072304129), ('יוסף', 0.008995650454725), ('יוסף', 0.016861548890019), ('יותם', 0.002527820143479), ('יזן', 0.001934700333277), ('יחזקאל', 0.00117211772016), ('יחיא', 0.001849968931819), ('יחיאל', 0.00151104332599), ('ינאי', 0.004942665085014), ('ינון', 0.002965599051008), ('יניב', 0.000409535107044), ('יעקב', 0.009532282663955), ('יפתח', 0.000932045416031), ('יצחק', 0.009292210359826), ('יקיר', 0.000494266508501), ('ירדן', 0.001807603231091), ('ירין', 0.002697282946393), ('ישי', 0.005549906795458), ('ישכר', 0.000381291306558), ('ישעיה', 0.000409535107044), ('ישראל', 0.009913573970513), ('יששכר', 0.000395413206801), ('כפיר', 0.001835847031577), ('כרים', 0.00248545444275), ('כריסטיאן', 0.000169462802915), ('כרם', 0.002259504038863), ('כרמל', 0.000649607411173), ('לאון', 0.000494266508501), ('לביא', 0.008600237247924), ('לוי', 0.001694628029148), ('ליאב', 0.001991187934248), ('ליאו', 0.00151104332599), ('ליאור', 0.004264813873355), ('ליאל', 0.001355702423318), ('ליאם', 0.000183584703158), ('ליאם', 0.005634638196916), ('לידור', 0.000946167316274), ('ליית', 0.000211828503643), ('ליעד', 0.001751115630119), ('ליעם', 0.000522510308987), ('לירוי', 0.00312093995368), ('לירון', 0.000593119810202), ('לירן', 0.000578997909959), ('לני', 0.000649607411173), ('מאור', 0.004744958481613), ('מאיר', 0.00570524769813), ("מג'ד", 0.000268316104615), ("מג'ד", 0.002033553634977), ('מוחמד', 0.038552787663108), ('מוסא', 0.001383946223804), ('מוסטפא', 0.002287747839349), ('מחמוד', 0.004688470880642), ('מיכאל', 0.009376941761283), ('מילאן', 0.000169462802915), ('מלאכי', 0.002287747839349), ('מנחם', 0.005210981189629), ('מעיין', 0.002880867649551), ('מרדכי', 0.00550754109473), ('מרום', 0.000494266508501), ('משה', 0.014305484946054), ('מתן', 0.004024741569226), ('מתנאל', 0.000649607411173), ('מתניה', 0.000451900807773), ('נאור', 0.001242727221375), ('נבו', 0.003036208552223), ('נדב', 0.006128904705417), ('נהוראי', 0.00667965881489), ('נוה', 0.003135061853923), ('נועם', 0.019968366943456), ('נח', 0.000466022708016), ('נחמן', 0.002753770547365), ('נטע', 0.001002654917246), ('ניב', 0.00087555781506), ('ניל', 0.000282438004858), ('ניסים', 0.000423657007287), ('ניצן', 0.00043777890753), ('ניר', 0.000946167316274), ('ניתאי', 0.005747613398859), ('נפתלי', 0.001878212732305), ('נריה', 0.002796136248094), ('נתן', 0.004589617578941), ('נתנאל', 0.006425464610518), ('סאלח', 0.001186239620403), ('סארי', 0.000169462802915), ('סהר', 0.001934700333277), ('סולימאן', 0.000282438004858), ('סולימאן', 0.001779359430605), ('סיני', 0.000508388408744), ('סמיר', 0.000155340902672), ('סער', 0.000621363610687), ('סתיו', 0.000466022708016), ('עבד', 0.006623171213919), ('עבדאללה', 0.002005309834491), ('עברי', 0.001369824323561), ('עדי', 0.001426311924533), ('עדיאל', 0.000917923515788), ('עדן', 0.000691973111902), ('עובדיה', 0.001496921425747), ('עוז', 0.002753770547365), ('עומר', 0.007922386036265), ('עומר', 0.009984183471728), ('עומרי', 0.000240072304129), ('עומרי', 0.004857933683556), ('עופר', 0.000663729311416), ('עופרי', 0.00097441111676), ('עידו', 0.01228605321132), ('עידן', 0.004151838671412), ('עילאי', 0.007781167033836), ('עילי', 0.001468677625261), ('עלי', 0.006001807603231), ('עמיחי', 0.001143873919675), ('עמית', 0.00809184883918), ('עמנואל', 0.00097441111676), ('ענבר', 0.000409535107044), ('עקיבא', 0.001101508218946), ('ערן', 0.000381291306558), ('עתי', 0.001482799525504), ('פאר', 0.000649607411173), ('פלג', 0.00160989662769), ('פנחס', 0.001722871829633), ('צבי', 0.002598429644693), ('צור', 0.000847314014574), ('קדם', 0.000889679715302), ('קוסאי', 0.001482799525504), ('קורן', 0.000903801615545), ('ראובן', 0.001242727221375), ('ראם', 0.000225950403886), ('ראם', 0.00151104332599), ('רביד', 0.000395413206801), ('רואי', 0.00117211772016), ('רוי', 0.002203016437892), ('רום', 0.002654917245665), ('רון', 0.002626673445179), ('רוני', 0.000494266508501), ('רועי', 0.005055640286957), ('רותם', 0.001991187934248), ('רז', 0.001440433824775), ('ריאן', 0.000296559905101), ('ריאן', 0.001525165226233), ('ריף', 0.000578997909959), ('רם', 0.000183584703158), ('רן', 0.000621363610687), ('רני', 0.001157995819918), ('רעי', 0.000381291306558), ('רפאל', 0.007710557532622), ('שאול', 0.000804948313845), ('שגב', 0.000508388408744), ('שגיא', 0.001285092922104), ('שוהם', 0.000946167316274), ('שון', 0.001525165226233), ('שחר', 0.003855278766311), ('שי', 0.002541942043721), ('שילה', 0.002824380048579), ('שיר', 0.000480144608258), ('שלו', 0.001468677625261), ('שלום', 0.002880867649551), ('שליו', 0.001751115630119), ('שלמה', 0.007526972829464), ('שמואל', 0.010294865277072), ('שמחה', 0.001299214822347), ('שמעון', 0.007767045133593), ('שניאור', 0.001383946223804), ('שקד', 0.001736993729876), ('שרבל', 0.000508388408744), ('תבור', 0.000409535107044), ('תום', 0.001962944133763), ('תומר', 0.002669039145907), ('תיים', 0.000211828503643), ('תמיר', 0.000720216912388))).copy()
A:faker.providers.person.he_IL.__init__.last_names->OrderedDict((("אבו אל היג'א", 0.0004185954), ('אבוטבול', 0.0003645757), ('אבו טיר', 0.000347025), ('אבו כף', 0.000575184), ('אבו ליל', 0.0005678902), ('אבו מוך', 0.0003430362), ('אבו סאלח', 0.0004113016), ('אבו סנינה', 0.0003522675), ('אבו עראר', 0.0005006506), ('אבו ראס', 0.0003642338), ('אבו ריא', 0.0002835462), ('אבו רמילה', 0.0003918135), ('אביב', 0.0003988794), ('אביטבול', 0.0004328411), ('אביטל', 0.0004519873), ('אביטן', 0.0005171756), ('אבני', 0.0003463412), ('אבראהים', 0.0006235054), ('אברגל', 0.0003034902), ('אברהם', 0.0021808444), ('אברהמי', 0.0004725011), ('אברמוב', 0.0008053944), ('אברמוביץ', 0.0004369438), ('אגבאריה', 0.0020710956), ('אדלר', 0.000552277), ('אדרי', 0.0013994967), ('אהרון', 0.0005232157), ('אהרוני', 0.000694278), ('אהרן', 0.0005895437), ('אוזן', 0.0004632699), ('אוחיון', 0.0016352914), ('אוחנה', 0.0012190893), ('אופיר', 0.0003285626), ('אור', 0.000274543), ('אורן', 0.0006651028), ('אזברגה', 0.0004979154), ('אזולאי', 0.0019325135), ('אחמד', 0.0003112399), ('אטיאס', 0.0010128117), ('אטרש', 0.0003216107), ('איבגי', 0.0003057695), ('איוב', 0.0003391614), ('אילוז', 0.000462928), ('איסקוב', 0.0003056556), ('איפרגן', 0.0003224085), ('אלבז', 0.0010615889), ('אלון', 0.0009669975), ('אלוני', 0.0003267392), ('אלוש', 0.0002914099), ('אלטורי', 0.0002840021), ('אליאס', 0.0005734745), ('אליהו', 0.0010782279), ('אלימלך', 0.0004399069), ('אלמוג', 0.0003135192), ('אלמלח', 0.0003681087), ('אלנבארי', 0.0002708961), ('אלסייד', 0.0003250297), ('אלפסי', 0.0005746142), ('אלקובי', 0.000403324), ('אלקיים', 0.0004139228), ('אלקרינאוי', 0.0003684506), ('אמארה', 0.0004154044), ('אמיר', 0.0003546607), ('אמסלם', 0.0008538297), ('אמר', 0.000287535), ('אנגל', 0.0003220666), ('אסדי', 0.0003464552), ('אסולין', 0.0009318961), ('אסעד', 0.0002932333), ('אסרף', 0.0006086899), ('אפשטיין', 0.0003689064), ('ארביב', 0.0004209887), ('ארז', 0.0003954604), ('ארליך', 0.00027101), ('אשכנזי', 0.001233335), ('אשר', 0.0004242937), ('בדארנה', 0.0004214445), ('בדיר', 0.0002950568), ('בדר', 0.0002760245), ('בדראן', 0.0003989933), ('בוזגלו', 0.0004477706), ('בוחבוט', 0.000360473), ('בוסקילה', 0.0004288523), ('ביטון', 0.0030260127), ('בכר', 0.0010549789), ('בלום', 0.0003422385), ('בן דוד', 0.0014205803), ('בן הרוש', 0.0003634361), ('בן חיים', 0.0004988271), ('בן חמו', 0.0009408994), ('בן יוסף', 0.0003320956), ('בן לולו', 0.0003196733), ('בן משה', 0.0004303338), ('בן סימון', 0.0004376276), ('בן עזרא', 0.0003485066), ('בן עמי', 0.0004467449), ('בן שבת', 0.0002754547), ('בן שושן', 0.0006107413), ('בנימין', 0.0006523387), ('בסול', 0.0002932333), ('בצלאל', 0.0003156845), ('בקר', 0.0003121516), ('בר', 0.0011435301), ('בראון', 0.000376998), ('ברגר', 0.0005738164), ('ברדה', 0.0003977397), ('ברוך', 0.0008745715), ('ברזילי', 0.0003418966), ('ברכה', 0.000499283), ('ברמן', 0.0003711857), ('ברנס', 0.0002786457), ('ברנשטיין', 0.0004130111), ('ברק', 0.0006729665), ('ברקוביץ', 0.0006409421), ('בשארה', 0.000373465), ('בשיר', 0.0002883328), ('גאבר', 0.0005383732), ('גאנם', 0.0005768935), ('גבאי', 0.0016158033), ('גבארה', 0.0002936892), ("ג'בארין", 0.00165968), ('גבע', 0.0002820647), ('גדיר', 0.0004091363), ('גואטה', 0.0005055511), ('גוטליב', 0.0004181395), ('גוטמן', 0.000591937), ('גולאני', 0.0002900423), ('גולדברג', 0.000816563), ('גולדמן', 0.0005264068), ('גולדנברג', 0.0004056033), ('גולדשטיין', 0.0008946294), ('גולן', 0.0011855834), ('גור', 0.0003531792), ('גורדון', 0.0002858255), ('גורן', 0.0003817845), ('גיל', 0.0002803552), ('גל', 0.0006617978), ('גליק', 0.0003310699), ('גלעד', 0.0002821787), ('גמליאל', 0.0003642338), ('גנאים', 0.0005610523), ('גרבאן', 0.0003214968), ('גרוס', 0.0006403723), ('גרוסמן', 0.000380075), ('גרין', 0.0003725533), ('גרינברג', 0.0009478513), ('דאוד', 0.000307479), ('דביר', 0.0004175697), ('דבש', 0.0002795574), ('דגן', 0.0005030438), ('דדון', 0.0007198063), ('דהאן', 0.0003006411), ('דהן', 0.0022558337), ('דהרי', 0.0002755687), ('דוד', 0.0016551214), ('דוידוב', 0.0007180968), ('דויטש', 0.0003989933), ('דורון', 0.000317394), ('דיאב', 0.0004985992), ('דיין', 0.0010681989), ('דמרי', 0.0003776818), ('דניאל', 0.0007061304), ('דנינו', 0.0004338668), ('דקל', 0.000340529), ('דראושה', 0.0005869225), ('דרור', 0.0004386533), ('דרורי', 0.0003034902), ('דרעי', 0.0005292559), ('הדר', 0.0003775678), ('הופמן', 0.00038338), ('הורביץ', 0.0002907261), ('הורוביץ', 0.000390104), ('הייב', 0.0005921649), ('הירש', 0.0003818985), ('הלוי', 0.0005028159), ('הלל', 0.0003923833), ('הראל', 0.0007852225), ('הרוש', 0.0006835652), ('הררי', 0.000492559), ('הרשקוביץ', 0.0006489197), ('וולף', 0.0003986514), ('ווקנין', 0.0003724394), ('וייס', 0.0008692151), ('וינברג', 0.0003423525), ('וינר', 0.0003119237), ('ויס', 0.0003285626), ('ויסמן', 0.0002757966), ('ויצמן', 0.0005245833), ('וקנין', 0.0009326939), ('ותד', 0.0003587635), ('זגורי', 0.0003629802), ('זהבי', 0.0004176837), ('זהר', 0.0003346028), ('זוהר', 0.0005770075), ('זועבי', 0.0012752743), ('זידאן', 0.0005832756), ('זיו', 0.0005641294), ('זילברמן', 0.0004159742), ('זינגר', 0.0003651456), ('זכריה', 0.0003278788), ('זמיר', 0.0003829242), ("חאג'", 0.0003408709), ("חאג' יחיא", 0.0003617266), ('חאג יחיא', 0.0003882806), ('חביב', 0.0004484544), ('חביבאללה', 0.0004379695), ("חג'אזי", 0.000548972), ('חדאד', 0.0005056651), ('חדד', 0.0016215016), ("חוג'יראת", 0.0005729047), ('חוסין', 0.0003514697), ('חורי', 0.0005095399), ("ח'ורי", 0.0005477183), ('חזן', 0.001256242), ('חטיב', 0.0003936369), ("ח'טיב", 0.0015462843), ('חי', 0.0003430362), ('חיון', 0.0006327366), ('חיים', 0.0007797522), ('חיימוב', 0.0004451494), ("ח'לאילה", 0.000456204), ('חלבי', 0.0007260744), ("ח'ליל", 0.0003452016), ('חלפון', 0.0003063393), ('חמדאן', 0.0004278266), ('חמו', 0.0004457192), ('חמוד', 0.000367083), ('חן', 0.0013292939), ('חסון', 0.0007411178), ('חסן', 0.0008594141), ('טאהא', 0.0008251104), ('טוויל', 0.0003101002), ('טויטו', 0.0004448075), ('טולדנו', 0.0003334631), ('טייב', 0.0002708961), ('טל', 0.0013330548), ('יאסין', 0.0006589487), ('יהודה', 0.0006080061), ('יונה', 0.0004435538), ('יונס', 0.0004857211), ('יוסופוב', 0.0004702218), ('יוסף', 0.0018478371), ('יחזקאל', 0.0006923406), ('יחיא', 0.0003449737), ('ימין', 0.0002870792), ('יעקב', 0.0011190275), ('יעקבי', 0.0004216725), ('יעקובוב', 0.0005550121), ('יעקובוביץ', 0.0002968802), ('יעקובי', 0.0003576238), ('יפה', 0.0003034902), ('יפרח', 0.0008173608), ('יפת', 0.0003267392), ('יצחק', 0.0011618786), ('יצחקי', 0.0007125125), ('ירושלמי', 0.000274315), ('ישראל', 0.0007288096), ('ישראלי', 0.0007002042), ('כהן', 0.019334822), ('כהנא', 0.0003551166), ('כחלון', 0.0004289663), ('כספי', 0.0003211549), ('כץ', 0.0018738212), ('כרמי', 0.0003342609), ('לב', 0.0007200342), ('לביא', 0.0010139513), ('להב', 0.000357054), ('לוגסי', 0.0005278883), ('לוי', 0.0111999624), ('לוין', 0.0013806924), ('ליבוביץ', 0.0005249252), ('ליברמן', 0.0005201387), ('ליפשיץ', 0.0005541004), ('לנדאו', 0.0003262833), ('לרנר', 0.0003750606), ('מאור', 0.0003620685), ('מאיר', 0.0009089891), ('מדר', 0.0003455435), ('מוזס', 0.0003091885), ('מויאל', 0.0005749561), ('מוסא', 0.0004717033), ('מוסקוביץ', 0.0003259414), ('מועלם', 0.0005220761), ('מור', 0.0011423905), ('מוראד', 0.0002749988), ('מושקוביץ', 0.0003134052), ('מזור', 0.000333805), ('מזרחי', 0.0033303007), ("מחאג'נה", 0.0012883803), ('מחאמיד', 0.0018262976), ('מחמוד', 0.0002998433), ('מטר', 0.0003922694), ('מיכאלי', 0.0005314213), ('מילר', 0.0006881239), ('מימון', 0.000928933), ('מכלוף', 0.0003361983), ('מלול', 0.0006253289), ('מלכה', 0.001934223), ('מלמד', 0.0004647514), ('ממן', 0.0009764567), ('מנדל', 0.0002873071), ('מנחם', 0.0004933568), ('מנסור', 0.000819868), ('מנצור', 0.0003814426), ('מנשה', 0.0004680564), ('מסארוה', 0.0008443706), ('מסארווה', 0.0002802412), ('מסיקה', 0.0003017807), ('מסרי', 0.0005342704), ('מרגלית', 0.0002824066), ('מרדכי', 0.0004645235), ('מרום', 0.0003129493), ('מרעי', 0.0005625339), ('מרציאנו', 0.0003146588), ('מרקוביץ', 0.0004444656), ('משה', 0.0012522532), ('משולם', 0.0003482787), ('משיח', 0.0003645757), ('נאור', 0.0003116957), ('נאסר', 0.0005325609), ('נבון', 0.0002796714), ('נגר', 0.0006358137), ('נוימן', 0.0003699321), ('נחום', 0.0010065436), ('נחמיאס', 0.000363778), ('נחמני', 0.0004122133), ('ניסן', 0.0002992735), ('ניר', 0.0003601311), ('נסאר', 0.0006750178), ('נסים', 0.0005396268), ('נעים', 0.000697583), ('נתן', 0.0003872549), ('נתשה', 0.0003447457), ('סאלח', 0.0005592289), ('סאלם', 0.0002705542), ('סבאג', 0.0002772781), ('סבג', 0.0008170189), ('סבח', 0.0002966523), ('סבן', 0.0004323852), ('סגל', 0.0012155563), ('סואעד', 0.0012098581), ('סויסה', 0.0010544091), ('סולומון', 0.000661114), ('סופר', 0.0007159315), ('סימן טוב', 0.0002800133), ('סיני', 0.0002869652), ('סלאמה', 0.0008069899), ('סלומון', 0.0004725011), ('סלימאן', 0.0006335344), ('סלמאן', 0.00028423), ('סלע', 0.0006118809), ('סעד', 0.0004322713), ('סעדה', 0.0003199012), ('סעדי', 0.0004304478), ('סעיד', 0.0005107935), ('ספיר', 0.0004119854), ('סרוסי', 0.0003727812), ('סרור', 0.0003260554), ('סרחאן', 0.0004681704), ('סרסור', 0.0002731754), ('עאזם', 0.0003548887), ('עאמר', 0.0005807683), ('עאסלה', 0.0004797949), ('עבאס', 0.0005121611), ('עבאסי', 0.0003230923), ('עבדאללה', 0.0004449214), ('עבד אל קאדר', 0.0002770502), ('עבוד', 0.0003461133), ('עדוי', 0.0003625244), ('עואד', 0.0005034997), ('עואודה', 0.0003056556), ('עובד', 0.000310784), ('עובדיה', 0.000948877), ('עודה', 0.0006648749), ('עווד', 0.0002817228), ('עוז', 0.0003095304), ('עוזרי', 0.0003601311), ('עומר', 0.0004549504), ('עזאם', 0.0003739209), ('עזר', 0.0002926635), ('עזרא', 0.000836621), ('עזרן', 0.0003022366), ('עטיה', 0.0005034997), ('עיסא', 0.0006968992), ('עלי', 0.0005897716), ('עליאן', 0.0004195071), ('עמאש', 0.0007673299), ('עמירה', 0.0002892445), ('עמית', 0.0002748849), ('עמר', 0.0016504488), ('עמרם', 0.0003889644), ('עתאמנה', 0.0002793295), ('פאר', 0.000396828), ('פדידה', 0.0003054276), ('פוגל', 0.0002887887), ('פולק', 0.0004996249), ('פוקס', 0.0005276604), ('פורמן', 0.000281039), ('פורת', 0.0004169999), ('פז', 0.0004270288), ('פחימה', 0.0003316397), ('פינטו', 0.0004175697), ('פינקלשטיין', 0.0002802412), ('פישמן', 0.0003597892), ('פישר', 0.0005738164), ('פלג', 0.0005474904), ('פלד', 0.0006111971), ('פלדמן', 0.0009019232), ('פנחס', 0.0004459471), ('פרי', 0.0004665749), ('פריד', 0.0004208747), ('פרידמן', 0.0021022082), ('פרנקל', 0.0005776913), ('פרץ', 0.0032042548), ('פרקש', 0.0002779619), ('צברי', 0.0004600788), ('צדוק', 0.0005442994), ('צור', 0.0007644808), ('צמח', 0.0003528373), ('צרפתי', 0.0006094877), ('קאופמן', 0.0004456052), ('קאסם', 0.0004601928), ('קדוש', 0.0008008358), ('קוגן', 0.0005499976), ('קורן', 0.000740434), ('קינן', 0.0003089606), ('קליין', 0.0013318012), ('קמחי', 0.0003147728), ('קפלן', 0.0006849328), ('קרמר', 0.000350444), ('קרן', 0.0004678285), ('ראובן', 0.0005415642), ('רביבו', 0.0004157463), ('רבינוביץ', 0.0007378128), ('רגב', 0.0003989933), ('רובין', 0.0008423192), ('רובינשטיין', 0.0004026402), ('רוזן', 0.0006486918), ('רוזנברג', 0.0010279691), ('רוזנטל', 0.0004416164), ('רוזנפלד', 0.0005364357), ('רוט', 0.0005014483), ('רוטמן', 0.0003188756), ('רוטנברג', 0.0003187616), ('רון', 0.0003961442), ('רונן', 0.0003698181), ('רז', 0.0007521725), ('רזניק', 0.0003017807), ('רחמים', 0.0006912009), ('ריאן', 0.0003526093), ('רפאל', 0.000271238), ('שאהין', 0.0004059452), ('שאול', 0.0004735268), ('שביט', 0.0003130633), ('שבתאי', 0.0003979676), ('שגב', 0.0004646375), ('שגיא', 0.0003531792), ('שדה', 0.0004417304), ('שוויקי', 0.0005047533), ('שוורץ', 0.0007591244), ('שולמן', 0.0002952847), ('שוקרון', 0.0005164918), ('שור', 0.0003898761), ('שורץ', 0.0009575384), ('שושן', 0.000684363), ('שחאדה', 0.0007848806), ('שחר', 0.0009679092), ('שטיין', 0.0004781994), ('שטיינברג', 0.0003252576), ('שטרית', 0.0005996866), ('שטרן', 0.0009997056), ('שי', 0.000320699), ('שיבלי', 0.00031728), ('שיטרית', 0.0004501638), ('שכטר', 0.0005425899), ('שלבי', 0.0003711857), ('שלו', 0.0005757539), ('שלום', 0.0011007931), ('שלמה', 0.000426459), ('שם טוב', 0.0004130111), ('שמואל', 0.0006326227), ('שמואלי', 0.0004719313), ('שמיר', 0.0004115295), ('שמעון', 0.0003597892), ('שמעוני', 0.0005021321), ('שמש', 0.0010336674), ('שני', 0.0004502778), ('שניידר', 0.0004392232), ('שפירא', 0.0013031958), ('שפר', 0.0003430362), ('שקד', 0.000486063), ('שרביט', 0.0003365402), ('שרון', 0.0007520585), ('שריקי', 0.0003716416), ('שרעבי', 0.0010047201), ('שרף', 0.0003082768), ('ששון', 0.0009562848), ("תורג'מן", 0.0004513035), ('תורגמן', 0.0005209364), ('תמיר', 0.0002928914)))
faker.providers.person.he_IL.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/no_NO/__init__.py----------------------------------------
faker.providers.person.no_NO.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/zh_CN/__init__.py----------------------------------------
A:faker.providers.person.zh_CN.__init__.last_names->OrderedDict((('王', 7.17), ('李', 7.0), ('张', 6.74), ('刘', 5.1), ('陈', 4.61), ('杨', 3.22), ('黄', 2.45), ('吴', 2.0), ('赵', 2.0), ('周', 1.9), ('徐', 1.45), ('孙', 1.38), ('马', 1.29), ('朱', 1.28), ('胡', 1.16), ('林', 1.13), ('郭', 1.13), ('何', 1.06), ('高', 1.0), ('罗', 0.95), ('郑', 0.93), ('梁', 0.85), ('谢', 0.76), ('宋', 0.7), ('唐', 0.69), ('许', 0.66), ('邓', 0.62), ('冯', 0.62), ('韩', 0.61), ('曹', 0.6), ('曾', 0.58), ('彭', 0.58), ('萧', 0.56), ('蔡', 0.53), ('潘', 0.52), ('田', 0.52), ('董', 0.51), ('袁', 0.5), ('于', 0.48), ('余', 0.48), ('叶', 0.48), ('蒋', 0.48), ('杜', 0.47), ('苏', 0.46), ('魏', 0.45), ('程', 0.45), ('吕', 0.45), ('丁', 0.43), ('沈', 0.41), ('任', 0.41), ('姚', 0.4), ('卢', 0.4), ('傅', 0.4), ('钟', 0.4), ('姜', 0.39), ('崔', 0.38), ('谭', 0.38), ('廖', 0.37), ('范', 0.36), ('汪', 0.36), ('陆', 0.36), ('金', 0.35), ('石', 0.34), ('戴', 0.34), ('贾', 0.33), ('韦', 0.32), ('夏', 0.32), ('邱', 0.32), ('方', 0.31), ('侯', 0.3), ('邹', 0.3), ('熊', 0.29), ('孟', 0.29), ('秦', 0.29), ('白', 0.28), ('江', 0.28), ('阎', 0.27), ('薛', 0.26), ('尹', 0.26), ('段', 0.24), ('雷', 0.24), ('黎', 0.22), ('史', 0.21), ('龙', 0.21), ('陶', 0.21), ('贺', 0.21), ('顾', 0.2), ('毛', 0.2), ('郝', 0.2), ('龚', 0.2), ('邵', 0.2), ('万', 0.19), ('钱', 0.19), ('严', 0.19), ('赖', 0.18), ('覃', 0.18), ('洪', 0.18), ('武', 0.18), ('莫', 0.18), ('孔', 0.17), ('汤', 0.17), ('向', 0.17), ('常', 0.16), ('温', 0.16), ('康', 0.16), ('施', 0.15), ('文', 0.15), ('牛', 0.15), ('樊', 0.15), ('葛', 0.15), ('邢', 0.14), ('安', 0.13), ('齐', 0.13), ('易', 0.13), ('乔', 0.13), ('伍', 0.13), ('庞', 0.13), ('颜', 0.12), ('倪', 0.12), ('庄', 0.12), ('聂', 0.12), ('章', 0.12), ('鲁', 0.11), ('岳', 0.11), ('翟', 0.11), ('殷', 0.11), ('詹', 0.11), ('申', 0.11), ('欧', 0.11), ('耿', 0.11), ('关', 0.1), ('兰', 0.1), ('焦', 0.1), ('俞', 0.1), ('左', 0.1), ('柳', 0.1), ('甘', 0.095), ('祝', 0.09), ('包', 0.087), ('宁', 0.083), ('尚', 0.082), ('符', 0.082), ('舒', 0.082), ('阮', 0.082), ('柯', 0.08), ('纪', 0.08), ('梅', 0.079), ('童', 0.079), ('凌', 0.078), ('毕', 0.078), ('单', 0.076), ('季', 0.076), ('裴', 0.076), ('霍', 0.075), ('涂', 0.075), ('成', 0.075), ('苗', 0.075), ('谷', 0.075), ('盛', 0.074), ('曲', 0.074), ('翁', 0.073), ('冉', 0.073), ('骆', 0.073), ('蓝', 0.072), ('路', 0.072), ('游', 0.071), ('辛', 0.07), ('靳', 0.069), ('欧阳', 0.068), ('管', 0.065), ('柴', 0.065), ('蒙', 0.062), ('鲍', 0.062), ('华', 0.061), ('喻', 0.061), ('祁', 0.061), ('蒲', 0.056), ('房', 0.056), ('滕', 0.055), ('屈', 0.055), ('饶', 0.055), ('解', 0.053), ('牟', 0.053), ('艾', 0.052), ('尤', 0.052), ('阳', 0.05), ('时', 0.05), ('穆', 0.048), ('农', 0.047), ('司', 0.044), ('卓', 0.043), ('古', 0.043), ('吉', 0.043), ('缪', 0.043), ('简', 0.043), ('车', 0.043), ('项', 0.043), ('连', 0.043), ('芦', 0.042), ('麦', 0.041), ('褚', 0.041), ('娄', 0.04), ('窦', 0.04), ('戚', 0.04), ('岑', 0.039), ('景', 0.039), ('党', 0.039), ('宫', 0.039), ('费', 0.039), ('卜', 0.038), ('冷', 0.038), ('晏', 0.038), ('席', 0.036), ('卫', 0.036), ('米', 0.035), ('柏', 0.035), ('宗', 0.034), ('瞿', 0.033), ('桂', 0.033), ('全', 0.033), ('佟', 0.033), ('应', 0.033), ('臧', 0.032), ('闵', 0.032), ('苟', 0.032), ('邬', 0.032), ('边', 0.032), ('卞', 0.032), ('姬', 0.032), ('师', 0.031), ('和', 0.031), ('仇', 0.03), ('栾', 0.03), ('隋', 0.03), ('商', 0.03), ('刁', 0.03), ('沙', 0.03), ('荣', 0.029), ('巫', 0.029), ('寇', 0.029), ('桑', 0.028), ('郎', 0.028), ('甄', 0.027), ('丛', 0.027), ('仲', 0.027), ('虞', 0.026), ('敖', 0.026), ('巩', 0.026), ('明', 0.026), ('佘', 0.025), ('池', 0.025), ('查', 0.025), ('麻', 0.025), ('苑', 0.025), ('迟', 0.024), ('邝', 0.024), ('官', 0.023), ('封', 0.023), ('谈', 0.023), ('匡', 0.023), ('鞠', 0.23), ('惠', 0.022), ('荆', 0.022), ('乐', 0.022), ('冀', 0.021), ('郁', 0.021), ('胥', 0.021), ('南', 0.021), ('班', 0.021), ('储', 0.021), ('原', 0.02), ('栗', 0.02), ('燕', 0.02), ('楚', 0.02), ('鄢', 0.02), ('劳', 0.019), ('谌', 0.019), ('奚', 0.017), ('皮', 0.017), ('粟', 0.017), ('冼', 0.017), ('蔺', 0.017), ('楼', 0.017), ('盘', 0.017), ('满', 0.016), ('闻', 0.016), ('位', 0.016), ('厉', 0.016), ('伊', 0.016), ('仝', 0.015), ('区', 0.015), ('郜', 0.015), ('海', 0.015), ('阚', 0.015), ('花', 0.015), ('权', 0.014), ('强', 0.014), ('帅', 0.014), ('屠', 0.014), ('豆', 0.014), ('朴', 0.014), ('盖', 0.014), ('练', 0.014), ('廉', 0.014), ('禹', 0.014), ('井', 0.013), ('祖', 0.013), ('漆', 0.013), ('巴', 0.013), ('丰', 0.013), ('支', 0.013), ('卿', 0.013), ('国', 0.013), ('狄', 0.013), ('平', 0.013), ('计', 0.012), ('索', 0.012), ('宣', 0.012), ('晋', 0.012), ('相', 0.012), ('初', 0.012), ('门', 0.012), ('云', 0.012), ('容', 0.012), ('敬', 0.011), ('来', 0.011), ('扈', 0.011), ('晁', 0.011), ('芮', 0.011), ('都', 0.011), ('普', 0.011), ('阙', 0.011), ('浦', 0.011), ('戈', 0.011), ('伏', 0.011), ('鹿', 0.011), ('薄', 0.011), ('邸', 0.011), ('雍', 0.01), ('辜', 0.01), ('羊', 0.01), ('阿', 0.01), ('乌', 0.01), ('母', 0.01), ('裘', 0.01), ('亓', 0.01), ('修', 0.01), ('邰', 0.01), ('赫', 0.01), ('杭', 0.01), ('况', 0.0094), ('那', 0.0093), ('宿', 0.0093), ('鲜', 0.0092), ('印', 0.0091), ('逯', 0.0091), ('隆', 0.009), ('茹', 0.009), ('诸', 0.0089), ('战', 0.0088), ('慕', 0.0086), ('危', 0.0084), ('玉', 0.0084), ('银', 0.0084), ('亢', 0.0083), ('嵇', 0.0082), ('公', 0.0082), ('哈', 0.0081), ('湛', 0.0079), ('宾', 0.0077), ('戎', 0.0076), ('勾', 0.0076), ('茅', 0.0076), ('利', 0.0076), ('于', 0.0074), ('呼', 0.0074), ('居', 0.0074), ('揭', 0.0073), ('干', 0.0072), ('但', 0.0072), ('尉', 0.0071), ('冶', 0.0071), ('斯', 0.007), ('元', 0.0069), ('束', 0.0068), ('檀', 0.0068), ('衣', 0.0067), ('信', 0.0067), ('展', 0.0067), ('阴', 0.0067), ('昝', 0.0066), ('智', 0.0065), ('幸', 0.0065), ('奉', 0.0064), ('植', 0.0064), ('衡', 0.0063), ('富', 0.0063), ('尧', 0.006), ('闭', 0.006), ('由', 0.006)))
A:faker.providers.person.zh_CN.__init__.pattern->self.random_element(self.romanized_formats)
faker.providers.person.zh_CN.__init__.Provider(PersonProvider)
faker.providers.person.zh_CN.__init__.Provider.first_romanized_name(self)
faker.providers.person.zh_CN.__init__.Provider.last_romanized_name(self)
faker.providers.person.zh_CN.__init__.Provider.romanized_name(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/bg_BG/__init__.py----------------------------------------
faker.providers.person.bg_BG.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/es_ES/__init__.py----------------------------------------
faker.providers.person.es_ES.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/hi_IN/__init__.py----------------------------------------
faker.providers.person.hi_IN.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/pt_PT/__init__.py----------------------------------------
faker.providers.person.pt_PT.__init__.Provider(PersonProvider)
faker.providers.person.pt_PT.__init__.Provider.prefix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/dk_DK/__init__.py----------------------------------------
faker.providers.person.dk_DK.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/ar_AA/__init__.py----------------------------------------
faker.providers.person.ar_AA.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/uk_UA/__init__.py----------------------------------------
A:faker.providers.person.uk_UA.__init__.formats_female->OrderedDict((('{{first_name_female}} {{last_name}}', 0.9), ('{{prefix_female}} {{first_name_female}} {{last_name}}', 0.1)))
A:faker.providers.person.uk_UA.__init__.formats_male->OrderedDict((('{{first_name_male}} {{last_name}}', 0.9), ('{{prefix_male}} {{first_name_male}} {{last_name}}', 0.1)))
A:faker.providers.person.uk_UA.__init__.formats->OrderedDict((('{{first_name_female}} {{last_name}}', 0.9), ('{{prefix_female}} {{first_name_female}} {{last_name}}', 0.1))).copy()
faker.providers.person.uk_UA.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/sl_SI/__init__.py----------------------------------------
faker.providers.person.sl_SI.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/fr_FR/__init__.py----------------------------------------
faker.providers.person.fr_FR.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/es_MX/__init__.py----------------------------------------
faker.providers.person.es_MX.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/lv_LV/__init__.py----------------------------------------
faker.providers.person.lv_LV.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/en/__init__.py----------------------------------------
faker.providers.person.en.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/ar_SA/__init__.py----------------------------------------
faker.providers.person.ar_SA.__init__.Provider(ArabicPersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/hy_AM/__init__.py----------------------------------------
faker.providers.person.hy_AM.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/fa_IR/__init__.py----------------------------------------
faker.providers.person.fa_IR.__init__.Provider(PersonProvider)
faker.providers.person.fa_IR.__init__.Provider.suffix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/ka_GE/__init__.py----------------------------------------
faker.providers.person.ka_GE.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/ko_KR/__init__.py----------------------------------------
A:faker.providers.person.ko_KR.__init__.formats_female->OrderedDict((('{{last_name}}{{first_name_female}}', 1.0),))
A:faker.providers.person.ko_KR.__init__.formats_male->OrderedDict((('{{last_name}}{{first_name_male}}', 1.0),))
A:faker.providers.person.ko_KR.__init__.formats->OrderedDict((('{{last_name}}{{first_name_male}}', 1.0),)).copy()
A:faker.providers.person.ko_KR.__init__.first_names_female->OrderedDict((('경숙', 1), ('경자', 1), ('경희', 1), ('명숙', 1), ('명자', 1), ('미경', 1), ('미숙', 1), ('미영', 1), ('미정', 1), ('민서', 1), ('민지', 1), ('보람', 1), ('서연', 1), ('서영', 1), ('서윤', 1), ('서현', 1), ('선영', 1), ('수민', 1), ('수빈', 1), ('수진', 1), ('숙자', 1), ('순옥', 1), ('순자', 1), ('아름', 1), ('영미', 1), ('영숙', 1), ('영순', 1), ('영자', 1), ('영희', 1), ('예원', 1), ('예은', 1), ('예지', 1), ('예진', 1), ('옥순', 1), ('옥자', 1), ('유진', 1), ('윤서', 1), ('은경', 1), ('은서', 1), ('은영', 1), ('은정', 1), ('은주', 1), ('은지', 1), ('정숙', 1), ('정순', 1), ('정자', 1), ('정희', 1), ('지민', 1), ('지아', 1), ('지연', 1), ('지영', 1), ('지우', 1), ('지원', 1), ('지은', 1), ('지현', 1), ('지혜', 1), ('채원', 1), ('춘자', 1), ('하윤', 1), ('하은', 1), ('현숙', 1), ('현정', 1), ('현주', 1), ('현지', 1), ('혜진', 1)))
A:faker.providers.person.ko_KR.__init__.first_names_male->OrderedDict((('건우', 1), ('경수', 1), ('광수', 1), ('도윤', 1), ('도현', 1), ('동현', 1), ('민석', 1), ('민수', 1), ('민재', 1), ('민준', 1), ('병철', 1), ('상철', 1), ('상현', 1), ('상호', 1), ('상훈', 1), ('서준', 1), ('성민', 1), ('성수', 1), ('성진', 1), ('성현', 1), ('성호', 1), ('성훈', 1), ('승민', 1), ('승현', 1), ('시우', 1), ('영길', 1), ('영수', 1), ('영식', 1), ('영일', 1), ('영진', 1), ('영철', 1), ('영호', 1), ('영환', 1), ('예준', 1), ('우진', 1), ('재현', 1), ('재호', 1), ('정남', 1), ('정수', 1), ('정식', 1), ('정웅', 1), ('정호', 1), ('정훈', 1), ('종수', 1), ('주원', 1), ('준서', 1), ('준영', 1), ('준혁', 1), ('준호', 1), ('중수', 1), ('지후', 1), ('지훈', 1), ('진우', 1), ('진호', 1), ('현우', 1), ('현준', 1)))
A:faker.providers.person.ko_KR.__init__.first_names->OrderedDict((('건우', 1), ('경수', 1), ('광수', 1), ('도윤', 1), ('도현', 1), ('동현', 1), ('민석', 1), ('민수', 1), ('민재', 1), ('민준', 1), ('병철', 1), ('상철', 1), ('상현', 1), ('상호', 1), ('상훈', 1), ('서준', 1), ('성민', 1), ('성수', 1), ('성진', 1), ('성현', 1), ('성호', 1), ('성훈', 1), ('승민', 1), ('승현', 1), ('시우', 1), ('영길', 1), ('영수', 1), ('영식', 1), ('영일', 1), ('영진', 1), ('영철', 1), ('영호', 1), ('영환', 1), ('예준', 1), ('우진', 1), ('재현', 1), ('재호', 1), ('정남', 1), ('정수', 1), ('정식', 1), ('정웅', 1), ('정호', 1), ('정훈', 1), ('종수', 1), ('주원', 1), ('준서', 1), ('준영', 1), ('준혁', 1), ('준호', 1), ('중수', 1), ('지후', 1), ('지훈', 1), ('진우', 1), ('진호', 1), ('현우', 1), ('현준', 1))).copy()
A:faker.providers.person.ko_KR.__init__.last_names->OrderedDict((('김', 0.10689), ('이', 0.07307), ('박', 0.04192), ('정', 0.02333), ('최', 0.02151), ('조', 0.01176), ('강', 0.01055), ('윤', 0.0102), ('장', 0.00992), ('임', 0.00823), ('한', 0.00773), ('오', 0.00763), ('서', 0.00751), ('신', 0.00741), ('권', 0.00705), ('황', 0.00697), ('안', 0.00685), ('송', 0.00683), ('류', 0.00642), ('전', 0.00559), ('홍', 0.00558), ('고', 0.00471), ('문', 0.00464), ('양', 0.0046), ('손', 0.00457), ('배', 0.004), ('조', 0.00398), ('백', 0.00381), ('허', 0.00326), ('유', 0.00302), ('남', 0.00275), ('심', 0.00271), ('노', 0.00256), ('정', 0.00243), ('하', 0.0023), ('곽', 0.00203), ('성', 0.00199), ('차', 0.00194), ('주', 0.00194), ('우', 0.00194), ('구', 0.00193), ('신', 0.00192), ('임', 0.00191), ('나', 0.00186), ('전', 0.00186), ('민', 0.00171), ('유', 0.00167), ('진', 0.00159), ('지', 0.00153), ('엄', 0.00144)))
faker.providers.person.ko_KR.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/nl_NL/__init__.py----------------------------------------
faker.providers.person.nl_NL.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/cs_CZ/__init__.py----------------------------------------
A:faker.providers.person.cs_CZ.__init__.formats_female->OrderedDict((('{{first_name_female}} {{last_name_female}}', 0.97), ('{{prefix_female}} {{first_name_female}} {{last_name_female}}', 0.015), ('{{first_name_female}} {{last_name_female}} {{suffix}}', 0.02), ('{{prefix_female}} {{first_name_female}} {{last_name_female}} {{suffix}}', 0.005)))
A:faker.providers.person.cs_CZ.__init__.formats_male->OrderedDict((('{{first_name_male}} {{last_name_male}}', 0.97), ('{{prefix_male}} {{first_name_male}} {{last_name_male}}', 0.015), ('{{first_name_male}} {{last_name_male}} {{suffix}}', 0.02), ('{{prefix_male}} {{first_name_male}} {{last_name_male}} {{suffix}}', 0.005)))
A:faker.providers.person.cs_CZ.__init__.formats->OrderedDict((('{{first_name_male}} {{last_name_male}}', 0.97), ('{{prefix_male}} {{first_name_male}} {{last_name_male}}', 0.015), ('{{first_name_male}} {{last_name_male}} {{suffix}}', 0.02), ('{{prefix_male}} {{first_name_male}} {{last_name_male}} {{suffix}}', 0.005))).copy()
faker.providers.person.cs_CZ.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/tw_GH/__init__.py----------------------------------------
faker.providers.person.tw_GH.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/tr_TR/__init__.py----------------------------------------
faker.providers.person.tr_TR.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/en_US/__init__.py----------------------------------------
A:faker.providers.person.en_US.__init__.formats_female->OrderedDict((('{{first_name_female}} {{last_name}}', 0.97), ('{{prefix_female}} {{first_name_female}} {{last_name}}', 0.015), ('{{first_name_female}} {{last_name}} {{suffix_female}}', 0.02), ('{{prefix_female}} {{first_name_female}} {{last_name}} {{suffix_female}}', 0.005)))
A:faker.providers.person.en_US.__init__.formats_male->OrderedDict((('{{first_name_male}} {{last_name}}', 0.97), ('{{prefix_male}} {{first_name_male}} {{last_name}}', 0.015), ('{{first_name_male}} {{last_name}} {{suffix_male}}', 0.02), ('{{prefix_male}} {{first_name_male}} {{last_name}} {{suffix_male}}', 0.005)))
A:faker.providers.person.en_US.__init__.formats->OrderedDict((('{{first_name_male}} {{last_name}}', 0.97), ('{{prefix_male}} {{first_name_male}} {{last_name}}', 0.015), ('{{first_name_male}} {{last_name}} {{suffix_male}}', 0.02), ('{{prefix_male}} {{first_name_male}} {{last_name}} {{suffix_male}}', 0.005))).copy()
A:faker.providers.person.en_US.__init__.first_names_female->OrderedDict((('April', 0.004529083), ('Abigail', 0.002043839), ('Adriana', 0.000488767), ('Adrienne', 0.000622931), ('Aimee', 0.000424727), ('Alejandra', 0.000415754), ('Alexa', 0.000663005), ('Alexandra', 0.002835711), ('Alexandria', 0.000964993), ('Alexis', 0.003446735), ('Alice', 0.000589904), ('Alicia', 0.003766845), ('Alisha', 0.000475942), ('Alison', 0.001506047), ('Allison', 0.003740866), ('Alyssa', 0.00324341), ('Amanda', 0.015360768), ('Amber', 0.006928794), ('Amy', 0.012860314), ('Ana', 0.000853679), ('Andrea', 0.006747028), ('Angel', 0.001161117), ('Angela', 0.011954085), ('Angelica', 0.001102746), ('Angie', 0.00030166), ('Anita', 0.001383767), ('Ann', 0.002627483), ('Anna', 0.004691502), ('Anne', 0.002089582), ('Annette', 0.001487399), ('Ariana', 0.000412668), ('Ariel', 0.000615774), ('Ashlee', 0.000696534), ('Ashley', 0.014773009), ('Audrey', 0.001139165), ('Autumn', 0.000918594), ('Bailey', 0.000691916), ('Barbara', 0.004839169), ('Becky', 0.000960944), ('Belinda', 0.000502227), ('Beth', 0.002246113), ('Bethany', 0.001249385), ('Betty', 0.000840241), ('Beverly', 0.000990272), ('Bianca', 0.000624835), ('Bonnie', 0.001351901), ('Brandi', 0.002077216), ('Brandy', 0.002177499), ('Breanna', 0.000876003), ('Brenda', 0.005737124), ('Briana', 0.00093665), ('Brianna', 0.002543549), ('Bridget', 0.000787232), ('Brittany', 0.007258404), ('Brittney', 0.001566147), ('Brooke', 0.002410152), ('Caitlin', 0.001808319), ('Caitlyn', 0.000481194), ('Candace', 0.000550662), ('Candice', 0.000653199), ('Carla', 0.00195185), ('Carly', 0.000498725), ('Carmen', 0.000891783), ('Carol', 0.002972719), ('Caroline', 0.001198127), ('Carolyn', 0.002647225), ('Carrie', 0.002934659), ('Casey', 0.001177707), ('Cassandra', 0.002501243), ('Cassidy', 0.000452129), ('Cassie', 0.000344886), ('Catherine', 0.004460622), ('Cathy', 0.001413248), ('Charlene', 0.000538865), ('Charlotte', 0.000530417), ('Chelsea', 0.00280043), ('Chelsey', 0.000368501), ('Cheryl', 0.004166447), ('Cheyenne', 0.000696907), ('Chloe', 0.000565807), ('Christie', 0.000397873), ('Christina', 0.008735669), ('Christine', 0.007488758), ('Christy', 0.00141861), ('Cindy', 0.003360109), ('Claire', 0.000553835), ('Claudia', 0.00096055), ('Colleen', 0.001836203), ('Connie', 0.001821845), ('Courtney', 0.00484939), ('Cristina', 0.000328734), ('Crystal', 0.006365045), ('Cynthia', 0.007655379), ('Daisy', 0.000437443), ('Dana', 0.003395805), ('Danielle', 0.006671783), ('Darlene', 0.000952737), ('Dawn', 0.005014983), ('Deanna', 0.002049026), ('Debbie', 0.001842922), ('Deborah', 0.005386088), ('Debra', 0.004123572), ('Denise', 0.004592291), ('Desiree', 0.000991497), ('Destiny', 0.001055515), ('Diamond', 0.000331732), ('Diana', 0.003699348), ('Diane', 0.003058996), ('Dominique', 0.000847857), ('Donna', 0.00570819), ('Doris', 0.000398026), ('Dorothy', 0.000722426), ('Ebony', 0.000399624), ('Eileen', 0.000544271), ('Elaine', 0.000601175), ('Elizabeth', 0.014954075), ('Ellen', 0.000747267), ('Emily', 0.009100581), ('Emma', 0.001272059), ('Erica', 0.004344471), ('Erika', 0.002105537), ('Erin', 0.005450719), ('Evelyn', 0.000825095), ('Faith', 0.000427113), ('Felicia', 0.001717294), ('Frances', 0.000546897), ('Gabriela', 0.000526937), ('Gabriella', 0.00044123), ('Gabrielle', 0.001090096), ('Gail', 0.00071934), ('Gina', 0.002841095), ('Glenda', 0.000384982), ('Gloria', 0.001155623), ('Grace', 0.00087202), ('Gwendolyn', 0.000407831), ('Hailey', 0.000662917), ('Haley', 0.001557939), ('Hannah', 0.004189822), ('Hayley', 0.000478305), ('Heather', 0.010945254), ('Heidi', 0.002239941), ('Helen', 0.000636675), ('Holly', 0.003487028), ('Isabel', 0.000352305), ('Isabella', 0.000410282), ('Jackie', 0.000566748), ('Jaclyn', 0.00047708), ('Jacqueline', 0.004811242), ('Jade', 0.000446264), ('Jaime', 0.000853175), ('Jamie', 0.005067663), ('Jane', 0.0009486), ('Janet', 0.002489993), ('Janice', 0.001593308), ('Jasmin', 0.000333374), ('Jasmine', 0.003025422), ('Jean', 0.000815969), ('Jeanette', 0.000767293), ('Jeanne', 0.000515381), ('Jenna', 0.001804052), ('Jennifer', 0.029218839), ('Jenny', 0.000932667), ('Jessica', 0.020047608), ('Jill', 0.003253018), ('Jillian', 0.000988587), ('Jo', 0.000442083), ('Joan', 0.000802793), ('Joann', 0.000544336), ('Joanna', 0.001176284), ('Joanne', 0.000729824), ('Jocelyn', 0.000456878), ('Jodi', 0.001252405), ('Jody', 0.000741861), ('Jordan', 0.001653057), ('Joy', 0.000916515), ('Joyce', 0.001009488), ('Judith', 0.000870706), ('Judy', 0.001101586), ('Julia', 0.003301891), ('Julie', 0.008211731), ('Kaitlin', 0.000674473), ('Kaitlyn', 0.001478623), ('Kara', 0.001549119), ('Karen', 0.009643845), ('Kari', 0.000794323), ('Karina', 0.000494764), ('Karla', 0.000387696), ('Katelyn', 0.001476128), ('Katherine', 0.006581479), ('Kathleen', 0.00503549), ('Kathryn', 0.004177806), ('Kathy', 0.002710214), ('Katie', 0.003056216), ('Katrina', 0.001565446), ('Kayla', 0.004621465), ('Kaylee', 0.000551734), ('Kelli', 0.000932163), ('Kellie', 0.000299187), ('Kelly', 0.009342929), ('Kelsey', 0.002470383), ('Kendra', 0.001401079), ('Kerri', 0.000316215), ('Kerry', 0.000352984), ('Kiara', 0.000390037), ('Kim', 0.002518642), ('Kimberly', 0.015594077), ('Kirsten', 0.000369486), ('Krista', 0.001266872), ('Kristen', 0.004345587), ('Kristi', 0.001022926), ('Kristie', 0.000380189), ('Kristin', 0.003613728), ('Kristina', 0.002316281), ('Kristine', 0.000977709), ('Kristy', 0.001097734), ('Krystal', 0.001238113), ('Kylie', 0.00049739), ('Lacey', 0.00045469), ('Latasha', 0.00032904), ('Latoya', 0.000646371), ('Laura', 0.010815096), ('Lauren', 0.007015421), ('Laurie', 0.002200786), ('Leah', 0.001997571), ('Leslie', 0.003606134), ('Linda', 0.006437751), ('Lindsay', 0.002185466), ('Lindsey', 0.002646153), ('Lisa', 0.01872729), ('Loretta', 0.000482945), ('Lori', 0.006040316), ('Lorraine', 0.000486753), ('Lydia', 0.000370274), ('Lynn', 0.001522308), ('Mackenzie', 0.000761056), ('Madeline', 0.000808921), ('Madison', 0.002011184), ('Makayla', 0.000439391), ('Mallory', 0.000688633), ('Mandy', 0.000355566), ('Marcia', 0.000403213), ('Margaret', 0.003839968), ('Maria', 0.006593123), ('Mariah', 0.00097598), ('Marie', 0.001520229), ('Marilyn', 0.000590889), ('Marisa', 0.000339983), ('Marissa', 0.001582627), ('Martha', 0.001290028), ('Mary', 0.014288466), ('Maureen', 0.000753855), ('Mckenzie', 0.000334512), ('Meagan', 0.000729999), ('Megan', 0.007686786), ('Meghan', 0.001481578), ('Melanie', 0.003400117), ('Melinda', 0.002078113), ('Melissa', 0.014890692), ('Melody', 0.000404264), ('Mercedes', 0.000334643), ('Meredith', 0.000766987), ('Mia', 0.000319935), ('Michaela', 0.000506998), ('Michele', 0.003519551), ('Michelle', 0.01527423), ('Mikayla', 0.000410195), ('Mindy', 0.000306891), ('Miranda', 0.001421193), ('Misty', 0.001564614), ('Molly', 0.001710641), ('Monica', 0.004324095), ('Monique', 0.001272125), ('Morgan', 0.002527025), ('Nancy', 0.005023343), ('Natalie', 0.003658398), ('Natasha', 0.001739815), ('Nichole', 0.001001237), ('Nicole', 0.011156655), ('Nina', 0.000298115), ('Norma', 0.000470754), ('Olivia', 0.001967609), ('Paige', 0.001106313), ('Pam', 0.000374454), ('Pamela', 0.005816222), ('Patricia', 0.008349353), ('Patty', 0.000383493), ('Paula', 0.002478284), ('Peggy', 0.000810606), ('Penny', 0.000836564), ('Phyllis', 0.000562437), ('Priscilla', 0.000350226), ('Rachael', 0.001098128), ('Rachel', 0.00876108), ('Raven', 0.000404855), ('Rebecca', 0.010563161), ('Rebekah', 0.000858581), ('Regina', 0.001941739), ('Renee', 0.00257883), ('Rhonda', 0.002879221), ('Rita', 0.000719187), ('Roberta', 0.000461715), ('Robin', 0.00409199), ('Robyn', 0.00032138), ('Rose', 0.000697125), ('Ruth', 0.001041946), ('Sabrina', 0.001920969), ('Sally', 0.000532912), ('Samantha', 0.008186124), ('Sandra', 0.006473426), ('Sandy', 0.000497106), ('Sara', 0.005619879), ('Sarah', 0.014434273), ('Savannah', 0.000978344), ('Selena', 0.000329106), ('Shannon', 0.005952552), ('Shari', 0.000449043), ('Sharon', 0.004796469), ('Shawna', 0.000354209), ('Sheena', 0.000355763), ('Sheila', 0.00220129), ('Shelby', 0.001575601), ('Shelia', 0.000403673), ('Shelley', 0.000922227), ('Shelly', 0.001339469), ('Sheri', 0.000913166), ('Sherri', 0.001285038), ('Sherry', 0.002445235), ('Sheryl', 0.00057025), ('Shirley', 0.000833259), ('Sierra', 0.000954816), ('Sonia', 0.000332739), ('Sonya', 0.000914085), ('Sophia', 0.000535976), ('Stacey', 0.002836761), ('Stacie', 0.0003903), ('Stacy', 0.00311717), ('Stefanie', 0.00034644), ('Stephanie', 0.013595762), ('Sue', 0.000472877), ('Summer', 0.000411508), ('Susan', 0.0088973), ('Suzanne', 0.001943577), ('Sydney', 0.001220101), ('Sylvia', 0.000625798), ('Tabitha', 0.000428404), ('Tamara', 0.00212948), ('Tami', 0.000403651), ('Tammie', 0.00042337), ('Tammy', 0.006493584), ('Tanya', 0.002039024), ('Tara', 0.00316834), ('Tasha', 0.000355807), ('Taylor', 0.003996871), ('Teresa', 0.005060003), ('Terri', 0.001823903), ('Terry', 0.00060494), ('Theresa', 0.003492762), ('Tiffany', 0.006594283), ('Tina', 0.005186419), ('Toni', 0.000891695), ('Tonya', 0.002404133), ('Tracey', 0.001511146), ('Traci', 0.00086193), ('Tracie', 0.000301901), ('Tracy', 0.00498572), ('Tricia', 0.000449196), ('Valerie', 0.003218022), ('Vanessa', 0.003779189), ('Veronica', 0.003017805), ('Vicki', 0.00088653), ('Vickie', 0.000695199), ('Victoria', 0.005237677), ('Virginia', 0.001496482), ('Wanda', 0.001336186), ('Wendy', 0.004058263), ('Whitney', 0.001690768), ('Yesenia', 0.000331951), ('Yolanda', 0.001213819), ('Yvette', 0.000483427), ('Yvonne', 0.001005483), ('Zoe', 0.000367407)))
A:faker.providers.person.en_US.__init__.first_names_male->OrderedDict((('Aaron', 0.006741589), ('Adam', 0.007124922), ('Adrian', 0.001521889), ('Alan', 0.002344657), ('Albert', 0.001316595), ('Alec', 0.000442958), ('Alejandro', 0.000862489), ('Alex', 0.002111833), ('Alexander', 0.005215733), ('Alexis', 0.000277915), ('Alfred', 0.000318919), ('Allen', 0.001679613), ('Alvin', 0.00024794), ('Andre', 0.001400621), ('Andres', 0.000335574), ('Andrew', 0.013475074), ('Angel', 0.000902262), ('Anthony', 0.013783357), ('Antonio', 0.002392535), ('Arthur', 0.001342637), ('Austin', 0.003785615), ('Barry', 0.001102751), ('Benjamin', 0.006535474), ('Bernard', 0.000298691), ('Bill', 0.000430013), ('Billy', 0.001749806), ('Blake', 0.001218155), ('Bob', 0.000235731), ('Bobby', 0.001666977), ('Brad', 0.000984544), ('Bradley', 0.003845018), ('Brady', 0.000277522), ('Brandon', 0.009518346), ('Brendan', 0.000736758), ('Brent', 0.001889131), ('Brett', 0.002248371), ('Brian', 0.01597677), ('Bruce', 0.001883335), ('Bryan', 0.00456454), ('Bryce', 0.000457406), ('Caleb', 0.001485861), ('Calvin', 0.001168738), ('Cameron', 0.00180755), ('Carl', 0.002011802), ('Carlos', 0.00266638), ('Casey', 0.001440035), ('Cesar', 0.000304898), ('Chad', 0.003858817), ('Charles', 0.010889881), ('Chase', 0.000971942), ('Chris', 0.001389507), ('Christian', 0.003097779), ('Christopher', 0.02783596), ('Clarence', 0.000299289), ('Clayton', 0.000662222), ('Clifford', 0.00053078), ('Clinton', 0.000579307), ('Cody', 0.00353482), ('Cole', 0.000578811), ('Colin', 0.00078508), ('Collin', 0.000406057), ('Colton', 0.000520845), ('Connor', 0.000981073), ('Corey', 0.002476612), ('Cory', 0.001813005), ('Craig', 0.00338161), ('Cristian', 0.000333847), ('Curtis', 0.002140235), ('Dakota', 0.000797614), ('Dale', 0.001171354), ('Dalton', 0.000615113), ('Damon', 0.00034308), ('Dan', 0.000388496), ('Daniel', 0.018881874), ('Danny', 0.001873879), ('Darin', 0.000234962), ('Darius', 0.000336189), ('Darrell', 0.001218582), ('Darren', 0.001253738), ('Darryl', 0.00067019), ('Daryl', 0.000260918), ('Dave', 0.000269673), ('David', 0.031073833), ('Dean', 0.000965375), ('Dennis', 0.003318992), ('Derek', 0.003095299), ('Derrick', 0.001955921), ('Devin', 0.001312474), ('Devon', 0.000485877), ('Dillon', 0.000558361), ('Dominic', 0.000438221), ('Don', 0.000378322), ('Donald', 0.005689572), ('Douglas', 0.004513687), ('Drew', 0.000596868), ('Duane', 0.00061855), ('Dustin', 0.003088938), ('Dwayne', 0.000711382), ('Dylan', 0.002329096), ('Earl', 0.000348347), ('Eddie', 0.0007944), ('Edgar', 0.000379536), ('Eduardo', 0.000465358), ('Edward', 0.005702242), ('Edwin', 0.001117833), ('Elijah', 0.000592183), ('Eric', 0.012024659), ('Erik', 0.001997096), ('Ernest', 0.000746556), ('Ethan', 0.001143978), ('Eugene', 0.000784243), ('Evan', 0.001570691), ('Fernando', 0.000557608), ('Francis', 0.000330837), ('Francisco', 0.001084335), ('Frank', 0.003276449), ('Franklin', 0.000237561), ('Fred', 0.000396618), ('Frederick', 0.001104188), ('Gabriel', 0.001906504), ('Garrett', 0.001124861), ('Gary', 0.005023109), ('Gavin', 0.000295373), ('Gene', 0.00023426), ('Geoffrey', 0.000425978), ('George', 0.004423984), ('Gerald', 0.00165841), ('Gilbert', 0.000246726), ('Glen', 0.000374338), ('Glenn', 0.001111421), ('Gordon', 0.00027075), ('Grant', 0.00068322), ('Greg', 0.000623492), ('Gregg', 0.000235885), ('Gregory', 0.007676443), ('Guy', 0.000262645), ('Harold', 0.000929467), ('Harry', 0.000586934), ('Hayden', 0.000279454), ('Hector', 0.000798691), ('Henry', 0.001856232), ('Herbert', 0.000234226), ('Howard', 0.000712921), ('Hunter', 0.001034679), ('Ian', 0.001863192), ('Isaac', 0.001001951), ('Isaiah', 0.000625441), ('Ivan', 0.000350433), ('Jack', 0.001839748), ('Jackson', 0.000403253), ('Jacob', 0.007845384), ('Jaime', 0.000421378), ('Jake', 0.000565782), ('James', 0.029601617), ('Jamie', 0.00093552), ('Jared', 0.002538802), ('Jason', 0.01520513), ('Javier', 0.000625202), ('Jay', 0.001411462), ('Jeff', 0.001271436), ('Jeffery', 0.002627873), ('Jeffrey', 0.01225709), ('Jeremiah', 0.001209605), ('Jeremy', 0.006336079), ('Jermaine', 0.000450156), ('Jerome', 0.000634299), ('Jerry', 0.003150273), ('Jesse', 0.003884552), ('Jesus', 0.001628965), ('Jim', 0.000567714), ('Jimmy', 0.001607489), ('Joe', 0.001621544), ('Joel', 0.002537742), ('John', 0.028683008), ('Johnathan', 0.000840448), ('Johnny', 0.002117065), ('Jon', 0.001561184), ('Jonathan', 0.009963971), ('Jonathon', 0.000701157), ('Jordan', 0.003451546), ('Jorge', 0.001180553), ('Jose', 0.005368207), ('Joseph', 0.018604763), ('Joshua', 0.014808101), ('Juan', 0.003233598), ('Julian', 0.000693736), ('Justin', 0.010197889), ('Karl', 0.000362437), ('Keith', 0.004622866), ('Kelly', 0.000775283), ('Kenneth', 0.008318145), ('Kent', 0.000329418), ('Kerry', 0.000261448), ('Kevin', 0.014324157), ('Kirk', 0.0003801), ('Kristopher', 0.000580692), ('Kurt', 0.000716375), ('Kyle', 0.006350049), ('Lance', 0.001048495), ('Larry', 0.003658807), ('Lawrence', 0.001670294), ('Lee', 0.001223883), ('Leon', 0.000236347), ('Leonard', 0.000756713), ('Leroy', 0.000260234), ('Leslie', 0.000234637), ('Levi', 0.000347184), ('Logan', 0.001325812), ('Lonnie', 0.000258576), ('Louis', 0.001212255), ('Lucas', 0.001098237), ('Luis', 0.002427777), ('Luke', 0.001221455), ('Malik', 0.000306813), ('Manuel', 0.001331369), ('Marc', 0.001431947), ('Marco', 0.000290586), ('Marcus', 0.002604122), ('Mario', 0.001229337), ('Mark', 0.014382277), ('Martin', 0.002085226), ('Marvin', 0.000732962), ('Mason', 0.000562037), ('Mathew', 0.000605555), ('Matthew', 0.020425018), ('Maurice', 0.000777078), ('Max', 0.000311276), ('Maxwell', 0.000357478), ('Melvin', 0.00061932), ('Michael', 0.045602241), ('Micheal', 0.001273847), ('Miguel', 0.001416267), ('Mike', 0.001221797), ('Mitchell', 0.001747788), ('Nathan', 0.005039405), ('Nathaniel', 0.001887558), ('Neil', 0.000240331), ('Nicholas', 0.010021219), ('Nicolas', 0.000362522), ('Noah', 0.000960947), ('Norman', 0.000389043), ('Omar', 0.000639052), ('Oscar', 0.000946583), ('Parker', 0.000277522), ('Patrick', 0.007153255), ('Paul', 0.009272953), ('Pedro', 0.000275726), ('Perry', 0.000258644), ('Peter', 0.004340385), ('Philip', 0.002262956), ('Phillip', 0.00280273), ('Preston', 0.000292022), ('Ralph', 0.000836891), ('Randall', 0.001614722), ('Randy', 0.003021926), ('Ray', 0.000379451), ('Raymond', 0.003493952), ('Reginald', 0.00095108), ('Ricardo', 0.001197276), ('Richard', 0.014131961), ('Rick', 0.000440016), ('Rickey', 0.00023833), ('Ricky', 0.001856882), ('Riley', 0.000322031), ('Robert', 0.026938092), ('Roberto', 0.000906024), ('Rodney', 0.002180555), ('Roger', 0.002038032), ('Ronald', 0.00576775), ('Ronnie', 0.000905938), ('Ross', 0.00026863), ('Roy', 0.001311346), ('Ruben', 0.000774821), ('Russell', 0.002096221), ('Ryan', 0.01128178), ('Samuel', 0.00498019), ('Scott', 0.010580999), ('Sean', 0.005593456), ('Sergio', 0.000568518), ('Seth', 0.001537416), ('Shane', 0.002530218), ('Shannon', 0.000421583), ('Shaun', 0.000748761), ('Shawn', 0.004474546), ('Spencer', 0.000912094), ('Stanley', 0.000739032), ('Stephen', 0.007675365), ('Steve', 0.001407564), ('Steven', 0.013292898), ('Stuart', 0.000238826), ('Tanner', 0.000639292), ('Taylor', 0.00133036), ('Terrance', 0.000203311), ('Terrence', 0.000203704), ('Terry', 0.002873624), ('Theodore', 0.000596561), ('Thomas', 0.0143364), ('Tim', 0.000711126), ('Timothy', 0.012632608), ('Todd', 0.00414612), ('Tom', 0.000499283), ('Tommy', 0.000778737), ('Tony', 0.002511563), ('Tracy', 0.000728259), ('Travis', 0.004022458), ('Trevor', 0.001692523), ('Tristan', 0.000408759), ('Troy', 0.002695415), ('Tyler', 0.005962323), ('Tyrone', 0.000587207), ('Vernon', 0.000246401), ('Victor', 0.002340621), ('Vincent', 0.002494515), ('Walter', 0.001525891), ('Warren', 0.000317414), ('Wayne', 0.00160966), ('Wesley', 0.001733835), ('William', 0.020025989), ('Willie', 0.001379247), ('Wyatt', 0.000306591), ('Xavier', 0.000415222), ('Zachary', 0.005918634)))
A:faker.providers.person.en_US.__init__.first_names->OrderedDict((('Aaron', 0.006741589), ('Adam', 0.007124922), ('Adrian', 0.001521889), ('Alan', 0.002344657), ('Albert', 0.001316595), ('Alec', 0.000442958), ('Alejandro', 0.000862489), ('Alex', 0.002111833), ('Alexander', 0.005215733), ('Alexis', 0.000277915), ('Alfred', 0.000318919), ('Allen', 0.001679613), ('Alvin', 0.00024794), ('Andre', 0.001400621), ('Andres', 0.000335574), ('Andrew', 0.013475074), ('Angel', 0.000902262), ('Anthony', 0.013783357), ('Antonio', 0.002392535), ('Arthur', 0.001342637), ('Austin', 0.003785615), ('Barry', 0.001102751), ('Benjamin', 0.006535474), ('Bernard', 0.000298691), ('Bill', 0.000430013), ('Billy', 0.001749806), ('Blake', 0.001218155), ('Bob', 0.000235731), ('Bobby', 0.001666977), ('Brad', 0.000984544), ('Bradley', 0.003845018), ('Brady', 0.000277522), ('Brandon', 0.009518346), ('Brendan', 0.000736758), ('Brent', 0.001889131), ('Brett', 0.002248371), ('Brian', 0.01597677), ('Bruce', 0.001883335), ('Bryan', 0.00456454), ('Bryce', 0.000457406), ('Caleb', 0.001485861), ('Calvin', 0.001168738), ('Cameron', 0.00180755), ('Carl', 0.002011802), ('Carlos', 0.00266638), ('Casey', 0.001440035), ('Cesar', 0.000304898), ('Chad', 0.003858817), ('Charles', 0.010889881), ('Chase', 0.000971942), ('Chris', 0.001389507), ('Christian', 0.003097779), ('Christopher', 0.02783596), ('Clarence', 0.000299289), ('Clayton', 0.000662222), ('Clifford', 0.00053078), ('Clinton', 0.000579307), ('Cody', 0.00353482), ('Cole', 0.000578811), ('Colin', 0.00078508), ('Collin', 0.000406057), ('Colton', 0.000520845), ('Connor', 0.000981073), ('Corey', 0.002476612), ('Cory', 0.001813005), ('Craig', 0.00338161), ('Cristian', 0.000333847), ('Curtis', 0.002140235), ('Dakota', 0.000797614), ('Dale', 0.001171354), ('Dalton', 0.000615113), ('Damon', 0.00034308), ('Dan', 0.000388496), ('Daniel', 0.018881874), ('Danny', 0.001873879), ('Darin', 0.000234962), ('Darius', 0.000336189), ('Darrell', 0.001218582), ('Darren', 0.001253738), ('Darryl', 0.00067019), ('Daryl', 0.000260918), ('Dave', 0.000269673), ('David', 0.031073833), ('Dean', 0.000965375), ('Dennis', 0.003318992), ('Derek', 0.003095299), ('Derrick', 0.001955921), ('Devin', 0.001312474), ('Devon', 0.000485877), ('Dillon', 0.000558361), ('Dominic', 0.000438221), ('Don', 0.000378322), ('Donald', 0.005689572), ('Douglas', 0.004513687), ('Drew', 0.000596868), ('Duane', 0.00061855), ('Dustin', 0.003088938), ('Dwayne', 0.000711382), ('Dylan', 0.002329096), ('Earl', 0.000348347), ('Eddie', 0.0007944), ('Edgar', 0.000379536), ('Eduardo', 0.000465358), ('Edward', 0.005702242), ('Edwin', 0.001117833), ('Elijah', 0.000592183), ('Eric', 0.012024659), ('Erik', 0.001997096), ('Ernest', 0.000746556), ('Ethan', 0.001143978), ('Eugene', 0.000784243), ('Evan', 0.001570691), ('Fernando', 0.000557608), ('Francis', 0.000330837), ('Francisco', 0.001084335), ('Frank', 0.003276449), ('Franklin', 0.000237561), ('Fred', 0.000396618), ('Frederick', 0.001104188), ('Gabriel', 0.001906504), ('Garrett', 0.001124861), ('Gary', 0.005023109), ('Gavin', 0.000295373), ('Gene', 0.00023426), ('Geoffrey', 0.000425978), ('George', 0.004423984), ('Gerald', 0.00165841), ('Gilbert', 0.000246726), ('Glen', 0.000374338), ('Glenn', 0.001111421), ('Gordon', 0.00027075), ('Grant', 0.00068322), ('Greg', 0.000623492), ('Gregg', 0.000235885), ('Gregory', 0.007676443), ('Guy', 0.000262645), ('Harold', 0.000929467), ('Harry', 0.000586934), ('Hayden', 0.000279454), ('Hector', 0.000798691), ('Henry', 0.001856232), ('Herbert', 0.000234226), ('Howard', 0.000712921), ('Hunter', 0.001034679), ('Ian', 0.001863192), ('Isaac', 0.001001951), ('Isaiah', 0.000625441), ('Ivan', 0.000350433), ('Jack', 0.001839748), ('Jackson', 0.000403253), ('Jacob', 0.007845384), ('Jaime', 0.000421378), ('Jake', 0.000565782), ('James', 0.029601617), ('Jamie', 0.00093552), ('Jared', 0.002538802), ('Jason', 0.01520513), ('Javier', 0.000625202), ('Jay', 0.001411462), ('Jeff', 0.001271436), ('Jeffery', 0.002627873), ('Jeffrey', 0.01225709), ('Jeremiah', 0.001209605), ('Jeremy', 0.006336079), ('Jermaine', 0.000450156), ('Jerome', 0.000634299), ('Jerry', 0.003150273), ('Jesse', 0.003884552), ('Jesus', 0.001628965), ('Jim', 0.000567714), ('Jimmy', 0.001607489), ('Joe', 0.001621544), ('Joel', 0.002537742), ('John', 0.028683008), ('Johnathan', 0.000840448), ('Johnny', 0.002117065), ('Jon', 0.001561184), ('Jonathan', 0.009963971), ('Jonathon', 0.000701157), ('Jordan', 0.003451546), ('Jorge', 0.001180553), ('Jose', 0.005368207), ('Joseph', 0.018604763), ('Joshua', 0.014808101), ('Juan', 0.003233598), ('Julian', 0.000693736), ('Justin', 0.010197889), ('Karl', 0.000362437), ('Keith', 0.004622866), ('Kelly', 0.000775283), ('Kenneth', 0.008318145), ('Kent', 0.000329418), ('Kerry', 0.000261448), ('Kevin', 0.014324157), ('Kirk', 0.0003801), ('Kristopher', 0.000580692), ('Kurt', 0.000716375), ('Kyle', 0.006350049), ('Lance', 0.001048495), ('Larry', 0.003658807), ('Lawrence', 0.001670294), ('Lee', 0.001223883), ('Leon', 0.000236347), ('Leonard', 0.000756713), ('Leroy', 0.000260234), ('Leslie', 0.000234637), ('Levi', 0.000347184), ('Logan', 0.001325812), ('Lonnie', 0.000258576), ('Louis', 0.001212255), ('Lucas', 0.001098237), ('Luis', 0.002427777), ('Luke', 0.001221455), ('Malik', 0.000306813), ('Manuel', 0.001331369), ('Marc', 0.001431947), ('Marco', 0.000290586), ('Marcus', 0.002604122), ('Mario', 0.001229337), ('Mark', 0.014382277), ('Martin', 0.002085226), ('Marvin', 0.000732962), ('Mason', 0.000562037), ('Mathew', 0.000605555), ('Matthew', 0.020425018), ('Maurice', 0.000777078), ('Max', 0.000311276), ('Maxwell', 0.000357478), ('Melvin', 0.00061932), ('Michael', 0.045602241), ('Micheal', 0.001273847), ('Miguel', 0.001416267), ('Mike', 0.001221797), ('Mitchell', 0.001747788), ('Nathan', 0.005039405), ('Nathaniel', 0.001887558), ('Neil', 0.000240331), ('Nicholas', 0.010021219), ('Nicolas', 0.000362522), ('Noah', 0.000960947), ('Norman', 0.000389043), ('Omar', 0.000639052), ('Oscar', 0.000946583), ('Parker', 0.000277522), ('Patrick', 0.007153255), ('Paul', 0.009272953), ('Pedro', 0.000275726), ('Perry', 0.000258644), ('Peter', 0.004340385), ('Philip', 0.002262956), ('Phillip', 0.00280273), ('Preston', 0.000292022), ('Ralph', 0.000836891), ('Randall', 0.001614722), ('Randy', 0.003021926), ('Ray', 0.000379451), ('Raymond', 0.003493952), ('Reginald', 0.00095108), ('Ricardo', 0.001197276), ('Richard', 0.014131961), ('Rick', 0.000440016), ('Rickey', 0.00023833), ('Ricky', 0.001856882), ('Riley', 0.000322031), ('Robert', 0.026938092), ('Roberto', 0.000906024), ('Rodney', 0.002180555), ('Roger', 0.002038032), ('Ronald', 0.00576775), ('Ronnie', 0.000905938), ('Ross', 0.00026863), ('Roy', 0.001311346), ('Ruben', 0.000774821), ('Russell', 0.002096221), ('Ryan', 0.01128178), ('Samuel', 0.00498019), ('Scott', 0.010580999), ('Sean', 0.005593456), ('Sergio', 0.000568518), ('Seth', 0.001537416), ('Shane', 0.002530218), ('Shannon', 0.000421583), ('Shaun', 0.000748761), ('Shawn', 0.004474546), ('Spencer', 0.000912094), ('Stanley', 0.000739032), ('Stephen', 0.007675365), ('Steve', 0.001407564), ('Steven', 0.013292898), ('Stuart', 0.000238826), ('Tanner', 0.000639292), ('Taylor', 0.00133036), ('Terrance', 0.000203311), ('Terrence', 0.000203704), ('Terry', 0.002873624), ('Theodore', 0.000596561), ('Thomas', 0.0143364), ('Tim', 0.000711126), ('Timothy', 0.012632608), ('Todd', 0.00414612), ('Tom', 0.000499283), ('Tommy', 0.000778737), ('Tony', 0.002511563), ('Tracy', 0.000728259), ('Travis', 0.004022458), ('Trevor', 0.001692523), ('Tristan', 0.000408759), ('Troy', 0.002695415), ('Tyler', 0.005962323), ('Tyrone', 0.000587207), ('Vernon', 0.000246401), ('Victor', 0.002340621), ('Vincent', 0.002494515), ('Walter', 0.001525891), ('Warren', 0.000317414), ('Wayne', 0.00160966), ('Wesley', 0.001733835), ('William', 0.020025989), ('Willie', 0.001379247), ('Wyatt', 0.000306591), ('Xavier', 0.000415222), ('Zachary', 0.005918634))).copy()
A:faker.providers.person.en_US.__init__.last_names->OrderedDict((('Smith', 0.021712045), ('Johnson', 0.01696938), ('Williams', 0.014016962), ('Brown', 0.012610763), ('Jones', 0.012451866), ('Miller', 0.010305045), ('Davis', 0.009798219), ('Garcia', 0.007842422), ('Rodriguez', 0.007348561), ('Wilson', 0.007154951), ('Martinez', 0.007082045), ('Anderson', 0.006966203), ('Taylor', 0.006582218), ('Thomas', 0.006493824), ('Hernandez', 0.006454314), ('Moore', 0.006383948), ('Martin', 0.006146745), ('Jackson', 0.006086567), ('Thompson', 0.005887767), ('White', 0.005843424), ('Lopez', 0.005679145), ('Lee', 0.005535909), ('Gonzalez', 0.005461513), ('Harris', 0.005423356), ('Clark', 0.005010598), ('Lewis', 0.00465937), ('Robinson', 0.004596305), ('Walker', 0.004580579), ('Perez', 0.00446375), ('Hall', 0.004327121), ('Young', 0.004257495), ('Allen', 0.00423392), ('Sanchez', 0.004031749), ('Wright', 0.004023754), ('King', 0.004011135), ('Scott', 0.003838487), ('Green', 0.003778053), ('Baker', 0.003776901), ('Adams', 0.00377448), ('Nelson', 0.003766713), ('Hill', 0.003762455), ('Ramirez', 0.003554281), ('Campbell', 0.003398636), ('Mitchell', 0.003357336), ('Roberts', 0.003346207), ('Carter', 0.0033127), ('Phillips', 0.003214932), ('Evans', 0.003127113), ('Turner', 0.003067045), ('Torres', 0.002971158), ('Parker', 0.002962725), ('Collins', 0.002904264), ('Edwards', 0.002897155), ('Stewart', 0.002859044), ('Flores', 0.002856449), ('Morris', 0.002848582), ('Nguyen', 0.002833697), ('Murphy', 0.00274576), ('Rivera', 0.002736275), ('Cook', 0.002693623), ('Rogers', 0.002690041), ('Morgan', 0.002525543), ('Peterson', 0.002513125), ('Cooper', 0.00246795), ('Reed', 0.0024437), ('Bailey', 0.002429747), ('Bell', 0.002419112), ('Gomez', 0.002408494), ('Kelly', 0.002379209), ('Howard', 0.002327986), ('Ward', 0.002321973), ('Cox', 0.002318775), ('Diaz', 0.00230051), ('Richardson', 0.002280051), ('Wood', 0.002259639), ('Watson', 0.002215168), ('Brooks', 0.002199808), ('Bennett', 0.002184311), ('Gray', 0.002162912), ('James', 0.002131032), ('Reyes', 0.002124517), ('Cruz', 0.002111304), ('Hughes', 0.002095999), ('Price', 0.002090206), ('Myers', 0.002054278), ('Long', 0.002042126), ('Foster', 0.002019703), ('Sanders', 0.002018442), ('Ross', 0.002009844), ('Morales', 0.001988655), ('Powell', 0.001978704), ('Sullivan', 0.001970362), ('Russell', 0.001968461), ('Ortiz', 0.001961617), ('Jenkins', 0.001952974), ('Gutierrez', 0.001945371), ('Perry', 0.001942986), ('Butler', 0.001926859), ('Barnes', 0.00192272), ('Fisher', 0.001921377), ('Henderson', 0.001919686), ('Coleman', 0.001906255), ('Simmons', 0.001842531), ('Patterson', 0.00181427), ('Jordan', 0.00180198), ('Reynolds', 0.001787233), ('Hamilton', 0.001775656), ('Graham', 0.001773307), ('Kim', 0.001773243), ('Gonzales', 0.001772028), ('Alexander', 0.001767542), ('Ramos', 0.001764371), ('Wallace', 0.001743026), ('Griffin', 0.001741893), ('West', 0.001722047), ('Cole', 0.001715916), ('Hayes', 0.001712992), ('Chavez', 0.001698299), ('Gibson', 0.001685096), ('Bryant', 0.001679075), ('Ellis', 0.001662381), ('Stevens', 0.001657657), ('Murray', 0.001630218), ('Ford', 0.001630062), ('Marshall', 0.001619244), ('Owens', 0.001611212), ('Mcdonald', 0.001609019), ('Harrison', 0.001604295), ('Ruiz', 0.001602943), ('Kennedy', 0.001568285), ('Wells', 0.001559139), ('Alvarez', 0.001542527), ('Woods', 0.0015425), ('Mendoza', 0.001540243), ('Castillo', 0.001511972), ('Olson', 0.001493963), ('Webb', 0.001493771), ('Washington', 0.001489705), ('Tucker', 0.001488763), ('Freeman', 0.001486507), ('Burns', 0.001481636), ('Henry', 0.001474683), ('Vasquez', 0.001461863), ('Snyder', 0.001456143), ('Simpson', 0.001445891), ('Crawford', 0.001444795), ('Jimenez', 0.001438892), ('Porter', 0.001433163), ('Mason', 0.0014207), ('Shaw', 0.001417849), ('Gordon', 0.001415674), ('Wagner', 0.001411855), ('Hunter', 0.001410886), ('Romero', 0.001405057), ('Hicks', 0.00140365), ('Dixon', 0.001389003), ('Hunt', 0.001388738), ('Palmer', 0.00137431), ('Robertson', 0.001373323), ('Black', 0.001372291), ('Holmes', 0.001372108), ('Stone', 0.001368782), ('Meyer', 0.001367521), ('Boyd', 0.001365803), ('Mills', 0.001351485), ('Warren', 0.001351458), ('Fox', 0.001346441), ('Rose', 0.001342485), ('Rice', 0.001338062), ('Moreno', 0.001334846), ('Schmidt', 0.001330067), ('Patel', 0.001325508), ('Ferguson', 0.001299832), ('Nichols', 0.001296908), ('Herrera', 0.0012864), ('Medina', 0.001273307), ('Ryan', 0.001273142), ('Fernandez', 0.001272841), ('Weaver', 0.001268354), ('Daniels', 0.001268034), ('Stephens', 0.001267724), ('Gardner', 0.001266974), ('Payne', 0.0012612), ('Kelley', 0.001256878), ('Dunn', 0.001251395), ('Pierce', 0.001247393), ('Arnold', 0.001245547), ('Tran', 0.001243537), ('Spencer', 0.001228443), ('Peters', 0.001226505), ('Hawkins', 0.001224998), ('Grant', 0.001224705), ('Hansen', 0.001219589), ('Castro', 0.001217578), ('Hoffman', 0.001212014), ('Hart', 0.001210378), ('Elliott', 0.001210296), ('Cunningham', 0.00120517), ('Knight', 0.001204841), ('Bradley', 0.001199624), ('Carroll', 0.001197166), ('Hudson', 0.001195091), ('Duncan', 0.001191674), ('Armstrong', 0.001187681), ('Berry', 0.001182409), ('Andrews', 0.001181632), ('Johnston', 0.001178114), ('Ray', 0.001176826), ('Lane', 0.001176214), ('Riley', 0.001169206), ('Carpenter', 0.001161101), ('Perkins', 0.001159986), ('Aguilar', 0.001154942), ('Silva', 0.001152795), ('Richards', 0.001148126), ('Willis', 0.001147888), ('Matthews', 0.001140688), ('Chapman', 0.001138632), ('Lawrence', 0.001135955), ('Garza', 0.00113421), ('Vargas', 0.001132583), ('Watkins', 0.001118832), ('Wheeler', 0.00111186), ('Larson', 0.001106195), ('Carlson', 0.001097606), ('Harper', 0.001095267), ('George', 0.001094444), ('Greene', 0.001092855), ('Burke', 0.001088935), ('Guzman', 0.001081762), ('Morrison', 0.001077641), ('Munoz', 0.001076133), ('Jacobs', 0.001055721), ('Obrien', 0.001054304), ('Lawson', 0.001052486), ('Franklin', 0.001049498), ('Lynch', 0.001045743), ('Bishop', 0.00104196), ('Carr', 0.001040662), ('Salazar', 0.001036788), ('Austin', 0.001033974), ('Mendez', 0.0010301), ('Gilbert', 0.001027084), ('Jensen', 0.001026408), ('Williamson', 0.001025348), ('Montgomery', 0.00102469), ('Harvey', 0.001024617), ('Oliver', 0.001020094), ('Howell', 0.001001756), ('Dean', 0.000998064), ('Hanson', 0.000996685), ('Weber', 0.000985601), ('Garrett', 0.000984788), ('Sims', 0.000979918), ('Burton', 0.000979132), ('Fuller', 0.000974783), ('Soto', 0.000974317), ('Mccoy', 0.000972946), ('Welch', 0.00096676), ('Chen', 0.000964384), ('Schultz', 0.000959067), ('Walters', 0.000952844), ('Reid', 0.00095034), ('Fields', 0.00094335), ('Walsh', 0.000943113), ('Little', 0.000938563), ('Fowler', 0.000937667), ('Bowman', 0.000934186), ('Davidson', 0.000932404), ('May', 0.000929498), ('Day', 0.000929041), ('Schneider', 0.00091878), ('Newman', 0.000918214), ('Brewer', 0.000917976), ('Lucas', 0.000917538), ('Holland', 0.000912677), ('Wong', 0.000908172), ('Banks', 0.000907276), ('Santos', 0.000904526), ('Curtis', 0.000904206), ('Pearson', 0.000902105), ('Delgado', 0.000901621), ('Valdez', 0.000901027), ('Pena', 0.000898605), ('Rios', 0.000882377), ('Douglas', 0.000881062), ('Sandoval', 0.000879947), ('Barrett', 0.000876228), ('Hopkins', 0.000864414), ('Keller', 0.000861645), ('Guerrero', 0.000860293), ('Stanley', 0.000857232), ('Bates', 0.000856555), ('Alvarado', 0.000856373), ('Beck', 0.000851238), ('Ortega', 0.000850963), ('Wade', 0.00084825), ('Estrada', 0.000848222), ('Contreras', 0.00084666), ('Barnett', 0.000843252), ('Caldwell', 0.00083458), ('Santiago', 0.00083119), ('Lambert', 0.000828001), ('Powers', 0.000826019), ('Chambers', 0.000825324), ('Nunez', 0.000824255), ('Craig', 0.000818618), ('Leonard', 0.000815027), ('Lowe', 0.000814844), ('Rhodes', 0.000812459), ('Byrd', 0.00081149), ('Gregory', 0.000811481), ('Shelton', 0.000807059), ('Frazier', 0.00080705), ('Becker', 0.000805122), ('Maldonado', 0.000804226), ('Fleming', 0.000803614), ('Vega', 0.000801595), ('Sutton', 0.000798351), ('Cohen', 0.000797008), ('Jennings', 0.00079529), ('Parks', 0.000788967), ('Mcdaniel', 0.000788702), ('Watts', 0.000787889), ('Barker', 0.000778688), ('Norris', 0.000778605), ('Vaughn', 0.000777006), ('Vazquez', 0.000775992), ('Holt', 0.000774018), ('Schwartz', 0.000773918), ('Steele', 0.000770756), ('Benson', 0.00076966), ('Neal', 0.000766151), ('Dominguez', 0.000765073), ('Horton', 0.000763173), ('Terry', 0.000762387), ('Wolfe', 0.000759417), ('Hale', 0.000757983), ('Lyons', 0.000751614), ('Graves', 0.000750892), ('Haynes', 0.000749595), ('Miles', 0.000748644), ('Park', 0.000748251), ('Warner', 0.000747648), ('Padilla', 0.000747475), ('Bush', 0.000744907), ('Thornton', 0.000741864), ('Mccarthy', 0.000740439), ('Mann', 0.00074032), ('Zimmerman', 0.000739608), ('Erickson', 0.000739534), ('Fletcher', 0.000739498), ('Mckinney', 0.00073661), ('Page', 0.000735487), ('Dawson', 0.000732718), ('Joseph', 0.000731256), ('Marquez', 0.000730534), ('Reeves', 0.00072931), ('Klein', 0.000728104), ('Espinoza', 0.000724787), ('Baldwin', 0.000723224), ('Moran', 0.000717696), ('Love', 0.000715659), ('Robbins', 0.000713996), ('Higgins', 0.000713685), ('Ball', 0.000708696), ('Cortez', 0.000708066), ('Le', 0.000707709), ('Griffith', 0.00070749), ('Bowen', 0.000704283), ('Sharp', 0.000702364), ('Cummings', 0.000700893), ('Ramsey', 0.000700144), ('Hardy', 0.000699988), ('Swanson', 0.000699358), ('Barber', 0.000699038), ('Acosta', 0.000698791), ('Luna', 0.000695593), ('Chandler', 0.000695474), ('Daniel', 0.000686529), ('Blair', 0.000686529), ('Cross', 0.00068652), ('Simon', 0.000683824), ('Dennis', 0.000683322), ('Oconnor', 0.000683066), ('Quinn', 0.00068101), ('Gross', 0.000678762), ('Navarro', 0.000675884), ('Moss', 0.000673874), ('Fitzgerald', 0.000671791), ('Doyle', 0.000671754), ('Mclaughlin', 0.000668191), ('Rojas', 0.00066767), ('Rodgers', 0.000667213), ('Stevenson', 0.000666034), ('Singh', 0.00066375), ('Yang', 0.000663613), ('Figueroa', 0.000662754), ('Harmon', 0.000661667), ('Newton', 0.000660881), ('Paul', 0.00066015), ('Manning', 0.000658514), ('Garner', 0.000658359), ('Mcgee', 0.000657198), ('Reese', 0.000655636), ('Francis', 0.000655353), ('Burgess', 0.000654265), ('Adkins', 0.000653571), ('Goodman', 0.000653151), ('Curry', 0.00065189), ('Brady', 0.000650345), ('Christensen', 0.000650062), ('Potter', 0.000649688), ('Walton', 0.000648719), ('Goodwin', 0.000642652), ('Mullins', 0.000642222), ('Molina', 0.000641537), ('Webster', 0.000640733), ('Fischer', 0.000640477), ('Campos', 0.000639152), ('Avila', 0.000638175), ('Sherman', 0.000638147), ('Todd', 0.000637873), ('Chang', 0.00063738), ('Blake', 0.000633021), ('Malone', 0.00063282), ('Wolf', 0.000629604), ('Hodges', 0.000629266), ('Juarez', 0.000628507), ('Gill', 0.000627722), ('Farmer', 0.000624158), ('Hines', 0.00062266), ('Gallagher', 0.00062202), ('Duran', 0.000621755), ('Hubbard', 0.000621527), ('Cannon', 0.000620631), ('Miranda', 0.0006181), ('Wang', 0.000617406), ('Saunders', 0.000614116), ('Tate', 0.000614098), ('Mack', 0.000613604), ('Hammond', 0.000612773), ('Carrillo', 0.000612691), ('Townsend', 0.000610854), ('Wise', 0.000609803), ('Ingram', 0.000609136), ('Barton', 0.000608743), ('Mejia', 0.000607939), ('Ayala', 0.000607766), ('Schroeder', 0.000606825), ('Hampton', 0.000606514), ('Rowe', 0.000604933), ('Parsons', 0.000604915), ('Frank', 0.000602311), ('Waters', 0.000601388), ('Strickland', 0.000601361), ('Osborne', 0.000601251), ('Maxwell', 0.000601041), ('Chan', 0.000600493), ('Deleon', 0.000599387), ('Norman', 0.000596381), ('Harrington', 0.00059512), ('Casey', 0.000592232), ('Patton', 0.00059184), ('Logan', 0.000590049), ('Bowers', 0.000589318), ('Mueller', 0.000587572), ('Glover', 0.00058643), ('Floyd', 0.000586074), ('Hartman', 0.000583205), ('Buchanan', 0.000583187), ('Cobb', 0.000582401), ('French', 0.00057701), ('Kramer', 0.000575858), ('Mccormick', 0.000572569), ('Clarke', 0.0005715), ('Tyler', 0.00057139), ('Gibbs', 0.000571208), ('Moody', 0.000569654), ('Conner', 0.000569572), ('Sparks', 0.000568649), ('Mcguire', 0.000567571), ('Leon', 0.000566822), ('Bauer', 0.000566319), ('Norton', 0.000564729), ('Pope', 0.000564227), ('Flynn', 0.000564199), ('Hogan', 0.000563322), ('Robles', 0.00056303), ('Salinas', 0.000562692), ('Yates', 0.000561029), ('Lindsey', 0.000559192), ('Lloyd', 0.000558781), ('Marsh', 0.000557365), ('Mcbride', 0.000556222), ('Owen', 0.000552449), ('Solis', 0.000548648), ('Pham', 0.00054777), ('Lang', 0.000546802), ('Pratt', 0.000546418), ('Lara', 0.000545779), ('Brock', 0.000545331), ('Ballard', 0.00054513), ('Trujillo', 0.000544664), ('Shaffer', 0.000541173), ('Drake', 0.000539602), ('Roman', 0.000539282), ('Aguirre', 0.00053835), ('Morton', 0.000537162), ('Stokes', 0.000536239), ('Lamb', 0.000535033), ('Pacheco', 0.000534841), ('Patrick', 0.00053231), ('Cochran', 0.000532091), ('Shepherd', 0.000529368), ('Cain', 0.000528801), ('Burnett', 0.000528674), ('Hess', 0.000528335), ('Li', 0.000528007), ('Cervantes', 0.000527084), ('Olsen', 0.000524087), ('Briggs', 0.000523538), ('Ochoa', 0.000522743), ('Cabrera', 0.000522387), ('Velasquez', 0.000522314), ('Montoya', 0.00052151), ('Roth', 0.000521099), ('Meyers', 0.000518485), ('Cardenas', 0.000517334), ('Fuentes', 0.000515717), ('Weiss', 0.000513085), ('Wilkins', 0.000512309), ('Hoover', 0.000512309), ('Nicholson', 0.000511559), ('Underwood', 0.000511441), ('Short', 0.000510801), ('Carson', 0.000510052), ('Morrow', 0.000508617), ('Colon', 0.000507228), ('Holloway', 0.000506808), ('Summers', 0.000506123), ('Bryan', 0.000505008), ('Petersen', 0.00050424), ('Mckenzie', 0.000503318), ('Serrano', 0.000503071), ('Wilcox', 0.000502431), ('Carey', 0.000501856), ('Clayton', 0.000501408), ('Poole', 0.000499864), ('Calderon', 0.000499727), ('Gallegos', 0.000499553), ('Greer', 0.000498996), ('Rivas', 0.000498786), ('Guerra', 0.000498667), ('Decker', 0.000497525), ('Collier', 0.000497196), ('Wall', 0.000497077), ('Whitaker', 0.000496547), ('Bass', 0.000496117), ('Flowers', 0.000495944), ('Davenport', 0.000495295), ('Conley', 0.000495185), ('Houston', 0.00049365), ('Huff', 0.000492426), ('Copeland', 0.00049132), ('Hood', 0.00049101), ('Monroe', 0.000488616), ('Massey', 0.00048847), ('Roberson', 0.000486085), ('Combs', 0.00048592), ('Franco', 0.000485747), ('Larsen', 0.000483937), ('Pittman', 0.000481434), ('Randall', 0.000479661), ('Skinner', 0.000479616), ('Wilkinson', 0.000479552), ('Kirby', 0.00047946), ('Cameron', 0.00047915), ('Bridges', 0.000477514), ('Anthony', 0.000476472), ('Richard', 0.000476399), ('Kirk', 0.00047565), ('Bruce', 0.000475175), ('Singleton', 0.000473283), ('Mathis', 0.000473274), ('Bradford', 0.000472635), ('Boone', 0.000472205), ('Abbott', 0.000471666), ('Charles', 0.000470734), ('Allison', 0.000470606), ('Sweeney', 0.00047057), ('Atkinson', 0.000470469), ('Horn', 0.000469473), ('Jefferson', 0.0004693), ('Rosales', 0.000469071), ('York', 0.000469053), ('Christian', 0.000467618), ('Phelps', 0.000467408), ('Farrell', 0.000466869), ('Castaneda', 0.000466814), ('Nash', 0.000466193), ('Dickerson', 0.000466156), ('Bond', 0.000465818), ('Wyatt', 0.00046485), ('Foley', 0.000464649), ('Chase', 0.000463963), ('Gates', 0.000463698), ('Vincent', 0.000462602), ('Mathews', 0.000462419), ('Hodge', 0.000462136), ('Garrison', 0.000461268), ('Trevino', 0.000461012), ('Villarreal', 0.000460071), ('Heath', 0.000459669), ('Dalton', 0.00045838), ('Valencia', 0.000457101), ('Callahan', 0.000456178), ('Hensley', 0.000455566), ('Atkins', 0.000454616), ('Huffman', 0.000454461), ('Roy', 0.000454351), ('Boyer', 0.000453218), ('Shields', 0.000452807), ('Lin', 0.000451016), ('Hancock', 0.000450742), ('Grimes', 0.000449965), ('Glenn', 0.000449929), ('Cline', 0.000449252), ('Delacruz', 0.00044917), ('Camacho', 0.000447726), ('Dillon', 0.0004462), ('Parrish', 0.000446109), ('Oneill', 0.000444583), ('Melton', 0.000444017), ('Booth', 0.000443889), ('Kane', 0.000443404), ('Berg', 0.000442975), ('Harrell', 0.000442893), ('Pitts', 0.000442811), ('Savage', 0.000441943), ('Wiggins', 0.000441833), ('Brennan', 0.000441294), ('Salas', 0.000441166), ('Marks', 0.000441157), ('Russo', 0.00043974), ('Sawyer', 0.000438397), ('Baxter', 0.000437283), ('Golden', 0.000437118), ('Hutchinson', 0.000436844), ('Liu', 0.000435528), ('Walter', 0.000435071), ('Mcdowell', 0.000434258), ('Wiley', 0.000434048), ('Rich', 0.00043381), ('Humphrey', 0.000433746), ('Johns', 0.000432093), ('Koch', 0.000432065), ('Suarez', 0.000431599), ('Hobbs', 0.000431462), ('Beard', 0.000430621), ('Gilmore', 0.000429909), ('Ibarra', 0.000428492), ('Keith', 0.00042714), ('Macias', 0.000427067), ('Khan', 0.000426829), ('Andrade', 0.000426729), ('Ware', 0.000426546), ('Stephenson', 0.000426363), ('Henson', 0.000425879), ('Wilkerson', 0.000425843), ('Dyer', 0.000425559), ('Mcclure', 0.000424929), ('Blackwell', 0.000424838), ('Mercado', 0.000424308), ('Tanner', 0.000424079), ('Eaton', 0.000423997), ('Clay', 0.000422727), ('Barron', 0.000422106), ('Beasley', 0.00042195), ('Oneal', 0.000421786), ('Small', 0.000418944), ('Preston', 0.000418944), ('Wu', 0.000418624), ('Zamora', 0.000418542), ('Macdonald', 0.000418323), ('Vance', 0.000418149), ('Snow', 0.000417473), ('Mcclain', 0.000416294), ('Stafford', 0.000414366), ('Orozco', 0.000413818), ('Barry', 0.000411579), ('English', 0.00041147), ('Shannon', 0.000410282), ('Kline', 0.000410264), ('Jacobson', 0.000410026), ('Woodard', 0.000409624), ('Huang', 0.000408573), ('Kemp', 0.000408445), ('Mosley', 0.000408418), ('Prince', 0.000407888), ('Merritt', 0.00040776), ('Hurst', 0.000407404), ('Villanueva', 0.000407248), ('Roach', 0.000406188), ('Nolan', 0.000405887), ('Lam', 0.000405558), ('Yoder', 0.000404279), ('Mccullough', 0.000403164), ('Lester', 0.0004013), ('Santana', 0.000400898), ('Valenzuela', 0.000399938), ('Winters', 0.000399865), ('Barrera', 0.000399482), ('Orr', 0.000398988), ('Leach', 0.000398988), ('Berger', 0.000397983), ('Mckee', 0.000397974), ('Strong', 0.000396832), ('Conway', 0.000396512), ('Stein', 0.000395927), ('Whitehead', 0.000395735), ('Bullock', 0.000393095), ('Escobar', 0.000392492), ('Knox', 0.000392327), ('Meadows', 0.000391843), ('Solomon', 0.000391432), ('Velez', 0.000391258), ('Odonnell', 0.000391094), ('Kerr', 0.000390692), ('Stout', 0.000389878), ('Blankenship', 0.000389824), ('Browning', 0.000389632), ('Kent', 0.00038922), ('Lozano', 0.000388946), ('Bartlett', 0.000388444), ('Pruitt', 0.000387996), ('Buck', 0.000387795), ('Barr', 0.000387713), ('Gaines', 0.000387137), ('Durham', 0.000387101), ('Gentry', 0.000387028), ('Mcintyre', 0.000386826), ('Sloan', 0.000386333), ('Rocha', 0.000385036), ('Melendez', 0.000385036), ('Herman', 0.000384597), ('Sexton', 0.000384496), ('Moon', 0.000384332), ('Hendricks', 0.00038266), ('Rangel', 0.000382559), ('Stark', 0.000382514), ('Lowery', 0.00038075), ('Hardin', 0.000380695), ('Hull', 0.000380622), ('Sellers', 0.000379754), ('Ellison', 0.000378822), ('Calhoun', 0.000378758), ('Gillespie', 0.000378219), ('Mora', 0.000377808), ('Knapp', 0.000377068), ('Mccall', 0.000376739), ('Morse', 0.000375652), ('Dorsey', 0.000375579), ('Weeks', 0.000375113), ('Nielsen', 0.000374692), ('Livingston', 0.000374299), ('Leblanc', 0.000373925), ('Mclean', 0.00037345), ('Bradshaw', 0.000372746), ('Glass', 0.000372106), ('Middleton', 0.00037196), ('Buckley', 0.000371942), ('Schaefer', 0.000371549), ('Frost', 0.000370809), ('Howe', 0.000370562), ('House', 0.000369849), ('Mcintosh', 0.00036963), ('Ho', 0.000369265), ('Pennington', 0.000368588), ('Reilly', 0.000368324), ('Hebert', 0.000368077), ('Mcfarland', 0.00036772), ('Hickman', 0.000367538), ('Noble', 0.000367474), ('Spears', 0.000367346), ('Conrad', 0.000366423), ('Arias', 0.000366277), ('Galvan', 0.000365911), ('Velazquez', 0.000365765), ('Huynh', 0.000365591), ('Frederick', 0.000364659), ('Randolph', 0.000363134), ('Cantu', 0.000361845), ('Fitzpatrick', 0.000360931), ('Mahoney', 0.000360374), ('Peck', 0.000360301), ('Villa', 0.000360027), ('Michael', 0.000359725), ('Donovan', 0.000358821), ('Mcconnell', 0.000358209), ('Walls', 0.00035787), ('Boyle', 0.000357642), ('Mayer', 0.000357368), ('Zuniga', 0.000356875), ('Giles', 0.000356372), ('Pineda', 0.000356345), ('Pace', 0.000356125), ('Hurley', 0.000356089), ('Mays', 0.000355568), ('Mcmillan', 0.000355403), ('Crosby', 0.000354928), ('Ayers', 0.000354855), ('Case', 0.000354152), ('Bentley', 0.00035374), ('Shepard', 0.000353658), ('Everett', 0.000353631), ('Pugh', 0.00035353), ('David', 0.000353238), ('Mcmahon', 0.000352306), ('Dunlap', 0.000351931), ('Bender', 0.000351456), ('Hahn', 0.000350451), ('Harding', 0.000350323), ('Acevedo', 0.000349336), ('Raymond', 0.00034866), ('Blackburn', 0.000348468), ('Duffy', 0.000346869), ('Landry', 0.00034686), ('Dougherty', 0.00034633), ('Bautista', 0.000345818), ('Shah', 0.00034569), ('Potts', 0.000344356), ('Arroyo', 0.000344274), ('Valentine', 0.000344192), ('Meza', 0.000344128), ('Gould', 0.00034411), ('Vaughan', 0.000343479), ('Fry', 0.000343032), ('Rush', 0.000342374), ('Avery', 0.0003421), ('Herring', 0.000341305), ('Dodson', 0.000340802), ('Clements', 0.000340245), ('Sampson', 0.000340217), ('Tapia', 0.000339916), ('Bean', 0.000339404), ('Lynn', 0.000339221), ('Crane', 0.000339203), ('Farley', 0.000339139), ('Cisneros', 0.000338536), ('Benton', 0.000338372), ('Ashley', 0.000338271), ('Mckay', 0.000337604), ('Finley', 0.000336928), ('Best', 0.000336818), ('Blevins', 0.000336626), ('Friedman', 0.000336553), ('Moses', 0.00033638), ('Sosa', 0.00033637), ('Blanchard', 0.000335923), ('Huber', 0.000335603), ('Frye', 0.000335484), ('Krueger', 0.000335283), ('Bernard', 0.000333931), ('Rosario', 0.000333867), ('Rubio', 0.000333794), ('Mullen', 0.000332981), ('Benjamin', 0.000332953), ('Haley', 0.000332898), ('Chung', 0.000332798), ('Moyer', 0.000332789), ('Choi', 0.000332505), ('Horne', 0.000331573), ('Yu', 0.000331546), ('Woodward', 0.000331153), ('Ali', 0.000329664), ('Nixon', 0.00032928), ('Hayden', 0.000329161), ('Rivers', 0.000328759), ('Estes', 0.000327471), ('Mccarty', 0.000326365), ('Richmond', 0.000326338), ('Stuart', 0.00032621), ('Maynard', 0.000325726), ('Brandt', 0.000325433), ('Oconnell', 0.000325378), ('Hanna', 0.000325278), ('Sanford', 0.000324967), ('Sheppard', 0.000324867), ('Church', 0.00032473), ('Burch', 0.000324565), ('Levy', 0.000324044), ('Rasmussen', 0.000323944), ('Coffey', 0.000323843), ('Ponce', 0.000323459), ('Faulkner', 0.000323359), ('Donaldson', 0.000323341), ('Schmitt', 0.000322783), ('Novak', 0.000322381), ('Costa', 0.000321879), ('Montes', 0.000321595), ('Booker', 0.000320727), ('Cordova', 0.000320481), ('Waller', 0.000319814), ('Arellano', 0.000319795), ('Maddox', 0.00031953), ('Mata', 0.000318781), ('Bonilla', 0.000318196), ('Stanton', 0.000318087), ('Compton', 0.000317867), ('Kaufman', 0.000317849), ('Dudley', 0.000317703), ('Mcpherson', 0.000317639), ('Beltran', 0.000317392), ('Dickson', 0.000317045), ('Mccann', 0.00031699), ('Villegas', 0.000316917), ('Proctor', 0.000316899), ('Hester', 0.000316835), ('Cantrell', 0.000316826), ('Daugherty', 0.000316607), ('Cherry', 0.000316287), ('Bray', 0.000315921), ('Davila', 0.000315611), ('Rowland', 0.000315218), ('Madden', 0.00031498), ('Levine', 0.00031498), ('Spence', 0.000314642), ('Good', 0.000314596), ('Irwin', 0.000314085), ('Werner', 0.000313884), ('Krause', 0.00031382), ('Petty', 0.000313207), ('Whitney', 0.000312961), ('Baird', 0.000312796), ('Hooper', 0.000311435), ('Pollard', 0.000311389), ('Zavala', 0.000311289), ('Jarvis', 0.000311124), ('Holden', 0.000311042), ('Hendrix', 0.00031096), ('Haas', 0.00031096), ('Mcgrath', 0.000310951), ('Bird', 0.00031032), ('Lucero', 0.000309955), ('Terrell', 0.000309882), ('Riggs', 0.000309461), ('Joyce', 0.000309233), ('Rollins', 0.000308812), ('Mercer', 0.000308812), ('Galloway', 0.000308593), ('Duke', 0.000308337), ('Odom', 0.000308081), ('Andersen', 0.000306172), ('Downs', 0.000306044), ('Hatfield', 0.00030577), ('Benitez', 0.00030556), ('Archer', 0.000305285), ('Huerta', 0.00030471), ('Travis', 0.000304628), ('Mcneil', 0.000303714), ('Hinton', 0.00030344), ('Zhang', 0.000303376), ('Hays', 0.000303303), ('Mayo', 0.000302681), ('Fritz', 0.000302151), ('Branch', 0.000301896), ('Mooney', 0.000301101), ('Ewing', 0.000300845), ('Ritter', 0.000300287), ('Esparza', 0.000299447), ('Frey', 0.000299109), ('Braun', 0.00029857), ('Gay', 0.000298533), ('Riddle', 0.000298369), ('Haney', 0.000298277), ('Kaiser', 0.000297574), ('Holder', 0.000296651), ('Chaney', 0.000296349), ('Mcknight', 0.00029592), ('Gamble', 0.000295838), ('Vang', 0.000295435), ('Cooley', 0.000295015), ('Carney', 0.000294969), ('Cowan', 0.000294604), ('Forbes', 0.000294476), ('Ferrell', 0.000293983), ('Davies', 0.0002939), ('Barajas', 0.000293736), ('Shea', 0.000293023), ('Osborn', 0.000292795), ('Bright', 0.000292777), ('Cuevas', 0.00029253), ('Bolton', 0.000292347), ('Murillo', 0.000292064), ('Lutz', 0.000291845), ('Duarte', 0.000291442), ('Kidd', 0.000291351), ('Key', 0.000291315), ('Cooke', 0.000291114)))
A:faker.providers.person.en_US.__init__.prefixes_female->OrderedDict((('Mrs.', 0.5), ('Ms.', 0.1), ('Miss', 0.1), ('Dr.', 0.3)))
A:faker.providers.person.en_US.__init__.prefixes_male->OrderedDict((('Mr.', 0.7), ('Dr.', 0.3)))
A:faker.providers.person.en_US.__init__.suffixes_female->OrderedDict((('MD', 0.5), ('DDS', 0.3), ('PhD', 0.1), ('DVM', 0.2)))
A:faker.providers.person.en_US.__init__.suffixes_male->OrderedDict((('Jr.', 0.2), ('II', 0.05), ('III', 0.03), ('IV', 0.015), ('V', 0.005), ('MD', 0.3), ('DDS', 0.2), ('PhD', 0.1), ('DVM', 0.1)))
faker.providers.person.en_US.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/ja_JP/__init__.py----------------------------------------
A:faker.providers.person.ja_JP.__init__.pattern->self.random_element(self.romanized_formats)
faker.providers.person.ja_JP.__init__.Provider(PersonProvider)
faker.providers.person.ja_JP.__init__.Provider.first_kana_name(self)
faker.providers.person.ja_JP.__init__.Provider.first_kana_name_female(self)
faker.providers.person.ja_JP.__init__.Provider.first_kana_name_male(self)
faker.providers.person.ja_JP.__init__.Provider.first_romanized_name(self)
faker.providers.person.ja_JP.__init__.Provider.first_romanized_name_female(self)
faker.providers.person.ja_JP.__init__.Provider.first_romanized_name_male(self)
faker.providers.person.ja_JP.__init__.Provider.kana_name(self)
faker.providers.person.ja_JP.__init__.Provider.last_kana_name(self)
faker.providers.person.ja_JP.__init__.Provider.last_romanized_name(self)
faker.providers.person.ja_JP.__init__.Provider.romanized_name(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/ar_PS/__init__.py----------------------------------------
faker.providers.person.ar_PS.__init__.Provider(ArabicPersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/et_EE/__init__.py----------------------------------------
A:faker.providers.person.et_EE.__init__.prefixes->set(prefixes_male + prefixes_female)
A:faker.providers.person.et_EE.__init__.first_names_male->set(first_names_male_est + first_names_male_rus)
A:faker.providers.person.et_EE.__init__.first_names_female->set(first_names_female_est + first_names_female_rus)
A:faker.providers.person.et_EE.__init__.last_names->set(last_names_est + last_names_rus)
faker.providers.person.et_EE.__init__.Provider(PersonProvider)
faker.providers.person.et_EE.__init__.Provider.first_name_est(self)
faker.providers.person.et_EE.__init__.Provider.first_name_female_est(self)
faker.providers.person.et_EE.__init__.Provider.first_name_female_rus(self)
faker.providers.person.et_EE.__init__.Provider.first_name_male_est(self)
faker.providers.person.et_EE.__init__.Provider.first_name_male_rus(self)
faker.providers.person.et_EE.__init__.Provider.first_name_rus(self)
faker.providers.person.et_EE.__init__.Provider.last_name_est(self)
faker.providers.person.et_EE.__init__.Provider.last_name_rus(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/hr_HR/__init__.py----------------------------------------
faker.providers.person.hr_HR.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/id_ID/__init__.py----------------------------------------
faker.providers.person.id_ID.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/el_GR/__init__.py----------------------------------------
faker.providers.person.el_GR.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/de_AT/__init__.py----------------------------------------
faker.providers.person.de_AT.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/pl_PL/__init__.py----------------------------------------
A:faker.providers.person.pl_PL.__init__.identity[3]->checksum_identity_card_number(identity)
faker.providers.person.pl_PL.__init__.Provider(PersonProvider)
faker.providers.person.pl_PL.__init__.Provider.identity_card_number(self)
faker.providers.person.pl_PL.__init__.Provider.last_name(self)
faker.providers.person.pl_PL.__init__.checksum_identity_card_number(characters)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/lt_LT/__init__.py----------------------------------------
faker.providers.person.lt_LT.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/ru_RU/__init__.py----------------------------------------
A:faker.providers.person.ru_RU.__init__.formats_male->OrderedDict((('{{last_name_male}} {{first_name_male}} {{middle_name_male}}', 0.97), ('{{prefix_male}} {{last_name_male}} {{first_name_male}} {{middle_name_male}}', 0.03)))
A:faker.providers.person.ru_RU.__init__.formats_female->OrderedDict((('{{last_name_female}} {{first_name_female}} {{middle_name_female}}', 0.97), ('{{prefix_female}} {{last_name_female}} {{first_name_female}} {{middle_name_female}}', 0.03)))
A:faker.providers.person.ru_RU.__init__.formats->OrderedDict((('{{last_name_male}} {{first_name_male}} {{middle_name_male}}', 0.97), ('{{prefix_male}} {{last_name_male}} {{first_name_male}} {{middle_name_male}}', 0.03))).copy()
faker.providers.person.ru_RU.__init__.Provider(PersonProvider)
faker.providers.person.ru_RU.__init__.Provider.middle_name(self)
faker.providers.person.ru_RU.__init__.Provider.middle_name_female(self)
faker.providers.person.ru_RU.__init__.Provider.middle_name_male(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/ne_NP/__init__.py----------------------------------------
faker.providers.person.ne_NP.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/de_DE/__init__.py----------------------------------------
faker.providers.person.de_DE.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/de_CH/__init__.py----------------------------------------
faker.providers.person.de_CH.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/pt_BR/__init__.py----------------------------------------
faker.providers.person.pt_BR.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/en_TH/__init__.py----------------------------------------
faker.providers.person.en_TH.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/fi_FI/__init__.py----------------------------------------
A:faker.providers.person.fi_FI.__init__.first_names_female->OrderedDict((('Aada', 0.001877), ('Aila', 0.002778), ('Aili', 0.001542), ('Aino', 0.00803), ('Airi', 0.001591), ('Aleksandra', 0.002884), ('Alexandra', 0.002718), ('Alina', 0.002114), ('Alisa', 0.001607), ('Amanda', 0.004584), ('Anita', 0.005061), ('Anja', 0.005627), ('Anna', 0.010413), ('Anna-Liisa', 0.00232), ('Anne', 0.007823), ('Anneli', 0.0277), ('Anni', 0.004397), ('Anniina', 0.003366), ('Annika', 0.005193), ('Annikki', 0.013414), ('Annukka', 0.001424), ('Anu', 0.003005), ('Arja', 0.004539), ('Aulikki', 0.002522), ('Aune', 0.00208), ('Aurora', 0.003709), ('Birgitta', 0.003324), ('Carita', 0.001574), ('Christina', 0.001534), ('Eeva', 0.006403), ('Eija', 0.00491), ('Eila', 0.005377), ('Eliisa', 0.00163), ('Elina', 0.014353), ('Elisa', 0.00424), ('Elisabet', 0.005925), ('Elisabeth', 0.004305), ('Ella', 0.002958), ('Ellen', 0.002243), ('Elli', 0.002258), ('Elsa', 0.002284), ('Emilia', 0.014649), ('Emma', 0.003571), ('Emmi', 0.002183), ('Erika', 0.002084), ('Essi', 0.001576), ('Esteri', 0.001672), ('Eveliina', 0.005899), ('Hanna', 0.005409), ('Hannele', 0.0193), ('Heidi', 0.005315), ('Helena', 0.028118), ('Heli', 0.003711), ('Helinä', 0.002151), ('Hellevi', 0.002416), ('Helmi', 0.003888), ('Helvi', 0.001462), ('Henna', 0.002525), ('Hilkka', 0.003745), ('Hillevi', 0.001577), ('Ida', 0.003067), ('Iida', 0.003699), ('Iiris', 0.001461), ('Ilona', 0.004816), ('Inkeri', 0.009444), ('Irene', 0.005164), ('Irja', 0.002691), ('Irma', 0.002772), ('Irmeli', 0.006537), ('Jaana', 0.005125), ('Jasmin', 0.001789), ('Jenna', 0.002567), ('Jenni', 0.004011), ('Johanna', 0.025061), ('Jonna', 0.002053), ('Josefiina', 0.001757), ('Julia', 0.004716), ('Juulia', 0.001411), ('Kaarina', 0.022441), ('Kaija', 0.003216), ('Kaisa', 0.004424), ('Karoliina', 0.006727), ('Katariina', 0.010602), ('Kati', 0.002463), ('Katja', 0.00381), ('Katri', 0.00337), ('Katriina', 0.004651), ('Kerttu', 0.002839), ('Kirsi', 0.004856), ('Kirsti', 0.003699), ('Krista', 0.001465), ('Kristiina', 0.016656), ('Kristina', 0.002653), ('Kyllikki', 0.008537), ('Laura', 0.005985), ('Lea', 0.002827), ('Leena', 0.011052), ('Leila', 0.00267), ('Liisa', 0.015791), ('Lilja', 0.001584), ('Linda', 0.001706), ('Linnea', 0.004089), ('Lotta', 0.002416), ('Maaria', 0.00335), ('Maarit', 0.012853), ('Maija', 0.00721), ('Maire', 0.001814), ('Margareta', 0.002525), ('Margit', 0.002057), ('Mari', 0.005431), ('Maria', 0.044412), ('Marianne', 0.00481), ('Marika', 0.005912), ('Marita', 0.005339), ('Maritta', 0.002299), ('Marja', 0.010093), ('Marja-Leena', 0.002611), ('Marja-Liisa', 0.002389), ('Marjaana', 0.004377), ('Marjatta', 0.020442), ('Marjo', 0.002613), ('Marjukka', 0.001486), ('Marjut', 0.003021), ('Marketta', 0.004413), ('Martta', 0.001663), ('Matilda', 0.004284), ('Merja', 0.004704), ('Mervi', 0.002193), ('Mia', 0.001736), ('Miia', 0.002146), ('Milla', 0.002204), ('Minna', 0.006615), ('Mira', 0.001706), ('Mirja', 0.003558), ('Mirjam', 0.002435), ('Mirjami', 0.003726), ('Nea', 0.001605), ('Niina', 0.002776), ('Nina', 0.003539), ('Noora', 0.002609), ('Olivia', 0.00384), ('Oona', 0.001707), ('Orvokki', 0.007473), ('Outi', 0.002278), ('Päivi', 0.007556), ('Päivikki', 0.002189), ('Paula', 0.004438), ('Pauliina', 0.006648), ('Petra', 0.001455), ('Pia', 0.002752), ('Piia', 0.00155), ('Pirjo', 0.006778), ('Pirkko', 0.005904), ('Raija', 0.005237), ('Raili', 0.003592), ('Riikka', 0.00301), ('Riitta', 0.008817), ('Ritva', 0.007408), ('Roosa', 0.001641), ('Saara', 0.002931), ('Sanna', 0.005027), ('Sanni', 0.001827), ('Sara', 0.003165), ('Sari', 0.00656), ('Satu', 0.005599), ('Seija', 0.005422), ('Siiri', 0.002066), ('Sini', 0.002038), ('Sinikka', 0.010005), ('Sirkka', 0.004487), ('Sirpa', 0.005252), ('Sisko', 0.005153), ('Sofia', 0.012669), ('Sonja', 0.001978), ('Susanna', 0.012647), ('Suvi', 0.003093), ('Taina', 0.002224), ('Tanja', 0.002577), ('Tarja', 0.005886), ('Taru', 0.001492), ('Teija', 0.001634), ('Tellervo', 0.007298), ('Terhi', 0.001779), ('Terttu', 0.004408), ('Tiia', 0.002003), ('Tiina', 0.006154), ('Tuija', 0.002932), ('Tuula', 0.007947), ('Tuuli', 0.001425), ('Tuulia', 0.004341), ('Tuulikki', 0.013373), ('Ulla', 0.004552), ('Veera', 0.002453), ('Venla', 0.001985), ('Viivi', 0.001505), ('Vilhelmiina', 0.002004), ('Vilma', 0.001724), ('Virpi', 0.00213), ('Vuokko', 0.001466)))
A:faker.providers.person.fi_FI.__init__.first_names_male->OrderedDict((('Aapo', 0.001263), ('Aarne', 0.001939), ('Aaro', 0.001601), ('Aaron', 0.001246), ('Aatos', 0.001552), ('Ahti', 0.001192), ('Aimo', 0.001399), ('Aki', 0.001881), ('Akseli', 0.002333), ('Aleksanteri', 0.002618), ('Aleksi', 0.008346), ('Alexander', 0.002728), ('Allan', 0.00227), ('Anders', 0.001411), ('Anssi', 0.001464), ('Antero', 0.029891), ('Anton', 0.002652), ('Antti', 0.011971), ('Ari', 0.006403), ('Armas', 0.003609), ('Arto', 0.004059), ('Arttu', 0.00228), ('Artturi', 0.001853), ('Arvo', 0.001578), ('Asko', 0.001363), ('Atte', 0.001392), ('Aukusti', 0.002011), ('Aulis', 0.002725), ('Benjamin', 0.002089), ('Christian', 0.002142), ('Daniel', 0.002919), ('Edvard', 0.001248), ('Eelis', 0.001359), ('Eemeli', 0.004734), ('Eemil', 0.002606), ('Eerik', 0.001629), ('Eero', 0.005572), ('Eetu', 0.003098), ('Einari', 0.002263), ('Eino', 0.004304), ('Elias', 0.005129), ('Elmeri', 0.001817), ('Emil', 0.003422), ('Ensio', 0.006508), ('Erik', 0.005296), ('Erkki', 0.007568), ('Esa', 0.0043), ('Esko', 0.004194), ('Hannu', 0.007429), ('Harri', 0.004739), ('Heikki', 0.011301), ('Henri', 0.003282), ('Henrik', 0.007534), ('Henrikki', 0.001325), ('Henry', 0.001412), ('Hermanni', 0.00167), ('Iisakki', 0.001193), ('Ilari', 0.002866), ('Ilkka', 0.003098), ('Ilmari', 0.015056), ('Ismo', 0.00148), ('Jaakko', 0.008225), ('Jalmari', 0.002645), ('Jan', 0.002011), ('Jani', 0.005117), ('Janne', 0.006361), ('Jari', 0.008664), ('Jarkko', 0.002672), ('Jarmo', 0.004396), ('Jarno', 0.001681), ('Jere', 0.002255), ('Jesse', 0.002586), ('Joel', 0.002105), ('Johan', 0.003528), ('Johannes', 0.028915), ('Joni', 0.003244), ('Joona', 0.002503), ('Joonas', 0.003828), ('Joonatan', 0.001565), ('Jorma', 0.005147), ('Jouko', 0.003962), ('Jouni', 0.004093), ('Juha', 0.011567), ('Juhana', 0.001862), ('Juhani', 0.061356), ('Juho', 0.005642), ('Jukka', 0.008652), ('Julius', 0.00209), ('Jussi', 0.004772), ('Juuso', 0.002224), ('Jyrki', 0.002127), ('Kaarlo', 0.002073), ('Kai', 0.001942), ('Kalervo', 0.008502), ('Kalevi', 0.021057), ('Kalle', 0.003829), ('Kari', 0.009761), ('Karl', 0.001779), ('Kasper', 0.001177), ('Kauko', 0.002169), ('Keijo', 0.002259), ('Kim', 0.001172), ('Kimmo', 0.003441), ('Kristian', 0.011096), ('Kullervo', 0.002234), ('Kustaa', 0.001144), ('Lasse', 0.002197), ('Lassi', 0.001214), ('Lauri', 0.00755), ('Leevi', 0.002015), ('Leo', 0.003319), ('Markku', 0.00843), ('Marko', 0.006297), ('Markus', 0.009181), ('Martti', 0.005521), ('Matias', 0.013377), ('Matti', 0.01756), ('Mauno', 0.001189), ('Mauri', 0.002098), ('Miika', 0.001845), ('Mika', 0.007765), ('Mikael', 0.021621), ('Mikko', 0.009719), ('Miro', 0.001274), ('Niilo', 0.002094), ('Niklas', 0.002024), ('Niko', 0.003908), ('Oiva', 0.001202), ('Olavi', 0.030903), ('Oliver', 0.003026), ('Olli', 0.003921), ('Onni', 0.004513), ('Oskar', 0.001185), ('Oskari', 0.007745), ('Osmo', 0.001531), ('Ossi', 0.001591), ('Otto', 0.002902), ('Paavo', 0.00381), ('Pasi', 0.004109), ('Patrik', 0.001474), ('Pauli', 0.003105), ('Pekka', 0.017016), ('Pentti', 0.006344), ('Pertti', 0.004406), ('Peter', 0.001704), ('Petri', 0.00786), ('Petteri', 0.015518), ('Raimo', 0.004575), ('Rainer', 0.001478), ('Rasmus', 0.001715), ('Rauno', 0.001688), ('Reijo', 0.003919), ('Reino', 0.002166), ('Riku', 0.001803), ('Risto', 0.004678), ('Robert', 0.001478), ('Roope', 0.001412), ('Sakari', 0.013891), ('Sami', 0.00587), ('Samu', 0.001237), ('Samuel', 0.00403), ('Samuli', 0.004994), ('Santeri', 0.00346), ('Sebastian', 0.002863), ('Seppo', 0.007305), ('Simo', 0.002313), ('Taisto', 0.001514), ('Taneli', 0.00129), ('Tapani', 0.02906), ('Tapio', 0.024776), ('Tauno', 0.001795), ('Teemu', 0.004605), ('Tero', 0.003188), ('Teuvo', 0.001714), ('Timo', 0.010557), ('Toivo', 0.003649), ('Tomi', 0.00341), ('Tommi', 0.003191), ('Toni', 0.003723), ('Topias', 0.001645), ('Tuomas', 0.005948), ('Tuomo', 0.002739), ('Tuukka', 0.001175), ('Uolevi', 0.002879), ('Väinö', 0.003176), ('Valdemar', 0.00152), ('Valtteri', 0.006312), ('Veeti', 0.001673), ('Veijo', 0.001517), ('Veikko', 0.007525), ('Veli', 0.004415), ('Verneri', 0.001164), ('Vesa', 0.003926), ('Vilhelm', 0.001591), ('Vilho', 0.002303), ('Viljami', 0.003563), ('Viljo', 0.00154), ('Ville', 0.007025), ('Yrjö', 0.001912)))
A:faker.providers.person.fi_FI.__init__.first_names->OrderedDict((('Aapo', 0.001263), ('Aarne', 0.001939), ('Aaro', 0.001601), ('Aaron', 0.001246), ('Aatos', 0.001552), ('Ahti', 0.001192), ('Aimo', 0.001399), ('Aki', 0.001881), ('Akseli', 0.002333), ('Aleksanteri', 0.002618), ('Aleksi', 0.008346), ('Alexander', 0.002728), ('Allan', 0.00227), ('Anders', 0.001411), ('Anssi', 0.001464), ('Antero', 0.029891), ('Anton', 0.002652), ('Antti', 0.011971), ('Ari', 0.006403), ('Armas', 0.003609), ('Arto', 0.004059), ('Arttu', 0.00228), ('Artturi', 0.001853), ('Arvo', 0.001578), ('Asko', 0.001363), ('Atte', 0.001392), ('Aukusti', 0.002011), ('Aulis', 0.002725), ('Benjamin', 0.002089), ('Christian', 0.002142), ('Daniel', 0.002919), ('Edvard', 0.001248), ('Eelis', 0.001359), ('Eemeli', 0.004734), ('Eemil', 0.002606), ('Eerik', 0.001629), ('Eero', 0.005572), ('Eetu', 0.003098), ('Einari', 0.002263), ('Eino', 0.004304), ('Elias', 0.005129), ('Elmeri', 0.001817), ('Emil', 0.003422), ('Ensio', 0.006508), ('Erik', 0.005296), ('Erkki', 0.007568), ('Esa', 0.0043), ('Esko', 0.004194), ('Hannu', 0.007429), ('Harri', 0.004739), ('Heikki', 0.011301), ('Henri', 0.003282), ('Henrik', 0.007534), ('Henrikki', 0.001325), ('Henry', 0.001412), ('Hermanni', 0.00167), ('Iisakki', 0.001193), ('Ilari', 0.002866), ('Ilkka', 0.003098), ('Ilmari', 0.015056), ('Ismo', 0.00148), ('Jaakko', 0.008225), ('Jalmari', 0.002645), ('Jan', 0.002011), ('Jani', 0.005117), ('Janne', 0.006361), ('Jari', 0.008664), ('Jarkko', 0.002672), ('Jarmo', 0.004396), ('Jarno', 0.001681), ('Jere', 0.002255), ('Jesse', 0.002586), ('Joel', 0.002105), ('Johan', 0.003528), ('Johannes', 0.028915), ('Joni', 0.003244), ('Joona', 0.002503), ('Joonas', 0.003828), ('Joonatan', 0.001565), ('Jorma', 0.005147), ('Jouko', 0.003962), ('Jouni', 0.004093), ('Juha', 0.011567), ('Juhana', 0.001862), ('Juhani', 0.061356), ('Juho', 0.005642), ('Jukka', 0.008652), ('Julius', 0.00209), ('Jussi', 0.004772), ('Juuso', 0.002224), ('Jyrki', 0.002127), ('Kaarlo', 0.002073), ('Kai', 0.001942), ('Kalervo', 0.008502), ('Kalevi', 0.021057), ('Kalle', 0.003829), ('Kari', 0.009761), ('Karl', 0.001779), ('Kasper', 0.001177), ('Kauko', 0.002169), ('Keijo', 0.002259), ('Kim', 0.001172), ('Kimmo', 0.003441), ('Kristian', 0.011096), ('Kullervo', 0.002234), ('Kustaa', 0.001144), ('Lasse', 0.002197), ('Lassi', 0.001214), ('Lauri', 0.00755), ('Leevi', 0.002015), ('Leo', 0.003319), ('Markku', 0.00843), ('Marko', 0.006297), ('Markus', 0.009181), ('Martti', 0.005521), ('Matias', 0.013377), ('Matti', 0.01756), ('Mauno', 0.001189), ('Mauri', 0.002098), ('Miika', 0.001845), ('Mika', 0.007765), ('Mikael', 0.021621), ('Mikko', 0.009719), ('Miro', 0.001274), ('Niilo', 0.002094), ('Niklas', 0.002024), ('Niko', 0.003908), ('Oiva', 0.001202), ('Olavi', 0.030903), ('Oliver', 0.003026), ('Olli', 0.003921), ('Onni', 0.004513), ('Oskar', 0.001185), ('Oskari', 0.007745), ('Osmo', 0.001531), ('Ossi', 0.001591), ('Otto', 0.002902), ('Paavo', 0.00381), ('Pasi', 0.004109), ('Patrik', 0.001474), ('Pauli', 0.003105), ('Pekka', 0.017016), ('Pentti', 0.006344), ('Pertti', 0.004406), ('Peter', 0.001704), ('Petri', 0.00786), ('Petteri', 0.015518), ('Raimo', 0.004575), ('Rainer', 0.001478), ('Rasmus', 0.001715), ('Rauno', 0.001688), ('Reijo', 0.003919), ('Reino', 0.002166), ('Riku', 0.001803), ('Risto', 0.004678), ('Robert', 0.001478), ('Roope', 0.001412), ('Sakari', 0.013891), ('Sami', 0.00587), ('Samu', 0.001237), ('Samuel', 0.00403), ('Samuli', 0.004994), ('Santeri', 0.00346), ('Sebastian', 0.002863), ('Seppo', 0.007305), ('Simo', 0.002313), ('Taisto', 0.001514), ('Taneli', 0.00129), ('Tapani', 0.02906), ('Tapio', 0.024776), ('Tauno', 0.001795), ('Teemu', 0.004605), ('Tero', 0.003188), ('Teuvo', 0.001714), ('Timo', 0.010557), ('Toivo', 0.003649), ('Tomi', 0.00341), ('Tommi', 0.003191), ('Toni', 0.003723), ('Topias', 0.001645), ('Tuomas', 0.005948), ('Tuomo', 0.002739), ('Tuukka', 0.001175), ('Uolevi', 0.002879), ('Väinö', 0.003176), ('Valdemar', 0.00152), ('Valtteri', 0.006312), ('Veeti', 0.001673), ('Veijo', 0.001517), ('Veikko', 0.007525), ('Veli', 0.004415), ('Verneri', 0.001164), ('Vesa', 0.003926), ('Vilhelm', 0.001591), ('Vilho', 0.002303), ('Viljami', 0.003563), ('Viljo', 0.00154), ('Ville', 0.007025), ('Yrjö', 0.001912))).copy()
A:faker.providers.person.fi_FI.__init__.last_names->OrderedDict((('Aalto', 0.004189), ('Aaltonen', 0.004828), ('Aho', 0.003566), ('Ahokas', 0.001182), ('Ahola', 0.003697), ('Ahonen', 0.005301), ('Airaksinen', 0.001075), ('Alanen', 0.001124), ('Alanko', 0.001131), ('Alatalo', 0.001424), ('Andersson', 0.002447), ('Antikainen', 0.001061), ('Anttila', 0.004683), ('Anttonen', 0.00121), ('Aro', 0.00105), ('Asikainen', 0.002), ('Autio', 0.002187), ('Auvinen', 0.001732), ('Backman', 0.001331), ('Berg', 0.001362), ('Blomqvist', 0.001545), ('Eklund', 0.001737), ('Elo', 0.00113), ('Eloranta', 0.00109), ('Eriksson', 0.002454), ('Erkkilä', 0.001406), ('Eronen', 0.001765), ('Eskelinen', 0.002041), ('Eskola', 0.001747), ('Forsman', 0.001077), ('Grönroos', 0.001054), ('Gustafsson', 0.001571), ('Haapala', 0.001736), ('Haapanen', 0.00132), ('Haapaniemi', 0.001056), ('Haataja', 0.001222), ('Haavisto', 0.001782), ('Hakala', 0.004682), ('Hakkarainen', 0.00272), ('Häkkinen', 0.002513), ('Halme', 0.001566), ('Halonen', 0.003495), ('Hämäläinen', 0.009001), ('Hänninen', 0.003986), ('Hannula', 0.001522), ('Harju', 0.003153), ('Härkönen', 0.002434), ('Hartikainen', 0.002868), ('Hautala', 0.001909), ('Hautamäki', 0.00165), ('Haverinen', 0.001289), ('Heikkilä', 0.006931), ('Heikkinen', 0.008519), ('Heino', 0.00296), ('Heinonen', 0.007026), ('Heiskanen', 0.003335), ('Helenius', 0.001874), ('Helin', 0.001682), ('Helminen', 0.001458), ('Henriksson', 0.001408), ('Hietala', 0.002444), ('Hietanen', 0.00184), ('Hiltunen', 0.004889), ('Hirvonen', 0.004428), ('Hokkanen', 0.002165), ('Holappa', 0.00105), ('Holm', 0.001459), ('Holmberg', 0.001217), ('Holmström', 0.001188), ('Holopainen', 0.002501), ('Honkanen', 0.00323), ('Huhtala', 0.002066), ('Huotari', 0.001845), ('Huovinen', 0.001733), ('Huttunen', 0.003632), ('Huuskonen', 0.001163), ('Hytönen', 0.001515), ('Hyttinen', 0.001835), ('Hyvärinen', 0.002703), ('Hyvönen', 0.002406), ('Ihalainen', 0.001044), ('Ikonen', 0.00358), ('Immonen', 0.003231), ('Jaakkola', 0.002386), ('Jääskeläinen', 0.002913), ('Jaatinen', 0.001308), ('Jalonen', 0.001474), ('Jansson', 0.00146), ('Jäntti', 0.00125), ('Järvelä', 0.001204), ('Järvenpää', 0.001797), ('Järvi', 0.001061), ('Järvinen', 0.007928), ('Jauhiainen', 0.001305), ('Johansson', 0.003434), ('Jokela', 0.002356), ('Jokinen', 0.005951), ('Juntunen', 0.002955), ('Jussila', 0.002127), ('Juvonen', 0.001677), ('Kähkönen', 0.00158), ('Kaikkonen', 0.001253), ('Kainulainen', 0.001727), ('Kallio', 0.004876), ('Kämäräinen', 0.001118), ('Kanerva', 0.001436), ('Kangas', 0.002883), ('Kankaanpää', 0.001337), ('Kantola', 0.001513), ('Karhu', 0.00234), ('Karhunen', 0.001157), ('Kari', 0.001082), ('Karjalainen', 0.006036), ('Kärki', 0.001268), ('Kärkkäinen', 0.003561), ('Karlsson', 0.002809), ('Karppinen', 0.003072), ('Karttunen', 0.001799), ('Karvinen', 0.001394), ('Karvonen', 0.002385), ('Kauppila', 0.00126), ('Kauppinen', 0.003787), ('Keinänen', 0.001261), ('Kemppainen', 0.003777), ('Keränen', 0.002874), ('Keskinen', 0.001651), ('Keskitalo', 0.00109), ('Ketola', 0.001792), ('Kettunen', 0.003871), ('Kilpeläinen', 0.001374), ('Kinnunen', 0.006796), ('Kiuru', 0.001089), ('Kivelä', 0.002164), ('Kivimäki', 0.001619), ('Kivinen', 0.0013), ('Kiviniemi', 0.001402), ('Kivistö', 0.001447), ('Koistinen', 0.001988), ('Koivisto', 0.004667), ('Koivula', 0.002017), ('Koivunen', 0.001881), ('Kokko', 0.002672), ('Kokkonen', 0.003128), ('Kolehmainen', 0.002155), ('Komulainen', 0.001657), ('Konttinen', 0.001132), ('Koponen', 0.003424), ('Korhonen', 0.011042), ('Korpela', 0.002431), ('Korpi', 0.001281), ('Kortelainen', 0.001539), ('Koskela', 0.003733), ('Koski', 0.003231), ('Koskinen', 0.008414), ('Kosonen', 0.00231), ('Kovanen', 0.001198), ('Kuisma', 0.001348), ('Kujala', 0.002234), ('Kukkonen', 0.002415), ('Kulmala', 0.001901), ('Kumpulainen', 0.001781), ('Kuosmanen', 0.001577), ('Kurki', 0.001386), ('Kuronen', 0.001149), ('Kuusela', 0.001972), ('Kuusisto', 0.002479), ('Kyllönen', 0.001904), ('Laakkonen', 0.00201), ('Laakso', 0.00436), ('Laaksonen', 0.004505), ('Lähteenmäki', 0.001609), ('Lahti', 0.00373), ('Lahtinen', 0.005427), ('Laiho', 0.001374), ('Laine', 0.008802), ('Laitinen', 0.006223), ('Lammi', 0.00109), ('Lampinen', 0.002147), ('Lankinen', 0.001053), ('Lappalainen', 0.003902), ('Lassila', 0.001343), ('Latvala', 0.001139), ('Laukkanen', 0.002981), ('Laurila', 0.00268), ('Lehikoinen', 0.001339), ('Lehtimäki', 0.001726), ('Lehtinen', 0.007344), ('Lehto', 0.004389), ('Lehtola', 0.001536), ('Lehtonen', 0.00786), ('Leino', 0.002813), ('Leinonen', 0.004891), ('Lepistö', 0.001981), ('Leppänen', 0.005224), ('Leskinen', 0.002572), ('Liimatainen', 0.001943), ('Lilja', 0.00115), ('Lindberg', 0.001978), ('Lindfors', 0.001504), ('Lindgren', 0.00175), ('Lindholm', 0.003367), ('Lindqvist', 0.002171), ('Lindroos', 0.002225), ('Lindström', 0.002755), ('Linna', 0.001114), ('Lipponen', 0.00129), ('Liukkonen', 0.001696), ('Luoma', 0.00193), ('Luukkonen', 0.001845), ('Määttä', 0.003095), ('Mäenpää', 0.00279), ('Mäkelä', 0.009299), ('Mäki', 0.003044), ('Mäkinen', 0.009918), ('Makkonen', 0.002549), ('Malinen', 0.002249), ('Manninen', 0.004752), ('Männistö', 0.001155), ('Mäntylä', 0.001364), ('Markkanen', 0.001624), ('Martikainen', 0.002756), ('Marttila', 0.001834), ('Marttinen', 0.001083), ('Matikainen', 0.00149), ('Matilainen', 0.001526), ('Mattila', 0.005845), ('Mattsson', 0.001349), ('Meriläinen', 0.001503), ('Miettinen', 0.004877), ('Mikkola', 0.003284), ('Mikkonen', 0.00345), ('Moilanen', 0.004065), ('Moisio', 0.001273), ('Mononen', 0.001237), ('Muhonen', 0.001141), ('Mustonen', 0.004238), ('Myllymäki', 0.001733), ('Nevala', 0.001071), ('Nevalainen', 0.002639), ('Niemelä', 0.004065), ('Niemi', 0.006993), ('Nieminen', 0.009851), ('Niiranen', 0.001315), ('Nikula', 0.001193), ('Niskanen', 0.003346), ('Nissinen', 0.002092), ('Nousiainen', 0.002075), ('Nurmi', 0.004112), ('Nurminen', 0.003196), ('Nuutinen', 0.001781), ('Nyberg', 0.001381), ('Nykänen', 0.002561), ('Nylund', 0.001545), ('Nyman', 0.003435), ('Oikarinen', 0.00114), ('Oinonen', 0.001349), ('Ojala', 0.005237), ('Ojanen', 0.001396), ('Oksanen', 0.003372), ('Ollikainen', 0.001631), ('Ollila', 0.001614), ('Pääkkönen', 0.001404), ('Paananen', 0.002837), ('Paavilainen', 0.001028), ('Paavola', 0.001687), ('Pajunen', 0.001396), ('Pakarinen', 0.001818), ('Palomäki', 0.001161), ('Parkkinen', 0.001273), ('Partanen', 0.003879), ('Parviainen', 0.002908), ('Pasanen', 0.002364), ('Pehkonen', 0.001178), ('Pekkala', 0.001172), ('Pekkarinen', 0.0011), ('Pelkonen', 0.001933), ('Peltola', 0.003401), ('Peltonen', 0.004111), ('Peltoniemi', 0.001325), ('Pennanen', 0.001857), ('Penttilä', 0.001723), ('Penttinen', 0.001875), ('Perälä', 0.001592), ('Pesonen', 0.003534), ('Pietilä', 0.001874), ('Piirainen', 0.001336), ('Pirinen', 0.001318), ('Pitkänen', 0.004831), ('Pohjola', 0.001266), ('Pöllänen', 0.001097), ('Puhakka', 0.001413), ('Pulkkinen', 0.003995), ('Puranen', 0.001053), ('Puustinen', 0.001385), ('Raatikainen', 0.001244), ('Räisänen', 0.002146), ('Rajala', 0.002963), ('Ranta', 0.002422), ('Rantala', 0.004243), ('Rantanen', 0.006076), ('Räsänen', 0.004444), ('Räty', 0.001319), ('Rauhala', 0.001391), ('Rautiainen', 0.00292), ('Rautio', 0.002231), ('Reinikainen', 0.001112), ('Repo', 0.001805), ('Riihimäki', 0.001097), ('Riikonen', 0.001838), ('Rinne', 0.002123), ('Rintala', 0.001596), ('Rissanen', 0.003116), ('Ronkainen', 0.001757), ('Rönkkö', 0.001111), ('Rossi', 0.001203), ('Ruotsalainen', 0.002752), ('Ruuskanen', 0.001251), ('Rytkönen', 0.00144), ('Ryynänen', 0.00112), ('Saarela', 0.002292), ('Saari', 0.003871), ('Saarinen', 0.007247), ('Saastamoinen', 0.001741), ('Sainio', 0.001224), ('Sallinen', 0.001148), ('Salmela', 0.002572), ('Salmi', 0.003705), ('Salminen', 0.007146), ('Salo', 0.006336), ('Salomaa', 0.001099), ('Salonen', 0.006757), ('Savolainen', 0.005448), ('Seppä', 0.001142), ('Seppälä', 0.004007), ('Seppänen', 0.003731), ('Sihvonen', 0.001053), ('Sillanpää', 0.002264), ('Silvennoinen', 0.001614), ('Simola', 0.001116), ('Simonen', 0.001049), ('Sipilä', 0.001582), ('Sirén', 0.001129), ('Sirviö', 0.001089), ('Sjöblom', 0.001119), ('Soini', 0.001102), ('Soininen', 0.001422), ('Suhonen', 0.001834), ('Suomalainen', 0.001609), ('Suominen', 0.003582), ('Sutinen', 0.001056), ('Syrjälä', 0.001196), ('Tähtinen', 0.001028), ('Taipale', 0.001378), ('Takala', 0.001797), ('Tamminen', 0.002461), ('Tanskanen', 0.001536), ('Tarvainen', 0.001396), ('Taskinen', 0.001633), ('Tervo', 0.001419), ('Tiainen', 0.00234), ('Tiihonen', 0.001149), ('Tikka', 0.001325), ('Tikkanen', 0.00266), ('Timonen', 0.002211), ('Tirkkonen', 0.001193), ('Toivanen', 0.002668), ('Toivonen', 0.004311), ('Tolonen', 0.002122), ('Tolvanen', 0.001917), ('Tuomi', 0.001608), ('Tuominen', 0.006098), ('Tuovinen', 0.001894), ('Turpeinen', 0.001528), ('Turunen', 0.006523), ('Uotila', 0.001053), ('Uusitalo', 0.002687), ('Väänänen', 0.002319), ('Vainio', 0.003358), ('Väisänen', 0.004904), ('Välimäki', 0.001587), ('Valkama', 0.001139), ('Valkonen', 0.001248), ('Valtonen', 0.002171), ('Varis', 0.001436), ('Vartiainen', 0.002039), ('Väyrynen', 0.001426), ('Venäläinen', 0.001262), ('Vesterinen', 0.001259), ('Viitala', 0.001642), ('Viitanen', 0.002647), ('Viljanen', 0.001859), ('Virta', 0.002228), ('Virtanen', 0.01083), ('Voutilainen', 0.001853), ('Vuorela', 0.001156), ('Vuori', 0.001701), ('Vuorinen', 0.003188), ('Ylinen', 0.00105), ('Ylitalo', 0.001438), ('Ylönen', 0.00125)))
faker.providers.person.fi_FI.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/it_IT/__init__.py----------------------------------------
faker.providers.person.it_IT.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/zh_TW/__init__.py----------------------------------------
A:faker.providers.person.zh_TW.__init__.last_names->OrderedDict((('王', 7.17), ('李', 7.0), ('張', 6.74), ('劉', 5.1), ('陳', 4.61), ('楊', 3.22), ('黃', 2.45), ('吳', 2.0), ('趙', 2.0), ('周', 1.9), ('徐', 1.45), ('孫', 1.38), ('馬', 1.29), ('朱', 1.28), ('胡', 1.16), ('林', 1.13), ('郭', 1.13), ('何', 1.06), ('高', 1.0), ('羅', 0.95), ('鄭', 0.93), ('梁', 0.85), ('謝', 0.76), ('宋', 0.7), ('唐', 0.69), ('許', 0.66), ('鄧', 0.62), ('馮', 0.62), ('韓', 0.61), ('曹', 0.6), ('曾', 0.58), ('彭', 0.58), ('蕭', 0.56), ('蔡', 0.53), ('潘', 0.52), ('田', 0.52), ('董', 0.51), ('袁', 0.5), ('於', 0.48), ('余', 0.48), ('葉', 0.48), ('蔣', 0.48), ('杜', 0.47), ('蘇', 0.46), ('魏', 0.45), ('程', 0.45), ('呂', 0.45), ('丁', 0.43), ('沈', 0.41), ('任', 0.41), ('姚', 0.4), ('盧', 0.4), ('傅', 0.4), ('鐘', 0.4), ('姜', 0.39), ('崔', 0.38), ('譚', 0.38), ('廖', 0.37), ('範', 0.36), ('汪', 0.36), ('陸', 0.36), ('金', 0.35), ('石', 0.34), ('戴', 0.34), ('賈', 0.33), ('韋', 0.32), ('夏', 0.32), ('邱', 0.32), ('方', 0.31), ('侯', 0.3), ('鄒', 0.3), ('熊', 0.29), ('孟', 0.29), ('秦', 0.29), ('白', 0.28), ('江', 0.28), ('閻', 0.27), ('薛', 0.26), ('尹', 0.26), ('段', 0.24), ('雷', 0.24), ('黎', 0.22), ('史', 0.21), ('龍', 0.21), ('陶', 0.21), ('賀', 0.21), ('顧', 0.2), ('毛', 0.2), ('郝', 0.2), ('龔', 0.2), ('邵', 0.2), ('萬', 0.19), ('錢', 0.19), ('嚴', 0.19), ('賴', 0.18), ('覃', 0.18), ('洪', 0.18), ('武', 0.18), ('莫', 0.18), ('孔', 0.17), ('湯', 0.17), ('向', 0.17), ('常', 0.16), ('溫', 0.16), ('康', 0.16), ('施', 0.15), ('文', 0.15), ('牛', 0.15), ('樊', 0.15), ('葛', 0.15), ('邢', 0.14), ('安', 0.13), ('齊', 0.13), ('易', 0.13), ('喬', 0.13), ('伍', 0.13), ('龐', 0.13), ('顏', 0.12), ('倪', 0.12), ('莊', 0.12), ('聶', 0.12), ('章', 0.12), ('魯', 0.11), ('嶽', 0.11), ('翟', 0.11), ('殷', 0.11), ('詹', 0.11), ('申', 0.11), ('歐', 0.11), ('耿', 0.11), ('關', 0.1), ('蘭', 0.1), ('焦', 0.1), ('俞', 0.1), ('左', 0.1), ('柳', 0.1), ('甘', 0.095), ('祝', 0.09), ('包', 0.087), ('寧', 0.083), ('尚', 0.082), ('符', 0.082), ('舒', 0.082), ('阮', 0.082), ('柯', 0.08), ('紀', 0.08), ('梅', 0.079), ('童', 0.079), ('淩', 0.078), ('畢', 0.078), ('單', 0.076), ('季', 0.076), ('裴', 0.076), ('霍', 0.075), ('塗', 0.075), ('成', 0.075), ('苗', 0.075), ('谷', 0.075), ('盛', 0.074), ('曲', 0.074), ('翁', 0.073), ('冉', 0.073), ('駱', 0.073), ('藍', 0.072), ('路', 0.072), ('遊', 0.071), ('辛', 0.07), ('靳', 0.069), ('歐陽', 0.068), ('管', 0.065), ('柴', 0.065), ('蒙', 0.062), ('鮑', 0.062), ('華', 0.061), ('喻', 0.061), ('祁', 0.061), ('蒲', 0.056), ('房', 0.056), ('滕', 0.055), ('屈', 0.055), ('饒', 0.055), ('解', 0.053), ('牟', 0.053), ('艾', 0.052), ('尤', 0.052), ('陽', 0.05), ('時', 0.05), ('穆', 0.048), ('農', 0.047), ('司', 0.044), ('卓', 0.043), ('古', 0.043), ('吉', 0.043), ('繆', 0.043), ('簡', 0.043), ('車', 0.043), ('項', 0.043), ('連', 0.043), ('蘆', 0.042), ('麥', 0.041), ('褚', 0.041), ('婁', 0.04), ('竇', 0.04), ('戚', 0.04), ('岑', 0.039), ('景', 0.039), ('黨', 0.039), ('宮', 0.039), ('費', 0.039), ('蔔', 0.038), ('冷', 0.038), ('晏', 0.038), ('席', 0.036), ('衛', 0.036), ('米', 0.035), ('柏', 0.035), ('宗', 0.034), ('瞿', 0.033), ('桂', 0.033), ('全', 0.033), ('佟', 0.033), ('應', 0.033), ('臧', 0.032), ('閔', 0.032), ('茍', 0.032), ('鄔', 0.032), ('邊', 0.032), ('卞', 0.032), ('姬', 0.032), ('師', 0.031), ('和', 0.031), ('仇', 0.03), ('欒', 0.03), ('隋', 0.03), ('商', 0.03), ('刁', 0.03), ('沙', 0.03), ('榮', 0.029), ('巫', 0.029), ('寇', 0.029), ('桑', 0.028), ('郎', 0.028), ('甄', 0.027), ('叢', 0.027), ('仲', 0.027), ('虞', 0.026), ('敖', 0.026), ('鞏', 0.026), ('明', 0.026), ('佘', 0.025), ('池', 0.025), ('查', 0.025), ('麻', 0.025), ('苑', 0.025), ('遲', 0.024), ('鄺', 0.024), ('官', 0.023), ('封', 0.023), ('談', 0.023), ('匡', 0.023), ('鞠', 0.23), ('惠', 0.022), ('荊', 0.022), ('樂', 0.022), ('冀', 0.021), ('郁', 0.021), ('胥', 0.021), ('南', 0.021), ('班', 0.021), ('儲', 0.021), ('原', 0.02), ('栗', 0.02), ('燕', 0.02), ('楚', 0.02), ('鄢', 0.02), ('勞', 0.019), ('諶', 0.019), ('奚', 0.017), ('皮', 0.017), ('粟', 0.017), ('冼', 0.017), ('藺', 0.017), ('樓', 0.017), ('盤', 0.017), ('滿', 0.016), ('聞', 0.016), ('位', 0.016), ('厲', 0.016), ('伊', 0.016), ('仝', 0.015), ('區', 0.015), ('郜', 0.015), ('海', 0.015), ('闞', 0.015), ('花', 0.015), ('權', 0.014), ('強', 0.014), ('帥', 0.014), ('屠', 0.014), ('豆', 0.014), ('樸', 0.014), ('蓋', 0.014), ('練', 0.014), ('廉', 0.014), ('禹', 0.014), ('井', 0.013), ('祖', 0.013), ('漆', 0.013), ('巴', 0.013), ('豐', 0.013), ('支', 0.013), ('卿', 0.013), ('國', 0.013), ('狄', 0.013), ('平', 0.013), ('計', 0.012), ('索', 0.012), ('宣', 0.012), ('晉', 0.012), ('相', 0.012), ('初', 0.012), ('門', 0.012), ('雲', 0.012), ('容', 0.012), ('敬', 0.011), ('來', 0.011), ('扈', 0.011), ('晁', 0.011), ('芮', 0.011), ('都', 0.011), ('普', 0.011), ('闕', 0.011), ('浦', 0.011), ('戈', 0.011), ('伏', 0.011), ('鹿', 0.011), ('薄', 0.011), ('邸', 0.011), ('雍', 0.01), ('辜', 0.01), ('羊', 0.01), ('阿', 0.01), ('烏', 0.01), ('母', 0.01), ('裘', 0.01), ('亓', 0.01), ('修', 0.01), ('邰', 0.01), ('赫', 0.01), ('杭', 0.01), ('況', 0.0094), ('那', 0.0093), ('宿', 0.0093), ('鮮', 0.0092), ('印', 0.0091), ('逯', 0.0091), ('隆', 0.009), ('茹', 0.009), ('諸', 0.0089), ('戰', 0.0088), ('慕', 0.0086), ('危', 0.0084), ('玉', 0.0084), ('銀', 0.0084), ('亢', 0.0083), ('嵇', 0.0082), ('公', 0.0082), ('哈', 0.0081), ('湛', 0.0079), ('賓', 0.0077), ('戎', 0.0076), ('勾', 0.0076), ('茅', 0.0076), ('利', 0.0076), ('於', 0.0074), ('呼', 0.0074), ('居', 0.0074), ('揭', 0.0073), ('幹', 0.0072), ('但', 0.0072), ('尉', 0.0071), ('冶', 0.0071), ('斯', 0.007), ('元', 0.0069), ('束', 0.0068), ('檀', 0.0068), ('衣', 0.0067), ('信', 0.0067), ('展', 0.0067), ('陰', 0.0067), ('昝', 0.0066), ('智', 0.0065), ('幸', 0.0065), ('奉', 0.0064), ('植', 0.0064), ('衡', 0.0063), ('富', 0.0063), ('堯', 0.006), ('閉', 0.006), ('由', 0.006)))
A:faker.providers.person.zh_TW.__init__.pattern->self.random_element(self.romanized_formats)
faker.providers.person.zh_TW.__init__.Provider(PersonProvider)
faker.providers.person.zh_TW.__init__.Provider.first_romanized_name(self)
faker.providers.person.zh_TW.__init__.Provider.last_romanized_name(self)
faker.providers.person.zh_TW.__init__.Provider.romanized_name(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/sv_SE/__init__.py----------------------------------------
A:faker.providers.person.sv_SE.__init__.first_names_female->OrderedDict((('Agnes', 0.001745), ('Agneta', 0.004777), ('Aina', 0.002274), ('Alexandra', 0.002762), ('Alice', 0.003714), ('Amanda', 0.003099), ('Anette', 0.004177), ('Angelica', 0.001462), ('Anita', 0.008407), ('Ann', 0.004749), ('Ann-Charlotte', 0.001562), ('Ann-Christin', 0.001383), ('Ann-Mari', 0.001194), ('Ann-Marie', 0.001974), ('Anna', 0.042584), ('Anna-Karin', 0.001175), ('Anna-Lena', 0.001167), ('Anne', 0.002491), ('Anne-Marie', 0.001349), ('Anneli', 0.003702), ('Annelie', 0.00147), ('Annette', 0.001469), ('Annie', 0.001357), ('Annika', 0.005399), ('Asta', 0.001437), ('Astrid', 0.006047), ('Barbro', 0.006869), ('Berit', 0.004732), ('Birgit', 0.005225), ('Birgitta', 0.024532), ('Brita', 0.002495), ('Britt', 0.00633), ('Britt-Marie', 0.00243), ('Britta', 0.002882), ('Camilla', 0.004547), ('Carin', 0.001447), ('Carina', 0.006187), ('Carolina', 0.001716), ('Caroline', 0.004014), ('Catarina', 0.001216), ('Catharina', 0.001196), ('Cecilia', 0.008249), ('Charlotta', 0.004212), ('Charlotte', 0.003875), ('Christina', 0.013235), ('Christine', 0.001515), ('Dagmar', 0.001687), ('Dagny', 0.001481), ('Doris', 0.001518), ('Ebba', 0.00223), ('Edit', 0.00162), ('Eivor', 0.002205), ('Eleonora', 0.001731), ('Elin', 0.006729), ('Elisabet', 0.02457), ('Elisabeth', 0.02537), ('Elise', 0.001198), ('Ella', 0.001269), ('Ellen', 0.002524), ('Ellinor', 0.001304), ('Elsa', 0.006168), ('Elsie', 0.001302), ('Elvira', 0.001736), ('Emelie', 0.003036), ('Emilia', 0.002176), ('Emma', 0.007459), ('Erika', 0.003543), ('Ester', 0.002201), ('Eva', 0.026496), ('Evelina', 0.00193), ('Evy', 0.001609), ('Felicia', 0.001269), ('Frida', 0.003423), ('Gabriella', 0.001245), ('Gerd', 0.003404), ('Gertrud', 0.002159), ('Greta', 0.002604), ('Gudrun', 0.0027), ('Gun', 0.004988), ('Gunborg', 0.003021), ('Gunhild', 0.003072), ('Gunilla', 0.00754), ('Gunnel', 0.003826), ('Gunvor', 0.003507), ('Hanna', 0.005512), ('Harriet', 0.001441), ('Helen', 0.002647), ('Helena', 0.011208), ('Helene', 0.002163), ('Helén', 0.001202), ('Hillevi', 0.001214), ('Ida', 0.004826), ('Inga', 0.005928), ('Inga-Lill', 0.001723), ('Ingeborg', 0.007051), ('Ingegerd', 0.006428), ('Ingegärd', 0.004587), ('Ingela', 0.002701), ('Inger', 0.010945), ('Ingrid', 0.01811), ('Irene', 0.007176), ('Iris', 0.001497), ('Irma', 0.001313), ('Iréne', 0.001696), ('Jeanette', 0.002204), ('Jennie', 0.001404), ('Jenny', 0.006327), ('Jessica', 0.003248), ('Johanna', 0.008736), ('Josefin', 0.00235), ('Josefina', 0.001294), ('Josefine', 0.001891), ('Julia', 0.002653), ('Kajsa', 0.001214), ('Karin', 0.023977), ('Karolina', 0.003098), ('Katarina', 0.00666), ('Kerstin', 0.01332), ('Kristin', 0.001999), ('Kristina', 0.024482), ('Laila', 0.001753), ('Lena', 0.011317), ('Lilian', 0.002505), ('Lillemor', 0.001571), ('Lilly', 0.001785), ('Lina', 0.002062), ('Linda', 0.006682), ('Linn', 0.001229), ('Linnea', 0.007713), ('Linnéa', 0.013337), ('Lisa', 0.004293), ('Lisbeth', 0.00258), ('Louise', 0.006398), ('Lovisa', 0.003016), ('Madeleine', 0.002603), ('Magdalena', 0.002318), ('Maj', 0.003649), ('Maj-Britt', 0.002919), ('Maja', 0.001462), ('Malin', 0.006314), ('Margareta', 0.037908), ('Margaretha', 0.003602), ('Margit', 0.00469), ('Mari', 0.002098), ('Maria', 0.061211), ('Marianne', 0.013455), ('Marie', 0.016343), ('Marie-Louise', 0.001508), ('Marina', 0.001195), ('Marita', 0.00249), ('Martina', 0.001657), ('Mary', 0.001719), ('Matilda', 0.004324), ('Maud', 0.001868), ('Mikaela', 0.001418), ('Mona', 0.003072), ('Monica', 0.005729), ('Monika', 0.002778), ('Märta', 0.004609), ('Nina', 0.00182), ('Olivia', 0.001516), ('Pernilla', 0.002416), ('Petra', 0.001964), ('Pia', 0.003138), ('Ragnhild', 0.001655), ('Rebecca', 0.001585), ('Rebecka', 0.001631), ('Rose-Marie', 0.001345), ('Rut', 0.004635), ('Ruth', 0.002177), ('Sandra', 0.003674), ('Sara', 0.007473), ('Signe', 0.002761), ('Sigrid', 0.00213), ('Siv', 0.00586), ('Sofia', 0.011263), ('Sofie', 0.003466), ('Solveig', 0.002937), ('Sonja', 0.00403), ('Stina', 0.002603), ('Susanna', 0.001707), ('Susanne', 0.006845), ('Svea', 0.002225), ('Sylvia', 0.00163), ('Teresia', 0.001703), ('Therese', 0.00442), ('Therése', 0.001215), ('Ulla', 0.009528), ('Ulla-Britt', 0.001683), ('Ulrika', 0.005582), ('Valborg', 0.001616), ('Vera', 0.001495), ('Veronica', 0.001985), ('Victoria', 0.00249), ('Viktoria', 0.006375), ('Vilhelmina', 0.001311), ('Viola', 0.009669), ('Ylva', 0.001296), ('Yvonne', 0.004993), ('Åsa', 0.005076)))
A:faker.providers.person.sv_SE.__init__.first_names_male->OrderedDict((('Adam', 0.00177), ('Albert', 0.001419), ('Albin', 0.001392), ('Alexander', 0.006474), ('Alf', 0.003571), ('Alfred', 0.001069), ('Allan', 0.003591), ('Alvar', 0.001072), ('Anders', 0.025312), ('Andreas', 0.008399), ('André', 0.001357), ('Anton', 0.00293), ('Arne', 0.010637), ('Arnold', 0.001027), ('Artur', 0.001269), ('Arvid', 0.002169), ('Axel', 0.00691), ('Bengt', 0.014569), ('Benny', 0.001397), ('Bernt', 0.002951), ('Bert', 0.001153), ('Bertil', 0.010902), ('Birger', 0.003109), ('Björn', 0.007803), ('Bo', 0.011988), ('Bror', 0.003281), ('Börje', 0.003853), ('Carl', 0.013483), ('Christer', 0.007964), ('Christian', 0.004359), ('Christoffer', 0.002267), ('Claes', 0.002743), ('Conny', 0.001928), ('Dan', 0.00291), ('Daniel', 0.009526), ('David', 0.005483), ('Dennis', 0.001779), ('Edvard', 0.001253), ('Edvin', 0.001559), ('Egon', 0.001019), ('Einar', 0.002486), ('Elias', 0.001085), ('Emanuel', 0.003777), ('Emil', 0.00477), ('Eric', 0.003387), ('Erik', 0.041018), ('Erland', 0.00145), ('Erling', 0.001173), ('Ernst', 0.002205), ('Evert', 0.003313), ('Filip', 0.001959), ('Folke', 0.002876), ('Fredrik', 0.01177), ('Georg', 0.003446), ('Gerhard', 0.001174), ('Gert', 0.001548), ('Gunnar', 0.017957), ('Gustaf', 0.00742), ('Gustav', 0.009406), ('Göran', 0.012287), ('Gösta', 0.00559), ('Göte', 0.002297), ('Hans', 0.016636), ('Harald', 0.002359), ('Harry', 0.002872), ('Helge', 0.002005), ('Henning', 0.001194), ('Henrik', 0.007644), ('Henry', 0.003134), ('Herbert', 0.001257), ('Hjalmar', 0.001179), ('Holger', 0.001641), ('Hugo', 0.001976), ('Håkan', 0.006974), ('Inge', 0.00288), ('Ingemar', 0.009024), ('Ingmar', 0.001138), ('Ingvar', 0.006758), ('Ivan', 0.001668), ('Ivar', 0.002943), ('Jacob', 0.001023), ('Jakob', 0.001299), ('Jan', 0.0173), ('Jan-Erik', 0.001094), ('Jens', 0.002221), ('Jesper', 0.002177), ('Jimmy', 0.00212), ('Joakim', 0.004606), ('Joel', 0.001778), ('Johan', 0.021986), ('Johannes', 0.003538), ('John', 0.008741), ('Johnny', 0.001499), ('Jonas', 0.007433), ('Jonathan', 0.001616), ('Jonny', 0.00142), ('Josef', 0.001131), ('Juhani', 0.001368), ('Jörgen', 0.003869), ('Karl', 0.030342), ('Kenneth', 0.00354), ('Kent', 0.004156), ('Kim', 0.001298), ('Kjell', 0.007932), ('Klas', 0.001989), ('Knut', 0.002668), ('Krister', 0.002433), ('Kristian', 0.001849), ('Kristoffer', 0.001548), ('Kurt', 0.004453), ('Lars', 0.03162), ('Lars-erik', 0.001056), ('Leif', 0.00918), ('Lennart', 0.019721), ('Linus', 0.001817), ('Ludvig', 0.001014), ('Magnus', 0.009301), ('Marcus', 0.004065), ('Markus', 0.002075), ('Martin', 0.008861), ('Mathias', 0.001551), ('Mats', 0.008403), ('Mattias', 0.005657), ('Max', 0.001234), ('Michael', 0.004456), ('Mikael', 0.015583), ('Morgan', 0.001377), ('Nicklas', 0.001201), ('Niclas', 0.001643), ('Niklas', 0.003704), ('Nils', 0.018831), ('Ola', 0.002691), ('Olle', 0.001666), ('Olof', 0.017132), ('Olov', 0.005457), ('Oscar', 0.002606), ('Oskar', 0.005198), ('Otto', 0.001361), ('Ove', 0.004994), ('Patrik', 0.005091), ('Paul', 0.002455), ('Per', 0.02269), ('Peter', 0.014015), ('Petter', 0.00115), ('Philip', 0.00134), ('Pierre', 0.001014), ('Pontus', 0.001652), ('Pär', 0.002043), ('Ragnar', 0.002983), ('Rasmus', 0.001323), ('Reinhold', 0.001075), ('Richard', 0.002053), ('Rickard', 0.00283), ('Rikard', 0.001272), ('Robert', 0.006959), ('Robin', 0.003012), ('Roger', 0.005033), ('Roland', 0.006879), ('Rolf', 0.007914), ('Ronny', 0.001561), ('Rune', 0.0056), ('Samuel', 0.001473), ('Sebastian', 0.003275), ('Sigurd', 0.001099), ('Sigvard', 0.002438), ('Simon', 0.003338), ('Sixten', 0.001299), ('Staffan', 0.001627), ('Stefan', 0.009034), ('Sten', 0.003911), ('Stig', 0.009343), ('Sture', 0.002518), ('Sune', 0.002173), ('Sven', 0.017897), ('Sören', 0.002376), ('Tage', 0.002198), ('Thomas', 0.00738), ('Tobias', 0.003623), ('Tom', 0.000977), ('Tomas', 0.004168), ('Tommy', 0.005526), ('Tony', 0.001814), ('Torbjörn', 0.002984), ('Tord', 0.001449), ('Tore', 0.00263), ('Torsten', 0.002915), ('Ture', 0.001212), ('Ulf', 0.008541), ('Uno', 0.001812), ('Urban', 0.001584), ('Valdemar', 0.002204), ('Valter', 0.001371), ('Verner', 0.001196), ('Victor', 0.001543), ('Viktor', 0.00308), ('Vilhelm', 0.003785), ('Wilhelm', 0.002195), ('William', 0.002332), ('Yngve', 0.002698), ('Åke', 0.013837)))
A:faker.providers.person.sv_SE.__init__.first_names->OrderedDict((('Adam', 0.00177), ('Albert', 0.001419), ('Albin', 0.001392), ('Alexander', 0.006474), ('Alf', 0.003571), ('Alfred', 0.001069), ('Allan', 0.003591), ('Alvar', 0.001072), ('Anders', 0.025312), ('Andreas', 0.008399), ('André', 0.001357), ('Anton', 0.00293), ('Arne', 0.010637), ('Arnold', 0.001027), ('Artur', 0.001269), ('Arvid', 0.002169), ('Axel', 0.00691), ('Bengt', 0.014569), ('Benny', 0.001397), ('Bernt', 0.002951), ('Bert', 0.001153), ('Bertil', 0.010902), ('Birger', 0.003109), ('Björn', 0.007803), ('Bo', 0.011988), ('Bror', 0.003281), ('Börje', 0.003853), ('Carl', 0.013483), ('Christer', 0.007964), ('Christian', 0.004359), ('Christoffer', 0.002267), ('Claes', 0.002743), ('Conny', 0.001928), ('Dan', 0.00291), ('Daniel', 0.009526), ('David', 0.005483), ('Dennis', 0.001779), ('Edvard', 0.001253), ('Edvin', 0.001559), ('Egon', 0.001019), ('Einar', 0.002486), ('Elias', 0.001085), ('Emanuel', 0.003777), ('Emil', 0.00477), ('Eric', 0.003387), ('Erik', 0.041018), ('Erland', 0.00145), ('Erling', 0.001173), ('Ernst', 0.002205), ('Evert', 0.003313), ('Filip', 0.001959), ('Folke', 0.002876), ('Fredrik', 0.01177), ('Georg', 0.003446), ('Gerhard', 0.001174), ('Gert', 0.001548), ('Gunnar', 0.017957), ('Gustaf', 0.00742), ('Gustav', 0.009406), ('Göran', 0.012287), ('Gösta', 0.00559), ('Göte', 0.002297), ('Hans', 0.016636), ('Harald', 0.002359), ('Harry', 0.002872), ('Helge', 0.002005), ('Henning', 0.001194), ('Henrik', 0.007644), ('Henry', 0.003134), ('Herbert', 0.001257), ('Hjalmar', 0.001179), ('Holger', 0.001641), ('Hugo', 0.001976), ('Håkan', 0.006974), ('Inge', 0.00288), ('Ingemar', 0.009024), ('Ingmar', 0.001138), ('Ingvar', 0.006758), ('Ivan', 0.001668), ('Ivar', 0.002943), ('Jacob', 0.001023), ('Jakob', 0.001299), ('Jan', 0.0173), ('Jan-Erik', 0.001094), ('Jens', 0.002221), ('Jesper', 0.002177), ('Jimmy', 0.00212), ('Joakim', 0.004606), ('Joel', 0.001778), ('Johan', 0.021986), ('Johannes', 0.003538), ('John', 0.008741), ('Johnny', 0.001499), ('Jonas', 0.007433), ('Jonathan', 0.001616), ('Jonny', 0.00142), ('Josef', 0.001131), ('Juhani', 0.001368), ('Jörgen', 0.003869), ('Karl', 0.030342), ('Kenneth', 0.00354), ('Kent', 0.004156), ('Kim', 0.001298), ('Kjell', 0.007932), ('Klas', 0.001989), ('Knut', 0.002668), ('Krister', 0.002433), ('Kristian', 0.001849), ('Kristoffer', 0.001548), ('Kurt', 0.004453), ('Lars', 0.03162), ('Lars-erik', 0.001056), ('Leif', 0.00918), ('Lennart', 0.019721), ('Linus', 0.001817), ('Ludvig', 0.001014), ('Magnus', 0.009301), ('Marcus', 0.004065), ('Markus', 0.002075), ('Martin', 0.008861), ('Mathias', 0.001551), ('Mats', 0.008403), ('Mattias', 0.005657), ('Max', 0.001234), ('Michael', 0.004456), ('Mikael', 0.015583), ('Morgan', 0.001377), ('Nicklas', 0.001201), ('Niclas', 0.001643), ('Niklas', 0.003704), ('Nils', 0.018831), ('Ola', 0.002691), ('Olle', 0.001666), ('Olof', 0.017132), ('Olov', 0.005457), ('Oscar', 0.002606), ('Oskar', 0.005198), ('Otto', 0.001361), ('Ove', 0.004994), ('Patrik', 0.005091), ('Paul', 0.002455), ('Per', 0.02269), ('Peter', 0.014015), ('Petter', 0.00115), ('Philip', 0.00134), ('Pierre', 0.001014), ('Pontus', 0.001652), ('Pär', 0.002043), ('Ragnar', 0.002983), ('Rasmus', 0.001323), ('Reinhold', 0.001075), ('Richard', 0.002053), ('Rickard', 0.00283), ('Rikard', 0.001272), ('Robert', 0.006959), ('Robin', 0.003012), ('Roger', 0.005033), ('Roland', 0.006879), ('Rolf', 0.007914), ('Ronny', 0.001561), ('Rune', 0.0056), ('Samuel', 0.001473), ('Sebastian', 0.003275), ('Sigurd', 0.001099), ('Sigvard', 0.002438), ('Simon', 0.003338), ('Sixten', 0.001299), ('Staffan', 0.001627), ('Stefan', 0.009034), ('Sten', 0.003911), ('Stig', 0.009343), ('Sture', 0.002518), ('Sune', 0.002173), ('Sven', 0.017897), ('Sören', 0.002376), ('Tage', 0.002198), ('Thomas', 0.00738), ('Tobias', 0.003623), ('Tom', 0.000977), ('Tomas', 0.004168), ('Tommy', 0.005526), ('Tony', 0.001814), ('Torbjörn', 0.002984), ('Tord', 0.001449), ('Tore', 0.00263), ('Torsten', 0.002915), ('Ture', 0.001212), ('Ulf', 0.008541), ('Uno', 0.001812), ('Urban', 0.001584), ('Valdemar', 0.002204), ('Valter', 0.001371), ('Verner', 0.001196), ('Victor', 0.001543), ('Viktor', 0.00308), ('Vilhelm', 0.003785), ('Wilhelm', 0.002195), ('William', 0.002332), ('Yngve', 0.002698), ('Åke', 0.013837))).copy()
A:faker.providers.person.sv_SE.__init__.last_names->OrderedDict((('Abrahamsson', 0.00244), ('Adolfsson', 0.002012), ('Alm', 0.001448), ('Andersson', 0.074993), ('Andreasson', 0.00245), ('Aronsson', 0.001722), ('Arvidsson', 0.003474), ('Augustsson', 0.001306), ('Axelsson', 0.006128), ('Bengtsson', 0.009764), ('Berg', 0.005072), ('Berggren', 0.002914), ('Berglund', 0.005115), ('Bergman', 0.00356), ('Bergqvist', 0.002172), ('Bergström', 0.005561), ('Berntsson', 0.00128), ('Björk', 0.003265), ('Björklund', 0.002883), ('Björkman', 0.00176), ('Blom', 0.002326), ('Blomberg', 0.001464), ('Blomqvist', 0.002349), ('Boman', 0.001365), ('Borg', 0.001954), ('Boström', 0.001985), ('Bäckström', 0.001865), ('Börjesson', 0.002036), ('Carlsson', 0.007727), ('Claesson', 0.0016), ('Dahl', 0.002064), ('Dahlberg', 0.002382), ('Dahlgren', 0.001578), ('Dahlström', 0.001538), ('Danielsson', 0.004208), ('Davidsson', 0.002035), ('Edlund', 0.001649), ('Ek', 0.002187), ('Ekberg', 0.001201), ('Eklund', 0.003919), ('Ekman', 0.001847), ('Ekström', 0.00267), ('Eliasson', 0.003127), ('Englund', 0.001958), ('Engström', 0.004079), ('Ericsson', 0.001221), ('Eriksson', 0.039871), ('Erlandsson', 0.001768), ('Falk', 0.002035), ('Forsberg', 0.004265), ('Forslund', 0.001137), ('Fransson', 0.003937), ('Franzén', 0.001491), ('Fredriksson', 0.004959), ('Friberg', 0.001828), ('Gunnarsson', 0.003764), ('Gustafsson', 0.020795), ('Gustavsson', 0.007363), ('Göransson', 0.00233), ('Haglund', 0.001575), ('Hagström', 0.001315), ('Hallberg', 0.002017), ('Hansen', 0.001804), ('Hansson', 0.012512), ('Hedberg', 0.001824), ('Hedlund', 0.002617), ('Hedman', 0.001419), ('Hedström', 0.001406), ('Hellberg', 0.001212), ('Hellström', 0.002385), ('Henriksson', 0.004586), ('Hermansson', 0.002866), ('Hjalmarsson', 0.001191), ('Holm', 0.0037), ('Holmberg', 0.003521), ('Holmgren', 0.002689), ('Holmqvist', 0.001561), ('Holmström', 0.001904), ('Hägglund', 0.001134), ('Håkansson', 0.0043), ('Högberg', 0.001492), ('Höglund', 0.001861), ('Isaksson', 0.003349), ('Ivarsson', 0.002209), ('Jakobsson', 0.005863), ('Jansson', 0.014518), ('Jensen', 0.001898), ('Johannesson', 0.001813), ('Johansson', 0.076124), ('Johnsson', 0.003881), ('Jonasson', 0.002439), ('Jonsson', 0.01655), ('Josefsson', 0.002104), ('Jönsson', 0.009781), ('Karlsson', 0.058698), ('Klasson', 0.001235), ('Knutsson', 0.001627), ('Kristiansson', 0.001226), ('Larsson', 0.036191), ('Lilja', 0.00141), ('Lind', 0.00391), ('Lindahl', 0.001815), ('Lindberg', 0.007056), ('Lindblad', 0.001253), ('Lindblom', 0.001864), ('Lindell', 0.001351), ('Linder', 0.00121), ('Lindgren', 0.00608), ('Lindholm', 0.002166), ('Lindkvist', 0.001233), ('Lindqvist', 0.004209), ('Lindström', 0.006642), ('Lindén', 0.001551), ('Ljung', 0.001232), ('Ljungberg', 0.001274), ('Lund', 0.002142), ('Lundberg', 0.00568), ('Lundgren', 0.005495), ('Lundin', 0.00397), ('Lundkvist', 0.001252), ('Lundmark', 0.00141), ('Lundqvist', 0.003493), ('Lundström', 0.003173), ('Löfgren', 0.002211), ('Magnusson', 0.007333), ('Malm', 0.00158), ('Malmberg', 0.001224), ('Martinsson', 0.0025), ('Mattsson', 0.004904), ('Melin', 0.001487), ('Moberg', 0.001532), ('Molin', 0.001312), ('Månsson', 0.002563), ('Mårtensson', 0.003432), ('Möller', 0.002013), ('Nielsen', 0.001623), ('Nilsson', 0.050327), ('Norberg', 0.002325), ('Nord', 0.001346), ('Nordin', 0.002799), ('Nordström', 0.003207), ('Norman', 0.001228), ('Norén', 0.001524), ('Nyberg', 0.003291), ('Nygren', 0.00188), ('Nyman', 0.002117), ('Nyström', 0.003538), ('Näslund', 0.001331), ('Ohlsson', 0.001141), ('Olausson', 0.001503), ('Olofsson', 0.006893), ('Olsson', 0.032427), ('Oskarsson', 0.001576), ('Ottosson', 0.002066), ('Palm', 0.001957), ('Paulsson', 0.001382), ('Pedersen', 0.001201), ('Persson', 0.031475), ('Petersson', 0.008913), ('Pettersson', 0.019276), ('Pålsson', 0.001626), ('Roos', 0.001447), ('Rosén', 0.00181), ('Samuelsson', 0.003855), ('Sandberg', 0.004613), ('Sandström', 0.002761), ('Sjöberg', 0.004282), ('Sjödin', 0.001399), ('Sjögren', 0.002585), ('Sjöström', 0.001921), ('Skoglund', 0.001788), ('Sköld', 0.001266), ('Stenberg', 0.001784), ('Strand', 0.001771), ('Strandberg', 0.001755), ('Ström', 0.002872), ('Strömberg', 0.002357), ('Ståhl', 0.00126), ('Sundberg', 0.002691), ('Sundin', 0.001434), ('Sundqvist', 0.001526), ('Sundström', 0.002302), ('Svensson', 0.030624), ('Svärd', 0.001284), ('Söderberg', 0.003305), ('Söderlund', 0.00197), ('Söderström', 0.002226), ('Törnqvist', 0.001176), ('Viklund', 0.001833), ('Vikström', 0.001757), ('Wahlström', 0.001139), ('Wallin', 0.003077), ('Wikström', 0.001522), ('Åberg', 0.002664), ('Ågren', 0.00132), ('Åkesson', 0.002344), ('Åström', 0.002272), ('Öberg', 0.002448), ('Öhman', 0.001415), ('Östlund', 0.001623)))
faker.providers.person.sv_SE.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/th_TH/__init__.py----------------------------------------
faker.providers.person.th_TH.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/person/fr_CH/__init__.py----------------------------------------
faker.providers.person.fr_CH.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/currency/__init__.py----------------------------------------
faker.providers.currency.__init__.Provider(BaseProvider)
faker.providers.currency.__init__.Provider.cryptocurrency(self)
faker.providers.currency.__init__.Provider.cryptocurrency_code(self)
faker.providers.currency.__init__.Provider.cryptocurrency_name(self)
faker.providers.currency.__init__.Provider.currency(self)
faker.providers.currency.__init__.Provider.currency_code(self)
faker.providers.currency.__init__.Provider.currency_name(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/currency/en_US/__init__.py----------------------------------------
faker.providers.currency.en_US.__init__.Provider(CurrencyProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/__init__.py----------------------------------------
A:faker.providers.internet.__init__._linklocal_network->ip_network('169.254.0.0/16')
A:faker.providers.internet.__init__._loopback_network->ip_network('127.0.0.0/8')
A:faker.providers.internet.__init__._multicast_network->ip_network('224.0.0.0/4')
A:faker.providers.internet.__init__.string->unidecode(string)
A:faker.providers.internet.__init__.email->''.join(self.generator.parse(pattern).split(' '))
A:faker.providers.internet.__init__.pattern->self.random_element(self.uri_formats)
A:faker.providers.internet.__init__.username->self._to_ascii(self.bothify(self.generator.parse(pattern)).lower())
A:faker.providers.internet.__init__.company->self._to_ascii(company_elements.pop(0))
A:faker.providers.internet.__init__.company_elements->self._to_ascii(company_elements.pop(0)).split(' ')
A:faker.providers.internet.__init__.address->str(ip_network(address, strict=False))
A:faker.providers.internet.__init__.networks->list(map(_exclude_ipv4_network, networks))
A:faker.providers.internet.__init__.all_networks->self._exclude_ipv4_networks(all_networks, _IPv4Constants._excluded_networks)
A:faker.providers.internet.__init__.random_network->self.generator.random.choice(all_networks)
A:faker.providers.internet.__init__.private_networks->self._exclude_ipv4_networks(private_networks, _IPv4Constants._excluded_networks)
A:faker.providers.internet.__init__.private_network->self.generator.random.choice(private_networks)
A:faker.providers.internet.__init__.public_networks->self._exclude_ipv4_networks(public_networks, _IPv4Constants._private_networks + _IPv4Constants._excluded_networks)
A:faker.providers.internet.__init__.public_network->self.generator.random.choice(public_networks)
A:faker.providers.internet.__init__.value->self.generator.text(20)
A:faker.providers.internet.__init__.placeholder_url->self.random_element(self.image_placeholder_services)
faker.providers.internet.__init__.Provider(BaseProvider)
faker.providers.internet.__init__.Provider._exclude_ipv4_networks(self,networks,networks_to_exclude)
faker.providers.internet.__init__.Provider._random_ipv4_address_from_subnet(self,subnet,network=False)
faker.providers.internet.__init__.Provider._to_ascii(self,string)
faker.providers.internet.__init__.Provider.ascii_company_email(self)
faker.providers.internet.__init__.Provider.ascii_email(self)
faker.providers.internet.__init__.Provider.ascii_free_email(self)
faker.providers.internet.__init__.Provider.ascii_safe_email(self)
faker.providers.internet.__init__.Provider.company_email(self)
faker.providers.internet.__init__.Provider.domain_name(self,levels=1)
faker.providers.internet.__init__.Provider.domain_word(self)
faker.providers.internet.__init__.Provider.email(self,domain=None)
faker.providers.internet.__init__.Provider.free_email(self)
faker.providers.internet.__init__.Provider.free_email_domain(self)
faker.providers.internet.__init__.Provider.hostname(self,levels=1)
faker.providers.internet.__init__.Provider.image_url(self,width=None,height=None)
faker.providers.internet.__init__.Provider.ipv4(self,network=False,address_class=None,private=None)
faker.providers.internet.__init__.Provider.ipv4_network_class(self)
faker.providers.internet.__init__.Provider.ipv4_private(self,network=False,address_class=None)
faker.providers.internet.__init__.Provider.ipv4_public(self,network=False,address_class=None)
faker.providers.internet.__init__.Provider.ipv6(self,network=False)
faker.providers.internet.__init__.Provider.mac_address(self)
faker.providers.internet.__init__.Provider.safe_email(self)
faker.providers.internet.__init__.Provider.slug(self,value=None)
faker.providers.internet.__init__.Provider.tld(self)
faker.providers.internet.__init__.Provider.uri(self)
faker.providers.internet.__init__.Provider.uri_extension(self)
faker.providers.internet.__init__.Provider.uri_page(self)
faker.providers.internet.__init__.Provider.uri_path(self,deep=None)
faker.providers.internet.__init__.Provider.url(self,schemes=None)
faker.providers.internet.__init__.Provider.user_name(self)
faker.providers.internet.__init__._IPv4Constants


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/en_NZ/__init__.py----------------------------------------
faker.providers.internet.en_NZ.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/hu_HU/__init__.py----------------------------------------
faker.providers.internet.hu_HU.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/no_NO/__init__.py----------------------------------------
faker.providers.internet.no_NO.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/sk_SK/__init__.py----------------------------------------
faker.providers.internet.sk_SK.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/zh_CN/__init__.py----------------------------------------
A:faker.providers.internet.zh_CN.__init__.tlds->OrderedDict((('cn', 0.8), ('net', 0.1), ('com', 0.05), ('org', 0.05)))
A:faker.providers.internet.zh_CN.__init__.pattern->self.random_element(self.domain_formats)
A:faker.providers.internet.zh_CN.__init__.domain_word->self.domain_word()
A:faker.providers.internet.zh_CN.__init__.my_tld->self.tld()
A:faker.providers.internet.zh_CN.__init__.my_second_level->self.domain_word()
faker.providers.internet.zh_CN.__init__.Provider(InternetProvider)
faker.providers.internet.zh_CN.__init__.Provider.domain_name(self,levels=1)
faker.providers.internet.zh_CN.__init__.Provider.domain_word(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/bg_BG/__init__.py----------------------------------------
faker.providers.internet.bg_BG.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/pt_PT/__init__.py----------------------------------------
faker.providers.internet.pt_PT.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/ar_AA/__init__.py----------------------------------------
faker.providers.internet.ar_AA.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/uk_UA/__init__.py----------------------------------------
faker.providers.internet.uk_UA.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/sl_SI/__init__.py----------------------------------------
faker.providers.internet.sl_SI.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/fr_FR/__init__.py----------------------------------------
faker.providers.internet.fr_FR.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/fa_IR/__init__.py----------------------------------------
faker.providers.internet.fa_IR.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/ko_KR/__init__.py----------------------------------------
faker.providers.internet.ko_KR.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/cs_CZ/__init__.py----------------------------------------
faker.providers.internet.cs_CZ.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/en_US/__init__.py----------------------------------------
faker.providers.internet.en_US.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/ja_JP/__init__.py----------------------------------------
faker.providers.internet.ja_JP.__init__.Provider(InternetProvider)
faker.providers.internet.ja_JP.__init__.Provider.domain_word(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/hr_HR/__init__.py----------------------------------------
faker.providers.internet.hr_HR.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/id_ID/__init__.py----------------------------------------
faker.providers.internet.id_ID.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/el_GR/__init__.py----------------------------------------
A:faker.providers.internet.el_GR.__init__.pattern->self.random_element(self.user_name_formats)
A:faker.providers.internet.el_GR.__init__.company->latinize(company_elements.pop(0))
A:faker.providers.internet.el_GR.__init__.company_elements->latinize(company_elements.pop(0)).split(' ')
A:faker.providers.internet.el_GR.__init__.matched->list(match.group(0))
A:faker.providers.internet.el_GR.__init__.search->'Θ Χ Ψ θ χ ψ ΟΥ ΑΥ ΕΥ Ου Αυ Ευ ου αυ ευ'.split()
A:faker.providers.internet.el_GR.__init__.replace->'TH CH PS th ch ps OU AU EU Ou Au Eu ou au eu'.split()
A:faker.providers.internet.el_GR.__init__.value->map(lambda l: replace[search.find(l)], matched)
faker.providers.internet.el_GR.__init__.Provider(InternetProvider)
faker.providers.internet.el_GR.__init__.Provider.domain_word(self)
faker.providers.internet.el_GR.__init__.Provider.user_name(self)
faker.providers.internet.el_GR.__init__.latinize(value)
faker.providers.internet.el_GR.__init__.remove_accents(value)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/de_AT/__init__.py----------------------------------------
faker.providers.internet.de_AT.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/pl_PL/__init__.py----------------------------------------
faker.providers.internet.pl_PL.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/ru_RU/__init__.py----------------------------------------
faker.providers.internet.ru_RU.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/de_DE/__init__.py----------------------------------------
faker.providers.internet.de_DE.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/en_AU/__init__.py----------------------------------------
faker.providers.internet.en_AU.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/pt_BR/__init__.py----------------------------------------
faker.providers.internet.pt_BR.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/fi_FI/__init__.py----------------------------------------
faker.providers.internet.fi_FI.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/it_IT/__init__.py----------------------------------------
faker.providers.internet.it_IT.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/zh_TW/__init__.py----------------------------------------
faker.providers.internet.zh_TW.__init__.Provider(InternetProvider)
faker.providers.internet.zh_TW.__init__.Provider.domain_word(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/bs_BA/__init__.py----------------------------------------
faker.providers.internet.bs_BA.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/sv_SE/__init__.py----------------------------------------
faker.providers.internet.sv_SE.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/internet/fr_CH/__init__.py----------------------------------------
faker.providers.internet.fr_CH.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/job/__init__.py----------------------------------------
faker.providers.job.__init__.Provider(BaseProvider)
faker.providers.job.__init__.Provider.job(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/job/hu_HU/__init__.py----------------------------------------
faker.providers.job.hu_HU.__init__.Provider(BaseProvider)
faker.providers.job.hu_HU.__init__.Provider.job(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/job/zh_CN/__init__.py----------------------------------------
faker.providers.job.zh_CN.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/job/ar_AA/__init__.py----------------------------------------
faker.providers.job.ar_AA.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/job/uk_UA/__init__.py----------------------------------------
faker.providers.job.uk_UA.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/job/fr_FR/__init__.py----------------------------------------
faker.providers.job.fr_FR.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/job/hy_AM/__init__.py----------------------------------------
faker.providers.job.hy_AM.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/job/fa_IR/__init__.py----------------------------------------
faker.providers.job.fa_IR.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/job/ko_KR/__init__.py----------------------------------------
faker.providers.job.ko_KR.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/job/en_US/__init__.py----------------------------------------
faker.providers.job.en_US.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/job/hr_HR/__init__.py----------------------------------------
faker.providers.job.hr_HR.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/job/pl_PL/__init__.py----------------------------------------
faker.providers.job.pl_PL.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/job/ru_RU/__init__.py----------------------------------------
faker.providers.job.ru_RU.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/job/pt_BR/__init__.py----------------------------------------
faker.providers.job.pt_BR.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/job/fi_FI/__init__.py----------------------------------------
faker.providers.job.fi_FI.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/job/zh_TW/__init__.py----------------------------------------
faker.providers.job.zh_TW.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/job/bs_BA/__init__.py----------------------------------------
faker.providers.job.bs_BA.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/job/th_TH/__init__.py----------------------------------------
faker.providers.job.th_TH.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/job/fr_CH/__init__.py----------------------------------------
faker.providers.job.fr_CH.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/automotive/__init__.py----------------------------------------
A:faker.providers.automotive.__init__.temp->re.sub('\\?', lambda x: self.random_element(ascii_uppercase), self.random_element(self.license_formats))
faker.providers.automotive.__init__.Provider(BaseProvider)
faker.providers.automotive.__init__.Provider.license_plate(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/automotive/en_GB/__init__.py----------------------------------------
faker.providers.automotive.en_GB.__init__.Provider(AutomotiveProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/automotive/ar_JO/__init__.py----------------------------------------
A:faker.providers.automotive.ar_JO.__init__.pattern->self.random_element(self.license_formats)
faker.providers.automotive.ar_JO.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.ar_JO.__init__.Provider.initials(self)
faker.providers.automotive.ar_JO.__init__.Provider.license_plate(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/automotive/en_NZ/__init__.py----------------------------------------
faker.providers.automotive.en_NZ.__init__.Provider(AutomotiveProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/automotive/hu_HU/__init__.py----------------------------------------
faker.providers.automotive.hu_HU.__init__.Provider(AutomotiveProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/automotive/ar_SA/__init__.py----------------------------------------
A:faker.providers.automotive.ar_SA.__init__.english_plate->self.license_plate_en()
A:faker.providers.automotive.ar_SA.__init__.nums->list(reversed(license_plate[0:4]))
A:faker.providers.automotive.ar_SA.__init__.chars->list(license_plate[5:8])
A:faker.providers.automotive.ar_SA.__init__.numerated->re.sub('\\#', lambda x: self.PLATE_MAP[nums.pop()], self.LICENSE_FORMAT_AR)
A:faker.providers.automotive.ar_SA.__init__.ar_plate->re.sub('\\?', lambda x: self.PLATE_MAP[chars.pop()], numerated)
A:faker.providers.automotive.ar_SA.__init__.en_palate->self.license_plate_en()
A:faker.providers.automotive.ar_SA.__init__.ar_palate->self._translate_license_plate(en_palate)
faker.providers.automotive.ar_SA.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.ar_SA.__init__.Provider._translate_license_plate(self,license_plate)
faker.providers.automotive.ar_SA.__init__.Provider.license_plate(self)
faker.providers.automotive.ar_SA.__init__.Provider.license_plate_ar(self)
faker.providers.automotive.ar_SA.__init__.Provider.license_plate_en(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/automotive/en_US/__init__.py----------------------------------------
faker.providers.automotive.en_US.__init__.Provider(AutomotiveProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/automotive/ar_PS/__init__.py----------------------------------------
A:faker.providers.automotive.ar_PS.__init__.pattern->self.random_element(self.license_formats)
faker.providers.automotive.ar_PS.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.ar_PS.__init__.Provider.district(self)
faker.providers.automotive.ar_PS.__init__.Provider.license_plate(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/automotive/id_ID/__init__.py----------------------------------------
faker.providers.automotive.id_ID.__init__.Provider(AutomotiveProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/automotive/ru_RU/__init__.py----------------------------------------
faker.providers.automotive.ru_RU.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.ru_RU.__init__.Provider.license_plate(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/automotive/de_DE/__init__.py----------------------------------------
faker.providers.automotive.de_DE.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.de_DE.__init__.Provider.license_plate(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/automotive/pt_BR/__init__.py----------------------------------------
faker.providers.automotive.pt_BR.__init__.Provider(AutomotiveProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/automotive/sv_SE/__init__.py----------------------------------------
faker.providers.automotive.sv_SE.__init__.Provider(AutomotiveProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/automotive/en_CA/__init__.py----------------------------------------
faker.providers.automotive.en_CA.__init__.Provider(AutomotiveProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/credit_card/__init__.py----------------------------------------
A:faker.providers.credit_card.__init__.credit_card_types->OrderedDict((('maestro', CreditCard('Maestro', prefix_maestro, 12, security_code='CVV')), ('mastercard', CreditCard('Mastercard', prefix_mastercard, 16, security_code='CVV')), ('visa16', CreditCard('VISA 16 digit', prefix_visa)), ('visa13', CreditCard('VISA 13 digit', prefix_visa, 13)), ('visa19', CreditCard('VISA 19 digit', prefix_visa, 19)), ('amex', CreditCard('American Express', prefix_amex, 15, security_code='CID', security_code_length=4)), ('discover', CreditCard('Discover', prefix_discover)), ('diners', CreditCard('Diners Club / Carte Blanche', prefix_diners, 14)), ('jcb15', CreditCard('JCB 15 digit', prefix_jcb15, 15)), ('jcb16', CreditCard('JCB 16 digit', prefix_jcb16))))
A:faker.providers.credit_card.__init__.card_type->self.random_element(self.credit_card_types.keys())
A:faker.providers.credit_card.__init__.card->self._credit_card_type(card_type)
A:faker.providers.credit_card.__init__.prefix->self.random_element(card.prefixes)
A:faker.providers.credit_card.__init__.number->self.numerify(number)
A:faker.providers.credit_card.__init__.expire_date->self.generator.date_time_between(start, end)
A:faker.providers.credit_card.__init__.tpl->tpl.format(provider=card.name, owner=self.generator.parse('{{first_name}} {{last_name}}'), number=self.credit_card_number(card), expire_date=self.credit_card_expire(), security=card.security_code, security_nb=self.credit_card_security_code(card)).format(provider=card.name, owner=self.generator.parse('{{first_name}} {{last_name}}'), number=self.credit_card_number(card), expire_date=self.credit_card_expire(), security=card.security_code, security_nb=self.credit_card_security_code(card))
faker.providers.credit_card.__init__.CreditCard(self,name,prefixes,length=16,security_code='CVC',security_code_length=3)
faker.providers.credit_card.__init__.CreditCard.__init__(self,name,prefixes,length=16,security_code='CVC',security_code_length=3)
faker.providers.credit_card.__init__.Provider(BaseProvider)
faker.providers.credit_card.__init__.Provider._credit_card_type(self,card_type=None)
faker.providers.credit_card.__init__.Provider._generate_number(self,prefix,length)
faker.providers.credit_card.__init__.Provider.credit_card_expire(self,start='now',end='+10y',date_format='%m/%y')
faker.providers.credit_card.__init__.Provider.credit_card_full(self,card_type=None)
faker.providers.credit_card.__init__.Provider.credit_card_number(self,card_type=None)
faker.providers.credit_card.__init__.Provider.credit_card_provider(self,card_type=None)
faker.providers.credit_card.__init__.Provider.credit_card_security_code(self,card_type=None)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/credit_card/en_US/__init__.py----------------------------------------
faker.providers.credit_card.en_US.__init__.Provider(CreditCardProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/profile/__init__.py----------------------------------------
A:faker.providers.profile.__init__.sex->self.random_element(SEX)
A:faker.providers.profile.__init__.name->self.generator.name_male()
A:faker.providers.profile.__init__.d->dict(d, **self.generator.simple_profile(sex))
faker.providers.profile.__init__.Provider(BaseProvider)
faker.providers.profile.__init__.Provider.profile(self,fields=None,sex=None)
faker.providers.profile.__init__.Provider.simple_profile(self,sex=None)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/profile/en_US/__init__.py----------------------------------------
faker.providers.profile.en_US.__init__.Provider(ProfileProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/__init__.py----------------------------------------
faker.providers.phone_number.__init__.Provider(BaseProvider)
faker.providers.phone_number.__init__.Provider.msisdn(self)
faker.providers.phone_number.__init__.Provider.phone_number(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/en_GB/__init__.py----------------------------------------
A:faker.providers.phone_number.en_GB.__init__.pattern->self.random_element(self.cellphone_formats)
faker.providers.phone_number.en_GB.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.en_GB.__init__.Provider.cellphone_number(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/ar_JO/__init__.py----------------------------------------
A:faker.providers.phone_number.ar_JO.__init__.pattern->self.random_element(self.formats)
faker.providers.phone_number.ar_JO.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.ar_JO.__init__.Provider.area_code(self)
faker.providers.phone_number.ar_JO.__init__.Provider.cellphone_number(self)
faker.providers.phone_number.ar_JO.__init__.Provider.operator_id(self)
faker.providers.phone_number.ar_JO.__init__.Provider.phone_number(self)
faker.providers.phone_number.ar_JO.__init__.Provider.service_phone_number(self)
faker.providers.phone_number.ar_JO.__init__.Provider.telephone_number(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/en_NZ/__init__.py----------------------------------------
A:faker.providers.phone_number.en_NZ.__init__.pattern->self.random_element(self.formats)
faker.providers.phone_number.en_NZ.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.en_NZ.__init__.Provider.area_code(self)
faker.providers.phone_number.en_NZ.__init__.Provider.phone_number(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/hu_HU/__init__.py----------------------------------------
faker.providers.phone_number.hu_HU.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/he_IL/__init__.py----------------------------------------
faker.providers.phone_number.he_IL.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/no_NO/__init__.py----------------------------------------
faker.providers.phone_number.no_NO.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/sk_SK/__init__.py----------------------------------------
faker.providers.phone_number.sk_SK.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/zh_CN/__init__.py----------------------------------------
faker.providers.phone_number.zh_CN.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.zh_CN.__init__.Provider.phonenumber_prefix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/bg_BG/__init__.py----------------------------------------
faker.providers.phone_number.bg_BG.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/es_ES/__init__.py----------------------------------------
faker.providers.phone_number.es_ES.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/hi_IN/__init__.py----------------------------------------
faker.providers.phone_number.hi_IN.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/pt_PT/__init__.py----------------------------------------
faker.providers.phone_number.pt_PT.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/dk_DK/__init__.py----------------------------------------
faker.providers.phone_number.dk_DK.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/uk_UA/__init__.py----------------------------------------
faker.providers.phone_number.uk_UA.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/sl_SI/__init__.py----------------------------------------
faker.providers.phone_number.sl_SI.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/fr_FR/__init__.py----------------------------------------
faker.providers.phone_number.fr_FR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/es_MX/__init__.py----------------------------------------
faker.providers.phone_number.es_MX.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/lv_LV/__init__.py----------------------------------------
faker.providers.phone_number.lv_LV.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/hy_AM/__init__.py----------------------------------------
faker.providers.phone_number.hy_AM.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/fa_IR/__init__.py----------------------------------------
faker.providers.phone_number.fa_IR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/ko_KR/__init__.py----------------------------------------
faker.providers.phone_number.ko_KR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/nl_NL/__init__.py----------------------------------------
faker.providers.phone_number.nl_NL.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/cs_CZ/__init__.py----------------------------------------
faker.providers.phone_number.cs_CZ.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/tw_GH/__init__.py----------------------------------------
faker.providers.phone_number.tw_GH.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/tr_TR/__init__.py----------------------------------------
faker.providers.phone_number.tr_TR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/en_US/__init__.py----------------------------------------
faker.providers.phone_number.en_US.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/ja_JP/__init__.py----------------------------------------
faker.providers.phone_number.ja_JP.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/ar_PS/__init__.py----------------------------------------
A:faker.providers.phone_number.ar_PS.__init__.pattern->self.random_element(self.formats)
faker.providers.phone_number.ar_PS.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.ar_PS.__init__.Provider.cellphone_number(self)
faker.providers.phone_number.ar_PS.__init__.Provider.country_code(self)
faker.providers.phone_number.ar_PS.__init__.Provider.phone_number(self)
faker.providers.phone_number.ar_PS.__init__.Provider.provider_code(self)
faker.providers.phone_number.ar_PS.__init__.Provider.service_phone_number(self)
faker.providers.phone_number.ar_PS.__init__.Provider.telephone_number(self)
faker.providers.phone_number.ar_PS.__init__.Provider.toll_number(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/hr_HR/__init__.py----------------------------------------
faker.providers.phone_number.hr_HR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/id_ID/__init__.py----------------------------------------
faker.providers.phone_number.id_ID.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/nl_BE/__init__.py----------------------------------------
faker.providers.phone_number.nl_BE.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/el_GR/__init__.py----------------------------------------
faker.providers.phone_number.el_GR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/pl_PL/__init__.py----------------------------------------
faker.providers.phone_number.pl_PL.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/lt_LT/__init__.py----------------------------------------
faker.providers.phone_number.lt_LT.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/ru_RU/__init__.py----------------------------------------
faker.providers.phone_number.ru_RU.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/ne_NP/__init__.py----------------------------------------
faker.providers.phone_number.ne_NP.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/de_DE/__init__.py----------------------------------------
faker.providers.phone_number.de_DE.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/en_AU/__init__.py----------------------------------------
A:faker.providers.phone_number.en_AU.__init__.pattern->self.random_element(self.formats)
faker.providers.phone_number.en_AU.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.en_AU.__init__.Provider.area_code(self)
faker.providers.phone_number.en_AU.__init__.Provider.phone_number(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/pt_BR/__init__.py----------------------------------------
A:faker.providers.phone_number.pt_BR.__init__.pattern->self.random_element(self.cellphone_formats)
faker.providers.phone_number.pt_BR.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.pt_BR.__init__.Provider.cellphone_number(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/fi_FI/__init__.py----------------------------------------
faker.providers.phone_number.fi_FI.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/it_IT/__init__.py----------------------------------------
faker.providers.phone_number.it_IT.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/zh_TW/__init__.py----------------------------------------
faker.providers.phone_number.zh_TW.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/bs_BA/__init__.py----------------------------------------
faker.providers.phone_number.bs_BA.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/sv_SE/__init__.py----------------------------------------
faker.providers.phone_number.sv_SE.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/th_TH/__init__.py----------------------------------------
faker.providers.phone_number.th_TH.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/fr_CH/__init__.py----------------------------------------
faker.providers.phone_number.fr_CH.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/phone_number/en_CA/__init__.py----------------------------------------
faker.providers.phone_number.en_CA.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/color/__init__.py----------------------------------------
A:faker.providers.color.__init__.all_colors->OrderedDict((('AliceBlue', '#F0F8FF'), ('AntiqueWhite', '#FAEBD7'), ('Aqua', '#00FFFF'), ('Aquamarine', '#7FFFD4'), ('Azure', '#F0FFFF'), ('Beige', '#F5F5DC'), ('Bisque', '#FFE4C4'), ('Black', '#000000'), ('BlanchedAlmond', '#FFEBCD'), ('Blue', '#0000FF'), ('BlueViolet', '#8A2BE2'), ('Brown', '#A52A2A'), ('BurlyWood', '#DEB887'), ('CadetBlue', '#5F9EA0'), ('Chartreuse', '#7FFF00'), ('Chocolate', '#D2691E'), ('Coral', '#FF7F50'), ('CornflowerBlue', '#6495ED'), ('Cornsilk', '#FFF8DC'), ('Crimson', '#DC143C'), ('Cyan', '#00FFFF'), ('DarkBlue', '#00008B'), ('DarkCyan', '#008B8B'), ('DarkGoldenRod', '#B8860B'), ('DarkGray', '#A9A9A9'), ('DarkGreen', '#006400'), ('DarkKhaki', '#BDB76B'), ('DarkMagenta', '#8B008B'), ('DarkOliveGreen', '#556B2F'), ('DarkOrange', '#FF8C00'), ('DarkOrchid', '#9932CC'), ('DarkRed', '#8B0000'), ('DarkSalmon', '#E9967A'), ('DarkSeaGreen', '#8FBC8F'), ('DarkSlateBlue', '#483D8B'), ('DarkSlateGray', '#2F4F4F'), ('DarkTurquoise', '#00CED1'), ('DarkViolet', '#9400D3'), ('DeepPink', '#FF1493'), ('DeepSkyBlue', '#00BFFF'), ('DimGray', '#696969'), ('DodgerBlue', '#1E90FF'), ('FireBrick', '#B22222'), ('FloralWhite', '#FFFAF0'), ('ForestGreen', '#228B22'), ('Fuchsia', '#FF00FF'), ('Gainsboro', '#DCDCDC'), ('GhostWhite', '#F8F8FF'), ('Gold', '#FFD700'), ('GoldenRod', '#DAA520'), ('Gray', '#808080'), ('Green', '#008000'), ('GreenYellow', '#ADFF2F'), ('HoneyDew', '#F0FFF0'), ('HotPink', '#FF69B4'), ('IndianRed', '#CD5C5C'), ('Indigo', '#4B0082'), ('Ivory', '#FFFFF0'), ('Khaki', '#F0E68C'), ('Lavender', '#E6E6FA'), ('LavenderBlush', '#FFF0F5'), ('LawnGreen', '#7CFC00'), ('LemonChiffon', '#FFFACD'), ('LightBlue', '#ADD8E6'), ('LightCoral', '#F08080'), ('LightCyan', '#E0FFFF'), ('LightGoldenRodYellow', '#FAFAD2'), ('LightGray', '#D3D3D3'), ('LightGreen', '#90EE90'), ('LightPink', '#FFB6C1'), ('LightSalmon', '#FFA07A'), ('LightSeaGreen', '#20B2AA'), ('LightSkyBlue', '#87CEFA'), ('LightSlateGray', '#778899'), ('LightSteelBlue', '#B0C4DE'), ('LightYellow', '#FFFFE0'), ('Lime', '#00FF00'), ('LimeGreen', '#32CD32'), ('Linen', '#FAF0E6'), ('Magenta', '#FF00FF'), ('Maroon', '#800000'), ('MediumAquaMarine', '#66CDAA'), ('MediumBlue', '#0000CD'), ('MediumOrchid', '#BA55D3'), ('MediumPurple', '#9370DB'), ('MediumSeaGreen', '#3CB371'), ('MediumSlateBlue', '#7B68EE'), ('MediumSpringGreen', '#00FA9A'), ('MediumTurquoise', '#48D1CC'), ('MediumVioletRed', '#C71585'), ('MidnightBlue', '#191970'), ('MintCream', '#F5FFFA'), ('MistyRose', '#FFE4E1'), ('Moccasin', '#FFE4B5'), ('NavajoWhite', '#FFDEAD'), ('Navy', '#000080'), ('OldLace', '#FDF5E6'), ('Olive', '#808000'), ('OliveDrab', '#6B8E23'), ('Orange', '#FFA500'), ('OrangeRed', '#FF4500'), ('Orchid', '#DA70D6'), ('PaleGoldenRod', '#EEE8AA'), ('PaleGreen', '#98FB98'), ('PaleTurquoise', '#AFEEEE'), ('PaleVioletRed', '#DB7093'), ('PapayaWhip', '#FFEFD5'), ('PeachPuff', '#FFDAB9'), ('Peru', '#CD853F'), ('Pink', '#FFC0CB'), ('Plum', '#DDA0DD'), ('PowderBlue', '#B0E0E6'), ('Purple', '#800080'), ('Red', '#FF0000'), ('RosyBrown', '#BC8F8F'), ('RoyalBlue', '#4169E1'), ('SaddleBrown', '#8B4513'), ('Salmon', '#FA8072'), ('SandyBrown', '#F4A460'), ('SeaGreen', '#2E8B57'), ('SeaShell', '#FFF5EE'), ('Sienna', '#A0522D'), ('Silver', '#C0C0C0'), ('SkyBlue', '#87CEEB'), ('SlateBlue', '#6A5ACD'), ('SlateGray', '#708090'), ('Snow', '#FFFAFA'), ('SpringGreen', '#00FF7F'), ('SteelBlue', '#4682B4'), ('Tan', '#D2B48C'), ('Teal', '#008080'), ('Thistle', '#D8BFD8'), ('Tomato', '#FF6347'), ('Turquoise', '#40E0D0'), ('Violet', '#EE82EE'), ('Wheat', '#F5DEB3'), ('White', '#FFFFFF'), ('WhiteSmoke', '#F5F5F5'), ('Yellow', '#FFFF00'), ('YellowGreen', '#9ACD32')))
A:faker.providers.color.__init__.color->('%x' % self.random_int(0, 255)).ljust(3, '0')
faker.providers.color.__init__.Provider(BaseProvider)
faker.providers.color.__init__.Provider.color_name(self)
faker.providers.color.__init__.Provider.hex_color(self)
faker.providers.color.__init__.Provider.rgb_color(self)
faker.providers.color.__init__.Provider.rgb_css_color(self)
faker.providers.color.__init__.Provider.safe_color_name(self)
faker.providers.color.__init__.Provider.safe_hex_color(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/color/hu_HU/__init__.py----------------------------------------
faker.providers.color.hu_HU.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/color/uk_UA/__init__.py----------------------------------------
A:faker.providers.color.uk_UA.__init__.all_colors->OrderedDict((('Абрикосовий', '#FBCEB1'), ('Аквамариновий', '#7FFFD4'), ('Алізариновий червоний', '#E32636'), ('Амарантовий', '#E52B50'), ('Амарантово-рожевий', '#F19CBB'), ('Аметистовий', '#9966CC'), ('Андроїдний зелений', '#A4C639'), ('Арсеновий', '#3B444B'), ('Атомний мандаріновий', '#FF9966'), ('Багряний', '#FF2400'), ('Баклажановий', '#990066'), ('Барвінковий', '#CCCCFF'), ('Бежевий', '#F5F5DC'), ('Берлінська лазур', '#003153'), ('Блаватний', '#6495ED'), ('Блакитний', '#AFEEEE'), ('Блакитний Брандейса', '#0070FF'), ('Блакитно-зелений', '#00DDDD'), ('Блакитно-фіолетовий', '#8A2BE2'), ('Блідий рожево-ліловий', '#996666'), ('Блідо-брунатний', '#987654'), ('Блідо-волошковий', '#ABCDEF'), ('Блідо-карміновий', '#AF4035'), ('Блідо-каштановий', '#DDADAF'), ('Блідо-пурпуровий', '#F984E5'), ('Блідо-пісочний', '#DABDAB'), ('Блідо-рожевий', '#FADADD'), ('Болотний', '#ACB78E'), ('Бронзовий', '#CD7F32'), ('Брунатний', '#964B00'), ('Брунато-малиновий', '#800000'), ('Будяковий', '#D8BFD8'), ('Бузковий', '#C8A2C8'), ('Бургундський', '#900020'), ('Бурий', '#755A57'), ('Бурштиновий', '#FFBF00'), ('Білий', '#FFFFFF'), ('Білий навахо', '#FFDEAD'), ('Бірюзовий', '#30D5C8'), ('Бістр', '#3D2B1F'), ('Вода пляжа Бонді', '#0095B6'), ('Вохра', '#CC7722'), ('Відбірний жовтий', '#FFBA00'), ('Візантійський', '#702963'), ('Гарбуз', '#FF7518'), ('Гарячо-рожевий', '#FC0FC0'), ('Геліотроп', '#DF73FF'), ('Глибокий фіолетовий', '#423189'), ('Глицінія', '#C9A0DC'), ('Грушевий', '#D1E231'), ('Гумігут', '#E49B0F'), ('Гірчичний', '#FFDB58'), ('Дерева', '#79443B'), ('Джинсовий', '#1560BD'), ('Діамантово-рожевий', '#FF55A3'), ('Жовтий', '#FFFF00'), ('Жовто-зелений', '#ADFF2F'), ('Жовто-персиковий', '#FADFAD'), ('Захисний синій', '#1E90FF'), ('Зелена весна', '#00FF7F'), ('Зелена мʼята', '#98FF98'), ('Зелена сосна', '#01796F'), ('Зелене море', '#2E8B57'), ('Зелений', '#00FF00'), ('Зелений армійський', '#4B5320'), ('Зелений мох', '#ADDFAD'), ('Зелений папороть', '#4F7942'), ('Зелений чай', '#D0F0C0'), ('Зелено-сірий чай', '#CADABA'), ('Зеленувато-блакитний', '#008080'), ('Золотаво-березовий', '#DAA520'), ('Золотий', '#FFD700'), ('Золотисто-каштановий', '#6D351A'), ('Індиго', '#4B0082'), ('Іржавий', '#B7410E'), ('Кардинал (колір)', '#C41E3A'), ('Карміновий', '#960018'), ('Каштановий', '#CD5C5C'), ('Кобальтовий', '#0047AB'), ('Колір жовтого шкільного автобуса', '#FFD800'), ('Колір засмаги', '#D2B48C'), ('Колір морської піни', '#FFF5EE'), ('Колір морської хвилі', '#00FFFF'), ('Кораловий', '#FF7F50'), ('Королівський синій', '#4169E1'), ('Кремовий', '#FFFDD0'), ('Кукурудзяний', '#FBEC5D'), ('Кіновар', '#FF4D00'), ('Лавандний', '#E6E6FA'), ('Лазуровий', '#007BA7'), ('Лазурово-синій', '#2A52BE'), ('Лайм', '#CCFF00'), ('Латунний', '#B5A642'), ('Лимонний', '#FDE910'), ('Лимонно-кремовий', '#FFFACD'), ('Лляний', '#EEDC82'), ('Лляний', '#FAF0E6'), ('Лососевий', '#FF8C69'), ('Ліловий', '#DB7093'), ('Малахітовий', '#0BDA51'), ('Малиновий', '#DC143C'), ('Мандариновий', '#FFCC00'), ('Мисливський', '#004225'), ('Морквяний', '#ED9121'), ('Мідний', '#B87333'), ('Міжнародний помаранчевий', '#FF4F00'), ('Нефритовий', '#00A86B'), ('Ніжно-блакитний', '#E0FFFF'), ('Ніжно-оливковий', '#6B8E23'), ('Ніжно-рожевий', '#FB607F'), ('Оливковий', '#808000'), ('Опівнічно-синій', '#003366'), ('Орхідея', '#DA70D6'), ('Палена сіена', '#E97451'), ('Палений оранжевий', '#CC5500'), ('Панг', '#C7FCEC'), ('Паросток папаї', '#FFEFD5'), ('Пастельно-зелений', '#77DD77'), ('Пастельно-рожевий', '#FFD1DC'), ('Персиковий', '#FFE5B4'), ('Перський синій', '#6600FF'), ('Помаранчевий', '#FFA500'), ('Помаранчево-персиковий', '#FFCC99'), ('Помаранчево-рожевий', '#FF9966'), ('Пурпурний', '#FF00FF'), ('Пурпуровий', '#660099'), ('Пшеничний', '#F5DEB3'), ('Пісочний колір', '#F4A460'), ('Рожевий', '#FFC0CB'), ('Рожевий Маунтбеттена', '#997A8D'), ('Рожево-лавандний', '#FFF0F5'), ('Рожево-ліловий', '#993366'), ('Салатовий', '#7FFF00'), ('Сангрія', '#92000A'), ('Сапфіровий', '#082567'), ('Світло-синій', '#007DFF'), ('Сепія', '#704214'), ('Сиваво-зелений', '#ACE1AF'), ('Сигнально-помаранчевий', '#FF9900'), ('Синя пил', '#003399'), ('Синя сталь', '#4682B4'), ('Сині яйця малинівки', '#00CCCC'), ('Синій', '#0000FF'), ('Синій (RYB)', '#0247FE'), ('Синій (пігмент)', '#333399'), ('Синій ВПС', '#5D8AA8'), ('Синій Клейна', '#3A75C4'), ('Сливовий', '#660066'), ('Смарагдовий', '#50C878'), ('Спаржевий', '#7BA05B'), ('Срібний', '#C0C0C0'), ('Старе золото', '#CFB53B'), ('Сіра спаржа', '#465945'), ('Сірий', '#808080'), ('Сірий шифер', '#708090'), ('Темний весняно-зелений', '#177245'), ('Темний жовто-брунатний', '#918151'), ('Темний зелений чай', '#BADBAD'), ('Темний пастельно-зелений', '#03C03C'), ('Темний хакі', '#BDB76B'), ('Темний індиго', '#310062'), ('Темно-аспідний сірий', '#2F4F4F'), ('Темно-брунатний', '#654321'), ('Темно-бірюзовий', '#116062'), ('Темно-зелений', '#013220'), ('Темно-зелений хакі', '#78866B'), ('Темно-золотий', '#B8860B'), ('Темно-карміновий', '#560319'), ('Темно-каштановий', '#986960'), ('Темно-кораловий', '#CD5B45'), ('Темно-лазурний', '#08457E'), ('Темно-лососевий', '#E9967A'), ('Темно-мандариновий', '#FFA812'), ('Темно-оливковий', '#556832'), ('Темно-персиковий', '#FFDAB9'), ('Темно-рожевий', '#E75480'), ('Темно-синій', '#000080'), ('Ультрамариновий', '#120A8F'), ('Умбра', '#734A12'), ('Умбра палена', '#8A3324'), ('Фуксія', '#FF00FF'), ('Фіолетовий', '#8B00FF'), ('Фіолетово-баклажановий', '#991199'), ('Фіолетово-червоний', '#C71585'), ('Хакі', '#C3B091'), ('Цинамоновий', '#7B3F00'), ('Циннвальдит', '#EBC2AF'), ('Ціан (колір)', '#00FFFF'), ('Ціано-блакитний', '#F0F8FF'), ('Червоний', '#FF0000'), ('Червоно-буро-помаранчевий', '#CD5700'), ('Червоновато-брунатний', '#CC8899'), ('Чорний', '#000000'), ('Шафрановий', '#F4C430'), ('Шкіра буйвола', '#F0DC82'), ('Шоколадний', '#D2691E'), ('Яскраво-бурштиновий', '#FF7E00'), ('Яскраво-бірюзовий', '#08E8DE'), ('Яскраво-зелений', '#66FF00'), ('Яскраво-зелений', '#40826D'), ('Яскраво-рожевий', '#FF007F'), ('Яскраво-фіолетовий', '#CD00CD'), ('Ясно-брунатний', '#CD853F'), ('Ясно-вишневий', '#DE3163'), ('Ясно-лазуровий', '#007FFF'), ('Ясно-лазуровий (веб)', '#F0FFFF')))
faker.providers.color.uk_UA.__init__.Provider(ColorProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/color/fr_FR/__init__.py----------------------------------------
A:faker.providers.color.fr_FR.__init__.all_colors->OrderedDict((('Noir', '#000000'), ('Gris mat', '#696969'), ('Gris', '#808080'), ('Gris foncé (Acier)', '#A9A9A9'), ('Gris argent', '#C0C0C0'), ('Gris clair', '#D3D3D3'), ('Gris gainsboro (Etain)', '#DCDCDC'), ('Blanc fumée', '#F5F5F5'), ('Blanc spectral', '#F8F8FF'), ('Blanc', '#FFFFFF'), ('Ivoire', '#FFFFF0'), ('Blanc floral', '#FFFAF0'), ('Blanc coquillage', '#FFF5EE'), ('Blanc lavande', '#FFF0F5'), ('Blanc dentelle', '#FDF5E6'), ('Blanc Lin', '#FAF0E6'), ('Rose brumeux', '#FFE4E1'), ('Rose', '#FFC0CB'), ('Rose clair', '#FFB6C1'), ('Rose Passion', '#FF69B4'), ('Rose profond', '#FF1493'), ('Violet pâle', '#DB7093'), ('Fushia (Magenta)', '#FF00FF'), ('Violet moyen', '#C71585'), ('Violet chardon', '#D8BFD8'), ('Prune', '#DDA0DD'), ('Violet', '#EE82EE'), ('Violet orchidée', '#DA70D6'), ('Violet orchidée moyen', '#BA55D3'), ('Violet orchidée foncé', '#9932CC'), (u'Violet foncé', '#9400D3'), ('Bleu violet', '#8A2BE2'), ('Indigo', '#4B0082'), ('Bleu ardoise moyen', '#7B68EE'), ('Bleu ardoise', '#6A5ACD'), ('Bleu ardoise foncé', '#483D8B'), ('Pourpre moyen', '#9370DB'), ('Magenta foncé', '#8B008B'), ('Pourpre', '#800080'), ('Brun rosé', '#BC8F8F'), ('Corail clair', '#F08080'), ('Corail', '#FF7F50'), ('Tomate', '#FF6347'), ('Orangé', '#FF4500'), ('Rouge', '#FF0000'), ('Rouge cramoisi', '#DC143C'), ('Saumon clair', '#FFA07A'), ('Saumon Foncé', '#E9967A'), ('Saumon', '#FA8072'), ('Rouge Indien', '#CD5C5C'), ('Rouge brique', '#B22222'), ('Brun', '#A52A2A'), ('Rouge foncé', '#8B0000'), ('Bordeaux', '#800000'), ('Beige', '#F5F5DC'), ('Beige antique', '#FAEBD7'), ('Beige papaye', '#FFEFD5'), ('Amande', '#FFEBCD'), ('Bisque', '#ffe4c4'), ('Beige pêche', '#FFDAB9'), ('Beige mocassin', '#FFE4B5'), ('Jaune blanc navaro', '#FFDEAD'), ('Jaune blé', '#F5DEB3'), ('Brun bois rustique', '#DEB887'), ('Brun roux', '#D2B48C'), ('Brun sable', '#F4A460'), ('Orange', '#FFA500'), ('Orange foncé', '#FF8C00'), ('Chocolat', '#D2691E'), ('Brun pérou', '#CD853F'), ('Terre de Sienne', '#A0522D'), ('Brun cuir', '#8B4513'), ('Jaune clair', '#FFFFE0'), ('Jaune maïs doux', '#FFF8DC'), ('Jaune doré clair', '#FAFAD2'), ('Beige citron soie', '#FFFACD'), ('Jaune doré pâle', '#EEE8AA'), ('Brun kaki', '#F0E68C'), ('Jaune', '#FFFF00'), ('Or', '#FFD700'), ('Jaune doré', '#DAA520'), ('Jaune doré foncé', '#B8860B'), ('Brun kaki foncé', '#BDB76B'), ('Jaune vert', '#9ACD32'), ('Kaki', '#6B8E23'), ('Olive', '#808000'), ('Vert olive foncé', '#556B2F'), ('Vert jaune', '#ADFF2F'), ('Chartreuse', '#7FFF00'), ('Vert prairie', '#7CFC00'), ('Citron vert', '#00FF00'), ('Citron vert foncé', '#32CD32'), ('Blanc menthe', '#F5FFFA'), ('Miellat', '#F0FFF0'), ('Vert pâle', '#98FB98'), ('Vert clair', '#90EE90'), ('Vert printemps', '#00FF7F'), ('Vert printemps moyen', '#00FA9A'), ('Vert forêt', '#228B22'), ('Vert', '#008000'), ('Vert foncé', '#006400'), ('Vert océan foncé', '#8FBC8F'), ('Vert océan moyen', '#3CB371'), ('Vert océan', '#2E8B57'), ('Gris ardoise clair', '#778899'), ('Gris ardoise', '#708090'), ('Gris ardoise foncé', '#2F4F4F'), ('Bleu alice', '#F0F8FF'), ('Bleu azur', '#F0FFFF'), ('Cyan clair', '#E0FFFF'), ('Azurin', '#AFEEEE'), ('Aigue-marine', '#7FFFD4'), ('Aigue-marine moyen', '#66CDAA'), ('Cyan', '#00FFFF'), ('Turquoise', '#40E0D0'), ('Turquoise moyen', '#48D1CC'), ('Turquoise foncé', '#00CED1'), ('Vert marin clair', '#20B2AA'), ('Cyan foncé', '#008B8B'), ('Vert sarcelle', '#008080'), ('Bleu pétrole', '#5F9EA0'), ('Bleu poudre', '#B0E0E6'), ('Bleu clair', '#ADD8E6'), ('Bleu azur clair', '#87CEFA'), ('Bleu azur', '#87CEEB'), ('Bleu azur profond', '#00BFFF'), ('Bleu toile', '#1E90FF'), ('Bleu lavande', '#E6E6FA'), ('Bleu acier clair', '#B0C4DE'), ('Bleuet', '#6495ED'), ('Bleu acier', '#4682B4'), ('Bleu royal', '#4169E1'), ('Bleu', '#0000FF'), ('Bleu moyen', '#0000CD'), ('Bleu foncé', '#00008B'), ('Bleu marin', '#000080'), ('Bleu de minuit', '#191970')))
faker.providers.color.fr_FR.__init__.Provider(ColorProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/color/hy_AM/__init__.py----------------------------------------
A:faker.providers.color.hy_AM.__init__.all_colors->OrderedDict((('Ալիսի կապույտ', '#F0F8FF'), ('Անանուխի կրեմ', '#F5FFFA'), ('Անտառային կանաչ', '#228B22'), ('Արծաթագույն', '#C0C0C0'), ('Արքայական կապույտ', '#4169E1'), ('Բաց դեղին', '#FFFFE0'), ('Բաց դեղնաոսկեգույն', '#FAFAD2'), ('Բաց երկնագույն', '#87CEFA'), ('Բաց ծովային կանաչ', '#20B2AA'), ('Բաց կաթնագույն', '#FFFFF0'), ('Բաց կանաչ', '#90EE90'), ('Բաց կապույտ', '#ADD8E6'), ('Բաց կապտականաչ', '#E0FFFF'), ('Բաց կորալ', '#F08080'), ('Բաց մանուշակագույն', '#EE82EE'), ('Բաց մոխրագույն թերթաքար', '#778899'), ('Բաց մոխրագույն', '#D3D3D3'), ('Բաց նշագույն', '#FFEBCD'), ('Բաց պողպատե կապույտ', '#B0C4DE'), ('Բաց սաղմոնագույն', '#FFA07A'), ('Բաց վարդագույն', '#FFB6C1'), ('Բեժ', '#F5F5DC'), ('Բոսորագույն', '#DC143C'), ('Գարնանային կանաչ', '#00FF7F'), ('Գեյնսբորրո', '#DCDCDC'), ('Գունատ կանաչ', '#98FB98'), ('Գունատ կարմիր մանուշակագույն', '#DB7093'), ('Գունատ ոսկեգույն', '#EEE8AA'), ('Գունատ փիրուզագույն', '#AFEEEE'), ('Գրասենյակային կանաչ', '#008000'), ('Դարչնագույն ավազ', '#F4A460'), ('Դարչնագույն', '#964b00'), ('Դեղին', '#FFFF00'), ('Դեղձի կրեմ', '#FFDAB9'), ('Դեղնականաչ', '#9ACD3'), ('Դոդջերս կապույտ', '#1E90FF'), ('Եգիպտացորենի մազիկներ', '#FFF8DC'), ('Երկնագույն մառախուղ', '#F0FFFF'), ('Երկնագույն', '#87CEEB'), ('Զինվորական կանաչ', '#6B8E23'), ('Թամբի դարչնագույն', '#8B4513'), ('Թեժ վարդագույն', '#FF69B4'), ('Թուխ', '#D2B48C'), ('Ինդիգո', '#4B0082'), ('Լայմի կանաչ', '#32CD32'), ('Լավանդ', '#E6E6FA'), ('Լոլիկ', '#FF6347'), ('Խակի', '#F0E68C'), ('Խոլորձագույն', '#DA70D6'), ('Ծխագույն', '#F5F5F5'), ('Ծովախեցի', '#FFF5EE'), ('Ծովակնագույն', '#7FFFD4'), ('Ծովային կանաչ', '#2E8B57'), ('Կադետների կապույտ', '#5F9EA0'), ('Կաթնագույն', '#FFFAF0'), ('Կակաոյի դարչնագույն', '#D2691E'), ('Կանաչ', '#00FF00'), ('Կանաչադեղին', '#ADFF2F'), ('Կապույտ թերթաքար', '#6A5ACD'), ('Կապույտ մանուշակագույն', '#8A2BE2'), ('Կապույտ փոշի', '#B0E0E6'), ('Կապույտ', '#0000FF'), ('Կապտականաչ', '#00FFFF'), ('Կարմիր դարչնագույն', '#A52A2A'), ('Կարմիր լավանդ', '#FFF0F5'), ('Կարմիր մանուշակագույն', '#C71585'), ('Կարմիր', '#FF0000'), ('Կեսգիշերային կապույտ', '#191970'), ('Կիտրոնի շիֆոն', '#FFFACD'), ('Կորալ', '#FF7F50'), ('Հարած պապայա', '#FFEFD5'), ('Հին ժանյակ', '#FDF5E6'), ('Հնաոճ սպիտակ', '#FAEBD7'), ('Հնդկական կարմիր', '#CD5C5C'), ('Հրակայուն աղյուս', '#B22222'), ('Ձիթապտղի գույն', '#808000'), ('Ձյունաճերմակ', '#FFFAFA'), ('Մանուշակագույն', '#800080'), ('Մեղրացող սեխ', '#F0FFF0'), ('Միջին գարնանային կանաչ', '#00FA9A'), ('Միջին խոլորձագույն', '#BA55D3'), ('Միջին ծովակնագույն', '#66CDAA'), ('Միջին ծովային կանաչ', '#3CB371'), ('Միջին կապույտ թերթաքար', '#7B68EE'), ('Միջին կապույտ', '#0000CD'), ('Միջին կապտականաչ', '#9370DB'), ('Միջին փիրուզագույն', '#48D1CC'), ('Մոխրագույն թերթաքար', '#708090'), ('Մոխրագույն', '#808080'), ('Մոկասին', '#FFE4B5'), ('Մուգ երկնագույն', '#00BFFF'), ('Մուգ խակի', '#BDB76B'), ('Մուգ խոլորձագույն', '#9932CC'), ('Մուգ ծովային կանաչ', '#8FBC8F'), ('Մուգ կանաչ', '#006400'), ('Մուգ կապույտ թերթաքար', '#483D8B'), ('Մուգ կապույտ', '#00008B'), ('Մուգ կապտականաչ', '#008080'), ('Մուգ կարմիր', '#8B0000'), ('Մուգ ձիթապտղի կանաչ', '#556B2F'), ('Մուգ մանուշակագույն', '#9400D3'), ('Մուգ մոխրագույն թերթաքար', '#2F4F4F'), ('Մուգ մոխրագույն', '#696969'), ('Մուգ մոխրագույն', '#A9A9A9'), ('Մուգ նարնջագույն', '#FF8C00'), ('Մուգ ոսկեգույն', '#B8860B'), ('Մուգ սաղմոնագույն', '#E9967A'), ('Մուգ վառ մանուշակագույն', '#8B008B'), ('Մուգ վարդագույն', '#FF1493'), ('Մուգ փիրուզագույն', '#00CED1'), ('Նավահո սպիտակ', '#FFDEAD'), ('Նավատորմի կապույտ', '#000080'), ('Նարնջագույն կարմիր', '#FF4500'), ('Նարնջագույն', '#FFA500'), ('Նշագույն', '#FFE4C4'), ('Շագանակագույն', '#800000'), ('Շարտրուզ', '#7FFF00'), ('Ոսկեգույն ձող', '#DAA520'), ('Ոսկեգույն', '#FFD700'), ('Պերու', '#CD853F'), ('Պողպատե կապույտ', '#4682B4'), ('Սալոր', '#DDA0DD'), ('Սաղմոնագույն', '#FA8072'), ('Սիենա', '#A0522D'), ('Սիզամարգի կանաչ', '#7CFC00'), ('Սպիտակ ստվեր', '#F8F8FF'), ('Սպիտակ', '#FFFFFF'), ('Սև', '#000000'), ('Վառ մանուշակագույն', '#FF00FF'), ('Վարդագույն', '#FFC0CB'), ('Վարդագույն', '#FFE4E1'), ('Վարդադարչնագույն', '#BC8F8F'), ('Վուշ', '#FAF0E6'), ('Տատասկ', '#D8BFD8'), ('Տերեփուկի կապույտ', '#6495ED'), ('Ցորենագույն', '#F5DEB3'), ('Փիրուզագույն', '#40E0D0'), ('Փխրուն փայտ', '#DEB887')))
faker.providers.color.hy_AM.__init__.Provider(ColorProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/color/en_US/__init__.py----------------------------------------
faker.providers.color.en_US.__init__.Provider(ColorProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/color/ar_PS/__init__.py----------------------------------------
A:faker.providers.color.ar_PS.__init__.all_colors->OrderedDict((('أزرق أليس', '#F0F8FF'), ('أبيض عتيق', '#FAEBD7'), ('مائي', '#00FFFF'), ('زبرجدي', '#7FFFD4'), ('لازوردي', '#F0FFFF'), ('صوفي', '#F5F5DC'), ('حسائي', '#FFE4C4'), ('أسود', '#000000'), ('لوزي', '#FFEBCD'), ('أزرق', '#0000FF'), ('بنفسجي مزرق', '#8A2BE2'), ('بني', '#A52A2A'), ('خشبية', '#DEB887'), ('أزرق كاديتي', '#5F9EA0'), ('كرتوزي', '#7FFF00'), ('شوكولاتيّ', '#D2691E'), ('مرجاني', '#FF7F50'), ('قنطريوني', '#6495ED'), ('حرير الذرة', '#FFF8DC'), ('قرمزي', '#DC143C'), ('سيان', '#00FFFF'), ('أزرق داكن', '#00008B'), ('سيان داكن', '#008B8B'), ('عصا الدهب الغامق', '#B8860B'), ('رمادي داكن', '#A9A9A9'), ('أخضر داكن', '#006400'), ('خاكي داكن', '#BDB76B'), ('ماجنتا داكن', '#8B008B'), ('أخضر زيتوني داكن', '#556B2F'), ('برتقالي داكن', '#FF8C00'), ('أوركيدي داكن', '#9932CC'), ('أحمر داكن', '#8B0000'), ('سلموني داكن', '#E9967A'), ('أخضر بحري داكن', '#8FBC8F'), ('أزرق أردوازي داكن', '#483D8B'), ('رمادي لازوردي داكن', '#2F4F4F'), ('تركوازي داكن', '#00CED1'), ('بنفسج داكن', '#9400D3'), ('زهري غامق', '#FF1493'), ('أزرق سماوي غامق', '#00BFFF'), ('رمادي خافت', '#696969'), ('أزرق فريق دودجر', '#1E90FF'), ('الطوب شمت', '#B22222'), ('أبيض وردي', '#FFFAF0'), ('أخضر الغابت', '#228B22'), ('فوشي', '#FF00FF'), ('رمادي باهت', '#DCDCDC'), ('أبيض شبحي', '#F8F8FF'), ('ذهبي', '#FFD700'), ('ذهبي', '#DAA520'), ('رمادي', '#808080'), ('أخضر', '#008000'), ('أصفر مخضر', '#ADFF2F'), ('عسلي', '#F0FFF0'), ('وردي فاقع', '#FF69B4'), ('قسطلي', '#CD5C5C'), ('نيلي', '#4B0082'), ('سكري', '#FFFFF0'), ('خاكي', '#F0E68C'), ('لاڤندر', '#E6E6FA'), ('أحمر اللافندر', '#FFF0F5'), ('أخضر عشبي', '#7CFC00'), ('ليمون شيفوني', '#FFFACD'), ('أزرق فاتح', '#ADD8E6'), ('مرجاني فاتح', '#F08080'), ('أزرق طفولي', '#E0FFFF'), ('أصفر ذهبي فاتح ', '#FAFAD2'), ('رمادي فاتح', '#D3D3D3'), ('أخضر فاتح', '#90EE90'), ('وردي فاتح', '#FFB6C1'), ('سلموني فاتح', '#FFA07A'), ('أخضر بحري فاتح', '#20B2AA'), ('سماوي فاتح', '#87CEFA'), ('أزرق أردوازي فاتح', '#778899'), ('أزرق معدني فاتح', '#B0C4DE'), ('أصفر فاتح', '#FFFFE0'), ('ليمي', '#00FF00'), ('أخضر ليموني', '#32CD32'), ('كتاني', '#FAF0E6'), ('فوشيا', '#FF00FF'), ('كستنائي', '#800000'), ('زبرجدي متوسط', '#66CDAA'), ('أزرق متوسط', '#0000CD'), ('أوركيدي متوسط', '#BA55D3'), ('فوشي متوسط', '#9370DB'), ('أخضر بحري متوسط', '#3CB371'), ('أزرق أردوازي متوسط', '#7B68EE'), ('أخضر ربيعي متوسط', '#00FA9A'), ('ترموازي متوسط', '#48D1CC'), ('أحمر بنفسجي', '#C71585'), ('الأزرق متوسط', '#191970'), ('نعناعي كريمي', '#F5FFFA'), ('الوردي الضبابي', '#FFE4E1'), ('موكاسيني', '#FFE4B5'), ('أبيض نافاجو', '#FFDEAD'), ('كحلي', '#000080'), ('رباطي قديم', '#FDF5E6'), ('زيتوني', '#808000'), ('زيتوني رمادي', '#6B8E23'), ('برتقالي', '#FFA500'), ('أحمر برتقالي', '#FF4500'), ('أوركيدي', '#DA70D6'), ('ذهبي باهت', '#EEE8AA'), ('أخضر باهت', '#98FB98'), ('تركوازي باهت', '#AFEEEE'), ('أحمر بنفسجي باهت', '#DB7093'), ('بابايا', '#FFEFD5'), ('حنطي', '#FFDAB9'), ('بيرو', '#CD853F'), ('زهري', '#FFC0CB'), ('برقوقي', '#DDA0DD'), ('أزرق مسحوقي', '#B0E0E6'), ('أرجواني', '#800080'), ('أحمر', '#FF0000'), ('بني وردي', '#BC8F8F'), ('أزرق ملكي', '#4169E1'), ('بني السرج', '#8B4513'), ('سالموني', '#FA8072'), ('بني رملي', '#F4A460'), ('أخضر بحري', '#2E8B57'), ('صدفي', '#FFF5EE'), ('سيينا', '#A0522D'), ('فضي', '#C0C0C0'), ('أزرق سماي', '#87CEEB'), ('أزرق أردوازي', '#6A5ACD'), ('رمادي معدني', '#708090'), ('ثلجي', '#FFFAFA'), ('أخضر ربيعي', '#00FF7F'), ('أزرق معدني', '#4682B4'), ('نطي', '#D2B48C'), ('حذفي', '#008080'), ('أرجواني', '#D8BFD8'), ('طماطمي', '#FF6347'), ('تركواز', '#40E0D0'), ('بنفسجي', '#EE82EE'), ('قمحي', '#F5DEB3'), ('أبيض', '#FFFFFF'), ('دخاني قمحي', '#F5F5F5'), ('أصفر', '#FFFF00'), ('أصفر مخضر', '#9ACD32')))
faker.providers.color.ar_PS.__init__.Provider(ColorProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/color/hr_HR/__init__.py----------------------------------------
A:faker.providers.color.hr_HR.__init__.all_colors->OrderedDict((('Akvamarin', '#7FFFD4'), ('Antikna bijela', '#FAEBD7'), ('Azurna', '#F0FFFF'), ('Bež', '#F5F5DC'), ('Bijela', '#FFFFFF'), ('Bijelo bilje', '#FFFAF0'), ('Bjelokost', '#FFFFF0'), ('Blijeda kudelja', '#EEE8AA'), ('Blijedi badem', '#FFEBCD'), ('Blijedoljubičasta', '#DB7093'), ('Blijedotirkizna', '#AFEEEE'), ('Blijedozelena', '#98FB98'), ('Breskva', '#FFDAB9'), ('Brončana', '#D2B48C'), ('Čeličnoplava', '#4682B4'), ('Čičak', '#D8BFD8'), ('Cijan', '#00FFFF'), ('Čipka', '#FDF5E6'), ('Čokoladna', '#D2691E'), ('Crna', '#000000'), ('Crvena', '#FF0000'), ('Dim', '#F5F5F5'), ('Dodger plava', '#1E90FF'), ('Duboko ružičasta', '#FF1493'), ('Fuksija', '#FF00FF'), ('Gainsboro', '#DCDCDC'), ('Grimizna', '#DC143C'), ('Indigo', '#4B0082'), ('Jelenska koža', '#FFE4B5'), ('Kadetski plava', '#5F9EA0'), ('Kestenjasta', '#800000'), ('Koraljna', '#FF7F50'), ('Kraljevski plava', '#4169E1'), ('Kudelja', '#DAA520'), ('Lan', '#FAF0E6'), ('Lavanda', '#E6E6FA'), ('Limun', '#FFFACD'), ('Lipa', '#00FF00'), ('Ljubičasta', '#EE82EE'), ('Magenta', '#FF00FF'), ('Maslinasta', '#808000'), ('Medljika', '#F0FFF0'), ('Menta', '#F5FFFA'), ('Modro nebo', '#00BFFF'), ('Modrozelena', '#008080'), ('Mornarska', '#000080'), ('Morskozelena', '#2E8B57'), ('Mračno siva', '#696969'), ('Narančasta', '#FFA500'), ('Narančastocrvena', '#FF4500'), ('Narančastoružičasta', '#FA8072'), ('Noćno plava', '#191970'), ('Orhideja', '#DA70D6'), ('Papaja', '#FFEFD5'), ('Peru', '#CD853F'), ('Plava', '#0000FF'), ('Plavi prah', '#B0E0E6'), ('Plavi škriljevac', '#6A5ACD'), ('Plavkasta', '#F0F8FF'), ('Plavo cvijeće', '#6495ED'), ('Plavo nebo', '#87CEEB'), ('Plavoljubičasta', '#8A2BE2'), ('Porculanska', '#FFE4C4'), ('Prljavomaslinasta', '#6B8E23'), ('Proljetnozelena', '#00FF7F'), ('Prozirno bijela', '#F8F8FF'), ('Pšenica', '#F5DEB3'), ('Purpurna', '#800080'), ('Rajčica', '#FF6347'), ('Rumena lavanda', '#FFF0F5'), ('Ružičasta', '#FFC0CB'), ('Ružičastosmeđa', '#BC8F8F'), ('Siva', '#808080'), ('Sivi škriljevac', '#708090'), ('Sivožuta', '#F0E68C'), ('Smeđa', '#A52A2A'), ('Smeđe sedlo', '#8B4513'), ('Smeđi pijesak', '#F4A460'), ('Smeđkasto bijela', '#FFDEAD'), ('Snijeg', '#FFFAFA'), ('Srebrna', '#C0C0C0'), ('Srednja akvamarin', '#66CDAA'), ('Srednja crvenoljubičasta', '#C71585'), ('Srednja morskozelena', '#3CB371'), ('Srednja orhideja', '#BA55D3'), ('Srednja plava', '#0000CD'), ('Srednja proljetnozelena', '#00FA9A'), ('Srednja purpurna', '#9370DB'), ('Srednja tirkizna', '#48D1CC'), ('Srednje plavi škriljevac', '#7B68EE'), ('Svijetla čeličnoplava', '#B0C4DE'), ('Svijetla narančastoružičasta', '#FFA07A'), ('Svijetli cijan', '#E0FFFF'), ('Svijetlo drvo', '#DEB887'), ('Svijetlokoraljna', '#F08080'), ('Svijetlomorskozelena', '#20B2AA'), ('Svijetloplava', '#ADD8E6'), ('Svijetloružičasta', '#FFB6C1'), ('Svijetlosiva', '#D3D3D3'), ('Svijetlosivi škriljevac', '#778899'), ('Svijetlozelena', '#90EE90'), ('Svijetložuta kudelja', '#FAFAD2'), ('Svijetložuta', '#FFFFE0'), ('Šamotna opeka', '#B22222'), ('Školjka', '#FFF5EE'), ('Šljiva', '#DDA0DD'), ('Tamna kudelja', '#B8860B'), ('Tamna magenta', '#8B008B'), ('Tamna narančastoružičasta', '#E9967A'), ('Tamna orhideja', '#9932CC'), ('Tamna sivožuta', '#BDB76B'), ('Tamni cijan', '#008B8B'), ('Tamno zelena', '#006400'), ('Tamnocrvena', '#8B0000'), ('Tamnoljubičasta', '#9400D3'), ('Tamnomaslinasta', '#556B2F'), ('Tamnonarančasta', '#FF8C00'), ('Tamnoplava', '#00008B'), ('Tamnoplavi škriljevac', '#483D8B'), ('Tamnosiva', '#A9A9A9'), ('Tamnosivi škriljevac', '#2F4F4F'), ('Tamnotirkizna', '#00CED1'), ('Tamnozelena', '#8FBC8F'), ('Tirkizna', '#40E0D0'), ('Topla ružičasta', '#FF69B4'), ('Vedro nebo', '#87CEFA'), ('Voda', '#00FFFF'), ('Zelena lipa', '#32CD32'), ('Zelena šuma', '#228B22'), ('Zelena tratina', '#7CFC00'), ('Zelena', '#008000'), ('Zeleni liker', '#7FFF00'), ('Zelenožuta', '#ADFF2F'), ('Zlatna', '#FFD700'), ('Žućkastocrvena zemlja', '#CD5C5C'), ('Žućkastoružičasta', '#FFE4E1'), ('Žućkastosmeđa glina', '#A0522D'), ('Žuta svila', '#FFF8DC'), ('Žuta', '#FFFF00'), ('Žutozelena', '#9ACD32')))
faker.providers.color.hr_HR.__init__.Provider(ColorProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/color/ru_RU/__init__.py----------------------------------------
A:faker.providers.color.ru_RU.__init__.all_colors->OrderedDict((('Античный Белый', '#FAEBD7'), ('Аквамарин', '#7FFFD4'), ('Лазурный', '#F0FFFF'), ('Бежевый', '#F5F5DC'), ('Черный', '#000000'), ('Синий', '#0000FF'), ('Сине-фиолетовый', '#8A2BE2'), ('Коричневый', '#A52A2A'), ('Шоколадный', '#D2691E'), ('Коралловый', '#FF7F50'), ('Васильковый', '#6495ED'), ('Малиновый', '#DC143C'), ('Темно-синий', '#00008B'), ('Темно-голубой', '#008B8B'), ('Темно-серый', '#A9A9A9'), ('Темно-зеленый', '#006400'), ('Темный хаки', '#BDB76B'), ('Темно-оранжевый', '#FF8C00'), ('Темно-красный', '#8B0000'), ('Темно-бирюзовый', '#00CED1'), ('Темно-фиолетовый', '#9400D3'), ('Темно-розовый', '#FF1493'), ('Тусклый серый', '#696969'), ('Фуксия', '#FF00FF'), ('Золотой', '#FFD700'), ('Серый', '#808080'), ('Зеленый', '#008000'), ('Желто-зеленый', '#ADFF2F'), ('Ярко-розовый', '#FF69B4'), ('Индиго', '#4B0082'), ('Слоновая кость', '#FFFFF0'), ('Хаки', '#F0E68C'), ('Розовато-лавандовый', '#FFF0F5'), ('Светло-синий', '#ADD8E6'), ('Светло-голубой', '#E0FFFF'), ('Светло-серый', '#D3D3D3'), ('Светло-зеленый', '#90EE90'), ('Светло-розовый', '#FFB6C1'), ('Светло-голубой', '#87CEFA'), ('Светло-желтый', '#FFFFE0'), ('Каштановый', '#800000'), ('Оранжевый', '#FFA500'), ('Оранжево-красный', '#FF4500'), ('Бледно-зеленый', '#98FB98'), ('Бледно-Бирюзовый', '#AFEEEE'), ('Розовый', '#FFC0CB'), ('Сливовый', '#DDA0DD'), ('Пурпурный', '#800080'), ('Красный', '#FF0000'), ('Цвет морской волны', '#2E8B57'), ('Серебряный', '#C0C0C0'), ('Бирюзовый', '#40E0D0'), ('Фиолетовый', '#EE82EE'), ('Белый', '#FFFFFF'), ('Желтый', '#FFFF00'), ('Желто-зеленый', '#9ACD32')))
faker.providers.color.ru_RU.__init__.Provider(ColorProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/color/pt_BR/__init__.py----------------------------------------
A:faker.providers.color.pt_BR.__init__.all_colors->OrderedDict((('Açafrão', '#F4C430'), ('Água-marinha média', '#66CDAA'), ('Água-marinha', '#7FFFD4'), ('Água', '#00FFFF'), ('Alizarina', '#E32636'), ('Amarelo brasilis', '#ECDB00'), ('Amarelo claro', '#FFFFE0'), ('Amarelo creme', '#ECD690'), ('Amarelo escuro', '#F2B73F'), ('Amarelo esverdeado', '#9ACD32'), ('Amarelo esverdeado', '#ADFF2F'), ('Amarelo ouro claro', '#FAFAD2'), ('Amarelo queimado', '#EEAD2D'), ('Amarelo', '#FFFF00'), ('Âmbar', '#FFBF00'), ('Ameixa', '#DDA0DD'), ('Amêndoa', '#FFEBCD'), ('Ametista', '#9966CC'), ('Aspargo', '#7BA05B'), ('Azul aço claro', '#B0C4DE'), ('Azul aço', '#4682B4'), ('Azul alice', '#F0F8FF'), ('Azul ardósia claro', '#8470FF'), ('Azul ardósia escuro', '#483D8B'), ('Azul ardósia médio', '#7B68EE'), ('Azul ardósia', '#6A5ACD'), ('Azul areado', '#B8CAD4'), ('Azul brasilis brilhante', '#09ACDB'), ('Azul brasilis', '#00BDCE'), ('Azul cadete', '#5F9EA0'), ('Azul camarada', '#054F77'), ('Azul celeste brilhante', '#007FFF'), ('Azul celeste pernambucano', '#00A4CD'), ('Azul celeste', '#F0FFFF'), ('Azul céu claro', '#87CEFA'), ('Azul céu profundo', '#00BFFF'), ('Azul céu', '#87CEEB'), ('Azul claro', '#ADD8E6'), ('Azul cobalto', '#0047AB'), ('Azul escuro', '#00008B'), ('Azul flor de milho', '#6495ED'), ('Azul força aérea', '#5D8AA8'), ('Azul furtivo', '#1E90FF'), ('Azul manteiga', '#a6aa3e'), ('Azul marinho', '#120A8F'), ('Azul médio', '#0000CD'), ('Azul meia-noite', '#191970'), ('Azul petróleo', '#084D6E'), ('Azul pólvora', '#B0E0E6'), ('Azul real', '#0000DD'), ('Azul taparuere', '#248EFF'), ('Azul turquesa brilhante', '#00DDFF'), ('Azul turquesa', '#00CCEE'), ('Azul violeta', '#8A2BE2'), ('Azul', '#0000FF'), ('Bege', '#F5F5DC'), ('Bordô', '#800000'), ('Borgonha', '#900020'), ('Branco antigo', '#FAEBD7'), ('Branco fantasma', '#F8F8FF'), ('Branco floral', '#FFFAF0'), ('Branco fumaça', '#F5F5F5'), ('Branco navajo', '#FFDEAD'), ('Branco', '#FFFFFF'), ('Brasil', '#A7F432'), ('Bronze', '#CD7F32'), ('Caqui escuro', '#BDB76B'), ('Caqui', '#F0E68C'), ('Caramelo', '#8B5742'), ('Cardo', '#D8BFD8'), ('Carmesim', '#DC143C'), ('Carmim carnáceo', '#960018'), ('Carmim clássico', '#992244'), ('Carmim', '#712F26'), ('Castanho avermelhado', '#8B0000'), ('Castanho claro', '#D2B48C'), ('Cenoura', '#ED9121'), ('Cereja Hollywood', '#F400A1'), ('Cereja', '#DE3163'), ('Chocolate', '#D2691E'), ('Ciano claro', '#E0FFFF'), ('Ciano escuro', '#008B8B'), ('Ciano', '#00FFFF'), ('Cinza ardósia claro', '#778899'), ('Cinza ardósia escuro', '#2F4F4F'), ('Cinza ardósia', '#708090'), ('Cinza claro', '#D3D3D3'), ('Cinza escuro', '#A9A9A9'), ('Cinza fosco', '#696969'), ('Cinza médio', '#DCDCDC'), ('Cinza', '#808080'), ('Cobre', '#B87333'), ('Concha', '#FFF5EE'), ('Coral claro', '#F08080'), ('Coral', '#FF7F50'), ('Couro', '#F0DC82'), ('Creme de marisco', '#FFE4C4'), ('Creme de menta', '#F5FFFA'), ('Creme', '#FFFDD0'), ('Dourado escuro', '#B8860B'), ('Dourado pálido', '#EEE8AA'), ('Dourado', '#DAA520'), ('Ébano', '#555D50'), ('Eminência', '#6C3082'), ('Escarlate', '#FF2400'), ('Esmeralda', '#50C878'), ('Eucalipto', '#44D7A8'), ('Fandango', '#B53389'), ('Feldspato', '#FDD5B1'), ('Ferrugem', '#B7410E'), ('Flerte', '#A2006D'), ('Fúcsia', '#FF00FF'), ('Fuligem', '#3D2B1F'), ('Glicínia', '#C9A0DC'), ('Glitter', '#E6E8FA'), ('Grená', '#831D1C'), ('Heliotrópio', '#DF73FF'), ('Herbal', '#2E8B57'), ('Independência', '#4C516D'), ('Índigo', '#4B0082'), ('Iris', '#5A4FCF'), ('Jade', '#00A86B'), ('Jambo', '#FF4500'), ('Jasmine', '#F8DE7E'), ('Kiwi', '#8EE53F'), ('Laranja claro', '#FFB84D'), ('Laranja escuro', '#FF8C00'), ('Laranja', '#FFA500'), ('Lavanda avermelhada', '#FFF0F5'), ('Lavanda', '#E6E6FA'), ('Lilás', '#C8A2C8'), ('Lima', '#FDE910'), ('Limão', '#00FF00'), ('Linho', '#FAF0E6'), ('Madeira', '#DEB887'), ('Magenta escuro', '#8B008B'), ('Magenta', '#FF00FF'), ('Malva', '#E0B0FF'), ('Mamão batido', '#FFEFD5'), ('Maná', '#F0FFF0'), ('Marfim', '#FFFFF0'), ('Marrom amarelado', '#F4A460'), ('Marrom claro', '#A52A2A'), ('Marrom rosado', '#BC8F8F'), ('Marrom sela', '#8B4513'), ('Marrom', '#964b00'), ('Milho Claro', '#FFF8DC'), ('Milho', '#FBEC5D'), ('Mocassim', '#FFE4B5'), ('Mostarda', '#FFDB58'), ('Naval', '#000080'), ('Neve', '#FFFAFA'), ('Nyanza', '#E9FFDB'), ('Ocre', '#CC7722'), ('Oliva escura', '#556B2F'), ('Oliva parda', '#6B8E23'), ('Oliva', '#808000'), ('Orquídea escura', '#9932CC'), ('Orquídea média', '#BA55D3'), ('Orquídea', '#DA70D6'), ('Ouro', '#FFD700'), ('Pardo escuro', '#CC6600'), ('Pardo', '#CD853F'), ('Pêssego', '#FFDAB9'), ('Prata', '#C0C0C0'), ('Preto', '#000000'), ('Púrpura média', '#9370DB'), ('Púrpura', '#800080'), ('Quantum', '#111111'), ('Quartzo', '#51484F'), ('Renda antiga', '#FDF5E6'), ('Rosa amoroso', '#CD69CD'), ('Rosa brilhante', '#FF007F'), ('Rosa Choque', '#FC0FC0'), ('Rosa claro', '#FFB6C1'), ('Rosa danação', '#DA69A1'), ('Rosa embaçado', '#FFE4E1'), ('Rosa forte', '#FF69B4'), ('Rosa profundo', '#FF1493'), ('Rosa', '#FFCBDB'), ('Roxo brasilis', '#8A008A'), ('Roxo', '#993399'), ('Rútilo', '#6D351A'), ('Salmão claro', '#FFA07A'), ('Salmão escuro', '#E9967A'), ('Salmão', '#FA7F72'), ('Sépia', '#705714'), ('Siena', '#FF8247'), ('Tangerina', '#F28500'), ('Terracota', '#E2725B'), ('Tijolo refratário', '#B22222'), ('Tomate', '#FF6347'), ('Triássico', '#FF2401'), ('Trigo', '#F5DEB3'), ('Turquesa escura', '#00CED1'), ('Turquesa média', '#48D1CC'), ('Turquesa pálida', '#AFEEEE'), ('Turquesa', '#40E0D0'), ('Urucum', '#EC2300'), ('Verde amarelado', '#9ACD32'), ('Verde claro', '#90EE90'), ('Verde escuro', '#006400'), ('Verde espectro', '#00FF00'), ('Verde floresta', '#228B22'), ('Verde fluorescente', '#CCFF33'), ('Verde grama', '#7CFC00'), ('Verde lima', '#32CD32'), ('Verde mar claro', '#20B2AA'), ('Verde mar escuro', '#8FBC8F'), ('Verde mar médio', '#3CB371'), ('Verde militar', '#78866B'), ('Verde pálido', '#98FB98'), ('Verde Paris', '#7FFF00'), ('Verde primavera médio', '#00FA9A'), ('Verde primavera', '#00FF7F'), ('Verde-azulado', '#008080'), ('Verde', '#008000'), ('Vermelho enegrecido', '#550000'), ('Vermelho escuro', '#8B0000'), ('Vermelho indiano', '#CD5C5C'), ('Vermelho violeta médio', '#C71585'), ('Vermelho violeta pálido', '#DB7093'), ('Vermelho violeta', '#D02090'), ('Vermelho', '#FF0000'), ('Violeta claro', '#F8CBF8'), ('Violeta escuro', '#9400D3'), ('Violeta', '#EE82EE'), ('Zinco', '#E2DDF0')))
faker.providers.color.pt_BR.__init__.Provider(ColorProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/python/__init__.py----------------------------------------
A:faker.providers.python.__init__.left_number->self.random_int(min_value, max_value)
A:faker.providers.python.__init__.float_->self.pyfloat(left_digits, right_digits, positive, min_value, max_value)
A:faker.providers.python.__init__.value_type->self.random_element(type_list)
A:faker.providers.python.__init__.method_name->'py{0}'.format(value_type)
A:faker.providers.python.__init__.nb_elements->self.randomize_nb_elements(nb_elements, min=1)
A:faker.providers.python.__init__.d[self.generator.word()]->self._random_type(value_types)
faker.providers.python.__init__.Provider(BaseProvider)
faker.providers.python.__init__.Provider._pyiterable(self,nb_elements=10,variable_nb_elements=True,*value_types)
faker.providers.python.__init__.Provider._random_type(self,type_list)
faker.providers.python.__init__.Provider.pybool(self)
faker.providers.python.__init__.Provider.pydecimal(self,left_digits=None,right_digits=None,positive=False,min_value=None,max_value=None)
faker.providers.python.__init__.Provider.pydict(self,nb_elements=10,variable_nb_elements=True,*value_types)
faker.providers.python.__init__.Provider.pyfloat(self,left_digits=None,right_digits=None,positive=False,min_value=None,max_value=None)
faker.providers.python.__init__.Provider.pyint(self)
faker.providers.python.__init__.Provider.pyiterable(self,nb_elements=10,variable_nb_elements=True,*value_types)
faker.providers.python.__init__.Provider.pylist(self,nb_elements=10,variable_nb_elements=True,*value_types)
faker.providers.python.__init__.Provider.pyset(self,nb_elements=10,variable_nb_elements=True,*value_types)
faker.providers.python.__init__.Provider.pystr(self,min_chars=None,max_chars=20)
faker.providers.python.__init__.Provider.pystruct(self,count=10,*value_types)
faker.providers.python.__init__.Provider.pytuple(self,nb_elements=10,variable_nb_elements=True,*value_types)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/python/en_US/__init__.py----------------------------------------
faker.providers.python.en_US.__init__.Provider(PythonProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/barcode/__init__.py----------------------------------------
A:faker.providers.barcode.__init__.weighted_sum->sum((x * y for (x, y) in zip(code, weights)))
faker.providers.barcode.__init__.Provider(BaseProvider)
faker.providers.barcode.__init__.Provider.ean(self,length=13)
faker.providers.barcode.__init__.Provider.ean13(self)
faker.providers.barcode.__init__.Provider.ean8(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/barcode/en_US/__init__.py----------------------------------------
faker.providers.barcode.en_US.__init__.Provider(BarCodeProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/__init__.py----------------------------------------
faker.providers.ssn.__init__.Provider(BaseProvider)
faker.providers.ssn.__init__.Provider.ssn(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/en_GB/__init__.py----------------------------------------
A:faker.providers.ssn.en_GB.__init__.pattern->self.random_element(self.nino_formats)
faker.providers.ssn.en_GB.__init__.Provider(BaseProvider)
faker.providers.ssn.en_GB.__init__.Provider.ssn(self)
faker.providers.ssn.en_GB.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/el_CY/__init__.py----------------------------------------
faker.providers.ssn.el_CY.__init__.Provider(BaseProvider)
faker.providers.ssn.el_CY.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/ro_RO/__init__.py----------------------------------------
faker.providers.ssn.ro_RO.__init__.Provider(BaseProvider)
faker.providers.ssn.ro_RO.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/hu_HU/__init__.py----------------------------------------
A:faker.providers.ssn.hu_HU.__init__.E->self.generator.random_int(17, 99)
A:faker.providers.ssn.hu_HU.__init__.H->zfix(H)
A:faker.providers.ssn.hu_HU.__init__.N->zfix(N)
A:faker.providers.ssn.hu_HU.__init__.M->self.generator.random_int(1, 2)
A:faker.providers.ssn.hu_HU.__init__.S->'{}{}{}'.format(self.generator.random_digit(), self.generator.random_digit(), self.generator.random_digit())
A:faker.providers.ssn.hu_HU.__init__.vdig->'{M}{E}{H}{N}{S}'.format(M=M, E=E, H=H, N=N, S=S)
A:faker.providers.ssn.hu_HU.__init__.K->fmod(reduce(lambda x, y: x + y, cum), 11)
faker.providers.ssn.hu_HU.__init__.Provider(SsnProvider)
faker.providers.ssn.hu_HU.__init__.Provider.ssn(self,dob=None,gender=None)
faker.providers.ssn.hu_HU.__init__.Provider.vat_id(self)
faker.providers.ssn.hu_HU.__init__.zfix(d)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/he_IL/__init__.py----------------------------------------
A:faker.providers.ssn.he_IL.__init__.newID->newID.zfill(8).zfill(8)
A:faker.providers.ssn.he_IL.__init__.num->int(digit)
faker.providers.ssn.he_IL.__init__.Provider(SsnProvider)
faker.providers.ssn.he_IL.__init__.Provider.ssn(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/no_NO/__init__.py----------------------------------------
A:faker.providers.ssn.no_NO.__init__.birthday->datetime.datetime.strptime(dob, '%Y%m%d')
A:faker.providers.ssn.no_NO.__init__.age->datetime.timedelta(days=self.generator.random.randrange(18 * 365, 90 * 365))
A:faker.providers.ssn.no_NO.__init__.gender->self.generator.random.choice(('F', 'M'))
A:faker.providers.ssn.no_NO.__init__.suffix->str(self.generator.random.randrange(90, 99))
A:faker.providers.ssn.no_NO.__init__.gender_num->self.generator.random.choice((1, 3, 5, 7, 9))
A:faker.providers.ssn.no_NO.__init__.k1->checksum(Provider.scale1, pnr_nums)
A:faker.providers.ssn.no_NO.__init__.k2->checksum(Provider.scale2, pnr_nums + [k1])
faker.providers.ssn.no_NO.__init__.Provider(SsnProvider)
faker.providers.ssn.no_NO.__init__.Provider.ssn(self,dob=None,gender=None)
faker.providers.ssn.no_NO.__init__.checksum(digits,scale)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/sk_SK/__init__.py----------------------------------------
faker.providers.ssn.sk_SK.__init__.Provider(BaseProvider)
faker.providers.ssn.sk_SK.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/zh_CN/__init__.py----------------------------------------
A:faker.providers.ssn.zh_CN.__init__.age->datetime.timedelta(days=self.random_int(min_age * 365, max_age * 365))
A:faker.providers.ssn.zh_CN.__init__.birthday_str->birthday.strftime('%Y%m%d')
A:faker.providers.ssn.zh_CN.__init__.ssn_without_checksum->self.numerify(self.random_element(self.area_codes) + birthday_str + '###')
faker.providers.ssn.zh_CN.__init__.Provider(SsnProvider)
faker.providers.ssn.zh_CN.__init__.Provider.ssn(self,min_age=18,max_age=90)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/bg_BG/__init__.py----------------------------------------
faker.providers.ssn.bg_BG.__init__.Provider(BaseProvider)
faker.providers.ssn.bg_BG.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/es_ES/__init__.py----------------------------------------
faker.providers.ssn.es_ES.__init__.Provider(BaseProvider)
faker.providers.ssn.es_ES.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/pt_PT/__init__.py----------------------------------------
faker.providers.ssn.pt_PT.__init__.Provider(BaseProvider)
faker.providers.ssn.pt_PT.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/dk_DK/__init__.py----------------------------------------
faker.providers.ssn.dk_DK.__init__.Provider(BaseProvider)
faker.providers.ssn.dk_DK.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/lb_LU/__init__.py----------------------------------------
faker.providers.ssn.lb_LU.__init__.Provider(BaseProvider)
faker.providers.ssn.lb_LU.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/uk_UA/__init__.py----------------------------------------
faker.providers.ssn.uk_UA.__init__.Provider(SsnProvider)
faker.providers.ssn.uk_UA.__init__.Provider.ssn(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/sl_SI/__init__.py----------------------------------------
faker.providers.ssn.sl_SI.__init__.Provider(BaseProvider)
faker.providers.ssn.sl_SI.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/fr_FR/__init__.py----------------------------------------
faker.providers.ssn.fr_FR.__init__.Provider(BaseProvider)
faker.providers.ssn.fr_FR.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/lv_LV/__init__.py----------------------------------------
faker.providers.ssn.lv_LV.__init__.Provider(BaseProvider)
faker.providers.ssn.lv_LV.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/en_IE/__init__.py----------------------------------------
faker.providers.ssn.en_IE.__init__.Provider(BaseProvider)
faker.providers.ssn.en_IE.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/ko_KR/__init__.py----------------------------------------
faker.providers.ssn.ko_KR.__init__.Provider(SsnProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/nl_NL/__init__.py----------------------------------------
A:faker.providers.ssn.nl_NL.__init__.digits->self.generator.random.sample(range(10), 8)
A:faker.providers.ssn.nl_NL.__init__.s->_checksum(digits)
A:faker.providers.ssn.nl_NL.__init__.bsn->''.join([str(e) for e in digits])
faker.providers.ssn.nl_NL.__init__.Provider(SsnProvider)
faker.providers.ssn.nl_NL.__init__.Provider.ssn(self)
faker.providers.ssn.nl_NL.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/cs_CZ/__init__.py----------------------------------------
faker.providers.ssn.cs_CZ.__init__.Provider(BaseProvider)
faker.providers.ssn.cs_CZ.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/en_US/__init__.py----------------------------------------
A:faker.providers.ssn.en_US.__init__.area->self.random_int(min=1, max=899)
A:faker.providers.ssn.en_US.__init__.serial->self.random_int(1, 9999)
A:faker.providers.ssn.en_US.__init__.group->self.random_int(1, 99)
A:faker.providers.ssn.en_US.__init__.itin->'{0:03d}-{1:02d}-{2:04d}'.format(area, group, serial)
A:faker.providers.ssn.en_US.__init__.ein_prefix->random.choice(ein_prefix_choices)
A:faker.providers.ssn.en_US.__init__.sequence->self.random_int(min=0, max=9999999)
A:faker.providers.ssn.en_US.__init__.ein->'{0:s}-{1:07d}'.format(ein_prefix, sequence)
A:faker.providers.ssn.en_US.__init__.ssn->'{0:03d}-{1:02d}-{2:04d}'.format(area, group, serial)
faker.providers.ssn.en_US.__init__.Provider(BaseProvider)
faker.providers.ssn.en_US.__init__.Provider.ein(self)
faker.providers.ssn.en_US.__init__.Provider.itin(self)
faker.providers.ssn.en_US.__init__.Provider.ssn(self,taxpayer_identification_number_type=SSN_TYPE)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/et_EE/__init__.py----------------------------------------
A:faker.providers.ssn.et_EE.__init__.age->datetime.timedelta(days=self.generator.random.randrange(min_age * 365, max_age * 365))
A:faker.providers.ssn.et_EE.__init__.ik->self.generator.random.choice(('7', '8'))
faker.providers.ssn.et_EE.__init__.Provider(SsnProvider)
faker.providers.ssn.et_EE.__init__.Provider.ssn(self,min_age=16,max_age=90)
faker.providers.ssn.et_EE.__init__.Provider.vat_id(self)
faker.providers.ssn.et_EE.__init__.checksum(digits)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/hr_HR/__init__.py----------------------------------------
A:faker.providers.ssn.hr_HR.__init__.digits->self.generator.random.sample(range(10), 10)
faker.providers.ssn.hr_HR.__init__.Provider(SsnProvider)
faker.providers.ssn.hr_HR.__init__.Provider.ssn(self)
faker.providers.ssn.hr_HR.__init__.Provider.vat_id(self)
faker.providers.ssn.hr_HR.__init__.checksum(digits)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/nl_BE/__init__.py----------------------------------------
A:faker.providers.ssn.nl_BE.__init__.mydate->self.generator.date()
A:faker.providers.ssn.nl_BE.__init__.elms->self.generator.date().split('-')
A:faker.providers.ssn.nl_BE.__init__.seq->self.generator.random_int(1, 998)
A:faker.providers.ssn.nl_BE.__init__.seq_str->'{:0>3}'.format(seq)
A:faker.providers.ssn.nl_BE.__init__.date_as_int->int(''.join(elms))
A:faker.providers.ssn.nl_BE.__init__.s->_checksum(date_as_int)
A:faker.providers.ssn.nl_BE.__init__.s_rjust->'{:0>2}'.format(s)
faker.providers.ssn.nl_BE.__init__.Provider(SsnProvider)
faker.providers.ssn.nl_BE.__init__.Provider.ssn(self)
faker.providers.ssn.nl_BE.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/el_GR/__init__.py----------------------------------------
faker.providers.ssn.el_GR.__init__.Provider(BaseProvider)
faker.providers.ssn.el_GR.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/de_AT/__init__.py----------------------------------------
faker.providers.ssn.de_AT.__init__.Provider(BaseProvider)
faker.providers.ssn.de_AT.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/pl_PL/__init__.py----------------------------------------
A:faker.providers.ssn.pl_PL.__init__.year->int(birth_date.strftime('%Y'))
A:faker.providers.ssn.pl_PL.__init__.birth_date->self.generator.date_time()
A:faker.providers.ssn.pl_PL.__init__.year_without_century->int(birth_date.strftime('%y'))
A:faker.providers.ssn.pl_PL.__init__.month->calculate_month(birth_date)
A:faker.providers.ssn.pl_PL.__init__.day->int(birth_date.strftime('%d'))
faker.providers.ssn.pl_PL.__init__.Provider(SsnProvider)
faker.providers.ssn.pl_PL.__init__.Provider.ssn(self)
faker.providers.ssn.pl_PL.__init__.Provider.vat_id(self)
faker.providers.ssn.pl_PL.__init__.calculate_month(birth_date)
faker.providers.ssn.pl_PL.__init__.checksum(digits)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/lt_LT/__init__.py----------------------------------------
faker.providers.ssn.lt_LT.__init__.Provider(BaseProvider)
faker.providers.ssn.lt_LT.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/ru_RU/__init__.py----------------------------------------
faker.providers.ssn.ru_RU.__init__.Provider(SsnProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/de_DE/__init__.py----------------------------------------
faker.providers.ssn.de_DE.__init__.Provider(BaseProvider)
faker.providers.ssn.de_DE.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/de_CH/__init__.py----------------------------------------
faker.providers.ssn.de_CH.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/pt_BR/__init__.py----------------------------------------
A:faker.providers.ssn.pt_BR.__init__.digits->self.generator.random.sample(range(0, 9), 8)
A:faker.providers.ssn.pt_BR.__init__.dv->checksum(digits)
A:faker.providers.ssn.pt_BR.__init__.c->self.ssn()
A:faker.providers.ssn.pt_BR.__init__.checksum->sum((i * digits[i - 2] for i in range(2, 10)))
faker.providers.ssn.pt_BR.__init__.Provider(SsnProvider)
faker.providers.ssn.pt_BR.__init__.Provider.cpf(self)
faker.providers.ssn.pt_BR.__init__.Provider.rg(self)
faker.providers.ssn.pt_BR.__init__.Provider.ssn(self)
faker.providers.ssn.pt_BR.__init__.checksum(digits)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/mt_MT/__init__.py----------------------------------------
faker.providers.ssn.mt_MT.__init__.Provider(BaseProvider)
faker.providers.ssn.mt_MT.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/fi_FI/__init__.py----------------------------------------
A:faker.providers.ssn.fi_FI.__init__.age->datetime.timedelta(days=self.generator.random.randrange(min_age * 365, max_age * 365))
A:faker.providers.ssn.fi_FI.__init__.suffix->str(self.generator.random.randrange(*range)).zfill(3)
A:faker.providers.ssn.fi_FI.__init__.checksum->_checksum(hetu_date + suffix)
A:faker.providers.ssn.fi_FI.__init__.separator->self._get_century_code(birthday.year)
A:faker.providers.ssn.fi_FI.__init__.hetu->''.join([hetu_date, separator, suffix, checksum])
faker.providers.ssn.fi_FI.__init__.Provider(SsnProvider)
faker.providers.ssn.fi_FI.__init__.Provider._get_century_code(year)
faker.providers.ssn.fi_FI.__init__.Provider.ssn(self,min_age=0,max_age=105,artificial=False)
faker.providers.ssn.fi_FI.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/it_IT/__init__.py----------------------------------------
A:faker.providers.ssn.it_IT.__init__.ALPHANUMERICS->sorted(digits + ascii_uppercase)
A:faker.providers.ssn.it_IT.__init__.code->self.bothify(self.fiscal_code_format).upper()
faker.providers.ssn.it_IT.__init__.Provider(SsnProvider)
faker.providers.ssn.it_IT.__init__.Provider.ssn(self)
faker.providers.ssn.it_IT.__init__.Provider.vat_id(self)
faker.providers.ssn.it_IT.__init__.checksum(value)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/zh_TW/__init__.py----------------------------------------
faker.providers.ssn.zh_TW.__init__.Provider(SsnProvider)
faker.providers.ssn.zh_TW.__init__.Provider.ssn(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/sv_SE/__init__.py----------------------------------------
A:faker.providers.ssn.sv_SE.__init__.digits->digits_of(number)
A:faker.providers.ssn.sv_SE.__init__.check_digit->_luhn_checksum(int(partial_number) * 10)
A:faker.providers.ssn.sv_SE.__init__.age->datetime.timedelta(days=self.generator.random.randrange(min_age * 365, max_age * 365))
A:faker.providers.ssn.sv_SE.__init__.pnr_date->birthday.strftime('%y%m%d')
A:faker.providers.ssn.sv_SE.__init__.suffix->str(self.generator.random.randrange(0, 999)).zfill(3)
A:faker.providers.ssn.sv_SE.__init__.luhn_checksum->str(_calculate_luhn(pnr_date + suffix))
A:faker.providers.ssn.sv_SE.__init__.pnr->'{0}-{1}{2}'.format(pnr_date, suffix, luhn_checksum)
faker.providers.ssn.sv_SE.__init__.Provider(SsnProvider)
faker.providers.ssn.sv_SE.__init__.Provider.ssn(self,min_age=18,max_age=90)
faker.providers.ssn.sv_SE.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/fr_CH/__init__.py----------------------------------------
A:faker.providers.ssn.fr_CH.__init__.evensum->sum(digits[:-1:2])
A:faker.providers.ssn.fr_CH.__init__.oddsum->sum(digits[1::2])
A:faker.providers.ssn.fr_CH.__init__.digits->''.join([str(d) for d in digits])
A:faker.providers.ssn.fr_CH.__init__.vat_id->self.bothify('########')
faker.providers.ssn.fr_CH.__init__.Provider(SsnProvider)
faker.providers.ssn.fr_CH.__init__.Provider.ssn(self)
faker.providers.ssn.fr_CH.__init__.Provider.vat_id(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/ssn/en_CA/__init__.py----------------------------------------
A:faker.providers.ssn.en_CA.__init__.checksumCollection->list(sin.replace(' ', ''))
A:faker.providers.ssn.en_CA.__init__.digits->self.generator.random.sample(range(9), 8)
faker.providers.ssn.en_CA.__init__.Provider(SsnProvider)
faker.providers.ssn.en_CA.__init__.Provider.ssn(self)
faker.providers.ssn.en_CA.__init__.checksum(sin)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/user_agent/__init__.py----------------------------------------
A:faker.providers.user_agent.__init__.name->self.random_element(self.user_agents)
A:faker.providers.user_agent.__init__.saf->'{0}.{1}.{2}'.format(self.generator.random.randint(531, 535), self.generator.random.randint(1, 50), self.generator.random.randint(1, 7))
A:faker.providers.user_agent.__init__.ver->'{0}.0.{1}'.format(self.generator.random.randint(4, 5), self.generator.random.randint(1, 5))
A:faker.providers.user_agent.__init__.locale->self.generator.locale().replace('_', '-')
A:faker.providers.user_agent.__init__.platform->'({0}; {1}) Presto/2.9.{2} Version/{3}.00'.format(self.linux_platform_token() if self.generator.random.getrandbits(1) else self.windows_platform_token(), self.generator.locale().replace('_', '-'), self.generator.random.randint(160, 190), self.generator.random.randint(10, 12))
faker.providers.user_agent.__init__.Provider(BaseProvider)
faker.providers.user_agent.__init__.Provider.chrome(self,version_from=13,version_to=63,build_from=800,build_to=899)
faker.providers.user_agent.__init__.Provider.firefox(self)
faker.providers.user_agent.__init__.Provider.internet_explorer(self)
faker.providers.user_agent.__init__.Provider.linux_platform_token(self)
faker.providers.user_agent.__init__.Provider.linux_processor(self)
faker.providers.user_agent.__init__.Provider.mac_platform_token(self)
faker.providers.user_agent.__init__.Provider.mac_processor(self)
faker.providers.user_agent.__init__.Provider.opera(self)
faker.providers.user_agent.__init__.Provider.safari(self)
faker.providers.user_agent.__init__.Provider.user_agent(self)
faker.providers.user_agent.__init__.Provider.windows_platform_token(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/user_agent/en_US/__init__.py----------------------------------------
faker.providers.user_agent.en_US.__init__.Provider(UserAgentProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/isbn/rules.py----------------------------------------
A:faker.providers.isbn.rules.RegistrantRule->namedtuple('RegistrantRule', ['min', 'max', 'registrant_length'])


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/isbn/isbn.py----------------------------------------
A:faker.providers.isbn.isbn.self.check_digit->self._check_digit()
A:faker.providers.isbn.isbn.body->''.join([self.group, self.registrant, self.publication])
A:faker.providers.isbn.isbn.weights->range(1, 10)
faker.providers.isbn.ISBN(self,ean=None,group=None,registrant=None,publication=None)
faker.providers.isbn.ISBN10(self,*args,**kwargs)
faker.providers.isbn.ISBN10._check_digit(self)
faker.providers.isbn.ISBN10.format(self,separator='')
faker.providers.isbn.ISBN13(self,*args,**kwargs)
faker.providers.isbn.ISBN13._check_digit(self)
faker.providers.isbn.ISBN13.format(self,separator='')
faker.providers.isbn.isbn.ISBN(self,ean=None,group=None,registrant=None,publication=None)
faker.providers.isbn.isbn.ISBN.__init__(self,ean=None,group=None,registrant=None,publication=None)
faker.providers.isbn.isbn.ISBN10(self,*args,**kwargs)
faker.providers.isbn.isbn.ISBN10.__init__(self,*args,**kwargs)
faker.providers.isbn.isbn.ISBN10._check_digit(self)
faker.providers.isbn.isbn.ISBN10.format(self,separator='')
faker.providers.isbn.isbn.ISBN13(self,*args,**kwargs)
faker.providers.isbn.isbn.ISBN13.__init__(self,*args,**kwargs)
faker.providers.isbn.isbn.ISBN13._check_digit(self)
faker.providers.isbn.isbn.ISBN13.format(self,separator='')


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/isbn/__init__.py----------------------------------------
A:faker.providers.isbn.__init__.ean->self.random_element(RULES.keys())
A:faker.providers.isbn.__init__.reg_group->self.random_element(RULES[ean].keys())
A:faker.providers.isbn.__init__.reg_pub->self.numerify('#' * reg_pub_len)
A:faker.providers.isbn.__init__.(registrant, publication)->self._registrant_publication(reg_pub, rules)
A:faker.providers.isbn.__init__.(ean, group, registrant, publication)->self._body()
A:faker.providers.isbn.__init__.isbn->ISBN10(ean, group, registrant, publication)
faker.providers.isbn.__init__.Provider(BaseProvider)
faker.providers.isbn.__init__.Provider._body(self)
faker.providers.isbn.__init__.Provider._registrant_publication(reg_pub,rules)
faker.providers.isbn.__init__.Provider.isbn10(self,separator='-')
faker.providers.isbn.__init__.Provider.isbn13(self,separator='-')


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/isbn/en_US/__init__.py----------------------------------------
faker.providers.isbn.en_US.__init__.Provider(ISBNProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/file/__init__.py----------------------------------------
A:faker.providers.file.__init__.mime_types->OrderedDict((('application', application_mime_types), ('audio', audio_mime_types), ('image', image_mime_types), ('message', message_mime_types), ('model', model_mime_types), ('multipart', multipart_mime_types), ('text', text_mime_types), ('video', video_mime_types)))
A:faker.providers.file.__init__.file_extensions->OrderedDict((('audio', audio_file_extensions), ('image', image_file_extensions), ('office', office_file_extensions), ('text', text_file_extensions), ('video', video_file_extensions)))
A:faker.providers.file.__init__.filename->self.generator.word()
A:faker.providers.file.__init__.file->self.file_name(category, extension)
A:faker.providers.file.__init__.path->self.unix_device(prefix=prefix)
A:faker.providers.file.__init__.suffix->self.random_element(string.ascii_lowercase)
faker.providers.file.__init__.Provider(BaseProvider)
faker.providers.file.__init__.Provider.file_extension(self,category=None)
faker.providers.file.__init__.Provider.file_name(self,category=None,extension=None)
faker.providers.file.__init__.Provider.file_path(self,depth=1,category=None,extension=None)
faker.providers.file.__init__.Provider.mime_type(self,category=None)
faker.providers.file.__init__.Provider.unix_device(self,prefix=None)
faker.providers.file.__init__.Provider.unix_partition(self,prefix=None)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/file/en_US/__init__.py----------------------------------------
faker.providers.file.en_US.__init__.Provider(FileProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/date_time/__init__.py----------------------------------------
A:faker.providers.date_time.__init__.dt->timestamp_to_datetime(datapoint, tzinfo)
A:faker.providers.date_time.__init__.pick->faker.utils.datetime_safe.datetime.fromtimestamp(timestamp, tzinfo)
A:faker.providers.date_time.__init__.regex->re.compile(timedelta_pattern)
A:faker.providers.date_time.__init__.start_datetime->self._parse_start_datetime('now')
A:faker.providers.date_time.__init__.end_datetime->self._parse_end_datetime(end_datetime)
A:faker.providers.date_time.__init__.ts->self.generator.random.randint(start_date, end_date)
A:faker.providers.date_time.__init__.parts->parts.groupdict().groupdict()
A:faker.providers.date_time.__init__.time_params[name_]->int(param_)
A:faker.providers.date_time.__init__.time_params->cls._parse_date_string(value)
A:faker.providers.date_time.__init__.now->faker.utils.datetime_safe.datetime.now(tzinfo).date()
A:faker.providers.date_time.__init__.today->faker.utils.datetime_safe.date.today()
A:faker.providers.date_time.__init__.start_date->faker.utils.datetime_safe.datetime.now(tzinfo).date().replace(year=now.year - (maximum_age + 1))
A:faker.providers.date_time.__init__.end_date->faker.utils.datetime_safe.datetime.now(tzinfo).date().replace(year=now.year - minimum_age)
A:faker.providers.date_time.__init__.datetime_start->faker.utils.datetime_safe.datetime.now(tzinfo)
A:faker.providers.date_time.__init__.datetime_end->faker.utils.datetime_safe.datetime.now(tzinfo)
A:faker.providers.date_time.__init__.timestamp->self.generator.random.randint(datetime_to_timestamp(datetime_start), datetime_to_timestamp(datetime_end))
A:faker.providers.date_time.__init__.this_century_start->date(today.year - today.year % 100, 1, 1)
A:faker.providers.date_time.__init__.next_century_start->date(this_century_start.year + 100, 1, 1)
A:faker.providers.date_time.__init__.this_decade_start->date(today.year - today.year % 10, 1, 1)
A:faker.providers.date_time.__init__.next_decade_start->date(this_decade_start.year + 10, 1, 1)
A:faker.providers.date_time.__init__.this_year_start->faker.utils.datetime_safe.date.today().replace(month=1, day=1)
A:faker.providers.date_time.__init__.next_year_start->date(today.year + 1, 1, 1)
A:faker.providers.date_time.__init__.this_month_start->faker.utils.datetime_safe.date.today().replace(day=1)
A:faker.providers.date_time.__init__.precision->self._parse_timedelta(precision)
A:faker.providers.date_time.__init__.dob->self.date_time_ad(tzinfo=tzinfo, start_datetime=start_date, end_datetime=end_date).date()
faker.providers.date_time.__init__.ParseError(ValueError)
faker.providers.date_time.__init__.Provider(BaseProvider)
faker.providers.date_time.__init__.Provider._parse_date(cls,value)
faker.providers.date_time.__init__.Provider._parse_date_string(cls,value)
faker.providers.date_time.__init__.Provider._parse_date_time(cls,value,tzinfo=None)
faker.providers.date_time.__init__.Provider._parse_end_datetime(cls,value)
faker.providers.date_time.__init__.Provider._parse_start_datetime(cls,value)
faker.providers.date_time.__init__.Provider._parse_timedelta(cls,value)
faker.providers.date_time.__init__.Provider.am_pm(self)
faker.providers.date_time.__init__.Provider.century(self)
faker.providers.date_time.__init__.Provider.date(self,pattern='%Y-%m-%d',end_datetime=None)
faker.providers.date_time.__init__.Provider.date_between(self,start_date='-30y',end_date='today')
faker.providers.date_time.__init__.Provider.date_between_dates(self,date_start=None,date_end=None)
faker.providers.date_time.__init__.Provider.date_object(self,end_datetime=None)
faker.providers.date_time.__init__.Provider.date_of_birth(self,tzinfo=None,minimum_age=0,maximum_age=115)
faker.providers.date_time.__init__.Provider.date_this_century(self,before_today=True,after_today=False)
faker.providers.date_time.__init__.Provider.date_this_decade(self,before_today=True,after_today=False)
faker.providers.date_time.__init__.Provider.date_this_month(self,before_today=True,after_today=False)
faker.providers.date_time.__init__.Provider.date_this_year(self,before_today=True,after_today=False)
faker.providers.date_time.__init__.Provider.date_time(self,tzinfo=None,end_datetime=None)
faker.providers.date_time.__init__.Provider.date_time_ad(self,tzinfo=None,end_datetime=None,start_datetime=None)
faker.providers.date_time.__init__.Provider.date_time_between(self,start_date='-30y',end_date='now',tzinfo=None)
faker.providers.date_time.__init__.Provider.date_time_between_dates(self,datetime_start=None,datetime_end=None,tzinfo=None)
faker.providers.date_time.__init__.Provider.date_time_this_century(self,before_now=True,after_now=False,tzinfo=None)
faker.providers.date_time.__init__.Provider.date_time_this_decade(self,before_now=True,after_now=False,tzinfo=None)
faker.providers.date_time.__init__.Provider.date_time_this_month(self,before_now=True,after_now=False,tzinfo=None)
faker.providers.date_time.__init__.Provider.date_time_this_year(self,before_now=True,after_now=False,tzinfo=None)
faker.providers.date_time.__init__.Provider.day_of_month(self)
faker.providers.date_time.__init__.Provider.day_of_week(self)
faker.providers.date_time.__init__.Provider.future_date(self,end_date='+30d',tzinfo=None)
faker.providers.date_time.__init__.Provider.future_datetime(self,end_date='+30d',tzinfo=None)
faker.providers.date_time.__init__.Provider.iso8601(self,tzinfo=None,end_datetime=None)
faker.providers.date_time.__init__.Provider.month(self)
faker.providers.date_time.__init__.Provider.month_name(self)
faker.providers.date_time.__init__.Provider.past_date(self,start_date='-30d',tzinfo=None)
faker.providers.date_time.__init__.Provider.past_datetime(self,start_date='-30d',tzinfo=None)
faker.providers.date_time.__init__.Provider.time(self,pattern='%H:%M:%S',end_datetime=None)
faker.providers.date_time.__init__.Provider.time_delta(self,end_datetime=None)
faker.providers.date_time.__init__.Provider.time_object(self,end_datetime=None)
faker.providers.date_time.__init__.Provider.time_series(self,start_date='-30d',end_date='now',precision=None,distrib=None,tzinfo=None)
faker.providers.date_time.__init__.Provider.timezone(self)
faker.providers.date_time.__init__.Provider.unix_time(self,end_datetime=None,start_datetime=None)
faker.providers.date_time.__init__.Provider.year(self)
faker.providers.date_time.__init__.datetime_to_timestamp(dt)
faker.providers.date_time.__init__.timestamp_to_datetime(timestamp,tzinfo)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/date_time/hu_HU/__init__.py----------------------------------------
A:faker.providers.date_time.hu_HU.__init__.day->self.date('%w')
A:faker.providers.date_time.hu_HU.__init__.month->self.month()
faker.providers.date_time.hu_HU.__init__.Provider(DateTimeProvider)
faker.providers.date_time.hu_HU.__init__.Provider.day_of_week(self)
faker.providers.date_time.hu_HU.__init__.Provider.month_name(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/date_time/ar_AA/__init__.py----------------------------------------
A:faker.providers.date_time.ar_AA.__init__.month->self.date('%m')
A:faker.providers.date_time.ar_AA.__init__.date->self.date('%p')
A:faker.providers.date_time.ar_AA.__init__.day->self.date('%w')
faker.providers.date_time.ar_AA.__init__.Provider(DateTimeProvider)
faker.providers.date_time.ar_AA.__init__.Provider.am_pm(self)
faker.providers.date_time.ar_AA.__init__.Provider.day_of_week(self)
faker.providers.date_time.ar_AA.__init__.Provider.month_name(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/date_time/sl_SI/__init__.py----------------------------------------
A:faker.providers.date_time.sl_SI.__init__.day->self.date('%w')
A:faker.providers.date_time.sl_SI.__init__.month->self.month()
faker.providers.date_time.sl_SI.__init__.Provider(DateTimeProvider)
faker.providers.date_time.sl_SI.__init__.Provider.day_of_week(self)
faker.providers.date_time.sl_SI.__init__.Provider.month_name(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/date_time/fr_FR/__init__.py----------------------------------------
A:faker.providers.date_time.fr_FR.__init__.day->self.date('%w')
A:faker.providers.date_time.fr_FR.__init__.month->self.month()
faker.providers.date_time.fr_FR.__init__.Provider(DateTimeProvider)
faker.providers.date_time.fr_FR.__init__.Provider.day_of_week(self)
faker.providers.date_time.fr_FR.__init__.Provider.month_name(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/date_time/hy_AM/__init__.py----------------------------------------
A:faker.providers.date_time.hy_AM.__init__.day->self.date('%w')
A:faker.providers.date_time.hy_AM.__init__.month->self.month()
faker.providers.date_time.hy_AM.__init__.Provider(DateTimeProvider)
faker.providers.date_time.hy_AM.__init__.Provider.day_of_week(self)
faker.providers.date_time.hy_AM.__init__.Provider.month_name(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/date_time/ko_KR/__init__.py----------------------------------------
A:faker.providers.date_time.ko_KR.__init__.day->self.date('%w')
A:faker.providers.date_time.ko_KR.__init__.month->self.month()
faker.providers.date_time.ko_KR.__init__.Provider(DateTimeProvider)
faker.providers.date_time.ko_KR.__init__.Provider.day_of_week(self)
faker.providers.date_time.ko_KR.__init__.Provider.month_name(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/date_time/en_US/__init__.py----------------------------------------
faker.providers.date_time.en_US.__init__.Provider(DateTimeProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/date_time/hr_HR/__init__.py----------------------------------------
A:faker.providers.date_time.hr_HR.__init__.day->self.date('%w')
A:faker.providers.date_time.hr_HR.__init__.month->self.month()
faker.providers.date_time.hr_HR.__init__.Provider(DateTimeProvider)
faker.providers.date_time.hr_HR.__init__.Provider.day_of_week(self)
faker.providers.date_time.hr_HR.__init__.Provider.month_name(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/date_time/id_ID/__init__.py----------------------------------------
A:faker.providers.date_time.id_ID.__init__.day->self.date('%w')
A:faker.providers.date_time.id_ID.__init__.month->self.month()
faker.providers.date_time.id_ID.__init__.Provider(DateTimeProvider)
faker.providers.date_time.id_ID.__init__.Provider.day_of_week(self)
faker.providers.date_time.id_ID.__init__.Provider.month_name(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/date_time/pl_PL/__init__.py----------------------------------------
A:faker.providers.date_time.pl_PL.__init__.day->self.date('%w')
A:faker.providers.date_time.pl_PL.__init__.month->self.month()
faker.providers.date_time.pl_PL.__init__.Provider(DateTimeProvider)
faker.providers.date_time.pl_PL.__init__.Provider.day_of_week(self)
faker.providers.date_time.pl_PL.__init__.Provider.month_name(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/date_time/ru_RU/__init__.py----------------------------------------
A:faker.providers.date_time.ru_RU.__init__.day->self.date('%w')
A:faker.providers.date_time.ru_RU.__init__.month->self.month()
faker.providers.date_time.ru_RU.__init__.Provider(DateTimeProvider)
faker.providers.date_time.ru_RU.__init__.Provider.day_of_week(self)
faker.providers.date_time.ru_RU.__init__.Provider.month_name(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/date_time/ar_EG/__init__.py----------------------------------------
faker.providers.date_time.ar_EG.__init__.Provider(ArabicDateTimeProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/bank/__init__.py----------------------------------------
A:faker.providers.bank.__init__.temp->re.sub('\\?', lambda x: self.random_element(ascii_uppercase), self.bban_format)
A:faker.providers.bank.__init__.bban->self.bban()
A:faker.providers.bank.__init__.check->str(check).zfill(2)
faker.providers.bank.__init__.Provider(BaseProvider)
faker.providers.bank.__init__.Provider.bank_country(self)
faker.providers.bank.__init__.Provider.bban(self)
faker.providers.bank.__init__.Provider.iban(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/bank/en_GB/__init__.py----------------------------------------
faker.providers.bank.en_GB.__init__.Provider(BankProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/bank/no_NO/__init__.py----------------------------------------
faker.providers.bank.no_NO.__init__.Provider(BankProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/bank/fr_FR/__init__.py----------------------------------------
faker.providers.bank.fr_FR.__init__.Provider(BankProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/bank/nl_NL/__init__.py----------------------------------------
faker.providers.bank.nl_NL.__init__.Provider(BankProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/bank/de_AT/__init__.py----------------------------------------
faker.providers.bank.de_AT.__init__.Provider(BankProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/bank/pl_PL/__init__.py----------------------------------------
faker.providers.bank.pl_PL.__init__.Provider(BankProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/bank/de_DE/__init__.py----------------------------------------
faker.providers.bank.de_DE.__init__.Provider(BankProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/bank/it_IT/__init__.py----------------------------------------
faker.providers.bank.it_IT.__init__.Provider(BankProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/geo/__init__.py----------------------------------------
A:faker.providers.geo.__init__.center->float(center)
A:faker.providers.geo.__init__.radius->float(radius)
A:faker.providers.geo.__init__.geo->self.generator.random.uniform(center - radius, center + radius)
A:faker.providers.geo.__init__.place->self.random_element(self.land_coords)
faker.providers.geo.__init__.Provider(BaseProvider)
faker.providers.geo.__init__.Provider.coordinate(self,center=None,radius=0.001)
faker.providers.geo.__init__.Provider.latitude(self)
faker.providers.geo.__init__.Provider.latlng(self)
faker.providers.geo.__init__.Provider.local_latlng(self,country_code='US',coords_only=False)
faker.providers.geo.__init__.Provider.location_on_land(self,coords_only=False)
faker.providers.geo.__init__.Provider.longitude(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/geo/en_US/__init__.py----------------------------------------
faker.providers.geo.en_US.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/geo/el_GR/__init__.py----------------------------------------
A:faker.providers.geo.el_GR.__init__.latitudes->list(map(lambda t: int(t[0] * 10000000), self.poly))
A:faker.providers.geo.el_GR.__init__.longitudes->list(map(lambda t: int(t[1] * 10000000), self.poly))
faker.providers.geo.el_GR.__init__.Provider(GeoProvider)
faker.providers.geo.el_GR.__init__.Provider.local_latitude(self)
faker.providers.geo.el_GR.__init__.Provider.local_latlng(self)
faker.providers.geo.el_GR.__init__.Provider.local_longitude(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/geo/de_AT/__init__.py----------------------------------------
faker.providers.geo.de_AT.__init__.Provider(GeoProvider)
faker.providers.geo.de_AT.__init__.Provider.local_latitude(self)
faker.providers.geo.de_AT.__init__.Provider.local_longitude(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/__init__.py----------------------------------------
A:faker.providers.company.__init__.pattern->self.random_element(self.formats)
faker.providers.company.__init__.Provider(BaseProvider)
faker.providers.company.__init__.Provider.bs(self)
faker.providers.company.__init__.Provider.catch_phrase(self)
faker.providers.company.__init__.Provider.company(self)
faker.providers.company.__init__.Provider.company_suffix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/hu_HU/__init__.py----------------------------------------
faker.providers.company.hu_HU.__init__.Provider(CompanyProvider)
faker.providers.company.hu_HU.__init__.Provider.company_suffix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/no_NO/__init__.py----------------------------------------
faker.providers.company.no_NO.__init__.Provider(CompanyProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/sk_SK/__init__.py----------------------------------------
faker.providers.company.sk_SK.__init__.Provider(CompanyProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/zh_CN/__init__.py----------------------------------------
faker.providers.company.zh_CN.__init__.Provider(CompanyProvider)
faker.providers.company.zh_CN.__init__.Provider.company_prefix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/bg_BG/__init__.py----------------------------------------
faker.providers.company.bg_BG.__init__.Provider(CompanyProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/pt_PT/__init__.py----------------------------------------
faker.providers.company.pt_PT.__init__.Provider(CompanyProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/sl_SI/__init__.py----------------------------------------
faker.providers.company.sl_SI.__init__.Provider(CompanyProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/fr_FR/__init__.py----------------------------------------
A:faker.providers.company.fr_FR.__init__.pattern->self.random_element(self.catch_phrase_formats)
A:faker.providers.company.fr_FR.__init__.catch_phrase->self.generator.parse(pattern)
A:faker.providers.company.fr_FR.__init__.begin_pos->self.generator.parse(pattern).find(word)
A:faker.providers.company.fr_FR.__init__.end_pos->self.generator.parse(pattern).find(word, begin_pos + 1)
A:faker.providers.company.fr_FR.__init__.sequential_number->str(self.random_number(max_sequential_digits)).zfill(4)
faker.providers.company.fr_FR.__init__.Provider(CompanyProvider)
faker.providers.company.fr_FR.__init__.Provider._is_catch_phrase_valid(self,catch_phrase)
faker.providers.company.fr_FR.__init__.Provider.catch_phrase(self)
faker.providers.company.fr_FR.__init__.Provider.catch_phrase_attribute(self)
faker.providers.company.fr_FR.__init__.Provider.catch_phrase_noun(self)
faker.providers.company.fr_FR.__init__.Provider.catch_phrase_verb(self)
faker.providers.company.fr_FR.__init__.Provider.siren(self)
faker.providers.company.fr_FR.__init__.Provider.siret(self,max_sequential_digits=2)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/es_MX/__init__.py----------------------------------------
faker.providers.company.es_MX.__init__.Provider(CompanyProvider)
faker.providers.company.es_MX.__init__.Provider.bs(self)
faker.providers.company.es_MX.__init__.Provider.catch_phrase(self)
faker.providers.company.es_MX.__init__.Provider.company_prefix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/hy_AM/__init__.py----------------------------------------
faker.providers.company.hy_AM.__init__.Provider(CompanyProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/fa_IR/__init__.py----------------------------------------
faker.providers.company.fa_IR.__init__.Provider(CompanyProvider)
faker.providers.company.fa_IR.__init__.Provider.company(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/ko_KR/__init__.py----------------------------------------
faker.providers.company.ko_KR.__init__.Provider(CompanyProvider)
faker.providers.company.ko_KR.__init__.Provider.bs(self)
faker.providers.company.ko_KR.__init__.Provider.catch_phrase(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/nl_NL/__init__.py----------------------------------------
faker.providers.company.nl_NL.__init__.Provider(CompanyProvider)
faker.providers.company.nl_NL.__init__.Provider.company_prefix(self)
faker.providers.company.nl_NL.__init__.Provider.large_company(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/cs_CZ/__init__.py----------------------------------------
faker.providers.company.cs_CZ.__init__.Provider(CompanyProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/en_US/__init__.py----------------------------------------
faker.providers.company.en_US.__init__.Provider(CompanyProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/ja_JP/__init__.py----------------------------------------
faker.providers.company.ja_JP.__init__.Provider(CompanyProvider)
faker.providers.company.ja_JP.__init__.Provider.company_category(self)
faker.providers.company.ja_JP.__init__.Provider.company_prefix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/hr_HR/__init__.py----------------------------------------
faker.providers.company.hr_HR.__init__.Provider(CompanyProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/id_ID/__init__.py----------------------------------------
faker.providers.company.id_ID.__init__.Provider(CompanyProvider)
faker.providers.company.id_ID.__init__.Provider.company_prefix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/pl_PL/__init__.py----------------------------------------
A:faker.providers.company.pl_PL.__init__.check_digit->company_vat_checksum(vat_digits)
faker.providers.company.pl_PL.__init__.Provider(CompanyProvider)
faker.providers.company.pl_PL.__init__.Provider.company_prefix(self)
faker.providers.company.pl_PL.__init__.Provider.company_vat(self)
faker.providers.company.pl_PL.__init__.Provider.local_regon(self)
faker.providers.company.pl_PL.__init__.Provider.regon(self)
faker.providers.company.pl_PL.__init__.company_vat_checksum(digits)
faker.providers.company.pl_PL.__init__.local_regon_checksum(digits)
faker.providers.company.pl_PL.__init__.regon_checksum(digits)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/ru_RU/__init__.py----------------------------------------
faker.providers.company.ru_RU.__init__.Provider(CompanyProvider)
faker.providers.company.ru_RU.__init__.Provider.company_prefix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/de_DE/__init__.py----------------------------------------
faker.providers.company.de_DE.__init__.Provider(CompanyProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/pt_BR/__init__.py----------------------------------------
A:faker.providers.company.pt_BR.__init__.digits->self.company_id()
A:faker.providers.company.pt_BR.__init__.dv->sum((w * d for (w, d) in zip(weights[1:], digits)))
A:faker.providers.company.pt_BR.__init__.dv2->sum((w * d for (w, d) in zip(weights, digits)))
A:faker.providers.company.pt_BR.__init__.pattern->self.random_element(self.catch_phrase_formats)
A:faker.providers.company.pt_BR.__init__.catch_phrase->self.generator.parse(pattern)
faker.providers.company.pt_BR.__init__.Provider(CompanyProvider)
faker.providers.company.pt_BR.__init__.Provider.catch_phrase(self)
faker.providers.company.pt_BR.__init__.Provider.catch_phrase_attribute(self)
faker.providers.company.pt_BR.__init__.Provider.catch_phrase_noun(self)
faker.providers.company.pt_BR.__init__.Provider.catch_phrase_verb(self)
faker.providers.company.pt_BR.__init__.Provider.cnpj(self)
faker.providers.company.pt_BR.__init__.Provider.company_id(self)
faker.providers.company.pt_BR.__init__.company_id_checksum(digits)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/fi_FI/__init__.py----------------------------------------
A:faker.providers.company.fi_FI.__init__.first_digit->str(self.random_digit_not_null())
A:faker.providers.company.fi_FI.__init__.cs->calculate_checksum(body)
faker.providers.company.fi_FI.__init__.Provider(CompanyProvider)
faker.providers.company.fi_FI.__init__.Provider.company_business_id(self)
faker.providers.company.fi_FI.__init__.Provider.company_vat(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/it_IT/__init__.py----------------------------------------
faker.providers.company.it_IT.__init__.Provider(CompanyProvider)
faker.providers.company.it_IT.__init__.Provider.bs(self)
faker.providers.company.it_IT.__init__.Provider.catch_phrase(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/zh_TW/__init__.py----------------------------------------
faker.providers.company.zh_TW.__init__.Provider(CompanyProvider)
faker.providers.company.zh_TW.__init__.Provider.company_prefix(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/sv_SE/__init__.py----------------------------------------
faker.providers.company.sv_SE.__init__.Provider(CompanyProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/company/fr_CH/__init__.py----------------------------------------
A:faker.providers.company.fr_CH.__init__.digits->''.join([str(digit) for digit in digits])
A:faker.providers.company.fr_CH.__init__.sum_->_checksum(digits)
faker.providers.company.fr_CH.__init__.Provider(CompanyProvider)
faker.providers.company.fr_CH.__init__.Provider.ide(self)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/lorem/__init__.py----------------------------------------
A:faker.providers.lorem.__init__.nb_words->self.randomize_nb_elements(nb_words, min=1)
A:faker.providers.lorem.__init__.words->self.words(nb=nb_words, ext_word_list=ext_word_list)
A:faker.providers.lorem.__init__.words[0]->words[0].title().title()
A:faker.providers.lorem.__init__.nb_sentences->self.randomize_nb_elements(nb_sentences, min=1)
A:faker.providers.lorem.__init__.para->self.word_connector.join(self.sentences(nb_sentences, ext_word_list=ext_word_list))
faker.providers.lorem.__init__.Provider(BaseProvider)
faker.providers.lorem.__init__.Provider.paragraph(self,nb_sentences=3,variable_nb_sentences=True,ext_word_list=None)
faker.providers.lorem.__init__.Provider.paragraphs(self,nb=3,ext_word_list=None)
faker.providers.lorem.__init__.Provider.sentence(self,nb_words=6,variable_nb_words=True,ext_word_list=None)
faker.providers.lorem.__init__.Provider.sentences(self,nb=3,ext_word_list=None)
faker.providers.lorem.__init__.Provider.text(self,max_nb_chars=200,ext_word_list=None)
faker.providers.lorem.__init__.Provider.word(self,ext_word_list=None)
faker.providers.lorem.__init__.Provider.words(self,nb=3,ext_word_list=None,unique=False)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/lorem/he_IL/__init__.py----------------------------------------
faker.providers.lorem.he_IL.__init__.Provider(LoremProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/lorem/zh_CN/__init__.py----------------------------------------
faker.providers.lorem.zh_CN.__init__.Provider(LoremProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/lorem/ar_AA/__init__.py----------------------------------------
faker.providers.lorem.ar_AA.__init__.Provider(LoremProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/lorem/fr_FR/__init__.py----------------------------------------
faker.providers.lorem.fr_FR.__init__.Provider(LoremProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/lorem/la/__init__.py----------------------------------------
faker.providers.lorem.la.__init__.Provider(LoremProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/lorem/hy_AM/__init__.py----------------------------------------
faker.providers.lorem.hy_AM.__init__.Provider(LoremProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/lorem/en_US/__init__.py----------------------------------------
faker.providers.lorem.en_US.__init__.Provider(LoremProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/lorem/ja_JP/__init__.py----------------------------------------
faker.providers.lorem.ja_JP.__init__.Provider(LoremProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/lorem/el_GR/__init__.py----------------------------------------
faker.providers.lorem.el_GR.__init__.Provider(LoremProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/lorem/pl_PL/__init__.py----------------------------------------
faker.providers.lorem.pl_PL.__init__.Provider(LoremProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/lorem/ru_RU/__init__.py----------------------------------------
faker.providers.lorem.ru_RU.__init__.Provider(LoremProvider)


----------------------------------------/home/zhang/Packages/faker/faker1.0.5/providers/lorem/zh_TW/__init__.py----------------------------------------
faker.providers.lorem.zh_TW.__init__.Provider(LoremProvider)

