
----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/__main__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/documentor.py----------------------------------------
A:faker.documentor.providers->self.generator.get_providers()
A:faker.documentor.argspec->getargspec(method)
A:faker.documentor.default->'{0}'.format(default)
A:faker.documentor.arg->'{0}={1}'.format(arg, default)
A:faker.documentor.signature->'{0}{1}({2})'.format(prefix, name, ', '.join(arguments))
A:faker.documentor.example->self.generator.format(name, *faker_args, **faker_kwargs)
A:faker.documentor.self.max_name_len->max(self.max_name_len, len(signature))
faker.documentor.Documentor(self,generator)
faker.documentor.Documentor.__init__(self,generator)
faker.documentor.Documentor.get_formatters(self,locale=None,excludes=None,**kwargs)
faker.documentor.Documentor.get_provider_formatters(self,provider,prefix='fake.',with_args=True,with_defaults=True)
faker.documentor.Documentor.get_provider_name(provider_class)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/factory.py----------------------------------------
A:faker.factory.msg->'Unable to find provider "{0}" with locale "{1}"'.format(provider, locale)
A:faker.factory.(prov_cls, lang_found)->cls._get_provider_class(prov_name, locale)
A:faker.factory.provider->prov_cls(faker)
A:faker.factory.provider_class->cls._find_provider_class(provider)
A:faker.factory.provider_module->import_module(provider_path)
A:faker.factory.available_locales->list_module(provider_module)
A:faker.factory.locale->getattr(provider_module, 'default_locale', DEFAULT_LOCALE)
A:faker.factory.path->'{provider_path}.{locale}'.format(provider_path=provider_path, locale=locale)
faker.Factory(object)
faker.Factory._find_provider_class(cls,provider_path,locale=None)
faker.Factory._get_provider_class(cls,provider,locale='')
faker.Factory.create(cls,locale=None,providers=None,generator=None,includes=None,**config)
faker.factory.Factory(object)
faker.factory.Factory._find_provider_class(cls,provider_path,locale=None)
faker.factory.Factory._get_provider_class(cls,provider,locale='')
faker.factory.Factory.create(cls,locale=None,providers=None,generator=None,includes=None,**config)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/config.py----------------------------------------
A:faker.config.PROVIDERS->find_available_providers([import_module(path) for path in META_PROVIDERS_MODULES])
A:faker.config.AVAILABLE_LOCALES->find_available_locales(PROVIDERS)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/build_docs.py----------------------------------------
A:faker.build_docs.DOCS_ROOT->os.path.abspath(os.path.join('..', 'docs'))
A:faker.build_docs.title->'Language {0}\n'.format(lang)
A:faker.build_docs.example->pprint.pformat(example, indent=4)
A:faker.build_docs.lines->text_type(example).expandtabs().splitlines()
A:faker.build_docs.msg->'error on "{0}" with value "{1}"'.format(signature, example)
A:faker.build_docs.fake->Faker(locale=lang)
A:faker.build_docs.doc->faker.documentor.Documentor(fake)
A:faker.build_docs.formatters->faker.documentor.Documentor(fake).get_formatters(with_args=True, with_defaults=True)
A:faker.build_docs.provider_name->faker.documentor.Documentor(fake).get_provider_name(provider)
A:faker.build_docs.fname->os.path.join(DOCS_ROOT, 'locales', '%s.rst' % lang)
A:faker.build_docs.AVAILABLE_LOCALES->list(AVAILABLE_LOCALES)
A:faker.build_docs.d->faker.documentor.Documentor(fake)
faker.build_docs._main(app,*args,**kwargs)
faker.build_docs.setup(app)
faker.build_docs.write(fh,s)
faker.build_docs.write_docs(*args,**kwargs)
faker.build_docs.write_provider(fh,doc,provider,formatters,excludes=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/compat.py----------------------------------------
A:faker.compat.self.argspec->_getargspec(method)
faker.compat.getargspec(self,method)
faker.compat.getargspec.__init__(self,method)
faker.compat.getargspec.args(self)
faker.compat.getargspec.defaults(self)
faker.compat.getargspec.varargs(self)
faker.compat.getargspec.varkw(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/cli.py----------------------------------------
A:faker.cli.lines->text_type(example).expandtabs().splitlines()
A:faker.cli.margin->max(30, doc.max_name_len + 1)
A:faker.cli.fake->Faker(locale=language)
A:faker.cli.parts->provider_or_field.split('.')
A:faker.cli.doc->faker.documentor.Documentor(fake)
A:faker.cli.formatters->faker.documentor.Documentor(fake).get_formatters(with_args=True, with_defaults=True)
A:faker.cli.d->faker.documentor.Documentor(fake)
A:faker.cli.self.prog_name->os.path.basename(self.argv[0])
A:faker.cli.epilog->'supported locales:\n\n  {0}\n\n  faker can take a locale as an argument, to return localized data. If no\n  localized provider is found, the factory falls back to the default en_US\n  locale.\n\nexamples:\n\n  $ faker address\n  968 Bahringer Garden Apt. 722\n  Kristinaland, NJ 09890\n\n  $ faker -l de_DE address\n  Samira-Niemeier-Allee 56\n  94812 Biedenkopf\n\n  $ faker profile ssn,birthdate\n  {{\'ssn\': u\'628-10-1085\', \'birthdate\': \'2008-03-29\'}}\n\n  $ faker -r=3 -s=";" name\n  Willam Kertzmann;\n  Josiah Maggio;\n  Gayla Schmitt;\n\n'.format(', '.join(sorted(AVAILABLE_LOCALES)))
A:faker.cli.parser->argparse.ArgumentParser(prog=self.prog_name, description='{0} version {1}'.format(self.prog_name, VERSION), epilog=epilog, formatter_class=formatter_class)
A:faker.cli.arguments->argparse.ArgumentParser(prog=self.prog_name, description='{0} version {1}'.format(self.prog_name, VERSION), epilog=epilog, formatter_class=formatter_class).parse_args(self.argv[1:])
A:faker.cli.command->Command(argv)
faker.cli.Command(self,argv=None)
faker.cli.Command.__init__(self,argv=None)
faker.cli.Command.execute(self)
faker.cli.execute_from_command_line(argv=None)
faker.cli.print_doc(provider_or_field=None,args=None,lang=DEFAULT_LOCALE,output=None,includes=None)
faker.cli.print_provider(doc,provider,formatters,excludes=None,output=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/generator.py----------------------------------------
A:faker.generator._re_token->re.compile('\\{\\{(\\s?)(\\w+)(\\s?)\\}\\}')
A:faker.generator.mod_random->random.Random()
A:faker.generator.self.__config->dict(list(self.__config.items()) + list(config.items()))
A:faker.generator.provider->provider(self)
A:faker.generator.faker_function->getattr(provider, method_name)
A:faker.generator.self.__random->random.Random()
A:faker.generator.msg->'Unknown formatter "{0}" with locale "{1}"'.format(formatter, self.__config['locale'])
A:faker.generator.formatter->list(matches.groups())
A:faker.generator.formatter[1]->self.format(formatter[1])
faker.Generator(self,**config)
faker.Generator.__format_token(self,matches)
faker.Generator.add_provider(self,provider)
faker.Generator.format(self,formatter,*args,**kwargs)
faker.Generator.get_formatter(self,formatter)
faker.Generator.get_providers(self)
faker.Generator.parse(self,text)
faker.Generator.provider(self,name)
faker.Generator.random(self)
faker.Generator.seed(cls,seed=None)
faker.Generator.seed_instance(self,seed=None)
faker.Generator.set_formatter(self,name,method)
faker.generator.Generator(self,**config)
faker.generator.Generator.__format_token(self,matches)
faker.generator.Generator.__init__(self,**config)
faker.generator.Generator.add_provider(self,provider)
faker.generator.Generator.format(self,formatter,*args,**kwargs)
faker.generator.Generator.get_formatter(self,formatter)
faker.generator.Generator.get_providers(self)
faker.generator.Generator.parse(self,text)
faker.generator.Generator.provider(self,name)
faker.generator.Generator.random(self)
faker.generator.Generator.seed(cls,seed=None)
faker.generator.Generator.seed_instance(self,seed=None)
faker.generator.Generator.set_formatter(self,name,method)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/__init__.py----------------------------------------
A:faker.providers.__init__._re_hash->re.compile('#')
A:faker.providers.__init__._re_perc->re.compile('%')
A:faker.providers.__init__._re_excl->re.compile('!')
A:faker.providers.__init__._re_at->re.compile('@')
A:faker.providers.__init__._re_qm->re.compile('\\?')
A:faker.providers.__init__.digits->self.random_digit()
A:faker.providers.__init__.choices->elements.keys()
A:faker.providers.__init__.probabilities->elements.values()
A:faker.providers.__init__.length->self.generator.random.randint(1, len(elements))
A:faker.providers.__init__.sample->set()
A:faker.providers.__init__.text->re.compile('@').sub(lambda x: str(self.random_digit_not_null_or_empty()), text)
faker.providers.__init__.BaseProvider(self,generator)
faker.providers.__init__.BaseProvider.__init__(self,generator)
faker.providers.__init__.BaseProvider.bothify(self,text='##??')
faker.providers.__init__.BaseProvider.lexify(self,text='????')
faker.providers.__init__.BaseProvider.numerify(self,text='###')
faker.providers.__init__.BaseProvider.random_digit(self)
faker.providers.__init__.BaseProvider.random_digit_not_null(self)
faker.providers.__init__.BaseProvider.random_digit_not_null_or_empty(self)
faker.providers.__init__.BaseProvider.random_digit_or_empty(self)
faker.providers.__init__.BaseProvider.random_element(self,elements=('a','b','c'))
faker.providers.__init__.BaseProvider.random_int(self,min=0,max=9999)
faker.providers.__init__.BaseProvider.random_letter(self)
faker.providers.__init__.BaseProvider.random_number(self,digits=None,fix_len=False)
faker.providers.__init__.BaseProvider.random_sample(self,elements=('a','b','c'),length=None)
faker.providers.__init__.BaseProvider.random_sample_unique(self,elements=('a','b','c'),length=None)
faker.providers.__init__.BaseProvider.randomize_nb_elements(self,number=10,le=False,ge=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/__init__.py----------------------------------------
A:faker.providers.internet.__init__.replacements->tuple()
A:faker.providers.internet.__init__.string->string.replace(search, replace).replace(search, replace)
A:faker.providers.internet.__init__.pattern->self.random_element(self.uri_formats)
A:faker.providers.internet.__init__.username->self._to_ascii(self.bothify(self.generator.parse(pattern)).lower())
A:faker.providers.internet.__init__.company->self._to_ascii(company_elements.pop(0))
A:faker.providers.internet.__init__.company_elements->self._to_ascii(company_elements.pop(0)).split(' ')
A:faker.providers.internet.__init__.address->str(ip_network(address, strict=False))
A:faker.providers.internet.__init__.value->self.generator.text(20)
A:faker.providers.internet.__init__.placeholder_url->self.random_element(self.image_placeholder_services)
faker.providers.internet.__init__.Provider(BaseProvider)
faker.providers.internet.__init__.Provider._to_ascii(self,string)
faker.providers.internet.__init__.Provider.company_email(self)
faker.providers.internet.__init__.Provider.domain_name(self,levels=1)
faker.providers.internet.__init__.Provider.domain_word(self)
faker.providers.internet.__init__.Provider.email(self)
faker.providers.internet.__init__.Provider.free_email(self)
faker.providers.internet.__init__.Provider.free_email_domain(self)
faker.providers.internet.__init__.Provider.image_url(self,width=None,height=None)
faker.providers.internet.__init__.Provider.ipv4(self,network=False)
faker.providers.internet.__init__.Provider.ipv6(self,network=False)
faker.providers.internet.__init__.Provider.mac_address(self)
faker.providers.internet.__init__.Provider.safe_email(self)
faker.providers.internet.__init__.Provider.slug(self,value=None)
faker.providers.internet.__init__.Provider.tld(self)
faker.providers.internet.__init__.Provider.uri(self)
faker.providers.internet.__init__.Provider.uri_extension(self)
faker.providers.internet.__init__.Provider.uri_page(self)
faker.providers.internet.__init__.Provider.uri_path(self,deep=None)
faker.providers.internet.__init__.Provider.url(self)
faker.providers.internet.__init__.Provider.user_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/it_IT/__init__.py----------------------------------------
faker.providers.internet.it_IT.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/ru_RU/__init__.py----------------------------------------
faker.providers.internet.ru_RU.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/en_AU/__init__.py----------------------------------------
faker.providers.internet.en_AU.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/sk_SK/__init__.py----------------------------------------
faker.providers.internet.sk_SK.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/zh_TW/__init__.py----------------------------------------
faker.providers.internet.zh_TW.__init__.Provider(InternetProvider)
faker.providers.internet.zh_TW.__init__.Provider.domain_word(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/pt_PT/__init__.py----------------------------------------
faker.providers.internet.pt_PT.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/fr_CH/__init__.py----------------------------------------
faker.providers.internet.fr_CH.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/sl_SI/__init__.py----------------------------------------
faker.providers.internet.sl_SI.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/cs_CZ/__init__.py----------------------------------------
faker.providers.internet.cs_CZ.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/pl_PL/__init__.py----------------------------------------
faker.providers.internet.pl_PL.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/zh_CN/__init__.py----------------------------------------
faker.providers.internet.zh_CN.__init__.Provider(InternetProvider)
faker.providers.internet.zh_CN.__init__.Provider.domain_word(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/pt_BR/__init__.py----------------------------------------
faker.providers.internet.pt_BR.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/bg_BG/__init__.py----------------------------------------
faker.providers.internet.bg_BG.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/no_NO/__init__.py----------------------------------------
faker.providers.internet.no_NO.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/bs_BA/__init__.py----------------------------------------
faker.providers.internet.bs_BA.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/hu_HU/__init__.py----------------------------------------
faker.providers.internet.hu_HU.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/hr_HR/__init__.py----------------------------------------
faker.providers.internet.hr_HR.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/de_DE/__init__.py----------------------------------------
faker.providers.internet.de_DE.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/en_US/__init__.py----------------------------------------
faker.providers.internet.en_US.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/uk_UA/__init__.py----------------------------------------
faker.providers.internet.uk_UA.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/ko_KR/__init__.py----------------------------------------
faker.providers.internet.ko_KR.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/sv_SE/__init__.py----------------------------------------
faker.providers.internet.sv_SE.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/el_GR/__init__.py----------------------------------------
A:faker.providers.internet.el_GR.__init__.pattern->self.random_element(self.user_name_formats)
A:faker.providers.internet.el_GR.__init__.company->latinize(company_elements.pop(0))
A:faker.providers.internet.el_GR.__init__.company_elements->latinize(company_elements.pop(0)).split(' ')
A:faker.providers.internet.el_GR.__init__.matched->list(match.group(0))
A:faker.providers.internet.el_GR.__init__.search->'Θ Χ Ψ θ χ ψ ΟΥ ΑΥ ΕΥ Ου Αυ Ευ ου αυ ευ'.split()
A:faker.providers.internet.el_GR.__init__.replace->'TH CH PS th ch ps OU AU EU Ou Au Eu ou au eu'.split()
A:faker.providers.internet.el_GR.__init__.value->map(lambda l: replace[search.find(l)], matched)
faker.providers.internet.el_GR.__init__.Provider(InternetProvider)
faker.providers.internet.el_GR.__init__.Provider.domain_word(self)
faker.providers.internet.el_GR.__init__.Provider.user_name(self)
faker.providers.internet.el_GR.__init__.latinize(value)
faker.providers.internet.el_GR.__init__.remove_accents(value)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/fa_IR/__init__.py----------------------------------------
faker.providers.internet.fa_IR.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/de_AT/__init__.py----------------------------------------
faker.providers.internet.de_AT.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/fi_FI/__init__.py----------------------------------------
faker.providers.internet.fi_FI.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/fr_FR/__init__.py----------------------------------------
faker.providers.internet.fr_FR.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/internet/ja_JP/__init__.py----------------------------------------
faker.providers.internet.ja_JP.__init__.Provider(InternetProvider)
faker.providers.internet.ja_JP.__init__.Provider.domain_word(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/date_time/__init__.py----------------------------------------
A:faker.providers.date_time.__init__.dt->timestamp_to_datetime(datapoint, tzinfo)
A:faker.providers.date_time.__init__.pick->faker.utils.datetime_safe.datetime.fromtimestamp(timestamp, tzinfo)
A:faker.providers.date_time.__init__.regex->re.compile(timedelta_pattern)
A:faker.providers.date_time.__init__.ts->self.generator.random.randint(-62135600400, int(time()))
A:faker.providers.date_time.__init__.parts->parts.groupdict().groupdict()
A:faker.providers.date_time.__init__.time_params[name]->int(param)
A:faker.providers.date_time.__init__.time_params->cls._parse_date_string(text)
A:faker.providers.date_time.__init__.now->faker.utils.datetime_safe.datetime.now(tzinfo)
A:faker.providers.date_time.__init__.start_date->self._parse_date_time(start_date, tzinfo=tzinfo)
A:faker.providers.date_time.__init__.end_date->self._parse_date_time(end_date, tzinfo=tzinfo)
A:faker.providers.date_time.__init__.timestamp->self.generator.random.randint(datetime_to_timestamp(datetime_start), datetime_to_timestamp(datetime_end))
A:faker.providers.date_time.__init__.datetime_start->faker.utils.datetime_safe.datetime.now(tzinfo)
A:faker.providers.date_time.__init__.datetime_end->faker.utils.datetime_safe.datetime.now(tzinfo)
A:faker.providers.date_time.__init__.this_century_start->datetime(now.year - now.year % 100, 1, 1, tzinfo=tzinfo)
A:faker.providers.date_time.__init__.next_century_start->datetime(this_century_start.year + 100, 1, 1, tzinfo=tzinfo)
A:faker.providers.date_time.__init__.this_decade_start->datetime(now.year - now.year % 10, 1, 1, tzinfo=tzinfo)
A:faker.providers.date_time.__init__.next_decade_start->datetime(this_decade_start.year + 10, 1, 1, tzinfo=tzinfo)
A:faker.providers.date_time.__init__.this_year_start->faker.utils.datetime_safe.datetime.now(tzinfo).replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0)
A:faker.providers.date_time.__init__.next_year_start->datetime(now.year + 1, 1, 1, tzinfo=tzinfo)
A:faker.providers.date_time.__init__.this_month_start->faker.utils.datetime_safe.datetime.now(tzinfo).replace(day=1, hour=0, minute=0, second=0, microsecond=0)
A:faker.providers.date_time.__init__.precision->self._parse_timedelta(precision)
faker.providers.date_time.__init__.ParseError(ValueError)
faker.providers.date_time.__init__.Provider(BaseProvider)
faker.providers.date_time.__init__.Provider._parse_date_string(cls,value)
faker.providers.date_time.__init__.Provider._parse_date_time(cls,text,tzinfo=None)
faker.providers.date_time.__init__.Provider._parse_timedelta(cls,value)
faker.providers.date_time.__init__.Provider.am_pm(self)
faker.providers.date_time.__init__.Provider.century(self)
faker.providers.date_time.__init__.Provider.date(self,pattern='%Y-%m-%d')
faker.providers.date_time.__init__.Provider.date_object(self)
faker.providers.date_time.__init__.Provider.date_time(self,tzinfo=None)
faker.providers.date_time.__init__.Provider.date_time_ad(self,tzinfo=None)
faker.providers.date_time.__init__.Provider.date_time_between(self,start_date='-30y',end_date='now',tzinfo=None)
faker.providers.date_time.__init__.Provider.date_time_between_dates(self,datetime_start=None,datetime_end=None,tzinfo=None)
faker.providers.date_time.__init__.Provider.date_time_this_century(self,before_now=True,after_now=False,tzinfo=None)
faker.providers.date_time.__init__.Provider.date_time_this_decade(self,before_now=True,after_now=False,tzinfo=None)
faker.providers.date_time.__init__.Provider.date_time_this_month(self,before_now=True,after_now=False,tzinfo=None)
faker.providers.date_time.__init__.Provider.date_time_this_year(self,before_now=True,after_now=False,tzinfo=None)
faker.providers.date_time.__init__.Provider.day_of_month(self)
faker.providers.date_time.__init__.Provider.day_of_week(self)
faker.providers.date_time.__init__.Provider.future_date(self,end_date='+30d',tzinfo=None)
faker.providers.date_time.__init__.Provider.future_datetime(self,end_date='+30d',tzinfo=None)
faker.providers.date_time.__init__.Provider.iso8601(self,tzinfo=None)
faker.providers.date_time.__init__.Provider.month(self)
faker.providers.date_time.__init__.Provider.month_name(self)
faker.providers.date_time.__init__.Provider.past_date(self,start_date='-30d',tzinfo=None)
faker.providers.date_time.__init__.Provider.past_datetime(self,start_date='-30d',tzinfo=None)
faker.providers.date_time.__init__.Provider.time(self,pattern='%H:%M:%S')
faker.providers.date_time.__init__.Provider.time_delta(self)
faker.providers.date_time.__init__.Provider.time_object(self)
faker.providers.date_time.__init__.Provider.time_series(self,start_date='-30d',end_date='now',precision=None,distrib=None,tzinfo=None)
faker.providers.date_time.__init__.Provider.timezone(self)
faker.providers.date_time.__init__.Provider.unix_time(self)
faker.providers.date_time.__init__.Provider.year(self)
faker.providers.date_time.__init__.datetime_to_timestamp(dt)
faker.providers.date_time.__init__.timestamp_to_datetime(timestamp,tzinfo)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/date_time/ru_RU/__init__.py----------------------------------------
A:faker.providers.date_time.ru_RU.__init__.day->self.date('%w')
A:faker.providers.date_time.ru_RU.__init__.month->self.month()
faker.providers.date_time.ru_RU.__init__.Provider(DateTimeProvider)
faker.providers.date_time.ru_RU.__init__.Provider.day_of_week(self)
faker.providers.date_time.ru_RU.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/date_time/sl_SI/__init__.py----------------------------------------
A:faker.providers.date_time.sl_SI.__init__.day->self.date('%w')
A:faker.providers.date_time.sl_SI.__init__.month->self.month()
faker.providers.date_time.sl_SI.__init__.Provider(DateTimeProvider)
faker.providers.date_time.sl_SI.__init__.Provider.day_of_week(self)
faker.providers.date_time.sl_SI.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/date_time/pl_PL/__init__.py----------------------------------------
A:faker.providers.date_time.pl_PL.__init__.day->self.date('%w')
A:faker.providers.date_time.pl_PL.__init__.month->self.month()
faker.providers.date_time.pl_PL.__init__.Provider(DateTimeProvider)
faker.providers.date_time.pl_PL.__init__.Provider.day_of_week(self)
faker.providers.date_time.pl_PL.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/date_time/hu_HU/__init__.py----------------------------------------
A:faker.providers.date_time.hu_HU.__init__.day->self.date('%w')
A:faker.providers.date_time.hu_HU.__init__.month->self.month()
faker.providers.date_time.hu_HU.__init__.Provider(DateTimeProvider)
faker.providers.date_time.hu_HU.__init__.Provider.day_of_week(self)
faker.providers.date_time.hu_HU.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/date_time/hr_HR/__init__.py----------------------------------------
A:faker.providers.date_time.hr_HR.__init__.day->self.date('%w')
A:faker.providers.date_time.hr_HR.__init__.month->self.month()
faker.providers.date_time.hr_HR.__init__.Provider(DateTimeProvider)
faker.providers.date_time.hr_HR.__init__.Provider.day_of_week(self)
faker.providers.date_time.hr_HR.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/date_time/en_US/__init__.py----------------------------------------
faker.providers.date_time.en_US.__init__.Provider(DateTimeProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/date_time/ko_KR/__init__.py----------------------------------------
A:faker.providers.date_time.ko_KR.__init__.day->self.date('%w')
A:faker.providers.date_time.ko_KR.__init__.month->self.month()
faker.providers.date_time.ko_KR.__init__.Provider(DateTimeProvider)
faker.providers.date_time.ko_KR.__init__.Provider.day_of_week(self)
faker.providers.date_time.ko_KR.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/date_time/fr_FR/__init__.py----------------------------------------
A:faker.providers.date_time.fr_FR.__init__.day->self.date('%w')
A:faker.providers.date_time.fr_FR.__init__.month->self.month()
faker.providers.date_time.fr_FR.__init__.Provider(DateTimeProvider)
faker.providers.date_time.fr_FR.__init__.Provider.day_of_week(self)
faker.providers.date_time.fr_FR.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/barcode/__init__.py----------------------------------------
A:faker.providers.barcode.__init__.weighted_sum->sum([x * y for (x, y) in zip(code, weights)])
faker.providers.barcode.__init__.Provider(BaseProvider)
faker.providers.barcode.__init__.Provider.ean(self,length=13)
faker.providers.barcode.__init__.Provider.ean13(self)
faker.providers.barcode.__init__.Provider.ean8(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/barcode/en_US/__init__.py----------------------------------------
faker.providers.barcode.en_US.__init__.Provider(BarCodeProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/python/__init__.py----------------------------------------
A:faker.providers.python.__init__.value_type->self.random_element(type_list)
A:faker.providers.python.__init__.method_name->'py{0}'.format(value_type)
A:faker.providers.python.__init__.nb_elements->self.randomize_nb_elements(nb_elements)
A:faker.providers.python.__init__.d[self.generator.word()]->self._random_type(value_types)
faker.providers.python.__init__.Provider(BaseProvider)
faker.providers.python.__init__.Provider._pyiterable(self,nb_elements=10,variable_nb_elements=True,*value_types)
faker.providers.python.__init__.Provider._random_type(self,type_list)
faker.providers.python.__init__.Provider.pybool(self)
faker.providers.python.__init__.Provider.pydecimal(self,left_digits=None,right_digits=None,positive=False)
faker.providers.python.__init__.Provider.pydict(self,nb_elements=10,variable_nb_elements=True,*value_types)
faker.providers.python.__init__.Provider.pyfloat(self,left_digits=None,right_digits=None,positive=False)
faker.providers.python.__init__.Provider.pyint(self)
faker.providers.python.__init__.Provider.pyiterable(self,nb_elements=10,variable_nb_elements=True,*value_types)
faker.providers.python.__init__.Provider.pylist(self,nb_elements=10,variable_nb_elements=True,*value_types)
faker.providers.python.__init__.Provider.pyset(self,nb_elements=10,variable_nb_elements=True,*value_types)
faker.providers.python.__init__.Provider.pystr(self,min_chars=None,max_chars=20)
faker.providers.python.__init__.Provider.pystruct(self,count=10,*value_types)
faker.providers.python.__init__.Provider.pytuple(self,nb_elements=10,variable_nb_elements=True,*value_types)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/python/en_US/__init__.py----------------------------------------
faker.providers.python.en_US.__init__.Provider(PythonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/currency/__init__.py----------------------------------------
faker.providers.currency.__init__.Provider(BaseProvider)
faker.providers.currency.__init__.Provider.cryptocurrency_code(self)
faker.providers.currency.__init__.Provider.currency_code(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/currency/en_US/__init__.py----------------------------------------
faker.providers.currency.en_US.__init__.Provider(CurrencyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/__init__.py----------------------------------------
A:faker.providers.person.__init__.pattern->self.random_element(formats)
A:faker.providers.person.__init__.prefixes->self.random_element((self.prefixes_male, self.prefixes_female))
A:faker.providers.person.__init__.suffixes->self.random_element((self.suffixes_male, self.suffixes_female))
faker.providers.person.__init__.Provider(BaseProvider)
faker.providers.person.__init__.Provider.first_name(self)
faker.providers.person.__init__.Provider.first_name_female(self)
faker.providers.person.__init__.Provider.first_name_male(self)
faker.providers.person.__init__.Provider.last_name(self)
faker.providers.person.__init__.Provider.last_name_female(self)
faker.providers.person.__init__.Provider.last_name_male(self)
faker.providers.person.__init__.Provider.name(self)
faker.providers.person.__init__.Provider.name_female(self)
faker.providers.person.__init__.Provider.name_male(self)
faker.providers.person.__init__.Provider.prefix(self)
faker.providers.person.__init__.Provider.prefix_female(self)
faker.providers.person.__init__.Provider.prefix_male(self)
faker.providers.person.__init__.Provider.suffix(self)
faker.providers.person.__init__.Provider.suffix_female(self)
faker.providers.person.__init__.Provider.suffix_male(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/it_IT/__init__.py----------------------------------------
faker.providers.person.it_IT.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/ka_GE/__init__.py----------------------------------------
faker.providers.person.ka_GE.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/ru_RU/__init__.py----------------------------------------
A:faker.providers.person.ru_RU.__init__.formats_male->OrderedDict((('{{last_name_male}} {{first_name_male}} {{middle_name_male}}', 0.97), ('{{prefix_male}} {{last_name_male}} {{first_name_male}} {{middle_name_male}}', 0.03)))
A:faker.providers.person.ru_RU.__init__.formats_female->OrderedDict((('{{last_name_female}} {{first_name_female}} {{middle_name_female}}', 0.97), ('{{prefix_female}} {{last_name_female}} {{first_name_female}} {{middle_name_female}}', 0.03)))
A:faker.providers.person.ru_RU.__init__.formats->OrderedDict((('{{last_name_male}} {{first_name_male}} {{middle_name_male}}', 0.97), ('{{prefix_male}} {{last_name_male}} {{first_name_male}} {{middle_name_male}}', 0.03))).copy()
faker.providers.person.ru_RU.__init__.Provider(PersonProvider)
faker.providers.person.ru_RU.__init__.Provider.middle_name(self)
faker.providers.person.ru_RU.__init__.Provider.middle_name_female(self)
faker.providers.person.ru_RU.__init__.Provider.middle_name_male(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/zh_TW/__init__.py----------------------------------------
A:faker.providers.person.zh_TW.__init__.pattern->self.random_element(self.romanized_formats)
faker.providers.person.zh_TW.__init__.Provider(PersonProvider)
faker.providers.person.zh_TW.__init__.Provider.first_romanized_name(self)
faker.providers.person.zh_TW.__init__.Provider.last_romanized_name(self)
faker.providers.person.zh_TW.__init__.Provider.romanized_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/pt_PT/__init__.py----------------------------------------
faker.providers.person.pt_PT.__init__.Provider(PersonProvider)
faker.providers.person.pt_PT.__init__.Provider.prefix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/en/__init__.py----------------------------------------
faker.providers.person.en.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/et_EE/__init__.py----------------------------------------
A:faker.providers.person.et_EE.__init__.prefixes->set(prefixes_male + prefixes_female)
A:faker.providers.person.et_EE.__init__.first_names_male->set(first_names_male_est + first_names_male_rus)
A:faker.providers.person.et_EE.__init__.first_names_female->set(first_names_female_est + first_names_female_rus)
A:faker.providers.person.et_EE.__init__.last_names->set(last_names_est + last_names_rus)
faker.providers.person.et_EE.__init__.Provider(PersonProvider)
faker.providers.person.et_EE.__init__.Provider.first_name_est(self)
faker.providers.person.et_EE.__init__.Provider.first_name_female_est(self)
faker.providers.person.et_EE.__init__.Provider.first_name_female_rus(self)
faker.providers.person.et_EE.__init__.Provider.first_name_male_est(self)
faker.providers.person.et_EE.__init__.Provider.first_name_male_rus(self)
faker.providers.person.et_EE.__init__.Provider.first_name_rus(self)
faker.providers.person.et_EE.__init__.Provider.last_name_est(self)
faker.providers.person.et_EE.__init__.Provider.last_name_rus(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/tr_TR/__init__.py----------------------------------------
faker.providers.person.tr_TR.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/fr_CH/__init__.py----------------------------------------
faker.providers.person.fr_CH.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/sl_SI/__init__.py----------------------------------------
faker.providers.person.sl_SI.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/cs_CZ/__init__.py----------------------------------------
faker.providers.person.cs_CZ.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/pl_PL/__init__.py----------------------------------------
A:faker.providers.person.pl_PL.__init__.identity[3]->checksum_identity_card_number(identity)
faker.providers.person.pl_PL.__init__.Provider(PersonProvider)
faker.providers.person.pl_PL.__init__.Provider.identity_card_number(self)
faker.providers.person.pl_PL.__init__.Provider.last_name(self)
faker.providers.person.pl_PL.__init__.checksum_identity_card_number(characters)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/lv_LV/__init__.py----------------------------------------
faker.providers.person.lv_LV.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/ne_NP/__init__.py----------------------------------------
faker.providers.person.ne_NP.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/zh_CN/__init__.py----------------------------------------
A:faker.providers.person.zh_CN.__init__.pattern->self.random_element(self.romanized_formats)
faker.providers.person.zh_CN.__init__.Provider(PersonProvider)
faker.providers.person.zh_CN.__init__.Provider.first_romanized_name(self)
faker.providers.person.zh_CN.__init__.Provider.last_romanized_name(self)
faker.providers.person.zh_CN.__init__.Provider.romanized_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/es_MX/__init__.py----------------------------------------
faker.providers.person.es_MX.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/pt_BR/__init__.py----------------------------------------
faker.providers.person.pt_BR.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/nl_NL/__init__.py----------------------------------------
faker.providers.person.nl_NL.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/tw_GH/__init__.py----------------------------------------
faker.providers.person.tw_GH.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/lt_LT/__init__.py----------------------------------------
faker.providers.person.lt_LT.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/bg_BG/__init__.py----------------------------------------
faker.providers.person.bg_BG.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/no_NO/__init__.py----------------------------------------
faker.providers.person.no_NO.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/hi_IN/__init__.py----------------------------------------
faker.providers.person.hi_IN.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/hu_HU/__init__.py----------------------------------------
A:faker.providers.person.hu_HU.__init__.formats_male->OrderedDict((('{{last_name}} {{first_name_male}}', 0.1), ('{{last_name}} {{last_name}} {{first_name_male}}', 0.1), ('{{last_name}} {{first_name_male}} {{first_name_male}}', 0.1), ('{{first_name_male_abbreviated}} {{last_name}} {{first_name_male}}', 0.1), ('{{last_name}} {{first_name_male_abbreviated}} {{first_name_male}}', 0.1), ('{{prefix}} {{last_name}} {{first_name_male}}', 0.05), ('{{prefix}} {{last_name}} {{last_name}} {{first_name_male}}', 0.05), ('{{prefix}} {{last_name}} {{first_name_male}} {{first_name_male}}', 0.05), ('{{prefix}} {{first_name_male_abbreviated}} {{last_name}} {{first_name_male}}', 0.05), ('{{prefix}} {{last_name}} {{first_name_male_abbreviated}} {{first_name_male}}', 0.05)))
A:faker.providers.person.hu_HU.__init__.formats_female->OrderedDict((('{{last_name}} {{first_name_female}}', 0.1), ('{{last_name}} {{last_name}} {{first_name_female}}', 0.1), ('{{last_name}} {{first_name_female}} {{first_name_female}}', 0.1), ('{{first_name_female_abbreviated}} {{last_name}} {{first_name_female}}', 0.1), ('{{last_name}} {{first_name_female_abbreviated}} {{first_name_female}}', 0.1), ('{{prefix}} {{last_name}} {{first_name_female}}', 0.05), ('{{prefix}} {{last_name}} {{last_name}} {{first_name_female}}', 0.05), ('{{prefix}} {{last_name}} {{first_name_female}} {{first_name_female}}', 0.05), ('{{prefix}} {{first_name_female_abbreviated}} {{last_name}} {{first_name_female}}', 0.05), ('{{prefix}} {{last_name}} {{first_name_female_abbreviated}} {{first_name_female}}', 0.05), ('{{last_name}}né {{last_name}} {{first_name_female}}', 0.1), ('{{last_name}}né {{last_name}} {{first_name_female}} {{first_name_female}}', 0.1), ('{{last_name}}né {{last_name}} {{first_name_female}} {{first_name_female}}', 0.05), ('{{last_name}} {{first_name_male}}né', 0.05), ('{{last_name}} {{first_name_male}}né {{last_name}} {{first_name_female}}', 0.1), ('{{prefix}} {{last_name}}né {{last_name}} {{first_name_female}}', 0.1), ('{{prefix}} {{last_name}}né {{last_name}} {{first_name_female}} {{first_name_female}}', 0.05), ('{{prefix}} {{last_name}}né {{last_name}} {{first_name_female}} {{first_name_female}}', 0.05), ('{{prefix}} {{last_name}} {{first_name_male}}né', 0.1), ('{{prefix}} {{last_name}} {{first_name_male}}né {{last_name}} {{first_name_female}}', 0.05), ('{{last_name}}né {{prefix}} {{last_name}} {{first_name_female}}', 0.1), ('{{last_name}}né {{prefix}} {{last_name}} {{first_name_female}} {{first_name_female}}', 0.05)))
A:faker.providers.person.hu_HU.__init__.formats->OrderedDict((('{{last_name}} {{first_name_male}}', 0.1), ('{{last_name}} {{last_name}} {{first_name_male}}', 0.1), ('{{last_name}} {{first_name_male}} {{first_name_male}}', 0.1), ('{{first_name_male_abbreviated}} {{last_name}} {{first_name_male}}', 0.1), ('{{last_name}} {{first_name_male_abbreviated}} {{first_name_male}}', 0.1), ('{{prefix}} {{last_name}} {{first_name_male}}', 0.05), ('{{prefix}} {{last_name}} {{last_name}} {{first_name_male}}', 0.05), ('{{prefix}} {{last_name}} {{first_name_male}} {{first_name_male}}', 0.05), ('{{prefix}} {{first_name_male_abbreviated}} {{last_name}} {{first_name_male}}', 0.05), ('{{prefix}} {{last_name}} {{first_name_male_abbreviated}} {{first_name_male}}', 0.05))).copy()
A:faker.providers.person.hu_HU.__init__.last_names->OrderedDict((('Nagy', 0.06992), ('Kovács', 0.06457), ('Tóth', 0.06316), ('Szabó', 0.06234), ('Horváth', 0.05995), ('Varga', 0.041), ('Kiss', 0.03891), ('Molnár', 0.03189), ('Németh', 0.02715), ('Farkas', 0.02499), ('Balogh', 0.02468), ('Papp', 0.01567), ('Takács', 0.01535), ('Juhász', 0.01516), ('Lakatos', 0.01486), ('Mészáros', 0.01183), ('Oláh', 0.01161), ('Simon', 0.01129), ('Rácz', 0.01063), ('Fekete', 0.01021), ('Szilágyi', 0.00959), ('Török', 0.0079), ('Fehér', 0.00786), ('Balázs', 0.00771), ('Gál', 0.00756), ('Kis', 0.0073), ('Szűcs', 0.00709), ('Kocsis', 0.007), ('Orsós', 0.00692), ('Pintér', 0.006), ('Fodor', 0.00686), ('Szalai', 0.00628), ('Sipos', 0.0062), ('Magyar', 0.0061), ('Lukács', 0.00611), ('Gulyás', 0.00591), ('Biró', 0.00576), ('Király', 0.0056), ('László', 0.00548), ('Katona', 0.00548), ('Jakab', 0.00541), ('Bogdán', 0.00536), ('Balog', 0.0053), ('Sándor', 0.0052), ('Boros', 0.00515), ('Fazekas', 0.005), ('Kelemen', 0.005), ('Váradi', 0.005), ('Antal', 0.0049), ('Somogyi', 0.00487), ('Orosz', 0.00484), ('Fülöp', 0.0048), ('Veres', 0.0047), ('Vincze', 0.00468), ('Hegedűs', 0.00458), ('Budai', 0.00453), ('Deák', 0.00449), ('Pap', 0.00442), ('Bálint', 0.00435), ('Pál', 0.00427), ('Illés', 0.0042), ('Vass', 0.0042), ('Szőke', 0.00419), ('Vörös', 0.00418), ('Bognár', 0.00416), ('Fábián', 0.00415), ('Lengyel', 0.00414), ('Bodnár', 0.00409), ('Szücs', 0.00403), ('Hajdu', 0.00391), ('Halász', 0.0039), ('Jónás', 0.00388), ('Máté', 0.00371), ('Székely', 0.00367), ('Kozma', 0.00366), ('Gáspár', 0.00364), ('Pásztor', 0.00356), ('Bakos', 0.00354), ('Dudás', 0.00348), ('Major', 0.00347), ('Orbán', 0.00343), ('Hegedüs', 0.00342), ('Virág', 0.00341), ('Barna', 0.00335), ('Novák', 0.00334), ('Soós', 0.00331), ('Tamás', 0.00326), ('Nemes', 0.00326), ('Pataki', 0.0032), ('Balla', 0.00313), ('Faragó', 0.00312), ('Kerekes', 0.0031), ('Borbély', 0.00311), ('Barta', 0.00308), ('Péter', 0.003), ('Szekeres', 0.00306), ('Csonka', 0.00305), ('Mezei', 0.00302), ('Márton', 0.003), ('Sárközi', 0.00298)))
A:faker.providers.person.hu_HU.__init__.first_names_male->OrderedDict((('László', 0.06640477), ('István', 0.060906051), ('József', 0.054476881), ('János', 0.047506017), ('Zoltán', 0.045579697), ('Sándor', 0.037170944), ('Gábor', 0.035546303), ('Ferenc', 0.034065759), ('Attila', 0.032146512), ('Péter', 0.03083703), ('Tamás', 0.030257321), ('Zsolt', 0.025204158), ('Tibor', 0.023296182), ('András', 0.021678391), ('Csaba', 0.020367141), ('Imre', 0.019339667), ('Lajos', 0.017901558), ('György', 0.01695188), ('Balázs', 0.015569685), ('Gyula', 0.014295123), ('Mihály', 0.013628337), ('Róbert', 0.013385668), ('Károly', 0.013181456), ('Dávid', 0.01315184), ('Dániel', 0.012373665), ('Ádám', 0.012290124), ('Béla', 0.012279294), ('Krisztián', 0.011589081), ('Miklós', 0.010985283), ('Norbert', 0.010746593), ('Bence', 0.010403586), ('Máté', 0.009479986), ('Pál', 0.007890264), ('Gergő', 0.007554993), ('Roland', 0.007535765), ('Szabolcs', 0.007522062), ('Bálint', 0.007021254), ('Levente', 0.006948763), ('Márk', 0.006873178), ('Richárd', 0.006811074), ('Antal', 0.006583213), ('Gergely', 0.006408174), ('Ákos', 0.006278662), ('Viktor', 0.005872447), ('Árpád', 0.005217153), ('Márton', 0.005061783), ('Géza', 0.005036367), ('Kristóf', 0.004518984), ('Milán', 0.003956735), ('Dominik', 0.003924247), ('Patrik', 0.003911428), ('Martin', 0.003747439), ('Barnabás', 0.003645333), ('Jenő', 0.003619917), ('Kálmán', 0.003613728), ('Marcell', 0.003571515), ('Áron', 0.003219668), ('Mátyás', 0.003028495), ('Ernő', 0.002998879), ('Endre', 0.002830912), ('Botond', 0.00282605), ('Zsombor', 0.002768366), ('Dezső', 0.002557523), ('Olivér', 0.002524814), ('Nándor', 0.002520394), ('Szilárd', 0.002422044), ('Erik', 0.002421381), ('Alex', 0.0023248), ('Benedek', 0.002119924), ('Vilmos', 0.002113515), ('Kornél', 0.002018481), ('Zalán', 0.001970964), ('Dénes', 0.001921458), ('Ottó', 0.001901788), ('Benjámin', 0.001738241), ('Bertalan', 0.001700227), ('Kevin', 0.001668623), ('Adrián', 0.001550603), ('Rudolf', 0.001386172), ('Noel', 0.001381973), ('Albert', 0.001355673), ('Vince', 0.001353463), ('Ervin', 0.001182622), ('Győző', 0.001125823), ('Zsigmond', 0.001120519), ('Andor', 0.001057531), ('Iván', 0.001016202), ('Szilveszter', 0.001010014), ('Gusztáv', 0.000994985), ('Barna', 0.000986808), ('Ábel', 0.000969569), ('Hunor', 0.000940396), ('Arnold', 0.000931777), ('Csongor', 0.00092824), ('Elemér', 0.000894868), ('Krisztofer', 0.000891111), ('Bendegúz', 0.000868347), ('Emil', 0.000791656), ('Tivadar', 0.000786573), ('Henrik', 0.000758063)))
A:faker.providers.person.hu_HU.__init__.first_names_female->OrderedDict((('Mária', 0.076200074), ('Erzsébet', 0.058002384), ('Katalin', 0.0429636), ('Éva', 0.039004017), ('Ilona', 0.038027669), ('Anna', 0.030819538), ('Zsuzsanna', 0.029737292), ('Margit', 0.024148354), ('Judit', 0.020956031), ('Ágnes', 0.020891678), ('Andrea', 0.020768845), ('Ildikó', 0.019861817), ('Julianna', 0.019458091), ('Erika', 0.018991368), ('Krisztina', 0.017491847), ('Irén', 0.015454477), ('Eszter', 0.014382165), ('Mónika', 0.014128821), ('Magdolna', 0.013536554), ('Edit', 0.013129441), ('Gabriella', 0.012887838), ('Szilvia', 0.012663621), ('Anita', 0.011554053), ('Viktória', 0.011388318), ('Anikó', 0.011180584), ('Márta', 0.010886596), ('Tímea', 0.010327747), ('Rozália', 0.009782898), ('Piroska', 0.009699353), ('Ibolya', 0.00922134), ('Klára', 0.008981769), ('Tünde', 0.008838839), ('Dóra', 0.008803841), ('Zsófia', 0.008600397), ('Alexandra', 0.007886652), ('Veronika', 0.00777443), ('Gizella', 0.007579567), ('Csilla', 0.007395768), ('Nikolett', 0.006972849), ('Melinda', 0.006857693), ('Réka', 0.0068385), ('Nóra', 0.006794469), ('Terézia', 0.006777535), ('Adrienn', 0.006753826), ('Beáta', 0.006526674), ('Marianna', 0.006462547), ('Vivien', 0.006299747), ('Renáta', 0.00626091), ('Barbara', 0.006076434), ('Enikő', 0.006052499), ('Bernadett', 0.005964438), ('Rita', 0.005917472), ('Brigitta', 0.005875926), ('Edina', 0.005745866), ('Hajnalka', 0.005696191), ('Gyöngyi', 0.005616484), ('Petra', 0.005609033), ('Boglárka', 0.005329496), ('Orsolya', 0.005328141), ('Jolán', 0.005184534), ('Noémi', 0.005078861), ('Etelka', 0.004833419), ('Valéria', 0.00472594), ('Fanni', 0.004716682), ('Borbála', 0.004701553), ('Annamária', 0.004528367), ('Kitti', 0.00439334), ('Teréz', 0.004384985), ('Nikoletta', 0.004310021), ('Laura', 0.004266893), ('Emese', 0.004212702), ('Lilla', 0.004193961), ('Hanna', 0.003921198), ('Aranka', 0.003884844), ('Kinga', 0.003755914), ('Klaudia', 0.003710077), ('Anett', 0.003661305), ('Róza', 0.003621339), ('Lili', 0.003436636), ('Zita', 0.00343212), ('Dorina', 0.003412476), ('Emma', 0.003374994), ('Beatrix', 0.003364381), ('Zsanett', 0.003276772), ('Sára', 0.003156873), ('Bianka', 0.003061135), ('Rózsa', 0.003006041), ('Jázmin', 0.002952527), ('Luca', 0.002949817), ('Júlia', 0.002917754), ('Diána', 0.002841434), ('Henrietta', 0.002798759), ('Györgyi', 0.002731471), ('Irma', 0.00272131), ('Dorottya', 0.002585154), ('Bettina', 0.002574316), ('Mariann', 0.002569349), ('Virág', 0.002557156), ('Gréta', 0.002515835), ('Rebeka', 0.002513351)))
A:faker.providers.person.hu_HU.__init__.first_names->OrderedDict((('László', 0.06640477), ('István', 0.060906051), ('József', 0.054476881), ('János', 0.047506017), ('Zoltán', 0.045579697), ('Sándor', 0.037170944), ('Gábor', 0.035546303), ('Ferenc', 0.034065759), ('Attila', 0.032146512), ('Péter', 0.03083703), ('Tamás', 0.030257321), ('Zsolt', 0.025204158), ('Tibor', 0.023296182), ('András', 0.021678391), ('Csaba', 0.020367141), ('Imre', 0.019339667), ('Lajos', 0.017901558), ('György', 0.01695188), ('Balázs', 0.015569685), ('Gyula', 0.014295123), ('Mihály', 0.013628337), ('Róbert', 0.013385668), ('Károly', 0.013181456), ('Dávid', 0.01315184), ('Dániel', 0.012373665), ('Ádám', 0.012290124), ('Béla', 0.012279294), ('Krisztián', 0.011589081), ('Miklós', 0.010985283), ('Norbert', 0.010746593), ('Bence', 0.010403586), ('Máté', 0.009479986), ('Pál', 0.007890264), ('Gergő', 0.007554993), ('Roland', 0.007535765), ('Szabolcs', 0.007522062), ('Bálint', 0.007021254), ('Levente', 0.006948763), ('Márk', 0.006873178), ('Richárd', 0.006811074), ('Antal', 0.006583213), ('Gergely', 0.006408174), ('Ákos', 0.006278662), ('Viktor', 0.005872447), ('Árpád', 0.005217153), ('Márton', 0.005061783), ('Géza', 0.005036367), ('Kristóf', 0.004518984), ('Milán', 0.003956735), ('Dominik', 0.003924247), ('Patrik', 0.003911428), ('Martin', 0.003747439), ('Barnabás', 0.003645333), ('Jenő', 0.003619917), ('Kálmán', 0.003613728), ('Marcell', 0.003571515), ('Áron', 0.003219668), ('Mátyás', 0.003028495), ('Ernő', 0.002998879), ('Endre', 0.002830912), ('Botond', 0.00282605), ('Zsombor', 0.002768366), ('Dezső', 0.002557523), ('Olivér', 0.002524814), ('Nándor', 0.002520394), ('Szilárd', 0.002422044), ('Erik', 0.002421381), ('Alex', 0.0023248), ('Benedek', 0.002119924), ('Vilmos', 0.002113515), ('Kornél', 0.002018481), ('Zalán', 0.001970964), ('Dénes', 0.001921458), ('Ottó', 0.001901788), ('Benjámin', 0.001738241), ('Bertalan', 0.001700227), ('Kevin', 0.001668623), ('Adrián', 0.001550603), ('Rudolf', 0.001386172), ('Noel', 0.001381973), ('Albert', 0.001355673), ('Vince', 0.001353463), ('Ervin', 0.001182622), ('Győző', 0.001125823), ('Zsigmond', 0.001120519), ('Andor', 0.001057531), ('Iván', 0.001016202), ('Szilveszter', 0.001010014), ('Gusztáv', 0.000994985), ('Barna', 0.000986808), ('Ábel', 0.000969569), ('Hunor', 0.000940396), ('Arnold', 0.000931777), ('Csongor', 0.00092824), ('Elemér', 0.000894868), ('Krisztofer', 0.000891111), ('Bendegúz', 0.000868347), ('Emil', 0.000791656), ('Tivadar', 0.000786573), ('Henrik', 0.000758063))).copy()
A:faker.providers.person.hu_HU.__init__.prefixes->OrderedDict((('Dr.', 0.95), ('Prof. Dr.', 0.05)))
faker.providers.person.hu_HU.__init__.Provider(PersonProvider)
faker.providers.person.hu_HU.__init__.Provider.first_name_female_abbreviated(self)
faker.providers.person.hu_HU.__init__.Provider.first_name_male_abbreviated(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/hr_HR/__init__.py----------------------------------------
faker.providers.person.hr_HR.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/th_TH/__init__.py----------------------------------------
faker.providers.person.th_TH.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/de_DE/__init__.py----------------------------------------
faker.providers.person.de_DE.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/en_US/__init__.py----------------------------------------
A:faker.providers.person.en_US.__init__.formats_female->OrderedDict((('{{first_name_female}} {{last_name}}', 0.97), ('{{prefix_female}} {{first_name_female}} {{last_name}}', 0.015), ('{{first_name_female}} {{last_name}} {{suffix_female}}', 0.02), ('{{prefix_female}} {{first_name_female}} {{last_name}} {{suffix_female}}', 0.005)))
A:faker.providers.person.en_US.__init__.formats_male->OrderedDict((('{{first_name_male}} {{last_name}}', 0.97), ('{{prefix_male}} {{first_name_male}} {{last_name}}', 0.015), ('{{first_name_male}} {{last_name}} {{suffix_male}}', 0.02), ('{{prefix_male}} {{first_name_male}} {{last_name}} {{suffix_male}}', 0.005)))
A:faker.providers.person.en_US.__init__.formats->OrderedDict((('{{first_name_male}} {{last_name}}', 0.97), ('{{prefix_male}} {{first_name_male}} {{last_name}}', 0.015), ('{{first_name_male}} {{last_name}} {{suffix_male}}', 0.02), ('{{prefix_male}} {{first_name_male}} {{last_name}} {{suffix_male}}', 0.005))).copy()
A:faker.providers.person.en_US.__init__.first_names_female->OrderedDict((('April', 0.004529083), ('Abigail', 0.002043839), ('Adriana', 0.000488767), ('Adrienne', 0.000622931), ('Aimee', 0.000424727), ('Alejandra', 0.000415754), ('Alexa', 0.000663005), ('Alexandra', 0.002835711), ('Alexandria', 0.000964993), ('Alexis', 0.003446735), ('Alice', 0.000589904), ('Alicia', 0.003766845), ('Alisha', 0.000475942), ('Alison', 0.001506047), ('Allison', 0.003740866), ('Alyssa', 0.00324341), ('Amanda', 0.015360768), ('Amber', 0.006928794), ('Amy', 0.012860314), ('Ana', 0.000853679), ('Andrea', 0.006747028), ('Angel', 0.001161117), ('Angela', 0.011954085), ('Angelica', 0.001102746), ('Angie', 0.00030166), ('Anita', 0.001383767), ('Ann', 0.002627483), ('Anna', 0.004691502), ('Anne', 0.002089582), ('Annette', 0.001487399), ('Ariana', 0.000412668), ('Ariel', 0.000615774), ('Ashlee', 0.000696534), ('Ashley', 0.014773009), ('Audrey', 0.001139165), ('Autumn', 0.000918594), ('Bailey', 0.000691916), ('Barbara', 0.004839169), ('Becky', 0.000960944), ('Belinda', 0.000502227), ('Beth', 0.002246113), ('Bethany', 0.001249385), ('Betty', 0.000840241), ('Beverly', 0.000990272), ('Bianca', 0.000624835), ('Bonnie', 0.001351901), ('Brandi', 0.002077216), ('Brandy', 0.002177499), ('Breanna', 0.000876003), ('Brenda', 0.005737124), ('Briana', 0.00093665), ('Brianna', 0.002543549), ('Bridget', 0.000787232), ('Brittany', 0.007258404), ('Brittney', 0.001566147), ('Brooke', 0.002410152), ('Caitlin', 0.001808319), ('Caitlyn', 0.000481194), ('Candace', 0.000550662), ('Candice', 0.000653199), ('Carla', 0.00195185), ('Carly', 0.000498725), ('Carmen', 0.000891783), ('Carol', 0.002972719), ('Caroline', 0.001198127), ('Carolyn', 0.002647225), ('Carrie', 0.002934659), ('Casey', 0.001177707), ('Cassandra', 0.002501243), ('Cassidy', 0.000452129), ('Cassie', 0.000344886), ('Catherine', 0.004460622), ('Cathy', 0.001413248), ('Charlene', 0.000538865), ('Charlotte', 0.000530417), ('Chelsea', 0.00280043), ('Chelsey', 0.000368501), ('Cheryl', 0.004166447), ('Cheyenne', 0.000696907), ('Chloe', 0.000565807), ('Christie', 0.000397873), ('Christina', 0.008735669), ('Christine', 0.007488758), ('Christy', 0.00141861), ('Cindy', 0.003360109), ('Claire', 0.000553835), ('Claudia', 0.00096055), ('Colleen', 0.001836203), ('Connie', 0.001821845), ('Courtney', 0.00484939), ('Cristina', 0.000328734), ('Crystal', 0.006365045), ('Cynthia', 0.007655379), ('Daisy', 0.000437443), ('Dana', 0.003395805), ('Danielle', 0.006671783), ('Darlene', 0.000952737), ('Dawn', 0.005014983), ('Deanna', 0.002049026), ('Debbie', 0.001842922), ('Deborah', 0.005386088), ('Debra', 0.004123572), ('Denise', 0.004592291), ('Desiree', 0.000991497), ('Destiny', 0.001055515), ('Diamond', 0.000331732), ('Diana', 0.003699348), ('Diane', 0.003058996), ('Dominique', 0.000847857), ('Donna', 0.00570819), ('Doris', 0.000398026), ('Dorothy', 0.000722426), ('Ebony', 0.000399624), ('Eileen', 0.000544271), ('Elaine', 0.000601175), ('Elizabeth', 0.014954075), ('Ellen', 0.000747267), ('Emily', 0.009100581), ('Emma', 0.001272059), ('Erica', 0.004344471), ('Erika', 0.002105537), ('Erin', 0.005450719), ('Evelyn', 0.000825095), ('Faith', 0.000427113), ('Felicia', 0.001717294), ('Frances', 0.000546897), ('Gabriela', 0.000526937), ('Gabriella', 0.00044123), ('Gabrielle', 0.001090096), ('Gail', 0.00071934), ('Gina', 0.002841095), ('Glenda', 0.000384982), ('Gloria', 0.001155623), ('Grace', 0.00087202), ('Gwendolyn', 0.000407831), ('Hailey', 0.000662917), ('Haley', 0.001557939), ('Hannah', 0.004189822), ('Hayley', 0.000478305), ('Heather', 0.010945254), ('Heidi', 0.002239941), ('Helen', 0.000636675), ('Holly', 0.003487028), ('Isabel', 0.000352305), ('Isabella', 0.000410282), ('Jackie', 0.000566748), ('Jaclyn', 0.00047708), ('Jacqueline', 0.004811242), ('Jade', 0.000446264), ('Jaime', 0.000853175), ('Jamie', 0.005067663), ('Jane', 0.0009486), ('Janet', 0.002489993), ('Janice', 0.001593308), ('Jasmin', 0.000333374), ('Jasmine', 0.003025422), ('Jean', 0.000815969), ('Jeanette', 0.000767293), ('Jeanne', 0.000515381), ('Jenna', 0.001804052), ('Jennifer', 0.029218839), ('Jenny', 0.000932667), ('Jessica', 0.020047608), ('Jill', 0.003253018), ('Jillian', 0.000988587), ('Jo', 0.000442083), ('Joan', 0.000802793), ('Joann', 0.000544336), ('Joanna', 0.001176284), ('Joanne', 0.000729824), ('Jocelyn', 0.000456878), ('Jodi', 0.001252405), ('Jody', 0.000741861), ('Jordan', 0.001653057), ('Joy', 0.000916515), ('Joyce', 0.001009488), ('Judith', 0.000870706), ('Judy', 0.001101586), ('Julia', 0.003301891), ('Julie', 0.008211731), ('Kaitlin', 0.000674473), ('Kaitlyn', 0.001478623), ('Kara', 0.001549119), ('Karen', 0.009643845), ('Kari', 0.000794323), ('Karina', 0.000494764), ('Karla', 0.000387696), ('Katelyn', 0.001476128), ('Katherine', 0.006581479), ('Kathleen', 0.00503549), ('Kathryn', 0.004177806), ('Kathy', 0.002710214), ('Katie', 0.003056216), ('Katrina', 0.001565446), ('Kayla', 0.004621465), ('Kaylee', 0.000551734), ('Kelli', 0.000932163), ('Kellie', 0.000299187), ('Kelly', 0.009342929), ('Kelsey', 0.002470383), ('Kendra', 0.001401079), ('Kerri', 0.000316215), ('Kerry', 0.000352984), ('Kiara', 0.000390037), ('Kim', 0.002518642), ('Kimberly', 0.015594077), ('Kirsten', 0.000369486), ('Krista', 0.001266872), ('Kristen', 0.004345587), ('Kristi', 0.001022926), ('Kristie', 0.000380189), ('Kristin', 0.003613728), ('Kristina', 0.002316281), ('Kristine', 0.000977709), ('Kristy', 0.001097734), ('Krystal', 0.001238113), ('Kylie', 0.00049739), ('Lacey', 0.00045469), ('Latasha', 0.00032904), ('Latoya', 0.000646371), ('Laura', 0.010815096), ('Lauren', 0.007015421), ('Laurie', 0.002200786), ('Leah', 0.001997571), ('Leslie', 0.003606134), ('Linda', 0.006437751), ('Lindsay', 0.002185466), ('Lindsey', 0.002646153), ('Lisa', 0.01872729), ('Loretta', 0.000482945), ('Lori', 0.006040316), ('Lorraine', 0.000486753), ('Lydia', 0.000370274), ('Lynn', 0.001522308), ('Mackenzie', 0.000761056), ('Madeline', 0.000808921), ('Madison', 0.002011184), ('Makayla', 0.000439391), ('Mallory', 0.000688633), ('Mandy', 0.000355566), ('Marcia', 0.000403213), ('Margaret', 0.003839968), ('Maria', 0.006593123), ('Mariah', 0.00097598), ('Marie', 0.001520229), ('Marilyn', 0.000590889), ('Marisa', 0.000339983), ('Marissa', 0.001582627), ('Martha', 0.001290028), ('Mary', 0.014288466), ('Maureen', 0.000753855), ('Mckenzie', 0.000334512), ('Meagan', 0.000729999), ('Megan', 0.007686786), ('Meghan', 0.001481578), ('Melanie', 0.003400117), ('Melinda', 0.002078113), ('Melissa', 0.014890692), ('Melody', 0.000404264), ('Mercedes', 0.000334643), ('Meredith', 0.000766987), ('Mia', 0.000319935), ('Michaela', 0.000506998), ('Michele', 0.003519551), ('Michelle', 0.01527423), ('Mikayla', 0.000410195), ('Mindy', 0.000306891), ('Miranda', 0.001421193), ('Misty', 0.001564614), ('Molly', 0.001710641), ('Monica', 0.004324095), ('Monique', 0.001272125), ('Morgan', 0.002527025), ('Nancy', 0.005023343), ('Natalie', 0.003658398), ('Natasha', 0.001739815), ('Nichole', 0.001001237), ('Nicole', 0.011156655), ('Nina', 0.000298115), ('Norma', 0.000470754), ('Olivia', 0.001967609), ('Paige', 0.001106313), ('Pam', 0.000374454), ('Pamela', 0.005816222), ('Patricia', 0.008349353), ('Patty', 0.000383493), ('Paula', 0.002478284), ('Peggy', 0.000810606), ('Penny', 0.000836564), ('Phyllis', 0.000562437), ('Priscilla', 0.000350226), ('Rachael', 0.001098128), ('Rachel', 0.00876108), ('Raven', 0.000404855), ('Rebecca', 0.010563161), ('Rebekah', 0.000858581), ('Regina', 0.001941739), ('Renee', 0.00257883), ('Rhonda', 0.002879221), ('Rita', 0.000719187), ('Roberta', 0.000461715), ('Robin', 0.00409199), ('Robyn', 0.00032138), ('Rose', 0.000697125), ('Ruth', 0.001041946), ('Sabrina', 0.001920969), ('Sally', 0.000532912), ('Samantha', 0.008186124), ('Sandra', 0.006473426), ('Sandy', 0.000497106), ('Sara', 0.005619879), ('Sarah', 0.014434273), ('Savannah', 0.000978344), ('Selena', 0.000329106), ('Shannon', 0.005952552), ('Shari', 0.000449043), ('Sharon', 0.004796469), ('Shawna', 0.000354209), ('Sheena', 0.000355763), ('Sheila', 0.00220129), ('Shelby', 0.001575601), ('Shelia', 0.000403673), ('Shelley', 0.000922227), ('Shelly', 0.001339469), ('Sheri', 0.000913166), ('Sherri', 0.001285038), ('Sherry', 0.002445235), ('Sheryl', 0.00057025), ('Shirley', 0.000833259), ('Sierra', 0.000954816), ('Sonia', 0.000332739), ('Sonya', 0.000914085), ('Sophia', 0.000535976), ('Stacey', 0.002836761), ('Stacie', 0.0003903), ('Stacy', 0.00311717), ('Stefanie', 0.00034644), ('Stephanie', 0.013595762), ('Sue', 0.000472877), ('Summer', 0.000411508), ('Susan', 0.0088973), ('Suzanne', 0.001943577), ('Sydney', 0.001220101), ('Sylvia', 0.000625798), ('Tabitha', 0.000428404), ('Tamara', 0.00212948), ('Tami', 0.000403651), ('Tammie', 0.00042337), ('Tammy', 0.006493584), ('Tanya', 0.002039024), ('Tara', 0.00316834), ('Tasha', 0.000355807), ('Taylor', 0.003996871), ('Teresa', 0.005060003), ('Terri', 0.001823903), ('Terry', 0.00060494), ('Theresa', 0.003492762), ('Tiffany', 0.006594283), ('Tina', 0.005186419), ('Toni', 0.000891695), ('Tonya', 0.002404133), ('Tracey', 0.001511146), ('Traci', 0.00086193), ('Tracie', 0.000301901), ('Tracy', 0.00498572), ('Tricia', 0.000449196), ('Valerie', 0.003218022), ('Vanessa', 0.003779189), ('Veronica', 0.003017805), ('Vicki', 0.00088653), ('Vickie', 0.000695199), ('Victoria', 0.005237677), ('Virginia', 0.001496482), ('Wanda', 0.001336186), ('Wendy', 0.004058263), ('Whitney', 0.001690768), ('Yesenia', 0.000331951), ('Yolanda', 0.001213819), ('Yvette', 0.000483427), ('Yvonne', 0.001005483), ('Zoe', 0.000367407)))
A:faker.providers.person.en_US.__init__.first_names_male->OrderedDict((('Aaron', 0.006741589), ('Adam', 0.007124922), ('Adrian', 0.001521889), ('Alan', 0.002344657), ('Albert', 0.001316595), ('Alec', 0.000442958), ('Alejandro', 0.000862489), ('Alex', 0.002111833), ('Alexander', 0.005215733), ('Alexis', 0.000277915), ('Alfred', 0.000318919), ('Allen', 0.001679613), ('Alvin', 0.00024794), ('Andre', 0.001400621), ('Andres', 0.000335574), ('Andrew', 0.013475074), ('Angel', 0.000902262), ('Anthony', 0.013783357), ('Antonio', 0.002392535), ('Arthur', 0.001342637), ('Austin', 0.003785615), ('Barry', 0.001102751), ('Benjamin', 0.006535474), ('Bernard', 0.000298691), ('Bill', 0.000430013), ('Billy', 0.001749806), ('Blake', 0.001218155), ('Bob', 0.000235731), ('Bobby', 0.001666977), ('Brad', 0.000984544), ('Bradley', 0.003845018), ('Brady', 0.000277522), ('Brandon', 0.009518346), ('Brendan', 0.000736758), ('Brent', 0.001889131), ('Brett', 0.002248371), ('Brian', 0.01597677), ('Bruce', 0.001883335), ('Bryan', 0.00456454), ('Bryce', 0.000457406), ('Caleb', 0.001485861), ('Calvin', 0.001168738), ('Cameron', 0.00180755), ('Carl', 0.002011802), ('Carlos', 0.00266638), ('Casey', 0.001440035), ('Cesar', 0.000304898), ('Chad', 0.003858817), ('Charles', 0.010889881), ('Chase', 0.000971942), ('Chris', 0.001389507), ('Christian', 0.003097779), ('Christopher', 0.02783596), ('Clarence', 0.000299289), ('Clayton', 0.000662222), ('Clifford', 0.00053078), ('Clinton', 0.000579307), ('Cody', 0.00353482), ('Cole', 0.000578811), ('Colin', 0.00078508), ('Collin', 0.000406057), ('Colton', 0.000520845), ('Connor', 0.000981073), ('Corey', 0.002476612), ('Cory', 0.001813005), ('Craig', 0.00338161), ('Cristian', 0.000333847), ('Curtis', 0.002140235), ('Dakota', 0.000797614), ('Dale', 0.001171354), ('Dalton', 0.000615113), ('Damon', 0.00034308), ('Dan', 0.000388496), ('Daniel', 0.018881874), ('Danny', 0.001873879), ('Darin', 0.000234962), ('Darius', 0.000336189), ('Darrell', 0.001218582), ('Darren', 0.001253738), ('Darryl', 0.00067019), ('Daryl', 0.000260918), ('Dave', 0.000269673), ('David', 0.031073833), ('Dean', 0.000965375), ('Dennis', 0.003318992), ('Derek', 0.003095299), ('Derrick', 0.001955921), ('Devin', 0.001312474), ('Devon', 0.000485877), ('Dillon', 0.000558361), ('Dominic', 0.000438221), ('Don', 0.000378322), ('Donald', 0.005689572), ('Douglas', 0.004513687), ('Drew', 0.000596868), ('Duane', 0.00061855), ('Dustin', 0.003088938), ('Dwayne', 0.000711382), ('Dylan', 0.002329096), ('Earl', 0.000348347), ('Eddie', 0.0007944), ('Edgar', 0.000379536), ('Eduardo', 0.000465358), ('Edward', 0.005702242), ('Edwin', 0.001117833), ('Elijah', 0.000592183), ('Eric', 0.012024659), ('Erik', 0.001997096), ('Ernest', 0.000746556), ('Ethan', 0.001143978), ('Eugene', 0.000784243), ('Evan', 0.001570691), ('Fernando', 0.000557608), ('Francis', 0.000330837), ('Francisco', 0.001084335), ('Frank', 0.003276449), ('Franklin', 0.000237561), ('Fred', 0.000396618), ('Frederick', 0.001104188), ('Gabriel', 0.001906504), ('Garrett', 0.001124861), ('Gary', 0.005023109), ('Gavin', 0.000295373), ('Gene', 0.00023426), ('Geoffrey', 0.000425978), ('George', 0.004423984), ('Gerald', 0.00165841), ('Gilbert', 0.000246726), ('Glen', 0.000374338), ('Glenn', 0.001111421), ('Gordon', 0.00027075), ('Grant', 0.00068322), ('Greg', 0.000623492), ('Gregg', 0.000235885), ('Gregory', 0.007676443), ('Guy', 0.000262645), ('Harold', 0.000929467), ('Harry', 0.000586934), ('Hayden', 0.000279454), ('Hector', 0.000798691), ('Henry', 0.001856232), ('Herbert', 0.000234226), ('Howard', 0.000712921), ('Hunter', 0.001034679), ('Ian', 0.001863192), ('Isaac', 0.001001951), ('Isaiah', 0.000625441), ('Ivan', 0.000350433), ('Jack', 0.001839748), ('Jackson', 0.000403253), ('Jacob', 0.007845384), ('Jaime', 0.000421378), ('Jake', 0.000565782), ('James', 0.029601617), ('Jamie', 0.00093552), ('Jared', 0.002538802), ('Jason', 0.01520513), ('Javier', 0.000625202), ('Jay', 0.001411462), ('Jeff', 0.001271436), ('Jeffery', 0.002627873), ('Jeffrey', 0.01225709), ('Jeremiah', 0.001209605), ('Jeremy', 0.006336079), ('Jermaine', 0.000450156), ('Jerome', 0.000634299), ('Jerry', 0.003150273), ('Jesse', 0.003884552), ('Jesus', 0.001628965), ('Jim', 0.000567714), ('Jimmy', 0.001607489), ('Joe', 0.001621544), ('Joel', 0.002537742), ('John', 0.028683008), ('Johnathan', 0.000840448), ('Johnny', 0.002117065), ('Jon', 0.001561184), ('Jonathan', 0.009963971), ('Jonathon', 0.000701157), ('Jordan', 0.003451546), ('Jorge', 0.001180553), ('Jose', 0.005368207), ('Joseph', 0.018604763), ('Joshua', 0.014808101), ('Juan', 0.003233598), ('Julian', 0.000693736), ('Justin', 0.010197889), ('Karl', 0.000362437), ('Keith', 0.004622866), ('Kelly', 0.000775283), ('Kenneth', 0.008318145), ('Kent', 0.000329418), ('Kerry', 0.000261448), ('Kevin', 0.014324157), ('Kirk', 0.0003801), ('Kristopher', 0.000580692), ('Kurt', 0.000716375), ('Kyle', 0.006350049), ('Lance', 0.001048495), ('Larry', 0.003658807), ('Lawrence', 0.001670294), ('Lee', 0.001223883), ('Leon', 0.000236347), ('Leonard', 0.000756713), ('Leroy', 0.000260234), ('Leslie', 0.000234637), ('Levi', 0.000347184), ('Logan', 0.001325812), ('Lonnie', 0.000258576), ('Louis', 0.001212255), ('Lucas', 0.001098237), ('Luis', 0.002427777), ('Luke', 0.001221455), ('Malik', 0.000306813), ('Manuel', 0.001331369), ('Marc', 0.001431947), ('Marco', 0.000290586), ('Marcus', 0.002604122), ('Mario', 0.001229337), ('Mark', 0.014382277), ('Martin', 0.002085226), ('Marvin', 0.000732962), ('Mason', 0.000562037), ('Mathew', 0.000605555), ('Matthew', 0.020425018), ('Maurice', 0.000777078), ('Max', 0.000311276), ('Maxwell', 0.000357478), ('Melvin', 0.00061932), ('Michael', 0.045602241), ('Micheal', 0.001273847), ('Miguel', 0.001416267), ('Mike', 0.001221797), ('Mitchell', 0.001747788), ('Nathan', 0.005039405), ('Nathaniel', 0.001887558), ('Neil', 0.000240331), ('Nicholas', 0.010021219), ('Nicolas', 0.000362522), ('Noah', 0.000960947), ('Norman', 0.000389043), ('Omar', 0.000639052), ('Oscar', 0.000946583), ('Parker', 0.000277522), ('Patrick', 0.007153255), ('Paul', 0.009272953), ('Pedro', 0.000275726), ('Perry', 0.000258644), ('Peter', 0.004340385), ('Philip', 0.002262956), ('Phillip', 0.00280273), ('Preston', 0.000292022), ('Ralph', 0.000836891), ('Randall', 0.001614722), ('Randy', 0.003021926), ('Ray', 0.000379451), ('Raymond', 0.003493952), ('Reginald', 0.00095108), ('Ricardo', 0.001197276), ('Richard', 0.014131961), ('Rick', 0.000440016), ('Rickey', 0.00023833), ('Ricky', 0.001856882), ('Riley', 0.000322031), ('Robert', 0.026938092), ('Roberto', 0.000906024), ('Rodney', 0.002180555), ('Roger', 0.002038032), ('Ronald', 0.00576775), ('Ronnie', 0.000905938), ('Ross', 0.00026863), ('Roy', 0.001311346), ('Ruben', 0.000774821), ('Russell', 0.002096221), ('Ryan', 0.01128178), ('Samuel', 0.00498019), ('Scott', 0.010580999), ('Sean', 0.005593456), ('Sergio', 0.000568518), ('Seth', 0.001537416), ('Shane', 0.002530218), ('Shannon', 0.000421583), ('Shaun', 0.000748761), ('Shawn', 0.004474546), ('Spencer', 0.000912094), ('Stanley', 0.000739032), ('Stephen', 0.007675365), ('Steve', 0.001407564), ('Steven', 0.013292898), ('Stuart', 0.000238826), ('Tanner', 0.000639292), ('Taylor', 0.00133036), ('Terrance', 0.000203311), ('Terrence', 0.000203704), ('Terry', 0.002873624), ('Theodore', 0.000596561), ('Thomas', 0.0143364), ('Tim', 0.000711126), ('Timothy', 0.012632608), ('Todd', 0.00414612), ('Tom', 0.000499283), ('Tommy', 0.000778737), ('Tony', 0.002511563), ('Tracy', 0.000728259), ('Travis', 0.004022458), ('Trevor', 0.001692523), ('Tristan', 0.000408759), ('Troy', 0.002695415), ('Tyler', 0.005962323), ('Tyrone', 0.000587207), ('Vernon', 0.000246401), ('Victor', 0.002340621), ('Vincent', 0.002494515), ('Walter', 0.001525891), ('Warren', 0.000317414), ('Wayne', 0.00160966), ('Wesley', 0.001733835), ('William', 0.020025989), ('Willie', 0.001379247), ('Wyatt', 0.000306591), ('Xavier', 0.000415222), ('Zachary', 0.005918634)))
A:faker.providers.person.en_US.__init__.first_names->OrderedDict((('Aaron', 0.006741589), ('Adam', 0.007124922), ('Adrian', 0.001521889), ('Alan', 0.002344657), ('Albert', 0.001316595), ('Alec', 0.000442958), ('Alejandro', 0.000862489), ('Alex', 0.002111833), ('Alexander', 0.005215733), ('Alexis', 0.000277915), ('Alfred', 0.000318919), ('Allen', 0.001679613), ('Alvin', 0.00024794), ('Andre', 0.001400621), ('Andres', 0.000335574), ('Andrew', 0.013475074), ('Angel', 0.000902262), ('Anthony', 0.013783357), ('Antonio', 0.002392535), ('Arthur', 0.001342637), ('Austin', 0.003785615), ('Barry', 0.001102751), ('Benjamin', 0.006535474), ('Bernard', 0.000298691), ('Bill', 0.000430013), ('Billy', 0.001749806), ('Blake', 0.001218155), ('Bob', 0.000235731), ('Bobby', 0.001666977), ('Brad', 0.000984544), ('Bradley', 0.003845018), ('Brady', 0.000277522), ('Brandon', 0.009518346), ('Brendan', 0.000736758), ('Brent', 0.001889131), ('Brett', 0.002248371), ('Brian', 0.01597677), ('Bruce', 0.001883335), ('Bryan', 0.00456454), ('Bryce', 0.000457406), ('Caleb', 0.001485861), ('Calvin', 0.001168738), ('Cameron', 0.00180755), ('Carl', 0.002011802), ('Carlos', 0.00266638), ('Casey', 0.001440035), ('Cesar', 0.000304898), ('Chad', 0.003858817), ('Charles', 0.010889881), ('Chase', 0.000971942), ('Chris', 0.001389507), ('Christian', 0.003097779), ('Christopher', 0.02783596), ('Clarence', 0.000299289), ('Clayton', 0.000662222), ('Clifford', 0.00053078), ('Clinton', 0.000579307), ('Cody', 0.00353482), ('Cole', 0.000578811), ('Colin', 0.00078508), ('Collin', 0.000406057), ('Colton', 0.000520845), ('Connor', 0.000981073), ('Corey', 0.002476612), ('Cory', 0.001813005), ('Craig', 0.00338161), ('Cristian', 0.000333847), ('Curtis', 0.002140235), ('Dakota', 0.000797614), ('Dale', 0.001171354), ('Dalton', 0.000615113), ('Damon', 0.00034308), ('Dan', 0.000388496), ('Daniel', 0.018881874), ('Danny', 0.001873879), ('Darin', 0.000234962), ('Darius', 0.000336189), ('Darrell', 0.001218582), ('Darren', 0.001253738), ('Darryl', 0.00067019), ('Daryl', 0.000260918), ('Dave', 0.000269673), ('David', 0.031073833), ('Dean', 0.000965375), ('Dennis', 0.003318992), ('Derek', 0.003095299), ('Derrick', 0.001955921), ('Devin', 0.001312474), ('Devon', 0.000485877), ('Dillon', 0.000558361), ('Dominic', 0.000438221), ('Don', 0.000378322), ('Donald', 0.005689572), ('Douglas', 0.004513687), ('Drew', 0.000596868), ('Duane', 0.00061855), ('Dustin', 0.003088938), ('Dwayne', 0.000711382), ('Dylan', 0.002329096), ('Earl', 0.000348347), ('Eddie', 0.0007944), ('Edgar', 0.000379536), ('Eduardo', 0.000465358), ('Edward', 0.005702242), ('Edwin', 0.001117833), ('Elijah', 0.000592183), ('Eric', 0.012024659), ('Erik', 0.001997096), ('Ernest', 0.000746556), ('Ethan', 0.001143978), ('Eugene', 0.000784243), ('Evan', 0.001570691), ('Fernando', 0.000557608), ('Francis', 0.000330837), ('Francisco', 0.001084335), ('Frank', 0.003276449), ('Franklin', 0.000237561), ('Fred', 0.000396618), ('Frederick', 0.001104188), ('Gabriel', 0.001906504), ('Garrett', 0.001124861), ('Gary', 0.005023109), ('Gavin', 0.000295373), ('Gene', 0.00023426), ('Geoffrey', 0.000425978), ('George', 0.004423984), ('Gerald', 0.00165841), ('Gilbert', 0.000246726), ('Glen', 0.000374338), ('Glenn', 0.001111421), ('Gordon', 0.00027075), ('Grant', 0.00068322), ('Greg', 0.000623492), ('Gregg', 0.000235885), ('Gregory', 0.007676443), ('Guy', 0.000262645), ('Harold', 0.000929467), ('Harry', 0.000586934), ('Hayden', 0.000279454), ('Hector', 0.000798691), ('Henry', 0.001856232), ('Herbert', 0.000234226), ('Howard', 0.000712921), ('Hunter', 0.001034679), ('Ian', 0.001863192), ('Isaac', 0.001001951), ('Isaiah', 0.000625441), ('Ivan', 0.000350433), ('Jack', 0.001839748), ('Jackson', 0.000403253), ('Jacob', 0.007845384), ('Jaime', 0.000421378), ('Jake', 0.000565782), ('James', 0.029601617), ('Jamie', 0.00093552), ('Jared', 0.002538802), ('Jason', 0.01520513), ('Javier', 0.000625202), ('Jay', 0.001411462), ('Jeff', 0.001271436), ('Jeffery', 0.002627873), ('Jeffrey', 0.01225709), ('Jeremiah', 0.001209605), ('Jeremy', 0.006336079), ('Jermaine', 0.000450156), ('Jerome', 0.000634299), ('Jerry', 0.003150273), ('Jesse', 0.003884552), ('Jesus', 0.001628965), ('Jim', 0.000567714), ('Jimmy', 0.001607489), ('Joe', 0.001621544), ('Joel', 0.002537742), ('John', 0.028683008), ('Johnathan', 0.000840448), ('Johnny', 0.002117065), ('Jon', 0.001561184), ('Jonathan', 0.009963971), ('Jonathon', 0.000701157), ('Jordan', 0.003451546), ('Jorge', 0.001180553), ('Jose', 0.005368207), ('Joseph', 0.018604763), ('Joshua', 0.014808101), ('Juan', 0.003233598), ('Julian', 0.000693736), ('Justin', 0.010197889), ('Karl', 0.000362437), ('Keith', 0.004622866), ('Kelly', 0.000775283), ('Kenneth', 0.008318145), ('Kent', 0.000329418), ('Kerry', 0.000261448), ('Kevin', 0.014324157), ('Kirk', 0.0003801), ('Kristopher', 0.000580692), ('Kurt', 0.000716375), ('Kyle', 0.006350049), ('Lance', 0.001048495), ('Larry', 0.003658807), ('Lawrence', 0.001670294), ('Lee', 0.001223883), ('Leon', 0.000236347), ('Leonard', 0.000756713), ('Leroy', 0.000260234), ('Leslie', 0.000234637), ('Levi', 0.000347184), ('Logan', 0.001325812), ('Lonnie', 0.000258576), ('Louis', 0.001212255), ('Lucas', 0.001098237), ('Luis', 0.002427777), ('Luke', 0.001221455), ('Malik', 0.000306813), ('Manuel', 0.001331369), ('Marc', 0.001431947), ('Marco', 0.000290586), ('Marcus', 0.002604122), ('Mario', 0.001229337), ('Mark', 0.014382277), ('Martin', 0.002085226), ('Marvin', 0.000732962), ('Mason', 0.000562037), ('Mathew', 0.000605555), ('Matthew', 0.020425018), ('Maurice', 0.000777078), ('Max', 0.000311276), ('Maxwell', 0.000357478), ('Melvin', 0.00061932), ('Michael', 0.045602241), ('Micheal', 0.001273847), ('Miguel', 0.001416267), ('Mike', 0.001221797), ('Mitchell', 0.001747788), ('Nathan', 0.005039405), ('Nathaniel', 0.001887558), ('Neil', 0.000240331), ('Nicholas', 0.010021219), ('Nicolas', 0.000362522), ('Noah', 0.000960947), ('Norman', 0.000389043), ('Omar', 0.000639052), ('Oscar', 0.000946583), ('Parker', 0.000277522), ('Patrick', 0.007153255), ('Paul', 0.009272953), ('Pedro', 0.000275726), ('Perry', 0.000258644), ('Peter', 0.004340385), ('Philip', 0.002262956), ('Phillip', 0.00280273), ('Preston', 0.000292022), ('Ralph', 0.000836891), ('Randall', 0.001614722), ('Randy', 0.003021926), ('Ray', 0.000379451), ('Raymond', 0.003493952), ('Reginald', 0.00095108), ('Ricardo', 0.001197276), ('Richard', 0.014131961), ('Rick', 0.000440016), ('Rickey', 0.00023833), ('Ricky', 0.001856882), ('Riley', 0.000322031), ('Robert', 0.026938092), ('Roberto', 0.000906024), ('Rodney', 0.002180555), ('Roger', 0.002038032), ('Ronald', 0.00576775), ('Ronnie', 0.000905938), ('Ross', 0.00026863), ('Roy', 0.001311346), ('Ruben', 0.000774821), ('Russell', 0.002096221), ('Ryan', 0.01128178), ('Samuel', 0.00498019), ('Scott', 0.010580999), ('Sean', 0.005593456), ('Sergio', 0.000568518), ('Seth', 0.001537416), ('Shane', 0.002530218), ('Shannon', 0.000421583), ('Shaun', 0.000748761), ('Shawn', 0.004474546), ('Spencer', 0.000912094), ('Stanley', 0.000739032), ('Stephen', 0.007675365), ('Steve', 0.001407564), ('Steven', 0.013292898), ('Stuart', 0.000238826), ('Tanner', 0.000639292), ('Taylor', 0.00133036), ('Terrance', 0.000203311), ('Terrence', 0.000203704), ('Terry', 0.002873624), ('Theodore', 0.000596561), ('Thomas', 0.0143364), ('Tim', 0.000711126), ('Timothy', 0.012632608), ('Todd', 0.00414612), ('Tom', 0.000499283), ('Tommy', 0.000778737), ('Tony', 0.002511563), ('Tracy', 0.000728259), ('Travis', 0.004022458), ('Trevor', 0.001692523), ('Tristan', 0.000408759), ('Troy', 0.002695415), ('Tyler', 0.005962323), ('Tyrone', 0.000587207), ('Vernon', 0.000246401), ('Victor', 0.002340621), ('Vincent', 0.002494515), ('Walter', 0.001525891), ('Warren', 0.000317414), ('Wayne', 0.00160966), ('Wesley', 0.001733835), ('William', 0.020025989), ('Willie', 0.001379247), ('Wyatt', 0.000306591), ('Xavier', 0.000415222), ('Zachary', 0.005918634))).copy()
A:faker.providers.person.en_US.__init__.last_names->OrderedDict((('Smith', 0.021712045), ('Johnson', 0.01696938), ('Williams', 0.014016962), ('Brown', 0.012610763), ('Jones', 0.012451866), ('Miller', 0.010305045), ('Davis', 0.009798219), ('Garcia', 0.007842422), ('Rodriguez', 0.007348561), ('Wilson', 0.007154951), ('Martinez', 0.007082045), ('Anderson', 0.006966203), ('Taylor', 0.006582218), ('Thomas', 0.006493824), ('Hernandez', 0.006454314), ('Moore', 0.006383948), ('Martin', 0.006146745), ('Jackson', 0.006086567), ('Thompson', 0.005887767), ('White', 0.005843424), ('Lopez', 0.005679145), ('Lee', 0.005535909), ('Gonzalez', 0.005461513), ('Harris', 0.005423356), ('Clark', 0.005010598), ('Lewis', 0.00465937), ('Robinson', 0.004596305), ('Walker', 0.004580579), ('Perez', 0.00446375), ('Hall', 0.004327121), ('Young', 0.004257495), ('Allen', 0.00423392), ('Sanchez', 0.004031749), ('Wright', 0.004023754), ('King', 0.004011135), ('Scott', 0.003838487), ('Green', 0.003778053), ('Baker', 0.003776901), ('Adams', 0.00377448), ('Nelson', 0.003766713), ('Hill', 0.003762455), ('Ramirez', 0.003554281), ('Campbell', 0.003398636), ('Mitchell', 0.003357336), ('Roberts', 0.003346207), ('Carter', 0.0033127), ('Phillips', 0.003214932), ('Evans', 0.003127113), ('Turner', 0.003067045), ('Torres', 0.002971158), ('Parker', 0.002962725), ('Collins', 0.002904264), ('Edwards', 0.002897155), ('Stewart', 0.002859044), ('Flores', 0.002856449), ('Morris', 0.002848582), ('Nguyen', 0.002833697), ('Murphy', 0.00274576), ('Rivera', 0.002736275), ('Cook', 0.002693623), ('Rogers', 0.002690041), ('Morgan', 0.002525543), ('Peterson', 0.002513125), ('Cooper', 0.00246795), ('Reed', 0.0024437), ('Bailey', 0.002429747), ('Bell', 0.002419112), ('Gomez', 0.002408494), ('Kelly', 0.002379209), ('Howard', 0.002327986), ('Ward', 0.002321973), ('Cox', 0.002318775), ('Diaz', 0.00230051), ('Richardson', 0.002280051), ('Wood', 0.002259639), ('Watson', 0.002215168), ('Brooks', 0.002199808), ('Bennett', 0.002184311), ('Gray', 0.002162912), ('James', 0.002131032), ('Reyes', 0.002124517), ('Cruz', 0.002111304), ('Hughes', 0.002095999), ('Price', 0.002090206), ('Myers', 0.002054278), ('Long', 0.002042126), ('Foster', 0.002019703), ('Sanders', 0.002018442), ('Ross', 0.002009844), ('Morales', 0.001988655), ('Powell', 0.001978704), ('Sullivan', 0.001970362), ('Russell', 0.001968461), ('Ortiz', 0.001961617), ('Jenkins', 0.001952974), ('Gutierrez', 0.001945371), ('Perry', 0.001942986), ('Butler', 0.001926859), ('Barnes', 0.00192272), ('Fisher', 0.001921377), ('Henderson', 0.001919686), ('Coleman', 0.001906255), ('Simmons', 0.001842531), ('Patterson', 0.00181427), ('Jordan', 0.00180198), ('Reynolds', 0.001787233), ('Hamilton', 0.001775656), ('Graham', 0.001773307), ('Kim', 0.001773243), ('Gonzales', 0.001772028), ('Alexander', 0.001767542), ('Ramos', 0.001764371), ('Wallace', 0.001743026), ('Griffin', 0.001741893), ('West', 0.001722047), ('Cole', 0.001715916), ('Hayes', 0.001712992), ('Chavez', 0.001698299), ('Gibson', 0.001685096), ('Bryant', 0.001679075), ('Ellis', 0.001662381), ('Stevens', 0.001657657), ('Murray', 0.001630218), ('Ford', 0.001630062), ('Marshall', 0.001619244), ('Owens', 0.001611212), ('Mcdonald', 0.001609019), ('Harrison', 0.001604295), ('Ruiz', 0.001602943), ('Kennedy', 0.001568285), ('Wells', 0.001559139), ('Alvarez', 0.001542527), ('Woods', 0.0015425), ('Mendoza', 0.001540243), ('Castillo', 0.001511972), ('Olson', 0.001493963), ('Webb', 0.001493771), ('Washington', 0.001489705), ('Tucker', 0.001488763), ('Freeman', 0.001486507), ('Burns', 0.001481636), ('Henry', 0.001474683), ('Vasquez', 0.001461863), ('Snyder', 0.001456143), ('Simpson', 0.001445891), ('Crawford', 0.001444795), ('Jimenez', 0.001438892), ('Porter', 0.001433163), ('Mason', 0.0014207), ('Shaw', 0.001417849), ('Gordon', 0.001415674), ('Wagner', 0.001411855), ('Hunter', 0.001410886), ('Romero', 0.001405057), ('Hicks', 0.00140365), ('Dixon', 0.001389003), ('Hunt', 0.001388738), ('Palmer', 0.00137431), ('Robertson', 0.001373323), ('Black', 0.001372291), ('Holmes', 0.001372108), ('Stone', 0.001368782), ('Meyer', 0.001367521), ('Boyd', 0.001365803), ('Mills', 0.001351485), ('Warren', 0.001351458), ('Fox', 0.001346441), ('Rose', 0.001342485), ('Rice', 0.001338062), ('Moreno', 0.001334846), ('Schmidt', 0.001330067), ('Patel', 0.001325508), ('Ferguson', 0.001299832), ('Nichols', 0.001296908), ('Herrera', 0.0012864), ('Medina', 0.001273307), ('Ryan', 0.001273142), ('Fernandez', 0.001272841), ('Weaver', 0.001268354), ('Daniels', 0.001268034), ('Stephens', 0.001267724), ('Gardner', 0.001266974), ('Payne', 0.0012612), ('Kelley', 0.001256878), ('Dunn', 0.001251395), ('Pierce', 0.001247393), ('Arnold', 0.001245547), ('Tran', 0.001243537), ('Spencer', 0.001228443), ('Peters', 0.001226505), ('Hawkins', 0.001224998), ('Grant', 0.001224705), ('Hansen', 0.001219589), ('Castro', 0.001217578), ('Hoffman', 0.001212014), ('Hart', 0.001210378), ('Elliott', 0.001210296), ('Cunningham', 0.00120517), ('Knight', 0.001204841), ('Bradley', 0.001199624), ('Carroll', 0.001197166), ('Hudson', 0.001195091), ('Duncan', 0.001191674), ('Armstrong', 0.001187681), ('Berry', 0.001182409), ('Andrews', 0.001181632), ('Johnston', 0.001178114), ('Ray', 0.001176826), ('Lane', 0.001176214), ('Riley', 0.001169206), ('Carpenter', 0.001161101), ('Perkins', 0.001159986), ('Aguilar', 0.001154942), ('Silva', 0.001152795), ('Richards', 0.001148126), ('Willis', 0.001147888), ('Matthews', 0.001140688), ('Chapman', 0.001138632), ('Lawrence', 0.001135955), ('Garza', 0.00113421), ('Vargas', 0.001132583), ('Watkins', 0.001118832), ('Wheeler', 0.00111186), ('Larson', 0.001106195), ('Carlson', 0.001097606), ('Harper', 0.001095267), ('George', 0.001094444), ('Greene', 0.001092855), ('Burke', 0.001088935), ('Guzman', 0.001081762), ('Morrison', 0.001077641), ('Munoz', 0.001076133), ('Jacobs', 0.001055721), ('Obrien', 0.001054304), ('Lawson', 0.001052486), ('Franklin', 0.001049498), ('Lynch', 0.001045743), ('Bishop', 0.00104196), ('Carr', 0.001040662), ('Salazar', 0.001036788), ('Austin', 0.001033974), ('Mendez', 0.0010301), ('Gilbert', 0.001027084), ('Jensen', 0.001026408), ('Williamson', 0.001025348), ('Montgomery', 0.00102469), ('Harvey', 0.001024617), ('Oliver', 0.001020094), ('Howell', 0.001001756), ('Dean', 0.000998064), ('Hanson', 0.000996685), ('Weber', 0.000985601), ('Garrett', 0.000984788), ('Sims', 0.000979918), ('Burton', 0.000979132), ('Fuller', 0.000974783), ('Soto', 0.000974317), ('Mccoy', 0.000972946), ('Welch', 0.00096676), ('Chen', 0.000964384), ('Schultz', 0.000959067), ('Walters', 0.000952844), ('Reid', 0.00095034), ('Fields', 0.00094335), ('Walsh', 0.000943113), ('Little', 0.000938563), ('Fowler', 0.000937667), ('Bowman', 0.000934186), ('Davidson', 0.000932404), ('May', 0.000929498), ('Day', 0.000929041), ('Schneider', 0.00091878), ('Newman', 0.000918214), ('Brewer', 0.000917976), ('Lucas', 0.000917538), ('Holland', 0.000912677), ('Wong', 0.000908172), ('Banks', 0.000907276), ('Santos', 0.000904526), ('Curtis', 0.000904206), ('Pearson', 0.000902105), ('Delgado', 0.000901621), ('Valdez', 0.000901027), ('Pena', 0.000898605), ('Rios', 0.000882377), ('Douglas', 0.000881062), ('Sandoval', 0.000879947), ('Barrett', 0.000876228), ('Hopkins', 0.000864414), ('Keller', 0.000861645), ('Guerrero', 0.000860293), ('Stanley', 0.000857232), ('Bates', 0.000856555), ('Alvarado', 0.000856373), ('Beck', 0.000851238), ('Ortega', 0.000850963), ('Wade', 0.00084825), ('Estrada', 0.000848222), ('Contreras', 0.00084666), ('Barnett', 0.000843252), ('Caldwell', 0.00083458), ('Santiago', 0.00083119), ('Lambert', 0.000828001), ('Powers', 0.000826019), ('Chambers', 0.000825324), ('Nunez', 0.000824255), ('Craig', 0.000818618), ('Leonard', 0.000815027), ('Lowe', 0.000814844), ('Rhodes', 0.000812459), ('Byrd', 0.00081149), ('Gregory', 0.000811481), ('Shelton', 0.000807059), ('Frazier', 0.00080705), ('Becker', 0.000805122), ('Maldonado', 0.000804226), ('Fleming', 0.000803614), ('Vega', 0.000801595), ('Sutton', 0.000798351), ('Cohen', 0.000797008), ('Jennings', 0.00079529), ('Parks', 0.000788967), ('Mcdaniel', 0.000788702), ('Watts', 0.000787889), ('Barker', 0.000778688), ('Norris', 0.000778605), ('Vaughn', 0.000777006), ('Vazquez', 0.000775992), ('Holt', 0.000774018), ('Schwartz', 0.000773918), ('Steele', 0.000770756), ('Benson', 0.00076966), ('Neal', 0.000766151), ('Dominguez', 0.000765073), ('Horton', 0.000763173), ('Terry', 0.000762387), ('Wolfe', 0.000759417), ('Hale', 0.000757983), ('Lyons', 0.000751614), ('Graves', 0.000750892), ('Haynes', 0.000749595), ('Miles', 0.000748644), ('Park', 0.000748251), ('Warner', 0.000747648), ('Padilla', 0.000747475), ('Bush', 0.000744907), ('Thornton', 0.000741864), ('Mccarthy', 0.000740439), ('Mann', 0.00074032), ('Zimmerman', 0.000739608), ('Erickson', 0.000739534), ('Fletcher', 0.000739498), ('Mckinney', 0.00073661), ('Page', 0.000735487), ('Dawson', 0.000732718), ('Joseph', 0.000731256), ('Marquez', 0.000730534), ('Reeves', 0.00072931), ('Klein', 0.000728104), ('Espinoza', 0.000724787), ('Baldwin', 0.000723224), ('Moran', 0.000717696), ('Love', 0.000715659), ('Robbins', 0.000713996), ('Higgins', 0.000713685), ('Ball', 0.000708696), ('Cortez', 0.000708066), ('Le', 0.000707709), ('Griffith', 0.00070749), ('Bowen', 0.000704283), ('Sharp', 0.000702364), ('Cummings', 0.000700893), ('Ramsey', 0.000700144), ('Hardy', 0.000699988), ('Swanson', 0.000699358), ('Barber', 0.000699038), ('Acosta', 0.000698791), ('Luna', 0.000695593), ('Chandler', 0.000695474), ('Daniel', 0.000686529), ('Blair', 0.000686529), ('Cross', 0.00068652), ('Simon', 0.000683824), ('Dennis', 0.000683322), ('Oconnor', 0.000683066), ('Quinn', 0.00068101), ('Gross', 0.000678762), ('Navarro', 0.000675884), ('Moss', 0.000673874), ('Fitzgerald', 0.000671791), ('Doyle', 0.000671754), ('Mclaughlin', 0.000668191), ('Rojas', 0.00066767), ('Rodgers', 0.000667213), ('Stevenson', 0.000666034), ('Singh', 0.00066375), ('Yang', 0.000663613), ('Figueroa', 0.000662754), ('Harmon', 0.000661667), ('Newton', 0.000660881), ('Paul', 0.00066015), ('Manning', 0.000658514), ('Garner', 0.000658359), ('Mcgee', 0.000657198), ('Reese', 0.000655636), ('Francis', 0.000655353), ('Burgess', 0.000654265), ('Adkins', 0.000653571), ('Goodman', 0.000653151), ('Curry', 0.00065189), ('Brady', 0.000650345), ('Christensen', 0.000650062), ('Potter', 0.000649688), ('Walton', 0.000648719), ('Goodwin', 0.000642652), ('Mullins', 0.000642222), ('Molina', 0.000641537), ('Webster', 0.000640733), ('Fischer', 0.000640477), ('Campos', 0.000639152), ('Avila', 0.000638175), ('Sherman', 0.000638147), ('Todd', 0.000637873), ('Chang', 0.00063738), ('Blake', 0.000633021), ('Malone', 0.00063282), ('Wolf', 0.000629604), ('Hodges', 0.000629266), ('Juarez', 0.000628507), ('Gill', 0.000627722), ('Farmer', 0.000624158), ('Hines', 0.00062266), ('Gallagher', 0.00062202), ('Duran', 0.000621755), ('Hubbard', 0.000621527), ('Cannon', 0.000620631), ('Miranda', 0.0006181), ('Wang', 0.000617406), ('Saunders', 0.000614116), ('Tate', 0.000614098), ('Mack', 0.000613604), ('Hammond', 0.000612773), ('Carrillo', 0.000612691), ('Townsend', 0.000610854), ('Wise', 0.000609803), ('Ingram', 0.000609136), ('Barton', 0.000608743), ('Mejia', 0.000607939), ('Ayala', 0.000607766), ('Schroeder', 0.000606825), ('Hampton', 0.000606514), ('Rowe', 0.000604933), ('Parsons', 0.000604915), ('Frank', 0.000602311), ('Waters', 0.000601388), ('Strickland', 0.000601361), ('Osborne', 0.000601251), ('Maxwell', 0.000601041), ('Chan', 0.000600493), ('Deleon', 0.000599387), ('Norman', 0.000596381), ('Harrington', 0.00059512), ('Casey', 0.000592232), ('Patton', 0.00059184), ('Logan', 0.000590049), ('Bowers', 0.000589318), ('Mueller', 0.000587572), ('Glover', 0.00058643), ('Floyd', 0.000586074), ('Hartman', 0.000583205), ('Buchanan', 0.000583187), ('Cobb', 0.000582401), ('French', 0.00057701), ('Kramer', 0.000575858), ('Mccormick', 0.000572569), ('Clarke', 0.0005715), ('Tyler', 0.00057139), ('Gibbs', 0.000571208), ('Moody', 0.000569654), ('Conner', 0.000569572), ('Sparks', 0.000568649), ('Mcguire', 0.000567571), ('Leon', 0.000566822), ('Bauer', 0.000566319), ('Norton', 0.000564729), ('Pope', 0.000564227), ('Flynn', 0.000564199), ('Hogan', 0.000563322), ('Robles', 0.00056303), ('Salinas', 0.000562692), ('Yates', 0.000561029), ('Lindsey', 0.000559192), ('Lloyd', 0.000558781), ('Marsh', 0.000557365), ('Mcbride', 0.000556222), ('Owen', 0.000552449), ('Solis', 0.000548648), ('Pham', 0.00054777), ('Lang', 0.000546802), ('Pratt', 0.000546418), ('Lara', 0.000545779), ('Brock', 0.000545331), ('Ballard', 0.00054513), ('Trujillo', 0.000544664), ('Shaffer', 0.000541173), ('Drake', 0.000539602), ('Roman', 0.000539282), ('Aguirre', 0.00053835), ('Morton', 0.000537162), ('Stokes', 0.000536239), ('Lamb', 0.000535033), ('Pacheco', 0.000534841), ('Patrick', 0.00053231), ('Cochran', 0.000532091), ('Shepherd', 0.000529368), ('Cain', 0.000528801), ('Burnett', 0.000528674), ('Hess', 0.000528335), ('Li', 0.000528007), ('Cervantes', 0.000527084), ('Olsen', 0.000524087), ('Briggs', 0.000523538), ('Ochoa', 0.000522743), ('Cabrera', 0.000522387), ('Velasquez', 0.000522314), ('Montoya', 0.00052151), ('Roth', 0.000521099), ('Meyers', 0.000518485), ('Cardenas', 0.000517334), ('Fuentes', 0.000515717), ('Weiss', 0.000513085), ('Wilkins', 0.000512309), ('Hoover', 0.000512309), ('Nicholson', 0.000511559), ('Underwood', 0.000511441), ('Short', 0.000510801), ('Carson', 0.000510052), ('Morrow', 0.000508617), ('Colon', 0.000507228), ('Holloway', 0.000506808), ('Summers', 0.000506123), ('Bryan', 0.000505008), ('Petersen', 0.00050424), ('Mckenzie', 0.000503318), ('Serrano', 0.000503071), ('Wilcox', 0.000502431), ('Carey', 0.000501856), ('Clayton', 0.000501408), ('Poole', 0.000499864), ('Calderon', 0.000499727), ('Gallegos', 0.000499553), ('Greer', 0.000498996), ('Rivas', 0.000498786), ('Guerra', 0.000498667), ('Decker', 0.000497525), ('Collier', 0.000497196), ('Wall', 0.000497077), ('Whitaker', 0.000496547), ('Bass', 0.000496117), ('Flowers', 0.000495944), ('Davenport', 0.000495295), ('Conley', 0.000495185), ('Houston', 0.00049365), ('Huff', 0.000492426), ('Copeland', 0.00049132), ('Hood', 0.00049101), ('Monroe', 0.000488616), ('Massey', 0.00048847), ('Roberson', 0.000486085), ('Combs', 0.00048592), ('Franco', 0.000485747), ('Larsen', 0.000483937), ('Pittman', 0.000481434), ('Randall', 0.000479661), ('Skinner', 0.000479616), ('Wilkinson', 0.000479552), ('Kirby', 0.00047946), ('Cameron', 0.00047915), ('Bridges', 0.000477514), ('Anthony', 0.000476472), ('Richard', 0.000476399), ('Kirk', 0.00047565), ('Bruce', 0.000475175), ('Singleton', 0.000473283), ('Mathis', 0.000473274), ('Bradford', 0.000472635), ('Boone', 0.000472205), ('Abbott', 0.000471666), ('Charles', 0.000470734), ('Allison', 0.000470606), ('Sweeney', 0.00047057), ('Atkinson', 0.000470469), ('Horn', 0.000469473), ('Jefferson', 0.0004693), ('Rosales', 0.000469071), ('York', 0.000469053), ('Christian', 0.000467618), ('Phelps', 0.000467408), ('Farrell', 0.000466869), ('Castaneda', 0.000466814), ('Nash', 0.000466193), ('Dickerson', 0.000466156), ('Bond', 0.000465818), ('Wyatt', 0.00046485), ('Foley', 0.000464649), ('Chase', 0.000463963), ('Gates', 0.000463698), ('Vincent', 0.000462602), ('Mathews', 0.000462419), ('Hodge', 0.000462136), ('Garrison', 0.000461268), ('Trevino', 0.000461012), ('Villarreal', 0.000460071), ('Heath', 0.000459669), ('Dalton', 0.00045838), ('Valencia', 0.000457101), ('Callahan', 0.000456178), ('Hensley', 0.000455566), ('Atkins', 0.000454616), ('Huffman', 0.000454461), ('Roy', 0.000454351), ('Boyer', 0.000453218), ('Shields', 0.000452807), ('Lin', 0.000451016), ('Hancock', 0.000450742), ('Grimes', 0.000449965), ('Glenn', 0.000449929), ('Cline', 0.000449252), ('Delacruz', 0.00044917), ('Camacho', 0.000447726), ('Dillon', 0.0004462), ('Parrish', 0.000446109), ('Oneill', 0.000444583), ('Melton', 0.000444017), ('Booth', 0.000443889), ('Kane', 0.000443404), ('Berg', 0.000442975), ('Harrell', 0.000442893), ('Pitts', 0.000442811), ('Savage', 0.000441943), ('Wiggins', 0.000441833), ('Brennan', 0.000441294), ('Salas', 0.000441166), ('Marks', 0.000441157), ('Russo', 0.00043974), ('Sawyer', 0.000438397), ('Baxter', 0.000437283), ('Golden', 0.000437118), ('Hutchinson', 0.000436844), ('Liu', 0.000435528), ('Walter', 0.000435071), ('Mcdowell', 0.000434258), ('Wiley', 0.000434048), ('Rich', 0.00043381), ('Humphrey', 0.000433746), ('Johns', 0.000432093), ('Koch', 0.000432065), ('Suarez', 0.000431599), ('Hobbs', 0.000431462), ('Beard', 0.000430621), ('Gilmore', 0.000429909), ('Ibarra', 0.000428492), ('Keith', 0.00042714), ('Macias', 0.000427067), ('Khan', 0.000426829), ('Andrade', 0.000426729), ('Ware', 0.000426546), ('Stephenson', 0.000426363), ('Henson', 0.000425879), ('Wilkerson', 0.000425843), ('Dyer', 0.000425559), ('Mcclure', 0.000424929), ('Blackwell', 0.000424838), ('Mercado', 0.000424308), ('Tanner', 0.000424079), ('Eaton', 0.000423997), ('Clay', 0.000422727), ('Barron', 0.000422106), ('Beasley', 0.00042195), ('Oneal', 0.000421786), ('Small', 0.000418944), ('Preston', 0.000418944), ('Wu', 0.000418624), ('Zamora', 0.000418542), ('Macdonald', 0.000418323), ('Vance', 0.000418149), ('Snow', 0.000417473), ('Mcclain', 0.000416294), ('Stafford', 0.000414366), ('Orozco', 0.000413818), ('Barry', 0.000411579), ('English', 0.00041147), ('Shannon', 0.000410282), ('Kline', 0.000410264), ('Jacobson', 0.000410026), ('Woodard', 0.000409624), ('Huang', 0.000408573), ('Kemp', 0.000408445), ('Mosley', 0.000408418), ('Prince', 0.000407888), ('Merritt', 0.00040776), ('Hurst', 0.000407404), ('Villanueva', 0.000407248), ('Roach', 0.000406188), ('Nolan', 0.000405887), ('Lam', 0.000405558), ('Yoder', 0.000404279), ('Mccullough', 0.000403164), ('Lester', 0.0004013), ('Santana', 0.000400898), ('Valenzuela', 0.000399938), ('Winters', 0.000399865), ('Barrera', 0.000399482), ('Orr', 0.000398988), ('Leach', 0.000398988), ('Berger', 0.000397983), ('Mckee', 0.000397974), ('Strong', 0.000396832), ('Conway', 0.000396512), ('Stein', 0.000395927), ('Whitehead', 0.000395735), ('Bullock', 0.000393095), ('Escobar', 0.000392492), ('Knox', 0.000392327), ('Meadows', 0.000391843), ('Solomon', 0.000391432), ('Velez', 0.000391258), ('Odonnell', 0.000391094), ('Kerr', 0.000390692), ('Stout', 0.000389878), ('Blankenship', 0.000389824), ('Browning', 0.000389632), ('Kent', 0.00038922), ('Lozano', 0.000388946), ('Bartlett', 0.000388444), ('Pruitt', 0.000387996), ('Buck', 0.000387795), ('Barr', 0.000387713), ('Gaines', 0.000387137), ('Durham', 0.000387101), ('Gentry', 0.000387028), ('Mcintyre', 0.000386826), ('Sloan', 0.000386333), ('Rocha', 0.000385036), ('Melendez', 0.000385036), ('Herman', 0.000384597), ('Sexton', 0.000384496), ('Moon', 0.000384332), ('Hendricks', 0.00038266), ('Rangel', 0.000382559), ('Stark', 0.000382514), ('Lowery', 0.00038075), ('Hardin', 0.000380695), ('Hull', 0.000380622), ('Sellers', 0.000379754), ('Ellison', 0.000378822), ('Calhoun', 0.000378758), ('Gillespie', 0.000378219), ('Mora', 0.000377808), ('Knapp', 0.000377068), ('Mccall', 0.000376739), ('Morse', 0.000375652), ('Dorsey', 0.000375579), ('Weeks', 0.000375113), ('Nielsen', 0.000374692), ('Livingston', 0.000374299), ('Leblanc', 0.000373925), ('Mclean', 0.00037345), ('Bradshaw', 0.000372746), ('Glass', 0.000372106), ('Middleton', 0.00037196), ('Buckley', 0.000371942), ('Schaefer', 0.000371549), ('Frost', 0.000370809), ('Howe', 0.000370562), ('House', 0.000369849), ('Mcintosh', 0.00036963), ('Ho', 0.000369265), ('Pennington', 0.000368588), ('Reilly', 0.000368324), ('Hebert', 0.000368077), ('Mcfarland', 0.00036772), ('Hickman', 0.000367538), ('Noble', 0.000367474), ('Spears', 0.000367346), ('Conrad', 0.000366423), ('Arias', 0.000366277), ('Galvan', 0.000365911), ('Velazquez', 0.000365765), ('Huynh', 0.000365591), ('Frederick', 0.000364659), ('Randolph', 0.000363134), ('Cantu', 0.000361845), ('Fitzpatrick', 0.000360931), ('Mahoney', 0.000360374), ('Peck', 0.000360301), ('Villa', 0.000360027), ('Michael', 0.000359725), ('Donovan', 0.000358821), ('Mcconnell', 0.000358209), ('Walls', 0.00035787), ('Boyle', 0.000357642), ('Mayer', 0.000357368), ('Zuniga', 0.000356875), ('Giles', 0.000356372), ('Pineda', 0.000356345), ('Pace', 0.000356125), ('Hurley', 0.000356089), ('Mays', 0.000355568), ('Mcmillan', 0.000355403), ('Crosby', 0.000354928), ('Ayers', 0.000354855), ('Case', 0.000354152), ('Bentley', 0.00035374), ('Shepard', 0.000353658), ('Everett', 0.000353631), ('Pugh', 0.00035353), ('David', 0.000353238), ('Mcmahon', 0.000352306), ('Dunlap', 0.000351931), ('Bender', 0.000351456), ('Hahn', 0.000350451), ('Harding', 0.000350323), ('Acevedo', 0.000349336), ('Raymond', 0.00034866), ('Blackburn', 0.000348468), ('Duffy', 0.000346869), ('Landry', 0.00034686), ('Dougherty', 0.00034633), ('Bautista', 0.000345818), ('Shah', 0.00034569), ('Potts', 0.000344356), ('Arroyo', 0.000344274), ('Valentine', 0.000344192), ('Meza', 0.000344128), ('Gould', 0.00034411), ('Vaughan', 0.000343479), ('Fry', 0.000343032), ('Rush', 0.000342374), ('Avery', 0.0003421), ('Herring', 0.000341305), ('Dodson', 0.000340802), ('Clements', 0.000340245), ('Sampson', 0.000340217), ('Tapia', 0.000339916), ('Bean', 0.000339404), ('Lynn', 0.000339221), ('Crane', 0.000339203), ('Farley', 0.000339139), ('Cisneros', 0.000338536), ('Benton', 0.000338372), ('Ashley', 0.000338271), ('Mckay', 0.000337604), ('Finley', 0.000336928), ('Best', 0.000336818), ('Blevins', 0.000336626), ('Friedman', 0.000336553), ('Moses', 0.00033638), ('Sosa', 0.00033637), ('Blanchard', 0.000335923), ('Huber', 0.000335603), ('Frye', 0.000335484), ('Krueger', 0.000335283), ('Bernard', 0.000333931), ('Rosario', 0.000333867), ('Rubio', 0.000333794), ('Mullen', 0.000332981), ('Benjamin', 0.000332953), ('Haley', 0.000332898), ('Chung', 0.000332798), ('Moyer', 0.000332789), ('Choi', 0.000332505), ('Horne', 0.000331573), ('Yu', 0.000331546), ('Woodward', 0.000331153), ('Ali', 0.000329664), ('Nixon', 0.00032928), ('Hayden', 0.000329161), ('Rivers', 0.000328759), ('Estes', 0.000327471), ('Mccarty', 0.000326365), ('Richmond', 0.000326338), ('Stuart', 0.00032621), ('Maynard', 0.000325726), ('Brandt', 0.000325433), ('Oconnell', 0.000325378), ('Hanna', 0.000325278), ('Sanford', 0.000324967), ('Sheppard', 0.000324867), ('Church', 0.00032473), ('Burch', 0.000324565), ('Levy', 0.000324044), ('Rasmussen', 0.000323944), ('Coffey', 0.000323843), ('Ponce', 0.000323459), ('Faulkner', 0.000323359), ('Donaldson', 0.000323341), ('Schmitt', 0.000322783), ('Novak', 0.000322381), ('Costa', 0.000321879), ('Montes', 0.000321595), ('Booker', 0.000320727), ('Cordova', 0.000320481), ('Waller', 0.000319814), ('Arellano', 0.000319795), ('Maddox', 0.00031953), ('Mata', 0.000318781), ('Bonilla', 0.000318196), ('Stanton', 0.000318087), ('Compton', 0.000317867), ('Kaufman', 0.000317849), ('Dudley', 0.000317703), ('Mcpherson', 0.000317639), ('Beltran', 0.000317392), ('Dickson', 0.000317045), ('Mccann', 0.00031699), ('Villegas', 0.000316917), ('Proctor', 0.000316899), ('Hester', 0.000316835), ('Cantrell', 0.000316826), ('Daugherty', 0.000316607), ('Cherry', 0.000316287), ('Bray', 0.000315921), ('Davila', 0.000315611), ('Rowland', 0.000315218), ('Madden', 0.00031498), ('Levine', 0.00031498), ('Spence', 0.000314642), ('Good', 0.000314596), ('Irwin', 0.000314085), ('Werner', 0.000313884), ('Krause', 0.00031382), ('Petty', 0.000313207), ('Whitney', 0.000312961), ('Baird', 0.000312796), ('Hooper', 0.000311435), ('Pollard', 0.000311389), ('Zavala', 0.000311289), ('Jarvis', 0.000311124), ('Holden', 0.000311042), ('Hendrix', 0.00031096), ('Haas', 0.00031096), ('Mcgrath', 0.000310951), ('Bird', 0.00031032), ('Lucero', 0.000309955), ('Terrell', 0.000309882), ('Riggs', 0.000309461), ('Joyce', 0.000309233), ('Rollins', 0.000308812), ('Mercer', 0.000308812), ('Galloway', 0.000308593), ('Duke', 0.000308337), ('Odom', 0.000308081), ('Andersen', 0.000306172), ('Downs', 0.000306044), ('Hatfield', 0.00030577), ('Benitez', 0.00030556), ('Archer', 0.000305285), ('Huerta', 0.00030471), ('Travis', 0.000304628), ('Mcneil', 0.000303714), ('Hinton', 0.00030344), ('Zhang', 0.000303376), ('Hays', 0.000303303), ('Mayo', 0.000302681), ('Fritz', 0.000302151), ('Branch', 0.000301896), ('Mooney', 0.000301101), ('Ewing', 0.000300845), ('Ritter', 0.000300287), ('Esparza', 0.000299447), ('Frey', 0.000299109), ('Braun', 0.00029857), ('Gay', 0.000298533), ('Riddle', 0.000298369), ('Haney', 0.000298277), ('Kaiser', 0.000297574), ('Holder', 0.000296651), ('Chaney', 0.000296349), ('Mcknight', 0.00029592), ('Gamble', 0.000295838), ('Vang', 0.000295435), ('Cooley', 0.000295015), ('Carney', 0.000294969), ('Cowan', 0.000294604), ('Forbes', 0.000294476), ('Ferrell', 0.000293983), ('Davies', 0.0002939), ('Barajas', 0.000293736), ('Shea', 0.000293023), ('Osborn', 0.000292795), ('Bright', 0.000292777), ('Cuevas', 0.00029253), ('Bolton', 0.000292347), ('Murillo', 0.000292064), ('Lutz', 0.000291845), ('Duarte', 0.000291442), ('Kidd', 0.000291351), ('Key', 0.000291315), ('Cooke', 0.000291114)))
A:faker.providers.person.en_US.__init__.prefixes_female->OrderedDict((('Mrs.', 0.5), ('Ms.', 0.1), ('Miss', 0.1), ('Dr.', 0.3)))
A:faker.providers.person.en_US.__init__.prefixes_male->OrderedDict((('Mr.', 0.7), ('Dr.', 0.3)))
A:faker.providers.person.en_US.__init__.suffixes_female->OrderedDict((('MD', 0.5), ('DDS', 0.3), ('PhD', 0.1), ('DVM', 0.2)))
A:faker.providers.person.en_US.__init__.suffixes_male->OrderedDict((('Jr.', 0.2), ('II', 0.05), ('III', 0.03), ('IV', 0.015), ('V', 0.005), ('MD', 0.3), ('DDS', 0.2), ('PhD', 0.1), ('DVM', 0.1)))
faker.providers.person.en_US.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/dk_DK/__init__.py----------------------------------------
faker.providers.person.dk_DK.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/uk_UA/__init__.py----------------------------------------
faker.providers.person.uk_UA.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/ko_KR/__init__.py----------------------------------------
faker.providers.person.ko_KR.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/es_ES/__init__.py----------------------------------------
faker.providers.person.es_ES.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/en_TH/__init__.py----------------------------------------
faker.providers.person.en_TH.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/sv_SE/__init__.py----------------------------------------
A:faker.providers.person.sv_SE.__init__.first_names_female->OrderedDict((('Agnes', 0.001745), ('Agneta', 0.004777), ('Aina', 0.002274), ('Alexandra', 0.002762), ('Alice', 0.003714), ('Amanda', 0.003099), ('Anette', 0.004177), ('Angelica', 0.001462), ('Anita', 0.008407), ('Ann', 0.004749), ('Ann-Charlotte', 0.001562), ('Ann-Christin', 0.001383), ('Ann-Mari', 0.001194), ('Ann-Marie', 0.001974), ('Anna', 0.042584), ('Anna-Karin', 0.001175), ('Anna-Lena', 0.001167), ('Anne', 0.002491), ('Anne-Marie', 0.001349), ('Anneli', 0.003702), ('Annelie', 0.00147), ('Annette', 0.001469), ('Annie', 0.001357), ('Annika', 0.005399), ('Asta', 0.001437), ('Astrid', 0.006047), ('Barbro', 0.006869), ('Berit', 0.004732), ('Birgit', 0.005225), ('Birgitta', 0.024532), ('Brita', 0.002495), ('Britt', 0.00633), ('Britt-Marie', 0.00243), ('Britta', 0.002882), ('Camilla', 0.004547), ('Carin', 0.001447), ('Carina', 0.006187), ('Carolina', 0.001716), ('Caroline', 0.004014), ('Catarina', 0.001216), ('Catharina', 0.001196), ('Cecilia', 0.008249), ('Charlotta', 0.004212), ('Charlotte', 0.003875), ('Christina', 0.013235), ('Christine', 0.001515), ('Dagmar', 0.001687), ('Dagny', 0.001481), ('Doris', 0.001518), ('Ebba', 0.00223), ('Edit', 0.00162), ('Eivor', 0.002205), ('Eleonora', 0.001731), ('Elin', 0.006729), ('Elisabet', 0.02457), ('Elisabeth', 0.02537), ('Elise', 0.001198), ('Ella', 0.001269), ('Ellen', 0.002524), ('Ellinor', 0.001304), ('Elsa', 0.006168), ('Elsie', 0.001302), ('Elvira', 0.001736), ('Emelie', 0.003036), ('Emilia', 0.002176), ('Emma', 0.007459), ('Erika', 0.003543), ('Ester', 0.002201), ('Eva', 0.026496), ('Evelina', 0.00193), ('Evy', 0.001609), ('Felicia', 0.001269), ('Frida', 0.003423), ('Gabriella', 0.001245), ('Gerd', 0.003404), ('Gertrud', 0.002159), ('Greta', 0.002604), ('Gudrun', 0.0027), ('Gun', 0.004988), ('Gunborg', 0.003021), ('Gunhild', 0.003072), ('Gunilla', 0.00754), ('Gunnel', 0.003826), ('Gunvor', 0.003507), ('Hanna', 0.005512), ('Harriet', 0.001441), ('Helen', 0.002647), ('Helena', 0.011208), ('Helene', 0.002163), ('Helén', 0.001202), ('Hillevi', 0.001214), ('Ida', 0.004826), ('Inga', 0.005928), ('Inga-Lill', 0.001723), ('Ingeborg', 0.007051), ('Ingegerd', 0.006428), ('Ingegärd', 0.004587), ('Ingela', 0.002701), ('Inger', 0.010945), ('Ingrid', 0.01811), ('Irene', 0.007176), ('Iris', 0.001497), ('Irma', 0.001313), ('Iréne', 0.001696), ('Jeanette', 0.002204), ('Jennie', 0.001404), ('Jenny', 0.006327), ('Jessica', 0.003248), ('Johanna', 0.008736), ('Josefin', 0.00235), ('Josefina', 0.001294), ('Josefine', 0.001891), ('Julia', 0.002653), ('Kajsa', 0.001214), ('Karin', 0.023977), ('Karolina', 0.003098), ('Katarina', 0.00666), ('Kerstin', 0.01332), ('Kristin', 0.001999), ('Kristina', 0.024482), ('Laila', 0.001753), ('Lena', 0.011317), ('Lilian', 0.002505), ('Lillemor', 0.001571), ('Lilly', 0.001785), ('Lina', 0.002062), ('Linda', 0.006682), ('Linn', 0.001229), ('Linnea', 0.007713), ('Linnéa', 0.013337), ('Lisa', 0.004293), ('Lisbeth', 0.00258), ('Louise', 0.006398), ('Lovisa', 0.003016), ('Madeleine', 0.002603), ('Magdalena', 0.002318), ('Maj', 0.003649), ('Maj-Britt', 0.002919), ('Maja', 0.001462), ('Malin', 0.006314), ('Margareta', 0.037908), ('Margaretha', 0.003602), ('Margit', 0.00469), ('Mari', 0.002098), ('Maria', 0.061211), ('Marianne', 0.013455), ('Marie', 0.016343), ('Marie-Louise', 0.001508), ('Marina', 0.001195), ('Marita', 0.00249), ('Martina', 0.001657), ('Mary', 0.001719), ('Matilda', 0.004324), ('Maud', 0.001868), ('Mikaela', 0.001418), ('Mona', 0.003072), ('Monica', 0.005729), ('Monika', 0.002778), ('Märta', 0.004609), ('Nina', 0.00182), ('Olivia', 0.001516), ('Pernilla', 0.002416), ('Petra', 0.001964), ('Pia', 0.003138), ('Ragnhild', 0.001655), ('Rebecca', 0.001585), ('Rebecka', 0.001631), ('Rose-Marie', 0.001345), ('Rut', 0.004635), ('Ruth', 0.002177), ('Sandra', 0.003674), ('Sara', 0.007473), ('Signe', 0.002761), ('Sigrid', 0.00213), ('Siv', 0.00586), ('Sofia', 0.011263), ('Sofie', 0.003466), ('Solveig', 0.002937), ('Sonja', 0.00403), ('Stina', 0.002603), ('Susanna', 0.001707), ('Susanne', 0.006845), ('Svea', 0.002225), ('Sylvia', 0.00163), ('Teresia', 0.001703), ('Therese', 0.00442), ('Therése', 0.001215), ('Ulla', 0.009528), ('Ulla-Britt', 0.001683), ('Ulrika', 0.005582), ('Valborg', 0.001616), ('Vera', 0.001495), ('Veronica', 0.001985), ('Victoria', 0.00249), ('Viktoria', 0.006375), ('Vilhelmina', 0.001311), ('Viola', 0.009669), ('Ylva', 0.001296), ('Yvonne', 0.004993), ('Åsa', 0.005076)))
A:faker.providers.person.sv_SE.__init__.first_names_male->OrderedDict((('Adam', 0.00177), ('Albert', 0.001419), ('Albin', 0.001392), ('Alexander', 0.006474), ('Alf', 0.003571), ('Alfred', 0.001069), ('Allan', 0.003591), ('Alvar', 0.001072), ('Anders', 0.025312), ('Andreas', 0.008399), ('André', 0.001357), ('Anton', 0.00293), ('Arne', 0.010637), ('Arnold', 0.001027), ('Artur', 0.001269), ('Arvid', 0.002169), ('Axel', 0.00691), ('Bengt', 0.014569), ('Benny', 0.001397), ('Bernt', 0.002951), ('Bert', 0.001153), ('Bertil', 0.010902), ('Birger', 0.003109), ('Björn', 0.007803), ('Bo', 0.011988), ('Bror', 0.003281), ('Börje', 0.003853), ('Carl', 0.013483), ('Christer', 0.007964), ('Christian', 0.004359), ('Christoffer', 0.002267), ('Claes', 0.002743), ('Conny', 0.001928), ('Dan', 0.00291), ('Daniel', 0.009526), ('David', 0.005483), ('Dennis', 0.001779), ('Edvard', 0.001253), ('Edvin', 0.001559), ('Egon', 0.001019), ('Einar', 0.002486), ('Elias', 0.001085), ('Emanuel', 0.003777), ('Emil', 0.00477), ('Eric', 0.003387), ('Erik', 0.041018), ('Erland', 0.00145), ('Erling', 0.001173), ('Ernst', 0.002205), ('Evert', 0.003313), ('Filip', 0.001959), ('Folke', 0.002876), ('Fredrik', 0.01177), ('Georg', 0.003446), ('Gerhard', 0.001174), ('Gert', 0.001548), ('Gunnar', 0.017957), ('Gustaf', 0.00742), ('Gustav', 0.009406), ('Göran', 0.012287), ('Gösta', 0.00559), ('Göte', 0.002297), ('Hans', 0.016636), ('Harald', 0.002359), ('Harry', 0.002872), ('Helge', 0.002005), ('Henning', 0.001194), ('Henrik', 0.007644), ('Henry', 0.003134), ('Herbert', 0.001257), ('Hjalmar', 0.001179), ('Holger', 0.001641), ('Hugo', 0.001976), ('Håkan', 0.006974), ('Inge', 0.00288), ('Ingemar', 0.009024), ('Ingmar', 0.001138), ('Ingvar', 0.006758), ('Ivan', 0.001668), ('Ivar', 0.002943), ('Jacob', 0.001023), ('Jakob', 0.001299), ('Jan', 0.0173), ('Jan-Erik', 0.001094), ('Jens', 0.002221), ('Jesper', 0.002177), ('Jimmy', 0.00212), ('Joakim', 0.004606), ('Joel', 0.001778), ('Johan', 0.021986), ('Johannes', 0.003538), ('John', 0.008741), ('Johnny', 0.001499), ('Jonas', 0.007433), ('Jonathan', 0.001616), ('Jonny', 0.00142), ('Josef', 0.001131), ('Juhani', 0.001368), ('Jörgen', 0.003869), ('Karl', 0.030342), ('Kenneth', 0.00354), ('Kent', 0.004156), ('Kim', 0.001298), ('Kjell', 0.007932), ('Klas', 0.001989), ('Knut', 0.002668), ('Krister', 0.002433), ('Kristian', 0.001849), ('Kristoffer', 0.001548), ('Kurt', 0.004453), ('Lars', 0.03162), ('Lars-erik', 0.001056), ('Leif', 0.00918), ('Lennart', 0.019721), ('Linus', 0.001817), ('Ludvig', 0.001014), ('Magnus', 0.009301), ('Marcus', 0.004065), ('Markus', 0.002075), ('Martin', 0.008861), ('Mathias', 0.001551), ('Mats', 0.008403), ('Mattias', 0.005657), ('Max', 0.001234), ('Michael', 0.004456), ('Mikael', 0.015583), ('Morgan', 0.001377), ('Nicklas', 0.001201), ('Niclas', 0.001643), ('Niklas', 0.003704), ('Nils', 0.018831), ('Ola', 0.002691), ('Olle', 0.001666), ('Olof', 0.017132), ('Olov', 0.005457), ('Oscar', 0.002606), ('Oskar', 0.005198), ('Otto', 0.001361), ('Ove', 0.004994), ('Patrik', 0.005091), ('Paul', 0.002455), ('Per', 0.02269), ('Peter', 0.014015), ('Petter', 0.00115), ('Philip', 0.00134), ('Pierre', 0.001014), ('Pontus', 0.001652), ('Pär', 0.002043), ('Ragnar', 0.002983), ('Rasmus', 0.001323), ('Reinhold', 0.001075), ('Richard', 0.002053), ('Rickard', 0.00283), ('Rikard', 0.001272), ('Robert', 0.006959), ('Robin', 0.003012), ('Roger', 0.005033), ('Roland', 0.006879), ('Rolf', 0.007914), ('Ronny', 0.001561), ('Rune', 0.0056), ('Samuel', 0.001473), ('Sebastian', 0.003275), ('Sigurd', 0.001099), ('Sigvard', 0.002438), ('Simon', 0.003338), ('Sixten', 0.001299), ('Staffan', 0.001627), ('Stefan', 0.009034), ('Sten', 0.003911), ('Stig', 0.009343), ('Sture', 0.002518), ('Sune', 0.002173), ('Sven', 0.017897), ('Sören', 0.002376), ('Tage', 0.002198), ('Thomas', 0.00738), ('Tobias', 0.003623), ('Tom', 0.000977), ('Tomas', 0.004168), ('Tommy', 0.005526), ('Tony', 0.001814), ('Torbjörn', 0.002984), ('Tord', 0.001449), ('Tore', 0.00263), ('Torsten', 0.002915), ('Ture', 0.001212), ('Ulf', 0.008541), ('Uno', 0.001812), ('Urban', 0.001584), ('Valdemar', 0.002204), ('Valter', 0.001371), ('Verner', 0.001196), ('Victor', 0.001543), ('Viktor', 0.00308), ('Vilhelm', 0.003785), ('Wilhelm', 0.002195), ('William', 0.002332), ('Yngve', 0.002698), ('Åke', 0.013837)))
A:faker.providers.person.sv_SE.__init__.first_names->OrderedDict((('Adam', 0.00177), ('Albert', 0.001419), ('Albin', 0.001392), ('Alexander', 0.006474), ('Alf', 0.003571), ('Alfred', 0.001069), ('Allan', 0.003591), ('Alvar', 0.001072), ('Anders', 0.025312), ('Andreas', 0.008399), ('André', 0.001357), ('Anton', 0.00293), ('Arne', 0.010637), ('Arnold', 0.001027), ('Artur', 0.001269), ('Arvid', 0.002169), ('Axel', 0.00691), ('Bengt', 0.014569), ('Benny', 0.001397), ('Bernt', 0.002951), ('Bert', 0.001153), ('Bertil', 0.010902), ('Birger', 0.003109), ('Björn', 0.007803), ('Bo', 0.011988), ('Bror', 0.003281), ('Börje', 0.003853), ('Carl', 0.013483), ('Christer', 0.007964), ('Christian', 0.004359), ('Christoffer', 0.002267), ('Claes', 0.002743), ('Conny', 0.001928), ('Dan', 0.00291), ('Daniel', 0.009526), ('David', 0.005483), ('Dennis', 0.001779), ('Edvard', 0.001253), ('Edvin', 0.001559), ('Egon', 0.001019), ('Einar', 0.002486), ('Elias', 0.001085), ('Emanuel', 0.003777), ('Emil', 0.00477), ('Eric', 0.003387), ('Erik', 0.041018), ('Erland', 0.00145), ('Erling', 0.001173), ('Ernst', 0.002205), ('Evert', 0.003313), ('Filip', 0.001959), ('Folke', 0.002876), ('Fredrik', 0.01177), ('Georg', 0.003446), ('Gerhard', 0.001174), ('Gert', 0.001548), ('Gunnar', 0.017957), ('Gustaf', 0.00742), ('Gustav', 0.009406), ('Göran', 0.012287), ('Gösta', 0.00559), ('Göte', 0.002297), ('Hans', 0.016636), ('Harald', 0.002359), ('Harry', 0.002872), ('Helge', 0.002005), ('Henning', 0.001194), ('Henrik', 0.007644), ('Henry', 0.003134), ('Herbert', 0.001257), ('Hjalmar', 0.001179), ('Holger', 0.001641), ('Hugo', 0.001976), ('Håkan', 0.006974), ('Inge', 0.00288), ('Ingemar', 0.009024), ('Ingmar', 0.001138), ('Ingvar', 0.006758), ('Ivan', 0.001668), ('Ivar', 0.002943), ('Jacob', 0.001023), ('Jakob', 0.001299), ('Jan', 0.0173), ('Jan-Erik', 0.001094), ('Jens', 0.002221), ('Jesper', 0.002177), ('Jimmy', 0.00212), ('Joakim', 0.004606), ('Joel', 0.001778), ('Johan', 0.021986), ('Johannes', 0.003538), ('John', 0.008741), ('Johnny', 0.001499), ('Jonas', 0.007433), ('Jonathan', 0.001616), ('Jonny', 0.00142), ('Josef', 0.001131), ('Juhani', 0.001368), ('Jörgen', 0.003869), ('Karl', 0.030342), ('Kenneth', 0.00354), ('Kent', 0.004156), ('Kim', 0.001298), ('Kjell', 0.007932), ('Klas', 0.001989), ('Knut', 0.002668), ('Krister', 0.002433), ('Kristian', 0.001849), ('Kristoffer', 0.001548), ('Kurt', 0.004453), ('Lars', 0.03162), ('Lars-erik', 0.001056), ('Leif', 0.00918), ('Lennart', 0.019721), ('Linus', 0.001817), ('Ludvig', 0.001014), ('Magnus', 0.009301), ('Marcus', 0.004065), ('Markus', 0.002075), ('Martin', 0.008861), ('Mathias', 0.001551), ('Mats', 0.008403), ('Mattias', 0.005657), ('Max', 0.001234), ('Michael', 0.004456), ('Mikael', 0.015583), ('Morgan', 0.001377), ('Nicklas', 0.001201), ('Niclas', 0.001643), ('Niklas', 0.003704), ('Nils', 0.018831), ('Ola', 0.002691), ('Olle', 0.001666), ('Olof', 0.017132), ('Olov', 0.005457), ('Oscar', 0.002606), ('Oskar', 0.005198), ('Otto', 0.001361), ('Ove', 0.004994), ('Patrik', 0.005091), ('Paul', 0.002455), ('Per', 0.02269), ('Peter', 0.014015), ('Petter', 0.00115), ('Philip', 0.00134), ('Pierre', 0.001014), ('Pontus', 0.001652), ('Pär', 0.002043), ('Ragnar', 0.002983), ('Rasmus', 0.001323), ('Reinhold', 0.001075), ('Richard', 0.002053), ('Rickard', 0.00283), ('Rikard', 0.001272), ('Robert', 0.006959), ('Robin', 0.003012), ('Roger', 0.005033), ('Roland', 0.006879), ('Rolf', 0.007914), ('Ronny', 0.001561), ('Rune', 0.0056), ('Samuel', 0.001473), ('Sebastian', 0.003275), ('Sigurd', 0.001099), ('Sigvard', 0.002438), ('Simon', 0.003338), ('Sixten', 0.001299), ('Staffan', 0.001627), ('Stefan', 0.009034), ('Sten', 0.003911), ('Stig', 0.009343), ('Sture', 0.002518), ('Sune', 0.002173), ('Sven', 0.017897), ('Sören', 0.002376), ('Tage', 0.002198), ('Thomas', 0.00738), ('Tobias', 0.003623), ('Tom', 0.000977), ('Tomas', 0.004168), ('Tommy', 0.005526), ('Tony', 0.001814), ('Torbjörn', 0.002984), ('Tord', 0.001449), ('Tore', 0.00263), ('Torsten', 0.002915), ('Ture', 0.001212), ('Ulf', 0.008541), ('Uno', 0.001812), ('Urban', 0.001584), ('Valdemar', 0.002204), ('Valter', 0.001371), ('Verner', 0.001196), ('Victor', 0.001543), ('Viktor', 0.00308), ('Vilhelm', 0.003785), ('Wilhelm', 0.002195), ('William', 0.002332), ('Yngve', 0.002698), ('Åke', 0.013837))).copy()
A:faker.providers.person.sv_SE.__init__.last_names->OrderedDict((('Abrahamsson', 0.00244), ('Adolfsson', 0.002012), ('Alm', 0.001448), ('Andersson', 0.074993), ('Andreasson', 0.00245), ('Aronsson', 0.001722), ('Arvidsson', 0.003474), ('Augustsson', 0.001306), ('Axelsson', 0.006128), ('Bengtsson', 0.009764), ('Berg', 0.005072), ('Berggren', 0.002914), ('Berglund', 0.005115), ('Bergman', 0.00356), ('Bergqvist', 0.002172), ('Bergström', 0.005561), ('Berntsson', 0.00128), ('Björk', 0.003265), ('Björklund', 0.002883), ('Björkman', 0.00176), ('Blom', 0.002326), ('Blomberg', 0.001464), ('Blomqvist', 0.002349), ('Boman', 0.001365), ('Borg', 0.001954), ('Boström', 0.001985), ('Bäckström', 0.001865), ('Börjesson', 0.002036), ('Carlsson', 0.007727), ('Claesson', 0.0016), ('Dahl', 0.002064), ('Dahlberg', 0.002382), ('Dahlgren', 0.001578), ('Dahlström', 0.001538), ('Danielsson', 0.004208), ('Davidsson', 0.002035), ('Edlund', 0.001649), ('Ek', 0.002187), ('Ekberg', 0.001201), ('Eklund', 0.003919), ('Ekman', 0.001847), ('Ekström', 0.00267), ('Eliasson', 0.003127), ('Englund', 0.001958), ('Engström', 0.004079), ('Ericsson', 0.001221), ('Eriksson', 0.039871), ('Erlandsson', 0.001768), ('Falk', 0.002035), ('Forsberg', 0.004265), ('Forslund', 0.001137), ('Fransson', 0.003937), ('Franzén', 0.001491), ('Fredriksson', 0.004959), ('Friberg', 0.001828), ('Gunnarsson', 0.003764), ('Gustafsson', 0.020795), ('Gustavsson', 0.007363), ('Göransson', 0.00233), ('Haglund', 0.001575), ('Hagström', 0.001315), ('Hallberg', 0.002017), ('Hansen', 0.001804), ('Hansson', 0.012512), ('Hedberg', 0.001824), ('Hedlund', 0.002617), ('Hedman', 0.001419), ('Hedström', 0.001406), ('Hellberg', 0.001212), ('Hellström', 0.002385), ('Henriksson', 0.004586), ('Hermansson', 0.002866), ('Hjalmarsson', 0.001191), ('Holm', 0.0037), ('Holmberg', 0.003521), ('Holmgren', 0.002689), ('Holmqvist', 0.001561), ('Holmström', 0.001904), ('Hägglund', 0.001134), ('Håkansson', 0.0043), ('Högberg', 0.001492), ('Höglund', 0.001861), ('Isaksson', 0.003349), ('Ivarsson', 0.002209), ('Jakobsson', 0.005863), ('Jansson', 0.014518), ('Jensen', 0.001898), ('Johannesson', 0.001813), ('Johansson', 0.076124), ('Johnsson', 0.003881), ('Jonasson', 0.002439), ('Jonsson', 0.01655), ('Josefsson', 0.002104), ('Jönsson', 0.009781), ('Karlsson', 0.058698), ('Klasson', 0.001235), ('Knutsson', 0.001627), ('Kristiansson', 0.001226), ('Larsson', 0.036191), ('Lilja', 0.00141), ('Lind', 0.00391), ('Lindahl', 0.001815), ('Lindberg', 0.007056), ('Lindblad', 0.001253), ('Lindblom', 0.001864), ('Lindell', 0.001351), ('Linder', 0.00121), ('Lindgren', 0.00608), ('Lindholm', 0.002166), ('Lindkvist', 0.001233), ('Lindqvist', 0.004209), ('Lindström', 0.006642), ('Lindén', 0.001551), ('Ljung', 0.001232), ('Ljungberg', 0.001274), ('Lund', 0.002142), ('Lundberg', 0.00568), ('Lundgren', 0.005495), ('Lundin', 0.00397), ('Lundkvist', 0.001252), ('Lundmark', 0.00141), ('Lundqvist', 0.003493), ('Lundström', 0.003173), ('Löfgren', 0.002211), ('Magnusson', 0.007333), ('Malm', 0.00158), ('Malmberg', 0.001224), ('Martinsson', 0.0025), ('Mattsson', 0.004904), ('Melin', 0.001487), ('Moberg', 0.001532), ('Molin', 0.001312), ('Månsson', 0.002563), ('Mårtensson', 0.003432), ('Möller', 0.002013), ('Nielsen', 0.001623), ('Nilsson', 0.050327), ('Norberg', 0.002325), ('Nord', 0.001346), ('Nordin', 0.002799), ('Nordström', 0.003207), ('Norman', 0.001228), ('Norén', 0.001524), ('Nyberg', 0.003291), ('Nygren', 0.00188), ('Nyman', 0.002117), ('Nyström', 0.003538), ('Näslund', 0.001331), ('Ohlsson', 0.001141), ('Olausson', 0.001503), ('Olofsson', 0.006893), ('Olsson', 0.032427), ('Oskarsson', 0.001576), ('Ottosson', 0.002066), ('Palm', 0.001957), ('Paulsson', 0.001382), ('Pedersen', 0.001201), ('Persson', 0.031475), ('Petersson', 0.008913), ('Pettersson', 0.019276), ('Pålsson', 0.001626), ('Roos', 0.001447), ('Rosén', 0.00181), ('Samuelsson', 0.003855), ('Sandberg', 0.004613), ('Sandström', 0.002761), ('Sjöberg', 0.004282), ('Sjödin', 0.001399), ('Sjögren', 0.002585), ('Sjöström', 0.001921), ('Skoglund', 0.001788), ('Sköld', 0.001266), ('Stenberg', 0.001784), ('Strand', 0.001771), ('Strandberg', 0.001755), ('Ström', 0.002872), ('Strömberg', 0.002357), ('Ståhl', 0.00126), ('Sundberg', 0.002691), ('Sundin', 0.001434), ('Sundqvist', 0.001526), ('Sundström', 0.002302), ('Svensson', 0.030624), ('Svärd', 0.001284), ('Söderberg', 0.003305), ('Söderlund', 0.00197), ('Söderström', 0.002226), ('Törnqvist', 0.001176), ('Viklund', 0.001833), ('Vikström', 0.001757), ('Wahlström', 0.001139), ('Wallin', 0.003077), ('Wikström', 0.001522), ('Åberg', 0.002664), ('Ågren', 0.00132), ('Åkesson', 0.002344), ('Åström', 0.002272), ('Öberg', 0.002448), ('Öhman', 0.001415), ('Östlund', 0.001623)))
faker.providers.person.sv_SE.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/el_GR/__init__.py----------------------------------------
faker.providers.person.el_GR.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/fa_IR/__init__.py----------------------------------------
faker.providers.person.fa_IR.__init__.Provider(PersonProvider)
faker.providers.person.fa_IR.__init__.Provider.suffix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/de_AT/__init__.py----------------------------------------
faker.providers.person.de_AT.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/fi_FI/__init__.py----------------------------------------
faker.providers.person.fi_FI.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/fr_FR/__init__.py----------------------------------------
faker.providers.person.fr_FR.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/en_GB/__init__.py----------------------------------------
A:faker.providers.person.en_GB.__init__.last_names->OrderedDict((('Savage', 0.04), ('Winter', 0.03), ('Metcalfe', 0.03), ('Harper', 0.06), ('Burgess', 0.06), ('Bailey', 0.15), ('Potts', 0.03), ('Boyle', 0.03), ('Brown', 0.51), ('Jennings', 0.05), ('Payne', 0.09), ('Day', 0.09), ('Holland', 0.07), ('Higgins', 0.05), ('Rhodes', 0.04), ('Hancock', 0.04), ('Howells', 0.03), ('Fowler', 0.04), ('Sims', 0.03), ('Thomas', 0.35), ('Parker', 0.17), ('Bentley', 0.04), ('Barnett', 0.05), ('Manning', 0.03), ('Collier', 0.03), ('Holloway', 0.03), ('Hartley', 0.04), ('George', 0.05), ('Tomlinson', 0.04), ('Howard', 0.09), ('Long', 0.06), ('Farmer', 0.03), ('Collins', 0.15), ('Rice', 0.03), ('Townsend', 0.04), ('Rees', 0.07), ('Bruce', 0.03), ('Hammond', 0.05), ('Ford', 0.09), ('Tucker', 0.05), ('Wallis', 0.03), ('Hamilton', 0.06), ('Ferguson', 0.04), ('Hooper', 0.03), ('Francis', 0.07), ('Reeves', 0.04), ('Barlow', 0.04), ('Short', 0.04), ('Cunningham', 0.05), ('Hopkins', 0.06), ('Nicholson', 0.06), ('Archer', 0.04), ('Green', 0.25), ('Glover', 0.04), ('Gibson', 0.09), ('Spencer', 0.08), ('Warner', 0.04), ('Webb', 0.12), ('Whitehouse', 0.03), ('Dean', 0.06), ('Griffiths', 0.16), ('Clark', 0.2), ('Hardy', 0.05), ('Iqbal', 0.03), ('Baldwin', 0.04), ("O'Neill", 0.06), ('Blake', 0.05), ('Lees', 0.03), ('Harvey', 0.1), ('Clarke', 0.24), ('Daniels', 0.04), ('Browne', 0.03), ('Macdonald', 0.04), ('Kirk', 0.04), ('Khan', 0.14), ('Davidson', 0.05), ('Dale', 0.04), ('Sanders', 0.04), ('Wilkins', 0.04), ('Connor', 0.03), ('Daly', 0.03), ('Lane', 0.06), ('Kennedy', 0.06), ('Bray', 0.03), ('Burrows', 0.04), ('Hayes', 0.07), ('Wyatt', 0.03), ('Gould', 0.03), ('Dyer', 0.03), ('Nash', 0.05), ('Bryan', 0.03), ('Pope', 0.03), ('Fraser', 0.04), ('Steele', 0.03), ('Walsh', 0.09), ('Wade', 0.04), ('Marsden', 0.03), ('Humphries', 0.03), ("O'Brien", 0.08), ('Thompson', 0.28), ('Lord', 0.03), ('Coleman', 0.06), ('Jarvis', 0.04), ('Noble', 0.03), ('Williamson', 0.06), ('Carpenter', 0.03), ('Gardner', 0.06), ('Farrell', 0.04), ('Clayton', 0.05), ('Akhtar', 0.05), ('Gallagher', 0.05), ('Skinner', 0.04), ('Birch', 0.04), ('Kay', 0.04), ('Barrett', 0.07), ('Bates', 0.06), ('Lucas', 0.04), ("O'Connor", 0.06), ('Chamberlain', 0.03), ('Chapman', 0.12), ('Ryan', 0.08), ('Thorpe', 0.04), ('Lawson', 0.04), ('Howell', 0.04), ('Martin', 0.23), ('Kelly', 0.16), ('Dobson', 0.04), ('Stevens', 0.1), ('Brennan', 0.04), ('Lloyd', 0.11), ('Quinn', 0.05), ('Morton', 0.04), ('Wilson', 0.35), ('Barnes', 0.11), ('Henry', 0.03), ('Smith', 1.15), ('Pritchard', 0.05), ('Phillips', 0.18), ('Dixon', 0.1), ('Sharpe', 0.03), ('Robertson', 0.07), ('White', 0.27), ('Bird', 0.06), ('Abbott', 0.04), ('Kirby', 0.04), ('Hussain', 0.11), ('Barber', 0.05), ('Harris', 0.25), ('Doyle', 0.05), ('Jordan', 0.05), ('Burns', 0.06), ('Hodgson', 0.06), ('Atkins', 0.04), ('Stokes', 0.05), ('Rogers', 0.12), ('Parkes', 0.03), ('Brookes', 0.04), ('Herbert', 0.03), ('Gordon', 0.05), ('Kemp', 0.05), ('Webster', 0.07), ('Sinclair', 0.03), ('McLean', 0.03), ('Saunders', 0.09), ('Stephens', 0.05), ('Newton', 0.07), ('Potter', 0.05), ('Storey', 0.03), ('Stanley', 0.04), ('Turnbull', 0.03), ('Duncan', 0.03), ('Rose', 0.08), ('Mills', 0.11), ('Sheppard', 0.03), ('Butcher', 0.03), ('Fry', 0.03), ('Ross', 0.06), ('Shepherd', 0.06), ('Goodwin', 0.05), ('Holt', 0.05), ('Haynes', 0.04), ('Cook', 0.15), ('Ward', 0.21), ('Godfrey', 0.03), ('Stone', 0.07), ('Dodd', 0.04), ('Parsons', 0.07), ('Ingram', 0.03), ('Nixon', 0.03), ('Evans', 0.39), ('Hargreaves', 0.03), ('Owen', 0.11), ('Chan', 0.03), ('Connolly', 0.03), ('Charlton', 0.03), ('Middleton', 0.04), ('Hyde', 0.03), ('Patel', 0.24), ('Owens', 0.03), ('Lamb', 0.04), ('Palmer', 0.11), ('Cooper', 0.22), ('McCarthy', 0.06), ('Black', 0.04), ('Dickinson', 0.04), ('Gilbert', 0.05), ('Leach', 0.03), ('North', 0.03), ('Byrne', 0.06), ('Frost', 0.05), ('Simmons', 0.04), ('Matthews', 0.11), ('Alexander', 0.04), ('Ahmed', 0.1), ('Gibbons', 0.03), ('Stevenson', 0.05), ('Rowley', 0.03), ('Miles', 0.05), ('Hanson', 0.03), ('Bolton', 0.03), ('Craig', 0.03), ('Ali', 0.12), ('Carroll', 0.04), ('Allan', 0.03), ('Sanderson', 0.03), ('Fletcher', 0.1), ('Burton', 0.08), ('Oliver', 0.07), ('Davison', 0.04), ('Douglas', 0.04), ('Field', 0.04), ('Pickering', 0.03), ('Pugh', 0.04), ('Rowe', 0.05), ('Mahmood', 0.03), ('Sykes', 0.03), ('Crawford', 0.03), ('Williams', 0.66), ('Parkin', 0.03), ('Patterson', 0.04), ('Power', 0.03), ('Price', 0.17), ('Murphy', 0.14), ('Hale', 0.03), ('Nicholls', 0.06), ('Hall', 0.25), ('Jones', 0.94), ('Hughes', 0.26), ('Stephenson', 0.05), ('Morley', 0.04), ('Knight', 0.11), ('Kerr', 0.03), ('Heath', 0.04), ('Pollard', 0.03), ('Lowe', 0.07), ("O'Sullivan", 0.04), ('Buckley', 0.05), ('Bond', 0.05), ('Dennis', 0.03), ('Lewis', 0.25), ('Weston', 0.04), ('Joyce', 0.03), ('Reynolds', 0.09), ('Bishop', 0.06), ('Norris', 0.04), ('Barry', 0.03), ('Whittaker', 0.04), ('Carey', 0.03), ('Hill', 0.22), ('Kent', 0.04), ('Ashton', 0.04), ('Wilkinson', 0.13), ('Powell', 0.12), ('Henderson', 0.06), ('Freeman', 0.06), ('Dunn', 0.07), ('Kaur', 0.09), ('French', 0.04), ('Parry', 0.06), ('Walton', 0.06), ('Fisher', 0.1), ('Naylor', 0.03), ('Duffy', 0.04), ('Humphreys', 0.04), ('Randall', 0.03), ('Bevan', 0.03), ('Doherty', 0.03), ('Moore', 0.21), ('Armstrong', 0.07), ('Sullivan', 0.05), ('Swift', 0.03), ('Pearce', 0.09), ('Tyler', 0.03), ('Bradshaw', 0.04), ('Allen', 0.19), ('Mellor', 0.03), ('Whitehead', 0.05), ('Jackson', 0.24), ('Grant', 0.07), ('Fox', 0.09), ('Wright', 0.28), ('Anderson', 0.13), ('Foster', 0.13), ('Gibbs', 0.04), ('Butler', 0.11), ('Jenkins', 0.1), ('John', 0.04), ('Morrison', 0.04), ('Talbot', 0.03), ('Blackburn', 0.03), ('Osborne', 0.05), ('Flynn', 0.04), ('Richards', 0.14), ('Hurst', 0.03), ('Bibi', 0.05), ('Houghton', 0.03), ('Johnson', 0.34), ('Yates', 0.06), ('Mistry', 0.03), ('Donnelly', 0.03), ('Parkinson', 0.04), ('Thomson', 0.05), ('Woods', 0.07), ('Todd', 0.04), ('Dawson', 0.08), ('Hart', 0.07), ('Graham', 0.1), ('Berry', 0.07), ('Willis', 0.05), ('Miah', 0.04), ('Brooks', 0.09), ('Horton', 0.03), ('Riley', 0.07), ('Lambert', 0.05), ('Waters', 0.04), ('Lynch', 0.05), ('Moss', 0.06), ('Slater', 0.05), ('Knowles', 0.04), ('Benson', 0.03), ('Adams', 0.13), ('King', 0.2), ('Davies', 0.48), ('Richardson', 0.15), ('Vincent', 0.03), ('Holmes', 0.11), ('Conway', 0.03), ('Marshall', 0.14), ('Faulkner', 0.03), ('Garner', 0.03), ('Booth', 0.08), ('Harrison', 0.2), ('Campbell', 0.11), ('Cole', 0.08), ('Goddard', 0.04), ('Walters', 0.05), ('Ellis', 0.13), ('Edwards', 0.27), ('Peters', 0.04), ('Atkinson', 0.08), ('Wood', 0.24), ('Briggs', 0.04), ('Elliott', 0.09), ('Chandler', 0.03), ('Hope', 0.03), ('Hunter', 0.07), ('Newman', 0.07), ('Pratt', 0.03), ('Rahman', 0.03), ('Hicks', 0.04), ('Cox', 0.14), ('Reid', 0.07), ('Morris', 0.21), ('Banks', 0.04), ('Myers', 0.03), ('Mitchell', 0.16), ('Davey', 0.04), ('Peacock', 0.03), ('Reed', 0.07), ('Carter', 0.15), ('Miller', 0.14), ('Perkins', 0.04), ('Read', 0.05), ('Hilton', 0.03), ('Moran', 0.03), ('Welch', 0.03), ('Vaughan', 0.04), ('Clements', 0.03), ('Griffin', 0.05), ('Russell', 0.1), ("O'Donnell", 0.03), ('Hobbs', 0.03), ('Marsh', 0.07), ('Porter', 0.07), ('Gill', 0.08), ('Leonard', 0.03), ('McKenzie', 0.03), ('Thornton', 0.04), ('Fitzgerald', 0.03), ('Greenwood', 0.05), ('Pearson', 0.1), ('James', 0.19), ('Coles', 0.03), ('Roberts', 0.33), ('Nelson', 0.05), ('Forster', 0.03), ('Gough', 0.03), ('Mann', 0.05), ('Law', 0.03), ('Barker', 0.1), ('Cartwright', 0.04), ('Bradley', 0.08), ('Sharp', 0.05), ('Warren', 0.06), ('Summers', 0.03), ('Little', 0.04), ('Perry', 0.08), ('Fuller', 0.04), ('West', 0.09), ('Mason', 0.12), ('Finch', 0.03), ('Norton', 0.03), ('Burke', 0.05), ('Holden', 0.04), ('Lee', 0.2), ('Smart', 0.04), ('Bull', 0.04), ('Bryant', 0.04), ('Gray', 0.12), ('Watts', 0.08), ('Brady', 0.03), ('Baker', 0.2), ('Barton', 0.05), ('Davis', 0.17), ('Baxter', 0.05), ('Taylor', 0.53), ('Carr', 0.07), ('Wong', 0.04), ('Cameron', 0.03), ('Gardiner', 0.03), ('Hawkins', 0.07), ('Shaw', 0.15), ('Wallace', 0.05), ('Young', 0.16), ('Shah', 0.06), ('Gregory', 0.07), ('Ball', 0.08), ('Norman', 0.04), ('Lawrence', 0.09), ('Bowen', 0.04), ('Wheeler', 0.05), ('Bartlett', 0.04), ('Sutton', 0.06), ('Lyons', 0.03), ('Hutchinson', 0.05), ('Poole', 0.05), ('Cooke', 0.06), ('Franklin', 0.03), ('Howe', 0.04), ('Walker', 0.27), ('Johnston', 0.05), ('Austin', 0.05), ('Chadwick', 0.03), ('Bell', 0.15), ('Wall', 0.04), ('Woodward', 0.05), ('Preston', 0.04), ('Bennett', 0.16), ('Murray', 0.1), ('Begum', 0.13), ('McDonald', 0.06), ('Hudson', 0.07), ('Cross', 0.06), ('Singh', 0.13), ('Howarth', 0.03), ('Hewitt', 0.05), ('Curtis', 0.06), ('Harding', 0.07), ('May', 0.05), ('Wells', 0.07), ('Giles', 0.03), ('Watson', 0.17), ('Nolan', 0.03), ('Andrews', 0.09), ('Hayward', 0.04), ('Schofield', 0.04), ('Hunt', 0.12), ('Robson', 0.06), ('Arnold', 0.05), ('Morgan', 0.19), ('Coates', 0.03), ('Page', 0.07), ('Simpson', 0.13), ('Stewart', 0.09), ('Robinson', 0.29), ('Fleming', 0.03), ('Scott', 0.18), ('Chambers', 0.06), ('Turner', 0.23), ('Watkins', 0.06)))
faker.providers.person.en_GB.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/person/ja_JP/__init__.py----------------------------------------
A:faker.providers.person.ja_JP.__init__.pattern->self.random_element(self.romanized_formats)
faker.providers.person.ja_JP.__init__.Provider(PersonProvider)
faker.providers.person.ja_JP.__init__.Provider.first_kana_name(self)
faker.providers.person.ja_JP.__init__.Provider.first_kana_name_female(self)
faker.providers.person.ja_JP.__init__.Provider.first_kana_name_male(self)
faker.providers.person.ja_JP.__init__.Provider.first_romanized_name(self)
faker.providers.person.ja_JP.__init__.Provider.first_romanized_name_female(self)
faker.providers.person.ja_JP.__init__.Provider.first_romanized_name_male(self)
faker.providers.person.ja_JP.__init__.Provider.kana_name(self)
faker.providers.person.ja_JP.__init__.Provider.last_kana_name(self)
faker.providers.person.ja_JP.__init__.Provider.last_romanized_name(self)
faker.providers.person.ja_JP.__init__.Provider.romanized_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/isbn/__init__.py----------------------------------------
A:faker.providers.isbn.__init__.ean->self.random_element(RULES.keys())
A:faker.providers.isbn.__init__.reg_group->self.random_element(RULES[ean].keys())
A:faker.providers.isbn.__init__.reg_pub->self.numerify('#' * reg_pub_len)
A:faker.providers.isbn.__init__.(registrant, publication)->self._registrant_publication(reg_pub, rules)
A:faker.providers.isbn.__init__.(ean, group, registrant, publication)->self._body()
A:faker.providers.isbn.__init__.isbn->ISBN10(ean, group, registrant, publication)
faker.providers.isbn.__init__.Provider(BaseProvider)
faker.providers.isbn.__init__.Provider._body(self)
faker.providers.isbn.__init__.Provider._registrant_publication(reg_pub,rules)
faker.providers.isbn.__init__.Provider.isbn10(self,separator='-')
faker.providers.isbn.__init__.Provider.isbn13(self,separator='-')


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/isbn/isbn.py----------------------------------------
A:faker.providers.isbn.isbn.self.check_digit->self._check_digit()
A:faker.providers.isbn.isbn.body->''.join([self.group, self.registrant, self.publication])
A:faker.providers.isbn.isbn.weights->range(1, 10)
faker.providers.isbn.ISBN(self,ean=None,group=None,registrant=None,publication=None)
faker.providers.isbn.ISBN10(self,*args,**kwargs)
faker.providers.isbn.ISBN10._check_digit(self)
faker.providers.isbn.ISBN10.format(self,separator='')
faker.providers.isbn.ISBN13(self,*args,**kwargs)
faker.providers.isbn.ISBN13._check_digit(self)
faker.providers.isbn.ISBN13.format(self,separator='')
faker.providers.isbn.isbn.ISBN(self,ean=None,group=None,registrant=None,publication=None)
faker.providers.isbn.isbn.ISBN.__init__(self,ean=None,group=None,registrant=None,publication=None)
faker.providers.isbn.isbn.ISBN10(self,*args,**kwargs)
faker.providers.isbn.isbn.ISBN10.__init__(self,*args,**kwargs)
faker.providers.isbn.isbn.ISBN10._check_digit(self)
faker.providers.isbn.isbn.ISBN10.format(self,separator='')
faker.providers.isbn.isbn.ISBN13(self,*args,**kwargs)
faker.providers.isbn.isbn.ISBN13.__init__(self,*args,**kwargs)
faker.providers.isbn.isbn.ISBN13._check_digit(self)
faker.providers.isbn.isbn.ISBN13.format(self,separator='')


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/isbn/rules.py----------------------------------------
A:faker.providers.isbn.rules.RegistrantRule->namedtuple('RegistrantRule', ['min', 'max', 'registrant_length'])


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/isbn/en_US/__init__.py----------------------------------------
faker.providers.isbn.en_US.__init__.Provider(ISBNProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/__init__.py----------------------------------------
A:faker.providers.company.__init__.pattern->self.random_element(self.formats)
faker.providers.company.__init__.Provider(BaseProvider)
faker.providers.company.__init__.Provider.company(self)
faker.providers.company.__init__.Provider.company_suffix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/it_IT/__init__.py----------------------------------------
faker.providers.company.it_IT.__init__.Provider(CompanyProvider)
faker.providers.company.it_IT.__init__.Provider.bs(self)
faker.providers.company.it_IT.__init__.Provider.catch_phrase(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/ru_RU/__init__.py----------------------------------------
faker.providers.company.ru_RU.__init__.Provider(CompanyProvider)
faker.providers.company.ru_RU.__init__.Provider.company_prefix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/sk_SK/__init__.py----------------------------------------
faker.providers.company.sk_SK.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/zh_TW/__init__.py----------------------------------------
faker.providers.company.zh_TW.__init__.Provider(CompanyProvider)
faker.providers.company.zh_TW.__init__.Provider.company_prefix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/pt_PT/__init__.py----------------------------------------
faker.providers.company.pt_PT.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/fr_CH/__init__.py----------------------------------------
A:faker.providers.company.fr_CH.__init__.digits->''.join([str(digit) for digit in digits])
A:faker.providers.company.fr_CH.__init__.sum->_checksum(digits)
faker.providers.company.fr_CH.__init__.Provider(CompanyProvider)
faker.providers.company.fr_CH.__init__.Provider.ide(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/sl_SI/__init__.py----------------------------------------
faker.providers.company.sl_SI.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/cs_CZ/__init__.py----------------------------------------
faker.providers.company.cs_CZ.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/pl_PL/__init__.py----------------------------------------
A:faker.providers.company.pl_PL.__init__.check_digit->company_vat_checksum(vat_digits)
faker.providers.company.pl_PL.__init__.Provider(CompanyProvider)
faker.providers.company.pl_PL.__init__.Provider.company_vat(self)
faker.providers.company.pl_PL.__init__.Provider.local_regon(self)
faker.providers.company.pl_PL.__init__.Provider.regon(self)
faker.providers.company.pl_PL.__init__.company_vat_checksum(digits)
faker.providers.company.pl_PL.__init__.local_regon_checksum(digits)
faker.providers.company.pl_PL.__init__.regon_checksum(digits)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/zh_CN/__init__.py----------------------------------------
faker.providers.company.zh_CN.__init__.Provider(CompanyProvider)
faker.providers.company.zh_CN.__init__.Provider.company_prefix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/es_MX/__init__.py----------------------------------------
faker.providers.company.es_MX.__init__.Provider(CompanyProvider)
faker.providers.company.es_MX.__init__.Provider.bs(self)
faker.providers.company.es_MX.__init__.Provider.catch_phrase(self)
faker.providers.company.es_MX.__init__.Provider.company_prefix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/pt_BR/__init__.py----------------------------------------
A:faker.providers.company.pt_BR.__init__.digits->self.company_id()
A:faker.providers.company.pt_BR.__init__.dv->sum((w * d for (w, d) in zip(weights[1:], digits)))
A:faker.providers.company.pt_BR.__init__.dv2->sum((w * d for (w, d) in zip(weights, digits)))
A:faker.providers.company.pt_BR.__init__.pattern->self.random_element(self.catch_phrase_formats)
A:faker.providers.company.pt_BR.__init__.catch_phrase->self.generator.parse(pattern)
faker.providers.company.pt_BR.__init__.Provider(CompanyProvider)
faker.providers.company.pt_BR.__init__.Provider.catch_phrase(self)
faker.providers.company.pt_BR.__init__.Provider.catch_phrase_attribute(self)
faker.providers.company.pt_BR.__init__.Provider.catch_phrase_noun(self)
faker.providers.company.pt_BR.__init__.Provider.catch_phrase_verb(self)
faker.providers.company.pt_BR.__init__.Provider.cnpj(self)
faker.providers.company.pt_BR.__init__.Provider.company_id(self)
faker.providers.company.pt_BR.__init__.company_id_checksum(digits)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/bg_BG/__init__.py----------------------------------------
faker.providers.company.bg_BG.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/no_NO/__init__.py----------------------------------------
faker.providers.company.no_NO.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/hu_HU/__init__.py----------------------------------------
faker.providers.company.hu_HU.__init__.Provider(CompanyProvider)
faker.providers.company.hu_HU.__init__.Provider.company_suffix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/hr_HR/__init__.py----------------------------------------
faker.providers.company.hr_HR.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/de_DE/__init__.py----------------------------------------
faker.providers.company.de_DE.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/en_US/__init__.py----------------------------------------
faker.providers.company.en_US.__init__.Provider(CompanyProvider)
faker.providers.company.en_US.__init__.Provider.bs(self)
faker.providers.company.en_US.__init__.Provider.catch_phrase(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/ko_KR/__init__.py----------------------------------------
faker.providers.company.ko_KR.__init__.Provider(CompanyProvider)
faker.providers.company.ko_KR.__init__.Provider.bs(self)
faker.providers.company.ko_KR.__init__.Provider.catch_phrase(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/sv_SE/__init__.py----------------------------------------
faker.providers.company.sv_SE.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/fa_IR/__init__.py----------------------------------------
faker.providers.company.fa_IR.__init__.Provider(CompanyProvider)
faker.providers.company.fa_IR.__init__.Provider.company(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/fi_FI/__init__.py----------------------------------------
A:faker.providers.company.fi_FI.__init__.first_digit->str(self.random_digit_not_null())
A:faker.providers.company.fi_FI.__init__.cs->calculate_checksum(body)
faker.providers.company.fi_FI.__init__.Provider(CompanyProvider)
faker.providers.company.fi_FI.__init__.Provider.company_business_id(self)
faker.providers.company.fi_FI.__init__.Provider.company_vat(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/fr_FR/__init__.py----------------------------------------
A:faker.providers.company.fr_FR.__init__.pattern->self.random_element(self.catch_phrase_formats)
A:faker.providers.company.fr_FR.__init__.catch_phrase->self.generator.parse(pattern)
A:faker.providers.company.fr_FR.__init__.begin_pos->self.generator.parse(pattern).find(word)
A:faker.providers.company.fr_FR.__init__.end_pos->self.generator.parse(pattern).find(word, begin_pos + 1)
A:faker.providers.company.fr_FR.__init__.sequential_number->str(self.random_number(max_sequential_digits)).zfill(4)
faker.providers.company.fr_FR.__init__.Provider(CompanyProvider)
faker.providers.company.fr_FR.__init__.Provider._is_catch_phrase_valid(self,catch_phrase)
faker.providers.company.fr_FR.__init__.Provider.catch_phrase(self)
faker.providers.company.fr_FR.__init__.Provider.catch_phrase_attribute(self)
faker.providers.company.fr_FR.__init__.Provider.catch_phrase_noun(self)
faker.providers.company.fr_FR.__init__.Provider.catch_phrase_verb(self)
faker.providers.company.fr_FR.__init__.Provider.siren(self)
faker.providers.company.fr_FR.__init__.Provider.siret(self,max_sequential_digits=2)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/company/ja_JP/__init__.py----------------------------------------
faker.providers.company.ja_JP.__init__.Provider(CompanyProvider)
faker.providers.company.ja_JP.__init__.Provider.company_prefix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/credit_card/__init__.py----------------------------------------
A:faker.providers.credit_card.__init__.credit_card_types->OrderedDict((('maestro', CreditCard('Maestro', prefix_maestro, 12, security_code='CVV')), ('mastercard', CreditCard('Mastercard', prefix_mastercard, 16, security_code='CVV')), ('visa16', CreditCard('VISA 16 digit', prefix_visa)), ('visa13', CreditCard('VISA 13 digit', prefix_visa, 13)), ('amex', CreditCard('American Express', prefix_amex, 15, security_code='CID', security_code_length=4)), ('discover', CreditCard('Discover', prefix_discover)), ('diners', CreditCard('Diners Club / Carte Blanche', prefix_diners, 14)), ('jcb15', CreditCard('JCB 15 digit', prefix_jcb15, 15)), ('jcb16', CreditCard('JCB 16 digit', prefix_jcb16)), ('voyager', CreditCard('Voyager', prefix_voyager, 15))))
A:faker.providers.credit_card.__init__.card_type->self.random_element(self.credit_card_types.keys())
A:faker.providers.credit_card.__init__.card->self._credit_card_type(card_type)
A:faker.providers.credit_card.__init__.prefix->self.random_element(card.prefixes)
A:faker.providers.credit_card.__init__.number->self.numerify(number)
A:faker.providers.credit_card.__init__.expire_date->self.generator.date_time_between(start, end)
A:faker.providers.credit_card.__init__.tpl->tpl.format(provider=card.name, owner=self.generator.parse('{{first_name}} {{last_name}}'), number=self.credit_card_number(card), expire_date=self.credit_card_expire(), security=card.security_code, security_nb=self.credit_card_security_code(card)).format(provider=card.name, owner=self.generator.parse('{{first_name}} {{last_name}}'), number=self.credit_card_number(card), expire_date=self.credit_card_expire(), security=card.security_code, security_nb=self.credit_card_security_code(card))
faker.providers.credit_card.__init__.CreditCard(self,name,prefixes,length=16,security_code='CVC',security_code_length=3)
faker.providers.credit_card.__init__.CreditCard.__init__(self,name,prefixes,length=16,security_code='CVC',security_code_length=3)
faker.providers.credit_card.__init__.Provider(BaseProvider)
faker.providers.credit_card.__init__.Provider._credit_card_type(self,card_type=None)
faker.providers.credit_card.__init__.Provider._generate_number(self,prefix,length)
faker.providers.credit_card.__init__.Provider.credit_card_expire(self,start='now',end='+10y',date_format='%m/%y')
faker.providers.credit_card.__init__.Provider.credit_card_full(self,card_type=None)
faker.providers.credit_card.__init__.Provider.credit_card_number(self,card_type=None)
faker.providers.credit_card.__init__.Provider.credit_card_provider(self,card_type=None)
faker.providers.credit_card.__init__.Provider.credit_card_security_code(self,card_type=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/credit_card/en_US/__init__.py----------------------------------------
faker.providers.credit_card.en_US.__init__.Provider(CreditCardProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/automotive/__init__.py----------------------------------------
A:faker.providers.automotive.__init__.temp->re.sub('\\?', lambda x: self.random_element(ascii_uppercase), self.random_element(self.license_formats))
faker.providers.automotive.__init__.Provider(BaseProvider)
faker.providers.automotive.__init__.Provider.license_plate(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/automotive/en_US/__init__.py----------------------------------------
faker.providers.automotive.en_US.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/automotive/en_CA/__init__.py----------------------------------------
faker.providers.automotive.en_CA.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/automotive/en_GB/__init__.py----------------------------------------
faker.providers.automotive.en_GB.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/job/__init__.py----------------------------------------
faker.providers.job.__init__.Provider(BaseProvider)
faker.providers.job.__init__.Provider.job(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/job/ru_RU/__init__.py----------------------------------------
faker.providers.job.ru_RU.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/job/zh_TW/__init__.py----------------------------------------
faker.providers.job.zh_TW.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/job/fr_CH/__init__.py----------------------------------------
faker.providers.job.fr_CH.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/job/pl_PL/__init__.py----------------------------------------
faker.providers.job.pl_PL.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/job/hr_HR/__init__.py----------------------------------------
faker.providers.job.hr_HR.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/job/en_US/__init__.py----------------------------------------
faker.providers.job.en_US.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/job/uk_UA/__init__.py----------------------------------------
faker.providers.job.uk_UA.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/job/ko_KR/__init__.py----------------------------------------
faker.providers.job.ko_KR.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/job/fa_IR/__init__.py----------------------------------------
faker.providers.job.fa_IR.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/job/fr_FR/__init__.py----------------------------------------
faker.providers.job.fr_FR.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/ssn/__init__.py----------------------------------------
faker.providers.ssn.__init__.Provider(BaseProvider)
faker.providers.ssn.__init__.Provider.ssn(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/ssn/it_IT/__init__.py----------------------------------------
A:faker.providers.ssn.it_IT.__init__.ALPHANUMERICS->sorted(digits + ascii_uppercase)
A:faker.providers.ssn.it_IT.__init__.ALPHANUMERICS_DICT->dict(((char, index) for (index, char) in enumerate(ALPHANUMERICS)))
A:faker.providers.ssn.it_IT.__init__.code->self.bothify(self.fiscal_code_format).upper()
faker.providers.ssn.it_IT.__init__.Provider(SsnProvider)
faker.providers.ssn.it_IT.__init__.Provider.ssn(self)
faker.providers.ssn.it_IT.__init__.checksum(value)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/ssn/ru_RU/__init__.py----------------------------------------
faker.providers.ssn.ru_RU.__init__.Provider(SsnProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/ssn/zh_TW/__init__.py----------------------------------------
faker.providers.ssn.zh_TW.__init__.Provider(SsnProvider)
faker.providers.ssn.zh_TW.__init__.Provider.ssn(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/ssn/et_EE/__init__.py----------------------------------------
A:faker.providers.ssn.et_EE.__init__.age->datetime.timedelta(days=self.generator.random.randrange(self.min_age, self.max_age))
A:faker.providers.ssn.et_EE.__init__.ik->self.generator.random.choice(('7', '8'))
faker.providers.ssn.et_EE.__init__.Provider(SsnProvider)
faker.providers.ssn.et_EE.__init__.Provider.ssn(self)
faker.providers.ssn.et_EE.__init__.checksum(digits)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/ssn/fr_CH/__init__.py----------------------------------------
A:faker.providers.ssn.fr_CH.__init__.evensum->sum(digits[:-1:2])
A:faker.providers.ssn.fr_CH.__init__.oddsum->sum(digits[1::2])
A:faker.providers.ssn.fr_CH.__init__.digits->''.join([str(d) for d in digits])
faker.providers.ssn.fr_CH.__init__.Provider(SsnProvider)
faker.providers.ssn.fr_CH.__init__.Provider.ssn(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/ssn/pl_PL/__init__.py----------------------------------------
A:faker.providers.ssn.pl_PL.__init__.year->int(birth_date.strftime('%Y'))
A:faker.providers.ssn.pl_PL.__init__.birth_date->self.generator.date_time()
A:faker.providers.ssn.pl_PL.__init__.year_without_century->int(birth_date.strftime('%y'))
A:faker.providers.ssn.pl_PL.__init__.month->calculate_month(birth_date)
A:faker.providers.ssn.pl_PL.__init__.day->int(birth_date.strftime('%d'))
faker.providers.ssn.pl_PL.__init__.Provider(SsnProvider)
faker.providers.ssn.pl_PL.__init__.Provider.ssn(self)
faker.providers.ssn.pl_PL.__init__.calculate_month(birth_date)
faker.providers.ssn.pl_PL.__init__.checksum(digits)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/ssn/zh_CN/__init__.py----------------------------------------
A:faker.providers.ssn.zh_CN.__init__.age->datetime.timedelta(days=self.random_int(min_age, max_age))
A:faker.providers.ssn.zh_CN.__init__.birthday_str->birthday.strftime('%Y%m%d')
A:faker.providers.ssn.zh_CN.__init__.ssn_without_checksum->self.numerify(self.random_element(self.area_codes) + birthday_str + '###')
faker.providers.ssn.zh_CN.__init__.Provider(SsnProvider)
faker.providers.ssn.zh_CN.__init__.Provider.ssn(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/ssn/pt_BR/__init__.py----------------------------------------
A:faker.providers.ssn.pt_BR.__init__.digits->self.generator.random.sample(range(10), 9)
A:faker.providers.ssn.pt_BR.__init__.dv->checksum(digits)
A:faker.providers.ssn.pt_BR.__init__.c->self.ssn()
faker.providers.ssn.pt_BR.__init__.Provider(SsnProvider)
faker.providers.ssn.pt_BR.__init__.Provider.cpf(self)
faker.providers.ssn.pt_BR.__init__.Provider.ssn(self)
faker.providers.ssn.pt_BR.__init__.checksum(digits)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/ssn/nl_NL/__init__.py----------------------------------------
A:faker.providers.ssn.nl_NL.__init__.digits->self.generator.random.sample(range(10), 8)
A:faker.providers.ssn.nl_NL.__init__.s->_checksum(digits)
A:faker.providers.ssn.nl_NL.__init__.bsn->''.join([str(e) for e in digits])
faker.providers.ssn.nl_NL.__init__.Provider(SsnProvider)
faker.providers.ssn.nl_NL.__init__.Provider.ssn(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/ssn/hu_HU/__init__.py----------------------------------------
A:faker.providers.ssn.hu_HU.__init__.E->self.generator.random_int(17, 99)
A:faker.providers.ssn.hu_HU.__init__.H->zfix(H)
A:faker.providers.ssn.hu_HU.__init__.N->zfix(N)
A:faker.providers.ssn.hu_HU.__init__.M->self.generator.random_int(1, 2)
A:faker.providers.ssn.hu_HU.__init__.S->'{}{}{}'.format(self.generator.random_digit(), self.generator.random_digit(), self.generator.random_digit())
A:faker.providers.ssn.hu_HU.__init__.vdig->'{M}{E}{H}{N}{S}'.format(M=M, E=E, H=H, N=N, S=S)
A:faker.providers.ssn.hu_HU.__init__.K->fmod(reduce(lambda x, y: x + y, cum), 11)
faker.providers.ssn.hu_HU.__init__.Provider(SsnProvider)
faker.providers.ssn.hu_HU.__init__.Provider.ssn(self,dob=None,gender=None)
faker.providers.ssn.hu_HU.__init__.zfix(d)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/ssn/hr_HR/__init__.py----------------------------------------
A:faker.providers.ssn.hr_HR.__init__.digits->self.generator.random.sample(range(10), 10)
faker.providers.ssn.hr_HR.__init__.Provider(SsnProvider)
faker.providers.ssn.hr_HR.__init__.Provider.ssn(self)
faker.providers.ssn.hr_HR.__init__.checksum(digits)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/ssn/en_US/__init__.py----------------------------------------
A:faker.providers.ssn.en_US.__init__.area->self.random_int(min=1, max=899)
A:faker.providers.ssn.en_US.__init__.group->self.random_int(1, 99)
A:faker.providers.ssn.en_US.__init__.serial->self.random_int(1, 9999)
A:faker.providers.ssn.en_US.__init__.ssn->'{0:03d}-{1:02d}-{2:04d}'.format(area, group, serial)
faker.providers.ssn.en_US.__init__.Provider(BaseProvider)
faker.providers.ssn.en_US.__init__.Provider.ssn(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/ssn/en_CA/__init__.py----------------------------------------
A:faker.providers.ssn.en_CA.__init__.digits->self.generator.random.sample(range(10), 8)
faker.providers.ssn.en_CA.__init__.Provider(SsnProvider)
faker.providers.ssn.en_CA.__init__.Provider.ssn(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/ssn/uk_UA/__init__.py----------------------------------------
faker.providers.ssn.uk_UA.__init__.Provider(SsnProvider)
faker.providers.ssn.uk_UA.__init__.Provider.ssn(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/ssn/ko_KR/__init__.py----------------------------------------
faker.providers.ssn.ko_KR.__init__.Provider(SsnProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/ssn/sv_SE/__init__.py----------------------------------------
A:faker.providers.ssn.sv_SE.__init__.digits->digits_of(number)
A:faker.providers.ssn.sv_SE.__init__.check_digit->_luhn_checksum(int(partial_number) * 10)
A:faker.providers.ssn.sv_SE.__init__.age->datetime.timedelta(days=self.generator.random.randrange(min_age, max_age))
A:faker.providers.ssn.sv_SE.__init__.pnr_date->birthday.strftime('%y%m%d')
A:faker.providers.ssn.sv_SE.__init__.suffix->str(self.generator.random.randrange(0, 999)).zfill(3)
A:faker.providers.ssn.sv_SE.__init__.luhn_checksum->str(_calculate_luhn(pnr_date + suffix))
A:faker.providers.ssn.sv_SE.__init__.pnr->'{0}-{1}{2}'.format(pnr_date, suffix, luhn_checksum)
faker.providers.ssn.sv_SE.__init__.Provider(SsnProvider)
faker.providers.ssn.sv_SE.__init__.Provider.ssn(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/ssn/fi_FI/__init__.py----------------------------------------
A:faker.providers.ssn.fi_FI.__init__.age->datetime.timedelta(days=self.generator.random.randrange(min_age, max_age))
A:faker.providers.ssn.fi_FI.__init__.suffix->str(self.generator.random.randrange(2, 899)).zfill(3)
A:faker.providers.ssn.fi_FI.__init__.checksum->_checksum(hetu_date + suffix)
A:faker.providers.ssn.fi_FI.__init__.hetu->''.join([hetu_date, separator, suffix, checksum])
faker.providers.ssn.fi_FI.__init__.Provider(SsnProvider)
faker.providers.ssn.fi_FI.__init__.Provider.ssn(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/ssn/nl_BE/__init__.py----------------------------------------
A:faker.providers.ssn.nl_BE.__init__.mydate->self.generator.date()
A:faker.providers.ssn.nl_BE.__init__.elms->self.generator.date().split('-')
A:faker.providers.ssn.nl_BE.__init__.seq->self.generator.random_int(1, 998)
A:faker.providers.ssn.nl_BE.__init__.seq_str->'{:0>3}'.format(seq)
A:faker.providers.ssn.nl_BE.__init__.date_as_int->int(''.join(elms))
A:faker.providers.ssn.nl_BE.__init__.s->_checksum(date_as_int)
A:faker.providers.ssn.nl_BE.__init__.s_rjust->'{:0>2}'.format(s)
faker.providers.ssn.nl_BE.__init__.Provider(SsnProvider)
faker.providers.ssn.nl_BE.__init__.Provider.ssn(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/color/__init__.py----------------------------------------
A:faker.providers.color.__init__.all_colors->OrderedDict((('AliceBlue', '#F0F8FF'), ('AntiqueWhite', '#FAEBD7'), ('Aqua', '#00FFFF'), ('Aquamarine', '#7FFFD4'), ('Azure', '#F0FFFF'), ('Beige', '#F5F5DC'), ('Bisque', '#FFE4C4'), ('Black', '#000000'), ('BlanchedAlmond', '#FFEBCD'), ('Blue', '#0000FF'), ('BlueViolet', '#8A2BE2'), ('Brown', '#A52A2A'), ('BurlyWood', '#DEB887'), ('CadetBlue', '#5F9EA0'), ('Chartreuse', '#7FFF00'), ('Chocolate', '#D2691E'), ('Coral', '#FF7F50'), ('CornflowerBlue', '#6495ED'), ('Cornsilk', '#FFF8DC'), ('Crimson', '#DC143C'), ('Cyan', '#00FFFF'), ('DarkBlue', '#00008B'), ('DarkCyan', '#008B8B'), ('DarkGoldenRod', '#B8860B'), ('DarkGray', '#A9A9A9'), ('DarkGreen', '#006400'), ('DarkKhaki', '#BDB76B'), ('DarkMagenta', '#8B008B'), ('DarkOliveGreen', '#556B2F'), ('DarkOrange', '#FF8C00'), ('DarkOrchid', '#9932CC'), ('DarkRed', '#8B0000'), ('DarkSalmon', '#E9967A'), ('DarkSeaGreen', '#8FBC8F'), ('DarkSlateBlue', '#483D8B'), ('DarkSlateGray', '#2F4F4F'), ('DarkTurquoise', '#00CED1'), ('DarkViolet', '#9400D3'), ('DeepPink', '#FF1493'), ('DeepSkyBlue', '#00BFFF'), ('DimGray', '#696969'), ('DodgerBlue', '#1E90FF'), ('FireBrick', '#B22222'), ('FloralWhite', '#FFFAF0'), ('ForestGreen', '#228B22'), ('Fuchsia', '#FF00FF'), ('Gainsboro', '#DCDCDC'), ('GhostWhite', '#F8F8FF'), ('Gold', '#FFD700'), ('GoldenRod', '#DAA520'), ('Gray', '#808080'), ('Green', '#008000'), ('GreenYellow', '#ADFF2F'), ('HoneyDew', '#F0FFF0'), ('HotPink', '#FF69B4'), ('IndianRed', '#CD5C5C'), ('Indigo', '#4B0082'), ('Ivory', '#FFFFF0'), ('Khaki', '#F0E68C'), ('Lavender', '#E6E6FA'), ('LavenderBlush', '#FFF0F5'), ('LawnGreen', '#7CFC00'), ('LemonChiffon', '#FFFACD'), ('LightBlue', '#ADD8E6'), ('LightCoral', '#F08080'), ('LightCyan', '#E0FFFF'), ('LightGoldenRodYellow', '#FAFAD2'), ('LightGray', '#D3D3D3'), ('LightGreen', '#90EE90'), ('LightPink', '#FFB6C1'), ('LightSalmon', '#FFA07A'), ('LightSeaGreen', '#20B2AA'), ('LightSkyBlue', '#87CEFA'), ('LightSlateGray', '#778899'), ('LightSteelBlue', '#B0C4DE'), ('LightYellow', '#FFFFE0'), ('Lime', '#00FF00'), ('LimeGreen', '#32CD32'), ('Linen', '#FAF0E6'), ('Magenta', '#FF00FF'), ('Maroon', '#800000'), ('MediumAquaMarine', '#66CDAA'), ('MediumBlue', '#0000CD'), ('MediumOrchid', '#BA55D3'), ('MediumPurple', '#9370DB'), ('MediumSeaGreen', '#3CB371'), ('MediumSlateBlue', '#7B68EE'), ('MediumSpringGreen', '#00FA9A'), ('MediumTurquoise', '#48D1CC'), ('MediumVioletRed', '#C71585'), ('MidnightBlue', '#191970'), ('MintCream', '#F5FFFA'), ('MistyRose', '#FFE4E1'), ('Moccasin', '#FFE4B5'), ('NavajoWhite', '#FFDEAD'), ('Navy', '#000080'), ('OldLace', '#FDF5E6'), ('Olive', '#808000'), ('OliveDrab', '#6B8E23'), ('Orange', '#FFA500'), ('OrangeRed', '#FF4500'), ('Orchid', '#DA70D6'), ('PaleGoldenRod', '#EEE8AA'), ('PaleGreen', '#98FB98'), ('PaleTurquoise', '#AFEEEE'), ('PaleVioletRed', '#DB7093'), ('PapayaWhip', '#FFEFD5'), ('PeachPuff', '#FFDAB9'), ('Peru', '#CD853F'), ('Pink', '#FFC0CB'), ('Plum', '#DDA0DD'), ('PowderBlue', '#B0E0E6'), ('Purple', '#800080'), ('Red', '#FF0000'), ('RosyBrown', '#BC8F8F'), ('RoyalBlue', '#4169E1'), ('SaddleBrown', '#8B4513'), ('Salmon', '#FA8072'), ('SandyBrown', '#F4A460'), ('SeaGreen', '#2E8B57'), ('SeaShell', '#FFF5EE'), ('Sienna', '#A0522D'), ('Silver', '#C0C0C0'), ('SkyBlue', '#87CEEB'), ('SlateBlue', '#6A5ACD'), ('SlateGray', '#708090'), ('Snow', '#FFFAFA'), ('SpringGreen', '#00FF7F'), ('SteelBlue', '#4682B4'), ('Tan', '#D2B48C'), ('Teal', '#008080'), ('Thistle', '#D8BFD8'), ('Tomato', '#FF6347'), ('Turquoise', '#40E0D0'), ('Violet', '#EE82EE'), ('Wheat', '#F5DEB3'), ('White', '#FFFFFF'), ('WhiteSmoke', '#F5F5F5'), ('Yellow', '#FFFF00'), ('YellowGreen', '#9ACD3')))
A:faker.providers.color.__init__.color->('%x' % self.random_int(0, 255)).ljust(3, '0')
faker.providers.color.__init__.Provider(BaseProvider)
faker.providers.color.__init__.Provider.color_name(self)
faker.providers.color.__init__.Provider.hex_color(self)
faker.providers.color.__init__.Provider.rgb_color(self)
faker.providers.color.__init__.Provider.rgb_css_color(self)
faker.providers.color.__init__.Provider.safe_color_name(self)
faker.providers.color.__init__.Provider.safe_hex_color(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/color/ru_RU/__init__.py----------------------------------------
A:faker.providers.color.ru_RU.__init__.all_colors->OrderedDict((('Античный Белый', '#FAEBD7'), ('Аквамарин', '#7FFFD4'), ('Лазурный', '#F0FFFF'), ('Бежевый', '#F5F5DC'), ('Черный', '#000000'), ('Синий', '#0000FF'), ('Сине-фиолетовый', '#8A2BE2'), ('Коричневый', '#A52A2A'), ('Шоколадный', '#D2691E'), ('Коралловый', '#FF7F50'), ('Васильковый', '#6495ED'), ('Малиновый', '#DC143C'), ('Темно-синий', '#00008B'), ('Темно-голубой', '#008B8B'), ('Темно-серый', '#A9A9A9'), ('Темно-зеленый', '#006400'), ('Темный хаки', '#BDB76B'), ('Темно-оранжевый', '#FF8C00'), ('Темно-красный', '#8B0000'), ('Темно-бирюзовый', '#00CED1'), ('Темно-фиолетовый', '#9400D3'), ('Темно-розовый', '#FF1493'), ('Тусклый серый', '#696969'), ('Фуксия', '#FF00FF'), ('Золотой', '#FFD700'), ('Серый', '#808080'), ('Зеленый', '#008000'), ('Желто-зеленый', '#ADFF2F'), ('Ярко-розовый', '#FF69B4'), ('Индиго', '#4B0082'), ('Слоновая кость', '#FFFFF0'), ('Хаки', '#F0E68C'), ('Розовато-лавандовый', '#FFF0F5'), ('Светло-синий', '#ADD8E6'), ('Светло-голубой', '#E0FFFF'), ('Светло-серый', '#D3D3D3'), ('Светло-зеленый', '#90EE90'), ('Светло-розовый', '#FFB6C1'), ('Светло-голубой', '#87CEFA'), ('Светло-желтый', '#FFFFE0'), ('Каштановый', '#800000'), ('Оранжевый', '#FFA500'), ('Оранжево-красный', '#FF4500'), ('Бледно-зеленый', '#98FB98'), ('Бледно-Бирюзовый', '#AFEEEE'), ('Розовый', '#FFC0CB'), ('Сливовый', '#DDA0DD'), ('Пурпурный', '#800080'), ('Красный', '#FF0000'), ('Цвет морской волны', '#2E8B57'), ('Серебряный', '#C0C0C0'), ('Бирюзовый', '#40E0D0'), ('Фиолетовый', '#EE82EE'), ('Белый', '#FFFFFF'), ('Желтый', '#FFFF00'), ('Желто-зеленый', '#9ACD3')))
faker.providers.color.ru_RU.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/color/pt_BR/__init__.py----------------------------------------
A:faker.providers.color.pt_BR.__init__.all_colors->OrderedDict((('Açafrão', '#F4C430'), ('Água-marinha média', '#66CDAA'), ('Água-marinha', '#7FFFD4'), ('Água', '#00FFFF'), ('Alizarina', '#E32636'), ('Amarelo brasilis', '#ECDB00'), ('Amarelo claro', '#FFFFE0'), ('Amarelo creme', '#ECD690'), ('Amarelo escuro', '#F2B73F'), ('Amarelo esverdeado', '#9ACD32'), ('Amarelo esverdeado', '#ADFF2F'), ('Amarelo ouro claro', '#FAFAD2'), ('Amarelo queimado', '#EEAD2D'), ('Amarelo', '#FFFF00'), ('Âmbar', '#FFBF00'), ('Ameixa', '#DDA0DD'), ('Amêndoa', '#FFEBCD'), ('Ametista', '#9966CC'), ('Aspargo', '#7BA05B'), ('Azul aço claro', '#B0C4DE'), ('Azul aço', '#4682B4'), ('Azul alice', '#F0F8FF'), ('Azul ardósia claro', '#8470FF'), ('Azul ardósia escuro', '#483D8B'), ('Azul ardósia médio', '#7B68EE'), ('Azul ardósia', '#6A5ACD'), ('Azul areado', '#B8CAD4'), ('Azul brasilis brilhante', '#09ACDB'), ('Azul brasilis', '#00BDCE'), ('Azul cadete', '#5F9EA0'), ('Azul camarada', '#054F77'), ('Azul celeste brilhante', '#007FFF'), ('Azul celeste pernambucano', '#00A4CD'), ('Azul celeste', '#F0FFFF'), ('Azul céu claro', '#87CEFA'), ('Azul céu profundo', '#00BFFF'), ('Azul céu', '#87CEEB'), ('Azul claro', '#ADD8E6'), ('Azul cobalto', '#0047AB'), ('Azul escuro', '#00008B'), ('Azul flor de milho', '#6495ED'), ('Azul força aérea', '#5D8AA8'), ('Azul furtivo', '#1E90FF'), ('Azul manteiga', '#a6aa3e'), ('Azul marinho', '#120A8F'), ('Azul médio', '#0000CD'), ('Azul meia-noite', '#191970'), ('Azul petróleo', '#084D6E'), ('Azul pólvora', '#B0E0E6'), ('Azul real', '#0000DD'), ('Azul taparuere', '#248EFF'), ('Azul turquesa brilhante', '#00DDFF'), ('Azul turquesa', '#00CCEE'), ('Azul violeta', '#8A2BE2'), ('Azul', '#0000FF'), ('Bege', '#F5F5DC'), ('Bordô', '#800000'), ('Borgonha', '#900020'), ('Branco antigo', '#FAEBD7'), ('Branco fantasma', '#F8F8FF'), ('Branco floral', '#FFFAF0'), ('Branco fumaça', '#F5F5F5'), ('Branco navajo', '#FFDEAD'), ('Branco', '#FFFFFF'), ('Brasil', '#A7F432'), ('Bronze', '#CD7F32'), ('Caqui escuro', '#BDB76B'), ('Caqui', '#F0E68C'), ('Caramelo', '#8B5742'), ('Cardo', '#D8BFD8'), ('Carmesim', '#DC143C'), ('Carmim carnáceo', '#960018'), ('Carmim clássico', '#992244'), ('Carmim', '#712F26'), ('Castanho avermelhado', '#8B0000'), ('Castanho claro', '#D2B48C'), ('Cenoura', '#ED9121'), ('Cereja Hollywood', '#F400A1'), ('Cereja', '#DE3163'), ('Chocolate', '#D2691E'), ('Ciano claro', '#E0FFFF'), ('Ciano escuro', '#008B8B'), ('Ciano', '#00FFFF'), ('Cinza ardósia claro', '#778899'), ('Cinza ardósia escuro', '#2F4F4F'), ('Cinza ardósia', '#708090'), ('Cinza claro', '#D3D3D3'), ('Cinza escuro', '#A9A9A9'), ('Cinza fosco', '#696969'), ('Cinza médio', '#DCDCDC'), ('Cinza', '#808080'), ('Cobre', '#B87333'), ('Concha', '#FFF5EE'), ('Coral claro', '#F08080'), ('Coral', '#FF7F50'), ('Couro', '#F0DC82'), ('Creme de marisco', '#FFE4C4'), ('Creme de menta', '#F5FFFA'), ('Creme', '#FFFDD0'), ('Dourado escuro', '#B8860B'), ('Dourado pálido', '#EEE8AA'), ('Dourado', '#DAA520'), ('Ébano', '#555D50'), ('Eminência', '#6C3082'), ('Escarlate', '#FF2400'), ('Esmeralda', '#50C878'), ('Eucalipto', '#44D7A8'), ('Fandango', '#B53389'), ('Feldspato', '#FDD5B1'), ('Ferrugem', '#B7410E'), ('Flerte', '#A2006D'), ('Fúcsia', '#FF00FF'), ('Fuligem', '#3D2B1F'), ('Glicínia', '#C9A0DC'), ('Glitter', '#E6E8FA'), ('Grená', '#831D1C'), ('Heliotrópio', '#DF73FF'), ('Herbal', '#2E8B57'), ('Independência', '#4C516D'), ('Índigo', '#4B0082'), ('Iris', '#5A4FCF'), ('Jade', '#00A86B'), ('Jambo', '#FF4500'), ('Jasmine', '#F8DE7E'), ('Kiwi', '#8EE53F'), ('Laranja claro', '#FFB84D'), ('Laranja escuro', '#FF8C00'), ('Laranja', '#FFA500'), ('Lavanda avermelhada', '#FFF0F5'), ('Lavanda', '#E6E6FA'), ('Lilás', '#C8A2C8'), ('Lima', '#FDE910'), ('Limão', '#00FF00'), ('Linho', '#FAF0E6'), ('Madeira', '#DEB887'), ('Magenta escuro', '#8B008B'), ('Magenta', '#FF00FF'), ('Malva', '#E0B0FF'), ('Mamão batido', '#FFEFD5'), ('Maná', '#F0FFF0'), ('Marfim', '#FFFFF0'), ('Marrom amarelado', '#F4A460'), ('Marrom claro', '#A52A2A'), ('Marrom rosado', '#BC8F8F'), ('Marrom sela', '#8B4513'), ('Marrom', '#964b00'), ('Milho Claro', '#FFF8DC'), ('Milho', '#FBEC5D'), ('Mocassim', '#FFE4B5'), ('Mostarda', '#FFDB58'), ('Naval', '#000080'), ('Neve', '#FFFAFA'), ('Nyanza', '#E9FFDB'), ('Ocre', '#CC7722'), ('Oliva escura', '#556B2F'), ('Oliva parda', '#6B8E23'), ('Oliva', '#808000'), ('Orquídea escura', '#9932CC'), ('Orquídea média', '#BA55D3'), ('Orquídea', '#DA70D6'), ('Ouro', '#FFD700'), ('Pardo escuro', '#CC6600'), ('Pardo', '#CD853F'), ('Pêssego', '#FFDAB9'), ('Prata', '#C0C0C0'), ('Preto', '#000000'), ('Púrpura média', '#9370DB'), ('Púrpura', '#800080'), ('Quantum', '#111111'), ('Quartzo', '#51484F'), ('Renda antiga', '#FDF5E6'), ('Rosa amoroso', '#CD69CD'), ('Rosa brilhante', '#FF007F'), ('Rosa Choque', '#FC0FC0'), ('Rosa claro', '#FFB6C1'), ('Rosa danação', '#DA69A1'), ('Rosa embaçado', '#FFE4E1'), ('Rosa forte', '#FF69B4'), ('Rosa profundo', '#FF1493'), ('Rosa', '#FFCBDB'), ('Roxo brasilis', '#8A008A'), ('Roxo', '#993399'), ('Rútilo', '#6D351A'), ('Salmão claro', '#FFA07A'), ('Salmão escuro', '#E9967A'), ('Salmão', '#FA7F72'), ('Sépia', '#705714'), ('Siena', '#FF8247'), ('Tangerina', '#F28500'), ('Terracota', '#E2725B'), ('Tijolo refratário', '#B22222'), ('Tomate', '#FF6347'), ('Triássico', '#FF2401'), ('Trigo', '#F5DEB3'), ('Turquesa escura', '#00CED1'), ('Turquesa média', '#48D1CC'), ('Turquesa pálida', '#AFEEEE'), ('Turquesa', '#40E0D0'), ('Urucum', '#EC2300'), ('Verde amarelado', '#9ACD32'), ('Verde claro', '#90EE90'), ('Verde escuro', '#006400'), ('Verde espectro', '#00FF00'), ('Verde floresta', '#228B22'), ('Verde fluorescente', '#CCFF33'), ('Verde grama', '#7CFC00'), ('Verde lima', '#32CD32'), ('Verde mar claro', '#20B2AA'), ('Verde mar escuro', '#8FBC8F'), ('Verde mar médio', '#3CB371'), ('Verde militar', '#78866B'), ('Verde pálido', '#98FB98'), ('Verde Paris', '#7FFF00'), ('Verde primavera médio', '#00FA9A'), ('Verde primavera', '#00FF7F'), ('Verde-azulado', '#008080'), ('Verde', '#008000'), ('Vermelho enegrecido', '#550000'), ('Vermelho escuro', '#8B0000'), ('Vermelho indiano', '#CD5C5C'), ('Vermelho violeta médio', '#C71585'), ('Vermelho violeta pálido', '#DB7093'), ('Vermelho violeta', '#D02090'), ('Vermelho', '#FF0000'), ('Violeta claro', '#F8CBF8'), ('Violeta escuro', '#9400D3'), ('Violeta', '#EE82EE'), ('Zinco', '#E2DDF0')))
faker.providers.color.pt_BR.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/color/hr_HR/__init__.py----------------------------------------
A:faker.providers.color.hr_HR.__init__.all_colors->OrderedDict((('Akvamarin', '#7FFFD4'), ('Antikna bijela', '#FAEBD7'), ('Azurna', '#F0FFFF'), ('Bež', '#F5F5DC'), ('Bijela', '#FFFFFF'), ('Bijelo bilje', '#FFFAF0'), ('Bjelokost', '#FFFFF0'), ('Blijeda kudelja', '#EEE8AA'), ('Blijedi badem', '#FFEBCD'), ('Blijedoljubičasta', '#DB7093'), ('Blijedotirkizna', '#AFEEEE'), ('Blijedozelena', '#98FB98'), ('Breskva', '#FFDAB9'), ('Brončana', '#D2B48C'), ('Čeličnoplava', '#4682B4'), ('Čičak', '#D8BFD8'), ('Cijan', '#00FFFF'), ('Čipka', '#FDF5E6'), ('Čokoladna', '#D2691E'), ('Crna', '#000000'), ('Crvena', '#FF0000'), ('Dim', '#F5F5F5'), ('Dodger plava', '#1E90FF'), ('Duboko ružičasta', '#FF1493'), ('Fuksija', '#FF00FF'), ('Gainsboro', '#DCDCDC'), ('Grimizna', '#DC143C'), ('Indigo', '#4B0082'), ('Jelenska koža', '#FFE4B5'), ('Kadetski plava', '#5F9EA0'), ('Kestenjasta', '#800000'), ('Koraljna', '#FF7F50'), ('Kraljevski plava', '#4169E1'), ('Kudelja', '#DAA520'), ('Lan', '#FAF0E6'), ('Lavanda', '#E6E6FA'), ('Limun', '#FFFACD'), ('Lipa', '#00FF00'), ('Ljubičasta', '#EE82EE'), ('Magenta', '#FF00FF'), ('Maslinasta', '#808000'), ('Medljika', '#F0FFF0'), ('Menta', '#F5FFFA'), ('Modro nebo', '#00BFFF'), ('Modrozelena', '#008080'), ('Mornarska', '#000080'), ('Morskozelena', '#2E8B57'), ('Mračno siva', '#696969'), ('Narančasta', '#FFA500'), ('Narančastocrvena', '#FF4500'), ('Narančastoružičasta', '#FA8072'), ('Noćno plava', '#191970'), ('Orhideja', '#DA70D6'), ('Papaja', '#FFEFD5'), ('Peru', '#CD853F'), ('Plava', '#0000FF'), ('Plavi prah', '#B0E0E6'), ('Plavi škriljevac', '#6A5ACD'), ('Plavkasta', '#F0F8FF'), ('Plavo cvijeće', '#6495ED'), ('Plavo nebo', '#87CEEB'), ('Plavoljubičasta', '#8A2BE2'), ('Porculanska', '#FFE4C4'), ('Prljavomaslinasta', '#6B8E23'), ('Proljetnozelena', '#00FF7F'), ('Prozirno bijela', '#F8F8FF'), ('Pšenica', '#F5DEB3'), ('Purpurna', '#800080'), ('Rajčica', '#FF6347'), ('Rumena lavanda', '#FFF0F5'), ('Ružičasta', '#FFC0CB'), ('Ružičastosmeđa', '#BC8F8F'), ('Siva', '#808080'), ('Sivi škriljevac', '#708090'), ('Sivožuta', '#F0E68C'), ('Smeđa', '#A52A2A'), ('Smeđe sedlo', '#8B4513'), ('Smeđi pijesak', '#F4A460'), ('Smeđkasto bijela', '#FFDEAD'), ('Snijeg', '#FFFAFA'), ('Srebrna', '#C0C0C0'), ('Srednja akvamarin', '#66CDAA'), ('Srednja crvenoljubičasta', '#C71585'), ('Srednja morskozelena', '#3CB371'), ('Srednja orhideja', '#BA55D3'), ('Srednja plava', '#0000CD'), ('Srednja proljetnozelena', '#00FA9A'), ('Srednja purpurna', '#9370DB'), ('Srednja tirkizna', '#48D1CC'), ('Srednje plavi škriljevac', '#7B68EE'), ('Svijetla čeličnoplava', '#B0C4DE'), ('Svijetla narančastoružičasta', '#FFA07A'), ('Svijetli cijan', '#E0FFFF'), ('Svijetlo drvo', '#DEB887'), ('Svijetlokoraljna', '#F08080'), ('Svijetlomorskozelena', '#20B2AA'), ('Svijetloplava', '#ADD8E6'), ('Svijetloružičasta', '#FFB6C1'), ('Svijetlosiva', '#D3D3D3'), ('Svijetlosivi škriljevac', '#778899'), ('Svijetlozelena', '#90EE90'), ('Svijetložuta kudelja', '#FAFAD2'), ('Svijetložuta', '#FFFFE0'), ('Šamotna opeka', '#B22222'), ('Školjka', '#FFF5EE'), ('Šljiva', '#DDA0DD'), ('Tamna kudelja', '#B8860B'), ('Tamna magenta', '#8B008B'), ('Tamna narančastoružičasta', '#E9967A'), ('Tamna orhideja', '#9932CC'), ('Tamna sivožuta', '#BDB76B'), ('Tamni cijan', '#008B8B'), ('Tamno zelena', '#006400'), ('Tamnocrvena', '#8B0000'), ('Tamnoljubičasta', '#9400D3'), ('Tamnomaslinasta', '#556B2F'), ('Tamnonarančasta', '#FF8C00'), ('Tamnoplava', '#00008B'), ('Tamnoplavi škriljevac', '#483D8B'), ('Tamnosiva', '#A9A9A9'), ('Tamnosivi škriljevac', '#2F4F4F'), ('Tamnotirkizna', '#00CED1'), ('Tamnozelena', '#8FBC8F'), ('Tirkizna', '#40E0D0'), ('Topla ružičasta', '#FF69B4'), ('Vedro nebo', '#87CEFA'), ('Voda', '#00FFFF'), ('Zelena lipa', '#32CD32'), ('Zelena šuma', '#228B22'), ('Zelena tratina', '#7CFC00'), ('Zelena', '#008000'), ('Zeleni liker', '#7FFF00'), ('Zelenožuta', '#ADFF2F'), ('Zlatna', '#FFD700'), ('Žućkastocrvena zemlja', '#CD5C5C'), ('Žućkastoružičasta', '#FFE4E1'), ('Žućkastosmeđa glina', '#A0522D'), ('Žuta svila', '#FFF8DC'), ('Žuta', '#FFFF00'), ('Žutozelena', '#9ACD3')))
faker.providers.color.hr_HR.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/color/en_US/__init__.py----------------------------------------
faker.providers.color.en_US.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/color/uk_UA/__init__.py----------------------------------------
A:faker.providers.color.uk_UA.__init__.all_colors->OrderedDict((('Абрикосовий', '#FBCEB1'), ('Аквамариновий', '#7FFFD4'), ('Алізариновий червоний', '#E32636'), ('Амарантовий', '#E52B50'), ('Амарантово-рожевий', '#F19CBB'), ('Аметистовий', '#9966CC'), ('Андроїдний зелений', '#A4C639'), ('Арсеновий', '#3B444B'), ('Атомний мандаріновий', '#FF9966'), ('Багряний', '#FF2400'), ('Баклажановий', '#990066'), ('Барвінковий', '#CCCCFF'), ('Бежевий', '#F5F5DC'), ('Берлінська лазур', '#003153'), ('Блаватний', '#6495ED'), ('Блакитний', '#AFEEEE'), ('Блакитний Брандейса', '#0070FF'), ('Блакитно-зелений', '#00DDDD'), ('Блакитно-фіолетовий', '#8A2BE2'), ('Блідий рожево-ліловий', '#996666'), ('Блідо-брунатний', '#987654'), ('Блідо-волошковий', '#ABCDEF'), ('Блідо-карміновий', '#AF4035'), ('Блідо-каштановий', '#DDADAF'), ('Блідо-пурпуровий', '#F984E5'), ('Блідо-пісочний', '#DABDAB'), ('Блідо-рожевий', '#FADADD'), ('Болотний', '#ACB78E'), ('Бронзовий', '#CD7F32'), ('Брунатний', '#964B00'), ('Брунато-малиновий', '#800000'), ('Будяковий', '#D8BFD8'), ('Бузковий', '#C8A2C8'), ('Бургундський', '#900020'), ('Бурий', '#755A57'), ('Бурштиновий', '#FFBF00'), ('Білий', '#FFFFFF'), ('Білий навахо', '#FFDEAD'), ('Бірюзовий', '#30D5C8'), ('Бістр', '#3D2B1F'), ('Вода пляжа Бонді', '#0095B6'), ('Вохра', '#CC7722'), ('Відбірний жовтий', '#FFBA00'), ('Візантійський', '#702963'), ('Гарбуз', '#FF7518'), ('Гарячо-рожевий', '#FC0FC0'), ('Геліотроп', '#DF73FF'), ('Глибокий фіолетовий', '#423189'), ('Глицінія', '#C9A0DC'), ('Грушевий', '#D1E231'), ('Гумігут', '#E49B0F'), ('Гірчичний', '#FFDB58'), ('Дерева', '#79443B'), ('Джинсовий', '#1560BD'), ('Діамантово-рожевий', '#FF55A3'), ('Жовтий', '#FFFF00'), ('Жовто-зелений', '#ADFF2F'), ('Жовто-персиковий', '#FADFAD'), ('Захисний синій', '#1E90FF'), ('Зелена весна', '#00FF7F'), ('Зелена мʼята', '#98FF98'), ('Зелена сосна', '#01796F'), ('Зелене море', '#2E8B57'), ('Зелений', '#00FF00'), ('Зелений армійський', '#4B5320'), ('Зелений мох', '#ADDFAD'), ('Зелений папороть', '#4F7942'), ('Зелений чай', '#D0F0C0'), ('Зелено-сірий чай', '#CADABA'), ('Зеленувато-блакитний', '#008080'), ('Золотаво-березовий', '#DAA520'), ('Золотий', '#FFD700'), ('Золотисто-каштановий', '#6D351A'), ('Індиго', '#4B0082'), ('Іржавий', '#B7410E'), ('Кардинал (колір)', '#C41E3A'), ('Карміновий', '#960018'), ('Каштановий', '#CD5C5C'), ('Кобальтовий', '#0047AB'), ('Колір жовтого шкільного автобуса', '#FFD800'), ('Колір засмаги', '#D2B48C'), ('Колір морської піни', '#FFF5EE'), ('Колір морської хвилі', '#00FFFF'), ('Кораловий', '#FF7F50'), ('Королівський синій', '#4169E1'), ('Кремовий', '#FFFDD0'), ('Кукурудзяний', '#FBEC5D'), ('Кіновар', '#FF4D00'), ('Лавандний', '#E6E6FA'), ('Лазуровий', '#007BA7'), ('Лазурово-синій', '#2A52BE'), ('Лайм', '#CCFF00'), ('Латунний', '#B5A642'), ('Лимонний', '#FDE910'), ('Лимонно-кремовий', '#FFFACD'), ('Лляний', '#EEDC82'), ('Лляний', '#FAF0E6'), ('Лососевий', '#FF8C69'), ('Ліловий', '#DB7093'), ('Малахітовий', '#0BDA51'), ('Малиновий', '#DC143C'), ('Мандариновий', '#FFCC00'), ('Мисливський', '#004225'), ('Морквяний', '#ED9121'), ('Мідний', '#B87333'), ('Міжнародний помаранчевий', '#FF4F00'), ('Нефритовий', '#00A86B'), ('Ніжно-блакитний', '#E0FFFF'), ('Ніжно-оливковий', '#6B8E23'), ('Ніжно-рожевий', '#FB607F'), ('Оливковий', '#808000'), ('Опівнічно-синій', '#003366'), ('Орхідея', '#DA70D6'), ('Палена сіена', '#E97451'), ('Палений оранжевий', '#CC5500'), ('Панг', '#C7FCEC'), ('Паросток папаї', '#FFEFD5'), ('Пастельно-зелений', '#77DD77'), ('Пастельно-рожевий', '#FFD1DC'), ('Персиковий', '#FFE5B4'), ('Перський синій', '#6600FF'), ('Помаранчевий', '#FFA500'), ('Помаранчево-персиковий', '#FFCC99'), ('Помаранчево-рожевий', '#FF9966'), ('Пурпурний', '#FF00FF'), ('Пурпуровий', '#660099'), ('Пшеничний', '#F5DEB3'), ('Пісочний колір', '#F4A460'), ('Рожевий', '#FFC0CB'), ('Рожевий Маунтбеттена', '#997A8D'), ('Рожево-лавандний', '#FFF0F5'), ('Рожево-ліловий', '#993366'), ('Салатовий', '#7FFF00'), ('Сангрія', '#92000A'), ('Сапфіровий', '#082567'), ('Світло-синій', '#007DFF'), ('Сепія', '#704214'), ('Сиваво-зелений', '#ACE1AF'), ('Сигнально-помаранчевий', '#FF9900'), ('Синя пил', '#003399'), ('Синя сталь', '#4682B4'), ('Сині яйця малинівки', '#00CCCC'), ('Синій', '#0000FF'), ('Синій (RYB)', '#0247FE'), ('Синій (пігмент)', '#333399'), ('Синій ВПС', '#5D8AA8'), ('Синій Клейна', '#3A75C4'), ('Сливовий', '#660066'), ('Смарагдовий', '#50C878'), ('Спаржевий', '#7BA05B'), ('Срібний', '#C0C0C0'), ('Старе золото', '#CFB53B'), ('Сіра спаржа', '#465945'), ('Сірий', '#808080'), ('Сірий шифер', '#708090'), ('Темний весняно-зелений', '#177245'), ('Темний жовто-брунатний', '#918151'), ('Темний зелений чай', '#BADBAD'), ('Темний пастельно-зелений', '#03C03C'), ('Темний хакі', '#BDB76B'), ('Темний індиго', '#310062'), ('Темно-аспідний сірий', '#2F4F4F'), ('Темно-брунатний', '#654321'), ('Темно-бірюзовий', '#116062'), ('Темно-зелений', '#013220'), ('Темно-зелений хакі', '#78866B'), ('Темно-золотий', '#B8860B'), ('Темно-карміновий', '#560319'), ('Темно-каштановий', '#986960'), ('Темно-кораловий', '#CD5B45'), ('Темно-лазурний', '#08457E'), ('Темно-лососевий', '#E9967A'), ('Темно-мандариновий', '#FFA812'), ('Темно-оливковий', '#556832'), ('Темно-персиковий', '#FFDAB9'), ('Темно-рожевий', '#E75480'), ('Темно-синій', '#000080'), ('Ультрамариновий', '#120A8F'), ('Умбра', '#734A12'), ('Умбра палена', '#8A3324'), ('Фуксія', '#FF00FF'), ('Фіолетовий', '#8B00FF'), ('Фіолетово-баклажановий', '#991199'), ('Фіолетово-червоний', '#C71585'), ('Хакі', '#C3B091'), ('Цинамоновий', '#7B3F00'), ('Циннвальдит', '#EBC2AF'), ('Ціан (колір)', '#00FFFF'), ('Ціано-блакитний', '#F0F8FF'), ('Червоний', '#FF0000'), ('Червоно-буро-помаранчевий', '#CD5700'), ('Червоновато-брунатний', '#CC8899'), ('Чорний', '#000000'), ('Шафрановий', '#F4C430'), ('Шкіра буйвола', '#F0DC82'), ('Шоколадний', '#D2691E'), ('Яскраво-бурштиновий', '#FF7E00'), ('Яскраво-бірюзовий', '#08E8DE'), ('Яскраво-зелений', '#66FF00'), ('Яскраво-зелений', '#40826D'), ('Яскраво-рожевий', '#FF007F'), ('Яскраво-фіолетовий', '#CD00CD'), ('Ясно-брунатний', '#CD853F'), ('Ясно-вишневий', '#DE3163'), ('Ясно-лазуровий', '#007FFF'), ('Ясно-лазуровий (веб)', '#F0FFFF')))
faker.providers.color.uk_UA.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/color/fr_FR/__init__.py----------------------------------------
A:faker.providers.color.fr_FR.__init__.all_colors->OrderedDict((('Noir', '#000000'), ('Gris mat', '#696969'), ('Gris', '#808080'), ('Gris foncé (Acier)', '#A9A9A9'), ('Gris argent', '#C0C0C0'), ('Gris clair', '#D3D3D3'), ('Gris gainsboro (Etain)', '#DCDCDC'), ('Blanc fumée', '#F5F5F5'), ('Blanc spectral', '#F8F8FF'), ('Blanc', '#FFFFFF'), ('Ivoire', '#FFFFF0'), ('Blanc floral', '#FFFAF0'), ('Blanc coquillage', '#FFF5EE'), ('Blanc lavande', '#FFF0F5'), ('Blanc dentelle', '#FDF5E6'), ('Blanc Lin', '#FAF0E6'), ('Rose brumeux', '#FFE4E1'), ('Rose', '#FFC0CB'), ('Rose clair', '#FFB6C1'), ('Rose Passion', '#FF69B4'), ('Rose profond', '#FF1493'), ('Violet pâle', '#DB7093'), ('Fushia (Magenta)', '#FF00FF'), ('Violet moyen', '#C71585'), ('Violet chardon', '#D8BFD8'), ('Prune', '#DDA0DD'), ('Violet', '#EE82EE'), ('Violet orchidée', '#DA70D6'), ('Violet orchidée moyen', '#BA55D3'), ('Violet orchidée foncé', '#9932CC'), (u'Violet foncé', '#9400D3'), ('Bleu violet', '#8A2BE2'), ('Indigo', '#4B0082'), ('Bleu ardoise moyen', '#7B68EE'), ('Bleu ardoise', '#6A5ACD'), ('Bleu ardoise foncé', '#483D8B'), ('Pourpre moyen', '#9370DB'), ('Magenta foncé', '#8B008B'), ('Pourpre', '#800080'), ('Brun rosé', '#BC8F8F'), ('Corail clair', '#F08080'), ('Corail', '#FF7F50'), ('Tomate', '#FF6347'), ('Orangé', '#FF4500'), ('Rouge', '#FF0000'), ('Rouge cramoisi', '#DC143C'), ('Saumon clair', '#FFA07A'), ('Saumon Foncé', '#E9967A'), ('Saumon', '#FA8072'), ('Rouge Indien', '#CD5C5C'), ('Rouge brique', '#B22222'), ('Brun', '#A52A2A'), ('Rouge foncé', '#8B0000'), ('Bordeaux', '#800000'), ('Beige', '#F5F5DC'), ('Beige antique', '#FAEBD7'), ('Beige papaye', '#FFEFD5'), ('Amande', '#FFEBCD'), ('Bisque', '#ffe4c4'), ('Beige pêche', '#FFDAB9'), ('Beige mocassin', '#FFE4B5'), ('Jaune blanc navaro', '#FFDEAD'), ('Jaune blé', '#F5DEB3'), ('Brun bois rustique', '#DEB887'), ('Brun roux', '#D2B48C'), ('Brun sable', '#F4A460'), ('Orange', '#FFA500'), ('Orange foncé', '#FF8C00'), ('Chocolat', '#D2691E'), ('Brun pérou', '#CD853F'), ('Terre de Sienne', '#A0522D'), ('Brun cuir', '#8B4513'), ('Jaune clair', '#FFFFE0'), ('Jaune maïs doux', '#FFF8DC'), ('Jaune doré clair', '#FAFAD2'), ('Beige citron soie', '#FFFACD'), ('Jaune doré pâle', '#EEE8AA'), ('Brun kaki', '#F0E68C'), ('Jaune', '#FFFF00'), ('Or', '#FFD700'), ('Jaune doré', '#DAA520'), ('Jaune doré foncé', '#B8860B'), ('Brun kaki foncé', '#BDB76B'), ('Jaune vert', '#9ACD32'), ('Kaki', '#6B8E23'), ('Olive', '#808000'), ('Vert olive foncé', '#556B2F'), ('Vert jaune', '#ADFF2F'), ('Chartreuse', '#7FFF00'), ('Vert prairie', '#7CFC00'), ('Citron vert', '#00FF00'), ('Citron vert foncé', '#32CD32'), ('Blanc menthe', '#F5FFFA'), ('Miellat', '#F0FFF0'), ('Vert pâle', '#98FB98'), ('Vert clair', '#90EE90'), ('Vert printemps', '#00FF7F'), ('Vert printemps moyen', '#00FA9A'), ('Vert forêt', '#228B22'), ('Vert', '#008000'), ('Vert foncé', '#006400'), ('Vert océan foncé', '#8FBC8F'), ('Vert océan moyen', '#3CB371'), ('Vert océan', '#2E8B57'), ('Gris ardoise clair', '#778899'), ('Gris ardoise', '#708090'), ('Gris ardoise foncé', '#2F4F4F'), ('Bleu alice', '#F0F8FF'), ('Bleu azur', '#F0FFFF'), ('Cyan clair', '#E0FFFF'), ('Azurin', '#AFEEEE'), ('Aigue-marine', '#7FFFD4'), ('Aigue-marine moyen', '#66CDAA'), ('Cyan', '#00FFFF'), ('Turquoise', '#40E0D0'), ('Turquoise moyen', '#48D1CC'), ('Turquoise foncé', '#00CED1'), ('Vert marin clair', '#20B2AA'), ('Cyan foncé', '#008B8B'), ('Vert sarcelle', '#008080'), ('Bleu pétrole', '#5F9EA0'), ('Bleu poudre', '#B0E0E6'), ('Bleu clair', '#ADD8E6'), ('Bleu azur clair', '#87CEFA'), ('Bleu azur', '#87CEEB'), ('Bleu azur profond', '#00BFFF'), ('Bleu toile', '#1E90FF'), ('Bleu lavande', '#E6E6FA'), ('Bleu acier clair', '#B0C4DE'), ('Bleuet', '#6495ED'), ('Bleu acier', '#4682B4'), ('Bleu royal', '#4169E1'), ('Bleu', '#0000FF'), ('Bleu moyen', '#0000CD'), ('Bleu foncé', '#00008B'), ('Bleu marin', '#000080'), ('Bleu de minuit', '#191970')))
faker.providers.color.fr_FR.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/__init__.py----------------------------------------
faker.providers.phone_number.__init__.Provider(BaseProvider)
faker.providers.phone_number.__init__.Provider.phone_number(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/it_IT/__init__.py----------------------------------------
faker.providers.phone_number.it_IT.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/ru_RU/__init__.py----------------------------------------
faker.providers.phone_number.ru_RU.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/en_AU/__init__.py----------------------------------------
A:faker.providers.phone_number.en_AU.__init__.pattern->self.random_element(self.formats)
faker.providers.phone_number.en_AU.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.en_AU.__init__.Provider.area_code(self)
faker.providers.phone_number.en_AU.__init__.Provider.phone_number(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/sk_SK/__init__.py----------------------------------------
faker.providers.phone_number.sk_SK.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/zh_TW/__init__.py----------------------------------------
faker.providers.phone_number.zh_TW.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/pt_PT/__init__.py----------------------------------------
faker.providers.phone_number.pt_PT.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/tr_TR/__init__.py----------------------------------------
faker.providers.phone_number.tr_TR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/fr_CH/__init__.py----------------------------------------
faker.providers.phone_number.fr_CH.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/sl_SI/__init__.py----------------------------------------
faker.providers.phone_number.sl_SI.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/cs_CZ/__init__.py----------------------------------------
faker.providers.phone_number.cs_CZ.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/pl_PL/__init__.py----------------------------------------
faker.providers.phone_number.pl_PL.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/lv_LV/__init__.py----------------------------------------
faker.providers.phone_number.lv_LV.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/ne_NP/__init__.py----------------------------------------
faker.providers.phone_number.ne_NP.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/zh_CN/__init__.py----------------------------------------
faker.providers.phone_number.zh_CN.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.zh_CN.__init__.Provider.phonenumber_prefix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/es_MX/__init__.py----------------------------------------
faker.providers.phone_number.es_MX.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/pt_BR/__init__.py----------------------------------------
faker.providers.phone_number.pt_BR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/nl_NL/__init__.py----------------------------------------
faker.providers.phone_number.nl_NL.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/tw_GH/__init__.py----------------------------------------
faker.providers.phone_number.tw_GH.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/lt_LT/__init__.py----------------------------------------
faker.providers.phone_number.lt_LT.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/bg_BG/__init__.py----------------------------------------
faker.providers.phone_number.bg_BG.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/no_NO/__init__.py----------------------------------------
faker.providers.phone_number.no_NO.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/hi_IN/__init__.py----------------------------------------
faker.providers.phone_number.hi_IN.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/bs_BA/__init__.py----------------------------------------
faker.providers.phone_number.bs_BA.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/hu_HU/__init__.py----------------------------------------
faker.providers.phone_number.hu_HU.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/hr_HR/__init__.py----------------------------------------
faker.providers.phone_number.hr_HR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/de_DE/__init__.py----------------------------------------
faker.providers.phone_number.de_DE.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/en_US/__init__.py----------------------------------------
faker.providers.phone_number.en_US.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/dk_DK/__init__.py----------------------------------------
faker.providers.phone_number.dk_DK.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/en_CA/__init__.py----------------------------------------
faker.providers.phone_number.en_CA.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/uk_UA/__init__.py----------------------------------------
faker.providers.phone_number.uk_UA.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/ko_KR/__init__.py----------------------------------------
faker.providers.phone_number.ko_KR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/es_ES/__init__.py----------------------------------------
faker.providers.phone_number.es_ES.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/sv_SE/__init__.py----------------------------------------
faker.providers.phone_number.sv_SE.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/el_GR/__init__.py----------------------------------------
faker.providers.phone_number.el_GR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/fa_IR/__init__.py----------------------------------------
faker.providers.phone_number.fa_IR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/fi_FI/__init__.py----------------------------------------
faker.providers.phone_number.fi_FI.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/fr_FR/__init__.py----------------------------------------
faker.providers.phone_number.fr_FR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/en_GB/__init__.py----------------------------------------
faker.providers.phone_number.en_GB.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/ja_JP/__init__.py----------------------------------------
faker.providers.phone_number.ja_JP.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/phone_number/nl_BE/__init__.py----------------------------------------
faker.providers.phone_number.nl_BE.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/user_agent/__init__.py----------------------------------------
A:faker.providers.user_agent.__init__.name->self.random_element(self.user_agents)
A:faker.providers.user_agent.__init__.saf->'{0}.{1}.{2}'.format(self.generator.random.randint(531, 535), self.generator.random.randint(1, 50), self.generator.random.randint(1, 7))
A:faker.providers.user_agent.__init__.ver->'{0}.0.{1}'.format(self.generator.random.randint(4, 5), self.generator.random.randint(1, 5))
A:faker.providers.user_agent.__init__.locale->self.generator.locale().replace('_', '-')
A:faker.providers.user_agent.__init__.platform->'({0}; {1}) Presto/2.9.{2} Version/{3}.00'.format(self.linux_platform_token() if self.generator.random.getrandbits(1) else self.windows_platform_token(), self.generator.locale().replace('_', '-'), self.generator.random.randint(160, 190), self.generator.random.randint(10, 12))
faker.providers.user_agent.__init__.Provider(BaseProvider)
faker.providers.user_agent.__init__.Provider.chrome(self)
faker.providers.user_agent.__init__.Provider.firefox(self)
faker.providers.user_agent.__init__.Provider.internet_explorer(self)
faker.providers.user_agent.__init__.Provider.linux_platform_token(self)
faker.providers.user_agent.__init__.Provider.linux_processor(self)
faker.providers.user_agent.__init__.Provider.mac_platform_token(self)
faker.providers.user_agent.__init__.Provider.mac_processor(self)
faker.providers.user_agent.__init__.Provider.opera(self)
faker.providers.user_agent.__init__.Provider.safari(self)
faker.providers.user_agent.__init__.Provider.user_agent(self)
faker.providers.user_agent.__init__.Provider.windows_platform_token(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/user_agent/en_US/__init__.py----------------------------------------
faker.providers.user_agent.en_US.__init__.Provider(UserAgentProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/__init__.py----------------------------------------
A:faker.providers.address.__init__.pattern->self.random_element(self.address_formats)
A:faker.providers.address.__init__.center->float(center)
A:faker.providers.address.__init__.radius->float(radius)
A:faker.providers.address.__init__.geo->self.generator.random.uniform(center - radius, center + radius)
faker.providers.address.__init__.Provider(BaseProvider)
faker.providers.address.__init__.Provider.address(self)
faker.providers.address.__init__.Provider.building_number(self)
faker.providers.address.__init__.Provider.city(self)
faker.providers.address.__init__.Provider.city_suffix(self)
faker.providers.address.__init__.Provider.country(self)
faker.providers.address.__init__.Provider.country_code(self)
faker.providers.address.__init__.Provider.geo_coordinate(self,center=None,radius=0.001)
faker.providers.address.__init__.Provider.latitude(self)
faker.providers.address.__init__.Provider.longitude(self)
faker.providers.address.__init__.Provider.postcode(self)
faker.providers.address.__init__.Provider.street_address(self)
faker.providers.address.__init__.Provider.street_name(self)
faker.providers.address.__init__.Provider.street_suffix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/it_IT/__init__.py----------------------------------------
faker.providers.address.it_IT.__init__.Provider(AddressProvider)
faker.providers.address.it_IT.__init__.Provider.city_prefix(self)
faker.providers.address.it_IT.__init__.Provider.secondary_address(self)
faker.providers.address.it_IT.__init__.Provider.state(self)
faker.providers.address.it_IT.__init__.Provider.state_abbr(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/ka_GE/__init__.py----------------------------------------
faker.providers.address.ka_GE.__init__.Provider(AddressProvider)
faker.providers.address.ka_GE.__init__.Provider.city_name(self)
faker.providers.address.ka_GE.__init__.Provider.street_title(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/ru_RU/__init__.py----------------------------------------
faker.providers.address.ru_RU.__init__.Provider(AddressProvider)
faker.providers.address.ru_RU.__init__.Provider.city_name(self)
faker.providers.address.ru_RU.__init__.Provider.city_prefix(self)
faker.providers.address.ru_RU.__init__.Provider.street_title(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/en_AU/__init__.py----------------------------------------
faker.providers.address.en_AU.__init__.Provider(AddressProvider)
faker.providers.address.en_AU.__init__.Provider.city_prefix(self)
faker.providers.address.en_AU.__init__.Provider.secondary_address(self)
faker.providers.address.en_AU.__init__.Provider.state(self)
faker.providers.address.en_AU.__init__.Provider.state_abbr(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/sk_SK/__init__.py----------------------------------------
faker.providers.address.sk_SK.__init__.Provider(AddressProvider)
faker.providers.address.sk_SK.__init__.Provider.city_name(self)
faker.providers.address.sk_SK.__init__.Provider.state(self)
faker.providers.address.sk_SK.__init__.Provider.street_name(self)
faker.providers.address.sk_SK.__init__.Provider.street_suffix_long(self)
faker.providers.address.sk_SK.__init__.Provider.street_suffix_short(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/zh_TW/__init__.py----------------------------------------
faker.providers.address.zh_TW.__init__.Provider(AddressProvider)
faker.providers.address.zh_TW.__init__.Provider.building_number(self)
faker.providers.address.zh_TW.__init__.Provider.city_name(self)
faker.providers.address.zh_TW.__init__.Provider.city_name_suffix(self)
faker.providers.address.zh_TW.__init__.Provider.secondary_address(self)
faker.providers.address.zh_TW.__init__.Provider.section_number(self)
faker.providers.address.zh_TW.__init__.Provider.street_name(self)
faker.providers.address.zh_TW.__init__.Provider.street_name_suffix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/pt_PT/__init__.py----------------------------------------
faker.providers.address.pt_PT.__init__.Provider(AddressProvider)
faker.providers.address.pt_PT.__init__.Provider.city_name(self)
faker.providers.address.pt_PT.__init__.Provider.street_prefix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/en/__init__.py----------------------------------------
faker.providers.address.en.__init__.Provider(AddressProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/fr_CH/__init__.py----------------------------------------
faker.providers.address.fr_CH.__init__.Provider(AddressProvider)
faker.providers.address.fr_CH.__init__.Provider.canton(self)
faker.providers.address.fr_CH.__init__.Provider.canton_code(self)
faker.providers.address.fr_CH.__init__.Provider.canton_name(self)
faker.providers.address.fr_CH.__init__.Provider.city_prefix(self)
faker.providers.address.fr_CH.__init__.Provider.street_prefix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/sl_SI/__init__.py----------------------------------------
faker.providers.address.sl_SI.__init__.Provider(AddressProvider)
faker.providers.address.sl_SI.__init__.Provider.city_name(self)
faker.providers.address.sl_SI.__init__.Provider.state(self)
faker.providers.address.sl_SI.__init__.Provider.street_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/cs_CZ/__init__.py----------------------------------------
faker.providers.address.cs_CZ.__init__.Provider(AddressProvider)
faker.providers.address.cs_CZ.__init__.Provider.city_name(self)
faker.providers.address.cs_CZ.__init__.Provider.state(self)
faker.providers.address.cs_CZ.__init__.Provider.street_name(self)
faker.providers.address.cs_CZ.__init__.Provider.street_suffix_long(self)
faker.providers.address.cs_CZ.__init__.Provider.street_suffix_short(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/pl_PL/__init__.py----------------------------------------
faker.providers.address.pl_PL.__init__.Provider(AddressProvider)
faker.providers.address.pl_PL.__init__.Provider.city(self)
faker.providers.address.pl_PL.__init__.Provider.region(self)
faker.providers.address.pl_PL.__init__.Provider.street_name(self)
faker.providers.address.pl_PL.__init__.Provider.street_prefix(self)
faker.providers.address.pl_PL.__init__.Provider.street_prefix_short(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/ne_NP/__init__.py----------------------------------------
faker.providers.address.ne_NP.__init__.Provider(AddressProvider)
faker.providers.address.ne_NP.__init__.Provider.building_prefix(self)
faker.providers.address.ne_NP.__init__.Provider.city(self)
faker.providers.address.ne_NP.__init__.Provider.district(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/zh_CN/__init__.py----------------------------------------
faker.providers.address.zh_CN.__init__.Provider(AddressProvider)
faker.providers.address.zh_CN.__init__.Provider.building_number(self)
faker.providers.address.zh_CN.__init__.Provider.city_name(self)
faker.providers.address.zh_CN.__init__.Provider.district(self)
faker.providers.address.zh_CN.__init__.Provider.province(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/es_MX/__init__.py----------------------------------------
A:faker.providers.address.es_MX.__init__.zip_codes->OrderedDict((('AGS', (20000, 20999)), ('BC', (21000, 22999)), ('BCS', (23000, 23999)), ('CAMP', (24000, 24999)), ('COAH', (25000, 27999)), ('COL', (28000, 28999)), ('CHIS', (29000, 30999)), ('CHIH', (31000, 33999)), ('DF', (1000, 19999)), ('DGO', (36000, 35999)), ('GTO', (36000, 38999)), ('GRO', (39000, 41999)), ('HGO', (42000, 43999)), ('JAL', (44000, 49999)), ('MEX', (50000, 57999)), ('MICH', (58000, 61999)), ('MOR', (62000, 62999)), ('NAY', (63000, 63999)), ('NL', (64000, 67999)), ('OAX', (68000, 71999)), ('PUE', (72000, 75999)), ('QRO', (76000, 76999)), ('Q. ROO', (77000, 75999)), ('SLP', (78000, 79999)), ('SIN', (80000, 82999)), ('SON', (83000, 85999)), ('TAB', (86000, 86999)), ('TAMPS', (87000, 89999)), ('TLAX', (90000, 90999)), ('VER', (91000, 97999)), ('YUC', (97000, 97999)), ('ZAC', (98000, 99999))))
faker.providers.address.es_MX.__init__.Provider(AddressProvider)
faker.providers.address.es_MX.__init__.Provider.city_adjetive(self)
faker.providers.address.es_MX.__init__.Provider.city_prefix(self)
faker.providers.address.es_MX.__init__.Provider.city_suffix(self)
faker.providers.address.es_MX.__init__.Provider.secondary_address(self)
faker.providers.address.es_MX.__init__.Provider.state(self)
faker.providers.address.es_MX.__init__.Provider.state_abbr(self)
faker.providers.address.es_MX.__init__.Provider.street_prefix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/pt_BR/__init__.py----------------------------------------
faker.providers.address.pt_BR.__init__.Provider(AddressProvider)
faker.providers.address.pt_BR.__init__.Provider.bairro(self)
faker.providers.address.pt_BR.__init__.Provider.estado(self)
faker.providers.address.pt_BR.__init__.Provider.estado_nome(self)
faker.providers.address.pt_BR.__init__.Provider.estado_sigla(self)
faker.providers.address.pt_BR.__init__.Provider.street_prefix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/nl_NL/__init__.py----------------------------------------
faker.providers.address.nl_NL.__init__.Provider(AddressProvider)
faker.providers.address.nl_NL.__init__.Provider.city(self)
faker.providers.address.nl_NL.__init__.Provider.province(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/es/__init__.py----------------------------------------
faker.providers.address.es.__init__.Provider(AddressProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/no_NO/__init__.py----------------------------------------
A:faker.providers.address.no_NO.__init__.suffix->self.random_element(self.building_number_suffixes)
faker.providers.address.no_NO.__init__.Provider(AddressProvider)
faker.providers.address.no_NO.__init__.Provider.building_number(self)
faker.providers.address.no_NO.__init__.Provider.city_suffix(self)
faker.providers.address.no_NO.__init__.Provider.street_suffix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/hi_IN/__init__.py----------------------------------------
faker.providers.address.hi_IN.__init__.Provider(AddressProvider)
faker.providers.address.hi_IN.__init__.Provider.city_name(self)
faker.providers.address.hi_IN.__init__.Provider.state(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/hu_HU/__init__.py----------------------------------------
A:faker.providers.address.hu_HU.__init__.street_suffixes->OrderedDict((('utca', 0.75), ('út', 0.1), ('tér', 0.1), ('köz', 0.001), ('körút', 0.001), ('sétány', 0.001)))
A:faker.providers.address.hu_HU.__init__.pattern->self.random_element(self.street_address_with_county_formats)
A:faker.providers.address.hu_HU.__init__.numeric_part->super(Provider, self).random_int(1, 250)
faker.providers.address.hu_HU.__init__.Provider(AddressProvider)
faker.providers.address.hu_HU.__init__.Provider.building_number(self)
faker.providers.address.hu_HU.__init__.Provider.city_part(self)
faker.providers.address.hu_HU.__init__.Provider.city_prefix(self)
faker.providers.address.hu_HU.__init__.Provider.county(self)
faker.providers.address.hu_HU.__init__.Provider.frequent_street_name(self)
faker.providers.address.hu_HU.__init__.Provider.postcode(self)
faker.providers.address.hu_HU.__init__.Provider.real_city_name(self)
faker.providers.address.hu_HU.__init__.Provider.street_address_with_county(self)
faker.providers.address.hu_HU.__init__.Provider.street_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/hr_HR/__init__.py----------------------------------------
faker.providers.address.hr_HR.__init__.Provider(AddressProvider)
faker.providers.address.hr_HR.__init__.Provider.city_name(self)
faker.providers.address.hr_HR.__init__.Provider.state(self)
faker.providers.address.hr_HR.__init__.Provider.street_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/de_DE/__init__.py----------------------------------------
faker.providers.address.de_DE.__init__.Provider(AddressProvider)
faker.providers.address.de_DE.__init__.Provider.city_name(self)
faker.providers.address.de_DE.__init__.Provider.country(self)
faker.providers.address.de_DE.__init__.Provider.state(self)
faker.providers.address.de_DE.__init__.Provider.street_suffix_long(self)
faker.providers.address.de_DE.__init__.Provider.street_suffix_short(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/en_US/__init__.py----------------------------------------
A:faker.providers.address.en_US.__init__.address_formats->OrderedDict((('{{street_address}}\n{{city}}, {{state_abbr}} {{postcode}}', 25), ('{{military_apo}}\nAPO {{military_state}} {{postcode}}', 1), ('{{military_ship}} {{last_name}}\nFPO {{military_state}} {{postcode}}', 1), ('{{military_dpo}}\nDPO {{military_state}} {{postcode}}', 1)))
faker.providers.address.en_US.__init__.Provider(AddressProvider)
faker.providers.address.en_US.__init__.Provider.city_prefix(self)
faker.providers.address.en_US.__init__.Provider.military_apo(self)
faker.providers.address.en_US.__init__.Provider.military_dpo(self)
faker.providers.address.en_US.__init__.Provider.military_ship(self)
faker.providers.address.en_US.__init__.Provider.military_state(self)
faker.providers.address.en_US.__init__.Provider.postalcode(self)
faker.providers.address.en_US.__init__.Provider.postalcode_plus4(self)
faker.providers.address.en_US.__init__.Provider.secondary_address(self)
faker.providers.address.en_US.__init__.Provider.state(self)
faker.providers.address.en_US.__init__.Provider.state_abbr(self)
faker.providers.address.en_US.__init__.Provider.zipcode(self)
faker.providers.address.en_US.__init__.Provider.zipcode_plus4(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/en_CA/__init__.py----------------------------------------
A:faker.providers.address.en_CA.__init__.temp->re.sub('\\?', lambda x: self.postal_code_letter(), self.random_element(self.postal_code_formats))
faker.providers.address.en_CA.__init__.Provider(AddressProvider)
faker.providers.address.en_CA.__init__.Provider.city_prefix(self)
faker.providers.address.en_CA.__init__.Provider.postal_code_letter(self)
faker.providers.address.en_CA.__init__.Provider.postalcode(self)
faker.providers.address.en_CA.__init__.Provider.province(self)
faker.providers.address.en_CA.__init__.Provider.province_abbr(self)
faker.providers.address.en_CA.__init__.Provider.secondary_address(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/uk_UA/__init__.py----------------------------------------
faker.providers.address.uk_UA.__init__.Provider(AddressProvider)
faker.providers.address.uk_UA.__init__.Provider.city_prefix(self)
faker.providers.address.uk_UA.__init__.Provider.postcode(self)
faker.providers.address.uk_UA.__init__.Provider.street_prefix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/ko_KR/__init__.py----------------------------------------
A:faker.providers.address.ko_KR.__init__.pattern->self.random_element(self.building_name_formats)
faker.providers.address.ko_KR.__init__.Provider(AddressProvider)
faker.providers.address.ko_KR.__init__.Provider.address_detail(self)
faker.providers.address.ko_KR.__init__.Provider.borough(self)
faker.providers.address.ko_KR.__init__.Provider.building_dong(self)
faker.providers.address.ko_KR.__init__.Provider.building_name(self)
faker.providers.address.ko_KR.__init__.Provider.building_suffix(self)
faker.providers.address.ko_KR.__init__.Provider.city(self)
faker.providers.address.ko_KR.__init__.Provider.land_address(self)
faker.providers.address.ko_KR.__init__.Provider.land_number(self)
faker.providers.address.ko_KR.__init__.Provider.metropolitan_city(self)
faker.providers.address.ko_KR.__init__.Provider.old_postal_code(self)
faker.providers.address.ko_KR.__init__.Provider.postal_code(self)
faker.providers.address.ko_KR.__init__.Provider.province(self)
faker.providers.address.ko_KR.__init__.Provider.road(self)
faker.providers.address.ko_KR.__init__.Provider.road_address(self)
faker.providers.address.ko_KR.__init__.Provider.road_name(self)
faker.providers.address.ko_KR.__init__.Provider.road_number(self)
faker.providers.address.ko_KR.__init__.Provider.road_suffix(self)
faker.providers.address.ko_KR.__init__.Provider.town(self)
faker.providers.address.ko_KR.__init__.Provider.town_suffix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/es_ES/__init__.py----------------------------------------
faker.providers.address.es_ES.__init__.Provider(AddressProvider)
faker.providers.address.es_ES.__init__.Provider.secondary_address(self)
faker.providers.address.es_ES.__init__.Provider.state(self)
faker.providers.address.es_ES.__init__.Provider.state_name(self)
faker.providers.address.es_ES.__init__.Provider.street_prefix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/sv_SE/__init__.py----------------------------------------
faker.providers.address.sv_SE.__init__.Provider(AddressProvider)
faker.providers.address.sv_SE.__init__.Provider.city_name(self)
faker.providers.address.sv_SE.__init__.Provider.state(self)
faker.providers.address.sv_SE.__init__.Provider.street_prefix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/el_GR/__init__.py----------------------------------------
A:faker.providers.address.el_GR.__init__.n->len(poly)
A:faker.providers.address.el_GR.__init__.pattern->self.random_element(self.line_address_formats)
A:faker.providers.address.el_GR.__init__.l->list(map(lambda t: int(t[1] * 10000000), self.poly))
faker.providers.address.el_GR.__init__.Provider(AddressProvider)
faker.providers.address.el_GR.__init__.Provider.city(self)
faker.providers.address.el_GR.__init__.Provider.latitude(self)
faker.providers.address.el_GR.__init__.Provider.latlng(self)
faker.providers.address.el_GR.__init__.Provider.line_address(self)
faker.providers.address.el_GR.__init__.Provider.longitude(self)
faker.providers.address.el_GR.__init__.Provider.region(self)
faker.providers.address.el_GR.__init__.Provider.street(self)
faker.providers.address.el_GR.__init__.Provider.street_prefix(self)
faker.providers.address.el_GR.__init__.Provider.street_prefix_long(self)
faker.providers.address.el_GR.__init__.Provider.street_prefix_short(self)
faker.providers.address.el_GR.__init__.contains_point(poly,point)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/fa_IR/__init__.py----------------------------------------
faker.providers.address.fa_IR.__init__.Provider(AddressProvider)
faker.providers.address.fa_IR.__init__.Provider.city_prefix(self)
faker.providers.address.fa_IR.__init__.Provider.secondary_address(self)
faker.providers.address.fa_IR.__init__.Provider.state(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/fi_FI/__init__.py----------------------------------------
faker.providers.address.fi_FI.__init__.Provider(AddressProvider)
faker.providers.address.fi_FI.__init__.Provider.city_name(self)
faker.providers.address.fi_FI.__init__.Provider.fruit(self)
faker.providers.address.fi_FI.__init__.Provider.state(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/fr_FR/__init__.py----------------------------------------
faker.providers.address.fr_FR.__init__.Provider(AddressProvider)
faker.providers.address.fr_FR.__init__.Provider.city_prefix(self)
faker.providers.address.fr_FR.__init__.Provider.department(self)
faker.providers.address.fr_FR.__init__.Provider.department_name(self)
faker.providers.address.fr_FR.__init__.Provider.department_number(self)
faker.providers.address.fr_FR.__init__.Provider.region(self)
faker.providers.address.fr_FR.__init__.Provider.street_prefix(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/en_GB/__init__.py----------------------------------------
A:faker.providers.address.en_GB.__init__._postcode_sets->OrderedDict(((' ', ' '), ('N', [str(i) for i in range(0, 10)]), ('A', POSTAL_ZONES_ONE_CHAR), ('B', 'ABCDEFGHKLMNOPQRSTUVWXY'), ('C', 'ABCDEFGHJKSTUW'), ('D', 'ABEHMNPRVWXY'), ('E', 'ABDEFGHJLNPQRSTUWXYZ'), ('P', POSTAL_ZONES_TWO_CHARS)))
A:faker.providers.address.en_GB.__init__.pattern->self.random_element(self.postcode_formats)
faker.providers.address.en_GB.__init__.Provider(AddressProvider)
faker.providers.address.en_GB.__init__.Provider.city_prefix(self)
faker.providers.address.en_GB.__init__.Provider.postcode(self)
faker.providers.address.en_GB.__init__.Provider.secondary_address(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/ja_JP/__init__.py----------------------------------------
faker.providers.address.ja_JP.__init__.Provider(AddressProvider)
faker.providers.address.ja_JP.__init__.Provider.ban(self)
faker.providers.address.ja_JP.__init__.Provider.building_name(self)
faker.providers.address.ja_JP.__init__.Provider.chome(self)
faker.providers.address.ja_JP.__init__.Provider.city(self)
faker.providers.address.ja_JP.__init__.Provider.gou(self)
faker.providers.address.ja_JP.__init__.Provider.prefecture(self)
faker.providers.address.ja_JP.__init__.Provider.town(self)
faker.providers.address.ja_JP.__init__.Provider.zipcode(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/address/nl_BE/__init__.py----------------------------------------
faker.providers.address.nl_BE.__init__.Provider(AddressProvider)
faker.providers.address.nl_BE.__init__.Provider.city(self)
faker.providers.address.nl_BE.__init__.Provider.province(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/lorem/__init__.py----------------------------------------
A:faker.providers.lorem.__init__.nb_words->self.randomize_nb_elements(nb_words)
A:faker.providers.lorem.__init__.words->self.words(nb=nb_words, ext_word_list=ext_word_list)
A:faker.providers.lorem.__init__.words[0]->words[0].title().title()
A:faker.providers.lorem.__init__.nb_sentences->self.randomize_nb_elements(nb_sentences)
A:faker.providers.lorem.__init__.para->self.word_connector.join(self.sentences(nb_sentences, ext_word_list=ext_word_list))
faker.providers.lorem.__init__.Provider(BaseProvider)
faker.providers.lorem.__init__.Provider.paragraph(self,nb_sentences=3,variable_nb_sentences=True,ext_word_list=None)
faker.providers.lorem.__init__.Provider.paragraphs(self,nb=3,ext_word_list=None)
faker.providers.lorem.__init__.Provider.sentence(self,nb_words=6,variable_nb_words=True,ext_word_list=None)
faker.providers.lorem.__init__.Provider.sentences(self,nb=3,ext_word_list=None)
faker.providers.lorem.__init__.Provider.text(self,max_nb_chars=200,ext_word_list=None)
faker.providers.lorem.__init__.Provider.word(self,ext_word_list=None)
faker.providers.lorem.__init__.Provider.words(self,nb=3,ext_word_list=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/lorem/ru_RU/__init__.py----------------------------------------
faker.providers.lorem.ru_RU.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/lorem/zh_TW/__init__.py----------------------------------------
faker.providers.lorem.zh_TW.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/lorem/zh_CN/__init__.py----------------------------------------
faker.providers.lorem.zh_CN.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/lorem/la/__init__.py----------------------------------------
faker.providers.lorem.la.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/lorem/el_GR/__init__.py----------------------------------------
faker.providers.lorem.el_GR.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/lorem/ja_JP/__init__.py----------------------------------------
faker.providers.lorem.ja_JP.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/file/__init__.py----------------------------------------
A:faker.providers.file.__init__.mime_types->OrderedDict((('application', application_mime_types), ('audio', audio_mime_types), ('image', image_mime_types), ('message', message_mime_types), ('model', model_mime_types), ('multipart', multipart_mime_types), ('text', text_mime_types), ('video', video_mime_types)))
A:faker.providers.file.__init__.file_extensions->OrderedDict((('audio', audio_file_extensions), ('image', image_file_extensions), ('office', office_file_extensions), ('text', text_file_extensions), ('video', video_file_extensions)))
A:faker.providers.file.__init__.filename->self.generator.word()
A:faker.providers.file.__init__.file->self.file_name(category, extension)
A:faker.providers.file.__init__.path->'/{0}{1}'.format(self.generator.word(), path)
faker.providers.file.__init__.Provider(BaseProvider)
faker.providers.file.__init__.Provider.file_extension(self,category=None)
faker.providers.file.__init__.Provider.file_name(self,category=None,extension=None)
faker.providers.file.__init__.Provider.file_path(self,depth=1,category=None,extension=None)
faker.providers.file.__init__.Provider.mime_type(self,category=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/file/en_US/__init__.py----------------------------------------
faker.providers.file.en_US.__init__.Provider(FileProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/profile/__init__.py----------------------------------------
A:faker.providers.profile.__init__.sex->self.random_element(SEX)
A:faker.providers.profile.__init__.name->self.generator.name_male()
A:faker.providers.profile.__init__.d->dict(((k, v) for (k, v) in d.items() if k in fields))
faker.providers.profile.__init__.Provider(BaseProvider)
faker.providers.profile.__init__.Provider.profile(self,fields=None,sex=None)
faker.providers.profile.__init__.Provider.simple_profile(self,sex=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/profile/en_US/__init__.py----------------------------------------
faker.providers.profile.en_US.__init__.Provider(ProfileProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/misc/__init__.py----------------------------------------
A:faker.providers.misc.__init__.res->hashlib.sha256(str(self.generator.random.random()).encode('utf-8'))
A:faker.providers.misc.__init__.language_code->self.language_code()
A:faker.providers.misc.__init__.random_indexes->set()
faker.providers.misc.__init__.Provider(BaseProvider)
faker.providers.misc.__init__.Provider.binary(self,length=1*1024*1024)
faker.providers.misc.__init__.Provider.boolean(self,chance_of_getting_true=50)
faker.providers.misc.__init__.Provider.language_code(self)
faker.providers.misc.__init__.Provider.locale(self)
faker.providers.misc.__init__.Provider.md5(self,raw_output=False)
faker.providers.misc.__init__.Provider.null_boolean(self)
faker.providers.misc.__init__.Provider.password(self,length=10,special_chars=True,digits=True,upper_case=True,lower_case=True)
faker.providers.misc.__init__.Provider.sha1(self,raw_output=False)
faker.providers.misc.__init__.Provider.sha256(self,raw_output=False)
faker.providers.misc.__init__.Provider.uuid4(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/providers/misc/en_US/__init__.py----------------------------------------
faker.providers.misc.en_US.__init__.Provider(MiscProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/utils/decorators.py----------------------------------------
faker.utils.decorators.slugify(fn)
faker.utils.decorators.slugify_domain(fn)
faker.utils.decorators.slugify_unicode(fn)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/utils/datetime_safe.py----------------------------------------
A:faker.utils.datetime_safe._illegal_formatting->re.compile('((^|[^%])(%%)*%[sy])')
A:faker.utils.datetime_safe.j->text.find(substr, i)
A:faker.utils.datetime_safe.illegal_formatting->re.compile('((^|[^%])(%%)*%[sy])').search(fmt)
A:faker.utils.datetime_safe.timetuple->dt.timetuple()
A:faker.utils.datetime_safe.s1->time.strftime(fmt, (year,) + timetuple[1:])
A:faker.utils.datetime_safe.sites1->_findall(s1, str(year))
A:faker.utils.datetime_safe.s2->time.strftime(fmt, (year + 28,) + timetuple[1:])
A:faker.utils.datetime_safe.sites2->_findall(s2, str(year + 28))
faker.utils.datetime_safe._findall(text,substr)
faker.utils.datetime_safe.date(real_date)
faker.utils.datetime_safe.date.strftime(self,fmt)
faker.utils.datetime_safe.datetime(real_datetime)
faker.utils.datetime_safe.datetime.combine(self,date,time)
faker.utils.datetime_safe.datetime.date(self)
faker.utils.datetime_safe.datetime.strftime(self,fmt)
faker.utils.datetime_safe.new_date(d)
faker.utils.datetime_safe.new_datetime(d)
faker.utils.datetime_safe.strftime(dt,fmt)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/utils/__init__.py----------------------------------------
faker.utils.__init__.is_string(var)
faker.utils.__init__.quote(var)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/utils/text.py----------------------------------------
A:faker.utils.text._re_pattern->re.compile('[^\\w\\s-]', flags=re.U)
A:faker.utils.text._re_pattern_allow_dots->re.compile('[^\\.\\w\\s-]', flags=re.U)
A:faker.utils.text._re_spaces->re.compile('[-\\s]+', flags=re.U)
A:faker.utils.text.s->' '.join((force_text(arg, encoding, strings_only, errors) for arg in s))
A:faker.utils.text.value->pattern.sub('', value).strip().lower()
faker.utils.text.force_text(s,encoding='utf-8',strings_only=False,errors='strict')
faker.utils.text.is_protected_type(obj)
faker.utils.text.slugify(value,allow_dots=False,allow_unicode=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/utils/distribution.py----------------------------------------
A:faker.utils.distribution.cdf->list(cumsum(p))
A:faker.utils.distribution.uniform_sample->random_sample(random=random)
A:faker.utils.distribution.idx->bisect.bisect_right(cdf2, uniform_sample)
faker.utils.distribution.choice_distribution(a,p,random=None)
faker.utils.distribution.cumsum(it)
faker.utils.distribution.random_sample(random=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/utils/loading.py----------------------------------------
A:faker.utils.loading.path->os.path.dirname(module.__file__)
A:faker.utils.loading.available_locales->set()
A:faker.utils.loading.provider_module->import_module(provider_path)
A:faker.utils.loading.langs->list_module(provider_module)
A:faker.utils.loading.available_providers->set()
faker.utils.loading.find_available_locales(providers)
faker.utils.loading.find_available_providers(modules)
faker.utils.loading.list_module(module)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker0.8.2/lib/python3.6/site-packages/faker/utils/datasets.py----------------------------------------
faker.utils.datasets.add_dicts(*args)

