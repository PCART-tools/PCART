
----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/__main__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/documentor.py----------------------------------------
A:faker.documentor.argspec->inspect.getfullargspec(method)
A:faker.documentor.default->repr(default)
A:faker.documentor.example->self.generator.format(name, *faker_args, **faker_kwargs)
A:faker.documentor.self.max_name_len->max(self.max_name_len, *(len(part) for part in signature.split()))
faker.documentor.Documentor(self,generator:Union[Generator,Faker])
faker.documentor.Documentor.__init__(self,generator:Union[Generator,Faker])
faker.documentor.Documentor.get_formatters(self,locale:Optional[str]=None,excludes:Optional[List[str]]=None,**kwargs:Any)->List[Tuple[BaseProvider, Dict[str, str]]]
faker.documentor.Documentor.get_provider_formatters(self,provider:BaseProvider,prefix:str='fake.',with_args:bool=True,with_defaults:bool=True)->Dict[str, str]
faker.documentor.Documentor.get_provider_name(provider_class:BaseProvider)->str
faker.documentor.FakerEnum(Enum)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/exceptions.py----------------------------------------
faker.exceptions.BaseFakerException(Exception)
faker.exceptions.UniquenessException(BaseFakerException)
faker.exceptions.UnsupportedFeature(self,msg:str,name:str)
faker.exceptions.UnsupportedFeature.__init__(self,msg:str,name:str)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/factory.py----------------------------------------
A:faker.factory.logger->logging.getLogger(__name__)
A:faker.factory.inREPL->bool(getattr(sys, 'ps1', False))
A:faker.factory.(prov_cls, lang_found, _)->cls._find_provider_class(prov_name, locale)
A:faker.factory.provider->prov_cls(faker)
A:faker.factory.provider_module->import_module(path)
A:faker.factory.default_locale->getattr(provider_module, 'default_locale', '')
A:faker.factory.available_locales->list_module(provider_module)
faker.Factory
faker.Factory._find_provider_class(cls,provider_path:str,locale:Optional[str]=None)->Tuple[Any, Optional[str], Optional[str]]
faker.Factory.create(cls,locale:Optional[str]=None,providers:Optional[List[str]]=None,generator:Optional[Generator]=None,includes:Optional[List[str]]=None,use_weighting:bool=True,**config:Any)->Generator
faker.factory.Factory
faker.factory.Factory._find_provider_class(cls,provider_path:str,locale:Optional[str]=None)->Tuple[Any, Optional[str], Optional[str]]
faker.factory.Factory.create(cls,locale:Optional[str]=None,providers:Optional[List[str]]=None,generator:Optional[Generator]=None,includes:Optional[List[str]]=None,use_weighting:bool=True,**config:Any)->Generator


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/config.py----------------------------------------
A:faker.config.PROVIDERS->find_available_providers([import_module(path) for path in META_PROVIDERS_MODULES])
A:faker.config.AVAILABLE_LOCALES->find_available_locales(PROVIDERS)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/proxy.py----------------------------------------
A:faker.proxy.RetType->TypeVar('RetType')
A:faker.proxy.self._unique_proxy->UniqueProxy(self)
A:faker.proxy.self._optional_proxy->OptionalProxy(self)
A:faker.proxy.final_locale->code.replace('-', '_')
A:faker.proxy.odict->OrderedDict()
A:faker.proxy.key->k.replace('-', '_')
A:faker.proxy.locales->list(odict.keys())
A:faker.proxy.self._weights->list(odict.values())
A:faker.proxy.self._factory_map[locales[0]]->factory.Factory.create(locales[0], providers, generator, includes, use_weighting=use_weighting, **config)
A:faker.proxy.self._factory_map[locale]->Faker(locale, providers, generator, includes, use_weighting=use_weighting, **config)
A:faker.proxy.self._factories->list(self._factory_map.values())
A:faker.proxy.attributes->set(super().__dir__())
A:faker.proxy.factory->self._select_factory_choice(factories)
A:faker.proxy.result->cls.__new__(cls)
A:faker.proxy.result._locales->copy.deepcopy(self._locales)
A:faker.proxy.result._factories->copy.deepcopy(self._factories)
A:faker.proxy.result._factory_map->copy.deepcopy(self._factory_map)
A:faker.proxy.result._weights->copy.deepcopy(self._weights)
A:faker.proxy.result._unique_proxy->UniqueProxy(self)
A:faker.proxy.(factories, weights)->zip(*value)
A:faker.proxy.self._sentinel->object()
A:faker.proxy.obj->getattr(self._proxy, name)
A:faker.proxy.state->self.__dict__.copy()
A:faker.proxy.generated->self._seen.setdefault(key, {self._sentinel})
A:faker.proxy.retval->function(*args, **kwargs)
faker.Faker(self,locale:str|Sequence[str]|dict[str,int|float]|None=None,providers:list[str]|None=None,generator:Generator|None=None,includes:list[str]|None=None,use_weighting:bool=True,**config:Any)
faker.Faker.__deepcopy__(self,memodict)
faker.Faker.__dir__(self)
faker.Faker.__getattr__(self,attr:str)->Any
faker.Faker.__getattribute__(self,attr:str)->Any
faker.Faker.__getitem__(self,locale:str)->Faker
faker.Faker.__setstate__(self,state:Any)->None
faker.Faker._map_provider_method(self,method_name:str)->tuple[list[Factory], list[float] | None]
faker.Faker._select_factory(self,method_name:str)->Factory
faker.Faker._select_factory_choice(self,factories)
faker.Faker._select_factory_distribution(self,factories,weights)
faker.Faker.factories(self)->list[Generator | Faker]
faker.Faker.items(self)->list[tuple[str, Generator | Faker]]
faker.Faker.locales(self)->list[str]
faker.Faker.optional(self)->OptionalProxy
faker.Faker.random(self)->Random
faker.Faker.random(self,value:Random)->None
faker.Faker.seed(cls,seed:SeedType|None=None)->None
faker.Faker.seed_instance(self,seed:SeedType|None=None)->None
faker.Faker.seed_locale(self,locale:str,seed:SeedType|None=None)->None
faker.Faker.unique(self)->UniqueProxy
faker.Faker.weights(self)->list[int | float] | None
faker.proxy.Faker(self,locale:str|Sequence[str]|dict[str,int|float]|None=None,providers:list[str]|None=None,generator:Generator|None=None,includes:list[str]|None=None,use_weighting:bool=True,**config:Any)
faker.proxy.Faker.__deepcopy__(self,memodict)
faker.proxy.Faker.__dir__(self)
faker.proxy.Faker.__getattr__(self,attr:str)->Any
faker.proxy.Faker.__getattribute__(self,attr:str)->Any
faker.proxy.Faker.__getitem__(self,locale:str)->Faker
faker.proxy.Faker.__init__(self,locale:str|Sequence[str]|dict[str,int|float]|None=None,providers:list[str]|None=None,generator:Generator|None=None,includes:list[str]|None=None,use_weighting:bool=True,**config:Any)
faker.proxy.Faker.__setstate__(self,state:Any)->None
faker.proxy.Faker._map_provider_method(self,method_name:str)->tuple[list[Factory], list[float] | None]
faker.proxy.Faker._select_factory(self,method_name:str)->Factory
faker.proxy.Faker._select_factory_choice(self,factories)
faker.proxy.Faker._select_factory_distribution(self,factories,weights)
faker.proxy.Faker.factories(self)->list[Generator | Faker]
faker.proxy.Faker.items(self)->list[tuple[str, Generator | Faker]]
faker.proxy.Faker.locales(self)->list[str]
faker.proxy.Faker.optional(self)->OptionalProxy
faker.proxy.Faker.random(self)->Random
faker.proxy.Faker.random(self,value:Random)->None
faker.proxy.Faker.seed(cls,seed:SeedType|None=None)->None
faker.proxy.Faker.seed_instance(self,seed:SeedType|None=None)->None
faker.proxy.Faker.seed_locale(self,locale:str,seed:SeedType|None=None)->None
faker.proxy.Faker.unique(self)->UniqueProxy
faker.proxy.Faker.weights(self)->list[int | float] | None
faker.proxy.OptionalProxy(self,proxy:Faker)
faker.proxy.OptionalProxy.__getattr__(self,name:str)->Any
faker.proxy.OptionalProxy.__getstate__(self)
faker.proxy.OptionalProxy.__init__(self,proxy:Faker)
faker.proxy.OptionalProxy.__setstate__(self,state)
faker.proxy.OptionalProxy._wrap(self,name:str,function:Callable[...,RetType])->Callable[..., RetType | None]
faker.proxy.UniqueProxy(self,proxy:Faker)
faker.proxy.UniqueProxy.__getattr__(self,name:str)->Any
faker.proxy.UniqueProxy.__getstate__(self)
faker.proxy.UniqueProxy.__init__(self,proxy:Faker)
faker.proxy.UniqueProxy.__setstate__(self,state)
faker.proxy.UniqueProxy._wrap(self,name:str,function:Callable)->Callable
faker.proxy.UniqueProxy.clear(self)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/proxy.pyi----------------------------------------
faker.Faker.aadhaar_id(self)->str
faker.Faker.aba(self)->str
faker.Faker.address(self)->str
faker.Faker.address_detail(self)->str
faker.Faker.administrative_unit(self)->str
faker.Faker.am_pm(self)->str
faker.Faker.amphoe(self)->str
faker.Faker.android_platform_token(self)->str
faker.Faker.area2_landline_number(self)->str
faker.Faker.area_code(self)->str
faker.Faker.area_code_with_separator(self)->str
faker.Faker.area_code_without_separator(self)->str
faker.Faker.area_name(self)->str
faker.Faker.ascii_company_email(self)->str
faker.Faker.ascii_email(self)->str
faker.Faker.ascii_free_email(self)->str
faker.Faker.ascii_safe_email(self)->str
faker.Faker.automobile_license_plate(self)->str
faker.Faker.autonomous_community(self)->str
faker.Faker.bairro(self)->str
faker.Faker.ban(self)->str
faker.Faker.bank(self)->str
faker.Faker.bank_country(self)->str
faker.Faker.basic_phone_number(self)->str
faker.Faker.bayantel_area2_landline_number(self)->str
faker.Faker.bayantel_landline_identifier(self)->str
faker.Faker.bban(self)->str
faker.Faker.bic(self)->str
faker.Faker.binary(self,length:int=...)->bytes
faker.Faker.birth_number(self)->str
faker.Faker.boolean(self,chance_of_getting_true:int=...)->bool
faker.Faker.borough(self)->str
faker.Faker.bothify(self,text:str=...,letters:str=...)->str
faker.Faker.bs(self)->str
faker.Faker.building_dong(self)->str
faker.Faker.building_name(self)->str
faker.Faker.building_name_suffix(self)->str
faker.Faker.building_number(self)->str
faker.Faker.building_prefix(self)->str
faker.Faker.building_suffix(self)->str
faker.Faker.building_unit_number(self)->str
faker.Faker.businesses_inn(self)->str
faker.Faker.businesses_ogrn(self)->str
faker.Faker.canton(self)->Tuple[str, str]
faker.Faker.canton_code(self)->str
faker.Faker.canton_name(self)->str
faker.Faker.catch_phrase(self)->str
faker.Faker.catch_phrase_attribute(self)->str
faker.Faker.catch_phrase_noun(self)->str
faker.Faker.catch_phrase_verb(self)->str
faker.Faker.cellphone_block(self)->str
faker.Faker.cellphone_number(self)->str
faker.Faker.cellphone_provider_code(self)->str
faker.Faker.century(self)->str
faker.Faker.checking_account(self)->str
faker.Faker.chome(self)->str
faker.Faker.chrome(self,version_from:int=...,version_to:int=...,build_from:int=...,build_to:int=...)->str
faker.Faker.cif(self)->str
faker.Faker.city(self)->str
faker.Faker.city_adjective(self)->str
faker.Faker.city_name(self)->str
faker.Faker.city_name_suffix(self)->str
faker.Faker.city_part(self)->str
faker.Faker.city_prefix(self)->str
faker.Faker.city_prefix_abbr(self)->str
faker.Faker.city_state(self)->str
faker.Faker.city_suffix(self)->str
faker.Faker.city_with_postcode(self)->str
faker.Faker.clabe(self,bank_code:Optional[int]=...)->str
faker.Faker.cnpj(self)->str
faker.Faker.color(self,hue:Union[str,float,int,Sequence[int],None]=...,luminosity:Optional[str]=...,color_format:str=...)->str
faker.Faker.color_hsl(self,hue:Union[str,float,int,Sequence[int],None]=...,luminosity:Optional[str]=...)->Tuple[int, int, int]
faker.Faker.color_hsv(self,hue:Union[str,float,int,Sequence[int],None]=...,luminosity:Optional[str]=...)->Tuple[int, int, int]
faker.Faker.color_name(self)->str
faker.Faker.color_rgb(self,hue:Union[str,float,int,Sequence[int],None]=...,luminosity:Optional[str]=...)->Tuple[int, int, int]
faker.Faker.color_rgb_float(self,hue:Union[str,float,int,Sequence[int],None]=...,luminosity:Optional[str]=...)->Tuple[float, float, float]
faker.Faker.common_street_name(self)->str
faker.Faker.commune(self)->str
faker.Faker.commune_and_region(self)->str
faker.Faker.commune_code(self)->str
faker.Faker.company(self)->str
faker.Faker.company_business_id(self)->str
faker.Faker.company_category(self)->str
faker.Faker.company_email(self)->str
faker.Faker.company_id(self)->str
faker.Faker.company_limited_prefix(self)->str
faker.Faker.company_limited_suffix(self)->str
faker.Faker.company_prefix(self)->str
faker.Faker.company_rut(self)->str
faker.Faker.company_suffix(self)->str
faker.Faker.company_type(self)->str
faker.Faker.company_vat(self)->str
faker.Faker.concelho(self)->str
faker.Faker.coordinate(self,center:Optional[float]=...,radius:Union[float,int]=...)->Decimal
faker.Faker.correspondent_account(self)->str
faker.Faker.country(self)->str
faker.Faker.country_calling_code(self)->str
faker.Faker.country_code(self,representation:str=...)->str
faker.Faker.county(self)->str
faker.Faker.cpf(self)->str
faker.Faker.credit_card_expire(self,start:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,end:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,date_format:str=...)->str
faker.Faker.credit_card_full(self,card_type:Optional[CardType]=...)->str
faker.Faker.credit_card_number(self,card_type:Optional[CardType]=...)->str
faker.Faker.credit_card_provider(self,card_type:Optional[CardType]=...)->str
faker.Faker.credit_card_security_code(self,card_type:Optional[CardType]=...)->str
faker.Faker.cryptocurrency(self)->Tuple[str, str]
faker.Faker.cryptocurrency_code(self)->str
faker.Faker.cryptocurrency_name(self)->str
faker.Faker.csv(self,header:Optional[Sequence[str]]=...,data_columns:Tuple[str,str]=...,num_rows:int=...,include_row_ids:bool=...)->str
faker.Faker.curp(self)->str
faker.Faker.currency(self)->Tuple[str, str]
faker.Faker.currency_code(self)->str
faker.Faker.currency_name(self)->str
faker.Faker.currency_symbol(self,code:Optional[str]=...)->str
faker.Faker.current_country(self)->str
faker.Faker.current_country_code(self)->str
faker.Faker.date(self,pattern:str=...,end_datetime:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...)->str
faker.Faker.date_between(self,start_date:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,end_date:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...)->datetime.date
faker.Faker.date_between_dates(self,date_start:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...,date_end:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...)->datetime.date
faker.Faker.date_object(self,end_datetime:Optional[datetime.datetime]=...)->datetime.date
faker.Faker.date_of_birth(self,tzinfo:Optional[datetime.tzinfo]=...,minimum_age:int=...,maximum_age:int=...)->datetime.date
faker.Faker.date_this_century(self,before_today:bool=...,after_today:bool=...)->datetime.date
faker.Faker.date_this_decade(self,before_today:bool=...,after_today:bool=...)->datetime.date
faker.Faker.date_this_month(self,before_today:bool=...,after_today:bool=...)->datetime.date
faker.Faker.date_this_year(self,before_today:bool=...,after_today:bool=...)->datetime.date
faker.Faker.date_time(self,tzinfo:Optional[datetime.tzinfo]=...,end_datetime:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...)->datetime.datetime
faker.Faker.date_time_ad(self,tzinfo:Optional[datetime.tzinfo]=...,end_datetime:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...,start_datetime:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...)->datetime.datetime
faker.Faker.date_time_between(self,start_date:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,end_date:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,tzinfo:Optional[datetime.tzinfo]=...)->datetime.datetime
faker.Faker.date_time_between_dates(self,datetime_start:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...,datetime_end:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...,tzinfo:Optional[datetime.tzinfo]=...)->datetime.datetime
faker.Faker.date_time_this_century(self,before_now:bool=...,after_now:bool=...,tzinfo:Optional[datetime.tzinfo]=...)->datetime.datetime
faker.Faker.date_time_this_decade(self,before_now:bool=...,after_now:bool=...,tzinfo:Optional[datetime.tzinfo]=...)->datetime.datetime
faker.Faker.date_time_this_month(self,before_now:bool=...,after_now:bool=...,tzinfo:Optional[datetime.tzinfo]=...)->datetime.datetime
faker.Faker.date_time_this_year(self,before_now:bool=...,after_now:bool=...,tzinfo:Optional[datetime.tzinfo]=...)->datetime.datetime
faker.Faker.day_of_month(self)->str
faker.Faker.day_of_week(self)->str
faker.Faker.department(self)->str
faker.Faker.department_code(self)->str
faker.Faker.department_name(self)->str
faker.Faker.department_number(self)->str
faker.Faker.dga(self,year:Optional[int]=...,month:Optional[int]=...,day:Optional[int]=...,tld:Optional[str]=...,length:Optional[int]=...)->str
faker.Faker.diplomatic_license_plate(self)->str
faker.Faker.district(self)->str
faker.Faker.district_suffix(self)->str
faker.Faker.distrito(self)->str
faker.Faker.dk_street_name(self)->str
faker.Faker.doi(self)->str
faker.Faker.domain_name(self,levels:int=...)->str
faker.Faker.domain_word(self)->str
faker.Faker.dsv(self,dialect:str=...,header:Optional[Sequence[str]]=...,data_columns:Tuple[str,str]=...,num_rows:int=...,include_row_ids:bool=...,**fmtparams:Any)->str
faker.Faker.ean(self,length:int=...,prefixes:Tuple[Union[int,str,Tuple[Union[int,str],...]],...]=...)->str
faker.Faker.ean13(self,prefixes:Tuple[Union[int,str,Tuple[Union[int,str],...]],...]=...,leading_zero:Optional[bool]=...)->str
faker.Faker.ean8(self,prefixes:Tuple[Union[int,str,Tuple[Union[int,str],...]],...]=...)->str
faker.Faker.ein(self)->str
faker.Faker.elector_code(self,gender:Optional[Literal['H','M']]=...)->str
faker.Faker.email(self,safe:bool=...,domain:Optional[str]=...)->str
faker.Faker.emoji(self)->str
faker.Faker.english_catch_phrase(self)->str
faker.Faker.english_paragraph(self,nb_sentences:int=...,variable_nb_sentences:bool=...)->str
faker.Faker.english_paragraphs(self,nb:int=...)->List[str]
faker.Faker.english_sentence(self,nb_words:int=...,variable_nb_words:bool=...)->str
faker.Faker.english_sentences(self,nb:int=...)->List[str]
faker.Faker.english_text(self,max_nb_chars:int=...)->str
faker.Faker.english_texts(self,nb_texts:int=...,max_nb_chars:int=...)->List[str]
faker.Faker.english_word(self)->str
faker.Faker.english_words(self,nb:int=...,unique:bool=...)->List[str]
faker.Faker.enum(self,enum_cls:Type[TEnum])->TEnum
faker.Faker.estado(self)->Tuple[str, str]
faker.Faker.estado_nome(self)->str
faker.Faker.estado_sigla(self)->str
faker.Faker.file_extension(self,category:Optional[str]=...)->str
faker.Faker.file_name(self,category:Optional[str]=...,extension:Optional[str]=...)->str
faker.Faker.file_path(self,depth:int=...,category:Optional[str]=...,extension:Union[str,Sequence[str],None]=...,absolute:Optional[bool]=...,file_system_rule:Literal['linux','windows']=...)->str
faker.Faker.firefox(self)->str
faker.Faker.first_kana_name(self)->str
faker.Faker.first_kana_name_female(self)->str
faker.Faker.first_kana_name_male(self)->str
faker.Faker.first_name(self)->str
faker.Faker.first_name_est(self)->str
faker.Faker.first_name_female(self)->str
faker.Faker.first_name_female_abbreviated(self)->str
faker.Faker.first_name_female_common(self)->str
faker.Faker.first_name_female_est(self)->str
faker.Faker.first_name_female_hinduism(self)->str
faker.Faker.first_name_female_islamic(self)->str
faker.Faker.first_name_female_pair(self)->Tuple[str, str, str]
faker.Faker.first_name_female_rus(self)->str
faker.Faker.first_name_male(self)->str
faker.Faker.first_name_male_abbreviated(self)->str
faker.Faker.first_name_male_common(self)->str
faker.Faker.first_name_male_est(self)->str
faker.Faker.first_name_male_hinduism(self)->str
faker.Faker.first_name_male_islamic(self)->str
faker.Faker.first_name_male_pair(self)->Tuple[str, str, str]
faker.Faker.first_name_male_rus(self)->str
faker.Faker.first_name_nonbinary(self)->str
faker.Faker.first_name_pair(self)->Tuple[str, str, str]
faker.Faker.first_name_rus(self)->str
faker.Faker.first_name_unisex(self)->str
faker.Faker.first_romanized_name(self)->str
faker.Faker.first_romanized_name_female(self)->str
faker.Faker.first_romanized_name_male(self)->str
faker.Faker.fixed_width(self,data_columns:Optional[list]=...,num_rows:int=...,align:str=...)->str
faker.Faker.floor_number(self)->str
faker.Faker.floor_unit_number(self)->str
faker.Faker.free_email(self)->str
faker.Faker.free_email_domain(self)->str
faker.Faker.freguesia(self)->str
faker.Faker.frequent_street_name(self)->str
faker.Faker.full_name(self,gender:Optional[Literal['M','F']]=...,short:Optional[bool]=...)->str
faker.Faker.future_date(self,end_date:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,tzinfo:Optional[datetime.tzinfo]=...)->datetime.date
faker.Faker.future_datetime(self,end_date:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,tzinfo:Optional[datetime.tzinfo]=...)->datetime.datetime
faker.Faker.gemstone_name(self)->str
faker.Faker.get_words_list(self,part_of_speech:Optional[str]=...,ext_word_list:Optional[Sequence[str]]=...)->List[str]
faker.Faker.given_name(self)->str
faker.Faker.given_name_female(self)->str
faker.Faker.given_name_male(self)->str
faker.Faker.globe_area2_landline_number(self)->str
faker.Faker.globe_mobile_number(self)->str
faker.Faker.globe_mobile_number_prefix(self)->str
faker.Faker.gou(self)->str
faker.Faker.gsis(self)->str
faker.Faker.hex_color(self)->str
faker.Faker.hexify(self,text:str=...,upper:bool=...)->str
faker.Faker.highway_name(self)->str
faker.Faker.historic_people_street_name(self)->str
faker.Faker.hostname(self,levels:int=...)->str
faker.Faker.house_number(self)->str
faker.Faker.http_method(self)->str
faker.Faker.http_status_code(self,include_unassigned:bool=...)->int
faker.Faker.iana_id(self)->str
faker.Faker.iban(self)->str
faker.Faker.ide(self)->str
faker.Faker.identity_card_number(self)->str
faker.Faker.idi(self)->str
faker.Faker.image(self,size:Tuple[int,int]=...,image_format:str=...,hue:Union[int,Sequence[int],str,None]=...,luminosity:Optional[str]=...)->bytes
faker.Faker.image_url(self,width:Optional[int]=...,height:Optional[int]=...,placeholder_url:Optional[str]=...)->str
faker.Faker.individuals_inn(self)->str
faker.Faker.individuals_ogrn(self)->str
faker.Faker.initials(self)->str
faker.Faker.internet_explorer(self)->str
faker.Faker.invalid_ssn(self)->str
faker.Faker.ios_platform_token(self)->str
faker.Faker.ipv4(self,network:bool=...,address_class:Optional[str]=...,private:Optional[str]=...)->str
faker.Faker.ipv4_network_class(self)->str
faker.Faker.ipv4_private(self,network:bool=...,address_class:Optional[str]=...)->str
faker.Faker.ipv4_public(self,network:bool=...,address_class:Optional[str]=...)->str
faker.Faker.ipv6(self,network:bool=...)->str
faker.Faker.is_leap_year(year:int)->bool
faker.Faker.isbn10(self,separator:str=...)->str
faker.Faker.isbn13(self,separator:str=...)->str
faker.Faker.iso8601(self,tzinfo:Optional[datetime.tzinfo]=...,end_datetime:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...,sep:str=...,timespec:str=...)->str
faker.Faker.itin(self)->str
faker.Faker.jan(self,length:int=...)->str
faker.Faker.jan13(self)->str
faker.Faker.jan8(self)->str
faker.Faker.job(self)->str
faker.Faker.json(self,data_columns:Optional[List]=...,num_rows:int=...,indent:Optional[int]=...,cls:Optional[Type[encoder.JSONEncoder]]=...)->str
faker.Faker.json_bytes(self,data_columns:Optional[List]=...,num_rows:int=...,indent:Optional[int]=...,cls:Optional[Type[encoder.JSONEncoder]]=...)->bytes
faker.Faker.kana_name(self)->str
faker.Faker.kana_name_female(self)->str
faker.Faker.kana_name_male(self)->str
faker.Faker.kpp(self)->str
faker.Faker.land_address(self)->str
faker.Faker.land_number(self)->str
faker.Faker.landline_code(self)->str
faker.Faker.landline_number(self)->str
faker.Faker.language_code(self)->str
faker.Faker.language_name(self)->str
faker.Faker.large_company(self)->str
faker.Faker.last_kana_name(self)->str
faker.Faker.last_name(self)->str
faker.Faker.last_name_common(self)->str
faker.Faker.last_name_est(self)->str
faker.Faker.last_name_female(self)->str
faker.Faker.last_name_female_islamic(self)->str
faker.Faker.last_name_hinduism(self)->str
faker.Faker.last_name_islamic(self)->str
faker.Faker.last_name_male(self)->str
faker.Faker.last_name_nonbinary(self)->str
faker.Faker.last_name_pair(self)->Tuple[str, str, str]
faker.Faker.last_name_rus(self)->str
faker.Faker.last_name_unique_to_female(self)->str
faker.Faker.last_name_unique_to_male(self)->str
faker.Faker.last_name_unisex(self)->str
faker.Faker.last_romanized_name(self)->str
faker.Faker.latitude(self)->Decimal
faker.Faker.latlng(self)->Tuple[Decimal, Decimal]
faker.Faker.legal_person_nit(self)->str
faker.Faker.legal_person_nit_with_check_digit(self)->str
faker.Faker.lexify(self,text:str=...,letters:str=...)->str
faker.Faker.license_plate(self)->str
faker.Faker.license_plate_ar(self)->str
faker.Faker.license_plate_by_province(self,province_prefix:Optional[str]=...)->str
faker.Faker.license_plate_car(self)->str
faker.Faker.license_plate_diplomatic(self)->str
faker.Faker.license_plate_en(self)->str
faker.Faker.license_plate_mercosur(self)->str
faker.Faker.license_plate_motorbike(self)->str
faker.Faker.license_plate_new(self)->str
faker.Faker.license_plate_old(self)->str
faker.Faker.license_plate_police(self)->str
faker.Faker.license_plate_regex_formats(self)->List[str]
faker.Faker.license_plate_temporary(self)->str
faker.Faker.license_plate_unified(self)->str
faker.Faker.line_address(self)->str
faker.Faker.linux_platform_token(self)->str
faker.Faker.linux_processor(self)->str
faker.Faker.local_latitude(self)->Decimal
faker.Faker.local_latlng(self,country_code:str=...,coords_only:bool=...)->Optional[Tuple[str, ...]]
faker.Faker.local_longitude(self)->Decimal
faker.Faker.local_regon(self)->str
faker.Faker.locale(self)->str
faker.Faker.localized_ean(self,length:int=...)->str
faker.Faker.localized_ean13(self)->str
faker.Faker.localized_ean8(self)->str
faker.Faker.location_on_land(self,coords_only:bool=...)->Tuple[str, ...]
faker.Faker.longitude(self)->Decimal
faker.Faker.luzon_province(self)->str
faker.Faker.luzon_province_address(self)->str
faker.Faker.luzon_province_postcode(self)->str
faker.Faker.mac_address(self,multicast:bool=...)->str
faker.Faker.mac_platform_token(self)->str
faker.Faker.mac_processor(self)->str
faker.Faker.md5(self,raw_output:bool=...)->Union[bytes, str]
faker.Faker.metro_manila_address(self)->str
faker.Faker.metro_manila_lgu(self)->str
faker.Faker.metro_manila_postcode(self)->str
faker.Faker.metropolitan_city(self)->str
faker.Faker.middle_name(self)->str
faker.Faker.middle_name_female(self)->str
faker.Faker.middle_name_male(self)->str
faker.Faker.military_apo(self)->str
faker.Faker.military_dpo(self)->str
faker.Faker.military_ship(self)->str
faker.Faker.military_state(self)->str
faker.Faker.mime_type(self,category:Optional[str]=...)->str
faker.Faker.mindanao_province(self)->str
faker.Faker.mindanao_province_address(self)->str
faker.Faker.mindanao_province_postcode(self)->str
faker.Faker.minguo_year(self)->str
faker.Faker.misc_area2_landline_number(self)->str
faker.Faker.misc_landline_identifier(self)->str
faker.Faker.mobile_number(self)->str
faker.Faker.month(self)->str
faker.Faker.month_name(self)->str
faker.Faker.motorcycle_license_plate(self)->str
faker.Faker.mountain_name(self)->str
faker.Faker.msisdn(self)->str
faker.Faker.municipality(self)->str
faker.Faker.municipality_code(self)->str
faker.Faker.name(self)->str
faker.Faker.name_female(self)->str
faker.Faker.name_male(self)->str
faker.Faker.name_nonbinary(self)->str
faker.Faker.nationality(self)->str
faker.Faker.natural_person_nit(self)->str
faker.Faker.natural_person_nit_with_check_digit(self)->str
faker.Faker.neighborhood(self)->str
faker.Faker.nic_handle(self,suffix:str=...)->str
faker.Faker.nic_handles(self,count:int=...,suffix:str=...)->List[str]
faker.Faker.nie(self)->str
faker.Faker.nif(self)->str
faker.Faker.nip(self)->str
faker.Faker.non_area2_landline_area_code(self)->str
faker.Faker.non_area2_landline_number(self)->str
faker.Faker.nonprofit_prefix(self)->str
faker.Faker.nuip(self)->str
faker.Faker.null_boolean(self)->Optional[bool]
faker.Faker.numerify(self,text:str=...)->str
faker.Faker.nuss(self,company:bool=...)->str
faker.Faker.old_postal_code(self)->str
faker.Faker.opera(self)->str
faker.Faker.operator_id(self)->str
faker.Faker.ordinal_floor_number(self)->str
faker.Faker.ordinal_street_number(self)->str
faker.Faker.org_and_vat_id(self,long:bool=...,dash:bool=...)->Tuple[str, str]
faker.Faker.org_id(self,long:bool=...,dash:bool=...)->str
faker.Faker.pagibig(self)->str
faker.Faker.paragraph(self,nb_sentences:int=...,variable_nb_sentences:bool=...,ext_word_list:Optional[Sequence[str]]=...)->str
faker.Faker.paragraphs(self,nb:int=...,ext_word_list:Optional[Sequence[str]]=...)->List[str]
faker.Faker.partitioned_building_number(self)->str
faker.Faker.passport_dates(self,birthday:datetime.date=...)->Tuple[str, str, str]
faker.Faker.passport_dob(self)->datetime.date
faker.Faker.passport_full(self)->str
faker.Faker.passport_gender(self,seed:int=...)->str
faker.Faker.passport_number(self)->str
faker.Faker.passport_owner(self,gender:str=...)->Tuple[str, str]
faker.Faker.password(self,length:int=...,special_chars:bool=...,digits:bool=...,upper_case:bool=...,lower_case:bool=...)->str
faker.Faker.past_date(self,start_date:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,tzinfo:Optional[datetime.tzinfo]=...)->datetime.date
faker.Faker.past_datetime(self,start_date:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,tzinfo:Optional[datetime.tzinfo]=...)->datetime.datetime
faker.Faker.person_rut(self)->str
faker.Faker.pesel(self,date_of_birth:Optional[datetime.datetime]=...,sex:Optional[str]=...)->str
faker.Faker.pesel_compute_check_digit(self,pesel:str)->int
faker.Faker.philhealth(self)->str
faker.Faker.phone_number(self)->str
faker.Faker.phonenumber_prefix(self)->int
faker.Faker.place_name(self)->str
faker.Faker.plant_name(self)->str
faker.Faker.plant_street_name(self)->str
faker.Faker.plate_letter(self)->str
faker.Faker.plate_letter_prefix(self,region_name:Optional[str]=...)->str
faker.Faker.plate_letter_suffix(self)->str
faker.Faker.plate_number(self)->str
faker.Faker.plate_number_extra(self)->str
faker.Faker.plate_number_special(self)->str
faker.Faker.plate_region_code(self,region_name:Optional[str]=...)->str
faker.Faker.plate_suffix(self)->str
faker.Faker.pldt_area2_landline_number(self)->str
faker.Faker.police_id(self)->str
faker.Faker.port_number(self,is_system:bool=...,is_user:bool=...,is_dynamic:bool=...)->int
faker.Faker.postal_code(self)->str
faker.Faker.postal_code_letter(self)->str
faker.Faker.postalcode(self)->str
faker.Faker.postalcode_in_province(self,province_abbr:Optional[str]=...)->str
faker.Faker.postalcode_in_state(self,state_abbr:Optional[str]=...)->str
faker.Faker.postalcode_plus4(self)->str
faker.Faker.postcode(self)->str
faker.Faker.postcode_city_province(self)->str
faker.Faker.postcode_in_province(self,province_abbr:Optional[str]=...)->str
faker.Faker.postcode_in_state(self,state_abbr:Optional[str]=...)->str
faker.Faker.prefecture(self)->str
faker.Faker.prefix(self)->str
faker.Faker.prefix_female(self)->str
faker.Faker.prefix_male(self)->str
faker.Faker.prefix_nonbinary(self)->str
faker.Faker.pricetag(self)->str
faker.Faker.profile(self,fields:Optional[List[str]]=...,sex:Optional[Literal['M','F']]=...)->Dict[str, Union[str, Tuple[Decimal, Decimal], List[str], datetime.date]]
faker.Faker.protocol_license_plate(self)->str
faker.Faker.provider_code(self)->str
faker.Faker.province(self)->str
faker.Faker.province_abbr(self)->str
faker.Faker.province_code(self)->str
faker.Faker.province_lgu(self)->str
faker.Faker.provinces_code(self)->str
faker.Faker.psv(self,header:Optional[Sequence[str]]=...,data_columns:Tuple[str,str]=...,num_rows:int=...,include_row_ids:bool=...)->str
faker.Faker.pwz_doctor(self)->str
faker.Faker.pwz_doctor_compute_check_digit(self,x:Sequence[int])->int
faker.Faker.pwz_nurse(self,kind:str=...)->str
faker.Faker.pybool(self,truth_probability:int=...)->bool
faker.Faker.pydecimal(self,left_digits:Optional[int]=...,right_digits:Optional[int]=...,positive:Optional[bool]=...,min_value:Union[float,int,None]=...,max_value:Union[float,int,None]=...)->Decimal
faker.Faker.pydict(self,nb_elements:int=...,variable_nb_elements:bool=...,value_types:Union[List[Type],Tuple[Type,...],None]=...,allowed_types:Union[List[Type],Tuple[Type,...],None]=...)->Dict[Any, Any]
faker.Faker.pyfloat(self,left_digits:Optional[int]=...,right_digits:Optional[int]=...,positive:Optional[bool]=...,min_value:Union[float,int,None]=...,max_value:Union[float,int,None]=...)->float
faker.Faker.pyint(self,min_value:int=...,max_value:int=...,step:int=...)->int
faker.Faker.pyiterable(self,nb_elements:int=...,variable_nb_elements:bool=...,value_types:Union[List[Type],Tuple[Type,...],None]=...,allowed_types:Union[List[Type],Tuple[Type,...],None]=...)->Iterable[Any]
faker.Faker.pylist(self,nb_elements:int=...,variable_nb_elements:bool=...,value_types:Union[List[Type],Tuple[Type,...],None]=...,allowed_types:Union[List[Type],Tuple[Type,...],None]=...)->List[Any]
faker.Faker.pyobject(self,object_type:Optional[Type[Union[bool,str,float,int,tuple,set,list,Iterable,dict]]]=...)->Union[bool, str, float, int, tuple, set, list, Iterable, dict, None]
faker.Faker.pyset(self,nb_elements:int=...,variable_nb_elements:bool=...,value_types:Union[List[Type],Tuple[Type,...],None]=...,allowed_types:Union[List[Type],Tuple[Type,...],None]=...)->Set[Any]
faker.Faker.pystr(self,min_chars:Optional[int]=...,max_chars:int=...,prefix:str=...,suffix:str=...)->str
faker.Faker.pystr_format(self,string_format:str=...,letters:str=...)->str
faker.Faker.pystruct(self,count:int=...,value_types:Union[List[Type],Tuple[Type,...],None]=...,allowed_types:Union[List[Type],Tuple[Type,...],None]=...)->Tuple[List, Dict, Dict]
faker.Faker.pytimezone(self,*args:Any,**kwargs:Any)->Optional[datetime.tzinfo]
faker.Faker.pytuple(self,nb_elements:int=...,variable_nb_elements:bool=...,value_types:Union[List[Type],Tuple[Type,...],None]=...,allowed_types:Union[List[Type],Tuple[Type,...],None]=...)->Tuple[Any, ...]
faker.Faker.random_choices(self,elements:Union[Collection[str],Collection[T],OrderedDict[T,float]]=...,length:Optional[int]=...)->Sequence[T]
faker.Faker.random_company_acronym(self)->str
faker.Faker.random_company_adjective(self)->str
faker.Faker.random_company_noun_chain(self)->str
faker.Faker.random_company_product(self)->str
faker.Faker.random_digit(self)->int
faker.Faker.random_digit_above_two(self)->int
faker.Faker.random_digit_not_null(self)->int
faker.Faker.random_digit_not_null_or_empty(self)->Union[int, str]
faker.Faker.random_digit_or_empty(self)->Union[int, str]
faker.Faker.random_element(self,elements:Union[Collection[str],Collection[T],OrderedDict[T,float]]=...)->T
faker.Faker.random_elements(self,elements:Union[Collection[str],Collection[T],OrderedDict[T,float]]=...,length:Optional[int]=...,unique:bool=...,use_weighting:Optional[bool]=...)->Sequence[T]
faker.Faker.random_good_service_adjective(self)->str
faker.Faker.random_good_service_adjective_chain(self)->str
faker.Faker.random_int(self,min:int=...,max:int=...,step:int=...)->int
faker.Faker.random_letter(self)->str
faker.Faker.random_letters(self,length:int=...)->Sequence[str]
faker.Faker.random_lowercase_letter(self)->str
faker.Faker.random_name_complements(self)->str
faker.Faker.random_noun_ish_good_trait(self)->str
faker.Faker.random_number(self,digits:Optional[int]=...,fix_len:bool=...)->int
faker.Faker.random_object_name(self)->str
faker.Faker.random_object_of_concern(self)->str
faker.Faker.random_sample(self,elements:Union[Collection[str],Collection[T],OrderedDict[T,float]]=...,length:Optional[int]=...)->Sequence[T]
faker.Faker.random_uppercase_letter(self)->str
faker.Faker.randomize_nb_elements(self,number:int=...,le:bool=...,ge:bool=...,min:Optional[int]=...,max:Optional[int]=...)->int
faker.Faker.rd_number(self)->str
faker.Faker.real_city_name(self)->str
faker.Faker.region(self)->str
faker.Faker.region_code(self)->str
faker.Faker.regon(self)->str
faker.Faker.rfc(self,natural:bool=...)->str
faker.Faker.rg(self)->str
faker.Faker.rgb_color(self)->str
faker.Faker.rgb_css_color(self)->str
faker.Faker.ripe_id(self)->str
faker.Faker.road(self)->str
faker.Faker.road_address(self)->str
faker.Faker.road_name(self)->str
faker.Faker.road_number(self)->str
faker.Faker.road_suffix(self)->str
faker.Faker.romanized_name(self)->str
faker.Faker.romanized_name_female(self)->str
faker.Faker.romanized_name_male(self)->str
faker.Faker.rut(self,min:int=...,max:int=...)->str
faker.Faker.safari(self)->str
faker.Faker.safe_color_name(self)->str
faker.Faker.safe_domain_name(self)->str
faker.Faker.safe_email(self)->str
faker.Faker.safe_hex_color(self)->str
faker.Faker.sbn9(self,separator:str=...)->str
faker.Faker.secondary_address(self)->str
faker.Faker.section_number(self)->str
faker.Faker.sentence(self,nb_words:int=...,variable_nb_words:bool=...,ext_word_list:Optional[Sequence[str]]=...)->str
faker.Faker.sentences(self,nb:int=...,ext_word_list:Optional[Sequence[str]]=...)->List[str]
faker.Faker.service_phone_number(self)->str
faker.Faker.settlement(self)->str
faker.Faker.settlement_suffix(self)->str
faker.Faker.sha1(self,raw_output:bool=...)->Union[bytes, str]
faker.Faker.sha256(self,raw_output:bool=...)->Union[bytes, str]
faker.Faker.simple_profile(self,sex:Optional[Literal['M','F']]=...)->Dict[str, Union[str, datetime.date, Literal['M', 'F']]]
faker.Faker.siren(self)->str
faker.Faker.siret(self,max_sequential_digits:int=...)->str
faker.Faker.slug(self,value:Optional[str]=...)->str
faker.Faker.smart_mobile_number(self)->str
faker.Faker.smart_mobile_number_prefix(self)->str
faker.Faker.space_object_name(self)->str
faker.Faker.special_code(self)->str
faker.Faker.ssn(self,taxpayer_identification_number_type:str=...)->str
faker.Faker.sss(self)->str
faker.Faker.standalone_building_number(self)->str
faker.Faker.start_digit(self)->str
faker.Faker.state(self)->str
faker.Faker.state_abbr(self,include_territories:bool=...,include_freely_associated_states:bool=...)->str
faker.Faker.state_name(self)->str
faker.Faker.street(self)->str
faker.Faker.street_address(self)->str
faker.Faker.street_address_with_county(self)->str
faker.Faker.street_municipality(self)->str
faker.Faker.street_name(self)->str
faker.Faker.street_name_suffix(self)->str
faker.Faker.street_prefix(self)->str
faker.Faker.street_prefix_long(self)->str
faker.Faker.street_prefix_short(self)->str
faker.Faker.street_procer(self)->str
faker.Faker.street_province(self)->str
faker.Faker.street_suffix(self)->str
faker.Faker.street_suffix_long(self)->str
faker.Faker.street_suffix_short(self)->str
faker.Faker.street_title(self)->str
faker.Faker.subdivision_block_number(self)->str
faker.Faker.subdivision_lot_number(self)->str
faker.Faker.subdivision_name(self)->str
faker.Faker.subdivision_name_suffix(self)->str
faker.Faker.subdivision_unit_number(self)->str
faker.Faker.suffix(self)->str
faker.Faker.suffix_female(self)->str
faker.Faker.suffix_male(self)->str
faker.Faker.suffix_nonbinary(self)->str
faker.Faker.sun_mobile_number(self)->str
faker.Faker.sun_mobile_number_prefix(self)->str
faker.Faker.swift(self,length:Optional[int]=...,primary:bool=...,use_dataset:bool=...)->str
faker.Faker.swift11(self,primary:bool=...,use_dataset:bool=...)->str
faker.Faker.swift8(self,use_dataset:bool=...)->str
faker.Faker.tambon(self)->str
faker.Faker.tar(self,uncompressed_size:int=...,num_files:int=...,min_file_size:int=...,compression:Optional[str]=...)->bytes
faker.Faker.te_reo_ending(self)->str
faker.Faker.te_reo_first(self)->str
faker.Faker.te_reo_part(self)->str
faker.Faker.telephone_number(self)->str
faker.Faker.telephone_provider_code(self)->str
faker.Faker.text(self,max_nb_chars:int=...,ext_word_list:Optional[Sequence[str]]=...)->str
faker.Faker.texts(self,nb_texts:int=...,max_nb_chars:int=...,ext_word_list:Optional[Sequence[str]]=...)->List[str]
faker.Faker.time(self,pattern:str=...,end_datetime:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...)->str
faker.Faker.time_delta(self,end_datetime:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...)->datetime.timedelta
faker.Faker.time_object(self,end_datetime:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...)->datetime.time
faker.Faker.time_series(self,start_date:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,end_date:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,precision:Optional[float]=...,distrib:Optional[Callable[[datetime.datetime],float]]=...,tzinfo:Optional[datetime.tzinfo]=...)->Iterator[Tuple[datetime.datetime, Any]]
faker.Faker.timezone(self)->str
faker.Faker.tin(self)->str
faker.Faker.tld(self)->str
faker.Faker.toll_number(self)->str
faker.Faker.town(self)->str
faker.Faker.town_suffix(self)->str
faker.Faker.traditional_month_name(self)->str
faker.Faker.tsv(self,header:Optional[Sequence[str]]=...,data_columns:Tuple[str,str]=...,num_rows:int=...,include_row_ids:bool=...)->str
faker.Faker.uid(self)->str
faker.Faker.umid(self)->str
faker.Faker.unix_device(self,prefix:Optional[str]=...)->str
faker.Faker.unix_partition(self,prefix:Optional[str]=...)->str
faker.Faker.unix_time(self,end_datetime:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...,start_datetime:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...)->float
faker.Faker.upc_a(self,upc_ae_mode:bool=...,base:Optional[str]=...,number_system_digit:Optional[int]=...)->str
faker.Faker.upc_e(self,base:Optional[str]=...,number_system_digit:Optional[int]=...,safe_mode:bool=...)->str
faker.Faker.uri(self,schemes:Optional[List[str]]=...,deep:Optional[int]=...)->str
faker.Faker.uri_extension(self)->str
faker.Faker.uri_page(self)->str
faker.Faker.uri_path(self,deep:Optional[int]=...)->str
faker.Faker.url(self,schemes:Optional[List[str]]=...)->str
faker.Faker.user_agent(self)->str
faker.Faker.user_name(self)->str
faker.Faker.uuid4(self,cast_to:Union[Callable[[UUID],str],Callable[[UUID],bytes],None]=...)->Union[bytes, str, UUID]
faker.Faker.vat_id(self)->str
faker.Faker.vehicle_category(self)->str
faker.Faker.vehicle_category_letter(self)->str
faker.Faker.vehicle_category_number(self)->str
faker.Faker.vehicle_serial_number(self)->str
faker.Faker.village(self)->str
faker.Faker.village_prefix(self)->str
faker.Faker.village_suffix(self)->str
faker.Faker.vin(self)->str
faker.Faker.visayas_province(self)->str
faker.Faker.visayas_province_address(self)->str
faker.Faker.visayas_province_postcode(self)->str
faker.Faker.windows_platform_token(self)->str
faker.Faker.word(self,part_of_speech:Optional[str]=...,ext_word_list:Optional[Sequence[str]]=...)->str
faker.Faker.words(self,nb:int=...,ext_word_list:Optional[List[str]]=...,part_of_speech:Optional[str]=...,unique:bool=...)->List[str]
faker.Faker.xml(self,nb_elements:int=...,variable_nb_elements:bool=...,value_types:Union[List[Type],Tuple[Type,...],None]=...,allowed_types:Union[List[Type],Tuple[Type,...],None]=...)->str
faker.Faker.year(self)->str
faker.Faker.zip(self,uncompressed_size:int=...,num_files:int=...,min_file_size:int=...,compression:Optional[str]=...)->bytes
faker.Faker.zipcode(self)->str
faker.Faker.zipcode_in_state(self,state_abbr:Optional[str]=...)->str
faker.Faker.zipcode_plus4(self)->str
faker.proxy.Faker.aadhaar_id(self)->str
faker.proxy.Faker.aba(self)->str
faker.proxy.Faker.address(self)->str
faker.proxy.Faker.address_detail(self)->str
faker.proxy.Faker.administrative_unit(self)->str
faker.proxy.Faker.am_pm(self)->str
faker.proxy.Faker.amphoe(self)->str
faker.proxy.Faker.android_platform_token(self)->str
faker.proxy.Faker.area2_landline_number(self)->str
faker.proxy.Faker.area_code(self)->str
faker.proxy.Faker.area_code_with_separator(self)->str
faker.proxy.Faker.area_code_without_separator(self)->str
faker.proxy.Faker.area_name(self)->str
faker.proxy.Faker.ascii_company_email(self)->str
faker.proxy.Faker.ascii_email(self)->str
faker.proxy.Faker.ascii_free_email(self)->str
faker.proxy.Faker.ascii_safe_email(self)->str
faker.proxy.Faker.automobile_license_plate(self)->str
faker.proxy.Faker.autonomous_community(self)->str
faker.proxy.Faker.bairro(self)->str
faker.proxy.Faker.ban(self)->str
faker.proxy.Faker.bank(self)->str
faker.proxy.Faker.bank_country(self)->str
faker.proxy.Faker.basic_phone_number(self)->str
faker.proxy.Faker.bayantel_area2_landline_number(self)->str
faker.proxy.Faker.bayantel_landline_identifier(self)->str
faker.proxy.Faker.bban(self)->str
faker.proxy.Faker.bic(self)->str
faker.proxy.Faker.binary(self,length:int=...)->bytes
faker.proxy.Faker.birth_number(self)->str
faker.proxy.Faker.boolean(self,chance_of_getting_true:int=...)->bool
faker.proxy.Faker.borough(self)->str
faker.proxy.Faker.bothify(self,text:str=...,letters:str=...)->str
faker.proxy.Faker.bs(self)->str
faker.proxy.Faker.building_dong(self)->str
faker.proxy.Faker.building_name(self)->str
faker.proxy.Faker.building_name_suffix(self)->str
faker.proxy.Faker.building_number(self)->str
faker.proxy.Faker.building_prefix(self)->str
faker.proxy.Faker.building_suffix(self)->str
faker.proxy.Faker.building_unit_number(self)->str
faker.proxy.Faker.businesses_inn(self)->str
faker.proxy.Faker.businesses_ogrn(self)->str
faker.proxy.Faker.canton(self)->Tuple[str, str]
faker.proxy.Faker.canton_code(self)->str
faker.proxy.Faker.canton_name(self)->str
faker.proxy.Faker.catch_phrase(self)->str
faker.proxy.Faker.catch_phrase_attribute(self)->str
faker.proxy.Faker.catch_phrase_noun(self)->str
faker.proxy.Faker.catch_phrase_verb(self)->str
faker.proxy.Faker.cellphone_block(self)->str
faker.proxy.Faker.cellphone_number(self)->str
faker.proxy.Faker.cellphone_provider_code(self)->str
faker.proxy.Faker.century(self)->str
faker.proxy.Faker.checking_account(self)->str
faker.proxy.Faker.chome(self)->str
faker.proxy.Faker.chrome(self,version_from:int=...,version_to:int=...,build_from:int=...,build_to:int=...)->str
faker.proxy.Faker.cif(self)->str
faker.proxy.Faker.city(self)->str
faker.proxy.Faker.city_adjective(self)->str
faker.proxy.Faker.city_name(self)->str
faker.proxy.Faker.city_name_suffix(self)->str
faker.proxy.Faker.city_part(self)->str
faker.proxy.Faker.city_prefix(self)->str
faker.proxy.Faker.city_prefix_abbr(self)->str
faker.proxy.Faker.city_state(self)->str
faker.proxy.Faker.city_suffix(self)->str
faker.proxy.Faker.city_with_postcode(self)->str
faker.proxy.Faker.clabe(self,bank_code:Optional[int]=...)->str
faker.proxy.Faker.cnpj(self)->str
faker.proxy.Faker.color(self,hue:Union[str,float,int,Sequence[int],None]=...,luminosity:Optional[str]=...,color_format:str=...)->str
faker.proxy.Faker.color_hsl(self,hue:Union[str,float,int,Sequence[int],None]=...,luminosity:Optional[str]=...)->Tuple[int, int, int]
faker.proxy.Faker.color_hsv(self,hue:Union[str,float,int,Sequence[int],None]=...,luminosity:Optional[str]=...)->Tuple[int, int, int]
faker.proxy.Faker.color_name(self)->str
faker.proxy.Faker.color_rgb(self,hue:Union[str,float,int,Sequence[int],None]=...,luminosity:Optional[str]=...)->Tuple[int, int, int]
faker.proxy.Faker.color_rgb_float(self,hue:Union[str,float,int,Sequence[int],None]=...,luminosity:Optional[str]=...)->Tuple[float, float, float]
faker.proxy.Faker.common_street_name(self)->str
faker.proxy.Faker.commune(self)->str
faker.proxy.Faker.commune_and_region(self)->str
faker.proxy.Faker.commune_code(self)->str
faker.proxy.Faker.company(self)->str
faker.proxy.Faker.company_business_id(self)->str
faker.proxy.Faker.company_category(self)->str
faker.proxy.Faker.company_email(self)->str
faker.proxy.Faker.company_id(self)->str
faker.proxy.Faker.company_limited_prefix(self)->str
faker.proxy.Faker.company_limited_suffix(self)->str
faker.proxy.Faker.company_prefix(self)->str
faker.proxy.Faker.company_rut(self)->str
faker.proxy.Faker.company_suffix(self)->str
faker.proxy.Faker.company_type(self)->str
faker.proxy.Faker.company_vat(self)->str
faker.proxy.Faker.concelho(self)->str
faker.proxy.Faker.coordinate(self,center:Optional[float]=...,radius:Union[float,int]=...)->Decimal
faker.proxy.Faker.correspondent_account(self)->str
faker.proxy.Faker.country(self)->str
faker.proxy.Faker.country_calling_code(self)->str
faker.proxy.Faker.country_code(self,representation:str=...)->str
faker.proxy.Faker.county(self)->str
faker.proxy.Faker.cpf(self)->str
faker.proxy.Faker.credit_card_expire(self,start:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,end:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,date_format:str=...)->str
faker.proxy.Faker.credit_card_full(self,card_type:Optional[CardType]=...)->str
faker.proxy.Faker.credit_card_number(self,card_type:Optional[CardType]=...)->str
faker.proxy.Faker.credit_card_provider(self,card_type:Optional[CardType]=...)->str
faker.proxy.Faker.credit_card_security_code(self,card_type:Optional[CardType]=...)->str
faker.proxy.Faker.cryptocurrency(self)->Tuple[str, str]
faker.proxy.Faker.cryptocurrency_code(self)->str
faker.proxy.Faker.cryptocurrency_name(self)->str
faker.proxy.Faker.csv(self,header:Optional[Sequence[str]]=...,data_columns:Tuple[str,str]=...,num_rows:int=...,include_row_ids:bool=...)->str
faker.proxy.Faker.curp(self)->str
faker.proxy.Faker.currency(self)->Tuple[str, str]
faker.proxy.Faker.currency_code(self)->str
faker.proxy.Faker.currency_name(self)->str
faker.proxy.Faker.currency_symbol(self,code:Optional[str]=...)->str
faker.proxy.Faker.current_country(self)->str
faker.proxy.Faker.current_country_code(self)->str
faker.proxy.Faker.date(self,pattern:str=...,end_datetime:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...)->str
faker.proxy.Faker.date_between(self,start_date:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,end_date:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...)->datetime.date
faker.proxy.Faker.date_between_dates(self,date_start:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...,date_end:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...)->datetime.date
faker.proxy.Faker.date_object(self,end_datetime:Optional[datetime.datetime]=...)->datetime.date
faker.proxy.Faker.date_of_birth(self,tzinfo:Optional[datetime.tzinfo]=...,minimum_age:int=...,maximum_age:int=...)->datetime.date
faker.proxy.Faker.date_this_century(self,before_today:bool=...,after_today:bool=...)->datetime.date
faker.proxy.Faker.date_this_decade(self,before_today:bool=...,after_today:bool=...)->datetime.date
faker.proxy.Faker.date_this_month(self,before_today:bool=...,after_today:bool=...)->datetime.date
faker.proxy.Faker.date_this_year(self,before_today:bool=...,after_today:bool=...)->datetime.date
faker.proxy.Faker.date_time(self,tzinfo:Optional[datetime.tzinfo]=...,end_datetime:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...)->datetime.datetime
faker.proxy.Faker.date_time_ad(self,tzinfo:Optional[datetime.tzinfo]=...,end_datetime:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...,start_datetime:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...)->datetime.datetime
faker.proxy.Faker.date_time_between(self,start_date:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,end_date:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,tzinfo:Optional[datetime.tzinfo]=...)->datetime.datetime
faker.proxy.Faker.date_time_between_dates(self,datetime_start:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...,datetime_end:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...,tzinfo:Optional[datetime.tzinfo]=...)->datetime.datetime
faker.proxy.Faker.date_time_this_century(self,before_now:bool=...,after_now:bool=...,tzinfo:Optional[datetime.tzinfo]=...)->datetime.datetime
faker.proxy.Faker.date_time_this_decade(self,before_now:bool=...,after_now:bool=...,tzinfo:Optional[datetime.tzinfo]=...)->datetime.datetime
faker.proxy.Faker.date_time_this_month(self,before_now:bool=...,after_now:bool=...,tzinfo:Optional[datetime.tzinfo]=...)->datetime.datetime
faker.proxy.Faker.date_time_this_year(self,before_now:bool=...,after_now:bool=...,tzinfo:Optional[datetime.tzinfo]=...)->datetime.datetime
faker.proxy.Faker.day_of_month(self)->str
faker.proxy.Faker.day_of_week(self)->str
faker.proxy.Faker.department(self)->str
faker.proxy.Faker.department_code(self)->str
faker.proxy.Faker.department_name(self)->str
faker.proxy.Faker.department_number(self)->str
faker.proxy.Faker.dga(self,year:Optional[int]=...,month:Optional[int]=...,day:Optional[int]=...,tld:Optional[str]=...,length:Optional[int]=...)->str
faker.proxy.Faker.diplomatic_license_plate(self)->str
faker.proxy.Faker.district(self)->str
faker.proxy.Faker.district_suffix(self)->str
faker.proxy.Faker.distrito(self)->str
faker.proxy.Faker.dk_street_name(self)->str
faker.proxy.Faker.doi(self)->str
faker.proxy.Faker.domain_name(self,levels:int=...)->str
faker.proxy.Faker.domain_word(self)->str
faker.proxy.Faker.dsv(self,dialect:str=...,header:Optional[Sequence[str]]=...,data_columns:Tuple[str,str]=...,num_rows:int=...,include_row_ids:bool=...,**fmtparams:Any)->str
faker.proxy.Faker.ean(self,length:int=...,prefixes:Tuple[Union[int,str,Tuple[Union[int,str],...]],...]=...)->str
faker.proxy.Faker.ean13(self,prefixes:Tuple[Union[int,str,Tuple[Union[int,str],...]],...]=...,leading_zero:Optional[bool]=...)->str
faker.proxy.Faker.ean8(self,prefixes:Tuple[Union[int,str,Tuple[Union[int,str],...]],...]=...)->str
faker.proxy.Faker.ein(self)->str
faker.proxy.Faker.elector_code(self,gender:Optional[Literal['H','M']]=...)->str
faker.proxy.Faker.email(self,safe:bool=...,domain:Optional[str]=...)->str
faker.proxy.Faker.emoji(self)->str
faker.proxy.Faker.english_catch_phrase(self)->str
faker.proxy.Faker.english_paragraph(self,nb_sentences:int=...,variable_nb_sentences:bool=...)->str
faker.proxy.Faker.english_paragraphs(self,nb:int=...)->List[str]
faker.proxy.Faker.english_sentence(self,nb_words:int=...,variable_nb_words:bool=...)->str
faker.proxy.Faker.english_sentences(self,nb:int=...)->List[str]
faker.proxy.Faker.english_text(self,max_nb_chars:int=...)->str
faker.proxy.Faker.english_texts(self,nb_texts:int=...,max_nb_chars:int=...)->List[str]
faker.proxy.Faker.english_word(self)->str
faker.proxy.Faker.english_words(self,nb:int=...,unique:bool=...)->List[str]
faker.proxy.Faker.enum(self,enum_cls:Type[TEnum])->TEnum
faker.proxy.Faker.estado(self)->Tuple[str, str]
faker.proxy.Faker.estado_nome(self)->str
faker.proxy.Faker.estado_sigla(self)->str
faker.proxy.Faker.file_extension(self,category:Optional[str]=...)->str
faker.proxy.Faker.file_name(self,category:Optional[str]=...,extension:Optional[str]=...)->str
faker.proxy.Faker.file_path(self,depth:int=...,category:Optional[str]=...,extension:Union[str,Sequence[str],None]=...,absolute:Optional[bool]=...,file_system_rule:Literal['linux','windows']=...)->str
faker.proxy.Faker.firefox(self)->str
faker.proxy.Faker.first_kana_name(self)->str
faker.proxy.Faker.first_kana_name_female(self)->str
faker.proxy.Faker.first_kana_name_male(self)->str
faker.proxy.Faker.first_name(self)->str
faker.proxy.Faker.first_name_est(self)->str
faker.proxy.Faker.first_name_female(self)->str
faker.proxy.Faker.first_name_female_abbreviated(self)->str
faker.proxy.Faker.first_name_female_common(self)->str
faker.proxy.Faker.first_name_female_est(self)->str
faker.proxy.Faker.first_name_female_hinduism(self)->str
faker.proxy.Faker.first_name_female_islamic(self)->str
faker.proxy.Faker.first_name_female_pair(self)->Tuple[str, str, str]
faker.proxy.Faker.first_name_female_rus(self)->str
faker.proxy.Faker.first_name_male(self)->str
faker.proxy.Faker.first_name_male_abbreviated(self)->str
faker.proxy.Faker.first_name_male_common(self)->str
faker.proxy.Faker.first_name_male_est(self)->str
faker.proxy.Faker.first_name_male_hinduism(self)->str
faker.proxy.Faker.first_name_male_islamic(self)->str
faker.proxy.Faker.first_name_male_pair(self)->Tuple[str, str, str]
faker.proxy.Faker.first_name_male_rus(self)->str
faker.proxy.Faker.first_name_nonbinary(self)->str
faker.proxy.Faker.first_name_pair(self)->Tuple[str, str, str]
faker.proxy.Faker.first_name_rus(self)->str
faker.proxy.Faker.first_name_unisex(self)->str
faker.proxy.Faker.first_romanized_name(self)->str
faker.proxy.Faker.first_romanized_name_female(self)->str
faker.proxy.Faker.first_romanized_name_male(self)->str
faker.proxy.Faker.fixed_width(self,data_columns:Optional[list]=...,num_rows:int=...,align:str=...)->str
faker.proxy.Faker.floor_number(self)->str
faker.proxy.Faker.floor_unit_number(self)->str
faker.proxy.Faker.free_email(self)->str
faker.proxy.Faker.free_email_domain(self)->str
faker.proxy.Faker.freguesia(self)->str
faker.proxy.Faker.frequent_street_name(self)->str
faker.proxy.Faker.full_name(self,gender:Optional[Literal['M','F']]=...,short:Optional[bool]=...)->str
faker.proxy.Faker.future_date(self,end_date:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,tzinfo:Optional[datetime.tzinfo]=...)->datetime.date
faker.proxy.Faker.future_datetime(self,end_date:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,tzinfo:Optional[datetime.tzinfo]=...)->datetime.datetime
faker.proxy.Faker.gemstone_name(self)->str
faker.proxy.Faker.get_words_list(self,part_of_speech:Optional[str]=...,ext_word_list:Optional[Sequence[str]]=...)->List[str]
faker.proxy.Faker.given_name(self)->str
faker.proxy.Faker.given_name_female(self)->str
faker.proxy.Faker.given_name_male(self)->str
faker.proxy.Faker.globe_area2_landline_number(self)->str
faker.proxy.Faker.globe_mobile_number(self)->str
faker.proxy.Faker.globe_mobile_number_prefix(self)->str
faker.proxy.Faker.gou(self)->str
faker.proxy.Faker.gsis(self)->str
faker.proxy.Faker.hex_color(self)->str
faker.proxy.Faker.hexify(self,text:str=...,upper:bool=...)->str
faker.proxy.Faker.highway_name(self)->str
faker.proxy.Faker.historic_people_street_name(self)->str
faker.proxy.Faker.hostname(self,levels:int=...)->str
faker.proxy.Faker.house_number(self)->str
faker.proxy.Faker.http_method(self)->str
faker.proxy.Faker.http_status_code(self,include_unassigned:bool=...)->int
faker.proxy.Faker.iana_id(self)->str
faker.proxy.Faker.iban(self)->str
faker.proxy.Faker.ide(self)->str
faker.proxy.Faker.identity_card_number(self)->str
faker.proxy.Faker.idi(self)->str
faker.proxy.Faker.image(self,size:Tuple[int,int]=...,image_format:str=...,hue:Union[int,Sequence[int],str,None]=...,luminosity:Optional[str]=...)->bytes
faker.proxy.Faker.image_url(self,width:Optional[int]=...,height:Optional[int]=...,placeholder_url:Optional[str]=...)->str
faker.proxy.Faker.individuals_inn(self)->str
faker.proxy.Faker.individuals_ogrn(self)->str
faker.proxy.Faker.initials(self)->str
faker.proxy.Faker.internet_explorer(self)->str
faker.proxy.Faker.invalid_ssn(self)->str
faker.proxy.Faker.ios_platform_token(self)->str
faker.proxy.Faker.ipv4(self,network:bool=...,address_class:Optional[str]=...,private:Optional[str]=...)->str
faker.proxy.Faker.ipv4_network_class(self)->str
faker.proxy.Faker.ipv4_private(self,network:bool=...,address_class:Optional[str]=...)->str
faker.proxy.Faker.ipv4_public(self,network:bool=...,address_class:Optional[str]=...)->str
faker.proxy.Faker.ipv6(self,network:bool=...)->str
faker.proxy.Faker.is_leap_year(year:int)->bool
faker.proxy.Faker.isbn10(self,separator:str=...)->str
faker.proxy.Faker.isbn13(self,separator:str=...)->str
faker.proxy.Faker.iso8601(self,tzinfo:Optional[datetime.tzinfo]=...,end_datetime:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...,sep:str=...,timespec:str=...)->str
faker.proxy.Faker.itin(self)->str
faker.proxy.Faker.jan(self,length:int=...)->str
faker.proxy.Faker.jan13(self)->str
faker.proxy.Faker.jan8(self)->str
faker.proxy.Faker.job(self)->str
faker.proxy.Faker.json(self,data_columns:Optional[List]=...,num_rows:int=...,indent:Optional[int]=...,cls:Optional[Type[encoder.JSONEncoder]]=...)->str
faker.proxy.Faker.json_bytes(self,data_columns:Optional[List]=...,num_rows:int=...,indent:Optional[int]=...,cls:Optional[Type[encoder.JSONEncoder]]=...)->bytes
faker.proxy.Faker.kana_name(self)->str
faker.proxy.Faker.kana_name_female(self)->str
faker.proxy.Faker.kana_name_male(self)->str
faker.proxy.Faker.kpp(self)->str
faker.proxy.Faker.land_address(self)->str
faker.proxy.Faker.land_number(self)->str
faker.proxy.Faker.landline_code(self)->str
faker.proxy.Faker.landline_number(self)->str
faker.proxy.Faker.language_code(self)->str
faker.proxy.Faker.language_name(self)->str
faker.proxy.Faker.large_company(self)->str
faker.proxy.Faker.last_kana_name(self)->str
faker.proxy.Faker.last_name(self)->str
faker.proxy.Faker.last_name_common(self)->str
faker.proxy.Faker.last_name_est(self)->str
faker.proxy.Faker.last_name_female(self)->str
faker.proxy.Faker.last_name_female_islamic(self)->str
faker.proxy.Faker.last_name_hinduism(self)->str
faker.proxy.Faker.last_name_islamic(self)->str
faker.proxy.Faker.last_name_male(self)->str
faker.proxy.Faker.last_name_nonbinary(self)->str
faker.proxy.Faker.last_name_pair(self)->Tuple[str, str, str]
faker.proxy.Faker.last_name_rus(self)->str
faker.proxy.Faker.last_name_unique_to_female(self)->str
faker.proxy.Faker.last_name_unique_to_male(self)->str
faker.proxy.Faker.last_name_unisex(self)->str
faker.proxy.Faker.last_romanized_name(self)->str
faker.proxy.Faker.latitude(self)->Decimal
faker.proxy.Faker.latlng(self)->Tuple[Decimal, Decimal]
faker.proxy.Faker.legal_person_nit(self)->str
faker.proxy.Faker.legal_person_nit_with_check_digit(self)->str
faker.proxy.Faker.lexify(self,text:str=...,letters:str=...)->str
faker.proxy.Faker.license_plate(self)->str
faker.proxy.Faker.license_plate_ar(self)->str
faker.proxy.Faker.license_plate_by_province(self,province_prefix:Optional[str]=...)->str
faker.proxy.Faker.license_plate_car(self)->str
faker.proxy.Faker.license_plate_diplomatic(self)->str
faker.proxy.Faker.license_plate_en(self)->str
faker.proxy.Faker.license_plate_mercosur(self)->str
faker.proxy.Faker.license_plate_motorbike(self)->str
faker.proxy.Faker.license_plate_new(self)->str
faker.proxy.Faker.license_plate_old(self)->str
faker.proxy.Faker.license_plate_police(self)->str
faker.proxy.Faker.license_plate_regex_formats(self)->List[str]
faker.proxy.Faker.license_plate_temporary(self)->str
faker.proxy.Faker.license_plate_unified(self)->str
faker.proxy.Faker.line_address(self)->str
faker.proxy.Faker.linux_platform_token(self)->str
faker.proxy.Faker.linux_processor(self)->str
faker.proxy.Faker.local_latitude(self)->Decimal
faker.proxy.Faker.local_latlng(self,country_code:str=...,coords_only:bool=...)->Optional[Tuple[str, ...]]
faker.proxy.Faker.local_longitude(self)->Decimal
faker.proxy.Faker.local_regon(self)->str
faker.proxy.Faker.locale(self)->str
faker.proxy.Faker.localized_ean(self,length:int=...)->str
faker.proxy.Faker.localized_ean13(self)->str
faker.proxy.Faker.localized_ean8(self)->str
faker.proxy.Faker.location_on_land(self,coords_only:bool=...)->Tuple[str, ...]
faker.proxy.Faker.longitude(self)->Decimal
faker.proxy.Faker.luzon_province(self)->str
faker.proxy.Faker.luzon_province_address(self)->str
faker.proxy.Faker.luzon_province_postcode(self)->str
faker.proxy.Faker.mac_address(self,multicast:bool=...)->str
faker.proxy.Faker.mac_platform_token(self)->str
faker.proxy.Faker.mac_processor(self)->str
faker.proxy.Faker.md5(self,raw_output:bool=...)->Union[bytes, str]
faker.proxy.Faker.metro_manila_address(self)->str
faker.proxy.Faker.metro_manila_lgu(self)->str
faker.proxy.Faker.metro_manila_postcode(self)->str
faker.proxy.Faker.metropolitan_city(self)->str
faker.proxy.Faker.middle_name(self)->str
faker.proxy.Faker.middle_name_female(self)->str
faker.proxy.Faker.middle_name_male(self)->str
faker.proxy.Faker.military_apo(self)->str
faker.proxy.Faker.military_dpo(self)->str
faker.proxy.Faker.military_ship(self)->str
faker.proxy.Faker.military_state(self)->str
faker.proxy.Faker.mime_type(self,category:Optional[str]=...)->str
faker.proxy.Faker.mindanao_province(self)->str
faker.proxy.Faker.mindanao_province_address(self)->str
faker.proxy.Faker.mindanao_province_postcode(self)->str
faker.proxy.Faker.minguo_year(self)->str
faker.proxy.Faker.misc_area2_landline_number(self)->str
faker.proxy.Faker.misc_landline_identifier(self)->str
faker.proxy.Faker.mobile_number(self)->str
faker.proxy.Faker.month(self)->str
faker.proxy.Faker.month_name(self)->str
faker.proxy.Faker.motorcycle_license_plate(self)->str
faker.proxy.Faker.mountain_name(self)->str
faker.proxy.Faker.msisdn(self)->str
faker.proxy.Faker.municipality(self)->str
faker.proxy.Faker.municipality_code(self)->str
faker.proxy.Faker.name(self)->str
faker.proxy.Faker.name_female(self)->str
faker.proxy.Faker.name_male(self)->str
faker.proxy.Faker.name_nonbinary(self)->str
faker.proxy.Faker.nationality(self)->str
faker.proxy.Faker.natural_person_nit(self)->str
faker.proxy.Faker.natural_person_nit_with_check_digit(self)->str
faker.proxy.Faker.neighborhood(self)->str
faker.proxy.Faker.nic_handle(self,suffix:str=...)->str
faker.proxy.Faker.nic_handles(self,count:int=...,suffix:str=...)->List[str]
faker.proxy.Faker.nie(self)->str
faker.proxy.Faker.nif(self)->str
faker.proxy.Faker.nip(self)->str
faker.proxy.Faker.non_area2_landline_area_code(self)->str
faker.proxy.Faker.non_area2_landline_number(self)->str
faker.proxy.Faker.nonprofit_prefix(self)->str
faker.proxy.Faker.nuip(self)->str
faker.proxy.Faker.null_boolean(self)->Optional[bool]
faker.proxy.Faker.numerify(self,text:str=...)->str
faker.proxy.Faker.nuss(self,company:bool=...)->str
faker.proxy.Faker.old_postal_code(self)->str
faker.proxy.Faker.opera(self)->str
faker.proxy.Faker.operator_id(self)->str
faker.proxy.Faker.ordinal_floor_number(self)->str
faker.proxy.Faker.ordinal_street_number(self)->str
faker.proxy.Faker.org_and_vat_id(self,long:bool=...,dash:bool=...)->Tuple[str, str]
faker.proxy.Faker.org_id(self,long:bool=...,dash:bool=...)->str
faker.proxy.Faker.pagibig(self)->str
faker.proxy.Faker.paragraph(self,nb_sentences:int=...,variable_nb_sentences:bool=...,ext_word_list:Optional[Sequence[str]]=...)->str
faker.proxy.Faker.paragraphs(self,nb:int=...,ext_word_list:Optional[Sequence[str]]=...)->List[str]
faker.proxy.Faker.partitioned_building_number(self)->str
faker.proxy.Faker.passport_dates(self,birthday:datetime.date=...)->Tuple[str, str, str]
faker.proxy.Faker.passport_dob(self)->datetime.date
faker.proxy.Faker.passport_full(self)->str
faker.proxy.Faker.passport_gender(self,seed:int=...)->str
faker.proxy.Faker.passport_number(self)->str
faker.proxy.Faker.passport_owner(self,gender:str=...)->Tuple[str, str]
faker.proxy.Faker.password(self,length:int=...,special_chars:bool=...,digits:bool=...,upper_case:bool=...,lower_case:bool=...)->str
faker.proxy.Faker.past_date(self,start_date:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,tzinfo:Optional[datetime.tzinfo]=...)->datetime.date
faker.proxy.Faker.past_datetime(self,start_date:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,tzinfo:Optional[datetime.tzinfo]=...)->datetime.datetime
faker.proxy.Faker.person_rut(self)->str
faker.proxy.Faker.pesel(self,date_of_birth:Optional[datetime.datetime]=...,sex:Optional[str]=...)->str
faker.proxy.Faker.pesel_compute_check_digit(self,pesel:str)->int
faker.proxy.Faker.philhealth(self)->str
faker.proxy.Faker.phone_number(self)->str
faker.proxy.Faker.phonenumber_prefix(self)->int
faker.proxy.Faker.place_name(self)->str
faker.proxy.Faker.plant_name(self)->str
faker.proxy.Faker.plant_street_name(self)->str
faker.proxy.Faker.plate_letter(self)->str
faker.proxy.Faker.plate_letter_prefix(self,region_name:Optional[str]=...)->str
faker.proxy.Faker.plate_letter_suffix(self)->str
faker.proxy.Faker.plate_number(self)->str
faker.proxy.Faker.plate_number_extra(self)->str
faker.proxy.Faker.plate_number_special(self)->str
faker.proxy.Faker.plate_region_code(self,region_name:Optional[str]=...)->str
faker.proxy.Faker.plate_suffix(self)->str
faker.proxy.Faker.pldt_area2_landline_number(self)->str
faker.proxy.Faker.police_id(self)->str
faker.proxy.Faker.port_number(self,is_system:bool=...,is_user:bool=...,is_dynamic:bool=...)->int
faker.proxy.Faker.postal_code(self)->str
faker.proxy.Faker.postal_code_letter(self)->str
faker.proxy.Faker.postalcode(self)->str
faker.proxy.Faker.postalcode_in_province(self,province_abbr:Optional[str]=...)->str
faker.proxy.Faker.postalcode_in_state(self,state_abbr:Optional[str]=...)->str
faker.proxy.Faker.postalcode_plus4(self)->str
faker.proxy.Faker.postcode(self)->str
faker.proxy.Faker.postcode_city_province(self)->str
faker.proxy.Faker.postcode_in_province(self,province_abbr:Optional[str]=...)->str
faker.proxy.Faker.postcode_in_state(self,state_abbr:Optional[str]=...)->str
faker.proxy.Faker.prefecture(self)->str
faker.proxy.Faker.prefix(self)->str
faker.proxy.Faker.prefix_female(self)->str
faker.proxy.Faker.prefix_male(self)->str
faker.proxy.Faker.prefix_nonbinary(self)->str
faker.proxy.Faker.pricetag(self)->str
faker.proxy.Faker.profile(self,fields:Optional[List[str]]=...,sex:Optional[Literal['M','F']]=...)->Dict[str, Union[str, Tuple[Decimal, Decimal], List[str], datetime.date]]
faker.proxy.Faker.protocol_license_plate(self)->str
faker.proxy.Faker.provider_code(self)->str
faker.proxy.Faker.province(self)->str
faker.proxy.Faker.province_abbr(self)->str
faker.proxy.Faker.province_code(self)->str
faker.proxy.Faker.province_lgu(self)->str
faker.proxy.Faker.provinces_code(self)->str
faker.proxy.Faker.psv(self,header:Optional[Sequence[str]]=...,data_columns:Tuple[str,str]=...,num_rows:int=...,include_row_ids:bool=...)->str
faker.proxy.Faker.pwz_doctor(self)->str
faker.proxy.Faker.pwz_doctor_compute_check_digit(self,x:Sequence[int])->int
faker.proxy.Faker.pwz_nurse(self,kind:str=...)->str
faker.proxy.Faker.pybool(self,truth_probability:int=...)->bool
faker.proxy.Faker.pydecimal(self,left_digits:Optional[int]=...,right_digits:Optional[int]=...,positive:Optional[bool]=...,min_value:Union[float,int,None]=...,max_value:Union[float,int,None]=...)->Decimal
faker.proxy.Faker.pydict(self,nb_elements:int=...,variable_nb_elements:bool=...,value_types:Union[List[Type],Tuple[Type,...],None]=...,allowed_types:Union[List[Type],Tuple[Type,...],None]=...)->Dict[Any, Any]
faker.proxy.Faker.pyfloat(self,left_digits:Optional[int]=...,right_digits:Optional[int]=...,positive:Optional[bool]=...,min_value:Union[float,int,None]=...,max_value:Union[float,int,None]=...)->float
faker.proxy.Faker.pyint(self,min_value:int=...,max_value:int=...,step:int=...)->int
faker.proxy.Faker.pyiterable(self,nb_elements:int=...,variable_nb_elements:bool=...,value_types:Union[List[Type],Tuple[Type,...],None]=...,allowed_types:Union[List[Type],Tuple[Type,...],None]=...)->Iterable[Any]
faker.proxy.Faker.pylist(self,nb_elements:int=...,variable_nb_elements:bool=...,value_types:Union[List[Type],Tuple[Type,...],None]=...,allowed_types:Union[List[Type],Tuple[Type,...],None]=...)->List[Any]
faker.proxy.Faker.pyobject(self,object_type:Optional[Type[Union[bool,str,float,int,tuple,set,list,Iterable,dict]]]=...)->Union[bool, str, float, int, tuple, set, list, Iterable, dict, None]
faker.proxy.Faker.pyset(self,nb_elements:int=...,variable_nb_elements:bool=...,value_types:Union[List[Type],Tuple[Type,...],None]=...,allowed_types:Union[List[Type],Tuple[Type,...],None]=...)->Set[Any]
faker.proxy.Faker.pystr(self,min_chars:Optional[int]=...,max_chars:int=...,prefix:str=...,suffix:str=...)->str
faker.proxy.Faker.pystr_format(self,string_format:str=...,letters:str=...)->str
faker.proxy.Faker.pystruct(self,count:int=...,value_types:Union[List[Type],Tuple[Type,...],None]=...,allowed_types:Union[List[Type],Tuple[Type,...],None]=...)->Tuple[List, Dict, Dict]
faker.proxy.Faker.pytimezone(self,*args:Any,**kwargs:Any)->Optional[datetime.tzinfo]
faker.proxy.Faker.pytuple(self,nb_elements:int=...,variable_nb_elements:bool=...,value_types:Union[List[Type],Tuple[Type,...],None]=...,allowed_types:Union[List[Type],Tuple[Type,...],None]=...)->Tuple[Any, ...]
faker.proxy.Faker.random_choices(self,elements:Union[Collection[str],Collection[T],OrderedDict[T,float]]=...,length:Optional[int]=...)->Sequence[T]
faker.proxy.Faker.random_company_acronym(self)->str
faker.proxy.Faker.random_company_adjective(self)->str
faker.proxy.Faker.random_company_noun_chain(self)->str
faker.proxy.Faker.random_company_product(self)->str
faker.proxy.Faker.random_digit(self)->int
faker.proxy.Faker.random_digit_above_two(self)->int
faker.proxy.Faker.random_digit_not_null(self)->int
faker.proxy.Faker.random_digit_not_null_or_empty(self)->Union[int, str]
faker.proxy.Faker.random_digit_or_empty(self)->Union[int, str]
faker.proxy.Faker.random_element(self,elements:Union[Collection[str],Collection[T],OrderedDict[T,float]]=...)->T
faker.proxy.Faker.random_elements(self,elements:Union[Collection[str],Collection[T],OrderedDict[T,float]]=...,length:Optional[int]=...,unique:bool=...,use_weighting:Optional[bool]=...)->Sequence[T]
faker.proxy.Faker.random_good_service_adjective(self)->str
faker.proxy.Faker.random_good_service_adjective_chain(self)->str
faker.proxy.Faker.random_int(self,min:int=...,max:int=...,step:int=...)->int
faker.proxy.Faker.random_letter(self)->str
faker.proxy.Faker.random_letters(self,length:int=...)->Sequence[str]
faker.proxy.Faker.random_lowercase_letter(self)->str
faker.proxy.Faker.random_name_complements(self)->str
faker.proxy.Faker.random_noun_ish_good_trait(self)->str
faker.proxy.Faker.random_number(self,digits:Optional[int]=...,fix_len:bool=...)->int
faker.proxy.Faker.random_object_name(self)->str
faker.proxy.Faker.random_object_of_concern(self)->str
faker.proxy.Faker.random_sample(self,elements:Union[Collection[str],Collection[T],OrderedDict[T,float]]=...,length:Optional[int]=...)->Sequence[T]
faker.proxy.Faker.random_uppercase_letter(self)->str
faker.proxy.Faker.randomize_nb_elements(self,number:int=...,le:bool=...,ge:bool=...,min:Optional[int]=...,max:Optional[int]=...)->int
faker.proxy.Faker.rd_number(self)->str
faker.proxy.Faker.real_city_name(self)->str
faker.proxy.Faker.region(self)->str
faker.proxy.Faker.region_code(self)->str
faker.proxy.Faker.regon(self)->str
faker.proxy.Faker.rfc(self,natural:bool=...)->str
faker.proxy.Faker.rg(self)->str
faker.proxy.Faker.rgb_color(self)->str
faker.proxy.Faker.rgb_css_color(self)->str
faker.proxy.Faker.ripe_id(self)->str
faker.proxy.Faker.road(self)->str
faker.proxy.Faker.road_address(self)->str
faker.proxy.Faker.road_name(self)->str
faker.proxy.Faker.road_number(self)->str
faker.proxy.Faker.road_suffix(self)->str
faker.proxy.Faker.romanized_name(self)->str
faker.proxy.Faker.romanized_name_female(self)->str
faker.proxy.Faker.romanized_name_male(self)->str
faker.proxy.Faker.rut(self,min:int=...,max:int=...)->str
faker.proxy.Faker.safari(self)->str
faker.proxy.Faker.safe_color_name(self)->str
faker.proxy.Faker.safe_domain_name(self)->str
faker.proxy.Faker.safe_email(self)->str
faker.proxy.Faker.safe_hex_color(self)->str
faker.proxy.Faker.sbn9(self,separator:str=...)->str
faker.proxy.Faker.secondary_address(self)->str
faker.proxy.Faker.section_number(self)->str
faker.proxy.Faker.sentence(self,nb_words:int=...,variable_nb_words:bool=...,ext_word_list:Optional[Sequence[str]]=...)->str
faker.proxy.Faker.sentences(self,nb:int=...,ext_word_list:Optional[Sequence[str]]=...)->List[str]
faker.proxy.Faker.service_phone_number(self)->str
faker.proxy.Faker.settlement(self)->str
faker.proxy.Faker.settlement_suffix(self)->str
faker.proxy.Faker.sha1(self,raw_output:bool=...)->Union[bytes, str]
faker.proxy.Faker.sha256(self,raw_output:bool=...)->Union[bytes, str]
faker.proxy.Faker.simple_profile(self,sex:Optional[Literal['M','F']]=...)->Dict[str, Union[str, datetime.date, Literal['M', 'F']]]
faker.proxy.Faker.siren(self)->str
faker.proxy.Faker.siret(self,max_sequential_digits:int=...)->str
faker.proxy.Faker.slug(self,value:Optional[str]=...)->str
faker.proxy.Faker.smart_mobile_number(self)->str
faker.proxy.Faker.smart_mobile_number_prefix(self)->str
faker.proxy.Faker.space_object_name(self)->str
faker.proxy.Faker.special_code(self)->str
faker.proxy.Faker.ssn(self,taxpayer_identification_number_type:str=...)->str
faker.proxy.Faker.sss(self)->str
faker.proxy.Faker.standalone_building_number(self)->str
faker.proxy.Faker.start_digit(self)->str
faker.proxy.Faker.state(self)->str
faker.proxy.Faker.state_abbr(self,include_territories:bool=...,include_freely_associated_states:bool=...)->str
faker.proxy.Faker.state_name(self)->str
faker.proxy.Faker.street(self)->str
faker.proxy.Faker.street_address(self)->str
faker.proxy.Faker.street_address_with_county(self)->str
faker.proxy.Faker.street_municipality(self)->str
faker.proxy.Faker.street_name(self)->str
faker.proxy.Faker.street_name_suffix(self)->str
faker.proxy.Faker.street_prefix(self)->str
faker.proxy.Faker.street_prefix_long(self)->str
faker.proxy.Faker.street_prefix_short(self)->str
faker.proxy.Faker.street_procer(self)->str
faker.proxy.Faker.street_province(self)->str
faker.proxy.Faker.street_suffix(self)->str
faker.proxy.Faker.street_suffix_long(self)->str
faker.proxy.Faker.street_suffix_short(self)->str
faker.proxy.Faker.street_title(self)->str
faker.proxy.Faker.subdivision_block_number(self)->str
faker.proxy.Faker.subdivision_lot_number(self)->str
faker.proxy.Faker.subdivision_name(self)->str
faker.proxy.Faker.subdivision_name_suffix(self)->str
faker.proxy.Faker.subdivision_unit_number(self)->str
faker.proxy.Faker.suffix(self)->str
faker.proxy.Faker.suffix_female(self)->str
faker.proxy.Faker.suffix_male(self)->str
faker.proxy.Faker.suffix_nonbinary(self)->str
faker.proxy.Faker.sun_mobile_number(self)->str
faker.proxy.Faker.sun_mobile_number_prefix(self)->str
faker.proxy.Faker.swift(self,length:Optional[int]=...,primary:bool=...,use_dataset:bool=...)->str
faker.proxy.Faker.swift11(self,primary:bool=...,use_dataset:bool=...)->str
faker.proxy.Faker.swift8(self,use_dataset:bool=...)->str
faker.proxy.Faker.tambon(self)->str
faker.proxy.Faker.tar(self,uncompressed_size:int=...,num_files:int=...,min_file_size:int=...,compression:Optional[str]=...)->bytes
faker.proxy.Faker.te_reo_ending(self)->str
faker.proxy.Faker.te_reo_first(self)->str
faker.proxy.Faker.te_reo_part(self)->str
faker.proxy.Faker.telephone_number(self)->str
faker.proxy.Faker.telephone_provider_code(self)->str
faker.proxy.Faker.text(self,max_nb_chars:int=...,ext_word_list:Optional[Sequence[str]]=...)->str
faker.proxy.Faker.texts(self,nb_texts:int=...,max_nb_chars:int=...,ext_word_list:Optional[Sequence[str]]=...)->List[str]
faker.proxy.Faker.time(self,pattern:str=...,end_datetime:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...)->str
faker.proxy.Faker.time_delta(self,end_datetime:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...)->datetime.timedelta
faker.proxy.Faker.time_object(self,end_datetime:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...)->datetime.time
faker.proxy.Faker.time_series(self,start_date:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,end_date:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int]=...,precision:Optional[float]=...,distrib:Optional[Callable[[datetime.datetime],float]]=...,tzinfo:Optional[datetime.tzinfo]=...)->Iterator[Tuple[datetime.datetime, Any]]
faker.proxy.Faker.timezone(self)->str
faker.proxy.Faker.tin(self)->str
faker.proxy.Faker.tld(self)->str
faker.proxy.Faker.toll_number(self)->str
faker.proxy.Faker.town(self)->str
faker.proxy.Faker.town_suffix(self)->str
faker.proxy.Faker.traditional_month_name(self)->str
faker.proxy.Faker.tsv(self,header:Optional[Sequence[str]]=...,data_columns:Tuple[str,str]=...,num_rows:int=...,include_row_ids:bool=...)->str
faker.proxy.Faker.uid(self)->str
faker.proxy.Faker.umid(self)->str
faker.proxy.Faker.unix_device(self,prefix:Optional[str]=...)->str
faker.proxy.Faker.unix_partition(self,prefix:Optional[str]=...)->str
faker.proxy.Faker.unix_time(self,end_datetime:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...,start_datetime:Union[datetime.date,datetime.datetime,datetime.timedelta,str,int,None]=...)->float
faker.proxy.Faker.upc_a(self,upc_ae_mode:bool=...,base:Optional[str]=...,number_system_digit:Optional[int]=...)->str
faker.proxy.Faker.upc_e(self,base:Optional[str]=...,number_system_digit:Optional[int]=...,safe_mode:bool=...)->str
faker.proxy.Faker.uri(self,schemes:Optional[List[str]]=...,deep:Optional[int]=...)->str
faker.proxy.Faker.uri_extension(self)->str
faker.proxy.Faker.uri_page(self)->str
faker.proxy.Faker.uri_path(self,deep:Optional[int]=...)->str
faker.proxy.Faker.url(self,schemes:Optional[List[str]]=...)->str
faker.proxy.Faker.user_agent(self)->str
faker.proxy.Faker.user_name(self)->str
faker.proxy.Faker.uuid4(self,cast_to:Union[Callable[[UUID],str],Callable[[UUID],bytes],None]=...)->Union[bytes, str, UUID]
faker.proxy.Faker.vat_id(self)->str
faker.proxy.Faker.vehicle_category(self)->str
faker.proxy.Faker.vehicle_category_letter(self)->str
faker.proxy.Faker.vehicle_category_number(self)->str
faker.proxy.Faker.vehicle_serial_number(self)->str
faker.proxy.Faker.village(self)->str
faker.proxy.Faker.village_prefix(self)->str
faker.proxy.Faker.village_suffix(self)->str
faker.proxy.Faker.vin(self)->str
faker.proxy.Faker.visayas_province(self)->str
faker.proxy.Faker.visayas_province_address(self)->str
faker.proxy.Faker.visayas_province_postcode(self)->str
faker.proxy.Faker.windows_platform_token(self)->str
faker.proxy.Faker.word(self,part_of_speech:Optional[str]=...,ext_word_list:Optional[Sequence[str]]=...)->str
faker.proxy.Faker.words(self,nb:int=...,ext_word_list:Optional[List[str]]=...,part_of_speech:Optional[str]=...,unique:bool=...)->List[str]
faker.proxy.Faker.xml(self,nb_elements:int=...,variable_nb_elements:bool=...,value_types:Union[List[Type],Tuple[Type,...],None]=...,allowed_types:Union[List[Type],Tuple[Type,...],None]=...)->str
faker.proxy.Faker.year(self)->str
faker.proxy.Faker.zip(self,uncompressed_size:int=...,num_files:int=...,min_file_size:int=...,compression:Optional[str]=...)->bytes
faker.proxy.Faker.zipcode(self)->str
faker.proxy.Faker.zipcode_in_state(self,state_abbr:Optional[str]=...)->str
faker.proxy.Faker.zipcode_plus4(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/typing.py----------------------------------------
A:faker.typing.CardType->TypeVar('CardType', 'CreditCard', str)
faker.typing.Country
faker.typing.CreditCard(self,name:str,prefixes:List[str],length:int=16,security_code:str='CVC',security_code_length:int=3)
faker.typing.CreditCard.__init__(self,name:str,prefixes:List[str],length:int=16,security_code:str='CVC',security_code_length:int=3)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/cli.py----------------------------------------
A:faker.cli.T->TypeVar('T')
A:faker.cli.margin->max(30, doc.max_name_len + 2)
A:faker.cli.signature_lines->textwrap.wrap(signature, width=margin, subsequent_indent='  ')
A:faker.cli.lines->textwrap.wrap(str(example).expandtabs(), width=150 - margin, initial_indent='# ', subsequent_indent='  ')
A:faker.cli.fake->Faker(locale, providers=[provider_or_field], includes=includes)
A:faker.cli.base_provider_formatters->list(dir(BaseProvider))
A:faker.cli.parts->provider_or_field.split('.')
A:faker.cli.doc->documentor.Documentor(fake)
A:faker.cli.formatters->documentor.Documentor(fake).get_formatters(with_args=True, with_defaults=True, excludes=unsupported)
A:faker.cli.parser->argparse.ArgumentParser(prog=self.prog_name, description=f'{self.prog_name} version {VERSION}', epilog=epilog, formatter_class=formatter_class)
A:faker.cli.arguments->argparse.ArgumentParser(prog=self.prog_name, description=f'{self.prog_name} version {VERSION}', epilog=epilog, formatter_class=formatter_class).parse_args(self.argv[1:])
A:faker.cli.command->Command(argv)
faker.cli.Command(self,argv:Optional[str]=None)
faker.cli.Command.__init__(self,argv:Optional[str]=None)
faker.cli.Command.execute(self)->None
faker.cli.execute_from_command_line(argv:Optional[str]=None)->None
faker.cli.print_doc(provider_or_field:Optional[str]=None,args:Optional[List[T]]=None,lang:str=DEFAULT_LOCALE,output:Optional[Union[TextIO,TextIOWrapper]]=None,seed:Optional[float]=None,includes:Optional[List[str]]=None)->None
faker.cli.print_provider(doc:Documentor,provider:BaseProvider,formatters:Dict[str,T],excludes:Optional[List[str]]=None,output:Optional[TextIO]=None)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/generator.py----------------------------------------
A:faker.generator._re_token->re.compile('\\{\\{\\s*(\\w+)(:\\s*\\w+?)?\\s*\\}\\}')
A:faker.generator.random->random.Random()
A:faker.generator.Sentinel->object()
A:faker.generator.self.__config->dict(list(self.__config.items()) + list(config.items()))
A:faker.generator.provider->provider(self)
A:faker.generator.faker_function->getattr(provider, method_name)
A:faker.generator.self.__random->random.Random()
A:faker.generator.result->self.__config['arguments'].pop(group)
A:faker.generator.(formatter, argument_group)->list(matches.groups())
A:faker.generator.formatted->str(self.format(formatter))
faker.Generator(self,**config:Dict)
faker.Generator.__format_token(self,matches)
faker.Generator.add_provider(self,provider:Union['BaseProvider',Type['BaseProvider']])->None
faker.Generator.del_arguments(self,group:str,argument:Optional[str]=None)->Any
faker.Generator.format(self,formatter:str,*args:Any,**kwargs:Any)->str
faker.Generator.get_arguments(self,group:str,argument:Optional[str]=None)->Any
faker.Generator.get_formatter(self,formatter:str)->Callable
faker.Generator.get_providers(self)->List['BaseProvider']
faker.Generator.parse(self,text:str)->str
faker.Generator.provider(self,name:str)->Optional['BaseProvider']
faker.Generator.random(self)->random_module.Random
faker.Generator.random(self,value:random_module.Random)->None
faker.Generator.seed(cls,seed:Optional[SeedType]=None)->None
faker.Generator.seed_instance(self,seed:Optional[SeedType]=None)->'Generator'
faker.Generator.set_arguments(self,group:str,argument:str,value:Optional[Any]=None)->None
faker.Generator.set_formatter(self,name:str,formatter:Callable)->None
faker.generator.Generator(self,**config:Dict)
faker.generator.Generator.__format_token(self,matches)
faker.generator.Generator.__init__(self,**config:Dict)
faker.generator.Generator.add_provider(self,provider:Union['BaseProvider',Type['BaseProvider']])->None
faker.generator.Generator.del_arguments(self,group:str,argument:Optional[str]=None)->Any
faker.generator.Generator.format(self,formatter:str,*args:Any,**kwargs:Any)->str
faker.generator.Generator.get_arguments(self,group:str,argument:Optional[str]=None)->Any
faker.generator.Generator.get_formatter(self,formatter:str)->Callable
faker.generator.Generator.get_providers(self)->List['BaseProvider']
faker.generator.Generator.parse(self,text:str)->str
faker.generator.Generator.provider(self,name:str)->Optional['BaseProvider']
faker.generator.Generator.random(self)->random_module.Random
faker.generator.Generator.random(self,value:random_module.Random)->None
faker.generator.Generator.seed(cls,seed:Optional[SeedType]=None)->None
faker.generator.Generator.seed_instance(self,seed:Optional[SeedType]=None)->'Generator'
faker.generator.Generator.set_arguments(self,group:str,argument:str,value:Optional[Any]=None)->None
faker.generator.Generator.set_formatter(self,name:str,formatter:Callable)->None


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/decode/__init__.py----------------------------------------
A:faker.decode.__init__.codepoint->ord(ch)
faker.decode.__init__.unidecode(txt:str)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/decode/codes.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/__init__.py----------------------------------------
A:faker.providers.__init__._re_hash->re.compile('#')
A:faker.providers.__init__._re_perc->re.compile('%')
A:faker.providers.__init__._re_dol->re.compile('\\$')
A:faker.providers.__init__._re_excl->re.compile('!')
A:faker.providers.__init__._re_at->re.compile('@')
A:faker.providers.__init__._re_qm->re.compile('\\?')
A:faker.providers.__init__._re_cir->re.compile('\\^')
A:faker.providers.__init__.T->TypeVar('T')
A:faker.providers.__init__.language_code->self.language_code()
A:faker.providers.__init__.digits->self.random_digit_not_null()
A:faker.providers.__init__.length->self.generator.random.randint(1, len(elements))
A:faker.providers.__init__.elements._key_cache->tuple(elements.keys())
A:faker.providers.__init__.nb->int(number * self.generator.random.randint(_min, _max) / 100)
A:faker.providers.__init__.text->re.compile('@').sub(lambda x: str(self.random_digit_not_null_or_empty()), text)
A:faker.providers.__init__.letters->letters.upper().upper()
A:faker.providers.__init__.generator->Generator()
faker.providers.__init__.BaseProvider(self,generator:Any)
faker.providers.__init__.BaseProvider.__init__(self,generator:Any)
faker.providers.__init__.BaseProvider.bothify(self,text:str='##??',letters:str=string.ascii_letters)->str
faker.providers.__init__.BaseProvider.hexify(self,text:str='^^^^',upper:bool=False)->str
faker.providers.__init__.BaseProvider.language_code(self)->str
faker.providers.__init__.BaseProvider.lexify(self,text:str='????',letters:str=string.ascii_letters)->str
faker.providers.__init__.BaseProvider.locale(self)->str
faker.providers.__init__.BaseProvider.numerify(self,text:str='###')->str
faker.providers.__init__.BaseProvider.random_choices(self,elements:ElementsType[T]=('a','b','c'),length:Optional[int]=None)->Sequence[T]
faker.providers.__init__.BaseProvider.random_digit(self)->int
faker.providers.__init__.BaseProvider.random_digit_above_two(self)->int
faker.providers.__init__.BaseProvider.random_digit_not_null(self)->int
faker.providers.__init__.BaseProvider.random_digit_not_null_or_empty(self)->Union[int, str]
faker.providers.__init__.BaseProvider.random_digit_or_empty(self)->Union[int, str]
faker.providers.__init__.BaseProvider.random_element(self,elements:ElementsType[T]=('a','b','c'))->T
faker.providers.__init__.BaseProvider.random_elements(self,elements:ElementsType[T]=('a','b','c'),length:Optional[int]=None,unique:bool=False,use_weighting:Optional[bool]=None)->Sequence[T]
faker.providers.__init__.BaseProvider.random_int(self,min:int=0,max:int=9999,step:int=1)->int
faker.providers.__init__.BaseProvider.random_letter(self)->str
faker.providers.__init__.BaseProvider.random_letters(self,length:int=16)->Sequence[str]
faker.providers.__init__.BaseProvider.random_lowercase_letter(self)->str
faker.providers.__init__.BaseProvider.random_number(self,digits:Optional[int]=None,fix_len:bool=False)->int
faker.providers.__init__.BaseProvider.random_sample(self,elements:ElementsType[T]=('a','b','c'),length:Optional[int]=None)->Sequence[T]
faker.providers.__init__.BaseProvider.random_uppercase_letter(self)->str
faker.providers.__init__.BaseProvider.randomize_nb_elements(self,number:int=10,le:bool=False,ge:bool=False,min:Optional[int]=None,max:Optional[int]=None)->int
faker.providers.__init__.DynamicProvider(self,provider_name:str,elements:Optional[List]=None,generator:Optional[Any]=None)
faker.providers.__init__.DynamicProvider.__init__(self,provider_name:str,elements:Optional[List]=None,generator:Optional[Any]=None)
faker.providers.__init__.DynamicProvider.add_element(self,element:str)->None
faker.providers.__init__.DynamicProvider.get_random_value(self,use_weighting:bool=True)->Any


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/__init__.py----------------------------------------
A:faker.providers.internet.__init__.string->unidecode(string)
A:faker.providers.internet.__init__.email->''.join(self.generator.parse(pattern).split(' '))
A:faker.providers.internet.__init__.all_networks->self._exclude_ipv4_networks(all_networks, _IPv4Constants._excluded_networks)
A:faker.providers.internet.__init__.address_class->self.ipv4_network_class()
A:faker.providers.internet.__init__.private_networks->self._exclude_ipv4_networks(private_networks, _IPv4Constants._excluded_networks)
A:faker.providers.internet.__init__.public_networks->self._exclude_ipv4_networks(public_networks, _IPv4Constants._private_networks + _IPv4Constants._excluded_networks)
A:faker.providers.internet.__init__.subnet->self.generator.random.choice(subnets)
A:faker.providers.internet.__init__.address->str(IPv6Network(address, strict=False))
A:faker.providers.internet.__init__.nested_networks->list(map(_exclude_ipv4_network, networks))
A:faker.providers.internet.__init__.(all_networks, weights)->self._get_all_networks_and_weights(address_class=address_class)
A:faker.providers.internet.__init__.(private_networks, weights)->self._get_private_networks_and_weights(address_class=address_class)
A:faker.providers.internet.__init__.(public_networks, weights)->self._get_public_networks_and_weights(address_class=address_class)
A:faker.providers.internet.__init__.path->self.uri_path(deep=deep)
A:faker.providers.internet.__init__.page->self.uri_page()
A:faker.providers.internet.__init__.extension->self.uri_extension()
A:faker.providers.internet.__init__.value->self.generator.text(20)
A:faker.providers.internet.__init__.placeholder_url->self.random_element(self.image_placeholder_services)
faker.providers.internet.__init__.Provider(BaseProvider)
faker.providers.internet.__init__.Provider._exclude_ipv4_networks(self,networks:List[IPv4Network],networks_to_exclude:List[IPv4Network])->List[IPv4Network]
faker.providers.internet.__init__.Provider._get_all_networks_and_weights(self,address_class:Optional[str]=None)->Tuple[List[IPv4Network], List[int]]
faker.providers.internet.__init__.Provider._get_private_networks_and_weights(self,address_class:Optional[str]=None)->Tuple[List[IPv4Network], List[int]]
faker.providers.internet.__init__.Provider._get_public_networks_and_weights(self,address_class:Optional[str]=None)->Tuple[List[IPv4Network], List[int]]
faker.providers.internet.__init__.Provider._random_ipv4_address_from_subnets(self,subnets:List[IPv4Network],weights:Optional[List[int]]=None,network:bool=False)->str
faker.providers.internet.__init__.Provider._to_ascii(self,string:str)->str
faker.providers.internet.__init__.Provider.ascii_company_email(self)->str
faker.providers.internet.__init__.Provider.ascii_email(self)->str
faker.providers.internet.__init__.Provider.ascii_free_email(self)->str
faker.providers.internet.__init__.Provider.ascii_safe_email(self)->str
faker.providers.internet.__init__.Provider.company_email(self)->str
faker.providers.internet.__init__.Provider.dga(self,year:Optional[int]=None,month:Optional[int]=None,day:Optional[int]=None,tld:Optional[str]=None,length:Optional[int]=None)->str
faker.providers.internet.__init__.Provider.domain_name(self,levels:int=1)->str
faker.providers.internet.__init__.Provider.domain_word(self)->str
faker.providers.internet.__init__.Provider.email(self,safe:bool=True,domain:Optional[str]=None)->str
faker.providers.internet.__init__.Provider.free_email(self)->str
faker.providers.internet.__init__.Provider.free_email_domain(self)->str
faker.providers.internet.__init__.Provider.hostname(self,levels:int=1)->str
faker.providers.internet.__init__.Provider.http_method(self)->str
faker.providers.internet.__init__.Provider.http_status_code(self,include_unassigned:bool=True)->int
faker.providers.internet.__init__.Provider.iana_id(self)->str
faker.providers.internet.__init__.Provider.image_url(self,width:Optional[int]=None,height:Optional[int]=None,placeholder_url:Optional[str]=None)->str
faker.providers.internet.__init__.Provider.ipv4(self,network:bool=False,address_class:Optional[str]=None,private:Optional[str]=None)->str
faker.providers.internet.__init__.Provider.ipv4_network_class(self)->str
faker.providers.internet.__init__.Provider.ipv4_private(self,network:bool=False,address_class:Optional[str]=None)->str
faker.providers.internet.__init__.Provider.ipv4_public(self,network:bool=False,address_class:Optional[str]=None)->str
faker.providers.internet.__init__.Provider.ipv6(self,network:bool=False)->str
faker.providers.internet.__init__.Provider.mac_address(self,multicast:bool=False)->str
faker.providers.internet.__init__.Provider.nic_handle(self,suffix:str='FAKE')->str
faker.providers.internet.__init__.Provider.nic_handles(self,count:int=1,suffix:str='????')->List[str]
faker.providers.internet.__init__.Provider.port_number(self,is_system:bool=False,is_user:bool=False,is_dynamic:bool=False)->int
faker.providers.internet.__init__.Provider.ripe_id(self)->str
faker.providers.internet.__init__.Provider.safe_domain_name(self)->str
faker.providers.internet.__init__.Provider.safe_email(self)->str
faker.providers.internet.__init__.Provider.slug(self,value:Optional[str]=None)->str
faker.providers.internet.__init__.Provider.tld(self)->str
faker.providers.internet.__init__.Provider.uri(self,schemes:Optional[List[str]]=None,deep:Optional[int]=None)->str
faker.providers.internet.__init__.Provider.uri_extension(self)->str
faker.providers.internet.__init__.Provider.uri_page(self)->str
faker.providers.internet.__init__.Provider.uri_path(self,deep:Optional[int]=None)->str
faker.providers.internet.__init__.Provider.url(self,schemes:Optional[List[str]]=None)->str
faker.providers.internet.__init__.Provider.user_name(self)->str
faker.providers.internet.__init__._IPv4Constants


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/it_IT/__init__.py----------------------------------------
faker.providers.internet.it_IT.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/ru_RU/__init__.py----------------------------------------
faker.providers.internet.ru_RU.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/en_AU/__init__.py----------------------------------------
faker.providers.internet.en_AU.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/sk_SK/__init__.py----------------------------------------
faker.providers.internet.sk_SK.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/zh_TW/__init__.py----------------------------------------
faker.providers.internet.zh_TW.__init__.Provider(InternetProvider)
faker.providers.internet.zh_TW.__init__.Provider.domain_word(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/pt_PT/__init__.py----------------------------------------
faker.providers.internet.pt_PT.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/ro_RO/__init__.py----------------------------------------
faker.providers.internet.ro_RO.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/az_AZ/__init__.py----------------------------------------
faker.providers.internet.az_AZ.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/tr_TR/__init__.py----------------------------------------
faker.providers.internet.tr_TR.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/fr_CH/__init__.py----------------------------------------
faker.providers.internet.fr_CH.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/sl_SI/__init__.py----------------------------------------
faker.providers.internet.sl_SI.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/id_ID/__init__.py----------------------------------------
faker.providers.internet.id_ID.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/cs_CZ/__init__.py----------------------------------------
faker.providers.internet.cs_CZ.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/pl_PL/__init__.py----------------------------------------
faker.providers.internet.pl_PL.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/en_NZ/__init__.py----------------------------------------
faker.providers.internet.en_NZ.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/zh_CN/__init__.py----------------------------------------
A:faker.providers.internet.zh_CN.__init__.tlds->OrderedDict((('cn', 0.8), ('net', 0.1), ('com', 0.05), ('org', 0.05)))
A:faker.providers.internet.zh_CN.__init__.domain_word->self.domain_word()
A:faker.providers.internet.zh_CN.__init__.my_tld->self.tld()
A:faker.providers.internet.zh_CN.__init__.my_second_level->self.domain_word()
faker.providers.internet.zh_CN.__init__.Provider(InternetProvider)
faker.providers.internet.zh_CN.__init__.Provider.domain_name(self,levels:int=1)->str
faker.providers.internet.zh_CN.__init__.Provider.domain_word(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/pt_BR/__init__.py----------------------------------------
faker.providers.internet.pt_BR.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/tl_PH/__init__.py----------------------------------------
faker.providers.internet.tl_PH.__init__.Provider(EnPhInternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/bg_BG/__init__.py----------------------------------------
faker.providers.internet.bg_BG.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/no_NO/__init__.py----------------------------------------
faker.providers.internet.no_NO.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/bs_BA/__init__.py----------------------------------------
faker.providers.internet.bs_BA.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/hu_HU/__init__.py----------------------------------------
faker.providers.internet.hu_HU.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/hr_HR/__init__.py----------------------------------------
faker.providers.internet.hr_HR.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/th_TH/__init__.py----------------------------------------
A:faker.providers.internet.th_TH.__init__.tlds->OrderedDict((('in.th', 100), ('co.th', 80), ('go.th', 40), ('or.th', 40), ('ac.th', 20), ('net.th', 10), ('mi.th', 5), ('co', 10), ('net', 20), ('com', 150), ('org', 50)))
faker.providers.internet.th_TH.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/de_DE/__init__.py----------------------------------------
faker.providers.internet.de_DE.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/en_US/__init__.py----------------------------------------
faker.providers.internet.en_US.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/ar_AA/__init__.py----------------------------------------
faker.providers.internet.ar_AA.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/es_CL/__init__.py----------------------------------------
faker.providers.internet.es_CL.__init__.Provider(InternetProvider)
faker.providers.internet.es_CL.__init__.Provider.domain_word(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/uk_UA/__init__.py----------------------------------------
faker.providers.internet.uk_UA.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/ko_KR/__init__.py----------------------------------------
faker.providers.internet.ko_KR.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/es_ES/__init__.py----------------------------------------
faker.providers.internet.es_ES.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/sv_SE/__init__.py----------------------------------------
faker.providers.internet.sv_SE.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/el_GR/__init__.py----------------------------------------
A:faker.providers.internet.el_GR.__init__.company->latinize(company_elements.pop(0))
A:faker.providers.internet.el_GR.__init__.company_elements->latinize(company_elements.pop(0)).split(' ')
A:faker.providers.internet.el_GR.__init__.matched->list(match.group(0))
A:faker.providers.internet.el_GR.__init__.search->'Θ Χ Ψ θ χ ψ ΟΥ ΑΥ ΕΥ Ου Αυ Ευ ου αυ ευ'.split()
A:faker.providers.internet.el_GR.__init__.replace->'TH CH PS th ch ps OU AU EU Ou Au Eu ou au eu'.split()
faker.providers.internet.el_GR.__init__.Provider(InternetProvider)
faker.providers.internet.el_GR.__init__.Provider.domain_word(self)->str
faker.providers.internet.el_GR.__init__.Provider.user_name(self)->str
faker.providers.internet.el_GR.__init__.latinize(value:str)->str
faker.providers.internet.el_GR.__init__.remove_accents(value:str)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/fa_IR/__init__.py----------------------------------------
faker.providers.internet.fa_IR.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/en_PH/__init__.py----------------------------------------
A:faker.providers.internet.en_PH.__init__.email_formats->OrderedDict([('{{user_name}}@{{domain_name}}', 0.75), ('{{user_name}}@{{free_email_domain}}', 0.25)])
A:faker.providers.internet.en_PH.__init__.check->self.random_int(0, 99)
A:faker.providers.internet.en_PH.__init__.company_acronym->self.generator.format('random_company_acronym')
A:faker.providers.internet.en_PH.__init__.company_type->self.generator.format('company_type')
A:faker.providers.internet.en_PH.__init__.name_part->self.generator.format('random_company_adjective')
A:faker.providers.internet.en_PH.__init__.company_noun_chain->self.generator.format('random_company_noun_chain')
A:faker.providers.internet.en_PH.__init__.company_nouns->self.generator.format('random_company_noun_chain').split(' ')
A:faker.providers.internet.en_PH.__init__.acronym->''.join([word[0] for word in company_elements])
faker.providers.internet.en_PH.__init__.Provider(InternetProvider)
faker.providers.internet.en_PH.__init__.Provider.domain_word(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/de_AT/__init__.py----------------------------------------
faker.providers.internet.de_AT.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/fi_FI/__init__.py----------------------------------------
faker.providers.internet.fi_FI.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/es_AR/__init__.py----------------------------------------
faker.providers.internet.es_AR.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/fr_FR/__init__.py----------------------------------------
faker.providers.internet.fr_FR.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/en_GB/__init__.py----------------------------------------
faker.providers.internet.en_GB.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/bn_BD/__init__.py----------------------------------------
faker.providers.internet.bn_BD.__init__.Provider(InternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/ja_JP/__init__.py----------------------------------------
faker.providers.internet.ja_JP.__init__.Provider(InternetProvider)
faker.providers.internet.ja_JP.__init__.Provider.domain_word(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/internet/fil_PH/__init__.py----------------------------------------
faker.providers.internet.fil_PH.__init__.Provider(EnPhInternetProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/__init__.py----------------------------------------
A:faker.providers.date_time.__init__.dt->timestamp_to_datetime(datapoint, tzinfo)
A:faker.providers.date_time.__init__.pick->datetime.datetime.fromtimestamp(timestamp, tzinfo)
A:faker.providers.date_time.__init__.regex->re.compile(timedelta_pattern)
A:faker.providers.date_time.__init__.start_datetime->self._parse_start_datetime('now')
A:faker.providers.date_time.__init__.end_datetime->self._parse_end_datetime(end_datetime)
A:faker.providers.date_time.__init__.ts->self._rand_seconds(start_date, end_date)
A:faker.providers.date_time.__init__.parts->parts.groupdict().groupdict()
A:faker.providers.date_time.__init__.time_params[name_]->int(param_)
A:faker.providers.date_time.__init__.time_params->cls._parse_date_string(value)
A:faker.providers.date_time.__init__.now->datetime.datetime.now(tzinfo).date()
A:faker.providers.date_time.__init__.today->datetime.date.today()
A:faker.providers.date_time.__init__.start_date->change_year(now, -(maximum_age + 1))
A:faker.providers.date_time.__init__.end_date->change_year(now, -minimum_age)
A:faker.providers.date_time.__init__.timestamp->self._rand_seconds(datetime_start_, datetime_end_)
A:faker.providers.date_time.__init__.this_century_start->dtdate(today.year - today.year % 100, 1, 1)
A:faker.providers.date_time.__init__.next_century_start->dtdate(this_century_start.year + 100, 1, 1)
A:faker.providers.date_time.__init__.this_decade_start->dtdate(today.year - today.year % 10, 1, 1)
A:faker.providers.date_time.__init__.next_decade_start->dtdate(this_decade_start.year + 10, 1, 1)
A:faker.providers.date_time.__init__.this_year_start->datetime.date.today().replace(month=1, day=1)
A:faker.providers.date_time.__init__.next_year_start->dtdate(today.year + 1, 1, 1)
A:faker.providers.date_time.__init__.this_month_start->datetime.date.today().replace(day=1)
A:faker.providers.date_time.__init__.start_date_->self._parse_date_time(start_date, tzinfo=tzinfo)
A:faker.providers.date_time.__init__.end_date_->self._parse_date_time(end_date, tzinfo=tzinfo)
A:faker.providers.date_time.__init__.precision_->self._parse_timedelta((end_date_ - start_date_) / 30 if precision is None else precision)
A:faker.providers.date_time.__init__.dob->self.date_time_ad(tzinfo=tzinfo, start_datetime=start_date, end_datetime=end_date).date()
faker.providers.date_dttime.__init__.ParseError(ValueError)
faker.providers.date_dttime.__init__.Provider(BaseProvider)
faker.providers.date_dttime.__init__.Provider._parse_date(cls,value:DateParseType)->dtdate
faker.providers.date_dttime.__init__.Provider._parse_date_dttime(cls,value:DateParseType,tzinfo:Optional[TzInfo]=None)->int
faker.providers.date_dttime.__init__.Provider._parse_date_string(cls,value:str)->Dict[str, float]
faker.providers.date_dttime.__init__.Provider._parse_end_datedttime(cls,value:Optional[DateParseType])->int
faker.providers.date_dttime.__init__.Provider._parse_start_datedttime(cls,value:Optional[DateParseType])->int
faker.providers.date_dttime.__init__.Provider.am_pm(self)->str
faker.providers.date_dttime.__init__.Provider.century(self)->str
faker.providers.date_dttime.__init__.Provider.date(self,pattern:str='%Y-%m-%d',end_datetime:Optional[DateParseType]=None)->str
faker.providers.date_dttime.__init__.Provider.date_between(self,start_date:DateParseType='-30y',end_date:DateParseType='today')->dtdate
faker.providers.date_dttime.__init__.Provider.date_between_dates(self,date_start:Optional[DateParseType]=None,date_end:Optional[DateParseType]=None)->dtdate
faker.providers.date_dttime.__init__.Provider.date_dttime(self,tzinfo:Optional[TzInfo]=None,end_datetime:Optional[DateParseType]=None)->datetime
faker.providers.date_dttime.__init__.Provider.date_dttime_ad(self,tzinfo:Optional[TzInfo]=None,end_datetime:Optional[DateParseType]=None,start_datetime:Optional[DateParseType]=None)->datetime
faker.providers.date_dttime.__init__.Provider.date_dttime_between(self,start_date:DateParseType='-30y',end_date:DateParseType='now',tzinfo:Optional[TzInfo]=None)->datetime
faker.providers.date_dttime.__init__.Provider.date_dttime_between_dates(self,datetime_start:Optional[DateParseType]=None,datetime_end:Optional[DateParseType]=None,tzinfo:Optional[TzInfo]=None)->datetime
faker.providers.date_dttime.__init__.Provider.date_dttime_this_century(self,before_now:bool=True,after_now:bool=False,tzinfo:Optional[TzInfo]=None)->datetime
faker.providers.date_dttime.__init__.Provider.date_dttime_this_decade(self,before_now:bool=True,after_now:bool=False,tzinfo:Optional[TzInfo]=None)->datetime
faker.providers.date_dttime.__init__.Provider.date_dttime_this_month(self,before_now:bool=True,after_now:bool=False,tzinfo:Optional[TzInfo]=None)->datetime
faker.providers.date_dttime.__init__.Provider.date_dttime_this_year(self,before_now:bool=True,after_now:bool=False,tzinfo:Optional[TzInfo]=None)->datetime
faker.providers.date_dttime.__init__.Provider.date_object(self,end_datetime:Optional[datetime]=None)->dtdate
faker.providers.date_dttime.__init__.Provider.date_of_birth(self,tzinfo:Optional[TzInfo]=None,minimum_age:int=0,maximum_age:int=115)->dtdate
faker.providers.date_dttime.__init__.Provider.date_this_century(self,before_today:bool=True,after_today:bool=False)->dtdate
faker.providers.date_dttime.__init__.Provider.date_this_decade(self,before_today:bool=True,after_today:bool=False)->dtdate
faker.providers.date_dttime.__init__.Provider.date_this_month(self,before_today:bool=True,after_today:bool=False)->dtdate
faker.providers.date_dttime.__init__.Provider.date_this_year(self,before_today:bool=True,after_today:bool=False)->dtdate
faker.providers.date_dttime.__init__.Provider.day_of_month(self)->str
faker.providers.date_dttime.__init__.Provider.day_of_week(self)->str
faker.providers.date_dttime.__init__.Provider.dttime(self,pattern:str='%H:%M:%S',end_datetime:Optional[DateParseType]=None)->str
faker.providers.date_dttime.__init__.Provider.dttime_delta(self,end_datetime:Optional[DateParseType]=None)->timedelta
faker.providers.date_dttime.__init__.Provider.dttime_object(self,end_datetime:Optional[DateParseType]=None)->dttime
faker.providers.date_dttime.__init__.Provider.dttime_series(self,start_date:DateParseType='-30d',end_date:DateParseType='now',precision:Optional[float]=None,distrib:Optional[Callable[[datetime],float]]=None,tzinfo:Optional[TzInfo]=None)->Iterator[Tuple[datetime, Any]]
faker.providers.date_dttime.__init__.Provider.dttimezone(self)->str
faker.providers.date_dttime.__init__.Provider.future_date(self,end_date:DateParseType='+30d',tzinfo:Optional[TzInfo]=None)->dtdate
faker.providers.date_dttime.__init__.Provider.future_datedttime(self,end_date:DateParseType='+30d',tzinfo:Optional[TzInfo]=None)->datetime
faker.providers.date_dttime.__init__.Provider.iso8601(self,tzinfo:Optional[TzInfo]=None,end_datetime:Optional[DateParseType]=None,sep:str='T',timespec:str='auto')->str
faker.providers.date_dttime.__init__.Provider.month(self)->str
faker.providers.date_dttime.__init__.Provider.month_name(self)->str
faker.providers.date_dttime.__init__.Provider.past_date(self,start_date:DateParseType='-30d',tzinfo:Optional[TzInfo]=None)->dtdate
faker.providers.date_dttime.__init__.Provider.past_datedttime(self,start_date:DateParseType='-30d',tzinfo:Optional[TzInfo]=None)->datetime
faker.providers.date_dttime.__init__.Provider.pydttimezone(self,*args:Any,**kwargs:Any)->Optional[TzInfo]
faker.providers.date_dttime.__init__.Provider.unix_dttime(self,end_datetime:Optional[DateParseType]=None,start_datetime:Optional[DateParseType]=None)->float
faker.providers.date_dttime.__init__.Provider.year(self)->str
faker.providers.date_dttime.__init__.change_year(current_date:dtdate,year_diff:int)->dtdate
faker.providers.date_dttime.__init__.convert_dttimestamp_to_datedttime(timestamp:Union[int,float],tzinfo:TzInfo)->datetime
faker.providers.date_dttime.__init__.datedttime_to_dttimestamp(dt:Union[dtdate,datetime])->int
faker.providers.date_dttime.__init__.dttimestamp_to_datedttime(timestamp:Union[int,float],tzinfo:Optional[TzInfo])->datetime
faker.providers.date_time.__init__.ParseError(ValueError)
faker.providers.date_time.__init__.Provider(BaseProvider)
faker.providers.date_time.__init__.Provider._parse_date(cls,value:DateParseType)->dtdate
faker.providers.date_time.__init__.Provider._parse_date_string(cls,value:str)->Dict[str, float]
faker.providers.date_time.__init__.Provider._parse_date_time(cls,value:DateParseType,tzinfo:Optional[TzInfo]=None)->int
faker.providers.date_time.__init__.Provider._parse_end_datetime(cls,value:Optional[DateParseType])->int
faker.providers.date_time.__init__.Provider._parse_start_datetime(cls,value:Optional[DateParseType])->int
faker.providers.date_time.__init__.Provider._parse_timedelta(cls,value:Union[timedelta,str,float])->Union[float, int]
faker.providers.date_time.__init__.Provider.am_pm(self)->str
faker.providers.date_time.__init__.Provider.century(self)->str
faker.providers.date_time.__init__.Provider.date(self,pattern:str='%Y-%m-%d',end_datetime:Optional[DateParseType]=None)->str
faker.providers.date_time.__init__.Provider.date_between(self,start_date:DateParseType='-30y',end_date:DateParseType='today')->dtdate
faker.providers.date_time.__init__.Provider.date_between_dates(self,date_start:Optional[DateParseType]=None,date_end:Optional[DateParseType]=None)->dtdate
faker.providers.date_time.__init__.Provider.date_object(self,end_datetime:Optional[datetime]=None)->dtdate
faker.providers.date_time.__init__.Provider.date_of_birth(self,tzinfo:Optional[TzInfo]=None,minimum_age:int=0,maximum_age:int=115)->dtdate
faker.providers.date_time.__init__.Provider.date_this_century(self,before_today:bool=True,after_today:bool=False)->dtdate
faker.providers.date_time.__init__.Provider.date_this_decade(self,before_today:bool=True,after_today:bool=False)->dtdate
faker.providers.date_time.__init__.Provider.date_this_month(self,before_today:bool=True,after_today:bool=False)->dtdate
faker.providers.date_time.__init__.Provider.date_this_year(self,before_today:bool=True,after_today:bool=False)->dtdate
faker.providers.date_time.__init__.Provider.date_time(self,tzinfo:Optional[TzInfo]=None,end_datetime:Optional[DateParseType]=None)->datetime
faker.providers.date_time.__init__.Provider.date_time_ad(self,tzinfo:Optional[TzInfo]=None,end_datetime:Optional[DateParseType]=None,start_datetime:Optional[DateParseType]=None)->datetime
faker.providers.date_time.__init__.Provider.date_time_between(self,start_date:DateParseType='-30y',end_date:DateParseType='now',tzinfo:Optional[TzInfo]=None)->datetime
faker.providers.date_time.__init__.Provider.date_time_between_dates(self,datetime_start:Optional[DateParseType]=None,datetime_end:Optional[DateParseType]=None,tzinfo:Optional[TzInfo]=None)->datetime
faker.providers.date_time.__init__.Provider.date_time_this_century(self,before_now:bool=True,after_now:bool=False,tzinfo:Optional[TzInfo]=None)->datetime
faker.providers.date_time.__init__.Provider.date_time_this_decade(self,before_now:bool=True,after_now:bool=False,tzinfo:Optional[TzInfo]=None)->datetime
faker.providers.date_time.__init__.Provider.date_time_this_month(self,before_now:bool=True,after_now:bool=False,tzinfo:Optional[TzInfo]=None)->datetime
faker.providers.date_time.__init__.Provider.date_time_this_year(self,before_now:bool=True,after_now:bool=False,tzinfo:Optional[TzInfo]=None)->datetime
faker.providers.date_time.__init__.Provider.day_of_month(self)->str
faker.providers.date_time.__init__.Provider.day_of_week(self)->str
faker.providers.date_time.__init__.Provider.future_date(self,end_date:DateParseType='+30d',tzinfo:Optional[TzInfo]=None)->dtdate
faker.providers.date_time.__init__.Provider.future_datetime(self,end_date:DateParseType='+30d',tzinfo:Optional[TzInfo]=None)->datetime
faker.providers.date_time.__init__.Provider.iso8601(self,tzinfo:Optional[TzInfo]=None,end_datetime:Optional[DateParseType]=None,sep:str='T',timespec:str='auto')->str
faker.providers.date_time.__init__.Provider.month(self)->str
faker.providers.date_time.__init__.Provider.month_name(self)->str
faker.providers.date_time.__init__.Provider.past_date(self,start_date:DateParseType='-30d',tzinfo:Optional[TzInfo]=None)->dtdate
faker.providers.date_time.__init__.Provider.past_datetime(self,start_date:DateParseType='-30d',tzinfo:Optional[TzInfo]=None)->datetime
faker.providers.date_time.__init__.Provider.pytimezone(self,*args:Any,**kwargs:Any)->Optional[TzInfo]
faker.providers.date_time.__init__.Provider.time(self,pattern:str='%H:%M:%S',end_datetime:Optional[DateParseType]=None)->str
faker.providers.date_time.__init__.Provider.time_delta(self,end_datetime:Optional[DateParseType]=None)->timedelta
faker.providers.date_time.__init__.Provider.time_object(self,end_datetime:Optional[DateParseType]=None)->dttime
faker.providers.date_time.__init__.Provider.time_series(self,start_date:DateParseType='-30d',end_date:DateParseType='now',precision:Optional[float]=None,distrib:Optional[Callable[[datetime],float]]=None,tzinfo:Optional[TzInfo]=None)->Iterator[Tuple[datetime, Any]]
faker.providers.date_time.__init__.Provider.timezone(self)->str
faker.providers.date_time.__init__.Provider.unix_time(self,end_datetime:Optional[DateParseType]=None,start_datetime:Optional[DateParseType]=None)->float
faker.providers.date_time.__init__.Provider.year(self)->str
faker.providers.date_time.__init__.change_year(current_date:dtdate,year_diff:int)->dtdate
faker.providers.date_time.__init__.convert_timestamp_to_datetime(timestamp:Union[int,float],tzinfo:TzInfo)->datetime
faker.providers.date_time.__init__.datetime_to_timestamp(dt:Union[dtdate,datetime])->int
faker.providers.date_time.__init__.timestamp_to_datetime(timestamp:Union[int,float],tzinfo:Optional[TzInfo])->datetime


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/it_IT/__init__.py----------------------------------------
A:faker.providers.date_time.it_IT.__init__.day->self.date('%w')
A:faker.providers.date_time.it_IT.__init__.month->self.month()
faker.providers.date_dttime.it_IT.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.it_IT.__init__.Provider.day_of_week(self)
faker.providers.date_dttime.it_IT.__init__.Provider.month_name(self)
faker.providers.date_time.it_IT.__init__.Provider(DateTimeProvider)
faker.providers.date_time.it_IT.__init__.Provider.day_of_week(self)
faker.providers.date_time.it_IT.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/fr_CA/__init__.py----------------------------------------
faker.providers.date_dttime.fr_CA.__init__.Provider(self,*args:Any,**kwargs:Any)
faker.providers.date_time.fr_CA.__init__.Provider(self,*args:Any,**kwargs:Any)
faker.providers.date_time.fr_CA.__init__.Provider.__init__(self,*args:Any,**kwargs:Any)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/ru_RU/__init__.py----------------------------------------
A:faker.providers.date_time.ru_RU.__init__.day->self.date('%w')
A:faker.providers.date_time.ru_RU.__init__.month->self.month()
faker.providers.date_dttime.ru_RU.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.ru_RU.__init__.Provider.day_of_week(self)->str
faker.providers.date_dttime.ru_RU.__init__.Provider.month_name(self)->str
faker.providers.date_time.ru_RU.__init__.Provider(DateTimeProvider)
faker.providers.date_time.ru_RU.__init__.Provider.day_of_week(self)->str
faker.providers.date_time.ru_RU.__init__.Provider.month_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/sk_SK/__init__.py----------------------------------------
A:faker.providers.date_time.sk_SK.__init__.day->self.date('%w')
A:faker.providers.date_time.sk_SK.__init__.month->self.month()
faker.providers.date_dttime.sk_SK.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.sk_SK.__init__.Provider.day_of_week(self)
faker.providers.date_dttime.sk_SK.__init__.Provider.month_name(self)
faker.providers.date_time.sk_SK.__init__.Provider(DateTimeProvider)
faker.providers.date_time.sk_SK.__init__.Provider.day_of_week(self)
faker.providers.date_time.sk_SK.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/zh_TW/__init__.py----------------------------------------
A:faker.providers.date_time.zh_TW.__init__.day->self.date('%w')
A:faker.providers.date_time.zh_TW.__init__.month->self.month()
A:faker.providers.date_time.zh_TW.__init__.year->self.year()
faker.providers.date_dttime.zh_TW.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.zh_TW.__init__.Provider.day_of_week(self)->str
faker.providers.date_dttime.zh_TW.__init__.Provider.minguo_year(self)->str
faker.providers.date_dttime.zh_TW.__init__.Provider.month_name(self)->str
faker.providers.date_time.zh_TW.__init__.Provider(DateTimeProvider)
faker.providers.date_time.zh_TW.__init__.Provider.day_of_week(self)->str
faker.providers.date_time.zh_TW.__init__.Provider.minguo_year(self)->str
faker.providers.date_time.zh_TW.__init__.Provider.month_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/pt_PT/__init__.py----------------------------------------
A:faker.providers.date_time.pt_PT.__init__.day->self.date('%w')
A:faker.providers.date_time.pt_PT.__init__.month->self.month()
faker.providers.date_dttime.pt_PT.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.pt_PT.__init__.Provider.day_of_week(self)
faker.providers.date_dttime.pt_PT.__init__.Provider.month_name(self)
faker.providers.date_time.pt_PT.__init__.Provider(DateTimeProvider)
faker.providers.date_time.pt_PT.__init__.Provider.day_of_week(self)
faker.providers.date_time.pt_PT.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/ro_RO/__init__.py----------------------------------------
A:faker.providers.date_time.ro_RO.__init__.day->self.date('%w')
A:faker.providers.date_time.ro_RO.__init__.month->self.month()
faker.providers.date_dttime.ro_RO.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.ro_RO.__init__.Provider.day_of_week(self)
faker.providers.date_dttime.ro_RO.__init__.Provider.month_name(self)
faker.providers.date_time.ro_RO.__init__.Provider(DateTimeProvider)
faker.providers.date_time.ro_RO.__init__.Provider.day_of_week(self)
faker.providers.date_time.ro_RO.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/az_AZ/__init__.py----------------------------------------
A:faker.providers.date_time.az_AZ.__init__.day->self.date('%w')
A:faker.providers.date_time.az_AZ.__init__.month->self.month()
faker.providers.date_dttime.az_AZ.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.az_AZ.__init__.Provider.day_of_week(self)
faker.providers.date_dttime.az_AZ.__init__.Provider.month_name(self)
faker.providers.date_time.az_AZ.__init__.Provider(DateTimeProvider)
faker.providers.date_time.az_AZ.__init__.Provider.day_of_week(self)
faker.providers.date_time.az_AZ.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/tr_TR/__init__.py----------------------------------------
A:faker.providers.date_time.tr_TR.__init__.day->self.date('%w')
A:faker.providers.date_time.tr_TR.__init__.month->self.month()
faker.providers.date_dttime.tr_TR.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.tr_TR.__init__.Provider.day_of_week(self)
faker.providers.date_dttime.tr_TR.__init__.Provider.month_name(self)
faker.providers.date_time.tr_TR.__init__.Provider(DateTimeProvider)
faker.providers.date_time.tr_TR.__init__.Provider.day_of_week(self)
faker.providers.date_time.tr_TR.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/hy_AM/__init__.py----------------------------------------
A:faker.providers.date_time.hy_AM.__init__.day->self.date('%w')
A:faker.providers.date_time.hy_AM.__init__.month->self.month()
faker.providers.date_dttime.hy_AM.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.hy_AM.__init__.Provider.day_of_week(self)
faker.providers.date_dttime.hy_AM.__init__.Provider.month_name(self)
faker.providers.date_time.hy_AM.__init__.Provider(DateTimeProvider)
faker.providers.date_time.hy_AM.__init__.Provider.day_of_week(self)
faker.providers.date_time.hy_AM.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/sl_SI/__init__.py----------------------------------------
A:faker.providers.date_time.sl_SI.__init__.day->self.date('%w')
A:faker.providers.date_time.sl_SI.__init__.month->self.month()
faker.providers.date_dttime.sl_SI.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.sl_SI.__init__.Provider.day_of_week(self)->str
faker.providers.date_dttime.sl_SI.__init__.Provider.month_name(self)->str
faker.providers.date_time.sl_SI.__init__.Provider(DateTimeProvider)
faker.providers.date_time.sl_SI.__init__.Provider.day_of_week(self)->str
faker.providers.date_time.sl_SI.__init__.Provider.month_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/id_ID/__init__.py----------------------------------------
A:faker.providers.date_time.id_ID.__init__.day->self.date('%w')
A:faker.providers.date_time.id_ID.__init__.month->self.month()
faker.providers.date_dttime.id_ID.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.id_ID.__init__.Provider.day_of_week(self)->str
faker.providers.date_dttime.id_ID.__init__.Provider.month_name(self)->str
faker.providers.date_time.id_ID.__init__.Provider(DateTimeProvider)
faker.providers.date_time.id_ID.__init__.Provider.day_of_week(self)->str
faker.providers.date_time.id_ID.__init__.Provider.month_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/cs_CZ/__init__.py----------------------------------------
A:faker.providers.date_time.cs_CZ.__init__.day->self.date('%w')
A:faker.providers.date_time.cs_CZ.__init__.month->self.month()
faker.providers.date_dttime.cs_CZ.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.cs_CZ.__init__.Provider.day_of_week(self)
faker.providers.date_dttime.cs_CZ.__init__.Provider.month_name(self)
faker.providers.date_time.cs_CZ.__init__.Provider(DateTimeProvider)
faker.providers.date_time.cs_CZ.__init__.Provider.day_of_week(self)
faker.providers.date_time.cs_CZ.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/pl_PL/__init__.py----------------------------------------
A:faker.providers.date_time.pl_PL.__init__.day->self.date('%w')
A:faker.providers.date_time.pl_PL.__init__.month->self.month()
faker.providers.date_dttime.pl_PL.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.pl_PL.__init__.Provider.day_of_week(self)
faker.providers.date_dttime.pl_PL.__init__.Provider.month_name(self)
faker.providers.date_time.pl_PL.__init__.Provider(DateTimeProvider)
faker.providers.date_time.pl_PL.__init__.Provider.day_of_week(self)
faker.providers.date_time.pl_PL.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/da_DK/__init__.py----------------------------------------
A:faker.providers.date_time.da_DK.__init__.day->self.date('%w')
A:faker.providers.date_time.da_DK.__init__.month->self.month()
faker.providers.date_dttime.da_DK.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.da_DK.__init__.Provider.day_of_week(self)
faker.providers.date_dttime.da_DK.__init__.Provider.month_name(self)
faker.providers.date_time.da_DK.__init__.Provider(DateTimeProvider)
faker.providers.date_time.da_DK.__init__.Provider.day_of_week(self)
faker.providers.date_time.da_DK.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/zh_CN/__init__.py----------------------------------------
A:faker.providers.date_time.zh_CN.__init__.day->self.date('%w')
A:faker.providers.date_time.zh_CN.__init__.month->self.month()
faker.providers.date_dttime.zh_CN.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.zh_CN.__init__.Provider.day_of_week(self)->str
faker.providers.date_dttime.zh_CN.__init__.Provider.month_name(self)->str
faker.providers.date_time.zh_CN.__init__.Provider(DateTimeProvider)
faker.providers.date_time.zh_CN.__init__.Provider.day_of_week(self)->str
faker.providers.date_time.zh_CN.__init__.Provider.month_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/pt_BR/__init__.py----------------------------------------
A:faker.providers.date_time.pt_BR.__init__.day->self.date('%w')
A:faker.providers.date_time.pt_BR.__init__.month->self.month()
faker.providers.date_dttime.pt_BR.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.pt_BR.__init__.Provider.day_of_week(self)
faker.providers.date_dttime.pt_BR.__init__.Provider.month_name(self)
faker.providers.date_time.pt_BR.__init__.Provider(DateTimeProvider)
faker.providers.date_time.pt_BR.__init__.Provider.day_of_week(self)
faker.providers.date_time.pt_BR.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/nl_NL/__init__.py----------------------------------------
A:faker.providers.date_time.nl_NL.__init__.day->self.date('%w')
A:faker.providers.date_time.nl_NL.__init__.month->self.month()
faker.providers.date_dttime.nl_NL.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.nl_NL.__init__.Provider.day_of_week(self)
faker.providers.date_dttime.nl_NL.__init__.Provider.month_name(self)
faker.providers.date_time.nl_NL.__init__.Provider(DateTimeProvider)
faker.providers.date_time.nl_NL.__init__.Provider.day_of_week(self)
faker.providers.date_time.nl_NL.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/tl_PH/__init__.py----------------------------------------
faker.providers.date_dttime.tl_PH.__init__.Provider(FilPhProvider)
faker.providers.date_time.tl_PH.__init__.Provider(FilPhProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/es/__init__.py----------------------------------------
A:faker.providers.date_time.es.__init__.day->self.date('%w')
A:faker.providers.date_time.es.__init__.month->self.month()
faker.providers.date_dttime.es.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.es.__init__.Provider.day_of_week(self)
faker.providers.date_dttime.es.__init__.Provider.month_name(self)
faker.providers.date_time.es.__init__.Provider(DateTimeProvider)
faker.providers.date_time.es.__init__.Provider.day_of_week(self)
faker.providers.date_time.es.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/no_NO/__init__.py----------------------------------------
A:faker.providers.date_time.no_NO.__init__.day->self.date('%w')
A:faker.providers.date_time.no_NO.__init__.month->self.month()
faker.providers.date_dttime.no_NO.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.no_NO.__init__.Provider.day_of_week(self)->str
faker.providers.date_dttime.no_NO.__init__.Provider.month_name(self)->str
faker.providers.date_time.no_NO.__init__.Provider(DateTimeProvider)
faker.providers.date_time.no_NO.__init__.Provider.day_of_week(self)->str
faker.providers.date_time.no_NO.__init__.Provider.month_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/hi_IN/__init__.py----------------------------------------
A:faker.providers.date_time.hi_IN.__init__.day->self.date('%w')
A:faker.providers.date_time.hi_IN.__init__.month->self.month()
faker.providers.date_dttime.hi_IN.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.hi_IN.__init__.Provider.day_of_week(self)->str
faker.providers.date_dttime.hi_IN.__init__.Provider.month_name(self)->str
faker.providers.date_time.hi_IN.__init__.Provider(DateTimeProvider)
faker.providers.date_time.hi_IN.__init__.Provider.day_of_week(self)->str
faker.providers.date_time.hi_IN.__init__.Provider.month_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/hu_HU/__init__.py----------------------------------------
A:faker.providers.date_time.hu_HU.__init__.day->self.date('%w')
A:faker.providers.date_time.hu_HU.__init__.month->self.month()
faker.providers.date_dttime.hu_HU.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.hu_HU.__init__.Provider.day_of_week(self)->str
faker.providers.date_dttime.hu_HU.__init__.Provider.month_name(self)->str
faker.providers.date_time.hu_HU.__init__.Provider(DateTimeProvider)
faker.providers.date_time.hu_HU.__init__.Provider.day_of_week(self)->str
faker.providers.date_time.hu_HU.__init__.Provider.month_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/hr_HR/__init__.py----------------------------------------
A:faker.providers.date_time.hr_HR.__init__.day->self.date('%w')
A:faker.providers.date_time.hr_HR.__init__.month->self.month()
faker.providers.date_dttime.hr_HR.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.hr_HR.__init__.Provider.day_of_week(self)->str
faker.providers.date_dttime.hr_HR.__init__.Provider.month_name(self)->str
faker.providers.date_time.hr_HR.__init__.Provider(DateTimeProvider)
faker.providers.date_time.hr_HR.__init__.Provider.day_of_week(self)->str
faker.providers.date_time.hr_HR.__init__.Provider.month_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/th_TH/__init__.py----------------------------------------
A:faker.providers.date_time.th_TH.__init__._HA_TH_DIGITS->str.maketrans('0123456789', '๐๑๒๓๔๕๖๗๘๙')
A:faker.providers.date_time.th_TH.__init__.str_->_std_strftime(dt_obj, fmt_char)
A:faker.providers.date_time.th_TH.__init__.year_G->int(dt_obj.strftime('%G'))
A:faker.providers.date_time.th_TH.__init__.fmt_len->len(fmt)
A:faker.providers.date_time.th_TH.__init__.thaidate_text->thaidate_text.translate(_HA_TH_DIGITS).translate(_HA_TH_DIGITS)
A:faker.providers.date_time.th_TH.__init__.text->text.translate(_HA_TH_DIGITS).translate(_HA_TH_DIGITS)
faker.providers.date_dttime.th_TH.__init__.Provider(DateParseTypeProvider)
faker.providers.date_dttime.th_TH.__init__.Provider.century(self,thai_digit:bool=False,buddhist_era:bool=True)->str
faker.providers.date_dttime.th_TH.__init__.Provider.date(self,pattern:str='%-d%b%Y',end_datetime:Optional[DateParseType]=None,thai_digit:bool=False,buddhist_era:bool=True)->str
faker.providers.date_dttime.th_TH.__init__.Provider.dttime(self,pattern:str='%H:%M:%S',end_datetime:Optional[DateParseType]=None,thai_digit:bool=False)->str
faker.providers.date_dttime.th_TH.__init__._std_strfdttime(dt_obj:datetime,fmt_char:str)->str
faker.providers.date_dttime.th_TH.__init__._thai_strfdttime(dt_obj:datetime,fmt_char:str,buddhist_era:bool=True)->str
faker.providers.date_dttime.th_TH.__init__.thai_strfdttime(dt_obj:datetime,fmt:str='%-d%b%Y',thai_digit:bool=False,buddhist_era:bool=True)->str
faker.providers.date_time.th_TH.__init__.Provider(DateParseTypeProvider)
faker.providers.date_time.th_TH.__init__.Provider.century(self,thai_digit:bool=False,buddhist_era:bool=True)->str
faker.providers.date_time.th_TH.__init__.Provider.date(self,pattern:str='%-d%b%Y',end_datetime:Optional[DateParseType]=None,thai_digit:bool=False,buddhist_era:bool=True)->str
faker.providers.date_time.th_TH.__init__.Provider.time(self,pattern:str='%H:%M:%S',end_datetime:Optional[DateParseType]=None,thai_digit:bool=False)->str
faker.providers.date_time.th_TH.__init__._std_strftime(dt_obj:datetime,fmt_char:str)->str
faker.providers.date_time.th_TH.__init__._thai_strftime(dt_obj:datetime,fmt_char:str,buddhist_era:bool=True)->str
faker.providers.date_time.th_TH.__init__.thai_strftime(dt_obj:datetime,fmt:str='%-d%b%Y',thai_digit:bool=False,buddhist_era:bool=True)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/de_DE/__init__.py----------------------------------------
A:faker.providers.date_time.de_DE.__init__.day->self.date('%w')
A:faker.providers.date_time.de_DE.__init__.month->self.month()
faker.providers.date_dttime.de_DE.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.de_DE.__init__.Provider.day_of_week(self)
faker.providers.date_dttime.de_DE.__init__.Provider.month_name(self)
faker.providers.date_time.de_DE.__init__.Provider(DateTimeProvider)
faker.providers.date_time.de_DE.__init__.Provider.day_of_week(self)
faker.providers.date_time.de_DE.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/en_US/__init__.py----------------------------------------
faker.providers.date_dttime.en_US.__init__.Provider(DateTimeProvider)
faker.providers.date_time.en_US.__init__.Provider(DateTimeProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/ar_AA/__init__.py----------------------------------------
A:faker.providers.date_time.ar_AA.__init__.month->self.date('%m')
A:faker.providers.date_time.ar_AA.__init__.date->self.date('%p')
A:faker.providers.date_time.ar_AA.__init__.day->self.date('%w')
faker.providers.date_dttime.ar_AA.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.ar_AA.__init__.Provider.am_pm(self)->str
faker.providers.date_dttime.ar_AA.__init__.Provider.day_of_week(self)->str
faker.providers.date_dttime.ar_AA.__init__.Provider.month_name(self)->str
faker.providers.date_time.ar_AA.__init__.Provider(DateTimeProvider)
faker.providers.date_time.ar_AA.__init__.Provider.am_pm(self)->str
faker.providers.date_time.ar_AA.__init__.Provider.day_of_week(self)->str
faker.providers.date_time.ar_AA.__init__.Provider.month_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/ar_EG/__init__.py----------------------------------------
faker.providers.date_dttime.ar_EG.__init__.Provider(ArabicDateTimeProvider)
faker.providers.date_time.ar_EG.__init__.Provider(ArabicDateTimeProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/es_CL/__init__.py----------------------------------------
faker.providers.date_dttime.es_CL.__init__.Provider(DateTimeProvider)
faker.providers.date_time.es_CL.__init__.Provider(DateTimeProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/ko_KR/__init__.py----------------------------------------
A:faker.providers.date_time.ko_KR.__init__.day->self.date('%w')
A:faker.providers.date_time.ko_KR.__init__.month->self.month()
faker.providers.date_dttime.ko_KR.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.ko_KR.__init__.Provider.day_of_week(self)->str
faker.providers.date_dttime.ko_KR.__init__.Provider.month_name(self)->str
faker.providers.date_time.ko_KR.__init__.Provider(DateTimeProvider)
faker.providers.date_time.ko_KR.__init__.Provider.day_of_week(self)->str
faker.providers.date_time.ko_KR.__init__.Provider.month_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/es_ES/__init__.py----------------------------------------
faker.providers.date_dttime.es_ES.__init__.Provider(DateTimeProvider)
faker.providers.date_time.es_ES.__init__.Provider(DateTimeProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/el_GR/__init__.py----------------------------------------
A:faker.providers.date_time.el_GR.__init__.day->self.date('%w')
A:faker.providers.date_time.el_GR.__init__.month->self.month()
faker.providers.date_dttime.el_GR.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.el_GR.__init__.Provider.day_of_week(self)
faker.providers.date_dttime.el_GR.__init__.Provider.month_name(self)
faker.providers.date_time.el_GR.__init__.Provider(DateTimeProvider)
faker.providers.date_time.el_GR.__init__.Provider.day_of_week(self)
faker.providers.date_time.el_GR.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/vi_VN/__init__.py----------------------------------------
A:faker.providers.date_time.vi_VN.__init__.day->self.date('%w')
A:faker.providers.date_time.vi_VN.__init__.month->self.month()
faker.providers.date_dttime.vi_VN.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.vi_VN.__init__.Provider.day_of_week(self)
faker.providers.date_dttime.vi_VN.__init__.Provider.month_name(self)
faker.providers.date_time.vi_VN.__init__.Provider(DateTimeProvider)
faker.providers.date_time.vi_VN.__init__.Provider.day_of_week(self)
faker.providers.date_time.vi_VN.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/en_PH/__init__.py----------------------------------------
faker.providers.date_dttime.en_PH.__init__.Provider(DateTimeProvider)
faker.providers.date_time.en_PH.__init__.Provider(DateTimeProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/de_AT/__init__.py----------------------------------------
A:faker.providers.date_time.de_AT.__init__.day->self.date('%w')
A:faker.providers.date_time.de_AT.__init__.month->self.month()
faker.providers.date_dttime.de_AT.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.de_AT.__init__.Provider.day_of_week(self)
faker.providers.date_dttime.de_AT.__init__.Provider.month_name(self)
faker.providers.date_time.de_AT.__init__.Provider(DateTimeProvider)
faker.providers.date_time.de_AT.__init__.Provider.day_of_week(self)
faker.providers.date_time.de_AT.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/es_AR/__init__.py----------------------------------------
faker.providers.date_dttime.es_AR.__init__.Provider(DateTimeProvider)
faker.providers.date_time.es_AR.__init__.Provider(DateTimeProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/fr_FR/__init__.py----------------------------------------
A:faker.providers.date_time.fr_FR.__init__.day->self.date('%w')
A:faker.providers.date_time.fr_FR.__init__.month->self.month()
faker.providers.date_dttime.fr_FR.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.fr_FR.__init__.Provider.day_of_week(self)->str
faker.providers.date_dttime.fr_FR.__init__.Provider.month_name(self)->str
faker.providers.date_time.fr_FR.__init__.Provider(DateTimeProvider)
faker.providers.date_time.fr_FR.__init__.Provider.day_of_week(self)->str
faker.providers.date_time.fr_FR.__init__.Provider.month_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/bn_BD/__init__.py----------------------------------------
A:faker.providers.date_time.bn_BD.__init__.day->self.date('%w')
A:faker.providers.date_time.bn_BD.__init__.month->self.month()
faker.providers.date_dttime.bn_BD.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.bn_BD.__init__.Provider.day_of_week(self)->str
faker.providers.date_dttime.bn_BD.__init__.Provider.month_name(self)->str
faker.providers.date_time.bn_BD.__init__.Provider(DateTimeProvider)
faker.providers.date_time.bn_BD.__init__.Provider.day_of_week(self)->str
faker.providers.date_time.bn_BD.__init__.Provider.month_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/ta_IN/__init__.py----------------------------------------
A:faker.providers.date_time.ta_IN.__init__.day->self.date('%w')
A:faker.providers.date_time.ta_IN.__init__.month->self.month()
faker.providers.date_dttime.ta_IN.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.ta_IN.__init__.Provider.day_of_week(self)->str
faker.providers.date_dttime.ta_IN.__init__.Provider.month_name(self)->str
faker.providers.date_time.ta_IN.__init__.Provider(DateTimeProvider)
faker.providers.date_time.ta_IN.__init__.Provider.day_of_week(self)->str
faker.providers.date_time.ta_IN.__init__.Provider.month_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/ja_JP/__init__.py----------------------------------------
A:faker.providers.date_time.ja_JP.__init__.day->self.date('%w')
A:faker.providers.date_time.ja_JP.__init__.month->self.month()
faker.providers.date_dttime.ja_JP.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.ja_JP.__init__.Provider.day_of_week(self)->str
faker.providers.date_dttime.ja_JP.__init__.Provider.month_name(self)->str
faker.providers.date_dttime.ja_JP.__init__.Provider.traditional_month_name(self)->str
faker.providers.date_time.ja_JP.__init__.Provider(DateTimeProvider)
faker.providers.date_time.ja_JP.__init__.Provider.day_of_week(self)->str
faker.providers.date_time.ja_JP.__init__.Provider.month_name(self)->str
faker.providers.date_time.ja_JP.__init__.Provider.traditional_month_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/date_time/fil_PH/__init__.py----------------------------------------
A:faker.providers.date_time.fil_PH.__init__.day->self.date('%w')
A:faker.providers.date_time.fil_PH.__init__.month->self.month()
faker.providers.date_dttime.fil_PH.__init__.Provider(DateTimeProvider)
faker.providers.date_dttime.fil_PH.__init__.Provider.day_of_week(self)
faker.providers.date_dttime.fil_PH.__init__.Provider.month_name(self)
faker.providers.date_time.fil_PH.__init__.Provider(DateTimeProvider)
faker.providers.date_time.fil_PH.__init__.Provider.day_of_week(self)
faker.providers.date_time.fil_PH.__init__.Provider.month_name(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/barcode/__init__.py----------------------------------------
A:faker.providers.barcode.__init__.code[:len(prefix)]->map(int, prefix)
A:faker.providers.barcode.__init__.weighted_sum->sum((x * y for (x, y) in zip(code, weights)))
faker.providers.barcode.__init__.Provider(BaseProvider)
faker.providers.barcode.__init__.Provider._ean(self,length:int=13,prefixes:PrefixType=())->str
faker.providers.barcode.__init__.Provider.ean(self,length:int=13,prefixes:PrefixType=())->str
faker.providers.barcode.__init__.Provider.ean13(self,prefixes:PrefixType=())->str
faker.providers.barcode.__init__.Provider.ean8(self,prefixes:PrefixType=())->str
faker.providers.barcode.__init__.Provider.localized_ean(self,length:int=13)->str
faker.providers.barcode.__init__.Provider.localized_ean13(self)->str
faker.providers.barcode.__init__.Provider.localized_ean8(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/barcode/fr_CA/__init__.py----------------------------------------
faker.providers.barcode.fr_CA.__init__.Provider(BarcodeProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/barcode/en_US/__init__.py----------------------------------------
A:faker.providers.barcode.en_US.__init__.m1->self.upc_ae_pattern1.match(upc_a)
A:faker.providers.barcode.en_US.__init__.m2->self.upc_ae_pattern2.match(upc_a)
A:faker.providers.barcode.en_US.__init__.m3->self.upc_ae_pattern3.match(upc_a)
A:faker.providers.barcode.en_US.__init__.upc_e->upc_e_template.format(**groupdict)
A:faker.providers.barcode.en_US.__init__.groupdict['extra']->str(len(mfr_code))
A:faker.providers.barcode.en_US.__init__.groupdict->self.upc_ae_pattern3.match(upc_a).groupdict()
A:faker.providers.barcode.en_US.__init__.number_system_digit->self.random_int(0, 1)
A:faker.providers.barcode.en_US.__init__.weighted_sum->sum((x * y for (x, y) in zip(code, weights)))
A:faker.providers.barcode.en_US.__init__.ean13->self.ean13(leading_zero=True)
A:faker.providers.barcode.en_US.__init__.upc_ae->self._upc_ae(base=base, number_system_digit=number_system_digit)
faker.providers.barcode.en_US.__init__.Provider(BarcodeProvider)
faker.providers.barcode.en_US.__init__.Provider._convert_upc_a2e(self,upc_a:str)->str
faker.providers.barcode.en_US.__init__.Provider._upc_ae(self,base:Optional[str]=None,number_system_digit:Optional[int]=None)->str
faker.providers.barcode.en_US.__init__.Provider.ean13(self,prefixes:PrefixType=(),leading_zero:Optional[bool]=None)->str
faker.providers.barcode.en_US.__init__.Provider.upc_a(self,upc_ae_mode:bool=False,base:Optional[str]=None,number_system_digit:Optional[int]=None)->str
faker.providers.barcode.en_US.__init__.Provider.upc_e(self,base:Optional[str]=None,number_system_digit:Optional[int]=None,safe_mode:bool=True)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/barcode/en_CA/__init__.py----------------------------------------
faker.providers.barcode.en_CA.__init__.Provider(EnUsBarcodeProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/barcode/es_ES/__init__.py----------------------------------------
faker.providers.barcode.es_ES.__init__.Provider(BarcodeProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/barcode/ja_JP/__init__.py----------------------------------------
faker.providers.barcode.ja_JP.__init__.Provider(BarcodeProvider)
faker.providers.barcode.ja_JP.__init__.Provider.jan(self,length:int=13)->str
faker.providers.barcode.ja_JP.__init__.Provider.jan13(self)->str
faker.providers.barcode.ja_JP.__init__.Provider.jan8(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/python/__init__.py----------------------------------------
A:faker.providers.python.__init__.TEnum->TypeVar('TEnum', bound=Enum)
A:faker.providers.python.__init__.chars->''.join(self.random_letters(length=self.generator.random.randint(min_chars, max_chars)))
A:faker.providers.python.__init__.needed_left_digits->max(1, math.ceil(math.log10(max(abs(max_value or 1), abs(min_value or 1)))))
A:faker.providers.python.__init__.right_digits->self.random_int(0, max_random_digits)
A:faker.providers.python.__init__.left_digits->self.random_int(min_left_digits, max_left_random_digits)
A:faker.providers.python.__init__.left_number->str(self._random_int_of_length(left_digits))
A:faker.providers.python.__init__.sign->self.random_element(('+', '-'))
A:faker.providers.python.__init__.result->Decimal(str(min_value))
A:faker.providers.python.__init__.min_value->int(min_value)
A:faker.providers.python.__init__.max_value->int(max_value - 1)
A:faker.providers.python.__init__.max_digits_from_value->max(math.ceil(math.log10(abs(min_value or 1))), math.ceil(math.log10(abs(max_value or 1))))
A:faker.providers.python.__init__.max_left_random_digits->max(max_random_digits, max_digits_from_value + 10)
A:faker.providers.python.__init__.min_left_digits->math.ceil(math.log10(abs(min(max_value or 1, 1))))
A:faker.providers.python.__init__.right_number->''.join([str(self.random_digit()) for i in range(0, right_digits)])
A:faker.providers.python.__init__.nb_elements->self.randomize_nb_elements(nb_elements, min=1)
A:faker.providers.python.__init__.words_list_count->len(self.generator.get_words_list())
A:faker.providers.python.__init__.d[self.generator.word()]->self._random_type(value_types)
faker.providers.python.__init__.EmptyEnumException(BaseFakerException)
faker.providers.python.__init__.Provider(BaseProvider)
faker.providers.python.__init__.Provider._check_signature(self,value_types:Optional[TypesSpec],allowed_types:Optional[TypesSpec])->TypesSpec
faker.providers.python.__init__.Provider._pyiterable(self,nb_elements:int=10,variable_nb_elements:bool=True,value_types:Optional[TypesSpec]=None,allowed_types:Optional[TypesSpec]=None)->Iterator
faker.providers.python.__init__.Provider._random_int_of_length(self,length:int)->int
faker.providers.python.__init__.Provider._random_type(self,type_list:List[str])->str
faker.providers.python.__init__.Provider._safe_random_int(self,min_value:float,max_value:float,positive:bool)->int
faker.providers.python.__init__.Provider.enum(self,enum_cls:Type[TEnum])->TEnum
faker.providers.python.__init__.Provider.pybool(self,truth_probability:int=50)->bool
faker.providers.python.__init__.Provider.pydecimal(self,left_digits:Optional[int]=None,right_digits:Optional[int]=None,positive:Optional[bool]=None,min_value:Optional[BasicNumber]=None,max_value:Optional[BasicNumber]=None)->Decimal
faker.providers.python.__init__.Provider.pydict(self,nb_elements:int=10,variable_nb_elements:bool=True,value_types:Optional[TypesSpec]=None,allowed_types:Optional[TypesSpec]=None)->Dict[Any, Any]
faker.providers.python.__init__.Provider.pyfloat(self,left_digits:Optional[int]=None,right_digits:Optional[int]=None,positive:Optional[bool]=None,min_value:Optional[Union[float,int]]=None,max_value:Optional[Union[float,int]]=None)->float
faker.providers.python.__init__.Provider.pyint(self,min_value:int=0,max_value:int=9999,step:int=1)->int
faker.providers.python.__init__.Provider.pyiterable(self,nb_elements:int=10,variable_nb_elements:bool=True,value_types:Optional[TypesSpec]=None,allowed_types:Optional[TypesSpec]=None)->Iterable[Any]
faker.providers.python.__init__.Provider.pylist(self,nb_elements:int=10,variable_nb_elements:bool=True,value_types:Optional[TypesSpec]=None,allowed_types:Optional[TypesSpec]=None)->List[Any]
faker.providers.python.__init__.Provider.pyobject(self,object_type:Optional[Type[Union[bool,str,float,int,tuple,set,list,Iterable,dict]]]=None)->Optional[Union[bool, str, float, int, tuple, set, list, Iterable, dict]]
faker.providers.python.__init__.Provider.pyset(self,nb_elements:int=10,variable_nb_elements:bool=True,value_types:Optional[TypesSpec]=None,allowed_types:Optional[TypesSpec]=None)->Set[Any]
faker.providers.python.__init__.Provider.pystr(self,min_chars:Optional[int]=None,max_chars:int=20,prefix:str='',suffix:str='')->str
faker.providers.python.__init__.Provider.pystr_format(self,string_format:str='?#-###{{random_int}}{{random_letter}}',letters:str=string.ascii_letters)->str
faker.providers.python.__init__.Provider.pystruct(self,count:int=10,value_types:Optional[TypesSpec]=None,allowed_types:Optional[TypesSpec]=None)->Tuple[List, Dict, Dict]
faker.providers.python.__init__.Provider.pytuple(self,nb_elements:int=10,variable_nb_elements:bool=True,value_types:Optional[TypesSpec]=None,allowed_types:Optional[TypesSpec]=None)->Tuple[Any, ...]


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/python/en_US/__init__.py----------------------------------------
faker.providers.python.en_US.__init__.Provider(PythonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/sbn/__init__.py----------------------------------------
A:faker.providers.sbn.__init__.(registrant, publication)->self._body()
A:faker.providers.sbn.__init__.sbn->SBN9(registrant, publication)
faker.providers.sbn.__init__.Provider(BaseProvider)
faker.providers.sbn.__init__.Provider._body(self)->List[str]
faker.providers.sbn.__init__.Provider._registrant_publication(reg_pub:str,rules:List[RegistrantRule])->Tuple[str, str]
faker.providers.sbn.__init__.Provider.sbn9(self,separator:str='-')->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/sbn/sbn.py----------------------------------------
A:faker.providers.sbn.sbn.self.check_digit->self._check_digit()
A:faker.providers.sbn.sbn.weights->range(1, 9)
A:faker.providers.sbn.sbn.body->''.join([part for part in [self.registrant, self.publication] if part is not None])
faker.providers.sbn.SBN(self,registrant:Optional[str]=None,publication:Optional[str]=None)
faker.providers.sbn.SBN9(self,*args:Any,**kwargs:Any)
faker.providers.sbn.SBN9._check_digit(self)->str
faker.providers.sbn.SBN9.format(self,separator:str='')->str
faker.providers.sbn.sbn.SBN(self,registrant:Optional[str]=None,publication:Optional[str]=None)
faker.providers.sbn.sbn.SBN.__init__(self,registrant:Optional[str]=None,publication:Optional[str]=None)
faker.providers.sbn.sbn.SBN9(self,*args:Any,**kwargs:Any)
faker.providers.sbn.sbn.SBN9.__init__(self,*args:Any,**kwargs:Any)
faker.providers.sbn.sbn.SBN9._check_digit(self)->str
faker.providers.sbn.sbn.SBN9.format(self,separator:str='')->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/sbn/rules.py----------------------------------------
A:faker.providers.sbn.rules.RegistrantRule->namedtuple('RegistrantRule', ['min', 'max', 'registrant_length'])


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/sbn/en_US/__init__.py----------------------------------------
faker.providers.sbn.en_US.__init__.Provider(SBNProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/geo/__init__.py----------------------------------------
A:faker.providers.geo.__init__.center->float(center)
A:faker.providers.geo.__init__.radius->float(radius)
A:faker.providers.geo.__init__.geo->self.generator.random.uniform(center - radius, center + radius)
faker.providers.geo.__init__.Provider(BaseProvider)
faker.providers.geo.__init__.Provider.coordinate(self,center:Optional[float]=None,radius:Union[float,int]=0.001)->Decimal
faker.providers.geo.__init__.Provider.latitude(self)->Decimal
faker.providers.geo.__init__.Provider.latlng(self)->Tuple[Decimal, Decimal]
faker.providers.geo.__init__.Provider.local_latlng(self,country_code:str='US',coords_only:bool=False)->Optional[Tuple[str, ...]]
faker.providers.geo.__init__.Provider.location_on_land(self,coords_only:bool=False)->Tuple[str, ...]
faker.providers.geo.__init__.Provider.longitude(self)->Decimal


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/geo/sk_SK/__init__.py----------------------------------------
faker.providers.geo.sk_SK.__init__.Provider(GeoProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/geo/pt_PT/__init__.py----------------------------------------
faker.providers.geo.pt_PT.__init__.Provider(GeoProvider)
faker.providers.geo.pt_PT.__init__.Provider.nationality(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/geo/tr_TR/__init__.py----------------------------------------
faker.providers.geo.tr_TR.__init__.Provider(GeoProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/geo/cs_CZ/__init__.py----------------------------------------
faker.providers.geo.cs_CZ.__init__.Provider(GeoProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/geo/pl_PL/__init__.py----------------------------------------
faker.providers.geo.pl_PL.__init__.Provider(GeoProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/geo/en_US/__init__.py----------------------------------------
faker.providers.geo.en_US.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/geo/el_GR/__init__.py----------------------------------------
faker.providers.geo.el_GR.__init__.Provider(GeoProvider)
faker.providers.geo.el_GR.__init__.Provider.local_latitude(self)->Decimal
faker.providers.geo.el_GR.__init__.Provider.local_latlng(self,*args:Any,**kwargs:Any)->Tuple[str, str]
faker.providers.geo.el_GR.__init__.Provider.local_longitude(self)->Decimal


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/geo/de_AT/__init__.py----------------------------------------
faker.providers.geo.de_AT.__init__.Provider(GeoProvider)
faker.providers.geo.de_AT.__init__.Provider.local_latitude(self)->Decimal
faker.providers.geo.de_AT.__init__.Provider.local_longitude(self)->Decimal


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/geo/en_IE/__init__.py----------------------------------------
faker.providers.geo.en_IE.__init__.Provider(GeoProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/geo/bn_BD/__init__.py----------------------------------------
faker.providers.geo.bn_BD.__init__.Provider(GeoProvider)
faker.providers.geo.bn_BD.__init__.Provider.local_latlng(self,country_code:str='BD',coords_only:bool=False)->Optional[Tuple[str, ...]]


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/__init__.py----------------------------------------
A:faker.providers.bank.__init__.fed_num->self.random_int(min=1, max=12)
A:faker.providers.bank.__init__.rand->self.numerify('######')
A:faker.providers.bank.__init__.temp->re.sub('\\?', lambda x: self.random_element(ascii_uppercase), self.bban_format)
A:faker.providers.bank.__init__.bban->self.bban()
A:faker.providers.bank.__init__.check_->int(''.join((self.ALPHA.get(c, c) for c in check)))
A:faker.providers.bank.__init__.check->str(check_).zfill(2)
A:faker.providers.bank.__init__.length->self.random_element((8, 11))
A:faker.providers.bank.__init__.bank_code->self.lexify('????', letters=string.ascii_uppercase)
A:faker.providers.bank.__init__.location_code->self.lexify('??', letters=string.ascii_uppercase + string.digits)
A:faker.providers.bank.__init__.branch_code->self.lexify('???', letters=string.ascii_uppercase + string.digits)
faker.providers.bank.__init__.Provider(BaseProvider)
faker.providers.bank.__init__.Provider.aba(self)->str
faker.providers.bank.__init__.Provider.bank_country(self)->str
faker.providers.bank.__init__.Provider.bban(self)->str
faker.providers.bank.__init__.Provider.iban(self)->str
faker.providers.bank.__init__.Provider.swift(self,length:Optional[int]=None,primary:bool=False,use_dataset:bool=False)->str
faker.providers.bank.__init__.Provider.swift11(self,primary:bool=False,use_dataset:bool=False)->str
faker.providers.bank.__init__.Provider.swift8(self,use_dataset:bool=False)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/it_IT/__init__.py----------------------------------------
faker.providers.bank.it_IT.__init__.Provider(BankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/ru_RU/__init__.py----------------------------------------
A:faker.providers.bank.ru_RU.__init__.credit_organization_code->self.numerify(self.random_element(self.credit_organization_code_formats))
faker.providers.bank.ru_RU.__init__.Provider(BankProvider)
faker.providers.bank.ru_RU.__init__.Provider.bank(self)->str
faker.providers.bank.ru_RU.__init__.Provider.bic(self)->str
faker.providers.bank.ru_RU.__init__.Provider.checking_account(self)->str
faker.providers.bank.ru_RU.__init__.Provider.correspondent_account(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/sk_SK/__init__.py----------------------------------------
faker.providers.bank.sk_SK.__init__.Provider(BankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/pt_PT/__init__.py----------------------------------------
faker.providers.bank.pt_PT.__init__.Provider(BankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/ro_RO/__init__.py----------------------------------------
faker.providers.bank.ro_RO.__init__.Provider(BankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/az_AZ/__init__.py----------------------------------------
faker.providers.bank.az_AZ.__init__.Provider(BankProvider)
faker.providers.bank.az_AZ.__init__.Provider.bank(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/tr_TR/__init__.py----------------------------------------
faker.providers.bank.tr_TR.__init__.Provider(BankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/en_IN/__init__.py----------------------------------------
faker.providers.bank.en_IN.__init__.Provider(BankProvider)
faker.providers.bank.en_IN.__init__.Provider.bank(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/fr_CH/__init__.py----------------------------------------
faker.providers.bank.fr_CH.__init__.Provider(DeChBankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/cs_CZ/__init__.py----------------------------------------
faker.providers.bank.cs_CZ.__init__.Provider(BankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/pl_PL/__init__.py----------------------------------------
faker.providers.bank.pl_PL.__init__.Provider(BankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/da_DK/__init__.py----------------------------------------
faker.providers.bank.da_DK.__init__.Provider(BankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/zh_CN/__init__.py----------------------------------------
faker.providers.bank.zh_CN.__init__.Provider(BankProvider)
faker.providers.bank.zh_CN.__init__.Provider.bank(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/es_MX/__init__.py----------------------------------------
A:faker.providers.bank.es_MX.__init__.city->self.random_int(0, 999)
A:faker.providers.bank.es_MX.__init__.branch->self.random_int(0, 9999)
A:faker.providers.bank.es_MX.__init__.account->self.random_int(0, 9999999)
A:faker.providers.bank.es_MX.__init__.control_digit->get_clabe_control_digit(result)
faker.providers.bank.es_MX.__init__.Provider(BankProvider)
faker.providers.bank.es_MX.__init__.Provider.bank(self)->str
faker.providers.bank.es_MX.__init__.Provider.clabe(self,bank_code:Optional[int]=None)->str
faker.providers.bank.es_MX.__init__.get_clabe_control_digit(clabe:str)->int
faker.providers.bank.es_MX.__init__.is_valid_clabe(clabe:str)->bool


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/de_CH/__init__.py----------------------------------------
faker.providers.bank.de_CH.__init__.Provider(BankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/nl_NL/__init__.py----------------------------------------
faker.providers.bank.nl_NL.__init__.Provider(BankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/it_CH/__init__.py----------------------------------------
faker.providers.bank.it_CH.__init__.Provider(DeChBankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/tl_PH/__init__.py----------------------------------------
faker.providers.bank.tl_PH.__init__.Provider(EnPhBankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/no_NO/__init__.py----------------------------------------
faker.providers.bank.no_NO.__init__.Provider(BankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/th_TH/__init__.py----------------------------------------
faker.providers.bank.th_TH.__init__.Provider(BankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/de_DE/__init__.py----------------------------------------
A:faker.providers.bank.de_DE.__init__.swift_location_codes->tuple(swift_location_codes)
faker.providers.bank.de_DE.__init__.Provider(BankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/uk_UA/__init__.py----------------------------------------
faker.providers.bank.uk_UA.__init__.Provider(BankProvider)
faker.providers.bank.uk_UA.__init__.Provider.bank(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/es_ES/__init__.py----------------------------------------
faker.providers.bank.es_ES.__init__.Provider(BankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/el_GR/__init__.py----------------------------------------
faker.providers.bank.el_GR.__init__.Provider(BankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/fa_IR/__init__.py----------------------------------------
faker.providers.bank.fa_IR.__init__.Provider(BankProvider)
faker.providers.bank.fa_IR.__init__.Provider.bank(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/en_PH/__init__.py----------------------------------------
A:faker.providers.bank.en_PH.__init__.logger->logging.getLogger(__name__)
faker.providers.bank.en_PH.__init__.Provider(BankProvider)
faker.providers.bank.en_PH.__init__.Provider.bban(self)->str
faker.providers.bank.en_PH.__init__.Provider.iban(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/de_AT/__init__.py----------------------------------------
faker.providers.bank.de_AT.__init__.Provider(BankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/en_IE/__init__.py----------------------------------------
faker.providers.bank.en_IE.__init__.Provider(BankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/fi_FI/__init__.py----------------------------------------
faker.providers.bank.fi_FI.__init__.Provider(BankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/es_AR/__init__.py----------------------------------------
faker.providers.bank.es_AR.__init__.Provider(BankProvider)
faker.providers.bank.es_AR.__init__.Provider.bank(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/fr_FR/__init__.py----------------------------------------
faker.providers.bank.fr_FR.__init__.Provider(BankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/en_GB/__init__.py----------------------------------------
faker.providers.bank.en_GB.__init__.Provider(BankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/bn_BD/__init__.py----------------------------------------
faker.providers.bank.bn_BD.__init__.Provider(BankProvider)
faker.providers.bank.bn_BD.__init__.Provider.swift(self,length:Optional[int]=None,primary:bool=False,use_dataset:bool=True)->str
faker.providers.bank.bn_BD.__init__.Provider.swift11(self,primary:bool=False,use_dataset:bool=True)->str
faker.providers.bank.bn_BD.__init__.Provider.swift8(self,use_dataset:bool=True)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/fil_PH/__init__.py----------------------------------------
faker.providers.bank.fil_PH.__init__.Provider(EnPhBankProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/bank/nl_BE/__init__.py----------------------------------------
faker.providers.bank.nl_BE.__init__.Provider(BankProvider)
faker.providers.bank.nl_BE.__init__.Provider.bank(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/__init__.py----------------------------------------
A:faker.providers.currency.__init__.code->self.random_element(self.currency_symbols.keys())
faker.providers.currency.__init__.Provider(BaseProvider)
faker.providers.currency.__init__.Provider.cryptocurrency(self)->Tuple[str, str]
faker.providers.currency.__init__.Provider.cryptocurrency_code(self)->str
faker.providers.currency.__init__.Provider.cryptocurrency_name(self)->str
faker.providers.currency.__init__.Provider.currency(self)->Tuple[str, str]
faker.providers.currency.__init__.Provider.currency_code(self)->str
faker.providers.currency.__init__.Provider.currency_name(self)->str
faker.providers.currency.__init__.Provider.currency_symbol(self,code:Optional[str]=None)->str
faker.providers.currency.__init__.Provider.pricetag(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/it_IT/__init__.py----------------------------------------
faker.providers.currency.it_IT.__init__.Provider(CurrencyProvider)
faker.providers.currency.it_IT.__init__.Provider.pricetag(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/fr_CA/__init__.py----------------------------------------
faker.providers.currency.fr_CA.__init__.Provider(CurrencyProvider)
faker.providers.currency.fr_CA.__init__.Provider.pricetag(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/ru_RU/__init__.py----------------------------------------
faker.providers.currency.ru_RU.__init__.Provider(CurrencyProvider)
faker.providers.currency.ru_RU.__init__.Provider.pricetag(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/en_AU/__init__.py----------------------------------------
faker.providers.currency.en_AU.__init__.Provider(CurrencyProvider)
faker.providers.currency.en_AU.__init__.Provider.pricetag(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/sk_SK/__init__.py----------------------------------------
faker.providers.currency.sk_SK.__init__.Provider(CurrencyProvider)
faker.providers.currency.sk_SK.__init__.Provider.pricetag(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/ro_RO/__init__.py----------------------------------------
faker.providers.currency.ro_RO.__init__.Provider(CurrencyProvider)
faker.providers.currency.ro_RO.__init__.Provider.pricetag(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/az_AZ/__init__.py----------------------------------------
faker.providers.currency.az_AZ.__init__.Provider(CurrencyProvider)
faker.providers.currency.az_AZ.__init__.Provider.pricetag(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/tr_TR/__init__.py----------------------------------------
faker.providers.currency.tr_TR.__init__.Provider(CurrencyProvider)
faker.providers.currency.tr_TR.__init__.Provider.pricetag(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/cs_CZ/__init__.py----------------------------------------
faker.providers.currency.cs_CZ.__init__.Provider(CurrencyProvider)
faker.providers.currency.cs_CZ.__init__.Provider.pricetag(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/pl_PL/__init__.py----------------------------------------
faker.providers.currency.pl_PL.__init__.Provider(CurrencyProvider)
faker.providers.currency.pl_PL.__init__.Provider.pricetag(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/da_DK/__init__.py----------------------------------------
faker.providers.currency.da_DK.__init__.Provider(CurrencyProvider)
faker.providers.currency.da_DK.__init__.Provider.pricetag(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/pt_BR/__init__.py----------------------------------------
faker.providers.currency.pt_BR.__init__.Provider(CurrencyProvider)
faker.providers.currency.pt_BR.__init__.Provider.pricetag(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/nl_NL/__init__.py----------------------------------------
faker.providers.currency.nl_NL.__init__.Provider(CurrencyProvider)
faker.providers.currency.nl_NL.__init__.Provider.pricetag(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/es/__init__.py----------------------------------------
faker.providers.currency.es.__init__.Provider(CurrencyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/th_TH/__init__.py----------------------------------------
faker.providers.currency.th_TH.__init__.Provider(CurrencyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/de_DE/__init__.py----------------------------------------
faker.providers.currency.de_DE.__init__.Provider(CurrencyProvider)
faker.providers.currency.de_DE.__init__.Provider.pricetag(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/en_US/__init__.py----------------------------------------
faker.providers.currency.en_US.__init__.Provider(CurrencyProvider)
faker.providers.currency.en_US.__init__.Provider.pricetag(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/es_CL/__init__.py----------------------------------------
faker.providers.currency.es_CL.__init__.Provider(CurrencyProvider)
faker.providers.currency.es_CL.__init__.Provider.pricetag(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/en_CA/__init__.py----------------------------------------
faker.providers.currency.en_CA.__init__.Provider(CurrencyProvider)
faker.providers.currency.en_CA.__init__.Provider.pricetag(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/es_ES/__init__.py----------------------------------------
faker.providers.currency.es_ES.__init__.Provider(CurrencyProvider)
faker.providers.currency.es_ES.__init__.Provider.pricetag(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/sv_SE/__init__.py----------------------------------------
faker.providers.currency.sv_SE.__init__.Provider(CurrencyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/el_GR/__init__.py----------------------------------------
faker.providers.currency.el_GR.__init__.Provider(CurrencyProvider)
faker.providers.currency.el_GR.__init__.Provider.pricetag(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/fa_IR/__init__.py----------------------------------------
faker.providers.currency.fa_IR.__init__.Provider(CurrencyProvider)
faker.providers.currency.fa_IR.__init__.Provider.pricetag(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/vi_VN/__init__.py----------------------------------------
faker.providers.currency.vi_VN.__init__.Provider(CurrencyProvider)
faker.providers.currency.vi_VN.__init__.Provider.pricetag(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/de_AT/__init__.py----------------------------------------
faker.providers.currency.de_AT.__init__.Provider(CurrencyProvider)
faker.providers.currency.de_AT.__init__.Provider.pricetag(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/es_AR/__init__.py----------------------------------------
faker.providers.currency.es_AR.__init__.Provider(CurrencyProvider)
faker.providers.currency.es_AR.__init__.Provider.pricetag(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/fr_FR/__init__.py----------------------------------------
faker.providers.currency.fr_FR.__init__.Provider(CurrencyProvider)
faker.providers.currency.fr_FR.__init__.Provider.pricetag(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/currency/bn_BD/__init__.py----------------------------------------
A:faker.providers.currency.bn_BD.__init__.currency_symbol->self.currency_symbol('BDT')
A:faker.providers.currency.bn_BD.__init__.price->self.numerify(self.random_element(self.price_formats))
faker.providers.currency.bn_BD.__init__.Provider(CurrencyProvider)
faker.providers.currency.bn_BD.__init__.Provider.pricetag(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/__init__.py----------------------------------------
A:faker.providers.person.__init__.prefixes->self.random_element((self.prefixes_male, self.prefixes_female))
A:faker.providers.person.__init__.suffixes->self.random_element((self.suffixes_male, self.suffixes_female))
faker.providers.person.__init__.Provider(BaseProvider)
faker.providers.person.__init__.Provider.first_name(self)->str
faker.providers.person.__init__.Provider.first_name_female(self)->str
faker.providers.person.__init__.Provider.first_name_male(self)->str
faker.providers.person.__init__.Provider.first_name_nonbinary(self)->str
faker.providers.person.__init__.Provider.language_name(self)->str
faker.providers.person.__init__.Provider.last_name(self)->str
faker.providers.person.__init__.Provider.last_name_female(self)->str
faker.providers.person.__init__.Provider.last_name_male(self)->str
faker.providers.person.__init__.Provider.last_name_nonbinary(self)->str
faker.providers.person.__init__.Provider.name(self)->str
faker.providers.person.__init__.Provider.name_female(self)->str
faker.providers.person.__init__.Provider.name_male(self)->str
faker.providers.person.__init__.Provider.name_nonbinary(self)->str
faker.providers.person.__init__.Provider.prefix(self)->str
faker.providers.person.__init__.Provider.prefix_female(self)->str
faker.providers.person.__init__.Provider.prefix_male(self)->str
faker.providers.person.__init__.Provider.prefix_nonbinary(self)->str
faker.providers.person.__init__.Provider.suffix(self)->str
faker.providers.person.__init__.Provider.suffix_female(self)->str
faker.providers.person.__init__.Provider.suffix_male(self)->str
faker.providers.person.__init__.Provider.suffix_nonbinary(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/it_IT/__init__.py----------------------------------------
faker.providers.person.it_IT.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/ka_GE/__init__.py----------------------------------------
faker.providers.person.ka_GE.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/fr_CA/__init__.py----------------------------------------
faker.providers.person.fr_CA.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/ru_RU/__init__.py----------------------------------------
A:faker.providers.person.ru_RU.__init__.text->text.replace(letter, translit_dict[letter]).replace(letter, translit_dict[letter])
faker.providers.person.ru_RU.__init__.Provider(PersonProvider)
faker.providers.person.ru_RU.__init__.Provider.middle_name(self)->str
faker.providers.person.ru_RU.__init__.Provider.middle_name_female(self)->str
faker.providers.person.ru_RU.__init__.Provider.middle_name_male(self)->str
faker.providers.person.ru_RU.__init__.translit(text:str)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/sk_SK/__init__.py----------------------------------------
A:faker.providers.person.sk_SK.__init__.formats_female->OrderedDict((('{{first_name_female}} {{last_name_female}}', 0.97), ('{{prefix_female}} {{first_name_female}} {{last_name_female}}', 0.015), ('{{first_name_female}} {{last_name_female}} {{suffix}}', 0.02), ('{{prefix_female}} {{first_name_female}} {{last_name_female}} {{suffix}}', 0.005)))
A:faker.providers.person.sk_SK.__init__.formats_male->OrderedDict((('{{first_name_male}} {{last_name_male}}', 0.97), ('{{prefix_male}} {{first_name_male}} {{last_name_male}}', 0.015), ('{{first_name_male}} {{last_name_male}} {{suffix}}', 0.02), ('{{prefix_male}} {{first_name_male}} {{last_name_male}} {{suffix}}', 0.005)))
A:faker.providers.person.sk_SK.__init__.formats->OrderedDict((('{{first_name_male}} {{last_name_male}}', 0.97), ('{{prefix_male}} {{first_name_male}} {{last_name_male}}', 0.015), ('{{first_name_male}} {{last_name_male}} {{suffix}}', 0.02), ('{{prefix_male}} {{first_name_male}} {{last_name_male}} {{suffix}}', 0.005))).copy()
faker.providers.person.sk_SK.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/zh_TW/__init__.py----------------------------------------
A:faker.providers.person.zh_TW.__init__.last_names->OrderedDict((('王', 7.17), ('李', 7.0), ('張', 6.74), ('劉', 5.1), ('陳', 4.61), ('楊', 3.22), ('黃', 2.45), ('吳', 2.0), ('趙', 2.0), ('周', 1.9), ('徐', 1.45), ('孫', 1.38), ('馬', 1.29), ('朱', 1.28), ('胡', 1.16), ('林', 1.13), ('郭', 1.13), ('何', 1.06), ('高', 1.0), ('羅', 0.95), ('鄭', 0.93), ('梁', 0.85), ('謝', 0.76), ('宋', 0.7), ('唐', 0.69), ('許', 0.66), ('鄧', 0.62), ('馮', 0.62), ('韓', 0.61), ('曹', 0.6), ('曾', 0.58), ('彭', 0.58), ('蕭', 0.56), ('蔡', 0.53), ('潘', 0.52), ('田', 0.52), ('董', 0.51), ('袁', 0.5), ('於', 0.48), ('余', 0.48), ('葉', 0.48), ('蔣', 0.48), ('杜', 0.47), ('蘇', 0.46), ('魏', 0.45), ('程', 0.45), ('呂', 0.45), ('丁', 0.43), ('沈', 0.41), ('任', 0.41), ('姚', 0.4), ('盧', 0.4), ('傅', 0.4), ('鐘', 0.4), ('姜', 0.39), ('崔', 0.38), ('譚', 0.38), ('廖', 0.37), ('範', 0.36), ('汪', 0.36), ('陸', 0.36), ('金', 0.35), ('石', 0.34), ('戴', 0.34), ('賈', 0.33), ('韋', 0.32), ('夏', 0.32), ('邱', 0.32), ('方', 0.31), ('侯', 0.3), ('鄒', 0.3), ('熊', 0.29), ('孟', 0.29), ('秦', 0.29), ('白', 0.28), ('江', 0.28), ('閻', 0.27), ('薛', 0.26), ('尹', 0.26), ('段', 0.24), ('雷', 0.24), ('黎', 0.22), ('史', 0.21), ('龍', 0.21), ('陶', 0.21), ('賀', 0.21), ('顧', 0.2), ('毛', 0.2), ('郝', 0.2), ('龔', 0.2), ('邵', 0.2), ('萬', 0.19), ('錢', 0.19), ('嚴', 0.19), ('賴', 0.18), ('覃', 0.18), ('洪', 0.18), ('武', 0.18), ('莫', 0.18), ('孔', 0.17), ('湯', 0.17), ('向', 0.17), ('常', 0.16), ('溫', 0.16), ('康', 0.16), ('施', 0.15), ('文', 0.15), ('牛', 0.15), ('樊', 0.15), ('葛', 0.15), ('邢', 0.14), ('安', 0.13), ('齊', 0.13), ('易', 0.13), ('喬', 0.13), ('伍', 0.13), ('龐', 0.13), ('顏', 0.12), ('倪', 0.12), ('莊', 0.12), ('聶', 0.12), ('章', 0.12), ('魯', 0.11), ('嶽', 0.11), ('翟', 0.11), ('殷', 0.11), ('詹', 0.11), ('申', 0.11), ('歐', 0.11), ('耿', 0.11), ('關', 0.1), ('蘭', 0.1), ('焦', 0.1), ('俞', 0.1), ('左', 0.1), ('柳', 0.1), ('甘', 0.095), ('祝', 0.09), ('包', 0.087), ('寧', 0.083), ('尚', 0.082), ('符', 0.082), ('舒', 0.082), ('阮', 0.082), ('柯', 0.08), ('紀', 0.08), ('梅', 0.079), ('童', 0.079), ('淩', 0.078), ('畢', 0.078), ('單', 0.076), ('季', 0.076), ('裴', 0.076), ('霍', 0.075), ('塗', 0.075), ('成', 0.075), ('苗', 0.075), ('谷', 0.075), ('盛', 0.074), ('曲', 0.074), ('翁', 0.073), ('冉', 0.073), ('駱', 0.073), ('藍', 0.072), ('路', 0.072), ('遊', 0.071), ('辛', 0.07), ('靳', 0.069), ('歐陽', 0.068), ('管', 0.065), ('柴', 0.065), ('蒙', 0.062), ('鮑', 0.062), ('華', 0.061), ('喻', 0.061), ('祁', 0.061), ('蒲', 0.056), ('房', 0.056), ('滕', 0.055), ('屈', 0.055), ('饒', 0.055), ('解', 0.053), ('牟', 0.053), ('艾', 0.052), ('尤', 0.052), ('陽', 0.05), ('時', 0.05), ('穆', 0.048), ('農', 0.047), ('司', 0.044), ('卓', 0.043), ('古', 0.043), ('吉', 0.043), ('繆', 0.043), ('簡', 0.043), ('車', 0.043), ('項', 0.043), ('連', 0.043), ('蘆', 0.042), ('麥', 0.041), ('褚', 0.041), ('婁', 0.04), ('竇', 0.04), ('戚', 0.04), ('岑', 0.039), ('景', 0.039), ('黨', 0.039), ('宮', 0.039), ('費', 0.039), ('蔔', 0.038), ('冷', 0.038), ('晏', 0.038), ('席', 0.036), ('衛', 0.036), ('米', 0.035), ('柏', 0.035), ('宗', 0.034), ('瞿', 0.033), ('桂', 0.033), ('全', 0.033), ('佟', 0.033), ('應', 0.033), ('臧', 0.032), ('閔', 0.032), ('茍', 0.032), ('鄔', 0.032), ('邊', 0.032), ('卞', 0.032), ('姬', 0.032), ('師', 0.031), ('和', 0.031), ('仇', 0.03), ('欒', 0.03), ('隋', 0.03), ('商', 0.03), ('刁', 0.03), ('沙', 0.03), ('榮', 0.029), ('巫', 0.029), ('寇', 0.029), ('桑', 0.028), ('郎', 0.028), ('甄', 0.027), ('叢', 0.027), ('仲', 0.027), ('虞', 0.026), ('敖', 0.026), ('鞏', 0.026), ('明', 0.026), ('佘', 0.025), ('池', 0.025), ('查', 0.025), ('麻', 0.025), ('苑', 0.025), ('遲', 0.024), ('鄺', 0.024), ('官', 0.023), ('封', 0.023), ('談', 0.023), ('匡', 0.023), ('鞠', 0.23), ('惠', 0.022), ('荊', 0.022), ('樂', 0.022), ('冀', 0.021), ('郁', 0.021), ('胥', 0.021), ('南', 0.021), ('班', 0.021), ('儲', 0.021), ('原', 0.02), ('栗', 0.02), ('燕', 0.02), ('楚', 0.02), ('鄢', 0.02), ('勞', 0.019), ('諶', 0.019), ('奚', 0.017), ('皮', 0.017), ('粟', 0.017), ('冼', 0.017), ('藺', 0.017), ('樓', 0.017), ('盤', 0.017), ('滿', 0.016), ('聞', 0.016), ('位', 0.016), ('厲', 0.016), ('伊', 0.016), ('仝', 0.015), ('區', 0.015), ('郜', 0.015), ('海', 0.015), ('闞', 0.015), ('花', 0.015), ('權', 0.014), ('強', 0.014), ('帥', 0.014), ('屠', 0.014), ('豆', 0.014), ('樸', 0.014), ('蓋', 0.014), ('練', 0.014), ('廉', 0.014), ('禹', 0.014), ('井', 0.013), ('祖', 0.013), ('漆', 0.013), ('巴', 0.013), ('豐', 0.013), ('支', 0.013), ('卿', 0.013), ('國', 0.013), ('狄', 0.013), ('平', 0.013), ('計', 0.012), ('索', 0.012), ('宣', 0.012), ('晉', 0.012), ('相', 0.012), ('初', 0.012), ('門', 0.012), ('雲', 0.012), ('容', 0.012), ('敬', 0.011), ('來', 0.011), ('扈', 0.011), ('晁', 0.011), ('芮', 0.011), ('都', 0.011), ('普', 0.011), ('闕', 0.011), ('浦', 0.011), ('戈', 0.011), ('伏', 0.011), ('鹿', 0.011), ('薄', 0.011), ('邸', 0.011), ('雍', 0.01), ('辜', 0.01), ('羊', 0.01), ('阿', 0.01), ('烏', 0.01), ('母', 0.01), ('裘', 0.01), ('亓', 0.01), ('修', 0.01), ('邰', 0.01), ('赫', 0.01), ('杭', 0.01), ('況', 0.0094), ('那', 0.0093), ('宿', 0.0093), ('鮮', 0.0092), ('印', 0.0091), ('逯', 0.0091), ('隆', 0.009), ('茹', 0.009), ('諸', 0.0089), ('戰', 0.0088), ('慕', 0.0086), ('危', 0.0084), ('玉', 0.0084), ('銀', 0.0084), ('亢', 0.0083), ('嵇', 0.0082), ('公', 0.0082), ('哈', 0.0081), ('湛', 0.0079), ('賓', 0.0077), ('戎', 0.0076), ('勾', 0.0076), ('茅', 0.0076), ('利', 0.0076), ('於', 0.0074), ('呼', 0.0074), ('居', 0.0074), ('揭', 0.0073), ('幹', 0.0072), ('但', 0.0072), ('尉', 0.0071), ('冶', 0.0071), ('斯', 0.007), ('元', 0.0069), ('束', 0.0068), ('檀', 0.0068), ('衣', 0.0067), ('信', 0.0067), ('展', 0.0067), ('陰', 0.0067), ('昝', 0.0066), ('智', 0.0065), ('幸', 0.0065), ('奉', 0.0064), ('植', 0.0064), ('衡', 0.0063), ('富', 0.0063), ('堯', 0.006), ('閉', 0.006), ('由', 0.006)))
faker.providers.person.zh_TW.__init__.Provider(PersonProvider)
faker.providers.person.zh_TW.__init__.Provider.first_romanized_name(self)->str
faker.providers.person.zh_TW.__init__.Provider.last_romanized_name(self)->str
faker.providers.person.zh_TW.__init__.Provider.romanized_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/pt_PT/__init__.py----------------------------------------
faker.providers.person.pt_PT.__init__.Provider(PersonProvider)
faker.providers.person.pt_PT.__init__.Provider.prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/ro_RO/__init__.py----------------------------------------
faker.providers.person.ro_RO.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/es_CA/__init__.py----------------------------------------
faker.providers.person.es_CA.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/az_AZ/__init__.py----------------------------------------
faker.providers.person.az_AZ.__init__.Provider(PersonProvider)
faker.providers.person.az_AZ.__init__.Provider.last_name_female(self)->str
faker.providers.person.az_AZ.__init__.Provider.last_name_male(self)->str
faker.providers.person.az_AZ.__init__.Provider.last_name_unique_to_female(self)->str
faker.providers.person.az_AZ.__init__.Provider.last_name_unique_to_male(self)->str
faker.providers.person.az_AZ.__init__.Provider.last_name_unisex(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/ar_SA/__init__.py----------------------------------------
faker.providers.person.ar_SA.__init__.Provider(ArabicPersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/en/__init__.py----------------------------------------
faker.providers.person.en.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/et_EE/__init__.py----------------------------------------
A:faker.providers.person.et_EE.__init__.formats->OrderedDict([('{{first_name_est}} {{last_name_est}}', est_rat), ('{{first_name_rus}} {{last_name_rus}}', rus_rat)])
A:faker.providers.person.et_EE.__init__.formats_male->OrderedDict([('{{first_name_male_est}} {{last_name_est}}', est_rat), ('{{first_name_male_rus}} {{last_name_rus}}', rus_rat)])
A:faker.providers.person.et_EE.__init__.formats_female->OrderedDict([('{{first_name_female_est}} {{last_name_est}}', est_rat), ('{{first_name_female_rus}} {{last_name_rus}}', rus_rat)])
A:faker.providers.person.et_EE.__init__.prefixes->sorted(set(prefixes_male + prefixes_female))
A:faker.providers.person.et_EE.__init__.first_names_male->sorted(set(first_names_male_est + first_names_male_rus))
A:faker.providers.person.et_EE.__init__.first_names_female->sorted(set(first_names_female_est + first_names_female_rus))
A:faker.providers.person.et_EE.__init__.first_names->sorted(set(first_names_male + first_names_female))
A:faker.providers.person.et_EE.__init__.last_names->sorted(set(last_names_est + last_names_rus))
faker.providers.person.et_EE.__init__.Provider(PersonProvider)
faker.providers.person.et_EE.__init__.Provider.first_name_est(self)->str
faker.providers.person.et_EE.__init__.Provider.first_name_female_est(self)->str
faker.providers.person.et_EE.__init__.Provider.first_name_female_rus(self)->str
faker.providers.person.et_EE.__init__.Provider.first_name_male_est(self)->str
faker.providers.person.et_EE.__init__.Provider.first_name_male_rus(self)->str
faker.providers.person.et_EE.__init__.Provider.first_name_rus(self)->str
faker.providers.person.et_EE.__init__.Provider.last_name_est(self)->str
faker.providers.person.et_EE.__init__.Provider.last_name_rus(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/tr_TR/__init__.py----------------------------------------
faker.providers.person.tr_TR.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/hy_AM/__init__.py----------------------------------------
faker.providers.person.hy_AM.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/en_IN/__init__.py----------------------------------------
faker.providers.person.en_IN.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/fr_CH/__init__.py----------------------------------------
faker.providers.person.fr_CH.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/sl_SI/__init__.py----------------------------------------
faker.providers.person.sl_SI.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/id_ID/__init__.py----------------------------------------
faker.providers.person.id_ID.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/cs_CZ/__init__.py----------------------------------------
A:faker.providers.person.cs_CZ.__init__.formats_female->OrderedDict((('{{first_name_female}} {{last_name_female}}', 0.97), ('{{prefix_female}} {{first_name_female}} {{last_name_female}}', 0.015), ('{{first_name_female}} {{last_name_female}} {{suffix}}', 0.02), ('{{prefix_female}} {{first_name_female}} {{last_name_female}} {{suffix}}', 0.005)))
A:faker.providers.person.cs_CZ.__init__.formats_male->OrderedDict((('{{first_name_male}} {{last_name_male}}', 0.97), ('{{prefix_male}} {{first_name_male}} {{last_name_male}}', 0.015), ('{{first_name_male}} {{last_name_male}} {{suffix}}', 0.02), ('{{prefix_male}} {{first_name_male}} {{last_name_male}} {{suffix}}', 0.005)))
A:faker.providers.person.cs_CZ.__init__.formats->OrderedDict((('{{first_name_male}} {{last_name_male}}', 0.97), ('{{prefix_male}} {{first_name_male}} {{last_name_male}}', 0.015), ('{{first_name_male}} {{last_name_male}} {{suffix}}', 0.02), ('{{prefix_male}} {{first_name_male}} {{last_name_male}} {{suffix}}', 0.005))).copy()
faker.providers.person.cs_CZ.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/pl_PL/__init__.py----------------------------------------
A:faker.providers.person.pl_PL.__init__.identity[3]->checksum_identity_card_number(identity)
A:faker.providers.person.pl_PL.__init__.date_of_birth->self.generator.date_of_birth()
A:faker.providers.person.pl_PL.__init__.pesel_core->''.join(map(str, (self.random_digit() for _ in range(3))))
A:faker.providers.person.pl_PL.__init__.pesel_sex->self.random_digit()
A:faker.providers.person.pl_PL.__init__.check_digit->self.pwz_doctor_compute_check_digit(core)
A:faker.providers.person.pl_PL.__init__.region->self.random_int(1, 45)
A:faker.providers.person.pl_PL.__init__.position->self.random_int(3, 8)
faker.providers.person.pl_PL.__init__.Provider(PersonProvider)
faker.providers.person.pl_PL.__init__.Provider.identity_card_number(self)->str
faker.providers.person.pl_PL.__init__.Provider.last_name(self)->str
faker.providers.person.pl_PL.__init__.Provider.nip(self)->str
faker.providers.person.pl_PL.__init__.Provider.pesel(self,date_of_birth:Optional[datetime]=None,sex:Optional[str]=None)->str
faker.providers.person.pl_PL.__init__.Provider.pesel_compute_check_digit(self,pesel:str)->int
faker.providers.person.pl_PL.__init__.Provider.pwz_doctor(self)->str
faker.providers.person.pl_PL.__init__.Provider.pwz_doctor_compute_check_digit(self,x:Sequence[int])->int
faker.providers.person.pl_PL.__init__.Provider.pwz_nurse(self,kind:str='nurse')->str
faker.providers.person.pl_PL.__init__.checksum_identity_card_number(characters:Sequence[Union[str,int]])->int


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/or_IN/__init__.py----------------------------------------
faker.providers.person.or_IN.__init__.Provider(PersonProvider)
faker.providers.person.or_IN.__init__.Provider.first_name_unisex(self)->str
faker.providers.person.or_IN.__init__.Provider.middle_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/fr_BE/__init__.py----------------------------------------
A:faker.providers.person.fr_BE.__init__.formats_male->OrderedDict((('{{first_name_male}} {{last_name}}', 90), ('{{first_name_male}} {{last_name}} {{last_name}}', 10)))
A:faker.providers.person.fr_BE.__init__.formats_female->OrderedDict((('{{first_name_female}} {{last_name}}', 90), ('{{first_name_female}} {{last_name}} {{last_name}}', 10)))
A:faker.providers.person.fr_BE.__init__.formats->OrderedDict(Counter(formats_male) + Counter(formats_female))
A:faker.providers.person.fr_BE.__init__.first_names_male->OrderedDict((('Aaron', 1922), ('Abdelkader', 616), ('Abdellah', 461), ('Achille', 1414), ('Adam', 2606), ('Adem', 467), ('Adil', 420), ('Adrian', 605), ('Adriano', 858), ('Adrien', 6155), ('Ahmed', 2136), ('Ahmet', 590), ('Alain', 19185), ('Alan', 943), ('Albert', 4465), ('Aldo', 446), ('Alessandro', 1919), ('Alessio', 2295), ('Alex', 1955), ('Alexander', 682), ('Alexandre', 10947), ('Alexis', 4144), ('Alfonso', 462), ('Alfred', 1239), ('Ali', 2331), ('Allan', 676), ('Alphonse', 769), ('Amaury', 1760), ('Amine', 731), ('Amir', 708), ('Anas', 580), ('Andrea', 1254), ('Andreas', 513), ('Andrew', 702), ('André', 14002), ('Andy', 1646), ('Angelo', 2519), ('Anthony', 6441), ('Antoine', 9416), ('Antonin', 856), ('Antonino', 1203), ('Antonio', 4203), ('Antony', 516), ('Armand', 1205), ('Arnaud', 7665), ('Arno', 442), ('Arthur', 6664), ('Auguste', 581), ('Augustin', 1679), ('Aurélien', 2779), ('Axel', 3429), ('Aymeric', 803), ('Ayoub', 727), ('Baptiste', 3228), ('Basile', 1467), ('Bastien', 2791), ('Baudouin', 798), ('Benjamin', 7872), ('Benoit', 4522), ('Benoît', 5283), ('Bernard', 10951), ('Bertrand', 2061), ('Bilal', 794), ('Boris', 1012), ('Brahim', 579), ('Brandon', 1183), ('Brian', 470), ('Brice', 650), ('Brieuc', 504), ('Bruno', 6673), ('Bryan', 2696), ('Calogero', 1580), ('Camille', 857), ('Carl', 792), ('Carlo', 672), ('Carlos', 687), ('Carmelo', 1179), ('Cedric', 702), ('Charles', 5063), ('Charlie', 801), ('Charly', 1027), ('Christian', 16417), ('Christophe', 15728), ('Christopher', 2673), ('Claude', 9224), ('Claudio', 1005), ('Claudy', 802), ('Clément', 4170), ('Colin', 795), ('Constantin', 523), ('Corentin', 3187), ('Cyril', 2617), ('Cyrille', 473), ('Cédric', 8739), ('Célestin', 499), ('Côme', 475), ('Damien', 5442), ('Daniel', 15507), ('Danny', 845), ('Dany', 1893), ('Dario', 805), ('David', 15198), ('Denis', 4726), ('Didier', 10307), ('Diego', 3121), ('Dimitri', 3493), ('Dirk', 531), ('Domenico', 1149), ('Dominique', 7222), ('Donovan', 1092), ('Dorian', 2208), ('Dylan', 3990), ('Eddy', 3176), ('Eden', 1395), ('Edgard', 528), ('Edmond', 793), ('Edouard', 2111), ('El', 919), ('Elias', 840), ('Elie', 603), ('Eliot', 621), ('Eliott', 1280), ('Elliot', 453), ('Emile', 3218), ('Emilien', 1348), ('Emilio', 433), ('Emmanuel', 4817), ('Enzo', 2545), ('Eric', 14938), ('Erik', 445), ('Ernest', 606), ('Erwan', 492), ('Erwin', 563), ('Esteban', 1476), ('Ethan', 3769), ('Etienne', 3779), ('Eugène', 620), ('Evan', 912), ('Ezio', 538), ('Fabian', 3892), ('Fabien', 1986), ('Fabio', 1078), ('Fabrice', 6668), ('Fabrizio', 818), ('Farid', 424), ('Fernand', 2023), ('Fernando', 444), ('Filippo', 762), ('Flavio', 900), ('Florent', 2512), ('Florian', 4813), ('Francesco', 2848), ('Francis', 7850), ('Francisco', 638), ('Franck', 1287), ('Franco', 1059), ('Frank', 1371), ('Franz', 925), ('François', 10479), ('François-Xavier', 450), ('Freddy', 3366), ('Frédéric', 14920), ('Félix', 1221), ('Gabin', 527), ('Gabriel', 5711), ('Gaetano', 986), ('Gary', 559), ('Gaspard', 1260), ('Gaston', 1055), ('Gauthier', 2049), ('Gaël', 964), ('Gaëtan', 2955), ('Geoffrey', 4406), ('Geoffroy', 678), ('Georges', 6122), ('Germain', 598), ('Ghislain', 1183), ('Giacomo', 512), ('Gianni', 927), ('Gilbert', 2359), ('Gilles', 3374), ('Gino', 562), ('Giovanni', 3174), ('Giuliano', 656), ('Giuseppe', 5859), ('Gregory', 1739), ('Grégoire', 1059), ('Grégory', 6539), ('Guido', 745), ('Guillaume', 7306), ('Gustave', 541), ('Guy', 9812), ('Gérald', 801), ('Gérard', 4072), ('Hadrien', 495), ('Hamza', 937), ('Harry', 444), ('Hasan', 579), ('Hassan', 853), ('Hector', 425), ('Henri', 5349), ('Henry', 576), ('Hervé', 1785), ('Hicham', 590), ('Hubert', 1971), ('Hugo', 7597), ('Hugues', 1463), ('Ibrahim', 1262), ('Igor', 553), ('Ilias', 458), ('Ilyas', 596), ('Isaac', 620), ('Ismail', 567), ('Ismaël', 557), ('Ivan', 822), ('Jacky', 693), ('Jacques', 13781), ('Jamal', 419), ('James', 801), ('Jan', 868), ('Jason', 2454), ('Jean', 34246), ('Jean-Baptiste', 587), ('Jean-Charles', 460), ('Jean-Christophe', 1144), ('Jean-Claude', 4959), ('Jean-François', 5180), ('Jean-Jacques', 1282), ('Jean-Louis', 2300), ('Jean-Luc', 4387), ('Jean-Marc', 3793), ('Jean-Marie', 5615), ('Jean-Michel', 2395), ('Jean-Paul', 2455), ('Jean-Philippe', 1880), ('Jean-Pierre', 6407), ('Jean-Pol', 1068), ('Jean-Yves', 1025), ('Jeremy', 1283), ('Jerôme', 588), ('Jessy', 503), ('Jimmy', 1661), ('Joachim', 1336), ('Joffrey', 525), ('Johan', 2594), ('Johann', 634), ('John', 1860), ('Johnny', 1580), ('Jonas', 945), ('Jonathan', 9513), ('Jordan', 3695), ('Joris', 505), ('Joseph', 6964), ('Joshua', 832), ('José', 5468), ('Joël', 3696), ('Juan', 999), ('Jules', 4826), ('Julian', 1320), ('Julien', 13669), ('Justin', 1953), ('Jérémie', 988), ('Jérémy', 4478), ('Jérôme', 6403), ('Karim', 1216), ('Karl', 1013), ('Kenny', 599), ('Kenzo', 502), ('Kevin', 7018), ('Khalid', 678), ('Killian', 569), ('Kylian', 1312), ('Kyllian', 460), ('Kévin', 2224), ('Laurent', 12306), ('Leandro', 675), ('Lenny', 932), ('Leo', 470), ('Leonardo', 519), ('Liam', 2521), ('Lionel', 3249), ('Livio', 842), ('Loan', 660), ('Logan', 2745), ('Lorenzo', 2291), ('Loris', 1519), ('Louis', 10770), ('Louka', 693), ('Loïc', 5339), ('Loïs', 503), ('Luc', 7990), ('Luca', 3543), ('Lucas', 7721), ('Luciano', 742), ('Lucien', 2714), ('Ludovic', 5288), ('Luigi', 1664), ('Luis', 831), ('Luka', 749), ('Lukas', 794), ('Lyam', 644), ('Léo', 2403), ('Léon', 3478), ('Léonard', 417), ('Léopold', 1224), ('Malik', 429), ('Mamadou', 534), ('Manuel', 2223), ('Marc', 15879), ('Marcel', 6458), ('Marco', 1636), ('Mario', 2384), ('Marius', 1551), ('Martial', 500), ('Martin', 5618), ('Marvin', 931), ('Massimo', 1121), ('Mathias', 2595), ('Mathieu', 5517), ('Mathis', 2650), ('Mathys', 2054), ('Mathéo', 3009), ('Matteo', 2172), ('Matthew', 564), ('Matthias', 805), ('Matthieu', 1560), ('Mattia', 451), ('Mattéo', 1416), ('Matéo', 580), ('Maurice', 3021), ('Maurizio', 472), ('Max', 769), ('Maxence', 2814), ('Maxim', 846), ('Maxime', 12119), ('Maximilien', 1125), ('Maël', 1768), ('Mehdi', 1848), ('Mehmet', 980), ('Michael', 2227), ('Michaël', 11573), ('Michel', 27759), ('Michele', 1275), ('Mickaël', 1383), ('Miguel', 1427), ('Mike', 1379), ('Milan', 524), ('Milo', 887), ('Mirko', 427), ('Mohamed', 6607), ('Mohammad', 535), ('Mohammed', 2726), ('Morgan', 744), ('Mustafa', 1012), ('Mustapha', 714), ('Nabil', 493), ('Nassim', 559), ('Nathan', 7980), ('Nathanaël', 747), ('Naël', 763), ('Naïm', 428), ('Nicola', 1044), ('Nicolas', 19140), ('Noa', 2223), ('Noah', 6029), ('Noam', 932), ('Nolan', 1956), ('Norbert', 611), ('Noé', 1992), ('Noël', 1119), ('Olivier', 16168), ('Omar', 895), ('Oscar', 1897), ('Owen', 827), ('Pablo', 642), ('Paolo', 1064), ('Pascal', 12529), ('Pasquale', 583), ('Patrice', 3068), ('Patrick', 13876), ('Paul', 6243), ('Pedro', 483), ('Peter', 1095), ('Philippe', 26431), ('Pierre', 19716), ('Pierre-Yves', 691), ('Pietro', 1273), ('Pol', 1604), ('Quentin', 7318), ('Rachid', 1081), ('Rafael', 755), ('Rafaël', 457), ('Raoul', 641), ('Raphael', 512), ('Raphaël', 7174), ('Rayan', 1389), ('Raymond', 3293), ('Remy', 624), ('Renato', 413), ('Renaud', 2589), ('René', 6163), ('Ricardo', 455), ('Richard', 2617), ('Robert', 7389), ('Roberto', 1129), ('Robin', 3999), ('Rodolphe', 435), ('Rodrigue', 427), ('Roger', 6103), ('Roland', 3544), ('Romain', 7493), ('Roman', 542), ('Romuald', 684), ('Roméo', 588), ('Ronald', 718), ('Ronny', 416), ('Rosario', 746), ('Ruben', 524), ('Rudi', 1063), ('Rudy', 2707), ('Ryan', 1187), ('Régis', 1032), ('Rémi', 1014), ('Rémy', 1477), ('Sacha', 3962), ('Said', 587), ('Salvatore', 4515), ('Sam', 1096), ('Sami', 743), ('Samir', 724), ('Samuel', 5213), ('Samuël', 637), ('Samy', 591), ('Sandro', 786), ('Sasha', 882), ('Saïd', 535), ('Sean', 494), ('Sebastien', 1131), ('Serge', 7494), ('Sergio', 803), ('Simon', 6624), ('Sofiane', 609), ('Stefan', 654), ('Stefano', 688), ('Stephan', 745), ('Stephane', 468), ('Steve', 3336), ('Steven', 1583), ('Stéphan', 823), ('Stéphane', 9458), ('Sylvain', 2342), ('Sébastien', 12494), ('Tanguy', 1129), ('Thiago', 537), ('Thibaud', 524), ('Thibault', 2665), ('Thibaut', 2628), ('Thierry', 11453), ('Thomas', 13916), ('Théo', 6139), ('Théodore', 416), ('Tiago', 1423), ('Tim', 1028), ('Timothy', 612), ('Timothée', 648), ('Timéo', 1989), ('Tiziano', 508), ('Tom', 5839), ('Tommy', 444), ('Tony', 1200), ('Tristan', 1909), ('Téo', 760), ('Ugo', 1133), ('Valentin', 4223), ('Valentino', 631), ('Victor', 4988), ('Vincent', 12875), ('Vincenzo', 2410), ('Vito', 450), ('Walid', 546), ('Walter', 957), ('William', 4072), ('Willy', 3376), ('Xavier', 6475), ('Yanis', 2199), ('Yann', 717), ('Yannick', 2075), ('Yannis', 488), ('Yassin', 487), ('Yassine', 1035), ('Yoann', 450), ('Yohan', 735), ('Younes', 792), ('Youri', 515), ('Youssef', 1375), ('Yusuf', 487), ('Yvan', 1552), ('Yves', 7626), ('Yvon', 1293), ('Zakaria', 915)))
A:faker.providers.person.fr_BE.__init__.first_names_female->OrderedDict((('Adeline', 1996), ('Adriana', 664), ('Adèle', 1294), ('Agathe', 625), ('Agnès', 2980), ('Alberte', 806), ('Alessia', 1206), ('Alexandra', 3873), ('Alexia', 1851), ('Alice', 6134), ('Alicia', 3281), ('Aline', 3827), ('Alison', 1567), ('Alisson', 799), ('Alix', 1766), ('Alizée', 764), ('Alyssa', 871), ('Amandine', 4726), ('Ambre', 1509), ('Amina', 1036), ('Amélia', 804), ('Amélie', 4034), ('Ana', 1303), ('Anastasia', 563), ('Anaëlle', 985), ('Anaïs', 5221), ('Andrea', 599), ('Andréa', 533), ('Andrée', 4461), ('Angela', 2190), ('Angelina', 921), ('Angèle', 749), ('Angélique', 4440), ('Anissa', 903), ('Anita', 1960), ('Ann', 612), ('Anna', 6389), ('Annabelle', 521), ('Anne', 18637), ('Anne-Catherine', 804), ('Anne-Françoise', 760), ('Anne-Marie', 5244), ('Anne-Sophie', 2074), ('Annette', 1688), ('Annick', 4519), ('Annie', 6979), ('Anny', 770), ('Antoinette', 635), ('Antonella', 551), ('Antonia', 852), ('Antonietta', 736), ('Antonina', 579), ('Apolline', 677), ('Ariane', 1591), ('Arlette', 4082), ('Assia', 702), ('Astrid', 1434), ('Aude', 1332), ('Audrey', 5495), ('Aurore', 4784), ('Aurélie', 8447), ('Axelle', 1363), ('Aya', 894), ('Aïcha', 777), ('Barbara', 2302), ('Bernadette', 7995), ('Berthe', 761), ('Betty', 716), ('Brigitte', 8729), ('Béatrice', 5819), ('Bénédicte', 2971), ('Bérengère', 538), ('Bérénice', 537), ('Camille', 7894), ('Capucine', 781), ('Carine', 8290), ('Carla', 975), ('Carmela', 1442), ('Carmen', 1171), ('Carole', 2773), ('Caroline', 9799), ('Cassandra', 1510), ('Caterina', 571), ('Catherine', 12270), ('Cathy', 2670), ('Chantal', 12383), ('Charlie', 560), ('Charline', 2336), ('Charlotte', 7281), ('Chiara', 1372), ('Chloé', 6538), ('Christel', 2878), ('Christelle', 7450), ('Christiane', 10377), ('Christianne', 587), ('Christina', 944), ('Christine', 14924), ('Cindy', 5453), ('Claire', 5014), ('Clara', 5701), ('Clarisse', 950), ('Claude', 845), ('Claudette', 1016), ('Claudia', 1540), ('Claudine', 8230), ('Cloé', 756), ('Clémence', 2553), ('Clémentine', 1438), ('Colette', 4420), ('Coline', 1171), ('Concetta', 958), ('Constance', 710), ('Coralie', 2770), ('Coraline', 704), ('Corine', 877), ('Corinne', 3399), ('Cristina', 654), ('Cynthia', 1434), ('Cécile', 6406), ('Célestine', 683), ('Célia', 3355), ('Céline', 9865), ('Daisy', 762), ('Daniela', 792), ('Danielle', 6363), ('Danièle', 1362), ('Daphné', 836), ('Deborah', 1443), ('Delphine', 5035), ('Denise', 3330), ('Diana', 1049), ('Diane', 799), ('Dina', 591), ('Dominique', 9714), ('Dorothée', 1009), ('Déborah', 1059), ('Edith', 1742), ('Elena', 2748), ('Eliane', 2556), ('Elina', 602), ('Eline', 1319), ('Elisa', 3679), ('Elisabeth', 4183), ('Elise', 5004), ('Elodie', 5667), ('Eloïse', 2015), ('Elsa', 1769), ('Eléa', 856), ('Eléna', 777), ('Eléonore', 1571), ('Emeline', 2078), ('Emelyne', 537), ('Emilia', 808), ('Emilie', 8324), ('Emma', 6227), ('Emmanuelle', 2171), ('Emy', 1101), ('Erika', 1027), ('Estelle', 2654), ('Esther', 997), ('Eugénie', 517), ('Eva', 4415), ('Eve', 690), ('Eveline', 1080), ('Evelyne', 2949), ('Fabienne', 9206), ('Fanny', 3891), ('Fatiha', 725), ('Fatima', 3382), ('Fatma', 969), ('Fernande', 1077), ('Fiona', 1216), ('Flavie', 722), ('Flora', 637), ('Flore', 721), ('Florence', 5651), ('Floriane', 577), ('Florine', 1127), ('Franca', 517), ('France', 1363), ('Francesca', 1413), ('Francine', 6224), ('Françoise', 15074), ('Frédérique', 1548), ('Gabrielle', 2245), ('Gaëlle', 2586), ('Geneviève', 5125), ('Georgette', 2987), ('Germaine', 1269), ('Ghislaine', 2128), ('Gilberte', 1685), ('Ginette', 2049), ('Giovanna', 1389), ('Gisèle', 2577), ('Giulia', 2225), ('Giuseppa', 1139), ('Giuseppina', 1526), ('Gladys', 517), ('Gloria', 669), ('Grazia', 537), ('Graziella', 844), ('Gwenaëlle', 809), ('Gwendoline', 1155), ('Géraldine', 2160), ('Helena', 621), ('Henriette', 952), ('Huguette', 1721), ('Héloïse', 1042), ('Hélène', 5090), ('Ilona', 840), ('Imane', 722), ('Inaya', 848), ('Ines', 1063), ('Ingrid', 3140), ('Inès', 2893), ('Irina', 641), ('Iris', 918), ('Irène', 2103), ('Isabelle', 18724), ('Isaline', 623), ('Jacqueline', 12361), ('Jade', 3076), ('Jamila', 536), ('Janine', 898), ('Jeanine', 2047), ('Jeanne', 5843), ('Jeannine', 7623), ('Jennifer', 4762), ('Jenny', 1488), ('Jessica', 6083), ('Joanna', 556), ('Jocelyne', 3275), ('Johanna', 1072), ('Josette', 3632), ('Josiane', 5824), ('Josianne', 635), ('Josée', 1676), ('Joséphine', 1827), ('Joëlle', 5374), ('Judith', 934), ('Julia', 3002), ('Julie', 11779), ('Juliette', 4813), ('Justine', 4599), ('Karima', 628), ('Karin', 1183), ('Karine', 2031), ('Kathleen', 815), ('Kathy', 920), ('Katia', 1209), ('Katty', 1595), ('Kelly', 1879), ('Kenza', 877), ('Khadija', 1269), ('Kimberley', 1197), ('Laetitia', 5479), ('Laly', 838), ('Laora', 560), ('Lara', 2110), ('Laura', 10919), ('Laure', 2241), ('Laurence', 10175), ('Laurie', 1961), ('Laurine', 892), ('Laëtitia', 526), ('Lea', 568), ('Leila', 771), ('Lena', 1193), ('Leslie', 1005), ('Leïla', 654), ('Lila', 648), ('Liliane', 6088), ('Lilou', 1593), ('Lily', 1275), ('Lina', 2597), ('Linda', 2499), ('Lindsay', 1778), ('Line', 777), ('Lisa', 3602), ('Lise', 1723), ('Lisette', 560), ('Livia', 814), ('Lola', 3350), ('Loredana', 990), ('Lorena', 752), ('Lou', 1446), ('Louane', 604), ('Louisa', 914), ('Louise', 7194), ('Louna', 1000), ('Lucette', 833), ('Lucia', 1484), ('Lucie', 7397), ('Lucienne', 1948), ('Lucile', 686), ('Lucy', 890), ('Ludivine', 1817), ('Luna', 1713), ('Lydia', 1374), ('Lydie', 1040), ('Léa', 8281), ('Léana', 657), ('Léna', 1948), ('Léonie', 1049), ('Madeleine', 3116), ('Madison', 899), ('Maeva', 668), ('Magali', 3148), ('Malika', 1266), ('Mandy', 647), ('Manon', 8633), ('Manuela', 825), ('Marcelle', 2535), ('Margaux', 3346), ('Margot', 1392), ('Marguerite', 2981), ('Maria', 17999), ('Mariam', 550), ('Marianne', 4787), ('Marie', 41370), ('Marie-Ange', 1183), ('Marie-Anne', 1153), ('Marie-Christine', 3831), ('Marie-Claire', 2731), ('Marie-Claude', 782), ('Marie-France', 2406), ('Marie-Françoise', 795), ('Marie-Hélène', 950), ('Marie-Jeanne', 1786), ('Marie-José', 1114), ('Marie-Laure', 724), ('Marie-Line', 786), ('Marie-Louise', 1895), ('Marie-Madeleine', 546), ('Marie-Noëlle', 724), ('Marie-Paule', 1888), ('Marie-Pierre', 753), ('Marie-Rose', 1553), ('Marie-Thérèse', 2860), ('Marielle', 608), ('Mariette', 1580), ('Marina', 2257), ('Marine', 4568), ('Marion', 2755), ('Marjorie', 2057), ('Marlène', 672), ('Marthe', 1048), ('Martine', 14396), ('Mary', 642), ('Maryline', 2068), ('Marylène', 913), ('Maryse', 2299), ('Mathilde', 2814), ('Maud', 1898), ('Maude', 739), ('Maureen', 1135), ('Mauricette', 633), ('Maurine', 577), ('Maya', 734), ('Maëlle', 1768), ('Maëlys', 890), ('Maëva', 905), ('Maïté', 1545), ('Melissa', 1922), ('Mia', 1911), ('Micheline', 4151), ('Michelle', 3334), ('Michèle', 5819), ('Mila', 1700), ('Mireille', 5018), ('Monika', 595), ('Monique', 14460), ('Morgane', 3021), ('Muriel', 4542), ('Murielle', 2550), ('Mya', 699), ('Myriam', 6727), ('Mégane', 1148), ('Mélanie', 5610), ('Mélina', 760), ('Mélissa', 3038), ('Mélodie', 563), ('Nadia', 3929), ('Nadine', 8525), ('Nadège', 1314), ('Nancy', 4071), ('Naomi', 828), ('Natacha', 2113), ('Nathalie', 20537), ('Nell', 727), ('Nelly', 2947), ('Nicole', 12422), ('Nina', 2274), ('Nora', 2030), ('Norah', 634), ('Nour', 595), ('Noémie', 3730), ('Noëlla', 681), ('Noëlle', 544), ('Océane', 3687), ('Odette', 2075), ('Odile', 958), ('Olga', 894), ('Olivia', 4201), ('Ophélie', 1764), ('Ornella', 956), ('Paola', 784), ('Pascale', 6004), ('Pascaline', 574), ('Patricia', 11883), ('Patrizia', 575), ('Paula', 1199), ('Paule', 637), ('Paulette', 2759), ('Pauline', 6347), ('Perrine', 1090), ('Priscilla', 754), ('Rachel', 2193), ('Rachida', 553), ('Rania', 582), ('Raymonde', 1870), ('Rebecca', 872), ('Renée', 3228), ('Rita', 3593), ('Rolande', 639), ('Romane', 2596), ('Romy', 533), ('Rosa', 2546), ('Rosalia', 656), ('Rosalie', 812), ('Rosaria', 618), ('Rose', 3145), ('Rose-Marie', 1135), ('Roseline', 530), ('Roxane', 1280), ('Régine', 1824), ('Sabine', 6458), ('Sabrina', 5356), ('Salma', 576), ('Salomé', 826), ('Samantha', 847), ('Samira', 967), ('Sandra', 4896), ('Sandrine', 5810), ('Sandy', 963), ('Sara', 2684), ('Sarah', 10424), ('Serena', 547), ('Shana', 521), ('Shirley', 521), ('Silvana', 685), ('Silvia', 688), ('Simone', 2189), ('Simonne', 845), ('Sofia', 2471), ('Solange', 1585), ('Soline', 588), ('Solène', 663), ('Sonia', 3555), ('Sophia', 808), ('Sophie', 12241), ('Soraya', 629), ('Stephanie', 630), ('Stéphanie', 11825), ('Suzanne', 3805), ('Sylvia', 1405), ('Sylviane', 1678), ('Sylvianne', 553), ('Sylvie', 8635), ('Séverine', 3219), ('Tamara', 956), ('Tania', 842), ('Tatiana', 1193), ('Teresa', 884), ('Thi', 755), ('Théa', 832), ('Thérèse', 2834), ('Tiffany', 1391), ('Tiziana', 628), ('Valentina', 887), ('Valentine', 2976), ('Valérie', 12193), ('Vanessa', 5847), ('Victoire', 541), ('Victoria', 3961), ('Vincenza', 762), ('Vinciane', 2062), ('Violette', 882), ('Virginie', 8533), ('Viviane', 4710), ('Véronique', 14214), ('Wendy', 1885), ('Yasmina', 916), ('Yasmine', 1405), ('Yolande', 1370), ('Ysaline', 738), ('Yvette', 4769), ('Yvonne', 2432), ('Zoé', 4697), ('Zélie', 969)))
A:faker.providers.person.fr_BE.__init__.first_names->OrderedDict(Counter(first_names_male) + Counter(first_names_female))
A:faker.providers.person.fr_BE.__init__.last_names->OrderedDict((('Abrassart', 723), ('Adam', 3488), ('Aerts', 784), ('Albert', 1241), ('Alexandre', 1249), ('Allard', 1609), ('Anciaux', 1011), ('André', 3474), ('Antoine', 2984), ('Arnould', 1822), ('Bah', 816), ('Bailly', 1125), ('Barbier', 1361), ('Barbieux', 592), ('Barry', 817), ('Bastien', 659), ('Bastin', 3310), ('Baudoux', 910), ('Bauduin', 1097), ('Bauwens', 1013), ('Beaujean', 758), ('Becker', 1250), ('Beckers', 1410), ('Beguin', 633), ('Benoit', 795), ('Berger', 1561), ('Bernard', 3890), ('Bertrand', 4339), ('Blaise', 984), ('Blondiau', 722), ('Bodart', 2436), ('Bodson', 1835), ('Bogaert', 722), ('Boland', 621), ('Bonnet', 633), ('Bouchat', 1112), ('Boucher', 604), ('Bouchez', 811), ('Boudart', 777), ('Bouillon', 987), ('Boulanger', 2227), ('Bourgeois', 1534), ('Bourguignon', 1553), ('Bovy', 1147), ('Brasseur', 1970), ('Brichard', 656), ('Bruno', 769), ('Bruyère', 808), ('Bultot', 700), ('Burton', 1097), ('Bury', 837), ('Callens', 736), ('Cambier', 1614), ('Capelle', 618), ('Cardon', 645), ('Carlier', 3185), ('Carpentier', 1254), ('Carton', 595), ('Cassart', 612), ('Caudron', 825), ('Chapelle', 971), ('Charles', 1572), ('Charlier', 4656), ('Chevalier', 1558), ('Christiaens', 867), ('Claes', 1854), ('Claessens', 740), ('Claeys', 718), ('Claude', 642), ('Claus', 878), ('Close', 765), ('Closset', 904), ('Clément', 1426), ('Colin', 1672), ('Colinet', 767), ('Collard', 3974), ('Collart', 918), ('Collet', 1564), ('Collette', 1270), ('Collignon', 2295), ('Collin', 2840), ('Colot', 636), ('Colson', 1244), ('Compère', 608), ('Constant', 1027), ('Coppens', 1062), ('Cordier', 1393), ('Corman', 678), ('Cornet', 2727), ('Cornez', 847), ('Cornil', 666), ('Coulon', 992), ('Courtois', 1026), ('Couvreur', 684), ('Crahay', 596), ('Cremer', 656), ('Culot', 1023), ('Cuvelier', 1930), ('Dardenne', 1552), ('David', 1588), ('De Backer', 822), ('De Clercq', 794), ('De Coster', 683), ('De Smet', 983), ('De Vos', 828), ('Debroux', 1018), ('Decamps', 662), ('Dechamps', 1124), ('Declercq', 1252), ('Degueldre', 612), ('Dehon', 951), ('Dejardin', 797), ('Delannoy', 679), ('Delattre', 962), ('Delcourt', 1753), ('Delcroix', 1032), ('Delforge', 1459), ('Delfosse', 2058), ('Delhaye', 2192), ('Delhez', 1112), ('Delmotte', 1462), ('Delporte', 1004), ('Deltour', 635), ('Delvaux', 3124), ('Delvigne', 768), ('Demanet', 601), ('Demaret', 1321), ('Demir', 615), ('Demoulin', 1811), ('Denis', 5205), ('Deprez', 2034), ('Descamps', 2249), ('Desmet', 1576), ('Dessart', 861), ('Dessy', 754), ('Detaille', 649), ('Dethier', 2057), ('Detournay', 598), ('Detry', 842), ('Devaux', 698), ('Deville', 645), ('Devillers', 1019), ('Devos', 2042), ('Dewez', 804), ('Diallo', 1936), ('Dieu', 1081), ('Dieudonné', 629), ('Docquier', 960), ('Donnay', 775), ('Dony', 606), ('Doumont', 664), ('Doyen', 1117), ('Druart', 1534), ('Dubois', 9160), ('Dubuisson', 1159), ('Duchesne', 1099), ('Duchêne', 681), ('Duez', 609), ('Dufour', 1734), ('Dufrane', 664), ('Dufrasne', 832), ('Dujardin', 1679), ('Dumont', 5757), ('Dumortier', 818), ('Dumoulin', 1217), ('Dupont', 6185), ('Dupuis', 1573), ('Duquesne', 865), ('Durant', 795), ('Durieux', 1622), ('Dury', 622), ('Dussart', 768), ('Dutrieux', 635), ('Duval', 596), ('Duvivier', 1191), ('Eloy', 806), ('Englebert', 1130), ('Ernst', 701), ('Etienne', 2150), ('Evrard', 4220), ('Fabry', 675), ('Fauconnier', 653), ('Feron', 784), ('Flament', 1286), ('Fontaine', 4156), ('Foucart', 1119), ('Franck', 822), ('Franssen', 795), ('François', 4779), ('Frère', 895), ('Gabriel', 973), ('Gaillard', 637), ('Gallez', 930), ('Gallo', 604), ('Gaspard', 1128), ('Gauthier', 917), ('Genot', 794), ('George', 733), ('Georges', 2503), ('Gerard', 1264), ('Ghislain', 1092), ('Gilbert', 879), ('Gillain', 1018), ('Gillard', 1729), ('Gilles', 2228), ('Gillet', 3330), ('Gilson', 2516), ('Glineur', 679), ('Gobert', 1732), ('Goblet', 775), ('Godart', 1622), ('Godefroid', 1654), ('Godfroid', 1129), ('Godin', 669), ('Goffaux', 775), ('Goffin', 2664), ('Goffinet', 951), ('Goossens', 1661), ('Gosset', 751), ('Gossiaux', 594), ('Graindorge', 709), ('Grandjean', 1230), ('Greco', 850), ('Grosjean', 961), ('Grégoire', 2866), ('Guillaume', 3266), ('Guiot', 880), ('Gustin', 1407), ('Gérard', 5196), ('Hainaut', 662), ('Halleux', 1061), ('Hannecart', 649), ('Hardy', 2007), ('Heinen', 1003), ('Hendrick', 773), ('Hendrickx', 971), ('Henin', 1003), ('Henrard', 1426), ('Henrion', 691), ('Henrotte', 610), ('Henry', 3357), ('Herman', 1954), ('Hermans', 1224), ('Honoré', 781), ('Hougardy', 597), ('Huart', 1229), ('Hubert', 3047), ('Huberty', 617), ('Hubin', 665), ('Huet', 713), ('Humblet', 945), ('Jacob', 1848), ('Jacobs', 2001), ('Jacquemart', 593), ('Jacquemin', 1768), ('Jacques', 2939), ('Jacquet', 1935), ('Jadot', 1514), ('Jadoul', 770), ('Jamar', 719), ('Janssen', 1396), ('Janssens', 2781), ('Joly', 1091), ('Joris', 1030), ('Kaya', 743), ('Kinet', 663), ('Klein', 872), ('Lacroix', 2320), ('Lahaye', 1258), ('Lallemand', 1440), ('Laloux', 1105), ('Lambert', 8375), ('Lambot', 872), ('Lambotte', 1056), ('Lambrechts', 750), ('Lamy', 837), ('Lange', 780), ('Lardinois', 1269), ('Latour', 603), ('Laurent', 5463), ('Lebeau', 747), ('Leblanc', 978), ('Lebon', 737), ('Lebrun', 2897), ('Leclercq', 5862), ('Lecocq', 1916), ('Lecomte', 2778), ('Lecoq', 650), ('Ledent', 811), ('Ledoux', 981), ('Leduc', 890), ('Lefebvre', 3263), ('Lefevre', 1086), ('Lefèbvre', 1178), ('Lefèvre', 2335), ('Legrain', 769), ('Legrand', 3524), ('Legros', 1723), ('Lejeune', 5316), ('Leleux', 779), ('Leloup', 640), ('Lemaire', 4304), ('Lemmens', 1155), ('Lemoine', 1298), ('Lempereur', 838), ('Lenaerts', 772), ('Lenoir', 1438), ('Leonard', 633), ('Lepage', 851), ('Leroy', 5162), ('Leruth', 608), ('Lheureux', 599), ('Lhoir', 755), ('Libert', 2432), ('Limbourg', 713), ('Liégeois', 1212), ('Liénard', 1054), ('Lombardo', 703), ('Lorent', 936), ('Louis', 3131), ('Lucas', 1095), ('Léonard', 3464), ('Maes', 2492), ('Mahieu', 2123), ('Mahy', 1030), ('Malherbe', 787), ('Maquet', 1023), ('Marchal', 3699), ('Marchand', 1353), ('Marechal', 623), ('Marion', 623), ('Marlier', 1005), ('Marquet', 796), ('Martens', 875), ('Martin', 6603), ('Mary', 875), ('Maréchal', 2673), ('Massart', 2283), ('Masset', 941), ('Massin', 673), ('Masson', 1964), ('Matagne', 1057), ('Materne', 754), ('Mathieu', 4723), ('Mathot', 830), ('Mathy', 1223), ('Maton', 816), ('Matthys', 611), ('Mercier', 1814), ('Mertens', 2483), ('Messina', 747), ('Meunier', 2564), ('Meurant', 692), ('Meurisse', 647), ('Meyer', 1205), ('Michaux', 2562), ('Michel', 4456), ('Michiels', 1712), ('Mignon', 870), ('Minet', 1237), ('Minne', 773), ('Monfort', 809), ('Moreau', 3287), ('Mortier', 693), ('Motte', 1067), ('Mottet', 637), ('Moulin', 1025), ('Moureau', 732), ('Mouton', 707), ('Muller', 1258), ('Müller', 789), ('Navez', 889), ('Neuville', 647), ('Nguyen', 980), ('Nicaise', 893), ('Nicolas', 1977), ('Nicolay', 786), ('Nizet', 699), ('Noel', 915), ('Noël', 4424), ('Nys', 754), ('Nyssen', 748), ('Oger', 694), ('Olivier', 1676), ('Orban', 1578), ('Paquay', 1354), ('Paquet', 1683), ('Paquot', 654), ('Parent', 1295), ('Parmentier', 1922), ('Paul', 989), ('Paulus', 1136), ('Pauwels', 1069), ('Peeters', 2527), ('Peters', 1305), ('Petit', 4547), ('Petitjean', 795), ('Philippart', 958), ('Philippe', 1313), ('Picard', 693), ('Pierard', 1192), ('Pierrard', 634), ('Pierre', 2059), ('Pierret', 843), ('Pierson', 718), ('Piette', 2415), ('Pirard', 1786), ('Pire', 1262), ('Piret', 1706), ('Pirlot', 954), ('Piron', 1949), ('Pirotte', 1917), ('Pirson', 1814), ('Piérard', 769), ('Pochet', 909), ('Polet', 689), ('Pollet', 597), ('Poncelet', 2599), ('Poncin', 1361), ('Raskin', 622), ('Remacle', 1741), ('Remy', 2715), ('Renard', 5209), ('Renier', 1057), ('Renson', 1120), ('Reuter', 647), ('Richard', 1322), ('Rigaux', 611), ('Rizzo', 922), ('Robert', 3519), ('Robin', 701), ('Roger', 650), ('Roland', 2283), ('Romain', 1173), ('Rossi', 722), ('Rousseau', 2630), ('Rousseaux', 660), ('Ruelle', 1040), ('Russo', 1002), ('Sacré', 1151), ('Salmon', 1055), ('Sauvage', 1222), ('Schmit', 996), ('Schmitz', 2588), ('Schoonbroodt', 674), ('Schumacher', 720), ('Schyns', 933), ('Segers', 693), ('Servais', 3367), ('Sevrin', 606), ('Simon', 6022), ('Simonis', 835), ('Simons', 713), ('Smets', 1236), ('Staquet', 737), ('Stas', 672), ('Stassin', 617), ('Stevens', 977), ('Theys', 709), ('Thibaut', 1402), ('Thirion', 1659), ('Thiry', 3688), ('Thomas', 3751), ('Thonon', 859), ('Thys', 1317), ('Timmermans', 1081), ('Toubeau', 632), ('Tournay', 683), ('Toussaint', 2986), ('Urbain', 1986), ('Valentin', 642), ('Van Damme', 823), ('Vandamme', 705), ('Vandenberghe', 861), ('Vanderheyden', 628), ('Vanderlinden', 634), ('Vandevelde', 772), ('Verhaeghe', 638), ('Vermeulen', 1207), ('Vigneron', 773), ('Vilain', 1027), ('Vincent', 1869), ('Vrancken', 632), ('Warnier', 739), ('Wathelet', 925), ('Wattiez', 713), ('Wauters', 1109), ('Wauthier', 928), ('Weber', 865), ('Wilkin', 729), ('Willame', 622), ('Willem', 816), ('Willems', 2515), ('Wilmart', 593), ('Wilmet', 841), ('Wilmotte', 695), ('Wouters', 1216), ('Wéry', 1094), ('Yildirim', 623), ('Yilmaz', 1096)))
faker.providers.person.fr_BE.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/da_DK/__init__.py----------------------------------------
faker.providers.person.da_DK.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/lv_LV/__init__.py----------------------------------------
faker.providers.person.lv_LV.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/zu_ZA/__init__.py----------------------------------------
faker.providers.person.zu_ZA.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/en_NZ/__init__.py----------------------------------------
A:faker.providers.person.en_NZ.__init__.last_names->OrderedDict((('Smith', 948.0), ('Anderson', 394), ('Jones', 386), ('Taylor', 364), ('Brown', 350), ('Williams', 337), ('Thompson', 295), ('Scott', 266), ('Harris', 253), ('Mitchell', 217), ('Thomas', 214), ('Campbell', 193), ('Jackson', 191), ('Stewart', 188), ('Martin', 186), ('Turner', 174), ('Moore', 173), ('Simpson', 171), ('Hart', 166), ('Bell', 163), ('Evans', 161), ('Hansen', 160), ('Gray', 156), ('Henderson', 155), ('Edwards', 153), ('McDonald', 152), ('Davis', 150), ('Ward', 150), ('Cameron', 149), ('Wood', 149), ('MacDonald', 148), ('Reid', 140), ('Cook', 138), ('Bailey', 137), ('Adams', 136), ('Mason', 136), ('Baker', 135), ('Green', 134), ('Jensen', 134), ('Parker', 132), ('Neal', 131), ('Russell', 131), ('Carter', 128), ('Allen', 127), ('Roberts', 127), ('Knight', 126), ('Morgan', 126), ('Murphy', 126), ('Miller', 124), ('Morris', 124), ('McKay', 122), ('Morrison', 121), ('Wallace', 121), ('Stevens', 119), ('Johnston', 113), ('Jenkins', 111), ('Lewis', 110), ('Davies', 109), ('Oliver', 109), ('Ryan', 109), ('Marshall', 108), ('Webb', 108), ('Patchett', 107), ('Hughes', 106), ('Graham', 104), ('Wells', 104), ('Harrison', 103), ('Larsen', 103), ('Matthews', 103), ('Phillips', 102), ('Clarke', 100), ('Gibson', 99), ('Lucas', 99), ('Price', 97), ("O'Sullivan", 96), ('Barnes', 94), ('Gardiner', 92), ('Richards', 91), ('Boyce', 90), ('Duncan', 89), ('Fisher', 89), ('Gill', 89), ("O'Brien", 89), ('Gordon', 88), ('Olsen', 88), ('Powell', 86), ('Black', 85), ('Kennedy', 85), ('Dixon', 84), ('Jamieson', 84), ("O'Connor", 84), ('Sinclair', 84), ('Perry', 83), ('Williamson', 83), ('Day', 82), ('Pedersen', 81), ('Currie', 80), ('Grant', 80), ('Rush', 80), ('McEwen', 79), ('Wilton', 79), ('Kelly', 78), ('Nicholson', 77), ('Coleman', 76), ('Davidson', 76), ('Gardner', 76), ('Saunders', 76), ('Rogers', 75), ('Bryant', 74), ('Ferguson', 74), ('Ford', 73), ('Fowler', 73), ('McLean', 73), ('Holland', 72), ('Lloyd', 72), ('Page', 72), ('Francis', 71), ('Smart', 71), ('Weston', 71), ('Chapman', 70), ('Crawford', 70), ('Shaw', 70), ('Sullivan', 70), ('Webster', 70), ('Millar', 69), ('Burton', 68), ('Fuller', 68), ('Hamilton', 68), ('West', 68), ('Burns', 67), ('Cox', 67), ('Cresswell', 67), ('Holdaway', 67), ('Hodson', 66), ('Kerr', 66), ('Brooks', 64), ('Fletcher', 64), ('McCallum', 64), ('Allan', 63), ('Buchanan', 63), ('Carr', 63), ('Lee', 63), ('Pickering', 63), ('Pope', 63), ('Rowe', 63), ('Woolley', 63), ('McLeod', 62), ('Barnett', 61), ('Berry', 61), ('Lane', 61), ('Tapp', 61), ('Bartlett', 60), ('Elliott', 60), ('Pearson', 60), ('Wilkinson', 60), ('Atkinson', 59), ('Butler', 59), ('Douglas', 59), ('Pratt', 59), ('Cole', 58), ('Hayward', 58), ('Little', 58), ('Newman', 58), ('Simmons', 58), ('Barrett', 57), ('Cooksley', 57), ('Freeman', 57), ('Higgins', 57), ('Hope', 57), ('McGregor', 57), ('McMillan', 57), ('Rose', 57), ('Sutton', 57), ('Wong', 57), ('Harper', 56), ('Osborne', 56), ('Stevenson', 56), ('Bird', 55), ('Boyd', 55), ('Dick', 55), ('Field', 55), ('Greer', 55), ('Greig', 55), ('Nielsen', 55), ('Reynolds', 55), ('Forrest', 54), ('Bradley', 53), ('Gibbons', 53), ('Howard', 53), ('MacKenzie', 53), ('Nelson', 53), ('Todd', 53), ('Waters', 53), ('Ball', 52), ('Davey', 52), ('Holmes', 52), ('Rodgers', 52), ('Stratford', 52), ('Griffiths', 51), ('Small', 51), ('Watt', 51), ('Andrew', 50), ('Bishop', 50), ('Dunn', 50), ('Goodwin', 50), ('Gore', 50), ('Healy', 50), ('May', 50), ('Munro', 50), ('Parsons', 50), ('Poole', 50), ('Watts', 50), ('Hills', 49), ('Peters', 49), ('Vercoe', 49), ('Armstrong', 48), ('Bright', 48), ('Burgess', 48), ('Collis', 48), ("O'Neill", 48), ('Spencer', 48), ('Ritchie', 47), ('Alexander', 46), ('Curtis', 46), ('Freeth', 46), ('Nicol', 46), ('Robson', 46), ('Satherley', 46), ('Stuart', 46), ('Waugh', 46), ('Woods', 46), ('Coley', 45), ('Fitzgerald', 45), ('Fleming', 45), ('Herd', 45), ('Morton', 45), ('Beattie', 44), ('Clifford', 44), ('Costello', 44), ('Dawson', 44), ('Donaldson', 44), ('Fox', 44), ('Hay', 44), ('Jellyman', 44), ('Joe', 44), ('Johansen', 44), ('Knowles', 44), ('Lawson', 44), ("O'Donnell", 44), ('Patterson', 44), ('Payne', 44), ('Read', 44), ('Casey', 43), ('Chandler', 43), ('Donald', 43), ('Gilchrist', 43), ('Hyde', 43), ('McIntosh', 43), ('Paton', 43), ('Robb', 43), ('Rutherford', 43), ('Pike', 42), ('Dillon', 41), ('Drummond', 41), ('Hickey', 41), ('Hooper', 41), ('Jordan', 41), ('Judd', 41), ('Kenny', 41), ('Low', 41), ('Marfell', 41), ('Newton', 41), ("O'Leary", 41), ('Tucker', 41), ('Carson', 40), ('Dean', 40), ('Dickson', 40), ('George', 40), ('Ham', 40), ('McCarthy', 40), ('McIntyre', 40), ('Moran', 40), ("O'Connell", 40), ('Parkes', 40), ('Short', 40), ('Barr', 39), ('Baxter', 39), ('Dalton', 39), ('Forbes', 39), ('Hawkins', 39), ('Ireland', 39), ('Miles', 39), ('Nash', 39), ('Owen', 39), ('Perano', 39), ('Sowman', 39), ('Whyte', 39), ('Bush', 38), ('Drake', 38), ('Eden', 38), ('Giles', 38), ('Hoare', 38), ('Hubbard', 38), ('Hudson', 38), ('MacKay', 38), ('McKinnon', 38), ('Mears', 38), ('Prentice', 38), ('Schwass', 38), ('Simonsen', 38), ('Walton', 38), ('Wheeler', 38), ('Wratt', 38), ('Avery', 37), ('Barker', 37), ('Blake', 37), ('Conway', 37), ('Holloway', 37), ('Horton', 37), ('Manning', 37), ('Nolan', 37), ('Pritchard', 37), ('Bishell', 36), ('Blair', 36), ('Christiansen', 36), ('Fulton', 36), ('Gibbs', 36), ('Griffin', 36), ('Hook', 36), ('McGill', 36), ('Mercer', 36), ('Middleton', 36), ('Rayner', 36), ('Stone', 36), ('Terry', 36), ('Walsh', 36), ('Craig', 35), ('Craven', 35), ('Ellery', 35), ('Findlay', 35), ('Maxwell', 35), ('North', 35), ('Reardon', 35), ('Tait', 35), ('Baldwin', 34), ('Butcher', 34), ('Caldwell', 34), ('Doyle', 34), ('Eaton', 34), ('Flood', 34), ('Gifford', 34), ('Guy', 34), ('Jennings', 34), ('Leslie', 34), ('McMahon', 34), ('McNabb', 34), ('Paterson', 34), ('Porter', 34), ('Reeves', 34), ('Seymour', 34), ('Trask', 34), ('Warren', 34), ('Watkins', 34), ('Wills', 34), ('Best', 33), ('Bull', 33), ('Dawick', 33), ('Dobson', 33), ('Gledhill', 33), ('Hardy', 33), ('Hayes', 33), ('Kendall', 33), ('McCormick', 33), ('McPherson', 33), ('Pollard', 33), ('Rasmussen', 33), ('Shailer', 33), ('Shepherd', 33), ('Sheridan', 33), ('Simmonds', 33), ('Steele', 33), ('Booth', 32), ('Edmonds', 32), ('Gunn', 32), ('Hood', 32), ('Humphrey', 32), ('Hutchinson', 32), ('Laurenson', 32), ('Long', 32), ('Lowe', 32), ('Manson', 32), ('McGrath', 32), ('McKenna', 32), ('Muir', 32), ("O'Keefe", 32), ('Potter', 32), ('Searle', 32), ('Stubbs', 32), ('Wall', 32), ('Wallis', 32), ('Browne', 31), ('Carroll', 31), ('Cunningham', 31), ('Foley', 31), ('Franklin', 31), ('Furness', 31), ('Gilbert', 31), ('Hopkins', 31), ('Jefferies', 31), ('Johnstone', 31), ('Linton', 31), ('Mann', 31), ('Norton', 31), ('Rees', 31), ('Rowlands', 31), ('Sanders', 31), ('Bond', 30), ('Chambers', 30), ('Cragg', 30), ('Davison', 30), ('Gee', 30), ('Gleeson', 30), ('Gullery', 30), ('Hadfield', 30), ('Haines', 30), ('Hepburn', 30), ('Howell', 30), ('Jeffries', 30), ('Lamb', 30), ('Law', 30), ('MacPherson', 30), ('McIsaac', 30), ('Millard', 30), ('Paul', 30), ('Pearce', 30), ('Prouse', 30), ('Ramsay', 30), ('Rowland', 30), ('Spelman', 30), ('Waghorn', 30), ('Willis', 30), ('Zimmerman', 30), ('Aitken', 29), ('Booker', 29), ('Bruce', 29), ('Burrell', 29), ('Burt', 29), ('Funnell', 29), ('Gilmore', 29), ('Guthrie', 29), ('Hewitt', 29), ('Hogg', 29), ('Lammas', 29), ('Lang', 29), ('Lyons', 29), ('McDowall', 29), ('Neilson', 29), ('Norman', 29), ('Reed', 29), ('Rickard', 29), ('Stokes', 29), ('Stratton', 29), ('Strawbridge', 29), ('York', 29), ('Alve', 28), ('Baldick', 28), ('Banks', 28), ('Beard', 28), ('Bowden', 28), ('Boyle', 28), ('Carpenter', 28), ('Connolly', 28), ('Cooke', 28), ('Craw', 28), ('Cumming', 28), ('Drew', 28), ('Fairhall', 28), ('Gillespie', 28), ('Gillies', 28), ('Healey', 28), ('Horn', 28), ('Ingram', 28), ('Knox', 28), ('Lancaster', 28), ('Landon-Lane', 28), ('Marsh', 28), ('Mortimer', 28), ('Riley', 28), ('Sixtus', 28), ('Turnbull', 28), ('Warner', 28), ('Aldridge', 27), ('Allerby', 27), ('Arnold', 27), ('Blackwell', 27), ('Blick', 27), ('Boon', 27), ('Bowater', 27), ('Broughan', 27), ('Davenport', 27), ('Foote', 27), ('Forsyth', 27), ('Laing', 27), ('Mayo', 27), ('McFarlane', 27), ('McMurray', 27), ('Monk', 27), ('Orr', 27), ('Procter', 27), ('Shannon', 27), ('Southee', 27), ('Stace', 27), ('Waller', 27), ('Webby', 27), ('Arnott', 26), ('Baird', 26), ('Bary', 26), ('Bassett', 26), ('Buckley', 26), ('Burke', 26), ('Claridge', 26), ('Clunies-Ross', 26), ('Croad', 26), ('Dyer', 26), ('Ewart', 26), ('Faulkner', 26), ('Fenton', 26), ('Gibb', 26), ('Huddleston', 26), ('Jarvis', 26), ('Kay', 26), ('Kemp', 26), ('McLachlan', 26), ('Middlemiss', 26), ('Moody', 26), ('Mudgway', 26), ('Nicholas', 26), ('Reader', 26), ('Robert', 26), ('Steer', 26), ('Thornton', 26), ('Toms', 26), ('Twidle', 26), ('Vincent', 26), ('Way', 26), ('Whittaker', 26), ('Batchelar', 25), ('Boniface', 25), ('Botham', 25), ('Buick', 25), ('Burnett', 25), ('Ching', 25), ('Christie', 25), ('Corlett', 25), ('Coutts', 25), ('Eglinton', 25), ('Enright', 25), ('Foot', 25), ('Frost', 25), ('Gaskin', 25), ('Hanson', 25), ('Hardie', 25), ('Henry', 25), ('Hoskins', 25), ('Lambert', 25), ('Learmonth', 25), ('Logan', 25), ('Matheson', 25), ('McManaway', 25), ('Meads', 25), ('Meredith', 25), ('Montgomery', 25), ('Murdoch', 25), ('Orchard', 25), ('Perrin', 25), ('Peterson', 25), ('Priest', 25), ('Rossiter', 25), ('Shand', 25), ('Skinner', 25), ('Soper', 25), ('Street', 25), ('Tanner', 25), ('Aberhart', 24), ('Berkahn', 24), ('Burr', 24), ('Cairns', 24), ('Corbett', 24), ('Dalziel', 24), ('Doherty', 24), ('Esson', 24), ('Farland', 24), ('Godfrey', 24), ('Guard', 24), ('Hume', 24), ('Irving', 24), ('Jacques', 24), ('Kirk', 24), ('Love', 24), ('Lyon', 24)))
faker.providers.person.en_NZ.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/ne_NP/__init__.py----------------------------------------
faker.providers.person.ne_NP.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/yo_NG/__init__.py----------------------------------------
faker.providers.person.yo_NG.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/ga_IE/__init__.py----------------------------------------
faker.providers.person.ga_IE.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/zh_CN/__init__.py----------------------------------------
A:faker.providers.person.zh_CN.__init__.last_names->OrderedDict((('王', 7.17), ('李', 7.0), ('张', 6.74), ('刘', 5.1), ('陈', 4.61), ('杨', 3.22), ('黄', 2.45), ('吴', 2.0), ('赵', 2.0), ('周', 1.9), ('徐', 1.45), ('孙', 1.38), ('马', 1.29), ('朱', 1.28), ('胡', 1.16), ('林', 1.13), ('郭', 1.13), ('何', 1.06), ('高', 1.0), ('罗', 0.95), ('郑', 0.93), ('梁', 0.85), ('谢', 0.76), ('宋', 0.7), ('唐', 0.69), ('许', 0.66), ('邓', 0.62), ('冯', 0.62), ('韩', 0.61), ('曹', 0.6), ('曾', 0.58), ('彭', 0.58), ('萧', 0.56), ('蔡', 0.53), ('潘', 0.52), ('田', 0.52), ('董', 0.51), ('袁', 0.5), ('于', 0.48), ('余', 0.48), ('叶', 0.48), ('蒋', 0.48), ('杜', 0.47), ('苏', 0.46), ('魏', 0.45), ('程', 0.45), ('吕', 0.45), ('丁', 0.43), ('沈', 0.41), ('任', 0.41), ('姚', 0.4), ('卢', 0.4), ('傅', 0.4), ('钟', 0.4), ('姜', 0.39), ('崔', 0.38), ('谭', 0.38), ('廖', 0.37), ('范', 0.36), ('汪', 0.36), ('陆', 0.36), ('金', 0.35), ('石', 0.34), ('戴', 0.34), ('贾', 0.33), ('韦', 0.32), ('夏', 0.32), ('邱', 0.32), ('方', 0.31), ('侯', 0.3), ('邹', 0.3), ('熊', 0.29), ('孟', 0.29), ('秦', 0.29), ('白', 0.28), ('江', 0.28), ('阎', 0.27), ('薛', 0.26), ('尹', 0.26), ('段', 0.24), ('雷', 0.24), ('黎', 0.22), ('史', 0.21), ('龙', 0.21), ('陶', 0.21), ('贺', 0.21), ('顾', 0.2), ('毛', 0.2), ('郝', 0.2), ('龚', 0.2), ('邵', 0.2), ('万', 0.19), ('钱', 0.19), ('严', 0.19), ('赖', 0.18), ('覃', 0.18), ('洪', 0.18), ('武', 0.18), ('莫', 0.18), ('孔', 0.17), ('汤', 0.17), ('向', 0.17), ('常', 0.16), ('温', 0.16), ('康', 0.16), ('施', 0.15), ('文', 0.15), ('牛', 0.15), ('樊', 0.15), ('葛', 0.15), ('邢', 0.14), ('安', 0.13), ('齐', 0.13), ('易', 0.13), ('乔', 0.13), ('伍', 0.13), ('庞', 0.13), ('颜', 0.12), ('倪', 0.12), ('庄', 0.12), ('聂', 0.12), ('章', 0.12), ('鲁', 0.11), ('岳', 0.11), ('翟', 0.11), ('殷', 0.11), ('詹', 0.11), ('申', 0.11), ('欧', 0.11), ('耿', 0.11), ('关', 0.1), ('兰', 0.1), ('焦', 0.1), ('俞', 0.1), ('左', 0.1), ('柳', 0.1), ('甘', 0.095), ('祝', 0.09), ('包', 0.087), ('宁', 0.083), ('尚', 0.082), ('符', 0.082), ('舒', 0.082), ('阮', 0.082), ('柯', 0.08), ('纪', 0.08), ('梅', 0.079), ('童', 0.079), ('凌', 0.078), ('毕', 0.078), ('单', 0.076), ('季', 0.076), ('裴', 0.076), ('霍', 0.075), ('涂', 0.075), ('成', 0.075), ('苗', 0.075), ('谷', 0.075), ('盛', 0.074), ('曲', 0.074), ('翁', 0.073), ('冉', 0.073), ('骆', 0.073), ('蓝', 0.072), ('路', 0.072), ('游', 0.071), ('辛', 0.07), ('靳', 0.069), ('欧阳', 0.068), ('管', 0.065), ('柴', 0.065), ('蒙', 0.062), ('鲍', 0.062), ('华', 0.061), ('喻', 0.061), ('祁', 0.061), ('蒲', 0.056), ('房', 0.056), ('滕', 0.055), ('屈', 0.055), ('饶', 0.055), ('解', 0.053), ('牟', 0.053), ('艾', 0.052), ('尤', 0.052), ('阳', 0.05), ('时', 0.05), ('穆', 0.048), ('农', 0.047), ('司', 0.044), ('卓', 0.043), ('古', 0.043), ('吉', 0.043), ('缪', 0.043), ('简', 0.043), ('车', 0.043), ('项', 0.043), ('连', 0.043), ('芦', 0.042), ('麦', 0.041), ('褚', 0.041), ('娄', 0.04), ('窦', 0.04), ('戚', 0.04), ('岑', 0.039), ('景', 0.039), ('党', 0.039), ('宫', 0.039), ('费', 0.039), ('卜', 0.038), ('冷', 0.038), ('晏', 0.038), ('席', 0.036), ('卫', 0.036), ('米', 0.035), ('柏', 0.035), ('宗', 0.034), ('瞿', 0.033), ('桂', 0.033), ('全', 0.033), ('佟', 0.033), ('应', 0.033), ('臧', 0.032), ('闵', 0.032), ('苟', 0.032), ('邬', 0.032), ('边', 0.032), ('卞', 0.032), ('姬', 0.032), ('师', 0.031), ('和', 0.031), ('仇', 0.03), ('栾', 0.03), ('隋', 0.03), ('商', 0.03), ('刁', 0.03), ('沙', 0.03), ('荣', 0.029), ('巫', 0.029), ('寇', 0.029), ('桑', 0.028), ('郎', 0.028), ('甄', 0.027), ('丛', 0.027), ('仲', 0.027), ('虞', 0.026), ('敖', 0.026), ('巩', 0.026), ('明', 0.026), ('佘', 0.025), ('池', 0.025), ('查', 0.025), ('麻', 0.025), ('苑', 0.025), ('迟', 0.024), ('邝', 0.024), ('官', 0.023), ('封', 0.023), ('谈', 0.023), ('匡', 0.023), ('鞠', 0.23), ('惠', 0.022), ('荆', 0.022), ('乐', 0.022), ('冀', 0.021), ('郁', 0.021), ('胥', 0.021), ('南', 0.021), ('班', 0.021), ('储', 0.021), ('原', 0.02), ('栗', 0.02), ('燕', 0.02), ('楚', 0.02), ('鄢', 0.02), ('劳', 0.019), ('谌', 0.019), ('奚', 0.017), ('皮', 0.017), ('粟', 0.017), ('冼', 0.017), ('蔺', 0.017), ('楼', 0.017), ('盘', 0.017), ('满', 0.016), ('闻', 0.016), ('位', 0.016), ('厉', 0.016), ('伊', 0.016), ('仝', 0.015), ('区', 0.015), ('郜', 0.015), ('海', 0.015), ('阚', 0.015), ('花', 0.015), ('权', 0.014), ('强', 0.014), ('帅', 0.014), ('屠', 0.014), ('豆', 0.014), ('朴', 0.014), ('盖', 0.014), ('练', 0.014), ('廉', 0.014), ('禹', 0.014), ('井', 0.013), ('祖', 0.013), ('漆', 0.013), ('巴', 0.013), ('丰', 0.013), ('支', 0.013), ('卿', 0.013), ('国', 0.013), ('狄', 0.013), ('平', 0.013), ('计', 0.012), ('索', 0.012), ('宣', 0.012), ('晋', 0.012), ('相', 0.012), ('初', 0.012), ('门', 0.012), ('云', 0.012), ('容', 0.012), ('敬', 0.011), ('来', 0.011), ('扈', 0.011), ('晁', 0.011), ('芮', 0.011), ('都', 0.011), ('普', 0.011), ('阙', 0.011), ('浦', 0.011), ('戈', 0.011), ('伏', 0.011), ('鹿', 0.011), ('薄', 0.011), ('邸', 0.011), ('雍', 0.01), ('辜', 0.01), ('羊', 0.01), ('阿', 0.01), ('乌', 0.01), ('母', 0.01), ('裘', 0.01), ('亓', 0.01), ('修', 0.01), ('邰', 0.01), ('赫', 0.01), ('杭', 0.01), ('况', 0.0094), ('那', 0.0093), ('宿', 0.0093), ('鲜', 0.0092), ('印', 0.0091), ('逯', 0.0091), ('隆', 0.009), ('茹', 0.009), ('诸', 0.0089), ('战', 0.0088), ('慕', 0.0086), ('危', 0.0084), ('玉', 0.0084), ('银', 0.0084), ('亢', 0.0083), ('嵇', 0.0082), ('公', 0.0082), ('哈', 0.0081), ('湛', 0.0079), ('宾', 0.0077), ('戎', 0.0076), ('勾', 0.0076), ('茅', 0.0076), ('利', 0.0076), ('于', 0.0074), ('呼', 0.0074), ('居', 0.0074), ('揭', 0.0073), ('干', 0.0072), ('但', 0.0072), ('尉', 0.0071), ('冶', 0.0071), ('斯', 0.007), ('元', 0.0069), ('束', 0.0068), ('檀', 0.0068), ('衣', 0.0067), ('信', 0.0067), ('展', 0.0067), ('阴', 0.0067), ('昝', 0.0066), ('智', 0.0065), ('幸', 0.0065), ('奉', 0.0064), ('植', 0.0064), ('衡', 0.0063), ('富', 0.0063), ('尧', 0.006), ('闭', 0.006), ('由', 0.006)))
faker.providers.person.zh_CN.__init__.Provider(PersonProvider)
faker.providers.person.zh_CN.__init__.Provider.first_romanized_name(self)->str
faker.providers.person.zh_CN.__init__.Provider.last_romanized_name(self)->str
faker.providers.person.zh_CN.__init__.Provider.romanized_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/es_MX/__init__.py----------------------------------------
faker.providers.person.es_MX.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/pt_BR/__init__.py----------------------------------------
faker.providers.person.pt_BR.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/de_CH/__init__.py----------------------------------------
faker.providers.person.de_CH.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/es_CO/__init__.py----------------------------------------
A:faker.providers.person.es_CO.__init__.first_names_female->OrderedDict([('María', 0.091410602), ('Luz', 0.034645603), ('Patricia', 0.023351346), ('Ana', 0.020151805), ('Andrea', 0.018010166), ('Diana', 0.016136401), ('Sandra', 0.015622408), ('Martha', 0.014981956), ('Paola', 0.014810625), ('Carmen', 0.013346151), ('Marcela', 0.013283602), ('Isabel', 0.013113631), ('Milena', 0.012810402), ('Lucía', 0.012599637), ('Cecilia', 0.012194425), ('Claudia', 0.011997259), ('Carolina', 0.011933349), ('Gloria', 0.01181097), ('Rosa', 0.011619242), ('Liliana', 0.011109328), ('Elena', 0.010636128), ('Alejandra', 0.010181965), ('Adriana', 0.009594544), ('Laura', 0.009359303), ('Fernanda', 0.00813415), ('Marina', 0.008090637), ('Inés', 0.007652791), ('Lorena', 0.007152395), ('Ángela', 0.007043613), ('Cristina', 0.006926673), ('Leidy', 0.006914435), ('Daniela', 0.006910356), ('Olga', 0.006802934), ('Esther', 0.006773019), ('Tatiana', 0.006690073), ('Johana', 0.00641132), ('Rocío', 0.006339252), ('Beatriz', 0.006067298), ('Lina', 0.006034663), ('Mónica', 0.006007468), ('Alba', 0.006002029), ('Luisa', 0.005946278), ('Esperanza', 0.005904125), ('Yaneth', 0.005904125), ('Blanca', 0.005881009), ('Amparo', 0.005864692), ('Alexandra', 0.005845655), ('Nancy', 0.005670245), ('Margarita', 0.005626732), ('Elizabeth', 0.005584579), ('Stella', 0.005570981), ('Karen', 0.005569622), ('Angie', 0.005380613), ('Viviana', 0.005365656), ('Natalia', 0.005086903), ('Mercedes', 0.005077385), ('Eugenia', 0.004825827), ('Valentina', 0.004602825), ('Yolanda', 0.004540275), ('Angélica', 0.004498122), ('Paula', 0.004454609), ('Camila', 0.00438934), ('Teresa', 0.004377103), ('Sofía', 0.004315913), ('Vanessa', 0.004121466), ('Nelly', 0.004039879), ('Mary', 0.00403852), ('Gladys', 0.003903902), ('Ruth', 0.00379648), ('Flor', 0.003716254), ('Nubia', 0.003708095), ('Johanna', 0.003701296), ('Erika', 0.003684979), ('Doris', 0.003572118), ('Judith', 0.003490532), ('Dayana', 0.003472855), ('Sonia', 0.003355915), ('Maritza', 0.003334158), ('Edith', 0.003267529), ('Clara', 0.003244413), ('Consuelo', 0.003215858), ('Julieth', 0.003123394), ('Juliana', 0.003107077), ('Dora', 0.003092119), ('Victoria', 0.002935745), ('Aura', 0.002856879), ('Eliana', 0.002855519), ('Astrid', 0.002844641), ('Alicia', 0.002841921), ('Katherine', 0.002833763), ('Janeth', 0.002782091), ('Leonor', 0.002742658), ('Myriam', 0.002676029), ('Lizeth', 0.002648834), ('Mery', 0.002616199), ('Nidia', 0.0026094), ('Jenny', 0.002511497), ('Kelly', 0.00249518), ('Constanza', 0.002423112), ('Ximena', 0.002387758), ('Yulieth', 0.00237688), ('Ligia', 0.00237552), ('Sara', 0.002361922), ('Socorro', 0.002338806), ('Ingrid', 0.002322489), ('Helena', 0.002319769), ('Dary', 0.002318409), ('Rosalba', 0.002280336), ('Catalina', 0.0022545), ('Fanny', 0.002216427), ('Pilar', 0.00213756), ('Yenny', 0.002126682), ('Mariela', 0.002080449), ('Yamile', 0.002062772), ('Lilia', 0.002038297), ('Karina', 0.002011101), ('Mariana', 0.001977107), ('Silvia', 0.001953991), ('Julia', 0.001939033), ('Maribel', 0.00189824), ('Amanda', 0.001891441), ('Lucy', 0.001888722), ('Elsa', 0.001884642), ('Jessica', 0.001869685), ('Rosario', 0.001865606), ('Fabiola', 0.001847929), ('Marleny', 0.001808495), ('Marta', 0.001805776), ('Elvira', 0.001788099), ('Omaira', 0.001769062), ('Yuliana', 0.001756824), ('Mireya', 0.001752745), ('Marisol', 0.001695634), ('Piedad', 0.001673878), ('Rubiela', 0.001668439), ('Deisy', 0.001665719), ('Estela', 0.001595011), ('Miriam', 0.001552858), ('Manuela', 0.001537901), ('Jennifer', 0.001536541), ('Graciela', 0.001497108), ('Yadira', 0.001494388), ('Elisa', 0.001488949), ('Yolima', 0.001472632), ('Ruby', 0.001450876), ('Gabriela', 0.001448156), ('Libia', 0.001445436), ('Yohana', 0.001430479), ('Karol', 0.00142232), ('Bibiana', 0.001397844), ('Katerine', 0.001396485), ('Edilma', 0.001389686), ('Nohora', 0.001378808), ('Shirley', 0.00136521), ('Xiomara', 0.001321697), ('Francy', 0.001316258), ('Betty', 0.00130538), ('Melissa', 0.001297221), ('Estella', 0.001272746), ('Carmenza', 0.001271386), ('Edna', 0.001261867), ('Mayra', 0.001260508), ('Vanesa', 0.001259148), ('Lida', 0.00124555), ('Raquel', 0.00124419), ('Estefanía', 0.001231952), ('Hilda', 0.001230593), ('Mabel', 0.001222434), ('Cindy', 0.001212916), ('Liseth', 0.001208836), ('Wendy', 0.001199318), ('Lady', 0.00118572), ('Yésica', 0.001180281), ('Mayerly', 0.001173482), ('Verónica', 0.001173482), ('Norma', 0.001157165), ('Gina', 0.001150366), ('Susana', 0.001150366), ('Yesenia', 0.001144927), ('Maira', 0.001142208), ('Nora', 0.001134049), ('Marlene', 0.00112861), ('Valeria', 0.001124531), ('Elvia', 0.001116372), ('Yasmín', 0.001116372), ('Bertha', 0.001113652), ('Aida', 0.001112293), ('Tania', 0.001102774), ('Ester', 0.001071499), ('Yineth', 0.00106742), ('Dolores', 0.001045664), ('Irma', 0.001041585), ('Matilde', 0.001036145), ('Aurora', 0.001029347), ('Magda', 0.001022548), ('Miryam', 0.001022548), ('Esmeralda', 0.00100759), ('Lucero', 0.00100623), ('Lucila', 0.001003511), ('Gladis', 0.001000791), ('Juana', 0.000984474), ('Jimena', 0.000983114), ('Margoth', 0.000965437), ('Antonia', 0.000961358), ('Yuri', 0.000953199), ('Josefina', 0.00095048), ('Liceth', 0.000939602), ('Yuli', 0.000932803), ('Nury', 0.000930083), ('Nataly', 0.000924644), ('Vilma', 0.000921925), ('Yéssica', 0.000921925), ('Yudy', 0.000921925), ('Yuly', 0.000916486), ('Heidy', 0.000913766), ('Nelcy', 0.00089065), ('Ofelia', 0.00088929), ('Jhoana', 0.00088793), ('Gilma', 0.000875692), ('Zoraida', 0.000868894), ('Enith', 0.000856656), ('Elsy', 0.000853936), ('Clemencia', 0.0008281), ('Danna', 0.000824021), ('Emilia', 0.000818582), ('Cielo', 0.000817222), ('Linda', 0.000817222), ('Damaris', 0.000815863), ('Delia', 0.000811783), ('Irene', 0.000810423), ('Virginia', 0.000803625), ('Paulina', 0.000796826), ('Alcira', 0.000790027), ('Magaly', 0.000785948), ('Ivonne', 0.000779149), ('Oliva', 0.000768271), ('Yina', 0.000753313), ('Carol', 0.000745154), ('Geraldine', 0.000745154), ('Yeimy', 0.000738356), ('Magdalena', 0.000732917), ('Yanet', 0.000731557), ('Yazmín', 0.000730197), ('Sindy', 0.000728837), ('Dahiana', 0.000726118), ('Alix', 0.000724758), ('Rita', 0.000724758), ('Lidia', 0.000719319), ('Marlén', 0.000716599), ('Michel', 0.000715239), ('Yeny', 0.000708441), ('Marly', 0.000703002), ('Dolly', 0.000698922), ('Leydi', 0.000694843), ('Nayibe', 0.000694843), ('Yury', 0.000693483), ('Denis', 0.000690764), ('Derly', 0.000689404), ('Yurany', 0.000688044), ('Emilce', 0.000685325), ('Tulia', 0.000683965), ('Yenifer', 0.000681245), ('Anyi', 0.000677166), ('Francia', 0.000673087), ('Jazmín', 0.000671727), ('Josefa', 0.000671727), ('Janneth', 0.000669007), ('Emilse', 0.000662208), ('Jackeline', 0.00064997), ('Concepción', 0.000645891), ('Dina', 0.000644531), ('Lisbeth', 0.000640452), ('Nathalia', 0.000640452), ('Amelia', 0.000639092), ('Emma', 0.000637733), ('Jacqueline', 0.000637733), ('Zulma', 0.000637733), ('Maricela', 0.000632293), ('Adela', 0.000629574), ('Ibeth', 0.000629574), ('Candelaria', 0.000615976), ('Mirian', 0.000613257), ('Magnolia', 0.000611897), ('Elcy', 0.000606458), ('Aleida', 0.000603738), ('Eva', 0.000598299), ('Gisela', 0.000598299), ('Yurani', 0.000596939), ('Azucena', 0.00059558), ('Amalia', 0.0005915), ('Deicy', 0.000590141), ('Nelsy', 0.000588781), ('Iris', 0.000584701), ('Katherin', 0.000584701), ('Lilian', 0.000584701), ('Leticia', 0.000575183), ('Deyanira', 0.000573823), ('Melba', 0.000573823), ('Adiela', 0.000567024), ('Catherine', 0.000557506)])
A:faker.providers.person.es_CO.__init__.first_names_male->OrderedDict([('José', 0.0486917), ('Andrés', 0.039716926), ('Luis', 0.038832502), ('Carlos', 0.037462599), ('Juan', 0.032670871), ('Alberto', 0.021566442), ('David', 0.020957759), ('Antonio', 0.019540921), ('Fernando', 0.019087709), ('Jorge', 0.016852449), ('Jesús', 0.016303901), ('Alexander', 0.015906424), ('Enrique', 0.015438545), ('Javier', 0.014926665), ('Manuel', 0.0137445), ('Eduardo', 0.013292754), ('Jhon', 0.012868877), ('Diego', 0.012004987), ('Camilo', 0.011381637), ('Alejandro', 0.011356703), ('Óscar', 0.010821355), ('Daniel', 0.010819889), ('Miguel', 0.010749487), ('Felipe', 0.010291874), ('Jairo', 0.010011734), ('Mauricio', 0.009859196), ('César', 0.009266647), ('Alfonso', 0.008726899), ('Rafael', 0.008559695), ('Cristian', 0.008083016), ('Sebastián', 0.007534468), ('Ángel', 0.007062188), ('Iván', 0.007059255), ('Jaime', 0.007024054), ('Julio', 0.006956586), ('Julián', 0.006823115), ('Fabián', 0.006730713), ('Dario', 0.006658844), ('William', 0.006591376), ('Orlando', 0.006400704), ('Francisco', 0.006356703), ('Ricardo', 0.006339102), ('Mario', 0.006192432), ('Edwin', 0.006070695), ('John', 0.00601496), ('Víctor', 0.005956292), ('Leonardo', 0.005865356), ('Armando', 0.005843356), ('Augusto', 0.005786154), ('Pablo', 0.005552948), ('Álvaro', 0.005506013), ('Hernán', 0.005488413), ('Fredy', 0.005476679), ('Pedro', 0.005412144), ('Héctor', 0.005325609), ('Santiago', 0.005315342), ('Edgar', 0.005305075), ('Gustavo', 0.005247873), ('Hernando', 0.005161338), ('Guillermo', 0.005145204), ('Esteban', 0.005055735), ('Humberto', 0.004832796), ('Nelson', 0.004813728), ('Wilson', 0.004730126), ('Arturo', 0.004656791), ('Gabriel', 0.004545321), ('Alfredo', 0.004297448), ('Omar', 0.004282781), ('Germán', 0.004224113), ('Henry', 0.003967439), ('Fabio', 0.003961572), ('Alonso', 0.003751833), ('Brayan', 0.003709299), ('Hugo', 0.003684365), ('Sergio', 0.003650631), ('Alexis', 0.00337489), ('Adolfo', 0.003335289), ('Stiven', 0.003276621), ('Kevin', 0.00313435), ('Johan', 0.003075682), ('Yesid', 0.003056615), ('Ernesto', 0.002924611), ('Raúl', 0.002763274), ('Rodrigo', 0.002694339), ('Roberto', 0.002585802), ('Rubén', 0.002560868), ('Anderson', 0.002525667), ('Eliecer', 0.002511), ('Nicolás', 0.002471399), ('Ferney', 0.002395131), ('Steven', 0.00239073), ('Emilio', 0.002324729), ('Yeison', 0.002311528), ('Arley', 0.002222059), ('Néstor', 0.002200059), ('Albeiro', 0.002125257), ('Wilmer', 0.002101789), ('Gerardo', 0.002095923), ('Jair', 0.002091522), ('Jonathan', 0.002032854), ('Marco', 0.001984453), ('Elkin', 0.001971253), ('Harold', 0.001940452), ('Martín', 0.001915518), ('Elías', 0.001912584), ('Robinson', 0.001908184), ('Alirio', 0.001884717), ('Edison', 0.001871517), ('Adrián', 0.00186125), ('Edinson', 0.001840716), ('Ramiro', 0.001831916), ('Jhonatan', 0.001828982), ('León', 0.001820182), ('Milton', 0.001770314), ('Oswaldo', 0.001726313), ('Ignacio', 0.001714579), ('Freddy', 0.001692578), ('Segundo', 0.001663244), ('Ramón', 0.001651511), ('Duván', 0.001632444), ('Samuel', 0.001554708), ('Gilberto', 0.001535641), ('Walter', 0.001453505), ('Alex', 0.001428571), ('Libardo', 0.001422705), ('James', 0.001421238), ('Vicente', 0.001394837), ('Ariel', 0.001378703), ('Danilo', 0.001377237), ('Giovanny', 0.001353769), ('Gregorio', 0.001334702), ('Gonzalo', 0.001325902), ('Michael', 0.001267234), ('Marlon', 0.0012511), ('Efrain', 0.001186565), ('Mateo', 0.001180698), ('Bernardo', 0.001167498), ('Leandro', 0.001164564), ('Jhoan', 0.001158698), ('Rodolfo', 0.001155764), ('Joaquín', 0.001127897), ('Felix', 0.001089762), ('Jeison', 0.001080962), ('Leonel', 0.001078029), ('Estiven', 0.001070695), ('Wilmar', 0.001063362), ('Edward', 0.001057495), ('Christian', 0.001054561), ('Jefferson', 0.001054561), ('Ronald', 0.00099296), ('René', 0.000990026), ('Aníbal', 0.000972426), ('Richard', 0.000966559), ('Andrey', 0.000959226), ('Jean', 0.000956292), ('Jaider', 0.000954825), ('Darwin', 0.000951892), ('Ever', 0.000951892), ('Arnulfo', 0.000950425), ('Giovanni', 0.000940158), ('Emiro', 0.000934292), ('Uriel', 0.000929891), ('Franklin', 0.000924025), ('Edilberto', 0.000912291), ('Smith', 0.000897624), ('Octavio', 0.00089029), ('Cristhian', 0.000875623), ('Tulio', 0.000875623), ('Eduar', 0.000862423), ('Junior', 0.00085949), ('Didier', 0.000855089), ('Reinaldo', 0.000847756), ('Fidel', 0.000830155), ('Willian', 0.000819889), ('Jimmy', 0.000815488), ('Eder', 0.000758287), ('Isaac', 0.000758287), ('Saúl', 0.000746553), ('Danny', 0.000745087), ('Marcos', 0.000740686), ('Yair', 0.000730419), ('Moisés', 0.000724553), ('Edwar', 0.000723086), ('Jhonny', 0.000718686), ('Miller', 0.000717219), ('Santos', 0.000717219), ('Esneider', 0.000715752), ('Franco', 0.000714286), ('Abel', 0.000705485), ('Dairo', 0.000701085), ('Roger', 0.000701085), ('Aldemar', 0.000695219), ('Rolando', 0.000693752), ('Hermes', 0.000689352), ('Jeferson', 0.000684952), ('Efrén', 0.000679085), ('Jeisson', 0.000679085), ('Ismael', 0.000674685), ('Edgardo', 0.000673218), ('Maicol', 0.000661484), ('Brandon', 0.000654151), ('Bryan', 0.000654151), ('Robert', 0.000649751), ('Eduard', 0.00063655), ('Nilson', 0.000635084), ('Agustín', 0.00063215), ('Tomás', 0.000630683), ('Edilson', 0.000621883), ('Aurelio', 0.00061895), ('Domingo', 0.00061895), ('Arbey', 0.000616016), ('Joan', 0.00061455), ('Yeferson', 0.000607216), ('Samir', 0.000602816), ('Wilder', 0.000602816), ('Ciro', 0.000599883), ('Josué', 0.000598416), ('Joel', 0.000596949), ('Horacio', 0.000591082), ('Jader', 0.000591082), ('Gerson', 0.000583749), ('Marino', 0.000579349), ('Erick', 0.000572015), ('Eugenio', 0.000561748), ('Benjamín', 0.000558815), ('Norberto', 0.000557348), ('Alcides', 0.000555881), ('Israel', 0.000539748), ('Yamid', 0.000535348), ('Emerson', 0.000525081), ('Frank', 0.000504547), ('Geovanny', 0.000504547), ('Gildardo', 0.000495747), ('Vladimir', 0.000495747), ('Silvio', 0.00048548), ('Dagoberto', 0.000479613), ('Misael', 0.000472279), ('Adalberto', 0.000464946), ('Elmer', 0.000464946), ('Campo', 0.000460546), ('Herney', 0.000456145), ('Eider', 0.000454679), ('Farid', 0.000451745), ('Edisson', 0.000447345), ('Evelio', 0.000442945), ('Bladimir', 0.000429745), ('Heriberto', 0.000423878), ('Sneider', 0.000422411), ('Nel', 0.000419478), ('Rigoberto', 0.000419478), ('Jhony', 0.000416544), ('Salvador', 0.000415078), ('Argemiro', 0.000410678), ('Brian', 0.000407744), ('Abelardo', 0.000404811), ('Federico', 0.000401877), ('Jonatan', 0.000398944), ('Wilfredo', 0.000397477), ('Faber', 0.000396011), ('Osvaldo', 0.000394544), ('Simón', 0.000394544), ('Elver', 0.000390144), ('Alveiro', 0.000388677), ('Jerson', 0.000385744), ('Ovidio', 0.000381344), ('Elvis', 0.000375477), ('Norbey', 0.000375477), ('Wilman', 0.00037401), ('Johnny', 0.000372543), ('Cristobal', 0.000368143), ('Harvey', 0.000366676), ('Ancizar', 0.000363743), ('Yerson', 0.000363743), ('Román', 0.000362276), ('Ronal', 0.000362276), ('Reinel', 0.00036081), ('Albert', 0.000359343), ('Darío', 0.000359343), ('Edier', 0.000357876), ('Neider', 0.000353476), ('Harol', 0.000352009), ('Paulo', 0.000352009), ('Deiby', 0.000347609), ('Dany', 0.000346143), ('Leider', 0.000341742), ('Damián', 0.000340276), ('Aldair', 0.000335876), ('Gallego', 0.000335876), ('Abraham', 0.000332942), ('Yecid', 0.000331476), ('Ocampo', 0.000324142), ('Wilfrido', 0.000324142), ('Lorenzo', 0.000318275), ('Paul', 0.000318275), ('Wilber', 0.000316808), ('Bayron', 0.000315342), ('Dubán', 0.000312408), ('Jhan', 0.000312408), ('Isaías', 0.000310942), ('Isidro', 0.000310942)])
A:faker.providers.person.es_CO.__init__.first_names->OrderedDict([('María', 0.091410602), ('Luz', 0.034645603), ('Patricia', 0.023351346), ('Ana', 0.020151805), ('Andrea', 0.018010166), ('Diana', 0.016136401), ('Sandra', 0.015622408), ('Martha', 0.014981956), ('Paola', 0.014810625), ('Carmen', 0.013346151), ('Marcela', 0.013283602), ('Isabel', 0.013113631), ('Milena', 0.012810402), ('Lucía', 0.012599637), ('Cecilia', 0.012194425), ('Claudia', 0.011997259), ('Carolina', 0.011933349), ('Gloria', 0.01181097), ('Rosa', 0.011619242), ('Liliana', 0.011109328), ('Elena', 0.010636128), ('Alejandra', 0.010181965), ('Adriana', 0.009594544), ('Laura', 0.009359303), ('Fernanda', 0.00813415), ('Marina', 0.008090637), ('Inés', 0.007652791), ('Lorena', 0.007152395), ('Ángela', 0.007043613), ('Cristina', 0.006926673), ('Leidy', 0.006914435), ('Daniela', 0.006910356), ('Olga', 0.006802934), ('Esther', 0.006773019), ('Tatiana', 0.006690073), ('Johana', 0.00641132), ('Rocío', 0.006339252), ('Beatriz', 0.006067298), ('Lina', 0.006034663), ('Mónica', 0.006007468), ('Alba', 0.006002029), ('Luisa', 0.005946278), ('Esperanza', 0.005904125), ('Yaneth', 0.005904125), ('Blanca', 0.005881009), ('Amparo', 0.005864692), ('Alexandra', 0.005845655), ('Nancy', 0.005670245), ('Margarita', 0.005626732), ('Elizabeth', 0.005584579), ('Stella', 0.005570981), ('Karen', 0.005569622), ('Angie', 0.005380613), ('Viviana', 0.005365656), ('Natalia', 0.005086903), ('Mercedes', 0.005077385), ('Eugenia', 0.004825827), ('Valentina', 0.004602825), ('Yolanda', 0.004540275), ('Angélica', 0.004498122), ('Paula', 0.004454609), ('Camila', 0.00438934), ('Teresa', 0.004377103), ('Sofía', 0.004315913), ('Vanessa', 0.004121466), ('Nelly', 0.004039879), ('Mary', 0.00403852), ('Gladys', 0.003903902), ('Ruth', 0.00379648), ('Flor', 0.003716254), ('Nubia', 0.003708095), ('Johanna', 0.003701296), ('Erika', 0.003684979), ('Doris', 0.003572118), ('Judith', 0.003490532), ('Dayana', 0.003472855), ('Sonia', 0.003355915), ('Maritza', 0.003334158), ('Edith', 0.003267529), ('Clara', 0.003244413), ('Consuelo', 0.003215858), ('Julieth', 0.003123394), ('Juliana', 0.003107077), ('Dora', 0.003092119), ('Victoria', 0.002935745), ('Aura', 0.002856879), ('Eliana', 0.002855519), ('Astrid', 0.002844641), ('Alicia', 0.002841921), ('Katherine', 0.002833763), ('Janeth', 0.002782091), ('Leonor', 0.002742658), ('Myriam', 0.002676029), ('Lizeth', 0.002648834), ('Mery', 0.002616199), ('Nidia', 0.0026094), ('Jenny', 0.002511497), ('Kelly', 0.00249518), ('Constanza', 0.002423112), ('Ximena', 0.002387758), ('Yulieth', 0.00237688), ('Ligia', 0.00237552), ('Sara', 0.002361922), ('Socorro', 0.002338806), ('Ingrid', 0.002322489), ('Helena', 0.002319769), ('Dary', 0.002318409), ('Rosalba', 0.002280336), ('Catalina', 0.0022545), ('Fanny', 0.002216427), ('Pilar', 0.00213756), ('Yenny', 0.002126682), ('Mariela', 0.002080449), ('Yamile', 0.002062772), ('Lilia', 0.002038297), ('Karina', 0.002011101), ('Mariana', 0.001977107), ('Silvia', 0.001953991), ('Julia', 0.001939033), ('Maribel', 0.00189824), ('Amanda', 0.001891441), ('Lucy', 0.001888722), ('Elsa', 0.001884642), ('Jessica', 0.001869685), ('Rosario', 0.001865606), ('Fabiola', 0.001847929), ('Marleny', 0.001808495), ('Marta', 0.001805776), ('Elvira', 0.001788099), ('Omaira', 0.001769062), ('Yuliana', 0.001756824), ('Mireya', 0.001752745), ('Marisol', 0.001695634), ('Piedad', 0.001673878), ('Rubiela', 0.001668439), ('Deisy', 0.001665719), ('Estela', 0.001595011), ('Miriam', 0.001552858), ('Manuela', 0.001537901), ('Jennifer', 0.001536541), ('Graciela', 0.001497108), ('Yadira', 0.001494388), ('Elisa', 0.001488949), ('Yolima', 0.001472632), ('Ruby', 0.001450876), ('Gabriela', 0.001448156), ('Libia', 0.001445436), ('Yohana', 0.001430479), ('Karol', 0.00142232), ('Bibiana', 0.001397844), ('Katerine', 0.001396485), ('Edilma', 0.001389686), ('Nohora', 0.001378808), ('Shirley', 0.00136521), ('Xiomara', 0.001321697), ('Francy', 0.001316258), ('Betty', 0.00130538), ('Melissa', 0.001297221), ('Estella', 0.001272746), ('Carmenza', 0.001271386), ('Edna', 0.001261867), ('Mayra', 0.001260508), ('Vanesa', 0.001259148), ('Lida', 0.00124555), ('Raquel', 0.00124419), ('Estefanía', 0.001231952), ('Hilda', 0.001230593), ('Mabel', 0.001222434), ('Cindy', 0.001212916), ('Liseth', 0.001208836), ('Wendy', 0.001199318), ('Lady', 0.00118572), ('Yésica', 0.001180281), ('Mayerly', 0.001173482), ('Verónica', 0.001173482), ('Norma', 0.001157165), ('Gina', 0.001150366), ('Susana', 0.001150366), ('Yesenia', 0.001144927), ('Maira', 0.001142208), ('Nora', 0.001134049), ('Marlene', 0.00112861), ('Valeria', 0.001124531), ('Elvia', 0.001116372), ('Yasmín', 0.001116372), ('Bertha', 0.001113652), ('Aida', 0.001112293), ('Tania', 0.001102774), ('Ester', 0.001071499), ('Yineth', 0.00106742), ('Dolores', 0.001045664), ('Irma', 0.001041585), ('Matilde', 0.001036145), ('Aurora', 0.001029347), ('Magda', 0.001022548), ('Miryam', 0.001022548), ('Esmeralda', 0.00100759), ('Lucero', 0.00100623), ('Lucila', 0.001003511), ('Gladis', 0.001000791), ('Juana', 0.000984474), ('Jimena', 0.000983114), ('Margoth', 0.000965437), ('Antonia', 0.000961358), ('Yuri', 0.000953199), ('Josefina', 0.00095048), ('Liceth', 0.000939602), ('Yuli', 0.000932803), ('Nury', 0.000930083), ('Nataly', 0.000924644), ('Vilma', 0.000921925), ('Yéssica', 0.000921925), ('Yudy', 0.000921925), ('Yuly', 0.000916486), ('Heidy', 0.000913766), ('Nelcy', 0.00089065), ('Ofelia', 0.00088929), ('Jhoana', 0.00088793), ('Gilma', 0.000875692), ('Zoraida', 0.000868894), ('Enith', 0.000856656), ('Elsy', 0.000853936), ('Clemencia', 0.0008281), ('Danna', 0.000824021), ('Emilia', 0.000818582), ('Cielo', 0.000817222), ('Linda', 0.000817222), ('Damaris', 0.000815863), ('Delia', 0.000811783), ('Irene', 0.000810423), ('Virginia', 0.000803625), ('Paulina', 0.000796826), ('Alcira', 0.000790027), ('Magaly', 0.000785948), ('Ivonne', 0.000779149), ('Oliva', 0.000768271), ('Yina', 0.000753313), ('Carol', 0.000745154), ('Geraldine', 0.000745154), ('Yeimy', 0.000738356), ('Magdalena', 0.000732917), ('Yanet', 0.000731557), ('Yazmín', 0.000730197), ('Sindy', 0.000728837), ('Dahiana', 0.000726118), ('Alix', 0.000724758), ('Rita', 0.000724758), ('Lidia', 0.000719319), ('Marlén', 0.000716599), ('Michel', 0.000715239), ('Yeny', 0.000708441), ('Marly', 0.000703002), ('Dolly', 0.000698922), ('Leydi', 0.000694843), ('Nayibe', 0.000694843), ('Yury', 0.000693483), ('Denis', 0.000690764), ('Derly', 0.000689404), ('Yurany', 0.000688044), ('Emilce', 0.000685325), ('Tulia', 0.000683965), ('Yenifer', 0.000681245), ('Anyi', 0.000677166), ('Francia', 0.000673087), ('Jazmín', 0.000671727), ('Josefa', 0.000671727), ('Janneth', 0.000669007), ('Emilse', 0.000662208), ('Jackeline', 0.00064997), ('Concepción', 0.000645891), ('Dina', 0.000644531), ('Lisbeth', 0.000640452), ('Nathalia', 0.000640452), ('Amelia', 0.000639092), ('Emma', 0.000637733), ('Jacqueline', 0.000637733), ('Zulma', 0.000637733), ('Maricela', 0.000632293), ('Adela', 0.000629574), ('Ibeth', 0.000629574), ('Candelaria', 0.000615976), ('Mirian', 0.000613257), ('Magnolia', 0.000611897), ('Elcy', 0.000606458), ('Aleida', 0.000603738), ('Eva', 0.000598299), ('Gisela', 0.000598299), ('Yurani', 0.000596939), ('Azucena', 0.00059558), ('Amalia', 0.0005915), ('Deicy', 0.000590141), ('Nelsy', 0.000588781), ('Iris', 0.000584701), ('Katherin', 0.000584701), ('Lilian', 0.000584701), ('Leticia', 0.000575183), ('Deyanira', 0.000573823), ('Melba', 0.000573823), ('Adiela', 0.000567024), ('Catherine', 0.000557506)]).copy()
A:faker.providers.person.es_CO.__init__.last_names->OrderedDict([('Rodríguez', 0.027384697), ('Gómez', 0.020422368), ('Martínez', 0.020115369), ('García', 0.019433148), ('López', 0.019162104), ('González', 0.018265076), ('Hernández', 0.01699467), ('Sánchez', 0.016893259), ('Pérez', 0.016406486), ('Díaz', 0.015069702), ('Ramírez', 0.014970134), ('Rojas', 0.012601722), ('Torres', 0.012484639), ('Moreno', 0.01134238), ('Vargas', 0.010733913), ('Muñoz', 0.010541231), ('Ortiz', 0.01009871), ('Castro', 0.009097505), ('Gutiérrez', 0.008656827), ('Jiménez', 0.008560948), ('Suárez', 0.008066799), ('Álvarez', 0.008056658), ('Ruiz', 0.007958934), ('Valencia', 0.007941418), ('Quintero', 0.00766392), ('Herrera', 0.007485989), ('Romero', 0.00748138), ('Mosquera', 0.007114455), ('Morales', 0.007082188), ('Arias', 0.006243241), ('Rivera', 0.006023824), ('Flórez', 0.005914116), ('Giraldo', 0.005782281), ('Medina', 0.005736185), ('Castillo', 0.005722356), ('Parra', 0.005665197), ('Peña', 0.005635696), ('Guerrero', 0.005407982), ('Salazar', 0.005365573), ('Osorio', 0.005327775), ('Mejía', 0.005317634), ('Mendoza', 0.005201472), ('Marín', 0.005053043), ('Cardona', 0.00496546), ('Cárdenas', 0.004892629), ('Cruz', 0.004795827), ('Restrepo', 0.004729449), ('Correa', 0.004724839), ('Ortega', 0.004712854), ('Acosta', 0.004640023), ('Ramos', 0.004636335), ('Reyes', 0.004593005), ('Rincón', 0.004554284), ('Zapata', 0.004487906), ('Sierra', 0.004380963), ('Mora', 0.004333945), ('Palacios', 0.004313663), ('Molina', 0.004285083), ('Delgado', 0.004150483), ('Guzmán', 0.004148639), ('Silva', 0.00413942), ('Contreras', 0.004136654), ('Lozano', 0.004089636), ('Montoya', 0.004063823), ('Ríos', 0.003995601), ('Vásquez', 0.003978084), ('Caicedo', 0.003936598), ('Cortés', 0.003899721), ('Velásquez', 0.003888658), ('Londoño', 0.003881283), ('Ospina', 0.003877595), ('Jaramillo', 0.003845328), ('Córdoba', 0.003807529), ('Escobar', 0.003759589), ('Murillo', 0.003740229), ('Orozco', 0.00373101), ('Fernández', 0.003705196), ('Vega', 0.003632364), ('Hurtado', 0.003556767), ('Carvajal', 0.003517124), ('Agudelo', 0.00351528), ('Calderón', 0.003481169), ('León', 0.003475638), ('Ávila', 0.003279269), ('Garzón', 0.003224876), ('Beltrán', 0.0032175), ('Trujillo', 0.00320275), ('Pineda', 0.003086588), ('Méndez', 0.003059852), ('Barrera', 0.003041414), ('Acevedo', 0.002976879), ('Henao', 0.002974113), ('Bedoya', 0.002971348), ('Franco', 0.002971348), ('Jaimes', 0.002916954), ('Bernal', 0.002892063), ('Arango', 0.002830294), ('Hoyos', 0.002818309), ('Navarro', 0.002813699), ('Durán', 0.002772213), ('Vergara', 0.002759306), ('Soto', 0.002739024), ('Camacho', 0.002672646), ('Sandoval', 0.002652363), ('Gil', 0.002644988), ('Buitrago', 0.002634847), ('Duarte', 0.002609033), ('Carrillo', 0.002527904), ('Duque', 0.002526982), ('Pacheco', 0.002519607), ('Barrios', 0.002500247), ('Aguirre', 0.002496559), ('Vélez', 0.002459682), ('Benavides', 0.002455994), ('Bermúdez', 0.002447697), ('Narváez', 0.002442166), ('Rueda', 0.002432025), ('Toro', 0.002431103), ('Blanco', 0.002385007), ('Amaya', 0.002381319), ('Forero', 0.002380397), ('Becerra', 0.002371178), ('Pinzón', 0.002364724), ('Camargo', 0.002363802), ('Vanegas', 0.002347208), ('Bonilla', 0.002326004), ('Padilla', 0.002326004), ('Ariza', 0.00231955), ('Ardila', 0.002313097), ('Galvis', 0.0023048), ('Daza', 0.002289127), ('Mena', 0.002284517), ('Villamizar', 0.002254094), ('Sarmiento', 0.002245797), ('Cano', 0.002234734), ('Zambrano', 0.00223289), ('Espinosa', 0.00222828), ('Gallego', 0.00222828), ('Tovar', 0.002224593), ('Uribe', 0.002219061), ('Ochoa', 0.002190482), ('Castellanos', 0.002181262), ('Cabrera', 0.002177575), ('Castañeda', 0.002145307), ('Solano', 0.002143464), ('Fuentes', 0.002104743), ('Perdomo', 0.002103821), ('Guevara', 0.002101977), ('Castaño', 0.002077085), ('Patiño', 0.002046662), ('Ocampo', 0.002029146), ('Páez', 0.002020848), ('Serna', 0.002020848), ('Mesa', 0.002005176), ('Angulo', 0.001987659), ('Mercado', 0.001982128), ('Alzate', 0.001969221), ('Rosero', 0.001952626), ('Bautista', 0.001948939), ('Vera', 0.001932344), ('Meneses', 0.0019305), ('Arenas', 0.001922203), ('Cifuentes', 0.001902843), ('Arévalo', 0.001896389), ('Montes', 0.001878873), ('Arrieta', 0.001876107), ('Guerra', 0.001869653), ('Aguilar', 0.001855825), ('Ayala', 0.001849371), ('Figueroa', 0.001845684), ('Fonseca', 0.001840152), ('Pinto', 0.001832777), ('Bravo', 0.001805119), ('Luna', 0.001801431), ('Niño', 0.001798666), ('Salcedo', 0.00179129), ('Serrano', 0.001790368), ('Roa', 0.001773774), ('Palacio', 0.001770086), ('Perea', 0.001765476), ('Velasco', 0.001761789), ('Villa', 0.001760867), ('Sepúlveda', 0.001755335), ('Benítez', 0.001744272), ('Meza', 0.001741507), ('Sanabria', 0.001737819), ('Miranda', 0.001722146), ('Gaitán', 0.001714771), ('Melo', 0.00170463), ('Márquez', 0.001678816), ('Ordóñez', 0.001675128), ('Zuluaga', 0.001673285), ('Andrade', 0.001663143), ('Estrada', 0.00165669), ('Prieto', 0.00162811), ('Alvarado', 0.001624423), ('Leal', 0.001623501), ('Gaviria', 0.001616125), ('Salas', 0.001603219), ('Polo', 0.001597687), ('Bohórquez', 0.001585702), ('Arboleda', 0.001580171), ('Pulido', 0.001580171), ('Pardo', 0.001579249), ('Monsalve', 0.001575561), ('Cuéllar', 0.001573717), ('Rangel', 0.001571873), ('Nieto', 0.001570029), ('Loaiza', 0.00156542), ('Rivas', 0.001562654), ('Murcia', 0.001561732), ('Campo', 0.001555279), ('Naranjo', 0.001555279), ('Galindo', 0.001538684), ('Santos', 0.001537762), ('Lara', 0.001532231), ('Triana', 0.001510105), ('Burbano', 0.001485213), ('Maldonado', 0.001485213), ('Galeano', 0.001476916), ('Pabón', 0.001464931), ('Rentería', 0.001462165), ('Espitia', 0.001458477), ('Fajardo', 0.001457555), ('Gamboa', 0.001455711), ('Chávez', 0.001436351), ('Vallejo', 0.001435429), ('Barreto', 0.001431742), ('Caro', 0.001415147), ('Ceballos', 0.001407772), ('Alarcón', 0.001405006), ('Prada', 0.00140224), ('Villegas', 0.001384724), ('Cáceres', 0.001381958), ('Caballero', 0.001380114), ('Salgado', 0.001380114), ('Velandia', 0.001373661), ('Carmona', 0.001365363), ('Chaparro', 0.001364441), ('Oviedo', 0.001360754), ('Granados', 0.001348769), ('Montenegro', 0.001348769), ('Saavedra', 0.00133955), ('Betancur', 0.001338628), ('Rubio', 0.001335862), ('Cuesta', 0.001312814), ('Rico', 0.001300829), ('Ballesteros', 0.001299907), ('Ibarra', 0.001298985), ('Valderrama', 0.001283312), ('Barbosa', 0.001277781), ('Garcés', 0.001269484), ('Monroy', 0.001253811), ('Erazo', 0.001251045), ('Núñez', 0.001245514), ('Quiroga', 0.001231685), ('Angarita', 0.001230763), ('Cantillo', 0.001227997), ('Posada', 0.001214168), ('Pedraza', 0.001210481), ('Arteaga', 0.001204027), ('Yepes', 0.001204027), ('Bustos', 0.001198496), ('Olaya', 0.001196652), ('Salamanca', 0.001189277), ('Burgos', 0.001186511), ('Corredor', 0.001180979), ('Alfonso', 0.001173604), ('Paz', 0.001168072), ('Parada', 0.001161619), ('Bolaños', 0.001150556), ('Tamayo', 0.001149634), ('Manrique', 0.001144103), ('Domínguez', 0.001138571), ('Cardozo', 0.001134883), ('Quiroz', 0.001134883), ('Bastidas', 0.001127508), ('Obando', 0.001112757), ('Rendón', 0.001112757), ('Mantilla', 0.001109991), ('Gonzáles', 0.001107226), ('Puentes', 0.00110446), ('Bejarano', 0.001088787), ('Riascos', 0.001086943), ('Castrillón', 0.001086022), ('Bustamante', 0.0010851), ('Rengifo', 0.0010851), ('Ospino', 0.001083256), ('Ojeda', 0.001081412), ('Villamil', 0.001073115), ('Cerón', 0.00105652), ('Arroyo', 0.001055598), ('Ángel', 0.001053754), ('Chacón', 0.001050067), ('Portilla', 0.001042691), ('Barragán', 0.001041769), ('Orjuela', 0.001039926), ('Bolívar', 0.001024253), ('Molano', 0.001021487), ('Anaya', 0.001016878)])
A:faker.providers.person.es_CO.__init__.prefixes_female->OrderedDict([('Sra.', 0.5), ('Srta.', 0.2), ('Dra.', 0.2), ('Doña', 0.05), ('Dña.', 0.05)])
A:faker.providers.person.es_CO.__init__.prefixes_male->OrderedDict([('Sr.', 0.7), ('Dr.', 0.2), ('Don', 0.05), ('D.', 0.05)])
faker.providers.person.es_CO.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/nl_NL/__init__.py----------------------------------------
faker.providers.person.nl_NL.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/tw_GH/__init__.py----------------------------------------
faker.providers.person.tw_GH.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/lt_LT/__init__.py----------------------------------------
faker.providers.person.lt_LT.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/sw/__init__.py----------------------------------------
faker.providers.person.sw.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/bg_BG/__init__.py----------------------------------------
faker.providers.person.bg_BG.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/es/__init__.py----------------------------------------
faker.providers.person.es.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/no_NO/__init__.py----------------------------------------
faker.providers.person.no_NO.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/hi_IN/__init__.py----------------------------------------
faker.providers.person.hi_IN.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/hu_HU/__init__.py----------------------------------------
A:faker.providers.person.hu_HU.__init__.last_names->OrderedDict((('Nagy', 0.06992), ('Kovács', 0.06457), ('Tóth', 0.06316), ('Szabó', 0.06234), ('Horváth', 0.05995), ('Varga', 0.041), ('Kiss', 0.03891), ('Molnár', 0.03189), ('Németh', 0.02715), ('Farkas', 0.02499), ('Balogh', 0.02468), ('Papp', 0.01567), ('Takács', 0.01535), ('Juhász', 0.01516), ('Lakatos', 0.01486), ('Mészáros', 0.01183), ('Oláh', 0.01161), ('Simon', 0.01129), ('Rácz', 0.01063), ('Fekete', 0.01021), ('Szilágyi', 0.00959), ('Török', 0.0079), ('Fehér', 0.00786), ('Balázs', 0.00771), ('Gál', 0.00756), ('Kis', 0.0073), ('Szűcs', 0.00709), ('Kocsis', 0.007), ('Orsós', 0.00692), ('Pintér', 0.006), ('Fodor', 0.00686), ('Szalai', 0.00628), ('Sipos', 0.0062), ('Magyar', 0.0061), ('Lukács', 0.00611), ('Gulyás', 0.00591), ('Biró', 0.00576), ('Király', 0.0056), ('László', 0.00548), ('Katona', 0.00548), ('Jakab', 0.00541), ('Bogdán', 0.00536), ('Balog', 0.0053), ('Sándor', 0.0052), ('Boros', 0.00515), ('Fazekas', 0.005), ('Kelemen', 0.005), ('Váradi', 0.005), ('Antal', 0.0049), ('Somogyi', 0.00487), ('Orosz', 0.00484), ('Fülöp', 0.0048), ('Veres', 0.0047), ('Vincze', 0.00468), ('Hegedűs', 0.00458), ('Budai', 0.00453), ('Deák', 0.00449), ('Pap', 0.00442), ('Bálint', 0.00435), ('Pál', 0.00427), ('Illés', 0.0042), ('Vass', 0.0042), ('Szőke', 0.00419), ('Vörös', 0.00418), ('Bognár', 0.00416), ('Fábián', 0.00415), ('Lengyel', 0.00414), ('Bodnár', 0.00409), ('Szücs', 0.00403), ('Hajdu', 0.00391), ('Halász', 0.0039), ('Jónás', 0.00388), ('Máté', 0.00371), ('Székely', 0.00367), ('Kozma', 0.00366), ('Gáspár', 0.00364), ('Pásztor', 0.00356), ('Bakos', 0.00354), ('Dudás', 0.00348), ('Major', 0.00347), ('Orbán', 0.00343), ('Hegedüs', 0.00342), ('Virág', 0.00341), ('Barna', 0.00335), ('Novák', 0.00334), ('Soós', 0.00331), ('Tamás', 0.00326), ('Nemes', 0.00326), ('Pataki', 0.0032), ('Balla', 0.00313), ('Faragó', 0.00312), ('Kerekes', 0.0031), ('Borbély', 0.00311), ('Barta', 0.00308), ('Péter', 0.003), ('Szekeres', 0.00306), ('Csonka', 0.00305), ('Mezei', 0.00302), ('Márton', 0.003), ('Sárközi', 0.00298)))
faker.providers.person.hu_HU.__init__.Provider(PersonProvider)
faker.providers.person.hu_HU.__init__.Provider.first_name_female_abbreviated(self)->str
faker.providers.person.hu_HU.__init__.Provider.first_name_male_abbreviated(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/hr_HR/__init__.py----------------------------------------
faker.providers.person.hr_HR.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/th_TH/__init__.py----------------------------------------
A:faker.providers.person.th_TH.__init__.formats_female->OrderedDict((('{{first_name_female}} {{last_name}}', 0.97), ('{{prefix_female}}{{first_name_female}} {{last_name}}', 0.015), ('{{first_name_female}} {{last_name}} {{suffix_female}}', 0.001), ('{{prefix_female}}{{first_name_female}} {{last_name}} {{suffix}}', 0.001)))
A:faker.providers.person.th_TH.__init__.formats_male->OrderedDict((('{{first_name_male}} {{last_name}}', 0.97), ('{{prefix_male}}{{first_name_male}} {{last_name}}', 0.015), ('{{first_name_male}} {{last_name}} {{suffix_male}}', 0.001), ('{{prefix_male}}{{first_name_male}} {{last_name}} {{suffix}}', 0.001)))
A:faker.providers.person.th_TH.__init__.formats_nonbinary->OrderedDict((('{{first_name_nonbinary}} {{last_name}}', 0.97), ('{{prefix_nonbinary}}{{first_name_nonbinary}} {{last_name}}', 0.015), ('{{first_name_nonbinary}} {{last_name}} {{suffix_nonbinary}}', 0.001), ('{{prefix_nonbinary}}{{first_name_nonbinary}} {{last_name}} {{suffix}}', 0.001)))
A:faker.providers.person.th_TH.__init__.prefixes_female->OrderedDict((('นาง', 0.3), ('น.ส.', 0.2), ('นางสาว', 0.15), ('ด.ญ.', 0.15), ('เด็กหญิง', 0.05), ('จ.ต.', 0.001), ('จ.ท.', 0.001), ('จ.ส.ต.', 0.001), ('จ.ส.ท.', 0.001), ('จ.ส.อ.', 0.001), ('จ.อ.', 0.001), ('ด.ต.', 0.001), ('น.ต.', 0.001), ('น.ท.', 0.001), ('น.อ.', 0.001), ('พ.จ.ต.', 0.001), ('พ.จ.ท.', 0.001), ('พ.จ.อ.', 0.001), ('พ.ต.', 0.001), ('พ.ต.ต.', 0.001), ('พ.ต.ท.', 0.001), ('พ.ต.อ.', 0.001), ('พ.ท.', 0.001), ('พ.อ.', 0.001), ('พ.อ.ต.', 0.001), ('พ.อ.ท.', 0.001), ('พ.อ.อ.', 0.001), ('ร.ต.', 0.001), ('ร.ต.ต.', 0.001), ('ร.ต.ท.', 0.001), ('ร.ต.อ.', 0.001), ('ร.ท.', 0.001), ('ร.อ.', 0.001), ('ส.ต.', 0.001), ('ส.ต.ต.', 0.001), ('ส.ต.ท.', 0.001), ('ส.ต.อ.', 0.001), ('ส.ท.', 0.001), ('ส.อ.', 0.001), ('พล.ต.', 0.0001), ('พล.ต.ต.', 0.0001), ('พล.ต.ท.', 0.0001), ('พล.ต.อ.', 0.0001), ('พล.ท.', 0.0001), ('พล.ร.ต.', 0.0001), ('พล.ร.ท.', 0.0001), ('พล.ร.อ.', 0.0001), ('พล.อ.', 0.0001), ('พล.อ.ต.', 0.0001), ('พล.อ.ท.', 0.0001), ('พล.อ.อ.', 0.0001), ('ม.ร.ว.', 0.0001), ('ม.ล.', 0.0001), ('หม่อมราชวงศ์', 0.0001), ('หม่อมหลวง', 0.0001)))
A:faker.providers.person.th_TH.__init__.prefixes_male->OrderedDict((('นาย', 0.6), ('ด.ช.', 0.3), ('จ.ต.', 0.001), ('จ.ท.', 0.001), ('จ.ส.ต.', 0.001), ('จ.ส.ท.', 0.001), ('จ.ส.อ.', 0.001), ('จ.อ.', 0.001), ('ด.ต.', 0.001), ('น.ต.', 0.001), ('น.ท.', 0.001), ('น.อ.', 0.001), ('พ.จ.ต.', 0.001), ('พ.จ.ท.', 0.001), ('พ.จ.อ.', 0.001), ('พ.ต.', 0.001), ('พ.ต.ต.', 0.001), ('พ.ต.ท.', 0.001), ('พ.ต.อ.', 0.001), ('พ.ท.', 0.001), ('พ.อ.', 0.001), ('พ.อ.ต.', 0.001), ('พ.อ.ท.', 0.001), ('พ.อ.อ.', 0.001), ('ร.ต.', 0.001), ('ร.ต.ต.', 0.001), ('ร.ต.ท.', 0.001), ('ร.ต.อ.', 0.001), ('ร.ท.', 0.001), ('ร.อ.', 0.001), ('ส.ต.', 0.001), ('ส.ต.ต.', 0.001), ('ส.ต.ท.', 0.001), ('ส.ต.อ.', 0.001), ('ส.ท.', 0.001), ('ส.อ.', 0.001), ('พล.ต.', 0.0001), ('พล.ต.ต.', 0.0001), ('พล.ต.ท.', 0.0001), ('พล.ต.อ.', 0.0001), ('พล.ท.', 0.0001), ('พล.ร.ต.', 0.0001), ('พล.ร.ท.', 0.0001), ('พล.ร.อ.', 0.0001), ('พล.อ.', 0.0001), ('พล.อ.ต.', 0.0001), ('พล.อ.ท.', 0.0001), ('พล.อ.อ.', 0.0001), ('ม.ร.ว.', 0.0001), ('ม.ล.', 0.0001), ('หม่อมราชวงศ์', 0.0001), ('หม่อมหลวง', 0.0001), ('พระ', 0.0001), ('สามเณร', 0.001), ('พระครูธรรมธร', 1e-05), ('พระครูปลัด', 1e-05), ('พระครูวินัยธร', 1e-05), ('พระครูสมุห์', 1e-05), ('พระครูใบฎีกา', 1e-05), ('พระปลัด', 1e-05), ('พระมหา', 1e-05), ('พระสมุห์', 1e-05), ('พระอธิการ', 1e-05), ('พระใบฎีกา', 1e-05), ('เจ้าอธิการ', 1e-05)))
A:faker.providers.person.th_TH.__init__.prefixes_nonbinary->prefixes_female.copy().copy()
A:faker.providers.person.th_TH.__init__.prefixes->OrderedDict((('นาง', 0.3), ('น.ส.', 0.2), ('นางสาว', 0.15), ('ด.ญ.', 0.15), ('เด็กหญิง', 0.05), ('จ.ต.', 0.001), ('จ.ท.', 0.001), ('จ.ส.ต.', 0.001), ('จ.ส.ท.', 0.001), ('จ.ส.อ.', 0.001), ('จ.อ.', 0.001), ('ด.ต.', 0.001), ('น.ต.', 0.001), ('น.ท.', 0.001), ('น.อ.', 0.001), ('พ.จ.ต.', 0.001), ('พ.จ.ท.', 0.001), ('พ.จ.อ.', 0.001), ('พ.ต.', 0.001), ('พ.ต.ต.', 0.001), ('พ.ต.ท.', 0.001), ('พ.ต.อ.', 0.001), ('พ.ท.', 0.001), ('พ.อ.', 0.001), ('พ.อ.ต.', 0.001), ('พ.อ.ท.', 0.001), ('พ.อ.อ.', 0.001), ('ร.ต.', 0.001), ('ร.ต.ต.', 0.001), ('ร.ต.ท.', 0.001), ('ร.ต.อ.', 0.001), ('ร.ท.', 0.001), ('ร.อ.', 0.001), ('ส.ต.', 0.001), ('ส.ต.ต.', 0.001), ('ส.ต.ท.', 0.001), ('ส.ต.อ.', 0.001), ('ส.ท.', 0.001), ('ส.อ.', 0.001), ('พล.ต.', 0.0001), ('พล.ต.ต.', 0.0001), ('พล.ต.ท.', 0.0001), ('พล.ต.อ.', 0.0001), ('พล.ท.', 0.0001), ('พล.ร.ต.', 0.0001), ('พล.ร.ท.', 0.0001), ('พล.ร.อ.', 0.0001), ('พล.อ.', 0.0001), ('พล.อ.ต.', 0.0001), ('พล.อ.ท.', 0.0001), ('พล.อ.อ.', 0.0001), ('ม.ร.ว.', 0.0001), ('ม.ล.', 0.0001), ('หม่อมราชวงศ์', 0.0001), ('หม่อมหลวง', 0.0001))).copy()
faker.providers.person.th_TH.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/de_DE/__init__.py----------------------------------------
faker.providers.person.de_DE.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/en_US/__init__.py----------------------------------------
A:faker.providers.person.en_US.__init__.formats_female->OrderedDict((('{{first_name_female}} {{last_name}}', 0.97), ('{{prefix_female}} {{first_name_female}} {{last_name}}', 0.015), ('{{first_name_female}} {{last_name}} {{suffix_female}}', 0.02), ('{{prefix_female}} {{first_name_female}} {{last_name}} {{suffix_female}}', 0.005)))
A:faker.providers.person.en_US.__init__.formats_nonbinary->OrderedDict((('{{first_name_nonbinary}} {{last_name}}', 0.97), ('{{prefix_nonbinary}} {{first_name_nonbinary}} {{last_name}}', 0.015), ('{{first_name_nonbinary}} {{last_name}} {{suffix_nonbinary}}', 0.02), ('{{prefix_nonbinary}} {{first_name_nonbinary}} {{last_name}} {{suffix_nonbinary}}', 0.005)))
A:faker.providers.person.en_US.__init__.formats_male->OrderedDict((('{{first_name_male}} {{last_name}}', 0.97), ('{{prefix_male}} {{first_name_male}} {{last_name}}', 0.015), ('{{first_name_male}} {{last_name}} {{suffix_male}}', 0.02), ('{{prefix_male}} {{first_name_male}} {{last_name}} {{suffix_male}}', 0.005)))
A:faker.providers.person.en_US.__init__.formats->OrderedDict((('{{first_name_male}} {{last_name}}', 0.97), ('{{prefix_male}} {{first_name_male}} {{last_name}}', 0.015), ('{{first_name_male}} {{last_name}} {{suffix_male}}', 0.02), ('{{prefix_male}} {{first_name_male}} {{last_name}} {{suffix_male}}', 0.005))).copy()
A:faker.providers.person.en_US.__init__.first_names_female->OrderedDict((('April', 0.004529083), ('Abigail', 0.002043839), ('Adriana', 0.000488767), ('Adrienne', 0.000622931), ('Aimee', 0.000424727), ('Alejandra', 0.000415754), ('Alexa', 0.000663005), ('Alexandra', 0.002835711), ('Alexandria', 0.000964993), ('Alexis', 0.003446735), ('Alice', 0.000589904), ('Alicia', 0.003766845), ('Alisha', 0.000475942), ('Alison', 0.001506047), ('Allison', 0.003740866), ('Alyssa', 0.00324341), ('Amanda', 0.015360768), ('Amber', 0.006928794), ('Amy', 0.012860314), ('Ana', 0.000853679), ('Andrea', 0.006747028), ('Angel', 0.001161117), ('Angela', 0.011954085), ('Angelica', 0.001102746), ('Angie', 0.00030166), ('Anita', 0.001383767), ('Ann', 0.002627483), ('Anna', 0.004691502), ('Anne', 0.002089582), ('Annette', 0.001487399), ('Ariana', 0.000412668), ('Ariel', 0.000615774), ('Ashlee', 0.000696534), ('Ashley', 0.014773009), ('Audrey', 0.001139165), ('Autumn', 0.000918594), ('Bailey', 0.000691916), ('Barbara', 0.004839169), ('Becky', 0.000960944), ('Belinda', 0.000502227), ('Beth', 0.002246113), ('Bethany', 0.001249385), ('Betty', 0.000840241), ('Beverly', 0.000990272), ('Bianca', 0.000624835), ('Bonnie', 0.001351901), ('Brandi', 0.002077216), ('Brandy', 0.002177499), ('Breanna', 0.000876003), ('Brenda', 0.005737124), ('Briana', 0.00093665), ('Brianna', 0.002543549), ('Bridget', 0.000787232), ('Brittany', 0.007258404), ('Brittney', 0.001566147), ('Brooke', 0.002410152), ('Caitlin', 0.001808319), ('Caitlyn', 0.000481194), ('Candace', 0.000550662), ('Candice', 0.000653199), ('Carla', 0.00195185), ('Carly', 0.000498725), ('Carmen', 0.000891783), ('Carol', 0.002972719), ('Caroline', 0.001198127), ('Carolyn', 0.002647225), ('Carrie', 0.002934659), ('Casey', 0.001177707), ('Cassandra', 0.002501243), ('Cassidy', 0.000452129), ('Cassie', 0.000344886), ('Catherine', 0.004460622), ('Cathy', 0.001413248), ('Charlene', 0.000538865), ('Charlotte', 0.000530417), ('Chelsea', 0.00280043), ('Chelsey', 0.000368501), ('Cheryl', 0.004166447), ('Cheyenne', 0.000696907), ('Chloe', 0.000565807), ('Christie', 0.000397873), ('Christina', 0.008735669), ('Christine', 0.007488758), ('Christy', 0.00141861), ('Cindy', 0.003360109), ('Claire', 0.000553835), ('Claudia', 0.00096055), ('Colleen', 0.001836203), ('Connie', 0.001821845), ('Courtney', 0.00484939), ('Cristina', 0.000328734), ('Crystal', 0.006365045), ('Cynthia', 0.007655379), ('Daisy', 0.000437443), ('Dana', 0.003395805), ('Danielle', 0.006671783), ('Darlene', 0.000952737), ('Dawn', 0.005014983), ('Deanna', 0.002049026), ('Debbie', 0.001842922), ('Deborah', 0.005386088), ('Debra', 0.004123572), ('Denise', 0.004592291), ('Desiree', 0.000991497), ('Destiny', 0.001055515), ('Diamond', 0.000331732), ('Diana', 0.003699348), ('Diane', 0.003058996), ('Dominique', 0.000847857), ('Donna', 0.00570819), ('Doris', 0.000398026), ('Dorothy', 0.000722426), ('Ebony', 0.000399624), ('Eileen', 0.000544271), ('Elaine', 0.000601175), ('Elizabeth', 0.014954075), ('Ellen', 0.000747267), ('Emily', 0.009100581), ('Emma', 0.001272059), ('Erica', 0.004344471), ('Erika', 0.002105537), ('Erin', 0.005450719), ('Evelyn', 0.000825095), ('Faith', 0.000427113), ('Felicia', 0.001717294), ('Frances', 0.000546897), ('Gabriela', 0.000526937), ('Gabriella', 0.00044123), ('Gabrielle', 0.001090096), ('Gail', 0.00071934), ('Gina', 0.002841095), ('Glenda', 0.000384982), ('Gloria', 0.001155623), ('Grace', 0.00087202), ('Gwendolyn', 0.000407831), ('Hailey', 0.000662917), ('Haley', 0.001557939), ('Hannah', 0.004189822), ('Hayley', 0.000478305), ('Heather', 0.010945254), ('Heidi', 0.002239941), ('Helen', 0.000636675), ('Holly', 0.003487028), ('Isabel', 0.000352305), ('Isabella', 0.000410282), ('Jackie', 0.000566748), ('Jaclyn', 0.00047708), ('Jacqueline', 0.004811242), ('Jade', 0.000446264), ('Jaime', 0.000853175), ('Jamie', 0.005067663), ('Jane', 0.0009486), ('Janet', 0.002489993), ('Janice', 0.001593308), ('Jasmin', 0.000333374), ('Jasmine', 0.003025422), ('Jean', 0.000815969), ('Jeanette', 0.000767293), ('Jeanne', 0.000515381), ('Jenna', 0.001804052), ('Jennifer', 0.029218839), ('Jenny', 0.000932667), ('Jessica', 0.020047608), ('Jill', 0.003253018), ('Jillian', 0.000988587), ('Jo', 0.000442083), ('Joan', 0.000802793), ('Joann', 0.000544336), ('Joanna', 0.001176284), ('Joanne', 0.000729824), ('Jocelyn', 0.000456878), ('Jodi', 0.001252405), ('Jody', 0.000741861), ('Jordan', 0.001653057), ('Joy', 0.000916515), ('Joyce', 0.001009488), ('Judith', 0.000870706), ('Judy', 0.001101586), ('Julia', 0.003301891), ('Julie', 0.008211731), ('Kaitlin', 0.000674473), ('Kaitlyn', 0.001478623), ('Kara', 0.001549119), ('Karen', 0.009643845), ('Kari', 0.000794323), ('Karina', 0.000494764), ('Karla', 0.000387696), ('Katelyn', 0.001476128), ('Katherine', 0.006581479), ('Kathleen', 0.00503549), ('Kathryn', 0.004177806), ('Kathy', 0.002710214), ('Katie', 0.003056216), ('Katrina', 0.001565446), ('Kayla', 0.004621465), ('Kaylee', 0.000551734), ('Kelli', 0.000932163), ('Kellie', 0.000299187), ('Kelly', 0.009342929), ('Kelsey', 0.002470383), ('Kendra', 0.001401079), ('Kerri', 0.000316215), ('Kerry', 0.000352984), ('Kiara', 0.000390037), ('Kim', 0.002518642), ('Kimberly', 0.015594077), ('Kirsten', 0.000369486), ('Krista', 0.001266872), ('Kristen', 0.004345587), ('Kristi', 0.001022926), ('Kristie', 0.000380189), ('Kristin', 0.003613728), ('Kristina', 0.002316281), ('Kristine', 0.000977709), ('Kristy', 0.001097734), ('Krystal', 0.001238113), ('Kylie', 0.00049739), ('Lacey', 0.00045469), ('Latasha', 0.00032904), ('Latoya', 0.000646371), ('Laura', 0.010815096), ('Lauren', 0.007015421), ('Laurie', 0.002200786), ('Leah', 0.001997571), ('Leslie', 0.003606134), ('Linda', 0.006437751), ('Lindsay', 0.002185466), ('Lindsey', 0.002646153), ('Lisa', 0.01872729), ('Loretta', 0.000482945), ('Lori', 0.006040316), ('Lorraine', 0.000486753), ('Lydia', 0.000370274), ('Lynn', 0.001522308), ('Mackenzie', 0.000761056), ('Madeline', 0.000808921), ('Madison', 0.002011184), ('Makayla', 0.000439391), ('Mallory', 0.000688633), ('Mandy', 0.000355566), ('Marcia', 0.000403213), ('Margaret', 0.003839968), ('Maria', 0.006593123), ('Mariah', 0.00097598), ('Marie', 0.001520229), ('Marilyn', 0.000590889), ('Marisa', 0.000339983), ('Marissa', 0.001582627), ('Martha', 0.001290028), ('Mary', 0.014288466), ('Maureen', 0.000753855), ('Mckenzie', 0.000334512), ('Meagan', 0.000729999), ('Megan', 0.007686786), ('Meghan', 0.001481578), ('Melanie', 0.003400117), ('Melinda', 0.002078113), ('Melissa', 0.014890692), ('Melody', 0.000404264), ('Mercedes', 0.000334643), ('Meredith', 0.000766987), ('Mia', 0.000319935), ('Michaela', 0.000506998), ('Michele', 0.003519551), ('Michelle', 0.01527423), ('Mikayla', 0.000410195), ('Mindy', 0.000306891), ('Miranda', 0.001421193), ('Misty', 0.001564614), ('Molly', 0.001710641), ('Monica', 0.004324095), ('Monique', 0.001272125), ('Morgan', 0.002527025), ('Nancy', 0.005023343), ('Natalie', 0.003658398), ('Natasha', 0.001739815), ('Nichole', 0.001001237), ('Nicole', 0.011156655), ('Nina', 0.000298115), ('Norma', 0.000470754), ('Olivia', 0.001967609), ('Paige', 0.001106313), ('Pam', 0.000374454), ('Pamela', 0.005816222), ('Patricia', 0.008349353), ('Patty', 0.000383493), ('Paula', 0.002478284), ('Peggy', 0.000810606), ('Penny', 0.000836564), ('Phyllis', 0.000562437), ('Priscilla', 0.000350226), ('Rachael', 0.001098128), ('Rachel', 0.00876108), ('Raven', 0.000404855), ('Rebecca', 0.010563161), ('Rebekah', 0.000858581), ('Regina', 0.001941739), ('Renee', 0.00257883), ('Rhonda', 0.002879221), ('Rita', 0.000719187), ('Roberta', 0.000461715), ('Robin', 0.00409199), ('Robyn', 0.00032138), ('Rose', 0.000697125), ('Ruth', 0.001041946), ('Sabrina', 0.001920969), ('Sally', 0.000532912), ('Samantha', 0.008186124), ('Sandra', 0.006473426), ('Sandy', 0.000497106), ('Sara', 0.005619879), ('Sarah', 0.014434273), ('Savannah', 0.000978344), ('Selena', 0.000329106), ('Shannon', 0.005952552), ('Shari', 0.000449043), ('Sharon', 0.004796469), ('Shawna', 0.000354209), ('Sheena', 0.000355763), ('Sheila', 0.00220129), ('Shelby', 0.001575601), ('Shelia', 0.000403673), ('Shelley', 0.000922227), ('Shelly', 0.001339469), ('Sheri', 0.000913166), ('Sherri', 0.001285038), ('Sherry', 0.002445235), ('Sheryl', 0.00057025), ('Shirley', 0.000833259), ('Sierra', 0.000954816), ('Sonia', 0.000332739), ('Sonya', 0.000914085), ('Sophia', 0.000535976), ('Stacey', 0.002836761), ('Stacie', 0.0003903), ('Stacy', 0.00311717), ('Stefanie', 0.00034644), ('Stephanie', 0.013595762), ('Sue', 0.000472877), ('Summer', 0.000411508), ('Susan', 0.0088973), ('Suzanne', 0.001943577), ('Sydney', 0.001220101), ('Sylvia', 0.000625798), ('Tabitha', 0.000428404), ('Tamara', 0.00212948), ('Tami', 0.000403651), ('Tammie', 0.00042337), ('Tammy', 0.006493584), ('Tanya', 0.002039024), ('Tara', 0.00316834), ('Tasha', 0.000355807), ('Taylor', 0.003996871), ('Teresa', 0.005060003), ('Terri', 0.001823903), ('Terry', 0.00060494), ('Theresa', 0.003492762), ('Tiffany', 0.006594283), ('Tina', 0.005186419), ('Toni', 0.000891695), ('Tonya', 0.002404133), ('Tracey', 0.001511146), ('Traci', 0.00086193), ('Tracie', 0.000301901), ('Tracy', 0.00498572), ('Tricia', 0.000449196), ('Valerie', 0.003218022), ('Vanessa', 0.003779189), ('Veronica', 0.003017805), ('Vicki', 0.00088653), ('Vickie', 0.000695199), ('Victoria', 0.005237677), ('Virginia', 0.001496482), ('Wanda', 0.001336186), ('Wendy', 0.004058263), ('Whitney', 0.001690768), ('Yesenia', 0.000331951), ('Yolanda', 0.001213819), ('Yvette', 0.000483427), ('Yvonne', 0.001005483), ('Zoe', 0.000367407)))
A:faker.providers.person.en_US.__init__.first_names_male->OrderedDict((('Aaron', 0.006741589), ('Adam', 0.007124922), ('Adrian', 0.001521889), ('Alan', 0.002344657), ('Albert', 0.001316595), ('Alec', 0.000442958), ('Alejandro', 0.000862489), ('Alex', 0.002111833), ('Alexander', 0.005215733), ('Alexis', 0.000277915), ('Alfred', 0.000318919), ('Allen', 0.001679613), ('Alvin', 0.00024794), ('Andre', 0.001400621), ('Andres', 0.000335574), ('Andrew', 0.013475074), ('Angel', 0.000902262), ('Anthony', 0.013783357), ('Antonio', 0.002392535), ('Arthur', 0.001342637), ('Austin', 0.003785615), ('Barry', 0.001102751), ('Benjamin', 0.006535474), ('Bernard', 0.000298691), ('Bill', 0.000430013), ('Billy', 0.001749806), ('Blake', 0.001218155), ('Bob', 0.000235731), ('Bobby', 0.001666977), ('Brad', 0.000984544), ('Bradley', 0.003845018), ('Brady', 0.000277522), ('Brandon', 0.009518346), ('Brendan', 0.000736758), ('Brent', 0.001889131), ('Brett', 0.002248371), ('Brian', 0.01597677), ('Bruce', 0.001883335), ('Bryan', 0.00456454), ('Bryce', 0.000457406), ('Caleb', 0.001485861), ('Calvin', 0.001168738), ('Cameron', 0.00180755), ('Carl', 0.002011802), ('Carlos', 0.00266638), ('Casey', 0.001440035), ('Cesar', 0.000304898), ('Chad', 0.003858817), ('Charles', 0.010889881), ('Chase', 0.000971942), ('Chris', 0.001389507), ('Christian', 0.003097779), ('Christopher', 0.02783596), ('Clarence', 0.000299289), ('Clayton', 0.000662222), ('Clifford', 0.00053078), ('Clinton', 0.000579307), ('Cody', 0.00353482), ('Cole', 0.000578811), ('Colin', 0.00078508), ('Collin', 0.000406057), ('Colton', 0.000520845), ('Connor', 0.000981073), ('Corey', 0.002476612), ('Cory', 0.001813005), ('Craig', 0.00338161), ('Cristian', 0.000333847), ('Curtis', 0.002140235), ('Dakota', 0.000797614), ('Dale', 0.001171354), ('Dalton', 0.000615113), ('Damon', 0.00034308), ('Dan', 0.000388496), ('Daniel', 0.018881874), ('Danny', 0.001873879), ('Darin', 0.000234962), ('Darius', 0.000336189), ('Darrell', 0.001218582), ('Darren', 0.001253738), ('Darryl', 0.00067019), ('Daryl', 0.000260918), ('Dave', 0.000269673), ('David', 0.031073833), ('Dean', 0.000965375), ('Dennis', 0.003318992), ('Derek', 0.003095299), ('Derrick', 0.001955921), ('Devin', 0.001312474), ('Devon', 0.000485877), ('Dillon', 0.000558361), ('Dominic', 0.000438221), ('Don', 0.000378322), ('Donald', 0.005689572), ('Douglas', 0.004513687), ('Drew', 0.000596868), ('Duane', 0.00061855), ('Dustin', 0.003088938), ('Dwayne', 0.000711382), ('Dylan', 0.002329096), ('Earl', 0.000348347), ('Eddie', 0.0007944), ('Edgar', 0.000379536), ('Eduardo', 0.000465358), ('Edward', 0.005702242), ('Edwin', 0.001117833), ('Elijah', 0.000592183), ('Eric', 0.012024659), ('Erik', 0.001997096), ('Ernest', 0.000746556), ('Ethan', 0.001143978), ('Eugene', 0.000784243), ('Evan', 0.001570691), ('Fernando', 0.000557608), ('Francis', 0.000330837), ('Francisco', 0.001084335), ('Frank', 0.003276449), ('Franklin', 0.000237561), ('Fred', 0.000396618), ('Frederick', 0.001104188), ('Gabriel', 0.001906504), ('Garrett', 0.001124861), ('Gary', 0.005023109), ('Gavin', 0.000295373), ('Gene', 0.00023426), ('Geoffrey', 0.000425978), ('George', 0.004423984), ('Gerald', 0.00165841), ('Gilbert', 0.000246726), ('Glen', 0.000374338), ('Glenn', 0.001111421), ('Gordon', 0.00027075), ('Grant', 0.00068322), ('Greg', 0.000623492), ('Gregg', 0.000235885), ('Gregory', 0.007676443), ('Guy', 0.000262645), ('Harold', 0.000929467), ('Harry', 0.000586934), ('Hayden', 0.000279454), ('Hector', 0.000798691), ('Henry', 0.001856232), ('Herbert', 0.000234226), ('Howard', 0.000712921), ('Hunter', 0.001034679), ('Ian', 0.001863192), ('Isaac', 0.001001951), ('Isaiah', 0.000625441), ('Ivan', 0.000350433), ('Jack', 0.001839748), ('Jackson', 0.000403253), ('Jacob', 0.007845384), ('Jaime', 0.000421378), ('Jake', 0.000565782), ('James', 0.029601617), ('Jamie', 0.00093552), ('Jared', 0.002538802), ('Jason', 0.01520513), ('Javier', 0.000625202), ('Jay', 0.001411462), ('Jeff', 0.001271436), ('Jeffery', 0.002627873), ('Jeffrey', 0.01225709), ('Jeremiah', 0.001209605), ('Jeremy', 0.006336079), ('Jermaine', 0.000450156), ('Jerome', 0.000634299), ('Jerry', 0.003150273), ('Jesse', 0.003884552), ('Jesus', 0.001628965), ('Jim', 0.000567714), ('Jimmy', 0.001607489), ('Joe', 0.001621544), ('Joel', 0.002537742), ('John', 0.028683008), ('Johnathan', 0.000840448), ('Johnny', 0.002117065), ('Jon', 0.001561184), ('Jonathan', 0.009963971), ('Jonathon', 0.000701157), ('Jordan', 0.003451546), ('Jorge', 0.001180553), ('Jose', 0.005368207), ('Joseph', 0.018604763), ('Joshua', 0.014808101), ('Juan', 0.003233598), ('Julian', 0.000693736), ('Justin', 0.010197889), ('Karl', 0.000362437), ('Keith', 0.004622866), ('Kelly', 0.000775283), ('Kenneth', 0.008318145), ('Kent', 0.000329418), ('Kerry', 0.000261448), ('Kevin', 0.014324157), ('Kirk', 0.0003801), ('Kristopher', 0.000580692), ('Kurt', 0.000716375), ('Kyle', 0.006350049), ('Lance', 0.001048495), ('Larry', 0.003658807), ('Lawrence', 0.001670294), ('Lee', 0.001223883), ('Leon', 0.000236347), ('Leonard', 0.000756713), ('Leroy', 0.000260234), ('Leslie', 0.000234637), ('Levi', 0.000347184), ('Logan', 0.001325812), ('Lonnie', 0.000258576), ('Louis', 0.001212255), ('Lucas', 0.001098237), ('Luis', 0.002427777), ('Luke', 0.001221455), ('Malik', 0.000306813), ('Manuel', 0.001331369), ('Marc', 0.001431947), ('Marco', 0.000290586), ('Marcus', 0.002604122), ('Mario', 0.001229337), ('Mark', 0.014382277), ('Martin', 0.002085226), ('Marvin', 0.000732962), ('Mason', 0.000562037), ('Mathew', 0.000605555), ('Matthew', 0.020425018), ('Maurice', 0.000777078), ('Max', 0.000311276), ('Maxwell', 0.000357478), ('Melvin', 0.00061932), ('Michael', 0.045602241), ('Micheal', 0.001273847), ('Miguel', 0.001416267), ('Mike', 0.001221797), ('Mitchell', 0.001747788), ('Nathan', 0.005039405), ('Nathaniel', 0.001887558), ('Neil', 0.000240331), ('Nicholas', 0.010021219), ('Nicolas', 0.000362522), ('Noah', 0.000960947), ('Norman', 0.000389043), ('Omar', 0.000639052), ('Oscar', 0.000946583), ('Parker', 0.000277522), ('Patrick', 0.007153255), ('Paul', 0.009272953), ('Pedro', 0.000275726), ('Perry', 0.000258644), ('Peter', 0.004340385), ('Philip', 0.002262956), ('Phillip', 0.00280273), ('Preston', 0.000292022), ('Ralph', 0.000836891), ('Randall', 0.001614722), ('Randy', 0.003021926), ('Ray', 0.000379451), ('Raymond', 0.003493952), ('Reginald', 0.00095108), ('Ricardo', 0.001197276), ('Richard', 0.014131961), ('Rick', 0.000440016), ('Rickey', 0.00023833), ('Ricky', 0.001856882), ('Riley', 0.000322031), ('Robert', 0.026938092), ('Roberto', 0.000906024), ('Rodney', 0.002180555), ('Roger', 0.002038032), ('Ronald', 0.00576775), ('Ronnie', 0.000905938), ('Ross', 0.00026863), ('Roy', 0.001311346), ('Ruben', 0.000774821), ('Russell', 0.002096221), ('Ryan', 0.01128178), ('Samuel', 0.00498019), ('Scott', 0.010580999), ('Sean', 0.005593456), ('Sergio', 0.000568518), ('Seth', 0.001537416), ('Shane', 0.002530218), ('Shannon', 0.000421583), ('Shaun', 0.000748761), ('Shawn', 0.004474546), ('Spencer', 0.000912094), ('Stanley', 0.000739032), ('Stephen', 0.007675365), ('Steve', 0.001407564), ('Steven', 0.013292898), ('Stuart', 0.000238826), ('Tanner', 0.000639292), ('Taylor', 0.00133036), ('Terrance', 0.000203311), ('Terrence', 0.000203704), ('Terry', 0.002873624), ('Theodore', 0.000596561), ('Thomas', 0.0143364), ('Tim', 0.000711126), ('Timothy', 0.012632608), ('Todd', 0.00414612), ('Tom', 0.000499283), ('Tommy', 0.000778737), ('Tony', 0.002511563), ('Tracy', 0.000728259), ('Travis', 0.004022458), ('Trevor', 0.001692523), ('Tristan', 0.000408759), ('Troy', 0.002695415), ('Tyler', 0.005962323), ('Tyrone', 0.000587207), ('Vernon', 0.000246401), ('Victor', 0.002340621), ('Vincent', 0.002494515), ('Walter', 0.001525891), ('Warren', 0.000317414), ('Wayne', 0.00160966), ('Wesley', 0.001733835), ('William', 0.020025989), ('Willie', 0.001379247), ('Wyatt', 0.000306591), ('Xavier', 0.000415222), ('Zachary', 0.005918634)))
A:faker.providers.person.en_US.__init__.first_names->OrderedDict((('Aaron', 0.006741589), ('Adam', 0.007124922), ('Adrian', 0.001521889), ('Alan', 0.002344657), ('Albert', 0.001316595), ('Alec', 0.000442958), ('Alejandro', 0.000862489), ('Alex', 0.002111833), ('Alexander', 0.005215733), ('Alexis', 0.000277915), ('Alfred', 0.000318919), ('Allen', 0.001679613), ('Alvin', 0.00024794), ('Andre', 0.001400621), ('Andres', 0.000335574), ('Andrew', 0.013475074), ('Angel', 0.000902262), ('Anthony', 0.013783357), ('Antonio', 0.002392535), ('Arthur', 0.001342637), ('Austin', 0.003785615), ('Barry', 0.001102751), ('Benjamin', 0.006535474), ('Bernard', 0.000298691), ('Bill', 0.000430013), ('Billy', 0.001749806), ('Blake', 0.001218155), ('Bob', 0.000235731), ('Bobby', 0.001666977), ('Brad', 0.000984544), ('Bradley', 0.003845018), ('Brady', 0.000277522), ('Brandon', 0.009518346), ('Brendan', 0.000736758), ('Brent', 0.001889131), ('Brett', 0.002248371), ('Brian', 0.01597677), ('Bruce', 0.001883335), ('Bryan', 0.00456454), ('Bryce', 0.000457406), ('Caleb', 0.001485861), ('Calvin', 0.001168738), ('Cameron', 0.00180755), ('Carl', 0.002011802), ('Carlos', 0.00266638), ('Casey', 0.001440035), ('Cesar', 0.000304898), ('Chad', 0.003858817), ('Charles', 0.010889881), ('Chase', 0.000971942), ('Chris', 0.001389507), ('Christian', 0.003097779), ('Christopher', 0.02783596), ('Clarence', 0.000299289), ('Clayton', 0.000662222), ('Clifford', 0.00053078), ('Clinton', 0.000579307), ('Cody', 0.00353482), ('Cole', 0.000578811), ('Colin', 0.00078508), ('Collin', 0.000406057), ('Colton', 0.000520845), ('Connor', 0.000981073), ('Corey', 0.002476612), ('Cory', 0.001813005), ('Craig', 0.00338161), ('Cristian', 0.000333847), ('Curtis', 0.002140235), ('Dakota', 0.000797614), ('Dale', 0.001171354), ('Dalton', 0.000615113), ('Damon', 0.00034308), ('Dan', 0.000388496), ('Daniel', 0.018881874), ('Danny', 0.001873879), ('Darin', 0.000234962), ('Darius', 0.000336189), ('Darrell', 0.001218582), ('Darren', 0.001253738), ('Darryl', 0.00067019), ('Daryl', 0.000260918), ('Dave', 0.000269673), ('David', 0.031073833), ('Dean', 0.000965375), ('Dennis', 0.003318992), ('Derek', 0.003095299), ('Derrick', 0.001955921), ('Devin', 0.001312474), ('Devon', 0.000485877), ('Dillon', 0.000558361), ('Dominic', 0.000438221), ('Don', 0.000378322), ('Donald', 0.005689572), ('Douglas', 0.004513687), ('Drew', 0.000596868), ('Duane', 0.00061855), ('Dustin', 0.003088938), ('Dwayne', 0.000711382), ('Dylan', 0.002329096), ('Earl', 0.000348347), ('Eddie', 0.0007944), ('Edgar', 0.000379536), ('Eduardo', 0.000465358), ('Edward', 0.005702242), ('Edwin', 0.001117833), ('Elijah', 0.000592183), ('Eric', 0.012024659), ('Erik', 0.001997096), ('Ernest', 0.000746556), ('Ethan', 0.001143978), ('Eugene', 0.000784243), ('Evan', 0.001570691), ('Fernando', 0.000557608), ('Francis', 0.000330837), ('Francisco', 0.001084335), ('Frank', 0.003276449), ('Franklin', 0.000237561), ('Fred', 0.000396618), ('Frederick', 0.001104188), ('Gabriel', 0.001906504), ('Garrett', 0.001124861), ('Gary', 0.005023109), ('Gavin', 0.000295373), ('Gene', 0.00023426), ('Geoffrey', 0.000425978), ('George', 0.004423984), ('Gerald', 0.00165841), ('Gilbert', 0.000246726), ('Glen', 0.000374338), ('Glenn', 0.001111421), ('Gordon', 0.00027075), ('Grant', 0.00068322), ('Greg', 0.000623492), ('Gregg', 0.000235885), ('Gregory', 0.007676443), ('Guy', 0.000262645), ('Harold', 0.000929467), ('Harry', 0.000586934), ('Hayden', 0.000279454), ('Hector', 0.000798691), ('Henry', 0.001856232), ('Herbert', 0.000234226), ('Howard', 0.000712921), ('Hunter', 0.001034679), ('Ian', 0.001863192), ('Isaac', 0.001001951), ('Isaiah', 0.000625441), ('Ivan', 0.000350433), ('Jack', 0.001839748), ('Jackson', 0.000403253), ('Jacob', 0.007845384), ('Jaime', 0.000421378), ('Jake', 0.000565782), ('James', 0.029601617), ('Jamie', 0.00093552), ('Jared', 0.002538802), ('Jason', 0.01520513), ('Javier', 0.000625202), ('Jay', 0.001411462), ('Jeff', 0.001271436), ('Jeffery', 0.002627873), ('Jeffrey', 0.01225709), ('Jeremiah', 0.001209605), ('Jeremy', 0.006336079), ('Jermaine', 0.000450156), ('Jerome', 0.000634299), ('Jerry', 0.003150273), ('Jesse', 0.003884552), ('Jesus', 0.001628965), ('Jim', 0.000567714), ('Jimmy', 0.001607489), ('Joe', 0.001621544), ('Joel', 0.002537742), ('John', 0.028683008), ('Johnathan', 0.000840448), ('Johnny', 0.002117065), ('Jon', 0.001561184), ('Jonathan', 0.009963971), ('Jonathon', 0.000701157), ('Jordan', 0.003451546), ('Jorge', 0.001180553), ('Jose', 0.005368207), ('Joseph', 0.018604763), ('Joshua', 0.014808101), ('Juan', 0.003233598), ('Julian', 0.000693736), ('Justin', 0.010197889), ('Karl', 0.000362437), ('Keith', 0.004622866), ('Kelly', 0.000775283), ('Kenneth', 0.008318145), ('Kent', 0.000329418), ('Kerry', 0.000261448), ('Kevin', 0.014324157), ('Kirk', 0.0003801), ('Kristopher', 0.000580692), ('Kurt', 0.000716375), ('Kyle', 0.006350049), ('Lance', 0.001048495), ('Larry', 0.003658807), ('Lawrence', 0.001670294), ('Lee', 0.001223883), ('Leon', 0.000236347), ('Leonard', 0.000756713), ('Leroy', 0.000260234), ('Leslie', 0.000234637), ('Levi', 0.000347184), ('Logan', 0.001325812), ('Lonnie', 0.000258576), ('Louis', 0.001212255), ('Lucas', 0.001098237), ('Luis', 0.002427777), ('Luke', 0.001221455), ('Malik', 0.000306813), ('Manuel', 0.001331369), ('Marc', 0.001431947), ('Marco', 0.000290586), ('Marcus', 0.002604122), ('Mario', 0.001229337), ('Mark', 0.014382277), ('Martin', 0.002085226), ('Marvin', 0.000732962), ('Mason', 0.000562037), ('Mathew', 0.000605555), ('Matthew', 0.020425018), ('Maurice', 0.000777078), ('Max', 0.000311276), ('Maxwell', 0.000357478), ('Melvin', 0.00061932), ('Michael', 0.045602241), ('Micheal', 0.001273847), ('Miguel', 0.001416267), ('Mike', 0.001221797), ('Mitchell', 0.001747788), ('Nathan', 0.005039405), ('Nathaniel', 0.001887558), ('Neil', 0.000240331), ('Nicholas', 0.010021219), ('Nicolas', 0.000362522), ('Noah', 0.000960947), ('Norman', 0.000389043), ('Omar', 0.000639052), ('Oscar', 0.000946583), ('Parker', 0.000277522), ('Patrick', 0.007153255), ('Paul', 0.009272953), ('Pedro', 0.000275726), ('Perry', 0.000258644), ('Peter', 0.004340385), ('Philip', 0.002262956), ('Phillip', 0.00280273), ('Preston', 0.000292022), ('Ralph', 0.000836891), ('Randall', 0.001614722), ('Randy', 0.003021926), ('Ray', 0.000379451), ('Raymond', 0.003493952), ('Reginald', 0.00095108), ('Ricardo', 0.001197276), ('Richard', 0.014131961), ('Rick', 0.000440016), ('Rickey', 0.00023833), ('Ricky', 0.001856882), ('Riley', 0.000322031), ('Robert', 0.026938092), ('Roberto', 0.000906024), ('Rodney', 0.002180555), ('Roger', 0.002038032), ('Ronald', 0.00576775), ('Ronnie', 0.000905938), ('Ross', 0.00026863), ('Roy', 0.001311346), ('Ruben', 0.000774821), ('Russell', 0.002096221), ('Ryan', 0.01128178), ('Samuel', 0.00498019), ('Scott', 0.010580999), ('Sean', 0.005593456), ('Sergio', 0.000568518), ('Seth', 0.001537416), ('Shane', 0.002530218), ('Shannon', 0.000421583), ('Shaun', 0.000748761), ('Shawn', 0.004474546), ('Spencer', 0.000912094), ('Stanley', 0.000739032), ('Stephen', 0.007675365), ('Steve', 0.001407564), ('Steven', 0.013292898), ('Stuart', 0.000238826), ('Tanner', 0.000639292), ('Taylor', 0.00133036), ('Terrance', 0.000203311), ('Terrence', 0.000203704), ('Terry', 0.002873624), ('Theodore', 0.000596561), ('Thomas', 0.0143364), ('Tim', 0.000711126), ('Timothy', 0.012632608), ('Todd', 0.00414612), ('Tom', 0.000499283), ('Tommy', 0.000778737), ('Tony', 0.002511563), ('Tracy', 0.000728259), ('Travis', 0.004022458), ('Trevor', 0.001692523), ('Tristan', 0.000408759), ('Troy', 0.002695415), ('Tyler', 0.005962323), ('Tyrone', 0.000587207), ('Vernon', 0.000246401), ('Victor', 0.002340621), ('Vincent', 0.002494515), ('Walter', 0.001525891), ('Warren', 0.000317414), ('Wayne', 0.00160966), ('Wesley', 0.001733835), ('William', 0.020025989), ('Willie', 0.001379247), ('Wyatt', 0.000306591), ('Xavier', 0.000415222), ('Zachary', 0.005918634))).copy()
A:faker.providers.person.en_US.__init__.first_names_nonbinary->OrderedDict((('Aaron', 0.006741589), ('Adam', 0.007124922), ('Adrian', 0.001521889), ('Alan', 0.002344657), ('Albert', 0.001316595), ('Alec', 0.000442958), ('Alejandro', 0.000862489), ('Alex', 0.002111833), ('Alexander', 0.005215733), ('Alexis', 0.000277915), ('Alfred', 0.000318919), ('Allen', 0.001679613), ('Alvin', 0.00024794), ('Andre', 0.001400621), ('Andres', 0.000335574), ('Andrew', 0.013475074), ('Angel', 0.000902262), ('Anthony', 0.013783357), ('Antonio', 0.002392535), ('Arthur', 0.001342637), ('Austin', 0.003785615), ('Barry', 0.001102751), ('Benjamin', 0.006535474), ('Bernard', 0.000298691), ('Bill', 0.000430013), ('Billy', 0.001749806), ('Blake', 0.001218155), ('Bob', 0.000235731), ('Bobby', 0.001666977), ('Brad', 0.000984544), ('Bradley', 0.003845018), ('Brady', 0.000277522), ('Brandon', 0.009518346), ('Brendan', 0.000736758), ('Brent', 0.001889131), ('Brett', 0.002248371), ('Brian', 0.01597677), ('Bruce', 0.001883335), ('Bryan', 0.00456454), ('Bryce', 0.000457406), ('Caleb', 0.001485861), ('Calvin', 0.001168738), ('Cameron', 0.00180755), ('Carl', 0.002011802), ('Carlos', 0.00266638), ('Casey', 0.001440035), ('Cesar', 0.000304898), ('Chad', 0.003858817), ('Charles', 0.010889881), ('Chase', 0.000971942), ('Chris', 0.001389507), ('Christian', 0.003097779), ('Christopher', 0.02783596), ('Clarence', 0.000299289), ('Clayton', 0.000662222), ('Clifford', 0.00053078), ('Clinton', 0.000579307), ('Cody', 0.00353482), ('Cole', 0.000578811), ('Colin', 0.00078508), ('Collin', 0.000406057), ('Colton', 0.000520845), ('Connor', 0.000981073), ('Corey', 0.002476612), ('Cory', 0.001813005), ('Craig', 0.00338161), ('Cristian', 0.000333847), ('Curtis', 0.002140235), ('Dakota', 0.000797614), ('Dale', 0.001171354), ('Dalton', 0.000615113), ('Damon', 0.00034308), ('Dan', 0.000388496), ('Daniel', 0.018881874), ('Danny', 0.001873879), ('Darin', 0.000234962), ('Darius', 0.000336189), ('Darrell', 0.001218582), ('Darren', 0.001253738), ('Darryl', 0.00067019), ('Daryl', 0.000260918), ('Dave', 0.000269673), ('David', 0.031073833), ('Dean', 0.000965375), ('Dennis', 0.003318992), ('Derek', 0.003095299), ('Derrick', 0.001955921), ('Devin', 0.001312474), ('Devon', 0.000485877), ('Dillon', 0.000558361), ('Dominic', 0.000438221), ('Don', 0.000378322), ('Donald', 0.005689572), ('Douglas', 0.004513687), ('Drew', 0.000596868), ('Duane', 0.00061855), ('Dustin', 0.003088938), ('Dwayne', 0.000711382), ('Dylan', 0.002329096), ('Earl', 0.000348347), ('Eddie', 0.0007944), ('Edgar', 0.000379536), ('Eduardo', 0.000465358), ('Edward', 0.005702242), ('Edwin', 0.001117833), ('Elijah', 0.000592183), ('Eric', 0.012024659), ('Erik', 0.001997096), ('Ernest', 0.000746556), ('Ethan', 0.001143978), ('Eugene', 0.000784243), ('Evan', 0.001570691), ('Fernando', 0.000557608), ('Francis', 0.000330837), ('Francisco', 0.001084335), ('Frank', 0.003276449), ('Franklin', 0.000237561), ('Fred', 0.000396618), ('Frederick', 0.001104188), ('Gabriel', 0.001906504), ('Garrett', 0.001124861), ('Gary', 0.005023109), ('Gavin', 0.000295373), ('Gene', 0.00023426), ('Geoffrey', 0.000425978), ('George', 0.004423984), ('Gerald', 0.00165841), ('Gilbert', 0.000246726), ('Glen', 0.000374338), ('Glenn', 0.001111421), ('Gordon', 0.00027075), ('Grant', 0.00068322), ('Greg', 0.000623492), ('Gregg', 0.000235885), ('Gregory', 0.007676443), ('Guy', 0.000262645), ('Harold', 0.000929467), ('Harry', 0.000586934), ('Hayden', 0.000279454), ('Hector', 0.000798691), ('Henry', 0.001856232), ('Herbert', 0.000234226), ('Howard', 0.000712921), ('Hunter', 0.001034679), ('Ian', 0.001863192), ('Isaac', 0.001001951), ('Isaiah', 0.000625441), ('Ivan', 0.000350433), ('Jack', 0.001839748), ('Jackson', 0.000403253), ('Jacob', 0.007845384), ('Jaime', 0.000421378), ('Jake', 0.000565782), ('James', 0.029601617), ('Jamie', 0.00093552), ('Jared', 0.002538802), ('Jason', 0.01520513), ('Javier', 0.000625202), ('Jay', 0.001411462), ('Jeff', 0.001271436), ('Jeffery', 0.002627873), ('Jeffrey', 0.01225709), ('Jeremiah', 0.001209605), ('Jeremy', 0.006336079), ('Jermaine', 0.000450156), ('Jerome', 0.000634299), ('Jerry', 0.003150273), ('Jesse', 0.003884552), ('Jesus', 0.001628965), ('Jim', 0.000567714), ('Jimmy', 0.001607489), ('Joe', 0.001621544), ('Joel', 0.002537742), ('John', 0.028683008), ('Johnathan', 0.000840448), ('Johnny', 0.002117065), ('Jon', 0.001561184), ('Jonathan', 0.009963971), ('Jonathon', 0.000701157), ('Jordan', 0.003451546), ('Jorge', 0.001180553), ('Jose', 0.005368207), ('Joseph', 0.018604763), ('Joshua', 0.014808101), ('Juan', 0.003233598), ('Julian', 0.000693736), ('Justin', 0.010197889), ('Karl', 0.000362437), ('Keith', 0.004622866), ('Kelly', 0.000775283), ('Kenneth', 0.008318145), ('Kent', 0.000329418), ('Kerry', 0.000261448), ('Kevin', 0.014324157), ('Kirk', 0.0003801), ('Kristopher', 0.000580692), ('Kurt', 0.000716375), ('Kyle', 0.006350049), ('Lance', 0.001048495), ('Larry', 0.003658807), ('Lawrence', 0.001670294), ('Lee', 0.001223883), ('Leon', 0.000236347), ('Leonard', 0.000756713), ('Leroy', 0.000260234), ('Leslie', 0.000234637), ('Levi', 0.000347184), ('Logan', 0.001325812), ('Lonnie', 0.000258576), ('Louis', 0.001212255), ('Lucas', 0.001098237), ('Luis', 0.002427777), ('Luke', 0.001221455), ('Malik', 0.000306813), ('Manuel', 0.001331369), ('Marc', 0.001431947), ('Marco', 0.000290586), ('Marcus', 0.002604122), ('Mario', 0.001229337), ('Mark', 0.014382277), ('Martin', 0.002085226), ('Marvin', 0.000732962), ('Mason', 0.000562037), ('Mathew', 0.000605555), ('Matthew', 0.020425018), ('Maurice', 0.000777078), ('Max', 0.000311276), ('Maxwell', 0.000357478), ('Melvin', 0.00061932), ('Michael', 0.045602241), ('Micheal', 0.001273847), ('Miguel', 0.001416267), ('Mike', 0.001221797), ('Mitchell', 0.001747788), ('Nathan', 0.005039405), ('Nathaniel', 0.001887558), ('Neil', 0.000240331), ('Nicholas', 0.010021219), ('Nicolas', 0.000362522), ('Noah', 0.000960947), ('Norman', 0.000389043), ('Omar', 0.000639052), ('Oscar', 0.000946583), ('Parker', 0.000277522), ('Patrick', 0.007153255), ('Paul', 0.009272953), ('Pedro', 0.000275726), ('Perry', 0.000258644), ('Peter', 0.004340385), ('Philip', 0.002262956), ('Phillip', 0.00280273), ('Preston', 0.000292022), ('Ralph', 0.000836891), ('Randall', 0.001614722), ('Randy', 0.003021926), ('Ray', 0.000379451), ('Raymond', 0.003493952), ('Reginald', 0.00095108), ('Ricardo', 0.001197276), ('Richard', 0.014131961), ('Rick', 0.000440016), ('Rickey', 0.00023833), ('Ricky', 0.001856882), ('Riley', 0.000322031), ('Robert', 0.026938092), ('Roberto', 0.000906024), ('Rodney', 0.002180555), ('Roger', 0.002038032), ('Ronald', 0.00576775), ('Ronnie', 0.000905938), ('Ross', 0.00026863), ('Roy', 0.001311346), ('Ruben', 0.000774821), ('Russell', 0.002096221), ('Ryan', 0.01128178), ('Samuel', 0.00498019), ('Scott', 0.010580999), ('Sean', 0.005593456), ('Sergio', 0.000568518), ('Seth', 0.001537416), ('Shane', 0.002530218), ('Shannon', 0.000421583), ('Shaun', 0.000748761), ('Shawn', 0.004474546), ('Spencer', 0.000912094), ('Stanley', 0.000739032), ('Stephen', 0.007675365), ('Steve', 0.001407564), ('Steven', 0.013292898), ('Stuart', 0.000238826), ('Tanner', 0.000639292), ('Taylor', 0.00133036), ('Terrance', 0.000203311), ('Terrence', 0.000203704), ('Terry', 0.002873624), ('Theodore', 0.000596561), ('Thomas', 0.0143364), ('Tim', 0.000711126), ('Timothy', 0.012632608), ('Todd', 0.00414612), ('Tom', 0.000499283), ('Tommy', 0.000778737), ('Tony', 0.002511563), ('Tracy', 0.000728259), ('Travis', 0.004022458), ('Trevor', 0.001692523), ('Tristan', 0.000408759), ('Troy', 0.002695415), ('Tyler', 0.005962323), ('Tyrone', 0.000587207), ('Vernon', 0.000246401), ('Victor', 0.002340621), ('Vincent', 0.002494515), ('Walter', 0.001525891), ('Warren', 0.000317414), ('Wayne', 0.00160966), ('Wesley', 0.001733835), ('William', 0.020025989), ('Willie', 0.001379247), ('Wyatt', 0.000306591), ('Xavier', 0.000415222), ('Zachary', 0.005918634))).copy()
A:faker.providers.person.en_US.__init__.last_names->OrderedDict((('Smith', 0.021712045), ('Johnson', 0.01696938), ('Williams', 0.014016962), ('Brown', 0.012610763), ('Jones', 0.012451866), ('Miller', 0.010305045), ('Davis', 0.009798219), ('Garcia', 0.007842422), ('Rodriguez', 0.007348561), ('Wilson', 0.007154951), ('Martinez', 0.007082045), ('Anderson', 0.006966203), ('Taylor', 0.006582218), ('Thomas', 0.006493824), ('Hernandez', 0.006454314), ('Moore', 0.006383948), ('Martin', 0.006146745), ('Jackson', 0.006086567), ('Thompson', 0.005887767), ('White', 0.005843424), ('Lopez', 0.005679145), ('Lee', 0.005535909), ('Gonzalez', 0.005461513), ('Harris', 0.005423356), ('Clark', 0.005010598), ('Lewis', 0.00465937), ('Robinson', 0.004596305), ('Walker', 0.004580579), ('Perez', 0.00446375), ('Hall', 0.004327121), ('Young', 0.004257495), ('Allen', 0.00423392), ('Sanchez', 0.004031749), ('Wright', 0.004023754), ('King', 0.004011135), ('Scott', 0.003838487), ('Green', 0.003778053), ('Baker', 0.003776901), ('Adams', 0.00377448), ('Nelson', 0.003766713), ('Hill', 0.003762455), ('Ramirez', 0.003554281), ('Campbell', 0.003398636), ('Mitchell', 0.003357336), ('Roberts', 0.003346207), ('Carter', 0.0033127), ('Phillips', 0.003214932), ('Evans', 0.003127113), ('Turner', 0.003067045), ('Torres', 0.002971158), ('Parker', 0.002962725), ('Collins', 0.002904264), ('Edwards', 0.002897155), ('Stewart', 0.002859044), ('Flores', 0.002856449), ('Morris', 0.002848582), ('Nguyen', 0.002833697), ('Murphy', 0.00274576), ('Rivera', 0.002736275), ('Cook', 0.002693623), ('Rogers', 0.002690041), ('Morgan', 0.002525543), ('Peterson', 0.002513125), ('Cooper', 0.00246795), ('Reed', 0.0024437), ('Bailey', 0.002429747), ('Bell', 0.002419112), ('Gomez', 0.002408494), ('Kelly', 0.002379209), ('Howard', 0.002327986), ('Ward', 0.002321973), ('Cox', 0.002318775), ('Diaz', 0.00230051), ('Richardson', 0.002280051), ('Wood', 0.002259639), ('Watson', 0.002215168), ('Brooks', 0.002199808), ('Bennett', 0.002184311), ('Gray', 0.002162912), ('James', 0.002131032), ('Reyes', 0.002124517), ('Cruz', 0.002111304), ('Hughes', 0.002095999), ('Price', 0.002090206), ('Myers', 0.002054278), ('Long', 0.002042126), ('Foster', 0.002019703), ('Sanders', 0.002018442), ('Ross', 0.002009844), ('Morales', 0.001988655), ('Powell', 0.001978704), ('Sullivan', 0.001970362), ('Russell', 0.001968461), ('Ortiz', 0.001961617), ('Jenkins', 0.001952974), ('Gutierrez', 0.001945371), ('Perry', 0.001942986), ('Butler', 0.001926859), ('Barnes', 0.00192272), ('Fisher', 0.001921377), ('Henderson', 0.001919686), ('Coleman', 0.001906255), ('Simmons', 0.001842531), ('Patterson', 0.00181427), ('Jordan', 0.00180198), ('Reynolds', 0.001787233), ('Hamilton', 0.001775656), ('Graham', 0.001773307), ('Kim', 0.001773243), ('Gonzales', 0.001772028), ('Alexander', 0.001767542), ('Ramos', 0.001764371), ('Wallace', 0.001743026), ('Griffin', 0.001741893), ('West', 0.001722047), ('Cole', 0.001715916), ('Hayes', 0.001712992), ('Chavez', 0.001698299), ('Gibson', 0.001685096), ('Bryant', 0.001679075), ('Ellis', 0.001662381), ('Stevens', 0.001657657), ('Murray', 0.001630218), ('Ford', 0.001630062), ('Marshall', 0.001619244), ('Owens', 0.001611212), ('Mcdonald', 0.001609019), ('Harrison', 0.001604295), ('Ruiz', 0.001602943), ('Kennedy', 0.001568285), ('Wells', 0.001559139), ('Alvarez', 0.001542527), ('Woods', 0.0015425), ('Mendoza', 0.001540243), ('Castillo', 0.001511972), ('Olson', 0.001493963), ('Webb', 0.001493771), ('Washington', 0.001489705), ('Tucker', 0.001488763), ('Freeman', 0.001486507), ('Burns', 0.001481636), ('Henry', 0.001474683), ('Vasquez', 0.001461863), ('Snyder', 0.001456143), ('Simpson', 0.001445891), ('Crawford', 0.001444795), ('Jimenez', 0.001438892), ('Porter', 0.001433163), ('Mason', 0.0014207), ('Shaw', 0.001417849), ('Gordon', 0.001415674), ('Wagner', 0.001411855), ('Hunter', 0.001410886), ('Romero', 0.001405057), ('Hicks', 0.00140365), ('Dixon', 0.001389003), ('Hunt', 0.001388738), ('Palmer', 0.00137431), ('Robertson', 0.001373323), ('Black', 0.001372291), ('Holmes', 0.001372108), ('Stone', 0.001368782), ('Meyer', 0.001367521), ('Boyd', 0.001365803), ('Mills', 0.001351485), ('Warren', 0.001351458), ('Fox', 0.001346441), ('Rose', 0.001342485), ('Rice', 0.001338062), ('Moreno', 0.001334846), ('Schmidt', 0.001330067), ('Patel', 0.001325508), ('Ferguson', 0.001299832), ('Nichols', 0.001296908), ('Herrera', 0.0012864), ('Medina', 0.001273307), ('Ryan', 0.001273142), ('Fernandez', 0.001272841), ('Weaver', 0.001268354), ('Daniels', 0.001268034), ('Stephens', 0.001267724), ('Gardner', 0.001266974), ('Payne', 0.0012612), ('Kelley', 0.001256878), ('Dunn', 0.001251395), ('Pierce', 0.001247393), ('Arnold', 0.001245547), ('Tran', 0.001243537), ('Spencer', 0.001228443), ('Peters', 0.001226505), ('Hawkins', 0.001224998), ('Grant', 0.001224705), ('Hansen', 0.001219589), ('Castro', 0.001217578), ('Hoffman', 0.001212014), ('Hart', 0.001210378), ('Elliott', 0.001210296), ('Cunningham', 0.00120517), ('Knight', 0.001204841), ('Bradley', 0.001199624), ('Carroll', 0.001197166), ('Hudson', 0.001195091), ('Duncan', 0.001191674), ('Armstrong', 0.001187681), ('Berry', 0.001182409), ('Andrews', 0.001181632), ('Johnston', 0.001178114), ('Ray', 0.001176826), ('Lane', 0.001176214), ('Riley', 0.001169206), ('Carpenter', 0.001161101), ('Perkins', 0.001159986), ('Aguilar', 0.001154942), ('Silva', 0.001152795), ('Richards', 0.001148126), ('Willis', 0.001147888), ('Matthews', 0.001140688), ('Chapman', 0.001138632), ('Lawrence', 0.001135955), ('Garza', 0.00113421), ('Vargas', 0.001132583), ('Watkins', 0.001118832), ('Wheeler', 0.00111186), ('Larson', 0.001106195), ('Carlson', 0.001097606), ('Harper', 0.001095267), ('George', 0.001094444), ('Greene', 0.001092855), ('Burke', 0.001088935), ('Guzman', 0.001081762), ('Morrison', 0.001077641), ('Munoz', 0.001076133), ('Jacobs', 0.001055721), ('Obrien', 0.001054304), ('Lawson', 0.001052486), ('Franklin', 0.001049498), ('Lynch', 0.001045743), ('Bishop', 0.00104196), ('Carr', 0.001040662), ('Salazar', 0.001036788), ('Austin', 0.001033974), ('Mendez', 0.0010301), ('Gilbert', 0.001027084), ('Jensen', 0.001026408), ('Williamson', 0.001025348), ('Montgomery', 0.00102469), ('Harvey', 0.001024617), ('Oliver', 0.001020094), ('Howell', 0.001001756), ('Dean', 0.000998064), ('Hanson', 0.000996685), ('Weber', 0.000985601), ('Garrett', 0.000984788), ('Sims', 0.000979918), ('Burton', 0.000979132), ('Fuller', 0.000974783), ('Soto', 0.000974317), ('Mccoy', 0.000972946), ('Welch', 0.00096676), ('Chen', 0.000964384), ('Schultz', 0.000959067), ('Walters', 0.000952844), ('Reid', 0.00095034), ('Fields', 0.00094335), ('Walsh', 0.000943113), ('Little', 0.000938563), ('Fowler', 0.000937667), ('Bowman', 0.000934186), ('Davidson', 0.000932404), ('May', 0.000929498), ('Day', 0.000929041), ('Schneider', 0.00091878), ('Newman', 0.000918214), ('Brewer', 0.000917976), ('Lucas', 0.000917538), ('Holland', 0.000912677), ('Wong', 0.000908172), ('Banks', 0.000907276), ('Santos', 0.000904526), ('Curtis', 0.000904206), ('Pearson', 0.000902105), ('Delgado', 0.000901621), ('Valdez', 0.000901027), ('Pena', 0.000898605), ('Rios', 0.000882377), ('Douglas', 0.000881062), ('Sandoval', 0.000879947), ('Barrett', 0.000876228), ('Hopkins', 0.000864414), ('Keller', 0.000861645), ('Guerrero', 0.000860293), ('Stanley', 0.000857232), ('Bates', 0.000856555), ('Alvarado', 0.000856373), ('Beck', 0.000851238), ('Ortega', 0.000850963), ('Wade', 0.00084825), ('Estrada', 0.000848222), ('Contreras', 0.00084666), ('Barnett', 0.000843252), ('Caldwell', 0.00083458), ('Santiago', 0.00083119), ('Lambert', 0.000828001), ('Powers', 0.000826019), ('Chambers', 0.000825324), ('Nunez', 0.000824255), ('Craig', 0.000818618), ('Leonard', 0.000815027), ('Lowe', 0.000814844), ('Rhodes', 0.000812459), ('Byrd', 0.00081149), ('Gregory', 0.000811481), ('Shelton', 0.000807059), ('Frazier', 0.00080705), ('Becker', 0.000805122), ('Maldonado', 0.000804226), ('Fleming', 0.000803614), ('Vega', 0.000801595), ('Sutton', 0.000798351), ('Cohen', 0.000797008), ('Jennings', 0.00079529), ('Parks', 0.000788967), ('Mcdaniel', 0.000788702), ('Watts', 0.000787889), ('Barker', 0.000778688), ('Norris', 0.000778605), ('Vaughn', 0.000777006), ('Vazquez', 0.000775992), ('Holt', 0.000774018), ('Schwartz', 0.000773918), ('Steele', 0.000770756), ('Benson', 0.00076966), ('Neal', 0.000766151), ('Dominguez', 0.000765073), ('Horton', 0.000763173), ('Terry', 0.000762387), ('Wolfe', 0.000759417), ('Hale', 0.000757983), ('Lyons', 0.000751614), ('Graves', 0.000750892), ('Haynes', 0.000749595), ('Miles', 0.000748644), ('Park', 0.000748251), ('Warner', 0.000747648), ('Padilla', 0.000747475), ('Bush', 0.000744907), ('Thornton', 0.000741864), ('Mccarthy', 0.000740439), ('Mann', 0.00074032), ('Zimmerman', 0.000739608), ('Erickson', 0.000739534), ('Fletcher', 0.000739498), ('Mckinney', 0.00073661), ('Page', 0.000735487), ('Dawson', 0.000732718), ('Joseph', 0.000731256), ('Marquez', 0.000730534), ('Reeves', 0.00072931), ('Klein', 0.000728104), ('Espinoza', 0.000724787), ('Baldwin', 0.000723224), ('Moran', 0.000717696), ('Love', 0.000715659), ('Robbins', 0.000713996), ('Higgins', 0.000713685), ('Ball', 0.000708696), ('Cortez', 0.000708066), ('Le', 0.000707709), ('Griffith', 0.00070749), ('Bowen', 0.000704283), ('Sharp', 0.000702364), ('Cummings', 0.000700893), ('Ramsey', 0.000700144), ('Hardy', 0.000699988), ('Swanson', 0.000699358), ('Barber', 0.000699038), ('Acosta', 0.000698791), ('Luna', 0.000695593), ('Chandler', 0.000695474), ('Daniel', 0.000686529), ('Blair', 0.000686529), ('Cross', 0.00068652), ('Simon', 0.000683824), ('Dennis', 0.000683322), ('Oconnor', 0.000683066), ('Quinn', 0.00068101), ('Gross', 0.000678762), ('Navarro', 0.000675884), ('Moss', 0.000673874), ('Fitzgerald', 0.000671791), ('Doyle', 0.000671754), ('Mclaughlin', 0.000668191), ('Rojas', 0.00066767), ('Rodgers', 0.000667213), ('Stevenson', 0.000666034), ('Singh', 0.00066375), ('Yang', 0.000663613), ('Figueroa', 0.000662754), ('Harmon', 0.000661667), ('Newton', 0.000660881), ('Paul', 0.00066015), ('Manning', 0.000658514), ('Garner', 0.000658359), ('Mcgee', 0.000657198), ('Reese', 0.000655636), ('Francis', 0.000655353), ('Burgess', 0.000654265), ('Adkins', 0.000653571), ('Goodman', 0.000653151), ('Curry', 0.00065189), ('Brady', 0.000650345), ('Christensen', 0.000650062), ('Potter', 0.000649688), ('Walton', 0.000648719), ('Goodwin', 0.000642652), ('Mullins', 0.000642222), ('Molina', 0.000641537), ('Webster', 0.000640733), ('Fischer', 0.000640477), ('Campos', 0.000639152), ('Avila', 0.000638175), ('Sherman', 0.000638147), ('Todd', 0.000637873), ('Chang', 0.00063738), ('Blake', 0.000633021), ('Malone', 0.00063282), ('Wolf', 0.000629604), ('Hodges', 0.000629266), ('Juarez', 0.000628507), ('Gill', 0.000627722), ('Farmer', 0.000624158), ('Hines', 0.00062266), ('Gallagher', 0.00062202), ('Duran', 0.000621755), ('Hubbard', 0.000621527), ('Cannon', 0.000620631), ('Miranda', 0.0006181), ('Wang', 0.000617406), ('Saunders', 0.000614116), ('Tate', 0.000614098), ('Mack', 0.000613604), ('Hammond', 0.000612773), ('Carrillo', 0.000612691), ('Townsend', 0.000610854), ('Wise', 0.000609803), ('Ingram', 0.000609136), ('Barton', 0.000608743), ('Mejia', 0.000607939), ('Ayala', 0.000607766), ('Schroeder', 0.000606825), ('Hampton', 0.000606514), ('Rowe', 0.000604933), ('Parsons', 0.000604915), ('Frank', 0.000602311), ('Waters', 0.000601388), ('Strickland', 0.000601361), ('Osborne', 0.000601251), ('Maxwell', 0.000601041), ('Chan', 0.000600493), ('Deleon', 0.000599387), ('Norman', 0.000596381), ('Harrington', 0.00059512), ('Casey', 0.000592232), ('Patton', 0.00059184), ('Logan', 0.000590049), ('Bowers', 0.000589318), ('Mueller', 0.000587572), ('Glover', 0.00058643), ('Floyd', 0.000586074), ('Hartman', 0.000583205), ('Buchanan', 0.000583187), ('Cobb', 0.000582401), ('French', 0.00057701), ('Kramer', 0.000575858), ('Mccormick', 0.000572569), ('Clarke', 0.0005715), ('Tyler', 0.00057139), ('Gibbs', 0.000571208), ('Moody', 0.000569654), ('Conner', 0.000569572), ('Sparks', 0.000568649), ('Mcguire', 0.000567571), ('Leon', 0.000566822), ('Bauer', 0.000566319), ('Norton', 0.000564729), ('Pope', 0.000564227), ('Flynn', 0.000564199), ('Hogan', 0.000563322), ('Robles', 0.00056303), ('Salinas', 0.000562692), ('Yates', 0.000561029), ('Lindsey', 0.000559192), ('Lloyd', 0.000558781), ('Marsh', 0.000557365), ('Mcbride', 0.000556222), ('Owen', 0.000552449), ('Solis', 0.000548648), ('Pham', 0.00054777), ('Lang', 0.000546802), ('Pratt', 0.000546418), ('Lara', 0.000545779), ('Brock', 0.000545331), ('Ballard', 0.00054513), ('Trujillo', 0.000544664), ('Shaffer', 0.000541173), ('Drake', 0.000539602), ('Roman', 0.000539282), ('Aguirre', 0.00053835), ('Morton', 0.000537162), ('Stokes', 0.000536239), ('Lamb', 0.000535033), ('Pacheco', 0.000534841), ('Patrick', 0.00053231), ('Cochran', 0.000532091), ('Shepherd', 0.000529368), ('Cain', 0.000528801), ('Burnett', 0.000528674), ('Hess', 0.000528335), ('Li', 0.000528007), ('Cervantes', 0.000527084), ('Olsen', 0.000524087), ('Briggs', 0.000523538), ('Ochoa', 0.000522743), ('Cabrera', 0.000522387), ('Velasquez', 0.000522314), ('Montoya', 0.00052151), ('Roth', 0.000521099), ('Meyers', 0.000518485), ('Cardenas', 0.000517334), ('Fuentes', 0.000515717), ('Weiss', 0.000513085), ('Wilkins', 0.000512309), ('Hoover', 0.000512309), ('Nicholson', 0.000511559), ('Underwood', 0.000511441), ('Short', 0.000510801), ('Carson', 0.000510052), ('Morrow', 0.000508617), ('Colon', 0.000507228), ('Holloway', 0.000506808), ('Summers', 0.000506123), ('Bryan', 0.000505008), ('Petersen', 0.00050424), ('Mckenzie', 0.000503318), ('Serrano', 0.000503071), ('Wilcox', 0.000502431), ('Carey', 0.000501856), ('Clayton', 0.000501408), ('Poole', 0.000499864), ('Calderon', 0.000499727), ('Gallegos', 0.000499553), ('Greer', 0.000498996), ('Rivas', 0.000498786), ('Guerra', 0.000498667), ('Decker', 0.000497525), ('Collier', 0.000497196), ('Wall', 0.000497077), ('Whitaker', 0.000496547), ('Bass', 0.000496117), ('Flowers', 0.000495944), ('Davenport', 0.000495295), ('Conley', 0.000495185), ('Houston', 0.00049365), ('Huff', 0.000492426), ('Copeland', 0.00049132), ('Hood', 0.00049101), ('Monroe', 0.000488616), ('Massey', 0.00048847), ('Roberson', 0.000486085), ('Combs', 0.00048592), ('Franco', 0.000485747), ('Larsen', 0.000483937), ('Pittman', 0.000481434), ('Randall', 0.000479661), ('Skinner', 0.000479616), ('Wilkinson', 0.000479552), ('Kirby', 0.00047946), ('Cameron', 0.00047915), ('Bridges', 0.000477514), ('Anthony', 0.000476472), ('Richard', 0.000476399), ('Kirk', 0.00047565), ('Bruce', 0.000475175), ('Singleton', 0.000473283), ('Mathis', 0.000473274), ('Bradford', 0.000472635), ('Boone', 0.000472205), ('Abbott', 0.000471666), ('Charles', 0.000470734), ('Allison', 0.000470606), ('Sweeney', 0.00047057), ('Atkinson', 0.000470469), ('Horn', 0.000469473), ('Jefferson', 0.0004693), ('Rosales', 0.000469071), ('York', 0.000469053), ('Christian', 0.000467618), ('Phelps', 0.000467408), ('Farrell', 0.000466869), ('Castaneda', 0.000466814), ('Nash', 0.000466193), ('Dickerson', 0.000466156), ('Bond', 0.000465818), ('Wyatt', 0.00046485), ('Foley', 0.000464649), ('Chase', 0.000463963), ('Gates', 0.000463698), ('Vincent', 0.000462602), ('Mathews', 0.000462419), ('Hodge', 0.000462136), ('Garrison', 0.000461268), ('Trevino', 0.000461012), ('Villarreal', 0.000460071), ('Heath', 0.000459669), ('Dalton', 0.00045838), ('Valencia', 0.000457101), ('Callahan', 0.000456178), ('Hensley', 0.000455566), ('Atkins', 0.000454616), ('Huffman', 0.000454461), ('Roy', 0.000454351), ('Boyer', 0.000453218), ('Shields', 0.000452807), ('Lin', 0.000451016), ('Hancock', 0.000450742), ('Grimes', 0.000449965), ('Glenn', 0.000449929), ('Cline', 0.000449252), ('Delacruz', 0.00044917), ('Camacho', 0.000447726), ('Dillon', 0.0004462), ('Parrish', 0.000446109), ('Oneill', 0.000444583), ('Melton', 0.000444017), ('Booth', 0.000443889), ('Kane', 0.000443404), ('Berg', 0.000442975), ('Harrell', 0.000442893), ('Pitts', 0.000442811), ('Savage', 0.000441943), ('Wiggins', 0.000441833), ('Brennan', 0.000441294), ('Salas', 0.000441166), ('Marks', 0.000441157), ('Russo', 0.00043974), ('Sawyer', 0.000438397), ('Baxter', 0.000437283), ('Golden', 0.000437118), ('Hutchinson', 0.000436844), ('Liu', 0.000435528), ('Walter', 0.000435071), ('Mcdowell', 0.000434258), ('Wiley', 0.000434048), ('Rich', 0.00043381), ('Humphrey', 0.000433746), ('Johns', 0.000432093), ('Koch', 0.000432065), ('Suarez', 0.000431599), ('Hobbs', 0.000431462), ('Beard', 0.000430621), ('Gilmore', 0.000429909), ('Ibarra', 0.000428492), ('Keith', 0.00042714), ('Macias', 0.000427067), ('Khan', 0.000426829), ('Andrade', 0.000426729), ('Ware', 0.000426546), ('Stephenson', 0.000426363), ('Henson', 0.000425879), ('Wilkerson', 0.000425843), ('Dyer', 0.000425559), ('Mcclure', 0.000424929), ('Blackwell', 0.000424838), ('Mercado', 0.000424308), ('Tanner', 0.000424079), ('Eaton', 0.000423997), ('Clay', 0.000422727), ('Barron', 0.000422106), ('Beasley', 0.00042195), ('Oneal', 0.000421786), ('Small', 0.000418944), ('Preston', 0.000418944), ('Wu', 0.000418624), ('Zamora', 0.000418542), ('Macdonald', 0.000418323), ('Vance', 0.000418149), ('Snow', 0.000417473), ('Mcclain', 0.000416294), ('Stafford', 0.000414366), ('Orozco', 0.000413818), ('Barry', 0.000411579), ('English', 0.00041147), ('Shannon', 0.000410282), ('Kline', 0.000410264), ('Jacobson', 0.000410026), ('Woodard', 0.000409624), ('Huang', 0.000408573), ('Kemp', 0.000408445), ('Mosley', 0.000408418), ('Prince', 0.000407888), ('Merritt', 0.00040776), ('Hurst', 0.000407404), ('Villanueva', 0.000407248), ('Roach', 0.000406188), ('Nolan', 0.000405887), ('Lam', 0.000405558), ('Yoder', 0.000404279), ('Mccullough', 0.000403164), ('Lester', 0.0004013), ('Santana', 0.000400898), ('Valenzuela', 0.000399938), ('Winters', 0.000399865), ('Barrera', 0.000399482), ('Orr', 0.000398988), ('Leach', 0.000398988), ('Berger', 0.000397983), ('Mckee', 0.000397974), ('Strong', 0.000396832), ('Conway', 0.000396512), ('Stein', 0.000395927), ('Whitehead', 0.000395735), ('Bullock', 0.000393095), ('Escobar', 0.000392492), ('Knox', 0.000392327), ('Meadows', 0.000391843), ('Solomon', 0.000391432), ('Velez', 0.000391258), ('Odonnell', 0.000391094), ('Kerr', 0.000390692), ('Stout', 0.000389878), ('Blankenship', 0.000389824), ('Browning', 0.000389632), ('Kent', 0.00038922), ('Lozano', 0.000388946), ('Bartlett', 0.000388444), ('Pruitt', 0.000387996), ('Buck', 0.000387795), ('Barr', 0.000387713), ('Gaines', 0.000387137), ('Durham', 0.000387101), ('Gentry', 0.000387028), ('Mcintyre', 0.000386826), ('Sloan', 0.000386333), ('Rocha', 0.000385036), ('Melendez', 0.000385036), ('Herman', 0.000384597), ('Sexton', 0.000384496), ('Moon', 0.000384332), ('Hendricks', 0.00038266), ('Rangel', 0.000382559), ('Stark', 0.000382514), ('Lowery', 0.00038075), ('Hardin', 0.000380695), ('Hull', 0.000380622), ('Sellers', 0.000379754), ('Ellison', 0.000378822), ('Calhoun', 0.000378758), ('Gillespie', 0.000378219), ('Mora', 0.000377808), ('Knapp', 0.000377068), ('Mccall', 0.000376739), ('Morse', 0.000375652), ('Dorsey', 0.000375579), ('Weeks', 0.000375113), ('Nielsen', 0.000374692), ('Livingston', 0.000374299), ('Leblanc', 0.000373925), ('Mclean', 0.00037345), ('Bradshaw', 0.000372746), ('Glass', 0.000372106), ('Middleton', 0.00037196), ('Buckley', 0.000371942), ('Schaefer', 0.000371549), ('Frost', 0.000370809), ('Howe', 0.000370562), ('House', 0.000369849), ('Mcintosh', 0.00036963), ('Ho', 0.000369265), ('Pennington', 0.000368588), ('Reilly', 0.000368324), ('Hebert', 0.000368077), ('Mcfarland', 0.00036772), ('Hickman', 0.000367538), ('Noble', 0.000367474), ('Spears', 0.000367346), ('Conrad', 0.000366423), ('Arias', 0.000366277), ('Galvan', 0.000365911), ('Velazquez', 0.000365765), ('Huynh', 0.000365591), ('Frederick', 0.000364659), ('Randolph', 0.000363134), ('Cantu', 0.000361845), ('Fitzpatrick', 0.000360931), ('Mahoney', 0.000360374), ('Peck', 0.000360301), ('Villa', 0.000360027), ('Michael', 0.000359725), ('Donovan', 0.000358821), ('Mcconnell', 0.000358209), ('Walls', 0.00035787), ('Boyle', 0.000357642), ('Mayer', 0.000357368), ('Zuniga', 0.000356875), ('Giles', 0.000356372), ('Pineda', 0.000356345), ('Pace', 0.000356125), ('Hurley', 0.000356089), ('Mays', 0.000355568), ('Mcmillan', 0.000355403), ('Crosby', 0.000354928), ('Ayers', 0.000354855), ('Case', 0.000354152), ('Bentley', 0.00035374), ('Shepard', 0.000353658), ('Everett', 0.000353631), ('Pugh', 0.00035353), ('David', 0.000353238), ('Mcmahon', 0.000352306), ('Dunlap', 0.000351931), ('Bender', 0.000351456), ('Hahn', 0.000350451), ('Harding', 0.000350323), ('Acevedo', 0.000349336), ('Raymond', 0.00034866), ('Blackburn', 0.000348468), ('Duffy', 0.000346869), ('Landry', 0.00034686), ('Dougherty', 0.00034633), ('Bautista', 0.000345818), ('Shah', 0.00034569), ('Potts', 0.000344356), ('Arroyo', 0.000344274), ('Valentine', 0.000344192), ('Meza', 0.000344128), ('Gould', 0.00034411), ('Vaughan', 0.000343479), ('Fry', 0.000343032), ('Rush', 0.000342374), ('Avery', 0.0003421), ('Herring', 0.000341305), ('Dodson', 0.000340802), ('Clements', 0.000340245), ('Sampson', 0.000340217), ('Tapia', 0.000339916), ('Bean', 0.000339404), ('Lynn', 0.000339221), ('Crane', 0.000339203), ('Farley', 0.000339139), ('Cisneros', 0.000338536), ('Benton', 0.000338372), ('Ashley', 0.000338271), ('Mckay', 0.000337604), ('Finley', 0.000336928), ('Best', 0.000336818), ('Blevins', 0.000336626), ('Friedman', 0.000336553), ('Moses', 0.00033638), ('Sosa', 0.00033637), ('Blanchard', 0.000335923), ('Huber', 0.000335603), ('Frye', 0.000335484), ('Krueger', 0.000335283), ('Bernard', 0.000333931), ('Rosario', 0.000333867), ('Rubio', 0.000333794), ('Mullen', 0.000332981), ('Benjamin', 0.000332953), ('Haley', 0.000332898), ('Chung', 0.000332798), ('Moyer', 0.000332789), ('Choi', 0.000332505), ('Horne', 0.000331573), ('Yu', 0.000331546), ('Woodward', 0.000331153), ('Ali', 0.000329664), ('Nixon', 0.00032928), ('Hayden', 0.000329161), ('Rivers', 0.000328759), ('Estes', 0.000327471), ('Mccarty', 0.000326365), ('Richmond', 0.000326338), ('Stuart', 0.00032621), ('Maynard', 0.000325726), ('Brandt', 0.000325433), ('Oconnell', 0.000325378), ('Hanna', 0.000325278), ('Sanford', 0.000324967), ('Sheppard', 0.000324867), ('Church', 0.00032473), ('Burch', 0.000324565), ('Levy', 0.000324044), ('Rasmussen', 0.000323944), ('Coffey', 0.000323843), ('Ponce', 0.000323459), ('Faulkner', 0.000323359), ('Donaldson', 0.000323341), ('Schmitt', 0.000322783), ('Novak', 0.000322381), ('Costa', 0.000321879), ('Montes', 0.000321595), ('Booker', 0.000320727), ('Cordova', 0.000320481), ('Waller', 0.000319814), ('Arellano', 0.000319795), ('Maddox', 0.00031953), ('Mata', 0.000318781), ('Bonilla', 0.000318196), ('Stanton', 0.000318087), ('Compton', 0.000317867), ('Kaufman', 0.000317849), ('Dudley', 0.000317703), ('Mcpherson', 0.000317639), ('Beltran', 0.000317392), ('Dickson', 0.000317045), ('Mccann', 0.00031699), ('Villegas', 0.000316917), ('Proctor', 0.000316899), ('Hester', 0.000316835), ('Cantrell', 0.000316826), ('Daugherty', 0.000316607), ('Cherry', 0.000316287), ('Bray', 0.000315921), ('Davila', 0.000315611), ('Rowland', 0.000315218), ('Madden', 0.00031498), ('Levine', 0.00031498), ('Spence', 0.000314642), ('Good', 0.000314596), ('Irwin', 0.000314085), ('Werner', 0.000313884), ('Krause', 0.00031382), ('Petty', 0.000313207), ('Whitney', 0.000312961), ('Baird', 0.000312796), ('Hooper', 0.000311435), ('Pollard', 0.000311389), ('Zavala', 0.000311289), ('Jarvis', 0.000311124), ('Holden', 0.000311042), ('Hendrix', 0.00031096), ('Haas', 0.00031096), ('Mcgrath', 0.000310951), ('Bird', 0.00031032), ('Lucero', 0.000309955), ('Terrell', 0.000309882), ('Riggs', 0.000309461), ('Joyce', 0.000309233), ('Rollins', 0.000308812), ('Mercer', 0.000308812), ('Galloway', 0.000308593), ('Duke', 0.000308337), ('Odom', 0.000308081), ('Andersen', 0.000306172), ('Downs', 0.000306044), ('Hatfield', 0.00030577), ('Benitez', 0.00030556), ('Archer', 0.000305285), ('Huerta', 0.00030471), ('Travis', 0.000304628), ('Mcneil', 0.000303714), ('Hinton', 0.00030344), ('Zhang', 0.000303376), ('Hays', 0.000303303), ('Mayo', 0.000302681), ('Fritz', 0.000302151), ('Branch', 0.000301896), ('Mooney', 0.000301101), ('Ewing', 0.000300845), ('Ritter', 0.000300287), ('Esparza', 0.000299447), ('Frey', 0.000299109), ('Braun', 0.00029857), ('Gay', 0.000298533), ('Riddle', 0.000298369), ('Haney', 0.000298277), ('Kaiser', 0.000297574), ('Holder', 0.000296651), ('Chaney', 0.000296349), ('Mcknight', 0.00029592), ('Gamble', 0.000295838), ('Vang', 0.000295435), ('Cooley', 0.000295015), ('Carney', 0.000294969), ('Cowan', 0.000294604), ('Forbes', 0.000294476), ('Ferrell', 0.000293983), ('Davies', 0.0002939), ('Barajas', 0.000293736), ('Shea', 0.000293023), ('Osborn', 0.000292795), ('Bright', 0.000292777), ('Cuevas', 0.00029253), ('Bolton', 0.000292347), ('Murillo', 0.000292064), ('Lutz', 0.000291845), ('Duarte', 0.000291442), ('Kidd', 0.000291351), ('Key', 0.000291315), ('Cooke', 0.000291114)))
A:faker.providers.person.en_US.__init__.prefixes_female->OrderedDict((('Mrs.', 0.5), ('Ms.', 0.1), ('Miss', 0.1), ('Dr.', 0.3)))
A:faker.providers.person.en_US.__init__.prefixes_male->OrderedDict((('Mr.', 0.7), ('Dr.', 0.3)))
A:faker.providers.person.en_US.__init__.prefixes_nonbinary->OrderedDict((('Mx.', 0.5), ('Ind.', 0.1), ('Misc.', 0.1), ('Dr.', 0.3)))
A:faker.providers.person.en_US.__init__.suffixes_female->OrderedDict((('MD', 0.5), ('DDS', 0.3), ('PhD', 0.1), ('DVM', 0.2)))
A:faker.providers.person.en_US.__init__.suffixes_male->OrderedDict((('Jr.', 0.2), ('II', 0.05), ('III', 0.03), ('IV', 0.015), ('V', 0.005), ('MD', 0.3), ('DDS', 0.2), ('PhD', 0.1), ('DVM', 0.1)))
A:faker.providers.person.en_US.__init__.suffixes_nonbinary->OrderedDict((('Jr.', 0.2), ('II', 0.05), ('III', 0.03), ('IV', 0.015), ('V', 0.005), ('MD', 0.3), ('DDS', 0.2), ('PhD', 0.1), ('DVM', 0.1))).copy()
faker.providers.person.en_US.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/ar_AA/__init__.py----------------------------------------
faker.providers.person.ar_AA.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/es_CL/__init__.py----------------------------------------
A:faker.providers.person.es_CL.__init__.formats_male->OrderedDict([('{{given_name_male}} {{last_name}} {{last_name}}', 0.55), ('{{first_name_male}} {{last_name}} {{last_name}}', 0.25), ('{{first_name_male}} {{last_name}}', 0.17), ('{{given_name_male}} {{last_name}}-{{last_name}} {{last_name}}', 0.01), ('{{first_name_male}} {{last_name}}-{{last_name}} {{last_name}}', 0.01), ('{{first_name_male}} {{last_name}}-{{last_name}}', 0.01)])
A:faker.providers.person.es_CL.__init__.formats_female->OrderedDict([('{{given_name_female}} {{last_name}} {{last_name}}', 0.55), ('{{first_name_female}} {{last_name}} {{last_name}}', 0.25), ('{{first_name_female}} {{last_name}}', 0.17), ('{{given_name_female}} {{last_name}}-{{last_name}} {{last_name}}', 0.01), ('{{first_name_female}} {{last_name}}-{{last_name}} {{last_name}}', 0.01), ('{{first_name_female}} {{last_name}}-{{last_name}}', 0.01)])
A:faker.providers.person.es_CL.__init__.formats->OrderedDict([('formats_male', 0.48), ('formats_female', 0.52)])
A:faker.providers.person.es_CL.__init__.self._first_names->OrderedDict()
A:faker.providers.person.es_CL.__init__.last_names->OrderedDict([('González', 0.02683604), ('Muñoz', 0.0204748), ('Rojas', 0.01508949), ('Díaz', 0.01491392), ('Pérez', 0.01227842), ('Soto', 0.01044305), ('Rodríguez', 0.00997861), ('Contreras', 0.00993588), ('Silva', 0.009329), ('López', 0.00920382), ('Morales', 0.00901722), ('Sepúlveda', 0.00880392), ('Martínez', 0.00870346), ('Hernández', 0.00867623), ('Torres', 0.00844247), ('Flores', 0.00836659), ('Ramírez', 0.00809392), ('Fuentes', 0.00808812), ('Castillo', 0.00801363), ('Espinoza', 0.00788287), ('Araya', 0.00787643), ('Reyes', 0.00758987), ('Gutiérrez', 0.00753243), ('Valenzuela', 0.00751303), ('Castro', 0.00732126), ('Vargas', 0.00724265), ('Sánchez', 0.0072292), ('Vásquez', 0.00699836), ('Fernández', 0.00677539), ('Álvarez', 0.00659731), ('Gómez', 0.00658808), ('Tapia', 0.00631937), ('Herrera', 0.00623804), ('Cortés', 0.00613157), ('García', 0.00612128), ('Carrasco', 0.00605067), ('Núñez', 0.00597788), ('Jara', 0.0056899), ('Vergara', 0.00543105), ('Rivera', 0.00538544), ('Figueroa', 0.00513368), ('Riquelme', 0.00501507), ('Bravo', 0.00496506), ('Miranda', 0.00492273), ('Vera', 0.00488902), ('Molina', 0.00478491), ('Vega', 0.00463878), ('Sandoval', 0.00456813), ('Campos', 0.00453386), ('Ortiz', 0.00437677), ('Orellana', 0.0043535), ('Salazar', 0.00429255), ('Zúñiga', 0.00426568), ('Olivares', 0.0042567), ('Romero', 0.00414512), ('Gallardo', 0.00413093), ('Garrido', 0.00407209), ('Alarcón', 0.00407085), ('Guzmán', 0.00403413), ('Parra', 0.00390092), ('Saavedra', 0.00387443), ('Peña', 0.00387328), ('Aguilera', 0.00384177), ('Navarro', 0.00382743), ('Henríquez', 0.00381134), ('Cáceres', 0.00371244), ('Pizarro', 0.00370441), ('Godoy', 0.00367051), ('Aravena', 0.00365821), ('Jiménez', 0.00359039), ('Escobar', 0.00355175), ('Ruiz', 0.00353889), ('Leiva', 0.00348804), ('Medina', 0.00344091), ('Vidal', 0.00337984), ('Cárdenas', 0.00335514), ('Yáñez', 0.00334424), ('Salinas', 0.00333792), ('Valdés', 0.00333438), ('Moreno', 0.00325766), ('Lagos', 0.00318407), ('Maldonado', 0.00318255), ('Bustos', 0.00308706), ('Pino', 0.00302189), ('Carvajal', 0.00294762), ('Palma', 0.0029404), ('Alvarado', 0.00291871), ('Ortega', 0.00289513), ('Sanhueza', 0.00287199), ('Navarrete', 0.00286994), ('Guerrero', 0.00285879), ('Ramos', 0.00285476), ('Paredes', 0.00283341), ('Sáez', 0.00282436), ('Bustamante', 0.00280019), ('Toro', 0.00279548), ('Poblete', 0.00277637), ('Mora', 0.00274113), ('Donoso', 0.00272059), ('Velásquez', 0.00271278), ('Venegas', 0.0027015), ('Acuña', 0.00267882), ('Pinto', 0.00267108), ('Acevedo', 0.00266916), ('Toledo', 0.00262872), ('Quezada', 0.00261595), ('Farías', 0.00260009), ('Aguilar', 0.00259665), ('San Martín', 0.00259182), ('Arriagada', 0.00259178), ('Rivas', 0.00255249), ('Cerda', 0.0025361), ('Salas', 0.00250877), ('Cornejo', 0.00250865), ('Arias', 0.00247106), ('Cabrera', 0.00245006), ('Durán', 0.00244504), ('Hidalgo', 0.00242676), ('Arancibia', 0.00242276), ('Marín', 0.00240593), ('Méndez', 0.00239469), ('Troncoso', 0.00234412), ('Osorio', 0.00234024), ('Ulloa', 0.00232537), ('Inostroza', 0.00231406), ('Villarroel', 0.00231381), ('Delgado', 0.00228236), ('Cuevas', 0.00227765), ('Ríos', 0.00226799), ('Pacheco', 0.00225965), ('Calderón', 0.00225919), ('Lara', 0.00224862), ('Ojeda', 0.00223799), ('León', 0.00220174), ('Correa', 0.00219774), ('Villalobos', 0.00215563), ('Ponce', 0.00212502), ('Barrera', 0.00209673), ('Burgos', 0.0020954), ('Chávez', 0.00209403), ('Cifuentes', 0.00208313), ('Catalán', 0.00208213), ('Moya', 0.0020659), ('Concha', 0.00201908), ('Ávila', 0.00200483), ('Zapata', 0.00199565), ('Guerra', 0.00197511), ('Salgado', 0.00195438), ('Barría', 0.00193901), ('Alfaro', 0.00191432), ('Gajardo', 0.00189681), ('Uribe', 0.00188327), ('Meza', 0.00185182), ('Astudillo', 0.00183289), ('Aguirre', 0.00182031), ('Cruz', 0.00181786), ('Becerra', 0.00180856), ('Retamal', 0.00180751), ('Mendoza', 0.00179192), ('Neira', 0.00178706), ('Pereira', 0.00178309), ('Ahumada', 0.00176419), ('Villegas', 0.00175511), ('Valdebenito', 0.00173854), ('Pavez', 0.00173026), ('Barrientos', 0.0017038), ('Jorquera', 0.00169141), ('Moraga', 0.00168413), ('Cárcamo', 0.00167957), ('Valencia', 0.00167161), ('Gálvez', 0.00166746), ('Lobos', 0.0016669), ('Barraza', 0.00165862), ('Canales', 0.00165701), ('Guajardo', 0.00165624), ('Araneda', 0.00164477), ('Mansilla', 0.00162051), ('Urrutia', 0.00160508), ('Mancilla', 0.00159963), ('Abarca', 0.00159944), ('Andrade', 0.00158767), ('Quiroz', 0.00158624), ('Valdivia', 0.00158485), ('Ibarra', 0.00158271), ('Mella', 0.00157726), ('Gatica', 0.00157255), ('Leal', 0.00156976), ('Cid', 0.00154797), ('Mardones', 0.00152328), ('Riveros', 0.00152269), ('Albornoz', 0.00151925), ('Cisternas', 0.00151761), ('Vallejos', 0.00151693), ('Solís', 0.00150807), ('Baeza', 0.00150525), ('Gaete', 0.00147643), ('Fuentealba', 0.00147544), ('Manríquez', 0.00147026), ('Córdova', 0.00146422), ('Rebolledo', 0.00145805), ('Caro', 0.00145344), ('Suárez', 0.00143779), ('Carrillo', 0.00142716), ('Carreño', 0.00140997), ('Cofré', 0.00140222), ('Oyarzún', 0.00140036), ('Varas', 0.00138394), ('Santibáñez', 0.00136064), ('Barra', 0.00136061), ('Márquez', 0.00135707), ('Fuenzalida', 0.00131692), ('Zamora', 0.00131596), ('Arenas', 0.00131267), ('Opazo', 0.0013092), ('Cabezas', 0.00130372), ('Pardo', 0.0012754), ('Vilches', 0.00126641), ('Santander', 0.0012617), ('Berríos', 0.00124955), ('Roa', 0.00124847), ('Véliz', 0.00123772), ('Arévalo', 0.00122129), ('Rubio', 0.00120847), ('Montecinos', 0.00120057), ('Robles', 0.00119641), ('Plaza', 0.00119366), ('Ibáñez', 0.00119093), ('Parada', 0.0011786), ('Meneses', 0.00117822), ('Briones', 0.00117429), ('Mena', 0.00117398), ('Huerta', 0.00116162), ('Román', 0.00115523), ('Zamorano', 0.00114932), ('Mamani', 0.00113704), ('Rosales', 0.00113646), ('Peralta', 0.00112319), ('Cancino', 0.00111678), ('Faúndez', 0.00111285), ('Maturana', 0.00111164), ('Beltrán', 0.00110835), ('Oyarzo', 0.00110764), ('Jaramillo', 0.00110631), ('Jofré', 0.00110141), ('Tobar', 0.00109837), ('Aguayo', 0.00109791), ('Palacios', 0.00109289), ('Avendaño', 0.00108908), ('Galaz', 0.00108412), ('Gallegos', 0.00107582), ('Urra', 0.00107492), ('Zambrano', 0.00106761), ('Ayala', 0.00106246), ('Cortez', 0.0010549), ('Santana', 0.00105177), ('Olguín', 0.0010461), ('Riffo', 0.00104121), ('Astorga', 0.00103681), ('Garcés', 0.00103603), ('Villanueva', 0.00103454), ('Hermosilla', 0.00102636), ('Marchant', 0.00102556), ('Arce', 0.00101592), ('Bastías', 0.00101118), ('Galleguillos', 0.00100511), ('Suazo', 0.00100378), ('Monsalve', 0.00099612), ('Rubilar', 0.00098757), ('Lillo', 0.00098546), ('Padilla', 0.00098472), ('Candia', 0.00098237), ('Quintana', 0.00098128), ('Almonacid', 0.00097657), ('Lizama', 0.0009665), ('Cabello', 0.00096566), ('Espinosa', 0.00096337), ('Duarte', 0.00095256), ('Osses', 0.00094444), ('Cartes', 0.0009415), ('Barrios', 0.00093806), ('Loyola', 0.00093697), ('Novoa', 0.00093524), ('Seguel', 0.00093452), ('Norambuena', 0.00093397), ('Mellado', 0.00093307), ('Serrano', 0.00092513), ('Leyton', 0.00091829), ('Carmona', 0.00091801), ('Montenegro', 0.00091004), ('Segovia', 0.00090726), ('Cea', 0.00088448), ('Benavides', 0.00088352), ('Hormazábal', 0.00088324), ('Verdugo', 0.00088157), ('Jerez', 0.00087726), ('Martinez', 0.00087525), ('Mondaca', 0.00087385), ('Segura', 0.00087376), ('Pastén', 0.00086416), ('Oliva', 0.00085762), ('Cordero', 0.00085374), ('Aranda', 0.00084897), ('Céspedes', 0.00084814), ('Urbina', 0.00084485), ('Briceño', 0.00084439), ('Luna', 0.00083924), ('Matus', 0.00083599), ('Cisterna', 0.00083484), ('Varela', 0.00083373), ('Echeverría', 0.00083342), ('Aedo', 0.00082765), ('Bahamondes', 0.00082669), ('Altamirano', 0.00082598), ('Merino', 0.00082487), ('Arellano', 0.00082462), ('Matamala', 0.00082121), ('Elgueta', 0.00081083), ('Hurtado', 0.00081043), ('Brito', 0.00080209), ('Barahona', 0.00079001), ('Valderrama', 0.00078669), ('Madrid', 0.00078592), ('Estay', 0.00078471), ('Aburto', 0.0007808), ('Bórquez', 0.0007791), ('Acosta', 0.00077774), ('Órdenes', 0.00077433), ('Fierro', 0.00077414), ('Domínguez', 0.00077262), ('Lizana', 0.00076764), ('Villagra', 0.00076584), ('Alegría', 0.00076534), ('Maureira', 0.00075208), ('Urzúa', 0.00075118), ('Oyarce', 0.00074914), ('Trujillo', 0.0007439), ('Olave', 0.00074362), ('Ferrada', 0.00074062), ('Rosas', 0.0007302), ('Bugueño', 0.00072636), ('Vivanco', 0.0007254), ('Lorca', 0.00072113), ('Rozas', 0.00072075), ('Montero', 0.00072035), ('Águila', 0.00071803), ('Montoya', 0.00071493), ('Zepeda', 0.00071261), ('Vicencio', 0.00071137), ('Garay', 0.00069454), ('Gamboa', 0.00069389), ('Lazo', 0.00069274), ('Aliaga', 0.00069215), ('Villagrán', 0.00068574), ('Aros', 0.00068193), ('Aránguiz', 0.00068044), ('Baez', 0.00067759), ('Pozo', 0.00067759), ('Belmar', 0.00067734), ('Casanova', 0.00066929), ('Bernal', 0.00066644), ('Machuca', 0.00066572), ('Escalona', 0.00066507), ('Ávalos', 0.00066461), ('Quinteros', 0.00066039), ('Collao', 0.0006564), ('Letelier', 0.0006454), ('Quispe', 0.00064078), ('Marambio', 0.00063951), ('Mejías', 0.00063561), ('Saldivia', 0.00063496), ('Armijo', 0.00063393), ('Orrego', 0.00063127), ('Piña', 0.0006278), ('Chacón', 0.00062674), ('Bello', 0.00062597), ('Rocha', 0.00062355), ('Pinilla', 0.00062318), ('Parraguez', 0.00061441), ('Oñate', 0.00060908), ('Iturra', 0.00060459), ('Arredondo', 0.0006027), ('Fredes', 0.00060217), ('Jaque', 0.00059945), ('Blanco', 0.00059935), ('Chamorro', 0.00059864), ('Quiroga', 0.00059483), ('Chandía', 0.00059424), ('Ceballos', 0.00059158), ('Saldías', 0.00059148), ('Barros', 0.00058888), ('Llanos', 0.00058866), ('Benítez', 0.00058522), ('Peñaloza', 0.00058491), ('Páez', 0.00058426), ('Pulgar', 0.00058302), ('Melo', 0.0005829), ('Ruz', 0.00057822), ('Medel', 0.00057689), ('Ampuero', 0.00057673), ('Avilés', 0.0005759), ('Pincheira', 0.00057351), ('Bascuñán', 0.00057302), ('Azócar', 0.00057168), ('Villa', 0.00057078), ('Tello', 0.00057047), ('Luengo', 0.00056787), ('Ovalle', 0.00056645), ('Madariaga', 0.00056164), ('Celis', 0.0005613), ('Cubillos', 0.00055932), ('Prado', 0.00055635), ('Angulo', 0.00055579), ('Estrada', 0.00055418), ('Arroyo', 0.00055303), ('Mercado', 0.00054947), ('Castañeda', 0.00054829), ('Barriga', 0.00054575), ('Lucero', 0.00054559), ('Valladares', 0.00054274), ('Coronado', 0.00053983), ('Pineda', 0.00053896), ('Rojo', 0.0005376), ('Ibacache', 0.00053747), ('Quijada', 0.00053639), ('Bahamonde', 0.00052744), ('Zurita', 0.00052424), ('Salamanca', 0.00051517), ('Galdames', 0.00051507), ('Ferreira', 0.00051433), ('Santos', 0.00051231), ('Labra', 0.00051173), ('Naranjo', 0.00051021), ('Badilla', 0.00051011), ('Veloso', 0.00050866), ('Prieto', 0.00050785), ('Villar', 0.00050785), ('Ormeño', 0.00050776), ('Ossandón', 0.00050754), ('Lira', 0.00050624), ('Bobadilla', 0.00050571), ('Apablaza', 0.00050395), ('Cepeda', 0.00050252), ('Paz', 0.00050252), ('Sierra', 0.00049617), ('Esparza', 0.00049574), ('Zavala', 0.0004953), ('Quintanilla', 0.00049459), ('Veas', 0.00049134), ('Sobarzo', 0.0004892), ('Videla', 0.00048811), ('Fonseca', 0.00047584), ('Toloza', 0.00047113), ('Agüero', 0.00046766), ('Olmos', 0.00046568), ('Arteaga', 0.00046562), ('Allende', 0.00046472), ('Montecino', 0.00046395), ('Quiñones', 0.00045976), ('Agurto', 0.00045958), ('Zárate', 0.00045933), ('Villablanca', 0.00045911), ('Guevara', 0.00045679), ('Solar', 0.00045577), ('Cruces', 0.00045391), ('Retamales', 0.0004514), ('Alvarez', 0.00045037), ('Astete', 0.00044954), ('De La Fuente', 0.0004465), ('Aracena', 0.00043996), ('Alvear', 0.0004391), ('Millán', 0.0004316), ('Zenteno', 0.00043135), ('Erices', 0.00043101), ('Meléndez', 0.00043064), ('Carrera', 0.00042884), ('Olea', 0.000428), ('Cavieres', 0.00042779), ('Moncada', 0.00042583), ('Cares', 0.00042565), ('Vejar', 0.00042546), ('Arcos', 0.00042432), ('Montes', 0.0004215), ('Encina', 0.00041985), ('Fica', 0.00041784), ('Inzunza', 0.00041641), ('Droguett', 0.00041195), ('Caballero', 0.00041127), ('Lazcano', 0.0004095), ('Bruna', 0.00040805), ('Olmedo', 0.00040802), ('Corvalán', 0.00040634), ('Morán', 0.00040365), ('Olate', 0.00040114), ('Allendes', 0.00039928), ('Saldaña', 0.00039903), ('Viveros', 0.00039723), ('Moyano', 0.00039609), ('Choque', 0.0003955), ('Dinamarca', 0.00039107), ('Adasme', 0.00039098)])
A:faker.providers.person.es_CL.__init__.names->self.random_elements(self.first_names_female, length=2, unique=True)
faker.providers.person.es_CL.__init__.Provider(PersonProvider)
faker.providers.person.es_CL.__init__.Provider.first_names(self)
faker.providers.person.es_CL.__init__.Provider.given_name(self)->str
faker.providers.person.es_CL.__init__.Provider.given_name_female(self)->str
faker.providers.person.es_CL.__init__.Provider.given_name_male(self)->str
faker.providers.person.es_CL.__init__.Provider.name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/uk_UA/__init__.py----------------------------------------
A:faker.providers.person.uk_UA.__init__.text->text.replace(letter, translit_dict[letter]).replace(letter, translit_dict[letter])
A:faker.providers.person.uk_UA.__init__.formats_female->OrderedDict((('{{first_name_female}} {{last_name_female}}', 0.8), ('{{prefix_female}} {{first_name_female}} {{last_name_female}}', 0.1), ('{{last_name_female}} {{first_name_female}} {{middle_name_female}}', 0.1)))
A:faker.providers.person.uk_UA.__init__.formats_male->OrderedDict((('{{first_name_male}} {{last_name_male}}', 0.8), ('{{prefix_male}} {{first_name_male}} {{last_name_male}}', 0.1), ('{{last_name_male}} {{first_name_male}} {{middle_name_male}}', 0.1)))
A:faker.providers.person.uk_UA.__init__.formats->OrderedDict((('{{first_name_female}} {{last_name_female}}', 0.8), ('{{prefix_female}} {{first_name_female}} {{last_name_female}}', 0.1), ('{{last_name_female}} {{first_name_female}} {{middle_name_female}}', 0.1))).copy()
A:faker.providers.person.uk_UA.__init__.prefixes_male->OrderedDict((('пан', 0.8), ('добродій', 0.2)))
A:faker.providers.person.uk_UA.__init__.prefixes_female->OrderedDict((('пані', 0.8), ('панна', 0.1), ('добродійка', 0.1)))
A:faker.providers.person.uk_UA.__init__.first_name->self.first_name_female()
A:faker.providers.person.uk_UA.__init__.last_name->self.last_name_female()
A:faker.providers.person.uk_UA.__init__.middle_name->self.middle_name_female()
faker.providers.person.uk_UA.__init__.Provider(PersonProvider)
faker.providers.person.uk_UA.__init__.Provider.full_name(self,gender:Optional[SexLiteral]=None,short:Optional[bool]=False)->str
faker.providers.person.uk_UA.__init__.Provider.middle_name(self)->str
faker.providers.person.uk_UA.__init__.Provider.middle_name_female(self)->str
faker.providers.person.uk_UA.__init__.Provider.middle_name_male(self)->str
faker.providers.person.uk_UA.__init__.translit(text:str)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/ko_KR/__init__.py----------------------------------------
A:faker.providers.person.ko_KR.__init__.formats_female->OrderedDict((('{{last_name}}{{first_name_female}}', 1.0),))
A:faker.providers.person.ko_KR.__init__.formats_male->OrderedDict((('{{last_name}}{{first_name_male}}', 1.0),))
A:faker.providers.person.ko_KR.__init__.formats->OrderedDict((('{{last_name}}{{first_name_male}}', 1.0),)).copy()
A:faker.providers.person.ko_KR.__init__.first_names_female->OrderedDict((('경숙', 1.0), ('경자', 1), ('경희', 1), ('명숙', 1), ('명자', 1), ('미경', 1), ('미숙', 1), ('미영', 1), ('미정', 1), ('민서', 1), ('민지', 1), ('보람', 1), ('서연', 1), ('서영', 1), ('서윤', 1), ('서현', 1), ('선영', 1), ('수민', 1), ('수빈', 1), ('수진', 1), ('숙자', 1), ('순옥', 1), ('순자', 1), ('아름', 1), ('영미', 1), ('영숙', 1), ('영순', 1), ('영자', 1), ('영희', 1), ('예원', 1), ('예은', 1), ('예지', 1), ('예진', 1), ('옥순', 1), ('옥자', 1), ('유진', 1), ('윤서', 1), ('은경', 1), ('은서', 1), ('은영', 1), ('은정', 1), ('은주', 1), ('은지', 1), ('정숙', 1), ('정순', 1), ('정자', 1), ('정희', 1), ('지민', 1), ('지아', 1), ('지연', 1), ('지영', 1), ('지우', 1), ('지원', 1), ('지은', 1), ('지현', 1), ('지혜', 1), ('채원', 1), ('춘자', 1), ('하윤', 1), ('하은', 1), ('현숙', 1), ('현정', 1), ('현주', 1), ('현지', 1), ('혜진', 1)))
A:faker.providers.person.ko_KR.__init__.first_names_male->OrderedDict((('건우', 1.0), ('경수', 1), ('광수', 1), ('도윤', 1), ('도현', 1), ('동현', 1), ('민석', 1), ('민수', 1), ('민재', 1), ('민준', 1), ('병철', 1), ('상철', 1), ('상현', 1), ('상호', 1), ('상훈', 1), ('서준', 1), ('성민', 1), ('성수', 1), ('성진', 1), ('성현', 1), ('성호', 1), ('성훈', 1), ('승민', 1), ('승현', 1), ('시우', 1), ('영길', 1), ('영수', 1), ('영식', 1), ('영일', 1), ('영진', 1), ('영철', 1), ('영호', 1), ('영환', 1), ('예준', 1), ('우진', 1), ('재현', 1), ('재호', 1), ('정남', 1), ('정수', 1), ('정식', 1), ('정웅', 1), ('정호', 1), ('정훈', 1), ('종수', 1), ('주원', 1), ('준서', 1), ('준영', 1), ('준혁', 1), ('준호', 1), ('중수', 1), ('지후', 1), ('지훈', 1), ('진우', 1), ('진호', 1), ('현우', 1), ('현준', 1)))
A:faker.providers.person.ko_KR.__init__.first_names->OrderedDict((('건우', 1.0), ('경수', 1), ('광수', 1), ('도윤', 1), ('도현', 1), ('동현', 1), ('민석', 1), ('민수', 1), ('민재', 1), ('민준', 1), ('병철', 1), ('상철', 1), ('상현', 1), ('상호', 1), ('상훈', 1), ('서준', 1), ('성민', 1), ('성수', 1), ('성진', 1), ('성현', 1), ('성호', 1), ('성훈', 1), ('승민', 1), ('승현', 1), ('시우', 1), ('영길', 1), ('영수', 1), ('영식', 1), ('영일', 1), ('영진', 1), ('영철', 1), ('영호', 1), ('영환', 1), ('예준', 1), ('우진', 1), ('재현', 1), ('재호', 1), ('정남', 1), ('정수', 1), ('정식', 1), ('정웅', 1), ('정호', 1), ('정훈', 1), ('종수', 1), ('주원', 1), ('준서', 1), ('준영', 1), ('준혁', 1), ('준호', 1), ('중수', 1), ('지후', 1), ('지훈', 1), ('진우', 1), ('진호', 1), ('현우', 1), ('현준', 1))).copy()
A:faker.providers.person.ko_KR.__init__.last_names->OrderedDict((('김', 0.10689), ('이', 0.07307), ('박', 0.04192), ('정', 0.02333), ('최', 0.02151), ('조', 0.01176), ('강', 0.01055), ('윤', 0.0102), ('장', 0.00992), ('임', 0.00823), ('한', 0.00773), ('오', 0.00763), ('서', 0.00751), ('신', 0.00741), ('권', 0.00705), ('황', 0.00697), ('안', 0.00685), ('송', 0.00683), ('류', 0.00642), ('전', 0.00559), ('홍', 0.00558), ('고', 0.00471), ('문', 0.00464), ('양', 0.0046), ('손', 0.00457), ('배', 0.004), ('조', 0.00398), ('백', 0.00381), ('허', 0.00326), ('유', 0.00302), ('남', 0.00275), ('심', 0.00271), ('노', 0.00256), ('정', 0.00243), ('하', 0.0023), ('곽', 0.00203), ('성', 0.00199), ('차', 0.00194), ('주', 0.00194), ('우', 0.00194), ('구', 0.00193), ('신', 0.00192), ('임', 0.00191), ('나', 0.00186), ('전', 0.00186), ('민', 0.00171), ('유', 0.00167), ('진', 0.00159), ('지', 0.00153), ('엄', 0.00144)))
faker.providers.person.ko_KR.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/es_ES/__init__.py----------------------------------------
faker.providers.person.es_ES.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/en_TH/__init__.py----------------------------------------
faker.providers.person.en_TH.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/sv_SE/__init__.py----------------------------------------
A:faker.providers.person.sv_SE.__init__.first_names_female->OrderedDict((('Agnes', 0.001745), ('Agneta', 0.004777), ('Aina', 0.002274), ('Alexandra', 0.002762), ('Alice', 0.003714), ('Amanda', 0.003099), ('Anette', 0.004177), ('Angelica', 0.001462), ('Anita', 0.008407), ('Ann', 0.004749), ('Ann-Charlotte', 0.001562), ('Ann-Christin', 0.001383), ('Ann-Mari', 0.001194), ('Ann-Marie', 0.001974), ('Anna', 0.042584), ('Anna-Karin', 0.001175), ('Anna-Lena', 0.001167), ('Anne', 0.002491), ('Anne-Marie', 0.001349), ('Anneli', 0.003702), ('Annelie', 0.00147), ('Annette', 0.001469), ('Annie', 0.001357), ('Annika', 0.005399), ('Asta', 0.001437), ('Astrid', 0.006047), ('Barbro', 0.006869), ('Berit', 0.004732), ('Birgit', 0.005225), ('Birgitta', 0.024532), ('Brita', 0.002495), ('Britt', 0.00633), ('Britt-Marie', 0.00243), ('Britta', 0.002882), ('Camilla', 0.004547), ('Carin', 0.001447), ('Carina', 0.006187), ('Carolina', 0.001716), ('Caroline', 0.004014), ('Catarina', 0.001216), ('Catharina', 0.001196), ('Cecilia', 0.008249), ('Charlotta', 0.004212), ('Charlotte', 0.003875), ('Christina', 0.013235), ('Christine', 0.001515), ('Dagmar', 0.001687), ('Dagny', 0.001481), ('Doris', 0.001518), ('Ebba', 0.00223), ('Edit', 0.00162), ('Eivor', 0.002205), ('Eleonora', 0.001731), ('Elin', 0.006729), ('Elisabet', 0.02457), ('Elisabeth', 0.02537), ('Elise', 0.001198), ('Ella', 0.001269), ('Ellen', 0.002524), ('Ellinor', 0.001304), ('Elsa', 0.006168), ('Elsie', 0.001302), ('Elvira', 0.001736), ('Emelie', 0.003036), ('Emilia', 0.002176), ('Emma', 0.007459), ('Erika', 0.003543), ('Ester', 0.002201), ('Eva', 0.026496), ('Evelina', 0.00193), ('Evy', 0.001609), ('Felicia', 0.001269), ('Frida', 0.003423), ('Gabriella', 0.001245), ('Gerd', 0.003404), ('Gertrud', 0.002159), ('Greta', 0.002604), ('Gudrun', 0.0027), ('Gun', 0.004988), ('Gunborg', 0.003021), ('Gunhild', 0.003072), ('Gunilla', 0.00754), ('Gunnel', 0.003826), ('Gunvor', 0.003507), ('Hanna', 0.005512), ('Harriet', 0.001441), ('Helen', 0.002647), ('Helena', 0.011208), ('Helene', 0.002163), ('Helén', 0.001202), ('Hillevi', 0.001214), ('Ida', 0.004826), ('Inga', 0.005928), ('Inga-Lill', 0.001723), ('Ingeborg', 0.007051), ('Ingegerd', 0.006428), ('Ingegärd', 0.004587), ('Ingela', 0.002701), ('Inger', 0.010945), ('Ingrid', 0.01811), ('Irene', 0.007176), ('Iris', 0.001497), ('Irma', 0.001313), ('Iréne', 0.001696), ('Jeanette', 0.002204), ('Jennie', 0.001404), ('Jenny', 0.006327), ('Jessica', 0.003248), ('Johanna', 0.008736), ('Josefin', 0.00235), ('Josefina', 0.001294), ('Josefine', 0.001891), ('Julia', 0.002653), ('Kajsa', 0.001214), ('Karin', 0.023977), ('Karolina', 0.003098), ('Katarina', 0.00666), ('Kerstin', 0.01332), ('Kristin', 0.001999), ('Kristina', 0.024482), ('Laila', 0.001753), ('Lena', 0.011317), ('Lilian', 0.002505), ('Lillemor', 0.001571), ('Lilly', 0.001785), ('Lina', 0.002062), ('Linda', 0.006682), ('Linn', 0.001229), ('Linnea', 0.007713), ('Linnéa', 0.013337), ('Lisa', 0.004293), ('Lisbeth', 0.00258), ('Louise', 0.006398), ('Lovisa', 0.003016), ('Madeleine', 0.002603), ('Magdalena', 0.002318), ('Maj', 0.003649), ('Maj-Britt', 0.002919), ('Maja', 0.001462), ('Malin', 0.006314), ('Margareta', 0.037908), ('Margaretha', 0.003602), ('Margit', 0.00469), ('Mari', 0.002098), ('Maria', 0.061211), ('Marianne', 0.013455), ('Marie', 0.016343), ('Marie-Louise', 0.001508), ('Marina', 0.001195), ('Marita', 0.00249), ('Martina', 0.001657), ('Mary', 0.001719), ('Matilda', 0.004324), ('Maud', 0.001868), ('Mikaela', 0.001418), ('Mona', 0.003072), ('Monica', 0.005729), ('Monika', 0.002778), ('Märta', 0.004609), ('Nina', 0.00182), ('Olivia', 0.001516), ('Pernilla', 0.002416), ('Petra', 0.001964), ('Pia', 0.003138), ('Ragnhild', 0.001655), ('Rebecca', 0.001585), ('Rebecka', 0.001631), ('Rose-Marie', 0.001345), ('Rut', 0.004635), ('Ruth', 0.002177), ('Sandra', 0.003674), ('Sara', 0.007473), ('Signe', 0.002761), ('Sigrid', 0.00213), ('Siv', 0.00586), ('Sofia', 0.011263), ('Sofie', 0.003466), ('Solveig', 0.002937), ('Sonja', 0.00403), ('Stina', 0.002603), ('Susanna', 0.001707), ('Susanne', 0.006845), ('Svea', 0.002225), ('Sylvia', 0.00163), ('Teresia', 0.001703), ('Therese', 0.00442), ('Therése', 0.001215), ('Ulla', 0.009528), ('Ulla-Britt', 0.001683), ('Ulrika', 0.005582), ('Valborg', 0.001616), ('Vera', 0.001495), ('Veronica', 0.001985), ('Victoria', 0.00249), ('Viktoria', 0.006375), ('Vilhelmina', 0.001311), ('Viola', 0.009669), ('Ylva', 0.001296), ('Yvonne', 0.004993), ('Åsa', 0.005076)))
A:faker.providers.person.sv_SE.__init__.first_names_male->OrderedDict((('Adam', 0.00177), ('Albert', 0.001419), ('Albin', 0.001392), ('Alexander', 0.006474), ('Alf', 0.003571), ('Alfred', 0.001069), ('Allan', 0.003591), ('Alvar', 0.001072), ('Anders', 0.025312), ('Andreas', 0.008399), ('André', 0.001357), ('Anton', 0.00293), ('Arne', 0.010637), ('Arnold', 0.001027), ('Artur', 0.001269), ('Arvid', 0.002169), ('Axel', 0.00691), ('Bengt', 0.014569), ('Benny', 0.001397), ('Bernt', 0.002951), ('Bert', 0.001153), ('Bertil', 0.010902), ('Birger', 0.003109), ('Björn', 0.007803), ('Bo', 0.011988), ('Bror', 0.003281), ('Börje', 0.003853), ('Carl', 0.013483), ('Christer', 0.007964), ('Christian', 0.004359), ('Christoffer', 0.002267), ('Claes', 0.002743), ('Conny', 0.001928), ('Dan', 0.00291), ('Daniel', 0.009526), ('David', 0.005483), ('Dennis', 0.001779), ('Edvard', 0.001253), ('Edvin', 0.001559), ('Egon', 0.001019), ('Einar', 0.002486), ('Elias', 0.001085), ('Emanuel', 0.003777), ('Emil', 0.00477), ('Eric', 0.003387), ('Erik', 0.041018), ('Erland', 0.00145), ('Erling', 0.001173), ('Ernst', 0.002205), ('Evert', 0.003313), ('Filip', 0.001959), ('Folke', 0.002876), ('Fredrik', 0.01177), ('Georg', 0.003446), ('Gerhard', 0.001174), ('Gert', 0.001548), ('Gunnar', 0.017957), ('Gustaf', 0.00742), ('Gustav', 0.009406), ('Göran', 0.012287), ('Gösta', 0.00559), ('Göte', 0.002297), ('Hans', 0.016636), ('Harald', 0.002359), ('Harry', 0.002872), ('Helge', 0.002005), ('Henning', 0.001194), ('Henrik', 0.007644), ('Henry', 0.003134), ('Herbert', 0.001257), ('Hjalmar', 0.001179), ('Holger', 0.001641), ('Hugo', 0.001976), ('Håkan', 0.006974), ('Inge', 0.00288), ('Ingemar', 0.009024), ('Ingmar', 0.001138), ('Ingvar', 0.006758), ('Ivan', 0.001668), ('Ivar', 0.002943), ('Jacob', 0.001023), ('Jakob', 0.001299), ('Jan', 0.0173), ('Jan-Erik', 0.001094), ('Jens', 0.002221), ('Jesper', 0.002177), ('Jimmy', 0.00212), ('Joakim', 0.004606), ('Joel', 0.001778), ('Johan', 0.021986), ('Johannes', 0.003538), ('John', 0.008741), ('Johnny', 0.001499), ('Jonas', 0.007433), ('Jonathan', 0.001616), ('Jonny', 0.00142), ('Josef', 0.001131), ('Juhani', 0.001368), ('Jörgen', 0.003869), ('Karl', 0.030342), ('Kenneth', 0.00354), ('Kent', 0.004156), ('Kim', 0.001298), ('Kjell', 0.007932), ('Klas', 0.001989), ('Knut', 0.002668), ('Krister', 0.002433), ('Kristian', 0.001849), ('Kristoffer', 0.001548), ('Kurt', 0.004453), ('Lars', 0.03162), ('Lars-erik', 0.001056), ('Leif', 0.00918), ('Lennart', 0.019721), ('Linus', 0.001817), ('Ludvig', 0.001014), ('Magnus', 0.009301), ('Marcus', 0.004065), ('Markus', 0.002075), ('Martin', 0.008861), ('Mathias', 0.001551), ('Mats', 0.008403), ('Mattias', 0.005657), ('Max', 0.001234), ('Michael', 0.004456), ('Mikael', 0.015583), ('Morgan', 0.001377), ('Nicklas', 0.001201), ('Niclas', 0.001643), ('Niklas', 0.003704), ('Nils', 0.018831), ('Ola', 0.002691), ('Olle', 0.001666), ('Olof', 0.017132), ('Olov', 0.005457), ('Oscar', 0.002606), ('Oskar', 0.005198), ('Otto', 0.001361), ('Ove', 0.004994), ('Patrik', 0.005091), ('Paul', 0.002455), ('Per', 0.02269), ('Peter', 0.014015), ('Petter', 0.00115), ('Philip', 0.00134), ('Pierre', 0.001014), ('Pontus', 0.001652), ('Pär', 0.002043), ('Ragnar', 0.002983), ('Rasmus', 0.001323), ('Reinhold', 0.001075), ('Richard', 0.002053), ('Rickard', 0.00283), ('Rikard', 0.001272), ('Robert', 0.006959), ('Robin', 0.003012), ('Roger', 0.005033), ('Roland', 0.006879), ('Rolf', 0.007914), ('Ronny', 0.001561), ('Rune', 0.0056), ('Samuel', 0.001473), ('Sebastian', 0.003275), ('Sigurd', 0.001099), ('Sigvard', 0.002438), ('Simon', 0.003338), ('Sixten', 0.001299), ('Staffan', 0.001627), ('Stefan', 0.009034), ('Sten', 0.003911), ('Stig', 0.009343), ('Sture', 0.002518), ('Sune', 0.002173), ('Sven', 0.017897), ('Sören', 0.002376), ('Tage', 0.002198), ('Thomas', 0.00738), ('Tobias', 0.003623), ('Tom', 0.000977), ('Tomas', 0.004168), ('Tommy', 0.005526), ('Tony', 0.001814), ('Torbjörn', 0.002984), ('Tord', 0.001449), ('Tore', 0.00263), ('Torsten', 0.002915), ('Ture', 0.001212), ('Ulf', 0.008541), ('Uno', 0.001812), ('Urban', 0.001584), ('Valdemar', 0.002204), ('Valter', 0.001371), ('Verner', 0.001196), ('Victor', 0.001543), ('Viktor', 0.00308), ('Vilhelm', 0.003785), ('Wilhelm', 0.002195), ('William', 0.002332), ('Yngve', 0.002698), ('Åke', 0.013837)))
A:faker.providers.person.sv_SE.__init__.first_names->OrderedDict((('Adam', 0.00177), ('Albert', 0.001419), ('Albin', 0.001392), ('Alexander', 0.006474), ('Alf', 0.003571), ('Alfred', 0.001069), ('Allan', 0.003591), ('Alvar', 0.001072), ('Anders', 0.025312), ('Andreas', 0.008399), ('André', 0.001357), ('Anton', 0.00293), ('Arne', 0.010637), ('Arnold', 0.001027), ('Artur', 0.001269), ('Arvid', 0.002169), ('Axel', 0.00691), ('Bengt', 0.014569), ('Benny', 0.001397), ('Bernt', 0.002951), ('Bert', 0.001153), ('Bertil', 0.010902), ('Birger', 0.003109), ('Björn', 0.007803), ('Bo', 0.011988), ('Bror', 0.003281), ('Börje', 0.003853), ('Carl', 0.013483), ('Christer', 0.007964), ('Christian', 0.004359), ('Christoffer', 0.002267), ('Claes', 0.002743), ('Conny', 0.001928), ('Dan', 0.00291), ('Daniel', 0.009526), ('David', 0.005483), ('Dennis', 0.001779), ('Edvard', 0.001253), ('Edvin', 0.001559), ('Egon', 0.001019), ('Einar', 0.002486), ('Elias', 0.001085), ('Emanuel', 0.003777), ('Emil', 0.00477), ('Eric', 0.003387), ('Erik', 0.041018), ('Erland', 0.00145), ('Erling', 0.001173), ('Ernst', 0.002205), ('Evert', 0.003313), ('Filip', 0.001959), ('Folke', 0.002876), ('Fredrik', 0.01177), ('Georg', 0.003446), ('Gerhard', 0.001174), ('Gert', 0.001548), ('Gunnar', 0.017957), ('Gustaf', 0.00742), ('Gustav', 0.009406), ('Göran', 0.012287), ('Gösta', 0.00559), ('Göte', 0.002297), ('Hans', 0.016636), ('Harald', 0.002359), ('Harry', 0.002872), ('Helge', 0.002005), ('Henning', 0.001194), ('Henrik', 0.007644), ('Henry', 0.003134), ('Herbert', 0.001257), ('Hjalmar', 0.001179), ('Holger', 0.001641), ('Hugo', 0.001976), ('Håkan', 0.006974), ('Inge', 0.00288), ('Ingemar', 0.009024), ('Ingmar', 0.001138), ('Ingvar', 0.006758), ('Ivan', 0.001668), ('Ivar', 0.002943), ('Jacob', 0.001023), ('Jakob', 0.001299), ('Jan', 0.0173), ('Jan-Erik', 0.001094), ('Jens', 0.002221), ('Jesper', 0.002177), ('Jimmy', 0.00212), ('Joakim', 0.004606), ('Joel', 0.001778), ('Johan', 0.021986), ('Johannes', 0.003538), ('John', 0.008741), ('Johnny', 0.001499), ('Jonas', 0.007433), ('Jonathan', 0.001616), ('Jonny', 0.00142), ('Josef', 0.001131), ('Juhani', 0.001368), ('Jörgen', 0.003869), ('Karl', 0.030342), ('Kenneth', 0.00354), ('Kent', 0.004156), ('Kim', 0.001298), ('Kjell', 0.007932), ('Klas', 0.001989), ('Knut', 0.002668), ('Krister', 0.002433), ('Kristian', 0.001849), ('Kristoffer', 0.001548), ('Kurt', 0.004453), ('Lars', 0.03162), ('Lars-erik', 0.001056), ('Leif', 0.00918), ('Lennart', 0.019721), ('Linus', 0.001817), ('Ludvig', 0.001014), ('Magnus', 0.009301), ('Marcus', 0.004065), ('Markus', 0.002075), ('Martin', 0.008861), ('Mathias', 0.001551), ('Mats', 0.008403), ('Mattias', 0.005657), ('Max', 0.001234), ('Michael', 0.004456), ('Mikael', 0.015583), ('Morgan', 0.001377), ('Nicklas', 0.001201), ('Niclas', 0.001643), ('Niklas', 0.003704), ('Nils', 0.018831), ('Ola', 0.002691), ('Olle', 0.001666), ('Olof', 0.017132), ('Olov', 0.005457), ('Oscar', 0.002606), ('Oskar', 0.005198), ('Otto', 0.001361), ('Ove', 0.004994), ('Patrik', 0.005091), ('Paul', 0.002455), ('Per', 0.02269), ('Peter', 0.014015), ('Petter', 0.00115), ('Philip', 0.00134), ('Pierre', 0.001014), ('Pontus', 0.001652), ('Pär', 0.002043), ('Ragnar', 0.002983), ('Rasmus', 0.001323), ('Reinhold', 0.001075), ('Richard', 0.002053), ('Rickard', 0.00283), ('Rikard', 0.001272), ('Robert', 0.006959), ('Robin', 0.003012), ('Roger', 0.005033), ('Roland', 0.006879), ('Rolf', 0.007914), ('Ronny', 0.001561), ('Rune', 0.0056), ('Samuel', 0.001473), ('Sebastian', 0.003275), ('Sigurd', 0.001099), ('Sigvard', 0.002438), ('Simon', 0.003338), ('Sixten', 0.001299), ('Staffan', 0.001627), ('Stefan', 0.009034), ('Sten', 0.003911), ('Stig', 0.009343), ('Sture', 0.002518), ('Sune', 0.002173), ('Sven', 0.017897), ('Sören', 0.002376), ('Tage', 0.002198), ('Thomas', 0.00738), ('Tobias', 0.003623), ('Tom', 0.000977), ('Tomas', 0.004168), ('Tommy', 0.005526), ('Tony', 0.001814), ('Torbjörn', 0.002984), ('Tord', 0.001449), ('Tore', 0.00263), ('Torsten', 0.002915), ('Ture', 0.001212), ('Ulf', 0.008541), ('Uno', 0.001812), ('Urban', 0.001584), ('Valdemar', 0.002204), ('Valter', 0.001371), ('Verner', 0.001196), ('Victor', 0.001543), ('Viktor', 0.00308), ('Vilhelm', 0.003785), ('Wilhelm', 0.002195), ('William', 0.002332), ('Yngve', 0.002698), ('Åke', 0.013837))).copy()
A:faker.providers.person.sv_SE.__init__.last_names->OrderedDict((('Abrahamsson', 0.00244), ('Adolfsson', 0.002012), ('Alm', 0.001448), ('Andersson', 0.074993), ('Andreasson', 0.00245), ('Aronsson', 0.001722), ('Arvidsson', 0.003474), ('Augustsson', 0.001306), ('Axelsson', 0.006128), ('Bengtsson', 0.009764), ('Berg', 0.005072), ('Berggren', 0.002914), ('Berglund', 0.005115), ('Bergman', 0.00356), ('Bergqvist', 0.002172), ('Bergström', 0.005561), ('Berntsson', 0.00128), ('Björk', 0.003265), ('Björklund', 0.002883), ('Björkman', 0.00176), ('Blom', 0.002326), ('Blomberg', 0.001464), ('Blomqvist', 0.002349), ('Boman', 0.001365), ('Borg', 0.001954), ('Boström', 0.001985), ('Bäckström', 0.001865), ('Börjesson', 0.002036), ('Carlsson', 0.007727), ('Claesson', 0.0016), ('Dahl', 0.002064), ('Dahlberg', 0.002382), ('Dahlgren', 0.001578), ('Dahlström', 0.001538), ('Danielsson', 0.004208), ('Davidsson', 0.002035), ('Edlund', 0.001649), ('Ek', 0.002187), ('Ekberg', 0.001201), ('Eklund', 0.003919), ('Ekman', 0.001847), ('Ekström', 0.00267), ('Eliasson', 0.003127), ('Englund', 0.001958), ('Engström', 0.004079), ('Ericsson', 0.001221), ('Eriksson', 0.039871), ('Erlandsson', 0.001768), ('Falk', 0.002035), ('Forsberg', 0.004265), ('Forslund', 0.001137), ('Fransson', 0.003937), ('Franzén', 0.001491), ('Fredriksson', 0.004959), ('Friberg', 0.001828), ('Gunnarsson', 0.003764), ('Gustafsson', 0.020795), ('Gustavsson', 0.007363), ('Göransson', 0.00233), ('Haglund', 0.001575), ('Hagström', 0.001315), ('Hallberg', 0.002017), ('Hansen', 0.001804), ('Hansson', 0.012512), ('Hedberg', 0.001824), ('Hedlund', 0.002617), ('Hedman', 0.001419), ('Hedström', 0.001406), ('Hellberg', 0.001212), ('Hellström', 0.002385), ('Henriksson', 0.004586), ('Hermansson', 0.002866), ('Hjalmarsson', 0.001191), ('Holm', 0.0037), ('Holmberg', 0.003521), ('Holmgren', 0.002689), ('Holmqvist', 0.001561), ('Holmström', 0.001904), ('Hägglund', 0.001134), ('Håkansson', 0.0043), ('Högberg', 0.001492), ('Höglund', 0.001861), ('Isaksson', 0.003349), ('Ivarsson', 0.002209), ('Jakobsson', 0.005863), ('Jansson', 0.014518), ('Jensen', 0.001898), ('Johannesson', 0.001813), ('Johansson', 0.076124), ('Johnsson', 0.003881), ('Jonasson', 0.002439), ('Jonsson', 0.01655), ('Josefsson', 0.002104), ('Jönsson', 0.009781), ('Karlsson', 0.058698), ('Klasson', 0.001235), ('Knutsson', 0.001627), ('Kristiansson', 0.001226), ('Larsson', 0.036191), ('Lilja', 0.00141), ('Lind', 0.00391), ('Lindahl', 0.001815), ('Lindberg', 0.007056), ('Lindblad', 0.001253), ('Lindblom', 0.001864), ('Lindell', 0.001351), ('Linder', 0.00121), ('Lindgren', 0.00608), ('Lindholm', 0.002166), ('Lindkvist', 0.001233), ('Lindqvist', 0.004209), ('Lindström', 0.006642), ('Lindén', 0.001551), ('Ljung', 0.001232), ('Ljungberg', 0.001274), ('Lund', 0.002142), ('Lundberg', 0.00568), ('Lundgren', 0.005495), ('Lundin', 0.00397), ('Lundkvist', 0.001252), ('Lundmark', 0.00141), ('Lundqvist', 0.003493), ('Lundström', 0.003173), ('Löfgren', 0.002211), ('Magnusson', 0.007333), ('Malm', 0.00158), ('Malmberg', 0.001224), ('Martinsson', 0.0025), ('Mattsson', 0.004904), ('Melin', 0.001487), ('Moberg', 0.001532), ('Molin', 0.001312), ('Månsson', 0.002563), ('Mårtensson', 0.003432), ('Möller', 0.002013), ('Nielsen', 0.001623), ('Nilsson', 0.050327), ('Norberg', 0.002325), ('Nord', 0.001346), ('Nordin', 0.002799), ('Nordström', 0.003207), ('Norman', 0.001228), ('Norén', 0.001524), ('Nyberg', 0.003291), ('Nygren', 0.00188), ('Nyman', 0.002117), ('Nyström', 0.003538), ('Näslund', 0.001331), ('Ohlsson', 0.001141), ('Olausson', 0.001503), ('Olofsson', 0.006893), ('Olsson', 0.032427), ('Oskarsson', 0.001576), ('Ottosson', 0.002066), ('Palm', 0.001957), ('Paulsson', 0.001382), ('Pedersen', 0.001201), ('Persson', 0.031475), ('Petersson', 0.008913), ('Pettersson', 0.019276), ('Pålsson', 0.001626), ('Roos', 0.001447), ('Rosén', 0.00181), ('Samuelsson', 0.003855), ('Sandberg', 0.004613), ('Sandström', 0.002761), ('Sjöberg', 0.004282), ('Sjödin', 0.001399), ('Sjögren', 0.002585), ('Sjöström', 0.001921), ('Skoglund', 0.001788), ('Sköld', 0.001266), ('Stenberg', 0.001784), ('Strand', 0.001771), ('Strandberg', 0.001755), ('Ström', 0.002872), ('Strömberg', 0.002357), ('Ståhl', 0.00126), ('Sundberg', 0.002691), ('Sundin', 0.001434), ('Sundqvist', 0.001526), ('Sundström', 0.002302), ('Svensson', 0.030624), ('Svärd', 0.001284), ('Söderberg', 0.003305), ('Söderlund', 0.00197), ('Söderström', 0.002226), ('Törnqvist', 0.001176), ('Viklund', 0.001833), ('Vikström', 0.001757), ('Wahlström', 0.001139), ('Wallin', 0.003077), ('Wikström', 0.001522), ('Åberg', 0.002664), ('Ågren', 0.00132), ('Åkesson', 0.002344), ('Åström', 0.002272), ('Öberg', 0.002448), ('Öhman', 0.001415), ('Östlund', 0.001623)))
faker.providers.person.sv_SE.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/fr_QC/__init__.py----------------------------------------
faker.providers.person.fr_QC.__init__.Provider(self,*args:Any,**kwargs:Any)
faker.providers.person.fr_QC.__init__.Provider.__init__(self,*args:Any,**kwargs:Any)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/el_GR/__init__.py----------------------------------------
faker.providers.person.el_GR.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/fa_IR/__init__.py----------------------------------------
faker.providers.person.fa_IR.__init__.Provider(PersonProvider)
faker.providers.person.fa_IR.__init__.Provider.suffix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/vi_VN/__init__.py----------------------------------------
faker.providers.person.vi_VN.__init__.Provider(PersonProvider)
faker.providers.person.vi_VN.__init__.Provider.first_name_unisex(self)->str
faker.providers.person.vi_VN.__init__.Provider.middle_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/de_AT/__init__.py----------------------------------------
faker.providers.person.de_AT.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/en_IE/__init__.py----------------------------------------
faker.providers.person.en_IE.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/fi_FI/__init__.py----------------------------------------
A:faker.providers.person.fi_FI.__init__.first_names_female->OrderedDict((('Aada', 0.001877), ('Aila', 0.002778), ('Aili', 0.001542), ('Aino', 0.00803), ('Airi', 0.001591), ('Aleksandra', 0.002884), ('Alexandra', 0.002718), ('Alina', 0.002114), ('Alisa', 0.001607), ('Amanda', 0.004584), ('Anita', 0.005061), ('Anja', 0.005627), ('Anna', 0.010413), ('Anna-Liisa', 0.00232), ('Anne', 0.007823), ('Anneli', 0.0277), ('Anni', 0.004397), ('Anniina', 0.003366), ('Annika', 0.005193), ('Annikki', 0.013414), ('Annukka', 0.001424), ('Anu', 0.003005), ('Arja', 0.004539), ('Aulikki', 0.002522), ('Aune', 0.00208), ('Aurora', 0.003709), ('Birgitta', 0.003324), ('Carita', 0.001574), ('Christina', 0.001534), ('Eeva', 0.006403), ('Eija', 0.00491), ('Eila', 0.005377), ('Eliisa', 0.00163), ('Elina', 0.014353), ('Elisa', 0.00424), ('Elisabet', 0.005925), ('Elisabeth', 0.004305), ('Ella', 0.002958), ('Ellen', 0.002243), ('Elli', 0.002258), ('Elsa', 0.002284), ('Emilia', 0.014649), ('Emma', 0.003571), ('Emmi', 0.002183), ('Erika', 0.002084), ('Essi', 0.001576), ('Esteri', 0.001672), ('Eveliina', 0.005899), ('Hanna', 0.005409), ('Hannele', 0.0193), ('Heidi', 0.005315), ('Helena', 0.028118), ('Heli', 0.003711), ('Helinä', 0.002151), ('Hellevi', 0.002416), ('Helmi', 0.003888), ('Helvi', 0.001462), ('Henna', 0.002525), ('Hilkka', 0.003745), ('Hillevi', 0.001577), ('Ida', 0.003067), ('Iida', 0.003699), ('Iiris', 0.001461), ('Ilona', 0.004816), ('Inkeri', 0.009444), ('Irene', 0.005164), ('Irja', 0.002691), ('Irma', 0.002772), ('Irmeli', 0.006537), ('Jaana', 0.005125), ('Jasmin', 0.001789), ('Jenna', 0.002567), ('Jenni', 0.004011), ('Johanna', 0.025061), ('Jonna', 0.002053), ('Josefiina', 0.001757), ('Julia', 0.004716), ('Juulia', 0.001411), ('Kaarina', 0.022441), ('Kaija', 0.003216), ('Kaisa', 0.004424), ('Karoliina', 0.006727), ('Katariina', 0.010602), ('Kati', 0.002463), ('Katja', 0.00381), ('Katri', 0.00337), ('Katriina', 0.004651), ('Kerttu', 0.002839), ('Kirsi', 0.004856), ('Kirsti', 0.003699), ('Krista', 0.001465), ('Kristiina', 0.016656), ('Kristina', 0.002653), ('Kyllikki', 0.008537), ('Laura', 0.005985), ('Lea', 0.002827), ('Leena', 0.011052), ('Leila', 0.00267), ('Liisa', 0.015791), ('Lilja', 0.001584), ('Linda', 0.001706), ('Linnea', 0.004089), ('Lotta', 0.002416), ('Maaria', 0.00335), ('Maarit', 0.012853), ('Maija', 0.00721), ('Maire', 0.001814), ('Margareta', 0.002525), ('Margit', 0.002057), ('Mari', 0.005431), ('Maria', 0.044412), ('Marianne', 0.00481), ('Marika', 0.005912), ('Marita', 0.005339), ('Maritta', 0.002299), ('Marja', 0.010093), ('Marja-Leena', 0.002611), ('Marja-Liisa', 0.002389), ('Marjaana', 0.004377), ('Marjatta', 0.020442), ('Marjo', 0.002613), ('Marjukka', 0.001486), ('Marjut', 0.003021), ('Marketta', 0.004413), ('Martta', 0.001663), ('Matilda', 0.004284), ('Merja', 0.004704), ('Mervi', 0.002193), ('Mia', 0.001736), ('Miia', 0.002146), ('Milla', 0.002204), ('Minna', 0.006615), ('Mira', 0.001706), ('Mirja', 0.003558), ('Mirjam', 0.002435), ('Mirjami', 0.003726), ('Nea', 0.001605), ('Niina', 0.002776), ('Nina', 0.003539), ('Noora', 0.002609), ('Olivia', 0.00384), ('Oona', 0.001707), ('Orvokki', 0.007473), ('Outi', 0.002278), ('Päivi', 0.007556), ('Päivikki', 0.002189), ('Paula', 0.004438), ('Pauliina', 0.006648), ('Petra', 0.001455), ('Pia', 0.002752), ('Piia', 0.00155), ('Pirjo', 0.006778), ('Pirkko', 0.005904), ('Raija', 0.005237), ('Raili', 0.003592), ('Riikka', 0.00301), ('Riitta', 0.008817), ('Ritva', 0.007408), ('Roosa', 0.001641), ('Saara', 0.002931), ('Sanna', 0.005027), ('Sanni', 0.001827), ('Sara', 0.003165), ('Sari', 0.00656), ('Satu', 0.005599), ('Seija', 0.005422), ('Siiri', 0.002066), ('Sini', 0.002038), ('Sinikka', 0.010005), ('Sirkka', 0.004487), ('Sirpa', 0.005252), ('Sisko', 0.005153), ('Sofia', 0.012669), ('Sonja', 0.001978), ('Susanna', 0.012647), ('Suvi', 0.003093), ('Taina', 0.002224), ('Tanja', 0.002577), ('Tarja', 0.005886), ('Taru', 0.001492), ('Teija', 0.001634), ('Tellervo', 0.007298), ('Terhi', 0.001779), ('Terttu', 0.004408), ('Tiia', 0.002003), ('Tiina', 0.006154), ('Tuija', 0.002932), ('Tuula', 0.007947), ('Tuuli', 0.001425), ('Tuulia', 0.004341), ('Tuulikki', 0.013373), ('Ulla', 0.004552), ('Veera', 0.002453), ('Venla', 0.001985), ('Viivi', 0.001505), ('Vilhelmiina', 0.002004), ('Vilma', 0.001724), ('Virpi', 0.00213), ('Vuokko', 0.001466)))
A:faker.providers.person.fi_FI.__init__.first_names_male->OrderedDict((('Aapo', 0.001263), ('Aarne', 0.001939), ('Aaro', 0.001601), ('Aaron', 0.001246), ('Aatos', 0.001552), ('Ahti', 0.001192), ('Aimo', 0.001399), ('Aki', 0.001881), ('Akseli', 0.002333), ('Aleksanteri', 0.002618), ('Aleksi', 0.008346), ('Alexander', 0.002728), ('Allan', 0.00227), ('Anders', 0.001411), ('Anssi', 0.001464), ('Antero', 0.029891), ('Anton', 0.002652), ('Antti', 0.011971), ('Ari', 0.006403), ('Armas', 0.003609), ('Arto', 0.004059), ('Arttu', 0.00228), ('Artturi', 0.001853), ('Arvo', 0.001578), ('Asko', 0.001363), ('Atte', 0.001392), ('Aukusti', 0.002011), ('Aulis', 0.002725), ('Benjamin', 0.002089), ('Christian', 0.002142), ('Daniel', 0.002919), ('Edvard', 0.001248), ('Eelis', 0.001359), ('Eemeli', 0.004734), ('Eemil', 0.002606), ('Eerik', 0.001629), ('Eero', 0.005572), ('Eetu', 0.003098), ('Einari', 0.002263), ('Eino', 0.004304), ('Elias', 0.005129), ('Elmeri', 0.001817), ('Emil', 0.003422), ('Ensio', 0.006508), ('Erik', 0.005296), ('Erkki', 0.007568), ('Esa', 0.0043), ('Esko', 0.004194), ('Hannu', 0.007429), ('Harri', 0.004739), ('Heikki', 0.011301), ('Henri', 0.003282), ('Henrik', 0.007534), ('Henrikki', 0.001325), ('Henry', 0.001412), ('Hermanni', 0.00167), ('Iisakki', 0.001193), ('Ilari', 0.002866), ('Ilkka', 0.003098), ('Ilmari', 0.015056), ('Ismo', 0.00148), ('Jaakko', 0.008225), ('Jalmari', 0.002645), ('Jan', 0.002011), ('Jani', 0.005117), ('Janne', 0.006361), ('Jari', 0.008664), ('Jarkko', 0.002672), ('Jarmo', 0.004396), ('Jarno', 0.001681), ('Jere', 0.002255), ('Jesse', 0.002586), ('Joel', 0.002105), ('Johan', 0.003528), ('Johannes', 0.028915), ('Joni', 0.003244), ('Joona', 0.002503), ('Joonas', 0.003828), ('Joonatan', 0.001565), ('Jorma', 0.005147), ('Jouko', 0.003962), ('Jouni', 0.004093), ('Juha', 0.011567), ('Juhana', 0.001862), ('Juhani', 0.061356), ('Juho', 0.005642), ('Jukka', 0.008652), ('Julius', 0.00209), ('Jussi', 0.004772), ('Juuso', 0.002224), ('Jyrki', 0.002127), ('Kaarlo', 0.002073), ('Kai', 0.001942), ('Kalervo', 0.008502), ('Kalevi', 0.021057), ('Kalle', 0.003829), ('Kari', 0.009761), ('Karl', 0.001779), ('Kasper', 0.001177), ('Kauko', 0.002169), ('Keijo', 0.002259), ('Kim', 0.001172), ('Kimmo', 0.003441), ('Kristian', 0.011096), ('Kullervo', 0.002234), ('Kustaa', 0.001144), ('Lasse', 0.002197), ('Lassi', 0.001214), ('Lauri', 0.00755), ('Leevi', 0.002015), ('Leo', 0.003319), ('Markku', 0.00843), ('Marko', 0.006297), ('Markus', 0.009181), ('Martti', 0.005521), ('Matias', 0.013377), ('Matti', 0.01756), ('Mauno', 0.001189), ('Mauri', 0.002098), ('Miika', 0.001845), ('Mika', 0.007765), ('Mikael', 0.021621), ('Mikko', 0.009719), ('Miro', 0.001274), ('Niilo', 0.002094), ('Niklas', 0.002024), ('Niko', 0.003908), ('Oiva', 0.001202), ('Olavi', 0.030903), ('Oliver', 0.003026), ('Olli', 0.003921), ('Onni', 0.004513), ('Oskar', 0.001185), ('Oskari', 0.007745), ('Osmo', 0.001531), ('Ossi', 0.001591), ('Otto', 0.002902), ('Paavo', 0.00381), ('Pasi', 0.004109), ('Patrik', 0.001474), ('Pauli', 0.003105), ('Pekka', 0.017016), ('Pentti', 0.006344), ('Pertti', 0.004406), ('Peter', 0.001704), ('Petri', 0.00786), ('Petteri', 0.015518), ('Raimo', 0.004575), ('Rainer', 0.001478), ('Rasmus', 0.001715), ('Rauno', 0.001688), ('Reijo', 0.003919), ('Reino', 0.002166), ('Riku', 0.001803), ('Risto', 0.004678), ('Robert', 0.001478), ('Roope', 0.001412), ('Sakari', 0.013891), ('Sami', 0.00587), ('Samu', 0.001237), ('Samuel', 0.00403), ('Samuli', 0.004994), ('Santeri', 0.00346), ('Sebastian', 0.002863), ('Seppo', 0.007305), ('Simo', 0.002313), ('Taisto', 0.001514), ('Taneli', 0.00129), ('Tapani', 0.02906), ('Tapio', 0.024776), ('Tauno', 0.001795), ('Teemu', 0.004605), ('Tero', 0.003188), ('Teuvo', 0.001714), ('Timo', 0.010557), ('Toivo', 0.003649), ('Tomi', 0.00341), ('Tommi', 0.003191), ('Toni', 0.003723), ('Topias', 0.001645), ('Tuomas', 0.005948), ('Tuomo', 0.002739), ('Tuukka', 0.001175), ('Uolevi', 0.002879), ('Väinö', 0.003176), ('Valdemar', 0.00152), ('Valtteri', 0.006312), ('Veeti', 0.001673), ('Veijo', 0.001517), ('Veikko', 0.007525), ('Veli', 0.004415), ('Verneri', 0.001164), ('Vesa', 0.003926), ('Vilhelm', 0.001591), ('Vilho', 0.002303), ('Viljami', 0.003563), ('Viljo', 0.00154), ('Ville', 0.007025), ('Yrjö', 0.001912)))
A:faker.providers.person.fi_FI.__init__.first_names->OrderedDict((('Aapo', 0.001263), ('Aarne', 0.001939), ('Aaro', 0.001601), ('Aaron', 0.001246), ('Aatos', 0.001552), ('Ahti', 0.001192), ('Aimo', 0.001399), ('Aki', 0.001881), ('Akseli', 0.002333), ('Aleksanteri', 0.002618), ('Aleksi', 0.008346), ('Alexander', 0.002728), ('Allan', 0.00227), ('Anders', 0.001411), ('Anssi', 0.001464), ('Antero', 0.029891), ('Anton', 0.002652), ('Antti', 0.011971), ('Ari', 0.006403), ('Armas', 0.003609), ('Arto', 0.004059), ('Arttu', 0.00228), ('Artturi', 0.001853), ('Arvo', 0.001578), ('Asko', 0.001363), ('Atte', 0.001392), ('Aukusti', 0.002011), ('Aulis', 0.002725), ('Benjamin', 0.002089), ('Christian', 0.002142), ('Daniel', 0.002919), ('Edvard', 0.001248), ('Eelis', 0.001359), ('Eemeli', 0.004734), ('Eemil', 0.002606), ('Eerik', 0.001629), ('Eero', 0.005572), ('Eetu', 0.003098), ('Einari', 0.002263), ('Eino', 0.004304), ('Elias', 0.005129), ('Elmeri', 0.001817), ('Emil', 0.003422), ('Ensio', 0.006508), ('Erik', 0.005296), ('Erkki', 0.007568), ('Esa', 0.0043), ('Esko', 0.004194), ('Hannu', 0.007429), ('Harri', 0.004739), ('Heikki', 0.011301), ('Henri', 0.003282), ('Henrik', 0.007534), ('Henrikki', 0.001325), ('Henry', 0.001412), ('Hermanni', 0.00167), ('Iisakki', 0.001193), ('Ilari', 0.002866), ('Ilkka', 0.003098), ('Ilmari', 0.015056), ('Ismo', 0.00148), ('Jaakko', 0.008225), ('Jalmari', 0.002645), ('Jan', 0.002011), ('Jani', 0.005117), ('Janne', 0.006361), ('Jari', 0.008664), ('Jarkko', 0.002672), ('Jarmo', 0.004396), ('Jarno', 0.001681), ('Jere', 0.002255), ('Jesse', 0.002586), ('Joel', 0.002105), ('Johan', 0.003528), ('Johannes', 0.028915), ('Joni', 0.003244), ('Joona', 0.002503), ('Joonas', 0.003828), ('Joonatan', 0.001565), ('Jorma', 0.005147), ('Jouko', 0.003962), ('Jouni', 0.004093), ('Juha', 0.011567), ('Juhana', 0.001862), ('Juhani', 0.061356), ('Juho', 0.005642), ('Jukka', 0.008652), ('Julius', 0.00209), ('Jussi', 0.004772), ('Juuso', 0.002224), ('Jyrki', 0.002127), ('Kaarlo', 0.002073), ('Kai', 0.001942), ('Kalervo', 0.008502), ('Kalevi', 0.021057), ('Kalle', 0.003829), ('Kari', 0.009761), ('Karl', 0.001779), ('Kasper', 0.001177), ('Kauko', 0.002169), ('Keijo', 0.002259), ('Kim', 0.001172), ('Kimmo', 0.003441), ('Kristian', 0.011096), ('Kullervo', 0.002234), ('Kustaa', 0.001144), ('Lasse', 0.002197), ('Lassi', 0.001214), ('Lauri', 0.00755), ('Leevi', 0.002015), ('Leo', 0.003319), ('Markku', 0.00843), ('Marko', 0.006297), ('Markus', 0.009181), ('Martti', 0.005521), ('Matias', 0.013377), ('Matti', 0.01756), ('Mauno', 0.001189), ('Mauri', 0.002098), ('Miika', 0.001845), ('Mika', 0.007765), ('Mikael', 0.021621), ('Mikko', 0.009719), ('Miro', 0.001274), ('Niilo', 0.002094), ('Niklas', 0.002024), ('Niko', 0.003908), ('Oiva', 0.001202), ('Olavi', 0.030903), ('Oliver', 0.003026), ('Olli', 0.003921), ('Onni', 0.004513), ('Oskar', 0.001185), ('Oskari', 0.007745), ('Osmo', 0.001531), ('Ossi', 0.001591), ('Otto', 0.002902), ('Paavo', 0.00381), ('Pasi', 0.004109), ('Patrik', 0.001474), ('Pauli', 0.003105), ('Pekka', 0.017016), ('Pentti', 0.006344), ('Pertti', 0.004406), ('Peter', 0.001704), ('Petri', 0.00786), ('Petteri', 0.015518), ('Raimo', 0.004575), ('Rainer', 0.001478), ('Rasmus', 0.001715), ('Rauno', 0.001688), ('Reijo', 0.003919), ('Reino', 0.002166), ('Riku', 0.001803), ('Risto', 0.004678), ('Robert', 0.001478), ('Roope', 0.001412), ('Sakari', 0.013891), ('Sami', 0.00587), ('Samu', 0.001237), ('Samuel', 0.00403), ('Samuli', 0.004994), ('Santeri', 0.00346), ('Sebastian', 0.002863), ('Seppo', 0.007305), ('Simo', 0.002313), ('Taisto', 0.001514), ('Taneli', 0.00129), ('Tapani', 0.02906), ('Tapio', 0.024776), ('Tauno', 0.001795), ('Teemu', 0.004605), ('Tero', 0.003188), ('Teuvo', 0.001714), ('Timo', 0.010557), ('Toivo', 0.003649), ('Tomi', 0.00341), ('Tommi', 0.003191), ('Toni', 0.003723), ('Topias', 0.001645), ('Tuomas', 0.005948), ('Tuomo', 0.002739), ('Tuukka', 0.001175), ('Uolevi', 0.002879), ('Väinö', 0.003176), ('Valdemar', 0.00152), ('Valtteri', 0.006312), ('Veeti', 0.001673), ('Veijo', 0.001517), ('Veikko', 0.007525), ('Veli', 0.004415), ('Verneri', 0.001164), ('Vesa', 0.003926), ('Vilhelm', 0.001591), ('Vilho', 0.002303), ('Viljami', 0.003563), ('Viljo', 0.00154), ('Ville', 0.007025), ('Yrjö', 0.001912))).copy()
A:faker.providers.person.fi_FI.__init__.last_names->OrderedDict((('Aalto', 0.004189), ('Aaltonen', 0.004828), ('Aho', 0.003566), ('Ahokas', 0.001182), ('Ahola', 0.003697), ('Ahonen', 0.005301), ('Airaksinen', 0.001075), ('Alanen', 0.001124), ('Alanko', 0.001131), ('Alatalo', 0.001424), ('Andersson', 0.002447), ('Antikainen', 0.001061), ('Anttila', 0.004683), ('Anttonen', 0.00121), ('Aro', 0.00105), ('Asikainen', 0.002), ('Autio', 0.002187), ('Auvinen', 0.001732), ('Backman', 0.001331), ('Berg', 0.001362), ('Blomqvist', 0.001545), ('Eklund', 0.001737), ('Elo', 0.00113), ('Eloranta', 0.00109), ('Eriksson', 0.002454), ('Erkkilä', 0.001406), ('Eronen', 0.001765), ('Eskelinen', 0.002041), ('Eskola', 0.001747), ('Forsman', 0.001077), ('Grönroos', 0.001054), ('Gustafsson', 0.001571), ('Haapala', 0.001736), ('Haapanen', 0.00132), ('Haapaniemi', 0.001056), ('Haataja', 0.001222), ('Haavisto', 0.001782), ('Hakala', 0.004682), ('Hakkarainen', 0.00272), ('Häkkinen', 0.002513), ('Halme', 0.001566), ('Halonen', 0.003495), ('Hämäläinen', 0.009001), ('Hänninen', 0.003986), ('Hannula', 0.001522), ('Harju', 0.003153), ('Härkönen', 0.002434), ('Hartikainen', 0.002868), ('Hautala', 0.001909), ('Hautamäki', 0.00165), ('Haverinen', 0.001289), ('Heikkilä', 0.006931), ('Heikkinen', 0.008519), ('Heino', 0.00296), ('Heinonen', 0.007026), ('Heiskanen', 0.003335), ('Helenius', 0.001874), ('Helin', 0.001682), ('Helminen', 0.001458), ('Henriksson', 0.001408), ('Hietala', 0.002444), ('Hietanen', 0.00184), ('Hiltunen', 0.004889), ('Hirvonen', 0.004428), ('Hokkanen', 0.002165), ('Holappa', 0.00105), ('Holm', 0.001459), ('Holmberg', 0.001217), ('Holmström', 0.001188), ('Holopainen', 0.002501), ('Honkanen', 0.00323), ('Huhtala', 0.002066), ('Huotari', 0.001845), ('Huovinen', 0.001733), ('Huttunen', 0.003632), ('Huuskonen', 0.001163), ('Hytönen', 0.001515), ('Hyttinen', 0.001835), ('Hyvärinen', 0.002703), ('Hyvönen', 0.002406), ('Ihalainen', 0.001044), ('Ikonen', 0.00358), ('Immonen', 0.003231), ('Jaakkola', 0.002386), ('Jääskeläinen', 0.002913), ('Jaatinen', 0.001308), ('Jalonen', 0.001474), ('Jansson', 0.00146), ('Jäntti', 0.00125), ('Järvelä', 0.001204), ('Järvenpää', 0.001797), ('Järvi', 0.001061), ('Järvinen', 0.007928), ('Jauhiainen', 0.001305), ('Johansson', 0.003434), ('Jokela', 0.002356), ('Jokinen', 0.005951), ('Juntunen', 0.002955), ('Jussila', 0.002127), ('Juvonen', 0.001677), ('Kähkönen', 0.00158), ('Kaikkonen', 0.001253), ('Kainulainen', 0.001727), ('Kallio', 0.004876), ('Kämäräinen', 0.001118), ('Kanerva', 0.001436), ('Kangas', 0.002883), ('Kankaanpää', 0.001337), ('Kantola', 0.001513), ('Karhu', 0.00234), ('Karhunen', 0.001157), ('Kari', 0.001082), ('Karjalainen', 0.006036), ('Kärki', 0.001268), ('Kärkkäinen', 0.003561), ('Karlsson', 0.002809), ('Karppinen', 0.003072), ('Karttunen', 0.001799), ('Karvinen', 0.001394), ('Karvonen', 0.002385), ('Kauppila', 0.00126), ('Kauppinen', 0.003787), ('Keinänen', 0.001261), ('Kemppainen', 0.003777), ('Keränen', 0.002874), ('Keskinen', 0.001651), ('Keskitalo', 0.00109), ('Ketola', 0.001792), ('Kettunen', 0.003871), ('Kilpeläinen', 0.001374), ('Kinnunen', 0.006796), ('Kiuru', 0.001089), ('Kivelä', 0.002164), ('Kivimäki', 0.001619), ('Kivinen', 0.0013), ('Kiviniemi', 0.001402), ('Kivistö', 0.001447), ('Koistinen', 0.001988), ('Koivisto', 0.004667), ('Koivula', 0.002017), ('Koivunen', 0.001881), ('Kokko', 0.002672), ('Kokkonen', 0.003128), ('Kolehmainen', 0.002155), ('Komulainen', 0.001657), ('Konttinen', 0.001132), ('Koponen', 0.003424), ('Korhonen', 0.011042), ('Korpela', 0.002431), ('Korpi', 0.001281), ('Kortelainen', 0.001539), ('Koskela', 0.003733), ('Koski', 0.003231), ('Koskinen', 0.008414), ('Kosonen', 0.00231), ('Kovanen', 0.001198), ('Kuisma', 0.001348), ('Kujala', 0.002234), ('Kukkonen', 0.002415), ('Kulmala', 0.001901), ('Kumpulainen', 0.001781), ('Kuosmanen', 0.001577), ('Kurki', 0.001386), ('Kuronen', 0.001149), ('Kuusela', 0.001972), ('Kuusisto', 0.002479), ('Kyllönen', 0.001904), ('Laakkonen', 0.00201), ('Laakso', 0.00436), ('Laaksonen', 0.004505), ('Lähteenmäki', 0.001609), ('Lahti', 0.00373), ('Lahtinen', 0.005427), ('Laiho', 0.001374), ('Laine', 0.008802), ('Laitinen', 0.006223), ('Lammi', 0.00109), ('Lampinen', 0.002147), ('Lankinen', 0.001053), ('Lappalainen', 0.003902), ('Lassila', 0.001343), ('Latvala', 0.001139), ('Laukkanen', 0.002981), ('Laurila', 0.00268), ('Lehikoinen', 0.001339), ('Lehtimäki', 0.001726), ('Lehtinen', 0.007344), ('Lehto', 0.004389), ('Lehtola', 0.001536), ('Lehtonen', 0.00786), ('Leino', 0.002813), ('Leinonen', 0.004891), ('Lepistö', 0.001981), ('Leppänen', 0.005224), ('Leskinen', 0.002572), ('Liimatainen', 0.001943), ('Lilja', 0.00115), ('Lindberg', 0.001978), ('Lindfors', 0.001504), ('Lindgren', 0.00175), ('Lindholm', 0.003367), ('Lindqvist', 0.002171), ('Lindroos', 0.002225), ('Lindström', 0.002755), ('Linna', 0.001114), ('Lipponen', 0.00129), ('Liukkonen', 0.001696), ('Luoma', 0.00193), ('Luukkonen', 0.001845), ('Määttä', 0.003095), ('Mäenpää', 0.00279), ('Mäkelä', 0.009299), ('Mäki', 0.003044), ('Mäkinen', 0.009918), ('Makkonen', 0.002549), ('Malinen', 0.002249), ('Manninen', 0.004752), ('Männistö', 0.001155), ('Mäntylä', 0.001364), ('Markkanen', 0.001624), ('Martikainen', 0.002756), ('Marttila', 0.001834), ('Marttinen', 0.001083), ('Matikainen', 0.00149), ('Matilainen', 0.001526), ('Mattila', 0.005845), ('Mattsson', 0.001349), ('Meriläinen', 0.001503), ('Miettinen', 0.004877), ('Mikkola', 0.003284), ('Mikkonen', 0.00345), ('Moilanen', 0.004065), ('Moisio', 0.001273), ('Mononen', 0.001237), ('Muhonen', 0.001141), ('Mustonen', 0.004238), ('Myllymäki', 0.001733), ('Nevala', 0.001071), ('Nevalainen', 0.002639), ('Niemelä', 0.004065), ('Niemi', 0.006993), ('Nieminen', 0.009851), ('Niiranen', 0.001315), ('Nikula', 0.001193), ('Niskanen', 0.003346), ('Nissinen', 0.002092), ('Nousiainen', 0.002075), ('Nurmi', 0.004112), ('Nurminen', 0.003196), ('Nuutinen', 0.001781), ('Nyberg', 0.001381), ('Nykänen', 0.002561), ('Nylund', 0.001545), ('Nyman', 0.003435), ('Oikarinen', 0.00114), ('Oinonen', 0.001349), ('Ojala', 0.005237), ('Ojanen', 0.001396), ('Oksanen', 0.003372), ('Ollikainen', 0.001631), ('Ollila', 0.001614), ('Pääkkönen', 0.001404), ('Paananen', 0.002837), ('Paavilainen', 0.001028), ('Paavola', 0.001687), ('Pajunen', 0.001396), ('Pakarinen', 0.001818), ('Palomäki', 0.001161), ('Parkkinen', 0.001273), ('Partanen', 0.003879), ('Parviainen', 0.002908), ('Pasanen', 0.002364), ('Pehkonen', 0.001178), ('Pekkala', 0.001172), ('Pekkarinen', 0.0011), ('Pelkonen', 0.001933), ('Peltola', 0.003401), ('Peltonen', 0.004111), ('Peltoniemi', 0.001325), ('Pennanen', 0.001857), ('Penttilä', 0.001723), ('Penttinen', 0.001875), ('Perälä', 0.001592), ('Pesonen', 0.003534), ('Pietilä', 0.001874), ('Piirainen', 0.001336), ('Pirinen', 0.001318), ('Pitkänen', 0.004831), ('Pohjola', 0.001266), ('Pöllänen', 0.001097), ('Puhakka', 0.001413), ('Pulkkinen', 0.003995), ('Puranen', 0.001053), ('Puustinen', 0.001385), ('Raatikainen', 0.001244), ('Räisänen', 0.002146), ('Rajala', 0.002963), ('Ranta', 0.002422), ('Rantala', 0.004243), ('Rantanen', 0.006076), ('Räsänen', 0.004444), ('Räty', 0.001319), ('Rauhala', 0.001391), ('Rautiainen', 0.00292), ('Rautio', 0.002231), ('Reinikainen', 0.001112), ('Repo', 0.001805), ('Riihimäki', 0.001097), ('Riikonen', 0.001838), ('Rinne', 0.002123), ('Rintala', 0.001596), ('Rissanen', 0.003116), ('Ronkainen', 0.001757), ('Rönkkö', 0.001111), ('Rossi', 0.001203), ('Ruotsalainen', 0.002752), ('Ruuskanen', 0.001251), ('Rytkönen', 0.00144), ('Ryynänen', 0.00112), ('Saarela', 0.002292), ('Saari', 0.003871), ('Saarinen', 0.007247), ('Saastamoinen', 0.001741), ('Sainio', 0.001224), ('Sallinen', 0.001148), ('Salmela', 0.002572), ('Salmi', 0.003705), ('Salminen', 0.007146), ('Salo', 0.006336), ('Salomaa', 0.001099), ('Salonen', 0.006757), ('Savolainen', 0.005448), ('Seppä', 0.001142), ('Seppälä', 0.004007), ('Seppänen', 0.003731), ('Sihvonen', 0.001053), ('Sillanpää', 0.002264), ('Silvennoinen', 0.001614), ('Simola', 0.001116), ('Simonen', 0.001049), ('Sipilä', 0.001582), ('Sirén', 0.001129), ('Sirviö', 0.001089), ('Sjöblom', 0.001119), ('Soini', 0.001102), ('Soininen', 0.001422), ('Suhonen', 0.001834), ('Suomalainen', 0.001609), ('Suominen', 0.003582), ('Sutinen', 0.001056), ('Syrjälä', 0.001196), ('Tähtinen', 0.001028), ('Taipale', 0.001378), ('Takala', 0.001797), ('Tamminen', 0.002461), ('Tanskanen', 0.001536), ('Tarvainen', 0.001396), ('Taskinen', 0.001633), ('Tervo', 0.001419), ('Tiainen', 0.00234), ('Tiihonen', 0.001149), ('Tikka', 0.001325), ('Tikkanen', 0.00266), ('Timonen', 0.002211), ('Tirkkonen', 0.001193), ('Toivanen', 0.002668), ('Toivonen', 0.004311), ('Tolonen', 0.002122), ('Tolvanen', 0.001917), ('Tuomi', 0.001608), ('Tuominen', 0.006098), ('Tuovinen', 0.001894), ('Turpeinen', 0.001528), ('Turunen', 0.006523), ('Uotila', 0.001053), ('Uusitalo', 0.002687), ('Väänänen', 0.002319), ('Vainio', 0.003358), ('Väisänen', 0.004904), ('Välimäki', 0.001587), ('Valkama', 0.001139), ('Valkonen', 0.001248), ('Valtonen', 0.002171), ('Varis', 0.001436), ('Vartiainen', 0.002039), ('Väyrynen', 0.001426), ('Venäläinen', 0.001262), ('Vesterinen', 0.001259), ('Viitala', 0.001642), ('Viitanen', 0.002647), ('Viljanen', 0.001859), ('Virta', 0.002228), ('Virtanen', 0.01083), ('Voutilainen', 0.001853), ('Vuorela', 0.001156), ('Vuori', 0.001701), ('Vuorinen', 0.003188), ('Ylinen', 0.00105), ('Ylitalo', 0.001438), ('Ylönen', 0.00125)))
faker.providers.person.fi_FI.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/es_AR/__init__.py----------------------------------------
A:faker.providers.person.es_AR.__init__.first_names_female->OrderedDict([('Martina', 0.0439534346041129), ('Isabella', 0.041382089943949055), ('Catalina', 0.03866702492610898), ('Sofia', 0.03018752382321146), ('Delfina', 0.02948141945723694), ('Emma', 0.02678822492860847), ('Valentina', 0.026463291946036128), ('Victoria', 0.02355764123649497), ('Emilia', 0.023554516880893314), ('Juana', 0.02178925596595702), ('Julieta', 0.02120812582404879), ('Josefina', 0.021101897733592445), ('Alma', 0.019539719932763863), ('Guadalupe', 0.019117931926540148), ('Olivia', 0.018358713515337462), ('Francesca', 0.018343091737329176), ('Camila', 0.017574500259321512), ('Lola', 0.017187080164716026), ('Renata', 0.016799660070110536), ('Malena', 0.014946917198327844), ('Jazmin', 0.014172077009116869), ('Pilar', 0.01407209762986384), ('Morena', 0.013481594421150636), ('Guillermina', 0.013144164016171665), ('Bianca', 0.012953578324470577), ('Agustina', 0.012884842501234119), ('Julia', 0.012138121512438057), ('Clara', 0.010666550024057538), ('Maria Victoria', 0.010241637662232163), ('Mia', 0.010066673748539362), ('Sofía', 0.009448051339411245), ('Mora', 0.00927933613692176), ('Ana Paula', 0.009207475958083645), ('Lucía', 0.009007517199577587), ('Mia Valentina', 0.007988977273437352), ('Lara', 0.007954609361819125), ('Ambar', 0.007723407047296495), ('Milagros', 0.007707785269288209), ('Antonella', 0.007707785269288209), ('Valentina ', 0.007654671224060036), ('Felicitas', 0.007642173801653409), ('Amparo', 0.007604681534433523), ('Agostina', 0.007539070066798722), ('Helena', 0.0072360075734379786), ('Juliana', 0.007073541082151805), ('Constanza', 0.006867333612442433), ('Lucia', 0.006742359388376147), ('Paloma', 0.006676747920741347), ('Luz Milagros', 0.0066736235651396894), ('Maria Paz', 0.006536151918666774), ('Abril', 0.006501784007048545), ('Maria Emilia', 0.006345566226965688), ('Zoe', 0.0061737266688745435), ('Matilda', 0.0061706023132728875), ('Paulina', 0.006070622934019858), ('Sofia Belen', 0.00527703661119894), ('Maia', 0.00525516612198734), ('Sol', 0.005239544343979053), ('Violeta', 0.005220798210369111), ('Lourdes', 0.005202052076759168), ('Luciana', 0.005161435453937625), ('Micaela', 0.005139564964726025), ('Alma Valentina', 0.0051176944755144255), ('Nina', 0.005073953497091225), ('Zoe Valentina', 0.005064580430286253), ('Sara', 0.004989595895846481), ('Antonia', 0.004923984428211681), ('Milena', 0.00479276149294208), ('Ludmila', 0.004786512781738766), ('Zoe Jazmin', 0.004724025669705622), ('Luana', 0.004664662913274137), ('Giuliana', 0.004589678378834366), ('Maite', 0.004580305312029394), ('Valentina Jazmin', 0.004549061756012822), ('Mia Jazmin', 0.0044896989995813355), ('Elena', 0.004480325932776364), ('Jazmín', 0.004427211887548193), ('Alma Mia', 0.004411590109539907), ('Candela', 0.0043990926871332785), ('Morena Jazmin', 0.004370973486718364), ('Joaquina', 0.004305362019083564), ('Tiziana', 0.004295988952278592), ('Luna', 0.00428661588547362), ('Francisca', 0.004274118463066992), ('Justina', 0.004224128773440478), ('Angelina', 0.004164766017008992), ('Uma', 0.00408978148256922), ('Kiara', 0.004042916148544362), ('Alfonsina', 0.004021045659332763), ('Florencia', 0.003971055969706248), ('Mia Morena', 0.003952309836096304), ('Luz Maria', 0.0039491854804946476), ('Uma ', 0.003883574012859847), ('Alma Jazmin', 0.00385857916804659), ('Carmela', 0.0038335843232333326), ('Isabel', 0.0037492267219885896), ('Paula', 0.003739853655183618), ('Maria Luz', 0.003699237032362075), ('Luisana', 0.0036929883211587605), ('Nahiara Jazmin', 0.003677366543150475)])
A:faker.providers.person.es_AR.__init__.first_names_male->OrderedDict([('Benjamin', 0.05313287990513444), ('Bautista', 0.03439693595213106), ('Santino', 0.03261957010645112), ('Juan Ignacio', 0.029013044011612837), ('Valentino', 0.02878678424904929), ('Felipe', 0.02801532023934465), ('Mateo', 0.027925361538566375), ('Joaquin', 0.02782177273160957), ('Santiago', 0.027393787397603817), ('Francisco', 0.02438425995338503), ('Thiago Benjamin', 0.021404718742758996), ('Juan Cruz', 0.017950849837120225), ('Ignacio', 0.01766734362860686), ('Lautaro', 0.01698856434091621), ('Benicio', 0.0168822495127237), ('Guadalupe', 0.016680523941281496), ('Thiago', 0.01611351152425477), ('Ciro', 0.014633281993266722), ('Pedro', 0.014526967165074211), ('Lorenzo', 0.014505158995188568), ('Simon', 0.013872722068504907), ('Tomàs', 0.013826379707497916), ('Facundo', 0.013068545803971808), ('Valentin', 0.01288862840241525), ('Agustin', 0.012572409939073421), ('Juan Bautista', 0.011364782531655918), ('Maximo', 0.011048564068314087), ('Bruno', 0.010983139558657158), ('Mateo Benjamin', 0.01049245573623018), ('Juan Pablo', 0.010435209290280368), ('Manuel', 0.009903635149317809), ('Nicolas', 0.009821854512246648), ('Lautaro Benjamin', 0.009794594299889593), ('Lucas', 0.009753703981354011), ('Tiziano', 0.009669197323047142), ('Franco', 0.009538348303733282), ('Dante', 0.009388417135769484), ('Salvador', 0.00891954148322815), ('Matias', 0.008641487317186197), ('Juan Martin', 0.008548802595172215), ('Tomas', 0.008191693813294803), ('Julian', 0.007968160071966957), ('Agustín', 0.0077173661182820584), ('Juan Manuel', 0.007398421633704524), ('Luca', 0.007281202720569191), ('Santino Benjamin', 0.007014052639470059), ('Jeremias', 0.006921367917456075), ('Vicente', 0.006678752027478291), ('Thiago Ezequiel', 0.006517916774571671), ('Ramiro', 0.006455218286150447), ('Luciano', 0.00644158817997192), ('Genaro', 0.006100835525508741), ('Federico', 0.005885479847888013), ('Thiago Agustin', 0.005790069104638323), ('Lucio', 0.005757356849809858), ('Joaquín', 0.005754630828574152), ('Lisandro', 0.005754630828574152), ('Ian Benjamin', 0.005730096637452804), ('Sebastian', 0.005713740510038571), ('Tiziano Benjamin', 0.005640137936674524), ('Thiago Nicolas', 0.005580165469489005), ('Thiago Valentin', 0.00551201493859637), ('Lautaro Ezequiel', 0.005427508280289502), ('Gonzalo', 0.005386617961753919), ('Alejo', 0.005364809791868277), ('Bautista Benjamin', 0.0051303719655976104), ('Camilo', 0.005086755625826323), ('Milo', 0.005048591328526447), ('Thiago Nahuel', 0.0049995229462837494), ('Octavio', 0.004996796925048044), ('Santiago Benjamin', 0.00490411220303406), ('Fausto', 0.004805975438548664), ('Martín', 0.004596071803399346), ('Francesco', 0.004579715675985114), ('Sol', 0.004571537612277998), ('Geronimo', 0.0045660855698065874), ('Juan', 0.004536099336213827), ('Benjamin Ezequiel', 0.0045224692300353), ('Tobias', 0.004320743658593099), ('Gael', 0.004309839573650277), ('Augusto', 0.0043970722531928505), ('Ezequiel', 0.0042089767879291765), ('Miguel Angel', 0.004110840023443781), ('Juan Gabriel', 0.003966360897951393), ('Thiago Leonel', 0.003952730791772867), ('Juan Francisco', 0.003941826706830045), ('Santino Ezequiel', 0.0037864434963948354), ('Mateo Ezequiel', 0.00378371747515913), ('Ian', 0.003868224133465998), ('Thiago Lionel', 0.0037291970504450215), ('Enzo', 0.0037182929655021997), ('Emiliano', 0.0037073888805593783), ('Lautaro Nicolas', 0.003674676625730913), ('Antonio', 0.003636512328431037), ('Tomas Benjamin', 0.0035983480311311614), ('Mateo Agustin', 0.003584717924952634), ('Luciano Benjamin', 0.0035465536276527584), ('Tiziano Valentin', 0.003494759224174355), ('Santino Nicolas', 0.003483855139231533), ('Alvaro', 0.003475677075524417)])
A:faker.providers.person.es_AR.__init__.first_names->OrderedDict([('Benjamin', 0.026454408864554677), ('Martina', 0.019093972803168394), ('Isabella', 0.01797694553440186), ('Bautista', 0.01712594177071217), ('Catalina', 0.01679748417770913), ('Santino', 0.01624100643749737), ('Juan Ignacio', 0.01444534777822869), ('Valentino', 0.014332694967405335), ('Felipe', 0.013948589600381119), ('Mateo', 0.013903799928607978), ('Joaquin', 0.013852223942929814), ('Santiago', 0.01363913368631214), ('Sofia', 0.01311387299006348), ('Delfina', 0.012807131601556509), ('Francisco', 0.012140715576083401), ('Emma', 0.011637171084330808), ('Valentina', 0.011496015755106361), ('Thiago Benjamin', 0.010657227356445708), ('Victoria', 0.01023376136877237), ('Emilia', 0.010232404105991365), ('Juana', 0.00946555063472394), ('Julieta', 0.009213099757457141), ('Josefina', 0.009166952822902995), ('Juan Cruz', 0.00893757541291327), ('Ignacio', 0.008796420083688822), ('Alma', 0.008488321432400848), ('Lautaro', 0.008458461651218755), ('Benicio', 0.008405528402759587), ('Guadalupe', 0.008305090956965269), ('Thiago', 0.008022780298516377), ('Olivia', 0.007975276101181226), ('Francesca', 0.007968489787276205), ('Camila', 0.007634603143149148), ('Lola', 0.007466302558304616), ('Renata', 0.0072980019734600835), ('Ciro', 0.007285786608431045), ('Pedro', 0.007232853359971878), ('Lorenzo', 0.007221995257723843), ('Simon', 0.006907110292530847), ('Tomàs', 0.006884036825253774), ('Facundo', 0.006506717772134581), ('Malena', 0.006493145144324538), ('Valentin', 0.006417138428588297), ('Agustin', 0.0062596959459918), ('Jazmin', 0.0061565439746354735), ('Pilar', 0.006113111565643336), ('Morena', 0.0058565889000335245), ('Guillermina', 0.005710004519685061), ('Juan Bautista', 0.005658428534006898), ('Bianca', 0.005627211490043799), ('Agustina', 0.005597351708861704), ('Maximo', 0.0055009860514104), ('Bruno', 0.005468411744666297), ('Julia', 0.005272965904201678), ('Mateo Benjamin', 0.005224104444085524), ('Juan Pablo', 0.005195601925684434), ('Manuel', 0.004930935683388597), ('Nicolas', 0.004890217799958468), ('Lautaro Benjamin', 0.004876645172148425), ('Lucas', 0.00485628623043336), ('Tiziano', 0.004814211084222227), ('Franco', 0.004749062470734021), ('Dante', 0.004674413017778785), ('Clara', 0.0046336951343486565), ('Maria Victoria', 0.004449107396132072), ('Salvador', 0.004440963819446047), ('Mia', 0.004373100680395832), ('Matias', 0.004302523015783609), ('Juan Martin', 0.004256376081229463), ('Sofía', 0.004104362649756982), ('Tomas', 0.004078574656917901), ('Mora', 0.004031070459582751), ('Ana Paula', 0.003999853415619652), ('Julian', 0.003967279108875548), ('Lucía', 0.003912988597635377), ('Agustín', 0.0038424109330231536), ('Juan Manuel', 0.0036836111876456515), ('Luca', 0.0036252488880624666), ('Santino Benjamin', 0.003492237135524046), ('Mia Valentina', 0.0034705209310279773), ('Lara', 0.00345559104043693), ('Jeremias', 0.0034460902009699), ('Ambar', 0.0033551535946426125), ('Milagros', 0.003348367280737591), ('Antonella', 0.003348367280737591), ('Vicente', 0.0033252938134605177), ('Valentina ', 0.0033252938134605177), ('Felicitas', 0.003319864762336501), ('Amparo', 0.0033035776089644494), ('Agostina', 0.003275075090563359), ('Thiago Ezequiel', 0.0032452153093812646), ('Ramiro', 0.0032139982654181658), ('Luciano', 0.0032072119515131445), ('Helena', 0.003143420600805943), ('Juliana', 0.0030728429361937194), ('Genaro', 0.0030375541038876078), ('Constanza', 0.0029832635926474362), ('Federico', 0.0029303303441882687), ('Lucia', 0.0029289730814072643), ('Paloma', 0.0029004705630061743), ('Luz Milagros', 0.00289911330022517), ('Thiago Agustin', 0.0028828261468531184), ('Lucio', 0.002866538993481067), ('Joaquín', 0.0028651817307000626), ('Lisandro', 0.0028651817307000626), ('Ian Benjamin', 0.002852966365671024), ('Sebastian', 0.0028448227889849983), ('Maria Paz', 0.002839393737860981), ('Abril', 0.0028244638472699336), ('Tiziano Benjamin', 0.002808176693897882), ('Thiago Nicolas', 0.002778316912715788), ('Maria Emilia', 0.002756600708219719), ('Thiago Valentin', 0.0027443853431906805), ('Lautaro Ezequiel', 0.0027023101969795476), ('Gonzalo', 0.002681951255264483), ('Zoe', 0.002681951255264483), ('Matilda', 0.002680593992483479), ('Alejo', 0.0026710931530164487), ('Paulina', 0.0026371615834913415), ('Bautista Benjamin', 0.0025543685538500795), ('Camilo', 0.002532652349354011), ('Milo', 0.0025136506704199505), ('Thiago Nahuel', 0.0024892199403618734), ('Octavio', 0.002487862677580869), ('Santiago Benjamin', 0.002441715743026723), ('Fausto', 0.0023928542829105685), ('Sofia Belen', 0.002292416837116251), ('Martín', 0.002288345048773238), ('Maia', 0.002282915997649221), ('Francesco', 0.002280201472087212), ('Sol', 0.0022761296837441993), ('Geronimo', 0.002273415158182191), ('Violeta', 0.0022679861070581736), ('Lourdes', 0.002259842530372148), ('Juan', 0.0022584852675911434), ('Benjamin Ezequiel', 0.002251698953686122), ('Luciana', 0.002242198114219092), ('Micaela', 0.002232697274752062), ('Alma Valentina', 0.002223196435285032), ('Nina', 0.002204194756350972), ('Zoe Valentina', 0.002200122968007959), ('Augusto', 0.0021892648657599245), ('Sara', 0.0021675486612638558), ('Tobias', 0.0021512615078918044), ('Gael', 0.002145832456767787), ('Antonia', 0.002139046142862766), ('Ezequiel', 0.0020956137338706284), ('Milena', 0.0020820411060605854), ('Ludmila', 0.002079326580498577), ('Zoe Jazmin', 0.002052181324878491), ('Miguel Angel', 0.0020467522737544737), ('Luana', 0.0020263933320394095), ('Giuliana', 0.0019938190252953066), ('Maite', 0.0019897472369522938), ('Valentina Jazmin', 0.0019761746091422508), ('Juan Gabriel', 0.0019748173463612463), ('Thiago Leonel', 0.001968031032456225), ('Juan Francisco', 0.001962601981332208), ('Mia Jazmin', 0.001950386616303169), ('Elena', 0.0019463148279601562), ('Ian', 0.0019259558862450919), ('Jazmín', 0.0019232413606830832), ('Alma Mia', 0.0019164550467780617), ('Candela', 0.0019110259956540447), ('Morena Jazmin', 0.001898810630625006), ('Santino Ezequiel', 0.001885238002814963), ('Mateo Ezequiel', 0.0018838807400339587), ('Joaquina', 0.0018703081122239157), ('Tiziana', 0.0018662363238809028), ('Luna', 0.00186216453553789), ('Francisca', 0.001856735484413873), ('Thiago Lionel', 0.001856735484413873), ('Enzo', 0.0018513064332898556), ('Emiliano', 0.0018458773821658386), ('Justina', 0.0018350192799178042), ('Lautaro Nicolas', 0.001829590228793787), ('Antonio', 0.0018105885498597269), ('Angelina', 0.0018092312870787227), ('Tomas Benjamin', 0.0017915868709256668), ('Mateo Agustin', 0.0017848005570206453), ('Uma', 0.0017766569803346196), ('Luciano Benjamin', 0.0017657988780865853), ('Kiara', 0.0017562980386195551), ('Alfonsina', 0.0017467971991525252), ('Tiziano Valentin', 0.0017400108852475037), ('Santino Nicolas', 0.0017345818341234864), ('Alvaro', 0.0017305100457804736), ('Florencia', 0.0017250809946564565), ('Mia Morena', 0.0017169374179704306), ('Luz Maria', 0.0017155801551894264), ('Nahuel', 0.001704722052941392), ('Thiago Emanuel', 0.0017020075273793834), ('Ian Ezequiel', 0.0016965784762553663), ('Uma ', 0.0016870776367883362), ('Santino Gabriel', 0.001685720374007332), ('Bastian', 0.0016843631112263275), ('Alma Jazmin', 0.0016762195345403018), ('Mateo Valentin', 0.0016680759578542761), ('Thiago Gabriel', 0.001666718695073272), ('Carmela', 0.0016653614322922675), ('Gabriel', 0.001649074278920216), ('Dylan', 0.0016409307022341904), ('Alexander', 0.0016341443883291689), ('Isabel', 0.0016287153372051516), ('Paula', 0.0016246435488621387), ('Lucas Benjamin', 0.0016232862860811345), ('Santiago Nicolas', 0.0016069991327090829), ('Maria Luz', 0.0016069991327090829), ('Luisana', 0.0016042846071470742), ('Nahiara Jazmin', 0.001597498293242053), ('Thiago Joaquin', 0.00158392566543201), ('Juan David', 0.0015784966143079927), ('Rosario', 0.001570353037621967), ('Abigail', 0.001556780409811924), ('Santino Agustin', 0.0015540658842499156), ('Maria Guadalupe', 0.001547279570344894), ('Oriana', 0.001547279570344894), ('Benjamin Alejandro', 0.001547279570344894), ('Ivan', 0.0015255633658488254), ('Maximiliano', 0.0015255633658488254), ('Gino', 0.0015187770519438039), ('Rafael', 0.0015092762124767737), ('Thiago Daniel', 0.0015065616869147653), ('Luisina', 0.0014984181102287394), ('Ciro Benjamin', 0.001495703584666731), ('Lucía ', 0.0014943463218857265), ('Nahiara', 0.0014712728546086536), ('León', 0.001468558329046645), ('Faustino', 0.001468558329046645), ('Emanuel', 0.001468558329046645), ('Renzo', 0.0014468421245505763), ('Martin', 0.0014441275989885679), ('Candelaria', 0.0014427703362075634), ('Maria Belen', 0.0014278404456165162), ('Ema', 0.0014156250805874777), ('Giovanni', 0.001412910555025469), ('Lautaro Gabriel', 0.0014047669783394433), ('Lautaro Nahuel', 0.0013966234016534176), ('Dylan Benjamin', 0.001393908876091409), ('Lucas Ezequiel', 0.0013871225621863875), ('Charo', 0.0013816935110623704), ('Constantino', 0.0013816935110623704), ('Juan Sebastian', 0.001374907197157349), ('Dylan Ezequiel', 0.001374907197157349), ('Samuel', 0.0013735499343763445), ('Priscila', 0.0013694781460333316), ('Jeronimo', 0.0013681208832523274), ('Máximo', 0.0013654063576903188), ('Mateo Joaquin', 0.0013586200437852973), ('Angel Gabriel', 0.0013559055182232886)])
A:faker.providers.person.es_AR.__init__.last_names->OrderedDict([('Gonzalez', 0.04854693696239391), ('Rodriguez', 0.0405541623163279), ('Gomez', 0.03682803729477576), ('Fernandez', 0.034483269554972315), ('Lopez', 0.03332903288377172), ('Diaz', 0.029734390864767524), ('Martinez', 0.02856301725128834), ('Perez', 0.024756520718787717), ('Garcia', 0.023949363254085327), ('Sanchez', 0.02305996343320753), ('Romero', 0.0221616583890496), ('Sosa', 0.01620443818368168), ('Torres', 0.014441203974214065), ('Alvarez', 0.014438584790896377), ('Ruiz', 0.014034781557117952), ('Ramirez', 0.01340602789325466), ('Flores', 0.012397043645472136), ('Benitez', 0.012046821418992701), ('Acosta', 0.011839007931186422), ('Medina', 0.01163845332286059), ('Herrera', 0.011188178293645473), ('Suarez', 0.011025040589858042), ('Aguirre', 0.010925586457594973), ('Gimenez', 0.010804056351654247), ('Gutierrez', 0.010736780757294201), ('Pereyra', 0.010597290537175041), ('Rojas', 0.010483168978332917), ('Molina', 0.01020605938332152), ('Castro', 0.00982904665319259), ('Ortiz', 0.009338660702312304), ('Silva', 0.00916369925669074), ('Nuñez', 0.008963294315983064), ('Luna', 0.00893530647138834), ('Juarez', 0.008729588330236212), ('Cabrera', 0.008523720521465928), ('Rios', 0.008519903997203012), ('Morales', 0.008325410927412402), ('Godoy', 0.008276918619130635), ('Moreno', 0.008114903422479358), ('Ferreyra', 0.008084969898848637), ('Dominguez', 0.008067383953715588), ('Carrizo', 0.007802771604820016), ('Peralta', 0.007790424026322343), ('Castillo', 0.007746346912776107), ('Ledesma', 0.007626537984444146), ('Quiroga', 0.007620027443054464), ('Vega', 0.007410866946684802), ('Vera', 0.007169303410984885), ('Muñoz', 0.006990675108718558), ('Ojeda', 0.006979075868311654), ('Ponce', 0.006857321260943696), ('Villalba', 0.006694632560010729), ('Cardozo', 0.0066311734899136), ('Navarro', 0.006361322774382651), ('Coronel', 0.006334158101687771), ('Vazquez', 0.006315225147991341), ('Ramos', 0.006305122583765973), ('Vargas', 0.006255058765493592), ('Caceres', 0.006177755440717255), ('Arias', 0.006152461613249296), ('Figueroa', 0.006118038061073967), ('Cordoba', 0.005941954108316251), ('Correa', 0.00593237538075442), ('Maldonado', 0.005926388676028276), ('Paz', 0.005885679083890496), ('Rivero', 0.005804409567233089), ('Miranda', 0.005788769301136037), ('Mansilla', 0.005749556385179793), ('Farias', 0.005590833876127895), ('Roldan', 0.005557981833943179), ('Mendez', 0.005512632545642637), ('Guzman', 0.005438771576083833), ('Aguero', 0.005383170055939769), ('Hernandez', 0.005325323521523401), ('Lucero', 0.005317316303952183), ('Cruz', 0.0052402374806030765), ('Paez', 0.005229985248759555), ('Escobar', 0.005203494080346367), ('Mendoza', 0.005196085533247763), ('Barrios', 0.005190098828521619), ('Bustos', 0.005104264449510527), ('Avila', 0.005051132445065998), ('Ayala', 0.004944419433322477), ('Blanco', 0.004939405568114332), ('Soria', 0.004921220952508669), ('Maidana', 0.004808296734611774), ('Acuña', 0.0048020855284584), ('Leiva', 0.004789363780915343), ('Duarte', 0.004590380682580126), ('Moyano', 0.004529840131036993), ('Campos', 0.004521832913465775), ('Soto', 0.0044916000545987475), ('Martin', 0.004448271279143279), ('Valdez', 0.004368049435812946), ('Bravo', 0.004366403092013257), ('Chavez', 0.004326142502729937), ('Velazquez', 0.004323448485603173), ('Olivera', 0.004298079824326137), ('Toledo', 0.00428865076438246), ('Franco', 0.004282065389183701)])
faker.providers.person.es_AR.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/fr_FR/__init__.py----------------------------------------
faker.providers.person.fr_FR.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/en_PK/__init__.py----------------------------------------
faker.providers.person.en_PK.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/en_GB/__init__.py----------------------------------------
A:faker.providers.person.en_GB.__init__.last_names->OrderedDict((('Savage', 0.04), ('Winter', 0.03), ('Metcalfe', 0.03), ('Harper', 0.06), ('Burgess', 0.06), ('Bailey', 0.15), ('Potts', 0.03), ('Boyle', 0.03), ('Brown', 0.51), ('Jennings', 0.05), ('Payne', 0.09), ('Day', 0.09), ('Holland', 0.07), ('Higgins', 0.05), ('Rhodes', 0.04), ('Hancock', 0.04), ('Howells', 0.03), ('Fowler', 0.04), ('Sims', 0.03), ('Thomas', 0.35), ('Parker', 0.17), ('Bentley', 0.04), ('Barnett', 0.05), ('Manning', 0.03), ('Collier', 0.03), ('Holloway', 0.03), ('Hartley', 0.04), ('George', 0.05), ('Tomlinson', 0.04), ('Howard', 0.09), ('Long', 0.06), ('Farmer', 0.03), ('Collins', 0.15), ('Rice', 0.03), ('Townsend', 0.04), ('Rees', 0.07), ('Bruce', 0.03), ('Hammond', 0.05), ('Ford', 0.09), ('Tucker', 0.05), ('Wallis', 0.03), ('Hamilton', 0.06), ('Ferguson', 0.04), ('Hooper', 0.03), ('Francis', 0.07), ('Reeves', 0.04), ('Barlow', 0.04), ('Short', 0.04), ('Cunningham', 0.05), ('Hopkins', 0.06), ('Nicholson', 0.06), ('Archer', 0.04), ('Green', 0.25), ('Glover', 0.04), ('Gibson', 0.09), ('Spencer', 0.08), ('Warner', 0.04), ('Webb', 0.12), ('Whitehouse', 0.03), ('Dean', 0.06), ('Griffiths', 0.16), ('Clark', 0.2), ('Hardy', 0.05), ('Iqbal', 0.03), ('Baldwin', 0.04), ("O'Neill", 0.06), ('Blake', 0.05), ('Lees', 0.03), ('Harvey', 0.1), ('Clarke', 0.24), ('Daniels', 0.04), ('Browne', 0.03), ('Macdonald', 0.04), ('Kirk', 0.04), ('Khan', 0.14), ('Davidson', 0.05), ('Dale', 0.04), ('Sanders', 0.04), ('Wilkins', 0.04), ('Connor', 0.03), ('Daly', 0.03), ('Lane', 0.06), ('Kennedy', 0.06), ('Bray', 0.03), ('Burrows', 0.04), ('Hayes', 0.07), ('Wyatt', 0.03), ('Gould', 0.03), ('Dyer', 0.03), ('Nash', 0.05), ('Bryan', 0.03), ('Pope', 0.03), ('Fraser', 0.04), ('Steele', 0.03), ('Walsh', 0.09), ('Wade', 0.04), ('Marsden', 0.03), ('Humphries', 0.03), ("O'Brien", 0.08), ('Thompson', 0.28), ('Lord', 0.03), ('Coleman', 0.06), ('Jarvis', 0.04), ('Noble', 0.03), ('Williamson', 0.06), ('Carpenter', 0.03), ('Gardner', 0.06), ('Farrell', 0.04), ('Clayton', 0.05), ('Akhtar', 0.05), ('Gallagher', 0.05), ('Skinner', 0.04), ('Birch', 0.04), ('Kay', 0.04), ('Barrett', 0.07), ('Bates', 0.06), ('Lucas', 0.04), ("O'Connor", 0.06), ('Chamberlain', 0.03), ('Chapman', 0.12), ('Ryan', 0.08), ('Thorpe', 0.04), ('Lawson', 0.04), ('Howell', 0.04), ('Martin', 0.23), ('Kelly', 0.16), ('Dobson', 0.04), ('Stevens', 0.1), ('Brennan', 0.04), ('Lloyd', 0.11), ('Quinn', 0.05), ('Morton', 0.04), ('Wilson', 0.35), ('Barnes', 0.11), ('Henry', 0.03), ('Smith', 1.15), ('Pritchard', 0.05), ('Phillips', 0.18), ('Dixon', 0.1), ('Sharpe', 0.03), ('Robertson', 0.07), ('White', 0.27), ('Bird', 0.06), ('Abbott', 0.04), ('Kirby', 0.04), ('Hussain', 0.11), ('Barber', 0.05), ('Harris', 0.25), ('Doyle', 0.05), ('Jordan', 0.05), ('Burns', 0.06), ('Hodgson', 0.06), ('Atkins', 0.04), ('Stokes', 0.05), ('Rogers', 0.12), ('Parkes', 0.03), ('Brookes', 0.04), ('Herbert', 0.03), ('Gordon', 0.05), ('Kemp', 0.05), ('Webster', 0.07), ('Sinclair', 0.03), ('McLean', 0.03), ('Saunders', 0.09), ('Stephens', 0.05), ('Newton', 0.07), ('Potter', 0.05), ('Storey', 0.03), ('Stanley', 0.04), ('Turnbull', 0.03), ('Duncan', 0.03), ('Rose', 0.08), ('Mills', 0.11), ('Sheppard', 0.03), ('Butcher', 0.03), ('Fry', 0.03), ('Ross', 0.06), ('Shepherd', 0.06), ('Goodwin', 0.05), ('Holt', 0.05), ('Haynes', 0.04), ('Cook', 0.15), ('Ward', 0.21), ('Godfrey', 0.03), ('Stone', 0.07), ('Dodd', 0.04), ('Parsons', 0.07), ('Ingram', 0.03), ('Nixon', 0.03), ('Evans', 0.39), ('Hargreaves', 0.03), ('Owen', 0.11), ('Chan', 0.03), ('Connolly', 0.03), ('Charlton', 0.03), ('Middleton', 0.04), ('Hyde', 0.03), ('Patel', 0.24), ('Owens', 0.03), ('Lamb', 0.04), ('Palmer', 0.11), ('Cooper', 0.22), ('McCarthy', 0.06), ('Black', 0.04), ('Dickinson', 0.04), ('Gilbert', 0.05), ('Leach', 0.03), ('North', 0.03), ('Byrne', 0.06), ('Frost', 0.05), ('Simmons', 0.04), ('Matthews', 0.11), ('Alexander', 0.04), ('Ahmed', 0.1), ('Gibbons', 0.03), ('Stevenson', 0.05), ('Rowley', 0.03), ('Miles', 0.05), ('Hanson', 0.03), ('Bolton', 0.03), ('Craig', 0.03), ('Ali', 0.12), ('Carroll', 0.04), ('Allan', 0.03), ('Sanderson', 0.03), ('Fletcher', 0.1), ('Burton', 0.08), ('Oliver', 0.07), ('Davison', 0.04), ('Douglas', 0.04), ('Field', 0.04), ('Pickering', 0.03), ('Pugh', 0.04), ('Rowe', 0.05), ('Mahmood', 0.03), ('Sykes', 0.03), ('Crawford', 0.03), ('Williams', 0.66), ('Parkin', 0.03), ('Patterson', 0.04), ('Power', 0.03), ('Price', 0.17), ('Murphy', 0.14), ('Hale', 0.03), ('Nicholls', 0.06), ('Hall', 0.25), ('Jones', 0.94), ('Hughes', 0.26), ('Stephenson', 0.05), ('Morley', 0.04), ('Knight', 0.11), ('Kerr', 0.03), ('Heath', 0.04), ('Pollard', 0.03), ('Lowe', 0.07), ("O'Sullivan", 0.04), ('Buckley', 0.05), ('Bond', 0.05), ('Dennis', 0.03), ('Lewis', 0.25), ('Weston', 0.04), ('Joyce', 0.03), ('Reynolds', 0.09), ('Bishop', 0.06), ('Norris', 0.04), ('Barry', 0.03), ('Whittaker', 0.04), ('Carey', 0.03), ('Hill', 0.22), ('Kent', 0.04), ('Ashton', 0.04), ('Wilkinson', 0.13), ('Powell', 0.12), ('Henderson', 0.06), ('Freeman', 0.06), ('Dunn', 0.07), ('Kaur', 0.09), ('French', 0.04), ('Parry', 0.06), ('Walton', 0.06), ('Fisher', 0.1), ('Naylor', 0.03), ('Duffy', 0.04), ('Humphreys', 0.04), ('Randall', 0.03), ('Bevan', 0.03), ('Doherty', 0.03), ('Moore', 0.21), ('Armstrong', 0.07), ('Sullivan', 0.05), ('Swift', 0.03), ('Pearce', 0.09), ('Tyler', 0.03), ('Bradshaw', 0.04), ('Allen', 0.19), ('Mellor', 0.03), ('Whitehead', 0.05), ('Jackson', 0.24), ('Grant', 0.07), ('Fox', 0.09), ('Wright', 0.28), ('Anderson', 0.13), ('Foster', 0.13), ('Gibbs', 0.04), ('Butler', 0.11), ('Jenkins', 0.1), ('John', 0.04), ('Morrison', 0.04), ('Talbot', 0.03), ('Blackburn', 0.03), ('Osborne', 0.05), ('Flynn', 0.04), ('Richards', 0.14), ('Hurst', 0.03), ('Bibi', 0.05), ('Houghton', 0.03), ('Johnson', 0.34), ('Yates', 0.06), ('Mistry', 0.03), ('Donnelly', 0.03), ('Parkinson', 0.04), ('Thomson', 0.05), ('Woods', 0.07), ('Todd', 0.04), ('Dawson', 0.08), ('Hart', 0.07), ('Graham', 0.1), ('Berry', 0.07), ('Willis', 0.05), ('Miah', 0.04), ('Brooks', 0.09), ('Horton', 0.03), ('Riley', 0.07), ('Lambert', 0.05), ('Waters', 0.04), ('Lynch', 0.05), ('Moss', 0.06), ('Slater', 0.05), ('Knowles', 0.04), ('Benson', 0.03), ('Adams', 0.13), ('King', 0.2), ('Davies', 0.48), ('Richardson', 0.15), ('Vincent', 0.03), ('Holmes', 0.11), ('Conway', 0.03), ('Marshall', 0.14), ('Faulkner', 0.03), ('Garner', 0.03), ('Booth', 0.08), ('Harrison', 0.2), ('Campbell', 0.11), ('Cole', 0.08), ('Goddard', 0.04), ('Walters', 0.05), ('Ellis', 0.13), ('Edwards', 0.27), ('Peters', 0.04), ('Atkinson', 0.08), ('Wood', 0.24), ('Briggs', 0.04), ('Elliott', 0.09), ('Chandler', 0.03), ('Hope', 0.03), ('Hunter', 0.07), ('Newman', 0.07), ('Pratt', 0.03), ('Rahman', 0.03), ('Hicks', 0.04), ('Cox', 0.14), ('Reid', 0.07), ('Morris', 0.21), ('Banks', 0.04), ('Myers', 0.03), ('Mitchell', 0.16), ('Davey', 0.04), ('Peacock', 0.03), ('Reed', 0.07), ('Carter', 0.15), ('Miller', 0.14), ('Perkins', 0.04), ('Read', 0.05), ('Hilton', 0.03), ('Moran', 0.03), ('Welch', 0.03), ('Vaughan', 0.04), ('Clements', 0.03), ('Griffin', 0.05), ('Russell', 0.1), ("O'Donnell", 0.03), ('Hobbs', 0.03), ('Marsh', 0.07), ('Porter', 0.07), ('Gill', 0.08), ('Leonard', 0.03), ('McKenzie', 0.03), ('Thornton', 0.04), ('Fitzgerald', 0.03), ('Greenwood', 0.05), ('Pearson', 0.1), ('James', 0.19), ('Coles', 0.03), ('Roberts', 0.33), ('Nelson', 0.05), ('Forster', 0.03), ('Gough', 0.03), ('Mann', 0.05), ('Law', 0.03), ('Barker', 0.1), ('Cartwright', 0.04), ('Bradley', 0.08), ('Sharp', 0.05), ('Warren', 0.06), ('Summers', 0.03), ('Little', 0.04), ('Perry', 0.08), ('Fuller', 0.04), ('West', 0.09), ('Mason', 0.12), ('Finch', 0.03), ('Norton', 0.03), ('Burke', 0.05), ('Holden', 0.04), ('Lee', 0.2), ('Smart', 0.04), ('Bull', 0.04), ('Bryant', 0.04), ('Gray', 0.12), ('Watts', 0.08), ('Brady', 0.03), ('Baker', 0.2), ('Barton', 0.05), ('Davis', 0.17), ('Baxter', 0.05), ('Taylor', 0.53), ('Carr', 0.07), ('Wong', 0.04), ('Cameron', 0.03), ('Gardiner', 0.03), ('Hawkins', 0.07), ('Shaw', 0.15), ('Wallace', 0.05), ('Young', 0.16), ('Shah', 0.06), ('Gregory', 0.07), ('Ball', 0.08), ('Norman', 0.04), ('Lawrence', 0.09), ('Bowen', 0.04), ('Wheeler', 0.05), ('Bartlett', 0.04), ('Sutton', 0.06), ('Lyons', 0.03), ('Hutchinson', 0.05), ('Poole', 0.05), ('Cooke', 0.06), ('Franklin', 0.03), ('Howe', 0.04), ('Walker', 0.27), ('Johnston', 0.05), ('Austin', 0.05), ('Chadwick', 0.03), ('Bell', 0.15), ('Wall', 0.04), ('Woodward', 0.05), ('Preston', 0.04), ('Bennett', 0.16), ('Murray', 0.1), ('Begum', 0.13), ('McDonald', 0.06), ('Hudson', 0.07), ('Cross', 0.06), ('Singh', 0.13), ('Howarth', 0.03), ('Hewitt', 0.05), ('Curtis', 0.06), ('Harding', 0.07), ('May', 0.05), ('Wells', 0.07), ('Giles', 0.03), ('Watson', 0.17), ('Nolan', 0.03), ('Andrews', 0.09), ('Hayward', 0.04), ('Schofield', 0.04), ('Hunt', 0.12), ('Robson', 0.06), ('Arnold', 0.05), ('Morgan', 0.19), ('Coates', 0.03), ('Page', 0.07), ('Simpson', 0.13), ('Stewart', 0.09), ('Robinson', 0.29), ('Fleming', 0.03), ('Scott', 0.18), ('Chambers', 0.06), ('Turner', 0.23), ('Watkins', 0.06)))
faker.providers.person.en_GB.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/ar_PS/__init__.py----------------------------------------
faker.providers.person.ar_PS.__init__.Provider(ArabicPersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/bn_BD/__init__.py----------------------------------------
faker.providers.person.bn_BD.__init__.Provider(PersonProvider)
faker.providers.person.bn_BD.__init__.Provider.first_name_female_common(self)->str
faker.providers.person.bn_BD.__init__.Provider.first_name_female_hinduism(self)->str
faker.providers.person.bn_BD.__init__.Provider.first_name_female_islamic(self)->str
faker.providers.person.bn_BD.__init__.Provider.first_name_male_common(self)->str
faker.providers.person.bn_BD.__init__.Provider.first_name_male_hinduism(self)->str
faker.providers.person.bn_BD.__init__.Provider.first_name_male_islamic(self)->str
faker.providers.person.bn_BD.__init__.Provider.last_name_common(self)->str
faker.providers.person.bn_BD.__init__.Provider.last_name_female_islamic(self)->str
faker.providers.person.bn_BD.__init__.Provider.last_name_hinduism(self)->str
faker.providers.person.bn_BD.__init__.Provider.last_name_islamic(self)->str
faker.providers.person.bn_BD.__init__.translate_to_bengali_digits(en_digit:str='0')->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/ta_IN/__init__.py----------------------------------------
faker.providers.person.ta_IN.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/ja_JP/__init__.py----------------------------------------
A:faker.providers.person.ja_JP.__init__.first_names_female->tuple(map(itemgetter(0), first_name_female_pairs))
A:faker.providers.person.ja_JP.__init__.first_kana_names_female->tuple(map(itemgetter(1), first_name_female_pairs))
A:faker.providers.person.ja_JP.__init__.first_romanized_names_female->tuple(map(itemgetter(2), first_name_female_pairs))
A:faker.providers.person.ja_JP.__init__.first_names_male->tuple(map(itemgetter(0), first_name_male_pairs))
A:faker.providers.person.ja_JP.__init__.first_kana_names_male->tuple(map(itemgetter(1), first_name_male_pairs))
A:faker.providers.person.ja_JP.__init__.first_romanized_names_male->tuple(map(itemgetter(2), first_name_male_pairs))
A:faker.providers.person.ja_JP.__init__.last_name_pairs->OrderedDict(((('佐藤', 'サトウ', 'Sato'), 366803.0), (('鈴木', 'スズキ', 'Suzuki'), 321135), (('高橋', 'タカハシ', 'Takahashi'), 266782), (('田中', 'タナカ', 'Tanaka'), 245821), (('伊藤', 'イトウ', 'Ito'), 203357), (('渡辺', 'ワタナベ', 'Watanabe'), 200504), (('山本', 'ヤマモト', 'Yamamoto'), 200134), (('中村', 'ナカムラ', 'Nakamura'), 195219), (('小林', 'コバヤシ', 'Kobayashi'), 191819), (('加藤', 'カトウ', 'Kato'), 160283), (('吉田', 'ヨシダ', 'Yoshida'), 154461), (('山田', 'ヤマダ', 'Yamada'), 151675), (('佐々木', 'ササキ', 'Sasaki'), 135927), (('山口', 'ヤマグチ', 'Yamaguchi'), 119501), (('松本', 'マツモト', 'Matsumoto'), 116490), (('井上', 'イノウエ', 'Inoue'), 111287), (('木村', 'キムラ', 'Kimura'), 107446), (('林', 'ハヤシ', 'Hayashi'), 101826), (('斎藤', 'サイトウ', 'Saito'), 101774), (('清水', 'シミズ', 'Shimizu'), 97826), (('山崎', 'ヤマザキ', 'Yamazaki'), 90781), (('阿部', 'アベ', 'Abe'), 86833), (('森', 'モリ', 'Mori'), 86507), (('池田', 'イケダ', 'Ikeda'), 84860), (('橋本', 'ハシモト', 'Hashimoto'), 82836), (('山下', 'ヤマシタ', 'Yamashita'), 80588), (('石川', 'イシカワ', 'Ishikawa'), 77471), (('中島', 'ナカジマ', 'Nakajima'), 74106), (('前田', 'マエダ', 'Maeda'), 72930), (('藤田', 'フジタ', 'Fujita'), 72375), (('後藤', 'ゴトウ', 'Goto'), 71629), (('小川', 'オガワ', 'Ogawa'), 71179), (('岡田', 'オカダ', 'Okada'), 70347), (('長谷川', 'ハセガワ', 'Hasegawa'), 69201), (('村上', 'ムラカミ', 'Murakami'), 68606), (('近藤', 'コンドウ', 'Kondo'), 68297), (('石井', 'イシイ', 'Ishii'), 67079), (('遠藤', 'エンドウ', 'Endo'), 62620), (('斉藤', 'サイトウ', 'Saito'), 62540), (('坂本', 'サカモト', 'Sakamoto'), 62308), (('青木', 'アオキ', 'Aoki'), 59516), (('藤井', 'フジイ', 'Fujii'), 59204), (('西村', 'ニシムラ', 'Nishimura'), 58821), (('福田', 'フクダ', 'Fukuda'), 58714), (('太田', 'オオタ', 'Ota'), 58439), (('三浦', 'ミウラ', 'Miura'), 58006), (('藤原', 'フジワラ', 'Fujiwara'), 57742), (('松田', 'マツダ', 'Matsuda'), 55883), (('岡本', 'オカモト', 'Okamoto'), 55539), (('中川', 'ナカガワ', 'Nakagawa'), 55221)))
A:faker.providers.person.ja_JP.__init__.last_names->tuple(map(itemgetter(0), last_name_pairs))
A:faker.providers.person.ja_JP.__init__.last_kana_names->tuple(map(itemgetter(1), last_name_pairs))
A:faker.providers.person.ja_JP.__init__.last_romanized_names->tuple(map(itemgetter(2), last_name_pairs))
faker.providers.person.ja_JP.__init__.Provider(PersonProvider)
faker.providers.person.ja_JP.__init__.Provider.first_kana_name(self)->str
faker.providers.person.ja_JP.__init__.Provider.first_kana_name_female(self)->str
faker.providers.person.ja_JP.__init__.Provider.first_kana_name_male(self)->str
faker.providers.person.ja_JP.__init__.Provider.first_name(self)->str
faker.providers.person.ja_JP.__init__.Provider.first_name_female(self)->str
faker.providers.person.ja_JP.__init__.Provider.first_name_female_pair(self)->Tuple[str, str, str]
faker.providers.person.ja_JP.__init__.Provider.first_name_male(self)->str
faker.providers.person.ja_JP.__init__.Provider.first_name_male_pair(self)->Tuple[str, str, str]
faker.providers.person.ja_JP.__init__.Provider.first_name_pair(self)->Tuple[str, str, str]
faker.providers.person.ja_JP.__init__.Provider.first_romanized_name(self)->str
faker.providers.person.ja_JP.__init__.Provider.first_romanized_name_female(self)->str
faker.providers.person.ja_JP.__init__.Provider.first_romanized_name_male(self)->str
faker.providers.person.ja_JP.__init__.Provider.kana_name(self)->str
faker.providers.person.ja_JP.__init__.Provider.kana_name_female(self)->str
faker.providers.person.ja_JP.__init__.Provider.kana_name_male(self)->str
faker.providers.person.ja_JP.__init__.Provider.last_kana_name(self)->str
faker.providers.person.ja_JP.__init__.Provider.last_name(self)->str
faker.providers.person.ja_JP.__init__.Provider.last_name_pair(self)->Tuple[str, str, str]
faker.providers.person.ja_JP.__init__.Provider.last_romanized_name(self)->str
faker.providers.person.ja_JP.__init__.Provider.romanized_name(self)->str
faker.providers.person.ja_JP.__init__.Provider.romanized_name_female(self)->str
faker.providers.person.ja_JP.__init__.Provider.romanized_name_male(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/he_IL/__init__.py----------------------------------------
A:faker.providers.person.he_IL.__init__.formats_female->OrderedDict((('{{first_name_female}} {{last_name}}', 0.9), ('{{first_name_female}} {{last_name}}-{{last_name}}', 0.06), ('{{first_name_female}} {{first_name_female}} {{last_name}}', 0.04)))
A:faker.providers.person.he_IL.__init__.formats_male->OrderedDict((('{{first_name_male}} {{last_name}}', 0.95), ('{{first_name_male}} {{last_name}}-{{last_name}}', 0.025), ('{{first_name_male}} {{first_name_male}} {{last_name}}', 0.025)))
A:faker.providers.person.he_IL.__init__.formats->OrderedDict((('{{first_name_male}} {{last_name}}', 0.95), ('{{first_name_male}} {{last_name}}-{{last_name}}', 0.025), ('{{first_name_male}} {{first_name_male}} {{last_name}}', 0.025))).copy()
A:faker.providers.person.he_IL.__init__.first_names_female->OrderedDict((('אביב', 0.002782860042127), ('אביגיל', 0.017542780707554), ('אביה', 0.00339785673652), ('אביטל', 0.002644485785889), ('אבישג', 0.005288971571778), ('אגם', 0.0085330791347), ('אדוה', 0.001030119463108), ('אדל', 0.016512661244446), ('אדר', 0.000968619793669), ('אהובה', 0.000737996033271), ('אודיה', 0.000799495702711), ('אודל', 0.003059608554604), ('אודליה', 0.000999369628388), ('אווה', 0.00081487062007), ('אופיר', 0.004535600621147), ('אופל', 0.000568871942313), ('אופק', 0.000476622438154), ('אור', 0.004643225042665), ('אוראל', 0.000538122107594), ('אורה', 0.000784120785351), ('אורטל', 0.000322873264556), ('אורי', 0.004858473885703), ('אוריאן', 0.002198613182454), ('אוריה', 0.005688719423133), ('אורין', 0.002890484463646), ('אורן', 0.000461247520795), ('אושר', 0.000737996033271), ('אחינועם', 0.000999369628388), ('איה', 0.001091619132547), ('איה', 0.002936609215725), ('איטה', 0.000538122107594), ('איידל', 0.000307498347196), ('איילה', 0.015959164219492), ('איילת', 0.001506741901262), ('איימי', 0.000676496363832), ('אילין', 0.000153749173598), ('אילין', 0.001921864669977), ('אילת', 0.000461247520795), ('אימאן', 0.001030119463108), ('אלה', 0.009809197275565), ('אלומה', 0.000445872603435), ('אלונה', 0.002029489091496), ('אלטע', 0.000415122768715), ('אלי', 0.000799495702711), ('אליאן', 0.0017219907443), ('אליאנה', 0.000368998016636), ('אליה', 0.004443351116988), ('אלין', 0.000122999338879), ('אלין', 0.000538122107594), ('אלין', 0.003290232315001), ('אלין', 0.003982103596193), ('אלינור', 0.001030119463108), ('אליס', 0.000430497686075), ('אליסה', 0.000399747851355), ('אליענה', 0.00081487062007), ('אלישבע', 0.005319721406497), ('אלכס', 0.00086099537215), ('אלמא', 0.001106994049907), ('אלמה', 0.0033671069018), ('אלמוג', 0.00086099537215), ('אמה', 0.007748958349349), ('אמונה', 0.001199243554066), ('אמור', 0.000322873264556), ('אמי', 0.000538122107594), ('אמילי', 0.000153749173598), ('אמילי', 0.005873218431451), ('אמיליה', 0.00084562045479), ('אמל', 0.001967989422057), ('אמלי', 0.000737996033271), ('אן', 0.000661121446472), ('אנאבל', 0.000522747190234), ('אנאל', 0.00338248181916), ('אנה', 0.001229993388786), ('אסיל', 0.000169124090958), ('אסיל', 0.002075613843576), ('אסנת', 0.000322873264556), ('אסתר', 0.010639442812995), ('אפרת', 0.007041712150797), ('ארבל', 0.002213988099814), ('אריאל', 0.008287080456943), ('בארי', 0.000322873264556), ('ביאן', 0.001229993388786), ('בילא', 0.000784120785351), ('ביסאן', 0.002629110868529), ('בלומה', 0.001030119463108), ('בר', 0.002336987438693), ('ברכה', 0.002613735951169), ('בת', 0.001568241570702), ('בתיה', 0.002290862686613), ('בת שבע', 0.003259482480282), ('גאיה', 0.006672714134162), ("ג'ואל", 0.000138374256238), ("ג'וד", 0.001076244215187), ("ג'ויל", 0.000122999338879), ('גולדה', 0.000707246198552), ("ג'ולי", 0.000184499008318), ("ג'ולין", 0.000138374256238), ('גוני', 0.000368998016636), ("ג'ורי", 0.000138374256238), ('גורי', 0.00255223628173), ("ג'ורי", 0.002598361033809), ('גזל', 0.001752740579019), ('גיטל', 0.001368367645024), ('גיל', 0.000707246198552), ('גילה', 0.000691871281192), ('גילי', 0.003259482480282), ('גל', 0.001537491735982), ('גלי', 0.002967359050445), ('גליה', 0.00084562045479), ("ג'נא", 0.005688719423133), ('גפן', 0.00424347719131), ('דבורה', 0.00425885210867), ('דור', 0.000430497686075), ('דורון', 0.000722621115912), ('דורין', 0.000384372933995), ('דימא', 0.001337617810304), ('דינה', 0.00084562045479), ('דנה', 0.000753370950631), ('דני', 0.000445872603435), ('דניאל', 0.00427422702603), ('דניאלה', 0.003213357728202), ('דפנה', 0.000753370950631), ('דרור', 0.000491997355514), ('דריה', 0.001752740579019), ('הדס', 0.004950723389862), ('הדסה', 0.004643225042665), ('הדר', 0.005596469918974), ('הודיה', 0.009855322027644), ('היילי', 0.000322873264556), ('הילה', 0.007795083101428), ('הילי', 0.002798234959487), ('הינדא', 0.000584246859673), ('הלל', 0.006349840869605), ('הללי', 0.002029489091496), ('הניה', 0.000338248181916), ('הענא', 0.000384372933995), ('זהבה', 0.000522747190234), ('זואי', 0.001076244215187), ('זוהר', 0.003028858719884), ('זיו', 0.001645116157501), ('זינב', 0.0017219907443), ('זינה', 0.002998108885165), ('חגית', 0.000322873264556), ('חוה', 0.002090988760935), ('חיה', 0.008948201903415), ('חלא', 0.000261373595117), ('חלא', 0.003305607232361), ('חן', 0.001091619132547), ('חנה', 0.011577312771944), ('טובה', 0.001322242892944), ('טוהר', 0.005473470580096), ('טל', 0.001937239587337), ('טלי', 0.000599621777033), ('טליה', 0.016620285665965), ('יארא', 0.000169124090958), ('יהב', 0.001091619132547), ('יהודית', 0.004966098307222), ('יהל', 0.001337617810304), ('יהלי', 0.005734844175213), ('יובל', 0.009701572854046), ('יוטא', 0.000538122107594), ('יוכבד', 0.001276118140865), ('יולי', 0.002429236942851), ('ים', 0.000553497024953), ('יסכה', 0.001491366983902), ('יסמין', 0.000261373595117), ('יסמין', 0.001076244215187), ('יסמין', 0.003090358389324), ('יעל', 0.015713165541735), ('יעלה', 0.001291493058225), ('יערה', 0.002890484463646), ('יפה', 0.000691871281192), ('ירדן', 0.004105102935072), ('ירין', 0.000599621777033), ('כליל', 0.000399747851355), ('כנרת', 0.000368998016636), ('כרמל', 0.002752110207408), ('לאה', 0.005903968266171), ('לארא', 0.000122999338879), ('לוטם', 0.00084562045479), ('לור', 0.000122999338879), ('לורן', 0.001337617810304), ('לי', 0.000691871281192), ('ליאה', 0.000953244876309), ('ליאור', 0.002921234298366), ('ליאורה', 0.000538122107594), ('ליאל', 0.004489475869067), ('ליאם', 0.001475992066543), ('ליאן', 0.000169124090958), ('ליאן', 0.000384372933995), ('ליאן', 0.004889223720423), ('ליאן', 0.007010962316078), ('ליב', 0.000322873264556), ('ליבא', 0.00087637028951), ('ליבי', 0.004520225703787), ('ליה', 0.011285189342107), ('ליהי', 0.00167586599222), ('ליהיא', 0.001199243554066), ('ליטל', 0.000445872603435), ('לייה', 0.000907120124229), ('לילי', 0.000983994711028), ('לילך', 0.000476622438154), ('לין', 0.000153749173598), ('לין', 0.000384372933995), ('לין', 0.000691871281192), ('לין', 0.005427345828016), ('לינוי', 0.002075613843576), ('ליעד', 0.000368998016636), ('לירון', 0.000799495702711), ('לירז', 0.000553497024953), ('לירי', 0.001076244215187), ('למאר', 0.001491366983902), ('לנא', 0.000138374256238), ('לנא', 0.001245368306145), ('לני', 0.001429867314463), ('מאור', 0.00081487062007), ('מאורי', 0.000353623099276), ('מאי', 0.003459356405959), ('מאיה', 0.000153749173598), ('מאיה', 0.000245998677757), ('מאיה', 0.017588905459633), ('מור', 0.000522747190234), ('מוריה', 0.00428960194339), ('מיאל', 0.000599621777033), ('מיאר', 0.001383742562384), ('מיטל', 0.000430497686075), ('מייה', 0.000676496363832), ('מיכאלה', 0.0017219907443), ('מיכל', 0.010870066573392), ('מילא', 0.000169124090958), ('מילא', 0.000322873264556), ('מילה', 0.001245368306145), ('מילי', 0.000522747190234), ('מיקה', 0.004996848141941), ('מירא', 0.000138374256238), ('מירא', 0.00173736566166), ('מיראל', 0.000184499008318), ('מיראל', 0.000184499008318), ('מיראל', 0.001506741901262), ('מיריל', 0.000153749173598), ('מישל', 0.000937869958949), ('מיתר', 0.000676496363832), ('מלאק', 0.000169124090958), ('מלאק', 0.000169124090958), ('מלאק', 0.003874479174674), ('מלכה', 0.00513522239818), ('מנוחה', 0.000415122768715), ('מנור', 0.000645746529112), ('מעיין', 0.006503590043204), ('מרגלית', 0.000430497686075), ('מריה', 0.000399747851355), ('מריה', 0.001875739917898), ('מרים', 0.000184499008318), ('מרים', 0.007379960332713), ('מרים', 0.009424824341569), ('משי', 0.000707246198552), ('נאוה', 0.000399747851355), ('נאי', 0.000322873264556), ('נאי', 0.001183868636706), ('נאיא', 0.000184499008318), ('נאיא', 0.001475992066543), ('נאיה', 0.000169124090958), ('נאיה', 0.000322873264556), ('נגה', 0.007825832936148), ('נוי', 0.001399117479744), ('נויה', 0.010639442812995), ('נועה', 0.022216755584939), ('נועם', 0.005365846158577), ('נופר', 0.000645746529112), ('נור', 0.000153749173598), ('נור', 0.000261373595117), ('נור', 0.003720730001076), ('נחמה', 0.003843729339955), ('נטלי', 0.000276748512477), ('נטלי', 0.000553497024953), ('נטע', 0.005350471241217), ('נילי', 0.000722621115912), ('נינה', 0.001106994049907), ('ניצן', 0.001445242231823), ('ניקה', 0.000322873264556), ('ניקול', 0.000753370950631), ('נעמה', 0.005565720084255), ('נעמי', 0.008333205209022), ('סארה', 0.003905229009394), ('סהר', 0.000753370950631), ('סול', 0.00086099537215), ('סופי', 0.000322873264556), ('סופיה', 0.000907120124229), ('סיון', 0.000599621777033), ('סילא', 0.000169124090958), ('סילין', 0.000169124090958), ('סימה', 0.000430497686075), ('סלמא', 0.001460617149183), ('סמא', 0.000199873925678), ('ספיר', 0.001091619132547), ('סתיו', 0.00086099537215), ('עדי', 0.007118586737596), ('עדיה', 0.000553497024953), ('עדינה', 0.000691871281192), ('עדן', 0.001460617149183), ('עדן', 0.003812979505235), ('עומר', 0.0034439814886), ('עופרי', 0.005642594671054), ('עטרה', 0.000599621777033), ('עטרת', 0.000338248181916), ('עידן', 0.000384372933995), ('עלמה', 0.00847157946526), ('עמית', 0.004904598637782), ('עמליה', 0.001183868636706), ('עמנואל', 0.001552866653342), ('ענאל', 0.000322873264556), ('ענבל', 0.000384372933995), ('ענבר', 0.001937239587337), ('ענהאל', 0.002075613843576), ('פאטמה', 0.003305607232361), ('פאר', 0.000430497686075), ('פיגא', 0.001967989422057), ('פלג', 0.000445872603435), ('פנינה', 0.001122368967267), ('פערל', 0.000645746529112), ('פרח', 0.001552866653342), ('פריאל', 0.000691871281192), ('פריידא', 0.000445872603435), ('צביה', 0.00087637028951), ('צופיה', 0.001183868636706), ('צפורה', 0.002413862025492), ('קארין', 0.000399747851355), ('קורל', 0.000753370950631), ('קים', 0.000614996694393), ('קרן', 0.000507372272874), ('קרני', 0.000599621777033), ('ראשית', 0.000322873264556), ('רבקה', 0.009824572192924), ('רהף', 0.002828984794207), ('רוחמה', 0.000507372272874), ('רומי', 0.000722621115912), ('רומי', 0.011669562276103), ('רון', 0.000507372272874), ('רונה', 0.001998739256777), ('רוני', 0.012407558309374), ('רות', 0.008102581448625), ('רותם', 0.002475361694931), ('רז', 0.000753370950631), ('רחל', 0.009501698928368), ('רייזל', 0.000507372272874), ('רים', 0.001199243554066), ('רימא', 0.001060869297828), ('רימאס', 0.001629741240141), ('רינה', 0.000491997355514), ("ריתאג'", 0.001106994049907), ('ריתאל', 0.003643855414277), ('רני', 0.000968619793669), ('רננה', 0.001260743223505), ('רעות', 0.001368367645024), ('רעיה', 0.000338248181916), ('רפיף', 0.001537491735982), ('שאם', 0.000153749173598), ('שאם', 0.006196091696007), ('שהד', 0.002490736612291), ('שובל', 0.000645746529112), ('שוהם', 0.001952614504697), ('שולמית', 0.001829615165818), ('שושנה', 0.002213988099814), ('שחר', 0.004012853430913), ('שטערנא', 0.000353623099276), ('שי', 0.00338248181916), ('שיינא', 0.001168493719346), ('שיינדל', 0.000491997355514), ('שי לי', 0.002044864008856), ('שי-לי', 0.003244107562922), ('שילת', 0.002367737273412), ('שיר', 0.005534970249535), ('שיראל', 0.001921864669977), ('שירה', 0.016266662566689), ('שירי', 0.00087637028951), ('שלי', 0.00089174520687), ('שני', 0.003474731323319), ('שפרה', 0.00083024553743), ('שקד', 0.005488845497455), ('שרה', 0.000245998677757), ('שרה', 0.002167863347735), ('שרה', 0.014944419673744), ('תאיר', 0.00169124090958), ('תאלא', 0.000276748512477), ('תאלא', 0.002705985455328), ('תאלין', 0.002629110868529), ('תבל', 0.000476622438154), ('תהילה', 0.006303716117526), ('תהל', 0.008041081779185), ('תהלה', 0.000415122768715), ('תולין', 0.000322873264556), ('תולין', 0.001491366983902), ('תום', 0.000630371611753), ('תיא', 0.000199873925678), ('תיא', 0.000230623760397), ('תמר', 0.020341015667041), ('תמרה', 0.001060869297828), ('תפארת', 0.00083024553743)))
A:faker.providers.person.he_IL.__init__.first_names_male->OrderedDict((('אביאל', 0.004307179574083), ('אביב', 0.003911766367282), ('אביהו', 0.000395413206801), ('אביחי', 0.000762582613116), ('אבינועם', 0.00043777890753), ('אביעד', 0.001256849121618), ('אבישי', 0.002188894537649), ('אביתר', 0.004603739479184), ('אבראהים', 0.000155340902672), ('אבראהים', 0.004759080381856), ('אברהם', 0.012130712308648), ('אדיר', 0.002400723041292), ('אדם', 0.000225950403886), ('אדם', 0.000607241710445), ('אדם', 0.005846466700559), ('אדם', 0.007569338530193), ('אדר', 0.00107326441846), ('אהרון', 0.006453708411004), ('אוהד', 0.001454555725018), ('אופיר', 0.003756425464611), ('אופק', 0.003007964751737), ('אור', 0.005959441902502), ('אוראל', 0.003064452352709), ('אורון', 0.000466022708016), ('אורי', 0.018640908320624), ('אוריאל', 0.003417499858781), ('אוריה', 0.002598429644693), ('אורין', 0.000522510308987), ('אורן', 0.001143873919675), ('אושר', 0.00238660114105), ('אושרי', 0.001440433824775), ('אחיה', 0.001256849121618), ('אחמד', 0.011918883805005), ('איאן', 0.000381291306558), ('איהאם', 0.001553409026719), ('אייל', 0.003671694063153), ('אילון', 0.001059142518217), ('איליי', 0.001708749929391), ('אילן', 0.000607241710445), ('אימרי', 0.002513698243236), ('איתי', 0.016324916680789), ('איתיאל', 0.00043777890753), ('איתמר', 0.012413150313506), ('איתן', 0.017610009602892), ('אלדר', 0.00043777890753), ('אלון', 0.008247189741852), ('אלחנן', 0.002880867649551), ('אליאב', 0.003149183754166), ('אליאור', 0.00097441111676), ('אליאל', 0.00043777890753), ('אליאס', 0.000381291306558), ('אליה', 0.008614359148167), ('אליהו', 0.005973563802745), ('אלימלך', 0.000960289216517), ('אליעזר', 0.002541942043721), ('אלירז', 0.000367169406315), ('אלירן', 0.00063548551093), ('אלישע', 0.000833192114331), ('אלכס', 0.000649607411173), ('אלכסנדר', 0.000395413206801), ('אלמוג', 0.001779359430605), ('אלעד', 0.001835847031577), ('אלעזר', 0.002414844941535), ('אלקנה', 0.000564876009716), ('אלרואי', 0.003756425464611), ('אלרועי', 0.000564876009716), ('אמיר', 0.000183584703158), ('אמיר', 0.000395413206801), ('אמיר', 0.000946167316274), ('אמיר', 0.004956786985257), ('אמיתי', 0.002739648647122), ('אמרי', 0.001256849121618), ('אניל', 0.000240072304129), ('אסף', 0.003276280856352), ('אפק', 0.000508388408744), ('אפרים', 0.001341580523075), ('אראל', 0.000621363610687), ('ארבל', 0.001398068124047), ('ארד', 0.000790826413602), ('ארז', 0.000367169406315), ('ארז', 0.001299214822347), ('ארי', 0.002330113540078), ('אריאל', 0.01769474100435), ('אריה', 0.002061797435463), ('אשר', 0.00160989662769), ('בארי', 0.003050330452466), ('בועז', 0.001228605321132), ('בן', 0.006637293114161), ('בניה', 0.003488109359995), ('בניהו', 0.000466022708016), ('בנימין', 0.005931198102017), ('בצלאל', 0.000381291306558), ('בר', 0.001793481330848), ('ברוך', 0.001496921425747), ('ברק', 0.00063548551093), ('גבע', 0.000960289216517), ('גבריאל', 0.002118285036435), ("ג'וד", 0.000593119810202), ("ג'וד", 0.001087386318703), ('גוד', 0.002767892447608), ("ג'וד", 0.007004462520477), ("ג'וזף", 0.000324803705587), ("ג'וליאן", 0.000183584703158), ('גור', 0.000691973111902), ("ג'ורג'", 0.000395413206801), ('גיא', 0.008120092639666), ('גיל', 0.000790826413602), ('גילי', 0.000423657007287), ('גל', 0.001680506128905), ('גלעד', 0.001835847031577), ('גפן', 0.000748460712874), ('דב', 0.00107326441846), ('דביר', 0.00302208665198), ('דוד', 0.019770660340055), ('דולב', 0.000790826413602), ('דור', 0.003346890357567), ('דורון', 0.000578997909959), ('דילן', 0.000395413206801), ('דין', 0.000621363610687), ('דן', 0.000155340902672), ('דן', 0.002499576342993), ('דניאל', 0.000296559905101), ('דניאל', 0.01574591877083), ('דרור', 0.00151104332599), ('הדר', 0.001482799525504), ('הילל', 0.001595774727447), ('הלל', 0.005521662994973), ('הראל', 0.009729989267356), ('ורד', 0.000225950403886), ('זאב', 0.000932045416031), ('זוהר', 0.001285092922104), ('זיו', 0.00214652883692), ('זיין', 0.001270971021861), ("ח'אלד", 0.00321979325538), ('חגי', 0.000550754109473), ('חוסין', 0.00141219002429), ('חיים', 0.008713212449867), ('חמזה', 0.001624018527933), ('חנוך', 0.000494266508501), ('חסן', 0.002160650737163), ('טוביה', 0.000550754109473), ('טוהר', 0.000706095012145), ('טום', 0.001214483420889), ('טומי', 0.000593119810202), ('טל', 0.001779359430605), ('יאיר', 0.010831497486302), ('יאמן', 0.001680506128905), ('יאן', 0.000480144608258), ('יאסין', 0.001440433824775), ('יגל', 0.002344235440321), ('ידידיה', 0.002118285036435), ('יהב', 0.003078574252951), ('יהודה', 0.011226910693103), ('יהונתן', 0.015915381573745), ('יהושע', 0.002527820143479), ('יהל', 0.001299214822347), ('יהלי', 0.003233915155623), ('יואב', 0.005620516296673), ('יואל', 0.001680506128905), ('יובל', 0.005027396486471), ('יוגב', 0.00043777890753), ('יוחאי', 0.000578997909959), ('יוחנן', 0.00043777890753), ('יונתן', 0.011198666892617), ('יוסף', 0.000169462802915), ('יוסף', 0.000240072304129), ('יוסף', 0.008995650454725), ('יוסף', 0.016861548890019), ('יותם', 0.002527820143479), ('יזן', 0.001934700333277), ('יחזקאל', 0.00117211772016), ('יחיא', 0.001849968931819), ('יחיאל', 0.00151104332599), ('ינאי', 0.004942665085014), ('ינון', 0.002965599051008), ('יניב', 0.000409535107044), ('יעקב', 0.009532282663955), ('יפתח', 0.000932045416031), ('יצחק', 0.009292210359826), ('יקיר', 0.000494266508501), ('ירדן', 0.001807603231091), ('ירין', 0.002697282946393), ('ישי', 0.005549906795458), ('ישכר', 0.000381291306558), ('ישעיה', 0.000409535107044), ('ישראל', 0.009913573970513), ('יששכר', 0.000395413206801), ('כפיר', 0.001835847031577), ('כרים', 0.00248545444275), ('כריסטיאן', 0.000169462802915), ('כרם', 0.002259504038863), ('כרמל', 0.000649607411173), ('לאון', 0.000494266508501), ('לביא', 0.008600237247924), ('לוי', 0.001694628029148), ('ליאב', 0.001991187934248), ('ליאו', 0.00151104332599), ('ליאור', 0.004264813873355), ('ליאל', 0.001355702423318), ('ליאם', 0.000183584703158), ('ליאם', 0.005634638196916), ('לידור', 0.000946167316274), ('ליית', 0.000211828503643), ('ליעד', 0.001751115630119), ('ליעם', 0.000522510308987), ('לירוי', 0.00312093995368), ('לירון', 0.000593119810202), ('לירן', 0.000578997909959), ('לני', 0.000649607411173), ('מאור', 0.004744958481613), ('מאיר', 0.00570524769813), ("מג'ד", 0.000268316104615), ("מג'ד", 0.002033553634977), ('מוחמד', 0.038552787663108), ('מוסא', 0.001383946223804), ('מוסטפא', 0.002287747839349), ('מחמוד', 0.004688470880642), ('מיכאל', 0.009376941761283), ('מילאן', 0.000169462802915), ('מלאכי', 0.002287747839349), ('מנחם', 0.005210981189629), ('מעיין', 0.002880867649551), ('מרדכי', 0.00550754109473), ('מרום', 0.000494266508501), ('משה', 0.014305484946054), ('מתן', 0.004024741569226), ('מתנאל', 0.000649607411173), ('מתניה', 0.000451900807773), ('נאור', 0.001242727221375), ('נבו', 0.003036208552223), ('נדב', 0.006128904705417), ('נהוראי', 0.00667965881489), ('נוה', 0.003135061853923), ('נועם', 0.019968366943456), ('נח', 0.000466022708016), ('נחמן', 0.002753770547365), ('נטע', 0.001002654917246), ('ניב', 0.00087555781506), ('ניל', 0.000282438004858), ('ניסים', 0.000423657007287), ('ניצן', 0.00043777890753), ('ניר', 0.000946167316274), ('ניתאי', 0.005747613398859), ('נפתלי', 0.001878212732305), ('נריה', 0.002796136248094), ('נתן', 0.004589617578941), ('נתנאל', 0.006425464610518), ('סאלח', 0.001186239620403), ('סארי', 0.000169462802915), ('סהר', 0.001934700333277), ('סולימאן', 0.000282438004858), ('סולימאן', 0.001779359430605), ('סיני', 0.000508388408744), ('סמיר', 0.000155340902672), ('סער', 0.000621363610687), ('סתיו', 0.000466022708016), ('עבד', 0.006623171213919), ('עבדאללה', 0.002005309834491), ('עברי', 0.001369824323561), ('עדי', 0.001426311924533), ('עדיאל', 0.000917923515788), ('עדן', 0.000691973111902), ('עובדיה', 0.001496921425747), ('עוז', 0.002753770547365), ('עומר', 0.007922386036265), ('עומר', 0.009984183471728), ('עומרי', 0.000240072304129), ('עומרי', 0.004857933683556), ('עופר', 0.000663729311416), ('עופרי', 0.00097441111676), ('עידו', 0.01228605321132), ('עידן', 0.004151838671412), ('עילאי', 0.007781167033836), ('עילי', 0.001468677625261), ('עלי', 0.006001807603231), ('עמיחי', 0.001143873919675), ('עמית', 0.00809184883918), ('עמנואל', 0.00097441111676), ('ענבר', 0.000409535107044), ('עקיבא', 0.001101508218946), ('ערן', 0.000381291306558), ('עתי', 0.001482799525504), ('פאר', 0.000649607411173), ('פלג', 0.00160989662769), ('פנחס', 0.001722871829633), ('צבי', 0.002598429644693), ('צור', 0.000847314014574), ('קדם', 0.000889679715302), ('קוסאי', 0.001482799525504), ('קורן', 0.000903801615545), ('ראובן', 0.001242727221375), ('ראם', 0.000225950403886), ('ראם', 0.00151104332599), ('רביד', 0.000395413206801), ('רואי', 0.00117211772016), ('רוי', 0.002203016437892), ('רום', 0.002654917245665), ('רון', 0.002626673445179), ('רוני', 0.000494266508501), ('רועי', 0.005055640286957), ('רותם', 0.001991187934248), ('רז', 0.001440433824775), ('ריאן', 0.000296559905101), ('ריאן', 0.001525165226233), ('ריף', 0.000578997909959), ('רם', 0.000183584703158), ('רן', 0.000621363610687), ('רני', 0.001157995819918), ('רעי', 0.000381291306558), ('רפאל', 0.007710557532622), ('שאול', 0.000804948313845), ('שגב', 0.000508388408744), ('שגיא', 0.001285092922104), ('שוהם', 0.000946167316274), ('שון', 0.001525165226233), ('שחר', 0.003855278766311), ('שי', 0.002541942043721), ('שילה', 0.002824380048579), ('שיר', 0.000480144608258), ('שלו', 0.001468677625261), ('שלום', 0.002880867649551), ('שליו', 0.001751115630119), ('שלמה', 0.007526972829464), ('שמואל', 0.010294865277072), ('שמחה', 0.001299214822347), ('שמעון', 0.007767045133593), ('שניאור', 0.001383946223804), ('שקד', 0.001736993729876), ('שרבל', 0.000508388408744), ('תבור', 0.000409535107044), ('תום', 0.001962944133763), ('תומר', 0.002669039145907), ('תיים', 0.000211828503643), ('תמיר', 0.000720216912388)))
A:faker.providers.person.he_IL.__init__.first_names->OrderedDict((('אביאל', 0.004307179574083), ('אביב', 0.003911766367282), ('אביהו', 0.000395413206801), ('אביחי', 0.000762582613116), ('אבינועם', 0.00043777890753), ('אביעד', 0.001256849121618), ('אבישי', 0.002188894537649), ('אביתר', 0.004603739479184), ('אבראהים', 0.000155340902672), ('אבראהים', 0.004759080381856), ('אברהם', 0.012130712308648), ('אדיר', 0.002400723041292), ('אדם', 0.000225950403886), ('אדם', 0.000607241710445), ('אדם', 0.005846466700559), ('אדם', 0.007569338530193), ('אדר', 0.00107326441846), ('אהרון', 0.006453708411004), ('אוהד', 0.001454555725018), ('אופיר', 0.003756425464611), ('אופק', 0.003007964751737), ('אור', 0.005959441902502), ('אוראל', 0.003064452352709), ('אורון', 0.000466022708016), ('אורי', 0.018640908320624), ('אוריאל', 0.003417499858781), ('אוריה', 0.002598429644693), ('אורין', 0.000522510308987), ('אורן', 0.001143873919675), ('אושר', 0.00238660114105), ('אושרי', 0.001440433824775), ('אחיה', 0.001256849121618), ('אחמד', 0.011918883805005), ('איאן', 0.000381291306558), ('איהאם', 0.001553409026719), ('אייל', 0.003671694063153), ('אילון', 0.001059142518217), ('איליי', 0.001708749929391), ('אילן', 0.000607241710445), ('אימרי', 0.002513698243236), ('איתי', 0.016324916680789), ('איתיאל', 0.00043777890753), ('איתמר', 0.012413150313506), ('איתן', 0.017610009602892), ('אלדר', 0.00043777890753), ('אלון', 0.008247189741852), ('אלחנן', 0.002880867649551), ('אליאב', 0.003149183754166), ('אליאור', 0.00097441111676), ('אליאל', 0.00043777890753), ('אליאס', 0.000381291306558), ('אליה', 0.008614359148167), ('אליהו', 0.005973563802745), ('אלימלך', 0.000960289216517), ('אליעזר', 0.002541942043721), ('אלירז', 0.000367169406315), ('אלירן', 0.00063548551093), ('אלישע', 0.000833192114331), ('אלכס', 0.000649607411173), ('אלכסנדר', 0.000395413206801), ('אלמוג', 0.001779359430605), ('אלעד', 0.001835847031577), ('אלעזר', 0.002414844941535), ('אלקנה', 0.000564876009716), ('אלרואי', 0.003756425464611), ('אלרועי', 0.000564876009716), ('אמיר', 0.000183584703158), ('אמיר', 0.000395413206801), ('אמיר', 0.000946167316274), ('אמיר', 0.004956786985257), ('אמיתי', 0.002739648647122), ('אמרי', 0.001256849121618), ('אניל', 0.000240072304129), ('אסף', 0.003276280856352), ('אפק', 0.000508388408744), ('אפרים', 0.001341580523075), ('אראל', 0.000621363610687), ('ארבל', 0.001398068124047), ('ארד', 0.000790826413602), ('ארז', 0.000367169406315), ('ארז', 0.001299214822347), ('ארי', 0.002330113540078), ('אריאל', 0.01769474100435), ('אריה', 0.002061797435463), ('אשר', 0.00160989662769), ('בארי', 0.003050330452466), ('בועז', 0.001228605321132), ('בן', 0.006637293114161), ('בניה', 0.003488109359995), ('בניהו', 0.000466022708016), ('בנימין', 0.005931198102017), ('בצלאל', 0.000381291306558), ('בר', 0.001793481330848), ('ברוך', 0.001496921425747), ('ברק', 0.00063548551093), ('גבע', 0.000960289216517), ('גבריאל', 0.002118285036435), ("ג'וד", 0.000593119810202), ("ג'וד", 0.001087386318703), ('גוד', 0.002767892447608), ("ג'וד", 0.007004462520477), ("ג'וזף", 0.000324803705587), ("ג'וליאן", 0.000183584703158), ('גור', 0.000691973111902), ("ג'ורג'", 0.000395413206801), ('גיא', 0.008120092639666), ('גיל', 0.000790826413602), ('גילי', 0.000423657007287), ('גל', 0.001680506128905), ('גלעד', 0.001835847031577), ('גפן', 0.000748460712874), ('דב', 0.00107326441846), ('דביר', 0.00302208665198), ('דוד', 0.019770660340055), ('דולב', 0.000790826413602), ('דור', 0.003346890357567), ('דורון', 0.000578997909959), ('דילן', 0.000395413206801), ('דין', 0.000621363610687), ('דן', 0.000155340902672), ('דן', 0.002499576342993), ('דניאל', 0.000296559905101), ('דניאל', 0.01574591877083), ('דרור', 0.00151104332599), ('הדר', 0.001482799525504), ('הילל', 0.001595774727447), ('הלל', 0.005521662994973), ('הראל', 0.009729989267356), ('ורד', 0.000225950403886), ('זאב', 0.000932045416031), ('זוהר', 0.001285092922104), ('זיו', 0.00214652883692), ('זיין', 0.001270971021861), ("ח'אלד", 0.00321979325538), ('חגי', 0.000550754109473), ('חוסין', 0.00141219002429), ('חיים', 0.008713212449867), ('חמזה', 0.001624018527933), ('חנוך', 0.000494266508501), ('חסן', 0.002160650737163), ('טוביה', 0.000550754109473), ('טוהר', 0.000706095012145), ('טום', 0.001214483420889), ('טומי', 0.000593119810202), ('טל', 0.001779359430605), ('יאיר', 0.010831497486302), ('יאמן', 0.001680506128905), ('יאן', 0.000480144608258), ('יאסין', 0.001440433824775), ('יגל', 0.002344235440321), ('ידידיה', 0.002118285036435), ('יהב', 0.003078574252951), ('יהודה', 0.011226910693103), ('יהונתן', 0.015915381573745), ('יהושע', 0.002527820143479), ('יהל', 0.001299214822347), ('יהלי', 0.003233915155623), ('יואב', 0.005620516296673), ('יואל', 0.001680506128905), ('יובל', 0.005027396486471), ('יוגב', 0.00043777890753), ('יוחאי', 0.000578997909959), ('יוחנן', 0.00043777890753), ('יונתן', 0.011198666892617), ('יוסף', 0.000169462802915), ('יוסף', 0.000240072304129), ('יוסף', 0.008995650454725), ('יוסף', 0.016861548890019), ('יותם', 0.002527820143479), ('יזן', 0.001934700333277), ('יחזקאל', 0.00117211772016), ('יחיא', 0.001849968931819), ('יחיאל', 0.00151104332599), ('ינאי', 0.004942665085014), ('ינון', 0.002965599051008), ('יניב', 0.000409535107044), ('יעקב', 0.009532282663955), ('יפתח', 0.000932045416031), ('יצחק', 0.009292210359826), ('יקיר', 0.000494266508501), ('ירדן', 0.001807603231091), ('ירין', 0.002697282946393), ('ישי', 0.005549906795458), ('ישכר', 0.000381291306558), ('ישעיה', 0.000409535107044), ('ישראל', 0.009913573970513), ('יששכר', 0.000395413206801), ('כפיר', 0.001835847031577), ('כרים', 0.00248545444275), ('כריסטיאן', 0.000169462802915), ('כרם', 0.002259504038863), ('כרמל', 0.000649607411173), ('לאון', 0.000494266508501), ('לביא', 0.008600237247924), ('לוי', 0.001694628029148), ('ליאב', 0.001991187934248), ('ליאו', 0.00151104332599), ('ליאור', 0.004264813873355), ('ליאל', 0.001355702423318), ('ליאם', 0.000183584703158), ('ליאם', 0.005634638196916), ('לידור', 0.000946167316274), ('ליית', 0.000211828503643), ('ליעד', 0.001751115630119), ('ליעם', 0.000522510308987), ('לירוי', 0.00312093995368), ('לירון', 0.000593119810202), ('לירן', 0.000578997909959), ('לני', 0.000649607411173), ('מאור', 0.004744958481613), ('מאיר', 0.00570524769813), ("מג'ד", 0.000268316104615), ("מג'ד", 0.002033553634977), ('מוחמד', 0.038552787663108), ('מוסא', 0.001383946223804), ('מוסטפא', 0.002287747839349), ('מחמוד', 0.004688470880642), ('מיכאל', 0.009376941761283), ('מילאן', 0.000169462802915), ('מלאכי', 0.002287747839349), ('מנחם', 0.005210981189629), ('מעיין', 0.002880867649551), ('מרדכי', 0.00550754109473), ('מרום', 0.000494266508501), ('משה', 0.014305484946054), ('מתן', 0.004024741569226), ('מתנאל', 0.000649607411173), ('מתניה', 0.000451900807773), ('נאור', 0.001242727221375), ('נבו', 0.003036208552223), ('נדב', 0.006128904705417), ('נהוראי', 0.00667965881489), ('נוה', 0.003135061853923), ('נועם', 0.019968366943456), ('נח', 0.000466022708016), ('נחמן', 0.002753770547365), ('נטע', 0.001002654917246), ('ניב', 0.00087555781506), ('ניל', 0.000282438004858), ('ניסים', 0.000423657007287), ('ניצן', 0.00043777890753), ('ניר', 0.000946167316274), ('ניתאי', 0.005747613398859), ('נפתלי', 0.001878212732305), ('נריה', 0.002796136248094), ('נתן', 0.004589617578941), ('נתנאל', 0.006425464610518), ('סאלח', 0.001186239620403), ('סארי', 0.000169462802915), ('סהר', 0.001934700333277), ('סולימאן', 0.000282438004858), ('סולימאן', 0.001779359430605), ('סיני', 0.000508388408744), ('סמיר', 0.000155340902672), ('סער', 0.000621363610687), ('סתיו', 0.000466022708016), ('עבד', 0.006623171213919), ('עבדאללה', 0.002005309834491), ('עברי', 0.001369824323561), ('עדי', 0.001426311924533), ('עדיאל', 0.000917923515788), ('עדן', 0.000691973111902), ('עובדיה', 0.001496921425747), ('עוז', 0.002753770547365), ('עומר', 0.007922386036265), ('עומר', 0.009984183471728), ('עומרי', 0.000240072304129), ('עומרי', 0.004857933683556), ('עופר', 0.000663729311416), ('עופרי', 0.00097441111676), ('עידו', 0.01228605321132), ('עידן', 0.004151838671412), ('עילאי', 0.007781167033836), ('עילי', 0.001468677625261), ('עלי', 0.006001807603231), ('עמיחי', 0.001143873919675), ('עמית', 0.00809184883918), ('עמנואל', 0.00097441111676), ('ענבר', 0.000409535107044), ('עקיבא', 0.001101508218946), ('ערן', 0.000381291306558), ('עתי', 0.001482799525504), ('פאר', 0.000649607411173), ('פלג', 0.00160989662769), ('פנחס', 0.001722871829633), ('צבי', 0.002598429644693), ('צור', 0.000847314014574), ('קדם', 0.000889679715302), ('קוסאי', 0.001482799525504), ('קורן', 0.000903801615545), ('ראובן', 0.001242727221375), ('ראם', 0.000225950403886), ('ראם', 0.00151104332599), ('רביד', 0.000395413206801), ('רואי', 0.00117211772016), ('רוי', 0.002203016437892), ('רום', 0.002654917245665), ('רון', 0.002626673445179), ('רוני', 0.000494266508501), ('רועי', 0.005055640286957), ('רותם', 0.001991187934248), ('רז', 0.001440433824775), ('ריאן', 0.000296559905101), ('ריאן', 0.001525165226233), ('ריף', 0.000578997909959), ('רם', 0.000183584703158), ('רן', 0.000621363610687), ('רני', 0.001157995819918), ('רעי', 0.000381291306558), ('רפאל', 0.007710557532622), ('שאול', 0.000804948313845), ('שגב', 0.000508388408744), ('שגיא', 0.001285092922104), ('שוהם', 0.000946167316274), ('שון', 0.001525165226233), ('שחר', 0.003855278766311), ('שי', 0.002541942043721), ('שילה', 0.002824380048579), ('שיר', 0.000480144608258), ('שלו', 0.001468677625261), ('שלום', 0.002880867649551), ('שליו', 0.001751115630119), ('שלמה', 0.007526972829464), ('שמואל', 0.010294865277072), ('שמחה', 0.001299214822347), ('שמעון', 0.007767045133593), ('שניאור', 0.001383946223804), ('שקד', 0.001736993729876), ('שרבל', 0.000508388408744), ('תבור', 0.000409535107044), ('תום', 0.001962944133763), ('תומר', 0.002669039145907), ('תיים', 0.000211828503643), ('תמיר', 0.000720216912388))).copy()
A:faker.providers.person.he_IL.__init__.last_names->OrderedDict((("אבו אל היג'א", 0.0004185954), ('אבוטבול', 0.0003645757), ('אבו טיר', 0.000347025), ('אבו כף', 0.000575184), ('אבו ליל', 0.0005678902), ('אבו מוך', 0.0003430362), ('אבו סאלח', 0.0004113016), ('אבו סנינה', 0.0003522675), ('אבו עראר', 0.0005006506), ('אבו ראס', 0.0003642338), ('אבו ריא', 0.0002835462), ('אבו רמילה', 0.0003918135), ('אביב', 0.0003988794), ('אביטבול', 0.0004328411), ('אביטל', 0.0004519873), ('אביטן', 0.0005171756), ('אבני', 0.0003463412), ('אבראהים', 0.0006235054), ('אברגל', 0.0003034902), ('אברהם', 0.0021808444), ('אברהמי', 0.0004725011), ('אברמוב', 0.0008053944), ('אברמוביץ', 0.0004369438), ('אגבאריה', 0.0020710956), ('אדלר', 0.000552277), ('אדרי', 0.0013994967), ('אהרון', 0.0005232157), ('אהרוני', 0.000694278), ('אהרן', 0.0005895437), ('אוזן', 0.0004632699), ('אוחיון', 0.0016352914), ('אוחנה', 0.0012190893), ('אופיר', 0.0003285626), ('אור', 0.000274543), ('אורן', 0.0006651028), ('אזברגה', 0.0004979154), ('אזולאי', 0.0019325135), ('אחמד', 0.0003112399), ('אטיאס', 0.0010128117), ('אטרש', 0.0003216107), ('איבגי', 0.0003057695), ('איוב', 0.0003391614), ('אילוז', 0.000462928), ('איסקוב', 0.0003056556), ('איפרגן', 0.0003224085), ('אלבז', 0.0010615889), ('אלון', 0.0009669975), ('אלוני', 0.0003267392), ('אלוש', 0.0002914099), ('אלטורי', 0.0002840021), ('אליאס', 0.0005734745), ('אליהו', 0.0010782279), ('אלימלך', 0.0004399069), ('אלמוג', 0.0003135192), ('אלמלח', 0.0003681087), ('אלנבארי', 0.0002708961), ('אלסייד', 0.0003250297), ('אלפסי', 0.0005746142), ('אלקובי', 0.000403324), ('אלקיים', 0.0004139228), ('אלקרינאוי', 0.0003684506), ('אמארה', 0.0004154044), ('אמיר', 0.0003546607), ('אמסלם', 0.0008538297), ('אמר', 0.000287535), ('אנגל', 0.0003220666), ('אסדי', 0.0003464552), ('אסולין', 0.0009318961), ('אסעד', 0.0002932333), ('אסרף', 0.0006086899), ('אפשטיין', 0.0003689064), ('ארביב', 0.0004209887), ('ארז', 0.0003954604), ('ארליך', 0.00027101), ('אשכנזי', 0.001233335), ('אשר', 0.0004242937), ('בדארנה', 0.0004214445), ('בדיר', 0.0002950568), ('בדר', 0.0002760245), ('בדראן', 0.0003989933), ('בוזגלו', 0.0004477706), ('בוחבוט', 0.000360473), ('בוסקילה', 0.0004288523), ('ביטון', 0.0030260127), ('בכר', 0.0010549789), ('בלום', 0.0003422385), ('בן דוד', 0.0014205803), ('בן הרוש', 0.0003634361), ('בן חיים', 0.0004988271), ('בן חמו', 0.0009408994), ('בן יוסף', 0.0003320956), ('בן לולו', 0.0003196733), ('בן משה', 0.0004303338), ('בן סימון', 0.0004376276), ('בן עזרא', 0.0003485066), ('בן עמי', 0.0004467449), ('בן שבת', 0.0002754547), ('בן שושן', 0.0006107413), ('בנימין', 0.0006523387), ('בסול', 0.0002932333), ('בצלאל', 0.0003156845), ('בקר', 0.0003121516), ('בר', 0.0011435301), ('בראון', 0.000376998), ('ברגר', 0.0005738164), ('ברדה', 0.0003977397), ('ברוך', 0.0008745715), ('ברזילי', 0.0003418966), ('ברכה', 0.000499283), ('ברמן', 0.0003711857), ('ברנס', 0.0002786457), ('ברנשטיין', 0.0004130111), ('ברק', 0.0006729665), ('ברקוביץ', 0.0006409421), ('בשארה', 0.000373465), ('בשיר', 0.0002883328), ('גאבר', 0.0005383732), ('גאנם', 0.0005768935), ('גבאי', 0.0016158033), ('גבארה', 0.0002936892), ("ג'בארין", 0.00165968), ('גבע', 0.0002820647), ('גדיר', 0.0004091363), ('גואטה', 0.0005055511), ('גוטליב', 0.0004181395), ('גוטמן', 0.000591937), ('גולאני', 0.0002900423), ('גולדברג', 0.000816563), ('גולדמן', 0.0005264068), ('גולדנברג', 0.0004056033), ('גולדשטיין', 0.0008946294), ('גולן', 0.0011855834), ('גור', 0.0003531792), ('גורדון', 0.0002858255), ('גורן', 0.0003817845), ('גיל', 0.0002803552), ('גל', 0.0006617978), ('גליק', 0.0003310699), ('גלעד', 0.0002821787), ('גמליאל', 0.0003642338), ('גנאים', 0.0005610523), ('גרבאן', 0.0003214968), ('גרוס', 0.0006403723), ('גרוסמן', 0.000380075), ('גרין', 0.0003725533), ('גרינברג', 0.0009478513), ('דאוד', 0.000307479), ('דביר', 0.0004175697), ('דבש', 0.0002795574), ('דגן', 0.0005030438), ('דדון', 0.0007198063), ('דהאן', 0.0003006411), ('דהן', 0.0022558337), ('דהרי', 0.0002755687), ('דוד', 0.0016551214), ('דוידוב', 0.0007180968), ('דויטש', 0.0003989933), ('דורון', 0.000317394), ('דיאב', 0.0004985992), ('דיין', 0.0010681989), ('דמרי', 0.0003776818), ('דניאל', 0.0007061304), ('דנינו', 0.0004338668), ('דקל', 0.000340529), ('דראושה', 0.0005869225), ('דרור', 0.0004386533), ('דרורי', 0.0003034902), ('דרעי', 0.0005292559), ('הדר', 0.0003775678), ('הופמן', 0.00038338), ('הורביץ', 0.0002907261), ('הורוביץ', 0.000390104), ('הייב', 0.0005921649), ('הירש', 0.0003818985), ('הלוי', 0.0005028159), ('הלל', 0.0003923833), ('הראל', 0.0007852225), ('הרוש', 0.0006835652), ('הררי', 0.000492559), ('הרשקוביץ', 0.0006489197), ('וולף', 0.0003986514), ('ווקנין', 0.0003724394), ('וייס', 0.0008692151), ('וינברג', 0.0003423525), ('וינר', 0.0003119237), ('ויס', 0.0003285626), ('ויסמן', 0.0002757966), ('ויצמן', 0.0005245833), ('וקנין', 0.0009326939), ('ותד', 0.0003587635), ('זגורי', 0.0003629802), ('זהבי', 0.0004176837), ('זהר', 0.0003346028), ('זוהר', 0.0005770075), ('זועבי', 0.0012752743), ('זידאן', 0.0005832756), ('זיו', 0.0005641294), ('זילברמן', 0.0004159742), ('זינגר', 0.0003651456), ('זכריה', 0.0003278788), ('זמיר', 0.0003829242), ("חאג'", 0.0003408709), ("חאג' יחיא", 0.0003617266), ('חאג יחיא', 0.0003882806), ('חביב', 0.0004484544), ('חביבאללה', 0.0004379695), ("חג'אזי", 0.000548972), ('חדאד', 0.0005056651), ('חדד', 0.0016215016), ("חוג'יראת", 0.0005729047), ('חוסין', 0.0003514697), ('חורי', 0.0005095399), ("ח'ורי", 0.0005477183), ('חזן', 0.001256242), ('חטיב', 0.0003936369), ("ח'טיב", 0.0015462843), ('חי', 0.0003430362), ('חיון', 0.0006327366), ('חיים', 0.0007797522), ('חיימוב', 0.0004451494), ("ח'לאילה", 0.000456204), ('חלבי', 0.0007260744), ("ח'ליל", 0.0003452016), ('חלפון', 0.0003063393), ('חמדאן', 0.0004278266), ('חמו', 0.0004457192), ('חמוד', 0.000367083), ('חן', 0.0013292939), ('חסון', 0.0007411178), ('חסן', 0.0008594141), ('טאהא', 0.0008251104), ('טוויל', 0.0003101002), ('טויטו', 0.0004448075), ('טולדנו', 0.0003334631), ('טייב', 0.0002708961), ('טל', 0.0013330548), ('יאסין', 0.0006589487), ('יהודה', 0.0006080061), ('יונה', 0.0004435538), ('יונס', 0.0004857211), ('יוסופוב', 0.0004702218), ('יוסף', 0.0018478371), ('יחזקאל', 0.0006923406), ('יחיא', 0.0003449737), ('ימין', 0.0002870792), ('יעקב', 0.0011190275), ('יעקבי', 0.0004216725), ('יעקובוב', 0.0005550121), ('יעקובוביץ', 0.0002968802), ('יעקובי', 0.0003576238), ('יפה', 0.0003034902), ('יפרח', 0.0008173608), ('יפת', 0.0003267392), ('יצחק', 0.0011618786), ('יצחקי', 0.0007125125), ('ירושלמי', 0.000274315), ('ישראל', 0.0007288096), ('ישראלי', 0.0007002042), ('כהן', 0.019334822), ('כהנא', 0.0003551166), ('כחלון', 0.0004289663), ('כספי', 0.0003211549), ('כץ', 0.0018738212), ('כרמי', 0.0003342609), ('לב', 0.0007200342), ('לביא', 0.0010139513), ('להב', 0.000357054), ('לוגסי', 0.0005278883), ('לוי', 0.0111999624), ('לוין', 0.0013806924), ('ליבוביץ', 0.0005249252), ('ליברמן', 0.0005201387), ('ליפשיץ', 0.0005541004), ('לנדאו', 0.0003262833), ('לרנר', 0.0003750606), ('מאור', 0.0003620685), ('מאיר', 0.0009089891), ('מדר', 0.0003455435), ('מוזס', 0.0003091885), ('מויאל', 0.0005749561), ('מוסא', 0.0004717033), ('מוסקוביץ', 0.0003259414), ('מועלם', 0.0005220761), ('מור', 0.0011423905), ('מוראד', 0.0002749988), ('מושקוביץ', 0.0003134052), ('מזור', 0.000333805), ('מזרחי', 0.0033303007), ("מחאג'נה", 0.0012883803), ('מחאמיד', 0.0018262976), ('מחמוד', 0.0002998433), ('מטר', 0.0003922694), ('מיכאלי', 0.0005314213), ('מילר', 0.0006881239), ('מימון', 0.000928933), ('מכלוף', 0.0003361983), ('מלול', 0.0006253289), ('מלכה', 0.001934223), ('מלמד', 0.0004647514), ('ממן', 0.0009764567), ('מנדל', 0.0002873071), ('מנחם', 0.0004933568), ('מנסור', 0.000819868), ('מנצור', 0.0003814426), ('מנשה', 0.0004680564), ('מסארוה', 0.0008443706), ('מסארווה', 0.0002802412), ('מסיקה', 0.0003017807), ('מסרי', 0.0005342704), ('מרגלית', 0.0002824066), ('מרדכי', 0.0004645235), ('מרום', 0.0003129493), ('מרעי', 0.0005625339), ('מרציאנו', 0.0003146588), ('מרקוביץ', 0.0004444656), ('משה', 0.0012522532), ('משולם', 0.0003482787), ('משיח', 0.0003645757), ('נאור', 0.0003116957), ('נאסר', 0.0005325609), ('נבון', 0.0002796714), ('נגר', 0.0006358137), ('נוימן', 0.0003699321), ('נחום', 0.0010065436), ('נחמיאס', 0.000363778), ('נחמני', 0.0004122133), ('ניסן', 0.0002992735), ('ניר', 0.0003601311), ('נסאר', 0.0006750178), ('נסים', 0.0005396268), ('נעים', 0.000697583), ('נתן', 0.0003872549), ('נתשה', 0.0003447457), ('סאלח', 0.0005592289), ('סאלם', 0.0002705542), ('סבאג', 0.0002772781), ('סבג', 0.0008170189), ('סבח', 0.0002966523), ('סבן', 0.0004323852), ('סגל', 0.0012155563), ('סואעד', 0.0012098581), ('סויסה', 0.0010544091), ('סולומון', 0.000661114), ('סופר', 0.0007159315), ('סימן טוב', 0.0002800133), ('סיני', 0.0002869652), ('סלאמה', 0.0008069899), ('סלומון', 0.0004725011), ('סלימאן', 0.0006335344), ('סלמאן', 0.00028423), ('סלע', 0.0006118809), ('סעד', 0.0004322713), ('סעדה', 0.0003199012), ('סעדי', 0.0004304478), ('סעיד', 0.0005107935), ('ספיר', 0.0004119854), ('סרוסי', 0.0003727812), ('סרור', 0.0003260554), ('סרחאן', 0.0004681704), ('סרסור', 0.0002731754), ('עאזם', 0.0003548887), ('עאמר', 0.0005807683), ('עאסלה', 0.0004797949), ('עבאס', 0.0005121611), ('עבאסי', 0.0003230923), ('עבדאללה', 0.0004449214), ('עבד אל קאדר', 0.0002770502), ('עבוד', 0.0003461133), ('עדוי', 0.0003625244), ('עואד', 0.0005034997), ('עואודה', 0.0003056556), ('עובד', 0.000310784), ('עובדיה', 0.000948877), ('עודה', 0.0006648749), ('עווד', 0.0002817228), ('עוז', 0.0003095304), ('עוזרי', 0.0003601311), ('עומר', 0.0004549504), ('עזאם', 0.0003739209), ('עזר', 0.0002926635), ('עזרא', 0.000836621), ('עזרן', 0.0003022366), ('עטיה', 0.0005034997), ('עיסא', 0.0006968992), ('עלי', 0.0005897716), ('עליאן', 0.0004195071), ('עמאש', 0.0007673299), ('עמירה', 0.0002892445), ('עמית', 0.0002748849), ('עמר', 0.0016504488), ('עמרם', 0.0003889644), ('עתאמנה', 0.0002793295), ('פאר', 0.000396828), ('פדידה', 0.0003054276), ('פוגל', 0.0002887887), ('פולק', 0.0004996249), ('פוקס', 0.0005276604), ('פורמן', 0.000281039), ('פורת', 0.0004169999), ('פז', 0.0004270288), ('פחימה', 0.0003316397), ('פינטו', 0.0004175697), ('פינקלשטיין', 0.0002802412), ('פישמן', 0.0003597892), ('פישר', 0.0005738164), ('פלג', 0.0005474904), ('פלד', 0.0006111971), ('פלדמן', 0.0009019232), ('פנחס', 0.0004459471), ('פרי', 0.0004665749), ('פריד', 0.0004208747), ('פרידמן', 0.0021022082), ('פרנקל', 0.0005776913), ('פרץ', 0.0032042548), ('פרקש', 0.0002779619), ('צברי', 0.0004600788), ('צדוק', 0.0005442994), ('צור', 0.0007644808), ('צמח', 0.0003528373), ('צרפתי', 0.0006094877), ('קאופמן', 0.0004456052), ('קאסם', 0.0004601928), ('קדוש', 0.0008008358), ('קוגן', 0.0005499976), ('קורן', 0.000740434), ('קינן', 0.0003089606), ('קליין', 0.0013318012), ('קמחי', 0.0003147728), ('קפלן', 0.0006849328), ('קרמר', 0.000350444), ('קרן', 0.0004678285), ('ראובן', 0.0005415642), ('רביבו', 0.0004157463), ('רבינוביץ', 0.0007378128), ('רגב', 0.0003989933), ('רובין', 0.0008423192), ('רובינשטיין', 0.0004026402), ('רוזן', 0.0006486918), ('רוזנברג', 0.0010279691), ('רוזנטל', 0.0004416164), ('רוזנפלד', 0.0005364357), ('רוט', 0.0005014483), ('רוטמן', 0.0003188756), ('רוטנברג', 0.0003187616), ('רון', 0.0003961442), ('רונן', 0.0003698181), ('רז', 0.0007521725), ('רזניק', 0.0003017807), ('רחמים', 0.0006912009), ('ריאן', 0.0003526093), ('רפאל', 0.000271238), ('שאהין', 0.0004059452), ('שאול', 0.0004735268), ('שביט', 0.0003130633), ('שבתאי', 0.0003979676), ('שגב', 0.0004646375), ('שגיא', 0.0003531792), ('שדה', 0.0004417304), ('שוויקי', 0.0005047533), ('שוורץ', 0.0007591244), ('שולמן', 0.0002952847), ('שוקרון', 0.0005164918), ('שור', 0.0003898761), ('שורץ', 0.0009575384), ('שושן', 0.000684363), ('שחאדה', 0.0007848806), ('שחר', 0.0009679092), ('שטיין', 0.0004781994), ('שטיינברג', 0.0003252576), ('שטרית', 0.0005996866), ('שטרן', 0.0009997056), ('שי', 0.000320699), ('שיבלי', 0.00031728), ('שיטרית', 0.0004501638), ('שכטר', 0.0005425899), ('שלבי', 0.0003711857), ('שלו', 0.0005757539), ('שלום', 0.0011007931), ('שלמה', 0.000426459), ('שם טוב', 0.0004130111), ('שמואל', 0.0006326227), ('שמואלי', 0.0004719313), ('שמיר', 0.0004115295), ('שמעון', 0.0003597892), ('שמעוני', 0.0005021321), ('שמש', 0.0010336674), ('שני', 0.0004502778), ('שניידר', 0.0004392232), ('שפירא', 0.0013031958), ('שפר', 0.0003430362), ('שקד', 0.000486063), ('שרביט', 0.0003365402), ('שרון', 0.0007520585), ('שריקי', 0.0003716416), ('שרעבי', 0.0010047201), ('שרף', 0.0003082768), ('ששון', 0.0009562848), ("תורג'מן", 0.0004513035), ('תורגמן', 0.0005209364), ('תמיר', 0.0002928914)))
faker.providers.person.he_IL.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/person/nl_BE/__init__.py----------------------------------------
A:faker.providers.person.nl_BE.__init__.formats_male->OrderedDict((('{{first_name_male}} {{last_name}}', 90), ('{{first_name_male}} {{last_name}} {{last_name}}', 10)))
A:faker.providers.person.nl_BE.__init__.formats_female->OrderedDict((('{{first_name_female}} {{last_name}}', 90), ('{{first_name_female}} {{last_name}} {{last_name}}', 10)))
A:faker.providers.person.nl_BE.__init__.formats->OrderedDict(Counter(formats_male) + Counter(formats_female))
A:faker.providers.person.nl_BE.__init__.first_names_male->OrderedDict((('Aaron', 2889), ('Abdul', 1215), ('Abdullah', 1130), ('Achiel', 1175), ('Adam', 4837), ('Adriaan', 1168), ('Adrian', 1357), ('Ahmad', 1532), ('Ahmed', 5233), ('Ahmet', 1538), ('Alain', 8280), ('Albert', 7205), ('Alex', 5059), ('Alexander', 9289), ('Alexandre', 1923), ('Alexis', 1191), ('Alfons', 6341), ('Alfred', 1476), ('Ali', 5761), ('Amir', 1669), ('Anas', 1312), ('Andreas', 3733), ('André', 16580), ('Andy', 6567), ('Angelo', 1831), ('Anthony', 3620), ('Antoine', 3850), ('Anton', 1565), ('Antonio', 1884), ('Antonius', 1139), ('Antoon', 2329), ('Armand', 1933), ('Arnaud', 2111), ('Arne', 6368), ('Arno', 3833), ('Arnold', 1110), ('Arthur', 7857), ('August', 2576), ('Axel', 3177), ('Ayman', 1008), ('Ayoub', 1653), ('Bart', 28608), ('Bas', 1938), ('Ben', 5033), ('Benjamin', 5464), ('Benny', 5423), ('Benoit', 1450), ('Bernard', 4627), ('Bert', 8695), ('Bilal', 1922), ('Bjorn', 3795), ('Björn', 3946), ('Bob', 1651), ('Boris', 1250), ('Brahim', 1144), ('Bram', 8657), ('Brecht', 4008), ('Brent', 4164), ('Brian', 1733), ('Briek', 985), ('Bruno', 6801), ('Bryan', 1893), ('Carl', 2689), ('Carlo', 2039), ('Carlos', 2616), ('Cas', 1945), ('Casper', 1362), ('Cedric', 2647), ('Charles', 3721), ('Chris', 5309), ('Christiaan', 5304), ('Christian', 6553), ('Christof', 1477), ('Christoph', 1322), ('Christophe', 9500), ('Claude', 1852), ('Constant', 1375), ('Cornelis', 1071), ('Cyriel', 1705), ('Cédric', 3306), ('Daan', 6062), ('Daniel', 11950), ('Daniël', 5704), ('Danny', 14014), ('Dany', 2101), ('Dario', 1380), ('Dave', 2526), ('David', 16804), ('Davy', 7650), ('Dean', 1094), ('Denis', 2612), ('Dennis', 3712), ('Didier', 4702), ('Diederik', 1392), ('Diego', 1646), ('Dieter', 6396), ('Dimitri', 5964), ('Dirk', 31219), ('Dominique', 3983), ('Dries', 7557), ('Dylan', 4151), ('Eddy', 16551), ('Edgard', 1297), ('Edmond', 1413), ('Edouard', 1216), ('Eduard', 3451), ('Edward', 1834), ('Edwin', 1900), ('El', 1546), ('Elias', 4557), ('Emiel', 5975), ('Emile', 3736), ('Emmanuel', 2820), ('Eric', 15680), ('Erik', 11733), ('Erwin', 6314), ('Etienne', 7068), ('Fabian', 1327), ('Felix', 3453), ('Ferdinand', 1599), ('Fernand', 2367), ('Ferre', 3013), ('Filip', 12468), ('Finn', 3614), ('Flor', 1262), ('Florent', 1250), ('Florian', 1754), ('Floris', 1592), ('Francis', 4947), ('Franciscus', 4620), ('Frank', 14439), ('Franky', 4773), ('Frans', 11347), ('François', 10144), ('Freddy', 10632), ('Frederic', 1538), ('Frederick', 1009), ('Frederik', 7154), ('Frédéric', 2620), ('Gabriel', 2770), ('Gabriël', 1041), ('Gaston', 2482), ('Geert', 21142), ('Geoffrey', 1661), ('George', 1256), ('Georges', 7694), ('Gerard', 3417), ('Gerardus', 1106), ('Gerrit', 1956), ('Gerry', 1040), ('Gert', 6171), ('Ghislain', 1419), ('Gianni', 1608), ('Gilbert', 6635), ('Gilles', 4438), ('Gino', 4390), ('Giovanni', 2129), ('Giuseppe', 1250), ('Glenn', 6482), ('Gregory', 3007), ('Guido', 13295), ('Guillaume', 3037), ('Gunter', 1894), ('Gunther', 3181), ('Gust', 1755), ('Gustaaf', 4352), ('Guy', 11610), ('Hamza', 2370), ('Hannes', 1732), ('Hans', 9693), ('Harry', 1291), ('Hasan', 1560), ('Hassan', 1825), ('Hendrik', 6990), ('Henk', 1499), ('Henri', 8318), ('Henricus', 1528), ('Herman', 9236), ('Hubert', 4285), ('Hugo', 8287), ('Ian', 1954), ('Ibrahim', 3190), ('Ignace', 1783), ('Igor', 1052), ('Ilias', 2146), ('Ilyas', 1616), ('Imran', 1313), ('Ismail', 1821), ('Ivan', 6349), ('Ivo', 3879), ('Jaak', 1576), ('Jack', 2255), ('Jacob', 1159), ('Jacobus', 1852), ('Jacques', 7795), ('Jamal', 1125), ('James', 1671), ('Jan', 38107), ('Jari', 1111), ('Jarne', 3277), ('Jarno', 1610), ('Jason', 2377), ('Jasper', 6304), ('Jayden', 1595), ('Jean', 23651), ('Jean-Claude', 983), ('Jean-Marie', 1498), ('Jean-Paul', 1485), ('Jean-Pierre', 3944), ('Jef', 3956), ('Jeffrey', 2160), ('Jelle', 6886), ('Jens', 8330), ('Jeremy', 1045), ('Jeroen', 10446), ('Jesse', 2025), ('Jimmy', 3458), ('Jo', 3086), ('Joachim', 2548), ('Joannes', 4239), ('Jochen', 1826), ('Joeri', 4374), ('Johan', 29693), ('Johannes', 4491), ('John', 4592), ('Johnny', 4371), ('Johny', 2421), ('Jonas', 10866), ('Jonathan', 5528), ('Joost', 2193), ('Joppe', 1286), ('Joran', 1232), ('Jordi', 1308), ('Jordy', 3753), ('Joren', 2126), ('Joris', 7332), ('Jos', 2712), ('Joseph', 12355), ('Josephus', 3324), ('Joshua', 1110), ('Josse', 1054), ('José', 3827), ('Jozef', 21690), ('Joël', 1687), ('Juan', 1069), ('Jules', 5985), ('Julian', 1110), ('Julien', 6241), ('Jurgen', 5800), ('Juul', 1420), ('Jürgen', 3070), ('Kamiel', 1791), ('Karel', 8560), ('Karim', 1405), ('Karl', 1604), ('Kasper', 1792), ('Ken', 1966), ('Kenneth', 3834), ('Kenny', 4889), ('Kevin', 16042), ('Khalid', 1378), ('Kim', 2390), ('Kjell', 1139), ('Klaas', 1557), ('Kobe', 5551), ('Koen', 15022), ('Koenraad', 3456), ('Kris', 11238), ('Kristiaan', 1492), ('Kristof', 11645), ('Kurt', 10713), ('Lander', 3719), ('Lars', 6583), ('Laurens', 3704), ('Laurent', 3577), ('Leander', 1207), ('Lenn', 1396), ('Lennert', 2967), ('Leo', 5196), ('Leon', 6226), ('Leonard', 1093), ('Leopold', 2051), ('Levi', 1759), ('Lewis', 2070), ('Lex', 1073), ('Liam', 5622), ('Lieven', 4449), ('Lionel', 1116), ('Lode', 1814), ('Lodewijk', 2443), ('Lorenzo', 2320), ('Lou', 1780), ('Louis', 12930), ('Lowie', 3004), ('Loïc', 2094), ('Luc', 38634), ('Luca', 3120), ('Lucas', 8648), ('Lucien', 5158), ('Ludo', 5546), ('Ludovic', 1261), ('Ludovicus', 3950), ('Ludwig', 1671), ('Luka', 1250), ('Lukas', 3649), ('Léon', 1982), ('Maarten', 9051), ('Manuel', 1979), ('Marc', 43643), ('Marcel', 13967), ('Marco', 2452), ('Marcus', 1574), ('Mario', 7223), ('Mark', 3928), ('Marnix', 3209), ('Martijn', 1880), ('Martin', 4883), ('Mathias', 6267), ('Mathieu', 5061), ('Mathijs', 1477), ('Mathis', 4298), ('Mats', 3527), ('Matteo', 3595), ('Matthew', 1080), ('Matthias', 6831), ('Maurice', 5761), ('Maurits', 1498), ('Mauro', 2942), ('Max', 1913), ('Maxim', 5387), ('Maxime', 4105), ('Mehdi', 1105), ('Mehmet', 2458), ('Michael', 6907), ('Michaël', 5428), ('Michel', 13866), ('Michiel', 6741), ('Miel', 1529), ('Miguel', 1820), ('Mike', 3337), ('Milan', 5998), ('Milo', 27), ('Mohamad', 1154), ('Mohamed', 15295), ('Mohammad', 2663), ('Mohammed', 5837), ('Muhammed', 1339), ('Murat', 1161), ('Mustafa', 2946), ('Mustapha', 1096), ('Nand', 1350), ('Nathan', 4867), ('Nick', 8413), ('Nicky', 1155), ('Nico', 7393), ('Nicolas', 7088), ('Niels', 8462), ('Nils', 1702), ('Noah', 6152), ('Norbert', 2442), ('Noël', 3889), ('Oliver', 1394), ('Olivier', 7684), ('Omar', 2601), ('Omer', 1725), ('Oscar', 2771), ('Otis', 1173), ('Owen', 1167), ('Pascal', 8451), ('Patrick', 33673), ('Patrik', 998), ('Paul', 24369), ('Pedro', 1559), ('Peter', 31045), ('Petrus', 3264), ('Philip', 5372), ('Philippe', 10899), ('Pierre', 8633), ('Piet', 2415), ('Pieter', 14721), ('Pieter-Jan', 1875), ('Piotr', 983), ('Pol', 1080), ('Quinten', 4016), ('Rachid', 1901), ('Raf', 3681), ('Rafael', 1077), ('Rafaël', 1475), ('Raoul', 1454), ('Raphaël', 3121), ('Rayan', 2440), ('Raymond', 4361), ('Remi', 2370), ('Renaat', 1164), ('René', 8351), ('Richard', 2874), ('Rik', 5378), ('Rob', 2129), ('Robbe', 7095), ('Robby', 2174), ('Robert', 14189), ('Robin', 8624), ('Roel', 2794), ('Roeland', 1134), ('Roger', 16764), ('Roland', 6869), ('Romain', 2511), ('Ronald', 4742), ('Ronny', 10230), ('Rony', 2161), ('Roy', 1297), ('Ruben', 8565), ('Rudi', 8602), ('Rudolf', 2272), ('Rudy', 8506), ('Rune', 3126), ('Ryan', 1443), ('Said', 1810), ('Sam', 7843), ('Sami', 1089), ('Samir', 1268), ('Sammy', 1139), ('Samuel', 3007), ('Sander', 5928), ('Sebastiaan', 1599), ('Sebastian', 1685), ('Sem', 1937), ('Senne', 5283), ('Seppe', 6145), ('Serge', 4070), ('Siebe', 3031), ('Simon', 8202), ('Stan', 4075), ('Stef', 3647), ('Stefaan', 8349), ('Stefan', 8748), ('Stephan', 2496), ('Steve', 5305), ('Steven', 16397), ('Stijn', 13070), ('Stéphane', 1544), ('Sven', 9508), ('Sébastien', 1768), ('Theo', 2656), ('Theodoor', 986), ('Thibault', 2022), ('Thibaut', 1777), ('Thibo', 1716), ('Thierry', 4738), ('Thijs', 2452), ('Thomas', 17956), ('Thor', 1055), ('Tibe', 981), ('Tibo', 3054), ('Tijl', 1113), ('Tijs', 1174), ('Tim', 11570), ('Timo', 1107), ('Timothy', 2354), ('Tobias', 1007), ('Tom', 24659), ('Tomas', 1127), ('Tommy', 1707), ('Tony', 4293), ('Toon', 3210), ('Tristan', 2418), ('Tuur', 3209), ('Urbain', 1007), ('Valère', 1068), ('Vic', 3169), ('Victor', 8762), ('Viktor', 2836), ('Vince', 3617), ('Vincent', 8083), ('Walter', 9833), ('Wannes', 2817), ('Ward', 3667), ('Warre', 3098), ('Werner', 5470), ('Wesley', 4163), ('Wilfried', 5182), ('Wilhelmus', 986), ('Willem', 6532), ('William', 4555), ('Willy', 22434), ('Wim', 17900), ('Wout', 6567), ('Wouter', 8743), ('Xander', 3256), ('Xavier', 2971), ('Yannick', 4764), ('Yassin', 1078), ('Yassine', 1671), ('Younes', 1758), ('Youssef', 2678), ('Yusuf', 1559), ('Yvan', 2279), ('Yves', 9192), ('Zakaria', 1427), ('Ömer', 1032)))
A:faker.providers.person.nl_BE.__init__.first_names_female->OrderedDict((('Adriana', 1763), ('Agnes', 7830), ('Agnès', 2084), ('Aicha', 1247), ('Alexandra', 3095), ('Alexia', 1248), ('Alice', 5331), ('Alicia', 1750), ('Alina', 1583), ('Aline', 3281), ('Amber', 7480), ('Amelia', 1371), ('Amelie', 1761), ('Amina', 2237), ('Amira', 1322), ('Amy', 1935), ('Amélie', 4038), ('An', 9756), ('Ana', 2305), ('Anaïs', 2451), ('Andrea', 3150), ('Angela', 2139), ('Angelina', 1360), ('Angèle', 1519), ('Anita', 9194), ('Anja', 8755), ('Anke', 3470), ('Ann', 24685), ('Anna', 20785), ('Anne', 14326), ('Anne-Marie', 5699), ('Anneke', 1526), ('Anneleen', 2312), ('Annelies', 8475), ('Annemie', 2219), ('Annette', 1258), ('Annick', 8828), ('Annie', 14154), ('Annita', 1896), ('Anny', 5227), ('Anouk', 3255), ('Antoinette', 1539), ('Ariane', 1271), ('Arlette', 4633), ('Astrid', 4271), ('Audrey', 1385), ('Augusta', 1394), ('Aurélie', 2379), ('Axelle', 3442), ('Aya', 1788), ('Ayse', 1422), ('Barbara', 4555), ('Beatrice', 1810), ('Beatrijs', 1718), ('Bernadette', 3418), ('Bertha', 1915), ('Betty', 2384), ('Bianca', 2994), ('Bieke', 1586), ('Birgit', 1375), ('Bo', 2784), ('Brenda', 2366), ('Brigitta', 1467), ('Brigitte', 8901), ('Britt', 4019), ('Camille', 3694), ('Carina', 4095), ('Carine', 15540), ('Carla', 3208), ('Carmen', 2203), ('Carolien', 1345), ('Carolina', 1417), ('Caroline', 11730), ('Catharina', 3593), ('Catherine', 4021), ('Cathy', 1612), ('Cecile', 2412), ('Cecilia', 2103), ('Celine', 1989), ('Chantal', 9244), ('Charlotte', 12818), ('Chiara', 1272), ('Chloé', 2171), ('Chloë', 1999), ('Christa', 3016), ('Christel', 10648), ('Christelle', 1545), ('Christiana', 4731), ('Christiane', 17117), ('Christianne', 1556), ('Christina', 3669), ('Christine', 14532), ('Cindy', 11454), ('Claire', 1818), ('Clara', 3004), ('Claudia', 2946), ('Claudine', 4178), ('Colette', 1394), ('Conny', 3428), ('Cornelia', 1800), ('Cynthia', 2343), ('Cécile', 1661), ('Céline', 3152), ('Daisy', 3936), ('Danielle', 3802), ('Daphne', 1210), ('Debbie', 1301), ('Debby', 1535), ('Deborah', 2125), ('Delphine', 3258), ('Denise', 8634), ('Diana', 5793), ('Diane', 5547), ('Dina', 2511), ('Dominique', 4974), ('Dorien', 3745), ('Dorine', 2365), ('Edith', 2445), ('Elena', 5449), ('Eliane', 2191), ('Elien', 4073), ('Elif', 1440), ('Eline', 7637), ('Elisa', 4405), ('Elisabeth', 9021), ('Elise', 8341), ('Elke', 8317), ('Ella', 5463), ('Ellen', 11498), ('Ellie', 1194), ('Elly', 1777), ('Els', 17283), ('Elsa', 1207), ('Elza', 4100), ('Emilia', 1925), ('Emilie', 2938), ('Emily', 2839), ('Emma', 11748), ('Erika', 2154), ('Erna', 4355), ('Estelle', 1365), ('Esther', 3304), ('Eva', 8072), ('Evelien', 5078), ('Eveline', 3692), ('Evelyn', 1556), ('Evelyne', 2313), ('Evi', 3578), ('Evy', 3710), ('Fabienne', 3801), ('Fanny', 1798), ('Farah', 1278), ('Fatiha', 1265), ('Fatima', 6713), ('Fatma', 1947), ('Febe', 3097), ('Femke', 5575), ('Fien', 5583), ('Fleur', 3977), ('Floor', 1788), ('Flore', 1622), ('Florence', 1884), ('Fran', 1865), ('Francine', 7139), ('Françoise', 2716), ('Freya', 1269), ('Frida', 1196), ('Frieda', 4009), ('Gabriella', 1245), ('Gabrielle', 2035), ('Gaëlle', 1234), ('Georgette', 4707), ('Gerarda', 1936), ('Gerda', 7709), ('Germaine', 2002), ('Ghislaine', 1827), ('Gilberte', 2703), ('Gina', 1618), ('Ginette', 1485), ('Gisèle', 1417), ('Gitte', 1719), ('Godelieva', 2176), ('Godelieve', 17791), ('Greet', 3041), ('Greta', 9149), ('Griet', 3493), ('Hanna', 1469), ('Hannah', 2750), ('Hanne', 7995), ('Hannelore', 2613), ('Heidi', 8882), ('Heleen', 1290), ('Helena', 7025), ('Helga', 1504), ('Henriette', 1968), ('Hilda', 7960), ('Hilde', 17845), ('Huguette', 1859), ('Hélène', 2283), ('Ida', 1608), ('Ilona', 1400), ('Ilse', 11320), ('Imane', 1459), ('Ine', 3595), ('Ines', 2874), ('Inge', 11783), ('Ingeborg', 1526), ('Ingrid', 17534), ('Irena', 1954), ('Iris', 4203), ('Irma', 2148), ('Irène', 3886), ('Isabel', 3258), ('Isabella', 1195), ('Isabelle', 9228), ('Ivonne', 1323), ('Jacqueline', 10639), ('Jade', 2951), ('Jana', 5996), ('Janne', 3022), ('Jasmine', 1230), ('Jeanine', 3445), ('Jeanne', 4925), ('Jeannette', 1395), ('Jeannine', 11588), ('Jennifer', 2280), ('Jenny', 6116), ('Jessica', 4869), ('Jessie', 1266), ('Jessy', 1261), ('Jill', 3436), ('Joanna', 5733), ('Johanna', 3543), ('Joke', 5645), ('Jolien', 8045), ('Josepha', 1804), ('Josephina', 3042), ('Josephine', 2406), ('Josiane', 2631), ('José', 1919), ('Josée', 3325), ('Joyce', 3143), ('Joëlle', 1354), ('Judith', 1892), ('Julia', 5958), ('Juliana', 1319), ('Julie', 14016), ('Julienne', 1955), ('Juliette', 4718), ('Justine', 2430), ('Kaat', 3341), ('Karen', 6671), ('Karima', 1399), ('Karin', 6450), ('Karina', 2522), ('Karine', 4250), ('Karolien', 2745), ('Katelijne', 1466), ('Kathleen', 8619), ('Kathy', 2864), ('Katia', 2251), ('Katja', 1249), ('Katleen', 3872), ('Kato', 3511), ('Katrien', 15525), ('Katrijn', 1680), ('Katty', 1392), ('Kelly', 9166), ('Khadija', 2140), ('Kiara', 1193), ('Kim', 9550), ('Kimberley', 1469), ('Kimberly', 3711), ('Kirsten', 2252), ('Krista', 1537), ('Kristel', 5525), ('Kristien', 3727), ('Kristina', 1337), ('Kristine', 1727), ('Lana', 1593), ('Lara', 3630), ('Laura', 13947), ('Laure', 2630), ('Lauren', 2295), ('Laurence', 2219), ('Lea', 5471), ('Leen', 6357), ('Lena', 6069), ('Leona', 1884), ('Leonie', 2239), ('Lien', 6602), ('Lies', 3903), ('Liesbet', 2741), ('Liesbeth', 6527), ('Lieselot', 1628), ('Lieve', 5027), ('Lieze', 1471), ('Liliana', 1328), ('Liliane', 11030), ('Lily', 2389), ('Lina', 4137), ('Linda', 17990), ('Linde', 2148), ('Lindsay', 1966), ('Lindsey', 1437), ('Lisa', 8518), ('Lise', 2585), ('Lisette', 5589), ('Liv', 2040), ('Lize', 1738), ('Loes', 1439), ('Lore', 7851), ('Lotte', 8633), ('Louisa', 3360), ('Louise', 8126), ('Lucia', 2420), ('Lucie', 2899), ('Lucienne', 3846), ('Luna', 4523), ('Lutgarde', 5667), ('Lutgardis', 1728), ('Lutgart', 1238), ('Lydia', 5032), ('Lydie', 1463), ('Lynn', 3638), ('Maaike', 2042), ('Madeleine', 2624), ('Magali', 1375), ('Magda', 8093), ('Magdalena', 5259), ('Malika', 1690), ('Manon', 3793), ('Marcella', 2144), ('Margareta', 2835), ('Margaretha', 2933), ('Margaux', 2149), ('Margo', 1333), ('Margot', 3965), ('Marguerite', 1891), ('Maria', 84005), ('Mariam', 1455), ('Marianne', 5561), ('Marie', 42082), ('Marie-Christine', 1877), ('Marie-Claire', 1642), ('Marie-Jeanne', 2256), ('Marie-José', 1621), ('Marie-Louise', 2805), ('Marie-Rose', 1742), ('Marie-Thérèse', 1490), ('Marieke', 2194), ('Mariette', 6488), ('Marijke', 7878), ('Marina', 9824), ('Marjan', 1185), ('Marleen', 22451), ('Marlies', 1873), ('Martha', 3796), ('Marthe', 2578), ('Martina', 1976), ('Martine', 23567), ('Maryam', 1486), ('Mathilde', 1237), ('Maud', 1765), ('Maya', 2065), ('Melanie', 1716), ('Melissa', 6335), ('Merel', 2546), ('Mia', 4243), ('Micheline', 2854), ('Michelle', 2995), ('Michèle', 2609), ('Mieke', 6414), ('Mila', 3734), ('Mira', 1381), ('Miranda', 1849), ('Mireille', 4106), ('Mona', 2133), ('Monica', 2508), ('Monika', 1845), ('Monique', 21567), ('Myriam', 8905), ('Nadia', 6318), ('Nadine', 10186), ('Nancy', 15781), ('Naomi', 2656), ('Natacha', 1501), ('Natalia', 1478), ('Natalie', 2209), ('Natascha', 1600), ('Natasja', 1546), ('Nathalie', 16550), ('Nele', 8801), ('Nelly', 3714), ('Nicole', 17332), ('Nina', 5383), ('Noa', 2399), ('Noor', 5253), ('Nora', 4463), ('Nore', 1887), ('Noëlla', 1906), ('Odette', 3077), ('Olga', 2195), ('Olivia', 4685), ('Oona', 1511), ('Pascale', 5080), ('Patricia', 11556), ('Paula', 9017), ('Paulien', 2158), ('Pauline', 3256), ('Peggy', 5095), ('Petra', 5704), ('Rachel', 2620), ('Rani', 1535), ('Rania', 1310), ('Rebecca', 1910), ('Regina', 2099), ('Reinhilde', 1270), ('Renée', 3546), ('Ria', 4661), ('Rita', 29651), ('Romy', 1764), ('Roos', 2194), ('Rosa', 7245), ('Rosalia', 1421), ('Rosalie', 1595), ('Rose', 1284), ('Rosette', 3094), ('Rosita', 1345), ('Ruth', 2455), ('Sabine', 9869), ('Sabrina', 4489), ('Sam', 1809), ('Samira', 2072), ('Sandra', 12403), ('Sandy', 2141), ('Sanne', 2921), ('Sara', 10099), ('Sarah', 15389), ('Saskia', 3904), ('Shana', 2539), ('Sharon', 2167), ('Sien', 2112), ('Sigrid', 2235), ('Silke', 4799), ('Silvia', 1265), ('Simone', 2938), ('Simonne', 6519), ('Sofia', 2446), ('Sofie', 16942), ('Sonia', 4859), ('Sonja', 9209), ('Sophia', 1491), ('Sophie', 8008), ('Stefanie', 6235), ('Steffi', 1527), ('Stella', 1401), ('Stephanie', 6152), ('Stien', 1413), ('Stéphanie', 2684), ('Suzanna', 2178), ('Suzanne', 4367), ('Suzy', 1245), ('Sylvia', 3160), ('Sylvie', 4659), ('Tamara', 4386), ('Tania', 3564), ('Tanja', 2048), ('Tatiana', 1474), ('Tess', 1848), ('Tessa', 3083), ('Theresia', 1250), ('Tina', 2437), ('Tine', 4832), ('Tineke', 1530), ('Tinne', 1398), ('Valentina', 1375), ('Valerie', 4085), ('Valérie', 3114), ('Vanessa', 6425), ('Veerle', 12048), ('Vera', 6550), ('Veronique', 4845), ('Vicky', 4617), ('Victoria', 2024), ('Virginie', 2389), ('Viviane', 7507), ('Véronique', 4908), ('Wendy', 11011), ('Yana', 2642), ('Yara', 1321), ('Yasmina', 1486), ('Yasmine', 2681), ('Yolanda', 1641), ('Yolande', 2231), ('Yvette', 4226), ('Yvonne', 4767), ('Zeynep', 1240), ('Zita', 1245), ('Zoë', 4381)))
A:faker.providers.person.nl_BE.__init__.first_names->OrderedDict(Counter(first_names_male) + Counter(first_names_female))
A:faker.providers.person.nl_BE.__init__.last_names->OrderedDict((('Adams', 1819), ('Adriaensen', 1794), ('Adriaenssens', 1504), ('Aerts', 11048), ('Ahmed', 1828), ('Ali', 1709), ('Andries', 3617), ('Baele', 1465), ('Baert', 5608), ('Baeten', 2798), ('Baetens', 2477), ('Baeyens', 3418), ('Bauwens', 4545), ('Beckers', 3518), ('Beeckman', 1618), ('Beernaert', 1727), ('Bekaert', 2894), ('Belmans', 1784), ('Berghmans', 1606), ('Bertels', 2106), ('Bervoets', 1449), ('Beyens', 1708), ('Blommaert', 1622), ('Blomme', 2701), ('Blondeel', 1704), ('Boeckx', 1741), ('Bogaert', 4869), ('Bogaerts', 4692), ('Bollen', 2750), ('Bonte', 2313), ('Boon', 1673), ('Boone', 2679), ('Boonen', 2804), ('Borremans', 1922), ('Bosmans', 4959), ('Bossuyt', 1809), ('Bouckaert', 1620), ('Bracke', 2832), ('Braem', 1728), ('Breugelmans', 1656), ('Broeckx', 1602), ('Brouwers', 1520), ('Bruggeman', 2025), ('Bruneel', 1769), ('Bruyninckx', 1902), ('Buelens', 2153), ('Buyse', 1865), ('Buysse', 2141), ('Callebaut', 2096), ('Callens', 3750), ('Callewaert', 2561), ('Carlier', 1649), ('Casier', 2001), ('Casteleyn', 1480), ('Celis', 1915), ('Ceulemans', 4170), ('Ceuppens', 1578), ('Christiaens', 4621), ('Claes', 13525), ('Claesen', 1617), ('Claessens', 4062), ('Claeys', 8904), ('Claus', 2974), ('Coene', 1633), ('Coenen', 2965), ('Colman', 1500), ('Colpaert', 1818), ('Cools', 6568), ('Coppens', 6811), ('Cornelis', 5113), ('Cox', 2056), ('Cuypers', 3783), ('Cuyvers', 1497), ("D'Hondt", 2261), ("D'hondt", 2348), ('Daems', 3788), ('Daniels', 2186), ('David', 1933), ('De Backer', 7534), ('De Baere', 1576), ('De Baets', 2439), ('De Bie', 2541), ('De Block', 2599), ('De Bock', 3582), ('De Boeck', 3266), ('De Bondt', 1938), ('De Bruycker', 1864), ('De Bruyn', 3613), ('De Bruyne', 3567), ('De Clerck', 3353), ('De Clercq', 8606), ('De Cock', 6486), ('De Coninck', 3926), ('De Coster', 3426), ('De Cuyper', 1980), ('De Decker', 3401), ('De Graeve', 2152), ('De Greef', 2161), ('De Groof', 1519), ('De Groote', 4200), ('De Jonghe', 2651), ('De Keyser', 3242), ('De Laet', 2589), ('De Leeuw', 1540), ('De Maeyer', 2447), ('De Meester', 1969), ('De Mey', 1789), ('De Meyer', 5698), ('De Moor', 2746), ('De Mulder', 1747), ('De Muynck', 1568), ('De Neve', 2219), ('De Paepe', 2664), ('De Pauw', 5349), ('De Ridder', 5214), ('De Roeck', 2468), ('De Roo', 1485), ('De Roover', 1628), ('De Ryck', 1897), ('De Rycke', 1923), ('De Schepper', 2894), ('De Schrijver', 1671), ('De Schryver', 1661), ('De Schutter', 1909), ('De Smedt', 6067), ('De Smet', 12094), ('De Sutter', 2295), ('De Vos', 9015), ('De Vuyst', 2116), ('De Wachter', 1990), ('De Waele', 3373), ('De Weerdt', 1761), ('De Wilde', 5511), ('De Winter', 3748), ('De Wit', 3129), ('De Witte', 3673), ('De Wolf', 3439), ('De Wulf', 1715), ('Debruyne', 2637), ('Deceuninck', 1681), ('Deckers', 3144), ('Declerck', 3534), ('Declercq', 5175), ('Decock', 2484), ('Deconinck', 1677), ('Decoster', 2351), ('Degroote', 1584), ('Degryse', 1840), ('Dejonghe', 1825), ('Dekeyser', 1693), ('Delaere', 1717), ('Deleu', 1719), ('Deman', 1443), ('Demeulenaere', 1596), ('Demeyer', 1538), ('Demeyere', 1696), ('Demuynck', 2011), ('Denys', 1891), ('Depoorter', 2084), ('Deprez', 3081), ('Depuydt', 1863), ('Derycke', 1466), ('Desmedt', 2222), ('Desmet', 7897), ('Devolder', 1613), ('Devos', 6499), ('Devriendt', 1699), ('Dewaele', 2548), ('Dewilde', 1463), ('Dewitte', 1877), ('Dewulf', 3221), ('Dhondt', 3055), ('Diallo', 2213), ('Dierckx', 4202), ('Dierick', 1605), ('Dierickx', 3156), ('Dillen', 2152), ('Dobbelaere', 2337), ('Dockx', 1644), ('Driesen', 2675), ('Dubois', 2344), ('Dupont', 3008), ('Eeckhout', 2874), ('Engelen', 3298), ('Engels', 2820), ('Everaert', 2537), ('Faes', 1904), ('Feys', 1941), ('Fierens', 1799), ('Fransen', 1852), ('François', 1921), ('Galle', 1526), ('Geens', 3337), ('Geeraerts', 2198), ('Geerts', 5208), ('Geudens', 1695), ('Geuens', 1451), ('Gevaert', 1941), ('Gielen', 3915), ('Gillis', 1520), ('Goethals', 4344), ('Goossens', 13062), ('Goovaerts', 1985), ('Goris', 3278), ('Govaerts', 2402), ('Goyvaerts', 1473), ('Hanssens', 1496), ('Hellemans', 2037), ('Helsen', 2867), ('Hendrickx', 8190), ('Hens', 1539), ('Heremans', 1890), ('Herman', 1790), ('Hermans', 10690), ('Heylen', 4692), ('Heymans', 2285), ('Heyvaert', 2032), ('Holvoet', 1710), ('Horemans', 2063), ('Hoste', 2300), ('Houben', 2883), ('Huybrechts', 3294), ('Huyghe', 2873), ('Huys', 1778), ('Huysmans', 3609), ('Jacobs', 16329), ('Jans', 3185), ('Jansen', 4650), ('Janssen', 7920), ('Janssens', 24733), ('Jonckheere', 2364), ('Joos', 1897), ('Joris', 2046), ('Kaur', 1465), ('Kaya', 1577), ('Kenis', 1694), ('Kerkhofs', 1771), ('Knockaert', 1772), ('Laenen', 2198), ('Lambert', 2205), ('Lambrecht', 2771), ('Lambrechts', 4989), ('Lammens', 2061), ('Laureys', 2065), ('Lauwers', 5422), ('Leemans', 3176), ('Lemmens', 7243), ('Lenaerts', 5136), ('Leroy', 1716), ('Leys', 2584), ('Leysen', 2439), ('Liekens', 1965), ('Lievens', 4245), ('Lippens', 2267), ('Loos', 1950), ('Luyckx', 2825), ('Luyten', 3962), ('Maertens', 2967), ('Maes', 21410), ('Mahieu', 2207), ('Malfait', 1535), ('Marien', 1706), ('Maris', 1506), ('Mariën', 3169), ('Martens', 9695), ('Matthijs', 1577), ('Matthys', 3658), ('Meersman', 1769), ('Meert', 2844), ('Mees', 1815), ('Meeus', 3197), ('Melis', 2127), ('Merckx', 2353), ('Mertens', 14720), ('Mestdagh', 2133), ('Meyers', 1437), ('Michiels', 9056), ('Michielsen', 2244), ('Moens', 4953), ('Moerman', 2608), ('Moonen', 1518), ('Moons', 3226), ('Moors', 2207), ('Moreels', 1598), ('Mortier', 3241), ('Naessens', 2265), ('Neirynck', 1653), ('Nelissen', 1513), ('Neven', 1501), ('Neyens', 1715), ('Nijs', 4206), ('Nuyts', 2984), ('Nys', 3433), ('Ooms', 2822), ('Op de Beeck', 2157), ('Parmentier', 2019), ('Pattyn', 2299), ('Pauwels', 11234), ('Peeters', 27625), ('Peters', 1978), ('Philips', 2285), ('Pieters', 4405), ('Poelmans', 1634), ('Polfliet', 1442), ('Pollet', 1811), ('Poppe', 2412), ('Praet', 1443), ('Proost', 2043), ('Put', 2001), ('Raes', 3810), ('Raeymaekers', 1843), ('Ramaekers', 1787), ('Renders', 2215), ('Reynaert', 1805), ('Reynders', 2948), ('Roelandt', 2111), ('Roels', 3982), ('Rogiers', 1978), ('Rombaut', 1756), ('Rombouts', 1850), ('Roose', 2039), ('Roosen', 1812), ('Rosseel', 2022), ('Rottiers', 1472), ('Rutten', 2007), ('Sabbe', 1842), ('Saelens', 1487), ('Samyn', 1875), ('Sanders', 1835), ('Schepens', 2550), ('Schepers', 3019), ('Schoofs', 1907), ('Segers', 7482), ('Seghers', 1784), ('Sels', 1913), ('Simoens', 1551), ('Simons', 4259), ('Singh', 3338), ('Slegers', 1619), ('Smeets', 3356), ('Smet', 6103), ('Smets', 8517), ('Smits', 3291), ('Smolders', 2118), ('Snauwaert', 1467), ('Somers', 3832), ('Staelens', 2138), ('Standaert', 1654), ('Stas', 1464), ('Sterckx', 2923), ('Stevens', 7609), ('Steyaert', 2016), ('Stroobants', 1829), ('Swennen', 1490), ('Swinnen', 3550), ('Tack', 2361), ('Tanghe', 2436), ('Temmerman', 3033), ('Theunis', 1766), ('Theys', 1794), ('Thijs', 4532), ('Thomas', 2242), ('Thys', 5018), ('Tielemans', 1496), ('Timmerman', 1909), ('Timmermans', 4855), ('Torfs', 2719), ('Troch', 1524), ('Vaes', 2814), ('Van Acker', 4075), ('Van Assche', 2446), ('Van Baelen', 1574), ('Van Belle', 2339), ('Van Bogaert', 1455), ('Van Camp', 3020), ('Van Campenhout', 1796), ('Van Daele', 3406), ('Van Damme', 8481), ('Van Dessel', 2283), ('Van Dijck', 2138), ('Van Dooren', 1528), ('Van Driessche', 2524), ('Van Dyck', 4872), ('Van Genechten', 1711), ('Van Gestel', 2018), ('Van Goethem', 3348), ('Van Gorp', 2203), ('Van Hecke', 4109), ('Van Herck', 2701), ('Van Hoecke', 1722), ('Van Hoof', 4179), ('Van Hove', 3609), ('Van Hulle', 1529), ('Van Impe', 1864), ('Van Laer', 1981), ('Van Laere', 2410), ('Van Landeghem', 1728), ('Van Lierde', 1613), ('Van Loo', 2240), ('Van Loock', 1665), ('Van Loon', 1937), ('Van Looveren', 2207), ('Van Looy', 2892), ('Van Nuffel', 1719), ('Van Parys', 1453), ('Van Poucke', 1583), ('Van Praet', 1585), ('Van Raemdonck', 1482), ('Van Rompaey', 2437), ('Van Roy', 2441), ('Van de Velde', 7761), ('Van de Voorde', 2658), ('Van de Walle', 2445), ('Van den Bergh', 3421), ('Van den Berghe', 2788), ('Van den Bosch', 2429), ('Van den Bossche', 4470), ('Van den Brande', 2969), ('Van den Broeck', 6977), ('Van den Eynde', 3352), ('Van der Auwera', 1931), ('Van der Linden', 1484), ('Vanbrabant', 1465), ('Vandaele', 2747), ('Vandamme', 3788), ('Vandecasteele', 2198), ('Vandekerckhove', 2540), ('Vandenberghe', 5021), ('Vandenbroucke', 2912), ('Vandenbussche', 3018), ('Vandendriessche', 2965), ('Vandeputte', 3010), ('Vanderheyden', 1781), ('Vanderlinden', 1672), ('Vanderstraeten', 2213), ('Vandevelde', 3340), ('Vandewalle', 3435), ('Vanhee', 1884), ('Vanhoutte', 3206), ('Vanhove', 3263), ('Vanneste', 3563), ('Vansteenkiste', 2351), ('Verbeeck', 3620), ('Verbeke', 5173), ('Verbiest', 1767), ('Verbist', 2413), ('Verboven', 2295), ('Verbruggen', 3835), ('Verbrugghe', 1491), ('Vercammen', 4018), ('Vercauteren', 3750), ('Vercruysse', 3532), ('Verdonck', 3722), ('Vereecke', 1832), ('Vereecken', 2011), ('Verelst', 2490), ('Verfaillie', 1755), ('Vergauwen', 1682), ('Verhaegen', 3890), ('Verhaeghe', 4339), ('Verhelst', 4056), ('Verheyden', 3138), ('Verheyen', 5656), ('Verhoeven', 6452), ('Verhulst', 3410), ('Verlinden', 4955), ('Vermeersch', 4688), ('Vermeir', 1914), ('Vermeire', 2870), ('Vermeiren', 5030), ('Vermeulen', 11300), ('Vermeylen', 1624), ('Verschueren', 4870), ('Verstappen', 1545), ('Verstraete', 5731), ('Verstraeten', 4484), ('Vervaeke', 1575), ('Vervaet', 1716), ('Vervoort', 3912), ('Verwimp', 1676), ('Viaene', 2290), ('Vinck', 1661), ('Vissers', 1852), ('Vlaeminck', 1525), ('Vleugels', 1475), ('Voet', 1635), ('Vos', 3337), ('Vrancken', 2096), ('Vranckx', 1635), ('Vranken', 2538), ('Wauters', 5713), ('Wellens', 2311), ('Willaert', 2140), ('Willekens', 1889), ('Willems', 14709), ('Wouters', 13352), ('Wuyts', 4945), ('Wynants', 1604), ('Yildirim', 1560), ('Yilmaz', 2779)))
faker.providers.person.nl_BE.__init__.Provider(PersonProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/isbn/__init__.py----------------------------------------
A:faker.providers.isbn.__init__.(registrant, publication)->self._registrant_publication(reg_pub, rules)
A:faker.providers.isbn.__init__.(ean, group, registrant, publication)->self._body()
A:faker.providers.isbn.__init__.isbn->ISBN10(ean, group, registrant, publication)
faker.providers.isbn.__init__.Provider(BaseProvider)
faker.providers.isbn.__init__.Provider._body(self)->List[str]
faker.providers.isbn.__init__.Provider._registrant_publication(reg_pub:str,rules:List[Tuple[str,str,int]])->Tuple[str, str]
faker.providers.isbn.__init__.Provider.isbn10(self,separator:str='-')->str
faker.providers.isbn.__init__.Provider.isbn13(self,separator:str='-')->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/isbn/isbn.py----------------------------------------
A:faker.providers.isbn.isbn.self.check_digit->self._check_digit()
A:faker.providers.isbn.isbn.body->''.join([part for part in [self.group, self.registrant, self.publication] if part is not None])
A:faker.providers.isbn.isbn.weights->range(1, 10)
faker.providers.isbn.ISBN10(self,*args:Any,**kwargs:Any)
faker.providers.isbn.ISBN10._check_digit(self)->str
faker.providers.isbn.ISBN10.format(self,separator:str='')->str
faker.providers.isbn.ISBN13(self,*args:Any,**kwargs:Any)
faker.providers.isbn.ISBN13._check_digit(self)->str
faker.providers.isbn.ISBN13.format(self,separator:str='')->str
faker.providers.isbn.isbn.ISBN(self,ean:Optional[str]=None,group:Optional[str]=None,registrant:Optional[str]=None,publication:Optional[str]=None)
faker.providers.isbn.isbn.ISBN.__init__(self,ean:Optional[str]=None,group:Optional[str]=None,registrant:Optional[str]=None,publication:Optional[str]=None)
faker.providers.isbn.isbn.ISBN10(self,*args:Any,**kwargs:Any)
faker.providers.isbn.isbn.ISBN10.__init__(self,*args:Any,**kwargs:Any)
faker.providers.isbn.isbn.ISBN10._check_digit(self)->str
faker.providers.isbn.isbn.ISBN10.format(self,separator:str='')->str
faker.providers.isbn.isbn.ISBN13(self,*args:Any,**kwargs:Any)
faker.providers.isbn.isbn.ISBN13.__init__(self,*args:Any,**kwargs:Any)
faker.providers.isbn.isbn.ISBN13._check_digit(self)->str
faker.providers.isbn.isbn.ISBN13.format(self,separator:str='')->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/isbn/en_US/__init__.py----------------------------------------
faker.providers.isbn.en_US.__init__.Provider(ISBNProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/isbn/es_ES/__init__.py----------------------------------------
faker.providers.isbn.es_ES.__init__.Provider(ISBNProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/__init__.py----------------------------------------
faker.providers.company.__init__.Provider(BaseProvider)
faker.providers.company.__init__.Provider.bs(self)->str
faker.providers.company.__init__.Provider.catch_phrase(self)->str
faker.providers.company.__init__.Provider.company(self)->str
faker.providers.company.__init__.Provider.company_suffix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/it_IT/__init__.py----------------------------------------
A:faker.providers.company.it_IT.__init__.val->self.random_int(1, 104)
A:faker.providers.company.it_IT.__init__.luhn_checksum->str(calculate_luhn(int(code)))
faker.providers.company.it_IT.__init__.Provider(CompanyProvider)
faker.providers.company.it_IT.__init__.Provider._random_vat_office(self)->int
faker.providers.company.it_IT.__init__.Provider.company_vat(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/ru_RU/__init__.py----------------------------------------
faker.providers.company.ru_RU.__init__.Provider(CompanyProvider)
faker.providers.company.ru_RU.__init__.Provider.businesses_inn(self)->str
faker.providers.company.ru_RU.__init__.Provider.businesses_ogrn(self)->str
faker.providers.company.ru_RU.__init__.Provider.catch_phrase(self)->str
faker.providers.company.ru_RU.__init__.Provider.company_prefix(self)->str
faker.providers.company.ru_RU.__init__.Provider.individuals_inn(self)->str
faker.providers.company.ru_RU.__init__.Provider.individuals_ogrn(self)->str
faker.providers.company.ru_RU.__init__.Provider.kpp(self)->str
faker.providers.company.ru_RU.__init__.Provider.large_company(self)->str
faker.providers.company.ru_RU.__init__.calculate_checksum(value:str)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/sk_SK/__init__.py----------------------------------------
faker.providers.company.sk_SK.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/zh_TW/__init__.py----------------------------------------
faker.providers.company.zh_TW.__init__.Provider(CompanyProvider)
faker.providers.company.zh_TW.__init__.Provider.company_prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/pt_PT/__init__.py----------------------------------------
faker.providers.company.pt_PT.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/ro_RO/__init__.py----------------------------------------
faker.providers.company.ro_RO.__init__.Provider(CompanyProvider)
faker.providers.company.ro_RO.__init__.Provider.company_suffix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/az_AZ/__init__.py----------------------------------------
faker.providers.company.az_AZ.__init__.Provider(CompanyProvider)
faker.providers.company.az_AZ.__init__.Provider.large_company(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/tr_TR/__init__.py----------------------------------------
faker.providers.company.tr_TR.__init__.Provider(CompanyProvider)
faker.providers.company.tr_TR.__init__.Provider.large_company(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/hy_AM/__init__.py----------------------------------------
faker.providers.company.hy_AM.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/fr_CH/__init__.py----------------------------------------
A:faker.providers.company.fr_CH.__init__.digits->''.join([str(digit) for digit in digits])
A:faker.providers.company.fr_CH.__init__.sum_->_checksum(digits)
faker.providers.company.fr_CH.__init__.Provider(CompanyProvider)
faker.providers.company.fr_CH.__init__.Provider.ide(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/sl_SI/__init__.py----------------------------------------
faker.providers.company.sl_SI.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/id_ID/__init__.py----------------------------------------
faker.providers.company.id_ID.__init__.Provider(CompanyProvider)
faker.providers.company.id_ID.__init__.Provider.company_prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/cs_CZ/__init__.py----------------------------------------
faker.providers.company.cs_CZ.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/pl_PL/__init__.py----------------------------------------
A:faker.providers.company.pl_PL.__init__.check_digit->company_vat_checksum(vat_digits)
faker.providers.company.pl_PL.__init__.Provider(CompanyProvider)
faker.providers.company.pl_PL.__init__.Provider.company_prefix(self)->str
faker.providers.company.pl_PL.__init__.Provider.company_vat(self)->str
faker.providers.company.pl_PL.__init__.Provider.local_regon(self)->str
faker.providers.company.pl_PL.__init__.Provider.regon(self)->str
faker.providers.company.pl_PL.__init__.company_vat_checksum(digits:List[int])->int
faker.providers.company.pl_PL.__init__.local_regon_checksum(digits:List[int])->int
faker.providers.company.pl_PL.__init__.regon_checksum(digits:List[int])->int


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/da_DK/__init__.py----------------------------------------
faker.providers.company.da_DK.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/zh_CN/__init__.py----------------------------------------
faker.providers.company.zh_CN.__init__.Provider(CompanyProvider)
faker.providers.company.zh_CN.__init__.Provider.company_prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/es_MX/__init__.py----------------------------------------
faker.providers.company.es_MX.__init__.Provider(CompanyProvider)
faker.providers.company.es_MX.__init__.Provider.company_prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/pt_BR/__init__.py----------------------------------------
A:faker.providers.company.pt_BR.__init__.digits->self.company_id()
A:faker.providers.company.pt_BR.__init__.dv->sum((w * d for (w, d) in zip(weights[1:], digits)))
A:faker.providers.company.pt_BR.__init__.dv2->sum((w * d for (w, d) in zip(weights, digits)))
A:faker.providers.company.pt_BR.__init__.catch_phrase->self.generator.parse(pattern)
faker.providers.company.pt_BR.__init__.Provider(CompanyProvider)
faker.providers.company.pt_BR.__init__.Provider.catch_phrase(self)->str
faker.providers.company.pt_BR.__init__.Provider.catch_phrase_attribute(self)->str
faker.providers.company.pt_BR.__init__.Provider.catch_phrase_noun(self)->str
faker.providers.company.pt_BR.__init__.Provider.catch_phrase_verb(self)->str
faker.providers.company.pt_BR.__init__.Provider.cnpj(self)->str
faker.providers.company.pt_BR.__init__.Provider.company_id(self)->str
faker.providers.company.pt_BR.__init__.company_id_checksum(digits:List[int])->List[int]


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/nl_NL/__init__.py----------------------------------------
faker.providers.company.nl_NL.__init__.Provider(CompanyProvider)
faker.providers.company.nl_NL.__init__.Provider.company_prefix(self)->str
faker.providers.company.nl_NL.__init__.Provider.large_company(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/tl_PH/__init__.py----------------------------------------
faker.providers.company.tl_PH.__init__.Provider(FilPhProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/bg_BG/__init__.py----------------------------------------
faker.providers.company.bg_BG.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/no_NO/__init__.py----------------------------------------
faker.providers.company.no_NO.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/hu_HU/__init__.py----------------------------------------
faker.providers.company.hu_HU.__init__.Provider(CompanyProvider)
faker.providers.company.hu_HU.__init__.Provider.company_suffix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/hr_HR/__init__.py----------------------------------------
faker.providers.company.hr_HR.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/th_TH/__init__.py----------------------------------------
A:faker.providers.company.th_TH.__init__.formats->OrderedDict((('{{company_limited_prefix}}{{last_name}} {{company_limited_suffix}}', 0.2), ('{{company_limited_prefix}}{{last_name}}{{company_suffix}} {{company_limited_suffix}}', 0.2), ('{{company_limited_prefix}}{{last_name}} {{company_limited_suffix}}', 0.2), ('{{company_prefix}}{{last_name}}', 0.2), ('{{company_prefix}}{{last_name}}{{company_suffix}}', 0.2), ('{{last_name}}{{company_suffix}}', 0.1), ('{{nonprofit_prefix}}{{last_name}}', 0.1), ('{{last_name}}-{{last_name}}', 0.05), ('{{last_name}}และ{{last_name}}', 0.05), ('{{company_limited_prefix}}{{last_name}}', 0.01)))
A:faker.providers.company.th_TH.__init__.company_prefixes->OrderedDict((('ห้างหุ้นส่วนจำกัด ', 0.3), ('หจก.', 0.2), ('บจก.', 0.1), ('บมจ.', 0.1), ('ห้างหุ้นส่วนสามัญ ', 0.1), ('หสน.', 0.01)))
A:faker.providers.company.th_TH.__init__.nonprofit_prefixes->OrderedDict((('สมาคม', 0.4), ('มูลนิธิ', 0.3), ('ชมรม', 0.2), ('สหภาพแรงงาน', 0.1)))
A:faker.providers.company.th_TH.__init__.company_limited_prefixes->OrderedDict((('บริษัท ', 0.95), ('ธนาคาร', 0.03), ('บริษัทหลักทรัพย์ ', 0.005), ('กองทุนรวม', 0.005)))
A:faker.providers.company.th_TH.__init__.company_limited_suffixes->OrderedDict((('จำกัด', 0.85), ('จำกัด (มหาชน)', 0.15)))
faker.providers.company.th_TH.__init__.Provider(CompanyProvider)
faker.providers.company.th_TH.__init__.Provider.company_limited_prefix(self)->str
faker.providers.company.th_TH.__init__.Provider.company_limited_suffix(self)->str
faker.providers.company.th_TH.__init__.Provider.company_prefix(self)->str
faker.providers.company.th_TH.__init__.Provider.nonprofit_prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/de_DE/__init__.py----------------------------------------
faker.providers.company.de_DE.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/en_US/__init__.py----------------------------------------
faker.providers.company.en_US.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/es_CL/__init__.py----------------------------------------
faker.providers.company.es_CL.__init__.Provider(CompanyProvider)
faker.providers.company.es_CL.__init__.Provider.company_prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/ko_KR/__init__.py----------------------------------------
faker.providers.company.ko_KR.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/es_ES/__init__.py----------------------------------------
A:faker.providers.company.es_ES.__init__.company_suffixes->OrderedDict([('S.A.', 0.19860906), ('S.A.D', 0.01020618), ('S.A.T.', 0.02307813), ('S.A.U', 0.01506562), ('S.C.P', 0.04465719), ('S.Com.', 0.15636432), ('S.Coop.', 0.17394866), ('S.L.', 0.18325857), ('S.L.L.', 0.05800693), ('S.L.N.E', 0.11496705), ('S.L.U.', 0.02183831)])
A:faker.providers.company.es_ES.__init__.letters->self.random_letters(self.random_int(2, 4))
faker.providers.company.es_ES.__init__.Provider(CompanyProvider)
faker.providers.company.es_ES.__init__.Provider.company_prefix(self)->str
faker.providers.company.es_ES.__init__.Provider.company_suffix(self)->str
faker.providers.company.es_ES.__init__.Provider.company_type(self)->str
faker.providers.company.es_ES.__init__.Provider.random_company_acronym(self)->str
faker.providers.company.es_ES.__init__.Provider.random_company_adjective(self)->str
faker.providers.company.es_ES.__init__.Provider.random_name_complements(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/sv_SE/__init__.py----------------------------------------
faker.providers.company.sv_SE.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/el_GR/__init__.py----------------------------------------
faker.providers.company.el_GR.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/fa_IR/__init__.py----------------------------------------
faker.providers.company.fa_IR.__init__.Provider(CompanyProvider)
faker.providers.company.fa_IR.__init__.Provider.company(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/vi_VN/__init__.py----------------------------------------
faker.providers.company.vi_VN.__init__.Provider(CompanyProvider)
faker.providers.company.vi_VN.__init__.Provider.company_suffix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/en_PH/__init__.py----------------------------------------
A:faker.providers.company.en_PH.__init__.formats->OrderedDict([('{{random_company_adjective}} {{random_company_noun_chain}} {{company_type}} {{company_suffix}}', 0.24), ('{{random_company_acronym}} {{random_company_noun_chain}} {{company_type}} {{company_suffix}}', 0.24), ('{{last_name}} {{random_company_noun_chain}} {{company_type}} {{company_suffix}}', 0.16), ('{{random_company_adjective}} {{company_type}} {{company_suffix}}', 0.12), ('{{random_company_acronym}} {{company_type}} {{company_suffix}}', 0.12), ('{{last_name}} {{company_type}} {{company_suffix}}', 0.09), ('National {{random_company_product}} Corporation of the Philippines', 0.03)])
A:faker.providers.company.en_PH.__init__.company_suffixes->OrderedDict([('Inc.', 0.45), ('Corporation', 0.45), ('Limited', 0.1)])
A:faker.providers.company.en_PH.__init__.letters->self.random_letters(self.random_int(2, 4))
faker.providers.company.en_PH.__init__.Provider(CompanyProvider)
faker.providers.company.en_PH.__init__.Provider.company_type(self)->str
faker.providers.company.en_PH.__init__.Provider.random_company_acronym(self)->str
faker.providers.company.en_PH.__init__.Provider.random_company_adjective(self)->str
faker.providers.company.en_PH.__init__.Provider.random_company_noun_chain(self)->str
faker.providers.company.en_PH.__init__.Provider.random_company_product(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/fi_FI/__init__.py----------------------------------------
A:faker.providers.company.fi_FI.__init__.first_digit->str(self.random_digit_not_null())
A:faker.providers.company.fi_FI.__init__.cs->calculate_checksum(body)
faker.providers.company.fi_FI.__init__.Provider(CompanyProvider)
faker.providers.company.fi_FI.__init__.Provider.company_business_id(self)->str
faker.providers.company.fi_FI.__init__.Provider.company_vat(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/fr_FR/__init__.py----------------------------------------
A:faker.providers.company.fr_FR.__init__.catch_phrase->self.generator.parse(pattern)
A:faker.providers.company.fr_FR.__init__.begin_pos->self.generator.parse(pattern).find(word)
A:faker.providers.company.fr_FR.__init__.end_pos->self.generator.parse(pattern).find(word, begin_pos + 1)
A:faker.providers.company.fr_FR.__init__.code->self.numerify('########')
A:faker.providers.company.fr_FR.__init__.luhn_checksum->str(calculate_luhn(float(code)))
A:faker.providers.company.fr_FR.__init__.sequential_number->str(self.random_number(max_sequential_digits)).zfill(4)
faker.providers.company.fr_FR.__init__.Provider(CompanyProvider)
faker.providers.company.fr_FR.__init__.Provider._is_catch_phrase_valid(self,catch_phrase:str)->bool
faker.providers.company.fr_FR.__init__.Provider.catch_phrase(self)->str
faker.providers.company.fr_FR.__init__.Provider.catch_phrase_attribute(self)->str
faker.providers.company.fr_FR.__init__.Provider.catch_phrase_noun(self)->str
faker.providers.company.fr_FR.__init__.Provider.catch_phrase_verb(self)->str
faker.providers.company.fr_FR.__init__.Provider.siren(self)->str
faker.providers.company.fr_FR.__init__.Provider.siret(self,max_sequential_digits:int=2)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/bn_BD/__init__.py----------------------------------------
faker.providers.company.bn_BD.__init__.Provider(CompanyProvider)
faker.providers.company.bn_BD.__init__.Provider.company(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/ja_JP/__init__.py----------------------------------------
faker.providers.company.ja_JP.__init__.Provider(CompanyProvider)
faker.providers.company.ja_JP.__init__.Provider.company_category(self)->str
faker.providers.company.ja_JP.__init__.Provider.company_prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/fil_PH/__init__.py----------------------------------------
A:faker.providers.company.fil_PH.__init__.catch_phrase_formats->OrderedDict([('{{english_catch_phrase}}', 0.64), ('Ang {{random_noun_ish_good_trait}} ng {{random_object_of_concern}}!', 0.12), ('Serbisyong {{random_good_service_adjective}} para sa {{random_object_of_concern}}!', 0.12), ('Kahit kailan, {{random_good_service_adjective_chain}}!', 0.12)])
faker.providers.company.fil_PH.__init__.Provider(EnPhProvider)
faker.providers.company.fil_PH.__init__.Provider.catch_phrase(self)->str
faker.providers.company.fil_PH.__init__.Provider.english_catch_phrase(self)->str
faker.providers.company.fil_PH.__init__.Provider.random_good_service_adjective(self)->str
faker.providers.company.fil_PH.__init__.Provider.random_good_service_adjective_chain(self)->str
faker.providers.company.fil_PH.__init__.Provider.random_noun_ish_good_trait(self)->str
faker.providers.company.fil_PH.__init__.Provider.random_object_of_concern(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/company/nl_BE/__init__.py----------------------------------------
faker.providers.company.nl_BE.__init__.Provider(CompanyProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/credit_card/__init__.py----------------------------------------
A:faker.providers.credit_card.__init__.card_type->self.random_element(self.credit_card_types.keys())
A:faker.providers.credit_card.__init__.card->self._credit_card_type(card_type)
A:faker.providers.credit_card.__init__.number->self.numerify(number)
A:faker.providers.credit_card.__init__.expire_date->self.generator.date_time_between(start, end)
A:faker.providers.credit_card.__init__.tpl->tpl.format(provider=card.name, owner=self.generator.parse('{{first_name}} {{last_name}}'), number=self.credit_card_number(card), expire_date=self.credit_card_expire(), security=card.security_code, security_nb=self.credit_card_security_code(card)).format(provider=card.name, owner=self.generator.parse('{{first_name}} {{last_name}}'), number=self.credit_card_number(card), expire_date=self.credit_card_expire(), security=card.security_code, security_nb=self.credit_card_security_code(card))
faker.providers.credit_card.__init__.Provider(BaseProvider)
faker.providers.credit_card.__init__.Provider._credit_card_type(self,card_type:Optional[CardType]=None)->CreditCard
faker.providers.credit_card.__init__.Provider._generate_number(self,prefix:str,length:int)->str
faker.providers.credit_card.__init__.Provider.credit_card_expire(self,start:DateParseType='now',end:DateParseType='+10y',date_format:str='%m/%y')->str
faker.providers.credit_card.__init__.Provider.credit_card_full(self,card_type:Optional[CardType]=None)->str
faker.providers.credit_card.__init__.Provider.credit_card_number(self,card_type:Optional[CardType]=None)->str
faker.providers.credit_card.__init__.Provider.credit_card_provider(self,card_type:Optional[CardType]=None)->str
faker.providers.credit_card.__init__.Provider.credit_card_security_code(self,card_type:Optional[CardType]=None)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/credit_card/ru_RU/__init__.py----------------------------------------
A:faker.providers.credit_card.ru_RU.__init__.credit_card_types->OrderedDict((('visa', CreditCard('Visa', prefix_visa, security_code='CVV2')), ('mastercard', CreditCard('Mastercard', prefix_mastercard, security_code='CVC2')), ('mir', CreditCard('МИР', prefix_mir)), ('maestro', CreditCard('Maestro', prefix_maestro, security_code='CVV2')), ('amex', CreditCard('American Express', prefix_amex, 15, security_code='CID', security_code_length=4)), ('unionpay', CreditCard('Union Pay', prefix_unionpay))))
A:faker.providers.credit_card.ru_RU.__init__.card->self._credit_card_type(card_type)
A:faker.providers.credit_card.ru_RU.__init__.tpl->tpl.format(provider=card.name, owner=translit(self.generator.parse(self.random_element(['{{first_name_male}} {{last_name_male}}', '{{first_name_female}} {{last_name_female}}']))), number=self.credit_card_number(card), expire_date=self.credit_card_expire(), security=card.security_code, security_nb=self.credit_card_security_code(card), issuer=self.generator.parse('{{bank}}')).format(provider=card.name, owner=translit(self.generator.parse(self.random_element(['{{first_name_male}} {{last_name_male}}', '{{first_name_female}} {{last_name_female}}']))), number=self.credit_card_number(card), expire_date=self.credit_card_expire(), security=card.security_code, security_nb=self.credit_card_security_code(card), issuer=self.generator.parse('{{bank}}'))
faker.providers.credit_card.ru_RU.__init__.Provider(CreditCardProvider)
faker.providers.credit_card.ru_RU.__init__.Provider.credit_card_full(self,card_type:Optional[CardType]=None)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/credit_card/pt_PT/__init__.py----------------------------------------
A:faker.providers.credit_card.pt_PT.__init__.credit_card_types->OrderedDict((('maestro', CreditCard('Maestro', prefix_maestro, 16, security_code='CVV2')), ('mastercard', CreditCard('Mastercard', prefix_mastercard, 16, security_code='CVV2')), ('visa', CreditCard('Visa', prefix_visa, 16, security_code='CVV2'))))
faker.providers.credit_card.pt_PT.__init__.Provider(CreditCardProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/credit_card/en_US/__init__.py----------------------------------------
faker.providers.credit_card.en_US.__init__.Provider(CreditCardProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/credit_card/uk_UA/__init__.py----------------------------------------
A:faker.providers.credit_card.uk_UA.__init__.credit_card_types->OrderedDict((('visa', CreditCard('Visa', prefix_visa, security_code='CVV2')), ('mastercard', CreditCard('Mastercard', prefix_mastercard, security_code='CVC2')), ('prostir', CreditCard('ПРОСТІР', prefix_prostir, security_code='CVC2')), ('maestro', CreditCard('Maestro', prefix_maestro, security_code='CVV'))))
A:faker.providers.credit_card.uk_UA.__init__.card->self._credit_card_type(card_type)
A:faker.providers.credit_card.uk_UA.__init__.tpl->tpl.format(provider=card.name, owner=translit(self.generator.parse(self.random_element(['{{first_name_male}} {{last_name_male}}', '{{first_name_female}} {{last_name_female}}']))), number=self.credit_card_number(card), expire_date=self.credit_card_expire(), security=card.security_code, security_nb=self.credit_card_security_code(card), issuer=self.generator.parse('{{bank}}')).format(provider=card.name, owner=translit(self.generator.parse(self.random_element(['{{first_name_male}} {{last_name_male}}', '{{first_name_female}} {{last_name_female}}']))), number=self.credit_card_number(card), expire_date=self.credit_card_expire(), security=card.security_code, security_nb=self.credit_card_security_code(card), issuer=self.generator.parse('{{bank}}'))
faker.providers.credit_card.uk_UA.__init__.Provider(CreditCardProvider)
faker.providers.credit_card.uk_UA.__init__.Provider.credit_card_full(self,card_type:Optional[CardType]=None)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/credit_card/fa_IR/__init__.py----------------------------------------
A:faker.providers.credit_card.fa_IR.__init__.credit_card_types->OrderedDict((('ansar', CreditCard('انصار', prefix_ansar, 16, security_code='CVV2')), ('iran_zamin', CreditCard('ایران زمین', prefix_iran_zamin, 16, security_code='CVV2')), ('hekmat', CreditCard('حکمت', prefix_hekmat, 16, security_code='CVV2')), ('keshavarzi', CreditCard('کشاورزی', prefix_keshavarzi, 16, security_code='CVV2')), ('shahr', CreditCard('شهر', prefix_shahr, 16, security_code='CVV2')), ('mehre_ghtesad', CreditCard('مهراقتصاد', prefix_mehr_eghtesad, 16, security_code='CVV2')), ('sarmayeh', CreditCard('سرمایه', prefix_sarmayeh, 16, security_code='CVV2')), ('post_bank', CreditCard('پست بانک', prefix_post_bank, 16, security_code='CVV2')), ('tose', CreditCard('توسعه', prefix_tose, 16, security_code='CVV2')), ('eghtesad_novin', CreditCard('اقتصاد نوین', prefix_eghtesad_novin, 16, security_code='CVV2')), ('meli', CreditCard('ملی', prefix_meli, 16, security_code='CVV2')), ('pasargad', CreditCard('پاسارگاد', prefix_pasargad, 16, security_code='CVV2')), ('tourism_bank', CreditCard('گردشگری', prefix_tourism_bank, 16, security_code='CVV2')), ('ghavamin', CreditCard('قوامین', prefix_ghavamin, 16, security_code='CVV2')), ('day', CreditCard('دی', prefix_day, 16, security_code='CVV2')), ('mellat', CreditCard('ملت', prefix_mellat, 16, security_code='CVV2')), ('tejarat', CreditCard('تجارت', prefix_tejarat, 16, security_code='CVV2')), ('mellal', CreditCard('ملل', prefix_moasse_mellal, 16, security_code='CVV2')), ('saman', CreditCard('سامان', prefix_saman_bank, 16, security_code='CVV2')), ('kosar', CreditCard('کوثر', prefix_kosar, 16, security_code='CVV2')), ('refah', CreditCard('رفاه', prefix_refah, 16, security_code='CVV2')), ('saderat', CreditCard('صادرات', prefix_saderat, 16, security_code='CVV2')), ('tat', CreditCard('تات', prefix_tat, 16, security_code='CVV2')), ('sina', CreditCard('سینا', prefix_sina, 16, security_code='CVV2')), ('kar_afarin', CreditCard('کار آفرین', prefix_kar_afarin, 16, security_code='CVV2')), ('sepah', CreditCard('سپه', prefix_sepah, 16, security_code='CVV2')), ('maskan', CreditCard('مسکن', prefix_maskan, 16, security_code='CVV2')), ('parsian', CreditCard('پارسیان', prefix_parsian, 16, security_code='CVV2')), ('bim', CreditCard('صنعت و معدن', prefix_bim, 16, security_code='CVV2'))))
faker.providers.credit_card.fa_IR.__init__.Provider(CreditCardProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/__init__.py----------------------------------------
A:faker.providers.automotive.__init__.temp->re.sub('\\?', lambda x: self.random_element(ascii_uppercase), self.random_element(self.license_formats))
A:faker.providers.automotive.__init__.front_part->self.bothify('????????', letters=vin_chars)
A:faker.providers.automotive.__init__.rear_part->self.bothify('????????', letters=vin_chars)
A:faker.providers.automotive.__init__.front_part_weight->calculate_vin_str_weight(front_part, [8, 7, 6, 5, 4, 3, 2, 10])
A:faker.providers.automotive.__init__.rear_part_weight->calculate_vin_str_weight(rear_part, [9, 8, 7, 6, 5, 4, 3, 2])
faker.providers.automotive.__init__.Provider(BaseProvider)
faker.providers.automotive.__init__.Provider.license_plate(self)->str
faker.providers.automotive.__init__.Provider.vin(self)->str
faker.providers.automotive.__init__.calculate_vin_str_weight(s:str,weight_factor:list)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/it_IT/__init__.py----------------------------------------
faker.providers.automotive.it_IT.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/ru_RU/__init__.py----------------------------------------
faker.providers.automotive.ru_RU.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.ru_RU.__init__.Provider.license_plate(self)->str
faker.providers.automotive.ru_RU.__init__.Provider.plate_letter(self)->str
faker.providers.automotive.ru_RU.__init__.Provider.plate_number(self)->str
faker.providers.automotive.ru_RU.__init__.Provider.plate_number_extra(self)->str
faker.providers.automotive.ru_RU.__init__.Provider.plate_number_special(self)->str
faker.providers.automotive.ru_RU.__init__.Provider.plate_suffix(self)->str
faker.providers.automotive.ru_RU.__init__.Provider.vehicle_category(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/sk_SK/__init__.py----------------------------------------
A:faker.providers.automotive.sk_SK.__init__.suffix->self.bothify(self.random_element(self.license_plate_suffix), letters=string.ascii_uppercase)
faker.providers.automotive.sk_SK.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.sk_SK.__init__.Provider.license_plate(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/zh_TW/__init__.py----------------------------------------
faker.providers.automotive.zh_TW.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/pt_PT/__init__.py----------------------------------------
faker.providers.automotive.pt_PT.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/ro_RO/__init__.py----------------------------------------
A:faker.providers.automotive.ro_RO.__init__.suffix->self.bothify(self.random_element(self.license_plate_suffix), letters=string.ascii_uppercase)
faker.providers.automotive.ro_RO.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.ro_RO.__init__.Provider.license_plate(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/az_AZ/__init__.py----------------------------------------
A:faker.providers.automotive.az_AZ.__init__.temp->temp.replace('##', self.random_element(self.license_plate_initial_numbers), 1).replace('##', self.random_element(self.license_plate_initial_numbers), 1)
faker.providers.automotive.az_AZ.__init__.Provider(AutoProvider)
faker.providers.automotive.az_AZ.__init__.Provider.license_plate(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/ar_SA/__init__.py----------------------------------------
A:faker.providers.automotive.ar_SA.__init__.english_plate->self.license_plate_en()
A:faker.providers.automotive.ar_SA.__init__.nums->list(reversed(license_plate[0:4]))
A:faker.providers.automotive.ar_SA.__init__.chars->list(license_plate[5:8])
A:faker.providers.automotive.ar_SA.__init__.numerated->re.sub('\\#', lambda x: self.PLATE_MAP[nums.pop()], self.LICENSE_FORMAT_AR)
A:faker.providers.automotive.ar_SA.__init__.ar_plate->re.sub('\\?', lambda x: self.PLATE_MAP[chars.pop()], numerated)
faker.providers.automotive.ar_SA.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.ar_SA.__init__.Provider._translate_license_plate(self,license_plate:str)->str
faker.providers.automotive.ar_SA.__init__.Provider.license_plate(self,ar:bool=True)->str
faker.providers.automotive.ar_SA.__init__.Provider.license_plate_ar(self)->str
faker.providers.automotive.ar_SA.__init__.Provider.license_plate_en(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/et_EE/__init__.py----------------------------------------
faker.providers.automotive.et_EE.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/tr_TR/__init__.py----------------------------------------
A:faker.providers.automotive.tr_TR.__init__.temp->temp.format(self.random_element(range(1, 82))).format(self.random_element(range(1, 82)))
faker.providers.automotive.tr_TR.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.tr_TR.__init__.Provider.license_plate(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/id_ID/__init__.py----------------------------------------
faker.providers.automotive.id_ID.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/pl_PL/__init__.py----------------------------------------
faker.providers.automotive.pl_PL.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.pl_PL.__init__.Provider.license_plate_regex_formats(self)->List[str]


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/da_DK/__init__.py----------------------------------------
faker.providers.automotive.da_DK.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/en_NZ/__init__.py----------------------------------------
faker.providers.automotive.en_NZ.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/zh_CN/__init__.py----------------------------------------
faker.providers.automotive.zh_CN.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.zh_CN.__init__.Provider.license_plate(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/pt_BR/__init__.py----------------------------------------
faker.providers.automotive.pt_BR.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/de_CH/__init__.py----------------------------------------
faker.providers.automotive.de_CH.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.de_CH.__init__.Provider.license_plate(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/es_CO/__init__.py----------------------------------------
A:faker.providers.automotive.es_CO.__init__.license_formats->OrderedDict([('???###', 0.6), ('???##?', 0.3), ('T####', 0.03), ('??####', 0.01), ('R#####', 0.03), ('S#####', 0.03)])
faker.providers.automotive.es_CO.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/nl_NL/__init__.py----------------------------------------
A:faker.providers.automotive.nl_NL.__init__.temp->re.sub('\\@', self.random_element(self.license_plate_prefix_letters_format_8), temp)
faker.providers.automotive.nl_NL.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.nl_NL.__init__.Provider.license_plate(self)->str
faker.providers.automotive.nl_NL.__init__.Provider.license_plate_car(self)->str
faker.providers.automotive.nl_NL.__init__.Provider.license_plate_motorbike(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/lt_LT/__init__.py----------------------------------------
faker.providers.automotive.lt_LT.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/tl_PH/__init__.py----------------------------------------
faker.providers.automotive.tl_PH.__init__.Provider(EnPhAutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/no_NO/__init__.py----------------------------------------
faker.providers.automotive.no_NO.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/ar_JO/__init__.py----------------------------------------
faker.providers.automotive.ar_JO.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.ar_JO.__init__.Provider.initials(self)->str
faker.providers.automotive.ar_JO.__init__.Provider.license_plate(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/hu_HU/__init__.py----------------------------------------
faker.providers.automotive.hu_HU.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/th_TH/__init__.py----------------------------------------
A:faker.providers.automotive.th_TH.__init__.temp->re.sub('\\?', lambda x: self.random_element(self.thai_consonants), self.random_element(self.license_formats))
faker.providers.automotive.th_TH.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.th_TH.__init__.Provider.license_plate(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/de_DE/__init__.py----------------------------------------
A:faker.providers.automotive.de_DE.__init__.suffix->self.bothify(self.random_element(self.license_plate_suffix), letters=string.ascii_uppercase)
faker.providers.automotive.de_DE.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.de_DE.__init__.Provider.license_plate(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/en_US/__init__.py----------------------------------------
faker.providers.automotive.en_US.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/es_CL/__init__.py----------------------------------------
A:faker.providers.automotive.es_CL.__init__.license_formats->OrderedDict([('{{license_plate_new}}', 0.7), ('{{license_plate_old}}', 0.2), ('{{license_plate_police}}', 0.05), ('{{license_plate_temporary}}', 0.04), ('{{license_plate_diplomatic}}', 0.01)])
A:faker.providers.automotive.es_CL.__init__.letters->''.join((self.random_element(self.license_plate_old_format_first_letters), self.random_element(self.license_plate_old_format_second_letters)))
A:faker.providers.automotive.es_CL.__init__.temp->re.sub('\\?', lambda x: self.random_element(self.license_plate_new_format_letters), format)
faker.providers.automotive.es_CL.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.es_CL.__init__.Provider.license_plate(self)->str
faker.providers.automotive.es_CL.__init__.Provider.license_plate_diplomatic(self)->str
faker.providers.automotive.es_CL.__init__.Provider.license_plate_new(self)->str
faker.providers.automotive.es_CL.__init__.Provider.license_plate_old(self)->str
faker.providers.automotive.es_CL.__init__.Provider.license_plate_police(self)->str
faker.providers.automotive.es_CL.__init__.Provider.license_plate_temporary(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/en_CA/__init__.py----------------------------------------
faker.providers.automotive.en_CA.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/uk_UA/__init__.py----------------------------------------
A:faker.providers.automotive.uk_UA.__init__.(region_name, _)->random.choice(list(self.license_region_data.items()))
A:faker.providers.automotive.uk_UA.__init__.region_names->', '.join(self.license_region_data.keys())
A:faker.providers.automotive.uk_UA.__init__.(region, region_number)->self.__get_random_region_code(region_name)
A:faker.providers.automotive.uk_UA.__init__.number->self.plate_number()
A:faker.providers.automotive.uk_UA.__init__.series->self.plate_letter_suffix()
A:faker.providers.automotive.uk_UA.__init__.(_, region_number)->self.__get_random_region_code(region_name)
A:faker.providers.automotive.uk_UA.__init__.(letters, _)->self.__get_random_region_code(region_name)
A:faker.providers.automotive.uk_UA.__init__.level->random.choice(('CDP', 'DP', 'S'))
A:faker.providers.automotive.uk_UA.__init__.country_code->self.random_number(3, fix_len=True)
A:faker.providers.automotive.uk_UA.__init__.car_number->self.random_number(3, fix_len=True)
faker.providers.automotive.uk_UA.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.uk_UA.__init__.Provider.__get_random_region_code(self,region_name:Optional[str]=None)->Tuple[str, str]
faker.providers.automotive.uk_UA.__init__.Provider.diplomatic_license_plate(self)->str
faker.providers.automotive.uk_UA.__init__.Provider.license_plate(self,region_name:Optional[str]=None,temporary_plate:bool=False)->str
faker.providers.automotive.uk_UA.__init__.Provider.plate_letter_prefix(self,region_name:Optional[str]=None)->str
faker.providers.automotive.uk_UA.__init__.Provider.plate_letter_suffix(self)->str
faker.providers.automotive.uk_UA.__init__.Provider.plate_number(self)->str
faker.providers.automotive.uk_UA.__init__.Provider.plate_region_code(self,region_name:Optional[str]=None)->str
faker.providers.automotive.uk_UA.__init__.Provider.vehicle_category(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/es_ES/__init__.py----------------------------------------
A:faker.providers.automotive.es_ES.__init__.temp->re.sub('\\?', lambda x: self.random_element(self.license_plate_old_format_suffix_letters), '#### ??')
faker.providers.automotive.es_ES.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.es_ES.__init__.Provider.license_plate(self)->str
faker.providers.automotive.es_ES.__init__.Provider.license_plate_by_province(self,province_prefix:Optional[str]=None)->str
faker.providers.automotive.es_ES.__init__.Provider.license_plate_unified(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/sv_SE/__init__.py----------------------------------------
faker.providers.automotive.sv_SE.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/el_GR/__init__.py----------------------------------------
A:faker.providers.automotive.el_GR.__init__.temp->re.sub('\\?', lambda x: self.random_element(self.uppercase_letters), self.random_element(self.license_formats))
faker.providers.automotive.el_GR.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.el_GR.__init__.Provider.license_plate(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/vi_VN/__init__.py----------------------------------------
A:faker.providers.automotive.vi_VN.__init__.temp->re.sub('\\?', lambda x: self.random_element(self.ascii_uppercase_vietnamese), self.random_element(self.license_formats))
faker.providers.automotive.vi_VN.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.vi_VN.__init__.Provider.license_plate(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/en_PH/__init__.py----------------------------------------
faker.providers.automotive.en_PH.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.en_PH.__init__.Provider._license_plate(self,license_format:List[str])->str
faker.providers.automotive.en_PH.__init__.Provider.automobile_license_plate(self)->str
faker.providers.automotive.en_PH.__init__.Provider.license_plate(self)->str
faker.providers.automotive.en_PH.__init__.Provider.motorcycle_license_plate(self)->str
faker.providers.automotive.en_PH.__init__.Provider.protocol_license_plate(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/ar_BH/__init__.py----------------------------------------
faker.providers.automotive.ar_BH.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/sq_AL/__init__.py----------------------------------------
faker.providers.automotive.sq_AL.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/fi_FI/__init__.py----------------------------------------
faker.providers.automotive.fi_FI.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/es_AR/__init__.py----------------------------------------
A:faker.providers.automotive.es_AR.__init__.license_plate_old_format_first_letter->string.ascii_uppercase.replace('YZ', '')
A:faker.providers.automotive.es_AR.__init__.license_plate_new_first_letter->OrderedDict([('A', 0.99), ('B', 0.001), ('C', 0.0001), ('D', 1e-05), ('E', 1e-10)])
A:faker.providers.automotive.es_AR.__init__.license_plate_new_second_letter->OrderedDict([('A', 0.1), ('B', 0.1), ('C', 0.1), ('D', 0.1), ('E', 0.1), ('F', 0.1), ('G', 0.09), ('H', 0.08), ('I', 0.07), ('J', 0.06), ('K', 0.04), ('L', 0.03), ('M', 0.009), ('N', 0.007), ('O', 0.005), ('P', 0.004), ('Q', 0.001), ('R', 0.0009), ('S', 0.0008), ('T', 0.0007), ('U', 0.0006), ('V', 0.0005), ('W', 0.0003), ('X', 0.0002), ('Y', 0.0001), ('Z', 5e-05)])
A:faker.providers.automotive.es_AR.__init__.license_formats->OrderedDict([('{{license_plate_old}}', 0.6), ('{{license_plate_mercosur}}', 0.4)])
faker.providers.automotive.es_AR.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.es_AR.__init__.Provider.license_plate(self)->str
faker.providers.automotive.es_AR.__init__.Provider.license_plate_mercosur(self)->str
faker.providers.automotive.es_AR.__init__.Provider.license_plate_old(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/fr_FR/__init__.py----------------------------------------
faker.providers.automotive.fr_FR.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/en_GB/__init__.py----------------------------------------
faker.providers.automotive.en_GB.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/ar_PS/__init__.py----------------------------------------
faker.providers.automotive.ar_PS.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.ar_PS.__init__.Provider.district(self)->str
faker.providers.automotive.ar_PS.__init__.Provider.license_plate(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/bn_BD/__init__.py----------------------------------------
faker.providers.automotive.bn_BD.__init__.Provider(AutomotiveProvider)
faker.providers.automotive.bn_BD.__init__.Provider.city_name(self)->str
faker.providers.automotive.bn_BD.__init__.Provider.license_plate(self)->str
faker.providers.automotive.bn_BD.__init__.Provider.vehicle_category_letter(self)->str
faker.providers.automotive.bn_BD.__init__.Provider.vehicle_category_number(self)->str
faker.providers.automotive.bn_BD.__init__.Provider.vehicle_serial_number(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/fil_PH/__init__.py----------------------------------------
faker.providers.automotive.fil_PH.__init__.Provider(EnPhAutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/he_IL/__init__.py----------------------------------------
faker.providers.automotive.he_IL.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/automotive/nl_BE/__init__.py----------------------------------------
faker.providers.automotive.nl_BE.__init__.Provider(AutomotiveProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/__init__.py----------------------------------------
faker.providers.job.__init__.Provider(BaseProvider)
faker.providers.job.__init__.Provider.job(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/ru_RU/__init__.py----------------------------------------
faker.providers.job.ru_RU.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/sk_SK/__init__.py----------------------------------------
faker.providers.job.sk_SK.__init__.Provider(JobProvider)
faker.providers.job.sk_SK.__init__.Provider.job(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/zh_TW/__init__.py----------------------------------------
faker.providers.job.zh_TW.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/pt_PT/__init__.py----------------------------------------
faker.providers.job.pt_PT.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/ro_RO/__init__.py----------------------------------------
faker.providers.job.ro_RO.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/az_AZ/__init__.py----------------------------------------
faker.providers.job.az_AZ.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/tr_TR/__init__.py----------------------------------------
faker.providers.job.tr_TR.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/hy_AM/__init__.py----------------------------------------
faker.providers.job.hy_AM.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/fr_CH/__init__.py----------------------------------------
faker.providers.job.fr_CH.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/cs_CZ/__init__.py----------------------------------------
faker.providers.job.cs_CZ.__init__.Provider(JobProvider)
faker.providers.job.cs_CZ.__init__.Provider.job(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/pl_PL/__init__.py----------------------------------------
faker.providers.job.pl_PL.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/da_DK/__init__.py----------------------------------------
faker.providers.job.da_DK.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/zh_CN/__init__.py----------------------------------------
faker.providers.job.zh_CN.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/es_MX/__init__.py----------------------------------------
faker.providers.job.es_MX.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/pt_BR/__init__.py----------------------------------------
faker.providers.job.pt_BR.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/es_CO/__init__.py----------------------------------------
faker.providers.job.es_CO.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/es/__init__.py----------------------------------------
faker.providers.job.es.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/bs_BA/__init__.py----------------------------------------
faker.providers.job.bs_BA.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/hu_HU/__init__.py----------------------------------------
faker.providers.job.hu_HU.__init__.Provider(BaseProvider)
faker.providers.job.hu_HU.__init__.Provider.job(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/hr_HR/__init__.py----------------------------------------
faker.providers.job.hr_HR.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/th_TH/__init__.py----------------------------------------
faker.providers.job.th_TH.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/de_DE/__init__.py----------------------------------------
faker.providers.job.de_DE.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/en_US/__init__.py----------------------------------------
faker.providers.job.en_US.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/ar_AA/__init__.py----------------------------------------
faker.providers.job.ar_AA.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/es_CL/__init__.py----------------------------------------
faker.providers.job.es_CL.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/uk_UA/__init__.py----------------------------------------
faker.providers.job.uk_UA.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/ko_KR/__init__.py----------------------------------------
faker.providers.job.ko_KR.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/es_ES/__init__.py----------------------------------------
faker.providers.job.es_ES.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/el_GR/__init__.py----------------------------------------
faker.providers.job.el_GR.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/fa_IR/__init__.py----------------------------------------
faker.providers.job.fa_IR.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/vi_VN/__init__.py----------------------------------------
faker.providers.job.vi_VN.__init__.Provider(JobProvider)
faker.providers.job.vi_VN.__init__.Provider.job(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/fi_FI/__init__.py----------------------------------------
faker.providers.job.fi_FI.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/es_AR/__init__.py----------------------------------------
faker.providers.job.es_AR.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/fr_FR/__init__.py----------------------------------------
faker.providers.job.fr_FR.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/bn_BD/__init__.py----------------------------------------
faker.providers.job.bn_BD.__init__.Provider(JobProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/job/ja_JP/__init__.py----------------------------------------
faker.providers.job.ja_JP.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/__init__.py----------------------------------------
faker.providers.ssn.__init__.Provider(BaseProvider)
faker.providers.ssn.__init__.Provider.ssn(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/it_IT/__init__.py----------------------------------------
A:faker.providers.ssn.it_IT.__init__.ALPHANUMERICS->sorted(digits + ascii_uppercase)
A:faker.providers.ssn.it_IT.__init__.name->self._transliterate_name(name)
A:faker.providers.ssn.it_IT.__init__.name_consonants->self._get_consonants(name)
A:faker.providers.ssn.it_IT.__init__.cons_len->len(surname_consonants)
A:faker.providers.ssn.it_IT.__init__.name_part->''.join(name_consonants)
A:faker.providers.ssn.it_IT.__init__.surname->self._transliterate_name(surname)
A:faker.providers.ssn.it_IT.__init__.surname_consonants->self._get_consonants(surname)
faker.providers.ssn.it_IT.__init__.Provider(SsnProvider)
faker.providers.ssn.it_IT.__init__.Provider._get_consonants(self,sequence:str)->list
faker.providers.ssn.it_IT.__init__.Provider._get_max_day(self,is_leap_year:bool,month:str)->int
faker.providers.ssn.it_IT.__init__.Provider._get_name_letters(self,sex:int)->str
faker.providers.ssn.it_IT.__init__.Provider._get_surname_letters(self)->str
faker.providers.ssn.it_IT.__init__.Provider._get_vowels(self,sequence:str)->list
faker.providers.ssn.it_IT.__init__.Provider._pad_shorter(self,sequence:str)->str
faker.providers.ssn.it_IT.__init__.Provider._transliterate_name(self,name:str)->str
faker.providers.ssn.it_IT.__init__.Provider.is_leap_year(year:int)->bool
faker.providers.ssn.it_IT.__init__.Provider.ssn(self)->str
faker.providers.ssn.it_IT.__init__.Provider.vat_id(self)->str
faker.providers.ssn.it_IT.__init__.checksum(value:str)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/ru_RU/__init__.py----------------------------------------
faker.providers.ssn.ru_RU.__init__.Provider(SsnProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/el_CY/__init__.py----------------------------------------
faker.providers.ssn.el_CY.__init__.Provider(BaseProvider)
faker.providers.ssn.el_CY.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/sk_SK/__init__.py----------------------------------------
A:faker.providers.ssn.sk_SK.__init__.birthdate->self.generator.date_of_birth()
A:faker.providers.ssn.sk_SK.__init__.sn->self.random_number(3, True)
A:faker.providers.ssn.sk_SK.__init__.number->int(f'{year}{month}{day}{sn}')
A:faker.providers.ssn.sk_SK.__init__.birth_number->str(ceil(number / 11) * 11)
faker.providers.ssn.sk_SK.__init__.Provider(BaseProvider)
faker.providers.ssn.sk_SK.__init__.Provider.birth_number(self)->str
faker.providers.ssn.sk_SK.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/zh_TW/__init__.py----------------------------------------
A:faker.providers.ssn.zh_TW.__init__.ssn_without_last_char->self.numerify(self.random_uppercase_letter() + str(self.random_int(1, 2)) + '#######')
A:faker.providers.ssn.zh_TW.__init__.last_char->str((10 - checksum(ssn_without_last_char) % 10) % 10)
faker.providers.ssn.zh_TW.__init__.Provider(SsnProvider)
faker.providers.ssn.zh_TW.__init__.Provider.ssn(self)->str
faker.providers.ssn.zh_TW.__init__.checksum(s:str)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/pt_PT/__init__.py----------------------------------------
faker.providers.ssn.pt_PT.__init__.Provider(BaseProvider)
faker.providers.ssn.pt_PT.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/ro_RO/__init__.py----------------------------------------
A:faker.providers.ssn.ro_RO.__init__.vat->self.bothify(self.random_element(self.vat_id_formats))
A:faker.providers.ssn.ro_RO.__init__.check->ssn_checksum(num)
A:faker.providers.ssn.ro_RO.__init__.gender->self.random_int(min=1, max=8)
A:faker.providers.ssn.ro_RO.__init__.year->self.random_int(min=0, max=99)
A:faker.providers.ssn.ro_RO.__init__.month->self.random_int(min=1, max=12)
A:faker.providers.ssn.ro_RO.__init__.day->self.random_int(min=1, max=31)
A:faker.providers.ssn.ro_RO.__init__.county->int(self.random_element(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '51', '52']))
A:faker.providers.ssn.ro_RO.__init__.serial->self.random_int(min=1, max=999)
faker.providers.ssn.ro_RO.__init__.Provider(BaseProvider)
faker.providers.ssn.ro_RO.__init__.Provider.ssn(self)->str
faker.providers.ssn.ro_RO.__init__.Provider.vat_id(self)->str
faker.providers.ssn.ro_RO.__init__.ssn_checksum(number:str)->int
faker.providers.ssn.ro_RO.__init__.vat_checksum(number:str)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/es_CA/__init__.py----------------------------------------
faker.providers.ssn.es_CA.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/az_AZ/__init__.py----------------------------------------
A:faker.providers.ssn.az_AZ.__init__.ssn->''.join(self.random_elements(elements=self.all_characters, length=7))
faker.providers.ssn.az_AZ.__init__.Provider(SsnProvider)
faker.providers.ssn.az_AZ.__init__.Provider.ssn(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/et_EE/__init__.py----------------------------------------
A:faker.providers.ssn.et_EE.__init__.age->datetime.timedelta(days=self.generator.random.randrange(min_age * 365, max_age * 365))
A:faker.providers.ssn.et_EE.__init__.ik->self.generator.random.choice(('7', '8'))
faker.providers.ssn.et_EE.__init__.Provider(SsnProvider)
faker.providers.ssn.et_EE.__init__.Provider.ssn(self,min_age:int=16,max_age:int=90)->str
faker.providers.ssn.et_EE.__init__.Provider.vat_id(self)->str
faker.providers.ssn.et_EE.__init__.checksum(digits:List[int])->int


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/tr_TR/__init__.py----------------------------------------
faker.providers.ssn.tr_TR.__init__.Provider(BaseProvider)
faker.providers.ssn.tr_TR.__init__.Provider.ssn(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/en_IN/__init__.py----------------------------------------
A:faker.providers.ssn.en_IN.__init__.aadhaar_digits->self.numerify(self.random_element(self.aadhaar_id_formats))
A:faker.providers.ssn.en_IN.__init__.checksum->faker.utils.checksums.calculate_luhn(int(aadhaar_digits))
faker.providers.ssn.en_IN.__init__.Provider(BaseProvider)
faker.providers.ssn.en_IN.__init__.Provider.aadhaar_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/fr_CH/__init__.py----------------------------------------
A:faker.providers.ssn.fr_CH.__init__.evensum->sum(digits[:-1:2])
A:faker.providers.ssn.fr_CH.__init__.oddsum->sum(digits[1::2])
A:faker.providers.ssn.fr_CH.__init__.digits_->''.join([str(d) for d in digits])
faker.providers.ssn.fr_CH.__init__.Provider(SsnProvider)
faker.providers.ssn.fr_CH.__init__.Provider.ssn(self)->str
faker.providers.ssn.fr_CH.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/lb_LU/__init__.py----------------------------------------
faker.providers.ssn.lb_LU.__init__.Provider(BaseProvider)
faker.providers.ssn.lb_LU.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/sl_SI/__init__.py----------------------------------------
faker.providers.ssn.sl_SI.__init__.Provider(BaseProvider)
faker.providers.ssn.sl_SI.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/cs_CZ/__init__.py----------------------------------------
A:faker.providers.ssn.cs_CZ.__init__.birthdate->self.generator.date_of_birth()
A:faker.providers.ssn.cs_CZ.__init__.sn->self.random_number(3, True)
A:faker.providers.ssn.cs_CZ.__init__.number->int(f'{year}{month}{day}{sn}')
A:faker.providers.ssn.cs_CZ.__init__.birth_number->str(ceil(number / 11) * 11)
faker.providers.ssn.cs_CZ.__init__.Provider(BaseProvider)
faker.providers.ssn.cs_CZ.__init__.Provider.birth_number(self)->str
faker.providers.ssn.cs_CZ.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/pl_PL/__init__.py----------------------------------------
A:faker.providers.ssn.pl_PL.__init__.year->int(birth_date.strftime('%Y'))
A:faker.providers.ssn.pl_PL.__init__.birth_date->self.generator.date_time()
A:faker.providers.ssn.pl_PL.__init__.year_without_century->int(birth_date.strftime('%y'))
A:faker.providers.ssn.pl_PL.__init__.month->calculate_month(birth_date)
A:faker.providers.ssn.pl_PL.__init__.day->int(birth_date.strftime('%d'))
faker.providers.ssn.pl_PL.__init__.Provider(SsnProvider)
faker.providers.ssn.pl_PL.__init__.Provider.ssn(self)->str
faker.providers.ssn.pl_PL.__init__.Provider.vat_id(self)->str
faker.providers.ssn.pl_PL.__init__.calculate_month(birth_date:datetime)->int
faker.providers.ssn.pl_PL.__init__.checksum(digits:List[int])->int


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/lv_LV/__init__.py----------------------------------------
A:faker.providers.ssn.lv_LV.__init__.weighted_sum->sum((int(digit) * weight for (digit, weight) in zip(ssn_without_checksum, weights)))
A:faker.providers.ssn.lv_LV.__init__.age->datetime.timedelta(days=self.generator.random.randrange(min_age * 365, max_age * 365))
A:faker.providers.ssn.lv_LV.__init__.century->self._get_century_code(birthday.year)
A:faker.providers.ssn.lv_LV.__init__.suffix->self.generator.random.randrange(111, 999)
A:faker.providers.ssn.lv_LV.__init__.checksum->_checksum(f'{ssn_date}{century:01d}{suffix:03d}')
faker.providers.ssn.lv_LV.__init__.Provider(SsnProvider)
faker.providers.ssn.lv_LV.__init__.Provider._get_century_code(year:int)->int
faker.providers.ssn.lv_LV.__init__.Provider.ssn(self,min_age:int=0,max_age:int=105)->str
faker.providers.ssn.lv_LV.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/zh_CN/__init__.py----------------------------------------
A:faker.providers.ssn.zh_CN.__init__.age->datetime.timedelta(days=self.random_int(min_age * 365, max_age * 365))
A:faker.providers.ssn.zh_CN.__init__.birthday_str->birthday.strftime('%Y%m%d')
A:faker.providers.ssn.zh_CN.__init__.area_code->self.random_element(self.area_codes)
A:faker.providers.ssn.zh_CN.__init__.ssn_without_checksum->self.numerify(area_code + birthday_str + '##')
A:faker.providers.ssn.zh_CN.__init__.gender_num->self.generator.random.choice(_number)
faker.providers.ssn.zh_CN.__init__.Provider(SsnProvider)
faker.providers.ssn.zh_CN.__init__.Provider.ssn(self,min_age:int=18,max_age:int=90,gender:Optional[SexLiteral]=None,area_code:str='')->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/es_MX/__init__.py----------------------------------------
A:faker.providers.ssn.es_MX.__init__.office->self.random_int(min=1, max=99)
A:faker.providers.ssn.es_MX.__init__.birth_year->self.random_int(min=0, max=99)
A:faker.providers.ssn.es_MX.__init__.start_year->self.random_int(min=0, max=99)
A:faker.providers.ssn.es_MX.__init__.serial->self.random_int(min=1, max=9999)
A:faker.providers.ssn.es_MX.__init__.check->ssn_checksum(map(int, num))
A:faker.providers.ssn.es_MX.__init__.birthday->self.generator.date_of_birth()
A:faker.providers.ssn.es_MX.__init__.second_surname->random.choice(ALPHABET)
A:faker.providers.ssn.es_MX.__init__.given_name->random.choice(ALPHABET)
A:faker.providers.ssn.es_MX.__init__.birth_date->self.generator.date_of_birth().strftime('%y%m%d')
A:faker.providers.ssn.es_MX.__init__.gender->random.choice('HM')
A:faker.providers.ssn.es_MX.__init__.state->random.choice(STATES_RENAPO)
A:faker.providers.ssn.es_MX.__init__.first_surname_inside->random.choice(CONSONANTS)
A:faker.providers.ssn.es_MX.__init__.second_surname_inside->random.choice(CONSONANTS)
A:faker.providers.ssn.es_MX.__init__.given_name_inside->random.choice(ALPHABET)
A:faker.providers.ssn.es_MX.__init__.name_initials->FORBIDDEN_WORDS.get(name_initials, name_initials)
A:faker.providers.ssn.es_MX.__init__.consonants->''.join(random.choices(CONSONANTS, k=6))
A:faker.providers.ssn.es_MX.__init__.entity->random.randint(1, 33)
A:faker.providers.ssn.es_MX.__init__.disambiguation_code->''.join(random.choices(string.digits, k=3))
faker.providers.ssn.es_MX.__init__.Provider(BaseProvider)
faker.providers.ssn.es_MX.__init__.Provider.curp(self)->str
faker.providers.ssn.es_MX.__init__.Provider.elector_code(self,gender:Optional[Literal['H','M']]=None)->str
faker.providers.ssn.es_MX.__init__.Provider.rfc(self,natural:bool=True)->str
faker.providers.ssn.es_MX.__init__.Provider.ssn(self)->str
faker.providers.ssn.es_MX.__init__._reduce_digits(number:int)->int
faker.providers.ssn.es_MX.__init__.curp_checksum(characters:str)->int
faker.providers.ssn.es_MX.__init__.ssn_checksum(digits:map)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/pt_BR/__init__.py----------------------------------------
A:faker.providers.ssn.pt_BR.__init__.digits->self.generator.random.sample(range(0, 9), 8)
A:faker.providers.ssn.pt_BR.__init__.dv->checksum(digits)
A:faker.providers.ssn.pt_BR.__init__.c->self.ssn()
A:faker.providers.ssn.pt_BR.__init__.checksum->sum((i * digits[i - 2] for i in range(2, 10)))
faker.providers.ssn.pt_BR.__init__.Provider(SsnProvider)
faker.providers.ssn.pt_BR.__init__.Provider.cpf(self)->str
faker.providers.ssn.pt_BR.__init__.Provider.rg(self)->str
faker.providers.ssn.pt_BR.__init__.Provider.ssn(self)->str
faker.providers.ssn.pt_BR.__init__.checksum(digits:List[int])->int


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/de_CH/__init__.py----------------------------------------
faker.providers.ssn.de_CH.__init__.Provider(BaseProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/es_CO/__init__.py----------------------------------------
A:faker.providers.ssn.es_CO.__init__.nuip_formats->OrderedDict([('10########', 0.25), ('11########', 0.25), ('12########', 0.1), ('%!######', 0.4)])
A:faker.providers.ssn.es_CO.__init__.nit->self.legal_person_nit()
A:faker.providers.ssn.es_CO.__init__.check_digit->nit_check_digit(nit)
faker.providers.ssn.es_CO.__init__.Provider(BaseProvider)
faker.providers.ssn.es_CO.__init__.Provider.legal_person_nit(self)->str
faker.providers.ssn.es_CO.__init__.Provider.legal_person_nit_with_check_digit(self)->str
faker.providers.ssn.es_CO.__init__.Provider.natural_person_nit_with_check_digit(self)->str
faker.providers.ssn.es_CO.__init__.Provider.nuip(self)->str
faker.providers.ssn.es_CO.__init__.nit_check_digit(nit:str)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/nl_NL/__init__.py----------------------------------------
A:faker.providers.ssn.nl_NL.__init__.digits->self.generator.random.sample(range(10), 8)
A:faker.providers.ssn.nl_NL.__init__.s->_checksum(digits)
A:faker.providers.ssn.nl_NL.__init__.bsn->''.join([str(e) for e in digits])
faker.providers.ssn.nl_NL.__init__.Provider(SsnProvider)
faker.providers.ssn.nl_NL.__init__.Provider.ssn(self)->str
faker.providers.ssn.nl_NL.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/lt_LT/__init__.py----------------------------------------
faker.providers.ssn.lt_LT.__init__.Provider(BaseProvider)
faker.providers.ssn.lt_LT.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/tl_PH/__init__.py----------------------------------------
faker.providers.ssn.tl_PH.__init__.Provider(EnPhSsnProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/bg_BG/__init__.py----------------------------------------
faker.providers.ssn.bg_BG.__init__.Provider(BaseProvider)
faker.providers.ssn.bg_BG.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/no_NO/__init__.py----------------------------------------
A:faker.providers.ssn.no_NO.__init__.birthday->datetime.datetime.strptime(dob, '%Y%m%d')
A:faker.providers.ssn.no_NO.__init__.age->datetime.timedelta(days=self.generator.random.randrange(18 * 365, 90 * 365))
A:faker.providers.ssn.no_NO.__init__.gender->self.generator.random.choice(('F', 'M'))
A:faker.providers.ssn.no_NO.__init__.suffix->str(self.generator.random.randrange(90, 99))
A:faker.providers.ssn.no_NO.__init__.gender_num->self.generator.random.choice((1, 3, 5, 7, 9))
A:faker.providers.ssn.no_NO.__init__.k1->checksum(Provider.scale1, pnr_nums)
A:faker.providers.ssn.no_NO.__init__.k2->checksum(Provider.scale2, pnr_nums + [k1])
faker.providers.ssn.no_NO.__init__.Provider(SsnProvider)
faker.providers.ssn.no_NO.__init__.Provider.ssn(self,dob:Optional[str]=None,gender:Optional[SexLiteral]=None)->str
faker.providers.ssn.no_NO.__init__.checksum(digits:Sequence[int],scale:List[int])->int


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/hu_HU/__init__.py----------------------------------------
A:faker.providers.ssn.hu_HU.__init__.E->self.generator.random_int(17, 99)
A:faker.providers.ssn.hu_HU.__init__.H->self.generator.random_int(1, 12)
A:faker.providers.ssn.hu_HU.__init__.N->self.generator.random_int(1, 30)
A:faker.providers.ssn.hu_HU.__init__.M->self.generator.random_int(1, 2)
A:faker.providers.ssn.hu_HU.__init__.K->fmod(reduce(lambda x, y: x + y, cum), 11)
faker.providers.ssn.hu_HU.__init__.Provider(SsnProvider)
faker.providers.ssn.hu_HU.__init__.Provider.ssn(self,dob:Optional[str]=None,gender:Optional[SexLiteral]=None)->str
faker.providers.ssn.hu_HU.__init__.Provider.vat_id(self)->str
faker.providers.ssn.hu_HU.__init__.zfix(d:int)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/hr_HR/__init__.py----------------------------------------
A:faker.providers.ssn.hr_HR.__init__.digits->self.generator.random.sample(range(10), 10)
faker.providers.ssn.hr_HR.__init__.Provider(SsnProvider)
faker.providers.ssn.hr_HR.__init__.Provider.ssn(self)->str
faker.providers.ssn.hr_HR.__init__.Provider.vat_id(self)->str
faker.providers.ssn.hr_HR.__init__.checksum(digits:List[int])->int


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/th_TH/__init__.py----------------------------------------
A:faker.providers.ssn.th_TH.__init__.category->randint(1, 8)
A:faker.providers.ssn.th_TH.__init__.province->randint(10, 96)
A:faker.providers.ssn.th_TH.__init__.amphoe->randint(1, 20)
A:faker.providers.ssn.th_TH.__init__.birth_book->randint(1, 99999)
A:faker.providers.ssn.th_TH.__init__.birth_sheet->randint(1, 99)
faker.providers.ssn.th_TH.__init__.Provider(BaseProvider)
faker.providers.ssn.th_TH.__init__.Provider.ssn(self)->str
faker.providers.ssn.th_TH.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/de_DE/__init__.py----------------------------------------
faker.providers.ssn.de_DE.__init__.Provider(BaseProvider)
faker.providers.ssn.de_DE.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/en_US/__init__.py----------------------------------------
A:faker.providers.ssn.en_US.__init__.area->self.random_int(min=1, max=899)
A:faker.providers.ssn.en_US.__init__.serial->self.random_int(1, 9999)
A:faker.providers.ssn.en_US.__init__.sequence->self.random_int(min=0, max=9999999)
A:faker.providers.ssn.en_US.__init__.random_group_or_serial->self.random_int(min=1, max=1000)
A:faker.providers.ssn.en_US.__init__.group->self.random_int(1, 99)
faker.providers.ssn.en_US.__init__.Provider(BaseProvider)
faker.providers.ssn.en_US.__init__.Provider.ein(self)->str
faker.providers.ssn.en_US.__init__.Provider.invalid_ssn(self)->str
faker.providers.ssn.en_US.__init__.Provider.itin(self)->str
faker.providers.ssn.en_US.__init__.Provider.ssn(self,taxpayer_identification_number_type:str=SSN_TYPE)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/es_CL/__init__.py----------------------------------------
A:faker.providers.ssn.es_CL.__init__.digits->self.random_int(min, max)
A:faker.providers.ssn.es_CL.__init__.check->rut_check_digit(digits)
faker.providers.ssn.es_CL.__init__.Provider(BaseProvider)
faker.providers.ssn.es_CL.__init__.Provider.company_rut(self)->str
faker.providers.ssn.es_CL.__init__.Provider.person_rut(self)->str
faker.providers.ssn.es_CL.__init__.Provider.rut(self,min:int=minimum_rut_person,max:int=maximum_rut_company)->str
faker.providers.ssn.es_CL.__init__.rut_check_digit(number:int)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/dk_DK/__init__.py----------------------------------------
faker.providers.ssn.dk_DK.__init__.Provider(BaseProvider)
faker.providers.ssn.dk_DK.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/en_CA/__init__.py----------------------------------------
A:faker.providers.ssn.en_CA.__init__.checksumCollection->list(sin.replace(' ', ''))
A:faker.providers.ssn.en_CA.__init__.digits->self.generator.random.sample(range(9), 8)
faker.providers.ssn.en_CA.__init__.Provider(SsnProvider)
faker.providers.ssn.en_CA.__init__.Provider.ssn(self)->str
faker.providers.ssn.en_CA.__init__.checksum(sin)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/uk_UA/__init__.py----------------------------------------
A:faker.providers.ssn.uk_UA.__init__.ref_date->date(1899, 12, 31)
A:faker.providers.ssn.uk_UA.__init__.checksum->calculate_check_sum(ssn_without_checksum)
A:faker.providers.ssn.uk_UA.__init__.dob->self.generator.date_object()
A:faker.providers.ssn.uk_UA.__init__.day_count->calculate_day_count(dob)
A:faker.providers.ssn.uk_UA.__init__.people_num->self.random_number(3, fix_len=True)
faker.providers.ssn.uk_UA.__init__.Provider(SsnProvider)
faker.providers.ssn.uk_UA.__init__.Provider.ssn(self,birthday:Optional[str]=None,gender:Optional[SexLiteral]=None)->str
faker.providers.ssn.uk_UA.__init__.calculate_check_sum(val:str)->int
faker.providers.ssn.uk_UA.__init__.calculate_day_count(birthday:date)->int
faker.providers.ssn.uk_UA.__init__.select_gender(gender:SexLiteral)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/ko_KR/__init__.py----------------------------------------
faker.providers.ssn.ko_KR.__init__.Provider(SsnProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/es_ES/__init__.py----------------------------------------
A:faker.providers.ssn.es_ES.__init__.first_chr->random.choice('ABCDEFGHJNPQRSUVW')
A:faker.providers.ssn.es_ES.__init__.doi_body->str(random.randrange(0, 10000000)).zfill(7)
A:faker.providers.ssn.es_ES.__init__.control->self._calculate_control_doi(str(first_chr) + doi_body)
A:faker.providers.ssn.es_ES.__init__.nie_body->str(random.randrange(0, 100000000))
A:faker.providers.ssn.es_ES.__init__.nuss_body->''.join((str(random.randint(0, 9)) for _ in range(nuss_body_length)))
A:faker.providers.ssn.es_ES.__init__.sum_->int(str(sum_)[-1])
faker.providers.ssn.es_ES.__init__.Provider(BaseProvider)
faker.providers.ssn.es_ES.__init__.Provider._calculate_control_cif(cls,cif:str)->str
faker.providers.ssn.es_ES.__init__.Provider._calculate_control_doi(doi:str)->str
faker.providers.ssn.es_ES.__init__.Provider.cif(self)->str
faker.providers.ssn.es_ES.__init__.Provider.doi(self)->str
faker.providers.ssn.es_ES.__init__.Provider.nie(self)->str
faker.providers.ssn.es_ES.__init__.Provider.nif(self)->str
faker.providers.ssn.es_ES.__init__.Provider.nuss(self,company:bool=False)->str
faker.providers.ssn.es_ES.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/sv_SE/__init__.py----------------------------------------
A:faker.providers.ssn.sv_SE.__init__.org_id->org_id.replace('-', '').replace('-', '')
A:faker.providers.ssn.sv_SE.__init__.age->datetime.timedelta(days=self.generator.random.randrange(min_age * 365, max_age * 365))
A:faker.providers.ssn.sv_SE.__init__.luhn_checksum->str(calculate_luhn(int(onr_one + onr_two)))
A:faker.providers.ssn.sv_SE.__init__.first_digits->list(self.ORG_ID_DIGIT_1)
A:faker.providers.ssn.sv_SE.__init__.onr_one->str(first_digits.pop())
A:faker.providers.ssn.sv_SE.__init__.onr_two->str(self.generator.random.randrange(0, 999)).zfill(3)
A:faker.providers.ssn.sv_SE.__init__.oid->self.org_id(long=long, dash=dash)
A:faker.providers.ssn.sv_SE.__init__.vid->Provider._org_to_vat(oid)
faker.providers.ssn.sv_SE.__init__.Provider(SsnProvider)
faker.providers.ssn.sv_SE.__init__.Provider._org_to_vat(org_id:str)->str
faker.providers.ssn.sv_SE.__init__.Provider.org_and_vat_id(self,long:bool=False,dash:bool=True)->Tuple[str, str]
faker.providers.ssn.sv_SE.__init__.Provider.org_id(self,long:bool=False,dash:bool=True)->str
faker.providers.ssn.sv_SE.__init__.Provider.ssn(self,min_age:int=18,max_age:int=90,long:bool=False,dash:bool=True)->str
faker.providers.ssn.sv_SE.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/el_GR/__init__.py----------------------------------------
faker.providers.ssn.el_GR.__init__.Provider(BaseProvider)
faker.providers.ssn.el_GR.__init__.Provider.police_id(self)->str
faker.providers.ssn.el_GR.__init__.Provider.ssn(self)->str
faker.providers.ssn.el_GR.__init__.Provider.tin(self)->str
faker.providers.ssn.el_GR.__init__.Provider.vat_id(self,prefix:bool=True)->str
faker.providers.ssn.el_GR.__init__.tin_checksum(tin:str)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/en_PH/__init__.py----------------------------------------
faker.providers.ssn.en_PH.__init__.Provider(BaseProvider)
faker.providers.ssn.en_PH.__init__.Provider.gsis(self)->str
faker.providers.ssn.en_PH.__init__.Provider.pagibig(self)->str
faker.providers.ssn.en_PH.__init__.Provider.philhealth(self)->str
faker.providers.ssn.en_PH.__init__.Provider.ssn(self)->str
faker.providers.ssn.en_PH.__init__.Provider.sss(self)->str
faker.providers.ssn.en_PH.__init__.Provider.umid(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/de_AT/__init__.py----------------------------------------
faker.providers.ssn.de_AT.__init__.Provider(BaseProvider)
faker.providers.ssn.de_AT.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/en_IE/__init__.py----------------------------------------
faker.providers.ssn.en_IE.__init__.Provider(BaseProvider)
faker.providers.ssn.en_IE.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/fi_FI/__init__.py----------------------------------------
A:faker.providers.ssn.fi_FI.__init__.age->datetime.timedelta(days=self.generator.random.randrange(min_age * 365, max_age * 365))
A:faker.providers.ssn.fi_FI.__init__.suffix->str(self.generator.random.randrange(*range)).zfill(3)
A:faker.providers.ssn.fi_FI.__init__.checksum->_checksum(hetu_date + suffix)
A:faker.providers.ssn.fi_FI.__init__.separator->self._get_century_code(birthday.year)
A:faker.providers.ssn.fi_FI.__init__.hetu->''.join([hetu_date, separator, suffix, checksum])
faker.providers.ssn.fi_FI.__init__.Provider(SsnProvider)
faker.providers.ssn.fi_FI.__init__.Provider._get_century_code(year:int)->str
faker.providers.ssn.fi_FI.__init__.Provider.ssn(self,min_age:int=0,max_age:int=105,artificial:bool=False)->str
faker.providers.ssn.fi_FI.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/fr_FR/__init__.py----------------------------------------
A:faker.providers.ssn.fr_FR.__init__.gender_id->self.random_int(min=1, max=2)
A:faker.providers.ssn.fr_FR.__init__.year_of_birth->self.random_int(min=0, max=99)
A:faker.providers.ssn.fr_FR.__init__.month_of_birth->self.random_int(min=1, max=12)
A:faker.providers.ssn.fr_FR.__init__.order_number->self.random_int(min=1, max=999)
A:faker.providers.ssn.fr_FR.__init__.ssn_without_checksum->int(f'{gender_id:01}{year_of_birth:02}{month_of_birth:02}{code_department}{code_municipality}{order_number:03}')
A:faker.providers.ssn.fr_FR.__init__.checksum->calculate_checksum(ssn_without_checksum)
faker.providers.ssn.fr_FR.__init__.Provider(BaseProvider)
faker.providers.ssn.fr_FR.__init__.Provider.ssn(self)->str
faker.providers.ssn.fr_FR.__init__.Provider.vat_id(self)->str
faker.providers.ssn.fr_FR.__init__.calculate_checksum(ssn_without_checksum:int)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/en_GB/__init__.py----------------------------------------
faker.providers.ssn.en_GB.__init__.Provider(BaseProvider)
faker.providers.ssn.en_GB.__init__.Provider.ssn(self)->str
faker.providers.ssn.en_GB.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/mt_MT/__init__.py----------------------------------------
faker.providers.ssn.mt_MT.__init__.Provider(BaseProvider)
faker.providers.ssn.mt_MT.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/bn_BD/__init__.py----------------------------------------
faker.providers.ssn.bn_BD.__init__.Provider(SsnProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/fil_PH/__init__.py----------------------------------------
faker.providers.ssn.fil_PH.__init__.Provider(EnPhSsnProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/he_IL/__init__.py----------------------------------------
A:faker.providers.ssn.he_IL.__init__.newID->newID.zfill(8).zfill(8)
A:faker.providers.ssn.he_IL.__init__.num->int(digit)
faker.providers.ssn.he_IL.__init__.Provider(SsnProvider)
faker.providers.ssn.he_IL.__init__.Provider.ssn(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/ssn/nl_BE/__init__.py----------------------------------------
A:faker.providers.ssn.nl_BE.__init__.mydate->self.generator.date()
A:faker.providers.ssn.nl_BE.__init__.elms->self.generator.date().split('-')
A:faker.providers.ssn.nl_BE.__init__.seq->self.generator.random_int(1, 998)
A:faker.providers.ssn.nl_BE.__init__.date_as_int->int(''.join(elms))
A:faker.providers.ssn.nl_BE.__init__.s->_checksum(date_as_int)
A:faker.providers.ssn.nl_BE.__init__.vat_without_check->self.bothify(f'{generated_initial_number}{vat_id_random_section}')
A:faker.providers.ssn.nl_BE.__init__.vat_as_int->int(vat_without_check)
faker.providers.ssn.nl_BE.__init__.Provider(SsnProvider)
faker.providers.ssn.nl_BE.__init__.Provider.ssn(self)->str
faker.providers.ssn.nl_BE.__init__.Provider.vat_id(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/__init__.py----------------------------------------
faker.providers.color.__init__.Provider(BaseProvider)
faker.providers.color.__init__.Provider._random_color(self)
faker.providers.color.__init__.Provider.color(self,hue:Optional[HueType]=None,luminosity:Optional[str]=None,color_format:str='hex')->str
faker.providers.color.__init__.Provider.color_hsl(self,hue:Optional[HueType]=None,luminosity:Optional[str]=None)->Tuple[int, int, int]
faker.providers.color.__init__.Provider.color_hsv(self,hue:Optional[HueType]=None,luminosity:Optional[str]=None)->Tuple[int, int, int]
faker.providers.color.__init__.Provider.color_name(self)->str
faker.providers.color.__init__.Provider.color_rgb(self,hue:Optional[HueType]=None,luminosity:Optional[str]=None)->Tuple[int, int, int]
faker.providers.color.__init__.Provider.color_rgb_float(self,hue:Optional[HueType]=None,luminosity:Optional[str]=None)->Tuple[float, float, float]
faker.providers.color.__init__.Provider.hex_color(self)->str
faker.providers.color.__init__.Provider.rgb_color(self)->str
faker.providers.color.__init__.Provider.rgb_css_color(self)->str
faker.providers.color.__init__.Provider.safe_color_name(self)->str
faker.providers.color.__init__.Provider.safe_hex_color(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/color.py----------------------------------------
A:faker.providers.color.color.self.random->random.Random(int(self.seed))
A:faker.providers.color.color.hsv->self.generate_hsv(hue=hue, luminosity=luminosity)
A:faker.providers.color.color.h->min(h, 359)
A:faker.providers.color.color.s->self.pick_saturation(h, hue, luminosity)
A:faker.providers.color.color.v->self.pick_brightness(h, s, luminosity)
A:faker.providers.color.color.hue_->self.random_within(self.get_hue_range(hue))
A:faker.providers.color.color.(s_min, s_max)->self.get_saturation_range(hue)
A:faker.providers.color.color.b_min->self.get_minimum_brightness(h, s)
A:faker.providers.color.color.hsl->self.hsv_to_hsl(hsv)
A:faker.providers.color.color.rgb->self.hsv_to_rgb(hsv)
A:faker.providers.color.color.color_input->self._validate_color_input(color_input)
A:faker.providers.color.color.v1->max(v1, 0)
A:faker.providers.color.color.v2->min(v2, 360)
A:faker.providers.color.color.(r, g, b)->cls.hsv_to_rgb_float(hsv)
faker.providers.color.RandomColor(self,generator:Optional['Generator']=None,seed:Optional[SeedType]=None)
faker.providers.color.RandomColor._validate_color_input(self,color_input:HueType)->Tuple[int, int]
faker.providers.color.RandomColor.generate(self,hue:Optional[HueType]=None,luminosity:Optional[str]=None,color_format:ColorFormat='hex')->str
faker.providers.color.RandomColor.generate_hsl(self,hue:Optional[HueType]=None,luminosity:Optional[str]=None)->Tuple[int, int, int]
faker.providers.color.RandomColor.generate_hsv(self,hue:Optional[HueType]=None,luminosity:Optional[str]=None)->Tuple[int, int, int]
faker.providers.color.RandomColor.generate_rgb(self,hue:Optional[HueType]=None,luminosity:Optional[str]=None)->Tuple[int, int, int]
faker.providers.color.RandomColor.generate_rgb_float(self,hue:Optional[HueType]=None,luminosity:Optional[str]=None)->Tuple[float, float, float]
faker.providers.color.RandomColor.get_color_info(self,hue:int)->Dict[str, Sequence[Tuple[int, int]]]
faker.providers.color.RandomColor.get_hue_range(self,color_input:Optional[HueType])->Tuple[int, int]
faker.providers.color.RandomColor.get_minimum_brightness(self,h:int,s:int)->int
faker.providers.color.RandomColor.get_saturation_range(self,hue:int)->Tuple[int, int]
faker.providers.color.RandomColor.hsv_to_hsl(cls,hsv:Tuple[int,int,int])->Tuple[int, int, int]
faker.providers.color.RandomColor.hsv_to_rgb(cls,hsv:Tuple[int,int,int])->Tuple[int, int, int]
faker.providers.color.RandomColor.hsv_to_rgb_float(cls,hsv:Tuple[int,int,int])->Tuple[float, float, float]
faker.providers.color.RandomColor.pick_brightness(self,h:int,s:int,luminosity:Optional[str])->int
faker.providers.color.RandomColor.pick_hue(self,hue:Optional[HueType])->int
faker.providers.color.RandomColor.pick_saturation(self,hue:int,hue_name:Optional[HueType],luminosity:Optional[str])->int
faker.providers.color.RandomColor.random_within(self,r:Sequence[int])->int
faker.providers.color.RandomColor.set_format(self,hsv:Tuple[int,int,int],color_format:ColorFormat)->str
faker.providers.color.color.RandomColor(self,generator:Optional['Generator']=None,seed:Optional[SeedType]=None)
faker.providers.color.color.RandomColor.__init__(self,generator:Optional['Generator']=None,seed:Optional[SeedType]=None)
faker.providers.color.color.RandomColor._validate_color_input(self,color_input:HueType)->Tuple[int, int]
faker.providers.color.color.RandomColor.generate(self,hue:Optional[HueType]=None,luminosity:Optional[str]=None,color_format:ColorFormat='hex')->str
faker.providers.color.color.RandomColor.generate_hsl(self,hue:Optional[HueType]=None,luminosity:Optional[str]=None)->Tuple[int, int, int]
faker.providers.color.color.RandomColor.generate_hsv(self,hue:Optional[HueType]=None,luminosity:Optional[str]=None)->Tuple[int, int, int]
faker.providers.color.color.RandomColor.generate_rgb(self,hue:Optional[HueType]=None,luminosity:Optional[str]=None)->Tuple[int, int, int]
faker.providers.color.color.RandomColor.generate_rgb_float(self,hue:Optional[HueType]=None,luminosity:Optional[str]=None)->Tuple[float, float, float]
faker.providers.color.color.RandomColor.get_color_info(self,hue:int)->Dict[str, Sequence[Tuple[int, int]]]
faker.providers.color.color.RandomColor.get_hue_range(self,color_input:Optional[HueType])->Tuple[int, int]
faker.providers.color.color.RandomColor.get_minimum_brightness(self,h:int,s:int)->int
faker.providers.color.color.RandomColor.get_saturation_range(self,hue:int)->Tuple[int, int]
faker.providers.color.color.RandomColor.hsv_to_hsl(cls,hsv:Tuple[int,int,int])->Tuple[int, int, int]
faker.providers.color.color.RandomColor.hsv_to_rgb(cls,hsv:Tuple[int,int,int])->Tuple[int, int, int]
faker.providers.color.color.RandomColor.hsv_to_rgb_float(cls,hsv:Tuple[int,int,int])->Tuple[float, float, float]
faker.providers.color.color.RandomColor.pick_brightness(self,h:int,s:int,luminosity:Optional[str])->int
faker.providers.color.color.RandomColor.pick_hue(self,hue:Optional[HueType])->int
faker.providers.color.color.RandomColor.pick_saturation(self,hue:int,hue_name:Optional[HueType],luminosity:Optional[str])->int
faker.providers.color.color.RandomColor.random_within(self,r:Sequence[int])->int
faker.providers.color.color.RandomColor.set_format(self,hsv:Tuple[int,int,int],color_format:ColorFormat)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/ru_RU/__init__.py----------------------------------------
A:faker.providers.color.ru_RU.__init__.all_colors->OrderedDict((('Античный Белый', '#FAEBD7'), ('Аквамарин', '#7FFFD4'), ('Лазурный', '#F0FFFF'), ('Бежевый', '#F5F5DC'), ('Черный', '#000000'), ('Синий', '#0000FF'), ('Сине-фиолетовый', '#8A2BE2'), ('Коричневый', '#A52A2A'), ('Шоколадный', '#D2691E'), ('Коралловый', '#FF7F50'), ('Васильковый', '#6495ED'), ('Малиновый', '#DC143C'), ('Темно-синий', '#00008B'), ('Темно-голубой', '#008B8B'), ('Темно-серый', '#A9A9A9'), ('Темно-зеленый', '#006400'), ('Темный хаки', '#BDB76B'), ('Темно-оранжевый', '#FF8C00'), ('Темно-красный', '#8B0000'), ('Темно-бирюзовый', '#00CED1'), ('Темно-фиолетовый', '#9400D3'), ('Темно-розовый', '#FF1493'), ('Тусклый серый', '#696969'), ('Фуксия', '#FF00FF'), ('Золотой', '#FFD700'), ('Серый', '#808080'), ('Зеленый', '#008000'), ('Желто-зеленый', '#ADFF2F'), ('Ярко-розовый', '#FF69B4'), ('Индиго', '#4B0082'), ('Слоновая кость', '#FFFFF0'), ('Хаки', '#F0E68C'), ('Розовато-лавандовый', '#FFF0F5'), ('Светло-синий', '#ADD8E6'), ('Светло-голубой', '#E0FFFF'), ('Светло-серый', '#D3D3D3'), ('Светло-зеленый', '#90EE90'), ('Светло-розовый', '#FFB6C1'), ('Светло-голубой', '#87CEFA'), ('Светло-желтый', '#FFFFE0'), ('Каштановый', '#800000'), ('Оранжевый', '#FFA500'), ('Оранжево-красный', '#FF4500'), ('Бледно-зеленый', '#98FB98'), ('Бледно-Бирюзовый', '#AFEEEE'), ('Розовый', '#FFC0CB'), ('Сливовый', '#DDA0DD'), ('Пурпурный', '#800080'), ('Красный', '#FF0000'), ('Цвет морской волны', '#2E8B57'), ('Серебряный', '#C0C0C0'), ('Бирюзовый', '#40E0D0'), ('Фиолетовый', '#EE82EE'), ('Белый', '#FFFFFF'), ('Желтый', '#FFFF00'), ('Желто-зеленый', '#9ACD32')))
faker.providers.color.ru_RU.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/sk_SK/__init__.py----------------------------------------
faker.providers.color.sk_SK.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/az_AZ/__init__.py----------------------------------------
A:faker.providers.color.az_AZ.__init__.all_colors->OrderedDict((('Akuamarin', '#7FFFD4'), ('Azure', '#F0FFFF'), ('Bej', '#F5F5DC'), ('Qara', '#000000'), ('Mavi', '#0000FF'), ('Mavi-bənövşəyi', '#8A2BE2'), ('Qəhvəyi', '#A52A2A'), ('Şokolad', '#D2691E'), ('Mərcan', '#FF7F50'), ('Tünd mavi', '#00008B'), ('Tünd boz', '#A9A9A9'), ('Tünd yaşıl', '#006400'), ('Tünd Xaki', '#BDB76B'), ('Tünd Portağal', '#FF8C00'), ('Tünd Qırmızı', '#8B0000'), ('Tünd Bənövşəyi', '#9400D3'), ('Tünd Çəhrayı', '#FF1493'), ('Sönük Boz', '#696969'), ('Fuksiya', '#FF00FF'), ('Qızıl', '#FFD700'), ('Boz', '#808080'), ('Yaşıl', '#008000'), ('Sarı-yaşıl', '#ADFF2F'), ('Xaki', '#F0E68C'), ('Lavanda çəhrayı', '#FFF0F5'), ('Açıq Mavi', '#ADD8E6'), ('Açıq Boz', '#D3D3D3'), ('Açıq Yaşıl', '#90EE90'), ('Açıq Çəhrayı', '#FFB6C1'), ('Açıq Sarı', '#FFFFE0'), ('Şabalıd', '#800000'), ('Portağal', '#FFA500'), ('Narıncı Qırmızı', '#FF4500'), ('Solğun Yaşıl', '#98FB98'), ('Çəhrayı', '#FFC0CB'), ('Qırmızı', '#FF0000'), ('Aqua', '#2E8B57'), ('Gümüş', '#C0C0C0'), ('Firuzə', '#40E0D0'), ('Bənövşəyi', '#EE82EE'), ('Ağ', '#FFFFFF'), ('Sarı', '#FFFF00')))
faker.providers.color.az_AZ.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/hy_AM/__init__.py----------------------------------------
A:faker.providers.color.hy_AM.__init__.all_colors->OrderedDict((('Ալիսի կապույտ', '#F0F8FF'), ('Անանուխի կրեմ', '#F5FFFA'), ('Անտառային կանաչ', '#228B22'), ('Արծաթագույն', '#C0C0C0'), ('Արքայական կապույտ', '#4169E1'), ('Բաց դեղին', '#FFFFE0'), ('Բաց դեղնաոսկեգույն', '#FAFAD2'), ('Բաց երկնագույն', '#87CEFA'), ('Բաց ծովային կանաչ', '#20B2AA'), ('Բաց կաթնագույն', '#FFFFF0'), ('Բաց կանաչ', '#90EE90'), ('Բաց կապույտ', '#ADD8E6'), ('Բաց կապտականաչ', '#E0FFFF'), ('Բաց կորալ', '#F08080'), ('Բաց մանուշակագույն', '#EE82EE'), ('Բաց մոխրագույն թերթաքար', '#778899'), ('Բաց մոխրագույն', '#D3D3D3'), ('Բաց նշագույն', '#FFEBCD'), ('Բաց պողպատե կապույտ', '#B0C4DE'), ('Բաց սաղմոնագույն', '#FFA07A'), ('Բաց վարդագույն', '#FFB6C1'), ('Բեժ', '#F5F5DC'), ('Բոսորագույն', '#DC143C'), ('Գարնանային կանաչ', '#00FF7F'), ('Գեյնսբորրո', '#DCDCDC'), ('Գունատ կանաչ', '#98FB98'), ('Գունատ կարմիր մանուշակագույն', '#DB7093'), ('Գունատ ոսկեգույն', '#EEE8AA'), ('Գունատ փիրուզագույն', '#AFEEEE'), ('Գրասենյակային կանաչ', '#008000'), ('Դարչնագույն ավազ', '#F4A460'), ('Դարչնագույն', '#964B00'), ('Դեղին', '#FFFF00'), ('Դեղձի կրեմ', '#FFDAB9'), ('Դեղնականաչ', '#9ACD3'), ('Դոդջերս կապույտ', '#1E90FF'), ('Եգիպտացորենի մազիկներ', '#FFF8DC'), ('Երկնագույն մառախուղ', '#F0FFFF'), ('Երկնագույն', '#87CEEB'), ('Զինվորական կանաչ', '#6B8E23'), ('Թամբի դարչնագույն', '#8B4513'), ('Թեժ վարդագույն', '#FF69B4'), ('Թուխ', '#D2B48C'), ('Ինդիգո', '#4B0082'), ('Լայմի կանաչ', '#32CD32'), ('Լավանդ', '#E6E6FA'), ('Լոլիկ', '#FF6347'), ('Խակի', '#F0E68C'), ('Խոլորձագույն', '#DA70D6'), ('Ծխագույն', '#F5F5F5'), ('Ծովախեցի', '#FFF5EE'), ('Ծովակնագույն', '#7FFFD4'), ('Ծովային կանաչ', '#2E8B57'), ('Կադետների կապույտ', '#5F9EA0'), ('Կաթնագույն', '#FFFAF0'), ('Կակաոյի դարչնագույն', '#D2691E'), ('Կանաչ', '#00FF00'), ('Կանաչադեղին', '#ADFF2F'), ('Կապույտ թերթաքար', '#6A5ACD'), ('Կապույտ մանուշակագույն', '#8A2BE2'), ('Կապույտ փոշի', '#B0E0E6'), ('Կապույտ', '#0000FF'), ('Կապտականաչ', '#00FFFF'), ('Կարմիր դարչնագույն', '#A52A2A'), ('Կարմիր լավանդ', '#FFF0F5'), ('Կարմիր մանուշակագույն', '#C71585'), ('Կարմիր', '#FF0000'), ('Կեսգիշերային կապույտ', '#191970'), ('Կիտրոնի շիֆոն', '#FFFACD'), ('Կորալ', '#FF7F50'), ('Հարած պապայա', '#FFEFD5'), ('Հին ժանյակ', '#FDF5E6'), ('Հնաոճ սպիտակ', '#FAEBD7'), ('Հնդկական կարմիր', '#CD5C5C'), ('Հրակայուն աղյուս', '#B22222'), ('Ձիթապտղի գույն', '#808000'), ('Ձյունաճերմակ', '#FFFAFA'), ('Մանուշակագույն', '#800080'), ('Մեղրացող սեխ', '#F0FFF0'), ('Միջին գարնանային կանաչ', '#00FA9A'), ('Միջին խոլորձագույն', '#BA55D3'), ('Միջին ծովակնագույն', '#66CDAA'), ('Միջին ծովային կանաչ', '#3CB371'), ('Միջին կապույտ թերթաքար', '#7B68EE'), ('Միջին կապույտ', '#0000CD'), ('Միջին կապտականաչ', '#9370DB'), ('Միջին փիրուզագույն', '#48D1CC'), ('Մոխրագույն թերթաքար', '#708090'), ('Մոխրագույն', '#808080'), ('Մոկասին', '#FFE4B5'), ('Մուգ երկնագույն', '#00BFFF'), ('Մուգ խակի', '#BDB76B'), ('Մուգ խոլորձագույն', '#9932CC'), ('Մուգ ծովային կանաչ', '#8FBC8F'), ('Մուգ կանաչ', '#006400'), ('Մուգ կապույտ թերթաքար', '#483D8B'), ('Մուգ կապույտ', '#00008B'), ('Մուգ կապտականաչ', '#008080'), ('Մուգ կարմիր', '#8B0000'), ('Մուգ ձիթապտղի կանաչ', '#556B2F'), ('Մուգ մանուշակագույն', '#9400D3'), ('Մուգ մոխրագույն թերթաքար', '#2F4F4F'), ('Մուգ մոխրագույն', '#696969'), ('Մուգ մոխրագույն', '#A9A9A9'), ('Մուգ նարնջագույն', '#FF8C00'), ('Մուգ ոսկեգույն', '#B8860B'), ('Մուգ սաղմոնագույն', '#E9967A'), ('Մուգ վառ մանուշակագույն', '#8B008B'), ('Մուգ վարդագույն', '#FF1493'), ('Մուգ փիրուզագույն', '#00CED1'), ('Նավահո սպիտակ', '#FFDEAD'), ('Նավատորմի կապույտ', '#000080'), ('Նարնջագույն կարմիր', '#FF4500'), ('Նարնջագույն', '#FFA500'), ('Նշագույն', '#FFE4C4'), ('Շագանակագույն', '#800000'), ('Շարտրուզ', '#7FFF00'), ('Ոսկեգույն ձող', '#DAA520'), ('Ոսկեգույն', '#FFD700'), ('Պերու', '#CD853F'), ('Պողպատե կապույտ', '#4682B4'), ('Սալոր', '#DDA0DD'), ('Սաղմոնագույն', '#FA8072'), ('Սիենա', '#A0522D'), ('Սիզամարգի կանաչ', '#7CFC00'), ('Սպիտակ ստվեր', '#F8F8FF'), ('Սպիտակ', '#FFFFFF'), ('Սև', '#000000'), ('Վառ մանուշակագույն', '#FF00FF'), ('Վարդագույն', '#FFC0CB'), ('Վարդագույն', '#FFE4E1'), ('Վարդադարչնագույն', '#BC8F8F'), ('Վուշ', '#FAF0E6'), ('Տատասկ', '#D8BFD8'), ('Տերեփուկի կապույտ', '#6495ED'), ('Ցորենագույն', '#F5DEB3'), ('Փիրուզագույն', '#40E0D0'), ('Փխրուն փայտ', '#DEB887')))
faker.providers.color.hy_AM.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/id_ID/__init__.py----------------------------------------
A:faker.providers.color.id_ID.__init__.all_colors->OrderedDict((('Abu-abu', '#808080'), ('Biru', '#0000FF'), ('Biru dongker', '#00008B'), ('Biru laut', '#0000CD'), ('Biru muda', '#ADD8E6'), ('Coklat', '#A52A2A'), ('Coklat tua', '#8B4513'), ('Emas', '#FFD700'), ('Hijau', '#008000'), ('Hijau muda', '#90EE90'), ('Hijau tua', '#006400'), ('Hitam', '#000000'), ('Jingga', '#FFA500'), ('Kuning', '#FFFF00'), ('Koral', '#FF7F50'), ('Magenta', '#FF00FF'), ('Merah', '#FF0000'), ('Merah marun', '#800000'), ('Merah jambu', '#FFC0CB'), ('Merah bata', '#B22222'), ('Perak', '#C0C0C0'), ('Nila', '#000080'), ('Putih', '#FFFFFF'), ('Ungu', '#800080'), ('Ungu tua', '#4B0082'), ('Zaitun', '#808000')))
faker.providers.color.id_ID.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/cs_CZ/__init__.py----------------------------------------
faker.providers.color.cs_CZ.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/da_DK/__init__.py----------------------------------------
A:faker.providers.color.da_DK.__init__.all_colors->OrderedDict((('Baker-Miller lyserød', '#FF91AF'), ('Lysegul (Crayola)', '#FFAA1D'), ('Rav', '#FFBF00'), ('Rav (SAE / ECE)', '#FF7E00'), ('Atomisk mandarin', '#FF9966'), ('Bisque', '#FFE4C4'), ('Candy apple rød', '#FF0800'), ('Babypudder', '#FEFEFA'), ('Coquelicot', '#FF3800'), ('Blancheret mandel', '#FFEBCD'), ('Strålende rose', '#FF55A3'), ('Bittersød', '#FE6F5E'), ('Cadmium gul', '#FFF600'), ('Kanariefarvet gul', '#FFEF00'), ('Nellike lyserød', '#FFA6C9'), ('Kanariefugl', '#FFFF99'), ('Kirsebærblomst lyserød', '#FFB7C5'), ('Koral', '#FF7F50'), ('Kinesisk gul', '#FFB200'), ('Krom gul', '#FFA700'), ('Cybergult', '#FFD300'), ('Dyb lyserød', '#FF1493'), ('Aureolin', '#FDEE00'), ('Bananmani', '#FAE7B5'), ('Candyfloss', '#FFBCD9'), ('Fløde', '#FFFDD0'), ('Kosmisk latte', '#FFF8E7'), ('Cornsilk', '#FFF8DC'), ('Mørk orange', '#FF8C00'), ('Dyb safran', '#FF9933'), ('Blomsterhvid', '#FFFAF0'), ('Brændende rose', '#FF5470'), ('Fransk lyserød', '#FD6C9E'), ('Fuchsia', '#FF00FF'), ('Fransk fuchsia', '#FD3F92'), ('Antik hvid', '#FAEBD7'), ('Blond', '#FAF0BE'), ('Brink pink', '#FB607F'), ('Abrikos', '#FBCEB1'), ('Majs', '#FBEC5D'), ('Koralrosa', '#F88379'), ('Kultiveret', '#F5F5F5'), ('Cameo pink', '#EFBBCC'), ('Champagne', '#F7E7CE'), ('Flickr Pink', '#FB0081'), ('Dyb champagne', '#FAD6A5'), ('Congo pink', '#F88379'), ('Champagne lyserød', '#F1DDCF'), ('Baby lyserød', '#F4C2C2'), ('Beige', '#F5F5DC'), ('Fransk rose', '#F64A8A'), ('Cyclamen', '#F56FA1'), ('Azure (X11 / webfarve)', '#F0FFFF'), ('Alice blå', '#F0F8FF'), ('Mode fuchsia', '#F400A1'), ('Mandel', '#EFDECD'), ('Æggeskal', '#F0EAD6'), ('Hollandsk hvid', '#EFDFBB'), ('Amaranth pink', '#F19CBB'), ('Buff', '#F0DC82'), ('Ørkensand', '#EDC9AF'), ('Cadmium orange', '#ED872D'), ('Arylid gul', '#E9D66B'), ('Brandopal', '#E95C4B'), ('Alabaster', '#EDEAE0'), ('Gulerod orange', '#ED9121'), ('Hør', '#EEDC82'), ('Brændt sienna', '#E97451'), ('Cadmium rød', '#E30022'), ('Mørk laks', '#E9967A'), ('Flamme', '#E25822'), ('Knogle', '#E3DAC9'), ('Amaranth', '#E52B50'), ('Forfrysninger', '#E936A7'), ('Fulvous', '#E48400'), ('Charm lyserød', '#E68FAC'), ('Candy pink', '#E4717A'), ('Fawn', '#E5AA70'), ('Citrin', '#E4D00A'), ('Cinnabar', '#E34234'), ('CG rød', '#E03C31'), ('Crimson', '#DC143C'), ('Jorden gul', '#E1A95F'), ('Kina lyserød', '#DE6FA1'), ('Rødme', '#DE5D83'), ('Chartreuse (traditionel)', '#DFFF00'), ('Burlywood', '#DEB887'), ('Cerise', '#DE3163'), ('Barbie Pink', '#DA1884'), ('Fandango pink', '#DE5285'), ('Dyb cerise', '#DA3287'), ('Chokolade (web)', '#D2691E'), ('Lys lilla', '#D891EF'), ('Dogwood rose', '#D71868'), ('Carmine (M&P)', '#D70040'), ('Kobber (Crayola)', '#DA8A67'), ('Amaranth rød', '#D3212D'), ('Fransk mauve', '#D473D4'), ('Kakaobrun', '#D2691E'), ('Arktisk kalk', '#D0FF14'), ('Brandbil rød', '#CE2029'), ('Cedertræskiste', '#C95A49'), ('Kamel', '#C19A6B'), ('Brændt orange', '#CC5500'), ('Fransk hindbær', '#C72C48'), ('Aero blå', '#C9FFE5'), ('Bitter citron', '#CAE00D'), ('Kanel Satin', '#CD607E'), ('Lys rødbrun', '#C32148'), ('Ørken', '#C19A6B'), ('Fuchsia lilla', '#CC397B'), ('Engelsk vermillion', '#CC474B'), ('Antik messing', '#CD9575'), ('Bronze', '#CD7F32'), ('Elektrisk kalk', '#CCFF00'), ('Fuchsia steg', '#C74375'), ('Murstensrød', '#CB4154'), ('Legeret orange', '#C46210'), ('Kobberrød', '#CB6D51'), ('Kardinal', '#C41E3A'), ('Bitter kalk', '#BFFF00'), ('Engelsk lavendel', '#B48395'), ('Celeste', '#B2FFFF'), ('Mørk kaki', '#BDB76B'), ('Brak', '#C19A6B'), ('Fuchsia (Crayola)', '#C154C1'), ('Ecru', '#C2B280'), ('Bittersød glimmer', '#BF4F51'), ('Lyseblå', '#BCD4E6'), ('Sorte skygger', '#BFAFB2'), ('Elektrisk lilla', '#BF00FF'), ('Byzantinsk', '#BD33A4'), ('Columbia Blue', '#B9D9EB'), ('Mørk guldrør', '#B8860B'), ('Kobber', '#B87333'), ('Dyb kastanje', '#B94E48'), ('Carnelian', '#B31B1B'), ('Afrikansk violet', '#B284BE'), ('Fandango', '#B53389'), ('Askegrå', '#B2BEB5'), ('Kobber øre', '#AD6F69'), ('Auburn', '#A52A2A'), ('Celadon', '#ACE1AF'), ('Syregrøn', '#B0BF1A'), ('Amaranth lilla', '#AB274F'), ('brunt sukker', '#AF6E4D'), ('Blå klokke', '#A2A2D0'), ('Firebrick', '#B22222'), ('Kinesisk rød', '#AA381E'), ('Engelsk rød', '#AB4B52'), ('Café au lait', '#A67B5B'), ('Kadetblå (Crayola)', '#A9B2C3'), ('Snestorm blå', '#ACE5EE'), ('Kina steg', '#A8516E'), ('Fransk beige', '#A67B5B'), ('Blast-off bronze', '#A57164'), ('Flirt', '#A2006D'), ('Android grøn', '#A4C639'), ('Cambridge blå', '#A3C1AD'), ('Babyblå øjne', '#A1CAF1'), ('Amaranth (M&P)', '#9F2B68'), ('Cinereous', '#98817B'), ('Kedelig', '#967117'), ('Citron', '#9FA91F'), ('Bæver', '#9F8170'), ('Crimson (UA)', '#9E1B32'), ('Kadetgrå', '#91A3B0'), ('Brunbrun', '#A17A74'), ('Stor dukkert o’ruby', '#9C2542'), ('Fransk kalk', '#9EFD38'), ('Ametyst', '#9966CC'), ('Kobber rose', '#996666'), ('Eton blå', '#96C8A2'), ('Carmine', '#960018'), ('Bistre brun', '#967117'), ('Mørk orkidé', '#9932CC'), ('Mørk violet', '#9400D3'), ('Artiskok', '#8F9779'), ('kastanje', '#954535'), ('Antik fuchsia', '#915C83'), ('Mørk havgrøn', '#8FBC8F'), ('Baby Blå', '#89CFF0'), ('Cool grå', '#8C92AC'), ('Mørk magenta', '#8B008B'), ('Cordovan', '#893F45'), ('Mørk himmelblå', '#8CBED6'), ('Æblegrøn', '#8DB600'), ('Brun', '#88540B'), ('Asparges', '#87A96B'), ('Brandy', '#87413F'), ('Elektrisk violet', '#8F00FF'), ('Blåviolet', '#8A2BE2'), ('Brændt umber', '#8A3324'), ('Mørkerød', '#8B0000'), ('Fransk violet', '#8806CE'), ('Fransk lilla', '#86608E'), ('Fuzzy Wuzzy', '#87421F'), ('Antik rubin', '#841B2D'), ('Slagskib grå', '#848482'), ('Kinesisk violet', '#856088'), ('Aero', '#7CB9E8'), ('Coyote brun', '#81613C'), ('Byzantium', '#702963'), ('Chokolade (traditionel)', '#7B3F00'), ('Akvamarin', '#7FFFD4'), ('Fransk bistre', '#856D4D'), ('Bourgogne', '#800020'), ('Dyb taupe', '#7E5E60'), ('Falu rød', '#801818'), ('Laderød', '#7C0A02'), ('Claret', '#7F1734'), ('Fransk himmelblå', '#77B5FE'), ('Elektrisk blå', '#7DF9FF'), ('Bole', '#79443B'), ('Kaffe', '#6F4E37'), ('Luftoverlegenhed blå', '#72A0C1'), ('Blåviolet (Crayola)', '#7366BD'), ('Knoppegrøn', '#7BB661'), ('Catawba', '#703642'), ('Kornblomst blå', '#6495ED'), ('Elektrisk indigo', '#6F00FF'), ('Eminence', '#6C3082'), ('Blågrå', '#6699CC'), ('Mark trist', '#6C541E'), ('Blodrød', '#660000'), ('Cerulean frost', '#6D9BC3'), ('Dim grå', '#696969'), ('Lyse-grøn', '#66FF00'), ('Kadetblå', '#5F9EA0'), ('Mørkeblå-grå', '#666699'), ('Cyber \u200b\u200bdrue', '#58427C'), ('Caput mortuum', '#592720'), ('Aubergine', '#614051'), ('Mørkt byzantium', '#5D3954'), ('Antik bronze', '#665D1E'), ('Skovgrøn (Crayola)', '#5FA777'), ('Mørkebrun', '#654321'), ('Avocado', '#568203'), ('Blå bukser', '#5DADEC'), ('Mørk elektrisk blå', '#536878'), ('Mørk lever (heste)', '#543D37'), ('Café noir', '#4B3621'), ('Smaragd', '#50C878'), ('Carolina blå', '#56A0D3'), ('Kadet', '#536872'), ('Mørk lever', '#534B4F'), ('Engelsk violet', '#563C5C'), ('Mørk olivengrøn', '#556B2F'), ('Sort koral', '#54626F'), ('Blå derfra', '#5072A7'), ('Ibenholt', '#555D50'), ('Davy er grå', '#555555'), ('Militærgrøn', '#4B5320'), ('Feldgrau', '#4D5D53'), ('Fern grøn', '#4F7942'), ('Mørk mosgrøn', '#4A5D23'), ('Mørk lava', '#483C32'), ('Blåviolet (farvehjul)', '#4D1A7F'), ('Deep Space Sparkle', '#4A646C'), ('Mørk skiferblå', '#483D8B'), ('Sort bønne', '#3D0C02'), ('Bistre', '#3D2B1F'), ('Sort oliven', '#3B3C36'), ('Bluetiful', '#3C69E7'), ("B'dazzled blå", '#2E5894'), ('Trækul', '#36454F'), ('Cerulean blå', '#2A52BE'), ('Kosmisk kobolt', '#2E2D88'), ('Celadon grøn', '#2F847C'), ('Sort kaffe', '#3B2F2F'), ('Amazon', '#3B7A57'), ('Mørk sienna', '#3C1414'), ('Blå (pigment)', '#333399'), ('Mørk skifergrå', '#2F4F4F'), ('Mørk kornblomst', '#26428B'), ('Bleu de France', '#318CE7'), ('Mørke lilla', '#301934'), ('Keltisk blå', '#246BCE'), ('Charleston grøn', '#232B2B'), ('Dodger blå', '#1E90FF'), ('Blågrøn (farvehjul)', '#064E40'), ('Denim', '#1560BD'), ('Eerie sort', '#1B1B1B'), ('Denimblå', '#2243B6'), ('Blå (Crayola)', '#1F75FE'), ('Flickr Blue', '#0063dc'), ('Skovgrøn (web)', '#228B22'), ('Sort chokolade', '#1B1811'), ('Engelsk grøn', '#1B4D3E'), ('Brunswick grøn', '#1B4D3E'), ('Cerulean (Crayola)', '#1DACD6'), ('Fluorescerende blå', '#15F4EE'), ('Lys marineblå', '#1974D2'), ('Mørk jungle grøn', '#1A2421'), ('Mørk forår grøn', '#177245'), ('Blå (RYB)', '#0247FE'), ('Egyptisk blå', '#1034A6'), ('Blå safir', '#126180'), ('Blågrøn', '#0D98BA'), ('Mørk pastelgrøn', '#03C03C')))
faker.providers.color.da_DK.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/pt_BR/__init__.py----------------------------------------
A:faker.providers.color.pt_BR.__init__.all_colors->OrderedDict((('Açafrão', '#F4C430'), ('Água-marinha média', '#66CDAA'), ('Água-marinha', '#7FFFD4'), ('Água', '#00FFFF'), ('Alizarina', '#E32636'), ('Amarelo brasilis', '#ECDB00'), ('Amarelo claro', '#FFFFE0'), ('Amarelo creme', '#ECD690'), ('Amarelo escuro', '#F2B73F'), ('Amarelo esverdeado', '#9ACD32'), ('Amarelo esverdeado', '#ADFF2F'), ('Amarelo ouro claro', '#FAFAD2'), ('Amarelo queimado', '#EEAD2D'), ('Amarelo', '#FFFF00'), ('Âmbar', '#FFBF00'), ('Ameixa', '#DDA0DD'), ('Amêndoa', '#FFEBCD'), ('Ametista', '#9966CC'), ('Aspargo', '#7BA05B'), ('Azul aço claro', '#B0C4DE'), ('Azul aço', '#4682B4'), ('Azul alice', '#F0F8FF'), ('Azul ardósia claro', '#8470FF'), ('Azul ardósia escuro', '#483D8B'), ('Azul ardósia médio', '#7B68EE'), ('Azul ardósia', '#6A5ACD'), ('Azul areado', '#B8CAD4'), ('Azul brasilis brilhante', '#09ACDB'), ('Azul brasilis', '#00BDCE'), ('Azul cadete', '#5F9EA0'), ('Azul camarada', '#054F77'), ('Azul celeste brilhante', '#007FFF'), ('Azul celeste pernambucano', '#00A4CD'), ('Azul celeste', '#F0FFFF'), ('Azul céu claro', '#87CEFA'), ('Azul céu profundo', '#00BFFF'), ('Azul céu', '#87CEEB'), ('Azul claro', '#ADD8E6'), ('Azul cobalto', '#0047AB'), ('Azul escuro', '#00008B'), ('Azul flor de milho', '#6495ED'), ('Azul força aérea', '#5D8AA8'), ('Azul furtivo', '#1E90FF'), ('Azul manteiga', '#A6AA3E'), ('Azul marinho', '#120A8F'), ('Azul médio', '#0000CD'), ('Azul meia-noite', '#191970'), ('Azul petróleo', '#084D6E'), ('Azul pólvora', '#B0E0E6'), ('Azul real', '#0000DD'), ('Azul taparuere', '#248EFF'), ('Azul turquesa brilhante', '#00DDFF'), ('Azul turquesa', '#00CCEE'), ('Azul violeta', '#8A2BE2'), ('Azul', '#0000FF'), ('Bege', '#F5F5DC'), ('Bordô', '#800000'), ('Borgonha', '#900020'), ('Branco antigo', '#FAEBD7'), ('Branco fantasma', '#F8F8FF'), ('Branco floral', '#FFFAF0'), ('Branco fumaça', '#F5F5F5'), ('Branco navajo', '#FFDEAD'), ('Branco', '#FFFFFF'), ('Brasil', '#A7F432'), ('Bronze', '#CD7F32'), ('Caqui escuro', '#BDB76B'), ('Caqui', '#F0E68C'), ('Caramelo', '#8B5742'), ('Cardo', '#D8BFD8'), ('Carmesim', '#DC143C'), ('Carmim carnáceo', '#960018'), ('Carmim clássico', '#992244'), ('Carmim', '#712F26'), ('Castanho avermelhado', '#8B0000'), ('Castanho claro', '#D2B48C'), ('Cenoura', '#ED9121'), ('Cereja Hollywood', '#F400A1'), ('Cereja', '#DE3163'), ('Chocolate', '#D2691E'), ('Ciano claro', '#E0FFFF'), ('Ciano escuro', '#008B8B'), ('Ciano', '#00FFFF'), ('Cinza ardósia claro', '#778899'), ('Cinza ardósia escuro', '#2F4F4F'), ('Cinza ardósia', '#708090'), ('Cinza claro', '#D3D3D3'), ('Cinza escuro', '#A9A9A9'), ('Cinza fosco', '#696969'), ('Cinza médio', '#DCDCDC'), ('Cinza', '#808080'), ('Cobre', '#B87333'), ('Concha', '#FFF5EE'), ('Coral claro', '#F08080'), ('Coral', '#FF7F50'), ('Couro', '#F0DC82'), ('Creme de marisco', '#FFE4C4'), ('Creme de menta', '#F5FFFA'), ('Creme', '#FFFDD0'), ('Dourado escuro', '#B8860B'), ('Dourado pálido', '#EEE8AA'), ('Dourado', '#DAA520'), ('Ébano', '#555D50'), ('Eminência', '#6C3082'), ('Escarlate', '#FF2400'), ('Esmeralda', '#50C878'), ('Eucalipto', '#44D7A8'), ('Fandango', '#B53389'), ('Feldspato', '#FDD5B1'), ('Ferrugem', '#B7410E'), ('Flerte', '#A2006D'), ('Fúcsia', '#FF00FF'), ('Fuligem', '#3D2B1F'), ('Glicínia', '#C9A0DC'), ('Glitter', '#E6E8FA'), ('Grená', '#831D1C'), ('Heliotrópio', '#DF73FF'), ('Herbal', '#2E8B57'), ('Independência', '#4C516D'), ('Índigo', '#4B0082'), ('Iris', '#5A4FCF'), ('Jade', '#00A86B'), ('Jambo', '#FF4500'), ('Jasmine', '#F8DE7E'), ('Kiwi', '#8EE53F'), ('Laranja claro', '#FFB84D'), ('Laranja escuro', '#FF8C00'), ('Laranja', '#FFA500'), ('Lavanda avermelhada', '#FFF0F5'), ('Lavanda', '#E6E6FA'), ('Lilás', '#C8A2C8'), ('Lima', '#FDE910'), ('Limão', '#00FF00'), ('Linho', '#FAF0E6'), ('Madeira', '#DEB887'), ('Magenta escuro', '#8B008B'), ('Magenta', '#FF00FF'), ('Malva', '#E0B0FF'), ('Mamão batido', '#FFEFD5'), ('Maná', '#F0FFF0'), ('Marfim', '#FFFFF0'), ('Marrom amarelado', '#F4A460'), ('Marrom claro', '#A52A2A'), ('Marrom rosado', '#BC8F8F'), ('Marrom sela', '#8B4513'), ('Marrom', '#964B00'), ('Milho Claro', '#FFF8DC'), ('Milho', '#FBEC5D'), ('Mocassim', '#FFE4B5'), ('Mostarda', '#FFDB58'), ('Naval', '#000080'), ('Neve', '#FFFAFA'), ('Nyanza', '#E9FFDB'), ('Ocre', '#CC7722'), ('Oliva escura', '#556B2F'), ('Oliva parda', '#6B8E23'), ('Oliva', '#808000'), ('Orquídea escura', '#9932CC'), ('Orquídea média', '#BA55D3'), ('Orquídea', '#DA70D6'), ('Ouro', '#FFD700'), ('Pardo escuro', '#CC6600'), ('Pardo', '#CD853F'), ('Pêssego', '#FFDAB9'), ('Prata', '#C0C0C0'), ('Preto', '#000000'), ('Púrpura média', '#9370DB'), ('Púrpura', '#800080'), ('Quantum', '#111111'), ('Quartzo', '#51484F'), ('Renda antiga', '#FDF5E6'), ('Rosa amoroso', '#CD69CD'), ('Rosa brilhante', '#FF007F'), ('Rosa Choque', '#FC0FC0'), ('Rosa claro', '#FFB6C1'), ('Rosa danação', '#DA69A1'), ('Rosa embaçado', '#FFE4E1'), ('Rosa forte', '#FF69B4'), ('Rosa profundo', '#FF1493'), ('Rosa', '#FFCBDB'), ('Roxo brasilis', '#8A008A'), ('Roxo', '#993399'), ('Rútilo', '#6D351A'), ('Salmão claro', '#FFA07A'), ('Salmão escuro', '#E9967A'), ('Salmão', '#FA7F72'), ('Sépia', '#705714'), ('Siena', '#FF8247'), ('Tangerina', '#F28500'), ('Terracota', '#E2725B'), ('Tijolo refratário', '#B22222'), ('Tomate', '#FF6347'), ('Triássico', '#FF2401'), ('Trigo', '#F5DEB3'), ('Turquesa escura', '#00CED1'), ('Turquesa média', '#48D1CC'), ('Turquesa pálida', '#AFEEEE'), ('Turquesa', '#40E0D0'), ('Urucum', '#EC2300'), ('Verde amarelado', '#9ACD32'), ('Verde claro', '#90EE90'), ('Verde escuro', '#006400'), ('Verde espectro', '#00FF00'), ('Verde floresta', '#228B22'), ('Verde fluorescente', '#CCFF33'), ('Verde grama', '#7CFC00'), ('Verde lima', '#32CD32'), ('Verde mar claro', '#20B2AA'), ('Verde mar escuro', '#8FBC8F'), ('Verde mar médio', '#3CB371'), ('Verde militar', '#78866B'), ('Verde pálido', '#98FB98'), ('Verde Paris', '#7FFF00'), ('Verde primavera médio', '#00FA9A'), ('Verde primavera', '#00FF7F'), ('Verde-azulado', '#008080'), ('Verde', '#008000'), ('Vermelho enegrecido', '#550000'), ('Vermelho escuro', '#8B0000'), ('Vermelho indiano', '#CD5C5C'), ('Vermelho violeta médio', '#C71585'), ('Vermelho violeta pálido', '#DB7093'), ('Vermelho violeta', '#D02090'), ('Vermelho', '#FF0000'), ('Violeta claro', '#F8CBF8'), ('Violeta escuro', '#9400D3'), ('Violeta', '#EE82EE'), ('Zinco', '#E2DDF0')))
faker.providers.color.pt_BR.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/bg_BG/__init__.py----------------------------------------
A:faker.providers.color.bg_BG.__init__.all_colors->OrderedDict((('Антично-бяло', '#FAEBD7'), ('Аквамарин', '#7FFFD4'), ('Лазурно', '#F0FFFF'), ('Бежово', '#F5F5DC'), ('Черно', '#000000'), ('Синьо', '#0000FF'), ('Синьо-виолетовo', '#8A2BE2'), ('Кафявo', '#A52A2A'), ('Шоколадовo', '#D2691E'), ('Корал', '#FF7F50'), ('Метличино синьо', '#6495ED'), ('Малиново', '#DC143C'), ('Тъмносиньо', '#00008B'), ('Тъмноциан', '#008B8B'), ('Тъмносуво', '#A9A9A9'), ('Тъмнозелено', '#006400'), ('Тъмно маслинено зелено', '#BDB76B'), ('Тъмнооранжево', '#FF8C00'), ('Тъмночервено', '#8B0000'), ('Тъмнотюркоазено', '#00CED1'), ('Тъмновиолетово', '#9400D3'), ('Тъмнорозово', '#FF1493'), ('Бледо сиво', '#696969'), ('Фуксия', '#FF00FF'), ('Златно', '#FFD700'), ('Сребърно', '#808080'), ('Зелено', '#008000'), ('Жълто-зелено', '#ADFF2F'), ('Ярко-розово', '#FF69B4'), ('Индиго', '#4B0082'), ('Слонова кост', '#FFFFF0'), ('Маслинено зелено', '#F0E68C'), ('Розовато-лавандулово', '#FFF0F5'), ('Светлосиньо', '#ADD8E6'), ('Светло-небесносино', '#E0FFFF'), ('Светлосиво', '#D3D3D3'), ('Светлозелено', '#90EE90'), ('Светлорозово', '#FFB6C1'), ('Небесносиньо', '#87CEFA'), ('Светложълто', '#FFFFE0'), ('Кестеняво', '#800000'), ('Оранжево', '#FFA500'), ('Оранжево-червено', '#FF4500'), ('Бледозелено', '#98FB98'), ('Бледотюркоазно', '#AFEEEE'), ('Розово', '#FFC0CB'), ('Сливово розово', '#DDA0DD'), ('Пурпурно', '#800080'), ('Червено', '#FF0000'), ('Циан', '#2E8B57'), ('Сребърно', '#C0C0C0'), ('Тюркоазено', '#40E0D0'), ('Виолетово', '#EE82EE'), ('Бяло', '#FFFFFF'), ('Жълто', '#FFFF00'), ('Жълто-зелено', '#9ACD32')))
faker.providers.color.bg_BG.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/es/__init__.py----------------------------------------
A:faker.providers.color.es.__init__.all_colors->OrderedDict((('Agua marina medio', '#66CDAA'), ('Agua-marina', '#7FFFD4'), ('Almendra blanqueado', '#FFEBCD'), ('Amarillo', '#FFFF00'), ('Amarillo claro', '#FFFFE0'), ('Amarillo dorado', '#DAA520'), ('Amarillo dorado claro', '#FAFAD2'), ('Amarillo dorado oscuro', '#B8860B'), ('Amarillo dorado pálido', '#EEE8AA'), ('Amarillo trigo', '#F5DEB3'), ('Amarillo verde', '#9ACD32'), ('Azul', '#0000FF'), ('Azul Alicia', '#F0F8FF'), ('Azul acero', '#4682B4'), ('Azul acero claro', '#B0C4DE'), ('Azul anciano', '#6495ED'), ('Azul azur', '#F0FFFF'), ('Azul cadete', '#5F9EA0'), ('Azul cielo', '#87CEEB'), ('Azul cielo claro', '#87CEFA'), ('Azul cielo profundo', '#00BFFF'), ('Azul claro', '#ADD8E6'), ('Azul lona', '#1E90FF'), ('Azul marino', '#000080'), ('Azul medianoche', '#191970'), ('Azul medio', '#0000CD'), ('Azul oscuro', '#00008B'), ('Azul pizarra', '#6A5ACD'), ('Azul pizarra medio', '#7B68EE'), ('Azul pizarra oscuro', '#483D8B'), ('Azul polvo', '#B0E0E6'), ('Azul real', '#4169E1'), ('Azul violeta', '#8A2BE2'), ('Beige', '#F5F5DC'), ('Beige antiguo', '#FAEBD7'), ('Beige limón', '#FFFACD'), ('Beige melocotón', '#FFDAB9'), ('Beige mocasín', '#FFE4B5'), ('Beige papaya', '#FFEFD5'), ('Bisque', '#FFE4C4'), ('Blanco', '#FFFFFF'), ('Blanco concha', '#FFF5EE'), ('Blanco encaje', '#FDF5E6'), ('Blanco fantasma', '#F8F8FF'), ('Blanco floral', '#FFFAF0'), ('Blanco humo', '#F5F5F5'), ('Blanco lavanda', '#FFF0F5'), ('Blanco lino', '#FAF0E6'), ('Blanco menta', '#F5FFFA'), ('Blanco navajo', '#FFDEAD'), ('Blanco nieve', '#FFFAFA'), ('Caqui', '#6B8E23'), ('Caqui oscuro', '#BDB76B'), ('Chartreuse', '#7FFF00'), ('Chocolate', '#D2691E'), ('Cian', '#00FFFF'), ('Cian clarto', '#E0FFFF'), ('Ciruela', '#DDA0DD'), ('Coral', '#FF7F50'), ('Coral claro', '#F08080'), ('Amarillo maíz dulce', '#FFF8DC'), ('Cyan oscuro', '#008B8B'), ('Fucsia', '#FF00FF'), ('Granate', '#800000'), ('Gris', '#808080'), ('Gris claro', '#D3D3D3'), ('Gris gainsboro (Estaño)', '#DCDCDC'), ('Gris mate', '#696969'), ('Gris oscuro', '#A9A9A9'), ('Gris pizarra', '#708090'), ('Gris pizarra claro', '#778899'), ('Gris pizarra oscuro', '#2F4F4F'), ('Lavanda', '#E6E6FA'), ('Lima', '#00FF00'), ('Magenta', '#FF00FF'), ('Magenta oscuro', '#8B008B'), ('Marfil', '#FFFFF0'), ('Marrón', '#A52A2A'), ('Marrón arena', '#F4A460'), ('Marrón caqui', '#F0E68C'), ('Marrón cuero', '#8B4513'), ('Marrón madera rústica', '#DEB887'), ('Marrón perú', '#CD853F'), ('Marrón rojizo', '#D2B48C'), ('Marrón rosado', '#BC8F8F'), ('Marrón siena', '#A0522D'), ('Melón dulce', '#F0FFF0'), ('Naranja', '#FFA500'), ('Naranja oscuro', '#FF8C00'), ('Negro', '#000000'), ('Oliva', '#808000'), ('Oro', '#FFD700'), ('Orquídea', '#DA70D6'), ('Orquídea medio', '#BA55D3'), ('Orquídea púrpura oscuro', '#9932CC'), ('Plata', '#C0C0C0'), ('Púrpura', '#800080'), ('Púrpura medio', '#9370DB'), ('Rojo', '#FF0000'), ('Rojo anaranjado', '#FF4500'), ('Rojo carmesí', '#DC143C'), ('Rojo indio', '#CD5C5C'), ('Rojo ladrillo', '#B22222'), ('Rojo oscuro', '#8B0000'), ('Rojo tomate', '#FF6347'), ('Rojo violeta medio', '#C71585'), ('Rosa', '#FFC0CB'), ('Rosa brumoso', '#FFE4E1'), ('Rosa caliente', '#FF69B4'), ('Rosa claro', '#FFB6C1'), ('Rosa profundo', '#FF1493'), ('Salmón', '#FA8072'), ('Salmón claro', '#FFA07A'), ('Salmón oscuro', '#E9967A'), ('Turquesa', '#40E0D0'), ('Turquesa medio', '#48D1CC'), ('Turquesa oscuro', '#00CED1'), ('Turquesa pálido', '#AFEEEE'), ('Verde', '#008000'), ('Verde azulado', '#008080'), ('Verde bosque', '#228B22'), ('Verde claro', '#90EE90'), ('Verde lima', '#32CD32'), ('Verde limón', '#ADFF2F'), ('Verde mar', '#2E8B57'), ('Verde mar claro', '#20B2AA'), ('Verde mar medio', '#3CB371'), ('Verde mar oscuro', '#8FBC8F'), ('Verde oliva oscuro', '#556B2F'), ('Verde oscuro', '#006400'), ('Verde prado', '#7CFC00'), ('Verde primavera', '#00FF7F'), ('Verde primavera medio', '#00FA9A'), ('Verde pálido', '#98FB98'), ('Violeta', '#EE82EE'), ('Violeta cardo', '#D8BFD8'), ('Violeta oscuro', '#9400D3'), ('Violeta sonrojado pálido', '#DB7093'), ('Índigo', '#4B0082')))
faker.providers.color.es.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/hu_HU/__init__.py----------------------------------------
faker.providers.color.hu_HU.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/hr_HR/__init__.py----------------------------------------
A:faker.providers.color.hr_HR.__init__.all_colors->OrderedDict((('Akvamarin', '#7FFFD4'), ('Antikna bijela', '#FAEBD7'), ('Azurna', '#F0FFFF'), ('Bež', '#F5F5DC'), ('Bijela', '#FFFFFF'), ('Bijelo bilje', '#FFFAF0'), ('Bjelokost', '#FFFFF0'), ('Blijeda kudelja', '#EEE8AA'), ('Blijedi badem', '#FFEBCD'), ('Blijedoljubičasta', '#DB7093'), ('Blijedotirkizna', '#AFEEEE'), ('Blijedozelena', '#98FB98'), ('Breskva', '#FFDAB9'), ('Brončana', '#D2B48C'), ('Čeličnoplava', '#4682B4'), ('Čičak', '#D8BFD8'), ('Cijan', '#00FFFF'), ('Čipka', '#FDF5E6'), ('Čokoladna', '#D2691E'), ('Crna', '#000000'), ('Crvena', '#FF0000'), ('Dim', '#F5F5F5'), ('Dodger plava', '#1E90FF'), ('Duboko ružičasta', '#FF1493'), ('Fuksija', '#FF00FF'), ('Gainsboro', '#DCDCDC'), ('Grimizna', '#DC143C'), ('Indigo', '#4B0082'), ('Jelenska koža', '#FFE4B5'), ('Kadetski plava', '#5F9EA0'), ('Kestenjasta', '#800000'), ('Koraljna', '#FF7F50'), ('Kraljevski plava', '#4169E1'), ('Kudelja', '#DAA520'), ('Lan', '#FAF0E6'), ('Lavanda', '#E6E6FA'), ('Limun', '#FFFACD'), ('Lipa', '#00FF00'), ('Ljubičasta', '#EE82EE'), ('Magenta', '#FF00FF'), ('Maslinasta', '#808000'), ('Medljika', '#F0FFF0'), ('Menta', '#F5FFFA'), ('Modro nebo', '#00BFFF'), ('Modrozelena', '#008080'), ('Mornarska', '#000080'), ('Morskozelena', '#2E8B57'), ('Mračno siva', '#696969'), ('Narančasta', '#FFA500'), ('Narančastocrvena', '#FF4500'), ('Narančastoružičasta', '#FA8072'), ('Noćno plava', '#191970'), ('Orhideja', '#DA70D6'), ('Papaja', '#FFEFD5'), ('Peru', '#CD853F'), ('Plava', '#0000FF'), ('Plavi prah', '#B0E0E6'), ('Plavi škriljevac', '#6A5ACD'), ('Plavkasta', '#F0F8FF'), ('Plavo cvijeće', '#6495ED'), ('Plavo nebo', '#87CEEB'), ('Plavoljubičasta', '#8A2BE2'), ('Porculanska', '#FFE4C4'), ('Prljavomaslinasta', '#6B8E23'), ('Proljetnozelena', '#00FF7F'), ('Prozirno bijela', '#F8F8FF'), ('Pšenica', '#F5DEB3'), ('Purpurna', '#800080'), ('Rajčica', '#FF6347'), ('Rumena lavanda', '#FFF0F5'), ('Ružičasta', '#FFC0CB'), ('Ružičastosmeđa', '#BC8F8F'), ('Siva', '#808080'), ('Sivi škriljevac', '#708090'), ('Sivožuta', '#F0E68C'), ('Smeđa', '#A52A2A'), ('Smeđe sedlo', '#8B4513'), ('Smeđi pijesak', '#F4A460'), ('Smeđkasto bijela', '#FFDEAD'), ('Snijeg', '#FFFAFA'), ('Srebrna', '#C0C0C0'), ('Srednja akvamarin', '#66CDAA'), ('Srednja crvenoljubičasta', '#C71585'), ('Srednja morskozelena', '#3CB371'), ('Srednja orhideja', '#BA55D3'), ('Srednja plava', '#0000CD'), ('Srednja proljetnozelena', '#00FA9A'), ('Srednja purpurna', '#9370DB'), ('Srednja tirkizna', '#48D1CC'), ('Srednje plavi škriljevac', '#7B68EE'), ('Svijetla čeličnoplava', '#B0C4DE'), ('Svijetla narančastoružičasta', '#FFA07A'), ('Svijetli cijan', '#E0FFFF'), ('Svijetlo drvo', '#DEB887'), ('Svijetlokoraljna', '#F08080'), ('Svijetlomorskozelena', '#20B2AA'), ('Svijetloplava', '#ADD8E6'), ('Svijetloružičasta', '#FFB6C1'), ('Svijetlosiva', '#D3D3D3'), ('Svijetlosivi škriljevac', '#778899'), ('Svijetlozelena', '#90EE90'), ('Svijetložuta kudelja', '#FAFAD2'), ('Svijetložuta', '#FFFFE0'), ('Šamotna opeka', '#B22222'), ('Školjka', '#FFF5EE'), ('Šljiva', '#DDA0DD'), ('Tamna kudelja', '#B8860B'), ('Tamna magenta', '#8B008B'), ('Tamna narančastoružičasta', '#E9967A'), ('Tamna orhideja', '#9932CC'), ('Tamna sivožuta', '#BDB76B'), ('Tamni cijan', '#008B8B'), ('Tamno zelena', '#006400'), ('Tamnocrvena', '#8B0000'), ('Tamnoljubičasta', '#9400D3'), ('Tamnomaslinasta', '#556B2F'), ('Tamnonarančasta', '#FF8C00'), ('Tamnoplava', '#00008B'), ('Tamnoplavi škriljevac', '#483D8B'), ('Tamnosiva', '#A9A9A9'), ('Tamnosivi škriljevac', '#2F4F4F'), ('Tamnotirkizna', '#00CED1'), ('Tamnozelena', '#8FBC8F'), ('Tirkizna', '#40E0D0'), ('Topla ružičasta', '#FF69B4'), ('Vedro nebo', '#87CEFA'), ('Voda', '#00FFFF'), ('Zelena lipa', '#32CD32'), ('Zelena šuma', '#228B22'), ('Zelena tratina', '#7CFC00'), ('Zelena', '#008000'), ('Zeleni liker', '#7FFF00'), ('Zelenožuta', '#ADFF2F'), ('Zlatna', '#FFD700'), ('Žućkastocrvena zemlja', '#CD5C5C'), ('Žućkastoružičasta', '#FFE4E1'), ('Žućkastosmeđa glina', '#A0522D'), ('Žuta svila', '#FFF8DC'), ('Žuta', '#FFFF00'), ('Žutozelena', '#9ACD32')))
faker.providers.color.hr_HR.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/th_TH/__init__.py----------------------------------------
A:faker.providers.color.th_TH.__init__.all_colors->OrderedDict((('สีดำ', '#000000'), ('สีน้ำเงินเขียว', '#0095B6'), ('สีน้ำเงินม่วง', '#8A2BE2'), ('สีทองแดง', '#CD7F32'), ('สีน้ำตาล', '#964B00'), ('สีกาแฟ', '#6F4E37'), ('สีทอง', '#FFD700'), ('สีเทา', '#808080'), ('สีเขียว', '#00FF00'), ('สีหยก', '#00A86B'), ('สีส้ม', '#FFA500'), ('สีส้มแดง', '#FF4500'), ('สีออร์คิด', '#DA70D6'), ('สีชมพู', '#FFC0CB'), ('สีม่วง', '#800080'), ('สีแดง', '#FF0000'), ('สีเงิน', '#C0C0C0'), ('สีขาว', '#FFFFFF'), ('สีเหลือง', '#FFFF00')))
faker.providers.color.th_TH.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/en_US/__init__.py----------------------------------------
faker.providers.color.en_US.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/es_CL/__init__.py----------------------------------------
faker.providers.color.es_CL.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/uk_UA/__init__.py----------------------------------------
A:faker.providers.color.uk_UA.__init__.all_colors->OrderedDict((('Абрикосовий', '#FBCEB1'), ('Аквамариновий', '#7FFFD4'), ('Алізариновий червоний', '#E32636'), ('Амарантовий', '#E52B50'), ('Амарантово-рожевий', '#F19CBB'), ('Аметистовий', '#9966CC'), ('Андроїдний зелений', '#A4C639'), ('Арсеновий', '#3B444B'), ('Атомний мандаріновий', '#FF9966'), ('Багряний', '#FF2400'), ('Баклажановий', '#990066'), ('Барвінковий', '#CCCCFF'), ('Бежевий', '#F5F5DC'), ('Берлінська лазур', '#003153'), ('Блаватний', '#6495ED'), ('Блакитний', '#AFEEEE'), ('Блакитний Брандейса', '#0070FF'), ('Блакитно-зелений', '#00DDDD'), ('Блакитно-фіолетовий', '#8A2BE2'), ('Блідий рожево-ліловий', '#996666'), ('Блідо-брунатний', '#987654'), ('Блідо-волошковий', '#ABCDEF'), ('Блідо-карміновий', '#AF4035'), ('Блідо-каштановий', '#DDADAF'), ('Блідо-пурпуровий', '#F984E5'), ('Блідо-пісочний', '#DABDAB'), ('Блідо-рожевий', '#FADADD'), ('Болотний', '#ACB78E'), ('Бронзовий', '#CD7F32'), ('Брунатний', '#964B00'), ('Брунато-малиновий', '#800000'), ('Будяковий', '#D8BFD8'), ('Бузковий', '#C8A2C8'), ('Бургундський', '#900020'), ('Бурий', '#755A57'), ('Бурштиновий', '#FFBF00'), ('Білий', '#FFFFFF'), ('Білий навахо', '#FFDEAD'), ('Бірюзовий', '#30D5C8'), ('Бістр', '#3D2B1F'), ('Вода пляжа Бонді', '#0095B6'), ('Вохра', '#CC7722'), ('Відбірний жовтий', '#FFBA00'), ('Візантійський', '#702963'), ('Гарбуз', '#FF7518'), ('Гарячо-рожевий', '#FC0FC0'), ('Геліотроп', '#DF73FF'), ('Глибокий фіолетовий', '#423189'), ('Глицінія', '#C9A0DC'), ('Грушевий', '#D1E231'), ('Гумігут', '#E49B0F'), ('Гірчичний', '#FFDB58'), ('Дерева', '#79443B'), ('Джинсовий', '#1560BD'), ('Діамантово-рожевий', '#FF55A3'), ('Жовтий', '#FFFF00'), ('Жовто-зелений', '#ADFF2F'), ('Жовто-персиковий', '#FADFAD'), ('Захисний синій', '#1E90FF'), ('Зелена весна', '#00FF7F'), ('Зелена мʼята', '#98FF98'), ('Зелена сосна', '#01796F'), ('Зелене море', '#2E8B57'), ('Зелений', '#00FF00'), ('Зелений армійський', '#4B5320'), ('Зелений мох', '#ADDFAD'), ('Зелений папороть', '#4F7942'), ('Зелений чай', '#D0F0C0'), ('Зелено-сірий чай', '#CADABA'), ('Зеленувато-блакитний', '#008080'), ('Золотаво-березовий', '#DAA520'), ('Золотий', '#FFD700'), ('Золотисто-каштановий', '#6D351A'), ('Індиго', '#4B0082'), ('Іржавий', '#B7410E'), ('Кардинал (колір)', '#C41E3A'), ('Карміновий', '#960018'), ('Каштановий', '#CD5C5C'), ('Кобальтовий', '#0047AB'), ('Колір жовтого шкільного автобуса', '#FFD800'), ('Колір засмаги', '#D2B48C'), ('Колір морської піни', '#FFF5EE'), ('Колір морської хвилі', '#00FFFF'), ('Кораловий', '#FF7F50'), ('Королівський синій', '#4169E1'), ('Кремовий', '#FFFDD0'), ('Кукурудзяний', '#FBEC5D'), ('Кіновар', '#FF4D00'), ('Лавандний', '#E6E6FA'), ('Лазуровий', '#007BA7'), ('Лазурово-синій', '#2A52BE'), ('Лайм', '#CCFF00'), ('Латунний', '#B5A642'), ('Лимонний', '#FDE910'), ('Лимонно-кремовий', '#FFFACD'), ('Лляний', '#EEDC82'), ('Лляний', '#FAF0E6'), ('Лососевий', '#FF8C69'), ('Ліловий', '#DB7093'), ('Малахітовий', '#0BDA51'), ('Малиновий', '#DC143C'), ('Мандариновий', '#FFCC00'), ('Мисливський', '#004225'), ('Морквяний', '#ED9121'), ('Мідний', '#B87333'), ('Міжнародний помаранчевий', '#FF4F00'), ('Нефритовий', '#00A86B'), ('Ніжно-блакитний', '#E0FFFF'), ('Ніжно-оливковий', '#6B8E23'), ('Ніжно-рожевий', '#FB607F'), ('Оливковий', '#808000'), ('Опівнічно-синій', '#003366'), ('Орхідея', '#DA70D6'), ('Палена сіена', '#E97451'), ('Палений оранжевий', '#CC5500'), ('Панг', '#C7FCEC'), ('Паросток папаї', '#FFEFD5'), ('Пастельно-зелений', '#77DD77'), ('Пастельно-рожевий', '#FFD1DC'), ('Персиковий', '#FFE5B4'), ('Перський синій', '#6600FF'), ('Помаранчевий', '#FFA500'), ('Помаранчево-персиковий', '#FFCC99'), ('Помаранчево-рожевий', '#FF9966'), ('Пурпурний', '#FF00FF'), ('Пурпуровий', '#660099'), ('Пшеничний', '#F5DEB3'), ('Пісочний колір', '#F4A460'), ('Рожевий', '#FFC0CB'), ('Рожевий Маунтбеттена', '#997A8D'), ('Рожево-лавандний', '#FFF0F5'), ('Рожево-ліловий', '#993366'), ('Салатовий', '#7FFF00'), ('Сангрія', '#92000A'), ('Сапфіровий', '#082567'), ('Світло-синій', '#007DFF'), ('Сепія', '#704214'), ('Сиваво-зелений', '#ACE1AF'), ('Сигнально-помаранчевий', '#FF9900'), ('Синя пил', '#003399'), ('Синя сталь', '#4682B4'), ('Сині яйця малинівки', '#00CCCC'), ('Синій', '#0000FF'), ('Синій (RYB)', '#0247FE'), ('Синій (пігмент)', '#333399'), ('Синій ВПС', '#5D8AA8'), ('Синій Клейна', '#3A75C4'), ('Сливовий', '#660066'), ('Смарагдовий', '#50C878'), ('Спаржевий', '#7BA05B'), ('Срібний', '#C0C0C0'), ('Старе золото', '#CFB53B'), ('Сіра спаржа', '#465945'), ('Сірий', '#808080'), ('Сірий шифер', '#708090'), ('Темний весняно-зелений', '#177245'), ('Темний жовто-брунатний', '#918151'), ('Темний зелений чай', '#BADBAD'), ('Темний пастельно-зелений', '#03C03C'), ('Темний хакі', '#BDB76B'), ('Темний індиго', '#310062'), ('Темно-аспідний сірий', '#2F4F4F'), ('Темно-брунатний', '#654321'), ('Темно-бірюзовий', '#116062'), ('Темно-зелений', '#013220'), ('Темно-зелений хакі', '#78866B'), ('Темно-золотий', '#B8860B'), ('Темно-карміновий', '#560319'), ('Темно-каштановий', '#986960'), ('Темно-кораловий', '#CD5B45'), ('Темно-лазурний', '#08457E'), ('Темно-лососевий', '#E9967A'), ('Темно-мандариновий', '#FFA812'), ('Темно-оливковий', '#556832'), ('Темно-персиковий', '#FFDAB9'), ('Темно-рожевий', '#E75480'), ('Темно-синій', '#000080'), ('Ультрамариновий', '#120A8F'), ('Умбра', '#734A12'), ('Умбра палена', '#8A3324'), ('Фуксія', '#FF00FF'), ('Фіолетовий', '#8B00FF'), ('Фіолетово-баклажановий', '#991199'), ('Фіолетово-червоний', '#C71585'), ('Хакі', '#C3B091'), ('Цинамоновий', '#7B3F00'), ('Циннвальдит', '#EBC2AF'), ('Ціан (колір)', '#00FFFF'), ('Ціано-блакитний', '#F0F8FF'), ('Червоний', '#FF0000'), ('Червоно-буро-помаранчевий', '#CD5700'), ('Червоновато-брунатний', '#CC8899'), ('Чорний', '#000000'), ('Шафрановий', '#F4C430'), ('Шкіра буйвола', '#F0DC82'), ('Шоколадний', '#D2691E'), ('Яскраво-бурштиновий', '#FF7E00'), ('Яскраво-бірюзовий', '#08E8DE'), ('Яскраво-зелений', '#66FF00'), ('Яскраво-зелений', '#40826D'), ('Яскраво-рожевий', '#FF007F'), ('Яскраво-фіолетовий', '#CD00CD'), ('Ясно-брунатний', '#CD853F'), ('Ясно-вишневий', '#DE3163'), ('Ясно-лазуровий', '#007FFF'), ('Ясно-лазуровий (веб)', '#F0FFFF')))
faker.providers.color.uk_UA.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/es_ES/__init__.py----------------------------------------
faker.providers.color.es_ES.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/el_GR/__init__.py----------------------------------------
A:faker.providers.color.el_GR.__init__.all_colors->OrderedDict((('άσιντ πράσινο', '#B0BF1A'), ('άσπρο', '#FFFFFF'), ('άστριοι', '#FDD5B1'), ('αβοκάντο', '#568203'), ('αγκινάρα', '#8F9779'), ('αζούρ', '#8AB9F1'), ('ακαζού', '#4C2F27'), ('ασημένιο', '#C0C0C0'), ('βαθύ κόκκινο', '#850101'), ('βερικοκί', '#FBCEB1'), ('βερμιγιόν', '#E34234'), ('βιολετί', '#7F00FF'), ('βρύο', '#8A9A5B'), ('βυσσινί', '#DC143C'), ('γαλάζιο', '#ADD8E6'), ('γκρι', '#808080'), ('γλαυκό', '#6082B6'), ('εκρού', '#C2B280'), ('ιβουάρ', '#FFFFF0'), ('ινδικό', '#4B0082'), ('κίτρινο', '#9B870C'), ('καμηλό', '#C19A6B'), ('κανέλα', '#D2691E'), ('καστανέρυθρο', '#8B0000'), ('καστανό', '#954535'), ('καφέ', '#A52A2A'), ('καφές', '#6F4E37'), ('κυανό', '#800080'), ('κεχριμπάρι', '#FFBF00'), ('κόκκινο', '#FF0000'), ('λάβα', '#CF1020'), ('λαδί', '#3B3C36'), ('λευκό', '#DBE9F4'), ('μαρόν', '#800000'), ('ματζέντα', '#CC00CC'), ('μαόνι', '#CD4A4C'), ('μαύρο', '#000000'), ('μπέιμπι μπλου', '#89CFF0'), ('μπεζ', '#F5F5DC'), ('μπλε', '#0000FF'), ('μπλε μαρέν', '#1974D2'), ('μπορντό', '#7F1734'), ('μπουργκουντί', '#900020'), ('μυρτιά', '#317873'), ('μωβ', '#B19CD9'), ('ορείχαλκος', '#B5A642'), ('πέρλα', '#EAE0C8'), ('πεύκο', '#01796F'), ('πλατίνα', '#E5E4E2'), ('πορτοκαλί', '#FF7F00'), ('πορτοκαλοκίτρινο', '#DAA520'), ('πράσινο', '#000FF0'), ('πράσινο chartreuse', '#7FFF00'), ('πράσινο αγκινάρας', '#4B6F44'), ('πράσινο ανοιχτό', '#90EE90'), ('πράσινο ζούγκλας', '#29AB87'), ('πράσινο λαουρέλ', '#A9BA9D'), ('πράσινο σκούρο', '#013220'), ('πράσινο της άνοιξης', '#00FF7F'), ('πράσινο της μέντας', '#98FB98'), ('πράσινο της φτέρης', '#4F7942'), ('πράσινο του δάσους', '#228B22'), ('πράσινο τσάι', '#D0F0C0'), ('πράσινο χούκερ', '#49796B'), ('ραφ', '#5D8AA8'), ('ροζ', '#FFC0CB'), ('ροζέ', '#FF007F'), ('σέπια', '#704214'), ('σαμπανιζέ', '#F7E7CE'), ('σκάρλετ', '#FF2400'), ('σκούρο βρύο', '#4A5D23'), ('σπαραγγί', '#87A96B'), ('ταν', '#D2B48C'), ('φλαμίνγκο', '#FC8EAC'), ('φούξια', '#F400A1'), ('φτέρη', '#71BC78'), ('χλωροφύλλη', '#4AFF00'), ('χρυσαφένιο', '#FFD700'), ('χρυσό', '#808000'), ('ώχρα', '#E97451')))
faker.providers.color.el_GR.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/fa_IR/__init__.py----------------------------------------
A:faker.providers.color.fa_IR.__init__.all_colors->OrderedDict((('نیلی محو', '#F0F8FF'), ('بژ تیره', '#FAEBD7'), ('فیروزه\u200cای', '#00FFFF'), ('یشمی', '#7FFFD4'), ('لاجوردی', '#F0FFFF'), ('بژ', '#F5F5DC'), ('کرم', '#FFE4C4'), ('مشکی', '#000000'), ('کاهگلی', '#FFEBCD'), ('آبی', '#0000FF'), ('آبی-بنفش سیر', '#8A2BE2'), ('قهوه\u200cای', '#A52A2A'), ('خاکی', '#DEB887'), ('آبی لجنی', '#5F9EA0'), ('سبز روشن', '#7FFF00'), ('شوکولاتی', '#D2691E'), ('مرجانی', '#FF7F50'), ('آبی کدر', '#6495ED'), ('کاهی', '#FFF8DC'), ('زرشکی', '#DC143C'), ('فیروزه\u200cای', '#00FFFF'), ('سرمه\u200cای', '#00008B'), ('سبز کبریتی تیره', '#008B8B'), ('ماشی سیر', '#B8860B'), ('خاکستری سیر', '#A9A9A9'), ('سبز آووکادو', '#006400'), ('ماشی', '#BDB76B'), ('مخملی', '#8B008B'), ('زیتونی سیر', '#556B2F'), ('نارنجی سیر', '#FF8C00'), ('ارکیده بنفش', '#9932CC'), ('عنابی تند', '#8B0000'), ('قهوه\u200cایِ حنایی', '#E9967A'), ('سبز دریایی تیره', '#8FBC8F'), ('آبی دودی', '#483D8B'), ('لجنی تیره', '#2F4F4F'), ('فیروزه\u200cای سیر', '#00CED1'), ('بنفش باز', '#9400D3'), ('شفقی', '#FF1493'), ('آبی کمرنگ', '#00BFFF'), ('دودی', '#696969'), ('نیلی', '#1E90FF'), ('شرابی', '#B22222'), ('پوست پیازی', '#FFFAF0'), ('شویدی', '#228B22'), ('سرخابی', '#FF00FF'), ('خاکستری مات', '#DCDCDC'), ('سفید بنفشه', '#F8F8FF'), ('کهربایی باز', '#FFD700'), ('خردلی', '#DAA520'), ('خاکستری', '#808080'), ('سبز', '#008000'), ('مغزپسته\u200cای کمرنگ', '#ADFF2F'), ('یشمی محو', '#F0FFF0'), ('سرخابی', '#FF69B4'), ('جگری', '#CD5C5C'), ('نیلی سیر', '#4B0082'), ('استخوانی', '#FFFFF0'), ('خاکی روشن', '#F0E68C'), ('نیلی کمرنگ', '#E6E6FA'), ('صورتی مات', '#FFF0F5'), ('مغزپسته\u200cای پررنگ', '#7CFC00'), ('شیرشکری', '#FFFACD'), ('آبی کبریتی', '#ADD8E6'), ('بژ تیره', '#F08080'), ('آبی آسمانی', '#E0FFFF'), ('لیمویی روشن', '#FAFAD2'), ('خاکستری روشن', '#D3D3D3'), ('سبز روشن', '#90EE90'), ('صورتی روشن', '#FFB6C1'), ('کرم نارنجی', '#FFA07A'), ('سبز کبریتی روشن', '#20B2AA'), ('آبی آسمانی روشن', '#87CEFA'), ('سربی', '#778899'), ('بنفش مایل به آبی', '#B0C4DE'), ('شیری', '#FFFFE0'), ('مغزپسته\u200cای روشن', '#00FF00'), ('سبز چمنی', '#32CD32'), ('كتانی', '#FAF0E6'), ('سرخ آبی', '#FF00FF'), ('آلبالویی', '#800000'), ('سبز دریایی', '#66CDAA'), ('آبی سیر', '#0000CD'), ('ارکیده سیر', '#BA55D3'), ('سرخ آبی سیر', '#9370DB'), ('خزه\u200cای', '#3CB371'), ('آبی متالیک روشن', '#7B68EE'), ('یشمی سیر', '#00FA9A'), ('فیروزه\u200cای تیره', '#48D1CC'), ('ارغوانی', '#C71585'), ('آبی نفتی', '#191970'), ('سفید نعنائی', '#F5FFFA'), ('بژ', '#FFE4E1'), ('هلویی', '#FFE4B5'), ('کرم سیر', '#FFDEAD'), ('لاجوردی', '#000080'), ('بژ روشن', '#FDF5E6'), ('زیتونی', '#808000'), ('سبز ارتشی', '#6B8E23'), ('نارنجی', '#FFA500'), ('قرمز-نارنجی', '#FF4500'), ('ارکیده', '#DA70D6'), ('نخودی', '#EEE8AA'), ('سبز کمرنگ', '#98FB98'), ('فیروزه\u200cای کدر', '#AFEEEE'), ('شرابی روشن', '#DB7093'), ('هلویی روشن', '#FFEFD5'), ('هلویی پررنگ', '#FFDAB9'), ('بادامی سیر', '#CD853F'), ('صورتی', '#FFC0CB'), ('بنفش کدر', '#DDA0DD'), ('آبی کبریتی روشن', '#B0E0E6'), ('بنفش', '#800080'), ('قرمز', '#FF0000'), ('بادمجانی', '#BC8F8F'), ('فیروزه\u200cای فسفری', '#4169E1'), ('کاکائویی', '#8B4513'), ('سالمحناییِ روشنوني', '#FA8072'), ('هلویی سیر', '#F4A460'), ('خزه\u200cای پررنگ', '#2E8B57'), ('صدفی', '#FFF5EE'), ('قهوه\u200cای متوسط', '#A0522D'), ('طوسی', '#C0C0C0'), ('آبی آسمانی', '#87CEEB'), ('آبی فولادی', '#6A5ACD'), ('سربی تیره', '#708090'), ('صورتی محو', '#FFFAFA'), ('یشمی کمرنگ', '#00FF7F'), ('نیلی متالیک', '#4682B4'), ('برنزه کدر', '#D2B48C'), ('سبز دودی', '#008080'), ('بادمجانی روشن', '#D8BFD8'), ('قرمز گوجه\u200cای', '#FF6347'), ('سبز دریایی روشن', '#40E0D0'), ('بنفش روشن', '#EE82EE'), ('گندمی', '#F5DEB3'), ('سفید', '#FFFFFF'), ('خاکستری محو', '#F5F5F5'), ('زرد', '#FFFF00'), ('سبز لجنی', '#9ACD32')))
faker.providers.color.fa_IR.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/vi_VN/__init__.py----------------------------------------
A:faker.providers.color.vi_VN.__init__.all_colors->OrderedDict((('Trắng Antique', '#FAEBD7'), ('Aquamarine', '#7FFFD4'), ('Azure', '#F0FFFF'), ('Beige', '#F5F5DC'), ('Đen', '#000000'), ('Xanh dương', '#0000FF'), ('Xanh tím', '#8A2BE2'), ('Nâu', '#A52A2A'), ('Sô cô la', '#D2691E'), ('San hô', '#FF7F50'), ('Xanh hải quân', '#6495ED'), ('Hồng đào', '#DC143C'), ('Xanh đậm', '#00008B'), ('Xanh biển đậm', '#008B8B'), ('Xám đậm', '#A9A9A9'), ('Xanh lá đậm', '#006400'), ('Rêu đậm', '#BDB76B'), ('Cam đậm', '#FF8C00'), ('Đỏ đậm', '#8B0000'), ('Xanh ngọc đậm', '#00CED1'), ('Tím đậm', '#9400D3'), ('Hồng đậm', '#FF1493'), ('Xám xỉn', '#696969'), ('Hồng fuchsia', '#FF00FF'), ('Vàng', '#FFD700'), ('Xám', '#808080'), ('Xanh lá cây', '#008000'), ('Xanh lá cây nhạt', '#ADFF2F'), ('Hồng sáng', '#FF69B4'), ('Indigo', '#4B0082'), ('Ngà voi', '#FFFFF0'), ('Rêu', '#F0E68C'), ('Hồng lavender', '#FFF0F5'), ('Xanh dương nhạt', '#ADD8E6'), ('Xanh biển nhạt', '#E0FFFF'), ('Xám sáng', '#D3D3D3'), ('Xanh lá cây sáng', '#90EE90'), ('Hồng sáng', '#FFB6C1'), ('Xanh biển sáng', '#87CEFA'), ('Vàng sáng', '#FFFFE0'), ('Hạt Dẻ', '#800000'), ('Cam', '#FFA500'), ('Cam đỏ', '#FF4500'), ('Xanh lá cây nhạt', '#98FB98'), ('Xanh biển nhạt', '#AFEEEE'), ('Hồng', '#FFC0CB'), ('Tím', '#DDA0DD'), ('Tím đậm', '#800080'), ('Đỏ', '#FF0000'), ('Xanh biển xanh', '#2E8B57'), ('Bạc', '#C0C0C0'), ('Xanh lục bảo', '#40E0D0'), ('Tím violet', '#EE82EE'), ('Trắng', '#FFFFFF'), ('Vàng', '#FFFF00'), ('Xanh lá cây vàng', '#9ACD32')))
faker.providers.color.vi_VN.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/fr_FR/__init__.py----------------------------------------
A:faker.providers.color.fr_FR.__init__.all_colors->OrderedDict((('Noir', '#000000'), ('Gris mat', '#696969'), ('Gris', '#808080'), ('Gris foncé (Acier)', '#A9A9A9'), ('Gris argent', '#C0C0C0'), ('Gris clair', '#D3D3D3'), ('Gris gainsboro (Etain)', '#DCDCDC'), ('Blanc fumée', '#F5F5F5'), ('Blanc spectral', '#F8F8FF'), ('Blanc', '#FFFFFF'), ('Ivoire', '#FFFFF0'), ('Blanc floral', '#FFFAF0'), ('Blanc coquillage', '#FFF5EE'), ('Blanc lavande', '#FFF0F5'), ('Blanc dentelle', '#FDF5E6'), ('Blanc Lin', '#FAF0E6'), ('Rose brumeux', '#FFE4E1'), ('Rose', '#FFC0CB'), ('Rose clair', '#FFB6C1'), ('Rose Passion', '#FF69B4'), ('Rose profond', '#FF1493'), ('Violet pâle', '#DB7093'), ('Fushia (Magenta)', '#FF00FF'), ('Violet moyen', '#C71585'), ('Violet chardon', '#D8BFD8'), ('Prune', '#DDA0DD'), ('Violet', '#EE82EE'), ('Violet orchidée', '#DA70D6'), ('Violet orchidée moyen', '#BA55D3'), ('Violet orchidée foncé', '#9932CC'), ('Violet foncé', '#9400D3'), ('Bleu violet', '#8A2BE2'), ('Indigo', '#4B0082'), ('Bleu ardoise moyen', '#7B68EE'), ('Bleu ardoise', '#6A5ACD'), ('Bleu ardoise foncé', '#483D8B'), ('Pourpre moyen', '#9370DB'), ('Magenta foncé', '#8B008B'), ('Pourpre', '#800080'), ('Brun rosé', '#BC8F8F'), ('Corail clair', '#F08080'), ('Corail', '#FF7F50'), ('Tomate', '#FF6347'), ('Orangé', '#FF4500'), ('Rouge', '#FF0000'), ('Rouge cramoisi', '#DC143C'), ('Saumon clair', '#FFA07A'), ('Saumon Foncé', '#E9967A'), ('Saumon', '#FA8072'), ('Rouge Indien', '#CD5C5C'), ('Rouge brique', '#B22222'), ('Brun', '#A52A2A'), ('Rouge foncé', '#8B0000'), ('Bordeaux', '#800000'), ('Beige', '#F5F5DC'), ('Beige antique', '#FAEBD7'), ('Beige papaye', '#FFEFD5'), ('Amande', '#FFEBCD'), ('Bisque', '#FFE4C4'), ('Beige pêche', '#FFDAB9'), ('Beige mocassin', '#FFE4B5'), ('Jaune blanc navaro', '#FFDEAD'), ('Jaune blé', '#F5DEB3'), ('Brun bois rustique', '#DEB887'), ('Brun roux', '#D2B48C'), ('Brun sable', '#F4A460'), ('Orange', '#FFA500'), ('Orange foncé', '#FF8C00'), ('Chocolat', '#D2691E'), ('Brun pérou', '#CD853F'), ('Terre de Sienne', '#A0522D'), ('Brun cuir', '#8B4513'), ('Jaune clair', '#FFFFE0'), ('Jaune maïs doux', '#FFF8DC'), ('Jaune doré clair', '#FAFAD2'), ('Beige citron soie', '#FFFACD'), ('Jaune doré pâle', '#EEE8AA'), ('Brun kaki', '#F0E68C'), ('Jaune', '#FFFF00'), ('Or', '#FFD700'), ('Jaune doré', '#DAA520'), ('Jaune doré foncé', '#B8860B'), ('Brun kaki foncé', '#BDB76B'), ('Jaune vert', '#9ACD32'), ('Kaki', '#6B8E23'), ('Olive', '#808000'), ('Vert olive foncé', '#556B2F'), ('Vert jaune', '#ADFF2F'), ('Chartreuse', '#7FFF00'), ('Vert prairie', '#7CFC00'), ('Citron vert', '#00FF00'), ('Citron vert foncé', '#32CD32'), ('Blanc menthe', '#F5FFFA'), ('Miellat', '#F0FFF0'), ('Vert pâle', '#98FB98'), ('Vert clair', '#90EE90'), ('Vert printemps', '#00FF7F'), ('Vert printemps moyen', '#00FA9A'), ('Vert forêt', '#228B22'), ('Vert', '#008000'), ('Vert foncé', '#006400'), ('Vert océan foncé', '#8FBC8F'), ('Vert océan moyen', '#3CB371'), ('Vert océan', '#2E8B57'), ('Gris ardoise clair', '#778899'), ('Gris ardoise', '#708090'), ('Gris ardoise foncé', '#2F4F4F'), ('Bleu alice', '#F0F8FF'), ('Bleu azur', '#F0FFFF'), ('Cyan clair', '#E0FFFF'), ('Azurin', '#AFEEEE'), ('Aigue-marine', '#7FFFD4'), ('Aigue-marine moyen', '#66CDAA'), ('Cyan', '#00FFFF'), ('Turquoise', '#40E0D0'), ('Turquoise moyen', '#48D1CC'), ('Turquoise foncé', '#00CED1'), ('Vert marin clair', '#20B2AA'), ('Cyan foncé', '#008B8B'), ('Vert sarcelle', '#008080'), ('Bleu pétrole', '#5F9EA0'), ('Bleu poudre', '#B0E0E6'), ('Bleu clair', '#ADD8E6'), ('Bleu azur clair', '#87CEFA'), ('Bleu azur', '#87CEEB'), ('Bleu azur profond', '#00BFFF'), ('Bleu toile', '#1E90FF'), ('Bleu lavande', '#E6E6FA'), ('Bleu acier clair', '#B0C4DE'), ('Bleuet', '#6495ED'), ('Bleu acier', '#4682B4'), ('Bleu royal', '#4169E1'), ('Bleu', '#0000FF'), ('Bleu moyen', '#0000CD'), ('Bleu foncé', '#00008B'), ('Bleu marin', '#000080'), ('Bleu de minuit', '#191970')))
faker.providers.color.fr_FR.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/ar_PS/__init__.py----------------------------------------
A:faker.providers.color.ar_PS.__init__.all_colors->OrderedDict((('أزرق أليس', '#F0F8FF'), ('أبيض عتيق', '#FAEBD7'), ('مائي', '#00FFFF'), ('زبرجدي', '#7FFFD4'), ('لازوردي', '#F0FFFF'), ('صوفي', '#F5F5DC'), ('حسائي', '#FFE4C4'), ('أسود', '#000000'), ('لوزي', '#FFEBCD'), ('أزرق', '#0000FF'), ('بنفسجي مزرق', '#8A2BE2'), ('بني', '#A52A2A'), ('خشبية', '#DEB887'), ('أزرق كاديتي', '#5F9EA0'), ('كرتوزي', '#7FFF00'), ('شوكولاتيّ', '#D2691E'), ('مرجاني', '#FF7F50'), ('قنطريوني', '#6495ED'), ('حرير الذرة', '#FFF8DC'), ('قرمزي', '#DC143C'), ('سيان', '#00FFFF'), ('أزرق داكن', '#00008B'), ('سيان داكن', '#008B8B'), ('عصا الدهب الغامق', '#B8860B'), ('رمادي داكن', '#A9A9A9'), ('أخضر داكن', '#006400'), ('خاكي داكن', '#BDB76B'), ('ماجنتا داكن', '#8B008B'), ('أخضر زيتوني داكن', '#556B2F'), ('برتقالي داكن', '#FF8C00'), ('أوركيدي داكن', '#9932CC'), ('أحمر داكن', '#8B0000'), ('سلموني داكن', '#E9967A'), ('أخضر بحري داكن', '#8FBC8F'), ('أزرق أردوازي داكن', '#483D8B'), ('رمادي لازوردي داكن', '#2F4F4F'), ('تركوازي داكن', '#00CED1'), ('بنفسج داكن', '#9400D3'), ('زهري غامق', '#FF1493'), ('أزرق سماوي غامق', '#00BFFF'), ('رمادي خافت', '#696969'), ('أزرق فريق دودجر', '#1E90FF'), ('الطوب شمت', '#B22222'), ('أبيض وردي', '#FFFAF0'), ('أخضر الغابت', '#228B22'), ('فوشي', '#FF00FF'), ('رمادي باهت', '#DCDCDC'), ('أبيض شبحي', '#F8F8FF'), ('ذهبي', '#FFD700'), ('ذهبي', '#DAA520'), ('رمادي', '#808080'), ('أخضر', '#008000'), ('أصفر مخضر', '#ADFF2F'), ('عسلي', '#F0FFF0'), ('وردي فاقع', '#FF69B4'), ('قسطلي', '#CD5C5C'), ('نيلي', '#4B0082'), ('سكري', '#FFFFF0'), ('خاكي', '#F0E68C'), ('لاڤندر', '#E6E6FA'), ('أحمر اللافندر', '#FFF0F5'), ('أخضر عشبي', '#7CFC00'), ('ليمون شيفوني', '#FFFACD'), ('أزرق فاتح', '#ADD8E6'), ('مرجاني فاتح', '#F08080'), ('أزرق طفولي', '#E0FFFF'), ('أصفر ذهبي فاتح ', '#FAFAD2'), ('رمادي فاتح', '#D3D3D3'), ('أخضر فاتح', '#90EE90'), ('وردي فاتح', '#FFB6C1'), ('سلموني فاتح', '#FFA07A'), ('أخضر بحري فاتح', '#20B2AA'), ('سماوي فاتح', '#87CEFA'), ('أزرق أردوازي فاتح', '#778899'), ('أزرق معدني فاتح', '#B0C4DE'), ('أصفر فاتح', '#FFFFE0'), ('ليمي', '#00FF00'), ('أخضر ليموني', '#32CD32'), ('كتاني', '#FAF0E6'), ('فوشيا', '#FF00FF'), ('كستنائي', '#800000'), ('زبرجدي متوسط', '#66CDAA'), ('أزرق متوسط', '#0000CD'), ('أوركيدي متوسط', '#BA55D3'), ('فوشي متوسط', '#9370DB'), ('أخضر بحري متوسط', '#3CB371'), ('أزرق أردوازي متوسط', '#7B68EE'), ('أخضر ربيعي متوسط', '#00FA9A'), ('ترموازي متوسط', '#48D1CC'), ('أحمر بنفسجي', '#C71585'), ('الأزرق متوسط', '#191970'), ('نعناعي كريمي', '#F5FFFA'), ('الوردي الضبابي', '#FFE4E1'), ('موكاسيني', '#FFE4B5'), ('أبيض نافاجو', '#FFDEAD'), ('كحلي', '#000080'), ('رباطي قديم', '#FDF5E6'), ('زيتوني', '#808000'), ('زيتوني رمادي', '#6B8E23'), ('برتقالي', '#FFA500'), ('أحمر برتقالي', '#FF4500'), ('أوركيدي', '#DA70D6'), ('ذهبي باهت', '#EEE8AA'), ('أخضر باهت', '#98FB98'), ('تركوازي باهت', '#AFEEEE'), ('أحمر بنفسجي باهت', '#DB7093'), ('بابايا', '#FFEFD5'), ('حنطي', '#FFDAB9'), ('بيرو', '#CD853F'), ('زهري', '#FFC0CB'), ('برقوقي', '#DDA0DD'), ('أزرق مسحوقي', '#B0E0E6'), ('أرجواني', '#800080'), ('أحمر', '#FF0000'), ('بني وردي', '#BC8F8F'), ('أزرق ملكي', '#4169E1'), ('بني السرج', '#8B4513'), ('سالموني', '#FA8072'), ('بني رملي', '#F4A460'), ('أخضر بحري', '#2E8B57'), ('صدفي', '#FFF5EE'), ('سيينا', '#A0522D'), ('فضي', '#C0C0C0'), ('أزرق سماي', '#87CEEB'), ('أزرق أردوازي', '#6A5ACD'), ('رمادي معدني', '#708090'), ('ثلجي', '#FFFAFA'), ('أخضر ربيعي', '#00FF7F'), ('أزرق معدني', '#4682B4'), ('نطي', '#D2B48C'), ('حذفي', '#008080'), ('أرجواني', '#D8BFD8'), ('طماطمي', '#FF6347'), ('تركواز', '#40E0D0'), ('بنفسجي', '#EE82EE'), ('قمحي', '#F5DEB3'), ('أبيض', '#FFFFFF'), ('دخاني قمحي', '#F5F5F5'), ('أصفر', '#FFFF00'), ('أصفر مخضر', '#9ACD32')))
faker.providers.color.ar_PS.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/bn_BD/__init__.py----------------------------------------
A:faker.providers.color.bn_BD.__init__.all_colors->OrderedDict((('এলিস নীল', '#F0F8FF'), ('এন্টিক সাদা', '#FAEBD7'), ('জল রং', '#00FFFF'), ('হালকা নীল সবুজ', '#7FFFD4'), ('উজ্জ্বল নীল', '#F0FFFF'), ('ফ্যাকাশে বেলে হলুদ বাদামী', '#F5F5DC'), ('বিস্কুট রং', '#FFE4C4'), ('কালো', '#000000'), ('বালু রং', '#FFEBCD'), ('নীল', '#0000FF'), ('নীলাভ রক্তবর্ণ', '#8A2BE2'), ('বাদামী', '#A52A2A'), ('কাঠ রং', '#DEB887'), ('সামরিক নীল', '#5F9EA0'), ('উজ্জ্বল হলুদাভ সবুজ', '#7FFF00'), ('চকলেট রং', '#D2691E'), ('প্রবাল রং', '#FF7F50'), ('ঝুমকা ফুলের নীল', '#6495ED'), ('সিল্ক রং', '#FFF8DC'), ('অগ্নি রং', '#DC143C'), ('সায়ান', '#00FFFF'), ('কালচে নীল', '#00008B'), ('কালচে সায়ান', '#008B8B'), ('কালচে ধাতব সোনালি', '#B8860B'), ('কালচে ধূসর', '#A9A9A9'), ('কালচে সবুজ', '#006400'), ('কালচে খাকী', '#BDB76B'), ('কালচে হালকা বেগুনী লাল', '#8B008B'), ('কালচে জলপাই সবুজ', '#556B2F'), ('কালচে কমলা', '#FF8C00'), ('কালচে অর্কিড রং', '#9932CC'), ('কালচে লাল', '#8B0000'), ('কালচে স্যামন রং', '#E9967A'), ('কালচে সামুদ্রিক সবুজ', '#8FBC8F'), ('কালচে পাথুরে নীল', '#483D8B'), ('কালচে পাথুরে ধূসর', '#2F4F4F'), ('কালচে ফিরোজা', '#00CED1'), ('কালচে বেগুনী', '#9400D3'), ('গাঢ় গোলাপি', '#FF1493'), ('গাঢ় আকাশী নীল', '#00BFFF'), ('আবছা ধূসর', '#696969'), ('ডজার নীল', '#1E90FF'), ('পোড়া ইট রং', '#B22222'), ('ফুলেল সাদা', '#FFFAF0'), ('বন্য সবুজ', '#228B22'), ('উজ্জ্বল গোলাপি বেগুনী', '#FF00FF'), ('মেটে রং', '#DCDCDC'), ('টাইটান সাদা', '#F8F8FF'), ('সোনালি', '#FFD700'), ('ধাতব সোনালি', '#DAA520'), ('ধূসর', '#808080'), ('সবুজ', '#008000'), ('সবুজাভ হলুদ', '#ADFF2F'), ('মধু রং', '#F0FFF0'), ('উষ্ণ গোলাপি', '#FF69B4'), ('ভারতীয় লাল', '#CD5C5C'), ('বেগুনী নীল', '#4B0082'), ('আইভরি', '#FFFFF0'), ('খাকী', '#F0E68C'), ('ল্যাভেণ্ডার রং', '#E6E6FA'), ('ল্যাভেন্ডার লাল', '#FFF0F5'), ('তৃণ সবুজ', '#7CFC00'), ('হালকা সিল্ক রং', '#FFFACD'), ('হালকা নীল', '#ADD8E6'), ('হালকা প্রবাল রং', '#F08080'), ('হালকা সায়ান', '#E0FFFF'), ('হালকা ধাতব সোনালি হলুদ', '#FAFAD2'), ('হালকা ধূসর', '#D3D3D3'), ('হালকা সবুজ', '#90EE90'), ('হালকা গোলাপি', '#FFB6C1'), ('হালকা স্যামন রং', '#FFA07A'), ('হালকা সামুদ্রিক সবুজ', '#20B2AA'), ('হালকা আকাশী নীল', '#87CEFA'), ('হালকা পাথুরে ধূসর', '#778899'), ('হালকা ধাতব নীল', '#B0C4DE'), ('হালকা হলুদ', '#FFFFE0'), ('লাইম রং', '#00FF00'), ('লাইম সবুজ', '#32CD32'), ('পাট রং', '#FAF0E6'), ('হালকা বেগুনী লাল', '#FF00FF'), ('মেরুন', '#800000'), ('মাঝারী নীল সবুজ', '#66CDAA'), ('মাঝারী নীল', '#0000CD'), ('মাঝারী অর্কিড রং', '#BA55D3'), ('মাঝারী বেগুনী', '#9370DB'), ('মাঝারী সামুদ্রিক সবুজ', '#3CB371'), ('মাঝারী পাথুরে নীল', '#7B68EE'), ('মাঝারী বাসন্তী সবুজ', '#00FA9A'), ('মাঝারী ফিরোজা', '#48D1CC'), ('মাঝারী বেগুনী লাল', '#C71585'), ('মিডনাইট নীল', '#191970'), ('হালকা পীত পুদিনা রং', '#F5FFFA'), ('ধোঁয়াটে গোলাপ রং', '#FFE4E1'), ('মোকাসিন', '#FFE4B5'), ('নাভাজো সাদা', '#FFDEAD'), ('নেভি ব্লু', '#000080'), ('ওল্ড লেইস রং', '#FDF5E6'), ('জলপাই রং', '#808000'), ('ম্যাটমাটে জলপাই রং', '#6B8E23'), ('কমলা', '#FFA500'), ('কমলা লাল', '#FF4500'), ('অর্কিড রং', '#DA70D6'), ('ফ্যাকাশে ধাতব সোনালি', '#EEE8AA'), ('ফ্যাকাশে সবুজ', '#98FB98'), ('ফ্যাকাশে ফিরোজা', '#AFEEEE'), ('ফ্যাকাশে বেগুনী লাল', '#DB7093'), ('পাপায়াহুপ', '#FFEFD5'), ('পীচ রং', '#FFDAB9'), ('পেরু রং', '#CD853F'), ('গোলাপি', '#FFC0CB'), ('জাম রং', '#DDA0DD'), ('গুঁড়া নীল', '#B0E0E6'), ('বেগুনী', '#800080'), ('লাল', '#FF0000'), ('গোলাপী লাল', '#BC8F8F'), ('রয়্যাল ব্লু', '#4169E1'), ('স্যাডল ব্রাউন', '#8B4513'), ('স্যামন রং', '#FA8072'), ('বেলে বাদামী', '#F4A460'), ('সামুদ্রিক সবুজ', '#2E8B57'), ('ঝিনুক রং', '#FFF5EE'), ('মেটে রং', '#A0522D'), ('রূপালী', '#C0C0C0'), ('আকাশী নীল', '#87CEEB'), ('পাথুরে নীল', '#6A5ACD'), ('পাথুরে ধূসর', '#708090'), ('তুষার শুভ্র রং', '#FFFAFA'), ('বাসন্তী সবুজ', '#00FF7F'), ('ধাতব নীল', '#4682B4'), ('তামাটে রং', '#D2B48C'), ('পেষ্ট রং', '#008080'), ('থিসল রং', '#D8BFD8'), ('টমেটো রং', '#FF6347'), ('ফিরোজা', '#40E0D0'), ('রক্তবেগুনী', '#EE82EE'), ('গম রং', '#F5DEB3'), ('সাদা', '#FFFFFF'), ('ধোঁয়াটে সাদা', '#F5F5F5'), ('হলুদ', '#FFFF00'), ('হলুদাভ সবুজ', '#9ACD32')))
faker.providers.color.bn_BD.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/color/he_IL/__init__.py----------------------------------------
A:faker.providers.color.he_IL.__init__.all_colors->OrderedDict((('אדום', '#FF0000'), ('אוכרה', '#DDAA33'), ('אינדיגו', '#4B0082'), ('אפור', '#7F7F7F'), ('ארגמן', '#7F003F'), ('ורוד', '#FF007F'), ('זהב', '#FFDF00'), ('חאקי', '#C3B091'), ('חום', '#7F3F00'), ('טורקיז', '#40E0D0'), ('ירוק', '#00FF00'), ('כחול', '#0000FF'), ('כסף', '#C0C0C0'), ('כתום', '#FF7F00'), ('לבן', '#FFFFFF'), ("מג'נטה", '#FF00FF'), ('סגול', '#7F00FF'), ('צהוב', '#FFFF00'), ('ציאן', '#00FFFF'), ('קרדינל', '#C41E3A'), ('שחור', '#000000'), ('שני', '#7F0000'), ('תכלת', '#007FFF')))
faker.providers.color.he_IL.__init__.Provider(ColorProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/__init__.py----------------------------------------
faker.providers.phone_number.__init__.Provider(BaseProvider)
faker.providers.phone_number.__init__.Provider.country_calling_code(self)->str
faker.providers.phone_number.__init__.Provider.msisdn(self)->str
faker.providers.phone_number.__init__.Provider.phone_number(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/it_IT/__init__.py----------------------------------------
faker.providers.phone_number.it_IT.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.it_IT.__init__.Provider.area_code(self)->str
faker.providers.phone_number.it_IT.__init__.Provider.phone_number(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/ru_RU/__init__.py----------------------------------------
faker.providers.phone_number.ru_RU.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/en_AU/__init__.py----------------------------------------
faker.providers.phone_number.en_AU.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.en_AU.__init__.Provider.area_code(self)->str
faker.providers.phone_number.en_AU.__init__.Provider.phone_number(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/sk_SK/__init__.py----------------------------------------
faker.providers.phone_number.sk_SK.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/zh_TW/__init__.py----------------------------------------
faker.providers.phone_number.zh_TW.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/pt_PT/__init__.py----------------------------------------
faker.providers.phone_number.pt_PT.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/ro_RO/__init__.py----------------------------------------
faker.providers.phone_number.ro_RO.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/az_AZ/__init__.py----------------------------------------
faker.providers.phone_number.az_AZ.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.az_AZ.__init__.Provider.area_code(self)->str
faker.providers.phone_number.az_AZ.__init__.Provider.cellphone_number(self)->str
faker.providers.phone_number.az_AZ.__init__.Provider.landline_number(self)->str
faker.providers.phone_number.az_AZ.__init__.Provider.phone_number(self)->str
faker.providers.phone_number.az_AZ.__init__.Provider.provider_code(self)->str
faker.providers.phone_number.az_AZ.__init__.Provider.start_digit(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/tr_TR/__init__.py----------------------------------------
faker.providers.phone_number.tr_TR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/hy_AM/__init__.py----------------------------------------
faker.providers.phone_number.hy_AM.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/en_IN/__init__.py----------------------------------------
faker.providers.phone_number.en_IN.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/fr_CH/__init__.py----------------------------------------
faker.providers.phone_number.fr_CH.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/sl_SI/__init__.py----------------------------------------
faker.providers.phone_number.sl_SI.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/id_ID/__init__.py----------------------------------------
faker.providers.phone_number.id_ID.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/cs_CZ/__init__.py----------------------------------------
faker.providers.phone_number.cs_CZ.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/pl_PL/__init__.py----------------------------------------
faker.providers.phone_number.pl_PL.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/da_DK/__init__.py----------------------------------------
faker.providers.phone_number.da_DK.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/lv_LV/__init__.py----------------------------------------
faker.providers.phone_number.lv_LV.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/en_NZ/__init__.py----------------------------------------
faker.providers.phone_number.en_NZ.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.en_NZ.__init__.Provider.area_code(self)->str
faker.providers.phone_number.en_NZ.__init__.Provider.phone_number(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/ne_NP/__init__.py----------------------------------------
faker.providers.phone_number.ne_NP.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/zh_CN/__init__.py----------------------------------------
faker.providers.phone_number.zh_CN.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.zh_CN.__init__.Provider.phonenumber_prefix(self)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/es_MX/__init__.py----------------------------------------
faker.providers.phone_number.es_MX.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/pt_BR/__init__.py----------------------------------------
faker.providers.phone_number.pt_BR.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.pt_BR.__init__.Provider.cellphone_number(self)->str
faker.providers.phone_number.pt_BR.__init__.Provider.service_phone_number(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/es_CO/__init__.py----------------------------------------
faker.providers.phone_number.es_CO.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/nl_NL/__init__.py----------------------------------------
faker.providers.phone_number.nl_NL.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/tw_GH/__init__.py----------------------------------------
faker.providers.phone_number.tw_GH.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/lt_LT/__init__.py----------------------------------------
faker.providers.phone_number.lt_LT.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/tl_PH/__init__.py----------------------------------------
faker.providers.phone_number.tl_PH.__init__.Provider(EnPhPhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/bg_BG/__init__.py----------------------------------------
faker.providers.phone_number.bg_BG.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/no_NO/__init__.py----------------------------------------
faker.providers.phone_number.no_NO.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/hi_IN/__init__.py----------------------------------------
faker.providers.phone_number.hi_IN.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/bs_BA/__init__.py----------------------------------------
faker.providers.phone_number.bs_BA.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/ar_JO/__init__.py----------------------------------------
faker.providers.phone_number.ar_JO.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.ar_JO.__init__.Provider.area_code(self)->str
faker.providers.phone_number.ar_JO.__init__.Provider.cellphone_number(self)->str
faker.providers.phone_number.ar_JO.__init__.Provider.operator_id(self)->str
faker.providers.phone_number.ar_JO.__init__.Provider.phone_number(self)->str
faker.providers.phone_number.ar_JO.__init__.Provider.service_phone_number(self)->str
faker.providers.phone_number.ar_JO.__init__.Provider.telephone_number(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/hu_HU/__init__.py----------------------------------------
faker.providers.phone_number.hu_HU.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/hr_HR/__init__.py----------------------------------------
faker.providers.phone_number.hr_HR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/th_TH/__init__.py----------------------------------------
faker.providers.phone_number.th_TH.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/de_DE/__init__.py----------------------------------------
faker.providers.phone_number.de_DE.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/en_US/__init__.py----------------------------------------
faker.providers.phone_number.en_US.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.en_US.__init__.Provider.basic_phone_number(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/es_CL/__init__.py----------------------------------------
faker.providers.phone_number.es_CL.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.es_CL.__init__.Provider.cellphone_block(self)->str
faker.providers.phone_number.es_CL.__init__.Provider.landline_code(self)->str
faker.providers.phone_number.es_CL.__init__.Provider.phone_number(self)->str
faker.providers.phone_number.es_CL.__init__.Provider.special_code(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/en_CA/__init__.py----------------------------------------
faker.providers.phone_number.en_CA.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/uk_UA/__init__.py----------------------------------------
faker.providers.phone_number.uk_UA.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/ko_KR/__init__.py----------------------------------------
faker.providers.phone_number.ko_KR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/es_ES/__init__.py----------------------------------------
A:faker.providers.phone_number.es_ES.__init__.formats->tuple((phone_format.replace('xxx', prefix) for (prefix, phone_format) in itertools.product(PREFIXES, PHONE_FORMATS)))
faker.providers.phone_number.es_ES.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/sv_SE/__init__.py----------------------------------------
faker.providers.phone_number.sv_SE.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/el_GR/__init__.py----------------------------------------
faker.providers.phone_number.el_GR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/fa_IR/__init__.py----------------------------------------
faker.providers.phone_number.fa_IR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/vi_VN/__init__.py----------------------------------------
faker.providers.phone_number.vi_VN.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/en_PH/__init__.py----------------------------------------
faker.providers.phone_number.en_PH.__init__.Provider(BaseProvider)
faker.providers.phone_number.en_PH.__init__.Provider._create_phone_number(self,formats:Sequence[str])->str
faker.providers.phone_number.en_PH.__init__.Provider.area2_landline_number(self)->str
faker.providers.phone_number.en_PH.__init__.Provider.bayantel_area2_landline_number(self)->str
faker.providers.phone_number.en_PH.__init__.Provider.bayantel_landline_identifier(self)->str
faker.providers.phone_number.en_PH.__init__.Provider.globe_area2_landline_number(self)->str
faker.providers.phone_number.en_PH.__init__.Provider.globe_mobile_number(self)->str
faker.providers.phone_number.en_PH.__init__.Provider.globe_mobile_number_prefix(self)->str
faker.providers.phone_number.en_PH.__init__.Provider.landline_number(self)->str
faker.providers.phone_number.en_PH.__init__.Provider.misc_area2_landline_number(self)->str
faker.providers.phone_number.en_PH.__init__.Provider.misc_landline_identifier(self)->str
faker.providers.phone_number.en_PH.__init__.Provider.mobile_number(self)->str
faker.providers.phone_number.en_PH.__init__.Provider.non_area2_landline_area_code(self)->str
faker.providers.phone_number.en_PH.__init__.Provider.non_area2_landline_number(self)->str
faker.providers.phone_number.en_PH.__init__.Provider.pldt_area2_landline_number(self)->str
faker.providers.phone_number.en_PH.__init__.Provider.smart_mobile_number(self)->str
faker.providers.phone_number.en_PH.__init__.Provider.smart_mobile_number_prefix(self)->str
faker.providers.phone_number.en_PH.__init__.Provider.sun_mobile_number(self)->str
faker.providers.phone_number.en_PH.__init__.Provider.sun_mobile_number_prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/ar_AE/__init__.py----------------------------------------
faker.providers.phone_number.ar_AE.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.ar_AE.__init__.Provider.area_code(self)->str
faker.providers.phone_number.ar_AE.__init__.Provider.cellphone_number(self)->str
faker.providers.phone_number.ar_AE.__init__.Provider.cellphone_provider_code(self)->str
faker.providers.phone_number.ar_AE.__init__.Provider.phone_number(self)->str
faker.providers.phone_number.ar_AE.__init__.Provider.service_phone_number(self)->str
faker.providers.phone_number.ar_AE.__init__.Provider.telephone_number(self)->str
faker.providers.phone_number.ar_AE.__init__.Provider.telephone_provider_code(self)->str
faker.providers.phone_number.ar_AE.__init__.Provider.toll_number(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/fi_FI/__init__.py----------------------------------------
faker.providers.phone_number.fi_FI.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/es_AR/__init__.py----------------------------------------
faker.providers.phone_number.es_AR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/fr_FR/__init__.py----------------------------------------
faker.providers.phone_number.fr_FR.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.fr_FR.__init__.Provider.area_code_with_separator(self)->str
faker.providers.phone_number.fr_FR.__init__.Provider.area_code_without_separator(self)->str
faker.providers.phone_number.fr_FR.__init__.Provider.phone_number(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/en_GB/__init__.py----------------------------------------
faker.providers.phone_number.en_GB.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.en_GB.__init__.Provider.cellphone_number(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/ar_PS/__init__.py----------------------------------------
faker.providers.phone_number.ar_PS.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.ar_PS.__init__.Provider.area_code(self)->str
faker.providers.phone_number.ar_PS.__init__.Provider.cellphone_number(self)->str
faker.providers.phone_number.ar_PS.__init__.Provider.phone_number(self)->str
faker.providers.phone_number.ar_PS.__init__.Provider.provider_code(self)->str
faker.providers.phone_number.ar_PS.__init__.Provider.service_phone_number(self)->str
faker.providers.phone_number.ar_PS.__init__.Provider.telephone_number(self)->str
faker.providers.phone_number.ar_PS.__init__.Provider.toll_number(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/bn_BD/__init__.py----------------------------------------
A:faker.providers.phone_number.bn_BD.__init__.res->super(self.__class__, self).msisdn()
faker.providers.phone_number.bn_BD.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.bn_BD.__init__.Provider.msisdn(self)->str
faker.providers.phone_number.bn_BD.__init__.Provider.phone_number(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/ta_IN/__init__.py----------------------------------------
faker.providers.phone_number.ta_IN.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/ja_JP/__init__.py----------------------------------------
faker.providers.phone_number.ja_JP.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/fil_PH/__init__.py----------------------------------------
faker.providers.phone_number.fil_PH.__init__.Provider(EnPhPhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/he_IL/__init__.py----------------------------------------
faker.providers.phone_number.he_IL.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/phone_number/nl_BE/__init__.py----------------------------------------
faker.providers.phone_number.nl_BE.__init__.Provider(PhoneNumberProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/user_agent/__init__.py----------------------------------------
faker.providers.user_agent.__init__.Provider(BaseProvider)
faker.providers.user_agent.__init__.Provider.android_platform_token(self)->str
faker.providers.user_agent.__init__.Provider.chrome(self,version_from:int=13,version_to:int=63,build_from:int=800,build_to:int=899)->str
faker.providers.user_agent.__init__.Provider.firefox(self)->str
faker.providers.user_agent.__init__.Provider.internet_explorer(self)->str
faker.providers.user_agent.__init__.Provider.ios_platform_token(self)->str
faker.providers.user_agent.__init__.Provider.linux_platform_token(self)->str
faker.providers.user_agent.__init__.Provider.linux_processor(self)->str
faker.providers.user_agent.__init__.Provider.mac_platform_token(self)->str
faker.providers.user_agent.__init__.Provider.mac_processor(self)->str
faker.providers.user_agent.__init__.Provider.opera(self)->str
faker.providers.user_agent.__init__.Provider.safari(self)->str
faker.providers.user_agent.__init__.Provider.user_agent(self)->str
faker.providers.user_agent.__init__.Provider.windows_platform_token(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/user_agent/en_US/__init__.py----------------------------------------
faker.providers.user_agent.en_US.__init__.Provider(UserAgentProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/__init__.py----------------------------------------
A:faker.providers.address.__init__.current_country_code->self.current_country_code()
faker.providers.address.__init__.Provider(BaseProvider)
faker.providers.address.__init__.Provider.address(self)->str
faker.providers.address.__init__.Provider.building_number(self)->str
faker.providers.address.__init__.Provider.city(self)->str
faker.providers.address.__init__.Provider.city_suffix(self)->str
faker.providers.address.__init__.Provider.country(self)->str
faker.providers.address.__init__.Provider.country_code(self,representation:str=ALPHA_2)->str
faker.providers.address.__init__.Provider.current_country(self)->str
faker.providers.address.__init__.Provider.current_country_code(self)->str
faker.providers.address.__init__.Provider.postcode(self)->str
faker.providers.address.__init__.Provider.street_address(self)->str
faker.providers.address.__init__.Provider.street_name(self)->str
faker.providers.address.__init__.Provider.street_suffix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/it_IT/__init__.py----------------------------------------
A:faker.providers.address.it_IT.__init__.postcode_formats->cap_city_province.keys()
A:faker.providers.address.it_IT.__init__.cities->getcities(cap_city_province)
A:faker.providers.address.it_IT.__init__.cap->self.postcode()
faker.providers.address.it_IT.__init__.Provider(AddressProvider)
faker.providers.address.it_IT.__init__.Provider.administrative_unit(self)->str
faker.providers.address.it_IT.__init__.Provider.city(self)->str
faker.providers.address.it_IT.__init__.Provider.city_prefix(self)->str
faker.providers.address.it_IT.__init__.Provider.postcode_city_province(self)->str
faker.providers.address.it_IT.__init__.Provider.secondary_address(self)->str
faker.providers.address.it_IT.__init__.Provider.state_abbr(self)->str
faker.providers.address.it_IT.__init__.getcities(fulldict)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/ka_GE/__init__.py----------------------------------------
faker.providers.address.ka_GE.__init__.Provider(AddressProvider)
faker.providers.address.ka_GE.__init__.Provider.city_name(self)->str
faker.providers.address.ka_GE.__init__.Provider.street_title(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/fr_CA/__init__.py----------------------------------------
faker.providers.address.fr_CA.__init__.Provider(self,*args:Any,**kwargs:Any)
faker.providers.address.fr_CA.__init__.Provider.__init__(self,*args:Any,**kwargs:Any)
faker.providers.address.fr_CA.__init__.Provider.street_prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/ru_RU/__init__.py----------------------------------------
A:faker.providers.address.ru_RU.__init__.suffix->self.street_suffix()
A:faker.providers.address.ru_RU.__init__.street->self.street_title()
faker.providers.address.ru_RU.__init__.Provider(AddressProvider)
faker.providers.address.ru_RU.__init__.Provider.administrative_unit(self)->str
faker.providers.address.ru_RU.__init__.Provider.city_name(self)->str
faker.providers.address.ru_RU.__init__.Provider.city_prefix(self)->str
faker.providers.address.ru_RU.__init__.Provider.country(self)->str
faker.providers.address.ru_RU.__init__.Provider.street_name(self)->str
faker.providers.address.ru_RU.__init__.Provider.street_suffix(self)->str
faker.providers.address.ru_RU.__init__.Provider.street_title(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/en_BD/__init__.py----------------------------------------
A:faker.providers.address.en_BD.__init__.value->self.bothify(self.random_element(self.secondary_address_formats))
A:faker.providers.address.en_BD.__init__.word_list->self.bothify(self.random_element(self.secondary_address_formats)).split(' ')
faker.providers.address.en_BD.__init__.Provider(AddressProvider)
faker.providers.address.en_BD.__init__.Provider.administrative_unit(self)->str
faker.providers.address.en_BD.__init__.Provider.area_name(self)->str
faker.providers.address.en_BD.__init__.Provider.building_name(self)->str
faker.providers.address.en_BD.__init__.Provider.building_number(self)->str
faker.providers.address.en_BD.__init__.Provider.city(self)->str
faker.providers.address.en_BD.__init__.Provider.city_prefix(self)->str
faker.providers.address.en_BD.__init__.Provider.postcode(self)->str
faker.providers.address.en_BD.__init__.Provider.secondary_address(self)->str
faker.providers.address.en_BD.__init__.Provider.town(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/en_AU/__init__.py----------------------------------------
faker.providers.address.en_AU.__init__.Provider(AddressProvider)
faker.providers.address.en_AU.__init__.Provider.administrative_unit(self)->str
faker.providers.address.en_AU.__init__.Provider.city_prefix(self)->str
faker.providers.address.en_AU.__init__.Provider.secondary_address(self)->str
faker.providers.address.en_AU.__init__.Provider.state_abbr(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/sk_SK/__init__.py----------------------------------------
faker.providers.address.sk_SK.__init__.Provider(AddressProvider)
faker.providers.address.sk_SK.__init__.Provider.administrative_unit(self)->str
faker.providers.address.sk_SK.__init__.Provider.city_name(self)->str
faker.providers.address.sk_SK.__init__.Provider.city_with_postcode(self)->str
faker.providers.address.sk_SK.__init__.Provider.street_name(self)->str
faker.providers.address.sk_SK.__init__.Provider.street_suffix_long(self)->str
faker.providers.address.sk_SK.__init__.Provider.street_suffix_short(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/zh_TW/__init__.py----------------------------------------
faker.providers.address.zh_TW.__init__.Provider(AddressProvider)
faker.providers.address.zh_TW.__init__.Provider.building_number(self)->str
faker.providers.address.zh_TW.__init__.Provider.city_name(self)->str
faker.providers.address.zh_TW.__init__.Provider.city_name_suffix(self)->str
faker.providers.address.zh_TW.__init__.Provider.secondary_address(self)->str
faker.providers.address.zh_TW.__init__.Provider.section_number(self)->str
faker.providers.address.zh_TW.__init__.Provider.street_name(self)->str
faker.providers.address.zh_TW.__init__.Provider.street_name_suffix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/pt_PT/__init__.py----------------------------------------
faker.providers.address.pt_PT.__init__.Provider(AddressProvider)
faker.providers.address.pt_PT.__init__.Provider.administrative_unit(self)->str
faker.providers.address.pt_PT.__init__.Provider.city_name(self)->str
faker.providers.address.pt_PT.__init__.Provider.concelho(self)->str
faker.providers.address.pt_PT.__init__.Provider.freguesia(self)->str
faker.providers.address.pt_PT.__init__.Provider.place_name(self)->str
faker.providers.address.pt_PT.__init__.Provider.street_prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/ro_RO/__init__.py----------------------------------------
faker.providers.address.ro_RO.__init__.Provider(AddressProvider)
faker.providers.address.ro_RO.__init__.Provider.administrative_unit(self)->str
faker.providers.address.ro_RO.__init__.Provider.city_name(self)->str
faker.providers.address.ro_RO.__init__.Provider.city_with_postcode(self)->str
faker.providers.address.ro_RO.__init__.Provider.secondary_address(self)->str
faker.providers.address.ro_RO.__init__.Provider.state_abbr(self)->str
faker.providers.address.ro_RO.__init__.Provider.street_prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/az_AZ/__init__.py----------------------------------------
A:faker.providers.address.az_AZ.__init__.index->self.generator.random.randint(900, 6600)
faker.providers.address.az_AZ.__init__.Provider(AddressProvider)
faker.providers.address.az_AZ.__init__.Provider.administrative_unit(self)->str
faker.providers.address.az_AZ.__init__.Provider.city(self)->str
faker.providers.address.az_AZ.__init__.Provider.city_suffix(self)->str
faker.providers.address.az_AZ.__init__.Provider.district(self)->str
faker.providers.address.az_AZ.__init__.Provider.district_suffix(self)->str
faker.providers.address.az_AZ.__init__.Provider.house_number(self)->str
faker.providers.address.az_AZ.__init__.Provider.postalcode(self)->str
faker.providers.address.az_AZ.__init__.Provider.postcode(self)->str
faker.providers.address.az_AZ.__init__.Provider.settlement(self)->str
faker.providers.address.az_AZ.__init__.Provider.settlement_suffix(self)->str
faker.providers.address.az_AZ.__init__.Provider.street(self)->str
faker.providers.address.az_AZ.__init__.Provider.street_suffix(self)->str
faker.providers.address.az_AZ.__init__.Provider.village(self)->str
faker.providers.address.az_AZ.__init__.Provider.village_suffix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/en/__init__.py----------------------------------------
faker.providers.address.en.__init__.Provider(AddressProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/hy_AM/__init__.py----------------------------------------
A:faker.providers.address.hy_AM.__init__.state_abbr->self.random_element(self.states_abbr)
faker.providers.address.hy_AM.__init__.Provider(AddressProvider)
faker.providers.address.hy_AM.__init__.Provider.administrative_unit(self)->str
faker.providers.address.hy_AM.__init__.Provider.city(self)->str
faker.providers.address.hy_AM.__init__.Provider.city_prefix(self)->str
faker.providers.address.hy_AM.__init__.Provider.postcode(self)->str
faker.providers.address.hy_AM.__init__.Provider.postcode_in_state(self,state_abbr:Optional[str]=None)->str
faker.providers.address.hy_AM.__init__.Provider.secondary_address(self)->str
faker.providers.address.hy_AM.__init__.Provider.state_abbr(self)->str
faker.providers.address.hy_AM.__init__.Provider.street(self)->str
faker.providers.address.hy_AM.__init__.Provider.street_prefix(self)->str
faker.providers.address.hy_AM.__init__.Provider.village(self)->str
faker.providers.address.hy_AM.__init__.Provider.village_prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/en_IN/__init__.py----------------------------------------
faker.providers.address.en_IN.__init__.Provider(AddressProvider)
faker.providers.address.en_IN.__init__.Provider.administrative_unit(self)->str
faker.providers.address.en_IN.__init__.Provider.city_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/fr_CH/__init__.py----------------------------------------
faker.providers.address.fr_CH.__init__.Provider(AddressProvider)
faker.providers.address.fr_CH.__init__.Provider.administrative_unit(self)->str
faker.providers.address.fr_CH.__init__.Provider.canton(self)->Tuple[str, str]
faker.providers.address.fr_CH.__init__.Provider.canton_code(self)->str
faker.providers.address.fr_CH.__init__.Provider.city_prefix(self)->str
faker.providers.address.fr_CH.__init__.Provider.street_prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/sl_SI/__init__.py----------------------------------------
faker.providers.address.sl_SI.__init__.Provider(AddressProvider)
faker.providers.address.sl_SI.__init__.Provider.administrative_unit(self)->str
faker.providers.address.sl_SI.__init__.Provider.city_name(self)->str
faker.providers.address.sl_SI.__init__.Provider.street_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/id_ID/__init__.py----------------------------------------
faker.providers.address.id_ID.__init__.Provider(AddressProvider)
faker.providers.address.id_ID.__init__.Provider.administrative_unit(self)->str
faker.providers.address.id_ID.__init__.Provider.city_name(self)->str
faker.providers.address.id_ID.__init__.Provider.country(self)->str
faker.providers.address.id_ID.__init__.Provider.state_abbr(self)->str
faker.providers.address.id_ID.__init__.Provider.street(self)->str
faker.providers.address.id_ID.__init__.Provider.street_prefix_long(self)->str
faker.providers.address.id_ID.__init__.Provider.street_prefix_short(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/cs_CZ/__init__.py----------------------------------------
faker.providers.address.cs_CZ.__init__.Provider(AddressProvider)
faker.providers.address.cs_CZ.__init__.Provider.administrative_unit(self)->str
faker.providers.address.cs_CZ.__init__.Provider.city_name(self)->str
faker.providers.address.cs_CZ.__init__.Provider.city_with_postcode(self)->str
faker.providers.address.cs_CZ.__init__.Provider.street_name(self)->str
faker.providers.address.cs_CZ.__init__.Provider.street_suffix_long(self)->str
faker.providers.address.cs_CZ.__init__.Provider.street_suffix_short(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/pl_PL/__init__.py----------------------------------------
faker.providers.address.pl_PL.__init__.Provider(AddressProvider)
faker.providers.address.pl_PL.__init__.Provider.administrative_unit(self)->str
faker.providers.address.pl_PL.__init__.Provider.city(self)->str
faker.providers.address.pl_PL.__init__.Provider.postalcode(self)->str
faker.providers.address.pl_PL.__init__.Provider.postcode(self)->str
faker.providers.address.pl_PL.__init__.Provider.street_name(self)->str
faker.providers.address.pl_PL.__init__.Provider.street_prefix(self)->str
faker.providers.address.pl_PL.__init__.Provider.street_prefix_short(self)->str
faker.providers.address.pl_PL.__init__.Provider.zipcode(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/da_DK/__init__.py----------------------------------------
faker.providers.address.da_DK.__init__.Provider(AddressProvider)
faker.providers.address.da_DK.__init__.Provider.administrative_unit(self)->str
faker.providers.address.da_DK.__init__.Provider.city_name(self)->str
faker.providers.address.da_DK.__init__.Provider.dk_street_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/en_NZ/__init__.py----------------------------------------
faker.providers.address.en_NZ.__init__.Provider(AddressProvider)
faker.providers.address.en_NZ.__init__.Provider.city_prefix(self)->str
faker.providers.address.en_NZ.__init__.Provider.city_suffix(self)->str
faker.providers.address.en_NZ.__init__.Provider.rd_number(self)->str
faker.providers.address.en_NZ.__init__.Provider.secondary_address(self)->str
faker.providers.address.en_NZ.__init__.Provider.te_reo_ending(self)->str
faker.providers.address.en_NZ.__init__.Provider.te_reo_first(self)->str
faker.providers.address.en_NZ.__init__.Provider.te_reo_part(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/ne_NP/__init__.py----------------------------------------
faker.providers.address.ne_NP.__init__.Provider(AddressProvider)
faker.providers.address.ne_NP.__init__.Provider.administrative_unit(self)->str
faker.providers.address.ne_NP.__init__.Provider.building_prefix(self)->str
faker.providers.address.ne_NP.__init__.Provider.city(self)->str
faker.providers.address.ne_NP.__init__.Provider.district(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/zh_CN/__init__.py----------------------------------------
faker.providers.address.zh_CN.__init__.Provider(AddressProvider)
faker.providers.address.zh_CN.__init__.Provider.administrative_unit(self)->str
faker.providers.address.zh_CN.__init__.Provider.building_number(self)->str
faker.providers.address.zh_CN.__init__.Provider.city_name(self)->str
faker.providers.address.zh_CN.__init__.Provider.district(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/es_MX/__init__.py----------------------------------------
A:faker.providers.address.es_MX.__init__.zip_codes->OrderedDict((('AGS', (20000, 20999)), ('BC', (21000, 22999)), ('BCS', (23000, 23999)), ('CAMP', (24000, 24999)), ('COAH', (25000, 27999)), ('COL', (28000, 28999)), ('CHIS', (29000, 30999)), ('CHIH', (31000, 33999)), ('DF', (1000, 19999)), ('DGO', (36000, 35999)), ('GTO', (36000, 38999)), ('GRO', (39000, 41999)), ('HGO', (42000, 43999)), ('JAL', (44000, 49999)), ('MEX', (50000, 57999)), ('MICH', (58000, 61999)), ('MOR', (62000, 62999)), ('NAY', (63000, 63999)), ('NL', (64000, 67999)), ('OAX', (68000, 71999)), ('PUE', (72000, 75999)), ('QRO', (76000, 76999)), ('Q. ROO', (77000, 75999)), ('SLP', (78000, 79999)), ('SIN', (80000, 82999)), ('SON', (83000, 85999)), ('TAB', (86000, 86999)), ('TAMPS', (87000, 89999)), ('TLAX', (90000, 90999)), ('VER', (91000, 97999)), ('YUC', (97000, 97999)), ('ZAC', (98000, 99999))))
faker.providers.address.es_MX.__init__.Provider(AddressProvider)
faker.providers.address.es_MX.__init__.Provider.administrative_unit(self)->str
faker.providers.address.es_MX.__init__.Provider.city_adjective(self)->str
faker.providers.address.es_MX.__init__.Provider.city_prefix(self)->str
faker.providers.address.es_MX.__init__.Provider.city_suffix(self)->str
faker.providers.address.es_MX.__init__.Provider.secondary_address(self)->str
faker.providers.address.es_MX.__init__.Provider.state_abbr(self)->str
faker.providers.address.es_MX.__init__.Provider.street_prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/pt_BR/__init__.py----------------------------------------
faker.providers.address.pt_BR.__init__.Provider(AddressProvider)
faker.providers.address.pt_BR.__init__.Provider.administrative_unit(self)->str
faker.providers.address.pt_BR.__init__.Provider.bairro(self)->str
faker.providers.address.pt_BR.__init__.Provider.estado(self)->Tuple[str, str]
faker.providers.address.pt_BR.__init__.Provider.estado_nome(self)->str
faker.providers.address.pt_BR.__init__.Provider.estado_sigla(self)->str
faker.providers.address.pt_BR.__init__.Provider.neighborhood(self)->str
faker.providers.address.pt_BR.__init__.Provider.postcode(self,formatted:bool=True)->str
faker.providers.address.pt_BR.__init__.Provider.state_abbr(self)->str
faker.providers.address.pt_BR.__init__.Provider.street_prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/de_CH/__init__.py----------------------------------------
faker.providers.address.de_CH.__init__.Provider(AddressProvider)
faker.providers.address.de_CH.__init__.Provider.administrative_unit(self)->str
faker.providers.address.de_CH.__init__.Provider.canton(self)->Tuple[str, str]
faker.providers.address.de_CH.__init__.Provider.canton_code(self)->str
faker.providers.address.de_CH.__init__.Provider.city_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/es_CO/__init__.py----------------------------------------
A:faker.providers.address.es_CO.__init__.street_prefixes->OrderedDict([('Calle', 0.2), ('Cl.', 0.2), ('Carrera', 0.2), ('Cr.', 0.2), ('Diagonal', 0.05), ('Dg.', 0.05), ('Transversal', 0.05), ('Tr.', 0.05)])
A:faker.providers.address.es_CO.__init__.street_name_formats->OrderedDict([('{{street_prefix}} %ª', 0.1), ('{{street_prefix}} %#', 0.3), ('{{street_prefix}} 1##', 0.1), ('{{street_prefix}} % {{street_suffix}}', 0.02), ('{{street_prefix}} %# {{street_suffix}}', 0.02), ('{{street_prefix}} 1## {{street_suffix}}', 0.02), ('{{street_prefix}} %{{random_uppercase_letter}}', 0.06), ('{{street_prefix}} %#{{random_uppercase_letter}}', 0.06), ('{{street_prefix}} 1##{{random_uppercase_letter}}', 0.06), ('{{street_prefix}} %{{random_uppercase_letter}} {{street_suffix}}', 0.02), ('{{street_prefix}} %#{{random_uppercase_letter}} {{street_suffix}}', 0.02), ('{{street_prefix}} 1##{{random_uppercase_letter}} {{street_suffix}}', 0.02), ('Avenida {{last_name}}', 0.01), ('Avenida calle %ª', 0.01), ('Avenida calle %#', 0.01), ('Avenida calle 1##', 0.01), ('Avenida carrera %ª', 0.01), ('Avenida carrera %#', 0.01), ('Avenida carrera 1##', 0.01), ('Avenida {{name}}', 0.01), ('Avenida {{city}}', 0.01), ('Avenida {{department}}', 0.01), ('Av. {{last_name}}', 0.01), ('Av. calle %ª', 0.01), ('Av. calle %#', 0.01), ('Av. calle 1##', 0.01), ('Av. carrera %ª', 0.01), ('Av. carrera %#', 0.01), ('Av. carrera 1##', 0.01), ('Av. {{name}}', 0.01), ('Av. {{city}}', 0.01), ('Av. {{department}}', 0.01)])
A:faker.providers.address.es_CO.__init__.building_number_formats->OrderedDict([('%-%', 0.2), ('%-%#', 0.2), ('%#-%', 0.2), ('%#-%#', 0.2), ('%{{random_uppercase_letter}}-%', 0.05), ('%{{random_uppercase_letter}}-%#', 0.05), ('%#{{random_uppercase_letter}}-%', 0.05), ('%#{{random_uppercase_letter}}-%#', 0.05)])
faker.providers.address.es_CO.__init__.Provider(AddressProvider)
faker.providers.address.es_CO.__init__.Provider.address(self)->str
faker.providers.address.es_CO.__init__.Provider.building_number(self)->str
faker.providers.address.es_CO.__init__.Provider.department(self)->str
faker.providers.address.es_CO.__init__.Provider.department_code(self)->str
faker.providers.address.es_CO.__init__.Provider.municipality(self)->str
faker.providers.address.es_CO.__init__.Provider.municipality_code(self)->str
faker.providers.address.es_CO.__init__.Provider.postcode(self)->str
faker.providers.address.es_CO.__init__.Provider.secondary_address(self)->str
faker.providers.address.es_CO.__init__.Provider.street_address(self)->str
faker.providers.address.es_CO.__init__.Provider.street_name(self)->str
faker.providers.address.es_CO.__init__.Provider.street_prefix(self)->str
faker.providers.address.es_CO.__init__.Provider.street_suffix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/nl_NL/__init__.py----------------------------------------
faker.providers.address.nl_NL.__init__.Provider(AddressProvider)
faker.providers.address.nl_NL.__init__.Provider.administrative_unit(self)->str
faker.providers.address.nl_NL.__init__.Provider.city(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/tl_PH/__init__.py----------------------------------------
faker.providers.address.tl_PH.__init__.Provider(EnPhAddressProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/es/__init__.py----------------------------------------
faker.providers.address.es.__init__.Provider(AddressProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/no_NO/__init__.py----------------------------------------
A:faker.providers.address.no_NO.__init__.building_number_suffixes->OrderedDict([('A', 0.2), ('B', 0.2), ('C', 0.2), ('D', 0.1), ('E', 0.1), ('F', 0.1), ('G', 0.05), ('H', 0.05)])
faker.providers.address.no_NO.__init__.Provider(AddressProvider)
faker.providers.address.no_NO.__init__.Provider.building_number(self)->str
faker.providers.address.no_NO.__init__.Provider.city_suffix(self)->str
faker.providers.address.no_NO.__init__.Provider.street_suffix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/hi_IN/__init__.py----------------------------------------
faker.providers.address.hi_IN.__init__.Provider(AddressProvider)
faker.providers.address.hi_IN.__init__.Provider.administrative_unit(self)->str
faker.providers.address.hi_IN.__init__.Provider.city_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/hu_HU/__init__.py----------------------------------------
A:faker.providers.address.hu_HU.__init__.street_suffixes->OrderedDict((('utca', 0.75), ('út', 0.1), ('tér', 0.1), ('köz', 0.001), ('körút', 0.001), ('sétány', 0.001)))
A:faker.providers.address.hu_HU.__init__.numeric_part->super().random_int(1, 250)
faker.providers.address.hu_HU.__init__.Provider(AddressProvider)
faker.providers.address.hu_HU.__init__.Provider.administrative_unit(self)->str
faker.providers.address.hu_HU.__init__.Provider.building_number(self)->str
faker.providers.address.hu_HU.__init__.Provider.city(self)->str
faker.providers.address.hu_HU.__init__.Provider.city_part(self)->str
faker.providers.address.hu_HU.__init__.Provider.city_prefix(self)->str
faker.providers.address.hu_HU.__init__.Provider.frequent_street_name(self)->str
faker.providers.address.hu_HU.__init__.Provider.postcode(self)->str
faker.providers.address.hu_HU.__init__.Provider.real_city_name(self)->str
faker.providers.address.hu_HU.__init__.Provider.street_address_with_county(self)->str
faker.providers.address.hu_HU.__init__.Provider.street_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/hr_HR/__init__.py----------------------------------------
faker.providers.address.hr_HR.__init__.Provider(AddressProvider)
faker.providers.address.hr_HR.__init__.Provider.administrative_unit(self)->str
faker.providers.address.hr_HR.__init__.Provider.city_name(self)->str
faker.providers.address.hr_HR.__init__.Provider.street_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/th_TH/__init__.py----------------------------------------
A:faker.providers.address.th_TH.__init__.address_formats->OrderedDict((('{{street_address}} {{tambon}} {{amphoe}} {{province}} {{postcode}}', 50.0), ('{{street_address}} ตำบล{{tambon}} อำเภอ{{amphoe}} {{province}} {{postcode}}', 50.0), ('{{street_address}} ต.{{tambon}} อ.{{amphoe}} {{province}} {{postcode}}', 50.0), ('{{street_address}} ต.{{tambon}} อ.{{amphoe}} จ.{{province}} {{postcode}}', 40.0), ('{{street_address}} อำเภอ{{amphoe}} {{province}} {{postcode}}', 30.0), ('{{street_address}} อ.{{amphoe}} {{province}} {{postcode}}', 30.0), ('{{street_address}} {{amphoe}} {{province}} {{postcode}}', 30.0), ('{{street_address}} {{tambon}} {{province}} {{postcode}}', 15.0), ('{{street_address}} {{amphoe}} จ.{{province}} {{postcode}}', 15.0), ('{{street_address}} {{tambon}} จ.{{province}} {{postcode}}', 15.0), ('{{street_address}} อ.{{amphoe}} จ.{{province}} {{postcode}}', 15.0), ('{{street_address}} ต.{{tambon}} จ.{{province}} {{postcode}}', 15.0), ('{{street_address}} อำเภอ{{amphoe}} จังหวัด{{province}} {{postcode}}', 15.0), ('{{street_address}} ตำบล{{tambon}} อำเภอ{{amphoe}} จังหวัด{{province}} {{postcode}}', 10.0), ('{{street_address}} {{province}} {{postcode}}', 15.0), ('{{street_address}} ต.{{tambon}} อ.{{amphoe}} {{province}}', 15.0), ('{{street_address}} ต.{{tambon}} อ.{{amphoe}} จ.{{province}}', 15.0), ('{{street_address}} ตำบล{{tambon}} จังหวัด{{province}} {{postcode}}', 10.0), ('{{building_number}} ต.{{tambon}} อ.{{amphoe}} {{province}} {{postcode}}', 10.0), ('{{building_number}} หมู่บ้าน{{first_name}} {{amphoe}} {{province}} {{postcode}}', 10.0)))
A:faker.providers.address.th_TH.__init__.street_prefixes->OrderedDict((('ถนน', 0.5), ('ถ.', 0.4), ('ซอย', 0.02), ('ซ.', 0.02)))
A:faker.providers.address.th_TH.__init__.tambon_prefixes->OrderedDict((('', 40.0), ('วัด', 2.0), ('บ้าน', 2.0), ('บ่อ', 2.0), ('บึง', 2.0), ('ป่า', 1.0), ('ห้วย', 1.0)))
A:faker.providers.address.th_TH.__init__.tambon_suffixes->OrderedDict((('', 30), ('เหนือ', 3), ('ใต้', 3), ('ใหญ่', 2), ('กลาง', 1), ('เล็ก', 1), ('ใหม่', 1), ('เดิม', 0.1)))
faker.providers.address.th_TH.__init__.Provider(AddressProvider)
faker.providers.address.th_TH.__init__.Provider.administrative_unit(self)->str
faker.providers.address.th_TH.__init__.Provider.amphoe(self)->str
faker.providers.address.th_TH.__init__.Provider.city_name(self)->str
faker.providers.address.th_TH.__init__.Provider.street_prefix(self)->str
faker.providers.address.th_TH.__init__.Provider.tambon(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/de_DE/__init__.py----------------------------------------
faker.providers.address.de_DE.__init__.Provider(AddressProvider)
faker.providers.address.de_DE.__init__.Provider.administrative_unit(self)->str
faker.providers.address.de_DE.__init__.Provider.city_name(self)->str
faker.providers.address.de_DE.__init__.Provider.city_with_postcode(self)->str
faker.providers.address.de_DE.__init__.Provider.street_suffix_long(self)->str
faker.providers.address.de_DE.__init__.Provider.street_suffix_short(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/en_US/__init__.py----------------------------------------
A:faker.providers.address.en_US.__init__.address_formats->OrderedDict((('{{street_address}}\n{{city}}, {{state_abbr}} {{postcode}}', 25.0), ('{{military_apo}}\nAPO {{military_state}} {{postcode}}', 1.0), ('{{military_ship}} {{last_name}}\nFPO {{military_state}} {{postcode}}', 1.0), ('{{military_dpo}}\nDPO {{military_state}} {{postcode}}', 1.0)))
A:faker.providers.address.en_US.__init__.state_abbr->self.random_element(self.states_abbr)
A:faker.providers.address.en_US.__init__.current_postcode_len->len(postcode)
faker.providers.address.en_US.__init__.Provider(AddressProvider)
faker.providers.address.en_US.__init__.Provider.administrative_unit(self)->str
faker.providers.address.en_US.__init__.Provider.city_prefix(self)->str
faker.providers.address.en_US.__init__.Provider.military_apo(self)->str
faker.providers.address.en_US.__init__.Provider.military_dpo(self)->str
faker.providers.address.en_US.__init__.Provider.military_ship(self)->str
faker.providers.address.en_US.__init__.Provider.military_state(self)->str
faker.providers.address.en_US.__init__.Provider.postalcode(self)->str
faker.providers.address.en_US.__init__.Provider.postalcode_in_state(self,state_abbr:Optional[str]=None)->str
faker.providers.address.en_US.__init__.Provider.postalcode_plus4(self)->str
faker.providers.address.en_US.__init__.Provider.postcode(self)->str
faker.providers.address.en_US.__init__.Provider.postcode_in_state(self,state_abbr:Optional[str]=None)->str
faker.providers.address.en_US.__init__.Provider.secondary_address(self)->str
faker.providers.address.en_US.__init__.Provider.state_abbr(self,include_territories:bool=True,include_freely_associated_states:bool=True)->str
faker.providers.address.en_US.__init__.Provider.zipcode(self)->str
faker.providers.address.en_US.__init__.Provider.zipcode_in_state(self,state_abbr:Optional[str]=None)->str
faker.providers.address.en_US.__init__.Provider.zipcode_plus4(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/es_CL/__init__.py----------------------------------------
A:faker.providers.address.es_CL.__init__.street_prefixes->OrderedDict([('Calle', 0.6), ('Avenida', 0.1), ('Avda.', 0.1), ('Av.', 0.1), ('Pasaje', 0.04), ('Psje.', 0.04), ('Camino', 0.02)])
A:faker.providers.address.es_CL.__init__.building_number_formats->OrderedDict([('%###', 0.35), ('%##', 0.35), ('%#', 0.25), ('%', 0.05)])
A:faker.providers.address.es_CL.__init__.address_formats->OrderedDict([('{{street_address}}\n{{commune_and_region}}, {{postcode}}', 0.4), ('{{street_address}}\n{{commune_and_region}}', 0.4), ('{{highway_name}}, km {{random_int:big_kilometer}}', 0.1), ('{{road_name}}, km {{random_int:kilometer}}, {{region}}', 0.1)])
A:faker.providers.address.es_CL.__init__.common_street_names->OrderedDict([('Arturo Prat', 0.118812), ('Esmeralda', 0.107261), ('Manuel Rodríguez', 0.105611), ('Gabriela Mistral', 0.104785), ('Los Aromos', 0.104785), ('Las Rosas', 0.098185), ('Caupolicán', 0.094884), ('Lautaro', 0.094059), ('Los Alerces', 0.086634), ('Los Copihues', 0.084983)])
A:faker.providers.address.es_CL.__init__.commune_code->self.commune_code()
faker.providers.address.es_CL.__init__.Provider(AddressProvider)
faker.providers.address.es_CL.__init__.Provider.common_street_name(self)->str
faker.providers.address.es_CL.__init__.Provider.commune(self)->str
faker.providers.address.es_CL.__init__.Provider.commune_and_region(self)->str
faker.providers.address.es_CL.__init__.Provider.commune_code(self)->str
faker.providers.address.es_CL.__init__.Provider.highway_name(self)->str
faker.providers.address.es_CL.__init__.Provider.historic_people_street_name(self)->str
faker.providers.address.es_CL.__init__.Provider.plant_street_name(self)->str
faker.providers.address.es_CL.__init__.Provider.postcode(self)->str
faker.providers.address.es_CL.__init__.Provider.province(self)->str
faker.providers.address.es_CL.__init__.Provider.province_code(self)->str
faker.providers.address.es_CL.__init__.Provider.region(self)->str
faker.providers.address.es_CL.__init__.Provider.region_code(self)->str
faker.providers.address.es_CL.__init__.Provider.road_name(self)->str
faker.providers.address.es_CL.__init__.Provider.secondary_address(self)->str
faker.providers.address.es_CL.__init__.Provider.street_prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/en_CA/__init__.py----------------------------------------
A:faker.providers.address.en_CA.__init__.temp->re.sub('\\?', lambda x: self.postal_code_letter(), postal_code_format)
A:faker.providers.address.en_CA.__init__.province_abbr->self.random_element(self.provinces_abbr)
A:faker.providers.address.en_CA.__init__.postal_code_format->postal_code_format.replace('?', self.generator.random_element(self.provinces_postcode_prefixes[province_abbr]), 1).replace('?', self.generator.random_element(self.provinces_postcode_prefixes[province_abbr]), 1)
faker.providers.address.en_CA.__init__.Provider(AddressProvider)
faker.providers.address.en_CA.__init__.Provider._postcode_replace(self,postal_code_format:str)->str
faker.providers.address.en_CA.__init__.Provider.administrative_unit(self)->str
faker.providers.address.en_CA.__init__.Provider.city_prefix(self)->str
faker.providers.address.en_CA.__init__.Provider.postal_code_letter(self)->str
faker.providers.address.en_CA.__init__.Provider.postalcode(self)->str
faker.providers.address.en_CA.__init__.Provider.postalcode_in_province(self,province_abbr:Optional[str]=None)->str
faker.providers.address.en_CA.__init__.Provider.postcode(self)->str
faker.providers.address.en_CA.__init__.Provider.postcode_in_province(self,province_abbr:Optional[str]=None)->str
faker.providers.address.en_CA.__init__.Provider.province_abbr(self)->str
faker.providers.address.en_CA.__init__.Provider.secondary_address(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/uk_UA/__init__.py----------------------------------------
A:faker.providers.address.uk_UA.__init__.prefix->self.street_prefix()
A:faker.providers.address.uk_UA.__init__.street->self.street_name()
faker.providers.address.uk_UA.__init__.Provider(AddressProvider)
faker.providers.address.uk_UA.__init__.Provider.city_name(self)->str
faker.providers.address.uk_UA.__init__.Provider.city_prefix(self)->str
faker.providers.address.uk_UA.__init__.Provider.postcode(self)->str
faker.providers.address.uk_UA.__init__.Provider.region(self)->str
faker.providers.address.uk_UA.__init__.Provider.street_name(self)->str
faker.providers.address.uk_UA.__init__.Provider.street_prefix(self)->str
faker.providers.address.uk_UA.__init__.Provider.street_title(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/ko_KR/__init__.py----------------------------------------
faker.providers.address.ko_KR.__init__.Provider(AddressProvider)
faker.providers.address.ko_KR.__init__.Provider.address_detail(self)->str
faker.providers.address.ko_KR.__init__.Provider.administrative_unit(self)->str
faker.providers.address.ko_KR.__init__.Provider.borough(self)->str
faker.providers.address.ko_KR.__init__.Provider.building_dong(self)->str
faker.providers.address.ko_KR.__init__.Provider.building_name(self)->str
faker.providers.address.ko_KR.__init__.Provider.building_suffix(self)->str
faker.providers.address.ko_KR.__init__.Provider.city(self)->str
faker.providers.address.ko_KR.__init__.Provider.land_address(self)->str
faker.providers.address.ko_KR.__init__.Provider.land_number(self)->str
faker.providers.address.ko_KR.__init__.Provider.metropolitan_city(self)->str
faker.providers.address.ko_KR.__init__.Provider.old_postal_code(self)->str
faker.providers.address.ko_KR.__init__.Provider.postal_code(self)->str
faker.providers.address.ko_KR.__init__.Provider.postcode(self)->str
faker.providers.address.ko_KR.__init__.Provider.road(self)->str
faker.providers.address.ko_KR.__init__.Provider.road_address(self)->str
faker.providers.address.ko_KR.__init__.Provider.road_name(self)->str
faker.providers.address.ko_KR.__init__.Provider.road_number(self)->str
faker.providers.address.ko_KR.__init__.Provider.road_suffix(self)->str
faker.providers.address.ko_KR.__init__.Provider.town(self)->str
faker.providers.address.ko_KR.__init__.Provider.town_suffix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/de/__init__.py----------------------------------------
faker.providers.address.de.__init__.Provider(AddressProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/es_ES/__init__.py----------------------------------------
faker.providers.address.es_ES.__init__.Provider(AddressProvider)
faker.providers.address.es_ES.__init__.Provider.administrative_unit(self)->str
faker.providers.address.es_ES.__init__.Provider.postcode(self)->str
faker.providers.address.es_ES.__init__.Provider.region(self)->str
faker.providers.address.es_ES.__init__.Provider.secondary_address(self)->str
faker.providers.address.es_ES.__init__.Provider.state_name(self)->str
faker.providers.address.es_ES.__init__.Provider.street_prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/sv_SE/__init__.py----------------------------------------
faker.providers.address.sv_SE.__init__.Provider(AddressProvider)
faker.providers.address.sv_SE.__init__.Provider.administrative_unit(self)->str
faker.providers.address.sv_SE.__init__.Provider.city_name(self)->str
faker.providers.address.sv_SE.__init__.Provider.street_prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/el_GR/__init__.py----------------------------------------
faker.providers.address.el_GR.__init__.Provider(AddressProvider)
faker.providers.address.el_GR.__init__.Provider.administrative_unit(self)->str
faker.providers.address.el_GR.__init__.Provider.city(self)->str
faker.providers.address.el_GR.__init__.Provider.line_address(self)->str
faker.providers.address.el_GR.__init__.Provider.street(self)->str
faker.providers.address.el_GR.__init__.Provider.street_prefix(self)->str
faker.providers.address.el_GR.__init__.Provider.street_prefix_long(self)->str
faker.providers.address.el_GR.__init__.Provider.street_prefix_short(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/fa_IR/__init__.py----------------------------------------
faker.providers.address.fa_IR.__init__.Provider(AddressProvider)
faker.providers.address.fa_IR.__init__.Provider.administrative_unit(self)->str
faker.providers.address.fa_IR.__init__.Provider.city_prefix(self)->str
faker.providers.address.fa_IR.__init__.Provider.secondary_address(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/vi_VN/__init__.py----------------------------------------
A:faker.providers.address.vi_VN.__init__.address_formats->OrderedDict((('{{street_address}}\n{{city}}, {{postcode}}', 25.0), ('{{city}}\n{{street_address}}, {{postcode}}', 1.0)))
A:faker.providers.address.vi_VN.__init__.state_abbr->self.random_element(self.provinces_abbr)
A:faker.providers.address.vi_VN.__init__.postcode->str(self.generator.random.randint(self.provinces_postcode[state_abbr][0], self.provinces_postcode[state_abbr][1]))
A:faker.providers.address.vi_VN.__init__.current_postcode_len->len(postcode)
faker.providers.address.vi_VN.__init__.Provider(AddressProvider)
faker.providers.address.vi_VN.__init__.Provider.administrative_unit(self)->str
faker.providers.address.vi_VN.__init__.Provider.city_prefix(self)->str
faker.providers.address.vi_VN.__init__.Provider.postcode(self)->str
faker.providers.address.vi_VN.__init__.Provider.postcode_in_state(self,state_abbr:Optional[str]=None)->str
faker.providers.address.vi_VN.__init__.Provider.state_abbr(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/en_PH/__init__.py----------------------------------------
A:faker.providers.address.en_PH.__init__.metro_manila_postcodes->tuple((x for x in range(400, 1849)))
A:faker.providers.address.en_PH.__init__.floor_numbers->OrderedDict([(str(x), 0.08) for x in range(2, 5)] + [(str(x), 0.32356832089420257 / x) for x in range(5, 13)] + [(str(x), 0.30341265418486174 / (x - 1)) for x in range(14, 30)] + [(str(x), 0.3009633822265287 / (x - 1)) for x in range(30, 50)] + [(str(x), 0.04570476167856688 / (x - 1)) for x in range(50, 75)] + [(str(x), 0.003415677066138734 / (x - 1)) for x in range(75, 100)])
A:faker.providers.address.en_PH.__init__.street_suffixes->OrderedDict([('Avenue', 0.12), ('Avenue Extension', 0.01), ('Boulevard', 0.05), ('Boulevard Extension', 0.008), ('Circle', 0.002), ('Drive', 0.15), ('Drive Extension', 0.03), ('Expressway', 0.01), ('Extension', 0.05), ('Highway', 0.02), ('Road', 0.2), ('Road Extension', 0.04), ('Service Road', 0.01), ('Street', 0.3)])
A:faker.providers.address.en_PH.__init__.address_formats->OrderedDict([*[(fmt, 0.127524) for fmt in metro_manila_address_formats], *[(fmt, 0.485317) for fmt in luzon_province_address_formats], *[(fmt, 0.148142) for fmt in visayas_province_address_formats], *[(fmt, 0.239017) for fmt in mindanao_province_address_formats]])
A:faker.providers.address.en_PH.__init__.num->int(num)
faker.providers.address.en_PH.__init__.Provider(AddressProvider)
faker.providers.address.en_PH.__init__.Provider._create_address(self,address_formats:ElementsType[str])->str
faker.providers.address.en_PH.__init__.Provider._create_postcode(self,postcodes:Sequence[int])->str
faker.providers.address.en_PH.__init__.Provider._ordinal_string(self,num:Union[int,str])->str
faker.providers.address.en_PH.__init__.Provider.address(self)->str
faker.providers.address.en_PH.__init__.Provider.administrative_unit(self)->str
faker.providers.address.en_PH.__init__.Provider.building_name(self)->str
faker.providers.address.en_PH.__init__.Provider.building_name_suffix(self)->str
faker.providers.address.en_PH.__init__.Provider.building_number(self)->str
faker.providers.address.en_PH.__init__.Provider.building_unit_number(self)->str
faker.providers.address.en_PH.__init__.Provider.floor_number(self)->str
faker.providers.address.en_PH.__init__.Provider.floor_unit_number(self)->str
faker.providers.address.en_PH.__init__.Provider.luzon_province(self)->str
faker.providers.address.en_PH.__init__.Provider.luzon_province_address(self)->str
faker.providers.address.en_PH.__init__.Provider.luzon_province_postcode(self)->str
faker.providers.address.en_PH.__init__.Provider.metro_manila_address(self)->str
faker.providers.address.en_PH.__init__.Provider.metro_manila_lgu(self)->str
faker.providers.address.en_PH.__init__.Provider.metro_manila_postcode(self)->str
faker.providers.address.en_PH.__init__.Provider.mindanao_province(self)->str
faker.providers.address.en_PH.__init__.Provider.mindanao_province_address(self)->str
faker.providers.address.en_PH.__init__.Provider.mindanao_province_postcode(self)->str
faker.providers.address.en_PH.__init__.Provider.ordinal_floor_number(self)->str
faker.providers.address.en_PH.__init__.Provider.ordinal_street_number(self)->str
faker.providers.address.en_PH.__init__.Provider.partitioned_building_number(self)->str
faker.providers.address.en_PH.__init__.Provider.postcode(self)->str
faker.providers.address.en_PH.__init__.Provider.province_lgu(self)->str
faker.providers.address.en_PH.__init__.Provider.standalone_building_number(self)->str
faker.providers.address.en_PH.__init__.Provider.subdivision_block_number(self)->str
faker.providers.address.en_PH.__init__.Provider.subdivision_lot_number(self)->str
faker.providers.address.en_PH.__init__.Provider.subdivision_name(self)->str
faker.providers.address.en_PH.__init__.Provider.subdivision_name_suffix(self)->str
faker.providers.address.en_PH.__init__.Provider.subdivision_unit_number(self)->str
faker.providers.address.en_PH.__init__.Provider.visayas_province(self)->str
faker.providers.address.en_PH.__init__.Provider.visayas_province_address(self)->str
faker.providers.address.en_PH.__init__.Provider.visayas_province_postcode(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/de_AT/__init__.py----------------------------------------
faker.providers.address.de_AT.__init__.Provider(AddressProvider)
faker.providers.address.de_AT.__init__.Provider.administrative_unit(self)->str
faker.providers.address.de_AT.__init__.Provider.city_name(self)->str
faker.providers.address.de_AT.__init__.Provider.city_with_postcode(self)->str
faker.providers.address.de_AT.__init__.Provider.street_suffix_long(self)->str
faker.providers.address.de_AT.__init__.Provider.street_suffix_short(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/en_IE/__init__.py----------------------------------------
A:faker.providers.address.en_IE.__init__._postcode_sets->OrderedDict(((' ', [' ', '']), ('N', [str(i) for i in range(0, 10)]), ('L', 'ACDEFHKNPRTVWXY'), ('A', 'ACDEFHKNPRTVWXY0123456789')))
faker.providers.address.en_IE.__init__.Provider(AddressProvider)
faker.providers.address.en_IE.__init__.Provider.administrative_unit(self)->str
faker.providers.address.en_IE.__init__.Provider.postcode(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/en_MS/__init__.py----------------------------------------
A:faker.providers.address.en_MS.__init__.postcode->self.postcode_in_state(state)
A:faker.providers.address.en_MS.__init__.city->self.city()
A:faker.providers.address.en_MS.__init__.address_formats->OrderedDict((('{{street_address}}, {{city}}, {{city_state}}', 100.0),))
A:faker.providers.address.en_MS.__init__.state_abbr->self.random_element(self.states.keys())
A:faker.providers.address.en_MS.__init__.range->self.generator.random.choice(self.states_postcode[state_abbr])
A:faker.providers.address.en_MS.__init__.current_postcode_len->len(postcode)
faker.providers.address.en_MS.__init__.Provider(AddressProvider)
faker.providers.address.en_MS.__init__.Provider.administrative_unit(self)->str
faker.providers.address.en_MS.__init__.Provider.building_number(self)->str
faker.providers.address.en_MS.__init__.Provider.building_prefix(self)->str
faker.providers.address.en_MS.__init__.Provider.city(self)->str
faker.providers.address.en_MS.__init__.Provider.city_prefix(self)->str
faker.providers.address.en_MS.__init__.Provider.city_prefix_abbr(self)->str
faker.providers.address.en_MS.__init__.Provider.city_state(self)->str
faker.providers.address.en_MS.__init__.Provider.postcode(self)->str
faker.providers.address.en_MS.__init__.Provider.postcode_in_state(self,state_abbr:Optional[str]=None)->str
faker.providers.address.en_MS.__init__.Provider.street_name(self)->str
faker.providers.address.en_MS.__init__.Provider.street_prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/th/__init__.py----------------------------------------
faker.providers.address.th.__init__.Provider(AddressProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/fi_FI/__init__.py----------------------------------------
faker.providers.address.fi_FI.__init__.Provider(AddressProvider)
faker.providers.address.fi_FI.__init__.Provider.administrative_unit(self)->str
faker.providers.address.fi_FI.__init__.Provider.city_name(self)->str
faker.providers.address.fi_FI.__init__.Provider.street_prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/es_AR/__init__.py----------------------------------------
A:faker.providers.address.es_AR.__init__.street_prefixes->OrderedDict([('Calle', 0.2), ('Avenida', 0.2), ('Av.', 0.2), ('Diagonal', 0.2), ('Diag.', 0.05), ('Camino', 0.05), ('Boulevard', 0.05), ('Blv.', 0.05)])
A:faker.providers.address.es_AR.__init__.street_name_formats->OrderedDict([('{{street_prefix}} %', 0.2), ('{{street_prefix}} {{street_municipality}}', 0.2), ('{{street_prefix}} {{street_province}}', 0.2), ('{{street_prefix}} {{street_procer}}', 0.2), ('{{street_prefix}} 1## {{street_suffix}}', 0.02)])
A:faker.providers.address.es_AR.__init__.building_number_formats->OrderedDict([('%%', 0.2), ('%%#', 0.2), ('%#%', 0.2), ('%#%#', 0.2)])
faker.providers.address.es_AR.__init__.Provider(AddressProvider)
faker.providers.address.es_AR.__init__.Provider.address(self)->str
faker.providers.address.es_AR.__init__.Provider.building_number(self)->str
faker.providers.address.es_AR.__init__.Provider.municipality(self)->str
faker.providers.address.es_AR.__init__.Provider.municipality_code(self)->str
faker.providers.address.es_AR.__init__.Provider.postcode(self)->str
faker.providers.address.es_AR.__init__.Provider.province(self)->str
faker.providers.address.es_AR.__init__.Provider.provinces_code(self)->str
faker.providers.address.es_AR.__init__.Provider.secondary_address(self)->str
faker.providers.address.es_AR.__init__.Provider.street_address(self)->str
faker.providers.address.es_AR.__init__.Provider.street_municipality(self)->str
faker.providers.address.es_AR.__init__.Provider.street_name(self)->str
faker.providers.address.es_AR.__init__.Provider.street_prefix(self)->str
faker.providers.address.es_AR.__init__.Provider.street_procer(self)->str
faker.providers.address.es_AR.__init__.Provider.street_province(self)->str
faker.providers.address.es_AR.__init__.Provider.street_suffix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/fr_FR/__init__.py----------------------------------------
A:faker.providers.address.fr_FR.__init__.department->self.department_number()
faker.providers.address.fr_FR.__init__.Provider(AddressProvider)
faker.providers.address.fr_FR.__init__.Provider.administrative_unit(self)->str
faker.providers.address.fr_FR.__init__.Provider.city_prefix(self)->str
faker.providers.address.fr_FR.__init__.Provider.department(self)->Tuple[str, str]
faker.providers.address.fr_FR.__init__.Provider.department_name(self)->str
faker.providers.address.fr_FR.__init__.Provider.department_number(self)->str
faker.providers.address.fr_FR.__init__.Provider.postcode(self)->str
faker.providers.address.fr_FR.__init__.Provider.street_prefix(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/en_GB/__init__.py----------------------------------------
A:faker.providers.address.en_GB.__init__._postcode_sets->OrderedDict(((' ', ' '), ('N', [str(i) for i in range(0, 10)]), ('A', POSTAL_ZONES_ONE_CHAR), ('B', 'ABCDEFGHKLMNOPQRSTUVWXY'), ('C', 'ABCDEFGHJKSTUW'), ('D', 'ABEHMNPRVWXY'), ('E', 'ABDEFGHJLNPQRSTUWXYZ'), ('P', POSTAL_ZONES_TWO_CHARS)))
faker.providers.address.en_GB.__init__.Provider(AddressProvider)
faker.providers.address.en_GB.__init__.Provider.administrative_unit(self)->str
faker.providers.address.en_GB.__init__.Provider.city_prefix(self)->str
faker.providers.address.en_GB.__init__.Provider.postcode(self)->str
faker.providers.address.en_GB.__init__.Provider.secondary_address(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/bn_BD/__init__.py----------------------------------------
A:faker.providers.address.bn_BD.__init__.value->self.bothify(self.random_element(self.secondary_address_formats))
A:faker.providers.address.bn_BD.__init__.word_list->self.bothify(self.random_element(self.secondary_address_formats)).split(' ')
faker.providers.address.bn_BD.__init__.Provider(AddressProvider)
faker.providers.address.bn_BD.__init__.Provider.administrative_unit(self)->str
faker.providers.address.bn_BD.__init__.Provider.area_name(self)->str
faker.providers.address.bn_BD.__init__.Provider.building_name(self)->str
faker.providers.address.bn_BD.__init__.Provider.building_number(self)->str
faker.providers.address.bn_BD.__init__.Provider.city(self)->str
faker.providers.address.bn_BD.__init__.Provider.city_prefix(self)->str
faker.providers.address.bn_BD.__init__.Provider.postcode(self)->str
faker.providers.address.bn_BD.__init__.Provider.secondary_address(self)->str
faker.providers.address.bn_BD.__init__.Provider.town(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/ta_IN/__init__.py----------------------------------------
faker.providers.address.ta_IN.__init__.Provider(AddressProvider)
faker.providers.address.ta_IN.__init__.Provider.administrative_unit(self)->str
faker.providers.address.ta_IN.__init__.Provider.city_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/ja_JP/__init__.py----------------------------------------
faker.providers.address.ja_JP.__init__.Provider(AddressProvider)
faker.providers.address.ja_JP.__init__.Provider.administrative_unit(self)->str
faker.providers.address.ja_JP.__init__.Provider.ban(self)->str
faker.providers.address.ja_JP.__init__.Provider.building_name(self)->str
faker.providers.address.ja_JP.__init__.Provider.chome(self)->str
faker.providers.address.ja_JP.__init__.Provider.city(self)->str
faker.providers.address.ja_JP.__init__.Provider.gou(self)->str
faker.providers.address.ja_JP.__init__.Provider.postcode(self)->str
faker.providers.address.ja_JP.__init__.Provider.town(self)->str
faker.providers.address.ja_JP.__init__.Provider.zipcode(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/fil_PH/__init__.py----------------------------------------
faker.providers.address.fil_PH.__init__.Provider(EnPhAddressProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/he_IL/__init__.py----------------------------------------
faker.providers.address.he_IL.__init__.Provider(AddressProvider)
faker.providers.address.he_IL.__init__.Provider.city_name(self)->str
faker.providers.address.he_IL.__init__.Provider.street_title(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/address/nl_BE/__init__.py----------------------------------------
faker.providers.address.nl_BE.__init__.Provider(AddressProvider)
faker.providers.address.nl_BE.__init__.Provider.administrative_unit(self)->str
faker.providers.address.nl_BE.__init__.Provider.city(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/__init__.py----------------------------------------
A:faker.providers.lorem.__init__.word_list->self.get_words_list(ext_word_list=ext_word_list)
A:faker.providers.lorem.__init__.unique_samples->cast(List[str], self.random_sample(word_list, length=nb))
A:faker.providers.lorem.__init__.samples->cast(List[str], self.random_choices(word_list, length=nb))
A:faker.providers.lorem.__init__.nb_words->self.randomize_nb_elements(nb_words, min=1)
A:faker.providers.lorem.__init__.words->list(self.words(nb=nb_words, ext_word_list=word_list))
A:faker.providers.lorem.__init__.words[0]->words[0].title().title()
A:faker.providers.lorem.__init__.nb_sentences->self.randomize_nb_elements(nb_sentences, min=1)
A:faker.providers.lorem.__init__.para->self.word_connector.join(self.sentences(nb_sentences, ext_word_list=ext_word_list))
faker.providers.lorem.__init__.Provider(BaseProvider)
faker.providers.lorem.__init__.Provider.get_words_list(self,part_of_speech:Optional[str]=None,ext_word_list:Optional[Sequence[str]]=None)->List[str]
faker.providers.lorem.__init__.Provider.paragraph(self,nb_sentences:int=3,variable_nb_sentences:bool=True,ext_word_list:Optional[Sequence[str]]=None)->str
faker.providers.lorem.__init__.Provider.paragraphs(self,nb:int=3,ext_word_list:Optional[Sequence[str]]=None)->List[str]
faker.providers.lorem.__init__.Provider.sentence(self,nb_words:int=6,variable_nb_words:bool=True,ext_word_list:Optional[Sequence[str]]=None)->str
faker.providers.lorem.__init__.Provider.sentences(self,nb:int=3,ext_word_list:Optional[Sequence[str]]=None)->List[str]
faker.providers.lorem.__init__.Provider.text(self,max_nb_chars:int=200,ext_word_list:Optional[Sequence[str]]=None)->str
faker.providers.lorem.__init__.Provider.texts(self,nb_texts:int=3,max_nb_chars:int=200,ext_word_list:Optional[Sequence[str]]=None)->List[str]
faker.providers.lorem.__init__.Provider.word(self,part_of_speech:Optional[str]=None,ext_word_list:Optional[Sequence[str]]=None)->str
faker.providers.lorem.__init__.Provider.words(self,nb:int=3,ext_word_list:Optional[List[str]]=None,part_of_speech:Optional[str]=None,unique:bool=False)->List[str]


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/it_IT/__init__.py----------------------------------------
faker.providers.lorem.it_IT.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/ru_RU/__init__.py----------------------------------------
faker.providers.lorem.ru_RU.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/zh_TW/__init__.py----------------------------------------
faker.providers.lorem.zh_TW.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/az_AZ/__init__.py----------------------------------------
faker.providers.lorem.az_AZ.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/hy_AM/__init__.py----------------------------------------
faker.providers.lorem.hy_AM.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/cs_CZ/__init__.py----------------------------------------
faker.providers.lorem.cs_CZ.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/pl_PL/__init__.py----------------------------------------
faker.providers.lorem.pl_PL.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/da_DK/__init__.py----------------------------------------
faker.providers.lorem.da_DK.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/zh_CN/__init__.py----------------------------------------
faker.providers.lorem.zh_CN.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/nl_NL/__init__.py----------------------------------------
faker.providers.lorem.nl_NL.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/tl_PH/__init__.py----------------------------------------
faker.providers.lorem.tl_PH.__init__.Provider(FilPhProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/th_TH/__init__.py----------------------------------------
faker.providers.lorem.th_TH.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/de_DE/__init__.py----------------------------------------
faker.providers.lorem.de_DE.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/en_US/__init__.py----------------------------------------
faker.providers.lorem.en_US.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/ar_AA/__init__.py----------------------------------------
faker.providers.lorem.ar_AA.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/la/__init__.py----------------------------------------
faker.providers.lorem.la.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/uk_UA/__init__.py----------------------------------------
faker.providers.lorem.uk_UA.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/el_GR/__init__.py----------------------------------------
faker.providers.lorem.el_GR.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/fa_IR/__init__.py----------------------------------------
faker.providers.lorem.fa_IR.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/vi_VN/__init__.py----------------------------------------
faker.providers.lorem.vi_VN.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/en_PH/__init__.py----------------------------------------
A:faker.providers.lorem.en_PH.__init__.word_list->self.generator.get_words_list(ext_word_list=self.english_word_list)
faker.providers.lorem.en_PH.__init__.Provider(LoremProvider)
faker.providers.lorem.en_PH.__init__.Provider.english_paragraph(self,nb_sentences:int=3,variable_nb_sentences:bool=True)->str
faker.providers.lorem.en_PH.__init__.Provider.english_paragraphs(self,nb:int=3)->List[str]
faker.providers.lorem.en_PH.__init__.Provider.english_sentence(self,nb_words:int=6,variable_nb_words:bool=True)->str
faker.providers.lorem.en_PH.__init__.Provider.english_sentences(self,nb:int=3)->List[str]
faker.providers.lorem.en_PH.__init__.Provider.english_text(self,max_nb_chars:int=200)->str
faker.providers.lorem.en_PH.__init__.Provider.english_texts(self,nb_texts:int=3,max_nb_chars:int=200)->List[str]
faker.providers.lorem.en_PH.__init__.Provider.english_word(self)->str
faker.providers.lorem.en_PH.__init__.Provider.english_words(self,nb:int=3,unique:bool=False)->List[str]


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/de_AT/__init__.py----------------------------------------
faker.providers.lorem.de_AT.__init__.Provider(GermanProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/fr_FR/__init__.py----------------------------------------
faker.providers.lorem.fr_FR.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/bn_BD/__init__.py----------------------------------------
faker.providers.lorem.bn_BD.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/ja_JP/__init__.py----------------------------------------
faker.providers.lorem.ja_JP.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/fil_PH/__init__.py----------------------------------------
faker.providers.lorem.fil_PH.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/he_IL/__init__.py----------------------------------------
faker.providers.lorem.he_IL.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/lorem/nl_BE/__init__.py----------------------------------------
faker.providers.lorem.nl_BE.__init__.Provider(LoremProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/emoji/__init__.py----------------------------------------
faker.providers.emoji.__init__.Provider(BaseProvider)
faker.providers.emoji.__init__.Provider.emoji(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/emoji/en_US/__init__.py----------------------------------------
faker.providers.emoji.en_US.__init__.Provider(EmojiProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/passport/__init__.py----------------------------------------
A:faker.providers.passport.__init__.birthday->self.generator.date_of_birth()
A:faker.providers.passport.__init__.given_name->self.generator.parse('{{first_name_nonbinary}}')
A:faker.providers.passport.__init__.surname->self.generator.parse('{{last_name}}')
A:faker.providers.passport.__init__.temp->re.sub('\\?', lambda x: self.random_element(ascii_uppercase), self.random_element(self.passport_number_formats))
faker.providers.passport.__init__.Provider(BaseProvider)
faker.providers.passport.__init__.Provider.passport_dob(self)->datetime.date
faker.providers.passport.__init__.Provider.passport_number(self)->str
faker.providers.passport.__init__.Provider.passport_owner(self,gender:str='X')->Tuple[str, str]


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/passport/en_US/__init__.py----------------------------------------
A:faker.providers.passport.en_US.__init__.today->datetime.date.today()
A:faker.providers.passport.en_US.__init__.issue_date->self.generator.date_time_between(today - timedelta(days=expiry_years * 365 - 1), today)
A:faker.providers.passport.en_US.__init__.expiry_date->self.generator.date_time_between(today - timedelta(days=expiry_years * 365 - 1), today).replace(year=issue_date.year + expiry_years)
A:faker.providers.passport.en_US.__init__.dob->self.passport_dob()
A:faker.providers.passport.en_US.__init__.(birth_date, issue_date, expiry_date)->self.passport_dates(dob)
A:faker.providers.passport.en_US.__init__.gender_g->self.passport_gender()
A:faker.providers.passport.en_US.__init__.(given_name, surname)->self.passport_owner(gender=gender_g)
A:faker.providers.passport.en_US.__init__.number->self.passport_number()
A:faker.providers.passport.en_US.__init__.full_rep->full_rep.format(first_name=given_name, second_name=surname, gender=gender_g, dob=birth_date, issue=issue_date, expire=expiry_date, num=number).format(first_name=given_name, second_name=surname, gender=gender_g, dob=birth_date, issue=issue_date, expire=expiry_date, num=number)
faker.providers.passport.en_US.__init__.Provider(PassportProvider)
faker.providers.passport.en_US.__init__.Provider.passport_dates(self,birthday:date=date.today())->Tuple[str, str, str]
faker.providers.passport.en_US.__init__.Provider.passport_full(self)->str
faker.providers.passport.en_US.__init__.Provider.passport_gender(self,seed:int=0)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/file/__init__.py----------------------------------------
A:faker.providers.file.__init__.extension->self.random_element(extension)
A:faker.providers.file.__init__.category->self.random_element(list(self.file_extensions.keys()))
A:faker.providers.file.__init__.fs_rule->self.file_systems_path_rules.get(file_system_rule, None)
A:faker.providers.file.__init__.prefix->self.random_element(self.unix_device_prefixes)
faker.providers.file.__init__.Provider(BaseProvider)
faker.providers.file.__init__.Provider.file_extension(self,category:Optional[str]=None)->str
faker.providers.file.__init__.Provider.file_name(self,category:Optional[str]=None,extension:Optional[str]=None)->str
faker.providers.file.__init__.Provider.file_path(self,depth:int=1,category:Optional[str]=None,extension:Optional[Union[str,Sequence[str]]]=None,absolute:Optional[bool]=True,file_system_rule:Literal['linux','windows']='linux')->str
faker.providers.file.__init__.Provider.mime_type(self,category:Optional[str]=None)->str
faker.providers.file.__init__.Provider.unix_device(self,prefix:Optional[str]=None)->str
faker.providers.file.__init__.Provider.unix_partition(self,prefix:Optional[str]=None)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/file/en_US/__init__.py----------------------------------------
faker.providers.file.en_US.__init__.Provider(FileProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/profile/__init__.py----------------------------------------
A:faker.providers.profile.__init__.name->self.generator.name_male()
A:faker.providers.profile.__init__.d->dict(d, **self.generator.simple_profile(sex))
faker.providers.profile.__init__.Provider(BaseProvider)
faker.providers.profile.__init__.Provider.profile(self,fields:Optional[List[str]]=None,sex:Optional[SexLiteral]=None)->Dict[str, Union[str, Tuple[Decimal, Decimal], List[str], date]]
faker.providers.profile.__init__.Provider.simple_profile(self,sex:Optional[SexLiteral]=None)->Dict[str, Union[str, date, SexLiteral]]


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/profile/en_US/__init__.py----------------------------------------
faker.providers.profile.en_US.__init__.Provider(ProfileProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/misc/__init__.py----------------------------------------
A:faker.providers.misc.__init__.zip_buffer->io.BytesIO()
A:faker.providers.misc.__init__.file_size->self.generator.random.randint(min_file_size, max_allowed_size)
A:faker.providers.misc.__init__.data->self.generator.binary(file_size)
A:faker.providers.misc.__init__.tar_buffer->io.BytesIO()
A:faker.providers.misc.__init__.file_buffer->io.BytesIO()
A:faker.providers.misc.__init__.tarinfo->tarfile.TarInfo(name=filename)
A:faker.providers.misc.__init__.tarinfo.size->len(file_buffer.getvalue())
A:faker.providers.misc.__init__.image->PIL.Image.new('RGB', size, self.generator.color(hue=hue, luminosity=luminosity))
A:faker.providers.misc.__init__.draw->PIL.ImageDraw.Draw(image)
A:faker.providers.misc.__init__.dsv_buffer->io.StringIO()
A:faker.providers.misc.__init__.writer->csv.writer(dsv_buffer, dialect=dialect, **fmtparams)
A:faker.providers.misc.__init__.header->list(header)
A:faker.providers.misc.__init__.entry[name]->self._value_format_selection(definition)
A:faker.providers.misc.__init__._dict->self.generator.pydict(nb_elements=nb_elements, variable_nb_elements=variable_nb_elements, value_types=value_types, allowed_types=allowed_types)
A:faker.providers.misc.__init__.result->self._value_format_selection(definition, **kwargs)
A:faker.providers.misc.__init__.(definition, argument_group)->definition.split(':')
A:faker.providers.misc.__init__.arguments->self.generator.get_arguments(argument_group.strip())
faker.providers.misc.__init__.Provider(BaseProvider)
faker.providers.misc.__init__.Provider._value_format_selection(self,definition:str,**kwargs:Any)->Union[int, str]
faker.providers.misc.__init__.Provider.binary(self,length:int=1*1024*1024)->bytes
faker.providers.misc.__init__.Provider.boolean(self,chance_of_getting_true:int=50)->bool
faker.providers.misc.__init__.Provider.csv(self,header:Optional[Sequence[str]]=None,data_columns:Tuple[str,str]=('{{name}}','{{address}}'),num_rows:int=10,include_row_ids:bool=False)->str
faker.providers.misc.__init__.Provider.dsv(self,dialect:str='faker-csv',header:Optional[Sequence[str]]=None,data_columns:Tuple[str,str]=('{{name}}','{{address}}'),num_rows:int=10,include_row_ids:bool=False,**fmtparams:Any)->str
faker.providers.misc.__init__.Provider.fixed_width(self,data_columns:Optional[list]=None,num_rows:int=10,align:str='left')->str
faker.providers.misc.__init__.Provider.image(self,size:Tuple[int,int]=(256,256),image_format:str='png',hue:Optional[Union[int,Sequence[int],str]]=None,luminosity:Optional[str]=None)->bytes
faker.providers.misc.__init__.Provider.json(self,data_columns:Optional[List]=None,num_rows:int=10,indent:Optional[int]=None,cls:Optional[Type[json.JSONEncoder]]=None)->str
faker.providers.misc.__init__.Provider.json_bytes(self,data_columns:Optional[List]=None,num_rows:int=10,indent:Optional[int]=None,cls:Optional[Type[json.JSONEncoder]]=None)->bytes
faker.providers.misc.__init__.Provider.md5(self,raw_output:bool=False)->Union[bytes, str]
faker.providers.misc.__init__.Provider.null_boolean(self)->Optional[bool]
faker.providers.misc.__init__.Provider.password(self,length:int=10,special_chars:bool=True,digits:bool=True,upper_case:bool=True,lower_case:bool=True)->str
faker.providers.misc.__init__.Provider.psv(self,header:Optional[Sequence[str]]=None,data_columns:Tuple[str,str]=('{{name}}','{{address}}'),num_rows:int=10,include_row_ids:bool=False)->str
faker.providers.misc.__init__.Provider.sha1(self,raw_output:bool=False)->Union[bytes, str]
faker.providers.misc.__init__.Provider.sha256(self,raw_output:bool=False)->Union[bytes, str]
faker.providers.misc.__init__.Provider.tar(self,uncompressed_size:int=65536,num_files:int=1,min_file_size:int=4096,compression:Optional[str]=None)->bytes
faker.providers.misc.__init__.Provider.tsv(self,header:Optional[Sequence[str]]=None,data_columns:Tuple[str,str]=('{{name}}','{{address}}'),num_rows:int=10,include_row_ids:bool=False)->str
faker.providers.misc.__init__.Provider.uuid4(self,cast_to:Optional[Union[Callable[[uuid.UUID],str],Callable[[uuid.UUID],bytes]]]=str)->Union[bytes, str, uuid.UUID]
faker.providers.misc.__init__.Provider.xml(self,nb_elements:int=10,variable_nb_elements:bool=True,value_types:Optional[TypesSpec]=None,allowed_types:Optional[TypesSpec]=None)->str
faker.providers.misc.__init__.Provider.zip(self,uncompressed_size:int=65536,num_files:int=1,min_file_size:int=4096,compression:Optional[str]=None)->bytes


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/misc/tl_PH/__init__.py----------------------------------------
faker.providers.misc.tl_PH.__init__.Provider(EnPhMiscProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/misc/en_US/__init__.py----------------------------------------
faker.providers.misc.en_US.__init__.Provider(MiscProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/misc/en_PH/__init__.py----------------------------------------
faker.providers.misc.en_PH.__init__.Provider(MiscProvider)
faker.providers.misc.en_PH.__init__.Provider.gemstone_name(self)->str
faker.providers.misc.en_PH.__init__.Provider.mountain_name(self)->str
faker.providers.misc.en_PH.__init__.Provider.plant_name(self)->str
faker.providers.misc.en_PH.__init__.Provider.random_object_name(self)->str
faker.providers.misc.en_PH.__init__.Provider.space_object_name(self)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/providers/misc/fil_PH/__init__.py----------------------------------------
faker.providers.misc.fil_PH.__init__.Provider(EnPhMiscProvider)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/sphinx/documentor.py----------------------------------------
A:faker.sphinx.documentor.(provider_module_name, obj_name)->provider_class.rsplit('.', 1)
A:faker.sphinx.documentor.provider_module->importlib.import_module(provider_module_name)
A:faker.sphinx.documentor.provider->getattr(locale_module, 'Provider')
A:faker.sphinx.documentor.locale_module->importlib.import_module(locale_module_path)
A:faker.sphinx.documentor.provider_methods->_get_provider_methods(provider_class)
A:faker.sphinx.documentor.info->_get_localized_provider_info(locale)
faker.sphinx.documentor._get_localized_provider_info(locale)
faker.sphinx.documentor._get_provider_methods(provider_class)
faker.sphinx.documentor._hide_edit_on_github(fh)
faker.sphinx.documentor._write(fh,s)
faker.sphinx.documentor._write_base_provider_docs()
faker.sphinx.documentor._write_includes(fh)
faker.sphinx.documentor._write_localized_provider_docs()
faker.sphinx.documentor._write_localized_provider_index()
faker.sphinx.documentor._write_standard_provider_docs()
faker.sphinx.documentor._write_standard_provider_index()
faker.sphinx.documentor._write_title(fh,title,level=1)
faker.sphinx.documentor.write_provider_docs()


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/sphinx/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/sphinx/autodoc.py----------------------------------------
A:faker.sphinx.autodoc.docstring->ProviderMethodDocstring(app, what, name, obj, options, lines)
faker.sphinx.autodoc._create_source_files(app)
faker.sphinx.autodoc._process_docstring(app,what,name,obj,options,lines)
faker.sphinx.autodoc.setup(app)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/sphinx/docstring.py----------------------------------------
A:faker.sphinx.docstring.logger->logging.getLogger(__name__)
A:faker.sphinx.docstring._fake->Faker(AVAILABLE_LOCALES)
A:faker.sphinx.docstring.Sample->namedtuple('Sample', ['size', 'seed', 'kwargs'])
A:faker.sphinx.docstring.self._line_iter->iter(lines)
A:faker.sphinx.docstring.base_provider_method_match->_base_provider_method_pattern.match(name)
A:faker.sphinx.docstring.locale_provider_method_match->_locale_provider_method_pattern.match(name)
A:faker.sphinx.docstring.standard_provider_method_match->_standard_provider_method_pattern.match(name)
A:faker.sphinx.docstring.groupdict->_sample_line_pattern.match(section).groupdict()
A:faker.sphinx.docstring.line->next(self._line_iter)
A:faker.sphinx.docstring.next_line->next(self._line_iter)
A:faker.sphinx.docstring.match->_sample_line_pattern.match(section)
A:faker.sphinx.docstring.size->_sample_line_pattern.match(section).groupdict().get('size')
A:faker.sphinx.docstring.seed->_sample_line_pattern.match(section).groupdict().get('seed')
A:faker.sphinx.docstring.kwargs->_sample_line_pattern.match(section).groupdict().get('kwargs')
A:faker.sphinx.docstring.sample->Sample(size, seed, kwargs)
A:faker.sphinx.docstring.result->re.sub('("[^"]*")|(\\\'[^\\\']*\\\')|,', _repl_comma, result)
A:faker.sphinx.docstring.default_sample->Sample(DEFAULT_SAMPLE_SIZE, DEFAULT_SEED, '')
A:faker.sphinx.docstring.eval_scope->self._generate_eval_scope()
A:faker.sphinx.docstring.command->_command_template.format(method=self._method, kwargs=sample.kwargs)
A:faker.sphinx.docstring.validator->SampleCodeValidator(command)
A:faker.sphinx.docstring.results->'\n'.join([self._stringify_result(eval(command, eval_scope)) for _ in range(sample.size)])
faker.sphinx.docstring.ProviderMethodDocstring(self,app,what,name,obj,options,lines)
faker.sphinx.docstring.ProviderMethodDocstring.__init__(self,app,what,name,obj,options,lines)
faker.sphinx.docstring.ProviderMethodDocstring._beautify_kwargs(self,kwargs)
faker.sphinx.docstring.ProviderMethodDocstring._generate_eval_scope(self)
faker.sphinx.docstring.ProviderMethodDocstring._generate_samples(self)
faker.sphinx.docstring.ProviderMethodDocstring._inject_default_sample_section(self)
faker.sphinx.docstring.ProviderMethodDocstring._log_warning(self,warning)
faker.sphinx.docstring.ProviderMethodDocstring._parse(self)
faker.sphinx.docstring.ProviderMethodDocstring._parse_section(self,section)
faker.sphinx.docstring.ProviderMethodDocstring._process_sample_section(self,section)
faker.sphinx.docstring.ProviderMethodDocstring._stringify_result(self,value)
faker.sphinx.docstring.ProviderMethodDocstring.lines(self)
faker.sphinx.docstring.ProviderMethodDocstring.skipped(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/sphinx/validator.py----------------------------------------
A:faker.sphinx.validator.self._errors->set()
A:faker.sphinx.validator.self._tree->ast.parse(command, mode='eval')
A:faker.sphinx.validator.is_valid->self._is_node_using_ordereddict(node.func)
faker.sphinx.validator.SampleCodeValidator(self,command)
faker.sphinx.validator.SampleCodeValidator.__init__(self,command)
faker.sphinx.validator.SampleCodeValidator._is_node_using_ordereddict(self,node)
faker.sphinx.validator.SampleCodeValidator._is_whitelisted(self,node)
faker.sphinx.validator.SampleCodeValidator._log_error(self,msg)
faker.sphinx.validator.SampleCodeValidator._validate(self)
faker.sphinx.validator.SampleCodeValidator.errors(self)
faker.sphinx.validator.SampleCodeValidator.visit(self,node)
faker.sphinx.validator.SampleCodeValidator.visit_Attribute(self,node)
faker.sphinx.validator.SampleCodeValidator.visit_Call(self,node)
faker.sphinx.validator.SampleCodeValidator.visit_Name(self,node)


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/utils/decorators.py----------------------------------------
A:faker.utils.decorators.T->TypeVar('T')
faker.utils.decorators.lowercase(fn:Callable)->Callable
faker.utils.decorators.slugify(fn:Callable)->Callable
faker.utils.decorators.slugify_domain(fn:Callable)->Callable
faker.utils.decorators.slugify_unicode(fn:Callable)->Callable


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/utils/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/utils/text.py----------------------------------------
A:faker.utils.text.value->pattern.sub('', value).strip().lower()
faker.utils.text.slugify(value:str,allow_dots:bool=False,allow_unicode:bool=False)->str


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/utils/distribution.py----------------------------------------
A:faker.utils.distribution.T->TypeVar('T')
A:faker.utils.distribution.items->list(a)
A:faker.utils.distribution.probabilities->list(p)
A:faker.utils.distribution.cdf->list(cumsum(p))
A:faker.utils.distribution.uniform_sample->random_sample(random=random)
A:faker.utils.distribution.idx->bisect.bisect_right(cdf2, uniform_sample)
A:faker.utils.distribution.p->itertools.repeat(1, len(a))
faker.utils.distribution.choices_distribution(a:Sequence[T],p:Optional[Sequence[float]],random:Optional[Random]=None,length:int=1)->Sequence[T]
faker.utils.distribution.choices_distribution_unique(a:Sequence[T],p:Optional[Sequence[float]],random:Optional[Random]=None,length:int=1)->Sequence[T]
faker.utils.distribution.cumsum(it:Iterable[float])->Generator[float, None, None]
faker.utils.distribution.random_sample(random:Optional[Random]=None)->float


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/utils/loading.py----------------------------------------
A:faker.utils.loading.lib_dir->Path(getattr(sys, '_MEIPASS'))
A:faker.utils.loading.path->get_path(module)
A:faker.utils.loading.available_locales->set()
A:faker.utils.loading.provider_module->import_module(provider_path)
A:faker.utils.loading.langs->list_module(provider_module)
A:faker.utils.loading.available_providers->set()
faker.utils.loading.find_available_locales(providers:List[str])->List[str]
faker.utils.loading.find_available_providers(modules:List[ModuleType])->List[str]
faker.utils.loading.get_path(module:ModuleType)->str
faker.utils.loading.list_module(module:ModuleType)->List[str]


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/utils/checksums.py----------------------------------------
A:faker.utils.checksums.digits->digits_of(number)
A:faker.utils.checksums.check_digit->luhn_checksum(int(partial_number) * 10)
faker.utils.checksums.calculate_luhn(partial_number:float)->int
faker.utils.checksums.luhn_checksum(number:float)->int


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/utils/datasets.py----------------------------------------
faker.utils.datasets.add_ordereddicts(*odicts:OrderedDictType)->OrderedDictType


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/contrib/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/contrib/pytest/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/faker28.4.1/lib/python3.9/site-packages/faker/contrib/pytest/plugin.py----------------------------------------
A:faker.contrib.pytest.plugin.locale->request.getfixturevalue('faker_locale')
A:faker.contrib.pytest.plugin.fake->request.getfixturevalue('_session_faker')
A:faker.contrib.pytest.plugin.seed->request.getfixturevalue('faker_seed')
faker.contrib.pytest.plugin._session_faker(request)
faker.contrib.pytest.plugin.faker(request)

