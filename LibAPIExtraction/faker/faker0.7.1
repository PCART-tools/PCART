
----------------------------------------/home/zhang/Packages/faker/faker0.7.1/generator.py----------------------------------------
A:faker.generator._re_token->re.compile('\\{\\{(\\s?)(\\w+)(\\s?)\\}\\}')
A:faker.generator.random->random.Random().Random()
A:faker.generator.self.__config->dict(list(self.__config.items()) + list(config.items()))
A:faker.generator.provider->provider(self)
A:faker.generator.faker_function->getattr(provider, method_name)
A:faker.generator.formatter->list(matches.groups())
A:faker.generator.formatter[1]->self.format(formatter[1])
faker.Generator(self,**config)
faker.Generator.__format_token(self,matches)
faker.Generator.add_provider(self,provider)
faker.Generator.format(self,formatter,*args,**kwargs)
faker.Generator.get_formatter(self,formatter)
faker.Generator.get_providers(self)
faker.Generator.parse(self,text)
faker.Generator.provider(self,name)
faker.Generator.random(self)
faker.Generator.seed(self,seed=None)
faker.Generator.set_formatter(self,name,method)
faker.generator.Generator(self,**config)
faker.generator.Generator.__format_token(self,matches)
faker.generator.Generator.__init__(self,**config)
faker.generator.Generator.add_provider(self,provider)
faker.generator.Generator.format(self,formatter,*args,**kwargs)
faker.generator.Generator.get_formatter(self,formatter)
faker.generator.Generator.get_providers(self)
faker.generator.Generator.parse(self,text)
faker.generator.Generator.provider(self,name)
faker.generator.Generator.random(self)
faker.generator.Generator.seed(self,seed=None)
faker.generator.Generator.set_formatter(self,name,method)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/factory.py----------------------------------------
A:faker.factory.msg->'Unable to find provider "{0}" with locale "{1}"'.format(provider, locale)
A:faker.factory.(prov_cls, lang_found)->cls._get_provider_class(prov_name, locale)
A:faker.factory.provider->prov_cls(faker)
A:faker.factory.provider_class->cls._find_provider_class(provider)
A:faker.factory.provider_module->import_module(provider_path)
A:faker.factory.available_locales->list_module(provider_module)
A:faker.factory.locale->getattr(provider_module, 'default_locale', DEFAULT_LOCALE)
A:faker.factory.path->'{provider_path}.{locale}'.format(provider_path=provider_path, locale=locale)
faker.Factory(object)
faker.Factory._find_provider_class(cls,provider_path,locale=None)
faker.Factory._get_provider_class(cls,provider,locale='')
faker.Factory.create(cls,locale=None,providers=None,generator=None,includes=None,**config)
faker.factory.Factory(object)
faker.factory.Factory._find_provider_class(cls,provider_path,locale=None)
faker.factory.Factory._get_provider_class(cls,provider,locale='')
faker.factory.Factory.create(cls,locale=None,providers=None,generator=None,includes=None,**config)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/build_docs.py----------------------------------------
A:faker.build_docs.DOCS_ROOT->os.path.abspath(os.path.join('..', 'docs'))
A:faker.build_docs.title->'Language {0}\n'.format(lang)
A:faker.build_docs.example->pprint.pformat(example, indent=4)
A:faker.build_docs.lines->text_type(example).expandtabs().splitlines()
A:faker.build_docs.msg->'error on "{0}" with value "{1}"'.format(signature, example)
A:faker.build_docs.fake->Faker(locale=lang)
A:faker.build_docs.doc->faker.documentor.Documentor(fake)
A:faker.build_docs.formatters->faker.documentor.Documentor(fake).get_formatters(with_args=True, with_defaults=True)
A:faker.build_docs.provider_name->faker.documentor.Documentor(fake).get_provider_name(provider)
A:faker.build_docs.fname->os.path.join(DOCS_ROOT, 'locales', '%s.rst' % lang)
A:faker.build_docs.AVAILABLE_LOCALES->list(AVAILABLE_LOCALES)
A:faker.build_docs.d->faker.documentor.Documentor(fake)
faker.build_docs._main(app,*args,**kwargs)
faker.build_docs.setup(app)
faker.build_docs.write(fh,s)
faker.build_docs.write_docs(*args,**kwargs)
faker.build_docs.write_provider(fh,doc,provider,formatters,excludes=None)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/config.py----------------------------------------
A:faker.config.PROVIDERS->find_available_providers([import_module(path) for path in META_PROVIDERS_MODULES])
A:faker.config.AVAILABLE_LOCALES->find_available_locales(PROVIDERS)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/cli.py----------------------------------------
A:faker.cli.lines->text_type(example).expandtabs().splitlines()
A:faker.cli.margin->max(30, doc.max_name_len + 1)
A:faker.cli.fake->Faker(locale=language)
A:faker.cli.parts->provider_or_field.split('.')
A:faker.cli.doc->faker.documentor.Documentor(fake)
A:faker.cli.formatters->faker.documentor.Documentor(fake).get_formatters(with_args=True, with_defaults=True)
A:faker.cli.d->faker.documentor.Documentor(fake)
A:faker.cli.self.prog_name->os.path.basename(self.argv[0])
A:faker.cli.epilog->'supported locales:\n\n  {0}\n\n  faker can take a locale as an argument, to return localized data. If no\n  localized provider is found, the factory falls back to the default en_US\n  locale.\n\nexamples:\n\n  $ faker address\n  968 Bahringer Garden Apt. 722\n  Kristinaland, NJ 09890\n\n  $ faker -l de_DE address\n  Samira-Niemeier-Allee 56\n  94812 Biedenkopf\n\n  $ faker profile ssn,birthdate\n  {{\'ssn\': u\'628-10-1085\', \'birthdate\': \'2008-03-29\'}}\n\n  $ faker -r=3 -s=";" name\n  Willam Kertzmann;\n  Josiah Maggio;\n  Gayla Schmitt;\n\n'.format(', '.join(sorted(AVAILABLE_LOCALES)))
A:faker.cli.parser->argparse.ArgumentParser(prog=self.prog_name, description='{0} version {1}'.format(self.prog_name, VERSION), epilog=epilog, formatter_class=formatter_class)
A:faker.cli.arguments->argparse.ArgumentParser(prog=self.prog_name, description='{0} version {1}'.format(self.prog_name, VERSION), epilog=epilog, formatter_class=formatter_class).parse_args(self.argv[1:])
A:faker.cli.command->Command(argv)
faker.cli.Command(self,argv=None)
faker.cli.Command.__init__(self,argv=None)
faker.cli.Command.execute(self)
faker.cli.execute_from_command_line(argv=None)
faker.cli.print_doc(provider_or_field=None,args=None,lang=DEFAULT_LOCALE,output=None,includes=None)
faker.cli.print_provider(doc,provider,formatters,excludes=None,output=None)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/__main__.py----------------------------------------


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/documentor.py----------------------------------------
A:faker.documentor.providers->self.generator.get_providers()
A:faker.documentor.argspec->inspect.getargspec(method)
A:faker.documentor.default->'{0}'.format(default)
A:faker.documentor.arg->'{0}={1}'.format(arg, default)
A:faker.documentor.signature->'{0}{1}({2})'.format(prefix, name, ', '.join(arguments))
A:faker.documentor.example->self.generator.format(name)
A:faker.documentor.self.max_name_len->max(self.max_name_len, len(signature))
faker.documentor.Documentor(self,generator)
faker.documentor.Documentor.__init__(self,generator)
faker.documentor.Documentor.get_formatters(self,locale=None,excludes=None,**kwargs)
faker.documentor.Documentor.get_provider_formatters(self,provider,prefix='fake.',with_args=True,with_defaults=True)
faker.documentor.Documentor.get_provider_name(provider_class)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/utils/loading.py----------------------------------------
A:faker.utils.loading.path->os.path.dirname(module.__file__)
A:faker.utils.loading.available_locales->set()
A:faker.utils.loading.provider_module->import_module(provider_path)
A:faker.utils.loading.langs->list_module(provider_module)
A:faker.utils.loading.available_providers->set()
faker.utils.loading.find_available_locales(providers)
faker.utils.loading.find_available_providers(modules)
faker.utils.loading.list_module(module)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/utils/datetime_safe.py----------------------------------------
A:faker.utils.datetime_safe._illegal_formatting->re.compile('((^|[^%])(%%)*%[sy])')
A:faker.utils.datetime_safe.j->text.find(substr, i)
A:faker.utils.datetime_safe.illegal_formatting->re.compile('((^|[^%])(%%)*%[sy])').search(fmt)
A:faker.utils.datetime_safe.timetuple->dt.timetuple()
A:faker.utils.datetime_safe.s1->time.strftime(fmt, (year,) + timetuple[1:])
A:faker.utils.datetime_safe.sites1->_findall(s1, str(year))
A:faker.utils.datetime_safe.s2->time.strftime(fmt, (year + 28,) + timetuple[1:])
A:faker.utils.datetime_safe.sites2->_findall(s2, str(year + 28))
faker.utils.datetime_safe._findall(text,substr)
faker.utils.datetime_safe.date(real_date)
faker.utils.datetime_safe.date.strftime(self,fmt)
faker.utils.datetime_safe.datetime(real_datetime)
faker.utils.datetime_safe.datetime.combine(self,date,time)
faker.utils.datetime_safe.datetime.date(self)
faker.utils.datetime_safe.datetime.strftime(self,fmt)
faker.utils.datetime_safe.new_date(d)
faker.utils.datetime_safe.new_datetime(d)
faker.utils.datetime_safe.strftime(dt,fmt)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/utils/text.py----------------------------------------
A:faker.utils.text._re_pattern->re.compile('[^\\w\\s-]', flags=re.U)
A:faker.utils.text._re_pattern_allow_dots->re.compile('[^\\.\\w\\s-]', flags=re.U)
A:faker.utils.text._re_spaces->re.compile('[-\\s]+', flags=re.U)
A:faker.utils.text.s->' '.join((force_text(arg, encoding, strings_only, errors) for arg in s))
A:faker.utils.text.value->pattern.sub('', value).strip().lower()
faker.utils.text.force_text(s,encoding='utf-8',strings_only=False,errors='strict')
faker.utils.text.is_protected_type(obj)
faker.utils.text.slugify(value,allow_dots=False,allow_unicode=False)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/utils/datasets.py----------------------------------------
faker.utils.datasets.add_dicts(*args)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/utils/distribution.py----------------------------------------
A:faker.utils.distribution.cdf->list(cumsum(p))
A:faker.utils.distribution.uniform_sample->random_sample()
A:faker.utils.distribution.idx->bisect.bisect_right(cdf2, uniform_sample)
faker.utils.distribution.choice_distribution(a,p)
faker.utils.distribution.cumsum(it)
faker.utils.distribution.random_sample()


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/utils/__init__.py----------------------------------------
faker.utils.__init__.is_string(var)
faker.utils.__init__.quote(var)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/utils/decorators.py----------------------------------------
faker.utils.decorators.slugify(fn)
faker.utils.decorators.slugify_domain(fn)
faker.utils.decorators.slugify_unicode(fn)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/tests/__init__.py----------------------------------------
A:faker.tests.__init__.TEST_DIR->os.path.dirname(__file__)
A:faker.tests.__init__.utc->UTC()
A:faker.tests.__init__.sample->BaseProvider(None).random_sample_unique('abcde', 0)
A:faker.tests.__init__.random_state->json.load(fh)
A:faker.tests.__init__.random_state[1]->tuple(random_state[1])
A:faker.tests.__init__.a_pop->len([i for i in samples if i == 'a'])
A:faker.tests.__init__.b_pop->len([i for i in samples if i == 'b'])
A:faker.tests.__init__.c_pop->len([i for i in samples if i == 'c'])
A:faker.tests.__init__.d_pop->len([i for i in samples if i == 'd'])
A:faker.tests.__init__.result->faker.utils.datetime_safe.date(2008, 2, 29).strftime('%y')
A:faker.tests.__init__.providers->find_available_providers(modules)
A:faker.tests.__init__.expected_providers->list(map(str, ['faker.providers.address', 'faker.providers.barcode', 'faker.providers.color', 'faker.providers.company', 'faker.providers.credit_card', 'faker.providers.currency', 'faker.providers.date_time', 'faker.providers.file', 'faker.providers.internet', 'faker.providers.job', 'faker.providers.lorem', 'faker.providers.misc', 'faker.providers.person', 'faker.providers.phone_number', 'faker.providers.profile', 'faker.providers.python', 'faker.providers.ssn', 'faker.providers.user_agent']))
A:faker.tests.__init__.self.generator->Generator()
A:faker.tests.__init__.self.provider->FooProvider()
A:faker.tests.__init__.formatter->self.generator.get_formatter('foo_formatter')
A:faker.tests.__init__.output->StringIO()
A:faker.tests.__init__.sys.stdout->StringIO()
A:faker.tests.__init__.command->Command(['faker', 'foo', '-i', 'faker.tests.mymodule.en_US'])
A:faker.tests.__init__.slug->fn("a'b/.cé")
A:faker.tests.__init__.provider->BaseProvider(None)
A:faker.tests.__init__.pick->BaseProvider(None).random_element(choices)
A:faker.tests.__init__.now->datetime.datetime.now(utc).replace(microsecond=0)
A:faker.tests.__init__.timestamp->datetime_to_timestamp(today)
A:faker.tests.__init__.now_back->datetime.datetime.fromtimestamp(timestamp, utc)
A:faker.tests.__init__.today->datetime.date.today()
A:faker.tests.__init__.today_as_dt->datetime.datetime.combine(today, datetime.time.min)
A:faker.tests.__init__.today_back->datetime.datetime.fromtimestamp(timestamp)
A:faker.tests.__init__.timestamp_start->faker.generator.random.randint(0, 2000000000)
A:faker.tests.__init__.datetime_start->datetime.datetime.fromtimestamp(timestamp_start, utc)
A:faker.tests.__init__.datetime_end->datetime.datetime.fromtimestamp(timestamp_end, utc)
A:faker.tests.__init__.random_date->BaseProvider(None).date_time_between_dates(datetime_start, datetime_end, utc)
A:faker.tests.__init__.random_date_naive->BaseProvider(None).date_time_between_dates(datetime_start, datetime_end)
A:faker.tests.__init__.length->faker.generator.random.randint(0, 2 ** 10)
A:faker.tests.__init__.binary->faker.providers.internet.Provider.binary(length)
A:faker.tests.__init__.language_code->faker.providers.internet.Provider.language_code()
A:faker.tests.__init__.password->faker.providers.internet.Provider.password()
A:faker.tests.__init__.f->faker.Factory.create(locale=locale)
A:faker.tests.__init__.paragraph->BaseProvider(None).paragraph(0)
A:faker.tests.__init__.sentence->BaseProvider(None).sentence(0)
A:faker.tests.__init__.characters->BaseProvider(None).pystr(min_chars=10, max_chars=255)
A:faker.tests.__init__.ssn->BaseProvider(None).ssn()
A:faker.tests.__init__.factory->faker.Factory.create()
A:faker.tests.__init__.email->faker.Factory.create().email()
A:faker.tests.__init__.address->BaseProvider(None).ipv6(network=True)
faker.tests.__init__.BarProvider(object)
faker.tests.__init__.BarProvider.foo_formatter(self)
faker.tests.__init__.FactoryTestCase(unittest.TestCase)
faker.tests.__init__.FactoryTestCase._datetime_to_time(self,value)
faker.tests.__init__.FactoryTestCase.setUp(self)
faker.tests.__init__.FactoryTestCase.test_add_provider_gives_priority_to_newly_added_provider(self)
faker.tests.__init__.FactoryTestCase.test_binary(self)
faker.tests.__init__.FactoryTestCase.test_command(self)
faker.tests.__init__.FactoryTestCase.test_command_custom_provider(self)
faker.tests.__init__.FactoryTestCase.test_date_time_between_dates(self)
faker.tests.__init__.FactoryTestCase.test_date_time_between_dates_with_tzinfo(self)
faker.tests.__init__.FactoryTestCase.test_date_time_this_period(self)
faker.tests.__init__.FactoryTestCase.test_date_time_this_period_with_tzinfo(self)
faker.tests.__init__.FactoryTestCase.test_datetime_safe(self)
faker.tests.__init__.FactoryTestCase.test_datetimes_with_and_without_tzinfo(self)
faker.tests.__init__.FactoryTestCase.test_documentor(self)
faker.tests.__init__.FactoryTestCase.test_email(self)
faker.tests.__init__.FactoryTestCase.test_format_calls_formatter_on_provider(self)
faker.tests.__init__.FactoryTestCase.test_format_transfers_arguments_to_formatter(self)
faker.tests.__init__.FactoryTestCase.test_get_formatter_returns_callable(self)
faker.tests.__init__.FactoryTestCase.test_get_formatter_returns_correct_formatter(self)
faker.tests.__init__.FactoryTestCase.test_get_formatter_throws_exception_on_incorrect_formatter(self)
faker.tests.__init__.FactoryTestCase.test_ipv4(self)
faker.tests.__init__.FactoryTestCase.test_ipv6(self)
faker.tests.__init__.FactoryTestCase.test_language_code(self)
faker.tests.__init__.FactoryTestCase.test_magic_call_calls_format(self)
faker.tests.__init__.FactoryTestCase.test_magic_call_calls_format_with_arguments(self)
faker.tests.__init__.FactoryTestCase.test_no_words_paragraph(self)
faker.tests.__init__.FactoryTestCase.test_no_words_sentence(self)
faker.tests.__init__.FactoryTestCase.test_parse_returns_same_string_when_it_contains_no_curly_braces(self)
faker.tests.__init__.FactoryTestCase.test_parse_returns_string_with_tokens_replaced_by_formatters(self)
faker.tests.__init__.FactoryTestCase.test_password(self)
faker.tests.__init__.FactoryTestCase.test_prefix_suffix_always_string(self)
faker.tests.__init__.FactoryTestCase.test_random_element(self)
faker.tests.__init__.FactoryTestCase.test_random_pystr_characters(self)
faker.tests.__init__.FactoryTestCase.test_random_sample_unique(self)
faker.tests.__init__.FactoryTestCase.test_slugify(self)
faker.tests.__init__.FactoryTestCase.test_timezone_conversion(self)
faker.tests.__init__.FactoryTestCase.test_us_ssn_valid(self)
faker.tests.__init__.FooProvider(object)
faker.tests.__init__.FooProvider.foo_formatter(self)
faker.tests.__init__.FooProvider.foo_formatter_with_arguments(self,param='',append='')
faker.tests.__init__.GeneratorTestCase(unittest.TestCase)
faker.tests.__init__.GeneratorTestCase.setUp(self)
faker.tests.__init__.GeneratorTestCase.test_get_random(self,mock_system_random)
faker.tests.__init__.GeneratorTestCase.test_random_seed_doesnt_seed_system_random(self,mock_system_random)
faker.tests.__init__.UTC(datetime.tzinfo)
faker.tests.__init__.UTC.__repr__(self)
faker.tests.__init__.UTC.dst(self,dt)
faker.tests.__init__.UTC.tzname(self,dt)
faker.tests.__init__.UTC.utcoffset(self,dt)
faker.tests.__init__.UtilsTestCase(unittest.TestCase)
faker.tests.__init__.UtilsTestCase.test_add_dicts(self)
faker.tests.__init__.UtilsTestCase.test_choice_distribution(self)
faker.tests.__init__.UtilsTestCase.test_find_available_locales(self)
faker.tests.__init__.UtilsTestCase.test_find_available_providers(self)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/tests/en_GB/__init__.py----------------------------------------
A:faker.tests.en_GB.__init__.self.factory->faker.Factory.create('en_GB')
faker.tests.en_GB.__init__.en_GB_FactoryTestCase(unittest.TestCase)
faker.tests.en_GB.__init__.en_GB_FactoryTestCase.setUp(self)
faker.tests.en_GB.__init__.en_GB_FactoryTestCase.test_en_GB_postcode(self)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/tests/zh_CN/__init__.py----------------------------------------
A:faker.tests.zh_CN.__init__.self.factory->faker.Factory.create(locale='zh_CN')
A:faker.tests.zh_CN.__init__.email->self.factory.email()
faker.tests.zh_CN.__init__.zh_CN_FactoryTestCase(unittest.TestCase)
faker.tests.zh_CN.__init__.zh_CN_FactoryTestCase.setUp(self)
faker.tests.zh_CN.__init__.zh_CN_FactoryTestCase.test_email(self)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/tests/mymodule/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/tests/mymodule/en_US/__init__.py----------------------------------------
faker.tests.mymodule.en_US.__init__.Provider(BaseProvider)
faker.tests.mymodule.en_US.__init__.Provider.foo(self)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/tests/ja_JP/__init__.py----------------------------------------
A:faker.tests.ja_JP.__init__.self.factory->faker.Factory.create('ja')
A:faker.tests.ja_JP.__init__.country->self.factory.country()
A:faker.tests.ja_JP.__init__.prefecture->self.factory.prefecture()
A:faker.tests.ja_JP.__init__.city->self.factory.city()
A:faker.tests.ja_JP.__init__.town->self.factory.town()
A:faker.tests.ja_JP.__init__.chome->self.factory.chome()
A:faker.tests.ja_JP.__init__.ban->self.factory.ban()
A:faker.tests.ja_JP.__init__.gou->self.factory.gou()
A:faker.tests.ja_JP.__init__.building_name->self.factory.building_name()
A:faker.tests.ja_JP.__init__.zipcode->self.factory.zipcode()
A:faker.tests.ja_JP.__init__.address->self.factory.address()
A:faker.tests.ja_JP.__init__.prefix->self.factory.company_prefix()
A:faker.tests.ja_JP.__init__.company->self.factory.company()
A:faker.tests.ja_JP.__init__.domain_word->self.factory.domain_word()
A:faker.tests.ja_JP.__init__.user_name->self.factory.user_name()
A:faker.tests.ja_JP.__init__.tld->self.factory.tld()
A:faker.tests.ja_JP.__init__.name->self.factory.name()
A:faker.tests.ja_JP.__init__.first_name->self.factory.first_name()
A:faker.tests.ja_JP.__init__.last_name->self.factory.last_name()
A:faker.tests.ja_JP.__init__.kana_name->self.factory.kana_name()
A:faker.tests.ja_JP.__init__.first_kana_name->self.factory.first_kana_name()
A:faker.tests.ja_JP.__init__.first_kana_name_male->self.factory.first_kana_name_male()
A:faker.tests.ja_JP.__init__.first_kana_name_female->self.factory.first_kana_name_female()
A:faker.tests.ja_JP.__init__.last_kana_name->self.factory.last_kana_name()
A:faker.tests.ja_JP.__init__.romanized_name->self.factory.romanized_name()
A:faker.tests.ja_JP.__init__.first_romanized_name->self.factory.first_romanized_name()
A:faker.tests.ja_JP.__init__.first_romanized_name_male->self.factory.first_romanized_name_male()
A:faker.tests.ja_JP.__init__.first_romanized_name_female->self.factory.first_romanized_name_female()
A:faker.tests.ja_JP.__init__.last_romanized_name->self.factory.last_romanized_name()
A:faker.tests.ja_JP.__init__.pn->self.factory.phone_number()
A:faker.tests.ja_JP.__init__.(first, second, third)->self.factory.phone_number().split('-')
faker.tests.ja_JP.__init__.ja_JP_FactoryTestCase(unittest.TestCase)
faker.tests.ja_JP.__init__.ja_JP_FactoryTestCase.setUp(self)
faker.tests.ja_JP.__init__.ja_JP_FactoryTestCase.test_ja_JP_address(self)
faker.tests.ja_JP.__init__.ja_JP_FactoryTestCase.test_ja_JP_company(self)
faker.tests.ja_JP.__init__.ja_JP_FactoryTestCase.test_ja_JP_internet(self)
faker.tests.ja_JP.__init__.ja_JP_FactoryTestCase.test_ja_JP_person(self)
faker.tests.ja_JP.__init__.ja_JP_FactoryTestCase.test_ja_JP_phone_number(self)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/tests/hr_HR/__init__.py----------------------------------------
A:faker.tests.hr_HR.__init__.self.factory->faker.Factory.create('hr_HR')
faker.tests.hr_HR.__init__.hr_HR_FactoryTestCase(unittest.TestCase)
faker.tests.hr_HR.__init__.hr_HR_FactoryTestCase.setUp(self)
faker.tests.hr_HR.__init__.hr_HR_FactoryTestCase.test_hr_HR_ssn(self)
faker.tests.hr_HR.__init__.hr_HR_FactoryTestCase.test_hr_HR_ssn_checksum(self)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/tests/pt_BR/__init__.py----------------------------------------
A:faker.tests.pt_BR.__init__.self.factory->faker.Factory.create('pt_BR')
faker.tests.pt_BR.__init__.pt_BR_FactoryTestCase(unittest.TestCase)
faker.tests.pt_BR.__init__.pt_BR_FactoryTestCase.setUp(self)
faker.tests.pt_BR.__init__.pt_BR_FactoryTestCase.test_pt_BR_cpf(self)
faker.tests.pt_BR.__init__.pt_BR_FactoryTestCase.test_pt_BR_ssn(self)
faker.tests.pt_BR.__init__.pt_BR_FactoryTestCase.test_pt_BR_ssn_checksum(self)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/tests/ne_np/__init__.py----------------------------------------
A:faker.tests.ne_np.__init__.self.factory->faker.Factory.create('ne_NP')
A:faker.tests.ne_np.__init__.country->self.factory.country()
A:faker.tests.ne_np.__init__.district->self.factory.district()
A:faker.tests.ne_np.__init__.city->self.factory.city()
A:faker.tests.ne_np.__init__.name->self.factory.name()
A:faker.tests.ne_np.__init__.(first_name, last_name)->self.factory.name().split()
faker.tests.ne_np.__init__.ne_NP_FactoryTestCase(unittest.TestCase)
faker.tests.ne_np.__init__.ne_NP_FactoryTestCase.setUp(self)
faker.tests.ne_np.__init__.ne_NP_FactoryTestCase.test_address(self)
faker.tests.ne_np.__init__.ne_NP_FactoryTestCase.test_names(self)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/__init__.py----------------------------------------
A:faker.providers.__init__._re_hash->re.compile('#')
A:faker.providers.__init__._re_perc->re.compile('%')
A:faker.providers.__init__._re_excl->re.compile('!')
A:faker.providers.__init__._re_at->re.compile('@')
A:faker.providers.__init__._re_qm->re.compile('\\?')
A:faker.providers.__init__.digits->BaseProvider.random_digit()
A:faker.providers.__init__.choices->elements.keys()
A:faker.providers.__init__.probabilities->elements.values()
A:faker.providers.__init__.length->faker.generator.random.randint(1, len(elements))
A:faker.providers.__init__.sample->set()
A:faker.providers.__init__.text->re.compile('@').sub(lambda x: str(BaseProvider.random_digit_not_null_or_empty()), text)
faker.providers.__init__.BaseProvider(self,generator)
faker.providers.__init__.BaseProvider.__init__(self,generator)
faker.providers.__init__.BaseProvider.bothify(cls,text='##??')
faker.providers.__init__.BaseProvider.lexify(cls,text='????')
faker.providers.__init__.BaseProvider.numerify(cls,text='###')
faker.providers.__init__.BaseProvider.random_digit(cls)
faker.providers.__init__.BaseProvider.random_digit_not_null(cls)
faker.providers.__init__.BaseProvider.random_digit_not_null_or_empty(cls)
faker.providers.__init__.BaseProvider.random_digit_or_empty(cls)
faker.providers.__init__.BaseProvider.random_element(cls,elements=('a','b','c'))
faker.providers.__init__.BaseProvider.random_int(cls,min=0,max=9999)
faker.providers.__init__.BaseProvider.random_letter(cls)
faker.providers.__init__.BaseProvider.random_number(cls,digits=None)
faker.providers.__init__.BaseProvider.random_sample(cls,elements=('a','b','c'),length=None)
faker.providers.__init__.BaseProvider.random_sample_unique(cls,elements=('a','b','c'),length=None)
faker.providers.__init__.BaseProvider.randomize_nb_elements(cls,number=10,le=False,ge=False)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/misc/__init__.py----------------------------------------
A:faker.providers.misc.__init__.res->hashlib.sha256(str(random.random()).encode('utf-8'))
A:faker.providers.misc.__init__.random_indexes->set()
faker.providers.misc.__init__.Provider(BaseProvider)
faker.providers.misc.__init__.Provider.binary(cls,length=1*1024*1024)
faker.providers.misc.__init__.Provider.boolean(cls,chance_of_getting_true=50)
faker.providers.misc.__init__.Provider.country_code(cls)
faker.providers.misc.__init__.Provider.language_code(cls)
faker.providers.misc.__init__.Provider.locale(self)
faker.providers.misc.__init__.Provider.md5(cls,raw_output=False)
faker.providers.misc.__init__.Provider.null_boolean(cls)
faker.providers.misc.__init__.Provider.password(cls,length=10,special_chars=True,digits=True,upper_case=True,lower_case=True)
faker.providers.misc.__init__.Provider.sha1(cls,raw_output=False)
faker.providers.misc.__init__.Provider.sha256(cls,raw_output=False)
faker.providers.misc.__init__.Provider.uuid4(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/misc/en_US/__init__.py----------------------------------------
faker.providers.misc.en_US.__init__.Provider(MiscProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/__init__.py----------------------------------------
A:faker.providers.address.__init__.pattern->self.random_element(self.address_formats)
A:faker.providers.address.__init__.center->float(center)
A:faker.providers.address.__init__.radius->float(radius)
A:faker.providers.address.__init__.geo->faker.generator.random.uniform(center - radius, center + radius)
faker.providers.address.__init__.Provider(BaseProvider)
faker.providers.address.__init__.Provider.address(self)
faker.providers.address.__init__.Provider.building_number(cls)
faker.providers.address.__init__.Provider.city(self)
faker.providers.address.__init__.Provider.city_suffix(cls)
faker.providers.address.__init__.Provider.country(cls)
faker.providers.address.__init__.Provider.country_code(cls)
faker.providers.address.__init__.Provider.geo_coordinate(cls,center=None,radius=0.001)
faker.providers.address.__init__.Provider.latitude(cls)
faker.providers.address.__init__.Provider.longitude(cls)
faker.providers.address.__init__.Provider.postcode(cls)
faker.providers.address.__init__.Provider.street_address(self)
faker.providers.address.__init__.Provider.street_name(self)
faker.providers.address.__init__.Provider.street_suffix(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/en_GB/__init__.py----------------------------------------
A:faker.providers.address.en_GB.__init__._postcode_sets->OrderedDict(((' ', ' '), ('N', [str(i) for i in range(0, 10)]), ('A', POSTAL_ZONES_ONE_CHAR), ('B', 'ABCDEFGHKLMNOPQRSTUVWXY'), ('C', 'ABCDEFGHJKSTUW'), ('D', 'ABEHMNPRVWXY'), ('E', 'ABDEFGHJLNPQRSTUWXYZ'), ('P', POSTAL_ZONES_TWO_CHARS)))
A:faker.providers.address.en_GB.__init__.pattern->cls.random_element(cls.postcode_formats)
faker.providers.address.en_GB.__init__.Provider(AddressProvider)
faker.providers.address.en_GB.__init__.Provider.city_prefix(cls)
faker.providers.address.en_GB.__init__.Provider.postcode(cls)
faker.providers.address.en_GB.__init__.Provider.secondary_address(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/no_NO/__init__.py----------------------------------------
faker.providers.address.no_NO.__init__.Provider(AddressProvider)
faker.providers.address.no_NO.__init__.Provider.postcode(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/sk_SK/__init__.py----------------------------------------
faker.providers.address.sk_SK.__init__.Provider(AddressProvider)
faker.providers.address.sk_SK.__init__.Provider.city_name(cls)
faker.providers.address.sk_SK.__init__.Provider.state(cls)
faker.providers.address.sk_SK.__init__.Provider.street_name(cls)
faker.providers.address.sk_SK.__init__.Provider.street_suffix_long(cls)
faker.providers.address.sk_SK.__init__.Provider.street_suffix_short(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/zh_CN/__init__.py----------------------------------------
faker.providers.address.zh_CN.__init__.Provider(AddressProvider)
faker.providers.address.zh_CN.__init__.Provider.building_number(cls)
faker.providers.address.zh_CN.__init__.Provider.city_name(cls)
faker.providers.address.zh_CN.__init__.Provider.state(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/es_ES/__init__.py----------------------------------------
faker.providers.address.es_ES.__init__.Provider(AddressProvider)
faker.providers.address.es_ES.__init__.Provider.secondary_address(cls)
faker.providers.address.es_ES.__init__.Provider.state(cls)
faker.providers.address.es_ES.__init__.Provider.state_name(cls)
faker.providers.address.es_ES.__init__.Provider.street_prefix(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/hi_IN/__init__.py----------------------------------------
faker.providers.address.hi_IN.__init__.Provider(AddressProvider)
faker.providers.address.hi_IN.__init__.Provider.city_name(cls)
faker.providers.address.hi_IN.__init__.Provider.state(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/pt_PT/__init__.py----------------------------------------
faker.providers.address.pt_PT.__init__.Provider(AddressProvider)
faker.providers.address.pt_PT.__init__.Provider.city_name(cls)
faker.providers.address.pt_PT.__init__.Provider.street_prefix(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/es/__init__.py----------------------------------------
faker.providers.address.es.__init__.Provider(AddressProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/sl_SI/__init__.py----------------------------------------
faker.providers.address.sl_SI.__init__.Provider(AddressProvider)
faker.providers.address.sl_SI.__init__.Provider.city_name(cls)
faker.providers.address.sl_SI.__init__.Provider.state(cls)
faker.providers.address.sl_SI.__init__.Provider.street_name(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/fr_FR/__init__.py----------------------------------------
faker.providers.address.fr_FR.__init__.Provider(AddressProvider)
faker.providers.address.fr_FR.__init__.Provider.city_prefix(cls)
faker.providers.address.fr_FR.__init__.Provider.department(cls)
faker.providers.address.fr_FR.__init__.Provider.department_name(cls)
faker.providers.address.fr_FR.__init__.Provider.department_number(cls)
faker.providers.address.fr_FR.__init__.Provider.region(cls)
faker.providers.address.fr_FR.__init__.Provider.street_prefix(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/es_MX/__init__.py----------------------------------------
A:faker.providers.address.es_MX.__init__.zip_codes->OrderedDict((('AGS', (20000, 20999)), ('BC', (21000, 22999)), ('BCS', (23000, 23999)), ('CAMP', (24000, 24999)), ('COAH', (25000, 27999)), ('COL', (28000, 28999)), ('CHIS', (29000, 30999)), ('CHIH', (31000, 33999)), ('DF', (1000, 19999)), ('DGO', (36000, 35999)), ('GTO', (36000, 38999)), ('GRO', (39000, 41999)), ('HGO', (42000, 43999)), ('JAL', (44000, 49999)), ('MEX', (50000, 57999)), ('MICH', (58000, 61999)), ('MOR', (62000, 62999)), ('NAY', (63000, 63999)), ('NL', (64000, 67999)), ('OAX', (68000, 71999)), ('PUE', (72000, 75999)), ('QRO', (76000, 76999)), ('Q. ROO', (77000, 75999)), ('SLP', (78000, 79999)), ('SIN', (80000, 82999)), ('SON', (83000, 85999)), ('TAB', (86000, 86999)), ('TAMPS', (87000, 89999)), ('TLAX', (90000, 90999)), ('VER', (91000, 97999)), ('YUC', (97000, 97999)), ('ZAC', (98000, 99999))))
faker.providers.address.es_MX.__init__.Provider(AddressProvider)
faker.providers.address.es_MX.__init__.Provider.city_adjetive(cls)
faker.providers.address.es_MX.__init__.Provider.city_prefix(cls)
faker.providers.address.es_MX.__init__.Provider.city_suffix(cls)
faker.providers.address.es_MX.__init__.Provider.secondary_address(cls)
faker.providers.address.es_MX.__init__.Provider.state(cls)
faker.providers.address.es_MX.__init__.Provider.state_abbr(cls)
faker.providers.address.es_MX.__init__.Provider.street_prefix(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/en/__init__.py----------------------------------------
faker.providers.address.en.__init__.Provider(AddressProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/fa_IR/__init__.py----------------------------------------
faker.providers.address.fa_IR.__init__.Provider(AddressProvider)
faker.providers.address.fa_IR.__init__.Provider.city_prefix(cls)
faker.providers.address.fa_IR.__init__.Provider.secondary_address(cls)
faker.providers.address.fa_IR.__init__.Provider.state(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/ko_KR/__init__.py----------------------------------------
faker.providers.address.ko_KR.__init__.Provider(AddressProvider)
faker.providers.address.ko_KR.__init__.Provider.secondary_address(cls)
faker.providers.address.ko_KR.__init__.Provider.state(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/nl_NL/__init__.py----------------------------------------
faker.providers.address.nl_NL.__init__.Provider(AddressProvider)
faker.providers.address.nl_NL.__init__.Provider.city(cls)
faker.providers.address.nl_NL.__init__.Provider.province(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/cs_CZ/__init__.py----------------------------------------
faker.providers.address.cs_CZ.__init__.Provider(AddressProvider)
faker.providers.address.cs_CZ.__init__.Provider.city_name(cls)
faker.providers.address.cs_CZ.__init__.Provider.state(cls)
faker.providers.address.cs_CZ.__init__.Provider.street_name(cls)
faker.providers.address.cs_CZ.__init__.Provider.street_suffix_long(cls)
faker.providers.address.cs_CZ.__init__.Provider.street_suffix_short(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/en_US/__init__.py----------------------------------------
A:faker.providers.address.en_US.__init__.address_formats->OrderedDict((('{{street_address}}\n{{city}}, {{state_abbr}} {{postcode}}', 25), ('{{military_apo}}\nAPO {{military_state}} {{postcode}}', 1), ('{{military_ship}} {{last_name}}\nFPO {{military_state}} {{postcode}}', 1), ('{{military_dpo}}\nDPO {{military_state}} {{postcode}}', 1)))
faker.providers.address.en_US.__init__.Provider(AddressProvider)
faker.providers.address.en_US.__init__.Provider.city_prefix(cls)
faker.providers.address.en_US.__init__.Provider.military_apo(cls)
faker.providers.address.en_US.__init__.Provider.military_dpo(cls)
faker.providers.address.en_US.__init__.Provider.military_ship(cls)
faker.providers.address.en_US.__init__.Provider.military_state(cls)
faker.providers.address.en_US.__init__.Provider.postalcode(cls)
faker.providers.address.en_US.__init__.Provider.postalcode_plus4(cls)
faker.providers.address.en_US.__init__.Provider.secondary_address(cls)
faker.providers.address.en_US.__init__.Provider.state(cls)
faker.providers.address.en_US.__init__.Provider.state_abbr(cls)
faker.providers.address.en_US.__init__.Provider.zipcode(cls)
faker.providers.address.en_US.__init__.Provider.zipcode_plus4(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/ja_JP/__init__.py----------------------------------------
faker.providers.address.ja_JP.__init__.Provider(AddressProvider)
faker.providers.address.ja_JP.__init__.Provider.ban(cls)
faker.providers.address.ja_JP.__init__.Provider.building_name(cls)
faker.providers.address.ja_JP.__init__.Provider.chome(cls)
faker.providers.address.ja_JP.__init__.Provider.city(cls)
faker.providers.address.ja_JP.__init__.Provider.gou(cls)
faker.providers.address.ja_JP.__init__.Provider.prefecture(cls)
faker.providers.address.ja_JP.__init__.Provider.town(cls)
faker.providers.address.ja_JP.__init__.Provider.zipcode(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/hr_HR/__init__.py----------------------------------------
faker.providers.address.hr_HR.__init__.Provider(AddressProvider)
faker.providers.address.hr_HR.__init__.Provider.city_name(cls)
faker.providers.address.hr_HR.__init__.Provider.state(cls)
faker.providers.address.hr_HR.__init__.Provider.street_name(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/el_GR/__init__.py----------------------------------------
A:faker.providers.address.el_GR.__init__.n->len(poly)
A:faker.providers.address.el_GR.__init__.pattern->self.random_element(self.line_address_formats)
A:faker.providers.address.el_GR.__init__.l->list(map(lambda t: int(t[1] * 10000000), cls.poly))
faker.providers.address.el_GR.__init__.Provider(AddressProvider)
faker.providers.address.el_GR.__init__.Provider.city(cls)
faker.providers.address.el_GR.__init__.Provider.latitude(cls)
faker.providers.address.el_GR.__init__.Provider.latlng(cls)
faker.providers.address.el_GR.__init__.Provider.line_address(self)
faker.providers.address.el_GR.__init__.Provider.longitude(cls)
faker.providers.address.el_GR.__init__.Provider.region(cls)
faker.providers.address.el_GR.__init__.Provider.street(cls)
faker.providers.address.el_GR.__init__.Provider.street_prefix(cls)
faker.providers.address.el_GR.__init__.Provider.street_prefix_long(cls)
faker.providers.address.el_GR.__init__.Provider.street_prefix_short(cls)
faker.providers.address.el_GR.__init__.contains_point(poly,point)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/pl_PL/__init__.py----------------------------------------
faker.providers.address.pl_PL.__init__.Provider(AddressProvider)
faker.providers.address.pl_PL.__init__.Provider.city(cls)
faker.providers.address.pl_PL.__init__.Provider.street_name(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/ne_NP/__init__.py----------------------------------------
faker.providers.address.ne_NP.__init__.Provider(AddressProvider)
faker.providers.address.ne_NP.__init__.Provider.building_prefix(cls)
faker.providers.address.ne_NP.__init__.Provider.city(cls)
faker.providers.address.ne_NP.__init__.Provider.district(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/de_DE/__init__.py----------------------------------------
faker.providers.address.de_DE.__init__.Provider(AddressProvider)
faker.providers.address.de_DE.__init__.Provider.city_name(cls)
faker.providers.address.de_DE.__init__.Provider.state(cls)
faker.providers.address.de_DE.__init__.Provider.street_suffix_long(cls)
faker.providers.address.de_DE.__init__.Provider.street_suffix_short(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/en_AU/__init__.py----------------------------------------
faker.providers.address.en_AU.__init__.Provider(AddressProvider)
faker.providers.address.en_AU.__init__.Provider.city_prefix(cls)
faker.providers.address.en_AU.__init__.Provider.secondary_address(cls)
faker.providers.address.en_AU.__init__.Provider.state(cls)
faker.providers.address.en_AU.__init__.Provider.state_abbr(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/pt_BR/__init__.py----------------------------------------
faker.providers.address.pt_BR.__init__.Provider(AddressProvider)
faker.providers.address.pt_BR.__init__.Provider.bairro(cls)
faker.providers.address.pt_BR.__init__.Provider.estado(cls)
faker.providers.address.pt_BR.__init__.Provider.estado_nome(cls)
faker.providers.address.pt_BR.__init__.Provider.estado_sigla(cls)
faker.providers.address.pt_BR.__init__.Provider.street_prefix(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/fi_FI/__init__.py----------------------------------------
faker.providers.address.fi_FI.__init__.Provider(AddressProvider)
faker.providers.address.fi_FI.__init__.Provider.city_name(cls)
faker.providers.address.fi_FI.__init__.Provider.fruit(cls)
faker.providers.address.fi_FI.__init__.Provider.state(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/it_IT/__init__.py----------------------------------------
faker.providers.address.it_IT.__init__.Provider(AddressProvider)
faker.providers.address.it_IT.__init__.Provider.city_prefix(cls)
faker.providers.address.it_IT.__init__.Provider.secondary_address(cls)
faker.providers.address.it_IT.__init__.Provider.state(cls)
faker.providers.address.it_IT.__init__.Provider.state_abbr(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/zh_TW/__init__.py----------------------------------------
faker.providers.address.zh_TW.__init__.Provider(AddressProvider)
faker.providers.address.zh_TW.__init__.Provider.building_number(cls)
faker.providers.address.zh_TW.__init__.Provider.city_name(cls)
faker.providers.address.zh_TW.__init__.Provider.secondary_address(cls)
faker.providers.address.zh_TW.__init__.Provider.street_name(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/sv_SE/__init__.py----------------------------------------
faker.providers.address.sv_SE.__init__.Provider(AddressProvider)
faker.providers.address.sv_SE.__init__.Provider.city_name(cls)
faker.providers.address.sv_SE.__init__.Provider.state(cls)
faker.providers.address.sv_SE.__init__.Provider.street_prefix(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/fr_CH/__init__.py----------------------------------------
faker.providers.address.fr_CH.__init__.Provider(AddressProvider)
faker.providers.address.fr_CH.__init__.Provider.canton(cls)
faker.providers.address.fr_CH.__init__.Provider.canton_code(cls)
faker.providers.address.fr_CH.__init__.Provider.canton_name(cls)
faker.providers.address.fr_CH.__init__.Provider.city_prefix(cls)
faker.providers.address.fr_CH.__init__.Provider.street_prefix(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/address/en_CA/__init__.py----------------------------------------
A:faker.providers.address.en_CA.__init__.temp->re.sub('\\?', lambda x: cls.postal_code_letter(), cls.random_element(cls.postal_code_formats))
faker.providers.address.en_CA.__init__.Provider(AddressProvider)
faker.providers.address.en_CA.__init__.Provider.city_prefix(cls)
faker.providers.address.en_CA.__init__.Provider.postal_code_letter(cls)
faker.providers.address.en_CA.__init__.Provider.postalcode(cls)
faker.providers.address.en_CA.__init__.Provider.province(cls)
faker.providers.address.en_CA.__init__.Provider.province_abbr(cls)
faker.providers.address.en_CA.__init__.Provider.secondary_address(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/__init__.py----------------------------------------
A:faker.providers.person.__init__.pattern->self.random_element(formats)
A:faker.providers.person.__init__.prefixes->cls.random_element((cls.prefixes_male, cls.prefixes_female))
A:faker.providers.person.__init__.suffixes->cls.random_element((cls.suffixes_male, cls.suffixes_female))
faker.providers.person.__init__.Provider(BaseProvider)
faker.providers.person.__init__.Provider.first_name(cls)
faker.providers.person.__init__.Provider.first_name_female(cls)
faker.providers.person.__init__.Provider.first_name_male(cls)
faker.providers.person.__init__.Provider.last_name(cls)
faker.providers.person.__init__.Provider.last_name_female(cls)
faker.providers.person.__init__.Provider.last_name_male(cls)
faker.providers.person.__init__.Provider.name(self)
faker.providers.person.__init__.Provider.name_female(self)
faker.providers.person.__init__.Provider.name_male(self)
faker.providers.person.__init__.Provider.prefix(cls)
faker.providers.person.__init__.Provider.prefix_female(cls)
faker.providers.person.__init__.Provider.prefix_male(cls)
faker.providers.person.__init__.Provider.suffix(cls)
faker.providers.person.__init__.Provider.suffix_female(cls)
faker.providers.person.__init__.Provider.suffix_male(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/en_GB/__init__.py----------------------------------------
A:faker.providers.person.en_GB.__init__.last_names->OrderedDict((('Savage', 0.04), ('Winter', 0.03), ('Metcalfe', 0.03), ('Harper', 0.06), ('Burgess', 0.06), ('Bailey', 0.15), ('Potts', 0.03), ('Boyle', 0.03), ('Brown', 0.51), ('Jennings', 0.05), ('Payne', 0.09), ('Day', 0.09), ('Holland', 0.07), ('Higgins', 0.05), ('Rhodes', 0.04), ('Hancock', 0.04), ('Howells', 0.03), ('Fowler', 0.04), ('Sims', 0.03), ('Thomas', 0.35), ('Parker', 0.17), ('Bentley', 0.04), ('Barnett', 0.05), ('Manning', 0.03), ('Collier', 0.03), ('Holloway', 0.03), ('Hartley', 0.04), ('George', 0.05), ('Tomlinson', 0.04), ('Howard', 0.09), ('Long', 0.06), ('Farmer', 0.03), ('Collins', 0.15), ('Rice', 0.03), ('Townsend', 0.04), ('Rees', 0.07), ('Bruce', 0.03), ('Hammond', 0.05), ('Ford', 0.09), ('Tucker', 0.05), ('Wallis', 0.03), ('Hamilton', 0.06), ('Ferguson', 0.04), ('Hooper', 0.03), ('Francis', 0.07), ('Reeves', 0.04), ('Barlow', 0.04), ('Short', 0.04), ('Cunningham', 0.05), ('Hopkins', 0.06), ('Nicholson', 0.06), ('Archer', 0.04), ('Green', 0.25), ('Glover', 0.04), ('Gibson', 0.09), ('Spencer', 0.08), ('Warner', 0.04), ('Webb', 0.12), ('Whitehouse', 0.03), ('Dean', 0.06), ('Griffiths', 0.16), ('Clark', 0.2), ('Hardy', 0.05), ('Iqbal', 0.03), ('Baldwin', 0.04), ("O'Neill", 0.06), ('Blake', 0.05), ('Lees', 0.03), ('Harvey', 0.1), ('Clarke', 0.24), ('Daniels', 0.04), ('Browne', 0.03), ('Macdonald', 0.04), ('Kirk', 0.04), ('Khan', 0.14), ('Davidson', 0.05), ('Dale', 0.04), ('Sanders', 0.04), ('Wilkins', 0.04), ('Connor', 0.03), ('Daly', 0.03), ('Lane', 0.06), ('Kennedy', 0.06), ('Bray', 0.03), ('Burrows', 0.04), ('Hayes', 0.07), ('Wyatt', 0.03), ('Gould', 0.03), ('Dyer', 0.03), ('Nash', 0.05), ('Bryan', 0.03), ('Pope', 0.03), ('Fraser', 0.04), ('Steele', 0.03), ('Walsh', 0.09), ('Wade', 0.04), ('Marsden', 0.03), ('Humphries', 0.03), ("O'Brien", 0.08), ('Thompson', 0.28), ('Lord', 0.03), ('Coleman', 0.06), ('Jarvis', 0.04), ('Noble', 0.03), ('Williamson', 0.06), ('Carpenter', 0.03), ('Gardner', 0.06), ('Farrell', 0.04), ('Clayton', 0.05), ('Akhtar', 0.05), ('Gallagher', 0.05), ('Skinner', 0.04), ('Birch', 0.04), ('Kay', 0.04), ('Barrett', 0.07), ('Bates', 0.06), ('Lucas', 0.04), ("O'Connor", 0.06), ('Chamberlain', 0.03), ('Chapman', 0.12), ('Ryan', 0.08), ('Thorpe', 0.04), ('Lawson', 0.04), ('Howell', 0.04), ('Martin', 0.23), ('Kelly', 0.16), ('Dobson', 0.04), ('Stevens', 0.1), ('Brennan', 0.04), ('Lloyd', 0.11), ('Quinn', 0.05), ('Morton', 0.04), ('Wilson', 0.35), ('Barnes', 0.11), ('Henry', 0.03), ('Smith', 1.15), ('Pritchard', 0.05), ('Phillips', 0.18), ('Dixon', 0.1), ('Sharpe', 0.03), ('Robertson', 0.07), ('White', 0.27), ('Bird', 0.06), ('Abbott', 0.04), ('Kirby', 0.04), ('Hussain', 0.11), ('Barber', 0.05), ('Harris', 0.25), ('Doyle', 0.05), ('Jordan', 0.05), ('Burns', 0.06), ('Hodgson', 0.06), ('Atkins', 0.04), ('Stokes', 0.05), ('Rogers', 0.12), ('Parkes', 0.03), ('Brookes', 0.04), ('Herbert', 0.03), ('Gordon', 0.05), ('Kemp', 0.05), ('Webster', 0.07), ('Sinclair', 0.03), ('McLean', 0.03), ('Saunders', 0.09), ('Stephens', 0.05), ('Newton', 0.07), ('Potter', 0.05), ('Storey', 0.03), ('Stanley', 0.04), ('Turnbull', 0.03), ('Duncan', 0.03), ('Rose', 0.08), ('Mills', 0.11), ('Sheppard', 0.03), ('Butcher', 0.03), ('Fry', 0.03), ('Ross', 0.06), ('Shepherd', 0.06), ('Goodwin', 0.05), ('Holt', 0.05), ('Haynes', 0.04), ('Cook', 0.15), ('Ward', 0.21), ('Godfrey', 0.03), ('Stone', 0.07), ('Dodd', 0.04), ('Parsons', 0.07), ('Ingram', 0.03), ('Nixon', 0.03), ('Evans', 0.39), ('Hargreaves', 0.03), ('Owen', 0.11), ('Chan', 0.03), ('Connolly', 0.03), ('Charlton', 0.03), ('Middleton', 0.04), ('Hyde', 0.03), ('Patel', 0.24), ('Owens', 0.03), ('Lamb', 0.04), ('Palmer', 0.11), ('Cooper', 0.22), ('McCarthy', 0.06), ('Black', 0.04), ('Dickinson', 0.04), ('Gilbert', 0.05), ('Leach', 0.03), ('North', 0.03), ('Byrne', 0.06), ('Frost', 0.05), ('Simmons', 0.04), ('Matthews', 0.11), ('Alexander', 0.04), ('Ahmed', 0.1), ('Gibbons', 0.03), ('Stevenson', 0.05), ('Rowley', 0.03), ('Miles', 0.05), ('Hanson', 0.03), ('Bolton', 0.03), ('Craig', 0.03), ('Ali', 0.12), ('Carroll', 0.04), ('Allan', 0.03), ('Sanderson', 0.03), ('Fletcher', 0.1), ('Burton', 0.08), ('Oliver', 0.07), ('Davison', 0.04), ('Douglas', 0.04), ('Field', 0.04), ('Pickering', 0.03), ('Pugh', 0.04), ('Rowe', 0.05), ('Mahmood', 0.03), ('Sykes', 0.03), ('Crawford', 0.03), ('Williams', 0.66), ('Parkin', 0.03), ('Patterson', 0.04), ('Power', 0.03), ('Price', 0.17), ('Murphy', 0.14), ('Hale', 0.03), ('Nicholls', 0.06), ('Hall', 0.25), ('Jones', 0.94), ('Hughes', 0.26), ('Stephenson', 0.05), ('Morley', 0.04), ('Knight', 0.11), ('Kerr', 0.03), ('Heath', 0.04), ('Pollard', 0.03), ('Lowe', 0.07), ("O'Sullivan", 0.04), ('Buckley', 0.05), ('Bond', 0.05), ('Dennis', 0.03), ('Lewis', 0.25), ('Weston', 0.04), ('Joyce', 0.03), ('Reynolds', 0.09), ('Bishop', 0.06), ('Norris', 0.04), ('Barry', 0.03), ('Whittaker', 0.04), ('Carey', 0.03), ('Hill', 0.22), ('Kent', 0.04), ('Ashton', 0.04), ('Wilkinson', 0.13), ('Powell', 0.12), ('Henderson', 0.06), ('Freeman', 0.06), ('Dunn', 0.07), ('Kaur', 0.09), ('French', 0.04), ('Parry', 0.06), ('Walton', 0.06), ('Fisher', 0.1), ('Naylor', 0.03), ('Duffy', 0.04), ('Humphreys', 0.04), ('Randall', 0.03), ('Bevan', 0.03), ('Doherty', 0.03), ('Moore', 0.21), ('Armstrong', 0.07), ('Sullivan', 0.05), ('Swift', 0.03), ('Pearce', 0.09), ('Tyler', 0.03), ('Bradshaw', 0.04), ('Allen', 0.19), ('Mellor', 0.03), ('Whitehead', 0.05), ('Jackson', 0.24), ('Grant', 0.07), ('Fox', 0.09), ('Wright', 0.28), ('Anderson', 0.13), ('Foster', 0.13), ('Gibbs', 0.04), ('Butler', 0.11), ('Jenkins', 0.1), ('John', 0.04), ('Morrison', 0.04), ('Talbot', 0.03), ('Blackburn', 0.03), ('Osborne', 0.05), ('Flynn', 0.04), ('Richards', 0.14), ('Hurst', 0.03), ('Bibi', 0.05), ('Houghton', 0.03), ('Johnson', 0.34), ('Yates', 0.06), ('Mistry', 0.03), ('Donnelly', 0.03), ('Parkinson', 0.04), ('Thomson', 0.05), ('Woods', 0.07), ('Todd', 0.04), ('Dawson', 0.08), ('Hart', 0.07), ('Graham', 0.1), ('Berry', 0.07), ('Willis', 0.05), ('Miah', 0.04), ('Brooks', 0.09), ('Horton', 0.03), ('Riley', 0.07), ('Lambert', 0.05), ('Waters', 0.04), ('Lynch', 0.05), ('Moss', 0.06), ('Slater', 0.05), ('Knowles', 0.04), ('Benson', 0.03), ('Adams', 0.13), ('King', 0.2), ('Davies', 0.48), ('Richardson', 0.15), ('Vincent', 0.03), ('Holmes', 0.11), ('Conway', 0.03), ('Marshall', 0.14), ('Faulkner', 0.03), ('Garner', 0.03), ('Booth', 0.08), ('Harrison', 0.2), ('Campbell', 0.11), ('Cole', 0.08), ('Goddard', 0.04), ('Walters', 0.05), ('Ellis', 0.13), ('Edwards', 0.27), ('Peters', 0.04), ('Atkinson', 0.08), ('Wood', 0.24), ('Briggs', 0.04), ('Elliott', 0.09), ('Chandler', 0.03), ('Hope', 0.03), ('Hunter', 0.07), ('Newman', 0.07), ('Pratt', 0.03), ('Rahman', 0.03), ('Hicks', 0.04), ('Cox', 0.14), ('Reid', 0.07), ('Morris', 0.21), ('Banks', 0.04), ('Myers', 0.03), ('Mitchell', 0.16), ('Davey', 0.04), ('Peacock', 0.03), ('Reed', 0.07), ('Carter', 0.15), ('Miller', 0.14), ('Perkins', 0.04), ('Read', 0.05), ('Hilton', 0.03), ('Moran', 0.03), ('Welch', 0.03), ('Vaughan', 0.04), ('Clements', 0.03), ('Griffin', 0.05), ('Russell', 0.1), ("O'Donnell", 0.03), ('Hobbs', 0.03), ('Marsh', 0.07), ('Porter', 0.07), ('Gill', 0.08), ('Leonard', 0.03), ('McKenzie', 0.03), ('Thornton', 0.04), ('Fitzgerald', 0.03), ('Greenwood', 0.05), ('Pearson', 0.1), ('James', 0.19), ('Coles', 0.03), ('Roberts', 0.33), ('Nelson', 0.05), ('Forster', 0.03), ('Gough', 0.03), ('Mann', 0.05), ('Law', 0.03), ('Barker', 0.1), ('Cartwright', 0.04), ('Bradley', 0.08), ('Sharp', 0.05), ('Warren', 0.06), ('Summers', 0.03), ('Little', 0.04), ('Perry', 0.08), ('Fuller', 0.04), ('West', 0.09), ('Mason', 0.12), ('Finch', 0.03), ('Norton', 0.03), ('Burke', 0.05), ('Holden', 0.04), ('Lee', 0.2), ('Smart', 0.04), ('Bull', 0.04), ('Bryant', 0.04), ('Gray', 0.12), ('Watts', 0.08), ('Brady', 0.03), ('Baker', 0.2), ('Barton', 0.05), ('Davis', 0.17), ('Baxter', 0.05), ('Taylor', 0.53), ('Carr', 0.07), ('Wong', 0.04), ('Cameron', 0.03), ('Gardiner', 0.03), ('Hawkins', 0.07), ('Shaw', 0.15), ('Wallace', 0.05), ('Young', 0.16), ('Shah', 0.06), ('Gregory', 0.07), ('Ball', 0.08), ('Norman', 0.04), ('Lawrence', 0.09), ('Bowen', 0.04), ('Wheeler', 0.05), ('Bartlett', 0.04), ('Sutton', 0.06), ('Lyons', 0.03), ('Hutchinson', 0.05), ('Poole', 0.05), ('Cooke', 0.06), ('Franklin', 0.03), ('Howe', 0.04), ('Walker', 0.27), ('Johnston', 0.05), ('Austin', 0.05), ('Chadwick', 0.03), ('Bell', 0.15), ('Wall', 0.04), ('Woodward', 0.05), ('Preston', 0.04), ('Bennett', 0.16), ('Murray', 0.1), ('Begum', 0.13), ('McDonald', 0.06), ('Hudson', 0.07), ('Cross', 0.06), ('Singh', 0.13), ('Howarth', 0.03), ('Hewitt', 0.05), ('Curtis', 0.06), ('Harding', 0.07), ('May', 0.05), ('Wells', 0.07), ('Giles', 0.03), ('Watson', 0.17), ('Nolan', 0.03), ('Andrews', 0.09), ('Hayward', 0.04), ('Schofield', 0.04), ('Hunt', 0.12), ('Robson', 0.06), ('Arnold', 0.05), ('Morgan', 0.19), ('Coates', 0.03), ('Page', 0.07), ('Simpson', 0.13), ('Stewart', 0.09), ('Robinson', 0.29), ('Fleming', 0.03), ('Scott', 0.18), ('Chambers', 0.06), ('Turner', 0.23), ('Watkins', 0.06)))
faker.providers.person.en_GB.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/no_NO/__init__.py----------------------------------------
faker.providers.person.no_NO.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/zh_CN/__init__.py----------------------------------------
A:faker.providers.person.zh_CN.__init__.pattern->self.random_element(self.romanized_formats)
faker.providers.person.zh_CN.__init__.Provider(PersonProvider)
faker.providers.person.zh_CN.__init__.Provider.first_romanized_name(cls)
faker.providers.person.zh_CN.__init__.Provider.last_romanized_name(cls)
faker.providers.person.zh_CN.__init__.Provider.romanized_name(self)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/bg_BG/__init__.py----------------------------------------
faker.providers.person.bg_BG.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/es_ES/__init__.py----------------------------------------
faker.providers.person.es_ES.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/hi_IN/__init__.py----------------------------------------
faker.providers.person.hi_IN.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/pt_PT/__init__.py----------------------------------------
faker.providers.person.pt_PT.__init__.Provider(PersonProvider)
faker.providers.person.pt_PT.__init__.Provider.prefix(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/dk_DK/__init__.py----------------------------------------
faker.providers.person.dk_DK.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/uk_UA/__init__.py----------------------------------------
faker.providers.person.uk_UA.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/sl_SI/__init__.py----------------------------------------
faker.providers.person.sl_SI.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/fr_FR/__init__.py----------------------------------------
faker.providers.person.fr_FR.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/es_MX/__init__.py----------------------------------------
faker.providers.person.es_MX.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/lv_LV/__init__.py----------------------------------------
faker.providers.person.lv_LV.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/en/__init__.py----------------------------------------
faker.providers.person.en.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/fa_IR/__init__.py----------------------------------------
faker.providers.person.fa_IR.__init__.Provider(PersonProvider)
faker.providers.person.fa_IR.__init__.Provider.suffix(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/ko_KR/__init__.py----------------------------------------
faker.providers.person.ko_KR.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/nl_NL/__init__.py----------------------------------------
faker.providers.person.nl_NL.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/cs_CZ/__init__.py----------------------------------------
faker.providers.person.cs_CZ.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/tr_TR/__init__.py----------------------------------------
faker.providers.person.tr_TR.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/en_US/__init__.py----------------------------------------
A:faker.providers.person.en_US.__init__.formats_female->OrderedDict((('{{first_name_female}} {{last_name}}', 0.97), ('{{prefix_female}} {{first_name_female}} {{last_name}}', 0.015), ('{{first_name_female}} {{last_name}} {{suffix_female}}', 0.02), ('{{prefix_female}} {{first_name_female}} {{last_name}} {{suffix_female}}', 0.005)))
A:faker.providers.person.en_US.__init__.formats_male->OrderedDict((('{{first_name_male}} {{last_name}}', 0.97), ('{{prefix_male}} {{first_name_male}} {{last_name}}', 0.015), ('{{first_name_male}} {{last_name}} {{suffix_male}}', 0.02), ('{{prefix_male}} {{first_name_male}} {{last_name}} {{suffix_male}}', 0.005)))
A:faker.providers.person.en_US.__init__.formats->OrderedDict((('{{first_name_male}} {{last_name}}', 0.97), ('{{prefix_male}} {{first_name_male}} {{last_name}}', 0.015), ('{{first_name_male}} {{last_name}} {{suffix_male}}', 0.02), ('{{prefix_male}} {{first_name_male}} {{last_name}} {{suffix_male}}', 0.005))).copy()
A:faker.providers.person.en_US.__init__.first_names_female->OrderedDict((('April', 0.004529083), ('Abigail', 0.002043839), ('Adriana', 0.000488767), ('Adrienne', 0.000622931), ('Aimee', 0.000424727), ('Alejandra', 0.000415754), ('Alexa', 0.000663005), ('Alexandra', 0.002835711), ('Alexandria', 0.000964993), ('Alexis', 0.003446735), ('Alice', 0.000589904), ('Alicia', 0.003766845), ('Alisha', 0.000475942), ('Alison', 0.001506047), ('Allison', 0.003740866), ('Alyssa', 0.00324341), ('Amanda', 0.015360768), ('Amber', 0.006928794), ('Amy', 0.012860314), ('Ana', 0.000853679), ('Andrea', 0.006747028), ('Angel', 0.001161117), ('Angela', 0.011954085), ('Angelica', 0.001102746), ('Angie', 0.00030166), ('Anita', 0.001383767), ('Ann', 0.002627483), ('Anna', 0.004691502), ('Anne', 0.002089582), ('Annette', 0.001487399), ('Ariana', 0.000412668), ('Ariel', 0.000615774), ('Ashlee', 0.000696534), ('Ashley', 0.014773009), ('Audrey', 0.001139165), ('Autumn', 0.000918594), ('Bailey', 0.000691916), ('Barbara', 0.004839169), ('Becky', 0.000960944), ('Belinda', 0.000502227), ('Beth', 0.002246113), ('Bethany', 0.001249385), ('Betty', 0.000840241), ('Beverly', 0.000990272), ('Bianca', 0.000624835), ('Bonnie', 0.001351901), ('Brandi', 0.002077216), ('Brandy', 0.002177499), ('Breanna', 0.000876003), ('Brenda', 0.005737124), ('Briana', 0.00093665), ('Brianna', 0.002543549), ('Bridget', 0.000787232), ('Brittany', 0.007258404), ('Brittney', 0.001566147), ('Brooke', 0.002410152), ('Caitlin', 0.001808319), ('Caitlyn', 0.000481194), ('Candace', 0.000550662), ('Candice', 0.000653199), ('Carla', 0.00195185), ('Carly', 0.000498725), ('Carmen', 0.000891783), ('Carol', 0.002972719), ('Caroline', 0.001198127), ('Carolyn', 0.002647225), ('Carrie', 0.002934659), ('Casey', 0.001177707), ('Cassandra', 0.002501243), ('Cassidy', 0.000452129), ('Cassie', 0.000344886), ('Catherine', 0.004460622), ('Cathy', 0.001413248), ('Charlene', 0.000538865), ('Charlotte', 0.000530417), ('Chelsea', 0.00280043), ('Chelsey', 0.000368501), ('Cheryl', 0.004166447), ('Cheyenne', 0.000696907), ('Chloe', 0.000565807), ('Christie', 0.000397873), ('Christina', 0.008735669), ('Christine', 0.007488758), ('Christy', 0.00141861), ('Cindy', 0.003360109), ('Claire', 0.000553835), ('Claudia', 0.00096055), ('Colleen', 0.001836203), ('Connie', 0.001821845), ('Courtney', 0.00484939), ('Cristina', 0.000328734), ('Crystal', 0.006365045), ('Cynthia', 0.007655379), ('Daisy', 0.000437443), ('Dana', 0.003395805), ('Danielle', 0.006671783), ('Darlene', 0.000952737), ('Dawn', 0.005014983), ('Deanna', 0.002049026), ('Debbie', 0.001842922), ('Deborah', 0.005386088), ('Debra', 0.004123572), ('Denise', 0.004592291), ('Desiree', 0.000991497), ('Destiny', 0.001055515), ('Diamond', 0.000331732), ('Diana', 0.003699348), ('Diane', 0.003058996), ('Dominique', 0.000847857), ('Donna', 0.00570819), ('Doris', 0.000398026), ('Dorothy', 0.000722426), ('Ebony', 0.000399624), ('Eileen', 0.000544271), ('Elaine', 0.000601175), ('Elizabeth', 0.014954075), ('Ellen', 0.000747267), ('Emily', 0.009100581), ('Emma', 0.001272059), ('Erica', 0.004344471), ('Erika', 0.002105537), ('Erin', 0.005450719), ('Evelyn', 0.000825095), ('Faith', 0.000427113), ('Felicia', 0.001717294), ('Frances', 0.000546897), ('Gabriela', 0.000526937), ('Gabriella', 0.00044123), ('Gabrielle', 0.001090096), ('Gail', 0.00071934), ('Gina', 0.002841095), ('Glenda', 0.000384982), ('Gloria', 0.001155623), ('Grace', 0.00087202), ('Gwendolyn', 0.000407831), ('Hailey', 0.000662917), ('Haley', 0.001557939), ('Hannah', 0.004189822), ('Hayley', 0.000478305), ('Heather', 0.010945254), ('Heidi', 0.002239941), ('Helen', 0.000636675), ('Holly', 0.003487028), ('Isabel', 0.000352305), ('Isabella', 0.000410282), ('Jackie', 0.000566748), ('Jaclyn', 0.00047708), ('Jacqueline', 0.004811242), ('Jade', 0.000446264), ('Jaime', 0.000853175), ('Jamie', 0.005067663), ('Jane', 0.0009486), ('Janet', 0.002489993), ('Janice', 0.001593308), ('Jasmin', 0.000333374), ('Jasmine', 0.003025422), ('Jean', 0.000815969), ('Jeanette', 0.000767293), ('Jeanne', 0.000515381), ('Jenna', 0.001804052), ('Jennifer', 0.029218839), ('Jenny', 0.000932667), ('Jessica', 0.020047608), ('Jill', 0.003253018), ('Jillian', 0.000988587), ('Jo', 0.000442083), ('Joan', 0.000802793), ('Joann', 0.000544336), ('Joanna', 0.001176284), ('Joanne', 0.000729824), ('Jocelyn', 0.000456878), ('Jodi', 0.001252405), ('Jody', 0.000741861), ('Jordan', 0.001653057), ('Joy', 0.000916515), ('Joyce', 0.001009488), ('Judith', 0.000870706), ('Judy', 0.001101586), ('Julia', 0.003301891), ('Julie', 0.008211731), ('Kaitlin', 0.000674473), ('Kaitlyn', 0.001478623), ('Kara', 0.001549119), ('Karen', 0.009643845), ('Kari', 0.000794323), ('Karina', 0.000494764), ('Karla', 0.000387696), ('Katelyn', 0.001476128), ('Katherine', 0.006581479), ('Kathleen', 0.00503549), ('Kathryn', 0.004177806), ('Kathy', 0.002710214), ('Katie', 0.003056216), ('Katrina', 0.001565446), ('Kayla', 0.004621465), ('Kaylee', 0.000551734), ('Kelli', 0.000932163), ('Kellie', 0.000299187), ('Kelly', 0.009342929), ('Kelsey', 0.002470383), ('Kendra', 0.001401079), ('Kerri', 0.000316215), ('Kerry', 0.000352984), ('Kiara', 0.000390037), ('Kim', 0.002518642), ('Kimberly', 0.015594077), ('Kirsten', 0.000369486), ('Krista', 0.001266872), ('Kristen', 0.004345587), ('Kristi', 0.001022926), ('Kristie', 0.000380189), ('Kristin', 0.003613728), ('Kristina', 0.002316281), ('Kristine', 0.000977709), ('Kristy', 0.001097734), ('Krystal', 0.001238113), ('Kylie', 0.00049739), ('Lacey', 0.00045469), ('Latasha', 0.00032904), ('Latoya', 0.000646371), ('Laura', 0.010815096), ('Lauren', 0.007015421), ('Laurie', 0.002200786), ('Leah', 0.001997571), ('Leslie', 0.003606134), ('Linda', 0.006437751), ('Lindsay', 0.002185466), ('Lindsey', 0.002646153), ('Lisa', 0.01872729), ('Loretta', 0.000482945), ('Lori', 0.006040316), ('Lorraine', 0.000486753), ('Lydia', 0.000370274), ('Lynn', 0.001522308), ('Mackenzie', 0.000761056), ('Madeline', 0.000808921), ('Madison', 0.002011184), ('Makayla', 0.000439391), ('Mallory', 0.000688633), ('Mandy', 0.000355566), ('Marcia', 0.000403213), ('Margaret', 0.003839968), ('Maria', 0.006593123), ('Mariah', 0.00097598), ('Marie', 0.001520229), ('Marilyn', 0.000590889), ('Marisa', 0.000339983), ('Marissa', 0.001582627), ('Martha', 0.001290028), ('Mary', 0.014288466), ('Maureen', 0.000753855), ('Mckenzie', 0.000334512), ('Meagan', 0.000729999), ('Megan', 0.007686786), ('Meghan', 0.001481578), ('Melanie', 0.003400117), ('Melinda', 0.002078113), ('Melissa', 0.014890692), ('Melody', 0.000404264), ('Mercedes', 0.000334643), ('Meredith', 0.000766987), ('Mia', 0.000319935), ('Michaela', 0.000506998), ('Michele', 0.003519551), ('Michelle', 0.01527423), ('Mikayla', 0.000410195), ('Mindy', 0.000306891), ('Miranda', 0.001421193), ('Misty', 0.001564614), ('Molly', 0.001710641), ('Monica', 0.004324095), ('Monique', 0.001272125), ('Morgan', 0.002527025), ('Nancy', 0.005023343), ('Natalie', 0.003658398), ('Natasha', 0.001739815), ('Nichole', 0.001001237), ('Nicole', 0.011156655), ('Nina', 0.000298115), ('Norma', 0.000470754), ('Olivia', 0.001967609), ('Paige', 0.001106313), ('Pam', 0.000374454), ('Pamela', 0.005816222), ('Patricia', 0.008349353), ('Patty', 0.000383493), ('Paula', 0.002478284), ('Peggy', 0.000810606), ('Penny', 0.000836564), ('Phyllis', 0.000562437), ('Priscilla', 0.000350226), ('Rachael', 0.001098128), ('Rachel', 0.00876108), ('Raven', 0.000404855), ('Rebecca', 0.010563161), ('Rebekah', 0.000858581), ('Regina', 0.001941739), ('Renee', 0.00257883), ('Rhonda', 0.002879221), ('Rita', 0.000719187), ('Roberta', 0.000461715), ('Robin', 0.00409199), ('Robyn', 0.00032138), ('Rose', 0.000697125), ('Ruth', 0.001041946), ('Sabrina', 0.001920969), ('Sally', 0.000532912), ('Samantha', 0.008186124), ('Sandra', 0.006473426), ('Sandy', 0.000497106), ('Sara', 0.005619879), ('Sarah', 0.014434273), ('Savannah', 0.000978344), ('Selena', 0.000329106), ('Shannon', 0.005952552), ('Shari', 0.000449043), ('Sharon', 0.004796469), ('Shawna', 0.000354209), ('Sheena', 0.000355763), ('Sheila', 0.00220129), ('Shelby', 0.001575601), ('Shelia', 0.000403673), ('Shelley', 0.000922227), ('Shelly', 0.001339469), ('Sheri', 0.000913166), ('Sherri', 0.001285038), ('Sherry', 0.002445235), ('Sheryl', 0.00057025), ('Shirley', 0.000833259), ('Sierra', 0.000954816), ('Sonia', 0.000332739), ('Sonya', 0.000914085), ('Sophia', 0.000535976), ('Stacey', 0.002836761), ('Stacie', 0.0003903), ('Stacy', 0.00311717), ('Stefanie', 0.00034644), ('Stephanie', 0.013595762), ('Sue', 0.000472877), ('Summer', 0.000411508), ('Susan', 0.0088973), ('Suzanne', 0.001943577), ('Sydney', 0.001220101), ('Sylvia', 0.000625798), ('Tabitha', 0.000428404), ('Tamara', 0.00212948), ('Tami', 0.000403651), ('Tammie', 0.00042337), ('Tammy', 0.006493584), ('Tanya', 0.002039024), ('Tara', 0.00316834), ('Tasha', 0.000355807), ('Taylor', 0.003996871), ('Teresa', 0.005060003), ('Terri', 0.001823903), ('Terry', 0.00060494), ('Theresa', 0.003492762), ('Tiffany', 0.006594283), ('Tina', 0.005186419), ('Toni', 0.000891695), ('Tonya', 0.002404133), ('Tracey', 0.001511146), ('Traci', 0.00086193), ('Tracie', 0.000301901), ('Tracy', 0.00498572), ('Tricia', 0.000449196), ('Valerie', 0.003218022), ('Vanessa', 0.003779189), ('Veronica', 0.003017805), ('Vicki', 0.00088653), ('Vickie', 0.000695199), ('Victoria', 0.005237677), ('Virginia', 0.001496482), ('Wanda', 0.001336186), ('Wendy', 0.004058263), ('Whitney', 0.001690768), ('Yesenia', 0.000331951), ('Yolanda', 0.001213819), ('Yvette', 0.000483427), ('Yvonne', 0.001005483), ('Zoe', 0.000367407)))
A:faker.providers.person.en_US.__init__.first_names_male->OrderedDict((('Aaron', 0.006741589), ('Adam', 0.007124922), ('Adrian', 0.001521889), ('Alan', 0.002344657), ('Albert', 0.001316595), ('Alec', 0.000442958), ('Alejandro', 0.000862489), ('Alex', 0.002111833), ('Alexander', 0.005215733), ('Alexis', 0.000277915), ('Alfred', 0.000318919), ('Allen', 0.001679613), ('Alvin', 0.00024794), ('Andre', 0.001400621), ('Andres', 0.000335574), ('Andrew', 0.013475074), ('Angel', 0.000902262), ('Anthony', 0.013783357), ('Antonio', 0.002392535), ('Arthur', 0.001342637), ('Austin', 0.003785615), ('Barry', 0.001102751), ('Benjamin', 0.006535474), ('Bernard', 0.000298691), ('Bill', 0.000430013), ('Billy', 0.001749806), ('Blake', 0.001218155), ('Bob', 0.000235731), ('Bobby', 0.001666977), ('Brad', 0.000984544), ('Bradley', 0.003845018), ('Brady', 0.000277522), ('Brandon', 0.009518346), ('Brendan', 0.000736758), ('Brent', 0.001889131), ('Brett', 0.002248371), ('Brian', 0.01597677), ('Bruce', 0.001883335), ('Bryan', 0.00456454), ('Bryce', 0.000457406), ('Caleb', 0.001485861), ('Calvin', 0.001168738), ('Cameron', 0.00180755), ('Carl', 0.002011802), ('Carlos', 0.00266638), ('Casey', 0.001440035), ('Cesar', 0.000304898), ('Chad', 0.003858817), ('Charles', 0.010889881), ('Chase', 0.000971942), ('Chris', 0.001389507), ('Christian', 0.003097779), ('Christopher', 0.02783596), ('Clarence', 0.000299289), ('Clayton', 0.000662222), ('Clifford', 0.00053078), ('Clinton', 0.000579307), ('Cody', 0.00353482), ('Cole', 0.000578811), ('Colin', 0.00078508), ('Collin', 0.000406057), ('Colton', 0.000520845), ('Connor', 0.000981073), ('Corey', 0.002476612), ('Cory', 0.001813005), ('Craig', 0.00338161), ('Cristian', 0.000333847), ('Curtis', 0.002140235), ('Dakota', 0.000797614), ('Dale', 0.001171354), ('Dalton', 0.000615113), ('Damon', 0.00034308), ('Dan', 0.000388496), ('Daniel', 0.018881874), ('Danny', 0.001873879), ('Darin', 0.000234962), ('Darius', 0.000336189), ('Darrell', 0.001218582), ('Darren', 0.001253738), ('Darryl', 0.00067019), ('Daryl', 0.000260918), ('Dave', 0.000269673), ('David', 0.031073833), ('Dean', 0.000965375), ('Dennis', 0.003318992), ('Derek', 0.003095299), ('Derrick', 0.001955921), ('Devin', 0.001312474), ('Devon', 0.000485877), ('Dillon', 0.000558361), ('Dominic', 0.000438221), ('Don', 0.000378322), ('Donald', 0.005689572), ('Douglas', 0.004513687), ('Drew', 0.000596868), ('Duane', 0.00061855), ('Dustin', 0.003088938), ('Dwayne', 0.000711382), ('Dylan', 0.002329096), ('Earl', 0.000348347), ('Eddie', 0.0007944), ('Edgar', 0.000379536), ('Eduardo', 0.000465358), ('Edward', 0.005702242), ('Edwin', 0.001117833), ('Elijah', 0.000592183), ('Eric', 0.012024659), ('Erik', 0.001997096), ('Ernest', 0.000746556), ('Ethan', 0.001143978), ('Eugene', 0.000784243), ('Evan', 0.001570691), ('Fernando', 0.000557608), ('Francis', 0.000330837), ('Francisco', 0.001084335), ('Frank', 0.003276449), ('Franklin', 0.000237561), ('Fred', 0.000396618), ('Frederick', 0.001104188), ('Gabriel', 0.001906504), ('Garrett', 0.001124861), ('Gary', 0.005023109), ('Gavin', 0.000295373), ('Gene', 0.00023426), ('Geoffrey', 0.000425978), ('George', 0.004423984), ('Gerald', 0.00165841), ('Gilbert', 0.000246726), ('Glen', 0.000374338), ('Glenn', 0.001111421), ('Gordon', 0.00027075), ('Grant', 0.00068322), ('Greg', 0.000623492), ('Gregg', 0.000235885), ('Gregory', 0.007676443), ('Guy', 0.000262645), ('Harold', 0.000929467), ('Harry', 0.000586934), ('Hayden', 0.000279454), ('Hector', 0.000798691), ('Henry', 0.001856232), ('Herbert', 0.000234226), ('Howard', 0.000712921), ('Hunter', 0.001034679), ('Ian', 0.001863192), ('Isaac', 0.001001951), ('Isaiah', 0.000625441), ('Ivan', 0.000350433), ('Jack', 0.001839748), ('Jackson', 0.000403253), ('Jacob', 0.007845384), ('Jaime', 0.000421378), ('Jake', 0.000565782), ('James', 0.029601617), ('Jamie', 0.00093552), ('Jared', 0.002538802), ('Jason', 0.01520513), ('Javier', 0.000625202), ('Jay', 0.001411462), ('Jeff', 0.001271436), ('Jeffery', 0.002627873), ('Jeffrey', 0.01225709), ('Jeremiah', 0.001209605), ('Jeremy', 0.006336079), ('Jermaine', 0.000450156), ('Jerome', 0.000634299), ('Jerry', 0.003150273), ('Jesse', 0.003884552), ('Jesus', 0.001628965), ('Jim', 0.000567714), ('Jimmy', 0.001607489), ('Joe', 0.001621544), ('Joel', 0.002537742), ('John', 0.028683008), ('Johnathan', 0.000840448), ('Johnny', 0.002117065), ('Jon', 0.001561184), ('Jonathan', 0.009963971), ('Jonathon', 0.000701157), ('Jordan', 0.003451546), ('Jorge', 0.001180553), ('Jose', 0.005368207), ('Joseph', 0.018604763), ('Joshua', 0.014808101), ('Juan', 0.003233598), ('Julian', 0.000693736), ('Justin', 0.010197889), ('Karl', 0.000362437), ('Keith', 0.004622866), ('Kelly', 0.000775283), ('Kenneth', 0.008318145), ('Kent', 0.000329418), ('Kerry', 0.000261448), ('Kevin', 0.014324157), ('Kirk', 0.0003801), ('Kristopher', 0.000580692), ('Kurt', 0.000716375), ('Kyle', 0.006350049), ('Lance', 0.001048495), ('Larry', 0.003658807), ('Lawrence', 0.001670294), ('Lee', 0.001223883), ('Leon', 0.000236347), ('Leonard', 0.000756713), ('Leroy', 0.000260234), ('Leslie', 0.000234637), ('Levi', 0.000347184), ('Logan', 0.001325812), ('Lonnie', 0.000258576), ('Louis', 0.001212255), ('Lucas', 0.001098237), ('Luis', 0.002427777), ('Luke', 0.001221455), ('Malik', 0.000306813), ('Manuel', 0.001331369), ('Marc', 0.001431947), ('Marco', 0.000290586), ('Marcus', 0.002604122), ('Mario', 0.001229337), ('Mark', 0.014382277), ('Martin', 0.002085226), ('Marvin', 0.000732962), ('Mason', 0.000562037), ('Mathew', 0.000605555), ('Matthew', 0.020425018), ('Maurice', 0.000777078), ('Max', 0.000311276), ('Maxwell', 0.000357478), ('Melvin', 0.00061932), ('Michael', 0.045602241), ('Micheal', 0.001273847), ('Miguel', 0.001416267), ('Mike', 0.001221797), ('Mitchell', 0.001747788), ('Nathan', 0.005039405), ('Nathaniel', 0.001887558), ('Neil', 0.000240331), ('Nicholas', 0.010021219), ('Nicolas', 0.000362522), ('Noah', 0.000960947), ('Norman', 0.000389043), ('Omar', 0.000639052), ('Oscar', 0.000946583), ('Parker', 0.000277522), ('Patrick', 0.007153255), ('Paul', 0.009272953), ('Pedro', 0.000275726), ('Perry', 0.000258644), ('Peter', 0.004340385), ('Philip', 0.002262956), ('Phillip', 0.00280273), ('Preston', 0.000292022), ('Ralph', 0.000836891), ('Randall', 0.001614722), ('Randy', 0.003021926), ('Ray', 0.000379451), ('Raymond', 0.003493952), ('Reginald', 0.00095108), ('Ricardo', 0.001197276), ('Richard', 0.014131961), ('Rick', 0.000440016), ('Rickey', 0.00023833), ('Ricky', 0.001856882), ('Riley', 0.000322031), ('Robert', 0.026938092), ('Roberto', 0.000906024), ('Rodney', 0.002180555), ('Roger', 0.002038032), ('Ronald', 0.00576775), ('Ronnie', 0.000905938), ('Ross', 0.00026863), ('Roy', 0.001311346), ('Ruben', 0.000774821), ('Russell', 0.002096221), ('Ryan', 0.01128178), ('Samuel', 0.00498019), ('Scott', 0.010580999), ('Sean', 0.005593456), ('Sergio', 0.000568518), ('Seth', 0.001537416), ('Shane', 0.002530218), ('Shannon', 0.000421583), ('Shaun', 0.000748761), ('Shawn', 0.004474546), ('Spencer', 0.000912094), ('Stanley', 0.000739032), ('Stephen', 0.007675365), ('Steve', 0.001407564), ('Steven', 0.013292898), ('Stuart', 0.000238826), ('Tanner', 0.000639292), ('Taylor', 0.00133036), ('Terrance', 0.000203311), ('Terrence', 0.000203704), ('Terry', 0.002873624), ('Theodore', 0.000596561), ('Thomas', 0.0143364), ('Tim', 0.000711126), ('Timothy', 0.012632608), ('Todd', 0.00414612), ('Tom', 0.000499283), ('Tommy', 0.000778737), ('Tony', 0.002511563), ('Tracy', 0.000728259), ('Travis', 0.004022458), ('Trevor', 0.001692523), ('Tristan', 0.000408759), ('Troy', 0.002695415), ('Tyler', 0.005962323), ('Tyrone', 0.000587207), ('Vernon', 0.000246401), ('Victor', 0.002340621), ('Vincent', 0.002494515), ('Walter', 0.001525891), ('Warren', 0.000317414), ('Wayne', 0.00160966), ('Wesley', 0.001733835), ('William', 0.020025989), ('Willie', 0.001379247), ('Wyatt', 0.000306591), ('Xavier', 0.000415222), ('Zachary', 0.005918634)))
A:faker.providers.person.en_US.__init__.first_names->OrderedDict((('Aaron', 0.006741589), ('Adam', 0.007124922), ('Adrian', 0.001521889), ('Alan', 0.002344657), ('Albert', 0.001316595), ('Alec', 0.000442958), ('Alejandro', 0.000862489), ('Alex', 0.002111833), ('Alexander', 0.005215733), ('Alexis', 0.000277915), ('Alfred', 0.000318919), ('Allen', 0.001679613), ('Alvin', 0.00024794), ('Andre', 0.001400621), ('Andres', 0.000335574), ('Andrew', 0.013475074), ('Angel', 0.000902262), ('Anthony', 0.013783357), ('Antonio', 0.002392535), ('Arthur', 0.001342637), ('Austin', 0.003785615), ('Barry', 0.001102751), ('Benjamin', 0.006535474), ('Bernard', 0.000298691), ('Bill', 0.000430013), ('Billy', 0.001749806), ('Blake', 0.001218155), ('Bob', 0.000235731), ('Bobby', 0.001666977), ('Brad', 0.000984544), ('Bradley', 0.003845018), ('Brady', 0.000277522), ('Brandon', 0.009518346), ('Brendan', 0.000736758), ('Brent', 0.001889131), ('Brett', 0.002248371), ('Brian', 0.01597677), ('Bruce', 0.001883335), ('Bryan', 0.00456454), ('Bryce', 0.000457406), ('Caleb', 0.001485861), ('Calvin', 0.001168738), ('Cameron', 0.00180755), ('Carl', 0.002011802), ('Carlos', 0.00266638), ('Casey', 0.001440035), ('Cesar', 0.000304898), ('Chad', 0.003858817), ('Charles', 0.010889881), ('Chase', 0.000971942), ('Chris', 0.001389507), ('Christian', 0.003097779), ('Christopher', 0.02783596), ('Clarence', 0.000299289), ('Clayton', 0.000662222), ('Clifford', 0.00053078), ('Clinton', 0.000579307), ('Cody', 0.00353482), ('Cole', 0.000578811), ('Colin', 0.00078508), ('Collin', 0.000406057), ('Colton', 0.000520845), ('Connor', 0.000981073), ('Corey', 0.002476612), ('Cory', 0.001813005), ('Craig', 0.00338161), ('Cristian', 0.000333847), ('Curtis', 0.002140235), ('Dakota', 0.000797614), ('Dale', 0.001171354), ('Dalton', 0.000615113), ('Damon', 0.00034308), ('Dan', 0.000388496), ('Daniel', 0.018881874), ('Danny', 0.001873879), ('Darin', 0.000234962), ('Darius', 0.000336189), ('Darrell', 0.001218582), ('Darren', 0.001253738), ('Darryl', 0.00067019), ('Daryl', 0.000260918), ('Dave', 0.000269673), ('David', 0.031073833), ('Dean', 0.000965375), ('Dennis', 0.003318992), ('Derek', 0.003095299), ('Derrick', 0.001955921), ('Devin', 0.001312474), ('Devon', 0.000485877), ('Dillon', 0.000558361), ('Dominic', 0.000438221), ('Don', 0.000378322), ('Donald', 0.005689572), ('Douglas', 0.004513687), ('Drew', 0.000596868), ('Duane', 0.00061855), ('Dustin', 0.003088938), ('Dwayne', 0.000711382), ('Dylan', 0.002329096), ('Earl', 0.000348347), ('Eddie', 0.0007944), ('Edgar', 0.000379536), ('Eduardo', 0.000465358), ('Edward', 0.005702242), ('Edwin', 0.001117833), ('Elijah', 0.000592183), ('Eric', 0.012024659), ('Erik', 0.001997096), ('Ernest', 0.000746556), ('Ethan', 0.001143978), ('Eugene', 0.000784243), ('Evan', 0.001570691), ('Fernando', 0.000557608), ('Francis', 0.000330837), ('Francisco', 0.001084335), ('Frank', 0.003276449), ('Franklin', 0.000237561), ('Fred', 0.000396618), ('Frederick', 0.001104188), ('Gabriel', 0.001906504), ('Garrett', 0.001124861), ('Gary', 0.005023109), ('Gavin', 0.000295373), ('Gene', 0.00023426), ('Geoffrey', 0.000425978), ('George', 0.004423984), ('Gerald', 0.00165841), ('Gilbert', 0.000246726), ('Glen', 0.000374338), ('Glenn', 0.001111421), ('Gordon', 0.00027075), ('Grant', 0.00068322), ('Greg', 0.000623492), ('Gregg', 0.000235885), ('Gregory', 0.007676443), ('Guy', 0.000262645), ('Harold', 0.000929467), ('Harry', 0.000586934), ('Hayden', 0.000279454), ('Hector', 0.000798691), ('Henry', 0.001856232), ('Herbert', 0.000234226), ('Howard', 0.000712921), ('Hunter', 0.001034679), ('Ian', 0.001863192), ('Isaac', 0.001001951), ('Isaiah', 0.000625441), ('Ivan', 0.000350433), ('Jack', 0.001839748), ('Jackson', 0.000403253), ('Jacob', 0.007845384), ('Jaime', 0.000421378), ('Jake', 0.000565782), ('James', 0.029601617), ('Jamie', 0.00093552), ('Jared', 0.002538802), ('Jason', 0.01520513), ('Javier', 0.000625202), ('Jay', 0.001411462), ('Jeff', 0.001271436), ('Jeffery', 0.002627873), ('Jeffrey', 0.01225709), ('Jeremiah', 0.001209605), ('Jeremy', 0.006336079), ('Jermaine', 0.000450156), ('Jerome', 0.000634299), ('Jerry', 0.003150273), ('Jesse', 0.003884552), ('Jesus', 0.001628965), ('Jim', 0.000567714), ('Jimmy', 0.001607489), ('Joe', 0.001621544), ('Joel', 0.002537742), ('John', 0.028683008), ('Johnathan', 0.000840448), ('Johnny', 0.002117065), ('Jon', 0.001561184), ('Jonathan', 0.009963971), ('Jonathon', 0.000701157), ('Jordan', 0.003451546), ('Jorge', 0.001180553), ('Jose', 0.005368207), ('Joseph', 0.018604763), ('Joshua', 0.014808101), ('Juan', 0.003233598), ('Julian', 0.000693736), ('Justin', 0.010197889), ('Karl', 0.000362437), ('Keith', 0.004622866), ('Kelly', 0.000775283), ('Kenneth', 0.008318145), ('Kent', 0.000329418), ('Kerry', 0.000261448), ('Kevin', 0.014324157), ('Kirk', 0.0003801), ('Kristopher', 0.000580692), ('Kurt', 0.000716375), ('Kyle', 0.006350049), ('Lance', 0.001048495), ('Larry', 0.003658807), ('Lawrence', 0.001670294), ('Lee', 0.001223883), ('Leon', 0.000236347), ('Leonard', 0.000756713), ('Leroy', 0.000260234), ('Leslie', 0.000234637), ('Levi', 0.000347184), ('Logan', 0.001325812), ('Lonnie', 0.000258576), ('Louis', 0.001212255), ('Lucas', 0.001098237), ('Luis', 0.002427777), ('Luke', 0.001221455), ('Malik', 0.000306813), ('Manuel', 0.001331369), ('Marc', 0.001431947), ('Marco', 0.000290586), ('Marcus', 0.002604122), ('Mario', 0.001229337), ('Mark', 0.014382277), ('Martin', 0.002085226), ('Marvin', 0.000732962), ('Mason', 0.000562037), ('Mathew', 0.000605555), ('Matthew', 0.020425018), ('Maurice', 0.000777078), ('Max', 0.000311276), ('Maxwell', 0.000357478), ('Melvin', 0.00061932), ('Michael', 0.045602241), ('Micheal', 0.001273847), ('Miguel', 0.001416267), ('Mike', 0.001221797), ('Mitchell', 0.001747788), ('Nathan', 0.005039405), ('Nathaniel', 0.001887558), ('Neil', 0.000240331), ('Nicholas', 0.010021219), ('Nicolas', 0.000362522), ('Noah', 0.000960947), ('Norman', 0.000389043), ('Omar', 0.000639052), ('Oscar', 0.000946583), ('Parker', 0.000277522), ('Patrick', 0.007153255), ('Paul', 0.009272953), ('Pedro', 0.000275726), ('Perry', 0.000258644), ('Peter', 0.004340385), ('Philip', 0.002262956), ('Phillip', 0.00280273), ('Preston', 0.000292022), ('Ralph', 0.000836891), ('Randall', 0.001614722), ('Randy', 0.003021926), ('Ray', 0.000379451), ('Raymond', 0.003493952), ('Reginald', 0.00095108), ('Ricardo', 0.001197276), ('Richard', 0.014131961), ('Rick', 0.000440016), ('Rickey', 0.00023833), ('Ricky', 0.001856882), ('Riley', 0.000322031), ('Robert', 0.026938092), ('Roberto', 0.000906024), ('Rodney', 0.002180555), ('Roger', 0.002038032), ('Ronald', 0.00576775), ('Ronnie', 0.000905938), ('Ross', 0.00026863), ('Roy', 0.001311346), ('Ruben', 0.000774821), ('Russell', 0.002096221), ('Ryan', 0.01128178), ('Samuel', 0.00498019), ('Scott', 0.010580999), ('Sean', 0.005593456), ('Sergio', 0.000568518), ('Seth', 0.001537416), ('Shane', 0.002530218), ('Shannon', 0.000421583), ('Shaun', 0.000748761), ('Shawn', 0.004474546), ('Spencer', 0.000912094), ('Stanley', 0.000739032), ('Stephen', 0.007675365), ('Steve', 0.001407564), ('Steven', 0.013292898), ('Stuart', 0.000238826), ('Tanner', 0.000639292), ('Taylor', 0.00133036), ('Terrance', 0.000203311), ('Terrence', 0.000203704), ('Terry', 0.002873624), ('Theodore', 0.000596561), ('Thomas', 0.0143364), ('Tim', 0.000711126), ('Timothy', 0.012632608), ('Todd', 0.00414612), ('Tom', 0.000499283), ('Tommy', 0.000778737), ('Tony', 0.002511563), ('Tracy', 0.000728259), ('Travis', 0.004022458), ('Trevor', 0.001692523), ('Tristan', 0.000408759), ('Troy', 0.002695415), ('Tyler', 0.005962323), ('Tyrone', 0.000587207), ('Vernon', 0.000246401), ('Victor', 0.002340621), ('Vincent', 0.002494515), ('Walter', 0.001525891), ('Warren', 0.000317414), ('Wayne', 0.00160966), ('Wesley', 0.001733835), ('William', 0.020025989), ('Willie', 0.001379247), ('Wyatt', 0.000306591), ('Xavier', 0.000415222), ('Zachary', 0.005918634))).copy()
A:faker.providers.person.en_US.__init__.last_names->OrderedDict((('Smith', 0.021712045), ('Johnson', 0.01696938), ('Williams', 0.014016962), ('Brown', 0.012610763), ('Jones', 0.012451866), ('Miller', 0.010305045), ('Davis', 0.009798219), ('Garcia', 0.007842422), ('Rodriguez', 0.007348561), ('Wilson', 0.007154951), ('Martinez', 0.007082045), ('Anderson', 0.006966203), ('Taylor', 0.006582218), ('Thomas', 0.006493824), ('Hernandez', 0.006454314), ('Moore', 0.006383948), ('Martin', 0.006146745), ('Jackson', 0.006086567), ('Thompson', 0.005887767), ('White', 0.005843424), ('Lopez', 0.005679145), ('Lee', 0.005535909), ('Gonzalez', 0.005461513), ('Harris', 0.005423356), ('Clark', 0.005010598), ('Lewis', 0.00465937), ('Robinson', 0.004596305), ('Walker', 0.004580579), ('Perez', 0.00446375), ('Hall', 0.004327121), ('Young', 0.004257495), ('Allen', 0.00423392), ('Sanchez', 0.004031749), ('Wright', 0.004023754), ('King', 0.004011135), ('Scott', 0.003838487), ('Green', 0.003778053), ('Baker', 0.003776901), ('Adams', 0.00377448), ('Nelson', 0.003766713), ('Hill', 0.003762455), ('Ramirez', 0.003554281), ('Campbell', 0.003398636), ('Mitchell', 0.003357336), ('Roberts', 0.003346207), ('Carter', 0.0033127), ('Phillips', 0.003214932), ('Evans', 0.003127113), ('Turner', 0.003067045), ('Torres', 0.002971158), ('Parker', 0.002962725), ('Collins', 0.002904264), ('Edwards', 0.002897155), ('Stewart', 0.002859044), ('Flores', 0.002856449), ('Morris', 0.002848582), ('Nguyen', 0.002833697), ('Murphy', 0.00274576), ('Rivera', 0.002736275), ('Cook', 0.002693623), ('Rogers', 0.002690041), ('Morgan', 0.002525543), ('Peterson', 0.002513125), ('Cooper', 0.00246795), ('Reed', 0.0024437), ('Bailey', 0.002429747), ('Bell', 0.002419112), ('Gomez', 0.002408494), ('Kelly', 0.002379209), ('Howard', 0.002327986), ('Ward', 0.002321973), ('Cox', 0.002318775), ('Diaz', 0.00230051), ('Richardson', 0.002280051), ('Wood', 0.002259639), ('Watson', 0.002215168), ('Brooks', 0.002199808), ('Bennett', 0.002184311), ('Gray', 0.002162912), ('James', 0.002131032), ('Reyes', 0.002124517), ('Cruz', 0.002111304), ('Hughes', 0.002095999), ('Price', 0.002090206), ('Myers', 0.002054278), ('Long', 0.002042126), ('Foster', 0.002019703), ('Sanders', 0.002018442), ('Ross', 0.002009844), ('Morales', 0.001988655), ('Powell', 0.001978704), ('Sullivan', 0.001970362), ('Russell', 0.001968461), ('Ortiz', 0.001961617), ('Jenkins', 0.001952974), ('Gutierrez', 0.001945371), ('Perry', 0.001942986), ('Butler', 0.001926859), ('Barnes', 0.00192272), ('Fisher', 0.001921377), ('Henderson', 0.001919686), ('Coleman', 0.001906255), ('Simmons', 0.001842531), ('Patterson', 0.00181427), ('Jordan', 0.00180198), ('Reynolds', 0.001787233), ('Hamilton', 0.001775656), ('Graham', 0.001773307), ('Kim', 0.001773243), ('Gonzales', 0.001772028), ('Alexander', 0.001767542), ('Ramos', 0.001764371), ('Wallace', 0.001743026), ('Griffin', 0.001741893), ('West', 0.001722047), ('Cole', 0.001715916), ('Hayes', 0.001712992), ('Chavez', 0.001698299), ('Gibson', 0.001685096), ('Bryant', 0.001679075), ('Ellis', 0.001662381), ('Stevens', 0.001657657), ('Murray', 0.001630218), ('Ford', 0.001630062), ('Marshall', 0.001619244), ('Owens', 0.001611212), ('Mcdonald', 0.001609019), ('Harrison', 0.001604295), ('Ruiz', 0.001602943), ('Kennedy', 0.001568285), ('Wells', 0.001559139), ('Alvarez', 0.001542527), ('Woods', 0.0015425), ('Mendoza', 0.001540243), ('Castillo', 0.001511972), ('Olson', 0.001493963), ('Webb', 0.001493771), ('Washington', 0.001489705), ('Tucker', 0.001488763), ('Freeman', 0.001486507), ('Burns', 0.001481636), ('Henry', 0.001474683), ('Vasquez', 0.001461863), ('Snyder', 0.001456143), ('Simpson', 0.001445891), ('Crawford', 0.001444795), ('Jimenez', 0.001438892), ('Porter', 0.001433163), ('Mason', 0.0014207), ('Shaw', 0.001417849), ('Gordon', 0.001415674), ('Wagner', 0.001411855), ('Hunter', 0.001410886), ('Romero', 0.001405057), ('Hicks', 0.00140365), ('Dixon', 0.001389003), ('Hunt', 0.001388738), ('Palmer', 0.00137431), ('Robertson', 0.001373323), ('Black', 0.001372291), ('Holmes', 0.001372108), ('Stone', 0.001368782), ('Meyer', 0.001367521), ('Boyd', 0.001365803), ('Mills', 0.001351485), ('Warren', 0.001351458), ('Fox', 0.001346441), ('Rose', 0.001342485), ('Rice', 0.001338062), ('Moreno', 0.001334846), ('Schmidt', 0.001330067), ('Patel', 0.001325508), ('Ferguson', 0.001299832), ('Nichols', 0.001296908), ('Herrera', 0.0012864), ('Medina', 0.001273307), ('Ryan', 0.001273142), ('Fernandez', 0.001272841), ('Weaver', 0.001268354), ('Daniels', 0.001268034), ('Stephens', 0.001267724), ('Gardner', 0.001266974), ('Payne', 0.0012612), ('Kelley', 0.001256878), ('Dunn', 0.001251395), ('Pierce', 0.001247393), ('Arnold', 0.001245547), ('Tran', 0.001243537), ('Spencer', 0.001228443), ('Peters', 0.001226505), ('Hawkins', 0.001224998), ('Grant', 0.001224705), ('Hansen', 0.001219589), ('Castro', 0.001217578), ('Hoffman', 0.001212014), ('Hart', 0.001210378), ('Elliott', 0.001210296), ('Cunningham', 0.00120517), ('Knight', 0.001204841), ('Bradley', 0.001199624), ('Carroll', 0.001197166), ('Hudson', 0.001195091), ('Duncan', 0.001191674), ('Armstrong', 0.001187681), ('Berry', 0.001182409), ('Andrews', 0.001181632), ('Johnston', 0.001178114), ('Ray', 0.001176826), ('Lane', 0.001176214), ('Riley', 0.001169206), ('Carpenter', 0.001161101), ('Perkins', 0.001159986), ('Aguilar', 0.001154942), ('Silva', 0.001152795), ('Richards', 0.001148126), ('Willis', 0.001147888), ('Matthews', 0.001140688), ('Chapman', 0.001138632), ('Lawrence', 0.001135955), ('Garza', 0.00113421), ('Vargas', 0.001132583), ('Watkins', 0.001118832), ('Wheeler', 0.00111186), ('Larson', 0.001106195), ('Carlson', 0.001097606), ('Harper', 0.001095267), ('George', 0.001094444), ('Greene', 0.001092855), ('Burke', 0.001088935), ('Guzman', 0.001081762), ('Morrison', 0.001077641), ('Munoz', 0.001076133), ('Jacobs', 0.001055721), ('Obrien', 0.001054304), ('Lawson', 0.001052486), ('Franklin', 0.001049498), ('Lynch', 0.001045743), ('Bishop', 0.00104196), ('Carr', 0.001040662), ('Salazar', 0.001036788), ('Austin', 0.001033974), ('Mendez', 0.0010301), ('Gilbert', 0.001027084), ('Jensen', 0.001026408), ('Williamson', 0.001025348), ('Montgomery', 0.00102469), ('Harvey', 0.001024617), ('Oliver', 0.001020094), ('Howell', 0.001001756), ('Dean', 0.000998064), ('Hanson', 0.000996685), ('Weber', 0.000985601), ('Garrett', 0.000984788), ('Sims', 0.000979918), ('Burton', 0.000979132), ('Fuller', 0.000974783), ('Soto', 0.000974317), ('Mccoy', 0.000972946), ('Welch', 0.00096676), ('Chen', 0.000964384), ('Schultz', 0.000959067), ('Walters', 0.000952844), ('Reid', 0.00095034), ('Fields', 0.00094335), ('Walsh', 0.000943113), ('Little', 0.000938563), ('Fowler', 0.000937667), ('Bowman', 0.000934186), ('Davidson', 0.000932404), ('May', 0.000929498), ('Day', 0.000929041), ('Schneider', 0.00091878), ('Newman', 0.000918214), ('Brewer', 0.000917976), ('Lucas', 0.000917538), ('Holland', 0.000912677), ('Wong', 0.000908172), ('Banks', 0.000907276), ('Santos', 0.000904526), ('Curtis', 0.000904206), ('Pearson', 0.000902105), ('Delgado', 0.000901621), ('Valdez', 0.000901027), ('Pena', 0.000898605), ('Rios', 0.000882377), ('Douglas', 0.000881062), ('Sandoval', 0.000879947), ('Barrett', 0.000876228), ('Hopkins', 0.000864414), ('Keller', 0.000861645), ('Guerrero', 0.000860293), ('Stanley', 0.000857232), ('Bates', 0.000856555), ('Alvarado', 0.000856373), ('Beck', 0.000851238), ('Ortega', 0.000850963), ('Wade', 0.00084825), ('Estrada', 0.000848222), ('Contreras', 0.00084666), ('Barnett', 0.000843252), ('Caldwell', 0.00083458), ('Santiago', 0.00083119), ('Lambert', 0.000828001), ('Powers', 0.000826019), ('Chambers', 0.000825324), ('Nunez', 0.000824255), ('Craig', 0.000818618), ('Leonard', 0.000815027), ('Lowe', 0.000814844), ('Rhodes', 0.000812459), ('Byrd', 0.00081149), ('Gregory', 0.000811481), ('Shelton', 0.000807059), ('Frazier', 0.00080705), ('Becker', 0.000805122), ('Maldonado', 0.000804226), ('Fleming', 0.000803614), ('Vega', 0.000801595), ('Sutton', 0.000798351), ('Cohen', 0.000797008), ('Jennings', 0.00079529), ('Parks', 0.000788967), ('Mcdaniel', 0.000788702), ('Watts', 0.000787889), ('Barker', 0.000778688), ('Norris', 0.000778605), ('Vaughn', 0.000777006), ('Vazquez', 0.000775992), ('Holt', 0.000774018), ('Schwartz', 0.000773918), ('Steele', 0.000770756), ('Benson', 0.00076966), ('Neal', 0.000766151), ('Dominguez', 0.000765073), ('Horton', 0.000763173), ('Terry', 0.000762387), ('Wolfe', 0.000759417), ('Hale', 0.000757983), ('Lyons', 0.000751614), ('Graves', 0.000750892), ('Haynes', 0.000749595), ('Miles', 0.000748644), ('Park', 0.000748251), ('Warner', 0.000747648), ('Padilla', 0.000747475), ('Bush', 0.000744907), ('Thornton', 0.000741864), ('Mccarthy', 0.000740439), ('Mann', 0.00074032), ('Zimmerman', 0.000739608), ('Erickson', 0.000739534), ('Fletcher', 0.000739498), ('Mckinney', 0.00073661), ('Page', 0.000735487), ('Dawson', 0.000732718), ('Joseph', 0.000731256), ('Marquez', 0.000730534), ('Reeves', 0.00072931), ('Klein', 0.000728104), ('Espinoza', 0.000724787), ('Baldwin', 0.000723224), ('Moran', 0.000717696), ('Love', 0.000715659), ('Robbins', 0.000713996), ('Higgins', 0.000713685), ('Ball', 0.000708696), ('Cortez', 0.000708066), ('Le', 0.000707709), ('Griffith', 0.00070749), ('Bowen', 0.000704283), ('Sharp', 0.000702364), ('Cummings', 0.000700893), ('Ramsey', 0.000700144), ('Hardy', 0.000699988), ('Swanson', 0.000699358), ('Barber', 0.000699038), ('Acosta', 0.000698791), ('Luna', 0.000695593), ('Chandler', 0.000695474), ('Daniel', 0.000686529), ('Blair', 0.000686529), ('Cross', 0.00068652), ('Simon', 0.000683824), ('Dennis', 0.000683322), ('Oconnor', 0.000683066), ('Quinn', 0.00068101), ('Gross', 0.000678762), ('Navarro', 0.000675884), ('Moss', 0.000673874), ('Fitzgerald', 0.000671791), ('Doyle', 0.000671754), ('Mclaughlin', 0.000668191), ('Rojas', 0.00066767), ('Rodgers', 0.000667213), ('Stevenson', 0.000666034), ('Singh', 0.00066375), ('Yang', 0.000663613), ('Figueroa', 0.000662754), ('Harmon', 0.000661667), ('Newton', 0.000660881), ('Paul', 0.00066015), ('Manning', 0.000658514), ('Garner', 0.000658359), ('Mcgee', 0.000657198), ('Reese', 0.000655636), ('Francis', 0.000655353), ('Burgess', 0.000654265), ('Adkins', 0.000653571), ('Goodman', 0.000653151), ('Curry', 0.00065189), ('Brady', 0.000650345), ('Christensen', 0.000650062), ('Potter', 0.000649688), ('Walton', 0.000648719), ('Goodwin', 0.000642652), ('Mullins', 0.000642222), ('Molina', 0.000641537), ('Webster', 0.000640733), ('Fischer', 0.000640477), ('Campos', 0.000639152), ('Avila', 0.000638175), ('Sherman', 0.000638147), ('Todd', 0.000637873), ('Chang', 0.00063738), ('Blake', 0.000633021), ('Malone', 0.00063282), ('Wolf', 0.000629604), ('Hodges', 0.000629266), ('Juarez', 0.000628507), ('Gill', 0.000627722), ('Farmer', 0.000624158), ('Hines', 0.00062266), ('Gallagher', 0.00062202), ('Duran', 0.000621755), ('Hubbard', 0.000621527), ('Cannon', 0.000620631), ('Miranda', 0.0006181), ('Wang', 0.000617406), ('Saunders', 0.000614116), ('Tate', 0.000614098), ('Mack', 0.000613604), ('Hammond', 0.000612773), ('Carrillo', 0.000612691), ('Townsend', 0.000610854), ('Wise', 0.000609803), ('Ingram', 0.000609136), ('Barton', 0.000608743), ('Mejia', 0.000607939), ('Ayala', 0.000607766), ('Schroeder', 0.000606825), ('Hampton', 0.000606514), ('Rowe', 0.000604933), ('Parsons', 0.000604915), ('Frank', 0.000602311), ('Waters', 0.000601388), ('Strickland', 0.000601361), ('Osborne', 0.000601251), ('Maxwell', 0.000601041), ('Chan', 0.000600493), ('Deleon', 0.000599387), ('Norman', 0.000596381), ('Harrington', 0.00059512), ('Casey', 0.000592232), ('Patton', 0.00059184), ('Logan', 0.000590049), ('Bowers', 0.000589318), ('Mueller', 0.000587572), ('Glover', 0.00058643), ('Floyd', 0.000586074), ('Hartman', 0.000583205), ('Buchanan', 0.000583187), ('Cobb', 0.000582401), ('French', 0.00057701), ('Kramer', 0.000575858), ('Mccormick', 0.000572569), ('Clarke', 0.0005715), ('Tyler', 0.00057139), ('Gibbs', 0.000571208), ('Moody', 0.000569654), ('Conner', 0.000569572), ('Sparks', 0.000568649), ('Mcguire', 0.000567571), ('Leon', 0.000566822), ('Bauer', 0.000566319), ('Norton', 0.000564729), ('Pope', 0.000564227), ('Flynn', 0.000564199), ('Hogan', 0.000563322), ('Robles', 0.00056303), ('Salinas', 0.000562692), ('Yates', 0.000561029), ('Lindsey', 0.000559192), ('Lloyd', 0.000558781), ('Marsh', 0.000557365), ('Mcbride', 0.000556222), ('Owen', 0.000552449), ('Solis', 0.000548648), ('Pham', 0.00054777), ('Lang', 0.000546802), ('Pratt', 0.000546418), ('Lara', 0.000545779), ('Brock', 0.000545331), ('Ballard', 0.00054513), ('Trujillo', 0.000544664), ('Shaffer', 0.000541173), ('Drake', 0.000539602), ('Roman', 0.000539282), ('Aguirre', 0.00053835), ('Morton', 0.000537162), ('Stokes', 0.000536239), ('Lamb', 0.000535033), ('Pacheco', 0.000534841), ('Patrick', 0.00053231), ('Cochran', 0.000532091), ('Shepherd', 0.000529368), ('Cain', 0.000528801), ('Burnett', 0.000528674), ('Hess', 0.000528335), ('Li', 0.000528007), ('Cervantes', 0.000527084), ('Olsen', 0.000524087), ('Briggs', 0.000523538), ('Ochoa', 0.000522743), ('Cabrera', 0.000522387), ('Velasquez', 0.000522314), ('Montoya', 0.00052151), ('Roth', 0.000521099), ('Meyers', 0.000518485), ('Cardenas', 0.000517334), ('Fuentes', 0.000515717), ('Weiss', 0.000513085), ('Wilkins', 0.000512309), ('Hoover', 0.000512309), ('Nicholson', 0.000511559), ('Underwood', 0.000511441), ('Short', 0.000510801), ('Carson', 0.000510052), ('Morrow', 0.000508617), ('Colon', 0.000507228), ('Holloway', 0.000506808), ('Summers', 0.000506123), ('Bryan', 0.000505008), ('Petersen', 0.00050424), ('Mckenzie', 0.000503318), ('Serrano', 0.000503071), ('Wilcox', 0.000502431), ('Carey', 0.000501856), ('Clayton', 0.000501408), ('Poole', 0.000499864), ('Calderon', 0.000499727), ('Gallegos', 0.000499553), ('Greer', 0.000498996), ('Rivas', 0.000498786), ('Guerra', 0.000498667), ('Decker', 0.000497525), ('Collier', 0.000497196), ('Wall', 0.000497077), ('Whitaker', 0.000496547), ('Bass', 0.000496117), ('Flowers', 0.000495944), ('Davenport', 0.000495295), ('Conley', 0.000495185), ('Houston', 0.00049365), ('Huff', 0.000492426), ('Copeland', 0.00049132), ('Hood', 0.00049101), ('Monroe', 0.000488616), ('Massey', 0.00048847), ('Roberson', 0.000486085), ('Combs', 0.00048592), ('Franco', 0.000485747), ('Larsen', 0.000483937), ('Pittman', 0.000481434), ('Randall', 0.000479661), ('Skinner', 0.000479616), ('Wilkinson', 0.000479552), ('Kirby', 0.00047946), ('Cameron', 0.00047915), ('Bridges', 0.000477514), ('Anthony', 0.000476472), ('Richard', 0.000476399), ('Kirk', 0.00047565), ('Bruce', 0.000475175), ('Singleton', 0.000473283), ('Mathis', 0.000473274), ('Bradford', 0.000472635), ('Boone', 0.000472205), ('Abbott', 0.000471666), ('Charles', 0.000470734), ('Allison', 0.000470606), ('Sweeney', 0.00047057), ('Atkinson', 0.000470469), ('Horn', 0.000469473), ('Jefferson', 0.0004693), ('Rosales', 0.000469071), ('York', 0.000469053), ('Christian', 0.000467618), ('Phelps', 0.000467408), ('Farrell', 0.000466869), ('Castaneda', 0.000466814), ('Nash', 0.000466193), ('Dickerson', 0.000466156), ('Bond', 0.000465818), ('Wyatt', 0.00046485), ('Foley', 0.000464649), ('Chase', 0.000463963), ('Gates', 0.000463698), ('Vincent', 0.000462602), ('Mathews', 0.000462419), ('Hodge', 0.000462136), ('Garrison', 0.000461268), ('Trevino', 0.000461012), ('Villarreal', 0.000460071), ('Heath', 0.000459669), ('Dalton', 0.00045838), ('Valencia', 0.000457101), ('Callahan', 0.000456178), ('Hensley', 0.000455566), ('Atkins', 0.000454616), ('Huffman', 0.000454461), ('Roy', 0.000454351), ('Boyer', 0.000453218), ('Shields', 0.000452807), ('Lin', 0.000451016), ('Hancock', 0.000450742), ('Grimes', 0.000449965), ('Glenn', 0.000449929), ('Cline', 0.000449252), ('Delacruz', 0.00044917), ('Camacho', 0.000447726), ('Dillon', 0.0004462), ('Parrish', 0.000446109), ('Oneill', 0.000444583), ('Melton', 0.000444017), ('Booth', 0.000443889), ('Kane', 0.000443404), ('Berg', 0.000442975), ('Harrell', 0.000442893), ('Pitts', 0.000442811), ('Savage', 0.000441943), ('Wiggins', 0.000441833), ('Brennan', 0.000441294), ('Salas', 0.000441166), ('Marks', 0.000441157), ('Russo', 0.00043974), ('Sawyer', 0.000438397), ('Baxter', 0.000437283), ('Golden', 0.000437118), ('Hutchinson', 0.000436844), ('Liu', 0.000435528), ('Walter', 0.000435071), ('Mcdowell', 0.000434258), ('Wiley', 0.000434048), ('Rich', 0.00043381), ('Humphrey', 0.000433746), ('Johns', 0.000432093), ('Koch', 0.000432065), ('Suarez', 0.000431599), ('Hobbs', 0.000431462), ('Beard', 0.000430621), ('Gilmore', 0.000429909), ('Ibarra', 0.000428492), ('Keith', 0.00042714), ('Macias', 0.000427067), ('Khan', 0.000426829), ('Andrade', 0.000426729), ('Ware', 0.000426546), ('Stephenson', 0.000426363), ('Henson', 0.000425879), ('Wilkerson', 0.000425843), ('Dyer', 0.000425559), ('Mcclure', 0.000424929), ('Blackwell', 0.000424838), ('Mercado', 0.000424308), ('Tanner', 0.000424079), ('Eaton', 0.000423997), ('Clay', 0.000422727), ('Barron', 0.000422106), ('Beasley', 0.00042195), ('Oneal', 0.000421786), ('Small', 0.000418944), ('Preston', 0.000418944), ('Wu', 0.000418624), ('Zamora', 0.000418542), ('Macdonald', 0.000418323), ('Vance', 0.000418149), ('Snow', 0.000417473), ('Mcclain', 0.000416294), ('Stafford', 0.000414366), ('Orozco', 0.000413818), ('Barry', 0.000411579), ('English', 0.00041147), ('Shannon', 0.000410282), ('Kline', 0.000410264), ('Jacobson', 0.000410026), ('Woodard', 0.000409624), ('Huang', 0.000408573), ('Kemp', 0.000408445), ('Mosley', 0.000408418), ('Prince', 0.000407888), ('Merritt', 0.00040776), ('Hurst', 0.000407404), ('Villanueva', 0.000407248), ('Roach', 0.000406188), ('Nolan', 0.000405887), ('Lam', 0.000405558), ('Yoder', 0.000404279), ('Mccullough', 0.000403164), ('Lester', 0.0004013), ('Santana', 0.000400898), ('Valenzuela', 0.000399938), ('Winters', 0.000399865), ('Barrera', 0.000399482), ('Orr', 0.000398988), ('Leach', 0.000398988), ('Berger', 0.000397983), ('Mckee', 0.000397974), ('Strong', 0.000396832), ('Conway', 0.000396512), ('Stein', 0.000395927), ('Whitehead', 0.000395735), ('Bullock', 0.000393095), ('Escobar', 0.000392492), ('Knox', 0.000392327), ('Meadows', 0.000391843), ('Solomon', 0.000391432), ('Velez', 0.000391258), ('Odonnell', 0.000391094), ('Kerr', 0.000390692), ('Stout', 0.000389878), ('Blankenship', 0.000389824), ('Browning', 0.000389632), ('Kent', 0.00038922), ('Lozano', 0.000388946), ('Bartlett', 0.000388444), ('Pruitt', 0.000387996), ('Buck', 0.000387795), ('Barr', 0.000387713), ('Gaines', 0.000387137), ('Durham', 0.000387101), ('Gentry', 0.000387028), ('Mcintyre', 0.000386826), ('Sloan', 0.000386333), ('Rocha', 0.000385036), ('Melendez', 0.000385036), ('Herman', 0.000384597), ('Sexton', 0.000384496), ('Moon', 0.000384332), ('Hendricks', 0.00038266), ('Rangel', 0.000382559), ('Stark', 0.000382514), ('Lowery', 0.00038075), ('Hardin', 0.000380695), ('Hull', 0.000380622), ('Sellers', 0.000379754), ('Ellison', 0.000378822), ('Calhoun', 0.000378758), ('Gillespie', 0.000378219), ('Mora', 0.000377808), ('Knapp', 0.000377068), ('Mccall', 0.000376739), ('Morse', 0.000375652), ('Dorsey', 0.000375579), ('Weeks', 0.000375113), ('Nielsen', 0.000374692), ('Livingston', 0.000374299), ('Leblanc', 0.000373925), ('Mclean', 0.00037345), ('Bradshaw', 0.000372746), ('Glass', 0.000372106), ('Middleton', 0.00037196), ('Buckley', 0.000371942), ('Schaefer', 0.000371549), ('Frost', 0.000370809), ('Howe', 0.000370562), ('House', 0.000369849), ('Mcintosh', 0.00036963), ('Ho', 0.000369265), ('Pennington', 0.000368588), ('Reilly', 0.000368324), ('Hebert', 0.000368077), ('Mcfarland', 0.00036772), ('Hickman', 0.000367538), ('Noble', 0.000367474), ('Spears', 0.000367346), ('Conrad', 0.000366423), ('Arias', 0.000366277), ('Galvan', 0.000365911), ('Velazquez', 0.000365765), ('Huynh', 0.000365591), ('Frederick', 0.000364659), ('Randolph', 0.000363134), ('Cantu', 0.000361845), ('Fitzpatrick', 0.000360931), ('Mahoney', 0.000360374), ('Peck', 0.000360301), ('Villa', 0.000360027), ('Michael', 0.000359725), ('Donovan', 0.000358821), ('Mcconnell', 0.000358209), ('Walls', 0.00035787), ('Boyle', 0.000357642), ('Mayer', 0.000357368), ('Zuniga', 0.000356875), ('Giles', 0.000356372), ('Pineda', 0.000356345), ('Pace', 0.000356125), ('Hurley', 0.000356089), ('Mays', 0.000355568), ('Mcmillan', 0.000355403), ('Crosby', 0.000354928), ('Ayers', 0.000354855), ('Case', 0.000354152), ('Bentley', 0.00035374), ('Shepard', 0.000353658), ('Everett', 0.000353631), ('Pugh', 0.00035353), ('David', 0.000353238), ('Mcmahon', 0.000352306), ('Dunlap', 0.000351931), ('Bender', 0.000351456), ('Hahn', 0.000350451), ('Harding', 0.000350323), ('Acevedo', 0.000349336), ('Raymond', 0.00034866), ('Blackburn', 0.000348468), ('Duffy', 0.000346869), ('Landry', 0.00034686), ('Dougherty', 0.00034633), ('Bautista', 0.000345818), ('Shah', 0.00034569), ('Potts', 0.000344356), ('Arroyo', 0.000344274), ('Valentine', 0.000344192), ('Meza', 0.000344128), ('Gould', 0.00034411), ('Vaughan', 0.000343479), ('Fry', 0.000343032), ('Rush', 0.000342374), ('Avery', 0.0003421), ('Herring', 0.000341305), ('Dodson', 0.000340802), ('Clements', 0.000340245), ('Sampson', 0.000340217), ('Tapia', 0.000339916), ('Bean', 0.000339404), ('Lynn', 0.000339221), ('Crane', 0.000339203), ('Farley', 0.000339139), ('Cisneros', 0.000338536), ('Benton', 0.000338372), ('Ashley', 0.000338271), ('Mckay', 0.000337604), ('Finley', 0.000336928), ('Best', 0.000336818), ('Blevins', 0.000336626), ('Friedman', 0.000336553), ('Moses', 0.00033638), ('Sosa', 0.00033637), ('Blanchard', 0.000335923), ('Huber', 0.000335603), ('Frye', 0.000335484), ('Krueger', 0.000335283), ('Bernard', 0.000333931), ('Rosario', 0.000333867), ('Rubio', 0.000333794), ('Mullen', 0.000332981), ('Benjamin', 0.000332953), ('Haley', 0.000332898), ('Chung', 0.000332798), ('Moyer', 0.000332789), ('Choi', 0.000332505), ('Horne', 0.000331573), ('Yu', 0.000331546), ('Woodward', 0.000331153), ('Ali', 0.000329664), ('Nixon', 0.00032928), ('Hayden', 0.000329161), ('Rivers', 0.000328759), ('Estes', 0.000327471), ('Mccarty', 0.000326365), ('Richmond', 0.000326338), ('Stuart', 0.00032621), ('Maynard', 0.000325726), ('Brandt', 0.000325433), ('Oconnell', 0.000325378), ('Hanna', 0.000325278), ('Sanford', 0.000324967), ('Sheppard', 0.000324867), ('Church', 0.00032473), ('Burch', 0.000324565), ('Levy', 0.000324044), ('Rasmussen', 0.000323944), ('Coffey', 0.000323843), ('Ponce', 0.000323459), ('Faulkner', 0.000323359), ('Donaldson', 0.000323341), ('Schmitt', 0.000322783), ('Novak', 0.000322381), ('Costa', 0.000321879), ('Montes', 0.000321595), ('Booker', 0.000320727), ('Cordova', 0.000320481), ('Waller', 0.000319814), ('Arellano', 0.000319795), ('Maddox', 0.00031953), ('Mata', 0.000318781), ('Bonilla', 0.000318196), ('Stanton', 0.000318087), ('Compton', 0.000317867), ('Kaufman', 0.000317849), ('Dudley', 0.000317703), ('Mcpherson', 0.000317639), ('Beltran', 0.000317392), ('Dickson', 0.000317045), ('Mccann', 0.00031699), ('Villegas', 0.000316917), ('Proctor', 0.000316899), ('Hester', 0.000316835), ('Cantrell', 0.000316826), ('Daugherty', 0.000316607), ('Cherry', 0.000316287), ('Bray', 0.000315921), ('Davila', 0.000315611), ('Rowland', 0.000315218), ('Madden', 0.00031498), ('Levine', 0.00031498), ('Spence', 0.000314642), ('Good', 0.000314596), ('Irwin', 0.000314085), ('Werner', 0.000313884), ('Krause', 0.00031382), ('Petty', 0.000313207), ('Whitney', 0.000312961), ('Baird', 0.000312796), ('Hooper', 0.000311435), ('Pollard', 0.000311389), ('Zavala', 0.000311289), ('Jarvis', 0.000311124), ('Holden', 0.000311042), ('Hendrix', 0.00031096), ('Haas', 0.00031096), ('Mcgrath', 0.000310951), ('Bird', 0.00031032), ('Lucero', 0.000309955), ('Terrell', 0.000309882), ('Riggs', 0.000309461), ('Joyce', 0.000309233), ('Rollins', 0.000308812), ('Mercer', 0.000308812), ('Galloway', 0.000308593), ('Duke', 0.000308337), ('Odom', 0.000308081), ('Andersen', 0.000306172), ('Downs', 0.000306044), ('Hatfield', 0.00030577), ('Benitez', 0.00030556), ('Archer', 0.000305285), ('Huerta', 0.00030471), ('Travis', 0.000304628), ('Mcneil', 0.000303714), ('Hinton', 0.00030344), ('Zhang', 0.000303376), ('Hays', 0.000303303), ('Mayo', 0.000302681), ('Fritz', 0.000302151), ('Branch', 0.000301896), ('Mooney', 0.000301101), ('Ewing', 0.000300845), ('Ritter', 0.000300287), ('Esparza', 0.000299447), ('Frey', 0.000299109), ('Braun', 0.00029857), ('Gay', 0.000298533), ('Riddle', 0.000298369), ('Haney', 0.000298277), ('Kaiser', 0.000297574), ('Holder', 0.000296651), ('Chaney', 0.000296349), ('Mcknight', 0.00029592), ('Gamble', 0.000295838), ('Vang', 0.000295435), ('Cooley', 0.000295015), ('Carney', 0.000294969), ('Cowan', 0.000294604), ('Forbes', 0.000294476), ('Ferrell', 0.000293983), ('Davies', 0.0002939), ('Barajas', 0.000293736), ('Shea', 0.000293023), ('Osborn', 0.000292795), ('Bright', 0.000292777), ('Cuevas', 0.00029253), ('Bolton', 0.000292347), ('Murillo', 0.000292064), ('Lutz', 0.000291845), ('Duarte', 0.000291442), ('Kidd', 0.000291351), ('Key', 0.000291315), ('Cooke', 0.000291114)))
A:faker.providers.person.en_US.__init__.prefixes_female->OrderedDict((('Mrs.', 0.5), ('Ms.', 0.1), ('Miss', 0.1), ('Dr.', 0.3)))
A:faker.providers.person.en_US.__init__.prefixes_male->OrderedDict((('Mr.', 0.7), ('Dr.', 0.3)))
A:faker.providers.person.en_US.__init__.suffixes_female->OrderedDict((('MD', 0.5), ('DDS', 0.3), ('PhD', 0.1), ('DVM', 0.2)))
A:faker.providers.person.en_US.__init__.suffixes_male->OrderedDict((('Jr.', 0.2), ('II', 0.05), ('III', 0.03), ('IV', 0.015), ('V', 0.005), ('MD', 0.3), ('DDS', 0.2), ('PhD', 0.1), ('DVM', 0.1)))
faker.providers.person.en_US.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/ja_JP/__init__.py----------------------------------------
A:faker.providers.person.ja_JP.__init__.pattern->self.random_element(self.romanized_formats)
faker.providers.person.ja_JP.__init__.Provider(PersonProvider)
faker.providers.person.ja_JP.__init__.Provider.first_kana_name(cls)
faker.providers.person.ja_JP.__init__.Provider.first_kana_name_female(cls)
faker.providers.person.ja_JP.__init__.Provider.first_kana_name_male(cls)
faker.providers.person.ja_JP.__init__.Provider.first_romanized_name(cls)
faker.providers.person.ja_JP.__init__.Provider.first_romanized_name_female(cls)
faker.providers.person.ja_JP.__init__.Provider.first_romanized_name_male(cls)
faker.providers.person.ja_JP.__init__.Provider.kana_name(self)
faker.providers.person.ja_JP.__init__.Provider.last_kana_name(cls)
faker.providers.person.ja_JP.__init__.Provider.last_romanized_name(cls)
faker.providers.person.ja_JP.__init__.Provider.romanized_name(self)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/hr_HR/__init__.py----------------------------------------
faker.providers.person.hr_HR.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/el_GR/__init__.py----------------------------------------
faker.providers.person.el_GR.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/de_AT/__init__.py----------------------------------------
faker.providers.person.de_AT.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/pl_PL/__init__.py----------------------------------------
faker.providers.person.pl_PL.__init__.Provider(PersonProvider)
faker.providers.person.pl_PL.__init__.Provider.last_name(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/lt_LT/__init__.py----------------------------------------
faker.providers.person.lt_LT.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/ru_RU/__init__.py----------------------------------------
faker.providers.person.ru_RU.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/ne_NP/__init__.py----------------------------------------
faker.providers.person.ne_NP.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/de_DE/__init__.py----------------------------------------
faker.providers.person.de_DE.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/pt_BR/__init__.py----------------------------------------
faker.providers.person.pt_BR.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/fi_FI/__init__.py----------------------------------------
faker.providers.person.fi_FI.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/it_IT/__init__.py----------------------------------------
faker.providers.person.it_IT.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/zh_TW/__init__.py----------------------------------------
faker.providers.person.zh_TW.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/sv_SE/__init__.py----------------------------------------
faker.providers.person.sv_SE.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/person/fr_CH/__init__.py----------------------------------------
faker.providers.person.fr_CH.__init__.Provider(PersonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/currency/__init__.py----------------------------------------
faker.providers.currency.__init__.Provider(BaseProvider)
faker.providers.currency.__init__.Provider.currency_code(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/currency/en_US/__init__.py----------------------------------------
faker.providers.currency.en_US.__init__.Provider(CurrencyProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/__init__.py----------------------------------------
A:faker.providers.internet.__init__.replacements->tuple()
A:faker.providers.internet.__init__.string->string.replace(search, replace).replace(search, replace)
A:faker.providers.internet.__init__.pattern->self.random_element(self.uri_formats)
A:faker.providers.internet.__init__.username->self._to_ascii(self.bothify(self.generator.parse(pattern)).lower())
A:faker.providers.internet.__init__.company->self._to_ascii(company_elements.pop(0))
A:faker.providers.internet.__init__.company_elements->self._to_ascii(company_elements.pop(0)).split(' ')
A:faker.providers.internet.__init__.address->str(ip_network(address, strict=False))
A:faker.providers.internet.__init__.value->faker.providers.lorem.la.Provider.text(20)
A:faker.providers.internet.__init__.placeholder_url->cls.random_element(cls.image_placeholder_services)
faker.providers.internet.__init__.Provider(BaseProvider)
faker.providers.internet.__init__.Provider._to_ascii(self,string)
faker.providers.internet.__init__.Provider.company_email(self)
faker.providers.internet.__init__.Provider.domain_name(self)
faker.providers.internet.__init__.Provider.domain_word(self)
faker.providers.internet.__init__.Provider.email(self)
faker.providers.internet.__init__.Provider.free_email(self)
faker.providers.internet.__init__.Provider.free_email_domain(cls)
faker.providers.internet.__init__.Provider.image_url(cls,width=None,height=None)
faker.providers.internet.__init__.Provider.ipv4(self,network=False)
faker.providers.internet.__init__.Provider.ipv6(self,network=False)
faker.providers.internet.__init__.Provider.mac_address(self)
faker.providers.internet.__init__.Provider.safe_email(self)
faker.providers.internet.__init__.Provider.slug(cls,value=None)
faker.providers.internet.__init__.Provider.tld(self)
faker.providers.internet.__init__.Provider.uri(self)
faker.providers.internet.__init__.Provider.uri_extension(cls)
faker.providers.internet.__init__.Provider.uri_page(cls)
faker.providers.internet.__init__.Provider.uri_path(cls,deep=None)
faker.providers.internet.__init__.Provider.url(self)
faker.providers.internet.__init__.Provider.user_name(self)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/no_NO/__init__.py----------------------------------------
faker.providers.internet.no_NO.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/sk_SK/__init__.py----------------------------------------
faker.providers.internet.sk_SK.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/zh_CN/__init__.py----------------------------------------
faker.providers.internet.zh_CN.__init__.Provider(InternetProvider)
faker.providers.internet.zh_CN.__init__.Provider.domain_word(self)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/bg_BG/__init__.py----------------------------------------
faker.providers.internet.bg_BG.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/pt_PT/__init__.py----------------------------------------
faker.providers.internet.pt_PT.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/sl_SI/__init__.py----------------------------------------
faker.providers.internet.sl_SI.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/fr_FR/__init__.py----------------------------------------
faker.providers.internet.fr_FR.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/fa_IR/__init__.py----------------------------------------
faker.providers.internet.fa_IR.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/ko_KR/__init__.py----------------------------------------
faker.providers.internet.ko_KR.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/cs_CZ/__init__.py----------------------------------------
faker.providers.internet.cs_CZ.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/en_US/__init__.py----------------------------------------
faker.providers.internet.en_US.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/ja_JP/__init__.py----------------------------------------
faker.providers.internet.ja_JP.__init__.Provider(InternetProvider)
faker.providers.internet.ja_JP.__init__.Provider.domain_word(self)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/hr_HR/__init__.py----------------------------------------
faker.providers.internet.hr_HR.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/el_GR/__init__.py----------------------------------------
A:faker.providers.internet.el_GR.__init__.pattern->self.random_element(self.user_name_formats)
A:faker.providers.internet.el_GR.__init__.company->latinize(company_elements.pop(0))
A:faker.providers.internet.el_GR.__init__.company_elements->latinize(company_elements.pop(0)).split(' ')
A:faker.providers.internet.el_GR.__init__.matched->list(match.group(0))
A:faker.providers.internet.el_GR.__init__.search->'Θ Χ Ψ θ χ ψ ΟΥ ΑΥ ΕΥ Ου Αυ Ευ ου αυ ευ'.split()
A:faker.providers.internet.el_GR.__init__.replace->'TH CH PS th ch ps OU AU EU Ou Au Eu ou au eu'.split()
A:faker.providers.internet.el_GR.__init__.value->map(lambda l: replace[search.find(l)], matched)
faker.providers.internet.el_GR.__init__.Provider(InternetProvider)
faker.providers.internet.el_GR.__init__.Provider.domain_word(self)
faker.providers.internet.el_GR.__init__.Provider.user_name(self)
faker.providers.internet.el_GR.__init__.latinize(value)
faker.providers.internet.el_GR.__init__.remove_accents(value)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/de_AT/__init__.py----------------------------------------
faker.providers.internet.de_AT.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/de_DE/__init__.py----------------------------------------
faker.providers.internet.de_DE.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/en_AU/__init__.py----------------------------------------
faker.providers.internet.en_AU.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/pt_BR/__init__.py----------------------------------------
faker.providers.internet.pt_BR.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/fi_FI/__init__.py----------------------------------------
faker.providers.internet.fi_FI.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/bs_BA/__init__.py----------------------------------------
faker.providers.internet.bs_BA.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/sv_SE/__init__.py----------------------------------------
faker.providers.internet.sv_SE.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/internet/fr_CH/__init__.py----------------------------------------
faker.providers.internet.fr_CH.__init__.Provider(InternetProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/job/__init__.py----------------------------------------
faker.providers.job.__init__.Provider(BaseProvider)
faker.providers.job.__init__.Provider.job(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/job/uk_UA/__init__.py----------------------------------------
faker.providers.job.uk_UA.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/job/fr_FR/__init__.py----------------------------------------
faker.providers.job.fr_FR.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/job/fa_IR/__init__.py----------------------------------------
faker.providers.job.fa_IR.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/job/en_US/__init__.py----------------------------------------
faker.providers.job.en_US.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/job/hr_HR/__init__.py----------------------------------------
faker.providers.job.hr_HR.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/job/pl_PL/__init__.py----------------------------------------
faker.providers.job.pl_PL.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/job/ru_RU/__init__.py----------------------------------------
faker.providers.job.ru_RU.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/job/zh_TW/__init__.py----------------------------------------
faker.providers.job.zh_TW.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/job/fr_CH/__init__.py----------------------------------------
faker.providers.job.fr_CH.__init__.Provider(BaseProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/credit_card/__init__.py----------------------------------------
A:faker.providers.credit_card.__init__.credit_card_types->OrderedDict((('maestro', CreditCard('Maestro', prefix_maestro, 12, security_code='CVV')), ('mastercard', CreditCard('Mastercard', prefix_mastercard, 16, security_code='CVV')), ('visa16', CreditCard('VISA 16 digit', prefix_visa)), ('visa13', CreditCard('VISA 13 digit', prefix_visa, 13)), ('amex', CreditCard('American Express', prefix_amex, 15, security_code='CID', security_code_length=4)), ('discover', CreditCard('Discover', prefix_discover)), ('diners', CreditCard('Diners Club / Carte Blanche', prefix_diners, 14)), ('jcb15', CreditCard('JCB 15 digit', prefix_jcb15, 15)), ('jcb16', CreditCard('JCB 16 digit', prefix_jcb16)), ('voyager', CreditCard('Voyager', prefix_voyager, 15))))
A:faker.providers.credit_card.__init__.card_type->cls.random_element(cls.credit_card_types.keys())
A:faker.providers.credit_card.__init__.card->self._credit_card_type(card_type)
A:faker.providers.credit_card.__init__.prefix->cls.random_element(card.prefixes)
A:faker.providers.credit_card.__init__.number->cls.numerify(number)
A:faker.providers.credit_card.__init__.expire_date->faker.providers.date_time.Provider.date_time_between(start, end)
A:faker.providers.credit_card.__init__.tpl->tpl.format(provider=card.name, owner=self.generator.parse('{{first_name}} {{last_name}}'), number=self.credit_card_number(card), expire_date=self.credit_card_expire(), security=card.security_code, security_nb=self.credit_card_security_code(card)).format(provider=card.name, owner=self.generator.parse('{{first_name}} {{last_name}}'), number=self.credit_card_number(card), expire_date=self.credit_card_expire(), security=card.security_code, security_nb=self.credit_card_security_code(card))
faker.providers.credit_card.__init__.CreditCard(self,name,prefixes,length=16,security_code='CVC',security_code_length=3)
faker.providers.credit_card.__init__.CreditCard.__init__(self,name,prefixes,length=16,security_code='CVC',security_code_length=3)
faker.providers.credit_card.__init__.Provider(BaseProvider)
faker.providers.credit_card.__init__.Provider._credit_card_type(cls,card_type=None)
faker.providers.credit_card.__init__.Provider._generate_number(cls,prefix,length)
faker.providers.credit_card.__init__.Provider.credit_card_expire(cls,start='now',end='+10y',date_format='%m/%y')
faker.providers.credit_card.__init__.Provider.credit_card_full(self,card_type=None)
faker.providers.credit_card.__init__.Provider.credit_card_number(cls,card_type=None)
faker.providers.credit_card.__init__.Provider.credit_card_provider(cls,card_type=None)
faker.providers.credit_card.__init__.Provider.credit_card_security_code(cls,card_type=None)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/credit_card/en_US/__init__.py----------------------------------------
faker.providers.credit_card.en_US.__init__.Provider(CreditCardProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/profile/__init__.py----------------------------------------
A:faker.providers.profile.__init__.sex->self.random_element(SEX)
A:faker.providers.profile.__init__.name->self.generator.name_male()
A:faker.providers.profile.__init__.d->dict(((k, v) for (k, v) in d.items() if k in fields))
faker.providers.profile.__init__.Provider(BaseProvider)
faker.providers.profile.__init__.Provider.profile(self,fields=None,sex=None)
faker.providers.profile.__init__.Provider.simple_profile(self,sex=None)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/profile/en_US/__init__.py----------------------------------------
faker.providers.profile.en_US.__init__.Provider(ProfileProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/__init__.py----------------------------------------
faker.providers.phone_number.__init__.Provider(BaseProvider)
faker.providers.phone_number.__init__.Provider.phone_number(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/en_GB/__init__.py----------------------------------------
faker.providers.phone_number.en_GB.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/no_NO/__init__.py----------------------------------------
faker.providers.phone_number.no_NO.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/sk_SK/__init__.py----------------------------------------
faker.providers.phone_number.sk_SK.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/zh_CN/__init__.py----------------------------------------
faker.providers.phone_number.zh_CN.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.zh_CN.__init__.Provider.phonenumber_prefix(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/bg_BG/__init__.py----------------------------------------
faker.providers.phone_number.bg_BG.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/es_ES/__init__.py----------------------------------------
faker.providers.phone_number.es_ES.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/hi_IN/__init__.py----------------------------------------
faker.providers.phone_number.hi_IN.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/pt_PT/__init__.py----------------------------------------
faker.providers.phone_number.pt_PT.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/dk_DK/__init__.py----------------------------------------
faker.providers.phone_number.dk_DK.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/uk_UA/__init__.py----------------------------------------
faker.providers.phone_number.uk_UA.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/sl_SI/__init__.py----------------------------------------
faker.providers.phone_number.sl_SI.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/fr_FR/__init__.py----------------------------------------
faker.providers.phone_number.fr_FR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/es_MX/__init__.py----------------------------------------
faker.providers.phone_number.es_MX.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/lv_LV/__init__.py----------------------------------------
faker.providers.phone_number.lv_LV.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/fa_IR/__init__.py----------------------------------------
faker.providers.phone_number.fa_IR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/ko_KR/__init__.py----------------------------------------
faker.providers.phone_number.ko_KR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/nl_NL/__init__.py----------------------------------------
faker.providers.phone_number.nl_NL.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/cs_CZ/__init__.py----------------------------------------
faker.providers.phone_number.cs_CZ.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/tr_TR/__init__.py----------------------------------------
faker.providers.phone_number.tr_TR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/en_US/__init__.py----------------------------------------
faker.providers.phone_number.en_US.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/ja_JP/__init__.py----------------------------------------
faker.providers.phone_number.ja_JP.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/hr_HR/__init__.py----------------------------------------
faker.providers.phone_number.hr_HR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/el_GR/__init__.py----------------------------------------
faker.providers.phone_number.el_GR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/pl_PL/__init__.py----------------------------------------
faker.providers.phone_number.pl_PL.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/lt_LT/__init__.py----------------------------------------
faker.providers.phone_number.lt_LT.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/ru_RU/__init__.py----------------------------------------
faker.providers.phone_number.ru_RU.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/ne_NP/__init__.py----------------------------------------
faker.providers.phone_number.ne_NP.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/de_DE/__init__.py----------------------------------------
faker.providers.phone_number.de_DE.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/en_AU/__init__.py----------------------------------------
A:faker.providers.phone_number.en_AU.__init__.pattern->self.random_element(self.formats)
faker.providers.phone_number.en_AU.__init__.Provider(PhoneNumberProvider)
faker.providers.phone_number.en_AU.__init__.Provider.area_code(cls)
faker.providers.phone_number.en_AU.__init__.Provider.phone_number(self)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/pt_BR/__init__.py----------------------------------------
faker.providers.phone_number.pt_BR.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/fi_FI/__init__.py----------------------------------------
faker.providers.phone_number.fi_FI.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/it_IT/__init__.py----------------------------------------
faker.providers.phone_number.it_IT.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/zh_TW/__init__.py----------------------------------------
faker.providers.phone_number.zh_TW.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/bs_BA/__init__.py----------------------------------------
faker.providers.phone_number.bs_BA.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/sv_SE/__init__.py----------------------------------------
faker.providers.phone_number.sv_SE.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/fr_CH/__init__.py----------------------------------------
faker.providers.phone_number.fr_CH.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/phone_number/en_CA/__init__.py----------------------------------------
faker.providers.phone_number.en_CA.__init__.Provider(PhoneNumberProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/color/__init__.py----------------------------------------
A:faker.providers.color.__init__.all_colors->OrderedDict((('AliceBlue', '#F0F8FF'), ('AntiqueWhite', '#FAEBD7'), ('Aqua', '#00FFFF'), ('Aquamarine', '#7FFFD4'), ('Azure', '#F0FFFF'), ('Beige', '#F5F5DC'), ('Bisque', '#FFE4C4'), ('Black', '#000000'), ('BlanchedAlmond', '#FFEBCD'), ('Blue', '#0000FF'), ('BlueViolet', '#8A2BE2'), ('Brown', '#A52A2A'), ('BurlyWood', '#DEB887'), ('CadetBlue', '#5F9EA0'), ('Chartreuse', '#7FFF00'), ('Chocolate', '#D2691E'), ('Coral', '#FF7F50'), ('CornflowerBlue', '#6495ED'), ('Cornsilk', '#FFF8DC'), ('Crimson', '#DC143C'), ('Cyan', '#00FFFF'), ('DarkBlue', '#00008B'), ('DarkCyan', '#008B8B'), ('DarkGoldenRod', '#B8860B'), ('DarkGray', '#A9A9A9'), ('DarkGreen', '#006400'), ('DarkKhaki', '#BDB76B'), ('DarkMagenta', '#8B008B'), ('DarkOliveGreen', '#556B2F'), ('DarkOrange', '#FF8C00'), ('DarkOrchid', '#9932CC'), ('DarkRed', '#8B0000'), ('DarkSalmon', '#E9967A'), ('DarkSeaGreen', '#8FBC8F'), ('DarkSlateBlue', '#483D8B'), ('DarkSlateGray', '#2F4F4F'), ('DarkTurquoise', '#00CED1'), ('DarkViolet', '#9400D3'), ('DeepPink', '#FF1493'), ('DeepSkyBlue', '#00BFFF'), ('DimGray', '#696969'), ('DodgerBlue', '#1E90FF'), ('FireBrick', '#B22222'), ('FloralWhite', '#FFFAF0'), ('ForestGreen', '#228B22'), ('Fuchsia', '#FF00FF'), ('Gainsboro', '#DCDCDC'), ('GhostWhite', '#F8F8FF'), ('Gold', '#FFD700'), ('GoldenRod', '#DAA520'), ('Gray', '#808080'), ('Green', '#008000'), ('GreenYellow', '#ADFF2F'), ('HoneyDew', '#F0FFF0'), ('HotPink', '#FF69B4'), ('IndianRed', '#CD5C5C'), ('Indigo', '#4B0082'), ('Ivory', '#FFFFF0'), ('Khaki', '#F0E68C'), ('Lavender', '#E6E6FA'), ('LavenderBlush', '#FFF0F5'), ('LawnGreen', '#7CFC00'), ('LemonChiffon', '#FFFACD'), ('LightBlue', '#ADD8E6'), ('LightCoral', '#F08080'), ('LightCyan', '#E0FFFF'), ('LightGoldenRodYellow', '#FAFAD2'), ('LightGray', '#D3D3D3'), ('LightGreen', '#90EE90'), ('LightPink', '#FFB6C1'), ('LightSalmon', '#FFA07A'), ('LightSeaGreen', '#20B2AA'), ('LightSkyBlue', '#87CEFA'), ('LightSlateGray', '#778899'), ('LightSteelBlue', '#B0C4DE'), ('LightYellow', '#FFFFE0'), ('Lime', '#00FF00'), ('LimeGreen', '#32CD32'), ('Linen', '#FAF0E6'), ('Magenta', '#FF00FF'), ('Maroon', '#800000'), ('MediumAquaMarine', '#66CDAA'), ('MediumBlue', '#0000CD'), ('MediumOrchid', '#BA55D3'), ('MediumPurple', '#9370DB'), ('MediumSeaGreen', '#3CB371'), ('MediumSlateBlue', '#7B68EE'), ('MediumSpringGreen', '#00FA9A'), ('MediumTurquoise', '#48D1CC'), ('MediumVioletRed', '#C71585'), ('MidnightBlue', '#191970'), ('MintCream', '#F5FFFA'), ('MistyRose', '#FFE4E1'), ('Moccasin', '#FFE4B5'), ('NavajoWhite', '#FFDEAD'), ('Navy', '#000080'), ('OldLace', '#FDF5E6'), ('Olive', '#808000'), ('OliveDrab', '#6B8E23'), ('Orange', '#FFA500'), ('OrangeRed', '#FF4500'), ('Orchid', '#DA70D6'), ('PaleGoldenRod', '#EEE8AA'), ('PaleGreen', '#98FB98'), ('PaleTurquoise', '#AFEEEE'), ('PaleVioletRed', '#DB7093'), ('PapayaWhip', '#FFEFD5'), ('PeachPuff', '#FFDAB9'), ('Peru', '#CD853F'), ('Pink', '#FFC0CB'), ('Plum', '#DDA0DD'), ('PowderBlue', '#B0E0E6'), ('Purple', '#800080'), ('Red', '#FF0000'), ('RosyBrown', '#BC8F8F'), ('RoyalBlue', '#4169E1'), ('SaddleBrown', '#8B4513'), ('Salmon', '#FA8072'), ('SandyBrown', '#F4A460'), ('SeaGreen', '#2E8B57'), ('SeaShell', '#FFF5EE'), ('Sienna', '#A0522D'), ('Silver', '#C0C0C0'), ('SkyBlue', '#87CEEB'), ('SlateBlue', '#6A5ACD'), ('SlateGray', '#708090'), ('Snow', '#FFFAFA'), ('SpringGreen', '#00FF7F'), ('SteelBlue', '#4682B4'), ('Tan', '#D2B48C'), ('Teal', '#008080'), ('Thistle', '#D8BFD8'), ('Tomato', '#FF6347'), ('Turquoise', '#40E0D0'), ('Violet', '#EE82EE'), ('Wheat', '#F5DEB3'), ('White', '#FFFFFF'), ('WhiteSmoke', '#F5F5F5'), ('Yellow', '#FFFF00'), ('YellowGreen', '#9ACD3')))
A:faker.providers.color.__init__.color->cls.hex_color()
faker.providers.color.__init__.Provider(BaseProvider)
faker.providers.color.__init__.Provider.color_name(cls)
faker.providers.color.__init__.Provider.hex_color(cls)
faker.providers.color.__init__.Provider.rgb_color(cls)
faker.providers.color.__init__.Provider.rgb_color_list(cls)
faker.providers.color.__init__.Provider.rgb_css_color(cls)
faker.providers.color.__init__.Provider.safe_color_name(cls)
faker.providers.color.__init__.Provider.safe_hex_color(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/color/en_US/__init__.py----------------------------------------
faker.providers.color.en_US.__init__.Provider(ColorProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/python/__init__.py----------------------------------------
A:faker.providers.python.__init__.value_type->self.random_element(type_list)
A:faker.providers.python.__init__.method_name->'py{0}'.format(value_type)
A:faker.providers.python.__init__.nb_elements->self.randomize_nb_elements(nb_elements)
A:faker.providers.python.__init__.d[Lorem.word()]->self._random_type(value_types)
faker.providers.python.__init__.Provider(BaseProvider)
faker.providers.python.__init__.Provider._pyiterable(self,nb_elements=10,variable_nb_elements=True,*value_types)
faker.providers.python.__init__.Provider._random_type(self,type_list)
faker.providers.python.__init__.Provider.pybool(cls)
faker.providers.python.__init__.Provider.pydecimal(cls,left_digits=None,right_digits=None,positive=False)
faker.providers.python.__init__.Provider.pydict(self,nb_elements=10,variable_nb_elements=True,*value_types)
faker.providers.python.__init__.Provider.pyfloat(cls,left_digits=None,right_digits=None,positive=False)
faker.providers.python.__init__.Provider.pyint(cls)
faker.providers.python.__init__.Provider.pyiterable(self,nb_elements=10,variable_nb_elements=True,*value_types)
faker.providers.python.__init__.Provider.pylist(self,nb_elements=10,variable_nb_elements=True,*value_types)
faker.providers.python.__init__.Provider.pyset(self,nb_elements=10,variable_nb_elements=True,*value_types)
faker.providers.python.__init__.Provider.pystr(cls,min_chars=None,max_chars=20)
faker.providers.python.__init__.Provider.pystruct(self,count=10,*value_types)
faker.providers.python.__init__.Provider.pytuple(self,nb_elements=10,variable_nb_elements=True,*value_types)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/python/en_US/__init__.py----------------------------------------
faker.providers.python.en_US.__init__.Provider(PythonProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/barcode/__init__.py----------------------------------------
A:faker.providers.barcode.__init__.weighted_sum->sum([x * y for (x, y) in zip(code, weights)])
faker.providers.barcode.__init__.Provider(BaseProvider)
faker.providers.barcode.__init__.Provider.ean(self,length=13)
faker.providers.barcode.__init__.Provider.ean13(self)
faker.providers.barcode.__init__.Provider.ean8(self)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/barcode/en_US/__init__.py----------------------------------------
faker.providers.barcode.en_US.__init__.Provider(BarCodeProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/ssn/__init__.py----------------------------------------
faker.providers.ssn.__init__.Provider(BaseProvider)
faker.providers.ssn.__init__.Provider.ssn(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/ssn/zh_CN/__init__.py----------------------------------------
A:faker.providers.ssn.zh_CN.__init__.age->datetime.timedelta(days=cls.random_int(min_age, max_age))
A:faker.providers.ssn.zh_CN.__init__.birthday_str->birthday.strftime('%Y%m%d')
A:faker.providers.ssn.zh_CN.__init__.ssn_without_checksum->cls.numerify(cls.random_element(cls.area_codes) + birthday_str + '###')
faker.providers.ssn.zh_CN.__init__.Provider(SsnProvider)
faker.providers.ssn.zh_CN.__init__.Provider.ssn(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/ssn/uk_UA/__init__.py----------------------------------------
faker.providers.ssn.uk_UA.__init__.Provider(SsnProvider)
faker.providers.ssn.uk_UA.__init__.Provider.ssn(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/ssn/ko_KR/__init__.py----------------------------------------
faker.providers.ssn.ko_KR.__init__.Provider(SsnProvider)
faker.providers.ssn.ko_KR.__init__.Provider.ssn(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/ssn/nl_NL/__init__.py----------------------------------------
A:faker.providers.ssn.nl_NL.__init__.digits->faker.generator.random.sample(range(10), 8)
A:faker.providers.ssn.nl_NL.__init__.s->_checksum(digits)
A:faker.providers.ssn.nl_NL.__init__.bsn->''.join([str(e) for e in digits])
faker.providers.ssn.nl_NL.__init__.Provider(SsnProvider)
faker.providers.ssn.nl_NL.__init__.Provider.ssn(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/ssn/en_US/__init__.py----------------------------------------
A:faker.providers.ssn.en_US.__init__.area->BaseProvider.random_int(min=1, max=899)
A:faker.providers.ssn.en_US.__init__.group->BaseProvider.random_int(1, 99)
A:faker.providers.ssn.en_US.__init__.serial->BaseProvider.random_int(1, 9999)
A:faker.providers.ssn.en_US.__init__.ssn->'{0:03d}-{1:02d}-{2:04d}'.format(area, group, serial)
faker.providers.ssn.en_US.__init__.Provider(BaseProvider)
faker.providers.ssn.en_US.__init__.Provider.ssn(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/ssn/hr_HR/__init__.py----------------------------------------
A:faker.providers.ssn.hr_HR.__init__.digits->faker.generator.random.sample(range(10), 10)
faker.providers.ssn.hr_HR.__init__.Provider(SsnProvider)
faker.providers.ssn.hr_HR.__init__.Provider.ssn(cls)
faker.providers.ssn.hr_HR.__init__.checksum(digits)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/ssn/pt_BR/__init__.py----------------------------------------
A:faker.providers.ssn.pt_BR.__init__.digits->faker.generator.random.sample(range(10), 9)
A:faker.providers.ssn.pt_BR.__init__.dv->checksum(digits)
A:faker.providers.ssn.pt_BR.__init__.c->Provider.ssn()
faker.providers.ssn.pt_BR.__init__.Provider(SsnProvider)
faker.providers.ssn.pt_BR.__init__.Provider.cpf(cls)
faker.providers.ssn.pt_BR.__init__.Provider.ssn(cls)
faker.providers.ssn.pt_BR.__init__.checksum(digits)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/ssn/fi_FI/__init__.py----------------------------------------
A:faker.providers.ssn.fi_FI.__init__.age->datetime.timedelta(days=random.randrange(min_age, max_age))
A:faker.providers.ssn.fi_FI.__init__.suffix->str(random.randrange(2, 899)).zfill(3)
A:faker.providers.ssn.fi_FI.__init__.checksum->_checksum(hetu_date + suffix)
A:faker.providers.ssn.fi_FI.__init__.hetu->''.join([hetu_date, separator, suffix, checksum])
faker.providers.ssn.fi_FI.__init__.Provider(SsnProvider)
faker.providers.ssn.fi_FI.__init__.Provider.ssn(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/ssn/it_IT/__init__.py----------------------------------------
A:faker.providers.ssn.it_IT.__init__.ALPHANUMERICS->sorted(digits + ascii_uppercase)
A:faker.providers.ssn.it_IT.__init__.ALPHANUMERICS_DICT->dict(((char, index) for (index, char) in enumerate(ALPHANUMERICS)))
A:faker.providers.ssn.it_IT.__init__.code->cls.bothify(cls.fiscal_code_format).upper()
faker.providers.ssn.it_IT.__init__.Provider(SsnProvider)
faker.providers.ssn.it_IT.__init__.Provider.ssn(cls)
faker.providers.ssn.it_IT.__init__.checksum(value)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/ssn/zh_TW/__init__.py----------------------------------------
faker.providers.ssn.zh_TW.__init__.Provider(SsnProvider)
faker.providers.ssn.zh_TW.__init__.Provider.ssn(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/ssn/sv_SE/__init__.py----------------------------------------
A:faker.providers.ssn.sv_SE.__init__.digits->digits_of(number)
A:faker.providers.ssn.sv_SE.__init__.check_digit->_luhn_checksum(int(partial_number) * 10)
A:faker.providers.ssn.sv_SE.__init__.age->datetime.timedelta(days=random.randrange(min_age, max_age))
A:faker.providers.ssn.sv_SE.__init__.pnr_date->birthday.strftime('%y%m%d')
A:faker.providers.ssn.sv_SE.__init__.suffix->str(random.randrange(0, 999)).zfill(3)
A:faker.providers.ssn.sv_SE.__init__.luhn_checksum->str(_calculate_luhn(pnr_date + suffix))
A:faker.providers.ssn.sv_SE.__init__.pnr->'{0}-{1}{2}'.format(pnr_date, suffix, luhn_checksum)
faker.providers.ssn.sv_SE.__init__.Provider(SsnProvider)
faker.providers.ssn.sv_SE.__init__.Provider.ssn(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/ssn/fr_CH/__init__.py----------------------------------------
A:faker.providers.ssn.fr_CH.__init__.evensum->sum(digits[:-1:2])
A:faker.providers.ssn.fr_CH.__init__.oddsum->sum(digits[1::2])
A:faker.providers.ssn.fr_CH.__init__.digits->''.join([str(d) for d in digits])
faker.providers.ssn.fr_CH.__init__.Provider(SsnProvider)
faker.providers.ssn.fr_CH.__init__.Provider.ssn(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/ssn/en_CA/__init__.py----------------------------------------
A:faker.providers.ssn.en_CA.__init__.digits->faker.generator.random.sample(range(10), 8)
faker.providers.ssn.en_CA.__init__.Provider(SsnProvider)
faker.providers.ssn.en_CA.__init__.Provider.ssn(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/user_agent/__init__.py----------------------------------------
A:faker.providers.user_agent.__init__.name->cls.random_element(cls.user_agents)
A:faker.providers.user_agent.__init__.saf->'{0}.{1}.{2}'.format(random.randint(531, 535), random.randint(1, 50), random.randint(1, 7))
A:faker.providers.user_agent.__init__.ver->'{0}.0.{1}'.format(random.randint(4, 5), random.randint(1, 5))
faker.providers.user_agent.__init__.Provider(BaseProvider)
faker.providers.user_agent.__init__.Provider.chrome(cls)
faker.providers.user_agent.__init__.Provider.firefox(cls)
faker.providers.user_agent.__init__.Provider.internet_explorer(cls)
faker.providers.user_agent.__init__.Provider.linux_platform_token(cls)
faker.providers.user_agent.__init__.Provider.linux_processor(cls)
faker.providers.user_agent.__init__.Provider.mac_platform_token(cls)
faker.providers.user_agent.__init__.Provider.mac_processor(cls)
faker.providers.user_agent.__init__.Provider.opera(cls)
faker.providers.user_agent.__init__.Provider.safari(cls)
faker.providers.user_agent.__init__.Provider.user_agent(cls)
faker.providers.user_agent.__init__.Provider.windows_platform_token(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/user_agent/en_US/__init__.py----------------------------------------
faker.providers.user_agent.en_US.__init__.Provider(UserAgentProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/file/__init__.py----------------------------------------
A:faker.providers.file.__init__.mime_types->OrderedDict((('application', application_mime_types), ('audio', audio_mime_types), ('image', image_mime_types), ('message', message_mime_types), ('model', model_mime_types), ('multipart', multipart_mime_types), ('text', text_mime_types), ('video', video_mime_types)))
A:faker.providers.file.__init__.file_extensions->OrderedDict((('audio', audio_file_extensions), ('image', image_file_extensions), ('office', office_file_extensions), ('text', text_file_extensions), ('video', video_file_extensions)))
A:faker.providers.file.__init__.filename->lorem.la.Provider.word()
faker.providers.file.__init__.Provider(BaseProvider)
faker.providers.file.__init__.Provider.file_extension(cls,category=None)
faker.providers.file.__init__.Provider.file_name(cls,category=None,extension=None)
faker.providers.file.__init__.Provider.mime_type(cls,category=None)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/file/en_US/__init__.py----------------------------------------
faker.providers.file.en_US.__init__.Provider(FileProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/date_time/__init__.py----------------------------------------
A:faker.providers.date_time.__init__.dt->dt.astimezone(tzlocal()).astimezone(tzlocal())
A:faker.providers.date_time.__init__.regex->re.compile(timedelta_pattern)
A:faker.providers.date_time.__init__.ts->faker.generator.random.randint(-62135600400, int(time()))
A:faker.providers.date_time.__init__.now->faker.utils.datetime_safe.datetime.now(tzinfo)
A:faker.providers.date_time.__init__.parts->parts.groupdict().groupdict()
A:faker.providers.date_time.__init__.time_params[name]->int(param)
A:faker.providers.date_time.__init__.start_date->cls._parse_date_time(start_date)
A:faker.providers.date_time.__init__.end_date->cls._parse_date_time(end_date)
A:faker.providers.date_time.__init__.timestamp->faker.generator.random.randint(datetime_to_timestamp(datetime_start), datetime_to_timestamp(datetime_end))
A:faker.providers.date_time.__init__.datetime_start->faker.utils.datetime_safe.datetime.now(tzinfo)
A:faker.providers.date_time.__init__.datetime_end->faker.utils.datetime_safe.datetime.now(tzinfo)
A:faker.providers.date_time.__init__.this_century_start->datetime(now.year - now.year % 100, 1, 1, tzinfo=tzinfo)
A:faker.providers.date_time.__init__.next_century_start->datetime(this_century_start.year + 100, 1, 1, tzinfo=tzinfo)
A:faker.providers.date_time.__init__.this_decade_start->datetime(now.year - now.year % 10, 1, 1, tzinfo=tzinfo)
A:faker.providers.date_time.__init__.next_decade_start->datetime(this_decade_start.year + 10, 1, 1, tzinfo=tzinfo)
A:faker.providers.date_time.__init__.this_year_start->faker.utils.datetime_safe.datetime.now(tzinfo).replace(month=1, day=1, hour=0, minute=0, second=0, microsecond=0)
A:faker.providers.date_time.__init__.next_year_start->datetime(now.year + 1, 1, 1, tzinfo=tzinfo)
A:faker.providers.date_time.__init__.this_month_start->faker.utils.datetime_safe.datetime.now(tzinfo).replace(day=1, hour=0, minute=0, second=0, microsecond=0)
faker.providers.date_time.__init__.Provider(BaseProvider)
faker.providers.date_time.__init__.Provider._parse_date_time(cls,text,tzinfo=None)
faker.providers.date_time.__init__.Provider.am_pm(cls)
faker.providers.date_time.__init__.Provider.century(cls)
faker.providers.date_time.__init__.Provider.date(cls,pattern='%Y-%m-%d')
faker.providers.date_time.__init__.Provider.date_time(cls,tzinfo=None)
faker.providers.date_time.__init__.Provider.date_time_ad(cls,tzinfo=None)
faker.providers.date_time.__init__.Provider.date_time_between(cls,start_date='-30y',end_date='now',tzinfo=None)
faker.providers.date_time.__init__.Provider.date_time_between_dates(cls,datetime_start=None,datetime_end=None,tzinfo=None)
faker.providers.date_time.__init__.Provider.date_time_this_century(cls,before_now=True,after_now=False,tzinfo=None)
faker.providers.date_time.__init__.Provider.date_time_this_decade(cls,before_now=True,after_now=False,tzinfo=None)
faker.providers.date_time.__init__.Provider.date_time_this_month(cls,before_now=True,after_now=False,tzinfo=None)
faker.providers.date_time.__init__.Provider.date_time_this_year(cls,before_now=True,after_now=False,tzinfo=None)
faker.providers.date_time.__init__.Provider.day_of_month(cls)
faker.providers.date_time.__init__.Provider.day_of_week(cls)
faker.providers.date_time.__init__.Provider.iso8601(cls,tzinfo=None)
faker.providers.date_time.__init__.Provider.month(cls)
faker.providers.date_time.__init__.Provider.month_name(cls)
faker.providers.date_time.__init__.Provider.time(cls,pattern='%H:%M:%S')
faker.providers.date_time.__init__.Provider.time_delta(cls)
faker.providers.date_time.__init__.Provider.timezone(cls)
faker.providers.date_time.__init__.Provider.unix_time(cls)
faker.providers.date_time.__init__.Provider.year(cls)
faker.providers.date_time.__init__.datetime_to_timestamp(dt)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/date_time/en_US/__init__.py----------------------------------------
faker.providers.date_time.en_US.__init__.Provider(DateTimeProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/__init__.py----------------------------------------
A:faker.providers.company.__init__.pattern->self.random_element(self.formats)
faker.providers.company.__init__.Provider(BaseProvider)
faker.providers.company.__init__.Provider.company(self)
faker.providers.company.__init__.Provider.company_suffix(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/no_NO/__init__.py----------------------------------------
faker.providers.company.no_NO.__init__.Provider(CompanyProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/sk_SK/__init__.py----------------------------------------
faker.providers.company.sk_SK.__init__.Provider(CompanyProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/zh_CN/__init__.py----------------------------------------
faker.providers.company.zh_CN.__init__.Provider(CompanyProvider)
faker.providers.company.zh_CN.__init__.Provider.company_prefix(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/bg_BG/__init__.py----------------------------------------
faker.providers.company.bg_BG.__init__.Provider(CompanyProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/pt_PT/__init__.py----------------------------------------
faker.providers.company.pt_PT.__init__.Provider(CompanyProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/sl_SI/__init__.py----------------------------------------
faker.providers.company.sl_SI.__init__.Provider(CompanyProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/fr_FR/__init__.py----------------------------------------
A:faker.providers.company.fr_FR.__init__.pattern->self.random_element(self.catch_phrase_formats)
A:faker.providers.company.fr_FR.__init__.catch_phrase->self.generator.parse(pattern)
A:faker.providers.company.fr_FR.__init__.begin_pos->self.generator.parse(pattern).find(word)
A:faker.providers.company.fr_FR.__init__.end_pos->self.generator.parse(pattern).find(word, begin_pos + 1)
A:faker.providers.company.fr_FR.__init__.sequential_number->str(cls.random_number(max_sequential_digits)).zfill(4)
faker.providers.company.fr_FR.__init__.Provider(CompanyProvider)
faker.providers.company.fr_FR.__init__.Provider._is_catch_phrase_valid(cls,catch_phrase)
faker.providers.company.fr_FR.__init__.Provider.catch_phrase(self)
faker.providers.company.fr_FR.__init__.Provider.catch_phrase_attribute(cls)
faker.providers.company.fr_FR.__init__.Provider.catch_phrase_noun(cls)
faker.providers.company.fr_FR.__init__.Provider.catch_phrase_verb(cls)
faker.providers.company.fr_FR.__init__.Provider.siren(cls)
faker.providers.company.fr_FR.__init__.Provider.siret(cls,max_sequential_digits=2)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/es_MX/__init__.py----------------------------------------
faker.providers.company.es_MX.__init__.Provider(CompanyProvider)
faker.providers.company.es_MX.__init__.Provider.bs(self)
faker.providers.company.es_MX.__init__.Provider.catch_phrase(self)
faker.providers.company.es_MX.__init__.Provider.company_prefix(self)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/fa_IR/__init__.py----------------------------------------
faker.providers.company.fa_IR.__init__.Provider(CompanyProvider)
faker.providers.company.fa_IR.__init__.Provider.company(self)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/ko_KR/__init__.py----------------------------------------
faker.providers.company.ko_KR.__init__.Provider(CompanyProvider)
faker.providers.company.ko_KR.__init__.Provider.bs(self)
faker.providers.company.ko_KR.__init__.Provider.catch_phrase(self)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/cs_CZ/__init__.py----------------------------------------
faker.providers.company.cs_CZ.__init__.Provider(CompanyProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/en_US/__init__.py----------------------------------------
faker.providers.company.en_US.__init__.Provider(CompanyProvider)
faker.providers.company.en_US.__init__.Provider.bs(self)
faker.providers.company.en_US.__init__.Provider.catch_phrase(self)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/ja_JP/__init__.py----------------------------------------
faker.providers.company.ja_JP.__init__.Provider(CompanyProvider)
faker.providers.company.ja_JP.__init__.Provider.company_prefix(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/hr_HR/__init__.py----------------------------------------
faker.providers.company.hr_HR.__init__.Provider(CompanyProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/de_DE/__init__.py----------------------------------------
faker.providers.company.de_DE.__init__.Provider(CompanyProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/pt_BR/__init__.py----------------------------------------
A:faker.providers.company.pt_BR.__init__.pattern->self.random_element(self.catch_phrase_formats)
A:faker.providers.company.pt_BR.__init__.catch_phrase->self.generator.parse(pattern)
faker.providers.company.pt_BR.__init__.Provider(CompanyProvider)
faker.providers.company.pt_BR.__init__.Provider.catch_phrase(self)
faker.providers.company.pt_BR.__init__.Provider.catch_phrase_attribute(cls)
faker.providers.company.pt_BR.__init__.Provider.catch_phrase_noun(cls)
faker.providers.company.pt_BR.__init__.Provider.catch_phrase_verb(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/fi_FI/__init__.py----------------------------------------
A:faker.providers.company.fi_FI.__init__.first_digit->str(self.random_digit_not_null())
A:faker.providers.company.fi_FI.__init__.cs->calculate_checksum(body)
faker.providers.company.fi_FI.__init__.Provider(CompanyProvider)
faker.providers.company.fi_FI.__init__.Provider.company_business_id(self)
faker.providers.company.fi_FI.__init__.Provider.company_vat(self)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/it_IT/__init__.py----------------------------------------
faker.providers.company.it_IT.__init__.Provider(CompanyProvider)
faker.providers.company.it_IT.__init__.Provider.bs(self)
faker.providers.company.it_IT.__init__.Provider.catch_phrase(self)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/zh_TW/__init__.py----------------------------------------
faker.providers.company.zh_TW.__init__.Provider(CompanyProvider)
faker.providers.company.zh_TW.__init__.Provider.company_prefix(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/sv_SE/__init__.py----------------------------------------
faker.providers.company.sv_SE.__init__.Provider(CompanyProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/company/fr_CH/__init__.py----------------------------------------
A:faker.providers.company.fr_CH.__init__.digits->''.join([str(digit) for digit in digits])
A:faker.providers.company.fr_CH.__init__.sum->_checksum(digits)
faker.providers.company.fr_CH.__init__.Provider(CompanyProvider)
faker.providers.company.fr_CH.__init__.Provider.ide(cls)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/lorem/__init__.py----------------------------------------
A:faker.providers.lorem.__init__.nb_words->cls.randomize_nb_elements(nb_words)
A:faker.providers.lorem.__init__.words->cls.words(nb_words)
A:faker.providers.lorem.__init__.words[0]->words[0].title().title()
A:faker.providers.lorem.__init__.nb_sentences->cls.randomize_nb_elements(nb_sentences)
faker.providers.lorem.__init__.Provider(BaseProvider)
faker.providers.lorem.__init__.Provider.paragraph(cls,nb_sentences=3,variable_nb_sentences=True)
faker.providers.lorem.__init__.Provider.paragraphs(cls,nb=3)
faker.providers.lorem.__init__.Provider.sentence(cls,nb_words=6,variable_nb_words=True)
faker.providers.lorem.__init__.Provider.sentences(cls,nb=3)
faker.providers.lorem.__init__.Provider.text(cls,max_nb_chars=200)
faker.providers.lorem.__init__.Provider.word(cls)
faker.providers.lorem.__init__.Provider.words(cls,nb=3)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/lorem/la/__init__.py----------------------------------------
faker.providers.lorem.la.__init__.Provider(LoremProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/lorem/el_GR/__init__.py----------------------------------------
faker.providers.lorem.el_GR.__init__.Provider(LoremProvider)


----------------------------------------/home/zhang/Packages/faker/faker0.7.1/providers/lorem/ru_RU/__init__.py----------------------------------------
faker.providers.lorem.ru_RU.__init__.Provider(LoremProvider)

