
----------------------------------------/dataset/nuaa/anaconda3/envs/lightgbm2.1.0/lib/python3.6/site-packages/lightgbm/__init__.py----------------------------------------
A:lightgbm.__init__.dir_path->os.path.dirname(os.path.realpath(__file__))
A:lightgbm.__init__.__version__->open(os.path.join(dir_path, 'VERSION.txt')).read().strip()


----------------------------------------/dataset/nuaa/anaconda3/envs/lightgbm2.1.0/lib/python3.6/site-packages/lightgbm/engine.py----------------------------------------
A:lightgbm.engine.num_boost_round->params.pop(alias)
A:lightgbm.engine.early_stopping_rounds->params.pop(alias)
A:lightgbm.engine.predictor->init_model._to_predictor()
A:lightgbm.engine.callbacks->set(callbacks)
A:lightgbm.engine.callbacks_before_iter->sorted(callbacks_before_iter, key=attrgetter('order'))
A:lightgbm.engine.callbacks_after_iter->sorted(callbacks_after_iter, key=attrgetter('order'))
A:lightgbm.engine.booster->Booster(params=params, train_set=train_set)
A:lightgbm.engine.booster.best_score->collections.defaultdict(dict)
A:lightgbm.engine.full_data->full_data.construct().construct()
A:lightgbm.engine.num_data->full_data.construct().construct().num_data()
A:lightgbm.engine.group_info->full_data.construct().construct().get_group().astype(int)
A:lightgbm.engine.flatted_group->numpy.repeat(range(len(group_info)), repeats=group_info)
A:lightgbm.engine.group_kfold->_LGBMGroupKFold(n_splits=nfold)
A:lightgbm.engine.folds->zip(train_id, test_id)
A:lightgbm.engine.skf->_LGBMStratifiedKFold(n_splits=nfold, shuffle=shuffle, random_state=seed)
A:lightgbm.engine.randidx->numpy.arange(num_data)
A:lightgbm.engine.kstep->int(num_data / nfold)
A:lightgbm.engine.ret->CVBooster()
A:lightgbm.engine.train_set->full_data.construct().construct().subset(train_idx)
A:lightgbm.engine.valid_set->full_data.construct().construct().subset(test_idx)
A:lightgbm.engine.(train_set, valid_set, tparam)->fpreproc(train_set, valid_set, params.copy())
A:lightgbm.engine.cvbooster->Booster(tparam, train_set)
A:lightgbm.engine.cvmap->collections.defaultdict(list)
A:lightgbm.engine.results->collections.defaultdict(list)
A:lightgbm.engine.cvfolds->_make_n_folds(train_set, folds=folds, nfold=nfold, params=params, seed=seed, fpreproc=fpreproc, stratified=stratified, shuffle=shuffle)
A:lightgbm.engine.res->_agg_cv_result(cvfolds.eval_valid(feval))
lightgbm.cv(params,train_set,num_boost_round=100,folds=None,nfold=5,stratified=True,shuffle=True,metrics=None,fobj=None,feval=None,init_model=None,feature_name='auto',categorical_feature='auto',early_stopping_rounds=None,fpreproc=None,verbose_eval=None,show_stdv=True,seed=0,callbacks=None)
lightgbm.engine.CVBooster(self)
lightgbm.engine.CVBooster.__getattr__(self,name)
lightgbm.engine.CVBooster.__init__(self)
lightgbm.engine.CVBooster.append(self,booster)
lightgbm.engine._agg_cv_result(raw_results)
lightgbm.engine._make_n_folds(full_data,folds,nfold,params,seed,fpreproc=None,stratified=True,shuffle=True)
lightgbm.engine.cv(params,train_set,num_boost_round=100,folds=None,nfold=5,stratified=True,shuffle=True,metrics=None,fobj=None,feval=None,init_model=None,feature_name='auto',categorical_feature='auto',early_stopping_rounds=None,fpreproc=None,verbose_eval=None,show_stdv=True,seed=0,callbacks=None)
lightgbm.engine.train(params,train_set,num_boost_round=100,valid_sets=None,valid_names=None,fobj=None,feval=None,init_model=None,feature_name='auto',categorical_feature='auto',early_stopping_rounds=None,evals_result=None,verbose_eval=True,learning_rates=None,keep_training_booster=False,callbacks=None)
lightgbm.train(params,train_set,num_boost_round=100,valid_sets=None,valid_names=None,fobj=None,feval=None,init_model=None,feature_name='auto',categorical_feature='auto',early_stopping_rounds=None,evals_result=None,verbose_eval=True,learning_rates=None,keep_training_booster=False,callbacks=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/lightgbm2.1.0/lib/python3.6/site-packages/lightgbm/sklearn.py----------------------------------------
A:lightgbm.sklearn.labels->dataset.get_label()
A:lightgbm.sklearn.argc->argc_(func)
A:lightgbm.sklearn.(grad, hess)->func(labels, preds, dataset.get_group())
A:lightgbm.sklearn.weight->dataset.get_weight()
A:lightgbm.sklearn.grad->numpy.multiply(grad, weight)
A:lightgbm.sklearn.hess->numpy.multiply(hess, weight)
A:lightgbm.sklearn.num_data->len(weight)
A:lightgbm.sklearn.params->self.get_params()
A:lightgbm.sklearn.self._fobj->_objective_function_wrapper(self._objective)
A:lightgbm.sklearn.feval->_eval_function_wrapper(eval_metric)
A:lightgbm.sklearn.(X, y)->_LGBMCheckXY(X, y, accept_sparse=True, force_all_finite=False, ensure_min_samples=2)
A:lightgbm.sklearn.class_sample_weight->_LGBMComputeSampleWeight(self.class_weight, y)
A:lightgbm.sklearn.sample_weight->numpy.multiply(sample_weight, class_sample_weight)
A:lightgbm.sklearn.ret->Dataset(X, label=y, weight=sample_weight, group=group, params=params)
A:lightgbm.sklearn.train_set->_construct_dataset(X, y, sample_weight, init_score, group, params)
A:lightgbm.sklearn.valid_weight->numpy.multiply(valid_weight, valid_class_sample_weight)
A:lightgbm.sklearn.valid_class_sample_weight->_LGBMComputeSampleWeight(get_meta_data(eval_class_weight, i), valid_data[1])
A:lightgbm.sklearn.valid_init_score->get_meta_data(eval_init_score, i)
A:lightgbm.sklearn.valid_group->get_meta_data(eval_group, i)
A:lightgbm.sklearn.valid_set->_construct_dataset(valid_data[0], valid_data[1], valid_weight, valid_init_score, valid_group, params)
A:lightgbm.sklearn.self._Booster->train(params, train_set, self.n_estimators, valid_sets=valid_sets, valid_names=eval_names, early_stopping_rounds=early_stopping_rounds, evals_result=evals_result, fobj=self._fobj, feval=feval, verbose_eval=verbose, feature_name=feature_name, categorical_feature=categorical_feature, callbacks=callbacks)
A:lightgbm.sklearn.X->_LGBMCheckArray(X, accept_sparse=True, force_all_finite=False)
A:lightgbm.sklearn.self._le->_LGBMLabelEncoder().fit(y)
A:lightgbm.sklearn._y->self._le.transform(y)
A:lightgbm.sklearn.self._n_classes->len(self._classes)
A:lightgbm.sklearn.class_probs->self.booster_.predict(X, raw_score=raw_score, num_iteration=num_iteration)
A:lightgbm.sklearn.class_index->numpy.argmax(class_probs, axis=1)
lightgbm.LGBMClassifier(LGBMModel,_LGBMClassifierBase)
lightgbm.LGBMClassifier.classes_(self)
lightgbm.LGBMClassifier.fit(self,X,y,sample_weight=None,init_score=None,eval_set=None,eval_names=None,eval_sample_weight=None,eval_class_weight=None,eval_init_score=None,eval_metric='logloss',early_stopping_rounds=None,verbose=True,feature_name='auto',categorical_feature='auto',callbacks=None)
lightgbm.LGBMClassifier.n_classes_(self)
lightgbm.LGBMClassifier.predict(self,X,raw_score=False,num_iteration=0)
lightgbm.LGBMClassifier.predict_proba(self,X,raw_score=False,num_iteration=0)
lightgbm.LGBMModel(self,boosting_type='gbdt',num_leaves=31,max_depth=-1,learning_rate=0.1,n_estimators=100,subsample_for_bin=200000,objective=None,class_weight=None,min_split_gain=0.0,min_child_weight=0.001,min_child_samples=20,subsample=1.0,subsample_freq=1,colsample_bytree=1.0,reg_alpha=0.0,reg_lambda=0.0,random_state=None,n_jobs=-1,silent=True,**kwargs)
lightgbm.LGBMModel.apply(self,X,num_iteration=0)
lightgbm.LGBMModel.best_iteration_(self)
lightgbm.LGBMModel.best_score_(self)
lightgbm.LGBMModel.booster_(self)
lightgbm.LGBMModel.evals_result_(self)
lightgbm.LGBMModel.feature_importances_(self)
lightgbm.LGBMModel.fit(self,X,y,sample_weight=None,init_score=None,group=None,eval_set=None,eval_names=None,eval_sample_weight=None,eval_class_weight=None,eval_init_score=None,eval_group=None,eval_metric=None,early_stopping_rounds=None,verbose=True,feature_name='auto',categorical_feature='auto',callbacks=None)
lightgbm.LGBMModel.get_params(self,deep=True)
lightgbm.LGBMModel.n_features_(self)
lightgbm.LGBMModel.objective_(self)
lightgbm.LGBMModel.predict(self,X,raw_score=False,num_iteration=0)
lightgbm.LGBMModel.set_params(self,**params)
lightgbm.LGBMRanker(LGBMModel)
lightgbm.LGBMRanker.fit(self,X,y,sample_weight=None,init_score=None,group=None,eval_set=None,eval_names=None,eval_sample_weight=None,eval_init_score=None,eval_group=None,eval_metric='ndcg',eval_at=[1],early_stopping_rounds=None,verbose=True,feature_name='auto',categorical_feature='auto',callbacks=None)
lightgbm.LGBMRegressor(LGBMModel,_LGBMRegressorBase)
lightgbm.LGBMRegressor.fit(self,X,y,sample_weight=None,init_score=None,eval_set=None,eval_names=None,eval_sample_weight=None,eval_init_score=None,eval_metric='l2',early_stopping_rounds=None,verbose=True,feature_name='auto',categorical_feature='auto',callbacks=None)
lightgbm.sklearn.LGBMClassifier(LGBMModel,_LGBMClassifierBase)
lightgbm.sklearn.LGBMClassifier.classes_(self)
lightgbm.sklearn.LGBMClassifier.fit(self,X,y,sample_weight=None,init_score=None,eval_set=None,eval_names=None,eval_sample_weight=None,eval_class_weight=None,eval_init_score=None,eval_metric='logloss',early_stopping_rounds=None,verbose=True,feature_name='auto',categorical_feature='auto',callbacks=None)
lightgbm.sklearn.LGBMClassifier.n_classes_(self)
lightgbm.sklearn.LGBMClassifier.predict(self,X,raw_score=False,num_iteration=0)
lightgbm.sklearn.LGBMClassifier.predict_proba(self,X,raw_score=False,num_iteration=0)
lightgbm.sklearn.LGBMModel(self,boosting_type='gbdt',num_leaves=31,max_depth=-1,learning_rate=0.1,n_estimators=100,subsample_for_bin=200000,objective=None,class_weight=None,min_split_gain=0.0,min_child_weight=0.001,min_child_samples=20,subsample=1.0,subsample_freq=1,colsample_bytree=1.0,reg_alpha=0.0,reg_lambda=0.0,random_state=None,n_jobs=-1,silent=True,**kwargs)
lightgbm.sklearn.LGBMModel.__init__(self,boosting_type='gbdt',num_leaves=31,max_depth=-1,learning_rate=0.1,n_estimators=100,subsample_for_bin=200000,objective=None,class_weight=None,min_split_gain=0.0,min_child_weight=0.001,min_child_samples=20,subsample=1.0,subsample_freq=1,colsample_bytree=1.0,reg_alpha=0.0,reg_lambda=0.0,random_state=None,n_jobs=-1,silent=True,**kwargs)
lightgbm.sklearn.LGBMModel.apply(self,X,num_iteration=0)
lightgbm.sklearn.LGBMModel.best_iteration_(self)
lightgbm.sklearn.LGBMModel.best_score_(self)
lightgbm.sklearn.LGBMModel.booster_(self)
lightgbm.sklearn.LGBMModel.evals_result_(self)
lightgbm.sklearn.LGBMModel.feature_importances_(self)
lightgbm.sklearn.LGBMModel.fit(self,X,y,sample_weight=None,init_score=None,group=None,eval_set=None,eval_names=None,eval_sample_weight=None,eval_class_weight=None,eval_init_score=None,eval_group=None,eval_metric=None,early_stopping_rounds=None,verbose=True,feature_name='auto',categorical_feature='auto',callbacks=None)
lightgbm.sklearn.LGBMModel.get_params(self,deep=True)
lightgbm.sklearn.LGBMModel.n_features_(self)
lightgbm.sklearn.LGBMModel.objective_(self)
lightgbm.sklearn.LGBMModel.predict(self,X,raw_score=False,num_iteration=0)
lightgbm.sklearn.LGBMModel.set_params(self,**params)
lightgbm.sklearn.LGBMRanker(LGBMModel)
lightgbm.sklearn.LGBMRanker.fit(self,X,y,sample_weight=None,init_score=None,group=None,eval_set=None,eval_names=None,eval_sample_weight=None,eval_init_score=None,eval_group=None,eval_metric='ndcg',eval_at=[1],early_stopping_rounds=None,verbose=True,feature_name='auto',categorical_feature='auto',callbacks=None)
lightgbm.sklearn.LGBMRegressor(LGBMModel,_LGBMRegressorBase)
lightgbm.sklearn.LGBMRegressor.fit(self,X,y,sample_weight=None,init_score=None,eval_set=None,eval_names=None,eval_sample_weight=None,eval_init_score=None,eval_metric='l2',early_stopping_rounds=None,verbose=True,feature_name='auto',categorical_feature='auto',callbacks=None)
lightgbm.sklearn._eval_function_wrapper(func)
lightgbm.sklearn._objective_function_wrapper(func)


----------------------------------------/dataset/nuaa/anaconda3/envs/lightgbm2.1.0/lib/python3.6/site-packages/lightgbm/basic.py----------------------------------------
A:lightgbm.basic.lib_path->find_lib_path()
A:lightgbm.basic.lib->ctypes.cdll.LoadLibrary(lib_path[0])
A:lightgbm.basic._LIB->_load_lib()
A:lightgbm.basic.ret->ctypes.c_double(0)
A:lightgbm.basic.data->list_to_1d_numpy(data, dtype, name=field_name)
A:lightgbm.basic.ptr_data->list_to_1d_numpy(data, dtype, name=field_name).ctypes.data_as(ctypes.POINTER(ctypes.c_int64))
A:lightgbm.basic.data[col]->data[col].cat.set_categories(category).cat.set_categories(category)
A:lightgbm.basic.data[cat_cols]->data[cat_cols].apply(lambda x: x.cat.codes).apply(lambda x: x.cat.codes)
A:lightgbm.basic.feature_name->list(data.columns)
A:lightgbm.basic.categorical_feature->list(cat_cols)
A:lightgbm.basic.label->list_to_1d_numpy(label, name='label')
A:lightgbm.basic.lines->f.readlines()
A:lightgbm.basic.self.handle->ctypes.c_void_p()
A:lightgbm.basic.out_num_iterations->ctypes.c_int(0)
A:lightgbm.basic.out_num_class->ctypes.c_int(0)
A:lightgbm.basic.self.pandas_categorical->_load_pandas_categorical(model_file)
A:lightgbm.basic.self.pred_parameter->param_dict_to_str(pred_parameter)
A:lightgbm.basic.this->self.__dict__.copy()
A:lightgbm.basic.nrow->len(lines)
A:lightgbm.basic.preds->numpy.zeros(n_preds, dtype=np.float64)
A:lightgbm.basic.(preds, nrow)->self.__pred_for_csr(csr, num_iteration, predict_type)
A:lightgbm.basic.csr->scipy.sparse.csr_matrix(data)
A:lightgbm.basic.n_preds->self.__get_num_preds(num_iteration, nrow, predict_type)
A:lightgbm.basic.(ptr_data, type_ptr_data, _)->c_float_array(csc.data)
A:lightgbm.basic.out_num_preds->ctypes.c_int64(0)
A:lightgbm.basic.(ptr_indptr, type_ptr_indptr, __)->c_int_array(csc.indptr)
A:lightgbm.basic.self.params->copy.deepcopy(self.params_back_up)
A:lightgbm.basic.(data, feature_name, categorical_feature, self.pandas_categorical)->_data_from_pandas(data, feature_name, categorical_feature, self.pandas_categorical)
A:lightgbm.basic.categorical_indices->set()
A:lightgbm.basic.params['categorical_column']->sorted(categorical_indices)
A:lightgbm.basic.params_str->param_dict_to_str(params)
A:lightgbm.basic.init_score->list_to_1d_numpy(init_score, np.float64, name='init_score')
A:lightgbm.basic.new_init_score->numpy.zeros(init_score.size, dtype=np.float32)
A:lightgbm.basic.num_data->self.num_data()
A:lightgbm.basic.used_indices->list_to_1d_numpy(self.used_indices, np.int32, name='used_indices')
A:lightgbm.basic.self.params_back_up->copy.deepcopy(self.params)
A:lightgbm.basic.(ptr_data, type_data, _)->c_int_array(data)
A:lightgbm.basic.tmp_out_len->ctypes.c_int(0)
A:lightgbm.basic.out_type->ctypes.c_int()
A:lightgbm.basic.weight->list_to_1d_numpy(weight, name='weight')
A:lightgbm.basic.group->list_to_1d_numpy(group, np.int32, name='group')
A:lightgbm.basic.self.label->self.get_field('label')
A:lightgbm.basic.self.weight->self.get_field('weight')
A:lightgbm.basic.self.init_score->self.get_field('init_score')
A:lightgbm.basic.self.group->self.get_field('group')
A:lightgbm.basic.ref_chain->set()
A:lightgbm.basic.num_machines->len(machines)
A:lightgbm.basic.machines->','.join(machines)
A:lightgbm.basic.model_str->state.get('handle', None)
A:lightgbm.basic.booster->Booster({'model_str': model_str})
A:lightgbm.basic.this['handle']->self._save_model_to_string()
A:lightgbm.basic.handle->ctypes.c_void_p()
A:lightgbm.basic.is_finished->ctypes.c_int(0)
A:lightgbm.basic.(grad, hess)->fobj(self.__inner_predict(0), self.train_set)
A:lightgbm.basic.grad->list_to_1d_numpy(grad, name='gradient')
A:lightgbm.basic.hess->list_to_1d_numpy(hess, name='hessian')
A:lightgbm.basic.out_cur_iter->ctypes.c_int(0)
A:lightgbm.basic.string_buffer->ctypes.create_string_buffer(actual_len)
A:lightgbm.basic.ptr_string_buffer->ctypes.c_char_p(*[ctypes.addressof(string_buffer)])
A:lightgbm.basic.predictor->_InnerPredictor(booster_handle=self.handle, pred_parameter=pred_parameter)
A:lightgbm.basic.out_num_feature->ctypes.c_int(0)
A:lightgbm.basic.num_feature->self.num_feature()
A:lightgbm.basic.ptr_string_buffers->(ctypes.c_char_p * self.__num_inner_eval)(*map(ctypes.addressof, string_buffers))
A:lightgbm.basic.result->numpy.array([0.0 for _ in range_(self.__num_inner_eval)], dtype=np.float64)
A:lightgbm.basic.feval_ret->feval(self.__inner_predict(data_idx), cur_data)
A:lightgbm.basic.self.__inner_predict_buffer[data_idx]->numpy.array([0.0 for _ in range_(n_preds)], dtype=np.float64, copy=False)
A:lightgbm.basic.data_ptr->self.__inner_predict_buffer[data_idx].ctypes.data_as(ctypes.POINTER(ctypes.c_double))
A:lightgbm.basic.out_num_eval->ctypes.c_int(0)
lightgbm.Booster(self,params=None,train_set=None,model_file=None,silent=False)
lightgbm.Booster.__boost(self,grad,hess)
lightgbm.Booster.__copy__(self)
lightgbm.Booster.__deepcopy__(self,_)
lightgbm.Booster.__del__(self)
lightgbm.Booster.__get_eval_info(self)
lightgbm.Booster.__getstate__(self)
lightgbm.Booster.__inner_eval(self,data_name,data_idx,feval=None)
lightgbm.Booster.__inner_predict(self,data_idx)
lightgbm.Booster.__setstate__(self,state)
lightgbm.Booster._free_buffer(self)
lightgbm.Booster._load_model_from_string(self,model_str,verbose=True)
lightgbm.Booster._save_model_to_string(self,num_iteration=-1)
lightgbm.Booster._to_predictor(self,pred_parameter=None)
lightgbm.Booster.add_valid(self,data,name)
lightgbm.Booster.attr(self,key)
lightgbm.Booster.current_iteration(self)
lightgbm.Booster.dump_model(self,num_iteration=-1)
lightgbm.Booster.eval(self,data,name,feval=None)
lightgbm.Booster.eval_train(self,feval=None)
lightgbm.Booster.eval_valid(self,feval=None)
lightgbm.Booster.feature_importance(self,importance_type='split',iteration=-1)
lightgbm.Booster.feature_name(self)
lightgbm.Booster.free_dataset(self)
lightgbm.Booster.free_network(self)
lightgbm.Booster.get_leaf_output(self,tree_id,leaf_id)
lightgbm.Booster.num_feature(self)
lightgbm.Booster.predict(self,data,num_iteration=-1,raw_score=False,pred_leaf=False,pred_contrib=False,data_has_header=False,is_reshape=True,pred_parameter=None)
lightgbm.Booster.reset_parameter(self,params)
lightgbm.Booster.rollback_one_iter(self)
lightgbm.Booster.save_model(self,filename,num_iteration=-1)
lightgbm.Booster.set_attr(self,**kwargs)
lightgbm.Booster.set_network(self,machines,local_listen_port=12400,listen_time_out=120,num_machines=1)
lightgbm.Booster.set_train_data_name(self,name)
lightgbm.Booster.update(self,train_set=None,fobj=None)
lightgbm.Dataset(self,data,label=None,reference=None,weight=None,group=None,init_score=None,silent=False,feature_name='auto',categorical_feature='auto',params=None,free_raw_data=True)
lightgbm.Dataset.__del__(self)
lightgbm.Dataset.__init_from_csc(self,csc,params_str,ref_dataset)
lightgbm.Dataset.__init_from_csr(self,csr,params_str,ref_dataset)
lightgbm.Dataset.__init_from_np2d(self,mat,params_str,ref_dataset)
lightgbm.Dataset._free_handle(self)
lightgbm.Dataset._lazy_init(self,data,label=None,reference=None,weight=None,group=None,init_score=None,predictor=None,silent=False,feature_name='auto',categorical_feature='auto',params=None)
lightgbm.Dataset._reverse_update_params(self)
lightgbm.Dataset._set_predictor(self,predictor)
lightgbm.Dataset._update_params(self,params)
lightgbm.Dataset.construct(self)
lightgbm.Dataset.create_valid(self,data,label=None,weight=None,group=None,init_score=None,silent=False,params=None)
lightgbm.Dataset.get_field(self,field_name)
lightgbm.Dataset.get_group(self)
lightgbm.Dataset.get_init_score(self)
lightgbm.Dataset.get_label(self)
lightgbm.Dataset.get_ref_chain(self,ref_limit=100)
lightgbm.Dataset.get_weight(self)
lightgbm.Dataset.num_data(self)
lightgbm.Dataset.num_feature(self)
lightgbm.Dataset.save_binary(self,filename)
lightgbm.Dataset.set_categorical_feature(self,categorical_feature)
lightgbm.Dataset.set_feature_name(self,feature_name)
lightgbm.Dataset.set_field(self,field_name,data)
lightgbm.Dataset.set_group(self,group)
lightgbm.Dataset.set_init_score(self,init_score)
lightgbm.Dataset.set_label(self,label)
lightgbm.Dataset.set_reference(self,reference)
lightgbm.Dataset.set_weight(self,weight)
lightgbm.Dataset.subset(self,used_indices,params=None)
lightgbm.basic.Booster(self,params=None,train_set=None,model_file=None,silent=False)
lightgbm.basic.Booster.__boost(self,grad,hess)
lightgbm.basic.Booster.__copy__(self)
lightgbm.basic.Booster.__deepcopy__(self,_)
lightgbm.basic.Booster.__del__(self)
lightgbm.basic.Booster.__get_eval_info(self)
lightgbm.basic.Booster.__getstate__(self)
lightgbm.basic.Booster.__init__(self,params=None,train_set=None,model_file=None,silent=False)
lightgbm.basic.Booster.__inner_eval(self,data_name,data_idx,feval=None)
lightgbm.basic.Booster.__inner_predict(self,data_idx)
lightgbm.basic.Booster.__setstate__(self,state)
lightgbm.basic.Booster._free_buffer(self)
lightgbm.basic.Booster._load_model_from_string(self,model_str,verbose=True)
lightgbm.basic.Booster._save_model_to_string(self,num_iteration=-1)
lightgbm.basic.Booster._to_predictor(self,pred_parameter=None)
lightgbm.basic.Booster.add_valid(self,data,name)
lightgbm.basic.Booster.attr(self,key)
lightgbm.basic.Booster.current_iteration(self)
lightgbm.basic.Booster.dump_model(self,num_iteration=-1)
lightgbm.basic.Booster.eval(self,data,name,feval=None)
lightgbm.basic.Booster.eval_train(self,feval=None)
lightgbm.basic.Booster.eval_valid(self,feval=None)
lightgbm.basic.Booster.feature_importance(self,importance_type='split',iteration=-1)
lightgbm.basic.Booster.feature_name(self)
lightgbm.basic.Booster.free_dataset(self)
lightgbm.basic.Booster.free_network(self)
lightgbm.basic.Booster.get_leaf_output(self,tree_id,leaf_id)
lightgbm.basic.Booster.num_feature(self)
lightgbm.basic.Booster.predict(self,data,num_iteration=-1,raw_score=False,pred_leaf=False,pred_contrib=False,data_has_header=False,is_reshape=True,pred_parameter=None)
lightgbm.basic.Booster.reset_parameter(self,params)
lightgbm.basic.Booster.rollback_one_iter(self)
lightgbm.basic.Booster.save_model(self,filename,num_iteration=-1)
lightgbm.basic.Booster.set_attr(self,**kwargs)
lightgbm.basic.Booster.set_network(self,machines,local_listen_port=12400,listen_time_out=120,num_machines=1)
lightgbm.basic.Booster.set_train_data_name(self,name)
lightgbm.basic.Booster.update(self,train_set=None,fobj=None)
lightgbm.basic.Dataset(self,data,label=None,reference=None,weight=None,group=None,init_score=None,silent=False,feature_name='auto',categorical_feature='auto',params=None,free_raw_data=True)
lightgbm.basic.Dataset.__del__(self)
lightgbm.basic.Dataset.__init__(self,data,label=None,reference=None,weight=None,group=None,init_score=None,silent=False,feature_name='auto',categorical_feature='auto',params=None,free_raw_data=True)
lightgbm.basic.Dataset.__init_from_csc(self,csc,params_str,ref_dataset)
lightgbm.basic.Dataset.__init_from_csr(self,csr,params_str,ref_dataset)
lightgbm.basic.Dataset.__init_from_np2d(self,mat,params_str,ref_dataset)
lightgbm.basic.Dataset._free_handle(self)
lightgbm.basic.Dataset._lazy_init(self,data,label=None,reference=None,weight=None,group=None,init_score=None,predictor=None,silent=False,feature_name='auto',categorical_feature='auto',params=None)
lightgbm.basic.Dataset._reverse_update_params(self)
lightgbm.basic.Dataset._set_predictor(self,predictor)
lightgbm.basic.Dataset._update_params(self,params)
lightgbm.basic.Dataset.construct(self)
lightgbm.basic.Dataset.create_valid(self,data,label=None,weight=None,group=None,init_score=None,silent=False,params=None)
lightgbm.basic.Dataset.get_field(self,field_name)
lightgbm.basic.Dataset.get_group(self)
lightgbm.basic.Dataset.get_init_score(self)
lightgbm.basic.Dataset.get_label(self)
lightgbm.basic.Dataset.get_ref_chain(self,ref_limit=100)
lightgbm.basic.Dataset.get_weight(self)
lightgbm.basic.Dataset.num_data(self)
lightgbm.basic.Dataset.num_feature(self)
lightgbm.basic.Dataset.save_binary(self,filename)
lightgbm.basic.Dataset.set_categorical_feature(self,categorical_feature)
lightgbm.basic.Dataset.set_feature_name(self,feature_name)
lightgbm.basic.Dataset.set_field(self,field_name,data)
lightgbm.basic.Dataset.set_group(self,group)
lightgbm.basic.Dataset.set_init_score(self,init_score)
lightgbm.basic.Dataset.set_label(self,label)
lightgbm.basic.Dataset.set_reference(self,reference)
lightgbm.basic.Dataset.set_weight(self,weight)
lightgbm.basic.Dataset.subset(self,used_indices,params=None)
lightgbm.basic.LightGBMError(Exception)
lightgbm.basic._InnerPredictor(self,model_file=None,booster_handle=None,pred_parameter=None)
lightgbm.basic._InnerPredictor.__del__(self)
lightgbm.basic._InnerPredictor.__get_num_preds(self,num_iteration,nrow,predict_type)
lightgbm.basic._InnerPredictor.__getstate__(self)
lightgbm.basic._InnerPredictor.__init__(self,model_file=None,booster_handle=None,pred_parameter=None)
lightgbm.basic._InnerPredictor.__pred_for_csc(self,csc,num_iteration,predict_type)
lightgbm.basic._InnerPredictor.__pred_for_csr(self,csr,num_iteration,predict_type)
lightgbm.basic._InnerPredictor.__pred_for_np2d(self,mat,num_iteration,predict_type)
lightgbm.basic._InnerPredictor.predict(self,data,num_iteration=-1,raw_score=False,pred_leaf=False,pred_contrib=False,data_has_header=False,is_reshape=True)
lightgbm.basic._data_from_pandas(data,feature_name,categorical_feature,pandas_categorical)
lightgbm.basic._label_from_pandas(label)
lightgbm.basic._load_lib()
lightgbm.basic._load_pandas_categorical(file_name)
lightgbm.basic._safe_call(ret)
lightgbm.basic._save_pandas_categorical(file_name,pandas_categorical)
lightgbm.basic._temp_file(object)
lightgbm.basic._temp_file.__enter__(self)
lightgbm.basic._temp_file.__exit__(self,exc_type,exc_val,exc_tb)
lightgbm.basic._temp_file.readlines(self)
lightgbm.basic._temp_file.writelines(self,lines)
lightgbm.basic.c_array(ctype,values)
lightgbm.basic.c_float_array(data)
lightgbm.basic.c_int_array(data)
lightgbm.basic.c_str(string)
lightgbm.basic.cfloat32_array_to_numpy(cptr,length)
lightgbm.basic.cfloat64_array_to_numpy(cptr,length)
lightgbm.basic.cint32_array_to_numpy(cptr,length)
lightgbm.basic.convert_from_sliced_object(data)
lightgbm.basic.is_1d_list(data)
lightgbm.basic.is_numeric(obj)
lightgbm.basic.is_numpy_1d_array(data)
lightgbm.basic.list_to_1d_numpy(data,dtype=np.float32,name='list')
lightgbm.basic.param_dict_to_str(data)


----------------------------------------/dataset/nuaa/anaconda3/envs/lightgbm2.1.0/lib/python3.6/site-packages/lightgbm/compat.py----------------------------------------
lightgbm.compat.LGBMDeprecationWarning(UserWarning)
lightgbm.compat.json_default_with_numpy(obj)


----------------------------------------/dataset/nuaa/anaconda3/envs/lightgbm2.1.0/lib/python3.6/site-packages/lightgbm/libpath.py----------------------------------------
A:lightgbm.libpath.curr_path->os.path.dirname(os.path.abspath(os.path.expanduser(__file__)))
lightgbm.libpath.find_lib_path()


----------------------------------------/dataset/nuaa/anaconda3/envs/lightgbm2.1.0/lib/python3.6/site-packages/lightgbm/callback.py----------------------------------------
A:lightgbm.callback.CallbackEnv->collections.namedtuple('LightGBMCallbackEnv', ['model', 'params', 'iteration', 'begin_iteration', 'end_iteration', 'evaluation_result_list'])
A:lightgbm.callback.result->'\t'.join([_format_eval_result(x, show_stdv) for x in env.evaluation_result_list])
A:lightgbm.callback.new_param->value(env.iteration - env.begin_iteration)
lightgbm.callback.EarlyStopException(self,best_iteration,best_score)
lightgbm.callback.EarlyStopException.__init__(self,best_iteration,best_score)
lightgbm.callback._format_eval_result(value,show_stdv=True)
lightgbm.callback.early_stopping(stopping_rounds,verbose=True)
lightgbm.callback.print_evaluation(period=1,show_stdv=True)
lightgbm.callback.record_evaluation(eval_result)
lightgbm.callback.reset_parameter(**kwargs)
lightgbm.early_stopping(stopping_rounds,verbose=True)
lightgbm.print_evaluation(period=1,show_stdv=True)
lightgbm.record_evaluation(eval_result)
lightgbm.reset_parameter(**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/lightgbm2.1.0/lib/python3.6/site-packages/lightgbm/plotting.py----------------------------------------
A:lightgbm.plotting.importance->booster.feature_importance(importance_type=importance_type)
A:lightgbm.plotting.feature_name->booster.feature_name()
A:lightgbm.plotting.tuples->sorted(zip(feature_name, importance), key=lambda x: x[1])
A:lightgbm.plotting.(labels, values)->zip(*tuples)
A:lightgbm.plotting.(_, ax)->matplotlib.pyplot.subplots(1, 1, figsize=figsize)
A:lightgbm.plotting.ylocs->numpy.arange(len(values))
A:lightgbm.plotting.eval_results->deepcopy(booster)
A:lightgbm.plotting.num_data->len(eval_results)
A:lightgbm.plotting.dataset_names->iter(dataset_names)
A:lightgbm.plotting.name->next(dataset_names)
A:lightgbm.plotting.num_metric->len(metrics_for_one)
A:lightgbm.plotting.(metric, results)->metrics_for_one.popitem()
A:lightgbm.plotting.x_->range(num_iteration)
A:lightgbm.plotting.graph->create_tree_digraph(booster=booster, tree_index=tree_index, graph_attr=graph_attr, node_attr=node_attr, edge_attr=edge_attr, show_info=show_info)
A:lightgbm.plotting.model->booster.dump_model()
A:lightgbm.plotting.s->BytesIO()
A:lightgbm.plotting.img->matplotlib.image.imread(s)
lightgbm.create_tree_digraph(booster,tree_index=0,show_info=None,name=None,comment=None,filename=None,directory=None,format=None,engine=None,encoding=None,graph_attr=None,node_attr=None,edge_attr=None,body=None,strict=False)
lightgbm.plot_importance(booster,ax=None,height=0.2,xlim=None,ylim=None,title='Featureimportance',xlabel='Featureimportance',ylabel='Features',importance_type='split',max_num_features=None,ignore_zero=True,figsize=None,grid=True,**kwargs)
lightgbm.plot_metric(booster,metric=None,dataset_names=None,ax=None,xlim=None,ylim=None,title='Metricduringtraining',xlabel='Iterations',ylabel='auto',figsize=None,grid=True)
lightgbm.plot_tree(booster,ax=None,tree_index=0,figsize=None,graph_attr=None,node_attr=None,edge_attr=None,show_info=None)
lightgbm.plotting._to_graphviz(tree_info,show_info,feature_names,name=None,comment=None,filename=None,directory=None,format=None,engine=None,encoding=None,graph_attr=None,node_attr=None,edge_attr=None,body=None,strict=False)
lightgbm.plotting.check_not_tuple_of_2_elements(obj,obj_name='obj')
lightgbm.plotting.create_tree_digraph(booster,tree_index=0,show_info=None,name=None,comment=None,filename=None,directory=None,format=None,engine=None,encoding=None,graph_attr=None,node_attr=None,edge_attr=None,body=None,strict=False)
lightgbm.plotting.plot_importance(booster,ax=None,height=0.2,xlim=None,ylim=None,title='Featureimportance',xlabel='Featureimportance',ylabel='Features',importance_type='split',max_num_features=None,ignore_zero=True,figsize=None,grid=True,**kwargs)
lightgbm.plotting.plot_metric(booster,metric=None,dataset_names=None,ax=None,xlim=None,ylim=None,title='Metricduringtraining',xlabel='Iterations',ylabel='auto',figsize=None,grid=True)
lightgbm.plotting.plot_tree(booster,ax=None,tree_index=0,figsize=None,graph_attr=None,node_attr=None,edge_attr=None,show_info=None)

