
----------------------------------------/dataset/nuaa/anaconda3/envs/requests2.32.4/lib/python3.9/site-packages/requests/structures.py----------------------------------------
A:requests.structures.self._store->OrderedDict()
A:requests.structures.other->CaseInsensitiveDict(other)
requests.structures.CaseInsensitiveDict(self,data=None,**kwargs)
requests.structures.CaseInsensitiveDict.__delitem__(self,key)
requests.structures.CaseInsensitiveDict.__eq__(self,other)
requests.structures.CaseInsensitiveDict.__getitem__(self,key)
requests.structures.CaseInsensitiveDict.__init__(self,data=None,**kwargs)
requests.structures.CaseInsensitiveDict.__iter__(self)
requests.structures.CaseInsensitiveDict.__len__(self)
requests.structures.CaseInsensitiveDict.__repr__(self)
requests.structures.CaseInsensitiveDict.__setitem__(self,key,value)
requests.structures.CaseInsensitiveDict.copy(self)
requests.structures.CaseInsensitiveDict.lower_items(self)
requests.structures.LookupDict(self,name=None)
requests.structures.LookupDict.__getitem__(self,key)
requests.structures.LookupDict.__init__(self,name=None)
requests.structures.LookupDict.__repr__(self)
requests.structures.LookupDict.get(self,key,default=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/requests2.32.4/lib/python3.9/site-packages/requests/__init__.py----------------------------------------
A:requests.__init__.urllib3_version->urllib3_version.split('.').split('.')
A:requests.__init__.cryptography_version->list(map(int, cryptography_version.split('.')))
A:requests.__init__.warning->'Old version of cryptography ({}) may cause slowdown.'.format(cryptography_version)
requests.__init__._check_cryptography(cryptography_version)
requests.__init__.check_compatibility(urllib3_version,chardet_version,charset_normalizer_version)


----------------------------------------/dataset/nuaa/anaconda3/envs/requests2.32.4/lib/python3.9/site-packages/requests/packages.py----------------------------------------
A:requests.packages.locals()[package]->__import__(package)
A:requests.packages.mod->mod.replace(target, 'chardet').replace(target, 'chardet')


----------------------------------------/dataset/nuaa/anaconda3/envs/requests2.32.4/lib/python3.9/site-packages/requests/utils.py----------------------------------------
A:requests.utils.DEFAULT_CA_BUNDLE_PATH->certs.where()
A:requests.utils.DEFAULT_ACCEPT_ENCODING->', '.join(re.split(',\\s*', make_headers(accept_encoding=True)['accept-encoding']))
A:requests.utils.internetSettings->winreg.OpenKey(winreg.HKEY_CURRENT_USER, 'Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings')
A:requests.utils.proxyEnable->int(winreg.QueryValueEx(internetSettings, 'ProxyEnable')[0])
A:requests.utils.proxyOverride->filter(None, proxyOverride)
A:requests.utils.test->test.replace('?', '.').replace('?', '.')
A:requests.utils.d->d.items().items()
A:requests.utils.o->o.encode('utf-8').encode('utf-8')
A:requests.utils.total_length->o.encode('utf-8').encode('utf-8').tell()
A:requests.utils.fileno->o.encode('utf-8').encode('utf-8').fileno()
A:requests.utils.current_position->o.encode('utf-8').encode('utf-8').tell()
A:requests.utils.netrc_file->os.environ.get('NETRC')
A:requests.utils.loc->os.path.expanduser(f)
A:requests.utils.ri->urlparse(url)
A:requests.utils._netrc->netrc(netrc_path).authenticators(host)
A:requests.utils.name->getattr(obj, 'name', None)
A:requests.utils.(archive, member)->os.path.split(path)
A:requests.utils.(archive, prefix)->os.path.split(archive)
A:requests.utils.member->'/'.join([prefix, member])
A:requests.utils.zip_file->zipfile.ZipFile(archive)
A:requests.utils.tmp->tempfile.gettempdir()
A:requests.utils.extracted_path->os.path.join(tmp, member.split('/')[-1])
A:requests.utils.(tmp_descriptor, tmp_name)->tempfile.mkstemp(dir=os.path.dirname(filename))
A:requests.utils.value->value.strip(replace_chars).strip(replace_chars)
A:requests.utils.item->unquote_header_value(item[1:-1])
A:requests.utils.(name, value)->unquote_header_value(item[1:-1]).split('=', 1)
A:requests.utils.charset_re->re.compile('<meta.*?charset=["\\\']*(.+?)["\\\'>]', flags=re.I)
A:requests.utils.pragma_re->re.compile('<meta.*?content=["\\\']*;?charset=(.+?)["\\\'>]', flags=re.I)
A:requests.utils.xml_re->re.compile('^<\\?xml.*?encoding=["\\\']*(.+?)["\\\'>]')
A:requests.utils.tokens->header.split(';')
A:requests.utils.param->param.strip().strip()
A:requests.utils.index_of_equals->param.strip().strip().find('=')
A:requests.utils.key->param[:index_of_equals].strip(items_to_strip)
A:requests.utils.content_type->headers.get('content-type')
A:requests.utils.(content_type, params)->_parse_content_type_header(content_type)
A:requests.utils.decoder->codecs.getincrementaldecoder(r.encoding)(errors='replace')
A:requests.utils.rv->codecs.getincrementaldecoder(r.encoding)(errors='replace').decode(b'', final=True)
A:requests.utils.slice_length->len(string)
A:requests.utils.encoding->get_encoding_from_headers(r.headers)
A:requests.utils.UNRESERVED_SET->frozenset('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz' + '0123456789-._~')
A:requests.utils.parts->uri.split('%')
A:requests.utils.c->chr(int(h, 16))
A:requests.utils.(netaddr, bits)->net.split('/')
A:requests.utils.mask->int(string_network.split('/')[1])
A:requests.utils.old_value->os.environ.get(env_name)
A:requests.utils.no_proxy->proxies.get('no_proxy')
A:requests.utils.parsed->urlparse(url)
A:requests.utils.bypass->proxy_bypass(parsed.hostname)
A:requests.utils.urlparts->urlparse(url)
A:requests.utils.new_proxies->proxies.copy()
A:requests.utils.environ_proxies->get_environ_proxies(url, no_proxy=no_proxy)
A:requests.utils.proxy->get_environ_proxies(url, no_proxy=no_proxy).get(scheme, environ_proxies.get('all'))
A:requests.utils.(url, params)->val.split(';', 1)
A:requests.utils.(key, value)->param.strip().strip().split('=')
A:requests.utils.link[key.strip(replace_chars)]->value.strip(replace_chars).strip(replace_chars).strip(replace_chars)
A:requests.utils._null->'\x00'.encode('ascii')
A:requests.utils.nullcount->sample.count(_null)
A:requests.utils.netloc->'@'.join([auth, netloc])
A:requests.utils.(scheme, netloc, path, params, query, fragment)->urlparse(url)
A:requests.utils.body_seek->getattr(prepared_request.body, 'seek', None)
requests.utils._parse_content_type_header(header)
requests.utils._validate_header_part(header,header_part,header_validator_index)
requests.utils.add_dict_to_cookiejar(cj,cookie_dict)
requests.utils.address_in_network(ip,net)
requests.utils.atomic_open(filename)
requests.utils.check_header_validity(header)
requests.utils.default_headers()
requests.utils.default_user_agent(name='python-requests')
requests.utils.dict_from_cookiejar(cj)
requests.utils.dict_to_sequence(d)
requests.utils.dotted_netmask(mask)
requests.utils.extract_zipped_paths(path)
requests.utils.from_key_val_list(value)
requests.utils.get_auth_from_url(url)
requests.utils.get_encoding_from_headers(headers)
requests.utils.get_encodings_from_content(content)
requests.utils.get_environ_proxies(url,no_proxy=None)
requests.utils.get_netrc_auth(url,raise_errors=False)
requests.utils.get_unicode_from_response(r)
requests.utils.guess_filename(obj)
requests.utils.guess_json_utf(data)
requests.utils.is_ipv4_address(string_ip)
requests.utils.is_valid_cidr(string_network)
requests.utils.iter_slices(string,slice_length)
requests.utils.parse_dict_header(value)
requests.utils.parse_header_links(value)
requests.utils.parse_list_header(value)
requests.utils.prepend_scheme_if_needed(url,new_scheme)
requests.utils.requote_uri(uri)
requests.utils.resolve_proxies(request,proxies,trust_env=True)
requests.utils.rewind_body(prepared_request)
requests.utils.select_proxy(url,proxies)
requests.utils.set_environ(env_name,value)
requests.utils.should_bypass_proxies(url,no_proxy)
requests.utils.stream_decode_response_unicode(iterator,r)
requests.utils.super_len(o)
requests.utils.to_key_val_list(value)
requests.utils.unquote_header_value(value,is_filename=False)
requests.utils.unquote_unreserved(uri)
requests.utils.urldefragauth(url)


----------------------------------------/dataset/nuaa/anaconda3/envs/requests2.32.4/lib/python3.9/site-packages/requests/sessions.py----------------------------------------
A:requests.sessions.merged_setting->dict_class(to_key_val_list(session_setting))
A:requests.sessions.location->location.encode('latin1').encode('latin1')
A:requests.sessions.old_parsed->urlparse(old_url)
A:requests.sessions.new_parsed->urlparse(new_url)
A:requests.sessions.url->self.get_redirect_target(resp)
A:requests.sessions.prepared_request->Request(method=method.upper(), url=url, headers=headers, files=files, data=data or {}, json=json, params=params or {}, auth=auth, cookies=cookies, hooks=hooks).copy()
A:requests.sessions.parsed_rurl->urlparse(resp.url)
A:requests.sessions.parsed->parsed._replace(fragment=previous_fragment)._replace(fragment=previous_fragment)
A:requests.sessions.prepared_request.url->to_native_string(url)
A:requests.sessions.proxies->merge_setting(proxies, self.proxies)
A:requests.sessions.resp->self.send(prep, **send_kwargs)
A:requests.sessions.new_proxies->resolve_proxies(prepared_request, proxies, self.trust_env)
A:requests.sessions.(username, password)->get_auth_from_url(new_proxies[scheme])
A:requests.sessions.headers['Proxy-Authorization']->_basic_auth_str(username, password)
A:requests.sessions.self.headers->default_headers()
A:requests.sessions.self.hooks->default_hooks()
A:requests.sessions.self.cookies->cookiejar_from_dict({})
A:requests.sessions.self.adapters->OrderedDict()
A:requests.sessions.cookies->cookiejar_from_dict(cookies)
A:requests.sessions.merged_cookies->merge_cookies(merge_cookies(RequestsCookieJar(), self.cookies), cookies)
A:requests.sessions.auth->get_netrc_auth(request.url)
A:requests.sessions.p->PreparedRequest()
A:requests.sessions.req->Request(method=method.upper(), url=url, headers=headers, files=files, data=data or {}, json=json, params=params or {}, auth=auth, cookies=cookies, hooks=hooks)
A:requests.sessions.prep->self.prepare_request(req)
A:requests.sessions.settings->self.merge_environment_settings(prep.url, proxies, stream, verify, cert)
A:requests.sessions.kwargs['proxies']->resolve_proxies(request, self.proxies, self.trust_env)
A:requests.sessions.allow_redirects->kwargs.pop('allow_redirects', True)
A:requests.sessions.stream->merge_setting(stream, self.stream)
A:requests.sessions.adapter->self.get_adapter(url=request.url)
A:requests.sessions.start->preferred_clock()
A:requests.sessions.r->history.pop()
A:requests.sessions.r.elapsed->timedelta(seconds=elapsed)
A:requests.sessions.gen->self.resolve_redirects(r, request, **kwargs)
A:requests.sessions.r._next->next(self.resolve_redirects(r, request, yield_requests=True, **kwargs))
A:requests.sessions.env_proxies->get_environ_proxies(url, no_proxy=no_proxy)
A:requests.sessions.verify->merge_setting(verify, self.verify)
A:requests.sessions.cert->merge_setting(cert, self.cert)
A:requests.sessions.self.adapters[key]->self.adapters.pop(key)
requests.Session(self)
requests.Session.__enter__(self)
requests.Session.__exit__(self,*args)
requests.Session.__getstate__(self)
requests.Session.__setstate__(self,state)
requests.Session.close(self)
requests.Session.delete(self,url,**kwargs)
requests.Session.get(self,url,**kwargs)
requests.Session.get_adapter(self,url)
requests.Session.head(self,url,**kwargs)
requests.Session.merge_environment_settings(self,url,proxies,stream,verify,cert)
requests.Session.mount(self,prefix,adapter)
requests.Session.options(self,url,**kwargs)
requests.Session.patch(self,url,data=None,**kwargs)
requests.Session.post(self,url,data=None,json=None,**kwargs)
requests.Session.prepare_request(self,request)
requests.Session.put(self,url,data=None,**kwargs)
requests.Session.request(self,method,url,params=None,data=None,headers=None,cookies=None,files=None,auth=None,timeout=None,allow_redirects=True,proxies=None,hooks=None,stream=None,verify=None,cert=None,json=None)
requests.Session.send(self,request,**kwargs)
requests.SessionRedirectMixin
requests.SessionRedirectMixin.get_redirect_target(self,resp)
requests.SessionRedirectMixin.rebuild_auth(self,prepared_request,response)
requests.SessionRedirectMixin.rebuild_method(self,prepared_request,response)
requests.SessionRedirectMixin.rebuild_proxies(self,prepared_request,proxies)
requests.SessionRedirectMixin.resolve_redirects(self,resp,req,stream=False,timeout=None,verify=True,cert=None,proxies=None,yield_requests=False,**adapter_kwargs)
requests.SessionRedirectMixin.should_strip_auth(self,old_url,new_url)
requests.session()
requests.sessions.Session(self)
requests.sessions.Session.__enter__(self)
requests.sessions.Session.__exit__(self,*args)
requests.sessions.Session.__getstate__(self)
requests.sessions.Session.__init__(self)
requests.sessions.Session.__setstate__(self,state)
requests.sessions.Session.close(self)
requests.sessions.Session.delete(self,url,**kwargs)
requests.sessions.Session.get(self,url,**kwargs)
requests.sessions.Session.get_adapter(self,url)
requests.sessions.Session.head(self,url,**kwargs)
requests.sessions.Session.merge_environment_settings(self,url,proxies,stream,verify,cert)
requests.sessions.Session.mount(self,prefix,adapter)
requests.sessions.Session.options(self,url,**kwargs)
requests.sessions.Session.patch(self,url,data=None,**kwargs)
requests.sessions.Session.post(self,url,data=None,json=None,**kwargs)
requests.sessions.Session.prepare_request(self,request)
requests.sessions.Session.put(self,url,data=None,**kwargs)
requests.sessions.Session.request(self,method,url,params=None,data=None,headers=None,cookies=None,files=None,auth=None,timeout=None,allow_redirects=True,proxies=None,hooks=None,stream=None,verify=None,cert=None,json=None)
requests.sessions.Session.send(self,request,**kwargs)
requests.sessions.SessionRedirectMixin
requests.sessions.SessionRedirectMixin.get_redirect_target(self,resp)
requests.sessions.SessionRedirectMixin.rebuild_auth(self,prepared_request,response)
requests.sessions.SessionRedirectMixin.rebuild_method(self,prepared_request,response)
requests.sessions.SessionRedirectMixin.rebuild_proxies(self,prepared_request,proxies)
requests.sessions.SessionRedirectMixin.resolve_redirects(self,resp,req,stream=False,timeout=None,verify=True,cert=None,proxies=None,yield_requests=False,**adapter_kwargs)
requests.sessions.SessionRedirectMixin.should_strip_auth(self,old_url,new_url)
requests.sessions.merge_hooks(request_hooks,session_hooks,dict_class=OrderedDict)
requests.sessions.merge_setting(request_setting,session_setting,dict_class=OrderedDict)
requests.sessions.session()


----------------------------------------/dataset/nuaa/anaconda3/envs/requests2.32.4/lib/python3.9/site-packages/requests/exceptions.py----------------------------------------
A:requests.exceptions.response->kwargs.pop('response', None)
A:requests.exceptions.self.request->kwargs.pop('request', None)
requests.ConnectTimeout(ConnectionError,Timeout)
requests.ConnectionError(RequestException)
requests.FileModeWarning(RequestsWarning,DeprecationWarning)
requests.HTTPError(RequestException)
requests.JSONDecodeError(self,*args,**kwargs)
requests.JSONDecodeError.__reduce__(self)
requests.ReadTimeout(Timeout)
requests.RequestException(self,*args,**kwargs)
requests.RequestsDependencyWarning(RequestsWarning)
requests.Timeout(RequestException)
requests.TooManyRedirects(RequestException)
requests.URLRequired(RequestException)
requests.exceptions.ChunkedEncodingError(RequestException)
requests.exceptions.ConnectTimeout(ConnectionError,Timeout)
requests.exceptions.ConnectionError(RequestException)
requests.exceptions.ContentDecodingError(RequestException,BaseHTTPError)
requests.exceptions.FileModeWarning(RequestsWarning,DeprecationWarning)
requests.exceptions.HTTPError(RequestException)
requests.exceptions.InvalidHeader(RequestException,ValueError)
requests.exceptions.InvalidJSONError(RequestException)
requests.exceptions.InvalidProxyURL(InvalidURL)
requests.exceptions.InvalidSchema(RequestException,ValueError)
requests.exceptions.InvalidURL(RequestException,ValueError)
requests.exceptions.JSONDecodeError(self,*args,**kwargs)
requests.exceptions.JSONDecodeError.__init__(self,*args,**kwargs)
requests.exceptions.JSONDecodeError.__reduce__(self)
requests.exceptions.MissingSchema(RequestException,ValueError)
requests.exceptions.ProxyError(ConnectionError)
requests.exceptions.ReadTimeout(Timeout)
requests.exceptions.RequestException(self,*args,**kwargs)
requests.exceptions.RequestException.__init__(self,*args,**kwargs)
requests.exceptions.RequestsDependencyWarning(RequestsWarning)
requests.exceptions.RequestsWarning(Warning)
requests.exceptions.RetryError(RequestException)
requests.exceptions.SSLError(ConnectionError)
requests.exceptions.StreamConsumedError(RequestException,TypeError)
requests.exceptions.Timeout(RequestException)
requests.exceptions.TooManyRedirects(RequestException)
requests.exceptions.URLRequired(RequestException)
requests.exceptions.UnrewindableBodyError(RequestException)


----------------------------------------/dataset/nuaa/anaconda3/envs/requests2.32.4/lib/python3.9/site-packages/requests/api.py----------------------------------------
requests.api.delete(url,**kwargs)
requests.api.get(url,params=None,**kwargs)
requests.api.head(url,**kwargs)
requests.api.options(url,**kwargs)
requests.api.patch(url,data=None,**kwargs)
requests.api.post(url,data=None,json=None,**kwargs)
requests.api.put(url,data=None,**kwargs)
requests.api.request(method,url,**kwargs)
requests.delete(url,**kwargs)
requests.get(url,params=None,**kwargs)
requests.head(url,**kwargs)
requests.options(url,**kwargs)
requests.patch(url,data=None,**kwargs)
requests.post(url,data=None,json=None,**kwargs)
requests.put(url,data=None,**kwargs)
requests.request(method,url,**kwargs)


----------------------------------------/dataset/nuaa/anaconda3/envs/requests2.32.4/lib/python3.9/site-packages/requests/help.py----------------------------------------
A:requests.help.implementation->platform.python_implementation()
A:requests.help.implementation_version->platform.python_version()
A:requests.help.implementation_info->_implementation()
requests.help._implementation()
requests.help.info()
requests.help.main()


----------------------------------------/dataset/nuaa/anaconda3/envs/requests2.32.4/lib/python3.9/site-packages/requests/models.py----------------------------------------
A:requests.models.p->PreparedRequest()
A:requests.models.fields->to_key_val_list(data or {})
A:requests.models.files->to_key_val_list(files or {})
A:requests.models.v->str(v)
A:requests.models.fdata->fp.read()
A:requests.models.rf->RequestField(name=k, data=fdata, filename=fn, headers=fh)
A:requests.models.(body, content_type)->self._encode_files(files, data)
A:requests.models.self.hooks->default_hooks()
A:requests.models.p._cookies->_copy_cookie_jar(self._cookies)
A:requests.models.self.method->to_native_string(self.method.upper())
A:requests.models.host->self._get_idna_encoded_host(host)
A:requests.models.url->requote_uri(urlunparse([scheme, netloc, path, None, query, fragment]))
A:requests.models.(scheme, auth, host, port, path, query, fragment)->parse_url(url)
A:requests.models.params->to_native_string(params)
A:requests.models.enc_params->self._encode_params(params)
A:requests.models.self.headers->CaseInsensitiveDict()
A:requests.models.body->self._encode_params(data)
A:requests.models.is_stream->all([hasattr(data, '__iter__'), not isinstance(data, (basestring, list, tuple, Mapping))])
A:requests.models.length->super_len(body)
A:requests.models.self._body_position->object()
A:requests.models.self.headers['Content-Length']->builtin_str(length)
A:requests.models.url_auth->get_auth_from_url(self.url)
A:requests.models.auth->HTTPBasicAuth(*auth)
A:requests.models.r->auth(self)
A:requests.models.self._cookies->cookiejar_from_dict(cookies)
A:requests.models.cookie_header->get_cookie_header(self._cookies, self)
A:requests.models.self.cookies->cookiejar_from_dict({})
A:requests.models.self.elapsed->datetime.timedelta(0)
A:requests.models.chunk->self.raw.read(chunk_size)
A:requests.models.reused_chunks->iter_slices(self._content, chunk_size)
A:requests.models.stream_chunks->generate()
A:requests.models.chunks->stream_decode_response_unicode(chunks, self)
A:requests.models.lines->self.raw.read(chunk_size).splitlines()
A:requests.models.pending->self.raw.read(chunk_size).splitlines().pop()
A:requests.models.content->str(self.content, errors='replace')
A:requests.models.encoding->guess_json_utf(self.content)
A:requests.models.header->self.headers.get('link')
A:requests.models.links->parse_header_links(header)
A:requests.models.reason->self.reason.decode('iso-8859-1')
A:requests.models.release_conn->getattr(self.raw, 'release_conn', None)
requests.PreparedRequest(self)
requests.PreparedRequest.__repr__(self)
requests.PreparedRequest._get_idna_encoded_host(host)
requests.PreparedRequest.copy(self)
requests.PreparedRequest.prepare(self,method=None,url=None,headers=None,files=None,data=None,params=None,auth=None,cookies=None,hooks=None,json=None)
requests.PreparedRequest.prepare_auth(self,auth,url='')
requests.PreparedRequest.prepare_body(self,data,files,json=None)
requests.PreparedRequest.prepare_content_length(self,body)
requests.PreparedRequest.prepare_cookies(self,cookies)
requests.PreparedRequest.prepare_headers(self,headers)
requests.PreparedRequest.prepare_hooks(self,hooks)
requests.PreparedRequest.prepare_method(self,method)
requests.PreparedRequest.prepare_url(self,url,params)
requests.Request(self,method=None,url=None,headers=None,files=None,data=None,params=None,auth=None,cookies=None,hooks=None,json=None)
requests.Request.__repr__(self)
requests.Request.prepare(self)
requests.RequestEncodingMixin
requests.RequestEncodingMixin._encode_files(files,data)
requests.RequestEncodingMixin._encode_params(data)
requests.RequestEncodingMixin.path_url(self)
requests.RequestHooksMixin
requests.RequestHooksMixin.deregister_hook(self,event,hook)
requests.RequestHooksMixin.register_hook(self,event,hook)
requests.Response(self)
requests.Response.__bool__(self)
requests.Response.__enter__(self)
requests.Response.__exit__(self,*args)
requests.Response.__getstate__(self)
requests.Response.__iter__(self)
requests.Response.__nonzero__(self)
requests.Response.__repr__(self)
requests.Response.__setstate__(self,state)
requests.Response.apparent_encoding(self)
requests.Response.close(self)
requests.Response.content(self)
requests.Response.is_permanent_redirect(self)
requests.Response.is_redirect(self)
requests.Response.iter_content(self,chunk_size=1,decode_unicode=False)
requests.Response.iter_lines(self,chunk_size=ITER_CHUNK_SIZE,decode_unicode=False,delimiter=None)
requests.Response.json(self,**kwargs)
requests.Response.links(self)
requests.Response.next(self)
requests.Response.ok(self)
requests.Response.raise_for_status(self)
requests.Response.text(self)
requests.models.PreparedRequest(self)
requests.models.PreparedRequest.__init__(self)
requests.models.PreparedRequest.__repr__(self)
requests.models.PreparedRequest._get_idna_encoded_host(host)
requests.models.PreparedRequest.copy(self)
requests.models.PreparedRequest.prepare(self,method=None,url=None,headers=None,files=None,data=None,params=None,auth=None,cookies=None,hooks=None,json=None)
requests.models.PreparedRequest.prepare_auth(self,auth,url='')
requests.models.PreparedRequest.prepare_body(self,data,files,json=None)
requests.models.PreparedRequest.prepare_content_length(self,body)
requests.models.PreparedRequest.prepare_cookies(self,cookies)
requests.models.PreparedRequest.prepare_headers(self,headers)
requests.models.PreparedRequest.prepare_hooks(self,hooks)
requests.models.PreparedRequest.prepare_method(self,method)
requests.models.PreparedRequest.prepare_url(self,url,params)
requests.models.Request(self,method=None,url=None,headers=None,files=None,data=None,params=None,auth=None,cookies=None,hooks=None,json=None)
requests.models.Request.__init__(self,method=None,url=None,headers=None,files=None,data=None,params=None,auth=None,cookies=None,hooks=None,json=None)
requests.models.Request.__repr__(self)
requests.models.Request.prepare(self)
requests.models.RequestEncodingMixin
requests.models.RequestEncodingMixin._encode_files(files,data)
requests.models.RequestEncodingMixin._encode_params(data)
requests.models.RequestEncodingMixin.path_url(self)
requests.models.RequestHooksMixin
requests.models.RequestHooksMixin.deregister_hook(self,event,hook)
requests.models.RequestHooksMixin.register_hook(self,event,hook)
requests.models.Response(self)
requests.models.Response.__bool__(self)
requests.models.Response.__enter__(self)
requests.models.Response.__exit__(self,*args)
requests.models.Response.__getstate__(self)
requests.models.Response.__init__(self)
requests.models.Response.__iter__(self)
requests.models.Response.__nonzero__(self)
requests.models.Response.__repr__(self)
requests.models.Response.__setstate__(self,state)
requests.models.Response.apparent_encoding(self)
requests.models.Response.close(self)
requests.models.Response.content(self)
requests.models.Response.is_permanent_redirect(self)
requests.models.Response.is_redirect(self)
requests.models.Response.iter_content(self,chunk_size=1,decode_unicode=False)
requests.models.Response.iter_lines(self,chunk_size=ITER_CHUNK_SIZE,decode_unicode=False,delimiter=None)
requests.models.Response.json(self,**kwargs)
requests.models.Response.links(self)
requests.models.Response.next(self)
requests.models.Response.ok(self)
requests.models.Response.raise_for_status(self)
requests.models.Response.text(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/requests2.32.4/lib/python3.9/site-packages/requests/cookies.py----------------------------------------
A:requests.cookies.host->to_native_string(self._r.headers['Host'], encoding='utf-8')
A:requests.cookies.parsed->urlparse(self._r.url)
A:requests.cookies.req->MockRequest(request)
A:requests.cookies.res->MockResponse(response._original_response.msg)
A:requests.cookies.r->MockRequest(request)
A:requests.cookies.c->create_cookie(name, value, **kwargs)
A:requests.cookies.cookie.value->cookie.value.replace('\\"', '')
A:requests.cookies.state->self.__dict__.copy()
A:requests.cookies.self._cookies_lock->dummy_threading.RLock()
A:requests.cookies.new_cj->RequestsCookieJar()
A:requests.cookies.new_jar->copy.copy(jar)
A:requests.cookies.result['port_specified']->bool(result['port'])
A:requests.cookies.result['domain_specified']->bool(result['domain'])
A:requests.cookies.result['domain_initial_dot']->result['domain'].startswith('.')
A:requests.cookies.result['path_specified']->bool(result['path'])
A:requests.cookies.expires->calendar.timegm(time.strptime(morsel['expires'], time_template))
A:requests.cookies.cookiejar->cookiejar_from_dict(cookies, cookiejar=cookiejar, overwrite=False)
requests.cookies.CookieConflictError(RuntimeError)
requests.cookies.MockRequest(self,request)
requests.cookies.MockRequest.__init__(self,request)
requests.cookies.MockRequest.add_header(self,key,val)
requests.cookies.MockRequest.add_unredirected_header(self,name,value)
requests.cookies.MockRequest.get_full_url(self)
requests.cookies.MockRequest.get_header(self,name,default=None)
requests.cookies.MockRequest.get_host(self)
requests.cookies.MockRequest.get_new_headers(self)
requests.cookies.MockRequest.get_origin_req_host(self)
requests.cookies.MockRequest.get_type(self)
requests.cookies.MockRequest.has_header(self,name)
requests.cookies.MockRequest.host(self)
requests.cookies.MockRequest.is_unverifiable(self)
requests.cookies.MockRequest.origin_req_host(self)
requests.cookies.MockRequest.unverifiable(self)
requests.cookies.MockResponse(self,headers)
requests.cookies.MockResponse.__init__(self,headers)
requests.cookies.MockResponse.getheaders(self,name)
requests.cookies.MockResponse.info(self)
requests.cookies.RequestsCookieJar(cookielib.CookieJar,MutableMapping)
requests.cookies.RequestsCookieJar.__contains__(self,name)
requests.cookies.RequestsCookieJar.__delitem__(self,name)
requests.cookies.RequestsCookieJar.__getitem__(self,name)
requests.cookies.RequestsCookieJar.__getstate__(self)
requests.cookies.RequestsCookieJar.__setitem__(self,name,value)
requests.cookies.RequestsCookieJar.__setstate__(self,state)
requests.cookies.RequestsCookieJar._find(self,name,domain=None,path=None)
requests.cookies.RequestsCookieJar._find_no_duplicates(self,name,domain=None,path=None)
requests.cookies.RequestsCookieJar.copy(self)
requests.cookies.RequestsCookieJar.get(self,name,default=None,domain=None,path=None)
requests.cookies.RequestsCookieJar.get_dict(self,domain=None,path=None)
requests.cookies.RequestsCookieJar.get_policy(self)
requests.cookies.RequestsCookieJar.items(self)
requests.cookies.RequestsCookieJar.iteritems(self)
requests.cookies.RequestsCookieJar.iterkeys(self)
requests.cookies.RequestsCookieJar.itervalues(self)
requests.cookies.RequestsCookieJar.keys(self)
requests.cookies.RequestsCookieJar.list_domains(self)
requests.cookies.RequestsCookieJar.list_paths(self)
requests.cookies.RequestsCookieJar.multiple_domains(self)
requests.cookies.RequestsCookieJar.set(self,name,value,**kwargs)
requests.cookies.RequestsCookieJar.set_cookie(self,cookie,*args,**kwargs)
requests.cookies.RequestsCookieJar.update(self,other)
requests.cookies.RequestsCookieJar.values(self)
requests.cookies._copy_cookie_jar(jar)
requests.cookies.cookiejar_from_dict(cookie_dict,cookiejar=None,overwrite=True)
requests.cookies.create_cookie(name,value,**kwargs)
requests.cookies.extract_cookies_to_jar(jar,request,response)
requests.cookies.get_cookie_header(jar,request)
requests.cookies.merge_cookies(cookiejar,cookies)
requests.cookies.morsel_to_cookie(morsel)
requests.cookies.remove_cookie_by_name(cookiejar,name,domain=None,path=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/requests2.32.4/lib/python3.9/site-packages/requests/adapters.py----------------------------------------
A:requests.adapters._preloaded_ssl_context->create_urllib3_context()
A:requests.adapters.parsed_request_url->urlparse(request.url)
A:requests.adapters.scheme->urlparse(request.url).scheme.lower()
A:requests.adapters.poolmanager_kwargs->getattr(poolmanager, 'connection_pool_kw', {})
A:requests.adapters.has_poolmanager_ssl_context->getattr(poolmanager, 'connection_pool_kw', {}).get('ssl_context')
A:requests.adapters.self.max_retries->urllib3.util.retry.Retry.from_int(max_retries)
A:requests.adapters.self.poolmanager->PoolManager(num_pools=connections, maxsize=maxsize, block=block, **pool_kwargs)
A:requests.adapters.(username, password)->get_auth_from_url(proxy)
A:requests.adapters.managerself.proxy_manager[proxy]->proxy_from_url(proxy, proxy_headers=proxy_headers, num_pools=self._pool_connections, maxsize=self._pool_maxsize, block=self._pool_block, **proxy_kwargs)
A:requests.adapters.proxy_headers->self.proxy_headers(proxy)
A:requests.adapters.response->Response()
A:requests.adapters.response.status_code->getattr(resp, 'status', None)
A:requests.adapters.response.headers->CaseInsensitiveDict(getattr(resp, 'headers', {}))
A:requests.adapters.response.encoding->get_encoding_from_headers(response.headers)
A:requests.adapters.response.url->req.url.decode('utf-8')
A:requests.adapters.proxy->select_proxy(request.url, proxies)
A:requests.adapters.(host_params, pool_kwargs)->self.build_connection_pool_key_attributes(request, verify, cert)
A:requests.adapters.proxy_url->parse_url(proxy)
A:requests.adapters.proxy_manager->self.proxy_manager_for(proxy)
A:requests.adapters.conn->self.get_connection_with_tls_context(request, verify, proxies=proxies, cert=cert)
A:requests.adapters.parsed->urlparse(url)
A:requests.adapters.url->self.request_url(request, proxies)
A:requests.adapters.proxy_scheme->urlparse(proxy).scheme.lower()
A:requests.adapters.using_socks_proxy->urlparse(proxy).scheme.lower().startswith('socks')
A:requests.adapters.headers['Proxy-Authorization']->_basic_auth_str(username, password)
A:requests.adapters.timeout->TimeoutSauce(connect=timeout, read=timeout)
A:requests.adapters.resp->self.get_connection_with_tls_context(request, verify, proxies=proxies, cert=cert).urlopen(method=request.method, url=url, body=request.body, headers=request.headers, redirect=False, assert_same_host=False, preload_content=False, decode_content=False, retries=self.max_retries, timeout=timeout, chunked=chunked)
requests.adapters.BaseAdapter(self)
requests.adapters.BaseAdapter.__init__(self)
requests.adapters.BaseAdapter.close(self)
requests.adapters.BaseAdapter.send(self,request,stream=False,timeout=None,verify=True,cert=None,proxies=None)
requests.adapters.HTTPAdapter(self,pool_connections=DEFAULT_POOLSIZE,pool_maxsize=DEFAULT_POOLSIZE,max_retries=DEFAULT_RETRIES,pool_block=DEFAULT_POOLBLOCK)
requests.adapters.HTTPAdapter.__getstate__(self)
requests.adapters.HTTPAdapter.__init__(self,pool_connections=DEFAULT_POOLSIZE,pool_maxsize=DEFAULT_POOLSIZE,max_retries=DEFAULT_RETRIES,pool_block=DEFAULT_POOLBLOCK)
requests.adapters.HTTPAdapter.__setstate__(self,state)
requests.adapters.HTTPAdapter.add_headers(self,request,**kwargs)
requests.adapters.HTTPAdapter.build_connection_pool_key_attributes(self,request,verify,cert=None)
requests.adapters.HTTPAdapter.build_response(self,req,resp)
requests.adapters.HTTPAdapter.cert_verify(self,conn,url,verify,cert)
requests.adapters.HTTPAdapter.close(self)
requests.adapters.HTTPAdapter.get_connection(self,url,proxies=None)
requests.adapters.HTTPAdapter.get_connection_with_tls_context(self,request,verify,proxies=None,cert=None)
requests.adapters.HTTPAdapter.init_poolmanager(self,connections,maxsize,block=DEFAULT_POOLBLOCK,**pool_kwargs)
requests.adapters.HTTPAdapter.proxy_headers(self,proxy)
requests.adapters.HTTPAdapter.proxy_manager_for(self,proxy,**proxy_kwargs)
requests.adapters.HTTPAdapter.request_url(self,request,proxies)
requests.adapters.HTTPAdapter.send(self,request,stream=False,timeout=None,verify=True,cert=None,proxies=None)
requests.adapters._urllib3_request_context(request:'PreparedRequest',verify:'bool|str|None',client_cert:'typing.Tuple[str,str]|str|None',poolmanager:'PoolManager')->'(typing.Dict[str, typing.Any], typing.Dict[str, typing.Any])'


----------------------------------------/dataset/nuaa/anaconda3/envs/requests2.32.4/lib/python3.9/site-packages/requests/auth.py----------------------------------------
A:requests.auth.username->username.encode('latin1').encode('latin1')
A:requests.auth.password->password.encode('latin1').encode('latin1')
A:requests.auth.r.headers['Authorization']->self.build_digest_header(r.method, r.url)
A:requests.auth.r.headers['Proxy-Authorization']->_basic_auth_str(self.username, self.password)
A:requests.auth.self._thread_local->threading.local()
A:requests.auth.qop->self._thread_local.chal.get('qop')
A:requests.auth.algorithm->self._thread_local.chal.get('algorithm')
A:requests.auth.opaque->self._thread_local.chal.get('opaque')
A:requests.auth._algorithm->self._thread_local.chal.get('algorithm').upper()
A:requests.auth.x->x.encode('utf-8').encode('utf-8')
A:requests.auth.p_parsed->urlparse(url)
A:requests.auth.HA1->hash_utf8(f'{HA1}:{nonce}:{cnonce}')
A:requests.auth.HA2->hash_utf8(A2)
A:requests.auth.s->str(self._thread_local.nonce_count).encode('utf-8')
A:requests.auth.respdig->KD(HA1, noncebit)
A:requests.auth.s_auth->r.headers.get('www-authenticate', '')
A:requests.auth.pat->re.compile('digest ', flags=re.IGNORECASE)
A:requests.auth.self._thread_local.chal->parse_dict_header(pat.sub('', s_auth, count=1))
A:requests.auth.prep->r.request.copy()
A:requests.auth.prep.headers['Authorization']->self.build_digest_header(prep.method, prep.url)
A:requests.auth._r->r.connection.send(prep, **kwargs)
A:requests.auth.self._thread_local.pos->r.body.tell()
requests.auth.AuthBase(self,r)
requests.auth.AuthBase.__call__(self,r)
requests.auth.HTTPBasicAuth(self,username,password)
requests.auth.HTTPBasicAuth.__eq__(self,other)
requests.auth.HTTPBasicAuth.__init__(self,username,password)
requests.auth.HTTPBasicAuth.__ne__(self,other)
requests.auth.HTTPDigestAuth(self,username,password)
requests.auth.HTTPDigestAuth.__eq__(self,other)
requests.auth.HTTPDigestAuth.__init__(self,username,password)
requests.auth.HTTPDigestAuth.__ne__(self,other)
requests.auth.HTTPDigestAuth.build_digest_header(self,method,url)
requests.auth.HTTPDigestAuth.handle_401(self,r,**kwargs)
requests.auth.HTTPDigestAuth.handle_redirect(self,r,**kwargs)
requests.auth.HTTPDigestAuth.init_per_thread_state(self)
requests.auth.HTTPProxyAuth(self,r)
requests.auth.HTTPProxyAuth.__call__(self,r)
requests.auth._basic_auth_str(username,password)


----------------------------------------/dataset/nuaa/anaconda3/envs/requests2.32.4/lib/python3.9/site-packages/requests/compat.py----------------------------------------
A:requests.compat.chardet->_resolve_char_detection()
requests.compat._resolve_char_detection()


----------------------------------------/dataset/nuaa/anaconda3/envs/requests2.32.4/lib/python3.9/site-packages/requests/status_codes.py----------------------------------------
A:requests.status_codes.codes->LookupDict(name='status_codes')
A:requests.status_codes.names->', '.join((f'``{n}``' for n in _codes[code]))
requests.status_codes._init()


----------------------------------------/dataset/nuaa/anaconda3/envs/requests2.32.4/lib/python3.9/site-packages/requests/certs.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/requests2.32.4/lib/python3.9/site-packages/requests/_internal_utils.py----------------------------------------
A:requests._internal_utils._VALID_HEADER_NAME_RE_BYTE->re.compile(b'^[^:\\s][^:\\r\\n]*$')
A:requests._internal_utils._VALID_HEADER_NAME_RE_STR->re.compile('^[^:\\s][^:\\r\\n]*$')
A:requests._internal_utils._VALID_HEADER_VALUE_RE_BYTE->re.compile(b'^\\S[^\\r\\n]*$|^$')
A:requests._internal_utils._VALID_HEADER_VALUE_RE_STR->re.compile('^\\S[^\\r\\n]*$|^$')
A:requests._internal_utils.out->string.decode(encoding)
requests._internal_utils.to_native_string(string,encoding='ascii')
requests._internal_utils.unicode_is_ascii(u_string)


----------------------------------------/dataset/nuaa/anaconda3/envs/requests2.32.4/lib/python3.9/site-packages/requests/__version__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/requests2.32.4/lib/python3.9/site-packages/requests/hooks.py----------------------------------------
A:requests.hooks.hooks->hooks.get(key).get(key)
A:requests.hooks._hook_data->hook(hook_data, **kwargs)
requests.hooks.default_hooks()
requests.hooks.dispatch_hook(key,hooks,hook_data,**kwargs)

