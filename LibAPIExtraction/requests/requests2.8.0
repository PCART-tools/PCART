
----------------------------------------/home/zhang/Packages/requests/requests2.8.0/sessions.py----------------------------------------
A:requests.sessions.merged_setting->dict_class(to_key_val_list(session_setting))
A:requests.sessions.prepared_request->Request(method=method.upper(), url=url, headers=headers, files=files, data=data or {}, json=json, params=params or {}, auth=auth, cookies=cookies, hooks=hooks).copy()
A:requests.sessions.new_hist->list(hist)
A:requests.sessions.parsed_rurl->urlparse(resp.url)
A:requests.sessions.parsed->urlparse(url)
A:requests.sessions.url->requote_uri(url)
A:requests.sessions.prepared_request.url->to_native_string(url)
A:requests.sessions.proxies->merge_setting(proxies, self.proxies)
A:requests.sessions.resp->self.send(prep, **send_kwargs)
A:requests.sessions.original_parsed->urlparse(response.request.url)
A:requests.sessions.redirect_parsed->urlparse(url)
A:requests.sessions.environ_proxies->get_environ_proxies(url)
A:requests.sessions.proxy->get_environ_proxies(url).get(scheme)
A:requests.sessions.(username, password)->get_auth_from_url(new_proxies[scheme])
A:requests.sessions.headers['Proxy-Authorization']->_basic_auth_str(username, password)
A:requests.sessions.self.headers->default_headers()
A:requests.sessions.self.hooks->default_hooks()
A:requests.sessions.self.cookies->cookiejar_from_dict({})
A:requests.sessions.self.adapters->OrderedDict()
A:requests.sessions.self.redirect_cache->RecentlyUsedContainer(REDIRECT_CACHE_SIZE)
A:requests.sessions.cookies->cookiejar_from_dict(cookies)
A:requests.sessions.merged_cookies->merge_cookies(merge_cookies(RequestsCookieJar(), self.cookies), cookies)
A:requests.sessions.auth->get_netrc_auth(request.url)
A:requests.sessions.p->PreparedRequest()
A:requests.sessions.method->to_native_string(method)
A:requests.sessions.req->Request(method=method.upper(), url=url, headers=headers, files=files, data=data or {}, json=json, params=params or {}, auth=auth, cookies=cookies, hooks=hooks)
A:requests.sessions.prep->self.prepare_request(req)
A:requests.sessions.settings->self.merge_environment_settings(prep.url, proxies, stream, verify, cert)
A:requests.sessions.checked_urls->set()
A:requests.sessions.new_url->self.redirect_cache.get(request.url)
A:requests.sessions.allow_redirects->kwargs.pop('allow_redirects', True)
A:requests.sessions.stream->merge_setting(stream, self.stream)
A:requests.sessions.adapter->self.get_adapter(url=request.url)
A:requests.sessions.start->datetime.datetime.utcnow()
A:requests.sessions.r->history.pop()
A:requests.sessions.gen->self.resolve_redirects(r, request, **kwargs)
A:requests.sessions.verify->merge_setting(verify, self.verify)
A:requests.sessions.cert->merge_setting(cert, self.cert)
A:requests.sessions.self.adapters[key]->self.adapters.pop(key)
A:requests.sessions.state->dict(((attr, getattr(self, attr, None)) for attr in self.__attrs__))
A:requests.sessions.state['redirect_cache']->dict(self.redirect_cache)
A:requests.sessions.redirect_cache->dict(((attr, getattr(self, attr, None)) for attr in self.__attrs__)).pop('redirect_cache', {})
requests.Session(self)
requests.Session.__enter__(self)
requests.Session.__exit__(self,*args)
requests.Session.__getstate__(self)
requests.Session.__setstate__(self,state)
requests.Session.close(self)
requests.Session.delete(self,url,**kwargs)
requests.Session.get(self,url,**kwargs)
requests.Session.get_adapter(self,url)
requests.Session.head(self,url,**kwargs)
requests.Session.merge_environment_settings(self,url,proxies,stream,verify,cert)
requests.Session.mount(self,prefix,adapter)
requests.Session.options(self,url,**kwargs)
requests.Session.patch(self,url,data=None,**kwargs)
requests.Session.post(self,url,data=None,json=None,**kwargs)
requests.Session.prepare_request(self,request)
requests.Session.put(self,url,data=None,**kwargs)
requests.Session.request(self,method,url,params=None,data=None,headers=None,cookies=None,files=None,auth=None,timeout=None,allow_redirects=True,proxies=None,hooks=None,stream=None,verify=None,cert=None,json=None)
requests.Session.send(self,request,**kwargs)
requests.SessionRedirectMixin(object)
requests.SessionRedirectMixin.rebuild_auth(self,prepared_request,response)
requests.SessionRedirectMixin.rebuild_proxies(self,prepared_request,proxies)
requests.SessionRedirectMixin.resolve_redirects(self,resp,req,stream=False,timeout=None,verify=True,cert=None,proxies=None,**adapter_kwargs)
requests.session()
requests.sessions.Session(self)
requests.sessions.Session.__enter__(self)
requests.sessions.Session.__exit__(self,*args)
requests.sessions.Session.__getstate__(self)
requests.sessions.Session.__init__(self)
requests.sessions.Session.__setstate__(self,state)
requests.sessions.Session.close(self)
requests.sessions.Session.delete(self,url,**kwargs)
requests.sessions.Session.get(self,url,**kwargs)
requests.sessions.Session.get_adapter(self,url)
requests.sessions.Session.head(self,url,**kwargs)
requests.sessions.Session.merge_environment_settings(self,url,proxies,stream,verify,cert)
requests.sessions.Session.mount(self,prefix,adapter)
requests.sessions.Session.options(self,url,**kwargs)
requests.sessions.Session.patch(self,url,data=None,**kwargs)
requests.sessions.Session.post(self,url,data=None,json=None,**kwargs)
requests.sessions.Session.prepare_request(self,request)
requests.sessions.Session.put(self,url,data=None,**kwargs)
requests.sessions.Session.request(self,method,url,params=None,data=None,headers=None,cookies=None,files=None,auth=None,timeout=None,allow_redirects=True,proxies=None,hooks=None,stream=None,verify=None,cert=None,json=None)
requests.sessions.Session.send(self,request,**kwargs)
requests.sessions.SessionRedirectMixin(object)
requests.sessions.SessionRedirectMixin.rebuild_auth(self,prepared_request,response)
requests.sessions.SessionRedirectMixin.rebuild_proxies(self,prepared_request,proxies)
requests.sessions.SessionRedirectMixin.resolve_redirects(self,resp,req,stream=False,timeout=None,verify=True,cert=None,proxies=None,**adapter_kwargs)
requests.sessions.merge_hooks(request_hooks,session_hooks,dict_class=OrderedDict)
requests.sessions.merge_setting(request_setting,session_setting,dict_class=OrderedDict)
requests.sessions.session()


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/utils.py----------------------------------------
A:requests.utils.DEFAULT_CA_BUNDLE_PATH->certs.where()
A:requests.utils.d->d.items().items()
A:requests.utils.fileno->o.fileno()
A:requests.utils.loc->os.path.expanduser('~/{0}'.format(f))
A:requests.utils.ri->urlparse(url)
A:requests.utils._netrc->netrc(netrc_path).authenticators(host)
A:requests.utils.name->getattr(obj, 'name', None)
A:requests.utils.value->unquote_header_value(value[1:-1])
A:requests.utils.item->unquote_header_value(item[1:-1])
A:requests.utils.(name, value)->unquote_header_value(item[1:-1]).split('=', 1)
A:requests.utils.cj2->cookiejar_from_dict(cookie_dict)
A:requests.utils.charset_re->re.compile('<meta.*?charset=["\\\']*(.+?)["\\\'>]', flags=re.I)
A:requests.utils.pragma_re->re.compile('<meta.*?content=["\\\']*;?charset=(.+?)["\\\'>]', flags=re.I)
A:requests.utils.xml_re->re.compile('^<\\?xml.*?encoding=["\\\']*(.+?)["\\\'>]')
A:requests.utils.content_type->headers.get('content-type')
A:requests.utils.(content_type, params)->cgi.parse_header(content_type)
A:requests.utils.decoder->codecs.getincrementaldecoder(r.encoding)(errors='replace')
A:requests.utils.rv->codecs.getincrementaldecoder(r.encoding)(errors='replace').decode(b'', final=True)
A:requests.utils.encoding->get_encoding_from_headers(r.headers)
A:requests.utils.UNRESERVED_SET->frozenset('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz' + '0123456789-._~')
A:requests.utils.parts->uri.split('%')
A:requests.utils.c->chr(int(h, 16))
A:requests.utils.(netaddr, bits)->net.split('/')
A:requests.utils.mask->int(string_network.split('/')[1])
A:requests.utils.no_proxy->get_proxy('no_proxy')
A:requests.utils.bypass->proxy_bypass(netloc)
A:requests.utils.urlparts->urlparse(url)
A:requests.utils.proxy->proxies.get(urlparts.scheme)
A:requests.utils.(url, params)->val.split(';', 1)
A:requests.utils.link['url']->url.strip('<> \'"')
A:requests.utils.(key, value)->param.split('=')
A:requests.utils.link[key.strip(replace_chars)]->unquote_header_value(value[1:-1]).strip(replace_chars)
A:requests.utils._null->'\x00'.encode('ascii')
A:requests.utils.nullcount->sample.count(_null)
A:requests.utils.(scheme, netloc, path, params, query, fragment)->urlparse(url)
A:requests.utils.parsed->urlparse(url)
A:requests.utils.out->string.decode(encoding)
requests.utils.add_dict_to_cookiejar(cj,cookie_dict)
requests.utils.address_in_network(ip,net)
requests.utils.default_headers()
requests.utils.default_user_agent(name='python-requests')
requests.utils.dict_from_cookiejar(cj)
requests.utils.dict_to_sequence(d)
requests.utils.dotted_netmask(mask)
requests.utils.from_key_val_list(value)
requests.utils.get_auth_from_url(url)
requests.utils.get_encoding_from_headers(headers)
requests.utils.get_encodings_from_content(content)
requests.utils.get_environ_proxies(url)
requests.utils.get_netrc_auth(url,raise_errors=False)
requests.utils.get_unicode_from_response(r)
requests.utils.guess_filename(obj)
requests.utils.guess_json_utf(data)
requests.utils.is_ipv4_address(string_ip)
requests.utils.is_valid_cidr(string_network)
requests.utils.iter_slices(string,slice_length)
requests.utils.parse_dict_header(value)
requests.utils.parse_header_links(value)
requests.utils.parse_list_header(value)
requests.utils.prepend_scheme_if_needed(url,new_scheme)
requests.utils.requote_uri(uri)
requests.utils.select_proxy(url,proxies)
requests.utils.should_bypass_proxies(url)
requests.utils.stream_decode_response_unicode(iterator,r)
requests.utils.super_len(o)
requests.utils.to_key_val_list(value)
requests.utils.to_native_string(string,encoding='ascii')
requests.utils.unquote_header_value(value,is_filename=False)
requests.utils.unquote_unreserved(uri)
requests.utils.urldefragauth(url)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/hooks.py----------------------------------------
A:requests.hooks.hooks->hooks.get(key).get(key)
A:requests.hooks._hook_data->hook(hook_data, **kwargs)
requests.hooks.default_hooks()
requests.hooks.dispatch_hook(key,hooks,hook_data,**kwargs)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/cookies.py----------------------------------------
A:requests.cookies.parsed->urlparse(self._r.url)
A:requests.cookies.req->MockRequest(request)
A:requests.cookies.res->MockResponse(response._original_response.msg)
A:requests.cookies.r->MockRequest(request)
A:requests.cookies.c->create_cookie(name, value, **kwargs)
A:requests.cookies.cookie.value->cookie.value.replace('\\"', '')
A:requests.cookies.state->self.__dict__.copy()
A:requests.cookies.self._cookies_lock->dummy_threading.RLock()
A:requests.cookies.new_cj->RequestsCookieJar()
A:requests.cookies.new_jar->copy.copy(jar)
A:requests.cookies.result->dict(version=0, name=name, value=value, port=None, domain='', path='/', secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={'HttpOnly': None}, rfc2109=False)
A:requests.cookies.result['port_specified']->bool(result['port'])
A:requests.cookies.result['domain_specified']->bool(result['domain'])
A:requests.cookies.result['domain_initial_dot']->result['domain'].startswith('.')
A:requests.cookies.result['path_specified']->bool(result['path'])
A:requests.cookies.expires->int(time.mktime(time.strptime(morsel['expires'], time_template)) - time.timezone)
A:requests.cookies.cookiejar->cookiejar_from_dict(cookies, cookiejar=cookiejar, overwrite=False)
requests.cookies.CookieConflictError(RuntimeError)
requests.cookies.MockRequest(self,request)
requests.cookies.MockRequest.__init__(self,request)
requests.cookies.MockRequest.add_header(self,key,val)
requests.cookies.MockRequest.add_unredirected_header(self,name,value)
requests.cookies.MockRequest.get_full_url(self)
requests.cookies.MockRequest.get_header(self,name,default=None)
requests.cookies.MockRequest.get_host(self)
requests.cookies.MockRequest.get_new_headers(self)
requests.cookies.MockRequest.get_origin_req_host(self)
requests.cookies.MockRequest.get_type(self)
requests.cookies.MockRequest.has_header(self,name)
requests.cookies.MockRequest.host(self)
requests.cookies.MockRequest.is_unverifiable(self)
requests.cookies.MockRequest.origin_req_host(self)
requests.cookies.MockRequest.unverifiable(self)
requests.cookies.MockResponse(self,headers)
requests.cookies.MockResponse.__init__(self,headers)
requests.cookies.MockResponse.getheaders(self,name)
requests.cookies.MockResponse.info(self)
requests.cookies.RequestsCookieJar(cookielib.CookieJar,collections.MutableMapping)
requests.cookies.RequestsCookieJar.__delitem__(self,name)
requests.cookies.RequestsCookieJar.__getitem__(self,name)
requests.cookies.RequestsCookieJar.__getstate__(self)
requests.cookies.RequestsCookieJar.__setitem__(self,name,value)
requests.cookies.RequestsCookieJar.__setstate__(self,state)
requests.cookies.RequestsCookieJar._find(self,name,domain=None,path=None)
requests.cookies.RequestsCookieJar._find_no_duplicates(self,name,domain=None,path=None)
requests.cookies.RequestsCookieJar.copy(self)
requests.cookies.RequestsCookieJar.get(self,name,default=None,domain=None,path=None)
requests.cookies.RequestsCookieJar.get_dict(self,domain=None,path=None)
requests.cookies.RequestsCookieJar.items(self)
requests.cookies.RequestsCookieJar.iteritems(self)
requests.cookies.RequestsCookieJar.iterkeys(self)
requests.cookies.RequestsCookieJar.itervalues(self)
requests.cookies.RequestsCookieJar.keys(self)
requests.cookies.RequestsCookieJar.list_domains(self)
requests.cookies.RequestsCookieJar.list_paths(self)
requests.cookies.RequestsCookieJar.multiple_domains(self)
requests.cookies.RequestsCookieJar.set(self,name,value,**kwargs)
requests.cookies.RequestsCookieJar.set_cookie(self,cookie,*args,**kwargs)
requests.cookies.RequestsCookieJar.update(self,other)
requests.cookies.RequestsCookieJar.values(self)
requests.cookies._copy_cookie_jar(jar)
requests.cookies.cookiejar_from_dict(cookie_dict,cookiejar=None,overwrite=True)
requests.cookies.create_cookie(name,value,**kwargs)
requests.cookies.extract_cookies_to_jar(jar,request,response)
requests.cookies.get_cookie_header(jar,request)
requests.cookies.merge_cookies(cookiejar,cookies)
requests.cookies.morsel_to_cookie(morsel)
requests.cookies.remove_cookie_by_name(cookiejar,name,domain=None,path=None)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/structures.py----------------------------------------
A:requests.structures.self._store->dict()
A:requests.structures.other->CaseInsensitiveDict(other)
requests.structures.CaseInsensitiveDict(self,data=None,**kwargs)
requests.structures.CaseInsensitiveDict.__delitem__(self,key)
requests.structures.CaseInsensitiveDict.__eq__(self,other)
requests.structures.CaseInsensitiveDict.__getitem__(self,key)
requests.structures.CaseInsensitiveDict.__init__(self,data=None,**kwargs)
requests.structures.CaseInsensitiveDict.__iter__(self)
requests.structures.CaseInsensitiveDict.__len__(self)
requests.structures.CaseInsensitiveDict.__repr__(self)
requests.structures.CaseInsensitiveDict.__setitem__(self,key,value)
requests.structures.CaseInsensitiveDict.copy(self)
requests.structures.CaseInsensitiveDict.lower_items(self)
requests.structures.LookupDict(self,name=None)
requests.structures.LookupDict.__getitem__(self,key)
requests.structures.LookupDict.__init__(self,name=None)
requests.structures.LookupDict.__repr__(self)
requests.structures.LookupDict.get(self,key,default=None)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/certs.py----------------------------------------


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/api.py----------------------------------------
A:requests.api.session->sessions.Session()
A:requests.api.response->sessions.Session().request(method=method, url=url, **kwargs)
requests.api.delete(url,**kwargs)
requests.api.get(url,params=None,**kwargs)
requests.api.head(url,**kwargs)
requests.api.options(url,**kwargs)
requests.api.patch(url,data=None,**kwargs)
requests.api.post(url,data=None,json=None,**kwargs)
requests.api.put(url,data=None,**kwargs)
requests.api.request(method,url,**kwargs)
requests.delete(url,**kwargs)
requests.get(url,params=None,**kwargs)
requests.head(url,**kwargs)
requests.options(url,**kwargs)
requests.patch(url,data=None,**kwargs)
requests.post(url,data=None,json=None,**kwargs)
requests.put(url,data=None,**kwargs)
requests.request(method,url,**kwargs)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/exceptions.py----------------------------------------
A:requests.exceptions.response->kwargs.pop('response', None)
A:requests.exceptions.self.request->kwargs.pop('request', None)
requests.ConnectionError(RequestException)
requests.HTTPError(RequestException)
requests.RequestException(self,*args,**kwargs)
requests.Timeout(RequestException)
requests.TooManyRedirects(RequestException)
requests.URLRequired(RequestException)
requests.exceptions.ChunkedEncodingError(RequestException)
requests.exceptions.ConnectTimeout(ConnectionError,Timeout)
requests.exceptions.ConnectionError(RequestException)
requests.exceptions.ContentDecodingError(RequestException,BaseHTTPError)
requests.exceptions.HTTPError(RequestException)
requests.exceptions.InvalidSchema(RequestException,ValueError)
requests.exceptions.InvalidURL(RequestException,ValueError)
requests.exceptions.MissingSchema(RequestException,ValueError)
requests.exceptions.ProxyError(ConnectionError)
requests.exceptions.ReadTimeout(Timeout)
requests.exceptions.RequestException(self,*args,**kwargs)
requests.exceptions.RequestException.__init__(self,*args,**kwargs)
requests.exceptions.RetryError(RequestException)
requests.exceptions.SSLError(ConnectionError)
requests.exceptions.StreamConsumedError(RequestException,TypeError)
requests.exceptions.Timeout(RequestException)
requests.exceptions.TooManyRedirects(RequestException)
requests.exceptions.URLRequired(RequestException)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/adapters.py----------------------------------------
A:requests.adapters.self.max_retries->packages.urllib3.util.retry.Retry.from_int(max_retries)
A:requests.adapters.self.poolmanager->PoolManager(num_pools=connections, maxsize=maxsize, block=block, strict=True, **pool_kwargs)
A:requests.adapters.proxy_headers->self.proxy_headers(proxy)
A:requests.adapters.self.proxy_manager[proxy]->proxy_from_url(proxy, proxy_headers=proxy_headers, num_pools=self._pool_connections, maxsize=self._pool_maxsize, block=self._pool_block, **proxy_kwargs)
A:requests.adapters.response->Response()
A:requests.adapters.response.status_code->getattr(resp, 'status', None)
A:requests.adapters.response.headers->CaseInsensitiveDict(getattr(resp, 'headers', {}))
A:requests.adapters.response.encoding->get_encoding_from_headers(response.headers)
A:requests.adapters.response.url->req.url.decode('utf-8')
A:requests.adapters.proxy->select_proxy(request.url, proxies)
A:requests.adapters.proxy_manager->self.proxy_manager_for(proxy)
A:requests.adapters.conn->self.get_connection(request.url, proxies)
A:requests.adapters.parsed->urlparse(url)
A:requests.adapters.url->self.request_url(request, proxies)
A:requests.adapters.(username, password)->get_auth_from_url(proxy)
A:requests.adapters.headers['Proxy-Authorization']->_basic_auth_str(username, password)
A:requests.adapters.timeout->TimeoutSauce(connect=timeout, read=timeout)
A:requests.adapters.err->'Invalid timeout {0}. Pass a (connect, read) timeout tuple, or a single float to set both timeouts to the same value'.format(timeout)
A:requests.adapters.resp->packages.urllib3.response.HTTPResponse.from_httplib(r, pool=conn, connection=low_conn, preload_content=False, decode_content=False)
A:requests.adapters.low_conn->self.get_connection(request.url, proxies)._get_conn(timeout=DEFAULT_POOL_TIMEOUT)
A:requests.adapters.r->self.get_connection(request.url, proxies)._get_conn(timeout=DEFAULT_POOL_TIMEOUT).getresponse()
requests.adapters.BaseAdapter(self)
requests.adapters.BaseAdapter.__init__(self)
requests.adapters.BaseAdapter.close(self)
requests.adapters.BaseAdapter.send(self)
requests.adapters.HTTPAdapter(self,pool_connections=DEFAULT_POOLSIZE,pool_maxsize=DEFAULT_POOLSIZE,max_retries=DEFAULT_RETRIES,pool_block=DEFAULT_POOLBLOCK)
requests.adapters.HTTPAdapter.__getstate__(self)
requests.adapters.HTTPAdapter.__init__(self,pool_connections=DEFAULT_POOLSIZE,pool_maxsize=DEFAULT_POOLSIZE,max_retries=DEFAULT_RETRIES,pool_block=DEFAULT_POOLBLOCK)
requests.adapters.HTTPAdapter.__setstate__(self,state)
requests.adapters.HTTPAdapter.add_headers(self,request,**kwargs)
requests.adapters.HTTPAdapter.build_response(self,req,resp)
requests.adapters.HTTPAdapter.cert_verify(self,conn,url,verify,cert)
requests.adapters.HTTPAdapter.close(self)
requests.adapters.HTTPAdapter.get_connection(self,url,proxies=None)
requests.adapters.HTTPAdapter.init_poolmanager(self,connections,maxsize,block=DEFAULT_POOLBLOCK,**pool_kwargs)
requests.adapters.HTTPAdapter.proxy_headers(self,proxy)
requests.adapters.HTTPAdapter.proxy_manager_for(self,proxy,**proxy_kwargs)
requests.adapters.HTTPAdapter.request_url(self,request,proxies)
requests.adapters.HTTPAdapter.send(self,request,stream=False,timeout=None,verify=True,cert=None,proxies=None)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/compat.py----------------------------------------


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/auth.py----------------------------------------
A:requests.auth.r.headers['Authorization']->self.build_digest_header(r.method, r.url)
A:requests.auth.r.headers['Proxy-Authorization']->_basic_auth_str(self.username, self.password)
A:requests.auth.self._thread_local->threading.local()
A:requests.auth.qop->self._thread_local.chal.get('qop')
A:requests.auth.algorithm->self._thread_local.chal.get('algorithm')
A:requests.auth.opaque->self._thread_local.chal.get('opaque')
A:requests.auth._algorithm->self._thread_local.chal.get('algorithm').upper()
A:requests.auth.x->x.encode('utf-8').encode('utf-8')
A:requests.auth.p_parsed->urlparse(url)
A:requests.auth.HA1->hash_utf8('%s:%s:%s' % (HA1, nonce, cnonce))
A:requests.auth.HA2->hash_utf8(A2)
A:requests.auth.s->str(self._thread_local.nonce_count).encode('utf-8')
A:requests.auth.respdig->KD(HA1, noncebit)
A:requests.auth.s_auth->r.headers.get('www-authenticate', '')
A:requests.auth.pat->re.compile('digest ', flags=re.IGNORECASE)
A:requests.auth.self._thread_local.chal->parse_dict_header(pat.sub('', s_auth, count=1))
A:requests.auth.prep->r.request.copy()
A:requests.auth.prep.headers['Authorization']->self.build_digest_header(prep.method, prep.url)
A:requests.auth._r->r.connection.send(prep, **kwargs)
A:requests.auth.self._thread_local.pos->r.body.tell()
requests.auth.AuthBase(self,r)
requests.auth.AuthBase.__call__(self,r)
requests.auth.HTTPBasicAuth(self,username,password)
requests.auth.HTTPBasicAuth.__init__(self,username,password)
requests.auth.HTTPDigestAuth(self,username,password)
requests.auth.HTTPDigestAuth.__init__(self,username,password)
requests.auth.HTTPDigestAuth.build_digest_header(self,method,url)
requests.auth.HTTPDigestAuth.handle_401(self,r,**kwargs)
requests.auth.HTTPDigestAuth.handle_redirect(self,r,**kwargs)
requests.auth.HTTPDigestAuth.init_per_thread_state(self)
requests.auth.HTTPProxyAuth(self,r)
requests.auth.HTTPProxyAuth.__call__(self,r)
requests.auth._basic_auth_str(username,password)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/models.py----------------------------------------
A:requests.models.p->PreparedRequest()
A:requests.models.fields->to_key_val_list(data or {})
A:requests.models.files->to_key_val_list(files or {})
A:requests.models.v->str(v)
A:requests.models.fdata->fp.read()
A:requests.models.rf->RequestField(name=k, data=fdata, filename=fn, headers=fh)
A:requests.models.(body, content_type)->self._encode_files(files, data)
A:requests.models.self.hooks->default_hooks()
A:requests.models.p._cookies->_copy_cookie_jar(self._cookies)
A:requests.models.self.method->self.method.upper()
A:requests.models.url->requote_uri(urlunparse([scheme, netloc, path, None, query, fragment]))
A:requests.models.(scheme, auth, host, port, path, query, fragment)->parse_url(url)
A:requests.models.error->error.format(to_native_string(url, 'utf8')).format(to_native_string(url, 'utf8'))
A:requests.models.host->host.encode('idna').decode('utf-8').encode('idna').decode('utf-8')
A:requests.models.scheme->scheme.encode('utf-8').encode('utf-8')
A:requests.models.netloc->netloc.encode('utf-8').encode('utf-8')
A:requests.models.path->path.encode('utf-8').encode('utf-8')
A:requests.models.query->query.encode('utf-8').encode('utf-8')
A:requests.models.fragment->fragment.encode('utf-8').encode('utf-8')
A:requests.models.enc_params->self._encode_params(params)
A:requests.models.self.headers->CaseInsensitiveDict()
A:requests.models.body->self._encode_params(data)
A:requests.models.is_stream->all([hasattr(data, '__iter__'), not isinstance(data, (basestring, list, tuple, dict))])
A:requests.models.length->super_len(data)
A:requests.models.self.headers['Content-Length']->builtin_str(l)
A:requests.models.l->super_len(body)
A:requests.models.url_auth->get_auth_from_url(self.url)
A:requests.models.auth->HTTPBasicAuth(*auth)
A:requests.models.r->auth(self)
A:requests.models.self._cookies->cookiejar_from_dict(cookies)
A:requests.models.cookie_header->get_cookie_header(self._cookies, self)
A:requests.models.self.cookies->cookiejar_from_dict({})
A:requests.models.self.elapsed->datetime.timedelta(0)
A:requests.models.chunk->self.raw.read(chunk_size)
A:requests.models.reused_chunks->iter_slices(self._content, chunk_size)
A:requests.models.stream_chunks->generate()
A:requests.models.chunks->stream_decode_response_unicode(chunks, self)
A:requests.models.lines->self.raw.read(chunk_size).splitlines()
A:requests.models.pending->self.raw.read(chunk_size).splitlines().pop()
A:requests.models.content->str(self.content, errors='replace')
A:requests.models.encoding->guess_json_utf(self.content)
A:requests.models.header->self.headers.get('link')
A:requests.models.links->parse_header_links(header)
requests.PreparedRequest(self)
requests.PreparedRequest.__repr__(self)
requests.PreparedRequest.copy(self)
requests.PreparedRequest.prepare(self,method=None,url=None,headers=None,files=None,data=None,params=None,auth=None,cookies=None,hooks=None,json=None)
requests.PreparedRequest.prepare_auth(self,auth,url='')
requests.PreparedRequest.prepare_body(self,data,files,json=None)
requests.PreparedRequest.prepare_content_length(self,body)
requests.PreparedRequest.prepare_cookies(self,cookies)
requests.PreparedRequest.prepare_headers(self,headers)
requests.PreparedRequest.prepare_hooks(self,hooks)
requests.PreparedRequest.prepare_method(self,method)
requests.PreparedRequest.prepare_url(self,url,params)
requests.Request(self,method=None,url=None,headers=None,files=None,data=None,params=None,auth=None,cookies=None,hooks=None,json=None)
requests.Request.__repr__(self)
requests.Request.prepare(self)
requests.RequestEncodingMixin(object)
requests.RequestEncodingMixin._encode_files(files,data)
requests.RequestEncodingMixin._encode_params(data)
requests.RequestEncodingMixin.path_url(self)
requests.RequestHooksMixin(object)
requests.RequestHooksMixin.deregister_hook(self,event,hook)
requests.RequestHooksMixin.register_hook(self,event,hook)
requests.Response(self)
requests.Response.__bool__(self)
requests.Response.__getstate__(self)
requests.Response.__iter__(self)
requests.Response.__nonzero__(self)
requests.Response.__repr__(self)
requests.Response.__setstate__(self,state)
requests.Response.apparent_encoding(self)
requests.Response.close(self)
requests.Response.content(self)
requests.Response.is_permanent_redirect(self)
requests.Response.is_redirect(self)
requests.Response.iter_content(self,chunk_size=1,decode_unicode=False)
requests.Response.iter_lines(self,chunk_size=ITER_CHUNK_SIZE,decode_unicode=None,delimiter=None)
requests.Response.json(self,**kwargs)
requests.Response.links(self)
requests.Response.ok(self)
requests.Response.raise_for_status(self)
requests.Response.text(self)
requests.models.PreparedRequest(self)
requests.models.PreparedRequest.__init__(self)
requests.models.PreparedRequest.__repr__(self)
requests.models.PreparedRequest.copy(self)
requests.models.PreparedRequest.prepare(self,method=None,url=None,headers=None,files=None,data=None,params=None,auth=None,cookies=None,hooks=None,json=None)
requests.models.PreparedRequest.prepare_auth(self,auth,url='')
requests.models.PreparedRequest.prepare_body(self,data,files,json=None)
requests.models.PreparedRequest.prepare_content_length(self,body)
requests.models.PreparedRequest.prepare_cookies(self,cookies)
requests.models.PreparedRequest.prepare_headers(self,headers)
requests.models.PreparedRequest.prepare_hooks(self,hooks)
requests.models.PreparedRequest.prepare_method(self,method)
requests.models.PreparedRequest.prepare_url(self,url,params)
requests.models.Request(self,method=None,url=None,headers=None,files=None,data=None,params=None,auth=None,cookies=None,hooks=None,json=None)
requests.models.Request.__init__(self,method=None,url=None,headers=None,files=None,data=None,params=None,auth=None,cookies=None,hooks=None,json=None)
requests.models.Request.__repr__(self)
requests.models.Request.prepare(self)
requests.models.RequestEncodingMixin(object)
requests.models.RequestEncodingMixin._encode_files(files,data)
requests.models.RequestEncodingMixin._encode_params(data)
requests.models.RequestEncodingMixin.path_url(self)
requests.models.RequestHooksMixin(object)
requests.models.RequestHooksMixin.deregister_hook(self,event,hook)
requests.models.RequestHooksMixin.register_hook(self,event,hook)
requests.models.Response(self)
requests.models.Response.__bool__(self)
requests.models.Response.__getstate__(self)
requests.models.Response.__init__(self)
requests.models.Response.__iter__(self)
requests.models.Response.__nonzero__(self)
requests.models.Response.__repr__(self)
requests.models.Response.__setstate__(self,state)
requests.models.Response.apparent_encoding(self)
requests.models.Response.close(self)
requests.models.Response.content(self)
requests.models.Response.is_permanent_redirect(self)
requests.models.Response.is_redirect(self)
requests.models.Response.iter_content(self,chunk_size=1,decode_unicode=False)
requests.models.Response.iter_lines(self,chunk_size=ITER_CHUNK_SIZE,decode_unicode=None,delimiter=None)
requests.models.Response.json(self,**kwargs)
requests.models.Response.links(self)
requests.models.Response.ok(self)
requests.models.Response.raise_for_status(self)
requests.models.Response.text(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/status_codes.py----------------------------------------
A:requests.status_codes.codes->LookupDict(name='status_codes')


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/jpcntx.py----------------------------------------
A:requests.packages.chardet.jpcntx.(order, charLen)->self.get_order(aBuf[i:i + 2])
A:requests.packages.chardet.jpcntx.first_char->wrap_ord(aBuf[0])
A:requests.packages.chardet.jpcntx.second_char->wrap_ord(aBuf[1])
requests.packages.chardet.jpcntx.EUCJPContextAnalysis(JapaneseContextAnalysis)
requests.packages.chardet.jpcntx.EUCJPContextAnalysis.get_order(self,aBuf)
requests.packages.chardet.jpcntx.JapaneseContextAnalysis(self)
requests.packages.chardet.jpcntx.JapaneseContextAnalysis.__init__(self)
requests.packages.chardet.jpcntx.JapaneseContextAnalysis.feed(self,aBuf,aLen)
requests.packages.chardet.jpcntx.JapaneseContextAnalysis.get_confidence(self)
requests.packages.chardet.jpcntx.JapaneseContextAnalysis.get_order(self,aBuf)
requests.packages.chardet.jpcntx.JapaneseContextAnalysis.got_enough_data(self)
requests.packages.chardet.jpcntx.JapaneseContextAnalysis.reset(self)
requests.packages.chardet.jpcntx.SJISContextAnalysis(self)
requests.packages.chardet.jpcntx.SJISContextAnalysis.__init__(self)
requests.packages.chardet.jpcntx.SJISContextAnalysis.get_charset_name(self)
requests.packages.chardet.jpcntx.SJISContextAnalysis.get_order(self,aBuf)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/utf8prober.py----------------------------------------
A:requests.packages.chardet.utf8prober.self._mCodingSM->CodingStateMachine(UTF8SMModel)
A:requests.packages.chardet.utf8prober.codingState->self._mCodingSM.next_state(c)
requests.packages.chardet.utf8prober.UTF8Prober(self)
requests.packages.chardet.utf8prober.UTF8Prober.__init__(self)
requests.packages.chardet.utf8prober.UTF8Prober.feed(self,aBuf)
requests.packages.chardet.utf8prober.UTF8Prober.get_charset_name(self)
requests.packages.chardet.utf8prober.UTF8Prober.get_confidence(self)
requests.packages.chardet.utf8prober.UTF8Prober.reset(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/jisfreq.py----------------------------------------


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/latin1prober.py----------------------------------------
A:requests.packages.chardet.latin1prober.aBuf->self.filter_with_english_letters(aBuf)
A:requests.packages.chardet.latin1prober.total->sum(self._mFreqCounter)
requests.packages.chardet.latin1prober.Latin1Prober(self)
requests.packages.chardet.latin1prober.Latin1Prober.__init__(self)
requests.packages.chardet.latin1prober.Latin1Prober.feed(self,aBuf)
requests.packages.chardet.latin1prober.Latin1Prober.get_charset_name(self)
requests.packages.chardet.latin1prober.Latin1Prober.get_confidence(self)
requests.packages.chardet.latin1prober.Latin1Prober.reset(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/gb2312freq.py----------------------------------------


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/gb2312prober.py----------------------------------------
A:requests.packages.chardet.gb2312prober.self._mCodingSM->CodingStateMachine(GB2312SMModel)
A:requests.packages.chardet.gb2312prober.self._mDistributionAnalyzer->GB2312DistributionAnalysis()
requests.packages.chardet.gb2312prober.GB2312Prober(self)
requests.packages.chardet.gb2312prober.GB2312Prober.__init__(self)
requests.packages.chardet.gb2312prober.GB2312Prober.get_charset_name(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/chardistribution.py----------------------------------------
A:requests.packages.chardet.chardistribution.order->self.get_order(aBuf)
A:requests.packages.chardet.chardistribution.first_char->wrap_ord(aBuf[0])
A:requests.packages.chardet.chardistribution.char->wrap_ord(aBuf[0])
requests.packages.chardet.chardistribution.Big5DistributionAnalysis(self)
requests.packages.chardet.chardistribution.Big5DistributionAnalysis.__init__(self)
requests.packages.chardet.chardistribution.Big5DistributionAnalysis.get_order(self,aBuf)
requests.packages.chardet.chardistribution.CharDistributionAnalysis(self)
requests.packages.chardet.chardistribution.CharDistributionAnalysis.__init__(self)
requests.packages.chardet.chardistribution.CharDistributionAnalysis.feed(self,aBuf,aCharLen)
requests.packages.chardet.chardistribution.CharDistributionAnalysis.get_confidence(self)
requests.packages.chardet.chardistribution.CharDistributionAnalysis.get_order(self,aBuf)
requests.packages.chardet.chardistribution.CharDistributionAnalysis.got_enough_data(self)
requests.packages.chardet.chardistribution.CharDistributionAnalysis.reset(self)
requests.packages.chardet.chardistribution.EUCJPDistributionAnalysis(self)
requests.packages.chardet.chardistribution.EUCJPDistributionAnalysis.__init__(self)
requests.packages.chardet.chardistribution.EUCJPDistributionAnalysis.get_order(self,aBuf)
requests.packages.chardet.chardistribution.EUCKRDistributionAnalysis(self)
requests.packages.chardet.chardistribution.EUCKRDistributionAnalysis.__init__(self)
requests.packages.chardet.chardistribution.EUCKRDistributionAnalysis.get_order(self,aBuf)
requests.packages.chardet.chardistribution.EUCTWDistributionAnalysis(self)
requests.packages.chardet.chardistribution.EUCTWDistributionAnalysis.__init__(self)
requests.packages.chardet.chardistribution.EUCTWDistributionAnalysis.get_order(self,aBuf)
requests.packages.chardet.chardistribution.GB2312DistributionAnalysis(self)
requests.packages.chardet.chardistribution.GB2312DistributionAnalysis.__init__(self)
requests.packages.chardet.chardistribution.GB2312DistributionAnalysis.get_order(self,aBuf)
requests.packages.chardet.chardistribution.SJISDistributionAnalysis(self)
requests.packages.chardet.chardistribution.SJISDistributionAnalysis.__init__(self)
requests.packages.chardet.chardistribution.SJISDistributionAnalysis.get_order(self,aBuf)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/escsm.py----------------------------------------


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/langhungarianmodel.py----------------------------------------


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/sbcharsetprober.py----------------------------------------
A:requests.packages.chardet.sbcharsetprober.aBuf->self.filter_without_english_letters(aBuf)
A:requests.packages.chardet.sbcharsetprober.aLen->len(aBuf)
A:requests.packages.chardet.sbcharsetprober.cf->self.get_confidence()
requests.packages.chardet.sbcharsetprober.SingleByteCharSetProber(self,model,reversed=False,nameProber=None)
requests.packages.chardet.sbcharsetprober.SingleByteCharSetProber.__init__(self,model,reversed=False,nameProber=None)
requests.packages.chardet.sbcharsetprober.SingleByteCharSetProber.feed(self,aBuf)
requests.packages.chardet.sbcharsetprober.SingleByteCharSetProber.get_charset_name(self)
requests.packages.chardet.sbcharsetprober.SingleByteCharSetProber.get_confidence(self)
requests.packages.chardet.sbcharsetprober.SingleByteCharSetProber.reset(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/chardetect.py----------------------------------------
A:requests.packages.chardet.chardetect.u->UniversalDetector()
A:requests.packages.chardet.chardetect.parser->argparse.ArgumentParser(description='Takes one or more file paths and reports their detected                      encodings', formatter_class=argparse.ArgumentDefaultsHelpFormatter, conflict_handler='resolve')
A:requests.packages.chardet.chardetect.args->argparse.ArgumentParser(description='Takes one or more file paths and reports their detected                      encodings', formatter_class=argparse.ArgumentDefaultsHelpFormatter, conflict_handler='resolve').parse_args(argv)
requests.packages.chardet.chardetect.description_of(lines,name='stdin')
requests.packages.chardet.chardetect.main(argv=None)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/mbcharsetprober.py----------------------------------------
A:requests.packages.chardet.mbcharsetprober.aLen->len(aBuf)
A:requests.packages.chardet.mbcharsetprober.codingState->self._mCodingSM.next_state(aBuf[i])
A:requests.packages.chardet.mbcharsetprober.charLen->self._mCodingSM.get_current_charlen()
requests.packages.chardet.mbcharsetprober.MultiByteCharSetProber(self)
requests.packages.chardet.mbcharsetprober.MultiByteCharSetProber.__init__(self)
requests.packages.chardet.mbcharsetprober.MultiByteCharSetProber.feed(self,aBuf)
requests.packages.chardet.mbcharsetprober.MultiByteCharSetProber.get_charset_name(self)
requests.packages.chardet.mbcharsetprober.MultiByteCharSetProber.get_confidence(self)
requests.packages.chardet.mbcharsetprober.MultiByteCharSetProber.reset(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/charsetprober.py----------------------------------------
A:requests.packages.chardet.charsetprober.aBuf->re.sub(b'([A-Za-z])+', b' ', aBuf)
requests.packages.chardet.charsetprober.CharSetProber(self)
requests.packages.chardet.charsetprober.CharSetProber.__init__(self)
requests.packages.chardet.charsetprober.CharSetProber.feed(self,aBuf)
requests.packages.chardet.charsetprober.CharSetProber.filter_high_bit_only(self,aBuf)
requests.packages.chardet.charsetprober.CharSetProber.filter_with_english_letters(self,aBuf)
requests.packages.chardet.charsetprober.CharSetProber.filter_without_english_letters(self,aBuf)
requests.packages.chardet.charsetprober.CharSetProber.get_charset_name(self)
requests.packages.chardet.charsetprober.CharSetProber.get_confidence(self)
requests.packages.chardet.charsetprober.CharSetProber.get_state(self)
requests.packages.chardet.charsetprober.CharSetProber.reset(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/escprober.py----------------------------------------
A:requests.packages.chardet.escprober.self._mActiveSM->len(self._mCodingSM)
A:requests.packages.chardet.escprober.codingState->codingSM.next_state(wrap_ord(c))
A:requests.packages.chardet.escprober.self._mDetectedCharset->codingSM.get_coding_state_machine()
requests.packages.chardet.escprober.EscCharSetProber(self)
requests.packages.chardet.escprober.EscCharSetProber.__init__(self)
requests.packages.chardet.escprober.EscCharSetProber.feed(self,aBuf)
requests.packages.chardet.escprober.EscCharSetProber.get_charset_name(self)
requests.packages.chardet.escprober.EscCharSetProber.get_confidence(self)
requests.packages.chardet.escprober.EscCharSetProber.reset(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/mbcsgroupprober.py----------------------------------------
requests.packages.chardet.mbcsgroupprober.MBCSGroupProber(self)
requests.packages.chardet.mbcsgroupprober.MBCSGroupProber.__init__(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/langbulgarianmodel.py----------------------------------------


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/euckrfreq.py----------------------------------------


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/charsetgroupprober.py----------------------------------------
A:requests.packages.chardet.charsetgroupprober.st->self.get_state()
A:requests.packages.chardet.charsetgroupprober.cf->prober.get_confidence()
requests.packages.chardet.charsetgroupprober.CharSetGroupProber(self)
requests.packages.chardet.charsetgroupprober.CharSetGroupProber.__init__(self)
requests.packages.chardet.charsetgroupprober.CharSetGroupProber.feed(self,aBuf)
requests.packages.chardet.charsetgroupprober.CharSetGroupProber.get_charset_name(self)
requests.packages.chardet.charsetgroupprober.CharSetGroupProber.get_confidence(self)
requests.packages.chardet.charsetgroupprober.CharSetGroupProber.reset(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/sjisprober.py----------------------------------------
A:requests.packages.chardet.sjisprober.self._mCodingSM->CodingStateMachine(SJISSMModel)
A:requests.packages.chardet.sjisprober.self._mDistributionAnalyzer->SJISDistributionAnalysis()
A:requests.packages.chardet.sjisprober.self._mContextAnalyzer->SJISContextAnalysis()
A:requests.packages.chardet.sjisprober.aLen->len(aBuf)
A:requests.packages.chardet.sjisprober.codingState->self._mCodingSM.next_state(aBuf[i])
A:requests.packages.chardet.sjisprober.charLen->self._mCodingSM.get_current_charlen()
A:requests.packages.chardet.sjisprober.contxtCf->self._mContextAnalyzer.get_confidence()
A:requests.packages.chardet.sjisprober.distribCf->self._mDistributionAnalyzer.get_confidence()
requests.packages.chardet.sjisprober.SJISProber(self)
requests.packages.chardet.sjisprober.SJISProber.__init__(self)
requests.packages.chardet.sjisprober.SJISProber.feed(self,aBuf)
requests.packages.chardet.sjisprober.SJISProber.get_charset_name(self)
requests.packages.chardet.sjisprober.SJISProber.get_confidence(self)
requests.packages.chardet.sjisprober.SJISProber.reset(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/langcyrillicmodel.py----------------------------------------


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/euctwfreq.py----------------------------------------


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/big5freq.py----------------------------------------


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/mbcssm.py----------------------------------------


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/langhebrewmodel.py----------------------------------------


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/cp949prober.py----------------------------------------
A:requests.packages.chardet.cp949prober.self._mCodingSM->CodingStateMachine(CP949SMModel)
A:requests.packages.chardet.cp949prober.self._mDistributionAnalyzer->EUCKRDistributionAnalysis()
requests.packages.chardet.cp949prober.CP949Prober(self)
requests.packages.chardet.cp949prober.CP949Prober.__init__(self)
requests.packages.chardet.cp949prober.CP949Prober.get_charset_name(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/hebrewprober.py----------------------------------------
A:requests.packages.chardet.hebrewprober.aBuf->self.filter_high_bit_only(aBuf)
requests.packages.chardet.hebrewprober.HebrewProber(self)
requests.packages.chardet.hebrewprober.HebrewProber.__init__(self)
requests.packages.chardet.hebrewprober.HebrewProber.feed(self,aBuf)
requests.packages.chardet.hebrewprober.HebrewProber.get_charset_name(self)
requests.packages.chardet.hebrewprober.HebrewProber.get_state(self)
requests.packages.chardet.hebrewprober.HebrewProber.is_final(self,c)
requests.packages.chardet.hebrewprober.HebrewProber.is_non_final(self,c)
requests.packages.chardet.hebrewprober.HebrewProber.reset(self)
requests.packages.chardet.hebrewprober.HebrewProber.set_model_probers(self,logicalProber,visualProber)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/universaldetector.py----------------------------------------
A:requests.packages.chardet.universaldetector.self._highBitDetector->re.compile(b'[\x80-\xff]')
A:requests.packages.chardet.universaldetector.self._escDetector->re.compile(b'(\x1b|~{)')
A:requests.packages.chardet.universaldetector.aLen->len(aBuf)
A:requests.packages.chardet.universaldetector.self._mEscCharSetProber->EscCharSetProber()
A:requests.packages.chardet.universaldetector.proberConfidence->prober.get_confidence()
requests.packages.chardet.universaldetector.UniversalDetector(self)
requests.packages.chardet.universaldetector.UniversalDetector.__init__(self)
requests.packages.chardet.universaldetector.UniversalDetector.close(self)
requests.packages.chardet.universaldetector.UniversalDetector.feed(self,aBuf)
requests.packages.chardet.universaldetector.UniversalDetector.reset(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/eucjpprober.py----------------------------------------
A:requests.packages.chardet.eucjpprober.self._mCodingSM->CodingStateMachine(EUCJPSMModel)
A:requests.packages.chardet.eucjpprober.self._mDistributionAnalyzer->EUCJPDistributionAnalysis()
A:requests.packages.chardet.eucjpprober.self._mContextAnalyzer->EUCJPContextAnalysis()
A:requests.packages.chardet.eucjpprober.aLen->len(aBuf)
A:requests.packages.chardet.eucjpprober.codingState->self._mCodingSM.next_state(aBuf[i])
A:requests.packages.chardet.eucjpprober.charLen->self._mCodingSM.get_current_charlen()
A:requests.packages.chardet.eucjpprober.contxtCf->self._mContextAnalyzer.get_confidence()
A:requests.packages.chardet.eucjpprober.distribCf->self._mDistributionAnalyzer.get_confidence()
requests.packages.chardet.eucjpprober.EUCJPProber(self)
requests.packages.chardet.eucjpprober.EUCJPProber.__init__(self)
requests.packages.chardet.eucjpprober.EUCJPProber.feed(self,aBuf)
requests.packages.chardet.eucjpprober.EUCJPProber.get_charset_name(self)
requests.packages.chardet.eucjpprober.EUCJPProber.get_confidence(self)
requests.packages.chardet.eucjpprober.EUCJPProber.reset(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/compat.py----------------------------------------
requests.packages.chardet.compat.wrap_ord(a)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/langthaimodel.py----------------------------------------


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/__init__.py----------------------------------------
A:requests.packages.chardet.__init__.u->universaldetector.UniversalDetector()
requests.packages.chardet.__init__.detect(aBuf)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/codingstatemachine.py----------------------------------------
requests.packages.chardet.codingstatemachine.CodingStateMachine(self,sm)
requests.packages.chardet.codingstatemachine.CodingStateMachine.__init__(self,sm)
requests.packages.chardet.codingstatemachine.CodingStateMachine.get_coding_state_machine(self)
requests.packages.chardet.codingstatemachine.CodingStateMachine.get_current_charlen(self)
requests.packages.chardet.codingstatemachine.CodingStateMachine.next_state(self,c)
requests.packages.chardet.codingstatemachine.CodingStateMachine.reset(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/constants.py----------------------------------------


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/sbcsgroupprober.py----------------------------------------
A:requests.packages.chardet.sbcsgroupprober.hebrewProber->HebrewProber()
A:requests.packages.chardet.sbcsgroupprober.logicalHebrewProber->SingleByteCharSetProber(Win1255HebrewModel, False, hebrewProber)
A:requests.packages.chardet.sbcsgroupprober.visualHebrewProber->SingleByteCharSetProber(Win1255HebrewModel, True, hebrewProber)
requests.packages.chardet.sbcsgroupprober.SBCSGroupProber(self)
requests.packages.chardet.sbcsgroupprober.SBCSGroupProber.__init__(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/big5prober.py----------------------------------------
A:requests.packages.chardet.big5prober.self._mCodingSM->CodingStateMachine(Big5SMModel)
A:requests.packages.chardet.big5prober.self._mDistributionAnalyzer->Big5DistributionAnalysis()
requests.packages.chardet.big5prober.Big5Prober(self)
requests.packages.chardet.big5prober.Big5Prober.__init__(self)
requests.packages.chardet.big5prober.Big5Prober.get_charset_name(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/euctwprober.py----------------------------------------
A:requests.packages.chardet.euctwprober.self._mCodingSM->CodingStateMachine(EUCTWSMModel)
A:requests.packages.chardet.euctwprober.self._mDistributionAnalyzer->EUCTWDistributionAnalysis()
requests.packages.chardet.euctwprober.EUCTWProber(self)
requests.packages.chardet.euctwprober.EUCTWProber.__init__(self)
requests.packages.chardet.euctwprober.EUCTWProber.get_charset_name(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/euckrprober.py----------------------------------------
A:requests.packages.chardet.euckrprober.self._mCodingSM->CodingStateMachine(EUCKRSMModel)
A:requests.packages.chardet.euckrprober.self._mDistributionAnalyzer->EUCKRDistributionAnalysis()
requests.packages.chardet.euckrprober.EUCKRProber(self)
requests.packages.chardet.euckrprober.EUCKRProber.__init__(self)
requests.packages.chardet.euckrprober.EUCKRProber.get_charset_name(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/chardet/langgreekmodel.py----------------------------------------


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/connectionpool.py----------------------------------------
A:requests.packages.urllib3.connectionpool.log->logging.getLogger(__name__)
A:requests.packages.urllib3.connectionpool._Default->object()
A:requests.packages.urllib3.connectionpool.self.host->host.strip('[]')
A:requests.packages.urllib3.connectionpool._blocking_errnos->set([errno.EAGAIN, errno.EWOULDBLOCK])
A:requests.packages.urllib3.connectionpool.timeout->util.timeout.Timeout.from_float(timeout)
A:requests.packages.urllib3.connectionpool.self.pool->self.QueueCls(maxsize)
A:requests.packages.urllib3.connectionpool.conn->self.ConnectionCls(host=actual_host, port=actual_port, timeout=self.timeout.connect_timeout, strict=self.strict, **self.conn_kw)
A:requests.packages.urllib3.connectionpool.timeout_obj->self._get_timeout(timeout)
A:requests.packages.urllib3.connectionpool.httplib_response->self._make_request(conn, method, url, timeout=timeout_obj, body=body, headers=headers)
A:requests.packages.urllib3.connectionpool.http_version->getattr(conn, '_http_vsn_str', 'HTTP/?')
A:requests.packages.urllib3.connectionpool.(scheme, host, port)->get_host(url)
A:requests.packages.urllib3.connectionpool.port->connection.port_by_scheme.get(scheme)
A:requests.packages.urllib3.connectionpool.retries->retries.increment(method, url, response=response, _pool=self).increment(method, url, response=response, _pool=self)
A:requests.packages.urllib3.connectionpool.release_conn->response_kw.get('preload_content', True)
A:requests.packages.urllib3.connectionpool.headers->headers.copy().copy()
A:requests.packages.urllib3.connectionpool.response->response.HTTPResponse.from_httplib(httplib_response, pool=self, connection=response_conn, **response_kw)
A:requests.packages.urllib3.connectionpool.e->ProtocolError('Connection aborted.', e)
requests.packages.urllib3.HTTPConnectionPool(self,host,port=None,strict=False,timeout=Timeout.DEFAULT_TIMEOUT,maxsize=1,block=False,headers=None,retries=None,_proxy=None,_proxy_headers=None,**conn_kw)
requests.packages.urllib3.HTTPConnectionPool._absolute_url(self,path)
requests.packages.urllib3.HTTPConnectionPool._get_conn(self,timeout=None)
requests.packages.urllib3.HTTPConnectionPool._get_timeout(self,timeout)
requests.packages.urllib3.HTTPConnectionPool._make_request(self,conn,method,url,timeout=_Default,**httplib_request_kw)
requests.packages.urllib3.HTTPConnectionPool._new_conn(self)
requests.packages.urllib3.HTTPConnectionPool._prepare_proxy(self,conn)
requests.packages.urllib3.HTTPConnectionPool._put_conn(self,conn)
requests.packages.urllib3.HTTPConnectionPool._raise_timeout(self,err,url,timeout_value)
requests.packages.urllib3.HTTPConnectionPool._validate_conn(self,conn)
requests.packages.urllib3.HTTPConnectionPool.close(self)
requests.packages.urllib3.HTTPConnectionPool.is_same_host(self,url)
requests.packages.urllib3.HTTPConnectionPool.urlopen(self,method,url,body=None,headers=None,retries=None,redirect=True,assert_same_host=True,timeout=_Default,pool_timeout=None,release_conn=None,**response_kw)
requests.packages.urllib3.HTTPSConnectionPool(self,host,port=None,strict=False,timeout=Timeout.DEFAULT_TIMEOUT,maxsize=1,block=False,headers=None,retries=None,_proxy=None,_proxy_headers=None,key_file=None,cert_file=None,cert_reqs=None,ca_certs=None,ssl_version=None,assert_hostname=None,assert_fingerprint=None,ca_cert_dir=None,**conn_kw)
requests.packages.urllib3.HTTPSConnectionPool._new_conn(self)
requests.packages.urllib3.HTTPSConnectionPool._prepare_conn(self,conn)
requests.packages.urllib3.HTTPSConnectionPool._prepare_proxy(self,conn)
requests.packages.urllib3.HTTPSConnectionPool._validate_conn(self,conn)
requests.packages.urllib3.connection_from_url(url,**kw)
requests.packages.urllib3.connectionpool.ConnectionPool(self,host,port=None)
requests.packages.urllib3.connectionpool.ConnectionPool.__enter__(self)
requests.packages.urllib3.connectionpool.ConnectionPool.__exit__(self,exc_type,exc_val,exc_tb)
requests.packages.urllib3.connectionpool.ConnectionPool.__init__(self,host,port=None)
requests.packages.urllib3.connectionpool.ConnectionPool.__str__(self)
requests.packages.urllib3.connectionpool.ConnectionPool.close()
requests.packages.urllib3.connectionpool.HTTPConnectionPool(self,host,port=None,strict=False,timeout=Timeout.DEFAULT_TIMEOUT,maxsize=1,block=False,headers=None,retries=None,_proxy=None,_proxy_headers=None,**conn_kw)
requests.packages.urllib3.connectionpool.HTTPConnectionPool.__init__(self,host,port=None,strict=False,timeout=Timeout.DEFAULT_TIMEOUT,maxsize=1,block=False,headers=None,retries=None,_proxy=None,_proxy_headers=None,**conn_kw)
requests.packages.urllib3.connectionpool.HTTPConnectionPool._absolute_url(self,path)
requests.packages.urllib3.connectionpool.HTTPConnectionPool._get_conn(self,timeout=None)
requests.packages.urllib3.connectionpool.HTTPConnectionPool._get_timeout(self,timeout)
requests.packages.urllib3.connectionpool.HTTPConnectionPool._make_request(self,conn,method,url,timeout=_Default,**httplib_request_kw)
requests.packages.urllib3.connectionpool.HTTPConnectionPool._new_conn(self)
requests.packages.urllib3.connectionpool.HTTPConnectionPool._prepare_proxy(self,conn)
requests.packages.urllib3.connectionpool.HTTPConnectionPool._put_conn(self,conn)
requests.packages.urllib3.connectionpool.HTTPConnectionPool._raise_timeout(self,err,url,timeout_value)
requests.packages.urllib3.connectionpool.HTTPConnectionPool._validate_conn(self,conn)
requests.packages.urllib3.connectionpool.HTTPConnectionPool.close(self)
requests.packages.urllib3.connectionpool.HTTPConnectionPool.is_same_host(self,url)
requests.packages.urllib3.connectionpool.HTTPConnectionPool.urlopen(self,method,url,body=None,headers=None,retries=None,redirect=True,assert_same_host=True,timeout=_Default,pool_timeout=None,release_conn=None,**response_kw)
requests.packages.urllib3.connectionpool.HTTPSConnectionPool(self,host,port=None,strict=False,timeout=Timeout.DEFAULT_TIMEOUT,maxsize=1,block=False,headers=None,retries=None,_proxy=None,_proxy_headers=None,key_file=None,cert_file=None,cert_reqs=None,ca_certs=None,ssl_version=None,assert_hostname=None,assert_fingerprint=None,ca_cert_dir=None,**conn_kw)
requests.packages.urllib3.connectionpool.HTTPSConnectionPool.__init__(self,host,port=None,strict=False,timeout=Timeout.DEFAULT_TIMEOUT,maxsize=1,block=False,headers=None,retries=None,_proxy=None,_proxy_headers=None,key_file=None,cert_file=None,cert_reqs=None,ca_certs=None,ssl_version=None,assert_hostname=None,assert_fingerprint=None,ca_cert_dir=None,**conn_kw)
requests.packages.urllib3.connectionpool.HTTPSConnectionPool._new_conn(self)
requests.packages.urllib3.connectionpool.HTTPSConnectionPool._prepare_conn(self,conn)
requests.packages.urllib3.connectionpool.HTTPSConnectionPool._prepare_proxy(self,conn)
requests.packages.urllib3.connectionpool.HTTPSConnectionPool._validate_conn(self,conn)
requests.packages.urllib3.connectionpool.connection_from_url(url,**kw)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/poolmanager.py----------------------------------------
A:requests.packages.urllib3.poolmanager.log->logging.getLogger(__name__)
A:requests.packages.urllib3.poolmanager.self.pools->RecentlyUsedContainer(num_pools, dispose_func=lambda p: p.close())
A:requests.packages.urllib3.poolmanager.kwargs->self.connection_pool_kw.copy()
A:requests.packages.urllib3.poolmanager.pool->self._new_pool(scheme, host, port)
A:requests.packages.urllib3.poolmanager.u->parse_url(url)
A:requests.packages.urllib3.poolmanager.conn->self.connection_from_host(u.host, port=u.port, scheme=u.scheme)
A:requests.packages.urllib3.poolmanager.response->self.connection_from_host(u.host, port=u.port, scheme=u.scheme).urlopen(method, u.request_uri, **kw)
A:requests.packages.urllib3.poolmanager.redirect_location->urljoin(url, redirect_location)
A:requests.packages.urllib3.poolmanager.retries->retries.increment(method, url, response=response, _pool=conn).increment(method, url, response=response, _pool=conn)
A:requests.packages.urllib3.poolmanager.proxy->proxy._replace(port=port)._replace(port=port)
A:requests.packages.urllib3.poolmanager.port->connectionpool.port_by_scheme.get(proxy.scheme, 80)
A:requests.packages.urllib3.poolmanager.headers->kw.get('headers', self.headers)
A:requests.packages.urllib3.poolmanager.kw['headers']->self._set_proxy_headers(url, headers)
requests.packages.urllib3.PoolManager(self,num_pools=10,headers=None,**connection_pool_kw)
requests.packages.urllib3.PoolManager.__enter__(self)
requests.packages.urllib3.PoolManager.__exit__(self,exc_type,exc_val,exc_tb)
requests.packages.urllib3.PoolManager._new_pool(self,scheme,host,port)
requests.packages.urllib3.PoolManager.clear(self)
requests.packages.urllib3.PoolManager.connection_from_host(self,host,port=None,scheme='http')
requests.packages.urllib3.PoolManager.connection_from_url(self,url)
requests.packages.urllib3.PoolManager.urlopen(self,method,url,redirect=True,**kw)
requests.packages.urllib3.ProxyManager(self,proxy_url,num_pools=10,headers=None,proxy_headers=None,**connection_pool_kw)
requests.packages.urllib3.ProxyManager._set_proxy_headers(self,url,headers=None)
requests.packages.urllib3.ProxyManager.connection_from_host(self,host,port=None,scheme='http')
requests.packages.urllib3.ProxyManager.urlopen(self,method,url,redirect=True,**kw)
requests.packages.urllib3.poolmanager.PoolManager(self,num_pools=10,headers=None,**connection_pool_kw)
requests.packages.urllib3.poolmanager.PoolManager.__enter__(self)
requests.packages.urllib3.poolmanager.PoolManager.__exit__(self,exc_type,exc_val,exc_tb)
requests.packages.urllib3.poolmanager.PoolManager.__init__(self,num_pools=10,headers=None,**connection_pool_kw)
requests.packages.urllib3.poolmanager.PoolManager._new_pool(self,scheme,host,port)
requests.packages.urllib3.poolmanager.PoolManager.clear(self)
requests.packages.urllib3.poolmanager.PoolManager.connection_from_host(self,host,port=None,scheme='http')
requests.packages.urllib3.poolmanager.PoolManager.connection_from_url(self,url)
requests.packages.urllib3.poolmanager.PoolManager.urlopen(self,method,url,redirect=True,**kw)
requests.packages.urllib3.poolmanager.ProxyManager(self,proxy_url,num_pools=10,headers=None,proxy_headers=None,**connection_pool_kw)
requests.packages.urllib3.poolmanager.ProxyManager.__init__(self,proxy_url,num_pools=10,headers=None,proxy_headers=None,**connection_pool_kw)
requests.packages.urllib3.poolmanager.ProxyManager._set_proxy_headers(self,url,headers=None)
requests.packages.urllib3.poolmanager.ProxyManager.connection_from_host(self,host,port=None,scheme='http')
requests.packages.urllib3.poolmanager.ProxyManager.urlopen(self,method,url,redirect=True,**kw)
requests.packages.urllib3.poolmanager.proxy_from_url(url,**kw)
requests.packages.urllib3.proxy_from_url(url,**kw)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/filepost.py----------------------------------------
A:requests.packages.urllib3.filepost.i->iter(fields)
A:requests.packages.urllib3.filepost.body->BytesIO()
A:requests.packages.urllib3.filepost.boundary->choose_boundary()
A:requests.packages.urllib3.filepost.data->str(data)
A:requests.packages.urllib3.filepost.content_type->str('multipart/form-data; boundary=%s' % boundary)
requests.packages.urllib3.encode_multipart_formdata(fields,boundary=None)
requests.packages.urllib3.filepost.choose_boundary()
requests.packages.urllib3.filepost.encode_multipart_formdata(fields,boundary=None)
requests.packages.urllib3.filepost.iter_field_objects(fields)
requests.packages.urllib3.filepost.iter_fields(fields)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/_collections.py----------------------------------------
A:requests.packages.urllib3._collections._Null->object()
A:requests.packages.urllib3._collections.self._container->self.ContainerCls()
A:requests.packages.urllib3._collections.self.lock->RLock()
A:requests.packages.urllib3._collections.item->self._container.pop(key)
A:requests.packages.urllib3._collections.evicted_value->self._container.get(key, _Null)
A:requests.packages.urllib3._collections.(_key, evicted_value)->self._container.popitem(last=False)
A:requests.packages.urllib3._collections.value->self._container.pop(key)
A:requests.packages.urllib3._collections.values->list(itervalues(self._container))
A:requests.packages.urllib3._collections.other->type(self)(other)
A:requests.packages.urllib3._collections.__marker->object()
A:requests.packages.urllib3._collections.key_lower->key.lower()
A:requests.packages.urllib3._collections.vals->self._container.setdefault(key_lower, new_vals)
A:requests.packages.urllib3._collections.val->list(val)
A:requests.packages.urllib3._collections.clone->type(self)()
A:requests.packages.urllib3._collections.(key, value)->line.split(':', 1)
requests.packages.urllib3._collections.HTTPHeaderDict(self,headers=None,**kwargs)
requests.packages.urllib3._collections.HTTPHeaderDict.__contains__(self,key)
requests.packages.urllib3._collections.HTTPHeaderDict.__delitem__(self,key)
requests.packages.urllib3._collections.HTTPHeaderDict.__eq__(self,other)
requests.packages.urllib3._collections.HTTPHeaderDict.__getitem__(self,key)
requests.packages.urllib3._collections.HTTPHeaderDict.__init__(self,headers=None,**kwargs)
requests.packages.urllib3._collections.HTTPHeaderDict.__iter__(self)
requests.packages.urllib3._collections.HTTPHeaderDict.__len__(self)
requests.packages.urllib3._collections.HTTPHeaderDict.__ne__(self,other)
requests.packages.urllib3._collections.HTTPHeaderDict.__repr__(self)
requests.packages.urllib3._collections.HTTPHeaderDict.__setitem__(self,key,val)
requests.packages.urllib3._collections.HTTPHeaderDict._copy_from(self,other)
requests.packages.urllib3._collections.HTTPHeaderDict.add(self,key,val)
requests.packages.urllib3._collections.HTTPHeaderDict.copy(self)
requests.packages.urllib3._collections.HTTPHeaderDict.discard(self,key)
requests.packages.urllib3._collections.HTTPHeaderDict.extend(self,*args,**kwargs)
requests.packages.urllib3._collections.HTTPHeaderDict.from_httplib(cls,message)
requests.packages.urllib3._collections.HTTPHeaderDict.getlist(self,key)
requests.packages.urllib3._collections.HTTPHeaderDict.items(self)
requests.packages.urllib3._collections.HTTPHeaderDict.iteritems(self)
requests.packages.urllib3._collections.HTTPHeaderDict.itermerged(self)
requests.packages.urllib3._collections.HTTPHeaderDict.pop(self,key,default=__marker)
requests.packages.urllib3._collections.RecentlyUsedContainer(self,maxsize=10,dispose_func=None)
requests.packages.urllib3._collections.RecentlyUsedContainer.__delitem__(self,key)
requests.packages.urllib3._collections.RecentlyUsedContainer.__getitem__(self,key)
requests.packages.urllib3._collections.RecentlyUsedContainer.__init__(self,maxsize=10,dispose_func=None)
requests.packages.urllib3._collections.RecentlyUsedContainer.__iter__(self)
requests.packages.urllib3._collections.RecentlyUsedContainer.__len__(self)
requests.packages.urllib3._collections.RecentlyUsedContainer.__setitem__(self,key,value)
requests.packages.urllib3._collections.RecentlyUsedContainer.clear(self)
requests.packages.urllib3._collections.RecentlyUsedContainer.keys(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/request.py----------------------------------------
A:requests.packages.urllib3.request._encode_url_methods->set(['DELETE', 'GET', 'HEAD', 'OPTIONS'])
A:requests.packages.urllib3.request.method->method.upper().upper()
A:requests.packages.urllib3.request.(body, content_type)->encode_multipart_formdata(fields, boundary=multipart_boundary)
requests.packages.urllib3.request.RequestMethods(self,headers=None)
requests.packages.urllib3.request.RequestMethods.__init__(self,headers=None)
requests.packages.urllib3.request.RequestMethods.request(self,method,url,fields=None,headers=None,**urlopen_kw)
requests.packages.urllib3.request.RequestMethods.request_encode_body(self,method,url,fields=None,headers=None,encode_multipart=True,multipart_boundary=None,**urlopen_kw)
requests.packages.urllib3.request.RequestMethods.request_encode_url(self,method,url,fields=None,headers=None,**urlopen_kw)
requests.packages.urllib3.request.RequestMethods.urlopen(self,method,url,body=None,headers=None,encode_multipart=True,multipart_boundary=None,**kw)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/exceptions.py----------------------------------------
requests.packages.urllib3.HTTPError(Exception)
requests.packages.urllib3.TimeoutError(HTTPError)
requests.packages.urllib3.TimeoutStateError(HTTPError)
requests.packages.urllib3.exceptions.ClosedPoolError(PoolError)
requests.packages.urllib3.exceptions.ConnectTimeoutError(TimeoutError)
requests.packages.urllib3.exceptions.DecodeError(HTTPError)
requests.packages.urllib3.exceptions.EmptyPoolError(PoolError)
requests.packages.urllib3.exceptions.HTTPError(Exception)
requests.packages.urllib3.exceptions.HTTPWarning(Warning)
requests.packages.urllib3.exceptions.HeaderParsingError(self,defects,unparsed_data)
requests.packages.urllib3.exceptions.HeaderParsingError.__init__(self,defects,unparsed_data)
requests.packages.urllib3.exceptions.HostChangedError(self,pool,url,retries=3)
requests.packages.urllib3.exceptions.HostChangedError.__init__(self,pool,url,retries=3)
requests.packages.urllib3.exceptions.InsecurePlatformWarning(SecurityWarning)
requests.packages.urllib3.exceptions.InsecureRequestWarning(SecurityWarning)
requests.packages.urllib3.exceptions.LocationParseError(self,location)
requests.packages.urllib3.exceptions.LocationParseError.__init__(self,location)
requests.packages.urllib3.exceptions.LocationValueError(ValueError,HTTPError)
requests.packages.urllib3.exceptions.MaxRetryError(self,pool,url,reason=None)
requests.packages.urllib3.exceptions.MaxRetryError.__init__(self,pool,url,reason=None)
requests.packages.urllib3.exceptions.NewConnectionError(ConnectTimeoutError,PoolError)
requests.packages.urllib3.exceptions.PoolError(self,pool,message)
requests.packages.urllib3.exceptions.PoolError.__init__(self,pool,message)
requests.packages.urllib3.exceptions.PoolError.__reduce__(self)
requests.packages.urllib3.exceptions.ProtocolError(HTTPError)
requests.packages.urllib3.exceptions.ProxyError(HTTPError)
requests.packages.urllib3.exceptions.ProxySchemeUnknown(self,scheme)
requests.packages.urllib3.exceptions.ProxySchemeUnknown.__init__(self,scheme)
requests.packages.urllib3.exceptions.ReadTimeoutError(TimeoutError,RequestError)
requests.packages.urllib3.exceptions.RequestError(self,pool,url,message)
requests.packages.urllib3.exceptions.RequestError.__init__(self,pool,url,message)
requests.packages.urllib3.exceptions.RequestError.__reduce__(self)
requests.packages.urllib3.exceptions.ResponseError(HTTPError)
requests.packages.urllib3.exceptions.ResponseNotChunked(ProtocolError,ValueError)
requests.packages.urllib3.exceptions.SSLError(HTTPError)
requests.packages.urllib3.exceptions.SecurityWarning(HTTPWarning)
requests.packages.urllib3.exceptions.SubjectAltNameWarning(SecurityWarning)
requests.packages.urllib3.exceptions.SystemTimeWarning(SecurityWarning)
requests.packages.urllib3.exceptions.TimeoutError(HTTPError)
requests.packages.urllib3.exceptions.TimeoutStateError(HTTPError)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/__init__.py----------------------------------------
A:requests.packages.urllib3.__init__.logger->logging.getLogger(__name__)
A:requests.packages.urllib3.__init__.handler->logging.StreamHandler()
requests.packages.urllib3.__init__.add_stderr_logger(level=logging.DEBUG)
requests.packages.urllib3.__init__.disable_warnings(category=exceptions.HTTPWarning)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/fields.py----------------------------------------
A:requests.packages.urllib3.fields.value->email.utils.encode_rfc2231(value, 'utf-8')
A:requests.packages.urllib3.fields.self.headers->dict(headers)
A:requests.packages.urllib3.fields.content_type->guess_content_type(filename)
A:requests.packages.urllib3.fields.request_param->cls(fieldname, data, filename=filename)
A:requests.packages.urllib3.fields.iterable->header_parts.items()
requests.packages.urllib3.fields.RequestField(self,name,data,filename=None,headers=None)
requests.packages.urllib3.fields.RequestField.__init__(self,name,data,filename=None,headers=None)
requests.packages.urllib3.fields.RequestField._render_part(self,name,value)
requests.packages.urllib3.fields.RequestField._render_parts(self,header_parts)
requests.packages.urllib3.fields.RequestField.from_tuples(cls,fieldname,value)
requests.packages.urllib3.fields.RequestField.make_multipart(self,content_disposition=None,content_type=None,content_location=None)
requests.packages.urllib3.fields.RequestField.render_headers(self)
requests.packages.urllib3.fields.format_header_param(name,value)
requests.packages.urllib3.fields.guess_content_type(filename,default='application/octet-stream')


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/connection.py----------------------------------------
A:requests.packages.urllib3.connection.RECENT_DATE->datetime.date(2014, 1, 1)
A:requests.packages.urllib3.connection.self.source_address->kw.get('source_address')
A:requests.packages.urllib3.connection.self.socket_options->kw.pop('socket_options', self.default_socket_options)
A:requests.packages.urllib3.connection.conn->self._new_conn()
A:requests.packages.urllib3.connection.self.sock->ssl_wrap_socket(conn, self.key_file, self.cert_file, cert_reqs=resolved_cert_reqs, ca_certs=self.ca_certs, ca_cert_dir=self.ca_cert_dir, server_hostname=hostname, ssl_version=resolved_ssl_version)
A:requests.packages.urllib3.connection.resolved_cert_reqs->resolve_cert_reqs(self.cert_reqs)
A:requests.packages.urllib3.connection.resolved_ssl_version->resolve_ssl_version(self.ssl_version)
A:requests.packages.urllib3.connection.cert->self.sock.getpeercert()
requests.packages.urllib3.connection.DummyConnection(object)
requests.packages.urllib3.connection.HTTPConnection(self,*args,**kw)
requests.packages.urllib3.connection.HTTPConnection.__init__(self,*args,**kw)
requests.packages.urllib3.connection.HTTPConnection._new_conn(self)
requests.packages.urllib3.connection.HTTPConnection._prepare_conn(self,conn)
requests.packages.urllib3.connection.HTTPConnection.connect(self)
requests.packages.urllib3.connection.HTTPSConnection(self,host,port=None,key_file=None,cert_file=None,strict=None,timeout=socket._GLOBAL_DEFAULT_TIMEOUT,**kw)
requests.packages.urllib3.connection.HTTPSConnection.__init__(self,host,port=None,key_file=None,cert_file=None,strict=None,timeout=socket._GLOBAL_DEFAULT_TIMEOUT,**kw)
requests.packages.urllib3.connection.HTTPSConnection.connect(self)
requests.packages.urllib3.connection.VerifiedHTTPSConnection(HTTPSConnection)
requests.packages.urllib3.connection.VerifiedHTTPSConnection.connect(self)
requests.packages.urllib3.connection.VerifiedHTTPSConnection.set_cert(self,key_file=None,cert_file=None,cert_reqs=None,ca_certs=None,assert_hostname=None,assert_fingerprint=None,ca_cert_dir=None)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/response.py----------------------------------------
A:requests.packages.urllib3.response.self._data->binary_type()
A:requests.packages.urllib3.response.self._obj->zlib.decompressobj(16 + zlib.MAX_WBITS)
A:requests.packages.urllib3.response.self.headers->HTTPHeaderDict(headers)
A:requests.packages.urllib3.response.tr_enc->self.headers.get('transfer-encoding', '').lower()
A:requests.packages.urllib3.response.self._body->self.read(decode_content=decode_content)
A:requests.packages.urllib3.response.content_encoding->self.headers.get('content-encoding', '').lower()
A:requests.packages.urllib3.response.self._decoder->_get_decoder(content_encoding)
A:requests.packages.urllib3.response.data->self.read(amt=amt, decode_content=decode_content)
A:requests.packages.urllib3.response.buf->self._decoder.decompress(binary_type())
A:requests.packages.urllib3.response.headers->_collections.HTTPHeaderDict.from_httplib(headers)
A:requests.packages.urllib3.response.strict->getattr(r, 'strict', 0)
A:requests.packages.urllib3.response.resp->ResponseCls(body=r, headers=headers, status=r.status, version=r.version, reason=r.reason, strict=strict, original_response=r, **response_kw)
A:requests.packages.urllib3.response.temp->self.read(len(b))
A:requests.packages.urllib3.response.line->self._fp.fp.readline()
A:requests.packages.urllib3.response.self.chunk_left->int(line, 16)
A:requests.packages.urllib3.response.chunk->self._handle_chunk(amt)
A:requests.packages.urllib3.response.value->self._fp._safe_read(amt)
A:requests.packages.urllib3.response.returned_chunk->self._fp._safe_read(self.chunk_left)
requests.packages.urllib3.HTTPResponse(self,body='',headers=None,status=0,version=0,reason=None,strict=0,preload_content=True,decode_content=True,original_response=None,pool=None,connection=None)
requests.packages.urllib3.HTTPResponse._decode(self,data,decode_content,flush_decoder)
requests.packages.urllib3.HTTPResponse._error_catcher(self)
requests.packages.urllib3.HTTPResponse._handle_chunk(self,amt)
requests.packages.urllib3.HTTPResponse._init_decoder(self)
requests.packages.urllib3.HTTPResponse._update_chunk_length(self)
requests.packages.urllib3.HTTPResponse.close(self)
requests.packages.urllib3.HTTPResponse.closed(self)
requests.packages.urllib3.HTTPResponse.data(self)
requests.packages.urllib3.HTTPResponse.fileno(self)
requests.packages.urllib3.HTTPResponse.flush(self)
requests.packages.urllib3.HTTPResponse.from_httplib(ResponseCls,r,**response_kw)
requests.packages.urllib3.HTTPResponse.get_redirect_location(self)
requests.packages.urllib3.HTTPResponse.getheader(self,name,default=None)
requests.packages.urllib3.HTTPResponse.getheaders(self)
requests.packages.urllib3.HTTPResponse.read(self,amt=None,decode_content=None,cache_content=False)
requests.packages.urllib3.HTTPResponse.read_chunked(self,amt=None,decode_content=None)
requests.packages.urllib3.HTTPResponse.readable(self)
requests.packages.urllib3.HTTPResponse.readinto(self,b)
requests.packages.urllib3.HTTPResponse.release_conn(self)
requests.packages.urllib3.HTTPResponse.stream(self,amt=2**16,decode_content=None)
requests.packages.urllib3.HTTPResponse.tell(self)
requests.packages.urllib3.response.DeflateDecoder(self)
requests.packages.urllib3.response.DeflateDecoder.__getattr__(self,name)
requests.packages.urllib3.response.DeflateDecoder.__init__(self)
requests.packages.urllib3.response.DeflateDecoder.decompress(self,data)
requests.packages.urllib3.response.GzipDecoder(self)
requests.packages.urllib3.response.GzipDecoder.__getattr__(self,name)
requests.packages.urllib3.response.GzipDecoder.__init__(self)
requests.packages.urllib3.response.GzipDecoder.decompress(self,data)
requests.packages.urllib3.response.HTTPResponse(self,body='',headers=None,status=0,version=0,reason=None,strict=0,preload_content=True,decode_content=True,original_response=None,pool=None,connection=None)
requests.packages.urllib3.response.HTTPResponse.__init__(self,body='',headers=None,status=0,version=0,reason=None,strict=0,preload_content=True,decode_content=True,original_response=None,pool=None,connection=None)
requests.packages.urllib3.response.HTTPResponse._decode(self,data,decode_content,flush_decoder)
requests.packages.urllib3.response.HTTPResponse._error_catcher(self)
requests.packages.urllib3.response.HTTPResponse._handle_chunk(self,amt)
requests.packages.urllib3.response.HTTPResponse._init_decoder(self)
requests.packages.urllib3.response.HTTPResponse._update_chunk_length(self)
requests.packages.urllib3.response.HTTPResponse.close(self)
requests.packages.urllib3.response.HTTPResponse.closed(self)
requests.packages.urllib3.response.HTTPResponse.data(self)
requests.packages.urllib3.response.HTTPResponse.fileno(self)
requests.packages.urllib3.response.HTTPResponse.flush(self)
requests.packages.urllib3.response.HTTPResponse.from_httplib(ResponseCls,r,**response_kw)
requests.packages.urllib3.response.HTTPResponse.get_redirect_location(self)
requests.packages.urllib3.response.HTTPResponse.getheader(self,name,default=None)
requests.packages.urllib3.response.HTTPResponse.getheaders(self)
requests.packages.urllib3.response.HTTPResponse.read(self,amt=None,decode_content=None,cache_content=False)
requests.packages.urllib3.response.HTTPResponse.read_chunked(self,amt=None,decode_content=None)
requests.packages.urllib3.response.HTTPResponse.readable(self)
requests.packages.urllib3.response.HTTPResponse.readinto(self,b)
requests.packages.urllib3.response.HTTPResponse.release_conn(self)
requests.packages.urllib3.response.HTTPResponse.stream(self,amt=2**16,decode_content=None)
requests.packages.urllib3.response.HTTPResponse.tell(self)
requests.packages.urllib3.response._get_decoder(mode)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/util/retry.py----------------------------------------
A:requests.packages.urllib3.util.retry.log->logging.getLogger(__name__)
A:requests.packages.urllib3.util.retry.DEFAULT_METHOD_WHITELIST->frozenset(['HEAD', 'GET', 'PUT', 'DELETE', 'OPTIONS', 'TRACE'])
A:requests.packages.urllib3.util.retry.params->dict(total=self.total, connect=self.connect, read=self.read, redirect=self.redirect, method_whitelist=self.method_whitelist, status_forcelist=self.status_forcelist, backoff_factor=self.backoff_factor, raise_on_redirect=self.raise_on_redirect, _observed_errors=self._observed_errors)
A:requests.packages.urllib3.util.retry.new_retries->cls(retries, redirect=redirect)
A:requests.packages.urllib3.util.retry.backoff->self.get_backoff_time()
A:requests.packages.urllib3.util.retry.retry_counts->list(filter(None, retry_counts))
A:requests.packages.urllib3.util.retry.cause->exceptions.ResponseError.SPECIFIC_ERROR.format(status_code=response.status)
A:requests.packages.urllib3.util.retry.new_retry->self.new(total=total, connect=connect, read=read, redirect=redirect, _observed_errors=_observed_errors)
A:requests.packages.urllib3.util.retry.Retry.DEFAULT->Retry(3)
requests.packages.urllib3.util.Retry(self,total=10,connect=None,read=None,redirect=None,method_whitelist=DEFAULT_METHOD_WHITELIST,status_forcelist=None,backoff_factor=0,raise_on_redirect=True,_observed_errors=0)
requests.packages.urllib3.util.Retry.__repr__(self)
requests.packages.urllib3.util.Retry._is_connection_error(self,err)
requests.packages.urllib3.util.Retry._is_read_error(self,err)
requests.packages.urllib3.util.Retry.from_int(cls,retries,redirect=True,default=None)
requests.packages.urllib3.util.Retry.get_backoff_time(self)
requests.packages.urllib3.util.Retry.increment(self,method=None,url=None,response=None,error=None,_pool=None,_stacktrace=None)
requests.packages.urllib3.util.Retry.is_exhausted(self)
requests.packages.urllib3.util.Retry.is_forced_retry(self,method,status_code)
requests.packages.urllib3.util.Retry.new(self,**kw)
requests.packages.urllib3.util.Retry.sleep(self)
requests.packages.urllib3.util.retry.Retry(self,total=10,connect=None,read=None,redirect=None,method_whitelist=DEFAULT_METHOD_WHITELIST,status_forcelist=None,backoff_factor=0,raise_on_redirect=True,_observed_errors=0)
requests.packages.urllib3.util.retry.Retry.__init__(self,total=10,connect=None,read=None,redirect=None,method_whitelist=DEFAULT_METHOD_WHITELIST,status_forcelist=None,backoff_factor=0,raise_on_redirect=True,_observed_errors=0)
requests.packages.urllib3.util.retry.Retry.__repr__(self)
requests.packages.urllib3.util.retry.Retry._is_connection_error(self,err)
requests.packages.urllib3.util.retry.Retry._is_read_error(self,err)
requests.packages.urllib3.util.retry.Retry.from_int(cls,retries,redirect=True,default=None)
requests.packages.urllib3.util.retry.Retry.get_backoff_time(self)
requests.packages.urllib3.util.retry.Retry.increment(self,method=None,url=None,response=None,error=None,_pool=None,_stacktrace=None)
requests.packages.urllib3.util.retry.Retry.is_exhausted(self)
requests.packages.urllib3.util.retry.Retry.is_forced_retry(self,method,status_code)
requests.packages.urllib3.util.retry.Retry.new(self,**kw)
requests.packages.urllib3.util.retry.Retry.sleep(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/util/request.py----------------------------------------
A:requests.packages.urllib3.util.request.accept_encoding->','.join(accept_encoding)
requests.packages.urllib3.util.make_headers(keep_alive=None,accept_encoding=None,user_agent=None,basic_auth=None,proxy_basic_auth=None,disable_cache=None)
requests.packages.urllib3.util.request.make_headers(keep_alive=None,accept_encoding=None,user_agent=None,basic_auth=None,proxy_basic_auth=None,disable_cache=None)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/util/timeout.py----------------------------------------
A:requests.packages.urllib3.util.timeout._Default->object()
A:requests.packages.urllib3.util.timeout.self._connect->self._validate_timeout(connect, 'connect')
A:requests.packages.urllib3.util.timeout.self._read->self._validate_timeout(read, 'read')
A:requests.packages.urllib3.util.timeout.self.total->self._validate_timeout(total, 'total')
A:requests.packages.urllib3.util.timeout.self._start_connect->current_time()
requests.packages.urllib3.util.Timeout(self,total=None,connect=_Default,read=_Default)
requests.packages.urllib3.util.Timeout.__str__(self)
requests.packages.urllib3.util.Timeout._validate_timeout(cls,value,name)
requests.packages.urllib3.util.Timeout.clone(self)
requests.packages.urllib3.util.Timeout.connect_timeout(self)
requests.packages.urllib3.util.Timeout.from_float(cls,timeout)
requests.packages.urllib3.util.Timeout.get_connect_duration(self)
requests.packages.urllib3.util.Timeout.read_timeout(self)
requests.packages.urllib3.util.Timeout.start_connect(self)
requests.packages.urllib3.util.current_time()
requests.packages.urllib3.util.timeout.Timeout(self,total=None,connect=_Default,read=_Default)
requests.packages.urllib3.util.timeout.Timeout.__init__(self,total=None,connect=_Default,read=_Default)
requests.packages.urllib3.util.timeout.Timeout.__str__(self)
requests.packages.urllib3.util.timeout.Timeout._validate_timeout(cls,value,name)
requests.packages.urllib3.util.timeout.Timeout.clone(self)
requests.packages.urllib3.util.timeout.Timeout.connect_timeout(self)
requests.packages.urllib3.util.timeout.Timeout.from_float(cls,timeout)
requests.packages.urllib3.util.timeout.Timeout.get_connect_duration(self)
requests.packages.urllib3.util.timeout.Timeout.read_timeout(self)
requests.packages.urllib3.util.timeout.Timeout.start_connect(self)
requests.packages.urllib3.util.timeout.current_time()


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/util/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/util/connection.py----------------------------------------
A:requests.packages.urllib3.util.connection.sock->socket.socket(af, socktype, proto)
A:requests.packages.urllib3.util.connection.p->poll()
A:requests.packages.urllib3.util.connection.host->host.strip('[]').strip('[]')
requests.packages.urllib3.util.connection._set_socket_options(sock,options)
requests.packages.urllib3.util.connection.create_connection(address,timeout=socket._GLOBAL_DEFAULT_TIMEOUT,source_address=None,socket_options=None)
requests.packages.urllib3.util.connection.is_connection_dropped(conn)
requests.packages.urllib3.util.is_connection_dropped(conn)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/util/ssl_.py----------------------------------------
A:requests.packages.urllib3.util.ssl_.fingerprint->fingerprint.replace(':', '').lower().replace(':', '').lower()
A:requests.packages.urllib3.util.ssl_.digest_length->len(fingerprint)
A:requests.packages.urllib3.util.ssl_.hashfunc->HASHFUNC_MAP.get(digest_length)
A:requests.packages.urllib3.util.ssl_.fingerprint_bytes->unhexlify(fingerprint.encode())
A:requests.packages.urllib3.util.ssl_.cert_digest->hashfunc(cert).digest()
A:requests.packages.urllib3.util.ssl_.res->getattr(ssl, 'PROTOCOL_' + candidate)
A:requests.packages.urllib3.util.ssl_.context->create_urllib3_context(ssl_version, cert_reqs, ciphers=ciphers)
requests.packages.urllib3.util.assert_fingerprint(cert,fingerprint)
requests.packages.urllib3.util.resolve_cert_reqs(candidate)
requests.packages.urllib3.util.resolve_ssl_version(candidate)
requests.packages.urllib3.util.ssl_.assert_fingerprint(cert,fingerprint)
requests.packages.urllib3.util.ssl_.create_urllib3_context(ssl_version=None,cert_reqs=None,options=None,ciphers=None)
requests.packages.urllib3.util.ssl_.resolve_cert_reqs(candidate)
requests.packages.urllib3.util.ssl_.resolve_ssl_version(candidate)
requests.packages.urllib3.util.ssl_.ssl_wrap_socket(sock,keyfile=None,certfile=None,cert_reqs=None,ca_certs=None,server_hostname=None,ssl_version=None,ciphers=None,ssl_context=None,ca_cert_dir=None)
requests.packages.urllib3.util.ssl_wrap_socket(sock,keyfile=None,certfile=None,cert_reqs=None,ca_certs=None,server_hostname=None,ssl_version=None,ciphers=None,ssl_context=None,ca_cert_dir=None)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/util/url.py----------------------------------------
A:requests.packages.urllib3.util.url.idx->s.find(d)
A:requests.packages.urllib3.util.url.(scheme, url)->url.split('://', 1)
A:requests.packages.urllib3.util.url.(url, path_, delim)->split_first(url, ['/', '?', '#'])
A:requests.packages.urllib3.util.url.(auth, url)->url.rsplit('@', 1)
A:requests.packages.urllib3.util.url.(host, url)->url.split(']', 1)
A:requests.packages.urllib3.util.url.(_host, port)->url.split(':', 1)
A:requests.packages.urllib3.util.url.port->int(port)
A:requests.packages.urllib3.util.url.(path, fragment)->path.split('#', 1)
A:requests.packages.urllib3.util.url.(path, query)->path.split('?', 1)
A:requests.packages.urllib3.util.url.p->parse_url(url)
requests.packages.urllib3.util.Url(cls,scheme=None,auth=None,host=None,port=None,path=None,query=None,fragment=None)
requests.packages.urllib3.util.Url.__str__(self)
requests.packages.urllib3.util.Url.hostname(self)
requests.packages.urllib3.util.Url.netloc(self)
requests.packages.urllib3.util.Url.request_uri(self)
requests.packages.urllib3.util.Url.url(self)
requests.packages.urllib3.util.get_host(url)
requests.packages.urllib3.util.parse_url(url)
requests.packages.urllib3.util.split_first(s,delims)
requests.packages.urllib3.util.url.Url(cls,scheme=None,auth=None,host=None,port=None,path=None,query=None,fragment=None)
requests.packages.urllib3.util.url.Url.__new__(cls,scheme=None,auth=None,host=None,port=None,path=None,query=None,fragment=None)
requests.packages.urllib3.util.url.Url.__str__(self)
requests.packages.urllib3.util.url.Url.hostname(self)
requests.packages.urllib3.util.url.Url.netloc(self)
requests.packages.urllib3.util.url.Url.request_uri(self)
requests.packages.urllib3.util.url.Url.url(self)
requests.packages.urllib3.util.url.get_host(url)
requests.packages.urllib3.util.url.parse_url(url)
requests.packages.urllib3.util.url.split_first(s,delims)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/util/response.py----------------------------------------
A:requests.packages.urllib3.util.response.defects->getattr(headers, 'defects', None)
A:requests.packages.urllib3.util.response.get_payload->getattr(headers, 'get_payload', None)
A:requests.packages.urllib3.util.response.unparsed_data->get_payload()
requests.packages.urllib3.util.is_fp_closed(obj)
requests.packages.urllib3.util.response.assert_header_parsing(headers)
requests.packages.urllib3.util.response.is_fp_closed(obj)
requests.packages.urllib3.util.response.is_response_to_head(response)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/contrib/pyopenssl.py----------------------------------------
A:requests.packages.urllib3.contrib.pyopenssl.general_names->SubjectAltName()
A:requests.packages.urllib3.contrib.pyopenssl.ext->peer_cert.get_extension(i)
A:requests.packages.urllib3.contrib.pyopenssl.ext_name->peer_cert.get_extension(i).get_short_name()
A:requests.packages.urllib3.contrib.pyopenssl.ext_dat->peer_cert.get_extension(i).get_data()
A:requests.packages.urllib3.contrib.pyopenssl.decoded_dat->pyasn1.codec.der.decoder.decode(ext_dat, asn1Spec=general_names)
A:requests.packages.urllib3.contrib.pyopenssl.component->name.getComponentByPosition(entry)
A:requests.packages.urllib3.contrib.pyopenssl.data->memoryview(data)
A:requests.packages.urllib3.contrib.pyopenssl.(rd, wd, ed)->select.select([self.socket], [], [], self.socket.gettimeout())
A:requests.packages.urllib3.contrib.pyopenssl.(_, wlist, _)->select.select([], [self.socket], [], self.socket.gettimeout())
A:requests.packages.urllib3.contrib.pyopenssl.sent->self._send_until_done(data[total_sent:total_sent + SSL_WRITE_BLOCKSIZE])
A:requests.packages.urllib3.contrib.pyopenssl.x509->self.connection.get_peer_certificate()
A:requests.packages.urllib3.contrib.pyopenssl.ctx->OpenSSL.SSL.Context(_openssl_versions[ssl_version])
A:requests.packages.urllib3.contrib.pyopenssl.cnx->OpenSSL.SSL.Connection(ctx, sock)
A:requests.packages.urllib3.contrib.pyopenssl.(rd, _, _)->select.select([sock], [], [], sock.gettimeout())
requests.packages.urllib3.contrib.pyopenssl.SubjectAltName(BaseSubjectAltName)
requests.packages.urllib3.contrib.pyopenssl.WrappedSocket(self,connection,socket,suppress_ragged_eofs=True)
requests.packages.urllib3.contrib.pyopenssl.WrappedSocket.__init__(self,connection,socket,suppress_ragged_eofs=True)
requests.packages.urllib3.contrib.pyopenssl.WrappedSocket._drop(self)
requests.packages.urllib3.contrib.pyopenssl.WrappedSocket._reuse(self)
requests.packages.urllib3.contrib.pyopenssl.WrappedSocket._send_until_done(self,data)
requests.packages.urllib3.contrib.pyopenssl.WrappedSocket.close(self)
requests.packages.urllib3.contrib.pyopenssl.WrappedSocket.fileno(self)
requests.packages.urllib3.contrib.pyopenssl.WrappedSocket.getpeercert(self,binary_form=False)
requests.packages.urllib3.contrib.pyopenssl.WrappedSocket.makefile(self,mode,bufsize=-1)
requests.packages.urllib3.contrib.pyopenssl.WrappedSocket.recv(self,*args,**kwargs)
requests.packages.urllib3.contrib.pyopenssl.WrappedSocket.sendall(self,data)
requests.packages.urllib3.contrib.pyopenssl.WrappedSocket.settimeout(self,timeout)
requests.packages.urllib3.contrib.pyopenssl.WrappedSocket.shutdown(self)
requests.packages.urllib3.contrib.pyopenssl._verify_callback(cnx,x509,err_no,err_depth,return_code)
requests.packages.urllib3.contrib.pyopenssl.extract_from_urllib3()
requests.packages.urllib3.contrib.pyopenssl.get_subj_alt_name(peer_cert)
requests.packages.urllib3.contrib.pyopenssl.inject_into_urllib3()
requests.packages.urllib3.contrib.pyopenssl.ssl_wrap_socket(sock,keyfile=None,certfile=None,cert_reqs=None,ca_certs=None,server_hostname=None,ssl_version=None,ca_cert_dir=None)
requests.pyopenssl.SubjectAltName(BaseSubjectAltName)
requests.pyopenssl.WrappedSocket(self,connection,socket,suppress_ragged_eofs=True)
requests.pyopenssl.WrappedSocket._drop(self)
requests.pyopenssl.WrappedSocket._reuse(self)
requests.pyopenssl.WrappedSocket._send_until_done(self,data)
requests.pyopenssl.WrappedSocket.close(self)
requests.pyopenssl.WrappedSocket.fileno(self)
requests.pyopenssl.WrappedSocket.getpeercert(self,binary_form=False)
requests.pyopenssl.WrappedSocket.makefile(self,mode,bufsize=-1)
requests.pyopenssl.WrappedSocket.recv(self,*args,**kwargs)
requests.pyopenssl.WrappedSocket.sendall(self,data)
requests.pyopenssl.WrappedSocket.settimeout(self,timeout)
requests.pyopenssl.WrappedSocket.shutdown(self)
requests.pyopenssl._verify_callback(cnx,x509,err_no,err_depth,return_code)
requests.pyopenssl.extract_from_urllib3()
requests.pyopenssl.get_subj_alt_name(peer_cert)
requests.pyopenssl.inject_into_urllib3()
requests.pyopenssl.ssl_wrap_socket(sock,keyfile=None,certfile=None,cert_reqs=None,ca_certs=None,server_hostname=None,ssl_version=None,ca_cert_dir=None)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/contrib/ntlmpool.py----------------------------------------
A:requests.packages.urllib3.contrib.ntlmpool.log->getLogger(__name__)
A:requests.packages.urllib3.contrib.ntlmpool.user_parts->user.split('\\', 1)
A:requests.packages.urllib3.contrib.ntlmpool.self.domain->user_parts[0].upper()
A:requests.packages.urllib3.contrib.ntlmpool.conn->HTTPSConnection(host=self.host, port=self.port)
A:requests.packages.urllib3.contrib.ntlmpool.res->HTTPSConnection(host=self.host, port=self.port).getresponse()
A:requests.packages.urllib3.contrib.ntlmpool.reshdr->dict(res.getheaders())
A:requests.packages.urllib3.contrib.ntlmpool.auth_header_values->reshdr[resp_header].split(', ')
A:requests.packages.urllib3.contrib.ntlmpool.(ServerChallenge, NegotiateFlags)->ntlm.ntlm.parse_NTLM_CHALLENGE_MESSAGE(auth_header_value)
A:requests.packages.urllib3.contrib.ntlmpool.auth_msg->ntlm.ntlm.create_NTLM_AUTHENTICATE_MESSAGE(ServerChallenge, self.user, self.domain, self.pw, NegotiateFlags)
requests.packages.urllib3.contrib.ntlmpool.NTLMConnectionPool(self,user,pw,authurl,*args,**kwargs)
requests.packages.urllib3.contrib.ntlmpool.NTLMConnectionPool.__init__(self,user,pw,authurl,*args,**kwargs)
requests.packages.urllib3.contrib.ntlmpool.NTLMConnectionPool._new_conn(self)
requests.packages.urllib3.contrib.ntlmpool.NTLMConnectionPool.urlopen(self,method,url,body=None,headers=None,retries=3,redirect=True,assert_same_host=True)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/contrib/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/contrib/appengine.py----------------------------------------
A:requests.packages.urllib3.contrib.appengine.log->logging.getLogger(__name__)
A:requests.packages.urllib3.contrib.appengine.retries->util.retry.Retry.from_int(retries, redirect=redirect, default=self.retries)
A:requests.packages.urllib3.contrib.appengine.response->google.appengine.api.urlfetch.fetch(url, payload=body, method=method, headers=headers or {}, allow_truncated=False, follow_redirects=redirect and retries.redirect != 0 and retries.total, deadline=self._get_absolute_timeout(timeout), validate_certificate=self.validate_certificate)
A:requests.packages.urllib3.contrib.appengine.http_response->self._urlfetch_response_to_http_response(response, **response_kw)
A:requests.packages.urllib3.contrib.appengine.content_encoding->urlfetch_resp.headers.get('content-encoding')
requests.packages.urllib3.contrib.appengine.AppEngineManager(self,headers=None,retries=None,validate_certificate=True)
requests.packages.urllib3.contrib.appengine.AppEngineManager.__enter__(self)
requests.packages.urllib3.contrib.appengine.AppEngineManager.__exit__(self,exc_type,exc_val,exc_tb)
requests.packages.urllib3.contrib.appengine.AppEngineManager.__init__(self,headers=None,retries=None,validate_certificate=True)
requests.packages.urllib3.contrib.appengine.AppEngineManager._get_absolute_timeout(self,timeout)
requests.packages.urllib3.contrib.appengine.AppEngineManager._get_retries(self,retries,redirect)
requests.packages.urllib3.contrib.appengine.AppEngineManager._urlfetch_response_to_http_response(self,urlfetch_resp,**response_kw)
requests.packages.urllib3.contrib.appengine.AppEngineManager.urlopen(self,method,url,body=None,headers=None,retries=None,redirect=True,timeout=Timeout.DEFAULT_TIMEOUT,**response_kw)
requests.packages.urllib3.contrib.appengine.AppEnginePlatformError(HTTPError)
requests.packages.urllib3.contrib.appengine.AppEnginePlatformWarning(HTTPWarning)
requests.packages.urllib3.contrib.appengine.is_appengine()
requests.packages.urllib3.contrib.appengine.is_appengine_sandbox()
requests.packages.urllib3.contrib.appengine.is_local_appengine()
requests.packages.urllib3.contrib.appengine.is_prod_appengine_v1()
requests.packages.urllib3.contrib.appengine.is_prod_appengine_v2()


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/packages/six.py----------------------------------------
A:requests.packages.urllib3.packages.six.MAXSIZE->int((1 << 63) - 1)
A:requests.packages.urllib3.packages.six.result->self._resolve()
A:requests.packages.urllib3.packages.six.module->_import_module(self.mod)
A:requests.packages.urllib3.packages.six.movessys.modules[__name__ + '.moves']->_MovedItems('moves')
A:requests.packages.urllib3.packages.six.get_method_function->operator.attrgetter(_meth_func)
A:requests.packages.urllib3.packages.six.get_method_self->operator.attrgetter(_meth_self)
A:requests.packages.urllib3.packages.six.get_function_code->operator.attrgetter(_func_code)
A:requests.packages.urllib3.packages.six.get_function_defaults->operator.attrgetter(_func_defaults)
A:requests.packages.urllib3.packages.six.int2byte->operator.methodcaller('to_bytes', 1, 'big')
A:requests.packages.urllib3.packages.six.exec_->getattr(builtins, 'exec')
A:requests.packages.urllib3.packages.six.print_->getattr(builtins, 'print')
A:requests.packages.urllib3.packages.six.frame->sys._getframe(1)
A:requests.packages.urllib3.packages.six.fp->kwargs.pop('file', sys.stdout)
A:requests.packages.urllib3.packages.six.data->str(data)
A:requests.packages.urllib3.packages.six.sep->kwargs.pop('sep', None)
A:requests.packages.urllib3.packages.six.end->kwargs.pop('end', None)
A:requests.packages.urllib3.packages.six.newline->unicode('\n')
A:requests.packages.urllib3.packages.six.space->unicode(' ')
requests.packages.urllib3.packages.six.MovedAttribute(self,name,old_mod,new_mod,old_attr=None,new_attr=None)
requests.packages.urllib3.packages.six.MovedAttribute.__init__(self,name,old_mod,new_mod,old_attr=None,new_attr=None)
requests.packages.urllib3.packages.six.MovedAttribute._resolve(self)
requests.packages.urllib3.packages.six.MovedModule(self,name,old,new=None)
requests.packages.urllib3.packages.six.MovedModule.__init__(self,name,old,new=None)
requests.packages.urllib3.packages.six.MovedModule._resolve(self)
requests.packages.urllib3.packages.six._LazyDescr(self,name)
requests.packages.urllib3.packages.six._LazyDescr.__get__(self,obj,tp)
requests.packages.urllib3.packages.six._LazyDescr.__init__(self,name)
requests.packages.urllib3.packages.six._MovedItems(types.ModuleType)
requests.packages.urllib3.packages.six._add_doc(func,doc)
requests.packages.urllib3.packages.six._import_module(name)
requests.packages.urllib3.packages.six.add_move(move)
requests.packages.urllib3.packages.six.iteritems(d)
requests.packages.urllib3.packages.six.iterkeys(d)
requests.packages.urllib3.packages.six.itervalues(d)
requests.packages.urllib3.packages.six.remove_move(name)
requests.packages.urllib3.packages.six.with_metaclass(meta,base=object)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/packages/ordered_dict.py----------------------------------------
A:requests.packages.urllib3.packages.ordered_dict.(link_prev, link_next, key)->self.__map.pop(key)
A:requests.packages.urllib3.packages.ordered_dict.value->dict.pop(self, key)
A:requests.packages.urllib3.packages.ordered_dict.__marker->object()
A:requests.packages.urllib3.packages.ordered_dict.inst_dict->vars(self).copy()
A:requests.packages.urllib3.packages.ordered_dict.d->cls()
requests.packages.urllib3.packages.ordered_dict.OrderedDict(self,*args,**kwds)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.__delitem__(self,key,dict_delitem=dict.__delitem__)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.__eq__(self,other)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.__init__(self,*args,**kwds)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.__iter__(self)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.__ne__(self,other)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.__reduce__(self)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.__repr__(self,_repr_running={})
requests.packages.urllib3.packages.ordered_dict.OrderedDict.__reversed__(self)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.__setitem__(self,key,value,dict_setitem=dict.__setitem__)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.clear(self)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.copy(self)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.fromkeys(cls,iterable,value=None)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.items(self)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.iteritems(self)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.iterkeys(self)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.itervalues(self)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.keys(self)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.pop(self,key,default=__marker)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.popitem(self,last=True)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.setdefault(self,key,default=None)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.update(*args,**kwds)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.values(self)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.viewitems(self)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.viewkeys(self)
requests.packages.urllib3.packages.ordered_dict.OrderedDict.viewvalues(self)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/packages/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/packages/ssl_match_hostname/_implementation.py----------------------------------------
A:requests.packages.urllib3.packages.ssl_match_hostname._implementation.parts->dn.split('.')
A:requests.packages.urllib3.packages.ssl_match_hostname._implementation.wildcards->leftmost.count('*')
A:requests.packages.urllib3.packages.ssl_match_hostname._implementation.pat->re.compile('\\A' + '\\.'.join(pats) + '\\Z', re.IGNORECASE)
A:requests.packages.urllib3.packages.ssl_match_hostname._implementation.san->cert.get('subjectAltName', ())
requests.packages.urllib3.packages.ssl_match_hostname.CertificateError(ValueError)
requests.packages.urllib3.packages.ssl_match_hostname._implementation.CertificateError(ValueError)
requests.packages.urllib3.packages.ssl_match_hostname._implementation._dnsname_match(dn,hostname,max_wildcards=1)
requests.packages.urllib3.packages.ssl_match_hostname._implementation.match_hostname(cert,hostname)
requests.packages.urllib3.packages.ssl_match_hostname.match_hostname(cert,hostname)


----------------------------------------/home/zhang/Packages/requests/requests2.8.0/packages/urllib3/packages/ssl_match_hostname/__init__.py----------------------------------------

