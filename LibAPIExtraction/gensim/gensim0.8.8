
----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/__init__.py----------------------------------------
A:gensim.__init__.logger->logging.getLogger('gensim')
gensim.__init__.NullHandler(logging.Handler)
gensim.__init__.NullHandler.emit(self,record)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/utils.py----------------------------------------
A:gensim.utils.logger->logging.getLogger('gensim.utils')
A:gensim.utils.PAT_ALPHABETIC->re.compile('(((?![\\d])\\w)+)', re.UNICODE)
A:gensim.utils.RE_HTML_ENTITY->re.compile('&(#?)(x?)(\\w+);', re.UNICODE)
A:gensim.utils.tlock->getattr(self, tlockname)
A:gensim.utils.result->socket.gethostbyname(socket.gethostname())
A:gensim.utils.nocm->NoCM()
A:gensim.utils.text->deaccent(text)
A:gensim.utils.norm->unicodedata.normalize('NFD', text)
A:gensim.utils.maxid->max(maxid, max([-1] + [fieldid for (fieldid, _) in document]))
A:gensim.utils.id2word->FakeDict(num_terms)
A:gensim.utils.doc1->iter(obj).next()
A:gensim.utils.obj->itertools.chain([doc1], obj)
A:gensim.utils.(id1, val1)->iter(doc1).next()
A:gensim.utils.ns->Pyro4.naming.locateNS()
A:gensim.utils.s->socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
A:gensim.utils.(result, port)->socket.socket(socket.AF_INET, socket.SOCK_DGRAM).getsockname()
A:gensim.utils.ent->match.group(3)
A:gensim.utils.cp->htmlentitydefs.name2codepoint.get(ent)
A:gensim.utils.it->iter(self.corpus)
A:gensim.utils.chunk->itertools.islice(it, self.chunksize)
A:gensim.utils.qsize->self.q.qsize()
A:gensim.utils.q->multiprocessing.Queue(maxsize=maxsize)
A:gensim.utils.worker->InputQueue(q, corpus, chunksize, maxsize=maxsize, as_numpy=as_numpy)
A:gensim.utils.(_, ext)->os.path.splitext(fname)
A:gensim.utils.sims->sorted(enumerate(sims), key=lambda item: -item[1])
A:gensim.utils.doc['tokens']->preprocess(doc['text'])
A:gensim.utils.uri->daemon.register(obj, name)
A:gensim.utils.content->u' '.join(tokenize(content, lower=True, errors='ignore'))
A:gensim.utils.parsed->parse(content, lemmata=True, collapse=False, light=light)
gensim.utils.FakeDict(self,num_terms)
gensim.utils.FakeDict.__getitem__(self,val)
gensim.utils.FakeDict.__init__(self,num_terms)
gensim.utils.FakeDict.__len__(self)
gensim.utils.FakeDict.__str__(self)
gensim.utils.FakeDict.get(self,val,default=None)
gensim.utils.FakeDict.iteritems(self)
gensim.utils.FakeDict.keys(self)
gensim.utils.InputQueue(self,q,corpus,chunksize,maxsize,as_numpy)
gensim.utils.InputQueue.__init__(self,q,corpus,chunksize,maxsize,as_numpy)
gensim.utils.InputQueue.run(self)
gensim.utils.NoCM(object)
gensim.utils.NoCM.__enter__(self)
gensim.utils.NoCM.__exit__(self,type,value,traceback)
gensim.utils.NoCM.acquire(self)
gensim.utils.NoCM.release(self)
gensim.utils.RepeatCorpus(self,corpus,reps)
gensim.utils.RepeatCorpus.__init__(self,corpus,reps)
gensim.utils.RepeatCorpus.__iter__(self)
gensim.utils.SaveLoad(object)
gensim.utils.SaveLoad.load(cls,fname)
gensim.utils.SaveLoad.save(self,fname)
gensim.utils.any2unicode(text,encoding='utf8',errors='strict')
gensim.utils.any2utf8(text,errors='strict',encoding='utf8')
gensim.utils.chunkize_serial(iterable,chunksize,as_numpy=False)
gensim.utils.copytree_hardlink(source,dest)
gensim.utils.deaccent(text)
gensim.utils.decode_htmlentities(text)
gensim.utils.dict_from_corpus(corpus)
gensim.utils.getNS()
gensim.utils.get_max_id(corpus)
gensim.utils.get_my_ip()
gensim.utils.identity(p)
gensim.utils.is_corpus(obj)
gensim.utils.make_closing(base,**attrs)
gensim.utils.pickle(obj,fname,protocol=-1)
gensim.utils.pyro_daemon(name,obj,random_suffix=False,ip=None,port=None)
gensim.utils.randfname(prefix='gensim')
gensim.utils.revdict(d)
gensim.utils.simple_preprocess(doc,deacc=False)
gensim.utils.smart_open(fname,mode='r')
gensim.utils.synchronous(tlockname)
gensim.utils.tokenize(text,lowercase=False,deacc=False,errors='strict',to_lower=False,lower=False)
gensim.utils.toptexts(query,texts,index,n=10)
gensim.utils.unpickle(fname)
gensim.utils.upload_chunked(server,docs,chunksize=1000,preprocess=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/interfaces.py----------------------------------------
A:gensim.interfaces.logger->logging.getLogger('gensim.interfaces')
A:gensim.interfaces.fmt->str(doc)
A:gensim.interfaces.(is_corpus, query)->utils.is_corpus(query)
A:gensim.interfaces.query->matutils.unitvec(query)
A:gensim.interfaces.result->self.get_similarities(query)
A:gensim.interfaces.chunk_end->min(self.index.shape[0], chunk_start + self.chunksize)
gensim.interfaces.CorpusABC(utils.SaveLoad)
gensim.interfaces.CorpusABC.__iter__(self)
gensim.interfaces.CorpusABC.__len__(self)
gensim.interfaces.CorpusABC.save_corpus(fname,corpus,id2word=None)
gensim.interfaces.SimilarityABC(self,corpus)
gensim.interfaces.SimilarityABC.__getitem__(self,query)
gensim.interfaces.SimilarityABC.__init__(self,corpus)
gensim.interfaces.SimilarityABC.__iter__(self)
gensim.interfaces.SimilarityABC.get_similarities(self,doc)
gensim.interfaces.TransformationABC(utils.SaveLoad)
gensim.interfaces.TransformationABC.__getitem__(self,vec)
gensim.interfaces.TransformationABC._apply(self,corpus,chunksize=None)
gensim.interfaces.TransformedCorpus(self,obj,corpus,chunksize=None)
gensim.interfaces.TransformedCorpus.__init__(self,obj,corpus,chunksize=None)
gensim.interfaces.TransformedCorpus.__iter__(self)
gensim.interfaces.TransformedCorpus.__len__(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/corpora/hashdictionary.py----------------------------------------
A:gensim.corpora.hashdictionary.logger->logging.getLogger('gensim.corpora.hashdictionary')
A:gensim.corpora.hashdictionary._->self.doc2bow(document, allow_update=True)
A:gensim.corpora.hashdictionary.document->sorted(document)
A:gensim.corpora.hashdictionary.frequency->len(list(group))
A:gensim.corpora.hashdictionary.tokenid->self.restricted_hash(word_norm)
A:gensim.corpora.hashdictionary.result->sorted(result.iteritems())
A:gensim.corpora.hashdictionary.no_above_abs->int(no_above * self.num_docs)
A:gensim.corpora.hashdictionary.ok->frozenset((word for (word, freq) in sorted(ok, key=lambda item: -item[1])[:keep_n]))
A:gensim.corpora.hashdictionary.self.dfs_debug->dict(((word, freq) for (word, freq) in self.dfs_debug.iteritems() if word in ok))
A:gensim.corpora.hashdictionary.self.token2id->dict(((token, tokenid) for (token, tokenid) in self.token2id.iteritems() if token in self.dfs_debug))
A:gensim.corpora.hashdictionary.self.id2token->dict(((tokenid, set((token for token in tokens if token in self.dfs_debug))) for (tokenid, tokens) in self.id2token.iteritems()))
A:gensim.corpora.hashdictionary.self.dfs->dict(((tokenid, freq) for (tokenid, freq) in self.dfs.iteritems() if self.id2token.get(tokenid, set())))
A:gensim.corpora.hashdictionary.words->sorted(self[tokenid])
gensim.corpora.hashdictionary.HashDictionary(self,documents=None,id_range=32000,myhash=zlib.adler32,debug=True)
gensim.corpora.hashdictionary.HashDictionary.__getitem__(self,tokenid)
gensim.corpora.hashdictionary.HashDictionary.__init__(self,documents=None,id_range=32000,myhash=zlib.adler32,debug=True)
gensim.corpora.hashdictionary.HashDictionary.__len__(self)
gensim.corpora.hashdictionary.HashDictionary.__str__(self)
gensim.corpora.hashdictionary.HashDictionary.add_documents(self,documents)
gensim.corpora.hashdictionary.HashDictionary.doc2bow(self,document,allow_update=False,return_missing=False)
gensim.corpora.hashdictionary.HashDictionary.filter_extremes(self,no_below=5,no_above=0.5,keep_n=100000)
gensim.corpora.hashdictionary.HashDictionary.from_documents(*args,**kwargs)
gensim.corpora.hashdictionary.HashDictionary.keys(self)
gensim.corpora.hashdictionary.HashDictionary.restricted_hash(self,token)
gensim.corpora.hashdictionary.HashDictionary.save_as_text(self,fname)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/corpora/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/corpora/wikicorpus.py----------------------------------------
A:gensim.corpora.wikicorpus.logger->logging.getLogger('gensim.corpora.wikicorpus')
A:gensim.corpora.wikicorpus.RE_P0->re.compile('<!--.*?-->', re.DOTALL | re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P1->re.compile('<ref([> ].*?)(</ref>|/>)', re.DOTALL | re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P2->re.compile('(\n\\[\\[[a-z][a-z][\\w-]*:[^:\\]]+\\]\\])+$', re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P3->re.compile('{{([^}{]*)}}', re.DOTALL | re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P4->re.compile('{{([^}]*)}}', re.DOTALL | re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P5->re.compile('\\[(\\w+):\\/\\/(.*?)(( (.*?))|())\\]', re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P6->re.compile('\\[([^][]*)\\|([^][]*)\\]', re.DOTALL | re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P7->re.compile('\n\\[\\[[iI]mage(.*?)(\\|.*?)*\\|(.*?)\\]\\]', re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P8->re.compile('\n\\[\\[[fF]ile(.*?)(\\|.*?)*\\|(.*?)\\]\\]', re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P9->re.compile('<nowiki([> ].*?)(</nowiki>|/>)', re.DOTALL | re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P10->re.compile('<math([> ].*?)(</math>|/>)', re.DOTALL | re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P11->re.compile('<(.*?)>', re.DOTALL | re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P12->re.compile('\n(({\\|)|(\\|-)|(\\|}))(.*?)(?=\n)', re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P13->re.compile('\n(\\||\\!)(.*?\\|)*([^|]*?)', re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P14->re.compile('\\[\\[Category:[^][]*\\]\\]', re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P15->re.compile('\\[\\[([fF]ile:|[iI]mage)[^]]*(\\]\\])', re.UNICODE)
A:gensim.corpora.wikicorpus.text->filter_wiki(text)
A:gensim.corpora.wikicorpus.s->s.replace(m, caption, 1).replace(m, caption, 1)
A:gensim.corpora.wikicorpus.m->re.match('^{(.*?)}', tag)
A:gensim.corpora.wikicorpus.elem->next(elems)
A:gensim.corpora.wikicorpus.namespace->_get_namespace(elem.tag)
A:gensim.corpora.wikicorpus.result->tokenize(text)
A:gensim.corpora.wikicorpus.processes->max(1, multiprocessing.cpu_count() - 1)
A:gensim.corpora.wikicorpus.self.dictionary->Dictionary(self.get_texts())
A:gensim.corpora.wikicorpus.pool->multiprocessing.Pool(self.processes)
gensim.corpora.wikicorpus.WikiCorpus(self,fname,processes=None,lemmatize=utils.HAS_PATTERN,dictionary=None)
gensim.corpora.wikicorpus.WikiCorpus.__init__(self,fname,processes=None,lemmatize=utils.HAS_PATTERN,dictionary=None)
gensim.corpora.wikicorpus.WikiCorpus.get_texts(self)
gensim.corpora.wikicorpus._extract_pages(f)
gensim.corpora.wikicorpus._get_namespace(tag)
gensim.corpora.wikicorpus.filter_wiki(raw)
gensim.corpora.wikicorpus.process_article(args)
gensim.corpora.wikicorpus.remove_file(s)
gensim.corpora.wikicorpus.remove_markup(text)
gensim.corpora.wikicorpus.remove_template(s)
gensim.corpora.wikicorpus.tokenize(content)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/corpora/textcorpus.py----------------------------------------
A:gensim.corpora.textcorpus.logger->logging.getLogger('gensim.corpora.textcorpus')
A:gensim.corpora.textcorpus.result->open(input)
A:gensim.corpora.textcorpus.self.dictionary->Dictionary()
gensim.corpora.textcorpus.TextCorpus(self,input=None)
gensim.corpora.textcorpus.TextCorpus.__init__(self,input=None)
gensim.corpora.textcorpus.TextCorpus.__iter__(self)
gensim.corpora.textcorpus.TextCorpus.__len__(self)
gensim.corpora.textcorpus.TextCorpus.get_texts(self)
gensim.corpora.textcorpus.TextCorpus.getstream(self)
gensim.corpora.textcorpus.getstream(input)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/corpora/svmlightcorpus.py----------------------------------------
A:gensim.corpora.svmlightcorpus.logger->logging.getLogger('gensim.corpora.svmlightcorpus')
A:gensim.corpora.svmlightcorpus.doc->self.line2doc(line)
A:gensim.corpora.svmlightcorpus.line->line[:line.find('#')].strip()
A:gensim.corpora.svmlightcorpus.parts->line[:line.find('#')].strip().split()
A:gensim.corpora.svmlightcorpus.pairs->' '.join(('%i:%s' % (termid + 1, termval) for (termid, termval) in doc))
gensim.corpora.svmlightcorpus.SvmLightCorpus(self,fname)
gensim.corpora.svmlightcorpus.SvmLightCorpus.__init__(self,fname)
gensim.corpora.svmlightcorpus.SvmLightCorpus.__iter__(self)
gensim.corpora.svmlightcorpus.SvmLightCorpus.doc2line(doc,label=0)
gensim.corpora.svmlightcorpus.SvmLightCorpus.docbyoffset(self,offset)
gensim.corpora.svmlightcorpus.SvmLightCorpus.line2doc(self,line)
gensim.corpora.svmlightcorpus.SvmLightCorpus.save_corpus(fname,corpus,id2word=None,labels=False)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/corpora/mmcorpus.py----------------------------------------
A:gensim.corpora.mmcorpus.logger->logging.getLogger('gensim.corpora.mmcorpus')
gensim.corpora.mmcorpus.MmCorpus(self,fname)
gensim.corpora.mmcorpus.MmCorpus.__init__(self,fname)
gensim.corpora.mmcorpus.MmCorpus.__iter__(self)
gensim.corpora.mmcorpus.MmCorpus.save_corpus(fname,corpus,id2word=None,progress_cnt=1000)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/corpora/ucicorpus.py----------------------------------------
A:gensim.corpora.ucicorpus.logger->logging.getLogger('gensim.corpora.ucicorpus')
A:gensim.corpora.ucicorpus.input->open(input)
A:gensim.corpora.ucicorpus.self.num_docs->int(input.next().strip())
A:gensim.corpora.ucicorpus.self.num_terms->int(input.next().strip())
A:gensim.corpora.ucicorpus.self.num_nnz->int(input.next().strip())
A:gensim.corpora.ucicorpus.writer->UciWriter(fname)
A:gensim.corpora.ucicorpus.posnow->UciWriter(fname).fout.tell()
A:gensim.corpora.ucicorpus.(max_id, veclen)->UciWriter(fname).write_vector(docno, vector)
A:gensim.corpora.ucicorpus.num_terms->len(id2word)
A:gensim.corpora.ucicorpus.self.id2word->dict(enumerate(words))
A:gensim.corpora.ucicorpus.dictionary->Dictionary()
A:gensim.corpora.ucicorpus.dictionary.dfs->defaultdict(int)
A:gensim.corpora.ucicorpus.dictionary.token2id->dict(((v, k) for (k, v) in self.id2word.iteritems()))
A:gensim.corpora.ucicorpus.id2word->gensim.utils.dict_from_corpus(corpus)
gensim.corpora.ucicorpus.UciCorpus(self,fname,fname_vocab=None)
gensim.corpora.ucicorpus.UciCorpus.__init__(self,fname,fname_vocab=None)
gensim.corpora.ucicorpus.UciCorpus.__iter__(self)
gensim.corpora.ucicorpus.UciCorpus.create_dictionary(self)
gensim.corpora.ucicorpus.UciCorpus.save_corpus(fname,corpus,id2word=None,progress_cnt=10000)
gensim.corpora.ucicorpus.UciReader(self,input)
gensim.corpora.ucicorpus.UciReader.__init__(self,input)
gensim.corpora.ucicorpus.UciReader.skip_headers(self,input_file)
gensim.corpora.ucicorpus.UciWriter(MmWriter)
gensim.corpora.ucicorpus.UciWriter.update_headers(self,num_docs,num_terms,num_nnz)
gensim.corpora.ucicorpus.UciWriter.write_corpus(fname,corpus,progress_cnt=1000,index=False)
gensim.corpora.ucicorpus.UciWriter.write_headers(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/corpora/csvcorpus.py----------------------------------------
A:gensim.corpora.csvcorpus.logger->logging.getLogger('gensim.corpora.csvcorpus')
A:gensim.corpora.csvcorpus.head->''.join(itertools.islice(open(self.fname), 5))
A:gensim.corpora.csvcorpus.self.headers->csv.Sniffer().has_header(head)
A:gensim.corpora.csvcorpus.self.dialect->csv.Sniffer().sniff(head)
A:gensim.corpora.csvcorpus.reader->csv.reader(open(self.fname), self.dialect)
gensim.corpora.csvcorpus.CsvCorpus(self,fname,labels)
gensim.corpora.csvcorpus.CsvCorpus.__init__(self,fname,labels)
gensim.corpora.csvcorpus.CsvCorpus.__iter__(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/corpora/bleicorpus.py----------------------------------------
A:gensim.corpora.bleicorpus.logger->logging.getLogger('gensim.corpora.bleicorpus')
A:gensim.corpora.bleicorpus.(fname_base, _)->os.path.splitext(fname)
A:gensim.corpora.bleicorpus.fname_dir->os.path.dirname(fname)
A:gensim.corpora.bleicorpus.self.id2word->dict(enumerate(words))
A:gensim.corpora.bleicorpus.parts->line.split()
A:gensim.corpora.bleicorpus.id2word->gensim.utils.dict_from_corpus(corpus)
A:gensim.corpora.bleicorpus.num_terms->len(id2word)
A:gensim.corpora.bleicorpus.doc->list(doc)
gensim.corpora.bleicorpus.BleiCorpus(self,fname,fname_vocab=None)
gensim.corpora.bleicorpus.BleiCorpus.__init__(self,fname,fname_vocab=None)
gensim.corpora.bleicorpus.BleiCorpus.__iter__(self)
gensim.corpora.bleicorpus.BleiCorpus.docbyoffset(self,offset)
gensim.corpora.bleicorpus.BleiCorpus.line2doc(self,line)
gensim.corpora.bleicorpus.BleiCorpus.save_corpus(fname,corpus,id2word=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/corpora/indexedcorpus.py----------------------------------------
A:gensim.corpora.indexedcorpus.logger->logging.getLogger('gensim.corpora.indexedcorpus')
A:gensim.corpora.indexedcorpus.self.index->gensim.utils.unpickle(index_fname)
A:gensim.corpora.indexedcorpus.offsets->serializer.save_corpus(fname, corpus, id2word)
A:gensim.corpora.indexedcorpus.self.length->sum((1 for doc in self))
gensim.corpora.indexedcorpus.IndexedCorpus(self,fname,index_fname=None)
gensim.corpora.indexedcorpus.IndexedCorpus.__getitem__(self,docno)
gensim.corpora.indexedcorpus.IndexedCorpus.__init__(self,fname,index_fname=None)
gensim.corpora.indexedcorpus.IndexedCorpus.__len__(self)
gensim.corpora.indexedcorpus.IndexedCorpus.serialize(serializer,fname,corpus,id2word=None,index_fname=None,progress_cnt=None,labels=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/corpora/dictionary.py----------------------------------------
A:gensim.corpora.dictionary.logger->logging.getLogger('gensim.corpora.dictionary')
A:gensim.corpora.dictionary.self.id2token->dict(((v, k) for (k, v) in self.token2id.iteritems()))
A:gensim.corpora.dictionary._->self.doc2bow(document, allow_update=True)
A:gensim.corpora.dictionary.document->sorted((utils.to_utf8(token) for token in document))
A:gensim.corpora.dictionary.frequency->len(list(group))
A:gensim.corpora.dictionary.tokenid->len(self.token2id)
A:gensim.corpora.dictionary.result->Dictionary()
A:gensim.corpora.dictionary.no_above_abs->int(no_above * self.num_docs)
A:gensim.corpora.dictionary.good_ids->set(good_ids)
A:gensim.corpora.dictionary.bad_ids->set(bad_ids)
A:gensim.corpora.dictionary.self.token2id->dict(((token, idmap[tokenid]) for (token, tokenid) in self.token2id.iteritems()))
A:gensim.corpora.dictionary.self.dfs->dict(((idmap[tokenid], freq) for (tokenid, freq) in self.dfs.iteritems()))
A:gensim.corpora.dictionary.idmap->dict(itertools.izip(self.token2id.itervalues(), xrange(len(self.token2id))))
A:gensim.corpora.dictionary.new_id->len(self.token2id)
A:gensim.corpora.dictionary.(wordid, word, docfreq)->line[:-1].split('\t')
A:gensim.corpora.dictionary.wordid->int(wordid)
A:gensim.corpora.dictionary.result.dfs[wordid]->int(docfreq)
A:gensim.corpora.dictionary.max_id->max(wordid, max_id)
gensim.corpora.dictionary.Dictionary(self,documents=None)
gensim.corpora.dictionary.Dictionary.__getitem__(self,tokenid)
gensim.corpora.dictionary.Dictionary.__init__(self,documents=None)
gensim.corpora.dictionary.Dictionary.__len__(self)
gensim.corpora.dictionary.Dictionary.__str__(self)
gensim.corpora.dictionary.Dictionary.add_documents(self,documents)
gensim.corpora.dictionary.Dictionary.compactify(self)
gensim.corpora.dictionary.Dictionary.doc2bow(self,document,allow_update=False,return_missing=False)
gensim.corpora.dictionary.Dictionary.filter_extremes(self,no_below=5,no_above=0.5,keep_n=100000)
gensim.corpora.dictionary.Dictionary.filter_tokens(self,bad_ids=None,good_ids=None)
gensim.corpora.dictionary.Dictionary.from_corpus(corpus)
gensim.corpora.dictionary.Dictionary.from_documents(documents)
gensim.corpora.dictionary.Dictionary.keys(self)
gensim.corpora.dictionary.Dictionary.load_from_text(fname)
gensim.corpora.dictionary.Dictionary.merge_with(self,other)
gensim.corpora.dictionary.Dictionary.save_as_text(self,fname)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/corpora/lowcorpus.py----------------------------------------
A:gensim.corpora.lowcorpus.logger->logging.getLogger('gensim.corpora.lowcorpus')
A:gensim.corpora.lowcorpus.self.num_docs->int(open(fname).readline())
A:gensim.corpora.lowcorpus.all_terms->sorted(all_terms)
A:gensim.corpora.lowcorpus.self.id2word->dict(itertools.izip(xrange(len(all_terms)), all_terms))
A:gensim.corpora.lowcorpus.self.word2id->dict(((v, k) for (k, v) in self.id2word.iteritems()))
A:gensim.corpora.lowcorpus.self.num_terms->len(self.word2id)
A:gensim.corpora.lowcorpus.words->self.line2words(line)
A:gensim.corpora.lowcorpus.uniq_words->set(words)
A:gensim.corpora.lowcorpus.doc->zip(uniq_words, map(words.count, uniq_words))
A:gensim.corpora.lowcorpus.id2word->gensim.utils.dict_from_corpus(corpus)
gensim.corpora.lowcorpus.LowCorpus(self,fname,id2word=None,line2words=split_on_space)
gensim.corpora.lowcorpus.LowCorpus.__init__(self,fname,id2word=None,line2words=split_on_space)
gensim.corpora.lowcorpus.LowCorpus.__iter__(self)
gensim.corpora.lowcorpus.LowCorpus.__len__(self)
gensim.corpora.lowcorpus.LowCorpus.docbyoffset(self,offset)
gensim.corpora.lowcorpus.LowCorpus.line2doc(self,line)
gensim.corpora.lowcorpus.LowCorpus.save_corpus(fname,corpus,id2word=None)
gensim.corpora.lowcorpus.split_on_space(s)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/scripts/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/parsing/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/parsing/porter.py----------------------------------------
A:gensim.parsing.porter.length->len(s)
A:gensim.parsing.porter.a->self._m()
A:gensim.parsing.porter.w->w.lower().lower()
A:gensim.parsing.porter.p->PorterStemmer()
gensim.parsing.porter.PorterStemmer(self)
gensim.parsing.porter.PorterStemmer.__init__(self)
gensim.parsing.porter.PorterStemmer._cons(self,i)
gensim.parsing.porter.PorterStemmer._cvc(self,i)
gensim.parsing.porter.PorterStemmer._doublec(self,j)
gensim.parsing.porter.PorterStemmer._ends(self,s)
gensim.parsing.porter.PorterStemmer._m(self)
gensim.parsing.porter.PorterStemmer._r(self,s)
gensim.parsing.porter.PorterStemmer._setto(self,s)
gensim.parsing.porter.PorterStemmer._step1ab(self)
gensim.parsing.porter.PorterStemmer._step1c(self)
gensim.parsing.porter.PorterStemmer._step2(self)
gensim.parsing.porter.PorterStemmer._step3(self)
gensim.parsing.porter.PorterStemmer._step4(self)
gensim.parsing.porter.PorterStemmer._step5(self)
gensim.parsing.porter.PorterStemmer._vowelinstem(self)
gensim.parsing.porter.PorterStemmer.stem(self,w)
gensim.parsing.porter.PorterStemmer.stem_documents(self,docs)
gensim.parsing.porter.PorterStemmer.stem_sentence(self,txt)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/parsing/preprocessing.py----------------------------------------
A:gensim.parsing.preprocessing.STOPWORDS->frozenset((w for w in STOPWORDS.split() if w))
A:gensim.parsing.preprocessing.s->f(s)
A:gensim.parsing.preprocessing.p->PorterStemmer()
gensim.parsing.preprocessing.preprocess_documents(docs)
gensim.parsing.preprocessing.preprocess_string(s,filters=DEFAULT_FILTERS)
gensim.parsing.preprocessing.read_file(path)
gensim.parsing.preprocessing.read_files(pattern)
gensim.parsing.preprocessing.remove_stopwords(s)
gensim.parsing.preprocessing.split_alphanum(s)
gensim.parsing.preprocessing.stem_text(text)
gensim.parsing.preprocessing.strip_multiple_whitespaces(s)
gensim.parsing.preprocessing.strip_non_alphanum(s)
gensim.parsing.preprocessing.strip_numeric(s)
gensim.parsing.preprocessing.strip_punctuation(s)
gensim.parsing.preprocessing.strip_punctuation2(s)
gensim.parsing.preprocessing.strip_short(s,minsize=3)
gensim.parsing.preprocessing.strip_tags(s)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/similarities/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/similarities/docsim.py----------------------------------------
A:gensim.similarities.docsim.logger->logging.getLogger('gensim.similarities.docsim')
A:gensim.similarities.docsim.(self.dirname, self.fname)->os.path.split(fname)
A:gensim.similarities.docsim.self.length->len(index)
A:gensim.similarities.docsim.self.index->self.index.tocsr()
A:gensim.similarities.docsim.result->gensim.utils.unpickle(fname)
A:gensim.similarities.docsim.index->MatrixSimilarity(self.fresh_docs, num_features=self.num_features)
A:gensim.similarities.docsim.self.output_prefix->gensim.utils.randfname(prefix='simserver')
A:gensim.similarities.docsim.self.chunksize->int(chunksize)
A:gensim.similarities.docsim.doclen->len(doc)
A:gensim.similarities.docsim.doc->gensim.matutils.unitvec(matutils.sparse2full(doc, self.num_features))
A:gensim.similarities.docsim.shardid->len(self.shards)
A:gensim.similarities.docsim.shard->Shard(self.shardid2filename(shardid), index)
A:gensim.similarities.docsim.last_index->last_shard.get_index()
A:gensim.similarities.docsim.self.fresh_docs->list(last_index.index)
A:gensim.similarities.docsim.args->zip([query] * len(self.shards), self.shards)
A:gensim.similarities.docsim.pool->multiprocessing.Pool(PARALLEL_SHARDS)
A:gensim.similarities.docsim.(pool, shard_results)->self.query_shards(query)
A:gensim.similarities.docsim.offsets->numpy.cumsum([0] + [len(shard) for shard in self.shards])
A:gensim.similarities.docsim.(is_corpus, query)->gensim.utils.is_corpus(query)
A:gensim.similarities.docsim.merged->heapq.nlargest(self.num_best, itertools.chain(*parts), key=lambda item: item[1])
A:gensim.similarities.docsim.query->gensim.matutils.corpus2csc([query], self.index.shape[1], dtype=self.index.dtype)
A:gensim.similarities.docsim.chunk_end->min(query.shape[0], chunk_start + chunksize)
A:gensim.similarities.docsim.dirname->os.path.dirname(self.output_prefix)
A:gensim.similarities.docsim.vector->gensim.matutils.unitvec(matutils.sparse2full(vector, num_features))
A:gensim.similarities.docsim.result.index->numpy.load(fname + '.npy', mmap_mode='r')
A:gensim.similarities.docsim.data->numpy.load(fname + '.data.npy', mmap_mode='r')
A:gensim.similarities.docsim.indptr->numpy.load(fname + '.indptr.npy', mmap_mode='r')
A:gensim.similarities.docsim.indices->numpy.load(fname + '.indices.npy', mmap_mode='r')
gensim.similarities.docsim.MatrixSimilarity(self,corpus,num_best=None,dtype=numpy.float32,num_features=None,chunksize=256)
gensim.similarities.docsim.MatrixSimilarity.__init__(self,corpus,num_best=None,dtype=numpy.float32,num_features=None,chunksize=256)
gensim.similarities.docsim.MatrixSimilarity.__len__(self)
gensim.similarities.docsim.MatrixSimilarity.get_similarities(self,query)
gensim.similarities.docsim.MatrixSimilarity.load(cls,fname)
gensim.similarities.docsim.MatrixSimilarity.save(self,fname)
gensim.similarities.docsim.Shard(self,fname,index)
gensim.similarities.docsim.Shard.__getitem__(self,query)
gensim.similarities.docsim.Shard.__getstate__(self)
gensim.similarities.docsim.Shard.__init__(self,fname,index)
gensim.similarities.docsim.Shard.__len__(self)
gensim.similarities.docsim.Shard.__str__(self)
gensim.similarities.docsim.Shard.fullname(self)
gensim.similarities.docsim.Shard.get_document_id(self,pos)
gensim.similarities.docsim.Shard.get_index(self)
gensim.similarities.docsim.Similarity(self,output_prefix,corpus,num_features,num_best=None,chunksize=1024,shardsize=32768)
gensim.similarities.docsim.Similarity.__getitem__(self,query)
gensim.similarities.docsim.Similarity.__init__(self,output_prefix,corpus,num_features,num_best=None,chunksize=1024,shardsize=32768)
gensim.similarities.docsim.Similarity.__iter__(self)
gensim.similarities.docsim.Similarity.__len__(self)
gensim.similarities.docsim.Similarity.__str__(self)
gensim.similarities.docsim.Similarity.add_documents(self,corpus)
gensim.similarities.docsim.Similarity.check_moved(self)
gensim.similarities.docsim.Similarity.close_shard(self)
gensim.similarities.docsim.Similarity.iter_chunks(self,chunksize=None)
gensim.similarities.docsim.Similarity.query_shards(self,query)
gensim.similarities.docsim.Similarity.reopen_shard(self)
gensim.similarities.docsim.Similarity.save(self,fname=None)
gensim.similarities.docsim.Similarity.shardid2filename(self,shardid)
gensim.similarities.docsim.Similarity.similarity_by_id(self,docpos)
gensim.similarities.docsim.Similarity.vector_by_id(self,docpos)
gensim.similarities.docsim.SparseMatrixSimilarity(self,corpus,num_features=None,num_terms=None,num_docs=None,num_nnz=None,num_best=None,chunksize=500,dtype=numpy.float32)
gensim.similarities.docsim.SparseMatrixSimilarity.__init__(self,corpus,num_features=None,num_terms=None,num_docs=None,num_nnz=None,num_best=None,chunksize=500,dtype=numpy.float32)
gensim.similarities.docsim.SparseMatrixSimilarity.__len__(self)
gensim.similarities.docsim.SparseMatrixSimilarity.get_similarities(self,query)
gensim.similarities.docsim.SparseMatrixSimilarity.load(cls,fname)
gensim.similarities.docsim.SparseMatrixSimilarity.save(self,fname)
gensim.similarities.docsim.query_shard(args)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/models/__init__.py----------------------------------------
A:gensim.models.__init__.(is_corpus, bow)->gensim.utils.is_corpus(bow)
gensim.models.__init__.VocabTransform(self,old2new,id2token=None)
gensim.models.__init__.VocabTransform.__getitem__(self,bow)
gensim.models.__init__.VocabTransform.__init__(self,old2new,id2token=None)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/models/hdpmodel.py----------------------------------------
A:gensim.models.hdpmodel.logger->logging.getLogger(__name__)
A:gensim.models.hdpmodel.max_val->numpy.max(v, 1)
A:gensim.models.hdpmodel.tot->numpy.sum(np.exp(v + log_shift[:, np.newaxis]), 1)
A:gensim.models.hdpmodel.dig_sum->scipy.special.psi(np.sum(v, 0))
A:gensim.models.hdpmodel.Elogsticks->numpy.zeros(n)
A:gensim.models.hdpmodel.gamma->numpy.ones(len(alpha))
A:gensim.models.hdpmodel.expElogtheta->numpy.exp(Elogtheta)
A:gensim.models.hdpmodel.counts->numpy.array(doc_word_counts)
A:gensim.models.hdpmodel.Elogtheta->dirichlet_expectation(gamma)
A:gensim.models.hdpmodel.meanchange->numpy.mean(abs(gamma - lastgamma))
A:gensim.models.hdpmodel.likelihood->numpy.sum(counts * np.log(phinorm))
A:gensim.models.hdpmodel.self.m_var_sticks_ss->numpy.zeros(T)
A:gensim.models.hdpmodel.self.m_var_beta_ss->numpy.zeros((T, Wt))
A:gensim.models.hdpmodel.self.m_W->len(id2word)
A:gensim.models.hdpmodel.self.m_D->len(corpus)
A:gensim.models.hdpmodel.self.m_var_sticks->numpy.zeros((2, T - 1))
A:gensim.models.hdpmodel.self.m_var_sticks[1]->range(T - 1, 0, -1)
A:gensim.models.hdpmodel.self.m_varphi_ss->numpy.zeros(T)
A:gensim.models.hdpmodel.self.m_Elogbeta->dirichlet_expectation(self.m_eta + self.m_lambda)
A:gensim.models.hdpmodel.self.m_timestamp->numpy.zeros(self.m_W, dtype=int)
A:gensim.models.hdpmodel.self.m_lambda_sum->numpy.sum(self.m_lambda, axis=1)
A:gensim.models.hdpmodel.save_freq->max(1, int(10000 / self.chunksize))
A:gensim.models.hdpmodel.start_time->time.clock()
A:gensim.models.hdpmodel.unique_words->dict()
A:gensim.models.hdpmodel.unique_words[word_id]->len(unique_words)
A:gensim.models.hdpmodel.Wt->len(word_list)
A:gensim.models.hdpmodel.rw->numpy.array([self.m_r[t] for t in self.m_timestamp[word_list]])
A:gensim.models.hdpmodel.ss->SuffStats(self.m_T, Wt, len(chunk))
A:gensim.models.hdpmodel.Elogsticks_1st->expect_log_sticks(self.m_var_sticks)
A:gensim.models.hdpmodel.(doc_word_ids, doc_word_counts)->zip(*doc)
A:gensim.models.hdpmodel.doc_score->self.doc_e_step(doc, ss, Elogsticks_1st, word_list, unique_words, doc_word_ids, doc_word_counts, self.m_var_converge)
A:gensim.models.hdpmodel.v->numpy.zeros((2, self.m_K - 1))
A:gensim.models.hdpmodel.var_phi->numpy.exp(log_var_phi)
A:gensim.models.hdpmodel.(log_var_phi, log_norm)->log_normalize(var_phi)
A:gensim.models.hdpmodel.(log_phi, log_norm)->log_normalize(phi)
A:gensim.models.hdpmodel.phi->numpy.exp(log_phi)
A:gensim.models.hdpmodel.phi_cum->numpy.flipud(np.sum(phi_all[:, 1:], 0))
A:gensim.models.hdpmodel.Elogsticks_2nd->expect_log_sticks(v)
A:gensim.models.hdpmodel.log_alpha->numpy.log(self.m_alpha)
A:gensim.models.hdpmodel.var_phi_sum->numpy.flipud(self.m_varphi_ss[1:])
A:gensim.models.hdpmodel.hdp_formatter->HdpTopicFormatter(self.id2word, betas)
A:gensim.models.hdpmodel.alpha->numpy.zeros(self.m_T)
A:gensim.models.hdpmodel.(lda_alpha, lda_beta)->self.hdp_to_lda()
A:gensim.models.hdpmodel.(likelihood, gamma)->lda_e_step(doc_word_ids, doc_word_counts, lda_alpha, lda_beta)
A:gensim.models.hdpmodel.log_predicts->numpy.log(np.dot(theta, lda_betad))
A:gensim.models.hdpmodel.topics->min(topics, len(self.data))
A:gensim.models.hdpmodel.topics_sums->numpy.sum(topics, axis=1)
A:gensim.models.hdpmodel.lambdak->list(self.data[k, :])
A:gensim.models.hdpmodel.temp->sorted(temp, key=lambda x: x[0], reverse=True)
A:gensim.models.hdpmodel.topic_terms->self.show_topic_terms(temp, topn)
A:gensim.models.hdpmodel.topic->self.format_topic(k, topic_terms)
A:gensim.models.hdpmodel.fmt->'\n'.join(['    %20s    %.8f' % (word, weight) for (word, weight) in topic_terms])
gensim.models.hdpmodel.HdpModel(self,corpus,id2word,max_chunks=None,max_time=None,chunksize=256,kappa=1.0,tau=64.0,K=15,T=150,alpha=1,gamma=1,eta=0.01,scale=1.0,var_converge=0.0001,outputdir=None)
gensim.models.hdpmodel.HdpModel.__init__(self,corpus,id2word,max_chunks=None,max_time=None,chunksize=256,kappa=1.0,tau=64.0,K=15,T=150,alpha=1,gamma=1,eta=0.01,scale=1.0,var_converge=0.0001,outputdir=None)
gensim.models.hdpmodel.HdpModel.doc_e_step(self,doc,ss,Elogsticks_1st,word_list,unique_words,doc_word_ids,doc_word_counts,var_converge)
gensim.models.hdpmodel.HdpModel.evaluate_test_corpus(self,corpus)
gensim.models.hdpmodel.HdpModel.hdp_to_lda(self)
gensim.models.hdpmodel.HdpModel.optimal_ordering(self)
gensim.models.hdpmodel.HdpModel.print_topics(self,topics=20,topn=20)
gensim.models.hdpmodel.HdpModel.save_options(self)
gensim.models.hdpmodel.HdpModel.save_topics(self,doc_count=None)
gensim.models.hdpmodel.HdpModel.update(self,corpus)
gensim.models.hdpmodel.HdpModel.update_chunk(self,chunk,update=True,opt_o=True)
gensim.models.hdpmodel.HdpModel.update_expectations(self)
gensim.models.hdpmodel.HdpModel.update_finished(self,start_time,chunks_processed,docs_processed)
gensim.models.hdpmodel.HdpModel.update_lambda(self,sstats,word_list,opt_o)
gensim.models.hdpmodel.HdpTopicFormatter(self,dictionary=None,topic_data=None,topic_file=None,style=None)
gensim.models.hdpmodel.HdpTopicFormatter.__init__(self,dictionary=None,topic_data=None,topic_file=None,style=None)
gensim.models.hdpmodel.HdpTopicFormatter.format_topic(self,topic_id,topic_terms)
gensim.models.hdpmodel.HdpTopicFormatter.print_topics(self,topics=10,topn=10)
gensim.models.hdpmodel.HdpTopicFormatter.show_topic_terms(self,topic_data,topn)
gensim.models.hdpmodel.HdpTopicFormatter.show_topics(self,topics=10,topn=10,log=False,formatted=True)
gensim.models.hdpmodel.SuffStats(self,T,Wt,Dt)
gensim.models.hdpmodel.SuffStats.__init__(self,T,Wt,Dt)
gensim.models.hdpmodel.SuffStats.set_zero(self)
gensim.models.hdpmodel.dirichlet_expectation(alpha)
gensim.models.hdpmodel.expect_log_sticks(sticks)
gensim.models.hdpmodel.lda_e_step(doc_word_ids,doc_word_counts,alpha,beta,max_iter=100)
gensim.models.hdpmodel.log_normalize(v)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/models/rpmodel.py----------------------------------------
A:gensim.models.rpmodel.logger->logging.getLogger('gensim.models.rpmodel')
A:gensim.models.rpmodel.self.id2word->gensim.utils.dict_from_corpus(corpus)
A:gensim.models.rpmodel.self.num_terms->len(self.id2word)
A:gensim.models.rpmodel.self.projection->self.projection.copy('F')
A:gensim.models.rpmodel.(is_corpus, bow)->gensim.utils.is_corpus(bow)
A:gensim.models.rpmodel.vec->numpy.asfortranarray(vec, dtype=numpy.float32)
A:gensim.models.rpmodel.topic_dist->numpy.dot(self.projection, vec)
gensim.models.rpmodel.RpModel(self,corpus,id2word=None,num_topics=300)
gensim.models.rpmodel.RpModel.__getitem__(self,bow)
gensim.models.rpmodel.RpModel.__init__(self,corpus,id2word=None,num_topics=300)
gensim.models.rpmodel.RpModel.__setstate__(self,state)
gensim.models.rpmodel.RpModel.__str__(self)
gensim.models.rpmodel.RpModel.initialize(self,corpus)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/models/tfidfmodel.py----------------------------------------
A:gensim.models.tfidfmodel.logger->logging.getLogger('gensim.models.tfidfmodel')
A:gensim.models.tfidfmodel.self.dfs->dictionary.dfs.copy()
A:gensim.models.tfidfmodel.self.idfs->precompute_idfs(self.wglobal, self.dfs, self.num_docs)
A:gensim.models.tfidfmodel.(is_corpus, bow)->gensim.utils.is_corpus(bow)
A:gensim.models.tfidfmodel.vector->self.normalize(vector)
gensim.models.tfidfmodel.TfidfModel(self,corpus=None,id2word=None,dictionary=None,wlocal=utils.identity,wglobal=df2idf,normalize=True)
gensim.models.tfidfmodel.TfidfModel.__getitem__(self,bow,eps=1e-12)
gensim.models.tfidfmodel.TfidfModel.__init__(self,corpus=None,id2word=None,dictionary=None,wlocal=utils.identity,wglobal=df2idf,normalize=True)
gensim.models.tfidfmodel.TfidfModel.__str__(self)
gensim.models.tfidfmodel.TfidfModel.initialize(self,corpus)
gensim.models.tfidfmodel.df2idf(docfreq,totaldocs,log_base=2.0,add=0.0)
gensim.models.tfidfmodel.precompute_idfs(wglobal,dfs,total_docs)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/models/logentropy_model.py----------------------------------------
A:gensim.models.logentropy_model.logger->logging.getLogger('gensim.models.logentropy_model')
A:gensim.models.logentropy_model.(is_corpus, bow)->gensim.utils.is_corpus(bow)
A:gensim.models.logentropy_model.vector->gensim.matutils.unitvec(vector)
gensim.models.logentropy_model.LogEntropyModel(self,corpus,id2word=None,normalize=True)
gensim.models.logentropy_model.LogEntropyModel.__getitem__(self,bow)
gensim.models.logentropy_model.LogEntropyModel.__init__(self,corpus,id2word=None,normalize=True)
gensim.models.logentropy_model.LogEntropyModel.__str__(self)
gensim.models.logentropy_model.LogEntropyModel.initialize(self,corpus)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/test/test_word2vec.py----------------------------------------
A:gensim.test.test_word2vec.module_path->os.path.dirname(__file__)
A:gensim.test.test_word2vec.model->gensim.models.word2vec.Word2Vec(sentences, min_count=2, seed=42, workers=1)
A:gensim.test.test_word2vec.corpus->gensim.utils.RepeatCorpus(LeeCorpus(), 10000)
A:gensim.test.test_word2vec.total_words->sum((len(sentence) for sentence in corpus))
A:gensim.test.test_word2vec.sims->gensim.models.word2vec.Word2Vec(sentences, min_count=2, seed=42, workers=1).most_similar('israeli')
A:gensim.test.test_word2vec.model2->gensim.models.word2vec.Word2Vec(sentences, min_count=2, seed=42, workers=1)
A:gensim.test.test_word2vec.sentences->gensim.models.word2vec.LineSentence(open(datapath('head500.noblanks.cor')))
gensim.test.test_word2vec.LeeCorpus(object)
gensim.test.test_word2vec.LeeCorpus.__iter__(self)
gensim.test.test_word2vec.TestWord2VecModel(unittest.TestCase)
gensim.test.test_word2vec.TestWord2VecModel.models_equal(self,model,model2)
gensim.test.test_word2vec.TestWord2VecModel.testParallel(self)
gensim.test.test_word2vec.TestWord2VecModel.testPersistence(self)
gensim.test.test_word2vec.TestWord2VecModel.testRNG(self)
gensim.test.test_word2vec.TestWord2VecModel.testTraining(self)
gensim.test.test_word2vec.TestWord2VecModel.testVocab(self)
gensim.test.test_word2vec.TestWord2VecSentenceIterators(unittest.TestCase)
gensim.test.test_word2vec.TestWord2VecSentenceIterators.testLineSentenceWorksWithCompressedFile(self)
gensim.test.test_word2vec.TestWord2VecSentenceIterators.testLineSentenceWorksWithFilename(self)
gensim.test.test_word2vec.TestWord2VecSentenceIterators.testLineSentenceWorksWithNormalFile(self)
gensim.test.test_word2vec.testfile()


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/test/__init__.py----------------------------------------


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/test/test_miislita.py----------------------------------------
A:gensim.test.test_miislita.module_path->os.path.dirname(__file__)
A:gensim.test.test_miislita.logger->logging.getLogger('test_miislita')
A:gensim.test.test_miislita.stoplist->set('for a of the and to in on'.split())
A:gensim.test.test_miislita.self.length->sum((1 for doc in self.get_texts()))
A:gensim.test.test_miislita.fname->datapath('head500.noblanks.cor.bz2')
A:gensim.test.test_miislita.miislita->CorpusMiislita(corpusname)
A:gensim.test.test_miislita.ftmp->get_tmpfile('test_textcorpus.mm')
A:gensim.test.test_miislita.miislita2->CorpusMiislita.load(tmpf)
A:gensim.test.test_miislita.corpusname->datapath('miIslita.cor')
A:gensim.test.test_miislita.tmpf->get_tmpfile('tc_test.cpickle')
A:gensim.test.test_miislita.tfidf->gensim.models.TfidfModel(miislita, miislita.dictionary, normalize=False)
A:gensim.test.test_miislita.index->gensim.similarities.SparseMatrixSimilarity(tfidf[miislita], num_features=len(miislita.dictionary))
A:gensim.test.test_miislita.vec_bow->CorpusMiislita(corpusname).dictionary.doc2bow(query.lower().split())
gensim.test.test_miislita.CorpusMiislita(corpora.TextCorpus)
gensim.test.test_miislita.CorpusMiislita.__len__(self)
gensim.test.test_miislita.CorpusMiislita.get_texts(self)
gensim.test.test_miislita.TestMiislita(unittest.TestCase)
gensim.test.test_miislita.TestMiislita.test_miislita_high_level(self)
gensim.test.test_miislita.TestMiislita.test_save_load_ability(self)
gensim.test.test_miislita.TestMiislita.test_textcorpus(self)
gensim.test.test_miislita.get_tmpfile(suffix)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/test/test_corpora_dictionary.py----------------------------------------
A:gensim.test.test_corpora_dictionary.module_path->os.path.dirname(__file__)
A:gensim.test.test_corpora_dictionary.d->Dictionary(self.texts)
A:gensim.test.test_corpora_dictionary.tmpf->get_tmpfile('dict_test.txt')
A:gensim.test.test_corpora_dictionary.d_loaded->gensim.corpora.Dictionary.load_from_text(get_tmpfile('dict_test.txt'))
A:gensim.test.test_corpora_dictionary.stoplist->set('for a of the and to in'.split())
A:gensim.test.test_corpora_dictionary.all_tokens->sum(texts, [])
A:gensim.test.test_corpora_dictionary.tokens_once->set((word for word in set(all_tokens) if all_tokens.count(word) == 1))
A:gensim.test.test_corpora_dictionary.dictionary->Dictionary(texts)
A:gensim.test.test_corpora_dictionary.dictionary_from_corpus->gensim.corpora.Dictionary.from_corpus(corpus)
A:gensim.test.test_corpora_dictionary.dict_token2id_vals->sorted(dictionary.token2id.values())
A:gensim.test.test_corpora_dictionary.dict_from_corpus_vals->sorted(dictionary_from_corpus.token2id.values())
gensim.test.test_corpora_dictionary.TestDictionary(unittest.TestCase)
gensim.test.test_corpora_dictionary.TestDictionary.setUp(self)
gensim.test.test_corpora_dictionary.TestDictionary.testBuild(self)
gensim.test.test_corpora_dictionary.TestDictionary.testDocFreqAndToken2IdForSeveralDocsWithOneWord(self)
gensim.test.test_corpora_dictionary.TestDictionary.testDocFreqForOneDocWithSeveralWord(self)
gensim.test.test_corpora_dictionary.TestDictionary.testDocFreqOneDoc(self)
gensim.test.test_corpora_dictionary.TestDictionary.testFilter(self)
gensim.test.test_corpora_dictionary.TestDictionary.test_doc2bow(self)
gensim.test.test_corpora_dictionary.TestDictionary.test_from_corpus(self)
gensim.test.test_corpora_dictionary.TestDictionary.test_saveAsText_and_loadFromText(self)
gensim.test.test_corpora_dictionary.get_tmpfile(suffix)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/test/test_corpora.py----------------------------------------
A:gensim.test.test_corpora.module_path->os.path.dirname(__file__)
A:gensim.test.test_corpora.fname->datapath('testcorpus.' + self.file_extension.lstrip('.'))
A:gensim.test.test_corpora.corpus->self.corpus_class(fname)
A:gensim.test.test_corpora.docs->list(corpus)
A:gensim.test.test_corpora.corpus2->self.corpus_class(testfile())
gensim.test.test_corpora.CorpusTesterABC(self)
gensim.test.test_corpora.CorpusTesterABC.__init__(self)
gensim.test.test_corpora.CorpusTesterABC.test_load(self)
gensim.test.test_corpora.CorpusTesterABC.test_save(self,corpus=[[(1,1.0)],[],[(0,0.5),(2,1.0)],[]])
gensim.test.test_corpora.CorpusTesterABC.test_serialize(self,corpus=[[(1,1.0)],[],[(0,0.5),(2,1.0)],[]])
gensim.test.test_corpora.TestBleiCorpus(unittest.TestCase,CorpusTesterABC)
gensim.test.test_corpora.TestBleiCorpus.setUp(self)
gensim.test.test_corpora.TestLowCorpus(unittest.TestCase,CorpusTesterABC)
gensim.test.test_corpora.TestLowCorpus.setUp(self)
gensim.test.test_corpora.TestLowCorpus.test_save(self)
gensim.test.test_corpora.TestLowCorpus.test_serialize(self)
gensim.test.test_corpora.TestMmCorpus(unittest.TestCase,CorpusTesterABC)
gensim.test.test_corpora.TestMmCorpus.setUp(self)
gensim.test.test_corpora.TestSvmLightCorpus(unittest.TestCase,CorpusTesterABC)
gensim.test.test_corpora.TestSvmLightCorpus.setUp(self)
gensim.test.test_corpora.TestUciCorpus(unittest.TestCase,CorpusTesterABC)
gensim.test.test_corpora.TestUciCorpus.setUp(self)
gensim.test.test_corpora.TestUciCorpus.test_save(self)
gensim.test.test_corpora.TestUciCorpus.test_serialize(self)
gensim.test.test_corpora.testfile()


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/test/test_corpora_hashdictionary.py----------------------------------------
A:gensim.test.test_corpora_hashdictionary.module_path->os.path.dirname(__file__)
A:gensim.test.test_corpora_hashdictionary.d->HashDictionary(['žloťoučký koníček'.split(), 'Малйж обльйквюэ ат эжт'.split()])
A:gensim.test.test_corpora_hashdictionary.tmpf->get_tmpfile('dict_test.txt.bz2')
A:gensim.test.test_corpora_hashdictionary.d2->HashDictionary(['žloťoučký koníček'.split(), 'Малйж обльйквюэ ат эжт'.split()]).load(tmpf)
gensim.test.test_corpora_hashdictionary.TestHashDictionary(unittest.TestCase)
gensim.test.test_corpora_hashdictionary.TestHashDictionary.setUp(self)
gensim.test.test_corpora_hashdictionary.TestHashDictionary.testBuild(self)
gensim.test.test_corpora_hashdictionary.TestHashDictionary.testDebugMode(self)
gensim.test.test_corpora_hashdictionary.TestHashDictionary.testDocFreqAndToken2IdForSeveralDocsWithOneWord(self)
gensim.test.test_corpora_hashdictionary.TestHashDictionary.testDocFreqForOneDocWithSeveralWord(self)
gensim.test.test_corpora_hashdictionary.TestHashDictionary.testDocFreqOneDoc(self)
gensim.test.test_corpora_hashdictionary.TestHashDictionary.testFilter(self)
gensim.test.test_corpora_hashdictionary.TestHashDictionary.testRange(self)
gensim.test.test_corpora_hashdictionary.TestHashDictionary.test_saveAsText(self)
gensim.test.test_corpora_hashdictionary.TestHashDictionary.test_saveAsTextBz2(self)
gensim.test.test_corpora_hashdictionary.get_tmpfile(suffix)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/test/test_lee.py----------------------------------------
A:gensim.test.test_lee.pre_path->os.path.join(os.path.dirname(__file__), 'test_data')
A:gensim.test.test_lee.bg_corpus->preprocess_documents(f)
A:gensim.test.test_lee.corpus->preprocess_documents(f)
A:gensim.test.test_lee.sim_matrix->numpy.loadtxt(os.path.join(pre_path, sim_file))
A:gensim.test.test_lee.dictionary->gensim.corpora.Dictionary(bg_corpus)
A:gensim.test.test_lee.log_ent->gensim.models.LogEntropyModel(bg_corpus)
A:gensim.test.test_lee.lsi->gensim.models.LsiModel(bg_corpus_ent, id2word=dictionary, num_topics=200)
A:gensim.test.test_lee.res->numpy.zeros((len(corpus), len(corpus)))
A:gensim.test.test_lee.res[i, j]->gensim.matutils.cossim(par1, par2)
A:gensim.test.test_lee.cor->numpy.corrcoef(flat, human_sim_vector)
gensim.test.test_lee.TestLeeTest(unittest.TestCase)
gensim.test.test_lee.TestLeeTest.setUp(self)
gensim.test.test_lee.TestLeeTest.test_corpus(self)
gensim.test.test_lee.TestLeeTest.test_lee(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/test/test_similarities.py----------------------------------------
A:gensim.test.test_similarities.module_path->os.path.dirname(__file__)
A:gensim.test.test_similarities.dictionary->Dictionary(texts)
A:gensim.test.test_similarities.index->gensim.similarities.Similarity(None, corpus[:5], num_features=len(dictionary), shardsize=9)
A:gensim.test.test_similarities.expected->gensim.matutils.sparse2full(expected, len(index))
A:gensim.test.test_similarities.sims->gensim.matutils.sparse2full(sims, len(index))
A:gensim.test.test_similarities.index2->self.cls.load(fname)
A:gensim.test.test_similarities.index.index->gensim.similarities.Similarity(None, corpus[:5], num_features=len(dictionary), shardsize=9).index.todense()
A:gensim.test.test_similarities.index2.index->self.cls.load(fname).index.todense()
gensim.test.test_similarities.TestMatrixSimilarity(unittest.TestCase,TestSimilarityABC)
gensim.test.test_similarities.TestMatrixSimilarity.setUp(self)
gensim.test.test_similarities.TestSimilarity(unittest.TestCase,TestSimilarityABC)
gensim.test.test_similarities.TestSimilarity.setUp(self)
gensim.test.test_similarities.TestSimilarity.testReopen(self)
gensim.test.test_similarities.TestSimilarity.testSharding(self)
gensim.test.test_similarities.TestSimilarityABC(object)
gensim.test.test_similarities.TestSimilarityABC.testChunking(self)
gensim.test.test_similarities.TestSimilarityABC.testFull(self,num_best=None,shardsize=100)
gensim.test.test_similarities.TestSimilarityABC.testIter(self)
gensim.test.test_similarities.TestSimilarityABC.testNumBest(self)
gensim.test.test_similarities.TestSimilarityABC.testPersistency(self)
gensim.test.test_similarities.TestSparseMatrixSimilarity(unittest.TestCase,TestSimilarityABC)
gensim.test.test_similarities.TestSparseMatrixSimilarity.setUp(self)
gensim.test.test_similarities.testfile()


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/test/test_utils.py----------------------------------------
A:gensim.test.test_utils.result->gensim.utils.is_corpus(noCorpus)
A:gensim.test.test_utils.potentials->list()
gensim.test.test_utils.TestIsCorpus(unittest.TestCase)
gensim.test.test_utils.TestIsCorpus.test_None(self)
gensim.test.test_utils.TestIsCorpus.test_int_tuples(self)
gensim.test.test_utils.TestIsCorpus.test_invalid_formats(self)
gensim.test.test_utils.TestIsCorpus.test_simple_lists_of_tuples(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/test/test_parsing.py----------------------------------------
A:gensim.test.test_parsing.dataset->map(lambda x: strip_punctuation2(x.lower()), [doc1, doc2, doc3, doc4])
A:gensim.test.test_parsing.classes->numpy.array([[1, 0], [1, 0], [0, 1], [0, 1]])
gensim.test.test_parsing.TestPreprocessing(unittest.TestCase)
gensim.test.test_parsing.TestPreprocessing.testSplitAlphanum(self)
gensim.test.test_parsing.TestPreprocessing.testStemText(self)
gensim.test.test_parsing.TestPreprocessing.testStripMultipleWhitespaces(self)
gensim.test.test_parsing.TestPreprocessing.testStripNonAlphanum(self)
gensim.test.test_parsing.TestPreprocessing.testStripNumeric(self)
gensim.test.test_parsing.TestPreprocessing.testStripShort(self)
gensim.test.test_parsing.TestPreprocessing.testStripStopwords(self)
gensim.test.test_parsing.TestPreprocessing.testStripTags(self)


----------------------------------------/dataset/nuaa/anaconda3/envs/gensim0.8.8/lib/python3.6/site-packages/gensim/test/test_models.py----------------------------------------
A:gensim.test.test_models.module_path->os.path.dirname(__file__)
A:gensim.test.test_models.dictionary->Dictionary(texts)
A:gensim.test.test_models.self.corpus->gensim.corpora.mmcorpus.MmCorpus(datapath('testcorpus.mm'))
A:gensim.test.test_models.model->gensim.models.logentropy_model.LogEntropyModel(self.corpus_ok, normalize=True)
A:gensim.test.test_models.(u, s, vt)->numpy.linalg.svd(matutils.corpus2dense(self.corpus, self.corpus.num_terms), full_matrices=False)
A:gensim.test.test_models.vec->gensim.matutils.sparse2full(transformed, 2)
A:gensim.test.test_models.expected->numpy.array([-0.70710677, 0.70710677])
A:gensim.test.test_models.got->numpy.vstack((matutils.sparse2full(doc, 2) for doc in model[corpus]))
A:gensim.test.test_models.corpus->list(self.corpus)
A:gensim.test.test_models.model2->gensim.models.logentropy_model.LogEntropyModel.load(testfile())
A:gensim.test.test_models.vec1->gensim.matutils.sparse2full(model[doc], model.num_topics)
A:gensim.test.test_models.vec2->gensim.matutils.sparse2full(model2[doc], model2.num_topics)
A:gensim.test.test_models.passed->numpy.allclose(sorted(vec), sorted(expected), atol=0.01)
A:gensim.test.test_models.model1->gensim.models.tfidfmodel.TfidfModel(corpus)
A:gensim.test.test_models.self.corpus_small->gensim.corpora.mmcorpus.MmCorpus(datapath('test_corpus_small.mm'))
A:gensim.test.test_models.self.corpus_ok->gensim.corpora.mmcorpus.MmCorpus(datapath('test_corpus_ok.mm'))
gensim.test.test_models.TestLdaModel(unittest.TestCase)
gensim.test.test_models.TestLdaModel.setUp(self)
gensim.test.test_models.TestLdaModel.testPersistence(self)
gensim.test.test_models.TestLdaModel.testTransform(self)
gensim.test.test_models.TestLogEntropyModel(unittest.TestCase)
gensim.test.test_models.TestLogEntropyModel.setUp(self)
gensim.test.test_models.TestLogEntropyModel.testPersistence(self)
gensim.test.test_models.TestLogEntropyModel.testTransform(self)
gensim.test.test_models.TestLsiModel(unittest.TestCase)
gensim.test.test_models.TestLsiModel.setUp(self)
gensim.test.test_models.TestLsiModel.testCorpusTransform(self)
gensim.test.test_models.TestLsiModel.testOnlineTransform(self)
gensim.test.test_models.TestLsiModel.testPersistence(self)
gensim.test.test_models.TestLsiModel.testTransform(self)
gensim.test.test_models.TestRpModel(unittest.TestCase)
gensim.test.test_models.TestRpModel.setUp(self)
gensim.test.test_models.TestRpModel.testPersistence(self)
gensim.test.test_models.TestRpModel.testTransform(self)
gensim.test.test_models.TestTfidfModel(unittest.TestCase)
gensim.test.test_models.TestTfidfModel.setUp(self)
gensim.test.test_models.TestTfidfModel.testInit(self)
gensim.test.test_models.TestTfidfModel.testPersistence(self)
gensim.test.test_models.TestTfidfModel.testTransform(self)
gensim.test.test_models.testfile()

