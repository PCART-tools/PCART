
----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/utils.py----------------------------------------
A:gensim.utils.logger->logging.getLogger(__name__)
A:gensim.utils.(_, ext)->os.path.splitext(fname)
A:gensim.utils.PAT_ALPHABETIC->re.compile('(((?![\\d])\\w)+)', re.UNICODE)
A:gensim.utils.RE_HTML_ENTITY->re.compile('&(#?)([xX]?)(\\w{1,8});', re.UNICODE)
A:gensim.utils.tlock->getattr(self, tlockname)
A:gensim.utils.result->socket.gethostbyname(socket.gethostname())
A:gensim.utils.nocm->NoCM()
A:gensim.utils.text->deaccent(text)
A:gensim.utils.norm->unicodedata.normalize('NFD', text)
A:gensim.utils.(compress, subname)->SaveLoad._adapt_by_suffix(fname)
A:gensim.utils.obj->itertools.chain([doc1], obj)
A:gensim.utils.cfname->'.'.join((fname, attrib))
A:gensim.utils.val->numpy.load(subname(fname, attrib), mmap_mode=mmap)
A:gensim.utils.sparse->unpickle(subname(fname, attrib))
A:gensim.utils.sparse.data->numpy.load(subname(fname, attrib, 'data'), mmap_mode=mmap)
A:gensim.utils.sparse.indptr->numpy.load(subname(fname, attrib, 'indptr'), mmap_mode=mmap)
A:gensim.utils.sparse.indices->numpy.load(subname(fname, attrib, 'indices'), mmap_mode=mmap)
A:gensim.utils.restores->self._save_specials(fname, separately, sep_limit, ignore, pickle_protocol, compress, subname)
A:gensim.utils.asides[attrib]->getattr(self, attrib)
A:gensim.utils.maxid->max(maxid, max([-1] + [fieldid for (fieldid, _) in document]))
A:gensim.utils.id2word->FakeDict(num_terms)
A:gensim.utils.doc1->next(iter(obj))
A:gensim.utils.(id1, val1)->next(iter(doc1))
A:gensim.utils.ns->Pyro4.naming.locateNS()
A:gensim.utils.s->socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
A:gensim.utils.(result, port)->socket.socket(socket.AF_INET, socket.SOCK_DGRAM).getsockname()
A:gensim.utils.self.length->sum((1 for x in self))
A:gensim.utils.ent->match.group(3)
A:gensim.utils.cp->htmlentitydefs.name2codepoint.get(ent)
A:gensim.utils.it->iter(self.corpus)
A:gensim.utils.chunk->itertools.islice(it, self.chunksize)
A:gensim.utils.qsize->self.q.qsize()
A:gensim.utils.q->multiprocessing.Queue(maxsize=maxsize)
A:gensim.utils.worker->InputQueue(q, corpus, chunksize, maxsize=maxsize, as_numpy=as_numpy)
A:gensim.utils.(fname, oext)->os.path.splitext(fname)
A:gensim.utils.sims->sorted(enumerate(sims), key=lambda item: -item[1])
A:gensim.utils.doc['tokens']->preprocess(doc['text'])
A:gensim.utils.uri->daemon.register(obj, name)
A:gensim.utils.content->u(' ').join(tokenize(content, lower=True, errors='ignore'))
A:gensim.utils.parsed->parse(content, lemmata=True, collapse=False)
A:gensim.utils.nnz->numpy.random.uniform(size=(dim,))
A:gensim.utils.old_len->len(vocab)
A:gensim.utils.rule_res->trim_rule(word, count, min_count)
gensim.utils.ClippedCorpus(self,corpus,max_docs=None)
gensim.utils.ClippedCorpus.__init__(self,corpus,max_docs=None)
gensim.utils.ClippedCorpus.__iter__(self)
gensim.utils.ClippedCorpus.__len__(self)
gensim.utils.FakeDict(self,num_terms)
gensim.utils.FakeDict.__getitem__(self,val)
gensim.utils.FakeDict.__init__(self,num_terms)
gensim.utils.FakeDict.__len__(self)
gensim.utils.FakeDict.__str__(self)
gensim.utils.FakeDict.get(self,val,default=None)
gensim.utils.FakeDict.iteritems(self)
gensim.utils.FakeDict.keys(self)
gensim.utils.InputQueue(self,q,corpus,chunksize,maxsize,as_numpy)
gensim.utils.InputQueue.__init__(self,q,corpus,chunksize,maxsize,as_numpy)
gensim.utils.InputQueue.run(self)
gensim.utils.NoCM(object)
gensim.utils.NoCM.__enter__(self)
gensim.utils.NoCM.__exit__(self,type,value,traceback)
gensim.utils.NoCM.acquire(self)
gensim.utils.NoCM.release(self)
gensim.utils.RepeatCorpus(self,corpus,reps)
gensim.utils.RepeatCorpus.__init__(self,corpus,reps)
gensim.utils.RepeatCorpus.__iter__(self)
gensim.utils.RepeatCorpusNTimes(self,corpus,n)
gensim.utils.RepeatCorpusNTimes.__init__(self,corpus,n)
gensim.utils.RepeatCorpusNTimes.__iter__(self)
gensim.utils.SaveLoad(object)
gensim.utils.SaveLoad._adapt_by_suffix(fname)
gensim.utils.SaveLoad._load_specials(self,fname,mmap,compress,subname)
gensim.utils.SaveLoad._save_specials(self,fname,separately,sep_limit,ignore,pickle_protocol,compress,subname)
gensim.utils.SaveLoad._smart_save(self,fname,separately=None,sep_limit=10*1024**2,ignore=frozenset(),pickle_protocol=2)
gensim.utils.SaveLoad.load(cls,fname,mmap=None)
gensim.utils.SaveLoad.save(self,fname_or_handle,separately=None,sep_limit=10*1024**2,ignore=frozenset(),pickle_protocol=2)
gensim.utils.SlicedCorpus(self,corpus,slice_)
gensim.utils.SlicedCorpus.__init__(self,corpus,slice_)
gensim.utils.SlicedCorpus.__iter__(self)
gensim.utils.SlicedCorpus.__len__(self)
gensim.utils.any2unicode(text,encoding='utf8',errors='strict')
gensim.utils.any2utf8(text,errors='strict',encoding='utf8')
gensim.utils.chunkize_serial(iterable,chunksize,as_numpy=False)
gensim.utils.copytree_hardlink(source,dest)
gensim.utils.deaccent(text)
gensim.utils.decode_htmlentities(text)
gensim.utils.dict_from_corpus(corpus)
gensim.utils.file_or_filename(input)
gensim.utils.getNS()
gensim.utils.get_max_id(corpus)
gensim.utils.get_my_ip()
gensim.utils.identity(p)
gensim.utils.is_corpus(obj)
gensim.utils.keep_vocab_item(word,count,min_count,trim_rule=None)
gensim.utils.mock_data(n_items=1000,dim=1000,prob_nnz=0.5,lam=1.0)
gensim.utils.mock_data_row(dim=1000,prob_nnz=0.5,lam=1.0)
gensim.utils.pickle(obj,fname,protocol=2)
gensim.utils.prune_vocab(vocab,min_reduce,trim_rule=None)
gensim.utils.pyro_daemon(name,obj,random_suffix=False,ip=None,port=None)
gensim.utils.randfname(prefix='gensim')
gensim.utils.revdict(d)
gensim.utils.safe_unichr(intval)
gensim.utils.simple_preprocess(doc,deacc=False,min_len=2,max_len=15)
gensim.utils.smart_extension(fname,ext)
gensim.utils.synchronous(tlockname)
gensim.utils.tokenize(text,lowercase=False,deacc=False,errors='strict',to_lower=False,lower=False)
gensim.utils.toptexts(query,texts,index,n=10)
gensim.utils.unpickle(fname)
gensim.utils.upload_chunked(server,docs,chunksize=1000,preprocess=None)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/matutils.py----------------------------------------
A:gensim.matutils.m->numpy.ones((n, n), int)
A:gensim.matutils.a->numpy.asfortranarray(la[0])
A:gensim.matutils.logger->logging.getLogger(__name__)
A:gensim.matutils.x->numpy.asarray(x)
A:gensim.matutils.indices->numpy.asarray(indices)
A:gensim.matutils.data->numpy.asarray(data, dtype=dtype)
A:gensim.matutils.result->sum((value * vec2.get(index, 0.0) for (index, value) in iteritems(vec1)))
A:gensim.matutils.buffer->numpy.zeros(nbytes + align, dtype=numpy.uint8)
A:gensim.matutils.vec->numpy.asarray(vec, dtype=float)
A:gensim.matutils.doc->dict(doc)
A:gensim.matutils.result[list(doc)]->list(itervalues(doc))
A:gensim.matutils.biggest->nnz.take(argsort(vec.take(nnz), topn, reverse=True))
A:gensim.matutils.result[:, docno]->sparse2full(doc, num_terms)
A:gensim.matutils.self.sparse->sparse.tocsc()
A:gensim.matutils.blas_nrm2->blas('nrm2', numpy.array([], dtype=float))
A:gensim.matutils.blas_scal->blas('scal', numpy.array([], dtype=float))
A:gensim.matutils.veclen->blas_nrm2(vec)
A:gensim.matutils.first->next(iter(vec))
A:gensim.matutils.(geqrf,)->get_lapack_funcs(('geqrf',), (a,))
A:gensim.matutils.(qr, tau, work, info)->geqrf(a, lwork=work[0], overwrite_a=True)
A:gensim.matutils.r->triu(qr[:n, :n])
A:gensim.matutils.(gorgqr,)->get_lapack_funcs(('orgqr',), (qr,))
A:gensim.matutils.(q, work, info)->gorgqr(qr, tau, lwork=work[0], overwrite_a=True)
A:gensim.matutils.self.fout->gensim.utils.smart_open(self.fname, 'wb+')
A:gensim.matutils.vector->sorted(((i, w) for (i, w) in vector if abs(w) > 1e-12))
A:gensim.matutils.mw->MmWriter(fname)
A:gensim.matutils.posnow->MmWriter(fname).fout.tell()
A:gensim.matutils.(max_id, veclen)->MmWriter(fname).write_vector(docno, bow)
A:gensim.matutils._num_terms->max(_num_terms, 1 + max_id)
A:gensim.matutils.header->gensim.utils.to_unicode(next(lines)).strip()
A:gensim.matutils.line->gensim.utils.to_unicode(line)
A:gensim.matutils.(self.num_docs, self.num_terms, self.num_nnz)->map(int, line.split())
A:gensim.matutils.(docid, termid, val)->gensim.utils.to_unicode(line).split()
A:gensim.matutils.fin->gensim.utils.smart_open(self.input)
gensim.matutils.Dense2Corpus(self,dense,documents_columns=True)
gensim.matutils.Dense2Corpus.__init__(self,dense,documents_columns=True)
gensim.matutils.Dense2Corpus.__iter__(self)
gensim.matutils.Dense2Corpus.__len__(self)
gensim.matutils.MmReader(self,input,transposed=True)
gensim.matutils.MmReader.__init__(self,input,transposed=True)
gensim.matutils.MmReader.__iter__(self)
gensim.matutils.MmReader.__len__(self)
gensim.matutils.MmReader.__str__(self)
gensim.matutils.MmReader.docbyoffset(self,offset)
gensim.matutils.MmReader.skip_headers(self,input_file)
gensim.matutils.MmWriter(self,fname)
gensim.matutils.MmWriter.__del__(self)
gensim.matutils.MmWriter.__init__(self,fname)
gensim.matutils.MmWriter.close(self)
gensim.matutils.MmWriter.fake_headers(self,num_docs,num_terms,num_nnz)
gensim.matutils.MmWriter.write_corpus(fname,corpus,progress_cnt=1000,index=False,num_terms=None,metadata=False)
gensim.matutils.MmWriter.write_headers(self,num_docs,num_terms,num_nnz)
gensim.matutils.MmWriter.write_vector(self,docno,vector)
gensim.matutils.Scipy2Corpus(self,vecs)
gensim.matutils.Scipy2Corpus.__init__(self,vecs)
gensim.matutils.Scipy2Corpus.__iter__(self)
gensim.matutils.Scipy2Corpus.__len__(self)
gensim.matutils.Sparse2Corpus(self,sparse,documents_columns=True)
gensim.matutils.Sparse2Corpus.__init__(self,sparse,documents_columns=True)
gensim.matutils.Sparse2Corpus.__iter__(self)
gensim.matutils.Sparse2Corpus.__len__(self)
gensim.matutils.any2sparse(vec,eps=1e-09)
gensim.matutils.argsort(x,topn=None,reverse=False)
gensim.matutils.corpus2csc(corpus,num_terms=None,dtype=numpy.float64,num_docs=None,num_nnz=None,printprogress=0)
gensim.matutils.corpus2dense(corpus,num_terms,num_docs=None,dtype=numpy.float32)
gensim.matutils.cossim(vec1,vec2)
gensim.matutils.full2sparse(vec,eps=1e-09)
gensim.matutils.full2sparse_clipped(vec,topn,eps=1e-09)
gensim.matutils.ismatrix(m)
gensim.matutils.pad(mat,padrow,padcol)
gensim.matutils.qr_destroy(la)
gensim.matutils.scipy2sparse(vec,eps=1e-09)
gensim.matutils.sparse2full(doc,length)
gensim.matutils.unitvec(vec)
gensim.matutils.veclen(vec)
gensim.matutils.zeros_aligned(shape,dtype,order='C',align=128)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/interfaces.py----------------------------------------
A:gensim.interfaces.logger->logging.getLogger('gensim.interfaces')
A:gensim.interfaces.fmt->str(doc)
A:gensim.interfaces.(is_corpus, query)->gensim.utils.is_corpus(query)
A:gensim.interfaces.query->gensim.matutils.unitvec(query)
A:gensim.interfaces.result->self.get_similarities(query)
A:gensim.interfaces.chunk_end->min(self.index.shape[0], chunk_start + self.chunksize)
gensim.interfaces.CorpusABC(utils.SaveLoad)
gensim.interfaces.CorpusABC.__iter__(self)
gensim.interfaces.CorpusABC.__len__(self)
gensim.interfaces.CorpusABC.save(self,*args,**kwargs)
gensim.interfaces.CorpusABC.save_corpus(fname,corpus,id2word=None,metadata=False)
gensim.interfaces.SimilarityABC(self,corpus)
gensim.interfaces.SimilarityABC.__getitem__(self,query)
gensim.interfaces.SimilarityABC.__init__(self,corpus)
gensim.interfaces.SimilarityABC.__iter__(self)
gensim.interfaces.SimilarityABC.get_similarities(self,doc)
gensim.interfaces.TransformationABC(utils.SaveLoad)
gensim.interfaces.TransformationABC.__getitem__(self,vec)
gensim.interfaces.TransformationABC._apply(self,corpus,chunksize=None)
gensim.interfaces.TransformedCorpus(self,obj,corpus,chunksize=None)
gensim.interfaces.TransformedCorpus.__getitem__(self,docno)
gensim.interfaces.TransformedCorpus.__init__(self,obj,corpus,chunksize=None)
gensim.interfaces.TransformedCorpus.__iter__(self)
gensim.interfaces.TransformedCorpus.__len__(self)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/__init__.py----------------------------------------
A:gensim.__init__.logger->logging.getLogger('gensim')
gensim.__init__.NullHandler(logging.Handler)
gensim.__init__.NullHandler.emit(self,record)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/nosy.py----------------------------------------
A:gensim.nosy.stats->os.stat(os.path.join(root, f))
A:gensim.nosy.val->checkSum()
gensim.nosy.checkSum()


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/scripts/make_wiki_online_nodebug.py----------------------------------------
A:gensim.scripts.make_wiki_online_nodebug.program->os.path.basename(sys.argv[0])
A:gensim.scripts.make_wiki_online_nodebug.logger->logging.getLogger(program)
A:gensim.scripts.make_wiki_online_nodebug.keep_words->int(sys.argv[3])
A:gensim.scripts.make_wiki_online_nodebug.dictionary->gensim.corpora.Dictionary.load_from_text(outp + '_wordids.txt.bz2')
A:gensim.scripts.make_wiki_online_nodebug.wiki->WikiCorpus(inp, lemmatize=lemmatize)
A:gensim.scripts.make_wiki_online_nodebug.mm->MmCorpus(outp + '_bow.mm')
A:gensim.scripts.make_wiki_online_nodebug.tfidf->TfidfModel(mm, id2word=dictionary, normalize=True)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/scripts/make_wiki.py----------------------------------------
A:gensim.scripts.make_wiki.program->os.path.basename(sys.argv[0])
A:gensim.scripts.make_wiki.logger->logging.getLogger(program)
A:gensim.scripts.make_wiki.keep_words->int(sys.argv[3])
A:gensim.scripts.make_wiki.dictionary->gensim.corpora.Dictionary.load_from_text(outp + '_wordids.txt.bz2')
A:gensim.scripts.make_wiki.wiki->WikiCorpus(inp, lemmatize=lemmatize)
A:gensim.scripts.make_wiki.mm->MmCorpus(outp + '_bow.mm')
A:gensim.scripts.make_wiki.tfidf->TfidfModel(mm, id2word=dictionary, normalize=True)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/scripts/make_wiki_online.py----------------------------------------
A:gensim.scripts.make_wiki_online.program->os.path.basename(sys.argv[0])
A:gensim.scripts.make_wiki_online.logger->logging.getLogger(program)
A:gensim.scripts.make_wiki_online.keep_words->int(sys.argv[3])
A:gensim.scripts.make_wiki_online.dictionary->gensim.corpora.Dictionary.load_from_text(outp + '_wordids.txt.bz2')
A:gensim.scripts.make_wiki_online.wiki->WikiCorpus(inp, lemmatize=lemmatize)
A:gensim.scripts.make_wiki_online.mm->MmCorpus(outp + '_bow.mm')
A:gensim.scripts.make_wiki_online.tfidf->TfidfModel(mm, id2word=dictionary, normalize=True)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/scripts/make_wiki_lemma.py----------------------------------------
A:gensim.scripts.make_wiki_lemma.program->os.path.basename(sys.argv[0])
A:gensim.scripts.make_wiki_lemma.logger->logging.getLogger(program)
A:gensim.scripts.make_wiki_lemma.keep_words->int(sys.argv[3])
A:gensim.scripts.make_wiki_lemma.dictionary->gensim.corpora.Dictionary.load_from_text(outp + '_wordids.txt.bz2')
A:gensim.scripts.make_wiki_lemma.wiki->WikiCorpus(inp, lemmatize=lemmatize)
A:gensim.scripts.make_wiki_lemma.mm->MmCorpus(outp + '_bow.mm')
A:gensim.scripts.make_wiki_lemma.tfidf->TfidfModel(mm, id2word=dictionary, normalize=True)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/scripts/make_wikicorpus.py----------------------------------------
A:gensim.scripts.make_wikicorpus.program->os.path.basename(sys.argv[0])
A:gensim.scripts.make_wikicorpus.logger->logging.getLogger(program)
A:gensim.scripts.make_wikicorpus.keep_words->int(sys.argv[3])
A:gensim.scripts.make_wikicorpus.dictionary->gensim.corpora.Dictionary.load_from_text(outp + '_wordids.txt.bz2')
A:gensim.scripts.make_wikicorpus.wiki->WikiCorpus(inp, lemmatize=lemmatize)
A:gensim.scripts.make_wikicorpus.mm->MmCorpus(outp + '_bow.mm')
A:gensim.scripts.make_wikicorpus.tfidf->TfidfModel(mm, id2word=dictionary, normalize=True)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/scripts/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/scripts/make_wiki_online_lemma.py----------------------------------------
A:gensim.scripts.make_wiki_online_lemma.program->os.path.basename(sys.argv[0])
A:gensim.scripts.make_wiki_online_lemma.logger->logging.getLogger(program)
A:gensim.scripts.make_wiki_online_lemma.keep_words->int(sys.argv[3])
A:gensim.scripts.make_wiki_online_lemma.dictionary->gensim.corpora.Dictionary.load_from_text(outp + '_wordids.txt.bz2')
A:gensim.scripts.make_wiki_online_lemma.wiki->WikiCorpus(inp, lemmatize=lemmatize)
A:gensim.scripts.make_wiki_online_lemma.mm->MmCorpus(outp + '_bow.mm')
A:gensim.scripts.make_wiki_online_lemma.tfidf->TfidfModel(mm, id2word=dictionary, normalize=True)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/corpora/malletcorpus.py----------------------------------------
A:gensim.corpora.malletcorpus.logger->logging.getLogger('gensim.corpora.malletcorpus')
A:gensim.corpora.malletcorpus.result->sum([1 for x in fin])
A:gensim.corpora.malletcorpus.doc->super(MalletCorpus, self).line2doc(' '.join(words))
A:gensim.corpora.malletcorpus.id2word->gensim.utils.dict_from_corpus(corpus)
gensim.corpora.MalletCorpus(self,fname,id2word=None,metadata=False)
gensim.corpora.MalletCorpus.__iter__(self)
gensim.corpora.MalletCorpus._calculate_num_docs(self)
gensim.corpora.MalletCorpus.docbyoffset(self,offset)
gensim.corpora.MalletCorpus.line2doc(self,line)
gensim.corpora.MalletCorpus.save_corpus(fname,corpus,id2word=None,metadata=False)
gensim.corpora.malletcorpus.MalletCorpus(self,fname,id2word=None,metadata=False)
gensim.corpora.malletcorpus.MalletCorpus.__init__(self,fname,id2word=None,metadata=False)
gensim.corpora.malletcorpus.MalletCorpus.__iter__(self)
gensim.corpora.malletcorpus.MalletCorpus._calculate_num_docs(self)
gensim.corpora.malletcorpus.MalletCorpus.docbyoffset(self,offset)
gensim.corpora.malletcorpus.MalletCorpus.line2doc(self,line)
gensim.corpora.malletcorpus.MalletCorpus.save_corpus(fname,corpus,id2word=None,metadata=False)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/corpora/svmlightcorpus.py----------------------------------------
A:gensim.corpora.svmlightcorpus.logger->logging.getLogger('gensim.corpora.svmlightcorpus')
A:gensim.corpora.svmlightcorpus.doc->self.line2doc(line)
A:gensim.corpora.svmlightcorpus.line->line[:line.find('#')].strip()
A:gensim.corpora.svmlightcorpus.parts->line[:line.find('#')].strip().split()
A:gensim.corpora.svmlightcorpus.pairs->' '.join(('%i:%s' % (termid + 1, termval) for (termid, termval) in doc))
gensim.corpora.SvmLightCorpus(self,fname,store_labels=True)
gensim.corpora.SvmLightCorpus.__iter__(self)
gensim.corpora.SvmLightCorpus.doc2line(doc,label=0)
gensim.corpora.SvmLightCorpus.docbyoffset(self,offset)
gensim.corpora.SvmLightCorpus.line2doc(self,line)
gensim.corpora.SvmLightCorpus.save_corpus(fname,corpus,id2word=None,labels=False,metadata=False)
gensim.corpora.svmlightcorpus.SvmLightCorpus(self,fname,store_labels=True)
gensim.corpora.svmlightcorpus.SvmLightCorpus.__init__(self,fname,store_labels=True)
gensim.corpora.svmlightcorpus.SvmLightCorpus.__iter__(self)
gensim.corpora.svmlightcorpus.SvmLightCorpus.doc2line(doc,label=0)
gensim.corpora.svmlightcorpus.SvmLightCorpus.docbyoffset(self,offset)
gensim.corpora.svmlightcorpus.SvmLightCorpus.line2doc(self,line)
gensim.corpora.svmlightcorpus.SvmLightCorpus.save_corpus(fname,corpus,id2word=None,labels=False,metadata=False)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/corpora/textcorpus.py----------------------------------------
A:gensim.corpora.textcorpus.logger->logging.getLogger('gensim.corpora.textcorpus')
A:gensim.corpora.textcorpus.self.dictionary->Dictionary()
A:gensim.corpora.textcorpus.self.length->sum((1 for _ in self.get_texts()))
gensim.corpora.TextCorpus(self,input=None)
gensim.corpora.TextCorpus.__iter__(self)
gensim.corpora.TextCorpus.__len__(self)
gensim.corpora.TextCorpus.get_texts(self)
gensim.corpora.TextCorpus.getstream(self)
gensim.corpora.textcorpus.TextCorpus(self,input=None)
gensim.corpora.textcorpus.TextCorpus.__init__(self,input=None)
gensim.corpora.textcorpus.TextCorpus.__iter__(self)
gensim.corpora.textcorpus.TextCorpus.__len__(self)
gensim.corpora.textcorpus.TextCorpus.get_texts(self)
gensim.corpora.textcorpus.TextCorpus.getstream(self)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/corpora/hashdictionary.py----------------------------------------
A:gensim.corpora.hashdictionary.logger->logging.getLogger('gensim.corpora.hashdictionary')
A:gensim.corpora.hashdictionary._->self.doc2bow(document, allow_update=True)
A:gensim.corpora.hashdictionary.document->sorted(document)
A:gensim.corpora.hashdictionary.frequency->len(list(group))
A:gensim.corpora.hashdictionary.tokenid->self.restricted_hash(word_norm)
A:gensim.corpora.hashdictionary.result->sorted(iteritems(result))
A:gensim.corpora.hashdictionary.no_above_abs->int(no_above * self.num_docs)
A:gensim.corpora.hashdictionary.ok->frozenset((word for (word, freq) in sorted(ok, key=lambda item: -item[1])[:keep_n]))
A:gensim.corpora.hashdictionary.self.dfs_debug->dict(((word, freq) for (word, freq) in iteritems(self.dfs_debug) if word in ok))
A:gensim.corpora.hashdictionary.self.token2id->dict(((token, tokenid) for (token, tokenid) in iteritems(self.token2id) if token in self.dfs_debug))
A:gensim.corpora.hashdictionary.self.id2token->dict(((tokenid, set((token for token in tokens if token in self.dfs_debug))) for (tokenid, tokens) in iteritems(self.id2token)))
A:gensim.corpora.hashdictionary.self.dfs->dict(((tokenid, freq) for (tokenid, freq) in iteritems(self.dfs) if self.id2token.get(tokenid, set())))
A:gensim.corpora.hashdictionary.words->sorted(self[tokenid])
gensim.corpora.HashDictionary(self,documents=None,id_range=32000,myhash=zlib.adler32,debug=True)
gensim.corpora.HashDictionary.__getitem__(self,tokenid)
gensim.corpora.HashDictionary.__len__(self)
gensim.corpora.HashDictionary.__str__(self)
gensim.corpora.HashDictionary.add_documents(self,documents)
gensim.corpora.HashDictionary.doc2bow(self,document,allow_update=False,return_missing=False)
gensim.corpora.HashDictionary.filter_extremes(self,no_below=5,no_above=0.5,keep_n=100000)
gensim.corpora.HashDictionary.from_documents(*args,**kwargs)
gensim.corpora.HashDictionary.keys(self)
gensim.corpora.HashDictionary.restricted_hash(self,token)
gensim.corpora.HashDictionary.save_as_text(self,fname)
gensim.corpora.hashdictionary.HashDictionary(self,documents=None,id_range=32000,myhash=zlib.adler32,debug=True)
gensim.corpora.hashdictionary.HashDictionary.__getitem__(self,tokenid)
gensim.corpora.hashdictionary.HashDictionary.__init__(self,documents=None,id_range=32000,myhash=zlib.adler32,debug=True)
gensim.corpora.hashdictionary.HashDictionary.__len__(self)
gensim.corpora.hashdictionary.HashDictionary.__str__(self)
gensim.corpora.hashdictionary.HashDictionary.add_documents(self,documents)
gensim.corpora.hashdictionary.HashDictionary.doc2bow(self,document,allow_update=False,return_missing=False)
gensim.corpora.hashdictionary.HashDictionary.filter_extremes(self,no_below=5,no_above=0.5,keep_n=100000)
gensim.corpora.hashdictionary.HashDictionary.from_documents(*args,**kwargs)
gensim.corpora.hashdictionary.HashDictionary.keys(self)
gensim.corpora.hashdictionary.HashDictionary.restricted_hash(self,token)
gensim.corpora.hashdictionary.HashDictionary.save_as_text(self,fname)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/corpora/lowcorpus.py----------------------------------------
A:gensim.corpora.lowcorpus.logger->logging.getLogger('gensim.corpora.lowcorpus')
A:gensim.corpora.lowcorpus.self.num_docs->self._calculate_num_docs()
A:gensim.corpora.lowcorpus.all_terms->sorted(all_terms)
A:gensim.corpora.lowcorpus.self.id2word->dict(izip(xrange(len(all_terms)), all_terms))
A:gensim.corpora.lowcorpus.self.num_terms->len(self.word2id)
A:gensim.corpora.lowcorpus.result->int(next(fin))
A:gensim.corpora.lowcorpus.words->self.line2words(line)
A:gensim.corpora.lowcorpus.uniq_words->set(words)
A:gensim.corpora.lowcorpus.doc->list(zip(uniq_words, map(words.count, uniq_words)))
A:gensim.corpora.lowcorpus.id2word->gensim.utils.dict_from_corpus(corpus)
A:gensim.corpora.lowcorpus.self.word2id->dict(((v, k) for (k, v) in iteritems(val)))
gensim.corpora.LowCorpus(self,fname,id2word=None,line2words=split_on_space)
gensim.corpora.LowCorpus.__iter__(self)
gensim.corpora.LowCorpus.__len__(self)
gensim.corpora.LowCorpus._calculate_num_docs(self)
gensim.corpora.LowCorpus.docbyoffset(self,offset)
gensim.corpora.LowCorpus.id2word(self)
gensim.corpora.LowCorpus.id2word(self,val)
gensim.corpora.LowCorpus.line2doc(self,line)
gensim.corpora.LowCorpus.save_corpus(fname,corpus,id2word=None,metadata=False)
gensim.corpora.lowcorpus.LowCorpus(self,fname,id2word=None,line2words=split_on_space)
gensim.corpora.lowcorpus.LowCorpus.__init__(self,fname,id2word=None,line2words=split_on_space)
gensim.corpora.lowcorpus.LowCorpus.__iter__(self)
gensim.corpora.lowcorpus.LowCorpus.__len__(self)
gensim.corpora.lowcorpus.LowCorpus._calculate_num_docs(self)
gensim.corpora.lowcorpus.LowCorpus.docbyoffset(self,offset)
gensim.corpora.lowcorpus.LowCorpus.id2word(self)
gensim.corpora.lowcorpus.LowCorpus.id2word(self,val)
gensim.corpora.lowcorpus.LowCorpus.line2doc(self,line)
gensim.corpora.lowcorpus.LowCorpus.save_corpus(fname,corpus,id2word=None,metadata=False)
gensim.corpora.lowcorpus.split_on_space(s)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/corpora/sharded_corpus.py----------------------------------------
A:gensim.corpora.sharded_corpus.logger->logging.getLogger(__name__)
A:gensim.corpora.sharded_corpus.proposed_dim->self._guess_n_features(corpus)
A:gensim.corpora.sharded_corpus.start_time->time.clock()
A:gensim.corpora.sharded_corpus.current_shard->scipy.sparse.csr_matrix(current_shard)
A:gensim.corpora.sharded_corpus.doc->dict(doc)
A:gensim.corpora.sharded_corpus.current_shard[i][list(doc)]->list(gensim.matutils.itervalues(doc))
A:gensim.corpora.sharded_corpus.end_time->time.clock()
A:gensim.corpora.sharded_corpus.temp->self.__class__.load(self.output_prefix)
A:gensim.corpora.sharded_corpus.filename->self._shard_name(n)
A:gensim.corpora.sharded_corpus.shard->gensim.utils.unpickle(filename)
A:gensim.corpora.sharded_corpus.k->int(offset / self.shardsize)
A:gensim.corpora.sharded_corpus.n_new_shards->int(math.floor(self.n_docs / float(shardsize)))
A:gensim.corpora.sharded_corpus.new_shard_name->self._resized_shard_name(new_shard_idx)
A:gensim.corpora.sharded_corpus.n_features->len(corpus.dictionary)
A:gensim.corpora.sharded_corpus.shard_n->self.shard_by_offset(offset)
A:gensim.corpora.sharded_corpus.l_result->scipy.sparse.csr_matrix(l_result)
A:gensim.corpora.sharded_corpus.first_shard->self.shard_by_offset(start)
A:gensim.corpora.sharded_corpus.last_shard->self.shard_by_offset(stop)
A:gensim.corpora.sharded_corpus.s_result->scipy.sparse.csr_matrix(s_result)
A:gensim.corpora.sharded_corpus.output->gensim.matutils.full2sparse(result)
A:gensim.corpora.sharded_corpus.args->tuple([self.output_prefix])
A:gensim.corpora.sharded_corpus.kwargs['ignore']->frozenset([v for v in kwargs['ignore']] + attrs_to_ignore)
gensim.corpora.ShardedCorpus(self,output_prefix,corpus,dim=None,shardsize=4096,overwrite=False,sparse_serialization=False,sparse_retrieval=False,gensim=False)
gensim.corpora.ShardedCorpus.__add_to_slice(self,s_result,result_start,result_stop,start,stop)
gensim.corpora.ShardedCorpus.__getitem__(self,offset)
gensim.corpora.ShardedCorpus.__iter__(self)
gensim.corpora.ShardedCorpus.__len__(self)
gensim.corpora.ShardedCorpus._ensure_shard(self,offset)
gensim.corpora.ShardedCorpus._getitem_dense2gensim(self,result)
gensim.corpora.ShardedCorpus._getitem_format(self,s_result)
gensim.corpora.ShardedCorpus._getitem_sparse2gensim(self,result)
gensim.corpora.ShardedCorpus._guess_n_features(self,corpus)
gensim.corpora.ShardedCorpus._resized_shard_name(self,n)
gensim.corpora.ShardedCorpus._shard_name(self,n)
gensim.corpora.ShardedCorpus.get_by_offset(self,offset)
gensim.corpora.ShardedCorpus.in_current(self,offset)
gensim.corpora.ShardedCorpus.in_next(self,offset)
gensim.corpora.ShardedCorpus.init_by_clone(self)
gensim.corpora.ShardedCorpus.init_shards(self,output_prefix,corpus,shardsize=4096,dtype=_default_dtype)
gensim.corpora.ShardedCorpus.load(cls,fname,mmap=None)
gensim.corpora.ShardedCorpus.load_shard(self,n)
gensim.corpora.ShardedCorpus.reset(self)
gensim.corpora.ShardedCorpus.resize_shards(self,shardsize)
gensim.corpora.ShardedCorpus.save(self,*args,**kwargs)
gensim.corpora.ShardedCorpus.save_corpus(fname,corpus,id2word=None,progress_cnt=1000,metadata=False,**kwargs)
gensim.corpora.ShardedCorpus.save_shard(self,shard,n=None,filename=None)
gensim.corpora.ShardedCorpus.serialize(serializer,fname,corpus,id2word=None,index_fname=None,progress_cnt=None,labels=None,metadata=False,**kwargs)
gensim.corpora.ShardedCorpus.shard_by_offset(self,offset)
gensim.corpora.sharded_corpus.ShardedCorpus(self,output_prefix,corpus,dim=None,shardsize=4096,overwrite=False,sparse_serialization=False,sparse_retrieval=False,gensim=False)
gensim.corpora.sharded_corpus.ShardedCorpus.__add_to_slice(self,s_result,result_start,result_stop,start,stop)
gensim.corpora.sharded_corpus.ShardedCorpus.__getitem__(self,offset)
gensim.corpora.sharded_corpus.ShardedCorpus.__init__(self,output_prefix,corpus,dim=None,shardsize=4096,overwrite=False,sparse_serialization=False,sparse_retrieval=False,gensim=False)
gensim.corpora.sharded_corpus.ShardedCorpus.__iter__(self)
gensim.corpora.sharded_corpus.ShardedCorpus.__len__(self)
gensim.corpora.sharded_corpus.ShardedCorpus._ensure_shard(self,offset)
gensim.corpora.sharded_corpus.ShardedCorpus._getitem_dense2gensim(self,result)
gensim.corpora.sharded_corpus.ShardedCorpus._getitem_format(self,s_result)
gensim.corpora.sharded_corpus.ShardedCorpus._getitem_sparse2gensim(self,result)
gensim.corpora.sharded_corpus.ShardedCorpus._guess_n_features(self,corpus)
gensim.corpora.sharded_corpus.ShardedCorpus._resized_shard_name(self,n)
gensim.corpora.sharded_corpus.ShardedCorpus._shard_name(self,n)
gensim.corpora.sharded_corpus.ShardedCorpus.get_by_offset(self,offset)
gensim.corpora.sharded_corpus.ShardedCorpus.in_current(self,offset)
gensim.corpora.sharded_corpus.ShardedCorpus.in_next(self,offset)
gensim.corpora.sharded_corpus.ShardedCorpus.init_by_clone(self)
gensim.corpora.sharded_corpus.ShardedCorpus.init_shards(self,output_prefix,corpus,shardsize=4096,dtype=_default_dtype)
gensim.corpora.sharded_corpus.ShardedCorpus.load(cls,fname,mmap=None)
gensim.corpora.sharded_corpus.ShardedCorpus.load_shard(self,n)
gensim.corpora.sharded_corpus.ShardedCorpus.reset(self)
gensim.corpora.sharded_corpus.ShardedCorpus.resize_shards(self,shardsize)
gensim.corpora.sharded_corpus.ShardedCorpus.save(self,*args,**kwargs)
gensim.corpora.sharded_corpus.ShardedCorpus.save_corpus(fname,corpus,id2word=None,progress_cnt=1000,metadata=False,**kwargs)
gensim.corpora.sharded_corpus.ShardedCorpus.save_shard(self,shard,n=None,filename=None)
gensim.corpora.sharded_corpus.ShardedCorpus.serialize(serializer,fname,corpus,id2word=None,index_fname=None,progress_cnt=None,labels=None,metadata=False,**kwargs)
gensim.corpora.sharded_corpus.ShardedCorpus.shard_by_offset(self,offset)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/corpora/bleicorpus.py----------------------------------------
A:gensim.corpora.bleicorpus.logger->logging.getLogger('gensim.corpora.bleicorpus')
A:gensim.corpora.bleicorpus.(fname_base, _)->os.path.splitext(fname)
A:gensim.corpora.bleicorpus.fname_dir->os.path.dirname(fname)
A:gensim.corpora.bleicorpus.self.id2word->dict(enumerate(words))
A:gensim.corpora.bleicorpus.parts->gensim.utils.to_unicode(line).split()
A:gensim.corpora.bleicorpus.id2word->gensim.utils.dict_from_corpus(corpus)
A:gensim.corpora.bleicorpus.num_terms->len(id2word)
A:gensim.corpora.bleicorpus.doc->list(doc)
A:gensim.corpora.bleicorpus.fname_vocab->gensim.utils.smart_extension(fname, '.vocab')
gensim.corpora.BleiCorpus(self,fname,fname_vocab=None)
gensim.corpora.BleiCorpus.__iter__(self)
gensim.corpora.BleiCorpus.docbyoffset(self,offset)
gensim.corpora.BleiCorpus.line2doc(self,line)
gensim.corpora.BleiCorpus.save_corpus(fname,corpus,id2word=None,metadata=False)
gensim.corpora.bleicorpus.BleiCorpus(self,fname,fname_vocab=None)
gensim.corpora.bleicorpus.BleiCorpus.__init__(self,fname,fname_vocab=None)
gensim.corpora.bleicorpus.BleiCorpus.__iter__(self)
gensim.corpora.bleicorpus.BleiCorpus.docbyoffset(self,offset)
gensim.corpora.bleicorpus.BleiCorpus.line2doc(self,line)
gensim.corpora.bleicorpus.BleiCorpus.save_corpus(fname,corpus,id2word=None,metadata=False)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/corpora/mmcorpus.py----------------------------------------
A:gensim.corpora.mmcorpus.logger->logging.getLogger('gensim.corpora.mmcorpus')
gensim.corpora.MmCorpus(self,fname)
gensim.corpora.MmCorpus.__iter__(self)
gensim.corpora.MmCorpus.save_corpus(fname,corpus,id2word=None,progress_cnt=1000,metadata=False)
gensim.corpora.mmcorpus.MmCorpus(self,fname)
gensim.corpora.mmcorpus.MmCorpus.__init__(self,fname)
gensim.corpora.mmcorpus.MmCorpus.__iter__(self)
gensim.corpora.mmcorpus.MmCorpus.save_corpus(fname,corpus,id2word=None,progress_cnt=1000,metadata=False)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/corpora/ucicorpus.py----------------------------------------
A:gensim.corpora.ucicorpus.logger->logging.getLogger('gensim.corpora.ucicorpus')
A:gensim.corpora.ucicorpus.self.num_docs->int(next(fin).strip())
A:gensim.corpora.ucicorpus.self.num_terms->int(next(fin).strip())
A:gensim.corpora.ucicorpus.self.num_nnz->int(next(fin).strip())
A:gensim.corpora.ucicorpus.FAKE_HEADER->gensim.utils.to_utf8(' ' * MAX_HEADER_LENGTH + '\n')
A:gensim.corpora.ucicorpus.writer->UciWriter(fname)
A:gensim.corpora.ucicorpus.posnow->UciWriter(fname).fout.tell()
A:gensim.corpora.ucicorpus.(max_id, veclen)->UciWriter(fname).write_vector(docno, vector)
A:gensim.corpora.ucicorpus.num_terms->len(id2word)
A:gensim.corpora.ucicorpus.fname_vocab->gensim.utils.smart_extension(fname, '.vocab')
A:gensim.corpora.ucicorpus.self.id2word->dict(enumerate(words))
A:gensim.corpora.ucicorpus.dictionary->Dictionary()
A:gensim.corpora.ucicorpus.dictionary.dfs->defaultdict(int)
A:gensim.corpora.ucicorpus.dictionary.token2id->dict(((v, k) for (k, v) in iteritems(self.id2word)))
A:gensim.corpora.ucicorpus.id2word->gensim.utils.dict_from_corpus(corpus)
gensim.corpora.UciCorpus(self,fname,fname_vocab=None)
gensim.corpora.UciCorpus.__iter__(self)
gensim.corpora.UciCorpus.create_dictionary(self)
gensim.corpora.UciCorpus.save_corpus(fname,corpus,id2word=None,progress_cnt=10000,metadata=False)
gensim.corpora.ucicorpus.UciCorpus(self,fname,fname_vocab=None)
gensim.corpora.ucicorpus.UciCorpus.__init__(self,fname,fname_vocab=None)
gensim.corpora.ucicorpus.UciCorpus.__iter__(self)
gensim.corpora.ucicorpus.UciCorpus.create_dictionary(self)
gensim.corpora.ucicorpus.UciCorpus.save_corpus(fname,corpus,id2word=None,progress_cnt=10000,metadata=False)
gensim.corpora.ucicorpus.UciReader(self,input)
gensim.corpora.ucicorpus.UciReader.__init__(self,input)
gensim.corpora.ucicorpus.UciReader.skip_headers(self,input_file)
gensim.corpora.ucicorpus.UciWriter(MmWriter)
gensim.corpora.ucicorpus.UciWriter.update_headers(self,num_docs,num_terms,num_nnz)
gensim.corpora.ucicorpus.UciWriter.write_corpus(fname,corpus,progress_cnt=1000,index=False)
gensim.corpora.ucicorpus.UciWriter.write_headers(self)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/corpora/csvcorpus.py----------------------------------------
A:gensim.corpora.csvcorpus.logger->logging.getLogger('gensim.corpora.csvcorpus')
A:gensim.corpora.csvcorpus.head->''.join(itertools.islice(utils.smart_open(self.fname), 5))
A:gensim.corpora.csvcorpus.self.headers->csv.Sniffer().has_header(head)
A:gensim.corpora.csvcorpus.self.dialect->csv.Sniffer().sniff(head)
A:gensim.corpora.csvcorpus.reader->csv.reader(utils.smart_open(self.fname), self.dialect)
gensim.corpora.csvcorpus.CsvCorpus(self,fname,labels)
gensim.corpora.csvcorpus.CsvCorpus.__init__(self,fname,labels)
gensim.corpora.csvcorpus.CsvCorpus.__iter__(self)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/corpora/dictionary.py----------------------------------------
A:gensim.corpora.dictionary.logger->logging.getLogger('gensim.corpora.dictionary')
A:gensim.corpora.dictionary.self.id2token->dict(((v, k) for (k, v) in iteritems(self.token2id)))
A:gensim.corpora.dictionary.some_keys->list(itertools.islice(iterkeys(self.token2id), 5))
A:gensim.corpora.dictionary.counter->defaultdict(int)
A:gensim.corpora.dictionary.missing->dict(((w, freq) for (w, freq) in iteritems(counter) if w not in token2id))
A:gensim.corpora.dictionary.token2id[w]->len(token2id)
A:gensim.corpora.dictionary.result->Dictionary()
A:gensim.corpora.dictionary.no_above_abs->int(no_above * self.num_docs)
A:gensim.corpora.dictionary.good_ids->set(good_ids)
A:gensim.corpora.dictionary.bad_ids->set(bad_ids)
A:gensim.corpora.dictionary.self.token2id->dict(((token, idmap[tokenid]) for (token, tokenid) in iteritems(self.token2id)))
A:gensim.corpora.dictionary.self.dfs->dict(((idmap[tokenid], freq) for (tokenid, freq) in iteritems(self.dfs)))
A:gensim.corpora.dictionary.idmap->dict(izip(itervalues(self.token2id), xrange(len(self.token2id))))
A:gensim.corpora.dictionary.new_id->len(self.token2id)
A:gensim.corpora.dictionary.line->gensim.utils.to_unicode(line)
A:gensim.corpora.dictionary.(wordid, word, docfreq)->line[:-1].split('\t')
A:gensim.corpora.dictionary.wordid->int(wordid)
A:gensim.corpora.dictionary.result.dfs[wordid]->int(docfreq)
A:gensim.corpora.dictionary.max_id->max(wordid, max_id)
A:gensim.corpora.dictionary.result.token2id->dict(((utils.to_unicode(token), id) for (id, token) in iteritems(id2word)))
A:gensim.corpora.dictionary.result.dfs[id]->Dictionary().dfs.get(id, 0)
gensim.corpora.Dictionary(self,documents=None,prune_at=2000000)
gensim.corpora.Dictionary.__getitem__(self,tokenid)
gensim.corpora.Dictionary.__iter__(self)
gensim.corpora.Dictionary.__len__(self)
gensim.corpora.Dictionary.__str__(self)
gensim.corpora.Dictionary.add_documents(self,documents,prune_at=2000000)
gensim.corpora.Dictionary.compactify(self)
gensim.corpora.Dictionary.doc2bow(self,document,allow_update=False,return_missing=False)
gensim.corpora.Dictionary.filter_extremes(self,no_below=5,no_above=0.5,keep_n=100000)
gensim.corpora.Dictionary.filter_tokens(self,bad_ids=None,good_ids=None)
gensim.corpora.Dictionary.from_corpus(corpus,id2word=None)
gensim.corpora.Dictionary.from_documents(documents)
gensim.corpora.Dictionary.keys(self)
gensim.corpora.Dictionary.load_from_text(fname)
gensim.corpora.Dictionary.merge_with(self,other)
gensim.corpora.Dictionary.save_as_text(self,fname,sort_by_word=True)
gensim.corpora.dictionary.Dictionary(self,documents=None,prune_at=2000000)
gensim.corpora.dictionary.Dictionary.__getitem__(self,tokenid)
gensim.corpora.dictionary.Dictionary.__init__(self,documents=None,prune_at=2000000)
gensim.corpora.dictionary.Dictionary.__iter__(self)
gensim.corpora.dictionary.Dictionary.__len__(self)
gensim.corpora.dictionary.Dictionary.__str__(self)
gensim.corpora.dictionary.Dictionary.add_documents(self,documents,prune_at=2000000)
gensim.corpora.dictionary.Dictionary.compactify(self)
gensim.corpora.dictionary.Dictionary.doc2bow(self,document,allow_update=False,return_missing=False)
gensim.corpora.dictionary.Dictionary.filter_extremes(self,no_below=5,no_above=0.5,keep_n=100000)
gensim.corpora.dictionary.Dictionary.filter_tokens(self,bad_ids=None,good_ids=None)
gensim.corpora.dictionary.Dictionary.from_corpus(corpus,id2word=None)
gensim.corpora.dictionary.Dictionary.from_documents(documents)
gensim.corpora.dictionary.Dictionary.keys(self)
gensim.corpora.dictionary.Dictionary.load_from_text(fname)
gensim.corpora.dictionary.Dictionary.merge_with(self,other)
gensim.corpora.dictionary.Dictionary.save_as_text(self,fname,sort_by_word=True)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/corpora/wikicorpus.py----------------------------------------
A:gensim.corpora.wikicorpus.logger->logging.getLogger('gensim.corpora.wikicorpus')
A:gensim.corpora.wikicorpus.RE_P0->re.compile('<!--.*?-->', re.DOTALL | re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P1->re.compile('<ref([> ].*?)(</ref>|/>)', re.DOTALL | re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P2->re.compile('(\n\\[\\[[a-z][a-z][\\w-]*:[^:\\]]+\\]\\])+$', re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P3->re.compile('{{([^}{]*)}}', re.DOTALL | re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P4->re.compile('{{([^}]*)}}', re.DOTALL | re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P5->re.compile('\\[(\\w+):\\/\\/(.*?)(( (.*?))|())\\]', re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P6->re.compile('\\[([^][]*)\\|([^][]*)\\]', re.DOTALL | re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P7->re.compile('\n\\[\\[[iI]mage(.*?)(\\|.*?)*\\|(.*?)\\]\\]', re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P8->re.compile('\n\\[\\[[fF]ile(.*?)(\\|.*?)*\\|(.*?)\\]\\]', re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P9->re.compile('<nowiki([> ].*?)(</nowiki>|/>)', re.DOTALL | re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P10->re.compile('<math([> ].*?)(</math>|/>)', re.DOTALL | re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P11->re.compile('<(.*?)>', re.DOTALL | re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P12->re.compile('\n(({\\|)|(\\|-)|(\\|}))(.*?)(?=\n)', re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P13->re.compile('\n(\\||\\!)(.*?\\|)*([^|]*?)', re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P14->re.compile('\\[\\[Category:[^][]*\\]\\]', re.UNICODE)
A:gensim.corpora.wikicorpus.RE_P15->re.compile('\\[\\[([fF]ile:|[iI]mage)[^]]*(\\]\\])', re.UNICODE)
A:gensim.corpora.wikicorpus.text->filter_wiki(text)
A:gensim.corpora.wikicorpus.s->s.replace(m, caption, 1).replace(m, caption, 1)
A:gensim.corpora.wikicorpus.m->re.match('^{(.*?)}', tag)
A:gensim.corpora.wikicorpus.elem->next(elems)
A:gensim.corpora.wikicorpus.namespace->get_namespace(elem.tag)
A:gensim.corpora.wikicorpus.result->tokenize(text)
A:gensim.corpora.wikicorpus.processes->max(1, multiprocessing.cpu_count() - 1)
A:gensim.corpora.wikicorpus.self.dictionary->Dictionary(self.get_texts())
A:gensim.corpora.wikicorpus.pool->multiprocessing.Pool(self.processes)
A:gensim.corpora.wikicorpus.ignore_namespaces->'Wikipedia Category File Portal Template MediaWiki User Help Book Draft'.split()
gensim.corpora.WikiCorpus(self,fname,processes=None,lemmatize=utils.HAS_PATTERN,dictionary=None,filter_namespaces=('0',))
gensim.corpora.WikiCorpus.get_texts(self)
gensim.corpora.wikicorpus.WikiCorpus(self,fname,processes=None,lemmatize=utils.HAS_PATTERN,dictionary=None,filter_namespaces=('0',))
gensim.corpora.wikicorpus.WikiCorpus.__init__(self,fname,processes=None,lemmatize=utils.HAS_PATTERN,dictionary=None,filter_namespaces=('0',))
gensim.corpora.wikicorpus.WikiCorpus.get_texts(self)
gensim.corpora.wikicorpus.extract_pages(f,filter_namespaces=False)
gensim.corpora.wikicorpus.filter_wiki(raw)
gensim.corpora.wikicorpus.get_namespace(tag)
gensim.corpora.wikicorpus.process_article(args)
gensim.corpora.wikicorpus.remove_file(s)
gensim.corpora.wikicorpus.remove_markup(text)
gensim.corpora.wikicorpus.remove_template(s)
gensim.corpora.wikicorpus.tokenize(content)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/corpora/indexedcorpus.py----------------------------------------
A:gensim.corpora.indexedcorpus.logger->logging.getLogger('gensim.corpora.indexedcorpus')
A:gensim.corpora.indexedcorpus.index_fname->gensim.utils.smart_extension(fname, '.index')
A:gensim.corpora.indexedcorpus.self.index->numpy.asarray(self.index)
A:gensim.corpora.indexedcorpus.offsets->serializer.save_corpus(fname, corpus, id2word, metadata=metadata)
A:gensim.corpora.indexedcorpus.self.length->sum((1 for doc in self))
gensim.corpora.IndexedCorpus(self,fname,index_fname=None)
gensim.corpora.IndexedCorpus.__getitem__(self,docno)
gensim.corpora.IndexedCorpus.__len__(self)
gensim.corpora.IndexedCorpus.serialize(serializer,fname,corpus,id2word=None,index_fname=None,progress_cnt=None,labels=None,metadata=False)
gensim.corpora.indexedcorpus.IndexedCorpus(self,fname,index_fname=None)
gensim.corpora.indexedcorpus.IndexedCorpus.__getitem__(self,docno)
gensim.corpora.indexedcorpus.IndexedCorpus.__init__(self,fname,index_fname=None)
gensim.corpora.indexedcorpus.IndexedCorpus.__len__(self)
gensim.corpora.indexedcorpus.IndexedCorpus.serialize(serializer,fname,corpus,id2word=None,index_fname=None,progress_cnt=None,labels=None,metadata=False)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/corpora/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/test/test_corpora.py----------------------------------------
A:gensim.test.test_corpora.module_path->os.path.dirname(__file__)
A:gensim.test.test_corpora.fname->datapath('testcorpus.' + self.file_extension.lstrip('.'))
A:gensim.test.test_corpora.corpus->self.corpus_class(fname)
A:gensim.test.test_corpora.docs->list(corpus)
A:gensim.test.test_corpora.corpus2->self.corpus_class(fname)
A:gensim.test.test_corpora.firstdoc->next(iter(corpus))
A:gensim.test.test_corpora.testdoc->set(((to_unicode(corpus.id2word[x]), y) for (x, y) in firstdoc))
A:gensim.test.test_corpora.firstdoc2->next(iter(corpus))
A:gensim.test.test_corpora.testdoc2->set(((to_unicode(corpus.id2word[x]), y) for (x, y) in firstdoc2))
A:gensim.test.test_corpora.corpus_->TransformedCorpus(DummyTransformer(), corpus)
A:gensim.test.test_corpora.test_file->testfile()
A:gensim.test.test_corpora.tokens->line.split()
A:gensim.test.test_corpora.words_len->int(tokens[0])
A:gensim.test.test_corpora.(word, count)->token.split(':')
gensim.test.test_corpora.CorpusTestCase(unittest.TestCase)
gensim.test.test_corpora.CorpusTestCase.run(self,result=None)
gensim.test.test_corpora.CorpusTestCase.tearDown(self)
gensim.test.test_corpora.CorpusTestCase.test_empty_input(self)
gensim.test.test_corpora.CorpusTestCase.test_indexing(self)
gensim.test.test_corpora.CorpusTestCase.test_len(self)
gensim.test.test_corpora.CorpusTestCase.test_load(self)
gensim.test.test_corpora.CorpusTestCase.test_save(self)
gensim.test.test_corpora.CorpusTestCase.test_serialize(self)
gensim.test.test_corpora.CorpusTestCase.test_serialize_compressed(self)
gensim.test.test_corpora.CorpusTestCase.test_switch_id2word(self)
gensim.test.test_corpora.DummyTransformer(object)
gensim.test.test_corpora.DummyTransformer.__getitem__(self,bow)
gensim.test.test_corpora.TestBleiCorpus(CorpusTestCase)
gensim.test.test_corpora.TestBleiCorpus.setUp(self)
gensim.test.test_corpora.TestBleiCorpus.test_save_format_for_dtm(self)
gensim.test.test_corpora.TestLowCorpus(CorpusTestCase)
gensim.test.test_corpora.TestLowCorpus.setUp(self)
gensim.test.test_corpora.TestMalletCorpus(CorpusTestCase)
gensim.test.test_corpora.TestMalletCorpus.setUp(self)
gensim.test.test_corpora.TestMalletCorpus.test_load_with_metadata(self)
gensim.test.test_corpora.TestMmCorpus(CorpusTestCase)
gensim.test.test_corpora.TestMmCorpus.setUp(self)
gensim.test.test_corpora.TestMmCorpus.test_serialize_compressed(self)
gensim.test.test_corpora.TestSvmLightCorpus(CorpusTestCase)
gensim.test.test_corpora.TestSvmLightCorpus.setUp(self)
gensim.test.test_corpora.TestTextCorpus(CorpusTestCase)
gensim.test.test_corpora.TestTextCorpus.setUp(self)
gensim.test.test_corpora.TestTextCorpus.test_indexing(self)
gensim.test.test_corpora.TestTextCorpus.test_load_with_metadata(self)
gensim.test.test_corpora.TestTextCorpus.test_save(self)
gensim.test.test_corpora.TestTextCorpus.test_serialize(self)
gensim.test.test_corpora.TestTextCorpus.test_serialize_compressed(self)
gensim.test.test_corpora.TestUciCorpus(CorpusTestCase)
gensim.test.test_corpora.TestUciCorpus.setUp(self)
gensim.test.test_corpora.TestUciCorpus.test_serialize_compressed(self)
gensim.test.test_corpora.testfile()


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/test/test_dtm.py----------------------------------------
A:gensim.test.test_dtm.module_path->os.path.dirname(__file__)
A:gensim.test.test_dtm.self.corpus->gensim.corpora.mmcorpus.MmCorpus(datapath('dtm_test.mm'))
A:gensim.test.test_dtm.self.id2word->gensim.corpora.Dictionary.load(datapath('dtm_test.dict'))
A:gensim.test.test_dtm.self.dtm_path->os.environ.get('DTM_PATH', None)
A:gensim.test.test_dtm.model->gensim.models.wrappers.DtmModel(self.dtm_path, self.corpus, self.time_slices, num_topics=2, id2word=self.id2word, model='fixed', initialize_lda=True)
A:gensim.test.test_dtm.topics->gensim.models.wrappers.DtmModel(self.dtm_path, self.corpus, self.time_slices, num_topics=2, id2word=self.id2word, model='fixed', initialize_lda=True).show_topics(topics=2, times=2, topn=10)
gensim.test.test_dtm.TestDtmModel(unittest.TestCase)
gensim.test.test_dtm.TestDtmModel.setUp(self)
gensim.test.test_dtm.TestDtmModel.testDim(self)
gensim.test.test_dtm.TestDtmModel.testDtm(self)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/test/test_lee.py----------------------------------------
A:gensim.test.test_lee.pre_path->os.path.join(os.path.dirname(__file__), 'test_data')
A:gensim.test.test_lee.bg_corpus->preprocess_documents((latin1(line) for line in f))
A:gensim.test.test_lee.corpus->preprocess_documents((latin1(line) for line in f))
A:gensim.test.test_lee.sim_matrix->numpy.loadtxt(os.path.join(pre_path, sim_file))
A:gensim.test.test_lee.dictionary->gensim.corpora.Dictionary(bg_corpus)
A:gensim.test.test_lee.log_ent->gensim.models.LogEntropyModel(bg_corpus)
A:gensim.test.test_lee.lsi->gensim.models.LsiModel(bg_corpus_ent, id2word=dictionary, num_topics=200)
A:gensim.test.test_lee.res->numpy.zeros((len(corpus), len(corpus)))
A:gensim.test.test_lee.res[i, j]->gensim.matutils.cossim(par1, par2)
gensim.test.test_lee.TestLeeTest(unittest.TestCase)
gensim.test.test_lee.TestLeeTest.setUp(self)
gensim.test.test_lee.TestLeeTest.test_corpus(self)
gensim.test.test_lee.TestLeeTest.test_lee(self)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/test/test_doc2vec.py----------------------------------------
A:gensim.test.test_doc2vec.module_path->os.path.dirname(__file__)
A:gensim.test.test_doc2vec.list_corpus->list(DocsLeeCorpus())
A:gensim.test.test_doc2vec.model->gensim.models.doc2vec.Doc2Vec(DocsLeeCorpus(), dm=1, dm_concat=1, size=24, window=4, hs=1, negative=3, seed=42, workers=1)
A:gensim.test.test_doc2vec.corpus->gensim.utils.RepeatCorpus(DocsLeeCorpus(), 10000)
A:gensim.test.test_doc2vec.doc0_inferred->gensim.models.doc2vec.Doc2Vec(DocsLeeCorpus(), dm=1, dm_concat=1, size=24, window=4, hs=1, negative=3, seed=42, workers=1).infer_vector(list(DocsLeeCorpus())[0].words)
A:gensim.test.test_doc2vec.sims_to_infer->gensim.models.doc2vec.Doc2Vec(DocsLeeCorpus(), dm=1, dm_concat=1, size=24, window=4, hs=1, negative=3, seed=42, workers=1).docvecs.most_similar([doc0_inferred], topn=len(model.docvecs))
A:gensim.test.test_doc2vec.f_rank->[docid for (docid, sim) in sims_to_infer].index(fire1)
A:gensim.test.test_doc2vec.sims->gensim.models.doc2vec.Doc2Vec(DocsLeeCorpus(), dm=1, dm_concat=1, size=24, window=4, hs=1, negative=3, seed=42, workers=1).docvecs.most_similar(fire1, topn=len(model.docvecs))
A:gensim.test.test_doc2vec.f2_rank->[docid for (docid, sim) in sims].index(fire2)
A:gensim.test.test_doc2vec.sims2->gensim.models.doc2vec.Doc2Vec(DocsLeeCorpus(), dm=1, dm_concat=1, size=24, window=4, hs=1, negative=3, seed=42, workers=1).docvecs.most_similar(positive=[doc0_vec], topn=21)
A:gensim.test.test_doc2vec.model2->gensim.models.doc2vec.Doc2Vec(DocsLeeCorpus(), dm=1, dm_concat=1, size=24, window=4, hs=1, negative=3, seed=42, workers=1)
A:gensim.test.test_doc2vec.self.docvecs->ConcatenatedDocvecs([model.docvecs for model in models])
A:gensim.test.test_doc2vec.SentimentDocument->namedtuple('SentimentDocument', 'words tags split sentiment')
A:gensim.test.test_doc2vec.(id, text)->sentence_line.split('\t')
A:gensim.test.test_doc2vec.id->int(id)
A:gensim.test.test_doc2vec.text->text.replace(junk, fix).replace(junk, fix)
A:gensim.test.test_doc2vec.(id2, split_i)->split_line.split(',')
A:gensim.test.test_doc2vec.(text, id)->line.split('|')
A:gensim.test.test_doc2vec.phrases[int(id)]->text.replace(junk, fix).replace(junk, fix).rstrip()
A:gensim.test.test_doc2vec.SentimentPhrase->namedtuple('SentimentPhrase', SentimentDocument._fields + ('sentence_id',))
A:gensim.test.test_doc2vec.(id, sentiment)->line.split('|')
A:gensim.test.test_doc2vec.sentiment->float(sentiment)
A:gensim.test.test_doc2vec.words->text.replace(junk, fix).replace(junk, fix).split()
A:gensim.test.test_doc2vec.(sentence_id, split_i)->info_by_sentence.get(text, (None, 0))
A:gensim.test.test_doc2vec.phrases[id]->SentimentPhrase(words, [id], split, sentiment, sentence_id)
gensim.test.test_doc2vec.ConcatenatedDoc2Vec(self,models)
gensim.test.test_doc2vec.ConcatenatedDoc2Vec.__getitem__(self,token)
gensim.test.test_doc2vec.ConcatenatedDoc2Vec.__init__(self,models)
gensim.test.test_doc2vec.ConcatenatedDoc2Vec.infer_vector(self,document,alpha=0.1,min_alpha=0.0001,steps=5)
gensim.test.test_doc2vec.ConcatenatedDoc2Vec.train(self,ignored)
gensim.test.test_doc2vec.ConcatenatedDocvecs(self,models)
gensim.test.test_doc2vec.ConcatenatedDocvecs.__getitem__(self,token)
gensim.test.test_doc2vec.ConcatenatedDocvecs.__init__(self,models)
gensim.test.test_doc2vec.DocsLeeCorpus(self,string_tags=False)
gensim.test.test_doc2vec.DocsLeeCorpus.__init__(self,string_tags=False)
gensim.test.test_doc2vec.DocsLeeCorpus.__iter__(self)
gensim.test.test_doc2vec.DocsLeeCorpus._tag(self,i)
gensim.test.test_doc2vec.TestDoc2VecModel(unittest.TestCase)
gensim.test.test_doc2vec.TestDoc2VecModel.model_sanity(self,model)
gensim.test.test_doc2vec.TestDoc2VecModel.models_equal(self,model,model2)
gensim.test.test_doc2vec.TestDoc2VecModel.test_dbow_hs(self)
gensim.test.test_doc2vec.TestDoc2VecModel.test_dbow_neg(self)
gensim.test.test_doc2vec.TestDoc2VecModel.test_deterministic_dmc(self)
gensim.test.test_doc2vec.TestDoc2VecModel.test_deterministic_hs(self)
gensim.test.test_doc2vec.TestDoc2VecModel.test_deterministic_neg(self)
gensim.test.test_doc2vec.TestDoc2VecModel.test_dmc_hs(self)
gensim.test.test_doc2vec.TestDoc2VecModel.test_dmc_neg(self)
gensim.test.test_doc2vec.TestDoc2VecModel.test_dmm_hs(self)
gensim.test.test_doc2vec.TestDoc2VecModel.test_dmm_neg(self)
gensim.test.test_doc2vec.TestDoc2VecModel.test_dms_hs(self)
gensim.test.test_doc2vec.TestDoc2VecModel.test_dms_neg(self)
gensim.test.test_doc2vec.TestDoc2VecModel.test_empty_errors(self)
gensim.test.test_doc2vec.TestDoc2VecModel.test_int_doctags(self)
gensim.test.test_doc2vec.TestDoc2VecModel.test_load_mmap(self)
gensim.test.test_doc2vec.TestDoc2VecModel.test_parallel(self)
gensim.test.test_doc2vec.TestDoc2VecModel.test_persistence(self)
gensim.test.test_doc2vec.TestDoc2VecModel.test_string_doctags(self)
gensim.test.test_doc2vec.TestDoc2VecModel.test_training(self)
gensim.test.test_doc2vec.read_su_sentiment_rotten_tomatoes(dirname,lowercase=True)
gensim.test.test_doc2vec.testfile()


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/test/test_word2vec.py----------------------------------------
A:gensim.test.test_word2vec.module_path->os.path.dirname(__file__)
A:gensim.test.test_word2vec.list_corpus->list(LeeCorpus())
A:gensim.test.test_word2vec.model->gensim.models.word2vec.Word2Vec(sentences, min_count=2, seed=42, workers=1)
A:gensim.test.test_word2vec.binary_model->gensim.models.word2vec.Word2Vec.load_word2vec_format(testfile(), binary=True, norm_only=False)
A:gensim.test.test_word2vec.norm_only_model->gensim.models.word2vec.Word2Vec.load_word2vec_format(testfile(), binary=False, norm_only=True)
A:gensim.test.test_word2vec.text_model->gensim.models.word2vec.Word2Vec.load_word2vec_format(testfile(), binary=False, norm_only=False)
A:gensim.test.test_word2vec.testvocab->os.path.join(tempfile.gettempdir(), 'gensim_word2vec.vocab')
A:gensim.test.test_word2vec.binary_model_with_vocab->gensim.models.word2vec.Word2Vec.load_word2vec_format(testfile(), testvocab, binary=True)
A:gensim.test.test_word2vec.model0->gensim.models.word2vec.Word2Vec(sentences, min_count=1, workers=0)
A:gensim.test.test_word2vec.corpus->gensim.utils.RepeatCorpus(LeeCorpus(), 10000)
A:gensim.test.test_word2vec.total_words->sum((len(sentence) for sentence in corpus))
A:gensim.test.test_word2vec.sims->gensim.models.word2vec.Word2Vec(sentences, min_count=2, seed=42, workers=1).most_similar('israeli')
A:gensim.test.test_word2vec.sims2->gensim.models.word2vec.Word2Vec(sentences, min_count=2, seed=42, workers=1).most_similar(positive=[graph_vector], topn=11)
A:gensim.test.test_word2vec.model2->gensim.models.word2vec.Word2Vec(sentences, min_count=2, seed=42, workers=1)
A:gensim.test.test_word2vec.scores->gensim.models.word2vec.Word2Vec(sentences, min_count=2, seed=42, workers=1).score(sentences)
A:gensim.test.test_word2vec.locked0->numpy.copy(model.syn0[0])
A:gensim.test.test_word2vec.unlocked1->numpy.copy(model.syn0[1])
A:gensim.test.test_word2vec.orig0->numpy.copy(model.syn0[0])
A:gensim.test.test_word2vec.t_rank->[word for (word, score) in sims].index('terrorism')
A:gensim.test.test_word2vec.sentences->gensim.models.word2vec.LineSentence(fin)
gensim.test.test_word2vec.LeeCorpus(object)
gensim.test.test_word2vec.LeeCorpus.__iter__(self)
gensim.test.test_word2vec.TestWord2VecModel(unittest.TestCase)
gensim.test.test_word2vec.TestWord2VecModel.model_sanity(self,model,train=True)
gensim.test.test_word2vec.TestWord2VecModel.models_equal(self,model,model2)
gensim.test.test_word2vec.TestWord2VecModel.testLambdaRule(self)
gensim.test.test_word2vec.TestWord2VecModel.testLargeMmap(self)
gensim.test.test_word2vec.TestWord2VecModel.testLocking(self)
gensim.test.test_word2vec.TestWord2VecModel.testParallel(self)
gensim.test.test_word2vec.TestWord2VecModel.testPersistence(self)
gensim.test.test_word2vec.TestWord2VecModel.testPersistenceWithConstructorRule(self)
gensim.test.test_word2vec.TestWord2VecModel.testPersistenceWord2VecFormat(self)
gensim.test.test_word2vec.TestWord2VecModel.testPersistenceWord2VecFormatNonBinary(self)
gensim.test.test_word2vec.TestWord2VecModel.testPersistenceWord2VecFormatWithVocab(self)
gensim.test.test_word2vec.TestWord2VecModel.testRNG(self)
gensim.test.test_word2vec.TestWord2VecModel.testRule(self)
gensim.test.test_word2vec.TestWord2VecModel.testRuleWithMinCount(self)
gensim.test.test_word2vec.TestWord2VecModel.testScoring(self)
gensim.test.test_word2vec.TestWord2VecModel.testSimilarities(self)
gensim.test.test_word2vec.TestWord2VecModel.testTraining(self)
gensim.test.test_word2vec.TestWord2VecModel.testTrainingCbow(self)
gensim.test.test_word2vec.TestWord2VecModel.testTrainingCbowNegative(self)
gensim.test.test_word2vec.TestWord2VecModel.testTrainingSgNegative(self)
gensim.test.test_word2vec.TestWord2VecModel.testVocab(self)
gensim.test.test_word2vec.TestWord2VecModel.test_cbow_hs(self)
gensim.test.test_word2vec.TestWord2VecModel.test_cbow_neg(self)
gensim.test.test_word2vec.TestWord2VecModel.test_sentences_should_not_be_a_generator(self)
gensim.test.test_word2vec.TestWord2VecModel.test_sg_hs(self)
gensim.test.test_word2vec.TestWord2VecModel.test_sg_neg(self)
gensim.test.test_word2vec.TestWord2VecModel.test_zero_workers_mode(self)
gensim.test.test_word2vec.TestWord2VecSentenceIterators(unittest.TestCase)
gensim.test.test_word2vec.TestWord2VecSentenceIterators.testLineSentenceWorksWithCompressedFile(self)
gensim.test.test_word2vec.TestWord2VecSentenceIterators.testLineSentenceWorksWithFilename(self)
gensim.test.test_word2vec.TestWord2VecSentenceIterators.testLineSentenceWorksWithNormalFile(self)
gensim.test.test_word2vec.rule_for_testing(word,count,min_count)
gensim.test.test_word2vec.testfile()


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/test/test_phrases.py----------------------------------------
A:gensim.test.test_phrases.module_path->os.path.dirname(__file__)
A:gensim.test.test_phrases.bigram->Phrases(sentences, max_vocab_size=5)
A:gensim.test.test_phrases.bigram_utf8->Phrases(sentences, min_count=1, threshold=1)
A:gensim.test.test_phrases.bigram_unicode->Phrases(unicode_sentences, min_count=1, threshold=1)
A:gensim.test.test_phrases.transformed->' '.join(bigram_utf8[sentences[1]])
gensim.test.test_phrases.TestPhrasesModel(unittest.TestCase)
gensim.test.test_phrases.TestPhrasesModel.testBadParameters(self)
gensim.test.test_phrases.TestPhrasesModel.testBigramConstruction(self)
gensim.test.test_phrases.TestPhrasesModel.testEncoding(self)
gensim.test.test_phrases.TestPhrasesModel.testPruning(self)
gensim.test.test_phrases.TestPhrasesModel.testSentenceGeneration(self)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/test/test_similarities.py----------------------------------------
A:gensim.test.test_similarities.module_path->os.path.dirname(__file__)
A:gensim.test.test_similarities.dictionary->Dictionary(texts)
A:gensim.test.test_similarities.index->gensim.similarities.Similarity(None, corpus[:5], num_features=len(dictionary), shardsize=9)
A:gensim.test.test_similarities.expected->gensim.matutils.sparse2full(expected, len(index))
A:gensim.test.test_similarities.sims->gensim.matutils.sparse2full(sims, len(index))
A:gensim.test.test_similarities.fname->testfile()
A:gensim.test.test_similarities.index2->self.cls.load(fname, mmap='r')
A:gensim.test.test_similarities.index.index->gensim.similarities.Similarity(None, corpus[:5], num_features=len(dictionary), shardsize=9).index.todense()
A:gensim.test.test_similarities.index2.index->self.cls.load(fname, mmap='r').index.todense()
gensim.test.test_similarities.TestMatrixSimilarity(unittest.TestCase,_TestSimilarityABC)
gensim.test.test_similarities.TestMatrixSimilarity.setUp(self)
gensim.test.test_similarities.TestSimilarity(unittest.TestCase,_TestSimilarityABC)
gensim.test.test_similarities.TestSimilarity.setUp(self)
gensim.test.test_similarities.TestSimilarity.testMmapCompressed(self)
gensim.test.test_similarities.TestSimilarity.testReopen(self)
gensim.test.test_similarities.TestSimilarity.testSharding(self)
gensim.test.test_similarities.TestSparseMatrixSimilarity(unittest.TestCase,_TestSimilarityABC)
gensim.test.test_similarities.TestSparseMatrixSimilarity.setUp(self)
gensim.test.test_similarities._TestSimilarityABC(object)
gensim.test.test_similarities._TestSimilarityABC.testChunking(self)
gensim.test.test_similarities._TestSimilarityABC.testFull(self,num_best=None,shardsize=100)
gensim.test.test_similarities._TestSimilarityABC.testIter(self)
gensim.test.test_similarities._TestSimilarityABC.testLarge(self)
gensim.test.test_similarities._TestSimilarityABC.testLargeCompressed(self)
gensim.test.test_similarities._TestSimilarityABC.testMmap(self)
gensim.test.test_similarities._TestSimilarityABC.testMmapCompressed(self)
gensim.test.test_similarities._TestSimilarityABC.testNumBest(self)
gensim.test.test_similarities._TestSimilarityABC.testPersistency(self)
gensim.test.test_similarities._TestSimilarityABC.testPersistencyCompressed(self)
gensim.test.test_similarities.testfile()


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/test/test_summarization.py----------------------------------------
A:gensim.test.test_summarization.pre_path->os.path.join(os.path.dirname(__file__), 'test_data')
A:gensim.test.test_summarization.text->f.read()
A:gensim.test.test_summarization.generated_summary->summarize(text)
A:gensim.test.test_summarization.summary->summary.split('\n').split('\n')
A:gensim.test.test_summarization.sentences->f.read().split('\n')
A:gensim.test.test_summarization.dictionary->Dictionary(tokens)
A:gensim.test.test_summarization.selected_documents->summarize_corpus(corpus)
A:gensim.test.test_summarization.selected_docs->summarize_corpus(corpus, ratio=ratio)
A:gensim.test.test_summarization.expected_summary_length->int(len(corpus) * ratio)
gensim.test.test_summarization.TestSummarizationTest(unittest.TestCase)
gensim.test.test_summarization.TestSummarizationTest.test_corpus_summarization(self)
gensim.test.test_summarization.TestSummarizationTest.test_corpus_summarization_raises_exception_on_short_input_text(self)
gensim.test.test_summarization.TestSummarizationTest.test_corpus_summarization_ratio(self)
gensim.test.test_summarization.TestSummarizationTest.test_empty_corpus_summarization_is_none(self)
gensim.test.test_summarization.TestSummarizationTest.test_empty_text_summarization_none(self)
gensim.test.test_summarization.TestSummarizationTest.test_summary_from_unrelated_sentences(self)
gensim.test.test_summarization.TestSummarizationTest.test_text_summarization(self)
gensim.test.test_summarization.TestSummarizationTest.test_text_summarization_raises_exception_on_short_input_text(self)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/test/test_utils.py----------------------------------------
A:gensim.test.test_utils.result->gensim.utils.is_corpus(noCorpus)
A:gensim.test.test_utils.potentials->list()
gensim.test.test_utils.TestIsCorpus(unittest.TestCase)
gensim.test.test_utils.TestIsCorpus.test_None(self)
gensim.test.test_utils.TestIsCorpus.test_int_tuples(self)
gensim.test.test_utils.TestIsCorpus.test_invalid_formats(self)
gensim.test.test_utils.TestIsCorpus.test_simple_lists_of_tuples(self)
gensim.test.test_utils.TestUtils(unittest.TestCase)
gensim.test.test_utils.TestUtils.test_decode_entities(self)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/test/test_corpora_hashdictionary.py----------------------------------------
A:gensim.test.test_corpora_hashdictionary.module_path->os.path.dirname(__file__)
A:gensim.test.test_corpora_hashdictionary.d->HashDictionary(['žloťoučký koníček'.split(), 'Малйж обльйквюэ ат эжт'.split()])
A:gensim.test.test_corpora_hashdictionary.tmpf->get_tmpfile('dict_test.txt.bz2')
A:gensim.test.test_corpora_hashdictionary.d2->HashDictionary(['žloťoučký koníček'.split(), 'Малйж обльйквюэ ат эжт'.split()]).load(tmpf)
gensim.test.test_corpora_hashdictionary.TestHashDictionary(unittest.TestCase)
gensim.test.test_corpora_hashdictionary.TestHashDictionary.setUp(self)
gensim.test.test_corpora_hashdictionary.TestHashDictionary.testBuild(self)
gensim.test.test_corpora_hashdictionary.TestHashDictionary.testDebugMode(self)
gensim.test.test_corpora_hashdictionary.TestHashDictionary.testDocFreqAndToken2IdForSeveralDocsWithOneWord(self)
gensim.test.test_corpora_hashdictionary.TestHashDictionary.testDocFreqForOneDocWithSeveralWord(self)
gensim.test.test_corpora_hashdictionary.TestHashDictionary.testDocFreqOneDoc(self)
gensim.test.test_corpora_hashdictionary.TestHashDictionary.testFilter(self)
gensim.test.test_corpora_hashdictionary.TestHashDictionary.testRange(self)
gensim.test.test_corpora_hashdictionary.TestHashDictionary.test_saveAsText(self)
gensim.test.test_corpora_hashdictionary.TestHashDictionary.test_saveAsTextBz2(self)
gensim.test.test_corpora_hashdictionary.get_tmpfile(suffix)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/test/test_miislita.py----------------------------------------
A:gensim.test.test_miislita.module_path->os.path.dirname(__file__)
A:gensim.test.test_miislita.logger->logging.getLogger('test_miislita')
A:gensim.test.test_miislita.stoplist->set('for a of the and to in on'.split())
A:gensim.test.test_miislita.self.length->sum((1 for doc in self.get_texts()))
A:gensim.test.test_miislita.miislita->CorpusMiislita(datapath('miIslita.cor'))
A:gensim.test.test_miislita.ftmp->get_tmpfile('test_textcorpus.mm')
A:gensim.test.test_miislita.miislita2->CorpusMiislita.load(tmpf)
A:gensim.test.test_miislita.corpusname->datapath('miIslita.cor')
A:gensim.test.test_miislita.tmpf->get_tmpfile('tc_test.cpickle')
A:gensim.test.test_miislita.tfidf->gensim.models.TfidfModel(miislita, miislita.dictionary, normalize=False)
A:gensim.test.test_miislita.index->gensim.similarities.SparseMatrixSimilarity(tfidf[miislita], num_features=len(miislita.dictionary))
A:gensim.test.test_miislita.vec_bow->CorpusMiislita(datapath('miIslita.cor')).dictionary.doc2bow(query.lower().split())
gensim.test.test_miislita.CorpusMiislita(corpora.TextCorpus)
gensim.test.test_miislita.CorpusMiislita.__len__(self)
gensim.test.test_miislita.CorpusMiislita.get_texts(self)
gensim.test.test_miislita.TestMiislita(unittest.TestCase)
gensim.test.test_miislita.TestMiislita.test_miislita_high_level(self)
gensim.test.test_miislita.TestMiislita.test_save_load_ability(self)
gensim.test.test_miislita.TestMiislita.test_textcorpus(self)
gensim.test.test_miislita.get_tmpfile(suffix)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/test/test_parsing.py----------------------------------------
A:gensim.test.test_parsing.dataset->map(lambda x: strip_punctuation2(x.lower()), [doc1, doc2, doc3, doc4])
A:gensim.test.test_parsing.classes->numpy.array([[1, 0], [1, 0], [0, 1], [0, 1]])
gensim.test.test_parsing.TestPreprocessing(unittest.TestCase)
gensim.test.test_parsing.TestPreprocessing.testSplitAlphanum(self)
gensim.test.test_parsing.TestPreprocessing.testStemText(self)
gensim.test.test_parsing.TestPreprocessing.testStripMultipleWhitespaces(self)
gensim.test.test_parsing.TestPreprocessing.testStripNonAlphanum(self)
gensim.test.test_parsing.TestPreprocessing.testStripNumeric(self)
gensim.test.test_parsing.TestPreprocessing.testStripShort(self)
gensim.test.test_parsing.TestPreprocessing.testStripStopwords(self)
gensim.test.test_parsing.TestPreprocessing.testStripTags(self)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/test/test_models.py----------------------------------------
A:gensim.test.test_models.module_path->os.path.dirname(__file__)
A:gensim.test.test_models.dictionary->Dictionary(texts)
A:gensim.test.test_models.self.corpus->gensim.corpora.mmcorpus.MmCorpus(datapath('testcorpus.mm'))
A:gensim.test.test_models.model->gensim.models.logentropy_model.LogEntropyModel(self.corpus_ok, normalize=True)
A:gensim.test.test_models.(u, s, vt)->scipy.linalg.svd(matutils.corpus2dense(self.corpus, self.corpus.num_terms), full_matrices=False)
A:gensim.test.test_models.vec->gensim.matutils.sparse2full(transformed, 2)
A:gensim.test.test_models.expected->numpy.array([-0.70710677, 0.70710677])
A:gensim.test.test_models.got->numpy.vstack((matutils.sparse2full(doc, 2) for doc in model[self.corpus]))
A:gensim.test.test_models.corpus->list(self.corpus)
A:gensim.test.test_models.model2->gensim.models.logentropy_model.LogEntropyModel.load(fname, mmap=None)
A:gensim.test.test_models.vec1->gensim.matutils.sparse2full(model[doc], model.num_topics)
A:gensim.test.test_models.vec2->gensim.matutils.sparse2full(model2[doc], model2.num_topics)
A:gensim.test.test_models.fname->testfile()
A:gensim.test.test_models.passed->numpy.allclose(sorted(vec), sorted(expected), atol=0.01)
A:gensim.test.test_models.test_rhots->list()
A:gensim.test.test_models.msg->', '.join(map(str, [passes, model.num_updates, model.state.numdocs]))
A:gensim.test.test_models.mallet_home->os.environ.get('MALLET_HOME', None)
A:gensim.test.test_models.model1->gensim.models.tfidfmodel.TfidfModel(corpus)
A:gensim.test.test_models.self.corpus_small->gensim.corpora.mmcorpus.MmCorpus(datapath('test_corpus_small.mm'))
A:gensim.test.test_models.self.corpus_ok->gensim.corpora.mmcorpus.MmCorpus(datapath('test_corpus_ok.mm'))
gensim.test.test_models.TestLdaMallet(unittest.TestCase)
gensim.test.test_models.TestLdaMallet.setUp(self)
gensim.test.test_models.TestLdaMallet.testLargeMmap(self)
gensim.test.test_models.TestLdaMallet.testLargeMmapCompressed(self)
gensim.test.test_models.TestLdaMallet.testPersistence(self)
gensim.test.test_models.TestLdaMallet.testPersistenceCompressed(self)
gensim.test.test_models.TestLdaMallet.testTransform(self)
gensim.test.test_models.TestLdaModel(unittest.TestCase)
gensim.test.test_models.TestLdaModel.setUp(self)
gensim.test.test_models.TestLdaModel.testLargeMmap(self)
gensim.test.test_models.TestLdaModel.testLargeMmapCompressed(self)
gensim.test.test_models.TestLdaModel.testPasses(self)
gensim.test.test_models.TestLdaModel.testPersistence(self)
gensim.test.test_models.TestLdaModel.testPersistenceCompressed(self)
gensim.test.test_models.TestLdaModel.testPersistenceIgnore(self)
gensim.test.test_models.TestLdaModel.testTopTopics(self)
gensim.test.test_models.TestLdaModel.testTransform(self)
gensim.test.test_models.TestLdaMulticore(TestLdaModel)
gensim.test.test_models.TestLdaMulticore.setUp(self)
gensim.test.test_models.TestLogEntropyModel(unittest.TestCase)
gensim.test.test_models.TestLogEntropyModel.setUp(self)
gensim.test.test_models.TestLogEntropyModel.testPersistence(self)
gensim.test.test_models.TestLogEntropyModel.testPersistenceCompressed(self)
gensim.test.test_models.TestLogEntropyModel.testTransform(self)
gensim.test.test_models.TestLsiModel(unittest.TestCase)
gensim.test.test_models.TestLsiModel.setUp(self)
gensim.test.test_models.TestLsiModel.testCorpusTransform(self)
gensim.test.test_models.TestLsiModel.testLargeMmap(self)
gensim.test.test_models.TestLsiModel.testLargeMmapCompressed(self)
gensim.test.test_models.TestLsiModel.testOnlineTransform(self)
gensim.test.test_models.TestLsiModel.testPersistence(self)
gensim.test.test_models.TestLsiModel.testPersistenceCompressed(self)
gensim.test.test_models.TestLsiModel.testTransform(self)
gensim.test.test_models.TestRpModel(unittest.TestCase)
gensim.test.test_models.TestRpModel.setUp(self)
gensim.test.test_models.TestRpModel.testPersistence(self)
gensim.test.test_models.TestRpModel.testPersistenceCompressed(self)
gensim.test.test_models.TestRpModel.testTransform(self)
gensim.test.test_models.TestTfidfModel(unittest.TestCase)
gensim.test.test_models.TestTfidfModel.setUp(self)
gensim.test.test_models.TestTfidfModel.testInit(self)
gensim.test.test_models.TestTfidfModel.testPersistence(self)
gensim.test.test_models.TestTfidfModel.testPersistenceCompressed(self)
gensim.test.test_models.TestTfidfModel.testTransform(self)
gensim.test.test_models.testfile()


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/test/test_sharded_corpus.py----------------------------------------
A:gensim.test.test_sharded_corpus.self.random_string->''.join([random.choice('1234567890') for _ in xrange(8)])
A:gensim.test.test_sharded_corpus.self.tmp_fname->os.path.join(self.tmp_dir, 'shcorp.' + self.random_string + '.tmp')
A:gensim.test.test_sharded_corpus.self.data->mock_data(dim=1000)
A:gensim.test.test_sharded_corpus.self.corpus->ShardedCorpus(self.tmp_fname, self.data, dim=self.dim, shardsize=100)
A:gensim.test.test_sharded_corpus.loaded_corpus->gensim.corpora.sharded_corpus.ShardedCorpus.load(self.tmp_fname)
A:gensim.test.test_sharded_corpus.dataset->ShardedCorpus(self.tmp_fname, self.data, shardsize=100, dim=self.dim)
A:gensim.test.test_sharded_corpus.corpus->ShardedCorpus(self.tmp_fname, self.data, shardsize=100, dim=self.dim, sparse_serialization=False, gensim=True)
A:gensim.test.test_sharded_corpus.dense_corpus->ShardedCorpus(self.tmp_fname, self.data, shardsize=100, dim=self.dim, sparse_serialization=False, sparse_retrieval=False)
A:gensim.test.test_sharded_corpus.expected_nnz->sum([len(self.data[i]) for i in range(2, 6)])
A:gensim.test.test_sharded_corpus.dslice->list(dslice)
A:gensim.test.test_sharded_corpus.(iscorp, _)->is_corpus(ilist)
A:gensim.test.test_sharded_corpus.ilist->list(ilist)
A:gensim.test.test_sharded_corpus.fname->ShardedCorpus(self.tmp_fname, self.data, shardsize=100, dim=self.dim)._shard_name(n)
A:gensim.test.test_sharded_corpus.suite->unittest.TestSuite()
A:gensim.test.test_sharded_corpus.loader->unittest.TestLoader()
A:gensim.test.test_sharded_corpus.tests->unittest.TestLoader().loadTestsFromTestCase(TestShardedCorpus)
A:gensim.test.test_sharded_corpus.runner->unittest.TextTestRunner()
gensim.test.test_sharded_corpus.TestShardedCorpus(unittest.TestCase)
gensim.test.test_sharded_corpus.TestShardedCorpus.setUp(self)
gensim.test.test_sharded_corpus.TestShardedCorpus.tearDown(self)
gensim.test.test_sharded_corpus.TestShardedCorpus.test_getitem(self)
gensim.test.test_sharded_corpus.TestShardedCorpus.test_getitem_dense2dense(self)
gensim.test.test_sharded_corpus.TestShardedCorpus.test_getitem_dense2gensim(self)
gensim.test.test_sharded_corpus.TestShardedCorpus.test_getitem_dense2sparse(self)
gensim.test.test_sharded_corpus.TestShardedCorpus.test_getitem_sparse2dense(self)
gensim.test.test_sharded_corpus.TestShardedCorpus.test_getitem_sparse2sparse(self)
gensim.test.test_sharded_corpus.TestShardedCorpus.test_init(self)
gensim.test.test_sharded_corpus.TestShardedCorpus.test_load(self)
gensim.test.test_sharded_corpus.TestShardedCorpus.test_resize(self)
gensim.test.test_sharded_corpus.TestShardedCorpus.test_sparse_serialization(self)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/test/simspeed.py----------------------------------------
A:gensim.test.simspeed.program->os.path.basename(sys.argv[0])
A:gensim.test.simspeed.corpus_dense->list(itertools.islice(corpus_dense, NUMDOCS))
A:gensim.test.simspeed.corpus_sparse->list(itertools.islice(corpus_sparse, NUMDOCS))
A:gensim.test.simspeed.NUMDOCS->int(sys.argv[3])
A:gensim.test.simspeed.index_dense->gensim.similarities.MatrixSimilarity(corpus_dense)
A:gensim.test.simspeed.index_sparse->gensim.similarities.SparseMatrixSimilarity(corpus_sparse, num_terms=NUMTERMS)
A:gensim.test.simspeed.query->list(itertools.islice(corpus_sparse, 1000))
A:gensim.test.simspeed.start->time()
A:gensim.test.simspeed.queries->math.ceil(1.0 * len(corpus_sparse) / chunksize)
A:gensim.test.simspeed.sims->numpy.asarray(sims)
A:gensim.test.simspeed.diff->numpy.mean(numpy.abs(unchunksizeed - sims))


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/test/simspeed2.py----------------------------------------
A:gensim.test.simspeed2.program->os.path.basename(sys.argv[0])
A:gensim.test.simspeed2.corpus_dense->list(itertools.islice(corpus_dense, NUMDOCS))
A:gensim.test.simspeed2.corpus_sparse->list(itertools.islice(corpus_sparse, NUMDOCS))
A:gensim.test.simspeed2.NUMDOCS->int(sys.argv[3])
A:gensim.test.simspeed2.index_dense->gensim.similarities.Similarity('/tmp/tstdense', corpus_dense, dense_features)
A:gensim.test.simspeed2.index_sparse->gensim.similarities.Similarity('/tmp/tstsparse', corpus_sparse, sparse_features)
A:gensim.test.simspeed2.start->time()
A:gensim.test.simspeed2.queries->math.ceil(1.0 * len(query) / chunksize)
A:gensim.test.simspeed2.query->list(itertools.islice(corpus_dense, 1000))


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/test/test_big.py----------------------------------------
A:gensim.test.test_big.self.dictionary->gensim.utils.FakeDict(num_terms)
A:gensim.test.test_big.doc_len->numpy.random.poisson(self.doc_len)
A:gensim.test.test_big.ids->numpy.random.randint(0, len(self.dictionary), doc_len)
A:gensim.test.test_big.weights->numpy.random.poisson(3, doc_len)
A:gensim.test.test_big.corpus->BigCorpus(num_docs=5000)
A:gensim.test.test_big.model->gensim.models.LdaModel.load(testfile())
gensim.test.test_big.BigCorpus(self,words_only=False,num_terms=200000,num_docs=1000000,doc_len=100)
gensim.test.test_big.BigCorpus.__init__(self,words_only=False,num_terms=200000,num_docs=1000000,doc_len=100)
gensim.test.test_big.BigCorpus.__iter__(self)
gensim.test.test_big.testfile()


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/test/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/test/test_corpora_dictionary.py----------------------------------------
A:gensim.test.test_corpora_dictionary.module_path->os.path.dirname(__file__)
A:gensim.test.test_corpora_dictionary.d->Dictionary(self.texts)
A:gensim.test.test_corpora_dictionary.expected_keys->sorted(['computer', 'eps', 'graph', 'human', 'interface', 'minors', 'response', 'survey', 'system', 'time', 'trees', 'user'])
A:gensim.test.test_corpora_dictionary.expected_values->list(range(12))
A:gensim.test.test_corpora_dictionary.f->Dictionary(self.texts[:3])
A:gensim.test.test_corpora_dictionary.g->Dictionary(self.texts[3:])
A:gensim.test.test_corpora_dictionary.expected[removed_word]->len(expected)
A:gensim.test.test_corpora_dictionary.tmpf->get_tmpfile('dict_test.txt')
A:gensim.test.test_corpora_dictionary.d_loaded->gensim.corpora.Dictionary.load_from_text(tmpf)
A:gensim.test.test_corpora_dictionary.stoplist->set('for a of the and to in'.split())
A:gensim.test.test_corpora_dictionary.all_tokens->sum(texts, [])
A:gensim.test.test_corpora_dictionary.tokens_once->set((word for word in set(all_tokens) if all_tokens.count(word) == 1))
A:gensim.test.test_corpora_dictionary.dictionary->gensim.corpora.Dictionary.from_corpus(bow)
A:gensim.test.test_corpora_dictionary.dictionary_from_corpus->gensim.corpora.Dictionary.from_corpus(corpus)
A:gensim.test.test_corpora_dictionary.dict_token2id_vals->sorted(dictionary.token2id.values())
A:gensim.test.test_corpora_dictionary.dict_from_corpus_vals->sorted(dictionary_from_corpus.token2id.values())
A:gensim.test.test_corpora_dictionary.dictionary_from_corpus_2->gensim.corpora.Dictionary.from_corpus(corpus, id2word=dictionary)
A:gensim.test.test_corpora_dictionary.bow->gensim.matutils.Sparse2Corpus(scipy.sparse.rand(10, 100))
gensim.test.test_corpora_dictionary.TestDictionary(unittest.TestCase)
gensim.test.test_corpora_dictionary.TestDictionary.setUp(self)
gensim.test.test_corpora_dictionary.TestDictionary.testBuild(self)
gensim.test.test_corpora_dictionary.TestDictionary.testDocFreqAndToken2IdForSeveralDocsWithOneWord(self)
gensim.test.test_corpora_dictionary.TestDictionary.testDocFreqForOneDocWithSeveralWord(self)
gensim.test.test_corpora_dictionary.TestDictionary.testDocFreqOneDoc(self)
gensim.test.test_corpora_dictionary.TestDictionary.testFilter(self)
gensim.test.test_corpora_dictionary.TestDictionary.testFilterTokens(self)
gensim.test.test_corpora_dictionary.TestDictionary.testMerge(self)
gensim.test.test_corpora_dictionary.TestDictionary.test_dict_interface(self)
gensim.test.test_corpora_dictionary.TestDictionary.test_doc2bow(self)
gensim.test.test_corpora_dictionary.TestDictionary.test_from_corpus(self)
gensim.test.test_corpora_dictionary.TestDictionary.test_saveAsText_and_loadFromText(self)
gensim.test.test_corpora_dictionary.get_tmpfile(suffix)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/test/svd_error.py----------------------------------------
A:gensim.test.svd_error.program->os.path.basename(sys.argv[0])
A:gensim.test.svd_error.mm->gensim.corpora.MmCorpus(fname)
A:gensim.test.svd_error.n->int(sys.argv[2])
A:gensim.test.svd_error.m->int(sys.argv[3])
A:gensim.test.svd_error.corpus->ClippedCorpus(mm, n, m)
A:gensim.test.svd_error.id2word->gensim.utils.FakeDict(m)
A:gensim.test.svd_error.aat->aat.astype(numpy.float32).astype(numpy.float32)
A:gensim.test.svd_error.num_nnz->sum((len(doc) for doc in chunk))
A:gensim.test.svd_error.chunk->chunk.toarray().toarray()
A:gensim.test.svd_error.(spectrum_s, spectrum_u)->scipy.linalg.eigh(aat)
A:gensim.test.svd_error.ideal_fro->numpy.linalg.norm(err)
A:gensim.test.svd_error.taken->time.time()
A:gensim.test.svd_error.corpus_ram->gensim.matutils.corpus2csc(corpus, num_terms=m)
A:gensim.test.svd_error.(ut, s, vt)->sparsesvd(corpus_ram, factors)
A:gensim.test.svd_error.model->gensim.models.LsiModel(corpus, id2word=id2word, num_topics=factors, chunksize=2000, onepass=False, power_iters=power_iters)
gensim.test.svd_error.ClippedCorpus(self,corpus,max_docs,max_terms)
gensim.test.svd_error.ClippedCorpus.__init__(self,corpus,max_docs,max_terms)
gensim.test.svd_error.ClippedCorpus.__iter__(self)
gensim.test.svd_error.norm2(a)
gensim.test.svd_error.print_error(name,aat,u,s,ideal_nf,ideal_n2)
gensim.test.svd_error.rmse(diff)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/similarities/docsim.py----------------------------------------
A:gensim.similarities.docsim.logger->logging.getLogger('gensim.similarities.docsim')
A:gensim.similarities.docsim.(self.dirname, self.fname)->os.path.split(fname)
A:gensim.similarities.docsim.self.length->len(index)
A:gensim.similarities.docsim.self.index->self.index.tocsr()
A:gensim.similarities.docsim.result->result.toarray().flatten().toarray().flatten()
A:gensim.similarities.docsim.index->MatrixSimilarity(self.fresh_docs, num_features=self.num_features)
A:gensim.similarities.docsim.self.output_prefix->gensim.utils.randfname(prefix='simserver')
A:gensim.similarities.docsim.self.chunksize->int(chunksize)
A:gensim.similarities.docsim.doclen->len(doc)
A:gensim.similarities.docsim.doc->gensim.matutils.unitvec(matutils.sparse2full(doc, self.num_features))
A:gensim.similarities.docsim.shardid->len(self.shards)
A:gensim.similarities.docsim.shard->Shard(self.shardid2filename(shardid), index)
A:gensim.similarities.docsim.last_index->last_shard.get_index()
A:gensim.similarities.docsim.self.fresh_docs->list(last_index.index)
A:gensim.similarities.docsim.args->zip([query] * len(self.shards), self.shards)
A:gensim.similarities.docsim.pool->multiprocessing.Pool(PARALLEL_SHARDS)
A:gensim.similarities.docsim.(pool, shard_results)->self.query_shards(query)
A:gensim.similarities.docsim.offsets->numpy.cumsum([0] + [len(shard) for shard in self.shards])
A:gensim.similarities.docsim.(is_corpus, query)->gensim.utils.is_corpus(query)
A:gensim.similarities.docsim.merged->heapq.nlargest(self.num_best, itertools.chain(*parts), key=lambda item: item[1])
A:gensim.similarities.docsim.query->gensim.matutils.corpus2csc([query], self.index.shape[1], dtype=self.index.dtype)
A:gensim.similarities.docsim.chunk_end->min(query.shape[0], chunk_start + chunksize)
A:gensim.similarities.docsim.dirname->os.path.dirname(self.output_prefix)
A:gensim.similarities.docsim.corpus_len->len(corpus)
A:gensim.similarities.docsim.vector->gensim.matutils.unitvec(matutils.sparse2full(vector, num_features))
gensim.similarities.MatrixSimilarity(self,corpus,num_best=None,dtype=numpy.float32,num_features=None,chunksize=256,corpus_len=None)
gensim.similarities.MatrixSimilarity.__len__(self)
gensim.similarities.MatrixSimilarity.__str__(self)
gensim.similarities.MatrixSimilarity.get_similarities(self,query)
gensim.similarities.Similarity(self,output_prefix,corpus,num_features,num_best=None,chunksize=256,shardsize=32768)
gensim.similarities.Similarity.__getitem__(self,query)
gensim.similarities.Similarity.__iter__(self)
gensim.similarities.Similarity.__len__(self)
gensim.similarities.Similarity.__str__(self)
gensim.similarities.Similarity.add_documents(self,corpus)
gensim.similarities.Similarity.check_moved(self)
gensim.similarities.Similarity.close_shard(self)
gensim.similarities.Similarity.destroy(self)
gensim.similarities.Similarity.iter_chunks(self,chunksize=None)
gensim.similarities.Similarity.query_shards(self,query)
gensim.similarities.Similarity.reopen_shard(self)
gensim.similarities.Similarity.save(self,fname=None,*args,**kwargs)
gensim.similarities.Similarity.shardid2filename(self,shardid)
gensim.similarities.Similarity.similarity_by_id(self,docpos)
gensim.similarities.Similarity.vector_by_id(self,docpos)
gensim.similarities.SparseMatrixSimilarity(self,corpus,num_features=None,num_terms=None,num_docs=None,num_nnz=None,num_best=None,chunksize=500,dtype=numpy.float32)
gensim.similarities.SparseMatrixSimilarity.__len__(self)
gensim.similarities.SparseMatrixSimilarity.get_similarities(self,query)
gensim.similarities.docsim.MatrixSimilarity(self,corpus,num_best=None,dtype=numpy.float32,num_features=None,chunksize=256,corpus_len=None)
gensim.similarities.docsim.MatrixSimilarity.__init__(self,corpus,num_best=None,dtype=numpy.float32,num_features=None,chunksize=256,corpus_len=None)
gensim.similarities.docsim.MatrixSimilarity.__len__(self)
gensim.similarities.docsim.MatrixSimilarity.__str__(self)
gensim.similarities.docsim.MatrixSimilarity.get_similarities(self,query)
gensim.similarities.docsim.Shard(self,fname,index)
gensim.similarities.docsim.Shard.__getitem__(self,query)
gensim.similarities.docsim.Shard.__getstate__(self)
gensim.similarities.docsim.Shard.__init__(self,fname,index)
gensim.similarities.docsim.Shard.__len__(self)
gensim.similarities.docsim.Shard.__str__(self)
gensim.similarities.docsim.Shard.fullname(self)
gensim.similarities.docsim.Shard.get_document_id(self,pos)
gensim.similarities.docsim.Shard.get_index(self)
gensim.similarities.docsim.Similarity(self,output_prefix,corpus,num_features,num_best=None,chunksize=256,shardsize=32768)
gensim.similarities.docsim.Similarity.__getitem__(self,query)
gensim.similarities.docsim.Similarity.__init__(self,output_prefix,corpus,num_features,num_best=None,chunksize=256,shardsize=32768)
gensim.similarities.docsim.Similarity.__iter__(self)
gensim.similarities.docsim.Similarity.__len__(self)
gensim.similarities.docsim.Similarity.__str__(self)
gensim.similarities.docsim.Similarity.add_documents(self,corpus)
gensim.similarities.docsim.Similarity.check_moved(self)
gensim.similarities.docsim.Similarity.close_shard(self)
gensim.similarities.docsim.Similarity.destroy(self)
gensim.similarities.docsim.Similarity.iter_chunks(self,chunksize=None)
gensim.similarities.docsim.Similarity.query_shards(self,query)
gensim.similarities.docsim.Similarity.reopen_shard(self)
gensim.similarities.docsim.Similarity.save(self,fname=None,*args,**kwargs)
gensim.similarities.docsim.Similarity.shardid2filename(self,shardid)
gensim.similarities.docsim.Similarity.similarity_by_id(self,docpos)
gensim.similarities.docsim.Similarity.vector_by_id(self,docpos)
gensim.similarities.docsim.SparseMatrixSimilarity(self,corpus,num_features=None,num_terms=None,num_docs=None,num_nnz=None,num_best=None,chunksize=500,dtype=numpy.float32)
gensim.similarities.docsim.SparseMatrixSimilarity.__init__(self,corpus,num_features=None,num_terms=None,num_docs=None,num_nnz=None,num_best=None,chunksize=500,dtype=numpy.float32)
gensim.similarities.docsim.SparseMatrixSimilarity.__len__(self)
gensim.similarities.docsim.SparseMatrixSimilarity.get_similarities(self,query)
gensim.similarities.docsim.query_shard(args)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/similarities/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/summarization/textcleaner.py----------------------------------------
A:gensim.summarization.textcleaner.logger->logging.getLogger('summa.preprocessing.cleaner')
A:gensim.summarization.textcleaner.RE_SENTENCE->re.compile('(\\S.+?[.!?])(?=\\s+|$)|(\\S.+?)(?=[\n]|$)', re.UNICODE)
A:gensim.summarization.textcleaner.AB_SENIOR->re.compile('([A-Z][a-z]{1,2}\\.)\\s(\\w)', re.UNICODE)
A:gensim.summarization.textcleaner.AB_ACRONYM->re.compile('(\\.[a-zA-Z]\\.)\\s(\\w)', re.UNICODE)
A:gensim.summarization.textcleaner.AB_ACRONYM_LETTERS->re.compile('([a-zA-Z])\\.([a-zA-Z])\\.', re.UNICODE)
A:gensim.summarization.textcleaner.UNDO_AB_SENIOR->re.compile('([A-Z][a-z]{1,2}\\.)' + SEPARATOR + '(\\w)', re.UNICODE)
A:gensim.summarization.textcleaner.UNDO_AB_ACRONYM->re.compile('(\\.[a-zA-Z]\\.)' + SEPARATOR + '(\\w)', re.UNICODE)
A:gensim.summarization.textcleaner.processed->replace_abbreviations(text)
A:gensim.summarization.textcleaner.result->regex.sub(replacement, result)
A:gensim.summarization.textcleaner.sentence->SyntacticUnit(text, token, tag)
A:gensim.summarization.textcleaner.original_sentences->split_sentences(text)
A:gensim.summarization.textcleaner.text_without_acronyms->replace_with_separator(text, '', [AB_ACRONYM_LETTERS])
A:gensim.summarization.textcleaner.original_words->list(tokenize(text_without_acronyms, to_lower=True, deacc=True))
A:gensim.summarization.textcleaner.tags->tag(join_words(original_words))
A:gensim.summarization.textcleaner.units->merge_syntactic_units(original_words, filtered_words, tags)
gensim.summarization.textcleaner.clean_text_by_sentences(text)
gensim.summarization.textcleaner.clean_text_by_word(text)
gensim.summarization.textcleaner.get_sentences(text)
gensim.summarization.textcleaner.join_words(words,separator='')
gensim.summarization.textcleaner.merge_syntactic_units(original_units,filtered_units,tags=None)
gensim.summarization.textcleaner.replace_abbreviations(text)
gensim.summarization.textcleaner.replace_with_separator(text,separator,regexs)
gensim.summarization.textcleaner.split_sentences(text)
gensim.summarization.textcleaner.tokenize_by_word(text)
gensim.summarization.textcleaner.undo_replacement(sentence)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/summarization/summarizer.py----------------------------------------
A:gensim.summarization.summarizer.logger->logging.getLogger(__name__)
A:gensim.summarization.summarizer.documents->_build_graph(hashable_corpus).nodes()
A:gensim.summarization.summarizer.weights->_bm25_weights(documents)
A:gensim.summarization.summarizer.nodes->_build_graph(hashable_corpus).nodes()
A:gensim.summarization.summarizer.length_1->_get_doc_length(doc1)
A:gensim.summarization.summarizer.length_2->_get_doc_length(doc2)
A:gensim.summarization.summarizer.dictionary->Dictionary(split_tokens)
A:gensim.summarization.summarizer.hashable_corpus->_build_hasheable_corpus(corpus)
A:gensim.summarization.summarizer.sentences_by_corpus->dict(zip(hashable_corpus, sentences))
A:gensim.summarization.summarizer.words_in_sentence->len(sentence.text.split())
A:gensim.summarization.summarizer.important_sentences->_get_important_sentences(sentences, corpus, important_docs)
A:gensim.summarization.summarizer.graph->_build_graph(hashable_corpus)
A:gensim.summarization.summarizer.pagerank_scores->_pagerank(graph)
A:gensim.summarization.summarizer.sentences->_clean_text_by_sentences(text)
A:gensim.summarization.summarizer.corpus->_build_corpus(sentences)
A:gensim.summarization.summarizer.most_important_docs->summarize_corpus(corpus, ratio=ratio if word_count is None else 1)
A:gensim.summarization.summarizer.extracted_sentences->_extract_important_sentences(sentences, corpus, most_important_docs, word_count)
gensim.summarization.summarize(text,ratio=0.2,word_count=None,split=False)
gensim.summarization.summarize_corpus(corpus,ratio=0.2)
gensim.summarization.summarizer._build_corpus(sentences)
gensim.summarization.summarizer._build_hasheable_corpus(corpus)
gensim.summarization.summarizer._create_valid_graph(graph)
gensim.summarization.summarizer._extract_important_sentences(sentences,corpus,important_docs,word_count)
gensim.summarization.summarizer._format_results(extracted_sentences,split)
gensim.summarization.summarizer._get_doc_length(doc)
gensim.summarization.summarizer._get_important_sentences(sentences,corpus,important_docs)
gensim.summarization.summarizer._get_sentences_with_word_count(sentences,word_count)
gensim.summarization.summarizer._get_similarity(doc1,doc2,vec1,vec2)
gensim.summarization.summarizer._set_graph_edge_weights(graph)
gensim.summarization.summarizer.summarize(text,ratio=0.2,word_count=None,split=False)
gensim.summarization.summarizer.summarize_corpus(corpus,ratio=0.2)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/summarization/syntactic_unit.py----------------------------------------
gensim.summarization.syntactic_unit.SyntacticUnit(self,text,token=None,tag=None)
gensim.summarization.syntactic_unit.SyntacticUnit.__init__(self,text,token=None,tag=None)
gensim.summarization.syntactic_unit.SyntacticUnit.__repr__(self)
gensim.summarization.syntactic_unit.SyntacticUnit.__str__(self)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/summarization/pagerank_weighted.py----------------------------------------
A:gensim.summarization.pagerank_weighted.adjacency_matrix->build_adjacency_matrix(graph)
A:gensim.summarization.pagerank_weighted.probability_matrix->build_probability_matrix(graph)
A:gensim.summarization.pagerank_weighted.(vals, vecs)->eig(pagerank_matrix, left=True, right=False)
A:gensim.summarization.pagerank_weighted.nodes->graph.nodes()
A:gensim.summarization.pagerank_weighted.length->len(nodes)
A:gensim.summarization.pagerank_weighted.neighbors_sum->sum((graph.edge_weight((current_node, neighbor)) for neighbor in graph.neighbors(current_node)))
A:gensim.summarization.pagerank_weighted.edge_weight->float(graph.edge_weight((current_node, nodes[j])))
A:gensim.summarization.pagerank_weighted.dimension->len(graph.nodes())
A:gensim.summarization.pagerank_weighted.matrix->empty_matrix((dimension, dimension))
A:gensim.summarization.pagerank_weighted.scores[node]->abs(vecs[i][0])
gensim.summarization.pagerank_weighted.build_adjacency_matrix(graph)
gensim.summarization.pagerank_weighted.build_probability_matrix(graph)
gensim.summarization.pagerank_weighted.pagerank_weighted(graph,damping=0.85)
gensim.summarization.pagerank_weighted.process_results(graph,vecs)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/summarization/graph.py----------------------------------------
gensim.summarization.graph.Graph(self)
gensim.summarization.graph.Graph.__init__(self)
gensim.summarization.graph.Graph.add_edge(self,edge,wt=1,label='',attrs=[])
gensim.summarization.graph.Graph.add_edge_attribute(self,edge,attr)
gensim.summarization.graph.Graph.add_edge_attributes(self,edge,attrs)
gensim.summarization.graph.Graph.add_node(self,node,attrs=None)
gensim.summarization.graph.Graph.del_edge(self,edge)
gensim.summarization.graph.Graph.del_edge_labeling(self,edge)
gensim.summarization.graph.Graph.del_node(self,node)
gensim.summarization.graph.Graph.edge_attributes(self,edge)
gensim.summarization.graph.Graph.edge_weight(self,edge)
gensim.summarization.graph.Graph.edges(self)
gensim.summarization.graph.Graph.get_edge_properties(self,edge)
gensim.summarization.graph.Graph.has_edge(self,edge)
gensim.summarization.graph.Graph.has_node(self,node)
gensim.summarization.graph.Graph.neighbors(self,node)
gensim.summarization.graph.Graph.nodes(self)
gensim.summarization.graph.Graph.set_edge_properties(self,edge,**properties)
gensim.summarization.graph.IGraph(object)
gensim.summarization.graph.IGraph.add_edge(self,edge,wt=1,label='',attrs=[])
gensim.summarization.graph.IGraph.add_node(self,node,attrs=None)
gensim.summarization.graph.IGraph.del_node(self,node)
gensim.summarization.graph.IGraph.edge_weight(self,edge)
gensim.summarization.graph.IGraph.edges(self)
gensim.summarization.graph.IGraph.has_edge(self,edge)
gensim.summarization.graph.IGraph.has_node(self,node)
gensim.summarization.graph.IGraph.neighbors(self,node)
gensim.summarization.graph.IGraph.nodes(self)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/summarization/commons.py----------------------------------------
A:gensim.summarization.commons.graph->Graph()
gensim.summarization.commons.build_graph(sequence)
gensim.summarization.commons.remove_unreachable_nodes(graph)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/summarization/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/summarization/keywords.py----------------------------------------
A:gensim.summarization.keywords.(include_filters, exclude_filters)->_get_pos_filters()
A:gensim.summarization.keywords.first_window->_get_first_window(split_text)
A:gensim.summarization.keywords.queue->_init_queue(split_text)
A:gensim.summarization.keywords.iterations->_init_queue(split_text).qsize()
A:gensim.summarization.keywords.var->_init_queue(split_text).get()
A:gensim.summarization.keywords.stripped_word_list->list(_tokenize_by_word(word))
A:gensim.summarization.keywords._keywords->_keywords.copy().copy()
A:gensim.summarization.keywords.len_text->len(split_text)
A:gensim.summarization.keywords.word->_strip_word(split_text[i])
A:gensim.summarization.keywords.other_word->_strip_word(split_text[j])
A:gensim.summarization.keywords.word_list->concept.split()
A:gensim.summarization.keywords.tokens->_clean_text_by_word(text)
A:gensim.summarization.keywords.split_text->list(_tokenize_by_word(text))
A:gensim.summarization.keywords.graph->_build_graph(_get_words_for_graph(tokens))
A:gensim.summarization.keywords.pagerank_scores->_pagerank(graph)
A:gensim.summarization.keywords.extracted_lemmas->_extract_tokens(graph.nodes(), pagerank_scores, ratio, words)
A:gensim.summarization.keywords.lemmas_to_word->_lemmas_to_words(tokens)
A:gensim.summarization.keywords.keywords->_get_keywords_with_score(extracted_lemmas, lemmas_to_word)
A:gensim.summarization.keywords.combined_keywords->_get_combined_keywords(keywords, text.split())
gensim.summarization.keywords(text,ratio=0.2,words=None,split=False,scores=False)
gensim.summarization.keywords._extract_tokens(lemmas,scores,ratio,words)
gensim.summarization.keywords._format_results(_keywords,combined_keywords,split,scores)
gensim.summarization.keywords._get_average_score(concept,_keywords)
gensim.summarization.keywords._get_combined_keywords(_keywords,split_text)
gensim.summarization.keywords._get_first_window(split_text)
gensim.summarization.keywords._get_keywords_with_score(extracted_lemmas,lemma_to_word)
gensim.summarization.keywords._get_pos_filters()
gensim.summarization.keywords._get_words_for_graph(tokens)
gensim.summarization.keywords._init_queue(split_text)
gensim.summarization.keywords._lemmas_to_words(tokens)
gensim.summarization.keywords._process_first_window(graph,tokens,split_text)
gensim.summarization.keywords._process_text(graph,tokens,split_text)
gensim.summarization.keywords._process_word(graph,tokens,queue,word)
gensim.summarization.keywords._queue_iterator(queue)
gensim.summarization.keywords._set_graph_edge(graph,tokens,word_a,word_b)
gensim.summarization.keywords._set_graph_edges(graph,tokens,split_text)
gensim.summarization.keywords._strip_word(word)
gensim.summarization.keywords._update_queue(queue,word)
gensim.summarization.keywords.get_graph(text)
gensim.summarization.keywords.keywords(text,ratio=0.2,words=None,split=False,scores=False)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/summarization/bm25.py----------------------------------------
A:gensim.summarization.bm25.self.corpus_size->len(corpus)
A:gensim.summarization.bm25.score->self.get_score(document, index, average_idf)
A:gensim.summarization.bm25.bm25->BM25(corpus)
A:gensim.summarization.bm25.scores->BM25(corpus).get_scores(doc, average_idf)
gensim.summarization.bm25.BM25(self,corpus)
gensim.summarization.bm25.BM25.__init__(self,corpus)
gensim.summarization.bm25.BM25.get_score(self,document,index,average_idf)
gensim.summarization.bm25.BM25.get_scores(self,document,average_idf)
gensim.summarization.bm25.BM25.initialize(self)
gensim.summarization.bm25.get_bm25_weights(corpus)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/parsing/preprocessing.py----------------------------------------
A:gensim.parsing.preprocessing.STOPWORDS->frozenset((w for w in STOPWORDS.split() if w))
A:gensim.parsing.preprocessing.s->f(s)
A:gensim.parsing.preprocessing.RE_PUNCT->re.compile('([%s])+' % re.escape(string.punctuation), re.UNICODE)
A:gensim.parsing.preprocessing.RE_TAGS->re.compile('<([^>]+)>', re.UNICODE)
A:gensim.parsing.preprocessing.RE_NUMERIC->re.compile('[0-9]+', re.UNICODE)
A:gensim.parsing.preprocessing.RE_NONALPHA->re.compile('\\W', re.UNICODE)
A:gensim.parsing.preprocessing.RE_WHITESPACE->re.compile('(\\s)+', re.UNICODE)
A:gensim.parsing.preprocessing.RE_AL_NUM->re.compile('([a-z]+)([0-9]+)', flags=re.UNICODE)
A:gensim.parsing.preprocessing.RE_NUM_AL->re.compile('([0-9]+)([a-z]+)', flags=re.UNICODE)
A:gensim.parsing.preprocessing.text->gensim.utils.to_unicode(text)
A:gensim.parsing.preprocessing.p->PorterStemmer()
gensim.parsing.preprocess_documents(docs)
gensim.parsing.preprocess_string(s,filters=DEFAULT_FILTERS)
gensim.parsing.preprocessing.preprocess_documents(docs)
gensim.parsing.preprocessing.preprocess_string(s,filters=DEFAULT_FILTERS)
gensim.parsing.preprocessing.read_file(path)
gensim.parsing.preprocessing.read_files(pattern)
gensim.parsing.preprocessing.remove_stopwords(s)
gensim.parsing.preprocessing.split_alphanum(s)
gensim.parsing.preprocessing.stem_text(text)
gensim.parsing.preprocessing.strip_multiple_whitespaces(s)
gensim.parsing.preprocessing.strip_non_alphanum(s)
gensim.parsing.preprocessing.strip_numeric(s)
gensim.parsing.preprocessing.strip_punctuation(s)
gensim.parsing.preprocessing.strip_short(s,minsize=3)
gensim.parsing.preprocessing.strip_tags(s)
gensim.parsing.read_file(path)
gensim.parsing.read_files(pattern)
gensim.parsing.remove_stopwords(s)
gensim.parsing.split_alphanum(s)
gensim.parsing.stem_text(text)
gensim.parsing.strip_multiple_whitespaces(s)
gensim.parsing.strip_non_alphanum(s)
gensim.parsing.strip_numeric(s)
gensim.parsing.strip_punctuation(s)
gensim.parsing.strip_short(s,minsize=3)
gensim.parsing.strip_tags(s)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/parsing/porter.py----------------------------------------
A:gensim.parsing.porter.length->len(s)
A:gensim.parsing.porter.a->self._m()
A:gensim.parsing.porter.w->w.lower().lower()
A:gensim.parsing.porter.p->PorterStemmer()
gensim.parsing.PorterStemmer(self)
gensim.parsing.PorterStemmer._cons(self,i)
gensim.parsing.PorterStemmer._cvc(self,i)
gensim.parsing.PorterStemmer._doublec(self,j)
gensim.parsing.PorterStemmer._ends(self,s)
gensim.parsing.PorterStemmer._m(self)
gensim.parsing.PorterStemmer._r(self,s)
gensim.parsing.PorterStemmer._setto(self,s)
gensim.parsing.PorterStemmer._step1ab(self)
gensim.parsing.PorterStemmer._step1c(self)
gensim.parsing.PorterStemmer._step2(self)
gensim.parsing.PorterStemmer._step3(self)
gensim.parsing.PorterStemmer._step4(self)
gensim.parsing.PorterStemmer._step5(self)
gensim.parsing.PorterStemmer._vowelinstem(self)
gensim.parsing.PorterStemmer.stem(self,w)
gensim.parsing.PorterStemmer.stem_documents(self,docs)
gensim.parsing.PorterStemmer.stem_sentence(self,txt)
gensim.parsing.porter.PorterStemmer(self)
gensim.parsing.porter.PorterStemmer.__init__(self)
gensim.parsing.porter.PorterStemmer._cons(self,i)
gensim.parsing.porter.PorterStemmer._cvc(self,i)
gensim.parsing.porter.PorterStemmer._doublec(self,j)
gensim.parsing.porter.PorterStemmer._ends(self,s)
gensim.parsing.porter.PorterStemmer._m(self)
gensim.parsing.porter.PorterStemmer._r(self,s)
gensim.parsing.porter.PorterStemmer._setto(self,s)
gensim.parsing.porter.PorterStemmer._step1ab(self)
gensim.parsing.porter.PorterStemmer._step1c(self)
gensim.parsing.porter.PorterStemmer._step2(self)
gensim.parsing.porter.PorterStemmer._step3(self)
gensim.parsing.porter.PorterStemmer._step4(self)
gensim.parsing.porter.PorterStemmer._step5(self)
gensim.parsing.porter.PorterStemmer._vowelinstem(self)
gensim.parsing.porter.PorterStemmer.stem(self,w)
gensim.parsing.porter.PorterStemmer.stem_documents(self,docs)
gensim.parsing.porter.PorterStemmer.stem_sentence(self,txt)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/parsing/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/models/tfidfmodel.py----------------------------------------
A:gensim.models.tfidfmodel.logger->logging.getLogger('gensim.models.tfidfmodel')
A:gensim.models.tfidfmodel.self.dfs->dictionary.dfs.copy()
A:gensim.models.tfidfmodel.self.idfs->precompute_idfs(self.wglobal, self.dfs, self.num_docs)
A:gensim.models.tfidfmodel.(is_corpus, bow)->gensim.utils.is_corpus(bow)
A:gensim.models.tfidfmodel.vector->self.normalize(vector)
gensim.models.TfidfModel(self,corpus=None,id2word=None,dictionary=None,wlocal=utils.identity,wglobal=df2idf,normalize=True)
gensim.models.TfidfModel.__getitem__(self,bow,eps=1e-12)
gensim.models.TfidfModel.__str__(self)
gensim.models.TfidfModel.initialize(self,corpus)
gensim.models.tfidfmodel.TfidfModel(self,corpus=None,id2word=None,dictionary=None,wlocal=utils.identity,wglobal=df2idf,normalize=True)
gensim.models.tfidfmodel.TfidfModel.__getitem__(self,bow,eps=1e-12)
gensim.models.tfidfmodel.TfidfModel.__init__(self,corpus=None,id2word=None,dictionary=None,wlocal=utils.identity,wglobal=df2idf,normalize=True)
gensim.models.tfidfmodel.TfidfModel.__str__(self)
gensim.models.tfidfmodel.TfidfModel.initialize(self,corpus)
gensim.models.tfidfmodel.df2idf(docfreq,totaldocs,log_base=2.0,add=0.0)
gensim.models.tfidfmodel.precompute_idfs(wglobal,dfs,total_docs)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/models/ldamodel.py----------------------------------------
A:gensim.models.ldamodel.logger->logging.getLogger('gensim.models.ldamodel')
A:gensim.models.ldamodel.self.sstats->numpy.zeros(shape)
A:gensim.models.ldamodel.self.id2word->gensim.utils.dict_from_corpus(corpus)
A:gensim.models.ldamodel.self.num_terms->len(self.id2word)
A:gensim.models.ldamodel.self.distributed->bool(distributed)
A:gensim.models.ldamodel.self.num_topics->int(num_topics)
A:gensim.models.ldamodel.self.alpha->numpy.asarray([1.0 / num_topics for i in xrange(num_topics)])
A:gensim.models.ldamodel.dispatcher->Pyro4.Proxy('PYRONAME:gensim.lda_dispatcher')
A:gensim.models.ldamodel.self.numworkers->len(dispatcher.getworkers())
A:gensim.models.ldamodel.self.state->LdaState(self.eta, (self.num_topics, self.num_terms))
A:gensim.models.ldamodel.self.state.sstats->numpy.random.gamma(100.0, 1.0 / 100.0, (self.num_topics, self.num_terms))
A:gensim.models.ldamodel.self.expElogbeta->numpy.exp(self.state.get_Elogbeta())
A:gensim.models.ldamodel._->len(chunk)
A:gensim.models.ldamodel.chunk->list(chunk)
A:gensim.models.ldamodel.gamma->numpy.random.gamma(100.0, 1.0 / 100.0, (len(chunk), self.num_topics))
A:gensim.models.ldamodel.Elogtheta->dirichlet_expectation(gamma)
A:gensim.models.ldamodel.expElogtheta->numpy.exp(Elogtheta)
A:gensim.models.ldamodel.sstats->numpy.zeros_like(self.expElogbeta)
A:gensim.models.ldamodel.cts->numpy.array([cnt for (_, cnt) in doc])
A:gensim.models.ldamodel.Elogthetad->dirichlet_expectation(gammad)
A:gensim.models.ldamodel.expElogthetad->numpy.exp(Elogthetad)
A:gensim.models.ldamodel.meanchange->numpy.mean(abs(gammad - lastgamma))
A:gensim.models.ldamodel.(gamma, sstats)->self.inference(chunk, collect_sstats=True)
A:gensim.models.ldamodel.N->float(len(gammat))
A:gensim.models.ldamodel.dalpha->numpy.copy(self.alpha)
A:gensim.models.ldamodel.total_docs->len(chunk)
A:gensim.models.ldamodel.corpus_words->sum((cnt for document in chunk for (_, cnt) in document))
A:gensim.models.ldamodel.lencorpus->sum((1 for _ in corpus))
A:gensim.models.ldamodel.chunksize->min(lencorpus, self.chunksize)
A:gensim.models.ldamodel.updateafter->min(lencorpus, update_every * self.numworkers * chunksize)
A:gensim.models.ldamodel.evalafter->min(lencorpus, (eval_every or 0) * self.numworkers * chunksize)
A:gensim.models.ldamodel.updates_per_pass->max(1, lencorpus / updateafter)
A:gensim.models.ldamodel.other->self.dispatcher.getstate()
A:gensim.models.ldamodel.gammat->self.do_estep(chunk, other)
A:gensim.models.ldamodel.diff->numpy.log(self.expElogbeta)
A:gensim.models.ldamodel._lambda->self.state.get_lambda()
A:gensim.models.ldamodel.Elogbeta->dirichlet_expectation(_lambda)
A:gensim.models.ldamodel.(gammad, _)->self.inference([doc])
A:gensim.models.ldamodel.sum_eta->numpy.sum(self.eta, 1)
A:gensim.models.ldamodel.chosen_topics->range(num_topics)
A:gensim.models.ldamodel.num_topics->min(num_topics, self.num_topics)
A:gensim.models.ldamodel.sorted_topics->list(matutils.argsort(sort_alpha))
A:gensim.models.ldamodel.topic->self.show_topic(i, topn=num_words)
A:gensim.models.ldamodel.bestn->gensim.matutils.argsort(topic, topn=num_words, reverse=True)
A:gensim.models.ldamodel.(is_corpus, corpus)->gensim.utils.is_corpus(bow)
A:gensim.models.ldamodel.top_ids->set(chain.from_iterable(topics))
A:gensim.models.ldamodel.id_list->set()
A:gensim.models.ldamodel.co_doc_frequency->len(m_docs.intersection(l_docs))
A:gensim.models.ldamodel.top_topics->sorted(coherence_scores, key=lambda t: t[1], reverse=True)
A:gensim.models.ldamodel.(gamma, _)->self.inference([bow])
A:gensim.models.ldamodel.ignore->list(set(['state', 'dispatcher']) | set(ignore))
A:gensim.models.ldamodel.kwargs['mmap']->kwargs.get('mmap', None)
A:gensim.models.ldamodel.result->super(LdaModel, cls).load(fname, *args, **kwargs)
A:gensim.models.ldamodel.state_fname->gensim.utils.smart_extension(fname, '.state')
A:gensim.models.ldamodel.result.state->super(LdaModel, cls).load(state_fname, *args, **kwargs)
gensim.models.LdaModel(self,corpus=None,num_topics=100,id2word=None,distributed=False,chunksize=2000,passes=1,update_every=1,alpha='symmetric',eta=None,decay=0.5,offset=1.0,eval_every=10,iterations=50,gamma_threshold=0.001,minimum_probability=0.01)
gensim.models.LdaModel.__getitem__(self,bow,eps=None)
gensim.models.LdaModel.__str__(self)
gensim.models.LdaModel.bound(self,corpus,gamma=None,subsample_ratio=1.0)
gensim.models.LdaModel.clear(self)
gensim.models.LdaModel.do_estep(self,chunk,state=None)
gensim.models.LdaModel.do_mstep(self,rho,other,extra_pass=False)
gensim.models.LdaModel.get_document_topics(self,bow,minimum_probability=None)
gensim.models.LdaModel.inference(self,chunk,collect_sstats=False)
gensim.models.LdaModel.load(cls,fname,*args,**kwargs)
gensim.models.LdaModel.log_perplexity(self,chunk,total_docs=None)
gensim.models.LdaModel.print_topic(self,topicid,topn=10)
gensim.models.LdaModel.print_topics(self,num_topics=10,num_words=10)
gensim.models.LdaModel.save(self,fname,ignore=['state','dispatcher'],*args,**kwargs)
gensim.models.LdaModel.show_topic(self,topicid,topn=10)
gensim.models.LdaModel.show_topics(self,num_topics=10,num_words=10,log=False,formatted=True)
gensim.models.LdaModel.sync_state(self)
gensim.models.LdaModel.top_topics(self,corpus,num_words=20)
gensim.models.LdaModel.update(self,corpus,chunksize=None,decay=None,offset=None,passes=None,update_every=None,eval_every=None,iterations=None,gamma_threshold=None)
gensim.models.LdaModel.update_alpha(self,gammat,rho)
gensim.models.ldamodel.LdaModel(self,corpus=None,num_topics=100,id2word=None,distributed=False,chunksize=2000,passes=1,update_every=1,alpha='symmetric',eta=None,decay=0.5,offset=1.0,eval_every=10,iterations=50,gamma_threshold=0.001,minimum_probability=0.01)
gensim.models.ldamodel.LdaModel.__getitem__(self,bow,eps=None)
gensim.models.ldamodel.LdaModel.__init__(self,corpus=None,num_topics=100,id2word=None,distributed=False,chunksize=2000,passes=1,update_every=1,alpha='symmetric',eta=None,decay=0.5,offset=1.0,eval_every=10,iterations=50,gamma_threshold=0.001,minimum_probability=0.01)
gensim.models.ldamodel.LdaModel.__str__(self)
gensim.models.ldamodel.LdaModel.bound(self,corpus,gamma=None,subsample_ratio=1.0)
gensim.models.ldamodel.LdaModel.clear(self)
gensim.models.ldamodel.LdaModel.do_estep(self,chunk,state=None)
gensim.models.ldamodel.LdaModel.do_mstep(self,rho,other,extra_pass=False)
gensim.models.ldamodel.LdaModel.get_document_topics(self,bow,minimum_probability=None)
gensim.models.ldamodel.LdaModel.inference(self,chunk,collect_sstats=False)
gensim.models.ldamodel.LdaModel.load(cls,fname,*args,**kwargs)
gensim.models.ldamodel.LdaModel.log_perplexity(self,chunk,total_docs=None)
gensim.models.ldamodel.LdaModel.print_topic(self,topicid,topn=10)
gensim.models.ldamodel.LdaModel.print_topics(self,num_topics=10,num_words=10)
gensim.models.ldamodel.LdaModel.save(self,fname,ignore=['state','dispatcher'],*args,**kwargs)
gensim.models.ldamodel.LdaModel.show_topic(self,topicid,topn=10)
gensim.models.ldamodel.LdaModel.show_topics(self,num_topics=10,num_words=10,log=False,formatted=True)
gensim.models.ldamodel.LdaModel.sync_state(self)
gensim.models.ldamodel.LdaModel.top_topics(self,corpus,num_words=20)
gensim.models.ldamodel.LdaModel.update(self,corpus,chunksize=None,decay=None,offset=None,passes=None,update_every=None,eval_every=None,iterations=None,gamma_threshold=None)
gensim.models.ldamodel.LdaModel.update_alpha(self,gammat,rho)
gensim.models.ldamodel.LdaState(self,eta,shape)
gensim.models.ldamodel.LdaState.__init__(self,eta,shape)
gensim.models.ldamodel.LdaState.blend(self,rhot,other,targetsize=None)
gensim.models.ldamodel.LdaState.blend2(self,rhot,other,targetsize=None)
gensim.models.ldamodel.LdaState.get_Elogbeta(self)
gensim.models.ldamodel.LdaState.get_lambda(self)
gensim.models.ldamodel.LdaState.merge(self,other)
gensim.models.ldamodel.LdaState.reset(self)
gensim.models.ldamodel.dirichlet_expectation(alpha)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/models/hdpmodel.py----------------------------------------
A:gensim.models.hdpmodel.logger->logging.getLogger(__name__)
A:gensim.models.hdpmodel.max_val->numpy.max(v, 1)
A:gensim.models.hdpmodel.tot->numpy.sum(np.exp(v + log_shift[:, np.newaxis]), 1)
A:gensim.models.hdpmodel.dig_sum->scipy.special.psi(np.sum(v, 0))
A:gensim.models.hdpmodel.Elogsticks->numpy.zeros(n)
A:gensim.models.hdpmodel.gamma->numpy.zeros((len(chunk), self.lda_beta.shape[0]))
A:gensim.models.hdpmodel.expElogtheta->numpy.exp(Elogtheta)
A:gensim.models.hdpmodel.counts->numpy.array(doc_word_counts)
A:gensim.models.hdpmodel.Elogtheta->dirichlet_expectation(gamma)
A:gensim.models.hdpmodel.meanchange->numpy.mean(abs(gamma - lastgamma))
A:gensim.models.hdpmodel.likelihood->numpy.sum(counts * np.log(phinorm))
A:gensim.models.hdpmodel.self.m_var_sticks_ss->numpy.zeros(T)
A:gensim.models.hdpmodel.self.m_var_beta_ss->numpy.zeros((T, Wt))
A:gensim.models.hdpmodel.self.m_W->len(id2word)
A:gensim.models.hdpmodel.self.m_D->len(corpus)
A:gensim.models.hdpmodel.self.m_var_sticks->numpy.zeros((2, T - 1))
A:gensim.models.hdpmodel.self.m_var_sticks[1]->range(T - 1, 0, -1)
A:gensim.models.hdpmodel.self.m_varphi_ss->numpy.zeros(T)
A:gensim.models.hdpmodel.self.m_Elogbeta->dirichlet_expectation(self.m_eta + self.m_lambda)
A:gensim.models.hdpmodel.self.m_timestamp->numpy.zeros(self.m_W, dtype=int)
A:gensim.models.hdpmodel.self.m_lambda_sum->numpy.sum(self.m_lambda, axis=1)
A:gensim.models.hdpmodel.chunk->list(chunk)
A:gensim.models.hdpmodel.(ids, counts)->zip(*doc)
A:gensim.models.hdpmodel.(_, gammad)->lda_e_step(ids, counts, self.lda_alpha, self.lda_beta)
A:gensim.models.hdpmodel.(is_corpus, corpus)->gensim.utils.is_corpus(bow)
A:gensim.models.hdpmodel.save_freq->max(1, int(10000 / self.chunksize))
A:gensim.models.hdpmodel.start_time->time.clock()
A:gensim.models.hdpmodel.(alpha, beta)->self.hdp_to_lda()
A:gensim.models.hdpmodel.unique_words->dict()
A:gensim.models.hdpmodel.unique_words[word_id]->len(unique_words)
A:gensim.models.hdpmodel.Wt->len(word_list)
A:gensim.models.hdpmodel.rw->numpy.array([self.m_r[t] for t in self.m_timestamp[word_list]])
A:gensim.models.hdpmodel.ss->SuffStats(self.m_T, Wt, len(chunk))
A:gensim.models.hdpmodel.Elogsticks_1st->expect_log_sticks(self.m_var_sticks)
A:gensim.models.hdpmodel.(doc_word_ids, doc_word_counts)->zip(*doc)
A:gensim.models.hdpmodel.doc_score->self.doc_e_step(doc, ss, Elogsticks_1st, word_list, unique_words, doc_word_ids, doc_word_counts, self.m_var_converge)
A:gensim.models.hdpmodel.v->numpy.zeros((2, self.m_K - 1))
A:gensim.models.hdpmodel.var_phi->numpy.exp(log_var_phi)
A:gensim.models.hdpmodel.(log_var_phi, log_norm)->log_normalize(var_phi)
A:gensim.models.hdpmodel.(log_phi, log_norm)->log_normalize(phi)
A:gensim.models.hdpmodel.phi->numpy.exp(log_phi)
A:gensim.models.hdpmodel.phi_cum->numpy.flipud(np.sum(phi_all[:, 1:], 0))
A:gensim.models.hdpmodel.Elogsticks_2nd->expect_log_sticks(v)
A:gensim.models.hdpmodel.log_alpha->numpy.log(self.m_alpha)
A:gensim.models.hdpmodel.var_phi_sum->numpy.flipud(self.m_varphi_ss[1:])
A:gensim.models.hdpmodel.idx->gensim.matutils.argsort(topics_sums, reverse=True)
A:gensim.models.hdpmodel.hdp_formatter->HdpTopicFormatter(self.id2word, betas)
A:gensim.models.hdpmodel.alpha->numpy.zeros(self.m_T)
A:gensim.models.hdpmodel.(self.lda_alpha, self.lda_beta)->self.hdp_to_lda()
A:gensim.models.hdpmodel.(likelihood, gamma)->lda_e_step(doc_word_ids, doc_word_counts, self.lda_alpha, self.lda_beta)
A:gensim.models.hdpmodel.log_predicts->numpy.log(np.dot(theta, lda_betad))
A:gensim.models.hdpmodel.topics->min(topics, len(self.data))
A:gensim.models.hdpmodel.topics_sums->numpy.sum(topics, axis=1)
A:gensim.models.hdpmodel.lambdak->list(self.data[k, :])
A:gensim.models.hdpmodel.temp->sorted(temp, key=lambda x: x[0], reverse=True)
A:gensim.models.hdpmodel.topic_terms->self.show_topic_terms(temp, topn)
A:gensim.models.hdpmodel.topic->self.format_topic(k, topic_terms)
A:gensim.models.hdpmodel.fmt->'\n'.join(['    %20s    %.8f' % (word, weight) for (word, weight) in topic_terms])
gensim.models.HdpModel(self,corpus,id2word,max_chunks=None,max_time=None,chunksize=256,kappa=1.0,tau=64.0,K=15,T=150,alpha=1,gamma=1,eta=0.01,scale=1.0,var_converge=0.0001,outputdir=None)
gensim.models.HdpModel.__getitem__(self,bow,eps=0.01)
gensim.models.HdpModel.doc_e_step(self,doc,ss,Elogsticks_1st,word_list,unique_words,doc_word_ids,doc_word_counts,var_converge)
gensim.models.HdpModel.evaluate_test_corpus(self,corpus)
gensim.models.HdpModel.hdp_to_lda(self)
gensim.models.HdpModel.inference(self,chunk)
gensim.models.HdpModel.optimal_ordering(self)
gensim.models.HdpModel.print_topics(self,topics=20,topn=20)
gensim.models.HdpModel.save_options(self)
gensim.models.HdpModel.save_topics(self,doc_count=None)
gensim.models.HdpModel.show_topics(self,topics=20,topn=20,log=False,formatted=True)
gensim.models.HdpModel.update(self,corpus)
gensim.models.HdpModel.update_chunk(self,chunk,update=True,opt_o=True)
gensim.models.HdpModel.update_expectations(self)
gensim.models.HdpModel.update_finished(self,start_time,chunks_processed,docs_processed)
gensim.models.HdpModel.update_lambda(self,sstats,word_list,opt_o)
gensim.models.hdpmodel.HdpModel(self,corpus,id2word,max_chunks=None,max_time=None,chunksize=256,kappa=1.0,tau=64.0,K=15,T=150,alpha=1,gamma=1,eta=0.01,scale=1.0,var_converge=0.0001,outputdir=None)
gensim.models.hdpmodel.HdpModel.__getitem__(self,bow,eps=0.01)
gensim.models.hdpmodel.HdpModel.__init__(self,corpus,id2word,max_chunks=None,max_time=None,chunksize=256,kappa=1.0,tau=64.0,K=15,T=150,alpha=1,gamma=1,eta=0.01,scale=1.0,var_converge=0.0001,outputdir=None)
gensim.models.hdpmodel.HdpModel.doc_e_step(self,doc,ss,Elogsticks_1st,word_list,unique_words,doc_word_ids,doc_word_counts,var_converge)
gensim.models.hdpmodel.HdpModel.evaluate_test_corpus(self,corpus)
gensim.models.hdpmodel.HdpModel.hdp_to_lda(self)
gensim.models.hdpmodel.HdpModel.inference(self,chunk)
gensim.models.hdpmodel.HdpModel.optimal_ordering(self)
gensim.models.hdpmodel.HdpModel.print_topics(self,topics=20,topn=20)
gensim.models.hdpmodel.HdpModel.save_options(self)
gensim.models.hdpmodel.HdpModel.save_topics(self,doc_count=None)
gensim.models.hdpmodel.HdpModel.show_topics(self,topics=20,topn=20,log=False,formatted=True)
gensim.models.hdpmodel.HdpModel.update(self,corpus)
gensim.models.hdpmodel.HdpModel.update_chunk(self,chunk,update=True,opt_o=True)
gensim.models.hdpmodel.HdpModel.update_expectations(self)
gensim.models.hdpmodel.HdpModel.update_finished(self,start_time,chunks_processed,docs_processed)
gensim.models.hdpmodel.HdpModel.update_lambda(self,sstats,word_list,opt_o)
gensim.models.hdpmodel.HdpTopicFormatter(self,dictionary=None,topic_data=None,topic_file=None,style=None)
gensim.models.hdpmodel.HdpTopicFormatter.__init__(self,dictionary=None,topic_data=None,topic_file=None,style=None)
gensim.models.hdpmodel.HdpTopicFormatter.format_topic(self,topic_id,topic_terms)
gensim.models.hdpmodel.HdpTopicFormatter.print_topics(self,topics=10,topn=10)
gensim.models.hdpmodel.HdpTopicFormatter.show_topic_terms(self,topic_data,topn)
gensim.models.hdpmodel.HdpTopicFormatter.show_topics(self,topics=10,topn=10,log=False,formatted=True)
gensim.models.hdpmodel.SuffStats(self,T,Wt,Dt)
gensim.models.hdpmodel.SuffStats.__init__(self,T,Wt,Dt)
gensim.models.hdpmodel.SuffStats.set_zero(self)
gensim.models.hdpmodel.dirichlet_expectation(alpha)
gensim.models.hdpmodel.expect_log_sticks(sticks)
gensim.models.hdpmodel.lda_e_step(doc_word_ids,doc_word_counts,alpha,beta,max_iter=100)
gensim.models.hdpmodel.log_normalize(v)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/models/phrases.py----------------------------------------
A:gensim.models.phrases.logger->logging.getLogger(__name__)
A:gensim.models.phrases.self.vocab->defaultdict(int)
A:gensim.models.phrases.vocab->defaultdict(int)
A:gensim.models.phrases.(min_reduce, vocab)->self.learn_vocab(sentences, self.max_vocab_size, self.delimiter)
A:gensim.models.phrases.self.min_reduce->max(self.min_reduce, min_reduce)
A:gensim.models.phrases.bigram_word->delimiter.join((word_a, word_b))
A:gensim.models.phrases.pa->float(vocab[word_a])
A:gensim.models.phrases.pb->float(vocab[word_b])
A:gensim.models.phrases.pab->float(vocab[bigram_word])
A:gensim.models.phrases.program->os.path.basename(sys.argv[0])
A:gensim.models.phrases.sentences->Text8Corpus(infile)
A:gensim.models.phrases.bigram->Phrases(sentences, min_count=5, threshold=100)
gensim.models.Phrases(self,sentences=None,min_count=5,threshold=10.0,max_vocab_size=40000000,delimiter=b'_')
gensim.models.Phrases.__getitem__(self,sentence)
gensim.models.Phrases.__str__(self)
gensim.models.Phrases.add_vocab(self,sentences)
gensim.models.Phrases.learn_vocab(sentences,max_vocab_size,delimiter=b'_')
gensim.models.phrases.Phrases(self,sentences=None,min_count=5,threshold=10.0,max_vocab_size=40000000,delimiter=b'_')
gensim.models.phrases.Phrases.__getitem__(self,sentence)
gensim.models.phrases.Phrases.__init__(self,sentences=None,min_count=5,threshold=10.0,max_vocab_size=40000000,delimiter=b'_')
gensim.models.phrases.Phrases.__str__(self)
gensim.models.phrases.Phrases.add_vocab(self,sentences)
gensim.models.phrases.Phrases.learn_vocab(sentences,max_vocab_size,delimiter=b'_')


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/models/ldamulticore.py----------------------------------------
A:gensim.models.ldamulticore.logger->logging.getLogger(__name__)
A:gensim.models.ldamulticore.lencorpus->sum((1 for _ in corpus))
A:gensim.models.ldamulticore.evalafter->min(lencorpus, (self.eval_every or 0) * updateafter)
A:gensim.models.ldamulticore.updates_per_pass->max(1, lencorpus / updateafter)
A:gensim.models.ldamulticore.job_queue->Queue(maxsize=2 * self.workers)
A:gensim.models.ldamulticore.result_queue->Queue()
A:gensim.models.ldamulticore.pool->Pool(self.workers, worker_e_step, (job_queue, result_queue))
A:gensim.models.ldamulticore.other->LdaState(self.eta, self.state.sstats.shape)
A:gensim.models.ldamulticore.chunk_stream->gensim.utils.grouper(corpus, self.chunksize, as_numpy=True)
A:gensim.models.ldamulticore.(chunk_no, chunk, worker_lda)->input_queue.get()
gensim.models.LdaMulticore(self,corpus=None,num_topics=100,id2word=None,workers=None,chunksize=2000,passes=1,batch=False,alpha='symmetric',eta=None,decay=0.5,offset=1.0,eval_every=10,iterations=50,gamma_threshold=0.001)
gensim.models.LdaMulticore.update(self,corpus)
gensim.models.ldamulticore.LdaMulticore(self,corpus=None,num_topics=100,id2word=None,workers=None,chunksize=2000,passes=1,batch=False,alpha='symmetric',eta=None,decay=0.5,offset=1.0,eval_every=10,iterations=50,gamma_threshold=0.001)
gensim.models.ldamulticore.LdaMulticore.__init__(self,corpus=None,num_topics=100,id2word=None,workers=None,chunksize=2000,passes=1,batch=False,alpha='symmetric',eta=None,decay=0.5,offset=1.0,eval_every=10,iterations=50,gamma_threshold=0.001)
gensim.models.ldamulticore.LdaMulticore.update(self,corpus)
gensim.models.ldamulticore.worker_e_step(input_queue,result_queue)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/models/lsimodel.py----------------------------------------
A:gensim.models.lsimodel.logger->logging.getLogger(__name__)
A:gensim.models.lsimodel.rel_spectrum->numpy.abs(1.0 - numpy.cumsum(s / numpy.sum(s)))
A:gensim.models.lsimodel.k->clip_spectrum(s_k ** 2, self.k)
A:gensim.models.lsimodel.a->numpy.ascontiguousarray(a)
A:gensim.models.lsimodel.(u, s)->stochastic_svd(docs, k, chunksize=sys.maxsize, num_terms=m, power_iters=self.power_iters, extra_dims=self.extra_dims)
A:gensim.models.lsimodel.docs->gensim.matutils.corpus2csc(docs)
A:gensim.models.lsimodel.(ut, s, vt)->sparsesvd.sparsesvd(docs, k + 30)
A:gensim.models.lsimodel.self.u->numpy.dot(self.u, u1_k)
A:gensim.models.lsimodel.self.s->other.s.copy()
A:gensim.models.lsimodel.c->numpy.asarray(self.projection.u.T[topicno, :]).flatten()
A:gensim.models.lsimodel.(q, r)->gensim.matutils.qr_destroy(other.u)
A:gensim.models.lsimodel.(u_k, s_k, _)->scipy.linalg.svd(numpy.dot(k, k.T), full_matrices=False)
A:gensim.models.lsimodel.s_k->numpy.sqrt(s_k)
A:gensim.models.lsimodel.q->q[:, :samples].T.copy().T.copy()
A:gensim.models.lsimodel.self.num_topics->int(num_topics)
A:gensim.models.lsimodel.self.chunksize->int(chunksize)
A:gensim.models.lsimodel.self.decay->float(decay)
A:gensim.models.lsimodel.self.id2word->gensim.utils.dict_from_corpus(corpus)
A:gensim.models.lsimodel.self.num_terms->len(self.id2word)
A:gensim.models.lsimodel.self.projection->self.dispatcher.getstate()
A:gensim.models.lsimodel.dispatcher->Pyro4.Proxy('PYRONAME:gensim.lsi_dispatcher')
A:gensim.models.lsimodel.self.numworkers->len(dispatcher.getworkers())
A:gensim.models.lsimodel.update->Projection(self.num_terms, self.num_topics, corpus.tocsc(), extra_dims=self.extra_samples, power_iters=self.power_iters)
A:gensim.models.lsimodel.(update.u, update.s)->stochastic_svd(corpus, self.num_topics, num_terms=self.num_terms, chunksize=chunksize, extra_dims=self.extra_samples, power_iters=self.power_iters)
A:gensim.models.lsimodel.nnz->sum((len(doc) for doc in chunk))
A:gensim.models.lsimodel.job->gensim.matutils.corpus2csc(chunk, num_docs=len(chunk), num_terms=self.num_terms, num_nnz=nnz)
A:gensim.models.lsimodel.(is_corpus, bow)->gensim.utils.is_corpus(bow)
A:gensim.models.lsimodel.vec->gensim.matutils.corpus2csc(bow, num_terms=self.num_terms, dtype=self.projection.u.dtype)
A:gensim.models.lsimodel.topic_dist->topic_dist.reshape(-1).reshape(-1)
A:gensim.models.lsimodel.result->super(LsiModel, cls).load(fname, *args, **kwargs)
A:gensim.models.lsimodel.norm->numpy.sqrt(numpy.sum(numpy.dot(c, c)))
A:gensim.models.lsimodel.most->gensim.matutils.argsort(numpy.abs(c), topn, reverse=True)
A:gensim.models.lsimodel.topic->self.show_topic(i, topn=num_words)
A:gensim.models.lsimodel.kwargs['mmap']->kwargs.get('mmap', None)
A:gensim.models.lsimodel.projection_fname->gensim.utils.smart_extension(fname, '.projection')
A:gensim.models.lsimodel.result.projection->super(LsiModel, cls).load(projection_fname, *args, **kwargs)
A:gensim.models.lsimodel.uvec->numpy.abs(numpy.asarray(uvec).flatten())
A:gensim.models.lsimodel.weights->sorted(result[topic], key=lambda x: -abs(x[0]))
A:gensim.models.lsimodel.rank->int(rank)
A:gensim.models.lsimodel.samples->max(10, 2 * rank)
A:gensim.models.lsimodel.num_terms->int(num_terms)
A:gensim.models.lsimodel.y->y.astype(dtype).astype(dtype)
A:gensim.models.lsimodel.o->numpy.random.normal(0.0, 1.0, (n, samples)).astype(dtype)
A:gensim.models.lsimodel.(q, _)->gensim.matutils.qr_destroy(q)
A:gensim.models.lsimodel.s->numpy.sqrt(s)
A:gensim.models.lsimodel.chunk->gensim.matutils.corpus2csc(chunk, num_terms=num_terms, dtype=qt.dtype)
A:gensim.models.lsimodel.yold->q[:, :samples].T.copy().T.copy().copy()
A:gensim.models.lsimodel.qt->q[:, :samples].T.copy()
A:gensim.models.lsimodel.(u, s, vt)->scipy.linalg.svd(x)
A:gensim.models.lsimodel.x->numpy.zeros(shape=(qt.shape[0], qt.shape[0]), dtype=numpy.float64)
A:gensim.models.lsimodel.keep->clip_spectrum(s ** 2, rank, discard=eps)
A:gensim.models.lsimodel.u->numpy.dot(q, u)
gensim.models.LsiModel(self,corpus=None,num_topics=200,id2word=None,chunksize=20000,decay=1.0,distributed=False,onepass=True,power_iters=P2_EXTRA_ITERS,extra_samples=P2_EXTRA_DIMS)
gensim.models.LsiModel.__getitem__(self,bow,scaled=False,chunksize=512)
gensim.models.LsiModel.__str__(self)
gensim.models.LsiModel.add_documents(self,corpus,chunksize=None,decay=None)
gensim.models.LsiModel.load(cls,fname,*args,**kwargs)
gensim.models.LsiModel.print_debug(self,num_topics=5,num_words=10)
gensim.models.LsiModel.print_topic(self,topicno,topn=10)
gensim.models.LsiModel.print_topics(self,num_topics=5,num_words=10)
gensim.models.LsiModel.save(self,fname,*args,**kwargs)
gensim.models.LsiModel.show_topic(self,topicno,topn=10)
gensim.models.LsiModel.show_topics(self,num_topics=-1,num_words=10,log=False,formatted=True)
gensim.models.lsimodel.LsiModel(self,corpus=None,num_topics=200,id2word=None,chunksize=20000,decay=1.0,distributed=False,onepass=True,power_iters=P2_EXTRA_ITERS,extra_samples=P2_EXTRA_DIMS)
gensim.models.lsimodel.LsiModel.__getitem__(self,bow,scaled=False,chunksize=512)
gensim.models.lsimodel.LsiModel.__init__(self,corpus=None,num_topics=200,id2word=None,chunksize=20000,decay=1.0,distributed=False,onepass=True,power_iters=P2_EXTRA_ITERS,extra_samples=P2_EXTRA_DIMS)
gensim.models.lsimodel.LsiModel.__str__(self)
gensim.models.lsimodel.LsiModel.add_documents(self,corpus,chunksize=None,decay=None)
gensim.models.lsimodel.LsiModel.load(cls,fname,*args,**kwargs)
gensim.models.lsimodel.LsiModel.print_debug(self,num_topics=5,num_words=10)
gensim.models.lsimodel.LsiModel.print_topic(self,topicno,topn=10)
gensim.models.lsimodel.LsiModel.print_topics(self,num_topics=5,num_words=10)
gensim.models.lsimodel.LsiModel.save(self,fname,*args,**kwargs)
gensim.models.lsimodel.LsiModel.show_topic(self,topicno,topn=10)
gensim.models.lsimodel.LsiModel.show_topics(self,num_topics=-1,num_words=10,log=False,formatted=True)
gensim.models.lsimodel.Projection(self,m,k,docs=None,use_svdlibc=False,power_iters=P2_EXTRA_ITERS,extra_dims=P2_EXTRA_DIMS)
gensim.models.lsimodel.Projection.__init__(self,m,k,docs=None,use_svdlibc=False,power_iters=P2_EXTRA_ITERS,extra_dims=P2_EXTRA_DIMS)
gensim.models.lsimodel.Projection.empty_like(self)
gensim.models.lsimodel.Projection.merge(self,other,decay=1.0)
gensim.models.lsimodel.ascarray(a,name='')
gensim.models.lsimodel.asfarray(a,name='')
gensim.models.lsimodel.clip_spectrum(s,k,discard=0.001)
gensim.models.lsimodel.print_debug(id2token,u,s,topics,num_words=10,num_neg=None)
gensim.models.lsimodel.stochastic_svd(corpus,rank,num_terms,chunksize=20000,extra_dims=None,power_iters=0,dtype=numpy.float64,eps=1e-06)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/models/lda_worker.py----------------------------------------
A:gensim.models.lda_worker.logger->logging.getLogger('gensim.models.lda_worker')
A:gensim.models.lda_worker.self.lock_update->threading.Lock()
A:gensim.models.lda_worker.self.model->gensim.models.ldamodel.LdaModel(**model_params)
A:gensim.models.lda_worker.job->self.dispatcher.getjob(self.myid)
A:gensim.models.lda_worker.fname->os.path.join(tempfile.gettempdir(), 'lda_worker.pkl')
A:gensim.models.lda_worker.program->os.path.basename(sys.argv[0])
gensim.models.lda_worker.Worker(self)
gensim.models.lda_worker.Worker.__init__(self)
gensim.models.lda_worker.Worker.exit(self)
gensim.models.lda_worker.Worker.getstate(self)
gensim.models.lda_worker.Worker.initialize(self,myid,dispatcher,**model_params)
gensim.models.lda_worker.Worker.processjob(self,job)
gensim.models.lda_worker.Worker.requestjob(self)
gensim.models.lda_worker.Worker.reset(self,state)
gensim.models.lda_worker.main()


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/models/lsi_dispatcher.py----------------------------------------
A:gensim.models.lsi_dispatcher.logger->logging.getLogger('gensim.models.lsi_dispatcher')
A:gensim.models.lsi_dispatcher.self.jobs->Queue(maxsize=self.maxsize)
A:gensim.models.lsi_dispatcher.self.lock_update->threading.Lock()
A:gensim.models.lsi_dispatcher.self.callback->Pyro4.Proxy('PYRONAME:gensim.lsi_dispatcher')
A:gensim.models.lsi_dispatcher.worker->Pyro4.Proxy(uri)
A:gensim.models.lsi_dispatcher.workerid->len(self.workers)
A:gensim.models.lsi_dispatcher.job->self.jobs.get(block=True, timeout=1)
A:gensim.models.lsi_dispatcher.workers->list(self.workers.items())
A:gensim.models.lsi_dispatcher.result->workers[0][1].getstate()
A:gensim.models.lsi_dispatcher.program->os.path.basename(sys.argv[0])
A:gensim.models.lsi_dispatcher.maxsize->int(sys.argv[1])
gensim.models.lsi_dispatcher.Dispatcher(self,maxsize=0)
gensim.models.lsi_dispatcher.Dispatcher.__init__(self,maxsize=0)
gensim.models.lsi_dispatcher.Dispatcher.exit(self)
gensim.models.lsi_dispatcher.Dispatcher.getjob(self,worker_id)
gensim.models.lsi_dispatcher.Dispatcher.getstate(self)
gensim.models.lsi_dispatcher.Dispatcher.getworkers(self)
gensim.models.lsi_dispatcher.Dispatcher.initialize(self,**model_params)
gensim.models.lsi_dispatcher.Dispatcher.jobdone(self,workerid)
gensim.models.lsi_dispatcher.Dispatcher.jobsdone(self)
gensim.models.lsi_dispatcher.Dispatcher.putjob(self,job)
gensim.models.lsi_dispatcher.Dispatcher.reset(self)
gensim.models.lsi_dispatcher.main()


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/models/rpmodel.py----------------------------------------
A:gensim.models.rpmodel.logger->logging.getLogger('gensim.models.rpmodel')
A:gensim.models.rpmodel.self.id2word->gensim.utils.dict_from_corpus(corpus)
A:gensim.models.rpmodel.self.num_terms->len(self.id2word)
A:gensim.models.rpmodel.self.projection->self.projection.copy('F')
A:gensim.models.rpmodel.(is_corpus, bow)->gensim.utils.is_corpus(bow)
A:gensim.models.rpmodel.vec->numpy.asfortranarray(vec, dtype=numpy.float32)
A:gensim.models.rpmodel.topic_dist->numpy.dot(self.projection, vec)
gensim.models.RpModel(self,corpus,id2word=None,num_topics=300)
gensim.models.RpModel.__getitem__(self,bow)
gensim.models.RpModel.__setstate__(self,state)
gensim.models.RpModel.__str__(self)
gensim.models.RpModel.initialize(self,corpus)
gensim.models.rpmodel.RpModel(self,corpus,id2word=None,num_topics=300)
gensim.models.rpmodel.RpModel.__getitem__(self,bow)
gensim.models.rpmodel.RpModel.__init__(self,corpus,id2word=None,num_topics=300)
gensim.models.rpmodel.RpModel.__setstate__(self,state)
gensim.models.rpmodel.RpModel.__str__(self)
gensim.models.rpmodel.RpModel.initialize(self,corpus)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/models/lsi_worker.py----------------------------------------
A:gensim.models.lsi_worker.logger->logging.getLogger('gensim.models.lsi_worker')
A:gensim.models.lsi_worker.self.lock_update->threading.Lock()
A:gensim.models.lsi_worker.self.model->gensim.models.lsimodel.LsiModel(**model_params)
A:gensim.models.lsi_worker.job->self.dispatcher.getjob(self.myid)
A:gensim.models.lsi_worker.fname->os.path.join(tempfile.gettempdir(), 'lsi_worker.pkl')
A:gensim.models.lsi_worker.self.model.projection->self.model.projection.empty_like()
A:gensim.models.lsi_worker.program->os.path.basename(sys.argv[0])
gensim.models.lsi_worker.Worker(self)
gensim.models.lsi_worker.Worker.__init__(self)
gensim.models.lsi_worker.Worker.exit(self)
gensim.models.lsi_worker.Worker.getstate(self)
gensim.models.lsi_worker.Worker.initialize(self,myid,dispatcher,**model_params)
gensim.models.lsi_worker.Worker.processjob(self,job)
gensim.models.lsi_worker.Worker.requestjob(self)
gensim.models.lsi_worker.Worker.reset(self)
gensim.models.lsi_worker.main()


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/models/doc2vec.py----------------------------------------
A:gensim.models.doc2vec.logger->logging.getLogger(__name__)
A:gensim.models.doc2vec.reduced_window->model.random.randint(model.window)
A:gensim.models.doc2vec.start->max(0, pos - model.window + reduced_window)
A:gensim.models.doc2vec.window_pos->enumerate(word_vocabs[start:pos + model.window + 1 - reduced_window], start)
A:gensim.models.doc2vec.neu1e->train_cbow_pair(model, predict_word, None, l1, alpha, learn_hidden=learn_hidden, learn_vectors=False)
A:gensim.models.doc2vec.doctag_len->len(doctag_indexes)
A:gensim.models.doc2vec.word_context_len->len(word_context_indexes)
A:gensim.models.doc2vec.l1->concatenate((doctag_vectors[doctag_indexes], word_vectors[word_context_indexes])).ravel()
A:gensim.models.doc2vec.e_locks->concatenate((doctag_locks[doctag_indexes], word_locks[word_context_indexes]))
A:gensim.models.doc2vec.self.count->max(self.count, len(self.index2doctag))
A:gensim.models.doc2vec.self.doctags[key]->Doctag(len(self.index2doctag), document_length, 1)
A:gensim.models.doc2vec.length->max(len(self.doctags), self.count)
A:gensim.models.doc2vec.self.doctag_syn0->empty((length, model.vector_size), dtype=REAL)
A:gensim.models.doc2vec.self.doctag_syn0_lockf->ones((length,), dtype=REAL)
A:gensim.models.doc2vec.self.doctag_syn0[i]->model.seeded_vector(seed)
A:gensim.models.doc2vec.self.doctag_syn0norm->empty(self.doctag_syn0.shape, dtype=REAL)
A:gensim.models.doc2vec.mean->gensim.matutils.unitvec(vectors.mean(axis=0)).astype(REAL)
A:gensim.models.doc2vec.dists->dot(vectors, mean)
A:gensim.models.doc2vec.best->gensim.matutils.argsort(dists, topn=topn + len(all_docs), reverse=True)
A:gensim.models.doc2vec.vectors->vstack((self.doctag_syn0norm[self._int_index(doc)] for doc in docs)).astype(REAL)
A:gensim.models.doc2vec.interval_start->default_timer()
A:gensim.models.doc2vec.vocab->defaultdict(int)
A:gensim.models.doc2vec.document_length->len(document.words)
A:gensim.models.doc2vec.indexed_doctags->self.docvecs.indexed_doctags(doc.tags)
A:gensim.models.doc2vec.doctag_vectors->empty((1, self.vector_size), dtype=REAL)
A:gensim.models.doc2vec.doctag_vectors[0]->self.seeded_vector(' '.join(doc_words))
A:gensim.models.doc2vec.doctag_locks->ones(1, dtype=REAL)
A:gensim.models.doc2vec.work->zeros(self.layer1_size, dtype=REAL)
A:gensim.models.doc2vec.neu1->gensim.matutils.zeros_aligned(self.layer1_size, dtype=REAL)
A:gensim.models.doc2vec.report['doctag_lookup']->self.docvecs.estimated_lookup_memory()
A:gensim.models.doc2vec.fname->os.path.join(self.dirname, fname)
A:gensim.models.doc2vec.line->gensim.utils.to_unicode(line)
gensim.models.Doc2Vec(self,documents=None,size=300,alpha=0.025,window=8,min_count=5,max_vocab_size=None,sample=0,seed=1,workers=1,min_alpha=0.0001,dm=1,hs=1,negative=0,dbow_words=0,dm_mean=0,dm_concat=0,dm_tag_count=1,docvecs=None,docvecs_mapfile=None,comment=None,trim_rule=None,**kwargs)
gensim.models.Doc2Vec.__str__(self)
gensim.models.Doc2Vec._do_train_job(self,job,alpha,inits)
gensim.models.Doc2Vec._raw_word_count(self,items)
gensim.models.Doc2Vec.clear_sims(self)
gensim.models.Doc2Vec.dbow(self)
gensim.models.Doc2Vec.dm(self)
gensim.models.Doc2Vec.estimate_memory(self,vocab_size=None,report=None)
gensim.models.Doc2Vec.infer_vector(self,doc_words,alpha=0.1,min_alpha=0.0001,steps=5)
gensim.models.Doc2Vec.reset_from(self,other_model)
gensim.models.Doc2Vec.reset_weights(self)
gensim.models.Doc2Vec.scan_vocab(self,documents,progress_per=10000,trim_rule=None)
gensim.models.doc2vec.Doc2Vec(self,documents=None,size=300,alpha=0.025,window=8,min_count=5,max_vocab_size=None,sample=0,seed=1,workers=1,min_alpha=0.0001,dm=1,hs=1,negative=0,dbow_words=0,dm_mean=0,dm_concat=0,dm_tag_count=1,docvecs=None,docvecs_mapfile=None,comment=None,trim_rule=None,**kwargs)
gensim.models.doc2vec.Doc2Vec.__init__(self,documents=None,size=300,alpha=0.025,window=8,min_count=5,max_vocab_size=None,sample=0,seed=1,workers=1,min_alpha=0.0001,dm=1,hs=1,negative=0,dbow_words=0,dm_mean=0,dm_concat=0,dm_tag_count=1,docvecs=None,docvecs_mapfile=None,comment=None,trim_rule=None,**kwargs)
gensim.models.doc2vec.Doc2Vec.__str__(self)
gensim.models.doc2vec.Doc2Vec._do_train_job(self,job,alpha,inits)
gensim.models.doc2vec.Doc2Vec._raw_word_count(self,items)
gensim.models.doc2vec.Doc2Vec.clear_sims(self)
gensim.models.doc2vec.Doc2Vec.dbow(self)
gensim.models.doc2vec.Doc2Vec.dm(self)
gensim.models.doc2vec.Doc2Vec.estimate_memory(self,vocab_size=None,report=None)
gensim.models.doc2vec.Doc2Vec.infer_vector(self,doc_words,alpha=0.1,min_alpha=0.0001,steps=5)
gensim.models.doc2vec.Doc2Vec.reset_from(self,other_model)
gensim.models.doc2vec.Doc2Vec.reset_weights(self)
gensim.models.doc2vec.Doc2Vec.scan_vocab(self,documents,progress_per=10000,trim_rule=None)
gensim.models.doc2vec.Doctag(namedtuple('Doctag','index,word_count,doc_count'))
gensim.models.doc2vec.Doctag.repeat(self,word_count)
gensim.models.doc2vec.DocvecsArray(self,mapfile_path=None)
gensim.models.doc2vec.DocvecsArray.__contains__(self,index)
gensim.models.doc2vec.DocvecsArray.__getitem__(self,index)
gensim.models.doc2vec.DocvecsArray.__init__(self,mapfile_path=None)
gensim.models.doc2vec.DocvecsArray.__len__(self)
gensim.models.doc2vec.DocvecsArray._int_index(self,index,missing=None)
gensim.models.doc2vec.DocvecsArray._key_index(self,i_index,missing=None)
gensim.models.doc2vec.DocvecsArray.borrow_from(self,other_docvecs)
gensim.models.doc2vec.DocvecsArray.clear_sims(self)
gensim.models.doc2vec.DocvecsArray.doesnt_match(self,docs)
gensim.models.doc2vec.DocvecsArray.estimated_lookup_memory(self)
gensim.models.doc2vec.DocvecsArray.indexed_doctags(self,doctag_tokens)
gensim.models.doc2vec.DocvecsArray.init_sims(self,replace=False)
gensim.models.doc2vec.DocvecsArray.most_similar(self,positive=[],negative=[],topn=10,clip_start=0,clip_end=None)
gensim.models.doc2vec.DocvecsArray.n_similarity(self,ds1,ds2)
gensim.models.doc2vec.DocvecsArray.note_doctag(self,key,document_no,document_length)
gensim.models.doc2vec.DocvecsArray.reset_weights(self,model)
gensim.models.doc2vec.DocvecsArray.similarity(self,d1,d2)
gensim.models.doc2vec.DocvecsArray.trained_item(self,indexed_tuple)
gensim.models.doc2vec.LabeledSentence(self,*args,**kwargs)
gensim.models.doc2vec.LabeledSentence.__init__(self,*args,**kwargs)
gensim.models.doc2vec.TaggedBrownCorpus(self,dirname)
gensim.models.doc2vec.TaggedBrownCorpus.__init__(self,dirname)
gensim.models.doc2vec.TaggedBrownCorpus.__iter__(self)
gensim.models.doc2vec.TaggedDocument(namedtuple('TaggedDocument','wordstags'))
gensim.models.doc2vec.TaggedDocument.__str__(self)
gensim.models.doc2vec.TaggedLineDocument(self,source)
gensim.models.doc2vec.TaggedLineDocument.__init__(self,source)
gensim.models.doc2vec.TaggedLineDocument.__iter__(self)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/models/__init__.py----------------------------------------
A:gensim.models.__init__.(is_corpus, bow)->gensim.utils.is_corpus(bow)
gensim.models.__init__.VocabTransform(self,old2new,id2token=None)
gensim.models.__init__.VocabTransform.__getitem__(self,bow)
gensim.models.__init__.VocabTransform.__init__(self,old2new,id2token=None)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/models/logentropy_model.py----------------------------------------
A:gensim.models.logentropy_model.logger->logging.getLogger('gensim.models.logentropy_model')
A:gensim.models.logentropy_model.(is_corpus, bow)->gensim.utils.is_corpus(bow)
A:gensim.models.logentropy_model.vector->gensim.matutils.unitvec(vector)
gensim.models.LogEntropyModel(self,corpus,id2word=None,normalize=True)
gensim.models.LogEntropyModel.__getitem__(self,bow)
gensim.models.LogEntropyModel.__str__(self)
gensim.models.LogEntropyModel.initialize(self,corpus)
gensim.models.logentropy_model.LogEntropyModel(self,corpus,id2word=None,normalize=True)
gensim.models.logentropy_model.LogEntropyModel.__getitem__(self,bow)
gensim.models.logentropy_model.LogEntropyModel.__init__(self,corpus,id2word=None,normalize=True)
gensim.models.logentropy_model.LogEntropyModel.__str__(self)
gensim.models.logentropy_model.LogEntropyModel.initialize(self,corpus)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/models/word2vec.py----------------------------------------
A:gensim.models.word2vec.logger->logging.getLogger('gensim.models.word2vec')
A:gensim.models.word2vec.reduced_window->Word2Vec(Text8Corpus(infile), size=200, min_count=5, workers=1).random.randint(model.window)
A:gensim.models.word2vec.start->max(0, pos - model.window)
A:gensim.models.word2vec.window_pos->enumerate(sentence[start:pos + model.window + 1], start)
A:gensim.models.word2vec.l1->np_sum(model.syn0[word2_indices], axis=0)
A:gensim.models.word2vec.neu1e->zeros(l1.shape)
A:gensim.models.word2vec.l2a->deepcopy(model.syn1[word.point])
A:gensim.models.word2vec.w->Word2Vec(Text8Corpus(infile), size=200, min_count=5, workers=1).cum_table.searchsorted(model.random.randint(model.cum_table[-1]))
A:gensim.models.word2vec.self.sg->int(sg)
A:gensim.models.word2vec.self.vector_size->int(size)
A:gensim.models.word2vec.self.layer1_size->int(size)
A:gensim.models.word2vec.self.alpha->float(alpha)
A:gensim.models.word2vec.self.window->int(window)
A:gensim.models.word2vec.self.random->numpy.random.RandomState(seed)
A:gensim.models.word2vec.self.cbow_mean->int(cbow_mean)
A:gensim.models.word2vec.vocab_size->len(self.index2word)
A:gensim.models.word2vec.self.cum_table->zeros(vocab_size, dtype=uint32)
A:gensim.models.word2vec.train_words_pow->float(sum([self.vocab[word].count ** power for word in self.vocab]))
A:gensim.models.word2vec.self.cum_table[word_index]->round(cumulative * domain)
A:gensim.models.word2vec.heap->list(itervalues(self.vocab))
A:gensim.models.word2vec.(node, codes, points)->stack.pop()
A:gensim.models.word2vec.max_depth->max(len(codes), max_depth)
A:gensim.models.word2vec.points->array(list(points) + [node.index - len(self.vocab)], dtype=uint32)
A:gensim.models.word2vec.vocab->defaultdict(int)
A:gensim.models.word2vec.self.vocab[word]->Vocab(count=v, index=len(self.index2word))
A:gensim.models.word2vec.threshold_count->int(sample * (3 + sqrt(5)) / 2)
A:gensim.models.word2vec.self.vocab[w].sample_int->int(round(word_probability * 2 ** 32))
A:gensim.models.word2vec.self.raw_vocab->defaultdict(int)
A:gensim.models.word2vec.report_values['memory']->self.estimate_memory(vocab_size=len(retain_words))
A:gensim.models.word2vec.v.index->len(self.vocab)
A:gensim.models.word2vec.self.neg_labels->zeros(self.negative + 1)
A:gensim.models.word2vec.sentences->gensim.utils.RepeatCorpusNTimes(sentences, self.iter)
A:gensim.models.word2vec.work->zeros(1, dtype=REAL)
A:gensim.models.word2vec.neu1->gensim.matutils.zeros_aligned(self.layer1_size, dtype=REAL)
A:gensim.models.word2vec.(tally, raw_tally)->self._do_train_job(items, alpha, inits)
A:gensim.models.word2vec.init->worker_init()
A:gensim.models.word2vec.job->FakeJobQueue(worker_init, worker_one_job).get()
A:gensim.models.word2vec.job_queue->FakeJobQueue(worker_init, worker_one_job)
A:gensim.models.word2vec.progress_queue->Queue(maxsize=(queue_factor + 1) * self.workers)
A:gensim.models.word2vec.jobs_source->enumerate(utils.grouper(enumerate(sentences), chunksize))
A:gensim.models.word2vec.(job_no, items)->next(jobs_source)
A:gensim.models.word2vec.next_alpha->max(next_alpha, self.min_alpha)
A:gensim.models.word2vec.(examples, trained_words, raw_words)->Queue(maxsize=(queue_factor + 1) * self.workers).get(push_done)
A:gensim.models.word2vec.sentence_scores[id]->self._score_job_words(sentence, inits)
A:gensim.models.word2vec.sentence_scores->gensim.matutils.zeros_aligned(total_sentences, dtype=REAL)
A:gensim.models.word2vec.ns->Queue(maxsize=(queue_factor + 1) * self.workers).get(push_done)
A:gensim.models.word2vec.self.syn0->empty((len(self.vocab), self.vector_size), dtype=REAL)
A:gensim.models.word2vec.self.syn0[i]->self.seeded_vector(self.index2word[i] + str(self.seed))
A:gensim.models.word2vec.self.syn1->zeros((len(self.vocab), self.layer1_size), dtype=REAL)
A:gensim.models.word2vec.self.syn1neg->zeros((len(self.vocab), self.layer1_size), dtype=REAL)
A:gensim.models.word2vec.self.syn0_lockf->ones(len(self.vocab), dtype=REAL)
A:gensim.models.word2vec.once->numpy.random.RandomState(uint32(self.hashfxn(seed_string)))
A:gensim.models.word2vec.(word, count)->gensim.utils.to_unicode(line).strip().split()
A:gensim.models.word2vec.counts[word]->int(count)
A:gensim.models.word2vec.header->gensim.utils.to_unicode(fin.readline(), encoding=encoding)
A:gensim.models.word2vec.(vocab_size, vector_size)->map(int, header.split())
A:gensim.models.word2vec.result->cls(size=vector_size)
A:gensim.models.word2vec.result.syn0->ascontiguousarray(result.syn0[:len(result.vocab)])
A:gensim.models.word2vec.word_id->len(result.vocab)
A:gensim.models.word2vec.result.vocab[word]->Vocab(index=word_id, count=None)
A:gensim.models.word2vec.ch->fin.read(1)
A:gensim.models.word2vec.word->gensim.utils.to_unicode(b''.join(word), encoding=encoding)
A:gensim.models.word2vec.weights->fromstring(fin.read(binary_len), dtype=REAL)
A:gensim.models.word2vec.parts->gensim.utils.to_unicode(line.rstrip(), encoding=encoding).split(' ')
A:gensim.models.word2vec.mean->gensim.matutils.unitvec(vectors.mean(axis=0)).astype(REAL)
A:gensim.models.word2vec.dists->dot(vectors, mean)
A:gensim.models.word2vec.best->gensim.matutils.argsort(dists, topn=topn + len(all_words), reverse=True)
A:gensim.models.word2vec.all_words->set()
A:gensim.models.word2vec.vectors->vstack((self.syn0norm[self.vocab[word].index] for word in words)).astype(REAL)
A:gensim.models.word2vec.self.syn0norm->(self.syn0 / sqrt((self.syn0 ** 2).sum(-1))[..., newaxis]).astype(REAL)
A:gensim.models.word2vec.report['total']->sum(report.values())
A:gensim.models.word2vec.ok_vocab->dict(sorted(iteritems(self.vocab), key=lambda item: -item[1].count)[:restrict_vocab])
A:gensim.models.word2vec.ok_index->set((v.index for v in itervalues(ok_vocab)))
A:gensim.models.word2vec.line->gensim.utils.to_unicode(line).split()
A:gensim.models.word2vec.ignore->set((self.vocab[v].index for v in [a, b, c]))
A:gensim.models.word2vec.sims->most_similar(self, positive=[b, c], negative=[a], topn=False)
A:gensim.models.word2vec.kwargs['ignore']->kwargs.get('ignore', ['syn0norm', 'table', 'cum_table'])
A:gensim.models.word2vec.model->Word2Vec(Text8Corpus(infile), size=200, min_count=5, workers=1)
A:gensim.models.word2vec.v.sample_int->int(round(v.sample_probability * 2 ** 32))
A:gensim.models.word2vec.model.syn0_lockf->ones(len(model.syn0), dtype=REAL)
A:gensim.models.word2vec.model.random->numpy.random.RandomState(model.seed)
A:gensim.models.word2vec.self.inits->init_fn()
A:gensim.models.word2vec.fname->os.path.join(self.dirname, fname)
A:gensim.models.word2vec.last_token->text.rfind(b' ')
A:gensim.models.word2vec.program->os.path.basename(sys.argv[0])
gensim.models.Word2Vec(self,sentences=None,size=100,alpha=0.025,window=5,min_count=5,max_vocab_size=None,sample=0,seed=1,workers=1,min_alpha=0.0001,sg=1,hs=1,negative=0,cbow_mean=0,hashfxn=hash,iter=1,null_word=0,trim_rule=None)
gensim.models.Word2Vec.__contains__(self,word)
gensim.models.Word2Vec.__getitem__(self,words)
gensim.models.Word2Vec.__str__(self)
gensim.models.Word2Vec._do_train_job(self,job,alpha,inits)
gensim.models.Word2Vec._raw_word_count(self,items)
gensim.models.Word2Vec._score_job_words(self,sentence,inits)
gensim.models.Word2Vec.accuracy(self,questions,restrict_vocab=30000,most_similar=most_similar)
gensim.models.Word2Vec.build_vocab(self,sentences,keep_raw_vocab=False,trim_rule=None)
gensim.models.Word2Vec.clear_sims(self)
gensim.models.Word2Vec.create_binary_tree(self)
gensim.models.Word2Vec.doesnt_match(self,words)
gensim.models.Word2Vec.estimate_memory(self,vocab_size=None,report=None)
gensim.models.Word2Vec.finalize_vocab(self)
gensim.models.Word2Vec.init_sims(self,replace=False)
gensim.models.Word2Vec.intersect_word2vec_format(self,fname,binary=False,encoding='utf8')
gensim.models.Word2Vec.load(cls,*args,**kwargs)
gensim.models.Word2Vec.load_word2vec_format(cls,fname,fvocab=None,binary=False,norm_only=True,encoding='utf8')
gensim.models.Word2Vec.log_accuracy(section)
gensim.models.Word2Vec.make_cum_table(self,power=0.75,domain=2**31-1)
gensim.models.Word2Vec.most_similar(self,positive=[],negative=[],topn=10)
gensim.models.Word2Vec.most_similar_cosmul(self,positive=[],negative=[],topn=10)
gensim.models.Word2Vec.n_similarity(self,ws1,ws2)
gensim.models.Word2Vec.reset_from(self,other_model)
gensim.models.Word2Vec.reset_weights(self)
gensim.models.Word2Vec.save(self,*args,**kwargs)
gensim.models.Word2Vec.save_word2vec_format(self,fname,fvocab=None,binary=False)
gensim.models.Word2Vec.scale_vocab(self,min_count=None,sample=None,dry_run=False,keep_raw_vocab=False,trim_rule=None)
gensim.models.Word2Vec.scan_vocab(self,sentences,progress_per=10000,trim_rule=None)
gensim.models.Word2Vec.score(self,sentences,total_sentences=int(1000000000.0),chunksize=100,queue_factor=2,report_delay=1)
gensim.models.Word2Vec.seeded_vector(self,seed_string)
gensim.models.Word2Vec.similarity(self,w1,w2)
gensim.models.Word2Vec.train(self,sentences,total_words=None,word_count=0,chunksize=100,total_examples=None,queue_factor=2,report_delay=1)
gensim.models.word2vec.BrownCorpus(self,dirname)
gensim.models.word2vec.BrownCorpus.__init__(self,dirname)
gensim.models.word2vec.BrownCorpus.__iter__(self)
gensim.models.word2vec.FakeJobQueue(self,init_fn,job_fn)
gensim.models.word2vec.FakeJobQueue.__init__(self,init_fn,job_fn)
gensim.models.word2vec.FakeJobQueue.put(self,job)
gensim.models.word2vec.LineSentence(self,source,max_sentence_length=10000,limit=None)
gensim.models.word2vec.LineSentence.__init__(self,source,max_sentence_length=10000,limit=None)
gensim.models.word2vec.LineSentence.__iter__(self)
gensim.models.word2vec.Text8Corpus(self,fname,max_sentence_length=1000)
gensim.models.word2vec.Text8Corpus.__init__(self,fname,max_sentence_length=1000)
gensim.models.word2vec.Text8Corpus.__iter__(self)
gensim.models.word2vec.Vocab(self,**kwargs)
gensim.models.word2vec.Vocab.__init__(self,**kwargs)
gensim.models.word2vec.Vocab.__lt__(self,other)
gensim.models.word2vec.Vocab.__str__(self)
gensim.models.word2vec.Word2Vec(self,sentences=None,size=100,alpha=0.025,window=5,min_count=5,max_vocab_size=None,sample=0,seed=1,workers=1,min_alpha=0.0001,sg=1,hs=1,negative=0,cbow_mean=0,hashfxn=hash,iter=1,null_word=0,trim_rule=None)
gensim.models.word2vec.Word2Vec.__contains__(self,word)
gensim.models.word2vec.Word2Vec.__getitem__(self,words)
gensim.models.word2vec.Word2Vec.__init__(self,sentences=None,size=100,alpha=0.025,window=5,min_count=5,max_vocab_size=None,sample=0,seed=1,workers=1,min_alpha=0.0001,sg=1,hs=1,negative=0,cbow_mean=0,hashfxn=hash,iter=1,null_word=0,trim_rule=None)
gensim.models.word2vec.Word2Vec.__str__(self)
gensim.models.word2vec.Word2Vec._do_train_job(self,job,alpha,inits)
gensim.models.word2vec.Word2Vec._raw_word_count(self,items)
gensim.models.word2vec.Word2Vec._score_job_words(self,sentence,inits)
gensim.models.word2vec.Word2Vec.accuracy(self,questions,restrict_vocab=30000,most_similar=most_similar)
gensim.models.word2vec.Word2Vec.build_vocab(self,sentences,keep_raw_vocab=False,trim_rule=None)
gensim.models.word2vec.Word2Vec.clear_sims(self)
gensim.models.word2vec.Word2Vec.create_binary_tree(self)
gensim.models.word2vec.Word2Vec.doesnt_match(self,words)
gensim.models.word2vec.Word2Vec.estimate_memory(self,vocab_size=None,report=None)
gensim.models.word2vec.Word2Vec.finalize_vocab(self)
gensim.models.word2vec.Word2Vec.init_sims(self,replace=False)
gensim.models.word2vec.Word2Vec.intersect_word2vec_format(self,fname,binary=False,encoding='utf8')
gensim.models.word2vec.Word2Vec.load(cls,*args,**kwargs)
gensim.models.word2vec.Word2Vec.load_word2vec_format(cls,fname,fvocab=None,binary=False,norm_only=True,encoding='utf8')
gensim.models.word2vec.Word2Vec.log_accuracy(section)
gensim.models.word2vec.Word2Vec.make_cum_table(self,power=0.75,domain=2**31-1)
gensim.models.word2vec.Word2Vec.most_similar(self,positive=[],negative=[],topn=10)
gensim.models.word2vec.Word2Vec.most_similar_cosmul(self,positive=[],negative=[],topn=10)
gensim.models.word2vec.Word2Vec.n_similarity(self,ws1,ws2)
gensim.models.word2vec.Word2Vec.reset_from(self,other_model)
gensim.models.word2vec.Word2Vec.reset_weights(self)
gensim.models.word2vec.Word2Vec.save(self,*args,**kwargs)
gensim.models.word2vec.Word2Vec.save_word2vec_format(self,fname,fvocab=None,binary=False)
gensim.models.word2vec.Word2Vec.scale_vocab(self,min_count=None,sample=None,dry_run=False,keep_raw_vocab=False,trim_rule=None)
gensim.models.word2vec.Word2Vec.scan_vocab(self,sentences,progress_per=10000,trim_rule=None)
gensim.models.word2vec.Word2Vec.score(self,sentences,total_sentences=int(1000000000.0),chunksize=100,queue_factor=2,report_delay=1)
gensim.models.word2vec.Word2Vec.seeded_vector(self,seed_string)
gensim.models.word2vec.Word2Vec.similarity(self,w1,w2)
gensim.models.word2vec.Word2Vec.train(self,sentences,total_words=None,word_count=0,chunksize=100,total_examples=None,queue_factor=2,report_delay=1)
gensim.models.word2vec.score_cbow_pair(model,word,word2_indices,l1)
gensim.models.word2vec.score_sg_pair(model,word,word2)
gensim.models.word2vec.train_cbow_pair(model,word,input_word_indices,l1,alpha,learn_vectors=True,learn_hidden=True)
gensim.models.word2vec.train_sg_pair(model,word,context_index,alpha,learn_vectors=True,learn_hidden=True,context_vectors=None,context_locks=None)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/models/lda_dispatcher.py----------------------------------------
A:gensim.models.lda_dispatcher.logger->logging.getLogger('gensim.models.lda_dispatcher')
A:gensim.models.lda_dispatcher.self.jobs->Queue(maxsize=self.maxsize)
A:gensim.models.lda_dispatcher.self.lock_update->threading.Lock()
A:gensim.models.lda_dispatcher.self.callback->Pyro4.Proxy('PYRONAME:gensim.lda_dispatcher')
A:gensim.models.lda_dispatcher.worker->Pyro4.Proxy(uri)
A:gensim.models.lda_dispatcher.workerid->len(self.workers)
A:gensim.models.lda_dispatcher.job->self.jobs.get(block=True, timeout=1)
A:gensim.models.lda_dispatcher.workers->list(self.workers.values())
A:gensim.models.lda_dispatcher.result->workers[0].getstate()
A:gensim.models.lda_dispatcher.program->os.path.basename(sys.argv[0])
A:gensim.models.lda_dispatcher.maxsize->int(sys.argv[1])
gensim.models.lda_dispatcher.Dispatcher(self,maxsize=MAX_JOBS_QUEUE)
gensim.models.lda_dispatcher.Dispatcher.__init__(self,maxsize=MAX_JOBS_QUEUE)
gensim.models.lda_dispatcher.Dispatcher.exit(self)
gensim.models.lda_dispatcher.Dispatcher.getjob(self,worker_id)
gensim.models.lda_dispatcher.Dispatcher.getstate(self)
gensim.models.lda_dispatcher.Dispatcher.getworkers(self)
gensim.models.lda_dispatcher.Dispatcher.initialize(self,**model_params)
gensim.models.lda_dispatcher.Dispatcher.jobdone(self,workerid)
gensim.models.lda_dispatcher.Dispatcher.jobsdone(self)
gensim.models.lda_dispatcher.Dispatcher.putjob(self,job)
gensim.models.lda_dispatcher.Dispatcher.reset(self,state)
gensim.models.lda_dispatcher.main()


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/models/wrappers/dtmmodel.py----------------------------------------
A:gensim.models.wrappers.dtmmodel.logger->logging.getLogger(__name__)
A:gensim.models.wrappers.dtmmodel.self.id2word->gensim.utils.dict_from_corpus(corpus)
A:gensim.models.wrappers.dtmmodel.self.num_terms->len(self.id2word)
A:gensim.models.wrappers.dtmmodel.lencorpus->sum((1 for _ in corpus))
A:gensim.models.wrappers.dtmmodel.prefix->os.path.join(tempfile.gettempdir(), rand_prefix)
A:gensim.models.wrappers.dtmmodel.self.lda_sequence_min_iter->int(lda_sequence_min_iter)
A:gensim.models.wrappers.dtmmodel.self.lda_sequence_max_iter->int(lda_sequence_max_iter)
A:gensim.models.wrappers.dtmmodel.self.lda_max_em_iter->int(lda_max_em_iter)
A:gensim.models.wrappers.dtmmodel.self.initialize_lda->str(initialize_lda).lower()
A:gensim.models.wrappers.dtmmodel.arguments->'--ntopics={p0} --model={mofrl}  --mode={p1} --initialize_lda={p2} --corpus_prefix={p3} --outname={p4} --alpha={p5}'.format(p0=self.num_topics, mofrl=model, p1=mode, p2=self.initialize_lda, p3=self.fcorpus(), p4=self.foutname(), p5=self.alpha)
A:gensim.models.wrappers.dtmmodel.params->'--lda_max_em_iter={p0} --lda_sequence_min_iter={p1}  --lda_sequence_max_iter={p2} --top_chain_var={p3} --rng_seed={p4} '.format(p0=self.lda_max_em_iter, p1=self.lda_sequence_min_iter, p2=self.lda_sequence_max_iter, p3=self.top_chain_var, p4=self.rng_seed)
A:gensim.models.wrappers.dtmmodel.p->Popen([self.dtm_path] + arguments.split(), stdout=PIPE, stderr=PIPE)
A:gensim.models.wrappers.dtmmodel.self.em_steps->numpy.loadtxt(self.fem_steps())
A:gensim.models.wrappers.dtmmodel.self.init_alpha->numpy.loadtxt(self.finit_alpha())
A:gensim.models.wrappers.dtmmodel.self.init_beta->numpy.loadtxt(self.finit_beta())
A:gensim.models.wrappers.dtmmodel.self.init_ss->numpy.loadtxt(self.flda_ss())
A:gensim.models.wrappers.dtmmodel.self.lhood_->numpy.loadtxt(self.fout_liklihoods())
A:gensim.models.wrappers.dtmmodel.self.gamma_->numpy.loadtxt(self.fout_gamma())
A:gensim.models.wrappers.dtmmodel.self.lambda_->numpy.zeros((self.num_topics, self.num_terms * len(self.time_slices)))
A:gensim.models.wrappers.dtmmodel.self.obs_->numpy.zeros((self.num_topics, self.num_terms * len(self.time_slices)))
A:gensim.models.wrappers.dtmmodel.self.lambda_[t, :]->numpy.loadtxt(self.fout_prob().format(i=topic))
A:gensim.models.wrappers.dtmmodel.self.obs_[t, :]->numpy.loadtxt(self.fout_observations().format(i=topic))
A:gensim.models.wrappers.dtmmodel.influence->numpy.loadtxt(self.fout_influence().format(i=stamp))
A:gensim.models.wrappers.dtmmodel.chosen_topics->range(topics)
A:gensim.models.wrappers.dtmmodel.topics->min(topics, self.num_topics)
A:gensim.models.wrappers.dtmmodel.times->min(times, len(self.time_slices))
A:gensim.models.wrappers.dtmmodel.chosen_times->range(times)
A:gensim.models.wrappers.dtmmodel.topic->numpy.exp(topic)
A:gensim.models.wrappers.dtmmodel.bestn->gensim.matutils.argsort(topic, topn, reverse=True)
gensim.models.wrappers.DtmModel(self,dtm_path,corpus=None,time_slices=None,mode='fit',model='dtm',num_topics=100,id2word=None,prefix=None,lda_sequence_min_iter=6,lda_sequence_max_iter=20,lda_max_em_iter=10,alpha=0.01,top_chain_var=0.005,rng_seed=0,initialize_lda=False)
gensim.models.wrappers.DtmModel.convert_input(self,corpus,time_slices)
gensim.models.wrappers.DtmModel.fcorpus(self)
gensim.models.wrappers.DtmModel.fcorpustxt(self)
gensim.models.wrappers.DtmModel.fem_steps(self)
gensim.models.wrappers.DtmModel.finit_alpha(self)
gensim.models.wrappers.DtmModel.finit_beta(self)
gensim.models.wrappers.DtmModel.flda_ss(self)
gensim.models.wrappers.DtmModel.fout_gamma(self)
gensim.models.wrappers.DtmModel.fout_influence(self)
gensim.models.wrappers.DtmModel.fout_liklihoods(self)
gensim.models.wrappers.DtmModel.fout_observations(self)
gensim.models.wrappers.DtmModel.fout_prob(self)
gensim.models.wrappers.DtmModel.foutname(self)
gensim.models.wrappers.DtmModel.ftimeslices(self)
gensim.models.wrappers.DtmModel.print_topic(self,topicid,time,topn=10)
gensim.models.wrappers.DtmModel.print_topics(self,topics=10,times=5,topn=10)
gensim.models.wrappers.DtmModel.show_topic(self,topicid,time,topn=50)
gensim.models.wrappers.DtmModel.show_topics(self,topics=10,times=5,topn=10,log=False,formatted=True)
gensim.models.wrappers.DtmModel.train(self,corpus,time_slices,mode,model)
gensim.models.wrappers.dtmmodel.DtmModel(self,dtm_path,corpus=None,time_slices=None,mode='fit',model='dtm',num_topics=100,id2word=None,prefix=None,lda_sequence_min_iter=6,lda_sequence_max_iter=20,lda_max_em_iter=10,alpha=0.01,top_chain_var=0.005,rng_seed=0,initialize_lda=False)
gensim.models.wrappers.dtmmodel.DtmModel.__init__(self,dtm_path,corpus=None,time_slices=None,mode='fit',model='dtm',num_topics=100,id2word=None,prefix=None,lda_sequence_min_iter=6,lda_sequence_max_iter=20,lda_max_em_iter=10,alpha=0.01,top_chain_var=0.005,rng_seed=0,initialize_lda=False)
gensim.models.wrappers.dtmmodel.DtmModel.convert_input(self,corpus,time_slices)
gensim.models.wrappers.dtmmodel.DtmModel.fcorpus(self)
gensim.models.wrappers.dtmmodel.DtmModel.fcorpustxt(self)
gensim.models.wrappers.dtmmodel.DtmModel.fem_steps(self)
gensim.models.wrappers.dtmmodel.DtmModel.finit_alpha(self)
gensim.models.wrappers.dtmmodel.DtmModel.finit_beta(self)
gensim.models.wrappers.dtmmodel.DtmModel.flda_ss(self)
gensim.models.wrappers.dtmmodel.DtmModel.fout_gamma(self)
gensim.models.wrappers.dtmmodel.DtmModel.fout_influence(self)
gensim.models.wrappers.dtmmodel.DtmModel.fout_liklihoods(self)
gensim.models.wrappers.dtmmodel.DtmModel.fout_observations(self)
gensim.models.wrappers.dtmmodel.DtmModel.fout_prob(self)
gensim.models.wrappers.dtmmodel.DtmModel.foutname(self)
gensim.models.wrappers.dtmmodel.DtmModel.ftimeslices(self)
gensim.models.wrappers.dtmmodel.DtmModel.print_topic(self,topicid,time,topn=10)
gensim.models.wrappers.dtmmodel.DtmModel.print_topics(self,topics=10,times=5,topn=10)
gensim.models.wrappers.dtmmodel.DtmModel.show_topic(self,topicid,time,topn=50)
gensim.models.wrappers.dtmmodel.DtmModel.show_topics(self,topics=10,times=5,topn=10,log=False,formatted=True)
gensim.models.wrappers.dtmmodel.DtmModel.train(self,corpus,time_slices,mode,model)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/models/wrappers/ldamallet.py----------------------------------------
A:gensim.models.wrappers.ldamallet.logger->logging.getLogger(__name__)
A:gensim.models.wrappers.ldamallet.weights->float(sum([weight for (_, weight) in doc]))
A:gensim.models.wrappers.ldamallet.self.id2word->gensim.utils.dict_from_corpus(corpus)
A:gensim.models.wrappers.ldamallet.self.num_terms->len(self.id2word)
A:gensim.models.wrappers.ldamallet.prefix->os.path.join(tempfile.gettempdir(), rand_prefix)
A:gensim.models.wrappers.ldamallet.tokens->sum(([str(tokenid)] * int(cnt) for (tokenid, cnt) in doc), [])
A:gensim.models.wrappers.ldamallet.self.word_topics->self.load_word_topics()
A:gensim.models.wrappers.ldamallet.(is_corpus, corpus)->gensim.utils.is_corpus(bow)
A:gensim.models.wrappers.ldamallet.retval->call(cmd, shell=True)
A:gensim.models.wrappers.ldamallet.result->list(read_doctopics(self.fdoctopics() + '.infer'))
A:gensim.models.wrappers.ldamallet.wordtopics->numpy.zeros((self.num_topics, self.num_terms), dtype=numpy.float32)
A:gensim.models.wrappers.ldamallet._->next(fin)
A:gensim.models.wrappers.ldamallet.self.alpha->numpy.array([float(val) for val in next(fin).split()[2:]])
A:gensim.models.wrappers.ldamallet.line->gensim.utils.to_unicode(line)
A:gensim.models.wrappers.ldamallet.(doc, source, pos, typeindex, token, topic)->gensim.utils.to_unicode(line).split(' ')
A:gensim.models.wrappers.ldamallet.chosen_topics->range(num_topics)
A:gensim.models.wrappers.ldamallet.num_topics->min(num_topics, self.num_topics)
A:gensim.models.wrappers.ldamallet.sorted_topics->list(matutils.argsort(sort_alpha))
A:gensim.models.wrappers.ldamallet.topic->self.show_topic(i, topn=num_words)
A:gensim.models.wrappers.ldamallet.bestn->gensim.matutils.argsort(topic, topn, reverse=True)
gensim.models.wrappers.LdaMallet(self,mallet_path,corpus=None,num_topics=100,id2word=None,workers=4,prefix=None,optimize_interval=0,iterations=1000)
gensim.models.wrappers.LdaMallet.__getitem__(self,bow,iterations=100)
gensim.models.wrappers.LdaMallet.convert_input(self,corpus,infer=False)
gensim.models.wrappers.LdaMallet.fcorpusmallet(self)
gensim.models.wrappers.LdaMallet.fcorpustxt(self)
gensim.models.wrappers.LdaMallet.fdoctopics(self)
gensim.models.wrappers.LdaMallet.finferencer(self)
gensim.models.wrappers.LdaMallet.fstate(self)
gensim.models.wrappers.LdaMallet.ftopickeys(self)
gensim.models.wrappers.LdaMallet.fwordweights(self)
gensim.models.wrappers.LdaMallet.load_document_topics(self)
gensim.models.wrappers.LdaMallet.load_word_topics(self)
gensim.models.wrappers.LdaMallet.print_topic(self,topicid,topn=10)
gensim.models.wrappers.LdaMallet.print_topics(self,num_topics=10,num_words=10)
gensim.models.wrappers.LdaMallet.show_topic(self,topicid,topn=10)
gensim.models.wrappers.LdaMallet.show_topics(self,num_topics=10,num_words=10,log=False,formatted=True)
gensim.models.wrappers.LdaMallet.train(self,corpus)
gensim.models.wrappers.ldamallet.LdaMallet(self,mallet_path,corpus=None,num_topics=100,id2word=None,workers=4,prefix=None,optimize_interval=0,iterations=1000)
gensim.models.wrappers.ldamallet.LdaMallet.__getitem__(self,bow,iterations=100)
gensim.models.wrappers.ldamallet.LdaMallet.__init__(self,mallet_path,corpus=None,num_topics=100,id2word=None,workers=4,prefix=None,optimize_interval=0,iterations=1000)
gensim.models.wrappers.ldamallet.LdaMallet.convert_input(self,corpus,infer=False)
gensim.models.wrappers.ldamallet.LdaMallet.fcorpusmallet(self)
gensim.models.wrappers.ldamallet.LdaMallet.fcorpustxt(self)
gensim.models.wrappers.ldamallet.LdaMallet.fdoctopics(self)
gensim.models.wrappers.ldamallet.LdaMallet.finferencer(self)
gensim.models.wrappers.ldamallet.LdaMallet.fstate(self)
gensim.models.wrappers.ldamallet.LdaMallet.ftopickeys(self)
gensim.models.wrappers.ldamallet.LdaMallet.fwordweights(self)
gensim.models.wrappers.ldamallet.LdaMallet.load_document_topics(self)
gensim.models.wrappers.ldamallet.LdaMallet.load_word_topics(self)
gensim.models.wrappers.ldamallet.LdaMallet.print_topic(self,topicid,topn=10)
gensim.models.wrappers.ldamallet.LdaMallet.print_topics(self,num_topics=10,num_words=10)
gensim.models.wrappers.ldamallet.LdaMallet.show_topic(self,topicid,topn=10)
gensim.models.wrappers.ldamallet.LdaMallet.show_topics(self,num_topics=10,num_words=10,log=False,formatted=True)
gensim.models.wrappers.ldamallet.LdaMallet.train(self,corpus)
gensim.models.wrappers.ldamallet.read_doctopics(fname,eps=1e-06)


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/models/wrappers/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/gensim/gensim0.12.2/models/wrappers/ldavowpalwabbit.py----------------------------------------
A:gensim.models.wrappers.ldavowpalwabbit.LOG->logging.getLogger(__name__)
A:gensim.models.wrappers.ldavowpalwabbit.self.id2word->gensim.utils.dict_from_corpus(corpus)
A:gensim.models.wrappers.ldavowpalwabbit.self.num_terms->len(self.id2word)
A:gensim.models.wrappers.ldavowpalwabbit.corpus_size->write_corpus_as_vw(chunk, self._corpus_filename)
A:gensim.models.wrappers.ldavowpalwabbit.cmd->self._get_vw_predict_command(corpus_size)
A:gensim.models.wrappers.ldavowpalwabbit.corpus_words->sum((cnt for document in chunk for (_, cnt) in document))
A:gensim.models.wrappers.ldavowpalwabbit.num_topics->min(num_topics, self.num_topics)
A:gensim.models.wrappers.ldavowpalwabbit.chosen_topics->range(num_topics)
A:gensim.models.wrappers.ldavowpalwabbit.topic->self.show_topic(i, topn=num_words)
A:gensim.models.wrappers.ldavowpalwabbit.topics->numpy.zeros((self.num_topics, self.num_terms), dtype=numpy.float32)
A:gensim.models.wrappers.ldavowpalwabbit.bestn->gensim.matutils.argsort(topic, topn, reverse=True)
A:gensim.models.wrappers.ldavowpalwabbit.self._model_data->fhandle.read()
A:gensim.models.wrappers.ldavowpalwabbit.self._topics_data->fhandle.read()
A:gensim.models.wrappers.ldavowpalwabbit.kwargs['ignore']->frozenset(['_topics', 'tmp_dir'])
A:gensim.models.wrappers.ldavowpalwabbit.lda_vw->super(LdaVowpalWabbit, cls).load(fname, *args, **kwargs)
A:gensim.models.wrappers.ldavowpalwabbit.self.tmp_dir->tempfile.mkdtemp(prefix=prefix)
A:gensim.models.wrappers.ldavowpalwabbit.fields->line.split()
A:gensim.models.wrappers.ldavowpalwabbit.word_id->int(fields[0])
A:gensim.models.wrappers.ldavowpalwabbit.vw_data->_parse_vw_output(_run_vw_command(cmd))
A:gensim.models.wrappers.ldavowpalwabbit.predictions->numpy.zeros((corpus_size, self.num_topics), dtype=numpy.float32)
A:gensim.models.wrappers.ldavowpalwabbit.predictions[i, :]->line.split()
A:gensim.models.wrappers.ldavowpalwabbit.(is_corpus, dummy_corpus)->gensim.utils.is_corpus(bow)
A:gensim.models.wrappers.ldavowpalwabbit.data['average_loss']->float(line.split('=')[1])
A:gensim.models.wrappers.ldavowpalwabbit.proc->subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
A:gensim.models.wrappers.ldavowpalwabbit.output->subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()[0].decode('utf-8')
gensim.models.wrappers.LdaVowpalWabbit(self,vw_path,corpus=None,num_topics=100,id2word=None,chunksize=256,passes=1,alpha=0.1,eta=0.1,decay=0.5,offset=1,gamma_threshold=0.001,random_seed=None,cleanup_files=True,tmp_prefix='tmp')
gensim.models.wrappers.LdaVowpalWabbit.__del__(self)
gensim.models.wrappers.LdaVowpalWabbit.__getitem__(self,bow,eps=0.01)
gensim.models.wrappers.LdaVowpalWabbit.__str__(self)
gensim.models.wrappers.LdaVowpalWabbit._cache_filename(self)
gensim.models.wrappers.LdaVowpalWabbit._corpus_filename(self)
gensim.models.wrappers.LdaVowpalWabbit._get_filename(self,name)
gensim.models.wrappers.LdaVowpalWabbit._get_topics(self)
gensim.models.wrappers.LdaVowpalWabbit._get_vw_predict_command(self,corpus_size)
gensim.models.wrappers.LdaVowpalWabbit._get_vw_train_command(self,corpus_size,update=False)
gensim.models.wrappers.LdaVowpalWabbit._get_vw_update_command(self,corpus_size)
gensim.models.wrappers.LdaVowpalWabbit._init_temp_dir(self,prefix='tmp')
gensim.models.wrappers.LdaVowpalWabbit._load_vw_topics(self)
gensim.models.wrappers.LdaVowpalWabbit._model_filename(self)
gensim.models.wrappers.LdaVowpalWabbit._predict(self,chunk)
gensim.models.wrappers.LdaVowpalWabbit._predict_filename(self)
gensim.models.wrappers.LdaVowpalWabbit._topics_filename(self)
gensim.models.wrappers.LdaVowpalWabbit.load(cls,fname,*args,**kwargs)
gensim.models.wrappers.LdaVowpalWabbit.log_perplexity(self,chunk)
gensim.models.wrappers.LdaVowpalWabbit.print_topic(self,topicid,topn=10)
gensim.models.wrappers.LdaVowpalWabbit.print_topics(self,num_topics=10,num_words=10)
gensim.models.wrappers.LdaVowpalWabbit.save(self,fname,*args,**kwargs)
gensim.models.wrappers.LdaVowpalWabbit.show_topic(self,topicid,topn=10)
gensim.models.wrappers.LdaVowpalWabbit.show_topics(self,num_topics=10,num_words=10,log=False,formatted=True)
gensim.models.wrappers.LdaVowpalWabbit.train(self,corpus)
gensim.models.wrappers.LdaVowpalWabbit.update(self,corpus)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit(self,vw_path,corpus=None,num_topics=100,id2word=None,chunksize=256,passes=1,alpha=0.1,eta=0.1,decay=0.5,offset=1,gamma_threshold=0.001,random_seed=None,cleanup_files=True,tmp_prefix='tmp')
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit.__del__(self)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit.__getitem__(self,bow,eps=0.01)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit.__init__(self,vw_path,corpus=None,num_topics=100,id2word=None,chunksize=256,passes=1,alpha=0.1,eta=0.1,decay=0.5,offset=1,gamma_threshold=0.001,random_seed=None,cleanup_files=True,tmp_prefix='tmp')
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit.__str__(self)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit._cache_filename(self)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit._corpus_filename(self)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit._get_filename(self,name)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit._get_topics(self)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit._get_vw_predict_command(self,corpus_size)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit._get_vw_train_command(self,corpus_size,update=False)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit._get_vw_update_command(self,corpus_size)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit._init_temp_dir(self,prefix='tmp')
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit._load_vw_topics(self)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit._model_filename(self)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit._predict(self,chunk)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit._predict_filename(self)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit._topics_filename(self)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit.load(cls,fname,*args,**kwargs)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit.log_perplexity(self,chunk)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit.print_topic(self,topicid,topn=10)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit.print_topics(self,num_topics=10,num_words=10)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit.save(self,fname,*args,**kwargs)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit.show_topic(self,topicid,topn=10)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit.show_topics(self,num_topics=10,num_words=10,log=False,formatted=True)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit.train(self,corpus)
gensim.models.wrappers.ldavowpalwabbit.LdaVowpalWabbit.update(self,corpus)
gensim.models.wrappers.ldavowpalwabbit._bit_length(num)
gensim.models.wrappers.ldavowpalwabbit._parse_vw_output(text)
gensim.models.wrappers.ldavowpalwabbit._run_vw_command(cmd)
gensim.models.wrappers.ldavowpalwabbit.corpus_to_vw(corpus)
gensim.models.wrappers.ldavowpalwabbit.write_corpus_as_vw(corpus,filename)

