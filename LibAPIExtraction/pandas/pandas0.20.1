
----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/testing.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/parser.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/_version.py----------------------------------------
pandas._version.get_versions()
pandas.get_versions()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/lib.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tslib.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/json.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/__init__.py----------------------------------------
A:pandas.__init__.module->str(e).lstrip('cannot import name ')
A:pandas.__init__.plot_params->pandas.plotting._style._Options(deprecated=True)
A:pandas.__init__.scatter_matrix->pandas.util._decorators.deprecate('pandas.scatter_matrix', pandas.plotting.scatter_matrix, 'pandas.plotting.scatter_matrix')
A:pandas.__init__.json->_DeprecatedModule(deprmod='pandas.json', moved={'dumps': 'pandas.io.json.dumps', 'loads': 'pandas.io.json.loads'})
A:pandas.__init__.parser->_DeprecatedModule(deprmod='pandas.parser', removals=['na_values'], moved={'CParserError': 'pandas.errors.ParserError'})
A:pandas.__init__.lib->_DeprecatedModule(deprmod='pandas.lib', deprmodto=False, moved={'Timestamp': 'pandas.Timestamp', 'Timedelta': 'pandas.Timedelta', 'NaT': 'pandas.NaT', 'infer_dtype': 'pandas.api.types.infer_dtype'})
A:pandas.__init__.tslib->_DeprecatedModule(deprmod='pandas.tslib', moved={'Timestamp': 'pandas.Timestamp', 'Timedelta': 'pandas.Timedelta', 'NaT': 'pandas.NaT', 'NaTType': 'type(pandas.NaT)', 'OutOfBoundsDatetime': 'pandas.errors.OutOfBoundsDatetime'})
A:pandas.__init__.v->get_versions()
A:pandas.__init__.__version__->get_versions().get('closest-tag', v['version'])


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/conftest.py----------------------------------------
pandas.conftest.add_imports(doctest_namespace)
pandas.conftest.configure_tests()
pandas.conftest.pytest_addoption(parser)
pandas.conftest.pytest_runtest_setup(item)
pandas.conftest.spmatrix(request)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tseries/util.py----------------------------------------
A:pandas.tseries.util.years->pandas.core.algorithms.unique1d(year)
A:pandas.tseries.util.freq->freq.upper().upper()
A:pandas.tseries.util.columns->lrange(1, 8785)
A:pandas.tseries.util.grouped->series.groupby(series.index.year)
A:pandas.tseries.util.defaulted->series.groupby(series.index.year).apply(lambda x: x.reset_index(drop=True))
A:pandas.tseries.util.defaulted.index->series.groupby(series.index.year).apply(lambda x: x.reset_index(drop=True)).index.droplevel(0)
A:pandas.tseries.util.offset->numpy.asarray(defaulted.index)
A:pandas.tseries.util.flat_index->_ensure_platform_int(flat_index)
A:pandas.tseries.util.values->numpy.empty((len(years), width))
A:pandas.tseries.util.year->numpy.asarray(year)
pandas.tseries.util.isleapyear(year)
pandas.tseries.util.pivot_annual(series,freq=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tseries/frequencies.py----------------------------------------
A:pandas.tseries.frequencies._str_reso_map->dict([(v, k) for (k, v) in compat.iteritems(_reso_str_map)])
A:pandas.tseries.frequencies._freq_reso_map->dict([(v, k) for (k, v) in compat.iteritems(_reso_freq_map)])
A:pandas.tseries.frequencies.start_reso->cls.get_reso_from_freq(freq)
A:pandas.tseries.frequencies.(base, mult)->get_freq_code(freq)
A:pandas.tseries.frequencies.code->_reverse_period_code_map.get(base)
A:pandas.tseries.frequencies.(base, stride)->_base_and_stride(freqstr)
A:pandas.tseries.frequencies.cday->CDay()
A:pandas.tseries.frequencies.(name, _)->_base_and_stride(name)
A:pandas.tseries.frequencies.freq->Timedelta(freq)
A:pandas.tseries.frequencies.stride->int(stride)
A:pandas.tseries.frequencies.splitted->re.split(opattern, freq)
A:pandas.tseries.frequencies.(stride, name)->Resolution.get_stride_from_decimal(float(stride), prefix)
A:pandas.tseries.frequencies.offset->klass._from_name(*split[1:])
A:pandas.tseries.frequencies.opattern->re.compile('([\\-]?\\d*|[\\-]?\\d*\\.\\d*)\\s*([A-Za-z]+([\\-][\\dA-Za-z\\-]+)?)')
A:pandas.tseries.frequencies.groups->re.compile('([\\-]?\\d*|[\\-]?\\d*\\.\\d*)\\s*([A-Za-z]+([\\-][\\dA-Za-z\\-]+)?)').match(freqstr)
A:pandas.tseries.frequencies.base->re.compile('([\\-]?\\d*|[\\-]?\\d*\\.\\d*)\\s*([A-Za-z]+([\\-][\\dA-Za-z\\-]+)?)').match(freqstr).group(2)
A:pandas.tseries.frequencies._dont_uppercase->set(('MS', 'ms'))
A:pandas.tseries.frequencies.name->_lite_rule_alias.get(name, name)
A:pandas.tseries.frequencies.split->_lite_rule_alias.get(name, name).split('-')
A:pandas.tseries.frequencies.freqstr->freqstr.upper().upper()
A:pandas.tseries.frequencies.lower->freqstr.upper().upper().lower()
A:pandas.tseries.frequencies.inferer->_FrequencyInferer(index, warn=warn)
A:pandas.tseries.frequencies.index->pandas.DatetimeIndex(index.asi8)
A:pandas.tseries.frequencies._ONE_MICRO->long(1000)
A:pandas.tseries.frequencies.self.values->pandas._libs.tslib.tz_convert(self.values, 'UTC', index.tz)
A:pandas.tseries.frequencies.(_, daysinmonth)->monthrange(y, m)
A:pandas.tseries.frequencies.annual_rule->self._get_annual_rule()
A:pandas.tseries.frequencies.quarterly_rule->self._get_quarterly_rule()
A:pandas.tseries.frequencies.monthly_rule->self._get_monthly_rule()
A:pandas.tseries.frequencies.wom_rule->self._get_wom_rule()
A:pandas.tseries.frequencies.pos_check->self.month_position_check()
A:pandas.tseries.frequencies.weekdays->unique(self.index.weekday)
A:pandas.tseries.frequencies.week_of_months->unique((self.index.day - 1) // 7)
A:pandas.tseries.frequencies.source->_maybe_coerce_freq(source)
A:pandas.tseries.frequencies.target->_maybe_coerce_freq(target)
A:pandas.tseries.frequencies.smonth->_get_rule_month(source)
A:pandas.tseries.frequencies.tmonth->_get_rule_month(target)
A:pandas.tseries.frequencies.rule->rule.upper().upper()
A:pandas.tseries.frequencies._weekday_rule_aliases->dict(((k, v) for (k, v) in enumerate(DAYS)))
pandas.tseries.frequencies.FreqGroup(object)
pandas.tseries.frequencies.Resolution(object)
pandas.tseries.frequencies.Resolution.get_freq(cls,resostr)
pandas.tseries.frequencies.Resolution.get_freq_group(cls,resostr)
pandas.tseries.frequencies.Resolution.get_reso(cls,resostr)
pandas.tseries.frequencies.Resolution.get_reso_from_freq(cls,freq)
pandas.tseries.frequencies.Resolution.get_str(cls,reso)
pandas.tseries.frequencies.Resolution.get_str_from_freq(cls,freq)
pandas.tseries.frequencies.Resolution.get_stride_from_decimal(cls,value,freq)
pandas.tseries.frequencies._FrequencyInferer(self,index,warn=True)
pandas.tseries.frequencies._FrequencyInferer.__init__(self,index,warn=True)
pandas.tseries.frequencies._FrequencyInferer._get_annual_rule(self)
pandas.tseries.frequencies._FrequencyInferer._get_monthly_rule(self)
pandas.tseries.frequencies._FrequencyInferer._get_quarterly_rule(self)
pandas.tseries.frequencies._FrequencyInferer._get_wom_rule(self)
pandas.tseries.frequencies._FrequencyInferer._infer_daily_rule(self)
pandas.tseries.frequencies._FrequencyInferer.day_deltas(self)
pandas.tseries.frequencies._FrequencyInferer.deltas(self)
pandas.tseries.frequencies._FrequencyInferer.deltas_asi8(self)
pandas.tseries.frequencies._FrequencyInferer.fields(self)
pandas.tseries.frequencies._FrequencyInferer.get_freq(self)
pandas.tseries.frequencies._FrequencyInferer.hour_deltas(self)
pandas.tseries.frequencies._FrequencyInferer.is_unique(self)
pandas.tseries.frequencies._FrequencyInferer.is_unique_asi8(self)
pandas.tseries.frequencies._FrequencyInferer.mdiffs(self)
pandas.tseries.frequencies._FrequencyInferer.month_position_check(self)
pandas.tseries.frequencies._FrequencyInferer.rep_stamp(self)
pandas.tseries.frequencies._FrequencyInferer.ydiffs(self)
pandas.tseries.frequencies._TimedeltaFrequencyInferer(_FrequencyInferer)
pandas.tseries.frequencies._TimedeltaFrequencyInferer._infer_daily_rule(self)
pandas.tseries.frequencies._base_and_stride(freqstr)
pandas.tseries.frequencies._get_freq_str(base,mult=1)
pandas.tseries.frequencies._is_annual(rule)
pandas.tseries.frequencies._is_monthly(rule)
pandas.tseries.frequencies._is_multiple(us,mult)
pandas.tseries.frequencies._is_quarterly(rule)
pandas.tseries.frequencies._is_weekly(rule)
pandas.tseries.frequencies._maybe_add_count(base,count)
pandas.tseries.frequencies._maybe_coerce_freq(code)
pandas.tseries.frequencies._period_str_to_code(freqstr)
pandas.tseries.frequencies._quarter_months_conform(source,target)
pandas.tseries.frequencies.get_base_alias(freqstr)
pandas.tseries.frequencies.get_freq(freq)
pandas.tseries.frequencies.get_freq_code(freqstr)
pandas.tseries.frequencies.get_freq_group(freq)
pandas.tseries.frequencies.get_offset(name)
pandas.tseries.frequencies.get_offset_name(offset)
pandas.tseries.frequencies.get_period_alias(offset_str)
pandas.tseries.frequencies.get_standard_freq(freq)
pandas.tseries.frequencies.get_to_timestamp_base(base)
pandas.tseries.frequencies.infer_freq(index,warn=True)
pandas.tseries.frequencies.is_subperiod(source,target)
pandas.tseries.frequencies.is_superperiod(source,target)
pandas.tseries.frequencies.to_offset(freq)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tseries/offsets.py----------------------------------------
A:pandas.tseries.offsets.f->getattr(obj, 'to_pydatetime', None)
A:pandas.tseries.offsets.obj->f()
A:pandas.tseries.offsets.other->to_offset(other)
A:pandas.tseries.offsets.tz->getattr(other, 'tzinfo', None)
A:pandas.tseries.offsets.nano->getattr(other, 'nanosecond', 0)
A:pandas.tseries.offsets.result->to_offset(other).__add__(self)
A:pandas.tseries.offsets.value->pandas._libs.tslib.tz_convert_single(result.value, 'UTC', result.tz)
A:pandas.tseries.offsets.self.n->int(n)
A:pandas.tseries.offsets.(self._offset, self._use_relativedelta)->self._determine_offset()
A:pandas.tseries.offsets.kwds_no_nanos->dict(((k, v) for (k, v) in self.kwds.items() if k not in ('nanosecond', 'nanoseconds')))
A:pandas.tseries.offsets.offset->get_offset(time_rule)
A:pandas.tseries.offsets.tzinfo->getattr(other, 'tzinfo', None)
A:pandas.tseries.offsets.relativedelta_fast->set(['years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds', 'microseconds'])
A:pandas.tseries.offsets.shifted->pandas._libs.tslib.shift_months(i.asi8, self.n, 'start')
A:pandas.tseries.offsets.i->self._apply_index_days(i, roll)
A:pandas.tseries.offsets.timedelta_kwds->dict(((k, v) for (k, v) in self.kwds.items() if k in ['days', 'hours', 'minutes', 'seconds', 'microseconds']))
A:pandas.tseries.offsets.delta->Timedelta(**timedelta_kwds)
A:pandas.tseries.offsets.all_paras->dict(list(vars(self).items()) + list(self.kwds.items()))
A:pandas.tseries.offsets.attrs->sorted(set(attrs))
A:pandas.tseries.offsets.params->tuple([str(self.__class__)] + attrs)
A:pandas.tseries.offsets.className->getattr(self, '_outputName', self.__class__.__name__)
A:pandas.tseries.offsets.exclude->set(['n', 'inc', 'normalize'])
A:pandas.tseries.offsets.dt->datetime(dt.year, dt.month, dt.day)
A:pandas.tseries.offsets.off->self._apply_index_days(i, roll).to_perioddelta('D')
A:pandas.tseries.offsets.(base, mult)->get_freq_code(freq)
A:pandas.tseries.offsets.base_period->self._apply_index_days(i, roll).to_period(base)
A:pandas.tseries.offsets.roll->numpy.where(before_day_of_month, n, n + 1)
A:pandas.tseries.offsets.base->(base_period + roll).to_timestamp(how='end')
A:pandas.tseries.offsets.state->self.__dict__.copy()
A:pandas.tseries.offsets.(calendar, holidays)->self.get_calendar(weekmask=weekmask, holidays=holidays, calendar=calendar)
A:pandas.tseries.offsets.self.offset->kwds.get('offset', timedelta(0))
A:pandas.tseries.offsets.hrs->int(s / 3600)
A:pandas.tseries.offsets.mts->int(s / 60)
A:pandas.tseries.offsets.zero->timedelta(0, 0, 0)
A:pandas.tseries.offsets.time->self._apply_index_days(i, roll).to_perioddelta('D')
A:pandas.tseries.offsets.kwds['start']->self._validate_time(kwds.get('start', '09:00'))
A:pandas.tseries.offsets.kwds['end']->self._validate_time(kwds.get('end', '17:00'))
A:pandas.tseries.offsets.self.start->kwds.get('start', '09:00')
A:pandas.tseries.offsets.self.end->kwds.get('end', '17:00')
A:pandas.tseries.offsets.t->self._apply_index_days(i, roll).to_perioddelta('D').strptime(t_input, '%H:%M')
A:pandas.tseries.offsets.dtstart->datetime(2014, 4, 1, self.start.hour, self.start.minute)
A:pandas.tseries.offsets.until->datetime(2014, 4, 2, self.end.hour, self.end.minute)
A:pandas.tseries.offsets.businesshours->self._get_business_hours_by_sec()
A:pandas.tseries.offsets.daytime->self._get_daytime_flag()
A:pandas.tseries.offsets.bhdelta->timedelta(seconds=businesshours)
A:pandas.tseries.offsets.nanosecond->getattr(other, 'nanosecond', 0)
A:pandas.tseries.offsets.(bd, r)->divmod(abs(n * 60), businesshours // 60)
A:pandas.tseries.offsets.skip_bd->BusinessDay(n=bd)
A:pandas.tseries.offsets.(hours, minutes)->divmod(r, 60)
A:pandas.tseries.offsets.bday_edge->self._next_opening_time(other)
A:pandas.tseries.offsets.op->self._next_opening_time(dt)
A:pandas.tseries.offsets.span->pandas._libs.tslib.tot_seconds(dt - op)
A:pandas.tseries.offsets.out->super(BusinessHourMixin, self)._repr_attrs()
A:pandas.tseries.offsets.start->get_offset(time_rule).rollforward(start)
A:pandas.tseries.offsets.end->get_offset(time_rule).rollback(end)
A:pandas.tseries.offsets.self.next_bday->CustomBusinessDay(n=nb_offset, weekmask=weekmask, holidays=holidays, calendar=calendar)
A:pandas.tseries.offsets.holidays->tuple(sorted(holidays))
A:pandas.tseries.offsets.busdaycalendar->numpy.busdaycalendar(**kwargs)
A:pandas.tseries.offsets.np_dt->numpy.datetime64(date_in.date())
A:pandas.tseries.offsets.np_incr_dt->numpy.busday_offset(np_dt, self.n, roll=roll, busdaycal=self.calendar)
A:pandas.tseries.offsets.dt_date->numpy.busday_offset(np_dt, self.n, roll=roll, busdaycal=self.calendar).astype(datetime)
A:pandas.tseries.offsets.i8->pandas._libs.tslib.pydt_to_i8(dt)
A:pandas.tseries.offsets.day64->self._to_dt64(dt, 'datetime64[D]')
A:pandas.tseries.offsets.(_, days_in_month)->pandas._libs.tslib.monthrange(year, self.month)
A:pandas.tseries.offsets.self.day_of_month->int(day_of_month)
A:pandas.tseries.offsets.suffix->self._offset.get_rule_code_suffix()
A:pandas.tseries.offsets.roll_end->numpy.where(is_month_end, 1, 0)
A:pandas.tseries.offsets.roll_before->numpy.where(~after_day_of_month, 1, 0)
A:pandas.tseries.offsets.roll_after->numpy.where(after_day_of_month, n + 2, n + 1)
A:pandas.tseries.offsets.roll_start->numpy.where(is_month_start, -1, 0)
A:pandas.tseries.offsets.(wkday, days_in_month)->pandas._libs.tslib.monthrange(dt.year, self.month)
A:pandas.tseries.offsets.(wkday, _)->pandas._libs.tslib.monthrange(other.year, other.month)
A:pandas.tseries.offsets.first->_get_firstbday(wkday)
A:pandas.tseries.offsets.(first_weekday, _)->pandas._libs.tslib.monthrange(dt.year, dt.month)
A:pandas.tseries.offsets.self.cbday->CustomBusinessDay(n=self.n, normalize=normalize, weekmask=weekmask, holidays=holidays, calendar=calendar, **kwds)
A:pandas.tseries.offsets.self.m_offset->MonthBegin(n=1, normalize=normalize, **kwds)
A:pandas.tseries.offsets.cur_mend->self.m_offset.rollforward(other)
A:pandas.tseries.offsets.cur_cmend->self.cbday.rollback(cur_mend)
A:pandas.tseries.offsets.cur_mbegin->self.m_offset.rollback(dt_in)
A:pandas.tseries.offsets.cur_cmbegin->self.cbday.rollforward(cur_mbegin)
A:pandas.tseries.offsets.self.weekday->kwds.get('weekday', None)
A:pandas.tseries.offsets.self._inc->timedelta(weeks=1)
A:pandas.tseries.offsets.otherDay->to_offset(other).weekday()
A:pandas.tseries.offsets._weekday_to_int->dict(((v, k) for (k, v) in _int_to_weekday.items()))
A:pandas.tseries.offsets.offsetOfMonth->self.getOffsetOfMonth(other)
A:pandas.tseries.offsets.w->Week(weekday=self.weekday)
A:pandas.tseries.offsets.d->datetime(dt.year, dt.month, 1, dt.hour, dt.minute, dt.second, dt.microsecond, tzinfo=dt.tzinfo)
A:pandas.tseries.offsets.m->MonthEnd()
A:pandas.tseries.offsets.eom->MonthEnd().rollforward(d)
A:pandas.tseries.offsets.self.startingMonth->kwds.get('startingMonth', 3)
A:pandas.tseries.offsets._month_to_int->dict(((v, k) for (k, v) in _int_to_month.items()))
A:pandas.tseries.offsets.self.month->kwds.get('month', self._default_month)
A:pandas.tseries.offsets.date->_increment(date, 1)
A:pandas.tseries.offsets.weekday_offset->weekday(self.weekday)
A:pandas.tseries.offsets.self._rd_forward->relativedelta(weekday=weekday_offset)
A:pandas.tseries.offsets.self._rd_backward->relativedelta(weekday=weekday_offset(-1))
A:pandas.tseries.offsets.self._offset_lwom->LastWeekOfMonth(n=1, weekday=self.weekday)
A:pandas.tseries.offsets.year_end->self.get_year_end(dt)
A:pandas.tseries.offsets.prev_year->pandas._libs.tslib._localize_pydatetime(prev_year, other.tzinfo)
A:pandas.tseries.offsets.cur_year->pandas._libs.tslib._localize_pydatetime(cur_year, other.tzinfo)
A:pandas.tseries.offsets.next_year->pandas._libs.tslib._localize_pydatetime(next_year, other.tzinfo)
A:pandas.tseries.offsets.target_month->datetime(dt.year, self.startingMonth, 1, tzinfo=dt.tzinfo)
A:pandas.tseries.offsets.target_date->self.get_target_month_end(dt)
A:pandas.tseries.offsets.current_year->datetime(dt.year, self.startingMonth, 1, tzinfo=dt.tzinfo)
A:pandas.tseries.offsets.self._offset->FY5253(startingMonth=kwds['startingMonth'], weekday=kwds['weekday'], variation=kwds['variation'])
A:pandas.tseries.offsets.qtr_lens->self.get_weeks(dt)
A:pandas.tseries.offsets.year_has_extra_week->self.year_has_extra_week(dt)
A:pandas.tseries.offsets.currentEaster->pandas._libs.tslib._localize_pydatetime(currentEaster, other.tzinfo)
A:pandas.tseries.offsets.new->datetime(new.year, new.month, new.day, other.hour, other.minute, other.second, other.microsecond)
A:pandas.tseries.offsets._inc->Timedelta(nanoseconds=1)
A:pandas.tseries.offsets.__gt__->_tick_comp(operator.gt)
A:pandas.tseries.offsets.__ge__->_tick_comp(operator.ge)
A:pandas.tseries.offsets.__lt__->_tick_comp(operator.lt)
A:pandas.tseries.offsets.__le__->_tick_comp(operator.le)
A:pandas.tseries.offsets.__eq__->_tick_comp(operator.eq)
A:pandas.tseries.offsets.__ne__->_tick_comp(operator.ne)
A:pandas.tseries.offsets.nanos->_delta_to_nanoseconds(delta)
A:pandas.tseries.offsets.next_date->get_offset(time_rule).apply(cur)
A:pandas.tseries.offsets.prefix_mapping->dict(((offset._prefix, offset) for offset in [YearBegin, YearEnd, BYearBegin, BYearEnd, BusinessDay, BusinessMonthBegin, BusinessMonthEnd, BQuarterEnd, BQuarterBegin, BusinessHour, CustomBusinessDay, CustomBusinessMonthEnd, CustomBusinessMonthBegin, CustomBusinessHour, MonthEnd, MonthBegin, SemiMonthEnd, SemiMonthBegin, Week, Second, Minute, Micro, QuarterEnd, QuarterBegin, Milli, Hour, Day, WeekOfMonth, FY5253, FY5253Quarter]))
pandas.tseries.offsets.ApplyTypeError(TypeError)
pandas.tseries.offsets.BQuarterBegin(QuarterOffset)
pandas.tseries.offsets.BQuarterBegin.apply(self,other)
pandas.tseries.offsets.BQuarterEnd(QuarterOffset)
pandas.tseries.offsets.BQuarterEnd.apply(self,other)
pandas.tseries.offsets.BQuarterEnd.onOffset(self,dt)
pandas.tseries.offsets.BYearBegin(YearOffset)
pandas.tseries.offsets.BYearBegin.apply(self,other)
pandas.tseries.offsets.BYearEnd(YearOffset)
pandas.tseries.offsets.BYearEnd.apply(self,other)
pandas.tseries.offsets.BusinessDay(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.BusinessDay.__init__(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.BusinessDay._offset_str(self)
pandas.tseries.offsets.BusinessDay.apply(self,other)
pandas.tseries.offsets.BusinessDay.apply_index(self,i)
pandas.tseries.offsets.BusinessDay.freqstr(self)
pandas.tseries.offsets.BusinessDay.isAnchored(self)
pandas.tseries.offsets.BusinessDay.onOffset(self,dt)
pandas.tseries.offsets.BusinessHour(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.BusinessHour.__init__(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.BusinessHourMixin(self,**kwds)
pandas.tseries.offsets.BusinessHourMixin.__init__(self,**kwds)
pandas.tseries.offsets.BusinessHourMixin._get_business_hours_by_sec(self)
pandas.tseries.offsets.BusinessHourMixin._get_daytime_flag(self)
pandas.tseries.offsets.BusinessHourMixin._next_opening_time(self,other)
pandas.tseries.offsets.BusinessHourMixin._onOffset(self,dt,businesshours)
pandas.tseries.offsets.BusinessHourMixin._prev_opening_time(self,other)
pandas.tseries.offsets.BusinessHourMixin._repr_attrs(self)
pandas.tseries.offsets.BusinessHourMixin._validate_time(self,t_input)
pandas.tseries.offsets.BusinessHourMixin.apply(self,other)
pandas.tseries.offsets.BusinessHourMixin.onOffset(self,dt)
pandas.tseries.offsets.BusinessHourMixin.rollback(self,dt)
pandas.tseries.offsets.BusinessHourMixin.rollforward(self,dt)
pandas.tseries.offsets.BusinessMixin(object)
pandas.tseries.offsets.BusinessMixin.__getstate__(self)
pandas.tseries.offsets.BusinessMixin.__repr__(self)
pandas.tseries.offsets.BusinessMixin.__setstate__(self,state)
pandas.tseries.offsets.BusinessMixin._repr_attrs(self)
pandas.tseries.offsets.BusinessMonthBegin(MonthOffset)
pandas.tseries.offsets.BusinessMonthBegin.apply(self,other)
pandas.tseries.offsets.BusinessMonthBegin.onOffset(self,dt)
pandas.tseries.offsets.BusinessMonthEnd(MonthOffset)
pandas.tseries.offsets.BusinessMonthEnd.apply(self,other)
pandas.tseries.offsets.BusinessMonthEnd.isAnchored(self)
pandas.tseries.offsets.CacheableOffset(object)
pandas.tseries.offsets.CustomBusinessDay(self,n=1,normalize=False,weekmask='MonTueWedThuFri',holidays=None,calendar=None,**kwds)
pandas.tseries.offsets.CustomBusinessDay.__init__(self,n=1,normalize=False,weekmask='MonTueWedThuFri',holidays=None,calendar=None,**kwds)
pandas.tseries.offsets.CustomBusinessDay._to_dt64(dt,dtype='datetime64')
pandas.tseries.offsets.CustomBusinessDay.apply(self,other)
pandas.tseries.offsets.CustomBusinessDay.apply_index(self,i)
pandas.tseries.offsets.CustomBusinessDay.get_calendar(self,weekmask,holidays,calendar)
pandas.tseries.offsets.CustomBusinessDay.onOffset(self,dt)
pandas.tseries.offsets.CustomBusinessHour(self,n=1,normalize=False,weekmask='MonTueWedThuFri',holidays=None,calendar=None,**kwds)
pandas.tseries.offsets.CustomBusinessHour.__init__(self,n=1,normalize=False,weekmask='MonTueWedThuFri',holidays=None,calendar=None,**kwds)
pandas.tseries.offsets.CustomBusinessMonthBegin(self,n=1,normalize=False,weekmask='MonTueWedThuFri',holidays=None,calendar=None,**kwds)
pandas.tseries.offsets.CustomBusinessMonthBegin.__init__(self,n=1,normalize=False,weekmask='MonTueWedThuFri',holidays=None,calendar=None,**kwds)
pandas.tseries.offsets.CustomBusinessMonthBegin.apply(self,other)
pandas.tseries.offsets.CustomBusinessMonthEnd(self,n=1,normalize=False,weekmask='MonTueWedThuFri',holidays=None,calendar=None,**kwds)
pandas.tseries.offsets.CustomBusinessMonthEnd.__init__(self,n=1,normalize=False,weekmask='MonTueWedThuFri',holidays=None,calendar=None,**kwds)
pandas.tseries.offsets.CustomBusinessMonthEnd.apply(self,other)
pandas.tseries.offsets.DateOffset(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.DateOffset.__add__(self,other)
pandas.tseries.offsets.DateOffset.__eq__(self,other)
pandas.tseries.offsets.DateOffset.__hash__(self)
pandas.tseries.offsets.DateOffset.__init__(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.DateOffset.__mul__(self,someInt)
pandas.tseries.offsets.DateOffset.__ne__(self,other)
pandas.tseries.offsets.DateOffset.__neg__(self)
pandas.tseries.offsets.DateOffset.__radd__(self,other)
pandas.tseries.offsets.DateOffset.__repr__(self)
pandas.tseries.offsets.DateOffset.__rmul__(self,someInt)
pandas.tseries.offsets.DateOffset.__rsub__(self,other)
pandas.tseries.offsets.DateOffset.__sub__(self,other)
pandas.tseries.offsets.DateOffset._beg_apply_index(self,i,freq)
pandas.tseries.offsets.DateOffset._determine_offset(self)
pandas.tseries.offsets.DateOffset._end_apply_index(self,i,freq)
pandas.tseries.offsets.DateOffset._params(self)
pandas.tseries.offsets.DateOffset._prefix(self)
pandas.tseries.offsets.DateOffset._should_cache(self)
pandas.tseries.offsets.DateOffset.apply(self,other)
pandas.tseries.offsets.DateOffset.apply_index(self,i)
pandas.tseries.offsets.DateOffset.copy(self)
pandas.tseries.offsets.DateOffset.freqstr(self)
pandas.tseries.offsets.DateOffset.isAnchored(self)
pandas.tseries.offsets.DateOffset.name(self)
pandas.tseries.offsets.DateOffset.nanos(self)
pandas.tseries.offsets.DateOffset.onOffset(self,dt)
pandas.tseries.offsets.DateOffset.rollback(self,dt)
pandas.tseries.offsets.DateOffset.rollforward(self,dt)
pandas.tseries.offsets.DateOffset.rule_code(self)
pandas.tseries.offsets.Day(Tick)
pandas.tseries.offsets.Easter(self,n=1,**kwds)
pandas.tseries.offsets.Easter.__init__(self,n=1,**kwds)
pandas.tseries.offsets.Easter.apply(self,other)
pandas.tseries.offsets.Easter.onOffset(self,dt)
pandas.tseries.offsets.FY5253(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.FY5253.__init__(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.FY5253._from_name(cls,*args)
pandas.tseries.offsets.FY5253._get_prefix(self)
pandas.tseries.offsets.FY5253._get_suffix_prefix(self)
pandas.tseries.offsets.FY5253._get_year_end_last(self,dt)
pandas.tseries.offsets.FY5253._get_year_end_nearest(self,dt)
pandas.tseries.offsets.FY5253._parse_suffix(cls,varion_code,startingMonth_code,weekday_code)
pandas.tseries.offsets.FY5253.apply(self,other)
pandas.tseries.offsets.FY5253.get_rule_code_suffix(self)
pandas.tseries.offsets.FY5253.get_target_month_end(self,dt)
pandas.tseries.offsets.FY5253.get_year_end(self,dt)
pandas.tseries.offsets.FY5253.isAnchored(self)
pandas.tseries.offsets.FY5253.onOffset(self,dt)
pandas.tseries.offsets.FY5253.rule_code(self)
pandas.tseries.offsets.FY5253Quarter(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.FY5253Quarter.__init__(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.FY5253Quarter._from_name(cls,*args)
pandas.tseries.offsets.FY5253Quarter.apply(self,other)
pandas.tseries.offsets.FY5253Quarter.get_weeks(self,dt)
pandas.tseries.offsets.FY5253Quarter.isAnchored(self)
pandas.tseries.offsets.FY5253Quarter.onOffset(self,dt)
pandas.tseries.offsets.FY5253Quarter.rule_code(self)
pandas.tseries.offsets.FY5253Quarter.year_has_extra_week(self,dt)
pandas.tseries.offsets.Hour(Tick)
pandas.tseries.offsets.LastWeekOfMonth(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.LastWeekOfMonth.__init__(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.LastWeekOfMonth._from_name(cls,suffix=None)
pandas.tseries.offsets.LastWeekOfMonth.apply(self,other)
pandas.tseries.offsets.LastWeekOfMonth.getOffsetOfMonth(self,dt)
pandas.tseries.offsets.LastWeekOfMonth.onOffset(self,dt)
pandas.tseries.offsets.LastWeekOfMonth.rule_code(self)
pandas.tseries.offsets.Micro(Tick)
pandas.tseries.offsets.Milli(Tick)
pandas.tseries.offsets.Minute(Tick)
pandas.tseries.offsets.MonthBegin(MonthOffset)
pandas.tseries.offsets.MonthBegin.apply(self,other)
pandas.tseries.offsets.MonthBegin.apply_index(self,i)
pandas.tseries.offsets.MonthBegin.onOffset(self,dt)
pandas.tseries.offsets.MonthEnd(MonthOffset)
pandas.tseries.offsets.MonthEnd.apply(self,other)
pandas.tseries.offsets.MonthEnd.apply_index(self,i)
pandas.tseries.offsets.MonthEnd.onOffset(self,dt)
pandas.tseries.offsets.MonthOffset(SingleConstructorOffset)
pandas.tseries.offsets.MonthOffset.name(self)
pandas.tseries.offsets.Nano(Tick)
pandas.tseries.offsets.QuarterBegin(QuarterOffset)
pandas.tseries.offsets.QuarterBegin.apply(self,other)
pandas.tseries.offsets.QuarterBegin.apply_index(self,i)
pandas.tseries.offsets.QuarterBegin.isAnchored(self)
pandas.tseries.offsets.QuarterEnd(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.QuarterEnd.__init__(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.QuarterEnd.apply(self,other)
pandas.tseries.offsets.QuarterEnd.apply_index(self,i)
pandas.tseries.offsets.QuarterEnd.isAnchored(self)
pandas.tseries.offsets.QuarterEnd.onOffset(self,dt)
pandas.tseries.offsets.QuarterOffset(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.QuarterOffset.__init__(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.QuarterOffset._from_name(cls,suffix=None)
pandas.tseries.offsets.QuarterOffset.isAnchored(self)
pandas.tseries.offsets.QuarterOffset.rule_code(self)
pandas.tseries.offsets.Second(Tick)
pandas.tseries.offsets.SemiMonthBegin(SemiMonthOffset)
pandas.tseries.offsets.SemiMonthBegin._apply(self,n,other)
pandas.tseries.offsets.SemiMonthBegin._apply_index_days(self,i,roll)
pandas.tseries.offsets.SemiMonthBegin._get_roll(self,i,before_day_of_month,after_day_of_month)
pandas.tseries.offsets.SemiMonthBegin.onOffset(self,dt)
pandas.tseries.offsets.SemiMonthEnd(SemiMonthOffset)
pandas.tseries.offsets.SemiMonthEnd._apply(self,n,other)
pandas.tseries.offsets.SemiMonthEnd._apply_index_days(self,i,roll)
pandas.tseries.offsets.SemiMonthEnd._get_roll(self,i,before_day_of_month,after_day_of_month)
pandas.tseries.offsets.SemiMonthEnd.onOffset(self,dt)
pandas.tseries.offsets.SemiMonthOffset(self,n=1,day_of_month=None,normalize=False,**kwds)
pandas.tseries.offsets.SemiMonthOffset.__init__(self,n=1,day_of_month=None,normalize=False,**kwds)
pandas.tseries.offsets.SemiMonthOffset._apply(self,n,other)
pandas.tseries.offsets.SemiMonthOffset._apply_index_days(self,i,roll)
pandas.tseries.offsets.SemiMonthOffset._from_name(cls,suffix=None)
pandas.tseries.offsets.SemiMonthOffset._get_roll(self,i,before_day_of_month,after_day_of_month)
pandas.tseries.offsets.SemiMonthOffset.apply(self,other)
pandas.tseries.offsets.SemiMonthOffset.apply_index(self,i)
pandas.tseries.offsets.SemiMonthOffset.rule_code(self)
pandas.tseries.offsets.SingleConstructorOffset(DateOffset)
pandas.tseries.offsets.SingleConstructorOffset._from_name(cls,suffix=None)
pandas.tseries.offsets.Tick(SingleConstructorOffset)
pandas.tseries.offsets.Tick.__add__(self,other)
pandas.tseries.offsets.Tick.__eq__(self,other)
pandas.tseries.offsets.Tick.__hash__(self)
pandas.tseries.offsets.Tick.__ne__(self,other)
pandas.tseries.offsets.Tick.apply(self,other)
pandas.tseries.offsets.Tick.delta(self)
pandas.tseries.offsets.Tick.isAnchored(self)
pandas.tseries.offsets.Tick.nanos(self)
pandas.tseries.offsets.Week(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.Week.__init__(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.Week._from_name(cls,suffix=None)
pandas.tseries.offsets.Week.apply(self,other)
pandas.tseries.offsets.Week.apply_index(self,i)
pandas.tseries.offsets.Week.isAnchored(self)
pandas.tseries.offsets.Week.onOffset(self,dt)
pandas.tseries.offsets.Week.rule_code(self)
pandas.tseries.offsets.WeekDay(object)
pandas.tseries.offsets.WeekOfMonth(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.WeekOfMonth.__init__(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.WeekOfMonth._from_name(cls,suffix=None)
pandas.tseries.offsets.WeekOfMonth.apply(self,other)
pandas.tseries.offsets.WeekOfMonth.getOffsetOfMonth(self,dt)
pandas.tseries.offsets.WeekOfMonth.onOffset(self,dt)
pandas.tseries.offsets.WeekOfMonth.rule_code(self)
pandas.tseries.offsets.YearBegin(YearOffset)
pandas.tseries.offsets.YearBegin.apply(self,other)
pandas.tseries.offsets.YearBegin.apply_index(self,i)
pandas.tseries.offsets.YearBegin.onOffset(self,dt)
pandas.tseries.offsets.YearEnd(YearOffset)
pandas.tseries.offsets.YearEnd.apply(self,other)
pandas.tseries.offsets.YearEnd.apply_index(self,i)
pandas.tseries.offsets.YearEnd.onOffset(self,dt)
pandas.tseries.offsets.YearOffset(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.YearOffset.__init__(self,n=1,normalize=False,**kwds)
pandas.tseries.offsets.YearOffset._from_name(cls,suffix=None)
pandas.tseries.offsets.YearOffset.rule_code(self)
pandas.tseries.offsets._delta_to_tick(delta)
pandas.tseries.offsets._get_firstbday(wkday)
pandas.tseries.offsets._is_normalized(dt)
pandas.tseries.offsets._tick_comp(op)
pandas.tseries.offsets.apply_index_wraps(func)
pandas.tseries.offsets.apply_wraps(func)
pandas.tseries.offsets.as_datetime(obj)
pandas.tseries.offsets.as_timestamp(obj)
pandas.tseries.offsets.generate_range(start=None,end=None,periods=None,offset=BDay(),time_rule=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tseries/holiday.py----------------------------------------
A:pandas.tseries.holiday.dow->Timestamp(datetime(self.year, self.month, self.day)).weekday()
A:pandas.tseries.holiday.start_date->Timestamp(datetime(1970, 1, 1))
A:pandas.tseries.holiday.end_date->Timestamp(datetime(2030, 12, 31))
A:pandas.tseries.holiday.dt->Timestamp(datetime(self.year, self.month, self.day))
A:pandas.tseries.holiday.dates->DatetimeIndex(start=reference_start_date, end=reference_end_date, freq=year_offset, tz=start_date.tz)
A:pandas.tseries.holiday.holiday_dates->self._apply_rule(dates)
A:pandas.tseries.holiday.filter_start_date->max(self.start_date.tz_localize(filter_start_date.tz), filter_start_date)
A:pandas.tseries.holiday.filter_end_date->min(self.end_date.tz_localize(filter_end_date.tz), filter_end_date)
A:pandas.tseries.holiday.year_offset->DateOffset(years=1)
A:pandas.tseries.holiday.reference_start_date->Timestamp(datetime(start_date.year - 1, self.month, self.day))
A:pandas.tseries.holiday.reference_end_date->Timestamp(datetime(end_date.year + 1, self.month, self.day))
A:pandas.tseries.holiday.calendar_class->type(name, (base_class,), {'rules': rules, 'name': name})
A:pandas.tseries.holiday.start->Timestamp(start)
A:pandas.tseries.holiday.end->Timestamp(end)
A:pandas.tseries.holiday.rule_holidays->rule.dates(start, end, return_name=True)
A:pandas.tseries.holiday.holidays->self.merge_class(self, other)
A:pandas.tseries.holiday.other_holidays->dict(((holiday.name, holiday) for holiday in other))
A:pandas.tseries.holiday.base_holidays->dict([(holiday.name, holiday) for holiday in base])
A:pandas.tseries.holiday.USMemorialDay->Holiday('MemorialDay', month=5, day=31, offset=DateOffset(weekday=MO(-1)))
A:pandas.tseries.holiday.USLaborDay->Holiday('Labor Day', month=9, day=1, offset=DateOffset(weekday=MO(1)))
A:pandas.tseries.holiday.USColumbusDay->Holiday('Columbus Day', month=10, day=1, offset=DateOffset(weekday=MO(2)))
A:pandas.tseries.holiday.USThanksgivingDay->Holiday('Thanksgiving', month=11, day=1, offset=DateOffset(weekday=TH(4)))
A:pandas.tseries.holiday.USMartinLutherKingJr->Holiday('Dr. Martin Luther King Jr.', start_date=datetime(1986, 1, 1), month=1, day=1, offset=DateOffset(weekday=MO(3)))
A:pandas.tseries.holiday.USPresidentsDay->Holiday('Presidents Day', month=2, day=1, offset=DateOffset(weekday=MO(3)))
A:pandas.tseries.holiday.GoodFriday->Holiday('Good Friday', month=1, day=1, offset=[Easter(), Day(-2)])
A:pandas.tseries.holiday.EasterMonday->Holiday('Easter Monday', month=1, day=1, offset=[Easter(), Day(1)])
A:pandas.tseries.holiday.rules->AbstractHolidayCalendar.merge_class(base, other)
pandas.tseries.holiday.AbstractHolidayCalendar(self,name=None,rules=None)
pandas.tseries.holiday.AbstractHolidayCalendar.__init__(self,name=None,rules=None)
pandas.tseries.holiday.AbstractHolidayCalendar.holidays(self,start=None,end=None,return_name=False)
pandas.tseries.holiday.AbstractHolidayCalendar.merge(self,other,inplace=False)
pandas.tseries.holiday.AbstractHolidayCalendar.merge_class(base,other)
pandas.tseries.holiday.AbstractHolidayCalendar.rule_from_name(self,name)
pandas.tseries.holiday.Holiday(self,name,year=None,month=None,day=None,offset=None,observance=None,start_date=None,end_date=None,days_of_week=None)
pandas.tseries.holiday.Holiday.__init__(self,name,year=None,month=None,day=None,offset=None,observance=None,start_date=None,end_date=None,days_of_week=None)
pandas.tseries.holiday.Holiday.__repr__(self)
pandas.tseries.holiday.Holiday._apply_rule(self,dates)
pandas.tseries.holiday.Holiday._reference_dates(self,start_date,end_date)
pandas.tseries.holiday.Holiday.dates(self,start_date,end_date,return_name=False)
pandas.tseries.holiday.HolidayCalendarFactory(name,base,other,base_class=AbstractHolidayCalendar)
pandas.tseries.holiday.HolidayCalendarMetaClass(cls,clsname,bases,attrs)
pandas.tseries.holiday.HolidayCalendarMetaClass.__new__(cls,clsname,bases,attrs)
pandas.tseries.holiday.USFederalHolidayCalendar(AbstractHolidayCalendar)
pandas.tseries.holiday.after_nearest_workday(dt)
pandas.tseries.holiday.before_nearest_workday(dt)
pandas.tseries.holiday.get_calendar(name)
pandas.tseries.holiday.nearest_workday(dt)
pandas.tseries.holiday.next_monday(dt)
pandas.tseries.holiday.next_monday_or_tuesday(dt)
pandas.tseries.holiday.next_workday(dt)
pandas.tseries.holiday.previous_friday(dt)
pandas.tseries.holiday.previous_workday(dt)
pandas.tseries.holiday.register(cls)
pandas.tseries.holiday.sunday_to_monday(dt)
pandas.tseries.holiday.weekend_to_monday(dt)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tseries/plotting.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tseries/api.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tseries/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tseries/converter.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/api/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/api/types/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/_libs/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_join.py----------------------------------------
A:pandas.tests.test_join.left->numpy.array([0, 1, 0, 1, 1, 2, 3, 1, 0, 2, 1, 2, 0, 1, 1, 2, 3, 2, 3, 2, 1, 1, 3, 0, 3, 2, 3, 0, 0, 2, 3, 2, 0, 3, 1, 3, 0, 1, 3, 0, 0, 1, 0, 3, 1, 0, 1, 0, 1, 1, 0, 2, 2, 2, 2, 2, 0, 3, 1, 2, 0, 0, 3, 1, 3, 2, 2, 0, 1, 3, 0, 2, 3, 2, 3, 3, 2, 3, 3, 1, 3, 2, 0, 0, 3, 1, 1, 1, 0, 2, 3, 3, 1, 2, 0, 3, 1, 2, 0, 2], dtype=np.int64)
A:pandas.tests.test_join.right->numpy.array([3, 1], dtype=np.int64)
A:pandas.tests.test_join.empty->numpy.array([], dtype=dtype)
A:pandas.tests.test_join.(result, lindexer, rindexer)->indexer(left, empty)
A:pandas.tests.test_join.exp->numpy.array([-1, -1, -1], dtype=np.int64)
A:pandas.tests.test_join.a->numpy.array([5], dtype=np.int64)
A:pandas.tests.test_join.b->numpy.array([5], dtype=np.int64)
A:pandas.tests.test_join.result->pandas._libs.join.left_join_indexer_unique_int64(b, a)
A:pandas.tests.test_join.expected->numpy.array([1, 1, 2, 3, 3], dtype=np.int64)
A:pandas.tests.test_join.(lidx, ridx)->pandas._libs.join.left_outer_join(left, right, max_groups, sort=False)
A:pandas.tests.test_join.exp_lidx->numpy.array([0, 0, 1, 2], dtype=np.int64)
A:pandas.tests.test_join.(index, ares, bres)->pandas._libs.join.left_join_indexer_int64(a, b)
A:pandas.tests.test_join.index_exp->numpy.array([0, 1, 2, 3, 4, 5, 7, 9], dtype=np.int64)
A:pandas.tests.test_join.aexp->numpy.array([0, 1, 2, 3, 4], dtype=np.int64)
A:pandas.tests.test_join.bexp->numpy.array([-1, -1, 1, -1, 2], dtype=np.int64)
A:pandas.tests.test_join.idx->Index([1, 1, 2, 5])
A:pandas.tests.test_join.idx2->Index([1, 2, 5, 7, 9])
A:pandas.tests.test_join.(res, lidx, ridx)->pandas._libs.join.inner_join_indexer_int64(idx2.values, idx.values)
A:pandas.tests.test_join.exp_res->numpy.array([1, 1, 2, 5], dtype=np.int64)
A:pandas.tests.test_join.exp_ridx->numpy.array([0, 1, 2, 3], dtype=np.int64)
pandas.tests.test_join.TestIndexer(object)
pandas.tests.test_join.TestIndexer.test_outer_join_indexer(self)
pandas.tests.test_join.test_inner_join_indexer()
pandas.tests.test_join.test_inner_join_indexer2()
pandas.tests.test_join.test_left_join_indexer()
pandas.tests.test_join.test_left_join_indexer2()
pandas.tests.test_join.test_left_join_indexer_unique()
pandas.tests.test_join.test_left_outer_join_bug()
pandas.tests.test_join.test_outer_join_indexer()
pandas.tests.test_join.test_outer_join_indexer2()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_categorical.py----------------------------------------
A:pandas.tests.test_categorical.self.factor->Categorical(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c'])
A:pandas.tests.test_categorical.c->Series(list('aabb')).astype('category')
A:pandas.tests.test_categorical.s->Series(list('aabb'))
A:pandas.tests.test_categorical.expected->numpy.rec.array([(0, 'a'), (1, 'b'), (2, 'c')], dtype=[('index', '=i8'), ('0', 'O')])
A:pandas.tests.test_categorical.indexer->numpy.array([100000]).astype(np.int64)
A:pandas.tests.test_categorical.arr->numpy.array([1, 2, 3, datetime.now()], dtype='O')
A:pandas.tests.test_categorical.factor->Categorical([], [])
A:pandas.tests.test_categorical.result->DataFrame(list('abc'), dtype='category').to_records()
A:pandas.tests.test_categorical.ii->pandas.IntervalIndex.from_intervals([Interval(1, 2), Interval(2, 3), Interval(3, 6)])
A:pandas.tests.test_categorical.exp->Categorical(['A', 'B', 'C'])
A:pandas.tests.test_categorical.c1->pandas.Categorical(['cheese', 'milk', 'apple', 'bread', 'bread'], categories=['cheese', 'milk', 'apple', 'bread'], ordered=True)
A:pandas.tests.test_categorical.c2->pandas.Categorical(['cheese', 'milk', 'apple', 'bread', 'bread'], categories=['cheese', 'milk', 'apple', 'bread'], ordered=False)
A:pandas.tests.test_categorical.c3->Categorical(list('aabca'), categories=list('cab'), ordered=True)
A:pandas.tests.test_categorical.exp_arr->numpy.array([6, 5, 4, 3, 2, 1, 0], dtype=np.int8)
A:pandas.tests.test_categorical.cat->Categorical(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c'])
A:pandas.tests.test_categorical.c_old->Categorical([0, 1, 2, 0, 1, 2], categories=[3, 4, 5])
A:pandas.tests.test_categorical.c_old2->Categorical([0, 1, 2, 0, 1, 2], [1, 2, 3])
A:pandas.tests.test_categorical.ci->CategoricalIndex(list('aabbca'), categories=list('cab'))
A:pandas.tests.test_categorical.s2->Series(Categorical(['1', '2', '3', '4']))
A:pandas.tests.test_categorical.idx->pandas.TimedeltaIndex(['1 days', '2 days', '1 days', pd.NaT, pd.NaT])
A:pandas.tests.test_categorical.res->pandas.util.testing.SubclassedCategorical(['a', 'b', 'c']).map(lambda x: x.upper())
A:pandas.tests.test_categorical.codes->numpy.random.choice([0, 1], 5, p=[0.9, 0.1])
A:pandas.tests.test_categorical.ordered->numpy.array([0, 1, 2])
A:pandas.tests.test_categorical.n->len(self.factor)
A:pandas.tests.test_categorical.cat_rev->pandas.Series(pd.Categorical(data, categories=reverse, ordered=True))
A:pandas.tests.test_categorical.cat_rev_base->pandas.Series(pd.Categorical(base, categories=reverse, ordered=True))
A:pandas.tests.test_categorical.cat_base->pandas.Series(pd.Categorical(base, categories=cat.cat.categories, ordered=True))
A:pandas.tests.test_categorical.exp_rev->Series([True, False, False])
A:pandas.tests.test_categorical.cat_rev_base2->pandas.Categorical(['b', 'b', 'b'], categories=['c', 'b', 'a', 'd'])
A:pandas.tests.test_categorical.cat_unorderd->Categorical(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c']).set_ordered(False)
A:pandas.tests.test_categorical.a->Series(np.arange(6, dtype='int64'))
A:pandas.tests.test_categorical.categories->lrange(10)
A:pandas.tests.test_categorical.labels->Categorical(['{0} - {1}'.format(i, i + 499) for i in range(0, 10000, 500)])
A:pandas.tests.test_categorical.desc->Categorical(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c']).describe()
A:pandas.tests.test_categorical.exp_index->pandas.MultiIndex.from_product([Categorical(['a', 'b', 'z'], ordered=True), Categorical(['c', 'd', 'y'], ordered=True)], names=['A', 'B'])
A:pandas.tests.test_categorical.actual->repr(factor)
A:pandas.tests.test_categorical.idx1->pandas.Index(['h', 'i', 'j', 'k', 'l', 'm', 'n'])
A:pandas.tests.test_categorical.cat1->Categorical(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c']).copy()
A:pandas.tests.test_categorical.exp_idx->pandas.CategoricalIndex(['a', 'b', 'z'], name='A', ordered=True)
A:pandas.tests.test_categorical.idx2->pandas.Index(['h', 'i', 'j', 'k', 'l', 'm', 'n'])
A:pandas.tests.test_categorical.cat2->pandas.Categorical([1, 2, 3, 3], categories=[1, 2, 3])
A:pandas.tests.test_categorical.exp_idx2->PeriodIndex(['2014-01', '2014-02', '2014-03'], freq='M')
A:pandas.tests.test_categorical.idx3->pandas.Index(['h', 'i', 'j', 'k', 'l', 'm', 'n'])
A:pandas.tests.test_categorical.cat3->pandas.Categorical([1, 2, 3], categories=[1, 2, 3])
A:pandas.tests.test_categorical.cat4->pandas.Categorical([1, 2], categories=[1, 2, 3])
A:pandas.tests.test_categorical.exp_categories->Index(['a', 'b'])
A:pandas.tests.test_categorical.exp_values->numpy.array(['a', 'b', 'b', 'a'], dtype=np.object_)
A:pandas.tests.test_categorical.exp_categories_back->Index(['a', 'b', 'c'])
A:pandas.tests.test_categorical.exp_cat->numpy.array(['a', 'b', 'c', 'a'], dtype=np.object_)
A:pandas.tests.test_categorical.old->Categorical(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c']).copy()
A:pandas.tests.test_categorical.new->Categorical(['a', 'b', np.nan, 'a'], categories=['a', 'b'], ordered=True)
A:pandas.tests.test_categorical.exp_categories_all->Index(['a', 'b', 'c', 'd', 'e'])
A:pandas.tests.test_categorical.exp_categories_dropped->Index(['a', 'b', 'c', 'd'])
A:pandas.tests.test_categorical.exp_codes->Series([0, 1, 2, 0], dtype='int8')
A:pandas.tests.test_categorical.out->Categorical(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c']).remove_unused_categories()
A:pandas.tests.test_categorical.alpha->list('abcdefghijklmnopqrstuvwxyz')
A:pandas.tests.test_categorical.val->Categorical([np.nan, np.nan, np.nan])
A:pandas.tests.test_categorical.c.codes->numpy.array([0, 1, 2, 0, 1], dtype='int8')
A:pandas.tests.test_categorical._min->Categorical(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c']).min()
A:pandas.tests.test_categorical._max->Categorical(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c']).max()
A:pandas.tests.test_categorical.exp_val->numpy.array([np.nan, 'd', 'c', 'b', 'a'], dtype=object)
A:pandas.tests.test_categorical.sp1->Categorical(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c']).shift(1)
A:pandas.tests.test_categorical.xp1->pandas.Categorical([np.nan, 'a', 'b', 'c', 'd'])
A:pandas.tests.test_categorical.sn2->Categorical(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c']).shift(-2)
A:pandas.tests.test_categorical.xp2->pandas.Categorical(['c', 'd', 'a', np.nan, np.nan], categories=['a', 'b', 'c', 'd'])
A:pandas.tests.test_categorical.s1->pandas.Series(c1)
A:pandas.tests.test_categorical.res_cat->pandas.Categorical(['cheese', 'milk', 'apple', 'bread', 'bread'], categories=['cheese', 'milk', 'apple', 'bread'], ordered=True).searchsorted(['apple', 'bread'], side='right')
A:pandas.tests.test_categorical.res_ser->pandas.Series(c1).searchsorted(['apple', 'bread'], side='right')
A:pandas.tests.test_categorical.dt_cat->pandas.Categorical(pd.date_range('2014-01-01', periods=3), ordered=True)
A:pandas.tests.test_categorical.df->DataFrame(list('abc'), dtype='category')
A:pandas.tests.test_categorical.cat_labels->Categorical(labels, labels)
A:pandas.tests.test_categorical.df['value_group']->pandas.cut(df.value, range(0, 10500, 500), right=False, labels=cat_labels)
A:pandas.tests.test_categorical.obj->pandas.Series(['a', 'b', 'c'])
A:pandas.tests.test_categorical.num->pandas.Series([1, 2, 3])
A:pandas.tests.test_categorical.x->pandas.DataFrame([[1, 'John P. Doe'], [2, 'Jane Dove'], [1, 'John P. Doe']], columns=['person_id', 'person_name'])
A:pandas.tests.test_categorical.x['person_name']->pandas.Categorical(x.person_name)
A:pandas.tests.test_categorical.cats->pandas.Categorical(['a', 'a', 'a', 'a', 'a', 'a', 'a'], categories=['a', 'b'])
A:pandas.tests.test_categorical.exp_df->pandas.DataFrame({'cats': cats2, 'values': values2}, index=idx2)
A:pandas.tests.test_categorical.df['cats']->df['cats'].astype('category').astype('category')
A:pandas.tests.test_categorical.index->pandas.date_range('20000101', periods=3)
A:pandas.tests.test_categorical.p->pandas.period_range('2011-01', freq='M', periods=5)
A:pandas.tests.test_categorical.df['category']->Series(np.array(list('abcdefghij')).take(np.random.randint(0, 10, size=n))).astype('category')
A:pandas.tests.test_categorical.exp_s->numpy.array([1, 2, 3, 1], dtype=np.int64)
A:pandas.tests.test_categorical.exp_s2->numpy.array([2, 2, 3, 1], dtype=np.int64)
A:pandas.tests.test_categorical.df['grade']->pandas.Categorical(df['raw_grade'])
A:pandas.tests.test_categorical.df['group']->pandas.cut(df.value, range(0, 105, 10), right=False, labels=labels)
A:pandas.tests.test_categorical.df3->DataFrame({'A': a, 'B': pd.Categorical(b, categories=list('abc'))}).set_index('B')
A:pandas.tests.test_categorical.levs->list('abcdefghijklmnopqrstuvwxyz')
A:pandas.tests.test_categorical.i->pandas.CategoricalIndex(pd.Categorical(idx, ordered=True))
A:pandas.tests.test_categorical.dt->pandas.date_range('2011-01-01 09:00', freq='H', periods=5, tz='US/Eastern')
A:pandas.tests.test_categorical.buf->pandas.compat.StringIO()
A:pandas.tests.test_categorical.exp.index->pandas.CategoricalIndex(exp.index, name=exp.index.name)
A:pandas.tests.test_categorical.data->DataFrame({'a': [1, 1, 1, 2, 2, 2, 3, 4, 5], 'b': cats})
A:pandas.tests.test_categorical.raw_cat1->Categorical(['a', 'b', 'c', 'd'], categories=['a', 'b', 'c', 'd'], ordered=False)
A:pandas.tests.test_categorical.raw_cat2->Categorical(['a', 'b', 'c', 'd'], categories=['d', 'c', 'b', 'a'], ordered=True)
A:pandas.tests.test_categorical.gb->DataFrame(list('abc'), dtype='category').groupby(['A', 'B', 'C'])
A:pandas.tests.test_categorical.g->pandas.DataFrame([[1, 'John P. Doe'], [2, 'Jane Dove'], [1, 'John P. Doe']], columns=['person_id', 'person_name']).groupby(['person_id'])
A:pandas.tests.test_categorical.expected.index->Index([1, 2], name='person_id')
A:pandas.tests.test_categorical.expected['person_name']->expected['person_name'].astype('object').astype('object')
A:pandas.tests.test_categorical.df['D']->pandas.cut(df.value, bins=[0, 25, 50, 75, 100])
A:pandas.tests.test_categorical.expected['D']->pandas.cut(expected.value, bins=[0, 25, 50, 75, 100])
A:pandas.tests.test_categorical.cats2->pandas.Categorical(['a', 'a', 'b', 'b', 'a', 'a', 'a'], categories=['a', 'b'])
A:pandas.tests.test_categorical.exp_col->pandas.Series(cats, index=idx, name='cats')
A:pandas.tests.test_categorical.exp_row->pandas.Series(['b', 3], index=['cats', 'values'], dtype='object', name='j')
A:pandas.tests.test_categorical.res_val->DataFrame(list('abc'), dtype='category').get_value('j', 'cats')
A:pandas.tests.test_categorical.orig->Series(pd.Categorical(['b', 'b'], categories=['a', 'b']))
A:pandas.tests.test_categorical.cats1->pandas.Categorical(['a', 'a', 'b', 'a', 'a', 'a', 'a'], categories=['a', 'b'])
A:pandas.tests.test_categorical.exp_single_row->pandas.DataFrame({'cats': cats1, 'values': values1}, index=idx1)
A:pandas.tests.test_categorical.exp_multi_row->pandas.DataFrame({'cats': cats2, 'values': values2}, index=idx2)
A:pandas.tests.test_categorical.cats3->pandas.Categorical(['a', 'a', 'b', 'b', 'a', 'a', 'a'], categories=['a', 'b'])
A:pandas.tests.test_categorical.exp_parts_cats_col->pandas.DataFrame({'cats': cats3, 'values': values3}, index=idx3)
A:pandas.tests.test_categorical.cats4->pandas.Categorical(['a', 'a', 'b', 'a', 'a', 'a', 'a'], categories=['a', 'b'])
A:pandas.tests.test_categorical.idx4->pandas.Index(['h', 'i', 'j', 'k', 'l', 'm', 'n'])
A:pandas.tests.test_categorical.exp_single_cats_value->pandas.DataFrame({'cats': cats4, 'values': values4}, index=idx4)
A:pandas.tests.test_categorical.df.iloc[2:4, 0]->pandas.Categorical(['c', 'c'], categories=['a', 'b', 'c'])
A:pandas.tests.test_categorical.df.loc['j':'k', 'cats']->pandas.Categorical(['c', 'c'], categories=['a', 'b', 'c'])
A:pandas.tests.test_categorical.df.loc['j':'k', df.columns[0]]->pandas.Categorical(['c', 'c'], categories=['a', 'b', 'c'])
A:pandas.tests.test_categorical.catsf->pandas.Categorical(['a', 'a', 'c', 'c', 'a', 'a', 'a'], categories=['a', 'b', 'c'])
A:pandas.tests.test_categorical.idxf->pandas.Index(['h', 'i', 'j', 'k', 'l', 'm', 'n'])
A:pandas.tests.test_categorical.exp_fancy->pandas.DataFrame({'cats': cats2, 'values': values2}, index=idx2).copy()
A:pandas.tests.test_categorical.df.loc[1:2, 'a']->pandas.Categorical(['b', 'b'], categories=['a', 'b'])
A:pandas.tests.test_categorical.df.loc[2:3, 'b']->pandas.Categorical(['b', 'b'], categories=['a', 'b'])
A:pandas.tests.test_categorical.b->Series(list('aabbca'))
A:pandas.tests.test_categorical.d->Series(list('acb'), dtype='object')
A:pandas.tests.test_categorical.e->Categorical(list('abc'))
A:pandas.tests.test_categorical.f->Categorical(list('acb'))
A:pandas.tests.test_categorical.df_different_categories->pandas.DataFrame({'cats': cat3, 'vals': vals3})
A:pandas.tests.test_categorical.dfx->pandas.concat([df1, df2])
A:pandas.tests.test_categorical.dfa->pandas.DataFrame(np.arange(18, dtype='int64').reshape(6, 3), columns=['a', 'b', 'c']).append(df2)
A:pandas.tests.test_categorical.df2->pandas.DataFrame(np.arange(14, dtype='int64').reshape(7, 2), columns=['a', 'c'])
A:pandas.tests.test_categorical.right->DataFrame({'c': {0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e'}, 'd': {0: 'null', 1: 'null', 2: 'null', 3: 'null', 4: 'null'}})
A:pandas.tests.test_categorical.left->DataFrame({'a': {0: 'f', 1: 'f', 2: 'f', 3: 'f', 4: 'f'}, 'b': {0: 'g', 1: 'g', 2: 'g', 3: 'g', 4: 'g'}})
A:pandas.tests.test_categorical.cright->DataFrame({'c': {0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e'}, 'd': {0: 'null', 1: 'null', 2: 'null', 3: 'null', 4: 'null'}}).copy()
A:pandas.tests.test_categorical.cright['d']->cright['d'].astype('category').astype('category')
A:pandas.tests.test_categorical.expected['d']->expected['d'].astype('category', categories=['null']).astype('category', categories=['null'])
A:pandas.tests.test_categorical.cleft->DataFrame({'a': {0: 'f', 1: 'f', 2: 'f', 3: 'f', 4: 'f'}, 'b': {0: 'g', 1: 'g', 2: 'g', 3: 'g', 4: 'g'}}).copy()
A:pandas.tests.test_categorical.cleft['b']->cleft['b'].astype('category').astype('category')
A:pandas.tests.test_categorical.df_exp_fill->pandas.DataFrame({'cats': cat2, 'vals': vals2})
A:pandas.tests.test_categorical.df_exp_drop_cats->pandas.DataFrame({'cats': cat3, 'vals': vals3})
A:pandas.tests.test_categorical.df_exp_drop_all->pandas.DataFrame({'cats': cat4, 'vals': vals4})
A:pandas.tests.test_categorical.cat_exp->Categorical(['a', 'b', 'a'], categories=['a', 'b'])
A:pandas.tests.test_categorical.df_exp->pandas.DataFrame({'cats': [2, 2, 2], 'vals': v_exp}, dtype='category')
A:pandas.tests.test_categorical.exp2->Series([1, 2, 3, 4]).astype(int)
A:pandas.tests.test_categorical.results->get_dir(s)
A:pandas.tests.test_categorical.invalid->Series([1, 2, 3]).astype('category')
A:pandas.tests.test_categorical.s_dr->Series(date_range('1/1/2015', periods=5, tz='MET'))
A:pandas.tests.test_categorical.c_dr->Series(date_range('1/1/2015', periods=5, tz='MET')).astype('category')
A:pandas.tests.test_categorical.s_pr->Series(period_range('1/1/2015', freq='D', periods=5))
A:pandas.tests.test_categorical.c_pr->Series(period_range('1/1/2015', freq='D', periods=5)).astype('category')
A:pandas.tests.test_categorical.s_tdr->Series(timedelta_range('1 days', '10 days'))
A:pandas.tests.test_categorical.c_tdr->Series(timedelta_range('1 days', '10 days')).astype('category')
A:pandas.tests.test_categorical.df1->pandas.DataFrame(np.arange(18, dtype='int64').reshape(6, 3), columns=['a', 'b', 'c'])
A:pandas.tests.test_categorical.df2['h']->pandas.Series(pd.Categorical(cat_values))
A:pandas.tests.test_categorical.sc->pandas.util.testing.SubclassedCategorical(['a', 'b', 'c'])
pandas.tests.test_categorical.TestCategorical(object)
pandas.tests.test_categorical.TestCategorical.setup_method(self,method)
pandas.tests.test_categorical.TestCategorical.test_add_categories(self)
pandas.tests.test_categorical.TestCategorical.test_argsort(self)
pandas.tests.test_categorical.TestCategorical.test_big_print(self)
pandas.tests.test_categorical.TestCategorical.test_categories_assigments(self)
pandas.tests.test_categorical.TestCategorical.test_categories_none(self)
pandas.tests.test_categorical.TestCategorical.test_codes_immutable(self)
pandas.tests.test_categorical.TestCategorical.test_comparison_with_unknown_scalars(self)
pandas.tests.test_categorical.TestCategorical.test_comparisons(self)
pandas.tests.test_categorical.TestCategorical.test_construction_with_ordered(self)
pandas.tests.test_categorical.TestCategorical.test_constructor(self)
pandas.tests.test_categorical.TestCategorical.test_constructor_from_index_series_datetimetz(self)
pandas.tests.test_categorical.TestCategorical.test_constructor_from_index_series_period(self)
pandas.tests.test_categorical.TestCategorical.test_constructor_from_index_series_timedelta(self)
pandas.tests.test_categorical.TestCategorical.test_constructor_interval(self)
pandas.tests.test_categorical.TestCategorical.test_constructor_invariant(self)
pandas.tests.test_categorical.TestCategorical.test_constructor_unsortable(self)
pandas.tests.test_categorical.TestCategorical.test_constructor_with_datetimelike(self)
pandas.tests.test_categorical.TestCategorical.test_constructor_with_generator(self)
pandas.tests.test_categorical.TestCategorical.test_constructor_with_index(self)
pandas.tests.test_categorical.TestCategorical.test_constructor_with_null(self)
pandas.tests.test_categorical.TestCategorical.test_datetime_categorical_comparison(self)
pandas.tests.test_categorical.TestCategorical.test_deprecated_from_array(self)
pandas.tests.test_categorical.TestCategorical.test_deprecated_labels(self)
pandas.tests.test_categorical.TestCategorical.test_describe(self)
pandas.tests.test_categorical.TestCategorical.test_empty_print(self)
pandas.tests.test_categorical.TestCategorical.test_from_codes(self)
pandas.tests.test_categorical.TestCategorical.test_getitem(self)
pandas.tests.test_categorical.TestCategorical.test_getitem_category_type(self)
pandas.tests.test_categorical.TestCategorical.test_getitem_listlike(self)
pandas.tests.test_categorical.TestCategorical.test_is_equal_dtype(self)
pandas.tests.test_categorical.TestCategorical.test_isnull(self)
pandas.tests.test_categorical.TestCategorical.test_map(self)
pandas.tests.test_categorical.TestCategorical.test_memory_usage(self)
pandas.tests.test_categorical.TestCategorical.test_min_max(self)
pandas.tests.test_categorical.TestCategorical.test_mode(self)
pandas.tests.test_categorical.TestCategorical.test_na_flags_int_categories(self)
pandas.tests.test_categorical.TestCategorical.test_nan_handling(self)
pandas.tests.test_categorical.TestCategorical.test_nbytes(self)
pandas.tests.test_categorical.TestCategorical.test_numpy_argsort(self)
pandas.tests.test_categorical.TestCategorical.test_ordered_api(self)
pandas.tests.test_categorical.TestCategorical.test_periodindex(self)
pandas.tests.test_categorical.TestCategorical.test_print(self)
pandas.tests.test_categorical.TestCategorical.test_print_none_width(self)
pandas.tests.test_categorical.TestCategorical.test_reflected_comparison_with_scalars(self)
pandas.tests.test_categorical.TestCategorical.test_remove_categories(self)
pandas.tests.test_categorical.TestCategorical.test_remove_unused_categories(self)
pandas.tests.test_categorical.TestCategorical.test_rename_categories(self)
pandas.tests.test_categorical.TestCategorical.test_reorder_categories(self)
pandas.tests.test_categorical.TestCategorical.test_searchsorted(self)
pandas.tests.test_categorical.TestCategorical.test_set_categories(self)
pandas.tests.test_categorical.TestCategorical.test_set_item_nan(self)
pandas.tests.test_categorical.TestCategorical.test_set_ordered(self)
pandas.tests.test_categorical.TestCategorical.test_setitem(self)
pandas.tests.test_categorical.TestCategorical.test_setitem_listlike(self)
pandas.tests.test_categorical.TestCategorical.test_shift(self)
pandas.tests.test_categorical.TestCategorical.test_slicing_directly(self)
pandas.tests.test_categorical.TestCategorical.test_sort_values(self)
pandas.tests.test_categorical.TestCategorical.test_sort_values_na_position(self)
pandas.tests.test_categorical.TestCategorical.test_unicode_print(self)
pandas.tests.test_categorical.TestCategorical.test_unique(self)
pandas.tests.test_categorical.TestCategorical.test_unique_index_series(self)
pandas.tests.test_categorical.TestCategorical.test_unique_ordered(self)
pandas.tests.test_categorical.TestCategorical.test_validate_inplace(self)
pandas.tests.test_categorical.TestCategorical.test_validate_ordered(self)
pandas.tests.test_categorical.TestCategoricalAsBlock(object)
pandas.tests.test_categorical.TestCategoricalAsBlock.setup_method(self,method)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_assigning_ops(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_assignment_to_dataframe(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_astype_categorical(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_astype_to_other(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_basic(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_cat_accessor(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_cat_accessor_api(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_cat_accessor_no_new_attributes(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_cat_equality(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_cat_tab_completition(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_frame(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_index_preserver(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_index_repr(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_index_repr_datetime(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_index_repr_datetime_ordered(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_index_repr_ordered(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_index_repr_period(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_index_repr_period_ordered(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_index_repr_timedelta(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_index_repr_timedelta_ordered(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_repr(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_repr_datetime(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_repr_datetime_ordered(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_repr_ordered(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_repr_period(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_repr_period_ordered(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_repr_timedelta(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_repr_timedelta_ordered(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_series_repr(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_series_repr_datetime(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_series_repr_datetime_ordered(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_series_repr_ordered(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_series_repr_period(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_series_repr_period_ordered(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_series_repr_timedelta(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_categorical_series_repr_timedelta_ordered(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_codes_dtypes(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_comparisons(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_concat_append(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_concat_append_gh7864(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_concat_categorical(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_concat_preserve(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_construction_frame(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_construction_series(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_count(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_creation_astype(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_describe(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_dt_accessor_api_for_categorical(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_dtypes(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_groupby(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_groupby_sort(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_info(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_merge(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_min_max(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_mode(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_na_actions(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_nan_handling(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_numeric_like_ops(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_numpy_repeat(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_numpy_reshape(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_pivot_table(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_reindex(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_repeat(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_repr(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_reshape(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_reshaping(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_sequence_like(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_series_delegations(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_series_functions_no_warnings(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_sideeffects_free(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_slicing(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_slicing_and_getting_ops(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_slicing_doc_examples(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_sort_values(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_str_accessor_api_for_categorical(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_to_records(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_value_counts(self)
pandas.tests.test_categorical.TestCategoricalAsBlock.test_value_counts_with_nan(self)
pandas.tests.test_categorical.TestCategoricalSubclassing(object)
pandas.tests.test_categorical.TestCategoricalSubclassing.test_constructor(self)
pandas.tests.test_categorical.TestCategoricalSubclassing.test_from_array(self)
pandas.tests.test_categorical.TestCategoricalSubclassing.test_map(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_resample.py----------------------------------------
A:pandas.tests.test_resample.bday->BDay()
A:pandas.tests.test_resample.rng->period_range('2000Q1', periods=10, freq='Q-DEC')
A:pandas.tests.test_resample.dti->date_range('2013-09-30', '2013-11-02', freq='30Min', tz='Europe/Paris')
A:pandas.tests.test_resample.self.series->Series(np.random.rand(len(dti)), dti)
A:pandas.tests.test_resample.self.frame->DataFrame({'A': [1] * 20 + [2] * 12 + [3] * 8, 'B': np.arange(40)}, index=date_range('1/1/2000', freq='s', periods=40))
A:pandas.tests.test_resample.r->self.frame.groupby('A').resample('2s')
A:pandas.tests.test_resample.result->wp.groupby(grouper).agg(f)
A:pandas.tests.test_resample.expected->expected.sort_index().sort_index()
A:pandas.tests.test_resample.df->DataFrame(data, columns=['A', 'B', 'C', 'D'])
A:pandas.tests.test_resample.index->func(n)
A:pandas.tests.test_resample.s->Series(np.random.randn(len(index)), index=index)
A:pandas.tests.test_resample.g->self.frame.groupby('A')
A:pandas.tests.test_resample.ts->Series(np.arange(10), index=rng)
A:pandas.tests.test_resample.rs->Series(np.arange(10), index=rng).resample('30s')
A:pandas.tests.test_resample.df_col->DataFrame(data, columns=['A', 'B', 'C', 'D']).reset_index()
A:pandas.tests.test_resample.df_mult->DataFrame(data, columns=['A', 'B', 'C', 'D']).reset_index().copy()
A:pandas.tests.test_resample.df_mult.index->pandas.MultiIndex.from_arrays([range(10), df.index], names=['index', 'date'])
A:pandas.tests.test_resample.a_mean->r['A'].mean()
A:pandas.tests.test_resample.a_std->r['A'].std()
A:pandas.tests.test_resample.a_sum->r['A'].sum()
A:pandas.tests.test_resample.b_mean->r['B'].mean()
A:pandas.tests.test_resample.b_std->r['B'].std()
A:pandas.tests.test_resample.b_sum->r['B'].sum()
A:pandas.tests.test_resample.expected.columns->pandas.MultiIndex.from_tuples([('value', 'mean')])
A:pandas.tests.test_resample.rcustom->t['B'].apply(lambda x: np.std(x, ddof=1))
A:pandas.tests.test_resample.df_exp->pandas.DataFrame({'a': np.arange(len(index), dtype=np.int64)}, index=index)
A:pandas.tests.test_resample.exp->Series(np.arange(10), index=rng).to_timestamp().resample('A').mean().to_period()
A:pandas.tests.test_resample.factory->self._index_factory()
A:pandas.tests.test_resample.expected.index.freq->to_offset('2D')
A:pandas.tests.test_resample.frame->Series(np.random.randn(len(index)), index=index).to_frame('value')
A:pandas.tests.test_resample.new_index->date_range(frame.index[0].to_timestamp(how='start'), frame.index[-1].to_timestamp(how='start'), freq='1H')
A:pandas.tests.test_resample.xp->DataFrame()
A:pandas.tests.test_resample.expected.index->date_range(start='2013-01-01', freq='D', periods=5, name='key')
A:pandas.tests.test_resample.f->DataFrame(index=index)
A:pandas.tests.test_resample.empty_series->pandas.Series([], index, dtype)
A:pandas.tests.test_resample.expected_index->pandas.period_range(start='2000', freq='M', periods=4)
A:pandas.tests.test_resample.result_agg->DataFrame(data, columns=['A', 'B', 'C', 'D']).resample('2D', loffset='2H').agg(arg)
A:pandas.tests.test_resample.result_how->DataFrame(data, columns=['A', 'B', 'C', 'D']).resample('2D', how=arg, loffset='2H')
A:pandas.tests.test_resample.i->timedelta_range('1 day', '10 day', freq='D')
A:pandas.tests.test_resample.b->Series(np.random.randn(len(index)), index=index).loc[:'4-14-2000'].resample('30T').ohlc()
A:pandas.tests.test_resample.idx->DatetimeIndex(start='8/15/2012', periods=100, freq=from_freq)
A:pandas.tests.test_resample.expect->Series(np.random.randn(len(index)), index=index).groupby(grouper).agg(lambda x: x[-1])
A:pandas.tests.test_resample.exp_idx->pandas.DatetimeIndex(['2014-07-31', '2014-08-31', '2014-09-30', '2014-10-31', '2014-11-30'], freq='M', name='A')
A:pandas.tests.test_resample.grouper->TimeGrouper('A', label='right', closed='right')
A:pandas.tests.test_resample.grouplist->numpy.ones_like(s)
A:pandas.tests.test_resample.inds->date_range('1/1/2000', periods=4, freq='5min', name='index')
A:pandas.tests.test_resample.data->numpy.random.randn(n, 4).astype('int64')
A:pandas.tests.test_resample.ind->pandas.date_range('1/1/2000', periods=100)
A:pandas.tests.test_resample.df_standard->DataFrame(data, columns=['A', 'B', 'C', 'D']).resample('M').apply(fn)
A:pandas.tests.test_resample.df_lambda->DataFrame(data, columns=['A', 'B', 'C', 'D']).resample('M').apply(lambda x: str(type(x)))
A:pandas.tests.test_resample.df_partial->DataFrame(data, columns=['A', 'B', 'C', 'D']).resample('M').apply(partial(fn))
A:pandas.tests.test_resample.df_partial2->DataFrame(data, columns=['A', 'B', 'C', 'D']).resample('M').apply(partial(fn, a=2))
A:pandas.tests.test_resample.df_class->DataFrame(data, columns=['A', 'B', 'C', 'D']).resample('M').apply(fn_class())
A:pandas.tests.test_resample.series->series.tz_convert(local_timezone).tz_convert(local_timezone)
A:pandas.tests.test_resample.dates->date_range('4/16/2012 20:00', periods=50000, freq='s')
A:pandas.tests.test_resample.result1->Series(np.random.randn(len(index)), index=index).resample('D').sum()
A:pandas.tests.test_resample.result2->Series(np.random.randn(len(index)), index=index).resample('T', kind='period').mean()
A:pandas.tests.test_resample.ser->Series(np.random.rand(len(dti)), dti)
A:pandas.tests.test_resample.a->Series(np.random.randn(len(index)), index=index).loc[:'4-15-2000'].resample('30T').ohlc()
A:pandas.tests.test_resample.res->df['timestamp'].resample('2D').first()
A:pandas.tests.test_resample.exp.columns->pandas.MultiIndex.from_tuples([('a', 'c', 'open'), ('a', 'c', 'high'), ('a', 'c', 'low'), ('a', 'c', 'close'), ('b', 'd', 'open'), ('b', 'd', 'high'), ('b', 'd', 'low'), ('b', 'd', 'close')])
A:pandas.tests.test_resample.bs->Series(np.random.randn(len(index)), index=index).resample('B', closed='right', label='right').mean()
A:pandas.tests.test_resample.resampled->DataFrame(data, columns=['A', 'B', 'C', 'D']).resample(to_freq).mean()
A:pandas.tests.test_resample.n->len(ind)
A:pandas.tests.test_resample.panel->panel.swapaxes(1, 2).swapaxes(1, 2)
A:pandas.tests.test_resample.result[item]->f(panel[item])
A:pandas.tests.test_resample.panel2->panel.swapaxes(1, 2).swapaxes(1, 2).swapaxes(1, 2)
A:pandas.tests.test_resample.exp_rng->period_range('1/1/2000', '2/1/2000 23:00', freq='H')
A:pandas.tests.test_resample.with_base->Series(np.arange(10), index=rng).resample('2s', base=5).mean()
A:pandas.tests.test_resample.without_base->Series(np.arange(10), index=rng).resample('2s').mean()
A:pandas.tests.test_resample.exp_without_base->timedelta_range(start='0s', end='25s', freq='2s')
A:pandas.tests.test_resample.exp_with_base->timedelta_range(start='5s', end='29s', freq='2s')
A:pandas.tests.test_resample.df['Group']->df['Group_obj'].astype('category')
A:pandas.tests.test_resample.exp_index->period_range('Jan-2000', 'Dec-2000', freq='M')
A:pandas.tests.test_resample.s2->pandas.Series(np.random.randint(0, 5, 50), index=pd.period_range('2012-01-01', freq='H', periods=50), dtype='float64')
A:pandas.tests.test_resample.indx->pandas.date_range(start=pd.to_datetime(start), periods=10, freq='100n')
A:pandas.tests.test_resample.exp_indx->pandas.date_range(start=pd.to_datetime(exp_start), periods=10, freq='100n')
A:pandas.tests.test_resample.ex_index->date_range(start='1/1/2012 9:30', freq='10min', periods=3)
A:pandas.tests.test_resample.foo_exp->Series(np.arange(10), index=rng).resample('M').mean()
A:pandas.tests.test_resample.bar_exp->Series(np.arange(10), index=rng).resample('M').std()
A:pandas.tests.test_resample.start->datetime(year=2013, month=11, day=1, hour=0, minute=0, tzinfo=dateutil.tz.tzutc())
A:pandas.tests.test_resample.end->datetime(year=2013, month=11, day=2, hour=0, minute=0, tzinfo=dateutil.tz.tzutc())
A:pandas.tests.test_resample.bad_ind->date_range(start, end, freq='30min')
A:pandas.tests.test_resample.i30->pandas.date_range('2002-02-02', periods=4, freq='30T')
A:pandas.tests.test_resample.i10->pandas.date_range(i30[0], i30[-1], freq='10T')
A:pandas.tests.test_resample.s10->Series(np.random.randn(len(index)), index=index).reindex(index=i10, method='bfill')
A:pandas.tests.test_resample.s10_2->Series(np.random.randn(len(index)), index=index).reindex(index=i10, method='bfill', limit=2)
A:pandas.tests.test_resample.rl->Series(np.random.randn(len(index)), index=index).reindex_like(s10, method='bfill', limit=2)
A:pandas.tests.test_resample.r10_2->Series(np.random.randn(len(index)), index=index).resample('10Min').bfill(limit=2)
A:pandas.tests.test_resample.r10->Series(np.random.randn(len(index)), index=index).resample('10Min').bfill()
A:pandas.tests.test_resample.index2->pandas.date_range('4-15-2000', '5-15-2000', freq='h')
A:pandas.tests.test_resample.index3->func(n).append(index2)
A:pandas.tests.test_resample.dr->date_range(start='2012-4-13', end='2012-5-1')
A:pandas.tests.test_resample.left->Series(np.arange(10), index=rng).resample('7T').size()
A:pandas.tests.test_resample.ix->date_range(start=left.index.min(), end=ts.index.max(), freq='7T')
A:pandas.tests.test_resample.bins->numpy.searchsorted(ix.values, ts.index.values, side='right')
A:pandas.tests.test_resample.sorter->numpy.lexsort((vals, bins))
A:pandas.tests.test_resample.arr->numpy.bincount(bins[mask] - 1, minlength=len(ix)).astype('int64', copy=False)
A:pandas.tests.test_resample.right->Series(val, index=ix)
A:pandas.tests.test_resample.val->numpy.bincount(bins, minlength=len(ix) + 1)[1:].astype('int64', copy=False)
A:pandas.tests.test_resample.df1->DataFrame([1477786980, 1477790580], columns=['ts'])
A:pandas.tests.test_resample.dti1->DatetimeIndex(pd.to_datetime(df1.ts, unit='s').dt.tz_localize('UTC').dt.tz_convert('Europe/Madrid'))
A:pandas.tests.test_resample.df2->DataFrame(data, columns=['A', 'B', 'C', 'D']).copy()
A:pandas.tests.test_resample.dti2->DatetimeIndex(pd.to_datetime(df2.ts, unit='s').dt.tz_localize('UTC').dt.tz_convert('Europe/Madrid'))
A:pandas.tests.test_resample.values->range(dti.size)
A:pandas.tests.test_resample.index_1s->DatetimeIndex(['1970-01-01 00:00:00', '1970-01-01 00:00:01', '1970-01-01 00:00:02'])
A:pandas.tests.test_resample.frame_1s->DataFrame([3, 7, 11], index=index_1s)
A:pandas.tests.test_resample.index_2s->DatetimeIndex(['1970-01-01 00:00:00', '1970-01-01 00:00:02'])
A:pandas.tests.test_resample.frame_2s->DataFrame([5, 11], index=index_2s)
A:pandas.tests.test_resample.index_3s->DatetimeIndex(['1970-01-01 00:00:00'])
A:pandas.tests.test_resample.frame_3s->DataFrame([7], index=index_3s)
A:pandas.tests.test_resample.times->timedelta_range('1 day', '4 day', freq='4D')
A:pandas.tests.test_resample.times2->timedelta_range('1 day', '4 day', freq='2D')
A:pandas.tests.test_resample.rdf->DataFrame(data, columns=['A', 'B', 'C', 'D']).resample('D').ffill()
A:pandas.tests.test_resample.local_timezone->pytz.timezone('America/Los_Angeles')
A:pandas.tests.test_resample.last->Series(np.random.randn(len(index)), index=index).resample('M').ffill()
A:pandas.tests.test_resample.both->Series(np.random.randn(len(index)), index=index).resample('M').ffill().resample('M').last().astype('int64')
A:pandas.tests.test_resample.quar_ts->Series(np.arange(10), index=rng).resample('Q-%s' % month).ffill()
A:pandas.tests.test_resample.stamps->Series(np.random.randn(len(index)), index=index).to_timestamp()
A:pandas.tests.test_resample.qdates->period_range(ts.index[0].asfreq('D', 'start'), ts.index[-1].asfreq('D', 'end'), freq='Q-%s' % month)
A:pandas.tests.test_resample.filled->Series(np.random.randn(len(index)), index=index).resample('A').ffill()
A:pandas.tests.test_resample.ts_utc->Series(np.arange(10), index=rng).tz_localize('UTC')
A:pandas.tests.test_resample.ts_local->Series(np.arange(10), index=rng).tz_localize('UTC').tz_convert('America/Los_Angeles')
A:pandas.tests.test_resample.ts_local_naive->Series(np.arange(10), index=rng).tz_localize('UTC').tz_convert('America/Los_Angeles').copy()
A:pandas.tests.test_resample.ts['first']->numpy.random.randn(len(rng))
A:pandas.tests.test_resample.ts['second']->numpy.cumsum(np.random.randn(len(rng)))
A:pandas.tests.test_resample.foo->pandas.Series(index=pd.bdate_range('20000101', '20000201'))
A:pandas.tests.test_resample.res1->pandas.Series(index=pd.bdate_range('20000101', '20000201')).resample('BMS').mean()
A:pandas.tests.test_resample.res2->pandas.Series(index=pd.bdate_range('20000101', '20000201')).resample('BMS').mean().resample('B').mean()
A:pandas.tests.test_resample.df.date->pandas.to_datetime(df.date)
A:pandas.tests.test_resample.mindex->pandas.MultiIndex.from_arrays(mi, names=['col0', None])
A:pandas.tests.test_resample.self.ts->Series(np.random.randn(1000), index=date_range('1/1/2000', periods=1000))
A:pandas.tests.test_resample.grouped->DataFrame(data, columns=['A', 'B', 'C', 'D']).groupby(TimeGrouper(key='key', freq='D'))
A:pandas.tests.test_resample.applied->DataFrame(data, columns=['A', 'B', 'C', 'D']).groupby(TimeGrouper(key='key', freq='D')).apply(f)
A:pandas.tests.test_resample.applied.index->DataFrame(data, columns=['A', 'B', 'C', 'D']).groupby(TimeGrouper(key='key', freq='D')).apply(f).index.droplevel(0)
A:pandas.tests.test_resample.tg->TimeGrouper('M', axis=1)
A:pandas.tests.test_resample.(_, grouper, _)->TimeGrouper('M', axis=1)._get_grouper(wp)
A:pandas.tests.test_resample.wp->Panel(data, items=['Item1', 'Item2'], major_axis=ind, minor_axis=['A', 'B', 'C', 'D'])
A:pandas.tests.test_resample.bingrouped->Panel(data, items=['Item1', 'Item2'], major_axis=ind, minor_axis=['A', 'B', 'C', 'D']).groupby(grouper)
A:pandas.tests.test_resample.binagg->Panel(data, items=['Item1', 'Item2'], major_axis=ind, minor_axis=['A', 'B', 'C', 'D']).groupby(grouper).mean()
A:pandas.tests.test_resample.normal_df->DataFrame(data, columns=['A', 'B', 'C', 'D'])
A:pandas.tests.test_resample.dt_df->DataFrame(data, columns=['A', 'B', 'C', 'D'])
A:pandas.tests.test_resample.normal_grouped->DataFrame(data, columns=['A', 'B', 'C', 'D']).groupby('key')
A:pandas.tests.test_resample.dt_grouped->DataFrame(data, columns=['A', 'B', 'C', 'D']).groupby(TimeGrouper(key='key', freq='D'))
A:pandas.tests.test_resample.dt_result->getattr(dt_grouped, func)()
A:pandas.tests.test_resample.normal_result->getattr(normal_grouped, func)()
A:pandas.tests.test_resample.pad->Series([0], index=[3])
pandas.tests.test_resample.Base(object)
pandas.tests.test_resample.Base.create_index(self,*args,**kwargs)
pandas.tests.test_resample.Base.test_asfreq_downsample(self)
pandas.tests.test_resample.Base.test_asfreq_fill_value(self)
pandas.tests.test_resample.Base.test_asfreq_upsample(self)
pandas.tests.test_resample.Base.test_raises_on_non_datetimelike_index(self)
pandas.tests.test_resample.Base.test_resample_empty_dataframe(self)
pandas.tests.test_resample.Base.test_resample_empty_dtypes(self)
pandas.tests.test_resample.Base.test_resample_empty_series(self)
pandas.tests.test_resample.Base.test_resample_interpolate(self)
pandas.tests.test_resample.Base.test_resample_loffset_arg_type(self)
pandas.tests.test_resample.TestDatetimeIndex(Base)
pandas.tests.test_resample.TestDatetimeIndex.create_series(self)
pandas.tests.test_resample.TestDatetimeIndex.setup_method(self,method)
pandas.tests.test_resample.TestDatetimeIndex.test_anchored_lowercase_buglet(self)
pandas.tests.test_resample.TestDatetimeIndex.test_asfreq_non_unique(self)
pandas.tests.test_resample.TestDatetimeIndex.test_corner_cases(self)
pandas.tests.test_resample.TestDatetimeIndex.test_custom_grouper(self)
pandas.tests.test_resample.TestDatetimeIndex.test_downsample_non_unique(self)
pandas.tests.test_resample.TestDatetimeIndex.test_how_lambda_functions(self)
pandas.tests.test_resample.TestDatetimeIndex.test_monthly_resample_error(self)
pandas.tests.test_resample.TestDatetimeIndex.test_nanosecond_resample_error(self)
pandas.tests.test_resample.TestDatetimeIndex.test_numpy_compat(self)
pandas.tests.test_resample.TestDatetimeIndex.test_ohlc_5min(self)
pandas.tests.test_resample.TestDatetimeIndex.test_period_with_agg(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_across_dst(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_anchored_intraday(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_anchored_monthstart(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_anchored_multiday(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_anchored_ticks(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_axis1(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_base(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_base_with_timedeltaindex(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_basic(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_basic_from_daily(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_categorical_data_with_timedeltaindex(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_consistency(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_daily_anchored(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_datetime_values(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_dst_anchor(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_dtype_preservation(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_dup_index(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_extra_index_point(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_frame_basic(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_group_info(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_how(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_how_callables(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_how_method(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_loffset(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_loffset_count(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_median_bug_1688(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_not_monotonic(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_nunique(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_nunique_with_date_gap(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_ohlc(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_ohlc_dataframe(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_ohlc_result(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_panel(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_panel_numpy(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_reresample(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_rounding(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_segfault(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_single_group(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_single_period_timedelta(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_size(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_timedelta_idempotency(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_timedelta_values(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_timegrouper(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_timestamp_to_period(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_to_period_monthly_buglet(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_unequal_times(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_upsample(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_upsampling_picked_but_not_correct(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_with_nat(self)
pandas.tests.test_resample.TestDatetimeIndex.test_resample_with_timedeltas(self)
pandas.tests.test_resample.TestDatetimeIndex.test_upsample_apply_functions(self)
pandas.tests.test_resample.TestDatetimeIndex.test_upsample_with_limit(self)
pandas.tests.test_resample.TestDatetimeIndex.test_weekly_resample_buglet(self)
pandas.tests.test_resample.TestPeriodIndex(Base)
pandas.tests.test_resample.TestPeriodIndex._check_annual_upsample_cases(self,targ,conv,meth,end='12/31/1991')
pandas.tests.test_resample.TestPeriodIndex.create_series(self)
pandas.tests.test_resample.TestPeriodIndex.test_all_values_single_bin(self)
pandas.tests.test_resample.TestPeriodIndex.test_annual_upsample(self)
pandas.tests.test_resample.TestPeriodIndex.test_annual_upsample_B_e_b(self)
pandas.tests.test_resample.TestPeriodIndex.test_annual_upsample_B_e_f(self)
pandas.tests.test_resample.TestPeriodIndex.test_annual_upsample_B_s_b(self)
pandas.tests.test_resample.TestPeriodIndex.test_annual_upsample_B_s_f(self)
pandas.tests.test_resample.TestPeriodIndex.test_annual_upsample_D_e_b(self)
pandas.tests.test_resample.TestPeriodIndex.test_annual_upsample_D_e_f(self)
pandas.tests.test_resample.TestPeriodIndex.test_annual_upsample_D_s_b(self)
pandas.tests.test_resample.TestPeriodIndex.test_annual_upsample_D_s_f(self)
pandas.tests.test_resample.TestPeriodIndex.test_annual_upsample_M_e_b(self)
pandas.tests.test_resample.TestPeriodIndex.test_annual_upsample_M_e_f(self)
pandas.tests.test_resample.TestPeriodIndex.test_annual_upsample_M_s_b(self)
pandas.tests.test_resample.TestPeriodIndex.test_annual_upsample_M_s_f(self)
pandas.tests.test_resample.TestPeriodIndex.test_asfreq_downsample(self)
pandas.tests.test_resample.TestPeriodIndex.test_asfreq_fill_value(self)
pandas.tests.test_resample.TestPeriodIndex.test_asfreq_upsample(self)
pandas.tests.test_resample.TestPeriodIndex.test_basic_downsample(self)
pandas.tests.test_resample.TestPeriodIndex.test_basic_upsample(self)
pandas.tests.test_resample.TestPeriodIndex.test_cant_fill_missing_dups(self)
pandas.tests.test_resample.TestPeriodIndex.test_closed_left_corner(self)
pandas.tests.test_resample.TestPeriodIndex.test_default_left_closed_label(self)
pandas.tests.test_resample.TestPeriodIndex.test_default_right_closed_label(self)
pandas.tests.test_resample.TestPeriodIndex.test_evenly_divisible_with_no_extra_bins(self)
pandas.tests.test_resample.TestPeriodIndex.test_fill_method_and_how_upsample(self)
pandas.tests.test_resample.TestPeriodIndex.test_monthly_upsample(self)
pandas.tests.test_resample.TestPeriodIndex.test_not_subperiod(self)
pandas.tests.test_resample.TestPeriodIndex.test_quarterly_resampling(self)
pandas.tests.test_resample.TestPeriodIndex.test_quarterly_upsample(self)
pandas.tests.test_resample.TestPeriodIndex.test_resample_5minute(self)
pandas.tests.test_resample.TestPeriodIndex.test_resample_basic(self)
pandas.tests.test_resample.TestPeriodIndex.test_resample_bms_2752(self)
pandas.tests.test_resample.TestPeriodIndex.test_resample_count(self)
pandas.tests.test_resample.TestPeriodIndex.test_resample_fill_missing(self)
pandas.tests.test_resample.TestPeriodIndex.test_resample_incompat_freq(self)
pandas.tests.test_resample.TestPeriodIndex.test_resample_irregular_sparse(self)
pandas.tests.test_resample.TestPeriodIndex.test_resample_same_freq(self)
pandas.tests.test_resample.TestPeriodIndex.test_resample_to_quarterly(self)
pandas.tests.test_resample.TestPeriodIndex.test_resample_to_timestamps(self)
pandas.tests.test_resample.TestPeriodIndex.test_resample_tz_localized(self)
pandas.tests.test_resample.TestPeriodIndex.test_resample_weekly_all_na(self)
pandas.tests.test_resample.TestPeriodIndex.test_resample_weekly_bug_1726(self)
pandas.tests.test_resample.TestPeriodIndex.test_selection(self)
pandas.tests.test_resample.TestPeriodIndex.test_upsample_daily_business_daily(self)
pandas.tests.test_resample.TestPeriodIndex.test_upsample_with_limit(self)
pandas.tests.test_resample.TestPeriodIndex.test_weekly_upsample(self)
pandas.tests.test_resample.TestPeriodIndex.test_with_local_timezone_dateutil(self)
pandas.tests.test_resample.TestPeriodIndex.test_with_local_timezone_pytz(self)
pandas.tests.test_resample.TestResampleAPI(object)
pandas.tests.test_resample.TestResampleAPI.setup_method(self,method)
pandas.tests.test_resample.TestResampleAPI.test_agg(self)
pandas.tests.test_resample.TestResampleAPI.test_agg_consistency(self)
pandas.tests.test_resample.TestResampleAPI.test_agg_misc(self)
pandas.tests.test_resample.TestResampleAPI.test_agg_nested_dicts(self)
pandas.tests.test_resample.TestResampleAPI.test_api(self)
pandas.tests.test_resample.TestResampleAPI.test_api_changes_v018(self)
pandas.tests.test_resample.TestResampleAPI.test_api_compat_before_use(self)
pandas.tests.test_resample.TestResampleAPI.test_apply_without_aggregation(self)
pandas.tests.test_resample.TestResampleAPI.test_attribute_access(self)
pandas.tests.test_resample.TestResampleAPI.test_combined_up_downsampling_of_irregular(self)
pandas.tests.test_resample.TestResampleAPI.test_downsample_but_actually_upsampling(self)
pandas.tests.test_resample.TestResampleAPI.test_fillna(self)
pandas.tests.test_resample.TestResampleAPI.test_getitem(self)
pandas.tests.test_resample.TestResampleAPI.test_groupby_resample_api(self)
pandas.tests.test_resample.TestResampleAPI.test_groupby_resample_on_api(self)
pandas.tests.test_resample.TestResampleAPI.test_plot_api(self)
pandas.tests.test_resample.TestResampleAPI.test_select_bad_cols(self)
pandas.tests.test_resample.TestResampleAPI.test_selection_api_validation(self)
pandas.tests.test_resample.TestResampleAPI.test_str(self)
pandas.tests.test_resample.TestResampleAPI.test_transform(self)
pandas.tests.test_resample.TestResampleAPI.tests_skip_nuisance(self)
pandas.tests.test_resample.TestResamplerGrouper(object)
pandas.tests.test_resample.TestResamplerGrouper.setup_method(self,method)
pandas.tests.test_resample.TestResamplerGrouper.test_apply(self)
pandas.tests.test_resample.TestResamplerGrouper.test_back_compat_v180(self)
pandas.tests.test_resample.TestResamplerGrouper.test_consistency_with_window(self)
pandas.tests.test_resample.TestResamplerGrouper.test_deferred_with_groupby(self)
pandas.tests.test_resample.TestResamplerGrouper.test_getitem(self)
pandas.tests.test_resample.TestResamplerGrouper.test_getitem_multiple(self)
pandas.tests.test_resample.TestResamplerGrouper.test_median_duplicate_columns(self)
pandas.tests.test_resample.TestResamplerGrouper.test_methods(self)
pandas.tests.test_resample.TestResamplerGrouper.test_resample_groupby_with_label(self)
pandas.tests.test_resample.TestTimeGrouper(object)
pandas.tests.test_resample.TestTimeGrouper.setup_method(self,method)
pandas.tests.test_resample.TestTimeGrouper.test_aaa_group_order(self)
pandas.tests.test_resample.TestTimeGrouper.test_aggregate_normal(self)
pandas.tests.test_resample.TestTimeGrouper.test_aggregate_with_nat(self)
pandas.tests.test_resample.TestTimeGrouper.test_apply(self)
pandas.tests.test_resample.TestTimeGrouper.test_apply_iteration(self)
pandas.tests.test_resample.TestTimeGrouper.test_count(self)
pandas.tests.test_resample.TestTimeGrouper.test_fails_on_no_datetime_index(self)
pandas.tests.test_resample.TestTimeGrouper.test_numpy_reduction(self)
pandas.tests.test_resample.TestTimeGrouper.test_panel_aggregation(self)
pandas.tests.test_resample.TestTimedeltaIndex(Base)
pandas.tests.test_resample.TestTimedeltaIndex.create_series(self)
pandas.tests.test_resample.TestTimedeltaIndex.test_asfreq_bug(self)
pandas.tests.test_resample._simple_pts(start,end,freq='D')
pandas.tests.test_resample._simple_ts(start,end,freq='D')


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_window.py----------------------------------------
A:pandas.tests.test_window._nan_locs->numpy.arange(20, 40)
A:pandas.tests.test_window._inf_locs->numpy.array([])
A:pandas.tests.test_window.arr->randn(50)
A:pandas.tests.test_window.self.rng->bdate_range(datetime(2009, 1, 1), periods=N)
A:pandas.tests.test_window.self.series->Series(np.arange(10))
A:pandas.tests.test_window.self.frame->DataFrame({'A': [1] * 20 + [2] * 12 + [3] * 8, 'B': np.arange(40)})
A:pandas.tests.test_window.r->df.between_time('09:00', '16:00').rolling(window='5H')
A:pandas.tests.test_window.df->pandas.DataFrame({'A': [1] * 20 + [2] * 12 + [3] * 8, 'B': np.concatenate((dates, dates)), 'C': np.arange(40)})
A:pandas.tests.test_window.g->self.frame.groupby('A')
A:pandas.tests.test_window.result->df.sort_values('B').groupby('A').rolling('4s', on='B').C.mean()
A:pandas.tests.test_window.expected->pandas.DataFrame({'A': [1] * 20 + [2] * 12 + [3] * 8, 'B': np.concatenate((dates, dates)), 'C': np.arange(40)}).set_index('B').groupby('A').apply(lambda x: x.rolling('4s')['C'].mean())
A:pandas.tests.test_window.a_mean->r['A'].mean()
A:pandas.tests.test_window.a_std->r['A'].std()
A:pandas.tests.test_window.a_sum->r['A'].sum()
A:pandas.tests.test_window.b_mean->r['B'].mean()
A:pandas.tests.test_window.b_std->r['B'].std()
A:pandas.tests.test_window.b_sum->r['B'].sum()
A:pandas.tests.test_window.expected.columns->pandas.MultiIndex.from_tuples([('A', 'ra', 'mean'), ('A', 'ra', 'std'), ('B', 'rb', 'mean'), ('B', 'rb', 'std')])
A:pandas.tests.test_window.rcustom->r['B'].apply(lambda x: np.std(x, ddof=1))
A:pandas.tests.test_window.s->Series()
A:pandas.tests.test_window.s2->Series([1, 3], index=[0, 2])
A:pandas.tests.test_window.s3->Series([1.0, np.nan, 101.0, 50.0])
A:pandas.tests.test_window.dfunc->getattr(pd, '{0}_{1}'.format(t, op))
A:pandas.tests.test_window.w->Series(np.nan, index=s.index)
A:pandas.tests.test_window.expected_data->numpy.append([0.0, 1.0], np.arange(3.0, 27.0, 3))
A:pandas.tests.test_window.e->pandas.core.window.EWM(Series([2, 4, 6]), alpha=0.5)
A:pandas.tests.test_window.sr1->Series(range(5), dtype=dtype)
A:pandas.tests.test_window.sr2->Series(range(10, 0, -2), dtype=dtype)
A:pandas.tests.test_window.self.data->self._create_dtype_data(self.dtype)
A:pandas.tests.test_window.self.expects->self.get_expects()
A:pandas.tests.test_window.roll->Series([-1.50837035, -0.1297039, 0.19501095, 1.73508164, 0.41941401]).rolling(window=self.window)
A:pandas.tests.test_window.dtype->numpy.dtype('M8[ns]')
A:pandas.tests.test_window.vals->numpy.array(range(10), dtype=np.float)
A:pandas.tests.test_window.xp->Series(xp)
A:pandas.tests.test_window.rs->Series(vals).rolling(5, win_type=wt, center=True).mean(**k)
A:pandas.tests.test_window.a->pandas.util.testing.makeTimeSeries()
A:pandas.tests.test_window.b->pandas.util.testing.makeTimeSeries()
A:pandas.tests.test_window.values->x.between_time('09:00', '16:00').values.ravel()
A:pandas.tests.test_window.ser->Series([])
A:pandas.tests.test_window.arr2->randn(20)
A:pandas.tests.test_window.result0->func(arr, min_periods=0)
A:pandas.tests.test_window.result1->func(arr, min_periods=1)
A:pandas.tests.test_window.nan_mask->numpy.isnan(result)
A:pandas.tests.test_window.series_result->func(self.series)
A:pandas.tests.test_window.frame_result->func(self.frame)
A:pandas.tests.test_window.trunc_series->self.series[::2].truncate(prev_date, last_date)
A:pandas.tests.test_window.trunc_frame->self.frame[::2].truncate(prev_date, last_date)
A:pandas.tests.test_window.series_xp->series_xp.fillna(fill_value).fillna(fill_value)
A:pandas.tests.test_window.frame_xp->frame_xp.fillna(fill_value).fillna(fill_value)
A:pandas.tests.test_window.series_rs->get_result(self.series, window=25, center=True)
A:pandas.tests.test_window.frame_rs->get_result(self.frame, window=25, center=True)
A:pandas.tests.test_window.s0->Series([np.nan, 1.0, 101.0])
A:pandas.tests.test_window.s1->Series([1, 2, 3], index=[0, 1, 2])
A:pandas.tests.test_window.A->self.series.dropna()
A:pandas.tests.test_window.B->pandas.stats.moments.ewma(self.arr, halflife=10.0)
A:pandas.tests.test_window.c->Series().ewm(span=2.240298955799461).mean()
A:pandas.tests.test_window.d->Series([-1.50837035, -0.1297039, 0.19501095, 1.73508164, 0.41941401])
A:pandas.tests.test_window.result2->func(np.arange(50), span=10)
A:pandas.tests.test_window.df2->pandas.DataFrame({'A': [1] * 20 + [2] * 12 + [3] * 8, 'B': np.concatenate((dates, dates)), 'C': np.arange(40)}).sort_values('B')
A:pandas.tests.test_window.expected_index->pandas.DataFrame({'A': [1] * 20 + [2] * 12 + [3] * 8, 'B': np.concatenate((dates, dates)), 'C': np.arange(40)}).index.union(self.df2.index)
A:pandas.tests.test_window.expected_columns->pandas.DataFrame({'A': [1] * 20 + [2] * 12 + [3] * 8, 'B': np.concatenate((dates, dates)), 'C': np.arange(40)}).columns.union(self.df2.columns)
A:pandas.tests.test_window._consistency_data->_create_consistency_data()
A:pandas.tests.test_window.count_x->count(x)
A:pandas.tests.test_window.mean_x->mean(x)
A:pandas.tests.test_window.corr_x_x->corr(x, x)
A:pandas.tests.test_window.var_unbiased_x->var_unbiased(x)
A:pandas.tests.test_window.var_biased_x->var_biased(x)
A:pandas.tests.test_window.var_debiasing_factors_x->var_debiasing_factors(x)
A:pandas.tests.test_window.var_x->var(x)
A:pandas.tests.test_window.std_x->std(x)
A:pandas.tests.test_window.cov_x_x->cov(x, x)
A:pandas.tests.test_window.mean_x2->mean(x * x)
A:pandas.tests.test_window.corr_x_y->corr(x, y)
A:pandas.tests.test_window.corr_y_x->corr(y, x)
A:pandas.tests.test_window.cov_x_y->cov(x, y)
A:pandas.tests.test_window.cov_y_x->cov(y, x)
A:pandas.tests.test_window.var_x_plus_y->var(x + y)
A:pandas.tests.test_window.var_y->var(y)
A:pandas.tests.test_window.std_y->std(y)
A:pandas.tests.test_window.mean_y->mean(y)
A:pandas.tests.test_window.mean_x_times_y->mean(x * y)
A:pandas.tests.test_window.w[s.notnull()]->_weights(s[s.notnull()], com=com, adjust=adjust, ignore_na=False)
A:pandas.tests.test_window.w.iat[i]->pow(1.0 / (1.0 - alpha), i)
A:pandas.tests.test_window.weights->_weights(s, com=com, adjust=adjust, ignore_na=ignore_na)
A:pandas.tests.test_window.cum_sum->_weights(s, com=com, adjust=adjust, ignore_na=ignore_na).cumsum().fillna(method='ffill')
A:pandas.tests.test_window.cum_sum_sq->(weights * weights).cumsum().fillna(method='ffill')
A:pandas.tests.test_window.expanding_f->getattr(x.expanding(min_periods=min_periods), name)
A:pandas.tests.test_window.expanding_f_result->expanding_f()
A:pandas.tests.test_window.expanding_apply_f_result->x.between_time('09:00', '16:00').expanding(min_periods=min_periods).apply(func=f)
A:pandas.tests.test_window.rolling_f->getattr(x.rolling(window=window, center=center, min_periods=min_periods), name)
A:pandas.tests.test_window.rolling_f_result->rolling_f()
A:pandas.tests.test_window.rolling_apply_f_result->x.between_time('09:00', '16:00').rolling(window=window, min_periods=min_periods, center=center).apply(func=f)
A:pandas.tests.test_window.result.index->df.sort_values('B').groupby('A').rolling('4s', on='B').C.mean().index.droplevel(1)
A:pandas.tests.test_window.res->getattr(series.rolling(window=10), method)(self.frame)
A:pandas.tests.test_window.res2->getattr(self.frame.rolling(window=10), method)(series)
A:pandas.tests.test_window.exp->DataFrame(dict(((k, getattr(self.frame[k].rolling(window=10), method)(frame2[k])) for k in self.frame)))
A:pandas.tests.test_window.frame2->self.frame.copy()
A:pandas.tests.test_window.frame2.values[:]->numpy.random.randn(*frame2.shape)
A:pandas.tests.test_window.res3->getattr(self.frame.rolling(window=10), method)(frame2)
A:pandas.tests.test_window.rolling_result->self.frame.rolling(window=len(self.frame), min_periods=1).corr()
A:pandas.tests.test_window.s2a->Series([1, None, 3], index=[0, 1, 2])
A:pandas.tests.test_window.s_expected->Series(np.nan, index=s.index)
A:pandas.tests.test_window.df_expected->DataFrame(columns=Index(['A', 'B'], name='foo'), index=pd.MultiIndex.from_product([df.index, df.columns], names=['bar', 'foo']), dtype='float64')
A:pandas.tests.test_window.s_result->f(s)
A:pandas.tests.test_window.df_result->f(df)
A:pandas.tests.test_window.df1->DataFrame([[1, 2], [3, 2], [3, 4]], columns=['A', 'B'], index=Index(range(3), name='bar'))
A:pandas.tests.test_window.df2['a']->df2['a'].astype('float64').astype('float64')
A:pandas.tests.test_window.df1_result->f(df1)
A:pandas.tests.test_window.df2_result->f(df2)
A:pandas.tests.test_window.df1_expected->DataFrame(index=pd.MultiIndex.from_product([df1.index, df1.columns]), columns=Index([]))
A:pandas.tests.test_window.df2_expected->DataFrame(index=pd.MultiIndex.from_product([df2.index, df2.columns], names=['bar', 'foo']), columns=Index(['a'], name='foo'), dtype='float64')
A:pandas.tests.test_window.df1a->DataFrame([[1, 2], [3, 4]], index=Index([0, 2], name='bar'), columns=['A', 'B'])
A:pandas.tests.test_window.df2a->DataFrame([[5, 6], [2, 1]], index=Index([0, 2], name='bar'), columns=['X', 'Y'])
A:pandas.tests.test_window.all_nan->Series([np.NaN] * 5)
A:pandas.tests.test_window.x->x.between_time('09:00', '16:00').between_time('09:00', '16:00')
A:pandas.tests.test_window.series->series.sort_index().sort_index()
A:pandas.tests.test_window.g_mutated->self.frame.groupby('A', mutated=True)
A:pandas.tests.test_window.self.regular->DataFrame({'A': pd.date_range('20130101', periods=5, freq='s'), 'B': range(5)}).set_index('A')
A:pandas.tests.test_window.self.ragged->DataFrame({'B': range(5)})
A:pandas.tests.test_window.df['C']->pandas.date_range('20130101', periods=len(df))
A:pandas.tests.test_window.df.index->pandas.date_range('20130101', periods=5, freq='2D')
A:pandas.tests.test_window.expected1->DataFrame({'A': [0.0, 1, 3, 3, 7], 'B': [0, 1, 3, np.nan, 4], 'C': df['C']}, columns=['A', 'C', 'B'])
A:pandas.tests.test_window.dfp->DataFrame({'B': np.random.randn(N)}, index=pd.date_range('20130101', periods=N, freq='s'))
A:pandas.tests.test_window.er->pandas.DataFrame({'A': [1] * 20 + [2] * 12 + [3] * 8, 'B': np.concatenate((dates, dates)), 'C': np.arange(40)}).rolling(window=1)
A:pandas.tests.test_window.dft->pandas.DataFrame({'A': [1] * 20 + [2] * 12 + [3] * 8, 'B': np.concatenate((dates, dates)), 'C': np.arange(40)}).between_time('09:00', '16:00')
A:pandas.tests.test_window.df['date']->pandas.to_datetime(df['date'])
A:pandas.tests.test_window.dates->pandas.date_range(start='2016-01-01 09:30:00', periods=20, freq='s')
pandas.tests.test_window.Base(object)
pandas.tests.test_window.Base._create_data(self)
pandas.tests.test_window.DatetimeLike(Dtype)
pandas.tests.test_window.DatetimeLike.check_dtypes(self,f,f_name,d,d_name,exp)
pandas.tests.test_window.Dtype(object)
pandas.tests.test_window.Dtype._create_data(self)
pandas.tests.test_window.Dtype._create_dtype_data(self,dtype)
pandas.tests.test_window.Dtype.check_dtypes(self,f,f_name,d,d_name,exp)
pandas.tests.test_window.Dtype.get_expects(self)
pandas.tests.test_window.Dtype.test_dtypes(self)
pandas.tests.test_window.Dtype_float(Dtype)
pandas.tests.test_window.Dtype_integer(Dtype)
pandas.tests.test_window.Dtype_uinteger(Dtype)
pandas.tests.test_window.TestApi(Base)
pandas.tests.test_window.TestApi.setup_method(self,method)
pandas.tests.test_window.TestApi.test_agg(self)
pandas.tests.test_window.TestApi.test_agg_consistency(self)
pandas.tests.test_window.TestApi.test_agg_nested_dicts(self)
pandas.tests.test_window.TestApi.test_attribute_access(self)
pandas.tests.test_window.TestApi.test_count_nonnumeric_types(self)
pandas.tests.test_window.TestApi.test_getitem(self)
pandas.tests.test_window.TestApi.test_how_compat(self)
pandas.tests.test_window.TestApi.test_preserve_metadata(self)
pandas.tests.test_window.TestApi.test_select_bad_cols(self)
pandas.tests.test_window.TestApi.test_window_with_args(self)
pandas.tests.test_window.TestApi.tests_skip_nuisance(self)
pandas.tests.test_window.TestDeprecations(Base)
pandas.tests.test_window.TestDeprecations.setup_method(self,method)
pandas.tests.test_window.TestDeprecations.test_deprecations(self)
pandas.tests.test_window.TestDtype_category(Dtype)
pandas.tests.test_window.TestDtype_category._create_dtype_data(self,dtype)
pandas.tests.test_window.TestDtype_datetime(DatetimeLike)
pandas.tests.test_window.TestDtype_datetime64UTC(DatetimeLike)
pandas.tests.test_window.TestDtype_datetime64UTC._create_data(self)
pandas.tests.test_window.TestDtype_float16(Dtype_float)
pandas.tests.test_window.TestDtype_float32(Dtype_float)
pandas.tests.test_window.TestDtype_float64(Dtype_float)
pandas.tests.test_window.TestDtype_int16(Dtype_integer)
pandas.tests.test_window.TestDtype_int32(Dtype_integer)
pandas.tests.test_window.TestDtype_int64(Dtype_integer)
pandas.tests.test_window.TestDtype_int8(Dtype_integer)
pandas.tests.test_window.TestDtype_object(Dtype)
pandas.tests.test_window.TestDtype_timedelta(DatetimeLike)
pandas.tests.test_window.TestDtype_uint16(Dtype_uinteger)
pandas.tests.test_window.TestDtype_uint32(Dtype_uinteger)
pandas.tests.test_window.TestDtype_uint64(Dtype_uinteger)
pandas.tests.test_window.TestDtype_uint8(Dtype_uinteger)
pandas.tests.test_window.TestEWM(Base)
pandas.tests.test_window.TestEWM.setup_method(self,method)
pandas.tests.test_window.TestEWM.test_constructor(self)
pandas.tests.test_window.TestEWM.test_doc_string(self)
pandas.tests.test_window.TestEWM.test_numpy_compat(self)
pandas.tests.test_window.TestExpanding(Base)
pandas.tests.test_window.TestExpanding.setup_method(self,method)
pandas.tests.test_window.TestExpanding.test_constructor(self)
pandas.tests.test_window.TestExpanding.test_doc_string(self)
pandas.tests.test_window.TestExpanding.test_numpy_compat(self)
pandas.tests.test_window.TestGrouperGrouping(object)
pandas.tests.test_window.TestGrouperGrouping.setup_method(self,method)
pandas.tests.test_window.TestGrouperGrouping.test_expanding(self)
pandas.tests.test_window.TestGrouperGrouping.test_expanding_apply(self)
pandas.tests.test_window.TestGrouperGrouping.test_expanding_corr_cov(self)
pandas.tests.test_window.TestGrouperGrouping.test_getitem(self)
pandas.tests.test_window.TestGrouperGrouping.test_getitem_multiple(self)
pandas.tests.test_window.TestGrouperGrouping.test_mutated(self)
pandas.tests.test_window.TestGrouperGrouping.test_rolling(self)
pandas.tests.test_window.TestGrouperGrouping.test_rolling_apply(self)
pandas.tests.test_window.TestGrouperGrouping.test_rolling_corr_cov(self)
pandas.tests.test_window.TestMoments(Base)
pandas.tests.test_window.TestMoments._check_ew(self,func,name=None)
pandas.tests.test_window.TestMoments._check_ew_ndarray(self,func,preserve_nan=False,name=None)
pandas.tests.test_window.TestMoments._check_ew_structures(self,func,name)
pandas.tests.test_window.TestMoments._check_moment_func(self,f,static_comp,name=None,window=50,has_min_periods=True,has_center=True,has_time_rule=True,preserve_nan=True,fill_value=None,test_stable=False,**kwargs)
pandas.tests.test_window.TestMoments._check_ndarray(self,f,static_comp,window=50,has_min_periods=True,preserve_nan=True,has_center=True,fill_value=None,test_stable=False,test_window=True,**kwargs)
pandas.tests.test_window.TestMoments._check_structures(self,f,static_comp,name=None,has_min_periods=True,has_time_rule=True,has_center=True,fill_value=None,**kwargs)
pandas.tests.test_window.TestMoments.setup_method(self,method)
pandas.tests.test_window.TestMoments.test_centered_axis_validation(self)
pandas.tests.test_window.TestMoments.test_cmov_mean(self)
pandas.tests.test_window.TestMoments.test_cmov_window(self)
pandas.tests.test_window.TestMoments.test_cmov_window_corner(self)
pandas.tests.test_window.TestMoments.test_cmov_window_frame(self)
pandas.tests.test_window.TestMoments.test_cmov_window_na_min_periods(self)
pandas.tests.test_window.TestMoments.test_cmov_window_regular(self)
pandas.tests.test_window.TestMoments.test_cmov_window_regular_linear_range(self)
pandas.tests.test_window.TestMoments.test_cmov_window_regular_missing_data(self)
pandas.tests.test_window.TestMoments.test_cmov_window_special(self)
pandas.tests.test_window.TestMoments.test_cmov_window_special_linear_range(self)
pandas.tests.test_window.TestMoments.test_ew_empty_arrays(self)
pandas.tests.test_window.TestMoments.test_ewm_alpha(self)
pandas.tests.test_window.TestMoments.test_ewm_alpha_arg(self)
pandas.tests.test_window.TestMoments.test_ewm_domain_checks(self)
pandas.tests.test_window.TestMoments.test_ewma(self)
pandas.tests.test_window.TestMoments.test_ewma_alpha_arg_old_api(self)
pandas.tests.test_window.TestMoments.test_ewma_alpha_old_api(self)
pandas.tests.test_window.TestMoments.test_ewma_halflife_arg(self)
pandas.tests.test_window.TestMoments.test_ewma_nan_handling(self)
pandas.tests.test_window.TestMoments.test_ewma_span_com_args(self)
pandas.tests.test_window.TestMoments.test_ewmvar(self)
pandas.tests.test_window.TestMoments.test_ewmvol(self)
pandas.tests.test_window.TestMoments.test_fperr_robustness(self)
pandas.tests.test_window.TestMoments.test_rolling_apply(self)
pandas.tests.test_window.TestMoments.test_rolling_apply_out_of_bounds(self)
pandas.tests.test_window.TestMoments.test_rolling_count(self)
pandas.tests.test_window.TestMoments.test_rolling_kurt(self)
pandas.tests.test_window.TestMoments.test_rolling_max(self)
pandas.tests.test_window.TestMoments.test_rolling_mean(self)
pandas.tests.test_window.TestMoments.test_rolling_median(self)
pandas.tests.test_window.TestMoments.test_rolling_min(self)
pandas.tests.test_window.TestMoments.test_rolling_quantile(self)
pandas.tests.test_window.TestMoments.test_rolling_quantile_param(self)
pandas.tests.test_window.TestMoments.test_rolling_skew(self)
pandas.tests.test_window.TestMoments.test_rolling_std(self)
pandas.tests.test_window.TestMoments.test_rolling_std_1obs(self)
pandas.tests.test_window.TestMoments.test_rolling_std_neg_sqrt(self)
pandas.tests.test_window.TestMoments.test_rolling_sum(self)
pandas.tests.test_window.TestMoments.test_rolling_var(self)
pandas.tests.test_window.TestMomentsConsistency(Base)
pandas.tests.test_window.TestMomentsConsistency._check_binary_ew(self,name)
pandas.tests.test_window.TestMomentsConsistency._check_expanding(self,func,static_comp,has_min_periods=True,has_time_rule=True,preserve_nan=True)
pandas.tests.test_window.TestMomentsConsistency._check_expanding_ndarray(self,func,static_comp,has_min_periods=True,has_time_rule=True,preserve_nan=True)
pandas.tests.test_window.TestMomentsConsistency._check_expanding_structures(self,func)
pandas.tests.test_window.TestMomentsConsistency._check_pairwise_moment(self,dispatch,name,**kwargs)
pandas.tests.test_window.TestMomentsConsistency._create_data(self)
pandas.tests.test_window.TestMomentsConsistency._test_moments_consistency(self,min_periods,count,mean,mock_mean,corr,var_unbiased=None,std_unbiased=None,cov_unbiased=None,var_biased=None,std_biased=None,cov_biased=None,var_debiasing_factors=None)
pandas.tests.test_window.TestMomentsConsistency.setup_method(self,method)
pandas.tests.test_window.TestMomentsConsistency.test_corr_sanity(self)
pandas.tests.test_window.TestMomentsConsistency.test_ewm_consistency(self)
pandas.tests.test_window.TestMomentsConsistency.test_ewmcorr(self)
pandas.tests.test_window.TestMomentsConsistency.test_ewmcorr_pairwise(self)
pandas.tests.test_window.TestMomentsConsistency.test_ewmcov(self)
pandas.tests.test_window.TestMomentsConsistency.test_ewmcov_pairwise(self)
pandas.tests.test_window.TestMomentsConsistency.test_expanding_apply(self)
pandas.tests.test_window.TestMomentsConsistency.test_expanding_apply_args_kwargs(self)
pandas.tests.test_window.TestMomentsConsistency.test_expanding_consistency(self)
pandas.tests.test_window.TestMomentsConsistency.test_expanding_corr(self)
pandas.tests.test_window.TestMomentsConsistency.test_expanding_corr_diff_index(self)
pandas.tests.test_window.TestMomentsConsistency.test_expanding_corr_pairwise(self)
pandas.tests.test_window.TestMomentsConsistency.test_expanding_corr_pairwise_diff_length(self)
pandas.tests.test_window.TestMomentsConsistency.test_expanding_count(self)
pandas.tests.test_window.TestMomentsConsistency.test_expanding_cov(self)
pandas.tests.test_window.TestMomentsConsistency.test_expanding_cov_diff_index(self)
pandas.tests.test_window.TestMomentsConsistency.test_expanding_cov_pairwise(self)
pandas.tests.test_window.TestMomentsConsistency.test_expanding_cov_pairwise_diff_length(self)
pandas.tests.test_window.TestMomentsConsistency.test_expanding_max(self)
pandas.tests.test_window.TestMomentsConsistency.test_expanding_quantile(self)
pandas.tests.test_window.TestMomentsConsistency.test_flex_binary_frame(self)
pandas.tests.test_window.TestMomentsConsistency.test_flex_binary_moment(self)
pandas.tests.test_window.TestMomentsConsistency.test_moment_functions_zero_length(self)
pandas.tests.test_window.TestMomentsConsistency.test_moment_functions_zero_length_pairwise(self)
pandas.tests.test_window.TestMomentsConsistency.test_rolling_consistency(self)
pandas.tests.test_window.TestMomentsConsistency.test_rolling_corr(self)
pandas.tests.test_window.TestMomentsConsistency.test_rolling_corr_diff_length(self)
pandas.tests.test_window.TestMomentsConsistency.test_rolling_corr_pairwise(self)
pandas.tests.test_window.TestMomentsConsistency.test_rolling_cov(self)
pandas.tests.test_window.TestMomentsConsistency.test_rolling_cov_diff_length(self)
pandas.tests.test_window.TestMomentsConsistency.test_rolling_cov_pairwise(self)
pandas.tests.test_window.TestMomentsConsistency.test_rolling_functions_window_non_shrinkage(self)
pandas.tests.test_window.TestMomentsConsistency.test_rolling_functions_window_non_shrinkage_binary(self)
pandas.tests.test_window.TestMomentsConsistency.test_rolling_kurt_edge_cases(self)
pandas.tests.test_window.TestMomentsConsistency.test_rolling_max_gh6297(self)
pandas.tests.test_window.TestMomentsConsistency.test_rolling_max_how_resample(self)
pandas.tests.test_window.TestMomentsConsistency.test_rolling_median_how_resample(self)
pandas.tests.test_window.TestMomentsConsistency.test_rolling_median_memory_error(self)
pandas.tests.test_window.TestMomentsConsistency.test_rolling_min_how_resample(self)
pandas.tests.test_window.TestMomentsConsistency.test_rolling_min_max_numeric_types(self)
pandas.tests.test_window.TestMomentsConsistency.test_rolling_skew_edge_cases(self)
pandas.tests.test_window.TestPairwise(object)
pandas.tests.test_window.TestPairwise.compare(self,result,expected)
pandas.tests.test_window.TestPairwise.test_no_flex(self,f)
pandas.tests.test_window.TestPairwise.test_no_pairwise_with_other(self,f)
pandas.tests.test_window.TestPairwise.test_no_pairwise_with_self(self,f)
pandas.tests.test_window.TestPairwise.test_pairwise_with_other(self,f)
pandas.tests.test_window.TestPairwise.test_pairwise_with_self(self,f)
pandas.tests.test_window.TestPairwise.test_pairwise_with_series(self,f)
pandas.tests.test_window.TestRolling(Base)
pandas.tests.test_window.TestRolling.setup_method(self,method)
pandas.tests.test_window.TestRolling.test_closed(self)
pandas.tests.test_window.TestRolling.test_constructor(self)
pandas.tests.test_window.TestRolling.test_constructor_with_timedelta_window(self)
pandas.tests.test_window.TestRolling.test_constructor_with_win_type(self)
pandas.tests.test_window.TestRolling.test_doc_string(self)
pandas.tests.test_window.TestRolling.test_numpy_compat(self)
pandas.tests.test_window.TestRollingTS(object)
pandas.tests.test_window.TestRollingTS.setup_method(self,method)
pandas.tests.test_window.TestRollingTS.test_all(self)
pandas.tests.test_window.TestRollingTS.test_all2(self)
pandas.tests.test_window.TestRollingTS.test_basic_regular(self)
pandas.tests.test_window.TestRollingTS.test_closed(self)
pandas.tests.test_window.TestRollingTS.test_doc_string(self)
pandas.tests.test_window.TestRollingTS.test_frame_on(self)
pandas.tests.test_window.TestRollingTS.test_frame_on2(self)
pandas.tests.test_window.TestRollingTS.test_groupby_monotonic(self)
pandas.tests.test_window.TestRollingTS.test_min_periods(self)
pandas.tests.test_window.TestRollingTS.test_monotonic_on(self)
pandas.tests.test_window.TestRollingTS.test_non_monotonic(self)
pandas.tests.test_window.TestRollingTS.test_on(self)
pandas.tests.test_window.TestRollingTS.test_perf_min(self)
pandas.tests.test_window.TestRollingTS.test_ragged_apply(self)
pandas.tests.test_window.TestRollingTS.test_ragged_count(self)
pandas.tests.test_window.TestRollingTS.test_ragged_kurt(self)
pandas.tests.test_window.TestRollingTS.test_ragged_max(self)
pandas.tests.test_window.TestRollingTS.test_ragged_mean(self)
pandas.tests.test_window.TestRollingTS.test_ragged_median(self)
pandas.tests.test_window.TestRollingTS.test_ragged_min(self)
pandas.tests.test_window.TestRollingTS.test_ragged_quantile(self)
pandas.tests.test_window.TestRollingTS.test_ragged_skew(self)
pandas.tests.test_window.TestRollingTS.test_ragged_std(self)
pandas.tests.test_window.TestRollingTS.test_ragged_sum(self)
pandas.tests.test_window.TestRollingTS.test_ragged_var(self)
pandas.tests.test_window.TestRollingTS.test_regular_min(self)
pandas.tests.test_window.TestRollingTS.test_valid(self)
pandas.tests.test_window.TestWindow(Base)
pandas.tests.test_window.TestWindow.setup_method(self,method)
pandas.tests.test_window.TestWindow.test_constructor(self)
pandas.tests.test_window.TestWindow.test_numpy_compat(self)
pandas.tests.test_window._create_consistency_data()
pandas.tests.test_window.assert_equal(left,right)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_downstream.py----------------------------------------
A:pandas.tests.test_downstream.toolz->pytest.importorskip('toolz')
A:pandas.tests.test_downstream.dask->pytest.importorskip('dask')
A:pandas.tests.test_downstream.ddf->dask.dataframe.from_pandas(df, npartitions=3)
A:pandas.tests.test_downstream.xarray->pytest.importorskip('xarray')
A:pandas.tests.test_downstream.statsmodels->pytest.importorskip('statsmodels')
A:pandas.tests.test_downstream.sklearn->pytest.importorskip('sklearn')
A:pandas.tests.test_downstream.digits->sklearn.datasets.load_digits()
A:pandas.tests.test_downstream.clf->sklearn.svm.SVC(gamma=0.001, C=100.0)
A:pandas.tests.test_downstream.seaborn->pytest.importorskip('seaborn')
A:pandas.tests.test_downstream.tips->pytest.importorskip('seaborn').load_dataset('tips')
A:pandas.tests.test_downstream.pandas_gbq->pytest.importorskip('pandas-gbq')
A:pandas.tests.test_downstream.pandas_datareader->pytest.importorskip('pandas-datareader')
A:pandas.tests.test_downstream.geopandas->pytest.importorskip('geopandas')
A:pandas.tests.test_downstream.fp->pytest.importorskip('geopandas').datasets.get_path('naturalearth_lowres')
A:pandas.tests.test_downstream.pyarrow->pytest.importorskip('pyarrow')
A:pandas.tests.test_downstream.table->pytest.importorskip('pyarrow').Table.from_pandas(df)
A:pandas.tests.test_downstream.result->pytest.importorskip('pyarrow').Table.from_pandas(df).to_pandas()
pandas.tests.test_downstream.df()
pandas.tests.test_downstream.test_dask(df)
pandas.tests.test_downstream.test_geopandas()
pandas.tests.test_downstream.test_pandas_datareader()
pandas.tests.test_downstream.test_pandas_gbq(df)
pandas.tests.test_downstream.test_pyarrow(df)
pandas.tests.test_downstream.test_scikit_learn(df)
pandas.tests.test_downstream.test_seaborn()
pandas.tests.test_downstream.test_statsmodels()
pandas.tests.test_downstream.test_xarray(df)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_base.py----------------------------------------
A:pandas.tests.test_base.mutable_regex->re.compile('does not support mutable operations')
A:pandas.tests.test_base.mutable_methods->getattr(self, 'mutable_methods', [])
A:pandas.tests.test_base.foo->property(_get_foo, _set_foo, doc='foo property')
A:pandas.tests.test_base.delegate->self.Delegate(self.Delegator())
A:pandas.tests.test_base.self.bool_index->pandas.util.testing.makeBoolIndex(10, name='a')
A:pandas.tests.test_base.self.int_index->pandas.util.testing.makeIntIndex(10, name='a')
A:pandas.tests.test_base.self.float_index->pandas.util.testing.makeFloatIndex(10, name='a')
A:pandas.tests.test_base.self.dt_index->pandas.util.testing.makeDateIndex(10, name='a')
A:pandas.tests.test_base.self.dt_tz_index->pandas.util.testing.makeDateIndex(10, name='a').tz_localize(tz='US/Eastern')
A:pandas.tests.test_base.self.period_index->pandas.util.testing.makePeriodIndex(10, name='a')
A:pandas.tests.test_base.self.string_index->pandas.util.testing.makeStringIndex(10, name='a')
A:pandas.tests.test_base.self.unicode_index->pandas.util.testing.makeUnicodeIndex(10, name='a')
A:pandas.tests.test_base.arr->numpy.random.randn(10)
A:pandas.tests.test_base.self.int_series->Series(arr, index=self.int_index, name='a')
A:pandas.tests.test_base.self.float_series->Series(arr, index=self.float_index, name='a')
A:pandas.tests.test_base.self.dt_series->Series(arr, index=self.dt_index, name='a')
A:pandas.tests.test_base.self.dt_tz_series->self.dt_tz_index.to_series(keep_tz=True)
A:pandas.tests.test_base.self.period_series->Series(arr, index=self.period_index, name='a')
A:pandas.tests.test_base.self.string_series->Series(arr, index=self.string_index, name='a')
A:pandas.tests.test_base.expected->klass(expected)
A:pandas.tests.test_base.result->klass(values).fillna(fill_value)
A:pandas.tests.test_base.operand1->type(o).__name__.lower()
A:pandas.tests.test_base.expected_str->' '.join([operand2, op, operand1])
A:pandas.tests.test_base.obj->Index([pd.NaT])
A:pandas.tests.test_base.o->klass(values)
A:pandas.tests.test_base.klass->type(o)
A:pandas.tests.test_base.expected_index->pandas.Index(values)
A:pandas.tests.test_base.idx->pandas.to_datetime(['2010-01-01 00:00:00Z', '2008-09-09 00:00:00Z', '2009-01-01 00:00:00X'])
A:pandas.tests.test_base.rep->numpy.repeat(values, range(1, len(o) + 1))
A:pandas.tests.test_base.expected_s->Series([6], index=[Timedelta('1day')], name='dt')
A:pandas.tests.test_base.values->klass(values).values.copy()
A:pandas.tests.test_base.nanloc->numpy.zeros(len(o), dtype=np.bool)
A:pandas.tests.test_base.exp->numpy.array(['a', 'b', np.nan, 'd'], dtype=object)
A:pandas.tests.test_base.expected_s_na->Series(list(range(10, 2, -1)) + [3], index=expected_index[9:0:-1], dtype='int64', name='a')
A:pandas.tests.test_base.result_s_na->klass(values).value_counts(dropna=False)
A:pandas.tests.test_base.result_s->klass(values).value_counts()
A:pandas.tests.test_base.s->Series(values, index=idx, name='a')
A:pandas.tests.test_base.hist->Series(values, index=idx, name='a').value_counts(normalize=True)
A:pandas.tests.test_base.s1->Series([1, 1, 2, 3])
A:pandas.tests.test_base.res1->Series([1, 1, 2, 3]).value_counts(bins=1)
A:pandas.tests.test_base.exp1->Series({Interval(0.997, 3.0): 4})
A:pandas.tests.test_base.res1n->Series([1, 1, 2, 3]).value_counts(bins=1, normalize=True)
A:pandas.tests.test_base.exp1n->Series({Interval(0.997, 3.0): 1.0})
A:pandas.tests.test_base.res4->Series([1, 1, 2, 3]).value_counts(bins=4, dropna=False)
A:pandas.tests.test_base.intervals->pandas.IntervalIndex.from_breaks([0.997, 1.5, 2.0, 2.5, 3.0])
A:pandas.tests.test_base.exp4->Series([2, 1, 1, 0], index=intervals.take([0, 3, 1, 2]))
A:pandas.tests.test_base.res4n->Series([1, 1, 2, 3]).value_counts(bins=4, normalize=True)
A:pandas.tests.test_base.exp4n->Series([0.5, 0.25, 0.25, 0], index=intervals.take([0, 3, 1, 2]))
A:pandas.tests.test_base.txt->'\n'.join(['xxyyzz20100101PIE', 'xxyyzz20100101GUM', 'xxyyzz20100101EGG', 'xxyyww20090101EGG', 'foofoo20080909PIE', 'foofoo20080909GUM'])
A:pandas.tests.test_base.f->StringIO(txt)
A:pandas.tests.test_base.df->pandas.DataFrame({'a': [1, 1, 1, 'one', 'one'], 'b': [2, 2, np.nan, np.nan, np.nan], 'c': [3, 3, np.nan, np.nan, 'three'], 'd': [1, 2, 3, 4, 4], 'e': [datetime(2015, 1, 1), datetime(2015, 1, 1), datetime(2015, 2, 1), pd.NaT, pd.NaT]})
A:pandas.tests.test_base.unique->Series(values, index=idx, name='a').unique()
A:pandas.tests.test_base.exp_idx->DatetimeIndex(expected.tolist() + [pd.NaT])
A:pandas.tests.test_base.td->klass(td, name='dt')
A:pandas.tests.test_base.td2->klass(td2, name='dt')
A:pandas.tests.test_base.result2->klass(td2, name='dt').value_counts()
A:pandas.tests.test_base.exp_arr->numpy.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4], np.intp)
A:pandas.tests.test_base.exp_uniques->Index([False, True])
A:pandas.tests.test_base.(labels, uniques)->o[5:].append(o).factorize(sort=False)
A:pandas.tests.test_base.n->o[5:].append(o)
A:pandas.tests.test_base.indexer->klass(values).argsort()
A:pandas.tests.test_base.duplicated->pandas.to_datetime(['2010-01-01 00:00:00Z', '2008-09-09 00:00:00Z', '2009-01-01 00:00:00X']).duplicated(keep=False)
A:pandas.tests.test_base.dropped_frame->df[[column]].drop_duplicates(keep=keep)
A:pandas.tests.test_base.dropped_series->df[column].drop_duplicates(keep=keep)
A:pandas.tests.test_base.res->klass(values).memory_usage()
A:pandas.tests.test_base.res_deep->klass(values).memory_usage(deep=True)
A:pandas.tests.test_base.index->numpy.searchsorted(o, max(o), sorter=range(len(o)))
A:pandas.tests.test_base.t->T()
pandas.tests.test_base.CheckImmutable(object)
pandas.tests.test_base.CheckImmutable.check_mutable_error(self,*args,**kwargs)
pandas.tests.test_base.CheckImmutable.check_result(self,result,expected,klass=None)
pandas.tests.test_base.CheckImmutable.test_no_mutable_funcs(self)
pandas.tests.test_base.CheckImmutable.test_slicing_maintains_type(self)
pandas.tests.test_base.CheckStringMixin(object)
pandas.tests.test_base.CheckStringMixin.test_string_methods_dont_fail(self)
pandas.tests.test_base.CheckStringMixin.test_tricky_container(self)
pandas.tests.test_base.Ops(object)
pandas.tests.test_base.Ops._allow_na_ops(self,obj)
pandas.tests.test_base.Ops.check_ops_properties(self,props,filter=None,ignore_failures=False)
pandas.tests.test_base.Ops.setup_method(self,method)
pandas.tests.test_base.Ops.test_binary_ops_docs(self)
pandas.tests.test_base.TestIndexOps(Ops)
pandas.tests.test_base.TestIndexOps.setup_method(self,method)
pandas.tests.test_base.TestIndexOps.test_drop_duplicates_series_vs_dataframe(self)
pandas.tests.test_base.TestIndexOps.test_duplicated_drop_duplicates_index(self)
pandas.tests.test_base.TestIndexOps.test_factorize(self)
pandas.tests.test_base.TestIndexOps.test_factorize_repeated(self)
pandas.tests.test_base.TestIndexOps.test_fillna(self)
pandas.tests.test_base.TestIndexOps.test_memory_usage(self)
pandas.tests.test_base.TestIndexOps.test_nanops(self)
pandas.tests.test_base.TestIndexOps.test_ndarray_compat_properties(self)
pandas.tests.test_base.TestIndexOps.test_none_comparison(self)
pandas.tests.test_base.TestIndexOps.test_ops(self)
pandas.tests.test_base.TestIndexOps.test_searchsorted(self)
pandas.tests.test_base.TestIndexOps.test_validate_bool_args(self)
pandas.tests.test_base.TestIndexOps.test_value_counts_bins(self)
pandas.tests.test_base.TestIndexOps.test_value_counts_datetime64(self)
pandas.tests.test_base.TestIndexOps.test_value_counts_inferred(self)
pandas.tests.test_base.TestIndexOps.test_value_counts_unique_nunique(self)
pandas.tests.test_base.TestIndexOps.test_value_counts_unique_nunique_null(self)
pandas.tests.test_base.TestNoNewAttributesMixin(object)
pandas.tests.test_base.TestNoNewAttributesMixin.test_mixin(self)
pandas.tests.test_base.TestPandasDelegate(object)
pandas.tests.test_base.TestPandasDelegate.Delegate(self,obj)
pandas.tests.test_base.TestPandasDelegate.Delegate.__init__(self,obj)
pandas.tests.test_base.TestPandasDelegate.Delegator(object)
pandas.tests.test_base.TestPandasDelegate.Delegator._get_foo(self)
pandas.tests.test_base.TestPandasDelegate.Delegator._set_foo(self,value)
pandas.tests.test_base.TestPandasDelegate.Delegator.bar(self,*args,**kwargs)
pandas.tests.test_base.TestPandasDelegate.setup_method(self,method)
pandas.tests.test_base.TestPandasDelegate.test_invalida_delgation(self)
pandas.tests.test_base.TestPandasDelegate.test_memory_usage(self)
pandas.tests.test_base.TestTranspose(Ops)
pandas.tests.test_base.TestTranspose.test_numpy_transpose(self)
pandas.tests.test_base.TestTranspose.test_transpose(self)
pandas.tests.test_base.TestTranspose.test_transpose_non_default_axes(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_panelnd.py----------------------------------------
A:pandas.tests.test_panelnd.Panel4D->pandas.core.panelnd.create_nd_panel_factory(klass_name='Panel4D', orders=['labels1', 'items', 'major_axis', 'minor_axis'], slices={'items': 'items', 'major_axis': 'major_axis', 'minor_axis': 'minor_axis'}, slicer=Panel, aliases={'major': 'major_axis', 'minor': 'minor_axis'}, stat_axis=2)
A:pandas.tests.test_panelnd.p4d->Panel4D(dict(L1=tm.makePanel(), L2=tm.makePanel()))
A:pandas.tests.test_panelnd.Panel5D->pandas.core.panelnd.create_nd_panel_factory(klass_name='Panel5D', orders=['cool1', 'labels1', 'items', 'major_axis', 'minor_axis'], slices={'labels1': 'labels1', 'items': 'items', 'major_axis': 'major_axis', 'minor_axis': 'minor_axis'}, slicer=Panel4D, aliases={'major': 'major_axis', 'minor': 'minor_axis'}, stat_axis=2)
A:pandas.tests.test_panelnd.p5d->Panel5D(dict(C1=p4d))
pandas.tests.test_panelnd.TestPanelnd(object)
pandas.tests.test_panelnd.TestPanelnd.setup_method(self,method)
pandas.tests.test_panelnd.TestPanelnd.test_4d_construction(self)
pandas.tests.test_panelnd.TestPanelnd.test_4d_construction_alt(self)
pandas.tests.test_panelnd.TestPanelnd.test_4d_construction_error(self)
pandas.tests.test_panelnd.TestPanelnd.test_5d_construction(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_strings.py----------------------------------------
A:pandas.tests.test_strings.invalid->Series([1])
A:pandas.tests.test_strings.ds->Series([slice(None, randint(10), randint(10, 20)) for _ in range(4)])
A:pandas.tests.test_strings.one->numpy.array(['a', 'a', 'b', 'b', 'c', NA], dtype=np.object_)
A:pandas.tests.test_strings.two->numpy.array(['a', NA, 'b', 'd', 'foo', NA], dtype=np.object_)
A:pandas.tests.test_strings.result->Series(np.array(list('abc'), 'S1').astype(object)).str.cat(rhs)
A:pandas.tests.test_strings.exp->Series([b'a', b'b', b'a\x9d']).map(f)
A:pandas.tests.test_strings.values->Series([u('a_b_c'), u('c_d_e'), np.nan, u('f_g_h')])
A:pandas.tests.test_strings.rs->Series(mixed).str.split('_').str.get(1)
A:pandas.tests.test_strings.xp->Series(['b', NA, 'd', NA, NA, NA, NA, NA])
A:pandas.tests.test_strings.expected->Series(np.array(['ad', 'be', 'cf'], 'S2').astype(object))
A:pandas.tests.test_strings.res->pandas.MultiIndex.from_tuples([('a', 'b'), ('a', 'b')]).str.partition(',', expand=False)
A:pandas.tests.test_strings.mixed->Series(['a_b_c', NA, 'c_d_e', True, datetime.today(), None, 1, 2.0])
A:pandas.tests.test_strings.results->Series([u('a_b_c'), u('c_d_e'), np.nan, u('f_g_h')]).str.swapcase()
A:pandas.tests.test_strings.s->Series(list('aabbcde'))
A:pandas.tests.test_strings.pat->re.compile('[a-z][A-Z]{2}')
A:pandas.tests.test_strings.idx->pandas.MultiIndex.from_tuples([('a', 'b'), ('a', 'b')])
A:pandas.tests.test_strings.s_or_idx->klass(['A1', 'A2'])
A:pandas.tests.test_strings.r->Series(list('aabbcde')).index.str.extract('(?P<letter>[A-Z])(?P<digit>[0-9])', expand=True)
A:pandas.tests.test_strings.e->DataFrame(e_list, columns=['letter', 'digit'])
A:pandas.tests.test_strings.result_df->klass(['A1', 'A2']).str.extract('(?P<uno>A)\\d', expand=True)
A:pandas.tests.test_strings.S->Series(subject_list)
A:pandas.tests.test_strings.expected_index->pandas.MultiIndex.from_tuples([(1, 0), (2, 0), (2, 1)], names=(None, 'match'))
A:pandas.tests.test_strings.expected_df->DataFrame([('A', '1'), (NA, '3'), (NA, '2')], expected_index, columns=[0, 'number'])
A:pandas.tests.test_strings.computed_df->Series(subject_list).str.extractall(pattern)
A:pandas.tests.test_strings.series_index->pandas.MultiIndex.from_tuples([('single', 'Dave'), ('single', 'Toby'), ('single', 'Maude'), ('multiple', 'robAndSteve'), ('multiple', 'abcdef'), ('none', 'missing'), ('none', 'empty')])
A:pandas.tests.test_strings.Si->Series(subject_list, series_index)
A:pandas.tests.test_strings.Sn->Series(subject_list, series_index)
A:pandas.tests.test_strings.i->pandas.MultiIndex.from_tuples([('A', 'first'), ('B', 'second'), ('C', 'third')], names=('capital', 'ordinal'))
A:pandas.tests.test_strings.exp_idx->pandas.MultiIndex.from_tuples([('XX', 0), ('XX', 1), ('yy', 0)], names=['idx_name', 'match'])
A:pandas.tests.test_strings.extract_two_noname->Series(list('aabbcde')).str.extract(pattern_two_noname, expand=True)
A:pandas.tests.test_strings.has_multi_index->Series(list('aabbcde')).str.extractall(pattern_one_noname)
A:pandas.tests.test_strings.no_multi_index->Series(list('aabbcde')).str.extractall(pattern_one_noname).xs(0, level='match')
A:pandas.tests.test_strings.extract_two_named->Series(list('aabbcde')).str.extract(pattern_two_named, expand=True)
A:pandas.tests.test_strings.extract_one_named->Series(list('aabbcde')).str.extract(pattern_one_named, expand=True)
A:pandas.tests.test_strings.extract_one_noname->Series(list('aabbcde')).str.extract(pattern_one_noname, expand=True)
A:pandas.tests.test_strings.has_match_index->Series(list('aabbcde')).str.extractall(pattern_one_noname)
A:pandas.tests.test_strings.no_match_index->Series(list('aabbcde')).str.extractall(pattern_one_noname).xs(0, level='match')
A:pandas.tests.test_strings.empty_strempty->Series(dtype=object)
A:pandas.tests.test_strings.empty_int->Series(dtype=int)
A:pandas.tests.test_strings.empty_bool->Series(dtype=bool)
A:pandas.tests.test_strings.empty_bytes->Series(dtype=object)
A:pandas.tests.test_strings.table->str.maketrans('abc', 'cde')
A:pandas.tests.test_strings.empty->Series(dtype=str)
A:pandas.tests.test_strings.empty_df->DataFrame([])
A:pandas.tests.test_strings.str_s->Series(values)
A:pandas.tests.test_strings.data->Series(data)
A:pandas.tests.test_strings.base->Series([u('a'), u('b'), u('aä')])
A:pandas.tests.test_strings.series->Series([u('a'), u('b'), u('aä')]).str.encode('utf-8')
A:pandas.tests.test_strings.encodeBase->Series([u('a'), u('b'), u('a\x9d')])
A:pandas.tests.test_strings.decodeBase->Series([b'a', b'b', b'a\x9d'])
A:pandas.tests.test_strings.df->df.reset_index().reset_index()
A:pandas.tests.test_strings.str_year->df.reset_index().reset_index().year.astype('str')
A:pandas.tests.test_strings.str_month->df.reset_index().reset_index().month.astype('str')
A:pandas.tests.test_strings.str_both->df.reset_index().reset_index().year.astype('str').str.cat(str_month, sep=' ')
A:pandas.tests.test_strings.str_multiple->df.reset_index().reset_index().year.astype('str').str.cat([str_month, str_month], sep=' ')
A:pandas.tests.test_strings.lhs->Series(np.array(list('abc'), 'S1').astype(object))
A:pandas.tests.test_strings.rhs->Series(np.array(list('def'), 'S1').astype(object))
pandas.tests.test_strings.TestStringMethods(object)
pandas.tests.test_strings.TestStringMethods.test_api(self)
pandas.tests.test_strings.TestStringMethods.test_capitalize(self)
pandas.tests.test_strings.TestStringMethods.test_casemethods(self)
pandas.tests.test_strings.TestStringMethods.test_cat(self)
pandas.tests.test_strings.TestStringMethods.test_cat_on_filtered_index(self)
pandas.tests.test_strings.TestStringMethods.test_center_ljust_rjust(self)
pandas.tests.test_strings.TestStringMethods.test_center_ljust_rjust_fillchar(self)
pandas.tests.test_strings.TestStringMethods.test_contains(self)
pandas.tests.test_strings.TestStringMethods.test_contains_nan(self)
pandas.tests.test_strings.TestStringMethods.test_count(self)
pandas.tests.test_strings.TestStringMethods.test_empty_str_methods(self)
pandas.tests.test_strings.TestStringMethods.test_empty_str_methods_to_frame(self)
pandas.tests.test_strings.TestStringMethods.test_encode_decode(self)
pandas.tests.test_strings.TestStringMethods.test_encode_decode_errors(self)
pandas.tests.test_strings.TestStringMethods.test_endswith(self)
pandas.tests.test_strings.TestStringMethods.test_extract_expand_False(self)
pandas.tests.test_strings.TestStringMethods.test_extract_expand_None(self)
pandas.tests.test_strings.TestStringMethods.test_extract_expand_True(self)
pandas.tests.test_strings.TestStringMethods.test_extract_expand_unspecified(self)
pandas.tests.test_strings.TestStringMethods.test_extract_index_one_two_groups(self)
pandas.tests.test_strings.TestStringMethods.test_extract_optional_groups(self)
pandas.tests.test_strings.TestStringMethods.test_extract_series(self)
pandas.tests.test_strings.TestStringMethods.test_extract_single_group_returns_frame(self)
pandas.tests.test_strings.TestStringMethods.test_extractall(self)
pandas.tests.test_strings.TestStringMethods.test_extractall_errors(self)
pandas.tests.test_strings.TestStringMethods.test_extractall_no_matches(self)
pandas.tests.test_strings.TestStringMethods.test_extractall_same_as_extract(self)
pandas.tests.test_strings.TestStringMethods.test_extractall_same_as_extract_subject_index(self)
pandas.tests.test_strings.TestStringMethods.test_extractall_single_group(self)
pandas.tests.test_strings.TestStringMethods.test_extractall_single_group_with_quantifier(self)
pandas.tests.test_strings.TestStringMethods.test_extractall_stringindex(self)
pandas.tests.test_strings.TestStringMethods.test_find(self)
pandas.tests.test_strings.TestStringMethods.test_find_nan(self)
pandas.tests.test_strings.TestStringMethods.test_findall(self)
pandas.tests.test_strings.TestStringMethods.test_get(self)
pandas.tests.test_strings.TestStringMethods.test_get_dummies(self)
pandas.tests.test_strings.TestStringMethods.test_get_dummies_with_name_dummy(self)
pandas.tests.test_strings.TestStringMethods.test_index(self)
pandas.tests.test_strings.TestStringMethods.test_index_str_accessor_visibility(self)
pandas.tests.test_strings.TestStringMethods.test_ismethods(self)
pandas.tests.test_strings.TestStringMethods.test_isnumeric(self)
pandas.tests.test_strings.TestStringMethods.test_iter(self)
pandas.tests.test_strings.TestStringMethods.test_iter_empty(self)
pandas.tests.test_strings.TestStringMethods.test_iter_object_try_string(self)
pandas.tests.test_strings.TestStringMethods.test_iter_single_element(self)
pandas.tests.test_strings.TestStringMethods.test_join(self)
pandas.tests.test_strings.TestStringMethods.test_len(self)
pandas.tests.test_strings.TestStringMethods.test_lower_upper(self)
pandas.tests.test_strings.TestStringMethods.test_match(self)
pandas.tests.test_strings.TestStringMethods.test_match_findall_flags(self)
pandas.tests.test_strings.TestStringMethods.test_method_on_bytes(self)
pandas.tests.test_strings.TestStringMethods.test_more_contains(self)
pandas.tests.test_strings.TestStringMethods.test_more_replace(self)
pandas.tests.test_strings.TestStringMethods.test_normalize(self)
pandas.tests.test_strings.TestStringMethods.test_pad(self)
pandas.tests.test_strings.TestStringMethods.test_pad_fillchar(self)
pandas.tests.test_strings.TestStringMethods.test_pad_width(self)
pandas.tests.test_strings.TestStringMethods.test_partition_index(self)
pandas.tests.test_strings.TestStringMethods.test_partition_series(self)
pandas.tests.test_strings.TestStringMethods.test_partition_to_dataframe(self)
pandas.tests.test_strings.TestStringMethods.test_partition_with_name(self)
pandas.tests.test_strings.TestStringMethods.test_pipe_failures(self)
pandas.tests.test_strings.TestStringMethods.test_repeat(self)
pandas.tests.test_strings.TestStringMethods.test_replace(self)
pandas.tests.test_strings.TestStringMethods.test_replace_callable(self)
pandas.tests.test_strings.TestStringMethods.test_replace_compiled_regex(self)
pandas.tests.test_strings.TestStringMethods.test_rsplit(self)
pandas.tests.test_strings.TestStringMethods.test_rsplit_to_dataframe_expand(self)
pandas.tests.test_strings.TestStringMethods.test_rsplit_to_multiindex_expand(self)
pandas.tests.test_strings.TestStringMethods.test_slice(self)
pandas.tests.test_strings.TestStringMethods.test_slice_replace(self)
pandas.tests.test_strings.TestStringMethods.test_split(self)
pandas.tests.test_strings.TestStringMethods.test_split_maxsplit(self)
pandas.tests.test_strings.TestStringMethods.test_split_no_pat_with_nonzero_n(self)
pandas.tests.test_strings.TestStringMethods.test_split_noargs(self)
pandas.tests.test_strings.TestStringMethods.test_split_to_dataframe(self)
pandas.tests.test_strings.TestStringMethods.test_split_to_multiindex_expand(self)
pandas.tests.test_strings.TestStringMethods.test_split_with_name(self)
pandas.tests.test_strings.TestStringMethods.test_startswith(self)
pandas.tests.test_strings.TestStringMethods.test_str_accessor_no_new_attributes(self)
pandas.tests.test_strings.TestStringMethods.test_str_cat_raises_intuitive_error(self)
pandas.tests.test_strings.TestStringMethods.test_string_slice_get_syntax(self)
pandas.tests.test_strings.TestStringMethods.test_string_slice_out_of_bounds(self)
pandas.tests.test_strings.TestStringMethods.test_strip_lstrip_rstrip(self)
pandas.tests.test_strings.TestStringMethods.test_strip_lstrip_rstrip_args(self)
pandas.tests.test_strings.TestStringMethods.test_strip_lstrip_rstrip_args_unicode(self)
pandas.tests.test_strings.TestStringMethods.test_strip_lstrip_rstrip_mixed(self)
pandas.tests.test_strings.TestStringMethods.test_strip_lstrip_rstrip_unicode(self)
pandas.tests.test_strings.TestStringMethods.test_swapcase(self)
pandas.tests.test_strings.TestStringMethods.test_title(self)
pandas.tests.test_strings.TestStringMethods.test_translate(self)
pandas.tests.test_strings.TestStringMethods.test_wrap(self)
pandas.tests.test_strings.TestStringMethods.test_zfill(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_panel.py----------------------------------------
A:pandas.tests.test_panel._panel->_panel.copy().copy()
A:pandas.tests.test_panel.unpickled->pandas.util.testing.round_trip_pickle(self.panel)
A:pandas.tests.test_panel.cumsum->self.panel.cumsum()
A:pandas.tests.test_panel.c_empty->Panel()
A:pandas.tests.test_panel.c->Panel(Panel([[[1]]]))
A:pandas.tests.test_panel.cp->self.panel.copy()
A:pandas.tests.test_panel.f->getattr(operator, alias)
A:pandas.tests.test_panel.nona->remove_na(x)
A:pandas.tests.test_panel.result->getattr(self.panel, 'r' + op)(n)
A:pandas.tests.test_panel.new_items->Index(np.arange(len(self.panel.items)))
A:pandas.tests.test_panel.new_major->list(self.panel.major_axis[:10])
A:pandas.tests.test_panel.new_minor->list(self.panel.minor_axis[:2])
A:pandas.tests.test_panel.(index, columns)->self.panel._get_plane_axes(0)
A:pandas.tests.test_panel.trunced->self.panel.truncate(after=end).to_panel()
A:pandas.tests.test_panel.expected->pandas.MultiIndex.from_arrays([np.tile([1, 2, 3, 4], 3), np.repeat([1, 2, 3], 4)], names=['time', 'panel'])
A:pandas.tests.test_panel.func->getattr(self.panel, name)
A:pandas.tests.test_panel.xs->self.panel.minor_xs('D')
A:pandas.tests.test_panel.p->Panel(np.random.randn(4, 5, 6), items=list('abcd'))
A:pandas.tests.test_panel.result2->abs(s)
A:pandas.tests.test_panel.values->numpy.empty((3, 3, 3))
A:pandas.tests.test_panel.panel->make_test_panel()
A:pandas.tests.test_panel.panelc->make_test_panel().copy()
A:pandas.tests.test_panel.lp->make_test_panel().to_frame()
A:pandas.tests.test_panel.df->pivot(np.array([]), np.array([]), np.array([]))
A:pandas.tests.test_panel.p[0]->numpy.random.randn(4, 2)
A:pandas.tests.test_panel.timeidx->date_range(start=datetime(2009, 1, 1), end=datetime(2009, 12, 31), freq=MonthEnd())
A:pandas.tests.test_panel.lons_coarse->numpy.linspace(-177.5, 177.5, 72)
A:pandas.tests.test_panel.lats_coarse->numpy.linspace(-87.5, 87.5, 36)
A:pandas.tests.test_panel.P->Panel(items=timeidx, major_axis=lons_coarse, minor_axis=lats_coarse)
A:pandas.tests.test_panel.data->dict(data)
A:pandas.tests.test_panel.key->datetime(2009, 2, 28)
A:pandas.tests.test_panel.df1->DataFrame({'c1': [1, 2, 5], 'c2': [3, 4, 6]})
A:pandas.tests.test_panel.df2->DataFrame(np.random.randn(2, 5), index=lrange(2), columns=lrange(5))
A:pandas.tests.test_panel.newminor->notnull(panel.iloc[:, :, 0])
A:pandas.tests.test_panel.newmajor->notnull(panel.iloc[:, 0, :])
A:pandas.tests.test_panel.itemA->self.panel.xs('ItemA', axis=0)
A:pandas.tests.test_panel.itemA_view->self.panel.xs('ItemA', axis=0)
A:pandas.tests.test_panel.NS->slice(None, None)
A:pandas.tests.test_panel.a->Panel(items=[1, 2, 3], major_axis=[11, 22, 33], minor_axis=[111, 222, 333])
A:pandas.tests.test_panel.b->Series(np.random.randn(10), name=0)
A:pandas.tests.test_panel.df_orig->Panel(np.random.randn(3, 10, 2))
A:pandas.tests.test_panel.p_orig->pandas.util.testing.makePanel()
A:pandas.tests.test_panel.d->OrderedDict([(k, mkdf(10, 5)) for k in keys])
A:pandas.tests.test_panel.p1->Panel([[[0, 1], [2, np.nan]], [[10, 11], [12, np.nan]]], items=['a', 'b'], minor_axis=['x', 'y'], dtype=np.float64)
A:pandas.tests.test_panel.p2->Panel([[[0, np.nan], [2, 1]], [[10, np.nan], [12, 11]]], items=['a', 'b'], minor_axis=['x', 'y'], dtype=np.float64)
A:pandas.tests.test_panel.tp->Panel([[[0, 1], [2, np.nan]], [[10, 11], [12, np.nan]]], items=['a', 'b'], minor_axis=['x', 'y'], dtype=np.float64).reindex(items=p1.items + ['foo'])
A:pandas.tests.test_panel.result3->func(self.panel, 0)
A:pandas.tests.test_panel.res->self.panel.set_value('ItemE', 'foo', 'bar', 1.5)
A:pandas.tests.test_panel.res3->self.panel.set_value('ItemE', 'foobar', 'baz', 5)
A:pandas.tests.test_panel.self.panel->self.panel.to_panel()
A:pandas.tests.test_panel.wp->self.panel.to_panel()
A:pandas.tests.test_panel.vals->numpy.empty((2, 3, 4), dtype='float32')
A:pandas.tests.test_panel.zero_filled->self.panel.fillna(0)
A:pandas.tests.test_panel.casted->Panel(zero_filled._data, dtype=np.int32)
A:pandas.tests.test_panel.casted2->Panel(zero_filled.values, dtype=np.int32)
A:pandas.tests.test_panel.exp_values->self.panel.fillna(0).values.astype(np.int32)
A:pandas.tests.test_panel.empty->Panel()
A:pandas.tests.test_panel.wp2->self.panel.to_panel().reindex(major=new_index)
A:pandas.tests.test_panel.wp3->pandas.core.panel.Panel.from_dict(d3)
A:pandas.tests.test_panel.wp4->pandas.core.panel.Panel.from_dict(d4)
A:pandas.tests.test_panel.dcasted->dict(((k, v.reindex(wp.major_axis).fillna(0)) for (k, v) in compat.iteritems(d)))
A:pandas.tests.test_panel.exp_major->Index(np.arange(len(self.panel.major_axis)))
A:pandas.tests.test_panel.conformed->self.panel.conform(df)
A:pandas.tests.test_panel.str_data->numpy.array([[['1', '2'], ['3', '4']], [['5', '6'], ['7', '8']]])
A:pandas.tests.test_panel.applied->self.panel.apply(np.sqrt)
A:pandas.tests.test_panel.index->pandas.core.panel.panel_index([1, 2, 3, 4], [1, 2, 3])
A:pandas.tests.test_panel.dfa->DataFrame(np.array(np.arange(12, dtype='int64')).reshape(4, 3), columns=list('ABC'), index=index)
A:pandas.tests.test_panel.dfb->DataFrame(np.array(np.arange(10, 22, dtype='int64')).reshape(4, 3), columns=list('ABC'), index=index)
A:pandas.tests.test_panel.result_int->self.panel.apply(lambda df: 0, axis=[1, 2])
A:pandas.tests.test_panel.result_float->self.panel.apply(lambda df: 0.0, axis=[1, 2])
A:pandas.tests.test_panel.result_int64->self.panel.apply(lambda df: np.int64(0), axis=[1, 2])
A:pandas.tests.test_panel.result_float64->self.panel.apply(lambda df: np.float64(0.0), axis=[1, 2])
A:pandas.tests.test_panel.expected_intexpected_int64->Series([0] * 5)
A:pandas.tests.test_panel.expected_floatexpected_float64->Series([0.0] * 5)
A:pandas.tests.test_panel.smaller->self.panel.reindex(items=self.panel.items[:-1], major=self.panel.major_axis[:-1], minor=self.panel.minor_axis[:-1])
A:pandas.tests.test_panel.larger->self.panel.reindex(items=self.panel.items[:-1], major=self.panel.major_axis[:-1], minor=self.panel.minor_axis[:-1]).reindex(major=self.panel.major_axis, method='pad')
A:pandas.tests.test_panel.major_axis->numpy.arange(4)
A:pandas.tests.test_panel.minor_axis->numpy.arange(3)
A:pandas.tests.test_panel.smaller_like->self.panel.reindex_like(smaller)
A:pandas.tests.test_panel.ritems->list(self.panel.items)
A:pandas.tests.test_panel.rmajor->list(self.panel.major_axis)
A:pandas.tests.test_panel.rminor->list(self.panel.minor_axis)
A:pandas.tests.test_panel.random_order->self.panel.reindex(minor=rminor)
A:pandas.tests.test_panel.sorted_panel->self.panel.reindex(minor=rminor).sort_index(axis=2)
A:pandas.tests.test_panel.filled->Panel().fillna(0)
A:pandas.tests.test_panel.filtered->self.panel.to_frame()
A:pandas.tests.test_panel.unfiltered->self.panel.to_frame(filter_observations=False)
A:pandas.tests.test_panel.unsorted->pivot(np.array([]), np.array([]), np.array([])).take(np.random.permutation(len(df)))
A:pandas.tests.test_panel.pan->Panel([[[1.5, np.nan, 3.0], [1.5, np.nan, 3.0], [1.5, np.nan, 3.0], [1.5, np.nan, 3.0]], [[1.5, np.nan, 3.0], [1.5, np.nan, 3.0], [1.5, np.nan, 3.0], [1.5, np.nan, 3.0]]])
A:pandas.tests.test_panel.rdf->pivot(np.array([]), np.array([]), np.array([])).to_panel().to_frame()
A:pandas.tests.test_panel.df['category']->df['str'].astype('category')
A:pandas.tests.test_panel.idx->pandas.MultiIndex.from_tuples([(1, 'one'), (2, 'one'), (2, 'two')])
A:pandas.tests.test_panel.expected_idx->pandas.MultiIndex.from_tuples([(1, 'one', 'A'), (1, 'one', 'B'), (1, 'one', 'C'), (1, 'two', 'A'), (1, 'two', 'B'), (1, 'two', 'C'), (2, 'one', 'A'), (2, 'one', 'B'), (2, 'one', 'C'), (2, 'two', 'A'), (2, 'two', 'B'), (2, 'two', 'C')], names=[None, None, 'minor'])
A:pandas.tests.test_panel.ex_idx->pandas.MultiIndex.from_tuples([(1, 'two', 'A'), (1, 'two', 'B'), (1, 'two', 'C'), (1, 'one', 'A'), (1, 'one', 'B'), (1, 'one', 'C'), (2, 'one', 'A'), (2, 'one', 'B'), (2, 'one', 'C'), (np.nan, 'two', 'A'), (np.nan, 'two', 'B'), (np.nan, 'two', 'C')], names=[None, None, 'minor'])
A:pandas.tests.test_panel.cols->MultiIndex(levels=[['C_A', 'C_B'], ['C_1', 'C_2']], labels=[[0, 0, 1, 1], [0, 1, 0, 1]])
A:pandas.tests.test_panel.exp_idx->pandas.MultiIndex.from_tuples([(2, 'one', 'A'), (2, 'two', 'A')], names=[None, None, 'minor'])
A:pandas.tests.test_panel.idf->pivot(np.array([]), np.array([]), np.array([])).set_index(['a', 'b'])
A:pandas.tests.test_panel.no_dup_panel->Panel(data, minor_axis=list('ABCDE'))
A:pandas.tests.test_panel.compounded->self.panel.compound()
A:pandas.tests.test_panel.shifted->Panel(panel.values, items=panel.items, major_axis=Index(np.asarray(panel.major_axis)), minor_axis=panel.minor_axis).tshift(1)
A:pandas.tests.test_panel.mixed_panel->pandas.core.panel.Panel.from_dict(data, orient='minor')
A:pandas.tests.test_panel.ps->pandas.util.testing.makePeriodPanel()
A:pandas.tests.test_panel.unshifted->Panel(panel.values, items=panel.items, major_axis=Index(np.asarray(panel.major_axis)), minor_axis=panel.minor_axis).tshift(1).tshift(-1)
A:pandas.tests.test_panel.shifted2->make_test_panel().tshift(freq=panel.major_axis.freq)
A:pandas.tests.test_panel.shifted3->pandas.util.testing.makePeriodPanel().tshift(freq=BDay())
A:pandas.tests.test_panel.inferred_ts->Panel(panel.values, items=panel.items, major_axis=Index(np.asarray(panel.major_axis)), minor_axis=panel.minor_axis)
A:pandas.tests.test_panel.df3->DataFrame({'c1': [3, 4, 7], 'c2': [5, 6, 8]})
A:pandas.tests.test_panel.ind->pandas.MultiIndex.from_tuples([('a', 1), ('a', 2), ('b', 1)], names=['first', 'second'])
A:pandas.tests.test_panel.renamed->self.panel.rename_axis(str.lower, axis=2)
A:pandas.tests.test_panel.exp->r_f(self.panel, n)
A:pandas.tests.test_panel.renamed_nocopy->self.panel.rename_axis(mapper, axis=0, copy=False)
A:pandas.tests.test_panel.midx->pandas.MultiIndex.from_tuples(tuples)
A:pandas.tests.test_panel.reader->ExcelFile(path)
A:pandas.tests.test_panel.recdf->ExcelFile(path).parse(str(item), index_col=0)
A:pandas.tests.test_panel.inp->Panel(np.random.randn(4, 5, 6), items=list('abcd')).copy()
A:pandas.tests.test_panel.actual->make_test_panel().drop(drop_val, axis=alias)
A:pandas.tests.test_panel.dropped->make_test_panel().drop(['Two', 'Three'], errors='ignore')
A:pandas.tests.test_panel.exp_df->DataFrame({'A': [1], 'B': [3]}, index=[0])
A:pandas.tests.test_panel.other->Panel([[[3.6, 2.0, np.nan], [np.nan, np.nan, 7]]], items=[1])
A:pandas.tests.test_panel.self.unfiltered_panel->make_test_panel().to_frame(filter_observations=False)
A:pandas.tests.test_panel.lp2->self.panel.filter(['ItemC'])
A:pandas.tests.test_panel.wide_result->getattr(self.panel, 'r' + op)(n).to_panel()
A:pandas.tests.test_panel.alias->aliases.get(op, op)
A:pandas.tests.test_panel.sorted_minor->self.panel.sort_index(level=1)
A:pandas.tests.test_panel.sorted_major->self.panel.sort_index(level=1).sort_index(level=0)
A:pandas.tests.test_panel.buf->StringIO()
A:pandas.tests.test_panel.lp_trunc->self.panel.filter(['ItemC']).truncate(wp.major_axis[2], wp.major_axis[-2])
A:pandas.tests.test_panel.wp_trunc->self.panel.to_panel().reindex(major=new_index).truncate(wp.major_axis[2], wp.major_axis[-2])
A:pandas.tests.test_panel.minor_dummies->make_axis_dummies(self.panel, 'minor').astype(np.uint8)
A:pandas.tests.test_panel.major_dummies->make_axis_dummies(self.panel, 'major').astype(np.uint8)
A:pandas.tests.test_panel.transformed->make_axis_dummies(self.panel, 'minor', transform=mapping.get).astype(np.uint8)
A:pandas.tests.test_panel.dummies->get_dummies(self.panel['Label'])
A:pandas.tests.test_panel.means->self.panel.mean(level='minor')
A:pandas.tests.test_panel.wide_means->self.panel.to_panel().mean('major')
A:pandas.tests.test_panel.sums->self.panel.sum(level='minor')
A:pandas.tests.test_panel.wide_sums->self.panel.to_panel().sum('major')
A:pandas.tests.test_panel.lp1->self.panel.filter(['ItemA', 'ItemB'])
A:pandas.tests.test_panel.joined->self.panel.filter(['ItemA', 'ItemB']).join(lp2)
pandas.tests.test_panel.CheckIndexing(object)
pandas.tests.test_panel.CheckIndexing._check_view(self,indexer,comp)
pandas.tests.test_panel.CheckIndexing.test_comparisons(self)
pandas.tests.test_panel.CheckIndexing.test_delitem_and_pop(self)
pandas.tests.test_panel.CheckIndexing.test_get_value(self)
pandas.tests.test_panel.CheckIndexing.test_getitem(self)
pandas.tests.test_panel.CheckIndexing.test_getitem_callable(self)
pandas.tests.test_panel.CheckIndexing.test_getitem_fancy_ints(self)
pandas.tests.test_panel.CheckIndexing.test_getitem_fancy_labels(self)
pandas.tests.test_panel.CheckIndexing.test_getitem_fancy_slice(self)
pandas.tests.test_panel.CheckIndexing.test_getitem_fancy_xs(self)
pandas.tests.test_panel.CheckIndexing.test_getitem_fancy_xs_check_view(self)
pandas.tests.test_panel.CheckIndexing.test_invert(self)
pandas.tests.test_panel.CheckIndexing.test_ix_align(self)
pandas.tests.test_panel.CheckIndexing.test_ix_frame_align(self)
pandas.tests.test_panel.CheckIndexing.test_ix_setitem_slice_dataframe(self)
pandas.tests.test_panel.CheckIndexing.test_logical_with_nas(self)
pandas.tests.test_panel.CheckIndexing.test_major_xs(self)
pandas.tests.test_panel.CheckIndexing.test_major_xs_mixed(self)
pandas.tests.test_panel.CheckIndexing.test_minor_xs(self)
pandas.tests.test_panel.CheckIndexing.test_minor_xs_mixed(self)
pandas.tests.test_panel.CheckIndexing.test_neg(self)
pandas.tests.test_panel.CheckIndexing.test_set_minor_major(self)
pandas.tests.test_panel.CheckIndexing.test_set_value(self)
pandas.tests.test_panel.CheckIndexing.test_setitem(self)
pandas.tests.test_panel.CheckIndexing.test_setitem_ndarray(self)
pandas.tests.test_panel.CheckIndexing.test_xs(self)
pandas.tests.test_panel.PanelTests(object)
pandas.tests.test_panel.PanelTests.not_hashable(self)
pandas.tests.test_panel.PanelTests.test_cumsum(self)
pandas.tests.test_panel.PanelTests.test_pickle(self)
pandas.tests.test_panel.PanelTests.test_rank(self)
pandas.tests.test_panel.SafeForLongAndSparse(object)
pandas.tests.test_panel.SafeForLongAndSparse._check_stat_op(self,name,alternative,obj=None,has_skipna=True)
pandas.tests.test_panel.SafeForLongAndSparse.test_copy_names(self)
pandas.tests.test_panel.SafeForLongAndSparse.test_count(self)
pandas.tests.test_panel.SafeForLongAndSparse.test_iter(self)
pandas.tests.test_panel.SafeForLongAndSparse.test_max(self)
pandas.tests.test_panel.SafeForLongAndSparse.test_mean(self)
pandas.tests.test_panel.SafeForLongAndSparse.test_median(self)
pandas.tests.test_panel.SafeForLongAndSparse.test_min(self)
pandas.tests.test_panel.SafeForLongAndSparse.test_prod(self)
pandas.tests.test_panel.SafeForLongAndSparse.test_repr(self)
pandas.tests.test_panel.SafeForLongAndSparse.test_sem(self)
pandas.tests.test_panel.SafeForLongAndSparse.test_skew(self)
pandas.tests.test_panel.SafeForLongAndSparse.test_std(self)
pandas.tests.test_panel.SafeForLongAndSparse.test_sum(self)
pandas.tests.test_panel.SafeForLongAndSparse.test_var(self)
pandas.tests.test_panel.SafeForSparse(object)
pandas.tests.test_panel.SafeForSparse._test_op(panel,op)
pandas.tests.test_panel.SafeForSparse.assert_panel_equal(cls,x,y)
pandas.tests.test_panel.SafeForSparse.test_abs(self)
pandas.tests.test_panel.SafeForSparse.test_arith(self)
pandas.tests.test_panel.SafeForSparse.test_combineFrame(self)
pandas.tests.test_panel.SafeForSparse.test_combinePanel(self)
pandas.tests.test_panel.SafeForSparse.test_get_axis(self)
pandas.tests.test_panel.SafeForSparse.test_get_axis_name(self)
pandas.tests.test_panel.SafeForSparse.test_get_axis_number(self)
pandas.tests.test_panel.SafeForSparse.test_get_plane_axes(self)
pandas.tests.test_panel.SafeForSparse.test_get_value(self)
pandas.tests.test_panel.SafeForSparse.test_iteritems(self)
pandas.tests.test_panel.SafeForSparse.test_keys(self)
pandas.tests.test_panel.SafeForSparse.test_neg(self)
pandas.tests.test_panel.SafeForSparse.test_raise_when_not_implemented(self)
pandas.tests.test_panel.SafeForSparse.test_select(self)
pandas.tests.test_panel.SafeForSparse.test_set_axis(self)
pandas.tests.test_panel.SafeForSparse.test_truncate(self)
pandas.tests.test_panel.TestLongPanel(object)
pandas.tests.test_panel.TestLongPanel.setup_method(self,method)
pandas.tests.test_panel.TestLongPanel.test_arith_flex_panel(self)
pandas.tests.test_panel.TestLongPanel.test_axis_dummies(self)
pandas.tests.test_panel.TestLongPanel.test_combineFrame(self)
pandas.tests.test_panel.TestLongPanel.test_combinePanel(self)
pandas.tests.test_panel.TestLongPanel.test_combine_scalar(self)
pandas.tests.test_panel.TestLongPanel.test_combine_series(self)
pandas.tests.test_panel.TestLongPanel.test_count(self)
pandas.tests.test_panel.TestLongPanel.test_get_dummies(self)
pandas.tests.test_panel.TestLongPanel.test_join(self)
pandas.tests.test_panel.TestLongPanel.test_mean(self)
pandas.tests.test_panel.TestLongPanel.test_operators(self)
pandas.tests.test_panel.TestLongPanel.test_ops_differently_indexed(self)
pandas.tests.test_panel.TestLongPanel.test_ops_scalar(self)
pandas.tests.test_panel.TestLongPanel.test_pivot(self)
pandas.tests.test_panel.TestLongPanel.test_sort(self)
pandas.tests.test_panel.TestLongPanel.test_sum(self)
pandas.tests.test_panel.TestLongPanel.test_to_sparse(self)
pandas.tests.test_panel.TestLongPanel.test_to_string(self)
pandas.tests.test_panel.TestLongPanel.test_truncate(self)
pandas.tests.test_panel.TestPanel(PanelTests,CheckIndexing,SafeForLongAndSparse,SafeForSparse)
pandas.tests.test_panel.TestPanel.assert_panel_equal(cls,x,y)
pandas.tests.test_panel.TestPanel.setup_method(self,method)
pandas.tests.test_panel.TestPanel.test_all_any(self)
pandas.tests.test_panel.TestPanel.test_all_any_unhandled(self)
pandas.tests.test_panel.TestPanel.test_apply(self)
pandas.tests.test_panel.TestPanel.test_apply_no_or_zero_ndim(self)
pandas.tests.test_panel.TestPanel.test_apply_slabs(self)
pandas.tests.test_panel.TestPanel.test_astype(self)
pandas.tests.test_panel.TestPanel.test_compound(self)
pandas.tests.test_panel.TestPanel.test_conform(self)
pandas.tests.test_panel.TestPanel.test_consolidate(self)
pandas.tests.test_panel.TestPanel.test_constructor(self)
pandas.tests.test_panel.TestPanel.test_constructor_cast(self)
pandas.tests.test_panel.TestPanel.test_constructor_dict_mixed(self)
pandas.tests.test_panel.TestPanel.test_constructor_dtypes(self)
pandas.tests.test_panel.TestPanel.test_constructor_empty_panel(self)
pandas.tests.test_panel.TestPanel.test_constructor_error_msgs(self)
pandas.tests.test_panel.TestPanel.test_constructor_fails_with_not_3d_input(self)
pandas.tests.test_panel.TestPanel.test_constructor_observe_dtype(self)
pandas.tests.test_panel.TestPanel.test_constructor_resize(self)
pandas.tests.test_panel.TestPanel.test_convert_objects(self)
pandas.tests.test_panel.TestPanel.test_ctor_dict(self)
pandas.tests.test_panel.TestPanel.test_ctor_orderedDict(self)
pandas.tests.test_panel.TestPanel.test_drop(self)
pandas.tests.test_panel.TestPanel.test_dropna(self)
pandas.tests.test_panel.TestPanel.test_dtypes(self)
pandas.tests.test_panel.TestPanel.test_ffill_bfill(self)
pandas.tests.test_panel.TestPanel.test_fillna(self)
pandas.tests.test_panel.TestPanel.test_filter(self)
pandas.tests.test_panel.TestPanel.test_from_dict_mixed_orient(self)
pandas.tests.test_panel.TestPanel.test_from_frame_level1_unsorted(self)
pandas.tests.test_panel.TestPanel.test_get_attr(self)
pandas.tests.test_panel.TestPanel.test_multiindex_blocks(self)
pandas.tests.test_panel.TestPanel.test_multiindex_get(self)
pandas.tests.test_panel.TestPanel.test_numpy_round(self)
pandas.tests.test_panel.TestPanel.test_panel_dups(self)
pandas.tests.test_panel.TestPanel.test_pct_change(self)
pandas.tests.test_panel.TestPanel.test_reindex(self)
pandas.tests.test_panel.TestPanel.test_reindex_like(self)
pandas.tests.test_panel.TestPanel.test_reindex_multi(self)
pandas.tests.test_panel.TestPanel.test_rename(self)
pandas.tests.test_panel.TestPanel.test_repr_empty(self)
pandas.tests.test_panel.TestPanel.test_round(self)
pandas.tests.test_panel.TestPanel.test_shift(self)
pandas.tests.test_panel.TestPanel.test_sort_index(self)
pandas.tests.test_panel.TestPanel.test_swapaxes(self)
pandas.tests.test_panel.TestPanel.test_take(self)
pandas.tests.test_panel.TestPanel.test_to_excel(self)
pandas.tests.test_panel.TestPanel.test_to_excel_xlsxwriter(self)
pandas.tests.test_panel.TestPanel.test_to_frame(self)
pandas.tests.test_panel.TestPanel.test_to_frame_mixed(self)
pandas.tests.test_panel.TestPanel.test_to_frame_multi_drop_level(self)
pandas.tests.test_panel.TestPanel.test_to_frame_multi_major(self)
pandas.tests.test_panel.TestPanel.test_to_frame_multi_major_minor(self)
pandas.tests.test_panel.TestPanel.test_to_panel_duplicates(self)
pandas.tests.test_panel.TestPanel.test_to_panel_na_handling(self)
pandas.tests.test_panel.TestPanel.test_transpose(self)
pandas.tests.test_panel.TestPanel.test_transpose_copy(self)
pandas.tests.test_panel.TestPanel.test_truncate_fillna_bug(self)
pandas.tests.test_panel.TestPanel.test_tshift(self)
pandas.tests.test_panel.TestPanel.test_update(self)
pandas.tests.test_panel.TestPanel.test_update_filtered(self)
pandas.tests.test_panel.TestPanel.test_update_from_dict(self)
pandas.tests.test_panel.TestPanel.test_update_nooverwrite(self)
pandas.tests.test_panel.TestPanel.test_update_raise(self)
pandas.tests.test_panel.make_test_panel()
pandas.tests.test_panel.test_panel_index()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_lib.py----------------------------------------
A:pandas.tests.test_lib.arra->numpy.array(['foo', 'b', np.nan], dtype='object')
A:pandas.tests.test_lib.arr->numpy.empty_like([None])
A:pandas.tests.test_lib.expected->numpy.array([True])
A:pandas.tests.test_lib.out->pandas._libs.lib.fast_unique_multiple_list_gen(gen, sort=False)
A:pandas.tests.test_lib.target->numpy.arange(100)
A:pandas.tests.test_lib.indices->numpy.array(case, dtype=np.int64)
A:pandas.tests.test_lib.maybe_slice->pandas._libs.lib.maybe_indices_to_slice(indices, len(target))
A:pandas.tests.test_lib.result->getattr(lib, method)(arr)
A:pandas.tests.test_lib.indexer->numpy.array([-1, -1, 1, 2, 0, -1, 3, 4], dtype=np.int64)
pandas.tests.test_lib.TestIndexing(object)
pandas.tests.test_lib.TestIndexing.test_get_reverse_indexer(self)
pandas.tests.test_lib.TestIndexing.test_maybe_booleans_to_slice(self)
pandas.tests.test_lib.TestIndexing.test_maybe_indices_to_slice_both_edges(self)
pandas.tests.test_lib.TestIndexing.test_maybe_indices_to_slice_left_edge(self)
pandas.tests.test_lib.TestIndexing.test_maybe_indices_to_slice_middle(self)
pandas.tests.test_lib.TestIndexing.test_maybe_indices_to_slice_right_edge(self)
pandas.tests.test_lib.TestMisc(object)
pandas.tests.test_lib.TestMisc.test_fast_unique_multiple_list_gen_sort(self)
pandas.tests.test_lib.TestMisc.test_max_len_string_array(self)
pandas.tests.test_lib.TestNullObj(object)
pandas.tests.test_lib.TestNullObj._check_behavior(self,arr,expected)
pandas.tests.test_lib.TestNullObj.test_basic(self)
pandas.tests.test_lib.TestNullObj.test_empty_arr(self)
pandas.tests.test_lib.TestNullObj.test_empty_like(self)
pandas.tests.test_lib.TestNullObj.test_empty_str_inp(self)
pandas.tests.test_lib.TestNullObj.test_non_obj_dtype(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_sorting.py----------------------------------------
A:pandas.tests.test_sorting.B->numpy.concatenate((np.arange(1000), np.arange(1000), np.arange(500)))
A:pandas.tests.test_sorting.A->numpy.arange(2500)
A:pandas.tests.test_sorting.df->df.sort_values(df.columns.tolist()).sort_values(df.columns.tolist())
A:pandas.tests.test_sorting.lg->df.sort_values(df.columns.tolist()).sort_values(df.columns.tolist()).groupby(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'])
A:pandas.tests.test_sorting.rg->df.sort_values(df.columns.tolist()).sort_values(df.columns.tolist()).groupby(['H', 'G', 'F', 'E', 'D', 'C', 'B', 'A'])
A:pandas.tests.test_sorting.(exp_index, _)->right.iloc[i].copy().index.sortlevel(0)
A:pandas.tests.test_sorting.tups->pandas.core.common._asarray_tuplesafe(tups)
A:pandas.tests.test_sorting.values->range(55109)
A:pandas.tests.test_sorting.data->pandas.DataFrame.from_dict({'a': values, 'b': values, 'c': values, 'd': values})
A:pandas.tests.test_sorting.grouped->pandas.DataFrame.from_dict({'a': values, 'b': values, 'c': values, 'd': values}).groupby(['a', 'b', 'c', 'd'])
A:pandas.tests.test_sorting.arr->numpy.vstack((arr, arr[i]))
A:pandas.tests.test_sorting.i->numpy.random.permutation(len(right))
A:pandas.tests.test_sorting.gr->df.sort_values(df.columns.tolist()).sort_values(df.columns.tolist()).groupby(list('abcde'))
A:pandas.tests.test_sorting.mi->pandas.MultiIndex.from_tuples(jim.keys(), names=list('abcde'))
A:pandas.tests.test_sorting.res->merge(left, right, how=how, sort=sort)
A:pandas.tests.test_sorting.result->align(out).iloc[:, :-2].sum(axis=1)
A:pandas.tests.test_sorting.items2->numpy.array(items, dtype='O')
A:pandas.tests.test_sorting.df1->DataFrame(np.random.randn(1000, 7), columns=list('ABCDEF') + ['G1'])
A:pandas.tests.test_sorting.df2->DataFrame(np.random.randn(1000, 7), columns=list('ABCDEF') + ['G2'])
A:pandas.tests.test_sorting.left->left.iloc[i].copy().iloc[i].copy()
A:pandas.tests.test_sorting.left['left']->numpy.random.randn(len(left))
A:pandas.tests.test_sorting.right->right.iloc[i].copy().iloc[i].copy()
A:pandas.tests.test_sorting.right.index->numpy.arange(len(right))
A:pandas.tests.test_sorting.out->align(out)
A:pandas.tests.test_sorting.out.index->numpy.arange(len(out))
A:pandas.tests.test_sorting.right['right']->numpy.random.randn(len(right))
A:pandas.tests.test_sorting.left.index->numpy.arange(len(left))
A:pandas.tests.test_sorting.rval->rdict.get(k, [np.nan])
A:pandas.tests.test_sorting.df.index->numpy.arange(len(df))
A:pandas.tests.test_sorting.kcols->list('ABCDEFG')
A:pandas.tests.test_sorting.frame->align(out[mask].copy())
A:pandas.tests.test_sorting.group_index->get_group_index(label_list, shape, sort=True, xnull=True)
A:pandas.tests.test_sorting.label_list2->decons_group_index(group_index, shape)
pandas.tests.test_sorting.TestMerge(object)
pandas.tests.test_sorting.TestMerge.test_int64_overflow_issues(self)
pandas.tests.test_sorting.TestSorting(object)
pandas.tests.test_sorting.TestSorting.test_int64_overflow(self)
pandas.tests.test_sorting.TestSorting.test_int64_overflow_moar(self)
pandas.tests.test_sorting.TestSorting.test_lexsort_indexer(self)
pandas.tests.test_sorting.TestSorting.test_nargsort(self)
pandas.tests.test_sorting.test_decons()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_internals.py----------------------------------------
A:pandas.tests.test_internals.arr->numpy.random.rand(3, 3).sp_values.view()
A:pandas.tests.test_internals.placement->list(np.arange(len(names)) + offset)
A:pandas.tests.test_internals.num_items->len(placement)
A:pandas.tests.test_internals.mat->create_single_mgr('f8', num_rows=5).as_matrix()
A:pandas.tests.test_internals.values->numpy.random.rand(3, 3)
A:pandas.tests.test_internals.m->re.search('M8\\[ns,\\s*(\\w+\\/?\\w*)\\]', typestr)
A:pandas.tests.test_internals.block_placements->OrderedDict()
A:pandas.tests.test_internals.d->d.strip().strip()
A:pandas.tests.test_internals.blockstr->blockstr.strip().strip()
A:pandas.tests.test_internals.names->names.strip().split(',').strip().split(',')
A:pandas.tests.test_internals.mgr_items->Index(mgr_items)
A:pandas.tests.test_internals.self.fblock->create_block('float', [0, 2, 4])
A:pandas.tests.test_internals.self.cblock->create_block('complex', [7])
A:pandas.tests.test_internals.self.oblock->create_block('object', [1, 3])
A:pandas.tests.test_internals.self.bool_block->create_block('bool', [5])
A:pandas.tests.test_internals.self.int_block->create_block('int', [6])
A:pandas.tests.test_internals.int32block->create_block('i4', [0])
A:pandas.tests.test_internals.avals->randn(2, 10)
A:pandas.tests.test_internals.bvals->randn(2, 10)
A:pandas.tests.test_internals.ref_cols->Index(['e', 'a', 'b', 'd', 'f'])
A:pandas.tests.test_internals.ablock->make_block(avals, ref_cols.get_indexer(['e', 'b']))
A:pandas.tests.test_internals.bblock->make_block(bvals, ref_cols.get_indexer(['a', 'd']))
A:pandas.tests.test_internals.merged->make_block(avals, ref_cols.get_indexer(['e', 'b'])).merge(bblock)
A:pandas.tests.test_internals.cop->self.fblock.copy()
A:pandas.tests.test_internals.newb->self.fblock.copy()
A:pandas.tests.test_internals.bs->list(self.fblock.split_block_at('e'))
A:pandas.tests.test_internals.block->make_block(values=values.copy(), placement=np.arange(3))
A:pandas.tests.test_internals.mgr->create_single_mgr('f8', num_rows=5)
A:pandas.tests.test_internals.mgr1->create_mgr('a,b: f8')
A:pandas.tests.test_internals.mgr2->create_single_mgr('f8', num_rows=5).consolidate()
A:pandas.tests.test_internals.mgr3->create_mgr('a,b,c: f8')
A:pandas.tests.test_internals.tmp_mgr->create_mgr('a:bool; a: f8')
A:pandas.tests.test_internals.blocks[0].mgr_locs->numpy.array([0])
A:pandas.tests.test_internals.blocks[1].mgr_locs->numpy.array([1])
A:pandas.tests.test_internals.smgr->create_single_mgr('category')
A:pandas.tests.test_internals.smgr2->pandas.util.testing.round_trip_pickle(smgr)
A:pandas.tests.test_internals.res->create_single_mgr('f8', num_rows=5).get_scalar((item, index))
A:pandas.tests.test_internals.cols->pandas.MultiIndex.from_tuples([('1st', 'a'), ('2nd', 'b'), ('3rd', 'c')])
A:pandas.tests.test_internals.df->DataFrame({'a': [1]})
A:pandas.tests.test_internals.cp->create_single_mgr('f8', num_rows=5).copy(deep=True)
A:pandas.tests.test_internals.t->numpy.dtype(t)
A:pandas.tests.test_internals.tmgr->create_single_mgr('f8', num_rows=5).astype(t, errors='ignore')
A:pandas.tests.test_internals.old_blocks->set(old_mgr.blocks)
A:pandas.tests.test_internals.new_blocks->set(new_mgr.blocks)
A:pandas.tests.test_internals.new_mgr->create_single_mgr('f8', num_rows=5).convert(numeric=True)
A:pandas.tests.test_internals.df_unique->DataFrame({'a': [1]}).copy()
A:pandas.tests.test_internals.cons->create_single_mgr('f8', num_rows=5).consolidate().get_numeric_data()
A:pandas.tests.test_internals.reindexed->create_single_mgr('f8', num_rows=5).reindex_indexer(new_labels, indexer, axis, fill_value=fill_value)
A:pandas.tests.test_internals.index->MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'], ['one', 'two', 'three']], labels=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3], [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]], names=['first', 'second'])
A:pandas.tests.test_internals.result->create_single_mgr('f8', num_rows=5).xs('bar', axis=1)
A:pandas.tests.test_internals.numeric->create_single_mgr('f8', num_rows=5).get_numeric_data()
A:pandas.tests.test_internals.numeric2->create_single_mgr('f8', num_rows=5).get_numeric_data(copy=True)
A:pandas.tests.test_internals.bools->create_single_mgr('f8', num_rows=5).get_bool_data()
A:pandas.tests.test_internals.bools2->create_single_mgr('f8', num_rows=5).get_bool_data(copy=True)
A:pandas.tests.test_internals.bm1->create_mgr('a,b,c: i8-1; d,e,f: i8-2')
A:pandas.tests.test_internals.bm2->BlockManager(bm1.blocks[::-1], bm1.axes)
A:pandas.tests.test_internals.bm->create_mgr(mgr_string)
A:pandas.tests.test_internals.block_perms->itertools.permutations(bm.blocks)
A:pandas.tests.test_internals.bm_this->BlockManager(bm_perm, bm.axes)
A:pandas.tests.test_internals.slobj->numpy.concatenate([slobj, np.zeros(len(ax) - len(slobj), dtype=bool)])
A:pandas.tests.test_internals.sliced->create_single_mgr('f8', num_rows=5).get_slice(slobj, axis=axis)
A:pandas.tests.test_internals.taken->create_single_mgr('f8', num_rows=5).take(indexer, axis)
A:pandas.tests.test_internals.indexer->create_single_mgr('f8', num_rows=5).axes[axis].get_indexer_for(new_labels)
A:pandas.tests.test_internals.reindexed_mat->pandas.core.algorithms.take_nd(mat, indexer, axis, fill_value=fill_value)
A:pandas.tests.test_internals.bpl->BlockPlacement(slice(0, 5))
pandas.tests.test_internals.TestBlock(object)
pandas.tests.test_internals.TestBlock.setup_method(self,method)
pandas.tests.test_internals.TestBlock.test_attrs(self)
pandas.tests.test_internals.TestBlock.test_constructor(self)
pandas.tests.test_internals.TestBlock.test_copy(self)
pandas.tests.test_internals.TestBlock.test_delete(self)
pandas.tests.test_internals.TestBlock.test_insert(self)
pandas.tests.test_internals.TestBlock.test_merge(self)
pandas.tests.test_internals.TestBlock.test_mgr_locs(self)
pandas.tests.test_internals.TestBlock.test_pickle(self)
pandas.tests.test_internals.TestBlock.test_reindex_cast(self)
pandas.tests.test_internals.TestBlock.test_reindex_index(self)
pandas.tests.test_internals.TestBlock.test_split_block_at(self)
pandas.tests.test_internals.TestBlockManager(object)
pandas.tests.test_internals.TestBlockManager.test_as_matrix_datetime(self)
pandas.tests.test_internals.TestBlockManager.test_as_matrix_datetime_tz(self)
pandas.tests.test_internals.TestBlockManager.test_as_matrix_float(self)
pandas.tests.test_internals.TestBlockManager.test_as_matrix_int_bool(self)
pandas.tests.test_internals.TestBlockManager.test_astype(self)
pandas.tests.test_internals.TestBlockManager.test_attrs(self)
pandas.tests.test_internals.TestBlockManager.test_categorical_block_pickle(self)
pandas.tests.test_internals.TestBlockManager.test_consolidate(self)
pandas.tests.test_internals.TestBlockManager.test_consolidate_ordering_issues(self,mgr)
pandas.tests.test_internals.TestBlockManager.test_constructor_corner(self)
pandas.tests.test_internals.TestBlockManager.test_contains(self,mgr)
pandas.tests.test_internals.TestBlockManager.test_convert(self)
pandas.tests.test_internals.TestBlockManager.test_copy(self,mgr)
pandas.tests.test_internals.TestBlockManager.test_duplicate_ref_loc_failure(self)
pandas.tests.test_internals.TestBlockManager.test_equals(self)
pandas.tests.test_internals.TestBlockManager.test_equals_block_order_different_dtypes(self)
pandas.tests.test_internals.TestBlockManager.test_get(self)
pandas.tests.test_internals.TestBlockManager.test_get_bool_data(self)
pandas.tests.test_internals.TestBlockManager.test_get_numeric_data(self)
pandas.tests.test_internals.TestBlockManager.test_get_scalar(self,mgr)
pandas.tests.test_internals.TestBlockManager.test_interleave(self)
pandas.tests.test_internals.TestBlockManager.test_interleave_non_unique_cols(self)
pandas.tests.test_internals.TestBlockManager.test_is_indexed_like(self)
pandas.tests.test_internals.TestBlockManager.test_is_mixed_dtype(self)
pandas.tests.test_internals.TestBlockManager.test_missing_unicode_key(self)
pandas.tests.test_internals.TestBlockManager.test_multiindex_xs(self)
pandas.tests.test_internals.TestBlockManager.test_non_unique_pickle(self)
pandas.tests.test_internals.TestBlockManager.test_pickle(self,mgr)
pandas.tests.test_internals.TestBlockManager.test_reindex_index(self)
pandas.tests.test_internals.TestBlockManager.test_reindex_items(self)
pandas.tests.test_internals.TestBlockManager.test_set(self)
pandas.tests.test_internals.TestBlockManager.test_set_change_dtype(self,mgr)
pandas.tests.test_internals.TestBlockManager.test_set_change_dtype_slice(self)
pandas.tests.test_internals.TestBlockManager.test_single_mgr_ctor(self)
pandas.tests.test_internals.TestBlockManager.test_sparse(self)
pandas.tests.test_internals.TestBlockManager.test_sparse_mixed(self)
pandas.tests.test_internals.TestBlockManager.test_unicode_repr_doesnt_raise(self)
pandas.tests.test_internals.TestBlockManager.test_validate_bool_args(self)
pandas.tests.test_internals.TestBlockPlacement(object)
pandas.tests.test_internals.TestBlockPlacement.test_array_to_slice_conversion(self)
pandas.tests.test_internals.TestBlockPlacement.test_blockplacement_add(self)
pandas.tests.test_internals.TestBlockPlacement.test_blockplacement_add_int(self)
pandas.tests.test_internals.TestBlockPlacement.test_not_slice_like_arrays(self)
pandas.tests.test_internals.TestBlockPlacement.test_not_slice_like_slices(self)
pandas.tests.test_internals.TestBlockPlacement.test_slice_iter(self)
pandas.tests.test_internals.TestBlockPlacement.test_slice_len(self)
pandas.tests.test_internals.TestBlockPlacement.test_slice_to_array_conversion(self)
pandas.tests.test_internals.TestBlockPlacement.test_unbounded_slice_raises(self)
pandas.tests.test_internals.TestBlockPlacement.test_zero_step_raises(self)
pandas.tests.test_internals.TestDatetimeBlock(object)
pandas.tests.test_internals.TestDatetimeBlock.test_try_coerce_arg(self)
pandas.tests.test_internals.TestIndexing(object)
pandas.tests.test_internals.TestIndexing.test_get_slice(self)
pandas.tests.test_internals.TestIndexing.test_reindex_axis(self)
pandas.tests.test_internals.TestIndexing.test_reindex_indexer(self)
pandas.tests.test_internals.TestIndexing.test_take(self)
pandas.tests.test_internals.assert_block_equal(left,right)
pandas.tests.test_internals.create_block(typestr,placement,item_shape=None,num_offset=0)
pandas.tests.test_internals.create_mgr(descr,item_shape=None)
pandas.tests.test_internals.create_single_mgr(typestr,num_rows=None)
pandas.tests.test_internals.get_numeric_mat(shape)
pandas.tests.test_internals.mgr()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_errors.py----------------------------------------
A:pandas.tests.test_errors.e->getattr(errors, exc)
pandas.tests.test_errors.test_catch_oob()
pandas.tests.test_errors.test_error_rename()
pandas.tests.test_errors.test_exception_importable(exc)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_panel4d.py----------------------------------------
A:pandas.tests.test_panel4d.f->getattr(obj, name)
A:pandas.tests.test_panel4d.nona->remove_na(x)
A:pandas.tests.test_panel4d.result->self.panel4d.swapaxes('items', 'items')
A:pandas.tests.test_panel4d.expected->Series(np.dtype('float64'), index=self.panel4d.labels)
A:pandas.tests.test_panel4d.new_labels->Index(np.arange(len(self.panel4d.labels)))
A:pandas.tests.test_panel4d.new_major->list(self.panel4d.major_axis[:10])
A:pandas.tests.test_panel4d.new_minor->list(self.panel4d.minor_axis[:2])
A:pandas.tests.test_panel4d.values->numpy.empty((4, 4, 4, 4))
A:pandas.tests.test_panel4d.panel4d->Panel4D(d)
A:pandas.tests.test_panel4d.panel4dc->self.panel4d.copy()
A:pandas.tests.test_panel4d.p->self.panel4d['l1'].filter(items=['ItemA', 'ItemB'])
A:pandas.tests.test_panel4d.p1->pandas.util.testing.makePanel4D()
A:pandas.tests.test_panel4d.p2->pandas.util.testing.makePanel4D()
A:pandas.tests.test_panel4d.tp->pandas.util.testing.makePanel4D().reindex(labels=p1.labels.tolist() + ['foo'])
A:pandas.tests.test_panel4d.result3->func(self.panel4d, 0)
A:pandas.tests.test_panel4d.xs->self.panel4d.minor_xs('D')
A:pandas.tests.test_panel4d.l1->self.panel4d.xs('l1', axis=0)
A:pandas.tests.test_panel4d.l1_view->self.panel4d.xs('l1', axis=0)
A:pandas.tests.test_panel4d.res3->self.panel4d.set_value('l4', 'ItemE', 'foobar', 'baz', 5)
A:pandas.tests.test_panel4d.res->self.panel4d.set_value('l4', 'ItemE', 'foo', 'bar', 1.5)
A:pandas.tests.test_panel4d.self.panel4d->pandas.util.testing.makePanel4D(nper=8)
A:pandas.tests.test_panel4d.vals->numpy.empty((2, 3, 4, 5), dtype='float32')
A:pandas.tests.test_panel4d.zero_filled->self.panel4d.fillna(0)
A:pandas.tests.test_panel4d.casted->Panel4D(zero_filled._data, dtype=np.int32)
A:pandas.tests.test_panel4d.casted2->Panel4D(zero_filled.values, dtype=np.int32)
A:pandas.tests.test_panel4d.exp_values->self.panel4d.fillna(0).values.astype(np.int32)
A:pandas.tests.test_panel4d.data->dict(((k, v.values) for (k, v) in self.panel4d.iteritems()))
A:pandas.tests.test_panel4d.exp_major->Index(np.arange(len(self.panel4d.major_axis)))
A:pandas.tests.test_panel4d.conformed->self.panel4d.conform(p)
A:pandas.tests.test_panel4d.smaller->self.panel4d.reindex(labels=self.panel4d.labels[:-1], items=self.panel4d.items[:-1], major=self.panel4d.major_axis[:-1], minor=self.panel4d.minor_axis[:-1])
A:pandas.tests.test_panel4d.larger->self.panel4d.reindex(labels=self.panel4d.labels[:-1], items=self.panel4d.items[:-1], major=self.panel4d.major_axis[:-1], minor=self.panel4d.minor_axis[:-1]).reindex(major=self.panel4d.major_axis, method='pad')
A:pandas.tests.test_panel4d.p4D_empty->Panel4D()
A:pandas.tests.test_panel4d.smaller_like->self.panel4d.reindex_like(smaller)
A:pandas.tests.test_panel4d.rlabels->list(self.panel4d.labels)
A:pandas.tests.test_panel4d.ritems->list(self.panel4d.items)
A:pandas.tests.test_panel4d.rmajor->list(self.panel4d.major_axis)
A:pandas.tests.test_panel4d.rminor->list(self.panel4d.minor_axis)
A:pandas.tests.test_panel4d.random_order->self.panel4d.reindex(labels=rlabels)
A:pandas.tests.test_panel4d.sorted_panel4d->self.panel4d.reindex(labels=rlabels).sort_index(axis=0)
A:pandas.tests.test_panel4d.filled->self.panel4d.fillna(0)
A:pandas.tests.test_panel4d.p4d->Panel4D([[[[1.5, np.nan, 3.0], [1.5, np.nan, 3.0], [1.5, np.nan, 3.0], [1.5, np.nan, 3.0]], [[1.5, np.nan, 3.0], [1.5, np.nan, 3.0], [1.5, np.nan, 3.0], [1.5, np.nan, 3.0]]]])
A:pandas.tests.test_panel4d.other->Panel4D([[[[3.6, 2.0, np.nan]], [[np.nan, np.nan, 7]]]])
A:pandas.tests.test_panel4d.empty->Panel4D()
A:pandas.tests.test_panel4d.renamed->self.panel4d.rename_axis(str.lower, axis=3)
A:pandas.tests.test_panel4d.exp->Index(['a', 'b', 'c', 'd'])
A:pandas.tests.test_panel4d.renamed_nocopy->self.panel4d.rename_axis(mapper, axis=0, copy=False)
pandas.tests.test_panel4d.CheckIndexing(object)
pandas.tests.test_panel4d.CheckIndexing.test_comparisons(self)
pandas.tests.test_panel4d.CheckIndexing.test_delitem_and_pop(self)
pandas.tests.test_panel4d.CheckIndexing.test_get_value(self)
pandas.tests.test_panel4d.CheckIndexing.test_getitem(self)
pandas.tests.test_panel4d.CheckIndexing.test_getitem_fancy_ints(self)
pandas.tests.test_panel4d.CheckIndexing.test_getitem_fancy_labels(self)
pandas.tests.test_panel4d.CheckIndexing.test_getitem_fancy_slice(self)
pandas.tests.test_panel4d.CheckIndexing.test_major_xs(self)
pandas.tests.test_panel4d.CheckIndexing.test_major_xs_mixed(self)
pandas.tests.test_panel4d.CheckIndexing.test_minor_xs(self)
pandas.tests.test_panel4d.CheckIndexing.test_minor_xs_mixed(self)
pandas.tests.test_panel4d.CheckIndexing.test_set_value(self)
pandas.tests.test_panel4d.CheckIndexing.test_setitem(self)
pandas.tests.test_panel4d.CheckIndexing.test_setitem_by_indexer(self)
pandas.tests.test_panel4d.CheckIndexing.test_setitem_by_indexer_mixed_type(self)
pandas.tests.test_panel4d.CheckIndexing.test_xs(self)
pandas.tests.test_panel4d.SafeForLongAndSparse(object)
pandas.tests.test_panel4d.SafeForLongAndSparse._check_stat_op(self,name,alternative,obj=None,has_skipna=True)
pandas.tests.test_panel4d.SafeForLongAndSparse.test_count(self)
pandas.tests.test_panel4d.SafeForLongAndSparse.test_iter(self)
pandas.tests.test_panel4d.SafeForLongAndSparse.test_max(self)
pandas.tests.test_panel4d.SafeForLongAndSparse.test_mean(self)
pandas.tests.test_panel4d.SafeForLongAndSparse.test_median(self)
pandas.tests.test_panel4d.SafeForLongAndSparse.test_min(self)
pandas.tests.test_panel4d.SafeForLongAndSparse.test_prod(self)
pandas.tests.test_panel4d.SafeForLongAndSparse.test_repr(self)
pandas.tests.test_panel4d.SafeForLongAndSparse.test_sem(self)
pandas.tests.test_panel4d.SafeForLongAndSparse.test_skew(self)
pandas.tests.test_panel4d.SafeForLongAndSparse.test_std(self)
pandas.tests.test_panel4d.SafeForLongAndSparse.test_sum(self)
pandas.tests.test_panel4d.SafeForLongAndSparse.test_var(self)
pandas.tests.test_panel4d.SafeForSparse(object)
pandas.tests.test_panel4d.SafeForSparse._test_op(panel4d,op)
pandas.tests.test_panel4d.SafeForSparse.test_abs(self)
pandas.tests.test_panel4d.SafeForSparse.test_arith(self)
pandas.tests.test_panel4d.SafeForSparse.test_combinePanel4d(self)
pandas.tests.test_panel4d.SafeForSparse.test_get_axis(self)
pandas.tests.test_panel4d.SafeForSparse.test_get_axis_name(self)
pandas.tests.test_panel4d.SafeForSparse.test_get_axis_number(self)
pandas.tests.test_panel4d.SafeForSparse.test_get_value(self)
pandas.tests.test_panel4d.SafeForSparse.test_iteritems(self)
pandas.tests.test_panel4d.SafeForSparse.test_keys(self)
pandas.tests.test_panel4d.SafeForSparse.test_neg(self)
pandas.tests.test_panel4d.SafeForSparse.test_select(self)
pandas.tests.test_panel4d.SafeForSparse.test_set_axis(self)
pandas.tests.test_panel4d.TestPanel4d(CheckIndexing,SafeForSparse,SafeForLongAndSparse)
pandas.tests.test_panel4d.TestPanel4d.setup_method(self,method)
pandas.tests.test_panel4d.TestPanel4d.test_conform(self)
pandas.tests.test_panel4d.TestPanel4d.test_consolidate(self)
pandas.tests.test_panel4d.TestPanel4d.test_constructor(self)
pandas.tests.test_panel4d.TestPanel4d.test_constructor_cast(self)
pandas.tests.test_panel4d.TestPanel4d.test_constructor_dict_mixed(self)
pandas.tests.test_panel4d.TestPanel4d.test_constructor_resize(self)
pandas.tests.test_panel4d.TestPanel4d.test_ctor_dict(self)
pandas.tests.test_panel4d.TestPanel4d.test_dtypes(self)
pandas.tests.test_panel4d.TestPanel4d.test_fillna(self)
pandas.tests.test_panel4d.TestPanel4d.test_get_attr(self)
pandas.tests.test_panel4d.TestPanel4d.test_not_hashable(self)
pandas.tests.test_panel4d.TestPanel4d.test_reindex(self)
pandas.tests.test_panel4d.TestPanel4d.test_reindex_like(self)
pandas.tests.test_panel4d.TestPanel4d.test_rename(self)
pandas.tests.test_panel4d.TestPanel4d.test_repr_empty(self)
pandas.tests.test_panel4d.TestPanel4d.test_sort_index(self)
pandas.tests.test_panel4d.TestPanel4d.test_swapaxes(self)
pandas.tests.test_panel4d.TestPanel4d.test_update(self)
pandas.tests.test_panel4d.add_nans(panel4d)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_config.py----------------------------------------
A:pandas.tests.test_config.cls.gc->deepcopy(getattr(cls.cf, '_global_config'))
A:pandas.tests.test_config.cls.do->deepcopy(getattr(cls.cf, '_deprecated_options'))
A:pandas.tests.test_config.cls.ro->deepcopy(getattr(cls.cf, '_registered_options'))
A:pandas.tests.test_config.v->self.cf.is_one_of_factory([None, 12])
A:pandas.tests.test_config.validator->self.cf.is_one_of_factory([None, self.cf.is_callable])
A:pandas.tests.test_config.ctx->self.cf.option_context(option_name, context_value)
pandas.tests.test_config.TestConfig(object)
pandas.tests.test_config.TestConfig.setup_class(cls)
pandas.tests.test_config.TestConfig.setup_method(self,method)
pandas.tests.test_config.TestConfig.teardown_method(self,method)
pandas.tests.test_config.TestConfig.test_api(self)
pandas.tests.test_config.TestConfig.test_attribute_access(self)
pandas.tests.test_config.TestConfig.test_callback(self)
pandas.tests.test_config.TestConfig.test_case_insensitive(self)
pandas.tests.test_config.TestConfig.test_config_prefix(self)
pandas.tests.test_config.TestConfig.test_deprecate_option(self)
pandas.tests.test_config.TestConfig.test_describe_option(self)
pandas.tests.test_config.TestConfig.test_get_option(self)
pandas.tests.test_config.TestConfig.test_is_one_of_factory(self)
pandas.tests.test_config.TestConfig.test_option_context_scope(self)
pandas.tests.test_config.TestConfig.test_register_option(self)
pandas.tests.test_config.TestConfig.test_reset_option(self)
pandas.tests.test_config.TestConfig.test_reset_option_all(self)
pandas.tests.test_config.TestConfig.test_set_ContextManager(self)
pandas.tests.test_config.TestConfig.test_set_option(self)
pandas.tests.test_config.TestConfig.test_set_option_empty_args(self)
pandas.tests.test_config.TestConfig.test_set_option_invalid_single_argument_type(self)
pandas.tests.test_config.TestConfig.test_set_option_multiple(self)
pandas.tests.test_config.TestConfig.test_set_option_uneven_args(self)
pandas.tests.test_config.TestConfig.test_validation(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_multilevel.py----------------------------------------
A:pandas.tests.test_multilevel.index->pandas.core.index.MultiIndex.from_tuples(tuples)
A:pandas.tests.test_multilevel.self.frame->DataFrame(np.random.randn(10, 3), index=index, columns=Index(['A', 'B', 'C'], name='exp'))
A:pandas.tests.test_multilevel.self.single_level->MultiIndex(levels=[['foo', 'bar', 'baz', 'qux']], labels=[[0, 1, 2, 3]], names=['first'])
A:pandas.tests.test_multilevel.tuples->lzip(*arrays)
A:pandas.tests.test_multilevel.s->Series(np.arange(4), index=mi)
A:pandas.tests.test_multilevel.self.tdf->pandas.util.testing.makeTimeDataFrame()
A:pandas.tests.test_multilevel.self.ymd->self.tdf.groupby([lambda x: x.year, lambda x: x.month, lambda x: x.day]).sum()
A:pandas.tests.test_multilevel.result->Series(np.arange(4), index=mi).sort_index(na_position='first')
A:pandas.tests.test_multilevel.idx1->idx1.append(idx1).append(idx1)
A:pandas.tests.test_multilevel.idx2->idx2.append(idx2).append(idx2).append(idx2).append(idx2)
A:pandas.tests.test_multilevel.idx3->pandas.period_range('2005', periods=6, freq='A')
A:pandas.tests.test_multilevel.midx_lv2->pandas.core.index.MultiIndex.from_arrays([idx1, idx2])
A:pandas.tests.test_multilevel.midx_lv3->pandas.core.index.MultiIndex.from_arrays([idx1, idx2, idx3])
A:pandas.tests.test_multilevel.tz->pytz.timezone('Asia/Tokyo')
A:pandas.tests.test_multilevel.expected->DataFrame({'date': pd.to_datetime(['20121002', '20121007', '20130130', '20130202', '20130305', '20121002', '20121207', '20130130', '20130202', '20130305', '20130202', '20130305']), 'user_id': [1, 1, 1, 1, 1, 3, 3, 3, 5, 5, 5, 5], 'whole_cost': [1790, np.nan, 280, 259, np.nan, 623, 90, 312, np.nan, 301, 359, 801], 'cost': [12, 15, 10, 24, 39, 1, 0, np.nan, 45, 34, 1, 12]}).set_index(['date', 'user_id']).sort_index().dropna()
A:pandas.tests.test_multilevel.multi->DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD')).set_index(['DATE', 'ID'])
A:pandas.tests.test_multilevel.month_sums->self.ymd.sum(level='month')
A:pandas.tests.test_multilevel.op->getattr(Series, opname)
A:pandas.tests.test_multilevel.broadcasted->self.ymd['A'].groupby(level='month').transform(np.sum)
A:pandas.tests.test_multilevel.unpickled->pandas.util.testing.round_trip_pickle(frame)
A:pandas.tests.test_multilevel.chunk->ymdT.reindex(columns=new_index)
A:pandas.tests.test_multilevel.buf->StringIO()
A:pandas.tests.test_multilevel.df->DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD'))
A:pandas.tests.test_multilevel.lines->repr(df).split('\n')
A:pandas.tests.test_multilevel.expected.index->DataFrame({'date': pd.to_datetime(['20121002', '20121007', '20130130', '20130202', '20130305', '20121002', '20121207', '20130130', '20130202', '20130305', '20130202', '20130305']), 'user_id': [1, 1, 1, 1, 1, 3, 3, 3, 5, 5, 5, 5], 'whole_cost': [1790, np.nan, 280, 259, np.nan, 623, 90, 312, np.nan, 301, 359, 801], 'cost': [12, 15, 10, 24, 39, 1, 0, np.nan, 45, 34, 1, 12]}).set_index(['date', 'user_id']).sort_index().dropna().index.droplevel(0)
A:pandas.tests.test_multilevel.cp->DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD')).copy()
A:pandas.tests.test_multilevel.midx->pandas.core.index.MultiIndex.from_tuples([('f1', 's1'), ('f1', 's2'), ('f2', 's1'), ('f2', 's2'), ('f3', 's1'), ('f3', 's2')])
A:pandas.tests.test_multilevel.f->DataFrame({'a': ['1', '2', '3'], 'b': ['2', '3', '4']})
A:pandas.tests.test_multilevel.columns->pandas.core.index.MultiIndex.from_tuples([('red', i) for i in gen])
A:pandas.tests.test_multilevel.idf->DataFrame({'A' * 30: {('A', 'A0006000', 'nuit'): 'A0006000'}, 'B' * 30: {('A', 'A0006000', 'nuit'): nan}, 'C' * 30: {('A', 'A0006000', 'nuit'): nan}, 'D' * 30: {('A', 'A0006000', 'nuit'): nan}, 'E' * 30: {('A', 'A0006000', 'nuit'): 'A'}, 'F' * 30: {('A', 'A0006000', 'nuit'): nan}}).set_index(['A' * 30, 'C' * 30])
A:pandas.tests.test_multilevel.expected2->pandas.period_range('2013-01-01 09:00', periods=2, freq='H')
A:pandas.tests.test_multilevel.xs->self.frame.xs(('bar', 'two'))
A:pandas.tests.test_multilevel.dates->lrange(20111201, 20111205)
A:pandas.tests.test_multilevel.idx->MultiIndex([['A', 'B', 'C'], ['c', 'b', 'a']], [[0, 1, 2, 0, 1, 2], [0, 2, 1, 1, 0, 2]])
A:pandas.tests.test_multilevel.rs->self.frame.copy()
A:pandas.tests.test_multilevel.expected.columns->DataFrame({'date': pd.to_datetime(['20121002', '20121007', '20130130', '20130202', '20130305', '20121002', '20121207', '20130130', '20130202', '20130305', '20130202', '20130305']), 'user_id': [1, 1, 1, 1, 1, 3, 3, 3, 5, 5, 5, 5], 'whole_cost': [1790, np.nan, 280, 259, np.nan, 623, 90, 312, np.nan, 301, 359, 801], 'cost': [12, 15, 10, 24, 39, 1, 0, np.nan, 45, 34, 1, 12]}).set_index(['date', 'user_id']).sort_index().dropna().columns.droplevel(0)
A:pandas.tests.test_multilevel.frame->DataFrame(np.arange(12).reshape((4, 3)), index=index, columns=columns)
A:pandas.tests.test_multilevel.exp->self.ymd['A'].copy()
A:pandas.tests.test_multilevel.series->Series(np.random.randn(6), index=index)
A:pandas.tests.test_multilevel.reindexed->dft.reindex(columns=[('foo', 'two')])
A:pandas.tests.test_multilevel.df.columns->lrange(3)
A:pandas.tests.test_multilevel.deleveled->self.series.reset_index(drop=True)
A:pandas.tests.test_multilevel.unstacked->self.ymd.unstack('month')
A:pandas.tests.test_multilevel.restacked->restacked.sort_index(level=0).sort_index(level=0)
A:pandas.tests.test_multilevel.unlexsorted->unlexsorted.swaplevel(0, 1).swaplevel(0, 1)
A:pandas.tests.test_multilevel.stacked->Series(np.arange(4), index=mi).sort_index(na_position='first').stack()
A:pandas.tests.test_multilevel.ymd_stacked->self.ymd.stack()
A:pandas.tests.test_multilevel.mi->pandas.core.index.MultiIndex.from_tuples(tuples)
A:pandas.tests.test_multilevel.df.index->numpy.arange(len(df))
A:pandas.tests.test_multilevel.recons->Series(np.arange(4), index=mi).sort_index(na_position='first').stack()
A:pandas.tests.test_multilevel.s_unstacked->Series(np.arange(4), index=mi).unstack(['year', 'month'])
A:pandas.tests.test_multilevel.result1->DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD')).unstack()
A:pandas.tests.test_multilevel.result2->DataFrame(np.arange(12).reshape((4, 3)), index=index, columns=columns).xs(('foo', 'bar'))
A:pandas.tests.test_multilevel.result3->DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD')).unstack(level=0)
A:pandas.tests.test_multilevel.e_idx->pandas.PeriodIndex(['2013-01', '2013-02', '2013-03'], freq='M', name='period1')
A:pandas.tests.test_multilevel.e_cols->pandas.MultiIndex.from_arrays(['A A B B'.split(), e_1])
A:pandas.tests.test_multilevel.e_1->pandas.PeriodIndex(['2014-01', '2014-02', '2014-01', '2014-02'], freq='M', name='period1')
A:pandas.tests.test_multilevel.e_2->pandas.PeriodIndex(['2013-10', '2013-12', '2014-02'], freq='M', name='period2')
A:pandas.tests.test_multilevel.date->pandas.to_datetime(['2013-01-03', '2013-01-04', '2013-01-05'] * 2)
A:pandas.tests.test_multilevel.var1->numpy.random.randint(0, 100, 6)
A:pandas.tests.test_multilevel.unst->DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD')).set_index(['DATE', 'ID']).unstack('ID')
A:pandas.tests.test_multilevel.down->DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD')).set_index(['DATE', 'ID']).unstack('ID').resample('W-THU').mean()
A:pandas.tests.test_multilevel.xp->Series(['x'], index=xp_idx, name='data')
A:pandas.tests.test_multilevel.grouper->Series(np.arange(4), index=mi).index.get_level_values(0)
A:pandas.tests.test_multilevel.grouped->DataFrame(np.arange(12).reshape((4, 3)), index=index, columns=columns).groupby(level=level, axis=axis)
A:pandas.tests.test_multilevel.applied->DataFrame(np.arange(12).reshape((4, 3)), index=index, columns=columns).groupby(level=level, axis=axis).apply(lambda x: x * 2)
A:pandas.tests.test_multilevel.df1->df1.set_index(['a', 'b']).set_index(['a', 'b'])
A:pandas.tests.test_multilevel.joined->a.join(b, how='outer').reindex(self.frame.index)
A:pandas.tests.test_multilevel.swapped->ft.swaplevel('first', 'second', axis=1)
A:pandas.tests.test_multilevel.swapped2->self.frame['A'].swaplevel(0)
A:pandas.tests.test_multilevel.swapped3->self.frame['A'].swaplevel(0, 1)
A:pandas.tests.test_multilevel.swapped4->self.frame['A'].swaplevel('first', 'second')
A:pandas.tests.test_multilevel.back->ft.swaplevel('first', 'second', axis=1).swaplevel()
A:pandas.tests.test_multilevel.back2->ft.swaplevel('first', 'second', axis=1).swaplevel(0)
A:pandas.tests.test_multilevel.back3->ft.swaplevel('first', 'second', axis=1).swaplevel(0, 1)
A:pandas.tests.test_multilevel.back4->ft.swaplevel('first', 'second', axis=1).swaplevel('second', 'first')
A:pandas.tests.test_multilevel.panel->Panel({'ItemA': self.frame, 'ItemB': self.frame * 2})
A:pandas.tests.test_multilevel.expected.major_axis->DataFrame({'date': pd.to_datetime(['20121002', '20121007', '20130130', '20130202', '20130305', '20121002', '20121207', '20130130', '20130202', '20130305', '20130202', '20130305']), 'user_id': [1, 1, 1, 1, 1, 3, 3, 3, 5, 5, 5, 5], 'whole_cost': [1790, np.nan, 280, 259, np.nan, 623, 90, 312, np.nan, 301, 359, 801], 'cost': [12, 15, 10, 24, 39, 1, 0, np.nan, 45, 34, 1, 12]}).set_index(['date', 'user_id']).sort_index().dropna().major_axis.swaplevel(0, 1)
A:pandas.tests.test_multilevel.x->Series(data=[1, 2, 3], index=MultiIndex.from_tuples([('A', 1), ('A', 2), ('B', 3)]))
A:pandas.tests.test_multilevel.y->Series(data=[4, 5, 6], index=MultiIndex.from_tuples([('Z', 1), ('Z', 2), ('B', 3)]))
A:pandas.tests.test_multilevel.exp_index->Series(data=[1, 2, 3], index=MultiIndex.from_tuples([('A', 1), ('A', 2), ('B', 3)])).index.union(y.index)
A:pandas.tests.test_multilevel.expect->self.series.count(level=0)
A:pandas.tests.test_multilevel.leftside->DataFrame(np.arange(12).reshape((4, 3)), index=index, columns=columns).groupby(level=level, axis=axis).agg(aggf)
A:pandas.tests.test_multilevel.rightside->getattr(frame, op)(level=level, axis=axis, skipna=skipna)
A:pandas.tests.test_multilevel.obj->Series([10.0], index=MultiIndex.from_tuples([(2, 3)]))
A:pandas.tests.test_multilevel.ex->DataFrame({'data': [False, False]}, index=['one', 'two'])
A:pandas.tests.test_multilevel.k1->self.ymd.index.get_level_values(0)
A:pandas.tests.test_multilevel.k2->self.ymd.index.get_level_values(1)
A:pandas.tests.test_multilevel.df['Totals', '']->DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD')).sum(1)
A:pandas.tests.test_multilevel.labels->numpy.tile(np.arange(500), 2)
A:pandas.tests.test_multilevel.level->numpy.arange(500)
A:pandas.tests.test_multilevel.grp_size->DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD')).groupby('var1').size()
A:pandas.tests.test_multilevel.df2->DataFrame({'date': pd.to_datetime(['20121002', '20121007', '20130130', '20130202', '20130305', '20121002', '20121207', '20130130', '20130202', '20130305', '20130202', '20130305']), 'user_id': [1, 1, 1, 1, 1, 3, 3, 3, 5, 5, 5, 5], 'whole_cost': [1790, np.nan, 280, 259, np.nan, 623, 90, 312, np.nan, 301, 359, 801], 'cost': [12, 15, 10, 24, 39, 1, 0, np.nan, 45, 34, 1, 12]}).set_index(['date', 'user_id'])
A:pandas.tests.test_multilevel.idxdt->pandas.to_datetime(['201603231400', '201603231500', '201603231600', '201603231600', '201603231700'])
A:pandas.tests.test_multilevel.ts->pandas.Timestamp('201603231600')
A:pandas.tests.test_multilevel.mix->pandas.core.index.MultiIndex.from_tuples([('1a', '2a'), ('1a', '2b'), ('1a', '2c')])
A:pandas.tests.test_multilevel.s1->Series([1, 2, 3, 4], index=MultiIndex.from_tuples([(1, 2), (1, 3), (2, 2), (2, 4)]))
A:pandas.tests.test_multilevel.s2->Series([1, 2, 3, 4], index=MultiIndex.from_tuples([(1, 2), (1, 3), (3, 2), (3, 4)]))
A:pandas.tests.test_multilevel.s3->Series()
A:pandas.tests.test_multilevel.ix->pandas.core.index.MultiIndex.from_tuples([(1, 1)])
A:pandas.tests.test_multilevel.df3->DataFrame({'A' * 30: {('A', 'A0006000', 'nuit'): 'A0006000'}, 'B' * 30: {('A', 'A0006000', 'nuit'): nan}, 'C' * 30: {('A', 'A0006000', 'nuit'): nan}, 'D' * 30: {('A', 'A0006000', 'nuit'): nan}, 'E' * 30: {('A', 'A0006000', 'nuit'): 'A'}, 'F' * 30: {('A', 'A0006000', 'nuit'): nan}})
A:pandas.tests.test_multilevel.l->list(df.index)
A:pandas.tests.test_multilevel.duplicated->MultiIndex([['A', 'B', 'C'], ['c', 'b', 'a']], [[0, 1, 2, 0, 1, 2], [0, 2, 1, 1, 0, 2]]).duplicated(keep=False)
A:pandas.tests.test_multilevel.expected1->pandas.period_range('2011-01-01', periods=3, freq='M')
A:pandas.tests.test_multilevel.date1->datetime.date.today()
A:pandas.tests.test_multilevel.date2->datetime.datetime.today()
A:pandas.tests.test_multilevel.date3->pandas.Timestamp.today()
A:pandas.tests.test_multilevel.expected['idx1']->expected['idx1'].apply(lambda d: pd.Timestamp(d, tz=tz)).apply(lambda d: pd.Timestamp(d, tz=tz))
A:pandas.tests.test_multilevel.expected['idx3']->expected['idx3'].apply(lambda d: pd.Timestamp(d, tz='Europe/Paris')).apply(lambda d: pd.Timestamp(d, tz='Europe/Paris'))
A:pandas.tests.test_multilevel.expected['level_1']->expected['level_1'].apply(lambda d: pd.Timestamp(d, freq='D', tz=tz)).apply(lambda d: pd.Timestamp(d, freq='D', tz=tz))
A:pandas.tests.test_multilevel.idx_col->pandas.DataFrame([[0], [1]], columns=pd.MultiIndex.from_tuples([('C', 'c', 'ii')]))
A:pandas.tests.test_multilevel.m_idx->pandas.MultiIndex.from_tuples([(1, 2), (3, 4), (5, 6), (7, 8)])
A:pandas.tests.test_multilevel.m_df->pandas.Series(data, index=m_idx)
A:pandas.tests.test_multilevel.df_mi->pandas.DataFrame(data, index=mi)
A:pandas.tests.test_multilevel.data->numpy.random.randn(3, 4)
A:pandas.tests.test_multilevel.a_sorted->self.frame['A'].sort_index(level=0)
A:pandas.tests.test_multilevel.sorted_before->dft.sort_index(level=1, axis=1)
A:pandas.tests.test_multilevel.sorted_after->dft.sort_index(level=1, axis=1)
A:pandas.tests.test_multilevel.index_columns->list('abc')
A:pandas.tests.test_multilevel.xp_idx->pandas.core.index.MultiIndex.from_tuples([(0, 1, 0)], names=['a', 'b', 'c'])
A:pandas.tests.test_multilevel.df2_original->DataFrame({'date': pd.to_datetime(['20121002', '20121007', '20130130', '20130202', '20130305', '20121002', '20121207', '20130130', '20130202', '20130305', '20130202', '20130305']), 'user_id': [1, 1, 1, 1, 1, 3, 3, 3, 5, 5, 5, 5], 'whole_cost': [1790, np.nan, 280, 259, np.nan, 623, 90, 312, np.nan, 301, 359, 801], 'cost': [12, 15, 10, 24, 39, 1, 0, np.nan, 45, 34, 1, 12]}).set_index(['date', 'user_id']).copy()
A:pandas.tests.test_multilevel.concatted->pandas.concat([df, df], keys=[0.8, 0.5])
A:pandas.tests.test_multilevel.result.index->Series(np.arange(4), index=mi).sort_index(na_position='first').index._sort_levels_monotonic()
A:pandas.tests.test_multilevel.sorted->DataFrame(np.arange(16).reshape(4, 4), index=mi, columns=list('ABCD')).sort_index()
pandas.tests.test_multilevel.Base(object)
pandas.tests.test_multilevel.Base.setup_method(self,method)
pandas.tests.test_multilevel.TestMultiLevel(Base)
pandas.tests.test_multilevel.TestMultiLevel.test_alignment(self)
pandas.tests.test_multilevel.TestMultiLevel.test_append(self)
pandas.tests.test_multilevel.TestMultiLevel.test_append_index(self)
pandas.tests.test_multilevel.TestMultiLevel.test_assign_index_sequences(self)
pandas.tests.test_multilevel.TestMultiLevel.test_binops_level(self)
pandas.tests.test_multilevel.TestMultiLevel.test_constructor_with_tz(self)
pandas.tests.test_multilevel.TestMultiLevel.test_count(self)
pandas.tests.test_multilevel.TestMultiLevel.test_count_level(self)
pandas.tests.test_multilevel.TestMultiLevel.test_count_level_corner(self)
pandas.tests.test_multilevel.TestMultiLevel.test_count_level_series(self)
pandas.tests.test_multilevel.TestMultiLevel.test_dataframe_constructor(self)
pandas.tests.test_multilevel.TestMultiLevel.test_dataframe_insert_column_all_na(self)
pandas.tests.test_multilevel.TestMultiLevel.test_datetimeindex(self)
pandas.tests.test_multilevel.TestMultiLevel.test_delevel_infer_dtype(self)
pandas.tests.test_multilevel.TestMultiLevel.test_drop_level(self)
pandas.tests.test_multilevel.TestMultiLevel.test_drop_level_nonunique_datetime(self)
pandas.tests.test_multilevel.TestMultiLevel.test_drop_nonunique(self)
pandas.tests.test_multilevel.TestMultiLevel.test_drop_preserve_names(self)
pandas.tests.test_multilevel.TestMultiLevel.test_duplicate_groupby_issues(self)
pandas.tests.test_multilevel.TestMultiLevel.test_duplicate_mi(self)
pandas.tests.test_multilevel.TestMultiLevel.test_duplicated_drop_duplicates(self)
pandas.tests.test_multilevel.TestMultiLevel.test_fancy_slice_partial(self)
pandas.tests.test_multilevel.TestMultiLevel.test_frame_any_all_group(self)
pandas.tests.test_multilevel.TestMultiLevel.test_frame_dict_constructor_empty_series(self)
pandas.tests.test_multilevel.TestMultiLevel.test_frame_getitem_multicolumn_empty_level(self)
pandas.tests.test_multilevel.TestMultiLevel.test_frame_getitem_setitem_boolean(self)
pandas.tests.test_multilevel.TestMultiLevel.test_frame_getitem_setitem_multislice(self)
pandas.tests.test_multilevel.TestMultiLevel.test_frame_getitem_setitem_slice(self)
pandas.tests.test_multilevel.TestMultiLevel.test_frame_getitem_view(self)
pandas.tests.test_multilevel.TestMultiLevel.test_frame_group_ops(self)
pandas.tests.test_multilevel.TestMultiLevel.test_frame_series_agg_multiple_levels(self)
pandas.tests.test_multilevel.TestMultiLevel.test_frame_setitem_ix(self)
pandas.tests.test_multilevel.TestMultiLevel.test_frame_setitem_multi_column(self)
pandas.tests.test_multilevel.TestMultiLevel.test_get_level_number_out_of_bounds(self)
pandas.tests.test_multilevel.TestMultiLevel.test_get_loc_single_level(self)
pandas.tests.test_multilevel.TestMultiLevel.test_getitem_int(self)
pandas.tests.test_multilevel.TestMultiLevel.test_getitem_lowerdim_corner(self)
pandas.tests.test_multilevel.TestMultiLevel.test_getitem_partial(self)
pandas.tests.test_multilevel.TestMultiLevel.test_getitem_partial_column_select(self)
pandas.tests.test_multilevel.TestMultiLevel.test_getitem_setitem_slice_integers(self)
pandas.tests.test_multilevel.TestMultiLevel.test_getitem_setitem_tuple_plus_columns(self)
pandas.tests.test_multilevel.TestMultiLevel.test_getitem_simple(self)
pandas.tests.test_multilevel.TestMultiLevel.test_getitem_toplevel(self)
pandas.tests.test_multilevel.TestMultiLevel.test_getitem_tuple_plus_slice(self)
pandas.tests.test_multilevel.TestMultiLevel.test_groupby_corner(self)
pandas.tests.test_multilevel.TestMultiLevel.test_groupby_level_no_obs(self)
pandas.tests.test_multilevel.TestMultiLevel.test_groupby_multilevel(self)
pandas.tests.test_multilevel.TestMultiLevel.test_groupby_multilevel_with_transform(self)
pandas.tests.test_multilevel.TestMultiLevel.test_groupby_transform(self)
pandas.tests.test_multilevel.TestMultiLevel.test_iloc_mi(self)
pandas.tests.test_multilevel.TestMultiLevel.test_indexing_ambiguity_bug_1678(self)
pandas.tests.test_multilevel.TestMultiLevel.test_indexing_over_hashtable_size_cutoff(self)
pandas.tests.test_multilevel.TestMultiLevel.test_insert_index(self)
pandas.tests.test_multilevel.TestMultiLevel.test_int_series_slicing(self)
pandas.tests.test_multilevel.TestMultiLevel.test_ix_preserve_names(self)
pandas.tests.test_multilevel.TestMultiLevel.test_join(self)
pandas.tests.test_multilevel.TestMultiLevel.test_join_segfault(self)
pandas.tests.test_multilevel.TestMultiLevel.test_level_with_tuples(self)
pandas.tests.test_multilevel.TestMultiLevel.test_mixed_depth_drop(self)
pandas.tests.test_multilevel.TestMultiLevel.test_mixed_depth_get(self)
pandas.tests.test_multilevel.TestMultiLevel.test_mixed_depth_insert(self)
pandas.tests.test_multilevel.TestMultiLevel.test_mixed_depth_pop(self)
pandas.tests.test_multilevel.TestMultiLevel.test_multiindex_na_repr(self)
pandas.tests.test_multilevel.TestMultiLevel.test_multiindex_set_index(self)
pandas.tests.test_multilevel.TestMultiLevel.test_multilevel_consolidate(self)
pandas.tests.test_multilevel.TestMultiLevel.test_nonunique_assignment_1750(self)
pandas.tests.test_multilevel.TestMultiLevel.test_partial_ix_missing(self)
pandas.tests.test_multilevel.TestMultiLevel.test_partial_set(self)
pandas.tests.test_multilevel.TestMultiLevel.test_pickle(self)
pandas.tests.test_multilevel.TestMultiLevel.test_reindex(self)
pandas.tests.test_multilevel.TestMultiLevel.test_reindex_level(self)
pandas.tests.test_multilevel.TestMultiLevel.test_reindex_level_partial_selection(self)
pandas.tests.test_multilevel.TestMultiLevel.test_reindex_preserve_levels(self)
pandas.tests.test_multilevel.TestMultiLevel.test_reorder_levels(self)
pandas.tests.test_multilevel.TestMultiLevel.test_repeat(self)
pandas.tests.test_multilevel.TestMultiLevel.test_repr_name_coincide(self)
pandas.tests.test_multilevel.TestMultiLevel.test_repr_to_string(self)
pandas.tests.test_multilevel.TestMultiLevel.test_reset_index_datetime(self)
pandas.tests.test_multilevel.TestMultiLevel.test_reset_index_multiindex_columns(self)
pandas.tests.test_multilevel.TestMultiLevel.test_reset_index_period(self)
pandas.tests.test_multilevel.TestMultiLevel.test_reset_index_with_drop(self)
pandas.tests.test_multilevel.TestMultiLevel.test_series_constructor(self)
pandas.tests.test_multilevel.TestMultiLevel.test_series_getitem(self)
pandas.tests.test_multilevel.TestMultiLevel.test_series_getitem_corner(self)
pandas.tests.test_multilevel.TestMultiLevel.test_series_group_min_max(self)
pandas.tests.test_multilevel.TestMultiLevel.test_series_setitem(self)
pandas.tests.test_multilevel.TestMultiLevel.test_series_slice_partial(self)
pandas.tests.test_multilevel.TestMultiLevel.test_set_column_scalar_with_ix(self)
pandas.tests.test_multilevel.TestMultiLevel.test_set_index_datetime(self)
pandas.tests.test_multilevel.TestMultiLevel.test_set_index_period(self)
pandas.tests.test_multilevel.TestMultiLevel.test_setitem_change_dtype(self)
pandas.tests.test_multilevel.TestMultiLevel.test_setitem_multiple_partial(self)
pandas.tests.test_multilevel.TestMultiLevel.test_stack(self)
pandas.tests.test_multilevel.TestMultiLevel.test_stack_dropna(self)
pandas.tests.test_multilevel.TestMultiLevel.test_stack_level_name(self)
pandas.tests.test_multilevel.TestMultiLevel.test_stack_mixed_dtype(self)
pandas.tests.test_multilevel.TestMultiLevel.test_stack_multiple_bug(self)
pandas.tests.test_multilevel.TestMultiLevel.test_stack_multiple_out_of_bounds(self)
pandas.tests.test_multilevel.TestMultiLevel.test_stack_names_and_numbers(self)
pandas.tests.test_multilevel.TestMultiLevel.test_stack_unstack_multiple(self)
pandas.tests.test_multilevel.TestMultiLevel.test_stack_unstack_preserve_names(self)
pandas.tests.test_multilevel.TestMultiLevel.test_stat_op_corner(self)
pandas.tests.test_multilevel.TestMultiLevel.test_std_var_pass_ddof(self)
pandas.tests.test_multilevel.TestMultiLevel.test_swaplevel(self)
pandas.tests.test_multilevel.TestMultiLevel.test_swaplevel_panel(self)
pandas.tests.test_multilevel.TestMultiLevel.test_to_html(self)
pandas.tests.test_multilevel.TestMultiLevel.test_tuples_have_na(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unicode_repr_issues(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unicode_repr_level_names(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_bug(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_group_index_overflow(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_level_name(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_multiple_hierarchical(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_multiple_no_empty_columns(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_odd_failure(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_period_frame(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_period_series(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_preserve_types(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_sparse_keyspace(self)
pandas.tests.test_multilevel.TestMultiLevel.test_unstack_unobserved_keys(self)
pandas.tests.test_multilevel.TestMultiLevel.test_xs(self)
pandas.tests.test_multilevel.TestMultiLevel.test_xs_level(self)
pandas.tests.test_multilevel.TestMultiLevel.test_xs_level0(self)
pandas.tests.test_multilevel.TestMultiLevel.test_xs_level_multiple(self)
pandas.tests.test_multilevel.TestMultiLevel.test_xs_level_series(self)
pandas.tests.test_multilevel.TestMultiLevel.test_xs_partial(self)
pandas.tests.test_multilevel.TestSorted(Base)
pandas.tests.test_multilevel.TestSorted.test_frame_getitem_not_sorted(self)
pandas.tests.test_multilevel.TestSorted.test_frame_getitem_not_sorted2(self)
pandas.tests.test_multilevel.TestSorted.test_getitem_multilevel_index_tuple_not_sorted(self)
pandas.tests.test_multilevel.TestSorted.test_getitem_slice_not_sorted(self)
pandas.tests.test_multilevel.TestSorted.test_is_lexsorted(self)
pandas.tests.test_multilevel.TestSorted.test_series_getitem_not_sorted(self)
pandas.tests.test_multilevel.TestSorted.test_sort_index_and_reconstruction(self)
pandas.tests.test_multilevel.TestSorted.test_sort_index_and_reconstruction_doc_example(self)
pandas.tests.test_multilevel.TestSorted.test_sort_index_level(self)
pandas.tests.test_multilevel.TestSorted.test_sort_index_level_by_name(self)
pandas.tests.test_multilevel.TestSorted.test_sort_index_level_large_cardinality(self)
pandas.tests.test_multilevel.TestSorted.test_sort_index_level_mixed(self)
pandas.tests.test_multilevel.TestSorted.test_sort_index_nan(self)
pandas.tests.test_multilevel.TestSorted.test_sort_index_preserve_levels(self)
pandas.tests.test_multilevel.TestSorted.test_sort_index_reorder_on_ops(self)
pandas.tests.test_multilevel.TestSorted.test_sort_non_lexsorted(self)
pandas.tests.test_multilevel.TestSorted.test_sorting_repr_8017(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_take.py----------------------------------------
A:pandas.tests.test_take.fill_error->re.compile('Incompatible type for fill_value')
A:pandas.tests.test_take.data->numpy.random.randint(0, 2, (5, 4, 3)).astype(dtype)
A:pandas.tests.test_take.out->numpy.empty((len(indexer), arr.shape[1]), dtype='float32')
A:pandas.tests.test_take.expected->arr.view(dtype='datetime64[ns]').take(indexer, axis=1)
A:pandas.tests.test_take.result->pandas.core.algorithms.take_nd(arr, indexer, axis=1, fill_value=datetime(2007, 1, 1))
A:pandas.tests.test_take.out0->numpy.empty((4, 4, 3), dtype=dtype)
A:pandas.tests.test_take.out1->numpy.empty((5, 4, 3), dtype=dtype)
A:pandas.tests.test_take.expected0->numpy.random.randint(0, 2, (5, 4, 3)).astype(dtype).take(indexer, axis=0)
A:pandas.tests.test_take.expected1->numpy.random.randint(0, 2, (5, 4, 3)).astype(dtype).take(indexer, axis=1)
A:pandas.tests.test_take.out2->numpy.empty((5, 4, 4), dtype=dtype)
A:pandas.tests.test_take.expected2->numpy.random.randint(0, 2, (5, 4, 3)).astype(dtype).take(indexer, axis=2)
A:pandas.tests.test_take.arr->arr.view(dtype='datetime64[ns]').view(dtype='datetime64[ns]')
A:pandas.tests.test_take.result2->numpy.empty_like(result)
A:pandas.tests.test_take.expected[[2, 4], :]->datetime(2007, 1, 1)
A:pandas.tests.test_take.expected[:, [2, 4]]->datetime(2007, 1, 1)
pandas.tests.test_take.TestTake(object)
pandas.tests.test_take.TestTake.test_1d_bool(self)
pandas.tests.test_take.TestTake.test_1d_fill_nonna(self)
pandas.tests.test_take.TestTake.test_1d_other_dtypes(self)
pandas.tests.test_take.TestTake.test_1d_with_out(self)
pandas.tests.test_take.TestTake.test_2d_bool(self)
pandas.tests.test_take.TestTake.test_2d_datetime64(self)
pandas.tests.test_take.TestTake.test_2d_fill_nonna(self)
pandas.tests.test_take.TestTake.test_2d_float32(self)
pandas.tests.test_take.TestTake.test_2d_other_dtypes(self)
pandas.tests.test_take.TestTake.test_2d_with_out(self)
pandas.tests.test_take.TestTake.test_3d_fill_nonna(self)
pandas.tests.test_take.TestTake.test_3d_with_out(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_nanops.py----------------------------------------
A:pandas.tests.test_nanops.self.arr_float->numpy.random.randn(*self.arr_shape)
A:pandas.tests.test_nanops.self.arr_float1->numpy.random.randn(*self.arr_shape)
A:pandas.tests.test_nanops.self.arr_int->numpy.random.randint(-10, 10, self.arr_shape)
A:pandas.tests.test_nanops.self.arr_str->numpy.abs(self.arr_float).astype('S')
A:pandas.tests.test_nanops.self.arr_utf->numpy.abs(self.arr_float).astype('U')
A:pandas.tests.test_nanops.self.arr_date->numpy.random.randint(0, 20000, self.arr_shape).astype('M8[ns]')
A:pandas.tests.test_nanops.self.arr_tdelta->numpy.random.randint(0, 20000, self.arr_shape).astype('m8[ns]')
A:pandas.tests.test_nanops.self.arr_nan->numpy.tile(np.nan, self.arr_shape)
A:pandas.tests.test_nanops.self.arr_float_nan->numpy.vstack([self.arr_float, self.arr_nan])
A:pandas.tests.test_nanops.self.arr_float1_nan->numpy.vstack([self.arr_float1, self.arr_nan])
A:pandas.tests.test_nanops.self.arr_nan_float1->numpy.vstack([self.arr_nan, self.arr_float1])
A:pandas.tests.test_nanops.self.arr_nan_nan->numpy.vstack([self.arr_nan, self.arr_nan])
A:pandas.tests.test_nanops.self.arr_float_inf->numpy.vstack([self.arr_float, self.arr_inf])
A:pandas.tests.test_nanops.self.arr_float1_inf->numpy.vstack([self.arr_float1, self.arr_inf])
A:pandas.tests.test_nanops.self.arr_inf_float1->numpy.vstack([self.arr_inf, self.arr_float1])
A:pandas.tests.test_nanops.self.arr_inf_inf->numpy.vstack([self.arr_inf, self.arr_inf])
A:pandas.tests.test_nanops.self.arr_nan_inf->numpy.vstack([self.arr_nan, self.arr_inf])
A:pandas.tests.test_nanops.self.arr_float_nan_inf->numpy.vstack([self.arr_float, self.arr_nan, self.arr_inf])
A:pandas.tests.test_nanops.self.arr_nan_float1_inf->numpy.vstack([self.arr_float, self.arr_inf, self.arr_nan])
A:pandas.tests.test_nanops.self.arr_nan_nan_inf->numpy.vstack([self.arr_nan, self.arr_nan, self.arr_inf])
A:pandas.tests.test_nanops.self.arr_obj->numpy.vstack(objs)
A:pandas.tests.test_nanops.self.arr_complex_nan->numpy.vstack([self.arr_complex, self.arr_nan_nanj])
A:pandas.tests.test_nanops.self.arr_complex_nan_infj->numpy.vstack([self.arr_complex, self.arr_nan_infj])
A:pandas.tests.test_nanops.self.arr_inf_1d->self.arr_inf.ravel()
A:pandas.tests.test_nanops.res->func(value, axis)
A:pandas.tests.test_nanops.targ->targfunc(targartempval, axis=axis, **kwargs)
A:pandas.tests.test_nanops.(targ, res)->_coerce_tds(targ, res)
A:pandas.tests.test_nanops.testarval2->numpy.take(testarval, 0, axis=-1)
A:pandas.tests.test_nanops.targarval2->numpy.take(targarval, 0, axis=-1)
A:pandas.tests.test_nanops.targarnanval2->numpy.take(targarnanval, 0, axis=-1)
A:pandas.tests.test_nanops.testarval->getattr(self, testar)
A:pandas.tests.test_nanops.targarval->getattr(self, targar)
A:pandas.tests.test_nanops.targarnanval->getattr(self, targarnan)
A:pandas.tests.test_nanops.targfunc->partial(self._badobj_wrap, func=targfunc, allow_complex=allow_complex)
A:pandas.tests.test_nanops.value->numpy.take(value, 0, axis=-1)
A:pandas.tests.test_nanops.s->Series(range(10), dtype=dtype)
A:pandas.tests.test_nanops.result->Series(766897346 * np.ones(10)).std(ddof=ddof)
A:pandas.tests.test_nanops.np_result->Series(range(10), dtype=dtype).values.mean()
A:pandas.tests.test_nanops.func->partial(self._skew_kurt_wrap, func=func1)
A:pandas.tests.test_nanops.nans->numpy.min(value, axis)
A:pandas.tests.test_nanops.nullnan->isnull(nans)
A:pandas.tests.test_nanops.values->numpy.array([1, 2, 3])
A:pandas.tests.test_nanops.func1->partial(kurtosis, fisher=True)
A:pandas.tests.test_nanops.res00->checkfun(self.arr_float_1d, self.arr_float1_1d, **kwargs)
A:pandas.tests.test_nanops.res01->checkfun(self.arr_float_1d, self.arr_float1_1d, min_periods=len(self.arr_float_1d) - 1, **kwargs)
A:pandas.tests.test_nanops.res10->checkfun(self.arr_float_nan_1d, self.arr_float1_nan_1d, **kwargs)
A:pandas.tests.test_nanops.res11->checkfun(self.arr_float_nan_1d, self.arr_float1_nan_1d, min_periods=len(self.arr_float_1d) - 1, **kwargs)
A:pandas.tests.test_nanops.res20->checkfun(self.arr_nan_1d, self.arr_float1_1d, **kwargs)
A:pandas.tests.test_nanops.res21->checkfun(self.arr_float_1d, self.arr_nan_1d, **kwargs)
A:pandas.tests.test_nanops.res22->checkfun(self.arr_nan_1d, self.arr_nan_1d, **kwargs)
A:pandas.tests.test_nanops.res23->checkfun(self.arr_float_nan_1d, self.arr_nan_float1_1d, **kwargs)
A:pandas.tests.test_nanops.res24->checkfun(self.arr_float_nan_1d, self.arr_nan_float1_1d, min_periods=len(self.arr_float_1d) - 1, **kwargs)
A:pandas.tests.test_nanops.res25->checkfun(self.arr_float_1d, self.arr_float1_1d, min_periods=len(self.arr_float_1d) + 1, **kwargs)
A:pandas.tests.test_nanops.res0->func(value, *args, **kwargs)
A:pandas.tests.test_nanops.targ1->numpy.hstack([targ0, arr_nan])
A:pandas.tests.test_nanops.res1->checkfun(arr_float_nan, arr_float1_nan)
A:pandas.tests.test_nanops.res2->checkfun(arr_float_nan, arr_nan_float1)
A:pandas.tests.test_nanops.arr_float->numpy.take(arr_float, 0, axis=-1)
A:pandas.tests.test_nanops.arr_float1->numpy.take(arr_float1, 0, axis=-1)
A:pandas.tests.test_nanops.arr_nan->numpy.take(arr_nan, 0, axis=-1)
A:pandas.tests.test_nanops.arr_nan_nan->numpy.take(arr_nan_nan, 0, axis=-1)
A:pandas.tests.test_nanops.arr_float_nan->numpy.take(arr_float_nan, 0, axis=-1)
A:pandas.tests.test_nanops.arr_float1_nan->numpy.take(arr_float1_nan, 0, axis=-1)
A:pandas.tests.test_nanops.arr_nan_float1->numpy.take(arr_nan_float1, 0, axis=-1)
A:pandas.tests.test_nanops.targ0->numpy.take(targ0, 0, axis=-1)
A:pandas.tests.test_nanops.val->getattr(self, arr)
A:pandas.tests.test_nanops.o_values->numpy.array([1, 2, 3]).astype(object)
A:pandas.tests.test_nanops.s_values->numpy.array(['foo', 'bar', 'baz'], dtype=object)
A:pandas.tests.test_nanops.self.samples->numpy.sin(np.linspace(0, 1, 200))
A:pandas.tests.test_nanops.actual_variance->pandas.core.nanops.nanvar(samples, axis=1)
A:pandas.tests.test_nanops.actual_std->pandas.core.nanops.nanvar(samples, skipna=False)
A:pandas.tests.test_nanops.samples_unif->self.prng.uniform(size=samples_norm.shape[0])
A:pandas.tests.test_nanops.samples->numpy.hstack([self.samples, np.nan])
A:pandas.tests.test_nanops.variance_0->pandas.core.nanops.nanvar(samples, axis=1, skipna=True, ddof=0).mean()
A:pandas.tests.test_nanops.variance_1->pandas.core.nanops.nanvar(samples, axis=1, skipna=True, ddof=1).mean()
A:pandas.tests.test_nanops.variance_2->pandas.core.nanops.nanvar(samples, axis=1, skipna=True, ddof=2).mean()
A:pandas.tests.test_nanops.samples[:3, :3]->numpy.array([[0.97303362, 0.21869576, 0.55560287], [0.72980153, 0.03109364, 0.99155171], [0.09317602, 0.60078248, 0.15871292]])
A:pandas.tests.test_nanops.variance->numpy.array([[[0.13762259, 0.05619224, 0.11568816], [0.20643388, 0.08428837, 0.17353224], [0.41286776, 0.16857673, 0.34706449]], [[0.09519783, 0.16435395, 0.05082054], [0.14279674, 0.24653093, 0.07623082], [0.28559348, 0.49306186, 0.15246163]]])
A:pandas.tests.test_nanops.var->pandas.core.nanops.nanvar(samples, skipna=True, axis=axis, ddof=ddof)
A:pandas.tests.test_nanops.std->pandas.core.nanops.nanstd(samples, skipna=True, axis=axis, ddof=ddof)
A:pandas.tests.test_nanops.data->Series(766897346 * np.ones(10))
A:pandas.tests.test_nanops.skew->pandas.core.nanops.nanskew(samples, skipna=True)
A:pandas.tests.test_nanops.left_tailed->self.prng.beta(alpha, beta, size=100)
A:pandas.tests.test_nanops.right_tailed->self.prng.beta(alpha, beta, size=100)
A:pandas.tests.test_nanops.kurt->pandas.core.nanops.nankurt(samples, skipna=True)
pandas.tests.test_nanops.TestEnsureNumeric(object)
pandas.tests.test_nanops.TestEnsureNumeric.test_convertable_values(self)
pandas.tests.test_nanops.TestEnsureNumeric.test_ndarray(self)
pandas.tests.test_nanops.TestEnsureNumeric.test_non_convertable_values(self)
pandas.tests.test_nanops.TestEnsureNumeric.test_numeric_values(self)
pandas.tests.test_nanops.TestNankurtFixedValues(object)
pandas.tests.test_nanops.TestNankurtFixedValues.prng(self)
pandas.tests.test_nanops.TestNankurtFixedValues.setup_method(self,method)
pandas.tests.test_nanops.TestNankurtFixedValues.test_all_finite(self)
pandas.tests.test_nanops.TestNankurtFixedValues.test_axis(self)
pandas.tests.test_nanops.TestNankurtFixedValues.test_constant_series(self)
pandas.tests.test_nanops.TestNankurtFixedValues.test_ground_truth(self)
pandas.tests.test_nanops.TestNankurtFixedValues.test_nans(self)
pandas.tests.test_nanops.TestNankurtFixedValues.test_nans_skipna(self)
pandas.tests.test_nanops.TestNanskewFixedValues(object)
pandas.tests.test_nanops.TestNanskewFixedValues.prng(self)
pandas.tests.test_nanops.TestNanskewFixedValues.setup_method(self,method)
pandas.tests.test_nanops.TestNanskewFixedValues.test_all_finite(self)
pandas.tests.test_nanops.TestNanskewFixedValues.test_axis(self)
pandas.tests.test_nanops.TestNanskewFixedValues.test_constant_series(self)
pandas.tests.test_nanops.TestNanskewFixedValues.test_ground_truth(self)
pandas.tests.test_nanops.TestNanskewFixedValues.test_nans(self)
pandas.tests.test_nanops.TestNanskewFixedValues.test_nans_skipna(self)
pandas.tests.test_nanops.TestNanvarFixedValues(object)
pandas.tests.test_nanops.TestNanvarFixedValues.prng(self)
pandas.tests.test_nanops.TestNanvarFixedValues.setup_method(self,method)
pandas.tests.test_nanops.TestNanvarFixedValues.test_ground_truth(self)
pandas.tests.test_nanops.TestNanvarFixedValues.test_nanstd_nans(self)
pandas.tests.test_nanops.TestNanvarFixedValues.test_nanstd_roundoff(self)
pandas.tests.test_nanops.TestNanvarFixedValues.test_nanvar_all_finite(self)
pandas.tests.test_nanops.TestNanvarFixedValues.test_nanvar_axis(self)
pandas.tests.test_nanops.TestNanvarFixedValues.test_nanvar_ddof(self)
pandas.tests.test_nanops.TestNanvarFixedValues.test_nanvar_nans(self)
pandas.tests.test_nanops.TestnanopsDataFrame(object)
pandas.tests.test_nanops.TestnanopsDataFrame._argminmax_wrap(self,value,axis=None,func=None)
pandas.tests.test_nanops.TestnanopsDataFrame._badobj_wrap(self,value,func,allow_complex=True,**kwargs)
pandas.tests.test_nanops.TestnanopsDataFrame._minmax_wrap(self,value,axis=None,func=None)
pandas.tests.test_nanops.TestnanopsDataFrame._skew_kurt_wrap(self,values,axis=None,func=None)
pandas.tests.test_nanops.TestnanopsDataFrame.check_bool(self,func,value,correct,*args,**kwargs)
pandas.tests.test_nanops.TestnanopsDataFrame.check_fun(self,testfunc,targfunc,testar,targar=None,targarnan=None,**kwargs)
pandas.tests.test_nanops.TestnanopsDataFrame.check_fun_data(self,testfunc,targfunc,testarval,targarval,targarnanval,check_dtype=True,**kwargs)
pandas.tests.test_nanops.TestnanopsDataFrame.check_funs(self,testfunc,targfunc,allow_complex=True,allow_all_nan=True,allow_str=True,allow_date=True,allow_tdelta=True,allow_obj=True,**kwargs)
pandas.tests.test_nanops.TestnanopsDataFrame.check_funs_ddof(self,testfunc,targfunc,allow_complex=True,allow_all_nan=True,allow_str=True,allow_date=False,allow_tdelta=False,allow_obj=True)
pandas.tests.test_nanops.TestnanopsDataFrame.check_nancomp(self,checkfun,targ0)
pandas.tests.test_nanops.TestnanopsDataFrame.check_nancorr_nancov_1d(self,checkfun,targ0,targ1,**kwargs)
pandas.tests.test_nanops.TestnanopsDataFrame.check_nancorr_nancov_2d(self,checkfun,targ0,targ1,**kwargs)
pandas.tests.test_nanops.TestnanopsDataFrame.check_results(self,targ,res,axis,check_dtype=True)
pandas.tests.test_nanops.TestnanopsDataFrame.setup_method(self,method)
pandas.tests.test_nanops.TestnanopsDataFrame.teardown_method(self,method)
pandas.tests.test_nanops.TestnanopsDataFrame.test__bn_ok_dtype(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test__has_infs(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test__isfinite(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanall(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanany(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanargmax(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanargmin(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nancorr(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nancorr_kendall(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nancorr_pearson(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nancorr_spearman(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nancov(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_naneq(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nange(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nangt(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nankurt(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanle(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanlt(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanmax(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanmean(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanmean_overflow(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanmedian(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanmin(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanne(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanprod(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nansem(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanskew(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanstd(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nansum(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_nanvar(self)
pandas.tests.test_nanops.TestnanopsDataFrame.test_returned_dtype(self)
pandas.tests.test_nanops.test_use_bottleneck()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_common.py----------------------------------------
A:pandas.tests.test_common.part1->partial(fn)
A:pandas.tests.test_common.part2->partial(part1)
A:pandas.tests.test_common.result->pandas.core.common.map_indices_py(data)
A:pandas.tests.test_common.nfalse->sum(np.array(mask) == 0)
A:pandas.tests.test_common.cols->lmap(int, list(_bin(i, ncols)))
A:pandas.tests.test_common.union->sorted(com.union(a, b))
A:pandas.tests.test_common.inter->sorted(com.intersection(a, b))
A:pandas.tests.test_common.grouped->pandas.core.common.groupby(values, lambda x: x[0])
A:pandas.tests.test_common.state->pandas.core.common._random_state(5)
A:pandas.tests.test_common.state2->numpy.random.RandomState(10)
A:pandas.tests.test_common.matched->pandas.core.common._maybe_match_name([1], Series([2], name='y'))
pandas.tests.test_common.test_all_not_none()
pandas.tests.test_common.test_any_none()
pandas.tests.test_common.test_dict_compat()
pandas.tests.test_common.test_difference()
pandas.tests.test_common.test_get_callable_name()
pandas.tests.test_common.test_groupby()
pandas.tests.test_common.test_intersection()
pandas.tests.test_common.test_iterpairs()
pandas.tests.test_common.test_map_indices_py()
pandas.tests.test_common.test_maybe_match_name()
pandas.tests.test_common.test_mut_exclusive()
pandas.tests.test_common.test_random_state()
pandas.tests.test_common.test_split_ranges()
pandas.tests.test_common.test_union()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_algos.py----------------------------------------
A:pandas.tests.test_algos.values->numpy.array(['foo', 'foo', 'bar', 'bar', 'baz', 'qux'], dtype='O')
A:pandas.tests.test_algos.to_match->numpy.array([0, 1, 2, 2, 0, 1, 3, 0])
A:pandas.tests.test_algos.result->pandas._libs.algos.ensure_platform_int(arr)
A:pandas.tests.test_algos.expected->numpy.lexsort((b, a))
A:pandas.tests.test_algos.s->Series([1, 2 ** 63], dtype=np.uint64)
A:pandas.tests.test_algos.(result, result_labels)->pandas.core.algorithms.safe_sort(values, labels)
A:pandas.tests.test_algos.expected_labels->numpy.array([3, 1, 0, 2, 3, -1, 1], dtype=np.intp)
A:pandas.tests.test_algos.arr->numpy.arange(100, dtype=np.intp)
A:pandas.tests.test_algos.(labels, uniques)->pandas.core.algorithms.factorize(data)
A:pandas.tests.test_algos.exp->Series(['2 min', '1 day'], dtype='timedelta64[ns]')
A:pandas.tests.test_algos.x->Series([v1, v2, v1, v1, v2, v2, v1])
A:pandas.tests.test_algos.v1->pandas.to_timedelta('1 day 1 min')
A:pandas.tests.test_algos.v2->pandas.to_timedelta('1 day')
A:pandas.tests.test_algos.key->numpy.array([0, np.nan, 1], dtype='O')
A:pandas.tests.test_algos.rizer->pandas._libs.hashtable.Factorizer(len(key))
A:pandas.tests.test_algos.ids->pandas._libs.hashtable.Factorizer(len(key)).factorize(key, sort=False, na_sentinel=na_sentinel)
A:pandas.tests.test_algos.x17->numpy.array([complex(i) for i in range(17)], dtype=object)
A:pandas.tests.test_algos.data->numpy.array([2 ** 63, -1, 2 ** 63], dtype=object)
A:pandas.tests.test_algos.exp_labels->numpy.array([0, 1, 0], dtype=np.intp)
A:pandas.tests.test_algos.exp_uniques->numpy.array([2 ** 63, -1], dtype=object)
A:pandas.tests.test_algos.mindex->mindex.repeat(2).repeat(2)
A:pandas.tests.test_algos.dt_index->pandas.to_datetime(['2015-01-03T00:00:00.000000000+0000', '2015-01-01T00:00:00.000000000+0000', '2015-01-01T00:00:00.000000000+0000'])
A:pandas.tests.test_algos.td_index->pandas.to_timedelta([31200, 45678, 31200, 10000, 45678])
A:pandas.tests.test_algos.expected_o->pandas.Categorical(list('bac'), categories=list('abc'), ordered=True)
A:pandas.tests.test_algos.c->Categorical([1, 1, 2, 3, 3])
A:pandas.tests.test_algos.ci->pandas.CategoricalIndex(pd.Categorical(list('baabc'), categories=list('bac')))
A:pandas.tests.test_algos.factor->cut(arr, 4)
A:pandas.tests.test_algos.expected_index->pandas.IntervalIndex.from_breaks(breaks).astype('category')
A:pandas.tests.test_algos.td->Series([np.timedelta64(10000), pd.NaT], dtype='timedelta64[ns]')
A:pandas.tests.test_algos.dt->pandas.to_datetime(['NaT', '2014-01-01'])
A:pandas.tests.test_algos.vc->pandas.core.algorithms.value_counts(s)
A:pandas.tests.test_algos.vc_with_na->pandas.core.algorithms.value_counts(s, dropna=False)
A:pandas.tests.test_algos.exp_dt->Series({Timestamp('2014-01-01 00:00:00'): 1})
A:pandas.tests.test_algos.res->pandas.to_datetime(Series(['2362-01-01', np.nan]), errors='ignore')
A:pandas.tests.test_algos.exp_index->pandas.Index([datetime(3000, 1, 1), datetime(5000, 1, 1), datetime(6000, 1, 1)], dtype=object)
A:pandas.tests.test_algos.expected.index->numpy.lexsort((b, a)).index.as_ordered()
A:pandas.tests.test_algos.s_typed->Series([1, 2 ** 63], dtype=np.uint64).astype(t)
A:pandas.tests.test_algos.keys->numpy.empty(8, dtype=object)
A:pandas.tests.test_algos.exp_first->numpy.array([False, False, True, False, False, True, False, True, True, False])
A:pandas.tests.test_algos.exp_last->numpy.array([True, True, True, True, False, False, False, False, False, False])
A:pandas.tests.test_algos.res_first->Series([1, 2 ** 63], dtype=np.uint64).duplicated(keep='first')
A:pandas.tests.test_algos.res_last->Series([1, 2 ** 63], dtype=np.uint64).duplicated(keep='last')
A:pandas.tests.test_algos.res_false->Series([1, 2 ** 63], dtype=np.uint64).duplicated(keep=False)
A:pandas.tests.test_algos.prng->RandomState(1234)
A:pandas.tests.test_algos.out->numpy.array([[np.nan]], dtype=self.dtype)
A:pandas.tests.test_algos.counts->numpy.array([0], dtype='int64')
A:pandas.tests.test_algos.labels->numpy.zeros(10 ** 6, dtype='int64')
A:pandas.tests.test_algos.expected_out->numpy.vstack([values[:, 0].reshape(5, 2, order='F').std(ddof=1, axis=1) ** 2, np.nan * np.ones(5)]).T.astype(self.dtype)
A:pandas.tests.test_algos.xs->numpy.array([1, 2, 2 ** 63], dtype=np.uint64)
A:pandas.tests.test_algos.m->pandas._libs.hashtable.UInt64HashTable()
A:pandas.tests.test_algos.vals->numpy.array(np.random.randn(1000), dtype=dtype)
A:pandas.tests.test_algos.a->numpy.random.randint(0, 1000, 100).astype(np.int64)
A:pandas.tests.test_algos.left->unique_label_indices(a)
A:pandas.tests.test_algos.old->Index([5, 10])
A:pandas.tests.test_algos.new->Index(lrange(5))
A:pandas.tests.test_algos.filler->pandas._libs.algos.pad_int64(old.values, new.values)
A:pandas.tests.test_algos.expect_filler->numpy.array([-1, -1, -1, -1, -1], dtype=np.int64)
A:pandas.tests.test_algos.b->numpy.random.randint(0, 1000, 100).astype(np.int64)
A:pandas.tests.test_algos.Inf->pandas._libs.algos.Infinity()
A:pandas.tests.test_algos.NegInf->pandas._libs.algos.NegInfinity()
A:pandas.tests.test_algos.idx->Index(['1 day', '1 day', '-1 day', '-1 day 2 min', '2 min', '2 min'], dtype='timedelta64[ns]')
pandas.tests.test_algos.GroupVarTestMixin(object)
pandas.tests.test_algos.GroupVarTestMixin.test_group_var_constant(self)
pandas.tests.test_algos.GroupVarTestMixin.test_group_var_generic_1d(self)
pandas.tests.test_algos.GroupVarTestMixin.test_group_var_generic_1d_flat_labels(self)
pandas.tests.test_algos.GroupVarTestMixin.test_group_var_generic_2d_all_finite(self)
pandas.tests.test_algos.GroupVarTestMixin.test_group_var_generic_2d_some_nan(self)
pandas.tests.test_algos.TestDuplicated(object)
pandas.tests.test_algos.TestDuplicated.test_datetime_likes(self)
pandas.tests.test_algos.TestDuplicated.test_duplicated_with_nas(self)
pandas.tests.test_algos.TestDuplicated.test_numeric_object_likes(self)
pandas.tests.test_algos.TestDuplicated.test_unique_index(self)
pandas.tests.test_algos.TestFactorize(object)
pandas.tests.test_algos.TestFactorize.test_basic(self)
pandas.tests.test_algos.TestFactorize.test_complex_sorting(self)
pandas.tests.test_algos.TestFactorize.test_datelike(self)
pandas.tests.test_algos.TestFactorize.test_factorize_nan(self)
pandas.tests.test_algos.TestFactorize.test_mixed(self)
pandas.tests.test_algos.TestFactorize.test_uint64_factorize(self)
pandas.tests.test_algos.TestGroupVarFloat32(GroupVarTestMixin)
pandas.tests.test_algos.TestGroupVarFloat64(GroupVarTestMixin)
pandas.tests.test_algos.TestGroupVarFloat64.test_group_var_large_inputs(self)
pandas.tests.test_algos.TestHashTable(object)
pandas.tests.test_algos.TestHashTable.test_get_unique(self)
pandas.tests.test_algos.TestHashTable.test_lookup_nan(self)
pandas.tests.test_algos.TestHashTable.test_lookup_overflow(self)
pandas.tests.test_algos.TestHashTable.test_vector_resize(self)
pandas.tests.test_algos.TestIsin(object)
pandas.tests.test_algos.TestIsin.test_basic(self)
pandas.tests.test_algos.TestIsin.test_i8(self)
pandas.tests.test_algos.TestIsin.test_invalid(self)
pandas.tests.test_algos.TestIsin.test_large(self)
pandas.tests.test_algos.TestMatch(object)
pandas.tests.test_algos.TestMatch.test_ints(self)
pandas.tests.test_algos.TestMatch.test_strings(self)
pandas.tests.test_algos.TestMode(object)
pandas.tests.test_algos.TestMode.test_categorical(self)
pandas.tests.test_algos.TestMode.test_datelike_mode(self)
pandas.tests.test_algos.TestMode.test_index(self)
pandas.tests.test_algos.TestMode.test_mixed_dtype(self)
pandas.tests.test_algos.TestMode.test_mode_single(self)
pandas.tests.test_algos.TestMode.test_no_mode(self)
pandas.tests.test_algos.TestMode.test_number_mode(self)
pandas.tests.test_algos.TestMode.test_strobj_mode(self)
pandas.tests.test_algos.TestMode.test_timedelta_mode(self)
pandas.tests.test_algos.TestMode.test_uint64_overflow(self)
pandas.tests.test_algos.TestRank(object)
pandas.tests.test_algos.TestRank.test_basic(self)
pandas.tests.test_algos.TestRank.test_scipy_compat(self)
pandas.tests.test_algos.TestRank.test_too_many_ndims(self)
pandas.tests.test_algos.TestRank.test_uint64_overflow(self)
pandas.tests.test_algos.TestSafeSort(object)
pandas.tests.test_algos.TestSafeSort.test_basic_sort(self)
pandas.tests.test_algos.TestSafeSort.test_exceptions(self)
pandas.tests.test_algos.TestSafeSort.test_labels(self)
pandas.tests.test_algos.TestSafeSort.test_mixed_integer(self)
pandas.tests.test_algos.TestSafeSort.test_unsortable(self)
pandas.tests.test_algos.TestTseriesUtil(object)
pandas.tests.test_algos.TestTseriesUtil.test_backfill(self)
pandas.tests.test_algos.TestTseriesUtil.test_combineFunc(self)
pandas.tests.test_algos.TestTseriesUtil.test_groupby(self)
pandas.tests.test_algos.TestTseriesUtil.test_groupby_withnull(self)
pandas.tests.test_algos.TestTseriesUtil.test_isnull(self)
pandas.tests.test_algos.TestTseriesUtil.test_pad(self)
pandas.tests.test_algos.TestTseriesUtil.test_reindex(self)
pandas.tests.test_algos.TestUnique(object)
pandas.tests.test_algos.TestUnique.test_categorical(self)
pandas.tests.test_algos.TestUnique.test_datetime64_dtype_array_returned(self)
pandas.tests.test_algos.TestUnique.test_datetime64tz_aware(self)
pandas.tests.test_algos.TestUnique.test_ints(self)
pandas.tests.test_algos.TestUnique.test_nan_in_object_array(self)
pandas.tests.test_algos.TestUnique.test_object_refcount_bug(self)
pandas.tests.test_algos.TestUnique.test_objects(self)
pandas.tests.test_algos.TestUnique.test_on_index_object(self)
pandas.tests.test_algos.TestUnique.test_order_of_appearance(self)
pandas.tests.test_algos.TestUnique.test_timedelta64_dtype_array_returned(self)
pandas.tests.test_algos.TestUnique.test_uint64_overflow(self)
pandas.tests.test_algos.TestValueCounts(object)
pandas.tests.test_algos.TestValueCounts.test_categorical(self)
pandas.tests.test_algos.TestValueCounts.test_categorical_nans(self)
pandas.tests.test_algos.TestValueCounts.test_categorical_zeroes(self)
pandas.tests.test_algos.TestValueCounts.test_dropna(self)
pandas.tests.test_algos.TestValueCounts.test_value_counts(self)
pandas.tests.test_algos.TestValueCounts.test_value_counts_bins(self)
pandas.tests.test_algos.TestValueCounts.test_value_counts_datetime_outofbounds(self)
pandas.tests.test_algos.TestValueCounts.test_value_counts_dtypes(self)
pandas.tests.test_algos.TestValueCounts.test_value_counts_nat(self)
pandas.tests.test_algos.TestValueCounts.test_value_counts_normalized(self)
pandas.tests.test_algos.TestValueCounts.test_value_counts_uint64(self)
pandas.tests.test_algos.test_arrmap()
pandas.tests.test_algos.test_ensure_platform_int()
pandas.tests.test_algos.test_groupsort_indexer()
pandas.tests.test_algos.test_infinity_sort()
pandas.tests.test_algos.test_int64_add_overflow()
pandas.tests.test_algos.test_is_lexsorted()
pandas.tests.test_algos.test_pad_backfill_object_segfault()
pandas.tests.test_algos.test_quantile()
pandas.tests.test_algos.test_unique_label_indices()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_expressions.py----------------------------------------
A:pandas.tests.test_expressions._frame->DataFrame(randn(10000, 4), columns=list('ABCD'), dtype='float64')
A:pandas.tests.test_expressions._frame2->DataFrame(randn(100, 4), columns=list('ABCD'), dtype='float64')
A:pandas.tests.test_expressions._mixed->DataFrame({'A': _frame['A'].copy(), 'B': _frame['B'].astype('float32'), 'C': _frame['C'].astype('int64'), 'D': _frame['D'].astype('int32')})
A:pandas.tests.test_expressions._mixed2->DataFrame({'A': _frame2['A'].copy(), 'B': _frame2['B'].astype('float32'), 'C': _frame2['C'].astype('int64'), 'D': _frame2['D'].astype('int32')})
A:pandas.tests.test_expressions._integer->DataFrame(np.random.randint(1, 100, size=(10001, 4)), columns=list('ABCD'), dtype='int64')
A:pandas.tests.test_expressions._integer2->DataFrame(np.random.randint(1, 100, size=(101, 4)), columns=list('ABCD'), dtype='int64')
A:pandas.tests.test_expressions._frame_panel->Panel(dict(ItemA=_frame.copy(), ItemB=_frame.copy() + 3, ItemC=_frame.copy(), ItemD=_frame.copy()))
A:pandas.tests.test_expressions._frame2_panel->Panel(dict(ItemA=_frame2.copy(), ItemB=_frame2.copy() + 3, ItemC=_frame2.copy(), ItemD=_frame2.copy()))
A:pandas.tests.test_expressions._integer_panel->Panel(dict(ItemA=_integer, ItemB=(_integer + 34).astype('int64')))
A:pandas.tests.test_expressions._integer2_panel->Panel(dict(ItemA=_integer2, ItemB=(_integer2 + 34).astype('int64')))
A:pandas.tests.test_expressions._mixed_panel->Panel(dict(ItemA=_mixed, ItemB=_mixed + 3))
A:pandas.tests.test_expressions._mixed2_panel->Panel(dict(ItemA=_mixed2, ItemB=_mixed2 + 3))
A:pandas.tests.test_expressions.self.frame->DataFrame(randn(10000, 4), columns=list('ABCD'), dtype='float64').copy()
A:pandas.tests.test_expressions.self.frame2->DataFrame(randn(100, 4), columns=list('ABCD'), dtype='float64').copy()
A:pandas.tests.test_expressions.self.mixed->DataFrame({'A': _frame['A'].copy(), 'B': _frame['B'].astype('float32'), 'C': _frame['C'].astype('int64'), 'D': _frame['D'].astype('int32')}).copy()
A:pandas.tests.test_expressions.self.mixed2->DataFrame({'A': _frame2['A'].copy(), 'B': _frame2['B'].astype('float32'), 'C': _frame2['C'].astype('int64'), 'D': _frame2['D'].astype('int32')}).copy()
A:pandas.tests.test_expressions.self.integer->DataFrame(np.random.randint(1, 100, size=(10001, 4)), columns=list('ABCD'), dtype='int64').copy()
A:pandas.tests.test_expressions.op->getattr(operator, op)
A:pandas.tests.test_expressions.expected->numpy.where(c, f.values, f.values + 1)
A:pandas.tests.test_expressions.result->pandas.core.computation.expressions.where(c, f.values, f.values + 1)
A:pandas.tests.test_expressions.used_numexpr->pandas.core.computation.expressions.get_test_result()
A:pandas.tests.test_expressions.c->numpy.empty(f.shape, dtype=np.bool_)
A:pandas.tests.test_expressions.df->DataFrame({'a': np.random.rand(n) > 0.5, 'b': np.random.rand(n) > 0.5})
A:pandas.tests.test_expressions.f->getattr(operator, name)
A:pandas.tests.test_expressions.err_msg->re.escape(msg % op)
A:pandas.tests.test_expressions.fe->getattr(operator, sub_funcs[subs[op]])
A:pandas.tests.test_expressions.r->f(df, True)
A:pandas.tests.test_expressions.e->fe(df, True)
pandas.tests.test_expressions.TestExpressions(object)
pandas.tests.test_expressions.TestExpressions.run_arithmetic(self,df,other,assert_func,check_dtype=False,test_flex=True)
pandas.tests.test_expressions.TestExpressions.run_binary(self,df,other,assert_func,test_flex=False,numexpr_ops=set(['gt','lt','ge','le','eq','ne']))
pandas.tests.test_expressions.TestExpressions.run_frame(self,df,other,binary_comp=None,run_binary=True,**kwargs)
pandas.tests.test_expressions.TestExpressions.run_panel(self,panel,other,binary_comp=None,run_binary=True,assert_func=assert_panel_equal,**kwargs)
pandas.tests.test_expressions.TestExpressions.run_series(self,ser,other,binary_comp=None,**kwargs)
pandas.tests.test_expressions.TestExpressions.setup_method(self,method)
pandas.tests.test_expressions.TestExpressions.teardown_method(self,method)
pandas.tests.test_expressions.TestExpressions.test_binary_ops(self)
pandas.tests.test_expressions.TestExpressions.test_bool_ops_raise_on_arithmetic(self)
pandas.tests.test_expressions.TestExpressions.test_bool_ops_warn_on_arithmetic(self)
pandas.tests.test_expressions.TestExpressions.test_boolean_ops(self)
pandas.tests.test_expressions.TestExpressions.test_float_arithemtic(self)
pandas.tests.test_expressions.TestExpressions.test_float_arithemtic_frame(self)
pandas.tests.test_expressions.TestExpressions.test_float_arithmetic_series(self)
pandas.tests.test_expressions.TestExpressions.test_float_panel(self)
pandas.tests.test_expressions.TestExpressions.test_integer_arithmetic(self)
pandas.tests.test_expressions.TestExpressions.test_integer_arithmetic_frame(self)
pandas.tests.test_expressions.TestExpressions.test_integer_arithmetic_series(self)
pandas.tests.test_expressions.TestExpressions.test_integer_panel(self)
pandas.tests.test_expressions.TestExpressions.test_integer_with_zeros(self)
pandas.tests.test_expressions.TestExpressions.test_invalid(self)
pandas.tests.test_expressions.TestExpressions.test_mixed_arithmetic(self)
pandas.tests.test_expressions.TestExpressions.test_mixed_arithmetic_frame(self)
pandas.tests.test_expressions.TestExpressions.test_mixed_arithmetic_series(self)
pandas.tests.test_expressions.TestExpressions.test_mixed_panel(self)
pandas.tests.test_expressions.TestExpressions.test_panel4d(self)
pandas.tests.test_expressions.TestExpressions.test_where(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/test_compat.py----------------------------------------
A:pandas.tests.test_compat.iter_res->list(iter_res)
A:pandas.tests.test_compat.actual1->filter(func, lst)
A:pandas.tests.test_compat.actual2->lfilter(func, lst)
A:pandas.tests.test_compat.lst->list(builtins.range(10))
pandas.tests.test_compat.TestBuiltinIterators(object)
pandas.tests.test_compat.TestBuiltinIterators.check_result(cls,actual,expected,lengths)
pandas.tests.test_compat.TestBuiltinIterators.test_dict_iterators(self)
pandas.tests.test_compat.TestBuiltinIterators.test_filter(self)
pandas.tests.test_compat.TestBuiltinIterators.test_map(self)
pandas.tests.test_compat.TestBuiltinIterators.test_range(self)
pandas.tests.test_compat.TestBuiltinIterators.test_zip(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/tseries/test_holiday.py----------------------------------------
A:pandas.tests.tseries.test_holiday.self.start_date->datetime(2011, 1, 1)
A:pandas.tests.tseries.test_holiday.self.end_date->datetime(2020, 12, 31)
A:pandas.tests.tseries.test_holiday.calendar->get_calendar('TestCalendar')
A:pandas.tests.tseries.test_holiday.holidays->MemorialDay().holidays(start='1971', end='1980').to_pydatetime().tolist()
A:pandas.tests.tseries.test_holiday.holidays_1->pandas.tseries.holiday.USThanksgivingDay.dates(self.start_date.strftime('%Y-%m-%d'), self.end_date.strftime('%Y-%m-%d'))
A:pandas.tests.tseries.test_holiday.holidays_2->pandas.tseries.holiday.USThanksgivingDay.dates(Timestamp(self.start_date), Timestamp(self.end_date))
A:pandas.tests.tseries.test_holiday.jan1->TestCalendar(rules=[Holiday('jan1', year=2015, month=1, day=1)])
A:pandas.tests.tseries.test_holiday.jan2->TestCalendar(rules=[Holiday('jan2', year=2015, month=1, day=2)])
A:pandas.tests.tseries.test_holiday.USFedCal->get_calendar('USFederalHolidayCalendar')
A:pandas.tests.tseries.test_holiday.holidays0->get_calendar('USFederalHolidayCalendar').holidays(datetime(2015, 7, 3), datetime(2015, 7, 3))
A:pandas.tests.tseries.test_holiday.holidays1->get_calendar('USFederalHolidayCalendar').holidays(datetime(2015, 7, 3), datetime(2015, 7, 6))
A:pandas.tests.tseries.test_holiday.holidays2->get_calendar('USFederalHolidayCalendar').holidays(datetime(2015, 7, 3), datetime(2015, 7, 3))
A:pandas.tests.tseries.test_holiday.start_date->datetime(2015, 7, 1)
A:pandas.tests.tseries.test_holiday.end_date->datetime(2015, 7, 1)
A:pandas.tests.tseries.test_holiday.new_years->get_calendar('TestCalendar').rule_from_name('New Years Day')
A:pandas.tests.tseries.test_holiday.july_4th->get_calendar('TestCalendar').rule_from_name('July 4th')
A:pandas.tests.tseries.test_holiday.veterans_day->get_calendar('TestCalendar').rule_from_name('Veterans Day')
A:pandas.tests.tseries.test_holiday.christmas->get_calendar('TestCalendar').rule_from_name('Christmas')
A:pandas.tests.tseries.test_holiday.empty_dates->rule.dates(start_date, end_date)
A:pandas.tests.tseries.test_holiday.holiday_1->Holiday('One-Time', year=2012, month=5, day=28)
A:pandas.tests.tseries.test_holiday.holiday_2->Holiday('Range', month=5, day=28, start_date=datetime(2012, 1, 1), end_date=datetime(2012, 12, 31), offset=DateOffset(weekday=MO(1)))
A:pandas.tests.tseries.test_holiday.class_1->HolidayCalendarFactory('MemorialDay', AbstractHolidayCalendar, USMemorialDay)
A:pandas.tests.tseries.test_holiday.class_2->HolidayCalendarFactory('Thansksgiving', AbstractHolidayCalendar, USThanksgivingDay)
A:pandas.tests.tseries.test_holiday.class_3->HolidayCalendarFactory('Combined', class_1, class_2)
A:pandas.tests.tseries.test_holiday.self.we->datetime(2014, 4, 9)
A:pandas.tests.tseries.test_holiday.self.th->datetime(2014, 4, 10)
A:pandas.tests.tseries.test_holiday.self.fr->datetime(2014, 4, 11)
A:pandas.tests.tseries.test_holiday.self.sa->datetime(2014, 4, 12)
A:pandas.tests.tseries.test_holiday.self.su->datetime(2014, 4, 13)
A:pandas.tests.tseries.test_holiday.self.mo->datetime(2014, 4, 14)
A:pandas.tests.tseries.test_holiday.self.tu->datetime(2014, 4, 15)
pandas.tests.tseries.test_holiday.TestCalendar(object)
pandas.tests.tseries.test_holiday.TestCalendar.setup_method(self,method)
pandas.tests.tseries.test_holiday.TestCalendar.test_calendar(self)
pandas.tests.tseries.test_holiday.TestCalendar.test_calendar_caching(self)
pandas.tests.tseries.test_holiday.TestCalendar.test_calendar_observance_dates(self)
pandas.tests.tseries.test_holiday.TestCalendar.test_rule_from_name(self)
pandas.tests.tseries.test_holiday.TestFederalHolidayCalendar(object)
pandas.tests.tseries.test_holiday.TestFederalHolidayCalendar.test_memorial_day(self)
pandas.tests.tseries.test_holiday.TestFederalHolidayCalendar.test_no_mlk_before_1984(self)
pandas.tests.tseries.test_holiday.TestHoliday(object)
pandas.tests.tseries.test_holiday.TestHoliday.check_results(self,holiday,start,end,expected)
pandas.tests.tseries.test_holiday.TestHoliday.setup_method(self,method)
pandas.tests.tseries.test_holiday.TestHoliday.test_argument_types(self)
pandas.tests.tseries.test_holiday.TestHoliday.test_easter(self)
pandas.tests.tseries.test_holiday.TestHoliday.test_factory(self)
pandas.tests.tseries.test_holiday.TestHoliday.test_get_calendar(self)
pandas.tests.tseries.test_holiday.TestHoliday.test_holidays_within_dates(self)
pandas.tests.tseries.test_holiday.TestHoliday.test_non_observed_holiday(self)
pandas.tests.tseries.test_holiday.TestHoliday.test_special_holidays(self)
pandas.tests.tseries.test_holiday.TestHoliday.test_usmemorialday(self)
pandas.tests.tseries.test_holiday.TestHoliday.test_usthanksgivingday(self)
pandas.tests.tseries.test_holiday.TestHolidayConflictingArguments(object)
pandas.tests.tseries.test_holiday.TestHolidayConflictingArguments.test_both_offset_observance_raises(self)
pandas.tests.tseries.test_holiday.TestObservanceRules(object)
pandas.tests.tseries.test_holiday.TestObservanceRules.setup_method(self,method)
pandas.tests.tseries.test_holiday.TestObservanceRules.test_after_nearest_workday(self)
pandas.tests.tseries.test_holiday.TestObservanceRules.test_before_nearest_workday(self)
pandas.tests.tseries.test_holiday.TestObservanceRules.test_nearest_workday(self)
pandas.tests.tseries.test_holiday.TestObservanceRules.test_next_monday(self)
pandas.tests.tseries.test_holiday.TestObservanceRules.test_next_monday_or_tuesday(self)
pandas.tests.tseries.test_holiday.TestObservanceRules.test_next_workday(self)
pandas.tests.tseries.test_holiday.TestObservanceRules.test_previous_friday(self)
pandas.tests.tseries.test_holiday.TestObservanceRules.test_previous_workday(self)
pandas.tests.tseries.test_holiday.TestObservanceRules.test_sunday_to_monday(self)
pandas.tests.tseries.test_holiday.TestObservanceRules.test_weekend_to_monday(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/tseries/test_offsets.py----------------------------------------
A:pandas.tests.tseries.test_offsets.actual->DateOffset(**{offset_name: offset_n}).onOffset(date)
A:pandas.tests.tseries.test_offsets.valb->datetime(2007, 10, 1)
A:pandas.tests.tseries.test_offsets.valu->_to_m8(valb)
A:pandas.tests.tseries.test_offsets.klass->klass(normalize=normalize)
A:pandas.tests.tseries.test_offsets.offset->DateOffset(**{offset_name: offset_n})
A:pandas.tests.tseries.test_offsets.t->Timestamp('20080101', tz=tz)
A:pandas.tests.tseries.test_offsets.code->get_offset(freqstr)
A:pandas.tests.tseries.test_offsets.offset_s->self._get_offset(offset, normalize=True)
A:pandas.tests.tseries.test_offsets.func->getattr(offset_s, funcname)
A:pandas.tests.tseries.test_offsets.result->pandas.tseries.offsets.Hour(3).apply(offsets.Hour(4))
A:pandas.tests.tseries.test_offsets.expected_localize->Timestamp('2014-07-01 13:00').tz_localize(tz)
A:pandas.tests.tseries.test_offsets.tz_obj->pandas._libs.tslib.maybe_get_tz(tz)
A:pandas.tests.tseries.test_offsets.dt_tz->pandas._libs.tslib._localize_pydatetime(dt, tz_obj)
A:pandas.tests.tseries.test_offsets.sdt->datetime(2011, 1, 1, 9, 0)
A:pandas.tests.tseries.test_offsets.ndt->np_datetime64_compat('2011-01-01 09:00Z')
A:pandas.tests.tseries.test_offsets.expected->Timestamp('2014-07-01 13:00')
A:pandas.tests.tseries.test_offsets.expecteds->self.expecteds.copy()
A:pandas.tests.tseries.test_offsets.expecteds[n]->Timestamp('2011/01/01 09:00')
A:pandas.tests.tseries.test_offsets.expecteds['BusinessHour']->Timestamp('2011-01-03 09:00:00')
A:pandas.tests.tseries.test_offsets.expecteds['CustomBusinessHour']->Timestamp('2011-01-03 09:00:00')
A:pandas.tests.tseries.test_offsets.norm_expected->self.expecteds.copy().copy()
A:pandas.tests.tseries.test_offsets.norm_expected[k]->Timestamp(norm_expected[k].date())
A:pandas.tests.tseries.test_offsets.offset_n->FY5253(weekday=WeekDay.TUE, startingMonth=12, variation='nearest', qtr_with_extra_week=4)
A:pandas.tests.tseries.test_offsets.date->datetime(2012, 3, 31, 5, 30)
A:pandas.tests.tseries.test_offsets.dt->datetime(2007, 1, 1, 3)
A:pandas.tests.tseries.test_offsets.pickle_path->os.path.join(tm.get_data_path(), 'dateoffset_0_15_2.pickle')
A:pandas.tests.tseries.test_offsets.self.d->datetime(2008, 1, 1)
A:pandas.tests.tseries.test_offsets.d->datetime(2014, 7, 1, 0)
A:pandas.tests.tseries.test_offsets.offset1->BMonthEnd()
A:pandas.tests.tseries.test_offsets.offset2->FY5253Quarter(weekday=5, startingMonth=12, variation='last', qtr_with_extra_week=4)
A:pandas.tests.tseries.test_offsets.self.offset->self._object()
A:pandas.tests.tseries.test_offsets.self.offset2->self._object(2)
A:pandas.tests.tseries.test_offsets.xp->datetime(2012, 6, 1)
A:pandas.tests.tseries.test_offsets.st->datetime(2011, 12, 18)
A:pandas.tests.tseries.test_offsets.self.offset1->CustomBusinessHour(weekmask='Tue Wed Thu Fri')
A:pandas.tests.tseries.test_offsets.self.offset3->BusinessHour(n=-1)
A:pandas.tests.tseries.test_offsets.self.offset4->BusinessHour(n=-4)
A:pandas.tests.tseries.test_offsets.self.offset5->BusinessHour(start=dt_time(11, 0), end=dt_time(14, 30))
A:pandas.tests.tseries.test_offsets.self.offset6->BusinessHour(start='20:00', end='05:00')
A:pandas.tests.tseries.test_offsets.self.offset7->BusinessHour(n=-2, start=dt_time(21, 30), end=dt_time(6, 30))
A:pandas.tests.tseries.test_offsets.idx1->DatetimeIndex(start='2014-07-04 15:45', end='2014-07-08 10:45', freq='BH')
A:pandas.tests.tseries.test_offsets.idx2->DatetimeIndex(start='2014-07-04 15:45', periods=12, freq='BH')
A:pandas.tests.tseries.test_offsets.idx3->DatetimeIndex(end='2014-07-08 10:45', periods=12, freq='BH')
A:pandas.tests.tseries.test_offsets.self.nd->np_datetime64_compat('2008-01-01 00:00:00Z')
A:pandas.tests.tseries.test_offsets.tday->CDay(holidays=holidays)
A:pandas.tests.tseries.test_offsets.bday_saudi->CDay(weekmask=weekmask_saudi)
A:pandas.tests.tseries.test_offsets.bday_uae->CDay(weekmask=weekmask_uae)
A:pandas.tests.tseries.test_offsets.bday_egypt->CDay(holidays=holidays, weekmask=weekmask_egypt)
A:pandas.tests.tseries.test_offsets.xp_saudi->datetime(2013, 5, 4)
A:pandas.tests.tseries.test_offsets.xp_uae->datetime(2013, 5, 2)
A:pandas.tests.tseries.test_offsets.xp_egypt->datetime(2013, 5, 5)
A:pandas.tests.tseries.test_offsets.xp2->datetime(2013, 5, 5)
A:pandas.tests.tseries.test_offsets.calendar->USFederalHolidayCalendar()
A:pandas.tests.tseries.test_offsets.unpickled->pandas.util.testing.round_trip_pickle(obj)
A:pandas.tests.tseries.test_offsets.pth->pandas.util.testing.get_data_path()
A:pandas.tests.tseries.test_offsets.cday0_14_1->read_pickle(os.path.join(pth, 'cday-0.14.1.pickle'))
A:pandas.tests.tseries.test_offsets.cday->CDay(holidays=hdays)
A:pandas.tests.tseries.test_offsets.cbm->CBMonthBegin()
A:pandas.tests.tseries.test_offsets.bm_offset->CBMonthBegin(holidays=holidays)
A:pandas.tests.tseries.test_offsets.hcal->USFederalHolidayCalendar()
A:pandas.tests.tseries.test_offsets.freq->CBMonthEnd(calendar=hcal)
A:pandas.tests.tseries.test_offsets.cbmb->CBMonthBegin(calendar=hcal)
A:pandas.tests.tseries.test_offsets.date1->datetime(2011, 1, 4)
A:pandas.tests.tseries.test_offsets.date2->datetime(2011, 1, 11)
A:pandas.tests.tseries.test_offsets.date3->datetime(2011, 1, 18)
A:pandas.tests.tseries.test_offsets.date4->datetime(2011, 1, 25)
A:pandas.tests.tseries.test_offsets.last_sat->datetime(2013, 8, 31)
A:pandas.tests.tseries.test_offsets.next_sat->datetime(2013, 9, 28)
A:pandas.tests.tseries.test_offsets.offset_sat->LastWeekOfMonth(n=1, weekday=5)
A:pandas.tests.tseries.test_offsets.offset_thur->LastWeekOfMonth(n=1, weekday=3)
A:pandas.tests.tseries.test_offsets.last_thurs->datetime(2013, 1, 31)
A:pandas.tests.tseries.test_offsets.next_thurs->datetime(2013, 2, 28)
A:pandas.tests.tseries.test_offsets.offset_sunday->LastWeekOfMonth(n=1, weekday=WeekDay.SUN)
A:pandas.tests.tseries.test_offsets.s->klass([Timestamp('2000-01-01 00:15:00', tz='US/Central'), Timestamp('2000-02-01', tz='US/Central')], name='a')
A:pandas.tests.tseries.test_offsets.exp->pandas.tseries.offsets.Hour(7)
A:pandas.tests.tseries.test_offsets.offset_lom_sat_aug->makeFY5253LastOfMonth(1, startingMonth=8, weekday=WeekDay.SAT)
A:pandas.tests.tseries.test_offsets.offset_lom_sat_sep->makeFY5253LastOfMonth(1, startingMonth=9, weekday=WeekDay.SAT)
A:pandas.tests.tseries.test_offsets.offset_lom_aug_sat->makeFY5253NearestEndMonth(1, startingMonth=8, weekday=WeekDay.SAT)
A:pandas.tests.tseries.test_offsets.offset_lom_aug_sat_1->makeFY5253LastOfMonth(n=1, startingMonth=8, weekday=WeekDay.SAT)
A:pandas.tests.tseries.test_offsets.JNJ->FY5253(n=1, startingMonth=12, weekday=6, variation='nearest')
A:pandas.tests.tseries.test_offsets.offset_lom_aug_thu->makeFY5253NearestEndMonth(1, startingMonth=8, weekday=WeekDay.THU)
A:pandas.tests.tseries.test_offsets.DEC_SAT->FY5253(n=-1, startingMonth=12, weekday=5, variation='nearest')
A:pandas.tests.tseries.test_offsets.offset4->makeFY5253LastOfMonthQuarter(4, startingMonth=9, weekday=WeekDay.SAT, qtr_with_extra_week=4)
A:pandas.tests.tseries.test_offsets.offset_neg1->makeFY5253LastOfMonthQuarter(-1, startingMonth=9, weekday=WeekDay.SAT, qtr_with_extra_week=4)
A:pandas.tests.tseries.test_offsets.offset_neg2->makeFY5253LastOfMonthQuarter(-2, startingMonth=9, weekday=WeekDay.SAT, qtr_with_extra_week=4)
A:pandas.tests.tseries.test_offsets.lomq_aug_sat_4->makeFY5253LastOfMonthQuarter(1, startingMonth=8, weekday=WeekDay.SAT, qtr_with_extra_week=4)
A:pandas.tests.tseries.test_offsets.lomq_sep_sat_4->makeFY5253LastOfMonthQuarter(1, startingMonth=9, weekday=WeekDay.SAT, qtr_with_extra_week=4)
A:pandas.tests.tseries.test_offsets.sat_dec_1->makeFY5253LastOfMonthQuarter(1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=1)
A:pandas.tests.tseries.test_offsets.sat_dec_4->makeFY5253LastOfMonthQuarter(1, startingMonth=12, weekday=WeekDay.SAT, qtr_with_extra_week=4)
A:pandas.tests.tseries.test_offsets.offset_nem_sat_aug_4->makeFY5253NearestEndMonthQuarter(1, startingMonth=8, weekday=WeekDay.SAT, qtr_with_extra_week=4)
A:pandas.tests.tseries.test_offsets.offset_nem_thu_aug_4->makeFY5253NearestEndMonthQuarter(1, startingMonth=8, weekday=WeekDay.THU, qtr_with_extra_week=4)
A:pandas.tests.tseries.test_offsets.actual_apply->DateOffset(**{offset_name: offset_n}).apply(base)
A:pandas.tests.tseries.test_offsets.timestamp->Timestamp(datetime(2010, 1, 1))
A:pandas.tests.tseries.test_offsets.three->kls(3)
A:pandas.tests.tseries.test_offsets.four->kls(4)
A:pandas.tests.tseries.test_offsets.(date, parsed, reso)->parse_time_string(normal)
A:pandas.tests.tseries.test_offsets.(date_lower, parsed_lower, reso_lower)->parse_time_string('4q1984')
A:pandas.tests.tseries.test_offsets.(date_dash, parsed_dash, reso_dash)->parse_time_string(dashed)
A:pandas.tests.tseries.test_offsets.fstr->get_standard_freq('5Q')
A:pandas.tests.tseries.test_offsets.alias->'-'.join([base, v])
A:pandas.tests.tseries.test_offsets.(code, stride)->get_freq_code('3' + k)
A:pandas.tests.tseries.test_offsets.delta->timedelta(3)
A:pandas.tests.tseries.test_offsets.tick->pandas.tseries.offsets._delta_to_tick(delta)
A:pandas.tests.tseries.test_offsets.oset->pandas.tseries.offsets.DateOffset(months=2, days=4)
A:pandas.tests.tseries.test_offsets.off->BDay(1, offset=timedelta(0, -1800))
A:pandas.tests.tseries.test_offsets.ret->set()
A:pandas.tests.tseries.test_offsets.this_subclasses->cls.__subclasses__()
A:pandas.tests.tseries.test_offsets.inst1->WeekOfMonth(weekday=1, week=2)
A:pandas.tests.tseries.test_offsets.inst2->WeekOfMonth(weekday=1, week=2)
A:pandas.tests.tseries.test_offsets.o->ts.utcoffset()
A:pandas.tests.tseries.test_offsets.datepart_offset->getattr(t, offset_name if offset_name != 'weekday' else 'dayofweek')
A:pandas.tests.tseries.test_offsets.offset_string->'-{hrs:02d}00'.format(hrs=-1 * hrs_offset)
A:pandas.tests.tseries.test_offsets.second->Timestamp(test_values[1], tz='US/Eastern')
pandas.tests.tseries.test_offsets.Base(object)
pandas.tests.tseries.test_offsets.Base._get_offset(self,klass,value=1,normalize=False)
pandas.tests.tseries.test_offsets.Base.offset_types(self)
pandas.tests.tseries.test_offsets.Base.test_apply_out_of_range(self)
pandas.tests.tseries.test_offsets.CustomBusinessMonthBase(object)
pandas.tests.tseries.test_offsets.CustomBusinessMonthBase.setup_method(self,method)
pandas.tests.tseries.test_offsets.CustomBusinessMonthBase.testEQ(self)
pandas.tests.tseries.test_offsets.CustomBusinessMonthBase.testMult1(self)
pandas.tests.tseries.test_offsets.CustomBusinessMonthBase.testMult2(self)
pandas.tests.tseries.test_offsets.CustomBusinessMonthBase.testRAdd(self)
pandas.tests.tseries.test_offsets.CustomBusinessMonthBase.testRSub(self)
pandas.tests.tseries.test_offsets.CustomBusinessMonthBase.testSub(self)
pandas.tests.tseries.test_offsets.CustomBusinessMonthBase.test_hash(self)
pandas.tests.tseries.test_offsets.CustomBusinessMonthBase.test_mul(self)
pandas.tests.tseries.test_offsets.CustomBusinessMonthBase.test_offsets_compare_equal(self)
pandas.tests.tseries.test_offsets.CustomBusinessMonthBase.test_roundtrip_pickle(self)
pandas.tests.tseries.test_offsets.TestBMonthBegin(Base)
pandas.tests.tseries.test_offsets.TestBMonthBegin.test_offset(self)
pandas.tests.tseries.test_offsets.TestBMonthBegin.test_offsets_compare_equal(self)
pandas.tests.tseries.test_offsets.TestBMonthBegin.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestBMonthEnd(Base)
pandas.tests.tseries.test_offsets.TestBMonthEnd.test_normalize(self)
pandas.tests.tseries.test_offsets.TestBMonthEnd.test_offset(self)
pandas.tests.tseries.test_offsets.TestBMonthEnd.test_offsets_compare_equal(self)
pandas.tests.tseries.test_offsets.TestBMonthEnd.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestBQuarterBegin(Base)
pandas.tests.tseries.test_offsets.TestBQuarterBegin.test_isAnchored(self)
pandas.tests.tseries.test_offsets.TestBQuarterBegin.test_offset(self)
pandas.tests.tseries.test_offsets.TestBQuarterBegin.test_repr(self)
pandas.tests.tseries.test_offsets.TestBQuarterEnd(Base)
pandas.tests.tseries.test_offsets.TestBQuarterEnd.test_isAnchored(self)
pandas.tests.tseries.test_offsets.TestBQuarterEnd.test_offset(self)
pandas.tests.tseries.test_offsets.TestBQuarterEnd.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestBQuarterEnd.test_repr(self)
pandas.tests.tseries.test_offsets.TestBYearBegin(Base)
pandas.tests.tseries.test_offsets.TestBYearBegin.test_misspecified(self)
pandas.tests.tseries.test_offsets.TestBYearBegin.test_offset(self)
pandas.tests.tseries.test_offsets.TestBYearEnd(Base)
pandas.tests.tseries.test_offsets.TestBYearEnd.test_offset(self)
pandas.tests.tseries.test_offsets.TestBYearEnd.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestBYearEndLagged(Base)
pandas.tests.tseries.test_offsets.TestBYearEndLagged.test_bad_month_fail(self)
pandas.tests.tseries.test_offsets.TestBYearEndLagged.test_offset(self)
pandas.tests.tseries.test_offsets.TestBYearEndLagged.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestBYearEndLagged.test_roll(self)
pandas.tests.tseries.test_offsets.TestBusinessDay(Base)
pandas.tests.tseries.test_offsets.TestBusinessDay.setup_method(self,method)
pandas.tests.tseries.test_offsets.TestBusinessDay.testCall(self)
pandas.tests.tseries.test_offsets.TestBusinessDay.testEQ(self)
pandas.tests.tseries.test_offsets.TestBusinessDay.testMult1(self)
pandas.tests.tseries.test_offsets.TestBusinessDay.testMult2(self)
pandas.tests.tseries.test_offsets.TestBusinessDay.testRAdd(self)
pandas.tests.tseries.test_offsets.TestBusinessDay.testRSub(self)
pandas.tests.tseries.test_offsets.TestBusinessDay.testRollback1(self)
pandas.tests.tseries.test_offsets.TestBusinessDay.testRollback2(self)
pandas.tests.tseries.test_offsets.TestBusinessDay.testRollforward1(self)
pandas.tests.tseries.test_offsets.TestBusinessDay.testRollforward2(self)
pandas.tests.tseries.test_offsets.TestBusinessDay.testSub(self)
pandas.tests.tseries.test_offsets.TestBusinessDay.test_apply(self)
pandas.tests.tseries.test_offsets.TestBusinessDay.test_apply_corner(self)
pandas.tests.tseries.test_offsets.TestBusinessDay.test_apply_large_n(self)
pandas.tests.tseries.test_offsets.TestBusinessDay.test_different_normalize_equals(self)
pandas.tests.tseries.test_offsets.TestBusinessDay.test_hash(self)
pandas.tests.tseries.test_offsets.TestBusinessDay.test_mul(self)
pandas.tests.tseries.test_offsets.TestBusinessDay.test_offsets_compare_equal(self)
pandas.tests.tseries.test_offsets.TestBusinessDay.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestBusinessDay.test_repr(self)
pandas.tests.tseries.test_offsets.TestBusinessDay.test_roll_date_object(self)
pandas.tests.tseries.test_offsets.TestBusinessDay.test_with_offset(self)
pandas.tests.tseries.test_offsets.TestBusinessHour(Base)
pandas.tests.tseries.test_offsets.TestBusinessHour.setup_method(self,method)
pandas.tests.tseries.test_offsets.TestBusinessHour.testCall(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.testEQ(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.testMult1(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.testMult2(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.testRAdd(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.testRSub(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.testRollback1(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.testRollback2(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.testRollforward1(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.testRollforward2(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.testSub(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.test_apply(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.test_apply_large_n(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.test_apply_nanoseconds(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.test_constructor_errors(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.test_datetimeindex(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.test_different_normalize_equals(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.test_hash(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.test_normalize(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.test_offsets_compare_equal(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.test_opening_time(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.test_repr(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.test_roll_date_object(self)
pandas.tests.tseries.test_offsets.TestBusinessHour.test_with_offset(self)
pandas.tests.tseries.test_offsets.TestCaching(object)
pandas.tests.tseries.test_offsets.TestCaching.run_X_index_creation(self,cls)
pandas.tests.tseries.test_offsets.TestCaching.setup_method(self,method)
pandas.tests.tseries.test_offsets.TestCaching.test_all_cacheableoffsets(self)
pandas.tests.tseries.test_offsets.TestCaching.test_bmonth_end_index_creation(self)
pandas.tests.tseries.test_offsets.TestCaching.test_month_end_index_creation(self)
pandas.tests.tseries.test_offsets.TestCaching.test_should_cache_bmonth_end(self)
pandas.tests.tseries.test_offsets.TestCaching.test_should_cache_month_end(self)
pandas.tests.tseries.test_offsets.TestCaching.test_should_cache_week_month(self)
pandas.tests.tseries.test_offsets.TestCaching.test_week_of_month_index_creation(self)
pandas.tests.tseries.test_offsets.TestCommon(Base)
pandas.tests.tseries.test_offsets.TestCommon._check_offsetfunc_works(self,offset,funcname,dt,expected,normalize=False)
pandas.tests.tseries.test_offsets.TestCommon.setup_method(self,method)
pandas.tests.tseries.test_offsets.TestCommon.test_add(self)
pandas.tests.tseries.test_offsets.TestCommon.test_apply(self)
pandas.tests.tseries.test_offsets.TestCommon.test_offset_freqstr(self)
pandas.tests.tseries.test_offsets.TestCommon.test_offset_n(self)
pandas.tests.tseries.test_offsets.TestCommon.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestCommon.test_pickle_v0_15_2(self)
pandas.tests.tseries.test_offsets.TestCommon.test_return_type(self)
pandas.tests.tseries.test_offsets.TestCommon.test_rollback(self)
pandas.tests.tseries.test_offsets.TestCommon.test_rollforward(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay(Base)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.setup_method(self,method)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.testCall(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.testEQ(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.testMult1(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.testMult2(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.testRAdd(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.testRSub(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.testRollback1(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.testRollback2(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.testRollforward1(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.testRollforward2(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.testSub(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.test_apply(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.test_apply_corner(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.test_apply_large_n(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.test_calendar(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.test_different_normalize_equals(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.test_hash(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.test_holidays(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.test_mul(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.test_offsets_compare_equal(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.test_pickle_compat_0_14_1(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.test_repr(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.test_roll_date_object(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.test_roundtrip_pickle(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.test_weekmask(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.test_weekmask_and_holidays(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessDay.test_with_offset(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour(Base)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.setup_method(self,method)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.testCall(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.testEQ(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.testMult1(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.testMult2(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.testRAdd(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.testRSub(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.testRollback1(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.testRollback2(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.testRollforward1(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.testRollforward2(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.testSub(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.test_apply(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.test_apply_nanoseconds(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.test_constructor_errors(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.test_different_normalize_equals(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.test_hash(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.test_normalize(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.test_repr(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.test_roll_date_object(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessHour.test_with_offset(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthBegin(CustomBusinessMonthBase,Base)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthBegin.testCall(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthBegin.testRollback1(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthBegin.testRollback2(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthBegin.testRollforward1(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthBegin.test_apply(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthBegin.test_apply_large_n(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthBegin.test_datetimeindex(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthBegin.test_different_normalize_equals(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthBegin.test_holidays(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthBegin.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthBegin.test_repr(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthBegin.test_roll_date_object(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthEnd(CustomBusinessMonthBase,Base)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthEnd.testCall(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthEnd.testRollback1(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthEnd.testRollback2(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthEnd.testRollforward1(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthEnd.test_apply(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthEnd.test_apply_large_n(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthEnd.test_datetimeindex(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthEnd.test_different_normalize_equals(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthEnd.test_holidays(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthEnd.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthEnd.test_repr(self)
pandas.tests.tseries.test_offsets.TestCustomBusinessMonthEnd.test_roll_date_object(self)
pandas.tests.tseries.test_offsets.TestDST(object)
pandas.tests.tseries.test_offsets.TestDST._make_timestamp(self,string,hrs_offset,tz)
pandas.tests.tseries.test_offsets.TestDST._test_all_offsets(self,n,**kwds)
pandas.tests.tseries.test_offsets.TestDST._test_offset(self,offset_name,offset_n,tstart,expected_utc_offset)
pandas.tests.tseries.test_offsets.TestDST.test_all_offset_classes(self)
pandas.tests.tseries.test_offsets.TestDST.test_fallback_plural(self)
pandas.tests.tseries.test_offsets.TestDST.test_fallback_singular(self)
pandas.tests.tseries.test_offsets.TestDST.test_springforward_plural(self)
pandas.tests.tseries.test_offsets.TestDST.test_springforward_singular(self)
pandas.tests.tseries.test_offsets.TestDateOffset(Base)
pandas.tests.tseries.test_offsets.TestDateOffset.setup_method(self,method)
pandas.tests.tseries.test_offsets.TestDateOffset.test_constructor(self)
pandas.tests.tseries.test_offsets.TestDateOffset.test_copy(self)
pandas.tests.tseries.test_offsets.TestDateOffset.test_eq(self)
pandas.tests.tseries.test_offsets.TestDateOffset.test_mul(self)
pandas.tests.tseries.test_offsets.TestDateOffset.test_repr(self)
pandas.tests.tseries.test_offsets.TestFY5253LastOfMonth(Base)
pandas.tests.tseries.test_offsets.TestFY5253LastOfMonth.test_apply(self)
pandas.tests.tseries.test_offsets.TestFY5253LastOfMonth.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestFY5253LastOfMonthQuarter(Base)
pandas.tests.tseries.test_offsets.TestFY5253LastOfMonthQuarter.test_equality(self)
pandas.tests.tseries.test_offsets.TestFY5253LastOfMonthQuarter.test_get_weeks(self)
pandas.tests.tseries.test_offsets.TestFY5253LastOfMonthQuarter.test_isAnchored(self)
pandas.tests.tseries.test_offsets.TestFY5253LastOfMonthQuarter.test_offset(self)
pandas.tests.tseries.test_offsets.TestFY5253LastOfMonthQuarter.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestFY5253LastOfMonthQuarter.test_year_has_extra_week(self)
pandas.tests.tseries.test_offsets.TestFY5253NearestEndMonth(Base)
pandas.tests.tseries.test_offsets.TestFY5253NearestEndMonth.test_apply(self)
pandas.tests.tseries.test_offsets.TestFY5253NearestEndMonth.test_get_target_month_end(self)
pandas.tests.tseries.test_offsets.TestFY5253NearestEndMonth.test_get_year_end(self)
pandas.tests.tseries.test_offsets.TestFY5253NearestEndMonth.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestFY5253NearestEndMonthQuarter(Base)
pandas.tests.tseries.test_offsets.TestFY5253NearestEndMonthQuarter.test_offset(self)
pandas.tests.tseries.test_offsets.TestFY5253NearestEndMonthQuarter.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestLastWeekOfMonth(Base)
pandas.tests.tseries.test_offsets.TestLastWeekOfMonth.test_constructor(self)
pandas.tests.tseries.test_offsets.TestLastWeekOfMonth.test_offset(self)
pandas.tests.tseries.test_offsets.TestLastWeekOfMonth.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestMonthBegin(Base)
pandas.tests.tseries.test_offsets.TestMonthBegin.test_offset(self)
pandas.tests.tseries.test_offsets.TestMonthEnd(Base)
pandas.tests.tseries.test_offsets.TestMonthEnd.test_day_of_month(self)
pandas.tests.tseries.test_offsets.TestMonthEnd.test_normalize(self)
pandas.tests.tseries.test_offsets.TestMonthEnd.test_offset(self)
pandas.tests.tseries.test_offsets.TestMonthEnd.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestOffsetAliases(object)
pandas.tests.tseries.test_offsets.TestOffsetAliases.setup_method(self,method)
pandas.tests.tseries.test_offsets.TestOffsetAliases.test_alias_equality(self)
pandas.tests.tseries.test_offsets.TestOffsetAliases.test_rule_code(self)
pandas.tests.tseries.test_offsets.TestOffsetNames(object)
pandas.tests.tseries.test_offsets.TestOffsetNames.test_get_offset_name(self)
pandas.tests.tseries.test_offsets.TestParseTimeString(object)
pandas.tests.tseries.test_offsets.TestParseTimeString.test_parse_time_quarter_w_dash(self)
pandas.tests.tseries.test_offsets.TestParseTimeString.test_parse_time_string(self)
pandas.tests.tseries.test_offsets.TestQuarterBegin(Base)
pandas.tests.tseries.test_offsets.TestQuarterBegin.test_isAnchored(self)
pandas.tests.tseries.test_offsets.TestQuarterBegin.test_offset(self)
pandas.tests.tseries.test_offsets.TestQuarterBegin.test_repr(self)
pandas.tests.tseries.test_offsets.TestQuarterEnd(Base)
pandas.tests.tseries.test_offsets.TestQuarterEnd.test_isAnchored(self)
pandas.tests.tseries.test_offsets.TestQuarterEnd.test_offset(self)
pandas.tests.tseries.test_offsets.TestQuarterEnd.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestQuarterEnd.test_repr(self)
pandas.tests.tseries.test_offsets.TestReprNames(object)
pandas.tests.tseries.test_offsets.TestReprNames.test_str_for_named_is_name(self)
pandas.tests.tseries.test_offsets.TestSemiMonthBegin(Base)
pandas.tests.tseries.test_offsets.TestSemiMonthBegin._get_tests(self)
pandas.tests.tseries.test_offsets.TestSemiMonthBegin.test_apply_index(self)
pandas.tests.tseries.test_offsets.TestSemiMonthBegin.test_offset(self)
pandas.tests.tseries.test_offsets.TestSemiMonthBegin.test_offset_whole_year(self)
pandas.tests.tseries.test_offsets.TestSemiMonthBegin.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestSemiMonthBegin.test_vectorized_offset_addition(self)
pandas.tests.tseries.test_offsets.TestSemiMonthEnd(Base)
pandas.tests.tseries.test_offsets.TestSemiMonthEnd._get_tests(self)
pandas.tests.tseries.test_offsets.TestSemiMonthEnd.test_apply_index(self)
pandas.tests.tseries.test_offsets.TestSemiMonthEnd.test_offset(self)
pandas.tests.tseries.test_offsets.TestSemiMonthEnd.test_offset_whole_year(self)
pandas.tests.tseries.test_offsets.TestSemiMonthEnd.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestSemiMonthEnd.test_vectorized_offset_addition(self)
pandas.tests.tseries.test_offsets.TestTicks(object)
pandas.tests.tseries.test_offsets.TestTicks.test_Hour(self)
pandas.tests.tseries.test_offsets.TestTicks.test_Microsecond(self)
pandas.tests.tseries.test_offsets.TestTicks.test_Millisecond(self)
pandas.tests.tseries.test_offsets.TestTicks.test_MillisecondTimestampArithmetic(self)
pandas.tests.tseries.test_offsets.TestTicks.test_Minute(self)
pandas.tests.tseries.test_offsets.TestTicks.test_Nanosecond(self)
pandas.tests.tseries.test_offsets.TestTicks.test_NanosecondGeneric(self)
pandas.tests.tseries.test_offsets.TestTicks.test_Second(self)
pandas.tests.tseries.test_offsets.TestTicks.test_compare_ticks(self)
pandas.tests.tseries.test_offsets.TestTicks.test_tick_equalities(self)
pandas.tests.tseries.test_offsets.TestTicks.test_tick_offset(self)
pandas.tests.tseries.test_offsets.TestTicks.test_tick_operators(self)
pandas.tests.tseries.test_offsets.TestTicks.test_tick_zero(self)
pandas.tests.tseries.test_offsets.TestTicks.test_ticks(self)
pandas.tests.tseries.test_offsets.TestWeek(Base)
pandas.tests.tseries.test_offsets.TestWeek.test_corner(self)
pandas.tests.tseries.test_offsets.TestWeek.test_isAnchored(self)
pandas.tests.tseries.test_offsets.TestWeek.test_offset(self)
pandas.tests.tseries.test_offsets.TestWeek.test_offsets_compare_equal(self)
pandas.tests.tseries.test_offsets.TestWeek.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestWeek.test_repr(self)
pandas.tests.tseries.test_offsets.TestWeekOfMonth(Base)
pandas.tests.tseries.test_offsets.TestWeekOfMonth.test_constructor(self)
pandas.tests.tseries.test_offsets.TestWeekOfMonth.test_offset(self)
pandas.tests.tseries.test_offsets.TestWeekOfMonth.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestWeekOfMonth.test_repr(self)
pandas.tests.tseries.test_offsets.TestYearBegin(Base)
pandas.tests.tseries.test_offsets.TestYearBegin.test_misspecified(self)
pandas.tests.tseries.test_offsets.TestYearBegin.test_offset(self)
pandas.tests.tseries.test_offsets.TestYearBegin.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestYearEnd(Base)
pandas.tests.tseries.test_offsets.TestYearEnd.test_misspecified(self)
pandas.tests.tseries.test_offsets.TestYearEnd.test_offset(self)
pandas.tests.tseries.test_offsets.TestYearEnd.test_onOffset(self)
pandas.tests.tseries.test_offsets.TestYearEndDiffMonth(Base)
pandas.tests.tseries.test_offsets.TestYearEndDiffMonth.test_offset(self)
pandas.tests.tseries.test_offsets.TestYearEndDiffMonth.test_onOffset(self)
pandas.tests.tseries.test_offsets.assertEq(offset,base,expected)
pandas.tests.tseries.test_offsets.assertOnOffset(offset,date,expected)
pandas.tests.tseries.test_offsets.get_all_subclasses(cls)
pandas.tests.tseries.test_offsets.get_utc_offset_hours(ts)
pandas.tests.tseries.test_offsets.makeFY5253LastOfMonth(*args,**kwds)
pandas.tests.tseries.test_offsets.makeFY5253LastOfMonthQuarter(*args,**kwds)
pandas.tests.tseries.test_offsets.makeFY5253NearestEndMonth(*args,**kwds)
pandas.tests.tseries.test_offsets.makeFY5253NearestEndMonthQuarter(*args,**kwds)
pandas.tests.tseries.test_offsets.test_Easter()
pandas.tests.tseries.test_offsets.test_apply_ticks()
pandas.tests.tseries.test_offsets.test_dateoffset_misc()
pandas.tests.tseries.test_offsets.test_delta_to_tick()
pandas.tests.tseries.test_offsets.test_format()
pandas.tests.tseries.test_offsets.test_freq_offsets()
pandas.tests.tseries.test_offsets.test_get_offset()
pandas.tests.tseries.test_offsets.test_get_offset_legacy()
pandas.tests.tseries.test_offsets.test_get_standard_freq()
pandas.tests.tseries.test_offsets.test_monthrange()
pandas.tests.tseries.test_offsets.test_normalize_date()
pandas.tests.tseries.test_offsets.test_ole2datetime()
pandas.tests.tseries.test_offsets.test_quarterly_dont_normalize()
pandas.tests.tseries.test_offsets.test_to_datetime1()
pandas.tests.tseries.test_offsets.test_to_m8()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/tseries/test_timezones.py----------------------------------------
A:pandas.tests.tseries.test_timezones.self.__offset->timedelta(minutes=offset)
A:pandas.tests.tseries.test_timezones.fixed_off->FixedOffset(-420, '-07:00')
A:pandas.tests.tseries.test_timezones.fixed_off_no_name->FixedOffset(-330, None)
A:pandas.tests.tseries.test_timezones.rng->date_range('1/1/2000 9:30', periods=10, freq='D', tz=tzlocal())
A:pandas.tests.tseries.test_timezones.rng_eastern->date_range('1/1/2000 9:30', periods=10, freq='D', tz=tzlocal()).tz_localize(self.tzstr('US/Eastern'))
A:pandas.tests.tseries.test_timezones.converted->idx.tz_convert('US/Eastern').tz_convert(tz)
A:pandas.tests.tseries.test_timezones.stamp->Timestamp('3/11/2012 05:00').tz_localize('utc')
A:pandas.tests.tseries.test_timezones.result->pandas._libs.tslib.tz_convert(np.array([tslib.iNaT], dtype=np.int64), tslib.maybe_get_tz('US/Eastern'), tslib.maybe_get_tz('Asia/Tokyo'))
A:pandas.tests.tseries.test_timezones.expected->DatetimeIndex(['2010-11-01 05:00', '2010-11-01 06:00', '2010-11-01 07:00'], freq='H', tz=tz)
A:pandas.tests.tseries.test_timezones.tzinfo->tzoffset(None, 7200)
A:pandas.tests.tseries.test_timezones.dti->date_range(start='2001-01-01', end='2001-03-01', tz=dateutil.tz.tzlocal())
A:pandas.tests.tseries.test_timezones.dti2->date_range(start='2001-01-01', end='2001-03-01', tz=dateutil.tz.tzlocal()).tz_convert(None)
A:pandas.tests.tseries.test_timezones.dti_utc->DatetimeIndex(start='1/1/2005 05:00', end='1/1/2005 5:00:30.256', freq='L', tz='utc')
A:pandas.tests.tseries.test_timezones.dti3->date_range(start='2001-01-01', end='2001-03-01', tz=dateutil.tz.tzlocal()).tz_convert(None).tz_convert(self.tzstr('US/Pacific'))
A:pandas.tests.tseries.test_timezones.ts->Series(np.random.randn(len(rng)), index=rng)
A:pandas.tests.tseries.test_timezones.ts2->Series(np.random.randn(90), index=rng.take(perm).tz_convert('Europe/Berlin'))
A:pandas.tests.tseries.test_timezones.utc->Timestamp('3/11/2012 22:00', tz='UTC')
A:pandas.tests.tseries.test_timezones.utc_stamp->Timestamp('3/11/2012 05:00', tz='utc')
A:pandas.tests.tseries.test_timezones.off->FixedOffset(420, '+07:00')
A:pandas.tests.tseries.test_timezones.start->Timestamp('3/11/2012 22:00', tz='UTC').localize(_start)
A:pandas.tests.tseries.test_timezones.end->self.localize(eastern, _end)
A:pandas.tests.tseries.test_timezones.rng2->DatetimeIndex(data=rng, tz='US/Eastern')
A:pandas.tests.tseries.test_timezones.rng3->rng3.tz_localize('US/Eastern').tz_localize('US/Eastern')
A:pandas.tests.tseries.test_timezones.idx->idx.tz_convert('US/Eastern').tz_convert('US/Eastern')
A:pandas.tests.tseries.test_timezones.exp->Series([1, 2, 3, 10, 11, 12], index=exp_index)
A:pandas.tests.tseries.test_timezones.tz->pandas._libs.tslib.maybe_get_tz('tzlocal()')
A:pandas.tests.tseries.test_timezones.conv->date_range('1/1/2000 9:30', periods=10, freq='D', tz=tzlocal()).tz_localize('US/Pacific')
A:pandas.tests.tseries.test_timezones.fromdates->DatetimeIndex(strdates, tz=self.tzstr('US/Eastern'))
A:pandas.tests.tseries.test_timezones.dr->date_range('2012-06-02', periods=10, tz=self.tzstr('US/Eastern'))
A:pandas.tests.tseries.test_timezones.central->date_range('2012-06-02', periods=10, tz=self.tzstr('US/Eastern')).tz_convert(tz)
A:pandas.tests.tseries.test_timezones.dr_utc->bdate_range('1/1/2009', '1/1/2010', tz=pytz.utc)
A:pandas.tests.tseries.test_timezones.localized->idx.tz_convert('US/Eastern').tz_convert('US/Eastern').tz_localize(tz)
A:pandas.tests.tseries.test_timezones.di->DatetimeIndex(times)
A:pandas.tests.tseries.test_timezones.localized_old->DatetimeIndex(times).tz_localize(tz, infer_dst=True)
A:pandas.tests.tseries.test_timezones.localized_infer->date_range('2012-06-02', periods=10, tz=self.tzstr('US/Eastern')).tz_localize(tz, ambiguous='infer')
A:pandas.tests.tseries.test_timezones.localized_infer_old->date_range('2012-06-02', periods=10, tz=self.tzstr('US/Eastern')).tz_localize(tz, infer_dst=True)
A:pandas.tests.tseries.test_timezones.is_dst->numpy.array([1] * 10)
A:pandas.tests.tseries.test_timezones.localized_is_dst->date_range('2012-06-02', periods=10, tz=self.tzstr('US/Eastern')).tz_localize(tz, ambiguous=is_dst)
A:pandas.tests.tseries.test_timezones.times->date_range('2013-10-26 23:00', '2013-10-27 01:00', freq='H', tz=tz, ambiguous='infer')
A:pandas.tests.tseries.test_timezones.di_test->DatetimeIndex(times, tz='US/Eastern')
A:pandas.tests.tseries.test_timezones.t->Timestamp('2015-11-01 01:00:03')
A:pandas.tests.tseries.test_timezones.expected0->Series([expected0])
A:pandas.tests.tseries.test_timezones.expected1->Series([expected1])
A:pandas.tests.tseries.test_timezones.s->Series(np.random.randn(len(dr)), index=dr)
A:pandas.tests.tseries.test_timezones.index->date_range(start='2012-12-24 16:00', end='2012-12-24 18:00', freq='H', tz=self.tzstr('Europe/Berlin'))
A:pandas.tests.tseries.test_timezones.eastern->self.tz('US/Eastern')
A:pandas.tests.tseries.test_timezones._start->datetime(2001, 1, 1)
A:pandas.tests.tseries.test_timezones._end->datetime(2009, 1, 1)
A:pandas.tests.tseries.test_timezones.rng_repr->repr(rng_eastern)
A:pandas.tests.tseries.test_timezones.objs->date_range('1/1/2000 9:30', periods=10, freq='D', tz=tzlocal()).astype(object)
A:pandas.tests.tseries.test_timezones.ts_local->Series(np.random.randn(len(rng)), index=rng).tz_localize(self.tzstr('US/Eastern'))
A:pandas.tests.tseries.test_timezones.dates->date_range('2010-11-01 00:00', periods=3, tz=tz, freq='H')
A:pandas.tests.tseries.test_timezones.ex_vals->numpy.array([Timestamp(x).value for x in dates_aware])
A:pandas.tests.tseries.test_timezones.arr->date_range('1/1/2000 9:30', periods=10, freq='D', tz=tzlocal()).to_pydatetime()
A:pandas.tests.tseries.test_timezones.dt->Timestamp('2013-11-03 01:59:59.999999-0400', tz='US/Eastern')
A:pandas.tests.tseries.test_timezones.dr_tz->date_range('2012-06-02', periods=10, tz=self.tzstr('US/Eastern')).tz_localize(self.tzstr('US/Eastern'))
A:pandas.tests.tseries.test_timezones.e->DataFrame({'A': 'foo', 'B': dr_tz}, index=dr)
A:pandas.tests.tseries.test_timezones.tz_expected->DatetimeTZDtype('ns', dr_tz.tzinfo)
A:pandas.tests.tseries.test_timezones.df->DataFrame({'a': ts})
A:pandas.tests.tseries.test_timezones.dr2->DatetimeIndex(list(dr), name='foo')
A:pandas.tests.tseries.test_timezones.roundtripped->DataFrame({'a': ts}).reset_index().set_index('index')
A:pandas.tests.tseries.test_timezones.series->Series(data=values, index=index)
A:pandas.tests.tseries.test_timezones.time_pandas->Timestamp('2012-12-24 17:00', tz=self.tzstr('Europe/Berlin'))
A:pandas.tests.tseries.test_timezones.time_datetime->self.localize(self.tz('Europe/Berlin'), datetime(2012, 12, 24, 17, 0))
A:pandas.tests.tseries.test_timezones.ind->ind.drop(ind[-1]).drop(ind[-1])
A:pandas.tests.tseries.test_timezones.idx1->date_range('2001', periods=5, freq='H', tz='US/Eastern')
A:pandas.tests.tseries.test_timezones.idx2->date_range('2001', periods=5, freq='2H', tz='US/Eastern')
A:pandas.tests.tseries.test_timezones.idx3->date_range(start='2014-01-01', end='2014-03-01', freq='H', tz='UTC')
A:pandas.tests.tseries.test_timezones.idx4->date_range(start='2014-08-01', end='2014-10-31', freq='T', tz='UTC')
A:pandas.tests.tseries.test_timezones.tt->to_datetime(ts)
A:pandas.tests.tseries.test_timezones.ut->to_datetime(ts).tz_convert('US/Eastern')
A:pandas.tests.tseries.test_timezones.offset->int(offset.total_seconds() * 1000000000)
A:pandas.tests.tseries.test_timezones.tz_p->pandas._libs.tslib.maybe_get_tz(tz_name)
A:pandas.tests.tseries.test_timezones.tz_d->pandas._libs.tslib.maybe_get_tz('dateutil/' + tz_name)
A:pandas.tests.tseries.test_timezones.result_pytz->Timestamp('2013-10-27 01:00:00').tz_localize(pytz_zone, ambiguous=1)
A:pandas.tests.tseries.test_timezones.result_dateutil->Timestamp('2013-10-27 01:00:00').tz_localize(dateutil_zone, ambiguous=1)
A:pandas.tests.tseries.test_timezones.left->date_range('1/1/2000 9:30', periods=10, freq='D', tz=tzlocal()).tz_convert('US/Eastern')
A:pandas.tests.tseries.test_timezones.right->date_range('1/1/2000 9:30', periods=10, freq='D', tz=tzlocal()).tz_convert('Europe/Berlin')
A:pandas.tests.tseries.test_timezones.reset->idx.tz_convert('US/Eastern').tz_convert(tz).tz_convert(None)
A:pandas.tests.tseries.test_timezones.exp1->date_range(start='2014-01-01', end='2014-12-31', freq='M')
A:pandas.tests.tseries.test_timezones.exp2->date_range(start='2014-01-01', end='2014-12-31', freq='D')
A:pandas.tests.tseries.test_timezones.exp3->date_range(start='2014-01-01', end='2014-03-01', freq='H')
A:pandas.tests.tseries.test_timezones.exp4->date_range(start='2014-08-01', end='2014-10-31', freq='T')
A:pandas.tests.tseries.test_timezones.ts_utc->Series(np.random.randn(len(rng)), index=rng).tz_localize('utc')
A:pandas.tests.tseries.test_timezones.test1->DataFrame(np.zeros((6, 3)), index=date_range('2012-11-15 00:00:00', periods=6, freq='100L', tz='US/Central'))
A:pandas.tests.tseries.test_timezones.test2->DataFrame(np.zeros((3, 3)), index=date_range('2012-11-15 00:00:00', periods=3, freq='250L', tz='US/Central'), columns=lrange(3, 6))
A:pandas.tests.tseries.test_timezones.ex_index->DataFrame(np.zeros((6, 3)), index=date_range('2012-11-15 00:00:00', periods=6, freq='100L', tz='US/Central')).index.union(test2.index)
A:pandas.tests.tseries.test_timezones.df1->DataFrame(np.random.randn(len(idx1), 3), idx1)
A:pandas.tests.tseries.test_timezones.df2->DataFrame(np.random.randn(len(idx2), 3), idx2)
A:pandas.tests.tseries.test_timezones.(new1, new2)->DataFrame(np.random.randn(len(idx1), 3), idx1).align(df1_central[0], axis=0)
A:pandas.tests.tseries.test_timezones.df1_central->DataFrame(np.random.randn(len(idx1), 3), idx1).tz_convert('US/Central')
A:pandas.tests.tseries.test_timezones.rng1->date_range('1/1/2011 01:00', periods=1, freq='H')
A:pandas.tests.tseries.test_timezones.ts1->Series(np.random.randn(90), index=rng.take(perm).tz_convert('US/Eastern'))
A:pandas.tests.tseries.test_timezones.ts_result->Series(np.random.randn(90), index=rng.take(perm).tz_convert('US/Eastern')).append(ts2)
A:pandas.tests.tseries.test_timezones.exp_index->DatetimeIndex(['2016-01-01 01:00', '2016-01-01 02:00', '2016-01-01 03:00', '2016-08-01 01:00', '2016-08-01 02:00', '2016-08-01 03:00'], tz='US/Eastern')
A:pandas.tests.tseries.test_timezones.ts_moscow->Series(np.random.randn(len(rng)), index=rng).tz_convert('Europe/Moscow')
A:pandas.tests.tseries.test_timezones.df_moscow->DataFrame({'a': ts}).tz_convert('Europe/Moscow')
A:pandas.tests.tseries.test_timezones.uts1->Series(np.random.randn(90), index=rng.take(perm).tz_convert('US/Eastern')).tz_convert('utc')
A:pandas.tests.tseries.test_timezones.uts2->Series(np.random.randn(90), index=rng.take(perm).tz_convert('Europe/Berlin')).tz_convert('utc')
A:pandas.tests.tseries.test_timezones.utc_range->date_range('1/1/2000', periods=20, tz='UTC')
A:pandas.tests.tseries.test_timezones.eastern_range->date_range('1/1/2000', periods=20, tz='UTC').tz_convert('US/Eastern')
A:pandas.tests.tseries.test_timezones.berlin_range->date_range('1/1/2000', periods=20, tz='UTC').tz_convert('Europe/Berlin')
A:pandas.tests.tseries.test_timezones.result_single->numpy.vectorize(f)(utc_didx.asi8)
A:pandas.tests.tseries.test_timezones.tz_didx->date_range('2000-01-01', '2100-01-01', freq='A', tz=tz)
A:pandas.tests.tseries.test_timezones.utc_didx->date_range('2000-01-01', '2100-01-01', freq='A')
pandas.tests.tseries.test_timezones.FixedOffset(self,offset,name)
pandas.tests.tseries.test_timezones.FixedOffset.__init__(self,offset,name)
pandas.tests.tseries.test_timezones.FixedOffset.dst(self,dt)
pandas.tests.tseries.test_timezones.FixedOffset.tzname(self,dt)
pandas.tests.tseries.test_timezones.FixedOffset.utcoffset(self,dt)
pandas.tests.tseries.test_timezones.TestTimeZoneCacheKey(object)
pandas.tests.tseries.test_timezones.TestTimeZoneCacheKey.test_cache_keys_are_distinct_for_pytz_vs_dateutil(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportDateutil(TestTimeZoneSupportPytz)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportDateutil.cmptz(self,tz1,tz2)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportDateutil.localize(self,tz,x)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportDateutil.setup_method(self,method)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportDateutil.test_tslib_tz_convert_dst(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportDateutil.test_tslib_tz_convert_trans_pos_plus_1__bug(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportDateutil.test_tz_convert_hour_overflow_dst(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportDateutil.test_tz_convert_hour_overflow_dst_timestamps(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportDateutil.test_tz_convert_tzlocal(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportDateutil.test_tz_localize_tzlocal(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportDateutil.test_tzlocal(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportDateutil.test_utc_with_system_utc(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportDateutil.tz(self,tz)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportDateutil.tzstr(self,tz)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz(object)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.cmptz(self,tz1,tz2)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.localize(self,tz,x)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.setup_method(self,method)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_ambiguous_bool(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_ambiguous_flags(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_ambiguous_infer(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_ambiguous_nat(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_astimezone(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_convert_datetime_list(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_convert_tz_aware_datetime_datetime(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_create_with_fixed_tz(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_create_with_fixedoffset_noname(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_create_with_tz(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_date_range_localize(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_date_range_span_dst_transition(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_datetimeindex_tz(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_datetimeindex_tz_nat(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_dateutil_tzoffset_support(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_field_access_localize(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_fixed_offset(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_fixedtz_topydatetime(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_frame_from_records_utc(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_frame_no_datetime64_dtype(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_frame_reset_index(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_getitem_pydatetime_tz(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_hongkong_tz_convert(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_index_astype_asobject_tzinfos(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_index_drop_dont_lose_tz(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_index_with_timezone_repr(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_infer_tz(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_localize_utc_conversion(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_localize_utc_conversion_explicit(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_localized_at_time_between_time(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_nonexistent_raise_coerce(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_pass_dates_localize_to_utc(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_shift_localized(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_static_tzinfo(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_string_index_alias_tz_aware(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_take_dont_lose_meta(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_timedelta_push_over_dst_boundary(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_timedelta_push_over_dst_boundary_explicit(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_timestamp_constructed_by_date_and_tz(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_timestamp_constructed_by_date_and_tz_explicit(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_timestamp_constructor_near_dst_boundary(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_timestamp_to_datetime_tzoffset(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_timestamp_tz_convert(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_timestamp_tz_localize(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_timestamp_tz_localize_explicit(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_to_datetime_tzlocal(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_to_datetime_utc(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_tz_aware_asfreq(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_tz_convert_unsorted(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_tz_localize(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_tz_localize_dti(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_tz_localize_empty_series(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_tz_string(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_tzaware_datetime_to_index(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_utc_box_timestamp_and_localize(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_utc_to_local_no_modify(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_utc_to_local_no_modify_explicit(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_with_tz(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.test_with_tz_ambiguous_times(self)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.tz(self,tz)
pandas.tests.tseries.test_timezones.TestTimeZoneSupportPytz.tzstr(self,tz)
pandas.tests.tseries.test_timezones.TestTimeZones(object)
pandas.tests.tseries.test_timezones.TestTimeZones.setup_method(self,method)
pandas.tests.tseries.test_timezones.TestTimeZones.test_align_aware(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_ambiguous_compat(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_append_aware(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_append_aware_naive(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_append_dst(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_arith_utc_convert(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_datetimeindex_tz(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_equal_join_ensure_utc(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_index_equals_with_tz(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_intersection(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_join_aware(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_join_utc_convert(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_nat(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_normalize_tz(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_normalize_tz_local(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_replace(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_series_frame_tz_convert(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_series_frame_tz_localize(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_timestamp_equality_different_timezones(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_tz_convert_roundtrip(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_tz_localize_naive(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_tz_localize_roundtrip(self)
pandas.tests.tseries.test_timezones.TestTimeZones.test_tzaware_offset(self)
pandas.tests.tseries.test_timezones.TestTslib(object)
pandas.tests.tseries.test_timezones.TestTslib.test_tslib_tz_convert(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/tseries/test_frequencies.py----------------------------------------
A:pandas.tests.tseries.test_frequencies.result->pandas.tseries.frequencies.infer_freq(Index(['2004-01', '2004-02', '2004-03', '2004-04']))
A:pandas.tests.tseries.test_frequencies.expected->pandas.tseries.frequencies.infer_freq(['2004-01', '2004-02', '2004-03', '2004-04'])
A:pandas.tests.tseries.test_frequencies.td->Timedelta(microseconds=0)
A:pandas.tests.tseries.test_frequencies.td1->Timedelta(hours=1)
A:pandas.tests.tseries.test_frequencies.result1->pandas.tseries.frequencies.to_offset('SM')
A:pandas.tests.tseries.test_frequencies.result2->pandas.tseries.frequencies.to_offset('SM-15')
A:pandas.tests.tseries.test_frequencies.left->pandas.tseries.frequencies.get_offset('ms')
A:pandas.tests.tseries.test_frequencies.right->pandas.tseries.frequencies.get_offset('MS')
A:pandas.tests.tseries.test_frequencies.rule->pandas.tseries.frequencies.to_offset('10us')
A:pandas.tests.tseries.test_frequencies.index->date_range('2013-11-03', periods=5, freq='3H').tz_localize('America/Chicago')
A:pandas.tests.tseries.test_frequencies.dates->to_datetime(['1/1/2000', '1/2/2000', '1/3/2000'])
A:pandas.tests.tseries.test_frequencies.b->Timestamp(datetime.now())
A:pandas.tests.tseries.test_frequencies.rng->_dti(['1/31/2000', '1/31/2001', '1/31/2002'])
A:pandas.tests.tseries.test_frequencies.freq->freq.upper().upper()
A:pandas.tests.tseries.test_frequencies.gen->date_range(start, periods=5, freq=freq)
A:pandas.tests.tseries.test_frequencies.inf_freq->pandas.tseries.frequencies.infer_freq(index)
A:pandas.tests.tseries.test_frequencies.idx->DatetimeIndex(['2014-07-04 09:00', '2014-07-04 10:00', '2014-07-04 11:00', '2014-07-04 12:00', '2014-07-04 13:00', '2014-07-04 14:00', '2014-07-04 15:00', '2014-07-04 16:00', '2014-07-07 09:00', '2014-07-07 10:00', '2014-07-07 11:00', '2014-07-07 12:00', '2014-07-07 13:00', '2014-07-07 14:00', '2014-07-07 15:00', '2014-07-07 16:00', '2014-07-08 09:00', '2014-07-08 10:00', '2014-07-08 11:00', '2014-07-08 12:00', '2014-07-08 13:00', '2014-07-08 14:00', '2014-07-08 15:00', '2014-07-08 16:00'])
A:pandas.tests.tseries.test_frequencies.vals->_dti(['1/31/2000', '1/31/2001', '1/31/2002']).to_pydatetime()
A:pandas.tests.tseries.test_frequencies.s->Series(date_range('20130101', '20130110'))
A:pandas.tests.tseries.test_frequencies.inferred->pandas.tseries.frequencies.infer_freq(s)
pandas.tests.tseries.test_frequencies.TestFrequencyCode(object)
pandas.tests.tseries.test_frequencies.TestFrequencyCode.test_freq_code(self)
pandas.tests.tseries.test_frequencies.TestFrequencyCode.test_freq_group(self)
pandas.tests.tseries.test_frequencies.TestFrequencyCode.test_freq_to_reso(self)
pandas.tests.tseries.test_frequencies.TestFrequencyCode.test_get_freq_code(self)
pandas.tests.tseries.test_frequencies.TestFrequencyCode.test_get_to_timestamp_base(self)
pandas.tests.tseries.test_frequencies.TestFrequencyCode.test_resolution_bumping(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference(object)
pandas.tests.tseries.test_frequencies.TestFrequencyInference._check_generated_range(self,start,freq)
pandas.tests.tseries.test_frequencies.TestFrequencyInference._check_tick(self,base_delta,code)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_annual(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_annual_ambiguous(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_business_annual(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_business_daily(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_business_monthly(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_business_start_monthly(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_day(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_day_corner(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_fifth_week_of_month(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_fifth_week_of_month_infer(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_hour(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_infer_freq(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_infer_freq_businesshour(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_infer_freq_tz(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_infer_freq_tz_transition(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_invalid_index_types(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_legacy_offset_warnings(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_microsecond(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_millisecond(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_minute(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_monthly(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_monthly_ambiguous(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_nanosecond(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_non_datetimeindex(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_non_datetimeindex2(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_not_monotonic(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_quarterly(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_raise_if_period_index(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_raise_if_too_few(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_second(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_series(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_string_datetimelike_compat(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_week_of_month(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_week_of_month_fake(self)
pandas.tests.tseries.test_frequencies.TestFrequencyInference.test_weekly(self)
pandas.tests.tseries.test_frequencies.TestToOffset(object)
pandas.tests.tseries.test_frequencies.TestToOffset.test_anchored_shortcuts(self)
pandas.tests.tseries.test_frequencies.TestToOffset.test_to_offset_invalid(self)
pandas.tests.tseries.test_frequencies.TestToOffset.test_to_offset_leading_zero(self)
pandas.tests.tseries.test_frequencies.TestToOffset.test_to_offset_multiple(self)
pandas.tests.tseries.test_frequencies.TestToOffset.test_to_offset_negative(self)
pandas.tests.tseries.test_frequencies.TestToOffset.test_to_offset_pd_timedelta(self)
pandas.tests.tseries.test_frequencies.test_get_rule_month()
pandas.tests.tseries.test_frequencies.test_is_superperiod_subperiod()
pandas.tests.tseries.test_frequencies.test_ms_vs_MS()
pandas.tests.tseries.test_frequencies.test_period_str_to_code()
pandas.tests.tseries.test_frequencies.test_rule_aliases()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/tseries/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_join.py----------------------------------------
A:pandas.tests.frame.test_join.result->bf.join(af, how='right')
A:pandas.tests.frame.test_join.joined->df1.join(df2, lsuffix='_df1', rsuffix='_df2')
A:pandas.tests.frame.test_join.expected_columns->Index(['A', 'B', 'C', 'D'])
A:pandas.tests.frame.test_join.expected->df1.loc[:, ['B', 'C']].add_suffix('_df1').join(df2_suf).join(no_overlap)
A:pandas.tests.frame.test_join.df->frame.copy()
A:pandas.tests.frame.test_join.s->frame.copy().pop(frame.columns[-1])
A:pandas.tests.frame.test_join.df1_suf->df1.loc[:, ['B', 'C']].add_suffix('_df1')
A:pandas.tests.frame.test_join.df2_suf->df2.loc[:, ['B', 'C']].add_suffix('_df2')
pandas.tests.frame.test_join.frame()
pandas.tests.frame.test_join.left()
pandas.tests.frame.test_join.right()
pandas.tests.frame.test_join.test_join(left,right,how,sort,expected)
pandas.tests.frame.test_join.test_join_index(frame)
pandas.tests.frame.test_join.test_join_index_more(frame)
pandas.tests.frame.test_join.test_join_index_series(frame)
pandas.tests.frame.test_join.test_join_overlap(frame)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_operators.py----------------------------------------
A:pandas.tests.frame.test_operators.garbage->numpy.random.random(4)
A:pandas.tests.frame.test_operators.colSeries->Series(garbage, index=np.array(self.frame.columns))
A:pandas.tests.frame.test_operators.df->pandas.DataFrame(np.random.randn(3, 3), index=index, columns=columns)
A:pandas.tests.frame.test_operators.filled->pandas.DataFrame(np.random.randn(3, 3), index=index, columns=columns).fillna(np.nan)
A:pandas.tests.frame.test_operators.result->func(df1, df2)
A:pandas.tests.frame.test_operators.expected->DataFrame({'A': arr.copy() + 1.5, 'B': 'foo'})
A:pandas.tests.frame.test_operators.df['dates']->date_range('20010101', periods=len(df))
A:pandas.tests.frame.test_operators.df2->pandas.util.testing.makeTimeDataFrame()
A:pandas.tests.frame.test_operators.left_f->getattr(operator, left)
A:pandas.tests.frame.test_operators.right_f->getattr(operator, right)
A:pandas.tests.frame.test_operators.p->DataFrame(np.random.randn(10, 5))
A:pandas.tests.frame.test_operators.result2->X_orig.copy().reindex(columns=subs)
A:pandas.tests.frame.test_operators.df1->pandas.util.testing.makeTimeDataFrame()
A:pandas.tests.frame.test_operators.d->DataFrame({'a': [np.nan, False], 'b': [True, True]})
A:pandas.tests.frame.test_operators.alias->aliases.get(op, op)
A:pandas.tests.frame.test_operators.f->getattr(df, op)
A:pandas.tests.frame.test_operators.exp->(self.frame['A'] * 2).copy()
A:pandas.tests.frame.test_operators.dtype->dict(C=None)
A:pandas.tests.frame.test_operators.ndim_5->numpy.ones(df1.shape + (1, 1, 1))
A:pandas.tests.frame.test_operators.const_add->self.frame.add(1)
A:pandas.tests.frame.test_operators.index->pandas.MultiIndex.from_product([list('abc'), ['one', 'two', 'three'], [1, 2, 3]], names=['first', 'second', 'third'])
A:pandas.tests.frame.test_operators.opa->getattr(operator, op, None)
A:pandas.tests.frame.test_operators.x->Series([1.0, 10.0], ['two', 'three'])
A:pandas.tests.frame.test_operators.midx->pandas.MultiIndex.from_product([['A', 'B'], ['a', 'b']])
A:pandas.tests.frame.test_operators.s->Series([1, 2, 3]).copy()
A:pandas.tests.frame.test_operators.s2->Series([1, 2, 3]).copy().copy()
A:pandas.tests.frame.test_operators.res1->pandas.DataFrame(np.random.randn(3, 3), index=index, columns=columns).mul(s, axis=1, level=1)
A:pandas.tests.frame.test_operators.res2->pandas.DataFrame(np.random.randn(3, 3), index=index, columns=columns).mul(s2, axis=1, level=1)
A:pandas.tests.frame.test_operators.res3->pandas.util.testing.makeTimeDataFrame().mul(s, axis=1, level=1)
A:pandas.tests.frame.test_operators.res4->pandas.util.testing.makeTimeDataFrame().mul(s2, axis=1, level=1)
A:pandas.tests.frame.test_operators.res5->pandas.util.testing.makeTimeDataFrame().mul(s, axis=1, level='lvl1')
A:pandas.tests.frame.test_operators.res6->pandas.util.testing.makeTimeDataFrame().mul(s2, axis=1, level='lvl1')
A:pandas.tests.frame.test_operators.left->DataFrame({'A': ['a', 'b', 'c'], 'B': [1, 2, 3]})
A:pandas.tests.frame.test_operators.data->numpy.random.randn(5, 3)
A:pandas.tests.frame.test_operators.other_data->numpy.random.randn(5, 3)
A:pandas.tests.frame.test_operators.other->DataFrame(other_data)
A:pandas.tests.frame.test_operators.part_o->DataFrame(other_data).loc[3:, 1:].copy()
A:pandas.tests.frame.test_operators.rs->DataFrame({'a': arr3}).gt(2j)
A:pandas.tests.frame.test_operators.xp->op(df, part_o.reindex(index=df.index, columns=df.columns))
A:pandas.tests.frame.test_operators.o->getattr(operator, op)
A:pandas.tests.frame.test_operators.idx_eq->pandas.DataFrame(np.random.randn(3, 3), index=index, columns=columns).eq(idx_ser, axis=0)
A:pandas.tests.frame.test_operators.col_eq->pandas.DataFrame(np.random.randn(3, 3), index=index, columns=columns).eq(col_ser)
A:pandas.tests.frame.test_operators.idx_ne->pandas.DataFrame(np.random.randn(3, 3), index=index, columns=columns).ne(idx_ser, axis=0)
A:pandas.tests.frame.test_operators.col_ne->pandas.DataFrame(np.random.randn(3, 3), index=index, columns=columns).ne(col_ser)
A:pandas.tests.frame.test_operators.idx_gt->pandas.DataFrame(np.random.randn(3, 3), index=index, columns=columns).gt(idx_ser, axis=0)
A:pandas.tests.frame.test_operators.col_gt->pandas.DataFrame(np.random.randn(3, 3), index=index, columns=columns).gt(col_ser)
A:pandas.tests.frame.test_operators.idx_le->pandas.DataFrame(np.random.randn(3, 3), index=index, columns=columns).le(idx_ser, axis=0)
A:pandas.tests.frame.test_operators.col_le->pandas.DataFrame(np.random.randn(3, 3), index=index, columns=columns).le(col_ser)
A:pandas.tests.frame.test_operators.idx_ge->pandas.DataFrame(np.random.randn(3, 3), index=index, columns=columns).ge(idx_ser, axis=0)
A:pandas.tests.frame.test_operators.col_ge->pandas.DataFrame(np.random.randn(3, 3), index=index, columns=columns).ge(col_ser)
A:pandas.tests.frame.test_operators.idx_lt->pandas.DataFrame(np.random.randn(3, 3), index=index, columns=columns).lt(idx_ser, axis=0)
A:pandas.tests.frame.test_operators.col_lt->pandas.DataFrame(np.random.randn(3, 3), index=index, columns=columns).lt(col_ser)
A:pandas.tests.frame.test_operators.idx_ser->Series(np.random.randn(5))
A:pandas.tests.frame.test_operators.col_ser->Series(np.random.randn(3))
A:pandas.tests.frame.test_operators.arr->numpy.random.randint(0, 10, size=5)
A:pandas.tests.frame.test_operators.arr2->numpy.array([2j, np.nan, 7, None])
A:pandas.tests.frame.test_operators.arr3->numpy.array([2j, np.nan, None])
A:pandas.tests.frame.test_operators.df3->DataFrame({'a': arr3})
A:pandas.tests.frame.test_operators.base->pandas.DatetimeIndex(['2011-01-01', '2011-01-02', '2011-01-03'], tz='UTC')
A:pandas.tests.frame.test_operators.row->self.simple.xs('a')
A:pandas.tests.frame.test_operators.op->getattr(operator, op)
A:pandas.tests.frame.test_operators.added->self.tsframe.add(ts, axis='index')
A:pandas.tests.frame.test_operators.val2->list(df['two'])
A:pandas.tests.frame.test_operators.val3->numpy.random.rand(*df.shape)
A:pandas.tests.frame.test_operators.frame_copy->self.frame.reindex(self.frame.index[::2])
A:pandas.tests.frame.test_operators.reverse->self.frame.reindex(columns=self.frame.columns[::-1])
A:pandas.tests.frame.test_operators.series->self.frame.xs(self.frame.index[0])
A:pandas.tests.frame.test_operators.larger_series->Series(larger_series)
A:pandas.tests.frame.test_operators.smaller_added->smaller_frame.add(ts, axis='index')
A:pandas.tests.frame.test_operators.smaller_added2->self.tsframe.add(smaller_ts, axis='index')
A:pandas.tests.frame.test_operators.frame->self.tsframe[:1].reindex(columns=[])
A:pandas.tests.frame.test_operators.result3->(X[block1] - Z[block1]).reindex(columns=subs)
A:pandas.tests.frame.test_operators.missing_df->pandas.util.testing.makeDataFrame()
A:pandas.tests.frame.test_operators.b->numpy.array([2, 2])
A:pandas.tests.frame.test_operators.b_r->numpy.atleast_2d([2, 2])
A:pandas.tests.frame.test_operators.tup->tuple(l)
A:pandas.tests.frame.test_operators.combined->pandas.util.testing.makeTimeDataFrame().combine(df2, np.add)
A:pandas.tests.frame.test_operators.combined2->pandas.util.testing.makeTimeDataFrame().combine(df1, np.add)
A:pandas.tests.frame.test_operators.columns->list('abcdefg')
A:pandas.tests.frame.test_operators.X_orig->DataFrame(np.arange(10 * len(columns)).reshape(-1, len(columns)), columns=columns, index=range(10))
A:pandas.tests.frame.test_operators.block1->list('bedcf')
A:pandas.tests.frame.test_operators.subs->list('bcdef')
A:pandas.tests.frame.test_operators.X->DataFrame(np.arange(10 * len(columns)).reshape(-1, len(columns)), columns=columns, index=range(10)).copy()
A:pandas.tests.frame.test_operators.result1->(X[block1] - Z).reindex(columns=subs)
A:pandas.tests.frame.test_operators.result4->DataFrame(np.arange(10 * len(columns)).reshape(-1, len(columns)), columns=columns, index=range(10)).copy().reindex(columns=subs)
A:pandas.tests.frame.test_operators.s_orig->Series([1, 2, 3])
A:pandas.tests.frame.test_operators.df_orig->DataFrame({'A': arr.copy(), 'B': 'foo'})
A:pandas.tests.frame.test_operators.val->numpy.zeros((3, 3, 3))
pandas.tests.frame.test_operators.TestDataFrameOperators(TestData)
pandas.tests.frame.test_operators.TestDataFrameOperators._test_op(df,op)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_alignment_non_pandas(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_arith_flex_frame(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_arith_flex_series(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_arith_getitem_commute(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_arith_mixed(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_arith_non_pandas_object(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_binary_ops_align(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_bool_flex_frame(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_boolean_comparison(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_combineFrame(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_combineFunc(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_combineSeries(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_combine_generic(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_comparison_invalid(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_comparison_protected_from_errstate(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_comparisons(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_div(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_dti_tz_convert_to_utc(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_float_none_comparison(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_inplace_ops_alignment(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_inplace_ops_identity(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_invert(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_logical_operators(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_logical_typeerror(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_logical_with_nas(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_modulo(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_neg(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_operators(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_operators_boolean(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_operators_none_as_na(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_ops_np_scalar(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_return_dtypes_bool_op_costant(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_string_comparison(self)
pandas.tests.frame.test_operators.TestDataFrameOperators.test_timestamp_compare(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_constructors.py----------------------------------------
A:pandas.tests.frame.test_constructors.df->DataFrame(np.random.randn(10, 3), index=index, columns=['a', 'b', 'c'])
A:pandas.tests.frame.test_constructors.(index, data)->pandas.util.testing.getMixedTypeDict()
A:pandas.tests.frame.test_constructors.indexed_frame->pandas.DataFrame.from_records(arr, index='f1')
A:pandas.tests.frame.test_constructors.unindexed_frame->DataFrame(data)
A:pandas.tests.frame.test_constructors.foo->DataFrame({'a': ['a', 'b', 'c']}, dtype=np.float64)
A:pandas.tests.frame.test_constructors.df['foo']->numpy.ones((4, 2)).tolist()
A:pandas.tests.frame.test_constructors.df['foo2']->numpy.ones((4, 2)).tolist()
A:pandas.tests.frame.test_constructors.orig_df->DataFrame({'col1': [1.0], 'col2': [2.0], 'col3': [3.0]})
A:pandas.tests.frame.test_constructors.new_df->pandas.DataFrame(orig_df, dtype=float, copy=True)
A:pandas.tests.frame.test_constructors.should_be_view->DataFrame(df.values, dtype=df[0].dtype)
A:pandas.tests.frame.test_constructors.result->DataFrame(np.random.randn(10, 3), index=index, columns=['a', 'b', 'c']).to_records(index=False)
A:pandas.tests.frame.test_constructors.zipper->lzip(dtypes, arrays)
A:pandas.tests.frame.test_constructors.ad->dict()
A:pandas.tests.frame.test_constructors.a->numpy.array([(1, 2)], dtype=[('id', np.int64), ('value', np.int64)])
A:pandas.tests.frame.test_constructors.b->numpy.array([], dtype=[('id', np.int64), ('value', np.int64)])
A:pandas.tests.frame.test_constructors.rec->self.frame.to_records(index=False)
A:pandas.tests.frame.test_constructors.df2->DataFrame(Series(idx2))
A:pandas.tests.frame.test_constructors.df3->DataFrame(rec, index=rng, columns=['C', 'B'])
A:pandas.tests.frame.test_constructors.expected->Series({0: np.float64})
A:pandas.tests.frame.test_constructors.values->numpy.array([2 ** 64 - i for i in range(1, 10)], dtype=np.uint64)
A:pandas.tests.frame.test_constructors.data->numpy.random.randn(10)
A:pandas.tests.frame.test_constructors.df_crawls->DataFrame(data)
A:pandas.tests.frame.test_constructors.nums->lrange(nitems)
A:pandas.tests.frame.test_constructors.frame->pandas.DataFrame.from_records(arr)
A:pandas.tests.frame.test_constructors.exp->DataFrame(data, index=['a', 'b', 'c'])
A:pandas.tests.frame.test_constructors.idx->Index(date_range('20130101', periods=3, tz='US/Eastern'), name='foo')
A:pandas.tests.frame.test_constructors.frame_none->DataFrame(dict(a=None), index=[0])
A:pandas.tests.frame.test_constructors.frame_none_list->DataFrame(dict(a=[None]), index=[0])
A:pandas.tests.frame.test_constructors.mi->pandas.MultiIndex.from_tuples(tuples)
A:pandas.tests.frame.test_constructors.df1->pandas.DataFrame.from_records(df, index='C')
A:pandas.tests.frame.test_constructors.refdf->DataFrame(dict(((col, dict(compat.iteritems(val))) for (col, val) in compat.iteritems(data))))
A:pandas.tests.frame.test_constructors.dct->defaultdict(dict)
A:pandas.tests.frame.test_constructors.dm->DataFrame({'A': np.ones(10, dtype=int), 'B': np.ones(10, dtype=np.float64)}, index=np.arange(10))
A:pandas.tests.frame.test_constructors._d->sorted(d.items())
A:pandas.tests.frame.test_constructors.expected.index->Index(expected.index, tupleize_cols=False)
A:pandas.tests.frame.test_constructors.data_datetime64->create_data(np.datetime64)
A:pandas.tests.frame.test_constructors.data_datetime->create_data(lambda x: datetime.strptime(x, '%Y-%m-%d'))
A:pandas.tests.frame.test_constructors.data_Timestamp->create_data(Timestamp)
A:pandas.tests.frame.test_constructors.result_datetime64->DataFrame(data_datetime64)
A:pandas.tests.frame.test_constructors.result_datetime->DataFrame(data_datetime)
A:pandas.tests.frame.test_constructors.result_Timestamp->DataFrame(data_Timestamp)
A:pandas.tests.frame.test_constructors.data_timedelta64->create_data(lambda x: np.timedelta64(x, 'D'))
A:pandas.tests.frame.test_constructors.data_timedelta->create_data(lambda x: timedelta(days=x))
A:pandas.tests.frame.test_constructors.data_Timedelta->create_data(lambda x: Timedelta(x, 'D'))
A:pandas.tests.frame.test_constructors.result_timedelta64->DataFrame(data_timedelta64)
A:pandas.tests.frame.test_constructors.result_timedelta->DataFrame(data_timedelta)
A:pandas.tests.frame.test_constructors.result_Timedelta->DataFrame(data_Timedelta)
A:pandas.tests.frame.test_constructors.rng->pandas.period_range('1/1/2000', periods=5)
A:pandas.tests.frame.test_constructors.data.setdefault(col, {})[row]->DataFrame(np.random.randn(10, 3), index=index, columns=['a', 'b', 'c']).get_value(row, col)
A:pandas.tests.frame.test_constructors.data.setdefault(row, {})[col]->DataFrame(np.random.randn(10, 3), index=index, columns=['a', 'b', 'c']).get_value(row, col)
A:pandas.tests.frame.test_constructors.mat->numpy.array(['foo', 'bar'], dtype=object).reshape(2, 1)
A:pandas.tests.frame.test_constructors.mat2->numpy.ma.copy(mat)
A:pandas.tests.frame.test_constructors.assert_fr_equal->functools.partial(tm.assert_frame_equal, check_index_type=True, check_column_type=True, check_frame_type=True)
A:pandas.tests.frame.test_constructors.(names, data)->zip(*comb)
A:pandas.tests.frame.test_constructors.mrecs->numpy.ma.mrecords.fromarrays(data, names=names)
A:pandas.tests.frame.test_constructors.comb->dict([(k, v.filled()) if hasattr(v, 'filled') else (k, v) for (k, v) in comb])
A:pandas.tests.frame.test_constructors.df_casted->DataFrame(self.frame, dtype=np.int64)
A:pandas.tests.frame.test_constructors.arr->numpy.array([(1.0, 1.0, 2, 2), (3.0, 3.0, 4, 4), (5.0, 5.0, 6, 6), (7.0, 7.0, 8, 8)], dtype=[('x', np.float64), ('u', np.float32), ('y', np.int64), ('z', np.int32)])
A:pandas.tests.frame.test_constructors.row_one->OrderedDict()
A:pandas.tests.frame.test_constructors.row_two->OrderedDict()
A:pandas.tests.frame.test_constructors.sdict->OrderedDict(zip(range(len(data)), data))
A:pandas.tests.frame.test_constructors.result2->pandas.DataFrame.from_records(recarray, columns=columns).reindex(columns=df.columns)
A:pandas.tests.frame.test_constructors.result_custom->DataFrame(data_custom)
A:pandas.tests.frame.test_constructors.data['B']->Series([4, 3, 2, 1], index=['bar', 'qux', 'baz', 'foo'])
A:pandas.tests.frame.test_constructors.named_tuple->namedtuple('Pandas', list('ab'))
A:pandas.tests.frame.test_constructors.recons->pandas.DataFrame.from_items(row_items, columns=self.mixed_frame.columns, orient='index')
A:pandas.tests.frame.test_constructors.rs->pandas.DataFrame.from_items([('A', [1, 2, 3]), ('B', [4, 5, 6])], orient='index', columns=['one', 'two', 'three'])
A:pandas.tests.frame.test_constructors.xp->DataFrame({'x': np.array([1.0, 3.0], dtype=np.float64), 'u': np.array([1.0, 3.0], dtype=np.float32), 'y': np.array([2, 4], dtype=np.int64), 'z': np.array([2, 4], dtype=np.int32)})
A:pandas.tests.frame.test_constructors.s->Series(dr, index=dr)
A:pandas.tests.frame.test_constructors.s1->Series([1, 2, 3], index=['a', 'b', 'c'], name='x')
A:pandas.tests.frame.test_constructors.s2->Series([1, 2, 3], index=['a', 'b', 'c'])
A:pandas.tests.frame.test_constructors.other_index->Index(['a', 'b'])
A:pandas.tests.frame.test_constructors.exp1->DataFrame(s1.reindex(other_index))
A:pandas.tests.frame.test_constructors.exp2->DataFrame(s2.reindex(other_index))
A:pandas.tests.frame.test_constructors.index->date_range('1/1/2000', periods=10)
A:pandas.tests.frame.test_constructors.columns->list(self.frame.columns[:3])
A:pandas.tests.frame.test_constructors.edf->DataFrame([[8, 5]])
A:pandas.tests.frame.test_constructors.idf->pandas.DataFrame.from_items([('a', [8]), ('a', [5])], columns=['a', 'a'])
A:pandas.tests.frame.test_constructors.ind->date_range(start='2000-01-01', freq='D', periods=10)
A:pandas.tests.frame.test_constructors.datetime_s->Series(datetimes)
A:pandas.tests.frame.test_constructors.tz->pytz.timezone('US/Eastern')
A:pandas.tests.frame.test_constructors.dt->pytz.timezone('US/Eastern').localize(datetime(2012, 1, 1))
A:pandas.tests.frame.test_constructors.dr->date_range('2011/1/1', '2012/1/1', freq='W-FRI')
A:pandas.tests.frame.test_constructors.i->date_range('1/1/2011', periods=5, freq='10s', tz='US/Eastern')
A:pandas.tests.frame.test_constructors.i_no_tz->date_range('1/1/2011', periods=5, freq='10s')
A:pandas.tests.frame.test_constructors.cop->DataFrame(self.frame, copy=True)
A:pandas.tests.frame.test_constructors.d->DataFrame({'A': 'foo', 'B': ts}, index=dr)
A:pandas.tests.frame.test_constructors.arr2->numpy.zeros((2, 3))
A:pandas.tests.frame.test_constructors.records->pandas.DataFrame.from_records(arr, index='f1').to_records(index=False)
A:pandas.tests.frame.test_constructors.generator->list_generator(10)
A:pandas.tests.frame.test_constructors.original_columns->list(columns)
A:pandas.tests.frame.test_constructors.df2_obj->pandas.DataFrame.from_records(rows, columns=['date', 'test'])
A:pandas.tests.frame.test_constructors.results->pandas.DataFrame.from_records(rows, columns=['date', 'test']).get_dtype_counts()
A:pandas.tests.frame.test_constructors.recarray->numpy.array(tuples, dtype=dtypes).view(np.recarray)
A:pandas.tests.frame.test_constructors.recarray2->DataFrame(np.random.randn(10, 3), index=index, columns=['a', 'b', 'c']).to_records()
A:pandas.tests.frame.test_constructors.result3->pandas.DataFrame.from_records(recarray2, columns=columns).reindex(columns=df.columns)
A:pandas.tests.frame.test_constructors.result4->pandas.DataFrame.from_records(lists, columns=columns).reindex(columns=df.columns)
A:pandas.tests.frame.test_constructors.exclude->list(set(range(8)) - set(columns_to_test))
A:pandas.tests.frame.test_constructors.asdict->dict(((x, y) for (x, y) in compat.iteritems(df)))
A:pandas.tests.frame.test_constructors.asdict2->dict(((x, y.values) for (x, y) in compat.iteritems(df)))
A:pandas.tests.frame.test_constructors.tups->lmap(tuple, recs)
A:pandas.tests.frame.test_constructors.idx2->date_range('20130101', periods=3, tz='US/Eastern')
A:pandas.tests.frame.test_constructors.ts->Series(dr)
pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ(TestData)
pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_frame_datetime64_mixed_index_ctor_1681(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_frame_dict_constructor_datetime64_1680(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_frame_timeseries_to_records(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_from_dict(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructorWithDatetimeTZ.test_from_index(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors(TestData)
pandas.tests.frame.test_constructors.TestDataFrameConstructors._check_basic_constructor(self,empty)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_DataFrame(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_Series_copy_bug(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_Series_differently_indexed(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_Series_named(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_arrays_and_scalars(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_bool(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_cast_failure(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_column_duplicates(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_complex_dtypes(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_corner(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_datetimes_with_nulls(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_block(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_cast(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_datetime64_index(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_dont_upcast(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_multiindex(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_of_tuples(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dict_timedelta64_index(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dtype_copy(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dtype_list_data(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_dtype_nocast_view(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_empty_list(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_empty_with_string_dtype(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_error_msgs(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_for_list_with_dtypes(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_frame_copy(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_from_items(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_generator(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_iterator(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_iterator_failure(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_frames(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_derived_dicts(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_dicts(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_lists(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_list_of_series(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_lists_to_object_dtype(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_manager_resize(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_maskedarray(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_maskedarray_nonfloat(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_miscast_na_int_dtype(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mix_series_nonseries(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mixed(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mixed_dict_and_Series(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mixed_dtypes(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_more(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_mrecarray(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_multi_index(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_namedtuples(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ndarray(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ndarray_copy(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ordered_dict_conflicting_orders(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ordered_dict_preserve_order(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ordereddict(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_orient(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_overflow_int64(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_period(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_ragged(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_rec(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_scalar(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_scalar_inference(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_sequence_like(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_series_copy(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_single_value(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_subclass_dict(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_tuples(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_with_datetimes(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_with_embedded_frames(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_constructor_with_nas(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_bad_index_column(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_columns_not_modified(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_decimal(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_dictlike(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_duplicates(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_empty(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_empty_with_nonempty_fields_gh3682(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_iterator(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_len0_with_columns(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_lists_generator(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_misc_brokenness(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_non_tuple(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_nones(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_sequencelike(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_set_index_name(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_to_records(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_tuples_generator(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_with_datetimes(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_from_records_with_index_data(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_nested_dict_frame_constructor(self)
pandas.tests.frame.test_constructors.TestDataFrameConstructors.test_to_frame_with_falsey_names(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_timeseries.py----------------------------------------
A:pandas.tests.frame.test_timeseries.the_diff->self.tsframe.astype('float32').diff(1)
A:pandas.tests.frame.test_timeseries.s->Series([1.0, 1.5, np.nan, 2.5, 3.0])
A:pandas.tests.frame.test_timeseries.rs->DataFrame(np.random.randn(len(rng), 2), index=rng).at_time('16:00')
A:pandas.tests.frame.test_timeseries.tf->self.tsframe.astype('float32')
A:pandas.tests.frame.test_timeseries.df->DataFrame(randn(len(dr), K), index=dr)
A:pandas.tests.frame.test_timeseries.result->pandas.Series(data_ns).to_frame()
A:pandas.tests.frame.test_timeseries.expected->pandas.DataFrame({0: [1, None], 'new': [1000000000.0, None]}, dtype='datetime64[ns]')
A:pandas.tests.frame.test_timeseries.res->DataFrame(randn(len(dr), K), index=dr).max()
A:pandas.tests.frame.test_timeseries.exp->DataFrame(randn(len(dr), K), index=dr).copy()
A:pandas.tests.frame.test_timeseries.df['A']->numpy.array([1, 2, 3, 4, 5], dtype=object)
A:pandas.tests.frame.test_timeseries.xp->DataFrame({'one': s1.shift(1), 'two': s2.shift(1)})
A:pandas.tests.frame.test_timeseries.filled->self.tsframe.asfreq('BM').asfreq('B', method='pad')
A:pandas.tests.frame.test_timeseries.chg->DataFrame(randn(len(dr), K), index=dr).pct_change()
A:pandas.tests.frame.test_timeseries.edf->DataFrame({'a': expected, 'b': expected})
A:pandas.tests.frame.test_timeseries.rng->date_range('1/1/2000', '1/5/2000', freq='5min')
A:pandas.tests.frame.test_timeseries.dates->numpy.asarray(rng)
A:pandas.tests.frame.test_timeseries.ns_dtype->numpy.dtype('M8[ns]')
A:pandas.tests.frame.test_timeseries.dtype->numpy.dtype('M8[%s]' % unit)
A:pandas.tests.frame.test_timeseries.vals->numpy.arange(n, dtype=np.int64).view(dtype)
A:pandas.tests.frame.test_timeseries.df['dates']->numpy.arange(n, dtype=np.int64).view(ns_dtype)
A:pandas.tests.frame.test_timeseries.tmp->DataFrame(randn(len(dr), K), index=dr).copy()
A:pandas.tests.frame.test_timeseries.shiftedFrame->self.tsframe.shift(5, freq=offsets.BDay())
A:pandas.tests.frame.test_timeseries.shiftedSeries->self.tsframe['A'].shift(-5)
A:pandas.tests.frame.test_timeseries.unshifted->inferred_ts.tshift(1).tshift(-1)
A:pandas.tests.frame.test_timeseries.shiftedFrame2->self.tsframe.shift(5, freq='B')
A:pandas.tests.frame.test_timeseries.int_shifted->self.intframe.shift(1)
A:pandas.tests.frame.test_timeseries.ps->pandas.util.testing.makePeriodFrame()
A:pandas.tests.frame.test_timeseries.shifted->DataFrame(self.tsframe.values, Index(np.asarray(self.tsframe.index)), columns=self.tsframe.columns).tshift(1)
A:pandas.tests.frame.test_timeseries.shifted2->self.tsframe.tshift(freq=self.tsframe.index.freq)
A:pandas.tests.frame.test_timeseries.shifted3->pandas.util.testing.makePeriodFrame().tshift(freq=offsets.BDay())
A:pandas.tests.frame.test_timeseries.s1->pandas.Series(['a', 'b', 'c'], dtype='category')
A:pandas.tests.frame.test_timeseries.s2->pandas.Series(['A', 'B', 'C'], dtype='category')
A:pandas.tests.frame.test_timeseries.inferred_ts->DataFrame(self.tsframe.values, Index(np.asarray(self.tsframe.index)), columns=self.tsframe.columns)
A:pandas.tests.frame.test_timeseries.truncated->self.tsframe.truncate(index[5], index[10])
A:pandas.tests.frame.test_timeseries.offset_monthly->self.tsframe.asfreq(offsets.BMonthEnd())
A:pandas.tests.frame.test_timeseries.rule_monthly->self.tsframe.asfreq('BM')
A:pandas.tests.frame.test_timeseries.filled_dep->self.tsframe.asfreq('BM').asfreq('B', method='pad')
A:pandas.tests.frame.test_timeseries.zero_length->self.tsframe.reindex([])
A:pandas.tests.frame.test_timeseries.ts->DataFrame(np.random.randn(len(rng), 2), index=rng)
A:pandas.tests.frame.test_timeseries.actual_df->DataFrame(randn(len(dr), K), index=dr).asfreq(freq='1S', fill_value=9.0)
A:pandas.tests.frame.test_timeseries.expected_df->DataFrame(randn(len(dr), K), index=dr).asfreq(freq='1S').fillna(9.0)
A:pandas.tests.frame.test_timeseries.expected_series->DataFrame(np.random.randn(len(rng), 2), index=rng).asfreq(freq='1S').fillna(9.0)
A:pandas.tests.frame.test_timeseries.actual_series->DataFrame(np.random.randn(len(rng), 2), index=rng).asfreq(freq='1S', fill_value=9.0)
A:pandas.tests.frame.test_timeseries.N->len(self.frame.index)
A:pandas.tests.frame.test_timeseries.mat->randn(N)
A:pandas.tests.frame.test_timeseries.frame->DataFrame({'foo': mat}, index=self.frame.index)
A:pandas.tests.frame.test_timeseries.index->DataFrame({'foo': mat}, index=self.frame.index).last_valid_index()
A:pandas.tests.frame.test_timeseries.empty->DataFrame()
A:pandas.tests.frame.test_timeseries.stime->time(22, 0)
A:pandas.tests.frame.test_timeseries.etime->time(9, 0)
A:pandas.tests.frame.test_timeseries.close_open->product([True, False], [True, False])
A:pandas.tests.frame.test_timeseries.filtered->DataFrame(np.random.randn(len(rng), 2), index=rng).between_time(stime, etime, inc_start, inc_end)
A:pandas.tests.frame.test_timeseries.t->DataFrame(np.random.randn(len(rng), 2), index=rng).at_time('16:00').time()
A:pandas.tests.frame.test_timeseries.data_ns->numpy.array([1, 'nat'], dtype='datetime64[ns]')
A:pandas.tests.frame.test_timeseries.data_s->numpy.array([1, 'nat'], dtype='datetime64[s]')
A:pandas.tests.frame.test_timeseries.dr->date_range('1/1/2000', '1/1/2001')
A:pandas.tests.frame.test_timeseries.pr->period_range('1/1/2000', '1/1/2001')
A:pandas.tests.frame.test_timeseries.pts->DataFrame(randn(len(dr), K), index=dr).to_period('M', axis=1)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods(TestData)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_asfreq(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_asfreq_datetimeindex(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_asfreq_fillvalue(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_at_time_frame(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_between_time_frame(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_datetime_assignment_with_NaT_and_diff_time_units(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_diff(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_diff_axis(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_diff_float_n(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_diff_mixed_dtype(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_diff_neg_n(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_diff_timedelta(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_first_last_valid(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_frame_add_datetime64_col_other_units(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_frame_add_datetime64_column(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_frame_ctor_datetime64_column(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_frame_datetime64_pre1900_repr(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_frame_to_period(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_operation_on_NaT(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_pct_change(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_pct_change_shift_over_nas(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_shift(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_shift_bool(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_shift_categorical(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_shift_empty(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_truncate(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_truncate_copy(self)
pandas.tests.frame.test_timeseries.TestDataFrameTimeSeriesMethods.test_tshift(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_rank.py----------------------------------------
A:pandas.tests.frame.test_rank.s->Series([1, 3, 4, 2, nan, 2, 1, 5, nan, 3])
A:pandas.tests.frame.test_rank.df->self.df.astype(dtype)
A:pandas.tests.frame.test_rank.ranks0->self.frame.rank(na_option='bottom', ascending=False)
A:pandas.tests.frame.test_rank.ranks1->self.frame.rank(1, na_option='bottom', ascending=False)
A:pandas.tests.frame.test_rank.mask->numpy.isnan(self.frame.values)
A:pandas.tests.frame.test_rank.exp0->numpy.apply_along_axis(rankdata, 0, -fval0)
A:pandas.tests.frame.test_rank.exp1->numpy.apply_along_axis(rankdata, 1, -fval1)
A:pandas.tests.frame.test_rank.result->self.df.astype(dtype).rank(method=method, axis=axis)
A:pandas.tests.frame.test_rank.exp->DataFrame({'a': [3.5, 1.0, 3.5, 5.0, 6.0, 7.0, 2.0]})
A:pandas.tests.frame.test_rank.expected->(df.max() - df).rank(method=method)
A:pandas.tests.frame.test_rank.self.mixed_frame['datetime']->datetime.datetime.now()
A:pandas.tests.frame.test_rank.self.mixed_frame['timedelta']->timedelta(days=1, seconds=1)
A:pandas.tests.frame.test_rank.xs->numpy.random.randint(0, 21, (100, 26))
A:pandas.tests.frame.test_rank.sprank->sprank.astype(np.float64).astype(np.float64)
A:pandas.tests.frame.test_rank.res->self.df.astype(dtype).rank(ascending=False)
A:pandas.tests.frame.test_rank.res2->self.df.astype(dtype).rank(method=method, ascending=False, numeric_only=True)
A:pandas.tests.frame.test_rank.res3->self.df.astype(dtype).rank(method=method, ascending=False, numeric_only=False)
A:pandas.tests.frame.test_rank.exp_df->DataFrame({'A': expected, 'B': expected})
A:pandas.tests.frame.test_rank.disabled->set([(object, 'first')])
pandas.tests.frame.test_rank.TestRank(TestData)
pandas.tests.frame.test_rank.TestRank.test_rank(self)
pandas.tests.frame.test_rank.TestRank.test_rank2(self)
pandas.tests.frame.test_rank.TestRank.test_rank_2d_tie_methods(self)
pandas.tests.frame.test_rank.TestRank.test_rank_axis(self)
pandas.tests.frame.test_rank.TestRank.test_rank_descending(self)
pandas.tests.frame.test_rank.TestRank.test_rank_methods_frame(self)
pandas.tests.frame.test_rank.TestRank.test_rank_na_option(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_reshape.py----------------------------------------
A:pandas.tests.frame.test_reshape.frame->DataFrame(data).set_index('index')
A:pandas.tests.frame.test_reshape.pivoted->DataFrame(data).set_index('index').pivot(index='index', columns='columns')
A:pandas.tests.frame.test_reshape.expected->Series([10, 11, 12], index=midx)
A:pandas.tests.frame.test_reshape.wp->pandas.util.testing.makePanel()
A:pandas.tests.frame.test_reshape.lp->pandas.util.testing.makePanel().to_frame()
A:pandas.tests.frame.test_reshape.df->DataFrame([[10, 11, 12]], columns=cidx)
A:pandas.tests.frame.test_reshape.data->data.unstack().unstack()
A:pandas.tests.frame.test_reshape.result->DataFrame([[10, 11, 12]], columns=cidx).stack()
A:pandas.tests.frame.test_reshape.expected.columns->pandas.MultiIndex.from_tuples([('A', 'a'), ('A', 'b'), ('B', 'a'), ('B', 'b')])
A:pandas.tests.frame.test_reshape.f->self.frame.copy()
A:pandas.tests.frame.test_reshape.f[:]->numpy.arange(np.prod(f.shape)).reshape(f.shape)
A:pandas.tests.frame.test_reshape.stacked->self.frame.copy().stack()
A:pandas.tests.frame.test_reshape.stacked_df->DataFrame({'foo': stacked, 'bar': stacked})
A:pandas.tests.frame.test_reshape.unstacked->self.frame.copy().stack().unstack()
A:pandas.tests.frame.test_reshape.unstacked_df->DataFrame({'foo': stacked, 'bar': stacked}).unstack()
A:pandas.tests.frame.test_reshape.unstacked_cols->self.frame.copy().stack().unstack(0)
A:pandas.tests.frame.test_reshape.unstacked_cols_df->DataFrame({'foo': stacked, 'bar': stacked}).unstack(0)
A:pandas.tests.frame.test_reshape.data.index->Index(['a', 'b', 'c'])
A:pandas.tests.frame.test_reshape.df.index->pandas.MultiIndex.from_tuples([('x', 'a'), ('x', 'b'), ('y', 'b'), ('z', 'a')])
A:pandas.tests.frame.test_reshape.df['A']->df['A'].astype(np.int16).astype(np.int16)
A:pandas.tests.frame.test_reshape.df['B']->df['B'].astype(np.float64).astype(np.float64)
A:pandas.tests.frame.test_reshape.expected['A']->expected['A'].astype(np.int16).astype(np.int16)
A:pandas.tests.frame.test_reshape.expected['B']->expected['B'].astype(np.float64).astype(np.float64)
A:pandas.tests.frame.test_reshape.unstacked1->DataFrame([[10, 11, 12]], columns=cidx).unstack([column_name])
A:pandas.tests.frame.test_reshape.unstacked2->DataFrame([[10, 11, 12]], columns=cidx).unstack(column_name)
A:pandas.tests.frame.test_reshape.df1->DataFrame([[10, 11, 12]], columns=cidx).set_index(['state', 'index'])
A:pandas.tests.frame.test_reshape.columns->pandas.MultiIndex.from_tuples([('A', 'cat', 'long'), ('B', 'cat', 'long'), ('A', 'dog', 'short'), ('B', 'dog', 'short')], names=['exp', 'animal', 'hair_length'])
A:pandas.tests.frame.test_reshape.df_named->DataFrame([[10, 11, 12]], columns=cidx).copy()
A:pandas.tests.frame.test_reshape.animal_hair_stacked->DataFrame([[10, 11, 12]], columns=cidx).stack(level=['animal', 'hair_length'])
A:pandas.tests.frame.test_reshape.exp_hair_stacked->DataFrame([[10, 11, 12]], columns=cidx).stack(level=['exp', 'hair_length'])
A:pandas.tests.frame.test_reshape.df2->DataFrame([[10, 11, 12]], columns=cidx).set_index(['A', 'B'])
A:pandas.tests.frame.test_reshape.df3->DataFrame([[10, 11, 12]], columns=cidx).set_index(['A', 'B']).unstack('B')
A:pandas.tests.frame.test_reshape.exp_animal_stacked->DataFrame([[10, 11, 12]], columns=cidx).stack(level=['exp', 'animal'])
A:pandas.tests.frame.test_reshape.rs->DataFrame([[10, 11, 12]], columns=cidx).unstack()
A:pandas.tests.frame.test_reshape.xp->DataFrame(np.array([[False, np.nan], [np.nan, False]], dtype=object), index=['a', 'b'], columns=MultiIndex.from_arrays([['col', 'col'], ['c', 'l']]))
A:pandas.tests.frame.test_reshape.mi->DataFrame([[10, 11, 12]], columns=cidx).set_index(list(idx))
A:pandas.tests.frame.test_reshape.s->pandas.Series(0, index=mi)
A:pandas.tests.frame.test_reshape.expected_mi->pandas.MultiIndex(levels=[['foo', 'bar'], ['one', 'two']], labels=[[0, 0, 1, 1], [0, 1, 0, 1]], names=['first', 'second'])
A:pandas.tests.frame.test_reshape.midx->pandas.MultiIndex.from_product([df.index, cidx])
A:pandas.tests.frame.test_reshape.old_data->data.unstack().unstack().copy()
A:pandas.tests.frame.test_reshape.right->DataFrame(vals, columns=cols, index=idx)
A:pandas.tests.frame.test_reshape.df['D']->df['D'].astype('int64').astype('int64')
A:pandas.tests.frame.test_reshape.left->DataFrame([[10, 11, 12]], columns=cidx).set_index(['1st', '2nd', '3rd']).unstack(['2nd', '3rd'])
A:pandas.tests.frame.test_reshape.right['D', 'a']->right['D', 'a'].astype('int64').astype('int64')
A:pandas.tests.frame.test_reshape.idx->MultiIndex(levels=[[680585148, 680607017], [0.0133]], labels=[[0, 1], [-1, 0]], names=['s_id', 'dosage'])
A:pandas.tests.frame.test_reshape.(rows, cols)->DataFrame([[10, 11, 12]], columns=cidx).notnull().values.nonzero()
A:pandas.tests.frame.test_reshape.udf->DataFrame([[10, 11, 12]], columns=cidx).set_index(list(idx)).unstack(level=lev)
A:pandas.tests.frame.test_reshape.vals->numpy.array([[3, 0, 1, 2, nan, 4], [nan, 5, 6, 7, 8, 9]])
A:pandas.tests.frame.test_reshape.cols->MultiIndex(levels=[['change'], ['Ag', 'Hg', 'Pb', 'Sn', 'U']], labels=[[0, 0, 0, 0, 0], [0, 1, 2, 3, 4]], names=[None, 'agent'])
A:pandas.tests.frame.test_reshape.t->datetime(2014, 1, 1)
A:pandas.tests.frame.test_reshape.eidx->pandas.MultiIndex.from_product([(0, 1, 2, 3), ('B',)])
A:pandas.tests.frame.test_reshape.ecols->pandas.MultiIndex.from_tuples([(t, 'A')])
A:pandas.tests.frame.test_reshape.df.columns->pandas.MultiIndex.from_tuples(df.columns.get_values(), names=df.columns.names)
A:pandas.tests.frame.test_reshape.full_multiindex->pandas.MultiIndex.from_tuples([('B', 'x'), ('B', 'z'), ('A', 'y'), ('C', 'x'), ('C', 'u')], names=['Upper', 'Lower'])
A:pandas.tests.frame.test_reshape.cidx->pandas.CategoricalIndex(labels, categories=list('xyz'), ordered=ordered)
pandas.tests.frame.test_reshape.TestDataFrameReshape(TestData)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_pivot(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_pivot_duplicates(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_pivot_empty(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_pivot_index_none(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_pivot_integer_bug(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_stack_datetime_column_multiIndex(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_stack_int_level_names(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_stack_ints(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_stack_mixed_levels(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_stack_partial_multiIndex(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_stack_preserve_categorical_dtype(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_stack_unstack(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_bool(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_dtypes(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_fill(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_fill_frame(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_fill_frame_categorical(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_fill_frame_datetime(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_fill_frame_period(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_fill_frame_timedelta(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_level_binding(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_nan_index(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_non_unique_index_names(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_preserve_dtypes(self)
pandas.tests.frame.test_reshape.TestDataFrameReshape.test_unstack_to_series(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_validate.py----------------------------------------
A:pandas.tests.frame.test_validate.df->DataFrame({'a': [1, 2], 'b': [3, 4]})
pandas.tests.frame.test_validate.TestDataFrameValidate(object)
pandas.tests.frame.test_validate.TestDataFrameValidate.test_validate_bool_args(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_convert_to.py----------------------------------------
A:pandas.tests.frame.test_convert_to.recons_data->DataFrame(test_data).to_dict('i')
A:pandas.tests.frame.test_convert_to.tsmp->Timestamp('20130101')
A:pandas.tests.frame.test_convert_to.test_data->DataFrame({'A': [tsmp, tsmp], 'B': [tsmp, tsmp]})
A:pandas.tests.frame.test_convert_to.test_data_mixed->DataFrame({'A': [tsmp, tsmp], 'B': [1, 2]})
A:pandas.tests.frame.test_convert_to.df->DataFrame({'datetime': dr}, index=dr)
A:pandas.tests.frame.test_convert_to.rs->DataFrame({'datetime': dr}, index=dr).to_records()
A:pandas.tests.frame.test_convert_to.data->numpy.zeros((8, 4))
A:pandas.tests.frame.test_convert_to.headers->Parser().parsestr('From: <user@example.com>\nTo: <someone_else@example.com>\nSubject: Test message\n\nBody would go here\n')
A:pandas.tests.frame.test_convert_to.frame->pandas.DataFrame.from_records([headers])
A:pandas.tests.frame.test_convert_to.df.index->pandas.MultiIndex.from_tuples([('a', 'x'), ('a', 'y'), ('b', 'z')])
A:pandas.tests.frame.test_convert_to.result->DataFrame({'datetime': dr}, index=dr).tz_convert('UTC').to_records()
A:pandas.tests.frame.test_convert_to.expected->DataFrame({'datetime': dr}, index=dr).to_records()
A:pandas.tests.frame.test_convert_to.dr->date_range('2016-01-01', periods=10, freq='S', tz=tz)
pandas.tests.frame.test_convert_to.TestDataFrameConvertTo(TestData)
pandas.tests.frame.test_convert_to.TestDataFrameConvertTo.test_to_dict(self)
pandas.tests.frame.test_convert_to.TestDataFrameConvertTo.test_to_dict_invalid_orient(self)
pandas.tests.frame.test_convert_to.TestDataFrameConvertTo.test_to_dict_timestamp(self)
pandas.tests.frame.test_convert_to.TestDataFrameConvertTo.test_to_records_dt64(self)
pandas.tests.frame.test_convert_to.TestDataFrameConvertTo.test_to_records_floats(self)
pandas.tests.frame.test_convert_to.TestDataFrameConvertTo.test_to_records_index_name(self)
pandas.tests.frame.test_convert_to.TestDataFrameConvertTo.test_to_records_with_Mapping_type(self)
pandas.tests.frame.test_convert_to.TestDataFrameConvertTo.test_to_records_with_multindex(self)
pandas.tests.frame.test_convert_to.TestDataFrameConvertTo.test_to_records_with_unicode_column_names(self)
pandas.tests.frame.test_convert_to.TestDataFrameConvertTo.test_to_records_with_unicode_index(self)
pandas.tests.frame.test_convert_to.test_to_records_datetimeindex_with_tz(tz)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_repr_info.py----------------------------------------
A:pandas.tests.frame.test_repr_info.foo->repr(no_index)
A:pandas.tests.frame.test_repr_info.frame->DataFrame([[1, 2.0]], columns=['a', 'a'])
A:pandas.tests.frame.test_repr_info.buf->StringIO()
A:pandas.tests.frame.test_repr_info.biggie->DataFrame(np.zeros((200, 4)), columns=lrange(4), index=lrange(200))
A:pandas.tests.frame.test_repr_info.no_index->DataFrame(columns=[0, 1, 3])
A:pandas.tests.frame.test_repr_info.df->pandas.DataFrame(np.zeros((2, 2)), index=idx, columns=idx)
A:pandas.tests.frame.test_repr_info.unsortable->DataFrame({'foo': [1] * 50, datetime.today(): [1] * 50, 'bar': ['bar'] * 50, datetime.today() + timedelta(1): ['bar'] * 50}, index=np.arange(50))
A:pandas.tests.frame.test_repr_info.uval->u('σσσσ')
A:pandas.tests.frame.test_repr_info.bval->u('σσσσ').encode('utf-8')
A:pandas.tests.frame.test_repr_info.result->repr(df)
A:pandas.tests.frame.test_repr_info.io->StringIO()
A:pandas.tests.frame.test_repr_info.rs->StringIO().getvalue()
A:pandas.tests.frame.test_repr_info.lines->StringIO().readlines()
A:pandas.tests.frame.test_repr_info.data[i]->numpy.random.randint(2, size=n).astype(dtype)
A:pandas.tests.frame.test_repr_info.res->StringIO().getvalue().splitlines()
A:pandas.tests.frame.test_repr_info.df_with_object_index->pandas.DataFrame({'a': [1]}, index=['foo'])
A:pandas.tests.frame.test_repr_info.df_object->pandas.DataFrame({'a': ['a']})
A:pandas.tests.frame.test_repr_info.df_size->pandas.DataFrame(np.zeros((2, 2)), index=idx, columns=idx).memory_usage().sum()
A:pandas.tests.frame.test_repr_info.M->len(uppercase)
A:pandas.tests.frame.test_repr_info.index->pandas.MultiIndex.from_product([list(uppercase), pd.date_range('20160101', periods=N)], names=['id', 'date'])
A:pandas.tests.frame.test_repr_info.unstacked->pandas.DataFrame(np.zeros((2, 2)), index=idx, columns=idx).unstack('id')
A:pandas.tests.frame.test_repr_info.idx->pandas.CategoricalIndex(['a', 'b'])
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc(TestData)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_bytestring_with_unicode(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_categorical(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_duplicate_columns(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_duplicate_columns_shows_correct_dtypes(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_max_cols(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_memory_usage(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_memory_usage_bug_on_multiindex(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_memory_usage_qualified(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_shows_column_dtypes(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_info_wide(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_latex_repr(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_repr(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_repr_big(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_repr_column_name_unicode_truncation_bug(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_repr_dimensions(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_repr_empty(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_repr_mixed(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_repr_mixed_big(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_repr_unicode(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_repr_unsortable(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_unicode_string_with_unicode(self)
pandas.tests.frame.test_repr_info.TestDataFrameReprInfoEtc.test_very_wide_info_repr(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_subclass.py----------------------------------------
A:pandas.tests.frame.test_subclass.cdf->CustomDataFrame(data)
A:pandas.tests.frame.test_subclass.mcol->pandas.MultiIndex.from_tuples([('A', ''), ('B', '')])
A:pandas.tests.frame.test_subclass.cdf_multi->CustomDataFrame([[0, 1], [2, 3]], columns=mcol)
A:pandas.tests.frame.test_subclass.cdf_multi2->CustomDataFrame([[0, 1], [2, 3]], columns=mcol)
A:pandas.tests.frame.test_subclass.df->pandas.util.testing.SubclassedDataFrame({'a': [1]})
A:pandas.tests.frame.test_subclass.unpickled->pandas.util.testing.round_trip_pickle(df)
A:pandas.tests.frame.test_subclass.exp->pandas.util.testing.SubclassedSeries([3, 6, 9], index=list('XYZ'), name='c')
A:pandas.tests.frame.test_subclass.index->pandas.MultiIndex.from_tuples([(0, 0), (0, 1), (0, 2)])
A:pandas.tests.frame.test_subclass.result->pandas.util.testing.SubclassedDataFrame({'a': [1]}).to_panel()
A:pandas.tests.frame.test_subclass.expected->SubclassedPanel([[[1, 2, 3]], [[4, 5, 6]]], items=['X', 'Y'], major_axis=[0], minor_axis=[0, 1, 2], dtype='int64')
A:pandas.tests.frame.test_subclass.df1->pandas.util.testing.SubclassedDataFrame({'a': [1, 3, 5], 'b': [1, 3, 5]}, index=list('ACE'))
A:pandas.tests.frame.test_subclass.df2->pandas.util.testing.SubclassedDataFrame({'c': [1, 2, 4], 'd': [1, 2, 4]}, index=list('ABD'))
A:pandas.tests.frame.test_subclass.(res1, res2)->pandas.util.testing.SubclassedSeries([1, 2, 4], index=list('ABD'), name='x').align(df)
A:pandas.tests.frame.test_subclass.exp1->pandas.DataFrame({'a': [1, np.nan, 3, np.nan, 5], 'b': [1, np.nan, 3, np.nan, 5]}, index=list('ABCDE'))
A:pandas.tests.frame.test_subclass.exp2->pandas.Series([1, 2, np.nan, 4, np.nan], index=list('ABCDE'), name='x')
A:pandas.tests.frame.test_subclass.s->pandas.util.testing.SubclassedSeries([1, 2, 4], index=list('ABD'), name='x')
A:pandas.tests.frame.test_subclass.ssdf->pandas.util.testing.SubclassedSparseDataFrame(rows)
A:pandas.tests.frame.test_subclass.ossdf->pandas.util.testing.SubclassedSparseDataFrame([[1, 2, 3], [4, 5, 6]])
A:pandas.tests.frame.test_subclass.essdf->pandas.util.testing.SubclassedSparseDataFrame([[1, 4], [2, 5], [3, 6]])
pandas.tests.frame.test_subclass.TestDataFrameSubclassing(TestData)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_dataframe_metadata(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_frame_subclassing_and_slicing(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_indexing_sliced(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_align(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_align_combinations(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_attr_err_propagation(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_iterrows(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_sparse_slice(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_subclass_sparse_transpose(self)
pandas.tests.frame.test_subclass.TestDataFrameSubclassing.test_to_panel_expanddim(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_period.py----------------------------------------
A:pandas.tests.frame.test_period.rng->period_range('1/1/2000', '1/1/2010', freq='A')
A:pandas.tests.frame.test_period.df->DataFrame(randn(len(index), K), index=index)
A:pandas.tests.frame.test_period.rs->DataFrame(randn(len(index), K), index=index).reset_index().set_index('index')
A:pandas.tests.frame.test_period.index->PeriodIndex(['2011-1', '2011-2', '2011-3'], freq='M')
A:pandas.tests.frame.test_period.exp_index->_get_with_delta(delta)
A:pandas.tests.frame.test_period.result->DataFrame(randn(len(index), K), index=index).to_timestamp('S', 'end', axis=1)
A:pandas.tests.frame.test_period.delta->timedelta(hours=23, minutes=59, seconds=59)
A:pandas.tests.frame.test_period.result1->DataFrame(randn(len(index), K), index=index).to_timestamp('5t', axis=1)
A:pandas.tests.frame.test_period.result2->DataFrame(randn(len(index), K), index=index).to_timestamp('t', axis=1)
A:pandas.tests.frame.test_period.expected->pandas.date_range('2001-01-01', '2009-01-01', freq='AS')
A:pandas.tests.frame.test_period.frame->DataFrame(np.random.randn(3, 4), index=index)
A:pandas.tests.frame.test_period.ts->DataFrame(np.random.randn(len(rng), 3), index=rng)
pandas.tests.frame.test_period.TestPeriodIndex(object)
pandas.tests.frame.test_period.TestPeriodIndex.setup_method(self,method)
pandas.tests.frame.test_period.TestPeriodIndex.test_align_frame(self)
pandas.tests.frame.test_period.TestPeriodIndex.test_as_frame_columns(self)
pandas.tests.frame.test_period.TestPeriodIndex.test_frame_index_to_string(self)
pandas.tests.frame.test_period.TestPeriodIndex.test_frame_setitem(self)
pandas.tests.frame.test_period.TestPeriodIndex.test_frame_to_time_stamp(self)
pandas.tests.frame.test_period._permute(obj)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_combine_concat.py----------------------------------------
A:pandas.tests.frame.test_combine_concat.A->DataFrame(str_dates, index=lrange(2), columns=['aa'])
A:pandas.tests.frame.test_combine_concat.B->DataFrame(data=np.ones((10, 2)), dtype=np.float32)
A:pandas.tests.frame.test_combine_concat.results->pandas.concat((df1, df2), keys=[('bee', 'bah'), ('bee', 'boo')])
A:pandas.tests.frame.test_combine_concat.expected->Series([True, True, False], name=2)
A:pandas.tests.frame.test_combine_concat.ts1->Timestamp('2015-01-01', tz=None)
A:pandas.tests.frame.test_combine_concat.ts2->Timestamp('2015-01-01', tz='UTC')
A:pandas.tests.frame.test_combine_concat.ts3->Timestamp('2015-01-01', tz='EST')
A:pandas.tests.frame.test_combine_concat.df1->DataFrame({'date': ind, 'test': lrange(10)})
A:pandas.tests.frame.test_combine_concat.df2->pandas.DataFrame({'a': [1, 4]}, dtype='int64')
A:pandas.tests.frame.test_combine_concat.df3->DataFrame(dict(time=[ts3]))
A:pandas.tests.frame.test_combine_concat.df->DataFrame([[1.0, 2.0, False, True], [4.0, 5.0, True, False]], columns=['A', 'B', 'bool1', 'bool2'])
A:pandas.tests.frame.test_combine_concat.result->DataFrame({'a': [datetime(2000, 1, 1), datetime(2000, 1, 2), datetime(2000, 1, 3)]}).copy()
A:pandas.tests.frame.test_combine_concat.other->DataFrame([[45, 45]], index=[0], columns=['A', 'B'])
A:pandas.tests.frame.test_combine_concat.d['a']->Series([5, 6, 7, 8])
A:pandas.tests.frame.test_combine_concat.C->DataFrame([[1, 2], [3, 4]], index=str_dates, columns=dt_dates)
A:pandas.tests.frame.test_combine_concat.tst->DataFrame(str_dates, index=lrange(2), columns=['aa']).join(C, on='aa')
A:pandas.tests.frame.test_combine_concat.exp->pandas.DataFrame({'P': exp_dts}, index=[1, 2, 3, 4, 5, 7])
A:pandas.tests.frame.test_combine_concat.exp_idx->pandas.MultiIndex.from_product([['a', 'b'], ['x', 'y', 'z']], names=['first', 'second'])
A:pandas.tests.frame.test_combine_concat.index->Index(['a', 'b'], name='baz')
A:pandas.tests.frame.test_combine_concat.concatted_named_from_keys->pandas.concat([df, df], keys=index)
A:pandas.tests.frame.test_combine_concat.expected_named->pandas.DataFrame({'foo': [1, 2, 1, 2], 'bar': [0.1, 0.2, 0.1, 0.2]}, index=pd.MultiIndex.from_product((['a', 'b'], [0, 1]), names=['baz', None]))
A:pandas.tests.frame.test_combine_concat.index_no_name->Index(['a', 'b'], name=None)
A:pandas.tests.frame.test_combine_concat.concatted_named_from_names->pandas.concat([df, df], keys=index_no_name, names=['baz'])
A:pandas.tests.frame.test_combine_concat.concatted_unnamed->pandas.concat([df, df], keys=index_no_name)
A:pandas.tests.frame.test_combine_concat.expected_unnamed->pandas.DataFrame({'foo': [1, 2, 1, 2], 'bar': [0.1, 0.2, 0.1, 0.2]}, index=pd.MultiIndex.from_product((['a', 'b'], [0, 1]), names=[None, None]))
A:pandas.tests.frame.test_combine_concat.expected_index->pandas.DataFrame({'A': [0.1, 0.2, 0.3, 0.4]}, index=[0, 1, 0, 1])
A:pandas.tests.frame.test_combine_concat.concatted_index->pandas.concat([df1, df2], axis='index')
A:pandas.tests.frame.test_combine_concat.concatted_row->pandas.concat([df1, df2], axis='rows')
A:pandas.tests.frame.test_combine_concat.concatted_0->pandas.concat([df1, df2], axis=0)
A:pandas.tests.frame.test_combine_concat.expected_columns->pandas.DataFrame([[0.1, 0.3], [0.2, 0.4]], index=[0, 1], columns=['A', 'A'])
A:pandas.tests.frame.test_combine_concat.concatted_columns->pandas.concat([df1, df2], axis='columns')
A:pandas.tests.frame.test_combine_concat.concatted_1->pandas.concat([df1, df2], axis=1)
A:pandas.tests.frame.test_combine_concat.series1->pandas.Series([0.1, 0.2])
A:pandas.tests.frame.test_combine_concat.series2->pandas.Series([0.3, 0.4])
A:pandas.tests.frame.test_combine_concat.expected_index_series->pandas.Series([0.1, 0.2, 0.3, 0.4], index=[0, 1, 0, 1])
A:pandas.tests.frame.test_combine_concat.concatted_index_series->pandas.concat([series1, series2], axis='index')
A:pandas.tests.frame.test_combine_concat.concatted_row_series->pandas.concat([series1, series2], axis='rows')
A:pandas.tests.frame.test_combine_concat.concatted_0_series->pandas.concat([series1, series2], axis=0)
A:pandas.tests.frame.test_combine_concat.expected_columns_series->pandas.DataFrame([[0.1, 0.3], [0.2, 0.4]], index=[0, 1], columns=[0, 1])
A:pandas.tests.frame.test_combine_concat.concatted_columns_series->pandas.concat([series1, series2], axis='columns')
A:pandas.tests.frame.test_combine_concat.concatted_1_series->pandas.concat([series1, series2], axis=1)
A:pandas.tests.frame.test_combine_concat.a->Series(['a', 'b'], index=lrange(5, 7))
A:pandas.tests.frame.test_combine_concat.b->Series(lrange(2), index=lrange(5, 7))
A:pandas.tests.frame.test_combine_concat.f->DataFrame({'A': a, 'B': b})
A:pandas.tests.frame.test_combine_concat.g->DataFrame({'A': a, 'B': b})
A:pandas.tests.frame.test_combine_concat.combined->DataFrame({'col0': ser1, 'col2': ser2, 'col3': ser3}).combine_first(frame2)
A:pandas.tests.frame.test_combine_concat.reordered_frame->self.frame.reindex(combined.index)
A:pandas.tests.frame.test_combine_concat.fcopy->self.frame.copy()
A:pandas.tests.frame.test_combine_concat.fcopy2->self.frame.copy()
A:pandas.tests.frame.test_combine_concat.comb->self.frame.combine_first(DataFrame(index=['faz', 'boo']))
A:pandas.tests.frame.test_combine_concat.idx->Index(['a', 'b', 'c', 'f'])
A:pandas.tests.frame.test_combine_concat.ser1->Series([5.0, -9.0, 4.0, 100.0], index=idx)
A:pandas.tests.frame.test_combine_concat.ser2->Series(['a', 'b', 'c', 'f'], index=idx)
A:pandas.tests.frame.test_combine_concat.ser3->Series([12, 4, 5, 97], index=idx)
A:pandas.tests.frame.test_combine_concat.frame1->DataFrame({'col0': ser1, 'col2': ser2, 'col3': ser3})
A:pandas.tests.frame.test_combine_concat.frame2->DataFrame({'col1': ser1, 'col2': ser2, 'col5': ser3})
A:pandas.tests.frame.test_combine_concat.df0->DataFrame({'a': [datetime(2000, 1, 1), datetime(2000, 1, 2), datetime(2000, 1, 3)]})
A:pandas.tests.frame.test_combine_concat.dfa->pandas.DataFrame([[pd.Timestamp('2011-01-01'), 2]], columns=['a', 'b'])
A:pandas.tests.frame.test_combine_concat.dfb->pandas.DataFrame([[4], [5]], columns=['b'])
A:pandas.tests.frame.test_combine_concat.res->DataFrame({'date': ind, 'test': lrange(10)}).combine_first(df2)
A:pandas.tests.frame.test_combine_concat.data1->pandas.PeriodIndex(['2011-01', 'NaT', '2011-03', '2011-04'], freq='M')
A:pandas.tests.frame.test_combine_concat.data2->pandas.PeriodIndex(['2012-01-01', '2012-02', '2012-03'], freq='M')
A:pandas.tests.frame.test_combine_concat.dts1->pandas.date_range('2015-01-01', '2015-01-02', tz='US/Eastern')
A:pandas.tests.frame.test_combine_concat.dts2->pandas.PeriodIndex(['2012-01-01', '2012-01-02', '2012-01-03'], freq='D')
A:pandas.tests.frame.test_combine_concat.exp_dts->pandas.PeriodIndex(['2011-01', '2012-01', 'NaT', '2012-02', '2011-03', '2011-04'], freq='M')
A:pandas.tests.frame.test_combine_concat.df2_obj->pandas.DataFrame.from_records(rows, columns=['date', 'test'])
A:pandas.tests.frame.test_combine_concat.ind->date_range(start='2000/1/1', freq='D', periods=10)
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst(TestData)
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst.test_combine_first(self)
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst.test_combine_first_align_nan(self)
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst.test_combine_first_int(self)
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst.test_combine_first_mixed(self)
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst.test_combine_first_mixed_bug(self)
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst.test_combine_first_period(self)
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst.test_combine_first_timedelta(self)
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst.test_combine_first_timezone(self)
pandas.tests.frame.test_combine_concat.TestDataFrameCombineFirst.test_concat_datetime_datetime64_frame(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon(TestData)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_append_dtypes(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_append_empty_dataframe(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_append_list_of_series_dicts(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_append_series_dict(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_concat_axis_parameter(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_concat_multiple_frames_dtypes(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_concat_multiple_tzs(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_concat_named_keys(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_concat_numerical_names(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_concat_tuple_keys(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_join_multiindex_leftright(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_join_str_datetime(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_update(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_update_dtypes(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_update_filtered(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_update_from_non_df(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_update_nooverwrite(self)
pandas.tests.frame.test_combine_concat.TestDataFrameConcatCommon.test_update_raise(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_missing.py----------------------------------------
A:pandas.tests.frame.test_missing.N->len(self.frame.index)
A:pandas.tests.frame.test_missing.mat->numpy.random.randn(N)
A:pandas.tests.frame.test_missing.frame->DataFrame({'foo': mat}, index=self.frame.index)
A:pandas.tests.frame.test_missing.original->Series([1, 2, np.nan], name='A')
A:pandas.tests.frame.test_missing.expected->DataFrame({'A': np.array([1, 2, 3, 4], dtype='float64'), 'B': np.array([1, 2, 3, 4], dtype='int64'), 'C': np.array([1.0, 2.0, 3, 4.0], dtype='float64'), 'D': np.array([1.0, 2.0, 3.0, 4.0], dtype='float64')})
A:pandas.tests.frame.test_missing.smaller_frame->DataFrame({'foo': mat}, index=self.frame.index).dropna()
A:pandas.tests.frame.test_missing.exp->DataFrame({'A': [1, 2, np.nan, 4], 'B': [1, 2, 3, 4], 'C': [1.0, 2.0, np.nan, 4.0], 'D': [1.0, 2.0, 3.0, 4.0]}).fillna(0).add(2)
A:pandas.tests.frame.test_missing.samesize_frame->DataFrame({'foo': mat}, index=self.frame.index).dropna(subset=['bar'])
A:pandas.tests.frame.test_missing.df->DataFrame({'A': [1, 2, np.nan, 4], 'B': [1, 2, 3, 4], 'C': [1.0, 2.0, np.nan, 4.0], 'D': [1.0, 2.0, 3.0, 4.0]})
A:pandas.tests.frame.test_missing.dropped->DataFrame({'A': [1, 2, np.nan, 4], 'B': [1, 2, 3, 4], 'C': [1.0, 2.0, np.nan, 4.0], 'D': [1.0, 2.0, 3.0, 4.0]}).dropna(axis=1, how='all')
A:pandas.tests.frame.test_missing.inp->DataFrame({'A': [1, 2, np.nan, 4], 'B': [1, 2, 3, 4], 'C': [1.0, 2.0, np.nan, 4.0], 'D': [1.0, 2.0, 3.0, 4.0]}).copy()
A:pandas.tests.frame.test_missing.df2->DataFrame({'a': [nan, 10, 20, 30, 40], 'b': [50, 60, 70, 80, 90], 'foo': ['bar'] * 5}, index=list('VWXuZ'))
A:pandas.tests.frame.test_missing.cp->DataFrame({'A': [1, 2, np.nan, 4], 'B': [1, 2, 3, 4], 'C': [1.0, 2.0, np.nan, 4.0], 'D': [1.0, 2.0, 3.0, 4.0]}).copy()
A:pandas.tests.frame.test_missing.result->df[['B', 'D']].interpolate(downcast=None)
A:pandas.tests.frame.test_missing.result2->DataFrame({'A': [1, 2, np.nan, 4], 'B': [1, 2, 3, 4], 'C': [1.0, 2.0, np.nan, 4.0], 'D': [1.0, 2.0, 3.0, 4.0]}).dropna(how='all', axis=(0, 1))
A:pandas.tests.frame.test_missing.zero_filled->self.tsframe.fillna(0)
A:pandas.tests.frame.test_missing.padded->self.tsframe.fillna(method='pad')
A:pandas.tests.frame.test_missing.mf->self.mixed_float.reindex(columns=['A', 'B', 'D'])
A:pandas.tests.frame.test_missing.expected['Date']->expected['Date'].fillna(df.loc[df.index[0], 'Date2']).fillna(df.loc[df.index[0], 'Date2'])
A:pandas.tests.frame.test_missing.index->numpy.arange(10)
A:pandas.tests.frame.test_missing.expected['a']->expected['a'].fillna(0).fillna(0)
A:pandas.tests.frame.test_missing.expected['b']->expected['b'].fillna(5).fillna(5)
A:pandas.tests.frame.test_missing.data->numpy.random.rand(20, 5)
A:pandas.tests.frame.test_missing.filled->self.mixed_frame.fillna(value=0)
A:pandas.tests.frame.test_missing.empty_float->self.frame.reindex(columns=[])
A:pandas.tests.frame.test_missing.dat->numpy.array([0, 1, np.nan, 3, 4, 5], dtype='float')
A:pandas.tests.frame.test_missing.res->DataFrame({'A': [1, 2, np.nan, 4], 'B': [1, 2, 3, 4], 'C': [1.0, 2.0, np.nan, 4.0], 'D': [1.0, 2.0, 3.0, 4.0]}).add(2, fill_value=0)
A:pandas.tests.frame.test_missing.expectedk->DataFrame({'A': [1, 2, np.nan, 4], 'B': [1, 2, 3, 4], 'C': [1.0, 2.0, np.nan, 4.0], 'D': [1.0, 2.0, 3.0, 4.0]}).copy()
A:pandas.tests.frame.test_missing.expected[4]->expected[4].astype(np.float64).astype(np.float64)
pandas.tests.frame.test_missing.TestDataFrameInterpolate(TestData)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_alt_scipy(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_bad_method(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_basic(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_combo(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_ignore_all_good(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_inplace(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_inplace_row(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_leading_nans(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_nan_idx(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_raise_on_only_mixed(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_rowwise(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_interp_various(self)
pandas.tests.frame.test_missing.TestDataFrameInterpolate.test_rowwise_alt(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData(TestData)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_bfill(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropEmptyRows(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropIncompleteRows(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_drop_and_dropna_caching(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropna(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropna_corner(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_dropna_multiple_axes(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_ffill(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fill_corner(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fill_value_when_combine_const(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_col_reordering(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_columns(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_dataframe(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_datetime_columns(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_dict_series(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_downcast(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_dtype_conversion(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_inplace(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_invalid_method(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_invalid_value(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_fillna_skip_certain_blocks(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_frame_fillna_limit(self)
pandas.tests.frame.test_missing.TestDataFrameMissingData.test_frame_pad_backfill_limit(self)
pandas.tests.frame.test_missing._skip_if_no_pchip()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/common.py----------------------------------------
A:pandas.tests.frame.common._seriesd->pandas.util.testing.getSeriesData()
A:pandas.tests.frame.common._tsd->pandas.util.testing.getTimeSeriesData()
A:pandas.tests.frame.common._frame->pandas.DataFrame(_seriesd)
A:pandas.tests.frame.common._frame2->pandas.DataFrame(_seriesd, columns=['D', 'C', 'B', 'A'])
A:pandas.tests.frame.common._intframe->pandas.DataFrame(dict(((k, v.astype(int)) for (k, v) in compat.iteritems(_seriesd))))
A:pandas.tests.frame.common._tsframe->pandas.DataFrame(_tsd)
A:pandas.tests.frame.common._mixed_frame->pandas.DataFrame(_seriesd).copy()
A:pandas.tests.frame.common.result->pandas.DataFrame({'A': pd.date_range('20130101', periods=3), 'B': pd.date_range('20130101', periods=3, tz='US/Eastern'), 'C': pd.date_range('20130101', periods=3, tz='CET')})
A:pandas.tests.frame.common.arr->numpy.array([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])
A:pandas.tests.frame.common.dtypes->dict([(k, dtype) for (k, v) in dtypes.items()])
pandas.tests.frame.common.TestData(object)
pandas.tests.frame.common.TestData.all_mixed(self)
pandas.tests.frame.common.TestData.empty(self)
pandas.tests.frame.common.TestData.frame(self)
pandas.tests.frame.common.TestData.frame2(self)
pandas.tests.frame.common.TestData.intframe(self)
pandas.tests.frame.common.TestData.mixed_float(self)
pandas.tests.frame.common.TestData.mixed_float2(self)
pandas.tests.frame.common.TestData.mixed_frame(self)
pandas.tests.frame.common.TestData.mixed_int(self)
pandas.tests.frame.common.TestData.simple(self)
pandas.tests.frame.common.TestData.ts1(self)
pandas.tests.frame.common.TestData.ts2(self)
pandas.tests.frame.common.TestData.tsframe(self)
pandas.tests.frame.common.TestData.tzframe(self)
pandas.tests.frame.common._check_mixed_float(df,dtype=None)
pandas.tests.frame.common._check_mixed_int(df,dtype=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_query_eval.py----------------------------------------
A:pandas.tests.frame.test_query_eval.self.df->DataFrame({'A': [1, 2, 3]})
A:pandas.tests.frame.test_query_eval.result->DataFrame({'a': [1, 2], 'b': ['c', 'd']}).query('sin > 5', engine=engine, parser=parser)
A:pandas.tests.frame.test_query_eval.df->DataFrame({'a': [1, 2], 'b': ['c', 'd']})
A:pandas.tests.frame.test_query_eval.m->DataFrame({'a': [1, 2], 'b': ['c', 'd']}).mean()
A:pandas.tests.frame.test_query_eval.base->DataFrame(np.tile(m.values, n).reshape(n, -1), columns=list('abcd'))
A:pandas.tests.frame.test_query_eval.expected->DataFrame({'a': [1, 2], 'b': ['c', 'd']}).query('(@df>0) & (@df2>0)', engine=engine, parser=parser)
A:pandas.tests.frame.test_query_eval.a->Series(np.random.choice(list('abcde'), 20))
A:pandas.tests.frame.test_query_eval.b->Series(np.arange(a.size))
A:pandas.tests.frame.test_query_eval.index->pandas.MultiIndex.from_arrays([a, b])
A:pandas.tests.frame.test_query_eval.ind->Series(df.index.get_level_values(0).values, index=index)
A:pandas.tests.frame.test_query_eval.res1->DataFrame({'a': [1, 2], 'b': ['c', 'd']}).query('["eggs"] not in ilevel_1', parser=parser, engine=engine)
A:pandas.tests.frame.test_query_eval.res2->DataFrame({'a': [1, 2], 'b': ['c', 'd']}).query('"eggs" not in ilevel_1', parser=parser, engine=engine)
A:pandas.tests.frame.test_query_eval.res->self.frame.eval('a[a < 1] + b', engine=self.engine, parser=self.parser)
A:pandas.tests.frame.test_query_eval.resolvers->DataFrame({'a': [1, 2], 'b': ['c', 'd']})._get_index_resolvers()
A:pandas.tests.frame.test_query_eval.level_values->mi.get_level_values(level)
A:pandas.tests.frame.test_query_eval.s->mi.get_level_values(level).to_series()
A:pandas.tests.frame.test_query_eval.col_series->DataFrame({'a': [1, 2], 'b': ['c', 'd']}).columns.to_series()
A:pandas.tests.frame.test_query_eval.p->pandas.util.testing.makePanel(7)
A:pandas.tests.frame.test_query_eval.p.items->pandas.util.testing.makeCustomIndex(len(p.items), nlevels=2)
A:pandas.tests.frame.test_query_eval.p4d->pandas.util.testing.makePanel4D(7)
A:pandas.tests.frame.test_query_eval.p4d.items->pandas.util.testing.makeCustomIndex(len(p4d.items), nlevels=2)
A:pandas.tests.frame.test_query_eval.df['dates1']->date_range('1/1/2012', periods=n)
A:pandas.tests.frame.test_query_eval.df['dates2']->date_range('1/1/2013', periods=n)
A:pandas.tests.frame.test_query_eval.df['dates3']->date_range('1/1/2014', periods=n)
A:pandas.tests.frame.test_query_eval.d['dates1']->date_range('1/1/2012', periods=n)
A:pandas.tests.frame.test_query_eval.d['dates3']->date_range('1/1/2014', periods=n)
A:pandas.tests.frame.test_query_eval.df2->DataFrame(np.random.randn(5, 3))
A:pandas.tests.frame.test_query_eval.cols->list('abc')
A:pandas.tests.frame.test_query_eval.d->dict(zip(ops, (operator.eq, operator.ne)))
A:pandas.tests.frame.test_query_eval.df['strings']->Series(list('aabbccddee'))
A:pandas.tests.frame.test_query_eval.ex->'{lhs} {op} {rhs}'.format(lhs=lhs, op=op, rhs=rhs)
A:pandas.tests.frame.test_query_eval.data->numpy.random.randint(2, size=(1, len(columns))).astype(bool)
A:pandas.tests.frame.test_query_eval.r->DataFrame({'a': [1, 2], 'b': ['c', 'd']}).query('Symbol == @symb', parser=parser, engine=engine)
A:pandas.tests.frame.test_query_eval.self.frame->DataFrame(randn(10, 3), columns=list('abc'))
pandas.tests.frame.test_query_eval.TestCompat(object)
pandas.tests.frame.test_query_eval.TestCompat.setup_method(self,method)
pandas.tests.frame.test_query_eval.TestCompat.test_query_None(self)
pandas.tests.frame.test_query_eval.TestCompat.test_query_default(self)
pandas.tests.frame.test_query_eval.TestCompat.test_query_numexpr(self)
pandas.tests.frame.test_query_eval.TestCompat.test_query_python(self)
pandas.tests.frame.test_query_eval.TestDataFrameEval(TestData)
pandas.tests.frame.test_query_eval.TestDataFrameEval.test_eval_resolvers_as_list(self)
pandas.tests.frame.test_query_eval.TestDataFrameEval.test_ops(self)
pandas.tests.frame.test_query_eval.TestDataFrameEval.test_query_empty_string(self)
pandas.tests.frame.test_query_eval.TestDataFrameEval.test_query_non_str(self)
pandas.tests.frame.test_query_eval.TestDataFrameEvalNumExprPandas(object)
pandas.tests.frame.test_query_eval.TestDataFrameEvalNumExprPandas.setup_class(cls)
pandas.tests.frame.test_query_eval.TestDataFrameEvalNumExprPandas.setup_method(self,method)
pandas.tests.frame.test_query_eval.TestDataFrameEvalNumExprPandas.teardown_method(self,method)
pandas.tests.frame.test_query_eval.TestDataFrameEvalNumExprPandas.test_bool_arith_expr(self)
pandas.tests.frame.test_query_eval.TestDataFrameEvalNumExprPandas.test_invalid_type_for_operator_raises(self)
pandas.tests.frame.test_query_eval.TestDataFrameEvalNumExprPandas.test_simple_expr(self)
pandas.tests.frame.test_query_eval.TestDataFrameEvalNumExprPython(TestDataFrameEvalNumExprPandas)
pandas.tests.frame.test_query_eval.TestDataFrameEvalNumExprPython.setup_class(cls)
pandas.tests.frame.test_query_eval.TestDataFrameEvalPythonPandas(TestDataFrameEvalNumExprPandas)
pandas.tests.frame.test_query_eval.TestDataFrameEvalPythonPandas.setup_class(cls)
pandas.tests.frame.test_query_eval.TestDataFrameEvalPythonPython(TestDataFrameEvalNumExprPython)
pandas.tests.frame.test_query_eval.TestDataFrameEvalPythonPython.setup_class(cls)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas(object)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.setup_class(cls)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.teardown_class(cls)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_at_inside_string(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_chained_cmp_and_in(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_date_index_query(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_date_index_query_with_NaT(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_date_index_query_with_NaT_duplicates(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_date_query_no_attribute_access(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_date_query_with_NaT(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_date_query_with_attribute_access(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_date_query_with_non_date(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_index_resolvers_come_after_columns_with_the_same_name(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_inf(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_local_syntax(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_local_variable_with_in(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_nested_raises_on_local_self_reference(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_nested_scope(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_query(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_query_builtin(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_query_doesnt_pickup_local(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_query_index_with_name(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_query_index_without_name(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_query_scope(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_query_syntax_error(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas.test_query_undefined_local(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPython(TestDataFrameQueryNumExprPandas)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPython.setup_class(cls)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPython.test_date_index_query(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPython.test_date_index_query_with_NaT(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPython.test_date_index_query_with_NaT_duplicates(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPython.test_date_query_no_attribute_access(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPython.test_date_query_with_NaT(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPython.test_nested_scope(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryPythonPandas(TestDataFrameQueryNumExprPandas)
pandas.tests.frame.test_query_eval.TestDataFrameQueryPythonPandas.setup_class(cls)
pandas.tests.frame.test_query_eval.TestDataFrameQueryPythonPandas.test_query_builtin(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryPythonPython(TestDataFrameQueryNumExprPython)
pandas.tests.frame.test_query_eval.TestDataFrameQueryPythonPython.setup_class(cls)
pandas.tests.frame.test_query_eval.TestDataFrameQueryPythonPython.test_query_builtin(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryStrings(object)
pandas.tests.frame.test_query_eval.TestDataFrameQueryStrings.test_object_array_eq_ne(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryStrings.test_query_lex_compare_strings(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryStrings.test_query_single_element_booleans(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryStrings.test_query_string_scalar_variable(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryStrings.test_query_with_nested_special_character(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryStrings.test_query_with_nested_strings(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryStrings.test_query_with_string_columns(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryStrings.test_str_list_query_method(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryStrings.test_str_query_method(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryWithMultiIndex(object)
pandas.tests.frame.test_query_eval.TestDataFrameQueryWithMultiIndex.test_query_multiindex_get_index_resolvers(self)
pandas.tests.frame.test_query_eval.TestDataFrameQueryWithMultiIndex.test_query_with_named_multiindex(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryWithMultiIndex.test_query_with_partially_named_multiindex(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryWithMultiIndex.test_query_with_unnamed_multiindex(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryWithMultiIndex.test_raise_on_panel4d_with_multiindex(self,parser,engine)
pandas.tests.frame.test_query_eval.TestDataFrameQueryWithMultiIndex.test_raise_on_panel_with_multiindex(self,parser,engine)
pandas.tests.frame.test_query_eval.engine(request)
pandas.tests.frame.test_query_eval.parser(request)
pandas.tests.frame.test_query_eval.skip_if_no_ne(engine='numexpr')
pandas.tests.frame.test_query_eval.skip_if_no_pandas_parser(parser)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_quantile.py----------------------------------------
A:pandas.tests.frame.test_quantile.q->DataFrame(columns=['a', 'b'], dtype='datetime64[ns]').quantile(0.1, axis=0, interpolation='higher')
A:pandas.tests.frame.test_quantile.df->DataFrame(columns=['a', 'b'], dtype='datetime64[ns]')
A:pandas.tests.frame.test_quantile.rs->DataFrame(columns=['a', 'b'], dtype='datetime64[ns]').quantile(0.5)
A:pandas.tests.frame.test_quantile.xp->DataFrame(columns=['a', 'b'], dtype='datetime64[ns]').median().rename(0.5)
A:pandas.tests.frame.test_quantile.result->df[['a', 'c']].quantile([0.5], axis=1, numeric_only=False)
A:pandas.tests.frame.test_quantile.expected->DataFrame([[Timestamp('2010-07-02 12:00:00'), Timestamp('2011-07-02 12:00:00')]], index=[0.5], columns=[0, 1])
A:pandas.tests.frame.test_quantile.q1->self.intframe.quantile(0.1)
A:pandas.tests.frame.test_quantile.exp->DataFrame([[np.nan, np.nan]], columns=['a', 'b'], index=[0.5])
A:pandas.tests.frame.test_quantile.df['c']->pandas.to_datetime(['2011', '2012'])
A:pandas.tests.frame.test_quantile.res->DataFrame(columns=['a', 'b'], dtype='datetime64[ns]').quantile([0.5])
pandas.tests.frame.test_quantile.TestDataFrameQuantile(TestData)
pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile(self)
pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_axis_mixed(self)
pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_axis_parameter(self)
pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_box(self)
pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_datetime(self)
pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_empty(self)
pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_interpolation(self)
pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_interpolation_np_lt_1p9(self)
pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_invalid(self)
pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_multi(self)
pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_nan(self)
pandas.tests.frame.test_quantile.TestDataFrameQuantile.test_quantile_nat(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_sorting.py----------------------------------------
A:pandas.tests.frame.test_sorting.frame->DataFrame(np.arange(16).reshape(4, 4), index=[1, 2, 3, 4], columns=['A', 'B', 'C', 'D'])
A:pandas.tests.frame.test_sorting.sorted_df->DataFrame([[1, 2], [3, 4]], mi).sort_values(['A', 'B'], ascending=[0, 0], na_position='first', kind='mergesort')
A:pandas.tests.frame.test_sorting.expected->pandas.IntervalIndex.from_tuples([(-3.0, -0.5), (-0.5, 0.0), (0.0, 0.5), (0.5, 3.0)], closed='right')
A:pandas.tests.frame.test_sorting.df->DataFrame([[1, 2], [3, 4]], mi)
A:pandas.tests.frame.test_sorting.df1->DataFrame([[1, 2], [3, 4]], mi).sort_values(by='B')
A:pandas.tests.frame.test_sorting.df2->DataFrame([[1, 2], [3, 4]], mi).sort_values(by=['B'])
A:pandas.tests.frame.test_sorting.cp->s.copy()
A:pandas.tests.frame.test_sorting.df_reversed->DataFrame(dict(datetime=[NaT, Timestamp('2016-01-01')], float=float_values[::-1]), columns=['datetime', 'float'], index=[1, 0])
A:pandas.tests.frame.test_sorting.df_sorted->DataFrame([[1, 2], [3, 4]], mi).sort_values(['datetime', 'float'], na_position='last')
A:pandas.tests.frame.test_sorting.A->A.take(indexer).take(indexer)
A:pandas.tests.frame.test_sorting.B->B.take(indexer).take(indexer)
A:pandas.tests.frame.test_sorting.result->pandas.concat([y, x1, x2], axis=1, keys=['Y', 'X1', 'X2']).groupby(['X1', 'X2']).mean().unstack()
A:pandas.tests.frame.test_sorting.indexer->numpy.random.permutation(100)
A:pandas.tests.frame.test_sorting.a_id->id(unordered['A'])
A:pandas.tests.frame.test_sorting.ex_indexer->numpy.lexsort((df.B.max() - df.B, df.A))
A:pandas.tests.frame.test_sorting.idf->DataFrame([[1, 2], [3, 4]], mi).set_index(['A', 'B'])
A:pandas.tests.frame.test_sorting.mi->pandas.MultiIndex.from_tuples([[1, 1, 3], [1, 1, 1]], names=list('ABC'))
A:pandas.tests.frame.test_sorting.res->DataFrame([[1, 2], [3, 4]], mi).sort_index(level=['A', 'B'], sort_remaining=False)
A:pandas.tests.frame.test_sorting.y->Series(np.random.randn(100))
A:pandas.tests.frame.test_sorting.x1->Series(np.sign(np.random.randn(100)))
A:pandas.tests.frame.test_sorting.x2->pandas.cut(Series(np.random.randn(100)), bins=[-3, -0.5, 0, 0.5, 3])
A:pandas.tests.frame.test_sorting.model->pandas.concat([y, x1, x2], axis=1, keys=['Y', 'X1', 'X2'])
pandas.tests.frame.test_sorting.TestDataFrameSortIndexKinds(TestData)
pandas.tests.frame.test_sorting.TestDataFrameSortIndexKinds.test_sort_index(self)
pandas.tests.frame.test_sorting.TestDataFrameSortIndexKinds.test_sort_index_categorical_index(self)
pandas.tests.frame.test_sorting.TestDataFrameSortIndexKinds.test_sort_index_different_sortorder(self)
pandas.tests.frame.test_sorting.TestDataFrameSortIndexKinds.test_sort_index_duplicates(self)
pandas.tests.frame.test_sorting.TestDataFrameSortIndexKinds.test_sort_index_inplace(self)
pandas.tests.frame.test_sorting.TestDataFrameSortIndexKinds.test_sort_index_intervalindex(self)
pandas.tests.frame.test_sorting.TestDataFrameSortIndexKinds.test_sort_index_level(self)
pandas.tests.frame.test_sorting.TestDataFrameSortIndexKinds.test_sort_index_multicolumn(self)
pandas.tests.frame.test_sorting.TestDataFrameSortIndexKinds.test_sort_index_multiindex(self)
pandas.tests.frame.test_sorting.TestDataFrameSorting(TestData)
pandas.tests.frame.test_sorting.TestDataFrameSorting.test_frame_column_inplace_sort_exception(self)
pandas.tests.frame.test_sorting.TestDataFrameSorting.test_sort(self)
pandas.tests.frame.test_sorting.TestDataFrameSorting.test_sort_datetimes(self)
pandas.tests.frame.test_sorting.TestDataFrameSorting.test_sort_nan(self)
pandas.tests.frame.test_sorting.TestDataFrameSorting.test_sort_nat_values_in_int_column(self)
pandas.tests.frame.test_sorting.TestDataFrameSorting.test_sort_values(self)
pandas.tests.frame.test_sorting.TestDataFrameSorting.test_sort_values_inplace(self)
pandas.tests.frame.test_sorting.TestDataFrameSorting.test_stable_descending_multicolumn_sort(self)
pandas.tests.frame.test_sorting.TestDataFrameSorting.test_stable_descending_sort(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_mutate_columns.py----------------------------------------
A:pandas.tests.frame.test_mutate_columns.df->df.rename(columns={}).rename(columns={})
A:pandas.tests.frame.test_mutate_columns.original->df.rename(columns={}).rename(columns={}).copy()
A:pandas.tests.frame.test_mutate_columns.result->df.rename(columns={}).rename(columns={}).rename(columns={})
A:pandas.tests.frame.test_mutate_columns.expected->DataFrame([[1.3, 1, 1.1], [2.3, 2, 2.2]], columns=['c', 'a', 'b'])
A:pandas.tests.frame.test_mutate_columns.s->DataFrame({'foo': ['a', 'b', 'c', 'a'], 'fiz': ['g', 'h', 'i', 'j']}).set_index('foo')
A:pandas.tests.frame.test_mutate_columns.df['gr']->df.rename(columns={}).rename(columns={}).groupby(['b', 'c']).count()
A:pandas.tests.frame.test_mutate_columns.new_col->numpy.random.randn(N)
A:pandas.tests.frame.test_mutate_columns.df['x']->df['a'].astype('float32').astype('float32')
A:pandas.tests.frame.test_mutate_columns.df['a']->df['a'].astype('float32').astype('float32')
A:pandas.tests.frame.test_mutate_columns.df['y']->df['a'].astype('float32').astype('float32').astype('int32')
A:pandas.tests.frame.test_mutate_columns.exp->DataFrame(data={'X': ['x', 'y', 'z']}, index=['A', 'B', 'C'])
A:pandas.tests.frame.test_mutate_columns.midx->pandas.MultiIndex.from_product([['A', 'B'], [1, 2]])
A:pandas.tests.frame.test_mutate_columns.a->DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'], index=['X', 'Y'])
A:pandas.tests.frame.test_mutate_columns.b->DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'], index=['X', 'Y']).pop('B')
A:pandas.tests.frame.test_mutate_columns.res->df.rename(columns={}).rename(columns={}).pop('a')
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns(TestData)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_assign(self)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_assign_alphabetical(self)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_assign_bad(self)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_assign_multiple(self)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_delitem(self)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_delitem_multiindex(self)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_insert(self)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_insert_benchmark(self)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_insert_column_bug_4032(self)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_insert_error_msmgs(self)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_pop(self)
pandas.tests.frame.test_mutate_columns.TestDataFrameMutateColumns.test_pop_non_unique_cols(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_indexing.py----------------------------------------
A:pandas.tests.frame.test_indexing.df->df.reset_index().set_index('foo')
A:pandas.tests.frame.test_indexing.df['$10']->randn(len(df))
A:pandas.tests.frame.test_indexing.ad->randn(len(df))
A:pandas.tests.frame.test_indexing.b->DataFrame({0: [np.nan, 3], 1: [3, np.nan]})
A:pandas.tests.frame.test_indexing.result->df.reset_index().set_index('foo').reset_index()
A:pandas.tests.frame.test_indexing.idx->lrange(3)
A:pandas.tests.frame.test_indexing.data['A']->range(len(data.index) - 1)
A:pandas.tests.frame.test_indexing.expected->DataFrame(self.df.values.T)
A:pandas.tests.frame.test_indexing.data->numpy.random.randn(6, 1)
A:pandas.tests.frame.test_indexing.tuples->lzip(self.frame['A'], self.frame['B'])
A:pandas.tests.frame.test_indexing.cols->pandas.MultiIndex.from_product(it)
A:pandas.tests.frame.test_indexing.index->Index(range(2), name='i')
A:pandas.tests.frame.test_indexing.vals->randn(5)
A:pandas.tests.frame.test_indexing.exp->DataFrame([[3, 4, 5], [6, 7, 8], [19, 20, 21]])
A:pandas.tests.frame.test_indexing.indexer_obj->indexer_obj.reindex(self.tsframe.index[::-1]).reindex(self.tsframe.index[::-1])
A:pandas.tests.frame.test_indexing.bifw->bifw.reindex(columns=df.columns).reindex(columns=df.columns)
A:pandas.tests.frame.test_indexing.df['E']->df['E'].astype('int32').astype('int32')
A:pandas.tests.frame.test_indexing.df['E1']->df['E'].astype('int32').astype('int32').copy()
A:pandas.tests.frame.test_indexing.df['F']->numpy.timedelta64('NaT')
A:pandas.tests.frame.test_indexing.df['F1']->numpy.timedelta64('NaT').copy()
A:pandas.tests.frame.test_indexing.mask->DataFrame(False, columns=df.columns, index=df.index)
A:pandas.tests.frame.test_indexing.arr->randn(5, len(frame.columns))
A:pandas.tests.frame.test_indexing.blah->DataFrame(np.empty([0, 1]), columns=['A'], index=DatetimeIndex([]))
A:pandas.tests.frame.test_indexing.k->numpy.array([], bool)
A:pandas.tests.frame.test_indexing.a->DataFrame({0: [4, 6], 1: [1, 0]})
A:pandas.tests.frame.test_indexing.self.frame[dtype]->numpy.array(arr, dtype=dtype)
A:pandas.tests.frame.test_indexing.s->Series([0, np.nan])
A:pandas.tests.frame.test_indexing.series->self.frame.xs('A', axis=1)
A:pandas.tests.frame.test_indexing.self.frame['D']->self.frame['D'].astype('i8')
A:pandas.tests.frame.test_indexing.self.frame['B']->numpy.arange(len(self.frame))
A:pandas.tests.frame.test_indexing.df.one->numpy.int8(7)
A:pandas.tests.frame.test_indexing.dm->DataFrame(np.arange(20.0).reshape(4, 5), index=lrange(4), columns=lrange(5))
A:pandas.tests.frame.test_indexing.coercable_series->Series([Decimal(1) for _ in range(3)], index=lrange(3))
A:pandas.tests.frame.test_indexing.uncoercable_series->Series(['foo', 'bzr', 'baz'], index=lrange(3))
A:pandas.tests.frame.test_indexing.dm[0]->numpy.ones(3)
A:pandas.tests.frame.test_indexing.df2->df.reset_index().set_index('foo').copy()
A:pandas.tests.frame.test_indexing.f->self.mixed_frame.copy()
A:pandas.tests.frame.test_indexing.cp->df.reset_index().set_index('foo').copy()
A:pandas.tests.frame.test_indexing.frame->DataFrame(test_data)
A:pandas.tests.frame.test_indexing.frame2->self.frame.copy()
A:pandas.tests.frame.test_indexing.values->randn(5, 2)
A:pandas.tests.frame.test_indexing.expected1->self.frame.copy()
A:pandas.tests.frame.test_indexing.expected2->self.frame.copy()
A:pandas.tests.frame.test_indexing.tmp->df.reset_index().set_index('foo').copy()
A:pandas.tests.frame.test_indexing.df_orig->DataFrame(randn(3, 3), index=lrange(3), columns=list('ABC'))
A:pandas.tests.frame.test_indexing.out->df.reset_index().set_index('foo').where(Series(cond))
A:pandas.tests.frame.test_indexing.result2->df.reset_index().set_index('foo').copy()
A:pandas.tests.frame.test_indexing.xp->df.reset_index().set_index('foo').reindex(['x'], columns=[('a', '1')])
A:pandas.tests.frame.test_indexing.xs2->self.mixed_frame.copy().xs(f.index[5])
A:pandas.tests.frame.test_indexing.i->numpy.concatenate(list(map(f, idx)))
A:pandas.tests.frame.test_indexing.val->randn()
A:pandas.tests.frame.test_indexing.k1->numpy.array([True, False, True])
A:pandas.tests.frame.test_indexing.k2->numpy.array([False, True])
A:pandas.tests.frame.test_indexing.df['timestamp']->Timestamp('20010102')
A:pandas.tests.frame.test_indexing.piece->DataFrame([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0], [7.0, 8.0]], index=list(f.index[0:2]) + ['foo', 'bar'], columns=['A', 'B'])
A:pandas.tests.frame.test_indexing.df['mask']->df.reset_index().set_index('foo').lookup(df.index, 'mask_' + df['label'])
A:pandas.tests.frame.test_indexing.exp_mask->alt(df, df.index, 'mask_' + df['label'], dtype=np.bool_)
A:pandas.tests.frame.test_indexing.res->df.reset_index().set_index('foo').mask(DataFrame([[True, False]]))
A:pandas.tests.frame.test_indexing.res3->df.reset_index().set_index('foo').mask(DataFrame([[True, False]])).set_value('foobar', 'baz', 5)
A:pandas.tests.frame.test_indexing.exp_col->df[2].copy()
A:pandas.tests.frame.test_indexing.l->list(df.index)
A:pandas.tests.frame.test_indexing.target->numpy.array([-0.1, 0.9, 1.1, 1.5])
A:pandas.tests.frame.test_indexing.actual->df.reset_index().set_index('foo').reindex(target, method='nearest', tolerance=0.2)
A:pandas.tests.frame.test_indexing.rng->date_range('1/1/2000 00:00:00', periods=10, freq='10s')
A:pandas.tests.frame.test_indexing.x->DataFrame([datetime.now(), datetime.now()])
A:pandas.tests.frame.test_indexing.dr->pandas.date_range('2013-08-01', periods=6, freq='B')
A:pandas.tests.frame.test_indexing.df_rev->pandas.DataFrame(data, index=dr[[3, 4, 5] + [0, 1, 2]], columns=list('A'))
A:pandas.tests.frame.test_indexing.left->df.reset_index().set_index('foo').set_index(icol).reindex(idx, level=level)
A:pandas.tests.frame.test_indexing.right->df.reset_index().set_index('foo').iloc[indexer].set_index(icol)
A:pandas.tests.frame.test_indexing.sp_series->pandas.Series([0, 0, 1], index=[2, 1, 0]).to_sparse(fill_value=0)
A:pandas.tests.frame.test_indexing.column->pandas.Series(pd.date_range('2015-01-01', periods=3, tz='utc'), name='dates')
A:pandas.tests.frame.test_indexing.df.loc[0:1, 'c']->numpy.datetime64('2008-08-08')
A:pandas.tests.frame.test_indexing.df.loc[2, 'c']->date(2005, 5, 5)
A:pandas.tests.frame.test_indexing.one_hour->timedelta(hours=1)
A:pandas.tests.frame.test_indexing.df['A']->numpy.array([1 * one_hour] * 4, dtype='m8[ns]')
A:pandas.tests.frame.test_indexing.df.loc[:, 'B']->numpy.array([2 * one_hour] * 4, dtype='m8[ns]')
A:pandas.tests.frame.test_indexing.df.loc[:3, 'C']->numpy.array([3 * one_hour] * 3, dtype='m8[ns]')
A:pandas.tests.frame.test_indexing.df.loc[:, 'D']->numpy.array([4 * one_hour] * 4, dtype='m8[ns]')
A:pandas.tests.frame.test_indexing.df.loc[df.index[:3], 'E']->numpy.array([5 * one_hour] * 3, dtype='m8[ns]')
A:pandas.tests.frame.test_indexing.df.loc[df.index[:-1], 'F']->numpy.array([6 * one_hour] * 3, dtype='m8[ns]')
A:pandas.tests.frame.test_indexing.df.loc[df.index[-3]:, 'G']->date_range('20130101', periods=3)
A:pandas.tests.frame.test_indexing.df['H']->numpy.datetime64('NaT')
A:pandas.tests.frame.test_indexing.akey->time(12, 0, 0)
A:pandas.tests.frame.test_indexing.bkey->slice(time(13, 0, 0), time(14, 0, 0))
A:pandas.tests.frame.test_indexing.xs->df.reset_index().set_index('foo').xs(0)
A:pandas.tests.frame.test_indexing.cross->df.reset_index().set_index('foo').xs('c')
A:pandas.tests.frame.test_indexing.IndexType->namedtuple('IndexType', ['a', 'b'])
A:pandas.tests.frame.test_indexing.idx1->IndexType('foo', 'bar')
A:pandas.tests.frame.test_indexing.idx2->IndexType('baz', 'bof')
A:pandas.tests.frame.test_indexing.df1->DataFrame(index=idx, columns=cols, data=np.array([[0.0, 0.5, 1.0], [1.5, 2.0, 2.5], [3.0, 3.5, 4.0]], dtype=float))
A:pandas.tests.frame.test_indexing.default_frame->DataFrame(np.random.randn(5, 3), columns=['A', 'B', 'C'])
A:pandas.tests.frame.test_indexing.other1->_safe_add(df)
A:pandas.tests.frame.test_indexing.rs->df.reset_index().set_index('foo').where(cond, other)
A:pandas.tests.frame.test_indexing.rs2->df.reset_index().set_index('foo').where(cond.values, other1)
A:pandas.tests.frame.test_indexing.check_dtypes->all([not issubclass(s.type, np.integer) for s in df.dtypes])
A:pandas.tests.frame.test_indexing.dfi->df.reset_index().set_index('foo').copy()
A:pandas.tests.frame.test_indexing.econd->numpy.array([False, True, False, True]).reindex_like(df).fillna(True)
A:pandas.tests.frame.test_indexing.v->numpy.dtype('float64')
A:pandas.tests.frame.test_indexing.cond->numpy.array([False, True, False, True])
A:pandas.tests.frame.test_indexing.stamp->datetime(2013, 1, 3)
A:pandas.tests.frame.test_indexing.s1->Series(1, index=df.columns)
A:pandas.tests.frame.test_indexing.s2->Series(2, index=df.index)
A:pandas.tests.frame.test_indexing.expected[2]->expected[2].astype(int).astype(int)
A:pandas.tests.frame.test_indexing.expected[3]->expected[3].astype(int).astype(int)
A:pandas.tests.frame.test_indexing.d1->df.reset_index().set_index('foo').copy().drop(1, axis=0)
A:pandas.tests.frame.test_indexing.d2->df.reset_index().set_index('foo').copy().drop(1, axis=1)
A:pandas.tests.frame.test_indexing.other->DataFrame(np.random.randn(5, 3))
A:pandas.tests.frame.test_indexing.rdf->df.reset_index().set_index('foo').copy()
A:pandas.tests.frame.test_indexing.expec->DataFrame([[nan, 2]])
A:pandas.tests.frame.test_indexing.empty_df->DataFrame()
A:pandas.tests.frame.test_indexing.dg->df.reset_index().set_index('foo').pivot_table(index='i', columns='c', values=['x', 'y'])
A:pandas.tests.frame.test_indexing.columns->MultiIndex(levels=[['x', 'y'], [0, 1]], labels=[[0, 1], [0, 0]], names=[None, 'c'])
A:pandas.tests.frame.test_indexing.self.idx->Index([2 ** 63, 2 ** 63 + 5, 2 ** 63 + 10], name='foo')
A:pandas.tests.frame.test_indexing.self.dr->date_range('20130110', periods=3)
A:pandas.tests.frame.test_indexing.self.df->DataFrame({'A': self.idx, 'B': self.ir})
A:pandas.tests.frame.test_indexing.self.ir->Index(np.arange(3), dtype=np.uint64)
pandas.tests.frame.test_indexing.TestDataFrameIndexing(TestData)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_at_time_between_time_datetimeindex(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_boolean_index_empty_corner(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_boolean_indexing(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_boolean_indexing_mixed(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_delitem_corner(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_fancy_getitem_int_labels(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_fancy_getitem_slice_mixed(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_fancy_index_int_labels_exceptions(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_fancy_setitem_int_labels(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_get(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_get_set_value_no_partial_indexing(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_get_value(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getattr(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_boolean(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_boolean_casting(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_boolean_iadd(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_boolean_list(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_callable(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_dupe_cols(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_empty_frame_with_boolean(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_fancy_1d(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_fancy_2d(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_fancy_boolean(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_fancy_ints(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_fancy_scalar(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_fancy_slice_integers_step(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_iterator(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_ix_boolean_duplicates_multiple(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_ix_float_duplicates(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_ix_mixed_integer(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_list(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_list_duplicates(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_setitem_boolean_misaligned(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_setitem_boolean_multi(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_setitem_fancy_exceptions(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_setitem_float_labels(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_setitem_integer_slice_keyerrors(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_setitem_ix_bool_keyerror(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_setitem_ix_duplicates(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_setitem_ix_negative_integers(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_getitem_setitem_non_ix_labels(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_head_tail(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_iat(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_iloc_col(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_iloc_duplicates(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_iloc_row(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_iloc_sparse_propegate_fill_value(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_index_namedtuple(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_ix_align(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_ix_dup(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_ix_frame_align(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_ix_multi_take(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_ix_multi_take_multiindex(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_ix_multi_take_nonint_index(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_lookup(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_mask(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_mask_callable(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_mask_edge_case_1xN_frame(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_mask_inplace(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_nested_exception(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_non_monotonic_reindex_methods(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_reindex_frame_add_nat(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_reindex_level(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_reindex_methods(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_set_dataframe_column_ns_dtype(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_set_value(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_set_value_resize(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_set_value_with_index_dtype_change(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setattr_column(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_None(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_always_copy(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_ambig(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_boolean(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_boolean_column(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_callable(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_cast(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_clear_caches(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_corner(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_corner2(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_datetime_coercion(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_datetimelike_with_inference(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_empty(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_empty_frame_with_boolean(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_fancy_1d(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_fancy_2d(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_fancy_boolean(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_fancy_mixed_2d(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_fancy_scalar(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_frame(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_frame_align(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_list(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_list_not_dataframe(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_list_of_tuples(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_mulit_index(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_other_callable(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_single_column_mixed(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_single_column_mixed_datetime(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_tuple(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_with_sparse_value(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_with_unaligned_sparse_value(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_setitem_with_unaligned_tz_aware_datetime_column(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_single_element_ix_dont_upcast(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_slice_floats(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_type_error_multiindex(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_where(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_where_align(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_where_array_like(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_where_axis(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_where_bug(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_where_callable(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_where_complex(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_where_dataframe_col_match(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_where_datetime(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_where_invalid_input(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_where_ndframe_align(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_where_none(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_xs(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_xs_corner(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_xs_duplicates(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_xs_keep_level(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexing.test_xs_view(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexingDatetimeWithTZ(TestData)
pandas.tests.frame.test_indexing.TestDataFrameIndexingDatetimeWithTZ.setup_method(self,method)
pandas.tests.frame.test_indexing.TestDataFrameIndexingDatetimeWithTZ.test_set_reset(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexingDatetimeWithTZ.test_setitem(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexingDatetimeWithTZ.test_transpose(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexingUInt64(TestData)
pandas.tests.frame.test_indexing.TestDataFrameIndexingUInt64.setup_method(self,method)
pandas.tests.frame.test_indexing.TestDataFrameIndexingUInt64.test_set_reset(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexingUInt64.test_setitem(self)
pandas.tests.frame.test_indexing.TestDataFrameIndexingUInt64.test_transpose(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_apply.py----------------------------------------
A:pandas.tests.frame.test_apply.applied->self.frame.applymap(lambda x: x * 2)
A:pandas.tests.frame.test_apply.df->DataFrame({'A': [1, 2, 3], 'B': [1.0, 2.0, 3.0], 'C': ['foo', 'bar', 'baz'], 'D': pd.date_range('20130101', periods=3)})
A:pandas.tests.frame.test_apply.result->DataFrame({'A': [1, 2, 3], 'B': [1.0, 2.0, 3.0], 'C': ['foo', 'bar', 'baz'], 'D': pd.date_range('20130101', periods=3)}).agg(['sum'])
A:pandas.tests.frame.test_apply.expected->DataFrame([[6, 6.0, 'foobarbaz']], index=['sum'], columns=['A', 'B', 'C'])
A:pandas.tests.frame.test_apply.xp->Series([1, 4, 7], ['a', 'a', 'c'])
A:pandas.tests.frame.test_apply.rs->DataFrame({'A': [1, 2, 3], 'B': [1.0, 2.0, 3.0], 'C': ['foo', 'bar', 'baz'], 'D': pd.date_range('20130101', periods=3)}).T.apply(lambda s: s[0], axis=0)
A:pandas.tests.frame.test_apply.empty_with_cols->DataFrame(columns=['a', 'b', 'c'])
A:pandas.tests.frame.test_apply.broadcasted->self.frame.apply(np.mean, axis=1, broadcast=True)
A:pandas.tests.frame.test_apply.agged->self.frame.apply(np.mean, axis=1)
A:pandas.tests.frame.test_apply.result0->DataFrame({'A': [1, 2, 3], 'B': [1.0, 2.0, 3.0], 'C': ['foo', 'bar', 'baz'], 'D': pd.date_range('20130101', periods=3)}).apply(Series.describe, axis=0)
A:pandas.tests.frame.test_apply.result1->DataFrame({'A': [1, 2, 3], 'B': [1.0, 2.0, 3.0], 'C': ['foo', 'bar', 'baz'], 'D': pd.date_range('20130101', periods=3)}).apply(Series.describe, axis=1)
A:pandas.tests.frame.test_apply.expected0->DataFrame(dict(((i, v.describe()) for (i, v) in compat.iteritems(df))), columns=df.columns)
A:pandas.tests.frame.test_apply.expected1->self.frame.apply(lambda x: x.values.mean(), axis=1)
A:pandas.tests.frame.test_apply.tapplied->self.frame.apply(np.mean, axis=1)
A:pandas.tests.frame.test_apply.no_cols->DataFrame(index=['a', 'b', 'c'])
A:pandas.tests.frame.test_apply.no_index->DataFrame(columns=['a', 'b', 'c'])
A:pandas.tests.frame.test_apply.test_res->f(np.array([], dtype='f8'))
A:pandas.tests.frame.test_apply.res->DataFrame({'A': [1, 2, 3], 'B': [1.0, 2.0, 3.0], 'C': ['foo', 'bar', 'baz'], 'D': pd.date_range('20130101', periods=3)}).applymap(lambda x: '{0}'.format(x.__class__.__name__))
A:pandas.tests.frame.test_apply.agg_axis->DataFrame({'A': [1, 2, 3], 'B': [1.0, 2.0, 3.0], 'C': ['foo', 'bar', 'baz'], 'D': pd.date_range('20130101', periods=3)})._get_agg_axis(axis)
A:pandas.tests.frame.test_apply.exp->pandas.DataFrame({'a': ['Timestamp', 'Timestamp'], 'b': ['Timestamp', 'Timestamp'], 'c': ['Timedelta', 'Timedelta'], 'd': ['Period', 'Period']})
A:pandas.tests.frame.test_apply.data->DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'foo', 'foo', 'foo'], 'B': ['one', 'one', 'one', 'two', 'one', 'one', 'one', 'two', 'two', 'two', 'one'], 'C': ['dull', 'dull', 'shiny', 'dull', 'dull', 'shiny', 'shiny', 'dull', 'shiny', 'shiny', 'shiny'], 'D': np.random.randn(11), 'E': np.random.randn(11), 'F': np.random.randn(11)})
A:pandas.tests.frame.test_apply.positions->DataFrame([[datetime(2013, 1, 1), 'ABC0', 50], [datetime(2013, 1, 2), 'YUM0', 20], [datetime(2013, 1, 3), 'DEF0', 20], [datetime(2013, 1, 4), 'ABC1', 50], [datetime(2013, 1, 5), 'YUM1', 20], [datetime(2013, 1, 6), 'DEF1', 20]], columns=['a', 'market', 'position'])
A:pandas.tests.frame.test_apply.s->DataFrame([[1, 2], [3, 4], [5, 6]])
A:pandas.tests.frame.test_apply.s.index->pandas.MultiIndex.from_arrays([['a', 'a', 'b'], ['c', 'd', 'd']])
A:pandas.tests.frame.test_apply.A->DataFrame([['foo', 'bar'], ['spam', 'eggs']])
A:pandas.tests.frame.test_apply.A_dicts->pandas.Series([dict([(0, 'foo'), (1, 'spam')]), dict([(0, 'bar'), (1, 'eggs')])])
A:pandas.tests.frame.test_apply.B->DataFrame([[0, 1], [2, 3]])
A:pandas.tests.frame.test_apply.B_dicts->pandas.Series([dict([(0, 0), (1, 2)]), dict([(0, 1), (1, 3)])])
A:pandas.tests.frame.test_apply.reduce_true->DataFrame({'A': [1, 2, 3], 'B': [1.0, 2.0, 3.0], 'C': ['foo', 'bar', 'baz'], 'D': pd.date_range('20130101', periods=3)}).apply(fn, reduce=True)
A:pandas.tests.frame.test_apply.reduce_false->DataFrame({'A': [1, 2, 3], 'B': [1.0, 2.0, 3.0], 'C': ['foo', 'bar', 'baz'], 'D': pd.date_range('20130101', periods=3)}).apply(fn, reduce=False)
A:pandas.tests.frame.test_apply.reduce_none->DataFrame({'A': [1, 2, 3], 'B': [1.0, 2.0, 3.0], 'C': ['foo', 'bar', 'baz'], 'D': pd.date_range('20130101', periods=3)}).apply(fn, reduce=None)
A:pandas.tests.frame.test_apply.df2->DataFrame({'A': [1, 2, 3], 'B': [1.0, 2.0, 3.0], 'C': ['foo', 'bar', 'baz'], 'D': pd.date_range('20130101', periods=3)}).copy()
A:pandas.tests.frame.test_apply.df['datetime']->Timestamp('20130101')
A:pandas.tests.frame.test_apply.df['timedelta']->pandas.Timedelta('1 min')
A:pandas.tests.frame.test_apply.f_sqrt->numpy.sqrt(self.frame)
A:pandas.tests.frame.test_apply.f_abs->numpy.abs(self.frame)
A:pandas.tests.frame.test_apply.expected.columns->pandas.MultiIndex.from_product([self.frame.columns, ['sqrt', 'absolute']])
pandas.tests.frame.test_apply.TestDataFrameAggregate(TestData)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_agg_dict_nested_renaming_depr(self)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_agg_reduce(self)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_agg_transform(self)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_demo(self)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_nuiscance_columns(self)
pandas.tests.frame.test_apply.TestDataFrameAggregate.test_transform_and_agg_err(self)
pandas.tests.frame.test_apply.TestDataFrameApply(TestData)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_attach_name(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_axis1(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_broadcast(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_bug(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_convert_objects(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_dict(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_differently_indexed(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_empty(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_empty_infer_type(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_ignore_failures(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_mixed_datetimelike(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_mixed_dtype_corner(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_modify_traceback(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_multi_index(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_non_numpy_dtype(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_raw(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_reduce_Series(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_standard_nonunique(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_with_args_kwds(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_apply_yield_list(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_applymap(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_applymap_box(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_frame_apply_dont_convert_datetime64(self)
pandas.tests.frame.test_apply.TestDataFrameApply.test_with_string_args(self)
pandas.tests.frame.test_apply.zip_frames(*frames)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_dtypes.py----------------------------------------
A:pandas.tests.frame.test_dtypes.df->DataFrame([1, 2, 3])
A:pandas.tests.frame.test_dtypes.df['a']->df['a'].astype(np.bool_).astype(np.bool_)
A:pandas.tests.frame.test_dtypes.df['b']->df['b'].astype(np.int32).astype(np.int32)
A:pandas.tests.frame.test_dtypes.df['c']->df['c'].astype(np.float64).astype(np.float64)
A:pandas.tests.frame.test_dtypes.result->str(self.tzframe)
A:pandas.tests.frame.test_dtypes.empty_df->pandas.DataFrame()
A:pandas.tests.frame.test_dtypes.nocols_df->pandas.DataFrame(index=[1, 2, 3])
A:pandas.tests.frame.test_dtypes.norows_df->pandas.DataFrame(columns=list('abc'))
A:pandas.tests.frame.test_dtypes.norows_int_df->pandas.DataFrame(columns=list('abc')).astype(np.int32)
A:pandas.tests.frame.test_dtypes.ex_dtypes->pandas.Series(odict([('a', np.int64), ('b', np.bool), ('c', np.float64)]))
A:pandas.tests.frame.test_dtypes.ex_ftypes->pandas.Series(odict([('a', 'int64:dense'), ('b', 'bool:dense'), ('c', 'float64:dense')]))
A:pandas.tests.frame.test_dtypes.tzframe->DataFrame({'A': date_range('20130101', periods=3), 'B': date_range('20130101', periods=3, tz='US/Eastern'), 'C': date_range('20130101', periods=3, tz='CET')})
A:pandas.tests.frame.test_dtypes.expected->DataFrame([['2013-01-01', '2013-01-01 00:00:00-05:00', '2013-01-01 00:00:00+01:00'], ['2013-01-02', 'NaT', 'NaT'], ['2013-01-03', '2013-01-03 00:00:00-05:00', '2013-01-03 00:00:00+01:00']], columns=self.tzframe.columns)
A:pandas.tests.frame.test_dtypes.ri->DataFrame([1, 2, 3]).select_dtypes(include=['timedelta'])
A:pandas.tests.frame.test_dtypes.re->DataFrame([1, 2, 3]).select_dtypes(exclude=[np.number])
A:pandas.tests.frame.test_dtypes.r->DataFrame([1, 2, 3]).select_dtypes(include=['i8', 'O', 'timedelta64[ns]'])
A:pandas.tests.frame.test_dtypes.df['g']->DataFrame([1, 2, 3]).f.diff()
A:pandas.tests.frame.test_dtypes.df2->DataFrame(dict(A=Timestamp('20130102', tz='US/Eastern'), B=Timestamp('20130603', tz='CET')), index=range(5))
A:pandas.tests.frame.test_dtypes.df3->pandas.concat([df2.A.to_frame(), df2.B.to_frame()], axis=1)
A:pandas.tests.frame.test_dtypes.string_dtypes->set((str, 'str', np.string_, 'S1', 'unicode', np.unicode_, 'U1'))
A:pandas.tests.frame.test_dtypes.FLOAT_TYPES->list(np.typecodes['AllFloat'])
A:pandas.tests.frame.test_dtypes.casted->self.frame.astype(np.float64).astype(np.int64, copy=False)
A:pandas.tests.frame.test_dtypes.mn->self.all_mixed._get_numeric_data().copy()
A:pandas.tests.frame.test_dtypes.mn['little_float']->numpy.array(12345.0, dtype='float16')
A:pandas.tests.frame.test_dtypes.mn['big_float']->numpy.array(123456789101112.0, dtype='float64')
A:pandas.tests.frame.test_dtypes.tf->self.frame.astype(np.float64)
A:pandas.tests.frame.test_dtypes.a->Series(date_range('2010-01-04', periods=5))
A:pandas.tests.frame.test_dtypes.b->Series([0.1, 0.2, 0.4, 0.6, 0.8], name='b')
A:pandas.tests.frame.test_dtypes.c->Series([0.0, 0.2, 0.4, 0.6, 0.8])
A:pandas.tests.frame.test_dtypes.d->Series(['1.0', '2', '3.14', '4', '5.4'])
A:pandas.tests.frame.test_dtypes.e->Series([0.0, 0.2, 0.4, 0.6, 0.8])
A:pandas.tests.frame.test_dtypes.original->DataFrame([1, 2, 3]).copy(deep=True)
A:pandas.tests.frame.test_dtypes.equiv->DataFrame([1, 2, 3]).astype({col: df[col].dtype for col in df.columns})
A:pandas.tests.frame.test_dtypes.a1->Series([1, 2, 3, 4, 5], name='a')
A:pandas.tests.frame.test_dtypes.a2->Series([0, 1, 2, 3, 4], name='a')
A:pandas.tests.frame.test_dtypes.a1_str->Series(['1', '2', '3', '4', '5'], dtype='str', name='a')
A:pandas.tests.frame.test_dtypes.b_str->Series(['0.1', '0.2', '0.4', '0.6', '0.8'], dtype=str, name='b')
A:pandas.tests.frame.test_dtypes.a2_str->Series(['0', '1', '2', '3', '4'], dtype='str', name='a')
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes(TestData)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_arg_for_errors_in_astype(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_cast_nan_inf_int(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_dict(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_duplicate_col(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_str(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_with_exclude_string(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_astype_with_view(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_concat_empty_dataframe_dtypes(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_datetime_with_tz_dtypes(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_dtypes_are_correct_after_column_slice(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_dtypes_gh8722(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_empty_frame_dtypes_ftypes(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_ftypes(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_bad_arg_raises(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_bad_datetime64(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_datetime_with_tz(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_empty(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_exclude(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_exclude_include(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_include(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_not_an_attr_but_still_valid_dtype(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_raises_on_string(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_str_raises(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_select_dtypes_typecodes(self)
pandas.tests.frame.test_dtypes.TestDataFrameDataTypes.test_timedeltas(self)
pandas.tests.frame.test_dtypes.TestDataFrameDatetimeWithTZ(TestData)
pandas.tests.frame.test_dtypes.TestDataFrameDatetimeWithTZ.test_astype(self)
pandas.tests.frame.test_dtypes.TestDataFrameDatetimeWithTZ.test_astype_str(self)
pandas.tests.frame.test_dtypes.TestDataFrameDatetimeWithTZ.test_interleave(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_block_internals.py----------------------------------------
A:pandas.tests.frame.test_block_internals.casted->DataFrame(self.frame._data, dtype=np.int32)
A:pandas.tests.frame.test_block_internals.expected->DataFrame(dict(s=Series([1, np.nan, 3, 4])))
A:pandas.tests.frame.test_block_internals.consolidated->self.frame._consolidate()
A:pandas.tests.frame.test_block_internals.recons->self.frame._consolidate()._consolidate()
A:pandas.tests.frame.test_block_internals.frame->self.frame.copy()
A:pandas.tests.frame.test_block_internals.self.frame[chr(letter)]->chr(letter)
A:pandas.tests.frame.test_block_internals._->self.frame.as_matrix()
A:pandas.tests.frame.test_block_internals.values->self.mixed_int.as_matrix(['C'])
A:pandas.tests.frame.test_block_internals.df->DataFrame(index=[0, 1])
A:pandas.tests.frame.test_block_internals.result->DataFrame(np.random.random((4, 4)), index=('a', 'b', 'c', 'd'), columns=('e', 'f', 'g', 'h')).sum()
A:pandas.tests.frame.test_block_internals.self.mixed_frame['datetime']->datetime.datetime.now()
A:pandas.tests.frame.test_block_internals.self.mixed_frame['timedelta']->timedelta(days=1, seconds=1)
A:pandas.tests.frame.test_block_internals.arr->numpy.array([1, 2, 3], dtype='timedelta64[s]')
A:pandas.tests.frame.test_block_internals.s->Series(np.array(['2013-01-01', '2013-01-02', '2013-01-03'], dtype='datetime64[D]'))
A:pandas.tests.frame.test_block_internals.df['dt1']->numpy.datetime64('2013-01-01')
A:pandas.tests.frame.test_block_internals.df['dt2']->numpy.array(['2013-01-01', '2013-01-02', '2013-01-03'], dtype='datetime64[D]')
A:pandas.tests.frame.test_block_internals.data->list(itertools.repeat((datetime(2001, 1, 1), 'aa', 20), 9))
A:pandas.tests.frame.test_block_internals.df0->pandas.DataFrame({'A': ['x', 'y'], 'B': [1, 2], 'C': ['w', 'z']})
A:pandas.tests.frame.test_block_internals.blocks->DataFrame(index=[0, 1]).as_blocks(copy=False)
A:pandas.tests.frame.test_block_internals.cop->self.frame.copy()
A:pandas.tests.frame.test_block_internals.copy->self.mixed_frame.copy()
A:pandas.tests.frame.test_block_internals.unpickled->pandas.util.testing.round_trip_pickle(self.tzframe)
A:pandas.tests.frame.test_block_internals.ser_starting->ser_starting.tz_convert('UTC').tz_convert('UTC')
A:pandas.tests.frame.test_block_internals.ser_ending->ser_ending.tz_convert('UTC').tz_convert('UTC')
A:pandas.tests.frame.test_block_internals.converted->self.mixed_frame.copy()
A:pandas.tests.frame.test_block_internals.l->len(self.mixed_frame)
A:pandas.tests.frame.test_block_internals.converted['H']->converted['H'].astype('float64').astype('float64')
A:pandas.tests.frame.test_block_internals.converted['I']->converted['I'].astype('int64').astype('int64')
A:pandas.tests.frame.test_block_internals.mixed1->DataFrame({'a': [1, 2, 3], 'b': [4.0, 5, 6], 'c': ['x', 'y', 'z']})
A:pandas.tests.frame.test_block_internals.mixed2->DataFrame({'a': [1, 2, 3], 'b': [4.0, 5, 6], 'c': ['x', 'y', 'z']})._convert(datetime=True)
A:pandas.tests.frame.test_block_internals.Y->DataFrame(np.random.random((4, 4)), index=('a', 'b', 'c', 'd'), columns=('e', 'f', 'g', 'h'))
A:pandas.tests.frame.test_block_internals.Y['e']->Y['e'].astype('object').astype('object')
A:pandas.tests.frame.test_block_internals.exp->Y['g'].sum()
A:pandas.tests.frame.test_block_internals.first->len(df.loc[pd.isnull(df[myid]), [myid]])
A:pandas.tests.frame.test_block_internals.second->len(df.loc[pd.isnull(df[myid]), [myid]])
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals(TestData)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_as_matrix_consolidate(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_as_matrix_lcd(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_as_matrix_numeric_cols(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_boolean_set_uncons(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_cast_internals(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_consolidate(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_consolidate_datetime64(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_consolidate_deprecation(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_consolidate_inplace(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_construction_with_conversions(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_construction_with_mixed(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_constructor_compound_dtypes(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_constructor_with_convert(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_convert_objects(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_convert_objects_no_conversion(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_copy(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_copy_blocks(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_equals_different_blocks(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_get_X_columns(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_get_numeric_data(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_is_mixed_type(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_modify_values(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_no_copy_blocks(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_pickle(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_stale_cached_series_bug_473(self)
pandas.tests.frame.test_block_internals.TestDataFrameBlockInternals.test_strange_column_corruption_issue(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_axis_select_reindex.py----------------------------------------
A:pandas.tests.frame.test_axis_select_reindex.df->DataFrame(np.random.randn(5, 3) + 1j, columns=['a', 'b', 'c'])
A:pandas.tests.frame.test_axis_select_reindex.df_dropped_b->DataFrame(np.random.randn(5, 3) + 1j, columns=['a', 'b', 'c']).drop('b')
A:pandas.tests.frame.test_axis_select_reindex.df_dropped_e->DataFrame(np.random.randn(5, 3) + 1j, columns=['a', 'b', 'c']).drop('e', axis=1)
A:pandas.tests.frame.test_axis_select_reindex.dropped->DataFrame(np.random.randn(5, 3) + 1j, columns=['a', 'b', 'c']).drop(['d', 'g'], axis=1, errors='ignore')
A:pandas.tests.frame.test_axis_select_reindex.expected->DataFrame(np.random.randn(5, 3) + 1j, columns=['a', 'b', 'c']).reindex([0, 1]).reindex(columns=['a', 'b'])
A:pandas.tests.frame.test_axis_select_reindex.tuples->sorted(zip(*arrays))
A:pandas.tests.frame.test_axis_select_reindex.index->Index(['a', 'b', 'c'])
A:pandas.tests.frame.test_axis_select_reindex.simple->DataFrame({'A': [1, 2, 3, 4], 'B': [0, 1, 2, 3]})
A:pandas.tests.frame.test_axis_select_reindex.nu_df->nu_df.set_index(pd.Index(['X', 'Y', 'X'])).set_index(pd.Index(['X', 'Y', 'X']))
A:pandas.tests.frame.test_axis_select_reindex.nu_df.columns->list('abc')
A:pandas.tests.frame.test_axis_select_reindex.lexsorted_mi->pandas.MultiIndex.from_tuples([('a', ''), ('b1', 'c1'), ('b2', 'c2')], names=['b', 'c'])
A:pandas.tests.frame.test_axis_select_reindex.lexsorted_df->DataFrame([[1, 3, 4]], columns=lexsorted_mi)
A:pandas.tests.frame.test_axis_select_reindex.not_lexsorted_df->not_lexsorted_df.reset_index().reset_index()
A:pandas.tests.frame.test_axis_select_reindex.result->DataFrame(np.random.randn(5, 3) + 1j, columns=['a', 'b', 'c']).reindex(index=[0, 1], columns=['a', 'b'])
A:pandas.tests.frame.test_axis_select_reindex.df1->pandas.DataFrame(np.arange(12, dtype='int64'), index=midx)
A:pandas.tests.frame.test_axis_select_reindex.columns->pandas.MultiIndex.from_tuples([('a', ''), ('c', 'c1')])
A:pandas.tests.frame.test_axis_select_reindex.df2->pandas.DataFrame(np.arange(2, dtype='int64'), index=idx)
A:pandas.tests.frame.test_axis_select_reindex.newFrame->self.frame.reindex_axis(cols, axis=1)
A:pandas.tests.frame.test_axis_select_reindex.emptyFrame->self.frame.reindex(Index([]))
A:pandas.tests.frame.test_axis_select_reindex.nonContigFrame->self.frame.reindex(self.ts1.index[::2])
A:pandas.tests.frame.test_axis_select_reindex.df.index->DataFrame(np.random.randn(5, 3) + 1j, columns=['a', 'b', 'c']).index.astype('object')
A:pandas.tests.frame.test_axis_select_reindex.df['date']->pandas.to_datetime(df.date)
A:pandas.tests.frame.test_axis_select_reindex.df['delta']->(pd.to_datetime('2015-06-18') - df['date']).shift(1)
A:pandas.tests.frame.test_axis_select_reindex.left->DataFrame(np.random.randn(5, 3) + 1j, columns=['a', 'b', 'c']).set_index(['delta', 'other', 'date']).reset_index()
A:pandas.tests.frame.test_axis_select_reindex.right->DataFrame(np.random.randn(5, 3) + 1j, columns=['a', 'b', 'c']).reindex(columns=['delta', 'other', 'date', 'amount'])
A:pandas.tests.frame.test_axis_select_reindex.s->pandas.Series([1, 2, 4], index=list('ABD'), name='x')
A:pandas.tests.frame.test_axis_select_reindex.i->Series(np.arange(10), name='iname')
A:pandas.tests.frame.test_axis_select_reindex.smaller->self.intframe.reindex(columns=['A', 'B', 'E'])
A:pandas.tests.frame.test_axis_select_reindex.bigger->self.intframe.reindex(columns=['A', 'B', 'E']).reindex(self.intframe.index)
A:pandas.tests.frame.test_axis_select_reindex.other->self.frame.iloc[:-5, :3].copy()
A:pandas.tests.frame.test_axis_select_reindex.new_frame->self.frame.reindex(columns=[])
A:pandas.tests.frame.test_axis_select_reindex.time_freq->date_range('2012-01-01', '2012-01-03', freq='d')
A:pandas.tests.frame.test_axis_select_reindex.arr->numpy.random.randn(10)
A:pandas.tests.frame.test_axis_select_reindex.result.index->list(range(len(df)))
A:pandas.tests.frame.test_axis_select_reindex.(af, bf)->self.mixed_int.align(other.iloc[:, 0], join='inner', axis=1, method=None, fill_value=0)
A:pandas.tests.frame.test_axis_select_reindex.join_idx->self.frame.index.join(other.index)
A:pandas.tests.frame.test_axis_select_reindex.diff_a->self.frame.index.difference(join_idx)
A:pandas.tests.frame.test_axis_select_reindex.diff_b->self.frame.iloc[:-5, :3].copy().index.difference(join_idx)
A:pandas.tests.frame.test_axis_select_reindex.(left, right)->self.frame.align(s, broadcast_axis=1)
A:pandas.tests.frame.test_axis_select_reindex.(aa, ab)->a.align(b, axis=axis, join=how, method=method, limit=limit, fill_axis=fill_axis)
A:pandas.tests.frame.test_axis_select_reindex.join_index->a.index.join(b.index, how=how)
A:pandas.tests.frame.test_axis_select_reindex.ea->ea.fillna(axis=fill_axis, method=method, limit=limit).fillna(axis=fill_axis, method=method, limit=limit)
A:pandas.tests.frame.test_axis_select_reindex.eb->eb.fillna(axis=fill_axis, method=method, limit=limit).fillna(axis=fill_axis, method=method, limit=limit)
A:pandas.tests.frame.test_axis_select_reindex.join_columns->a.columns.join(b.columns, how=how)
A:pandas.tests.frame.test_axis_select_reindex.X->numpy.arange(10 * 10, dtype='float64').reshape(10, 10)
A:pandas.tests.frame.test_axis_select_reindex.Y->numpy.ones((10, 1), dtype=int)
A:pandas.tests.frame.test_axis_select_reindex.df1['0.X']->numpy.ones((10, 1), dtype=int).squeeze()
A:pandas.tests.frame.test_axis_select_reindex.midx->pandas.MultiIndex.from_product([range(2), range(3), range(2)], names=('a', 'b', 'c'))
A:pandas.tests.frame.test_axis_select_reindex.idx->pandas.Index(range(2), name='b')
A:pandas.tests.frame.test_axis_select_reindex.(res1l, res1r)->pandas.DataFrame(np.arange(12, dtype='int64'), index=midx).align(df2, join='right')
A:pandas.tests.frame.test_axis_select_reindex.(res2l, res2r)->pandas.DataFrame(np.arange(2, dtype='int64'), index=idx).align(df1, join='left')
A:pandas.tests.frame.test_axis_select_reindex.expr->pandas.DataFrame([0, 0, 1, 1] * 2, index=exp_idx)
A:pandas.tests.frame.test_axis_select_reindex.exp_idx->pandas.MultiIndex.from_product([range(2), range(2), range(2)], names=('a', 'b', 'c'))
A:pandas.tests.frame.test_axis_select_reindex.expl->pandas.DataFrame([0, 1, 2, 3, 6, 7, 8, 9], index=exp_idx)
A:pandas.tests.frame.test_axis_select_reindex.(res1, res2)->pandas.Series([1, 2, 4], index=list('ABD'), name='x').align(df)
A:pandas.tests.frame.test_axis_select_reindex.exp1->pandas.DataFrame({'a': [1, np.nan, 3, np.nan, 5], 'b': [1, np.nan, 3, np.nan, 5]}, index=list('ABCDE'))
A:pandas.tests.frame.test_axis_select_reindex.exp2->pandas.Series([1, 2, np.nan, 4, np.nan], index=list('ABCDE'), name='x')
A:pandas.tests.frame.test_axis_select_reindex.filtered->self.frame.copy().filter(regex='[A]+')
A:pandas.tests.frame.test_axis_select_reindex.fcopy->self.frame.copy()
A:pandas.tests.frame.test_axis_select_reindex.empty->DataFrame()
A:pandas.tests.frame.test_axis_select_reindex.frame->DataFrame(np.ones((10, 2), dtype=bool), index=np.arange(0, 20, 2), columns=[0, 2])
A:pandas.tests.frame.test_axis_select_reindex.reindexed->self.empty.reindex(index=[1, 2, 3]).reindex(columns=index)
A:pandas.tests.frame.test_axis_select_reindex.dm->self.empty.reindex(index=[1, 2, 3])
A:pandas.tests.frame.test_axis_select_reindex.reindexed1->self.intframe.reindex_axis(rows, axis=0)
A:pandas.tests.frame.test_axis_select_reindex.reindexed2->self.intframe.reindex(index=rows)
A:pandas.tests.frame.test_axis_select_reindex.cols->self.frame.columns.copy()
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex(TestData)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex._check_align(self,a,b,axis,fill_axis,how,method,limit=None)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex._check_align_fill(self,kind,meth,ax,fax)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_align(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_align_fill_method_inner(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_align_fill_method_left(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_align_fill_method_outer(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_align_fill_method_right(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_align_int_fill_bug(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_align_multiindex(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_align_series_combinations(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_drop(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_drop_col_still_multiindex(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_drop_multiindex_not_lexsorted(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_drop_names(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_filter(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_filter_corner(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_filter_regex_search(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_merge_join_different_levels(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_axes(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_axis(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_boolean(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_columns(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_columns_method(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_corner(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_dups(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_fill_value(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_int(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_like(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_multi(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_name_remains(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_nan(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_objects(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_reindex_with_nans(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_select(self)
pandas.tests.frame.test_axis_select_reindex.TestDataFrameSelectReindex.test_take(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_nonunique_indexes.py----------------------------------------
A:pandas.tests.frame.test_nonunique_indexes.arr->numpy.random.randn(3, 2)
A:pandas.tests.frame.test_nonunique_indexes.idx->date_range('20130101', periods=4, freq='Q-NOV')
A:pandas.tests.frame.test_nonunique_indexes.df->pandas.DataFrame()
A:pandas.tests.frame.test_nonunique_indexes.expected->numpy.array([[1, 2, 'a', 'b'], [1, 2, 'a', 'b']], dtype=object)
A:pandas.tests.frame.test_nonunique_indexes.df4->DataFrame({'TClose': [22.02], 'RT': [0.0454], 'TExg': [0.0422]}, index=MultiIndex.from_tuples([(600809, 20130331)], names=['STK_ID', 'RPT_Date']))
A:pandas.tests.frame.test_nonunique_indexes.df5->DataFrame({'STK_ID': [600809] * 3, 'RPT_Date': [20120930, 20121231, 20130331], 'STK_Name': [u('饡驦'), u('饡驦'), u('饡驦')], 'TClose': [38.05, 41.66, 30.01]}, index=MultiIndex.from_tuples([(600809, 20120930), (600809, 20121231), (600809, 20130331)], names=['STK_ID', 'RPT_Date']))
A:pandas.tests.frame.test_nonunique_indexes.k->pandas.merge(df4, df5, how='inner', left_index=True, right_index=True)
A:pandas.tests.frame.test_nonunique_indexes.result->DataFrame([[1, 2], [2, np.nan], [3, 4], [4, 4]], columns=['A', 'B']).sub(df2)
A:pandas.tests.frame.test_nonunique_indexes.s->pandas.DataFrame().iloc[:, 0].describe()
A:pandas.tests.frame.test_nonunique_indexes.this_df->pandas.DataFrame().copy()
A:pandas.tests.frame.test_nonunique_indexes.expected_ser->pandas.Series(index.values, index=this_df.index)
A:pandas.tests.frame.test_nonunique_indexes.expected_df->pandas.DataFrame.from_items([('A', expected_ser), ('B', this_df['B']), ('A', expected_ser)])
A:pandas.tests.frame.test_nonunique_indexes.df2->DataFrame([[0, 1], [2, 4], [2, np.nan], [4, 5]], columns=['A', 'A'])
A:pandas.tests.frame.test_nonunique_indexes.df1->DataFrame([[1, 2], [2, np.nan], [3, 4], [4, 4]], columns=['A', 'B'])
A:pandas.tests.frame.test_nonunique_indexes.df1r->DataFrame([[1, 2], [2, np.nan], [3, 4], [4, 4]], columns=['A', 'B']).reindex_like(df2)
A:pandas.tests.frame.test_nonunique_indexes.dfbool->DataFrame({'one': Series([True, True, False], index=['a', 'b', 'c']), 'two': Series([False, False, True, False], index=['a', 'b', 'c', 'd']), 'three': Series([False, True, True, True], index=['a', 'b', 'c', 'd'])})
A:pandas.tests.frame.test_nonunique_indexes.z->df[['A', 'C', 'A']].copy()
A:pandas.tests.frame.test_nonunique_indexes.df.columns->list('AAA')
A:pandas.tests.frame.test_nonunique_indexes.df_float->DataFrame(np.random.randn(10, 3), dtype='float64')
A:pandas.tests.frame.test_nonunique_indexes.df_int->DataFrame(np.random.randn(10, 3), dtype='int64')
A:pandas.tests.frame.test_nonunique_indexes.df_bool->DataFrame(True, index=df_float.index, columns=df_float.columns)
A:pandas.tests.frame.test_nonunique_indexes.df_object->DataFrame('foo', index=df_float.index, columns=df_float.columns)
A:pandas.tests.frame.test_nonunique_indexes.df_dt->DataFrame(pd.Timestamp('20010101'), index=df_float.index, columns=df_float.columns)
A:pandas.tests.frame.test_nonunique_indexes.rs->DataFrame(vals, columns=['A', 'A', 'B'])
A:pandas.tests.frame.test_nonunique_indexes.xp->DataFrame(vals)
A:pandas.tests.frame.test_nonunique_indexes.exp->pandas.DataFrame([['a', 'd', 'g'], ['b', 'e', 'h'], ['c', 'f', 'i']], columns=['A', 'A', 'A'])
pandas.tests.frame.test_nonunique_indexes.TestDataFrameNonuniqueIndexes(TestData)
pandas.tests.frame.test_nonunique_indexes.TestDataFrameNonuniqueIndexes.test_as_matrix_duplicates(self)
pandas.tests.frame.test_nonunique_indexes.TestDataFrameNonuniqueIndexes.test_column_dups2(self)
pandas.tests.frame.test_nonunique_indexes.TestDataFrameNonuniqueIndexes.test_column_dups_indexing(self)
pandas.tests.frame.test_nonunique_indexes.TestDataFrameNonuniqueIndexes.test_column_dups_indexing2(self)
pandas.tests.frame.test_nonunique_indexes.TestDataFrameNonuniqueIndexes.test_column_dups_operations(self)
pandas.tests.frame.test_nonunique_indexes.TestDataFrameNonuniqueIndexes.test_columns_with_dups(self)
pandas.tests.frame.test_nonunique_indexes.TestDataFrameNonuniqueIndexes.test_insert_with_columns_dups(self)
pandas.tests.frame.test_nonunique_indexes.TestDataFrameNonuniqueIndexes.test_set_value_by_index(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_analytics.py----------------------------------------
A:pandas.tests.frame.test_analytics.correls->DataFrame({'A': np.ones(12), 'B': np.zeros(12)}, index=idx).corrwith(df2, axis=1)
A:pandas.tests.frame.test_analytics.exp->numpy.random.rand(1, 5).dot(a.iloc[0])
A:pandas.tests.frame.test_analytics.result->pandas.DataFrame({'a': [1] * 5, 'b': [1, 2, 3, 4, 5]}).nlargest(n, order)
A:pandas.tests.frame.test_analytics.expected->pandas.DataFrame({'a': [1] * 5, 'b': [1, 2, 3, 4, 5]}).sort_values(order, ascending=False).head(n)
A:pandas.tests.frame.test_analytics.df->pandas.DataFrame({'a': [1] * 5, 'b': [1, 2, 3, 4, 5]})
A:pandas.tests.frame.test_analytics.rs->pandas.DataFrame({'a': [1] * 5, 'b': [1, 2, 3, 4, 5]}).corr(meth)
A:pandas.tests.frame.test_analytics.df3->DataFrame()
A:pandas.tests.frame.test_analytics.frame->DataFrame(frame.values.astype(object), frame.index, frame.columns)
A:pandas.tests.frame.test_analytics.cov->self.frame.cov()
A:pandas.tests.frame.test_analytics.noise->Series(randn(len(a)), index=a.index)
A:pandas.tests.frame.test_analytics.b->numpy.random.rand(5, 1)
A:pandas.tests.frame.test_analytics.colcorr->numpy.random.rand(1, 5).corrwith(b, axis=0)
A:pandas.tests.frame.test_analytics.rowcorr->numpy.random.rand(1, 5).corrwith(b, axis=1)
A:pandas.tests.frame.test_analytics.dropped->numpy.random.rand(1, 5).corrwith(b, axis=1, drop=True)
A:pandas.tests.frame.test_analytics.df1->DataFrame({'A': np.ones(12), 'B': np.zeros(12)}, index=idx)
A:pandas.tests.frame.test_analytics.df2->DataFrame(randn(5, 3), index=lrange(5), columns=[1, 2, 3])
A:pandas.tests.frame.test_analytics.columns->pandas.DatetimeIndex(['2011-01-01', '2011-02-01', '2011-03-01'], freq='MS', tz='US/Eastern', name='XXX')
A:pandas.tests.frame.test_analytics.exp_columns->pandas.DatetimeIndex(['2011-01-01', '2011-02-01'], freq='MS', tz='US/Eastern', name='XXX')
A:pandas.tests.frame.test_analytics.t1->pandas.timedelta_range('1 days', freq='D', periods=5)
A:pandas.tests.frame.test_analytics.t2->pandas.timedelta_range('1 hours', freq='H', periods=5)
A:pandas.tests.frame.test_analytics.res->pandas.DataFrame({'a': [1] * 5, 'b': [1, 2, 3, 4, 5]}).describe()
A:pandas.tests.frame.test_analytics.test->pandas.DataFrame({'a': [1] * 5, 'b': [1, 2, 3, 4, 5]}).sum(axis=0)
A:pandas.tests.frame.test_analytics.ct1->DataFrame(frame.values.astype(object), frame.index, frame.columns).count(1)
A:pandas.tests.frame.test_analytics.ct2->DataFrame(frame.values.astype(object), frame.index, frame.columns).count(0)
A:pandas.tests.frame.test_analytics.cummin->self.tsframe.cummin(axis=1)
A:pandas.tests.frame.test_analytics.cummin_xs->self.tsframe.cummin(axis=1)
A:pandas.tests.frame.test_analytics.cummax->self.tsframe.cummax(axis=1)
A:pandas.tests.frame.test_analytics.cummax_xs->self.tsframe.cummax(axis=1)
A:pandas.tests.frame.test_analytics.arr->numpy.repeat(np.random.random((1, 1000)), 1000, 0)
A:pandas.tests.frame.test_analytics.cumsum->self.tsframe.cumsum(axis=1)
A:pandas.tests.frame.test_analytics.cumsum_xs->self.tsframe.cumsum(axis=1)
A:pandas.tests.frame.test_analytics.cumprod->self.tsframe.cumprod(axis=1)
A:pandas.tests.frame.test_analytics.cumprod_xs->self.tsframe.cumprod(axis=1)
A:pandas.tests.frame.test_analytics.index->MultiIndex(levels=[['bar'], ['one', 'two', 'three'], [0, 1]], labels=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2], [0, 1, 0, 1, 0, 1]])
A:pandas.tests.frame.test_analytics.kurt->pandas.DataFrame({'a': [1] * 5, 'b': [1, 2, 3, 4, 5]}).kurt()
A:pandas.tests.frame.test_analytics.kurt2->pandas.DataFrame({'a': [1] * 5, 'b': [1, 2, 3, 4, 5]}).kurt(level=0).xs('bar')
A:pandas.tests.frame.test_analytics.f->getattr(frame, name)
A:pandas.tests.frame.test_analytics._f->getattr(df, name)
A:pandas.tests.frame.test_analytics.df['a']->lrange(len(df))
A:pandas.tests.frame.test_analytics.nona->x.dropna()
A:pandas.tests.frame.test_analytics.result0->f(axis=0)
A:pandas.tests.frame.test_analytics.result1->f(axis=1)
A:pandas.tests.frame.test_analytics.r0->getattr(all_na, name)(axis=0)
A:pandas.tests.frame.test_analytics.r1->getattr(all_na, name)(axis=1)
A:pandas.tests.frame.test_analytics.df['C']->list(reversed(df['C']))
A:pandas.tests.frame.test_analytics.diffs->DataFrame(dict(A=df['A'] - df['C'], B=df['A'] - df['B']))
A:pandas.tests.frame.test_analytics.result2->abs(diffs)
A:pandas.tests.frame.test_analytics.mixed->DataFrame(dict(A=df['A'] - df['C'], B=df['A'] - df['B'])).copy()
A:pandas.tests.frame.test_analytics.mixed['F']->Timestamp('20130101')
A:pandas.tests.frame.test_analytics.axis0->self.empty.sum(0)
A:pandas.tests.frame.test_analytics.axis1->self.empty.sum(1)
A:pandas.tests.frame.test_analytics.values->self.frame.values.astype(int)
A:pandas.tests.frame.test_analytics.bools->isnull(df)
A:pandas.tests.frame.test_analytics.the_mean->self.mixed_frame.mean(axis=1)
A:pandas.tests.frame.test_analytics.the_sum->self.mixed_frame.sum(axis=1, numeric_only=True)
A:pandas.tests.frame.test_analytics.means->self.frame.mean(0)
A:pandas.tests.frame.test_analytics.dm->DataFrame(np.arange(20).reshape(4, 5), index=lrange(4), columns=lrange(5))
A:pandas.tests.frame.test_analytics.mixed['_nonzero_fail_']->NonzeroFail()
A:pandas.tests.frame.test_analytics.other->DataFrame({'A': [1, 0, 1, 0], 'B': [1, 1, 0, 0]})
A:pandas.tests.frame.test_analytics.s->pandas.Series([1, 3, 11, 4], index=['a', 'b', 'c', 'd'])
A:pandas.tests.frame.test_analytics.idx->pandas.MultiIndex.from_tuples([(0, 'a', 'foo'), (0, 'a', 'bar'), (0, 'b', 'bar'), (0, 'b', 'baz'), (2, 'a', 'foo'), (2, 'a', 'bar'), (2, 'c', 'bar'), (2, 'c', 'baz'), (1, 'b', 'foo'), (1, 'b', 'bar'), (1, 'c', 'bar'), (1, 'c', 'baz')])
A:pandas.tests.frame.test_analytics.df1_ts->DataFrame({'date': pd.to_datetime(['2014-01-01', '2014-01-02'])})
A:pandas.tests.frame.test_analytics.df1_td->DataFrame({'date': [pd.Timedelta(1, 's'), pd.Timedelta(2, 's')]})
A:pandas.tests.frame.test_analytics.df['E']->list(reversed(df['C'])).astype('int8')
A:pandas.tests.frame.test_analytics.orig->DataFrame({'A': ['foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'bar', 'foo'], 'B': ['one', 'one', 'two', 'two', 'two', 'two', 'one', 'two'], 'C': [1, 1, 2, 2, 2, 2, 1, 2], 'D': lrange(8)})
A:pandas.tests.frame.test_analytics.orig2->DataFrame({'A': ['foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'bar', 'foo'], 'B': ['one', 'one', 'two', 'two', 'two', 'two', 'one', 'two'], 'C': [1, 1, 2, 2, 2, 2, 1, 2], 'D': lrange(8)}).loc[:, ['A', 'B', 'C']].copy()
A:pandas.tests.frame.test_analytics.expected_rounded->DataFrame({'col1': [1.0, 2.0, 3.0], 'col2': [1.0, 2.0, 3.0]})
A:pandas.tests.frame.test_analytics.expected_partially_rounded->DataFrame({'col1': [1.123, 2.123, 3.123], 'col2': [1.2, 2.2, 3.2]})
A:pandas.tests.frame.test_analytics.non_int_round_Series->Series(non_int_round_dict)
A:pandas.tests.frame.test_analytics.expected_neg_rounded->DataFrame({'col1': [110.0, 210, 310], 'col2': [100.0, 200, 300]})
A:pandas.tests.frame.test_analytics.nan_round_Series->Series({'col1': nan, 'col2': 1})
A:pandas.tests.frame.test_analytics.expected_nan_round->DataFrame({'col1': [1.123, 2.123, 3.123], 'col2': [1.2, 2.2, 3.2]})
A:pandas.tests.frame.test_analytics.out->numpy.round(df, decimals=0)
A:pandas.tests.frame.test_analytics.round_0->DataFrame({'col1': [1.0, 2.0, 3.0, 4.0], 'col2': ['1', 'a', 'c', 'f'], 'col3': date_range('20111111', periods=4)})
A:pandas.tests.frame.test_analytics.dfs->pandas.concat((df, df), axis=1)
A:pandas.tests.frame.test_analytics.rounded->pandas.concat((df, df), axis=1).round()
A:pandas.tests.frame.test_analytics.decimals->pandas.Series([1, 0, 2], index=['A', 'B', 'A'])
A:pandas.tests.frame.test_analytics.median->self.frame.median().median()
A:pandas.tests.frame.test_analytics.capped->self.frame.clip_upper(median)
A:pandas.tests.frame.test_analytics.floored->self.frame.clip_lower(median)
A:pandas.tests.frame.test_analytics.double->self.frame.clip(upper=median, lower=median)
A:pandas.tests.frame.test_analytics.clipped_df->pandas.DataFrame({'a': [1] * 5, 'b': [1, 2, 3, 4, 5]}).clip(lb, ub)
A:pandas.tests.frame.test_analytics.lb->DataFrame(np.random.randn(1000, 2))
A:pandas.tests.frame.test_analytics.a->numpy.random.rand(1, 5)
A:pandas.tests.frame.test_analytics.b1->numpy.random.rand(5, 1).reindex(index=reversed(b.index))
A:pandas.tests.frame.test_analytics.A->DataFrame(a)
A:pandas.tests.frame.test_analytics.B->DataFrame(b)
A:pandas.tests.frame.test_analytics.error_msg->self.dtype_error_msg_template.format(column=columns[1], method=method, dtype=df[columns[1]].dtype)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics(TestData)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics._check_bool_op(self,name,alternative,frame=None,has_skipna=True,has_bool_only=False)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics._check_method(self,method='pearson',check_minp=False)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics._check_stat_op(self,name,alternative,frame=None,has_skipna=True,has_numeric_only=False,check_dtype=True,check_dates=False,check_less_precise=False)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_any_all(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_bool_describe_in_mixed_frame(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_built_in_round(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_clip(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_clip_against_frame(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_clip_against_series(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_corr_constant(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_corr_cov_independent_index_column(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_corr_int(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_corr_int_and_boolean(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_corr_kendall(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_corr_non_numeric(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_corr_nooverlap(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_corr_pearson(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_corr_spearman(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_corrwith(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_corrwith_matches_corrcoef(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_corrwith_series(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_corrwith_with_objects(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_count(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_count_objects(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_cov(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_cummax(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_cummin(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_cumprod(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_cumsum(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_cumsum_corner(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_dataframe_clip(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_describe_bool_frame(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_describe_categorical_columns(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_describe_datetime_columns(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_describe_timedelta_values(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_dot(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_drop_duplicates(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_drop_duplicates_NA(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_drop_duplicates_NA_for_take_all(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_drop_duplicates_for_take_all(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_drop_duplicates_inplace(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_drop_duplicates_tuple(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_idxmax(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_idxmin(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_isin(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_isin_against_series(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_isin_df(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_isin_df_dupe_values(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_isin_dict(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_isin_dupe_self(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_isin_empty(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_isin_empty_datetimelike(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_isin_multiIndex(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_isin_with_string_scalar(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_kurt(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_mad(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_max(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_mean(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_mean_corner(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_median(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_median_corner(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_min(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_mixed_ops(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_mode(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_numeric_only_flag(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_numpy_round(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_nunique(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_operators_timedelta64(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_product(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_reduce_mixed_frame(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_round(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_round_issue(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_round_mixed_type(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_sem(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_skew(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_stat_operators_attempt_obj_array(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_stats_mixed_type(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_sum(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_sum_bool(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_sum_bools(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_sum_corner(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_sum_object(self)
pandas.tests.frame.test_analytics.TestDataFrameAnalytics.test_var_std(self)
pandas.tests.frame.test_analytics.TestNLargestNSmallest(object)
pandas.tests.frame.test_analytics.TestNLargestNSmallest.test_n(self,df_strings,method,n,order)
pandas.tests.frame.test_analytics.TestNLargestNSmallest.test_n_all_dtypes(self,df_main_dtypes)
pandas.tests.frame.test_analytics.TestNLargestNSmallest.test_n_duplicate_index(self,df_duplicates,n,order)
pandas.tests.frame.test_analytics.TestNLargestNSmallest.test_n_error(self,df_main_dtypes,method,columns)
pandas.tests.frame.test_analytics.TestNLargestNSmallest.test_n_identical_values(self)
pandas.tests.frame.test_analytics.df_duplicates()
pandas.tests.frame.test_analytics.df_main_dtypes()
pandas.tests.frame.test_analytics.df_strings()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_api.py----------------------------------------
A:pandas.tests.frame.test_api.ind->getattr(self.frame, attr)
A:pandas.tests.frame.test_api.cp->deepcopy(self.frame)
A:pandas.tests.frame.test_api.s->Series(tup[1:])
A:pandas.tests.frame.test_api.result->f(base)
A:pandas.tests.frame.test_api.with_prefix->self.frame.add_prefix('foo#')
A:pandas.tests.frame.test_api.expected->Series({'object': 10})
A:pandas.tests.frame.test_api.with_suffix->self.frame.add_suffix('#foo')
A:pandas.tests.frame.test_api.df->DataFrame({'A': date_range('20130101', periods=10), 'B': timedelta_range('1 day', periods=10)})
A:pandas.tests.frame.test_api.df1->DataFrame(randn(0, 3))
A:pandas.tests.frame.test_api.df2->DataFrame(randn(0, 3))
A:pandas.tests.frame.test_api.cols->self.frame._get_agg_axis(0)
A:pandas.tests.frame.test_api.idx->self.frame._get_agg_axis(1)
A:pandas.tests.frame.test_api.exp->self.mixed_frame.xs(self.mixed_frame.index[i])
A:pandas.tests.frame.test_api.tup->next(df.itertuples(name='TestName'))
A:pandas.tests.frame.test_api.tup2->next(df.itertuples(name='TestName'))
A:pandas.tests.frame.test_api.df3->DataFrame(dict((('f' + str(i), [i]) for i in range(1024))))
A:pandas.tests.frame.test_api.tup3->next(df3.itertuples())
A:pandas.tests.frame.test_api.mat->self.frame.as_matrix(['A', 'B'])
A:pandas.tests.frame.test_api.(index, data)->pandas.util.testing.getMixedTypeDict()
A:pandas.tests.frame.test_api.mixed->DataFrame(data, index=index)
A:pandas.tests.frame.test_api.values->self.mixed_frame.as_matrix()
A:pandas.tests.frame.test_api.res->repr(df)
A:pandas.tests.frame.test_api.data->DataFrame({'a': ['foo', 'bar', 'baz', 'qux'], 'b': [0, 0, 1, 1], 'c': [1, 2, 3, 4]})
pandas.tests.frame.test_api.SharedWithSparse(object)
pandas.tests.frame.test_api.SharedWithSparse.test_add_prefix_suffix(self)
pandas.tests.frame.test_api.SharedWithSparse.test_copy_index_name_checking(self)
pandas.tests.frame.test_api.SharedWithSparse.test_get_value(self)
pandas.tests.frame.test_api.SharedWithSparse.test_getitem_pop_assign_name(self)
pandas.tests.frame.test_api.TestDataFrameMisc(SharedWithSparse,TestData)
pandas.tests.frame.test_api.TestDataFrameMisc.test_array_interface(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_as_matrix(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_axis_aliases(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_column_contains_typeerror(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_deepcopy(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_empty_nonzero(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_get_agg_axis(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_get_axis(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_inplace_return_self(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_iter(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_iteritems(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_iteritems_names(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_iterrows(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_itertuples(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_keys(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_len(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_more_asMatrix(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_new_empty_index(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_nonzero(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_not_hashable(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_repr_with_mi_nat(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_series_put_names(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_swapaxes(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_transpose(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_transpose_get_view(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_values(self)
pandas.tests.frame.test_api.TestDataFrameMisc.test_with_datetimelikes(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_alter_axes.py----------------------------------------
A:pandas.tests.frame.test_alter_axes.idx->pandas.IntervalIndex.from_breaks(np.arange(11), name='x')
A:pandas.tests.frame.test_alter_axes.df->df.reset_index().reset_index()
A:pandas.tests.frame.test_alter_axes.new_index->pandas.MultiIndex.from_tuples([('foo3', 'bar1'), ('foo2', 'bar2')], names=['foo', 'bar'])
A:pandas.tests.frame.test_alter_axes.result->result.reindex(columns=df.columns).reindex(columns=df.columns)
A:pandas.tests.frame.test_alter_axes.result_nodrop->df.reset_index().reset_index().set_index(['A', 'B'], drop=False)
A:pandas.tests.frame.test_alter_axes.index->MultiIndex(levels=[['bar'], ['one', 'two', 'three'], [0, 1]], labels=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2], [0, 1, 0, 1, 0, 1]], names=['L0', 'L1', 'L2'])
A:pandas.tests.frame.test_alter_axes.expected_nodrop->df.reset_index().reset_index().copy()
A:pandas.tests.frame.test_alter_axes.df2->df.reset_index().reset_index().select(lambda indx: indx >= 1)
A:pandas.tests.frame.test_alter_axes.df3->df.reset_index().reset_index().copy()
A:pandas.tests.frame.test_alter_axes.xp->DataFrame(full, Index(lrange(3), name='d'), columns=[['blah', 'b', 'b', 'c'], ['a', 'mean', 'median', 'mean']])
A:pandas.tests.frame.test_alter_axes.rdf->df.reset_index().reset_index().reset_index()
A:pandas.tests.frame.test_alter_axes.expected->pandas.DataFrame([[0, 0, 0], [1, 1, 1]], columns=['index', 'A', 'B'], index=RangeIndex(stop=2))
A:pandas.tests.frame.test_alter_axes.rs->df.reset_index().reset_index().set_index(['A', 'B']).reset_index()
A:pandas.tests.frame.test_alter_axes.ci->pandas.util.testing.makeCategoricalIndex(10)
A:pandas.tests.frame.test_alter_axes.idf->df.reset_index().reset_index().set_index('A')
A:pandas.tests.frame.test_alter_axes.new_df->df.reset_index().reset_index().set_index('A').reset_index()
A:pandas.tests.frame.test_alter_axes.i->pandas.to_datetime(['2014-01-01 10:10:10'], utc=True).tz_convert('Europe/Rome')
A:pandas.tests.frame.test_alter_axes.df['C']->numpy.array(s)
A:pandas.tests.frame.test_alter_axes.comp->pandas.DatetimeIndex(expected.values).copy()
A:pandas.tests.frame.test_alter_axes.df['D']->pandas.to_datetime(['2014-01-01 10:10:10'], utc=True).tz_convert('Europe/Rome').to_pydatetime()
A:pandas.tests.frame.test_alter_axes.expected['idx']->expected['idx'].apply(lambda d: pd.Timestamp(d, tz=tz)).apply(lambda d: pd.Timestamp(d, tz=tz))
A:pandas.tests.frame.test_alter_axes.di->pandas.date_range('2006-10-29 00:00:00', periods=3, req='H', tz='US/Pacific')
A:pandas.tests.frame.test_alter_axes.res->df.reset_index().reset_index().set_index(['index', 'a'])
A:pandas.tests.frame.test_alter_axes.exp->pandas.Series(self.frame.index.values, name='level_0')
A:pandas.tests.frame.test_alter_axes.exp_index->pandas.MultiIndex.from_arrays([di, [0, 1, 2]], names=['index', 'a'])
A:pandas.tests.frame.test_alter_axes.result2->result.reindex(columns=df.columns).reindex(columns=df.columns).reset_index()
A:pandas.tests.frame.test_alter_axes.columns->pandas.MultiIndex.from_tuples(tuples_columns, names=['fizz', 'buzz'])
A:pandas.tests.frame.test_alter_axes.cols->Index(np.arange(len(self.mixed_frame.columns)))
A:pandas.tests.frame.test_alter_axes.idx1->date_range('2011/01/01', periods=6, freq='M', tz='US/Eastern')
A:pandas.tests.frame.test_alter_axes.idx2->date_range('2013', periods=6, freq='A', tz='Asia/Tokyo')
A:pandas.tests.frame.test_alter_axes.renamed->self.mixed_frame.rename(columns=str.upper)
A:pandas.tests.frame.test_alter_axes.renamed2->self.frame.rename(columns=str.lower)
A:pandas.tests.frame.test_alter_axes.renamer->DataFrame(data, index=index)
A:pandas.tests.frame.test_alter_axes.new_columns->pandas.MultiIndex.from_tuples([('fizz1', 'BUZZ1'), ('fizz2', 'BUZZ2')], names=['fizz', 'buzz'])
A:pandas.tests.frame.test_alter_axes.c_id->id(self.frame['C'])
A:pandas.tests.frame.test_alter_axes.frame->self.frame.copy()
A:pandas.tests.frame.test_alter_axes.e_idx->MultiIndex(levels=[['bar'], ['bar'], ['bar']], labels=[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], names=['L0', 'L0', 'L0'])
A:pandas.tests.frame.test_alter_axes.stacked->DataFrame({'foo': stacked, 'bar': stacked})
A:pandas.tests.frame.test_alter_axes.deleveled->self.frame.reset_index()
A:pandas.tests.frame.test_alter_axes.values->lev.take(lab)
A:pandas.tests.frame.test_alter_axes.deleveled2->DataFrame({'foo': stacked, 'bar': stacked}).reset_index()
A:pandas.tests.frame.test_alter_axes.resetted->df.reset_index().reset_index().reset_index()
A:pandas.tests.frame.test_alter_axes.time->numpy.arange(0.0, 10, np.sqrt(2) / 2)
A:pandas.tests.frame.test_alter_axes.s1->Series(9.81 * time ** 2 / 2, index=Index(time, name='time'), name='speed')
A:pandas.tests.frame.test_alter_axes.vals->numpy.random.randn(3, 3).astype(object)
A:pandas.tests.frame.test_alter_axes.full->numpy.hstack(([[x] for x in idx], vals))
A:pandas.tests.frame.test_alter_axes.mi->pandas.MultiIndex.from_arrays(df[['A', 'B']].T.values, names=['A', 'B'])
A:pandas.tests.frame.test_alter_axes.mi2->pandas.MultiIndex.from_arrays(df[['A', 'B', 'A', 'B']].T.values, names=['A', 'B', 'A', 'B'])
A:pandas.tests.frame.test_alter_axes.s->pandas.cut(df.A, 5)
A:pandas.tests.frame.test_alter_axes.df['E']->numpy.array(s.values)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes(TestData)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_assign_columns(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_construction_with_categorical_index(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_dti_set_index_reindex(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_bug(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_inplace(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_multiindex(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_nocopy(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_rename_objects(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reorder_levels(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reset_index(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reset_index_multiindex_col(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reset_index_multiindex_nan(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reset_index_range(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reset_index_right_dtype(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reset_index_with_datetimeindex_cols(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_reset_index_with_intervals(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_columns(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index2(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_bug(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_cast(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_cast_datetimeindex(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_dst(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_empty_column(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_multiindexcolumns(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_names(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_nonuniq(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_pass_arrays(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_preserve_categorical_dtype(self)
pandas.tests.frame.test_alter_axes.TestDataFrameAlterAxes.test_set_index_timezone(self)
pandas.tests.frame.test_alter_axes.TestIntervalIndex(object)
pandas.tests.frame.test_alter_axes.TestIntervalIndex.test_set_reset_index(self)
pandas.tests.frame.test_alter_axes.TestIntervalIndex.test_setitem(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_asof.py----------------------------------------
A:pandas.tests.frame.test_asof.self.rng->date_range('1/1/1990', periods=N, freq='53s')
A:pandas.tests.frame.test_asof.self.df->DataFrame({'A': np.arange(N), 'B': np.arange(N)}, index=self.rng)
A:pandas.tests.frame.test_asof.df->DataFrame({'A': np.arange(N), 'B': np.arange(N)}, index=rng)
A:pandas.tests.frame.test_asof.dates->date_range('1/1/1990', periods=self.N * 3, freq='25s')
A:pandas.tests.frame.test_asof.result->DataFrame(np.nan, index=[1, 2], columns=['A', 'B']).asof(3)
A:pandas.tests.frame.test_asof.rng->date_range('1/1/1990', periods=N, freq='53s')
A:pandas.tests.frame.test_asof.expected->Series(np.nan, index=['A', 'B'], name=3)
pandas.tests.frame.test_asof.TestFrameAsof(TestData)
pandas.tests.frame.test_asof.TestFrameAsof.setup_method(self,method)
pandas.tests.frame.test_asof.TestFrameAsof.test_all_nans(self)
pandas.tests.frame.test_asof.TestFrameAsof.test_basic(self)
pandas.tests.frame.test_asof.TestFrameAsof.test_missing(self)
pandas.tests.frame.test_asof.TestFrameAsof.test_subset(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_to_csv.py----------------------------------------
A:pandas.tests.frame.test_to_csv.recons->pandas.read_csv(StringIO(csv_str), index_col=0)
A:pandas.tests.frame.test_to_csv.dm->DataFrame({'s1': Series(lrange(3), lrange(3)), 's2': Series(lrange(2), lrange(2))})
A:pandas.tests.frame.test_to_csv.df->pandas.DataFrame([4, 5, 6], index=index)
A:pandas.tests.frame.test_to_csv.result->pandas.DataFrame([4, 5, 6], index=index).to_csv()
A:pandas.tests.frame.test_to_csv.midx->pandas.MultiIndex.from_tuples([('A', 1, 2), ('A', 1, 2), ('B', 1, 2)])
A:pandas.tests.frame.test_to_csv.col_aliases->Index(['AA', 'X', 'Y', 'Z'])
A:pandas.tests.frame.test_to_csv.rs->read_csv(filename, compression='xz', index_col=0)
A:pandas.tests.frame.test_to_csv.xp->DataFrame([[0.12, 0.23, 0.57], [12.32, 123123.2, 321321.2]], index=['A', 'B'], columns=['X', 'Y', 'Z'])
A:pandas.tests.frame.test_to_csv.df1->DataFrame(np.random.randn(3, 1))
A:pandas.tests.frame.test_to_csv.df2->DataFrame({'s': s2})
A:pandas.tests.frame.test_to_csv.rs.columns->lmap(int, rs.columns)
A:pandas.tests.frame.test_to_csv.xp.columns->lmap(int, xp.columns)
A:pandas.tests.frame.test_to_csv.dt->pandas.Timedelta(seconds=1)
A:pandas.tests.frame.test_to_csv.result.index->to_datetime(result.index).tz_localize('UTC').tz_convert('Europe/Paris')
A:pandas.tests.frame.test_to_csv.result['dt_data']->pandas.to_timedelta(result['dt_data'])
A:pandas.tests.frame.test_to_csv.result['B']->converter('B')
A:pandas.tests.frame.test_to_csv.result['C']->converter('C')
A:pandas.tests.frame.test_to_csv.N->int(chunksize * 2.5)
A:pandas.tests.frame.test_to_csv.rs_c->pandas.read_csv(path, index_col=0)
A:pandas.tests.frame.test_to_csv.(indexer, missing)->pandas.DataFrame([4, 5, 6], index=index).columns.get_indexer_non_unique(cols)
A:pandas.tests.frame.test_to_csv.rs_c.columns->pandas.DataFrame([4, 5, 6], index=index).columns.take(indexer)
A:pandas.tests.frame.test_to_csv.nnat->int(n * 0.1)
A:pandas.tests.frame.test_to_csv.s->Series(pd.Categorical(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c']))
A:pandas.tests.frame.test_to_csv.i->numpy.random.randint(100)
A:pandas.tests.frame.test_to_csv.s1->make_dtnat_arr(chunksize + 5)
A:pandas.tests.frame.test_to_csv.s2->Series(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c'])
A:pandas.tests.frame.test_to_csv.kwargs->dict(parse_dates=False)
A:pandas.tests.frame.test_to_csv.kwargs['index_col']->lrange(rnlvl)
A:pandas.tests.frame.test_to_csv.kwargs['header']->lrange(cnlvl)
A:pandas.tests.frame.test_to_csv.ix->list(df.index)
A:pandas.tests.frame.test_to_csv.type_map->dict(i='i', f='f', s='O', u='O', dt='O', p='O')
A:pandas.tests.frame.test_to_csv.recons.index->numpy.array(recons.index, dtype=r_dtype)
A:pandas.tests.frame.test_to_csv.df.index->numpy.array(df.index, dtype=r_dtype)
A:pandas.tests.frame.test_to_csv.r_dtype->dict(i='i', f='f', s='O', u='O', dt='O', p='O').get(r_dtype)
A:pandas.tests.frame.test_to_csv.recons.columns->numpy.array(recons.columns, dtype=c_dtype)
A:pandas.tests.frame.test_to_csv.df.columns->numpy.array(df.columns, dtype=c_dtype)
A:pandas.tests.frame.test_to_csv.c_dtype->dict(i='i', f='f', s='O', u='O', dt='O', p='O').get(c_dtype)
A:pandas.tests.frame.test_to_csv.base->int(chunksize // ncols)
A:pandas.tests.frame.test_to_csv.cols->list(df.columns)
A:pandas.tests.frame.test_to_csv.self.frame['H']->self.frame.index.map(f)
A:pandas.tests.frame.test_to_csv.df['c3']->Series([7, 8, 9], dtype='int64')
A:pandas.tests.frame.test_to_csv.from_df->DataFrame([[1, 2], [3, 4]], columns=['A', 'B'])
A:pandas.tests.frame.test_to_csv.to_df->DataFrame([[1, 2], [3, 4]], columns=['X', 'Y'])
A:pandas.tests.frame.test_to_csv.arrays->numpy.arange(len(old_index) * 2).reshape(2, -1)
A:pandas.tests.frame.test_to_csv.new_index->pandas.MultiIndex.from_arrays(arrays, names=['first', 'second'])
A:pandas.tests.frame.test_to_csv.tsframe.index->pandas.MultiIndex.from_arrays(new_index)
A:pandas.tests.frame.test_to_csv.msg->'len of {i}, but only 5 lines in file'.format(i=i)
A:pandas.tests.frame.test_to_csv.lines->lzma.open(filename, 'rb').readlines()
A:pandas.tests.frame.test_to_csv.df_float->DataFrame(np.random.randn(1000, 3), dtype='float64')
A:pandas.tests.frame.test_to_csv.df_int->DataFrame(np.random.randn(1000, 3), dtype='int64')
A:pandas.tests.frame.test_to_csv.df_bool->DataFrame(True, index=df_float.index, columns=lrange(3))
A:pandas.tests.frame.test_to_csv.df_object->DataFrame('foo', index=df_float.index, columns=lrange(3))
A:pandas.tests.frame.test_to_csv.df_dt->DataFrame(Timestamp('20010101'), index=df_float.index, columns=lrange(3))
A:pandas.tests.frame.test_to_csv.dtypes->dict()
A:pandas.tests.frame.test_to_csv.result[i]->to_datetime(result[i])
A:pandas.tests.frame.test_to_csv.aa->DataFrame({'A': lrange(100000)})
A:pandas.tests.frame.test_to_csv.f1->StringIO('a,1.0\nb,2.0')
A:pandas.tests.frame.test_to_csv.newdf->DataFrame({'t': df[df.columns[0]]})
A:pandas.tests.frame.test_to_csv.buf->StringIO()
A:pandas.tests.frame.test_to_csv.res->StringIO()
A:pandas.tests.frame.test_to_csv.exp->StringIO()
A:pandas.tests.frame.test_to_csv.csv_str->self.frame.to_csv(path_or_buf=None)
A:pandas.tests.frame.test_to_csv.f->pandas.compat.import_lzma().open(filename, 'rb')
A:pandas.tests.frame.test_to_csv.text->pandas.compat.import_lzma().open(filename, 'rb').read().decode('utf8')
A:pandas.tests.frame.test_to_csv.lzma->pandas.compat.import_lzma()
A:pandas.tests.frame.test_to_csv.datetime_frame->DataFrame({'A': dt_index, 'B': dt_index.shift(1)}, index=dt_index)
A:pandas.tests.frame.test_to_csv.test->read_csv(path, parse_dates=[0, 1], index_col=0)
A:pandas.tests.frame.test_to_csv.datetime_frame_int->DataFrame({'A': dt_index, 'B': dt_index.shift(1)}, index=dt_index).applymap(lambda x: int(x.strftime('%Y%m%d')))
A:pandas.tests.frame.test_to_csv.datetime_frame_int.index->DataFrame({'A': dt_index, 'B': dt_index.shift(1)}, index=dt_index).applymap(lambda x: int(x.strftime('%Y%m%d'))).index.map(lambda x: int(x.strftime('%Y%m%d')))
A:pandas.tests.frame.test_to_csv.datetime_frame_str->DataFrame({'A': dt_index, 'B': dt_index.shift(1)}, index=dt_index).applymap(lambda x: x.strftime('%Y-%m-%d'))
A:pandas.tests.frame.test_to_csv.datetime_frame_str.index->DataFrame({'A': dt_index, 'B': dt_index.shift(1)}, index=dt_index).applymap(lambda x: x.strftime('%Y-%m-%d')).index.map(lambda x: x.strftime('%Y-%m-%d'))
A:pandas.tests.frame.test_to_csv.datetime_frame_columns->datetime_frame_columns.applymap(lambda x: int(x.strftime('%Y%m%d'))).applymap(lambda x: int(x.strftime('%Y%m%d')))
A:pandas.tests.frame.test_to_csv.datetime_frame_columns.columns->datetime_frame_columns.applymap(lambda x: int(x.strftime('%Y%m%d'))).applymap(lambda x: int(x.strftime('%Y%m%d'))).columns.map(lambda x: x.strftime('%Y%m%d'))
A:pandas.tests.frame.test_to_csv.nat_index->to_datetime(['NaT'] * 10 + ['2000-01-01', '1/1/2000', '1-1-2000'])
A:pandas.tests.frame.test_to_csv.nat_frame->DataFrame({'A': nat_index}, index=nat_index)
A:pandas.tests.frame.test_to_csv.times->pandas.date_range('2013-10-26 23:00', '2013-10-27 01:00', tz='Europe/London', freq='H', ambiguous='infer')
A:pandas.tests.frame.test_to_csv.time_range->numpy.array(range(len(i)), dtype='int64')
A:pandas.tests.frame.test_to_csv.idx->pandas.date_range('2015-01-01', '2015-12-31', freq='H', tz='Europe/Paris')
A:pandas.tests.frame.test_to_csv.result['idx']->to_datetime(result['idx']).astype('datetime64[ns, Europe/Paris]')
A:pandas.tests.frame.test_to_csv.index->pandas.PeriodIndex(dates, freq='D')
pandas.tests.frame.test_to_csv.TestDataFrameToCSV(TestData)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_period_index_date_overflow(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_bug(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_chunking(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_cols_reordering(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_compression_bz2(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_compression_gzip(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_compression_value_error(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_compression_xz(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_date_format(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_dtnat(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_dups_cols(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_float32_nanrep(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_float_format(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_from_csv1(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_from_csv2(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_from_csv3(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_from_csv4(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_from_csv5(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_from_csv_categorical(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_from_csv_w_all_infs(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_from_csv_w_some_infs(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_headers(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_index_no_leading_comma(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_line_terminators(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_mixed(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_moar(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_multiindex(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_new_dupe_cols(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_no_index(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_path_is_none(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_quote_none(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_quoting(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_stringio(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_unicode(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_unicode_index_col(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_unicodewriter_quoting(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_wide_frame_formatting(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_with_dst_transitions(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_with_mix_columns(self)
pandas.tests.frame.test_to_csv.TestDataFrameToCSV.test_to_csv_withcommas(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/frame/test_replace.py----------------------------------------
A:pandas.tests.frame.test_replace.tsframe->self.tsframe.copy().astype(np.float32)
A:pandas.tests.frame.test_replace.result->result.replace({'A': np.nan}, Timestamp('20130104')).replace({'A': np.nan}, Timestamp('20130104'))
A:pandas.tests.frame.test_replace.expected->DataFrame({'A': [Timestamp('20130101', tz='US/Eastern'), Timestamp('20130104'), Timestamp('20130103', tz='US/Eastern')], 'B': [0, np.nan, 2]})
A:pandas.tests.frame.test_replace.dfobj->DataFrame(obj)
A:pandas.tests.frame.test_replace.dfmix->DataFrame(mix)
A:pandas.tests.frame.test_replace.res->DataFrame(mix).replace({'a': {0: 'Y', 1: 'N'}})
A:pandas.tests.frame.test_replace.objc->obj.copy()
A:pandas.tests.frame.test_replace.expec->Series([np.int64] * 3)
A:pandas.tests.frame.test_replace.mixc->mix.copy()
A:pandas.tests.frame.test_replace.dfmix2->DataFrame(mix2)
A:pandas.tests.frame.test_replace.res2->DataFrame(mix).replace(to_replace=(1, nan), value=[-100000000.0, 0])
A:pandas.tests.frame.test_replace.res4->DataFrame(mix).copy()
A:pandas.tests.frame.test_replace.res3->DataFrame(mix).replace(to_replace=[1, nan], value=[-100000000.0, 0])
A:pandas.tests.frame.test_replace.df->DataFrame(mix)
A:pandas.tests.frame.test_replace.s1->Series({'b': '\\s*\\.\\s*'})
A:pandas.tests.frame.test_replace.s2->Series({'b': nan})
A:pandas.tests.frame.test_replace.zero_filled->self.tsframe.copy().astype(np.float32).replace(nan, -100000000.0)
A:pandas.tests.frame.test_replace.df1->DataFrame(mix).replace('-', np.nan)
A:pandas.tests.frame.test_replace.expected_df->pandas.DataFrame([(np.nan, pd.to_datetime('20150101')), ('a', pd.to_datetime('20150102'))])
A:pandas.tests.frame.test_replace.s->Series({'zero': 0.0, 'one': 2.0})
A:pandas.tests.frame.test_replace.rep->DataFrame(mix).replace(m)
A:pandas.tests.frame.test_replace.m->DataFrame(mix).mean()
A:pandas.tests.frame.test_replace.prev->datetime.datetime.today()
A:pandas.tests.frame.test_replace.now->datetime.datetime.today()
A:pandas.tests.frame.test_replace.filled->DataFrame(mix).replace(to_rep, 0)
A:pandas.tests.frame.test_replace.expected[k]->v.replace(to_rep[k], 0)
A:pandas.tests.frame.test_replace.answer->Series({0: 'Strongly Agree', 1: 'Agree', 2: 'Neutral', 3: 'Disagree', 4: 'Strongly Disagree'})
A:pandas.tests.frame.test_replace.weights->Series({'Agree': 4, 'Disagree': 2, 'Neutral': 3, 'Strongly Agree': 5, 'Strongly Disagree': 1})
A:pandas.tests.frame.test_replace.res1->DataFrame(mix).replace(to_replace={nan: 0, 1: -100000000.0})
A:pandas.tests.frame.test_replace.r->DataFrame(mix).replace([np.inf, -np.inf], np.nan)
A:pandas.tests.frame.test_replace.a->numpy.arange(1, 5)
A:pandas.tests.frame.test_replace.astr->numpy.arange(1, 5).astype(str)
A:pandas.tests.frame.test_replace.bstr->numpy.arange(2, 6).astype(str)
A:pandas.tests.frame.test_replace.expect->pandas.DataFrame({'a': ['Y', 'N', 'Y']})
pandas.tests.frame.test_replace.TestDataFrameReplace(TestData)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_regex_replace_dict_mixed(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_regex_replace_dict_nested(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_regex_replace_dict_nested_gh4115(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_regex_replace_list_mixed(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_regex_replace_list_mixed_inplace(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_regex_replace_list_obj(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_regex_replace_list_obj_inplace(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_regex_replace_list_to_scalar(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_regex_replace_numeric_to_object_conversion(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_regex_replace_regex_list_to_numeric(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_regex_replace_scalar(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_regex_replace_scalar_inplace(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_regex_replace_series_of_regexes(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_regex_replace_str_to_numeric(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_bool_with_bool(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_bool_with_string(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_convert(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_datetime(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_datetimetz(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_dict_no_regex(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_dict_tuple_list_ordering_remains_the_same(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_doesnt_replace_without_regex(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_dtypes(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_for_new_dtypes(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_inplace(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_input_formats_listlike(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_input_formats_scalar(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_int_to_int_chain(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_limit(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_list(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_mixed(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_period(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_pure_bool_with_string_no_op(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_regex_metachar(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_series_dict(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_series_no_regex(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_simple_nested_dict(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_simple_nested_dict_with_nonexistent_value(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_str_to_str_chain(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_swapping_bug(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_truthy(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_value_is_none(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_with_dict_with_bool_keys(self)
pandas.tests.frame.test_replace.TestDataFrameReplace.test_replace_with_empty_dictlike(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/dtypes/test_io.py----------------------------------------
A:pandas.tests.dtypes.test_io.arr->numpy.array([int64_na, 2, 3, 10, 15], dtype=np.int64)
A:pandas.tests.dtypes.test_io.result->pandas._libs.lib.downcast_int64(arr, na_values)
A:pandas.tests.dtypes.test_io.expected->numpy.array([int8_na, 2, 3, 10, 15], dtype=np.int8)
A:pandas.tests.dtypes.test_io.arr2->numpy.array([1, 2, 3, 4], dtype='i4').astype('O')
A:pandas.tests.dtypes.test_io.result2->pandas._libs.lib.convert_sql_column(arr2)
pandas.tests.dtypes.test_io.TestParseSQL(object)
pandas.tests.dtypes.test_io.TestParseSQL.test_convert_downcast_int64(self)
pandas.tests.dtypes.test_io.TestParseSQL.test_convert_sql_column_bools(self)
pandas.tests.dtypes.test_io.TestParseSQL.test_convert_sql_column_decimals(self)
pandas.tests.dtypes.test_io.TestParseSQL.test_convert_sql_column_floats(self)
pandas.tests.dtypes.test_io.TestParseSQL.test_convert_sql_column_ints(self)
pandas.tests.dtypes.test_io.TestParseSQL.test_convert_sql_column_longs(self)
pandas.tests.dtypes.test_io.TestParseSQL.test_convert_sql_column_strings(self)
pandas.tests.dtypes.test_io.TestParseSQL.test_convert_sql_column_unicode(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/dtypes/test_concat.py----------------------------------------
A:pandas.tests.dtypes.test_concat.res->pandas.core.dtypes.concat.get_dtype_kinds(to_concat)
pandas.tests.dtypes.test_concat.TestConcatCompat(object)
pandas.tests.dtypes.test_concat.TestConcatCompat.check_concat(self,to_concat,exp)
pandas.tests.dtypes.test_concat.TestConcatCompat.test_get_dtype_kinds(self)
pandas.tests.dtypes.test_concat.TestConcatCompat.test_get_dtype_kinds_datetimelike(self)
pandas.tests.dtypes.test_concat.TestConcatCompat.test_get_dtype_kinds_datetimelike_object(self)
pandas.tests.dtypes.test_concat.TestConcatCompat.test_get_dtype_kinds_period(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/dtypes/test_missing.py----------------------------------------
A:pandas.tests.dtypes.test_missing.arr->numpy.array([NaT, np.datetime64('NaT'), np.timedelta64('NaT'), np.datetime64('NaT', 's')])
A:pandas.tests.dtypes.test_missing.result->isnull(arr)
A:pandas.tests.dtypes.test_missing.expected->numpy.array([True] * 4)
A:pandas.tests.dtypes.test_missing.exp->pandas.Series([False, True, False])
A:pandas.tests.dtypes.test_missing.idx->pandas.PeriodIndex(['2011-01', 'NaT', '2012-01'], freq='M')
A:pandas.tests.dtypes.test_missing.mask->isnull(pidx[1:])
A:pandas.tests.dtypes.test_missing.pidx->pandas.PeriodIndex(['2011-01', 'NaT', '2012-01'], freq='M').to_period(freq='M')
A:pandas.tests.dtypes.test_missing.values->pandas.PeriodIndex(['2011-01', 'NaT', '2012-01'], freq='M').values.astype(dtype)
A:pandas.tests.dtypes.test_missing.s->pandas.Series(idx, dtype=object)
A:pandas.tests.dtypes.test_missing.m->numpy.array([(1, 2), (3, 4)], dtype=[('a', int), ('b', float)])
A:pandas.tests.dtypes.test_missing.n->numpy.array([(1, 2), (3, 4)], dtype=[('b', int), ('a', float)])
pandas.tests.dtypes.test_missing.TestIsNull(object)
pandas.tests.dtypes.test_missing.TestIsNull.test_0d_array(self)
pandas.tests.dtypes.test_missing.TestIsNull.test_datetime_other_units(self)
pandas.tests.dtypes.test_missing.TestIsNull.test_empty_object(self)
pandas.tests.dtypes.test_missing.TestIsNull.test_isnull(self)
pandas.tests.dtypes.test_missing.TestIsNull.test_isnull_datetime(self)
pandas.tests.dtypes.test_missing.TestIsNull.test_isnull_lists(self)
pandas.tests.dtypes.test_missing.TestIsNull.test_isnull_nat(self)
pandas.tests.dtypes.test_missing.TestIsNull.test_isnull_numpy_nat(self)
pandas.tests.dtypes.test_missing.TestIsNull.test_period(self)
pandas.tests.dtypes.test_missing.TestIsNull.test_timedelta_other_units(self)
pandas.tests.dtypes.test_missing.test_array_equivalent()
pandas.tests.dtypes.test_missing.test_array_equivalent_compat()
pandas.tests.dtypes.test_missing.test_array_equivalent_str()
pandas.tests.dtypes.test_missing.test_na_value_for_dtype()
pandas.tests.dtypes.test_missing.test_notnull()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/dtypes/test_dtypes.py----------------------------------------
A:pandas.tests.dtypes.test_dtypes.self.dtype->self.create()
A:pandas.tests.dtypes.test_dtypes.result->pandas.core.dtypes.dtypes.IntervalDtype.construct_from_string('interval[int64]')
A:pandas.tests.dtypes.test_dtypes.dtype2->IntervalDtype(dtype1)
A:pandas.tests.dtypes.test_dtypes.factor->Categorical(['a', 'b', 'b', 'a', 'a', 'c', 'c', 'c'])
A:pandas.tests.dtypes.test_dtypes.s->Series(ii, name='A')
A:pandas.tests.dtypes.test_dtypes.dtype3->IntervalDtype('interval')
A:pandas.tests.dtypes.test_dtypes.a->IntervalDtype('interval[int64]')
A:pandas.tests.dtypes.test_dtypes.b->IntervalDtype('interval[int64]')
A:pandas.tests.dtypes.test_dtypes.dr->date_range('20130101', periods=3, tz='US/Eastern')
A:pandas.tests.dtypes.test_dtypes.dr1->date_range('2013-01-01', periods=3, tz='US/Eastern')
A:pandas.tests.dtypes.test_dtypes.s1->Series(dr1, name='A')
A:pandas.tests.dtypes.test_dtypes.dr2->date_range('2013-08-01', periods=3, tz='US/Eastern')
A:pandas.tests.dtypes.test_dtypes.s2->Series(dr2, name='A')
A:pandas.tests.dtypes.test_dtypes.dt->PeriodDtype()
A:pandas.tests.dtypes.test_dtypes.pidx->pandas.period_range('2013-01-01 09:00', periods=5, freq='H')
A:pandas.tests.dtypes.test_dtypes.dtype1->IntervalDtype('interval')
A:pandas.tests.dtypes.test_dtypes.i->IntervalDtype()
A:pandas.tests.dtypes.test_dtypes.ii->pandas.IntervalIndex.from_breaks(range(3))
A:pandas.tests.dtypes.test_dtypes.dtype->IntervalDtype('int64')
pandas.tests.dtypes.test_dtypes.Base(object)
pandas.tests.dtypes.test_dtypes.Base.setup_method(self,method)
pandas.tests.dtypes.test_dtypes.Base.test_equality_invalid(self)
pandas.tests.dtypes.test_dtypes.Base.test_hash(self)
pandas.tests.dtypes.test_dtypes.Base.test_numpy_informed(self)
pandas.tests.dtypes.test_dtypes.Base.test_pickle(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtype(Base)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.create(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_basic(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_construction_from_string(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_equality(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_hash_vs_equality(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_is_dtype(self)
pandas.tests.dtypes.test_dtypes.TestCategoricalDtype.test_pickle(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype(Base)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.create(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_basic(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_coerce_to_dtype(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_compat(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_construction(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_construction_from_string(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_dst(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_empty(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_equality(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_hash_vs_equality(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_is_dtype(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_parser(self)
pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype.test_subclass(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype(Base)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.create(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_basic(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_basic_dtype(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_caching(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_coerce_to_dtype(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction_from_string(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_construction_generic(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_equality(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_hash_vs_equality(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_identity(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_is_dtype(self)
pandas.tests.dtypes.test_dtypes.TestIntervalDtype.test_subclass(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype(Base)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.create(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_basic(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_coerce_to_dtype(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_compat(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_construction(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_construction_from_string(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_empty(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_equality(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_hash_vs_equality(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_identity(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_is_dtype(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_not_string(self)
pandas.tests.dtypes.test_dtypes.TestPeriodDtype.test_subclass(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/dtypes/test_cast.py----------------------------------------
A:pandas.tests.dtypes.test_cast.arr->numpy.array(['x', 2], dtype=object)
A:pandas.tests.dtypes.test_cast.result->maybe_convert_scalar(Timedelta('1 day 1 min'))
A:pandas.tests.dtypes.test_cast.expected->numpy.array([1.0, 2.0, np.nan], dtype=dtype)
A:pandas.tests.dtypes.test_cast.exp->DatetimeIndex([ts, ts])
A:pandas.tests.dtypes.test_cast.res->maybe_downcast_to_dtype(exp.asi8, exp.dtype)
A:pandas.tests.dtypes.test_cast.ts->Timestamp('2016-01-01 12:00:00', tz='US/Pacific')
A:pandas.tests.dtypes.test_cast.data->numpy.float(12)
A:pandas.tests.dtypes.test_cast.(dtype, val)->infer_dtype_from_scalar(data)
A:pandas.tests.dtypes.test_cast.(dtype, _)->infer_dtype_from_array(arr)
A:pandas.tests.dtypes.test_cast.values->numpy.array(['apply', 'banana'])
A:pandas.tests.dtypes.test_cast.out->maybe_convert_objects(values, copy=True)
A:pandas.tests.dtypes.test_cast.dtype->PeriodDtype(freq='D')
pandas.tests.dtypes.test_cast.TestCommonTypes(object)
pandas.tests.dtypes.test_cast.TestCommonTypes.test_categorical_dtype(self)
pandas.tests.dtypes.test_cast.TestCommonTypes.test_datetimetz_dtype(self)
pandas.tests.dtypes.test_cast.TestCommonTypes.test_numpy_dtypes(self)
pandas.tests.dtypes.test_cast.TestCommonTypes.test_period_dtype(self)
pandas.tests.dtypes.test_cast.TestConvert(object)
pandas.tests.dtypes.test_cast.TestConvert.test_maybe_convert_objects_copy(self)
pandas.tests.dtypes.test_cast.TestInferDtype(object)
pandas.tests.dtypes.test_cast.TestInferDtype.test_infer_dtype_from_array(self,arr,expected)
pandas.tests.dtypes.test_cast.TestInferDtype.test_infer_dtype_from_scalar(self)
pandas.tests.dtypes.test_cast.TestMaybe(object)
pandas.tests.dtypes.test_cast.TestMaybe.test_maybe_convert_scalar(self)
pandas.tests.dtypes.test_cast.TestMaybe.test_maybe_convert_string_to_array(self)
pandas.tests.dtypes.test_cast.TestMaybeDowncast(object)
pandas.tests.dtypes.test_cast.TestMaybeDowncast.test_datetime_with_timezone(self)
pandas.tests.dtypes.test_cast.TestMaybeDowncast.test_datetimelikes_nan(self)
pandas.tests.dtypes.test_cast.TestMaybeDowncast.test_downcast_conv(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/dtypes/test_generic.py----------------------------------------
A:pandas.tests.dtypes.test_generic.multi_index->pandas.MultiIndex.from_arrays(tuples, names=('number', 'color'))
A:pandas.tests.dtypes.test_generic.datetime_index->pandas.to_datetime(['2000/1/1', '2010/1/1'])
A:pandas.tests.dtypes.test_generic.timedelta_index->pandas.to_timedelta(np.arange(5), unit='s')
A:pandas.tests.dtypes.test_generic.period_index->pandas.period_range('2000/1/1', '2010/1/1/', freq='M')
A:pandas.tests.dtypes.test_generic.categorical->pandas.Categorical([1, 2, 3], categories=[2, 3, 1])
A:pandas.tests.dtypes.test_generic.categorical_df->pandas.DataFrame({'values': [1, 2, 3]}, index=categorical)
A:pandas.tests.dtypes.test_generic.df->pandas.DataFrame({'names': ['a', 'b', 'c']}, index=multi_index)
A:pandas.tests.dtypes.test_generic.sparse_series->pandas.Series([1, 2, 3]).to_sparse()
A:pandas.tests.dtypes.test_generic.sparse_array->pandas.SparseArray(np.random.randn(10))
pandas.tests.dtypes.test_generic.TestABCClasses(object)
pandas.tests.dtypes.test_generic.TestABCClasses.test_abc_types(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/dtypes/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/dtypes/test_inference.py----------------------------------------
A:pandas.tests.dtypes.test_inference.result->_ensure_categorical(values)
A:pandas.tests.dtypes.test_inference.data->numpy.array(['1.200', '-999.000', '4.500'], dtype=object)
A:pandas.tests.dtypes.test_inference.m->MockFile()
A:pandas.tests.dtypes.test_inference.c->OldStyleClass()
A:pandas.tests.dtypes.test_inference.arr->Categorical(list('abc'), categories=['cegfab'], ordered=True)
A:pandas.tests.dtypes.test_inference.na_values->set(['', 'NULL', 'nan'])
A:pandas.tests.dtypes.test_inference.pos->numpy.array(['inf'], dtype=np.float64)
A:pandas.tests.dtypes.test_inference.neg->numpy.array(['-inf'], dtype=np.float64)
A:pandas.tests.dtypes.test_inference.out->pandas._libs.lib.to_object_array(rows, min_width=5)
A:pandas.tests.dtypes.test_inference.expected->numpy.array([[1, 2, 3, None, None], [4, 5, 6, None, None]], dtype=object)
A:pandas.tests.dtypes.test_inference.nan_values->set([-999, -999.0])
A:pandas.tests.dtypes.test_inference.exp->numpy.array([2 ** 63, -1], dtype=object)
A:pandas.tests.dtypes.test_inference.array->numpy.array([datetime(2015, 1, 1, tzinfo=pytz.utc), 1], dtype=object)
A:pandas.tests.dtypes.test_inference.index->Index(dates)
A:pandas.tests.dtypes.test_inference.record->namedtuple('record', 'x y')
A:pandas.tests.dtypes.test_inference.r->record(5, 6)
A:pandas.tests.dtypes.test_inference.ts->pandas.date_range('20130101', periods=3)
A:pandas.tests.dtypes.test_inference.tsa->pandas.date_range('20130101', periods=3, tz='US/Eastern')
A:pandas.tests.dtypes.test_inference.dtype->'datetime64[ns, {}]'.format(tz)
A:pandas.tests.dtypes.test_inference.tdi->TimedeltaIndex([100000000000000.0, 200000000000000.0], dtype='timedelta64')
A:pandas.tests.dtypes.test_inference.idx->DatetimeIndex(np.array([], dtype='datetime64[%s]' % unit))
A:pandas.tests.dtypes.test_inference.df->DataFrame(dict({'A': np.asarray(lrange(10), dtype='float64'), 'B': Timestamp('20010101')}))
A:pandas.tests.dtypes.test_inference.s->df['B'].copy()
A:pandas.tests.dtypes.test_inference.s._data->df['B'].copy()._data.setitem(indexer=tuple([slice(8, 9)]), value=np.nan)
A:pandas.tests.dtypes.test_inference.values->Categorical(values)
pandas.tests.dtypes.test_inference.TestInference(object)
pandas.tests.dtypes.test_inference.TestInference.test_convert_infs(self)
pandas.tests.dtypes.test_inference.TestInference.test_convert_non_hashable(self)
pandas.tests.dtypes.test_inference.TestInference.test_convert_numeric_int64_uint64(self)
pandas.tests.dtypes.test_inference.TestInference.test_convert_numeric_uint64(self)
pandas.tests.dtypes.test_inference.TestInference.test_convert_numeric_uint64_nan(self)
pandas.tests.dtypes.test_inference.TestInference.test_infer_dtype_bytes(self)
pandas.tests.dtypes.test_inference.TestInference.test_isinf_scalar(self)
pandas.tests.dtypes.test_inference.TestInference.test_maybe_convert_numeric_infinities(self)
pandas.tests.dtypes.test_inference.TestInference.test_maybe_convert_numeric_post_floatify_nan(self)
pandas.tests.dtypes.test_inference.TestInference.test_maybe_convert_objects_uint64(self)
pandas.tests.dtypes.test_inference.TestInference.test_mixed_dtypes_remain_object_array(self)
pandas.tests.dtypes.test_inference.TestInference.test_scientific_no_exponent(self)
pandas.tests.dtypes.test_inference.TestNumberScalar(object)
pandas.tests.dtypes.test_inference.TestNumberScalar.test_is_bool(self)
pandas.tests.dtypes.test_inference.TestNumberScalar.test_is_datetime_dtypes(self)
pandas.tests.dtypes.test_inference.TestNumberScalar.test_is_float(self)
pandas.tests.dtypes.test_inference.TestNumberScalar.test_is_integer(self)
pandas.tests.dtypes.test_inference.TestNumberScalar.test_is_number(self)
pandas.tests.dtypes.test_inference.TestNumberScalar.test_is_timedelta(self)
pandas.tests.dtypes.test_inference.TestTypeInference(object)
pandas.tests.dtypes.test_inference.TestTypeInference.test_bools(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_categorical(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_date(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_datetime(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_floats(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_infer_dtype_all_nan_nat_like(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_infer_dtype_datetime(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_infer_dtype_period(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_infer_dtype_timedelta(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_integers(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_is_datetimelike_array_all_nan_nat_like(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_is_period(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_length_zero(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_object(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_string(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_to_object_array_tuples(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_to_object_array_width(self)
pandas.tests.dtypes.test_inference.TestTypeInference.test_unicode(self)
pandas.tests.dtypes.test_inference.Testisscalar(object)
pandas.tests.dtypes.test_inference.Testisscalar.test_isscalar_builtin_nonscalars(self)
pandas.tests.dtypes.test_inference.Testisscalar.test_isscalar_builtin_scalars(self)
pandas.tests.dtypes.test_inference.Testisscalar.test_isscalar_numpy_array_scalars(self)
pandas.tests.dtypes.test_inference.Testisscalar.test_isscalar_numpy_arrays(self)
pandas.tests.dtypes.test_inference.Testisscalar.test_isscalar_numpy_zerodim_arrays(self)
pandas.tests.dtypes.test_inference.Testisscalar.test_isscalar_pandas_scalars(self)
pandas.tests.dtypes.test_inference.Testisscalar.test_lisscalar_pandas_containers(self)
pandas.tests.dtypes.test_inference.test_datetimeindex_from_empty_datetime64_array()
pandas.tests.dtypes.test_inference.test_ensure_categorical()
pandas.tests.dtypes.test_inference.test_ensure_int32()
pandas.tests.dtypes.test_inference.test_is_dict_like()
pandas.tests.dtypes.test_inference.test_is_file_like()
pandas.tests.dtypes.test_inference.test_is_hashable()
pandas.tests.dtypes.test_inference.test_is_list_like()
pandas.tests.dtypes.test_inference.test_is_named_tuple()
pandas.tests.dtypes.test_inference.test_is_nested_list_like_fails(obj)
pandas.tests.dtypes.test_inference.test_is_nested_list_like_passes(inner,outer)
pandas.tests.dtypes.test_inference.test_is_re()
pandas.tests.dtypes.test_inference.test_is_recompilable()
pandas.tests.dtypes.test_inference.test_is_scipy_sparse(spmatrix)
pandas.tests.dtypes.test_inference.test_is_sequence()
pandas.tests.dtypes.test_inference.test_nan_to_nat_conversions()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/dtypes/test_common.py----------------------------------------
A:pandas.tests.dtypes.test_common.dtypes->dict(datetime_tz=com.pandas_dtype('datetime64[ns, US/Eastern]'), datetime=com.pandas_dtype('datetime64[ns]'), timedelta=com.pandas_dtype('timedelta64[ns]'), period=PeriodDtype('D'), integer=np.dtype(np.int64), float=np.dtype(np.float64), object=np.dtype(np.object), category=com.pandas_dtype('category'))
A:pandas.tests.dtypes.test_common.sparse->pytest.importorskip('scipy.sparse')
A:pandas.tests.dtypes.test_common.cat->pandas.Categorical([1, 2, 3])
A:pandas.tests.dtypes.test_common.dtype->DatetimeTZDtype('ns', tz='US/Eastern')
A:pandas.tests.dtypes.test_common.s->pandas.Series([], dtype=dtype)
A:pandas.tests.dtypes.test_common.interval->pandas.Interval(1, 2, closed='right')
A:pandas.tests.dtypes.test_common.dt->numpy.datetime64(pd.datetime(2017, 1, 1))
A:pandas.tests.dtypes.test_common.obj->object()
pandas.tests.dtypes.test_common.TestPandasDtype(object)
pandas.tests.dtypes.test_common.TestPandasDtype.test_categorical_dtype(self)
pandas.tests.dtypes.test_common.TestPandasDtype.test_datetimetz_dtype(self)
pandas.tests.dtypes.test_common.TestPandasDtype.test_invalid_dtype_error(self)
pandas.tests.dtypes.test_common.TestPandasDtype.test_numpy_dtype(self)
pandas.tests.dtypes.test_common.TestPandasDtype.test_numpy_string_dtype(self)
pandas.tests.dtypes.test_common.TestPandasDtype.test_period_dtype(self)
pandas.tests.dtypes.test_common.get_is_dtype_funcs()
pandas.tests.dtypes.test_common.test_dtype_equal(name1,dtype1,name2,dtype2)
pandas.tests.dtypes.test_common.test_dtype_equal_strict()
pandas.tests.dtypes.test_common.test_get_dtype_error_catch(func)
pandas.tests.dtypes.test_common.test_is_bool_dtype()
pandas.tests.dtypes.test_common.test_is_categorical()
pandas.tests.dtypes.test_common.test_is_categorical_dtype()
pandas.tests.dtypes.test_common.test_is_complex_dtype()
pandas.tests.dtypes.test_common.test_is_datetime64_any_dtype()
pandas.tests.dtypes.test_common.test_is_datetime64_dtype()
pandas.tests.dtypes.test_common.test_is_datetime64_ns_dtype()
pandas.tests.dtypes.test_common.test_is_datetime64tz_dtype()
pandas.tests.dtypes.test_common.test_is_datetime_arraylike()
pandas.tests.dtypes.test_common.test_is_datetime_or_timedelta_dtype()
pandas.tests.dtypes.test_common.test_is_datetimelike()
pandas.tests.dtypes.test_common.test_is_datetimelike_v_numeric()
pandas.tests.dtypes.test_common.test_is_datetimelike_v_object()
pandas.tests.dtypes.test_common.test_is_datetimetz()
pandas.tests.dtypes.test_common.test_is_extension_type()
pandas.tests.dtypes.test_common.test_is_float_dtype()
pandas.tests.dtypes.test_common.test_is_int64_dtype()
pandas.tests.dtypes.test_common.test_is_int_or_datetime_dtype()
pandas.tests.dtypes.test_common.test_is_integer_dtype()
pandas.tests.dtypes.test_common.test_is_interval_dtype()
pandas.tests.dtypes.test_common.test_is_numeric_dtype()
pandas.tests.dtypes.test_common.test_is_numeric_v_string_like()
pandas.tests.dtypes.test_common.test_is_object()
pandas.tests.dtypes.test_common.test_is_period()
pandas.tests.dtypes.test_common.test_is_period_arraylike()
pandas.tests.dtypes.test_common.test_is_period_dtype()
pandas.tests.dtypes.test_common.test_is_scipy_sparse()
pandas.tests.dtypes.test_common.test_is_signed_integer_dtype()
pandas.tests.dtypes.test_common.test_is_sparse()
pandas.tests.dtypes.test_common.test_is_string_dtype()
pandas.tests.dtypes.test_common.test_is_string_like_dtype()
pandas.tests.dtypes.test_common.test_is_timedelta64_dtype()
pandas.tests.dtypes.test_common.test_is_timedelta64_ns_dtype()
pandas.tests.dtypes.test_common.test_is_unsigned_integer_dtype()
pandas.tests.dtypes.test_common.test_needs_i8_conversion()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/dtypes/test_convert.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/api/test_api.py----------------------------------------
A:pandas.tests.api.test_api.result->sorted(list(set(result) - set(ignored)))
A:pandas.tests.api.test_api.expected->sorted(expected)
A:pandas.tests.api.test_api.s->pandas.get_store(path)
A:pandas.tests.api.test_api.c1->pandas.Categorical(list('aabc'))
A:pandas.tests.api.test_api.c2->pandas.Categorical(list('abcd'))
pandas.tests.api.test_api.Base(object)
pandas.tests.api.test_api.Base.check(self,namespace,expected,ignored=None)
pandas.tests.api.test_api.TestApi(Base)
pandas.tests.api.test_api.TestApi.test_api(self)
pandas.tests.api.test_api.TestDatetoolsDeprecation(object)
pandas.tests.api.test_api.TestDatetoolsDeprecation.test_deprecation_access_func(self)
pandas.tests.api.test_api.TestDatetoolsDeprecation.test_deprecation_access_obj(self)
pandas.tests.api.test_api.TestJson(object)
pandas.tests.api.test_api.TestJson.test_deprecation_access_func(self)
pandas.tests.api.test_api.TestLib(object)
pandas.tests.api.test_api.TestLib.test_deprecation_access_func(self)
pandas.tests.api.test_api.TestPDApi(Base)
pandas.tests.api.test_api.TestPDApi.test_api(self)
pandas.tests.api.test_api.TestParser(object)
pandas.tests.api.test_api.TestParser.test_deprecation_access_func(self)
pandas.tests.api.test_api.TestTSLib(object)
pandas.tests.api.test_api.TestTSLib.test_deprecation_access_func(self)
pandas.tests.api.test_api.TestTesting(Base)
pandas.tests.api.test_api.TestTesting.test_testing(self)
pandas.tests.api.test_api.TestTopLevelDeprecations(object)
pandas.tests.api.test_api.TestTopLevelDeprecations.test_expr(self)
pandas.tests.api.test_api.TestTopLevelDeprecations.test_get_store(self)
pandas.tests.api.test_api.TestTopLevelDeprecations.test_groupby(self)
pandas.tests.api.test_api.TestTopLevelDeprecations.test_match(self)
pandas.tests.api.test_api.TestTopLevelDeprecations.test_pnow(self)
pandas.tests.api.test_api.TestTopLevelDeprecations.test_term(self)
pandas.tests.api.test_api.TestTypes(object)
pandas.tests.api.test_api.TestTypes.test_deprecation_access_func(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/api/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/api/test_types.py----------------------------------------
A:pandas.tests.api.test_types.result->fold('foo')
A:pandas.tests.api.test_types.expected->fnew('foo')
A:pandas.tests.api.test_types.e->pandas.lib.infer_dtype('foo')
pandas.tests.api.test_types.TestTypes(Base)
pandas.tests.api.test_types.TestTypes.check_deprecation(self,fold,fnew)
pandas.tests.api.test_types.TestTypes.test_deprecated_from_api_types(self)
pandas.tests.api.test_types.TestTypes.test_deprecation_core_common(self)
pandas.tests.api.test_types.TestTypes.test_deprecation_core_common_array_equivalent(self)
pandas.tests.api.test_types.TestTypes.test_deprecation_core_common_moved(self)
pandas.tests.api.test_types.TestTypes.test_removed_from_core_common(self)
pandas.tests.api.test_types.TestTypes.test_types(self)
pandas.tests.api.test_types.test_moved_infer_dtype()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/tools/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/tools/test_numeric.py----------------------------------------
A:pandas.tests.tools.test_numeric.s->pandas.Series([[10.0, 2], 1.0, 'apple'])
A:pandas.tests.tools.test_numeric.res->pandas.to_numeric(data, downcast=downcast)
A:pandas.tests.tools.test_numeric.expected->numpy.array([256, 257, 258], dtype=expected_dtype)
A:pandas.tests.tools.test_numeric.df->pandas.DataFrame({'a': [1, -3.14, 7], 'b': ['4', '5', '6']})
A:pandas.tests.tools.test_numeric.df_copy->pandas.DataFrame({'a': [1, -3.14, 7], 'b': ['4', '5', '6']}).copy()
A:pandas.tests.tools.test_numeric.df_copy['a']->df_copy['a'].apply(to_numeric).apply(to_numeric)
A:pandas.tests.tools.test_numeric.df_copy[['a', 'b']]->df_copy[['a', 'b']].apply(to_numeric).apply(to_numeric)
A:pandas.tests.tools.test_numeric.df['a']->df['a'].apply(to_numeric).apply(to_numeric)
A:pandas.tests.tools.test_numeric.idx->pandas.period_range('2011-01', periods=3, freq='M', name='xxx')
A:pandas.tests.tools.test_numeric.exp->numpy.array([1.5, 2.7, 3.4])
A:pandas.tests.tools.test_numeric.date_data->numpy.array(['1970-01-02', '1970-01-03', '1970-01-04'], dtype='datetime64[D]')
A:pandas.tests.tools.test_numeric.smallest_int_dtype->numpy.dtype(np.typecodes['Integer'][0])
A:pandas.tests.tools.test_numeric.smallest_uint_dtype->numpy.dtype(np.typecodes['UnsignedInteger'][0])
A:pandas.tests.tools.test_numeric.series->pandas.to_numeric(pd.Series(min_max), downcast=downcast)
pandas.tests.tools.test_numeric.TestToNumeric(object)
pandas.tests.tools.test_numeric.TestToNumeric.test_all_nan(self)
pandas.tests.tools.test_numeric.TestToNumeric.test_datetimelike(self)
pandas.tests.tools.test_numeric.TestToNumeric.test_downcast(self)
pandas.tests.tools.test_numeric.TestToNumeric.test_downcast_limits(self)
pandas.tests.tools.test_numeric.TestToNumeric.test_error(self)
pandas.tests.tools.test_numeric.TestToNumeric.test_error_seen_bool(self)
pandas.tests.tools.test_numeric.TestToNumeric.test_list(self)
pandas.tests.tools.test_numeric.TestToNumeric.test_list_numeric(self)
pandas.tests.tools.test_numeric.TestToNumeric.test_non_hashable(self)
pandas.tests.tools.test_numeric.TestToNumeric.test_numeric(self)
pandas.tests.tools.test_numeric.TestToNumeric.test_numeric_dtypes(self)
pandas.tests.tools.test_numeric.TestToNumeric.test_numeric_lists_and_arrays(self)
pandas.tests.tools.test_numeric.TestToNumeric.test_period(self)
pandas.tests.tools.test_numeric.TestToNumeric.test_scalar(self)
pandas.tests.tools.test_numeric.TestToNumeric.test_series(self)
pandas.tests.tools.test_numeric.TestToNumeric.test_series_numeric(self)
pandas.tests.tools.test_numeric.TestToNumeric.test_str(self)
pandas.tests.tools.test_numeric.TestToNumeric.test_timedelta(self)
pandas.tests.tools.test_numeric.TestToNumeric.test_type_check(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/computation/test_eval.py----------------------------------------
A:pandas.tests.computation.test_eval._good_arith_ops->pandas.core.common.difference(_arith_ops_syms, _special_case_arith_ops_syms)
A:pandas.tests.computation.test_eval.nan_df1->DataFrame(rand(10, 5))
A:pandas.tests.computation.test_eval.nan_df2->DataFrame(rand(10, 5))
A:pandas.tests.computation.test_eval.self.current_engines->filter(lambda x: x != self.engine, _engines)
A:pandas.tests.computation.test_eval.ex->'lhs {0} rhs'.format(op)
A:pandas.tests.computation.test_eval.lhs_new->check_operands(lhs, mid, cmp1)
A:pandas.tests.computation.test_eval.rhs_new->check_operands(mid, rhs, cmp2)
A:pandas.tests.computation.test_eval.expected->pandas.DataFrame([[0, 10], [1, 20]], columns=['cat', 'count']).copy()
A:pandas.tests.computation.test_eval.result->pandas.DataFrame([[0, 10], [1, 20]], columns=['cat', 'count']).query('not (cat > 0)', engine=engine, parser=parser)
A:pandas.tests.computation.test_eval.ex1->'lhs {0} mid {1} rhs'.format(cmp, cmp)
A:pandas.tests.computation.test_eval.ex2->'lhs {0} mid and mid {1} rhs'.format(cmp, cmp)
A:pandas.tests.computation.test_eval.ex3->'(lhs {0} mid) & (mid {1} rhs)'.format(cmp, cmp)
A:pandas.tests.computation.test_eval.nlhs->_eval_single_bin(lhs, arith1, rhs, self.engine)
A:pandas.tests.computation.test_eval.(nlhs, ghs)->_eval_single_bin(lhs, arith1, rhs, self.engine).align(ghs)
A:pandas.tests.computation.test_eval.res->pandas.eval('sin + dotted_line', engine=engine, parser=parser)
A:pandas.tests.computation.test_eval.elb->numpy.array([bool(el)])
A:pandas.tests.computation.test_eval.(lhs, rhs)->map(lambda x: np.array([x]), (lhs, rhs))
A:pandas.tests.computation.test_eval.ev->pandas.eval(ex, engine=self.engine, parser=self.parser)
A:pandas.tests.computation.test_eval.expr->'{0}(a, b)'.format(fn)
A:pandas.tests.computation.test_eval.lhs->gen[lhs]()
A:pandas.tests.computation.test_eval.x->self.eval('1')
A:pandas.tests.computation.test_eval.df->pandas.DataFrame([[0, 10], [1, 20]], columns=['cat', 'count'])
A:pandas.tests.computation.test_eval.self.cmp_ops->list(filter(lambda x: x not in ('in', 'not in'), expr._cmp_ops_syms))
A:pandas.tests.computation.test_eval.s->numpy.array([1])
A:pandas.tests.computation.test_eval.only_one_dt->reduce(operator.xor, map(_is_datetime, args))
A:pandas.tests.computation.test_eval.args->product(self.lhs_index_types, self.index_types, self.index_types, self.index_types)
A:pandas.tests.computation.test_eval.df2->DataFrame(np.random.randn(5, 3))
A:pandas.tests.computation.test_eval.df3->mkdf(5, 2, data_gen_f=f, r_idx_type=r2, c_idx_type=c2)
A:pandas.tests.computation.test_eval.index->getattr(locals().get(obj_name), index_name)
A:pandas.tests.computation.test_eval.rhs->gen[rhs]()
A:pandas.tests.computation.test_eval.a->pandas.eval(lhs, engine=engine, parser=parser)
A:pandas.tests.computation.test_eval.b->pandas.eval(rhs, engine=engine, parser=parser)
A:pandas.tests.computation.test_eval.index_name->random.choice(['index', 'columns'])
A:pandas.tests.computation.test_eval.obj_name->random.choice(['df', 'df2'])
A:pandas.tests.computation.test_eval.expected2->DataFrame(np.random.randn(5, 3)).add(s)
A:pandas.tests.computation.test_eval.msg->str(w[0].message)
A:pandas.tests.computation.test_eval.expec->_eval_single_bin(1, op, x + 1, self.engine)
A:pandas.tests.computation.test_eval.y->Series(randn(10))
A:pandas.tests.computation.test_eval.exp->eval(ex)
A:pandas.tests.computation.test_eval.orig_df->pandas.DataFrame([[0, 10], [1, 20]], columns=['cat', 'count']).copy()
A:pandas.tests.computation.test_eval.old_a->pandas.DataFrame([[0, 10], [1, 20]], columns=['cat', 'count']).a.copy()
A:pandas.tests.computation.test_eval.actual->pandas.DataFrame([[0, 10], [1, 20]], columns=['cat', 'count']).eval('c = a + b', inplace=False)
A:pandas.tests.computation.test_eval.ans->pandas.DataFrame([[0, 10], [1, 20]], columns=['cat', 'count']).eval('\n        c = a * @local_var\n        d = c + @local_var\n        ', inplace=True)
A:pandas.tests.computation.test_eval.df_orig->pandas.DataFrame([[0, 10], [1, 20]], columns=['cat', 'count']).copy()
A:pandas.tests.computation.test_eval.r->self.eval('df[df[df < 2] < 2] + df * 2', local_dict={'df': df})
A:pandas.tests.computation.test_eval.df['dates1']->date_range('1/1/2012', periods=5)
A:pandas.tests.computation.test_eval.cls.arith_ops->filter(lambda x: x not in ('in', 'not in'), cls.arith_ops)
A:pandas.tests.computation.test_eval.got->self.eval(expr)
A:pandas.tests.computation.test_eval.expect->numpy.sin(df.a)
A:pandas.tests.computation.test_eval._var_s->randn(10)
A:pandas.tests.computation.test_eval.lcls->locals().copy()
A:pandas.tests.computation.test_eval.lcls2->locals().copy()
A:pandas.tests.computation.test_eval.gbls->globals().copy()
A:pandas.tests.computation.test_eval.gbls2->globals().copy()
A:pandas.tests.computation.test_eval.inst->VisitorClass('x + 1', engine, parser)
A:pandas.tests.computation.test_eval.mid->gen[lhs]()
pandas.tests.computation.test_eval.TestAlignment(object)
pandas.tests.computation.test_eval.TestAlignment.test_align_nested_unary_op(self,engine,parser)
pandas.tests.computation.test_eval.TestAlignment.test_basic_frame_alignment(self,engine,parser)
pandas.tests.computation.test_eval.TestAlignment.test_basic_frame_series_alignment(self,engine,parser)
pandas.tests.computation.test_eval.TestAlignment.test_basic_series_frame_alignment(self,engine,parser)
pandas.tests.computation.test_eval.TestAlignment.test_complex_series_frame_alignment(self,engine,parser)
pandas.tests.computation.test_eval.TestAlignment.test_frame_comparison(self,engine,parser)
pandas.tests.computation.test_eval.TestAlignment.test_medium_complex_frame_alignment(self,engine,parser)
pandas.tests.computation.test_eval.TestAlignment.test_performance_warning_for_poor_alignment(self,engine,parser)
pandas.tests.computation.test_eval.TestAlignment.test_series_frame_commutativity(self,engine,parser)
pandas.tests.computation.test_eval.TestEvalNumexprPandas(object)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.check_alignment(self,result,nlhs,ghs,op)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.check_binary_arith_op(self,lhs,arith1,rhs)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.check_chained_cmp_op(self,lhs,cmp1,mid,cmp2,rhs)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.check_complex_cmp_op(self,lhs,cmp1,rhs,binop,cmp2)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.check_compound_invert_op(self,lhs,cmp1,rhs)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.check_equal(self,result,expected)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.check_floor_division(self,lhs,arith1,rhs)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.check_modulus(self,lhs,arith1,rhs)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.check_pow(self,lhs,arith1,rhs)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.check_simple_cmp_op(self,lhs,cmp1,rhs)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.check_single_invert_op(self,lhs,cmp1,rhs)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.ex(self,op,var_name='lhs')
pandas.tests.computation.test_eval.TestEvalNumexprPandas.get_expected_pow_result(self,lhs,rhs)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.setup_class(cls)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.setup_data(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.setup_method(self,method)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.setup_ops(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.teardown_class(cls)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.teardown_method(self,method)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_binary_arith_ops(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_chained_cmp_op(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_complex_cmp_ops(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_compound_invert_op(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_disallow_scalar_bool_ops(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_float_truncation(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_floor_division(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_frame_invert(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_frame_negate(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_frame_pos(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_identical(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_line_continuation(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_modulus(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_pow(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_scalar_unary(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_series_invert(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_series_negate(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_series_pos(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_simple_cmp_ops(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_single_invert_op(self)
pandas.tests.computation.test_eval.TestEvalNumexprPandas.test_unary_in_array(self)
pandas.tests.computation.test_eval.TestEvalNumexprPython(TestEvalNumexprPandas)
pandas.tests.computation.test_eval.TestEvalNumexprPython.check_chained_cmp_op(self,lhs,cmp1,mid,cmp2,rhs)
pandas.tests.computation.test_eval.TestEvalNumexprPython.setup_class(cls)
pandas.tests.computation.test_eval.TestEvalNumexprPython.setup_ops(self)
pandas.tests.computation.test_eval.TestEvalPythonPandas(TestEvalPythonPython)
pandas.tests.computation.test_eval.TestEvalPythonPandas.check_chained_cmp_op(self,lhs,cmp1,mid,cmp2,rhs)
pandas.tests.computation.test_eval.TestEvalPythonPandas.setup_class(cls)
pandas.tests.computation.test_eval.TestEvalPythonPython(TestEvalNumexprPython)
pandas.tests.computation.test_eval.TestEvalPythonPython.check_alignment(self,result,nlhs,ghs,op)
pandas.tests.computation.test_eval.TestEvalPythonPython.check_modulus(self,lhs,arith1,rhs)
pandas.tests.computation.test_eval.TestEvalPythonPython.setup_class(cls)
pandas.tests.computation.test_eval.TestMathNumExprPandas(TestMathPythonPython)
pandas.tests.computation.test_eval.TestMathNumExprPandas.setup_class(cls)
pandas.tests.computation.test_eval.TestMathNumExprPython(TestMathPythonPython)
pandas.tests.computation.test_eval.TestMathNumExprPython.setup_class(cls)
pandas.tests.computation.test_eval.TestMathPythonPandas(TestMathPythonPython)
pandas.tests.computation.test_eval.TestMathPythonPandas.setup_class(cls)
pandas.tests.computation.test_eval.TestMathPythonPython(object)
pandas.tests.computation.test_eval.TestMathPythonPython.check_result_type(self,dtype,expect_dtype)
pandas.tests.computation.test_eval.TestMathPythonPython.eval(self,*args,**kwargs)
pandas.tests.computation.test_eval.TestMathPythonPython.setup_class(cls)
pandas.tests.computation.test_eval.TestMathPythonPython.teardown_class(cls)
pandas.tests.computation.test_eval.TestMathPythonPython.test_binary_functions(self)
pandas.tests.computation.test_eval.TestMathPythonPython.test_df_arithmetic_subexpression(self)
pandas.tests.computation.test_eval.TestMathPythonPython.test_df_use_case(self)
pandas.tests.computation.test_eval.TestMathPythonPython.test_keyword_arg(self)
pandas.tests.computation.test_eval.TestMathPythonPython.test_result_types(self)
pandas.tests.computation.test_eval.TestMathPythonPython.test_result_types2(self)
pandas.tests.computation.test_eval.TestMathPythonPython.test_unary_functions(self)
pandas.tests.computation.test_eval.TestMathPythonPython.test_undefined_func(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas(object)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.assignment_not_inplace(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.eval(self,*args,**kwargs)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.query_inplace(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.setup_class(cls)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.teardown_class(cls)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_4d_ndarray_fails(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_assignment_column(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_assignment_fails(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_assignment_in_query(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_attr_expression(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_basic_period_index_boolean_expression(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_basic_period_index_subscript_expression(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_bool_ops_with_constants(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_column_in(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_constant(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_date_boolean(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_failing_subscript_with_name_error(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_lhs_expression_subscript(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_multi_line_expression(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_multi_line_expression_local_variable(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_multi_line_expression_not_inplace(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_nested_period_index_subscript_expression(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_panel_fails(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_simple_arith_ops(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_simple_bool_ops(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_simple_in_ops(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_single_variable(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPandas.test_truediv(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPython(TestOperationsNumExprPandas)
pandas.tests.computation.test_eval.TestOperationsNumExprPython.setup_class(cls)
pandas.tests.computation.test_eval.TestOperationsNumExprPython.test_bool_ops_with_constants(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPython.test_check_many_exprs(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPython.test_fails_ampersand(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPython.test_fails_and(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPython.test_fails_not(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPython.test_fails_or(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPython.test_fails_pipe(self)
pandas.tests.computation.test_eval.TestOperationsNumExprPython.test_simple_bool_ops(self)
pandas.tests.computation.test_eval.TestOperationsPythonPandas(TestOperationsNumExprPandas)
pandas.tests.computation.test_eval.TestOperationsPythonPandas.setup_class(cls)
pandas.tests.computation.test_eval.TestOperationsPythonPython(TestOperationsNumExprPython)
pandas.tests.computation.test_eval.TestOperationsPythonPython.setup_class(cls)
pandas.tests.computation.test_eval.TestScope(object)
pandas.tests.computation.test_eval.TestScope.test_global_scope(self,engine,parser)
pandas.tests.computation.test_eval.TestScope.test_no_new_globals(self,engine,parser)
pandas.tests.computation.test_eval.TestScope.test_no_new_locals(self,engine,parser)
pandas.tests.computation.test_eval.TestTypeCasting(object)
pandas.tests.computation.test_eval.TestTypeCasting.test_binop_typecasting(self,engine,parser,op,dt)
pandas.tests.computation.test_eval.TestValidate(object)
pandas.tests.computation.test_eval.TestValidate.test_validate_bool_args(self)
pandas.tests.computation.test_eval._bool_and_frame(lhs,rhs)
pandas.tests.computation.test_eval._eval_single_bin(lhs,cmp1,rhs,engine)
pandas.tests.computation.test_eval._is_datetime(x)
pandas.tests.computation.test_eval._is_py3_complex_incompat(result,expected)
pandas.tests.computation.test_eval._series_and_2d_ndarray(lhs,rhs)
pandas.tests.computation.test_eval._series_and_frame(lhs,rhs)
pandas.tests.computation.test_eval.engine(request)
pandas.tests.computation.test_eval.engine_has_neg_frac(engine)
pandas.tests.computation.test_eval.parser(request)
pandas.tests.computation.test_eval.should_warn(*args)
pandas.tests.computation.test_eval.test_bad_resolver_raises(engine,parser)
pandas.tests.computation.test_eval.test_bool_ops_fails_on_scalars(lhs,cmp,rhs,engine,parser)
pandas.tests.computation.test_eval.test_disallowed_nodes(engine,parser)
pandas.tests.computation.test_eval.test_empty_string_raises(engine,parser)
pandas.tests.computation.test_eval.test_inf(engine,parser)
pandas.tests.computation.test_eval.test_invalid_engine()
pandas.tests.computation.test_eval.test_invalid_local_variable_reference(engine,parser)
pandas.tests.computation.test_eval.test_invalid_parser()
pandas.tests.computation.test_eval.test_more_than_one_expression_raises(engine,parser)
pandas.tests.computation.test_eval.test_name_error_exprs(engine,parser)
pandas.tests.computation.test_eval.test_negate_lt_eq_le(engine,parser)
pandas.tests.computation.test_eval.test_numexpr_builtin_raises(engine,parser)
pandas.tests.computation.test_eval.test_syntax_error_exprs(engine,parser)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/computation/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/computation/test_compat.py----------------------------------------
A:pandas.tests.computation.test_compat.res->pandas.eval('a + b', engine=engine, parser=parser)
pandas.tests.computation.test_compat.test_compat()
pandas.tests.computation.test_compat.test_invalid_numexpr_version(engine,parser)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_operators.py----------------------------------------
A:pandas.tests.series.test_operators.series->Series(date_range('1/1/2000', periods=10))
A:pandas.tests.series.test_operators.val->datetime(2000, 1, 4)
A:pandas.tests.series.test_operators.expected->pandas.Series([11, 12, np.nan], index=[1, 1, 2])
A:pandas.tests.series.test_operators.left->Series([1, 3, 2], index=list('abc'))
A:pandas.tests.series.test_operators.right->Series([2, 2, 2], index=list('bcd'))
A:pandas.tests.series.test_operators.result->op(a, b)
A:pandas.tests.series.test_operators.s->Series(date_range('20130101', periods=5), index=date_range('20130101', periods=5))
A:pandas.tests.series.test_operators.s2->Series([10, 10], index=[1, 2])
A:pandas.tests.series.test_operators.exp->equiv_op(a, b)
A:pandas.tests.series.test_operators.op->getattr(get_ser, op_str, None)
A:pandas.tests.series.test_operators.alt->getattr(operator, opname)
A:pandas.tests.series.test_operators.rop->getattr(Series, 'r' + op)
A:pandas.tests.series.test_operators.p->DataFrame({'first': (1, 0), 'second': (-0.01, -0.02)})
A:pandas.tests.series.test_operators.zero_array->numpy.array([0] * 5)
A:pandas.tests.series.test_operators.data->numpy.random.randn(5)
A:pandas.tests.series.test_operators.cython_or_numpy->op(left, right)
A:pandas.tests.series.test_operators.python->Series([1, 3, 2], index=list('abc')).combine(right, op)
A:pandas.tests.series.test_operators.results->divmod(series, other)
A:pandas.tests.series.test_operators.other_np->numpy.asarray(other_np)
A:pandas.tests.series.test_operators.expecteds->divmod(series.values, np.asarray(other_np))
A:pandas.tests.series.test_operators.s1->Series([1, 2], index=[1, 1])
A:pandas.tests.series.test_operators.v1->date_range('2012-1-1', periods=3, freq='D')
A:pandas.tests.series.test_operators.v2->date_range('2012-1-2', periods=3, freq='D')
A:pandas.tests.series.test_operators.xp->Series(1000000000.0 * 3600 * 24, rs.index).astype('int64').astype('timedelta64[ns]')
A:pandas.tests.series.test_operators.df->DataFrame(np.random.randn(5, 2), index=date_range('20130101', periods=5))
A:pandas.tests.series.test_operators.td->Series([timedelta(minutes=5, seconds=3)] * 3)
A:pandas.tests.series.test_operators.maxa->df['A'].max()
A:pandas.tests.series.test_operators.d->DataFrame({'A': s})
A:pandas.tests.series.test_operators.ts->Series([3, 4, 5, 6, 7], [3, 4, 5, 6, 7], dtype=float)
A:pandas.tests.series.test_operators.expected2->Series(date_range('2011-12-31', periods=3, freq='-1D'))
A:pandas.tests.series.test_operators.td1->Series(timedelta_range('1 days 1 min', periods=5, freq='H'))
A:pandas.tests.series.test_operators.td2->Series(timedelta_range('1 days 1 min', periods=5, freq='H')).copy()
A:pandas.tests.series.test_operators.startdate->Series(date_range('2013-01-01', '2013-01-03'))
A:pandas.tests.series.test_operators.enddate->Series(date_range('2013-03-01', '2013-03-03'))
A:pandas.tests.series.test_operators.sop->getattr(s1, op, None)
A:pandas.tests.series.test_operators.ser->Series([Timestamp('20130301'), Timestamp('20130228 23:00:00'), Timestamp('20130228 22:00:00'), Timestamp('20130228 21:00:00')])
A:pandas.tests.series.test_operators.nptd->timedelta64(d, h, m, s, us)
A:pandas.tests.series.test_operators.pytd->timedelta(days=d, hours=h, minutes=m, seconds=s, microseconds=us)
A:pandas.tests.series.test_operators.lhs->op(ser, nptd)
A:pandas.tests.series.test_operators.rhs->op(ser, pytd)
A:pandas.tests.series.test_operators.dt1->Series(date_range('2000-01-01 09:00:00', periods=5, tz=tz), name='foo')
A:pandas.tests.series.test_operators.dt2->Series(date_range('2000-01-01 09:00:00', periods=5, tz=tz), name='foo').copy()
A:pandas.tests.series.test_operators.dt->Series(date_range('2012-1-1', periods=3, freq='D'))
A:pandas.tests.series.test_operators.timedelta_series->Series([NaT, Timedelta('1s')])
A:pandas.tests.series.test_operators.datetime_series->Series([NaT, Timestamp('19900315')])
A:pandas.tests.series.test_operators.nat_series_dtype_timedelta->Series([NaT, NaT], dtype='timedelta64[ns]')
A:pandas.tests.series.test_operators.nat_series_dtype_timestamp->Series([NaT, NaT], dtype='datetime64[ns]')
A:pandas.tests.series.test_operators.single_nat_dtype_datetime->Series([NaT], dtype='datetime64[ns]')
A:pandas.tests.series.test_operators.single_nat_dtype_timedelta->Series([NaT], dtype='timedelta64[ns]')
A:pandas.tests.series.test_operators.f->getattr(operator, op)
A:pandas.tests.series.test_operators.mask->Series(date_range('20130101', periods=5), index=date_range('20130101', periods=5)).isnull()
A:pandas.tests.series.test_operators.filled->Series(date_range('20130101', periods=5), index=date_range('20130101', periods=5)).fillna(s[0])
A:pandas.tests.series.test_operators.shifted->Series(date_range('20130101', periods=5), index=date_range('20130101', periods=5)).shift(2)
A:pandas.tests.series.test_operators.a->Series([nan, 1.0, 2.0, 3.0, nan], index=np.arange(5))
A:pandas.tests.series.test_operators.b->Series([nan, 1, nan, 3, nan, 4.0], index=np.arange(6))
A:pandas.tests.series.test_operators.index->list('bca')
A:pandas.tests.series.test_operators.t->Series([True, False, True])
A:pandas.tests.series.test_operators.s_tft->Series([True, False, True], index=index)
A:pandas.tests.series.test_operators.s_fff->Series([False, False, False], index=index)
A:pandas.tests.series.test_operators.s_tff->Series([True, False, False], index=index)
A:pandas.tests.series.test_operators.s_empty->Series([])
A:pandas.tests.series.test_operators.s_0123->Series(range(4), dtype='int64')
A:pandas.tests.series.test_operators.s_3333->Series([3] * 4)
A:pandas.tests.series.test_operators.s_4444->Series([4] * 4)
A:pandas.tests.series.test_operators.s_a0b1c0->Series([1], list('b'))
A:pandas.tests.series.test_operators.s_1111->Series([1] * 4, dtype='int8')
A:pandas.tests.series.test_operators.s_ftft->Series([False, True, False, True])
A:pandas.tests.series.test_operators.s_abNd->Series(['a', 'b', np.NaN, 'd'])
A:pandas.tests.series.test_operators.empty->Series([], index=Index([]))
A:pandas.tests.series.test_operators.arr->Series(np.random.randn(10), index=np.arange(10), dtype=object)
A:pandas.tests.series.test_operators.s3->pandas.Series([True, False, True], index=list('ABC'), name='x')
A:pandas.tests.series.test_operators.s4->pandas.Series([True, True, True, True], index=list('ABCD'), name='x')
A:pandas.tests.series.test_operators.vals->Series(tm.rands_array(5, 10))
A:pandas.tests.series.test_operators.frame->DataFrame({'vals': vals})
A:pandas.tests.series.test_operators.exp_index->Series([nan, 1.0, 2.0, 3.0, nan], index=np.arange(5)).index.union(b.index)
A:pandas.tests.series.test_operators.amask->isnull(a)
A:pandas.tests.series.test_operators.bmask->isnull(b)
A:pandas.tests.series.test_operators.lop->getattr(Series, op)
A:pandas.tests.series.test_operators.lequiv->getattr(operator, op)
A:pandas.tests.series.test_operators.df['date']->Timestamp('20130102')
A:pandas.tests.series.test_operators.base->pandas.DatetimeIndex(['2011-01-01', '2011-01-02', '2011-01-03'], tz='UTC')
pandas.tests.series.test_operators.TestSeriesOperators(TestData)
pandas.tests.series.test_operators.TestSeriesOperators.test_arith_ops_df_compat(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_bool_ops_df_compat(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_comp_ops_df_compat(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_comparison_different_length(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_comparison_flex_alignment(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_comparison_flex_alignment_fill(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_comparison_flex_basic(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_comparison_invalid(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_comparison_label_based(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_comparison_object_numeric_nas(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_comparison_operators_with_nas(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_comparison_tuples(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_comparisons(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_datetime64_with_index(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_div(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_divide_decimal(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_divmod(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_dti_tz_convert_to_utc(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_frame_radd_more(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_invert(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_more_na_comparisons(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_nat_comparisons(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_nat_comparisons_scalar(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_ne(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_neg(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_object_comparisons(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_op_duplicate_index(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_op_method(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_operator_series_comparison_zerorank(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_operators(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_operators_bitwise(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_operators_combine(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_operators_corner(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_operators_datetimelike(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_operators_empty_int_corner(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_operators_frame(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_operators_na_handling(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_operators_reverse_object(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_operators_timedelta64(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_ops_datetimelike_align(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_ops_nat(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_return_dtypes_bool_op_costant(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_scalar_na_cmp_corners(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_series_comparison_scalars(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_series_frame_radd_bug(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_series_radd_more(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_sub_datetime_compat(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_sub_single_tz(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_timedelta64_conversions(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_timedelta64_equal_timedelta_supported_ops(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_timedelta64_operations_with_DateOffset(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_timedelta64_operations_with_integers(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_timedelta64_operations_with_timedeltas(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_timedelta_series_ops(self)
pandas.tests.series.test_operators.TestSeriesOperators.test_timedeltas_with_DateOffset(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_io.py----------------------------------------
A:pandas.tests.series.test_io.ts->Series(np.random.randn(len(prng)), prng)
A:pandas.tests.series.test_io.ts_h->pandas.Series.from_csv(path, header=0)
A:pandas.tests.series.test_io.series->pandas.Series.from_csv(path, sep='|', parse_dates=False)
A:pandas.tests.series.test_io.series_h->pandas.Series.from_csv(path, header=0)
A:pandas.tests.series.test_io.outfile->open(path, 'w')
A:pandas.tests.series.test_io.checkseries->Series({'1998-01-01': 1.0, '1999-01-01': 2.0})
A:pandas.tests.series.test_io.lines->f.readlines()
A:pandas.tests.series.test_io.arr->numpy.loadtxt(path)
A:pandas.tests.series.test_io.buf->StringIO()
A:pandas.tests.series.test_io.s->pandas.Series([1], dtype=t)
A:pandas.tests.series.test_io.s2->pandas.Series.from_csv(buf, index_col=0, encoding='UTF-8')
A:pandas.tests.series.test_io.ser->Series([0.123456, 0.234567, 0.567567])
A:pandas.tests.series.test_io.rs->pandas.Series([1], dtype=t).tolist()
A:pandas.tests.series.test_io.xp->self.ts.values.tolist()
A:pandas.tests.series.test_io.split->pandas.Series([1], dtype=t).str.split('\\s+and\\s+')
A:pandas.tests.series.test_io.csv_str->pandas.Series([1], dtype=t).to_csv(path=None)
A:pandas.tests.series.test_io.prng->period_range('1/1/2011', '1/1/2012', freq='M')
A:pandas.tests.series.test_io.new_ts->pandas.util.testing.round_trip_pickle(ts)
A:pandas.tests.series.test_io.unpickled->pandas.read_pickle(path)
A:pandas.tests.series.test_io.result->pandas.Series([1], dtype=t).to_frame()
A:pandas.tests.series.test_io.expected->SubclassedFrame({'X': [1, 2, 3]})
pandas.tests.series.test_io.TestSeriesIO(TestData)
pandas.tests.series.test_io.TestSeriesIO._pickle_roundtrip_name(self,obj)
pandas.tests.series.test_io.TestSeriesIO.test_pickle_preserve_name(self)
pandas.tests.series.test_io.TestSeriesIO.test_timeseries_periodindex(self)
pandas.tests.series.test_io.TestSeriesIO.test_to_dict(self)
pandas.tests.series.test_io.TestSeriesIO.test_to_frame(self)
pandas.tests.series.test_io.TestSeriesIO.test_to_frame_expanddim(self)
pandas.tests.series.test_io.TestSeriesToCSV(TestData)
pandas.tests.series.test_io.TestSeriesToCSV.test_from_csv(self)
pandas.tests.series.test_io.TestSeriesToCSV.test_to_csv(self)
pandas.tests.series.test_io.TestSeriesToCSV.test_to_csv_float_format(self)
pandas.tests.series.test_io.TestSeriesToCSV.test_to_csv_list_entries(self)
pandas.tests.series.test_io.TestSeriesToCSV.test_to_csv_path_is_none(self)
pandas.tests.series.test_io.TestSeriesToCSV.test_to_csv_unicode_index(self)
pandas.tests.series.test_io.TestSeriesToList(TestData)
pandas.tests.series.test_io.TestSeriesToList.test_tolist(self)
pandas.tests.series.test_io.TestSeriesToList.test_tolist_np_float(self)
pandas.tests.series.test_io.TestSeriesToList.test_tolist_np_int(self)
pandas.tests.series.test_io.TestSeriesToList.test_tolist_np_uint(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_constructors.py----------------------------------------
A:pandas.tests.series.test_constructors.scalar->Series(0.5)
A:pandas.tests.series.test_constructors.derived->Series(self.ts)
A:pandas.tests.series.test_constructors.mixed->Series(['hello', np.NaN], index=[0, 1])
A:pandas.tests.series.test_constructors.m->map(lambda x: x, range(10))
A:pandas.tests.series.test_constructors.empty->Series(index=lrange(10))
A:pandas.tests.series.test_constructors.empty2->Series(np.nan, index=lrange(10))
A:pandas.tests.series.test_constructors.index2->sorted(index1)
A:pandas.tests.series.test_constructors.s1->Series([4, 7, -5, 3], index=index1)
A:pandas.tests.series.test_constructors.s2->Series(s, dtype=np.int64)
A:pandas.tests.series.test_constructors.expected->Series([NaT])
A:pandas.tests.series.test_constructors.result->Series([np.nan]).astype('M8[ns]')
A:pandas.tests.series.test_constructors.exp->Series(date_range('1/1/2000', periods=10))
A:pandas.tests.series.test_constructors.exp.index->lrange(10, 20)
A:pandas.tests.series.test_constructors.cat->Series(pd.Categorical([1, 2, 3]), dtype='category')
A:pandas.tests.series.test_constructors.res->Series(cat)
A:pandas.tests.series.test_constructors.s->Series([], dtype=dtype)
A:pandas.tests.series.test_constructors.data->A([('col%s' % i, random.random()) for i in range(12)])
A:pandas.tests.series.test_constructors.data[0]->datetime(2001, 1, 1)
A:pandas.tests.series.test_constructors.data[2]->datetime(2001, 1, 3)
A:pandas.tests.series.test_constructors.data[1]->datetime(2001, 1, 2)
A:pandas.tests.series.test_constructors.rng->date_range('20090415', '20090519', freq='B')
A:pandas.tests.series.test_constructors.df->pandas.DataFrame({'wing1': wing1, 'wing2': wing2, 'mat': mat}, index=belly)
A:pandas.tests.series.test_constructors.x->Series(data)
A:pandas.tests.series.test_constructors.y->pandas.Series(x, copy=True, dtype=float)
A:pandas.tests.series.test_constructors.belly->'216 3T19'.split()
A:pandas.tests.series.test_constructors.wing1->'2T15 4H19'.split()
A:pandas.tests.series.test_constructors.wing2->'416 4T20'.split()
A:pandas.tests.series.test_constructors.mat->pandas.to_datetime('2016-01-22 2019-09-07'.split())
A:pandas.tests.series.test_constructors.dates->Series(d, index=self.ts.index)
A:pandas.tests.series.test_constructors.values2->Series(d, index=self.ts.index).view(np.ndarray).astype('datetime64[ns]')
A:pandas.tests.series.test_constructors.values1->Series(d, index=self.ts.index).view(np.ndarray).astype('M8[{0}]'.format(dtype))
A:pandas.tests.series.test_constructors.dates2->numpy.array([d.date() for d in dates.to_pydatetime()], dtype=object)
A:pandas.tests.series.test_constructors.series1->Series(dates2, dates)
A:pandas.tests.series.test_constructors.dr->date_range('20130101', periods=3, tz='US/Eastern')
A:pandas.tests.series.test_constructors.t->Series(date_range('20130101', periods=1000, tz='US/Eastern'))
A:pandas.tests.series.test_constructors.index->pandas.IntervalIndex.from_breaks(np.arange(3), closed='right')
A:pandas.tests.series.test_constructors.pi->period_range('20130101', periods=5, freq='D')
A:pandas.tests.series.test_constructors.pidx->pandas.util.testing.makePeriodIndex(100)
A:pandas.tests.series.test_constructors._d->sorted(d.items())
A:pandas.tests.series.test_constructors.ser->ser.reindex(index=expected.index).reindex(index=expected.index)
A:pandas.tests.series.test_constructors.series->Series(list(date_range('1/1/2000', periods=10)))
A:pandas.tests.series.test_constructors.refseries->Series(dict(compat.iteritems(data)))
A:pandas.tests.series.test_constructors.data_datetime64->create_data(np.datetime64)
A:pandas.tests.series.test_constructors.data_datetime->create_data(lambda x: datetime.strptime(x, '%Y-%m-%d'))
A:pandas.tests.series.test_constructors.data_Timestamp->create_data(Timestamp)
A:pandas.tests.series.test_constructors.result_datetime64->Series(data_datetime64)
A:pandas.tests.series.test_constructors.result_datetime->Series(data_datetime)
A:pandas.tests.series.test_constructors.result_Timestamp->Series(data_Timestamp)
A:pandas.tests.series.test_constructors.values->frozenset(values)
A:pandas.tests.series.test_constructors.nans->Series(np.NaN, index=self.ts.index)
A:pandas.tests.series.test_constructors.strings->Series('foo', index=self.ts.index)
A:pandas.tests.series.test_constructors.d->datetime.datetime.now()
A:pandas.tests.series.test_constructors.categorical->Series(0, index=self.ts.index, dtype='category')
A:pandas.tests.series.test_constructors.td->Series([timedelta(days=i) for i in range(3)] + ['foo'])
pandas.tests.series.test_constructors.TestSeriesConstructors(TestData)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_NaT_cast(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_NaT_scalar(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_auto_conversion(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_construction_consistency(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_construction_interval(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_cant_cast_datetime64(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_cast(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_cast_object(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_categorical(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_copy(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_corner(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_datelike_coercion(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_datetimes_with_nulls(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_default_index(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_dict(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_dict_datetime64_index(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_dict_multiindex(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_dict_timedelta_index(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_dtype_datetime64(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_dtype_nocast(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_dtype_timedelta64(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_empty(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_generator(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_generic_timestamp_deprecated(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_iterator(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_list_like(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_list_of_tuples(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_map(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_maskedarray(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_name_hashable(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_name_unhashable(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_pass_nan_nat(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_pass_none(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_periodindex(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_sanitize(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_series(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_set(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_subclass_dict(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_tuple_of_tuples(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_constructor_with_datetime_tz(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_fromDict(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_fromValue(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_invalid_dtype(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_orderedDict_ctor(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_orderedDict_subclass_ctor(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_scalar_conversion(self)
pandas.tests.series.test_constructors.TestSeriesConstructors.test_series_ctor_plus_datetimeindex(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_timeseries.py----------------------------------------
A:pandas.tests.series.test_timeseries.rng->date_range('1/1/2000', periods=10, freq='4h')
A:pandas.tests.series.test_timeseries.shifted->Series(self.ts.values, Index(np.asarray(self.ts.index)), name='ts').tshift(1)
A:pandas.tests.series.test_timeseries.unshifted->Series(self.ts.values, Index(np.asarray(self.ts.index)), name='ts').tshift(1).tshift(-1)
A:pandas.tests.series.test_timeseries.offset->BDay()
A:pandas.tests.series.test_timeseries.ps->pandas.util.testing.makePeriodSeries()
A:pandas.tests.series.test_timeseries.shifted2->self.ts.tshift(freq=self.ts.index.freq)
A:pandas.tests.series.test_timeseries.shifted3->pandas.util.testing.makePeriodSeries().tshift(freq=BDay())
A:pandas.tests.series.test_timeseries.shifted4->pandas.util.testing.makePeriodSeries().shift(1, freq='B')
A:pandas.tests.series.test_timeseries.shifted5->pandas.util.testing.makePeriodSeries().shift(1, freq=BDay())
A:pandas.tests.series.test_timeseries.index->MultiIndex(levels=levels, labels=labels)
A:pandas.tests.series.test_timeseries.s1->Series(np.arange(5, dtype=dtype), index=index)
A:pandas.tests.series.test_timeseries.result->DataFrame(arr).TS.min()
A:pandas.tests.series.test_timeseries.expected->s.groupby(lambda x: x[0] % 2 == 0).count()
A:pandas.tests.series.test_timeseries.s->pandas.Series.from_array(arr['Date'], Index([0]))
A:pandas.tests.series.test_timeseries.exp->Timestamp(df.TS.iat[0])
A:pandas.tests.series.test_timeseries.s2->Series(date_range('2000-01-01 09:00:00', periods=5, tz='CET'), name='foo')
A:pandas.tests.series.test_timeseries.ts->_simple_ts('1/1/2000', '1/1/2001')
A:pandas.tests.series.test_timeseries.exp_index->_simple_ts('1/1/2000', '1/1/2001').index.shift(1, freq='5T')
A:pandas.tests.series.test_timeseries.idx->date_range('1750-1-1', '2050-1-1', freq='7D')
A:pandas.tests.series.test_timeseries.dates->date_range('1/1/2000', periods=4)
A:pandas.tests.series.test_timeseries.res->pandas.Series.from_array(arr['Date'], Index([0])).shift(ex)
A:pandas.tests.series.test_timeseries.inferred_ts->Series(self.ts.values, Index(np.asarray(self.ts.index)), name='ts')
A:pandas.tests.series.test_timeseries.truncated->_simple_ts('1/1/2000', '1/1/2001').truncate(before=self.ts.index[-1] + offset)
A:pandas.tests.series.test_timeseries.daily_ts->_simple_ts('1/1/2000', '1/1/2001').asfreq('D', fill_value=-1)
A:pandas.tests.series.test_timeseries.monthly_ts->_simple_ts('1/1/2000', '1/1/2001').asfreq('D', fill_value=-1).asfreq(BMonthEnd())
A:pandas.tests.series.test_timeseries.rs->_simple_ts('1/1/2000', '1/1/2001').at_time('16:00')
A:pandas.tests.series.test_timeseries.xp->pandas.Series.from_array(arr['Date'], Index([0])).diff()
A:pandas.tests.series.test_timeseries.nxp->pandas.Series.from_array(arr['Date'], Index([0])).diff().diff()
A:pandas.tests.series.test_timeseries.filled->self.ts.fillna(method='pad')
A:pandas.tests.series.test_timeseries.chg->pandas.Series.from_array(arr['Date'], Index([0])).pct_change()
A:pandas.tests.series.test_timeseries.corr1->self.ts.corr(self.ts.shift(n))
A:pandas.tests.series.test_timeseries.corr2->self.ts.autocorr(lag=n)
A:pandas.tests.series.test_timeseries.ser->Series(np.random.randn(len(idx)), idx.astype(object))
A:pandas.tests.series.test_timeseries.empty->Series()
A:pandas.tests.series.test_timeseries.a->Series(dtype='M8[ns]')
A:pandas.tests.series.test_timeseries.b->Series(dtype='m8[ns]')
A:pandas.tests.series.test_timeseries.mask->numpy.zeros(len(rng), dtype=bool)
A:pandas.tests.series.test_timeseries.series->Series(0, index=rng)
A:pandas.tests.series.test_timeseries.df->DataFrame(arr)
A:pandas.tests.series.test_timeseries.ts2->ts_slice.copy()
A:pandas.tests.series.test_timeseries.norm->date_range('1/1/2000', periods=20)
A:pandas.tests.series.test_timeseries.vals->numpy.random.randn(20, 3)
A:pandas.tests.series.test_timeseries.stime->time(22, 0)
A:pandas.tests.series.test_timeseries.etime->time(9, 0)
A:pandas.tests.series.test_timeseries.close_open->product([True, False], [True, False])
A:pandas.tests.series.test_timeseries.filtered->_simple_ts('1/1/2000', '1/1/2001').between_time(stime, etime, inc_start, inc_end)
A:pandas.tests.series.test_timeseries.t->_simple_ts('1/1/2000', '1/1/2001').at_time('16:00').time()
A:pandas.tests.series.test_timeseries.frame->DataFrame({'a': date_range('1/1/2000', periods=10)})
A:pandas.tests.series.test_timeseries.pts->_simple_ts('1/1/2000', '1/1/2001').to_period('M')
A:pandas.tests.series.test_timeseries.exp.index->Timestamp(df.TS.iat[0]).index.asfreq('M')
A:pandas.tests.series.test_timeseries.exp_idx->pandas.PeriodIndex(['2011-01-01', '2011-01-02', '2011-01-03', '2011-01-04'], freq='D')
A:pandas.tests.series.test_timeseries.dr->date_range(start='1/1/2012', freq='5min', periods=10)
A:pandas.tests.series.test_timeseries.grouped->pandas.Series.from_array(arr['Date'], Index([0])).groupby(lambda x: x[0] % 2 == 0)
A:pandas.tests.series.test_timeseries.buf->StringIO()
A:pandas.tests.series.test_timeseries.p->pandas.util.testing.round_trip_pickle(NaT)
A:pandas.tests.series.test_timeseries.idx_p->pandas.util.testing.round_trip_pickle(idx)
A:pandas.tests.series.test_timeseries.nofreq->DatetimeIndex(list(rng[25:75]), name='other')
A:pandas.tests.series.test_timeseries.rng2->date_range('1/1/2000', periods=10, freq='4h').take(np.random.permutation(len(rng)))
A:pandas.tests.series.test_timeseries.the_min->date_range('1/1/2000', periods=10, freq='4h').take(np.random.permutation(len(rng))).min()
A:pandas.tests.series.test_timeseries.the_max->date_range('1/1/2000', periods=10, freq='4h').take(np.random.permutation(len(rng))).max()
A:pandas.tests.series.test_timeseries.arr->numpy.array(dates, dtype=[('Date', 'M8[us]'), ('Forecasting', 'M8[us]')])
pandas.tests.series.test_timeseries.TestTimeSeries(TestData)
pandas.tests.series.test_timeseries.TestTimeSeries.test_asfreq(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_asfreq_datetimeindex_empty_series(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_asfreq_keep_index_name(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_asfreq_normalize(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_asfreq_resample_set_correct_freq(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_at_time(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_autocorr(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_between(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_between_time(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_between_time_formats(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_between_time_types(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_contiguous_boolean_preserve_freq(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_diff(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_empty_series_ops(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_first_last_valid(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_first_subset(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_format_pre_1900_dates(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_from_M8_structured(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_get_level_values_box(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_groupby_count_dateparseerror(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_last_subset(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_min_max(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_min_max_series(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_mpl_compat_hack(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_pct_change(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_pct_change_shift_over_nas(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_pickle(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_promote_datetime_date(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_series_ctor_datetime64(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_series_map_box_timedelta(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_series_repr_nat(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_setops_preserve_freq(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_shift(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_shift2(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_shift_dst(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_timeseries_coercion(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_to_csv_numpy_16_bug(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_to_datetime_unit(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_to_period(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_truncate(self)
pandas.tests.series.test_timeseries.TestTimeSeries.test_tshift(self)
pandas.tests.series.test_timeseries._simple_ts(start,end,freq='D')
pandas.tests.series.test_timeseries.assert_range_equal(left,right)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_rank.py----------------------------------------
A:pandas.tests.series.test_rank.s->self.s.dropna().astype('i8')
A:pandas.tests.series.test_rank.ranks->self.ts.rank()
A:pandas.tests.series.test_rank.oranks->self.ts.astype('O').rank()
A:pandas.tests.series.test_rank.mask->numpy.isnan(self.ts)
A:pandas.tests.series.test_rank.filled->self.ts.fillna(np.inf)
A:pandas.tests.series.test_rank.exp->Series(random_order + 1.0, dtype='float64')
A:pandas.tests.series.test_rank.iseries->Series(values[random_order])
A:pandas.tests.series.test_rank.iranks->Series(values[random_order]).rank()
A:pandas.tests.series.test_rank.rng->date_range('1/1/1990', periods=5)
A:pandas.tests.series.test_rank.values->numpy.array([-np.inf, -50, -1, -1e-20, -1e-25, -1e-50, 0, 1e-40, 1e-20, 1e-10, 2, 40, np.inf], dtype='float64')
A:pandas.tests.series.test_rank.random_order->numpy.random.permutation(len(values))
A:pandas.tests.series.test_rank.exp_desc->Series([6.0, 5.0, 4.0, 3.0, 2.0, 1.0])
A:pandas.tests.series.test_rank.ordered->Series(['first', 'second', 'third', 'fourth', 'fifth', 'sixth']).astype('category', categories=['first', 'second', 'third', 'fourth', 'fifth', 'sixth'], ordered=True)
A:pandas.tests.series.test_rank.unordered->Series(['first', 'second', 'third', 'fourth', 'fifth', 'sixth']).astype('category', categories=['first', 'second', 'third', 'fourth', 'fifth', 'sixth'], ordered=False)
A:pandas.tests.series.test_rank.exp_unordered->Series([2.0, 4.0, 6.0, 3.0, 1.0, 5.0])
A:pandas.tests.series.test_rank.res->self.s.dropna().astype('i8').rank(ascending=False)
A:pandas.tests.series.test_rank.unordered1->Series([1, 2, 3, 4, 5, 6]).astype('category', categories=[1, 2, 3, 4, 5, 6], ordered=False)
A:pandas.tests.series.test_rank.exp_unordered1->Series([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])
A:pandas.tests.series.test_rank.res1->Series([1, 2, 3, 4, 5, 6]).astype('category', categories=[1, 2, 3, 4, 5, 6], ordered=False).rank()
A:pandas.tests.series.test_rank.na_ser->Series(['first', 'second', 'third', 'fourth', np.NaN]).astype('category', categories=['first', 'second', 'third', 'fourth'], ordered=True)
A:pandas.tests.series.test_rank.exp_top->Series([0.4, 0.6, 0.8, 1.0, 0.2])
A:pandas.tests.series.test_rank.exp_bot->Series([0.2, 0.4, 0.6, 0.8, 1.0])
A:pandas.tests.series.test_rank.exp_keep->Series([0.25, 0.5, 0.75, 1.0, np.NaN])
A:pandas.tests.series.test_rank.result->self.s.dropna().astype('i8').rank(method=method)
A:pandas.tests.series.test_rank.disabled->set([(object, 'first')])
A:pandas.tests.series.test_rank.xs->numpy.concatenate([xs[i:] for i in range(0, 9, 2)])
A:pandas.tests.series.test_rank.ts->Series(vals, index=index)
A:pandas.tests.series.test_rank.sprank->rankdata(vals, m if m != 'first' else 'ordinal')
A:pandas.tests.series.test_rank.expected->Series(res).dropna()
A:pandas.tests.series.test_rank.res2->self.s.dropna().astype('i8').rank(method=method, ascending=False)
pandas.tests.series.test_rank.TestSeriesRank(TestData)
pandas.tests.series.test_rank.TestSeriesRank.test_rank(self)
pandas.tests.series.test_rank.TestSeriesRank.test_rank_categorical(self)
pandas.tests.series.test_rank.TestSeriesRank.test_rank_dense_method(self)
pandas.tests.series.test_rank.TestSeriesRank.test_rank_descending(self)
pandas.tests.series.test_rank.TestSeriesRank.test_rank_inf(self)
pandas.tests.series.test_rank.TestSeriesRank.test_rank_int(self)
pandas.tests.series.test_rank.TestSeriesRank.test_rank_methods_series(self)
pandas.tests.series.test_rank.TestSeriesRank.test_rank_object_bug(self)
pandas.tests.series.test_rank.TestSeriesRank.test_rank_signature(self)
pandas.tests.series.test_rank.TestSeriesRank.test_rank_tie_methods(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_datetime_values.py----------------------------------------
A:pandas.tests.series.test_datetime_values.result->to_timedelta(np.abs(a - b))
A:pandas.tests.series.test_datetime_values.a->Series([a])
A:pandas.tests.series.test_datetime_values.b->datetime(1993, 6, 22, 13, 30)
A:pandas.tests.series.test_datetime_values.exp_values->pandas.date_range('2015-01-01', '2016-01-01', freq='T', tz='UTC').tz_convert('America/Chicago')
A:pandas.tests.series.test_datetime_values.expected->Series([date(2014, 4, 4), date(2014, 7, 18), date(2015, 11, 22)])
A:pandas.tests.series.test_datetime_values.s->Series(rng)
A:pandas.tests.series.test_datetime_values.index->date_range('20130101', periods=3, freq='D')
A:pandas.tests.series.test_datetime_values.exp->pandas.Series([s[0]] * 3, index=index, name='xxx')
A:pandas.tests.series.test_datetime_values.results->get_dir(s)
A:pandas.tests.series.test_datetime_values.datetime_index->date_range('20150301', periods=5)
A:pandas.tests.series.test_datetime_values.period_index->period_range('20150301', periods=5)
A:pandas.tests.series.test_datetime_values.rng->pandas.DatetimeIndex(['2014-04-04 23:56', '2014-07-18 21:24', '2015-11-22 22:14'], tz='US/Eastern')
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues(TestData)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_between(self)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_date_tz(self)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_dt_accessor_api(self)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_dt_accessor_no_new_attributes(self)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_dt_namespace_accessor(self)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_strftime(self)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_sub_of_datetime_from_TimeSeries(self)
pandas.tests.series.test_datetime_values.TestSeriesDatetimeValues.test_valid_dt_with_missing_values(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_validate.py----------------------------------------
A:pandas.tests.series.test_validate.s->Series([1, 2, 3, 4, 5])
pandas.tests.series.test_validate.TestSeriesValidate(object)
pandas.tests.series.test_validate.TestSeriesValidate.test_validate_bool_args(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_subclass.py----------------------------------------
A:pandas.tests.series.test_subclass.s->pandas.util.testing.SubclassedSparseSeries([1.1, 2.1], index=list('abcd'), name='xxx')
A:pandas.tests.series.test_subclass.exp->pandas.util.testing.SubclassedSparseDataFrame({'xxx': [1.1, 2.1]}, index=list('abcd'))
A:pandas.tests.series.test_subclass.res->pandas.util.testing.SubclassedSparseSeries([1.1, 2.1], index=list('abcd'), name='xxx').to_frame()
A:pandas.tests.series.test_subclass.s1->pandas.util.testing.SubclassedSparseSeries([4.0, 5.0, 6.0])
A:pandas.tests.series.test_subclass.s2->pandas.util.testing.SubclassedSparseSeries([1.0, 2.0, 3.0])
A:pandas.tests.series.test_subclass.exp_arr->pandas.SparseArray([1, 2], dtype=np.int64, kind='block', fill_value=0)
pandas.tests.series.test_subclass.TestSeriesSubclassing(object)
pandas.tests.series.test_subclass.TestSeriesSubclassing.test_indexing_sliced(self)
pandas.tests.series.test_subclass.TestSeriesSubclassing.test_to_frame(self)
pandas.tests.series.test_subclass.TestSparseSeriesSubclassing(object)
pandas.tests.series.test_subclass.TestSparseSeriesSubclassing.test_subclass_sparse_addition(self)
pandas.tests.series.test_subclass.TestSparseSeriesSubclassing.test_subclass_sparse_slice(self)
pandas.tests.series.test_subclass.TestSparseSeriesSubclassing.test_subclass_sparse_to_frame(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_period.py----------------------------------------
A:pandas.tests.series.test_period.self.series->Series(period_range('2000-01-01', periods=10, freq='D'))
A:pandas.tests.series.test_period.series->pandas.Series([pd.Period('2011-01-01', freq='D'), pd.Period('2011-02-01', freq='D')])
A:pandas.tests.series.test_period.exp->Series([True, False, True, True])
A:pandas.tests.series.test_period.s->Series([Period('2012', freq='A'), Period('2011-01', freq='M'), Period('2013', freq='A'), Period('2011-05', freq='M')])
A:pandas.tests.series.test_period.res->Series([Period('2012', freq='A'), Period('2011-01', freq='M'), Period('2013', freq='A'), Period('2011-05', freq='M')]).fillna('XXX')
A:pandas.tests.series.test_period.val->pandas.Period('2000-01-04', freq='D')
A:pandas.tests.series.test_period.expected->self.series.astype('object')
A:pandas.tests.series.test_period.result->DataFrame({'a': self.series, 'b': ['foo'] * len(self.series)}).values.squeeze()
A:pandas.tests.series.test_period.df->DataFrame({'a': self.series, 'b': ['foo'] * len(self.series)})
A:pandas.tests.series.test_period.base->Series([Period('2011', freq='A'), Period('2011-02', freq='M'), Period('2013', freq='A'), Period('2011-04', freq='M')])
A:pandas.tests.series.test_period.p->Period('2011-02', freq=freq)
A:pandas.tests.series.test_period.s2->Series([Period(x, freq='A') for x in ['2011', '2011', '2011', '2011']])
A:pandas.tests.series.test_period.rng->period_range('1/1/2000', '1/1/2010', freq='A')
A:pandas.tests.series.test_period.ts->Series(np.random.randn(len(rng)), index=rng)
pandas.tests.series.test_period.TestSeriesPeriod(object)
pandas.tests.series.test_period.TestSeriesPeriod.setup_method(self,method)
pandas.tests.series.test_period.TestSeriesPeriod.test_align_series(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_auto_conversion(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_between(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_comp_series_period_object(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_comp_series_period_scalar(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_comp_series_period_series(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_dropna(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_fillna(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_getitem(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_intercept_astype_object(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_isnull(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_series_comparison_scalars(self)
pandas.tests.series.test_period.TestSeriesPeriod.test_set_none_nan(self)
pandas.tests.series.test_period._permute(obj)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_combine_concat.py----------------------------------------
A:pandas.tests.series.test_combine_concat.appendedSeries->self.series.append(self.objSeries)
A:pandas.tests.series.test_combine_concat.result->Series(np.random.randn(len(rng)), rng).append(ts2)
A:pandas.tests.series.test_combine_concat.s1->Series([np.NaN, '2011'])
A:pandas.tests.series.test_combine_concat.s2->Series([nan, 3.5, nan, 5.0])
A:pandas.tests.series.test_combine_concat.exp->pandas.Series([1, 2, 3, 4, 5, 6])
A:pandas.tests.series.test_combine_concat.values->pandas.util.testing.makeIntIndex(20).values.astype(float)
A:pandas.tests.series.test_combine_concat.series->Series(values, index=tm.makeIntIndex(20))
A:pandas.tests.series.test_combine_concat.combined->Series(tm.makeStringIndex(10), index=index[::2]).combine_first(floats)
A:pandas.tests.series.test_combine_concat.index->pandas.util.testing.makeStringIndex(20)
A:pandas.tests.series.test_combine_concat.floats->Series(tm.randn(20), index=index)
A:pandas.tests.series.test_combine_concat.strings->Series(tm.makeStringIndex(10), index=index[::2])
A:pandas.tests.series.test_combine_concat.s->Series([1.5, nan, 3.0, 4.0, nan])
A:pandas.tests.series.test_combine_concat.expected->get_result_type(dtype, dtype2)
A:pandas.tests.series.test_combine_concat.df->DataFrame(np.random.randn(len(rng), 4), index=rng)
A:pandas.tests.series.test_combine_concat.dtypes->map(np.dtype, ['float64', 'int8', 'uint8', 'bool', 'm8[ns]', 'M8[ns]'])
A:pandas.tests.series.test_combine_concat.typs->set([dtype.kind, dtype2.kind])
A:pandas.tests.series.test_combine_concat.s0->to_datetime(Series(['2010', np.NaN]))
A:pandas.tests.series.test_combine_concat.rs->to_datetime(Series(['2010', np.NaN])).combine_first(s1)
A:pandas.tests.series.test_combine_concat.xp->Series([datetime(2010, 1, 1), '2011'])
A:pandas.tests.series.test_combine_concat.rng->date_range('5/8/2012 1:45', periods=10, freq='5T', tz='dateutil/US/Eastern')
A:pandas.tests.series.test_combine_concat.ts->Series(np.random.randn(len(rng)), rng)
A:pandas.tests.series.test_combine_concat.result_df->DataFrame(np.random.randn(len(rng), 4), index=rng).append(df2)
A:pandas.tests.series.test_combine_concat.ex_index->DatetimeIndex(np.tile(rng.values, 3))
A:pandas.tests.series.test_combine_concat.appended->date_range('5/8/2012 1:45', periods=10, freq='5T', tz='dateutil/US/Eastern').append(rng2)
A:pandas.tests.series.test_combine_concat.rng1->date_range('5/8/2012 1:45', periods=10, freq='5T', tz='dateutil/US/Eastern').copy()
A:pandas.tests.series.test_combine_concat.rng2->date_range('5/8/2012 2:35', periods=10, freq='5T', tz='dateutil/US/Eastern')
A:pandas.tests.series.test_combine_concat.rng3->date_range('5/8/2012 1:45', periods=20, freq='5T', tz='dateutil/US/Eastern')
A:pandas.tests.series.test_combine_concat.ts2->Series(np.random.randn(len(rng2)), rng2)
A:pandas.tests.series.test_combine_concat.df2->DataFrame(np.random.randn(len(rng2), 4), index=rng2)
pandas.tests.series.test_combine_concat.TestSeriesCombine(TestData)
pandas.tests.series.test_combine_concat.TestSeriesCombine.test_append(self)
pandas.tests.series.test_combine_concat.TestSeriesCombine.test_append_duplicates(self)
pandas.tests.series.test_combine_concat.TestSeriesCombine.test_append_many(self)
pandas.tests.series.test_combine_concat.TestSeriesCombine.test_combine_first(self)
pandas.tests.series.test_combine_concat.TestSeriesCombine.test_combine_first_dt64(self)
pandas.tests.series.test_combine_concat.TestSeriesCombine.test_concat_empty_series_dtypes(self)
pandas.tests.series.test_combine_concat.TestSeriesCombine.test_concat_empty_series_dtypes_roundtrips(self)
pandas.tests.series.test_combine_concat.TestSeriesCombine.test_update(self)
pandas.tests.series.test_combine_concat.TestTimeseries(object)
pandas.tests.series.test_combine_concat.TestTimeseries.test_append_concat(self)
pandas.tests.series.test_combine_concat.TestTimeseries.test_append_concat_tz(self)
pandas.tests.series.test_combine_concat.TestTimeseries.test_append_concat_tz_dateutil(self)
pandas.tests.series.test_combine_concat.TestTimeseries.test_append_concat_tz_explicit_pytz(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_missing.py----------------------------------------
A:pandas.tests.series.test_missing.rng->date_range('1/1/2000', '3/1/2000', freq='B')
A:pandas.tests.series.test_missing.s->pandas.Series(np.arange(10) ** 2)
A:pandas.tests.series.test_missing.td->Series([timedelta(days=i) for i in range(10)])
A:pandas.tests.series.test_missing.result->pandas.Series([0, 12, 24, 36], index).reindex(new_index).interpolate(method='time')
A:pandas.tests.series.test_missing.expected->Series([1.0, 1.666667, 3.0], index=pd.to_timedelta([1, 2, 4]))
A:pandas.tests.series.test_missing.expected[2]->timedelta(days=1, seconds=9 * 3600 + 60 + 1)
A:pandas.tests.series.test_missing.null_loc->pandas.Series([False, True, False, True])
A:pandas.tests.series.test_missing.idx->pandas.MultiIndex.from_tuples([(0, 'a'), (1, 'b'), (2, 'c')])
A:pandas.tests.series.test_missing.df->Series([1, np.nan, 3], index=pd.to_timedelta([1, 2, 4]))
A:pandas.tests.series.test_missing.exp->pandas.Series([0, 12, 24, 36], index).reindex(new_index).interpolate(method='time')
A:pandas.tests.series.test_missing.data->pandas.Series([pd.NaT, pd.NaT, datetime(2016, 12, 12, 22, 24, 6, 100001, tzinfo=pytz.utc)])
A:pandas.tests.series.test_missing.filled->Series([np.nan, 1.0, np.nan, 3.0, np.nan], ['z', 'a', 'b', 'c', 'd'], dtype=float).fillna(method='bfill')
A:pandas.tests.series.test_missing.series->pandas.Series([datetime(2015, 1, 1, tzinfo=pytz.utc), 1])
A:pandas.tests.series.test_missing.filled2->Series([1, np.nan, 3], index=pd.to_timedelta([1, 2, 4])).fillna(value=series[1])
A:pandas.tests.series.test_missing.r->pandas.Series(np.arange(10) ** 2).isnull()
A:pandas.tests.series.test_missing.dr->pandas.Series(np.arange(10) ** 2).dropna()
A:pandas.tests.series.test_missing.e->Series([False, True, True, False])
A:pandas.tests.series.test_missing.de->Series(['a', 1.0], index=[0, 3])
A:pandas.tests.series.test_missing.ts->pandas.Series([0, 12, 24, 36], index)
A:pandas.tests.series.test_missing.s1->Series([0, 1, 2], list('abc'))
A:pandas.tests.series.test_missing.s2->pandas.Series(np.arange(10) ** 2).copy()
A:pandas.tests.series.test_missing.x->Series([np.nan, 1.0, np.nan, 3.0, np.nan], ['z', 'a', 'b', 'c', 'd'], dtype=float)
A:pandas.tests.series.test_missing.y->Series([np.nan, 1.0, np.nan, 3.0, np.nan], ['z', 'a', 'b', 'c', 'd'], dtype=float).copy()
A:pandas.tests.series.test_missing.td1->Series([timedelta(days=i) for i in range(10)]).copy()
A:pandas.tests.series.test_missing.ser->Series([10, 11, 12, 13])
A:pandas.tests.series.test_missing.res->pandas.Series(np.arange(10) ** 2).add(2, fill_value=0)
A:pandas.tests.series.test_missing.index->pandas.date_range('1/1/2012', periods=4, freq='12H')
A:pandas.tests.series.test_missing.ss->s[-2:].reindex(index).to_sparse()
A:pandas.tests.series.test_missing.ts_copy->pandas.Series([0, 12, 24, 36], index).copy()
A:pandas.tests.series.test_missing.linear_interp->pandas.Series([0, 12, 24, 36], index).copy().interpolate(method='linear')
A:pandas.tests.series.test_missing.ord_ts->Series([d.toordinal() for d in self.ts.index], index=self.ts.index).astype(float)
A:pandas.tests.series.test_missing.ord_ts_copy->Series([d.toordinal() for d in self.ts.index], index=self.ts.index).astype(float).copy()
A:pandas.tests.series.test_missing.time_interp->Series([d.toordinal() for d in self.ts.index], index=self.ts.index).astype(float).copy().interpolate(method='time')
A:pandas.tests.series.test_missing.non_ts->self.series.copy()
A:pandas.tests.series.test_missing.new_index->pandas.date_range('1/1/2012', periods=4, freq='12H').append(index + pd.DateOffset(hours=1)).sort_values()
A:pandas.tests.series.test_missing.interp_s->Series([10, 11, 12, 13]).reindex(new_index).interpolate(method='from_derivatives')
A:pandas.tests.series.test_missing.s[::3]->numpy.random.randn(10)
A:pandas.tests.series.test_missing.vals->pandas.Series(np.arange(10) ** 2).index.values.astype(float)
A:pandas.tests.series.test_missing.bad->isnull(expected.values)
A:pandas.tests.series.test_missing.other_result->pandas.Series(np.arange(10) ** 2).interpolate(method='values')
A:pandas.tests.series.test_missing.sq->Series([1, 4, np.nan, 16], index=[1, 2, 3, 4])
A:pandas.tests.series.test_missing.result3->pandas.Series(np.arange(10) ** 2).interpolate(method='spline', order=1, ext=3)
A:pandas.tests.series.test_missing.expected3->Series([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 6.0])
A:pandas.tests.series.test_missing.result1->pandas.Series(np.arange(10) ** 2).interpolate(method='spline', order=1)
A:pandas.tests.series.test_missing.expected1->pandas.Series(np.arange(10) ** 2).interpolate(method='spline', order=1)
pandas.tests.series.test_missing.TestSeriesInterpolateData(TestData)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_all_good(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_datetime64(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_limit(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_limit_bad_direction(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_limit_before_ends(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_limit_direction(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_limit_forward(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_limit_no_nans(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_limit_to_ends(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_multiIndex(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_nonmono_raise(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_quad(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_scipy_basic(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interp_timedelta64(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate_akima(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate_corners(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate_from_derivatives(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate_index_values(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate_non_ts(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate_pchip(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_interpolate_piecewise_polynomial(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_nan_interpolate(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_nan_irregular_index(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_nan_str_index(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_no_order(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_series_interpolate_intraday(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_series_interpolate_method_values(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_spline(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_spline_error(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_spline_extrapolate(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_spline_interpolation(self)
pandas.tests.series.test_missing.TestSeriesInterpolateData.test_spline_smooth(self)
pandas.tests.series.test_missing.TestSeriesMissingData(TestData)
pandas.tests.series.test_missing.TestSeriesMissingData.test_bfill(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_datetime64_fillna(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_datetime64_tz_dropna(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_datetime64_tz_fillna(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_datetime64tz_fillna_round_issue(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_dropna_empty(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_dropna_intervals(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_dropna_no_nan(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_dropna_preserve_name(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_ffill(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_ffill_mixed_dtypes_without_missing_data(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fill_value_when_combine_const(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fillna(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fillna_bug(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fillna_downcast(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fillna_inplace(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fillna_int(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fillna_invalid_method(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fillna_nat(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_fillna_raise(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_isnull(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_isnull_for_inf(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_notnull(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_pad_nan(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_pad_require_monotonicity(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_series_fillna_limit(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_series_pad_backfill_limit(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_sparse_series_fillna_limit(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_sparse_series_pad_backfill_limit(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_timedelta64_nan(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_timedelta_fillna(self)
pandas.tests.series.test_missing.TestSeriesMissingData.test_valid(self)
pandas.tests.series.test_missing._simple_ts(start,end,freq='D')
pandas.tests.series.test_missing._skip_if_no_akima()
pandas.tests.series.test_missing._skip_if_no_pchip()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/common.py----------------------------------------
A:pandas.tests.series.common._ts->pandas.util.testing.makeTimeSeries()
A:pandas.tests.series.common.ts->pandas.util.testing.makeTimeSeries().copy()
A:pandas.tests.series.common.series->pandas.util.testing.makeStringSeries()
A:pandas.tests.series.common.objSeries->pandas.util.testing.makeObjectSeries()
pandas.tests.series.common.TestData(object)
pandas.tests.series.common.TestData.empty(self)
pandas.tests.series.common.TestData.objSeries(self)
pandas.tests.series.common.TestData.series(self)
pandas.tests.series.common.TestData.ts(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_quantile.py----------------------------------------
A:pandas.tests.series.test_quantile.q->self.ts.quantile(0.1, interpolation='linear')
A:pandas.tests.series.test_quantile.dts->self.ts.index.to_series()
A:pandas.tests.series.test_quantile.tds->self.ts.index.to_series().diff()
A:pandas.tests.series.test_quantile.result->Series([], dtype='datetime64[ns]').quantile(0.5)
A:pandas.tests.series.test_quantile.expected->pandas.Series([], name=self.ts.name, index=Index([], dtype=float))
A:pandas.tests.series.test_quantile.q1->self.ts.quantile(0.1)
A:pandas.tests.series.test_quantile.s->Series([], dtype='datetime64[ns]')
A:pandas.tests.series.test_quantile.res->Series([], dtype='datetime64[ns]').quantile([0.5])
A:pandas.tests.series.test_quantile.exp->Series([pd.NaT], index=[0.5])
pandas.tests.series.test_quantile.TestSeriesQuantile(TestData)
pandas.tests.series.test_quantile.TestSeriesQuantile.test_datetime_timedelta_quantiles(self)
pandas.tests.series.test_quantile.TestSeriesQuantile.test_quantile(self)
pandas.tests.series.test_quantile.TestSeriesQuantile.test_quantile_box(self)
pandas.tests.series.test_quantile.TestSeriesQuantile.test_quantile_empty(self)
pandas.tests.series.test_quantile.TestSeriesQuantile.test_quantile_interpolation(self)
pandas.tests.series.test_quantile.TestSeriesQuantile.test_quantile_interpolation_dtype(self)
pandas.tests.series.test_quantile.TestSeriesQuantile.test_quantile_interpolation_np_lt_1p9(self)
pandas.tests.series.test_quantile.TestSeriesQuantile.test_quantile_multi(self)
pandas.tests.series.test_quantile.TestSeriesQuantile.test_quantile_nan(self)
pandas.tests.series.test_quantile.TestSeriesQuantile.test_quantile_nat(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_sorting.py----------------------------------------
A:pandas.tests.series.test_sorting.ts->self.ts.copy()
A:pandas.tests.series.test_sorting.ser->Series(['A', 'B'], [1, 2])
A:pandas.tests.series.test_sorting.expected->Series([3, 2, 1, np.nan], IntervalIndex.from_arrays([3, 2, 1, 0], [4, 3, 2, 1]))
A:pandas.tests.series.test_sorting.result->Series([np.nan, 1, 2, 3], IntervalIndex.from_arrays([0, 1, 2, 3], [1, 2, 3, 4])).sort_index(ascending=False)
A:pandas.tests.series.test_sorting.ordered->self.ts.copy().sort_values(ascending=[False], na_position='first')
A:pandas.tests.series.test_sorting.df->DataFrame(np.random.randn(10, 4))
A:pandas.tests.series.test_sorting.rindex->list(self.ts.index)
A:pandas.tests.series.test_sorting.random_order->self.ts.reindex(rindex)
A:pandas.tests.series.test_sorting.sorted_series->self.ts.reindex(rindex).sort_index(level=0, axis=0)
A:pandas.tests.series.test_sorting.mi->pandas.MultiIndex.from_tuples([[1, 1, 3], [1, 1, 1]], names=list('ABC'))
A:pandas.tests.series.test_sorting.s->Series([np.nan, 1, 2, 3], IntervalIndex.from_arrays([0, 1, 2, 3], [1, 2, 3, 4]))
A:pandas.tests.series.test_sorting.res->Series([np.nan, 1, 2, 3], IntervalIndex.from_arrays([0, 1, 2, 3], [1, 2, 3, 4])).sort_index(level='A', sort_remaining=False)
A:pandas.tests.series.test_sorting.series->Series(index=[3, 2, 1, 4, 3, np.nan])
A:pandas.tests.series.test_sorting.expected_series->Series(index=[1, 2, 3, 3, 4])
A:pandas.tests.series.test_sorting.index_sorted_series->Series(index=[3, 2, 1, 4, 3, np.nan]).sort_index(na_position='last')
A:pandas.tests.series.test_sorting.expected_series_first->Series(index=[np.nan, 1, 2, 3, 3, 4])
A:pandas.tests.series.test_sorting.expected_series_last->Series(index=[1, 2, 3, 3, 4, np.nan])
pandas.tests.series.test_sorting.TestSeriesSorting(TestData)
pandas.tests.series.test_sorting.TestSeriesSorting.test_sort_index(self)
pandas.tests.series.test_sorting.TestSeriesSorting.test_sort_index_inplace(self)
pandas.tests.series.test_sorting.TestSeriesSorting.test_sort_index_intervals(self)
pandas.tests.series.test_sorting.TestSeriesSorting.test_sort_index_kind(self)
pandas.tests.series.test_sorting.TestSeriesSorting.test_sort_index_multiindex(self)
pandas.tests.series.test_sorting.TestSeriesSorting.test_sort_index_na_position(self)
pandas.tests.series.test_sorting.TestSeriesSorting.test_sort_values(self)
pandas.tests.series.test_sorting.TestSeriesSorting.test_sortlevel_deprecated(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_internals.py----------------------------------------
A:pandas.tests.series.test_internals.s->Series([False, True, False, False], dtype=object)
A:pandas.tests.series.test_internals.result->Series([False, True, False, False], dtype=object)._convert(datetime=True, coerce=True)
A:pandas.tests.series.test_internals.r->Series([False, True, False, False], dtype=object)._convert(datetime=True, numeric=True)
A:pandas.tests.series.test_internals.expected->Series([lib.NaT])
A:pandas.tests.series.test_internals.s2->Series([datetime(2001, 1, 1, 0, 0), datetime(2001, 1, 2, 0, 0), datetime(2001, 1, 3, 0, 0), 'foo', 1.0, 1, Timestamp('20010104'), '20010105'], dtype='O')
A:pandas.tests.series.test_internals.e->Series([False, True, False, False], dtype=bool)
A:pandas.tests.series.test_internals.results->Series([False, True, False, False], dtype=object)._convert(True, True, False)
A:pandas.tests.series.test_internals.dt->datetime(2001, 1, 1, 0, 0)
pandas.tests.series.test_internals.TestSeriesInternals(object)
pandas.tests.series.test_internals.TestSeriesInternals.test_convert(self)
pandas.tests.series.test_internals.TestSeriesInternals.test_convert_no_arg_error(self)
pandas.tests.series.test_internals.TestSeriesInternals.test_convert_objects(self)
pandas.tests.series.test_internals.TestSeriesInternals.test_convert_objects_preserve_all_bool(self)
pandas.tests.series.test_internals.TestSeriesInternals.test_convert_objects_preserve_bool(self)
pandas.tests.series.test_internals.TestSeriesInternals.test_convert_preserve_all_bool(self)
pandas.tests.series.test_internals.TestSeriesInternals.test_convert_preserve_bool(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_indexing.py----------------------------------------
A:pandas.tests.series.test_indexing.s->Series([pd.NaT])
A:pandas.tests.series.test_indexing.result->DataFrame({'date': dates}).duplicated()
A:pandas.tests.series.test_indexing.df->pandas.DataFrame(np.arange(5.0, dtype='float64'), index=[datetime(2001, 1, i, 10, 0) for i in [1, 2, 2, 3, 4]])
A:pandas.tests.series.test_indexing.vc->pandas.DataFrame(np.arange(5.0, dtype='float64'), index=[datetime(2001, 1, i, 10, 0) for i in [1, 2, 2, 3, 4]]).b.value_counts()
A:pandas.tests.series.test_indexing.expected->Series(pd.NaT)
A:pandas.tests.series.test_indexing.idx->date_range(start='2013-05-31 00:00', end='2013-05-31 23:59', freq='S')
A:pandas.tests.series.test_indexing.s['a']->pandas.Timestamp('2016-01-01')
A:pandas.tests.series.test_indexing.omask->Series([False, True, True, False]).astype(object)
A:pandas.tests.series.test_indexing.s2->Series([pd.NaT]).set_value(dates[1], np.nan)
A:pandas.tests.series.test_indexing.cop->Series([pd.NaT]).copy()
A:pandas.tests.series.test_indexing.rng->date_range(datetime(2005, 1, 1), periods=20, freq='M')
A:pandas.tests.series.test_indexing.ts->Series(lrange(len(idx)), index=idx)
A:pandas.tests.series.test_indexing.date->tz('US/Central').localize(datetime(1990, 1, 1, 3))
A:pandas.tests.series.test_indexing.lb->datetime(1990, 1, 1, 4)
A:pandas.tests.series.test_indexing.rb->datetime(1990, 1, 1, 7)
A:pandas.tests.series.test_indexing.index->DatetimeIndex(dates)
A:pandas.tests.series.test_indexing.obj->Series(lrange(5), index=['c', 'a', 'a', 'b', 'b'])
A:pandas.tests.series.test_indexing.tmp->Series([pd.NaT]).copy()
A:pandas.tests.series.test_indexing.i->numpy.arange(10, 20, dtype=float)
A:pandas.tests.series.test_indexing.values->numpy.arange(10.0, 50.0, 2)
A:pandas.tests.series.test_indexing.series->Series(array)
A:pandas.tests.series.test_indexing.app->Series([1], index=['foobar'], name='series')
A:pandas.tests.series.test_indexing.key->pandas.Timestamp('2012-01-01')
A:pandas.tests.series.test_indexing.res->DatetimeIndex(start='1/1/2001', end='6/1/2001', freq='D').snap(freq='B')
A:pandas.tests.series.test_indexing.arr_inds->numpy.array([0, 4, 6])
A:pandas.tests.series.test_indexing.cp->Series(lrange(len(idx)), index=idx).copy()
A:pandas.tests.series.test_indexing.exp->Series([1.0, np.nan], index=index)
A:pandas.tests.series.test_indexing.arr_inds_notfound->numpy.array([0, 4, 5, 6])
A:pandas.tests.series.test_indexing.orig->pandas.Series(pd.date_range('2016-11-06', freq='H', periods=3, tz=tz))
A:pandas.tests.series.test_indexing.s[1]->pandas.Timestamp('2011-01-01', tz=tz)
A:pandas.tests.series.test_indexing.s.loc[1]->pandas.Timestamp('2011-01-01', tz=tz)
A:pandas.tests.series.test_indexing.s.iloc[1]->pandas.Timestamp('2011-01-01', tz=tz)
A:pandas.tests.series.test_indexing.vals->pandas.Series([pd.Timestamp('2011-01-01', tz=tz), pd.Timestamp('2012-01-01', tz=tz)], index=[1, 2])
A:pandas.tests.series.test_indexing.rs->Series([pd.NaT]).copy()
A:pandas.tests.series.test_indexing.cond->Series([True, False, False, True, False], index=s.index)
A:pandas.tests.series.test_indexing.s[mask]->lrange(2, 7)
A:pandas.tests.series.test_indexing.out->Series([pd.NaT]).where(Series(cond))
A:pandas.tests.series.test_indexing.s[0:3]->list(range(3))
A:pandas.tests.series.test_indexing.s[0:4:2]->list(range(2))
A:pandas.tests.series.test_indexing.s[:-1]->list(range(27))
A:pandas.tests.series.test_indexing.s[-3:-1]->list(range(2))
A:pandas.tests.series.test_indexing.s[[0, 1, 2]]->list(range(2))
A:pandas.tests.series.test_indexing.s[0]->list(range(10))
A:pandas.tests.series.test_indexing.data->numpy.arange(size, dtype=float)
A:pandas.tests.series.test_indexing.s1->pandas.Series(np.arange(12, dtype='int64'), index=midx)
A:pandas.tests.series.test_indexing.comb->pandas.concat([s1, s2])
A:pandas.tests.series.test_indexing.mask->Series([False, True, True, False])
A:pandas.tests.series.test_indexing.rs2->Series([pd.NaT]).set_value(dates[1], np.nan).mask(cond[:3], -s2)
A:pandas.tests.series.test_indexing.w->Series([pd.NaT]).where(s > 1, np.array(['X', 'Y', 'Z']))
A:pandas.tests.series.test_indexing.inds->list(self.series.index[[5, 8, 12]])
A:pandas.tests.series.test_indexing.ordered->self.series.sort_values()
A:pandas.tests.series.test_indexing.copy->self.series.copy()
A:pandas.tests.series.test_indexing.stamp->datetime(2012, 11, 22)
A:pandas.tests.series.test_indexing.s.loc['B']->timedelta(1)
A:pandas.tests.series.test_indexing.s.loc['A']->timedelta(1)
A:pandas.tests.series.test_indexing.s.loc[[1, 2, 3]]->numpy.timedelta64(20, 'm')
A:pandas.tests.series.test_indexing.expected.loc[[1, 2, 3]]->pandas.Timedelta(np.timedelta64(20, 'm'))
A:pandas.tests.series.test_indexing.(aa, ab)->self.ts.copy().align(b, join=how, method=method, limit=limit)
A:pandas.tests.series.test_indexing.join_index->self.ts.copy().index.join(b.index, how=how)
A:pandas.tests.series.test_indexing.diff_a->aa.index.difference(join_index)
A:pandas.tests.series.test_indexing.diff_b->ab.index.difference(join_index)
A:pandas.tests.series.test_indexing.ea->ea.fillna(method=method, limit=limit).fillna(method=method, limit=limit)
A:pandas.tests.series.test_indexing.eb->eb.fillna(method=method, limit=limit).fillna(method=method, limit=limit)
A:pandas.tests.series.test_indexing.b->self.ts[:5].copy()
A:pandas.tests.series.test_indexing.a->self.ts.copy()
A:pandas.tests.series.test_indexing.(ra, _)->self.ts.copy().align(b, join='left', copy=False)
A:pandas.tests.series.test_indexing.(_, rb)->self.ts.copy().align(b, join='right', copy=False)
A:pandas.tests.series.test_indexing.(a, b)->self.ts.align(self.ts, copy=True)
A:pandas.tests.series.test_indexing.midx->pandas.MultiIndex.from_product([range(2), range(3), range(2)], names=('a', 'b', 'c'))
A:pandas.tests.series.test_indexing.(res1l, res1r)->pandas.Series(np.arange(12, dtype='int64'), index=midx).align(s2, join='right')
A:pandas.tests.series.test_indexing.(res2l, res2r)->Series([pd.NaT]).set_value(dates[1], np.nan).align(s1, join='left')
A:pandas.tests.series.test_indexing.expr->pandas.Series([0, 0, 1, 1] * 2, index=exp_idx)
A:pandas.tests.series.test_indexing.exp_idx->pandas.MultiIndex.from_product([range(2), range(2), range(2)], names=('a', 'b', 'c'))
A:pandas.tests.series.test_indexing.expl->pandas.Series([0, 1, 2, 3, 6, 7, 8, 9], index=exp_idx)
A:pandas.tests.series.test_indexing.identity->self.series.reindex(self.series.index)
A:pandas.tests.series.test_indexing.subSeries->self.series.reindex(subIndex)
A:pandas.tests.series.test_indexing.subTS->self.ts.reindex(subIndex2)
A:pandas.tests.series.test_indexing.stuffSeries->self.ts.reindex(subIndex)
A:pandas.tests.series.test_indexing.subNonContig->self.ts.reindex(nonContigIndex)
A:pandas.tests.series.test_indexing.ts.index->Series(lrange(len(idx)), index=idx).index.astype('object')
A:pandas.tests.series.test_indexing.reindexed->Series([pd.NaT]).set_value(dates[1], np.nan).reindex(s.index, method='pad')
A:pandas.tests.series.test_indexing.reindexed2->Series([pd.NaT]).set_value(dates[1], np.nan).reindex(s.index, method='ffill')
A:pandas.tests.series.test_indexing.actual->Series([pd.NaT]).reindex(target, method='nearest', tolerance=0.2)
A:pandas.tests.series.test_indexing.int_ts->Series(np.zeros(len(ts), dtype=int), index=ts.index)
A:pandas.tests.series.test_indexing.reindexed_int->Series(np.zeros(len(ts), dtype=int), index=ts.index).reindex(int_ts.index[::2])
A:pandas.tests.series.test_indexing.bool_ts->Series(np.zeros(len(ts), dtype=bool), index=ts.index)
A:pandas.tests.series.test_indexing.reindexed_bool->Series(np.zeros(len(ts), dtype=bool), index=ts.index).reindex(bool_ts.index[::2])
A:pandas.tests.series.test_indexing.filled_bool->Series(np.zeros(len(ts), dtype=bool), index=ts.index).reindex(self.ts.index, method='pad')
A:pandas.tests.series.test_indexing.day1->datetime(2013, 3, 5)
A:pandas.tests.series.test_indexing.day2->datetime(2013, 5, 5)
A:pandas.tests.series.test_indexing.day3->datetime(2014, 3, 5)
A:pandas.tests.series.test_indexing.series1->Series([5, None, None], [day1, day2, day3])
A:pandas.tests.series.test_indexing.series2->Series([None, None], [day1, day3])
A:pandas.tests.series.test_indexing.floats->Series([1.0, 2.0, 3.0])
A:pandas.tests.series.test_indexing.ints->Series([1, 2, 3])
A:pandas.tests.series.test_indexing.objects->Series([1, 2, 3], dtype=object)
A:pandas.tests.series.test_indexing.bools->Series([True, False, True])
A:pandas.tests.series.test_indexing.n->len(self.ts)
A:pandas.tests.series.test_indexing.s[[True, False]]->Series([0], index=[1], dtype='int64')
A:pandas.tests.series.test_indexing.right->ts[mask].copy().map(str)
A:pandas.tests.series.test_indexing.array->numpy.zeros(5)
A:pandas.tests.series.test_indexing.self.dups->Series(np.random.randn(len(dates)), index=dates)
A:pandas.tests.series.test_indexing.uniques->Series(lrange(len(idx)), index=idx).index.unique()
A:pandas.tests.series.test_indexing.dups_local->self.dups.index.tz_localize('US/Eastern')
A:pandas.tests.series.test_indexing.d->datetime.datetime(2011, 12, 5, 20, 30)
A:pandas.tests.series.test_indexing.ix->DatetimeIndex([d, d])
A:pandas.tests.series.test_indexing.total->(ts.index == date).sum()
A:pandas.tests.series.test_indexing.sec->datetime.timedelta(seconds=1)
A:pandas.tests.series.test_indexing.half_sec->datetime.timedelta(microseconds=500000)
A:pandas.tests.series.test_indexing.duplicate_positions->numpy.random.randint(0, len(dates) - 1, 20)
A:pandas.tests.series.test_indexing.ts2->pandas.concat([ts[0:4], ts[-4:], ts[4:-4]])
A:pandas.tests.series.test_indexing.dti->DatetimeIndex(start='1/1/2001', end='6/1/2001', freq='D')
A:pandas.tests.series.test_indexing.self.series->Series(date_range('1/1/2000', periods=10))
A:pandas.tests.series.test_indexing.d1->DataFrame({'v': np.random.rand(len(dti))}, index=dti)
A:pandas.tests.series.test_indexing.d2->DataFrame({'v': np.random.rand(len(dti))}, index=dti).reset_index()
A:pandas.tests.series.test_indexing.d3->DataFrame({'v': np.random.rand(len(dti))}, index=dti).reset_index().set_index('index')
A:pandas.tests.series.test_indexing.dates->date_range('2010-07-01', end='2010-08-05')
A:pandas.tests.series.test_indexing.tst->DataFrame({'date': dates})
A:pandas.tests.series.test_indexing.round_method->getattr(s.dt, method)
pandas.tests.series.test_indexing.TestDatetimeIndexing(object)
pandas.tests.series.test_indexing.TestDatetimeIndexing.setup_method(self,method)
pandas.tests.series.test_indexing.TestDatetimeIndexing.test_dti_reset_index_round_trip(self)
pandas.tests.series.test_indexing.TestDatetimeIndexing.test_dti_snap(self)
pandas.tests.series.test_indexing.TestDatetimeIndexing.test_fancy_getitem(self)
pandas.tests.series.test_indexing.TestDatetimeIndexing.test_fancy_setitem(self)
pandas.tests.series.test_indexing.TestDatetimeIndexing.test_frame_datetime64_duplicated(self)
pandas.tests.series.test_indexing.TestDatetimeIndexing.test_series_set_value(self)
pandas.tests.series.test_indexing.TestDatetimeIndexing.test_slice_locs_indexerror(self)
pandas.tests.series.test_indexing.TestDatetimeIndexing.test_slicing_datetimes(self)
pandas.tests.series.test_indexing.TestNatIndexing(object)
pandas.tests.series.test_indexing.TestNatIndexing.setup_method(self,method)
pandas.tests.series.test_indexing.TestNatIndexing.test_nat_operations(self)
pandas.tests.series.test_indexing.TestNatIndexing.test_round_nat(self)
pandas.tests.series.test_indexing.TestNatIndexing.test_set_none_nan(self)
pandas.tests.series.test_indexing.TestSeriesIndexing(TestData)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_align(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_align_fill_method(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_align_multiindex(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_align_nocopy(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_align_same_index(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_basic_getitem_setitem_corner(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_basic_getitem_with_labels(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_basic_indexing(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_basic_setitem_with_labels(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_cast_on_putmask(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_datetime_indexing(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_delitem(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_drop(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_get(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_get_set_boolean_different_order(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_ambiguous_keyerror(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_boolean(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_boolean_empty(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_boolean_object(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_box_float64(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_callable(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_dataframe(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_dups(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_dups_with_missing(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_fancy(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_generator(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_get(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_int64(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_median_slice_bug(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_negative_out_of_bounds(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_out_of_bounds(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_regression(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_setitem_boolean_corner(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_setitem_datetime_tz_dateutil(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_setitem_datetime_tz_pytz(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_setitem_datetimeindex(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_setitem_ellipsis(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_setitem_integers(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_setitem_periodindex(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_setitem_slice_bug(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_setitem_slice_integers(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_getitem_unordered_dup(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_head_tail(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_iloc(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_iloc_nonunique(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_int_indexing(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_ix_setitem(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_ix_setitem_boolean(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_ix_setitem_corner(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_loc_getitem(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_loc_getitem_iterator(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_loc_getitem_not_monotonic(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_loc_getitem_setitem_integer_slice_keyerrors(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_mask(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_mask_broadcast(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_mask_inplace(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_multilevel_preserve_name(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_pop(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_preserveRefs(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_reindex(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_reindex_backfill(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_reindex_bool(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_reindex_bool_pad(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_reindex_corner(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_reindex_fill_value(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_reindex_int(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_reindex_like(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_reindex_nan(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_reindex_nearest(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_reindex_pad(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_reindex_series_add_nat(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_reindex_with_datetimes(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_select(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_set_value(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_setitem(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_setitem_ambiguous_keyerror(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_setitem_boolean(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_setitem_callable(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_setitem_dtypes(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_setitem_float_labels(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_setitem_na(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_setitem_other_callable(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_setitem_scalar_into_readonly_backing_data(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_setitem_slice_into_readonly_backing_data(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_setitem_with_tz(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_setitem_with_tz_dst(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_setslice(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_slice(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_slice_can_reorder_not_uniquely_indexed(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_slice_float64(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_slice_float_get_set(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_slice_floats2(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_timedelta_assignment(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_type_promote_putmask(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_type_promotion(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_underlying_data_conversion(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_where(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_where_array_like(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_where_broadcast(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_where_datetime(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_where_dups(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_where_inplace(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_where_invalid_input(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_where_ndframe_align(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_where_numeric_with_string(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_where_setitem_invalid(self)
pandas.tests.series.test_indexing.TestSeriesIndexing.test_where_timedelta(self)
pandas.tests.series.test_indexing.TestTimeSeriesDuplicates(object)
pandas.tests.series.test_indexing.TestTimeSeriesDuplicates.setup_method(self,method)
pandas.tests.series.test_indexing.TestTimeSeriesDuplicates.test_constructor(self)
pandas.tests.series.test_indexing.TestTimeSeriesDuplicates.test_duplicate_dates_indexing(self)
pandas.tests.series.test_indexing.TestTimeSeriesDuplicates.test_groupby_average_dup_values(self)
pandas.tests.series.test_indexing.TestTimeSeriesDuplicates.test_index_dupes_contains(self)
pandas.tests.series.test_indexing.TestTimeSeriesDuplicates.test_index_unique(self)
pandas.tests.series.test_indexing.TestTimeSeriesDuplicates.test_indexing(self)
pandas.tests.series.test_indexing.TestTimeSeriesDuplicates.test_indexing_over_size_cutoff(self)
pandas.tests.series.test_indexing.TestTimeSeriesDuplicates.test_indexing_unordered(self)
pandas.tests.series.test_indexing.TestTimeSeriesDuplicates.test_is_unique_monotonic(self)
pandas.tests.series.test_indexing.TestTimeSeriesDuplicates.test_range_slice(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_apply.py----------------------------------------
A:pandas.tests.series.test_apply.s->pandas.Series(values, name='XX')
A:pandas.tests.series.test_apply.rs->pandas.Series(values, name='XX').apply(lambda x: x)
A:pandas.tests.series.test_apply.result->pandas.Series(values, name='XX').map(f)
A:pandas.tests.series.test_apply.expected->Series([np.nan, np.nan, 'three'])
A:pandas.tests.series.test_apply.res->pandas.Series(values, name='XX').map(lambda x: '{0}_{1}'.format(x.__class__.__name__, x.freqstr))
A:pandas.tests.series.test_apply.exp->pandas.Series(['Asia/Tokyo'] * 25, name='XX')
A:pandas.tests.series.test_apply.values->pandas.date_range('2011-01-01', '2011-01-02', freq='H').tz_localize('Asia/Tokyo')
A:pandas.tests.series.test_apply.exp_values->pandas.date_range('2011-01-02', '2011-01-03', freq='H').tz_localize('Asia/Tokyo')
A:pandas.tests.series.test_apply.tsdf->pandas.DataFrame(np.random.randn(10, 3), columns=['A', 'B', 'C'], index=pd.date_range('1/1/2000', periods=10))
A:pandas.tests.series.test_apply.f_sqrt->numpy.sqrt(self.series)
A:pandas.tests.series.test_apply.f_abs->numpy.abs(self.series)
A:pandas.tests.series.test_apply.(index, data)->pandas.util.testing.getMixedTypeDict()
A:pandas.tests.series.test_apply.source->Series(data['B'], index=data['C'])
A:pandas.tests.series.test_apply.target->Series(data['C'][:4], index=data['D'][:4])
A:pandas.tests.series.test_apply.merged->Series({'a': 1.0, 'b': 2.0, 'c': 3.0, 'd': 4}).map(right)
A:pandas.tests.series.test_apply.a->Series(['a', 'b', 'c', 'd'])
A:pandas.tests.series.test_apply.b->Series(['B', 'C', 'D', 'E'], dtype='category', index=pd.CategoricalIndex(['b', 'c', 'd', 'e']))
A:pandas.tests.series.test_apply.c->Series(['B', 'C', 'D', 'E'], index=Index(['b', 'c', 'd', 'e']))
A:pandas.tests.series.test_apply.left->Series({'a': 1.0, 'b': 2.0, 'c': 3.0, 'd': 4})
A:pandas.tests.series.test_apply.right->Series({1: 11, 2: 22, 3: 33})
A:pandas.tests.series.test_apply.s2->pandas.Series(values, name='XX').map(lambda x: np.where(x == 0, 0, 1))
A:pandas.tests.series.test_apply.df->pandas.DataFrame({'a': [(1,), (2,), (3, 4), (5, 6)]})
A:pandas.tests.series.test_apply.df['labels']->df['a'].map(label_mappings)
A:pandas.tests.series.test_apply.df['expected_labels']->pandas.Series(['A', 'B', 'A', 'B'], index=df.index)
A:pandas.tests.series.test_apply.counter->Counter()
A:pandas.tests.series.test_apply.default_dict->defaultdict(lambda : 'blank')
A:pandas.tests.series.test_apply.dictionary->DictWithoutMissing({3: 'three'})
pandas.tests.series.test_apply.TestSeriesAggregate(TestData)
pandas.tests.series.test_apply.TestSeriesAggregate.test_agg_apply_evaluate_lambdas_the_same(self)
pandas.tests.series.test_apply.TestSeriesAggregate.test_demo(self)
pandas.tests.series.test_apply.TestSeriesAggregate.test_multiple_aggregators_with_dict_api(self)
pandas.tests.series.test_apply.TestSeriesAggregate.test_reduce(self)
pandas.tests.series.test_apply.TestSeriesAggregate.test_replicate_describe(self)
pandas.tests.series.test_apply.TestSeriesAggregate.test_transform(self)
pandas.tests.series.test_apply.TestSeriesAggregate.test_transform_and_agg_error(self)
pandas.tests.series.test_apply.TestSeriesAggregate.test_with_nested_series(self)
pandas.tests.series.test_apply.TestSeriesApply(TestData)
pandas.tests.series.test_apply.TestSeriesApply.test_apply(self)
pandas.tests.series.test_apply.TestSeriesApply.test_apply_args(self)
pandas.tests.series.test_apply.TestSeriesApply.test_apply_box(self)
pandas.tests.series.test_apply.TestSeriesApply.test_apply_datetimetz(self)
pandas.tests.series.test_apply.TestSeriesApply.test_apply_dict_depr(self)
pandas.tests.series.test_apply.TestSeriesApply.test_apply_dont_convert_dtype(self)
pandas.tests.series.test_apply.TestSeriesApply.test_apply_same_length_inference_bug(self)
pandas.tests.series.test_apply.TestSeriesApply.test_with_string_args(self)
pandas.tests.series.test_apply.TestSeriesMap(TestData)
pandas.tests.series.test_apply.TestSeriesMap.test_map(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_box(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_categorical(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_compat(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_counter(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_datetimetz(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_decimal(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_defaultdict(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_dict_subclass_with_missing(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_dict_subclass_without_missing(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_dict_with_tuple_keys(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_int(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_na_exclusion(self)
pandas.tests.series.test_apply.TestSeriesMap.test_map_type_inference(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_dtypes.py----------------------------------------
A:pandas.tests.series.test_dtypes.s->Series([1, 2, 3])
A:pandas.tests.series.test_dtypes.as_typed->Series([1, 2, 3]).astype(dtype)
A:pandas.tests.series.test_dtypes.arr->Series(['1', '2', '3', '4'], dtype=object)
A:pandas.tests.series.test_dtypes.result->DataFrame({'a': series, 'b': ['foo'] * len(series)}).values.squeeze()
A:pandas.tests.series.test_dtypes.expected->Series(date_range('1/1/2000', periods=10)).astype('object')
A:pandas.tests.series.test_dtypes.ts->Series([Timestamp('2010-01-04 00:00:00', tz='US/Eastern')])
A:pandas.tests.series.test_dtypes.td->Series([Timedelta(1, unit='d')])
A:pandas.tests.series.test_dtypes.former_encoding->sys.getdefaultencoding()
A:pandas.tests.series.test_dtypes.res->Series([1, 2, 3]).astype('unicode')
A:pandas.tests.series.test_dtypes.expec->Series([1, 2, 3]).map(compat.text_type)
A:pandas.tests.series.test_dtypes.init_empty->Series([], dtype=dtype)
A:pandas.tests.series.test_dtypes.as_type_empty->Series([]).astype(dtype)
A:pandas.tests.series.test_dtypes.a->numpy.arange(5, dtype=np.float64)
A:pandas.tests.series.test_dtypes.b->Series(a + 4j * a)
A:pandas.tests.series.test_dtypes.series->Series(date_range('1/1/2000', periods=10))
A:pandas.tests.series.test_dtypes.df->DataFrame({'a': series, 'b': ['foo'] * len(series)})
A:pandas.tests.series.test_dtypes.exp_dtypes->Series([np.dtype('datetime64[ns]'), np.dtype('float64')], index=['a', 'b'])
pandas.tests.series.test_dtypes.TestSeriesDtypes(TestData)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_arg_for_errors_in_astype(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype(self,dtype)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_cast_nan_inf_int(self,dtype,value)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_cast_object_int(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_cast_object_int_fail(self,dtype)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_datetimes(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_dict(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_empty_constructor_equality(self,dtype)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_generic_timestamp_deprecated(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_str_cast(self,dtype)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_str_map(self,dtype,series)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_astype_unicode(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_complex(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_dtype(self)
pandas.tests.series.test_dtypes.TestSeriesDtypes.test_intercept_astype_object(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_analytics.py----------------------------------------
A:pandas.tests.series.test_analytics.arr->numpy.random.randn(N)
A:pandas.tests.series.test_analytics.s->Series([1, 4, 3, 2], index=[0, 0, 1, 1])
A:pandas.tests.series.test_analytics.df->pandas.DataFrame({'datetime': pd.to_datetime(['2003', '2002', '2001', '2002', '2005']), 'datetimetz': pd.to_datetime(['2003', '2002', '2001', '2002', '2005']).tz_localize('US/Eastern'), 'timedelta': pd.to_timedelta(['3d', '2d', '1d', '2d', '5d'])})
A:pandas.tests.series.test_analytics.result->Series([1, 4, 3, 2], index=[0, 0, 1, 1]).nsmallest(n)
A:pandas.tests.series.test_analytics.v->pandas.Timestamp('20120102')
A:pandas.tests.series.test_analytics.s2->Series(date_range('20120102', periods=3))
A:pandas.tests.series.test_analytics.res->Series([1, 4, 3, 2], index=[0, 0, 1, 1]).sort_index(level=['A', 'B'], sort_remaining=False)
A:pandas.tests.series.test_analytics.int_ts->Series(np.ones(10, dtype=int), index=lrange(10))
A:pandas.tests.series.test_analytics.exp->pandas.Series(np.array([3.0, 2.0, 1]) / 6.0, index=exp_idx, name='xxx')
A:pandas.tests.series.test_analytics.c->pandas.Series([False] * len(b))
A:pandas.tests.series.test_analytics.expected->Series([1, 4, 3, 2], index=[0, 0, 1, 1]).sort_values().head(n)
A:pandas.tests.series.test_analytics.index->MultiIndex(levels=[['bar'], ['one', 'two', 'three'], [0, 1]], labels=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2], [0, 1, 0, 1, 0, 1]])
A:pandas.tests.series.test_analytics.argsorted->self.ts.argsort()
A:pandas.tests.series.test_analytics.shifted->pandas.Series([1.0, 1.1, 1.2, 1.3, 1.4], index=idx).shift(1)
A:pandas.tests.series.test_analytics.mindexer->Series([1, 4, 3, 2], index=[0, 0, 1, 1]).argsort(kind='mergesort')
A:pandas.tests.series.test_analytics.qindexer->Series([1, 4, 3, 2], index=[0, 0, 1, 1]).argsort()
A:pandas.tests.series.test_analytics.mexpected->numpy.argsort(s.values, kind='mergesort')
A:pandas.tests.series.test_analytics.qexpected->numpy.argsort(s.values, kind='quicksort')
A:pandas.tests.series.test_analytics.ts->pandas.Series([1.0, 1.1, 1.2, 1.3, 1.4], index=idx)
A:pandas.tests.series.test_analytics.r->Series([1, 4, 3, 2], index=[0, 0, 1, 1]).searchsorted([0, 3], sorter=np.argsort(s))
A:pandas.tests.series.test_analytics.f->getattr(Series, name)
A:pandas.tests.series.test_analytics.ds->Series(date_range('1/1/2001', periods=10))
A:pandas.tests.series.test_analytics.nona->self.series.dropna()
A:pandas.tests.series.test_analytics.func->getattr(np, name)
A:pandas.tests.series.test_analytics.out->numpy.round(s, decimals=0)
A:pandas.tests.series.test_analytics.expected_rounded0->Series([1.0, 2.0, 3.0], index=lrange(3))
A:pandas.tests.series.test_analytics.expected_rounded->Series([1.12, 2.12, 3.12], index=lrange(3))
A:pandas.tests.series.test_analytics.s1->Series(date_range('20120101', periods=3))
A:pandas.tests.series.test_analytics.p->p.astype('float64').astype('float64')
A:pandas.tests.series.test_analytics.ts1->self.ts[:15].reindex(self.ts.index)
A:pandas.tests.series.test_analytics.ts2->self.ts[5:].reindex(self.ts.index)
A:pandas.tests.series.test_analytics.cp->self.ts[:10].copy()
A:pandas.tests.series.test_analytics.A->Series([-0.89926396, 0.94209606, -1.03289164, -0.95445587, 0.7691031, -0.06430576, -2.09704447, 0.40660407, -0.89926396, 0.94209606])
A:pandas.tests.series.test_analytics.B->Series([-1.01270225, -0.62210117, -1.56895827, 0.59592943, -0.01680292, 1.17258718, -1.06009347, -0.1022206, -0.89076239, 0.89372375])
A:pandas.tests.series.test_analytics.(expected, _)->scipy.stats.pearsonr(A, B)
A:pandas.tests.series.test_analytics.mi->pandas.core.index.MultiIndex.from_tuples([[1, 1, 3], [1, 1, 1]], names=list('ABC'))
A:pandas.tests.series.test_analytics.left->pandas.Series([1.0, 1.1, 1.2, 1.3, 1.4], index=idx).unstack()
A:pandas.tests.series.test_analytics.right->DataFrame([[1.0, 1.3], [1.1, nan], [nan, 1.4], [1.2, nan]], columns=['cat', 'dog'])
A:pandas.tests.series.test_analytics.a->Series([1, 2, 3, 4])
A:pandas.tests.series.test_analytics.b2->b.reindex(index=reversed(b.index))
A:pandas.tests.series.test_analytics.series->Series(np.random.randn(500))
A:pandas.tests.series.test_analytics.sc->Series([1, 4, 3, 2], index=[0, 0, 1, 1]).copy()
A:pandas.tests.series.test_analytics.val->self.ts.median()
A:pandas.tests.series.test_analytics.l->Series([1, 4, 3, 2], index=[0, 0, 1, 1]).clip_lower(thresh)
A:pandas.tests.series.test_analytics.u->Series([1, 4, 3, 2], index=[0, 0, 1, 1]).clip_upper(thresh)
A:pandas.tests.series.test_analytics.threshold->Series([1.0, 2.0, 3.0])
A:pandas.tests.series.test_analytics.lower->Series([1.0, 2.0, 3.0])
A:pandas.tests.series.test_analytics.upper->Series([1.5, 2.5, 3.5])
A:pandas.tests.series.test_analytics.t->Timestamp('2015-12-01 09:30:30', tz='US/Eastern')
A:pandas.tests.series.test_analytics.args->product((a, b, c, d), methods)
A:pandas.tests.series.test_analytics.e->numpy.array([0, 2], dtype=np.intp)
A:pandas.tests.series.test_analytics.cse->pandas.Series([0, 1, nan, 1], dtype=object)
A:pandas.tests.series.test_analytics.cpe->pandas.Series([False, 0, nan, 0])
A:pandas.tests.series.test_analytics.cmin->pandas.Series([False, False, nan, False])
A:pandas.tests.series.test_analytics.cmax->pandas.Series([False, True, nan, True])
A:pandas.tests.series.test_analytics.expected2->Series([False, True, False, False, False])
A:pandas.tests.series.test_analytics.data->numpy.random.randint(0, 11, size=10)
A:pandas.tests.series.test_analytics.ser->Series(arr)
A:pandas.tests.series.test_analytics.reps->Series([1, 4, 3, 2], index=[0, 0, 1, 1]).repeat(to_rep)
A:pandas.tests.series.test_analytics.idx->pandas.CategoricalIndex(values, name='xxx')
A:pandas.tests.series.test_analytics.values->pandas.Categorical([1, 2, 3, 1, 1, 3], ordered=False)
A:pandas.tests.series.test_analytics.sp1->Series([1, 4, 3, 2], index=[0, 0, 1, 1]).shift(1)
A:pandas.tests.series.test_analytics.sn2->Series([1, 4, 3, 2], index=[0, 0, 1, 1]).shift(-2)
A:pandas.tests.series.test_analytics.x->Series(np.random.random(201), name='x')
A:pandas.tests.series.test_analytics.result2->numpy.reshape(x, (-1, 1))
A:pandas.tests.series.test_analytics.unstacked->Series([1, 4, 3, 2], index=[0, 0, 1, 1]).unstack(0).sort_index()
A:pandas.tests.series.test_analytics.exp_index->MultiIndex(levels=[['one', 'two', 'three'], [0, 1]], labels=[[0, 1, 2, 0, 1, 2], [0, 1, 0, 1, 0, 1]])
A:pandas.tests.series.test_analytics.right.index->pandas.MultiIndex.from_tuples(tpls)
A:pandas.tests.series.test_analytics.exp_idx->pandas.CategoricalIndex([1, 3, 2], categories=[1, 2, 3], ordered=False)
A:pandas.tests.series.test_analytics.df[dtype]->Series([3, 2, 1, 2, 5], dtype=dtype)
A:pandas.tests.series.test_analytics.msg->"Cannot use method 'n(larg|small)est' with dtype {dt}".format(dt=dt)
A:pandas.tests.series.test_analytics.expected_first->Series([1] * 3, index=[1, 2, 3])
A:pandas.tests.series.test_analytics.expected_last->Series([1] * 3, index=[5, 4, 3])
pandas.tests.series.test_analytics.TestNLargestNSmallest(object)
pandas.tests.series.test_analytics.TestNLargestNSmallest.test_error(self,r)
pandas.tests.series.test_analytics.TestNLargestNSmallest.test_misc(self)
pandas.tests.series.test_analytics.TestNLargestNSmallest.test_n(self,n)
pandas.tests.series.test_analytics.TestNLargestNSmallest.test_nsmallest_nlargest(self,s)
pandas.tests.series.test_analytics.TestSeriesAnalytics(TestData)
pandas.tests.series.test_analytics.TestSeriesAnalytics._check_accum_op(self,name,check_dtype=True)
pandas.tests.series.test_analytics.TestSeriesAnalytics._check_stat_op(self,name,alternate,check_objects=False,check_allna=False)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_all_any(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_all_any_params(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_apply_categorical(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_argsort(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_argsort_stable(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_built_in_round(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_clip(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_clip_against_series(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_clip_types_and_nulls(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_clip_with_datetimes(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_compress(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_corr(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_corr_rank(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_count(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_cov(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_cummax(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_cummax_datetime64(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_cummax_timedelta64(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_cummethods_bool(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_cummin(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_cummin_datetime64(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_cummin_timedelta64(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_cumprod(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_cumsum(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_describe(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_dot(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_drop_duplicates(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_empty_timeseries_redections_return_nat(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_idxmax(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_idxmin(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_is_monotonic(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_is_unique(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_isin(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_isin_with_i8(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_isin_with_string_scalar(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_kurt(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_max(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_mean(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_median(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_min(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_mode(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_modulo(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_nansum_buglet(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_npdiff(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_numpy_argmax(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_numpy_argmin(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_numpy_compress(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_numpy_repeat(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_numpy_reshape(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_numpy_round(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_ops_consistency_on_empty(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_overflow(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_overflow_with_bottleneck(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_prod(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_prod_numpy16_bug(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_ptp(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_repeat(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_reshape_2d_return_array(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_reshape_bad_kwarg(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_reshape_deprecate(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_reshape_non_2d(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_round(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_search_sorted_datetime64_list(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_search_sorted_datetime64_scalar(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_searchsorted(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_searchsorted_numeric_dtypes_scalar(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_searchsorted_numeric_dtypes_vector(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_searchsorted_sorter(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_sem(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_shift_categorical(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_shift_int(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_skew(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_sort_index_level(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_sum(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_sum_inf(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_sum_zero(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_timedelta64_analytics(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_unique(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_unique_data_ownership(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_unstack(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_value_counts_categorical_not_ordered(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_value_counts_categorical_ordered(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_value_counts_datetime(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_value_counts_datetime_tz(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_value_counts_nunique(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_value_counts_period(self)
pandas.tests.series.test_analytics.TestSeriesAnalytics.test_var_std(self)
pandas.tests.series.test_analytics.s_main_dtypes()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_api.py----------------------------------------
A:pandas.tests.series.test_api.result->numpy.compress(s < -1, s)
A:pandas.tests.series.test_api.cp->self.ts.copy()
A:pandas.tests.series.test_api.s->Series(range(5))
A:pandas.tests.series.test_api.unp_series->self._pickle_roundtrip(self.series)
A:pandas.tests.series.test_api.unp_ts->self._pickle_roundtrip(self.ts)
A:pandas.tests.series.test_api.unpickled->pandas.read_pickle(path)
A:pandas.tests.series.test_api.s_empty->pandas.Series()
A:pandas.tests.series.test_api.s2->Series(range(5)).copy(deep=deep)
A:pandas.tests.series.test_api.expected->Series([getattr(str, method)(x) for x in s.values])
A:pandas.tests.series.test_api.expected2->Series([Timestamp('1999/01/01', tz='UTC')])
A:pandas.tests.series.test_api.s2[0]->pandas.Timestamp('1999/01/01', tz='UTC')
A:pandas.tests.series.test_api.tsdf->DataFrame(np.random.randn(1000, 3), columns=['A', 'B', 'C'], index=date_range('1/1/2000', periods=1000))
A:pandas.tests.series.test_api.exp->Series([], dtype='float64', index=Index([], dtype='float64'))
pandas.tests.series.test_api.SharedWithSparse(object)
pandas.tests.series.test_api.SharedWithSparse._pickle_roundtrip(self,obj)
pandas.tests.series.test_api.SharedWithSparse.test_append_preserve_name(self)
pandas.tests.series.test_api.SharedWithSparse.test_argsort_preserve_name(self)
pandas.tests.series.test_api.SharedWithSparse.test_binop_maybe_preserve_name(self)
pandas.tests.series.test_api.SharedWithSparse.test_combine_first_name(self)
pandas.tests.series.test_api.SharedWithSparse.test_copy_index_name_checking(self)
pandas.tests.series.test_api.SharedWithSparse.test_copy_name(self)
pandas.tests.series.test_api.SharedWithSparse.test_getitem_preserve_name(self)
pandas.tests.series.test_api.SharedWithSparse.test_pickle(self)
pandas.tests.series.test_api.SharedWithSparse.test_scalarop_preserve_name(self)
pandas.tests.series.test_api.SharedWithSparse.test_sort_index_name(self)
pandas.tests.series.test_api.SharedWithSparse.test_to_sparse_pass_name(self)
pandas.tests.series.test_api.TestSeriesMisc(TestData,SharedWithSparse)
pandas.tests.series.test_api.TestSeriesMisc.test_axis_alias(self)
pandas.tests.series.test_api.TestSeriesMisc.test_contains(self)
pandas.tests.series.test_api.TestSeriesMisc.test_copy(self)
pandas.tests.series.test_api.TestSeriesMisc.test_empty_method(self)
pandas.tests.series.test_api.TestSeriesMisc.test_iter(self)
pandas.tests.series.test_api.TestSeriesMisc.test_iter_box(self)
pandas.tests.series.test_api.TestSeriesMisc.test_iteritems(self)
pandas.tests.series.test_api.TestSeriesMisc.test_keys(self)
pandas.tests.series.test_api.TestSeriesMisc.test_ndarray_compat(self)
pandas.tests.series.test_api.TestSeriesMisc.test_not_hashable(self)
pandas.tests.series.test_api.TestSeriesMisc.test_numpy_unique(self)
pandas.tests.series.test_api.TestSeriesMisc.test_raise_on_info(self)
pandas.tests.series.test_api.TestSeriesMisc.test_str_attribute(self)
pandas.tests.series.test_api.TestSeriesMisc.test_tab_completion(self)
pandas.tests.series.test_api.TestSeriesMisc.test_values(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_alter_axes.py----------------------------------------
A:pandas.tests.series.test_alter_axes.series->self.series.copy()
A:pandas.tests.series.test_alter_axes.series.index->numpy.arange(len(series))
A:pandas.tests.series.test_alter_axes.renamed->Series({1: 10, 2: 20}).rename({})
A:pandas.tests.series.test_alter_axes.rename_dict->dict(zip(self.ts.index, renamed.index))
A:pandas.tests.series.test_alter_axes.renamed2->self.ts.rename(rename_dict)
A:pandas.tests.series.test_alter_axes.s->Series(np.arange(6), index=index)
A:pandas.tests.series.test_alter_axes.renamer->Series({1: 10, 2: 20})
A:pandas.tests.series.test_alter_axes.result->Series(np.arange(6), index=index).reorder_levels(['L0', 'L0', 'L0'])
A:pandas.tests.series.test_alter_axes.expected->Series(range(6), index=e_idx)
A:pandas.tests.series.test_alter_axes.exp->numpy.array(['a', 'b', 'c'], dtype=np.object_)
A:pandas.tests.series.test_alter_axes.s2->Series(np.arange(6), index=index)._set_name('foo')
A:pandas.tests.series.test_alter_axes.idx->pandas.util.testing.makeDateIndex(10)
A:pandas.tests.series.test_alter_axes.ser->ser.reset_index(name='value2').stack()
A:pandas.tests.series.test_alter_axes.df->ser.reset_index(name='value2').stack().reset_index(name='value2')
A:pandas.tests.series.test_alter_axes.index->MultiIndex(levels=[['bar'], ['one', 'two', 'three'], [0, 1]], labels=[[0, 0, 0, 0, 0, 0], [0, 1, 2, 0, 1, 2], [0, 1, 0, 1, 0, 1]], names=['L0', 'L1', 'L2'])
A:pandas.tests.series.test_alter_axes.rs->Series(np.arange(6), index=index).reset_index(level=[0, 2], drop=True)
A:pandas.tests.series.test_alter_axes.series_result->Series(np.arange(6), index=index).reset_index()
A:pandas.tests.series.test_alter_axes.series_expected->pandas.DataFrame([[0, 0], [1, 1]], columns=['index', 'A'], index=RangeIndex(stop=2))
A:pandas.tests.series.test_alter_axes.e_idx->MultiIndex(levels=[['bar'], ['bar'], ['bar']], labels=[[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]], names=['L0', 'L0', 'L0'])
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes(TestData)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_by_series(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_inplace(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_set_name(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_rename_set_name_inplace(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_reorder_levels(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_reset_index(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_reset_index_range(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_set_index_makes_timeseries(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_set_name(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_set_name_attribute(self)
pandas.tests.series.test_alter_axes.TestSeriesAlterAxes.test_setindex(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_asof.py----------------------------------------
A:pandas.tests.series.test_asof.rng->date_range('1/1/1990', periods=N, freq='53s')
A:pandas.tests.series.test_asof.ts->Series(np.random.randn(N), index=rng)
A:pandas.tests.series.test_asof.dates->date_range('1/1/1990', periods=N * 3, freq='25s')
A:pandas.tests.series.test_asof.result->Series(np.nan, index=[1, 2, 3, 4], name='test').asof([4, 5])
A:pandas.tests.series.test_asof.val1->Series(np.random.randn(N), index=rng).asof(str(ts.index[7]))
A:pandas.tests.series.test_asof.val2->Series(np.random.randn(N), index=rng).asof(ts.index[19])
A:pandas.tests.series.test_asof.s->Series(np.random.randn(N), index=rng)
A:pandas.tests.series.test_asof.r->Series(np.random.randn(N), index=rng).resample('2h').mean()
A:pandas.tests.series.test_asof.expected->Series(np.nan, index=[4, 5], name='test')
A:pandas.tests.series.test_asof.pix->PeriodIndex(result.index.values, freq='H')
pandas.tests.series.test_asof.TestSeriesAsof(TestData)
pandas.tests.series.test_asof.TestSeriesAsof.test_all_nans(self)
pandas.tests.series.test_asof.TestSeriesAsof.test_basic(self)
pandas.tests.series.test_asof.TestSeriesAsof.test_errors(self)
pandas.tests.series.test_asof.TestSeriesAsof.test_periodindex(self)
pandas.tests.series.test_asof.TestSeriesAsof.test_scalar(self)
pandas.tests.series.test_asof.TestSeriesAsof.test_with_nan(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_repr.py----------------------------------------
A:pandas.tests.series.test_repr.index->Index([datetime(2000, 1, 1) + timedelta(i) for i in range(1000)], dtype=object)
A:pandas.tests.series.test_repr.s->Series([1, 2, 3], name=np.int64(3))
A:pandas.tests.series.test_repr.expected->'\n'.join(expected)
A:pandas.tests.series.test_repr.ots->self.ts.astype('O')
A:pandas.tests.series.test_repr.biggie->Series(tm.randn(1000), index=np.arange(1000), name=('foo', 'bar', 'baz'))
A:pandas.tests.series.test_repr.ser->Series(['a\n\r\tb'], name='a\n\r\td', index=['a\n\r\tf'])
A:pandas.tests.series.test_repr.rep_str->repr(ser)
A:pandas.tests.series.test_repr.a->Series([u('א')] * 1000)
A:pandas.tests.series.test_repr.output->sys.stderr.getvalue()
A:pandas.tests.series.test_repr.df->Series([u('א')], name=u('ב'))
A:pandas.tests.series.test_repr.ts->pandas.util.testing.makeTimeSeries(1000)
pandas.tests.series.test_repr.TestSeriesRepr(TestData)
pandas.tests.series.test_repr.TestSeriesRepr.test_bytestring_with_unicode(self)
pandas.tests.series.test_repr.TestSeriesRepr.test_multilevel_name_print(self)
pandas.tests.series.test_repr.TestSeriesRepr.test_name_printing(self)
pandas.tests.series.test_repr.TestSeriesRepr.test_repr(self)
pandas.tests.series.test_repr.TestSeriesRepr.test_repr_bool_fails(self)
pandas.tests.series.test_repr.TestSeriesRepr.test_repr_max_rows(self)
pandas.tests.series.test_repr.TestSeriesRepr.test_repr_name_iterable_indexable(self)
pandas.tests.series.test_repr.TestSeriesRepr.test_repr_should_return_str(self)
pandas.tests.series.test_repr.TestSeriesRepr.test_tidy_repr(self)
pandas.tests.series.test_repr.TestSeriesRepr.test_timeseries_repr_object_dtype(self)
pandas.tests.series.test_repr.TestSeriesRepr.test_unicode_string_with_unicode(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/series/test_replace.py----------------------------------------
A:pandas.tests.series.test_replace.ser->pandas.Series(np.fabs(np.random.randn(N)), tm.makeDateIndex(N), dtype=object)
A:pandas.tests.series.test_replace.exp->pandas.Series(np.fabs(np.random.randn(N)), tm.makeDateIndex(N), dtype=object).fillna(-1)
A:pandas.tests.series.test_replace.rs->pandas.Series(np.fabs(np.random.randn(N)), tm.makeDateIndex(N), dtype=object).replace({np.nan: -1, 'foo': -2, 'bar': -3})
A:pandas.tests.series.test_replace.rs2->pandas.Series(np.fabs(np.random.randn(N)), tm.makeDateIndex(N), dtype=object).replace([np.nan, 'foo', 'bar'], [-1, -2, -3])
A:pandas.tests.series.test_replace.filled->pandas.Series(np.fabs(np.random.randn(N)), tm.makeDateIndex(N), dtype=object).copy()
A:pandas.tests.series.test_replace.result->pandas.Series([1, 2, 3, '4', 4, 5]).replace([2, '4'], np.nan)
A:pandas.tests.series.test_replace.expected->pandas.Series([1, np.nan, 3, np.nan, 4, 5])
A:pandas.tests.series.test_replace.expected.loc[2]->pandas.Timestamp('20120101')
A:pandas.tests.series.test_replace.s->pandas.Series([1, 2, 3, '4', 4, 5])
A:pandas.tests.series.test_replace.sc->pandas.Series([1, 2, 3, '4', 4, 5]).copy()
A:pandas.tests.series.test_replace.r->pandas.Series([1, 2, 3, '4', 4, 5]).replace(to_rep, val)
A:pandas.tests.series.test_replace.e->pandas.Series([0, 1, 2, 3.5, True], dtype='object')
A:pandas.tests.series.test_replace.dr->pandas.date_range('1/1/2001', '1/10/2001', freq='D').to_series().reset_index(drop=True)
pandas.tests.series.test_replace.TestSeriesReplace(TestData)
pandas.tests.series.test_replace.TestSeriesReplace.test_replace(self)
pandas.tests.series.test_replace.TestSeriesReplace.test_replace2(self)
pandas.tests.series.test_replace.TestSeriesReplace.test_replace_bool_with_bool(self)
pandas.tests.series.test_replace.TestSeriesReplace.test_replace_bool_with_string(self)
pandas.tests.series.test_replace.TestSeriesReplace.test_replace_bool_with_string_no_op(self)
pandas.tests.series.test_replace.TestSeriesReplace.test_replace_gh5319(self)
pandas.tests.series.test_replace.TestSeriesReplace.test_replace_mixed_types(self)
pandas.tests.series.test_replace.TestSeriesReplace.test_replace_mixed_types_with_string(self)
pandas.tests.series.test_replace.TestSeriesReplace.test_replace_string_with_number(self)
pandas.tests.series.test_replace.TestSeriesReplace.test_replace_unicode_with_number(self)
pandas.tests.series.test_replace.TestSeriesReplace.test_replace_with_dict_with_bool_keys(self)
pandas.tests.series.test_replace.TestSeriesReplace.test_replace_with_empty_dictlike(self)
pandas.tests.series.test_replace.TestSeriesReplace.test_replace_with_single_list(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/scalar/test_period_asfreq.py----------------------------------------
A:pandas.tests.scalar.test_period_asfreq.val->Period(freq='A', year=2007)
A:pandas.tests.scalar.test_period_asfreq.result1->Period(freq='1D1H', year=2007).asfreq('H', how='S')
A:pandas.tests.scalar.test_period_asfreq.result2->Period(freq='1H1D', year=2007).asfreq('H', how='S')
A:pandas.tests.scalar.test_period_asfreq.expected->Period('2007-01-01', freq='H')
A:pandas.tests.scalar.test_period_asfreq.ival_A->Period(freq='A', year=2007)
A:pandas.tests.scalar.test_period_asfreq.ival_AJAN->Period(freq='A-JAN', year=2007)
A:pandas.tests.scalar.test_period_asfreq.ival_AJUN->Period(freq='A-JUN', year=2007)
A:pandas.tests.scalar.test_period_asfreq.ival_ANOV->Period(freq='A-NOV', year=2007)
A:pandas.tests.scalar.test_period_asfreq.ival_A_to_Q_start->Period(freq='Q', year=2007, quarter=1)
A:pandas.tests.scalar.test_period_asfreq.ival_A_to_Q_end->Period(freq='Q', year=2007, quarter=4)
A:pandas.tests.scalar.test_period_asfreq.ival_A_to_M_start->Period(freq='M', year=2007, month=1)
A:pandas.tests.scalar.test_period_asfreq.ival_A_to_M_end->Period(freq='M', year=2007, month=12)
A:pandas.tests.scalar.test_period_asfreq.ival_A_to_W_start->Period(freq='W', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_A_to_W_end->Period(freq='W', year=2007, month=12, day=31)
A:pandas.tests.scalar.test_period_asfreq.ival_A_to_B_start->Period(freq='B', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_A_to_B_end->Period(freq='B', year=2007, month=12, day=31)
A:pandas.tests.scalar.test_period_asfreq.ival_A_to_D_start->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_A_to_D_end->Period(freq='D', year=2007, month=12, day=31)
A:pandas.tests.scalar.test_period_asfreq.ival_A_to_H_start->Period(freq='H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.test_period_asfreq.ival_A_to_H_end->Period(freq='H', year=2007, month=12, day=31, hour=23)
A:pandas.tests.scalar.test_period_asfreq.ival_A_to_T_start->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0)
A:pandas.tests.scalar.test_period_asfreq.ival_A_to_T_end->Period(freq='Min', year=2007, month=12, day=31, hour=23, minute=59)
A:pandas.tests.scalar.test_period_asfreq.ival_A_to_S_start->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=0)
A:pandas.tests.scalar.test_period_asfreq.ival_A_to_S_end->Period(freq='S', year=2007, month=12, day=31, hour=23, minute=59, second=59)
A:pandas.tests.scalar.test_period_asfreq.ival_AJAN_to_D_end->Period(freq='D', year=2007, month=1, day=31)
A:pandas.tests.scalar.test_period_asfreq.ival_AJAN_to_D_start->Period(freq='D', year=2006, month=2, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_AJUN_to_D_end->Period(freq='D', year=2007, month=6, day=30)
A:pandas.tests.scalar.test_period_asfreq.ival_AJUN_to_D_start->Period(freq='D', year=2006, month=7, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_ANOV_to_D_end->Period(freq='D', year=2007, month=11, day=30)
A:pandas.tests.scalar.test_period_asfreq.ival_ANOV_to_D_start->Period(freq='D', year=2006, month=12, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_Q->Period(freq='Q', year=2007, quarter=1)
A:pandas.tests.scalar.test_period_asfreq.ival_Q_end_of_year->Period(freq='Q', year=2007, quarter=4)
A:pandas.tests.scalar.test_period_asfreq.ival_QEJAN->Period(freq='Q-JAN', year=2007, quarter=1)
A:pandas.tests.scalar.test_period_asfreq.ival_QEJUN->Period(freq='Q-JUN', year=2007, quarter=1)
A:pandas.tests.scalar.test_period_asfreq.ival_Q_to_A->Period(freq='A', year=2007)
A:pandas.tests.scalar.test_period_asfreq.ival_Q_to_M_start->Period(freq='M', year=2007, month=1)
A:pandas.tests.scalar.test_period_asfreq.ival_Q_to_M_end->Period(freq='M', year=2007, month=3)
A:pandas.tests.scalar.test_period_asfreq.ival_Q_to_W_start->Period(freq='W', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_Q_to_W_end->Period(freq='W', year=2007, month=3, day=31)
A:pandas.tests.scalar.test_period_asfreq.ival_Q_to_B_start->Period(freq='B', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_Q_to_B_end->Period(freq='B', year=2007, month=3, day=30)
A:pandas.tests.scalar.test_period_asfreq.ival_Q_to_D_start->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_Q_to_D_end->Period(freq='D', year=2007, month=3, day=31)
A:pandas.tests.scalar.test_period_asfreq.ival_Q_to_H_start->Period(freq='H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.test_period_asfreq.ival_Q_to_H_end->Period(freq='H', year=2007, month=3, day=31, hour=23)
A:pandas.tests.scalar.test_period_asfreq.ival_Q_to_T_start->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0)
A:pandas.tests.scalar.test_period_asfreq.ival_Q_to_T_end->Period(freq='Min', year=2007, month=3, day=31, hour=23, minute=59)
A:pandas.tests.scalar.test_period_asfreq.ival_Q_to_S_start->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=0)
A:pandas.tests.scalar.test_period_asfreq.ival_Q_to_S_end->Period(freq='S', year=2007, month=3, day=31, hour=23, minute=59, second=59)
A:pandas.tests.scalar.test_period_asfreq.ival_QEJAN_to_D_start->Period(freq='D', year=2006, month=2, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_QEJAN_to_D_end->Period(freq='D', year=2006, month=4, day=30)
A:pandas.tests.scalar.test_period_asfreq.ival_QEJUN_to_D_start->Period(freq='D', year=2006, month=7, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_QEJUN_to_D_end->Period(freq='D', year=2006, month=9, day=30)
A:pandas.tests.scalar.test_period_asfreq.ival_M->Period(freq='M', year=2007, month=1)
A:pandas.tests.scalar.test_period_asfreq.ival_M_end_of_year->Period(freq='M', year=2007, month=12)
A:pandas.tests.scalar.test_period_asfreq.ival_M_end_of_quarter->Period(freq='M', year=2007, month=3)
A:pandas.tests.scalar.test_period_asfreq.ival_M_to_A->Period(freq='A', year=2007)
A:pandas.tests.scalar.test_period_asfreq.ival_M_to_Q->Period(freq='Q', year=2007, quarter=1)
A:pandas.tests.scalar.test_period_asfreq.ival_M_to_W_start->Period(freq='W', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_M_to_W_end->Period(freq='W', year=2007, month=1, day=31)
A:pandas.tests.scalar.test_period_asfreq.ival_M_to_B_start->Period(freq='B', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_M_to_B_end->Period(freq='B', year=2007, month=1, day=31)
A:pandas.tests.scalar.test_period_asfreq.ival_M_to_D_start->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_M_to_D_end->Period(freq='D', year=2007, month=1, day=31)
A:pandas.tests.scalar.test_period_asfreq.ival_M_to_H_start->Period(freq='H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.test_period_asfreq.ival_M_to_H_end->Period(freq='H', year=2007, month=1, day=31, hour=23)
A:pandas.tests.scalar.test_period_asfreq.ival_M_to_T_start->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0)
A:pandas.tests.scalar.test_period_asfreq.ival_M_to_T_end->Period(freq='Min', year=2007, month=1, day=31, hour=23, minute=59)
A:pandas.tests.scalar.test_period_asfreq.ival_M_to_S_start->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=0)
A:pandas.tests.scalar.test_period_asfreq.ival_M_to_S_end->Period(freq='S', year=2007, month=1, day=31, hour=23, minute=59, second=59)
A:pandas.tests.scalar.test_period_asfreq.ival_W->Period(freq='W', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_WSUN->Period(freq='W', year=2007, month=1, day=7)
A:pandas.tests.scalar.test_period_asfreq.ival_WSAT->Period(freq='W-SAT', year=2007, month=1, day=6)
A:pandas.tests.scalar.test_period_asfreq.ival_WFRI->Period(freq='W-FRI', year=2007, month=1, day=5)
A:pandas.tests.scalar.test_period_asfreq.ival_WTHU->Period(freq='W-THU', year=2007, month=1, day=4)
A:pandas.tests.scalar.test_period_asfreq.ival_WWED->Period(freq='W-WED', year=2007, month=1, day=3)
A:pandas.tests.scalar.test_period_asfreq.ival_WTUE->Period(freq='W-TUE', year=2007, month=1, day=2)
A:pandas.tests.scalar.test_period_asfreq.ival_WMON->Period(freq='W-MON', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_WSUN_to_D_start->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_WSUN_to_D_end->Period(freq='D', year=2007, month=1, day=7)
A:pandas.tests.scalar.test_period_asfreq.ival_WSAT_to_D_start->Period(freq='D', year=2006, month=12, day=31)
A:pandas.tests.scalar.test_period_asfreq.ival_WSAT_to_D_end->Period(freq='D', year=2007, month=1, day=6)
A:pandas.tests.scalar.test_period_asfreq.ival_WFRI_to_D_start->Period(freq='D', year=2006, month=12, day=30)
A:pandas.tests.scalar.test_period_asfreq.ival_WFRI_to_D_end->Period(freq='D', year=2007, month=1, day=5)
A:pandas.tests.scalar.test_period_asfreq.ival_WTHU_to_D_start->Period(freq='D', year=2006, month=12, day=29)
A:pandas.tests.scalar.test_period_asfreq.ival_WTHU_to_D_end->Period(freq='D', year=2007, month=1, day=4)
A:pandas.tests.scalar.test_period_asfreq.ival_WWED_to_D_start->Period(freq='D', year=2006, month=12, day=28)
A:pandas.tests.scalar.test_period_asfreq.ival_WWED_to_D_end->Period(freq='D', year=2007, month=1, day=3)
A:pandas.tests.scalar.test_period_asfreq.ival_WTUE_to_D_start->Period(freq='D', year=2006, month=12, day=27)
A:pandas.tests.scalar.test_period_asfreq.ival_WTUE_to_D_end->Period(freq='D', year=2007, month=1, day=2)
A:pandas.tests.scalar.test_period_asfreq.ival_WMON_to_D_start->Period(freq='D', year=2006, month=12, day=26)
A:pandas.tests.scalar.test_period_asfreq.ival_WMON_to_D_end->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_W_end_of_year->Period(freq='W', year=2007, month=12, day=31)
A:pandas.tests.scalar.test_period_asfreq.ival_W_end_of_quarter->Period(freq='W', year=2007, month=3, day=31)
A:pandas.tests.scalar.test_period_asfreq.ival_W_end_of_month->Period(freq='W', year=2007, month=1, day=31)
A:pandas.tests.scalar.test_period_asfreq.ival_W_to_A->Period(freq='A', year=2007)
A:pandas.tests.scalar.test_period_asfreq.ival_W_to_Q->Period(freq='Q', year=2007, quarter=1)
A:pandas.tests.scalar.test_period_asfreq.ival_W_to_M->Period(freq='M', year=2007, month=1)
A:pandas.tests.scalar.test_period_asfreq.ival_W_to_A_end_of_year->Period(freq='A', year=2008)
A:pandas.tests.scalar.test_period_asfreq.ival_W_to_Q_end_of_quarter->Period(freq='Q', year=2007, quarter=2)
A:pandas.tests.scalar.test_period_asfreq.ival_W_to_M_end_of_month->Period(freq='M', year=2007, month=2)
A:pandas.tests.scalar.test_period_asfreq.ival_W_to_B_start->Period(freq='B', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_W_to_B_end->Period(freq='B', year=2007, month=1, day=5)
A:pandas.tests.scalar.test_period_asfreq.ival_W_to_D_start->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_W_to_D_end->Period(freq='D', year=2007, month=1, day=7)
A:pandas.tests.scalar.test_period_asfreq.ival_W_to_H_start->Period(freq='H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.test_period_asfreq.ival_W_to_H_end->Period(freq='H', year=2007, month=1, day=7, hour=23)
A:pandas.tests.scalar.test_period_asfreq.ival_W_to_T_start->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0)
A:pandas.tests.scalar.test_period_asfreq.ival_W_to_T_end->Period(freq='Min', year=2007, month=1, day=7, hour=23, minute=59)
A:pandas.tests.scalar.test_period_asfreq.ival_W_to_S_start->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=0)
A:pandas.tests.scalar.test_period_asfreq.ival_W_to_S_end->Period(freq='S', year=2007, month=1, day=7, hour=23, minute=59, second=59)
A:pandas.tests.scalar.test_period_asfreq.ival_B->Period(freq='B', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_B_end_of_year->Period(freq='B', year=2007, month=12, day=31)
A:pandas.tests.scalar.test_period_asfreq.ival_B_end_of_quarter->Period(freq='B', year=2007, month=3, day=30)
A:pandas.tests.scalar.test_period_asfreq.ival_B_end_of_month->Period(freq='B', year=2007, month=1, day=31)
A:pandas.tests.scalar.test_period_asfreq.ival_B_end_of_week->Period(freq='B', year=2007, month=1, day=5)
A:pandas.tests.scalar.test_period_asfreq.ival_B_to_A->Period(freq='A', year=2007)
A:pandas.tests.scalar.test_period_asfreq.ival_B_to_Q->Period(freq='Q', year=2007, quarter=1)
A:pandas.tests.scalar.test_period_asfreq.ival_B_to_M->Period(freq='M', year=2007, month=1)
A:pandas.tests.scalar.test_period_asfreq.ival_B_to_W->Period(freq='W', year=2007, month=1, day=7)
A:pandas.tests.scalar.test_period_asfreq.ival_B_to_D->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_B_to_H_start->Period(freq='H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.test_period_asfreq.ival_B_to_H_end->Period(freq='H', year=2007, month=1, day=1, hour=23)
A:pandas.tests.scalar.test_period_asfreq.ival_B_to_T_start->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0)
A:pandas.tests.scalar.test_period_asfreq.ival_B_to_T_end->Period(freq='Min', year=2007, month=1, day=1, hour=23, minute=59)
A:pandas.tests.scalar.test_period_asfreq.ival_B_to_S_start->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=0)
A:pandas.tests.scalar.test_period_asfreq.ival_B_to_S_end->Period(freq='S', year=2007, month=1, day=1, hour=23, minute=59, second=59)
A:pandas.tests.scalar.test_period_asfreq.ival_D->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_D_end_of_year->Period(freq='D', year=2007, month=12, day=31)
A:pandas.tests.scalar.test_period_asfreq.ival_D_end_of_quarter->Period(freq='D', year=2007, month=3, day=31)
A:pandas.tests.scalar.test_period_asfreq.ival_D_end_of_month->Period(freq='D', year=2007, month=1, day=31)
A:pandas.tests.scalar.test_period_asfreq.ival_D_end_of_week->Period(freq='D', year=2007, month=1, day=7)
A:pandas.tests.scalar.test_period_asfreq.ival_D_friday->Period(freq='D', year=2007, month=1, day=5)
A:pandas.tests.scalar.test_period_asfreq.ival_D_saturday->Period(freq='D', year=2007, month=1, day=6)
A:pandas.tests.scalar.test_period_asfreq.ival_D_sunday->Period(freq='D', year=2007, month=1, day=7)
A:pandas.tests.scalar.test_period_asfreq.ival_B_friday->Period(freq='B', year=2007, month=1, day=5)
A:pandas.tests.scalar.test_period_asfreq.ival_B_monday->Period(freq='B', year=2007, month=1, day=8)
A:pandas.tests.scalar.test_period_asfreq.ival_D_to_A->Period(freq='A', year=2007)
A:pandas.tests.scalar.test_period_asfreq.ival_Deoq_to_AJAN->Period(freq='A-JAN', year=2008)
A:pandas.tests.scalar.test_period_asfreq.ival_Deoq_to_AJUN->Period(freq='A-JUN', year=2007)
A:pandas.tests.scalar.test_period_asfreq.ival_Deoq_to_ADEC->Period(freq='A-DEC', year=2007)
A:pandas.tests.scalar.test_period_asfreq.ival_D_to_QEJAN->Period(freq='Q-JAN', year=2007, quarter=4)
A:pandas.tests.scalar.test_period_asfreq.ival_D_to_QEJUN->Period(freq='Q-JUN', year=2007, quarter=3)
A:pandas.tests.scalar.test_period_asfreq.ival_D_to_QEDEC->Period(freq='Q-DEC', year=2007, quarter=1)
A:pandas.tests.scalar.test_period_asfreq.ival_D_to_M->Period(freq='M', year=2007, month=1)
A:pandas.tests.scalar.test_period_asfreq.ival_D_to_W->Period(freq='W', year=2007, month=1, day=7)
A:pandas.tests.scalar.test_period_asfreq.ival_D_to_H_start->Period(freq='H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.test_period_asfreq.ival_D_to_H_end->Period(freq='H', year=2007, month=1, day=1, hour=23)
A:pandas.tests.scalar.test_period_asfreq.ival_D_to_T_start->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0)
A:pandas.tests.scalar.test_period_asfreq.ival_D_to_T_end->Period(freq='Min', year=2007, month=1, day=1, hour=23, minute=59)
A:pandas.tests.scalar.test_period_asfreq.ival_D_to_S_start->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=0)
A:pandas.tests.scalar.test_period_asfreq.ival_D_to_S_end->Period(freq='S', year=2007, month=1, day=1, hour=23, minute=59, second=59)
A:pandas.tests.scalar.test_period_asfreq.ival_H->Period(freq='H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.test_period_asfreq.ival_H_end_of_year->Period(freq='H', year=2007, month=12, day=31, hour=23)
A:pandas.tests.scalar.test_period_asfreq.ival_H_end_of_quarter->Period(freq='H', year=2007, month=3, day=31, hour=23)
A:pandas.tests.scalar.test_period_asfreq.ival_H_end_of_month->Period(freq='H', year=2007, month=1, day=31, hour=23)
A:pandas.tests.scalar.test_period_asfreq.ival_H_end_of_week->Period(freq='H', year=2007, month=1, day=7, hour=23)
A:pandas.tests.scalar.test_period_asfreq.ival_H_end_of_day->Period(freq='H', year=2007, month=1, day=1, hour=23)
A:pandas.tests.scalar.test_period_asfreq.ival_H_end_of_bus->Period(freq='H', year=2007, month=1, day=1, hour=23)
A:pandas.tests.scalar.test_period_asfreq.ival_H_to_A->Period(freq='A', year=2007)
A:pandas.tests.scalar.test_period_asfreq.ival_H_to_Q->Period(freq='Q', year=2007, quarter=1)
A:pandas.tests.scalar.test_period_asfreq.ival_H_to_M->Period(freq='M', year=2007, month=1)
A:pandas.tests.scalar.test_period_asfreq.ival_H_to_W->Period(freq='W', year=2007, month=1, day=7)
A:pandas.tests.scalar.test_period_asfreq.ival_H_to_D->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_H_to_B->Period(freq='B', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_H_to_T_start->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0)
A:pandas.tests.scalar.test_period_asfreq.ival_H_to_T_end->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=59)
A:pandas.tests.scalar.test_period_asfreq.ival_H_to_S_start->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=0)
A:pandas.tests.scalar.test_period_asfreq.ival_H_to_S_end->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=59, second=59)
A:pandas.tests.scalar.test_period_asfreq.ival_T->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0)
A:pandas.tests.scalar.test_period_asfreq.ival_T_end_of_year->Period(freq='Min', year=2007, month=12, day=31, hour=23, minute=59)
A:pandas.tests.scalar.test_period_asfreq.ival_T_end_of_quarter->Period(freq='Min', year=2007, month=3, day=31, hour=23, minute=59)
A:pandas.tests.scalar.test_period_asfreq.ival_T_end_of_month->Period(freq='Min', year=2007, month=1, day=31, hour=23, minute=59)
A:pandas.tests.scalar.test_period_asfreq.ival_T_end_of_week->Period(freq='Min', year=2007, month=1, day=7, hour=23, minute=59)
A:pandas.tests.scalar.test_period_asfreq.ival_T_end_of_day->Period(freq='Min', year=2007, month=1, day=1, hour=23, minute=59)
A:pandas.tests.scalar.test_period_asfreq.ival_T_end_of_bus->Period(freq='Min', year=2007, month=1, day=1, hour=23, minute=59)
A:pandas.tests.scalar.test_period_asfreq.ival_T_end_of_hour->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=59)
A:pandas.tests.scalar.test_period_asfreq.ival_T_to_A->Period(freq='A', year=2007)
A:pandas.tests.scalar.test_period_asfreq.ival_T_to_Q->Period(freq='Q', year=2007, quarter=1)
A:pandas.tests.scalar.test_period_asfreq.ival_T_to_M->Period(freq='M', year=2007, month=1)
A:pandas.tests.scalar.test_period_asfreq.ival_T_to_W->Period(freq='W', year=2007, month=1, day=7)
A:pandas.tests.scalar.test_period_asfreq.ival_T_to_D->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_T_to_B->Period(freq='B', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_T_to_H->Period(freq='H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.test_period_asfreq.ival_T_to_S_start->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=0)
A:pandas.tests.scalar.test_period_asfreq.ival_T_to_S_end->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=59)
A:pandas.tests.scalar.test_period_asfreq.ival_S->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=0)
A:pandas.tests.scalar.test_period_asfreq.ival_S_end_of_year->Period(freq='S', year=2007, month=12, day=31, hour=23, minute=59, second=59)
A:pandas.tests.scalar.test_period_asfreq.ival_S_end_of_quarter->Period(freq='S', year=2007, month=3, day=31, hour=23, minute=59, second=59)
A:pandas.tests.scalar.test_period_asfreq.ival_S_end_of_month->Period(freq='S', year=2007, month=1, day=31, hour=23, minute=59, second=59)
A:pandas.tests.scalar.test_period_asfreq.ival_S_end_of_week->Period(freq='S', year=2007, month=1, day=7, hour=23, minute=59, second=59)
A:pandas.tests.scalar.test_period_asfreq.ival_S_end_of_day->Period(freq='S', year=2007, month=1, day=1, hour=23, minute=59, second=59)
A:pandas.tests.scalar.test_period_asfreq.ival_S_end_of_bus->Period(freq='S', year=2007, month=1, day=1, hour=23, minute=59, second=59)
A:pandas.tests.scalar.test_period_asfreq.ival_S_end_of_hour->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=59, second=59)
A:pandas.tests.scalar.test_period_asfreq.ival_S_end_of_minute->Period(freq='S', year=2007, month=1, day=1, hour=0, minute=0, second=59)
A:pandas.tests.scalar.test_period_asfreq.ival_S_to_A->Period(freq='A', year=2007)
A:pandas.tests.scalar.test_period_asfreq.ival_S_to_Q->Period(freq='Q', year=2007, quarter=1)
A:pandas.tests.scalar.test_period_asfreq.ival_S_to_M->Period(freq='M', year=2007, month=1)
A:pandas.tests.scalar.test_period_asfreq.ival_S_to_W->Period(freq='W', year=2007, month=1, day=7)
A:pandas.tests.scalar.test_period_asfreq.ival_S_to_D->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_S_to_B->Period(freq='B', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period_asfreq.ival_S_to_H->Period(freq='H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.test_period_asfreq.ival_S_to_T->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0)
A:pandas.tests.scalar.test_period_asfreq.p->Period('2007', freq='H')
A:pandas.tests.scalar.test_period_asfreq.result->Period('2007', freq='H').asfreq(freq, how=how)
A:pandas.tests.scalar.test_period_asfreq.p1->Period(freq='1D1H', year=2007)
A:pandas.tests.scalar.test_period_asfreq.p2->Period(freq='1H1D', year=2007)
A:pandas.tests.scalar.test_period_asfreq.initial->Period('2013')
pandas.tests.scalar.test_period_asfreq.TestFreqConversion(object)
pandas.tests.scalar.test_period_asfreq.TestFreqConversion.test_asfreq_MS(self)
pandas.tests.scalar.test_period_asfreq.TestFreqConversion.test_asfreq_combined(self)
pandas.tests.scalar.test_period_asfreq.TestFreqConversion.test_asfreq_corner(self)
pandas.tests.scalar.test_period_asfreq.TestFreqConversion.test_asfreq_mult(self)
pandas.tests.scalar.test_period_asfreq.TestFreqConversion.test_conv_annual(self)
pandas.tests.scalar.test_period_asfreq.TestFreqConversion.test_conv_business(self)
pandas.tests.scalar.test_period_asfreq.TestFreqConversion.test_conv_daily(self)
pandas.tests.scalar.test_period_asfreq.TestFreqConversion.test_conv_hourly(self)
pandas.tests.scalar.test_period_asfreq.TestFreqConversion.test_conv_minutely(self)
pandas.tests.scalar.test_period_asfreq.TestFreqConversion.test_conv_monthly(self)
pandas.tests.scalar.test_period_asfreq.TestFreqConversion.test_conv_quarterly(self)
pandas.tests.scalar.test_period_asfreq.TestFreqConversion.test_conv_secondly(self)
pandas.tests.scalar.test_period_asfreq.TestFreqConversion.test_conv_weekly(self)
pandas.tests.scalar.test_period_asfreq.TestFreqConversion.test_conv_weekly_legacy(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/scalar/test_timedelta.py----------------------------------------
A:pandas.tests.scalar.test_timedelta.expected->pandas.Series([np.nan, 32.0], dtype='float64')
A:pandas.tests.scalar.test_timedelta.td->Timedelta('1 day')
A:pandas.tests.scalar.test_timedelta.result->Timedelta(minutes=1).isoformat()
A:pandas.tests.scalar.test_timedelta.rng->timedelta_range('1 days, 10:11:12', periods=2, freq='s')
A:pandas.tests.scalar.test_timedelta.pydt->Timedelta('1 day').to_pytimedelta()
A:pandas.tests.scalar.test_timedelta.td64->Timedelta('1 day').to_timedelta64()
A:pandas.tests.scalar.test_timedelta.t1->timedelta_range('1 days', periods=3, freq='1 min 2 s 3 us')
A:pandas.tests.scalar.test_timedelta.t2->Timedelta('-1 days 02:34:56.789123456')
A:pandas.tests.scalar.test_timedelta.r1->timedelta_range('1 days', periods=3, freq='1 min 2 s 3 us').round(freq)
A:pandas.tests.scalar.test_timedelta.r2->Timedelta('-1 days 02:34:56.789123456').round(freq)
A:pandas.tests.scalar.test_timedelta.t1a->timedelta_range('1 days', periods=3, freq='1 min 2 s')
A:pandas.tests.scalar.test_timedelta.t1c->pandas.TimedeltaIndex([1, 1, 1], unit='D')
A:pandas.tests.scalar.test_timedelta.d1->numpy.timedelta64(1, 'D')
A:pandas.tests.scalar.test_timedelta.s->Series(rng)
A:pandas.tests.scalar.test_timedelta.v->Timedelta(1, 'D')
A:pandas.tests.scalar.test_timedelta.v_p->pandas.util.testing.round_trip_pickle(v)
A:pandas.tests.scalar.test_timedelta.tds->timedelta_range('1 second', periods=20)
A:pandas.tests.scalar.test_timedelta.ns_td->Timedelta(1, 'ns')
A:pandas.tests.scalar.test_timedelta.min_td->Timedelta(Timedelta.min)
A:pandas.tests.scalar.test_timedelta.max_td->Timedelta(Timedelta.max)
A:pandas.tests.scalar.test_timedelta.data->pandas.Series(['nat', '32 days'], dtype='timedelta64[ns]')
A:pandas.tests.scalar.test_timedelta.result_method->pandas.Series(['nat', '32 days'], dtype='timedelta64[ns]').div(delta)
A:pandas.tests.scalar.test_timedelta.timedelta_NaT->pandas.to_timedelta('NaT')
A:pandas.tests.scalar.test_timedelta.a->pandas.to_timedelta(list_of_strings)
A:pandas.tests.scalar.test_timedelta.b->Series(list_of_strings).apply(pd.to_timedelta)
pandas.tests.scalar.test_timedelta.TestTimedeltas(object)
pandas.tests.scalar.test_timedelta.TestTimedeltas.setup_method(self,method)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_apply_to_timedelta(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_components(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_construction(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_contains(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_conversion(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_fields(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_freq_conversion(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_full_format_converters(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_identity(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_implementation_limits(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_isoformat(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_nat_converters(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_numeric_conversions(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_ops_error_str(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_overflow(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_overflow_on_construction(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_pickle(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_repr(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_round(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_short_format_converters(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_timedelta_arithmetic(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_timedelta_conversions(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_timedelta_hash_equality(self)
pandas.tests.scalar.test_timedelta.TestTimedeltas.test_total_seconds_scalar(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/scalar/test_period.py----------------------------------------
A:pandas.tests.scalar.test_period.p->Period('2011-04-01', freq='D')
A:pandas.tests.scalar.test_period.exp->pandas.Period('2011-03-30', freq='D')
A:pandas.tests.scalar.test_period.stamp->pandas.Period('2011-03-30', freq='D').to_timestamp('3D', how='end')
A:pandas.tests.scalar.test_period.result->Period(p, freq='A')
A:pandas.tests.scalar.test_period.expected->Period('2007-01', freq='2M')
A:pandas.tests.scalar.test_period.res->Period('2011-04-01', freq='D').strftime('%Y-%m-%d %H:%M:%S')
A:pandas.tests.scalar.test_period.p1->Period('2016-03-01 09:00', freq=exp)
A:pandas.tests.scalar.test_period.p2->Period(ordinal=1, freq=exp)
A:pandas.tests.scalar.test_period.exp_zone->pytz.timezone(case).normalize(p)
A:pandas.tests.scalar.test_period.i1->Period('1982', freq='Min')
A:pandas.tests.scalar.test_period.i2->Period(datetime(2007, 1, 1), freq='M')
A:pandas.tests.scalar.test_period.i3->Period(np.datetime64('2007-01-01'), freq='M')
A:pandas.tests.scalar.test_period.i4->Period(np_datetime64_compat('2007-01-01 00:00:00Z'), freq='M')
A:pandas.tests.scalar.test_period.i5->Period(np_datetime64_compat('2007-01-01 00:00:00.000Z'), freq='M')
A:pandas.tests.scalar.test_period.lower->Period('4q1984')
A:pandas.tests.scalar.test_period.start_ts->Period('2011-04-01', freq='D').to_timestamp(how='S')
A:pandas.tests.scalar.test_period.end_ts->Period('2011-04-01', freq='D').to_timestamp(how='E')
A:pandas.tests.scalar.test_period.xp->_ex(2013, 1, 6)
A:pandas.tests.scalar.test_period.a_date->Period(freq='A', year=2007)
A:pandas.tests.scalar.test_period.qedec_date->Period(freq='Q-DEC', year=2007, quarter=1)
A:pandas.tests.scalar.test_period.qejan_date->Period(freq='Q-JAN', year=2007, quarter=1)
A:pandas.tests.scalar.test_period.qejun_date->Period(freq='Q-JUN', year=2007, quarter=1)
A:pandas.tests.scalar.test_period.m_date->Period(freq='M', year=2007, month=1)
A:pandas.tests.scalar.test_period.w_date->Period(freq='W', year=2007, month=1, day=7)
A:pandas.tests.scalar.test_period.b_date->Period(freq='B', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period.d_date->Period(freq='D', year=2007, month=1, day=1)
A:pandas.tests.scalar.test_period.h_date1->Period(freq='H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.test_period.h_date2->Period(freq='2H', year=2007, month=1, day=1, hour=0)
A:pandas.tests.scalar.test_period.t_date->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0)
A:pandas.tests.scalar.test_period.s_date->Period(freq='Min', year=2007, month=1, day=1, hour=0, minute=0, second=0)
A:pandas.tests.scalar.test_period.result1->Period('1989', freq='2A')
A:pandas.tests.scalar.test_period.result2->Period('1989', freq='A')
A:pandas.tests.scalar.test_period.new_p->pandas.util.testing.round_trip_pickle(p)
A:pandas.tests.scalar.test_period.self.january1->Period('2000-01', 'M')
A:pandas.tests.scalar.test_period.self.january2->Period('2000-01', 'M')
A:pandas.tests.scalar.test_period.self.february->Period('2000-02', 'M')
A:pandas.tests.scalar.test_period.self.march->Period('2000-03', 'M')
A:pandas.tests.scalar.test_period.self.day->Period('2012-01-01', 'D')
A:pandas.tests.scalar.test_period.p_nat->Period('NaT', freq='D')
A:pandas.tests.scalar.test_period.nat->pandas.Timestamp('NaT')
A:pandas.tests.scalar.test_period.t->pandas.Timestamp('2011-01-01')
A:pandas.tests.scalar.test_period.dt1->Period('2011-01-01', freq='D')
A:pandas.tests.scalar.test_period.dt2->Period('2011-01-15', freq='D')
pandas.tests.scalar.test_period.TestComparisons(object)
pandas.tests.scalar.test_period.TestComparisons.setup_method(self,method)
pandas.tests.scalar.test_period.TestComparisons.test_equal(self)
pandas.tests.scalar.test_period.TestComparisons.test_equal_Raises_Value(self)
pandas.tests.scalar.test_period.TestComparisons.test_greater(self)
pandas.tests.scalar.test_period.TestComparisons.test_greaterEqual(self)
pandas.tests.scalar.test_period.TestComparisons.test_greaterEqual_Raises_Value(self)
pandas.tests.scalar.test_period.TestComparisons.test_greater_Raises_Type(self)
pandas.tests.scalar.test_period.TestComparisons.test_greater_Raises_Value(self)
pandas.tests.scalar.test_period.TestComparisons.test_notEqual(self)
pandas.tests.scalar.test_period.TestComparisons.test_period_nat_comp(self)
pandas.tests.scalar.test_period.TestComparisons.test_smaller(self)
pandas.tests.scalar.test_period.TestComparisons.test_smallerEqual(self)
pandas.tests.scalar.test_period.TestComparisons.test_smallerEqual_Raises_Type(self)
pandas.tests.scalar.test_period.TestComparisons.test_smallerEqual_Raises_Value(self)
pandas.tests.scalar.test_period.TestComparisons.test_smaller_Raises_Type(self)
pandas.tests.scalar.test_period.TestComparisons.test_smaller_Raises_Value(self)
pandas.tests.scalar.test_period.TestComparisons.test_sort(self)
pandas.tests.scalar.test_period.TestMethods(object)
pandas.tests.scalar.test_period.TestMethods.test_add(self)
pandas.tests.scalar.test_period.TestMethods.test_add_offset(self)
pandas.tests.scalar.test_period.TestMethods.test_add_offset_nat(self)
pandas.tests.scalar.test_period.TestMethods.test_add_pdnat(self)
pandas.tests.scalar.test_period.TestMethods.test_add_raises(self)
pandas.tests.scalar.test_period.TestMethods.test_nat_ops(self)
pandas.tests.scalar.test_period.TestMethods.test_period_ops_offset(self)
pandas.tests.scalar.test_period.TestMethods.test_sub(self)
pandas.tests.scalar.test_period.TestMethods.test_sub_offset(self)
pandas.tests.scalar.test_period.TestMethods.test_sub_offset_nat(self)
pandas.tests.scalar.test_period.TestMethods.test_sub_pdnat(self)
pandas.tests.scalar.test_period.TestPeriodField(object)
pandas.tests.scalar.test_period.TestPeriodField.test_get_period_field_array_raises_on_out_of_range(self)
pandas.tests.scalar.test_period.TestPeriodField.test_get_period_field_raises_on_out_of_range(self)
pandas.tests.scalar.test_period.TestPeriodProperties(object)
pandas.tests.scalar.test_period.TestPeriodProperties.test_anchor_week_end_time(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_badinput(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_construction(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_construction_bday(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_construction_month(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_construction_quarter(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_constructor_corner(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_constructor_infer_freq(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_end_time(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_freq_str(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_hash(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_is_leap_year(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_microsecond_repr(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_millisecond_repr(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_multiples(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_period_cons_annual(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_period_cons_combined(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_period_cons_mult(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_period_cons_nat(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_period_cons_quarterly(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_period_cons_weekly(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_period_constructor_offsets(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_period_deprecated_freq(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_period_from_ordinal(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_pnow(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_properties_annually(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_properties_daily(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_properties_hourly(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_properties_minutely(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_properties_monthly(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_properties_quarterly(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_properties_secondly(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_properties_weekly(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_properties_weekly_legacy(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_quarterly_negative_ordinals(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_repr(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_repr_nat(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_round_trip(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_start_time(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_strftime(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_sub_delta(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_timestamp_mult(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_timestamp_tz_arg(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_timestamp_tz_arg_dateutil(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_timestamp_tz_arg_dateutil_from_string(self)
pandas.tests.scalar.test_period.TestPeriodProperties.test_to_timestamp(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/scalar/test_interval.py----------------------------------------
A:pandas.tests.scalar.test_interval.self.interval->Interval(0, 1)
A:pandas.tests.scalar.test_interval.interval_left->Interval(0, 1, closed='left')
A:pandas.tests.scalar.test_interval.interval->Interval(0, 1, closed='neither')
A:pandas.tests.scalar.test_interval.expected->Interval(0, 0.5)
pandas.tests.scalar.test_interval.TestInterval(object)
pandas.tests.scalar.test_interval.TestInterval.setup_method(self,method)
pandas.tests.scalar.test_interval.TestInterval.test_comparison(self)
pandas.tests.scalar.test_interval.TestInterval.test_contains(self)
pandas.tests.scalar.test_interval.TestInterval.test_equal(self)
pandas.tests.scalar.test_interval.TestInterval.test_hash(self)
pandas.tests.scalar.test_interval.TestInterval.test_math_add(self)
pandas.tests.scalar.test_interval.TestInterval.test_math_div(self)
pandas.tests.scalar.test_interval.TestInterval.test_math_mult(self)
pandas.tests.scalar.test_interval.TestInterval.test_math_sub(self)
pandas.tests.scalar.test_interval.TestInterval.test_properties(self)
pandas.tests.scalar.test_interval.TestInterval.test_repr(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/scalar/test_nat.py----------------------------------------
A:pandas.tests.scalar.test_nat.result->klass('NaT').isoformat()
A:pandas.tests.scalar.test_nat.idx->DatetimeIndex(['1/1/2000', None, None, '1/4/2000'])
A:pandas.tests.scalar.test_nat.expected->Index([getattr(x, field) for x in idx])
A:pandas.tests.scalar.test_nat.s->Series(idx)
A:pandas.tests.scalar.test_nat.ts->klass('nat')
A:pandas.tests.scalar.test_nat.round_method->getattr(ts, method)
A:pandas.tests.scalar.test_nat.t->Timestamp('2014-01-01')
A:pandas.tests.scalar.test_nat.dt->datetime(2014, 1, 1)
A:pandas.tests.scalar.test_nat.delta->timedelta(3600)
A:pandas.tests.scalar.test_nat.td->Timedelta('5s')
A:pandas.tests.scalar.test_nat.t_utc->Timestamp('2014-01-01', tz='UTC')
A:pandas.tests.scalar.test_nat.t_tz->Timestamp('2014-01-01', tz='US/Eastern')
A:pandas.tests.scalar.test_nat.dt_tz->pytz.timezone('Asia/Tokyo').localize(dt)
A:pandas.tests.scalar.test_nat.dti->DatetimeIndex(['2011-01-01', '2011-01-02'], name='x')
A:pandas.tests.scalar.test_nat.exp->DatetimeIndex([NaT, NaT], name='x')
A:pandas.tests.scalar.test_nat.dti_tz->DatetimeIndex(['2011-01-01', '2011-01-02'], tz='US/Eastern', name='x')
A:pandas.tests.scalar.test_nat.tdi->TimedeltaIndex(['1 day', '2 day'], name='x')
pandas.tests.scalar.test_nat.test_NaT_methods()
pandas.tests.scalar.test_nat.test_equality(klass)
pandas.tests.scalar.test_nat.test_identity(klass)
pandas.tests.scalar.test_nat.test_isoformat(klass)
pandas.tests.scalar.test_nat.test_nat_arithmetic()
pandas.tests.scalar.test_nat.test_nat_arithmetic_index()
pandas.tests.scalar.test_nat.test_nat_fields(nat,idx)
pandas.tests.scalar.test_nat.test_nat_vector_field_access()
pandas.tests.scalar.test_nat.test_round_nat(klass)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/scalar/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/scalar/test_timestamp.py----------------------------------------
A:pandas.tests.scalar.test_timestamp.base_dt->datetime(2014, 7, 1, 9)
A:pandas.tests.scalar.test_timestamp.result->numpy.array([Timestamp(datetime(*args)).week for args in [(2000, 1, 1), (2000, 1, 2), (2005, 1, 1), (2005, 1, 2)]])
A:pandas.tests.scalar.test_timestamp.base->Timestamp('20140101 00:00:00')
A:pandas.tests.scalar.test_timestamp.ts->Timestamp(t)
A:pandas.tests.scalar.test_timestamp.expected->left_f(s_nat, Timestamp('nat'))
A:pandas.tests.scalar.test_timestamp.freq_repr->"'{0}'".format(freq)
A:pandas.tests.scalar.test_timestamp.tz_repr->tz.replace('dateutil', '')
A:pandas.tests.scalar.test_timestamp.date_only->Timestamp(date)
A:pandas.tests.scalar.test_timestamp.date_tz->Timestamp(date, tz=tz)
A:pandas.tests.scalar.test_timestamp.date_freq->Timestamp(date, freq=freq)
A:pandas.tests.scalar.test_timestamp.date_tz_freq->Timestamp(date, tz=tz, freq=freq)
A:pandas.tests.scalar.test_timestamp.date_with_utc_offset->Timestamp('2014-03-13 00:00:00-0400', tz=None)
A:pandas.tests.scalar.test_timestamp.expr->repr(date_with_utc_offset).replace("'pytz.FixedOffset(-240)'", 'pytz.FixedOffset(-240)')
A:pandas.tests.scalar.test_timestamp.local->Timestamp(t).tz_localize('Asia/Tokyo')
A:pandas.tests.scalar.test_timestamp.conv->Timestamp(t).tz_localize('Asia/Tokyo').tz_convert('US/Eastern')
A:pandas.tests.scalar.test_timestamp.ts_dst->Timestamp(t).tz_localize('US/Eastern', ambiguous=True)
A:pandas.tests.scalar.test_timestamp.ts_no_dst->Timestamp(t).tz_localize('US/Eastern', ambiguous=False)
A:pandas.tests.scalar.test_timestamp.rng->date_range('2000-01-01', periods=10)
A:pandas.tests.scalar.test_timestamp.localized->Timestamp(t).tz_localize(tz)
A:pandas.tests.scalar.test_timestamp.reset->ts.tz_convert(tz).tz_convert(None)
A:pandas.tests.scalar.test_timestamp.converted->Timestamp(t).tz_convert(tz)
A:pandas.tests.scalar.test_timestamp.one_us->numpy.timedelta64(1).astype('timedelta64[us]')
A:pandas.tests.scalar.test_timestamp.min_ts_us->numpy.datetime64(Timestamp.min).astype('M8[us]')
A:pandas.tests.scalar.test_timestamp.max_ts_us->numpy.datetime64(Timestamp.max).astype('M8[us]')
A:pandas.tests.scalar.test_timestamp.ts_from_string->Timestamp('today')
A:pandas.tests.scalar.test_timestamp.ts_from_method->pandas.Timestamp.today()
A:pandas.tests.scalar.test_timestamp.ts_datetime->datetime.datetime.today()
A:pandas.tests.scalar.test_timestamp.ts_from_string_tz->Timestamp('today', tz='US/Eastern')
A:pandas.tests.scalar.test_timestamp.ts_from_method_tz->pandas.Timestamp.today(tz='US/Eastern')
A:pandas.tests.scalar.test_timestamp.delta->Timedelta(seconds=1)
A:pandas.tests.scalar.test_timestamp.dt->datetime(2011, 4, 16, 0, 0)
A:pandas.tests.scalar.test_timestamp.dti->DatetimeIndex(start='1/1/2005', end='12/1/2005', freq='M')
A:pandas.tests.scalar.test_timestamp.stamp->Timestamp('2012-01-01')
A:pandas.tests.scalar.test_timestamp.current_time->calendar.timegm(datetime.now().utctimetuple())
A:pandas.tests.scalar.test_timestamp.date_component->datetime.datetime.utcnow()
A:pandas.tests.scalar.test_timestamp.time_component->(date_component + timedelta(minutes=10)).time()
A:pandas.tests.scalar.test_timestamp.val->Timestamp(long(1337299200000000123))
A:pandas.tests.scalar.test_timestamp.other->Timestamp(stamp + 100)
A:pandas.tests.scalar.test_timestamp.df->DataFrame(np.random.randn(10, 4), index=rng)
A:pandas.tests.scalar.test_timestamp.b->Timestamp('3/12/2012', tz=utc)
A:pandas.tests.scalar.test_timestamp.b.name->Timestamp('2000-01-01')
A:pandas.tests.scalar.test_timestamp.a->Timestamp('3/12/2012')
A:pandas.tests.scalar.test_timestamp.utc->tzutc()
A:pandas.tests.scalar.test_timestamp.(code, stride)->pandas.tseries.frequencies.get_freq_code((5, 'T'))
A:pandas.tests.scalar.test_timestamp.offset->pandas.tseries.offsets.Hour()
A:pandas.tests.scalar.test_timestamp.lhs->numpy.datetime64(datetime(2013, 12, 6))
A:pandas.tests.scalar.test_timestamp.rhs->Timestamp('now')
A:pandas.tests.scalar.test_timestamp.nat->Timestamp('nat')
A:pandas.tests.scalar.test_timestamp.left_f->getattr(operator, left)
A:pandas.tests.scalar.test_timestamp.right_f->getattr(operator, right)
A:pandas.tests.scalar.test_timestamp.s->Series(date_range('1/1/2000', periods=10))
A:pandas.tests.scalar.test_timestamp.s_nat->Series(date_range('1/1/2000', periods=10)).copy(deep=True)
A:pandas.tests.scalar.test_timestamp.s[0]->Timestamp('nat')
A:pandas.tests.scalar.test_timestamp.s[3]->Timestamp('nat')
A:pandas.tests.scalar.test_timestamp.self.timestamp->Timestamp(datetime.utcnow())
A:pandas.tests.scalar.test_timestamp.t->datetime(2012, 11, 1)
A:pandas.tests.scalar.test_timestamp.timestamp_series->Series(date_range('2014-03-17', periods=2, freq='D', tz='US/Eastern'))
A:pandas.tests.scalar.test_timestamp.delta_series->Series([np.timedelta64(0, 'D'), np.timedelta64(1, 'D')])
A:pandas.tests.scalar.test_timestamp.datetime_instance->datetime(2014, 3, 4)
A:pandas.tests.scalar.test_timestamp.timedelta_instance->timedelta(days=1)
A:pandas.tests.scalar.test_timestamp.timedelta64_instance->numpy.timedelta64(1, 'D')
A:pandas.tests.scalar.test_timestamp.idx->pandas.util.testing.makeDateIndex(100)
A:pandas.tests.scalar.test_timestamp.r->Timestamp('2000-08-12T13:00:00').to_julian_date()
A:pandas.tests.scalar.test_timestamp.dtval->Timestamp('2012-01-01').to_pydatetime()
A:pandas.tests.scalar.test_timestamp.dt_tz->Timestamp('2012-01-01').to_pydatetime()
A:pandas.tests.scalar.test_timestamp.columns->DatetimeIndex(start='1/1/2012', end='2/1/2012', freq=offsets.BDay())
A:pandas.tests.scalar.test_timestamp.index->lrange(10)
A:pandas.tests.scalar.test_timestamp.data->DataFrame(columns=columns, index=index)
A:pandas.tests.scalar.test_timestamp.d->datetime(2010, 1, 3)
pandas.tests.scalar.test_timestamp.TestTimeSeries(object)
pandas.tests.scalar.test_timestamp.TestTimeSeries.test_dti_slicing(self)
pandas.tests.scalar.test_timestamp.TestTimeSeries.test_frame_setitem_timestamp(self)
pandas.tests.scalar.test_timestamp.TestTimeSeries.test_series_box_timestamp(self)
pandas.tests.scalar.test_timestamp.TestTimeSeries.test_series_map_box_timestamps(self)
pandas.tests.scalar.test_timestamp.TestTimeSeries.test_timestamp_compare_with_early_datetime(self)
pandas.tests.scalar.test_timestamp.TestTimeSeries.test_timestamp_date_out_of_range(self)
pandas.tests.scalar.test_timestamp.TestTimeSeries.test_timestamp_equality(self)
pandas.tests.scalar.test_timestamp.TestTimeSeries.test_timestamp_fields(self)
pandas.tests.scalar.test_timestamp.TestTimeSeries.test_timestamp_from_ordinal(self)
pandas.tests.scalar.test_timestamp.TestTimeSeries.test_timestamp_repr(self)
pandas.tests.scalar.test_timestamp.TestTimeSeries.test_timestamp_to_datetime(self)
pandas.tests.scalar.test_timestamp.TestTimeSeries.test_timestamp_to_datetime_dateutil(self)
pandas.tests.scalar.test_timestamp.TestTimeSeries.test_timestamp_to_datetime_explicit_dateutil(self)
pandas.tests.scalar.test_timestamp.TestTimeSeries.test_timestamp_to_datetime_explicit_pytz(self)
pandas.tests.scalar.test_timestamp.TestTimeSeries.test_to_html_timestamp(self)
pandas.tests.scalar.test_timestamp.TestTimeSeries.test_woy_boundary(self)
pandas.tests.scalar.test_timestamp.TestTimestamp(object)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_asm8(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_barely_oob_dts(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_basics_nanos(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_bounds_with_different_units(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_cant_compare_tz_naive_w_aware(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_cant_compare_tz_naive_w_aware_dateutil(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_cant_compare_tz_naive_w_aware_explicit_pytz(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_class_ops_dateutil(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_class_ops_pytz(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_compare_invalid(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_comparison(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_constructor(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_constructor_fromordinal(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_constructor_invalid(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_constructor_keyword(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_constructor_offset_depr(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_constructor_offset_depr_fromordinal(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_constructor_positional(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_constructor_with_stringoffset(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_conversion(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_delta_preserve_nanos(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_fields(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_frequency_misc(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_hash_equivalent(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_is_leap_year(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_now(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_pprint(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_repr(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_round(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_round_misc(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_roundtrip(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_timestamp_compare_scalars(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_timestamp_compare_series(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_today(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_tz(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_tz_convert_roundtrip(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_tz_localize_ambiguous(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_tz_localize_errors_ambiguous(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_tz_localize_nonexistent(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_tz_localize_roundtrip(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_unit(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.test_utc_z_designator(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.to_datetime_depr(self)
pandas.tests.scalar.test_timestamp.TestTimestamp.to_pydatetime_nonzero_nano(self)
pandas.tests.scalar.test_timestamp.TestTimestampNsOperations(object)
pandas.tests.scalar.test_timestamp.TestTimestampNsOperations.assert_ns_timedelta(self,modified_timestamp,expected_value)
pandas.tests.scalar.test_timestamp.TestTimestampNsOperations.setup_method(self,method)
pandas.tests.scalar.test_timestamp.TestTimestampNsOperations.test_nanosecond_string_parsing(self)
pandas.tests.scalar.test_timestamp.TestTimestampNsOperations.test_nanosecond_timestamp(self)
pandas.tests.scalar.test_timestamp.TestTimestampNsOperations.test_timedelta_ms_arithmetic(self)
pandas.tests.scalar.test_timestamp.TestTimestampNsOperations.test_timedelta_ns_arithmetic(self)
pandas.tests.scalar.test_timestamp.TestTimestampNsOperations.test_timedelta_ns_based_arithmetic(self)
pandas.tests.scalar.test_timestamp.TestTimestampNsOperations.test_timedelta_us_arithmetic(self)
pandas.tests.scalar.test_timestamp.TestTimestampOps(object)
pandas.tests.scalar.test_timestamp.TestTimestampOps.test_addition_subtraction_preserve_frequency(self)
pandas.tests.scalar.test_timestamp.TestTimestampOps.test_addition_subtraction_types(self)
pandas.tests.scalar.test_timestamp.TestTimestampOps.test_resolution(self)
pandas.tests.scalar.test_timestamp.TestTimestampOps.test_timestamp_and_datetime(self)
pandas.tests.scalar.test_timestamp.TestTimestampOps.test_timestamp_and_series(self)
pandas.tests.scalar.test_timestamp.TestTimestampToJulianDate(object)
pandas.tests.scalar.test_timestamp.TestTimestampToJulianDate.test_compare_1700(self)
pandas.tests.scalar.test_timestamp.TestTimestampToJulianDate.test_compare_2000(self)
pandas.tests.scalar.test_timestamp.TestTimestampToJulianDate.test_compare_2100(self)
pandas.tests.scalar.test_timestamp.TestTimestampToJulianDate.test_compare_hour01(self)
pandas.tests.scalar.test_timestamp.TestTimestampToJulianDate.test_compare_hour13(self)
pandas.tests.scalar.test_timestamp.TestTsUtil(object)
pandas.tests.scalar.test_timestamp.TestTsUtil.test_max_valid(self)
pandas.tests.scalar.test_timestamp.TestTsUtil.test_min_valid(self)
pandas.tests.scalar.test_timestamp.TestTsUtil.test_to_datetime_bijective(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/util/test_util.py----------------------------------------
A:pandas.tests.util.test_util.CURRENT_LOCALE->locale.getlocale()
A:pandas.tests.util.test_util.LOCALE_OVERRIDE->os.environ.get('LOCALE_OVERRIDE', None)
A:pandas.tests.util.test_util.result->self.f3(old=x)
A:pandas.tests.util.test_util.r->pandas.util.testing.rands(10)
A:pandas.tests.util.test_util.arr->pandas.util.testing.rands_array(7, size=(10, 10))
A:pandas.tests.util.test_util.msg->"{fname}\\(\\) got multiple values for keyword argument '{arg}'".format(fname=self.fname, arg='foo')
A:pandas.tests.util.test_util.compat_args->OrderedDict()
A:pandas.tests.util.test_util.kwargs->dict(f=None, b=1)
A:pandas.tests.util.test_util.as_stolen_buf->move_into_mutable_buffer(b[:-3])
A:pandas.tests.util.test_util.cls.locales->pandas.util.testing.get_locales()
A:pandas.tests.util.test_util.(lang, enc)->os.environ.get('LOCALE_OVERRIDE', None).split('.')
A:pandas.tests.util.test_util.(new_lang, new_enc)->normalized_locale.split('.')
A:pandas.tests.util.test_util.current_locale->locale.getlocale()
pandas.tests.util.test_util.TestDecorators(object)
pandas.tests.util.test_util.TestDecorators.setup_method(self,method)
pandas.tests.util.test_util.TestDecorators.test_bad_deprecate_kwarg(self)
pandas.tests.util.test_util.TestDecorators.test_callable_deprecate_kwarg(self)
pandas.tests.util.test_util.TestDecorators.test_deprecate_kwarg(self)
pandas.tests.util.test_util.TestDecorators.test_dict_deprecate_kwarg(self)
pandas.tests.util.test_util.TestDecorators.test_missing_deprecate_kwarg(self)
pandas.tests.util.test_util.TestLocaleUtils(object)
pandas.tests.util.test_util.TestLocaleUtils.setup_class(cls)
pandas.tests.util.test_util.TestLocaleUtils.teardown_class(cls)
pandas.tests.util.test_util.TestLocaleUtils.test_get_locales(self)
pandas.tests.util.test_util.TestLocaleUtils.test_get_locales_prefix(self)
pandas.tests.util.test_util.TestLocaleUtils.test_set_locale(self)
pandas.tests.util.test_util.TestMove(object)
pandas.tests.util.test_util.TestMove.test_cannot_create_instance_of_stolenbuffer(self)
pandas.tests.util.test_util.TestMove.test_exactly_one_ref(self)
pandas.tests.util.test_util.TestMove.test_interned(self)
pandas.tests.util.test_util.TestMove.test_more_than_one_ref(self)
pandas.tests.util.test_util.TestValidateArgs(object)
pandas.tests.util.test_util.TestValidateArgs.test_bad_arg_length_max_value_multiple(self)
pandas.tests.util.test_util.TestValidateArgs.test_bad_arg_length_max_value_single(self)
pandas.tests.util.test_util.TestValidateArgs.test_bad_min_fname_arg_count(self)
pandas.tests.util.test_util.TestValidateArgs.test_not_all_defaults(self)
pandas.tests.util.test_util.TestValidateArgs.test_validation(self)
pandas.tests.util.test_util.TestValidateKwargs(object)
pandas.tests.util.test_util.TestValidateKwargs.test_bad_kwarg(self)
pandas.tests.util.test_util.TestValidateKwargs.test_not_all_none(self)
pandas.tests.util.test_util.TestValidateKwargs.test_validate_bool_kwarg(self)
pandas.tests.util.test_util.TestValidateKwargs.test_validation(self)
pandas.tests.util.test_util.TestValidateKwargsAndArgs(object)
pandas.tests.util.test_util.TestValidateKwargsAndArgs.test_duplicate_argument(self)
pandas.tests.util.test_util.TestValidateKwargsAndArgs.test_invalid_total_length_max_length_multiple(self)
pandas.tests.util.test_util.TestValidateKwargsAndArgs.test_invalid_total_length_max_length_one(self)
pandas.tests.util.test_util.TestValidateKwargsAndArgs.test_no_args_with_kwargs(self)
pandas.tests.util.test_util.TestValidateKwargsAndArgs.test_validation(self)
pandas.tests.util.test_util.test_numpy_errstate_is_default()
pandas.tests.util.test_util.test_rands()
pandas.tests.util.test_util.test_rands_array()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/util/test_hashing.py----------------------------------------
A:pandas.tests.util.test_hashing.self.df->DataFrame({'i32': np.array([1, 2, 3] * 3, dtype='int32'), 'f32': np.array([None, 2.5, 3.5] * 3, dtype='float32'), 'cat': Series(['a', 'b', 'c'] * 3).astype('category'), 'obj': Series(['d', 'e', 'f'] * 3), 'bool': np.array([True, False, True] * 3), 'dt': Series(pd.date_range('20130101', periods=9)), 'dt_tz': Series(pd.date_range('20130101', periods=9, tz='US/Eastern')), 'td': Series(pd.timedelta_range('2000', periods=9))})
A:pandas.tests.util.test_hashing.result->hash_array(np.asarray(L, dtype=object), 'utf8')
A:pandas.tests.util.test_hashing.expected->hash_array(c, categorize=False)
A:pandas.tests.util.test_hashing.result1->hash_array(np.asarray(L[0:1], dtype=object), 'utf8')
A:pandas.tests.util.test_hashing.result2->hash_array(np.asarray(L[1:2], dtype=object), 'utf8')
A:pandas.tests.util.test_hashing.result3->hash_array(np.array([3, 4, 'All'], dtype=object))
A:pandas.tests.util.test_hashing.a->hash_pandas_object(obj, hash_key='9876543210123456')
A:pandas.tests.util.test_hashing.b->hash_pandas_object(obj, hash_key='9876543210123465')
A:pandas.tests.util.test_hashing.mi->MultiIndex(levels=[['b', 'd', 'a'], [1, 2, 3]], labels=[[0, 1, 0, 2], [2, 0, 0, 1]], names=['col1', 'col2'])
A:pandas.tests.util.test_hashing.recons->MultiIndex(levels=[['b', 'd', 'a'], [1, 2, 3]], labels=[[0, 1, 0, 2], [2, 0, 0, 1]], names=['col1', 'col2'])._sort_levels_monotonic()
A:pandas.tests.util.test_hashing.s2->s1.astype('category').cat.set_categories(s1)
A:pandas.tests.util.test_hashing.s3->s1.astype('category').cat.set_categories(s1).cat.set_categories(list(reversed(s1)))
A:pandas.tests.util.test_hashing.h1->hash_pandas_object(s1, categorize=categorize)
A:pandas.tests.util.test_hashing.h2->hash_pandas_object(s2, categorize=categorize)
A:pandas.tests.util.test_hashing.h3->hash_pandas_object(s3, categorize=categorize)
A:pandas.tests.util.test_hashing.c->pandas.Categorical.from_codes([-1, 0], categories=[pd.Timestamp('2012-01-01')])
A:pandas.tests.util.test_hashing.obj->numpy.array([1, 2, 3])
A:pandas.tests.util.test_hashing.s->pandas.util.testing.rands_array(length, 2)
A:pandas.tests.util.test_hashing.expected1->numpy.array([14963968704024874985], dtype=np.uint64)
A:pandas.tests.util.test_hashing.expected2->numpy.array([16428432627716348016], dtype=np.uint64)
pandas.tests.util.test_hashing.TestHashing(object)
pandas.tests.util.test_hashing.TestHashing.check_equal(self,obj,**kwargs)
pandas.tests.util.test_hashing.TestHashing.check_not_equal_with_index(self,obj)
pandas.tests.util.test_hashing.TestHashing.setup_method(self,method)
pandas.tests.util.test_hashing.TestHashing.test_alread_encoded(self)
pandas.tests.util.test_hashing.TestHashing.test_alternate_encoding(self)
pandas.tests.util.test_hashing.TestHashing.test_categorical_consistency(self)
pandas.tests.util.test_hashing.TestHashing.test_categorical_with_nan_consistency(self)
pandas.tests.util.test_hashing.TestHashing.test_consistency(self)
pandas.tests.util.test_hashing.TestHashing.test_hash_array(self)
pandas.tests.util.test_hashing.TestHashing.test_hash_array_errors(self)
pandas.tests.util.test_hashing.TestHashing.test_hash_array_mixed(self)
pandas.tests.util.test_hashing.TestHashing.test_hash_collisions(self)
pandas.tests.util.test_hashing.TestHashing.test_hash_keys(self)
pandas.tests.util.test_hashing.TestHashing.test_hash_pandas_empty_object(self)
pandas.tests.util.test_hashing.TestHashing.test_hash_pandas_object(self)
pandas.tests.util.test_hashing.TestHashing.test_hash_pandas_object2(self)
pandas.tests.util.test_hashing.TestHashing.test_hash_tuples(self)
pandas.tests.util.test_hashing.TestHashing.test_hash_tuples_err(self)
pandas.tests.util.test_hashing.TestHashing.test_invalid_key(self)
pandas.tests.util.test_hashing.TestHashing.test_multiindex_objects(self)
pandas.tests.util.test_hashing.TestHashing.test_multiindex_unique(self)
pandas.tests.util.test_hashing.TestHashing.test_pandas_errors(self)
pandas.tests.util.test_hashing.TestHashing.test_same_len_hash_collisions(self)
pandas.tests.util.test_hashing.test_deprecation()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/util/test_testing.py----------------------------------------
A:pandas.tests.util.test_testing.e->LookupError('error_text')
A:pandas.tests.util.test_testing.(_, _, traceback)->sys.exc_info()
A:pandas.tests.util.test_testing.a->pandas.Categorical([1, 2, 3, 4], ordered=False)
A:pandas.tests.util.test_testing.b->pandas.Categorical([1, 2, 3, 4], ordered=True)
A:pandas.tests.util.test_testing.c->pandas.Categorical([1, 2, 3, 4], ordered=False).view()
A:pandas.tests.util.test_testing.idx1->pandas.Index([1, 2, 3], name=np.nan)
A:pandas.tests.util.test_testing.idx2->pandas.Index([1, 2, 3], name=pd.NaT)
A:pandas.tests.util.test_testing.s1->Series([0.1235], dtype='float32')
A:pandas.tests.util.test_testing.s2->Series([0.1236], dtype='float32')
A:pandas.tests.util.test_testing.df1->pandas.DataFrame(columns=['col1', 'col2'])
A:pandas.tests.util.test_testing.df2->pandas.DataFrame(columns=['col1', 'col2'])
A:pandas.tests.util.test_testing.df1['col1']->df1['col1'].astype('int64').astype('int64')
A:pandas.tests.util.test_testing.locales->pandas.util.testing.get_locales()
pandas.tests.util.test_testing.TestAssertAlmostEqual(object)
pandas.tests.util.test_testing.TestAssertAlmostEqual._assert_almost_equal_both(self,a,b,**kwargs)
pandas.tests.util.test_testing.TestAssertAlmostEqual._assert_not_almost_equal_both(self,a,b,**kwargs)
pandas.tests.util.test_testing.TestAssertAlmostEqual.test_assert_almost_equal_dict_like_object(self)
pandas.tests.util.test_testing.TestAssertAlmostEqual.test_assert_almost_equal_dicts(self)
pandas.tests.util.test_testing.TestAssertAlmostEqual.test_assert_almost_equal_edge_case_ndarrays(self)
pandas.tests.util.test_testing.TestAssertAlmostEqual.test_assert_almost_equal_inf(self)
pandas.tests.util.test_testing.TestAssertAlmostEqual.test_assert_almost_equal_iterables(self)
pandas.tests.util.test_testing.TestAssertAlmostEqual.test_assert_almost_equal_null(self)
pandas.tests.util.test_testing.TestAssertAlmostEqual.test_assert_almost_equal_numbers(self)
pandas.tests.util.test_testing.TestAssertAlmostEqual.test_assert_almost_equal_numbers_with_mixed(self)
pandas.tests.util.test_testing.TestAssertAlmostEqual.test_assert_almost_equal_numbers_with_zeros(self)
pandas.tests.util.test_testing.TestAssertAlmostEqual.test_assert_almost_equal_object(self)
pandas.tests.util.test_testing.TestAssertAlmostEqual.test_assert_almost_equal_pandas(self)
pandas.tests.util.test_testing.TestAssertAlmostEqual.test_assert_almost_equal_strings(self)
pandas.tests.util.test_testing.TestAssertCategoricalEqual(object)
pandas.tests.util.test_testing.TestAssertCategoricalEqual.test_categorical_equal_message(self)
pandas.tests.util.test_testing.TestAssertFrameEqual(object)
pandas.tests.util.test_testing.TestAssertFrameEqual._assert_equal(self,x,y,**kwargs)
pandas.tests.util.test_testing.TestAssertFrameEqual._assert_not_equal(self,a,b,**kwargs)
pandas.tests.util.test_testing.TestAssertFrameEqual.test_empty_dtypes(self)
pandas.tests.util.test_testing.TestAssertFrameEqual.test_equal_with_different_row_order(self)
pandas.tests.util.test_testing.TestAssertFrameEqual.test_frame_equal_message(self)
pandas.tests.util.test_testing.TestAssertFrameEqual.test_index_dtype(self)
pandas.tests.util.test_testing.TestAssertFrameEqual.test_multiindex_dtype(self)
pandas.tests.util.test_testing.TestAssertFrameEqual.test_not_equal_with_different_shape(self)
pandas.tests.util.test_testing.TestAssertIndexEqual(object)
pandas.tests.util.test_testing.TestAssertIndexEqual.test_index_equal_message(self)
pandas.tests.util.test_testing.TestAssertIndexEqual.test_index_equal_metadata_message(self)
pandas.tests.util.test_testing.TestAssertNumpyArrayEqual(object)
pandas.tests.util.test_testing.TestAssertNumpyArrayEqual.test_assert_almost_equal_iterable_message(self)
pandas.tests.util.test_testing.TestAssertNumpyArrayEqual.test_numpy_array_equal_copy_flag(self)
pandas.tests.util.test_testing.TestAssertNumpyArrayEqual.test_numpy_array_equal_message(self)
pandas.tests.util.test_testing.TestAssertNumpyArrayEqual.test_numpy_array_equal_object_message(self)
pandas.tests.util.test_testing.TestAssertSeriesEqual(object)
pandas.tests.util.test_testing.TestAssertSeriesEqual._assert_equal(self,x,y,**kwargs)
pandas.tests.util.test_testing.TestAssertSeriesEqual._assert_not_equal(self,a,b,**kwargs)
pandas.tests.util.test_testing.TestAssertSeriesEqual.test_equal(self)
pandas.tests.util.test_testing.TestAssertSeriesEqual.test_index_dtype(self)
pandas.tests.util.test_testing.TestAssertSeriesEqual.test_less_precise(self)
pandas.tests.util.test_testing.TestAssertSeriesEqual.test_multiindex_dtype(self)
pandas.tests.util.test_testing.TestAssertSeriesEqual.test_not_equal(self)
pandas.tests.util.test_testing.TestAssertSeriesEqual.test_series_equal_message(self)
pandas.tests.util.test_testing.TestLocale(object)
pandas.tests.util.test_testing.TestLocale.test_locale(self)
pandas.tests.util.test_testing.TestRNGContext(object)
pandas.tests.util.test_testing.TestRNGContext.test_RNGContext(self)
pandas.tests.util.test_testing.TestUtilTesting(object)
pandas.tests.util.test_testing.TestUtilTesting.test_raise_with_traceback(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/util/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/test_html.py----------------------------------------
A:pandas.tests.io.test_html.DATA_PATH->pandas.util.testing.get_data_path()
A:pandas.tests.io.test_html.both_frames->all(map(lambda x, y: isinstance(x, DataFrame) and isinstance(y, DataFrame), list1, list2))
A:pandas.tests.io.test_html.spam_data->os.path.join(DATA_PATH, 'spam.html')
A:pandas.tests.io.test_html.banklist_data->os.path.join(DATA_PATH, 'banklist.html')
A:pandas.tests.io.test_html.df->DataFrame({'date': raw_dates.map(lambda x: str(x.date())), 'time': raw_dates.map(lambda x: str(x.time()))})
A:pandas.tests.io.test_html.out->DataFrame({'date': raw_dates.map(lambda x: str(x.date())), 'time': raw_dates.map(lambda x: str(x.time()))}).to_html()
A:pandas.tests.io.test_html.df1->self.read_html(f, '.*Water.*')
A:pandas.tests.io.test_html.df2->self.read_html(f, 'Unit')
A:pandas.tests.io.test_html.dfs->self.read_html(filename, index_col=0)
A:pandas.tests.io.test_html.data1->StringIO('<table>\n            <thead>\n                <tr>\n                    <th>Country</th>\n                    <th>Municipality</th>\n                    <th>Year</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>Ukraine</td>\n                    <th>Odessa</th>\n                    <td>1944</td>\n                </tr>\n            </tbody>\n        </table>')
A:pandas.tests.io.test_html.data2->StringIO('\n        <table>\n            <tbody>\n                <tr>\n                    <th>Country</th>\n                    <th>Municipality</th>\n                    <th>Year</th>\n                </tr>\n                <tr>\n                    <td>Ukraine</td>\n                    <th>Odessa</th>\n                    <td>1944</td>\n                </tr>\n            </tbody>\n        </table>')
A:pandas.tests.io.test_html.data->os.path.join(DATA_PATH, 'computer_sales_page.html')
A:pandas.tests.io.test_html.macau_data->os.path.join(DATA_PATH, 'macau.html')
A:pandas.tests.io.test_html.res1->self.read_html(data1)
A:pandas.tests.io.test_html.res2->self.read_html(data2, header=0)
A:pandas.tests.io.test_html.expected->DataFrame({'date': raw_dates.map(lambda x: str(x.date())), 'time': raw_dates.map(lambda x: str(x.time()))}).to_html()
A:pandas.tests.io.test_html.columns->Index(['Issue(Roll over for charts and headlines)', 'Volume', 'Price', 'Chg', '% Chg'])
A:pandas.tests.io.test_html.ground_truth->read_csv(os.path.join(DATA_PATH, 'banklist.csv'), converters={'Updated Date': Timestamp, 'Closing Date': Timestamp})
A:pandas.tests.io.test_html.dfnew->DataFrame({'date': raw_dates.map(lambda x: str(x.date())), 'time': raw_dates.map(lambda x: str(x.time()))}).applymap(try_remove_ws).replace(old, new)
A:pandas.tests.io.test_html.gtnew->read_csv(os.path.join(DATA_PATH, 'banklist.csv'), converters={'Updated Date': Timestamp, 'Closing Date': Timestamp}).applymap(try_remove_ws)
A:pandas.tests.io.test_html.converted->DataFrame({'date': raw_dates.map(lambda x: str(x.date())), 'time': raw_dates.map(lambda x: str(x.time()))}).applymap(try_remove_ws).replace(old, new)._convert(datetime=True, numeric=True)
A:pandas.tests.io.test_html.converted[date_cols]->converted[date_cols]._convert(datetime=True, coerce=True)._convert(datetime=True, coerce=True)
A:pandas.tests.io.test_html.raw_text->f.read()
A:pandas.tests.io.test_html.res->self.read_html(df.to_html(), parse_dates={'datetime': [1, 2]}, index_col=1)
A:pandas.tests.io.test_html.raw_dates->Series(date_range('1/1/2001', periods=10))
A:pandas.tests.io.test_html.newdf->DataFrame({'datetime': raw_dates})
A:pandas.tests.io.test_html.expected_df->DataFrame(data=[('Hillary', 68, 'D'), ('Bernie', 74, 'D'), ('Donald', 69, 'R')])
A:pandas.tests.io.test_html.html->DataFrame(data=[('Hillary', 68, 'D'), ('Bernie', 74, 'D'), ('Donald', 69, 'R')]).to_html(index=False)
A:pandas.tests.io.test_html.files->glob.glob(os.path.join(DATA_PATH, 'html_encoding', '*.html'))
A:pandas.tests.io.test_html.(_, encoding)->_lang_enc(f)
A:pandas.tests.io.test_html.from_string->self.read_string(f, encoding).pop()
A:pandas.tests.io.test_html.from_file_like->self.read_file_like(f, encoding).pop()
A:pandas.tests.io.test_html.from_filename->self.read_filename(f, encoding).pop()
A:pandas.tests.io.test_html.filename->os.path.join(DATA_PATH, 'valid_markup.html')
A:pandas.tests.io.test_html.url->file_path_to_url(url)
A:pandas.tests.io.test_html.soup->BeautifulSoup(f, features='html5lib')
A:pandas.tests.io.test_html.filepath->os.path.join(DATA_PATH, 'spam.html')
A:pandas.tests.io.test_html.doc->parse(url)
A:pandas.tests.io.test_html.dfs_lxml->read_html(filename, index_col=0, flavor=['lxml'])
A:pandas.tests.io.test_html.dfs_bs4->read_html(filename, index_col=0, flavor=['bs4'])
pandas.tests.io.test_html.ReadHtmlMixin(object)
pandas.tests.io.test_html.ReadHtmlMixin.read_html(self,*args,**kwargs)
pandas.tests.io.test_html.TestReadHtml(ReadHtmlMixin)
pandas.tests.io.test_html.TestReadHtml._bank_data(self,*args,**kwargs)
pandas.tests.io.test_html.TestReadHtml.setup_class(cls)
pandas.tests.io.test_html.TestReadHtml.test_bad_url_protocol(self)
pandas.tests.io.test_html.TestReadHtml.test_banklist(self)
pandas.tests.io.test_html.TestReadHtml.test_banklist_header(self)
pandas.tests.io.test_html.TestReadHtml.test_banklist_no_match(self)
pandas.tests.io.test_html.TestReadHtml.test_banklist_url(self)
pandas.tests.io.test_html.TestReadHtml.test_bool_header_arg(self)
pandas.tests.io.test_html.TestReadHtml.test_computer_sales_page(self)
pandas.tests.io.test_html.TestReadHtml.test_converters(self)
pandas.tests.io.test_html.TestReadHtml.test_countries_municipalities(self)
pandas.tests.io.test_html.TestReadHtml.test_decimal_rows(self)
pandas.tests.io.test_html.TestReadHtml.test_different_number_of_rows(self)
pandas.tests.io.test_html.TestReadHtml.test_empty_tables(self)
pandas.tests.io.test_html.TestReadHtml.test_file_like(self)
pandas.tests.io.test_html.TestReadHtml.test_file_url(self)
pandas.tests.io.test_html.TestReadHtml.test_gold_canyon(self)
pandas.tests.io.test_html.TestReadHtml.test_header_and_index_no_types(self)
pandas.tests.io.test_html.TestReadHtml.test_header_and_index_with_types(self)
pandas.tests.io.test_html.TestReadHtml.test_header_and_one_column(self)
pandas.tests.io.test_html.TestReadHtml.test_index(self)
pandas.tests.io.test_html.TestReadHtml.test_infer_types(self)
pandas.tests.io.test_html.TestReadHtml.test_invalid_table_attrs(self)
pandas.tests.io.test_html.TestReadHtml.test_invalid_url(self)
pandas.tests.io.test_html.TestReadHtml.test_keep_default_na(self)
pandas.tests.io.test_html.TestReadHtml.test_multiindex_header(self)
pandas.tests.io.test_html.TestReadHtml.test_multiindex_header_index(self)
pandas.tests.io.test_html.TestReadHtml.test_multiindex_header_index_skiprows(self)
pandas.tests.io.test_html.TestReadHtml.test_multiindex_header_skiprows(self)
pandas.tests.io.test_html.TestReadHtml.test_multiindex_header_skiprows_tuples(self)
pandas.tests.io.test_html.TestReadHtml.test_multiindex_index(self)
pandas.tests.io.test_html.TestReadHtml.test_multiple_header_rows(self)
pandas.tests.io.test_html.TestReadHtml.test_multiple_matches(self)
pandas.tests.io.test_html.TestReadHtml.test_na_values(self)
pandas.tests.io.test_html.TestReadHtml.test_negative_skiprows(self)
pandas.tests.io.test_html.TestReadHtml.test_nyse_wsj_commas_table(self)
pandas.tests.io.test_html.TestReadHtml.test_parse_dates_combine(self)
pandas.tests.io.test_html.TestReadHtml.test_parse_dates_list(self)
pandas.tests.io.test_html.TestReadHtml.test_python_docs_table(self)
pandas.tests.io.test_html.TestReadHtml.test_regex_idempotency(self)
pandas.tests.io.test_html.TestReadHtml.test_skiprows_int(self)
pandas.tests.io.test_html.TestReadHtml.test_skiprows_invalid(self)
pandas.tests.io.test_html.TestReadHtml.test_skiprows_list(self)
pandas.tests.io.test_html.TestReadHtml.test_skiprows_ndarray(self)
pandas.tests.io.test_html.TestReadHtml.test_skiprows_set(self)
pandas.tests.io.test_html.TestReadHtml.test_skiprows_slice(self)
pandas.tests.io.test_html.TestReadHtml.test_skiprows_slice_long(self)
pandas.tests.io.test_html.TestReadHtml.test_skiprows_slice_short(self)
pandas.tests.io.test_html.TestReadHtml.test_skiprows_xrange(self)
pandas.tests.io.test_html.TestReadHtml.test_spam_header(self)
pandas.tests.io.test_html.TestReadHtml.test_spam_no_match(self)
pandas.tests.io.test_html.TestReadHtml.test_spam_no_types(self)
pandas.tests.io.test_html.TestReadHtml.test_spam_url(self)
pandas.tests.io.test_html.TestReadHtml.test_spam_with_types(self)
pandas.tests.io.test_html.TestReadHtml.test_string(self)
pandas.tests.io.test_html.TestReadHtml.test_string_io(self)
pandas.tests.io.test_html.TestReadHtml.test_tfoot_read(self)
pandas.tests.io.test_html.TestReadHtml.test_thousands_macau_index_col(self)
pandas.tests.io.test_html.TestReadHtml.test_thousands_macau_stats(self)
pandas.tests.io.test_html.TestReadHtml.test_to_html_compat(self)
pandas.tests.io.test_html.TestReadHtml.test_wikipedia_states_table(self)
pandas.tests.io.test_html.TestReadHtmlEncoding(object)
pandas.tests.io.test_html.TestReadHtmlEncoding.read_file_like(self,f,encoding)
pandas.tests.io.test_html.TestReadHtmlEncoding.read_filename(self,f,encoding)
pandas.tests.io.test_html.TestReadHtmlEncoding.read_html(self,*args,**kwargs)
pandas.tests.io.test_html.TestReadHtmlEncoding.read_string(self,f,encoding)
pandas.tests.io.test_html.TestReadHtmlEncoding.setup_class(cls)
pandas.tests.io.test_html.TestReadHtmlEncoding.test_encode(self)
pandas.tests.io.test_html.TestReadHtmlEncodingLxml(TestReadHtmlEncoding)
pandas.tests.io.test_html.TestReadHtmlEncodingLxml.setup_class(cls)
pandas.tests.io.test_html.TestReadHtmlLxml(ReadHtmlMixin)
pandas.tests.io.test_html.TestReadHtmlLxml.setup_class(cls)
pandas.tests.io.test_html.TestReadHtmlLxml.test_computer_sales_page(self)
pandas.tests.io.test_html.TestReadHtmlLxml.test_data_fail(self)
pandas.tests.io.test_html.TestReadHtmlLxml.test_fallback_success(self)
pandas.tests.io.test_html.TestReadHtmlLxml.test_parse_dates_combine(self)
pandas.tests.io.test_html.TestReadHtmlLxml.test_parse_dates_list(self)
pandas.tests.io.test_html.TestReadHtmlLxml.test_works_on_valid_markup(self)
pandas.tests.io.test_html._have_module(module_name)
pandas.tests.io.test_html._lang_enc(filename)
pandas.tests.io.test_html._skip_if_no(module_name)
pandas.tests.io.test_html._skip_if_none_of(module_names)
pandas.tests.io.test_html.assert_framelist_equal(list1,list2,*args,**kwargs)
pandas.tests.io.test_html.get_elements_from_file(url,element='table')
pandas.tests.io.test_html.get_lxml_elements(url,element)
pandas.tests.io.test_html.test_bs4_finds_tables()
pandas.tests.io.test_html.test_bs4_version_fails()
pandas.tests.io.test_html.test_invalid_flavor()
pandas.tests.io.test_html.test_lxml_finds_tables()
pandas.tests.io.test_html.test_lxml_finds_tbody()
pandas.tests.io.test_html.test_same_ordering()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/test_stata.py----------------------------------------
A:pandas.tests.io.test_stata.self.dirpath->pandas.util.testing.get_data_path()
A:pandas.tests.io.test_stata.self.dta1_114->os.path.join(self.dirpath, 'stata1_114.dta')
A:pandas.tests.io.test_stata.self.dta1_117->os.path.join(self.dirpath, 'stata1_117.dta')
A:pandas.tests.io.test_stata.self.dta2_113->os.path.join(self.dirpath, 'stata2_113.dta')
A:pandas.tests.io.test_stata.self.dta2_114->os.path.join(self.dirpath, 'stata2_114.dta')
A:pandas.tests.io.test_stata.self.dta2_115->os.path.join(self.dirpath, 'stata2_115.dta')
A:pandas.tests.io.test_stata.self.dta2_117->os.path.join(self.dirpath, 'stata2_117.dta')
A:pandas.tests.io.test_stata.self.dta3_113->os.path.join(self.dirpath, 'stata3_113.dta')
A:pandas.tests.io.test_stata.self.dta3_114->os.path.join(self.dirpath, 'stata3_114.dta')
A:pandas.tests.io.test_stata.self.dta3_115->os.path.join(self.dirpath, 'stata3_115.dta')
A:pandas.tests.io.test_stata.self.dta3_117->os.path.join(self.dirpath, 'stata3_117.dta')
A:pandas.tests.io.test_stata.self.csv3->os.path.join(self.dirpath, 'stata3.csv')
A:pandas.tests.io.test_stata.self.dta4_113->os.path.join(self.dirpath, 'stata4_113.dta')
A:pandas.tests.io.test_stata.self.dta4_114->os.path.join(self.dirpath, 'stata4_114.dta')
A:pandas.tests.io.test_stata.self.dta4_115->os.path.join(self.dirpath, 'stata4_115.dta')
A:pandas.tests.io.test_stata.self.dta4_117->os.path.join(self.dirpath, 'stata4_117.dta')
A:pandas.tests.io.test_stata.self.dta_encoding->os.path.join(self.dirpath, 'stata1_encoding.dta')
A:pandas.tests.io.test_stata.self.csv14->os.path.join(self.dirpath, 'stata5.csv')
A:pandas.tests.io.test_stata.self.dta14_113->os.path.join(self.dirpath, 'stata5_113.dta')
A:pandas.tests.io.test_stata.self.dta14_114->os.path.join(self.dirpath, 'stata5_114.dta')
A:pandas.tests.io.test_stata.self.dta14_115->os.path.join(self.dirpath, 'stata5_115.dta')
A:pandas.tests.io.test_stata.self.dta14_117->os.path.join(self.dirpath, 'stata5_117.dta')
A:pandas.tests.io.test_stata.self.csv15->os.path.join(self.dirpath, 'stata6.csv')
A:pandas.tests.io.test_stata.self.dta15_113->os.path.join(self.dirpath, 'stata6_113.dta')
A:pandas.tests.io.test_stata.self.dta15_114->os.path.join(self.dirpath, 'stata6_114.dta')
A:pandas.tests.io.test_stata.self.dta15_115->os.path.join(self.dirpath, 'stata6_115.dta')
A:pandas.tests.io.test_stata.self.dta15_117->os.path.join(self.dirpath, 'stata6_117.dta')
A:pandas.tests.io.test_stata.self.dta16_115->os.path.join(self.dirpath, 'stata7_115.dta')
A:pandas.tests.io.test_stata.self.dta16_117->os.path.join(self.dirpath, 'stata7_117.dta')
A:pandas.tests.io.test_stata.self.dta17_113->os.path.join(self.dirpath, 'stata8_113.dta')
A:pandas.tests.io.test_stata.self.dta17_115->os.path.join(self.dirpath, 'stata8_115.dta')
A:pandas.tests.io.test_stata.self.dta17_117->os.path.join(self.dirpath, 'stata8_117.dta')
A:pandas.tests.io.test_stata.self.dta18_115->os.path.join(self.dirpath, 'stata9_115.dta')
A:pandas.tests.io.test_stata.self.dta18_117->os.path.join(self.dirpath, 'stata9_117.dta')
A:pandas.tests.io.test_stata.self.dta19_115->os.path.join(self.dirpath, 'stata10_115.dta')
A:pandas.tests.io.test_stata.self.dta19_117->os.path.join(self.dirpath, 'stata10_117.dta')
A:pandas.tests.io.test_stata.self.dta20_115->os.path.join(self.dirpath, 'stata11_115.dta')
A:pandas.tests.io.test_stata.self.dta20_117->os.path.join(self.dirpath, 'stata11_117.dta')
A:pandas.tests.io.test_stata.self.dta21_117->os.path.join(self.dirpath, 'stata12_117.dta')
A:pandas.tests.io.test_stata.self.dta22_118->os.path.join(self.dirpath, 'stata14_118.dta')
A:pandas.tests.io.test_stata.self.dta23->os.path.join(self.dirpath, 'stata15.dta')
A:pandas.tests.io.test_stata.self.dta24_111->os.path.join(self.dirpath, 'stata7_111.dta')
A:pandas.tests.io.test_stata.empty_ds->DataFrame(columns=['unit'])
A:pandas.tests.io.test_stata.empty_ds2->read_stata(path)
A:pandas.tests.io.test_stata.parsed_114_data->rdr.data()
A:pandas.tests.io.test_stata.parsed_114_read->rdr.read()
A:pandas.tests.io.test_stata.parsed_114->self.read_dta(self.dta15_114)
A:pandas.tests.io.test_stata.parsed_117->read_stata(self.dta19_117)
A:pandas.tests.io.test_stata.expected->pandas.Series(cat, name='srh')
A:pandas.tests.io.test_stata.expected['float_miss']->expected['float_miss'].astype(np.float32).astype(np.float32)
A:pandas.tests.io.test_stata.expected['yearly_date']->expected['yearly_date'].astype('O').astype('O')
A:pandas.tests.io.test_stata.parsed_115->read_stata(self.dta19_115)
A:pandas.tests.io.test_stata.parsed_113->read_stata(self.dta17_113, convert_missing=True)
A:pandas.tests.io.test_stata.expected['year']->expected['year'].astype(np.int16).astype(np.int16)
A:pandas.tests.io.test_stata.expected['quarter']->expected['quarter'].astype(np.int8).astype(np.int8)
A:pandas.tests.io.test_stata.parsed_118->self.read_dta(self.dta22_118)
A:pandas.tests.io.test_stata.parsed_118['Bytes']->parsed_118['Bytes'].astype('O').astype('O')
A:pandas.tests.io.test_stata.expected['Floats']->expected['Floats'].astype(np.float32).astype(np.float32)
A:pandas.tests.io.test_stata.vl->rdr.variable_labels()
A:pandas.tests.io.test_stata.original->self.read_csv(self.csv3)
A:pandas.tests.io.test_stata.written_and_read_again->self.read_dta(path)
A:pandas.tests.io.test_stata.original.index->self.read_csv(self.csv3).index.astype(np.int32)
A:pandas.tests.io.test_stata.original['year']->original['year'].astype(np.int32).astype(np.int32)
A:pandas.tests.io.test_stata.original['quarter']->original['quarter'].astype(np.int32).astype(np.int32)
A:pandas.tests.io.test_stata.original['object']->Series(original['object'], dtype=object)
A:pandas.tests.io.test_stata.original['integer']->original['integer'].astype(np.int32).astype(np.int32)
A:pandas.tests.io.test_stata.df->DataFrame({'ColumnOk': [0.0, np.finfo(np.double).eps, 4.49423283715579e+307], 'ColumnTooBig': [0.0, np.finfo(np.double).eps, np.finfo(np.double).max]})
A:pandas.tests.io.test_stata.df_copy->DataFrame({'ColumnOk': [0.0, np.finfo(np.double).eps, 4.49423283715579e+307], 'ColumnTooBig': [0.0, np.finfo(np.double).eps, np.finfo(np.double).max]}).copy()
A:pandas.tests.io.test_stata.raw->read_stata(self.dta_encoding)
A:pandas.tests.io.test_stata.encoded->read_stata(self.dta_encoding, encoding='latin-1')
A:pandas.tests.io.test_stata.reread_encoded->read_stata(path, encoding='latin-1')
A:pandas.tests.io.test_stata.formatted->formatted.astype(np.int32).astype(np.int32)
A:pandas.tests.io.test_stata.s1->Series([0, 1, 100], dtype=np.uint8)
A:pandas.tests.io.test_stata.s2->Series([0, 1, 255], dtype=np.uint8)
A:pandas.tests.io.test_stata.s3->Series([0, 1, 2 ** 15 - 100], dtype=np.uint16)
A:pandas.tests.io.test_stata.formatted['int64']->formatted['int64'].astype(np.float64).astype(np.float64)
A:pandas.tests.io.test_stata.expected[col]->expected[col]._convert(datetime=True, numeric=True)._convert(datetime=True, numeric=True)
A:pandas.tests.io.test_stata.expected['float_']->expected['float_'].astype(np.float32).astype(np.float32)
A:pandas.tests.io.test_stata.expected['date_td']->expected['date_td'].apply(datetime.strptime, args=('%Y-%m-%d',)).apply(datetime.strptime, args=('%Y-%m-%d',))
A:pandas.tests.io.test_stata.expected['byte_']->expected['byte_'].astype(np.int8).astype(np.int8)
A:pandas.tests.io.test_stata.expected['int_']->expected['int_'].astype(np.int16).astype(np.int16)
A:pandas.tests.io.test_stata.expected['long_']->expected['long_'].astype(np.int32).astype(np.int32)
A:pandas.tests.io.test_stata.expected['double_']->expected['double_'].astype(np.float64).astype(np.float64)
A:pandas.tests.io.test_stata.time_stamp->datetime(2000, 2, 29, 14, 21)
A:pandas.tests.io.test_stata.columns->list(written_and_read_again.columns)
A:pandas.tests.io.test_stata.written_and_read_again.columns->map(convert_col_name, columns)
A:pandas.tests.io.test_stata.s0->Series([0, 1, True], dtype=np.bool)
A:pandas.tests.io.test_stata.modified->self.read_csv(self.csv3).copy()
A:pandas.tests.io.test_stata.modified['s1']->Series(modified['s1'], dtype=np.int16)
A:pandas.tests.io.test_stata.modified['s2']->Series(modified['s2'], dtype=np.int32)
A:pandas.tests.io.test_stata.modified['s3']->Series(modified['s3'], dtype=np.float64)
A:pandas.tests.io.test_stata.dpath->os.path.join(self.dirpath, 'S4_EDUC1.dta')
A:pandas.tests.io.test_stata.df0->pandas.DataFrame(df0)
A:pandas.tests.io.test_stata.df0['clustnum']->df0['clustnum'].astype(np.int16).astype(np.int16)
A:pandas.tests.io.test_stata.df0['pri_schl']->df0['pri_schl'].astype(np.int8).astype(np.int8)
A:pandas.tests.io.test_stata.df0['psch_num']->df0['psch_num'].astype(np.int8).astype(np.int8)
A:pandas.tests.io.test_stata.df0['psch_dis']->df0['psch_dis'].astype(np.float32).astype(np.float32)
A:pandas.tests.io.test_stata.conversions->dict(((c, c) for c in columns))
A:pandas.tests.io.test_stata.s4->Series([0, 1, 2 ** 16 - 1], dtype=np.uint16)
A:pandas.tests.io.test_stata.s5->Series([0, 1, 2 ** 31 - 100], dtype=np.uint32)
A:pandas.tests.io.test_stata.s6->Series([0, 1, 2 ** 32 - 1], dtype=np.uint32)
A:pandas.tests.io.test_stata.expected[c]->expected[c].astype(t).astype(t)
A:pandas.tests.io.test_stata.sr_115->rdr.variable_labels()
A:pandas.tests.io.test_stata.sr_117->rdr.variable_labels()
A:pandas.tests.io.test_stata.s['s' + str(str_len)]->Series(['a' * str_len, 'b' * str_len, 'c' * str_len])
A:pandas.tests.io.test_stata.val->StataMissingValue(struct.unpack('<d', b'\x00\x00\x00\x00\x00\x1a\xe0\x7f')[0])
A:pandas.tests.io.test_stata.smv->StataMissingValue(101)
A:pandas.tests.io.test_stata.expected[2][2]->datetime(9999, 12, 24)
A:pandas.tests.io.test_stata.expected[2][3]->datetime(9999, 12, 1)
A:pandas.tests.io.test_stata.expected[2][4]->datetime(9999, 10, 1)
A:pandas.tests.io.test_stata.expected[2][5]->datetime(9999, 7, 1)
A:pandas.tests.io.test_stata.expected[4][2]->datetime(2262, 4, 16)
A:pandas.tests.io.test_stata.expected[4][3]expected[4][4]->datetime(2262, 4, 1)
A:pandas.tests.io.test_stata.expected[4][5]expected[4][6]->datetime(2262, 1, 1)
A:pandas.tests.io.test_stata.expected[5][2]expected[5][3]expected[5][4]->datetime(1677, 10, 1)
A:pandas.tests.io.test_stata.expected[5][5]expected[5][6]->datetime(1678, 1, 1)
A:pandas.tests.io.test_stata.date_conversion->dict(((c, c[-2:]) for c in columns))
A:pandas.tests.io.test_stata.no_conversion->read_stata(self.dta15_117, convert_dates=True)
A:pandas.tests.io.test_stata.conversion->read_stata(self.dta15_117, convert_dates=True, preserve_dtypes=False)
A:pandas.tests.io.test_stata.dropped->read_stata(self.dta15_117, convert_dates=True, columns=columns)
A:pandas.tests.io.test_stata.reordered->read_stata(self.dta15_117, convert_dates=True, columns=columns)
A:pandas.tests.io.test_stata.expected['incompletely_labeled']->expected['incompletely_labeled'].apply(str).apply(str)
A:pandas.tests.io.test_stata.expected['unlabeled']->expected['unlabeled'].apply(str).apply(str)
A:pandas.tests.io.test_stata.res->self.read_dta(path).set_index('index')
A:pandas.tests.io.test_stata.parsed_115.index->numpy.arange(parsed_115.shape[0])
A:pandas.tests.io.test_stata.parsed_117.index->numpy.arange(parsed_117.shape[0])
A:pandas.tests.io.test_stata.cat->pandas.Categorical.from_codes(codes=codes, categories=categories)
A:pandas.tests.io.test_stata.parsed_115_unordered->read_stata(self.dta19_115, order_categoricals=False)
A:pandas.tests.io.test_stata.parsed_117_unordered->read_stata(self.dta19_117, order_categoricals=False)
A:pandas.tests.io.test_stata.parsed->read_stata(fname, columns=columns)
A:pandas.tests.io.test_stata.itr->read_stata(fname, iterator=True, convert_dates=convert_dates, convert_categoricals=convert_categoricals)
A:pandas.tests.io.test_stata.chunk->read_stata(fname, iterator=True, convert_dates=convert_dates, convert_categoricals=convert_categoricals).read(chunksize, columns=columns)
A:pandas.tests.io.test_stata.from_chunks->pandas.concat(read_stata(fname, chunksize=4))
A:pandas.tests.io.test_stata.read_labels->sr.variable_labels()
A:pandas.tests.io.test_stata.reread->read_stata(path)
A:pandas.tests.io.test_stata.direct->read_stata(path, convert_dates=True)
A:pandas.tests.io.test_stata.dates->pandas.date_range('1-1-1990', periods=3, tz='Asia/Hong_Kong')
A:pandas.tests.io.test_stata.original[col]->original[col].astype(np.float32).astype(np.float32)
A:pandas.tests.io.test_stata.original['ColumnTooBig']->original['ColumnTooBig'].astype(np.float64).astype(np.float64)
pandas.tests.io.test_stata.TestStata(object)
pandas.tests.io.test_stata.TestStata.read_csv(self,file)
pandas.tests.io.test_stata.TestStata.read_dta(self,file)
pandas.tests.io.test_stata.TestStata.setup_method(self,method)
pandas.tests.io.test_stata.TestStata.test_105(self)
pandas.tests.io.test_stata.TestStata.test_big_dates(self)
pandas.tests.io.test_stata.TestStata.test_bool_uint(self)
pandas.tests.io.test_stata.TestStata.test_categorical_order(self)
pandas.tests.io.test_stata.TestStata.test_categorical_ordering(self)
pandas.tests.io.test_stata.TestStata.test_categorical_sorting(self)
pandas.tests.io.test_stata.TestStata.test_categorical_warnings_and_errors(self)
pandas.tests.io.test_stata.TestStata.test_categorical_with_stata_missing_values(self)
pandas.tests.io.test_stata.TestStata.test_categorical_writing(self)
pandas.tests.io.test_stata.TestStata.test_data_method(self)
pandas.tests.io.test_stata.TestStata.test_date_export_formats(self)
pandas.tests.io.test_stata.TestStata.test_dates_invalid_column(self)
pandas.tests.io.test_stata.TestStata.test_default_date_conversion(self)
pandas.tests.io.test_stata.TestStata.test_drop_column(self)
pandas.tests.io.test_stata.TestStata.test_dtype_conversion(self)
pandas.tests.io.test_stata.TestStata.test_encoding(self)
pandas.tests.io.test_stata.TestStata.test_excessively_long_string(self)
pandas.tests.io.test_stata.TestStata.test_invalid_encoding(self)
pandas.tests.io.test_stata.TestStata.test_iterator(self)
pandas.tests.io.test_stata.TestStata.test_large_value_conversion(self)
pandas.tests.io.test_stata.TestStata.test_minimal_size_col(self)
pandas.tests.io.test_stata.TestStata.test_missing_value_conversion(self)
pandas.tests.io.test_stata.TestStata.test_missing_value_generator(self)
pandas.tests.io.test_stata.TestStata.test_nan_to_missing_value(self)
pandas.tests.io.test_stata.TestStata.test_no_index(self)
pandas.tests.io.test_stata.TestStata.test_numeric_column_names(self)
pandas.tests.io.test_stata.TestStata.test_out_of_range_double(self)
pandas.tests.io.test_stata.TestStata.test_out_of_range_float(self)
pandas.tests.io.test_stata.TestStata.test_read_chunks_115(self)
pandas.tests.io.test_stata.TestStata.test_read_chunks_117(self)
pandas.tests.io.test_stata.TestStata.test_read_chunks_columns(self)
pandas.tests.io.test_stata.TestStata.test_read_dta1(self)
pandas.tests.io.test_stata.TestStata.test_read_dta12(self)
pandas.tests.io.test_stata.TestStata.test_read_dta18(self)
pandas.tests.io.test_stata.TestStata.test_read_dta2(self)
pandas.tests.io.test_stata.TestStata.test_read_dta3(self)
pandas.tests.io.test_stata.TestStata.test_read_dta4(self)
pandas.tests.io.test_stata.TestStata.test_read_empty_dta(self)
pandas.tests.io.test_stata.TestStata.test_read_write_dta10(self)
pandas.tests.io.test_stata.TestStata.test_read_write_dta11(self)
pandas.tests.io.test_stata.TestStata.test_read_write_dta12(self)
pandas.tests.io.test_stata.TestStata.test_read_write_dta13(self)
pandas.tests.io.test_stata.TestStata.test_read_write_dta5(self)
pandas.tests.io.test_stata.TestStata.test_read_write_reread_dta14(self)
pandas.tests.io.test_stata.TestStata.test_read_write_reread_dta15(self)
pandas.tests.io.test_stata.TestStata.test_repeated_column_labels(self)
pandas.tests.io.test_stata.TestStata.test_stata_111(self)
pandas.tests.io.test_stata.TestStata.test_stata_doc_examples(self)
pandas.tests.io.test_stata.TestStata.test_string_no_dates(self)
pandas.tests.io.test_stata.TestStata.test_timestamp_and_label(self)
pandas.tests.io.test_stata.TestStata.test_unsupported_datetype(self)
pandas.tests.io.test_stata.TestStata.test_unsupported_type(self)
pandas.tests.io.test_stata.TestStata.test_variable_labels(self)
pandas.tests.io.test_stata.TestStata.test_write_dta6(self)
pandas.tests.io.test_stata.TestStata.test_write_missing_strings(self)
pandas.tests.io.test_stata.TestStata.test_write_preserves_original(self)
pandas.tests.io.test_stata.TestStata.test_write_variable_label_errors(self)
pandas.tests.io.test_stata.TestStata.test_write_variable_labels(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/test_pytables.py----------------------------------------
A:pandas.tests.io.test_pytables.tables->pytest.importorskip('tables')
A:pandas.tests.io.test_pytables.path->create_tempfile(self.path)
A:pandas.tests.io.test_pytables.store->HDFStore(path)
A:pandas.tests.io.test_pytables.tbl['a']->pandas.util.testing.makeDataFrame()
A:pandas.tests.io.test_pytables.o->pandas.util.testing.makePanel()
A:pandas.tests.io.test_pytables.df->DataFrame({'A': range(len(i)), 'B': i}, index=i)
A:pandas.tests.io.test_pytables.result->HDFStore(path).select('df')
A:pandas.tests.io.test_pytables.store['a']->pandas.util.testing.makeTimeDataFrame()
A:pandas.tests.io.test_pytables.store['b']->pandas.util.testing.makeDataFrame()
A:pandas.tests.io.test_pytables.store['c']->pandas.util.testing.makeDataFrame()
A:pandas.tests.io.test_pytables.store['d']->pandas.util.testing.makePanel()
A:pandas.tests.io.test_pytables.store['foo/bar']->pandas.util.testing.makeDataFrame()
A:pandas.tests.io.test_pytables.expected->DataFrame(dict(A=Timestamp('20130102', tz='US/Eastern'), B=Timestamp('20130603', tz='CET')), index=range(5))
A:pandas.tests.io.test_pytables.df['timestamp1']->Timestamp('20010102')
A:pandas.tests.io.test_pytables.df['timestamp2']->Timestamp('20010103')
A:pandas.tests.io.test_pytables.df['datetime1']->datetime.datetime.date(2001, 1, 2)
A:pandas.tests.io.test_pytables.df['datetime2']->datetime.datetime.datetime(2001, 1, 3, 0, 0)
A:pandas.tests.io.test_pytables.s->Series(complex128, index=list('abcd'))
A:pandas.tests.io.test_pytables.store['node())']->pandas.util.testing.makeDataFrame()
A:pandas.tests.io.test_pytables.left->HDFStore(path).get('/a')
A:pandas.tests.io.test_pytables.ts->pandas.Timestamp('2014-01-01')
A:pandas.tests.io.test_pytables.index->MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'], ['one', 'two', 'three']], labels=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3], [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]], names=['foo', 'bar'])
A:pandas.tests.io.test_pytables.wp->pandas.util.testing.makePanel()
A:pandas.tests.io.test_pytables.p4d->Panel4D({'i': p, 'ii': p})
A:pandas.tests.io.test_pytables.p4d2->Panel4D({'i': p, 'ii': p}).copy()
A:pandas.tests.io.test_pytables.wp_append2->pandas.util.testing.makePanel().iloc[:, 10:, :].reindex(items=wp.items[::-1])
A:pandas.tests.io.test_pytables.uint_data->DataFrame({'u08': Series(np.random.randint(0, high=255, size=5), dtype=np.uint8), 'u16': Series(np.random.randint(0, high=65535, size=5), dtype=np.uint16), 'u32': Series(np.random.randint(0, high=2 ** 30, size=5), dtype=np.uint32), 'u64': Series([2 ** 58, 2 ** 59, 2 ** 60, 2 ** 61, 2 ** 62], dtype=np.uint64)}, index=np.arange(5))
A:pandas.tests.io.test_pytables.ss->Series(complex128, index=list('abcd')).to_sparse()
A:pandas.tests.io.test_pytables.ns->Series(np.arange(100))
A:pandas.tests.io.test_pytables.mi->HDFStore(path).select('mi')
A:pandas.tests.io.test_pytables.mi['B']->numpy.arange(len(mi))
A:pandas.tests.io.test_pytables.s.index->Series(complex128, index=list('abcd')).index.droplevel(2)
A:pandas.tests.io.test_pytables.df.index->timedelta_range(start='0s', periods=10, freq='1s', name='example')
A:pandas.tests.io.test_pytables.retr->read_hdf(store, key)
A:pandas.tests.io.test_pytables.s_nan->Series(complex128, index=list('abcd')).replace(nan_rep, np.nan)
A:pandas.tests.io.test_pytables.df1->HDFStore(path).select('df1')
A:pandas.tests.io.test_pytables.df2->DataFrame({'A': range(len(i)), 'B': i}, index=i).copy()
A:pandas.tests.io.test_pytables.df3->DataFrame({'A': range(len(i)), 'B': i}, index=i).copy()
A:pandas.tests.io.test_pytables.df_with_missing->DataFrame({'col1': [0, np.nan, 2], 'col2': [1, np.nan, np.nan]})
A:pandas.tests.io.test_pytables.reloaded->read_hdf(path, 'df_with_missing')
A:pandas.tests.io.test_pytables.panel_with_missing->Panel(matrix, items=['Item1', 'Item2', 'Item3'], major_axis=[1, 2], minor_axis=['A', 'B', 'C'])
A:pandas.tests.io.test_pytables.reloaded_panel->read_hdf(path, 'panel_with_missing')
A:pandas.tests.io.test_pytables.df['index']->range(10)
A:pandas.tests.io.test_pytables.df['int64']->Series([1] * len(df), dtype='int64')
A:pandas.tests.io.test_pytables.df['int16']->Series([1] * len(df), dtype='int16')
A:pandas.tests.io.test_pytables.a->DataFrame({'A': range(len(i)), 'B': i}, index=i).pop('A')
A:pandas.tests.io.test_pytables.df['int16_2']->Series([1] * len(df), dtype='int16')
A:pandas.tests.io.test_pytables.df['float_3']->Series([1.0] * len(df), dtype='float64')
A:pandas.tests.io.test_pytables.wp2->pandas.util.testing.makePanel().rename_axis(dict([(x, '%s_extra' % x) for x in wp.minor_axis]), axis=2)
A:pandas.tests.io.test_pytables.df_new->DataFrame({'A': range(len(i)), 'B': i}, index=i).copy()
A:pandas.tests.io.test_pytables.sl->DataFrame({'A': range(len(i)), 'B': i}, index=i).copy().columns.get_loc('string2')
A:pandas.tests.io.test_pytables.df_dc->DataFrame(np.random.randn(8, 3), index=index, columns=['A', 'B', 'C'])
A:pandas.tests.io.test_pytables.df_dc['datetime']->Timestamp('20010102')
A:pandas.tests.io.test_pytables.df_dc.loc[:, ['B', 'C']]->DataFrame(np.random.randn(8, 3), index=index, columns=['A', 'B', 'C']).loc[:, ['B', 'C']].abs()
A:pandas.tests.io.test_pytables.p->Panel({'One': df, 'Two': df})
A:pandas.tests.io.test_pytables.expected.index->Int64Index(expected.index)
A:pandas.tests.io.test_pytables.xp->Series(np.zeros(12), index=make_index(['date', 'level_1', 'level_2']))
A:pandas.tests.io.test_pytables.idx->pandas.util.testing.makePeriodIndex(10)
A:pandas.tests.io.test_pytables.actual->read_hdf(path_obj, 'df')
A:pandas.tests.io.test_pytables.df['float322']->df['float322'].astype('float32').astype('float32')
A:pandas.tests.io.test_pytables.df['time1']->Timestamp('20130101')
A:pandas.tests.io.test_pytables.df['time2']->Timestamp('20130102')
A:pandas.tests.io.test_pytables.df_empty->DataFrame(columns=list('ABC'))
A:pandas.tests.io.test_pytables.p_empty->Panel(items=list('ABC'))
A:pandas.tests.io.test_pytables.df1['float322']->df1['float322'].astype('float32').astype('float32')
A:pandas.tests.io.test_pytables.df1['time1']->Timestamp('20130101')
A:pandas.tests.io.test_pytables.df1['time2']->Timestamp('20130102')
A:pandas.tests.io.test_pytables.bday_egypt->pandas.offsets.CustomBusinessDay(holidays=holidays, weekmask=weekmask_egypt)
A:pandas.tests.io.test_pytables.dt->datetime.datetime.datetime(2012, 1, 2, 3, 4, 5, 123456)
A:pandas.tests.io.test_pytables.dts->date_range(dt, periods=5, freq=bday_egypt)
A:pandas.tests.io.test_pytables.rs->HDFStore(path).select('wp')
A:pandas.tests.io.test_pytables.n->HDFStore(path).remove('wp4', where='major_axis>wp.major_axis[-1]')
A:pandas.tests.io.test_pytables.date->pandas.util.testing.makePanel().major_axis.take(np.arange(0, 30, 3))
A:pandas.tests.io.test_pytables.date4->pandas.util.testing.makePanel().major_axis.take([0, 1, 2, 4, 5, 6, 8, 9, 10])
A:pandas.tests.io.test_pytables.dfq->DataFrame(np.random.randn(10, 4), columns=list('ABCD'), index=date_range('20130101', periods=10))
A:pandas.tests.io.test_pytables.wpneg->pandas.Panel.fromDict({-1: tm.makeDataFrame(), 0: tm.makeDataFrame(), 1: tm.makeDataFrame()})
A:pandas.tests.io.test_pytables.res->HDFStore(path).select('wpneg', 'items == -1')
A:pandas.tests.io.test_pytables.ts2->Series(ts.index, Index(ts.index, dtype=object))
A:pandas.tests.io.test_pytables.ts3->Series(ts.values, Index(np.asarray(ts.index, dtype=object), dtype=object))
A:pandas.tests.io.test_pytables.ss2->Series(complex128, index=list('abcd')).to_sparse(kind='integer')
A:pandas.tests.io.test_pytables.ss3->Series(complex128, index=list('abcd')).to_sparse(fill_value=0)
A:pandas.tests.io.test_pytables.col->numpy.arange(10)
A:pandas.tests.io.test_pytables.data->numpy.random.randn(30).reshape((3, 10))
A:pandas.tests.io.test_pytables.DF->DataFrame(data, index=idx, columns=col)
A:pandas.tests.io.test_pytables.values->numpy.random.randn(2)
A:pandas.tests.io.test_pytables.ser->Series(np.random.randn(len(idx)), idx)
A:pandas.tests.io.test_pytables.dr->bdate_range('1/1/1940', '1/1/1960')
A:pandas.tests.io.test_pytables.tdf->pandas.util.testing.makeTimeDataFrame()
A:pandas.tests.io.test_pytables.df['foo']->numpy.random.randn(len(df))
A:pandas.tests.io.test_pytables.s0->Series()
A:pandas.tests.io.test_pytables.s1->Series(name='myseries')
A:pandas.tests.io.test_pytables.df0->DataFrame()
A:pandas.tests.io.test_pytables.frame->DataFrame(np.random.randn(len(rng), 4), index=rng)
A:pandas.tests.io.test_pytables.arr->numpy.random.binomial(n=1, p=0.01, size=(1000, 10))
A:pandas.tests.io.test_pytables.df[0]->numpy.zeros(1000)
A:pandas.tests.io.test_pytables.df['cols']->(df['cols'] + 10).apply(str)
A:pandas.tests.io.test_pytables.np_zero->numpy.float64(0)
A:pandas.tests.io.test_pytables.selector->Index(df.ts[0:100].values)
A:pandas.tests.io.test_pytables.chunksize->int(10000.0)
A:pandas.tests.io.test_pytables.idx2->date_range('2001-1-1', periods=3, freq='H')
A:pandas.tests.io.test_pytables.crit1->Term('index>=date')
A:pandas.tests.io.test_pytables.parms->DataFrame({'A': [1, 1, 2, 2, 3]})
A:pandas.tests.io.test_pytables.selection->date_range('20000101', periods=500)
A:pandas.tests.io.test_pytables.hist->DataFrame(np.random.randn(25, 1), columns=['data'], index=MultiIndex.from_tuples([(i, j) for i in range(5) for j in range(5)], names=['l1', 'l2']))
A:pandas.tests.io.test_pytables.l->date_range('20000101', periods=500).index.tolist()
A:pandas.tests.io.test_pytables.df4->DataFrame({('1', 2): np.random.randn(10)})
A:pandas.tests.io.test_pytables.c->HDFStore(path).select_column('df', 'index')
A:pandas.tests.io.test_pytables.df1_result->HDFStore(path).select('df1', c)
A:pandas.tests.io.test_pytables.df2_result->HDFStore(path).select('df2', c)
A:pandas.tests.io.test_pytables.dfs->DataFrame({'A': range(len(i)), 'B': i}, index=i).to_sparse()
A:pandas.tests.io.test_pytables.store1->HDFStore(path)
A:pandas.tests.io.test_pytables.store2->HDFStore(path)
A:pandas.tests.io.test_pytables.f->pandas.util.testing.get_data_path(os.path.join('legacy_hdf', 'legacy_0.10.h5'))
A:pandas.tests.io.test_pytables.(fd, new_f)->tempfile.mkstemp()
A:pandas.tests.io.test_pytables.tstore->HDFStore(path).copy(new_f, keys=keys, propindexes=propindexes, **kwargs)
A:pandas.tests.io.test_pytables.keys->HDFStore(path).keys()
A:pandas.tests.io.test_pytables.new_t->HDFStore(path).copy(new_f, keys=keys, propindexes=propindexes, **kwargs).get_storer(k)
A:pandas.tests.io.test_pytables.orig_t->HDFStore(path).get_storer(k)
A:pandas.tests.io.test_pytables.st->HDFStore(path)
A:pandas.tests.io.test_pytables.series->Series([0], [dt])
A:pandas.tests.io.test_pytables.df5->DataFrame({('1', 2, object): np.random.randn(10)})
A:pandas.tests.io.test_pytables.df2['s2']->Series(list('abcdefg')).astype('category')
A:pandas.tests.io.test_pytables.df.obsids->DataFrame({'A': range(len(i)), 'B': i}, index=i).obsids.astype('category')
A:pandas.tests.io.test_pytables.df.imgids->DataFrame({'A': range(len(i)), 'B': i}, index=i).imgids.astype('category')
A:pandas.tests.io.test_pytables.other->read_hdf(path, 'df')
A:pandas.tests.io.test_pytables.cols2load->list('BCD')
A:pandas.tests.io.test_pytables.cols2load_original->list(cols2load)
A:pandas.tests.io.test_pytables.df_loaded->read_hdf(path, 'df', columns=cols2load)
A:pandas.tests.io.test_pytables.direct->read_hdf(path, 'df')
A:pandas.tests.io.test_pytables.indirect->next(iterator.__iter__())
A:pandas.tests.io.test_pytables.iterator->read_hdf(path, 'df', iterator=True)
A:pandas.tests.io.test_pytables.reread->read_hdf(path, 'obj')
A:pandas.tests.io.test_pytables.path_obj->LocalPath(filename)
A:pandas.tests.io.test_pytables.query->'{col} {op} v'.format(op=op, col=col)
A:pandas.tests.io.test_pytables.complex64->numpy.array([1.0 + 1j, 1.0 + 1j, 1.0 + 1j, 1.0 + 1j], dtype=np.complex64)
A:pandas.tests.io.test_pytables.complex128->numpy.array([1.0 + 1j, 1.0 + 1j, 1.0 + 1j, 1.0 + 1j])
A:pandas.tests.io.test_pytables.rng->date_range('1/1/2000 00:00:00-07:00', '1/30/2000 00:00:00-07:00')
A:pandas.tests.io.test_pytables.today->datetime.datetime.date(2013, 9, 10)
A:pandas.tests.io.test_pytables.times->pandas.date_range('2013-10-26 23:00', '2013-10-27 01:00', tz='Europe/London', freq='H', ambiguous='infer')
pandas.tests.io.test_pytables.Base(object)
pandas.tests.io.test_pytables.Base.setup_class(cls)
pandas.tests.io.test_pytables.Base.setup_method(self,method)
pandas.tests.io.test_pytables.Base.teardown_class(cls)
pandas.tests.io.test_pytables.Base.teardown_method(self,method)
pandas.tests.io.test_pytables.TestHDFComplexValues(Base)
pandas.tests.io.test_pytables.TestHDFComplexValues.test_complex_across_dimensions(self)
pandas.tests.io.test_pytables.TestHDFComplexValues.test_complex_across_dimensions_fixed(self)
pandas.tests.io.test_pytables.TestHDFComplexValues.test_complex_append(self)
pandas.tests.io.test_pytables.TestHDFComplexValues.test_complex_fixed(self)
pandas.tests.io.test_pytables.TestHDFComplexValues.test_complex_indexing_error(self)
pandas.tests.io.test_pytables.TestHDFComplexValues.test_complex_mixed_fixed(self)
pandas.tests.io.test_pytables.TestHDFComplexValues.test_complex_mixed_table(self)
pandas.tests.io.test_pytables.TestHDFComplexValues.test_complex_series_error(self)
pandas.tests.io.test_pytables.TestHDFComplexValues.test_complex_table(self)
pandas.tests.io.test_pytables.TestHDFStore(Base)
pandas.tests.io.test_pytables.TestHDFStore._check_double_roundtrip(self,obj,comparator,compression=False,**kwargs)
pandas.tests.io.test_pytables.TestHDFStore._check_roundtrip(self,obj,comparator,compression=False,**kwargs)
pandas.tests.io.test_pytables.TestHDFStore._check_roundtrip_table(self,obj,comparator,compression=False)
pandas.tests.io.test_pytables.TestHDFStore.test_api(self)
pandas.tests.io.test_pytables.TestHDFStore.test_api_default_format(self)
pandas.tests.io.test_pytables.TestHDFStore.test_append(self)
pandas.tests.io.test_pytables.TestHDFStore.test_append_all_nans(self)
pandas.tests.io.test_pytables.TestHDFStore.test_append_diff_item_order(self)
pandas.tests.io.test_pytables.TestHDFStore.test_append_frame_column_oriented(self)
pandas.tests.io.test_pytables.TestHDFStore.test_append_hierarchical(self)
pandas.tests.io.test_pytables.TestHDFStore.test_append_misc(self)
pandas.tests.io.test_pytables.TestHDFStore.test_append_raise(self)
pandas.tests.io.test_pytables.TestHDFStore.test_append_series(self)
pandas.tests.io.test_pytables.TestHDFStore.test_append_some_nans(self)
pandas.tests.io.test_pytables.TestHDFStore.test_append_to_multiple(self)
pandas.tests.io.test_pytables.TestHDFStore.test_append_to_multiple_dropna(self)
pandas.tests.io.test_pytables.TestHDFStore.test_append_to_multiple_dropna_false(self)
pandas.tests.io.test_pytables.TestHDFStore.test_append_with_data_columns(self)
pandas.tests.io.test_pytables.TestHDFStore.test_append_with_diff_col_name_types_raises_value_error(self)
pandas.tests.io.test_pytables.TestHDFStore.test_append_with_different_block_ordering(self)
pandas.tests.io.test_pytables.TestHDFStore.test_append_with_strings(self)
pandas.tests.io.test_pytables.TestHDFStore.test_append_with_timedelta(self)
pandas.tests.io.test_pytables.TestHDFStore.test_calendar_roundtrip_issue(self)
pandas.tests.io.test_pytables.TestHDFStore.test_can_serialize_dates(self)
pandas.tests.io.test_pytables.TestHDFStore.test_categorical(self)
pandas.tests.io.test_pytables.TestHDFStore.test_categorical_conversion(self)
pandas.tests.io.test_pytables.TestHDFStore.test_column_multiindex(self)
pandas.tests.io.test_pytables.TestHDFStore.test_colums_multiindex_modified(self)
pandas.tests.io.test_pytables.TestHDFStore.test_contains(self)
pandas.tests.io.test_pytables.TestHDFStore.test_context(self)
pandas.tests.io.test_pytables.TestHDFStore.test_conv_read_write(self)
pandas.tests.io.test_pytables.TestHDFStore.test_coordinates(self)
pandas.tests.io.test_pytables.TestHDFStore.test_copy(self)
pandas.tests.io.test_pytables.TestHDFStore.test_create_table_index(self)
pandas.tests.io.test_pytables.TestHDFStore.test_duplicate_column_name(self)
pandas.tests.io.test_pytables.TestHDFStore.test_empty_series(self)
pandas.tests.io.test_pytables.TestHDFStore.test_empty_series_frame(self)
pandas.tests.io.test_pytables.TestHDFStore.test_encoding(self)
pandas.tests.io.test_pytables.TestHDFStore.test_factory_fun(self)
pandas.tests.io.test_pytables.TestHDFStore.test_float_index(self)
pandas.tests.io.test_pytables.TestHDFStore.test_flush(self)
pandas.tests.io.test_pytables.TestHDFStore.test_frame(self)
pandas.tests.io.test_pytables.TestHDFStore.test_frame_select(self)
pandas.tests.io.test_pytables.TestHDFStore.test_frame_select_complex(self)
pandas.tests.io.test_pytables.TestHDFStore.test_frame_select_complex2(self)
pandas.tests.io.test_pytables.TestHDFStore.test_get(self)
pandas.tests.io.test_pytables.TestHDFStore.test_getattr(self)
pandas.tests.io.test_pytables.TestHDFStore.test_index_types(self)
pandas.tests.io.test_pytables.TestHDFStore.test_invalid_complib(self)
pandas.tests.io.test_pytables.TestHDFStore.test_invalid_filtering(self)
pandas.tests.io.test_pytables.TestHDFStore.test_invalid_terms(self)
pandas.tests.io.test_pytables.TestHDFStore.test_iter_empty(self)
pandas.tests.io.test_pytables.TestHDFStore.test_keys(self)
pandas.tests.io.test_pytables.TestHDFStore.test_latin_encoding(self)
pandas.tests.io.test_pytables.TestHDFStore.test_legacy_0_10_read(self)
pandas.tests.io.test_pytables.TestHDFStore.test_legacy_0_11_read(self)
pandas.tests.io.test_pytables.TestHDFStore.test_legacy_table_read(self)
pandas.tests.io.test_pytables.TestHDFStore.test_legacy_table_write(self)
pandas.tests.io.test_pytables.TestHDFStore.test_long(self)
pandas.tests.io.test_pytables.TestHDFStore.test_long_strings(self)
pandas.tests.io.test_pytables.TestHDFStore.test_longpanel(self)
pandas.tests.io.test_pytables.TestHDFStore.test_mi_data_columns(self)
pandas.tests.io.test_pytables.TestHDFStore.test_mode(self)
pandas.tests.io.test_pytables.TestHDFStore.test_multiple_open_close(self)
pandas.tests.io.test_pytables.TestHDFStore.test_nan_selection_bug_4858(self)
pandas.tests.io.test_pytables.TestHDFStore.test_ndim_indexables(self)
pandas.tests.io.test_pytables.TestHDFStore.test_open_args(self)
pandas.tests.io.test_pytables.TestHDFStore.test_overwrite_node(self)
pandas.tests.io.test_pytables.TestHDFStore.test_panel_select(self)
pandas.tests.io.test_pytables.TestHDFStore.test_pass_spec_to_storer(self)
pandas.tests.io.test_pytables.TestHDFStore.test_preserve_timedeltaindex_type(self)
pandas.tests.io.test_pytables.TestHDFStore.test_put(self)
pandas.tests.io.test_pytables.TestHDFStore.test_put_compression(self)
pandas.tests.io.test_pytables.TestHDFStore.test_put_compression_blosc(self)
pandas.tests.io.test_pytables.TestHDFStore.test_put_integer(self)
pandas.tests.io.test_pytables.TestHDFStore.test_put_mixed_type(self)
pandas.tests.io.test_pytables.TestHDFStore.test_put_string_index(self)
pandas.tests.io.test_pytables.TestHDFStore.test_pytables_native2_read(self)
pandas.tests.io.test_pytables.TestHDFStore.test_pytables_native_read(self)
pandas.tests.io.test_pytables.TestHDFStore.test_query_compare_column_type(self)
pandas.tests.io.test_pytables.TestHDFStore.test_query_long_float_literal(self)
pandas.tests.io.test_pytables.TestHDFStore.test_query_with_nested_special_character(self)
pandas.tests.io.test_pytables.TestHDFStore.test_read_column(self)
pandas.tests.io.test_pytables.TestHDFStore.test_read_from_pathlib_path(self)
pandas.tests.io.test_pytables.TestHDFStore.test_read_from_py_localpath(self)
pandas.tests.io.test_pytables.TestHDFStore.test_read_hdf_errors(self)
pandas.tests.io.test_pytables.TestHDFStore.test_read_hdf_iterator(self)
pandas.tests.io.test_pytables.TestHDFStore.test_read_hdf_open_store(self)
pandas.tests.io.test_pytables.TestHDFStore.test_read_nokey(self)
pandas.tests.io.test_pytables.TestHDFStore.test_read_nokey_empty(self)
pandas.tests.io.test_pytables.TestHDFStore.test_read_nokey_table(self)
pandas.tests.io.test_pytables.TestHDFStore.test_remove(self)
pandas.tests.io.test_pytables.TestHDFStore.test_remove_crit(self)
pandas.tests.io.test_pytables.TestHDFStore.test_remove_startstop(self)
pandas.tests.io.test_pytables.TestHDFStore.test_remove_where(self)
pandas.tests.io.test_pytables.TestHDFStore.test_reopen_handle(self)
pandas.tests.io.test_pytables.TestHDFStore.test_repr(self)
pandas.tests.io.test_pytables.TestHDFStore.test_retain_index_attributes(self)
pandas.tests.io.test_pytables.TestHDFStore.test_retain_index_attributes2(self)
pandas.tests.io.test_pytables.TestHDFStore.test_round_trip_equals(self)
pandas.tests.io.test_pytables.TestHDFStore.test_same_name_scoping(self)
pandas.tests.io.test_pytables.TestHDFStore.test_select(self)
pandas.tests.io.test_pytables.TestHDFStore.test_select_as_multiple(self)
pandas.tests.io.test_pytables.TestHDFStore.test_select_columns_in_where(self)
pandas.tests.io.test_pytables.TestHDFStore.test_select_dtypes(self)
pandas.tests.io.test_pytables.TestHDFStore.test_select_filter_corner(self)
pandas.tests.io.test_pytables.TestHDFStore.test_select_iterator(self)
pandas.tests.io.test_pytables.TestHDFStore.test_select_iterator_complete_8014(self)
pandas.tests.io.test_pytables.TestHDFStore.test_select_iterator_many_empty_frames(self)
pandas.tests.io.test_pytables.TestHDFStore.test_select_iterator_non_complete_8014(self)
pandas.tests.io.test_pytables.TestHDFStore.test_select_with_dups(self)
pandas.tests.io.test_pytables.TestHDFStore.test_select_with_many_inputs(self)
pandas.tests.io.test_pytables.TestHDFStore.test_series(self)
pandas.tests.io.test_pytables.TestHDFStore.test_sparse_frame(self)
pandas.tests.io.test_pytables.TestHDFStore.test_sparse_series(self)
pandas.tests.io.test_pytables.TestHDFStore.test_sparse_with_compression(self)
pandas.tests.io.test_pytables.TestHDFStore.test_start_stop_fixed(self)
pandas.tests.io.test_pytables.TestHDFStore.test_start_stop_table(self)
pandas.tests.io.test_pytables.TestHDFStore.test_store_datetime_fractional_secs(self)
pandas.tests.io.test_pytables.TestHDFStore.test_store_datetime_mixed(self)
pandas.tests.io.test_pytables.TestHDFStore.test_store_hierarchical(self)
pandas.tests.io.test_pytables.TestHDFStore.test_store_index_name(self)
pandas.tests.io.test_pytables.TestHDFStore.test_store_index_name_with_tz(self)
pandas.tests.io.test_pytables.TestHDFStore.test_store_index_types(self)
pandas.tests.io.test_pytables.TestHDFStore.test_store_mixed(self)
pandas.tests.io.test_pytables.TestHDFStore.test_store_multiindex(self)
pandas.tests.io.test_pytables.TestHDFStore.test_store_series_name(self)
pandas.tests.io.test_pytables.TestHDFStore.test_string_select(self)
pandas.tests.io.test_pytables.TestHDFStore.test_table_index_incompatible_dtypes(self)
pandas.tests.io.test_pytables.TestHDFStore.test_table_mixed_dtypes(self)
pandas.tests.io.test_pytables.TestHDFStore.test_table_values_dtypes_roundtrip(self)
pandas.tests.io.test_pytables.TestHDFStore.test_term_compat(self)
pandas.tests.io.test_pytables.TestHDFStore.test_terms(self)
pandas.tests.io.test_pytables.TestHDFStore.test_timeseries_preepoch(self)
pandas.tests.io.test_pytables.TestHDFStore.test_to_hdf_with_min_itemsize(self)
pandas.tests.io.test_pytables.TestHDFStore.test_to_hdf_with_object_column_names(self)
pandas.tests.io.test_pytables.TestHDFStore.test_tseries_indices_frame(self)
pandas.tests.io.test_pytables.TestHDFStore.test_tseries_indices_series(self)
pandas.tests.io.test_pytables.TestHDFStore.test_tuple_index(self)
pandas.tests.io.test_pytables.TestHDFStore.test_unicode_index(self)
pandas.tests.io.test_pytables.TestHDFStore.test_unicode_longer_encoded(self)
pandas.tests.io.test_pytables.TestHDFStore.test_unimplemented_dtypes_table_columns(self)
pandas.tests.io.test_pytables.TestHDFStore.test_versioning(self)
pandas.tests.io.test_pytables.TestHDFStore.test_wide(self)
pandas.tests.io.test_pytables.TestHDFStore.test_wide_table_dups(self)
pandas.tests.io.test_pytables.TestTimezones(Base)
pandas.tests.io.test_pytables.TestTimezones._compare_with_tz(self,a,b)
pandas.tests.io.test_pytables.TestTimezones.test_append_with_timezones_dateutil(self)
pandas.tests.io.test_pytables.TestTimezones.test_append_with_timezones_pytz(self)
pandas.tests.io.test_pytables.TestTimezones.test_dst_transitions(self)
pandas.tests.io.test_pytables.TestTimezones.test_fixed_offset_tz(self)
pandas.tests.io.test_pytables.TestTimezones.test_legacy_datetimetz_object(self)
pandas.tests.io.test_pytables.TestTimezones.test_store_timezone(self)
pandas.tests.io.test_pytables.TestTimezones.test_timezones_fixed(self)
pandas.tests.io.test_pytables.TestTimezones.test_tseries_select_index_column(self)
pandas.tests.io.test_pytables._maybe_remove(store,key)
pandas.tests.io.test_pytables.create_tempfile(path)
pandas.tests.io.test_pytables.ensure_clean_path(path)
pandas.tests.io.test_pytables.ensure_clean_store(path,mode='a',complevel=None,complib=None,fletcher32=False)
pandas.tests.io.test_pytables.safe_close(store)
pandas.tests.io.test_pytables.safe_remove(path)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/test_pickle.py----------------------------------------
A:pandas.tests.io.test_pickle.comparator->globals().get(comparator, m['compare_element'])
A:pandas.tests.io.test_pickle.data->compare(current_pickle_data, vf, version)
A:pandas.tests.io.test_pickle.m->globals()
A:pandas.tests.io.test_pickle.expected->expected.astype(object).astype(object)
A:pandas.tests.io.test_pickle.path->pandas.util.testing.get_data_path('legacy_pickle')
A:pandas.tests.io.test_pickle.p->os.path.join(path, v)
A:pandas.tests.io.test_pickle.pth->pandas.util.testing.get_data_path('legacy_pickle/{0}'.format(version))
A:pandas.tests.io.test_pickle.vf->os.path.join(pth, f)
A:pandas.tests.io.test_pickle.result->python_unpickler(path)
A:pandas.tests.io.test_pickle.cat->pandas.Categorical(values=['a', 'b', 'c'], ordered=False, categories=['a', 'b', 'c', 'd'])
A:pandas.tests.io.test_pickle.pickle_path->os.path.join(tm.get_data_path(), 'categorical_0_15_2.pickle')
A:pandas.tests.io.test_pickle.f->pandas.compat.import_lzma().LZMAFile(src_path, 'r')
A:pandas.tests.io.test_pickle.zip_file->zipfile.ZipFile(src_path)
A:pandas.tests.io.test_pickle.lzma->pandas.compat.import_lzma()
A:pandas.tests.io.test_pickle.msg->'Unrecognized compression type: {}'.format(compression)
A:pandas.tests.io.test_pickle.zip_names->zipfile.ZipFile(src_path).namelist()
A:pandas.tests.io.test_pickle.df->pandas.util.testing.makeDataFrame()
A:pandas.tests.io.test_pickle.df2->pandas.read_pickle(p2)
pandas.tests.io.test_pickle.TestCompression(object)
pandas.tests.io.test_pickle.TestCompression.compress_file(self,src_path,dest_path,compression)
pandas.tests.io.test_pickle.TestCompression.decompress_file(self,src_path,dest_path,compression)
pandas.tests.io.test_pickle.TestCompression.test_read_explicit(self,compression,get_random_path)
pandas.tests.io.test_pickle.TestCompression.test_read_infer(self,ext,get_random_path)
pandas.tests.io.test_pickle.TestCompression.test_write_explicit(self,compression,get_random_path)
pandas.tests.io.test_pickle.TestCompression.test_write_explicit_bad(self,compression,get_random_path)
pandas.tests.io.test_pickle.TestCompression.test_write_infer(self,ext,get_random_path)
pandas.tests.io.test_pickle.compare(data,vf,version)
pandas.tests.io.test_pickle.compare_element(result,expected,typ,version=None)
pandas.tests.io.test_pickle.compare_frame_cat_and_float(result,expected,typ,version)
pandas.tests.io.test_pickle.compare_frame_cat_onecol(result,expected,typ,version)
pandas.tests.io.test_pickle.compare_frame_dt_mixed_tzs(result,expected,typ,version)
pandas.tests.io.test_pickle.compare_index_period(result,expected,typ,version)
pandas.tests.io.test_pickle.compare_series_cat(result,expected,typ,version)
pandas.tests.io.test_pickle.compare_series_dt_tz(result,expected,typ,version)
pandas.tests.io.test_pickle.compare_series_ts(result,expected,typ,version)
pandas.tests.io.test_pickle.compare_sp_frame_float(result,expected,typ,version)
pandas.tests.io.test_pickle.compare_sp_series_ts(res,exp,typ,version)
pandas.tests.io.test_pickle.current_pickle_data()
pandas.tests.io.test_pickle.get_random_path()
pandas.tests.io.test_pickle.legacy_pickle_versions()
pandas.tests.io.test_pickle.test_pickle_v0_14_1()
pandas.tests.io.test_pickle.test_pickle_v0_15_2()
pandas.tests.io.test_pickle.test_pickles(current_pickle_data,version)
pandas.tests.io.test_pickle.test_round_trip_current(current_pickle_data)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/test_gbq.py----------------------------------------
A:pandas.tests.io.test_gbq.pandas_gbq->pytest.importorskip('pandas_gbq')
A:pandas.tests.io.test_gbq.DESTINATION_TABLE->'{0}.{1}'.format(DATASET_ID + '1', TABLE_ID)
A:pandas.tests.io.test_gbq.VERSION->platform.python_version()
A:pandas.tests.io.test_gbq.dataset->pytest.importorskip('pandas_gbq').gbq._Dataset(_get_project_id(), private_key=private_key)
A:pandas.tests.io.test_gbq.table->pytest.importorskip('pandas_gbq').gbq._Table(_get_project_id(), dataset_id, private_key=private_key)
A:pandas.tests.io.test_gbq.bools->numpy.random.randint(2, size=(1, test_size)).astype(bool)
A:pandas.tests.io.test_gbq.flts->numpy.random.randn(1, test_size)
A:pandas.tests.io.test_gbq.ints->numpy.random.randint(1, 10, size=(1, test_size))
A:pandas.tests.io.test_gbq.strs->numpy.random.randint(1, 10, size=(1, test_size)).astype(str)
A:pandas.tests.io.test_gbq.df->make_mixed_dataframe_v2(test_size)
A:pandas.tests.io.test_gbq.result->pandas.read_gbq('SELECT COUNT(*) AS num_rows FROM {0}'.format(destination_table), project_id=_get_project_id(), private_key=_get_private_key_path())
pandas.tests.io.test_gbq.TestToGBQIntegrationWithServiceAccountKeyPath(object)
pandas.tests.io.test_gbq.TestToGBQIntegrationWithServiceAccountKeyPath.setup_class(cls)
pandas.tests.io.test_gbq.TestToGBQIntegrationWithServiceAccountKeyPath.teardown_class(cls)
pandas.tests.io.test_gbq.TestToGBQIntegrationWithServiceAccountKeyPath.test_roundtrip(self)
pandas.tests.io.test_gbq._get_private_key_path()
pandas.tests.io.test_gbq._get_project_id()
pandas.tests.io.test_gbq._in_travis_environment()
pandas.tests.io.test_gbq._skip_if_no_private_key_path()
pandas.tests.io.test_gbq._skip_if_no_project_id()
pandas.tests.io.test_gbq.clean_gbq_environment(private_key=None)
pandas.tests.io.test_gbq.make_mixed_dataframe_v2(test_size)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/test_packers.py----------------------------------------
A:pandas.tests.io.test_packers.df->self.encode_decode(expected, compress='zlib')
A:pandas.tests.io.test_packers.s->pandas.util.testing.makeDataFrame()
A:pandas.tests.io.test_packers.result->self.encode_decode(frame)
A:pandas.tests.io.test_packers.fh->open(p, 'wb')
A:pandas.tests.io.test_packers.x->(np.random.rand(5) + 1j * np.random.rand(5)).astype(np.complex128)
A:pandas.tests.io.test_packers.x_rec->self.encode_decode(tuple(x))
A:pandas.tests.io.test_packers.i_rec->self.encode_decode(self.frame, compress=compress)
A:pandas.tests.io.test_packers.nat_rec->self.encode_decode(NaT)
A:pandas.tests.io.test_packers.i->pandas.util.testing.makeUnicodeIndex(100)
A:pandas.tests.io.test_packers.self.d['float']->Series(data['A'])
A:pandas.tests.io.test_packers.self.d['int']->Series(data['B'])
A:pandas.tests.io.test_packers.self.d['mixed']->Series(data['E'])
A:pandas.tests.io.test_packers.self.d['dt_tz_mixed']->Series(data['F'])
A:pandas.tests.io.test_packers.self.d['dt_tz']->Series(data['G'])
A:pandas.tests.io.test_packers.self.d['cat_ordered']->Series(data['H'])
A:pandas.tests.io.test_packers.self.d['cat_unordered']->Series(data['I'])
A:pandas.tests.io.test_packers.self.d['plain_str']->Categorical(['a', 'b', 'c', 'd', 'e'])
A:pandas.tests.io.test_packers.self.d['plain_str_ordered']->Categorical(['a', 'b', 'c', 'd', 'e'], ordered=True)
A:pandas.tests.io.test_packers.self.d['plain_int']->Categorical([5, 6, 7, 8])
A:pandas.tests.io.test_packers.self.d['plain_int_ordered']->Categorical([5, 6, 7, 8], ordered=True)
A:pandas.tests.io.test_packers.l->tuple([self.frame['float'], self.frame['float'].A, self.frame['float'].B, None])
A:pandas.tests.io.test_packers.l_rec->self.encode_decode(l)
A:pandas.tests.io.test_packers.expected_1->DataFrame(columns=['a', 'a'])
A:pandas.tests.io.test_packers.expected_2->DataFrame(columns=[1] * 100)
A:pandas.tests.io.test_packers.expected_2.loc[0]->numpy.random.randn(100)
A:pandas.tests.io.test_packers.expected_3->DataFrame(columns=[1, 1])
A:pandas.tests.io.test_packers.result_1->self.encode_decode(expected_1)
A:pandas.tests.io.test_packers.result_2->self.encode_decode(expected_2)
A:pandas.tests.io.test_packers.result_3->self.encode_decode(expected_3)
A:pandas.tests.io.test_packers.ss->pandas.util.testing.makeDataFrame().to_sparse()
A:pandas.tests.io.test_packers.ss2->pandas.util.testing.makeDataFrame().to_sparse(kind='integer')
A:pandas.tests.io.test_packers.ss3->pandas.util.testing.makeDataFrame().to_sparse(fill_value=0)
A:pandas.tests.io.test_packers.res->real_decompress(ob)
A:pandas.tests.io.test_packers.empty->numpy.array([], dtype='uint8')
A:pandas.tests.io.test_packers.empty_unpacked->self.encode_decode(empty, compress=compress)
A:pandas.tests.io.test_packers.char->numpy.array([ord(b'a')], dtype='uint8')
A:pandas.tests.io.test_packers.char_unpacked->self.encode_decode(char, compress=compress)
A:pandas.tests.io.test_packers.char_unpacked[0]->ord(b'b')
A:pandas.tests.io.test_packers.df1->DataFrame({'A': list('abcd')})
A:pandas.tests.io.test_packers.df2->DataFrame(df1, index=[1.0, 2.0, 3.0, 4.0])
A:pandas.tests.io.test_packers.expected->expected.astype(object).astype(object)
A:pandas.tests.io.test_packers.eng->self._create_sql_engine('sqlite:///:memory:')
A:pandas.tests.io.test_packers.path->pandas.util.testing.get_data_path('legacy_msgpack')
A:pandas.tests.io.test_packers.p->os.path.join(path, v)
A:pandas.tests.io.test_packers.msg->'"{0}" not found in data["{1}"]'.format(kind, typ)
A:pandas.tests.io.test_packers.data->read_msgpack(vf)
A:pandas.tests.io.test_packers.comp_method->'compare_{typ}_{dt}'.format(typ=typ, dt=dt)
A:pandas.tests.io.test_packers.comparator->getattr(self, comp_method, None)
A:pandas.tests.io.test_packers.pth->pandas.util.testing.get_data_path('legacy_msgpack/{0}'.format(version))
A:pandas.tests.io.test_packers.vf->os.path.join(pth, f)
pandas.tests.io.test_packers.TestAPI(TestPackers)
pandas.tests.io.test_packers.TestAPI.test_invalid_arg(self)
pandas.tests.io.test_packers.TestAPI.test_iterator_with_string_io(self)
pandas.tests.io.test_packers.TestAPI.test_string_io(self)
pandas.tests.io.test_packers.TestBasic(TestPackers)
pandas.tests.io.test_packers.TestBasic.test_datetimes(self)
pandas.tests.io.test_packers.TestBasic.test_nat(self)
pandas.tests.io.test_packers.TestBasic.test_timedeltas(self)
pandas.tests.io.test_packers.TestBasic.test_timestamp(self)
pandas.tests.io.test_packers.TestCategorical(TestPackers)
pandas.tests.io.test_packers.TestCategorical.setup_method(self,method)
pandas.tests.io.test_packers.TestCategorical.test_basic(self)
pandas.tests.io.test_packers.TestCompression(TestPackers)
pandas.tests.io.test_packers.TestCompression._test_compression(self,compress)
pandas.tests.io.test_packers.TestCompression._test_compression_warns_when_decompress_caches(self,compress)
pandas.tests.io.test_packers.TestCompression._test_small_strings_no_warn(self,compress)
pandas.tests.io.test_packers.TestCompression.setup_method(self,method)
pandas.tests.io.test_packers.TestCompression.test_compression_blosc(self)
pandas.tests.io.test_packers.TestCompression.test_compression_warns_when_decompress_caches_blosc(self)
pandas.tests.io.test_packers.TestCompression.test_compression_warns_when_decompress_caches_zlib(self)
pandas.tests.io.test_packers.TestCompression.test_compression_zlib(self)
pandas.tests.io.test_packers.TestCompression.test_plain(self)
pandas.tests.io.test_packers.TestCompression.test_readonly_axis_blosc(self)
pandas.tests.io.test_packers.TestCompression.test_readonly_axis_blosc_to_sql(self)
pandas.tests.io.test_packers.TestCompression.test_readonly_axis_zlib(self)
pandas.tests.io.test_packers.TestCompression.test_readonly_axis_zlib_to_sql(self)
pandas.tests.io.test_packers.TestCompression.test_small_strings_no_warn_blosc(self)
pandas.tests.io.test_packers.TestCompression.test_small_strings_no_warn_zlib(self)
pandas.tests.io.test_packers.TestEncoding(TestPackers)
pandas.tests.io.test_packers.TestEncoding.setup_method(self,method)
pandas.tests.io.test_packers.TestEncoding.test_default_encoding(self)
pandas.tests.io.test_packers.TestEncoding.test_utf(self)
pandas.tests.io.test_packers.TestIndex(TestPackers)
pandas.tests.io.test_packers.TestIndex.categorical_index(self)
pandas.tests.io.test_packers.TestIndex.setup_method(self,method)
pandas.tests.io.test_packers.TestIndex.test_basic_index(self)
pandas.tests.io.test_packers.TestIndex.test_multi_index(self)
pandas.tests.io.test_packers.TestIndex.test_unicode(self)
pandas.tests.io.test_packers.TestMsgpack(object)
pandas.tests.io.test_packers.TestMsgpack.check_min_structure(self,data,version)
pandas.tests.io.test_packers.TestMsgpack.compare(self,current_data,all_data,vf,version)
pandas.tests.io.test_packers.TestMsgpack.compare_frame_dt_mixed_tzs(self,result,expected,typ,version)
pandas.tests.io.test_packers.TestMsgpack.compare_series_dt_tz(self,result,expected,typ,version)
pandas.tests.io.test_packers.TestMsgpack.test_msgpacks_legacy(self,current_packers_data,all_packers_data,version)
pandas.tests.io.test_packers.TestNDFrame(TestPackers)
pandas.tests.io.test_packers.TestNDFrame.setup_method(self,method)
pandas.tests.io.test_packers.TestNDFrame.test_basic_frame(self)
pandas.tests.io.test_packers.TestNDFrame.test_basic_panel(self)
pandas.tests.io.test_packers.TestNDFrame.test_dataframe_duplicate_column_names(self)
pandas.tests.io.test_packers.TestNDFrame.test_iterator(self)
pandas.tests.io.test_packers.TestNDFrame.test_multi(self)
pandas.tests.io.test_packers.TestNDFrame.tests_datetimeindex_freq_issue(self)
pandas.tests.io.test_packers.TestNumpy(TestPackers)
pandas.tests.io.test_packers.TestNumpy.test_dict_complex(self)
pandas.tests.io.test_packers.TestNumpy.test_dict_float(self)
pandas.tests.io.test_packers.TestNumpy.test_dict_numpy_complex(self)
pandas.tests.io.test_packers.TestNumpy.test_dict_numpy_float(self)
pandas.tests.io.test_packers.TestNumpy.test_list_float(self)
pandas.tests.io.test_packers.TestNumpy.test_list_float_complex(self)
pandas.tests.io.test_packers.TestNumpy.test_list_mixed(self)
pandas.tests.io.test_packers.TestNumpy.test_list_numpy_float(self)
pandas.tests.io.test_packers.TestNumpy.test_list_numpy_float_complex(self)
pandas.tests.io.test_packers.TestNumpy.test_numpy_array_complex(self)
pandas.tests.io.test_packers.TestNumpy.test_numpy_array_float(self)
pandas.tests.io.test_packers.TestNumpy.test_numpy_scalar_complex(self)
pandas.tests.io.test_packers.TestNumpy.test_numpy_scalar_float(self)
pandas.tests.io.test_packers.TestNumpy.test_scalar_complex(self)
pandas.tests.io.test_packers.TestNumpy.test_scalar_float(self)
pandas.tests.io.test_packers.TestPackers(object)
pandas.tests.io.test_packers.TestPackers.encode_decode(self,x,compress=None,**kwargs)
pandas.tests.io.test_packers.TestPackers.setup_method(self,method)
pandas.tests.io.test_packers.TestPackers.teardown_method(self,method)
pandas.tests.io.test_packers.TestSeries(TestPackers)
pandas.tests.io.test_packers.TestSeries.setup_method(self,method)
pandas.tests.io.test_packers.TestSeries.test_basic(self)
pandas.tests.io.test_packers.TestSparse(TestPackers)
pandas.tests.io.test_packers.TestSparse._check_roundtrip(self,obj,comparator,**kwargs)
pandas.tests.io.test_packers.TestSparse.test_sparse_frame(self)
pandas.tests.io.test_packers.TestSparse.test_sparse_series(self)
pandas.tests.io.test_packers.all_packers_data()
pandas.tests.io.test_packers.check_arbitrary(a,b)
pandas.tests.io.test_packers.current_packers_data()
pandas.tests.io.test_packers.legacy_packers_versions()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/test_sql.py----------------------------------------
A:pandas.tests.io.test_sql.cur->self.conn.cursor()
A:pandas.tests.io.test_sql.c->self.conn.execute("SELECT name FROM sqlite_master WHERE type='table'")
A:pandas.tests.io.test_sql.meta->sqlalchemy.MetaData(engine2, schema='other')
A:pandas.tests.io.test_sql.table_list->sqlalchemy.MetaData(engine2, schema='other').tables.keys()
A:pandas.tests.io.test_sql.iris_csv_file->os.path.join(tm.get_data_path(), 'iris.csv')
A:pandas.tests.io.test_sql.r->csv.reader(iris_csv)
A:pandas.tests.io.test_sql.self.test_frame1->DataFrame(data, columns=columns)
A:pandas.tests.io.test_sql.df->DataFrame({'From': np.ones(5)})
A:pandas.tests.io.test_sql.df['E']->to_datetime(df['E'])
A:pandas.tests.io.test_sql.self.test_frame3->DataFrame(data, columns=columns)
A:pandas.tests.io.test_sql.result->pandas.io.sql.read_sql('select * from test_table2', self.conn, index_col='Idx')
A:pandas.tests.io.test_sql.iris_frame->pandas.io.sql.read_sql_table('iris', con=self.conn, columns=['SepalLength', 'SepalLength'])
A:pandas.tests.io.test_sql.num_entries->len(self.test_frame1)
A:pandas.tests.io.test_sql.num_rows->self._count_rows('test_frame4')
A:pandas.tests.io.test_sql.iris_results->pandas.io.sql.execute('SELECT * FROM iris', con=self.conn)
A:pandas.tests.io.test_sql.row->pandas.util.testing.makeTimeDataFrame().iloc[0].values.tolist()
A:pandas.tests.io.test_sql.ix_cols->self._get_index_columns('test_to_sql_saves_index')
A:pandas.tests.io.test_sql.res->pandas.io.sql.execute(query, con=con, cur=cur).fetchall()
A:pandas.tests.io.test_sql.res2->pandas.io.sql.SQLDatabase(engine2, meta=meta).read_table('test_schema_other2')
A:pandas.tests.io.test_sql.self.conn->pymysql.connect(read_default_group='pandas')
A:pandas.tests.io.test_sql.s->Series(np.arange(5, dtype='int64'), name='series')
A:pandas.tests.io.test_sql.s2->Series(0.0, dtype=np.float32)
A:pandas.tests.io.test_sql.panel->pandas.util.testing.makePanel()
A:pandas.tests.io.test_sql.temp_frame->DataFrame({'one': [1.0, 2.0, 3.0, 4.0], 'two': [4.0, 3.0, 2.0, 1.0]})
A:pandas.tests.io.test_sql.frame->pandas.util.testing.makeTimeDataFrame()
A:pandas.tests.io.test_sql.create_sql->pandas.io.sql.get_schema(frame, 'test', keys=['A', 'B'])
A:pandas.tests.io.test_sql.float_frame->DataFrame({'a': [1.1, 1.2], 'b': [2.1, 2.2]})
A:pandas.tests.io.test_sql.res1->pandas.io.sql.read_sql_table('test_schema_other2', self.conn, schema='other')
A:pandas.tests.io.test_sql.res3->pandas.io.sql.read_sql_table('test_schema_public_explicit', self.conn, schema='public')
A:pandas.tests.io.test_sql.df2->DataFrame([[1, 2], [3, 4]], columns=['a', weird_name])
A:pandas.tests.io.test_sql.df2['person_name']->df2['person_name'].astype('category').astype('category')
A:pandas.tests.io.test_sql.iris_frame1->pandas.io.sql.read_sql_query('SELECT * FROM iris', self.conn)
A:pandas.tests.io.test_sql.iris_frame2->pandas.io.sql.read_sql('SELECT * FROM iris', self.conn)
A:pandas.tests.io.test_sql.insp->sqlalchemy.engine.reflection.Inspector.from_engine(self.conn)
A:pandas.tests.io.test_sql.ixs->pandas.io.sql.read_sql_query("SELECT * FROM sqlite_master WHERE type = 'index' " + "AND tbl_name = '%s'" % tbl_name, self.conn)
A:pandas.tests.io.test_sql.db->pandas.io.sql.SQLiteDatabase(self.conn)
A:pandas.tests.io.test_sql.table->pandas.io.sql.SQLiteTable('test_type', db, frame=df)
A:pandas.tests.io.test_sql.test_frame2->pandas.io.sql.read_sql(table, db_uri)
A:pandas.tests.io.test_sql.test_frame3->pandas.io.sql.read_sql_table(table, db_uri)
A:pandas.tests.io.test_sql.test_frame4->pandas.io.sql.read_sql_query(query, db_uri)
A:pandas.tests.io.test_sql.metadata->sa.MetaData()
A:pandas.tests.io.test_sql.iris->self._make_iris_table_metadata()
A:pandas.tests.io.test_sql.name_text->sqlalchemy.text('select * from iris where name=:name')
A:pandas.tests.io.test_sql.iris_df->pandas.io.sql.read_sql(name_select, self.conn, params={'name': 'Iris-setosa'})
A:pandas.tests.io.test_sql.all_names->set(iris_df['Name'])
A:pandas.tests.io.test_sql.name_select->sqlalchemy.select([iris]).where(iris.c.Name == sqlalchemy.bindparam('name'))
A:pandas.tests.io.test_sql.conn->Session().connection()
A:pandas.tests.io.test_sql.self.__tx->Session().connection().begin()
A:pandas.tests.io.test_sql.self.pandasSQL->pandas.io.sql.SQLiteDatabase(self.conn)
A:pandas.tests.io.test_sql.schema->pandas.io.sql.SQLiteTable('test_type', db, frame=df).sql_schema()
A:pandas.tests.io.test_sql.msg->"{0} - can't connect to {1} server".format(cls, cls.flavor)
A:pandas.tests.io.test_sql.temp_conn->self.connect()
A:pandas.tests.io.test_sql.pandasSQL->pandas.io.sql.SQLDatabase(temp_conn)
A:pandas.tests.io.test_sql.expected->pandas.util.testing.makeTimeDataFrame().copy()
A:pandas.tests.io.test_sql.result['A']->to_datetime(result['A'], errors='coerce')
A:pandas.tests.io.test_sql.sqlite_conn->TestSQLiteFallback.connect()
A:pandas.tests.io.test_sql.ref->DataFrame({'From': np.ones(5)}).applymap(lambda _: _.strftime('%H:%M:%S.%f'))
A:pandas.tests.io.test_sql.s1->Series(2 ** 25 + 1, dtype=np.int32)
A:pandas.tests.io.test_sql.df['B']->df['B'].astype('object').astype('object')
A:pandas.tests.io.test_sql.returned_df->pandas.io.sql.read_sql_table(tbl, self.conn)
A:pandas.tests.io.test_sql.foo_data->Session().connection().run_callable(foo)
A:pandas.tests.io.test_sql.Base->sqlalchemy.ext.declarative.declarative_base()
A:pandas.tests.io.test_sql.id->sqlalchemy.Column(sqlalchemy.Integer, primary_key=True)
A:pandas.tests.io.test_sql.spam->sqlalchemy.Column(sqlalchemy.Unicode(30), nullable=False)
A:pandas.tests.io.test_sql.Session->sqlalchemy.orm.session.sessionmaker(bind=self.conn)
A:pandas.tests.io.test_sql.session->Session()
A:pandas.tests.io.test_sql.connection->self.conn.connect()
A:pandas.tests.io.test_sql.trans->self.conn.connect().begin()
A:pandas.tests.io.test_sql.r1->self.conn.connect().execute(proc)
A:pandas.tests.io.test_sql.res4->pandas.io.sql.read_sql_table('test_schema_other', self.conn, schema='other')
A:pandas.tests.io.test_sql.engine2->self.connect()
A:pandas.tests.io.test_sql.pdsql->pandas.io.sql.SQLDatabase(engine2, meta=meta)
A:pandas.tests.io.test_sql.ix_info->pandas.io.sql.read_sql_query('PRAGMA index_info(%s)' % ix_name, self.conn)
A:pandas.tests.io.test_sql.recs->self.conn.execute('PRAGMA table_info(%s)' % table)
A:pandas.tests.io.test_sql.fmt_sql->format_query(ins, *row)
A:pandas.tests.io.test_sql.lines->pandas.io.sql.get_schema(frame, 'test', keys=['A', 'B']).splitlines()
A:pandas.tests.io.test_sql.tokens->l.split(' ')
A:pandas.tests.io.test_sql.frame2->pandas.util.testing.makeTimeDataFrame().copy()
A:pandas.tests.io.test_sql.mono_df->DataFrame([1, 2], columns=['c0'])
A:pandas.tests.io.test_sql.the_sum->sum([my_c0[0] for my_c0 in con_x.execute('select * from mono_df')])
A:pandas.tests.io.test_sql.df_if_exists_1->DataFrame({'col1': [1, 2], 'col2': ['A', 'B']})
A:pandas.tests.io.test_sql.df_if_exists_2->DataFrame({'col1': [3, 4, 5], 'col2': ['C', 'D', 'E']})
A:pandas.tests.io.test_sql.chunk_gen->pandas.read_sql_query(sql=query, con=self.conn, chunksize=chunksize, index_col='index')
A:pandas.tests.io.test_sql.chunk_df->next(chunk_gen)
pandas.tests.io.test_sql.MixInBase(object)
pandas.tests.io.test_sql.MixInBase.teardown_method(self,method)
pandas.tests.io.test_sql.MySQLMixIn(MixInBase)
pandas.tests.io.test_sql.MySQLMixIn._close_conn(self)
pandas.tests.io.test_sql.MySQLMixIn._get_all_tables(self)
pandas.tests.io.test_sql.MySQLMixIn.drop_table(self,table_name)
pandas.tests.io.test_sql.PandasSQLTest(object)
pandas.tests.io.test_sql.PandasSQLTest._check_iris_loaded_frame(self,iris_frame)
pandas.tests.io.test_sql.PandasSQLTest._count_rows(self,table_name)
pandas.tests.io.test_sql.PandasSQLTest._execute_sql(self)
pandas.tests.io.test_sql.PandasSQLTest._get_exec(self)
pandas.tests.io.test_sql.PandasSQLTest._load_iris_data(self)
pandas.tests.io.test_sql.PandasSQLTest._load_iris_view(self)
pandas.tests.io.test_sql.PandasSQLTest._load_raw_sql(self)
pandas.tests.io.test_sql.PandasSQLTest._load_test1_data(self)
pandas.tests.io.test_sql.PandasSQLTest._load_test2_data(self)
pandas.tests.io.test_sql.PandasSQLTest._load_test3_data(self)
pandas.tests.io.test_sql.PandasSQLTest._read_sql_iris(self)
pandas.tests.io.test_sql.PandasSQLTest._read_sql_iris_named_parameter(self)
pandas.tests.io.test_sql.PandasSQLTest._read_sql_iris_parameter(self)
pandas.tests.io.test_sql.PandasSQLTest._roundtrip(self)
pandas.tests.io.test_sql.PandasSQLTest._to_sql(self)
pandas.tests.io.test_sql.PandasSQLTest._to_sql_append(self)
pandas.tests.io.test_sql.PandasSQLTest._to_sql_empty(self)
pandas.tests.io.test_sql.PandasSQLTest._to_sql_fail(self)
pandas.tests.io.test_sql.PandasSQLTest._to_sql_replace(self)
pandas.tests.io.test_sql.PandasSQLTest._to_sql_save_index(self)
pandas.tests.io.test_sql.PandasSQLTest._transaction_test(self)
pandas.tests.io.test_sql.SQLAlchemyMixIn(MixInBase)
pandas.tests.io.test_sql.SQLAlchemyMixIn._close_conn(self)
pandas.tests.io.test_sql.SQLAlchemyMixIn._get_all_tables(self)
pandas.tests.io.test_sql.SQLAlchemyMixIn.drop_table(self,table_name)
pandas.tests.io.test_sql.SQLiteMixIn(MixInBase)
pandas.tests.io.test_sql.SQLiteMixIn._close_conn(self)
pandas.tests.io.test_sql.SQLiteMixIn._get_all_tables(self)
pandas.tests.io.test_sql.SQLiteMixIn.drop_table(self,table_name)
pandas.tests.io.test_sql.TestMySQLAlchemy(_TestMySQLAlchemy,_TestSQLAlchemy)
pandas.tests.io.test_sql.TestMySQLAlchemyConn(_TestMySQLAlchemy,_TestSQLAlchemyConn)
pandas.tests.io.test_sql.TestPostgreSQLAlchemy(_TestPostgreSQLAlchemy,_TestSQLAlchemy)
pandas.tests.io.test_sql.TestPostgreSQLAlchemyConn(_TestPostgreSQLAlchemy,_TestSQLAlchemyConn)
pandas.tests.io.test_sql.TestSQLApi(SQLAlchemyMixIn,_TestSQLApi)
pandas.tests.io.test_sql.TestSQLApi._get_index_columns(self,tbl_name)
pandas.tests.io.test_sql.TestSQLApi._make_iris_table_metadata(self)
pandas.tests.io.test_sql.TestSQLApi.connect(self)
pandas.tests.io.test_sql.TestSQLApi.test_database_uri_string(self)
pandas.tests.io.test_sql.TestSQLApi.test_not_reflect_all_tables(self)
pandas.tests.io.test_sql.TestSQLApi.test_query_by_select_obj(self)
pandas.tests.io.test_sql.TestSQLApi.test_query_by_text_obj(self)
pandas.tests.io.test_sql.TestSQLApi.test_read_sql_delegate(self)
pandas.tests.io.test_sql.TestSQLApi.test_read_table_columns(self)
pandas.tests.io.test_sql.TestSQLApi.test_read_table_index_col(self)
pandas.tests.io.test_sql.TestSQLApi.test_sqlalchemy_type_mapping(self)
pandas.tests.io.test_sql.TestSQLApi.test_warning_case_insensitive_table_name(self)
pandas.tests.io.test_sql.TestSQLApiConn(_EngineToConnMixin,TestSQLApi)
pandas.tests.io.test_sql.TestSQLFlavorDeprecation(object)
pandas.tests.io.test_sql.TestSQLFlavorDeprecation.test_deprecated_flavor(self)
pandas.tests.io.test_sql.TestSQLFlavorDeprecation.test_unsupported_flavor(self)
pandas.tests.io.test_sql.TestSQLiteAlchemy(_TestSQLiteAlchemy,_TestSQLAlchemy)
pandas.tests.io.test_sql.TestSQLiteAlchemyConn(_TestSQLiteAlchemy,_TestSQLAlchemyConn)
pandas.tests.io.test_sql.TestSQLiteFallback(SQLiteMixIn,PandasSQLTest)
pandas.tests.io.test_sql.TestSQLiteFallback._get_index_columns(self,tbl_name)
pandas.tests.io.test_sql.TestSQLiteFallback._get_sqlite_column_type(self,table,column)
pandas.tests.io.test_sql.TestSQLiteFallback.connect(cls)
pandas.tests.io.test_sql.TestSQLiteFallback.setup_method(self,method)
pandas.tests.io.test_sql.TestSQLiteFallback.test_create_and_drop_table(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_datetime_date(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_datetime_time(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_dtype(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_execute_sql(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_illegal_names(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_notnull_dtype(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_read_sql(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_read_sql_named_parameter(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_read_sql_parameter(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_roundtrip(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_to_sql(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_to_sql_append(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_to_sql_empty(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_to_sql_fail(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_to_sql_replace(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_to_sql_save_index(self)
pandas.tests.io.test_sql.TestSQLiteFallback.test_transactions(self)
pandas.tests.io.test_sql.TestSQLiteFallbackApi(SQLiteMixIn,_TestSQLApi)
pandas.tests.io.test_sql.TestSQLiteFallbackApi._get_sqlite_column_type(self,schema,column)
pandas.tests.io.test_sql.TestSQLiteFallbackApi.connect(self,database=':memory:')
pandas.tests.io.test_sql.TestSQLiteFallbackApi.test_con_string_import_error(self)
pandas.tests.io.test_sql.TestSQLiteFallbackApi.test_get_schema2(self)
pandas.tests.io.test_sql.TestSQLiteFallbackApi.test_read_sql_delegate(self)
pandas.tests.io.test_sql.TestSQLiteFallbackApi.test_safe_names_warning(self)
pandas.tests.io.test_sql.TestSQLiteFallbackApi.test_sql_open_close(self)
pandas.tests.io.test_sql.TestSQLiteFallbackApi.test_sqlite_type_mapping(self)
pandas.tests.io.test_sql.TestXMySQL(MySQLMixIn)
pandas.tests.io.test_sql.TestXMySQL._check_roundtrip(self,frame)
pandas.tests.io.test_sql.TestXMySQL.setup_class(cls)
pandas.tests.io.test_sql.TestXMySQL.setup_method(self,method)
pandas.tests.io.test_sql.TestXMySQL.test_basic(self)
pandas.tests.io.test_sql.TestXMySQL.test_chunksize_read_type(self)
pandas.tests.io.test_sql.TestXMySQL.test_execute(self)
pandas.tests.io.test_sql.TestXMySQL.test_execute_closed_connection(self)
pandas.tests.io.test_sql.TestXMySQL.test_execute_fail(self)
pandas.tests.io.test_sql.TestXMySQL.test_if_exists(self)
pandas.tests.io.test_sql.TestXMySQL.test_keyword_as_column_names(self)
pandas.tests.io.test_sql.TestXMySQL.test_na_roundtrip(self)
pandas.tests.io.test_sql.TestXMySQL.test_schema(self)
pandas.tests.io.test_sql.TestXMySQL.test_write_row_by_row(self)
pandas.tests.io.test_sql.TestXSQLite(SQLiteMixIn)
pandas.tests.io.test_sql.TestXSQLite._check_roundtrip(self,frame)
pandas.tests.io.test_sql.TestXSQLite.setup_method(self,method)
pandas.tests.io.test_sql.TestXSQLite.test_basic(self)
pandas.tests.io.test_sql.TestXSQLite.test_execute(self)
pandas.tests.io.test_sql.TestXSQLite.test_execute_closed_connection(self)
pandas.tests.io.test_sql.TestXSQLite.test_execute_fail(self)
pandas.tests.io.test_sql.TestXSQLite.test_if_exists(self)
pandas.tests.io.test_sql.TestXSQLite.test_keyword_as_column_names(self)
pandas.tests.io.test_sql.TestXSQLite.test_na_roundtrip(self)
pandas.tests.io.test_sql.TestXSQLite.test_onecolumn_of_integer(self)
pandas.tests.io.test_sql.TestXSQLite.test_schema(self)
pandas.tests.io.test_sql.TestXSQLite.test_write_row_by_row(self)
pandas.tests.io.test_sql._EngineToConnMixin(object)
pandas.tests.io.test_sql._EngineToConnMixin.setup_method(self,method)
pandas.tests.io.test_sql._EngineToConnMixin.teardown_method(self,method)
pandas.tests.io.test_sql._TestMySQLAlchemy(object)
pandas.tests.io.test_sql._TestMySQLAlchemy.connect(cls)
pandas.tests.io.test_sql._TestMySQLAlchemy.setup_driver(cls)
pandas.tests.io.test_sql._TestMySQLAlchemy.test_default_type_conversion(self)
pandas.tests.io.test_sql._TestMySQLAlchemy.test_read_procedure(self)
pandas.tests.io.test_sql._TestPostgreSQLAlchemy(object)
pandas.tests.io.test_sql._TestPostgreSQLAlchemy.connect(cls)
pandas.tests.io.test_sql._TestPostgreSQLAlchemy.setup_driver(cls)
pandas.tests.io.test_sql._TestPostgreSQLAlchemy.test_schema_support(self)
pandas.tests.io.test_sql._TestSQLAlchemy(SQLAlchemyMixIn,PandasSQLTest)
pandas.tests.io.test_sql._TestSQLAlchemy._get_index_columns(self,tbl_name)
pandas.tests.io.test_sql._TestSQLAlchemy.connect(cls)
pandas.tests.io.test_sql._TestSQLAlchemy.setup_class(cls)
pandas.tests.io.test_sql._TestSQLAlchemy.setup_connect(self)
pandas.tests.io.test_sql._TestSQLAlchemy.setup_driver(cls)
pandas.tests.io.test_sql._TestSQLAlchemy.setup_import(cls)
pandas.tests.io.test_sql._TestSQLAlchemy.setup_method(self,method)
pandas.tests.io.test_sql._TestSQLAlchemy.test_aread_sql(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_bigint(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_connectable_issue_example(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_create_table(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_date_parsing(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_datetime(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_datetime_NaT(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_datetime_date(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_datetime_time(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_datetime_with_timezone(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_default_date_load(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_default_type_conversion(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_double_precision(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_drop_table(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_dtype(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_execute_sql(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_get_schema_create_table(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_mixed_dtype_insert(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_nan_fullcolumn(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_nan_numeric(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_nan_string(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_notnull_dtype(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_read_sql_named_parameter(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_read_sql_parameter(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_read_table(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_read_table_absent(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_read_table_columns(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_roundtrip(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_temporary_table(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_to_sql(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_to_sql_append(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_to_sql_empty(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_to_sql_fail(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_to_sql_replace(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_to_sql_save_index(self)
pandas.tests.io.test_sql._TestSQLAlchemy.test_transactions(self)
pandas.tests.io.test_sql._TestSQLAlchemyConn(_EngineToConnMixin,_TestSQLAlchemy)
pandas.tests.io.test_sql._TestSQLAlchemyConn.test_transactions(self)
pandas.tests.io.test_sql._TestSQLApi(PandasSQLTest)
pandas.tests.io.test_sql._TestSQLApi.setup_method(self,method)
pandas.tests.io.test_sql._TestSQLApi.test_categorical(self)
pandas.tests.io.test_sql._TestSQLApi.test_chunksize_read(self)
pandas.tests.io.test_sql._TestSQLApi.test_complex(self)
pandas.tests.io.test_sql._TestSQLApi.test_date_and_index(self)
pandas.tests.io.test_sql._TestSQLApi.test_date_parsing(self)
pandas.tests.io.test_sql._TestSQLApi.test_execute_sql(self)
pandas.tests.io.test_sql._TestSQLApi.test_get_schema(self)
pandas.tests.io.test_sql._TestSQLApi.test_get_schema_dtypes(self)
pandas.tests.io.test_sql._TestSQLApi.test_get_schema_keys(self)
pandas.tests.io.test_sql._TestSQLApi.test_integer_col_names(self)
pandas.tests.io.test_sql._TestSQLApi.test_multiindex_roundtrip(self)
pandas.tests.io.test_sql._TestSQLApi.test_read_sql_iris(self)
pandas.tests.io.test_sql._TestSQLApi.test_read_sql_view(self)
pandas.tests.io.test_sql._TestSQLApi.test_roundtrip(self)
pandas.tests.io.test_sql._TestSQLApi.test_roundtrip_chunksize(self)
pandas.tests.io.test_sql._TestSQLApi.test_timedelta(self)
pandas.tests.io.test_sql._TestSQLApi.test_to_sql(self)
pandas.tests.io.test_sql._TestSQLApi.test_to_sql_append(self)
pandas.tests.io.test_sql._TestSQLApi.test_to_sql_fail(self)
pandas.tests.io.test_sql._TestSQLApi.test_to_sql_index_label(self)
pandas.tests.io.test_sql._TestSQLApi.test_to_sql_index_label_multiindex(self)
pandas.tests.io.test_sql._TestSQLApi.test_to_sql_panel(self)
pandas.tests.io.test_sql._TestSQLApi.test_to_sql_replace(self)
pandas.tests.io.test_sql._TestSQLApi.test_to_sql_series(self)
pandas.tests.io.test_sql._TestSQLApi.test_to_sql_type_mapping(self)
pandas.tests.io.test_sql._TestSQLApi.test_unicode_column_name(self)
pandas.tests.io.test_sql._TestSQLiteAlchemy(object)
pandas.tests.io.test_sql._TestSQLiteAlchemy.connect(cls)
pandas.tests.io.test_sql._TestSQLiteAlchemy.setup_driver(cls)
pandas.tests.io.test_sql._TestSQLiteAlchemy.test_bigint_warning(self)
pandas.tests.io.test_sql._TestSQLiteAlchemy.test_default_date_load(self)
pandas.tests.io.test_sql._TestSQLiteAlchemy.test_default_type_conversion(self)
pandas.tests.io.test_sql._skip_if_no_pymysql()
pandas.tests.io.test_sql.format_query(sql,*args)
pandas.tests.io.test_sql.tquery(query,con=None,cur=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/test_clipboard.py----------------------------------------
A:pandas.tests.io.test_clipboard.cls.data['string']->mkdf(5, 3, c_idx_type='s', r_idx_type='i', c_idx_names=[None], r_idx_names=[None])
A:pandas.tests.io.test_clipboard.cls.data['int']->mkdf(5, 3, data_gen_f=lambda *args: randint(2), c_idx_type='s', r_idx_type='i', c_idx_names=[None], r_idx_names=[None])
A:pandas.tests.io.test_clipboard.cls.data['float']->mkdf(5, 3, data_gen_f=lambda r, c: float(r) + 0.01, c_idx_type='s', r_idx_type='i', c_idx_names=[None], r_idx_names=[None])
A:pandas.tests.io.test_clipboard.cls.data['mixed']->DataFrame({'a': np.arange(1.0, 6.0) + 0.01, 'b': np.arange(1, 6), 'c': list('abcde')})
A:pandas.tests.io.test_clipboard.cls.data['colwidth']->mkdf(5, 3, data_gen_f=lambda *args: 'x' * _cw, c_idx_type='s', r_idx_type='i', c_idx_names=[None], r_idx_names=[None])
A:pandas.tests.io.test_clipboard.max_rows->get_option('display.max_rows')
A:pandas.tests.io.test_clipboard.cls.data['longdf']->mkdf(max_rows + 1, 3, data_gen_f=lambda *args: randint(2), c_idx_type='s', r_idx_type='i', c_idx_names=[None], r_idx_names=[None])
A:pandas.tests.io.test_clipboard.cls.data['nonascii']->pandas.DataFrame({'en': 'in English'.split(), 'es': 'en español'.split()})
A:pandas.tests.io.test_clipboard.cls.data['utf8']->pandas.DataFrame({'a': ['µasd', 'Ωœ∑´'], 'b': ['øπ∆˚¬', 'œ∑´®']})
A:pandas.tests.io.test_clipboard.cls.data_types->list(cls.data.keys())
A:pandas.tests.io.test_clipboard.result->read_clipboard(encoding=encoding)
A:pandas.tests.io.test_clipboard.text->dedent('\n            a  b\n            1  2\n            3  4\n            '.strip())
A:pandas.tests.io.test_clipboard.df->pandas.read_clipboard()
A:pandas.tests.io.test_clipboard.res->pandas.read_clipboard()
A:pandas.tests.io.test_clipboard.exp->pandas.read_clipboard()
pandas.tests.io.test_clipboard.TestClipboard(object)
pandas.tests.io.test_clipboard.TestClipboard.check_round_trip_frame(self,data_type,excel=None,sep=None,encoding=None)
pandas.tests.io.test_clipboard.TestClipboard.setup_class(cls)
pandas.tests.io.test_clipboard.TestClipboard.teardown_class(cls)
pandas.tests.io.test_clipboard.TestClipboard.test_invalid_encoding(self)
pandas.tests.io.test_clipboard.TestClipboard.test_read_clipboard_infer_excel(self)
pandas.tests.io.test_clipboard.TestClipboard.test_round_trip_frame(self)
pandas.tests.io.test_clipboard.TestClipboard.test_round_trip_frame_sep(self)
pandas.tests.io.test_clipboard.TestClipboard.test_round_trip_frame_string(self)
pandas.tests.io.test_clipboard.TestClipboard.test_round_trip_valid_encodings(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/test_feather.py----------------------------------------
A:pandas.tests.io.test_feather.feather->pytest.importorskip('feather')
A:pandas.tests.io.test_feather.result->read_feather(path)
A:pandas.tests.io.test_feather.df->pandas.DataFrame({'A': [1, 2, 3]})
pandas.tests.io.test_feather.TestFeather(object)
pandas.tests.io.test_feather.TestFeather.check_error_on_write(self,df,exc)
pandas.tests.io.test_feather.TestFeather.check_round_trip(self,df)
pandas.tests.io.test_feather.TestFeather.test_basic(self)
pandas.tests.io.test_feather.TestFeather.test_duplicate_columns(self)
pandas.tests.io.test_feather.TestFeather.test_error(self)
pandas.tests.io.test_feather.TestFeather.test_strided_data_issues(self)
pandas.tests.io.test_feather.TestFeather.test_stringify_columns(self)
pandas.tests.io.test_feather.TestFeather.test_unsupported(self)
pandas.tests.io.test_feather.TestFeather.test_write_with_index(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/test_excel.py----------------------------------------
A:pandas.tests.io.test_excel.ver->tuple(map(int, xlrd.__VERSION__.split('.')[:2]))
A:pandas.tests.io.test_excel._seriesd->pandas.util.testing.getSeriesData()
A:pandas.tests.io.test_excel._tsd->pandas.util.testing.getTimeSeriesData()
A:pandas.tests.io.test_excel._mixed_frame->_frame.copy()
A:pandas.tests.io.test_excel.self.dirpath->pandas.util.testing.get_data_path()
A:pandas.tests.io.test_excel.self.frame->_frame.copy()
A:pandas.tests.io.test_excel.self.frame2->_frame2.copy()
A:pandas.tests.io.test_excel.self.tsframe->_tsframe.copy()
A:pandas.tests.io.test_excel.self.mixed_frame->_frame.copy().copy()
A:pandas.tests.io.test_excel.pref->os.path.join(self.dirpath, basename + '.csv')
A:pandas.tests.io.test_excel.dfref->self.get_csv_refdf('test1')
A:pandas.tests.io.test_excel.pth->os.path.join(self.dirpath, 'test1' + self.ext)
A:pandas.tests.io.test_excel.df1->self.get_exceldf('test1', 'Sheet1', index_col=0)
A:pandas.tests.io.test_excel.df2->DataFrame(np.random.randn(10, 3)).copy()
A:pandas.tests.io.test_excel.df3->self.get_exceldf('test1', 'Sheet1', index_col=0, skipfooter=1)
A:pandas.tests.io.test_excel.parsed->read_excel(excel, 'Sheet1', keep_default_na=True, na_values=['apple'])
A:pandas.tests.io.test_excel.expected->DataFrame([[1, 2], [3, 4]], columns=['col1', 'col2'])
A:pandas.tests.io.test_excel.excel->self.get_excelfile('test1')
A:pandas.tests.io.test_excel.df4->self.get_exceldf('test1', 'Sheet1', index_col=0, skip_footer=1)
A:pandas.tests.io.test_excel.actual->pandas.read_excel(f, 'one_column', squeeze=True)
A:pandas.tests.io.test_excel.float_expected->DataFrame([[1, 2], [3, 4]], columns=['col1', 'col2']).copy()
A:pandas.tests.io.test_excel.float_expected['IntCol']->float_expected['IntCol'].astype(float).astype(float)
A:pandas.tests.io.test_excel.exp->DataFrame([[1, 2], [3, 4]], columns=['col1', 'col2']).set_index(name)
A:pandas.tests.io.test_excel.expected['StrCol']->expected['StrCol'].apply(str).apply(str)
A:pandas.tests.io.test_excel.no_convert_float->DataFrame([[1, 2], [3, 4]], columns=['col1', 'col2']).copy().copy()
A:pandas.tests.io.test_excel.no_convert_float['StrCol']->no_convert_float['StrCol'].apply(str).apply(str)
A:pandas.tests.io.test_excel.expected['a']->expected['a'].astype('float64').astype('float64')
A:pandas.tests.io.test_excel.expected['b']->expected['b'].astype('float32').astype('float32')
A:pandas.tests.io.test_excel.dfs->dict(zip(sheets, dfs))
A:pandas.tests.io.test_excel.expected_keys->list(set(expected_keys))
A:pandas.tests.io.test_excel.df->DataFrame(np.random.randn(10, 3))
A:pandas.tests.io.test_excel.actual_header_none->read_excel(path, 'with_header', parse_cols=[0], header=None)
A:pandas.tests.io.test_excel.actual_header_zero->read_excel(path, 'with_header', parse_cols=[0], header=0)
A:pandas.tests.io.test_excel.expected_header_none->DataFrame(pd.Series([0], dtype='int64'))
A:pandas.tests.io.test_excel.expected_header_zero->DataFrame(columns=[0], dtype='int64')
A:pandas.tests.io.test_excel.refdf->pandas.DataFrame([[1, 'foo'], [2, 'bar'], [3, 'baz']], columns=['a', 'b'])
A:pandas.tests.io.test_excel.xlsdf_no_head->read_excel(reader, 'Data_no_head', header=None, names=['A', 'B'])
A:pandas.tests.io.test_excel.xlsdf_with_head->read_excel(reader, 'Data_with_head', index_col=None, names=['A', 'B'])
A:pandas.tests.io.test_excel.result->read_excel(path)
A:pandas.tests.io.test_excel.xls->ExcelFile(f)
A:pandas.tests.io.test_excel.book->xlrd.open_workbook(pth)
A:pandas.tests.io.test_excel.url_table->read_excel('file://localhost/' + localtable)
A:pandas.tests.io.test_excel.local_table->read_excel(localtable)
A:pandas.tests.io.test_excel.localtable->os.path.join(self.dirpath, 'test1' + self.ext)
A:pandas.tests.io.test_excel.str_path->os.path.join(self.dirpath, 'test1' + self.ext)
A:pandas.tests.io.test_excel.path_obj->LocalPath(abs_dir).join('test1' + self.ext)
A:pandas.tests.io.test_excel.abs_dir->os.path.abspath(self.dirpath)
A:pandas.tests.io.test_excel.f->open(filename, 'wb')
A:pandas.tests.io.test_excel.dfs_returned->read_excel(pth, sheetname=sheets)
A:pandas.tests.io.test_excel.mi->MultiIndex(levels=[['R_l0_g0', 'R_l0_g1', 'R_l0_g2', 'R_l0_g3', 'R_l0_g4'], ['R_l1_g0', 'R_l1_g1', 'R_l1_g2', 'R_l1_g3', 'R_l1_g4']], labels=[[0, 1, 2, 3, 4], [0, 1, 2, 3, 4]], names=['R0', 'R1'])
A:pandas.tests.io.test_excel.mi_file->os.path.join(self.dirpath, 'testmultiindex' + self.ext)
A:pandas.tests.io.test_excel.expected.index->MultiIndex(levels=[['R_l0_g0', 'R_l0_g1', 'R_l0_g2', 'R_l0_g3', 'R_l0_g4'], ['R_l1_g0', 'R_l1_g1', 'R_l1_g2', 'R_l1_g3', 'R_l1_g4']], labels=[[0, 1, 2, 3, 4], [0, 1, 2, 3, 4]], names=['R0', 'R1']).set_names(['ilvl1', 'ilvl2'])
A:pandas.tests.io.test_excel.expected.columns->MultiIndex(levels=[['R_l0_g0', 'R_l0_g1', 'R_l0_g2', 'R_l0_g3', 'R_l0_g4'], ['R_l1_g0', 'R_l1_g1', 'R_l1_g2', 'R_l1_g3', 'R_l1_g4']], labels=[[0, 1, 2, 3, 4], [0, 1, 2, 3, 4]], names=['R0', 'R1']).set_names(['c1', 'c2'])
A:pandas.tests.io.test_excel.act->pandas.read_excel(pth, index_col=list(range(r_idx_levels)), header=list(range(c_idx_levels)))
A:pandas.tests.io.test_excel.data->numpy.array([['R0C0', 'R0C1', 'R0C2', 'R0C3', 'R0C4'], ['R1C0', 'R1C1', 'R1C2', 'R1C3', 'R1C4'], ['R2C0', 'R2C1', 'R2C2', 'R2C3', 'R2C4'], ['R3C0', 'R3C1', 'R3C2', 'R3C3', 'R3C4'], ['R4C0', 'R4C1', 'R4C2', 'R4C3', 'R4C4']])
A:pandas.tests.io.test_excel.si->Index(['R_l0_g0', 'R_l0_g1', 'R_l0_g2', 'R_l0_g3', 'R_l0_g4'], name='R0')
A:pandas.tests.io.test_excel.in_file->os.path.join(self.dirpath, 'test_index_name_pre17' + self.ext)
A:pandas.tests.io.test_excel.df2['date_strings']->df2['date_strings'].dt.strftime('%m/%d/%Y').dt.strftime('%m/%d/%Y')
A:pandas.tests.io.test_excel.res->read_excel(xf, xf.sheet_names[0], header=parser_hdr)
A:pandas.tests.io.test_excel.check_skip->staticmethod(_skip_if_no_xlsxwriter)
A:pandas.tests.io.test_excel.self.prev_engine->get_option(self.option_name)
A:pandas.tests.io.test_excel.gt->DataFrame(np.random.randn(10, 2))
A:pandas.tests.io.test_excel.xl->ExcelFile(pth)
A:pandas.tests.io.test_excel.found_df->read_excel(reader, 'Data1')
A:pandas.tests.io.test_excel.found_df2->read_excel(reader, 'Data2')
A:pandas.tests.io.test_excel.recons->read_excel(reader, 'test1', index_col=[0, 1])
A:pandas.tests.io.test_excel.reader->ExcelFile(filename)
A:pandas.tests.io.test_excel.frame->DataFrame({'A': [123456, 123456], 'B': [123456, 123456]})
A:pandas.tests.io.test_excel.int_frame->DataFrame({'A': [123456, 123456], 'B': [123456, 123456]}).astype(np.int64)
A:pandas.tests.io.test_excel.recons2->read_excel(path, 'test1')
A:pandas.tests.io.test_excel.float_frame->DataFrame({'A': [123456, 123456], 'B': [123456, 123456]}).astype(float)
A:pandas.tests.io.test_excel.writer->ExcelWriter(path, engine=engine)
A:pandas.tests.io.test_excel.col_aliases->Index(['AA', 'X', 'Y', 'Z'])
A:pandas.tests.io.test_excel.rs->read_excel(reader, 'test1', index_col=None)
A:pandas.tests.io.test_excel.xp->DataFrame([[0.12, 0.23, 0.57], [12.32, 123123.2, 321321.2]], index=['A', 'B'], columns=['X', 'Y', 'Z'])
A:pandas.tests.io.test_excel.xf->ExcelFile(path)
A:pandas.tests.io.test_excel.tsf->self.tsframe.copy()
A:pandas.tests.io.test_excel.df_expected->DataFrame([[datetime(2014, 1, 31), datetime(1999, 9, 24)], [datetime(1998, 5, 26, 23, 33, 4), datetime(2014, 2, 28, 13, 5, 13)]], index=['DATE', 'DATETIME'], columns=['X', 'Y'])
A:pandas.tests.io.test_excel.writer1->ExcelWriter(filename1)
A:pandas.tests.io.test_excel.writer2->ExcelWriter(filename2, date_format='DD.MM.YYYY', datetime_format='DD.MM.YYYY HH-MM-SS')
A:pandas.tests.io.test_excel.reader1->ExcelFile(filename1)
A:pandas.tests.io.test_excel.reader2->ExcelFile(filename2)
A:pandas.tests.io.test_excel.rs1->read_excel(reader1, 'test1', index_col=None)
A:pandas.tests.io.test_excel.rs2->read_excel(reader2, 'test1', index_col=None)
A:pandas.tests.io.test_excel.arrays->numpy.arange(len(frame.index) * 2).reshape(2, -1)
A:pandas.tests.io.test_excel.new_index->pandas.MultiIndex.from_arrays(arrays, names=['first', 'second'])
A:pandas.tests.io.test_excel.new_cols_index->pandas.MultiIndex.from_tuples([(40, 1), (40, 2), (50, 1), (50, 2)])
A:pandas.tests.io.test_excel.fm->DataFrame({'A': [123456, 123456], 'B': [123456, 123456]}).columns.format(sparsify=False, adjoin=False, names=False)
A:pandas.tests.io.test_excel.tsframe->self.tsframe.copy()
A:pandas.tests.io.test_excel.tsframe.index->pandas.MultiIndex.from_arrays(new_index)
A:pandas.tests.io.test_excel.frame1->DataFrame({'a': [10, 20], 'b': [30, 40], 'c': [50, 60]})
A:pandas.tests.io.test_excel.frame2->DataFrame({'a': [10, 20], 'b': [30, 40], 'c': [50, 60]}).copy()
A:pandas.tests.io.test_excel.multi_index->pandas.MultiIndex.from_tuples([(70, 80), (90, 100)])
A:pandas.tests.io.test_excel.frame3->read_excel(reader, 'test1')
A:pandas.tests.io.test_excel.write_frame->pandas.DataFrame.from_items([('A', datetimes)])
A:pandas.tests.io.test_excel.read_frame->read_excel(path, true_values=['foo'], false_values=['bar'])
A:pandas.tests.io.test_excel.bio->BytesIO()
A:pandas.tests.io.test_excel.reread_df->read_excel(bio)
A:pandas.tests.io.test_excel.expected.mixed->DataFrame([[1, 2], [3, 4]], columns=['col1', 'col2']).mixed.apply(str)
A:pandas.tests.io.test_excel.expected.numeric->DataFrame([[1, 2], [3, 4]], columns=['col1', 'col2']).numeric.astype('int64')
A:pandas.tests.io.test_excel.read->read_excel(path, 'Sheet1', header=0)
A:pandas.tests.io.test_excel.methods->filter(operator.methodcaller('startswith', 'test_'), dir(cls))
A:pandas.tests.io.test_excel.xlsx_style->pandas.io.excel._Openpyxl1Writer._convert_to_style(hstyle)
A:pandas.tests.io.test_excel.font_color->openpyxl.styles.Color('00FF0000')
A:pandas.tests.io.test_excel.font->openpyxl.styles.Font(bold=True, color=font_color)
A:pandas.tests.io.test_excel.side->openpyxl.styles.Side(style=styles.borders.BORDER_THIN)
A:pandas.tests.io.test_excel.border->openpyxl.styles.Border(top=side, right=side, bottom=side, left=side)
A:pandas.tests.io.test_excel.alignment->openpyxl.styles.Alignment(horizontal='center', vertical='top')
A:pandas.tests.io.test_excel.fill_color->openpyxl.styles.Color(rgb='006666FF', tint=0.3)
A:pandas.tests.io.test_excel.fill->openpyxl.styles.PatternFill(patternType='solid', fgColor=fill_color)
A:pandas.tests.io.test_excel.number_format->openpyxl.styles.NumberFormat(format_code='0.00')
A:pandas.tests.io.test_excel.protection->openpyxl.styles.Protection(locked=True, hidden=False)
A:pandas.tests.io.test_excel.kw->pandas.io.excel._Openpyxl22Writer._convert_to_style_kwargs(hstyle)
A:pandas.tests.io.test_excel.sty_kwargs->pandas.io.excel._Openpyxl22Writer._convert_to_style_kwargs(sty_merged)
A:pandas.tests.io.test_excel.openpyxl_sty_merged->openpyxl.styles.Style(**sty_kwargs)
A:pandas.tests.io.test_excel.cols->pandas.MultiIndex.from_tuples([('site', ''), ('2014', 'height'), ('2014', 'weight')])
A:pandas.tests.io.test_excel.xls_style->pandas.io.excel._XlwtWriter._convert_to_style(hstyle)
A:pandas.tests.io.test_excel.col_format->write_workbook.add_format({'num_format': num_format})
A:pandas.tests.io.test_excel.read_workbook->openpyxl.load_workbook(path)
A:pandas.tests.io.test_excel.read_worksheet->openpyxl.load_workbook(path).get_sheet_by_name(name='Sheet1')
A:pandas.tests.io.test_excel.cell->openpyxl.load_workbook(path).get_sheet_by_name(name='Sheet1').cell('B2')
A:pandas.tests.io.test_excel.panel->pandas.util.testing.makePanel()
A:pandas.tests.io.test_excel.styled->DataFrame(np.random.randn(10, 3)).style.apply(style, axis=None)
pandas.tests.io.test_excel.ExcelWriterBase(SharedItems)
pandas.tests.io.test_excel.ExcelWriterBase.setup_method(self,method)
pandas.tests.io.test_excel.ExcelWriterBase.teardown_method(self,method)
pandas.tests.io.test_excel.ExcelWriterBase.test_basics_with_nan(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_bool_types(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_bytes_io(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_colaliases(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_datetimes(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_duplicated_columns(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_excel_010_hemstring(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_excel_010_hemstring_raises_NotImplementedError(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_excel_date_datetime_format(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_excel_roundtrip_datetime(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_excel_roundtrip_indexname(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_excel_sheet_by_name_raise(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_excelwriter_contextmanager(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_float_types(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_freeze_panes(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_inf_roundtrip(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_int_types(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_invalid_columns(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_mixed(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_roundtrip(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_roundtrip_indexlabels(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_sheets(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_swapped_columns(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_to_excel_float_format(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_to_excel_multiindex(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_to_excel_multiindex_cols(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_to_excel_multiindex_dates(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_to_excel_multiindex_nan_label(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_to_excel_multiindex_no_write_index(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_to_excel_output_encoding(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_to_excel_periodindex(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_to_excel_unicode_filename(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_true_and_false_value_options(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_tsframe(self)
pandas.tests.io.test_excel.ExcelWriterBase.test_write_lists_dict(self)
pandas.tests.io.test_excel.ExcelWriterEngineTests(object)
pandas.tests.io.test_excel.ExcelWriterEngineTests.test_ExcelWriter_dispatch(self)
pandas.tests.io.test_excel.ExcelWriterEngineTests.test_register_writer(self)
pandas.tests.io.test_excel.Openpyxl20Tests(ExcelWriterBase)
pandas.tests.io.test_excel.Openpyxl20Tests.test_to_excel_styleconverter(self)
pandas.tests.io.test_excel.Openpyxl20Tests.test_write_cells_merge_styled(self)
pandas.tests.io.test_excel.Openpyxl22Tests(ExcelWriterBase)
pandas.tests.io.test_excel.Openpyxl22Tests.test_to_excel_styleconverter(self)
pandas.tests.io.test_excel.Openpyxl22Tests.test_write_cells_merge_styled(self)
pandas.tests.io.test_excel.OpenpyxlTests(ExcelWriterBase)
pandas.tests.io.test_excel.OpenpyxlTests.test_to_excel_styleconverter(self)
pandas.tests.io.test_excel.OpenpyxlTests_NoMerge(ExcelWriterBase)
pandas.tests.io.test_excel.ReadingTestsBase(SharedItems)
pandas.tests.io.test_excel.ReadingTestsBase.setup_method(self,method)
pandas.tests.io.test_excel.ReadingTestsBase.test_date_conversion_overflow(self)
pandas.tests.io.test_excel.ReadingTestsBase.test_excel_cell_error_na(self)
pandas.tests.io.test_excel.ReadingTestsBase.test_excel_passes_na(self)
pandas.tests.io.test_excel.ReadingTestsBase.test_excel_stop_iterator(self)
pandas.tests.io.test_excel.ReadingTestsBase.test_excel_table(self)
pandas.tests.io.test_excel.ReadingTestsBase.test_excel_table_sheet_by_index(self)
pandas.tests.io.test_excel.ReadingTestsBase.test_parse_cols_int(self)
pandas.tests.io.test_excel.ReadingTestsBase.test_parse_cols_list(self)
pandas.tests.io.test_excel.ReadingTestsBase.test_parse_cols_str(self)
pandas.tests.io.test_excel.ReadingTestsBase.test_read_excel_blank(self)
pandas.tests.io.test_excel.ReadingTestsBase.test_read_excel_blank_with_header(self)
pandas.tests.io.test_excel.ReadingTestsBase.test_read_one_empty_col_no_header(self)
pandas.tests.io.test_excel.ReadingTestsBase.test_read_one_empty_col_with_header(self)
pandas.tests.io.test_excel.ReadingTestsBase.test_reader_converters(self)
pandas.tests.io.test_excel.ReadingTestsBase.test_reader_dtype(self)
pandas.tests.io.test_excel.ReadingTestsBase.test_reader_special_dtypes(self)
pandas.tests.io.test_excel.ReadingTestsBase.test_reading_all_sheets(self)
pandas.tests.io.test_excel.ReadingTestsBase.test_reading_all_sheets_with_blank(self)
pandas.tests.io.test_excel.ReadingTestsBase.test_reading_multiple_specific_sheets(self)
pandas.tests.io.test_excel.ReadingTestsBase.test_set_column_names_in_parameter(self)
pandas.tests.io.test_excel.SharedItems(object)
pandas.tests.io.test_excel.SharedItems.get_csv_refdf(self,basename)
pandas.tests.io.test_excel.SharedItems.get_exceldf(self,basename,*args,**kwds)
pandas.tests.io.test_excel.SharedItems.get_excelfile(self,basename)
pandas.tests.io.test_excel.SharedItems.setup_method(self,method)
pandas.tests.io.test_excel.XlrdTests(ReadingTestsBase)
pandas.tests.io.test_excel.XlrdTests.test_creating_and_reading_multiple_sheets(self)
pandas.tests.io.test_excel.XlrdTests.test_excel_multindex_roundtrip(self)
pandas.tests.io.test_excel.XlrdTests.test_excel_oldindex_format(self)
pandas.tests.io.test_excel.XlrdTests.test_excel_read_buffer(self)
pandas.tests.io.test_excel.XlrdTests.test_read_excel_bool_header_arg(self)
pandas.tests.io.test_excel.XlrdTests.test_read_excel_chunksize(self)
pandas.tests.io.test_excel.XlrdTests.test_read_excel_multiindex(self)
pandas.tests.io.test_excel.XlrdTests.test_read_excel_multiindex_empty_level(self)
pandas.tests.io.test_excel.XlrdTests.test_read_excel_parse_dates(self)
pandas.tests.io.test_excel.XlrdTests.test_read_excel_skiprows_list(self)
pandas.tests.io.test_excel.XlrdTests.test_read_excel_squeeze(self)
pandas.tests.io.test_excel.XlrdTests.test_read_from_file_url(self)
pandas.tests.io.test_excel.XlrdTests.test_read_from_http_url(self)
pandas.tests.io.test_excel.XlrdTests.test_read_from_pathlib_path(self)
pandas.tests.io.test_excel.XlrdTests.test_read_from_py_localpath(self)
pandas.tests.io.test_excel.XlrdTests.test_read_from_s3_url(self)
pandas.tests.io.test_excel.XlrdTests.test_read_xlrd_Book(self)
pandas.tests.io.test_excel.XlrdTests.test_reader_closes_file(self)
pandas.tests.io.test_excel.XlrdTests.test_reader_seconds(self)
pandas.tests.io.test_excel.XlsReaderTests(XlrdTests)
pandas.tests.io.test_excel.XlsmReaderTests(XlrdTests)
pandas.tests.io.test_excel.XlsxReaderTests(XlrdTests)
pandas.tests.io.test_excel.XlsxWriterTests(ExcelWriterBase)
pandas.tests.io.test_excel.XlsxWriterTests.test_column_format(self)
pandas.tests.io.test_excel.XlsxWriterTests_NoMerge(ExcelWriterBase)
pandas.tests.io.test_excel.XlwtTests(ExcelWriterBase)
pandas.tests.io.test_excel.XlwtTests.test_excel_multiindex_columns_and_index_true(self)
pandas.tests.io.test_excel.XlwtTests.test_excel_multiindex_index(self)
pandas.tests.io.test_excel.XlwtTests.test_excel_raise_error_on_multiindex_columns_and_no_index(self)
pandas.tests.io.test_excel.XlwtTests.test_to_excel_styleconverter(self)
pandas.tests.io.test_excel.XlwtTests_NoMerge(ExcelWriterBase)
pandas.tests.io.test_excel._skip_if_no_excelsuite()
pandas.tests.io.test_excel._skip_if_no_openpyxl()
pandas.tests.io.test_excel._skip_if_no_s3fs()
pandas.tests.io.test_excel._skip_if_no_xlrd()
pandas.tests.io.test_excel._skip_if_no_xlsxwriter()
pandas.tests.io.test_excel._skip_if_no_xlwt()
pandas.tests.io.test_excel.raise_on_incompat_version(major_ver)
pandas.tests.io.test_excel.raise_wrapper(major_ver)
pandas.tests.io.test_excel.skip_openpyxl_gt21(cls)
pandas.tests.io.test_excel.skip_openpyxl_lt22(cls)
pandas.tests.io.test_excel.test_styler_to_excel(engine)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/test_s3.py----------------------------------------
pandas.tests.io.test_s3.TestS3URL(object)
pandas.tests.io.test_s3.TestS3URL.test_is_s3_url(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/generate_legacy_storage_files.py----------------------------------------
A:pandas.tests.io.generate_legacy_storage_files._loose_version->LooseVersion(pandas.__version__)
A:pandas.tests.io.generate_legacy_storage_files.arr->numpy.arange(15, dtype=np.float64)
A:pandas.tests.io.generate_legacy_storage_files.bseries->SparseSeries(arr, index=date_index, kind='block')
A:pandas.tests.io.generate_legacy_storage_files.date_index->bdate_range('1/1/2011', periods=len(arr))
A:pandas.tests.io.generate_legacy_storage_files.dates->bdate_range('1/1/2011', periods=10)
A:pandas.tests.io.generate_legacy_storage_files.scalars->dict(timestamp=Timestamp('20130101'), period=Period('2012', 'M'))
A:pandas.tests.io.generate_legacy_storage_files.index->dict(int=Index(np.arange(10)), date=date_range('20130101', periods=10), period=period_range('2013-01-01', freq='M', periods=10))
A:pandas.tests.io.generate_legacy_storage_files.mi->dict(reg2=MultiIndex.from_tuples(tuple(zip(*[[u'bar', u'bar', u'baz', u'baz', u'foo', u'foo', u'qux', u'qux'], [u'one', u'two', u'one', u'two', u'one', u'two', u'one', u'two']])), names=[u'first', u'second']))
A:pandas.tests.io.generate_legacy_storage_files.series->dict(float=Series(data[u'A']), int=Series(data[u'B']), mixed=Series(data[u'E']), ts=Series(np.arange(10).astype(np.int64), index=date_range('20130101', periods=10)), mi=Series(np.arange(5).astype(np.float64), index=MultiIndex.from_tuples(tuple(zip(*[[1, 1, 2, 2, 2], [3, 4, 3, 4, 5]])), names=[u'one', u'two'])), dup=Series(np.arange(5).astype(np.float64), index=[u'A', u'B', u'C', u'D', u'A']), cat=Series(Categorical([u'foo', u'bar', u'baz'])), dt=Series(date_range('20130101', periods=5)), dt_tz=Series(date_range('20130101', periods=5, tz='US/Eastern')), period=Series([Period('2000Q1')] * 5))
A:pandas.tests.io.generate_legacy_storage_files.mixed_dup_df->DataFrame(data)
A:pandas.tests.io.generate_legacy_storage_files.mixed_dup_df.columns->list(u'ABCDA')
A:pandas.tests.io.generate_legacy_storage_files.frame->dict(float=DataFrame({u'A': series[u'float'], u'B': series[u'float'] + 1}), int=DataFrame({u'A': series[u'int'], u'B': series[u'int'] + 1}), mixed=DataFrame({k: data[k] for k in [u'A', u'B', u'C', u'D']}), mi=DataFrame({u'A': np.arange(5).astype(np.float64), u'B': np.arange(5).astype(np.int64)}, index=MultiIndex.from_tuples(tuple(zip(*[[u'bar', u'bar', u'baz', u'baz', u'baz'], [u'one', u'two', u'one', u'two', u'three']])), names=[u'first', u'second'])), dup=DataFrame(np.arange(15).reshape(5, 3).astype(np.float64), columns=[u'A', u'B', u'A']), cat_onecol=DataFrame({u'A': Categorical([u'foo', u'bar'])}), cat_and_float=DataFrame({u'A': Categorical([u'foo', u'bar', u'baz']), u'B': np.arange(3).astype(np.int64)}), mixed_dup=mixed_dup_df, dt_mixed_tzs=DataFrame({u'A': Timestamp('20130102', tz='US/Eastern'), u'B': Timestamp('20130603', tz='CET')}, index=range(5)))
A:pandas.tests.io.generate_legacy_storage_files.mixed_dup_panel->Panel({u'ItemA': frame[u'float'], u'ItemB': frame[u'int']})
A:pandas.tests.io.generate_legacy_storage_files.panel->dict(float=Panel({u'ItemA': frame[u'float'], u'ItemB': frame[u'float'] + 1}), dup=Panel(np.arange(30).reshape(3, 5, 2).astype(np.float64), items=[u'A', u'B', u'A']), mixed_dup=mixed_dup_panel)
A:pandas.tests.io.generate_legacy_storage_files.cat->dict(int8=Categorical(list('abcdefg')), int16=Categorical(np.arange(1000)), int32=Categorical(np.arange(10000)))
A:pandas.tests.io.generate_legacy_storage_files.timestamp->dict(normal=Timestamp('2011-01-01'), nat=NaT, tz=Timestamp('2011-01-01', tz='US/Eastern'), freq=Timestamp('2011-01-01', freq='D'), both=Timestamp('2011-01-01', tz='Asia/Tokyo', freq='M'))
A:pandas.tests.io.generate_legacy_storage_files.data->create_data()
A:pandas.tests.io.generate_legacy_storage_files.pth->'{0}.msgpack'.format(platform_name())
A:pandas.tests.io.generate_legacy_storage_files.fh->open(os.path.join(output_dir, pth), 'wb')
A:pandas.tests.io.generate_legacy_storage_files.output_dir->str(sys.argv[1])
A:pandas.tests.io.generate_legacy_storage_files.storage_type->str(sys.argv[2])
A:pandas.tests.io.generate_legacy_storage_files.compress_type->str(sys.argv[3])
pandas.tests.io.generate_legacy_storage_files._create_sp_frame()
pandas.tests.io.generate_legacy_storage_files._create_sp_series()
pandas.tests.io.generate_legacy_storage_files._create_sp_tsseries()
pandas.tests.io.generate_legacy_storage_files._u(x)
pandas.tests.io.generate_legacy_storage_files.create_data()
pandas.tests.io.generate_legacy_storage_files.create_msgpack_data()
pandas.tests.io.generate_legacy_storage_files.create_pickle_data()
pandas.tests.io.generate_legacy_storage_files.platform_name()
pandas.tests.io.generate_legacy_storage_files.write_legacy_file()
pandas.tests.io.generate_legacy_storage_files.write_legacy_msgpack(output_dir,compress)
pandas.tests.io.generate_legacy_storage_files.write_legacy_pickles(output_dir)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/test_common.py----------------------------------------
A:pandas.tests.io.test_common.expanded_name->pandas.io.common._expand_user(filename)
A:pandas.tests.io.test_common.rel_path->pandas.io.common._stringify_path(Path('.'))
A:pandas.tests.io.test_common.redundant_path->pandas.io.common._stringify_path(Path('foo//bar'))
A:pandas.tests.io.test_common.path->os.path.join('foo', 'bar')
A:pandas.tests.io.test_common.abs_path->os.path.abspath(path)
A:pandas.tests.io.test_common.lpath->LocalPath(path)
A:pandas.tests.io.test_common.(filepath_or_buffer, _, _)->pandas.io.common.get_filepath_or_buffer(input_buffer)
A:pandas.tests.io.test_common.input_buffer->StringIO()
A:pandas.tests.io.test_common.reader->read_csv(StringIO(self.data1), chunksize=1)
A:pandas.tests.io.test_common.result->concat(reader, ignore_index=True)
A:pandas.tests.io.test_common.expected->read_csv(StringIO(self.data1))
A:pandas.tests.io.test_common.it->read_csv(StringIO(self.data1), chunksize=1)
A:pandas.tests.io.test_common.first->next(it)
A:pandas.tests.io.test_common.self.mmap_file->os.path.join(tm.get_data_path(), 'test_mmap.csv')
A:pandas.tests.io.test_common.non_file->StringIO('I am not a file')
A:pandas.tests.io.test_common.target->open(self.mmap_file, 'r')
A:pandas.tests.io.test_common.wrapper->pandas.io.common.MMapWrapper(target)
A:pandas.tests.io.test_common.attrs->dir(wrapper.mmap)
A:pandas.tests.io.test_common.lines->open(self.mmap_file, 'r').readlines()
A:pandas.tests.io.test_common.next_line->next(wrapper)
pandas.tests.io.test_common.TestCommonIOCapabilities(object)
pandas.tests.io.test_common.TestCommonIOCapabilities.test_expand_user(self)
pandas.tests.io.test_common.TestCommonIOCapabilities.test_expand_user_normal_path(self)
pandas.tests.io.test_common.TestCommonIOCapabilities.test_get_filepath_or_buffer_with_buffer(self)
pandas.tests.io.test_common.TestCommonIOCapabilities.test_get_filepath_or_buffer_with_path(self)
pandas.tests.io.test_common.TestCommonIOCapabilities.test_iterator(self)
pandas.tests.io.test_common.TestCommonIOCapabilities.test_stringify_path_localpath(self)
pandas.tests.io.test_common.TestCommonIOCapabilities.test_stringify_path_pathlib(self)
pandas.tests.io.test_common.TestMMapWrapper(object)
pandas.tests.io.test_common.TestMMapWrapper.setup_method(self,method)
pandas.tests.io.test_common.TestMMapWrapper.test_constructor_bad_file(self)
pandas.tests.io.test_common.TestMMapWrapper.test_get_attr(self)
pandas.tests.io.test_common.TestMMapWrapper.test_next(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/json/test_json_table_schema.py----------------------------------------
A:pandas.tests.io.json.test_json_table_schema.self.df->DataFrame({'A': [1, 2, 3, 4], 'B': ['a', 'b', 'c', 'c'], 'C': pd.date_range('2016-01-01', freq='d', periods=4), 'D': pd.timedelta_range('1H', periods=4, freq='T'), 'E': pd.Series(pd.Categorical(['a', 'b', 'c', 'c'])), 'F': pd.Series(pd.Categorical(['a', 'b', 'c', 'c'], ordered=True)), 'G': [1.0, 2.0, 3, 4.0], 'H': pd.date_range('2016-01-01', freq='d', periods=4, tz='US/Central')}, index=pd.Index(range(4), name='idx'))
A:pandas.tests.io.json.test_json_table_schema.result->pandas.DataFrame(np.random.randn(4, 4), index=pd.MultiIndex.from_product([('A', 'B'), ('a', 'b')])).to_json(orient='table')
A:pandas.tests.io.json.test_json_table_schema.s->pandas.Series(pd.Categorical(['a', 'b', 'a']))
A:pandas.tests.io.json.test_json_table_schema.df->pandas.DataFrame(np.random.randn(4, 4), index=pd.MultiIndex.from_product([('A', 'B'), ('a', 'b')]))
A:pandas.tests.io.json.test_json_table_schema.idx->pandas.period_range('2016', freq='Q-JAN', periods=2)
A:pandas.tests.io.json.test_json_table_schema.expected->OrderedDict([('schema', {'fields': fields, 'primaryKey': ['idx']}), ('data', [OrderedDict([('idx', 0), ('values', 'a')]), OrderedDict([('idx', 1), ('values', 'b')]), OrderedDict([('idx', 2), ('values', 'a')])])])
A:pandas.tests.io.json.test_json_table_schema.data->pandas.Series(1, pd.MultiIndex.from_product([('a', 'b'), ('c', 'd')], names=['n1', None]))
A:pandas.tests.io.json.test_json_table_schema.arr->pandas.CategoricalIndex(data, ordered=ordered, name='cats')
A:pandas.tests.io.json.test_json_table_schema.js->json.loads(result)
pandas.tests.io.json.test_json_table_schema.TestBuildSchema(object)
pandas.tests.io.json.test_json_table_schema.TestBuildSchema.setup_method(self,method)
pandas.tests.io.json.test_json_table_schema.TestBuildSchema.test_build_table_schema(self)
pandas.tests.io.json.test_json_table_schema.TestBuildSchema.test_multiindex(self)
pandas.tests.io.json.test_json_table_schema.TestBuildSchema.test_series(self)
pandas.tests.io.json.test_json_table_schema.TestBuildSchema.tets_series_unnamed(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient(object)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.setup_method(self,method)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_build_series(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_categorical(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_date_format_raises(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_make_field_categorical(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_make_field_datetime(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_make_field_float(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_make_field_int(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_mi_falsey_name(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_overlapping_names(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_set_default_names_mi_partion(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_set_default_names_mi_set(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_set_default_names_mi_unset(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_set_default_names_set(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_set_default_names_unset(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_timestamp_in_columns(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_to_json(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_to_json_categorical_index(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_to_json_float_index(self)
pandas.tests.io.json.test_json_table_schema.TestTableOrient.test_to_json_period_index(self)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType(object)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_bool_data(self)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_bool_dtypes(self)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_categorical_data(self)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_categorical_dtypes(self)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_date_data(self)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_date_dtypes(self)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_float_data(self)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_float_dtypes(self)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_int_data(self)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_int_dtypes(self)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_string_data(self)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_string_dtypes(self)
pandas.tests.io.json.test_json_table_schema.TestTableSchemaType.test_as_json_table_type_timedelta_dtypes(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/json/test_normalize.py----------------------------------------
A:pandas.tests.io.json.test_normalize.result->nested_to_record(data)
A:pandas.tests.io.json.test_normalize.expected->DataFrame(testdata)
A:pandas.tests.io.json.test_normalize.expected['state']->numpy.array(['Florida', 'Ohio']).repeat([3, 2])
A:pandas.tests.io.json.test_normalize.testjson->(b'[{"\xc3\x9cnic\xc3\xb8de":0,"sub":{"A":1, "B":2}},' + b'{"\xc3\x9cnic\xc3\xb8de":1,"sub":{"A":3, "B":4}}]').decode('utf8')
A:pandas.tests.io.json.test_normalize.data->dict(flat1=1, dict1=dict(c=1, d=2), nested=dict(e=dict(c=1, d=2), d=2))
A:pandas.tests.io.json.test_normalize.j->json_normalize(data=i['Trades'], record_path=[['general', 'stocks']], meta=[['general', 'tradeid'], ['general', 'trade_version']], errors='ignore')
pandas.tests.io.json.test_normalize.TestJSONNormalize(object)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_empty_array(self)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_meta_name_conflict(self)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_more_deeply_nested(self,deep_nested)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_non_ascii_key(self)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_record_prefix(self,state_data)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_shallow_nested(self)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_simple_normalize(self,state_data)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_simple_normalize_with_separator(self,deep_nested)
pandas.tests.io.json.test_normalize.TestJSONNormalize.test_simple_records(self)
pandas.tests.io.json.test_normalize.TestNestedToRecord(object)
pandas.tests.io.json.test_normalize.TestNestedToRecord.test_flat_stays_flat(self)
pandas.tests.io.json.test_normalize.TestNestedToRecord.test_json_normalize_errors(self)
pandas.tests.io.json.test_normalize.TestNestedToRecord.test_nested_flattens(self)
pandas.tests.io.json.test_normalize.TestNestedToRecord.test_one_level_deep_flattens(self)
pandas.tests.io.json.test_normalize.deep_nested()
pandas.tests.io.json.test_normalize.state_data()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/json/test_ujson.py----------------------------------------
A:pandas.tests.io.json.test_ujson.sut->decimal.Decimal('0.99999999999999944')
A:pandas.tests.io.json.test_ujson.encoded->pandas._libs.json.encode(rng, date_unit='ns')
A:pandas.tests.io.json.test_ujson.decoded->Series(ujson.decode(ujson.encode(ts, date_unit='ns')))
A:pandas.tests.io.json.test_ujson.output->pandas._libs.json.loads(input_dumps, numpy=True, labelled=True)
A:pandas.tests.io.json.test_ujson.savedlocale->locale.getlocale(locale.LC_NUMERIC)
A:pandas.tests.io.json.test_ujson.input->pandas._libs.json.dumps([{'a': 42, 'b': 23}, {'c': 17}])
A:pandas.tests.io.json.test_ujson.enc->pandas._libs.json.encode(s)
A:pandas.tests.io.json.test_ujson.dec->pandas._libs.json.decode(enc)
A:pandas.tests.io.json.test_ujson.ts->Series(np.random.randn(len(rng)), index=rng)
A:pandas.tests.io.json.test_ujson.expected->calendar.timegm(tup)
A:pandas.tests.io.json.test_ujson.test->datetime.time(10, 12, 15, 343243, dateutil.tz.tzutc())
A:pandas.tests.io.json.test_ujson.val->datetime.datetime(2013, 8, 17, 21, 17, 12, 215504)
A:pandas.tests.io.json.test_ujson.stamp->Timestamp(val)
A:pandas.tests.io.json.test_ujson.roundtrip->pandas._libs.json.decode(ujson.encode(val, date_unit='ns'))
A:pandas.tests.io.json.test_ujson.dec1->pandas._libs.json.decode(input)
A:pandas.tests.io.json.test_ujson.dec2->pandas._libs.json.decode(str(input))
A:pandas.tests.io.json.test_ujson.input.member->O2()
A:pandas.tests.io.json.test_ujson.f->filelike()
A:pandas.tests.io.json.test_ujson.nested->Nested()
A:pandas.tests.io.json.test_ujson.base->'å'.encode('utf-8')
A:pandas.tests.io.json.test_ujson.quote->pandas.compat.str_to_bytes('"')
A:pandas.tests.io.json.test_ujson.o->DictTest()
A:pandas.tests.io.json.test_ujson.b->numpy.bool(True)
A:pandas.tests.io.json.test_ujson.inpt->arr.reshape((5, 5, 4)).astype(dtype)
A:pandas.tests.io.json.test_ujson.outp->Index(ujson.decode(ujson.encode(i, orient='index'), numpy=True), name='index')
A:pandas.tests.io.json.test_ujson.num->numpy.float64(np.finfo(np.float64).max / 10)
A:pandas.tests.io.json.test_ujson.arr->arr.reshape((5, 5, 4)).reshape((5, 5, 4))
A:pandas.tests.io.json.test_ujson.expectedvals->numpy.array([42, 31, 24, 99, 2.4, 78], dtype=int).reshape((3, 2))
A:pandas.tests.io.json.test_ujson.df->DataFrame([[1, 2, 3], [4, 5, 6]], index=['a', 'b'], columns=['x', 'y', 'z'])
A:pandas.tests.io.json.test_ujson.s->set([1, 2, 3, 4, 5, 6, 7, 8, 9])
A:pandas.tests.io.json.test_ujson.exp->Series([10, 20, 30, 40, 50, 60], index=['6', '7', '8', '9', '10', '15'])
A:pandas.tests.io.json.test_ujson.exp_np->Series(np.array([10, 20, 30, 40, 50, 60]))
A:pandas.tests.io.json.test_ujson.exp_pd->Series([10, 20, 30, 40, 50, 60])
A:pandas.tests.io.json.test_ujson.i->Index([23, 45, 18, 98, 43, 11], name='index')
A:pandas.tests.io.json.test_ujson.rng->date_range('1/1/2000', periods=20)
A:pandas.tests.io.json.test_ujson.idx_values->Series(ujson.decode(ujson.encode(ts, date_unit='ns'))).index.values.astype(np.int64)
A:pandas.tests.io.json.test_ujson.decoded.index->DatetimeIndex(idx_values)
pandas.tests.io.json.test_ujson.NumpyJSONTests(object)
pandas.tests.io.json.test_ujson.NumpyJSONTests.testArrayNumpyExcept(self)
pandas.tests.io.json.test_ujson.NumpyJSONTests.testArrayNumpyLabelled(self)
pandas.tests.io.json.test_ujson.NumpyJSONTests.testArrays(self)
pandas.tests.io.json.test_ujson.NumpyJSONTests.testBool(self)
pandas.tests.io.json.test_ujson.NumpyJSONTests.testBoolArray(self)
pandas.tests.io.json.test_ujson.NumpyJSONTests.testFloat(self)
pandas.tests.io.json.test_ujson.NumpyJSONTests.testFloatArray(self)
pandas.tests.io.json.test_ujson.NumpyJSONTests.testFloatMax(self)
pandas.tests.io.json.test_ujson.NumpyJSONTests.testInt(self)
pandas.tests.io.json.test_ujson.NumpyJSONTests.testIntArray(self)
pandas.tests.io.json.test_ujson.NumpyJSONTests.testIntMax(self)
pandas.tests.io.json.test_ujson.NumpyJSONTests.testOdArray(self)
pandas.tests.io.json.test_ujson.PandasJSONTests(object)
pandas.tests.io.json.test_ujson.PandasJSONTests.testDataFrame(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.testDataFrameNested(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.testDataFrameNumpy(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.testDataFrameNumpyLabelled(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.testIndex(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.testSeries(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.testSeriesNested(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.test_datetimeindex(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.test_decodeArrayEmpty(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.test_decodeArrayFaultyUnicode(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.test_decodeArrayLeadingCommaFail(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.test_decodeArrayOneItem(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.test_decodeArrayOnlyCommaFail(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.test_decodeArrayTrailingCommaFail(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.test_decodeArrayUnmatchedBracketFail(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.test_decodeArrayWithBigInt(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.test_decodeBigValue(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.test_decodeFloatingPointAdditionalTests(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.test_decodeSmallValue(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.test_decodeTooBigValue(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.test_decodeTooSmallValue(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.test_decodeVeryTooBigValue(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.test_decodeVeryTooSmallValue(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.test_decodeWithTrailingNonWhitespaces(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.test_decodeWithTrailingWhitespaces(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.test_encodeBigSet(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.test_encodeEmptySet(self)
pandas.tests.io.json.test_ujson.PandasJSONTests.test_encodeSet(self)
pandas.tests.io.json.test_ujson.UltraJSONTests(object)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_datetime_units(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decimalDecodeTestPrecise(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeArrayDepthTooBig(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeBigEscape(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeBrokenArrayEnd(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeBrokenArrayStart(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeBrokenDictKeyTypeLeakTest(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeBrokenDictLeakTest(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeBrokenListLeakTest(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeBrokenObjectEnd(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeBrokenObjectStart(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeDictWithNoColonOrValue(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeDictWithNoKey(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeDictWithNoValue(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeFalseBroken(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeFromUnicode(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeJibberish(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeNullBroken(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeNullCharacter(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeNumberWith32bitSignBit(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeNumericIntExpE(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeNumericIntExpEMinus(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeNumericIntExpEPLUS(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeNumericIntExpe(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeNumericIntExpeMinus(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeNumericIntExpePLUS(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeNumericIntNeg(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeNumericIntPos(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeObjectDepthTooBig(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeStringBadEscape(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeStringUntermEscapeSequence(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeStringUnterminated(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeTrueBroken(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_decodeUnicodeConversion(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_defaultHandler(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_doubleLongDecimalIssue(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_doubleLongIssue(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_doublePrecisionTest(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_dumpFileArgsError(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_dumpToFile(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_dumpToFileLikeObject(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeArrayInArray(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeArrayOfDoubles(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeArrayOfNestedArrays(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeBigEscape(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeControlEscaping(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeDateConversion(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeDatetimeConversion(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeDecimal(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeDecodeLongDecimal(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeDictConversion(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeDictWithUnicodeKeys(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeDoubleConversion(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeDoubleInf(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeDoubleNan(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeDoubleNegConversion(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeDoubleNegInf(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeDoubleTinyExponential(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeFalseConversion(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeIntConversion(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeIntNegConversion(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeListConversion(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeListLongConversion(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeLongConversion(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeLongNegConversion(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeNonCLocale(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeNoneConversion(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeNullCharacter(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeNumericOverflow(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeNumericOverflowNested(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeRecursionMax(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeStringConversion(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeStringConversion2(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeTimeConversion(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeTimeConversion_dateutil(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeTimeConversion_pytz(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeToUTF8(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeTrueConversion(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeUnicode4BytesUTF8(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeUnicode4BytesUTF8Fail(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeUnicode4BytesUTF8Highest(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeUnicodeConversion1(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeUnicodeConversion2(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeUnicodeSurrogatePair(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_encodeWithDecimal(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_invalidDoublePrecision(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_loadFile(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_loadFileArgsError(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_loadFileLikeObject(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_nat(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_npy_nat(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_numericIntExp(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_numericIntFrcExp(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_toDict(self)
pandas.tests.io.json.test_ujson.UltraJSONTests.test_version(self)
pandas.tests.io.json.test_ujson._clean_dict(d)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/json/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/json/test_pandas.py----------------------------------------
A:pandas.tests.io.json.test_pandas._seriesd->pandas.util.testing.getSeriesData()
A:pandas.tests.io.json.test_pandas._tsd->pandas.util.testing.getTimeSeriesData()
A:pandas.tests.io.json.test_pandas._frame->DataFrame(_seriesd)
A:pandas.tests.io.json.test_pandas._frame2->DataFrame(_seriesd, columns=['D', 'C', 'B', 'A'])
A:pandas.tests.io.json.test_pandas._intframe->DataFrame(dict(((k, v.astype(np.int64)) for (k, v) in compat.iteritems(_seriesd))))
A:pandas.tests.io.json.test_pandas._tsframe->DataFrame(_tsd)
A:pandas.tests.io.json.test_pandas._cat_frame->DataFrame(_seriesd).copy()
A:pandas.tests.io.json.test_pandas._cat_frame.index->pandas.CategoricalIndex(cat, name='E')
A:pandas.tests.io.json.test_pandas._cat_frame['E']->list(reversed(cat))
A:pandas.tests.io.json.test_pandas._cat_frame['sort']->numpy.arange(len(_cat_frame), dtype='int64')
A:pandas.tests.io.json.test_pandas._mixed_frame->DataFrame(_seriesd).copy()
A:pandas.tests.io.json.test_pandas.self.dirpath->pandas.util.testing.get_data_path()
A:pandas.tests.io.json.test_pandas.self.ts->pandas.util.testing.makeTimeSeries()
A:pandas.tests.io.json.test_pandas.self.series->pandas.util.testing.makeStringSeries()
A:pandas.tests.io.json.test_pandas.self.objSeries->pandas.util.testing.makeObjectSeries()
A:pandas.tests.io.json.test_pandas.self.empty_series->Series([], index=[])
A:pandas.tests.io.json.test_pandas.self.empty_frame->DataFrame({})
A:pandas.tests.io.json.test_pandas.self.frame->DataFrame(_seriesd).copy()
A:pandas.tests.io.json.test_pandas.self.frame2->DataFrame(_seriesd, columns=['D', 'C', 'B', 'A']).copy()
A:pandas.tests.io.json.test_pandas.self.intframe->DataFrame(dict(((k, v.astype(np.int64)) for (k, v) in compat.iteritems(_seriesd)))).copy()
A:pandas.tests.io.json.test_pandas.self.tsframe->DataFrame(_tsd).copy()
A:pandas.tests.io.json.test_pandas.self.mixed_frame->DataFrame(_seriesd).copy().copy()
A:pandas.tests.io.json.test_pandas.self.categorical->DataFrame(_seriesd).copy().copy()
A:pandas.tests.io.json.test_pandas.df->DataFrame({'a': [str(1)]})
A:pandas.tests.io.json.test_pandas.df_unser->pandas.read_json(v12_json)
A:pandas.tests.io.json.test_pandas.unser->unser.sort_index().sort_index()
A:pandas.tests.io.json.test_pandas.result->DataFrame({'a': [str(1)]}).to_json(orient='records', lines=True)
A:pandas.tests.io.json.test_pandas.dfjson->DataFrame({'a': [str(1)]}).to_json(orient=orient)
A:pandas.tests.io.json.test_pandas.unser.index->DatetimeIndex(unser.index.values.astype('i8') * 1000000.0)
A:pandas.tests.io.json.test_pandas.biggie->DataFrame(np.zeros((200, 4)), columns=[str(i) for i in range(4)], index=[str(i) for i in range(200)])
A:pandas.tests.io.json.test_pandas.index->pandas.date_range('20000101', periods=10, freq='H')
A:pandas.tests.io.json.test_pandas.json->StringIO(json)
A:pandas.tests.io.json.test_pandas.encoded->DataFrame({'a': [str(1)]}).to_json(double_precision=15)
A:pandas.tests.io.json.test_pandas.df['joe']->df['joe'].astype('i8').astype('i8')
A:pandas.tests.io.json.test_pandas.right->DataFrame({'a': [str(1)]}).copy()
A:pandas.tests.io.json.test_pandas.inp->DataFrame({'a': [str(1)]}).to_json(orient='values')
A:pandas.tests.io.json.test_pandas.left->read_json(inp, orient='values', convert_axes=False)
A:pandas.tests.io.json.test_pandas.right.index->numpy.arange(len(df))
A:pandas.tests.io.json.test_pandas.right.columns->numpy.arange(df.shape[1])
A:pandas.tests.io.json.test_pandas.df['date']->Timestamp('20130101 20:43:42')
A:pandas.tests.io.json.test_pandas.df.iloc[3, df.columns.get_loc('date')]->pandas.Timestamp('20130101')
A:pandas.tests.io.json.test_pandas.v12_json->os.path.join(self.dirpath, 'tsframe_v012.json')
A:pandas.tests.io.json.test_pandas.df_iso->DataFrame({'a': [str(1)]}).drop(['modified'], axis=1)
A:pandas.tests.io.json.test_pandas.v12_iso_json->os.path.join(self.dirpath, 'tsframe_iso_v012.json')
A:pandas.tests.io.json.test_pandas.df_unser_iso->pandas.read_json(v12_iso_json)
A:pandas.tests.io.json.test_pandas.df_mixed->DataFrame(OrderedDict(float_1=[-0.92077639, 0.77434435, 1.25234727, 0.61485564, -0.60316077, 0.24653374, 0.28668979, -2.51969012, 0.95748401, -1.02970536], int_1=[19680418, 75337055, 99973684, 65103179, 79373900, 40314334, 21290235, 4991321, 41903419, 16008365], str_1=['78c608f1', '64a99743', '13d2ff52', 'ca7f4af2', '97236474', 'bde7e214', '1a6bde47', 'b1190be5', '7a669144', '8d64d068'], float_2=[-0.0428278, -1.80872357, 3.36042349, -0.7573685, -0.48217572, 0.86229683, 1.08935819, 0.93898739, -0.03030452, 1.43366348], str_2=['14f04af9', 'd085da90', '4bcfac83', '81504caf', '2ffef4a9', '08e2f5c4', '07e1af03', 'addbd4a7', '1f6a09ba', '4bfc4d87'], int_2=[86967717, 98098830, 51927505, 20372254, 12601730, 20884027, 34193846, 10561746, 24867120, 76131025]), index=index)
A:pandas.tests.io.json.test_pandas.df_mixed.columns->DataFrame(OrderedDict(float_1=[-0.92077639, 0.77434435, 1.25234727, 0.61485564, -0.60316077, 0.24653374, 0.28668979, -2.51969012, 0.95748401, -1.02970536], int_1=[19680418, 75337055, 99973684, 65103179, 79373900, 40314334, 21290235, 4991321, 41903419, 16008365], str_1=['78c608f1', '64a99743', '13d2ff52', 'ca7f4af2', '97236474', 'bde7e214', '1a6bde47', 'b1190be5', '7a669144', '8d64d068'], float_2=[-0.0428278, -1.80872357, 3.36042349, -0.7573685, -0.48217572, 0.86229683, 1.08935819, 0.93898739, -0.03030452, 1.43366348], str_2=['14f04af9', 'd085da90', '4bcfac83', '81504caf', '2ffef4a9', '08e2f5c4', '07e1af03', 'addbd4a7', '1f6a09ba', '4bfc4d87'], int_2=[86967717, 98098830, 51927505, 20372254, 12601730, 20884027, 34193846, 10561746, 24867120, 76131025]), index=index).columns.astype('unicode')
A:pandas.tests.io.json.test_pandas.df_roundtrip->pandas.read_json(df_mixed.to_json(orient='split'), orient='split')
A:pandas.tests.io.json.test_pandas.s->pandas.Series(np.random.randn(10))
A:pandas.tests.io.json.test_pandas.series->series.sort_index().sort_index()
A:pandas.tests.io.json.test_pandas.objSeries->Series([str(d) for d in self.objSeries], index=self.objSeries.index, name=self.objSeries.name)
A:pandas.tests.io.json.test_pandas.expected->DataFrame([[u'foo”', 'bar'], ['foo', 'bar']], columns=['a', 'b'])
A:pandas.tests.io.json.test_pandas.expected['date']->expected['date'].values.view('i8').values.view('i8')
A:pandas.tests.io.json.test_pandas.expected['foo']->expected['foo'].astype('int64').astype('int64')
A:pandas.tests.io.json.test_pandas.ts->Timestamp('2013-01-10 00:00:00-0500')
A:pandas.tests.io.json.test_pandas.dl->DataFrame({'a': [str(1)]}).columns.get_loc('date')
A:pandas.tests.io.json.test_pandas.df.iloc[1, dl]->Timestamp('19710101 20:43:42')
A:pandas.tests.io.json.test_pandas.df.iloc[2, dl]->Timestamp('21460101 20:43:42')
A:pandas.tests.io.json.test_pandas.dfj2->DataFrame(np.random.randn(5, 2), columns=list('AB'))
A:pandas.tests.io.json.test_pandas.dfj2['date']->Timestamp('20130101')
A:pandas.tests.io.json.test_pandas.dfj2['ints']->lrange(5)
A:pandas.tests.io.json.test_pandas.dfj2.index->pandas.date_range('20130101', periods=5)
A:pandas.tests.io.json.test_pandas.frame->DataFrame({'a': [7, value]})
A:pandas.tests.io.json.test_pandas.result['a']->pandas.to_timedelta(result.a, unit='ns')
A:pandas.tests.io.json.test_pandas.result['c']->pandas.to_datetime(result.c)
A:pandas.tests.io.json.test_pandas.value->object()
A:pandas.tests.io.json.test_pandas.df['B']->df['A'].astype('category')
A:pandas.tests.io.json.test_pandas.tz_range->pandas.date_range('2013-01-01 00:00:00-0500', periods=2)
A:pandas.tests.io.json.test_pandas.tz_naive->pandas.date_range('2013-01-01 00:00:00-0500', periods=2).tz_convert('utc').tz_localize(None)
A:pandas.tests.io.json.test_pandas.df_naive->DataFrame({'a': [str(1)]}).copy()
A:pandas.tests.io.json.test_pandas.stz->Series(tz_range)
A:pandas.tests.io.json.test_pandas.s_naive->Series(tz_naive)
A:pandas.tests.io.json.test_pandas.sdf->DataFrame({'a': [str(1)]}).to_sparse()
A:pandas.tests.io.json.test_pandas.ss->pandas.Series(np.random.randn(10)).to_sparse()
A:pandas.tests.io.json.test_pandas.dt->Timestamp('2013-01-10 00:00:00-0500').to_pydatetime()
A:pandas.tests.io.json.test_pandas.dti->pandas.DatetimeIndex(tz_range)
A:pandas.tests.io.json.test_pandas.retr->read_json(path, encoding=encoding)
A:pandas.tests.io.json.test_pandas.size_before->DataFrame({'a': [str(1)]}).memory_usage(index=True, deep=True).sum()
A:pandas.tests.io.json.test_pandas.size_after->DataFrame({'a': [str(1)]}).memory_usage(index=True, deep=True).sum()
pandas.tests.io.json.test_pandas.TestPandasContainer(object)
pandas.tests.io.json.test_pandas.TestPandasContainer.setup_method(self,method)
pandas.tests.io.json.test_pandas.TestPandasContainer.teardown_method(self,method)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_axis_dates(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_blocks_compat_GH9037(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_categorical(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_convert_dates(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_convert_dates_infer(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_data_frame_size_after_to_json(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_date_format_frame(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_date_format_series(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_date_unit(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_datetime_tz(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_default_handler(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_default_handler_indirect(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_default_handler_numpy_unsupported_dtype(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_default_handler_raises(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_doc_example(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_double_encoded_labels(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_empty(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_empty_mixedtype(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_from_json_bad_data(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_from_json_nones(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_from_json_precise_float(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_from_json_to_json(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_mixedtype_orient(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_non_unique_columns(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_non_unique_index(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_to_json_except(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_frame_to_json_float_precision(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_latin_encoding(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_misc_example(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_mixed_timedelta_datetime(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_path(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_read_jsonl(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_read_jsonl_unicode_chars(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_reconstruction_index(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_round_trip_exception_(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_series_from_json_precise_float(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_series_from_json_to_json(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_series_non_unique_index(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_series_to_json_except(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_sparse(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_timedelta(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_to_jsonl(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_typ(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_tz_is_utc(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_tz_range_is_utc(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_url(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_v12_compat(self)
pandas.tests.io.json.test_pandas.TestPandasContainer.test_weird_nested_json(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/formats/test_css.py----------------------------------------
A:pandas.tests.io.formats.test_css.resolve->CSSResolver()
A:pandas.tests.io.formats.test_css.actual->resolve(css, inherited=inherited)
A:pandas.tests.io.formats.test_css.resolved1->resolve(css1, inherited=inherited)
A:pandas.tests.io.formats.test_css.resolved2->resolve(css2, inherited=inherited)
A:pandas.tests.io.formats.test_css.inherited_props->resolve(inherited)
A:pandas.tests.io.formats.test_css.style_props->resolve(style, inherited=inherited_props)
A:pandas.tests.io.formats.test_css.equiv_props->resolve(equiv)
pandas.tests.io.formats.test_css.assert_resolves(css,props,inherited=None)
pandas.tests.io.formats.test_css.assert_same_resolution(css1,css2,inherited=None)
pandas.tests.io.formats.test_css.test_css_absolute_font_size(size,relative_to,resolved)
pandas.tests.io.formats.test_css.test_css_background_shorthand(css,props)
pandas.tests.io.formats.test_css.test_css_border_shorthand(style,equiv)
pandas.tests.io.formats.test_css.test_css_font_shorthand(css,props)
pandas.tests.io.formats.test_css.test_css_none_absent(style,equiv)
pandas.tests.io.formats.test_css.test_css_parse_comments()
pandas.tests.io.formats.test_css.test_css_parse_invalid(invalid_css,remainder)
pandas.tests.io.formats.test_css.test_css_parse_normalisation(name,norm,abnorm)
pandas.tests.io.formats.test_css.test_css_parse_specificity()
pandas.tests.io.formats.test_css.test_css_parse_strings()
pandas.tests.io.formats.test_css.test_css_precedence(style,inherited,equiv)
pandas.tests.io.formats.test_css.test_css_relative_font_size(size,relative_to,resolved)
pandas.tests.io.formats.test_css.test_css_side_shorthands(shorthand,expansions)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/formats/test_to_excel.py----------------------------------------
A:pandas.tests.io.formats.test_to_excel.convert->CSSToExcelConverter()
A:pandas.tests.io.formats.test_to_excel.actual->convert('\n        font-weight: bold;\n        text-decoration: underline;\n        color: red;\n        border-width: thin;\n        text-align: center;\n        vertical-align: top;\n        unused: something;\n    ')
pandas.tests.io.formats.test_to_excel.test_css_to_excel(css,expected)
pandas.tests.io.formats.test_to_excel.test_css_to_excel_inherited(css,inherited,expected)
pandas.tests.io.formats.test_to_excel.test_css_to_excel_multiple()
pandas.tests.io.formats.test_to_excel.test_css_to_excel_warns_when_not_supported()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/formats/test_printing.py----------------------------------------
A:pandas.tests.io.formats.test_printing.adjoined->pandas.io.formats.format.EastAsianTextAdjustment().adjoin(2, *data)
A:pandas.tests.io.formats.test_printing.raw->btype(letters)
A:pandas.tests.io.formats.test_printing.b->pandas.compat.text_type(compat.bytes_to_str(raw))
A:pandas.tests.io.formats.test_printing.res->pandas.io.formats.printing.pprint_thing(b, quote_strings=False)
A:pandas.tests.io.formats.test_printing.adj->pandas.io.formats.format.EastAsianTextAdjustment()
A:pandas.tests.io.formats.test_printing.cols->pandas.io.formats.format.EastAsianTextAdjustment().adjoin(2, *data).split('\n')
A:pandas.tests.io.formats.test_printing.df->pandas.DataFrame({'A': [1, 2]})
A:pandas.tests.io.formats.test_printing.opt->pandas.option_context('display.html.table_schema', True)
A:pandas.tests.io.formats.test_printing.formatted->self.display_formatter.format(df)
A:pandas.tests.io.formats.test_printing.with_latex->pandas.option_context('display.latex.repr', True)
A:pandas.tests.io.formats.test_printing.midx->pandas.MultiIndex.from_product([['A', 'B'], ['a', 'b', 'c']])
A:pandas.tests.io.formats.test_printing.result->pandas.DataFrame({'A': [1, 2]})._repr_data_resource_()
pandas.tests.io.formats.test_printing.TestFormattBase(object)
pandas.tests.io.formats.test_printing.TestFormattBase.test_adjoin(self)
pandas.tests.io.formats.test_printing.TestFormattBase.test_adjoin_unicode(self)
pandas.tests.io.formats.test_printing.TestFormattBase.test_ambiguous_width(self)
pandas.tests.io.formats.test_printing.TestFormattBase.test_east_asian_len(self)
pandas.tests.io.formats.test_printing.TestFormattBase.test_justify(self)
pandas.tests.io.formats.test_printing.TestTableSchemaRepr(object)
pandas.tests.io.formats.test_printing.TestTableSchemaRepr.setup_class(cls)
pandas.tests.io.formats.test_printing.TestTableSchemaRepr.test_config_default_off(self)
pandas.tests.io.formats.test_printing.TestTableSchemaRepr.test_config_on(self)
pandas.tests.io.formats.test_printing.TestTableSchemaRepr.test_enable_data_resource_formatter(self)
pandas.tests.io.formats.test_printing.TestTableSchemaRepr.test_publishes(self)
pandas.tests.io.formats.test_printing.TestTableSchemaRepr.test_publishes_not_implemented(self)
pandas.tests.io.formats.test_printing.test_adjoin()
pandas.tests.io.formats.test_printing.test_repr_binary_type()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/formats/test_to_html.py----------------------------------------
A:pandas.tests.io.formats.test_to_html.html->pandas.DataFrame({'A': [1, 2, 3]}).to_html(col_space=col_space)
A:pandas.tests.io.formats.test_to_html.df->pandas.DataFrame({'A': [1, 2, 3]})
A:pandas.tests.io.formats.test_to_html.res->pandas.DataFrame({'A': [1, 2, 3]}).to_html()
A:pandas.tests.io.formats.test_to_html.result->pandas.DataFrame({'A': [1, 2, 3]}).to_html()
A:pandas.tests.io.formats.test_to_html.rs->DataFrame(test_dict).to_html(escape=False)
A:pandas.tests.io.formats.test_to_html.df.columns->pandas.MultiIndex.from_product([['a', 'b'], ['c', 'd']])
A:pandas.tests.io.formats.test_to_html.df.index->pandas.MultiIndex.from_tuples(tuples, names=['idx1', 'idx2'])
A:pandas.tests.io.formats.test_to_html.index->pandas.DatetimeIndex(start='20010101', freq='D', periods=20)
A:pandas.tests.io.formats.test_to_html.mi->pandas.MultiIndex.from_product([[100, 200, 300], [10, 20, 30], [1, 2, 3, 4, 5, 6, 7]], names=['a', 'b', 'c'])
A:pandas.tests.io.formats.test_to_html.x->DataFrame({'x': np.random.randn(5)})
A:pandas.tests.io.formats.test_to_html.expected->dedent('        <table border="1" class="dataframe">\n          <thead>\n            <tr style="text-align: right;">\n              <th>A</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>1</td>\n            </tr>\n          </tbody>\n        </table>')
A:pandas.tests.io.formats.test_to_html.biggie->DataFrame({'A': np.random.randn(200), 'B': tm.makeStringIndex(200)}, index=lrange(200))
A:pandas.tests.io.formats.test_to_html.s->DataFrame({'A': np.random.randn(200), 'B': tm.makeStringIndex(200)}, index=lrange(200)).to_html()
A:pandas.tests.io.formats.test_to_html.buf->StringIO()
A:pandas.tests.io.formats.test_to_html.retval->DataFrame({'A': np.random.randn(200), 'B': tm.makeStringIndex(200)}, index=lrange(200)).to_html(buf=buf)
A:pandas.tests.io.formats.test_to_html.frame->DataFrame(tm.getSeriesData())
A:pandas.tests.io.formats.test_to_html.s2->f.read()
A:pandas.tests.io.formats.test_to_html.ashtml->DataFrame({'x': np.random.randn(5)}).to_html(bold_rows=False)
A:pandas.tests.io.formats.test_to_html.columns->pandas.MultiIndex.from_tuples(list(zip(range(4), np.mod(lrange(4), 2))))
pandas.tests.io.formats.test_to_html.TestToHTML(object)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_border(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_border_option(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_border_zero(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_columns_arg(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_datetime64_hourformatter(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_datetime64_monthformatter(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_decimal(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_escape_disabled(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_escaped(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_filename(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_index(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_index_formatter(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_justify(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_multiindex(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_multiindex_index_false(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_multiindex_odd_even_truncate(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_multiindex_sparsify(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_multiindex_sparsify_false_multi_sparse(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_no_index_max_rows(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_notebook_has_no_style(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_notebook_has_style(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_regression_GH6098(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_truncate(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_truncate_multi_index(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_truncate_multi_index_sparse_off(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_unicode(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_with_classes(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_with_col_space(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_with_empty_string_label(self)
pandas.tests.io.formats.test_to_html.TestToHTML.test_to_html_with_no_bold(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/formats/test_format.py----------------------------------------
A:pandas.tests.io.formats.test_format._frame->DataFrame(tm.getSeriesData())
A:pandas.tests.io.formats.test_format.(pth, _)->os.path.split(os.path.abspath(__file__))
A:pandas.tests.io.formats.test_format.r->repr(df)
A:pandas.tests.io.formats.test_format.c1->repr(df).split('\n')[0].startswith('<class')
A:pandas.tests.io.formats.test_format.c2->repr(df).split('\n')[0].startswith('&lt;class')
A:pandas.tests.io.formats.test_format.has_info->has_info_repr(df)
A:pandas.tests.io.formats.test_format.fst_line->numpy.array(repr(df).splitlines()[0].split())
A:pandas.tests.io.formats.test_format.self.frame->DataFrame(tm.getSeriesData()).copy()
A:pandas.tests.io.formats.test_format.arr->numpy.empty(10, dtype=[('err', object)])
A:pandas.tests.io.formats.test_format.arr['err'][i]->numpy.random.randn(i)
A:pandas.tests.io.formats.test_format.df->pandas.DataFrame(dict(x=[12345.6789, 2000000.0]))
A:pandas.tests.io.formats.test_format.buf->StringIO()
A:pandas.tests.io.formats.test_format.adj->pandas.io.formats.format._get_adjustment()
A:pandas.tests.io.formats.test_format.idx->pandas.MultiIndex.from_tuples([(u'あ', u'いい'), (u'う', u'え'), (u'おおお', u'かかかか'), (u'き', u'くく')])
A:pandas.tests.io.formats.test_format.res->pandas.Series(range(10), dtype='int64').to_string(header=False, max_rows=2)
A:pandas.tests.io.formats.test_format.df_small->DataFrame('hello', [0], [0])
A:pandas.tests.io.formats.test_format.df_wide->DataFrame('hello', [0], lrange(10))
A:pandas.tests.io.formats.test_format.df_tall->DataFrame('hello', lrange(30), lrange(5))
A:pandas.tests.io.formats.test_format.(term_width, term_height)->get_terminal_size()
A:pandas.tests.io.formats.test_format.df6->mkframe(6)
A:pandas.tests.io.formats.test_format.df10->mkframe(10)
A:pandas.tests.io.formats.test_format.cols->range(int(term_width * fac))
A:pandas.tests.io.formats.test_format.index->pandas.MultiIndex.from_tuples(tuples, names=['first', 'second'])
A:pandas.tests.io.formats.test_format.unicode_values->numpy.array(unicode_values, dtype=object)
A:pandas.tests.io.formats.test_format.ser->Series(np.random.randn(len(idx)), idx)
A:pandas.tests.io.formats.test_format.rs->pandas.DataFrame(dict(x=[12345.6789, 2000000.0])).to_string(formatters={'__index__': lambda x: 'abc'[x]})
A:pandas.tests.io.formats.test_format.line_len->len(rs[0])
A:pandas.tests.io.formats.test_format.line->line.decode(get_option('display.encoding')).decode(get_option('display.encoding'))
A:pandas.tests.io.formats.test_format.result->pandas.io.formats.format.format_percentiles([0, 0.5, 0.02001, 0.5, 0.666666, 0.9999])
A:pandas.tests.io.formats.test_format.n->u('א').encode('utf-8')
A:pandas.tests.io.formats.test_format.dm->DataFrame({u('c/σ'): Series({'test': np.nan})})
A:pandas.tests.io.formats.test_format.result2->pandas.DataFrame(dict(x=[12345.6789, 2000000.0])).to_string(formatters=lzip(*formatters)[1])
A:pandas.tests.io.formats.test_format.x->Series(pd.to_datetime(['10:10:10.100', '12:12:12.120'], format='%H:%M:%S.%f'))
A:pandas.tests.io.formats.test_format.empty->DataFrame({u('c/σ'): Series()})
A:pandas.tests.io.formats.test_format.nonempty->DataFrame({u('c/σ'): Series([1, 2, 3])})
A:pandas.tests.io.formats.test_format.c10->len(df.to_string(col_space=10).split('\n')[1])
A:pandas.tests.io.formats.test_format.c20->len(df.to_string(col_space=20).split('\n')[1])
A:pandas.tests.io.formats.test_format.c30->len(df.to_string(col_space=30).split('\n')[1])
A:pandas.tests.io.formats.test_format.with_header->pandas.DataFrame(dict(x=[12345.6789, 2000000.0])).to_string(col_space=20)
A:pandas.tests.io.formats.test_format.no_header->pandas.DataFrame(dict(x=[12345.6789, 2000000.0])).to_string(col_space=20, header=False)
A:pandas.tests.io.formats.test_format.s->pandas.Series(range(10), dtype='int64')
A:pandas.tests.io.formats.test_format.rep_str->repr(df)
A:pandas.tests.io.formats.test_format.lines->pandas.Series(range(10), dtype='int64').to_string(header=False, max_rows=2).split('\n')
A:pandas.tests.io.formats.test_format.filepath->pandas.util.testing.get_data_path('unicode_series.csv')
A:pandas.tests.io.formats.test_format.max_cols->get_option('display.max_columns')
A:pandas.tests.io.formats.test_format.wide_repr->pandas.DataFrame(dict(x=[12345.6789, 2000000.0]))._repr_html_()
A:pandas.tests.io.formats.test_format.wider_repr->repr(df)
A:pandas.tests.io.formats.test_format.midx->pandas.MultiIndex.from_arrays(tm.rands_array(5, size=(2, 10)))
A:pandas.tests.io.formats.test_format.mcols->pandas.MultiIndex.from_product((np.arange(1 + max_cols // 2), ['foo', 'bar']), names=['first', 'second'])
A:pandas.tests.io.formats.test_format.str_rep->str(s)
A:pandas.tests.io.formats.test_format.nmatches->len(re.findall('dtype', str_rep))
A:pandas.tests.io.formats.test_format.y->pandas.to_timedelta(list(range(5)) + [pd.NaT], unit='s')
A:pandas.tests.io.formats.test_format.expected->u('             value\nid1 id2 id3       \nNaN NaN NaN    123\n9h4 d67 79d     64')
A:pandas.tests.io.formats.test_format.df2->pandas.DataFrame(dict(x=[12345.6789, 2000000.0])).copy()
A:pandas.tests.io.formats.test_format.biggie->DataFrame({'A': np.random.randn(200), 'B': tm.makeStringIndex(200)}, index=lrange(200))
A:pandas.tests.io.formats.test_format.retval->self.ts.to_string(buf=buf)
A:pandas.tests.io.formats.test_format.header->pandas.io.formats.format.format_percentiles([0, 0.5, 0.02001, 0.5, 0.666666, 0.9999]).split('\n')[0].strip().split()
A:pandas.tests.io.formats.test_format.joined->'\n'.join([re.sub('\\s+', ' ', x).strip() for x in lines[1:]])
A:pandas.tests.io.formats.test_format.recons->read_table(StringIO(joined), names=header, header=None, sep=' ')
A:pandas.tests.io.formats.test_format.frame->DataFrame(index=np.arange(200))
A:pandas.tests.io.formats.test_format.df_s->pandas.DataFrame(dict(x=[12345.6789, 2000000.0])).to_string(justify='left')
A:pandas.tests.io.formats.test_format.output->pandas.DataFrame(dict(x=[12345.6789, 2000000.0])).to_string()
A:pandas.tests.io.formats.test_format.reg_repr->pandas.DataFrame(dict(x=[12345.6789, 2000000.0]))._repr_html_()
A:pandas.tests.io.formats.test_format.wide_df->DataFrame(tm.rands_array(25, size=(10, max_cols + 1)))
A:pandas.tests.io.formats.test_format.max_rows->get_option('display.max_rows')
A:pandas.tests.io.formats.test_format.long_repr->pandas.DataFrame(dict(x=[12345.6789, 2000000.0]))._repr_html_()
A:pandas.tests.io.formats.test_format.tuples->list(zip(*arrays))
A:pandas.tests.io.formats.test_format.repstr->self.frame._repr_html_()
A:pandas.tests.io.formats.test_format.val->pandas.DataFrame(dict(x=[12345.6789, 2000000.0])).to_string()
A:pandas.tests.io.formats.test_format.s1->pandas.Series(['a'] * 100)
A:pandas.tests.io.formats.test_format.s2->Series(2, index=[Timestamp('20130111'), NaT])
A:pandas.tests.io.formats.test_format.s3->pandas.Series(['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef'])
A:pandas.tests.io.formats.test_format.self.ts->pandas.util.testing.makeTimeSeries()
A:pandas.tests.io.formats.test_format.a->Series([u('א')] * 1000)
A:pandas.tests.io.formats.test_format.cp->self.ts.copy()
A:pandas.tests.io.formats.test_format.last_line->pandas.io.formats.format.format_percentiles([0, 0.5, 0.02001, 0.5, 0.666666, 0.9999]).split('\n')[-1].strip()
A:pandas.tests.io.formats.test_format.sf->pandas.io.formats.format.SeriesFormatter(s, name=u('עברית'))
A:pandas.tests.io.formats.test_format.o->Series([datetime(2012, 1, 1, 1, 1, microsecond=150)] * 3)
A:pandas.tests.io.formats.test_format.td->Series(pd.timedelta_range('1 days', periods=3))
A:pandas.tests.io.formats.test_format.df['B']->pandas.to_datetime(df.B)
A:pandas.tests.io.formats.test_format.ncolsizes->len(set((len(line.strip()) for line in lines)))
A:pandas.tests.io.formats.test_format.test_sers->gen_series_formatting()
A:pandas.tests.io.formats.test_format.strrepr->repr(s).replace('\n', '')
A:pandas.tests.io.formats.test_format.res1->strrepr[0].split()
A:pandas.tests.io.formats.test_format.res2->strrepr[1].split()
A:pandas.tests.io.formats.test_format.obj->pandas.io.formats.format.FloatArrayFormatter(np.array([12, 0], dtype=np.float64))
A:pandas.tests.io.formats.test_format.d->pandas.DataFrame({'col1': [9.999e-08, 1e-07, 1.0001e-07, 2e-07, 4.999e-07, 5e-07, 5.0001e-07, 6e-07, 9.999e-07, 1e-06, 1.0001e-06, 2e-06, 4.999e-06, 5e-06, 5.0001e-06, 6e-06]})
A:pandas.tests.io.formats.test_format.delta_1d->pandas.to_timedelta(1, unit='D')
A:pandas.tests.io.formats.test_format.delta_0d->pandas.to_timedelta(0, unit='D')
A:pandas.tests.io.formats.test_format.delta_1s->pandas.to_timedelta(1, unit='s')
A:pandas.tests.io.formats.test_format.delta_500ms->pandas.to_timedelta(500, unit='ms')
A:pandas.tests.io.formats.test_format.delta_1ns->pandas.to_timedelta(1, unit='ns')
A:pandas.tests.io.formats.test_format.formatter->pandas.io.formats.format.Datetime64Formatter(x, formatter=format_func)
A:pandas.tests.io.formats.test_format.formatted->pandas.to_datetime([datetime(2003, 2, 1), pd.NaT]).format(date_format='%m-%d-%Y', na_rep='UT')
A:pandas.tests.io.formats.test_format.text->str(pd.to_datetime([datetime(2013, 1, 1), datetime(2014, 1, 1, 12), datetime(2014, 1, 1)]))
A:pandas.tests.io.formats.test_format.dt_date->datetime(2013, 1, 2, tzinfo=utc)
A:pandas.tests.io.formats.test_format.dt_datetime->datetime(2013, 1, 2, 12, 1, 3, tzinfo=utc)
A:pandas.tests.io.formats.test_format.dt_datetime_us->datetime(2013, 1, 2, 12, 1, 3, 45, tzinfo=utc)
A:pandas.tests.io.formats.test_format.ts_nanos_only->Timestamp(200)
A:pandas.tests.io.formats.test_format.ts_nanos_micros->Timestamp(1200)
A:pandas.tests.io.formats.test_format.utc->dateutil.tz.tzutc()
pandas.tests.io.formats.test_format.TestDataFrameFormatting(object)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.setup_method(self,method)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.teardown_method(self,method)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_auto_detect(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_datetimelike_frame(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_dict_entries(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_east_asian_unicode_frame(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_eng_float_formatter(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_expand_frame_repr(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_fake_qtconsole_repr_html(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_float_trim_zeros(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_frame_info_encoding(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_index_with_nan(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_info_repr(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_info_repr_html(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_info_repr_max_cols(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_long_series(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_nonunicode_nonascii_alignment(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_period(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_pprint_pathological_object(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_pprint_thing(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_chop_threshold(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_corner(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_embedded_ndarray(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_html(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_html_float(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_html_long(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_html_long_and_wide(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_html_long_multiindex(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_html_wide(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_html_wide_multiindex_cols(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_is_valid_construction_code(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_max_columns_max_rows(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_no_backslash(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_non_interactive(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_obeys_max_seq_limit(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_set(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_should_return_str(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_truncation(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_repr_tuples(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_show_dimensions(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_show_null_counts(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_str_max_colwidth(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_string_repr_encoding(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_ascii_error(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_buffer_all_unicode(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_float_formatting(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_float_index(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_format_na(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_index_formatter(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_int_formatting(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_left_justify_cols(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_line_width(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_line_width_no_index(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_no_header(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_no_index(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_repr_unicode(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_small_float_values(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_specified_header(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_truncate_indices(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_truncate_multilevel(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_unicode_columns(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_unicode_three(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_unicode_two(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_utf8_columns(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_with_col_space(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_with_datetime64_hourformatter(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_with_datetime64_monthformatter(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_with_formatters(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_to_string_with_formatters_unicode(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_truncate_with_different_dtypes(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_unicode_problem_decoding_as_ascii(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_wide_repr(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_wide_repr_multiindex(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_wide_repr_multiindex_cols(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_wide_repr_named(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_wide_repr_unicode(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_wide_repr_wide_columns(self)
pandas.tests.io.formats.test_format.TestDataFrameFormatting.test_wide_repr_wide_long_columns(self)
pandas.tests.io.formats.test_format.TestDatetime64Formatter(object)
pandas.tests.io.formats.test_format.TestDatetime64Formatter.test_date_nanos(self)
pandas.tests.io.formats.test_format.TestDatetime64Formatter.test_dates(self)
pandas.tests.io.formats.test_format.TestDatetime64Formatter.test_dates_display(self)
pandas.tests.io.formats.test_format.TestDatetime64Formatter.test_datetime64formatter_hoursecond(self)
pandas.tests.io.formats.test_format.TestDatetime64Formatter.test_datetime64formatter_yearmonth(self)
pandas.tests.io.formats.test_format.TestDatetime64Formatter.test_mixed(self)
pandas.tests.io.formats.test_format.TestDatetimeIndexFormat(object)
pandas.tests.io.formats.test_format.TestDatetimeIndexFormat.test_date(self)
pandas.tests.io.formats.test_format.TestDatetimeIndexFormat.test_date_explict_date_format(self)
pandas.tests.io.formats.test_format.TestDatetimeIndexFormat.test_date_tz(self)
pandas.tests.io.formats.test_format.TestDatetimeIndexFormat.test_datetime(self)
pandas.tests.io.formats.test_format.TestDatetimeIndexUnicode(object)
pandas.tests.io.formats.test_format.TestDatetimeIndexUnicode.test_dates(self)
pandas.tests.io.formats.test_format.TestDatetimeIndexUnicode.test_mixed(self)
pandas.tests.io.formats.test_format.TestFloatArrayFormatter(object)
pandas.tests.io.formats.test_format.TestFloatArrayFormatter.test_format(self)
pandas.tests.io.formats.test_format.TestFloatArrayFormatter.test_misc(self)
pandas.tests.io.formats.test_format.TestFloatArrayFormatter.test_output_significant_digits(self)
pandas.tests.io.formats.test_format.TestFloatArrayFormatter.test_too_long(self)
pandas.tests.io.formats.test_format.TestNaTFormatting(object)
pandas.tests.io.formats.test_format.TestNaTFormatting.test_repr(self)
pandas.tests.io.formats.test_format.TestNaTFormatting.test_str(self)
pandas.tests.io.formats.test_format.TestRepr_timedelta64(object)
pandas.tests.io.formats.test_format.TestRepr_timedelta64.test_all(self)
pandas.tests.io.formats.test_format.TestRepr_timedelta64.test_even_day(self)
pandas.tests.io.formats.test_format.TestRepr_timedelta64.test_long(self)
pandas.tests.io.formats.test_format.TestRepr_timedelta64.test_none(self)
pandas.tests.io.formats.test_format.TestRepr_timedelta64.test_sub_day(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting(object)
pandas.tests.io.formats.test_format.TestSeriesFormatting.chck_ncols(self,s)
pandas.tests.io.formats.test_format.TestSeriesFormatting.setup_method(self,method)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_consistent_format(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_datetimeindex(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_east_asian_unicode_series(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_float_trim_zeros(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_format_explicit(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_freq_name_separation(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_max_multi_index_display(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_max_rows_eq_one(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_mixed_datetime64(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_ncols(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_period(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_repr_unicode(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_show_dimensions(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_timedelta64(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_to_string(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_to_string_dtype(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_to_string_float_format(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_to_string_float_na_spacing(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_to_string_header(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_to_string_length(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_to_string_mixed(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_to_string_na_rep(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_to_string_name(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_to_string_without_index(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_truncate_ndots(self)
pandas.tests.io.formats.test_format.TestSeriesFormatting.test_unicode_name_in_footer(self)
pandas.tests.io.formats.test_format.TestStringRepTimestamp(object)
pandas.tests.io.formats.test_format.TestStringRepTimestamp.test_nat_representations(self)
pandas.tests.io.formats.test_format.TestStringRepTimestamp.test_no_tz(self)
pandas.tests.io.formats.test_format.TestStringRepTimestamp.test_tz_dateutil(self)
pandas.tests.io.formats.test_format.TestStringRepTimestamp.test_tz_pytz(self)
pandas.tests.io.formats.test_format.TestTimedelta64Formatter(object)
pandas.tests.io.formats.test_format.TestTimedelta64Formatter.test_days(self)
pandas.tests.io.formats.test_format.TestTimedelta64Formatter.test_days_neg(self)
pandas.tests.io.formats.test_format.TestTimedelta64Formatter.test_subdays(self)
pandas.tests.io.formats.test_format.TestTimedelta64Formatter.test_subdays_neg(self)
pandas.tests.io.formats.test_format.TestTimedelta64Formatter.test_zero(self)
pandas.tests.io.formats.test_format._three_digit_exp()
pandas.tests.io.formats.test_format.curpath()
pandas.tests.io.formats.test_format.gen_series_formatting()
pandas.tests.io.formats.test_format.has_doubly_truncated_repr(df)
pandas.tests.io.formats.test_format.has_expanded_repr(df)
pandas.tests.io.formats.test_format.has_horizontally_truncated_repr(df)
pandas.tests.io.formats.test_format.has_info_repr(df)
pandas.tests.io.formats.test_format.has_non_verbose_info_repr(df)
pandas.tests.io.formats.test_format.has_truncated_repr(df)
pandas.tests.io.formats.test_format.has_vertically_truncated_repr(df)
pandas.tests.io.formats.test_format.test_format_percentiles()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/formats/test_eng_formatting.py----------------------------------------
A:pandas.tests.io.formats.test_eng_formatting.df->pandas.DataFrame({'a': [1.5, 10.3, 20.5], 'b': [50.3, 60.67, 70.12], 'c': [100.2, 101.33, 120.33]})
A:pandas.tests.io.formats.test_eng_formatting.result->formatter(np.inf)
A:pandas.tests.io.formats.test_eng_formatting.formatted_input->formatter(input)
A:pandas.tests.io.formats.test_eng_formatting.formatter->pandas.io.formats.format.EngFormatter(accuracy=1, use_eng_prefix=True)
A:pandas.tests.io.formats.test_eng_formatting.f->numpy.sqrt(2)
A:pandas.tests.io.formats.test_eng_formatting.pt->pandas.DataFrame({'a': [1.5, 10.3, 20.5], 'b': [50.3, 60.67, 70.12], 'c': [100.2, 101.33, 120.33]}).pivot_table(values='a', index='b', columns='c')
pandas.tests.io.formats.test_eng_formatting.TestEngFormatter(object)
pandas.tests.io.formats.test_eng_formatting.TestEngFormatter.compare(self,formatter,input,output)
pandas.tests.io.formats.test_eng_formatting.TestEngFormatter.compare_all(self,formatter,in_out)
pandas.tests.io.formats.test_eng_formatting.TestEngFormatter.test_eng_float_formatter(self)
pandas.tests.io.formats.test_eng_formatting.TestEngFormatter.test_exponents_with_eng_prefix(self)
pandas.tests.io.formats.test_eng_formatting.TestEngFormatter.test_exponents_without_eng_prefix(self)
pandas.tests.io.formats.test_eng_formatting.TestEngFormatter.test_inf(self)
pandas.tests.io.formats.test_eng_formatting.TestEngFormatter.test_nan(self)
pandas.tests.io.formats.test_eng_formatting.TestEngFormatter.test_rounding(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/formats/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/formats/test_style.py----------------------------------------
A:pandas.tests.io.formats.test_style.jinja2->pytest.importorskip('jinja2')
A:pandas.tests.io.formats.test_style.self.s->DataFrame({'A': np.random.permutation(range(6))})
A:pandas.tests.io.formats.test_style.self.df->DataFrame({'A': [0, 1], 'B': np.random.randn(2)})
A:pandas.tests.io.formats.test_style.self.styler->Styler(self.df)
A:pandas.tests.io.formats.test_style.self.attrs->pandas.DataFrame({'A': ['color: red', 'color: blue']})
A:pandas.tests.io.formats.test_style.result->pandas.io.formats.style.Styler.from_custom_template(str(tmpdir.join('templates')), 'myhtml.tpl')
A:pandas.tests.io.formats.test_style.attrs->DataFrame({'A': ['color: red; foo: bar;', 'color: blue; foo: baz;']})
A:pandas.tests.io.formats.test_style.s2->Styler(self.df, precision=2).set_precision(4)
A:pandas.tests.io.formats.test_style.s->Styler(self.df, precision=2)
A:pandas.tests.io.formats.test_style.df->pandas.DataFrame([[1, 2], [2, 4]], columns=['A', 'B'])
A:pandas.tests.io.formats.test_style.expected->dict((((r, c), ['foo: bar']) for (r, row) in enumerate(self.df.index) for (c, col) in enumerate(self.df.columns) if row in self.df.loc[slice_].index and col in self.df.loc[slice_].columns))
A:pandas.tests.io.formats.test_style.df['C']->df['C'].astype('category').astype('category')
A:pandas.tests.io.formats.test_style.styler->result(pd.DataFrame({'A': [1, 2]}))
A:pandas.tests.io.formats.test_style.ctx->pandas.DataFrame([[1, 2], [2, 4]], columns=['A', 'B']).style.format({'a': '{:0.1f}', 'c': str.upper})._translate()
A:pandas.tests.io.formats.test_style.index->pandas.MultiIndex.from_arrays([[1, 1, 2, 1], ['a', 'b', 'b', 'd']])
A:pandas.tests.io.formats.test_style.p->tmpdir.mkdir('templates').join('myhtml.tpl')
pandas.tests.io.formats.test_style.TestStyler(object)
pandas.tests.io.formats.test_style.TestStyler.setup_method(self,method)
pandas.tests.io.formats.test_style.TestStyler.test_apply_axis(self)
pandas.tests.io.formats.test_style.TestStyler.test_apply_bad_labels(self)
pandas.tests.io.formats.test_style.TestStyler.test_apply_bad_return(self)
pandas.tests.io.formats.test_style.TestStyler.test_apply_none(self)
pandas.tests.io.formats.test_style.TestStyler.test_apply_subset(self)
pandas.tests.io.formats.test_style.TestStyler.test_applymap_subset(self)
pandas.tests.io.formats.test_style.TestStyler.test_bad_apply_shape(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_align_left(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_align_left_0points(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_align_mid_all_neg(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_align_mid_all_pos(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_align_mid_pos_and_neg(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_align_zero_pos_and_neg(self)
pandas.tests.io.formats.test_style.TestStyler.test_bar_bad_align_raises(self)
pandas.tests.io.formats.test_style.TestStyler.test_caption(self)
pandas.tests.io.formats.test_style.TestStyler.test_clear(self)
pandas.tests.io.formats.test_style.TestStyler.test_copy(self)
pandas.tests.io.formats.test_style.TestStyler.test_deepcopy(self)
pandas.tests.io.formats.test_style.TestStyler.test_display_dict(self)
pandas.tests.io.formats.test_style.TestStyler.test_display_format(self)
pandas.tests.io.formats.test_style.TestStyler.test_display_format_raises(self)
pandas.tests.io.formats.test_style.TestStyler.test_display_subset(self)
pandas.tests.io.formats.test_style.TestStyler.test_empty(self)
pandas.tests.io.formats.test_style.TestStyler.test_empty_index_name_doesnt_display(self)
pandas.tests.io.formats.test_style.TestStyler.test_export(self)
pandas.tests.io.formats.test_style.TestStyler.test_get_level_lengths(self)
pandas.tests.io.formats.test_style.TestStyler.test_get_level_lengths_un_sorted(self)
pandas.tests.io.formats.test_style.TestStyler.test_highlight_max(self)
pandas.tests.io.formats.test_style.TestStyler.test_highlight_null(self,null_color='red')
pandas.tests.io.formats.test_style.TestStyler.test_index_name(self)
pandas.tests.io.formats.test_style.TestStyler.test_init_non_pandas(self)
pandas.tests.io.formats.test_style.TestStyler.test_init_series(self)
pandas.tests.io.formats.test_style.TestStyler.test_mi_sparse(self)
pandas.tests.io.formats.test_style.TestStyler.test_mi_sparse_column_names(self)
pandas.tests.io.formats.test_style.TestStyler.test_mi_sparse_disabled(self)
pandas.tests.io.formats.test_style.TestStyler.test_mi_sparse_index_names(self)
pandas.tests.io.formats.test_style.TestStyler.test_multiindex_name(self)
pandas.tests.io.formats.test_style.TestStyler.test_nonunique_raises(self)
pandas.tests.io.formats.test_style.TestStyler.test_numeric_columns(self)
pandas.tests.io.formats.test_style.TestStyler.test_precision(self)
pandas.tests.io.formats.test_style.TestStyler.test_render(self)
pandas.tests.io.formats.test_style.TestStyler.test_render_double(self)
pandas.tests.io.formats.test_style.TestStyler.test_repr_html_ok(self)
pandas.tests.io.formats.test_style.TestStyler.test_set_properties(self)
pandas.tests.io.formats.test_style.TestStyler.test_set_properties_subset(self)
pandas.tests.io.formats.test_style.TestStyler.test_table_attributes(self)
pandas.tests.io.formats.test_style.TestStyler.test_table_styles(self)
pandas.tests.io.formats.test_style.TestStyler.test_trim(self)
pandas.tests.io.formats.test_style.TestStyler.test_update_ctx(self)
pandas.tests.io.formats.test_style.TestStyler.test_update_ctx_flatten_multi(self)
pandas.tests.io.formats.test_style.TestStyler.test_update_ctx_flatten_multi_traliing_semi(self)
pandas.tests.io.formats.test_style.TestStyler.test_uuid(self)
pandas.tests.io.formats.test_style.TestStylerMatplotlibDep(object)
pandas.tests.io.formats.test_style.TestStylerMatplotlibDep.test_background_gradient(self)
pandas.tests.io.formats.test_style.test_block_names()
pandas.tests.io.formats.test_style.test_from_custom_template(tmpdir)
pandas.tests.io.formats.test_style.test_shim()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/formats/test_to_csv.py----------------------------------------
A:pandas.tests.io.formats.test_to_csv.df->DataFrame([1], columns=pd.MultiIndex.from_arrays([['foo'], ['bar']]))
A:pandas.tests.io.formats.test_to_csv.df_sec->DataFrame({'A': pd.date_range('20130101', periods=5, freq='s')})
A:pandas.tests.io.formats.test_to_csv.df_day->DataFrame({'A': pd.date_range('20130101', periods=5, freq='d')})
A:pandas.tests.io.formats.test_to_csv.df_sec_grouped->DataFrame({'A': pd.date_range('20130101', periods=5, freq='s')}).groupby([pd.Grouper(key='A', freq='1h'), 'B'])
pandas.tests.io.formats.test_to_csv.TestToCSV(object)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_csv_to_string(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_date_format(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_decimal(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_doublequote(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_escapechar(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_float_format(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_multi_index(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_na_rep(self)
pandas.tests.io.formats.test_to_csv.TestToCSV.test_to_csv_quotechar(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/formats/test_to_latex.py----------------------------------------
A:pandas.tests.io.formats.test_to_latex.df->DataFrame({'a': [1.0, 2.1], 'b': ['b1', 'b2']})
A:pandas.tests.io.formats.test_to_latex.withindex_result->DataFrame({'a': [1.0, 2.1], 'b': ['b1', 'b2']}).to_latex(decimal=',')
A:pandas.tests.io.formats.test_to_latex.withoutindex_result->DataFrame({'a': [1.0, 2.1], 'b': ['b1', 'b2']}).to_latex(header=['AA', 'BB'], index=False)
A:pandas.tests.io.formats.test_to_latex.result->DataFrame({'a': [1.0, 2.1], 'b': ['b1', 'b2']}).T.to_latex(multirow=True, multicolumn=True, multicolumn_format='c')
A:pandas.tests.io.formats.test_to_latex.unescaped_result->DataFrame(test_dict).to_latex(escape=False)
A:pandas.tests.io.formats.test_to_latex.escaped_result->DataFrame(test_dict).to_latex()
A:pandas.tests.io.formats.test_to_latex.observed->DataFrame({'a': [1.0, 2.1], 'b': ['b1', 'b2']}).to_latex()
A:pandas.tests.io.formats.test_to_latex.withoutescape_result->DataFrame({'a': [1.0, 2.1], 'b': ['b1', 'b2']}).to_latex(header=['$A$', '$B$'], escape=False)
pandas.tests.io.formats.test_to_latex.TestToLatex(object)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex(self,frame)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_decimal(self,frame)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_escape(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_escape_special_chars(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_filename(self,frame)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_format(self,frame)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_longtable(self,frame)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_multicolumnrow(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_multiindex(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_no_header(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_specified_header(self)
pandas.tests.io.formats.test_to_latex.TestToLatex.test_to_latex_with_formatters(self)
pandas.tests.io.formats.test_to_latex.frame()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/sas/test_sas.py----------------------------------------
A:pandas.tests.io.sas.test_sas.b->StringIO('')
pandas.tests.io.sas.test_sas.TestSas(object)
pandas.tests.io.sas.test_sas.TestSas.test_sas_buffer_format(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/sas/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/sas/test_xport.py----------------------------------------
A:pandas.tests.io.sas.test_xport.data[v]->data[v].astype(np.float64).astype(np.float64)
A:pandas.tests.io.sas.test_xport.self.dirpath->pandas.util.testing.get_data_path()
A:pandas.tests.io.sas.test_xport.self.file01->os.path.join(self.dirpath, 'DEMO_G.xpt')
A:pandas.tests.io.sas.test_xport.self.file02->os.path.join(self.dirpath, 'SSHSV1_A.xpt')
A:pandas.tests.io.sas.test_xport.self.file03->os.path.join(self.dirpath, 'DRXFCD_G.xpt')
A:pandas.tests.io.sas.test_xport.self.file04->os.path.join(self.dirpath, 'paxraw_d_short.xpt')
A:pandas.tests.io.sas.test_xport.data_csv->pandas.read_csv(self.file04.replace('.xpt', '.csv'))
A:pandas.tests.io.sas.test_xport.data->read_sas(self.file04, format='xport')
A:pandas.tests.io.sas.test_xport.reader->read_sas(self.file01, index='SEQN', chunksize=1000)
pandas.tests.io.sas.test_xport.TestXport(object)
pandas.tests.io.sas.test_xport.TestXport.setup_method(self,method)
pandas.tests.io.sas.test_xport.TestXport.test1_basic(self)
pandas.tests.io.sas.test_xport.TestXport.test1_incremental(self)
pandas.tests.io.sas.test_xport.TestXport.test1_index(self)
pandas.tests.io.sas.test_xport.TestXport.test2(self)
pandas.tests.io.sas.test_xport.TestXport.test_multiple_types(self)
pandas.tests.io.sas.test_xport.TestXport.test_truncated_float_support(self)
pandas.tests.io.sas.test_xport.numeric_as_float(data)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/sas/test_sas7bdat.py----------------------------------------
A:pandas.tests.io.sas.test_sas7bdat.self.dirpath->pandas.util.testing.get_data_path()
A:pandas.tests.io.sas.test_sas7bdat.fname->os.path.join(dirpath, 'airline.csv')
A:pandas.tests.io.sas.test_sas7bdat.df->pandas.read_sas(fname)
A:pandas.tests.io.sas.test_sas7bdat.epoch->pandas.datetime(1960, 1, 1)
A:pandas.tests.io.sas.test_sas7bdat.t1->pandas.to_timedelta(df['Column4'], unit='d')
A:pandas.tests.io.sas.test_sas7bdat.t2->pandas.to_timedelta(df['Column12'], unit='d')
A:pandas.tests.io.sas.test_sas7bdat.df.iloc[:, k]->pandas.read_sas(fname).iloc[:, k].apply(f)
A:pandas.tests.io.sas.test_sas7bdat.byts->f.read()
A:pandas.tests.io.sas.test_sas7bdat.buf->io.BytesIO(byts)
A:pandas.tests.io.sas.test_sas7bdat.rdr->SAS7BDATReader(fname, convert_header_text=False)
A:pandas.tests.io.sas.test_sas7bdat.d1->SAS7BDATReader(fname, convert_header_text=False).read(rdr.row_count + 20)
A:pandas.tests.io.sas.test_sas7bdat.d2->SAS7BDATReader(fname, convert_header_text=False).read(rdr.row_count + 20)
A:pandas.tests.io.sas.test_sas7bdat.dirpath->pandas.util.testing.get_data_path()
A:pandas.tests.io.sas.test_sas7bdat.df1->pandas.read_sas(fname)
A:pandas.tests.io.sas.test_sas7bdat.df2->pandas.read_sas(fname, encoding='utf-8')
A:pandas.tests.io.sas.test_sas7bdat.df1[col]->df1[col].str.decode('utf-8').str.decode('utf-8')
A:pandas.tests.io.sas.test_sas7bdat.df3->SAS7BDATReader(fname, convert_header_text=False).read()
A:pandas.tests.io.sas.test_sas7bdat.df0->df0.astype(np.float64).astype(np.float64)
A:pandas.tests.io.sas.test_sas7bdat.df0[vn]->df0[vn].astype(np.float64).astype(np.float64)
pandas.tests.io.sas.test_sas7bdat.TestSAS7BDAT(object)
pandas.tests.io.sas.test_sas7bdat.TestSAS7BDAT.setup_method(self,method)
pandas.tests.io.sas.test_sas7bdat.TestSAS7BDAT.test_from_buffer(self)
pandas.tests.io.sas.test_sas7bdat.TestSAS7BDAT.test_from_file(self)
pandas.tests.io.sas.test_sas7bdat.TestSAS7BDAT.test_from_iterator(self)
pandas.tests.io.sas.test_sas7bdat.TestSAS7BDAT.test_iterator_loop(self)
pandas.tests.io.sas.test_sas7bdat.TestSAS7BDAT.test_iterator_read_too_much(self)
pandas.tests.io.sas.test_sas7bdat.test_12659()
pandas.tests.io.sas.test_sas7bdat.test_airline()
pandas.tests.io.sas.test_sas7bdat.test_encoding_options()
pandas.tests.io.sas.test_sas7bdat.test_productsales()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/index_col.py----------------------------------------
A:pandas.tests.io.parser.index_col.rs->self.read_csv(StringIO(data), names=names, index_col='message')
A:pandas.tests.io.parser.index_col.xp->DataFrame({'a': [1, 5, 9], 'b': [2, 6, 10], 'c': [3, 7, 11], 'd': [4, 8, 12]}, index=Index(['hello', 'world', 'foo'], name='message'))
A:pandas.tests.io.parser.index_col.data->self.read_csv(StringIO(data))
A:pandas.tests.io.parser.index_col.expected->DataFrame([], columns=['x', 'y'])
A:pandas.tests.io.parser.index_col.result->self.read_csv(StringIO(data), index_col=False)
pandas.tests.io.parser.index_col.IndexColTests(object)
pandas.tests.io.parser.index_col.IndexColTests.test_empty_index_col_scenarios(self)
pandas.tests.io.parser.index_col.IndexColTests.test_empty_with_index_col_false(self)
pandas.tests.io.parser.index_col.IndexColTests.test_index_col_is_true(self)
pandas.tests.io.parser.index_col.IndexColTests.test_index_col_named(self)
pandas.tests.io.parser.index_col.IndexColTests.test_infer_index_col(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/skiprows.py----------------------------------------
A:pandas.tests.io.parser.skiprows.data->'\n'.join(['SMOSMANIA ThetaProbe-ML2X ', '2007/01/01 01:00   0.2140 U M ', '2007/01/01 02:00   0.2141 M O ', '2007/01/01 04:00   0.2142 D M '])
A:pandas.tests.io.parser.skiprows.data2->self.read_csv(StringIO(text), skiprows=6, header=None, index_col=0, parse_dates=True)
A:pandas.tests.io.parser.skiprows.expected->DataFrame({'foo': [3, 5]})
A:pandas.tests.io.parser.skiprows.condensed_data->self.read_csv(StringIO(condensed_text))
A:pandas.tests.io.parser.skiprows.df->self.read_csv(StringIO(data), skiprows=skiprows, header=0, names=['foo'])
pandas.tests.io.parser.skiprows.SkipRowsTests(object)
pandas.tests.io.parser.skiprows.SkipRowsTests.test_deep_skiprows(self)
pandas.tests.io.parser.skiprows.SkipRowsTests.test_skiprow_with_newline(self)
pandas.tests.io.parser.skiprows.SkipRowsTests.test_skiprow_with_newline_and_quote(self)
pandas.tests.io.parser.skiprows.SkipRowsTests.test_skiprow_with_quote(self)
pandas.tests.io.parser.skiprows.SkipRowsTests.test_skiprows_blank(self)
pandas.tests.io.parser.skiprows.SkipRowsTests.test_skiprows_bug(self)
pandas.tests.io.parser.skiprows.SkipRowsTests.test_skiprows_callable(self)
pandas.tests.io.parser.skiprows.SkipRowsTests.test_skiprows_infield_quote(self)
pandas.tests.io.parser.skiprows.SkipRowsTests.test_skiprows_lineterminator(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/na_values.py----------------------------------------
A:pandas.tests.io.parser.na_values.result->self.read_csv(StringIO(data))
A:pandas.tests.io.parser.na_values.expected->DataFrame({'1': [2]}, index=Index(['b'], name='a'))
A:pandas.tests.io.parser.na_values.df->self.read_csv(StringIO(data), keep_default_na=False)
A:pandas.tests.io.parser.na_values.out->self.read_csv(StringIO(data), keep_default_na=False, index_col=0)
A:pandas.tests.io.parser.na_values._NA_VALUES->set(['-1.#IND', '1.#QNAN', '1.#IND', '-1.#QNAN', '#N/A', 'N/A', 'NA', '#NA', 'NULL', 'NaN', 'nan', '-NaN', '-nan', '#N/A N/A', ''])
A:pandas.tests.io.parser.na_values.nv->len(_NA_VALUES)
A:pandas.tests.io.parser.na_values.buf->'{0}{1}'.format(buf, ''.join([','] * (nv - i - 1)))
A:pandas.tests.io.parser.na_values.data->StringIO('\n'.join([f(i, v) for (i, v) in enumerate(_NA_VALUES)]))
A:pandas.tests.io.parser.na_values.df2->self.read_table(StringIO(data), sep=',', na_values=['baz'], skiprows=[1])
A:pandas.tests.io.parser.na_values.df3->self.read_table(StringIO(data), sep=',', na_values='baz', skiprows=[1])
A:pandas.tests.io.parser.na_values.xp->DataFrame({'One': ['a', 'b', '', 'd', 'e', 'nan', 'g'], 'Two': [1, 2, 3, 4, 5, 6, 7], 'Three': ['None', 'two', 'None', 'nan', 'five', '', 'seven']})
A:pandas.tests.io.parser.na_values.na_values_copy->na_values.copy()
pandas.tests.io.parser.na_values.NAvaluesTests(object)
pandas.tests.io.parser.na_values.NAvaluesTests.test_bool_na_values(self)
pandas.tests.io.parser.na_values.NAvaluesTests.test_custom_na_values(self)
pandas.tests.io.parser.na_values.NAvaluesTests.test_default_na_values(self)
pandas.tests.io.parser.na_values.NAvaluesTests.test_detect_string_na(self)
pandas.tests.io.parser.na_values.NAvaluesTests.test_empty_na_values_no_default_with_index(self)
pandas.tests.io.parser.na_values.NAvaluesTests.test_na_trailing_columns(self)
pandas.tests.io.parser.na_values.NAvaluesTests.test_na_value_dict(self)
pandas.tests.io.parser.na_values.NAvaluesTests.test_na_values_dict_aliasing(self)
pandas.tests.io.parser.na_values.NAvaluesTests.test_na_values_dict_col_index(self)
pandas.tests.io.parser.na_values.NAvaluesTests.test_na_values_keep_default(self)
pandas.tests.io.parser.na_values.NAvaluesTests.test_na_values_na_filter_override(self)
pandas.tests.io.parser.na_values.NAvaluesTests.test_na_values_scalar(self)
pandas.tests.io.parser.na_values.NAvaluesTests.test_na_values_uint64(self)
pandas.tests.io.parser.na_values.NAvaluesTests.test_non_string_na_values(self)
pandas.tests.io.parser.na_values.NAvaluesTests.test_string_nas(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/parse_dates.py----------------------------------------
A:pandas.tests.io.parser.parse_dates.expected->DataFrame(expected_data, columns=['case', 'opdate'])
A:pandas.tests.io.parser.parse_dates.df->self.read_csv(StringIO(data), date_parser=date_parser, parse_dates={'datetime': ['date', 'time']}, index_col=['datetime', 'prn'])
A:pandas.tests.io.parser.parse_dates.d->datetime(1999, 1, 27, 19, 0)
A:pandas.tests.io.parser.parse_dates.result->self.read_csv(StringIO(data), parse_dates=['opdate'])
A:pandas.tests.io.parser.parse_dates.ex_val->Timestamp('05/31/2012 15:30:00.029')
A:pandas.tests.io.parser.parse_dates.log_file->StringIO('posix_timestamp,elapsed,sys,user,queries,query_time,rows,accountid,userid,contactid,level,silo,method\n1343103150,0.062353,0,4,6,0.01690,3,12345,1,-1,3,invoice_InvoiceResource,search\n')
A:pandas.tests.io.parser.parse_dates.rs->self.read_csv(StringIO(data), index_col=0, parse_dates=[[0, 1]])
A:pandas.tests.io.parser.parse_dates.idx->DatetimeIndex([datetime(2009, 1, 31, 0, 10, 0), datetime(2009, 2, 28, 10, 20, 0), datetime(2009, 3, 31, 8, 30, 0)], dtype=object, name='date_time')
A:pandas.tests.io.parser.parse_dates.xp->self.read_csv(StringIO(self.ts_data), parse_dates={'nominal': [1, 2]})
A:pandas.tests.io.parser.parse_dates.df2->self.read_csv(StringIO(data), parse_dates={'nominal': [1, 2]}, index_col=0)
A:pandas.tests.io.parser.parse_dates.exp_index->DatetimeIndex(['2016-04-15'], name='a')
A:pandas.tests.io.parser.parse_dates.data->StringIO('Date,x\n2012-06-13T01:39:00Z,0.5')
A:pandas.tests.io.parser.parse_dates.arr->self.read_csv(StringIO(data), parse_dates=['opdate']).index.to_pydatetime()
A:pandas.tests.io.parser.parse_dates.df3->self.read_csv(StringIO(data), parse_dates=[[1, 2]], index_col=0)
A:pandas.tests.io.parser.parse_dates.reader->self.read_csv(StringIO(self.ts_data), parse_dates={'nominal': [1, 2]}, index_col='nominal', chunksize=2)
A:pandas.tests.io.parser.parse_dates.chunks->list(reader)
A:pandas.tests.io.parser.parse_dates.dates->numpy.array(['2007/1/3', '2008/2/4'], dtype=object)
A:pandas.tests.io.parser.parse_dates.times->numpy.array(['05:07:09', '06:08:00'], dtype=object)
A:pandas.tests.io.parser.parse_dates.years->numpy.array([2007, 2008])
A:pandas.tests.io.parser.parse_dates.months->numpy.array([1, 2])
A:pandas.tests.io.parser.parse_dates.days->numpy.array([3, 4])
A:pandas.tests.io.parser.parse_dates.hours->numpy.array([5, 6])
A:pandas.tests.io.parser.parse_dates.minutes->numpy.array([7, 8])
A:pandas.tests.io.parser.parse_dates.seconds->numpy.array([9, 0])
A:pandas.tests.io.parser.parse_dates.datetime->np_array_datetime64_compat(date + 'T' + time + 'Z', dtype='datetime64[s]')
A:pandas.tests.io.parser.parse_dates.datetimes->np_array_datetime64_compat(['2013-11-03T19:00:00Z'] * 3, dtype='datetime64[s]')
A:pandas.tests.io.parser.parse_dates.df_correct->DataFrame(data={'rxstatus': ['00E80000'] * 3}, index=MultiIndex.from_tuples([(datetimes[0], 126), (datetimes[1], 23), (datetimes[2], 13)], names=['datetime', 'prn']))
pandas.tests.io.parser.parse_dates.ParseDatesTests(object)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_csv_custom_parser(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_date_parser_int_bug(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_dateparser_resolution_if_not_ns(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_datetime_fractional_seconds(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_datetime_six_col(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_generic(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_multi_index_parse_dates(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_multiple_date_col(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_multiple_date_col_multiple_index(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_multiple_date_col_name_collision(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_multiple_date_col_named_components(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_multiple_date_col_timestamp_parse(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_multiple_date_cols_chunked(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_multiple_date_cols_index(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_multiple_date_cols_int_cast(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_multiple_date_cols_with_header(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_nat_parse(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_parse_date_column_with_empty_string(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_parse_date_fields(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_parse_date_time(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_parse_date_time_multi_level_column_name(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_parse_dates_column_list(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_parse_dates_custom_euroformat(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_parse_dates_empty_string(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_parse_dates_implicit_first_col(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_parse_dates_noconvert_thousands(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_parse_dates_string(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_parse_tz_aware(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_read_with_parse_dates_invalid_type(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_read_with_parse_dates_scalar_non_bool(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_separator_date_conflict(self)
pandas.tests.io.parser.parse_dates.ParseDatesTests.test_yy_format_with_yearfirst(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/test_unsupported.py----------------------------------------
pandas.tests.io.parser.test_unsupported.TestDeprecatedFeatures(object)
pandas.tests.io.parser.test_unsupported.TestDeprecatedFeatures.test_deprecated_args(self)
pandas.tests.io.parser.test_unsupported.TestUnsupportedFeatures(object)
pandas.tests.io.parser.test_unsupported.TestUnsupportedFeatures.test_c_engine(self)
pandas.tests.io.parser.test_unsupported.TestUnsupportedFeatures.test_mangle_dupe_cols_false(self)
pandas.tests.io.parser.test_unsupported.TestUnsupportedFeatures.test_python_engine(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/multithread.py----------------------------------------
A:pandas.tests.io.parser.multithread.df->_construct_dataframe(num_rows)
A:pandas.tests.io.parser.multithread.df['date']->pandas.date_range('20000101 09:00:00', periods=num_rows, freq='s')
A:pandas.tests.io.parser.multithread.df['int']->numpy.arange(num_rows, dtype='int64')
A:pandas.tests.io.parser.multithread.pool->ThreadPool(8)
A:pandas.tests.io.parser.multithread.results->ThreadPool(8).map(self.read_csv, files)
A:pandas.tests.io.parser.multithread.final_dataframe->self._generate_multithread_dataframe(path, num_rows, num_tasks)
pandas.tests.io.parser.multithread.MultithreadTests(object)
pandas.tests.io.parser.multithread.MultithreadTests._generate_multithread_dataframe(self,path,num_rows,num_tasks)
pandas.tests.io.parser.multithread.MultithreadTests.test_multithread_path_multipart_read_csv(self)
pandas.tests.io.parser.multithread.MultithreadTests.test_multithread_stringio_read_csv(self)
pandas.tests.io.parser.multithread._construct_dataframe(num_rows)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/c_parser_only.py----------------------------------------
A:pandas.tests.io.parser.c_parser_only.df->self.read_csv(StringIO('a'), float_precision='round_trip', header=None)
A:pandas.tests.io.parser.c_parser_only.expected->DataFrame({'a': ['1', 'ba']})
A:pandas.tests.io.parser.c_parser_only.result->self.read_csv(StringIO(data))
A:pandas.tests.io.parser.c_parser_only.expected['a']->expected['a'].astype(np.int32).astype(np.int32)
A:pandas.tests.io.parser.c_parser_only.text->'a\n{0:.25}'.format(num)
A:pandas.tests.io.parser.c_parser_only.normal_val->float(self.read_csv(StringIO(text))['a'][0])
A:pandas.tests.io.parser.c_parser_only.precise_val->float(self.read_csv(StringIO(text), float_precision='high')['a'][0])
A:pandas.tests.io.parser.c_parser_only.roundtrip_val->float(self.read_csv(StringIO(text), float_precision='round_trip')['a'][0])
A:pandas.tests.io.parser.c_parser_only.actual_val->Decimal(text[2:])
A:pandas.tests.io.parser.c_parser_only.result2->self.read_csv(StringIO(data), usecols=(0, 2), names=('a', 'b', 'c'), header=None, converters={'a': str}, dtype={'b': int, 'c': float})
A:pandas.tests.io.parser.c_parser_only.s->StringIO(',' * count)
A:pandas.tests.io.parser.c_parser_only.row->tuple((val_ if val_ else float('nan') for val_ in record_.split(',')))
A:pandas.tests.io.parser.c_parser_only.chunks_->self.read_csv(StringIO(csv_data), header=None, dtype=object, chunksize=chunksize)
A:pandas.tests.io.parser.c_parser_only.rows->test_input.split('\n')
pandas.tests.io.parser.c_parser_only.CParserTests(object)
pandas.tests.io.parser.c_parser_only.CParserTests.test_buffer_overflow(self)
pandas.tests.io.parser.c_parser_only.CParserTests.test_buffer_rd_bytes(self)
pandas.tests.io.parser.c_parser_only.CParserTests.test_custom_lineterminator(self)
pandas.tests.io.parser.c_parser_only.CParserTests.test_data_after_quote(self)
pandas.tests.io.parser.c_parser_only.CParserTests.test_delim_whitespace_custom_terminator(self)
pandas.tests.io.parser.c_parser_only.CParserTests.test_disable_bool_parsing(self)
pandas.tests.io.parser.c_parser_only.CParserTests.test_dtype_and_names_error(self)
pandas.tests.io.parser.c_parser_only.CParserTests.test_float_precision_round_trip_with_text(self)
pandas.tests.io.parser.c_parser_only.CParserTests.test_grow_boundary_at_cap(self)
pandas.tests.io.parser.c_parser_only.CParserTests.test_internal_null_byte(self)
pandas.tests.io.parser.c_parser_only.CParserTests.test_large_difference_in_columns(self)
pandas.tests.io.parser.c_parser_only.CParserTests.test_parse_ragged_csv(self)
pandas.tests.io.parser.c_parser_only.CParserTests.test_parse_trim_buffers(self)
pandas.tests.io.parser.c_parser_only.CParserTests.test_pass_dtype_as_recarray(self)
pandas.tests.io.parser.c_parser_only.CParserTests.test_precise_conversion(self)
pandas.tests.io.parser.c_parser_only.CParserTests.test_read_nrows_large(self)
pandas.tests.io.parser.c_parser_only.CParserTests.test_tokenize_CR_with_quoting(self)
pandas.tests.io.parser.c_parser_only.CParserTests.test_unsupported_dtype(self)
pandas.tests.io.parser.c_parser_only.CParserTests.test_usecols_dtypes(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/test_network.py----------------------------------------
A:pandas.tests.io.parser.test_network.path->os.path.join(tm.get_data_path(), 'salaries.csv')
A:pandas.tests.io.parser.test_network.url_table->read_table(url, compression=compression, engine=engine)
A:pandas.tests.io.parser.test_network.df->read_csv('s3://pandas-test/tips.csv' + ext, engine='python', nrows=10, compression=comp)
A:pandas.tests.io.parser.test_network.local_tips->read_csv(tm.get_data_path('tips.csv'))
A:pandas.tests.io.parser.test_network.df_reader->read_csv('s3://pandas-test/tips.csv' + ext, chunksize=chunksize, compression=comp, engine='python')
A:pandas.tests.io.parser.test_network.client->boto3.client('s3')
A:pandas.tests.io.parser.test_network.s3_object->boto3.client('s3').get_object(Bucket=bucket, Key=key)
A:pandas.tests.io.parser.test_network.result->read_csv(s3_object['Body'])
A:pandas.tests.io.parser.test_network.expected->read_csv(tm.get_data_path('tips.csv'))
pandas.tests.io.parser.test_network.TestS3(object)
pandas.tests.io.parser.test_network.TestS3.boto3_client_s3(self)
pandas.tests.io.parser.test_network.TestS3.setup_method(self,method)
pandas.tests.io.parser.test_network.TestS3.test_infer_s3_compression(self)
pandas.tests.io.parser.test_network.TestS3.test_parse_public_s3_bucket(self)
pandas.tests.io.parser.test_network.TestS3.test_parse_public_s3_bucket_chunked(self)
pandas.tests.io.parser.test_network.TestS3.test_parse_public_s3_bucket_chunked_python(self)
pandas.tests.io.parser.test_network.TestS3.test_parse_public_s3_bucket_nrows(self)
pandas.tests.io.parser.test_network.TestS3.test_parse_public_s3_bucket_nrows_python(self)
pandas.tests.io.parser.test_network.TestS3.test_parse_public_s3_bucket_python(self)
pandas.tests.io.parser.test_network.TestS3.test_parse_public_s3a_bucket(self)
pandas.tests.io.parser.test_network.TestS3.test_parse_public_s3n_bucket(self)
pandas.tests.io.parser.test_network.TestS3.test_s3_fails(self)
pandas.tests.io.parser.test_network.check_compressed_urls(salaries_table,compression,extension,mode,engine)
pandas.tests.io.parser.test_network.salaries_table()
pandas.tests.io.parser.test_network.test_compressed_urls(salaries_table,compression,extension,mode,engine)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/converters.py----------------------------------------
A:pandas.tests.io.parser.converters.result->self.read_csv(fh, converters={'score': convert_score, 'days': convert_days}, na_values=['', None])
A:pandas.tests.io.parser.converters.result2->self.read_csv(fh, converters={'score': convert_score, 'days': convert_days_sentinel}, na_values=['', None])
A:pandas.tests.io.parser.converters.expected->self.read_csv(StringIO(data))
A:pandas.tests.io.parser.converters.expected['D']->expected['D'].map(converter).map(converter)
A:pandas.tests.io.parser.converters.df->self.read_csv(StringIO(data), header=None, converters=converter)
A:pandas.tests.io.parser.converters.df2->self.read_csv(StringIO(data), sep=';', converters=converter)
A:pandas.tests.io.parser.converters.x->x.strip().strip()
A:pandas.tests.io.parser.converters.is_plus->x.strip().strip().endswith('+')
A:pandas.tests.io.parser.converters.(valmin, valmax)->lmap(int, x.split('-'))
A:pandas.tests.io.parser.converters.val->float(x)
A:pandas.tests.io.parser.converters.fh->StringIO(data)
A:pandas.tests.io.parser.converters.rs->self.read_csv(StringIO(data), sep=';', index_col='A', converters={'A': lambda x: x})
A:pandas.tests.io.parser.converters.xp->DataFrame({'B': [2, 4]}, index=Index([1, 3], name='A'))
pandas.tests.io.parser.converters.ConverterTests(object)
pandas.tests.io.parser.converters.ConverterTests.test_converter_index_col_bug(self)
pandas.tests.io.parser.converters.ConverterTests.test_converter_return_string_bug(self)
pandas.tests.io.parser.converters.ConverterTests.test_converters(self)
pandas.tests.io.parser.converters.ConverterTests.test_converters_corner_with_nas(self)
pandas.tests.io.parser.converters.ConverterTests.test_converters_euro_decimal_format(self)
pandas.tests.io.parser.converters.ConverterTests.test_converters_no_implicit_conv(self)
pandas.tests.io.parser.converters.ConverterTests.test_converters_type_must_be_dict(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/quoting.py----------------------------------------
A:pandas.tests.io.parser.quoting.expected->DataFrame({'a': [1]})
A:pandas.tests.io.parser.quoting.result->self.read_csv(StringIO(data), quotechar=u('\x01'))
A:pandas.tests.io.parser.quoting.new_data->data.replace('"', quote_char)
pandas.tests.io.parser.quoting.QuotingTests(object)
pandas.tests.io.parser.quoting.QuotingTests.test_bad_quote_char(self)
pandas.tests.io.parser.quoting.QuotingTests.test_bad_quoting(self)
pandas.tests.io.parser.quoting.QuotingTests.test_double_quote(self)
pandas.tests.io.parser.quoting.QuotingTests.test_null_quote_char(self)
pandas.tests.io.parser.quoting.QuotingTests.test_quote_char_basic(self)
pandas.tests.io.parser.quoting.QuotingTests.test_quote_char_various(self)
pandas.tests.io.parser.quoting.QuotingTests.test_quotechar_unicode(self)
pandas.tests.io.parser.quoting.QuotingTests.test_quoting_various(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/dtypes.py----------------------------------------
A:pandas.tests.io.parser.dtypes.df->DataFrame(np.random.rand(5, 2).round(4), columns=list('AB'), index=['1A', '1B', '1C', '1D', '1E'])
A:pandas.tests.io.parser.dtypes.result->self.read_csv(StringIO(data), header=None, dtype=dt)
A:pandas.tests.io.parser.dtypes.expected->pandas.DataFrame([0, 1], dtype=dt)
A:pandas.tests.io.parser.dtypes.actual->self.read_table(pth, encoding=encoding, dtype='category')
A:pandas.tests.io.parser.dtypes.pth->pandas.util.testing.get_data_path('utf16_ex.txt')
A:pandas.tests.io.parser.dtypes.expected[1]->Categorical(expected[1])
A:pandas.tests.io.parser.dtypes.actuals->self.read_csv(StringIO(data), dtype={'b': 'category'}, chunksize=2)
A:pandas.tests.io.parser.dtypes.exp_idx->pandas.MultiIndex.from_arrays([np.empty(0, dtype='u1'), np.empty(0, dtype='O')], names=['one', 'two'])
A:pandas.tests.io.parser.dtypes.expected['a']->expected['a'].astype(np.int32).astype(np.int32)
A:pandas.tests.io.parser.dtypes.expected['b']->expected['b'].astype(np.float64).astype(np.float64)
pandas.tests.io.parser.dtypes.DtypeTests(object)
pandas.tests.io.parser.dtypes.DtypeTests.test_categorical_dtype(self)
pandas.tests.io.parser.dtypes.DtypeTests.test_categorical_dtype_chunksize(self)
pandas.tests.io.parser.dtypes.DtypeTests.test_categorical_dtype_encoding(self)
pandas.tests.io.parser.dtypes.DtypeTests.test_dtype_with_converter(self)
pandas.tests.io.parser.dtypes.DtypeTests.test_empty_dtype(self)
pandas.tests.io.parser.dtypes.DtypeTests.test_empty_pass_dtype(self)
pandas.tests.io.parser.dtypes.DtypeTests.test_empty_with_dup_column_pass_dtype_by_indexes(self)
pandas.tests.io.parser.dtypes.DtypeTests.test_empty_with_index_pass_dtype(self)
pandas.tests.io.parser.dtypes.DtypeTests.test_empty_with_mangled_column_pass_dtype_by_indexes(self)
pandas.tests.io.parser.dtypes.DtypeTests.test_empty_with_mangled_column_pass_dtype_by_names(self)
pandas.tests.io.parser.dtypes.DtypeTests.test_empty_with_multiindex_pass_dtype(self)
pandas.tests.io.parser.dtypes.DtypeTests.test_numeric_dtype(self)
pandas.tests.io.parser.dtypes.DtypeTests.test_pass_dtype(self)
pandas.tests.io.parser.dtypes.DtypeTests.test_passing_dtype(self)
pandas.tests.io.parser.dtypes.DtypeTests.test_raise_on_passed_int_dtype_with_nas(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/common.py----------------------------------------
A:pandas.tests.io.parser.common.handle->open(self.csv_shiftjs, 'rb')
A:pandas.tests.io.parser.common.codec->codecs.lookup('utf-8')
A:pandas.tests.io.parser.common.utf8->codecs.lookup('utf-8')
A:pandas.tests.io.parser.common.stream->codecs.StreamRecoder(handle, utf8.encode, utf8.decode, codec.streamreader, codec.streamwriter)
A:pandas.tests.io.parser.common.prefix->u('file://')
A:pandas.tests.io.parser.common.expected->DataFrame({'a': [1, 4]})
A:pandas.tests.io.parser.common.df->self.read_csv(StringIO(data), index_col=0, na_filter=False)
A:pandas.tests.io.parser.common.idx->Index(['a', 'b', 'c'], name=0)
A:pandas.tests.io.parser.common.result->self.read_csv(NoSeekTellBuffer(data))
A:pandas.tests.io.parser.common.it->self.read_table(StringIO(data), sep=',', header=1, comment='#', iterator=True, chunksize=1, skiprows=[2])
A:pandas.tests.io.parser.common.out->self.read_csv(StringIO(data), error_bad_lines=False, warn_bad_lines=True)
A:pandas.tests.io.parser.common.df2->self.read_csv(StringIO(data), sep=';', decimal=',')
A:pandas.tests.io.parser.common.fin->BytesIO(u('Łaski, Jan;1').encode('utf-8'))
A:pandas.tests.io.parser.common.df1->self.read_table(fin, sep=';', encoding='utf-8', header=None)
A:pandas.tests.io.parser.common.data->'mb_num,multibyte\n4.8,test'.encode(encoding)
A:pandas.tests.io.parser.common.reader->self.read_csv(StringIO(self.data1), index_col=0, iterator=True, skipfooter=1)
A:pandas.tests.io.parser.common.chunks->list(parser)
A:pandas.tests.io.parser.common.piece->self.read_csv(NoSeekTellBuffer(data)).get_chunk()
A:pandas.tests.io.parser.common.parser->TextParser(lines, index_col=0, chunksize=2, skiprows=[1])
A:pandas.tests.io.parser.common.chunk->self.read_csv(StringIO(self.data1), index_col=0, iterator=True, skipfooter=1).read(3)
A:pandas.tests.io.parser.common.last_chunk->self.read_csv(StringIO(self.data1), index_col=0, iterator=True, skipfooter=1).read(5)
A:pandas.tests.io.parser.common.lines->'mb_num,multibyte\n4.8,test'.encode(encoding).split('\n')
A:pandas.tests.io.parser.common.treader->self.read_table(StringIO(self.data1), sep=',', index_col=0, iterator=True)
A:pandas.tests.io.parser.common.no_header->'\n'.join(lines[1:])
A:pandas.tests.io.parser.common.round_trip->self.read_csv(StringIO(expected2.to_csv(index=False)), header=[0, 1])
A:pandas.tests.io.parser.common.cols->pandas.MultiIndex.from_tuples([('a', 'c'), ('b', 'd')])
A:pandas.tests.io.parser.common.expected2->DataFrame(columns=cols)
A:pandas.tests.io.parser.common.url_table->self.read_table('file://localhost/' + localtable)
A:pandas.tests.io.parser.common.dirpath->pandas.util.testing.get_data_path()
A:pandas.tests.io.parser.common.localtable->os.path.join(dirpath, 'salaries.csv')
A:pandas.tests.io.parser.common.local_table->self.read_table(localtable)
A:pandas.tests.io.parser.common.sfile->StringIO(s)
A:pandas.tests.io.parser.common.data2->u('skip this\nskip this too\nA,B,C\n1,2,3\n4,5,6')
A:pandas.tests.io.parser.common.bytes->dat.encode(enc)
A:pandas.tests.io.parser.common.s->TextIOWrapper(s, encoding='utf-8')
A:pandas.tests.io.parser.common.path->pandas.util.testing.get_data_path('utf16_ex.txt')
A:pandas.tests.io.parser.common.buf->BytesIO(open(path, 'rb').read())
A:pandas.tests.io.parser.common.pth->pandas.util.testing.get_data_path('unicode_series.csv')
A:pandas.tests.io.parser.common.df_roundtrip->self.read_csv(StringIO(data), float_precision=prec)
A:pandas.tests.io.parser.common.output->sys.stdout.getvalue()
A:pandas.tests.io.parser.common.sys.stdout->StringIO()
A:pandas.tests.io.parser.common.inf->float('inf')
A:pandas.tests.io.parser.common.ex_dtype->numpy.dtype([(str(i), 'u1') for i in range(4)])
A:pandas.tests.io.parser.common.mmap_file->os.path.join(self.dirpath, 'test_mmap.csv')
A:pandas.tests.io.parser.common.bom->u('\ufeff')
A:pandas.tests.io.parser.common.bom_data->(bom + _data).encode(utf8)
A:pandas.tests.io.parser.common.new_file->TemporaryFile('w+')
A:pandas.tests.io.parser.common.encoding->fmt.format(byte)
A:pandas.tests.io.parser.common.fh->StringIO('a,b\n1,2')
A:pandas.tests.io.parser.common.m->mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)
A:pandas.tests.io.parser.common.val->sys.stderr.getvalue()
A:pandas.tests.io.parser.common.sys.stderr->StringIO()
pandas.tests.io.parser.common.ParserTests(object)
pandas.tests.io.parser.common.ParserTests.test_1000_sep(self)
pandas.tests.io.parser.common.ParserTests.test_1000_sep_with_decimal(self)
pandas.tests.io.parser.common.ParserTests.test_as_recarray(self)
pandas.tests.io.parser.common.ParserTests.test_bad_stream_exception(self)
pandas.tests.io.parser.common.ParserTests.test_catch_too_many_names(self)
pandas.tests.io.parser.common.ParserTests.test_chunk_begins_with_newline_whitespace(self)
pandas.tests.io.parser.common.ParserTests.test_chunks_have_consistent_numerical_type(self)
pandas.tests.io.parser.common.ParserTests.test_compact_ints_as_recarray(self)
pandas.tests.io.parser.common.ParserTests.test_compact_ints_use_unsigned(self)
pandas.tests.io.parser.common.ParserTests.test_csv_mixed_type(self)
pandas.tests.io.parser.common.ParserTests.test_duplicate_columns(self)
pandas.tests.io.parser.common.ParserTests.test_empty_decimal_marker(self)
pandas.tests.io.parser.common.ParserTests.test_empty_lines(self)
pandas.tests.io.parser.common.ParserTests.test_empty_with_index(self)
pandas.tests.io.parser.common.ParserTests.test_empty_with_multiindex(self)
pandas.tests.io.parser.common.ParserTests.test_empty_with_nrows_chunksize(self)
pandas.tests.io.parser.common.ParserTests.test_empty_with_reversed_multiindex(self)
pandas.tests.io.parser.common.ParserTests.test_eof_states(self)
pandas.tests.io.parser.common.ParserTests.test_escapechar(self)
pandas.tests.io.parser.common.ParserTests.test_euro_decimal_format(self)
pandas.tests.io.parser.common.ParserTests.test_file(self)
pandas.tests.io.parser.common.ParserTests.test_file_handles(self)
pandas.tests.io.parser.common.ParserTests.test_float_parser(self)
pandas.tests.io.parser.common.ParserTests.test_get_chunk_passed_chunksize(self)
pandas.tests.io.parser.common.ParserTests.test_ignore_leading_whitespace(self)
pandas.tests.io.parser.common.ParserTests.test_inf_parsing(self)
pandas.tests.io.parser.common.ParserTests.test_int64_min_issues(self)
pandas.tests.io.parser.common.ParserTests.test_int64_overflow(self)
pandas.tests.io.parser.common.ParserTests.test_int_conversion(self)
pandas.tests.io.parser.common.ParserTests.test_integer_overflow_bug(self)
pandas.tests.io.parser.common.ParserTests.test_internal_eof_byte(self)
pandas.tests.io.parser.common.ParserTests.test_invalid_file_buffer(self)
pandas.tests.io.parser.common.ParserTests.test_iteration_open_handle(self)
pandas.tests.io.parser.common.ParserTests.test_iterator(self)
pandas.tests.io.parser.common.ParserTests.test_malformed(self)
pandas.tests.io.parser.common.ParserTests.test_memory_map(self)
pandas.tests.io.parser.common.ParserTests.test_missing_trailing_delimiters(self)
pandas.tests.io.parser.common.ParserTests.test_multi_index_blank_df(self)
pandas.tests.io.parser.common.ParserTests.test_multi_index_no_level_names(self)
pandas.tests.io.parser.common.ParserTests.test_no_unnamed_index(self)
pandas.tests.io.parser.common.ParserTests.test_nonexistent_path(self)
pandas.tests.io.parser.common.ParserTests.test_null_byte_char(self)
pandas.tests.io.parser.common.ParserTests.test_parse_bools(self)
pandas.tests.io.parser.common.ParserTests.test_parse_integers_above_fp_precision(self)
pandas.tests.io.parser.common.ParserTests.test_pass_names_with_index(self)
pandas.tests.io.parser.common.ParserTests.test_quoting(self)
pandas.tests.io.parser.common.ParserTests.test_raise_on_no_columns(self)
pandas.tests.io.parser.common.ParserTests.test_raise_on_sep_with_delim_whitespace(self)
pandas.tests.io.parser.common.ParserTests.test_read_chunksize(self)
pandas.tests.io.parser.common.ParserTests.test_read_chunksize_and_nrows(self)
pandas.tests.io.parser.common.ParserTests.test_read_chunksize_generated_index(self)
pandas.tests.io.parser.common.ParserTests.test_read_chunksize_named(self)
pandas.tests.io.parser.common.ParserTests.test_read_csv(self)
pandas.tests.io.parser.common.ParserTests.test_read_csv_dataframe(self)
pandas.tests.io.parser.common.ParserTests.test_read_csv_no_index_name(self)
pandas.tests.io.parser.common.ParserTests.test_read_csv_parse_simple_list(self)
pandas.tests.io.parser.common.ParserTests.test_read_csv_utf_aliases(self)
pandas.tests.io.parser.common.ParserTests.test_read_duplicate_index_explicit(self)
pandas.tests.io.parser.common.ParserTests.test_read_duplicate_index_implicit(self)
pandas.tests.io.parser.common.ParserTests.test_read_duplicate_names(self)
pandas.tests.io.parser.common.ParserTests.test_read_empty_with_usecols(self)
pandas.tests.io.parser.common.ParserTests.test_read_nrows(self)
pandas.tests.io.parser.common.ParserTests.test_read_table_unicode(self)
pandas.tests.io.parser.common.ParserTests.test_read_table_wrong_num_columns(self)
pandas.tests.io.parser.common.ParserTests.test_read_text_list(self)
pandas.tests.io.parser.common.ParserTests.test_regex_separator(self)
pandas.tests.io.parser.common.ParserTests.test_scientific_no_exponent(self)
pandas.tests.io.parser.common.ParserTests.test_single_char_leading_whitespace(self)
pandas.tests.io.parser.common.ParserTests.test_skip_bad_lines(self)
pandas.tests.io.parser.common.ParserTests.test_skipinitialspace(self)
pandas.tests.io.parser.common.ParserTests.test_squeeze(self)
pandas.tests.io.parser.common.ParserTests.test_squeeze_no_view(self)
pandas.tests.io.parser.common.ParserTests.test_temporary_file(self)
pandas.tests.io.parser.common.ParserTests.test_trailing_delimiters(self)
pandas.tests.io.parser.common.ParserTests.test_trailing_spaces(self)
pandas.tests.io.parser.common.ParserTests.test_uneven_lines_with_usecols(self)
pandas.tests.io.parser.common.ParserTests.test_unicode_encoding(self)
pandas.tests.io.parser.common.ParserTests.test_unnamed_columns(self)
pandas.tests.io.parser.common.ParserTests.test_url(self)
pandas.tests.io.parser.common.ParserTests.test_utf16_bom_skiprows(self)
pandas.tests.io.parser.common.ParserTests.test_utf16_example(self)
pandas.tests.io.parser.common.ParserTests.test_utf8_bom(self)
pandas.tests.io.parser.common.ParserTests.test_verbose_import(self)
pandas.tests.io.parser.common.ParserTests.test_warn_if_chunks_have_mismatched_type(self)
pandas.tests.io.parser.common.ParserTests.test_whitespace_lines(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/test_parsers.py----------------------------------------
A:pandas.tests.io.parser.test_parsers.self.dirpath->pandas.util.testing.get_data_path()
A:pandas.tests.io.parser.test_parsers.self.csv1->os.path.join(self.dirpath, 'test1.csv')
A:pandas.tests.io.parser.test_parsers.self.csv2->os.path.join(self.dirpath, 'test2.csv')
A:pandas.tests.io.parser.test_parsers.self.xls1->os.path.join(self.dirpath, 'test.xls')
A:pandas.tests.io.parser.test_parsers.self.csv_shiftjs->os.path.join(self.dirpath, 'sauron.SHIFT_JIS.csv')
A:pandas.tests.io.parser.test_parsers.kwds->kwds.copy().copy()
pandas.tests.io.parser.test_parsers.BaseParser(CommentTests,CompressionTests,ConverterTests,DialectTests,HeaderTests,IndexColTests,MultithreadTests,NAvaluesTests,ParseDatesTests,ParserTests,SkipRowsTests,UsecolsTests,QuotingTests,DtypeTests)
pandas.tests.io.parser.test_parsers.BaseParser.float_precision_choices(self)
pandas.tests.io.parser.test_parsers.BaseParser.read_csv(self,*args,**kwargs)
pandas.tests.io.parser.test_parsers.BaseParser.read_table(self,*args,**kwargs)
pandas.tests.io.parser.test_parsers.BaseParser.setup_method(self,method)
pandas.tests.io.parser.test_parsers.TestCParserHighMemory(BaseParser,CParserTests)
pandas.tests.io.parser.test_parsers.TestCParserHighMemory.read_csv(self,*args,**kwds)
pandas.tests.io.parser.test_parsers.TestCParserHighMemory.read_table(self,*args,**kwds)
pandas.tests.io.parser.test_parsers.TestCParserLowMemory(BaseParser,CParserTests)
pandas.tests.io.parser.test_parsers.TestCParserLowMemory.read_csv(self,*args,**kwds)
pandas.tests.io.parser.test_parsers.TestCParserLowMemory.read_table(self,*args,**kwds)
pandas.tests.io.parser.test_parsers.TestPythonParser(BaseParser,PythonParserTests)
pandas.tests.io.parser.test_parsers.TestPythonParser.read_csv(self,*args,**kwds)
pandas.tests.io.parser.test_parsers.TestPythonParser.read_table(self,*args,**kwds)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/compression.py----------------------------------------
A:pandas.tests.io.parser.compression.data->data_file.read()
A:pandas.tests.io.parser.compression.expected->self.read_csv(self.csv1, index_col=0, parse_dates=True)
A:pandas.tests.io.parser.compression.tmp->pandas.util.testing._skip_if_no_lzma().LZMAFile(path, mode='wb')
A:pandas.tests.io.parser.compression.result->self.read_csv(path, compression='infer')
A:pandas.tests.io.parser.compression.lzma->pandas.util.testing._skip_if_no_lzma()
A:pandas.tests.io.parser.compression.df->self.read_csv(f, index_col=0, parse_dates=True, compression='infer')
pandas.tests.io.parser.compression.CompressionTests(object)
pandas.tests.io.parser.compression.CompressionTests.test_bz2(self)
pandas.tests.io.parser.compression.CompressionTests.test_gzip(self)
pandas.tests.io.parser.compression.CompressionTests.test_invalid_compression(self)
pandas.tests.io.parser.compression.CompressionTests.test_read_csv_infer_compression(self)
pandas.tests.io.parser.compression.CompressionTests.test_xz(self)
pandas.tests.io.parser.compression.CompressionTests.test_zip(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/test_textreader.py----------------------------------------
A:pandas.tests.io.parser.test_textreader.self.dirpath->pandas.util.testing.get_data_path()
A:pandas.tests.io.parser.test_textreader.self.csv1->os.path.join(self.dirpath, 'test1.csv')
A:pandas.tests.io.parser.test_textreader.self.csv2->os.path.join(self.dirpath, 'test2.csv')
A:pandas.tests.io.parser.test_textreader.self.xls1->os.path.join(self.dirpath, 'test.xls')
A:pandas.tests.io.parser.test_textreader.f->open(self.csv1, 'rb')
A:pandas.tests.io.parser.test_textreader.reader->_make_reader(usecols=(1, 2))
A:pandas.tests.io.parser.test_textreader.result->TextReader(StringIO(data), delimiter=',').read()
A:pandas.tests.io.parser.test_textreader.text->open(self.csv1, 'rb').read()
A:pandas.tests.io.parser.test_textreader.src->BytesIO(text)
A:pandas.tests.io.parser.test_textreader.expected->TextReader(StringIO(nice_text), **kwargs).read()
A:pandas.tests.io.parser.test_textreader.val->sys.stderr.getvalue()
A:pandas.tests.io.parser.test_textreader.recs->_make_reader(usecols=(1, 2)).read()
A:pandas.tests.io.parser.test_textreader.ex_values->numpy.array(['a', 'aa', 'aaa', 'aaaa', 'aaaa'], dtype='S4')
A:pandas.tests.io.parser.test_textreader.exp->_make_reader().read()
A:pandas.tests.io.parser.test_textreader.nice_text->open(self.csv1, 'rb').read().replace('\r', '\r\n')
A:pandas.tests.io.parser.test_textreader.a->DataFrame([['b'], [nan]], columns=['a'], index=['a', 'c'])
A:pandas.tests.io.parser.test_textreader.b->DataFrame([[1, 1, 1, 0], [1, 1, 1, 0]], columns=list('abcd'), index=[1, 1])
A:pandas.tests.io.parser.test_textreader.c->DataFrame([[1, 2, 3, 4], [6, nan, nan, nan], [8, 9, 10, 11], [13, 14, nan, nan]], columns=list('abcd'), index=[0, 5, 7, 12])
A:pandas.tests.io.parser.test_textreader.df->read_csv(StringIO(), chunksize=20, header=None, names=['a', 'b', 'c'])
pandas.tests.io.parser.test_textreader.TestTextReader(object)
pandas.tests.io.parser.test_textreader.TestTextReader.setup_method(self,method)
pandas.tests.io.parser.test_textreader.TestTextReader.test_StringIO(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_cr_delimited(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_delimit_whitespace(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_embedded_newline(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_empty_csv_input(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_empty_field_eof(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_eof_has_eol(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_escapechar(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_euro_decimal(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_file_handle(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_file_handle_mmap(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_header_not_enough_lines(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_header_not_enough_lines_as_recarray(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_integer_thousands(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_integer_thousands_alt(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_na_substitution(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_numpy_string_dtype(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_numpy_string_dtype_as_recarray(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_parse_booleans(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_pass_dtype(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_skip_bad_lines(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_skipinitialspace(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_string_factorize(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_string_filename(self)
pandas.tests.io.parser.test_textreader.TestTextReader.test_usecols(self)
pandas.tests.io.parser.test_textreader.assert_array_dicts_equal(left,right)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/test_read_fwf.py----------------------------------------
A:pandas.tests.io.parser.test_read_fwf.expected->read_csv(StringIO(test), skiprows=[0, 2], delim_whitespace=True)
A:pandas.tests.io.parser.test_read_fwf.df->read_fwf(StringIO(data), colspecs=[(0, 3), (3, 11), (12, 16)], thousands=',')
A:pandas.tests.io.parser.test_read_fwf.result->pandas.read_fwf(StringIO(data), colspecs=colspecs, dtype={'a': 'float64', 'b': str, 'c': 'int32'})
A:pandas.tests.io.parser.test_read_fwf.ntz->len(tzlist)
A:pandas.tests.io.parser.test_read_fwf.expected['dst']->expected['dst'].astype(object).astype(object)
A:pandas.tests.io.parser.test_read_fwf.data->bytes(data, encoding='utf-8')
A:pandas.tests.io.parser.test_read_fwf.tmp->compresser(path, mode='wb')
A:pandas.tests.io.parser.test_read_fwf.test->'\nAA   BBB  C\n12   345  6\n78   901  2\n'.strip()
A:pandas.tests.io.parser.test_read_fwf.expected['a']->expected['a'].astype('float64').astype('float64')
A:pandas.tests.io.parser.test_read_fwf.expected['b']->expected['b'].astype(str).astype(str)
A:pandas.tests.io.parser.test_read_fwf.expected['c']->expected['c'].astype('int32').astype('int32')
pandas.tests.io.parser.test_read_fwf.TestFwfParsing(object)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_1000_fwf(self)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_BytesIO_input(self)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_bool_header_arg(self)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_comment_fwf(self)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_dtype(self)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_full_file(self)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_full_file_with_missing(self)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_full_file_with_spaces(self)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_full_file_with_spaces_and_missing(self)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_fwf(self)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_fwf_colspecs_None(self)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_fwf_colspecs_is_list_or_tuple(self)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_fwf_colspecs_is_list_or_tuple_of_two_element_tuples(self)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_fwf_compression(self)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_fwf_for_uint8(self)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_fwf_regression(self)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_messed_up_data(self)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_multiple_delimiters(self)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_skiprows_by_index_inference(self)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_skiprows_inference(self)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_skiprows_inference_empty(self)
pandas.tests.io.parser.test_read_fwf.TestFwfParsing.test_variable_width_unicode(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/python_parser_only.py----------------------------------------
A:pandas.tests.io.parser.python_parser_only.data->data.replace(b',', b'::').replace(b',', b'::')
A:pandas.tests.io.parser.python_parser_only.data2->self.read_csv(StringIO(text), index_col=0, delimiter='|')
A:pandas.tests.io.parser.python_parser_only.data3->self.read_csv(StringIO(text), index_col=0, sep=None, skiprows=2)
A:pandas.tests.io.parser.python_parser_only.text->u('ignore this\nignore this too\nindex|A|B|C\nfoo|1|2|3\nbar|4|5|6\nbaz|7|8|9\n').encode('utf-8')
A:pandas.tests.io.parser.python_parser_only.s->TextIOWrapper(s, encoding='utf-8')
A:pandas.tests.io.parser.python_parser_only.data4->self.read_csv(s, index_col=0, sep=None, skiprows=2, encoding='utf-8')
A:pandas.tests.io.parser.python_parser_only.result->self.read_csv(BytesIO(encoded_data), sep=sep, names=['a', 'b'], encoding=encoding)
A:pandas.tests.io.parser.python_parser_only.expected->DataFrame({'a': [1], 'b': [2]})
A:pandas.tests.io.parser.python_parser_only.df->self.read_table(StringIO(text), sep='\\s+')
A:pandas.tests.io.parser.python_parser_only.no_footer->'\n'.join(data.split('\n')[:-3])
A:pandas.tests.io.parser.python_parser_only.tmp->bz2.BZ2File(path, mode='wb')
A:pandas.tests.io.parser.python_parser_only.actual->self.read_table(StringIO(data), sep='\\s+')
A:pandas.tests.io.parser.python_parser_only.encoded_data->data.replace(b',', b'::').replace(b',', b'::').encode(encoding)
pandas.tests.io.parser.python_parser_only.PythonParserTests(object)
pandas.tests.io.parser.python_parser_only.PythonParserTests.test_BytesIO_input(self)
pandas.tests.io.parser.python_parser_only.PythonParserTests.test_decompression_regex_sep(self)
pandas.tests.io.parser.python_parser_only.PythonParserTests.test_encoding_non_utf8_multichar_sep(self)
pandas.tests.io.parser.python_parser_only.PythonParserTests.test_invalid_skipfooter(self)
pandas.tests.io.parser.python_parser_only.PythonParserTests.test_multi_char_sep_quotes(self)
pandas.tests.io.parser.python_parser_only.PythonParserTests.test_read_table_buglet_4x_multiindex(self)
pandas.tests.io.parser.python_parser_only.PythonParserTests.test_single_line(self)
pandas.tests.io.parser.python_parser_only.PythonParserTests.test_skipfooter(self)
pandas.tests.io.parser.python_parser_only.PythonParserTests.test_skipfooter_bad_row(self)
pandas.tests.io.parser.python_parser_only.PythonParserTests.test_skipfooter_with_decimal(self)
pandas.tests.io.parser.python_parser_only.PythonParserTests.test_sniff_delimiter(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/usecols.py----------------------------------------
A:pandas.tests.io.parser.usecols.result->self.read_csv(StringIO(data), usecols=usecols)
A:pandas.tests.io.parser.usecols.result2->self.read_csv(StringIO(data), names=['a', 'b', 'c'], header=None, usecols=['b', 'c'])
A:pandas.tests.io.parser.usecols.exp->self.read_csv(StringIO(data))
A:pandas.tests.io.parser.usecols.expected->DataFrame({'A': [1, 3, 1, 1, 1, 5], 'B': [2, 4, 2, 2, 2, 6], 'C': [3, 5, 4, 3, 3, 7]})
A:pandas.tests.io.parser.usecols.df->self.read_csv(StringIO(data), usecols=usecols)
A:pandas.tests.io.parser.usecols.index->Index([Timestamp('2008-02-07 09:40'), Timestamp('2008-02-07 09:50'), Timestamp('2008-02-07 10:00')], name='date')
A:pandas.tests.io.parser.usecols.usecols->numpy.array(['a', 'b'])
A:pandas.tests.io.parser.usecols.names->list('acd')
pandas.tests.io.parser.usecols.UsecolsTests(object)
pandas.tests.io.parser.usecols.UsecolsTests.test_callable_usecols(self)
pandas.tests.io.parser.usecols.UsecolsTests.test_empty_usecols(self)
pandas.tests.io.parser.usecols.UsecolsTests.test_incomplete_first_row(self)
pandas.tests.io.parser.usecols.UsecolsTests.test_np_array_usecols(self)
pandas.tests.io.parser.usecols.UsecolsTests.test_raise_on_mixed_dtype_usecols(self)
pandas.tests.io.parser.usecols.UsecolsTests.test_uneven_length_cols(self)
pandas.tests.io.parser.usecols.UsecolsTests.test_usecols(self)
pandas.tests.io.parser.usecols.UsecolsTests.test_usecols_implicit_index_col(self)
pandas.tests.io.parser.usecols.UsecolsTests.test_usecols_index_col_False(self)
pandas.tests.io.parser.usecols.UsecolsTests.test_usecols_index_col_conflict(self)
pandas.tests.io.parser.usecols.UsecolsTests.test_usecols_regex_sep(self)
pandas.tests.io.parser.usecols.UsecolsTests.test_usecols_with_integer_like_header(self)
pandas.tests.io.parser.usecols.UsecolsTests.test_usecols_with_mixed_encoding_strings(self)
pandas.tests.io.parser.usecols.UsecolsTests.test_usecols_with_multibyte_characters(self)
pandas.tests.io.parser.usecols.UsecolsTests.test_usecols_with_multibyte_unicode_characters(self)
pandas.tests.io.parser.usecols.UsecolsTests.test_usecols_with_parse_dates(self)
pandas.tests.io.parser.usecols.UsecolsTests.test_usecols_with_parse_dates_and_full_names(self)
pandas.tests.io.parser.usecols.UsecolsTests.test_usecols_with_parse_dates_and_usecol_names(self)
pandas.tests.io.parser.usecols.UsecolsTests.test_usecols_with_single_byte_unicode_strings(self)
pandas.tests.io.parser.usecols.UsecolsTests.test_usecols_with_unicode_strings(self)
pandas.tests.io.parser.usecols.UsecolsTests.test_usecols_with_whitespace(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/header.py----------------------------------------
A:pandas.tests.io.parser.header.s->StringIO(',,')
A:pandas.tests.io.parser.header.df_pref->self.read_table(StringIO(data), sep=',', prefix='X', header=None)
A:pandas.tests.io.parser.header.expected->numpy.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]], dtype=np.int64)
A:pandas.tests.io.parser.header.df->self.read_table(StringIO(data), sep=',', header=None)
A:pandas.tests.io.parser.header.result->self.read_csv(StringIO(data2), names=['a', 'b', 'c'], header=0)
A:pandas.tests.io.parser.header.df2->self.read_table(StringIO(data), sep=',', names=names)
pandas.tests.io.parser.header.HeaderTests(object)
pandas.tests.io.parser.header.HeaderTests.test_bool_header_arg(self)
pandas.tests.io.parser.header.HeaderTests.test_header_multi_index(self)
pandas.tests.io.parser.header.HeaderTests.test_header_multiindex_common_format(self)
pandas.tests.io.parser.header.HeaderTests.test_header_names_backward_compat(self)
pandas.tests.io.parser.header.HeaderTests.test_header_not_first_line(self)
pandas.tests.io.parser.header.HeaderTests.test_header_with_index_col(self)
pandas.tests.io.parser.header.HeaderTests.test_no_header(self)
pandas.tests.io.parser.header.HeaderTests.test_no_header_prefix(self)
pandas.tests.io.parser.header.HeaderTests.test_read_only_header_no_rows(self)
pandas.tests.io.parser.header.HeaderTests.test_read_with_bad_header(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/dialect.py----------------------------------------
A:pandas.tests.io.parser.dialect.dia->csv.excel()
A:pandas.tests.io.parser.dialect.df->self.read_csv(StringIO(data), delimiter='.', dialect=dialect)
A:pandas.tests.io.parser.dialect.exp->DataFrame({'a': [1], 'b': [2]})
pandas.tests.io.parser.dialect.DialectTests(object)
pandas.tests.io.parser.dialect.DialectTests.test_dialect(self)
pandas.tests.io.parser.dialect.DialectTests.test_dialect_conflict(self)
pandas.tests.io.parser.dialect.DialectTests.test_dialect_str(self)
pandas.tests.io.parser.dialect.DialectTests.test_invalid_dialect(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/parser/comment.py----------------------------------------
A:pandas.tests.io.parser.comment.expected->DataFrame({0: ['a', '1'], 1: ['b', '2'], 2: ['c', '3']})
A:pandas.tests.io.parser.comment.df->self.read_csv(StringIO(data), comment='#', skiprows=4, header=1)
A:pandas.tests.io.parser.comment.result->self.read_csv(StringIO(data), comment='#', header=None)
pandas.tests.io.parser.comment.CommentTests(object)
pandas.tests.io.parser.comment.CommentTests.test_comment(self)
pandas.tests.io.parser.comment.CommentTests.test_comment_header(self)
pandas.tests.io.parser.comment.CommentTests.test_comment_skiprows(self)
pandas.tests.io.parser.comment.CommentTests.test_comment_skiprows_header(self)
pandas.tests.io.parser.comment.CommentTests.test_commment_first_line(self)
pandas.tests.io.parser.comment.CommentTests.test_custom_comment_char(self)
pandas.tests.io.parser.comment.CommentTests.test_line_comment(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/msgpack/test_except.py----------------------------------------
pandas.tests.io.msgpack.test_except.DummyException(Exception)
pandas.tests.io.msgpack.test_except.TestExceptions(object)
pandas.tests.io.msgpack.test_except.TestExceptions.test_invalidvalue(self)
pandas.tests.io.msgpack.test_except.TestExceptions.test_raise_from_object_hook(self)
pandas.tests.io.msgpack.test_except.TestExceptions.test_raise_on_find_unsupported_value(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/msgpack/test_buffer.py----------------------------------------
A:pandas.tests.io.msgpack.test_buffer.buf->bytearray(packb(('foo', 'bar')))
A:pandas.tests.io.msgpack.test_buffer.obj->unpackb(buf, use_list=1)
pandas.tests.io.msgpack.test_buffer.test_unpack_buffer()
pandas.tests.io.msgpack.test_buffer.test_unpack_bytearray()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/msgpack/test_unpack.py----------------------------------------
A:pandas.tests.io.msgpack.test_unpack.f->BytesIO(packb([1, 2, 3, 4]))
A:pandas.tests.io.msgpack.test_unpack.unpacker->MyUnpacker()
A:pandas.tests.io.msgpack.test_unpack.basecnt->sys.getrefcount(hook)
A:pandas.tests.io.msgpack.test_unpack.up->Unpacker(object_hook=hook, list_hook=hook)
pandas.tests.io.msgpack.test_unpack.TestUnpack(object)
pandas.tests.io.msgpack.test_unpack.TestUnpack.test_unpack_array_header_from_file(self)
pandas.tests.io.msgpack.test_unpack.TestUnpack.test_unpacker_ext_hook(self)
pandas.tests.io.msgpack.test_unpack.TestUnpack.test_unpacker_hook_refcnt(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/msgpack/test_read_size.py----------------------------------------
A:pandas.tests.io.msgpack.test_read_size.unpacker->Unpacker()
pandas.tests.io.msgpack.test_read_size.test_correct_type_nested_array()
pandas.tests.io.msgpack.test_read_size.test_incorrect_type_array()
pandas.tests.io.msgpack.test_read_size.test_incorrect_type_map()
pandas.tests.io.msgpack.test_read_size.test_incorrect_type_nested_map()
pandas.tests.io.msgpack.test_read_size.test_read_array_header()
pandas.tests.io.msgpack.test_read_size.test_read_map_header()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/msgpack/test_obj.py----------------------------------------
A:pandas.tests.io.msgpack.test_obj.packed->packb({1: [{'__complex__': True, 'real': 1, 'imag': 2}]})
A:pandas.tests.io.msgpack.test_obj.unpacked->unpackb(packed, list_hook=self._arr_to_str, use_list=1)
pandas.tests.io.msgpack.test_obj.DecodeError(Exception)
pandas.tests.io.msgpack.test_obj.TestObj(object)
pandas.tests.io.msgpack.test_obj.TestObj._arr_to_str(self,arr)
pandas.tests.io.msgpack.test_obj.TestObj._decode_complex(self,obj)
pandas.tests.io.msgpack.test_obj.TestObj._encode_complex(self,obj)
pandas.tests.io.msgpack.test_obj.TestObj.bad_complex_decoder(self,o)
pandas.tests.io.msgpack.test_obj.TestObj.test_an_exception_in_objecthook1(self)
pandas.tests.io.msgpack.test_obj.TestObj.test_an_exception_in_objecthook2(self)
pandas.tests.io.msgpack.test_obj.TestObj.test_array_hook(self)
pandas.tests.io.msgpack.test_obj.TestObj.test_bad_hook(self)
pandas.tests.io.msgpack.test_obj.TestObj.test_decode_hook(self)
pandas.tests.io.msgpack.test_obj.TestObj.test_decode_pairs_hook(self)
pandas.tests.io.msgpack.test_obj.TestObj.test_encode_hook(self)
pandas.tests.io.msgpack.test_obj.TestObj.test_only_one_obj_hook(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/msgpack/common.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/msgpack/test_case.py----------------------------------------
A:pandas.tests.io.msgpack.test_case.v->packb(obj)
pandas.tests.io.msgpack.test_case.check(length,obj)
pandas.tests.io.msgpack.test_case.check_array(overhead,num)
pandas.tests.io.msgpack.test_case.check_raw(overhead,num)
pandas.tests.io.msgpack.test_case.match(obj,buf)
pandas.tests.io.msgpack.test_case.test_1()
pandas.tests.io.msgpack.test_case.test_2()
pandas.tests.io.msgpack.test_case.test_3()
pandas.tests.io.msgpack.test_case.test_5()
pandas.tests.io.msgpack.test_case.test_9()
pandas.tests.io.msgpack.test_case.test_array16()
pandas.tests.io.msgpack.test_case.test_array32()
pandas.tests.io.msgpack.test_case.test_fixarray()
pandas.tests.io.msgpack.test_case.test_fixraw()
pandas.tests.io.msgpack.test_case.test_match()
pandas.tests.io.msgpack.test_case.test_raw16()
pandas.tests.io.msgpack.test_case.test_raw32()
pandas.tests.io.msgpack.test_case.test_unicode()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/msgpack/test_newspec.py----------------------------------------
A:pandas.tests.io.msgpack.test_newspec.b->packb(data, use_bin_type=True)
pandas.tests.io.msgpack.test_newspec.test_bin16()
pandas.tests.io.msgpack.test_newspec.test_bin32()
pandas.tests.io.msgpack.test_newspec.test_bin8()
pandas.tests.io.msgpack.test_newspec.test_ext()
pandas.tests.io.msgpack.test_newspec.test_str8()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/msgpack/test_limits.py----------------------------------------
A:pandas.tests.io.msgpack.test_limits.packer->Packer()
A:pandas.tests.io.msgpack.test_limits.packed->packb(d)
A:pandas.tests.io.msgpack.test_limits.unpacker->Unpacker(max_ext_len=2)
A:pandas.tests.io.msgpack.test_limits.d->ExtType(42, b'abc')
pandas.tests.io.msgpack.test_limits.TestLimits(object)
pandas.tests.io.msgpack.test_limits.TestLimits.test_array_header(self)
pandas.tests.io.msgpack.test_limits.TestLimits.test_integer(self)
pandas.tests.io.msgpack.test_limits.TestLimits.test_map_header(self)
pandas.tests.io.msgpack.test_limits.TestLimits.test_max_array_len(self)
pandas.tests.io.msgpack.test_limits.TestLimits.test_max_bin_len(self)
pandas.tests.io.msgpack.test_limits.TestLimits.test_max_ext_len(self)
pandas.tests.io.msgpack.test_limits.TestLimits.test_max_map_len(self)
pandas.tests.io.msgpack.test_limits.TestLimits.test_max_str_len(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/msgpack/test_format.py----------------------------------------
pandas.tests.io.msgpack.test_format.check(src,should,use_list=0)
pandas.tests.io.msgpack.test_format.testArray()
pandas.tests.io.msgpack.test_format.testFixArray()
pandas.tests.io.msgpack.test_format.testFixMap()
pandas.tests.io.msgpack.test_format.testFixRaw()
pandas.tests.io.msgpack.test_format.testFixnum()
pandas.tests.io.msgpack.test_format.testMap()
pandas.tests.io.msgpack.test_format.testRaw()
pandas.tests.io.msgpack.test_format.testSignedInt()
pandas.tests.io.msgpack.test_format.testSimpleValue()
pandas.tests.io.msgpack.test_format.testUnsignedInt()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/msgpack/test_extension.py----------------------------------------
A:pandas.tests.io.msgpack.test_extension.packer->pandas.io.msgpack.Packer()
A:pandas.tests.io.msgpack.test_extension.data->tobytes(obj)
A:pandas.tests.io.msgpack.test_extension.obj->array.array('d')
A:pandas.tests.io.msgpack.test_extension.s->pandas.io.msgpack.packb(obj, default=default)
A:pandas.tests.io.msgpack.test_extension.obj2->pandas.io.msgpack.unpackb(s, ext_hook=ext_hook)
pandas.tests.io.msgpack.test_extension.test_extension_type()
pandas.tests.io.msgpack.test_extension.test_pack_ext_type()
pandas.tests.io.msgpack.test_extension.test_unpack_ext_type()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/msgpack/test_unpack_raw.py----------------------------------------
A:pandas.tests.io.msgpack.test_unpack_raw.unpacker->Unpacker(io.BytesIO(expected), read_size=3, max_buffer_size=3)
A:pandas.tests.io.msgpack.test_unpack_raw.f->io.BytesIO()
A:pandas.tests.io.msgpack.test_unpack_raw.expected->packb(long_val)
A:pandas.tests.io.msgpack.test_unpack_raw.unpacked->Unpacker(io.BytesIO(expected), read_size=3, max_buffer_size=3).unpack(f.write)
pandas.tests.io.msgpack.test_unpack_raw.test_write_bytes()
pandas.tests.io.msgpack.test_unpack_raw.test_write_bytes_multi_buffer()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/msgpack/test_seq.py----------------------------------------
A:pandas.tests.io.msgpack.test_seq.binarydata->bytes(bytearray(range(256)))
A:pandas.tests.io.msgpack.test_seq.dumpf->io.BytesIO()
A:pandas.tests.io.msgpack.test_seq.packer->pandas.io.msgpack.Packer()
A:pandas.tests.io.msgpack.test_seq.data->gen_binary_data(idx)
A:pandas.tests.io.msgpack.test_seq.f->io.BytesIO(dumpf.getvalue())
A:pandas.tests.io.msgpack.test_seq.unpacker->pandas.io.msgpack.Unpacker(f, read_size=read_size, use_list=1)
pandas.tests.io.msgpack.test_seq.gen_binary_data(idx)
pandas.tests.io.msgpack.test_seq.test_exceeding_unpacker_read_size()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/msgpack/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/msgpack/test_sequnpack.py----------------------------------------
A:pandas.tests.io.msgpack.test_sequnpack.unpacker->Unpacker()
pandas.tests.io.msgpack.test_sequnpack.TestPack(object)
pandas.tests.io.msgpack.test_sequnpack.TestPack.test_foobar(self)
pandas.tests.io.msgpack.test_sequnpack.TestPack.test_foobar_skip(self)
pandas.tests.io.msgpack.test_sequnpack.TestPack.test_issue124(self)
pandas.tests.io.msgpack.test_sequnpack.TestPack.test_maxbuffersize(self)
pandas.tests.io.msgpack.test_sequnpack.TestPack.test_partialdata(self)
pandas.tests.io.msgpack.test_sequnpack.TestPack.test_readbytes(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/msgpack/test_pack.py----------------------------------------
A:pandas.tests.io.msgpack.test_pack.re->unpackb(packb('abc'), encoding=None, use_list=1)
A:pandas.tests.io.msgpack.test_pack.packer->Packer()
A:pandas.tests.io.msgpack.test_pack.data->Packer().pack(td)
A:pandas.tests.io.msgpack.test_pack.bio->pandas.compat.BytesIO()
A:pandas.tests.io.msgpack.test_pack.unpacker->Unpacker(bio)
A:pandas.tests.io.msgpack.test_pack.od->OrderedDict(seq)
A:pandas.tests.io.msgpack.test_pack.packed->Packer().pack_map_pairs(pairlist)
A:pandas.tests.io.msgpack.test_pack.unpacked->unpackb(packed, object_pairs_hook=list)
pandas.tests.io.msgpack.test_pack.TestPack(object)
pandas.tests.io.msgpack.test_pack.TestPack.check(self,data,use_list=False)
pandas.tests.io.msgpack.test_pack.TestPack.testArraySize(self,sizes=[0,5,50,1000])
pandas.tests.io.msgpack.test_pack.TestPack.testDecodeBinary(self)
pandas.tests.io.msgpack.test_pack.TestPack.testIgnoreErrorsPack(self)
pandas.tests.io.msgpack.test_pack.TestPack.testIgnoreUnicodeErrors(self)
pandas.tests.io.msgpack.test_pack.TestPack.testMapSize(self,sizes=[0,5,50,1000])
pandas.tests.io.msgpack.test_pack.TestPack.testNoEncoding(self)
pandas.tests.io.msgpack.test_pack.TestPack.testPack(self)
pandas.tests.io.msgpack.test_pack.TestPack.testPackBytes(self)
pandas.tests.io.msgpack.test_pack.TestPack.testPackFloat(self)
pandas.tests.io.msgpack.test_pack.TestPack.testPackUTF32(self)
pandas.tests.io.msgpack.test_pack.TestPack.testPackUnicode(self)
pandas.tests.io.msgpack.test_pack.TestPack.testStrictUnicodePack(self)
pandas.tests.io.msgpack.test_pack.TestPack.testStrictUnicodeUnpack(self)
pandas.tests.io.msgpack.test_pack.TestPack.test_manualreset(self,sizes=[0,5,50,1000])
pandas.tests.io.msgpack.test_pack.TestPack.test_odict(self)
pandas.tests.io.msgpack.test_pack.TestPack.test_pairlist(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/io/msgpack/test_subtype.py----------------------------------------
A:pandas.tests.io.msgpack.test_subtype.MyNamedTuple->namedtuple('MyNamedTuple', 'x y')
pandas.tests.io.msgpack.test_subtype.MyDict(dict)
pandas.tests.io.msgpack.test_subtype.MyList(list)
pandas.tests.io.msgpack.test_subtype.MyTuple(tuple)
pandas.tests.io.msgpack.test_subtype.test_types()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/sparse/test_pivot.py----------------------------------------
A:pandas.tests.sparse.test_pivot.self.dense->pandas.DataFrame({'A': ['foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'foo'], 'B': ['one', 'one', 'two', 'three', 'two', 'two', 'one', 'three'], 'C': np.random.randn(8), 'D': np.random.randn(8), 'E': [np.nan, np.nan, 1, 2, np.nan, 1, np.nan, np.nan]})
A:pandas.tests.sparse.test_pivot.self.sparse->self.dense.to_sparse()
A:pandas.tests.sparse.test_pivot.res_sparse->pandas.pivot_table(self.sparse, index='A', columns='B', values=['D', 'E'])
A:pandas.tests.sparse.test_pivot.res_dense->pandas.pivot_table(self.dense, index='A', columns='B', values=['D', 'E'])
pandas.tests.sparse.test_pivot.TestPivotTable(object)
pandas.tests.sparse.test_pivot.TestPivotTable.setup_method(self,method)
pandas.tests.sparse.test_pivot.TestPivotTable.test_pivot_table(self)
pandas.tests.sparse.test_pivot.TestPivotTable.test_pivot_table_multi(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/sparse/test_combine_concat.py----------------------------------------
A:pandas.tests.sparse.test_combine_concat.val1->numpy.array([1, 2, np.nan, np.nan, 0, np.nan])
A:pandas.tests.sparse.test_combine_concat.val2->numpy.array([3, np.nan, 4, 0, 0])
A:pandas.tests.sparse.test_combine_concat.sparse1->pandas.SparseSeries(val1, name='x', kind='integer')
A:pandas.tests.sparse.test_combine_concat.sparse2->self.dense2.to_sparse(fill_value=0)
A:pandas.tests.sparse.test_combine_concat.res->pandas.concat([sparse, self.dense3], axis=1)
A:pandas.tests.sparse.test_combine_concat.exp->pandas.concat([self.dense1, self.dense3], axis=1)
A:pandas.tests.sparse.test_combine_concat.sparse->self.dense1.to_sparse(fill_value=0)
A:pandas.tests.sparse.test_combine_concat.dense->pandas.Series(val2, name='y')
A:pandas.tests.sparse.test_combine_concat.self.dense1->pandas.DataFrame({'A': [0.0, 1.0, 2.0, np.nan], 'B': [0.0, 0.0, 0.0, 0.0], 'C': [np.nan, np.nan, np.nan, np.nan], 'D': [1.0, 2.0, 3.0, 4.0]})
A:pandas.tests.sparse.test_combine_concat.self.dense2->pandas.DataFrame({'A': [5.0, 6.0, 7.0, 8.0], 'B': [np.nan, 0.0, 7.0, 8.0], 'C': [5.0, 6.0, np.nan, np.nan], 'D': [np.nan, np.nan, np.nan, np.nan]})
A:pandas.tests.sparse.test_combine_concat.self.dense3->pandas.DataFrame({'E': [5.0, 6.0, 7.0, 8.0], 'F': [np.nan, 0.0, 7.0, 8.0], 'G': [5.0, 6.0, np.nan, np.nan], 'H': [np.nan, np.nan, np.nan, np.nan]})
A:pandas.tests.sparse.test_combine_concat.sparse3->self.dense3.to_sparse(fill_value=0)
pandas.tests.sparse.test_combine_concat.TestSparseDataFrameConcat(object)
pandas.tests.sparse.test_combine_concat.TestSparseDataFrameConcat.setup_method(self,method)
pandas.tests.sparse.test_combine_concat.TestSparseDataFrameConcat.test_concat(self)
pandas.tests.sparse.test_combine_concat.TestSparseDataFrameConcat.test_concat_axis1(self)
pandas.tests.sparse.test_combine_concat.TestSparseDataFrameConcat.test_concat_different_columns(self)
pandas.tests.sparse.test_combine_concat.TestSparseDataFrameConcat.test_concat_different_fill_value(self)
pandas.tests.sparse.test_combine_concat.TestSparseDataFrameConcat.test_concat_series(self)
pandas.tests.sparse.test_combine_concat.TestSparseDataFrameConcat.test_concat_sparse_dense(self)
pandas.tests.sparse.test_combine_concat.TestSparseSeriesConcat(object)
pandas.tests.sparse.test_combine_concat.TestSparseSeriesConcat.test_concat(self)
pandas.tests.sparse.test_combine_concat.TestSparseSeriesConcat.test_concat_axis1(self)
pandas.tests.sparse.test_combine_concat.TestSparseSeriesConcat.test_concat_axis1_different_fill(self)
pandas.tests.sparse.test_combine_concat.TestSparseSeriesConcat.test_concat_different_fill(self)
pandas.tests.sparse.test_combine_concat.TestSparseSeriesConcat.test_concat_different_kind(self)
pandas.tests.sparse.test_combine_concat.TestSparseSeriesConcat.test_concat_sparse_dense(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/sparse/common.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/sparse/test_array.py----------------------------------------
A:pandas.tests.sparse.test_array.self.arr_data->numpy.array([nan, nan, 1, 2, 3, nan, 4, 5, nan, 6])
A:pandas.tests.sparse.test_array.self.arr->SparseArray(self.arr_data)
A:pandas.tests.sparse.test_array.self.zarr->SparseArray([0, 0, 1, 2, 3, 0, 4, 5, 0, 6], fill_value=0)
A:pandas.tests.sparse.test_array.arr->SparseArray([True, False, True], fill_value=False, dtype=np.bool)
A:pandas.tests.sparse.test_array.exp->SparseArray([1, 3, 3, 3, 3], fill_value=0, dtype=np.float64)
A:pandas.tests.sparse.test_array.res->SparseArray([1, np.nan, np.nan, 3, np.nan], fill_value=0).fillna(3)
A:pandas.tests.sparse.test_array.errmsg->re.compile('bounds')
A:pandas.tests.sparse.test_array.data->numpy.arange(10).astype(float)
A:pandas.tests.sparse.test_array.sparse->SparseArray([1, -1, 0, -2], fill_value=0)
A:pandas.tests.sparse.test_array.result->SparseArray([2, 0, 1, -1], fill_value=1)
A:pandas.tests.sparse.test_array.expected->SparseArray([np.nan, np.nan, np.nan])
A:pandas.tests.sparse.test_array.cp->SparseArray(self.arr, copy=True)
A:pandas.tests.sparse.test_array.not_copy->SparseArray(self.arr)
A:pandas.tests.sparse.test_array.vals->numpy.array([np.nan, np.nan, np.nan, np.nan, np.nan])
A:pandas.tests.sparse.test_array.arr2->SparseArray(data2)
A:pandas.tests.sparse.test_array.dense->numpy.array([np.nan, 0, 3, 4, 0, 5, np.nan, np.nan, 0])
A:pandas.tests.sparse.test_array.data1->numpy.random.randn(20)
A:pandas.tests.sparse.test_array.data2->numpy.random.randn(20)
A:pandas.tests.sparse.test_array.arr1->SparseArray(data1)
A:pandas.tests.sparse.test_array.farr1->SparseArray(data1, fill_value=3)
A:pandas.tests.sparse.test_array.farr2->SparseArray(data2, fill_value=3)
A:pandas.tests.sparse.test_array.res2->op(first, second.values)
A:pandas.tests.sparse.test_array.res3->op(first.values, second)
A:pandas.tests.sparse.test_array.res4->op(first, 4)
A:pandas.tests.sparse.test_array.exp_fv->op(first.fill_value, 4)
A:pandas.tests.sparse.test_array.tmp->SparseArray(data1).copy()
A:pandas.tests.sparse.test_array.unpickled->pandas.util.testing.round_trip_pickle(obj)
A:pandas.tests.sparse.test_array.sp_arr->SparseArray([1, 2, 3])
A:pandas.tests.sparse.test_array.s->SparseArray([1, np.nan, np.nan, 3, np.nan], fill_value=0)
A:pandas.tests.sparse.test_array.out->numpy.mean(SparseArray(data))
A:pandas.tests.sparse.test_array.non_null_data->numpy.array([1, 2, 3, 4, 5], dtype=float)
A:pandas.tests.sparse.test_array.non_null_expected->SparseArray(non_null_data.cumsum())
A:pandas.tests.sparse.test_array.null_data->numpy.array([1, 2, np.nan, 4, 5], dtype=float)
A:pandas.tests.sparse.test_array.null_expected->SparseArray(np.array([1.0, 3.0, np.nan, 7.0, 12.0]))
A:pandas.tests.sparse.test_array.msg->'axis\\(={axis}\\) out of bounds'.format(axis=axis)
pandas.tests.sparse.test_array.TestSparseArray(object)
pandas.tests.sparse.test_array.TestSparseArray.setup_method(self,method)
pandas.tests.sparse.test_array.TestSparseArray.test_astype(self)
pandas.tests.sparse.test_array.TestSparseArray.test_astype_all(self)
pandas.tests.sparse.test_array.TestSparseArray.test_bad_take(self)
pandas.tests.sparse.test_array.TestSparseArray.test_binary_operators(self)
pandas.tests.sparse.test_array.TestSparseArray.test_constructor_bool(self)
pandas.tests.sparse.test_array.TestSparseArray.test_constructor_bool_fill_value(self)
pandas.tests.sparse.test_array.TestSparseArray.test_constructor_copy(self)
pandas.tests.sparse.test_array.TestSparseArray.test_constructor_dtype(self)
pandas.tests.sparse.test_array.TestSparseArray.test_constructor_float32(self)
pandas.tests.sparse.test_array.TestSparseArray.test_constructor_from_sparse(self)
pandas.tests.sparse.test_array.TestSparseArray.test_constructor_from_too_large_array(self)
pandas.tests.sparse.test_array.TestSparseArray.test_constructor_object_dtype(self)
pandas.tests.sparse.test_array.TestSparseArray.test_constructor_spindex_dtype(self)
pandas.tests.sparse.test_array.TestSparseArray.test_copy_shallow(self)
pandas.tests.sparse.test_array.TestSparseArray.test_fillna(self)
pandas.tests.sparse.test_array.TestSparseArray.test_fillna_overlap(self)
pandas.tests.sparse.test_array.TestSparseArray.test_generator_warnings(self)
pandas.tests.sparse.test_array.TestSparseArray.test_get_item(self)
pandas.tests.sparse.test_array.TestSparseArray.test_getitem(self)
pandas.tests.sparse.test_array.TestSparseArray.test_getslice(self)
pandas.tests.sparse.test_array.TestSparseArray.test_getslice_tuple(self)
pandas.tests.sparse.test_array.TestSparseArray.test_pickle(self)
pandas.tests.sparse.test_array.TestSparseArray.test_set_fill_value(self)
pandas.tests.sparse.test_array.TestSparseArray.test_set_item(self)
pandas.tests.sparse.test_array.TestSparseArray.test_sparseseries_roundtrip(self)
pandas.tests.sparse.test_array.TestSparseArray.test_take(self)
pandas.tests.sparse.test_array.TestSparseArray.test_take_fill_value(self)
pandas.tests.sparse.test_array.TestSparseArray.test_take_filling(self)
pandas.tests.sparse.test_array.TestSparseArray.test_take_filling_all_nan(self)
pandas.tests.sparse.test_array.TestSparseArray.test_take_filling_fill_value(self)
pandas.tests.sparse.test_array.TestSparseArray.test_take_invalid_kwargs(self)
pandas.tests.sparse.test_array.TestSparseArray.test_take_negative(self)
pandas.tests.sparse.test_array.TestSparseArray.test_to_dense(self)
pandas.tests.sparse.test_array.TestSparseArray.test_values_asarray(self)
pandas.tests.sparse.test_array.TestSparseArrayAnalytics(object)
pandas.tests.sparse.test_array.TestSparseArrayAnalytics.test_cumsum(self)
pandas.tests.sparse.test_array.TestSparseArrayAnalytics.test_mean(self)
pandas.tests.sparse.test_array.TestSparseArrayAnalytics.test_numpy_cumsum(self)
pandas.tests.sparse.test_array.TestSparseArrayAnalytics.test_numpy_mean(self)
pandas.tests.sparse.test_array.TestSparseArrayAnalytics.test_numpy_sum(self)
pandas.tests.sparse.test_array.TestSparseArrayAnalytics.test_sum(self)
pandas.tests.sparse.test_array.TestSparseArrayAnalytics.test_ufunc(self)
pandas.tests.sparse.test_array.TestSparseArrayAnalytics.test_ufunc_args(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/sparse/test_indexing.py----------------------------------------
A:pandas.tests.sparse.test_indexing.self.orig->pandas.Series([1, np.nan, np.nan, 3, np.nan], index=idx)
A:pandas.tests.sparse.test_indexing.self.sparse->self.orig.to_sparse()
A:pandas.tests.sparse.test_indexing.exp->pandas.DataFrame([[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], index=list('ABCD'), columns=list('xyz')).reindex(['A', 'C', 'B']).to_sparse(fill_value=0)
A:pandas.tests.sparse.test_indexing.s->pandas.SparseSeries(arr, index=['a', 'b', 'c'], dtype=np.float64)
A:pandas.tests.sparse.test_indexing.orig->pandas.DataFrame([[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], index=list('ABCD'), columns=list('xyz'))
A:pandas.tests.sparse.test_indexing.sparse->pandas.DataFrame([[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], index=list('ABCD'), columns=list('xyz')).to_sparse(fill_value=0)
A:pandas.tests.sparse.test_indexing.res->pandas.DataFrame([[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]], index=list('ABCD'), columns=list('xyz')).to_sparse(fill_value=0).reindex(['A', 'C', 'B'])
A:pandas.tests.sparse.test_indexing.floats->pandas.Series([1.0, 2.0, 3.0]).to_sparse()
A:pandas.tests.sparse.test_indexing.result->pandas.Series([1.0, 2.0, 3.0]).to_sparse().reindex([1, 2, 3], fill_value=0)
A:pandas.tests.sparse.test_indexing.expected->pandas.Series([0, 1, np.nan, 2], target).to_sparse()
A:pandas.tests.sparse.test_indexing.actual->pandas.SparseSeries(arr, index=['a', 'b', 'c'], dtype=np.float64).reindex(target, method='nearest', tolerance=0.2)
A:pandas.tests.sparse.test_indexing.arr->pandas.SparseArray([1, 2, 3], kind=kind)
A:pandas.tests.sparse.test_indexing.indexer->pandas.SparseSeries(indexer, index=['a', 'b', 'c'])
A:pandas.tests.sparse.test_indexing.idx->pandas.MultiIndex.from_tuples([('A', 0), ('A', 1), ('B', 0), ('C', 0), ('C', 1)])
A:pandas.tests.sparse.test_indexing.self.string_series->pandas.SparseSeries(['a', 'b', 'c'])
A:pandas.tests.sparse.test_indexing.self.int_series->pandas.SparseSeries([1, 2, 3])
A:pandas.tests.sparse.test_indexing.self.float_series->pandas.SparseSeries([1.1, 1.2, 1.3])
A:pandas.tests.sparse.test_indexing.self.object_series->pandas.SparseSeries([[], {}, set()])
A:pandas.tests.sparse.test_indexing.self.sdf->pandas.SparseDataFrame({'string': self.string_series, 'int': self.int_series, 'float': self.float_series, 'object': self.object_series})
A:pandas.tests.sparse.test_indexing.self.ss->pandas.SparseSeries(['a', 1, 1.1, []], index=self.cols)
pandas.tests.sparse.test_indexing.TestMultitype(object)
pandas.tests.sparse.test_indexing.TestMultitype.setup_method(self,method)
pandas.tests.sparse.test_indexing.TestMultitype.test_frame_basic_dtypes(self)
pandas.tests.sparse.test_indexing.TestMultitype.test_frame_indexing_multiple(self)
pandas.tests.sparse.test_indexing.TestMultitype.test_frame_indexing_single(self)
pandas.tests.sparse.test_indexing.TestMultitype.test_series_indexing_multiple(self)
pandas.tests.sparse.test_indexing.TestMultitype.test_series_indexing_single(self)
pandas.tests.sparse.test_indexing.TestSparseDataFrameIndexing(object)
pandas.tests.sparse.test_indexing.TestSparseDataFrameIndexing.test_at(self)
pandas.tests.sparse.test_indexing.TestSparseDataFrameIndexing.test_at_fill_value(self)
pandas.tests.sparse.test_indexing.TestSparseDataFrameIndexing.test_getitem(self)
pandas.tests.sparse.test_indexing.TestSparseDataFrameIndexing.test_getitem_fill_value(self)
pandas.tests.sparse.test_indexing.TestSparseDataFrameIndexing.test_iat(self)
pandas.tests.sparse.test_indexing.TestSparseDataFrameIndexing.test_iat_fill_value(self)
pandas.tests.sparse.test_indexing.TestSparseDataFrameIndexing.test_iloc(self)
pandas.tests.sparse.test_indexing.TestSparseDataFrameIndexing.test_iloc_slice(self)
pandas.tests.sparse.test_indexing.TestSparseDataFrameIndexing.test_loc(self)
pandas.tests.sparse.test_indexing.TestSparseDataFrameIndexing.test_loc_index(self)
pandas.tests.sparse.test_indexing.TestSparseDataFrameIndexing.test_loc_slice(self)
pandas.tests.sparse.test_indexing.TestSparseDataFrameIndexing.test_reindex(self)
pandas.tests.sparse.test_indexing.TestSparseDataFrameIndexing.test_reindex_fill_value(self)
pandas.tests.sparse.test_indexing.TestSparseDataFrameIndexing.test_take(self)
pandas.tests.sparse.test_indexing.TestSparseDataFrameIndexing.test_take_fill_value(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing(object)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.setup_method(self,method)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_at(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_at_fill_value(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_fill_value_reindex(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_get(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_getitem(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_getitem_ellipsis(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_getitem_fill_value(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_getitem_int_dtype(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_getitem_slice(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_getitem_slice_fill_value(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_iat(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_iat_fill_value(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_iloc(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_iloc_fill_value(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_iloc_slice(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_iloc_slice_fill_value(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_loc(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_loc_index(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_loc_index_fill_value(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_loc_slice(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_loc_slice_fill_value(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_loc_slice_index_fill_value(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_reindex(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_reindex_fill_value(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_reindex_nearest(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_take(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.test_take_fill_value(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesIndexing.tests_indexing_with_sparse(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesMultiIndexing(TestSparseSeriesIndexing)
pandas.tests.sparse.test_indexing.TestSparseSeriesMultiIndexing.setup_method(self,method)
pandas.tests.sparse.test_indexing.TestSparseSeriesMultiIndexing.test_getitem_multi(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesMultiIndexing.test_getitem_multi_tuple(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesMultiIndexing.test_getitems_slice_multi(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesMultiIndexing.test_loc(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesMultiIndexing.test_loc_multi_tuple(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesMultiIndexing.test_loc_slice(self)
pandas.tests.sparse.test_indexing.TestSparseSeriesMultiIndexing.test_reindex(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/sparse/test_format.py----------------------------------------
A:pandas.tests.sparse.test_format.s->pandas.SparseSeries([0, 1, 0, 0, 1, 0], fill_value=False)
A:pandas.tests.sparse.test_format.result->repr(s)
A:pandas.tests.sparse.test_format.exp->'0    0\n    ..\n5    0\ndtype: int64\nBlockIndex\nBlock locations: array([1, 4]{0})\nBlock lengths: array([1, 1]{0})'.format(dtype)
A:pandas.tests.sparse.test_format.idx->pandas.MultiIndex.from_tuples([('A', 0), ('A', 1), ('B', 0), ('C', 0), ('C', 1), ('C', 2)])
A:pandas.tests.sparse.test_format.df->pandas.DataFrame({'A': [True, False, True, False, True], 'B': [True, False, True, False, True], 'C': [0, 0, 3, 0, 5], 'D': [np.nan, np.nan, np.nan, 1, 2]})
A:pandas.tests.sparse.test_format.sparse->pandas.DataFrame({'A': [True, False, True, False, True], 'B': [True, False, True, False, True], 'C': [0, 0, 3, 0, 5], 'D': [np.nan, np.nan, np.nan, 1, 2]}).to_sparse()
A:pandas.tests.sparse.test_format.sdf->pandas.SparseDataFrame([[np.nan, 1], [2, np.nan]])
A:pandas.tests.sparse.test_format.res->pandas.SparseDataFrame([[np.nan, 1], [2, np.nan]]).copy()
pandas.tests.sparse.test_format.TestSparseDataFrameFormatting(object)
pandas.tests.sparse.test_format.TestSparseDataFrameFormatting.test_sparse_frame(self)
pandas.tests.sparse.test_format.TestSparseDataFrameFormatting.test_sparse_repr_after_set(self)
pandas.tests.sparse.test_format.TestSparseSeriesFormatting(object)
pandas.tests.sparse.test_format.TestSparseSeriesFormatting.dtype_format_for_platform(self)
pandas.tests.sparse.test_format.TestSparseSeriesFormatting.test_sparse_bool(self)
pandas.tests.sparse.test_format.TestSparseSeriesFormatting.test_sparse_int(self)
pandas.tests.sparse.test_format.TestSparseSeriesFormatting.test_sparse_max_row(self)
pandas.tests.sparse.test_format.TestSparseSeriesFormatting.test_sparse_mi_max_row(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/sparse/test_frame.py----------------------------------------
A:pandas.tests.sparse.test_frame.self.dates->bdate_range('1/1/2011', periods=10)
A:pandas.tests.sparse.test_frame.self.orig->pandas.DataFrame(self.data, index=self.dates)
A:pandas.tests.sparse.test_frame.self.iorig->pandas.DataFrame(self.data, index=self.dates)
A:pandas.tests.sparse.test_frame.self.frame->SparseDataFrame(self.data, index=self.dates)
A:pandas.tests.sparse.test_frame.self.iframe->SparseDataFrame(self.data, index=self.dates, default_kind='integer')
A:pandas.tests.sparse.test_frame.values->self.frame.values.copy()
A:pandas.tests.sparse.test_frame.self.zorig->pandas.DataFrame(values, columns=['A', 'B', 'C', 'D'], index=self.dates)
A:pandas.tests.sparse.test_frame.self.zframe->SparseDataFrame(values, columns=['A', 'B', 'C', 'D'], default_fill_value=0, index=self.dates)
A:pandas.tests.sparse.test_frame.self.fill_orig->pandas.DataFrame(values, columns=['A', 'B', 'C', 'D'], index=self.dates)
A:pandas.tests.sparse.test_frame.self.fill_frame->SparseDataFrame(values, columns=['A', 'B', 'C', 'D'], default_fill_value=2, index=self.dates)
A:pandas.tests.sparse.test_frame.self.empty->SparseDataFrame()
A:pandas.tests.sparse.test_frame.dat->numpy.array([0, 1, np.nan, 3, 4, 5], dtype='float')
A:pandas.tests.sparse.test_frame.df->pandas.DataFrame({'A': [nan, nan, 0, 1], 'B': [0, 1, 2, nan], 'C': [1.0, 2.0, 3.0, 4.0], 'D': [nan, nan, nan, nan]})
A:pandas.tests.sparse.test_frame.exp->pandas.DataFrame({'A': [True, True, True, True, False], 'B': [True, False, True, True, False]})
A:pandas.tests.sparse.test_frame.res->pandas.DataFrame({'A': [nan, nan, 0, 1], 'B': [0, 1, 2, nan], 'C': [1.0, 2.0, 3.0, 4.0], 'D': [nan, nan, nan, nan]}).isnotnull()
A:pandas.tests.sparse.test_frame.empty->self.empty.as_matrix()
A:pandas.tests.sparse.test_frame.no_cols->SparseDataFrame(index=np.arange(10))
A:pandas.tests.sparse.test_frame.mat->SparseDataFrame(columns=np.arange(10)).as_matrix()
A:pandas.tests.sparse.test_frame.no_index->SparseDataFrame(columns=np.arange(10))
A:pandas.tests.sparse.test_frame.cp->self.frame.copy()
A:pandas.tests.sparse.test_frame.sdf->pandas.SparseDataFrame(spm, index=index, columns=columns, default_fill_value=fill_value)
A:pandas.tests.sparse.test_frame.data[c]->pandas.SparseSeries(arr, name='x').to_dict()
A:pandas.tests.sparse.test_frame.cons->SparseDataFrame(self.frame, index=idx, columns=self.frame.columns, default_fill_value=self.frame.default_fill_value, default_kind=self.frame.default_kind, copy=True)
A:pandas.tests.sparse.test_frame.reindexed->self.frame.reindex(self.frame.index)
A:pandas.tests.sparse.test_frame.sp->SparseDataFrame(dense)
A:pandas.tests.sparse.test_frame.dense->self.zorig.reindex(lrange(5))
A:pandas.tests.sparse.test_frame.arr->numpy.eye(2, dtype=dtype)
A:pandas.tests.sparse.test_frame.x->Series(np.random.randn(10000), name='a')
A:pandas.tests.sparse.test_frame.y->Series(np.random.randn(10000), name='b')
A:pandas.tests.sparse.test_frame.x2->Series(np.random.randn(10000), name='a').astype(float)
A:pandas.tests.sparse.test_frame.x_sparse->Series(np.random.randn(10000), name='a').astype(float).to_sparse(fill_value=np.NaN)
A:pandas.tests.sparse.test_frame.y_sparse->Series(np.random.randn(10000), name='b').to_sparse(fill_value=0)
A:pandas.tests.sparse.test_frame.s->pandas.SparseSeries(arr, name='x')
A:pandas.tests.sparse.test_frame.trains->numpy.arange(100)
A:pandas.tests.sparse.test_frame.index->list('ab')
A:pandas.tests.sparse.test_frame.matrix->numpy.empty((len(index), len(trains)))
A:pandas.tests.sparse.test_frame.result->numpy.cumsum(self.frame)
A:pandas.tests.sparse.test_frame.expected->SparseDataFrame(self.frame.to_dense().cumsum())
A:pandas.tests.sparse.test_frame.dres->numpy.sqrt(self.frame.to_dense())
A:pandas.tests.sparse.test_frame.sparse_result->self.frame.copy().reindex(sidx)
A:pandas.tests.sparse.test_frame.dense_result->self.frame.to_dense().count(axis=1)
A:pandas.tests.sparse.test_frame.mixed_result->op(a, db)
A:pandas.tests.sparse.test_frame.iframe->SparseDataFrame(data, default_kind='integer')
A:pandas.tests.sparse.test_frame.frame->self.frame.copy()
A:pandas.tests.sparse.test_frame.res.index->pandas.DataFrame({'A': [nan, nan, 0, 1], 'B': [0, 1, 2, nan], 'C': [1.0, 2.0, 3.0, 4.0], 'D': [nan, nan, nan, nan]}).isnotnull().index.astype(object)
A:pandas.tests.sparse.test_frame.res2->pandas.DataFrame({'A': [nan, nan, 0, 1], 'B': [0, 1, 2, nan], 'C': [1.0, 2.0, 3.0, 4.0], 'D': [nan, nan, nan, nan]}).isnotnull().set_value('foobar', 'qux', 1.5)
A:pandas.tests.sparse.test_frame.N->len(frame)
A:pandas.tests.sparse.test_frame.frame['F']->frame['A'].to_dense()
A:pandas.tests.sparse.test_frame.frame['H']->numpy.random.randn(N)
A:pandas.tests.sparse.test_frame.to_sparsify->numpy.random.randn(N)
A:pandas.tests.sparse.test_frame.appended->a.append(b)
A:pandas.tests.sparse.test_frame.applied->self.frame.apply(np.sum)
A:pandas.tests.sparse.test_frame.broadcasted->self.frame.apply(np.sum, broadcast=True)
A:pandas.tests.sparse.test_frame.orig->DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], index=['a', 'a', 'c'])
A:pandas.tests.sparse.test_frame.sparse->pandas.DataFrame({'A': [nan, nan, 0, 1], 'B': [0, 1, 2, nan], 'C': [1.0, 2.0, 3.0, 4.0], 'D': [nan, nan, nan, nan]}).to_sparse()
A:pandas.tests.sparse.test_frame.desc->self.frame.describe()
A:pandas.tests.sparse.test_frame.joined->left.join(right)
A:pandas.tests.sparse.test_frame.sparse_result2->self.frame.copy().reindex(sidx).reindex(index)
A:pandas.tests.sparse.test_frame.dense_result2->self.frame.to_dense().count(axis=1).reindex(index)
A:pandas.tests.sparse.test_frame.length_zero->self.frame.copy().reindex([])
A:pandas.tests.sparse.test_frame.length_n->self.frame.copy().reindex([]).reindex(index)
A:pandas.tests.sparse.test_frame.rng->bdate_range('20110110', periods=20)
A:pandas.tests.sparse.test_frame.dense_dm->self.frame.copy().to_dense()
A:pandas.tests.sparse.test_frame.dense_frame->self.frame.copy().to_dense()
A:pandas.tests.sparse.test_frame.wp->pandas.Panel.from_dict({'foo': frame})
A:pandas.tests.sparse.test_frame.from_dense_lp->pandas.Panel.from_dict({'foo': frame}).to_frame()
A:pandas.tests.sparse.test_frame.from_sparse_lp->pandas.core.sparse.frame.stack_sparse_frame(frame)
A:pandas.tests.sparse.test_frame.shifted->self.frame.copy().shift(2, freq=BDay())
A:pandas.tests.sparse.test_frame.result2->df[::2].combine_first(df.to_dense())
A:pandas.tests.sparse.test_frame.df2->pandas.DataFrame({'A': [nan, nan, 0, 1], 'B': [0, 1, 2, nan], 'C': [1.0, 2.0, 3.0, 4.0], 'D': [nan, nan, nan, nan]}).copy()
A:pandas.tests.sparse.test_frame.sparse_df->DataFrame({'flag': [1.0, 0.0, 1.0]}).to_sparse(fill_value=0.0)
A:pandas.tests.sparse.test_frame.nan_colname->DataFrame(Series(1.0, index=[0]), columns=[nan])
A:pandas.tests.sparse.test_frame.nan_colname_sparse->DataFrame(Series(1.0, index=[0]), columns=[nan]).to_sparse()
A:pandas.tests.sparse.test_frame.spm->spmatrix(arr)
A:pandas.tests.sparse.test_frame.rarr->numpy.eye(2, dtype=dtype).astype(object)
A:pandas.tests.sparse.test_frame.sdf_obj->pandas.SparseDataFrame(spm, index=index, columns=columns, default_fill_value=fill_value).astype(object)
A:pandas.tests.sparse.test_frame.sdf['strings']->numpy.arange(len(sdf)).astype(str)
A:pandas.tests.sparse.test_frame.columns->list('cd')
pandas.tests.sparse.test_frame.TestSparseDataFrame(SharedWithSparse)
pandas.tests.sparse.test_frame.TestSparseDataFrame._check_all(self,check_func)
pandas.tests.sparse.test_frame.TestSparseDataFrame._check_frame_ops(self,frame)
pandas.tests.sparse.test_frame.TestSparseDataFrame.setup_method(self,method)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_append(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_apply(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_apply_nonuq(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_applymap(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_array_interface(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_as_blocks(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_as_matrix(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_astype(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_astype_bool(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_combine_add(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_combine_first(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_constructor(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_constructor_convert_index_once(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_constructor_dataframe(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_constructor_empty(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_constructor_from_series(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_constructor_nan_dataframe(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_constructor_ndarray(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_constructor_preserve_attr(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_copy(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_corr(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_count(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_delitem(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_dense_to_sparse(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_density(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_describe(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_dtypes(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_fancy_index_misc(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_fill_value_when_combine_const(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_fillna(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_fillna_fill_value(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_getitem(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_getitem_overload(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_iloc(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_isin(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_isnotnull(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_isnull(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_join(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_nan_columnname(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_numpy_transpose(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_op_corners(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_pickle(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_reindex(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_reindex_fill_value(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_reindex_method(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_rename(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_scalar_ops(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_set_columns(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_set_index(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_set_value(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_setitem(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_setitem_array(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_setitem_corner(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_shape(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_shift(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_sparse_frame_fillna_limit(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_sparse_frame_pad_backfill_limit(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_sparse_pow_issue(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_sparse_series_ops(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_sparse_series_ops_fill(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_sparse_series_ops_i(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_sparse_series_ops_z(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_sparse_to_dense(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_stack_sparse_frame(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_str(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_take(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_to_dense(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_transpose(self)
pandas.tests.sparse.test_frame.TestSparseDataFrame.test_type_coercion_at_construction(self)
pandas.tests.sparse.test_frame.TestSparseDataFrameAnalytics(object)
pandas.tests.sparse.test_frame.TestSparseDataFrameAnalytics.setup_method(self,method)
pandas.tests.sparse.test_frame.TestSparseDataFrameAnalytics.test_cumsum(self)
pandas.tests.sparse.test_frame.TestSparseDataFrameAnalytics.test_numpy_cumsum(self)
pandas.tests.sparse.test_frame.TestSparseDataFrameAnalytics.test_numpy_func_call(self)
pandas.tests.sparse.test_frame.TestSparseDataFrameArithmetic(object)
pandas.tests.sparse.test_frame.TestSparseDataFrameArithmetic.test_comparison_op_scalar(self)
pandas.tests.sparse.test_frame.TestSparseDataFrameArithmetic.test_numeric_op_scalar(self)
pandas.tests.sparse.test_frame.test_from_to_scipy(spmatrix,index,columns,fill_value,dtype)
pandas.tests.sparse.test_frame.test_from_to_scipy_object(spmatrix,fill_value)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/sparse/test_libsparse.py----------------------------------------
A:pandas.tests.sparse.test_libsparse.plain_case->dict(xloc=[0, 7, 15], xlen=[3, 5, 5], yloc=[2, 9, 14], ylen=[2, 3, 5], intersect_loc=[2, 9, 15], intersect_len=[1, 3, 4])
A:pandas.tests.sparse.test_libsparse.delete_blocks->dict(xloc=[0, 5], xlen=[4, 4], yloc=[1], ylen=[4], intersect_loc=[1], intersect_len=[3])
A:pandas.tests.sparse.test_libsparse.split_blocks->dict(xloc=[0], xlen=[10], yloc=[0, 5], ylen=[3, 7], intersect_loc=[0, 5], intersect_len=[3, 5])
A:pandas.tests.sparse.test_libsparse.skip_block->dict(xloc=[10], xlen=[5], yloc=[0, 12], ylen=[5, 3], intersect_loc=[12], intersect_len=[3])
A:pandas.tests.sparse.test_libsparse.no_intersect->dict(xloc=[0, 10], xlen=[4, 6], yloc=[5, 17], ylen=[4, 2], intersect_loc=[], intersect_len=[])
A:pandas.tests.sparse.test_libsparse.xindex->BlockIndex(TEST_LENGTH, xloc, xlen)
A:pandas.tests.sparse.test_libsparse.yindex->BlockIndex(TEST_LENGTH, yloc, ylen)
A:pandas.tests.sparse.test_libsparse.bresult->BlockIndex(TEST_LENGTH, xloc, xlen).make_union(yindex)
A:pandas.tests.sparse.test_libsparse.ixindex->BlockIndex(TEST_LENGTH, xloc, xlen).to_int_index()
A:pandas.tests.sparse.test_libsparse.iyindex->BlockIndex(TEST_LENGTH, yloc, ylen).to_int_index()
A:pandas.tests.sparse.test_libsparse.iresult->BlockIndex(TEST_LENGTH, xloc, xlen).to_int_index().make_union(iyindex)
A:pandas.tests.sparse.test_libsparse.a->IntIndex(5, np.array([0, 1], dtype=np.int32))
A:pandas.tests.sparse.test_libsparse.b->IntIndex(4, np.array([0, 1], dtype=np.int32))
A:pandas.tests.sparse.test_libsparse.res->_make_index(4, np.array([0, 1, 2, 3], dtype=np.int32), kind='integer').lookup_array(np.array([1, 4, 2, 5], dtype=np.int32))
A:pandas.tests.sparse.test_libsparse.exp->numpy.arange(0, i, 2, dtype=np.int32)
A:pandas.tests.sparse.test_libsparse.result->IntIndex(5, np.array([0, 1], dtype=np.int32)).intersect(b)
A:pandas.tests.sparse.test_libsparse.expected->BlockIndex(TEST_LENGTH, eloc, elen)
A:pandas.tests.sparse.test_libsparse.longer_index->BlockIndex(TEST_LENGTH + 1, yloc, ylen)
A:pandas.tests.sparse.test_libsparse.case->case.to_block_index().to_block_index()
A:pandas.tests.sparse.test_libsparse.idx->_make_index(4, np.array([0, 1, 2, 3], dtype=np.int32), kind='integer')
A:pandas.tests.sparse.test_libsparse.bindex->BlockIndex(20, [5, 12], [3, 6])
A:pandas.tests.sparse.test_libsparse.iindex->BlockIndex(20, [5, 12], [3, 6]).to_int_index()
A:pandas.tests.sparse.test_libsparse.index->IntIndex(10, [2, 3, 4, 5, 6])
A:pandas.tests.sparse.test_libsparse.block->BlockIndex(20, locs, lengths)
A:pandas.tests.sparse.test_libsparse.dense->BlockIndex(20, locs, lengths).to_int_index()
A:pandas.tests.sparse.test_libsparse.xbindex->BlockIndex(TEST_LENGTH, xloc, xlen).to_int_index().to_block_index()
A:pandas.tests.sparse.test_libsparse.ybindex->BlockIndex(TEST_LENGTH, yloc, ylen).to_int_index().to_block_index()
A:pandas.tests.sparse.test_libsparse.xdindex->BlockIndex(TEST_LENGTH, xloc, xlen).to_int_index()
A:pandas.tests.sparse.test_libsparse.ydindex->BlockIndex(TEST_LENGTH, yloc, ylen).to_int_index()
A:pandas.tests.sparse.test_libsparse.(result_block_vals, rb_index, bfill)->sparse_op(x, xindex, xfill, y, yindex, yfill)
A:pandas.tests.sparse.test_libsparse.(result_int_vals, ri_index, ifill)->sparse_op(x, xdindex, xfill, y, ydindex, yfill)
A:pandas.tests.sparse.test_libsparse.xseries->xseries.reindex(np.arange(TEST_LENGTH)).fillna(xfill).reindex(np.arange(TEST_LENGTH)).fillna(xfill)
A:pandas.tests.sparse.test_libsparse.yseries->yseries.reindex(np.arange(TEST_LENGTH)).fillna(yfill).reindex(np.arange(TEST_LENGTH)).fillna(yfill)
A:pandas.tests.sparse.test_libsparse.series_result->series_result.reindex(ri_index.indices).reindex(ri_index.indices)
A:pandas.tests.sparse.test_libsparse.sparse_op->getattr(splib, 'sparse_%s_float64' % op)
A:pandas.tests.sparse.test_libsparse.python_op->getattr(operator, op)
A:pandas.tests.sparse.test_libsparse.g->make_optestf(op)
pandas.tests.sparse.test_libsparse.TestBlockIndex(object)
pandas.tests.sparse.test_libsparse.TestBlockIndex.test_block_internal(self)
pandas.tests.sparse.test_libsparse.TestBlockIndex.test_check_integrity(self)
pandas.tests.sparse.test_libsparse.TestBlockIndex.test_equals(self)
pandas.tests.sparse.test_libsparse.TestBlockIndex.test_make_block_boundary(self)
pandas.tests.sparse.test_libsparse.TestBlockIndex.test_to_block_index(self)
pandas.tests.sparse.test_libsparse.TestBlockIndex.test_to_int_index(self)
pandas.tests.sparse.test_libsparse.TestIntIndex(object)
pandas.tests.sparse.test_libsparse.TestIntIndex.test_check_integrity(self)
pandas.tests.sparse.test_libsparse.TestIntIndex.test_equals(self)
pandas.tests.sparse.test_libsparse.TestIntIndex.test_int_internal(self)
pandas.tests.sparse.test_libsparse.TestIntIndex.test_to_block_index(self)
pandas.tests.sparse.test_libsparse.TestIntIndex.test_to_int_index(self)
pandas.tests.sparse.test_libsparse.TestSparseIndexCommon(object)
pandas.tests.sparse.test_libsparse.TestSparseIndexCommon.test_block_internal(self)
pandas.tests.sparse.test_libsparse.TestSparseIndexCommon.test_int_internal(self)
pandas.tests.sparse.test_libsparse.TestSparseIndexCommon.test_lookup(self)
pandas.tests.sparse.test_libsparse.TestSparseIndexCommon.test_lookup_array(self)
pandas.tests.sparse.test_libsparse.TestSparseIndexCommon.test_lookup_basics(self)
pandas.tests.sparse.test_libsparse.TestSparseIndexIntersect(object)
pandas.tests.sparse.test_libsparse.TestSparseIndexIntersect.test_intersect(self)
pandas.tests.sparse.test_libsparse.TestSparseIndexIntersect.test_intersect_empty(self)
pandas.tests.sparse.test_libsparse.TestSparseIndexIntersect.test_intersect_identical(self)
pandas.tests.sparse.test_libsparse.TestSparseIndexUnion(object)
pandas.tests.sparse.test_libsparse.TestSparseIndexUnion.test_index_make_union(self)
pandas.tests.sparse.test_libsparse.TestSparseIndexUnion.test_intindex_make_union(self)
pandas.tests.sparse.test_libsparse.TestSparseOperators(object)
pandas.tests.sparse.test_libsparse.TestSparseOperators._op_tests(self,sparse_op,python_op)
pandas.tests.sparse.test_libsparse.check_cases(_check_case)
pandas.tests.sparse.test_libsparse.make_optestf(op)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/sparse/test_series.py----------------------------------------
A:pandas.tests.sparse.test_series.arr->pandas.SparseArray([1, 0, 3, 0], dtype=np.int64, fill_value=0)
A:pandas.tests.sparse.test_series.index->numpy.arange(15)
A:pandas.tests.sparse.test_series.(arr, index)->_test_data1_zero()
A:pandas.tests.sparse.test_series.date_index->bdate_range('1/1/2000', periods=len(self.bseries))
A:pandas.tests.sparse.test_series.self.bseries->SparseSeries(arr, index=index, kind='block', name='bseries')
A:pandas.tests.sparse.test_series.self.btseries->SparseSeries(arr, index=date_index, kind='block')
A:pandas.tests.sparse.test_series.self.iseries->SparseSeries(arr, index=index, kind='integer', name='iseries')
A:pandas.tests.sparse.test_series.self.bseries2->SparseSeries(arr, index=index, kind='block')
A:pandas.tests.sparse.test_series.self.iseries2->SparseSeries(arr, index=index, kind='integer')
A:pandas.tests.sparse.test_series.self.zbseries->SparseSeries(arr, index=index, kind='block', fill_value=0, name='zbseries')
A:pandas.tests.sparse.test_series.self.ziseries->SparseSeries(arr, index=index, kind='integer', fill_value=0)
A:pandas.tests.sparse.test_series.self.zbseries2->SparseSeries(arr, index=index, kind='block', fill_value=0)
A:pandas.tests.sparse.test_series.self.ziseries2->SparseSeries(arr, index=index, kind='integer', fill_value=0)
A:pandas.tests.sparse.test_series.df->DataFrame({'col': self.bseries})
A:pandas.tests.sparse.test_series.expected->self.zbseries.to_dense().cumsum()
A:pandas.tests.sparse.test_series.s->pandas.SparseSeries([np.nan, 0.0, 1.0, 2.0, 0.0], name='xxx', fill_value=0.0)
A:pandas.tests.sparse.test_series.ts->Series(np.random.randn(10))
A:pandas.tests.sparse.test_series.sts->Series(np.random.randn(10)).to_sparse()
A:pandas.tests.sparse.test_series.series->SparseSeries([nan, 1.0, 2.0, 3.0, nan, nan], index=bdate_range('1/1/2000', periods=6))
A:pandas.tests.sparse.test_series.indexer->numpy.isfinite(arr)
A:pandas.tests.sparse.test_series.exp->pandas.Series([False, True, True, True, True], name='xxx')
A:pandas.tests.sparse.test_series.res->pandas.SparseSeries([np.nan, 0.0, 1.0, 2.0, 0.0], name='xxx', fill_value=0.0).isnotnull()
A:pandas.tests.sparse.test_series.bseries->SparseSeries([nan, 1.0, 2.0, 3.0, nan, nan], index=bdate_range('1/1/2000', periods=6)).to_sparse(kind='block')
A:pandas.tests.sparse.test_series.iseries->SparseSeries([nan, 1.0, 2.0, 3.0, nan, nan], index=bdate_range('1/1/2000', periods=6)).to_sparse(kind='integer')
A:pandas.tests.sparse.test_series.zbseries->SparseSeries([nan, 1.0, 2.0, 3.0, nan, nan], index=bdate_range('1/1/2000', periods=6)).to_sparse(kind='block', fill_value=0)
A:pandas.tests.sparse.test_series.ziseries->SparseSeries([nan, 1.0, 2.0, 3.0, nan, nan], index=bdate_range('1/1/2000', periods=6)).to_sparse(kind='integer', fill_value=0)
A:pandas.tests.sparse.test_series.result->numpy.cumsum(self.zbseries)
A:pandas.tests.sparse.test_series.s5->SparseSeries(self.bseries, index=date_index)
A:pandas.tests.sparse.test_series.bseries2->SparseSeries(self.bseries.to_dense())
A:pandas.tests.sparse.test_series.values->numpy.ones(self.bseries.npoints)
A:pandas.tests.sparse.test_series.sp->SparseSeries([0, 0, 0, nan, nan, 5, 6], fill_value=0)
A:pandas.tests.sparse.test_series.sp_series->SparseSeries(arr, fill_value=0)
A:pandas.tests.sparse.test_series.cop->self.zbseries.copy()
A:pandas.tests.sparse.test_series.cop2->self.zbseries.copy()
A:pandas.tests.sparse.test_series.zbcop->self.zbseries.copy()
A:pandas.tests.sparse.test_series.zicop->self.ziseries.copy()
A:pandas.tests.sparse.test_series.view->self.bseries.copy(deep=False)
A:pandas.tests.sparse.test_series.orig->pandas.Series([1, 0, 0, 4], dtype=np.int64)
A:pandas.tests.sparse.test_series.unpickled->pandas.util.testing.round_trip_pickle(series)
A:pandas.tests.sparse.test_series.dense->pandas.Series(vals, name='xx')
A:pandas.tests.sparse.test_series.sparse_result->getattr(obj, op)()
A:pandas.tests.sparse.test_series.sp_result->op(a, b)
A:pandas.tests.sparse.test_series.dense_result->f(s.to_dense())
A:pandas.tests.sparse.test_series.tmp->self.bseries.copy()
A:pandas.tests.sparse.test_series.spsre->sps.reindex(new_index)
A:pandas.tests.sparse.test_series.seriesre->seriesre.to_sparse(fill_value=sps.fill_value).to_sparse(fill_value=sps.fill_value)
A:pandas.tests.sparse.test_series.same_index->self.bseries.reindex(self.bseries.index)
A:pandas.tests.sparse.test_series.sp_zero->SparseSeries([], index=[], fill_value=0)
A:pandas.tests.sparse.test_series.reindexed->SparseSeries(values1, sparse_index=IntIndex(length, index1), fill_value=nan).sparse_reindex(0)
A:pandas.tests.sparse.test_series.first_series->SparseSeries(values1, sparse_index=IntIndex(length, index1), fill_value=nan)
A:pandas.tests.sparse.test_series.i_index1->IntIndex(length, first)
A:pandas.tests.sparse.test_series.i_index2->IntIndex(length, second)
A:pandas.tests.sparse.test_series.b_index1->IntIndex(length, first).to_block_index()
A:pandas.tests.sparse.test_series.b_index2->IntIndex(length, second).to_block_index()
A:pandas.tests.sparse.test_series.values1->numpy.arange(6.0)
A:pandas.tests.sparse.test_series.bsrepr->repr(self.bseries)
A:pandas.tests.sparse.test_series.isrepr->repr(self.iseries)
A:pandas.tests.sparse.test_series.nonna->Series(np.random.randn(20)).to_sparse()
A:pandas.tests.sparse.test_series.nonna2->Series(np.random.randn(20)).to_sparse(fill_value=0)
A:pandas.tests.sparse.test_series.sp_valid->SparseSeries([0, 0, 0, nan, nan, 5, 6], fill_value=0).valid()
A:pandas.tests.sparse.test_series.exp_arr->pandas.SparseArray(expected.values, fill_value=0, kind='block')
A:pandas.tests.sparse.test_series.data[i]->SparseSeries(idx.to_int_index().indices, sparse_index=idx, fill_value=np.nan)
A:pandas.tests.sparse.test_series.homogenized->pandas.core.sparse.frame.homogenize(data)
A:pandas.tests.sparse.test_series.expected1->BlockIndex(10, [2, 6], [2, 3])
A:pandas.tests.sparse.test_series.shifted->SparseSeries([nan, 1.0, 2.0, 3.0, nan, nan], index=bdate_range('1/1/2000', periods=6)).shift(0)
A:pandas.tests.sparse.test_series.sparse->pandas.SparseSeries(vals, name='xx', fill_value=0)
A:pandas.tests.sparse.test_series.result2->s[::2].combine_first(s.to_dense())
A:pandas.tests.sparse.test_series.miindex->pandas.MultiIndex.from_product([['x', 'y'], ['10', '20']], names=['row-foo', 'row-bar'])
A:pandas.tests.sparse.test_series.micol->pandas.MultiIndex.from_product([['a', 'b', 'c'], ['1', '2']], names=['col-foo', 'col-bar'])
A:pandas.tests.sparse.test_series.dense_multiindex_frame->pandas.DataFrame(index=miindex, columns=micol).sort_index().sort_index(axis=1)
A:pandas.tests.sparse.test_series.self.dense_multiindex_frame->pandas.DataFrame(index=miindex, columns=micol).sort_index().sort_index(axis=1).fillna(value=3.14)
A:pandas.tests.sparse.test_series.sparse_multiindex_frame->self.dense_multiindex_frame.to_sparse()
A:pandas.tests.sparse.test_series.round_trip_multiindex_frame->self.dense_multiindex_frame.to_sparse().to_dense()
A:pandas.tests.sparse.test_series.s.index->pandas.MultiIndex.from_tuples([(1, 2, 'a', 0), (1, 2, 'a', 1), (1, 1, 'b', 0), (1, 1, 'b', 1), (2, 1, 'b', 0), (2, 1, 'b', 1)], names=['A', 'B', 'C', 'D'])
A:pandas.tests.sparse.test_series.ss->pandas.core.sparse.api.SparseSeries.from_coo(self.coo_matrices[0], dense_index=False)
A:pandas.tests.sparse.test_series.ss.index->numpy.arange(len(ss.index))
A:pandas.tests.sparse.test_series.check->check.dropna().to_sparse().dropna().to_sparse()
A:pandas.tests.sparse.test_series.results->pandas.core.sparse.api.SparseSeries.from_coo(self.coo_matrices[0], dense_index=False).to_coo(**d)
A:pandas.tests.sparse.test_series.d->kwargs.copy()
A:pandas.tests.sparse.test_series.val1->numpy.array([1, 2, np.nan, np.nan, 0, np.nan])
A:pandas.tests.sparse.test_series.val2->numpy.array([3, np.nan, 4, 0, 0])
A:pandas.tests.sparse.test_series.sparse1->pandas.SparseSeries(val1, name='x', kind='integer')
A:pandas.tests.sparse.test_series.sparse2->pandas.SparseSeries(val2, name='y', kind='block', fill_value=0)
A:pandas.tests.sparse.test_series.msg->'No axis named {axis}'.format(axis=axis)
pandas.tests.sparse.test_series.TestSparseHandlingMultiIndexes(object)
pandas.tests.sparse.test_series.TestSparseHandlingMultiIndexes.setup_method(self,method)
pandas.tests.sparse.test_series.TestSparseHandlingMultiIndexes.test_round_trip_preserve_multiindex_names(self)
pandas.tests.sparse.test_series.TestSparseHandlingMultiIndexes.test_to_sparse_preserve_multiindex_names_columns(self)
pandas.tests.sparse.test_series.TestSparseSeries(SharedWithSparse)
pandas.tests.sparse.test_series.TestSparseSeries._check_all(self,check_func)
pandas.tests.sparse.test_series.TestSparseSeries.setup_method(self,method)
pandas.tests.sparse.test_series.TestSparseSeries.test_abs(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_astype(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_astype_all(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_binary_operators(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_combine_first(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_construct_DataFrame_with_sp_series(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_constructor(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_constructor_dtype(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_constructor_empty(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_constructor_ndarray(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_constructor_nonnan(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_constructor_preserve_attr(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_constructor_scalar(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_copy_astype(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_dense_to_sparse(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_dropna(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_fill_value_corner(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_fill_value_when_combine_const(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_fillna(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_get_get_value(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_getitem(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_getitem_slice(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_groupby(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_homogenize(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_iter(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_iteration_and_str(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_kind(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_numpy_take(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_operators(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_pickle(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_reductions(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_reindex(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_repr(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_series_density(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_set_value(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_setitem(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_setslice(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_shape(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_shift(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_shift_dtype(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_shift_dtype_fill_value(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_shift_nan(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_sparse_reindex(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_sparse_to_dense(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_take(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_to_dense_fill_value(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_to_dense_preserve_name(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_to_frame(self)
pandas.tests.sparse.test_series.TestSparseSeries.test_truncate(self)
pandas.tests.sparse.test_series.TestSparseSeriesAnalytics(object)
pandas.tests.sparse.test_series.TestSparseSeriesAnalytics.setup_method(self,method)
pandas.tests.sparse.test_series.TestSparseSeriesAnalytics.test_cumsum(self)
pandas.tests.sparse.test_series.TestSparseSeriesAnalytics.test_numpy_cumsum(self)
pandas.tests.sparse.test_series.TestSparseSeriesAnalytics.test_numpy_func_call(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction(object)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction._check_results_to_coo(self,results,check)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction._run_test(self,ss,kwargs,check)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.setup_method(self,method)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_concat(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_concat_axis1(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_concat_axis1_different_fill(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_concat_different_fill(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_concat_different_kind(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_concat_sparse_dense(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_from_coo_dense_index(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_from_coo_long_repr(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_from_coo_nodense_index(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_isnotnull(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_isnull(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_to_coo_bad_ilevel(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_to_coo_bad_partition_nonnull_intersection(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_to_coo_bad_partition_small_union(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_to_coo_duplicate_index_entries(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_to_coo_integer_names_integer_row_levels_nosort(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_to_coo_nlevels_less_than_two(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_to_coo_text_names_integer_row_levels_nosort(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_to_coo_text_names_integer_row_levels_sort(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_to_coo_text_names_text_row_levels_nosort(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_to_coo_text_names_text_row_levels_nosort_col_level_single(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_value_counts(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_value_counts_dup(self)
pandas.tests.sparse.test_series.TestSparseSeriesScipyInteraction.test_value_counts_int(self)
pandas.tests.sparse.test_series._dense_series_compare(s,f)
pandas.tests.sparse.test_series._test_data1()
pandas.tests.sparse.test_series._test_data1_zero()
pandas.tests.sparse.test_series._test_data2()
pandas.tests.sparse.test_series._test_data2_zero()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/sparse/test_arithmetics.py----------------------------------------
A:pandas.tests.sparse.test_arithmetics.values->self._base([np.nan, 1, 2, 0, np.nan, 0, 1, 2, 1, np.nan])
A:pandas.tests.sparse.test_arithmetics.a->self._klass(values, kind=kind, fill_value=1)
A:pandas.tests.sparse.test_arithmetics.rvalues->self._base([2, 0, 2, 3, 0, 0, 1, 5, 2, 0], dtype=rdtype)
A:pandas.tests.sparse.test_arithmetics.b->self._klass(rvalues, kind=kind, fill_value=2)
A:pandas.tests.sparse.test_arithmetics.da->pandas.Series(np.arange(4))
A:pandas.tests.sparse.test_arithmetics.db->pandas.Series(np.arange(4), index=[10, 11, 12, 13])
A:pandas.tests.sparse.test_arithmetics.sa->pandas.SparseSeries(np.arange(4), dtype=np.int64, fill_value=np.nan)
A:pandas.tests.sparse.test_arithmetics.sb->pandas.SparseSeries(np.arange(4), index=[10, 11, 12, 13], dtype=np.int64, fill_value=np.nan)
pandas.tests.sparse.test_arithmetics.TestSparseArrayArithmetics(object)
pandas.tests.sparse.test_arithmetics.TestSparseArrayArithmetics._assert(self,a,b)
pandas.tests.sparse.test_arithmetics.TestSparseArrayArithmetics._check_bool_result(self,res)
pandas.tests.sparse.test_arithmetics.TestSparseArrayArithmetics._check_comparison_ops(self,a,b,a_dense,b_dense)
pandas.tests.sparse.test_arithmetics.TestSparseArrayArithmetics._check_logical_ops(self,a,b,a_dense,b_dense)
pandas.tests.sparse.test_arithmetics.TestSparseArrayArithmetics._check_numeric_ops(self,a,b,a_dense,b_dense)
pandas.tests.sparse.test_arithmetics.TestSparseArrayArithmetics.test_bool_array_logical(self)
pandas.tests.sparse.test_arithmetics.TestSparseArrayArithmetics.test_bool_same_index(self)
pandas.tests.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_array(self)
pandas.tests.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_array_comparison(self)
pandas.tests.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_array_different_kind(self)
pandas.tests.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_same_index(self)
pandas.tests.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_same_index_comparison(self)
pandas.tests.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_scalar(self)
pandas.tests.sparse.test_arithmetics.TestSparseArrayArithmetics.test_float_scalar_comparison(self)
pandas.tests.sparse.test_arithmetics.TestSparseArrayArithmetics.test_int_array(self)
pandas.tests.sparse.test_arithmetics.TestSparseArrayArithmetics.test_int_array_comparison(self)
pandas.tests.sparse.test_arithmetics.TestSparseArrayArithmetics.test_mixed_array_comparison(self)
pandas.tests.sparse.test_arithmetics.TestSparseArrayArithmetics.test_mixed_array_float_int(self)
pandas.tests.sparse.test_arithmetics.TestSparseSeriesArithmetic(TestSparseArrayArithmetics)
pandas.tests.sparse.test_arithmetics.TestSparseSeriesArithmetic._assert(self,a,b)
pandas.tests.sparse.test_arithmetics.TestSparseSeriesArithmetic.test_alignment(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/sparse/test_list.py----------------------------------------
A:pandas.tests.sparse.test_list.self.na_data->numpy.array([nan, nan, 1, 2, 3, nan, 4, 5, nan, 6])
A:pandas.tests.sparse.test_list.self.zero_data->numpy.array([0, 0, 1, 2, 3, 0, 4, 5, 0, 6])
A:pandas.tests.sparse.test_list.lst1->SparseList(self.na_data[:5])
A:pandas.tests.sparse.test_list.exp->SparseArray(arr, fill_value=0)
A:pandas.tests.sparse.test_list.splist->SparseList()
A:pandas.tests.sparse.test_list.sparr->SparseList().to_array()
A:pandas.tests.sparse.test_list.exp_sparr->SparseArray(arr)
A:pandas.tests.sparse.test_list.consol->SparseList().consolidate(inplace=False)
A:pandas.tests.sparse.test_list.cp->SparseList().copy()
pandas.tests.sparse.test_list.TestSparseList(object)
pandas.tests.sparse.test_list.TestSparseList.setup_method(self,method)
pandas.tests.sparse.test_list.TestSparseList.test_append_na(self)
pandas.tests.sparse.test_list.TestSparseList.test_append_zero(self)
pandas.tests.sparse.test_list.TestSparseList.test_consolidate(self)
pandas.tests.sparse.test_list.TestSparseList.test_constructor(self)
pandas.tests.sparse.test_list.TestSparseList.test_copy(self)
pandas.tests.sparse.test_list.TestSparseList.test_deprecation(self)
pandas.tests.sparse.test_list.TestSparseList.test_getitem(self)
pandas.tests.sparse.test_list.TestSparseList.test_len(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/sparse/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/sparse/test_groupby.py----------------------------------------
A:pandas.tests.sparse.test_groupby.self.dense->pandas.DataFrame({'A': ['foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'foo'], 'B': ['one', 'one', 'two', 'three', 'two', 'two', 'one', 'three'], 'C': np.random.randn(8), 'D': np.random.randn(8), 'E': [np.nan, np.nan, 1, 2, np.nan, 1, np.nan, np.nan]})
A:pandas.tests.sparse.test_groupby.self.sparse->self.dense.to_sparse()
A:pandas.tests.sparse.test_groupby.sparse_grouped->self.sparse.groupby('A')
A:pandas.tests.sparse.test_groupby.dense_grouped->self.dense.groupby('A')
pandas.tests.sparse.test_groupby.TestSparseGroupBy(object)
pandas.tests.sparse.test_groupby.TestSparseGroupBy.setup_method(self,method)
pandas.tests.sparse.test_groupby.TestSparseGroupBy.test_aggfuncs(self)
pandas.tests.sparse.test_groupby.TestSparseGroupBy.test_first_last_nth(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/test_frozen.py----------------------------------------
A:pandas.tests.indexes.test_frozen.unicode_container->FrozenNDArray([u('א'), u('ב'), 'c'])
A:pandas.tests.indexes.test_frozen.self.container->FrozenNDArray(self.lst)
A:pandas.tests.indexes.test_frozen.expected->FrozenList([1, 2, 3] + self.lst)
A:pandas.tests.indexes.test_frozen.original->self.container.view(np.ndarray).copy()
A:pandas.tests.indexes.test_frozen.vals->self.container.values()
pandas.tests.indexes.test_frozen.TestFrozenList(CheckImmutable,CheckStringMixin)
pandas.tests.indexes.test_frozen.TestFrozenList.setup_method(self,method)
pandas.tests.indexes.test_frozen.TestFrozenList.test_add(self)
pandas.tests.indexes.test_frozen.TestFrozenList.test_inplace(self)
pandas.tests.indexes.test_frozen.TestFrozenNDArray(CheckImmutable,CheckStringMixin)
pandas.tests.indexes.test_frozen.TestFrozenNDArray.setup_method(self,method)
pandas.tests.indexes.test_frozen.TestFrozenNDArray.test_shallow_copying(self)
pandas.tests.indexes.test_frozen.TestFrozenNDArray.test_values(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/test_base.py----------------------------------------
A:pandas.tests.indexes.test_base.self.indices->dict(mixedIndex=Index([0, 'a', 1, 'b', 2, 'c']))
A:pandas.tests.indexes.test_base.new_copy2->self.intIndex.copy(dtype=int)
A:pandas.tests.indexes.test_base.arr->numpy.array(self.dateIndex)
A:pandas.tests.indexes.test_base.index->Index(['a', 'b', 'c'], name=0)
A:pandas.tests.indexes.test_base.idx1->Index(lrange(1000)).copy()
A:pandas.tests.indexes.test_base.idx2->Index(lrange(1000)).copy(name='NewName')
A:pandas.tests.indexes.test_base.idx->Index(lrange(1000))
A:pandas.tests.indexes.test_base.result->Index(lrange(1000)).repeat(n=repeats)
A:pandas.tests.indexes.test_base.expected->pandas.Index([1, 1, 2, 2, 3, 3])
A:pandas.tests.indexes.test_base.s->Series(lrange(3), index)
A:pandas.tests.indexes.test_base.df->pandas.DataFrame({u('א'): [1, 2, 3], 'ב': [4, 5, 6], 'c': [7, 8, 9]})
A:pandas.tests.indexes.test_base.exp->Index([idx[-1], idx[0], idx[1]])
A:pandas.tests.indexes.test_base.xp->period_range('2012-1-1', freq='M', periods=3)
A:pandas.tests.indexes.test_base.rs->Index(xp)
A:pandas.tests.indexes.test_base.casted->self.intIndex.astype('i8')
A:pandas.tests.indexes.test_base.null_index->Index([])
A:pandas.tests.indexes.test_base.i1->Index(dt_dates, dtype=object)
A:pandas.tests.indexes.test_base.i2->Index(['aa'], dtype=object)
A:pandas.tests.indexes.test_base.i3->Index([('a', 'a'), ('a', 'b'), ('b', 'a')])
A:pandas.tests.indexes.test_base.i4->Index([('a', 'a'), ('a', 'b'), ('b', 'a')], tupleize_cols=False)
A:pandas.tests.indexes.test_base.ind->Index(['{other}%s', '~:{range}:0'], name='A')
A:pandas.tests.indexes.test_base.ind2->Index(arr, copy=False)
A:pandas.tests.indexes.test_base.ind1->Index(arr, copy=False)
A:pandas.tests.indexes.test_base.d->self.dateIndex[0].to_pydatetime()
A:pandas.tests.indexes.test_base.r->repr(pd.Index(np.arange(1000)))
A:pandas.tests.indexes.test_base.x->Series(np.random.randn(100), index=r)
A:pandas.tests.indexes.test_base.first_value->Series(np.random.randn(100), index=r).asof(x.index[0])
A:pandas.tests.indexes.test_base.exp_ts->np_datetime64_compat('2013-01-01 00:00:00.000000050+0000', 'ns')
A:pandas.tests.indexes.test_base.element->_to_m8(element)
A:pandas.tests.indexes.test_base.arr_result->op(arr, element)
A:pandas.tests.indexes.test_base.index_result->op(index, element)
A:pandas.tests.indexes.test_base.boolIdx->numpy.repeat(True, len(self.strIndex)).astype(bool)
A:pandas.tests.indexes.test_base.empty_farr->numpy.array([], dtype=np.float_)
A:pandas.tests.indexes.test_base.empty_iarr->numpy.array([], dtype=np.int_)
A:pandas.tests.indexes.test_base.empty_barr->numpy.array([], dtype=np.bool_)
A:pandas.tests.indexes.test_base.empty_idx->Index(lrange(1000)).__class__([])
A:pandas.tests.indexes.test_base.intersect->idx.__class__(idx, copy=True, name='mario').intersection(second)
A:pandas.tests.indexes.test_base.inter->idx.__class__(idx, copy=True, name='mario').intersection(first)
A:pandas.tests.indexes.test_base.expected2->Index([3, 4, 5], name='idx')
A:pandas.tests.indexes.test_base.result2->Index(lrange(1000)).copy().intersection(idx2)
A:pandas.tests.indexes.test_base.idx3->Index(lrange(1000)).copy(names=['NewName'])
A:pandas.tests.indexes.test_base.expected3->Index([3, 4, 5], name=None)
A:pandas.tests.indexes.test_base.result3->Index(lrange(1000)).copy().intersection(idx3)
A:pandas.tests.indexes.test_base.union->idx.__class__(idx, copy=True, name='mario').union(second)
A:pandas.tests.indexes.test_base.first->Index(lrange(1000)).__class__(idx, copy=True, name='mario')
A:pandas.tests.indexes.test_base.second->Index(lrange(1000)).__class__(idx, copy=True, name='mario').__class__(first, copy=False)
A:pandas.tests.indexes.test_base.firstCat->self.strIndex.union(self.dateIndex)
A:pandas.tests.indexes.test_base.secondCat->self.strIndex.union(self.strIndex)
A:pandas.tests.indexes.test_base.appended->numpy.append(self.strIndex, self.dateIndex.astype('O'))
A:pandas.tests.indexes.test_base.boolean_index->pandas.util.testing.makeIntIndex(3).map(lambda x: (x, x == 1))
A:pandas.tests.indexes.test_base.multi_index->pandas.core.indexes.api.MultiIndex.from_tuples(lzip(first_level, [1, 2, 3]))
A:pandas.tests.indexes.test_base.reduced_index->pandas.core.indexes.api.MultiIndex.from_tuples(lzip(first_level, [1, 2, 3])).map(lambda x: x[0])
A:pandas.tests.indexes.test_base.date_index->pandas.util.testing.makeDateIndex(24, freq='h', name='hourly')
A:pandas.tests.indexes.test_base.period_index->pandas.util.testing.makePeriodIndex(10)
A:pandas.tests.indexes.test_base.tdelta_index->pandas.util.testing.makeTimedeltaIndex(10)
A:pandas.tests.indexes.test_base.left->Index([], name='foo')
A:pandas.tests.indexes.test_base.right->Index([1, 2, 3], name='bar')
A:pandas.tests.indexes.test_base.now->datetime.datetime.now()
A:pandas.tests.indexes.test_base.formatted->Index([dt + inc for dt in self.dateIndex], name='something').format(name=True)
A:pandas.tests.indexes.test_base.inc->timedelta(hours=4)
A:pandas.tests.indexes.test_base.dates->Index([dt + inc for dt in self.dateIndex], name='something')
A:pandas.tests.indexes.test_base.t->Index([datetime(2012, 2, 7), datetime(2012, 2, 7, 23)])
A:pandas.tests.indexes.test_base.r1->Index(lrange(1000)).copy(name='NewName').get_indexer(idx1, method='backfill')
A:pandas.tests.indexes.test_base.e1->numpy.array([0, 0, 1, 1, 2], dtype=np.intp)
A:pandas.tests.indexes.test_base.r2->Index(lrange(1000)).copy(name='NewName').get_indexer(idx1[::-1], method='backfill')
A:pandas.tests.indexes.test_base.rffill1->Index(lrange(1000)).copy(name='NewName').get_indexer(idx1, method='ffill')
A:pandas.tests.indexes.test_base.rbfill1->Index(lrange(1000)).copy(name='NewName').get_indexer(idx1, method='bfill')
A:pandas.tests.indexes.test_base.actual->Index(lrange(1000)).get_indexer(['a', 'b', 'c', 'd'], method='backfill')
A:pandas.tests.indexes.test_base.n->len(self.strIndex)
A:pandas.tests.indexes.test_base.(s_start, s_stop)->Index(lrange(1000)).slice_locs(in_slice.start, in_slice.stop, in_slice.step)
A:pandas.tests.indexes.test_base.dropped->Index([1, 2, 3]).drop([3, 4, 5], errors='ignore')
A:pandas.tests.indexes.test_base.ser->Index([1, 2, 3])
A:pandas.tests.indexes.test_base.aidx1->numpy.array([(1, 'A'), (2, 'A'), (1, 'B'), (2, 'B')], dtype=[('num', int), ('let', 'a1')])
A:pandas.tests.indexes.test_base.aidx2->numpy.array([(1, 'A'), (2, 'A'), (1, 'B'), (2, 'B'), (1, 'C'), (2, 'C')], dtype=[('num', int), ('let', 'a1')])
A:pandas.tests.indexes.test_base.int_idx->Index(lrange(1000)).copy().intersection(idx2)
A:pandas.tests.indexes.test_base.union_idx->Index(lrange(1000)).copy().union(idx2)
A:pandas.tests.indexes.test_base.values->numpy.random.randn(100)
A:pandas.tests.indexes.test_base.res->Index(['aa'], dtype=object).intersection(i1)
A:pandas.tests.indexes.test_base.joined->Index(np.random.permutation(15)).join(right_idx, how='outer')
A:pandas.tests.indexes.test_base.left_idx->Index(np.random.permutation(15))
A:pandas.tests.indexes.test_base.right_idx->pandas.util.testing.makeDateIndex(10)
A:pandas.tests.indexes.test_base.dt_idx->pandas.date_range('20130101', periods=3)
A:pandas.tests.indexes.test_base.groups->Index(lrange(1000)).groupby(np.array([1, 1, 2, 2, 2]))
A:pandas.tests.indexes.test_base.mi1->pandas.core.indexes.api.MultiIndex.from_tuples([(1, 2), (4, 5)])
A:pandas.tests.indexes.test_base.mi2->pandas.core.indexes.api.MultiIndex.from_tuples([(1, 2), (4, 6)])
A:pandas.tests.indexes.test_base.mi3->pandas.core.indexes.api.MultiIndex.from_tuples([(1, 2), (4, 5), (8, 9)])
A:pandas.tests.indexes.test_base.index_a->Index(['foo', 'bar', 'baz'])
A:pandas.tests.indexes.test_base.i->pandas.Index(['01:02:03', '01:02:04'], name='label')
A:pandas.tests.indexes.test_base.s1->Series(2, index=first)
A:pandas.tests.indexes.test_base.s2->Series(3, index=second[:-1])
A:pandas.tests.indexes.test_base.nanidx->pandas.PeriodIndex(['2012-02', '2012-04', 'NaT', '2012-05'], freq='M')
pandas.tests.indexes.test_base.TestIndex(Base)
pandas.tests.indexes.test_base.TestIndex._check_method_works(self,method)
pandas.tests.indexes.test_base.TestIndex.create_index(self)
pandas.tests.indexes.test_base.TestIndex.setup_method(self,method)
pandas.tests.indexes.test_base.TestIndex.test_add(self)
pandas.tests.indexes.test_base.TestIndex.test_add_string(self)
pandas.tests.indexes.test_base.TestIndex.test_append_empty_preserve_name(self)
pandas.tests.indexes.test_base.TestIndex.test_append_multiple(self)
pandas.tests.indexes.test_base.TestIndex.test_asof(self)
pandas.tests.indexes.test_base.TestIndex.test_asof_datetime_partial(self)
pandas.tests.indexes.test_base.TestIndex.test_astype(self)
pandas.tests.indexes.test_base.TestIndex.test_boolean_cmp(self)
pandas.tests.indexes.test_base.TestIndex.test_booleanindex(self)
pandas.tests.indexes.test_base.TestIndex.test_comparators(self)
pandas.tests.indexes.test_base.TestIndex.test_construction_list_mixed_tuples(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor_corner(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor_dtypes(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor_dtypes_datetime(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor_dtypes_timedelta(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor_from_index_datetimetz(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor_from_index_period(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor_from_index_timedelta(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor_from_series(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor_from_series_datetimetz(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor_from_series_period(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor_from_series_timedelta(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor_int_dtype_nan(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor_ndarray_like(self)
pandas.tests.indexes.test_base.TestIndex.test_constructor_simple_new(self)
pandas.tests.indexes.test_base.TestIndex.test_conversion_preserves_name(self)
pandas.tests.indexes.test_base.TestIndex.test_copy_and_deepcopy(self)
pandas.tests.indexes.test_base.TestIndex.test_delete(self)
pandas.tests.indexes.test_base.TestIndex.test_difference(self)
pandas.tests.indexes.test_base.TestIndex.test_drop(self)
pandas.tests.indexes.test_base.TestIndex.test_empty_fancy(self)
pandas.tests.indexes.test_base.TestIndex.test_equals_object(self)
pandas.tests.indexes.test_base.TestIndex.test_equals_op_multiindex(self)
pandas.tests.indexes.test_base.TestIndex.test_fancy(self)
pandas.tests.indexes.test_base.TestIndex.test_format(self)
pandas.tests.indexes.test_base.TestIndex.test_format_datetime_with_time(self)
pandas.tests.indexes.test_base.TestIndex.test_format_none(self)
pandas.tests.indexes.test_base.TestIndex.test_format_with_name_time_info(self)
pandas.tests.indexes.test_base.TestIndex.test_get_indexer(self)
pandas.tests.indexes.test_base.TestIndex.test_get_indexer_invalid(self)
pandas.tests.indexes.test_base.TestIndex.test_get_indexer_nearest(self)
pandas.tests.indexes.test_base.TestIndex.test_get_indexer_nearest_decreasing(self)
pandas.tests.indexes.test_base.TestIndex.test_get_indexer_strings(self)
pandas.tests.indexes.test_base.TestIndex.test_get_level_values(self)
pandas.tests.indexes.test_base.TestIndex.test_get_loc(self)
pandas.tests.indexes.test_base.TestIndex.test_get_set_value(self)
pandas.tests.indexes.test_base.TestIndex.test_getitem(self)
pandas.tests.indexes.test_base.TestIndex.test_groupby(self)
pandas.tests.indexes.test_base.TestIndex.test_iadd_string(self)
pandas.tests.indexes.test_base.TestIndex.test_identical(self)
pandas.tests.indexes.test_base.TestIndex.test_index_ctor_infer_nan_nat(self)
pandas.tests.indexes.test_base.TestIndex.test_index_ctor_infer_periodindex(self)
pandas.tests.indexes.test_base.TestIndex.test_indexing_doesnt_change_class(self)
pandas.tests.indexes.test_base.TestIndex.test_insert(self)
pandas.tests.indexes.test_base.TestIndex.test_intersection(self)
pandas.tests.indexes.test_base.TestIndex.test_is_(self)
pandas.tests.indexes.test_base.TestIndex.test_is_all_dates(self)
pandas.tests.indexes.test_base.TestIndex.test_is_monotonic_incomparable(self)
pandas.tests.indexes.test_base.TestIndex.test_is_numeric(self)
pandas.tests.indexes.test_base.TestIndex.test_is_object(self)
pandas.tests.indexes.test_base.TestIndex.test_isin(self)
pandas.tests.indexes.test_base.TestIndex.test_isin_level_kwarg(self)
pandas.tests.indexes.test_base.TestIndex.test_isin_nan(self)
pandas.tests.indexes.test_base.TestIndex.test_join_self(self)
pandas.tests.indexes.test_base.TestIndex.test_logical_compat(self)
pandas.tests.indexes.test_base.TestIndex.test_map_identity_mapping(self)
pandas.tests.indexes.test_base.TestIndex.test_map_tseries_indices_return_index(self)
pandas.tests.indexes.test_base.TestIndex.test_map_with_tuples(self)
pandas.tests.indexes.test_base.TestIndex.test_nan_first_take_datetime(self)
pandas.tests.indexes.test_base.TestIndex.test_nanosecond_index_access(self)
pandas.tests.indexes.test_base.TestIndex.test_new_axis(self)
pandas.tests.indexes.test_base.TestIndex.test_outer_join_sort(self)
pandas.tests.indexes.test_base.TestIndex.test_reindex_doesnt_preserve_type_if_target_is_empty_index(self)
pandas.tests.indexes.test_base.TestIndex.test_reindex_preserves_name_if_target_is_list_or_ndarray(self)
pandas.tests.indexes.test_base.TestIndex.test_reindex_preserves_type_if_target_is_empty_list_or_array(self)
pandas.tests.indexes.test_base.TestIndex.test_reshape_raise(self)
pandas.tests.indexes.test_base.TestIndex.test_slice_keep_name(self)
pandas.tests.indexes.test_base.TestIndex.test_slice_locs(self)
pandas.tests.indexes.test_base.TestIndex.test_slice_locs_dup(self)
pandas.tests.indexes.test_base.TestIndex.test_slice_locs_na(self)
pandas.tests.indexes.test_base.TestIndex.test_slice_locs_negative_step(self)
pandas.tests.indexes.test_base.TestIndex.test_str_attribute(self)
pandas.tests.indexes.test_base.TestIndex.test_string_index_repr(self)
pandas.tests.indexes.test_base.TestIndex.test_sub(self)
pandas.tests.indexes.test_base.TestIndex.test_summary(self)
pandas.tests.indexes.test_base.TestIndex.test_symmetric_difference(self)
pandas.tests.indexes.test_base.TestIndex.test_tab_completion(self)
pandas.tests.indexes.test_base.TestIndex.test_take_fill_value(self)
pandas.tests.indexes.test_base.TestIndex.test_tuple_union_bug(self)
pandas.tests.indexes.test_base.TestIndex.test_union(self)
pandas.tests.indexes.test_base.TestIndex.test_view_with_args(self)
pandas.tests.indexes.test_base.TestMixedIntIndex(Base)
pandas.tests.indexes.test_base.TestMixedIntIndex.create_index(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.setup_method(self,method)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_argsort(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_bytestring_with_unicode(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_copy_name(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_copy_name2(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_difference_base(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_dropna(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_get_combined_index(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_int_name_format(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_intersect_str_dates(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_intersection_base(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_is_monotonic_na(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_logical_compat(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_numpy_argsort(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_print_unicode_columns(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_repeat(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_repr_summary(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_symmetric_difference(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_unicode_string_with_unicode(self)
pandas.tests.indexes.test_base.TestMixedIntIndex.test_union_base(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/datetimelike.py----------------------------------------
A:pandas.tests.indexes.datetimelike.idx->self.create_index()
A:pandas.tests.indexes.datetimelike.i->self.create_index()
A:pandas.tests.indexes.datetimelike.i_view->self.create_index().view(self._holder)
A:pandas.tests.indexes.datetimelike.result->self._holder(i)
pandas.tests.indexes.datetimelike.DatetimeLike(Base)
pandas.tests.indexes.datetimelike.DatetimeLike.test_shift_identity(self)
pandas.tests.indexes.datetimelike.DatetimeLike.test_str(self)
pandas.tests.indexes.datetimelike.DatetimeLike.test_view(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/test_interval.py----------------------------------------
A:pandas.tests.indexes.test_interval.self.index->pandas.IntervalIndex.from_arrays([0, 1], [1, 2])
A:pandas.tests.indexes.test_interval.self.index_with_nan->pandas.IntervalIndex.from_tuples([(0, 1), np.nan, (1, 2)])
A:pandas.tests.indexes.test_interval.self.indices->dict(intervalIndex=tm.makeIntervalIndex(10))
A:pandas.tests.indexes.test_interval.actual->pandas.IntervalIndex.from_breaks(dates).get_indexer(target)
A:pandas.tests.indexes.test_interval.alternate->pandas.IntervalIndex.from_breaks(np.arange(3), closed='left')
A:pandas.tests.indexes.test_interval.result->interval_range(0, 5, name='foo', closed='both')
A:pandas.tests.indexes.test_interval.expected->pandas.IntervalIndex.from_breaks(np.arange(0, 5), name='foo', closed='both')
A:pandas.tests.indexes.test_interval.expected_scalar_type->type(idx[0])
A:pandas.tests.indexes.test_interval.idx->pandas.IntervalIndex.from_breaks(dates)
A:pandas.tests.indexes.test_interval.i->pandas.IntervalIndex.from_arrays([0, 1], [1, 2])
A:pandas.tests.indexes.test_interval.index->pandas.IntervalIndex.from_tuples([(0, 1), (2, 3)])
A:pandas.tests.indexes.test_interval.slice_locs->pandas.IntervalIndex.from_tuples([(0, 1), (2, 3)]).slice_locs(-1, -1)
A:pandas.tests.indexes.test_interval.target->pandas.date_range('1999-12-31T12:00', periods=7, freq='12H')
A:pandas.tests.indexes.test_interval.ii->pandas.IntervalIndex.from_arrays([0, 1, np.nan], [1, 2, np.nan])
A:pandas.tests.indexes.test_interval.other->pandas.IntervalIndex.from_breaks([0, 1, 2], closed='neither')
A:pandas.tests.indexes.test_interval.idx2->pandas.IntervalIndex.from_arrays([np.nan, 0, 1], [np.nan, 1, 2])
A:pandas.tests.indexes.test_interval.mask->interval_range(0, 5, name='foo', closed='both').isnull()
A:pandas.tests.indexes.test_interval.dates->pandas.date_range('2000', periods=3)
A:pandas.tests.indexes.test_interval.index1->pandas.IntervalIndex.from_arrays([0, 1], [1, 2])
A:pandas.tests.indexes.test_interval.index2->pandas.IntervalIndex.from_arrays([1, 2], [2, 3])
A:pandas.tests.indexes.test_interval.self.tree->gentree('int64')
A:pandas.tests.indexes.test_interval.(indexer, missing)->IntervalTree(x, x + 0.5, closed=closed, leaf_size=leaf_size).get_indexer_non_unique(np.array([0.5]))
A:pandas.tests.indexes.test_interval.tree->IntervalTree(x, x + 0.5, closed=closed, leaf_size=leaf_size)
A:pandas.tests.indexes.test_interval.x->numpy.arange(1000, dtype='float64')
A:pandas.tests.indexes.test_interval.found->numpy.arange(1000, dtype='float64').astype('intp')
A:pandas.tests.indexes.test_interval.not_found->(-1 * np.ones(1000)).astype('intp')
pandas.tests.indexes.test_interval.TestIntervalIndex(Base)
pandas.tests.indexes.test_interval.TestIntervalIndex.create_index(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.setup_method(self,method)
pandas.tests.indexes.test_interval.TestIntervalIndex.slice_locs_cases(self,breaks)
pandas.tests.indexes.test_interval.TestIntervalIndex.slice_locs_decreasing_cases(self,tuples)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_append(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_astype(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_comparison(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_constructors(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_constructors_datetimelike(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_constructors_error(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_constructors_errors(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_constructors_other(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_contains(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_copy(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_datetime(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_delete(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_difference(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_dropna(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_ensure_copied_data(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_equals(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_get_indexer(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_get_indexer_subintervals(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_get_item(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_get_loc_interval(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_get_loc_value(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_insert(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_intersection(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_isin(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_missing_values(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_monotonic_and_unique(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_non_contiguous(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_properties(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_repr(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_repr_max_seq_item_setting(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_repr_roundtrip(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_set_operation_errors(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_slice_locs_decreasing_float64(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_slice_locs_decreasing_int64(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_slice_locs_fails(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_slice_locs_float64(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_slice_locs_int64(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_sort_values(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_symmetric_difference(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_take(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_union(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_where(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_where_array_like(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.test_with_nans(self)
pandas.tests.indexes.test_interval.TestIntervalIndex.testcontains(self)
pandas.tests.indexes.test_interval.TestIntervalRange(object)
pandas.tests.indexes.test_interval.TestIntervalRange.test_construction(self)
pandas.tests.indexes.test_interval.TestIntervalRange.test_errors(self)
pandas.tests.indexes.test_interval.TestIntervalTree(object)
pandas.tests.indexes.test_interval.TestIntervalTree.setup_method(self,method)
pandas.tests.indexes.test_interval.TestIntervalTree.test_duplicates(self)
pandas.tests.indexes.test_interval.TestIntervalTree.test_get_indexer(self)
pandas.tests.indexes.test_interval.TestIntervalTree.test_get_indexer_closed(self)
pandas.tests.indexes.test_interval.TestIntervalTree.test_get_indexer_non_unique(self)
pandas.tests.indexes.test_interval.TestIntervalTree.test_get_loc(self)
pandas.tests.indexes.test_interval.TestIntervalTree.test_get_loc_closed(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/common.py----------------------------------------
A:pandas.tests.indexes.common.unpickled->pandas.util.testing.round_trip_pickle(index)
A:pandas.tests.indexes.common.idx->self.create_index().copy()
A:pandas.tests.indexes.common.s->self.create_index().copy().to_series()
A:pandas.tests.indexes.common.expected->numpy.array([False] * len(idx), dtype=bool)
A:pandas.tests.indexes.common.result->isnull(index)
A:pandas.tests.indexes.common.actual->self.create_index().copy().get_indexer(idx)
A:pandas.tests.indexes.common.new_ind->ind.set_names([new_name])
A:pandas.tests.indexes.common.res->ind.rename(new_name, inplace=True)
A:pandas.tests.indexes.common.first->self.create_index().__class__(index, copy=True, name='mario')
A:pandas.tests.indexes.common.second->self.create_index().__class__(index, copy=True, name='mario').__class__(first, copy=False)
A:pandas.tests.indexes.common.s1->Series(2, index=first)
A:pandas.tests.indexes.common.s2->Series(3, index=second[:-1])
A:pandas.tests.indexes.common.idx_copy->func(ind)
A:pandas.tests.indexes.common.new_copy->ind.copy(deep=True, name='banana')
A:pandas.tests.indexes.common.idx_nan->ind._shallow_copy(vals)
A:pandas.tests.indexes.common.idx_unique_nan->ind._shallow_copy(vals_unique)
A:pandas.tests.indexes.common.i_view->ind.view()
A:pandas.tests.indexes.common.result2->self.create_index().memory_usage()
A:pandas.tests.indexes.common.result3->self.create_index().memory_usage(deep=True)
A:pandas.tests.indexes.common.i->self.create_index()
A:pandas.tests.indexes.common.rep->numpy.arange(len(i))
A:pandas.tests.indexes.common.intersect->self.create_index().__class__(index, copy=True, name='mario').intersection(second)
A:pandas.tests.indexes.common.union->self.create_index().__class__(index, copy=True, name='mario').union(second)
A:pandas.tests.indexes.common.same_values->Index(idx, dtype=object)
A:pandas.tests.indexes.common.index_a->self.create_index()
A:pandas.tests.indexes.common.n->len(index_a)
A:pandas.tests.indexes.common.index_c->index_a[0:-1].append(index_a[-2:-1])
A:pandas.tests.indexes.common.expected1->numpy.array([True] * n)
A:pandas.tests.indexes.common.expected2->numpy.array([True] * (n - 1) + [False])
A:pandas.tests.indexes.common.array_a->numpy.array(index_a)
A:pandas.tests.indexes.common.array_b->numpy.array(index_a[0:-1])
A:pandas.tests.indexes.common.array_c->numpy.array(index_a[0:-1].append(index_a[-2:-1]))
A:pandas.tests.indexes.common.array_d->numpy.array(index_a[0:1])
A:pandas.tests.indexes.common.series_a->Series(array_a)
A:pandas.tests.indexes.common.series_b->Series(array_b)
A:pandas.tests.indexes.common.series_c->Series(array_c)
A:pandas.tests.indexes.common.series_d->Series(array_d)
A:pandas.tests.indexes.common.expected3->numpy.array([False] * (len(index_a) - 2) + [True, False])
A:pandas.tests.indexes.common.exp->Index(func(idx.values), name=idx.name)
A:pandas.tests.indexes.common.index->self.create_index()
pandas.tests.indexes.common.Base(object)
pandas.tests.indexes.common.Base.setup_indices(self)
pandas.tests.indexes.common.Base.test_argsort(self)
pandas.tests.indexes.common.Base.test_boolean_context_compat(self)
pandas.tests.indexes.common.Base.test_compat(self)
pandas.tests.indexes.common.Base.test_copy_and_deepcopy(self)
pandas.tests.indexes.common.Base.test_copy_name(self)
pandas.tests.indexes.common.Base.test_create_index_existing_name(self)
pandas.tests.indexes.common.Base.test_delete_base(self)
pandas.tests.indexes.common.Base.test_difference_base(self)
pandas.tests.indexes.common.Base.test_dtype_str(self)
pandas.tests.indexes.common.Base.test_duplicates(self)
pandas.tests.indexes.common.Base.test_empty(self)
pandas.tests.indexes.common.Base.test_ensure_copied_data(self)
pandas.tests.indexes.common.Base.test_equals(self)
pandas.tests.indexes.common.Base.test_equals_op(self)
pandas.tests.indexes.common.Base.test_fillna(self)
pandas.tests.indexes.common.Base.test_get_unique_index(self)
pandas.tests.indexes.common.Base.test_hash_error(self)
pandas.tests.indexes.common.Base.test_hasnans_isnans(self)
pandas.tests.indexes.common.Base.test_insert_base(self)
pandas.tests.indexes.common.Base.test_intersection_base(self)
pandas.tests.indexes.common.Base.test_logical_compat(self)
pandas.tests.indexes.common.Base.test_memory_usage(self)
pandas.tests.indexes.common.Base.test_mutability(self)
pandas.tests.indexes.common.Base.test_ndarray_compat_properties(self)
pandas.tests.indexes.common.Base.test_nulls(self)
pandas.tests.indexes.common.Base.test_numeric_compat(self)
pandas.tests.indexes.common.Base.test_numpy_argsort(self)
pandas.tests.indexes.common.Base.test_numpy_repeat(self)
pandas.tests.indexes.common.Base.test_numpy_ufuncs(self)
pandas.tests.indexes.common.Base.test_pickle(self)
pandas.tests.indexes.common.Base.test_pickle_compat_construction(self)
pandas.tests.indexes.common.Base.test_reindex_base(self)
pandas.tests.indexes.common.Base.test_repeat(self)
pandas.tests.indexes.common.Base.test_repr_max_seq_item_setting(self)
pandas.tests.indexes.common.Base.test_repr_roundtrip(self)
pandas.tests.indexes.common.Base.test_set_name_methods(self)
pandas.tests.indexes.common.Base.test_setops_errorcases(self)
pandas.tests.indexes.common.Base.test_shift(self)
pandas.tests.indexes.common.Base.test_sort(self)
pandas.tests.indexes.common.Base.test_str(self)
pandas.tests.indexes.common.Base.test_symmetric_difference(self)
pandas.tests.indexes.common.Base.test_take(self)
pandas.tests.indexes.common.Base.test_take_invalid_kwargs(self)
pandas.tests.indexes.common.Base.test_to_series(self)
pandas.tests.indexes.common.Base.test_union_base(self)
pandas.tests.indexes.common.Base.test_view(self)
pandas.tests.indexes.common.Base.test_where(self)
pandas.tests.indexes.common.Base.test_where_array_like(self)
pandas.tests.indexes.common.Base.test_wrong_number_names(self)
pandas.tests.indexes.common.Base.verify_pickle(self,index)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/test_category.py----------------------------------------
A:pandas.tests.indexes.test_category.self.indices->dict(catIndex=tm.makeCategoricalIndex(100))
A:pandas.tests.indexes.test_category.categories->list('cab')
A:pandas.tests.indexes.test_category.ci->CategoricalIndex(list('aabca') + [np.nan], categories=['c', 'a', 'b'])
A:pandas.tests.indexes.test_category.result->pandas.CategoricalIndex([1, 2, 3], name='foo').take(np.array([1, 0, -1]), allow_fill=False, fill_value=True)
A:pandas.tests.indexes.test_category.c->CategoricalIndex(['a', 'b', 'c', 'a'], categories=['a', 'b', 'c', 'd'])
A:pandas.tests.indexes.test_category.expected->pandas.CategoricalIndex(expected)
A:pandas.tests.indexes.test_category.idx->pandas.CategoricalIndex([1, 2, 3], name='foo')
A:pandas.tests.indexes.test_category.exp->CategoricalIndex([1.0, 1.0, 3.0, 1.0], name='x')
A:pandas.tests.indexes.test_category.i->self.create_index()
A:pandas.tests.indexes.test_category.i2->pandas.CategoricalIndex([np.nan, np.nan] + i[2:].tolist(), categories=i.categories)
A:pandas.tests.indexes.test_category.ii->pandas.IntervalIndex.from_arrays(left=[-0.001, 2.0], right=[2, 4], closed='right')
A:pandas.tests.indexes.test_category.actual->CategoricalIndex(list('aabca') + [np.nan], categories=['c', 'a', 'b']).get_indexer(finder)
A:pandas.tests.indexes.test_category.oidx->Index(np.array(ci))
A:pandas.tests.indexes.test_category.(res, indexer)->CategoricalIndex(['a', 'b', 'c', 'a'], categories=['a', 'b', 'c', 'd']).reindex(Categorical(['a', 'c']))
A:pandas.tests.indexes.test_category.idx1->Index(list('abcde'))
A:pandas.tests.indexes.test_category.idx2->Index(list('aacded'))
A:pandas.tests.indexes.test_category.r1->Index(list('abcde')).get_indexer(idx2)
A:pandas.tests.indexes.test_category.cidx1->CategoricalIndex(list('abcde'), categories=list('edabc'))
A:pandas.tests.indexes.test_category.cidx2->CategoricalIndex(list('aacded'), categories=list('edabc'))
A:pandas.tests.indexes.test_category.res->CategoricalIndex(list('aabbb'), categories=list('abc')).get_loc('b')
A:pandas.tests.indexes.test_category.cidx3->CategoricalIndex(list('aabbb'), categories=list('abc'))
A:pandas.tests.indexes.test_category.idx3->Index(list('aabbb'))
A:pandas.tests.indexes.test_category.ci1->CategoricalIndex(['a', 'b'], categories=['a', 'b'], ordered=True)
A:pandas.tests.indexes.test_category.ci2->CategoricalIndex(['a', 'b'], categories=['a', 'b', 'c'], ordered=True)
A:pandas.tests.indexes.test_category.exp_cats->pandas.DatetimeIndex(['2011-01-01', '2011-02-01', '2011-03-01'])
pandas.tests.indexes.test_category.TestCategoricalIndex(Base)
pandas.tests.indexes.test_category.TestCategoricalIndex.create_index(self,categories=None,ordered=False)
pandas.tests.indexes.test_category.TestCategoricalIndex.setup_method(self,method)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_append(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_astype(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_construction(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_construction_with_dtype(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_contains(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_delete(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_disallow_set_ops(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_duplicates(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_ensure_copied_data(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_equals_categorical(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_fillna_categorical(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_get_indexer(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_get_loc(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_identical(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_insert(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_isin(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_map(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_method_delegation(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_min_max(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_reindex_base(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_reindex_dtype(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_reindexing(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_repr_roundtrip(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_string_categorical_index_repr(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_take_fill_value(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_take_fill_value_datetime(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_take_invalid_kwargs(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_where(self)
pandas.tests.indexes.test_category.TestCategoricalIndex.test_where_array_like(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/test_range.py----------------------------------------
A:pandas.tests.indexes.test_range.self.indices->dict(index=RangeIndex(0, 20, 2, name='foo'))
A:pandas.tests.indexes.test_range.result->self.create_index().where(klass(cond))
A:pandas.tests.indexes.test_range.expected->pandas.Index([_nan] + i[1:].tolist())
A:pandas.tests.indexes.test_range.index->RangeIndex(1, 5, name='foo')
A:pandas.tests.indexes.test_range.orig->RangeIndex(10)
A:pandas.tests.indexes.test_range.copy->RangeIndex(orig)
A:pandas.tests.indexes.test_range.new->Index(copy)
A:pandas.tests.indexes.test_range.idx->RangeIndex(5)
A:pandas.tests.indexes.test_range.arr->numpy.arange(5, 0, step)
A:pandas.tests.indexes.test_range.i->self.create_index()
A:pandas.tests.indexes.test_range.i_copy->self.create_index().copy()
A:pandas.tests.indexes.test_range.i_view->self.create_index().view(RangeIndex)
A:pandas.tests.indexes.test_range.same_values_different_type->Index(i, dtype=object)
A:pandas.tests.indexes.test_range.same_values->Index(i, dtype=object)
A:pandas.tests.indexes.test_range.target->RangeIndex(10)
A:pandas.tests.indexes.test_range.indexer->self.index.get_indexer(target, method='backfill')
A:pandas.tests.indexes.test_range.other->Index([now + timedelta(i) for i in range(4)], dtype=object)
A:pandas.tests.indexes.test_range.(res, lidx, ridx)->self.index.join(other, return_indexers=True)
A:pandas.tests.indexes.test_range.noidx_res->self.index.join(other, how='outer')
A:pandas.tests.indexes.test_range.eres->Int64Index([0, 2, 4, 4, 6, 8, 10, 12, 14, 16, 18])
A:pandas.tests.indexes.test_range.elidx->numpy.array([0, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9], dtype=np.intp)
A:pandas.tests.indexes.test_range.eridx->numpy.array([-1, -1, 0, 1, -1, -1, -1, -1, -1, -1, -1], dtype=np.intp)
A:pandas.tests.indexes.test_range.ind->i2.intersection(i1).argsort()
A:pandas.tests.indexes.test_range.res->RangeIndex(0, 10).intersection(i1)
A:pandas.tests.indexes.test_range.lidx->lidx.take(ind).take(ind)
A:pandas.tests.indexes.test_range.ridx->ridx.take(ind).take(ind)
A:pandas.tests.indexes.test_range.outer->self.index.join(other, how='outer')
A:pandas.tests.indexes.test_range.outer2->Index([now + timedelta(i) for i in range(4)], dtype=object).join(self.index, how='outer')
A:pandas.tests.indexes.test_range.inner->self.index.join(other, how='inner')
A:pandas.tests.indexes.test_range.inner2->Index([now + timedelta(i) for i in range(4)], dtype=object).join(self.index, how='inner')
A:pandas.tests.indexes.test_range.left->self.index.join(other, how='left')
A:pandas.tests.indexes.test_range.left2->Index([now + timedelta(i) for i in range(4)], dtype=object).join(self.index, how='left')
A:pandas.tests.indexes.test_range.right->self.index.join(other, how='right')
A:pandas.tests.indexes.test_range.right2->Index([now + timedelta(i) for i in range(4)], dtype=object).join(self.index, how='right')
A:pandas.tests.indexes.test_range.joined->self.index.join(self.index, how=kind)
A:pandas.tests.indexes.test_range.i1->Index(dt_dates, dtype=object)
A:pandas.tests.indexes.test_range.i2->RangeIndex(0, 10)
A:pandas.tests.indexes.test_range.now->datetime.datetime.now()
A:pandas.tests.indexes.test_range.res1->idx1.union(idx2)
A:pandas.tests.indexes.test_range.res2->idx2.union(idx1)
A:pandas.tests.indexes.test_range.res3->idx1._int64index.union(idx2)
A:pandas.tests.indexes.test_range.taken->RangeIndex(1, 5, name='foo').take([3, 0, 1])
A:pandas.tests.indexes.test_range.df->pandas.DataFrame({u('א'): [1, 2, 3], 'ב': [4, 5, 6], 'c': [7, 8, 9]})
A:pandas.tests.indexes.test_range.a->numpy.zeros(5, dtype='float64')
pandas.tests.indexes.test_range.TestRangeIndex(Numeric)
pandas.tests.indexes.test_range.TestRangeIndex.check_binop(self,ops,scalars,idxs)
pandas.tests.indexes.test_range.TestRangeIndex.create_index(self)
pandas.tests.indexes.test_range.TestRangeIndex.setup_method(self,method)
pandas.tests.indexes.test_range.TestRangeIndex.test_binops(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_binops_pow(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_cant_or_shouldnt_cast(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_constructor(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_constructor_corner(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_constructor_name(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_constructor_range(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_constructor_same(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_copy(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_delete(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_dtype(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_duplicates(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_equals_range(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_explicit_conversions(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_extended_gcd(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_get_indexer(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_get_indexer_backfill(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_get_indexer_pad(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_identical(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_insert(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_intersect_str_dates(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_intersection(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_is_monotonic(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_join_inner(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_join_left(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_join_non_int_index(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_join_non_unique(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_join_outer(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_join_right(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_join_self(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_len_specialised(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_logical_compat(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_max_fitting_element(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_min_fitting_element(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_nbytes(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_numeric_compat2(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_pickle_compat_construction(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_prevent_casting(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_print_unicode_columns(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_repr(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_repr_roundtrip(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_slice_keep_name(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_slice_specialised(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_take_fill_value(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_take_preserve_name(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_too_many_names(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_ufunc_compat(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_union(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_union_noncomparable(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_view(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_view_Index(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_where(self)
pandas.tests.indexes.test_range.TestRangeIndex.test_where_array_like(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/test_numeric.py----------------------------------------
A:pandas.tests.indexes.test_numeric.ret->numpy.empty(array.shape, dtype=np.array(value).dtype)
A:pandas.tests.indexes.test_numeric.idx->UInt64Index(2 ** 63 + np.array([1, 1, 2, 5], dtype='uint64'))
A:pandas.tests.indexes.test_numeric.expected->Index(2 ** 63 + np.array([10, 20], dtype='uint64'))
A:pandas.tests.indexes.test_numeric.result->UInt64Index(2 ** 63 + np.array([7, 12, 25, 1, 2, 10], dtype='uint64')).intersection(self.index)
A:pandas.tests.indexes.test_numeric.(div, mod)->divmod(idx.values, full_like(idx.values, 2))
A:pandas.tests.indexes.test_numeric.a->numpy.zeros(5, dtype='float64')
A:pandas.tests.indexes.test_numeric.int_idx->Index(range(6))
A:pandas.tests.indexes.test_numeric.float_idx->Index(np.arange(0, 0.6, 0.1))
A:pandas.tests.indexes.test_numeric.obj_idx->Index('A B C D E F'.split())
A:pandas.tests.indexes.test_numeric.dt_idx->pandas.date_range('2013-01-01', freq='M', periods=6)
A:pandas.tests.indexes.test_numeric.to_groupby->numpy.array([1, 2, np.nan, np.nan, 2, 1])
A:pandas.tests.indexes.test_numeric.index->Int64Index(arr)
A:pandas.tests.indexes.test_numeric.self.indices->dict(index=UInt64Index([2 ** 63, 2 ** 63 + 10, 2 ** 63 + 15, 2 ** 63 + 20, 2 ** 63 + 25]))
A:pandas.tests.indexes.test_numeric.i->self.create_index()
A:pandas.tests.indexes.test_numeric.i2->Float64Index([1.0, np.nan])
A:pandas.tests.indexes.test_numeric.sliced->UInt64Index(2 ** 63 + np.array([1, 1, 2, 5], dtype='uint64')).slice_locs(np.nan)
A:pandas.tests.indexes.test_numeric.exp->Float64Index([0.5, 1.0, 1.5, 2.0, 2.5], name='x')
A:pandas.tests.indexes.test_numeric.i_view->self.create_index().view(self._holder)
A:pandas.tests.indexes.test_numeric.same_values_different_type->Index(i, dtype=object)
A:pandas.tests.indexes.test_numeric.same_values->Index(i, dtype=object)
A:pandas.tests.indexes.test_numeric.left->self.index.join(other, how='left')
A:pandas.tests.indexes.test_numeric.(joined, lidx, ridx)->self.index.join(other, how='left').join(left, return_indexers=True)
A:pandas.tests.indexes.test_numeric.exp_joined->Index([3, 3, 3, 3, 4, 4, 4, 4])
A:pandas.tests.indexes.test_numeric.exp_lidx->numpy.array([2, 2, 3, 3, 0, 0, 1, 1], dtype=np.intp)
A:pandas.tests.indexes.test_numeric.exp_ridx->numpy.array([2, 3, 2, 3, 0, 1, 0, 1], dtype=np.intp)
A:pandas.tests.indexes.test_numeric.joined->self.index.join(self.index, how=kind)
A:pandas.tests.indexes.test_numeric.now->datetime.datetime.now()
A:pandas.tests.indexes.test_numeric.other->UInt64Index(2 ** 63 + np.array([7, 12, 25, 1, 2, 10], dtype='uint64'))
A:pandas.tests.indexes.test_numeric.taken->Int64Index(arr).take([3, 0, 1])
A:pandas.tests.indexes.test_numeric.msg->'Unable to fill values because {name} cannot contain NA'.format(name=name)
A:pandas.tests.indexes.test_numeric.new_index->Int64Index(arr, copy=True)
A:pandas.tests.indexes.test_numeric.arr->Index([1, 2, 3, 4], dtype=object)
A:pandas.tests.indexes.test_numeric.target->UInt64Index(np.arange(10).astype('uint64') * 5 + 2 ** 63)
A:pandas.tests.indexes.test_numeric.indexer->self.index.get_indexer(target, method='backfill')
A:pandas.tests.indexes.test_numeric.other_mono->UInt64Index(2 ** 63 + np.array([1, 2, 7, 10, 12, 25], dtype='uint64'))
A:pandas.tests.indexes.test_numeric.(res, lidx, ridx)->self.index.join(other_mono, how='outer', return_indexers=True)
A:pandas.tests.indexes.test_numeric.ind->res.take(ind).argsort()
A:pandas.tests.indexes.test_numeric.res->res.take(ind).take(ind)
A:pandas.tests.indexes.test_numeric.lidx->lidx.take(ind).take(ind)
A:pandas.tests.indexes.test_numeric.ridx->ridx.take(ind).take(ind)
A:pandas.tests.indexes.test_numeric.eres->UInt64Index(2 ** 63 + np.array([0, 1, 2, 7, 10, 12, 15, 20, 25], dtype='uint64'))
A:pandas.tests.indexes.test_numeric.elidx->numpy.array([0, -1, -1, -1, 1, -1, 2, 3, 4], dtype=np.intp)
A:pandas.tests.indexes.test_numeric.eridx->numpy.array([-1, 0, 1, 2, 3, 4, -1, -1, 5], dtype=np.intp)
A:pandas.tests.indexes.test_numeric.res2->self.index.intersection(other_mono)
A:pandas.tests.indexes.test_numeric.idx2->UInt64Index(2 ** 63 + np.array([1, 2, 5, 7, 9], dtype='uint64'))
A:pandas.tests.indexes.test_numeric.outer->self.index.join(other, how='outer')
A:pandas.tests.indexes.test_numeric.outer2->UInt64Index(2 ** 63 + np.array([7, 12, 25, 1, 2, 10], dtype='uint64')).join(self.index, how='outer')
A:pandas.tests.indexes.test_numeric.inner->self.index.join(other, how='inner')
A:pandas.tests.indexes.test_numeric.inner2->UInt64Index(2 ** 63 + np.array([7, 12, 25, 1, 2, 10], dtype='uint64')).join(self.index, how='inner')
A:pandas.tests.indexes.test_numeric.left2->UInt64Index(2 ** 63 + np.array([7, 12, 25, 1, 2, 10], dtype='uint64')).join(self.index, how='left')
A:pandas.tests.indexes.test_numeric.right->self.index.join(other, how='right')
A:pandas.tests.indexes.test_numeric.right2->UInt64Index(2 ** 63 + np.array([7, 12, 25, 1, 2, 10], dtype='uint64')).join(self.index, how='right')
A:pandas.tests.indexes.test_numeric.noidx_res->self.index.join(other_mono, how='outer')
pandas.tests.indexes.test_numeric.Numeric(Base)
pandas.tests.indexes.test_numeric.Numeric.test_explicit_conversions(self)
pandas.tests.indexes.test_numeric.Numeric.test_index_groupby(self)
pandas.tests.indexes.test_numeric.Numeric.test_modulo(self)
pandas.tests.indexes.test_numeric.Numeric.test_numeric_compat(self)
pandas.tests.indexes.test_numeric.Numeric.test_ufunc_compat(self)
pandas.tests.indexes.test_numeric.NumericInt(Numeric)
pandas.tests.indexes.test_numeric.NumericInt.test_cant_or_shouldnt_cast(self)
pandas.tests.indexes.test_numeric.NumericInt.test_identical(self)
pandas.tests.indexes.test_numeric.NumericInt.test_is_monotonic(self)
pandas.tests.indexes.test_numeric.NumericInt.test_join_non_unique(self)
pandas.tests.indexes.test_numeric.NumericInt.test_join_self(self)
pandas.tests.indexes.test_numeric.NumericInt.test_logical_compat(self)
pandas.tests.indexes.test_numeric.NumericInt.test_prevent_casting(self)
pandas.tests.indexes.test_numeric.NumericInt.test_slice_keep_name(self)
pandas.tests.indexes.test_numeric.NumericInt.test_take_fill_value(self)
pandas.tests.indexes.test_numeric.NumericInt.test_take_preserve_name(self)
pandas.tests.indexes.test_numeric.NumericInt.test_ufunc_coercions(self)
pandas.tests.indexes.test_numeric.NumericInt.test_union_noncomparable(self)
pandas.tests.indexes.test_numeric.NumericInt.test_view(self)
pandas.tests.indexes.test_numeric.NumericInt.test_view_index(self)
pandas.tests.indexes.test_numeric.TestFloat64Index(Numeric)
pandas.tests.indexes.test_numeric.TestFloat64Index.check_coerce(self,a,b,is_float_index=True)
pandas.tests.indexes.test_numeric.TestFloat64Index.check_is_index(self,i)
pandas.tests.indexes.test_numeric.TestFloat64Index.create_index(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.setup_method(self,method)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_astype(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_astype_from_object(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_constructor(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_constructor_coerce(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_constructor_explicit(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_constructor_invalid(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_contains_nans(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_contains_not_nans(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_doesnt_contain_all_the_things(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_equals_numeric(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_fillna_float64(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_get_indexer(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_get_loc(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_get_loc_na(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_nan_multiple_containment(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_repr_roundtrip(self)
pandas.tests.indexes.test_numeric.TestFloat64Index.test_take_fill_value(self)
pandas.tests.indexes.test_numeric.TestInt64Index(NumericInt)
pandas.tests.indexes.test_numeric.TestInt64Index.create_index(self)
pandas.tests.indexes.test_numeric.TestInt64Index.setup_method(self,method)
pandas.tests.indexes.test_numeric.TestInt64Index.test_coerce_list(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_constructor(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_constructor_corner(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_get_indexer(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_intersection(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_join_inner(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_join_left(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_join_non_int_index(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_join_outer(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_join_right(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_where(self)
pandas.tests.indexes.test_numeric.TestInt64Index.test_where_array_like(self)
pandas.tests.indexes.test_numeric.TestUInt64Index(NumericInt)
pandas.tests.indexes.test_numeric.TestUInt64Index.create_index(self)
pandas.tests.indexes.test_numeric.TestUInt64Index.setup_method(self,method)
pandas.tests.indexes.test_numeric.TestUInt64Index.test_constructor(self)
pandas.tests.indexes.test_numeric.TestUInt64Index.test_get_indexer(self)
pandas.tests.indexes.test_numeric.TestUInt64Index.test_intersection(self)
pandas.tests.indexes.test_numeric.TestUInt64Index.test_join_inner(self)
pandas.tests.indexes.test_numeric.TestUInt64Index.test_join_left(self)
pandas.tests.indexes.test_numeric.TestUInt64Index.test_join_non_int_index(self)
pandas.tests.indexes.test_numeric.TestUInt64Index.test_join_outer(self)
pandas.tests.indexes.test_numeric.TestUInt64Index.test_join_right(self)
pandas.tests.indexes.test_numeric.full_like(array,value)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/test_multi.py----------------------------------------
A:pandas.tests.indexes.test_multi.major_axis->Index(['foo', 'bar', 'baz', 'qux'])
A:pandas.tests.indexes.test_multi.minor_axis->Index(['one', 'two'])
A:pandas.tests.indexes.test_multi.major_labels->numpy.array([0, 0, 2, 2, 3, 3])
A:pandas.tests.indexes.test_multi.minor_labels->numpy.array([0, 1, 0, 1, 0, 1])
A:pandas.tests.indexes.test_multi.self.indices->dict(index=MultiIndex(levels=[major_axis, minor_axis], labels=[major_labels, minor_labels], names=self.index_names, verify_integrity=False))
A:pandas.tests.indexes.test_multi.i1->pandas.MultiIndex.from_tuples([('A', 1), ('A', 2)])
A:pandas.tests.indexes.test_multi.i2->pandas.MultiIndex.from_tuples([('A', 1), ('A', 3)])
A:pandas.tests.indexes.test_multi.common->pandas.MultiIndex.from_tuples([('A', 1), ('A', 2)]).intersection(i2)
A:pandas.tests.indexes.test_multi.i->MultiIndex(levels=[[1, 2, 3, 4], ['gb00b03mlx29', 'lu0197800237', 'nl0000289783', 'nl0000289965', 'nl0000301109']], labels=[[0, 1, 1, 2, 2, 2, 3], [4, 2, 0, 0, 1, 3, -1]], names=['household_id', 'asset_id'])
A:pandas.tests.indexes.test_multi.names->numpy.array(['foo', 'bar'])
A:pandas.tests.indexes.test_multi.m->pandas.MultiIndex.from_product([numbers, names], names=names)
A:pandas.tests.indexes.test_multi.expected->pandas.Int64Index(np.tile(np.arange(10), 10), name='buzz')
A:pandas.tests.indexes.test_multi.result->pandas.DataFrame([[i, 10 * i] for i in lrange(6)], index=mi, columns=['one', 'two']).index.get_level_values('buzz')
A:pandas.tests.indexes.test_multi.ind->pandas.MultiIndex.from_arrays([['A', 'A', 'B', 'B', 'B'], [1, 2, 1, 2, 3]])
A:pandas.tests.indexes.test_multi.res->pandas.MultiIndex.from_tuples([('z', 'a'), ('x', 'a'), ('y', 'b'), ('x', 'b'), ('y', 'a'), ('z', 'b')], names=['one', 'two']).unique()
A:pandas.tests.indexes.test_multi.act->numpy.asarray(act)
A:pandas.tests.indexes.test_multi.exp->pandas.MultiIndex.from_arrays([[1, np.nan, 3, 5], [1, 2, np.nan, 5], ['a', 'b', 'c', 'e']])
A:pandas.tests.indexes.test_multi.ind2->self.index.copy()
A:pandas.tests.indexes.test_multi.inplace_return->self.index.copy().set_labels(new_labels, level=[0, 1], inplace=True)
A:pandas.tests.indexes.test_multi.original_index->self.index.copy()
A:pandas.tests.indexes.test_multi.index->MultiIndex(levels=[[0, 1], [0, 1, 2]], labels=[[0, 0, 0, 0, 1, 1, 1], [0, 1, 2, 0, 0, 1, 2]])
A:pandas.tests.indexes.test_multi.cidx->CategoricalIndex(list('bac'), ordered=ordered)
A:pandas.tests.indexes.test_multi.result_lvl->pandas.DataFrame([[i, 10 * i] for i in lrange(6)], index=mi, columns=['one', 'two']).index.get_level_values('buzz').get_level_values(0)
A:pandas.tests.indexes.test_multi.expected_lvl->CategoricalIndex(list('bacb'), categories=cidx.categories, ordered=cidx.ordered)
A:pandas.tests.indexes.test_multi.mutable_regex->re.compile('does not support mutable operations')
A:pandas.tests.indexes.test_multi.mi1->MultiIndex(levels=levels, labels=labels)
A:pandas.tests.indexes.test_multi.mi2->pandas.MultiIndex.from_tuples([('z', 'a'), ('x', 'a'), ('y', 'b'), ('x', 'b'), ('y', 'a'), ('z', 'b')], names=['one', 'two']).view()
A:pandas.tests.indexes.test_multi.vals->MultiIndex(levels=levels, labels=labels).values.copy()
A:pandas.tests.indexes.test_multi.vals2->pandas.MultiIndex.from_tuples([('z', 'a'), ('x', 'a'), ('y', 'b'), ('x', 'b'), ('y', 'a'), ('z', 'b')], names=['one', 'two']).view().values.copy()
A:pandas.tests.indexes.test_multi.exp_values->numpy.empty((6,), dtype=object)
A:pandas.tests.indexes.test_multi.levels->numpy.array(['a', 'b', 'c'])
A:pandas.tests.indexes.test_multi.labels->self.index.get_values().tolist()
A:pandas.tests.indexes.test_multi.mi->pandas.MultiIndex.from_tuples([('z', 'a'), ('x', 'a'), ('y', 'b'), ('x', 'b'), ('y', 'a'), ('z', 'b')], names=['one', 'two'])
A:pandas.tests.indexes.test_multi.idx->pandas.MultiIndex.from_arrays([[1, np.nan, 3, np.nan, 5], [1, 2, np.nan, np.nan, 5], ['a', 'b', 'c', np.nan, 'e']])
A:pandas.tests.indexes.test_multi.df->pandas.DataFrame([[i, 10 * i] for i in lrange(6)], index=mi, columns=['one', 'two'])
A:pandas.tests.indexes.test_multi.multi_idx->pandas.Index([(1, 2), (3, 4)], names=['MyName1', 'MyName2'])
A:pandas.tests.indexes.test_multi.multi_idx1->pandas.Index([(1, 2), (3, 4)], names=['MyName1', 'MyName2']).copy()
A:pandas.tests.indexes.test_multi.multi_idx2->pandas.Index([(1, 2), (3, 4)], names=['MyName1', 'MyName2']).copy(names=['NewName1', 'NewName2'])
A:pandas.tests.indexes.test_multi.multi_idx3->pandas.Index([(1, 2), (3, 4)], names=['MyName1', 'MyName2']).copy(name=['NewName1', 'NewName2'])
A:pandas.tests.indexes.test_multi.ind_names->list(index.names)
A:pandas.tests.indexes.test_multi.actual->self.index.astype('O')
A:pandas.tests.indexes.test_multi.single_level->MultiIndex(levels=[['foo', 'bar', 'baz', 'qux']], labels=[[0, 1, 2, 3]])
A:pandas.tests.indexes.test_multi.both_re->re.compile('Must pass both levels and labels')
A:pandas.tests.indexes.test_multi.length_error->re.compile('>= length of level')
A:pandas.tests.indexes.test_multi.label_error->re.compile('Unequal label lengths: \\[4, 2\\]')
A:pandas.tests.indexes.test_multi.i_copy->self.index._shallow_copy()
A:pandas.tests.indexes.test_multi.i_view->self.index.view()
A:pandas.tests.indexes.test_multi.view->self.index.view()
A:pandas.tests.indexes.test_multi.copy->self.index.copy()
A:pandas.tests.indexes.test_multi.shallow_copy->self.index._shallow_copy()
A:pandas.tests.indexes.test_multi.idx1->pandas.DatetimeIndex(['2015-01-01', '2015-01-01', '2015-01-01', '2015-01-01', 'NaT', 'NaT'])
A:pandas.tests.indexes.test_multi.idx2->pandas.DatetimeIndex(['2015-01-01', '2015-01-01', '2015-01-02', '2015-01-02', 'NaT', '2015-01-01'], tz='Asia/Tokyo')
A:pandas.tests.indexes.test_multi.result2->pandas.DataFrame([[i, 10 * i] for i in lrange(6)], index=mi, columns=['one', 'two']).index.get_level_values('buzz').remove_unused_levels()
A:pandas.tests.indexes.test_multi.idx3->pandas.timedelta_range('1 days', freq='D', periods=3)
A:pandas.tests.indexes.test_multi.idx4->pandas.period_range('2011-01-01', freq='D', periods=3)
A:pandas.tests.indexes.test_multi.result3->pandas.MultiIndex.from_arrays([idx1.values, idx2.values])
A:pandas.tests.indexes.test_multi.lvl2->lrange(N)
A:pandas.tests.indexes.test_multi.dt_index->date_range('2000-01-01', periods=2)
A:pandas.tests.indexes.test_multi.etalon->pandas._libs.lib.list_to_object_array([(1, pd.Timestamp('2000-01-01')), (1, pd.Timestamp('2000-01-02')), (2, pd.Timestamp('2000-01-01')), (2, pd.Timestamp('2000-01-02'))])
A:pandas.tests.indexes.test_multi.dti->date_range('2011-01-01', freq='M', periods=3)
A:pandas.tests.indexes.test_multi.dti_tz->date_range('2011-01-01', freq='M', periods=3, tz='US/Eastern')
A:pandas.tests.indexes.test_multi.pi->period_range('2011-01', freq='M', periods=3)
A:pandas.tests.indexes.test_multi.other->pandas.MultiIndex.from_arrays([['x', 'y', 'z'], ['x', 'y', 'z'], ['x', 'y', 'z'], ['x', 'y', 'z'], ['x', 'y', 'z'], ['x', 'y', 'z']])
A:pandas.tests.indexes.test_multi.values->MultiIndex(levels=[[0, 1], [0, 1, 2]], labels=[[0, 0, 0, 0, 1, 1, 1], [0, 1, 2, 0, 0, 1, 2]]).values.tolist()
A:pandas.tests.indexes.test_multi.path->pandas.util.testing.get_data_path('mindex_073.pickle')
A:pandas.tests.indexes.test_multi.obj->pandas.read_pickle(path)
A:pandas.tests.indexes.test_multi.obj2->pandas.MultiIndex.from_tuples(obj.values)
A:pandas.tests.indexes.test_multi.exp2->pandas.MultiIndex.from_tuples(obj.values).get_indexer(obj2[::-1])
A:pandas.tests.indexes.test_multi.unpickled->pandas.util.testing.round_trip_pickle(index)
A:pandas.tests.indexes.test_multi.midx->pandas.MultiIndex.from_product([np.arange(4), np.arange(4)], names=['a', 'b'])
A:pandas.tests.indexes.test_multi.(sorted_idx, _)->MultiIndex(levels=[[0, 1], [0, 1, 2]], labels=[[0, 0, 0, 0, 1, 1, 1], [0, 1, 2, 0, 0, 1, 2]]).sortlevel(1, ascending=False)
A:pandas.tests.indexes.test_multi.rs->MultiIndex(levels=[[0, 1], [0, 1, 2]], labels=[[0, 0, 0, 0, 1, 1, 1], [0, 1, 2, 0, 0, 1, 2]]).get_loc('c')
A:pandas.tests.indexes.test_multi.(loc, new_index)->MultiIndex(levels=[[0, 1], [0, 1, 2]], labels=[[0, 0, 0, 0, 1, 1, 1], [0, 1, 2, 0, 0, 1, 2]]).get_loc_level((0, 1, 0))
A:pandas.tests.indexes.test_multi.exp_index->self.index.join(idx, level='second', how='right')
A:pandas.tests.indexes.test_multi.(result, new_index)->MultiIndex(levels=[[0, 1], [0, 1, 2]], labels=[[0, 0, 0, 0, 1, 1, 1], [0, 1, 2, 0, 0, 1, 2]]).get_loc_level((2000, slice(None, None)))
A:pandas.tests.indexes.test_multi.stacked->pandas.DataFrame([[i, 10 * i] for i in lrange(6)], index=mi, columns=['one', 'two']).stack()
A:pandas.tests.indexes.test_multi.slob->slice(*idx.slice_locs(df.index[5] + timedelta(seconds=30), df.index[15] - timedelta(seconds=30)))
A:pandas.tests.indexes.test_multi.(sorted_index, _)->MultiIndex(levels=[[0, 1], [0, 1, 2]], labels=[[0, 0, 0, 0, 1, 1, 1], [0, 1, 2, 0, 0, 1, 2]]).sortlevel(0)
A:pandas.tests.indexes.test_multi.r1->pandas.DatetimeIndex(['2015-01-01', '2015-01-01', '2015-01-01', '2015-01-01', 'NaT', 'NaT']).get_indexer([1, 2, 3])
A:pandas.tests.indexes.test_multi.e1->numpy.array([0, 0, 1, 1, 2], dtype=np.intp)
A:pandas.tests.indexes.test_multi.r2->pandas.DatetimeIndex(['2015-01-01', '2015-01-01', '2015-01-02', '2015-01-02', 'NaT', '2015-01-01'], tz='Asia/Tokyo').get_indexer(idx1[::-1], method='backfill')
A:pandas.tests.indexes.test_multi.rffill1->pandas.DatetimeIndex(['2015-01-01', '2015-01-01', '2015-01-02', '2015-01-02', 'NaT', '2015-01-01'], tz='Asia/Tokyo').get_indexer(idx1, method='ffill')
A:pandas.tests.indexes.test_multi.rbfill1->pandas.DatetimeIndex(['2015-01-01', '2015-01-01', '2015-01-02', '2015-01-02', 'NaT', '2015-01-01'], tz='Asia/Tokyo').get_indexer(idx1, method='bfill')
A:pandas.tests.indexes.test_multi.rexp1->pandas.DatetimeIndex(['2015-01-01', '2015-01-01', '2015-01-01', '2015-01-01', 'NaT', 'NaT']).get_indexer(idx2)
A:pandas.tests.indexes.test_multi.index2->MultiIndex(levels=index.levels[:-1], labels=index.labels[:-1])
A:pandas.tests.indexes.test_multi.mi3->pandas.MultiIndex.from_tuples([('z', 'a'), ('x', 'a'), ('y', 'b'), ('x', 'b'), ('y', 'a'), ('z', 'b')], names=['one', 'two']).view().set_levels([lrange(10), lrange(10)])
A:pandas.tests.indexes.test_multi.mi4->pandas.MultiIndex.from_tuples([('z', 'a'), ('x', 'a'), ('y', 'b'), ('x', 'b'), ('y', 'a'), ('z', 'b')], names=['one', 'two']).view().set_levels([lrange(10), lrange(10)]).view()
A:pandas.tests.indexes.test_multi.mi5->pandas.MultiIndex.from_tuples([('z', 'a'), ('x', 'a'), ('y', 'b'), ('x', 'b'), ('y', 'a'), ('z', 'b')], names=['one', 'two']).view()
A:pandas.tests.indexes.test_multi.tups->sorted(self.index[3:5].values)
A:pandas.tests.indexes.test_multi.the_union->self.index.union(self.index[:0])
A:pandas.tests.indexes.test_multi.the_int->self.index.intersection(self.index)
A:pandas.tests.indexes.test_multi.tuples->list(self.index)
A:pandas.tests.indexes.test_multi.by1->sorted(tuples, key=lambda x: (x[1], x[0]))
A:pandas.tests.indexes.test_multi.dropped->index[:2].droplevel(['three', 'one'])
A:pandas.tests.indexes.test_multi.dropped2->self.index.drop(index)
A:pandas.tests.indexes.test_multi.mixed_index->pandas.MultiIndex.from_tuples([('qux', 'one'), ('bar', 'two')])
A:pandas.tests.indexes.test_multi.lexsorted_mi->pandas.MultiIndex.from_tuples(tuples, names=['b', 'c'])
A:pandas.tests.indexes.test_multi.new_index->self.index.insert(0, ('abc', 'three'))
A:pandas.tests.indexes.test_multi.exp0->Index(list(self.index.levels[0]) + ['abc'], name='first')
A:pandas.tests.indexes.test_multi.exp1->Index(list(self.index.levels[1]) + ['three'], name='second')
A:pandas.tests.indexes.test_multi.left->pandas.MultiIndex.from_tuples([('z', 'a'), ('x', 'a'), ('y', 'b'), ('x', 'b'), ('y', 'a'), ('z', 'b')], names=['one', 'two']).duplicated(keep=keep)
A:pandas.tests.indexes.test_multi.ts->left['3rd'].copy(deep=True)
A:pandas.tests.indexes.test_multi.right->pandas._libs.hashtable.duplicated_object(mi.values, keep=keep)
A:pandas.tests.indexes.test_multi.taken->self.index.take([3, 0, 1])
A:pandas.tests.indexes.test_multi.(join_index, lidx, ridx)->pandas.MultiIndex.from_arrays([['x', 'y', 'z'], ['x', 'y', 'z'], ['x', 'y', 'z'], ['x', 'y', 'z'], ['x', 'y', 'z'], ['x', 'y', 'z']]).join(self.index, how=how, level='second', return_indexers=True)
A:pandas.tests.indexes.test_multi.exp_level->pandas.MultiIndex.from_arrays([['x', 'y', 'z'], ['x', 'y', 'z'], ['x', 'y', 'z'], ['x', 'y', 'z'], ['x', 'y', 'z'], ['x', 'y', 'z']]).join(self.index.levels[1], how=how)
A:pandas.tests.indexes.test_multi.mask->numpy.array([x[1] in exp_level for x in self.index], dtype=bool)
A:pandas.tests.indexes.test_multi.(join_index2, ridx2, lidx2)->self.index.join(other, how=how, level='second', return_indexers=True)
A:pandas.tests.indexes.test_multi.joined->pandas.MultiIndex.from_tuples([('z', 'a'), ('x', 'a'), ('y', 'b'), ('x', 'b'), ('y', 'a'), ('z', 'b')], names=['one', 'two']).unique().join(res, how=kind)
A:pandas.tests.indexes.test_multi.(jidx, lidx, ridx)->pandas.MultiIndex.from_product([np.arange(4), np.arange(4)], names=['a', 'b']).join(idx, how='left', return_indexers=True)
A:pandas.tests.indexes.test_multi.exp_idx->pandas.MultiIndex.from_product([np.arange(4), [1, 2]], names=['a', 'b'])
A:pandas.tests.indexes.test_multi.exp_lidx->numpy.array([1, 2, 5, 6, 9, 10, 13, 14], dtype=np.intp)
A:pandas.tests.indexes.test_multi.exp_ridx->numpy.array([-1, 0, 1, -1, -1, 0, 1, -1, -1, 0, 1, -1, -1, 0, 1, -1], dtype=np.intp)
A:pandas.tests.indexes.test_multi.(jidx, ridx, lidx)->pandas.MultiIndex.from_arrays([[1, np.nan, 3, np.nan, 5], [1, 2, np.nan, np.nan, 5], ['a', 'b', 'c', np.nan, 'e']]).join(midx, how='right', return_indexers=True)
A:pandas.tests.indexes.test_multi.(result, indexer)->self.index.reindex(list(self.index))
A:pandas.tests.indexes.test_multi.(target, indexer)->self.index.reindex(idx, level='second')
A:pandas.tests.indexes.test_multi.(target2, indexer2)->pandas.MultiIndex.from_arrays([[1, np.nan, 3, np.nan, 5], [1, 2, np.nan, np.nan, 5], ['a', 'b', 'c', np.nan, 'e']]).reindex(self.index, level='second')
A:pandas.tests.indexes.test_multi.exp_index2->self.index.join(idx, level='second', how='left')
A:pandas.tests.indexes.test_multi.exp_indexer->numpy.array([0, 2, 4])
A:pandas.tests.indexes.test_multi.exp_indexer2->numpy.array([0, -1, 0, -1, 0, -1])
A:pandas.tests.indexes.test_multi.level->numpy.arange(500)
A:pandas.tests.indexes.test_multi.lab->product(range(-1, n), range(-1, m))
A:pandas.tests.indexes.test_multi.eidx1->pandas.DatetimeIndex(['2015-01-01', '2015-01-01', 'NaT', 'NaT'])
A:pandas.tests.indexes.test_multi.eidx2->pandas.DatetimeIndex(['2015-01-01', '2015-01-02', 'NaT', '2015-01-01'], tz='Asia/Tokyo')
A:pandas.tests.indexes.test_multi.mi_u->pandas.MultiIndex.from_product([list(u'ab'), range(3)], names=['first', 'second'])
A:pandas.tests.indexes.test_multi.x->pandas.MultiIndex.from_tuples([('a', 'b'), (1, 2), ('c', 'd')], names=['x', 'y'])
A:pandas.tests.indexes.test_multi.recons->pandas.MultiIndex.from_tuples([('z', 'a'), ('x', 'a'), ('y', 'b'), ('x', 'b'), ('y', 'a'), ('z', 'b')], names=['one', 'two'])._sort_levels_monotonic()
A:pandas.tests.indexes.test_multi.df2->pandas.DataFrame([[i, 10 * i] for i in lrange(6)], index=mi, columns=['one', 'two']).set_index(['first', 'second'], drop=False)
A:pandas.tests.indexes.test_multi.target->pandas.MultiIndex.from_arrays([[1, np.nan, 3, np.nan, 5], [1, 2, np.nan, np.nan, 5], ['a', 'b', 'c', np.nan, 'e']]).copy()
A:pandas.tests.indexes.test_multi.other_dtype->pandas.MultiIndex.from_product([[1, 2], [3, 4]])
A:pandas.tests.indexes.test_multi.groups->self.index.groupby(self.index)
A:pandas.tests.indexes.test_multi.df_expected->df_expected.set_index('z').set_index('z')
A:pandas.tests.indexes.test_multi.df_below_1000000->pandas.DataFrame(1, index=pd.MultiIndex.from_product([[1, 2], range(499999)]), columns=['dest'])
A:pandas.tests.indexes.test_multi.df_above_1000000->pandas.DataFrame(1, index=pd.MultiIndex.from_product([[1, 2], range(500001)]), columns=['dest'])
A:pandas.tests.indexes.test_multi.dr->date_range('2013-01-01', periods=100, freq='D')
A:pandas.tests.indexes.test_multi.ix->pandas.MultiIndex.from_product([dr, ['a', 'b']])
A:pandas.tests.indexes.test_multi.df_swap->df_swap.sort_index().sort_index()
A:pandas.tests.indexes.test_multi.expected.index->pandas.Int64Index(np.tile(np.arange(10), 10), name='buzz').index.droplevel(1)
A:pandas.tests.indexes.test_multi.foo->pandas.DataFrame(np.arange(100).reshape((10, 10)))
A:pandas.tests.indexes.test_multi.bar->pandas.DataFrame(np.arange(100).reshape((10, 10)))
A:pandas.tests.indexes.test_multi.dfm->dfm.sort_index().sort_index()
pandas.tests.indexes.test_multi.TestMultiIndex(Base)
pandas.tests.indexes.test_multi.TestMultiIndex.assert_multiindex_copied(self,copy,original)
pandas.tests.indexes.test_multi.TestMultiIndex.check_level_names(self,index,names)
pandas.tests.indexes.test_multi.TestMultiIndex.create_index(self)
pandas.tests.indexes.test_multi.TestMultiIndex.setup_method(self,method)
pandas.tests.indexes.test_multi.TestMultiIndex.take_invalid_kwargs(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_append(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_append_mixed_dtypes(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_argsort(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_astype(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_boolean_context_compat2(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_bounds(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_bytestring_with_unicode(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_changing_names(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_consistency(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_constructor_mismatched_label_levels(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_constructor_no_levels(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_constructor_single_level(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_contains(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_contains_top_level(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_contains_with_nat(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_copy(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_copy_in_constructor(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_copy_names(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_difference(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_dims(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_drop(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_drop_not_lexsorted(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_droplevel_multiple(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_droplevel_with_names(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_dropna(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_duplicate_meta_data(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_duplicate_names(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_duplicates(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_equals_missing_values(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_equals_multi(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_equals_operator(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_format(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_format_integer_names(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_format_sparse_config(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_format_sparse_display(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_from_arrays(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_from_arrays_different_lengths(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_from_arrays_empty(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_from_arrays_index_datetimelike_mixed(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_from_arrays_index_series_categorical(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_from_arrays_index_series_datetimetz(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_from_arrays_index_series_period(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_from_arrays_index_series_timedelta(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_from_arrays_invalid_input(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_from_product(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_from_product_datetimeindex(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_from_product_empty(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_from_product_index_series_categorical(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_from_product_invalid_input(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_from_tuples(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_from_tuples_index_values(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_get_indexer(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_get_indexer_nearest(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_get_level_number_integer(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_get_level_values(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_get_level_values_na(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_get_loc(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_get_loc_duplicates(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_get_loc_level(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_get_unique_index(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_get_value_duplicates(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_getitem(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_getitem_group_select(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_groupby(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_hash_collisions(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_identical(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_index_name_retained(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_inplace_mutation_resets_values(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_insert(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_intersection(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_is_(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_is_all_dates(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_is_monotonic(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_is_numeric(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_isin(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_isin_level_kwarg(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_isin_nan(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_isnull_behavior(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_iter(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_join_level(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_join_multi(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_join_self(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_labels_dtypes(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_large_multiindex_error(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_legacy_pickle(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_legacy_v2_unpickle(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_level_setting_resets_attributes(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_metadata_immutable(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_names(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_nlevels(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_numpy_repeat(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_partial_string_timestamp_multiindex(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_rangeindex_fallback_coercion_bug(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_reconstruct_remove_unused(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_reconstruct_sort(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_reference_duplicate_name(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_reindex(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_reindex_level(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_reindex_lvl_preserves_names_when_target_is_list_or_array(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_reindex_lvl_preserves_type_if_target_is_empty_list_or_array(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_reindex_preserves_names_when_target_is_list_or_ndarray(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_reorder_levels(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_repeat(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_repr_roundtrip(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_repr_with_unicode_data(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_roundtrip_pickle_with_tz(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_set_labels(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_set_levels(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_set_levels_categorical(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_set_levels_labels_names_bad_input(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_set_name_methods(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_set_value_keeps_names(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_shallow_copy(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_slice_keep_name(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_slice_locs(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_slice_locs_not_contained(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_slice_locs_not_sorted(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_slice_locs_partial(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_slice_locs_with_type_mismatch(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_sortlevel(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_sortlevel_deterministic(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_sortlevel_not_sort_remaining(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_str(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_sub(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_take_fill_value(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_take_preserve_name(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_to_frame(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_to_hierarchical(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_tolist(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_truncate(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_tuples_with_name_string(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_unicode_string_with_unicode(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_union(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_unique(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_unique_datetimelike(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_unsortedindex(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_unsortedindex_doc_examples(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_values_boxed(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_view(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_where(self)
pandas.tests.indexes.test_multi.TestMultiIndex.test_where_array_like(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/datetimes/test_astype.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_astype.idx->DatetimeIndex(['2016-05-16', 'NaT', NaT, np.NaN])
A:pandas.tests.indexes.datetimes.test_astype.result->DatetimeIndex(['2016-05-16', 'NaT', NaT, np.NaN], tz='EST').astype('datetime64[ns]')
A:pandas.tests.indexes.datetimes.test_astype.expected->ts[0].to_period()
A:pandas.tests.indexes.datetimes.test_astype.rng->date_range('1/1/2000', periods=20)
A:pandas.tests.indexes.datetimes.test_astype.idx_tz->DatetimeIndex(['2016-05-16', 'NaT', NaT, np.NaN], tz='EST')
A:pandas.tests.indexes.datetimes.test_astype.converted->date_range('1/1/2000', periods=20).to_pydatetime()
A:pandas.tests.indexes.datetimes.test_astype.rng_eastern->date_range('20090415', '20090519', tz='dateutil/US/Eastern')
A:pandas.tests.indexes.datetimes.test_astype.rng_utc->date_range('20090415', '20090519', tz=dateutil.tz.tzutc())
A:pandas.tests.indexes.datetimes.test_astype.self.index->DatetimeIndex(data)
A:pandas.tests.indexes.datetimes.test_astype.period->index.to_period(freq='U')
A:pandas.tests.indexes.datetimes.test_astype.xp->date_range('1/1/2000', '4/1/2000').to_period()
A:pandas.tests.indexes.datetimes.test_astype.ts->date_range('1/1/2000', '4/1/2000', tz=tzlocal())
A:pandas.tests.indexes.datetimes.test_astype.casted->date_range('1/1/2000', periods=20).astype('O')
A:pandas.tests.indexes.datetimes.test_astype.exp_values->list(rng)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex(object)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_astype(self)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_astype_datetime64(self)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_astype_raises(self)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_astype_str(self)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_astype_str_compat(self)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_astype_with_tz(self)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_index_convert_to_datetime_array(self)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_index_convert_to_datetime_array_dateutil(self)
pandas.tests.indexes.datetimes.test_astype.TestDatetimeIndex.test_index_convert_to_datetime_array_explicit_pytz(self)
pandas.tests.indexes.datetimes.test_astype.TestToPeriod(object)
pandas.tests.indexes.datetimes.test_astype.TestToPeriod.setup_method(self,method)
pandas.tests.indexes.datetimes.test_astype.TestToPeriod.test_astype_object(self)
pandas.tests.indexes.datetimes.test_astype.TestToPeriod.test_to_period_microsecond(self)
pandas.tests.indexes.datetimes.test_astype.TestToPeriod.test_to_period_millisecond(self)
pandas.tests.indexes.datetimes.test_astype.TestToPeriod.test_to_period_tz_dateutil(self)
pandas.tests.indexes.datetimes.test_astype.TestToPeriod.test_to_period_tz_explicit_pytz(self)
pandas.tests.indexes.datetimes.test_astype.TestToPeriod.test_to_period_tz_pytz(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/datetimes/test_misc.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_misc.r1->Float64Index([2451601.5, 2451601.500011574, 2451601.500023148, 2451601.500034722, 2451601.5000462965])
A:pandas.tests.indexes.datetimes.test_misc.r2->date_range(start=Timestamp('2000-02-27'), periods=5, freq='S').to_julian_date()
A:pandas.tests.indexes.datetimes.test_misc.rng->date_range('1/1/2000 9:30', periods=10, freq='D')
A:pandas.tests.indexes.datetimes.test_misc.idx->DatetimeIndex(start=Timestamp('1970-01-01'), end=Timestamp('1970-01-04'), freq='D')
A:pandas.tests.indexes.datetimes.test_misc.expected->pandas.DatetimeIndex(np.array([1380585600000000000, 1380585600000000000]).astype('datetime64[ns]'))
A:pandas.tests.indexes.datetimes.test_misc.exp->DatetimeIndex([], freq='D', tz=dti.tz, name='name')
A:pandas.tests.indexes.datetimes.test_misc.dr->date_range(start='1/1/2012', periods=3)
A:pandas.tests.indexes.datetimes.test_misc.result->date_range('1/1/2000 9:30', periods=10, freq='D').normalize()
A:pandas.tests.indexes.datetimes.test_misc.rng_ns->pandas.DatetimeIndex(np.array([1380585623454345752, 1380585612343234312]).astype('datetime64[ns]'))
A:pandas.tests.indexes.datetimes.test_misc.rng_ns_normalized->pandas.DatetimeIndex(np.array([1380585623454345752, 1380585612343234312]).astype('datetime64[ns]')).normalize()
A:pandas.tests.indexes.datetimes.test_misc.dti_naive->DatetimeIndex(freq='D', start=datetime(1998, 1, 1), periods=365)
A:pandas.tests.indexes.datetimes.test_misc.dti_tz->DatetimeIndex(freq='D', start=datetime(1998, 1, 1), periods=365, tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_misc.res->getattr(dti, accessor)
A:pandas.tests.indexes.datetimes.test_misc.dti->DatetimeIndex(np.arange(10))
A:pandas.tests.indexes.datetimes.test_misc.bday_egypt->pandas.offsets.CustomBusinessDay(weekmask='Sun Mon Tue Wed Thu')
A:pandas.tests.indexes.datetimes.test_misc.dates->DatetimeIndex(dates, tz='Europe/Brussels')
pandas.tests.indexes.datetimes.test_misc.TestDateTimeIndexToJulianDate(object)
pandas.tests.indexes.datetimes.test_misc.TestDateTimeIndexToJulianDate.test_1700(self)
pandas.tests.indexes.datetimes.test_misc.TestDateTimeIndexToJulianDate.test_2000(self)
pandas.tests.indexes.datetimes.test_misc.TestDateTimeIndexToJulianDate.test_hour(self)
pandas.tests.indexes.datetimes.test_misc.TestDateTimeIndexToJulianDate.test_minute(self)
pandas.tests.indexes.datetimes.test_misc.TestDateTimeIndexToJulianDate.test_second(self)
pandas.tests.indexes.datetimes.test_misc.TestDatetime64(object)
pandas.tests.indexes.datetimes.test_misc.TestDatetime64.test_datetimeindex_accessors(self)
pandas.tests.indexes.datetimes.test_misc.TestDatetime64.test_nanosecond_field(self)
pandas.tests.indexes.datetimes.test_misc.TestTimeSeries(object)
pandas.tests.indexes.datetimes.test_misc.TestTimeSeries.test_datetimeindex_integers_shift(self)
pandas.tests.indexes.datetimes.test_misc.TestTimeSeries.test_datetimeindex_repr_short(self)
pandas.tests.indexes.datetimes.test_misc.TestTimeSeries.test_normalize(self)
pandas.tests.indexes.datetimes.test_misc.TestTimeSeries.test_pass_datetimeindex_to_index(self)
pandas.tests.indexes.datetimes.test_misc.TestTimeSeries.test_range_edges(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/datetimes/test_ops.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_ops.s->DatetimeIndex([Timestamp('2000-01-05 00:15:00'), Timestamp('2000-01-31 00:23:00'), Timestamp('2000-01-01'), Timestamp('2000-02-29'), Timestamp('2000-12-31')])
A:pandas.tests.indexes.datetimes.test_ops.idx->pandas.DatetimeIndex(['2011-01-01', '2011-01-02', 'NaT'])
A:pandas.tests.indexes.datetimes.test_ops.expected->DatetimeIndex([x + offsets.DateOffset(years=years, months=months) for x in s])
A:pandas.tests.indexes.datetimes.test_ops.idx1->pandas.date_range('2011-01-01', '2011-01-31', freq='D', name='idx')
A:pandas.tests.indexes.datetimes.test_ops.idx2->pandas.DatetimeIndex(['2011-01-01', '2011-01-02', 'NaT'], tz='US/Pacific')
A:pandas.tests.indexes.datetimes.test_ops.obj->DatetimeIndex([pd.NaT, pd.NaT, pd.NaT])
A:pandas.tests.indexes.datetimes.test_ops.dr->pandas.date_range(start='2016-01-15', end='2016-01-20')
A:pandas.tests.indexes.datetimes.test_ops.rng->date_range(START, END, freq=BMonthEnd())
A:pandas.tests.indexes.datetimes.test_ops.expected_rng->DatetimeIndex([Timestamp('2016-01-01 00:00:00', tz=tz, freq='30T'), Timestamp('2016-01-01 00:00:00', tz=tz, freq='30T'), Timestamp('2016-01-01 00:30:00', tz=tz, freq='30T'), Timestamp('2016-01-01 00:30:00', tz=tz, freq='30T')])
A:pandas.tests.indexes.datetimes.test_ops.index->pandas.DatetimeIndex(['2001-01-01', 'NaT', '2003-01-01'], tz=tz)
A:pandas.tests.indexes.datetimes.test_ops.result->pandas.DatetimeIndex(['2011-01-01', '2011-01-02', 'NaT'])._nat_new(box=False)
A:pandas.tests.indexes.datetimes.test_ops.exp->DatetimeIndex(self.rng.view(np.ndarray)[:5])
A:pandas.tests.indexes.datetimes.test_ops.res->Series(idx).drop_duplicates(keep=False)
A:pandas.tests.indexes.datetimes.test_ops.idx3->pandas.DatetimeIndex._simple_new(idx.asi8, tz='US/Pacific')
A:pandas.tests.indexes.datetimes.test_ops.idx4->DatetimeIndex(['2011-01-01', '2011-01-02', '2011-01-03'], freq='D')
A:pandas.tests.indexes.datetimes.test_ops.idx5->DatetimeIndex(['2011-01-01 09:00', '2011-01-01 10:00', '2011-01-01 11:00'], freq='H', tz='Asia/Tokyo')
A:pandas.tests.indexes.datetimes.test_ops.idx6->DatetimeIndex(['2011-01-01 09:00', '2011-01-01 10:00', pd.NaT], tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_ops.idx7->DatetimeIndex(['2011-01-01 09:00', '2011-01-02 10:15'])
A:pandas.tests.indexes.datetimes.test_ops.rng1->pandas.date_range('1/1/2000', freq='D', periods=5, tz=tz)
A:pandas.tests.indexes.datetimes.test_ops.other1->pandas.date_range('1/6/2000', freq='D', periods=5, tz=tz)
A:pandas.tests.indexes.datetimes.test_ops.expected1->pandas.date_range('1/1/2000', freq='D', periods=5, tz=tz)
A:pandas.tests.indexes.datetimes.test_ops.rng2->pandas.date_range('1/1/2000', freq='D', periods=5, tz=tz)
A:pandas.tests.indexes.datetimes.test_ops.other2->pandas.date_range('1/4/2000', freq='D', periods=5, tz=tz)
A:pandas.tests.indexes.datetimes.test_ops.expected2->pandas.date_range('1/1/2000', freq='D', periods=3, tz=tz)
A:pandas.tests.indexes.datetimes.test_ops.rng3->pandas.date_range('1/1/2000', freq='D', periods=5, tz=tz)
A:pandas.tests.indexes.datetimes.test_ops.other3->pandas.DatetimeIndex([], tz=tz)
A:pandas.tests.indexes.datetimes.test_ops.expected3->pandas.date_range('1/1/2000', freq='D', periods=5, tz=tz)
A:pandas.tests.indexes.datetimes.test_ops.result_union->date_range(START, END, freq=BMonthEnd()).union(other)
A:pandas.tests.indexes.datetimes.test_ops.dti->date_range('20130101', periods=3)
A:pandas.tests.indexes.datetimes.test_ops.dti_tz->date_range('20130101', periods=3).tz_localize('US/Eastern')
A:pandas.tests.indexes.datetimes.test_ops.result_diff->date_range(START, END, freq=BMonthEnd()).difference(other)
A:pandas.tests.indexes.datetimes.test_ops.dti_tz2->date_range('20130101', periods=3).tz_localize('UTC')
A:pandas.tests.indexes.datetimes.test_ops.dti1->DatetimeIndex(['2012-01-01', np.nan, '2012-01-03'])
A:pandas.tests.indexes.datetimes.test_ops.dti2->DatetimeIndex(['2012-01-02', '2012-01-03', np.nan])
A:pandas.tests.indexes.datetimes.test_ops.p->pandas.Period('2011-01-01', freq='D')
A:pandas.tests.indexes.datetimes.test_ops.left->pandas.DatetimeIndex([pd.Timestamp('2011-01-01'), pd.NaT, pd.Timestamp('2011-01-03')])
A:pandas.tests.indexes.datetimes.test_ops.right->pandas.DatetimeIndex([pd.NaT, pd.NaT, pd.Timestamp('2011-01-03')])
A:pandas.tests.indexes.datetimes.test_ops.exp_idx->DatetimeIndex(['2013-01-01 09:00', '2013-01-01 08:00', pd.NaT], tz=tz)
A:pandas.tests.indexes.datetimes.test_ops.ordered->pandas.DatetimeIndex(['2011-01-01', '2011-01-02', 'NaT']).sort_values(ascending=False)
A:pandas.tests.indexes.datetimes.test_ops.(ordered, indexer)->pandas.DatetimeIndex(['2011-01-01', '2011-01-02', 'NaT']).sort_values(return_indexer=True, ascending=False)
A:pandas.tests.indexes.datetimes.test_ops.exp1->DatetimeIndex(['2011-01-01', '2011-01-01', '2011-01-02', '2011-01-03', '2011-01-05'], tz=tz, name='idx1')
A:pandas.tests.indexes.datetimes.test_ops.exp2->DatetimeIndex(['2011-01-01', '2011-01-01', '2011-01-02', '2011-01-03', '2011-01-05'], tz=tz, name='idx2')
A:pandas.tests.indexes.datetimes.test_ops.exp3->DatetimeIndex([pd.NaT, pd.NaT, '2011-01-02', '2011-01-03', '2011-01-05'], tz=tz, name='idx3')
A:pandas.tests.indexes.datetimes.test_ops.idx_dup->pandas.DatetimeIndex(['2011-01-01', '2011-01-02', 'NaT']).append(idx)
A:pandas.tests.indexes.datetimes.test_ops.base->pandas.date_range('2011-01-01', '2011-01-31', freq='D', name='idx')
A:pandas.tests.indexes.datetimes.test_ops.r1->Float64Index([2451601.5, 2451601.500011574, 2451601.500023148, 2451601.500034722, 2451601.5000462965])
A:pandas.tests.indexes.datetimes.test_ops.r2->date_range(start=Timestamp('2000-02-27'), periods=5, freq='S').to_julian_date()
A:pandas.tests.indexes.datetimes.test_ops.op->getattr(pd.offsets, do)(n, normalize=normalize, **kwargs)
A:pandas.tests.indexes.datetimes.test_ops.actual->DatetimeIndex(tslib.shift_months(s.asi8, years * 12 + months))
A:pandas.tests.indexes.datetimes.test_ops.self.rng->cdate_range(START, END)
A:pandas.tests.indexes.datetimes.test_ops.unpickled->pandas.util.testing.round_trip_pickle(self.rng)
A:pandas.tests.indexes.datetimes.test_ops.cp->self.rng.copy()
A:pandas.tests.indexes.datetimes.test_ops.shifted->date_range(START, END, freq=BMonthEnd()).shift(1, freq=CDay())
A:pandas.tests.indexes.datetimes.test_ops.t1->t1.rename('foo').rename('foo')
A:pandas.tests.indexes.datetimes.test_ops.t2->t2.rename('foo').rename('foo')
A:pandas.tests.indexes.datetimes.test_ops.t2v->Index(t2.values)
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex(object)
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex.setup_method(self,method)
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex.test_comparison(self)
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex.test_copy(self)
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex.test_equals(self)
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex.test_getitem(self)
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex.test_getitem_matplotlib_hackaround(self)
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex.test_identical(self)
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex.test_pickle_unpickle(self)
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex.test_repr(self)
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex.test_shift(self)
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex.test_summary(self)
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex.test_summary_dateutil(self)
pandas.tests.indexes.datetimes.test_ops.TestBusinessDatetimeIndex.test_summary_pytz(self)
pandas.tests.indexes.datetimes.test_ops.TestCustomDatetimeIndex(object)
pandas.tests.indexes.datetimes.test_ops.TestCustomDatetimeIndex.setup_method(self,method)
pandas.tests.indexes.datetimes.test_ops.TestCustomDatetimeIndex.test_comparison(self)
pandas.tests.indexes.datetimes.test_ops.TestCustomDatetimeIndex.test_copy(self)
pandas.tests.indexes.datetimes.test_ops.TestCustomDatetimeIndex.test_equals(self)
pandas.tests.indexes.datetimes.test_ops.TestCustomDatetimeIndex.test_getitem(self)
pandas.tests.indexes.datetimes.test_ops.TestCustomDatetimeIndex.test_getitem_matplotlib_hackaround(self)
pandas.tests.indexes.datetimes.test_ops.TestCustomDatetimeIndex.test_pickle_unpickle(self)
pandas.tests.indexes.datetimes.test_ops.TestCustomDatetimeIndex.test_repr(self)
pandas.tests.indexes.datetimes.test_ops.TestCustomDatetimeIndex.test_shift(self)
pandas.tests.indexes.datetimes.test_ops.TestCustomDatetimeIndex.test_summary(self)
pandas.tests.indexes.datetimes.test_ops.TestCustomDatetimeIndex.test_summary_dateutil(self)
pandas.tests.indexes.datetimes.test_ops.TestCustomDatetimeIndex.test_summary_pytz(self)
pandas.tests.indexes.datetimes.test_ops.TestDateTimeIndexToJulianDate(object)
pandas.tests.indexes.datetimes.test_ops.TestDateTimeIndexToJulianDate.test_1700(self)
pandas.tests.indexes.datetimes.test_ops.TestDateTimeIndexToJulianDate.test_2000(self)
pandas.tests.indexes.datetimes.test_ops.TestDateTimeIndexToJulianDate.test_hour(self)
pandas.tests.indexes.datetimes.test_ops.TestDateTimeIndexToJulianDate.test_minute(self)
pandas.tests.indexes.datetimes.test_ops.TestDateTimeIndexToJulianDate.test_second(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps(Ops)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.setup_method(self,method)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_add_dti_dti(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_add_iadd(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_asobject_tolist(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_comp_nat(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_difference(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_drop_duplicates(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_drop_duplicates_metadata(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_equals(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_getitem(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_infer_freq(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_minmax(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_nat(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_nat_new(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_nonunique_contains(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_numpy_minmax(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_ops_properties(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_ops_properties_basic(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_order(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_repeat(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_repeat_range(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_representation(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_representation_to_series(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_resolution(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_round(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_shift(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_sub_dti_dti(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_sub_isub(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_sub_period(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_summary(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_take(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_take_invalid_kwargs(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_union(self)
pandas.tests.indexes.datetimes.test_ops.TestDatetimeIndexOps.test_value_counts_unique(self)
pandas.tests.indexes.datetimes.test_ops.test_datetime64_with_DateOffset(klass,assert_func)
pandas.tests.indexes.datetimes.test_ops.test_shift_months(years,months)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/datetimes/test_setops.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_setops.i1->Int64Index(np.arange(0, 20, 2))
A:pandas.tests.indexes.datetimes.test_setops.i2->DatetimeIndex(start='2012-01-03 00:00:00', periods=10, freq='D')
A:pandas.tests.indexes.datetimes.test_setops.result->cdate_range('11/30/2011', '12/31/2011').intersection(b)
A:pandas.tests.indexes.datetimes.test_setops.expected->DatetimeIndex([])
A:pandas.tests.indexes.datetimes.test_setops.idx->DatetimeIndex(['2000-01-03', '2000-01-01', '2000-01-02'])
A:pandas.tests.indexes.datetimes.test_setops.ordered->DatetimeIndex(idx.sort_values(), freq='infer')
A:pandas.tests.indexes.datetimes.test_setops.rng_a->date_range('1/1/2012', periods=4, freq='3H')
A:pandas.tests.indexes.datetimes.test_setops.rng_b->date_range('1/1/2012', periods=4, freq='4H')
A:pandas.tests.indexes.datetimes.test_setops.exp->pandas.date_range('1/1/1980', '1/1/2012', freq='MS')
A:pandas.tests.indexes.datetimes.test_setops.left->date_range('2013-01-01', '2013-02-01')
A:pandas.tests.indexes.datetimes.test_setops.right->DatetimeIndex(['2012-05-29 13:04:21.322000', '2012-05-11 15:27:24.873000', '2012-05-11 15:31:05.350000'])
A:pandas.tests.indexes.datetimes.test_setops.rng1->date_range('1/1/1999', '1/1/2012', freq='MS')
A:pandas.tests.indexes.datetimes.test_setops.s1->Series(np.random.randn(len(rng1)), rng1)
A:pandas.tests.indexes.datetimes.test_setops.rng2->DatetimeIndex(['2011-01-04', '2011-01-02', '2011-02-02', '2011-02-03'], tz=tz, name='idx')
A:pandas.tests.indexes.datetimes.test_setops.s2->Series(np.random.randn(len(rng2)), rng2)
A:pandas.tests.indexes.datetimes.test_setops.df->DataFrame({'s1': s1, 's2': s2})
A:pandas.tests.indexes.datetimes.test_setops.base->DatetimeIndex(['2011-01-05', '2011-01-04', '2011-01-02', '2011-01-03'], tz=tz, name='idx')
A:pandas.tests.indexes.datetimes.test_setops.expected2->DatetimeIndex(['2011-01-04', '2011-01-02'], tz=tz, name='idx')
A:pandas.tests.indexes.datetimes.test_setops.rng3->DatetimeIndex(['2011-01-04', '2011-01-02', '2011-02-02', '2011-02-03'], tz=tz, name='other')
A:pandas.tests.indexes.datetimes.test_setops.expected3->DatetimeIndex(['2011-01-04', '2011-01-02'], tz=tz, name=None)
A:pandas.tests.indexes.datetimes.test_setops.rng4->date_range('7/1/2000', '7/31/2000', freq='D', tz=tz, name='idx')
A:pandas.tests.indexes.datetimes.test_setops.expected4->DatetimeIndex([], tz=tz, name='idx')
A:pandas.tests.indexes.datetimes.test_setops.rng->date_range(START, END, freq=BMonthEnd())
A:pandas.tests.indexes.datetimes.test_setops.index_1->date_range('1/1/2012', periods=4, freq='12H')
A:pandas.tests.indexes.datetimes.test_setops.index->date_range('20160920', '20160925', freq='D')
A:pandas.tests.indexes.datetimes.test_setops.other->date_range('20160922', '20160925', freq='D')
A:pandas.tests.indexes.datetimes.test_setops.idx_diff->date_range('20160920', '20160925', freq='D').difference(other)
A:pandas.tests.indexes.datetimes.test_setops.dti1->DatetimeIndex(freq='Q-JAN', start=datetime(1997, 12, 31), periods=100)
A:pandas.tests.indexes.datetimes.test_setops.dti2->DatetimeIndex(freq='Q-JAN', start=datetime(1997, 12, 31), periods=98)
A:pandas.tests.indexes.datetimes.test_setops.dti->DatetimeIndex(start='1/1/2001', end='2/1/2001', freq='D')
A:pandas.tests.indexes.datetimes.test_setops.empty->Index([])
A:pandas.tests.indexes.datetimes.test_setops.idx1->to_datetime(['2012-11-06 16:00:11.477563', '2012-11-06 16:00:11.477563'])
A:pandas.tests.indexes.datetimes.test_setops.idx2->to_datetime(['2012-11-06 15:11:09.006507', '2012-11-06 15:11:09.006507'])
A:pandas.tests.indexes.datetimes.test_setops.rs->to_datetime(['2012-11-06 16:00:11.477563', '2012-11-06 16:00:11.477563']).join(idx2, how='outer')
A:pandas.tests.indexes.datetimes.test_setops.self.rng->cdate_range(START, END)
A:pandas.tests.indexes.datetimes.test_setops.the_union->self.rng.union(rng)
A:pandas.tests.indexes.datetimes.test_setops.the_join->self.rng.join(rng, how='outer')
A:pandas.tests.indexes.datetimes.test_setops.the_int->rng[:10].intersection(rng[10:])
A:pandas.tests.indexes.datetimes.test_setops.a->cdate_range('11/30/2011', '12/31/2011')
A:pandas.tests.indexes.datetimes.test_setops.b->cdate_range('12/10/2011', '12/20/2011')
A:pandas.tests.indexes.datetimes.test_setops.tz->timezone('US/Eastern')
A:pandas.tests.indexes.datetimes.test_setops.early_start->datetime(2011, 1, 1)
A:pandas.tests.indexes.datetimes.test_setops.early_end->datetime(2011, 3, 1)
A:pandas.tests.indexes.datetimes.test_setops.late_start->datetime(2011, 3, 1)
A:pandas.tests.indexes.datetimes.test_setops.late_end->datetime(2011, 5, 1)
A:pandas.tests.indexes.datetimes.test_setops.early_dr->date_range(start=early_start, end=early_end, tz=tz, freq=MonthEnd())
A:pandas.tests.indexes.datetimes.test_setops.late_dr->date_range(start=late_start, end=late_end, tz=tz, freq=MonthEnd())
pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex(object)
pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.setup_method(self,method)
pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_intersection(self)
pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_intersection_bug(self)
pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_month_range_union_tz_dateutil(self)
pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_month_range_union_tz_pytz(self)
pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_outer_join(self)
pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_union(self)
pandas.tests.indexes.datetimes.test_setops.TestBusinessDatetimeIndex.test_union_not_cacheable(self)
pandas.tests.indexes.datetimes.test_setops.TestCustomDatetimeIndex(object)
pandas.tests.indexes.datetimes.test_setops.TestCustomDatetimeIndex.setup_method(self,method)
pandas.tests.indexes.datetimes.test_setops.TestCustomDatetimeIndex.test_intersection_bug(self)
pandas.tests.indexes.datetimes.test_setops.TestCustomDatetimeIndex.test_outer_join(self)
pandas.tests.indexes.datetimes.test_setops.TestCustomDatetimeIndex.test_union(self)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndex(object)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndex.test_datetimeindex_diff(self)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndex.test_datetimeindex_union_join_empty(self)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndex.test_difference_freq(self)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndex.test_intersection(self)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndex.test_intersection_bug_1708(self)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndex.test_join_nonunique(self)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndex.test_union(self)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndex.test_union_bug_1730(self)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndex.test_union_bug_1745(self)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndex.test_union_bug_4564(self)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndex.test_union_coverage(self)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndex.test_union_dataframe_index(self)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndex.test_union_freq_both_none(self)
pandas.tests.indexes.datetimes.test_setops.TestDatetimeIndex.test_union_with_DatetimeIndex(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/datetimes/test_partial_slicing.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_partial_slicing.dti->DatetimeIndex(freq='D', start=datetime(2005, 1, 1), periods=500)
A:pandas.tests.indexes.datetimes.test_partial_slicing.s->pandas.Series(np.arange(10), pd.date_range('2014-01-01', periods=10))
A:pandas.tests.indexes.datetimes.test_partial_slicing.df->pandas.DataFrame(columns=['1'], index=pd.date_range('2016-10-01T00:00:00', '2016-10-01T23:59:59'))
A:pandas.tests.indexes.datetimes.test_partial_slicing.rng->DatetimeIndex(start=datetime(2005, 1, 1, 0, 0, 59, microsecond=999990), periods=20, freq='US')
A:pandas.tests.indexes.datetimes.test_partial_slicing.result->DatetimeIndex(start=datetime(2005, 1, 1, 0, 0, 59, microsecond=999990), periods=20, freq='US').get_loc('2009')
A:pandas.tests.indexes.datetimes.test_partial_slicing.expected->pandas.DataFrame(s).xs('2000-1-4')
A:pandas.tests.indexes.datetimes.test_partial_slicing.unit->Timedelta('1 ' + resolution)
A:pandas.tests.indexes.datetimes.test_partial_slicing.middate->datetime(2012, 1, 1, 0, 0, 0)
A:pandas.tests.indexes.datetimes.test_partial_slicing.index->DatetimeIndex([middate - unit, middate, middate + unit])
A:pandas.tests.indexes.datetimes.test_partial_slicing.ts_string->ts.strftime(fmt)
A:pandas.tests.indexes.datetimes.test_partial_slicing.df_multi->pandas.DataFrame(columns=['1'], index=pd.date_range('2016-10-01T00:00:00', '2016-10-01T23:59:59')).set_index(['ACCOUNT', 'TICKER'], append=True)
A:pandas.tests.indexes.datetimes.test_partial_slicing.s2->s[:-1].copy()
A:pandas.tests.indexes.datetimes.test_partial_slicing.df2->pandas.DataFrame(s)
A:pandas.tests.indexes.datetimes.test_partial_slicing.timestamp->pandas.Timestamp('2014-01-10')
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing(object)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_loc_datetime_length_one(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_partial_slice(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_partial_slice_daily(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_partial_slice_doesnt_require_monotonicity(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_partial_slice_hourly(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_partial_slice_minutely(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_partial_slice_second_precision(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_partial_slicing_dataframe(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_partial_slicing_with_multiindex(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_slice_month(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_slice_quarter(self)
pandas.tests.indexes.datetimes.test_partial_slicing.TestSlicing.test_slice_year(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/datetimes/test_construction.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_construction.df->pandas.DataFrame({'dt': pd.date_range('20130101', periods=3), 'dttz': pd.date_range('20130101', periods=3, tz='US/Eastern'), 'dt_with_null': [pd.Timestamp('20130101'), pd.NaT, pd.Timestamp('20130103')], 'dtns': pd.date_range('20130101', periods=3, freq='ns')})
A:pandas.tests.indexes.datetimes.test_construction.i->pandas.date_range('20130101', periods=5, freq='H', tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_construction.i2->DatetimeIndex(i.tz_localize(None).asi8, tz='UTC')
A:pandas.tests.indexes.datetimes.test_construction.expected->DatetimeIndex(['2013-01-01', '2013-01-02']).tz_localize('US/Eastern')
A:pandas.tests.indexes.datetimes.test_construction.result->DatetimeIndex(idx, dtype='datetime64[ns, US/Eastern]')
A:pandas.tests.indexes.datetimes.test_construction.exp->DatetimeIndex(['1970-01-01 00:00:00.00000000', '1970-01-01 00:00:00.00000001', '1970-01-01 00:00:00.00000002'])
A:pandas.tests.indexes.datetimes.test_construction.rng->DatetimeIndex(['1-1-2000 00:00:01'])
A:pandas.tests.indexes.datetimes.test_construction.strings->numpy.array(['2000-01-01', '2000-01-02', 'NaT'])
A:pandas.tests.indexes.datetimes.test_construction.from_ints->DatetimeIndex(expected.asi8)
A:pandas.tests.indexes.datetimes.test_construction.idx->DatetimeIndex(end=edate, freq=('D', 5), periods=20)
A:pandas.tests.indexes.datetimes.test_construction.expected_i8->date_range('2013-01-01T00:00:00', '2016-01-01T23:59:59', freq=freq, tz='Asia/Tokyo')
A:pandas.tests.indexes.datetimes.test_construction.t1->Timestamp(1352934390 * 1000000000 + 1000000 + 1000 + 1)
A:pandas.tests.indexes.datetimes.test_construction.rng2->date_range('2014', '2015', freq='MS', tz=tz)
A:pandas.tests.indexes.datetimes.test_construction.rng1->date_range('2014', '2015', freq='M', tz=tz)
A:pandas.tests.indexes.datetimes.test_construction.expected1->date_range('2014-01-31', '2014-12-31', freq='M', tz=tz)
A:pandas.tests.indexes.datetimes.test_construction.expected2->date_range('2014-01-01', '2015-01-01', freq='MS', tz=tz)
A:pandas.tests.indexes.datetimes.test_construction.rng3->date_range('2014', '2020', freq='A', tz=tz)
A:pandas.tests.indexes.datetimes.test_construction.expected3->date_range('2014-12-31', '2019-12-31', freq='A', tz=tz)
A:pandas.tests.indexes.datetimes.test_construction.rng4->date_range('2014', '2020', freq='AS', tz=tz)
A:pandas.tests.indexes.datetimes.test_construction.expected4->date_range('2014-01-01', '2020-01-01', freq='AS', tz=tz)
A:pandas.tests.indexes.datetimes.test_construction.arr->to_datetime(['1/1/2005', '1/2/2005', 'Jan 3, 2005', '2005-01-04'])
A:pandas.tests.indexes.datetimes.test_construction.dti->DatetimeIndex(start='1/1/2005', end='12/1/2005', freq='M')
A:pandas.tests.indexes.datetimes.test_construction.index->DatetimeIndex(arr, copy=True)
A:pandas.tests.indexes.datetimes.test_construction.org->DatetimeIndex(start='2001/02/01 09:00', freq=f, tz='US/Pacific', periods=1)
A:pandas.tests.indexes.datetimes.test_construction.idx1->DatetimeIndex(start=sdate, end=edate, freq='BQ')
A:pandas.tests.indexes.datetimes.test_construction.idx2->DatetimeIndex(start=sdate, end=edate, freq=offsets.BQuarterEnd(startingMonth=12))
A:pandas.tests.indexes.datetimes.test_construction.idx3->DatetimeIndex(arr)
A:pandas.tests.indexes.datetimes.test_construction.idx4->DatetimeIndex(arr)
A:pandas.tests.indexes.datetimes.test_construction.idx5->DatetimeIndex(arr)
A:pandas.tests.indexes.datetimes.test_construction.idx6->DatetimeIndex(arr)
A:pandas.tests.indexes.datetimes.test_construction.idx7->DatetimeIndex(['12/05/2007', '25/01/2008'], dayfirst=True)
A:pandas.tests.indexes.datetimes.test_construction.idx8->DatetimeIndex(['2007/05/12', '2008/01/25'], dayfirst=False, yearfirst=True)
A:pandas.tests.indexes.datetimes.test_construction.sdate->datetime(1999, 12, 25)
A:pandas.tests.indexes.datetimes.test_construction.edate->datetime(2000, 1, 1)
pandas.tests.indexes.datetimes.test_construction.TestDatetimeIndex(object)
pandas.tests.indexes.datetimes.test_construction.TestDatetimeIndex.test_000constructor_resolution(self)
pandas.tests.indexes.datetimes.test_construction.TestDatetimeIndex.test_construction_base_constructor(self)
pandas.tests.indexes.datetimes.test_construction.TestDatetimeIndex.test_construction_caching(self)
pandas.tests.indexes.datetimes.test_construction.TestDatetimeIndex.test_construction_dti_with_mixed_timezones(self)
pandas.tests.indexes.datetimes.test_construction.TestDatetimeIndex.test_construction_index_with_mixed_timezones(self)
pandas.tests.indexes.datetimes.test_construction.TestDatetimeIndex.test_construction_index_with_mixed_timezones_with_NaT(self)
pandas.tests.indexes.datetimes.test_construction.TestDatetimeIndex.test_construction_outofbounds(self)
pandas.tests.indexes.datetimes.test_construction.TestDatetimeIndex.test_construction_with_alt(self)
pandas.tests.indexes.datetimes.test_construction.TestDatetimeIndex.test_construction_with_ndarray(self)
pandas.tests.indexes.datetimes.test_construction.TestDatetimeIndex.test_constructor_coverage(self)
pandas.tests.indexes.datetimes.test_construction.TestDatetimeIndex.test_constructor_datetime64_tzformat(self)
pandas.tests.indexes.datetimes.test_construction.TestDatetimeIndex.test_constructor_dtype(self)
pandas.tests.indexes.datetimes.test_construction.TestDatetimeIndex.test_constructor_name(self)
pandas.tests.indexes.datetimes.test_construction.TestTimeSeries(object)
pandas.tests.indexes.datetimes.test_construction.TestTimeSeries.test_constructor_int64_nocopy(self)
pandas.tests.indexes.datetimes.test_construction.TestTimeSeries.test_ctor_str_intraday(self)
pandas.tests.indexes.datetimes.test_construction.TestTimeSeries.test_datetimeindex_constructor_misc(self)
pandas.tests.indexes.datetimes.test_construction.TestTimeSeries.test_dti_constructor_preserve_dti_freq(self)
pandas.tests.indexes.datetimes.test_construction.TestTimeSeries.test_dti_constructor_small_int(self)
pandas.tests.indexes.datetimes.test_construction.TestTimeSeries.test_dti_constructor_years_only(self)
pandas.tests.indexes.datetimes.test_construction.TestTimeSeries.test_from_freq_recreate_from_data(self)
pandas.tests.indexes.datetimes.test_construction.TestTimeSeries.test_index_cast_datetime64_other_units(self)
pandas.tests.indexes.datetimes.test_construction.TestTimeSeries.test_is_(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/datetimes/test_missing.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_missing.idx->pandas.DatetimeIndex(['2011-01-01 09:00', pd.NaT, '2011-01-01 11:00'], tz=tz)
A:pandas.tests.indexes.datetimes.test_missing.exp->pandas.Index([pd.Timestamp('2011-01-01 09:00', tz=tz), 'x', pd.Timestamp('2011-01-01 11:00', tz=tz)], dtype=object)
pandas.tests.indexes.datetimes.test_missing.TestDatetimeIndex(object)
pandas.tests.indexes.datetimes.test_missing.TestDatetimeIndex.test_fillna_datetime64(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/datetimes/test_tools.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_tools.result->pandas.to_datetime(300 * 365, unit='D', origin='1870-01-01')
A:pandas.tests.indexes.datetimes.test_tools.s->pandas.Series(['2014-1-1', '2014-2-2', '2015-3-3'])
A:pandas.tests.indexes.datetimes.test_tools.expected->Timestamp('2169-10-20 00:00:00')
A:pandas.tests.indexes.datetimes.test_tools.(lang, _)->locale.getlocale()
A:pandas.tests.indexes.datetimes.test_tools.val->'01-{}-2011 00:00:01.978'.format(month_abbr)
A:pandas.tests.indexes.datetimes.test_tools.exp->DatetimeIndex([pd.Timestamp(expected)])
A:pandas.tests.indexes.datetimes.test_tools.us_eastern->pytz.timezone('US/Eastern')
A:pandas.tests.indexes.datetimes.test_tools.arr->numpy.array(['01-01-2013', 'not_a_date', '1'], dtype=object)
A:pandas.tests.indexes.datetimes.test_tools.start->pandas.Timestamp('2014-01-01', tz='utc')
A:pandas.tests.indexes.datetimes.test_tools.end->pandas.Timestamp('2014-01-03', tz='utc')
A:pandas.tests.indexes.datetimes.test_tools.date_range->pandas.bdate_range(start, end)
A:pandas.tests.indexes.datetimes.test_tools.tz1->psycopg2.tz.FixedOffsetTimezone(offset=-300, name=None)
A:pandas.tests.indexes.datetimes.test_tools.tz2->psycopg2.tz.FixedOffsetTimezone(offset=-240, name=None)
A:pandas.tests.indexes.datetimes.test_tools.i->pandas.DatetimeIndex(['2000-01-01 08:00:00+00:00'], tz=psycopg2.tz.FixedOffsetTimezone(offset=-300, name=None))
A:pandas.tests.indexes.datetimes.test_tools.arr2->numpy.array(arr1).astype('int64')
A:pandas.tests.indexes.datetimes.test_tools.df->DataFrame({'year': [2000, 2001], 'month': [1.5, 1], 'day': [1, 1]})
A:pandas.tests.indexes.datetimes.test_tools.df2->DataFrame({'year': [2015, 2016], 'month': [2, 20], 'day': [4, 5], 'hour': [4, 5]})
A:pandas.tests.indexes.datetimes.test_tools.expected2->Series([Timestamp('20150204 00:00:00'), Timestamp('20160205 00:0:00')])
A:pandas.tests.indexes.datetimes.test_tools.df['month']->df['month'].astype('int8').astype('int8')
A:pandas.tests.indexes.datetimes.test_tools.df['day']->df['day'].astype('int8').astype('int8')
A:pandas.tests.indexes.datetimes.test_tools.idx->Index([today], dtype=object)
A:pandas.tests.indexes.datetimes.test_tools.today->datetime.datetime.today()
A:pandas.tests.indexes.datetimes.test_tools.rs->bdate_range('2000-1-1', periods=10, tz='UTC').to_datetime()
A:pandas.tests.indexes.datetimes.test_tools.xp->bdate_range('2000-1-1', periods=10, tz='UTC')
A:pandas.tests.indexes.datetimes.test_tools.result_coerce->to_datetime(s, errors='coerce')
A:pandas.tests.indexes.datetimes.test_tools.expected_coerce->Series([datetime(2006, 10, 18), datetime(2008, 10, 18), NaT])
A:pandas.tests.indexes.datetimes.test_tools.result_ignore->to_datetime(s, errors='ignore')
A:pandas.tests.indexes.datetimes.test_tools.td->pandas.Series(['May 04', 'Jun 02', ''], index=[1, 2, 3])
A:pandas.tests.indexes.datetimes.test_tools.scalar->numpy.int64(1337904000000000).view('M8[us]')
A:pandas.tests.indexes.datetimes.test_tools.as_obj->numpy.int64(1337904000000000).view('M8[us]').astype('O')
A:pandas.tests.indexes.datetimes.test_tools.index->DatetimeIndex([scalar])
A:pandas.tests.indexes.datetimes.test_tools.value->datetime(2012, 9, 7, 12)
A:pandas.tests.indexes.datetimes.test_tools.rng->DatetimeIndex(rng.values)
A:pandas.tests.indexes.datetimes.test_tools.ints->list(rng.asi8)
A:pandas.tests.indexes.datetimes.test_tools.strings->numpy.array(['1/1/2000', '1/2/2000', np.nan, '1/4/2000, 12:34:56'], dtype=object)
A:pandas.tests.indexes.datetimes.test_tools.expected[i]->to_datetime(x)
A:pandas.tests.indexes.datetimes.test_tools.result2->to_datetime(date_str)
A:pandas.tests.indexes.datetimes.test_tools.malformed->numpy.array(['1/100/2000', np.nan], dtype=object)
A:pandas.tests.indexes.datetimes.test_tools.series->Series(['1/1/2000', np.nan, '1/3/2000', np.nan, '1/5/2000'], index=idx, name='foo')
A:pandas.tests.indexes.datetimes.test_tools.dseries->Series([to_datetime('1/1/2000'), np.nan, to_datetime('1/3/2000'), np.nan, to_datetime('1/5/2000')], index=idx, name='foo')
A:pandas.tests.indexes.datetimes.test_tools.dresult->to_datetime(dseries)
A:pandas.tests.indexes.datetimes.test_tools.base->to_datetime('2013-01-01 00:00:00')
A:pandas.tests.indexes.datetimes.test_tools.values->to_datetime('2013-01-01 00:00:00').values.astype(dtype)
A:pandas.tests.indexes.datetimes.test_tools.idx1->DatetimeIndex(arr, dayfirst=True)
A:pandas.tests.indexes.datetimes.test_tools.idx2->DatetimeIndex(np.array(arr), dayfirst=True)
A:pandas.tests.indexes.datetimes.test_tools.idx3->to_datetime(arr, dayfirst=True)
A:pandas.tests.indexes.datetimes.test_tools.idx4->to_datetime(np.array(arr), dayfirst=True)
A:pandas.tests.indexes.datetimes.test_tools.idx5->DatetimeIndex(Index(arr), dayfirst=True)
A:pandas.tests.indexes.datetimes.test_tools.idx6->DatetimeIndex(Series(arr), dayfirst=True)
A:pandas.tests.indexes.datetimes.test_tools.dt_string->datetime(2011, 12, 30, 0, 0, 0).strftime(expected_format)
A:pandas.tests.indexes.datetimes.test_tools.format_for_string_of_nans->pandas.core.tools.datetimes._guess_datetime_format_for_array(np.array([np.nan, np.nan, np.nan], dtype='O'))
A:pandas.tests.indexes.datetimes.test_tools.s_as_dt_strings->pandas.Series(['2014-1-1', '2014-2-2', '2015-3-3']).apply(lambda x: x.strftime(test_format))
A:pandas.tests.indexes.datetimes.test_tools.with_format->pandas.to_datetime(s_as_dt_strings, format=test_format)
A:pandas.tests.indexes.datetimes.test_tools.no_infer->pandas.to_datetime(s_as_dt_strings, infer_datetime_format=False)
A:pandas.tests.indexes.datetimes.test_tools.yes_infer->pandas.to_datetime(s_as_dt_strings, infer_datetime_format=True)
A:pandas.tests.indexes.datetimes.test_tools.(result1, _, _)->pandas.core.tools.datetimes.parse_time_string(date_str, freq='M')
A:pandas.tests.indexes.datetimes.test_tools.result3->to_datetime([date_str])
A:pandas.tests.indexes.datetimes.test_tools.result4->Timestamp(date_str)
A:pandas.tests.indexes.datetimes.test_tools.result6->DatetimeIndex([date_str], yearfirst=yearfirst)
A:pandas.tests.indexes.datetimes.test_tools.result8->DatetimeIndex(Index([date_str]), yearfirst=yearfirst)
A:pandas.tests.indexes.datetimes.test_tools.result9->DatetimeIndex(Series([date_str]), yearfirst=yearfirst)
A:pandas.tests.indexes.datetimes.test_tools.result5->Timestamp(date_str)
A:pandas.tests.indexes.datetimes.test_tools.result7->date_range(date_str, freq='S', periods=1, yearfirst=yearfirst)
A:pandas.tests.indexes.datetimes.test_tools.dateutil_result->parse(date_str, dayfirst=dayfirst, yearfirst=yearfirst)
A:pandas.tests.indexes.datetimes.test_tools.res->pandas.core.tools.datetimes.to_time(np.array(arg))
A:pandas.tests.indexes.datetimes.test_tools.(result, _, _)->pandas.core.tools.datetimes.parse_time_string(date_str, freq=freq)
A:pandas.tests.indexes.datetimes.test_tools.dt_time->to_datetime(dt_string)
A:pandas.tests.indexes.datetimes.test_tools.converted_time->to_datetime(dt_string).tz_localize('UTC').tz_convert(tz)
A:pandas.tests.indexes.datetimes.test_tools.actual->pandas._libs.tslib._test_parse_iso8601(date_str)
A:pandas.tests.indexes.datetimes.test_tools.expected_output->pandas._libs.tslib.array_to_datetime(np.array(['01-01-2013 00:00:00'], dtype=object))
pandas.tests.indexes.datetimes.test_tools.TestArrayToDatetime(object)
pandas.tests.indexes.datetimes.test_tools.TestArrayToDatetime.test_coerce_of_invalid_datetimes(self)
pandas.tests.indexes.datetimes.test_tools.TestArrayToDatetime.test_coercing_dates_outside_of_datetime64_ns_bounds(self)
pandas.tests.indexes.datetimes.test_tools.TestArrayToDatetime.test_number_looking_strings_not_into_datetime(self)
pandas.tests.indexes.datetimes.test_tools.TestArrayToDatetime.test_parsing_timezone_offsets(self)
pandas.tests.indexes.datetimes.test_tools.TestArrayToDatetime.test_parsing_valid_dates(self)
pandas.tests.indexes.datetimes.test_tools.TestArrayToDatetime.test_try_parse_dates(self)
pandas.tests.indexes.datetimes.test_tools.TestDatetimeParsingWrappers(object)
pandas.tests.indexes.datetimes.test_tools.TestDatetimeParsingWrappers.test_does_not_convert_mixed_integer(self)
pandas.tests.indexes.datetimes.test_tools.TestDatetimeParsingWrappers.test_parsers(self)
pandas.tests.indexes.datetimes.test_tools.TestDatetimeParsingWrappers.test_parsers_dayfirst_yearfirst(self)
pandas.tests.indexes.datetimes.test_tools.TestDatetimeParsingWrappers.test_parsers_iso8601(self)
pandas.tests.indexes.datetimes.test_tools.TestDatetimeParsingWrappers.test_parsers_monthfreq(self)
pandas.tests.indexes.datetimes.test_tools.TestDatetimeParsingWrappers.test_parsers_quarter_invalid(self)
pandas.tests.indexes.datetimes.test_tools.TestDatetimeParsingWrappers.test_parsers_quarterly_with_freq(self)
pandas.tests.indexes.datetimes.test_tools.TestDatetimeParsingWrappers.test_parsers_time(self)
pandas.tests.indexes.datetimes.test_tools.TestDatetimeParsingWrappers.test_parsers_timestring(self)
pandas.tests.indexes.datetimes.test_tools.TestDatetimeParsingWrappers.test_parsers_timezone_minute_offsets_roundtrip(self)
pandas.tests.indexes.datetimes.test_tools.TestDaysInMonth(object)
pandas.tests.indexes.datetimes.test_tools.TestDaysInMonth.test_day_not_in_month_coerce(self)
pandas.tests.indexes.datetimes.test_tools.TestDaysInMonth.test_day_not_in_month_ignore(self)
pandas.tests.indexes.datetimes.test_tools.TestDaysInMonth.test_day_not_in_month_raise(self)
pandas.tests.indexes.datetimes.test_tools.TestGuessDatetimeFormat(object)
pandas.tests.indexes.datetimes.test_tools.TestGuessDatetimeFormat.test_guess_datetime_format_for_array(self)
pandas.tests.indexes.datetimes.test_tools.TestGuessDatetimeFormat.test_guess_datetime_format_invalid_inputs(self)
pandas.tests.indexes.datetimes.test_tools.TestGuessDatetimeFormat.test_guess_datetime_format_nopadding(self)
pandas.tests.indexes.datetimes.test_tools.TestGuessDatetimeFormat.test_guess_datetime_format_with_dayfirst(self)
pandas.tests.indexes.datetimes.test_tools.TestGuessDatetimeFormat.test_guess_datetime_format_with_locale_specific_formats(self)
pandas.tests.indexes.datetimes.test_tools.TestGuessDatetimeFormat.test_guess_datetime_format_with_parseable_formats(self)
pandas.tests.indexes.datetimes.test_tools.TestOrigin(object)
pandas.tests.indexes.datetimes.test_tools.TestOrigin.test_epoch(self,units,epochs,epoch_1960,units_from_epochs)
pandas.tests.indexes.datetimes.test_tools.TestOrigin.test_invalid_origin(self)
pandas.tests.indexes.datetimes.test_tools.TestOrigin.test_invalid_origins(self,origin,exc,units,units_from_epochs)
pandas.tests.indexes.datetimes.test_tools.TestOrigin.test_invalid_unit(self,units,julian_dates)
pandas.tests.indexes.datetimes.test_tools.TestOrigin.test_julian_round_trip(self)
pandas.tests.indexes.datetimes.test_tools.TestOrigin.test_processing_order(self)
pandas.tests.indexes.datetimes.test_tools.TestOrigin.test_to_basic(self,julian_dates)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime(object)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_datetime_bool(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_datetime_invalid_datatype(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_array_of_dt64s(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_dt64s(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_tz(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_tz_psycopg2(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_tz_pytz(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetime.test_to_datetime_utc_is_true(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeInferFormat(object)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeInferFormat.test_to_datetime_infer_datetime_format_consistent_format(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeInferFormat.test_to_datetime_infer_datetime_format_inconsistent_format(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeInferFormat.test_to_datetime_infer_datetime_format_series_starting_with_nans(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeInferFormat.test_to_datetime_infer_datetime_format_series_with_nans(self)
pandas.tests.indexes.datetimes.test_tools.TestToDatetimeInferFormat.test_to_datetime_iso8601_noleading_0s(self)
pandas.tests.indexes.datetimes.test_tools.TimeConversionFormats(object)
pandas.tests.indexes.datetimes.test_tools.TimeConversionFormats.test_parse_nanoseconds_with_formula(self)
pandas.tests.indexes.datetimes.test_tools.TimeConversionFormats.test_to_datetime_format(self)
pandas.tests.indexes.datetimes.test_tools.TimeConversionFormats.test_to_datetime_format_YYYYMMDD(self)
pandas.tests.indexes.datetimes.test_tools.TimeConversionFormats.test_to_datetime_format_integer(self)
pandas.tests.indexes.datetimes.test_tools.TimeConversionFormats.test_to_datetime_format_microsecond(self)
pandas.tests.indexes.datetimes.test_tools.TimeConversionFormats.test_to_datetime_format_time(self)
pandas.tests.indexes.datetimes.test_tools.TimeConversionFormats.test_to_datetime_format_weeks(self)
pandas.tests.indexes.datetimes.test_tools.TimeConversionFormats.test_to_datetime_with_non_exact(self)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeMisc(object)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeMisc.test_dayfirst(self)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeMisc.test_dti_constructor_numpy_timeunits(self)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeMisc.test_index_to_datetime(self)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeMisc.test_string_na_nat_conversion(self)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeMisc.test_to_datetime_default(self)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeMisc.test_to_datetime_freq(self)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeMisc.test_to_datetime_iso8601(self)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeMisc.test_to_datetime_list_of_integers(self)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeMisc.test_to_datetime_on_datetime64_series(self)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeMisc.test_to_datetime_other_datetime64_units(self)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeMisc.test_to_datetime_types(self)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeMisc.test_to_datetime_unprocessable_input(self)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeMisc.test_to_datetime_with_apply(self)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeMisc.test_to_datetime_with_space_in_series(self)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeUnit(object)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeUnit.test_dataframe(self)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeUnit.test_dataframe_dtypes(self)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeUnit.test_unit(self)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeUnit.test_unit_consistency(self)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeUnit.test_unit_mixed(self)
pandas.tests.indexes.datetimes.test_tools.ToDatetimeUnit.test_unit_with_numeric(self)
pandas.tests.indexes.datetimes.test_tools.epoch_1960()
pandas.tests.indexes.datetimes.test_tools.epochs(request)
pandas.tests.indexes.datetimes.test_tools.julian_dates()
pandas.tests.indexes.datetimes.test_tools.test_normalize_date()
pandas.tests.indexes.datetimes.test_tools.units(request)
pandas.tests.indexes.datetimes.test_tools.units_from_epochs()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/datetimes/test_formats.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_formats.index->DatetimeIndex(['2017-01-01', pd.NaT, '2017-01-03'])
A:pandas.tests.indexes.datetimes.test_formats.expected->numpy.array(['2017-01-01', 'pandas', '2017-01-03'], dtype=object)
A:pandas.tests.indexes.datetimes.test_formats.result->DatetimeIndex(['2017-01-01', pd.NaT, '2017-01-03']).to_native_types(na_rep='pandas')
pandas.tests.indexes.datetimes.test_formats.test_to_native_types()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/datetimes/test_indexing.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_indexing.i->pandas.date_range('20130101', periods=3, tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_indexing.result->date_range(start='2000-01-01', periods=10, freq='D', name='idx').delete(slice(n[0], n[-1] + 1))
A:pandas.tests.indexes.datetimes.test_indexing.i2->Index([pd.NaT, pd.NaT] + i[2:].tolist())
A:pandas.tests.indexes.datetimes.test_indexing.idx->date_range(start='2000-01-01', periods=10, freq='D', name='idx')
A:pandas.tests.indexes.datetimes.test_indexing.exp->DatetimeIndex(['2000-01-04', '2000-01-01', '2000-01-05', '2000-01-02'], name='idx')
A:pandas.tests.indexes.datetimes.test_indexing.expected->DatetimeIndex(['2000-01-01 09:00', '2000-01-01 11:00', '2000-01-01 13:00', '2000-01-01 15:00', '2000-01-01 17:00'], freq=None, name='idx', tz=tz)
A:pandas.tests.indexes.datetimes.test_indexing.expected_0->date_range(start='2000-02-01', periods=4, freq='M', name='idx')
A:pandas.tests.indexes.datetimes.test_indexing.expected_3->DatetimeIndex(['2000-01-31', '2000-02-29', '2000-03-31', '2000-04-30'], name='idx', freq='M')
A:pandas.tests.indexes.datetimes.test_indexing.expected_1_nofreq->DatetimeIndex(['2000-01-31', '2000-01-31', '2000-02-29', '2000-03-31'], name='idx', freq=None)
A:pandas.tests.indexes.datetimes.test_indexing.expected_3_nofreq->DatetimeIndex(['2000-01-31', '2000-02-29', '2000-03-31', '2000-01-02'], name='idx', freq=None)
A:pandas.tests.indexes.datetimes.test_indexing.expected_4->date_range(start='2000-01-01', periods=4, freq='M', name='idx')
A:pandas.tests.indexes.datetimes.test_indexing.expected_1->DatetimeIndex(['2000-01-31', '2000-03-31', '2000-04-30', '2000-05-31'], freq=None, name='idx')
A:pandas.tests.indexes.datetimes.test_indexing.expected_0_2->date_range(start='2000-01-04', periods=7, freq='D', name='idx')
A:pandas.tests.indexes.datetimes.test_indexing.expected_7_9->date_range(start='2000-01-01', periods=7, freq='D', name='idx')
A:pandas.tests.indexes.datetimes.test_indexing.expected_3_5->DatetimeIndex(['2000-01-01', '2000-01-02', '2000-01-03', '2000-01-07', '2000-01-08', '2000-01-09', '2000-01-10'], freq=None, name='idx')
A:pandas.tests.indexes.datetimes.test_indexing.ts->pandas.Series(1, index=pd.date_range('2000-01-01 09:00', periods=10, freq='H', name='idx', tz=tz))
pandas.tests.indexes.datetimes.test_indexing.TestDatetimeIndex(object)
pandas.tests.indexes.datetimes.test_indexing.TestDatetimeIndex.test_delete(self)
pandas.tests.indexes.datetimes.test_indexing.TestDatetimeIndex.test_delete_slice(self)
pandas.tests.indexes.datetimes.test_indexing.TestDatetimeIndex.test_insert(self)
pandas.tests.indexes.datetimes.test_indexing.TestDatetimeIndex.test_where_other(self)
pandas.tests.indexes.datetimes.test_indexing.TestDatetimeIndex.test_where_tz(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/datetimes/test_date_range.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_date_range.rng->cdate_range('2013-05-01', periods=3, weekmask='Sun Mon Tue Wed Thu', holidays=['2013-05-01'])
A:pandas.tests.indexes.datetimes.test_date_range.exp->pandas.DatetimeIndex(['2011-01-31', '2010-11-30', '2010-09-30'], freq='-2M')
A:pandas.tests.indexes.datetimes.test_date_range.ex_first->Timestamp('2000-01-03')
A:pandas.tests.indexes.datetimes.test_date_range.snap->datetime.datetime.today()
A:pandas.tests.indexes.datetimes.test_date_range.offset->DateOffset(months=3)
A:pandas.tests.indexes.datetimes.test_date_range.values->DatetimeIndex([snap + i * offset for i in range(n)])
A:pandas.tests.indexes.datetimes.test_date_range.the_time->time(8, 15)
A:pandas.tests.indexes.datetimes.test_date_range.dr->cdate_range(end=end, periods=20)
A:pandas.tests.indexes.datetimes.test_date_range.start->datetime(2011, 1, 1, tzinfo=tz('US/Eastern'))
A:pandas.tests.indexes.datetimes.test_date_range.end->datetime(2009, 5, 13)
A:pandas.tests.indexes.datetimes.test_date_range.idx->DatetimeIndex(['2014-07-04 09:00', '2014-07-04 10:00', '2014-07-04 11:00', '2014-07-04 12:00', '2014-07-04 13:00', '2014-07-04 14:00', '2014-07-04 15:00', '2014-07-04 16:00', '2014-07-07 09:00', '2014-07-07 10:00', '2014-07-07 11:00', '2014-07-07 12:00', '2014-07-07 13:00', '2014-07-07 14:00', '2014-07-07 15:00', '2014-07-07 16:00', '2014-07-08 09:00', '2014-07-08 10:00', '2014-07-08 11:00', '2014-07-08 12:00', '2014-07-08 13:00', '2014-07-08 14:00', '2014-07-08 15:00', '2014-07-08 16:00'], freq='BH')
A:pandas.tests.indexes.datetimes.test_date_range.result->cdate_range('12/5/2011', '12/5/2011').union(rng2)
A:pandas.tests.indexes.datetimes.test_date_range.rng1->cdate_range('12/5/2011', '12/5/2011')
A:pandas.tests.indexes.datetimes.test_date_range.rng2->cdate_range('12/2/2011', '12/5/2011')
A:pandas.tests.indexes.datetimes.test_date_range.result1->DatetimeIndex(start='2015-04-15 00:00:03', end='2016-04-22 00:00:00', freq='Q')
A:pandas.tests.indexes.datetimes.test_date_range.result2->DatetimeIndex(start='2015-04-15 00:00:03', end='2015-06-22 00:00:04', freq='W')
A:pandas.tests.indexes.datetimes.test_date_range.expected1->DatetimeIndex(expected1_list, dtype='datetime64[ns]', freq='Q-DEC', tz=None)
A:pandas.tests.indexes.datetimes.test_date_range.expected2->DatetimeIndex(expected2_list, dtype='datetime64[ns]', freq='W-SUN', tz=None)
A:pandas.tests.indexes.datetimes.test_date_range.self.rng->cdate_range(START, END)
A:pandas.tests.indexes.datetimes.test_date_range.naive->bdate_range(START, END, freq=BDay(), tz=None)
A:pandas.tests.indexes.datetimes.test_date_range.aware->bdate_range(START, END, freq=BDay(), tz='Asia/Hong_Kong')
A:pandas.tests.indexes.datetimes.test_date_range.rng2.offset->CDay()
A:pandas.tests.indexes.datetimes.test_date_range.tz->timezone('US/Eastern')
A:pandas.tests.indexes.datetimes.test_date_range.begin->Timestamp('2011/1/1')
A:pandas.tests.indexes.datetimes.test_date_range.closed->date_range(begin, end, closed=None, freq=freq, tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_date_range.left->date_range(begin, end, closed='left', freq=freq, tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_date_range.right->date_range(begin, end, closed='right', freq=freq, tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_date_range.begintz->Timestamp('2011/1/1', tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_date_range.endtz->Timestamp('2014/1/1', tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_date_range.right_boundary->date_range('2015-09-12', '2015-12-01', freq='QS-MAR', closed=closed)
A:pandas.tests.indexes.datetimes.test_date_range.left_boundary->date_range('2015-09-01', '2015-09-12', freq='QS-MAR', closed=closed)
A:pandas.tests.indexes.datetimes.test_date_range.both_boundary->date_range('2015-09-01', '2015-12-01', freq='QS-MAR', closed=closed)
A:pandas.tests.indexes.datetimes.test_date_range.result_1->date_range('2005-01-12 10:00', '2005-01-12 16:00', freq='345min')
A:pandas.tests.indexes.datetimes.test_date_range.result_2->date_range('2005-01-13 10:00', '2005-01-13 16:00', freq='345min')
A:pandas.tests.indexes.datetimes.test_date_range.expected_1->DatetimeIndex(['2005-01-12 10:00:00', '2005-01-12 15:45:00'], dtype='datetime64[ns]', freq='345T', tz=None)
A:pandas.tests.indexes.datetimes.test_date_range.expected_2->DatetimeIndex(['2005-01-13 10:00:00', '2005-01-13 15:45:00'], dtype='datetime64[ns]', freq='345T', tz=None)
A:pandas.tests.indexes.datetimes.test_date_range.xp->DatetimeIndex(['2013-05-02', '2013-05-05', '2013-05-06'])
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange(object)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.setup_method(self,method)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_cached_range(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_cached_range_bug(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_constructor(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_date_parse_failure(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_daterange_bug_456(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_error_with_zero_monthends(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_freq_divides_end_in_nanos(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_misc(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_naive_aware_conflicts(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_range_bug(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_range_closed(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_range_closed_boundary(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_range_closed_with_tz_aware_start_end(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_range_tz_dateutil(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_range_tz_dst_straddle_pytz(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_range_tz_pytz(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_timezone_comparaison_assert(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_timezone_comparaison_bug(self)
pandas.tests.indexes.datetimes.test_date_range.TestBusinessDateRange.test_years_only(self)
pandas.tests.indexes.datetimes.test_date_range.TestCustomDateRange(object)
pandas.tests.indexes.datetimes.test_date_range.TestCustomDateRange.setup_method(self,method)
pandas.tests.indexes.datetimes.test_date_range.TestCustomDateRange.test_cached_range(self)
pandas.tests.indexes.datetimes.test_date_range.TestCustomDateRange.test_cdaterange(self)
pandas.tests.indexes.datetimes.test_date_range.TestCustomDateRange.test_cdaterange_holidays(self)
pandas.tests.indexes.datetimes.test_date_range.TestCustomDateRange.test_cdaterange_weekmask(self)
pandas.tests.indexes.datetimes.test_date_range.TestCustomDateRange.test_cdaterange_weekmask_and_holidays(self)
pandas.tests.indexes.datetimes.test_date_range.TestCustomDateRange.test_constructor(self)
pandas.tests.indexes.datetimes.test_date_range.TestCustomDateRange.test_date_parse_failure(self)
pandas.tests.indexes.datetimes.test_date_range.TestCustomDateRange.test_daterange_bug_456(self)
pandas.tests.indexes.datetimes.test_date_range.TestCustomDateRange.test_misc(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges(TestData)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_catch_infinite_loop(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_compat_replace(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_ambiguous_arguments(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_bms_bug(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_businesshour(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_fy5252(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_gen_error(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_negative_freq(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_date_range_normalize(self)
pandas.tests.indexes.datetimes.test_date_range.TestDateRanges.test_range_misspecified(self)
pandas.tests.indexes.datetimes.test_date_range.TestGenRangeGeneration(object)
pandas.tests.indexes.datetimes.test_date_range.TestGenRangeGeneration.test_1(self)
pandas.tests.indexes.datetimes.test_date_range.TestGenRangeGeneration.test_2(self)
pandas.tests.indexes.datetimes.test_date_range.TestGenRangeGeneration.test_3(self)
pandas.tests.indexes.datetimes.test_date_range.TestGenRangeGeneration.test_generate(self)
pandas.tests.indexes.datetimes.test_date_range.TestGenRangeGeneration.test_generate_cday(self)
pandas.tests.indexes.datetimes.test_date_range.TestGenRangeGeneration.test_precision_finer_than_offset(self)
pandas.tests.indexes.datetimes.test_date_range.eq_gen_range(kwargs,expected)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/datetimes/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/datetimes/test_datetime.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_datetime.idx->pandas.date_range('2016-06-13', freq='H', periods=12, tz='US/Eastern')
A:pandas.tests.indexes.datetimes.test_datetime.exp->Timestamp('2015-01-02 00:00:00')
A:pandas.tests.indexes.datetimes.test_datetime.index->pandas.DatetimeIndex(dt, freq=freq, name='time')
A:pandas.tests.indexes.datetimes.test_datetime.unpickled->pandas.util.testing.round_trip_pickle(index)
A:pandas.tests.indexes.datetimes.test_datetime.key->time(15, 11, 30)
A:pandas.tests.indexes.datetimes.test_datetime.ts->Series(np.arange(20), date_range('2014-01-01', periods=20, freq='MS'))
A:pandas.tests.indexes.datetimes.test_datetime.i->numpy.arange(start, n, step)
A:pandas.tests.indexes.datetimes.test_datetime.periods->numpy.int_(1000)
A:pandas.tests.indexes.datetimes.test_datetime.idx1->idx1.tz_localize('Asia/Tokyo').tz_localize('Asia/Tokyo')
A:pandas.tests.indexes.datetimes.test_datetime.idx2->pandas.DatetimeIndex(['2014-03', '2014-03', '2014-02', '2014-01', '2014-03', '2014-01'])
A:pandas.tests.indexes.datetimes.test_datetime.delta->numpy.array([np.timedelta64(1, 'D'), np.timedelta64(2, 'D'), np.timedelta64(3, 'D')])
A:pandas.tests.indexes.datetimes.test_datetime.d1->date(2002, 9, 1)
A:pandas.tests.indexes.datetimes.test_datetime.d2->date(2013, 10, 27)
A:pandas.tests.indexes.datetimes.test_datetime.d3->date(2012, 9, 30)
A:pandas.tests.indexes.datetimes.test_datetime.result_append->idx1.tz_localize('Asia/Tokyo').tz_localize('Asia/Tokyo').append(idx2)
A:pandas.tests.indexes.datetimes.test_datetime.expected->Index([f(index[0])])
A:pandas.tests.indexes.datetimes.test_datetime.result_union->idx1.tz_localize('Asia/Tokyo').tz_localize('Asia/Tokyo').union(idx2)
A:pandas.tests.indexes.datetimes.test_datetime.result->pandas.DatetimeIndex(dt, freq=freq, name='time').isin(list(index))
A:pandas.tests.indexes.datetimes.test_datetime.start->datetime.datetime.now()
A:pandas.tests.indexes.datetimes.test_datetime.df->pandas.util.testing.makeCustomDataframe(10, 10, data_gen_f=lambda *args: np.random.randint(2), c_idx_type='p', r_idx_type='dt')
A:pandas.tests.indexes.datetimes.test_datetime.rng->pandas.date_range('1/1/2000', freq='12H', periods=10)
A:pandas.tests.indexes.datetimes.test_datetime.fidx1->pandas.Index([1.0, np.nan, 3.0, np.nan, 5.0, 7.0])
A:pandas.tests.indexes.datetimes.test_datetime.fidx2->pandas.Index([2.0, 3.0, np.nan, np.nan, 6.0, 7.0])
A:pandas.tests.indexes.datetimes.test_datetime.didx1->pandas.DatetimeIndex(['2014-01-01', pd.NaT, '2014-03-01', pd.NaT, '2014-05-01', '2014-07-01'])
A:pandas.tests.indexes.datetimes.test_datetime.didx2->pandas.DatetimeIndex(['2014-02-01', '2014-03-01', pd.NaT, pd.NaT, '2014-06-01', '2014-07-01'])
A:pandas.tests.indexes.datetimes.test_datetime.darr->numpy.array([np_datetime64_compat('2014-02-01 00:00Z'), np_datetime64_compat('2014-03-01 00:00Z'), np_datetime64_compat('nat'), np.datetime64('nat'), np_datetime64_compat('2014-06-01 00:00Z'), np_datetime64_compat('2014-07-01 00:00Z')])
A:pandas.tests.indexes.datetimes.test_datetime.non_datetime->Index(list('abc'))
A:pandas.tests.indexes.datetimes.test_datetime.t->Timestamp('2017-01-13 00:00:00', freq='D')
A:pandas.tests.indexes.datetimes.test_datetime.ex->DatetimeIndex(['2000-01-02', '2000-01-03'])
A:pandas.tests.indexes.datetimes.test_datetime.ordered->pandas.date_range('2016-06-13', freq='H', periods=12, tz='US/Eastern').sort_values(ascending=False)
A:pandas.tests.indexes.datetimes.test_datetime.(ordered, dexer)->pandas.date_range('2016-06-13', freq='H', periods=12, tz='US/Eastern').sort_values(return_indexer=True, ascending=False)
A:pandas.tests.indexes.datetimes.test_datetime.taken1->pandas.date_range('2016-06-13', freq='H', periods=12, tz='US/Eastern').take([5, 6, 8, 12])
A:pandas.tests.indexes.datetimes.test_datetime.monthly_group->pandas.util.testing.makeCustomDataframe(10, 10, data_gen_f=lambda *args: np.random.randint(2), c_idx_type='p', r_idx_type='dt').groupby(lambda x: (x.year, x.month))
A:pandas.tests.indexes.datetimes.test_datetime.dr->pandas.date_range(st, et, freq='H', name='timebucket')
A:pandas.tests.indexes.datetimes.test_datetime.a->DataFrame()
A:pandas.tests.indexes.datetimes.test_datetime.c->DataFrame({'A': 'foo', 'B': dr}, index=dr)
A:pandas.tests.indexes.datetimes.test_datetime.cols->pandas.util.testing.makeCustomDataframe(10, 10, data_gen_f=lambda *args: np.random.randint(2), c_idx_type='p', r_idx_type='dt').columns.join(df.index, how='outer')
A:pandas.tests.indexes.datetimes.test_datetime.joined->pandas.DatetimeIndex(dt, freq=freq, name='time').join(index, how=kind)
A:pandas.tests.indexes.datetimes.test_datetime.st->pandas.Timestamp('2013-07-01 00:00:00', tz='America/Los_Angeles')
A:pandas.tests.indexes.datetimes.test_datetime.et->pandas.Timestamp('2013-07-02 00:00:00', tz='America/Los_Angeles')
A:pandas.tests.indexes.datetimes.test_datetime.ns->int(1000000000.0 / 24414)
A:pandas.tests.indexes.datetimes.test_datetime.dtstart->numpy.datetime64('2012-09-20T00:00:00')
A:pandas.tests.indexes.datetimes.test_datetime.new_index->pandas.DatetimeIndex(start=index[0], end=index[-1], freq=index.freq)
A:pandas.tests.indexes.datetimes.test_datetime.exp_arr->numpy.arange(100, dtype=np.intp).repeat(5)
A:pandas.tests.indexes.datetimes.test_datetime.exp_idx->DatetimeIndex(['2014-03', '2014-02', '2014-01'])
A:pandas.tests.indexes.datetimes.test_datetime.(arr, idx)->date_range('2000-01', periods=4, freq='M', tz='Asia/Tokyo').factorize()
A:pandas.tests.indexes.datetimes.test_datetime.idx3->date_range('2000-01', periods=4, freq='M', tz='Asia/Tokyo')
A:pandas.tests.indexes.datetimes.test_datetime.base->pandas.date_range('2016-11-05', freq='H', periods=100, tz=tz)
A:pandas.tests.indexes.datetimes.test_datetime.(arr, res)->obj.factorize()
A:pandas.tests.indexes.datetimes.test_datetime.empty_idx->DatetimeIndex(freq='1H', periods=0, end='2015')
A:pandas.tests.indexes.datetimes.test_datetime.right->DatetimeIndex(freq='1H', periods=0, end='2015')._maybe_cast_slice_bound('2015-01-02', 'right', 'loc')
A:pandas.tests.indexes.datetimes.test_datetime.left->DatetimeIndex(freq='1H', periods=0, end='2015')._maybe_cast_slice_bound('2015-01-02', 'left', 'loc')
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex(object)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.assert_index_parameters(self,index)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_append_join_nondatetimeindex(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_append_numpy_bug_1681(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_argmin_argmax(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_comparisons_coverage(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_comparisons_nat(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_date(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_does_not_convert_mixed_integer(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_factorize(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_factorize_dst(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_factorize_tz(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_get_duplicates(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_get_indexer(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_get_loc(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_groupby_function_tuple_1677(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_hash_error(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_isin(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_iteration_preserves_tz(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_join_self(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_join_with_period_index(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_map(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_map_bug_1677(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_misc_coverage(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_nat(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_ns_index(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_overflow_offset(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_reasonable_keyerror(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_reindex_preserves_tz_if_target_is_empty_list_or_array(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_roundtrip_pickle_with_tz(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_slice_bounds_empty(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_slice_keeps_name(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_slice_with_negative_step(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_slice_with_zero_step_raises(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_sort_values(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_string_index_series_name_converted(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_stringified_slice_with_tz(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_take(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_take_fill_value(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_take_fill_value_with_timezone(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_time(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_time_loc(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_time_overflow_for_32bit_machines(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_to_period_nofreq(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_ufunc_coercions(self)
pandas.tests.indexes.datetimes.test_datetime.TestDatetimeIndex.test_week_of_month_frequency(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/datetimes/test_datetimelike.py----------------------------------------
A:pandas.tests.indexes.datetimes.test_datetimelike.self.indices->dict(index=tm.makeDateIndex(10))
A:pandas.tests.indexes.datetimes.test_datetimelike.drange->self.create_index()
A:pandas.tests.indexes.datetimes.test_datetimelike.result->first.union(case)
A:pandas.tests.indexes.datetimes.test_datetimelike.expected->pandas.Index([], dtype=object)
A:pandas.tests.indexes.datetimes.test_datetimelike.intersect->first.intersection(second)
A:pandas.tests.indexes.datetimes.test_datetimelike.third->Index(['a', 'b', 'c'])
A:pandas.tests.indexes.datetimes.test_datetimelike.union->first.union(second)
pandas.tests.indexes.datetimes.test_datetimelike.TestDatetimeIndex(DatetimeLike)
pandas.tests.indexes.datetimes.test_datetimelike.TestDatetimeIndex.create_index(self)
pandas.tests.indexes.datetimes.test_datetimelike.TestDatetimeIndex.setup_method(self,method)
pandas.tests.indexes.datetimes.test_datetimelike.TestDatetimeIndex.test_intersection(self)
pandas.tests.indexes.datetimes.test_datetimelike.TestDatetimeIndex.test_pickle_compat_construction(self)
pandas.tests.indexes.datetimes.test_datetimelike.TestDatetimeIndex.test_shift(self)
pandas.tests.indexes.datetimes.test_datetimelike.TestDatetimeIndex.test_union(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/period/test_ops.py----------------------------------------
A:pandas.tests.indexes.period.test_ops.idx->PeriodIndex(['2011', '2012', '2013', '2014'], freq='4M')
A:pandas.tests.indexes.period.test_ops.expected->PeriodIndex(['2011-07', '2011-08', 'NaT', '2011-10'], freq='2M', name='idx')
A:pandas.tests.indexes.period.test_ops.result_list->PeriodIndex(['2011', '2012', '2013', '2014'], freq='4M').tolist()
A:pandas.tests.indexes.period.test_ops.idx1->PeriodIndex(['2011-01', '2011-02', 'NaT', '2011-05'], freq=freq)
A:pandas.tests.indexes.period.test_ops.idx2->PeriodIndex(['2011-02', '2011-01', '2011-04', 'NaT'], freq=freq)
A:pandas.tests.indexes.period.test_ops.obj->PeriodIndex([pd.NaT, pd.NaT, pd.NaT], freq='M')
A:pandas.tests.indexes.period.test_ops.result->numpy.subtract(pd.Period('2012-01', freq='M'), idx)
A:pandas.tests.indexes.period.test_ops.pr->pandas.period_range(start='2016-01-15', end='2016-01-20')
A:pandas.tests.indexes.period.test_ops.idx3->pandas.PeriodIndex._simple_new(idx.asi8, freq='H')
A:pandas.tests.indexes.period.test_ops.idx4->PeriodIndex(['2011-01-01', '2011-01-02', '2011-01-03'], freq='D')
A:pandas.tests.indexes.period.test_ops.idx5->PeriodIndex(['2011', '2012', '2013'], freq='A')
A:pandas.tests.indexes.period.test_ops.idx6->PeriodIndex(['2011-01-01 09:00', '2012-02-01 10:00', 'NaT'], freq='H')
A:pandas.tests.indexes.period.test_ops.idx7->pandas.period_range('2013Q1', periods=1, freq='Q')
A:pandas.tests.indexes.period.test_ops.idx8->pandas.period_range('2013Q1', periods=2, freq='Q')
A:pandas.tests.indexes.period.test_ops.idx9->pandas.period_range('2013Q1', periods=3, freq='Q')
A:pandas.tests.indexes.period.test_ops.idx10->PeriodIndex(['2011-01-01', '2011-02-01'], freq='3D')
A:pandas.tests.indexes.period.test_ops.rng->pandas.period_range('2000-01-01 09:00', freq='H', periods=10)
A:pandas.tests.indexes.period.test_ops.other->pandas.period_range('1/6/2000', freq='D', periods=5)
A:pandas.tests.indexes.period.test_ops.left->pandas.PeriodIndex([pd.Period('2011-01-01'), pd.NaT, pd.Period('2011-01-03')])
A:pandas.tests.indexes.period.test_ops.right->pandas.PeriodIndex([pd.NaT, pd.NaT, pd.Period('2011-01-03')])
A:pandas.tests.indexes.period.test_ops.exp_idx->PeriodIndex(['2013-01-01 09:00', '2013-01-01 08:00', pd.NaT], freq='H')
A:pandas.tests.indexes.period.test_ops.idx_dup->PeriodIndex(['2011', '2012', '2013', '2014'], freq='4M').append(idx)
A:pandas.tests.indexes.period.test_ops.base->PeriodIndex(['2011-01', '2011-02', '2011-03', '2011-04'], freq=freq)
A:pandas.tests.indexes.period.test_ops.res->Series(idx).drop_duplicates(keep=False)
A:pandas.tests.indexes.period.test_ops.exp->numpy.array([False, False, True, False])
A:pandas.tests.indexes.period.test_ops.pidx->PeriodIndex(['2011', '2013', 'NaT', '2011'], name='pidx', freq='D')
A:pandas.tests.indexes.period.test_ops.iidx->Index([2011, 2013, 2015, 2012, 2011], name='idx')
A:pandas.tests.indexes.period.test_ops.ordered->PeriodIndex(['2011', '2012', '2013', '2014'], freq='4M').sort_values(ascending=False)
A:pandas.tests.indexes.period.test_ops.(ordered, indexer)->PeriodIndex(['2011', '2012', '2013', '2014'], freq='4M').sort_values(return_indexer=True, ascending=False)
A:pandas.tests.indexes.period.test_ops.pexpected->PeriodIndex(['2011', '2011', '2012', '2013', '2015'], name='pidx', freq='A')
A:pandas.tests.indexes.period.test_ops.iexpected->Index([2011, 2011, 2012, 2013, 2015], name='idx')
A:pandas.tests.indexes.period.test_ops.exp1->PeriodIndex(['2011-01-01', '2011-01-01', '2011-01-02', '2011-01-03', '2011-01-05'], freq='D', name='idx1')
A:pandas.tests.indexes.period.test_ops.exp2->PeriodIndex(['2011-01-01', '2011-01-01', '2011-01-02', '2011-01-03', '2011-01-05'], freq='D', name='idx2')
A:pandas.tests.indexes.period.test_ops.exp3->PeriodIndex([pd.NaT, pd.NaT, '2011-01-02', '2011-01-03', '2011-01-05'], freq='D', name='idx3')
A:pandas.tests.indexes.period.test_ops.index->pandas.PeriodIndex(['2001-01', 'NaT', '2003-01'], freq='M')
A:pandas.tests.indexes.period.test_ops.s->pandas.Series([pd.Period('2015-01-01', freq='D'), pd.Period('2015-01-02', freq='D')], name='xxx')
A:pandas.tests.indexes.period.test_ops.self.series->Series(period_range('2000-01-01', periods=10, freq='D'))
A:pandas.tests.indexes.period.test_ops.p->Period('2011-02', freq=freq)
A:pandas.tests.indexes.period.test_ops.s2->pandas.Series([pd.Period('2015-01-05', freq='D'), pd.Period('2015-01-04', freq='D')], name='xxx')
A:pandas.tests.indexes.period.test_ops.df->pandas.DataFrame({'A': [pd.Period('2015-01', freq='M'), pd.Period('2015-02', freq='M')], 'B': [pd.Period('2014-01', freq='M'), pd.Period('2014-02', freq='M')]})
A:pandas.tests.indexes.period.test_ops.df2->pandas.DataFrame({'A': [pd.Period('2015-05', freq='M'), pd.Period('2015-06', freq='M')], 'B': [pd.Period('2015-05', freq='M'), pd.Period('2015-06', freq='M')]})
A:pandas.tests.indexes.period.test_ops.diff->PeriodIndex(['2011-02', '2011-01', '2011-04', 'NaT'], freq='4M')
pandas.tests.indexes.period.test_ops.TestFramePeriod(object)
pandas.tests.indexes.period.test_ops.TestFramePeriod.test_ops_frame_period(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexComparisons(object)
pandas.tests.indexes.period.test_ops.TestPeriodIndexComparisons.test_pi_nat_comp(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexComparisons.test_pi_pi_comp(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps(Ops)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.setup_method(self,method)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_add_iadd(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_asobject_tolist(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_comp_nat(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_drop_duplicates(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_drop_duplicates_metadata(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_equals(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_minmax(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_nat(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_nat_new(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_numpy_minmax(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_ops_properties(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_order(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_order_compat(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_repeat(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_representation(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_representation_to_series(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_resolution(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_shift(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_sub(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_sub_isub(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_summary(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexOps.test_value_counts_unique(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexSeriesMethods(object)
pandas.tests.indexes.period.test_ops.TestPeriodIndexSeriesMethods._check(self,values,func,expected)
pandas.tests.indexes.period.test_ops.TestPeriodIndexSeriesMethods.test_pi_comp_period(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexSeriesMethods.test_pi_comp_period_nat(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexSeriesMethods.test_pi_offset_errors(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexSeriesMethods.test_pi_ops(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexSeriesMethods.test_pi_ops_array_int(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexSeriesMethods.test_pi_ops_errors(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexSeriesMethods.test_pi_ops_nat(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexSeriesMethods.test_pi_ops_offset(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexSeriesMethods.test_pi_sub_pdnat(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexSeriesMethods.test_pi_sub_period(self)
pandas.tests.indexes.period.test_ops.TestPeriodIndexSeriesMethods.test_pi_sub_period_nat(self)
pandas.tests.indexes.period.test_ops.TestSeriesPeriod(object)
pandas.tests.indexes.period.test_ops.TestSeriesPeriod.setup_method(self,method)
pandas.tests.indexes.period.test_ops.TestSeriesPeriod.test_ops_series_period(self)
pandas.tests.indexes.period.test_ops.TestSeriesPeriod.test_ops_series_timedelta(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/period/test_setops.py----------------------------------------
A:pandas.tests.indexes.period.test_setops.index->period_range('1/1/2000', '1/20/2000', freq='D')
A:pandas.tests.indexes.period.test_setops.joined->period_range('1/1/2000', '1/20/2000', freq='D').join(index[:-5], how=kind)
A:pandas.tests.indexes.period.test_setops.res->s.index.join(df.columns, how='outer')
A:pandas.tests.indexes.period.test_setops.df->pandas.DataFrame({'s1': s1, 's2': s2})
A:pandas.tests.indexes.period.test_setops.expected->Index([s.index[0], s.index[1], df.columns[0], df.columns[1]], object)
A:pandas.tests.indexes.period.test_setops.rng1->pandas.period_range('1/1/2000', freq='D', periods=5)
A:pandas.tests.indexes.period.test_setops.other1->pandas.period_range('1/6/2000', freq='D', periods=5)
A:pandas.tests.indexes.period.test_setops.expected1->pandas.period_range('1/1/2000', freq='D', periods=5)
A:pandas.tests.indexes.period.test_setops.rng2->pandas.period_range('1/1/2000', freq='D', periods=5)
A:pandas.tests.indexes.period.test_setops.other2->pandas.period_range('1/4/2000', freq='D', periods=5)
A:pandas.tests.indexes.period.test_setops.expected2->pandas.period_range('1/1/2000', freq='D', periods=3)
A:pandas.tests.indexes.period.test_setops.rng3->pandas.period_range('1/1/2000', freq='D', periods=5)
A:pandas.tests.indexes.period.test_setops.other3->pandas.PeriodIndex([], freq='D')
A:pandas.tests.indexes.period.test_setops.expected3->pandas.period_range('1/1/2000', freq='D', periods=5)
A:pandas.tests.indexes.period.test_setops.rng4->pandas.period_range('2000-01-01 09:00', freq='H', periods=5)
A:pandas.tests.indexes.period.test_setops.other4->pandas.period_range('2000-01-02 09:00', freq='H', periods=5)
A:pandas.tests.indexes.period.test_setops.expected4->PeriodIndex([], freq='D', name='idx')
A:pandas.tests.indexes.period.test_setops.rng5->pandas.PeriodIndex(['2000-01-01 09:01', '2000-01-01 09:03', '2000-01-01 09:05'], freq='T')
A:pandas.tests.indexes.period.test_setops.other5->pandas.PeriodIndex(['2000-01-01 09:01', '2000-01-01 09:05'], freq='T')
A:pandas.tests.indexes.period.test_setops.expected5->pandas.PeriodIndex(['2000-01-01 09:03'], freq='T')
A:pandas.tests.indexes.period.test_setops.rng6->pandas.period_range('2000-01-01', freq='M', periods=7)
A:pandas.tests.indexes.period.test_setops.other6->pandas.period_range('2000-04-01', freq='M', periods=7)
A:pandas.tests.indexes.period.test_setops.expected6->pandas.period_range('2000-01-01', freq='M', periods=3)
A:pandas.tests.indexes.period.test_setops.rng7->pandas.period_range('2003-01-01', freq='A', periods=5)
A:pandas.tests.indexes.period.test_setops.other7->pandas.period_range('1998-01-01', freq='A', periods=8)
A:pandas.tests.indexes.period.test_setops.expected7->pandas.period_range('2006-01-01', freq='A', periods=2)
A:pandas.tests.indexes.period.test_setops.result_union->date_range('6/1/2000', '6/15/2000', freq='T').difference(other)
A:pandas.tests.indexes.period.test_setops.result->date_range('6/1/2000', '6/15/2000', freq='T').intersection(rng[0:0])
A:pandas.tests.indexes.period.test_setops.index2->period_range('1/1/2000', '1/20/2000', freq='W-WED')
A:pandas.tests.indexes.period.test_setops.index3->period_range('1/1/2000', '1/20/2000', freq='2D')
A:pandas.tests.indexes.period.test_setops.s1->pandas.Series(np.random.randn(len(rng1)), rng1)
A:pandas.tests.indexes.period.test_setops.s2->pandas.Series(np.random.randn(len(rng2)), rng2)
A:pandas.tests.indexes.period.test_setops.exp->pandas.period_range('1/1/1980', '1/1/2012', freq='M')
A:pandas.tests.indexes.period.test_setops.left->_permute(index[:-5])
A:pandas.tests.indexes.period.test_setops.right->_permute(index[10:])
A:pandas.tests.indexes.period.test_setops.base->PeriodIndex(['2011-01-05', '2011-01-04', '2011-01-02', '2011-01-03'], freq='D', name='idx')
A:pandas.tests.indexes.period.test_setops.rng->date_range('6/1/2000', '6/15/2000', freq='T')
pandas.tests.indexes.period.test_setops.TestPeriodIndex(object)
pandas.tests.indexes.period.test_setops.TestPeriodIndex.setup_method(self,method)
pandas.tests.indexes.period.test_setops.TestPeriodIndex.test_difference(self)
pandas.tests.indexes.period.test_setops.TestPeriodIndex.test_intersection(self)
pandas.tests.indexes.period.test_setops.TestPeriodIndex.test_intersection_cases(self)
pandas.tests.indexes.period.test_setops.TestPeriodIndex.test_join_does_not_recur(self)
pandas.tests.indexes.period.test_setops.TestPeriodIndex.test_join_self(self)
pandas.tests.indexes.period.test_setops.TestPeriodIndex.test_joins(self)
pandas.tests.indexes.period.test_setops.TestPeriodIndex.test_union(self)
pandas.tests.indexes.period.test_setops.TestPeriodIndex.test_union_dataframe_index(self)
pandas.tests.indexes.period.test_setops.TestPeriodIndex.test_union_misc(self)
pandas.tests.indexes.period.test_setops._permute(obj)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/period/test_asfreq.py----------------------------------------
A:pandas.tests.indexes.period.test_asfreq.pi1->PeriodIndex(['2011-01-01', '2011-02-01', '2011-03-01'], freq='D')
A:pandas.tests.indexes.period.test_asfreq.pi2->PeriodIndex(freq='Q', start='1/1/2001', end='1/1/2001')
A:pandas.tests.indexes.period.test_asfreq.pi3->PeriodIndex(freq='M', start='1/1/2001', end='1/1/2001')
A:pandas.tests.indexes.period.test_asfreq.pi4->PeriodIndex(freq='D', start='1/1/2001', end='1/1/2001')
A:pandas.tests.indexes.period.test_asfreq.pi5->PeriodIndex(freq='H', start='1/1/2001', end='1/1/2001 00:00')
A:pandas.tests.indexes.period.test_asfreq.pi6->PeriodIndex(freq='Min', start='1/1/2001', end='1/1/2001 00:00')
A:pandas.tests.indexes.period.test_asfreq.pi7->PeriodIndex(freq='S', start='1/1/2001', end='1/1/2001 00:00:00')
A:pandas.tests.indexes.period.test_asfreq.result1->PeriodIndex(['2011-01-01', '2011-02-01', '2011-03-01'], freq='D').asfreq('3M')
A:pandas.tests.indexes.period.test_asfreq.result2->PeriodIndex(['2011-01-01', '2011-02-01', '2011-03-01'], freq='D').asfreq('M')
A:pandas.tests.indexes.period.test_asfreq.expected->PeriodIndex(['2011Q1', '2011Q1', 'NaT', '2011Q2'], freq='Q')
A:pandas.tests.indexes.period.test_asfreq.idx->PeriodIndex(['2011-01', '2011-02', 'NaT', '2011-04'], freq='M')
A:pandas.tests.indexes.period.test_asfreq.result->Series(np.random.randn(len(index)), index=index).asfreq('D', how='start')
A:pandas.tests.indexes.period.test_asfreq.pi->pandas.PeriodIndex(['2001-01-01 00:00', '2001-01-02 02:00', 'NaT'], freq=freq)
A:pandas.tests.indexes.period.test_asfreq.exp->PeriodIndex(['2011-01', '2011-02', '2011-03'], freq='3M')
A:pandas.tests.indexes.period.test_asfreq.index->PeriodIndex(freq='A', start='1/1/2001', end='12/31/2010')
A:pandas.tests.indexes.period.test_asfreq.ts->Series(np.random.randn(len(index)), index=index)
A:pandas.tests.indexes.period.test_asfreq.df->DataFrame(np.random.randn(len(index), 3), index=index)
A:pandas.tests.indexes.period.test_asfreq.df_result->DataFrame(np.random.randn(len(index), 3), index=index).asfreq('D', how='end')
A:pandas.tests.indexes.period.test_asfreq.exp_index->PeriodIndex(freq='A', start='1/1/2001', end='12/31/2010').asfreq('D', how='end')
pandas.tests.indexes.period.test_asfreq.TestPeriodIndex(object)
pandas.tests.indexes.period.test_asfreq.TestPeriodIndex.setup_method(self,method)
pandas.tests.indexes.period.test_asfreq.TestPeriodIndex.test_asfreq(self)
pandas.tests.indexes.period.test_asfreq.TestPeriodIndex.test_asfreq_combined_pi(self)
pandas.tests.indexes.period.test_asfreq.TestPeriodIndex.test_asfreq_mult_pi(self)
pandas.tests.indexes.period.test_asfreq.TestPeriodIndex.test_asfreq_nat(self)
pandas.tests.indexes.period.test_asfreq.TestPeriodIndex.test_asfreq_ts(self)
pandas.tests.indexes.period.test_asfreq.TestPeriodIndex.test_astype_asfreq(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/period/test_partial_slicing.py----------------------------------------
A:pandas.tests.indexes.period.test_partial_slicing.ts->Series(np.arange(20), period_range('2014-01', periods=20, freq='M'))
A:pandas.tests.indexes.period.test_partial_slicing.idx->period_range('20010101', periods=10, freq='D', name='bob')
A:pandas.tests.indexes.period.test_partial_slicing.pi->PeriodIndex(start='1/1/10', end='12/31/12', freq='M')
A:pandas.tests.indexes.period.test_partial_slicing.s->Series(np.random.rand(len(idx)), index=idx)
A:pandas.tests.indexes.period.test_partial_slicing.didx->DatetimeIndex(start='2013/10/01', freq='D', periods=10)
A:pandas.tests.indexes.period.test_partial_slicing.pidx->PeriodIndex(start='2013/10/01', freq='D', periods=10)
A:pandas.tests.indexes.period.test_partial_slicing.df->DataFrame(dict(units=[100 + i for i in range(10)]), index=idx)
A:pandas.tests.indexes.period.test_partial_slicing.empty->DataFrame(index=idx.__class__([], freq='D'), columns=['units'])
A:pandas.tests.indexes.period.test_partial_slicing.empty['units']->empty['units'].astype('int64').astype('int64')
pandas.tests.indexes.period.test_partial_slicing.TestPeriodIndex(object)
pandas.tests.indexes.period.test_partial_slicing.TestPeriodIndex.setup_method(self,method)
pandas.tests.indexes.period.test_partial_slicing.TestPeriodIndex.test_pindex_slice_index(self)
pandas.tests.indexes.period.test_partial_slicing.TestPeriodIndex.test_range_slice_day(self)
pandas.tests.indexes.period.test_partial_slicing.TestPeriodIndex.test_range_slice_outofbounds(self)
pandas.tests.indexes.period.test_partial_slicing.TestPeriodIndex.test_range_slice_seconds(self)
pandas.tests.indexes.period.test_partial_slicing.TestPeriodIndex.test_slice_keep_name(self)
pandas.tests.indexes.period.test_partial_slicing.TestPeriodIndex.test_slice_with_negative_step(self)
pandas.tests.indexes.period.test_partial_slicing.TestPeriodIndex.test_slice_with_zero_step_raises(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/period/test_period.py----------------------------------------
A:pandas.tests.indexes.period.test_period.self.indices->dict(index=tm.makePeriodIndex(10))
A:pandas.tests.indexes.period.test_period.idx->PeriodIndex(['2011-01', '2011-02', 'NaT', '2012-03', '2012-04'], freq='D', name='name')
A:pandas.tests.indexes.period.test_period.result->PeriodIndex([2005, 2007, 2009], freq='A').map(lambda x: x.ordinal)
A:pandas.tests.indexes.period.test_period.expected->PeriodIndex(['2011-01', '2011-03', '2011-05', '2011-07', '2011-09', '2011-11'], freq='2M')
A:pandas.tests.indexes.period.test_period.i->self.create_index()
A:pandas.tests.indexes.period.test_period.i2->PeriodIndex(np.array([end_intv, Period('2005-05-05', 'B')]))
A:pandas.tests.indexes.period.test_period.target->pandas.PeriodIndex(['1999-12-31T23', '2000-01-01T12', '2000-01-02T01'], freq='H')
A:pandas.tests.indexes.period.test_period.res->PeriodIndex(['2011-01', '2011-02', 'NaT', '2012-03', '2012-04'], freq='D', name='name').repeat(3)
A:pandas.tests.indexes.period.test_period.exp->Index([x.ordinal for x in index])
A:pandas.tests.indexes.period.test_period.df->df.set_index(idx2).set_index(idx2)
A:pandas.tests.indexes.period.test_period.index->PeriodIndex([2005, 2007, 2009], freq='A')
A:pandas.tests.indexes.period.test_period.other->period_range('20160922', '20160925', freq='D')
A:pandas.tests.indexes.period.test_period.idx_diff->PeriodIndex([2005, 2007, 2009], freq='A').difference(other)
A:pandas.tests.indexes.period.test_period.series->Series(1, index=index)
A:pandas.tests.indexes.period.test_period.pi->period_range(start='1/1/11', periods=6, freq='2M')
A:pandas.tests.indexes.period.test_period.start->Period('02-Apr-2005', 'B')
A:pandas.tests.indexes.period.test_period.i1->PeriodIndex(end=end_intv, periods=10)
A:pandas.tests.indexes.period.test_period.end_intv->Period('2006-12-31', 'W')
A:pandas.tests.indexes.period.test_period.vals->numpy.array(vals)
A:pandas.tests.indexes.period.test_period.periods->list(rng)
A:pandas.tests.indexes.period.test_period.s->Series([0, 1, 2, 3], index_as_arrays)
A:pandas.tests.indexes.period.test_period.field_idx->getattr(periodindex, field)
A:pandas.tests.indexes.period.test_period.field_s->getattr(s.dt, field)
A:pandas.tests.indexes.period.test_period.idx1->PeriodIndex(ordinal=[-1, 0, 1], freq='A')
A:pandas.tests.indexes.period.test_period.idx2->PeriodIndex(ordinal=np.array([-1, 0, 1]), freq='A')
A:pandas.tests.indexes.period.test_period.exp_arr->numpy.array([0, 0, 1, 2, 0, 2], dtype=np.intp)
A:pandas.tests.indexes.period.test_period.exp_idx->PeriodIndex(['2014-03', '2014-02', '2014-01'], freq='M')
A:pandas.tests.indexes.period.test_period.(arr, idx)->PeriodIndex(ordinal=np.array([-1, 0, 1]), freq='A').factorize()
A:pandas.tests.indexes.period.test_period.ind2->PeriodIndex([2005, 2007, 2009], freq='A').view()
A:pandas.tests.indexes.period.test_period.rng->period_range('1/1/2000', periods=20, freq='D')
A:pandas.tests.indexes.period.test_period.expected_index->date_range('2016-01-01', end='2016-05-31', freq='M')
A:pandas.tests.indexes.period.test_period.ts->Series(np.random.randn(len(idx)), index=idx)
A:pandas.tests.indexes.period.test_period.drange->self.create_index()
A:pandas.tests.indexes.period.test_period.pi1->PeriodIndex(freq='D', start='1/1/2001', end='12/1/2009')
A:pandas.tests.indexes.period.test_period.pi2->PeriodIndex(freq='D', start='12/31/2000', end='11/30/2009')
A:pandas.tests.indexes.period.test_period.d1->date_range('12/31/1990', '12/31/1999', freq='A-DEC')
A:pandas.tests.indexes.period.test_period.d2->date_range('12/31/2000', '12/31/2009', freq='A-DEC')
A:pandas.tests.indexes.period.test_period.s1->s1.to_period().to_period()
A:pandas.tests.indexes.period.test_period.s2->s2.to_period().to_period()
A:pandas.tests.indexes.period.test_period.prng->period_range('1/1/2011', '1/1/2012', freq='M')
A:pandas.tests.indexes.period.test_period.new_prng->pandas.util.testing.round_trip_pickle(prng)
pandas.tests.indexes.period.test_period.TestPeriodIndex(DatetimeLike)
pandas.tests.indexes.period.test_period.TestPeriodIndex._check_all_fields(self,periodindex)
pandas.tests.indexes.period.test_period.TestPeriodIndex.create_index(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.setup_method(self,method)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_append_concat(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_asobject_like(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_astype(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_astype_raises(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_comp_period(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_contains(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_contains_nat(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_convert_array_of_periods(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_difference_freq(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_dtype_str(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_end_time(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_factorize(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_fields(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_fillna_period(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_get_indexer(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_get_loc(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_hash_error(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_index_duplicate_periods(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_index_unique(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_indexing(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_is_(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_is_full(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_iteration(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_make_time_series(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_map(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_ndarray_compat_properties(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_negative_ordinals(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_no_millisecond_field(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_numpy_repeat(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_period_index_indexer(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_period_index_length(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_period_set_index_reindex(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_periods_number_check(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_pickle_compat_construction(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_pickle_freq(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_pickle_round_trip(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_pindex_fieldaccessor_nat(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_pindex_multiples(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_pindex_qaccess(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_repeat(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_shallow_copy_empty(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_shift(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_shift_gh8083(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_shift_nat(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_shift_ndarray(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_start_time(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_values(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_view_asi8(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_where(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_where_array_like(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_where_other(self)
pandas.tests.indexes.period.test_period.TestPeriodIndex.test_with_multi_index(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/period/test_construction.py----------------------------------------
A:pandas.tests.indexes.period.test_construction.p->PeriodIndex(lops)
A:pandas.tests.indexes.period.test_construction.index->PeriodIndex(raw, freq='A')
A:pandas.tests.indexes.period.test_construction.expected->Index(lmap(t, raw))
A:pandas.tests.indexes.period.test_construction.index2->PeriodIndex(year=years, quarter=quarters, freq='2Q-DEC')
A:pandas.tests.indexes.period.test_construction.idx->PeriodIndex(org.values, freq=o)
A:pandas.tests.indexes.period.test_construction.exp->Series(period_range('1/1/2000', periods=10))
A:pandas.tests.indexes.period.test_construction.years->numpy.arange(1960, 2000, dtype=np.int64).repeat(4)
A:pandas.tests.indexes.period.test_construction.quarters->numpy.tile(np.array([1, 2, 3, 4], dtype=np.int64), 40)
A:pandas.tests.indexes.period.test_construction.pindex->PeriodIndex(year=years, quarter=quarters)
A:pandas.tests.indexes.period.test_construction.start->Period('02-Apr-2005', 'B')
A:pandas.tests.indexes.period.test_construction.end->Period('2010', freq='A-DEC')
A:pandas.tests.indexes.period.test_construction.result->PeriodIndex(org.values, freq=o)._simple_new(idx, name='p', freq='M')
A:pandas.tests.indexes.period.test_construction.vals->numpy.array(vals)
A:pandas.tests.indexes.period.test_construction.res->PeriodIndex(raw, freq='A').map(t)
A:pandas.tests.indexes.period.test_construction.year->pandas.Series([2001, 2002, 2003])
A:pandas.tests.indexes.period.test_construction.lops->list(map(Period, strs))
A:pandas.tests.indexes.period.test_construction.pidx->func(start='2016-01-01', periods=2, freq=freq)
A:pandas.tests.indexes.period.test_construction.pi->PeriodIndex(freq='S', start='1/1/2001', end='1/1/2001 23:59:59')
A:pandas.tests.indexes.period.test_construction.i1->PeriodIndex(start=start, end=end_intv)
A:pandas.tests.indexes.period.test_construction.end_intv->Period('2006-12-31', ('w', 1))
A:pandas.tests.indexes.period.test_construction.i2->PeriodIndex(np.array([end_intv, Period('2005-05-05', 'B')]))
A:pandas.tests.indexes.period.test_construction.org->PeriodIndex(start='2001/04/01', freq=o, periods=1)
A:pandas.tests.indexes.period.test_construction.self.series->Series(period_range('2000-01-01', periods=10, freq='D'))
A:pandas.tests.indexes.period.test_construction.s->Series(period_range('1/1/2000', periods=10), dtype=object)
pandas.tests.indexes.period.test_construction.TestPeriodIndex(object)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.setup_method(self,method)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_construction_base_constructor(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_U(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_arrays_negative_year(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_corner(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_datetime64arr(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_dtype(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_empty(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_error(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_field_arrays(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_floats(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_freq_combined(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_freq_mult(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_freq_mult_dti_compat(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_fromarraylike(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_incompat_freq(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_invalid_quarters(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_mixed(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_nano(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_nat(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_pi_nat(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_simple_new(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_simple_new_empty(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_use_start_freq(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_constructor_year_and_quarter(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_map_with_string_constructor(self)
pandas.tests.indexes.period.test_construction.TestPeriodIndex.test_recreate_from_data(self)
pandas.tests.indexes.period.test_construction.TestSeriesPeriod(object)
pandas.tests.indexes.period.test_construction.TestSeriesPeriod.setup_method(self,method)
pandas.tests.indexes.period.test_construction.TestSeriesPeriod.test_constructor_cant_cast_period(self)
pandas.tests.indexes.period.test_construction.TestSeriesPeriod.test_constructor_cast_object(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/period/test_tools.py----------------------------------------
A:pandas.tests.indexes.period.test_tools.rng->date_range('01-Jan-2012', periods=8, freq='M')
A:pandas.tests.indexes.period.test_tools.exp->pandas.DatetimeIndex(['2011-01-31', '2011-02-28', '2011-03-31'], tz='US/Eastern')
A:pandas.tests.indexes.period.test_tools.period->Period(ordinal=-1, freq='W')
A:pandas.tests.indexes.period.test_tools.index->period_range('1/1/2012', periods=4, freq='D')
A:pandas.tests.indexes.period.test_tools.rs->period_range('1/1/2012', periods=4, freq='D').tolist()
A:pandas.tests.indexes.period.test_tools.recon->PeriodIndex(rs)
A:pandas.tests.indexes.period.test_tools.series->Series(1, index=index, name='foo')
A:pandas.tests.indexes.period.test_tools.exp_index->date_range('1/1/2001 00:59:59', end='1/2/2001 00:59:59', freq='H')
A:pandas.tests.indexes.period.test_tools.result->pandas.Series([1, np.nan, np.nan, 4, 5, np.nan, 7], index=idx).combine_first(b)
A:pandas.tests.indexes.period.test_tools.delta->timedelta(hours=23, minutes=59, seconds=59)
A:pandas.tests.indexes.period.test_tools.years->numpy.arange(1960, 2000).repeat(4)
A:pandas.tests.indexes.period.test_tools.quarters->numpy.tile(lrange(1, 5), 40)
A:pandas.tests.indexes.period.test_tools.pindex->PeriodIndex(year=years, quarter=quarters)
A:pandas.tests.indexes.period.test_tools.stamps->date_range('01-Jan-2012', periods=8, freq='M').to_timestamp()
A:pandas.tests.indexes.period.test_tools.expected->pandas.Series([1, 9, 9, 4, 5, 9, 7], index=idx, dtype=np.float64)
A:pandas.tests.indexes.period.test_tools.conv->period_range('1/1/2012', periods=4, freq='D').to_timestamp('D')
A:pandas.tests.indexes.period.test_tools.result2->pandas.Series([1, np.nan, np.nan, 4, 5, np.nan, 7], index=idx).combine_first(b).to_period(freq='M')
A:pandas.tests.indexes.period.test_tools.result3->pandas.Series([1, np.nan, np.nan, 4, 5, np.nan, 7], index=idx).combine_first(b).to_period(freq='3M')
A:pandas.tests.indexes.period.test_tools.idx->DatetimeIndex([pd.NaT, '2011-01-01', '2011-02-01'], name='idx')
A:pandas.tests.indexes.period.test_tools.res->dti.to_period(freq='H').astype('datetime64[ns, US/Eastern]', how='end')
A:pandas.tests.indexes.period.test_tools.dti->date_range('1/1/2000', '1/7/2002', freq='B')
A:pandas.tests.indexes.period.test_tools.pi1->date_range('1/1/2000', '1/7/2002', freq='B').to_period()
A:pandas.tests.indexes.period.test_tools.pi2->date_range('1/1/2000', '1/7/2002', freq='B').to_period(freq='D')
A:pandas.tests.indexes.period.test_tools.pi3->date_range('1/1/2000', '1/7/2002', freq='B').to_period(freq='3D')
A:pandas.tests.indexes.period.test_tools.pi->date_range('1/1/2000', '1/7/2002', freq='B').to_period(freq='H')
A:pandas.tests.indexes.period.test_tools.prng->date_range('01-Jan-2012', periods=8, freq='M').to_period()
A:pandas.tests.indexes.period.test_tools.didx->pandas.DatetimeIndex(start='1950-01-31', end='1950-07-31', freq='M')
A:pandas.tests.indexes.period.test_tools.pidx->pandas.PeriodIndex(['2014-01-01', '2014-01-02', '2014-01-03', '2014-01-04', '2014-01-05'], freq=freq)
A:pandas.tests.indexes.period.test_tools.a->pandas.Series([1, np.nan, np.nan, 4, 5, np.nan, 7], index=idx)
A:pandas.tests.indexes.period.test_tools.b->pandas.Series([9, 9, 9, 9, 9, 9, 9], index=idx)
A:pandas.tests.indexes.period.test_tools.p1->pandas.Period('2014-01-01', freq=freq)
A:pandas.tests.indexes.period.test_tools.p2->pandas.Period('2014-01-04', freq=freq)
pandas.tests.indexes.period.test_tools.TestPeriodIndex(object)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.setup_method(self,method)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_combine_first(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_dti_to_period(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_period_astype_to_timestamp(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_period_dt64_round_trip(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_searchsorted(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_datetime_depr(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_period_annualish(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_period_monthish(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_period_quarterly(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_period_quarterlyish(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_timestamp(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_timestamp_1703(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_timestamp_pi_combined(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_timestamp_pi_mult(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_timestamp_pi_nat(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_timestamp_preserve_name(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_timestamp_quarterly_bug(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_timestamp_repr_is_code(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_to_timestamp_to_period_astype(self)
pandas.tests.indexes.period.test_tools.TestPeriodIndex.test_tolist(self)
pandas.tests.indexes.period.test_tools.TestPeriodRepresentation(object)
pandas.tests.indexes.period.test_tools.TestPeriodRepresentation._check_freq(self,freq,base_date)
pandas.tests.indexes.period.test_tools.TestPeriodRepresentation.test_annual(self)
pandas.tests.indexes.period.test_tools.TestPeriodRepresentation.test_business_daily(self)
pandas.tests.indexes.period.test_tools.TestPeriodRepresentation.test_daily(self)
pandas.tests.indexes.period.test_tools.TestPeriodRepresentation.test_hourly(self)
pandas.tests.indexes.period.test_tools.TestPeriodRepresentation.test_microsecondly(self)
pandas.tests.indexes.period.test_tools.TestPeriodRepresentation.test_millisecondly(self)
pandas.tests.indexes.period.test_tools.TestPeriodRepresentation.test_minutely(self)
pandas.tests.indexes.period.test_tools.TestPeriodRepresentation.test_monthly(self)
pandas.tests.indexes.period.test_tools.TestPeriodRepresentation.test_nanosecondly(self)
pandas.tests.indexes.period.test_tools.TestPeriodRepresentation.test_negone_ordinals(self)
pandas.tests.indexes.period.test_tools.TestPeriodRepresentation.test_secondly(self)
pandas.tests.indexes.period.test_tools.TestPeriodRepresentation.test_weekly(self)
pandas.tests.indexes.period.test_tools.TestTslib(object)
pandas.tests.indexes.period.test_tools.TestTslib.test_intraday_conversion_factors(self)
pandas.tests.indexes.period.test_tools.TestTslib.test_period_ordinal_business_day(self)
pandas.tests.indexes.period.test_tools.TestTslib.test_period_ordinal_start_values(self)
pandas.tests.indexes.period.test_tools.TestTslib.test_period_ordinal_week(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/period/test_formats.py----------------------------------------
A:pandas.tests.indexes.period.test_formats.index->PeriodIndex(['2017-01-01', pd.NaT, '2017-01-03'], freq='D')
A:pandas.tests.indexes.period.test_formats.expected->numpy.array(['2017-01-01', 'pandas', '2017-01-03'], dtype=object)
A:pandas.tests.indexes.period.test_formats.result->PeriodIndex(['2017-01-01', pd.NaT, '2017-01-03'], freq='D').to_native_types(na_rep='pandas')
pandas.tests.indexes.period.test_formats.test_to_native_types()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/period/test_indexing.py----------------------------------------
A:pandas.tests.indexes.period.test_indexing.idx1->pandas.period_range('2011-01-01', '2011-01-31', freq='D', name='idx')
A:pandas.tests.indexes.period.test_indexing.expected->pandas.PeriodIndex(['2011-02-01', '2011-01-01', '2011-03-01'], name='xxx', freq='D')
A:pandas.tests.indexes.period.test_indexing.idx->pandas.PeriodIndex(['2011-01-01', '2011-02-01', '2011-03-01'], name='xxx', freq='D')
A:pandas.tests.indexes.period.test_indexing.exp->pandas.PeriodIndex(['2007-01', '2007-02', '2007-06', '2007-07'], freq='M', name='x')
A:pandas.tests.indexes.period.test_indexing.rng->period_range(start='2012-01-01', periods=10, freq='D')
A:pandas.tests.indexes.period.test_indexing.ts->Series(lrange(len(rng)), index=rng)
A:pandas.tests.indexes.period.test_indexing.dt1->datetime(2011, 10, 2)
A:pandas.tests.indexes.period.test_indexing.dt4->datetime(2012, 4, 20)
A:pandas.tests.indexes.period.test_indexing.s->Series(np.random.rand(len(idx)), index=idx)
A:pandas.tests.indexes.period.test_indexing.didx->DatetimeIndex(['2011-01-01', 'NaT', '2011-01-03'])
A:pandas.tests.indexes.period.test_indexing.pidx->PeriodIndex(['2011-01-01', 'NaT', '2011-01-03'], freq='M')
A:pandas.tests.indexes.period.test_indexing.bad_period->Period('2012', 'A')
A:pandas.tests.indexes.period.test_indexing.result->pandas.PeriodIndex(['2011-01-01', '2011-02-01', '2011-03-01'], name='xxx', freq='D').take(np.array([1, 0, -1]), allow_fill=False, fill_value=True)
A:pandas.tests.indexes.period.test_indexing.index->PeriodIndex(start='1/1/10', end='12/31/12', freq='D', name='idx')
A:pandas.tests.indexes.period.test_indexing.taken1->PeriodIndex(start='1/1/10', end='12/31/12', freq='D', name='idx').take([5, 6, 8, 12])
pandas.tests.indexes.period.test_indexing.TestGetItem(object)
pandas.tests.indexes.period.test_indexing.TestGetItem.setup_method(self,method)
pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem(self)
pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_datetime(self)
pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_day(self)
pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_index(self)
pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_list_periods(self)
pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_nat(self)
pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_partial(self)
pandas.tests.indexes.period.test_indexing.TestGetItem.test_getitem_seconds(self)
pandas.tests.indexes.period.test_indexing.TestIndexing(object)
pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_loc_msg(self)
pandas.tests.indexes.period.test_indexing.TestIndexing.test_get_loc_nat(self)
pandas.tests.indexes.period.test_indexing.TestIndexing.test_take(self)
pandas.tests.indexes.period.test_indexing.TestIndexing.test_take_fill_value(self)
pandas.tests.indexes.period.test_indexing.TestIndexing.test_take_misc(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/period/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/timedeltas/test_astype.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_astype.self.indices->dict(index=tm.makeTimedeltaIndex(10))
A:pandas.tests.indexes.timedeltas.test_astype.idx->self._holder(np.arange(5, dtype='int64'))
A:pandas.tests.indexes.timedeltas.test_astype.result->self.create_index().shift(3, freq='2D 1s')
A:pandas.tests.indexes.timedeltas.test_astype.expected->TimedeltaIndex(['6 days 01:00:03', '7 days 01:00:03', '8 days 01:00:03', '9 days 01:00:03', '10 days 01:00:03'], freq='D')
A:pandas.tests.indexes.timedeltas.test_astype.rng->timedelta_range('1 days', periods=10)
A:pandas.tests.indexes.timedeltas.test_astype.drange->self.create_index()
A:pandas.tests.indexes.timedeltas.test_astype.didx->self._holder(np.arange(5, dtype='int64') ** 2)
pandas.tests.indexes.timedeltas.test_astype.TestTimedeltaIndex(DatetimeLike)
pandas.tests.indexes.timedeltas.test_astype.TestTimedeltaIndex.create_index(self)
pandas.tests.indexes.timedeltas.test_astype.TestTimedeltaIndex.setup_method(self,method)
pandas.tests.indexes.timedeltas.test_astype.TestTimedeltaIndex.test_astype(self)
pandas.tests.indexes.timedeltas.test_astype.TestTimedeltaIndex.test_astype_raises(self)
pandas.tests.indexes.timedeltas.test_astype.TestTimedeltaIndex.test_astype_timedelta64(self)
pandas.tests.indexes.timedeltas.test_astype.TestTimedeltaIndex.test_numeric_compat(self)
pandas.tests.indexes.timedeltas.test_astype.TestTimedeltaIndex.test_pickle_compat_construction(self)
pandas.tests.indexes.timedeltas.test_astype.TestTimedeltaIndex.test_shift(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/timedeltas/test_timedelta.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_timedelta.self.indices->dict(index=tm.makeTimedeltaIndex(10))
A:pandas.tests.indexes.timedeltas.test_timedelta.drange->self.create_index()
A:pandas.tests.indexes.timedeltas.test_timedelta.result->TimedeltaIndex(td).astype('timedelta64[s]')
A:pandas.tests.indexes.timedeltas.test_timedelta.expected->Index([31 * 86400, 31 * 86400, 31 * 86400 + 5 * 60 + 3, np.nan])
A:pandas.tests.indexes.timedeltas.test_timedelta.idx->Index(['a', 'b', 'c', 'd'])
A:pandas.tests.indexes.timedeltas.test_timedelta.tidx->TimedeltaIndex(['1 days 01:00:00', 'NaT', '2 days 01:00:00'])
A:pandas.tests.indexes.timedeltas.test_timedelta.target->pandas.to_timedelta(['-1 hour', '12 hours', '1 day 1 hour'])
A:pandas.tests.indexes.timedeltas.test_timedelta.res->Index(['a', 'b', 'c', 'd']).get_indexer(target, 'nearest', tolerance=pd.Timedelta('1 hour'))
A:pandas.tests.indexes.timedeltas.test_timedelta.didx->self._holder(np.arange(5, dtype='int64') ** 2)
A:pandas.tests.indexes.timedeltas.test_timedelta.exp->numpy.array([True, True, True] + [False] * 7)
A:pandas.tests.indexes.timedeltas.test_timedelta.index->date_range('1/1/2000', periods=50, freq='B')
A:pandas.tests.indexes.timedeltas.test_timedelta.other->timedelta_range('2 days', '5 days', freq='D')
A:pandas.tests.indexes.timedeltas.test_timedelta.idx_diff->date_range('1/1/2000', periods=50, freq='B').difference(other)
A:pandas.tests.indexes.timedeltas.test_timedelta.taken1->Index(['a', 'b', 'c', 'd']).take([2, 4, 10])
A:pandas.tests.indexes.timedeltas.test_timedelta.idx1->TimedeltaIndex(['1 day', '1 day', '2 day', '2 day', '3 day', '3 day'])
A:pandas.tests.indexes.timedeltas.test_timedelta.exp_arr->numpy.array([0, 1, 2, 3], dtype=np.intp)
A:pandas.tests.indexes.timedeltas.test_timedelta.exp_idx->TimedeltaIndex(['1 day', '2 day', '3 day'])
A:pandas.tests.indexes.timedeltas.test_timedelta.(arr, idx)->timedelta_range('1 day', periods=4, freq='s').factorize()
A:pandas.tests.indexes.timedeltas.test_timedelta.idx3->timedelta_range('1 day', periods=4, freq='s')
A:pandas.tests.indexes.timedeltas.test_timedelta.joined->df.columns.join(df.index, how='outer').join(df.columns)
A:pandas.tests.indexes.timedeltas.test_timedelta.dr->pandas.timedelta_range('1d', '5d', freq='H', name='timebucket')
A:pandas.tests.indexes.timedeltas.test_timedelta.df->pandas.util.testing.makeCustomDataframe(10, 10, data_gen_f=lambda *args, **kwargs: randn(), r_idx_type='i', c_idx_type='td')
A:pandas.tests.indexes.timedeltas.test_timedelta.cols->pandas.util.testing.makeCustomDataframe(10, 10, data_gen_f=lambda *args, **kwargs: randn(), r_idx_type='i', c_idx_type='td').columns.join(df.index, how='outer')
A:pandas.tests.indexes.timedeltas.test_timedelta.ordered->Index(['a', 'b', 'c', 'd']).sort_values(ascending=False)
A:pandas.tests.indexes.timedeltas.test_timedelta.(ordered, dexer)->Index(['a', 'b', 'c', 'd']).sort_values(return_indexer=True, ascending=False)
A:pandas.tests.indexes.timedeltas.test_timedelta.ex->TimedeltaIndex(['2 day', '3day'])
A:pandas.tests.indexes.timedeltas.test_timedelta.rng->timedelta_range('1 day 1 s', periods=5, freq='h')
A:pandas.tests.indexes.timedeltas.test_timedelta.non_td->Index(list('abc'))
A:pandas.tests.indexes.timedeltas.test_timedelta.tdidx1->pandas.TimedeltaIndex(['1 day', pd.NaT, '1 day 00:00:01', pd.NaT, '1 day 00:00:01', '5 day 00:00:03'])
A:pandas.tests.indexes.timedeltas.test_timedelta.tdidx2->pandas.TimedeltaIndex(['2 day', '2 day', pd.NaT, pd.NaT, '1 day 00:00:02', '5 days 00:00:03'])
A:pandas.tests.indexes.timedeltas.test_timedelta.tdarr->numpy.array([np.timedelta64(2, 'D'), np.timedelta64(2, 'D'), np.timedelta64('nat'), np.timedelta64('nat'), np.timedelta64(1, 'D') + np.timedelta64(2, 's'), np.timedelta64(5, 'D') + np.timedelta64(3, 's')])
A:pandas.tests.indexes.timedeltas.test_timedelta.s->Series(rng)
A:pandas.tests.indexes.timedeltas.test_timedelta.s_expt->Series([1 * 86400 + 10 * 3600 + 11 * 60 + 12 + 100123456.0 / 1000000000.0, np.nan], index=[0, 1])
A:pandas.tests.indexes.timedeltas.test_timedelta.rng_p->pandas.util.testing.round_trip_pickle(rng)
A:pandas.tests.indexes.timedeltas.test_timedelta.td->TimedeltaIndex(td)
A:pandas.tests.indexes.timedeltas.test_timedelta.a->DataFrame()
A:pandas.tests.indexes.timedeltas.test_timedelta.c->DataFrame({'A': 'foo', 'B': td}, index=td)
A:pandas.tests.indexes.timedeltas.test_timedelta.result2->DatetimeIndex(s - np.timedelta64(100000000))
A:pandas.tests.indexes.timedeltas.test_timedelta.result4->DatetimeIndex(s - pd.offsets.Hour(1))
pandas.tests.indexes.timedeltas.test_timedelta.TestSlicing(object)
pandas.tests.indexes.timedeltas.test_timedelta.TestSlicing.test_timedelta(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimeSeries(object)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimeSeries.test_series_box_timedelta(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex(DatetimeLike)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.create_index(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.setup_method(self,method)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_append_join_nondatetimeindex(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_append_numpy_bug_1681(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_argmin_argmax(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_comparisons_coverage(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_comparisons_nat(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_difference_freq(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_does_not_convert_mixed_integer(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_factorize(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_fields(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_fillna_timedelta(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_freq_conversion(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_get_duplicates(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_get_indexer(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_get_loc(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_get_loc_nat(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_hash_error(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_isin(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_join_self(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_map(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_misc_coverage(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_numeric_compat(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_pass_TimedeltaIndex_to_index(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_pickle(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_pickle_compat_construction(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_shift(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_slice_keeps_name(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_sort_values(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_take(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_take_fill_value(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_total_seconds(self)
pandas.tests.indexes.timedeltas.test_timedelta.TestTimedeltaIndex.test_ufunc_coercions(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/timedeltas/test_ops.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_ops.idx->pandas.TimedeltaIndex(['1 days', '2 days', 'NaT'])
A:pandas.tests.indexes.timedeltas.test_ops.expected->numpy.array([False, False])
A:pandas.tests.indexes.timedeltas.test_ops.idx1->pandas.timedelta_range('1 day', '31 day', freq='D', name='idx')
A:pandas.tests.indexes.timedeltas.test_ops.idx2->pandas.TimedeltaIndex(['2 days', '1 days', 'NaT'])
A:pandas.tests.indexes.timedeltas.test_ops.obj->TimedeltaIndex([pd.NaT, pd.NaT, pd.NaT])
A:pandas.tests.indexes.timedeltas.test_ops.dr->pandas.date_range(start='2016-01-15', end='2016-01-20')
A:pandas.tests.indexes.timedeltas.test_ops.td->pandas.Series([timedelta(days=1), timedelta(days=2)]).diff()
A:pandas.tests.indexes.timedeltas.test_ops.expected_rng->TimedeltaIndex([Timedelta('16801 days 00:00:00'), Timedelta('16801 days 00:00:00'), Timedelta('16801 days 01:00:00'), Timedelta('16801 days 02:00:00'), Timedelta('16801 days 02:00:00')])
A:pandas.tests.indexes.timedeltas.test_ops.idx3->TimedeltaIndex(['1 days', '2 days'], freq='D')
A:pandas.tests.indexes.timedeltas.test_ops.idx4->TimedeltaIndex(['1 days', '2 days', '3 days'], freq='D')
A:pandas.tests.indexes.timedeltas.test_ops.idx5->TimedeltaIndex(['1 days 00:00:01', '2 days', '3 days'])
A:pandas.tests.indexes.timedeltas.test_ops.result->abs(rng)
A:pandas.tests.indexes.timedeltas.test_ops.rng->pandas.timedelta_range('-2 days', periods=5, freq='D', name='x')
A:pandas.tests.indexes.timedeltas.test_ops.tdi->TimedeltaIndex(['1 day', '2 days'])
A:pandas.tests.indexes.timedeltas.test_ops.dti->date_range('20130101', periods=3, name='bar')
A:pandas.tests.indexes.timedeltas.test_ops.dt->Timestamp('20130101')
A:pandas.tests.indexes.timedeltas.test_ops.ts->pandas.Series(np.random.normal(size=10), index=tdi)
A:pandas.tests.indexes.timedeltas.test_ops.dti_tz->date_range('20130101', periods=3).tz_localize('US/Eastern')
A:pandas.tests.indexes.timedeltas.test_ops.ts_tz->Timestamp('20130101').tz_localize('US/Eastern')
A:pandas.tests.indexes.timedeltas.test_ops.ts_tz2->Timestamp('20130101').tz_localize('CET')
A:pandas.tests.indexes.timedeltas.test_ops.dt_tz->Timestamp('20130101').tz_localize('US/Eastern').to_pydatetime()
A:pandas.tests.indexes.timedeltas.test_ops.p->pandas.Period('2011-01-01', freq='D')
A:pandas.tests.indexes.timedeltas.test_ops.left->pandas.TimedeltaIndex([pd.Timedelta('1 days'), pd.NaT, pd.Timedelta('3 days')])
A:pandas.tests.indexes.timedeltas.test_ops.right->pandas.TimedeltaIndex([pd.NaT, pd.NaT, pd.Timedelta('3 days')])
A:pandas.tests.indexes.timedeltas.test_ops.exp_idx->TimedeltaIndex(['1 days 09:00:00', '1 days 08:00:00', pd.NaT])
A:pandas.tests.indexes.timedeltas.test_ops.ordered->pandas.TimedeltaIndex(['1 days', '2 days', 'NaT']).sort_values(ascending=False)
A:pandas.tests.indexes.timedeltas.test_ops.(ordered, indexer)->pandas.TimedeltaIndex(['1 days', '2 days', 'NaT']).sort_values(return_indexer=True, ascending=False)
A:pandas.tests.indexes.timedeltas.test_ops.exp1->TimedeltaIndex(['1 hour', '1 hour', '2 hour', '3 hour', '5 hour'], name='idx1')
A:pandas.tests.indexes.timedeltas.test_ops.exp->TimedeltaIndex([pd.NaT, pd.NaT, '5 hours'])
A:pandas.tests.indexes.timedeltas.test_ops.idx_dup->pandas.TimedeltaIndex(['1 days', '2 days', 'NaT']).append(idx)
A:pandas.tests.indexes.timedeltas.test_ops.base->pandas.to_datetime('20130102 09:01:12.123456')
A:pandas.tests.indexes.timedeltas.test_ops.res->Series(idx).drop_duplicates(keep=False)
A:pandas.tests.indexes.timedeltas.test_ops.index->TimedeltaIndex(['1 days', 'NaT', '3 days'])
A:pandas.tests.indexes.timedeltas.test_ops.other->Other()
A:pandas.tests.indexes.timedeltas.test_ops.s->pandas.Series([timedelta(days=1), timedelta(days=2)])
A:pandas.tests.indexes.timedeltas.test_ops.s2->pandas.to_timedelta(Series(['00:00:02']))
A:pandas.tests.indexes.timedeltas.test_ops.expected_add->pandas.to_datetime('20130103 09:01:22.123456')
A:pandas.tests.indexes.timedeltas.test_ops.expected_sub->pandas.to_datetime('20130101 09:01:02.123456')
A:pandas.tests.indexes.timedeltas.test_ops.s1->pandas.to_timedelta(Series(['00:00:01']))
A:pandas.tests.indexes.timedeltas.test_ops.sn->pandas.to_timedelta(Series([pd.NaT]))
A:pandas.tests.indexes.timedeltas.test_ops.df1->DataFrame(['00:00:01']).apply(pd.to_timedelta)
A:pandas.tests.indexes.timedeltas.test_ops.df2->DataFrame(['00:00:02']).apply(pd.to_timedelta)
A:pandas.tests.indexes.timedeltas.test_ops.dfn->DataFrame([pd.NaT]).apply(pd.to_timedelta)
A:pandas.tests.indexes.timedeltas.test_ops.scalar1->pandas.to_timedelta('00:00:01')
A:pandas.tests.indexes.timedeltas.test_ops.scalar2->pandas.to_timedelta('00:00:02')
A:pandas.tests.indexes.timedeltas.test_ops.timedelta_NaT->pandas.to_timedelta('NaT')
A:pandas.tests.indexes.timedeltas.test_ops.arr->numpy.array(periods)
pandas.tests.indexes.timedeltas.test_ops.TestSlicing(object)
pandas.tests.indexes.timedeltas.test_ops.TestSlicing.test_add_overflow(self)
pandas.tests.indexes.timedeltas.test_ops.TestSlicing.test_tdi_ops_attributes(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps(Ops)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.setup_method(self,method)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_add_iadd(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_addition_ops(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_asobject_tolist(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_comp_nat(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_drop_duplicates(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_drop_duplicates_metadata(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_dti_tdi_numeric_ops(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_equals(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_getitem(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_infer_freq(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_minmax(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_nat(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_nat_new(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_nonunique_contains(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_numpy_minmax(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_ops_compat(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_ops_properties(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_order(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_repeat(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_representation(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_representation_to_series(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_round(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_shift(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_sub_isub(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_sub_period(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_subtraction_ops(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_subtraction_ops_with_tz(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_summary(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_take(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_take_invalid_kwargs(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_unknown_attribute(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltaIndexOps.test_value_counts_unique(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltas(object)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltas.test_compare_timedelta_ndarray(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltas.test_compare_timedelta_series(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltas.test_ops(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltas.test_ops_error_str(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltas.test_ops_ndarray(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltas.test_ops_notimplemented(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltas.test_ops_offsets(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltas.test_ops_series(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltas.test_ops_series_object(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltas.test_timedelta_ops(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltas.test_timedelta_ops_scalar(self)
pandas.tests.indexes.timedeltas.test_ops.TestTimedeltas.test_timedelta_ops_with_missing_values(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/timedeltas/test_setops.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_setops.i1->Int64Index(np.arange(0, 20, 2))
A:pandas.tests.indexes.timedeltas.test_setops.i2->TimedeltaIndex(start='1 day', periods=10, freq='D')
A:pandas.tests.indexes.timedeltas.test_setops.result->timedelta_range('1 day', '30d').union(right)
A:pandas.tests.indexes.timedeltas.test_setops.expected->timedelta_range('1 day 01:00:00', periods=3, freq='h')
A:pandas.tests.indexes.timedeltas.test_setops.idx->TimedeltaIndex(['3d', '1d', '2d'])
A:pandas.tests.indexes.timedeltas.test_setops.ordered->TimedeltaIndex(idx.sort_values(), freq='infer')
A:pandas.tests.indexes.timedeltas.test_setops.rng_a->timedelta_range('1 day', periods=4, freq='3H')
A:pandas.tests.indexes.timedeltas.test_setops.rng_b->timedelta_range('1 day', periods=4, freq='4H')
A:pandas.tests.indexes.timedeltas.test_setops.exp->TimedeltaIndex(sorted(set(list(left)) | set(list(right))))
A:pandas.tests.indexes.timedeltas.test_setops.left->timedelta_range('1 day', '30d')
A:pandas.tests.indexes.timedeltas.test_setops.right->TimedeltaIndex(['2 day 13:04:21.322000', '1 day 15:27:24.873000', '1 day 15:31:05.350000'])
A:pandas.tests.indexes.timedeltas.test_setops.index_1->timedelta_range('1 day', periods=4, freq='h')
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndex(object)
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndex.test_intersection_bug_1708(self)
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndex.test_union(self)
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndex.test_union_bug_1730(self)
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndex.test_union_bug_1745(self)
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndex.test_union_bug_4564(self)
pandas.tests.indexes.timedeltas.test_setops.TestTimedeltaIndex.test_union_coverage(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/timedeltas/test_partial_slicing.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_partial_slicing.rng->timedelta_range('1 day 10:11:12', freq='us', periods=2000)
A:pandas.tests.indexes.timedeltas.test_partial_slicing.s->Series(np.arange(len(rng)), index=rng)
A:pandas.tests.indexes.timedeltas.test_partial_slicing.ts->Series(np.arange(20), timedelta_range('0', periods=20, freq='H'))
pandas.tests.indexes.timedeltas.test_partial_slicing.TestSlicing(object)
pandas.tests.indexes.timedeltas.test_partial_slicing.TestSlicing.test_partial_slice(self)
pandas.tests.indexes.timedeltas.test_partial_slicing.TestSlicing.test_partial_slice_high_reso(self)
pandas.tests.indexes.timedeltas.test_partial_slicing.TestSlicing.test_slice_with_negative_step(self)
pandas.tests.indexes.timedeltas.test_partial_slicing.TestSlicing.test_slice_with_zero_step_raises(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/timedeltas/test_construction.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_construction.expected->to_timedelta([1, 2, 3], unit='d')
A:pandas.tests.indexes.timedeltas.test_construction.result->TimedeltaIndex(strings)
A:pandas.tests.indexes.timedeltas.test_construction.rng->timedelta_range('1 days', periods=10.5)
A:pandas.tests.indexes.timedeltas.test_construction.exp->timedelta_range('1 days', periods=10)
A:pandas.tests.indexes.timedeltas.test_construction.strings->numpy.array(['1 days', '2 days', '3 days'])
A:pandas.tests.indexes.timedeltas.test_construction.from_ints->TimedeltaIndex(expected.asi8)
A:pandas.tests.indexes.timedeltas.test_construction.idx->TimedeltaIndex(start='1 days', periods=1, freq='D', name='TEST')
A:pandas.tests.indexes.timedeltas.test_construction.idx2->TimedeltaIndex(idx, name='something else')
pandas.tests.indexes.timedeltas.test_construction.TestTimedeltaIndex(object)
pandas.tests.indexes.timedeltas.test_construction.TestTimedeltaIndex.test_construction_base_constructor(self)
pandas.tests.indexes.timedeltas.test_construction.TestTimedeltaIndex.test_constructor(self)
pandas.tests.indexes.timedeltas.test_construction.TestTimedeltaIndex.test_constructor_coverage(self)
pandas.tests.indexes.timedeltas.test_construction.TestTimedeltaIndex.test_constructor_name(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/timedeltas/test_tools.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_tools.d1->numpy.timedelta64(1, 'D')
A:pandas.tests.indexes.timedeltas.test_tools.result->Timedelta(days=1, hours=1, minutes=1, weeks=1, seconds=1, milliseconds=1, microseconds=1, nanoseconds=1)
A:pandas.tests.indexes.timedeltas.test_tools.expected->Timedelta('990ns')
A:pandas.tests.indexes.timedeltas.test_tools.v->numpy.timedelta64(timedelta(seconds=1))
A:pandas.tests.indexes.timedeltas.test_tools.arr->numpy.array([1] * 5, dtype='timedelta64[D]')
A:pandas.tests.indexes.timedeltas.test_tools.invalid_data->Series(['apple', '1 days'])
A:pandas.tests.indexes.timedeltas.test_tools.timedelta_NaT->numpy.timedelta64('NaT')
A:pandas.tests.indexes.timedeltas.test_tools.actual->pandas.to_timedelta(pd.NaT)
pandas.tests.indexes.timedeltas.test_tools.TestTimedeltas(object)
pandas.tests.indexes.timedeltas.test_tools.TestTimedeltas.test_to_timedelta(self)
pandas.tests.indexes.timedeltas.test_tools.TestTimedeltas.test_to_timedelta_invalid(self)
pandas.tests.indexes.timedeltas.test_tools.TestTimedeltas.test_to_timedelta_on_missing_values(self)
pandas.tests.indexes.timedeltas.test_tools.TestTimedeltas.test_to_timedelta_on_nanoseconds(self)
pandas.tests.indexes.timedeltas.test_tools.TestTimedeltas.test_to_timedelta_via_apply(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/timedeltas/test_indexing.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_indexing.idx->timedelta_range(start='1 days', periods=10, freq='D', name='idx')
A:pandas.tests.indexes.timedeltas.test_indexing.result->timedelta_range(start='1 days', periods=10, freq='D', name='idx').delete(slice(n[0], n[-1] + 1))
A:pandas.tests.indexes.timedeltas.test_indexing.exp->TimedeltaIndex(['4day', '1day', '5day', '2day'], name='idx')
A:pandas.tests.indexes.timedeltas.test_indexing.expected->Index([Timedelta('4day'), 'inserted', Timedelta('1day'), Timedelta('2day')], name='idx')
A:pandas.tests.indexes.timedeltas.test_indexing.expected_0->timedelta_range(start='2 Days', periods=4, freq='D', name='idx')
A:pandas.tests.indexes.timedeltas.test_indexing.expected_3->TimedeltaIndex(['1day 00:00:01', '1day 00:00:02', '1day 00:00:03', '1day 00:00:04'], name='idx', freq='s')
A:pandas.tests.indexes.timedeltas.test_indexing.expected_1_nofreq->TimedeltaIndex(['1day 00:00:01', '1day 00:00:01', '1day 00:00:02', '1day 00:00:03'], name='idx', freq=None)
A:pandas.tests.indexes.timedeltas.test_indexing.expected_3_nofreq->TimedeltaIndex(['1day 00:00:01', '1day 00:00:02', '1day 00:00:03', '1day 00:00:05'], name='idx', freq=None)
A:pandas.tests.indexes.timedeltas.test_indexing.expected_4->timedelta_range(start='1 Days', periods=4, freq='D', name='idx')
A:pandas.tests.indexes.timedeltas.test_indexing.expected_1->TimedeltaIndex(['1 day', '3 day', '4 day', '5 day'], freq=None, name='idx')
A:pandas.tests.indexes.timedeltas.test_indexing.expected_0_2->timedelta_range(start='4 days', periods=7, freq='D', name='idx')
A:pandas.tests.indexes.timedeltas.test_indexing.expected_7_9->timedelta_range(start='1 days', periods=7, freq='D', name='idx')
A:pandas.tests.indexes.timedeltas.test_indexing.expected_3_5->TimedeltaIndex(['1 d', '2 d', '3 d', '7 d', '8 d', '9 d', '10d'], freq=None, name='idx')
pandas.tests.indexes.timedeltas.test_indexing.TestTimedeltaIndex(object)
pandas.tests.indexes.timedeltas.test_indexing.TestTimedeltaIndex.test_delete(self)
pandas.tests.indexes.timedeltas.test_indexing.TestTimedeltaIndex.test_delete_slice(self)
pandas.tests.indexes.timedeltas.test_indexing.TestTimedeltaIndex.test_insert(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/timedeltas/test_timedelta_range.py----------------------------------------
A:pandas.tests.indexes.timedeltas.test_timedelta_range.expected->to_timedelta(np.arange(11), unit='D')
A:pandas.tests.indexes.timedeltas.test_timedelta_range.result->timedelta_range('0 days', freq='30T', periods=50)
A:pandas.tests.indexes.timedeltas.test_timedelta_range.arr->numpy.arange(10).reshape(2, 5)
A:pandas.tests.indexes.timedeltas.test_timedelta_range.df->pandas.DataFrame(np.random.normal(size=(10, 4)))
A:pandas.tests.indexes.timedeltas.test_timedelta_range.df.index->pandas.timedelta_range(start='0s', periods=10, freq='s')
pandas.tests.indexes.timedeltas.test_timedelta_range.TestTimedeltas(object)
pandas.tests.indexes.timedeltas.test_timedelta_range.TestTimedeltas.test_timedelta_range(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/indexes/timedeltas/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/groupby/test_categorical.py----------------------------------------
A:pandas.tests.groupby.test_categorical.df->DataFrame({'dt': [datetime(2011, 7, 1), datetime(2011, 7, 1), datetime(2011, 2, 1), datetime(2011, 5, 1), datetime(2011, 2, 1), datetime(2011, 1, 1), datetime(2011, 5, 1)], 'foo': [10, 8, 5, 6, 4, 1, 7], 'bar': [10, 20, 30, 40, 50, 60, 70]}, columns=['dt', 'foo', 'bar'])
A:pandas.tests.groupby.test_categorical.g->DataFrame({'dt': [datetime(2011, 7, 1), datetime(2011, 7, 1), datetime(2011, 2, 1), datetime(2011, 5, 1), datetime(2011, 2, 1), datetime(2011, 1, 1), datetime(2011, 5, 1)], 'foo': [10, 8, 5, 6, 4, 1, 7], 'bar': [10, 20, 30, 40, 50, 60, 70]}, columns=['dt', 'foo', 'bar']).groupby(level=['Index1'])
A:pandas.tests.groupby.test_categorical.expected->DataFrame({'A': [1, 1, 1, 2, 2, 2], 'B': [np.nan, 20.0, np.nan, 25.0, np.nan, np.nan], 'C1': Categorical(list('bacbac'), categories=list('bac'), ordered=False), 'C2': Categorical(list('bacbac'), categories=list('bac'), ordered=True)}).reindex(columns=result1.columns)
A:pandas.tests.groupby.test_categorical.result->test.groupby([values, 'C2']).get_group(key)
A:pandas.tests.groupby.test_categorical.cats->Categorical(['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c'], categories=['a', 'b', 'c', 'd'], ordered=True)
A:pandas.tests.groupby.test_categorical.dense->Categorical(list('abc'), ordered=ordered)
A:pandas.tests.groupby.test_categorical.missing->Categorical(list('aaa'), categories=['a', 'b'], ordered=ordered)
A:pandas.tests.groupby.test_categorical.values->pandas.cut(test['C1'], [1, 2, 3, 6])
A:pandas.tests.groupby.test_categorical.grouped->DataFrame({'a': [1, 1, 1, 2, 2, 2, 3, 4, 5], 'b': cats}).groupby(cats)
A:pandas.tests.groupby.test_categorical.idx->pandas.MultiIndex.from_product([Categorical([Interval(1, 2), Interval(2, 3), Interval(3, 6)], ordered=True), [1, 2, 3, 4]], names=['cat', 'C2'])
A:pandas.tests.groupby.test_categorical.codes->numpy.array([0, 0, 0, 1, 1, 1, 3, 3, 3])
A:pandas.tests.groupby.test_categorical.data->DataFrame({'a': [1, 1, 1, 2, 2, 2, 3, 4, 5], 'b': cats})
A:pandas.tests.groupby.test_categorical.exp_idx->CategoricalIndex(levels, categories=cats.categories, ordered=True)
A:pandas.tests.groupby.test_categorical.desc_result->DataFrame({'a': [1, 1, 1, 2, 2, 2, 3, 4, 5], 'b': cats}).groupby(cats).describe()
A:pandas.tests.groupby.test_categorical.ord_labels->Categorical(['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c'], categories=['a', 'b', 'c', 'd'], ordered=True).take_nd(idx)
A:pandas.tests.groupby.test_categorical.ord_data->DataFrame({'a': [1, 1, 1, 2, 2, 2, 3, 4, 5], 'b': cats}).take(idx)
A:pandas.tests.groupby.test_categorical.exp_cats->Categorical(ord_labels, ordered=True, categories=['foo', 'bar', 'baz', 'qux'])
A:pandas.tests.groupby.test_categorical.expc->pandas.Categorical.from_codes(np.arange(4).repeat(8), levels, ordered=True)
A:pandas.tests.groupby.test_categorical.exp->DataFrame({'C1': [nan, nan, nan, nan, 3, 3, nan, nan, nan, nan, 4, 5], 'C3': [nan, nan, nan, nan, 10, 100, nan, nan, nan, nan, 200, 34]}, index=idx)
A:pandas.tests.groupby.test_categorical.levels->pandas.date_range('2014-01-01', periods=4)
A:pandas.tests.groupby.test_categorical.expected.index->CategoricalIndex(Categorical.from_codes([0, 1, 2, 3], levels, ordered=True), name='cats')
A:pandas.tests.groupby.test_categorical.s->Series(['a', 'b', 'b'], name='cat')
A:pandas.tests.groupby.test_categorical.df['medium']->df['medium'].astype('category').astype('category')
A:pandas.tests.groupby.test_categorical.gcat->DataFrame({'dt': [datetime(2011, 7, 1), datetime(2011, 7, 1), datetime(2011, 2, 1), datetime(2011, 5, 1), datetime(2011, 2, 1), datetime(2011, 1, 1), datetime(2011, 5, 1)], 'foo': [10, 8, 5, 6, 4, 1, 7], 'bar': [10, 20, 30, 40, 50, 60, 70]}, columns=['dt', 'foo', 'bar']).groupby(['artist', 'medium'])['a'].count().unstack()
A:pandas.tests.groupby.test_categorical.exp_columns->pandas.CategoricalIndex(['A', 'B'], ordered=False, name='medium')
A:pandas.tests.groupby.test_categorical.series->Series([np.nan, np.nan, 1, 1, 2, 2, 3, 3, 4, 4])
A:pandas.tests.groupby.test_categorical.bins->pandas.cut(series.dropna().values, 4)
A:pandas.tests.groupby.test_categorical.df.index->Index(list('abc'), name=name)
A:pandas.tests.groupby.test_categorical.categories->list('abc')
A:pandas.tests.groupby.test_categorical.index->CategoricalIndex(['(7.5, 10]', '(2.5, 5]', '(5, 7.5]', '(0, 2.5]'], categories=['(7.5, 10]', '(2.5, 5]', '(5, 7.5]', '(0, 2.5]'], name='range')
A:pandas.tests.groupby.test_categorical.sort_index->pandas.CategoricalIndex(categories, categories, ordered=False)
A:pandas.tests.groupby.test_categorical.nosort_index->pandas.CategoricalIndex(list('bac'), list('bac'), ordered=False)
A:pandas.tests.groupby.test_categorical.exp_full->DataFrame({'A': [1, 1, 1, 2, 2, 2], 'B': [np.nan, 20.0, np.nan, 25.0, np.nan, np.nan], 'C1': Categorical(list('bacbac'), categories=list('bac'), ordered=False), 'C2': Categorical(list('bacbac'), categories=list('bac'), ordered=True)})
A:pandas.tests.groupby.test_categorical.result1->DataFrame({'dt': [datetime(2011, 7, 1), datetime(2011, 7, 1), datetime(2011, 2, 1), datetime(2011, 5, 1), datetime(2011, 2, 1), datetime(2011, 1, 1), datetime(2011, 5, 1)], 'foo': [10, 8, 5, 6, 4, 1, 7], 'bar': [10, 20, 30, 40, 50, 60, 70]}, columns=['dt', 'foo', 'bar']).groupby(by=cols, as_index=False).mean()
A:pandas.tests.groupby.test_categorical.result2->DataFrame({'dt': [datetime(2011, 7, 1), datetime(2011, 7, 1), datetime(2011, 2, 1), datetime(2011, 5, 1), datetime(2011, 2, 1), datetime(2011, 1, 1), datetime(2011, 5, 1)], 'foo': [10, 8, 5, 6, 4, 1, 7], 'bar': [10, 20, 30, 40, 50, 60, 70]}, columns=['dt', 'foo', 'bar']).groupby(by=cols, as_index=True).mean().reset_index()
A:pandas.tests.groupby.test_categorical.exp.index->CategoricalIndex(exp.index, categories=cats.categories, ordered=cats.ordered)
A:pandas.tests.groupby.test_categorical.df['range']->Categorical(df['range'], ordered=False)
A:pandas.tests.groupby.test_categorical.result_sort->DataFrame([[1, 60], [5, 30], [6, 40], [10, 10]], columns=['foo', 'bar'])
A:pandas.tests.groupby.test_categorical.result_nosort->DataFrame([[10, 10], [5, 30], [6, 40], [1, 60]], columns=['foo', 'bar'])
A:pandas.tests.groupby.test_categorical.df['dt']->Categorical(df['dt'], ordered=False)
A:pandas.tests.groupby.test_categorical.result_sort.index->CategoricalIndex(index, name='dt')
A:pandas.tests.groupby.test_categorical.result_nosort.index->CategoricalIndex(index, categories=index, name='dt')
A:pandas.tests.groupby.test_categorical.test->pandas.DataFrame(d)
A:pandas.tests.groupby.test_categorical.groups_single_key->pandas.DataFrame(d).groupby('cat')
A:pandas.tests.groupby.test_categorical.res->test.groupby([values, 'C2']).agg('mean')
A:pandas.tests.groupby.test_categorical.exp_index->pandas.CategoricalIndex(['a', 'b', 'c'], name='cat', ordered=True)
A:pandas.tests.groupby.test_categorical.groups_double_key->pandas.DataFrame(d).groupby([values, 'C2'])
pandas.tests.groupby.test_categorical.TestGroupByCategorical(MixIn)
pandas.tests.groupby.test_categorical.TestGroupByCategorical.test_apply_categorical_data(self)
pandas.tests.groupby.test_categorical.TestGroupByCategorical.test_apply_use_categorical_name(self)
pandas.tests.groupby.test_categorical.TestGroupByCategorical.test_groupby_bins_unequal_len(self)
pandas.tests.groupby.test_categorical.TestGroupByCategorical.test_groupby_categorical(self)
pandas.tests.groupby.test_categorical.TestGroupByCategorical.test_groupby_categorical_index(self)
pandas.tests.groupby.test_categorical.TestGroupByCategorical.test_groupby_categorical_no_compress(self)
pandas.tests.groupby.test_categorical.TestGroupByCategorical.test_groupby_categorical_two_columns(self)
pandas.tests.groupby.test_categorical.TestGroupByCategorical.test_groupby_datetime_categorical(self)
pandas.tests.groupby.test_categorical.TestGroupByCategorical.test_groupby_describe_categorical_columns(self)
pandas.tests.groupby.test_categorical.TestGroupByCategorical.test_groupby_multi_categorical_as_index(self)
pandas.tests.groupby.test_categorical.TestGroupByCategorical.test_groupby_preserve_categorical_dtype(self)
pandas.tests.groupby.test_categorical.TestGroupByCategorical.test_groupby_preserve_categories(self)
pandas.tests.groupby.test_categorical.TestGroupByCategorical.test_groupby_sort_categorical(self)
pandas.tests.groupby.test_categorical.TestGroupByCategorical.test_groupby_sort_categorical_datetimelike(self)
pandas.tests.groupby.test_categorical.TestGroupByCategorical.test_groupby_unstack_categorical(self)
pandas.tests.groupby.test_categorical.TestGroupByCategorical.test_level_groupby_get_group(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/groupby/test_filters.py----------------------------------------
A:pandas.tests.groupby.test_filters.self.ts->pandas.util.testing.makeTimeSeries()
A:pandas.tests.groupby.test_filters.self.seriesd->pandas.util.testing.getSeriesData()
A:pandas.tests.groupby.test_filters.self.tsd->pandas.util.testing.getTimeSeriesData()
A:pandas.tests.groupby.test_filters.self.frame->DataFrame(self.seriesd)
A:pandas.tests.groupby.test_filters.self.tsframe->DataFrame(self.tsd)
A:pandas.tests.groupby.test_filters.self.df->DataFrame({'A': ['foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'foo'], 'B': ['one', 'one', 'two', 'three', 'two', 'two', 'one', 'three'], 'C': np.random.randn(8), 'D': np.random.randn(8)})
A:pandas.tests.groupby.test_filters.self.df_mixed_floats->DataFrame({'A': ['foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'foo'], 'B': ['one', 'one', 'two', 'three', 'two', 'two', 'one', 'three'], 'C': np.random.randn(8), 'D': np.array(np.random.randn(8), dtype='float32')})
A:pandas.tests.groupby.test_filters.index->list('bbbcbbab')
A:pandas.tests.groupby.test_filters.self.mframe->DataFrame(np.random.randn(10, 3), index=index, columns=['A', 'B', 'C'])
A:pandas.tests.groupby.test_filters.self.three_group->DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'foo', 'foo', 'foo'], 'B': ['one', 'one', 'one', 'two', 'one', 'one', 'one', 'two', 'two', 'two', 'one'], 'C': ['dull', 'dull', 'shiny', 'dull', 'dull', 'shiny', 'shiny', 'dull', 'shiny', 'shiny', 'shiny'], 'D': np.random.randn(11), 'E': np.random.randn(11), 'F': np.random.randn(11)})
A:pandas.tests.groupby.test_filters.s->Series(np.random.randint(0, 100, 1000))
A:pandas.tests.groupby.test_filters.expected_odd->pandas.DataFrame([1, 3, 5, 7], index=[0, 1, 3, 6])
A:pandas.tests.groupby.test_filters.expected_even->pandas.DataFrame([20, 22, 24], index=[2, 4, 5])
A:pandas.tests.groupby.test_filters.grouper->pandas.DataFrame([['best', 'a', 1], ['worst', 'b', 1], ['best', 'c', 1], ['best', 'd', 1], ['worst', 'd', 1], ['worst', 'd', 1], ['best', 'd', 1]], columns=['a', 'b', 'c']).floats.apply(lambda x: np.round(x, -1))
A:pandas.tests.groupby.test_filters.grouped->pandas.DataFrame([['best', 'a', 1], ['worst', 'b', 1], ['best', 'c', 1], ['best', 'd', 1], ['worst', 'd', 1], ['worst', 'd', 1], ['best', 'd', 1]], columns=['a', 'b', 'c']).groupby(['B', 'C'])
A:pandas.tests.groupby.test_filters.df->pandas.DataFrame([['best', 'a', 1], ['worst', 'b', 1], ['best', 'c', 1], ['best', 'd', 1], ['worst', 'd', 1], ['worst', 'd', 1], ['best', 'd', 1]], columns=['a', 'b', 'c'])
A:pandas.tests.groupby.test_filters.expected->f(df.groupby(tups)[field])
A:pandas.tests.groupby.test_filters.filtered->pandas.DataFrame([['best', 'a', 1], ['worst', 'b', 1], ['best', 'c', 1], ['best', 'd', 1], ['worst', 'd', 1], ['worst', 'd', 1], ['best', 'd', 1]], columns=['a', 'b', 'c']).groupby(['B', 'C']).filter(lambda x: x['A'].mean() > 0)
A:pandas.tests.groupby.test_filters.res->res.filter(lambda x: x['b'].sum() > 5, dropna=True).filter(lambda x: x['b'].sum() > 5, dropna=True)
A:pandas.tests.groupby.test_filters.data->pandas.Series(np.random.rand(9), index=np.repeat([1, 2, 3], 3))
A:pandas.tests.groupby.test_filters.result->pandas.DataFrame([['best', 'a', 1], ['worst', 'b', 1], ['best', 'c', 1], ['best', 'd', 1], ['worst', 'd', 1], ['worst', 'd', 1], ['best', 'd', 1]], columns=['a', 'b', 'c']).groupby(['B', 'C']).transform(len)
A:pandas.tests.groupby.test_filters.g_df->pandas.DataFrame([['best', 'a', 1], ['worst', 'b', 1], ['best', 'c', 1], ['best', 'd', 1], ['worst', 'd', 1], ['worst', 'd', 1], ['best', 'd', 1]], columns=['a', 'b', 'c']).groupby(df['B'])
A:pandas.tests.groupby.test_filters.g_s->Series(np.random.randint(0, 100, 1000)).groupby(s)
A:pandas.tests.groupby.test_filters.new_way->pandas.DataFrame([['best', 'a', 1], ['worst', 'b', 1], ['best', 'c', 1], ['best', 'd', 1], ['worst', 'd', 1], ['worst', 'd', 1], ['best', 'd', 1]], columns=['a', 'b', 'c']).groupby(['B', 'C']).filter(lambda x: x['ints'].mean() > N / 20)
A:pandas.tests.groupby.test_filters.letters->numpy.array(list(ascii_lowercase))
A:pandas.tests.groupby.test_filters.random_letters->numpy.array(list(ascii_lowercase)).take(np.random.randint(0, 26, N))
A:pandas.tests.groupby.test_filters.actual->df.groupby('tag').pid.transform(len)
A:pandas.tests.groupby.test_filters.df.index->numpy.arange(len(df) - 1, -1, -1)
A:pandas.tests.groupby.test_filters.grouped_df->pandas.DataFrame([['best', 'a', 1], ['worst', 'b', 1], ['best', 'c', 1], ['best', 'd', 1], ['worst', 'd', 1], ['worst', 'd', 1], ['best', 'd', 1]], columns=['a', 'b', 'c']).groupby('tag')
A:pandas.tests.groupby.test_filters.grouped_ser->ser.groupby(df['tag'])
A:pandas.tests.groupby.test_filters.t0->Timestamp('2013-09-30 00:05:00')
A:pandas.tests.groupby.test_filters.t1->Timestamp('2013-10-30 00:05:00')
A:pandas.tests.groupby.test_filters.t2->Timestamp('2013-11-30 00:05:00')
A:pandas.tests.groupby.test_filters.g->pandas.DataFrame([['best', 'a', 1], ['worst', 'b', 1], ['best', 'c', 1], ['best', 'd', 1], ['worst', 'd', 1], ['worst', 'd', 1], ['best', 'd', 1]], columns=['a', 'b', 'c']).groupby('A')
A:pandas.tests.groupby.test_filters.filt->pandas.DataFrame([['best', 'a', 1], ['worst', 'b', 1], ['best', 'c', 1], ['best', 'd', 1], ['worst', 'd', 1], ['worst', 'd', 1], ['best', 'd', 1]], columns=['a', 'b', 'c']).groupby('A').filter(lambda x: x['A'].sum() == 2)
A:pandas.tests.groupby.test_filters.groupped->pandas.Series(np.random.rand(9), index=np.repeat([1, 2, 3], 3)).groupby(level=0)
A:pandas.tests.groupby.test_filters.result_false->pandas.Series(np.random.rand(9), index=np.repeat([1, 2, 3], 3)).groupby(level=0).filter(lambda x: x.mean() > 1, dropna=False)
A:pandas.tests.groupby.test_filters.expected_false->pandas.Series([np.nan] * 9, index=np.repeat([1, 2, 3], 3))
A:pandas.tests.groupby.test_filters.result_true->pandas.Series(np.random.rand(9), index=np.repeat([1, 2, 3], 3)).groupby(level=0).filter(lambda x: x.mean() > 1, dropna=True)
A:pandas.tests.groupby.test_filters.expected_true->pandas.Series(index=pd.Index([], dtype=int))
A:pandas.tests.groupby.test_filters.tups->pandas.core.common._asarray_tuplesafe(tups)
pandas.tests.groupby.test_filters.TestGroupByFilter(object)
pandas.tests.groupby.test_filters.TestGroupByFilter.setup_method(self,method)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_against_workaround(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_and_transform_with_multiple_non_unique_int_index(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_and_transform_with_non_unique_float_index(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_and_transform_with_non_unique_int_index(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_and_transform_with_non_unique_string_index(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_and_transform_with_non_unique_timestamp_index(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_bad_shapes(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_condition_raises(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_dropna_with_empty_groups(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_enforces_scalarness(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_has_access_to_grouped_cols(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_maintains_ordering(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_mixed_df(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_multi_column_df(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_multiple_timestamp(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_nan_is_false(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_non_bool_raises(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_out_all_groups(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_out_all_groups_in_df(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_out_no_groups(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_series(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_single_column_df(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_using_len(self)
pandas.tests.groupby.test_filters.TestGroupByFilter.test_filter_with_axis_in_groupby(self)
pandas.tests.groupby.test_filters._check_groupby(df,result,keys,field,f=lambdax:x.sum())
pandas.tests.groupby.test_filters.assert_fp_equal(a,b)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/groupby/test_nth.py----------------------------------------
A:pandas.tests.groupby.test_nth.grouped->DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'foo', 'foo', 'foo'], 'B': ['one', 'one', 'one', 'two', 'one', 'one', 'one', 'two', 'two', 'two', 'one'], 'C': ['dull', 'dull', 'shiny', 'dull', 'dull', 'shiny', 'shiny', 'dull', 'shiny', 'shiny', 'shiny']}).groupby(['A', 'B'])
A:pandas.tests.groupby.test_nth.first->DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'foo', 'foo', 'foo'], 'B': ['one', 'one', 'one', 'two', 'one', 'one', 'one', 'two', 'two', 'two', 'one'], 'C': ['dull', 'dull', 'shiny', 'dull', 'dull', 'shiny', 'shiny', 'dull', 'shiny', 'shiny', 'shiny']}).groupby(['A', 'B']).first()
A:pandas.tests.groupby.test_nth.expected.index->Index(['bar', 'foo'], name='A')
A:pandas.tests.groupby.test_nth.expected->DataFrame(index=MultiIndex([[], []], [[], []], names=['a', 'b']), columns=['c'])
A:pandas.tests.groupby.test_nth.nth->DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'foo', 'foo', 'foo'], 'B': ['one', 'one', 'one', 'two', 'one', 'one', 'one', 'two', 'two', 'two', 'one'], 'C': ['dull', 'dull', 'shiny', 'dull', 'dull', 'shiny', 'shiny', 'dull', 'shiny', 'shiny', 'shiny']}).groupby(['A', 'B']).nth(1)
A:pandas.tests.groupby.test_nth.last->DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'foo', 'foo', 'foo'], 'B': ['one', 'one', 'one', 'two', 'one', 'one', 'one', 'two', 'two', 'two', 'one'], 'C': ['dull', 'dull', 'shiny', 'dull', 'dull', 'shiny', 'shiny', 'dull', 'shiny', 'shiny', 'shiny']}).groupby(['A', 'B']).last()
A:pandas.tests.groupby.test_nth.df->DataFrame(index=[0], columns=['a', 'b', 'c'])
A:pandas.tests.groupby.test_nth.g->DataFrame(index=[0], columns=['a', 'b', 'c']).groupby('A')
A:pandas.tests.groupby.test_nth.result->DataFrame(index=[0], columns=['a', 'b', 'c']).groupby(['a', 'b']).nth(10)
A:pandas.tests.groupby.test_nth.idx->lrange(10)
A:pandas.tests.groupby.test_nth.s->Series(data=lrange(11), index=idx, name='IntCol')
A:pandas.tests.groupby.test_nth.f->Series(data=lrange(11), index=idx, name='IntCol').groupby(level=0).first()
A:pandas.tests.groupby.test_nth.exp->DataFrame(index=[0], columns=['a', 'b', 'c']).set_index('A')
A:pandas.tests.groupby.test_nth.expected2->Series(data=lrange(11), index=idx, name='IntCol').groupby(g).apply(lambda x: x.iloc[0])
A:pandas.tests.groupby.test_nth.business_dates->pandas.date_range(start='4/1/2014', end='6/30/2014', freq='B')
A:pandas.tests.groupby.test_nth.expected_dates->pandas.to_datetime(['2014/4/1', '2014/4/4', '2014/4/29', '2014/4/30', '2014/5/1', '2014/5/6', '2014/5/29', '2014/5/30', '2014/6/2', '2014/6/5', '2014/6/27', '2014/6/30'])
A:pandas.tests.groupby.test_nth.three_group->DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'foo', 'foo', 'foo'], 'B': ['one', 'one', 'one', 'two', 'one', 'one', 'one', 'two', 'two', 'two', 'one'], 'C': ['dull', 'dull', 'shiny', 'dull', 'dull', 'shiny', 'shiny', 'dull', 'shiny', 'shiny', 'shiny']})
pandas.tests.groupby.test_nth.TestNth(MixIn)
pandas.tests.groupby.test_nth.TestNth.test_first_last_nth(self)
pandas.tests.groupby.test_nth.TestNth.test_first_last_nth_dtypes(self)
pandas.tests.groupby.test_nth.TestNth.test_nth(self)
pandas.tests.groupby.test_nth.TestNth.test_nth_multi_index(self)
pandas.tests.groupby.test_nth.TestNth.test_nth_multi_index_as_expected(self)
pandas.tests.groupby.test_nth.test_nth_empty()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/groupby/test_aggregate.py----------------------------------------
A:pandas.tests.groupby.test_aggregate.self.ts->pandas.util.testing.makeTimeSeries()
A:pandas.tests.groupby.test_aggregate.self.seriesd->pandas.util.testing.getSeriesData()
A:pandas.tests.groupby.test_aggregate.self.tsd->pandas.util.testing.getTimeSeriesData()
A:pandas.tests.groupby.test_aggregate.self.frame->DataFrame(self.seriesd)
A:pandas.tests.groupby.test_aggregate.self.tsframe->DataFrame(self.tsd)
A:pandas.tests.groupby.test_aggregate.self.df->DataFrame({'A': ['foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'foo'], 'B': ['one', 'one', 'two', 'three', 'two', 'two', 'one', 'three'], 'C': np.random.randn(8), 'D': np.random.randn(8)})
A:pandas.tests.groupby.test_aggregate.self.df_mixed_floats->DataFrame({'A': ['foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'foo'], 'B': ['one', 'one', 'two', 'three', 'two', 'two', 'one', 'three'], 'C': np.random.randn(8), 'D': np.array(np.random.randn(8), dtype='float32')})
A:pandas.tests.groupby.test_aggregate.index->period_range(start='1999-01', periods=5, freq='M')
A:pandas.tests.groupby.test_aggregate.self.mframe->DataFrame(np.random.randn(10, 3), index=index, columns=['A', 'B', 'C'])
A:pandas.tests.groupby.test_aggregate.self.three_group->DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'foo', 'foo', 'foo'], 'B': ['one', 'one', 'one', 'two', 'one', 'one', 'one', 'two', 'two', 'two', 'one'], 'C': ['dull', 'dull', 'shiny', 'dull', 'dull', 'shiny', 'shiny', 'dull', 'shiny', 'shiny', 'shiny'], 'D': np.random.randn(11), 'E': np.random.randn(11), 'F': np.random.randn(11)})
A:pandas.tests.groupby.test_aggregate.df->pandas.DataFrame({'A': ['a', 'b'] * 2, 'B': dates})
A:pandas.tests.groupby.test_aggregate.grouped->pandas.DataFrame({'A': ['a', 'b'] * 2, 'B': dates}).groupby('A')
A:pandas.tests.groupby.test_aggregate.expected->pandas.DataFrame(expected_data, index=expected_index, columns=expected_column)
A:pandas.tests.groupby.test_aggregate.result->pandas.DataFrame({'A': ['a', 'b'] * 2, 'B': dates}).groupby('category').agg(sum)
A:pandas.tests.groupby.test_aggregate.df1->DataFrame({'key': [x[0] for x in data], 'date': [x[1] for x in data], 'value': [x[2] for x in data]})
A:pandas.tests.groupby.test_aggregate.df2->DataFrame({'key': [x[0] for x in data], 'date': [x[1] for x in data], 'value': [x[2] for x in data]})
A:pandas.tests.groupby.test_aggregate.gb1->DataFrame({'key': [x[0] for x in data], 'date': [x[1] for x in data], 'value': [x[2] for x in data]}).groupby('date').aggregate(np.sum)
A:pandas.tests.groupby.test_aggregate.gb2->DataFrame({'key': [x[0] for x in data], 'date': [x[1] for x in data], 'value': [x[2] for x in data]}).groupby('date').aggregate(np.sum)
A:pandas.tests.groupby.test_aggregate.prng->period_range('2012-1-1', freq='M', periods=3)
A:pandas.tests.groupby.test_aggregate.rs->pandas.DataFrame({'A': ['a', 'b'] * 2, 'B': dates}).groupby(level=0).sum()
A:pandas.tests.groupby.test_aggregate.s1->Series(np.random.rand(len(index)), index=index)
A:pandas.tests.groupby.test_aggregate.s2->Series(np.random.rand(len(index)), index=index)
A:pandas.tests.groupby.test_aggregate.exp->DataFrame(expd).T.stack(dropna=False)
A:pandas.tests.groupby.test_aggregate.v->list('aaabbbbbbccd')
A:pandas.tests.groupby.test_aggregate.results->self.df.C.groupby([self.df.A, self.df.B]).aggregate(f)
A:pandas.tests.groupby.test_aggregate.exp_df->DataFrame(columns=self.tsframe.columns, dtype=float, index=pd.Index([], dtype=np.float64))
A:pandas.tests.groupby.test_aggregate.grouped.grouper.groupings[0]->Grouping(self.ts.index, tuple(grouper))
A:pandas.tests.groupby.test_aggregate.c_mean->grouped['C'].mean()
A:pandas.tests.groupby.test_aggregate.c_sum->grouped['C'].sum()
A:pandas.tests.groupby.test_aggregate.d_mean->grouped['D'].mean()
A:pandas.tests.groupby.test_aggregate.d_sum->grouped['D'].sum()
A:pandas.tests.groupby.test_aggregate.expected.columns->pandas.MultiIndex.from_tuples([('ra', 'mean'), ('ra', 'std'), ('rb', 'mean'), ('rb', 'std')])
A:pandas.tests.groupby.test_aggregate.g->pandas.DataFrame({'A': ['a', 'b'] * 2, 'B': dates}).groupby('date')
A:pandas.tests.groupby.test_aggregate.by_weekday->self.tsframe.groupby(lambda x: x.weekday())
A:pandas.tests.groupby.test_aggregate.by_mwkday->self.tsframe.groupby([lambda x: x.month, lambda x: x.weekday()])
A:pandas.tests.groupby.test_aggregate.foo->(self.df.A == 'foo').sum()
A:pandas.tests.groupby.test_aggregate.bar->(self.df.A == 'bar').sum()
A:pandas.tests.groupby.test_aggregate.K->len(result.columns)
A:pandas.tests.groupby.test_aggregate.ts->pandas.Timestamp('2016-01-01 12:00:00', tz='US/Pacific')
A:pandas.tests.groupby.test_aggregate.data->DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'foo', 'foo', 'foo'], 'B': ['one', 'one', 'one', 'two', 'one', 'one', 'one', 'two', 'two', 'two', 'one'], 'C': ['dull', 'dull', 'shiny', 'dull', 'dull', 'shiny', 'shiny', 'dull', 'shiny', 'shiny', 'shiny'], 'D': np.random.randn(11), 'E': np.random.randn(11), 'F': np.random.randn(11)})
A:pandas.tests.groupby.test_aggregate.exp[cat]->op(group['C'])
A:pandas.tests.groupby.test_aggregate.expd.setdefault(cat1, {})[cat2]->op(group['C'])
A:pandas.tests.groupby.test_aggregate.frame->DataFrame({'a': np.random.randint(0, 5, 50), 'b': ['foo', 'bar'] * 25, 'dates': pd.date_range('now', periods=50, freq='T')})
A:pandas.tests.groupby.test_aggregate.dr->bdate_range('1/1/2000', periods=50)
A:pandas.tests.groupby.test_aggregate.summed->pandas.DataFrame({'A': ['a', 'b'] * 2, 'B': dates}).groupby('A').sum()
A:pandas.tests.groupby.test_aggregate.exp_cols->Index(['mean', 'max', 'min'])
A:pandas.tests.groupby.test_aggregate.exmean->pandas.DataFrame({'A': ['a', 'b'] * 2, 'B': dates}).groupby('A').agg(OrderedDict([['C', np.mean], ['D', np.mean]]))
A:pandas.tests.groupby.test_aggregate.exstd->pandas.DataFrame({'A': ['a', 'b'] * 2, 'B': dates}).groupby('A').agg(OrderedDict([['C', np.std], ['D', np.std]]))
A:pandas.tests.groupby.test_aggregate.d->OrderedDict([['C', OrderedDict([['foo', 'mean'], ['bar', 'std']])], ['D', 'sum']])
A:pandas.tests.groupby.test_aggregate.d2->OrderedDict([['C', OrderedDict([['foo', 'mean'], ['bar', 'std']])], ['D', ['sum']]])
A:pandas.tests.groupby.test_aggregate.result2->pandas.DataFrame({'A': ['a', 'b'] * 2, 'B': dates}).groupby('A').aggregate(d2)
A:pandas.tests.groupby.test_aggregate.d3->OrderedDict([['C', OrderedDict([['foo', 'mean'], ['bar', 'std']])], ['D', {'sum': 'sum'}]])
A:pandas.tests.groupby.test_aggregate.labels->numpy.random.randint(0, 50, size=1000).astype(float)
A:pandas.tests.groupby.test_aggregate.grps->range(0, 55, 5)
A:pandas.tests.groupby.test_aggregate.expected_index->pandas.Index([1, 2], name='category')
pandas.tests.groupby.test_aggregate.TestGroupByAggregate(object)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.setup_method(self,method)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test__cython_agg_general(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_agg_api(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_agg_apply_corner(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_agg_callables(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_agg_cast_results_dtypes(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_agg_compat(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_agg_consistency(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_agg_datetimes_mixed(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_agg_dict_parameter_cast_result_dtypes(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_agg_dict_renaming_deprecation(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_agg_grouping_is_list_tuple(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_agg_item_by_item_raise_typeerror(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_agg_multiple_functions_maintain_order(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_agg_multiple_functions_too_many_lambdas(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_agg_must_agg(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_agg_nested_dicts(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_agg_over_numpy_arrays(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_agg_period_index(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_agg_python_multiindex(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_agg_regression1(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_agg_ser_multi_key(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_agg_timezone_round_trip(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_aggregate_api_consistency(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_aggregate_item_by_item(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_aggregate_str_func(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_cython_agg_boolean(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_cython_agg_empty_buckets(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_cython_agg_frame_columns(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_cython_agg_nothing_to_agg(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_cython_agg_nothing_to_agg_with_dates(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_cython_fail_agg(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_cythonized_aggers(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_more_flexible_frame_multi_function(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_multi_function_flexible_mix(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_multiple_functions_tuples_and_non_tuples(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_series_agg_multi_pure_python(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_series_agg_multikey(self)
pandas.tests.groupby.test_aggregate.TestGroupByAggregate.test_wrap_agg_out(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/groupby/test_timegrouper.py----------------------------------------
A:pandas.tests.groupby.test_timegrouper.df_original->df_original.set_index('Date').set_index('Date')
A:pandas.tests.groupby.test_timegrouper.df_reordered->df_original.set_index('Date').set_index('Date').sort_values(by='Quantity')
A:pandas.tests.groupby.test_timegrouper.df->DataFrame({'a': [1, 2, 3] * 2, 'dates': pd.date_range('now', periods=6, freq='T')})
A:pandas.tests.groupby.test_timegrouper.expected->Series([2, 2, 2], index=Index([1, 2, 3], name='a'), name='dates')
A:pandas.tests.groupby.test_timegrouper.expected.iloc[[0, 6, 18], 0]->numpy.array([24.0, 6.0, 9.0], dtype='float64')
A:pandas.tests.groupby.test_timegrouper.result1->DataFrame({'a': [1, 2, 3] * 2, 'dates': pd.date_range('now', periods=6, freq='T')}).sort_index().groupby([pd.TimeGrouper(freq=freq), 'user_id'])['whole_cost'].sum()
A:pandas.tests.groupby.test_timegrouper.df_sorted->df_original.set_index('Date').set_index('Date').sort_values(by='Quantity', ascending=False)
A:pandas.tests.groupby.test_timegrouper.result2->DataFrame({'a': [1, 2, 3] * 2, 'dates': pd.date_range('now', periods=6, freq='T')}).groupby([pd.TimeGrouper(freq=freq), 'user_id'])['whole_cost'].sum()
A:pandas.tests.groupby.test_timegrouper.result3->DataFrame({'a': [1, 2, 3] * 2, 'dates': pd.date_range('now', periods=6, freq='T')}).groupby(pd.TimeGrouper(freq='5D')).sum()
A:pandas.tests.groupby.test_timegrouper.g->DataFrame({'a': [1, 2, 3] * 2, 'dates': pd.date_range('now', periods=6, freq='T')}).groupby(pd.TimeGrouper('6M'))
A:pandas.tests.groupby.test_timegrouper.result->DataFrame({'a': [1, 2, 3] * 2, 'dates': pd.date_range('now', periods=6, freq='T')}).groupby('a').dates.count()
A:pandas.tests.groupby.test_timegrouper.grouped->DataFrame({'a': [1, 2, 3] * 2, 'dates': pd.date_range('now', periods=6, freq='T')}).groupby(level='date')
A:pandas.tests.groupby.test_timegrouper.dt->pandas.Timestamp(t)
A:pandas.tests.groupby.test_timegrouper.df_dt->DataFrame({'a': [1, 2, 3] * 2, 'dates': pd.date_range('now', periods=6, freq='T')}).copy()
A:pandas.tests.groupby.test_timegrouper.df_dt['date']->pandas.to_datetime(df_dt['date'])
A:pandas.tests.groupby.test_timegrouper.ind->DatetimeIndex(start='2012/1/1', freq='5min', periods=periods)
A:pandas.tests.groupby.test_timegrouper.index->pandas.date_range('2015/01/01', periods=5, name='date')
A:pandas.tests.groupby.test_timegrouper.expected_index->pandas.DatetimeIndex([date], name='date')
A:pandas.tests.groupby.test_timegrouper.df['datetime']->df['datetime'].apply(lambda d: Timestamp(d, tz='US/Pacific')).apply(lambda d: Timestamp(d, tz='US/Pacific'))
A:pandas.tests.groupby.test_timegrouper.exp_idx1->pandas.PeriodIndex(['2011-07-19 07:00:00', '2011-07-19 07:00:00', '2011-07-19 08:00:00', '2011-07-19 08:00:00', '2011-07-19 09:00:00', '2011-07-19 09:00:00'], freq='H', name='period')
A:pandas.tests.groupby.test_timegrouper.exp_idx2->Index(['a', 'b'] * 3, name='label')
A:pandas.tests.groupby.test_timegrouper.exp_idx->pandas.PeriodIndex(['2011-07-19 07:00:00', '2011-07-19 08:00:00', '2011-07-19 09:00:00'], freq='H')
A:pandas.tests.groupby.test_timegrouper.didx->pandas.PeriodIndex(dates, freq='H')
A:pandas.tests.groupby.test_timegrouper.res_values->DataFrame({'a': [1, 2, 3] * 2, 'dates': pd.date_range('now', periods=6, freq='T')}).groupby('tz').date.get_group(tz)
A:pandas.tests.groupby.test_timegrouper.exp_values->Series(['2000-01-28 16:47:00', '2000-01-29 16:48:00', '2000-01-31 16:50:00'], index=[0, 1, 3], name='date')
A:pandas.tests.groupby.test_timegrouper.df[1]->df[1].view('M8[ns]').view('M8[ns]')
A:pandas.tests.groupby.test_timegrouper.df2->DataFrame({'a': [1, 2, 3] * 2, 'dates': pd.date_range('now', periods=6, freq='T')}).groupby('factor')['time'].max()
A:pandas.tests.groupby.test_timegrouper.df['b']->datetime.datetime.now(pytz.utc)
A:pandas.tests.groupby.test_timegrouper.df_test->DataFrame({'dt': [nan, '2015-07-24 10:10', '2015-07-25 11:11', '2015-07-23 12:12', nan], 'td': [nan, td(days=1), td(days=2), td(days=3), nan]})
A:pandas.tests.groupby.test_timegrouper.df_test.dt->pandas.to_datetime(df_test.dt)
A:pandas.tests.groupby.test_timegrouper.grouped_test->DataFrame({'dt': [nan, '2015-07-24 10:10', '2015-07-25 11:11', '2015-07-23 12:12', nan], 'td': [nan, td(days=1), td(days=2), td(days=3), nan]}).groupby('group')
A:pandas.tests.groupby.test_timegrouper.grouped_ref->df_ref.groupby('group')
pandas.tests.groupby.test_timegrouper.TestGroupBy(object)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_datetime_count(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_first_last_max_min_on_time_data(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_frame_datetime64_handling_groupby(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_datetime64_32_bit(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_first_datetime64(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_groups_datetimeindex(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_groups_datetimeindex_tz(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_groups_periods(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_max_datetime64(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_multi_timezone(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_with_timegrouper(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_with_timegrouper_methods(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_groupby_with_timezone_selection(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_timegrouper_apply_return_type_series(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_timegrouper_apply_return_type_value(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_timegrouper_get_group(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_timegrouper_with_reg_groups(self)
pandas.tests.groupby.test_timegrouper.TestGroupBy.test_timezone_info(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/groupby/test_whitelist.py----------------------------------------
A:pandas.tests.groupby.test_whitelist.df_whitelist->frozenset(['last', 'first', 'mean', 'sum', 'min', 'max', 'head', 'tail', 'cumcount', 'resample', 'rank', 'quantile', 'fillna', 'mad', 'any', 'all', 'take', 'idxmax', 'idxmin', 'shift', 'tshift', 'ffill', 'bfill', 'pct_change', 'skew', 'plot', 'boxplot', 'hist', 'median', 'dtypes', 'corrwith', 'corr', 'cov', 'diff'])
A:pandas.tests.groupby.test_whitelist.s_whitelist->frozenset(['last', 'first', 'mean', 'sum', 'min', 'max', 'head', 'tail', 'cumcount', 'resample', 'rank', 'quantile', 'fillna', 'mad', 'any', 'all', 'take', 'idxmax', 'idxmin', 'shift', 'tshift', 'ffill', 'bfill', 'pct_change', 'skew', 'plot', 'hist', 'median', 'dtype', 'corr', 'cov', 'diff', 'unique', 'nlargest', 'nsmallest'])
A:pandas.tests.groupby.test_whitelist.index->MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'], ['one', 'two', 'three']], labels=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3], [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]], names=['first', 'second'])
A:pandas.tests.groupby.test_whitelist.letters->numpy.array(list(ascii_lowercase))
A:pandas.tests.groupby.test_whitelist.random_letters->numpy.array(list(ascii_lowercase)).take(np.random.randint(0, 26, N))
A:pandas.tests.groupby.test_whitelist.df->DataFrame({'floats': N / 10 * Series(np.random.random(N)), 'letters': Series(random_letters)})
A:pandas.tests.groupby.test_whitelist.gb->obj.groupby(df.letters)
A:pandas.tests.groupby.test_whitelist.m->alias.get(m, m)
A:pandas.tests.groupby.test_whitelist.f->getattr(grp, name)
A:pandas.tests.groupby.test_whitelist.raw_frame->DataFrame(np.random.randn(10, 3), index=index, columns=Index(['A', 'B', 'C'], name='exp'))
A:pandas.tests.groupby.test_whitelist.grouped->frame.groupby(level=level, axis=axis)
A:pandas.tests.groupby.test_whitelist.result->getattr(grouped, op)()
A:pandas.tests.groupby.test_whitelist.expected->set(['A', 'B', 'C', 'agg', 'aggregate', 'apply', 'boxplot', 'filter', 'first', 'get_group', 'groups', 'hist', 'indices', 'last', 'max', 'mean', 'median', 'min', 'ngroups', 'nth', 'ohlc', 'plot', 'prod', 'size', 'std', 'sum', 'transform', 'var', 'sem', 'count', 'nunique', 'head', 'describe', 'cummax', 'quantile', 'rank', 'cumprod', 'tail', 'resample', 'cummin', 'fillna', 'cumsum', 'cumcount', 'all', 'shift', 'skew', 'take', 'tshift', 'pct_change', 'any', 'mad', 'corr', 'corrwith', 'cov', 'dtypes', 'ndim', 'diff', 'idxmax', 'idxmin', 'ffill', 'bfill', 'pad', 'backfill', 'rolling', 'expanding'])
A:pandas.tests.groupby.test_whitelist.msg->fmt.format(bl, type(gb).__name__)
A:pandas.tests.groupby.test_whitelist.grp->mframe.groupby(level='second')
A:pandas.tests.groupby.test_whitelist.results->set([v for v in dir(grp) if not v.startswith('_')])
A:pandas.tests.groupby.test_whitelist.rng->date_range('2014', periods=len(df))
A:pandas.tests.groupby.test_whitelist.g_exp->df[['C']].groupby(df['A'])
A:pandas.tests.groupby.test_whitelist.res->getattr(g, m)()
A:pandas.tests.groupby.test_whitelist.exp->getattr(g_exp, m)()
pandas.tests.groupby.test_whitelist.df()
pandas.tests.groupby.test_whitelist.df_letters()
pandas.tests.groupby.test_whitelist.mframe()
pandas.tests.groupby.test_whitelist.raw_frame()
pandas.tests.groupby.test_whitelist.test_groupby_blacklist(df_letters)
pandas.tests.groupby.test_whitelist.test_groupby_function_rename(mframe)
pandas.tests.groupby.test_whitelist.test_groupby_selection_with_methods(df)
pandas.tests.groupby.test_whitelist.test_groupby_whitelist(df_letters,obj,whitelist)
pandas.tests.groupby.test_whitelist.test_regression_whitelist_methods(raw_frame,op,level,axis,skipna)
pandas.tests.groupby.test_whitelist.test_tab_completion(mframe)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/groupby/common.py----------------------------------------
A:pandas.tests.groupby.common.index->MultiIndex(levels=[['foo', 'bar', 'baz', 'qux'], ['one', 'two', 'three']], labels=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3], [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]], names=['first', 'second'])
A:pandas.tests.groupby.common.self.ts->pandas.util.testing.makeTimeSeries()
A:pandas.tests.groupby.common.self.seriesd->pandas.util.testing.getSeriesData()
A:pandas.tests.groupby.common.self.tsd->pandas.util.testing.getTimeSeriesData()
A:pandas.tests.groupby.common.self.frame->DataFrame(self.seriesd)
A:pandas.tests.groupby.common.self.tsframe->DataFrame(self.tsd)
A:pandas.tests.groupby.common.self.df->df()
A:pandas.tests.groupby.common.self.df_mixed_floats->DataFrame({'A': ['foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'foo'], 'B': ['one', 'one', 'two', 'three', 'two', 'two', 'one', 'three'], 'C': np.random.randn(8), 'D': np.array(np.random.randn(8), dtype='float32')})
A:pandas.tests.groupby.common.self.mframe->mframe()
A:pandas.tests.groupby.common.self.three_group->DataFrame({'A': ['foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'foo', 'foo', 'foo'], 'B': ['one', 'one', 'one', 'two', 'one', 'one', 'one', 'two', 'two', 'two', 'one'], 'C': ['dull', 'dull', 'shiny', 'dull', 'dull', 'shiny', 'shiny', 'dull', 'shiny', 'shiny', 'shiny'], 'D': np.random.randn(11), 'E': np.random.randn(11), 'F': np.random.randn(11)})
pandas.tests.groupby.common.MixIn(object)
pandas.tests.groupby.common.MixIn.setup_method(self,method)
pandas.tests.groupby.common.assert_fp_equal(a,b)
pandas.tests.groupby.common.df()
pandas.tests.groupby.common.mframe()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/groupby/test_transform.py----------------------------------------
A:pandas.tests.groupby.test_transform.data->numpy.array([[1], [2], [3], [np.nan], [4]], dtype='float64')
A:pandas.tests.groupby.test_transform.index->pandas.MultiIndex.from_arrays([[0, 0, 0, 1, 1, 1], [1, 2, 3, 1, 2, 3]])
A:pandas.tests.groupby.test_transform.grouped->pandas.DataFrame(np.random.randint(1, 10, (4, 12)), columns=cols, index=['A', 'C', 'G', 'T']).groupby('c')
A:pandas.tests.groupby.test_transform.transformed->pandas.DataFrame(np.random.randint(1, 10, (4, 12)), columns=cols, index=['A', 'C', 'G', 'T']).groupby('c').transform(lambda x: x * x.sum())
A:pandas.tests.groupby.test_transform.df->pandas.DataFrame(np.random.randint(1, 10, (4, 12)), columns=cols, index=['A', 'C', 'G', 'T'])
A:pandas.tests.groupby.test_transform.expected->gb[c].apply(targop)
A:pandas.tests.groupby.test_transform.result->pandas.DataFrame(np.random.randint(1, 10, (4, 12)), columns=cols, index=['A', 'C', 'G', 'T']).groupby('c').apply(f)
A:pandas.tests.groupby.test_transform.people->DataFrame(np.random.randn(5, 5), columns=['a', 'b', 'c', 'd', 'e'], index=['Joe', 'Steve', 'Wes', 'Jim', 'Travis'])
A:pandas.tests.groupby.test_transform.g->pandas.DataFrame(np.random.randint(1, 10, (4, 12)), columns=cols, index=['A', 'C', 'G', 'T']).groupby('A')
A:pandas.tests.groupby.test_transform.values->numpy.repeat(grp.mean().values, _ensure_platform_int(grp.count().values))
A:pandas.tests.groupby.test_transform.agged->gp.mean(1)
A:pandas.tests.groupby.test_transform.res->f(group)
A:pandas.tests.groupby.test_transform.r->len(base.index)
A:pandas.tests.groupby.test_transform.c->len(base.columns)
A:pandas.tests.groupby.test_transform.tso->DataFrame(np.random.randn(r, c), index=base.index, columns=base.columns, dtype='float64')
A:pandas.tests.groupby.test_transform.filled->pandas.DataFrame(np.random.randint(1, 10, (4, 12)), columns=cols, index=['A', 'C', 'G', 'T']).groupby('c').fillna(method='pad')
A:pandas.tests.groupby.test_transform.expected['C']->grouped['C'].transform(np.mean)
A:pandas.tests.groupby.test_transform.expected['D']->grouped['D'].transform(np.mean)
A:pandas.tests.groupby.test_transform.s->Series(np.random.randn(1000))
A:pandas.tests.groupby.test_transform.ans->numpy.zeros_like(data)
A:pandas.tests.groupby.test_transform.labels->numpy.random.randint(0, 50, size=1000).astype(float)
A:pandas.tests.groupby.test_transform.actual->numpy.zeros_like(data, dtype='int64')
A:pandas.tests.groupby.test_transform.s_missing->Series(np.random.randn(1000)).copy()
A:pandas.tests.groupby.test_transform.strings->list('qwertyuiopasdfghjklz')
A:pandas.tests.groupby.test_transform.df['cat']->df['string'].astype('category')
A:pandas.tests.groupby.test_transform.df2->pandas.DataFrame(np.random.randint(1, 10, (4, 12)), columns=cols, index=['A', 'C', 'G', 'T']).copy()
A:pandas.tests.groupby.test_transform.df2.index->pandas.MultiIndex.from_product([range(100), range(10)])
A:pandas.tests.groupby.test_transform.gb->pandas.DataFrame(np.random.randint(1, 10, (4, 12)), columns=cols, index=['A', 'C', 'G', 'T']).groupby(**gb_target)
A:pandas.tests.groupby.test_transform.i->gb[['int']].apply(targop)
A:pandas.tests.groupby.test_transform.f->gb[['float', 'float_missing']].apply(targop)
A:pandas.tests.groupby.test_transform.cols->pandas.MultiIndex.from_tuples([('syn', 'A'), ('mis', 'A'), ('non', 'A'), ('syn', 'C'), ('mis', 'C'), ('non', 'C'), ('syn', 'T'), ('mis', 'T'), ('non', 'T'), ('syn', 'G'), ('mis', 'G'), ('non', 'G')])
pandas.tests.groupby.test_transform.TestGroupBy(MixIn)
pandas.tests.groupby.test_transform.TestGroupBy.test_cython_group_transform_algos(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_cython_transform(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_dispatch_transform(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_groupby_transform_with_int(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_groupby_transform_with_nan_group(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_series_fast_transform_date(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_transform(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_transform_axis(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_transform_broadcast(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_transform_bug(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_transform_casting(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_transform_coercion(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_transform_datetime_to_numeric(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_transform_datetime_to_timedelta(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_transform_dtype(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_transform_exclude_nuisance(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_transform_fast(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_transform_function_aliases(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_transform_length(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_transform_mixed_type(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_transform_multiple(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_transform_select_columns(self)
pandas.tests.groupby.test_transform.TestGroupBy.test_transform_with_non_scalar_group(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/groupby/test_bin_groupby.py----------------------------------------
A:pandas.tests.groupby.test_bin_groupby.obj->numpy.array(np.random.randn(20), dtype=dtype)
A:pandas.tests.groupby.test_bin_groupby.labels->_ensure_int64(np.repeat(np.arange(3), np.diff(np.r_[0, bins])))
A:pandas.tests.groupby.test_bin_groupby.grouper->pandas._libs.lib.SeriesBinGrouper(obj, np.mean, bins, dummy)
A:pandas.tests.groupby.test_bin_groupby.(result, counts)->pandas._libs.lib.SeriesBinGrouper(obj, np.mean, bins, dummy).get_result()
A:pandas.tests.groupby.test_bin_groupby.expected->numpy.random.randn(100, 4).sum(1)
A:pandas.tests.groupby.test_bin_groupby.exp_counts->numpy.array([3, 3, 4], dtype=np.int64)
A:pandas.tests.groupby.test_bin_groupby.bins->numpy.array([6, 12, 20])
A:pandas.tests.groupby.test_bin_groupby.self.obj->numpy.random.randn(10, 1)
A:pandas.tests.groupby.test_bin_groupby.self.labels->numpy.array([0, 0, 0, 1, 1, 1, 2, 2, 2, 2], dtype=np.int64)
A:pandas.tests.groupby.test_bin_groupby.self.bins->numpy.array([3, 6], dtype=np.int64)
A:pandas.tests.groupby.test_bin_groupby.values->numpy.array([1, 2, 3, 4, 5, 6], dtype=np.int64)
A:pandas.tests.groupby.test_bin_groupby.binner->numpy.array([0, 3, 6], dtype=np.int64)
A:pandas.tests.groupby.test_bin_groupby.out->numpy.zeros((3, 4), dtype)
A:pandas.tests.groupby.test_bin_groupby.counts->numpy.zeros(len(out), dtype=np.int64)
A:pandas.tests.groupby.test_bin_groupby.func->getattr(groupby, 'group_ohlc_%s' % dtype)
A:pandas.tests.groupby.test_bin_groupby.arr->numpy.random.randn(100, 4)
A:pandas.tests.groupby.test_bin_groupby.result->pandas._libs.lib.reduce(arr, np.sum, axis=1, dummy=dummy, labels=Index(np.arange(100)))
A:pandas.tests.groupby.test_bin_groupby.dummy->Series(0.0, index=np.arange(4))
pandas.tests.groupby.test_bin_groupby.TestBinGroupers(object)
pandas.tests.groupby.test_bin_groupby.TestBinGroupers.setup_method(self,method)
pandas.tests.groupby.test_bin_groupby.TestBinGroupers.test_generate_bins(self)
pandas.tests.groupby.test_bin_groupby.TestMoments(object)
pandas.tests.groupby.test_bin_groupby.TestReducer(object)
pandas.tests.groupby.test_bin_groupby.TestReducer.test_int_index(self)
pandas.tests.groupby.test_bin_groupby.test_group_ohlc()
pandas.tests.groupby.test_bin_groupby.test_series_bin_grouper()
pandas.tests.groupby.test_bin_groupby.test_series_grouper()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/groupby/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/groupby/test_value_counts.py----------------------------------------
A:pandas.tests.groupby.test_value_counts.arr->list(map(df.index.get_level_values, range(df.index.nlevels)))
A:pandas.tests.groupby.test_value_counts.df.index->pandas.MultiIndex.from_arrays(arr, names=df.index.names)
A:pandas.tests.groupby.test_value_counts.kwargs->dict(normalize=normalize, sort=sort, ascending=ascending, dropna=dropna, bins=bins)
A:pandas.tests.groupby.test_value_counts.gr->df.groupby(keys, sort=isort)
A:pandas.tests.groupby.test_value_counts.left->gr['3rd'].value_counts(**kwargs)
A:pandas.tests.groupby.test_value_counts.right->gr['3rd'].apply(Series.value_counts, **kwargs)
A:pandas.tests.groupby.test_value_counts.(left, right)->map(rebuild_index, (left, right))
A:pandas.tests.groupby.test_value_counts.days->date_range('2015-08-24', periods=10)
A:pandas.tests.groupby.test_value_counts.frame->DataFrame({'1st': np.random.choice(list('abcd'), n), '2nd': np.random.choice(days, n), '3rd': np.random.randint(1, m + 1, n)})
pandas.tests.groupby.test_value_counts.test_series_groupby_value_counts(n,m)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/groupby/test_groupby.py----------------------------------------
A:pandas.tests.groupby.test_groupby.data->pandas.Series(name='name')
A:pandas.tests.groupby.test_groupby.index->pandas.MultiIndex.from_arrays([data.id, data.amount])
A:pandas.tests.groupby.test_groupby.grouped->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby([pd.TimeGrouper(freq='M'), 'event'])
A:pandas.tests.groupby.test_groupby.agged->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby([pd.TimeGrouper(freq='M'), 'event']).mean()
A:pandas.tests.groupby.test_groupby.expected->f(df.groupby(tups)[field])
A:pandas.tests.groupby.test_groupby.transformed->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby([pd.TimeGrouper(freq='M'), 'event']).transform(lambda x: x.mean())
A:pandas.tests.groupby.test_groupby.value_grouped->pandas.Series(name='name').groupby(data)
A:pandas.tests.groupby.test_groupby.df->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3})
A:pandas.tests.groupby.test_groupby.g->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby(['A', 'B'])
A:pandas.tests.groupby.test_groupby.result1->DataFrame({'groups': [1, 1, 1, 2], 'vars': [0, 1, 2, 3]}).groupby('groups').apply(test_func)
A:pandas.tests.groupby.test_groupby.result2->DataFrame({'groups': [1, 2, 2, 2], 'vars': [0, 1, 2, 3]}).groupby('groups').apply(test_func)
A:pandas.tests.groupby.test_groupby.df.index->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).index.astype(float)
A:pandas.tests.groupby.test_groupby.dates->date_range('01-Jan-2013', periods=12, freq='MS')
A:pandas.tests.groupby.test_groupby.date_index->pandas.MultiIndex.from_product([dates, dates], names=['foo', 'bar'])
A:pandas.tests.groupby.test_groupby.expected.columns->pandas.Index([0], dtype='int64')
A:pandas.tests.groupby.test_groupby.result->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby(['Number']).apply(lambda x: x.iloc[0])
A:pandas.tests.groupby.test_groupby.s->self.frame['C'].copy()
A:pandas.tests.groupby.test_groupby.idx->pandas.MultiIndex.from_tuples([(1, 1), (1, 2), (3, 4), (5, 6)], names=idx_names)
A:pandas.tests.groupby.test_groupby.df_multi->pandas.DataFrame({'A': np.arange(6), 'B': ['one', 'one', 'two', 'two', 'one', 'one']}, index=idx)
A:pandas.tests.groupby.test_groupby.df_single->pandas.DataFrame({'A': np.arange(6), 'B': ['one', 'one', 'two', 'two', 'one', 'one']}, index=idx).reset_index('outer')
A:pandas.tests.groupby.test_groupby.df_multi_both->pandas.DataFrame({'A': np.arange(6), 'B': ['one', 'one', 'two', 'two', 'one', 'one'], 'inner': [1, 1, 1, 1, 1, 1]}, index=idx)
A:pandas.tests.groupby.test_groupby.df_single_both->pandas.DataFrame({'A': np.arange(6), 'B': ['one', 'one', 'two', 'two', 'one', 'one'], 'inner': [1, 1, 1, 1, 1, 1]}, index=idx).reset_index('outer')
A:pandas.tests.groupby.test_groupby.not_expected->pandas.DataFrame({'A': np.arange(6), 'B': ['one', 'one', 'two', 'two', 'one', 'one'], 'inner': [1, 1, 1, 1, 1, 1]}, index=idx).reset_index('outer').groupby([pd.Grouper(level='inner'), 'B']).mean()
A:pandas.tests.groupby.test_groupby.c->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby([pd.TimeGrouper(freq='M'), 'event']).count()
A:pandas.tests.groupby.test_groupby.expected2->DataFrame({'groups': [2, 2], 'vars': [1, 3]}, index=index2)
A:pandas.tests.groupby.test_groupby.ts->Series(np.random.randn(100), index=dr)
A:pandas.tests.groupby.test_groupby.df['value']->df['value'].astype(float).astype(float)
A:pandas.tests.groupby.test_groupby.applied->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby('A').apply(max_value)
A:pandas.tests.groupby.test_groupby.df1->pandas.DataFrame({'Key': ['B', 'B', 'A', 'A'], 'State': ['step1', 'step2', 'step1', 'step2'], 'oTime': ['', '2016-09-19 05:24:33', '', '2016-09-19 23:59:04'], 'Machine': ['23', '36L', '36R', '36R']})
A:pandas.tests.groupby.test_groupby.df2->pandas.DataFrame({'Key': ['B', 'B', 'A', 'A'], 'State': ['step1', 'step2', 'step1', 'step2'], 'oTime': ['', '2016-09-19 05:24:33', '', '2016-09-19 23:59:04'], 'Machine': ['23', '36L', '36R', '36R']}).copy()
A:pandas.tests.groupby.test_groupby.e->Series([0, 1, 1, 0, 1, 2], index=MultiIndex.from_arrays([list('aaabbb'), [4, 1, 0, 9, 8, 7]]))
A:pandas.tests.groupby.test_groupby.wp->pandas.util.testing.makePanel()
A:pandas.tests.groupby.test_groupby.gp->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby([pd.TimeGrouper(freq='M'), 'event']).get_group(1)
A:pandas.tests.groupby.test_groupby.result3->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby(0)[[2, 4]].mean()
A:pandas.tests.groupby.test_groupby.d->pandas.Series(name='name').select(lambda x: x.hour < 11).dropna()
A:pandas.tests.groupby.test_groupby.gr->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby(df['A', 'a'])
A:pandas.tests.groupby.test_groupby.dt->pandas.to_datetime(['2010-01-01', '2010-01-02', '2010-01-01', '2010-01-02'])
A:pandas.tests.groupby.test_groupby.exp_idx->pandas.Index(['2011.05.16', '2011.05.17', '2011.05.18'], dtype=object, name='date')
A:pandas.tests.groupby.test_groupby.dfg_no_conversion->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby(by=['a']).apply(func_with_no_date)
A:pandas.tests.groupby.test_groupby.dfg_no_conversion_expected->pandas.DataFrame({'c': 2}, index=[1])
A:pandas.tests.groupby.test_groupby.dfg_conversion->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby(by=['a']).apply(func_with_date)
A:pandas.tests.groupby.test_groupby.dfg_conversion_expected->pandas.DataFrame({'b': datetime(2015, 1, 1), 'c': 2}, index=[1])
A:pandas.tests.groupby.test_groupby.groupings->numpy.random.random((1100,))
A:pandas.tests.groupby.test_groupby.values->Series(np.random.randn(50), index=index[::2])
A:pandas.tests.groupby.test_groupby.labels->numpy.random.randint(0, 50, size=1000).astype(float)
A:pandas.tests.groupby.test_groupby.multiindex->MultiIndex(levels=[[]] * 2, labels=[[]] * 2, names=['foo', 'bar'])
A:pandas.tests.groupby.test_groupby.res->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby([pd.TimeGrouper(freq='M'), 'event']).get_group((pd.Timestamp('2014-08-31'), 'start'))
A:pandas.tests.groupby.test_groupby.y->y.set_index(['b', 'c']).set_index(['b', 'c'])
A:pandas.tests.groupby.test_groupby.expected[name]->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby([pd.TimeGrouper(freq='M'), 'event']).get_group(1).describe()
A:pandas.tests.groupby.test_groupby.group->pandas.DataFrame(group.values, columns=group_col, index=group.index)
A:pandas.tests.groupby.test_groupby.group_col->pandas.MultiIndex([[col] * len(group.columns), group.columns], [[0] * len(group.columns), range(len(group.columns))])
A:pandas.tests.groupby.test_groupby.groupedT->self.tsframe.T.groupby(mapping, axis=0)
A:pandas.tests.groupby.test_groupby.expected.index->pandas.Index([0, 1])
A:pandas.tests.groupby.test_groupby.aggregated->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby([pd.TimeGrouper(freq='M'), 'event']).aggregate(np.mean)
A:pandas.tests.groupby.test_groupby.tscopy->self.tsframe.copy()
A:pandas.tests.groupby.test_groupby.stragged->self.tsframe.copy().groupby('weekday').aggregate(np.mean)
A:pandas.tests.groupby.test_groupby.mean->pandas.DataFrame(group.values, columns=group_col, index=group.index).mean()
A:pandas.tests.groupby.test_groupby.samething->self.tsframe.index.take(indices[k])
A:pandas.tests.groupby.test_groupby.k1->numpy.array(['b', 'b', 'b', 'a', 'a', 'a'])
A:pandas.tests.groupby.test_groupby.k2->numpy.array(['1', '2', '1', '2', '1', '2'])
A:pandas.tests.groupby.test_groupby.iterated->list(grouped)
A:pandas.tests.groupby.test_groupby.df['k1']->numpy.array(['b', 'b', 'b', 'a', 'a', 'a'])
A:pandas.tests.groupby.test_groupby.df['k2']->numpy.array(['1', '1', '1', '2', '2', '2'])
A:pandas.tests.groupby.test_groupby.three_levels->self.three_group.groupby(['A', 'B', 'C']).mean()
A:pandas.tests.groupby.test_groupby.expected[n1][n2]->op(gp2.loc[:, ['C', 'D']])
A:pandas.tests.groupby.test_groupby.result_col->op(grouped[col])
A:pandas.tests.groupby.test_groupby.pivoted->result1[col].unstack()
A:pandas.tests.groupby.test_groupby.pivoted2->op(grouped[col]).unstack()
A:pandas.tests.groupby.test_groupby.expected3->DataFrame(expected3).rename(columns={'C': 'Q'})
A:pandas.tests.groupby.test_groupby.left->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby(['A', 'B', 'C', 'D']).sum()
A:pandas.tests.groupby.test_groupby.right->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby(['D', 'C', 'B', 'A']).sum()
A:pandas.tests.groupby.test_groupby.days->date_range('2015-08-23', periods=10)
A:pandas.tests.groupby.test_groupby.frame->DataFrame({'jim': np.random.choice(list(ascii_lowercase), n), 'joe': np.random.choice(days, n), 'julie': np.random.randint(0, m, n)})
A:pandas.tests.groupby.test_groupby.df.columns->numpy.arange(len(df.columns))
A:pandas.tests.groupby.test_groupby.grouped2->self.df.groupby(['A', 'B'], as_index=False)
A:pandas.tests.groupby.test_groupby.arrays->lzip(*expected.index.values)
A:pandas.tests.groupby.test_groupby.g_as->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby('A', as_index=True)
A:pandas.tests.groupby.test_groupby.g_not_as->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby('A', as_index=False)
A:pandas.tests.groupby.test_groupby.exp->pandas.DataFrame([], index=pd.Index(['a', 'b', 's'], name='a'))
A:pandas.tests.groupby.test_groupby.exp_not_as_apply->pandas.MultiIndex.from_tuples([(0, 0), (0, 2), (1, 1), (2, 4)])
A:pandas.tests.groupby.test_groupby.exp_as_apply->pandas.MultiIndex.from_tuples(tp, names=['user_id', None])
A:pandas.tests.groupby.test_groupby.ind->DatetimeIndex(start='2012/1/1', freq='5min', periods=periods)
A:pandas.tests.groupby.test_groupby.empty_not_as->DataFrame(columns=df.columns, index=pd.Index([], dtype=df.index.dtype))
A:pandas.tests.groupby.test_groupby.empty_not_as['A']->empty_not_as['A'].astype(df.A.dtype).astype(df.A.dtype)
A:pandas.tests.groupby.test_groupby.empty_not_as['B']->empty_not_as['B'].astype(df.B.dtype).astype(df.B.dtype)
A:pandas.tests.groupby.test_groupby.empty_as->DataFrame(index=df_as.index[:0], columns=df.columns)
A:pandas.tests.groupby.test_groupby.empty_as['A']->empty_not_as['A'].astype(df.A.dtype).astype(df.A.dtype).astype(df.A.dtype)
A:pandas.tests.groupby.test_groupby.empty_as['B']->empty_not_as['B'].astype(df.B.dtype).astype(df.B.dtype).astype(df.B.dtype)
A:pandas.tests.groupby.test_groupby.df['E']->datetime.datetime.now()
A:pandas.tests.groupby.test_groupby.agged_A->grouped['A'].apply(np.mean)
A:pandas.tests.groupby.test_groupby.df['jolie']->numpy.random.randn(1000)
A:pandas.tests.groupby.test_groupby.ngroups->len(df.drop_duplicates(subset=keys))
A:pandas.tests.groupby.test_groupby.aa->DataFrame({'nn': [11, 11, 22, 22], 'ii': [1, 2, 3, 4], 'ss': 4 * ['mama']})
A:pandas.tests.groupby.test_groupby.expected_columns_numeric->Index(['int', 'float', 'category_int'])
A:pandas.tests.groupby.test_groupby.f->getattr(df.groupby('group'), attr)
A:pandas.tests.groupby.test_groupby.expected_columns->Index(['int', 'float', 'category_int', 'timedelta'])
A:pandas.tests.groupby.test_groupby.agged2->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby([pd.TimeGrouper(freq='M'), 'event']).agg(lambda x: x.mean('items'))
A:pandas.tests.groupby.test_groupby.deleveled->DataFrame({'jim': np.random.choice(list(ascii_lowercase), n), 'joe': np.random.choice(days, n), 'julie': np.random.randint(0, m, n)}).reset_index()
A:pandas.tests.groupby.test_groupby.result0->DataFrame({'jim': np.random.choice(list(ascii_lowercase), n), 'joe': np.random.choice(days, n), 'julie': np.random.randint(0, m, n)}).groupby(mapper0, level=0).sum()
A:pandas.tests.groupby.test_groupby.expected0->DataFrame({'jim': np.random.choice(list(ascii_lowercase), n), 'joe': np.random.choice(days, n), 'julie': np.random.randint(0, m, n)}).groupby(mapped_level0).sum()
A:pandas.tests.groupby.test_groupby.expected1->DataFrame({'groups': [1, 1], 'vars': [0, 2]}, index=index1)
A:pandas.tests.groupby.test_groupby.mapped_level0->numpy.array([mapper0.get(x) for x in deleveled['first']])
A:pandas.tests.groupby.test_groupby.mapped_level1->numpy.array([mapper1.get(x) for x in deleveled['second']])
A:pandas.tests.groupby.test_groupby.a->Series([1, 1, 3, 2, 0, 3, 3, 2, 1, 0])
A:pandas.tests.groupby.test_groupby.exp_labels->numpy.array([2, 2, 2, 0, 0, 1, 1, 3, 3, 3], dtype=np.intp)
A:pandas.tests.groupby.test_groupby.logged->numpy.log(piece)
A:pandas.tests.groupby.test_groupby.dr->date_range('2015-08-30', periods=n // 10, freq='T')
A:pandas.tests.groupby.test_groupby.mydf->DataFrame({'cat1': ['a'] * 8 + ['b'] * 6, 'cat2': ['c'] * 2 + ['d'] * 2 + ['e'] * 2 + ['f'] * 2 + ['c'] * 2 + ['d'] * 2 + ['e'] * 2, 'cat3': lmap(lambda x: 'g%s' % x, lrange(1, 15)), 'val': np.random.randint(100, size=14)})
A:pandas.tests.groupby.test_groupby.x->numpy.arange(n)
A:pandas.tests.groupby.test_groupby.x['rank']->numpy.arange(n).val.rank(method='min')
A:pandas.tests.groupby.test_groupby.grpby_copy->DataFrame({'cat1': ['a'] * 8 + ['b'] * 6, 'cat2': ['c'] * 2 + ['d'] * 2 + ['e'] * 2 + ['f'] * 2 + ['c'] * 2 + ['d'] * 2 + ['e'] * 2, 'cat3': lmap(lambda x: 'g%s' % x, lrange(1, 15)), 'val': np.random.randint(100, size=14)}).groupby('cat1').apply(f_copy)
A:pandas.tests.groupby.test_groupby.grpby_no_copy->DataFrame({'cat1': ['a'] * 8 + ['b'] * 6, 'cat2': ['c'] * 2 + ['d'] * 2 + ['e'] * 2 + ['f'] * 2 + ['c'] * 2 + ['d'] * 2 + ['e'] * 2, 'cat3': lmap(lambda x: 'g%s' % x, lrange(1, 15)), 'val': np.random.randint(100, size=14)}).groupby('cat1').apply(f_no_copy)
A:pandas.tests.groupby.test_groupby.s1->Series([5.0, -9.0, 4.0, 100.0, -5.0, 55.0, 6.7], index=Index(['a', 'b', 'c', 'd', 'e', 'f', 'g']))
A:pandas.tests.groupby.test_groupby.s2->Series([1.0, 1.0, 4.0, 5.0, 5.0, 7.0], index=Index(['a', 'b', 'd', 'f', 'g', 'h']))
A:pandas.tests.groupby.test_groupby.tuples->list(zip(*[['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'], ['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two']]))
A:pandas.tests.groupby.test_groupby.columns->pandas.MultiIndex.from_tuples([('A', 'cat'), ('B', 'dog'), ('B', 'cat'), ('A', 'dog')])
A:pandas.tests.groupby.test_groupby.(sorted_columns, _)->pandas.MultiIndex.from_tuples([('A', 'cat'), ('B', 'dog'), ('B', 'cat'), ('A', 'dog')]).sortlevel(0)
A:pandas.tests.groupby.test_groupby.ts_grouped->self.ts.groupby(lambda x: x.month)
A:pandas.tests.groupby.test_groupby.agg_result->df.groupby(level=['group1', 'group2'], sort=True).agg(f, q=80)
A:pandas.tests.groupby.test_groupby.apply_result->df.groupby(level=['group1', 'group2'], sort=True).apply(DataFrame.quantile, q=0.8)
A:pandas.tests.groupby.test_groupby.trans_result->self.ts.groupby(lambda x: x.month).transform(f, q=80)
A:pandas.tests.groupby.test_groupby.agg_expected->self.ts.groupby(lambda x: x.month).quantile(0.8)
A:pandas.tests.groupby.test_groupby.trans_expected->self.ts.groupby(lambda x: x.month).transform(g)
A:pandas.tests.groupby.test_groupby.df_grouped->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby(level=['group1', 'group2'], sort=True)
A:pandas.tests.groupby.test_groupby.out->pandas.Series(index=['p1', 'p2', 'useTime'], dtype=object)
A:pandas.tests.groupby.test_groupby.df['9th']->df['9th'].astype('category').astype('category')
A:pandas.tests.groupby.test_groupby.count_as->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby('A').count()
A:pandas.tests.groupby.test_groupby.count_not_as->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby('A', as_index=False).count()
A:pandas.tests.groupby.test_groupby.count_B->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby('A')['B'].count()
A:pandas.tests.groupby.test_groupby.vals->numpy.hstack((np.random.randint(0, 5, (100, 2)), np.random.randint(0, 2, (100, 2))))
A:pandas.tests.groupby.test_groupby.df['a']->df['a'].astype(t).astype(t)
A:pandas.tests.groupby.test_groupby.df['b']->df['b'].astype(t).astype(t)
A:pandas.tests.groupby.test_groupby.gni->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby('A', as_index=False)
A:pandas.tests.groupby.test_groupby.expected_index->pandas.Index([1, 3], name='A')
A:pandas.tests.groupby.test_groupby.expected_col->pandas.MultiIndex(levels=[['B'], ['count', 'mean', 'std', 'min', '25%', '50%', '75%', 'max']], labels=[[0] * 8, list(range(8))])
A:pandas.tests.groupby.test_groupby.expected['v2']->numpy.tile([0.0, 0.5, 1], 2)
A:pandas.tests.groupby.test_groupby.metrics->self.df.groupby('A').apply(summarize_random_name)
A:pandas.tests.groupby.test_groupby.arr->numpy.empty((100, 100))
A:pandas.tests.groupby.test_groupby.obj->Series(arr[:, 0], index=lrange(100))
A:pandas.tests.groupby.test_groupby.inds->numpy.tile(lrange(10), 10)
A:pandas.tests.groupby.test_groupby.labels2->numpy.random.randint(0, 3, size=N)
A:pandas.tests.groupby.test_groupby.splitter->pandas.core.resample.TimeGrouper('D')._get_splitter(g._selected_obj, axis=g.axis)
A:pandas.tests.groupby.test_groupby.group_keys->pandas.core.resample.TimeGrouper('D')._get_group_keys()
A:pandas.tests.groupby.test_groupby.(values, mutated)->pandas.core.resample.TimeGrouper('D')._get_splitter(g._selected_obj, axis=g.axis).fast_apply(f, group_keys)
A:pandas.tests.groupby.test_groupby.exp_index->Index([], name='x', dtype=np.float64)
A:pandas.tests.groupby.test_groupby.keys->sorted(grouped.groups.keys())
A:pandas.tests.groupby.test_groupby.nan_df->DataFrame({'nan': [np.nan, np.nan, np.nan], 'nat': [pd.NaT, pd.NaT, pd.NaT]})
A:pandas.tests.groupby.test_groupby.sdf->self.df[['C', 'D']].to_sparse()
A:pandas.tests.groupby.test_groupby.panel->pandas.util.testing.makePanel()
A:pandas.tests.groupby.test_groupby.self.panel->pandas.util.testing.makePanel()
A:pandas.tests.groupby.test_groupby.tmp->pandas.Series(name='name').select(lambda x: x.hour < 11).dropna().groupby(['group']).mean()
A:pandas.tests.groupby.test_groupby.res_values->numpy.array([[0, 1], [0, 1]], dtype=np.int64)
A:pandas.tests.groupby.test_groupby.B->numpy.concatenate((np.arange(10000), np.arange(10000), np.arange(5000)))
A:pandas.tests.groupby.test_groupby.A->numpy.arange(25000)
A:pandas.tests.groupby.test_groupby.tups->pandas.core.common._asarray_tuplesafe(tups)
A:pandas.tests.groupby.test_groupby.lev1->pandas.util.testing.rands_array(10, 100)
A:pandas.tests.groupby.test_groupby.lev2->pandas.util.testing.rands_array(10, 130)
A:pandas.tests.groupby.test_groupby.lab1->numpy.random.randint(0, 100, size=500)
A:pandas.tests.groupby.test_groupby.lab2->numpy.random.randint(0, 130, size=500)
A:pandas.tests.groupby.test_groupby.tsf->pandas.util.testing.makeTimeDataFrame()
A:pandas.tests.groupby.test_groupby.mseries->Series([0, 1, 2, 3, 4, 5], index=index)
A:pandas.tests.groupby.test_groupby.mseries_result->Series([0, 2, 4], index=index)
A:pandas.tests.groupby.test_groupby.closure_bad->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby([pd.TimeGrouper(freq='M'), 'event']).agg({'high': agg_before(11, np.max)})
A:pandas.tests.groupby.test_groupby.closure_good->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby([pd.TimeGrouper(freq='M'), 'event']).agg({'high': agg_before(11, np.max, True)})
A:pandas.tests.groupby.test_groupby.midx->pandas.MultiIndex.from_tuples(l)
A:pandas.tests.groupby.test_groupby.rs->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby(labels).agg(np.median)
A:pandas.tests.groupby.test_groupby.xp->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby(labels).median()
A:pandas.tests.groupby.test_groupby.grps->range(0, 55, 5)
A:pandas.tests.groupby.test_groupby.bins->pandas.cut(df[0], grps)
A:pandas.tests.groupby.test_groupby.df_in->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).copy()
A:pandas.tests.groupby.test_groupby.df_in['b']->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).copy().b.astype(dtype)
A:pandas.tests.groupby.test_groupby.df_out->pandas.DataFrame(exp)
A:pandas.tests.groupby.test_groupby.df_out['b']->pandas.DataFrame(exp).b.astype(out_type)
A:pandas.tests.groupby.test_groupby.grpd->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby('a')
A:pandas.tests.groupby.test_groupby.t->getattr(grpd, method)(*data['args'])
A:pandas.tests.groupby.test_groupby.lexsorted_mi->pandas.MultiIndex.from_tuples([('a', ''), ('b1', 'c1'), ('b2', 'c2')], names=['b', 'c'])
A:pandas.tests.groupby.test_groupby.lexsorted_df->DataFrame([[1, 3, 4]], columns=lexsorted_mi)
A:pandas.tests.groupby.test_groupby.not_lexsorted_df->not_lexsorted_df.reset_index().reset_index()
A:pandas.tests.groupby.test_groupby.by_levels->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby(level=idx_names).mean()
A:pandas.tests.groupby.test_groupby.by_columns->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).reset_index().groupby(idx_names).mean()
A:pandas.tests.groupby.test_groupby.by_columns.columns->pandas.Index(by_columns.columns, dtype=np.int64)
A:pandas.tests.groupby.test_groupby.series->pandas.Series(data, index)
A:pandas.tests.groupby.test_groupby.grouper->pandas.core.resample.TimeGrouper('D')
A:pandas.tests.groupby.test_groupby.ge->DataFrame().groupby(level=0)
A:pandas.tests.groupby.test_groupby.se->Series().groupby(level=0)
A:pandas.tests.groupby.test_groupby.mi->pandas.MultiIndex.from_arrays([list('AAB'), list('aba')])
A:pandas.tests.groupby.test_groupby.actual->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby('key')['value'].cumprod()
A:pandas.tests.groupby.test_groupby.gb->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby('a')
A:pandas.tests.groupby.test_groupby.r->pandas.DataFrame({'A': [10, 20, 30], 'B': ['foo', '3', '4'], 'T': [pd.Timestamp('12:31:22')] * 3}).groupby('a').nsmallest(3)
A:pandas.tests.groupby.test_groupby.b->Series(list('a' * 5 + 'b' * 5))
A:pandas.tests.groupby.test_groupby.gb2->pandas.DataFrame({'Key': ['B', 'B', 'A', 'A'], 'State': ['step1', 'step2', 'step1', 'step2'], 'oTime': ['', '2016-09-19 05:24:33', '', '2016-09-19 23:59:04'], 'Machine': ['23', '36L', '36R', '36R']}).copy().groupby('a')
A:pandas.tests.groupby.test_groupby.test_df->DataFrame({'groups': [0, 0, 1, 1], 'random_vars': [8, 7, 4, 5]})
A:pandas.tests.groupby.test_groupby.test_df1->DataFrame({'groups': [1, 1, 1, 2], 'vars': [0, 1, 2, 3]})
A:pandas.tests.groupby.test_groupby.test_df2->DataFrame({'groups': [1, 2, 2, 2], 'vars': [0, 1, 2, 3]})
A:pandas.tests.groupby.test_groupby.index1->pandas.MultiIndex.from_arrays([[1, 1], [0, 2]], names=['groups', None])
A:pandas.tests.groupby.test_groupby.index2->pandas.MultiIndex.from_arrays([[2, 2], [1, 3]], names=['groups', None])
A:pandas.tests.groupby.test_groupby.test->pandas.DataFrame({'time': [Timestamp('2016-06-28 09:35:35'), Timestamp('2016-06-28 16:09:30'), Timestamp('2016-06-28 16:46:28')], 'data': ['1', '2', '3']}).set_index('time')
A:pandas.tests.groupby.test_groupby.base_df->pandas.DataFrame({'A': [1, 1, 1, 1, 2, 2, 2, 2], 'B': [3, 4, 3, 2, 2, 3, 2, 1]})
A:pandas.tests.groupby.test_groupby.df.Date->pandas.to_datetime(df.Date)
A:pandas.tests.groupby.test_groupby.out['p1']->str(tool[tool.State == 'step1'].Machine.values[0])
A:pandas.tests.groupby.test_groupby.out['p2']->str(tool[tool.State == 'step2'].Machine.values[0])
A:pandas.tests.groupby.test_groupby.out['useTime']->str(tool[tool.State == 'step2'].oTime.values[0])
A:pandas.tests.groupby.test_groupby.df2.oTime->pandas.to_datetime(df2.oTime)
pandas.tests.groupby.test_groupby.TestGroupBy(MixIn)
pandas.tests.groupby.test_groupby.TestGroupBy.test_apply_chunk_view(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_apply_concat_preserve_names(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_apply_corner(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_apply_corner_cases(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_apply_describe_bug(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_apply_frame_concat_series(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_apply_frame_to_series(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_apply_frame_yield_constant(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_apply_issues(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_apply_multiindex_fail(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_apply_multikey_corner(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_apply_no_name_column_conflict(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_apply_numeric_coercion_when_datetime(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_apply_series_to_frame(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_apply_series_yield_constant(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_apply_transform(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_apply_typecast_fail(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_apply_with_mixed_dtype(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_apply_without_copy(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_arg_passthru(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_as_index_series_return_frame(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_attr_wrapper(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_basic(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_basic_regression(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_builtins_apply(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_column_select_via_attr(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_consistency_name(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_convert_objects_leave_decimal_alone(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_count(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_count_cross_type(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_count_object(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_count_uses_size_on_exception(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_cumcount(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_cumcount_dupe_index(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_cumcount_empty(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_cumcount_groupby_not_col(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_cumcount_mi(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_cummin_cummax(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_cython_api2(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_cython_grouper_series_bug_noncontig(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_cython_median(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_dictify(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_dont_clobber_name_column(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_empty_groups(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_empty_groups_corner(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_fast_apply(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_fill_constistency(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_frame_describe_multikey(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_frame_describe_tupleindex(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_frame_describe_unstacked_format(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_frame_groupby(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_frame_groupby_columns(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_frame_multi_key_function_list(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_frame_set_name_single(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_gb_apply_list_of_unequal_len_arrays(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_get_group(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_get_group_empty_bins(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_get_group_grouped_by_tuple(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_getitem_list_of_columns(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_getitem_numeric_column_names(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_group_name_available_in_inference_pass(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_group_selection_cache(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_group_shift_with_null_key(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_2d_malformed(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_aggregation_mixed_dtype(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_apply_all_none(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_apply_none_first(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_args(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_as_index_agg(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_as_index_apply(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_as_index_corner(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_as_index_cython(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_as_index_series_scalar(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_complex(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_cumprod(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_dict_mapping(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_dtype_inference_empty(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_duplicated_column_errormsg(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_grouper(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_grouper_f_sanity_checked(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_head_tail(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_keys_same_size_as_index(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_level(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_level_apply(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_level_index_names(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_level_mapper(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_level_nonmulti(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_level_with_nas(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_levels_and_columns(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_list_infer_array_like(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_mixed_type_columns(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_multi_corner(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_multiindex_missing_pair(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_multiindex_not_lexsorted(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_multiple_columns(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_multiple_key(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_name_propagation(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_nat_exclude(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_non_arithmetic_agg_intlike_precision(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_non_arithmetic_agg_types(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_nonobject_dtype(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_nonstring_columns(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_one_row(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_preserves_sort(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_reindex_inside_function(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_return_type(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_series_indexed_differently(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_series_with_name(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_sort_multi(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_sort_multiindex_series(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_timedelta_cython_count(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_with_empty(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_with_hier_columns(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_with_single_column(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_with_small_elem(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groupby_wrong_multi_labels(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_grouper_column_and_index(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_grouper_column_index_level_precedence(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_grouper_creation_bug(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_grouper_getting_correct_binner(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_grouper_index_level_as_string(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_grouper_index_types(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_grouper_iter(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_grouper_multilevel_freq(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_grouping_error_on_multidim_input(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_grouping_is_iterable(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_grouping_labels(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_grouping_ndarray(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_grouping_string_repr(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_groups(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_handle_dict_return_value(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_index_label_overlaps_location(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_indices_concatenation_order(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_int32_overflow(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_intercept_builtin_sum(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_len(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_level_preserve_order(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_lower_int_prec_count(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_max_min_non_numeric(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_max_nan_bug(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_median_empty_bins(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_multi_func(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_multi_iter(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_multi_iter_frame(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_multi_iter_panel(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_multi_key_multiple_functions(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_multifunc_select_col_integer_cols(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_multifunc_sum_bug(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_multiindex_columns_empty_level(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_multiindex_negative_level(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_multiindex_passthru(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_mutate_groups(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_nlargest(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_no_dummy_key_names(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_no_mutate_but_looks_like(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_no_nonsense_name(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_non_cython_api(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_nonsense_func(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_nsmallest(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_numpy_compat(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_nunique(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_nunique_with_empty_series(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_nunique_with_object(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_nunique_with_timegrouper(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_omit_nuisance(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_omit_nuisance_python_multiple(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_ops_general(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_panel_groupby(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_pass_args_kwargs(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_pivot_table_values_key_error(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_rank_apply(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_select_bad_cols(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_series_describe_multikey(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_series_describe_single(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_series_groupby_nunique(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_series_grouper_noncontig_index(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_series_index_name(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_seriesgroupby_name_attr(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_set_group_name(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_size(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_skip_group_keys(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_sparse_friendly(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_time_field_bug(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_transform_doesnt_clobber_ints(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_with_na(self)
pandas.tests.groupby.test_groupby.TestGroupBy.test_wrap_aggregated_output_multindex(self)
pandas.tests.groupby.test_groupby._check_groupby(df,result,keys,field,f=lambdax:x.sum())


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/plotting/test_hist_method.py----------------------------------------
A:pandas.tests.plotting.test_hist_method.self.ts->pandas.util.testing.makeTimeSeries()
A:pandas.tests.plotting.test_hist_method.(fig, ax)->self.plt.subplots(1, 1)
A:pandas.tests.plotting.test_hist_method.(fig, (ax1, ax2))->self.plt.subplots(1, 2)
A:pandas.tests.plotting.test_hist_method.df->DataFrame(randn(500, 2), columns=['A', 'B'])
A:pandas.tests.plotting.test_hist_method.axes->DataFrame(randn(500, 2), columns=['A', 'B']).hist(column='height', ax=axes)
A:pandas.tests.plotting.test_hist_method.x->Series(randn(2))
A:pandas.tests.plotting.test_hist_method.y->Series(randn(2))
A:pandas.tests.plotting.test_hist_method.fig->gcf()
A:pandas.tests.plotting.test_hist_method.fig1->figure()
A:pandas.tests.plotting.test_hist_method.fig2->figure()
A:pandas.tests.plotting.test_hist_method.ax1->figure().add_subplot(111)
A:pandas.tests.plotting.test_hist_method.ax->ser.hist(log=True)
A:pandas.tests.plotting.test_hist_method.df['C']->numpy.random.randint(0, 4, 500)
A:pandas.tests.plotting.test_hist_method.height->Series(np.random.normal(60, 10, size=n))
A:pandas.tests.plotting.test_hist_method.weight->Series(np.random.normal(166, 20, size=n))
A:pandas.tests.plotting.test_hist_method.gender_int->numpy.random.choice([0, 1], size=n)
A:pandas.tests.plotting.test_hist_method.df_int->DataFrame({'height': height, 'weight': weight, 'gender': gender_int})
A:pandas.tests.plotting.test_hist_method.gb->DataFrame({'height': height, 'weight': weight, 'gender': gender_int}).groupby('gender')
A:pandas.tests.plotting.test_hist_method.(fig, axes)->self.plt.subplots(2, 3)
A:pandas.tests.plotting.test_hist_method.returned->DataFrame(randn(500, 2), columns=['A', 'B']).hist(by='classroom', ax=axes[1])
A:pandas.tests.plotting.test_hist_method.(ax1, ax2)->DataFrame(randn(500, 2), columns=['A', 'B']).hist(column='height', by=df.gender, sharex=True, sharey=True)
pandas.tests.plotting.test_hist_method.TestDataFrameGroupByPlots(TestPlotBase)
pandas.tests.plotting.test_hist_method.TestDataFrameGroupByPlots.test_axis_share_x(self)
pandas.tests.plotting.test_hist_method.TestDataFrameGroupByPlots.test_axis_share_xy(self)
pandas.tests.plotting.test_hist_method.TestDataFrameGroupByPlots.test_axis_share_y(self)
pandas.tests.plotting.test_hist_method.TestDataFrameGroupByPlots.test_grouped_hist_layout(self)
pandas.tests.plotting.test_hist_method.TestDataFrameGroupByPlots.test_grouped_hist_legacy(self)
pandas.tests.plotting.test_hist_method.TestDataFrameGroupByPlots.test_grouped_hist_legacy2(self)
pandas.tests.plotting.test_hist_method.TestDataFrameGroupByPlots.test_grouped_hist_multiple_axes(self)
pandas.tests.plotting.test_hist_method.TestDataFramePlots(TestPlotBase)
pandas.tests.plotting.test_hist_method.TestDataFramePlots.test_hist_df_legacy(self)
pandas.tests.plotting.test_hist_method.TestDataFramePlots.test_hist_layout(self)
pandas.tests.plotting.test_hist_method.TestDataFramePlots.test_tight_layout(self)
pandas.tests.plotting.test_hist_method.TestSeriesPlots(TestPlotBase)
pandas.tests.plotting.test_hist_method.TestSeriesPlots.setup_method(self,method)
pandas.tests.plotting.test_hist_method.TestSeriesPlots.test_hist_bins_legacy(self)
pandas.tests.plotting.test_hist_method.TestSeriesPlots.test_hist_by_no_extra_plots(self)
pandas.tests.plotting.test_hist_method.TestSeriesPlots.test_hist_layout(self)
pandas.tests.plotting.test_hist_method.TestSeriesPlots.test_hist_layout_with_by(self)
pandas.tests.plotting.test_hist_method.TestSeriesPlots.test_hist_legacy(self)
pandas.tests.plotting.test_hist_method.TestSeriesPlots.test_hist_no_overlap(self)
pandas.tests.plotting.test_hist_method.TestSeriesPlots.test_plot_fails_when_ax_differs_from_figure(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/plotting/test_deprecated.py----------------------------------------
A:pandas.tests.plotting.test_deprecated.df->pandas.DataFrame(randn(6, 4), index=list(string.ascii_letters[:6]), columns=['one', 'two', 'three', 'four'])
pandas.tests.plotting.test_deprecated.TestDeprecatedNameSpace(TestPlotBase)
pandas.tests.plotting.test_deprecated.TestDeprecatedNameSpace.test_boxplot_deprecated(self)
pandas.tests.plotting.test_deprecated.TestDeprecatedNameSpace.test_plot_params(self)
pandas.tests.plotting.test_deprecated.TestDeprecatedNameSpace.test_radviz_deprecated(self)
pandas.tests.plotting.test_deprecated.TestDeprecatedNameSpace.test_scatter_plot_legacy(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/plotting/test_misc.py----------------------------------------
A:pandas.tests.plotting.test_misc.self.ts->pandas.util.testing.makeTimeSeries()
A:pandas.tests.plotting.test_misc.ax->radviz(df, 'Name', color=colors)
A:pandas.tests.plotting.test_misc.df->self.iris.drop('Name', axis=1).head()
A:pandas.tests.plotting.test_misc.grouper->Series(np.repeat([1, 2, 3, 4, 5], 20), df.index)
A:pandas.tests.plotting.test_misc.axes->_check_plot_works(scatter_matrix, filterwarnings='always', frame=df, range_padding=0.1)
A:pandas.tests.plotting.test_misc.axes0_labels->axes[0][0].yaxis.get_majorticklabels()
A:pandas.tests.plotting.test_misc.cmaps->lmap(cm.jet, np.linspace(0, 1, df['Name'].nunique()))
A:pandas.tests.plotting.test_misc.(handles, labels)->radviz(df, 'Name', color=colors).get_legend_handles_labels()
A:pandas.tests.plotting.test_misc.nlines->len(ax.get_lines())
A:pandas.tests.plotting.test_misc.nxticks->len(ax.xaxis.get_ticklabels())
A:pandas.tests.plotting.test_misc.(polylines, labels)->radviz(df, 'Name', color=colors).get_legend_handles_labels()
A:pandas.tests.plotting.test_misc.color_label_tuples->zip([polyline.get_color() for polyline in polylines], labels)
A:pandas.tests.plotting.test_misc.ordered_color_label_tuples->sorted(color_label_tuples, key=lambda x: x[1])
A:pandas.tests.plotting.test_misc.prev_next_tupels->zip([i for i in ordered_color_label_tuples[0:-1]], [i for i in ordered_color_label_tuples[1:]])
A:pandas.tests.plotting.test_misc.title->list(df.columns)
A:pandas.tests.plotting.test_misc.plot->self.iris.drop('Name', axis=1).head().drop('SepalWidth', axis=1).plot(subplots=True, layout=(2, 2), title=title[:-1])
pandas.tests.plotting.test_misc.TestDataFramePlots(TestPlotBase)
pandas.tests.plotting.test_misc.TestDataFramePlots.test_andrews_curves(self)
pandas.tests.plotting.test_misc.TestDataFramePlots.test_parallel_coordinates(self)
pandas.tests.plotting.test_misc.TestDataFramePlots.test_parallel_coordinates_with_sorted_labels(self)
pandas.tests.plotting.test_misc.TestDataFramePlots.test_radviz(self)
pandas.tests.plotting.test_misc.TestDataFramePlots.test_scatter_matrix_axis(self)
pandas.tests.plotting.test_misc.TestDataFramePlots.test_scatter_plot_legacy(self)
pandas.tests.plotting.test_misc.TestDataFramePlots.test_subplot_titles(self)
pandas.tests.plotting.test_misc.TestSeriesPlots(TestPlotBase)
pandas.tests.plotting.test_misc.TestSeriesPlots.setup_method(self,method)
pandas.tests.plotting.test_misc.TestSeriesPlots.test_autocorrelation_plot(self)
pandas.tests.plotting.test_misc.TestSeriesPlots.test_bootstrap_plot(self)
pandas.tests.plotting.test_misc.TestSeriesPlots.test_lag_plot(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/plotting/test_converter.py----------------------------------------
A:pandas.tests.plotting.test_converter.converter->pytest.importorskip('pandas.plotting._converter')
A:pandas.tests.plotting.test_converter.self.dtc->pytest.importorskip('pandas.plotting._converter').DatetimeConverter()
A:pandas.tests.plotting.test_converter.self.tc->pytest.importorskip('pandas.plotting._converter').TimeFormatter(None)
A:pandas.tests.plotting.test_converter.r1->self.pc.convert([data, data], None, self.axis)
A:pandas.tests.plotting.test_converter.r2->self.pc.convert(u('2012-1-1'), None, self.axis)
A:pandas.tests.plotting.test_converter.xp->pytest.importorskip('pandas.plotting._converter').dates.date2num(dateindex._mpl_repr())
A:pandas.tests.plotting.test_converter.rs->self.pc.convert([0, 1], None, self.axis)
A:pandas.tests.plotting.test_converter.ts->Timestamp('2012-1-1')
A:pandas.tests.plotting.test_converter.dateindex->pandas.util.testing.makeDateIndex(k=10, freq=freq)
A:pandas.tests.plotting.test_converter.val1->self.dtc.convert(ts1, None, None)
A:pandas.tests.plotting.test_converter.val2->self.dtc.convert(ts2, None, None)
A:pandas.tests.plotting.test_converter.result->self.dtc.convert(data, None, None)
A:pandas.tests.plotting.test_converter.self.pc->pytest.importorskip('pandas.plotting._converter').PeriodConverter()
A:pandas.tests.plotting.test_converter.self.axis->Axis()
pandas.tests.plotting.test_converter.TestDateTimeConverter(object)
pandas.tests.plotting.test_converter.TestDateTimeConverter.setup_method(self,method)
pandas.tests.plotting.test_converter.TestDateTimeConverter.test_conversion(self)
pandas.tests.plotting.test_converter.TestDateTimeConverter.test_conversion_float(self)
pandas.tests.plotting.test_converter.TestDateTimeConverter.test_conversion_outofbounds_datetime(self)
pandas.tests.plotting.test_converter.TestDateTimeConverter.test_convert_accepts_unicode(self)
pandas.tests.plotting.test_converter.TestDateTimeConverter.test_convert_nested(self)
pandas.tests.plotting.test_converter.TestDateTimeConverter.test_dateindex_conversion(self)
pandas.tests.plotting.test_converter.TestDateTimeConverter.test_resolution(self)
pandas.tests.plotting.test_converter.TestDateTimeConverter.test_time_formatter(self)
pandas.tests.plotting.test_converter.TestPeriodConverter(object)
pandas.tests.plotting.test_converter.TestPeriodConverter.setup_method(self,method)
pandas.tests.plotting.test_converter.TestPeriodConverter.test_conversion(self)
pandas.tests.plotting.test_converter.TestPeriodConverter.test_convert_accepts_unicode(self)
pandas.tests.plotting.test_converter.TestPeriodConverter.test_convert_nested(self)
pandas.tests.plotting.test_converter.TestPeriodConverter.test_integer_passthrough(self)
pandas.tests.plotting.test_converter.test_timtetonum_accepts_unicode()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/plotting/common.py----------------------------------------
A:pandas.tests.plotting.common.self.mpl_le_1_2_1->pandas.plotting._compat._mpl_le_1_2_1()
A:pandas.tests.plotting.common.self.mpl_ge_1_3_1->pandas.plotting._compat._mpl_ge_1_3_1()
A:pandas.tests.plotting.common.self.mpl_ge_1_4_0->pandas.plotting._compat._mpl_ge_1_4_0()
A:pandas.tests.plotting.common.self.mpl_ge_1_5_0->pandas.plotting._compat._mpl_ge_1_5_0()
A:pandas.tests.plotting.common.self.mpl_ge_2_0_0->pandas.plotting._compat._mpl_ge_2_0_0()
A:pandas.tests.plotting.common.self.mpl_ge_2_0_1->pandas.plotting._compat._mpl_ge_2_0_1()
A:pandas.tests.plotting.common.base->os.path.join(os.path.dirname(curpath()), os.pardir)
A:pandas.tests.plotting.common.path->os.path.join(base, 'tests', 'data', 'iris.csv')
A:pandas.tests.plotting.common.self.iris->read_csv(path)
A:pandas.tests.plotting.common.gender->numpy.random.choice(['Male', 'Female'], size=n)
A:pandas.tests.plotting.common.classroom->numpy.random.choice(['A', 'B', 'C'], size=n)
A:pandas.tests.plotting.common.self.hist_df->DataFrame({'gender': gender, 'classroom': classroom, 'height': random.normal(66, 4, size=n), 'weight': random.normal(161, 32, size=n), 'category': random.randint(4, size=n)})
A:pandas.tests.plotting.common.self.tdf->pandas.util.testing.makeTimeDataFrame()
A:pandas.tests.plotting.common.self.hexbin_df->DataFrame({'A': np.random.uniform(size=20), 'B': np.random.uniform(size=20), 'C': np.arange(20) + np.random.uniform(size=20)})
A:pandas.tests.plotting.common.axes->self._flatten_visible(axes)
A:pandas.tests.plotting.common.xp_lines->xp.get_lines()
A:pandas.tests.plotting.common.rs_lines->rs.get_lines()
A:pandas.tests.plotting.common.xpdata->xpl.get_xydata()
A:pandas.tests.plotting.common.rsdata->rsl.get_xydata()
A:pandas.tests.plotting.common.unique->series.unique()
A:pandas.tests.plotting.common.mapped->dict(zip(unique, colors))
A:pandas.tests.plotting.common.linecolors->self._get_colors_mapped(mapping, linecolors)
A:pandas.tests.plotting.common.result->self._get_axes_layout(_flatten(axes))
A:pandas.tests.plotting.common.expected->conv.to_rgba(color)
A:pandas.tests.plotting.common.facecolors->self._get_colors_mapped(mapping, facecolors)
A:pandas.tests.plotting.common.labels->kwargs.get('ax', fig.add_subplot(211)).get_yticklabels()
A:pandas.tests.plotting.common.visible_axes->self._flatten_visible(axes)
A:pandas.tests.plotting.common.x_set->set()
A:pandas.tests.plotting.common.y_set->set()
A:pandas.tests.plotting.common.points->kwargs.get('ax', fig.add_subplot(211)).get_position().get_points()
A:pandas.tests.plotting.common.has_xerr->getattr(c, 'has_xerr', False)
A:pandas.tests.plotting.common.has_yerr->getattr(c, 'has_yerr', False)
A:pandas.tests.plotting.common.xoff->all((not g.gridOn for g in self.plt.gca().xaxis.get_major_ticks()))
A:pandas.tests.plotting.common.yoff->all((not g.gridOn for g in self.plt.gca().yaxis.get_major_ticks()))
A:pandas.tests.plotting.common.fig->matplotlib.pyplot.gcf()
A:pandas.tests.plotting.common.ax->kwargs.get('ax', fig.add_subplot(211))
A:pandas.tests.plotting.common.ret->f(**kwargs)
A:pandas.tests.plotting.common.kwargs['ax']->matplotlib.pyplot.gcf().add_subplot(212)
A:pandas.tests.plotting.common.(pth, _)->os.path.split(os.path.abspath(__file__))
pandas.tests.plotting.common.TestPlotBase(object)
pandas.tests.plotting.common.TestPlotBase._check_ax_scales(self,axes,xaxis='linear',yaxis='linear')
pandas.tests.plotting.common.TestPlotBase._check_axes_shape(self,axes,axes_num=None,layout=None,figsize=None)
pandas.tests.plotting.common.TestPlotBase._check_box_return_type(self,returned,return_type,expected_keys=None,check_ax_title=True)
pandas.tests.plotting.common.TestPlotBase._check_colors(self,collections,linecolors=None,facecolors=None,mapping=None)
pandas.tests.plotting.common.TestPlotBase._check_data(self,xp,rs)
pandas.tests.plotting.common.TestPlotBase._check_grid_settings(self,obj,kinds,kws={})
pandas.tests.plotting.common.TestPlotBase._check_has_errorbars(self,axes,xerr=0,yerr=0)
pandas.tests.plotting.common.TestPlotBase._check_legend_labels(self,axes,labels=None,visible=True)
pandas.tests.plotting.common.TestPlotBase._check_text_labels(self,texts,expected)
pandas.tests.plotting.common.TestPlotBase._check_ticks_props(self,axes,xlabelsize=None,xrot=None,ylabelsize=None,yrot=None)
pandas.tests.plotting.common.TestPlotBase._check_visible(self,collections,visible=True)
pandas.tests.plotting.common.TestPlotBase._flatten_visible(self,axes)
pandas.tests.plotting.common.TestPlotBase._get_axes_layout(self,axes)
pandas.tests.plotting.common.TestPlotBase._get_colors_mapped(self,series,colors)
pandas.tests.plotting.common.TestPlotBase._maybe_unpack_cycler(self,rcParams,field='color')
pandas.tests.plotting.common.TestPlotBase.colorconverter(self)
pandas.tests.plotting.common.TestPlotBase.plt(self)
pandas.tests.plotting.common.TestPlotBase.setup_method(self,method)
pandas.tests.plotting.common.TestPlotBase.teardown_method(self,method)
pandas.tests.plotting.common._check_plot_works(f,filterwarnings='always',**kwargs)
pandas.tests.plotting.common._ok_for_gaussian_kde(kind)
pandas.tests.plotting.common._skip_if_no_scipy_gaussian_kde()
pandas.tests.plotting.common.curpath()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/plotting/test_boxplot_method.py----------------------------------------
A:pandas.tests.plotting.test_boxplot_method.df->DataFrame({'a': [1, 2, 3, 4, 5, 6], 'b': [0, 0, 0, 1, 1, 1]})
A:pandas.tests.plotting.test_boxplot_method.df['X']->Series(['A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B'])
A:pandas.tests.plotting.test_boxplot_method.df['Y']->Series(['A'] * 10)
A:pandas.tests.plotting.test_boxplot_method.(fig, ax)->self.plt.subplots()
A:pandas.tests.plotting.test_boxplot_method.axes->DataFrame({'a': [1, 2, 3, 4, 5, 6], 'b': [0, 0, 0, 1, 1, 1]}).groupby('classroom').boxplot(ax=axes)
A:pandas.tests.plotting.test_boxplot_method.d->DataFrame({'a': [1, 2, 3, 4, 5, 6], 'b': [0, 0, 0, 1, 1, 1]}).boxplot(ax=ax, return_type='dict')
A:pandas.tests.plotting.test_boxplot_method.lines->list(itertools.chain.from_iterable(d.values()))
A:pandas.tests.plotting.test_boxplot_method.result->DataFrame({'a': [1, 2, 3, 4, 5, 6], 'b': [0, 0, 0, 1, 1, 1]}).groupby('gender').boxplot(return_type='dict')
A:pandas.tests.plotting.test_boxplot_method.(y_min, y_max)->ax.get_ylim()
A:pandas.tests.plotting.test_boxplot_method.df['age']->numpy.random.randint(1, 20, df.shape[0])
A:pandas.tests.plotting.test_boxplot_method.(height_ax, weight_ax)->DataFrame({'a': [1, 2, 3, 4, 5, 6], 'b': [0, 0, 0, 1, 1, 1]}).boxplot(['height', 'weight'], by='category')
A:pandas.tests.plotting.test_boxplot_method.p->DataFrame({'a': [1, 2, 3, 4, 5, 6], 'b': [0, 0, 0, 1, 1, 1]}).boxplot(['height', 'weight', 'age'], by='category')
A:pandas.tests.plotting.test_boxplot_method.grouped->DataFrame({'a': [1, 2, 3, 4, 5, 6], 'b': [0, 0, 0, 1, 1, 1]}).unstack(level=1).groupby(level=0, axis=1)
A:pandas.tests.plotting.test_boxplot_method.tuples->lzip(string.ascii_letters[:10], range(10))
A:pandas.tests.plotting.test_boxplot_method.weight->Series(np.random.normal(166, 20, size=n))
A:pandas.tests.plotting.test_boxplot_method.height->Series(np.random.normal(60, 10, size=n))
A:pandas.tests.plotting.test_boxplot_method.gender->numpy.random.choice(['male', 'female'], size=n)
A:pandas.tests.plotting.test_boxplot_method.gb->DataFrame({'a': [1, 2, 3, 4, 5, 6], 'b': [0, 0, 0, 1, 1, 1]}).groupby('gender')
A:pandas.tests.plotting.test_boxplot_method.res->DataFrame({'a': [1, 2, 3, 4, 5, 6], 'b': [0, 0, 0, 1, 1, 1]}).groupby('gender').hist()
A:pandas.tests.plotting.test_boxplot_method.columns2->'X B C D A G Y N Q O'.split()
A:pandas.tests.plotting.test_boxplot_method.df2->DataFrame(random.randn(50, 10), columns=columns2)
A:pandas.tests.plotting.test_boxplot_method.categories2->'A B C D E F G H I J'.split()
A:pandas.tests.plotting.test_boxplot_method.returned->numpy.array(list(returned.values))
A:pandas.tests.plotting.test_boxplot_method.box->DataFrame({'a': [1, 2, 3, 4, 5, 6], 'b': [0, 0, 0, 1, 1, 1]}).groupby('classroom').boxplot(column=['height', 'weight', 'category'], layout=(1, -1), return_type='dict')
A:pandas.tests.plotting.test_boxplot_method.(fig, axes)->self.plt.subplots(2, 3)
pandas.tests.plotting.test_boxplot_method.TestDataFrameGroupByPlots(TestPlotBase)
pandas.tests.plotting.test_boxplot_method.TestDataFrameGroupByPlots.test_boxplot_legacy(self)
pandas.tests.plotting.test_boxplot_method.TestDataFrameGroupByPlots.test_fontsize(self)
pandas.tests.plotting.test_boxplot_method.TestDataFrameGroupByPlots.test_grouped_box_layout(self)
pandas.tests.plotting.test_boxplot_method.TestDataFrameGroupByPlots.test_grouped_box_multiple_axes(self)
pandas.tests.plotting.test_boxplot_method.TestDataFrameGroupByPlots.test_grouped_box_return_type(self)
pandas.tests.plotting.test_boxplot_method.TestDataFrameGroupByPlots.test_grouped_plot_fignums(self)
pandas.tests.plotting.test_boxplot_method.TestDataFramePlots(TestPlotBase)
pandas.tests.plotting.test_boxplot_method.TestDataFramePlots.test_boxplot_axis_limits(self)
pandas.tests.plotting.test_boxplot_method.TestDataFramePlots.test_boxplot_empty_column(self)
pandas.tests.plotting.test_boxplot_method.TestDataFramePlots.test_boxplot_legacy(self)
pandas.tests.plotting.test_boxplot_method.TestDataFramePlots.test_boxplot_return_type_legacy(self)
pandas.tests.plotting.test_boxplot_method.TestDataFramePlots.test_boxplot_return_type_none(self)
pandas.tests.plotting.test_boxplot_method.TestDataFramePlots.test_fontsize(self)
pandas.tests.plotting.test_boxplot_method._skip_if_mpl_14_or_dev_boxplot()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/plotting/test_frame.py----------------------------------------
A:pandas.tests.plotting.test_frame.self.tdf->pandas.util.testing.makeTimeDataFrame()
A:pandas.tests.plotting.test_frame.self.hexbin_df->DataFrame({'A': np.random.uniform(size=20), 'B': np.random.uniform(size=20), 'C': np.arange(20) + np.random.uniform(size=20)})
A:pandas.tests.plotting.test_frame.axes->DataFrame({'a': randn(8), 'b': randn(8)}).plot(subplots=True, ax=axes, sharex=True, sharey=True)
A:pandas.tests.plotting.test_frame.df->DataFrame({'a': randn(8), 'b': randn(8)})
A:pandas.tests.plotting.test_frame.tuples->lzip(string.ascii_letters[:10], range(10))
A:pandas.tests.plotting.test_frame.index->pandas.MultiIndex.from_tuples([(u('α'), 0), (u('α'), 1), (u('β'), 2), (u('β'), 3), (u('γ'), 4), (u('γ'), 5), (u('δ'), 6), (u('δ'), 7)], names=['i0', 'i1'])
A:pandas.tests.plotting.test_frame.columns->pandas.MultiIndex.from_tuples([('bar', u('Δ')), ('bar', u('Ε'))], names=['c0', 'c1'])
A:pandas.tests.plotting.test_frame.(fig, ax)->self.plt.subplots()
A:pandas.tests.plotting.test_frame.result->DataFrame({'a': randn(8), 'b': randn(8)}).plot.box(subplots=True)
A:pandas.tests.plotting.test_frame.ax->self.plt.figure().add_axes((0, 0, 1, 1))
A:pandas.tests.plotting.test_frame.df.columns->lrange(1, len(df.columns) + 1)
A:pandas.tests.plotting.test_frame.lines->self.plt.figure().add_axes((0, 0, 1, 1)).get_lines()
A:pandas.tests.plotting.test_frame.rs->Series(rs[:, 1], rs[:, 0], dtype=np.int64, name='y')
A:pandas.tests.plotting.test_frame.df.index->pandas.Index(np.arange(99, -1, -1), dtype=np.float64)
A:pandas.tests.plotting.test_frame.idx->date_range(start='2014-07-01', freq='M', periods=10)
A:pandas.tests.plotting.test_frame.(fig, axes)->matplotlib.pyplot.subplots(2, 1)
A:pandas.tests.plotting.test_frame.returned->DataFrame({'a': randn(8), 'b': randn(8)}).plot.box(return_type=t, subplots=True)
A:pandas.tests.plotting.test_frame.base->numpy.zeros(len(normal_lines[0].get_data()[1]))
A:pandas.tests.plotting.test_frame.sep_df->DataFrame({'w': rand(6), 'x': rand(6), 'y': -rand(6), 'z': -rand(6)})
A:pandas.tests.plotting.test_frame.mixed_df->DataFrame(randn(6, 4), index=list(string.ascii_letters[:6]), columns=['w', 'x', 'y', 'z'])
A:pandas.tests.plotting.test_frame.ax1->self.plt.figure().add_subplot(gs[:2, :2])
A:pandas.tests.plotting.test_frame.ax2->self.plt.figure().add_subplot(gs[:2, 2])
A:pandas.tests.plotting.test_frame.tdf->DataFrame(d, index=ix)
A:pandas.tests.plotting.test_frame.masked1->self.plt.figure().add_axes((0, 0, 1, 1)).lines[0].get_ydata()
A:pandas.tests.plotting.test_frame.masked2->self.plt.figure().add_axes((0, 0, 1, 1)).lines[1].get_ydata()
A:pandas.tests.plotting.test_frame.exp->numpy.array([3, 2, 1], dtype=np.float64)
A:pandas.tests.plotting.test_frame.expected1->numpy.array([1, 2, 0, 3], dtype=np.float64)
A:pandas.tests.plotting.test_frame.expected2->numpy.array([3, 0, 2, 1], dtype=np.float64)
A:pandas.tests.plotting.test_frame.(xmin, xmax)->self.plt.figure().add_axes((0, 0, 1, 1)).get_xlim()
A:pandas.tests.plotting.test_frame.(ymin, ymax)->self.plt.figure().add_axes((0, 0, 1, 1)).get_ylim()
A:pandas.tests.plotting.test_frame.default_colors->self._maybe_unpack_cycler(self.plt.rcParams)
A:pandas.tests.plotting.test_frame.rgba_colors->lmap(cm.jet, np.linspace(0, 1, len(df)))
A:pandas.tests.plotting.test_frame.ticks->self.plt.figure().add_axes((0, 0, 1, 1)).xaxis.get_ticklocs()
A:pandas.tests.plotting.test_frame.df1->pandas.DataFrame(np.random.randn(6, 5), index=pd.Index(list('ABCDEF')), columns=pd.Index(list('abcde')))
A:pandas.tests.plotting.test_frame.df2->DataFrame(randn(3, 3), columns=['d', 'e', 'f'], index=ind)
A:pandas.tests.plotting.test_frame.rgba_array->numpy.array([red_rgba, green_rgba])
A:pandas.tests.plotting.test_frame.float_array->numpy.array([0.0, 1.0])
A:pandas.tests.plotting.test_frame.(ax_min, ax_max)->self.plt.figure().add_axes((0, 0, 1, 1)).get_ylim()
A:pandas.tests.plotting.test_frame.min_edge->min([p.get_y() for p in ax.patches])
A:pandas.tests.plotting.test_frame.max_edge->max([p.get_y() + p.get_height() for p in ax.patches])
A:pandas.tests.plotting.test_frame.edge->p.get_y()
A:pandas.tests.plotting.test_frame.expected->list(base_expected)
A:pandas.tests.plotting.test_frame.positions->numpy.array([3, 2, 8])
A:pandas.tests.plotting.test_frame.result_y->numpy.array([p.get_y() for p in patches])
A:pandas.tests.plotting.test_frame.result_height->numpy.array([p.get_height() for p in patches])
A:pandas.tests.plotting.test_frame.result_x->numpy.array([p.get_x() for p in patches])
A:pandas.tests.plotting.test_frame.result_width->numpy.array([p.get_width() for p in patches])
A:pandas.tests.plotting.test_frame.normal_df->DataFrame({'A': np.repeat(np.array([1, 2, 3, 4, 5]), np.array([10, 9, 8, 7, 6])), 'B': np.repeat(np.array([1, 2, 3, 4, 5]), np.array([8, 8, 8, 8, 8])), 'C': np.repeat(np.array([1, 2, 3, 4, 5]), np.array([6, 7, 8, 9, 10]))}, columns=['A', 'B', 'C'])
A:pandas.tests.plotting.test_frame.nan_df->DataFrame({'A': np.repeat(np.array([np.nan, 1, 2, 3, 4, 5]), np.array([3, 10, 9, 8, 7, 6])), 'B': np.repeat(np.array([1, np.nan, 2, 3, 4, 5]), np.array([8, 3, 8, 8, 8, 8])), 'C': np.repeat(np.array([1, 2, 3, np.nan, 4, 5]), np.array([6, 7, 8, 3, 9, 10]))}, columns=['A', 'B', 'C'])
A:pandas.tests.plotting.test_frame.df3->DataFrame(randn(3, 3), columns=['g', 'h', 'i'], index=ind)
A:pandas.tests.plotting.test_frame.df4->DataFrame(rand(3, 3), columns=['j', 'k', 'l'])
A:pandas.tests.plotting.test_frame.ind->date_range('1/1/2014', periods=3)
A:pandas.tests.plotting.test_frame.df5->DataFrame({'a': randn(8), 'b': randn(8)}).set_index('a')
A:pandas.tests.plotting.test_frame.multi->DataFrame(randn(4, 4), columns=[np.array(['a', 'a', 'b', 'b']), np.array(['x', 'y', 'x', 'y'])])
A:pandas.tests.plotting.test_frame.leg_title->self.plt.figure().add_axes((0, 0, 1, 1)).legend_.get_title()
A:pandas.tests.plotting.test_frame.fig->self.plt.figure()
A:pandas.tests.plotting.test_frame.s->Series([1, 2])
A:pandas.tests.plotting.test_frame.lines2->self.plt.figure().add_subplot(gs[:2, 2]).get_lines()
A:pandas.tests.plotting.test_frame.styles->list('rgcby')
A:pandas.tests.plotting.test_frame.(handles, labels)->self.plt.figure().add_axes((0, 0, 1, 1)).get_legend_handles_labels()
A:pandas.tests.plotting.test_frame.jet_colors->lmap(cm.jet, np.linspace(0, 1, 3))
A:pandas.tests.plotting.test_frame.bp->DataFrame({'a': randn(8), 'b': randn(8)}).plot.box(color=(0, 1, 0), sym='#123456', return_type='dict')
A:pandas.tests.plotting.test_frame.dict_colors->dict(whiskers='c', medians='m')
A:pandas.tests.plotting.test_frame.colors->list('rgbk')
A:pandas.tests.plotting.test_frame.plt.rcParams['axes.prop_cycle']->cycler.cycler('color', colors)
A:pandas.tests.plotting.test_frame.xticks->self.plt.figure().add_axes((0, 0, 1, 1)).lines[0].get_xdata()
A:pandas.tests.plotting.test_frame.ydata->self.plt.figure().add_axes((0, 0, 1, 1)).lines[0].get_ydata()
A:pandas.tests.plotting.test_frame.df_err->DataFrame(np.random.randn(5, 2) / 5, index=range(5), columns=['x', 'y'])
A:pandas.tests.plotting.test_frame.s_df->DataFrame({'a': randn(8), 'b': randn(8)}).copy()
A:pandas.tests.plotting.test_frame.ix->date_range('1/1/2000', '1/1/2001', freq='M')
A:pandas.tests.plotting.test_frame.tdf_err->DataFrame(d_err, index=ix)
A:pandas.tests.plotting.test_frame.err->numpy.random.rand(3, 2, 5)
A:pandas.tests.plotting.test_frame.(gs, axes)->_generate_4_axes_via_gridspec()
A:pandas.tests.plotting.test_frame.results[kind]->weakref.proxy(df.plot(kind=kind, **args))
A:pandas.tests.plotting.test_frame.ts->Series(np.random.randn(10), index=date_range('1/1/2000', periods=10))
A:pandas.tests.plotting.test_frame.gs->matplotlib.gridspec.GridSpec(2, 2)
A:pandas.tests.plotting.test_frame.(ax1, ax2)->_get_horizontal_grid()
A:pandas.tests.plotting.test_frame.ax3->self.plt.figure().add_subplot(gs[2, :2])
A:pandas.tests.plotting.test_frame.ax4->self.plt.figure().add_subplot(gs[2, 2])
A:pandas.tests.plotting.test_frame.divider->make_axes_locatable(ax)
A:pandas.tests.plotting.test_frame.cax->make_axes_locatable(ax).append_axes('right', size='5%', pad=0.05)
A:pandas.tests.plotting.test_frame.iax->inset_axes(ax, width='30%', height=1.0, loc=3)
A:pandas.tests.plotting.test_frame.colormap->matplotlib.colors.ListedColormap(color_tuples)
A:pandas.tests.plotting.test_frame.barplot->pandas.DataFrame([[1, 2, 3]]).plot(kind='bar')
A:pandas.tests.plotting.test_frame.ax_tl->matplotlib.pyplot.subplot(gs[0, 0])
A:pandas.tests.plotting.test_frame.ax_ll->matplotlib.pyplot.subplot(gs[1, 0])
A:pandas.tests.plotting.test_frame.ax_tr->matplotlib.pyplot.subplot(gs[0, 1])
A:pandas.tests.plotting.test_frame.ax_lr->matplotlib.pyplot.subplot(gs[1, 1])
pandas.tests.plotting.test_frame.TestDataFramePlots(TestPlotBase)
pandas.tests.plotting.test_frame.TestDataFramePlots._check_bar_alignment(self,df,kind='bar',stacked=False,subplots=False,align='center',width=0.5,position=0.5)
pandas.tests.plotting.test_frame.TestDataFramePlots._check_box_coord(self,patches,expected_y=None,expected_h=None,expected_x=None,expected_w=None)
pandas.tests.plotting.test_frame.TestDataFramePlots._compare_stacked_y_cood(self,normal_lines,stacked_lines)
pandas.tests.plotting.test_frame.TestDataFramePlots.setup_method(self,method)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_all_invalid_plot_data(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_allow_cmap(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_area_colors(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_area_lim(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_align_single_column(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_barwidth(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_barwidth_position(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_barwidth_position_int(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_bottom_left(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_categorical(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_center(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_colors(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_edge(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_linewidth(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_log_no_subplots(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_log_subplots(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_nan(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_stacked_center(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_bar_subplots_center(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_boxplot(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_boxplot_colors(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_boxplot_return_type(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_boxplot_subplots_return_type(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_boxplot_vertical(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_color_and_style_arguments(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_color_empty_string(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_default_color_cycle(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_df_grid_settings(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_df_gridspec_patterns(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_df_legend_labels(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_df_subplots_patterns_minorticks(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_donot_overwrite_index_name(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_dont_modify_colors(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_errorbar_asymmetrical(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_errorbar_plot(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_errorbar_scatter(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_errorbar_timeseries(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_errorbar_with_integer_column_names(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_errorbar_with_partial_columns(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_hexbin_basic(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_hexbin_cmap(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_hexbin_with_c(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_hist_colors(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_hist_df(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_hist_df_coord(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_implicit_label(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_invalid_colormap(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_invalid_kind(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_kde_colors(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_kde_colors_and_styles_subplots(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_kde_df(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_kde_missing_vals(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_kind_both_ways(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_legend_name(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_line_area_nan_df(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_line_area_stacked(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_line_colors(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_line_colors_and_styles_subplots(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_line_label_none(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_line_lim(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_logscales(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_memory_leak(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_mpl2_color_cycle_str(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_negative_log(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_no_color_bar(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_no_legend(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_nonnumeric_exclude(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_option_mpl_style(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_partially_invalid_plot_data(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_passed_bar_colors(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_period_compat(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_pie_df(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_pie_df_nan(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_plain_axes(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_plot(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_plot_bar(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_plot_int_columns(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_plot_scatter(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_plot_scatter_with_c(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_plot_xy(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_rcParams_bar_colors(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_scatter_colors(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_sharex_and_ax(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_sharey_and_ax(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_style_by_column(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_subplots(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_subplots_dup_columns(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_subplots_layout(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_subplots_multiple_axes(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_subplots_sharex_axes_existing_axes(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_subplots_timeseries(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_subplots_ts_share_axes(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_subplots_warnings(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_table(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_unordered_ts(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_unsorted_index(self)
pandas.tests.plotting.test_frame.TestDataFramePlots.test_xcompat(self)
pandas.tests.plotting.test_frame._generate_4_axes_via_gridspec()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/plotting/test_series.py----------------------------------------
A:pandas.tests.plotting.test_series.self.ts->pandas.util.testing.makeTimeSeries()
A:pandas.tests.plotting.test_series.self.series->pandas.util.testing.makeStringSeries()
A:pandas.tests.plotting.test_series.self.iseries->pandas.util.testing.makePeriodSeries()
A:pandas.tests.plotting.test_series.axes->_check_plot_works(s.plot.kde)
A:pandas.tests.plotting.test_series.ax->Series(range(100, 121), index=pd.bdate_range(start='2014-05-01', end='2014-06-01', freq=CustomBusinessDay(holidays=['2014-05-26']))).plot(xticks=[0, 3, 5, 9])
A:pandas.tests.plotting.test_series.(xmin, xmax)->Series(range(100, 121), index=pd.bdate_range(start='2014-05-01', end='2014-06-01', freq=CustomBusinessDay(holidays=['2014-05-26']))).plot(xticks=[0, 3, 5, 9]).get_xlim()
A:pandas.tests.plotting.test_series.lines->Series(range(100, 121), index=pd.bdate_range(start='2014-05-01', end='2014-06-01', freq=CustomBusinessDay(holidays=['2014-05-26']))).plot(xticks=[0, 3, 5, 9]).get_lines()
A:pandas.tests.plotting.test_series.tz_ts->self.ts.copy()
A:pandas.tests.plotting.test_series.tz_ts.index->self.ts.copy().tz_localize('GMT').tz_convert('CET')
A:pandas.tests.plotting.test_series.s->Series(range(100, 121), index=pd.bdate_range(start='2014-05-01', end='2014-06-01', freq=CustomBusinessDay(holidays=['2014-05-26'])))
A:pandas.tests.plotting.test_series.ts->Series(np.arange(12), index=ix, name='x')
A:pandas.tests.plotting.test_series.masked->Series(range(100, 121), index=pd.bdate_range(start='2014-05-01', end='2014-06-01', freq=CustomBusinessDay(holidays=['2014-05-26']))).plot(xticks=[0, 3, 5, 9]).lines[0].get_ydata()
A:pandas.tests.plotting.test_series.exp->numpy.array([1, 2, 3], dtype=np.float64)
A:pandas.tests.plotting.test_series.expected->numpy.hstack((1e-05, expected))
A:pandas.tests.plotting.test_series.label->Series(range(100, 121), index=pd.bdate_range(start='2014-05-01', end='2014-06-01', freq=CustomBusinessDay(holidays=['2014-05-26']))).plot(xticks=[0, 3, 5, 9]).get_xlabel()
A:pandas.tests.plotting.test_series.ax2->Series(range(100, 121), index=pd.bdate_range(start='2014-05-01', end='2014-06-01', freq=CustomBusinessDay(holidays=['2014-05-26']))).plot.bar(use_index=False)
A:pandas.tests.plotting.test_series.label2->Series(range(100, 121), index=pd.bdate_range(start='2014-05-01', end='2014-06-01', freq=CustomBusinessDay(holidays=['2014-05-26']))).plot.bar(use_index=False).get_xlabel()
A:pandas.tests.plotting.test_series.res->Series(range(100, 121), index=pd.bdate_range(start='2014-05-01', end='2014-06-01', freq=CustomBusinessDay(holidays=['2014-05-26']))).plot(xticks=[0, 3, 5, 9]).get_xlim()
A:pandas.tests.plotting.test_series.df->DataFrame(np.random.randn(30, 3), columns=list('abc'))
A:pandas.tests.plotting.test_series.rng->date_range('1/1/2000', '3/1/2000')
A:pandas.tests.plotting.test_series.ser->Series(randn(len(rng)), rng)
A:pandas.tests.plotting.test_series.xp->datetime(1999, 1, 1).toordinal()
A:pandas.tests.plotting.test_series.series->Series([1, 2, np.nan, 4], index=['a', 'b', 'c', 'd'], name='YLABEL')
A:pandas.tests.plotting.test_series.expected_texts->list((next(it) for it in itertools.cycle(iters)))
A:pandas.tests.plotting.test_series.(fig, ax)->self.plt.subplots(1, 1)
A:pandas.tests.plotting.test_series.(fig, (ax1, ax2))->self.plt.subplots(1, 2)
A:pandas.tests.plotting.test_series.x->Series(randn(2))
A:pandas.tests.plotting.test_series.y->Series(randn(2))
A:pandas.tests.plotting.test_series.fig->gcf()
A:pandas.tests.plotting.test_series.xlabels->Series(range(100, 121), index=pd.bdate_range(start='2014-05-01', end='2014-06-01', freq=CustomBusinessDay(holidays=['2014-05-26']))).plot(xticks=[0, 3, 5, 9]).get_xticklabels()
A:pandas.tests.plotting.test_series.ylabels->Series(range(100, 121), index=pd.bdate_range(start='2014-05-01', end='2014-06-01', freq=CustomBusinessDay(holidays=['2014-05-26']))).plot(xticks=[0, 3, 5, 9]).get_yticklabels()
A:pandas.tests.plotting.test_series.dr1->date_range('1/1/2009', periods=4)
A:pandas.tests.plotting.test_series.dr2->date_range('1/2/2009', periods=4)
A:pandas.tests.plotting.test_series.index->date_range('1/1/2000', periods=12)
A:pandas.tests.plotting.test_series.values->randn(index.size)
A:pandas.tests.plotting.test_series.s_err->numpy.random.randn(10)
A:pandas.tests.plotting.test_series.d_err->DataFrame(randn(10, 2), index=s.index, columns=['x', 'y'])
A:pandas.tests.plotting.test_series.ix->date_range('1/1/2000', '1/1/2001', freq='M')
A:pandas.tests.plotting.test_series.ts_err->Series(np.random.randn(12), index=ix)
A:pandas.tests.plotting.test_series.td_err->DataFrame(randn(12, 2), index=ix, columns=['x', 'y'])
A:pandas.tests.plotting.test_series.result->_get_standard_colors(num_colors=3, color=[c])
A:pandas.tests.plotting.test_series.def_colors->self._maybe_unpack_cycler(mpl.rcParams)
pandas.tests.plotting.test_series.TestSeriesPlots(TestPlotBase)
pandas.tests.plotting.test_series.TestSeriesPlots.setup_method(self,method)
pandas.tests.plotting.test_series.TestSeriesPlots.test_bar_ignore_index(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_bar_log(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_boxplot_series(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_custom_business_day_freq(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_df_series_secondary_legend(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_dont_modify_rcParams(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_dup_datetime_index_plot(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_errorbar_plot(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_bins_legacy(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_df_kwargs(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_df_with_nonnumerics(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_kde(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_kde_color(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_kwargs(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_layout(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_layout_with_by(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_legacy(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_no_overlap(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_hist_secondary_legend(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_invalid_kind(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_invalid_plot_data(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_irregular_datetime(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_kde_kwargs(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_kde_missing_vals(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_kind_both_ways(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_label(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_line_area_nan_series(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_line_use_index_false(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_partially_invalid_plot_data(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_pie_nan(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_pie_series(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_plot(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_plot_fails_with_dupe_color_and_style(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_plot_figsize_and_title(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_rotation(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_series_grid_settings(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_series_plot_color_kwargs(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_standard_colors(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_standard_colors_all(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_table(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_time_series_plot_color_kwargs(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_time_series_plot_color_with_empty_kwargs(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_ts_area_lim(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_ts_line_lim(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_valid_object_plot(self)
pandas.tests.plotting.test_series.TestSeriesPlots.test_xticklabels(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/plotting/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/plotting/test_datetimelike.py----------------------------------------
A:pandas.tests.plotting.test_datetimelike.index->timedelta_range('1 day 2 hr 30 min 10 s', periods=10, freq='1 ns')
A:pandas.tests.plotting.test_datetimelike.ts->Series(1, index=rng)
A:pandas.tests.plotting.test_datetimelike.df->DataFrame(np.random.randn(len(rng), 3), rng)
A:pandas.tests.plotting.test_datetimelike.ax->matplotlib.pyplot.gcf().add_subplot(212)
A:pandas.tests.plotting.test_datetimelike.idx->date_range('1/1/2000', periods=10)
A:pandas.tests.plotting.test_datetimelike.df2->DataFrame(np.random.randn(len(rng), 3), rng).copy()
A:pandas.tests.plotting.test_datetimelike.i->numpy.array([1, 2, 3])
A:pandas.tests.plotting.test_datetimelike.a->DataFrame(i, index=i)
A:pandas.tests.plotting.test_datetimelike.s->Series(np.random.randn(len(index)), index)
A:pandas.tests.plotting.test_datetimelike.rng->date_range('1/1/2011', periods=10, freq='H')
A:pandas.tests.plotting.test_datetimelike.ser->Series(np.random.randn(10))
A:pandas.tests.plotting.test_datetimelike.annual->Series(1, index=date_range('2014-01-01', periods=3, freq='A-DEC'))
A:pandas.tests.plotting.test_datetimelike.daily->Series(1, index=date_range('2014-01-01', periods=3, freq='D'))
A:pandas.tests.plotting.test_datetimelike.fig->matplotlib.pyplot.gcf()
A:pandas.tests.plotting.test_datetimelike.dr->Index([datetime(2000, 1, 1), datetime(2000, 1, 6), datetime(2000, 1, 11)])
A:pandas.tests.plotting.test_datetimelike.axis->matplotlib.pyplot.gcf().add_subplot(212).get_xaxis()
A:pandas.tests.plotting.test_datetimelike.tlocs->matplotlib.pyplot.gcf().add_subplot(212).get_xaxis().get_ticklocs()
A:pandas.tests.plotting.test_datetimelike.tlabels->matplotlib.pyplot.gcf().add_subplot(212).get_xaxis().get_ticklabels()
A:pandas.tests.plotting.test_datetimelike.xp->l.get_text()
A:pandas.tests.plotting.test_datetimelike.rs->time(h, m, s).strftime('%H:%M:%S.%f')
A:pandas.tests.plotting.test_datetimelike.diffs->Series(ax.get_lines()[0].get_xydata()[:, 0]).diff()
A:pandas.tests.plotting.test_datetimelike.ret->f(*args, **kwargs)
A:pandas.tests.plotting.test_datetimelike.bts->DataFrame({'a': tm.makeTimeSeries()})
A:pandas.tests.plotting.test_datetimelike.xlim->matplotlib.pyplot.gcf().add_subplot(212).get_xlim()
A:pandas.tests.plotting.test_datetimelike.result->matplotlib.pyplot.gcf().add_subplot(212).get_xlim()
A:pandas.tests.plotting.test_datetimelike.axes->DataFrame(np.random.randn(len(rng), 3), rng).plot(kind='bar', secondary_y=['a', 'c'], subplots=True)
A:pandas.tests.plotting.test_datetimelike.xaxis->matplotlib.pyplot.gcf().add_subplot(212).get_xaxis()
A:pandas.tests.plotting.test_datetimelike.(vmin, vmax)->matplotlib.pyplot.gcf().add_subplot(212).get_xlim()
A:pandas.tests.plotting.test_datetimelike.lines->matplotlib.pyplot.gcf().add_subplot(212).plot(x, y, label='Y')
A:pandas.tests.plotting.test_datetimelike.data->l.get_xydata()
A:pandas.tests.plotting.test_datetimelike.low->Series(np.random.randn(len(idxl)), idxl)
A:pandas.tests.plotting.test_datetimelike.idxh->date_range('1/1/1999', periods=365, freq='D')
A:pandas.tests.plotting.test_datetimelike.ser2->Series(np.random.randn(10), idx)
A:pandas.tests.plotting.test_datetimelike.ax2->ax1.twinx()
A:pandas.tests.plotting.test_datetimelike.s1->Series(1, index=index_1)
A:pandas.tests.plotting.test_datetimelike.idx1->date_range('2015-01-01', periods=3, freq='M')
A:pandas.tests.plotting.test_datetimelike.idx2->idx1[:1].union(idx1[2:])
A:pandas.tests.plotting.test_datetimelike.(left, right)->matplotlib.pyplot.gcf().add_subplot(212).get_xlim()
A:pandas.tests.plotting.test_datetimelike.pidx->Series(1, index=index_1).index.to_period()
A:pandas.tests.plotting.test_datetimelike.x1->lines[0].get_xdata()
A:pandas.tests.plotting.test_datetimelike.x2->lines[1].get_xdata()
A:pandas.tests.plotting.test_datetimelike.idxl->date_range('1/1/1999', periods=12, freq='M')
A:pandas.tests.plotting.test_datetimelike.high->Series(np.random.randn(len(idxh)), idxh)
A:pandas.tests.plotting.test_datetimelike.ts_ind->date_range('2012-01-01 13:00', '2012-01-02', freq='H')
A:pandas.tests.plotting.test_datetimelike.ts_data->numpy.random.randn(12)
A:pandas.tests.plotting.test_datetimelike.ts2->Series(1, index=rng).asfreq('T').interpolate()
A:pandas.tests.plotting.test_datetimelike.leg->matplotlib.pyplot.gcf().add_subplot(212).get_legend()
A:pandas.tests.plotting.test_datetimelike.ps->Series(np.random.randn(len(rng)), rng)
A:pandas.tests.plotting.test_datetimelike.s2->Series(2, index=index_2)
A:pandas.tests.plotting.test_datetimelike.(fig, (ax1, ax2))->self.plt.subplots(nrows=2, sharex=True)
A:pandas.tests.plotting.test_datetimelike.(fig, ax1)->self.plt.subplots()
A:pandas.tests.plotting.test_datetimelike.expected_h->date_range('1/1/1999', periods=365, freq='D').to_period().asi8.astype(np.float64)
A:pandas.tests.plotting.test_datetimelike.expected_l->numpy.array([1514, 1519, 1523, 1527, 1531, 1536, 1540, 1544, 1549, 1553, 1558, 1562], dtype=np.float64)
A:pandas.tests.plotting.test_datetimelike.xdata->l.get_xdata(orig=False)
A:pandas.tests.plotting.test_datetimelike.expected_x->numpy.array([1514, 1519, 1523, 1527, 1531, 1536, 1540, 1544, 1549, 1553, 1558, 1562], dtype=np.float64)
A:pandas.tests.plotting.test_datetimelike.expected_y->numpy.zeros(len(expected_x), dtype=np.float64)
A:pandas.tests.plotting.test_datetimelike.t->datetime(1, 1, 1, 3, 30, 0)
A:pandas.tests.plotting.test_datetimelike.deltas->numpy.random.randint(1, 20, 3).cumsum()
A:pandas.tests.plotting.test_datetimelike.ticks->matplotlib.pyplot.gcf().add_subplot(212).get_xticks()
A:pandas.tests.plotting.test_datetimelike.labels->matplotlib.pyplot.gcf().add_subplot(212).get_xticklabels()
A:pandas.tests.plotting.test_datetimelike.(m, s)->divmod(int(t), 60)
A:pandas.tests.plotting.test_datetimelike.(h, m)->divmod(m, 60)
A:pandas.tests.plotting.test_datetimelike.colors->set()
A:pandas.tests.plotting.test_datetimelike.x->DatetimeIndex(start='2012-01-02', periods=10, freq='D')
A:pandas.tests.plotting.test_datetimelike.y->lrange(len(x))
A:pandas.tests.plotting.test_datetimelike.values1->numpy.arange(10.0, 11.0, 0.5)
A:pandas.tests.plotting.test_datetimelike.values2->numpy.arange(11.0, 12.0, 0.5)
A:pandas.tests.plotting.test_datetimelike.kw->dict(fmt='-', lw=4)
A:pandas.tests.plotting.test_datetimelike.(line1, line2)->matplotlib.pyplot.gcf().add_subplot(212).get_lines()
A:pandas.tests.plotting.test_datetimelike.exp->numpy.array([x.toordinal() for x in dates], dtype=np.float64)
A:pandas.tests.plotting.test_datetimelike.(left_before, right_before)->matplotlib.pyplot.gcf().add_subplot(212).get_xlim()
A:pandas.tests.plotting.test_datetimelike.(left_after, right_after)->matplotlib.pyplot.gcf().add_subplot(212).get_xlim()
A:pandas.tests.plotting.test_datetimelike.index_1->date_range(start='2000-01-01', periods=4, freq='D')
A:pandas.tests.plotting.test_datetimelike.index_2->date_range(start='2000-01-05', periods=4, freq='D')
A:pandas.tests.plotting.test_datetimelike.w1->numpy.arange(0, 1, 0.1)
A:pandas.tests.plotting.test_datetimelike.orig_ax->kwargs.pop('ax', plt.gca())
A:pandas.tests.plotting.test_datetimelike.orig_axfreq->getattr(orig_ax, 'freq', None)
pandas.tests.plotting.test_datetimelike.TestTSPlot(TestPlotBase)
pandas.tests.plotting.test_datetimelike.TestTSPlot.setup_method(self,method)
pandas.tests.plotting.test_datetimelike.TestTSPlot.teardown_method(self,method)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_ax_plot(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_axis_limits(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_both_style_and_color(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_business_freq(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_business_freq_convert(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_dataframe(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_fake_inferred_business(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_finder_annual(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_finder_daily(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_finder_hourly(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_finder_minutely(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_finder_monthly(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_finder_monthly_long(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_finder_quarterly(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_fontsize_set_correctly(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_format_date_axis(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_format_timedelta_ticks_narrow(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_format_timedelta_ticks_wide(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_frame_inferred(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_from_resampling_area_line_mixed(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_from_weekly_resampling(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_gap_upsample(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_gaps(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_get_datevalue(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_get_finder(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_high_freq(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_hist(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_irreg_dtypes(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_irreg_hf(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_irregular_datetime64_repr_bug(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_irregular_ts_shared_ax_xlim(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_is_error_nozeroindex(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_line_plot_datetime_frame(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_line_plot_datetime_series(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_line_plot_inferred_freq(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_line_plot_period_frame(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_line_plot_period_series(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mixed_freq_alignment(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mixed_freq_hf_first(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mixed_freq_irreg_period(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mixed_freq_irregular_first(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mixed_freq_irregular_first_df(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mixed_freq_lf_first(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mixed_freq_regular_first(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mixed_freq_regular_first_df(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mixed_freq_second_millisecond(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mixed_freq_shared_ax(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_mpl_nopandas(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_nonnumeric_exclude(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_nonzero_base(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_plot_multiple_inferred_freq(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_plot_offset_freq(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_plot_outofbounds_datetime(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_bar(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_bar_frame(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_frame(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_kde(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_legend(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_upsample(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_y(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_y_irregular_ts_xlim(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_y_mixed_freq_ts_xlim(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_y_non_ts_xlim(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_y_regular_ts_xlim(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_secondary_y_ts(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_time(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_time_musec(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_timedelta_plot(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_to_weekly_resampling(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_ts_plot_format_coord(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_ts_plot_with_tz(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_tsplot(self)
pandas.tests.plotting.test_datetimelike.TestTSPlot.test_uhf(self)
pandas.tests.plotting.test_datetimelike._check_plot_works(f,freq=None,series=None,*args,**kwargs)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tests/plotting/test_groupby.py----------------------------------------
A:pandas.tests.plotting.test_groupby.weight->Series(np.random.normal(166, 20, size=n))
A:pandas.tests.plotting.test_groupby.height->Series(np.random.normal(60, 10, size=n))
A:pandas.tests.plotting.test_groupby.gender->numpy.random.choice(['male', 'female'], size=n)
A:pandas.tests.plotting.test_groupby.df->DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 2, 1], 'z': list('ababa')})
A:pandas.tests.plotting.test_groupby.bins->numpy.arange(80, 100 + 2, 1)
A:pandas.tests.plotting.test_groupby.res->DataFrame({'x': [1, 2, 3, 4, 5], 'y': [1, 2, 3, 2, 1], 'z': list('ababa')}).groupby('z').plot.scatter(x='x', y='y')
pandas.tests.plotting.test_groupby.TestDataFrameGroupByPlots(TestPlotBase)
pandas.tests.plotting.test_groupby.TestDataFrameGroupByPlots.test_hist_single_row(self)
pandas.tests.plotting.test_groupby.TestDataFrameGroupByPlots.test_plot_kwargs(self)
pandas.tests.plotting.test_groupby.TestDataFrameGroupByPlots.test_plot_submethod_works(self)
pandas.tests.plotting.test_groupby.TestDataFrameGroupByPlots.test_plotting_with_float_index_works(self)
pandas.tests.plotting.test_groupby.TestDataFrameGroupByPlots.test_series_groupby_plotting_nominally_works(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/formats/style.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/formats/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tools/hashing.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tools/plotting.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tools/merge.py----------------------------------------
A:pandas.tools.merge.concat->concat_wrap()
pandas.tools.merge.concat_wrap()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/tools/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/computation/expressions.py----------------------------------------
pandas.computation.expressions.set_use_numexpr(v=True)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/computation/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/compat/openpyxl_compat.py----------------------------------------
A:pandas.compat.openpyxl_compat.ver->LooseVersion(openpyxl.__version__)
pandas.compat.openpyxl_compat.is_compat(major_ver=1)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/compat/chainmap_impl.py----------------------------------------
A:pandas.compat.chainmap_impl.repr_running->set()
A:pandas.compat.chainmap_impl.result->user_function(self)
A:pandas.compat.chainmap_impl.wrapper.__module__->getattr(user_function, '__module__')
A:pandas.compat.chainmap_impl.wrapper.__doc__->getattr(user_function, '__doc__')
A:pandas.compat.chainmap_impl.wrapper.__name__->getattr(user_function, '__name__')
pandas.compat.chainmap_impl.ChainMap(self,*maps)
pandas.compat.chainmap_impl.ChainMap.__bool__(self)
pandas.compat.chainmap_impl.ChainMap.__contains__(self,key)
pandas.compat.chainmap_impl.ChainMap.__delitem__(self,key)
pandas.compat.chainmap_impl.ChainMap.__getitem__(self,key)
pandas.compat.chainmap_impl.ChainMap.__init__(self,*maps)
pandas.compat.chainmap_impl.ChainMap.__iter__(self)
pandas.compat.chainmap_impl.ChainMap.__len__(self)
pandas.compat.chainmap_impl.ChainMap.__missing__(self,key)
pandas.compat.chainmap_impl.ChainMap.__repr__(self)
pandas.compat.chainmap_impl.ChainMap.__setitem__(self,key,value)
pandas.compat.chainmap_impl.ChainMap.clear(self)
pandas.compat.chainmap_impl.ChainMap.copy(self)
pandas.compat.chainmap_impl.ChainMap.fromkeys(cls,iterable,*args)
pandas.compat.chainmap_impl.ChainMap.get(self,key,default=None)
pandas.compat.chainmap_impl.ChainMap.new_child(self,m=None)
pandas.compat.chainmap_impl.ChainMap.parents(self)
pandas.compat.chainmap_impl.ChainMap.pop(self,key,*args)
pandas.compat.chainmap_impl.ChainMap.popitem(self)
pandas.compat.chainmap_impl.recursive_repr(fillvalue='...')


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/compat/chainmap.py----------------------------------------
pandas.compat.DeepChainMap(ChainMap)
pandas.compat.DeepChainMap.__delitem__(self,key)
pandas.compat.DeepChainMap.__setitem__(self,key,value)
pandas.compat.DeepChainMap.new_child(self,m=None)
pandas.compat.chainmap.DeepChainMap(ChainMap)
pandas.compat.chainmap.DeepChainMap.__delitem__(self,key)
pandas.compat.chainmap.DeepChainMap.__setitem__(self,key,value)
pandas.compat.chainmap.DeepChainMap.new_child(self,m=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/compat/__init__.py----------------------------------------
A:pandas.compat.__init__.sig->inspect.signature(f)
A:pandas.compat.__init__.argspec->namedtuple('Signature', ['args', 'defaults', 'varargs', 'keywords'])
A:pandas.compat.__init__._name_re->re.compile('[a-zA-Z_][a-zA-Z0-9_]*$')
A:pandas.compat.__init__.f.__qualname__->'{klass}.{name}'.format(klass=cls.__name__, name=name)
A:pandas.compat.__init__.data->data.decode(encoding).decode(encoding)
A:pandas.compat.__init__.orig_vars->cls.__dict__.copy()
A:pandas.compat.__init__.(_, _, traceback)->sys.exc_info()
A:pandas.compat.__init__.timestr->bytes(timestr)
A:pandas.compat.__init__.self[key]value->self.default_factory()
pandas.compat.__init__.OrderedDefaultdict(self,*args,**kwargs)
pandas.compat.__init__.OrderedDefaultdict.__init__(self,*args,**kwargs)
pandas.compat.__init__.OrderedDefaultdict.__missing__(self,key)
pandas.compat.__init__.OrderedDefaultdict.__reduce__(self)
pandas.compat.__init__.add_metaclass(metaclass)
pandas.compat.__init__.bind_method(cls,name,func)
pandas.compat.__init__.is_platform_32bit()
pandas.compat.__init__.is_platform_linux()
pandas.compat.__init__.is_platform_little_endian()
pandas.compat.__init__.is_platform_mac()
pandas.compat.__init__.is_platform_windows()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/compat/pickle_compat.py----------------------------------------
A:pandas.compat.pickle_compat.args->self.stack.pop()
A:pandas.compat.pickle_compat.stack[-1]->func(*args)
A:pandas.compat.pickle_compat.(module, name)->_class_locations_map.get(key, key)
A:pandas.compat.pickle_compat.klass->getattr(mod, name)
A:pandas.compat.pickle_compat.Unpickler.dispatch->copy.copy(Unpickler.dispatch)
A:pandas.compat.pickle_compat.obj->self.stack.pop().__new__(cls, *args, **kwargs)
A:pandas.compat.pickle_compat.kwargs->self.stack.pop()
A:pandas.compat.pickle_compat.cls->self.stack.pop()
A:pandas.compat.pickle_compat.up->Unpickler(fh)
pandas.compat.pickle_compat.load(fh,encoding=None,compat=False,is_verbose=False)
pandas.compat.pickle_compat.load_newobj(self)
pandas.compat.pickle_compat.load_newobj_ex(self)
pandas.compat.pickle_compat.load_reduce(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/compat/numpy/function.py----------------------------------------
A:pandas.compat.numpy.function.ARGMINMAX_DEFAULTS->dict(out=None)
A:pandas.compat.numpy.function.validate_argmin->CompatValidator(ARGMINMAX_DEFAULTS, fname='argmin', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.validate_argmax->CompatValidator(ARGMINMAX_DEFAULTS, fname='argmax', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.(skipna, args)->process_skipna(skipna, args)
A:pandas.compat.numpy.function.ARGSORT_DEFAULTS->OrderedDict()
A:pandas.compat.numpy.function.validate_argsort->CompatValidator(ARGSORT_DEFAULTS, fname='argsort', max_fname_arg_count=0, method='both')
A:pandas.compat.numpy.function.CLIP_DEFAULTS->dict(out=None)
A:pandas.compat.numpy.function.validate_clip->CompatValidator(CLIP_DEFAULTS, fname='clip', method='both', max_fname_arg_count=3)
A:pandas.compat.numpy.function.COMPRESS_DEFAULTS->OrderedDict()
A:pandas.compat.numpy.function.validate_compress->CompatValidator(COMPRESS_DEFAULTS, fname='compress', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.CUM_FUNC_DEFAULTS->OrderedDict()
A:pandas.compat.numpy.function.validate_cum_func->CompatValidator(CUM_FUNC_DEFAULTS, method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.validate_cumsum->CompatValidator(CUM_FUNC_DEFAULTS, fname='cumsum', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.LOGICAL_FUNC_DEFAULTS->dict(out=None)
A:pandas.compat.numpy.function.validate_logical_func->CompatValidator(LOGICAL_FUNC_DEFAULTS, method='kwargs')
A:pandas.compat.numpy.function.MINMAX_DEFAULTS->dict(out=None)
A:pandas.compat.numpy.function.validate_min->CompatValidator(MINMAX_DEFAULTS, fname='min', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.validate_max->CompatValidator(MINMAX_DEFAULTS, fname='max', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.RESHAPE_DEFAULTS->dict(order='C')
A:pandas.compat.numpy.function.validate_reshape->CompatValidator(RESHAPE_DEFAULTS, fname='reshape', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.REPEAT_DEFAULTS->dict(axis=None)
A:pandas.compat.numpy.function.validate_repeat->CompatValidator(REPEAT_DEFAULTS, fname='repeat', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.ROUND_DEFAULTS->dict(out=None)
A:pandas.compat.numpy.function.validate_round->CompatValidator(ROUND_DEFAULTS, fname='round', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.SORT_DEFAULTS->OrderedDict()
A:pandas.compat.numpy.function.validate_sort->CompatValidator(SORT_DEFAULTS, fname='sort', method='kwargs')
A:pandas.compat.numpy.function.STAT_FUNC_DEFAULTS->OrderedDict()
A:pandas.compat.numpy.function.validate_stat_func->CompatValidator(STAT_FUNC_DEFAULTS, method='kwargs')
A:pandas.compat.numpy.function.validate_sum->CompatValidator(STAT_FUNC_DEFAULTS, fname='sort', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.validate_mean->CompatValidator(STAT_FUNC_DEFAULTS, fname='mean', method='both', max_fname_arg_count=1)
A:pandas.compat.numpy.function.STAT_DDOF_FUNC_DEFAULTS->OrderedDict()
A:pandas.compat.numpy.function.validate_stat_ddof_func->CompatValidator(STAT_DDOF_FUNC_DEFAULTS, method='kwargs')
A:pandas.compat.numpy.function.TAKE_DEFAULTS->OrderedDict()
A:pandas.compat.numpy.function.validate_take->CompatValidator(TAKE_DEFAULTS, fname='take', method='kwargs')
A:pandas.compat.numpy.function.TRANSPOSE_DEFAULTS->dict(axes=None)
A:pandas.compat.numpy.function.validate_transpose->CompatValidator(TRANSPOSE_DEFAULTS, fname='transpose', method='both', max_fname_arg_count=0)
A:pandas.compat.numpy.function.msg->'numpy operations are not valid with window objects. Use .expanding(...).{func}() instead '.format(func=name)
pandas.compat.numpy.function.CompatValidator(self,defaults,fname=None,method=None,max_fname_arg_count=None)
pandas.compat.numpy.function.CompatValidator.__init__(self,defaults,fname=None,method=None,max_fname_arg_count=None)
pandas.compat.numpy.function.process_skipna(skipna,args)
pandas.compat.numpy.function.validate_argmax_with_skipna(skipna,args,kwargs)
pandas.compat.numpy.function.validate_argmin_with_skipna(skipna,args,kwargs)
pandas.compat.numpy.function.validate_argsort_with_ascending(ascending,args,kwargs)
pandas.compat.numpy.function.validate_clip_with_axis(axis,args,kwargs)
pandas.compat.numpy.function.validate_cum_func_with_skipna(skipna,args,kwargs,name)
pandas.compat.numpy.function.validate_expanding_func(name,args,kwargs)
pandas.compat.numpy.function.validate_groupby_func(name,args,kwargs,allowed=None)
pandas.compat.numpy.function.validate_resampler_func(method,args,kwargs)
pandas.compat.numpy.function.validate_rolling_func(name,args,kwargs)
pandas.compat.numpy.function.validate_take_with_convert(convert,args,kwargs)
pandas.compat.numpy.function.validate_transpose_for_generic(inst,kwargs)
pandas.compat.numpy.function.validate_window_func(name,args,kwargs)
pandas.function.CompatValidator(self,defaults,fname=None,method=None,max_fname_arg_count=None)
pandas.function.process_skipna(skipna,args)
pandas.function.validate_argmax_with_skipna(skipna,args,kwargs)
pandas.function.validate_argmin_with_skipna(skipna,args,kwargs)
pandas.function.validate_argsort_with_ascending(ascending,args,kwargs)
pandas.function.validate_clip_with_axis(axis,args,kwargs)
pandas.function.validate_cum_func_with_skipna(skipna,args,kwargs,name)
pandas.function.validate_expanding_func(name,args,kwargs)
pandas.function.validate_groupby_func(name,args,kwargs,allowed=None)
pandas.function.validate_resampler_func(method,args,kwargs)
pandas.function.validate_rolling_func(name,args,kwargs)
pandas.function.validate_take_with_convert(convert,args,kwargs)
pandas.function.validate_transpose_for_generic(inst,kwargs)
pandas.function.validate_window_func(name,args,kwargs)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/compat/numpy/__init__.py----------------------------------------
A:pandas.compat.numpy.__init__._nlv->LooseVersion(_np_version)
A:pandas.compat.numpy.__init__._tz_regex->re.compile('[+-]0000$')
A:pandas.compat.numpy.__init__.s->tz_replacer(s)
A:pandas.compat.numpy.__init__.arr->tz_replacer(arr)
pandas.__init__.tz_replacer(s)
pandas.compat.numpy.__init__.np_array_datetime64_compat(arr,*args,**kwargs)
pandas.compat.numpy.__init__.np_datetime64_compat(s,*args,**kwargs)
pandas.compat.numpy.__init__.tz_replacer(s)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/util/_tester.py----------------------------------------
A:pandas.util._tester.PKG->os.path.dirname(os.path.dirname(__file__))


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/util/testing.py----------------------------------------
A:pandas.util.testing.testing_mode->os.environ.get('PANDAS_TESTING_MODE', 'None')
A:pandas.util.testing.path->u('__%s__.pickle' % rands(10))
A:pandas.util.testing.RANDS_CHARS->numpy.array(list(string.ascii_letters + string.digits), dtype=(np.str_, 1))
A:pandas.util.testing.RANDU_CHARS->numpy.array(list(u('').join(map(unichr, lrange(1488, 1488 + 26))) + string.digits), dtype=(np.unicode_, 1))
A:pandas.util.testing.retval->numpy.random.choice(RANDU_CHARS, size=nchars * np.prod(size)).view((np.unicode_, nchars)).reshape(size)
A:pandas.util.testing.mpl->pytest.importorskip('matplotlib')
A:pandas.util.testing.(lang, _)->locale.getlocale()
A:pandas.util.testing.process->subprocess.Popen(*popenargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE, **kwargs)
A:pandas.util.testing.(output, unused_err)->subprocess.Popen(*popenargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE, **kwargs).communicate()
A:pandas.util.testing.retcode->subprocess.Popen(*popenargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE, **kwargs).poll()
A:pandas.util.testing.cmd->kwargs.get('args')
A:pandas.util.testing.raw_locales->raw_locales.split(b'\n').split(b'\n')
A:pandas.util.testing.found->re.compile('%s.*' % prefix).findall('\n'.join(out_locales))
A:pandas.util.testing.current_locale->locale.getlocale()
A:pandas.util.testing.normalized_locale->locale.getlocale()
A:pandas.util.testing.sys.stdout->StringIO()
A:pandas.util.testing.sys.stderr->StringIO()
A:pandas.util.testing.kw->dict(color_scheme='Linux')
A:pandas.util.testing.pdb->Pdb(**kw)
A:pandas.util.testing.f->tempfile.TemporaryFile(suffix=filename)
A:pandas.util.testing.(fd, filename)->tempfile.mkstemp(suffix=filename)
A:pandas.util.testing.base_dir->os.path.abspath(os.path.dirname(filename))
A:pandas.util.testing.filled->take_1d(unique.values, labels, fill_value=unique._na_value)
A:pandas.util.testing.values->unique._shallow_copy(filled, name=index.names[level])
A:pandas.util.testing.llevel->_get_ilevel_values(left, level)
A:pandas.util.testing.rlevel->_get_ilevel_values(right, level)
A:pandas.util.testing.lobj->'MultiIndex level [{0}]'.format(level)
A:pandas.util.testing.msg->'Warning not set with correct stacklevel. File where warning is raised: {0} != {1}. Warning message: {2}'.format(actual_warning.filename, caller.filename, actual_warning.message)
A:pandas.util.testing.types->set([type(left).__name__, type(right).__name__])
A:pandas.util.testing.left_attr->getattr(left, attr)
A:pandas.util.testing.right_attr->getattr(right, attr)
A:pandas.util.testing.result->result.all().all()
A:pandas.util.testing.left->pprint_thing(left)
A:pandas.util.testing.right->pprint_thing(right)
A:pandas.util.testing.left_base->_get_base(left)
A:pandas.util.testing.right_base->_get_base(right)
A:pandas.util.testing.l->pandas.IntervalIndex(left)
A:pandas.util.testing.r->pandas.IntervalIndex(right)
A:pandas.util.testing.left_ind->getattr(left, axis)
A:pandas.util.testing.right_ind->getattr(right, axis)
A:pandas.util.testing._panel_frame_equal->partial(assert_frame_equal, check_names=False)
A:pandas.util.testing.assert_panel_equal->partial(assert_panelnd_equal, assert_func=_panel_frame_equal)
A:pandas.util.testing.assert_panel4d_equal->partial(assert_panelnd_equal, assert_func=assert_panel_equal)
A:pandas.util.testing.x->numpy.linspace(0, 100, num=k + 1)
A:pandas.util.testing.dt->datetime(2000, 1, 1)
A:pandas.util.testing.dr->PeriodIndex(start=dt, periods=k, freq='B', name=name)
A:pandas.util.testing.index->makeCustomIndex(nrows, nlevels=r_idx_nlevels, prefix='R', names=r_idx_names, ndupe_l=r_ndupe_l, idx_type=r_idx_type)
A:pandas.util.testing.dateIndex->Index(dateIndex, dtype=object)
A:pandas.util.testing.data->dict(((c, makePeriodFrame(nper)) for c in cols))
A:pandas.util.testing.d->dict(l1=makePanel(nper), l2=makePanel(nper), l3=makePanel(nper))
A:pandas.util.testing.idx_func->dict(i=makeIntIndex, f=makeFloatIndex, s=makeStringIndex, u=makeUnicodeIndex, dt=makeDateIndex, td=makeTimedeltaIndex, p=makePeriodIndex).get(idx_type)
A:pandas.util.testing.idx->idx_func(nentries)
A:pandas.util.testing.numeric_tuple->re.sub('[^\\d_]_?', '', x).split('_')
A:pandas.util.testing.cnt->Counter()
A:pandas.util.testing.tuples->lzip(*tuples)
A:pandas.util.testing.columns->makeCustomIndex(ncols, nlevels=c_idx_nlevels, prefix='C', names=c_idx_names, ndupe_l=c_ndupe_l, idx_type=c_idx_type)
A:pandas.util.testing.random_state->numpy.random.RandomState(random_state)
A:pandas.util.testing.size->int(np.round((1 - density) * nrows * ncols))
A:pandas.util.testing.extra_size->min(size + min_rows, fac * size)
A:pandas.util.testing.ind->_gen_unique_rand(random_state, extra_size)
A:pandas.util.testing.j->numpy.floor(ind * 1.0 / nrows).astype(int)
A:pandas.util.testing.i->(ind - j * nrows).astype(int)
A:pandas.util.testing.df->makeDataFrame()
A:pandas.util.testing.(i, j)->_create_missing_idx(*df.shape, density=density, random_state=random_state)
A:pandas.util.testing.mod->__import__(pkg_name)
A:pandas.util.testing.errno->getattr(e.reason, 'errno', None)
A:pandas.util.testing.e_str->str(e)
A:pandas.util.testing.attrs->object.__getattribute__(self, 'attrs')
A:pandas.util.testing.obj->object.__getattribute__(self, 'obj')
A:pandas.util.testing.sys.stdin->SimpleMock(sys.stdin, 'encoding', encoding)
A:pandas.util.testing.manager->_AssertRaisesContextmanager(exception=_exception, regexp=_regexp)
A:pandas.util.testing.regexp->re.compile(regexp, re.DOTALL)
A:pandas.util.testing.exp_name->getattr(expected, '__name__', str(expected))
A:pandas.util.testing.val->str(exc_value)
A:pandas.util.testing.e->AssertionError('"%s" does not match "%s"' % (self.regexp.pattern, str(val)))
A:pandas.util.testing.caller->getframeinfo(stack()[2][0])
A:pandas.util.testing.self.start_state->numpy.random.get_state()
A:pandas.util.testing.updated_kwargs->update_kwargs(i)
A:pandas.util.testing.thread->threading.Thread(target=func, args=args, kwargs=updated_kwargs)
A:pandas.util.testing.noattr->object()
A:pandas.util.testing.old->getattr(ob, attr, noattr)
A:pandas.util.testing.orig_tz->os.environ.get('TZ')
pandas.util.testing.RNGContext(self,seed)
pandas.util.testing.RNGContext.__enter__(self)
pandas.util.testing.RNGContext.__exit__(self,exc_type,exc_value,traceback)
pandas.util.testing.RNGContext.__init__(self,seed)
pandas.util.testing.SimpleMock(self,obj,*args,**kwds)
pandas.util.testing.SimpleMock.__getattribute__(self,name)
pandas.util.testing.SimpleMock.__init__(self,obj,*args,**kwds)
pandas.util.testing.SubclassedCategorical(Categorical)
pandas.util.testing.SubclassedCategorical._constructor(self)
pandas.util.testing.SubclassedDataFrame(DataFrame)
pandas.util.testing.SubclassedDataFrame._constructor(self)
pandas.util.testing.SubclassedDataFrame._constructor_sliced(self)
pandas.util.testing.SubclassedSeries(Series)
pandas.util.testing.SubclassedSeries._constructor(self)
pandas.util.testing.SubclassedSeries._constructor_expanddim(self)
pandas.util.testing.SubclassedSparseDataFrame(pd.SparseDataFrame)
pandas.util.testing.SubclassedSparseDataFrame._constructor(self)
pandas.util.testing.SubclassedSparseDataFrame._constructor_sliced(self)
pandas.util.testing.SubclassedSparseSeries(pd.SparseSeries)
pandas.util.testing.SubclassedSparseSeries._constructor(self)
pandas.util.testing.SubclassedSparseSeries._constructor_expanddim(self)
pandas.util.testing.TestSubDict(self,*args,**kwargs)
pandas.util.testing.TestSubDict.__init__(self,*args,**kwargs)
pandas.util.testing._AssertRaisesContextmanager(self,exception,regexp=None)
pandas.util.testing._AssertRaisesContextmanager.__enter__(self)
pandas.util.testing._AssertRaisesContextmanager.__exit__(self,exc_type,exc_value,trace_back)
pandas.util.testing._AssertRaisesContextmanager.__init__(self,exception,regexp=None)
pandas.util.testing._AssertRaisesContextmanager.exception_matches(self,exc_type,exc_value,trace_back)
pandas.util.testing._can_set_locale(lc)
pandas.util.testing._check_if_lzma()
pandas.util.testing._check_isinstance(left,right,cls)
pandas.util.testing._create_missing_idx(nrows,ncols,density,random_state=None)
pandas.util.testing._default_locale_getter()
pandas.util.testing._incompat_bottleneck_version(method)
pandas.util.testing._skip_if_32bit()
pandas.util.testing._skip_if_has_locale()
pandas.util.testing._skip_if_mpl_1_5()
pandas.util.testing._skip_if_no_dateutil()
pandas.util.testing._skip_if_no_ipython()
pandas.util.testing._skip_if_no_localpath()
pandas.util.testing._skip_if_no_lzma()
pandas.util.testing._skip_if_no_mock()
pandas.util.testing._skip_if_no_mpl()
pandas.util.testing._skip_if_no_pathlib()
pandas.util.testing._skip_if_no_pytz()
pandas.util.testing._skip_if_no_scipy()
pandas.util.testing._skip_if_no_xarray()
pandas.util.testing._skip_if_not_us_locale()
pandas.util.testing._skip_if_windows()
pandas.util.testing._skip_if_windows_python_3()
pandas.util.testing._skip_module_if_no_mpl()
pandas.util.testing._valid_locales(locales,normalize)
pandas.util.testing.add_nans(panel)
pandas.util.testing.add_nans_panel4d(panel4d)
pandas.util.testing.all_index_generator(k=10)
pandas.util.testing.all_timeseries_index_generator(k=10)
pandas.util.testing.assert_almost_equal(left,right,check_exact=False,check_dtype='equiv',check_less_precise=False,**kwargs)
pandas.util.testing.assert_attr_equal(attr,left,right,obj='Attributes')
pandas.util.testing.assert_categorical_equal(left,right,check_dtype=True,obj='Categorical',check_category_order=True)
pandas.util.testing.assert_class_equal(left,right,exact=True,obj='Input')
pandas.util.testing.assert_contains_all(iterable,dic)
pandas.util.testing.assert_copy(iter1,iter2,**eql_kwargs)
pandas.util.testing.assert_dict_equal(left,right,compare_keys=True)
pandas.util.testing.assert_frame_equal(left,right,check_dtype=True,check_index_type='equiv',check_column_type='equiv',check_frame_type=True,check_less_precise=False,check_names=True,by_blocks=False,check_exact=False,check_datetimelike_compat=False,check_categorical=True,check_like=False,obj='DataFrame')
pandas.util.testing.assert_index_equal(left,right,exact='equiv',check_names=True,check_less_precise=False,check_exact=True,check_categorical=True,obj='Index')
pandas.util.testing.assert_is_valid_plot_return_object(objs)
pandas.util.testing.assert_numpy_array_equal(left,right,strict_nan=False,check_dtype=True,err_msg=None,obj='numpyarray',check_same=None)
pandas.util.testing.assert_panelnd_equal(left,right,check_dtype=True,check_panel_type=False,check_less_precise=False,assert_func=assert_frame_equal,check_names=False,by_blocks=False,obj='Panel')
pandas.util.testing.assert_produces_warning(expected_warning=Warning,filter_level='always',clear=None,check_stacklevel=True)
pandas.util.testing.assert_raises_regex(_exception,_regexp,_callable=None,*args,**kwargs)
pandas.util.testing.assert_series_equal(left,right,check_dtype=True,check_index_type='equiv',check_series_type=True,check_less_precise=False,check_names=True,check_exact=False,check_datetimelike_compat=False,check_categorical=True,obj='Series')
pandas.util.testing.assert_sp_array_equal(left,right,check_dtype=True)
pandas.util.testing.assert_sp_frame_equal(left,right,check_dtype=True,exact_indices=True,check_frame_type=True,obj='SparseDataFrame')
pandas.util.testing.assert_sp_list_equal(left,right)
pandas.util.testing.assert_sp_series_equal(left,right,check_dtype=True,exact_indices=True,check_series_type=True,check_names=True,obj='SparseSeries')
pandas.util.testing.can_connect(url,error_classes=_network_error_classes)
pandas.util.testing.capture_stderr(f)
pandas.util.testing.capture_stdout(f)
pandas.util.testing.check_output(*popenargs,**kwargs)
pandas.util.testing.close(fignum=None)
pandas.util.testing.debug(f,*args,**kwargs)
pandas.util.testing.ensure_clean(filename=None,return_filelike=False)
pandas.util.testing.equalContents(arr1,arr2)
pandas.util.testing.getArangeMat()
pandas.util.testing.getCols(k)
pandas.util.testing.getMixedTypeDict()
pandas.util.testing.getPeriodData(nper=None)
pandas.util.testing.getSeriesData()
pandas.util.testing.getTimeSeriesData(nper=None,freq='B')
pandas.util.testing.get_data_path(f='')
pandas.util.testing.get_locales(prefix=None,normalize=True,locale_getter=_default_locale_getter)
pandas.util.testing.is_sorted(seq)
pandas.util.testing.isiterable(obj)
pandas.util.testing.makeBoolIndex(k=10,name=None)
pandas.util.testing.makeCategoricalIndex(k=10,n=3,name=None)
pandas.util.testing.makeCustomDataframe(nrows,ncols,c_idx_names=True,r_idx_names=True,c_idx_nlevels=1,r_idx_nlevels=1,data_gen_f=None,c_ndupe_l=None,r_ndupe_l=None,dtype=None,c_idx_type=None,r_idx_type=None)
pandas.util.testing.makeCustomIndex(nentries,nlevels,prefix='#',names=False,ndupe_l=None,idx_type=None)
pandas.util.testing.makeDataFrame()
pandas.util.testing.makeDateIndex(k=10,freq='B',name=None)
pandas.util.testing.makeFloatIndex(k=10,name=None)
pandas.util.testing.makeFloatSeries(name=None)
pandas.util.testing.makeIntIndex(k=10,name=None)
pandas.util.testing.makeIntervalIndex(k=10,name=None)
pandas.util.testing.makeMissingCustomDataframe(nrows,ncols,density=0.9,random_state=None,c_idx_names=True,r_idx_names=True,c_idx_nlevels=1,r_idx_nlevels=1,data_gen_f=None,c_ndupe_l=None,r_ndupe_l=None,dtype=None,c_idx_type=None,r_idx_type=None)
pandas.util.testing.makeMissingDataframe(density=0.9,random_state=None)
pandas.util.testing.makeMixedDataFrame()
pandas.util.testing.makeObjectSeries(name=None)
pandas.util.testing.makePanel(nper=None)
pandas.util.testing.makePanel4D(nper=None)
pandas.util.testing.makePeriodFrame(nper=None)
pandas.util.testing.makePeriodIndex(k=10,name=None)
pandas.util.testing.makePeriodPanel(nper=None)
pandas.util.testing.makePeriodSeries(nper=None,name=None)
pandas.util.testing.makeRangeIndex(k=10,name=None)
pandas.util.testing.makeStringIndex(k=10,name=None)
pandas.util.testing.makeStringSeries(name=None)
pandas.util.testing.makeTimeDataFrame(nper=None,freq='B')
pandas.util.testing.makeTimeSeries(nper=None,freq='B',name=None)
pandas.util.testing.makeTimedeltaIndex(k=10,freq='D',name=None)
pandas.util.testing.makeUIntIndex(k=10,name=None)
pandas.util.testing.makeUnicodeIndex(k=10,name=None)
pandas.util.testing.network(t,url='http://www.google.com',raise_on_error=_RAISE_NETWORK_ERROR_DEFAULT,check_before_test=False,error_classes=_network_error_classes,skip_errnos=_network_errno_vals,_skip_on_messages=_network_error_messages)
pandas.util.testing.optional_args(decorator)
pandas.util.testing.patch(ob,attr,value)
pandas.util.testing.pudebug(f,*args,**kwargs)
pandas.util.testing.raise_assert_detail(obj,message,left,right,diff=None)
pandas.util.testing.randbool(size=(),p=0.5)
pandas.util.testing.rands(nchars)
pandas.util.testing.rands_array(nchars,size,dtype='O')
pandas.util.testing.randu(nchars)
pandas.util.testing.randu_array(nchars,size,dtype='O')
pandas.util.testing.reset_display_options()
pandas.util.testing.reset_testing_mode()
pandas.util.testing.round_trip_pickle(obj,path=None)
pandas.util.testing.set_locale(new_locale,lc_var=locale.LC_ALL)
pandas.util.testing.set_testing_mode()
pandas.util.testing.set_timezone(tz)
pandas.util.testing.set_trace()
pandas.util.testing.skip_if_no_ne(engine='numexpr')
pandas.util.testing.skip_if_no_package(pkg_name,min_version=None,max_version=None,app='pandas',checker=LooseVersion)
pandas.util.testing.stdin_encoding(encoding=None)
pandas.util.testing.test_parallel(num_threads=2,kwargs_list=None)
pandas.util.testing.use_numexpr(use,min_elements=expr._MIN_ELEMENTS)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/util/_validators.py----------------------------------------
A:pandas.util._validators.kwargs->dict(zip(compat_args, args))
A:pandas.util._validators.kwds->dict(zip(compat_args, args)).copy()
A:pandas.util._validators.args_dict->dict(zip(compat_args, args))
pandas.util._validators._check_arg_length(fname,args,max_fname_arg_count,compat_args)
pandas.util._validators._check_for_default_values(fname,arg_val_dict,compat_args)
pandas.util._validators._check_for_invalid_keys(fname,kwargs,compat_args)
pandas.util._validators.validate_args(fname,args,max_fname_arg_count,compat_args)
pandas.util._validators.validate_args_and_kwargs(fname,args,kwargs,max_fname_arg_count,compat_args)
pandas.util._validators.validate_bool_kwarg(value,arg_name)
pandas.util._validators.validate_kwargs(fname,kwargs,compat_args)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/util/hashing.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/util/_decorators.py----------------------------------------
A:pandas.util._decorators.old_arg_value->kwargs.pop(old_arg_name, None)
A:pandas.util._decorators.new_arg_value->mapping(old_arg_value)
A:pandas.util._decorators.result->cls()
A:pandas.util._decorators.self.addendum->indent(addendum, indents=indents)
A:pandas.util._decorators.func.__doc__->dedent(self.join.join(docitems))
A:pandas.util._decorators.jointext->''.join(['\n'] + ['    '] * indents)
A:pandas.util._decorators.spec->signature(func)
A:pandas.util._decorators.n_wo_defaults->len(spec.args)
pandas.util.Appender(self,addendum,join='',indents=0)
pandas.util.Substitution(self,*args,**kwargs)
pandas.util.Substitution.from_params(cls,params)
pandas.util.Substitution.update(self,*args,**kwargs)
pandas.util._decorators.Appender(self,addendum,join='',indents=0)
pandas.util._decorators.Appender.__init__(self,addendum,join='',indents=0)
pandas.util._decorators.Substitution(self,*args,**kwargs)
pandas.util._decorators.Substitution.__init__(self,*args,**kwargs)
pandas.util._decorators.Substitution.from_params(cls,params)
pandas.util._decorators.Substitution.update(self,*args,**kwargs)
pandas.util._decorators.deprecate(name,alternative,alt_name=None)
pandas.util._decorators.deprecate_kwarg(old_arg_name,new_arg_name,mapping=None,stacklevel=2)
pandas.util._decorators.docstring_wrapper(self,func,creator,default=None)
pandas.util._decorators.docstring_wrapper.__doc__(self)
pandas.util._decorators.docstring_wrapper.__get__(self,instance,cls=None)
pandas.util._decorators.docstring_wrapper.__init__(self,func,creator,default=None)
pandas.util._decorators.indent(text,indents=1)
pandas.util._decorators.make_signature(func)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/util/_doctools.py----------------------------------------
A:pandas.util._doctools.vcells->max([self._shape(l)[0] for l in left] + [self._shape(right)[0]])
A:pandas.util._doctools.hcells->sum([self._shape(l)[1] for l in left] + [self._shape(right)[1]])
A:pandas.util._doctools.right->self._conv(right)
A:pandas.util._doctools.(hcells, vcells)->self._get_cells(left, right, vertical)
A:pandas.util._doctools.fig->matplotlib.pyplot.figure(figsize=figsize)
A:pandas.util._doctools.gs->matplotlib.gridspec.GridSpec(1, hcells)
A:pandas.util._doctools.max_left_cols->max([self._shape(l)[1] for l in left])
A:pandas.util._doctools.max_left_rows->max([self._shape(l)[0] for l in left])
A:pandas.util._doctools.ax->matplotlib.pyplot.subplot(gs[0, i:])
A:pandas.util._doctools.max_rows->max([self._shape(df)[0] for df in left + [right]])
A:pandas.util._doctools.sp->self._shape(l)
A:pandas.util._doctools.data->pandas.concat([col_df, data])
A:pandas.util._doctools.col->pandas.MultiIndex.from_tuples([(1, 'A'), (1, 'B')])
A:pandas.util._doctools.col_df->pandas.DataFrame(values)
A:pandas.util._doctools.df->self._insert_index(df)
A:pandas.util._doctools.tb->pandas.plotting.table(ax, df, loc=9)
A:pandas.util._doctools.props->pandas.plotting.table(ax, df, loc=9).properties()
A:pandas.util._doctools.p->TablePlotter()
A:pandas.util._doctools.df1->pandas.DataFrame({'A': [10, 11, 12], 'B': [20, 21, 22], 'C': [30, 31, 32]})
A:pandas.util._doctools.df2->pandas.DataFrame({'A': [10, 12], 'C': [30, 32]})
A:pandas.util._doctools.df3->pandas.DataFrame({'v1': [1, 2, 3, 4, 5, 6], 'v2': [5, 6, 7, 8, 9, 10]}, index=idx)
A:pandas.util._doctools.idx->pandas.MultiIndex.from_tuples([(1, 'A'), (1, 'B'), (1, 'C'), (2, 'A'), (2, 'B'), (2, 'C')])
pandas.util._doctools.TablePlotter(self,cell_width=0.37,cell_height=0.25,font_size=7.5)
pandas.util._doctools.TablePlotter.__init__(self,cell_width=0.37,cell_height=0.25,font_size=7.5)
pandas.util._doctools.TablePlotter._conv(self,data)
pandas.util._doctools.TablePlotter._get_cells(self,left,right,vertical)
pandas.util._doctools.TablePlotter._insert_index(self,data)
pandas.util._doctools.TablePlotter._make_table(self,ax,df,title,height=None)
pandas.util._doctools.TablePlotter._shape(self,df)
pandas.util._doctools.TablePlotter.plot(self,left,right,labels=None,vertical=True)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/util/_print_versions.py----------------------------------------
A:pandas.util._print_versions.pipe->subprocess.Popen('git log --format="%H" -n 1'.split(' '), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
A:pandas.util._print_versions.(so, serr)->subprocess.Popen('git log --format="%H" -n 1'.split(' '), stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
A:pandas.util._print_versions.commit->commit.strip().strip('"').strip().strip('"')
A:pandas.util._print_versions.(sysname, nodename, release, version, machine, processor)->platform.uname()
A:pandas.util._print_versions.sys_info->get_sys_info()
A:pandas.util._print_versions.deps_blob->list()
A:pandas.util._print_versions.mod->importlib.import_module(modname)
A:pandas.util._print_versions.ver->ver_f(mod)
A:pandas.util._print_versions.j->dict(system=dict(sys_info), dependencies=dict(deps_blob))
A:pandas.util._print_versions.parser->OptionParser()
A:pandas.util._print_versions.(options, args)->OptionParser().parse_args()
pandas.show_versions(as_json=False)
pandas.util._print_versions.get_sys_info()
pandas.util._print_versions.main()
pandas.util._print_versions.show_versions(as_json=False)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/util/_depr_module.py----------------------------------------
A:pandas.util._depr_module.self.removals->frozenset(self.removals)
A:pandas.util._depr_module.self.self_dir->frozenset(dir(self.__class__))
A:pandas.util._depr_module.deprmodule->importlib.import_module(mod)
A:pandas.util._depr_module.obj->getattr(deprmodule, name)
pandas._DeprecatedModule(self,deprmod,deprmodto=None,removals=None,moved=None)
pandas._DeprecatedModule.__dir__(self)
pandas._DeprecatedModule.__getattr__(self,name)
pandas._DeprecatedModule.__repr__(self)
pandas._DeprecatedModule._import_deprmod(self,mod=None)
pandas.util._depr_module._DeprecatedModule(self,deprmod,deprmodto=None,removals=None,moved=None)
pandas.util._depr_module._DeprecatedModule.__dir__(self)
pandas.util._depr_module._DeprecatedModule.__getattr__(self,name)
pandas.util._depr_module._DeprecatedModule.__init__(self,deprmod,deprmodto=None,removals=None,moved=None)
pandas.util._depr_module._DeprecatedModule.__repr__(self)
pandas.util._depr_module._DeprecatedModule._import_deprmod(self,mod=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/util/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/util/decorators.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/stats/moments.py----------------------------------------
A:pandas.stats.moments.is_ndarray->isinstance(arg, np.ndarray)
A:pandas.stats.moments.arg->DataFrame(arg)
A:pandas.stats.moments.value->kwargs.pop(k, None)
A:pandas.stats.moments.how->kwargs.pop('how', None)
A:pandas.stats.moments.r->getattr(arg, dispatch)(**kwargs)
A:pandas.stats.moments.pargs->','.join(['{a}={b}'.format(a=a, b=b) for (a, b) in kwargs.items() if b is not None])
A:pandas.stats.moments.aargs->','.join([f(a, b) for (a, b) in kwds.items() if b is not None])
A:pandas.stats.moments.result->getattr(r, name)(*args, **kwds)
A:pandas.stats.moments.rolling_max->_rolling_func('max', 'Moving maximum.', how='max')
A:pandas.stats.moments.rolling_min->_rolling_func('min', 'Moving minimum.', how='min')
A:pandas.stats.moments.rolling_sum->_rolling_func('sum', 'Moving sum.')
A:pandas.stats.moments.rolling_mean->_rolling_func('mean', 'Moving mean.')
A:pandas.stats.moments.rolling_median->_rolling_func('median', 'Moving median.', how='median')
A:pandas.stats.moments.rolling_std->_rolling_func('std', 'Moving standard deviation.', func_kw=['ddof'], additional_kw=_ddof_kw)
A:pandas.stats.moments.rolling_var->_rolling_func('var', 'Moving variance.', func_kw=['ddof'], additional_kw=_ddof_kw)
A:pandas.stats.moments.rolling_skew->_rolling_func('skew', 'Unbiased moving skewness.')
A:pandas.stats.moments.rolling_kurt->_rolling_func('kurt', 'Unbiased moving kurtosis.')
A:pandas.stats.moments.expanding_max->_expanding_func('max', 'Expanding maximum.')
A:pandas.stats.moments.expanding_min->_expanding_func('min', 'Expanding minimum.')
A:pandas.stats.moments.expanding_sum->_expanding_func('sum', 'Expanding sum.')
A:pandas.stats.moments.expanding_mean->_expanding_func('mean', 'Expanding mean.')
A:pandas.stats.moments.expanding_median->_expanding_func('median', 'Expanding median.')
A:pandas.stats.moments.expanding_std->_expanding_func('std', 'Expanding standard deviation.', func_kw=['ddof'], additional_kw=_ddof_kw)
A:pandas.stats.moments.expanding_var->_expanding_func('var', 'Expanding variance.', func_kw=['ddof'], additional_kw=_ddof_kw)
A:pandas.stats.moments.expanding_skew->_expanding_func('skew', 'Unbiased expanding skewness.')
A:pandas.stats.moments.expanding_kurt->_expanding_func('kurt', 'Unbiased expanding kurtosis.')
pandas.stats.moments._expanding_func(name,desc,func_kw=None,additional_kw='')
pandas.stats.moments._rolling_func(name,desc,how=None,func_kw=None,additional_kw='')
pandas.stats.moments.ensure_compat(dispatch,name,arg,func_kw=None,*args,**kwargs)
pandas.stats.moments.ewma(arg,com=None,span=None,halflife=None,alpha=None,min_periods=0,freq=None,adjust=True,how=None,ignore_na=False)
pandas.stats.moments.ewmcorr(arg1,arg2=None,com=None,span=None,halflife=None,alpha=None,min_periods=0,freq=None,pairwise=None,how=None,ignore_na=False,adjust=True)
pandas.stats.moments.ewmcov(arg1,arg2=None,com=None,span=None,halflife=None,alpha=None,min_periods=0,bias=False,freq=None,pairwise=None,how=None,ignore_na=False,adjust=True)
pandas.stats.moments.ewmstd(arg,com=None,span=None,halflife=None,alpha=None,min_periods=0,bias=False,freq=None,how=None,ignore_na=False,adjust=True)
pandas.stats.moments.ewmvar(arg,com=None,span=None,halflife=None,alpha=None,min_periods=0,bias=False,freq=None,how=None,ignore_na=False,adjust=True)
pandas.stats.moments.expanding_apply(arg,func,min_periods=1,freq=None,args=(),kwargs={})
pandas.stats.moments.expanding_corr(arg1,arg2=None,min_periods=1,freq=None,pairwise=None)
pandas.stats.moments.expanding_count(arg,freq=None)
pandas.stats.moments.expanding_cov(arg1,arg2=None,min_periods=1,freq=None,pairwise=None,ddof=1)
pandas.stats.moments.expanding_quantile(arg,quantile,min_periods=1,freq=None)
pandas.stats.moments.rolling_apply(arg,window,func,min_periods=None,freq=None,center=False,args=(),kwargs={})
pandas.stats.moments.rolling_corr(arg1,arg2=None,window=None,pairwise=None,**kwargs)
pandas.stats.moments.rolling_count(arg,window,**kwargs)
pandas.stats.moments.rolling_cov(arg1,arg2=None,window=None,pairwise=None,**kwargs)
pandas.stats.moments.rolling_quantile(arg,window,quantile,min_periods=None,freq=None,center=False)
pandas.stats.moments.rolling_window(arg,window=None,win_type=None,min_periods=None,freq=None,center=False,mean=True,axis=0,how=None,**kwargs)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/stats/api.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/stats/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/date_converters.py----------------------------------------
A:pandas.io.date_converters.date_col->_maybe_cast(date_col)
A:pandas.io.date_converters.time_col->_maybe_cast(time_col)
A:pandas.io.date_converters.year_col->_maybe_cast(year_col)
A:pandas.io.date_converters.month_col->_maybe_cast(month_col)
A:pandas.io.date_converters.day_col->_maybe_cast(day_col)
A:pandas.io.date_converters.hour_col->_maybe_cast(hour_col)
A:pandas.io.date_converters.minute_col->_maybe_cast(minute_col)
A:pandas.io.date_converters.second_col->_maybe_cast(second_col)
A:pandas.io.date_converters.N->len(head)
A:pandas.io.date_converters.results->numpy.empty(N, dtype=object)
A:pandas.io.date_converters.results[i]->parse_func(*args)
A:pandas.io.date_converters.arr->numpy.array(arr, dtype=object)
pandas.io.date_converters._check_columns(cols)
pandas.io.date_converters._maybe_cast(arr)
pandas.io.date_converters.generic_parser(parse_func,*cols)
pandas.io.date_converters.parse_all_fields(year_col,month_col,day_col,hour_col,minute_col,second_col)
pandas.io.date_converters.parse_date_fields(year_col,month_col,day_col)
pandas.io.date_converters.parse_date_time(date_col,time_col)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/pytables.py----------------------------------------
A:pandas.io.pytables.s->super(AppendableSeriesTable, self).read(columns=columns, **kwargs)
A:pandas.io.pytables.where->numpy.asarray(where)
A:pandas.io.pytables.path_or_buf->_stringify_path(path_or_buf)
A:pandas.io.pytables.kwargs['where']->_ensure_term(kwargs['where'], scope_level=1)
A:pandas.io.pytables.exists->os.path.exists(path_or_buf)
A:pandas.io.pytables.store->HDFStore(fn, mode='w')
A:pandas.io.pytables.groups->list(diff[diff > 1].index)
A:pandas.io.pytables.node->getattr(self.group, 'block0_values')
A:pandas.io.pytables.lkeys->sorted(list(self.keys()))
A:pandas.io.pytables.tables->_tables()
A:pandas.io.pytables.self._filters->_tables().Filters(self._complevel, self._complib, fletcher32=self._fletcher32)
A:pandas.io.pytables.self._handle->_tables().open_file(self._path, 'r', **kwargs)
A:pandas.io.pytables.e->ValueError('PyTables [{version}] no longer supports opening multiple files\neven in read-only mode on this HDF5 version [{hdf_version}]. You can accept this\nand not open the same file multiple times at once,\nupgrade the HDF5 version, or downgrade to PyTables 3.0.0 which allows\nfiles to be opened multiple times at once\n'.format(version=tables.__version__, hdf_version=tables.get_hdf5_version()))
A:pandas.io.pytables.group->self._handle.create_group(path, p)
A:pandas.io.pytables.it->TableIterator(self, s, func, where=where, nrows=nrows, start=start, stop=stop, iterator=iterator, chunksize=chunksize, auto_close=auto_close)
A:pandas.io.pytables.kwargs->self.validate_read(kwargs)
A:pandas.io.pytables.dropna->get_option('io.hdf.dropna_table')
A:pandas.io.pytables.ordd->sorted(ordered.get_indexer(ordd))
A:pandas.io.pytables.d[remain_key]->ordered.take(ordd)
A:pandas.io.pytables.valid_index->valid_index.intersection(index).intersection(index)
A:pandas.io.pytables.val->getattr(self, key, None).reindex_axis(v, axis=axis)
A:pandas.io.pytables.new_store->HDFStore(file, mode=mode, complib=complib, complevel=complevel, fletcher32=fletcher32)
A:pandas.io.pytables.keys->list(self.keys())
A:pandas.io.pytables.data->pandas._libs.lib.string_array_replace_from_nan_rep(data, nan_rep)
A:pandas.io.pytables.pt->u('frame_table')
A:pandas.io.pytables.tt->u('legacy_frame')
A:pandas.io.pytables.index->_unconvert_string_array(data, nan_rep=None, encoding=encoding)
A:pandas.io.pytables.paths->_factor_indexer(N[1:], labels).split('/')
A:pandas.io.pytables.stop->min(current + self.chunksize, self.stop)
A:pandas.io.pytables.self.chunksize->int(chunksize)
A:pandas.io.pytables.value->getattr(self, key, None)
A:pandas.io.pytables.self.coordinates->self.s.read_coordinates(where=self.where)
A:pandas.io.pytables.results->self.func(self.start, self.stop, where)
A:pandas.io.pytables.temp->tuple(map(pprint_thing, (self.name, self.cname, self.dtype, self.kind, self.shape)))
A:pandas.io.pytables.new_self->copy.copy(self)
A:pandas.io.pytables.values->conv(values)
A:pandas.io.pytables.kwargs['freq']->_ensure_decoded(self.freq)
A:pandas.io.pytables.kwargs['name']->_ensure_decoded(self.index_name)
A:pandas.io.pytables.self.values->getattr(self.attrs, self.kind_attr, None)
A:pandas.io.pytables.min_itemsize->int(min_itemsize.get(self.name) or min_itemsize.get('values') or 0)
A:pandas.io.pytables.self.typ->self.get_atom_timedelta64(block)
A:pandas.io.pytables.existing_kind->getattr(self.attrs, self.kind_attr, None)
A:pandas.io.pytables.idx->numpy.repeat(idx, repeater)
A:pandas.io.pytables.existing_value->numpy.repeat(idx, repeater).get(key)
A:pandas.io.pytables.self.kind->getattr(self.attrs, self.kind_attr, None)
A:pandas.io.pytables.self.metadata->handler.read_metadata(self.cname)
A:pandas.io.pytables.cur_metadata->handler.read_metadata(self.cname)
A:pandas.io.pytables.m->re.search('values_block_(\\d+)', name)
A:pandas.io.pytables.self.dtype_attr->u('%s_dtype' % self.name)
A:pandas.io.pytables.self.meta_attr->u('%s_meta' % self.name)
A:pandas.io.pytables.metadata->numpy.array(metadata, copy=False).ravel()
A:pandas.io.pytables.dtype->'S{0}'.format(itemsize)
A:pandas.io.pytables.inferred_type->pandas._libs.lib.infer_dtype(index)
A:pandas.io.pytables.block->make_block(values, placement=np.arange(len(cols_)))
A:pandas.io.pytables.col->klass.create_for_block(i=i, name=name, version=self.version)
A:pandas.io.pytables.data_converted->_convert_string_array(data, encoding)
A:pandas.io.pytables.itemsize->pandas._libs.lib.max_len_string_array(_ensure_object(data))
A:pandas.io.pytables.eci->existing_col.validate_col(itemsize)
A:pandas.io.pytables.self.tz->_get_tz(block.values.tz)
A:pandas.io.pytables.existing_fields->getattr(self.attrs, self.kind_attr, None)
A:pandas.io.pytables.existing_dtype->getattr(self.attrs, self.dtype_attr, None)
A:pandas.io.pytables.meta->_ensure_decoded(self.meta)
A:pandas.io.pytables.self.data->_unconvert_string_array(self.data, nan_rep=nan_rep, encoding=encoding)
A:pandas.io.pytables.codes->self.data.ravel()
A:pandas.io.pytables.mask->mask.ravel().ravel()
A:pandas.io.pytables.self.dtype->getattr(self.attrs, self.dtype_attr, None)
A:pandas.io.pytables.self.meta->getattr(self.attrs, self.meta_attr, None)
A:pandas.io.pytables.self.encoding->_ensure_encoding(getattr(self.attrs, 'encoding', None))
A:pandas.io.pytables.version->_ensure_decoded(getattr(self.group._v_attrs, 'pandas_version', None))
A:pandas.io.pytables.self.version->tuple([int(x) for x in version.split('.')])
A:pandas.io.pytables.self.attrs.pandas_type->str(self.pandas_kind)
A:pandas.io.pytables.self.attrs.pandas_version->str(_version)
A:pandas.io.pytables._reverse_index_map->dict([(v, k) for (k, v) in compat.iteritems(_index_type_map)])
A:pandas.io.pytables.columns->list(columns)
A:pandas.io.pytables.transposed->getattr(attrs, 'transposed', False)
A:pandas.io.pytables.shape->list(shape[0:ndim - 1])
A:pandas.io.pytables.ret->numpy.asarray(ret, dtype='m8[ns]')
A:pandas.io.pytables.variety->_ensure_decoded(getattr(self.attrs, '%s_variety' % key))
A:pandas.io.pytables.(_, index)->self.read_index_node(getattr(self.group, key), **kwargs)
A:pandas.io.pytables.converted->_convert_string_array(values, encoding)
A:pandas.io.pytables.node._v_attrs.index_class->self._class_to_alias(type(index))
A:pandas.io.pytables.node._v_attrs.tz->_get_tz(value.tz)
A:pandas.io.pytables.length->getattr(self.attrs, '%s_length' % key)
A:pandas.io.pytables.blocs->self.read_array('%s_blocs' % key, **kwargs)
A:pandas.io.pytables.blengths->self.read_array('%s_blengths' % key, **kwargs)
A:pandas.io.pytables.indices->self.read_array('%s_indices' % key, **kwargs)
A:pandas.io.pytables.conv_level->_convert_index(lev, self.encoding, self.format_type).set_name(level_key)
A:pandas.io.pytables.nlevels->getattr(self.attrs, '%s_nlevels' % key)
A:pandas.io.pytables.(name, lev)->self.read_index_node(getattr(self.group, level_key), **kwargs)
A:pandas.io.pytables.lab->self.read_array(label_key, **kwargs)
A:pandas.io.pytables.kind->_ensure_decoded(kind)
A:pandas.io.pytables.index_class->self._alias_to_class(getattr(node._v_attrs, 'index_class', ''))
A:pandas.io.pytables.factory->self._get_index_factory(index_class)
A:pandas.io.pytables.arr->numpy.empty((1,) * value.ndim)
A:pandas.io.pytables.getattr(self.group, key)._v_attrs.value_type->str(value.dtype)
A:pandas.io.pytables.empty_array->self._is_empty_array(value.shape)
A:pandas.io.pytables.atom->_tables().ObjectAtom()
A:pandas.io.pytables.ca->self._handle.create_carray(self.group, key, atom, value.shape, filters=self._filters)
A:pandas.io.pytables.items->Index(c.values)
A:pandas.io.pytables.vlarr->self._handle.create_vlarray(self.group, key, _tables().ObjectAtom())
A:pandas.io.pytables.pandas_kind->u('frame_table')
A:pandas.io.pytables.sp_values->self.read_array('sp_values')
A:pandas.io.pytables.sp_index->self.read_index('sp_index')
A:pandas.io.pytables.sdict[c]->super(AppendableSeriesTable, self).read(columns=columns, **kwargs).read()
A:pandas.io.pytables.select_axis->self.obj_type()._get_block_manager_axis(0)
A:pandas.io.pytables.ax->obj.transpose(*self.data_orientation)._get_axis(axis)
A:pandas.io.pytables.blk_items->get_blk_items(mgr, blocks)
A:pandas.io.pytables.blk->make_block(values, placement=items.get_indexer(blk_items))
A:pandas.io.pytables.self.attrs.nblocks->len(data.blocks)
A:pandas.io.pytables.self.info->copy.copy(existing_table.info)
A:pandas.io.pytables.sv->getattr(self, c, None)
A:pandas.io.pytables.ov->getattr(other, c, None)
A:pandas.io.pytables.self.attrs.table_type->str(self.table_type)
A:pandas.io.pytables.self.attrs.index_cols->self.index_cols()
A:pandas.io.pytables.self.attrs.values_cols->self.values_cols()
A:pandas.io.pytables.self.nan_rep->getattr(self.attrs, 'nan_rep', None)
A:pandas.io.pytables.q->self.table.queryables()
A:pandas.io.pytables.dc->GenericDataIndexableCol(name=n, pos=i, values=[n], version=self.version)
A:pandas.io.pytables.base_pos->len(self._indexables)
A:pandas.io.pytables.kw->dict()
A:pandas.io.pytables.v->getattr(table.cols, c, None)
A:pandas.io.pytables.self.selection->Selection(self, where, start=start, stop=stop, **kwargs)
A:pandas.io.pytables.info->_get_info(self.info, i)
A:pandas.io.pytables.data_columns->obj.transpose(*self.data_orientation).columns.tolist()
A:pandas.io.pytables.existing_data_columns->set(data_columns)
A:pandas.io.pytables.existing_table->self.copy()
A:pandas.io.pytables.index_axes_map->dict()
A:pandas.io.pytables.index_axes_map[i]->_convert_index(a, self.encoding, self.format_type).set_name(name).set_axis(i)
A:pandas.io.pytables.append_axis->list(a)
A:pandas.io.pytables.indexer->_ensure_platform_int(indexer)
A:pandas.io.pytables.info['names']->list(a.names)
A:pandas.io.pytables.j->len(self.index_axes)
A:pandas.io.pytables.obj->obj.transpose(*self.data_orientation).transpose(*self.data_orientation)
A:pandas.io.pytables.block_obj->self.get_object(obj)._consolidate()
A:pandas.io.pytables.blocks->list(mgr.blocks)
A:pandas.io.pytables.by_items->dict([(tuple(b_items.tolist()), (b, b_items)) for (b, b_items) in zip(blocks, blk_items)])
A:pandas.io.pytables.(b, b_items)->dict([(tuple(b_items.tolist()), (b, b_items)) for (b, b_items) in zip(blocks, blk_items)]).pop(items)
A:pandas.io.pytables.axis_number->obj.transpose(*self.data_orientation).transpose(*self.data_orientation)._get_axis_number(axis_name)
A:pandas.io.pytables.axis_values->obj.transpose(*self.data_orientation).transpose(*self.data_orientation)._get_axis(axis_name)
A:pandas.io.pytables.filt->_ensure_index(filt)
A:pandas.io.pytables.takers->op(values, filt)
A:pandas.io.pytables.expectedrows->max(self.nrows_expected, 10000)
A:pandas.io.pytables.d->dict(name='table', expectedrows=expectedrows)
A:pandas.io.pytables.d['description']->dict([(a.cname, a.typ) for a in self.axes])
A:pandas.io.pytables.filters->_tables().Filters(complevel=complevel, complib=complib, fletcher32=fletcher32 or self._fletcher32)
A:pandas.io.pytables.coords->self.selection.select_coords()
A:pandas.io.pytables.c->getattr(self.table.cols, column)
A:pandas.io.pytables.table_type->u('appendable_ndim')
A:pandas.io.pytables.(labels, levels)->_factorize_from_iterables(lst_vals)
A:pandas.io.pytables.labels->_ensure_index(labels.unique())
A:pandas.io.pytables.levels->list(levels)
A:pandas.io.pytables.key->_factor_indexer(N[1:], labels)
A:pandas.io.pytables.(sorter, _)->pandas._libs.algos.groupsort_indexer(_ensure_int64(key), np.prod(N))
A:pandas.io.pytables.sorter->_ensure_platform_int(sorter)
A:pandas.io.pytables.sorted_values->sorted_values.reshape((sorted_values.shape[0], 1)).reshape((sorted_values.shape[0], 1))
A:pandas.io.pytables.mgr->BlockManager([block], [cols_, index_])
A:pandas.io.pytables.long_index->pandas.MultiIndex.from_arrays([i.values for i in self.index_axes])
A:pandas.io.pytables.lp->DataFrame(new_values, index=new_index, columns=lp.columns)
A:pandas.io.pytables.unique_tuples->_asarray_tuplesafe(unique_tuples)
A:pandas.io.pytables.new_index->pandas.MultiIndex.from_arrays([i.values for i in self.index_axes]).take(indexer)
A:pandas.io.pytables.new_values->DataFrame(new_values, index=new_index, columns=lp.columns).values.take(indexer, axis=0)
A:pandas.io.pytables.wp->self.process_axes(wp, columns=columns)
A:pandas.io.pytables.options->self.create_description(complib=complib, complevel=complevel, fletcher32=fletcher32, expectedrows=expectedrows)
A:pandas.io.pytables.nindexes->len(indexes)
A:pandas.io.pytables.repeater->numpy.prod([indexes[bi].shape[0] for bi in range(i + 1, nindexes)])
A:pandas.io.pytables.rows->Series(values).sort_values().take(lrange(g, pg))
A:pandas.io.pytables.end_i->min((i + 1) * chunksize, nrows)
A:pandas.io.pytables.nrows->self.table.remove_rows(start=start, stop=stop)
A:pandas.io.pytables.l->Series(values).sort_values()
A:pandas.io.pytables.ln->len(l)
A:pandas.io.pytables.diff->Series(values).sort_values().diff()
A:pandas.io.pytables.pg->list(diff[diff > 1].index).pop()
A:pandas.io.pytables.cols->list(self.levels)
A:pandas.io.pytables.names->_get_info(self.info, i).get('names')
A:pandas.io.pytables.cols_->Index(index, name=getattr(index, 'name', None))
A:pandas.io.pytables.index_->Index(index, name=getattr(index, 'name', None))
A:pandas.io.pytables.df->df.set_index(self.levels).set_index(self.levels)
A:pandas.io.pytables.(obj, self.levels)->self.validate_multiindex(obj)
A:pandas.io.pytables._re_levels->re.compile('^level_\\d+$')
A:pandas.io.pytables.df.index->df.set_index(self.levels).set_index(self.levels).index.set_names([None if self._re_levels.search(l) else l for l in df.index.names])
A:pandas.io.pytables.other->_ensure_index(other)
A:pandas.io.pytables.idxinfo[name]->dict()
A:pandas.io.pytables.zone->pandas._libs.tslib.tot_seconds(tz.utcoffset())
A:pandas.io.pytables.name->getattr(values, 'name', None)
A:pandas.io.pytables.tz->pandas._libs.tslib.get_timezone(_ensure_decoded(tz))
A:pandas.io.pytables.index_name->getattr(index, 'name', None)
A:pandas.io.pytables.encoding->_ensure_encoding(encoding)
A:pandas.io.pytables.conv->_get_converter(val_kind, encoding)
A:pandas.io.pytables.inferred->pandas._libs.lib.infer_dtype(where)
A:pandas.io.pytables.self.terms->self.generate(where)
A:pandas.io.pytables.(self.condition, self.filter)->self.terms.evaluate()
pandas.io.pytables.AppendableFrameTable(AppendableTable)
pandas.io.pytables.AppendableFrameTable.get_object(self,obj)
pandas.io.pytables.AppendableFrameTable.is_transposed(self)
pandas.io.pytables.AppendableFrameTable.read(self,where=None,columns=None,**kwargs)
pandas.io.pytables.AppendableMultiFrameTable(AppendableFrameTable)
pandas.io.pytables.AppendableMultiFrameTable.read(self,**kwargs)
pandas.io.pytables.AppendableMultiFrameTable.table_type_short(self)
pandas.io.pytables.AppendableMultiFrameTable.write(self,obj,data_columns=None,**kwargs)
pandas.io.pytables.AppendableMultiSeriesTable(AppendableSeriesTable)
pandas.io.pytables.AppendableMultiSeriesTable.write(self,obj,**kwargs)
pandas.io.pytables.AppendableNDimTable(AppendablePanelTable)
pandas.io.pytables.AppendablePanelTable(AppendableTable)
pandas.io.pytables.AppendablePanelTable.get_object(self,obj)
pandas.io.pytables.AppendablePanelTable.is_transposed(self)
pandas.io.pytables.AppendableSeriesTable(AppendableFrameTable)
pandas.io.pytables.AppendableSeriesTable.get_object(self,obj)
pandas.io.pytables.AppendableSeriesTable.is_transposed(self)
pandas.io.pytables.AppendableSeriesTable.read(self,columns=None,**kwargs)
pandas.io.pytables.AppendableSeriesTable.write(self,obj,data_columns=None,**kwargs)
pandas.io.pytables.AppendableTable(LegacyTable)
pandas.io.pytables.AppendableTable.delete(self,where=None,start=None,stop=None,**kwargs)
pandas.io.pytables.AppendableTable.write(self,obj,axes=None,append=False,complib=None,complevel=None,fletcher32=None,min_itemsize=None,chunksize=None,expectedrows=None,dropna=False,**kwargs)
pandas.io.pytables.AppendableTable.write_data(self,chunksize,dropna=False)
pandas.io.pytables.AppendableTable.write_data_chunk(self,rows,indexes,mask,values)
pandas.io.pytables.AttributeConflictWarning(Warning)
pandas.io.pytables.BlockManagerFixed(GenericFixed)
pandas.io.pytables.BlockManagerFixed.read(self,start=None,stop=None,**kwargs)
pandas.io.pytables.BlockManagerFixed.shape(self)
pandas.io.pytables.BlockManagerFixed.write(self,obj,**kwargs)
pandas.io.pytables.ClosedFileError(Exception)
pandas.io.pytables.DataCol(self,values=None,kind=None,typ=None,cname=None,data=None,meta=None,metadata=None,block=None,**kwargs)
pandas.io.pytables.DataCol.__eq__(self,other)
pandas.io.pytables.DataCol.__init__(self,values=None,kind=None,typ=None,cname=None,data=None,meta=None,metadata=None,block=None,**kwargs)
pandas.io.pytables.DataCol.__unicode__(self)
pandas.io.pytables.DataCol.convert(self,values,nan_rep,encoding)
pandas.io.pytables.DataCol.create_for_block(cls,i=None,name=None,cname=None,version=None,**kwargs)
pandas.io.pytables.DataCol.cvalues(self)
pandas.io.pytables.DataCol.get_atom_coltype(self,kind=None)
pandas.io.pytables.DataCol.get_atom_data(self,block,kind=None)
pandas.io.pytables.DataCol.get_atom_datetime64(self,block)
pandas.io.pytables.DataCol.get_atom_string(self,block,itemsize)
pandas.io.pytables.DataCol.get_atom_timedelta64(self,block)
pandas.io.pytables.DataCol.get_attr(self)
pandas.io.pytables.DataCol.set_atom(self,block,block_items,existing_col,min_itemsize,nan_rep,info,encoding=None,**kwargs)
pandas.io.pytables.DataCol.set_atom_categorical(self,block,items,info=None,values=None)
pandas.io.pytables.DataCol.set_atom_complex(self,block)
pandas.io.pytables.DataCol.set_atom_data(self,block)
pandas.io.pytables.DataCol.set_atom_datetime64(self,block,values=None)
pandas.io.pytables.DataCol.set_atom_datetime64tz(self,block,info,values=None)
pandas.io.pytables.DataCol.set_atom_string(self,block,block_items,existing_col,min_itemsize,nan_rep,encoding)
pandas.io.pytables.DataCol.set_atom_timedelta64(self,block,values=None)
pandas.io.pytables.DataCol.set_attr(self)
pandas.io.pytables.DataCol.set_data(self,data,dtype=None)
pandas.io.pytables.DataCol.set_kind(self)
pandas.io.pytables.DataCol.set_metadata(self,metadata)
pandas.io.pytables.DataCol.shape(self)
pandas.io.pytables.DataCol.take_data(self)
pandas.io.pytables.DataCol.validate_attr(self,append)
pandas.io.pytables.DataIndexableCol(DataCol)
pandas.io.pytables.DataIndexableCol.get_atom_data(self,block,kind=None)
pandas.io.pytables.DataIndexableCol.get_atom_datetime64(self,block)
pandas.io.pytables.DataIndexableCol.get_atom_string(self,block,itemsize)
pandas.io.pytables.DataIndexableCol.get_atom_timedelta64(self,block)
pandas.io.pytables.DataIndexableCol.validate_names(self)
pandas.io.pytables.DuplicateWarning(Warning)
pandas.io.pytables.Fixed(self,parent,group,encoding=None,**kwargs)
pandas.io.pytables.Fixed.__init__(self,parent,group,encoding=None,**kwargs)
pandas.io.pytables.Fixed.__unicode__(self)
pandas.io.pytables.Fixed._complevel(self)
pandas.io.pytables.Fixed._complib(self)
pandas.io.pytables.Fixed._filters(self)
pandas.io.pytables.Fixed._fletcher32(self)
pandas.io.pytables.Fixed._handle(self)
pandas.io.pytables.Fixed.attrs(self)
pandas.io.pytables.Fixed.copy(self)
pandas.io.pytables.Fixed.delete(self,where=None,start=None,stop=None,**kwargs)
pandas.io.pytables.Fixed.format_type(self)
pandas.io.pytables.Fixed.get_attrs(self)
pandas.io.pytables.Fixed.infer_axes(self)
pandas.io.pytables.Fixed.is_exists(self)
pandas.io.pytables.Fixed.is_old_version(self)
pandas.io.pytables.Fixed.nrows(self)
pandas.io.pytables.Fixed.pandas_type(self)
pandas.io.pytables.Fixed.pathname(self)
pandas.io.pytables.Fixed.read(self,**kwargs)
pandas.io.pytables.Fixed.set_attrs(self)
pandas.io.pytables.Fixed.set_object_info(self)
pandas.io.pytables.Fixed.set_version(self)
pandas.io.pytables.Fixed.shape(self)
pandas.io.pytables.Fixed.storable(self)
pandas.io.pytables.Fixed.storage_obj_type(self)
pandas.io.pytables.Fixed.validate(self,other)
pandas.io.pytables.Fixed.validate_version(self,where=None)
pandas.io.pytables.Fixed.write(self,**kwargs)
pandas.io.pytables.FrameFixed(BlockManagerFixed)
pandas.io.pytables.GenericDataIndexableCol(DataIndexableCol)
pandas.io.pytables.GenericDataIndexableCol.get_attr(self)
pandas.io.pytables.GenericFixed(Fixed)
pandas.io.pytables.GenericFixed._alias_to_class(self,alias)
pandas.io.pytables.GenericFixed._class_to_alias(self,cls)
pandas.io.pytables.GenericFixed._get_index_factory(self,klass)
pandas.io.pytables.GenericFixed._is_empty_array(self,shape)
pandas.io.pytables.GenericFixed.get_attrs(self)
pandas.io.pytables.GenericFixed.is_exists(self)
pandas.io.pytables.GenericFixed.read_array(self,key,start=None,stop=None)
pandas.io.pytables.GenericFixed.read_block_index(self,key,**kwargs)
pandas.io.pytables.GenericFixed.read_index(self,key,**kwargs)
pandas.io.pytables.GenericFixed.read_index_node(self,node,start=None,stop=None)
pandas.io.pytables.GenericFixed.read_multi_index(self,key,**kwargs)
pandas.io.pytables.GenericFixed.read_sparse_intindex(self,key,**kwargs)
pandas.io.pytables.GenericFixed.set_attrs(self)
pandas.io.pytables.GenericFixed.validate_read(self,kwargs)
pandas.io.pytables.GenericFixed.write(self,obj,**kwargs)
pandas.io.pytables.GenericFixed.write_array(self,key,value,items=None)
pandas.io.pytables.GenericFixed.write_array_empty(self,key,value)
pandas.io.pytables.GenericFixed.write_block_index(self,key,index)
pandas.io.pytables.GenericFixed.write_index(self,key,index)
pandas.io.pytables.GenericFixed.write_multi_index(self,key,index)
pandas.io.pytables.GenericFixed.write_sparse_intindex(self,key,index)
pandas.io.pytables.GenericIndexCol(IndexCol)
pandas.io.pytables.GenericIndexCol.convert(self,values,nan_rep,encoding)
pandas.io.pytables.GenericIndexCol.get_attr(self)
pandas.io.pytables.GenericIndexCol.is_indexed(self)
pandas.io.pytables.GenericIndexCol.set_attr(self)
pandas.io.pytables.GenericTable(AppendableFrameTable)
pandas.io.pytables.GenericTable.get_attrs(self)
pandas.io.pytables.GenericTable.indexables(self)
pandas.io.pytables.GenericTable.pandas_type(self)
pandas.io.pytables.GenericTable.storable(self)
pandas.io.pytables.GenericTable.write(self,**kwargs)
pandas.io.pytables.HDFStore(self,path,mode=None,complevel=None,complib=None,fletcher32=False,**kwargs)
pandas.io.pytables.HDFStore.__contains__(self,key)
pandas.io.pytables.HDFStore.__delitem__(self,key)
pandas.io.pytables.HDFStore.__enter__(self)
pandas.io.pytables.HDFStore.__exit__(self,exc_type,exc_value,traceback)
pandas.io.pytables.HDFStore.__getattr__(self,name)
pandas.io.pytables.HDFStore.__getitem__(self,key)
pandas.io.pytables.HDFStore.__init__(self,path,mode=None,complevel=None,complib=None,fletcher32=False,**kwargs)
pandas.io.pytables.HDFStore.__iter__(self)
pandas.io.pytables.HDFStore.__len__(self)
pandas.io.pytables.HDFStore.__setitem__(self,key,value)
pandas.io.pytables.HDFStore.__unicode__(self)
pandas.io.pytables.HDFStore._check_if_open(self)
pandas.io.pytables.HDFStore._create_storer(self,group,format=None,value=None,append=False,**kwargs)
pandas.io.pytables.HDFStore._read_group(self,group,**kwargs)
pandas.io.pytables.HDFStore._validate_format(self,format,kwargs)
pandas.io.pytables.HDFStore._write_to_group(self,key,value,format,index=True,append=False,complib=None,encoding=None,**kwargs)
pandas.io.pytables.HDFStore.append(self,key,value,format=None,append=True,columns=None,dropna=None,**kwargs)
pandas.io.pytables.HDFStore.append_to_multiple(self,d,value,selector,data_columns=None,axes=None,dropna=False,**kwargs)
pandas.io.pytables.HDFStore.close(self)
pandas.io.pytables.HDFStore.copy(self,file,mode='w',propindexes=True,keys=None,complib=None,complevel=None,fletcher32=False,overwrite=True)
pandas.io.pytables.HDFStore.create_table_index(self,key,**kwargs)
pandas.io.pytables.HDFStore.filename(self)
pandas.io.pytables.HDFStore.flush(self,fsync=False)
pandas.io.pytables.HDFStore.get(self,key)
pandas.io.pytables.HDFStore.get_node(self,key)
pandas.io.pytables.HDFStore.get_storer(self,key)
pandas.io.pytables.HDFStore.groups(self)
pandas.io.pytables.HDFStore.is_open(self)
pandas.io.pytables.HDFStore.items(self)
pandas.io.pytables.HDFStore.keys(self)
pandas.io.pytables.HDFStore.open(self,mode='a',**kwargs)
pandas.io.pytables.HDFStore.put(self,key,value,format=None,append=False,**kwargs)
pandas.io.pytables.HDFStore.remove(self,key,where=None,start=None,stop=None)
pandas.io.pytables.HDFStore.root(self)
pandas.io.pytables.HDFStore.select(self,key,where=None,start=None,stop=None,columns=None,iterator=False,chunksize=None,auto_close=False,**kwargs)
pandas.io.pytables.HDFStore.select_as_coordinates(self,key,where=None,start=None,stop=None,**kwargs)
pandas.io.pytables.HDFStore.select_as_multiple(self,keys,where=None,selector=None,columns=None,start=None,stop=None,iterator=False,chunksize=None,auto_close=False,**kwargs)
pandas.io.pytables.HDFStore.select_column(self,key,column,**kwargs)
pandas.io.pytables.IncompatibilityWarning(Warning)
pandas.io.pytables.IndexCol(self,values=None,kind=None,typ=None,cname=None,itemsize=None,name=None,axis=None,kind_attr=None,pos=None,freq=None,tz=None,index_name=None,**kwargs)
pandas.io.pytables.IndexCol.__eq__(self,other)
pandas.io.pytables.IndexCol.__init__(self,values=None,kind=None,typ=None,cname=None,itemsize=None,name=None,axis=None,kind_attr=None,pos=None,freq=None,tz=None,index_name=None,**kwargs)
pandas.io.pytables.IndexCol.__iter__(self)
pandas.io.pytables.IndexCol.__ne__(self,other)
pandas.io.pytables.IndexCol.__unicode__(self)
pandas.io.pytables.IndexCol.attrs(self)
pandas.io.pytables.IndexCol.col(self)
pandas.io.pytables.IndexCol.convert(self,values,nan_rep,encoding)
pandas.io.pytables.IndexCol.copy(self)
pandas.io.pytables.IndexCol.cvalues(self)
pandas.io.pytables.IndexCol.description(self)
pandas.io.pytables.IndexCol.get_attr(self)
pandas.io.pytables.IndexCol.infer(self,handler)
pandas.io.pytables.IndexCol.is_indexed(self)
pandas.io.pytables.IndexCol.maybe_set_size(self,min_itemsize=None,**kwargs)
pandas.io.pytables.IndexCol.read_metadata(self,handler)
pandas.io.pytables.IndexCol.set_attr(self)
pandas.io.pytables.IndexCol.set_axis(self,axis)
pandas.io.pytables.IndexCol.set_info(self,info)
pandas.io.pytables.IndexCol.set_name(self,name,kind_attr=None)
pandas.io.pytables.IndexCol.set_pos(self,pos)
pandas.io.pytables.IndexCol.set_table(self,table)
pandas.io.pytables.IndexCol.take_data(self)
pandas.io.pytables.IndexCol.update_info(self,info)
pandas.io.pytables.IndexCol.validate(self,handler,append,**kwargs)
pandas.io.pytables.IndexCol.validate_and_set(self,handler,append,**kwargs)
pandas.io.pytables.IndexCol.validate_attr(self,append)
pandas.io.pytables.IndexCol.validate_col(self,itemsize=None)
pandas.io.pytables.IndexCol.validate_metadata(self,handler)
pandas.io.pytables.IndexCol.validate_names(self)
pandas.io.pytables.IndexCol.write_metadata(self,handler)
pandas.io.pytables.LegacyFixed(GenericFixed)
pandas.io.pytables.LegacyFixed.read_index_legacy(self,key,start=None,stop=None)
pandas.io.pytables.LegacyFrameFixed(LegacyFixed)
pandas.io.pytables.LegacyFrameFixed.read(self,**kwargs)
pandas.io.pytables.LegacyFrameTable(LegacyTable)
pandas.io.pytables.LegacyFrameTable.read(self,*args,**kwargs)
pandas.io.pytables.LegacyPanelTable(LegacyTable)
pandas.io.pytables.LegacySeriesFixed(LegacyFixed)
pandas.io.pytables.LegacySeriesFixed.read(self,**kwargs)
pandas.io.pytables.LegacyTable(Table)
pandas.io.pytables.LegacyTable.read(self,where=None,columns=None,**kwargs)
pandas.io.pytables.LegacyTable.write(self,**kwargs)
pandas.io.pytables.PanelFixed(BlockManagerFixed)
pandas.io.pytables.PanelFixed.write(self,obj,**kwargs)
pandas.io.pytables.PossibleDataLossError(Exception)
pandas.io.pytables.Selection(self,table,where=None,start=None,stop=None,**kwargs)
pandas.io.pytables.Selection.__init__(self,table,where=None,start=None,stop=None,**kwargs)
pandas.io.pytables.Selection.generate(self,where)
pandas.io.pytables.Selection.select(self)
pandas.io.pytables.Selection.select_coords(self)
pandas.io.pytables.SeriesFixed(GenericFixed)
pandas.io.pytables.SeriesFixed.read(self,**kwargs)
pandas.io.pytables.SeriesFixed.shape(self)
pandas.io.pytables.SeriesFixed.write(self,obj,**kwargs)
pandas.io.pytables.SparseFixed(GenericFixed)
pandas.io.pytables.SparseFixed.validate_read(self,kwargs)
pandas.io.pytables.SparseFrameFixed(SparseFixed)
pandas.io.pytables.SparseFrameFixed.read(self,**kwargs)
pandas.io.pytables.SparseFrameFixed.write(self,obj,**kwargs)
pandas.io.pytables.SparseSeriesFixed(SparseFixed)
pandas.io.pytables.SparseSeriesFixed.read(self,**kwargs)
pandas.io.pytables.SparseSeriesFixed.write(self,obj,**kwargs)
pandas.io.pytables.Table(self,*args,**kwargs)
pandas.io.pytables.Table.__getitem__(self,c)
pandas.io.pytables.Table.__init__(self,*args,**kwargs)
pandas.io.pytables.Table.__unicode__(self)
pandas.io.pytables.Table._get_metadata_path(self,key)
pandas.io.pytables.Table.axes(self)
pandas.io.pytables.Table.create_axes(self,axes,obj,validate=True,nan_rep=None,data_columns=None,min_itemsize=None,**kwargs)
pandas.io.pytables.Table.create_description(self,complib=None,complevel=None,fletcher32=False,expectedrows=None)
pandas.io.pytables.Table.create_index(self,columns=None,optlevel=None,kind=None)
pandas.io.pytables.Table.data_orientation(self)
pandas.io.pytables.Table.description(self)
pandas.io.pytables.Table.dtype(self)
pandas.io.pytables.Table.format_type(self)
pandas.io.pytables.Table.get_attrs(self)
pandas.io.pytables.Table.get_object(self,obj)
pandas.io.pytables.Table.index_cols(self)
pandas.io.pytables.Table.indexables(self)
pandas.io.pytables.Table.is_exists(self)
pandas.io.pytables.Table.is_multi_index(self)
pandas.io.pytables.Table.is_transposed(self)
pandas.io.pytables.Table.ncols(self)
pandas.io.pytables.Table.nrows_expected(self)
pandas.io.pytables.Table.process_axes(self,obj,columns=None)
pandas.io.pytables.Table.queryables(self)
pandas.io.pytables.Table.read_axes(self,where,**kwargs)
pandas.io.pytables.Table.read_column(self,column,where=None,start=None,stop=None,**kwargs)
pandas.io.pytables.Table.read_coordinates(self,where=None,start=None,stop=None,**kwargs)
pandas.io.pytables.Table.read_metadata(self,key)
pandas.io.pytables.Table.set_attrs(self)
pandas.io.pytables.Table.set_info(self)
pandas.io.pytables.Table.storable(self)
pandas.io.pytables.Table.table(self)
pandas.io.pytables.Table.table_type_short(self)
pandas.io.pytables.Table.validate(self,other)
pandas.io.pytables.Table.validate_data_columns(self,data_columns,min_itemsize)
pandas.io.pytables.Table.validate_metadata(self,existing)
pandas.io.pytables.Table.validate_min_itemsize(self,min_itemsize)
pandas.io.pytables.Table.validate_multiindex(self,obj)
pandas.io.pytables.Table.validate_version(self,where=None)
pandas.io.pytables.Table.values_cols(self)
pandas.io.pytables.Table.write_metadata(self,key,values)
pandas.io.pytables.TableIterator(self,store,s,func,where,nrows,start=None,stop=None,iterator=False,chunksize=None,auto_close=False)
pandas.io.pytables.TableIterator.__init__(self,store,s,func,where,nrows,start=None,stop=None,iterator=False,chunksize=None,auto_close=False)
pandas.io.pytables.TableIterator.__iter__(self)
pandas.io.pytables.TableIterator.close(self)
pandas.io.pytables.TableIterator.get_result(self,coordinates=False)
pandas.io.pytables.WORMTable(Table)
pandas.io.pytables.WORMTable.read(self,**kwargs)
pandas.io.pytables.WORMTable.write(self,**kwargs)
pandas.io.pytables._convert_index(index,encoding=None,format_type=None)
pandas.io.pytables._convert_string_array(data,encoding,itemsize=None)
pandas.io.pytables._ensure_decoded(s)
pandas.io.pytables._ensure_encoding(encoding)
pandas.io.pytables._ensure_term(where,scope_level)
pandas.io.pytables._get_converter(kind,encoding)
pandas.io.pytables._get_info(info,name)
pandas.io.pytables._get_tz(tz)
pandas.io.pytables._is_metadata_of(group,parent_group)
pandas.io.pytables._maybe_convert(values,val_kind,encoding)
pandas.io.pytables._need_convert(kind)
pandas.io.pytables._reindex_axis(obj,axis,labels,other=None)
pandas.io.pytables._set_tz(values,tz,preserve_UTC=False,coerce=False)
pandas.io.pytables._tables()
pandas.io.pytables._unconvert_index(data,kind,encoding=None)
pandas.io.pytables._unconvert_index_legacy(data,kind,legacy=False,encoding=None)
pandas.io.pytables._unconvert_string_array(data,nan_rep=None,encoding=None)
pandas.io.pytables.get_store(path,**kwargs)
pandas.io.pytables.read_hdf(path_or_buf,key=None,**kwargs)
pandas.io.pytables.timeit(key,df,fn=None,remove=True,**kwargs)
pandas.io.pytables.to_hdf(path_or_buf,key,value,mode=None,complevel=None,complib=None,append=None,**kwargs)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/excel.py----------------------------------------
A:pandas.io.excel.io->_urlopen(io)
A:pandas.io.excel.ver->tuple(map(int, xlrd.__VERSION__.split('.')[:2]))
A:pandas.io.excel.engine->pandas.core.config.get_option('io.excel.%s.writer' % ext)
A:pandas.io.excel.(io, _, _)->get_filepath_or_buffer(io)
A:pandas.io.excel.data->_urlopen(io).read()
A:pandas.io.excel.self.book->xlsxwriter.Workbook(path, **engine_kwargs)
A:pandas.io.excel.rng->rng.split(':').split(':')
A:pandas.io.excel.skipfooter->kwds.pop('skipfooter', None)
A:pandas.io.excel.cell_contents->bool(cell_contents)
A:pandas.io.excel.dt->xlrd.xldate.xldate_as_tuple(cell_contents, epoch1904)
A:pandas.io.excel.val->_conv_value(cell.val)
A:pandas.io.excel.sheets->list(OrderedDict.fromkeys(sheets).keys())
A:pandas.io.excel.output->OrderedDict()
A:pandas.io.excel.sheet->self.book.sheet_by_index(asheetname)
A:pandas.io.excel.should_parse[j]->self._should_parse(j, parse_cols)
A:pandas.io.excel.output[asheetname]->DataFrame()
A:pandas.io.excel.(data[row], control_row)->_fill_mi_header(data[row], control_row)
A:pandas.io.excel.(header_name, data[row])->_pop_header_name(data[row], index_col)
A:pandas.io.excel.data[header]->_trim_excel_header(data[header])
A:pandas.io.excel.parser->TextParser(data, header=header, index_col=index_col, has_index_names=has_index_names, na_values=na_values, thousands=thousands, parse_dates=parse_dates, date_parser=date_parser, true_values=true_values, false_values=false_values, skiprows=skiprows, skipfooter=skip_footer, squeeze=squeeze, dtype=dtype, **kwds)
A:pandas.io.excel.output[asheetname].columns->DataFrame().columns.set_names(header_names)
A:pandas.io.excel.error->ValueError("No engine for filetype: '%s'" % ext)
A:pandas.io.excel.cls->get_writer(engine)
A:pandas.io.excel.sheet_name->self._get_sheet_name(sheet_name)
A:pandas.io.excel.wks->self.book.add_worksheet(sheet_name)
A:pandas.io.excel.colletter->get_column_letter(col)
A:pandas.io.excel.xcell->self.book.add_worksheet(sheet_name).cell(column=col, row=row)
A:pandas.io.excel.xcell.value->_conv_value(cell.val)
A:pandas.io.excel.style->self._convert_to_style(cell.style, num_format_str)
A:pandas.io.excel.cletterstart->get_column_letter(startcol + cell.col + 1)
A:pandas.io.excel.cletterend->get_column_letter(startcol + cell.mergeend + 1)
A:pandas.io.excel.xls_style->Style()
A:pandas.io.excel.xcell.style->self.book.add_worksheet(sheet_name).cell(column=col, row=row).style.copy(**style_kwargs)
A:pandas.io.excel._conv_to_x->getattr(cls, '_convert_to_{0}'.format(k), lambda x: None)
A:pandas.io.excel.new_v->_conv_to_x(v)
A:pandas.io.excel.v->get_writer(engine)._convert_to_side(v)
A:pandas.io.excel.wks.freeze_panes->self.book.add_worksheet(sheet_name).cell(row=freeze_panes[0] + 1, column=freeze_panes[1] + 1)
A:pandas.io.excel.key->str(cell.style)
A:pandas.io.excel.style_kwargs->self._convert_to_style_kwargs(cell.style)
A:pandas.io.excel.self.fm_datetime->xlwt.easyxf(num_format_str=self.datetime_format)
A:pandas.io.excel.self.fm_date->xlwt.easyxf(num_format_str=self.date_format)
A:pandas.io.excel.stylekey->pandas._libs.json.dumps(cell.style)
A:pandas.io.excel.item->item.replace('False', 'off').replace('False', 'off')
A:pandas.io.excel.xlwt_stylestr->get_writer(engine)._style_to_xlwt(style_dict)
A:pandas.io.excel.xl_format->self.book.add_format()
A:pandas.io.excel.alignment->style_dict.get('alignment')
pandas.io.excel.ExcelFile(self,io,**kwds)
pandas.io.excel.ExcelFile.__enter__(self)
pandas.io.excel.ExcelFile.__exit__(self,exc_type,exc_value,traceback)
pandas.io.excel.ExcelFile.__init__(self,io,**kwds)
pandas.io.excel.ExcelFile._parse_excel(self,sheetname=0,header=0,skiprows=None,names=None,skip_footer=0,index_col=None,has_index_names=None,parse_cols=None,parse_dates=False,date_parser=None,na_values=None,thousands=None,convert_float=True,true_values=None,false_values=None,verbose=False,dtype=None,squeeze=False,**kwds)
pandas.io.excel.ExcelFile._should_parse(self,i,parse_cols)
pandas.io.excel.ExcelFile.close(self)
pandas.io.excel.ExcelFile.parse(self,sheetname=0,header=0,skiprows=None,skip_footer=0,names=None,index_col=None,parse_cols=None,parse_dates=False,date_parser=None,na_values=None,thousands=None,convert_float=True,has_index_names=None,converters=None,true_values=None,false_values=None,squeeze=False,**kwds)
pandas.io.excel.ExcelFile.sheet_names(self)
pandas.io.excel.ExcelWriter(self,path,engine=None,date_format=None,datetime_format=None,**engine_kwargs)
pandas.io.excel.ExcelWriter.__enter__(self)
pandas.io.excel.ExcelWriter.__exit__(self,exc_type,exc_value,traceback)
pandas.io.excel.ExcelWriter.__init__(self,path,engine=None,date_format=None,datetime_format=None,**engine_kwargs)
pandas.io.excel.ExcelWriter._get_sheet_name(self,sheet_name)
pandas.io.excel.ExcelWriter.check_extension(cls,ext)
pandas.io.excel.ExcelWriter.close(self)
pandas.io.excel.ExcelWriter.engine(self)
pandas.io.excel.ExcelWriter.save(self)
pandas.io.excel.ExcelWriter.supported_extensions(self)
pandas.io.excel.ExcelWriter.write_cells(self,cells,sheet_name=None,startrow=0,startcol=0,freeze_panes=None)
pandas.io.excel._Openpyxl1Writer(self,path,engine=None,**engine_kwargs)
pandas.io.excel._Openpyxl1Writer.__init__(self,path,engine=None,**engine_kwargs)
pandas.io.excel._Openpyxl1Writer._convert_to_style(cls,style_dict)
pandas.io.excel._Openpyxl1Writer.save(self)
pandas.io.excel._Openpyxl1Writer.write_cells(self,cells,sheet_name=None,startrow=0,startcol=0,freeze_panes=None)
pandas.io.excel._Openpyxl20Writer(_Openpyxl1Writer)
pandas.io.excel._Openpyxl20Writer._convert_to_alignment(cls,alignment_dict)
pandas.io.excel._Openpyxl20Writer._convert_to_border(cls,border_dict)
pandas.io.excel._Openpyxl20Writer._convert_to_color(cls,color_spec)
pandas.io.excel._Openpyxl20Writer._convert_to_fill(cls,fill_dict)
pandas.io.excel._Openpyxl20Writer._convert_to_font(cls,font_dict)
pandas.io.excel._Openpyxl20Writer._convert_to_number_format(cls,number_format_dict)
pandas.io.excel._Openpyxl20Writer._convert_to_protection(cls,protection_dict)
pandas.io.excel._Openpyxl20Writer._convert_to_side(cls,side_spec)
pandas.io.excel._Openpyxl20Writer._convert_to_stop(cls,stop_seq)
pandas.io.excel._Openpyxl20Writer._convert_to_style_kwargs(cls,style_dict)
pandas.io.excel._Openpyxl20Writer.write_cells(self,cells,sheet_name=None,startrow=0,startcol=0,freeze_panes=None)
pandas.io.excel._Openpyxl22Writer(_Openpyxl20Writer)
pandas.io.excel._Openpyxl22Writer.write_cells(self,cells,sheet_name=None,startrow=0,startcol=0,freeze_panes=None)
pandas.io.excel._OpenpyxlWriter(_Openpyxl1Writer)
pandas.io.excel._XlsxWriter(self,path,engine=None,date_format=None,datetime_format=None,**engine_kwargs)
pandas.io.excel._XlsxWriter.__init__(self,path,engine=None,date_format=None,datetime_format=None,**engine_kwargs)
pandas.io.excel._XlsxWriter._convert_to_style(self,style_dict,num_format_str=None)
pandas.io.excel._XlsxWriter.save(self)
pandas.io.excel._XlsxWriter.write_cells(self,cells,sheet_name=None,startrow=0,startcol=0,freeze_panes=None)
pandas.io.excel._XlwtWriter(self,path,engine=None,encoding=None,**engine_kwargs)
pandas.io.excel._XlwtWriter.__init__(self,path,engine=None,encoding=None,**engine_kwargs)
pandas.io.excel._XlwtWriter._convert_to_style(cls,style_dict,num_format_str=None)
pandas.io.excel._XlwtWriter._style_to_xlwt(cls,item,firstlevel=True,field_sep=',',line_sep=';')
pandas.io.excel._XlwtWriter.save(self)
pandas.io.excel._XlwtWriter.write_cells(self,cells,sheet_name=None,startrow=0,startcol=0,freeze_panes=None)
pandas.io.excel._conv_value(val)
pandas.io.excel._fill_mi_header(row,control_row)
pandas.io.excel._pop_header_name(row,index_col)
pandas.io.excel._trim_excel_header(row)
pandas.io.excel._validate_freeze_panes(freeze_panes)
pandas.io.excel.get_writer(engine_name)
pandas.io.excel.read_excel(io,sheetname=0,header=0,skiprows=None,skip_footer=0,index_col=None,names=None,parse_cols=None,parse_dates=False,date_parser=None,na_values=None,thousands=None,convert_float=True,has_index_names=None,converters=None,dtype=None,true_values=None,false_values=None,engine=None,squeeze=False,**kwds)
pandas.io.excel.register_writer(klass)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/stata.py----------------------------------------
A:pandas.io.stata.reader->StataReader(filepath_or_buffer, convert_dates=convert_dates, convert_categoricals=convert_categoricals, index=index, convert_missing=convert_missing, preserve_dtypes=preserve_dtypes, columns=columns, order_categoricals=order_categoricals, chunksize=chunksize, encoding=encoding)
A:pandas.io.stata.data->self._prepare_categoricals(data)
A:pandas.io.stata.stata_epoch->datetime.datetime(1960, 1, 1)
A:pandas.io.stata.index->getattr(deltas, 'index', None)
A:pandas.io.stata.base->to_datetime(base)
A:pandas.io.stata.deltas->to_timedelta(deltas, unit=unit)
A:pandas.io.stata.bad_locs->numpy.isnan(dates)
A:pandas.io.stata.data_col->Series(dates)
A:pandas.io.stata.dates->Series(dates)
A:pandas.io.stata.conv_dates->Series(conv_dates, dtype=np.float64)
A:pandas.io.stata.month->numpy.ones_like(dates)
A:pandas.io.stata.v->numpy.vectorize(f)
A:pandas.io.stata.d['delta']->v(delta)
A:pandas.io.stata.year_month->Series(dates).apply(lambda x: 100 * x.year + x.month)
A:pandas.io.stata.d['days']->v(dates)
A:pandas.io.stata.bad_loc->isnull(dates)
A:pandas.io.stata.dates[bad_loc]->to_datetime(stata_epoch)
A:pandas.io.stata.d->parse_dates_safe(dates, year=True)
A:pandas.io.stata.data[col]->data[col].fillna('').apply(_pad_bytes, args=(typ,)).fillna('').apply(_pad_bytes, args=(typ,))
A:pandas.io.stata.value->property(lambda self: self._value, doc='The binary representation of the missing value.')
A:pandas.io.stata.self.value_labels->list(zip(np.arange(len(categories)), categories))
A:pandas.io.stata.self.text_len->numpy.int32(0)
A:pandas.io.stata.category->str(category)
A:pandas.io.stata.self.off->numpy.array(self.off, dtype=np.int32)
A:pandas.io.stata.self.val->numpy.array(self.val, dtype=np.int32)
A:pandas.io.stata.bio->BytesIO()
A:pandas.io.stata.labname->self._decode(self.path_or_buf.read(129))
A:pandas.io.stata.float32_base->struct.pack('<i', int_value)
A:pandas.io.stata.float64_base->struct.pack('q', int_value)
A:pandas.io.stata.string->data[col].fillna('').apply(_pad_bytes, args=(typ,)).fillna('').apply(_pad_bytes, args=(typ,)).str.encode(self._encoding)
A:pandas.io.stata.self.DTYPE_MAP->dict(lzip(range(1, 245), ['a' + str(i) for i in range(1, 245)]) + [(251, np.int8), (252, np.int16), (253, np.int32), (254, np.float32), (255, np.float64)])
A:pandas.io.stata.self.DTYPE_MAP_XML->dict([(32768, np.uint8), (65526, np.float64), (65527, np.float32), (65528, np.int32), (65529, np.int16), (65530, np.int8)])
A:pandas.io.stata.self.TYPE_MAP_XML->dict([(32768, 'Q'), (65526, 'd'), (65527, 'f'), (65528, 'l'), (65529, 'h'), (65530, 'b')])
A:pandas.io.stata.self._native_byteorder->_set_endianness(sys.byteorder)
A:pandas.io.stata.(path_or_buf, encoding, _)->get_filepath_or_buffer(path_or_buf, encoding=self._default_encoding)
A:pandas.io.stata.self.path_or_buf->BytesIO(contents)
A:pandas.io.stata.contents->contents.encode(self._default_encoding).encode(self._default_encoding)
A:pandas.io.stata.first_char->self.path_or_buf.read(1)
A:pandas.io.stata.self.col_sizes->lmap(lambda x: self._calcsize(x), self.typlist)
A:pandas.io.stata.self.format_version->int(self.path_or_buf.read(3))
A:pandas.io.stata.self.nobs->self._get_nobs()
A:pandas.io.stata.self.data_label->self._get_data_label()
A:pandas.io.stata.self.time_stamp->self._get_time_stamp()
A:pandas.io.stata.self._seek_variable_labels->self._get_seek_variable_labels()
A:pandas.io.stata.(self.typlist, self.dtyplist)->self._get_dtypes(self._seek_vartypes)
A:pandas.io.stata.self.varlist->self._prepare_categoricals(data).columns.tolist()
A:pandas.io.stata.self.fmtlist->self._get_fmtlist()
A:pandas.io.stata.self.lbllist->self._get_lbllist()
A:pandas.io.stata.self._variable_labels->self._get_variable_labels()
A:pandas.io.stata.buf->self.path_or_buf.read(12)
A:pandas.io.stata.typlistb->numpy.frombuffer(buf, dtype=np.uint8)
A:pandas.io.stata.self.data_location->self.path_or_buf.tell()
A:pandas.io.stata.self.value_label_dict->dict()
A:pandas.io.stata.slength->self.path_or_buf.read(4)
A:pandas.io.stata.off->numpy.frombuffer(self.path_or_buf.read(4 * n), dtype=self.byteorder + 'i4', count=n)
A:pandas.io.stata.val->numpy.frombuffer(self.path_or_buf.read(4 * n), dtype=self.byteorder + 'i4', count=n)
A:pandas.io.stata.ii->numpy.argsort(off)
A:pandas.io.stata.txt->self.path_or_buf.read(txtlen)
A:pandas.io.stata.self.value_label_dict[labname]->dict()
A:pandas.io.stata.self.value_label_dict[labname][val[i]]->self._decode(txt[off[i]:end])
A:pandas.io.stata.va->va[0:-1].decode(encoding)
A:pandas.io.stata.dtype->numpy.dtype(dtype)
A:pandas.io.stata.read_len->min(read_len, max_read_len)
A:pandas.io.stata.read_lines->min(nrows, self.nobs - self._lines_read)
A:pandas.io.stata.ix->numpy.arange(self._lines_read - read_lines, self._lines_read)
A:pandas.io.stata.missing->numpy.logical_or(series < nmin, series > nmax)
A:pandas.io.stata.missing_loc->numpy.argwhere(missing)
A:pandas.io.stata.(umissing, umissing_loc)->numpy.unique(series[missing], return_inverse=True)
A:pandas.io.stata.replacement->Series(series, dtype=dtype)
A:pandas.io.stata.missing_value->StataMissingValue(um)
A:pandas.io.stata.column_set->set(columns)
A:pandas.io.stata.unmatched->set(columns).difference(data.columns)
A:pandas.io.stata.i->self._prepare_categoricals(data).columns.get_loc(col)
A:pandas.io.stata.value_labels->list(compat.iterkeys(value_label_dict))
A:pandas.io.stata.cat_data->Series(cat_data, index=data.index)
A:pandas.io.stata.vc->Series(categories).value_counts()
A:pandas.io.stata.repeats->list(vc.index[vc > 1])
A:pandas.io.stata.msg->'Value labels for column {0} are not unique. The repeated labels are:\n{1}'.format(col, repeats)
A:pandas.io.stata.itemsize->max_len_string_array(_ensure_object(column.values))
A:pandas.io.stata.inferred_dtype->infer_dtype(column.dropna())
A:pandas.io.stata.self._byteorder->_set_endianness(byteorder)
A:pandas.io.stata.values->numpy.array(values, dtype=dtype)
A:pandas.io.stata.values[values == -1]->get_base_missing_value(dtype)
A:pandas.io.stata.data[c]->data[c].fillna(replacement).fillna(replacement)
A:pandas.io.stata.columns->list(data.columns)
A:pandas.io.stata.name->_pad_bytes(name[:32], 33)
A:pandas.io.stata.orig_name->orig_name.encode('utf-8').encode('utf-8')
A:pandas.io.stata.ws->invalid_name_doc.format('\n    '.join(converted_names))
A:pandas.io.stata.self._convert_dates->_maybe_convert_to_int_keys(self._convert_dates, self.varlist)
A:pandas.io.stata.new_type->_convert_datetime_to_stata_type(self._convert_dates[key])
A:pandas.io.stata.dtypes[key]->numpy.dtype(new_type)
A:pandas.io.stata.self._file->_open_file_binary_write(self._fname, self._encoding or self._default_encoding)
A:pandas.io.stata.time_stamp->datetime.datetime.now()
A:pandas.io.stata.srtlist->_pad_bytes('', 2 * (nvar + 1))
A:pandas.io.stata.blank->_pad_bytes('', 81)
A:pandas.io.stata.is_latin1->all((ord(c) < 256 for c in label))
A:pandas.io.stata.typ->ord(typlist[i])
A:pandas.io.stata.self.data->self._prepare_categoricals(data).to_records(index=False)
pandas.io.stata.InvalidColumnName(Warning)
pandas.io.stata.PossiblePrecisionLoss(Warning)
pandas.io.stata.StataMissingValue(self,value)
pandas.io.stata.StataMissingValue.__eq__(self,other)
pandas.io.stata.StataMissingValue.__init__(self,value)
pandas.io.stata.StataMissingValue.__repr__(self)
pandas.io.stata.StataMissingValue.__unicode__(self)
pandas.io.stata.StataMissingValue.get_base_missing_value(cls,dtype)
pandas.io.stata.StataParser(self,encoding)
pandas.io.stata.StataParser.__init__(self,encoding)
pandas.io.stata.StataReader(self,path_or_buf,convert_dates=True,convert_categoricals=True,index=None,convert_missing=False,preserve_dtypes=True,columns=None,order_categoricals=True,encoding='latin-1',chunksize=None)
pandas.io.stata.StataReader.__enter__(self)
pandas.io.stata.StataReader.__exit__(self,exc_type,exc_value,traceback)
pandas.io.stata.StataReader.__init__(self,path_or_buf,convert_dates=True,convert_categoricals=True,index=None,convert_missing=False,preserve_dtypes=True,columns=None,order_categoricals=True,encoding='latin-1',chunksize=None)
pandas.io.stata.StataReader.__next__(self)
pandas.io.stata.StataReader._calcsize(self,fmt)
pandas.io.stata.StataReader._decode(self,s)
pandas.io.stata.StataReader._do_convert_categoricals(self,data,value_label_dict,lbllist,order_categoricals)
pandas.io.stata.StataReader._do_convert_missing(self,data,convert_missing)
pandas.io.stata.StataReader._do_select_columns(self,data,columns)
pandas.io.stata.StataReader._get_data_label(self)
pandas.io.stata.StataReader._get_dtypes(self,seek_vartypes)
pandas.io.stata.StataReader._get_fmtlist(self)
pandas.io.stata.StataReader._get_lbllist(self)
pandas.io.stata.StataReader._get_nobs(self)
pandas.io.stata.StataReader._get_seek_variable_labels(self)
pandas.io.stata.StataReader._get_time_stamp(self)
pandas.io.stata.StataReader._get_variable_labels(self)
pandas.io.stata.StataReader._get_varlist(self)
pandas.io.stata.StataReader._insert_strls(self,data)
pandas.io.stata.StataReader._null_terminate(self,s)
pandas.io.stata.StataReader._read_header(self)
pandas.io.stata.StataReader._read_new_header(self,first_char)
pandas.io.stata.StataReader._read_old_header(self,first_char)
pandas.io.stata.StataReader._read_strls(self)
pandas.io.stata.StataReader._read_value_labels(self)
pandas.io.stata.StataReader.close(self)
pandas.io.stata.StataReader.data(self,**kwargs)
pandas.io.stata.StataReader.data_label(self)
pandas.io.stata.StataReader.get_chunk(self,size=None)
pandas.io.stata.StataReader.read(self,nrows=None,convert_dates=None,convert_categoricals=None,index=None,convert_missing=None,preserve_dtypes=None,columns=None,order_categoricals=None)
pandas.io.stata.StataReader.value_labels(self)
pandas.io.stata.StataReader.variable_labels(self)
pandas.io.stata.StataValueLabel(self,catarray)
pandas.io.stata.StataValueLabel.__init__(self,catarray)
pandas.io.stata.StataValueLabel._encode(self,s)
pandas.io.stata.StataValueLabel.generate_value_label(self,byteorder,encoding)
pandas.io.stata.StataWriter(self,fname,data,convert_dates=None,write_index=True,encoding='latin-1',byteorder=None,time_stamp=None,data_label=None,variable_labels=None)
pandas.io.stata.StataWriter.__init__(self,fname,data,convert_dates=None,write_index=True,encoding='latin-1',byteorder=None,time_stamp=None,data_label=None,variable_labels=None)
pandas.io.stata.StataWriter._check_column_names(self,data)
pandas.io.stata.StataWriter._null_terminate(self,s,as_string=False)
pandas.io.stata.StataWriter._prepare_categoricals(self,data)
pandas.io.stata.StataWriter._prepare_data(self)
pandas.io.stata.StataWriter._prepare_pandas(self,data)
pandas.io.stata.StataWriter._replace_nans(self,data)
pandas.io.stata.StataWriter._write(self,to_write)
pandas.io.stata.StataWriter._write_data(self)
pandas.io.stata.StataWriter._write_descriptors(self,typlist=None,varlist=None,srtlist=None,fmtlist=None,lbllist=None)
pandas.io.stata.StataWriter._write_header(self,data_label=None,time_stamp=None)
pandas.io.stata.StataWriter._write_value_labels(self)
pandas.io.stata.StataWriter._write_variable_labels(self)
pandas.io.stata.StataWriter.write_file(self)
pandas.io.stata.ValueLabelTypeMismatch(Warning)
pandas.io.stata._cast_to_stata_types(data)
pandas.io.stata._convert_datetime_to_stata_type(fmt)
pandas.io.stata._datetime_to_stata_elapsed_vec(dates,fmt)
pandas.io.stata._dtype_to_default_stata_fmt(dtype,column)
pandas.io.stata._dtype_to_stata_type(dtype,column)
pandas.io.stata._maybe_convert_to_int_keys(convert_dates,varlist)
pandas.io.stata._open_file_binary_write(fname,encoding)
pandas.io.stata._pad_bytes(name,length)
pandas.io.stata._set_endianness(endianness)
pandas.io.stata._stata_elapsed_date_to_datetime_vec(dates,fmt)
pandas.io.stata.read_stata(filepath_or_buffer,convert_dates=True,convert_categoricals=True,encoding=None,index=None,convert_missing=False,preserve_dtypes=True,columns=None,order_categoricals=True,chunksize=None,iterator=False)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/gbq.py----------------------------------------
A:pandas.io.gbq.pandas_gbq->_try_import()
pandas.io.gbq._try_import()
pandas.io.gbq.read_gbq(query,project_id=None,index_col=None,col_order=None,reauth=False,verbose=True,private_key=None,dialect='legacy',**kwargs)
pandas.io.gbq.to_gbq(dataframe,destination_table,project_id,chunksize=10000,verbose=True,reauth=False,if_exists='fail',private_key=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/feather_format.py----------------------------------------
A:pandas.io.feather_format.feather->_try_import()
pandas.io.feather_format._try_import()
pandas.io.feather_format.read_feather(path)
pandas.io.feather_format.to_feather(df,path)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/data.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/packers.py----------------------------------------
A:pandas.io.packers._check_zlib.__doc__->dedent('    Check if zlib is installed.\n\n    Raises\n    ------\n    ImportError\n        Raised when zlib is not installed.\n    ')
A:pandas.io.packers._check_blosc.__doc__->dedent('    Check if blosc is installed.\n\n    Raises\n    ------\n    ImportError\n        Raised when blosc is not installed.\n    ')
A:pandas.io.packers.compressor->u(compressor)
A:pandas.io.packers.append->kwargs.pop('append', None)
A:pandas.io.packers.buf->pandas.compat.BytesIO()
A:pandas.io.packers.(path_or_buf, _, _)->get_filepath_or_buffer(path_or_buf)
A:pandas.io.packers.l->list(unpack(fh, encoding=encoding, **kwargs))
A:pandas.io.packers.exists->os.path.exists(path_or_buf)
A:pandas.io.packers.fh->pandas.compat.BytesIO(self.path)
A:pandas.io.packers.values->_safe_reshape(unconvert(b[u'values'], dtype_for(b[u'dtype']), b[u'compress']), b[u'shape'])
A:pandas.io.packers.v->v.tostring().tostring()
A:pandas.io.packers.tobj->type(obj)
A:pandas.io.packers.tz->u(tz.zone)
A:pandas.io.packers.obj->obj.tz_convert('UTC').tz_convert('UTC')
A:pandas.io.packers.data->unconvert(obj[u'data'], np.int64, obj.get(u'compress'))
A:pandas.io.packers.freq->u(freq.freqstr)
A:pandas.io.packers.typ->obj.tz_convert('UTC').tz_convert('UTC').get(u'typ')
A:pandas.io.packers.dtype->dtype_for(obj[u'dtype'])
A:pandas.io.packers.d->dict(name=obj[u'name'], freq=obj[u'freq'], verify_integrity=False)
A:pandas.io.packers.result->globals()[obj[u'klass']](unconvert(obj[u'data'], dtype, obj[u'compress']), index=index, dtype=pd_dtype, name=obj[u'name'])
A:pandas.io.packers.pd_dtype->pandas_dtype(dtype)
A:pandas.io.packers.placement->axes[0].get_indexer(b[u'items'])
A:pandas.io.packers.path_exists->os.path.exists(self.path)
A:pandas.io.packers.unpacker->unpack(fh)
pandas.io.packers.Iterator(self,path,**kwargs)
pandas.io.packers.Iterator.__init__(self,path,**kwargs)
pandas.io.packers.Iterator.__iter__(self)
pandas.io.packers.Packer(self,default=encode,encoding='utf-8',unicode_errors='strict',use_single_float=False,autoreset=1,use_bin_type=1)
pandas.io.packers.Packer.__init__(self,default=encode,encoding='utf-8',unicode_errors='strict',use_single_float=False,autoreset=1,use_bin_type=1)
pandas.io.packers.Unpacker(self,file_like=None,read_size=0,use_list=False,object_hook=decode,object_pairs_hook=None,list_hook=None,encoding='utf-8',unicode_errors='strict',max_buffer_size=0,ext_hook=ExtType)
pandas.io.packers.Unpacker.__init__(self,file_like=None,read_size=0,use_list=False,object_hook=decode,object_pairs_hook=None,list_hook=None,encoding='utf-8',unicode_errors='strict',max_buffer_size=0,ext_hook=ExtType)
pandas.io.packers.c2f(r,i,ctype_name)
pandas.io.packers.convert(values)
pandas.io.packers.decode(obj)
pandas.io.packers.dtype_for(t)
pandas.io.packers.encode(obj)
pandas.io.packers.pack(o,default=encode,encoding='utf-8',unicode_errors='strict',use_single_float=False,autoreset=1,use_bin_type=1)
pandas.io.packers.read_msgpack(path_or_buf,encoding='utf-8',iterator=False,**kwargs)
pandas.io.packers.to_msgpack(path_or_buf,*args,**kwargs)
pandas.io.packers.unconvert(values,dtype,compress=None)
pandas.io.packers.unpack(packed,object_hook=decode,list_hook=None,use_list=False,encoding='utf-8',unicode_errors='strict',object_pairs_hook=None,max_buffer_size=0,ext_hook=ExtType)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/common.py----------------------------------------
A:pandas.io.common._NA_VALUES->set(['-1.#IND', '1.#QNAN', '1.#IND', '-1.#QNAN', '#N/A N/A', '#N/A', 'N/A', 'NA', '#NA', 'NULL', 'NaN', '-NaN', 'nan', '-nan', ''])
A:pandas.io.common._VALID_URLS->set(uses_relative + uses_netloc + uses_params)
A:pandas.io.common.url->str(filepath_or_buffer)
A:pandas.io.common.req->_urlopen(url)
A:pandas.io.common.content_encoding->_urlopen(url).headers.get('Content-Encoding', None)
A:pandas.io.common.reader->BytesIO(req.read())
A:pandas.io.common.filepath_or_buffer->_stringify_path(filepath_or_buffer)
A:pandas.io.common.is_path->isinstance(path_or_buf, compat.string_types)
A:pandas.io.common.msg->'Unrecognized compression type: {}'.format(compression)
A:pandas.io.common.handles->list()
A:pandas.io.common.f->UTF8Recoder(f, encoding)
A:pandas.io.common.zip_file->zipfile.ZipFile(path_or_buf)
A:pandas.io.common.zip_names->zipfile.ZipFile(path_or_buf).namelist()
A:pandas.io.common.lzma->pandas.compat.import_lzma()
A:pandas.io.common.g->MMapWrapper(f)
A:pandas.io.common.self.mmap->mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)
A:pandas.io.common.newline->pandas.compat.bytes_to_str(newline)
A:pandas.io.common.self.reader->csv.reader(f, dialect=dialect, **kwds)
A:pandas.io.common.row->next(self.reader)
A:pandas.io.common.self.queue->StringIO()
A:pandas.io.common.self.writer->csv.writer(self.queue, dialect=dialect, **kwds)
A:pandas.io.common.self.encoder->codecs.getincrementalencoder(encoding)()
A:pandas.io.common.self.quoting->kwds.get('quoting', None)
A:pandas.io.common.data->self.encoder.encode(data)
pandas.io.common.BaseIterator(object)
pandas.io.common.BaseIterator.__iter__(self)
pandas.io.common.BaseIterator.__next__(self)
pandas.io.common.MMapWrapper(self,f)
pandas.io.common.MMapWrapper.__getattr__(self,name)
pandas.io.common.MMapWrapper.__init__(self,f)
pandas.io.common.MMapWrapper.__iter__(self)
pandas.io.common.MMapWrapper.__next__(self)
pandas.io.common.UTF8Recoder(self,f,encoding)
pandas.io.common.UTF8Recoder.__init__(self,f,encoding)
pandas.io.common.UTF8Recoder.next(self)
pandas.io.common.UTF8Recoder.read(self,bytes=-1)
pandas.io.common.UTF8Recoder.readline(self)
pandas.io.common._expand_user(filepath_or_buffer)
pandas.io.common._get_handle(path_or_buf,mode,encoding=None,compression=None,memory_map=False,is_text=True)
pandas.io.common._infer_compression(filepath_or_buffer,compression)
pandas.io.common._is_s3_url(url)
pandas.io.common._is_url(url)
pandas.io.common._stringify_path(filepath_or_buffer)
pandas.io.common._validate_header_arg(header)
pandas.io.common.file_path_to_url(path)
pandas.io.common.get_filepath_or_buffer(filepath_or_buffer,encoding=None,compression=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/sql.py----------------------------------------
A:pandas.io.sql.ver->LooseVersion(sqlalchemy.__version__)
A:pandas.io.sql.data_frame[col_name]->_handle_date_column(df_col)
A:pandas.io.sql.frame->_wrap_result(data, columns, index_col=index_col, coerce_float=coerce_float, parse_dates=parse_dates)
A:pandas.io.sql.pandas_sql->pandasSQL_builder(con=con, flavor=flavor)
A:pandas.io.sql.args->_convert_params(sql, params)
A:pandas.io.sql.con->_engine_builder(con)
A:pandas.io.sql.meta->MetaData(self.connectable, schema=schema)
A:pandas.io.sql.table->SQLiteTable(table_name, self, frame=frame, index=False, keys=keys, dtype=dtype)
A:pandas.io.sql._is_table_name->pandasSQL_builder(con=con, flavor=flavor).has_table(sql)
A:pandas.io.sql.self.index->self._index_name(index, index_label)
A:pandas.io.sql.self.table->self.table.tometadata(self.pd_sql.meta)
A:pandas.io.sql.temp->self.frame.copy()
A:pandas.io.sql.column_names->list(result).keys()
A:pandas.io.sql.ncols->len(column_names)
A:pandas.io.sql.d->numpy.array(b.get_values(), dtype=object)
A:pandas.io.sql.mask->isnull(d)
A:pandas.io.sql.(keys, data_list)->self.insert_data()
A:pandas.io.sql.nrows->len(self.frame)
A:pandas.io.sql.end_i->min((i + 1) * chunksize, nrows)
A:pandas.io.sql.chunk_iter->zip(*[arr[start_i:end_i] for arr in data_list])
A:pandas.io.sql.data->self._fetchall_as_list(cursor)
A:pandas.io.sql.self.frame->pandas.core.api.DataFrame.from_records(data, columns=column_names, coerce_float=coerce_float)
A:pandas.io.sql.sql_select->self.table.select()
A:pandas.io.sql.result->list(result)
A:pandas.io.sql.idx_type->dtype_mapper(self.frame.index._get_level_values(i))
A:pandas.io.sql.column_names_and_types->self._get_column_names_and_types(self._sql_type_name)
A:pandas.io.sql.pkc->PrimaryKeyConstraint(*keys, name=self.name + '_pk')
A:pandas.io.sql.col_type->self._get_notnull_col_dtype(col)
A:pandas.io.sql.self.frame[col_name]->_handle_date_column(df_col, format=fmt)
A:pandas.io.sql.columns->list(result).keys()
A:pandas.io.sql.table_names->engine.table_names(schema=schema or self.meta.schema, connection=conn)
A:pandas.io.sql.msg->"The provided table name '{0}' is not found exactly as such in the database after writing the table, possibly due to case sensitivity issues. Consider using lower case table names.".format(name)
A:pandas.io.sql.tbl->self.meta.tables.get(table_name)
A:pandas.io.sql.uname->_get_unicode_name(name)
A:pandas.io.sql.nul_index->_get_unicode_name(name).find('\x00')
A:pandas.io.sql.names->list(map(text_type, self.frame.columns))
A:pandas.io.sql.col_names->','.join(bracketed_names)
A:pandas.io.sql.wildcards->','.join([wld] * len(names))
A:pandas.io.sql.data_list->list(data_iter)
A:pandas.io.sql.pat->re.compile('\\s+')
A:pandas.io.sql.cnames_br->','.join([escape(c) for c in ix_cols])
A:pandas.io.sql.cnames->'_'.join(ix_cols)
A:pandas.io.sql.cur->self.con.cursor()
A:pandas.io.sql.ex->DatabaseError("Execution failed on sql '%s': %s" % (args[0], exc))
A:pandas.io.sql.cursor->self.execute(*args)
pandas.io.sql.DatabaseError(IOError)
pandas.io.sql.PandasSQL(PandasObject)
pandas.io.sql.PandasSQL.read_sql(self,*args,**kwargs)
pandas.io.sql.PandasSQL.to_sql(self,*args,**kwargs)
pandas.io.sql.SQLAlchemyRequired(ImportError)
pandas.io.sql.SQLDatabase(self,engine,schema=None,meta=None)
pandas.io.sql.SQLDatabase.__init__(self,engine,schema=None,meta=None)
pandas.io.sql.SQLDatabase._create_sql_schema(self,frame,table_name,keys=None,dtype=None)
pandas.io.sql.SQLDatabase._query_iterator(result,chunksize,columns,index_col=None,coerce_float=True,parse_dates=None)
pandas.io.sql.SQLDatabase.drop_table(self,table_name,schema=None)
pandas.io.sql.SQLDatabase.execute(self,*args,**kwargs)
pandas.io.sql.SQLDatabase.get_table(self,table_name,schema=None)
pandas.io.sql.SQLDatabase.has_table(self,name,schema=None)
pandas.io.sql.SQLDatabase.read_query(self,sql,index_col=None,coerce_float=True,parse_dates=None,params=None,chunksize=None)
pandas.io.sql.SQLDatabase.read_table(self,table_name,index_col=None,coerce_float=True,parse_dates=None,columns=None,schema=None,chunksize=None)
pandas.io.sql.SQLDatabase.run_transaction(self)
pandas.io.sql.SQLDatabase.tables(self)
pandas.io.sql.SQLDatabase.to_sql(self,frame,name,if_exists='fail',index=True,index_label=None,schema=None,chunksize=None,dtype=None)
pandas.io.sql.SQLTable(self,name,pandas_sql_engine,frame=None,index=True,if_exists='fail',prefix='pandas',index_label=None,schema=None,keys=None,dtype=None)
pandas.io.sql.SQLTable.__init__(self,name,pandas_sql_engine,frame=None,index=True,if_exists='fail',prefix='pandas',index_label=None,schema=None,keys=None,dtype=None)
pandas.io.sql.SQLTable._create_table_setup(self)
pandas.io.sql.SQLTable._execute_create(self)
pandas.io.sql.SQLTable._execute_insert(self,conn,keys,data_iter)
pandas.io.sql.SQLTable._get_column_names_and_types(self,dtype_mapper)
pandas.io.sql.SQLTable._get_dtype(self,sqltype)
pandas.io.sql.SQLTable._get_notnull_col_dtype(self,col)
pandas.io.sql.SQLTable._harmonize_columns(self,parse_dates=None)
pandas.io.sql.SQLTable._index_name(self,index,index_label)
pandas.io.sql.SQLTable._query_iterator(self,result,chunksize,columns,coerce_float=True,parse_dates=None)
pandas.io.sql.SQLTable._sqlalchemy_type(self,col)
pandas.io.sql.SQLTable.create(self)
pandas.io.sql.SQLTable.exists(self)
pandas.io.sql.SQLTable.insert(self,chunksize=None)
pandas.io.sql.SQLTable.insert_data(self)
pandas.io.sql.SQLTable.insert_statement(self)
pandas.io.sql.SQLTable.read(self,coerce_float=True,parse_dates=None,columns=None,chunksize=None)
pandas.io.sql.SQLTable.sql_schema(self)
pandas.io.sql.SQLiteDatabase(self,con,flavor=None,is_cursor=False)
pandas.io.sql.SQLiteDatabase.__init__(self,con,flavor=None,is_cursor=False)
pandas.io.sql.SQLiteDatabase._create_sql_schema(self,frame,table_name,keys=None,dtype=None)
pandas.io.sql.SQLiteDatabase._fetchall_as_list(self,cur)
pandas.io.sql.SQLiteDatabase._query_iterator(cursor,chunksize,columns,index_col=None,coerce_float=True,parse_dates=None)
pandas.io.sql.SQLiteDatabase.drop_table(self,name,schema=None)
pandas.io.sql.SQLiteDatabase.execute(self,*args,**kwargs)
pandas.io.sql.SQLiteDatabase.get_table(self,table_name,schema=None)
pandas.io.sql.SQLiteDatabase.has_table(self,name,schema=None)
pandas.io.sql.SQLiteDatabase.read_query(self,sql,index_col=None,coerce_float=True,params=None,parse_dates=None,chunksize=None)
pandas.io.sql.SQLiteDatabase.run_transaction(self)
pandas.io.sql.SQLiteDatabase.to_sql(self,frame,name,if_exists='fail',index=True,index_label=None,schema=None,chunksize=None,dtype=None)
pandas.io.sql.SQLiteTable(self,*args,**kwargs)
pandas.io.sql.SQLiteTable.__init__(self,*args,**kwargs)
pandas.io.sql.SQLiteTable._create_table_setup(self)
pandas.io.sql.SQLiteTable._execute_create(self)
pandas.io.sql.SQLiteTable._execute_insert(self,conn,keys,data_iter)
pandas.io.sql.SQLiteTable._sql_type_name(self,col)
pandas.io.sql.SQLiteTable.insert_statement(self)
pandas.io.sql.SQLiteTable.sql_schema(self)
pandas.io.sql._convert_params(sql,params)
pandas.io.sql._engine_builder(con)
pandas.io.sql._get_unicode_name(name)
pandas.io.sql._get_valid_sqlite_name(name)
pandas.io.sql._handle_date_column(col,format=None)
pandas.io.sql._is_sqlalchemy_connectable(con)
pandas.io.sql._parse_date_columns(data_frame,parse_dates)
pandas.io.sql._validate_flavor_parameter(flavor)
pandas.io.sql._wrap_result(data,columns,index_col=None,coerce_float=True,parse_dates=None)
pandas.io.sql.execute(sql,con,cur=None,params=None)
pandas.io.sql.get_schema(frame,name,flavor=None,keys=None,con=None,dtype=None)
pandas.io.sql.has_table(table_name,con,flavor=None,schema=None)
pandas.io.sql.pandasSQL_builder(con,flavor=None,schema=None,meta=None,is_cursor=False)
pandas.io.sql.read_sql(sql,con,index_col=None,coerce_float=True,params=None,parse_dates=None,columns=None,chunksize=None)
pandas.io.sql.read_sql_query(sql,con,index_col=None,coerce_float=True,params=None,parse_dates=None,chunksize=None)
pandas.io.sql.read_sql_table(table_name,con,schema=None,index_col=None,coerce_float=True,parse_dates=None,columns=None,chunksize=None)
pandas.io.sql.to_sql(frame,name,con,flavor=None,schema=None,if_exists='fail',index=True,index_label=None,chunksize=None,dtype=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/pickle.py----------------------------------------
A:pandas.io.pickle.inferred_compression->_infer_compression(path, compression)
A:pandas.io.pickle.(f, fh)->_get_handle(path, 'rb', compression=inferred_compression, is_text=False)
A:pandas.io.pickle.arr->arr.view(_NS_DTYPE).view(_NS_DTYPE)
A:pandas.io.pickle.buf->BytesIO()
pandas.io.pickle._pickle_array(arr)
pandas.io.pickle._unpickle_array(bytes)
pandas.io.pickle.read_pickle(path,compression='infer')
pandas.io.pickle.to_pickle(obj,path,compression='infer')


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/wb.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/s3.py----------------------------------------
A:pandas.io.s3.result->parse_url(url)
A:pandas.io.s3.fs->s3fs.S3FileSystem(anon=True)
A:pandas.io.s3.filepath_or_buffer->s3fs.S3FileSystem(anon=True).open(_strip_schema(filepath_or_buffer))
pandas.io.s3._strip_schema(url)
pandas.io.s3.get_filepath_or_buffer(filepath_or_buffer,encoding=None,compression=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/api.py----------------------------------------
pandas.Term(*args,**kwargs)
pandas.io.api.Term(*args,**kwargs)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/html.py----------------------------------------
A:pandas.io.html._RE_WHITESPACE->re.compile('[\\r\\n]+|\\s{2,}')
A:pandas.io.html.text->obj.read()
A:pandas.io.html.tables->parser(io, compiled_match, attrs, encoding).parse_tables()
A:pandas.io.html.header->kwargs.pop('header')
A:pandas.io.html.body->self._parse_raw_tbody(table)
A:pandas.io.html.footer->self._parse_raw_tfoot(table)
A:pandas.io.html.thead->table.xpath(expr)
A:pandas.io.html.trs->self._parse_tr(thead[0])
A:pandas.io.html.cols->lmap(self._text_getter, self._parse_td(tr))
A:pandas.io.html.tfoot->self._parse_tfoot(table)
A:pandas.io.html.res->self._parse_tr(table)
A:pandas.io.html.tbody->self._parse_tbody(table)
A:pandas.io.html.self._strainer->SoupStrainer('table')
A:pandas.io.html.unique_tables->set()
A:pandas.io.html.raw_text->_read(self.io)
A:pandas.io.html.attrs['class']->attrs.pop('class_')
A:pandas.io.html.parser->_parser_dispatch(flav)
A:pandas.io.html.r->r.getroot().getroot()
A:pandas.io.html.lens->Series(lmap(len, body))
A:pandas.io.html.lens_max->Series(lmap(len, body)).max()
A:pandas.io.html.(head, body, foot)->kwargs.pop('data')
A:pandas.io.html.kwargs['skiprows']->_get_skiprows(kwargs['skiprows'])
A:pandas.io.html.rows->lrange(len(head))
A:pandas.io.html.tp->TextParser(body, header=header, **kwargs)
A:pandas.io.html.df->TextParser(body, header=header, **kwargs).read()
A:pandas.io.html.valid_parsers->list(_valid_parsers.keys())
A:pandas.io.html.flavor->_validate_flavor(flavor)
A:pandas.io.html.valid_flavors->set(_valid_parsers)
A:pandas.io.html.flavor_set->set(flavor)
A:pandas.io.html.compiled_match->re.compile(match)
A:pandas.io.html.p->parser(io, compiled_match, attrs, encoding)
pandas.io.html._BeautifulSoupHtml5LibFrameParser(self,*args,**kwargs)
pandas.io.html._BeautifulSoupHtml5LibFrameParser.__init__(self,*args,**kwargs)
pandas.io.html._BeautifulSoupHtml5LibFrameParser._build_doc(self)
pandas.io.html._BeautifulSoupHtml5LibFrameParser._parse_tables(self,doc,match,attrs)
pandas.io.html._BeautifulSoupHtml5LibFrameParser._parse_tbody(self,table)
pandas.io.html._BeautifulSoupHtml5LibFrameParser._parse_td(self,row)
pandas.io.html._BeautifulSoupHtml5LibFrameParser._parse_tfoot(self,table)
pandas.io.html._BeautifulSoupHtml5LibFrameParser._parse_th(self,element)
pandas.io.html._BeautifulSoupHtml5LibFrameParser._parse_thead(self,table)
pandas.io.html._BeautifulSoupHtml5LibFrameParser._parse_tr(self,element)
pandas.io.html._BeautifulSoupHtml5LibFrameParser._setup_build_doc(self)
pandas.io.html._BeautifulSoupHtml5LibFrameParser._text_getter(self,obj)
pandas.io.html._HtmlFrameParser(self,io,match,attrs,encoding)
pandas.io.html._HtmlFrameParser.__init__(self,io,match,attrs,encoding)
pandas.io.html._HtmlFrameParser._build_doc(self)
pandas.io.html._HtmlFrameParser._build_table(self,table)
pandas.io.html._HtmlFrameParser._parse_raw_data(self,rows)
pandas.io.html._HtmlFrameParser._parse_raw_tbody(self,table)
pandas.io.html._HtmlFrameParser._parse_raw_tfoot(self,table)
pandas.io.html._HtmlFrameParser._parse_raw_thead(self,table)
pandas.io.html._HtmlFrameParser._parse_tables(self,doc,match,attrs)
pandas.io.html._HtmlFrameParser._parse_tbody(self,table)
pandas.io.html._HtmlFrameParser._parse_td(self,obj)
pandas.io.html._HtmlFrameParser._parse_tfoot(self,table)
pandas.io.html._HtmlFrameParser._parse_thead(self,table)
pandas.io.html._HtmlFrameParser._parse_tr(self,table)
pandas.io.html._HtmlFrameParser._text_getter(self,obj)
pandas.io.html._HtmlFrameParser.parse_tables(self)
pandas.io.html._LxmlFrameParser(self,*args,**kwargs)
pandas.io.html._LxmlFrameParser.__init__(self,*args,**kwargs)
pandas.io.html._LxmlFrameParser._build_doc(self)
pandas.io.html._LxmlFrameParser._parse_raw_tfoot(self,table)
pandas.io.html._LxmlFrameParser._parse_raw_thead(self,table)
pandas.io.html._LxmlFrameParser._parse_tables(self,doc,match,kwargs)
pandas.io.html._LxmlFrameParser._parse_tbody(self,table)
pandas.io.html._LxmlFrameParser._parse_td(self,row)
pandas.io.html._LxmlFrameParser._parse_tfoot(self,table)
pandas.io.html._LxmlFrameParser._parse_thead(self,table)
pandas.io.html._LxmlFrameParser._parse_tr(self,table)
pandas.io.html._LxmlFrameParser._text_getter(self,obj)
pandas.io.html._build_xpath_expr(attrs)
pandas.io.html._data_to_frame(**kwargs)
pandas.io.html._expand_elements(body)
pandas.io.html._get_skiprows(skiprows)
pandas.io.html._importers()
pandas.io.html._parse(flavor,io,match,attrs,encoding,**kwargs)
pandas.io.html._parser_dispatch(flavor)
pandas.io.html._print_as_set(s)
pandas.io.html._read(obj)
pandas.io.html._remove_whitespace(s,regex=_RE_WHITESPACE)
pandas.io.html._validate_flavor(flavor)
pandas.io.html.read_html(io,match='.+',flavor=None,header=None,index_col=None,skiprows=None,attrs=None,parse_dates=False,tupleize_cols=False,thousands=',',encoding=None,decimal='.',converters=None,na_values=None,keep_default_na=True)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/parsers.py----------------------------------------
A:pandas.io.parsers._BOM->u('\ufeff')
A:pandas.io.parsers.msg->str(e)
A:pandas.io.parsers.val->int(val)
A:pandas.io.parsers.encoding->re.sub('_', '-', encoding).lower()
A:pandas.io.parsers.compression->_infer_compression(filepath_or_buffer, compression)
A:pandas.io.parsers.(filepath_or_buffer, _, compression)->get_filepath_or_buffer(filepath_or_buffer, encoding, compression)
A:pandas.io.parsers.iterator->kwds.copy().get('iterator', False)
A:pandas.io.parsers.chunksize->_validate_integer('chunksize', kwds.get('chunksize', None), 1)
A:pandas.io.parsers.nrows->_validate_integer('nrows', kwds.get('nrows', None))
A:pandas.io.parsers.parser->TextFileReader(filepath_or_buffer, **kwds)
A:pandas.io.parsers.data->dict(((k, v) for (k, v) in zip(names, alldata)))
A:pandas.io.parsers._c_unsupported->set(['skipfooter'])
A:pandas.io.parsers._python_unsupported->set(['low_memory', 'buffer_lines', 'float_precision'])
A:pandas.io.parsers._deprecated_args->set(['as_recarray', 'buffer_lines', 'compact_ints', 'use_unsigned'])
A:pandas.io.parsers.kwds->kwds.copy().copy()
A:pandas.io.parsers.read_csv->Appender(_read_csv_doc)(read_csv)
A:pandas.io.parsers.read_table->Appender(_read_table_doc)(read_table)
A:pandas.io.parsers.self._engine_specified->kwds.copy().copy().get('engine_specified', engine_specified)
A:pandas.io.parsers.dialect->csv.get_dialect(dialect)
A:pandas.io.parsers.dialect_val->getattr(dialect, param)
A:pandas.io.parsers.provided->kwds.copy().copy().get(param, _parser_defaults[param])
A:pandas.io.parsers.options->self._get_options_with_defaults(engine)
A:pandas.io.parsers.self.chunksize->self._get_options_with_defaults(engine).pop('chunksize', None)
A:pandas.io.parsers.self.nrows->self._get_options_with_defaults(engine).pop('nrows', None)
A:pandas.io.parsers.self.squeeze->self._get_options_with_defaults(engine).pop('squeeze', False)
A:pandas.io.parsers.(self.options, self.engine)->self._clean_options(options, engine)
A:pandas.io.parsers.value->kwds.copy().copy().get(argname, default)
A:pandas.io.parsers.options[argname]->kwds.copy().copy().get(argname, default)
A:pandas.io.parsers.result->set()
A:pandas.io.parsers.fallback_reason->"the separator encoded in {encoding} is > 1 char long, and the 'c' engine does not support such separators".format(encoding=encoding)
A:pandas.io.parsers.keep_default_na->set().pop('keep_default_na')
A:pandas.io.parsers.(na_values, na_fvalues)->_clean_na_values(na_values, keep_default_na)
A:pandas.io.parsers.skiprows->set()
A:pandas.io.parsers.self._engine->klass(self.f, **self.options)
A:pandas.io.parsers.ret->self._remove_empty_lines([line])
A:pandas.io.parsers.(index, columns, col_dict)->_get_empty_meta(names, self.index_col, self.index_names, self.dtype)
A:pandas.io.parsers.new_rows->len(index)
A:pandas.io.parsers.index->pandas.core.index.MultiIndex.from_arrays(index, names=index_names)
A:pandas.io.parsers.df->DataFrame(col_dict, columns=columns, index=index)
A:pandas.io.parsers.size->min(size, self.nrows - self._currow)
A:pandas.io.parsers.usecols_dtype->pandas._libs.lib.infer_dtype(usecols)
A:pandas.io.parsers.self.names->lrange(self._reader.table_width)
A:pandas.io.parsers.self.prefix->kwds.copy().copy().pop('prefix', None)
A:pandas.io.parsers.self.index_col->lrange(implicit_first_cols)
A:pandas.io.parsers.self.parse_dates->_validate_parse_dates_arg(kwds.pop('parse_dates', False))
A:pandas.io.parsers.self.date_parser->kwds.copy().copy().pop('date_parser', None)
A:pandas.io.parsers.self.dayfirst->kwds.copy().copy().pop('dayfirst', False)
A:pandas.io.parsers.self.keep_date_col->kwds.copy().copy().pop('keep_date_col', False)
A:pandas.io.parsers.self.na_values->kwds.copy().copy().get('na_values')
A:pandas.io.parsers.self.na_fvalues->kwds.copy().copy().get('na_fvalues')
A:pandas.io.parsers.self.true_values->kwds.copy().copy().get('true_values')
A:pandas.io.parsers.self.false_values->kwds.copy().copy().get('false_values')
A:pandas.io.parsers.self.as_recarray->kwds.copy().copy().get('as_recarray', False)
A:pandas.io.parsers.self.tupleize_cols->kwds.copy().copy().get('tupleize_cols', False)
A:pandas.io.parsers.self.mangle_dupe_cols->kwds.copy().copy().get('mangle_dupe_cols', True)
A:pandas.io.parsers.self.infer_datetime_format->kwds.copy().copy().pop('infer_datetime_format', False)
A:pandas.io.parsers.self._date_conv->_make_date_converter(date_parser=self.date_parser, dayfirst=self.dayfirst, infer_datetime_format=self.infer_datetime_format)
A:pandas.io.parsers.self.header->kwds.copy().copy().get('header')
A:pandas.io.parsers.is_sequence->isinstance(self.index_col, (list, tuple, np.ndarray))
A:pandas.io.parsers.sic->set(ic)
A:pandas.io.parsers.index_names->header.pop(-1)
A:pandas.io.parsers.(index_names, names, index_col)->_clean_index_names(index_names, self.index_col)
A:pandas.io.parsers.field_count->len(header[0])
A:pandas.io.parsers.columns->list(columns)
A:pandas.io.parsers.names->self._maybe_dedup_names(self.orig_names)
A:pandas.io.parsers.cur_count->counts.get(col, 0)
A:pandas.io.parsers.(self.index_names, _, self.index_col)->_clean_index_names(list(columns), self.index_col)
A:pandas.io.parsers.i->ix(idx)
A:pandas.io.parsers.name->_get_name(idx)
A:pandas.io.parsers.arr->self._date_conv(arr)
A:pandas.io.parsers.(col_na_values, col_na_fvalues)->_get_na_values(c, na_values, na_fvalues)
A:pandas.io.parsers.(arr, _)->self._infer_types(arr, col_na_values | col_na_fvalues)
A:pandas.io.parsers.cast_type->dtypes.get(c, None)
A:pandas.io.parsers.values->self._date_conv(values)
A:pandas.io.parsers.mask->numpy.zeros(max_len + 1, dtype=int)
A:pandas.io.parsers.(cvals, na_count)->self._infer_types(values, set(col_na_values) | col_na_fvalues, try_num_bool)
A:pandas.io.parsers.cvals->pandas._libs.lib.downcast_int64(cvals, parsers.na_values, self.use_unsigned)
A:pandas.io.parsers.na_count->pandas._libs.lib.sanitize_objects(values, na_values, False)
A:pandas.io.parsers.(data, names)->_process_date_conversion(data, self._date_conv, self.parse_dates, self.index_col, self.index_names, names, keep_date_col=self.keep_date_col)
A:pandas.io.parsers.src->UTF8Recoder(src, kwds['encoding'])
A:pandas.io.parsers.self._reader->pandas._libs.parsers.TextReader(src, **kwds)
A:pandas.io.parsers.(self.usecols, self.usecols_dtype)->_validate_usecols_arg(self._reader.usecols)
A:pandas.io.parsers.(self.names, self.index_names, self.col_names, passed_names)->self._extract_multi_indexer_columns(self._reader.header, self.index_names, self.col_names, passed_names)
A:pandas.io.parsers.usecols->_evaluate_usecols(self.usecols, names)
A:pandas.io.parsers.(index_names, self.names, self.index_col)->_clean_index_names(self.names, self.index_col)
A:pandas.io.parsers.x->self._maybe_dedup_names(self.orig_names).index(x)
A:pandas.io.parsers.col_dict->dict(((col_name, Series([], dtype=dtype[col_name])) for col_name in columns))
A:pandas.io.parsers.(names, data)->self._do_date_conversions(names, data)
A:pandas.io.parsers.(index, names)->self._make_index(data, alldata, names)
A:pandas.io.parsers.(idx_names, names, self.index_col)->_clean_index_names(names, self.index_col)
A:pandas.io.parsers.self.skipfooter->_validate_skipfooter_arg(kwds['skipfooter'])
A:pandas.io.parsers.self.quotechar->str(self.quotechar)
A:pandas.io.parsers.(self.usecols, _)->_validate_usecols_arg(kwds['usecols'])
A:pandas.io.parsers.(f, handles)->_get_handle(f, 'r', encoding=self.encoding, compression=self.compression, memory_map=self.memory_map)
A:pandas.io.parsers.(self.columns, self.num_original_columns)->self._infer_columns()
A:pandas.io.parsers.(self.columns, self.index_names, self.col_names, _)->self._extract_multi_indexer_columns(self.columns, self.index_names, self.col_names)
A:pandas.io.parsers.self.num_original_columns->len(columns)
A:pandas.io.parsers.self.orig_names->list(self.columns)
A:pandas.io.parsers.(index_names, self.orig_names, self.columns)->self._get_index_name(self.columns)
A:pandas.io.parsers.self._no_thousands_columns->self._set_no_thousands_columns()
A:pandas.io.parsers.self.nonnum->re.compile('[^-^0-9^%s^%s]+' % (self.thousands, self.decimal))
A:pandas.io.parsers.noconvert_columns->set()
A:pandas.io.parsers.line->next(self.f)
A:pandas.io.parsers.sniffed->csv.Sniffer().sniff(line)
A:pandas.io.parsers.reader->_read()
A:pandas.io.parsers.pat->re.compile(sep)
A:pandas.io.parsers.content->self._get_lines(rows)
A:pandas.io.parsers.count_empty_content_vals->count_empty_vals(content[0])
A:pandas.io.parsers.alldata->self._rows_to_cols(content)
A:pandas.io.parsers.(columns, data)->self._do_date_conversions(columns, data)
A:pandas.io.parsers.(index, columns)->self._make_index(data, alldata, columns, indexnamerow)
A:pandas.io.parsers.clean_conv->_clean_mapping(self.converters)
A:pandas.io.parsers.clean_dtypes->_clean_mapping(self.dtype)
A:pandas.io.parsers.o->pandas.compat.OrderedDict()
A:pandas.io.parsers.tuples->lzip(*o.values())
A:pandas.io.parsers.lc->len(this_columns)
A:pandas.io.parsers.num_original_columns->len(names)
A:pandas.io.parsers.ncols->len(line)
A:pandas.io.parsers.col_indices->_evaluate_usecols(self.usecols, usecols_key)
A:pandas.io.parsers.first_elt->u(first_elt)
A:pandas.io.parsers.orig_line->self._next_iter_line(row_num=self.pos + 1)
A:pandas.io.parsers.base->'Skipping line {row_num}: '.format(row_num=row_num)
A:pandas.io.parsers.orig_names->list(columns)
A:pandas.io.parsers.next_line->self._next_line()
A:pandas.io.parsers.(index_name, columns_, self.index_col)->_clean_index_names(columns, self.index_col)
A:pandas.io.parsers.max_len->max(map(len, rows))
A:pandas.io.parsers.iter_content->enumerate(content)
A:pandas.io.parsers.content_len->len(content)
A:pandas.io.parsers.actual_len->len(l)
A:pandas.io.parsers.zipped_content->list(lib.to_object_array(content, min_width=col_len).T)
A:pandas.io.parsers.new_pos->len(self.data)
A:pandas.io.parsers.new_row->self._next_iter_line(row_num=self.pos + rows + 1)
A:pandas.io.parsers.lines->self._check_thousands(lines)
A:pandas.io.parsers.strs->_concat_date_cols(date_cols)
A:pandas.io.parsers.date_cols->set()
A:pandas.io.parsers.data_dict[colspec]->converter(data_dict[colspec])
A:pandas.io.parsers.(new_name, col, old_names)->_try_convert_dates(converter, colspec, data_dict, orig_names)
A:pandas.io.parsers.(_, col, old_names)->_try_convert_dates(converter, colspec, data_dict, orig_names)
A:pandas.io.parsers.colset->set(columns)
A:pandas.io.parsers.new_name->'_'.join([str(x) for x in colnames])
A:pandas.io.parsers.new_col->parser(*to_parse)
A:pandas.io.parsers.na_values->_stringify_na_values(na_values)
A:pandas.io.parsers.na_fvalues->_floatify_na_values(na_values)
A:pandas.io.parsers.cp_cols->list(columns)
A:pandas.io.parsers.index_col->list(index_col)
A:pandas.io.parsers.dtype->defaultdict(lambda : np.object)
A:pandas.io.parsers._dtype->defaultdict(lambda : np.object).copy()
A:pandas.io.parsers.v->int(v)
A:pandas.io.parsers.rs->numpy.array([' '.join([compat.text_type(y) for y in x]) for x in zip(*date_cols)], dtype=object)
A:pandas.io.parsers.self.colspecs->kwds.copy().copy().pop('colspecs')
A:pandas.io.parsers.self.buffer->iter(buffer_rows)
A:pandas.io.parsers.delimiters->''.join(['\\%s' % x for x in self.delimiter])
A:pandas.io.parsers.pattern->re.compile('([^%s]+)' % delimiters)
A:pandas.io.parsers.rows->self.get_rows(n, skiprows)
A:pandas.io.parsers.shifted->numpy.roll(mask, 1)
A:pandas.io.parsers.edge_pairs->list(zip(edges[::2], edges[1::2]))
A:pandas.io.parsers.self.data->FixedWidthReader(f, self.colspecs, self.delimiter, self.comment, self.skiprows)
pandas.io.parsers.CParserWrapper(self,src,**kwds)
pandas.io.parsers.CParserWrapper.__init__(self,src,**kwds)
pandas.io.parsers.CParserWrapper._filter_usecols(self,names)
pandas.io.parsers.CParserWrapper._get_index_names(self)
pandas.io.parsers.CParserWrapper._maybe_parse_dates(self,values,index,try_parse_dates=True)
pandas.io.parsers.CParserWrapper._set_noconvert_columns(self)
pandas.io.parsers.CParserWrapper.close(self)
pandas.io.parsers.CParserWrapper.read(self,nrows=None)
pandas.io.parsers.CParserWrapper.set_error_bad_lines(self,status)
pandas.io.parsers.FixedWidthFieldParser(self,f,**kwds)
pandas.io.parsers.FixedWidthFieldParser.__init__(self,f,**kwds)
pandas.io.parsers.FixedWidthFieldParser._make_reader(self,f)
pandas.io.parsers.FixedWidthReader(self,f,colspecs,delimiter,comment,skiprows=None)
pandas.io.parsers.FixedWidthReader.__init__(self,f,colspecs,delimiter,comment,skiprows=None)
pandas.io.parsers.FixedWidthReader.__next__(self)
pandas.io.parsers.FixedWidthReader.detect_colspecs(self,n=100,skiprows=None)
pandas.io.parsers.FixedWidthReader.get_rows(self,n,skiprows=None)
pandas.io.parsers.ParserBase(self,kwds)
pandas.io.parsers.ParserBase.__init__(self,kwds)
pandas.io.parsers.ParserBase._agg_index(self,index,try_parse_dates=True)
pandas.io.parsers.ParserBase._cast_types(self,values,cast_type,column)
pandas.io.parsers.ParserBase._convert_to_ndarrays(self,dct,na_values,na_fvalues,verbose=False,converters=None,dtypes=None)
pandas.io.parsers.ParserBase._do_date_conversions(self,names,data)
pandas.io.parsers.ParserBase._extract_multi_indexer_columns(self,header,index_names,col_names,passed_names=False)
pandas.io.parsers.ParserBase._get_complex_date_index(self,data,col_names)
pandas.io.parsers.ParserBase._get_simple_index(self,data,columns)
pandas.io.parsers.ParserBase._has_complex_date_col(self)
pandas.io.parsers.ParserBase._infer_types(self,values,na_values,try_num_bool=True)
pandas.io.parsers.ParserBase._make_index(self,data,alldata,columns,indexnamerow=False)
pandas.io.parsers.ParserBase._maybe_dedup_names(self,names)
pandas.io.parsers.ParserBase._maybe_make_multi_index_columns(self,columns,col_names=None)
pandas.io.parsers.ParserBase._should_parse_dates(self,i)
pandas.io.parsers.ParserBase.close(self)
pandas.io.parsers.PythonParser(self,f,**kwds)
pandas.io.parsers.PythonParser.__init__(self,f,**kwds)
pandas.io.parsers.PythonParser._alert_malformed(self,msg,row_num)
pandas.io.parsers.PythonParser._buffered_line(self)
pandas.io.parsers.PythonParser._check_comments(self,lines)
pandas.io.parsers.PythonParser._check_decimal(self,lines)
pandas.io.parsers.PythonParser._check_for_bom(self,first_row)
pandas.io.parsers.PythonParser._check_thousands(self,lines)
pandas.io.parsers.PythonParser._clear_buffer(self)
pandas.io.parsers.PythonParser._convert_data(self,data)
pandas.io.parsers.PythonParser._exclude_implicit_index(self,alldata)
pandas.io.parsers.PythonParser._get_index_name(self,columns)
pandas.io.parsers.PythonParser._get_lines(self,rows=None)
pandas.io.parsers.PythonParser._handle_usecols(self,columns,usecols_key)
pandas.io.parsers.PythonParser._infer_columns(self)
pandas.io.parsers.PythonParser._is_line_empty(self,line)
pandas.io.parsers.PythonParser._make_reader(self,f)
pandas.io.parsers.PythonParser._next_iter_line(self,row_num)
pandas.io.parsers.PythonParser._next_line(self)
pandas.io.parsers.PythonParser._remove_empty_lines(self,lines)
pandas.io.parsers.PythonParser._rows_to_cols(self,content)
pandas.io.parsers.PythonParser._search_replace_num_columns(self,lines,search,replace)
pandas.io.parsers.PythonParser._set_no_thousands_columns(self)
pandas.io.parsers.PythonParser._to_recarray(self,data,columns)
pandas.io.parsers.PythonParser.get_chunk(self,size=None)
pandas.io.parsers.PythonParser.read(self,rows=None)
pandas.io.parsers.TextFileReader(self,f,engine=None,**kwds)
pandas.io.parsers.TextFileReader.__init__(self,f,engine=None,**kwds)
pandas.io.parsers.TextFileReader.__next__(self)
pandas.io.parsers.TextFileReader._clean_options(self,options,engine)
pandas.io.parsers.TextFileReader._create_index(self,ret)
pandas.io.parsers.TextFileReader._failover_to_python(self)
pandas.io.parsers.TextFileReader._get_options_with_defaults(self,engine)
pandas.io.parsers.TextFileReader._make_engine(self,engine='c')
pandas.io.parsers.TextFileReader.close(self)
pandas.io.parsers.TextFileReader.get_chunk(self,size=None)
pandas.io.parsers.TextFileReader.read(self,nrows=None)
pandas.io.parsers.TextParser(*args,**kwds)
pandas.io.parsers._clean_index_names(columns,index_col)
pandas.io.parsers._clean_na_values(na_values,keep_default_na=True)
pandas.io.parsers._concat_date_cols(date_cols)
pandas.io.parsers._evaluate_usecols(usecols,names)
pandas.io.parsers._floatify_na_values(na_values)
pandas.io.parsers._get_col_names(colspec,columns)
pandas.io.parsers._get_empty_meta(columns,index_col,index_names,dtype=None)
pandas.io.parsers._get_na_values(col,na_values,na_fvalues)
pandas.io.parsers._is_index_col(col)
pandas.io.parsers._make_date_converter(date_parser=None,dayfirst=False,infer_datetime_format=False)
pandas.io.parsers._make_parser_function(name,sep=',')
pandas.io.parsers._process_date_conversion(data_dict,converter,parse_spec,index_col,index_names,columns,keep_date_col=False)
pandas.io.parsers._read(filepath_or_buffer,kwds)
pandas.io.parsers._stringify_na_values(na_values)
pandas.io.parsers._try_convert_dates(parser,colspec,data_dict,columns)
pandas.io.parsers._validate_integer(name,val,min_val=0)
pandas.io.parsers._validate_parse_dates_arg(parse_dates)
pandas.io.parsers._validate_skipfooter_arg(skipfooter)
pandas.io.parsers._validate_usecols_arg(usecols)
pandas.io.parsers.count_empty_vals(vals)
pandas.io.parsers.read_fwf(filepath_or_buffer,colspecs='infer',widths=None,**kwds)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/json/normalize.py----------------------------------------
A:pandas.io.json.normalize.new_d->copy.deepcopy(d)
A:pandas.io.json.normalize.k->str(k)
A:pandas.io.json.normalize.v->copy.deepcopy(d).pop(k)
A:pandas.io.json.normalize.data->nested_to_record(data, sep=sep)
A:pandas.io.json.normalize.meta_vals->defaultdict(list)
A:pandas.io.json.normalize.sep->str(sep)
A:pandas.io.json.normalize.seen_meta[key]->_pull_field(obj, val[-1])
A:pandas.io.json.normalize.recs->_pull_field(obj, path[0])
A:pandas.io.json.normalize.meta_val->_pull_field(obj, val[level:])
A:pandas.io.json.normalize.result->DataFrame(records)
A:pandas.io.json.normalize.result[k]->numpy.array(v).repeat(lengths)
pandas.io.json.json_normalize(data,record_path=None,meta=None,meta_prefix=None,record_prefix=None,errors='raise',sep='.')
pandas.io.json.normalize._convert_to_line_delimits(s)
pandas.io.json.normalize.json_normalize(data,record_path=None,meta=None,meta_prefix=None,record_prefix=None,errors='raise',sep='.')
pandas.io.json.normalize.nested_to_record(ds,prefix='',sep='.',level=0)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/json/table_schema.py----------------------------------------
A:pandas.io.json.table_schema.data->set_default_names(data)
pandas.io.json.build_table_schema(data,index=True,primary_key=None,version=True)
pandas.io.json.table_schema.as_json_table_type(x)
pandas.io.json.table_schema.build_table_schema(data,index=True,primary_key=None,version=True)
pandas.io.json.table_schema.make_field(arr,dtype=None)
pandas.io.json.table_schema.set_default_names(data)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/json/json.py----------------------------------------
A:pandas.io.json.json.obj->SeriesParser(json, orient, dtype, convert_axes, convert_dates, keep_default_dates, numpy, precise_float, date_unit).parse()
A:pandas.io.json.json.s->_convert_to_line_delimits(s)
A:pandas.io.json.json.self.schema->build_table_schema(obj)
A:pandas.io.json.json.obj[timedeltas]->obj[timedeltas].applymap(lambda x: x.isoformat()).applymap(lambda x: x.isoformat())
A:pandas.io.json.json.obj.index->SeriesParser(json, orient, dtype, convert_axes, convert_dates, keep_default_dates, numpy, precise_float, date_unit).parse().index.to_timestamp()
A:pandas.io.json.json.self.obj->DataFrame(loads(json, precise_float=self.precise_float), dtype=None)
A:pandas.io.json.json.data->data.astype('int64').astype('int64')
A:pandas.io.json.json.serialized->'{{"schema": {}, "data": {}}}'.format(dumps(self.schema), data)
A:pandas.io.json.json.(filepath_or_buffer, _, _)->get_filepath_or_buffer(path_or_buf, encoding=encoding)
A:pandas.io.json.json.exists->os.path.exists(filepath_or_buffer)
A:pandas.io.json.json.(fh, handles)->_get_handle(filepath_or_buffer, 'r', encoding=encoding)
A:pandas.io.json.json.json->filepath_or_buffer.read()
A:pandas.io.json.json.lines->list(StringIO(json.strip()))
A:pandas.io.json.json.dtype->numpy.dtype(dtype)
A:pandas.io.json.json.date_unit->date_unit.lower().lower()
A:pandas.io.json.json.bad_keys->', '.join(bad_keys)
A:pandas.io.json.json.(new_axis, result)->self._try_convert_data(axis, self.obj._get_axis(axis), use_dtypes=False, convert_dates=True)
A:pandas.io.json.json.(new_data, result)->f(col, c)
A:pandas.io.json.json.new_data->to_datetime(new_data, errors='raise', unit=date_unit)
A:pandas.io.json.json.decoded->dict(((str(k), v) for (k, v) in compat.iteritems(loads(json, precise_float=self.precise_float))))
A:pandas.io.json.json.(obj, result)->self._try_convert_data('data', self.obj, convert_dates=self.convert_dates)
A:pandas.io.json.json.args->loads(json, dtype=None, numpy=True, labelled=True, precise_float=self.precise_float)
A:pandas.io.json.json.new_obj->DataFrame(new_obj, index=self.obj.index)
A:pandas.io.json.json.convert_dates->set(convert_dates)
A:pandas.io.json.json.col_lower->col.lower()
pandas.io.json.json.FrameParser(Parser)
pandas.io.json.json.FrameParser._parse_no_numpy(self)
pandas.io.json.json.FrameParser._parse_numpy(self)
pandas.io.json.json.FrameParser._process_converter(self,f,filt=None)
pandas.io.json.json.FrameParser._try_convert_dates(self)
pandas.io.json.json.FrameParser._try_convert_types(self)
pandas.io.json.json.FrameWriter(Writer)
pandas.io.json.json.FrameWriter._format_axes(self)
pandas.io.json.json.JSONTableWriter(self,obj,orient,date_format,double_precision,ensure_ascii,date_unit,default_handler=None)
pandas.io.json.json.JSONTableWriter.__init__(self,obj,orient,date_format,double_precision,ensure_ascii,date_unit,default_handler=None)
pandas.io.json.json.JSONTableWriter.write(self)
pandas.io.json.json.Parser(self,json,orient,dtype=True,convert_axes=True,convert_dates=True,keep_default_dates=False,numpy=False,precise_float=False,date_unit=None)
pandas.io.json.json.Parser.__init__(self,json,orient,dtype=True,convert_axes=True,convert_dates=True,keep_default_dates=False,numpy=False,precise_float=False,date_unit=None)
pandas.io.json.json.Parser._convert_axes(self)
pandas.io.json.json.Parser._try_convert_data(self,name,data,use_dtypes=True,convert_dates=True)
pandas.io.json.json.Parser._try_convert_dates(self)
pandas.io.json.json.Parser._try_convert_to_date(self,data)
pandas.io.json.json.Parser._try_convert_types(self)
pandas.io.json.json.Parser.check_keys_split(self,decoded)
pandas.io.json.json.Parser.parse(self)
pandas.io.json.json.SeriesParser(Parser)
pandas.io.json.json.SeriesParser._parse_no_numpy(self)
pandas.io.json.json.SeriesParser._parse_numpy(self)
pandas.io.json.json.SeriesParser._try_convert_types(self)
pandas.io.json.json.SeriesWriter(Writer)
pandas.io.json.json.SeriesWriter._format_axes(self)
pandas.io.json.json.Writer(self,obj,orient,date_format,double_precision,ensure_ascii,date_unit,default_handler=None)
pandas.io.json.json.Writer.__init__(self,obj,orient,date_format,double_precision,ensure_ascii,date_unit,default_handler=None)
pandas.io.json.json.Writer._format_axes(self)
pandas.io.json.json.Writer.write(self)
pandas.io.json.json.read_json(path_or_buf=None,orient=None,typ='frame',dtype=True,convert_axes=True,convert_dates=True,keep_default_dates=True,numpy=False,precise_float=False,date_unit=None,encoding=None,lines=False)
pandas.io.json.json.to_json(path_or_buf,obj,orient=None,date_format='epoch',double_precision=10,force_ascii=True,date_unit='ms',default_handler=None,lines=False)
pandas.io.json.read_json(path_or_buf=None,orient=None,typ='frame',dtype=True,convert_axes=True,convert_dates=True,keep_default_dates=True,numpy=False,precise_float=False,date_unit=None,encoding=None,lines=False)
pandas.io.json.to_json(path_or_buf,obj,orient=None,date_format='epoch',double_precision=10,force_ascii=True,date_unit='ms',default_handler=None,lines=False)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/json/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/clipboard/clipboard.py----------------------------------------
A:pandas.io.clipboard.clipboard.encoding->kwargs.pop('encoding', 'utf-8')
A:pandas.io.clipboard.clipboard.text->text.decode('utf-8').decode('utf-8')
A:pandas.io.clipboard.clipboard.counts->set([x.lstrip().count('\t') for x in lines])
A:pandas.io.clipboard.clipboard.buf->StringIO()
A:pandas.io.clipboard.clipboard.objstr->str(obj)
pandas.io.clipboard.clipboard.read_clipboard(sep='\\s+',**kwargs)
pandas.io.clipboard.clipboard.to_clipboard(obj,excel=None,sep=None,**kwargs)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/clipboard/windows.py----------------------------------------
A:pandas.io.clipboard.windows.ret->self.f(*args)
A:pandas.io.clipboard.windows.safeCreateWindowExA->CheckedCall(windll.user32.CreateWindowExA)
A:pandas.io.clipboard.windows.safeDestroyWindow->CheckedCall(windll.user32.DestroyWindow)
A:pandas.io.clipboard.windows.safeCloseClipboard->CheckedCall(windll.user32.CloseClipboard)
A:pandas.io.clipboard.windows.safeEmptyClipboard->CheckedCall(windll.user32.EmptyClipboard)
A:pandas.io.clipboard.windows.safeGetClipboardData->CheckedCall(windll.user32.GetClipboardData)
A:pandas.io.clipboard.windows.safeSetClipboardData->CheckedCall(windll.user32.SetClipboardData)
A:pandas.io.clipboard.windows.safeGlobalAlloc->CheckedCall(windll.kernel32.GlobalAlloc)
A:pandas.io.clipboard.windows.safeGlobalLock->CheckedCall(windll.kernel32.GlobalLock)
A:pandas.io.clipboard.windows.safeGlobalUnlock->CheckedCall(windll.kernel32.GlobalUnlock)
A:pandas.io.clipboard.windows.hwnd->safeCreateWindowExA(0, b'STATIC', None, 0, 0, 0, 0, 0, None, None, None, None)
A:pandas.io.clipboard.windows.success->OpenClipboard(hwnd)
A:pandas.io.clipboard.windows.handle->safeGetClipboardData(CF_UNICODETEXT)
A:pandas.io.clipboard.windows.locked_handle->safeGlobalLock(handle)
pandas.io.clipboard.init_windows_clipboard()
pandas.io.clipboard.windows.CheckedCall(self,f)
pandas.io.clipboard.windows.CheckedCall.__init__(self,f)
pandas.io.clipboard.windows.CheckedCall.__setattr__(self,key,value)
pandas.io.clipboard.windows.init_windows_clipboard()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/clipboard/clipboards.py----------------------------------------
A:pandas.io.clipboard.clipboards.p->subprocess.Popen(['qdbus', 'org.kde.klipper', '/klipper', 'getClipboardContents'], stdout=subprocess.PIPE, close_fds=True)
A:pandas.io.clipboard.clipboards.(stdout, stderr)->subprocess.Popen(['qdbus', 'org.kde.klipper', '/klipper', 'getClipboardContents'], stdout=subprocess.PIPE, close_fds=True).communicate()
A:pandas.io.clipboard.clipboards.cb->app.clipboard()
A:pandas.io.clipboard.clipboards.clipboardContents->stdout.decode('utf-8')
pandas.io.clipboard.clipboards.init_gtk_clipboard()
pandas.io.clipboard.clipboards.init_klipper_clipboard()
pandas.io.clipboard.clipboards.init_no_clipboard()
pandas.io.clipboard.clipboards.init_osx_clipboard()
pandas.io.clipboard.clipboards.init_qt_clipboard()
pandas.io.clipboard.clipboards.init_xclip_clipboard()
pandas.io.clipboard.clipboards.init_xsel_clipboard()
pandas.io.clipboard.init_gtk_clipboard()
pandas.io.clipboard.init_klipper_clipboard()
pandas.io.clipboard.init_no_clipboard()
pandas.io.clipboard.init_osx_clipboard()
pandas.io.clipboard.init_qt_clipboard()
pandas.io.clipboard.init_xclip_clipboard()
pandas.io.clipboard.init_xsel_clipboard()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/clipboard/exceptions.py----------------------------------------
pandas.io.clipboard.exceptions.PyperclipException(RuntimeError)
pandas.io.clipboard.exceptions.PyperclipWindowsException(self,message)
pandas.io.clipboard.exceptions.PyperclipWindowsException.__init__(self,message)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/clipboard/__init__.py----------------------------------------
A:pandas.io.clipboard.__init__.HAS_DISPLAY->os.getenv('DISPLAY', False)
A:pandas.io.clipboard.__init__.(copy, paste)->determine_clipboard()
pandas.io.clipboard.__init__._executable_exists(name)
pandas.io.clipboard.__init__.determine_clipboard()
pandas.io.clipboard.__init__.set_clipboard(clipboard)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/formats/excel.py----------------------------------------
A:pandas.io.formats.excel.inherited->self.compute_css(inherited, self.compute_css.INITIAL_STYLE)
A:pandas.io.formats.excel.compute_css->CSSResolver()
A:pandas.io.formats.excel.properties->self.compute_css(declarations_str, self.inherited)
A:pandas.io.formats.excel.width->float(width[:-2])
A:pandas.io.formats.excel.fill_color->props.get('background-color')
A:pandas.io.formats.excel.size->float(size[:-2])
A:pandas.io.formats.excel.font_names_tmp->re.findall('(?x)\n            (\n            "(?:[^"]|\\\\")+"\n            |\n            \'(?:[^\']|\\\\\')+\'\n            |\n            [^\'",]+\n            )(?=,|\\s*$)\n        ', props.get('font-family', ''))
A:pandas.io.formats.excel.name->name.strip().strip()
A:pandas.io.formats.excel.decoration->decoration.split().split()
A:pandas.io.formats.excel.style_converter->CSSToExcelConverter()
A:pandas.io.formats.excel.val->float(self.float_format % val)
A:pandas.io.formats.excel.has_aliases->isinstance(self.header, (tuple, list, np.ndarray, Index))
A:pandas.io.formats.excel.level_strs->self.df.index.format(sparsify=True, adjoin=False, names=False)
A:pandas.io.formats.excel.level_lengths->get_level_lengths(level_strs)
A:pandas.io.formats.excel.values->levels.take(labels, allow_fill=levels._can_hold_na, fill_value=True)
A:pandas.io.formats.excel.v->'.'.join(map(pprint_thing, values))
A:pandas.io.formats.excel.coloffset->len(self.df.index[0])
A:pandas.io.formats.excel.gen->self._format_header_regular()
A:pandas.io.formats.excel.index_values->self.df.index.to_timestamp()
A:pandas.io.formats.excel.xlstyle->self.style_converter(';'.join(styles[i, colidx]))
A:pandas.io.formats.excel.cell.val->self._format_value(cell.val)
A:pandas.io.formats.excel.writer->ExcelWriter(writer, engine=engine)
A:pandas.io.formats.excel.formatted_cells->self.get_formatted_cells()
pandas.io.formats.excel.CSSToExcelConverter(self,inherited=None)
pandas.io.formats.excel.CSSToExcelConverter.__init__(self,inherited=None)
pandas.io.formats.excel.CSSToExcelConverter._border_style(self,style,width)
pandas.io.formats.excel.CSSToExcelConverter.build_alignment(self,props)
pandas.io.formats.excel.CSSToExcelConverter.build_border(self,props)
pandas.io.formats.excel.CSSToExcelConverter.build_fill(self,props)
pandas.io.formats.excel.CSSToExcelConverter.build_font(self,props)
pandas.io.formats.excel.CSSToExcelConverter.build_xlstyle(self,props)
pandas.io.formats.excel.CSSToExcelConverter.color_to_excel(self,val)
pandas.io.formats.excel.ExcelCell(self,row,col,val,style=None,mergestart=None,mergeend=None)
pandas.io.formats.excel.ExcelCell.__init__(self,row,col,val,style=None,mergestart=None,mergeend=None)
pandas.io.formats.excel.ExcelFormatter(self,df,na_rep='',float_format=None,cols=None,header=True,index=True,index_label=None,merge_cells=False,inf_rep='inf',style_converter=None)
pandas.io.formats.excel.ExcelFormatter.__init__(self,df,na_rep='',float_format=None,cols=None,header=True,index=True,index_label=None,merge_cells=False,inf_rep='inf',style_converter=None)
pandas.io.formats.excel.ExcelFormatter._format_body(self)
pandas.io.formats.excel.ExcelFormatter._format_header(self)
pandas.io.formats.excel.ExcelFormatter._format_header_mi(self)
pandas.io.formats.excel.ExcelFormatter._format_header_regular(self)
pandas.io.formats.excel.ExcelFormatter._format_hierarchical_rows(self)
pandas.io.formats.excel.ExcelFormatter._format_regular_rows(self)
pandas.io.formats.excel.ExcelFormatter._format_value(self,val)
pandas.io.formats.excel.ExcelFormatter._generate_body(self,coloffset)
pandas.io.formats.excel.ExcelFormatter.get_formatted_cells(self)
pandas.io.formats.excel.ExcelFormatter.write(self,writer,sheet_name='Sheet1',startrow=0,startcol=0,freeze_panes=None,engine=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/formats/console.py----------------------------------------
A:pandas.io.formats.console.encoding->sys.getdefaultencoding()
A:pandas.io.formats.console._initial_defencoding->sys.getdefaultencoding()
A:pandas.io.formats.console.display_width->get_option('display.width')
A:pandas.io.formats.console.display_height->get_option('display.height', silent=True)
A:pandas.io.formats.console.terminal_width->get_default_val('display.width')
A:pandas.io.formats.console.terminal_height->get_default_val('display.height')
A:pandas.io.formats.console.(terminal_width, terminal_height)->get_terminal_size()
pandas.io.formats.console.detect_console_encoding()
pandas.io.formats.console.get_console_size()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/formats/common.py----------------------------------------
pandas.io.formats.common.get_level_lengths(levels,sentinel='')


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/formats/css.py----------------------------------------
A:pandas.io.formats.css.props->dict(self.atomize(self.parse(declarations_str)))
A:pandas.io.formats.css.val->val.strip().lower().strip().lower()
A:pandas.io.formats.css.em_pt->float(em_pt[:-2])
A:pandas.io.formats.css.props['font-size']->self.size_to_pt(props['font-size'], em_pt, conversions=self.FONT_SIZE_RATIOS)
A:pandas.io.formats.css.font_size->float(props['font-size'][:-2])
A:pandas.io.formats.css.props[prop]->self.size_to_pt(props[prop], em_pt=font_size, conversions=self.MARGIN_RATIOS)
A:pandas.io.formats.css.FONT_SIZE_RATIOS->UNIT_RATIOS.copy()
A:pandas.io.formats.css.MARGIN_RATIOS->UNIT_RATIOS.copy()
A:pandas.io.formats.css.BORDER_WIDTH_RATIOS->UNIT_RATIOS.copy()
A:pandas.io.formats.css.(val, unit)->re.match('^(\\S*?)([a-zA-Z%!].*)', in_val).groups()
A:pandas.io.formats.css.expand->getattr(self, attr)
A:pandas.io.formats.css.tokens->value.split()
A:pandas.io.formats.css.expand_border_color->_side_expander('border-%s-color')
A:pandas.io.formats.css.expand_border_style->_side_expander('border-%s-style')
A:pandas.io.formats.css.expand_border_width->_side_expander('border-%s-width')
A:pandas.io.formats.css.expand_margin->_side_expander('margin-%s')
A:pandas.io.formats.css.expand_padding->_side_expander('padding-%s')
A:pandas.io.formats.css.(prop, sep, val)->decl.partition(':')
A:pandas.io.formats.css.prop->prop.strip().lower().strip().lower()
pandas.io.formats.css.CSSResolver(self,declarations_str,inherited=None)
pandas.io.formats.css.CSSResolver.__call__(self,declarations_str,inherited=None)
pandas.io.formats.css.CSSResolver._side_expander(prop_fmt)
pandas.io.formats.css.CSSResolver.atomize(self,declarations)
pandas.io.formats.css.CSSResolver.parse(self,declarations_str)
pandas.io.formats.css.CSSResolver.size_to_pt(self,in_val,em_pt=None,conversions=UNIT_RATIOS)
pandas.io.formats.css.CSSWarning(UserWarning)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/formats/terminal.py----------------------------------------
A:pandas.io.formats.terminal.current_os->platform.system()
A:pandas.io.formats.terminal.tuple_xy->_get_terminal_size_linux()
A:pandas.io.formats.terminal.h->ctypes.windll.kernel32.GetStdHandle(-12)
A:pandas.io.formats.terminal.csbi->create_string_buffer(22)
A:pandas.io.formats.terminal.res->ctypes.windll.kernel32.GetConsoleScreenBufferInfo(h, csbi)
A:pandas.io.formats.terminal.(bufx, bufy, curx, cury, wattr, left, top, right, bottom, maxx, maxy)->struct.unpack('hhhhHhhhhhh', csbi.raw)
A:pandas.io.formats.terminal.proc->subprocess.Popen(['tput', 'lines'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
A:pandas.io.formats.terminal.output->subprocess.Popen(['tput', 'lines'], stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate(input=None)
A:pandas.io.formats.terminal.cols->int(output[0])
A:pandas.io.formats.terminal.rows->int(output[0])
A:pandas.io.formats.terminal.cr->ioctl_GWINSZ(fd)
A:pandas.io.formats.terminal.fd->os.open(os.ctermid(), os.O_RDONLY)
A:pandas.io.formats.terminal.(sizex, sizey)->get_terminal_size()
pandas.io.formats.terminal._get_terminal_size_linux()
pandas.io.formats.terminal._get_terminal_size_tput()
pandas.io.formats.terminal._get_terminal_size_windows()
pandas.io.formats.terminal.get_terminal_size()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/formats/format.py----------------------------------------
A:pandas.io.formats.format.level_info->self.tr_series._values._repr_categories_info()
A:pandas.io.formats.format.fmt_values->numpy.array([formatter(x) for x in self.values])
A:pandas.io.formats.format.result->_get_adjustment().justify(strings, max_len, mode=justify)
A:pandas.io.formats.format.footer->self._get_footer()
A:pandas.io.formats.format.float_format->get_option('display.float_format')
A:pandas.io.formats.format.self.adj->_get_adjustment()
A:pandas.io.formats.format.series->concat((series.iloc[:row_num], series.iloc[-row_num:]))
A:pandas.io.formats.format.series_name->pprint_thing(name, escape_chars=('\t', '\r', '\n'))
A:pandas.io.formats.format.name->any(self.frame.index.names)
A:pandas.io.formats.format.is_multi->isinstance(index, MultiIndex)
A:pandas.io.formats.format.have_header->any((name for name in index.names))
A:pandas.io.formats.format.fmt_index->index.format(sparsify=self.sparsify, adjoin=False, names=show_index_names, formatter=fmt)
A:pandas.io.formats.format.(fmt_index, have_header)->self._get_formatted_index()
A:pandas.io.formats.format.width->self.adj.len(fmt_values[row_num - 1])
A:pandas.io.formats.format.self.encoding->get_option('display.encoding')
A:pandas.io.formats.format.use_east_asian_width->get_option('display.unicode.east_asian_width')
A:pandas.io.formats.format.sparsify->get_option('display.multi_sparse')
A:pandas.io.formats.format.self.max_rows_displayed->min(max_rows or len(self.frame), len(self.frame))
A:pandas.io.formats.format.self.justify->get_option('display.colheader_justify')
A:pandas.io.formats.format.self.columns->_ensure_index(columns)
A:pandas.io.formats.format.(w, h)->get_terminal_size()
A:pandas.io.formats.format.col_num->len(frame.columns)
A:pandas.io.formats.format.frame->concat((frame.iloc[:row_num, :], frame.iloc[-row_num:, :]))
A:pandas.io.formats.format.row_num->len(frame)
A:pandas.io.formats.format.str_index->self._get_formatted_index(frame)
A:pandas.io.formats.format.str_columns->_sparsify(str_columns)
A:pandas.io.formats.format.header_colwidth->max(self.col_space or 0, *(self.adj.len(x) for x in cheader))
A:pandas.io.formats.format.max_len->max(minimum, max_len)
A:pandas.io.formats.format.cheader->self.adj.justify(cheader, max_len, mode=self.justify)
A:pandas.io.formats.format.col_width->self.adj.len(strcols[self.tr_size_col][0])
A:pandas.io.formats.format.cwidth->self.adj.len(strcols[self.tr_size_col][0])
A:pandas.io.formats.format.strcols->self.fmt._to_str_columns()
A:pandas.io.formats.format.text->text.replace('\n ', '\n').strip().replace('\n ', '\n').strip()
A:pandas.io.formats.format.row_lens->Series(text).apply(len)
A:pandas.io.formats.format.max_len_col_ix->numpy.argmax(row_lens)
A:pandas.io.formats.format.size_tr_col->len(headers[self.tr_size_col])
A:pandas.io.formats.format.col_lens->col_lens.drop(mid_ix).drop(mid_ix)
A:pandas.io.formats.format.n_cols->len(col_lens)
A:pandas.io.formats.format.mid->int(round(n_cols / 2.0))
A:pandas.io.formats.format.idx->self.fmt._to_str_columns().pop(0)
A:pandas.io.formats.format.col_bins->_binify(col_widths, lwidth)
A:pandas.io.formats.format.nbins->len(col_bins)
A:pandas.io.formats.format.nrows->len(self.data_index)
A:pandas.io.formats.format.latex_renderer->LatexFormatter(self, column_format=column_format, longtable=longtable, multicolumn=multicolumn, multicolumn_format=multicolumn_format, multirow=multirow)
A:pandas.io.formats.format.formatter->self._value_formatter(float_format, threshold)
A:pandas.io.formats.format.html_renderer->HTMLFormatter(self, classes=classes, max_rows=self.max_rows, max_cols=self.max_cols, notebook=notebook, border=border)
A:pandas.io.formats.format.fmt_columns->columns.format()
A:pandas.io.formats.format.restrict_formatting->any([l.is_floating for l in columns.levels])
A:pandas.io.formats.format.need_leadsp->dict(zip(fmt_columns, map(is_numeric_dtype, dtypes)))
A:pandas.io.formats.format.fmt->self.fmt._get_formatter('__index__')
A:pandas.io.formats.format.adjoined->self.adj.adjoin(1, *fmt_index).split('\n')
A:pandas.io.formats.format.cname->any(self.frame.columns.names)
A:pandas.io.formats.format.lev2->lev.format()
A:pandas.io.formats.format.count->len(list(group))
A:pandas.io.formats.format.column_format->''.join(map(get_col_type, dtypes))
A:pandas.io.formats.format.strrows->list(zip(*strcols))
A:pandas.io.formats.format.crow->self._format_multirow(crow, ilevels, i, strrows)
A:pandas.io.formats.format.row2->list(row[:ilevels])
A:pandas.io.formats.format.row[j]->'\\multirow{{{0:d}}}{{*}}{{{1:s}}}'.format(nrow, row[j].strip())
A:pandas.io.formats.format.self.bold_rows->self.fmt.kwds.get('bold_rows', False)
A:pandas.io.formats.format.self.escape->self.fmt.kwds.get('escape', True)
A:pandas.io.formats.format.border->get_option('html.border')
A:pandas.io.formats.format.rs->pprint_thing(s, escape_chars=esc).strip()
A:pandas.io.formats.format.esc->OrderedDict([('&', '&amp;'), ('<', '&lt;'), ('>', '&gt;')])
A:pandas.io.formats.format.val_tag->tags.get(i, None)
A:pandas.io.formats.format.template->dedent('            <style>\n                .dataframe thead tr:only-child th {\n                    text-align: right;\n                }\n\n                .dataframe thead th {\n                    text-align: left;\n                }\n\n                .dataframe tbody tr th {\n                    vertical-align: top;\n                }\n            </style>')
A:pandas.io.formats.format.self.classes->self.classes.split()
A:pandas.io.formats.format.indent->self._write_body(indent)
A:pandas.io.formats.format.sentinel->pandas.core.common.sentinel_factory()
A:pandas.io.formats.format.levels->concat((frame.iloc[:row_num, :], frame.iloc[-row_num:, :])).index.format(sparsify=sentinel, adjoin=False, names=False)
A:pandas.io.formats.format.level_lengths->get_level_lengths(levels, sentinel)
A:pandas.io.formats.format.j->len(row)
A:pandas.io.formats.format.col_row->_column_header()
A:pandas.io.formats.format.fmt_values[i]->self.fmt._format_col(i)
A:pandas.io.formats.format.ncols->sum((b.shape[0] for b in self.blocks))
A:pandas.io.formats.format.index_values->self.fmt.tr_frame.index.format()
A:pandas.io.formats.format.idx_values->list(zip(*frame.index.format(sparsify=False, adjoin=False, names=False)))
A:pandas.io.formats.format.dot_row->list(idx_values[ins_row])
A:pandas.io.formats.format.dot_row[-1]->u('...')
A:pandas.io.formats.format.dot_row[inner_lvl - lnum]->u('...')
A:pandas.io.formats.format.idx_values[ins_row]->tuple(dot_row)
A:pandas.io.formats.format.path_or_buf->StringIO()
A:pandas.io.formats.format.self.path_or_buf->_expand_user(path_or_buf)
A:pandas.io.formats.format.cols->list(cols)
A:pandas.io.formats.format.self.chunksize->int(chunksize)
A:pandas.io.formats.format.self.data_index->Index([x.strftime(date_format) if notnull(x) else '' for x in self.data_index])
A:pandas.io.formats.format.self.nlevels->getattr(self.data_index, 'nlevels', 1)
A:pandas.io.formats.format.(f, handles)->_get_handle(self.path_or_buf, self.mode, encoding=self.encoding, compression=self.compression)
A:pandas.io.formats.format.writer_kwargs->dict(lineterminator=self.line_terminator, delimiter=self.sep, quoting=self.quoting, doublequote=self.doublequote, escapechar=self.escapechar, quotechar=self.quotechar)
A:pandas.io.formats.format.self.writer->csv.writer(f, **writer_kwargs)
A:pandas.io.formats.format.has_aliases->isinstance(header, (tuple, list, np.ndarray, Index))
A:pandas.io.formats.format.encoded_labels->list(index_label)
A:pandas.io.formats.format.end_i->min((i + 1) * chunksize, nrows)
A:pandas.io.formats.format.slicer->slice(start_i, end_i)
A:pandas.io.formats.format.d->b.to_native_types(slicer=slicer, na_rep=self.na_rep, float_format=self.float_format, decimal=self.decimal, date_format=self.date_format, quoting=self.quoting)
A:pandas.io.formats.format.ix->data_index.to_native_types(slicer=slicer, na_rep=self.na_rep, float_format=self.float_format, decimal=self.decimal, date_format=self.date_format, quoting=self.quoting)
A:pandas.io.formats.format.space->get_option('display.column_space')
A:pandas.io.formats.format.digits->get_option('display.precision')
A:pandas.io.formats.format.fmt_obj->fmt_klass(values, digits=digits, na_rep=na_rep, float_format=float_format, formatter=formatter, space=space, justify=justify, decimal=decimal)
A:pandas.io.formats.format.leading_space->is_float_type.any()
A:pandas.io.formats.format.threshold->get_option('display.chop_threshold')
A:pandas.io.formats.format.mask->isnull(values)
A:pandas.io.formats.format.values->DatetimeIndex(values)
A:pandas.io.formats.format.imask->(~mask).ravel()
A:pandas.io.formats.format.values.flat[imask]->numpy.array([formatter(val) for val in values.ravel()[imask]])
A:pandas.io.formats.format.formatted_values->format_values_with(float_format)
A:pandas.io.formats.format.maxlen->max((len(x) for x in formatted_values))
A:pandas.io.formats.format.abs_vals->numpy.abs(self.values)
A:pandas.io.formats.format.has_large_values->(abs_vals > 1000000.0).any()
A:pandas.io.formats.format.has_small_values->((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()
A:pandas.io.formats.format.percentiles->numpy.asarray(percentiles)
A:pandas.io.formats.format.out->numpy.empty_like(percentiles, dtype=object)
A:pandas.io.formats.format.unique_pcts->numpy.unique(percentiles)
A:pandas.io.formats.format.prec->max(1, prec)
A:pandas.io.formats.format.out[int_idx]->percentiles[int_idx].astype(int).astype(str)
A:pandas.io.formats.format.out[~int_idx]->percentiles[~int_idx].round(prec).astype(str)
A:pandas.io.formats.format.x->Timedelta(x)
A:pandas.io.formats.format.is_dates_only->_is_dates_only(values)
A:pandas.io.formats.format.values_int->DatetimeIndex(values).astype(np.int64)
A:pandas.io.formats.format.adj->_get_adjustment()
A:pandas.io.formats.format.conf_max->get_option('display.max_colwidth')
A:pandas.io.formats.format.dnum->decimal.Decimal(str(num))
A:pandas.io.formats.format.pow10->pow10.max(min(self.ENG_PREFIXES.keys())).max(min(self.ENG_PREFIXES.keys()))
A:pandas.io.formats.format.int_pow10->int(pow10)
A:pandas.io.formats.format.format_str->u('% g%s')
pandas.io.formats.format.CSVFormatter(self,obj,path_or_buf=None,sep=',',na_rep='',float_format=None,cols=None,header=True,index=True,index_label=None,mode='w',nanRep=None,encoding=None,compression=None,quoting=None,line_terminator='\n',chunksize=None,tupleize_cols=False,quotechar='"',date_format=None,doublequote=True,escapechar=None,decimal='.')
pandas.io.formats.format.CSVFormatter.__init__(self,obj,path_or_buf=None,sep=',',na_rep='',float_format=None,cols=None,header=True,index=True,index_label=None,mode='w',nanRep=None,encoding=None,compression=None,quoting=None,line_terminator='\n',chunksize=None,tupleize_cols=False,quotechar='"',date_format=None,doublequote=True,escapechar=None,decimal='.')
pandas.io.formats.format.CSVFormatter._save(self)
pandas.io.formats.format.CSVFormatter._save_chunk(self,start_i,end_i)
pandas.io.formats.format.CSVFormatter._save_header(self)
pandas.io.formats.format.CSVFormatter.save(self)
pandas.io.formats.format.CategoricalArrayFormatter(self,values,*args,**kwargs)
pandas.io.formats.format.CategoricalArrayFormatter.__init__(self,values,*args,**kwargs)
pandas.io.formats.format.CategoricalArrayFormatter._format_strings(self)
pandas.io.formats.format.CategoricalFormatter(self,categorical,buf=None,length=True,na_rep='NaN',footer=True)
pandas.io.formats.format.CategoricalFormatter.__init__(self,categorical,buf=None,length=True,na_rep='NaN',footer=True)
pandas.io.formats.format.CategoricalFormatter._get_footer(self)
pandas.io.formats.format.CategoricalFormatter._get_formatted_values(self)
pandas.io.formats.format.CategoricalFormatter.to_string(self)
pandas.io.formats.format.DataFrameFormatter(self,frame,buf=None,columns=None,col_space=None,header=True,index=True,na_rep='NaN',formatters=None,justify=None,float_format=None,sparsify=None,index_names=True,line_width=None,max_rows=None,max_cols=None,show_dimensions=False,decimal='.',**kwds)
pandas.io.formats.format.DataFrameFormatter.__init__(self,frame,buf=None,columns=None,col_space=None,header=True,index=True,na_rep='NaN',formatters=None,justify=None,float_format=None,sparsify=None,index_names=True,line_width=None,max_rows=None,max_cols=None,show_dimensions=False,decimal='.',**kwds)
pandas.io.formats.format.DataFrameFormatter._chk_truncate(self)
pandas.io.formats.format.DataFrameFormatter._format_col(self,i)
pandas.io.formats.format.DataFrameFormatter._get_column_name_list(self)
pandas.io.formats.format.DataFrameFormatter._get_formatted_column_labels(self,frame)
pandas.io.formats.format.DataFrameFormatter._get_formatted_index(self,frame)
pandas.io.formats.format.DataFrameFormatter._join_multiline(self,*strcols)
pandas.io.formats.format.DataFrameFormatter._to_str_columns(self)
pandas.io.formats.format.DataFrameFormatter.has_column_names(self)
pandas.io.formats.format.DataFrameFormatter.has_index_names(self)
pandas.io.formats.format.DataFrameFormatter.to_html(self,classes=None,notebook=False,border=None)
pandas.io.formats.format.DataFrameFormatter.to_latex(self,column_format=None,longtable=False,encoding=None,multicolumn=False,multicolumn_format=None,multirow=False)
pandas.io.formats.format.DataFrameFormatter.to_string(self)
pandas.io.formats.format.Datetime64Formatter(self,values,nat_rep='NaT',date_format=None,**kwargs)
pandas.io.formats.format.Datetime64Formatter.__init__(self,values,nat_rep='NaT',date_format=None,**kwargs)
pandas.io.formats.format.Datetime64Formatter._format_strings(self)
pandas.io.formats.format.Datetime64TZFormatter(Datetime64Formatter)
pandas.io.formats.format.Datetime64TZFormatter._format_strings(self)
pandas.io.formats.format.EastAsianTextAdjustment(self)
pandas.io.formats.format.EastAsianTextAdjustment.__init__(self)
pandas.io.formats.format.EastAsianTextAdjustment.justify(self,texts,max_len,mode='right')
pandas.io.formats.format.EastAsianTextAdjustment.len(self,text)
pandas.io.formats.format.EngFormatter(self,accuracy=None,use_eng_prefix=False)
pandas.io.formats.format.EngFormatter.__init__(self,accuracy=None,use_eng_prefix=False)
pandas.io.formats.format.FloatArrayFormatter(self,*args,**kwargs)
pandas.io.formats.format.FloatArrayFormatter.__init__(self,*args,**kwargs)
pandas.io.formats.format.FloatArrayFormatter._format_strings(self)
pandas.io.formats.format.FloatArrayFormatter._value_formatter(self,float_format=None,threshold=None)
pandas.io.formats.format.FloatArrayFormatter.get_result_as_array(self)
pandas.io.formats.format.GenericArrayFormatter(self,values,digits=7,formatter=None,na_rep='NaN',space=12,float_format=None,justify='right',decimal='.',quoting=None,fixed_width=True)
pandas.io.formats.format.GenericArrayFormatter.__init__(self,values,digits=7,formatter=None,na_rep='NaN',space=12,float_format=None,justify='right',decimal='.',quoting=None,fixed_width=True)
pandas.io.formats.format.GenericArrayFormatter._format_strings(self)
pandas.io.formats.format.GenericArrayFormatter.get_result(self)
pandas.io.formats.format.HTMLFormatter(self,formatter,classes=None,max_rows=None,max_cols=None,notebook=False,border=None)
pandas.io.formats.format.HTMLFormatter.__init__(self,formatter,classes=None,max_rows=None,max_cols=None,notebook=False,border=None)
pandas.io.formats.format.HTMLFormatter._write_body(self,indent)
pandas.io.formats.format.HTMLFormatter._write_cell(self,s,kind='td',indent=0,tags=None)
pandas.io.formats.format.HTMLFormatter._write_header(self,indent)
pandas.io.formats.format.HTMLFormatter._write_hierarchical_rows(self,fmt_values,indent)
pandas.io.formats.format.HTMLFormatter._write_regular_rows(self,fmt_values,indent)
pandas.io.formats.format.HTMLFormatter.write(self,s,indent=0)
pandas.io.formats.format.HTMLFormatter.write_result(self,buf)
pandas.io.formats.format.HTMLFormatter.write_style(self)
pandas.io.formats.format.HTMLFormatter.write_td(self,s,indent=0,tags=None)
pandas.io.formats.format.HTMLFormatter.write_th(self,s,indent=0,tags=None)
pandas.io.formats.format.HTMLFormatter.write_tr(self,line,indent=0,indent_delta=4,header=False,align=None,tags=None,nindex_levels=0)
pandas.io.formats.format.IntArrayFormatter(GenericArrayFormatter)
pandas.io.formats.format.IntArrayFormatter._format_strings(self)
pandas.io.formats.format.IntervalArrayFormatter(self,values,*args,**kwargs)
pandas.io.formats.format.IntervalArrayFormatter.__init__(self,values,*args,**kwargs)
pandas.io.formats.format.IntervalArrayFormatter._format_strings(self)
pandas.io.formats.format.LatexFormatter(self,formatter,column_format=None,longtable=False,multicolumn=False,multicolumn_format=None,multirow=False)
pandas.io.formats.format.LatexFormatter.__init__(self,formatter,column_format=None,longtable=False,multicolumn=False,multicolumn_format=None,multirow=False)
pandas.io.formats.format.LatexFormatter._format_multicolumn(self,row,ilevels)
pandas.io.formats.format.LatexFormatter._format_multirow(self,row,ilevels,i,rows)
pandas.io.formats.format.LatexFormatter._print_cline(self,buf,i,icol)
pandas.io.formats.format.LatexFormatter.write_result(self,buf)
pandas.io.formats.format.PeriodArrayFormatter(IntArrayFormatter)
pandas.io.formats.format.PeriodArrayFormatter._format_strings(self)
pandas.io.formats.format.SeriesFormatter(self,series,buf=None,length=True,header=True,index=True,na_rep='NaN',name=False,float_format=None,dtype=True,max_rows=None)
pandas.io.formats.format.SeriesFormatter.__init__(self,series,buf=None,length=True,header=True,index=True,na_rep='NaN',name=False,float_format=None,dtype=True,max_rows=None)
pandas.io.formats.format.SeriesFormatter._chk_truncate(self)
pandas.io.formats.format.SeriesFormatter._get_footer(self)
pandas.io.formats.format.SeriesFormatter._get_formatted_index(self)
pandas.io.formats.format.SeriesFormatter._get_formatted_values(self)
pandas.io.formats.format.SeriesFormatter.to_string(self)
pandas.io.formats.format.TableFormatter(object)
pandas.io.formats.format.TableFormatter._get_formatter(self,i)
pandas.io.formats.format.TableFormatter.should_show_dimensions(self)
pandas.io.formats.format.TextAdjustment(self)
pandas.io.formats.format.TextAdjustment.__init__(self)
pandas.io.formats.format.TextAdjustment.adjoin(self,space,*lists,**kwargs)
pandas.io.formats.format.TextAdjustment.justify(self,texts,max_len,mode='right')
pandas.io.formats.format.TextAdjustment.len(self,text)
pandas.io.formats.format.Timedelta64Formatter(self,values,nat_rep='NaT',box=False,**kwargs)
pandas.io.formats.format.Timedelta64Formatter.__init__(self,values,nat_rep='NaT',box=False,**kwargs)
pandas.io.formats.format.Timedelta64Formatter._format_strings(self)
pandas.io.formats.format._binify(cols,line_width)
pandas.io.formats.format._format_datetime64(x,tz=None,nat_rep='NaT')
pandas.io.formats.format._format_datetime64_dateonly(x,nat_rep='NaT',date_format=None)
pandas.io.formats.format._get_adjustment()
pandas.io.formats.format._get_format_datetime64(is_dates_only,nat_rep='NaT',date_format=None)
pandas.io.formats.format._get_format_datetime64_from_values(values,date_format)
pandas.io.formats.format._get_format_timedelta64(values,nat_rep='NaT',box=False)
pandas.io.formats.format._has_names(index)
pandas.io.formats.format._is_dates_only(values)
pandas.io.formats.format._make_fixed_width(strings,justify='right',minimum=None,adj=None)
pandas.io.formats.format._put_lines(buf,lines)
pandas.io.formats.format._trim_zeros(str_floats,na_rep='NaN')
pandas.io.formats.format.format_array(values,formatter,float_format=None,na_rep='NaN',digits=None,space=None,justify='right',decimal='.')
pandas.io.formats.format.format_percentiles(percentiles)
pandas.io.formats.format.set_eng_float_format(accuracy=3,use_eng_prefix=False)
pandas.io.formats.format.single_column_table(column,align=None,style=None)
pandas.io.formats.format.single_row_table(row)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/formats/style.py----------------------------------------
A:pandas.io.formats.style.loader->ChoiceLoader([FileSystemLoader(searchpath), cls.loader])
A:pandas.io.formats.style.env->Environment(loader=loader)
A:pandas.io.formats.style.template->Environment(loader=loader).get_template(name)
A:pandas.io.formats.style.self.ctx->defaultdict(list)
A:pandas.io.formats.style.data->data.to_frame().to_frame()
A:pandas.io.formats.style.precision->get_option('display.precision')
A:pandas.io.formats.style.self._display_funcs->defaultdict(lambda : default_display_func)
A:pandas.io.formats.style.formatter->_maybe_wrap_formatter(formatter)
A:pandas.io.formats.style.idx_lengths->_get_level_lengths(self.index)
A:pandas.io.formats.style.col_lengths->_get_level_lengths(self.columns)
A:pandas.io.formats.style.cell_context->dict()
A:pandas.io.formats.style.rlabels->self.data.index.tolist()
A:pandas.io.formats.style.clabels->list(zip(*clabels))
A:pandas.io.formats.style.colspan->_get_level_lengths(self.columns).get((r, c), 0)
A:pandas.io.formats.style.rowspan->_get_level_lengths(self.index).get((c, r), 0)
A:pandas.io.formats.style.row_locs->self.data.index.get_indexer_for(sub_df.index)
A:pandas.io.formats.style.col_locs->self.data.columns.get_indexer_for(sub_df.columns)
A:pandas.io.formats.style.subset->_non_reducing_slice(_maybe_numeric_slice(self.data, subset))
A:pandas.io.formats.style.col_formatter->_maybe_wrap_formatter(col_formatter)
A:pandas.io.formats.style.locs->product(*(row_locs, col_locs))
A:pandas.io.formats.style.d->self._translate()
A:pandas.io.formats.style.styler->Styler(self.data, precision=self.precision, caption=self.caption, uuid=self.uuid, table_styles=self.table_styles)
A:pandas.io.formats.style.styler.ctx->copy.deepcopy(self.ctx)
A:pandas.io.formats.style.styler._todo->copy.deepcopy(self._todo)
A:pandas.io.formats.style.r->func(self)(*args, **kwargs)
A:pandas.io.formats.style.result->self.data.loc[subset].applymap(func)
A:pandas.io.formats.style.msg->'Expected a template string or callable, got {} instead'.format(formatter)
A:pandas.io.formats.style.func->partial(func, **kwargs)
A:pandas.io.formats.style.norm->matplotlib.colors.Normalize(s.min() - rng * low, s.max() + rng * high)
A:pandas.io.formats.style.normed->norm(s.values)
A:pandas.io.formats.style.values->';'.join(('{p}: {v}'.format(p=p, v=v) for (p, v) in kwargs.items()))
A:pandas.io.formats.style.m->max(abs(s.min()), abs(s.max()))
A:pandas.io.formats.style.attr->'background-color: {0}'.format(color)
A:pandas.io.formats.style.sentinel->pandas.core.common.sentinel_factory()
A:pandas.io.formats.style.levels->index.format(sparsify=sentinel, adjoin=False, names=False)
pandas.io.formats.style.Styler(self,data,precision=None,table_styles=None,uuid=None,caption=None,table_attributes=None)
pandas.io.formats.style.Styler.__copy__(self)
pandas.io.formats.style.Styler.__deepcopy__(self,memo)
pandas.io.formats.style.Styler.__init__(self,data,precision=None,table_styles=None,uuid=None,caption=None,table_attributes=None)
pandas.io.formats.style.Styler._apply(self,func,axis=0,subset=None,**kwargs)
pandas.io.formats.style.Styler._applymap(self,func,subset=None,**kwargs)
pandas.io.formats.style.Styler._background_gradient(s,cmap='PuBu',low=0,high=0)
pandas.io.formats.style.Styler._bar_center_mid(s,color,width,base)
pandas.io.formats.style.Styler._bar_center_zero(s,color,width,base)
pandas.io.formats.style.Styler._bar_left(s,color,width,base)
pandas.io.formats.style.Styler._compute(self)
pandas.io.formats.style.Styler._copy(self,deepcopy=False)
pandas.io.formats.style.Styler._highlight_extrema(data,color='yellow',max_=True)
pandas.io.formats.style.Styler._highlight_handler(self,subset=None,color='yellow',axis=None,max_=True)
pandas.io.formats.style.Styler._highlight_null(v,null_color)
pandas.io.formats.style.Styler._repr_html_(self)
pandas.io.formats.style.Styler._translate(self)
pandas.io.formats.style.Styler._update_ctx(self,attrs)
pandas.io.formats.style.Styler.apply(self,func,axis=0,subset=None,**kwargs)
pandas.io.formats.style.Styler.applymap(self,func,subset=None,**kwargs)
pandas.io.formats.style.Styler.background_gradient(self,cmap='PuBu',low=0,high=0,axis=0,subset=None)
pandas.io.formats.style.Styler.bar(self,subset=None,axis=0,color='#d65f5f',width=100,align='left')
pandas.io.formats.style.Styler.clear(self)
pandas.io.formats.style.Styler.export(self)
pandas.io.formats.style.Styler.format(self,formatter,subset=None)
pandas.io.formats.style.Styler.from_custom_template(cls,searchpath,name)
pandas.io.formats.style.Styler.highlight_max(self,subset=None,color='yellow',axis=0)
pandas.io.formats.style.Styler.highlight_min(self,subset=None,color='yellow',axis=0)
pandas.io.formats.style.Styler.highlight_null(self,null_color='red')
pandas.io.formats.style.Styler.render(self,**kwargs)
pandas.io.formats.style.Styler.set_caption(self,caption)
pandas.io.formats.style.Styler.set_precision(self,precision)
pandas.io.formats.style.Styler.set_properties(self,subset=None,**kwargs)
pandas.io.formats.style.Styler.set_table_attributes(self,attributes)
pandas.io.formats.style.Styler.set_table_styles(self,table_styles)
pandas.io.formats.style.Styler.set_uuid(self,uuid)
pandas.io.formats.style.Styler.to_excel(self,excel_writer,sheet_name='Sheet1',na_rep='',float_format=None,columns=None,header=True,index=True,index_label=None,startrow=0,startcol=0,engine=None,merge_cells=True,encoding=None,inf_rep='inf',verbose=True,freeze_panes=None)
pandas.io.formats.style.Styler.use(self,styles)
pandas.io.formats.style._get_level_lengths(index)
pandas.io.formats.style._is_visible(idx_row,idx_col,lengths)
pandas.io.formats.style._maybe_wrap_formatter(formatter)
pandas.io.formats.style._mpl(func)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/formats/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/formats/printing.py----------------------------------------
A:pandas.io.formats.printing.strlen->kwargs.pop('strlen', len)
A:pandas.io.formats.printing.justfunc->kwargs.pop('justfunc', justify)
A:pandas.io.formats.printing.maxLen->max(map(len, lists))
A:pandas.io.formats.printing.nl->justfunc(lst, lengths[i], mode='left')
A:pandas.io.formats.printing.toJoin->zip(*newLists)
A:pandas.io.formats.printing.sep->pandas.compat.text_type(sep)
A:pandas.io.formats.printing.fmt->u('{%s}')
A:pandas.io.formats.printing.nitems->len(seq)
A:pandas.io.formats.printing.s->iter(seq)
A:pandas.io.formats.printing.body->', '.join(r)
A:pandas.io.formats.printing.pfmt->u('%s: %s')
A:pandas.io.formats.printing.result->as_escaped_unicode(thing)
A:pandas.io.formats.printing.escape_chars->list(escape_chars.keys())
A:pandas.io.formats.printing.value->pprint_thing(object)
A:pandas.io.formats.printing.ip->get_ipython()
A:pandas.io.formats.printing.formatters[mimetype]->TableSchemaFormatter()
pandas.io.formats.printing._enable_data_resource_formatter(enable)
pandas.io.formats.printing._join_unicode(lines,sep='')
pandas.io.formats.printing._pprint_dict(seq,_nest_lvl=0,max_seq_items=None,**kwds)
pandas.io.formats.printing._pprint_seq(seq,_nest_lvl=0,max_seq_items=None,**kwds)
pandas.io.formats.printing.adjoin(space,*lists,**kwargs)
pandas.io.formats.printing.justify(texts,max_len,mode='right')
pandas.io.formats.printing.pprint_thing(thing,_nest_lvl=0,escape_chars=None,default_escapes=False,quote_strings=False,max_seq_items=None)
pandas.io.formats.printing.pprint_thing_encoded(object,encoding='utf-8',errors='replace',**kwds)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/sas/sas7bdat.py----------------------------------------
A:pandas.io.sas.sas7bdat.(self._path_or_buf, _, _)->get_filepath_or_buffer(path_or_buf)
A:pandas.io.sas.sas7bdat.self._path_or_buf->open(self._path_or_buf, 'rb')
A:pandas.io.sas.sas7bdat.self._cached_page->self._path_or_buf.read(self._page_length)
A:pandas.io.sas.sas7bdat.buf->self._read_bytes(offset1, self._lcs)
A:pandas.io.sas.sas7bdat.self.name->self.name.decode(self.encoding or self.default_encoding)
A:pandas.io.sas.sas7bdat.self.file_type->self.file_type.decode(self.encoding or self.default_encoding)
A:pandas.io.sas.sas7bdat.epoch->pandas.datetime(1960, 1, 1)
A:pandas.io.sas.sas7bdat.x->self._read_int(text_subheader_format, const.column_format_text_subheader_index_length)
A:pandas.io.sas.sas7bdat.self.header_length->self._read_int(const.header_size_offset + align1, const.header_size_length)
A:pandas.io.sas.sas7bdat.self._page_length->self._read_int(const.page_size_offset + align1, const.page_size_length)
A:pandas.io.sas.sas7bdat.self._page_count->self._read_int(const.page_count_offset + align1, const.page_count_length)
A:pandas.io.sas.sas7bdat.self.sas_release->self.sas_release.decode(self.encoding or self.default_encoding)
A:pandas.io.sas.sas7bdat.self.server_type->self.server_type.decode(self.encoding or self.default_encoding)
A:pandas.io.sas.sas7bdat.self.os_version->self.os_version.decode(self.encoding or self.default_encoding)
A:pandas.io.sas.sas7bdat.self.os_name->self.os_name.decode(self.encoding or self.default_encoding)
A:pandas.io.sas.sas7bdat.da->self.read(nrows=self.chunksize or 1)
A:pandas.io.sas.sas7bdat.done->self._process_page_meta()
A:pandas.io.sas.sas7bdat.self._current_page_type->self._read_int(tx, const.page_type_length)
A:pandas.io.sas.sas7bdat.self._current_page_block_count->self._read_int(tx, const.block_count_length)
A:pandas.io.sas.sas7bdat.self._current_page_subheaders_count->self._read_int(tx, const.subheader_count_length)
A:pandas.io.sas.sas7bdat.pointer->self._process_subheader_pointers(const.subheader_pointers_offset + bit_offset, i)
A:pandas.io.sas.sas7bdat.subheader_signature->self._read_bytes(offset, self._int_length)
A:pandas.io.sas.sas7bdat.subheader_index->self._get_subheader_index(subheader_signature, pointer.compression, pointer.ptype)
A:pandas.io.sas.sas7bdat.index->pandas.io.sas.sas_constants.subheader_signature_to_index.get(signature)
A:pandas.io.sas.sas7bdat.subheader_offset->self._read_int(total_offset, self._int_length)
A:pandas.io.sas.sas7bdat.subheader_length->self._read_int(total_offset, self._int_length)
A:pandas.io.sas.sas7bdat.subheader_compression->self._read_int(total_offset, 1)
A:pandas.io.sas.sas7bdat.subheader_type->self._read_int(total_offset, 1)
A:pandas.io.sas.sas7bdat.self.row_length->self._read_int(offset + const.row_length_offset_multiplier * int_len, int_len)
A:pandas.io.sas.sas7bdat.self.row_count->self._read_int(offset + const.row_count_offset_multiplier * int_len, int_len)
A:pandas.io.sas.sas7bdat.self.col_count_p1->self._read_int(offset + const.col_count_p1_multiplier * int_len, int_len)
A:pandas.io.sas.sas7bdat.self.col_count_p2->self._read_int(offset + const.col_count_p2_multiplier * int_len, int_len)
A:pandas.io.sas.sas7bdat.self._mix_page_row_count->self._read_int(offset + mx, int_len)
A:pandas.io.sas.sas7bdat.self._lcs->self._read_int(lcs_offset, 2)
A:pandas.io.sas.sas7bdat.self._lcp->self._read_int(lcp_offset, 2)
A:pandas.io.sas.sas7bdat.self.column_count->self._read_int(offset, int_len)
A:pandas.io.sas.sas7bdat.text_block_size->self._read_int(offset, const.text_block_size_length)
A:pandas.io.sas.sas7bdat.cname_raw->buf[0:text_block_size].rstrip(b'\x00 ')
A:pandas.io.sas.sas7bdat.cname->cname.decode(self.encoding or self.default_encoding).decode(self.encoding or self.default_encoding)
A:pandas.io.sas.sas7bdat.compression_literal->self._read_bytes(offset1, self._lcs).rstrip(b'\x00')
A:pandas.io.sas.sas7bdat.self.creator_proc->self.creator_proc.decode(self.encoding or self.default_encoding)
A:pandas.io.sas.sas7bdat.idx->self._read_int(text_subheader, const.column_name_text_subheader_length)
A:pandas.io.sas.sas7bdat.col_offset->self._read_int(col_name_offset, const.column_name_offset_length)
A:pandas.io.sas.sas7bdat.col_len->self._read_int(col_name_length, const.column_name_length_length)
A:pandas.io.sas.sas7bdat.self.column_types->numpy.empty(column_attributes_vectors_count, dtype=np.dtype('S1'))
A:pandas.io.sas.sas7bdat.self._column_data_lengths->numpy.empty(column_attributes_vectors_count, dtype=np.int64)
A:pandas.io.sas.sas7bdat.self._column_data_offsets->numpy.empty(column_attributes_vectors_count, dtype=np.int64)
A:pandas.io.sas.sas7bdat.format_idx->min(x, len(self.column_names_strings) - 1)
A:pandas.io.sas.sas7bdat.format_start->self._read_int(col_format_offset, const.column_format_offset_length)
A:pandas.io.sas.sas7bdat.format_len->self._read_int(col_format_len, const.column_format_length_length)
A:pandas.io.sas.sas7bdat.label_idx->min(label_idx, len(self.column_names_strings) - 1)
A:pandas.io.sas.sas7bdat.label_start->self._read_int(col_label_offset, const.column_label_offset_length)
A:pandas.io.sas.sas7bdat.label_len->self._read_int(col_label_len, const.column_label_length_length)
A:pandas.io.sas.sas7bdat.current_column_number->len(self.columns)
A:pandas.io.sas.sas7bdat.col->_column()
A:pandas.io.sas.sas7bdat.nd->(self.column_types == b'd').sum()
A:pandas.io.sas.sas7bdat.ns->(self.column_types == b's').sum()
A:pandas.io.sas.sas7bdat.self._string_chunk->numpy.empty((ns, nrows), dtype=np.object)
A:pandas.io.sas.sas7bdat.self._byte_chunk->numpy.empty((nd, 8 * nrows), dtype=np.uint8)
A:pandas.io.sas.sas7bdat.p->Parser(self)
A:pandas.io.sas.sas7bdat.rslt->pandas.DataFrame(index=ix)
A:pandas.io.sas.sas7bdat.ix->range(m - n, m)
A:pandas.io.sas.sas7bdat.rslt[name]->rslt[name].str.decode(self.encoding or self.default_encoding).str.decode(self.encoding or self.default_encoding)
pandas.io.sas.sas7bdat.SAS7BDATReader(self,path_or_buf,index=None,convert_dates=True,blank_missing=True,chunksize=None,encoding=None,convert_text=True,convert_header_text=True)
pandas.io.sas.sas7bdat.SAS7BDATReader.__init__(self,path_or_buf,index=None,convert_dates=True,blank_missing=True,chunksize=None,encoding=None,convert_text=True,convert_header_text=True)
pandas.io.sas.sas7bdat.SAS7BDATReader.__next__(self)
pandas.io.sas.sas7bdat.SAS7BDATReader._chunk_to_dataframe(self)
pandas.io.sas.sas7bdat.SAS7BDATReader._get_properties(self)
pandas.io.sas.sas7bdat.SAS7BDATReader._get_subheader_index(self,signature,compression,ptype)
pandas.io.sas.sas7bdat.SAS7BDATReader._parse_metadata(self)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_columnattributes_subheader(self,offset,length)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_columnlist_subheader(self,offset,length)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_columnname_subheader(self,offset,length)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_columnsize_subheader(self,offset,length)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_columntext_subheader(self,offset,length)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_format_subheader(self,offset,length)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_page_meta(self)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_page_metadata(self)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_rowsize_subheader(self,offset,length)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_subheader(self,subheader_index,pointer)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_subheader_counts(self,offset,length)
pandas.io.sas.sas7bdat.SAS7BDATReader._process_subheader_pointers(self,offset,subheader_pointer_index)
pandas.io.sas.sas7bdat.SAS7BDATReader._read_bytes(self,offset,length)
pandas.io.sas.sas7bdat.SAS7BDATReader._read_float(self,offset,width)
pandas.io.sas.sas7bdat.SAS7BDATReader._read_int(self,offset,width)
pandas.io.sas.sas7bdat.SAS7BDATReader._read_next_page(self)
pandas.io.sas.sas7bdat.SAS7BDATReader._read_page_header(self)
pandas.io.sas.sas7bdat.SAS7BDATReader._read_subheader_signature(self,offset)
pandas.io.sas.sas7bdat.SAS7BDATReader.close(self)
pandas.io.sas.sas7bdat.SAS7BDATReader.read(self,nrows=None)
pandas.io.sas.sas7bdat._column(object)
pandas.io.sas.sas7bdat._subheader_pointer(object)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/sas/sas_constants.py----------------------------------------
pandas.io.sas.sas_constants.index


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/sas/sas_xport.py----------------------------------------
A:pandas.io.sas.sas_xport.out[name]->s[start:start + length].strip()
A:pandas.io.sas.sas_xport.vec1->_handle_truncated_float_vec(vec, self.fields[j]['field_length']).view(dtype=dtype)
A:pandas.io.sas.sas_xport.dtype->numpy.dtype(dtypel)
A:pandas.io.sas.sas_xport.vec2->_handle_truncated_float_vec(vec, self.fields[j]['field_length']).view(dtype=dtype).view(dtype=dtype)
A:pandas.io.sas.sas_xport.shift->numpy.zeros(len(vec), dtype=np.uint8)
A:pandas.io.sas.sas_xport.ieee->ieee.astype('f8').astype('f8')
A:pandas.io.sas.sas_xport.(filepath_or_buffer, encoding, compression)->get_filepath_or_buffer(filepath_or_buffer, encoding=encoding)
A:pandas.io.sas.sas_xport.self.filepath_or_buffer->pandas.compat.BytesIO(contents)
A:pandas.io.sas.sas_xport.contents->contents.encode(self._encoding).encode(self._encoding)
A:pandas.io.sas.sas_xport.line1->self._get_row()
A:pandas.io.sas.sas_xport.line2->self._get_row()
A:pandas.io.sas.sas_xport.file_info->_split_line(line2, fif)
A:pandas.io.sas.sas_xport.file_info['created']->_parse_date(file_info['created'])
A:pandas.io.sas.sas_xport.line3->self._get_row()
A:pandas.io.sas.sas_xport.file_info['modified']->_parse_date(line3[:16])
A:pandas.io.sas.sas_xport.header1->self._get_row()
A:pandas.io.sas.sas_xport.header2->self._get_row()
A:pandas.io.sas.sas_xport.headflag1->self._get_row().startswith(_correct_header1)
A:pandas.io.sas.sas_xport.fieldnamelength->int(header1[-5:-2])
A:pandas.io.sas.sas_xport.member_info->_split_line(self._get_row(), mem)
A:pandas.io.sas.sas_xport.member_info['modified']->_parse_date(member_info['modified'])
A:pandas.io.sas.sas_xport.member_info['created']->_parse_date(member_info['created'])
A:pandas.io.sas.sas_xport.fieldcount->int(self._get_row()[54:58])
A:pandas.io.sas.sas_xport.fielddata->self.filepath_or_buffer.read(datalength)
A:pandas.io.sas.sas_xport.field->dict(zip(_fieldkeys, fieldstruct))
A:pandas.io.sas.sas_xport.fieldstruct->struct.unpack('>hhhh8s40s8shhh2s8shhl52s', field)
A:pandas.io.sas.sas_xport.field[k]->_parse_float_vec(vec).strip()
A:pandas.io.sas.sas_xport.header->self._get_row()
A:pandas.io.sas.sas_xport.self.record_start->self.filepath_or_buffer.tell()
A:pandas.io.sas.sas_xport.self.nobs->self._record_count()
A:pandas.io.sas.sas_xport.last_card->numpy.frombuffer(last_card, dtype=np.uint64)
A:pandas.io.sas.sas_xport.ix->numpy.flatnonzero(last_card == 2314885530818453536)
A:pandas.io.sas.sas_xport.v->_parse_float_vec(vec)
A:pandas.io.sas.sas_xport.read_lines->min(nrows, self.nobs - self._lines_read)
A:pandas.io.sas.sas_xport.raw->self.filepath_or_buffer.read(read_len)
A:pandas.io.sas.sas_xport.data->numpy.frombuffer(raw, dtype=self._dtype, count=read_lines)
A:pandas.io.sas.sas_xport.df->df.set_index(self._index).set_index(self._index)
A:pandas.io.sas.sas_xport.vec->_handle_truncated_float_vec(vec, self.fields[j]['field_length'])
A:pandas.io.sas.sas_xport.miss->self._missing_double(vec)
A:pandas.io.sas.sas_xport.df.index->range(self._lines_read, self._lines_read + read_lines)
pandas.io.sas.sas_xport.XportReader(self,filepath_or_buffer,index=None,encoding='ISO-8859-1',chunksize=None)
pandas.io.sas.sas_xport.XportReader.__init__(self,filepath_or_buffer,index=None,encoding='ISO-8859-1',chunksize=None)
pandas.io.sas.sas_xport.XportReader.__next__(self)
pandas.io.sas.sas_xport.XportReader._get_row(self)
pandas.io.sas.sas_xport.XportReader._missing_double(self,vec)
pandas.io.sas.sas_xport.XportReader._read_header(self)
pandas.io.sas.sas_xport.XportReader._record_count(self)
pandas.io.sas.sas_xport.XportReader.close(self)
pandas.io.sas.sas_xport.XportReader.get_chunk(self,size=None)
pandas.io.sas.sas_xport.XportReader.read(self,nrows=None)
pandas.io.sas.sas_xport._handle_truncated_float_vec(vec,nbytes)
pandas.io.sas.sas_xport._parse_date(datestr)
pandas.io.sas.sas_xport._parse_float_vec(vec)
pandas.io.sas.sas_xport._split_line(s,parts)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/sas/sasreader.py----------------------------------------
A:pandas.io.sas.sasreader.fname->filepath_or_buffer.lower()
A:pandas.io.sas.sasreader.reader->SAS7BDATReader(filepath_or_buffer, index=index, encoding=encoding, chunksize=chunksize)
A:pandas.io.sas.sasreader.data->SAS7BDATReader(filepath_or_buffer, index=index, encoding=encoding, chunksize=chunksize).read()
pandas.io.sas.read_sas(filepath_or_buffer,format=None,index=None,encoding=None,chunksize=None,iterator=False)
pandas.io.sas.sasreader.read_sas(filepath_or_buffer,format=None,index=None,encoding=None,chunksize=None,iterator=False)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/sas/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/msgpack/_version.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/msgpack/exceptions.py----------------------------------------
pandas.io.msgpack.BufferFull(UnpackException)
pandas.io.msgpack.ExtraData(self,unpacked,extra)
pandas.io.msgpack.ExtraData.__str__(self)
pandas.io.msgpack.OutOfData(UnpackException)
pandas.io.msgpack.PackException(Exception)
pandas.io.msgpack.PackValueError(PackException,ValueError)
pandas.io.msgpack.UnpackException(Exception)
pandas.io.msgpack.UnpackValueError(UnpackException,ValueError)
pandas.io.msgpack.exceptions.BufferFull(UnpackException)
pandas.io.msgpack.exceptions.ExtraData(self,unpacked,extra)
pandas.io.msgpack.exceptions.ExtraData.__init__(self,unpacked,extra)
pandas.io.msgpack.exceptions.ExtraData.__str__(self)
pandas.io.msgpack.exceptions.OutOfData(UnpackException)
pandas.io.msgpack.exceptions.PackException(Exception)
pandas.io.msgpack.exceptions.PackValueError(PackException,ValueError)
pandas.io.msgpack.exceptions.UnpackException(Exception)
pandas.io.msgpack.exceptions.UnpackValueError(UnpackException,ValueError)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/io/msgpack/__init__.py----------------------------------------
A:pandas.io.msgpack.__init__.packer->Packer(**kwargs)
pandas.io.msgpack.__init__.ExtType(cls,code,data)
pandas.io.msgpack.__init__.ExtType.__new__(cls,code,data)
pandas.io.msgpack.__init__.pack(o,stream,**kwargs)
pandas.io.msgpack.__init__.packb(o,**kwargs)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/indexing.py----------------------------------------
A:pandas.core.indexing._NS->slice(None, None)
A:pandas.core.indexing.IndexSlice->_IndexSlice()
A:pandas.core.indexing.new_self->self.__class__(self.obj, self.name)
A:pandas.core.indexing.key->list(self._convert_key(key, is_setter=True))
A:pandas.core.indexing.values->self.obj.get_value(*key, takeable=True)
A:pandas.core.indexing.axis->self.obj._get_axis_number(self.axis)
A:pandas.core.indexing.indexer->self.obj._get_axis(axis).slice_indexer(slice_obj.start, slice_obj.stop, slice_obj.step, kind=self.name)
A:pandas.core.indexing.ax->self.obj._get_axis(axis)
A:pandas.core.indexing.idx->ax[ix].ravel()
A:pandas.core.indexing.(key, _)->convert_missing_indexer(idx)
A:pandas.core.indexing.self.obj[key]->_infer_fill_value(value)
A:pandas.core.indexing.new_indexer->index.droplevel(0).get_indexer([new_index[-1]])
A:pandas.core.indexing.index->index.droplevel(0).droplevel(0)
A:pandas.core.indexing.labels->self.obj._get_axis(axis)
A:pandas.core.indexing.(indexer, missing)->self.obj._get_axis(axis).get_indexer_non_unique(objarr)
A:pandas.core.indexing.new_index->index.droplevel(0).droplevel(0).insert(len(index), indexer)
A:pandas.core.indexing.new_values->numpy.concatenate([self.obj.asobject, new_values])
A:pandas.core.indexing.value->self._align_panel(indexer, value)
A:pandas.core.indexing.item_labels->self.obj._get_axis(info_axis)
A:pandas.core.indexing.lplane_indexer->length_of_indexer(plane_indexer[0], plane_axis)
A:pandas.core.indexing.obj->check_bool_indexer(labels, obj)
A:pandas.core.indexing.obj._data->check_bool_indexer(labels, obj)._data.setitem(indexer=tuple([idx]), value=value)
A:pandas.core.indexing.s->s.copy().copy()
A:pandas.core.indexing.s._data->s.copy().copy()._data.setitem(indexer=pi, value=v)
A:pandas.core.indexing.l->len(target)
A:pandas.core.indexing.sub_indexer->list(indexer)
A:pandas.core.indexing.multiindex_indexer->isinstance(labels, MultiIndex)
A:pandas.core.indexing.v->self._align_series(tuple(sub_indexer), value[item], multiindex_indexer)
A:pandas.core.indexing.self.obj._data->self.obj._data.setitem(indexer=indexer, value=value)
A:pandas.core.indexing.sum_aligners->sum(aligners)
A:pandas.core.indexing.new_ix->Index(new_ix)
A:pandas.core.indexing.ser->numpy.tile(ser, l).reshape(shape)
A:pandas.core.indexing.cols->ax[ix].ravel()
A:pandas.core.indexing.retval->getattr(retval, self.name)._getitem_axis(key, axis=axis)
A:pandas.core.indexing.d->dict([(a, self._convert_for_reindex(t, axis=o._get_axis_number(a))) for (t, a) in zip(tup, o._AXIS_ORDERS)])
A:pandas.core.indexing.keyarr->_ensure_platform_int(keyarr)
A:pandas.core.indexing.ax0->self.obj._get_axis(0)
A:pandas.core.indexing.result->numpy.asarray(result, dtype=bool)
A:pandas.core.indexing.section->self._getitem_axis(key, axis=i)
A:pandas.core.indexing.(inds,)->list(self._convert_key(key, is_setter=True)).nonzero()
A:pandas.core.indexing.(indexer, keyarr)->self.obj._get_axis(axis)._convert_listlike_indexer(key, kind=self.name)
A:pandas.core.indexing.(new_target, indexer, new_indexer)->self.obj._get_axis(axis)._reindex_non_unique(keyarr)
A:pandas.core.indexing.is_int_index->self.obj._get_axis(axis).is_integer()
A:pandas.core.indexing.(indexer, objarr)->self.obj._get_axis(axis)._convert_listlike_indexer(obj, kind=self.name)
A:pandas.core.indexing.indexercheck->self.obj._get_axis(axis).get_indexer(objarr)
A:pandas.core.indexing.check->numpy.zeros_like(objarr)
A:pandas.core.indexing.locs->self.obj._get_axis(axis).get_locs(key)
A:pandas.core.indexing.arr->numpy.array(key)
A:pandas.core.indexing.slice_obj->self._convert_slice_indexer(slice_obj, axis)
A:pandas.core.indexing.mask->isnull(result._values)
A:pandas.core.indexing.indices->numpy.array(indices)
A:pandas.core.indexing.kinds->tuple(list(compat.string_types) + [ABCSeries, np.ndarray, Index, list])
pandas.core.indexing.IndexingError(Exception)
pandas.core.indexing._AtIndexer(_ScalarAccessIndexer)
pandas.core.indexing._AtIndexer._convert_key(self,key,is_setter=False)
pandas.core.indexing._IXIndexer(self,obj,name)
pandas.core.indexing._IXIndexer.__init__(self,obj,name)
pandas.core.indexing._IXIndexer._has_valid_type(self,key,axis)
pandas.core.indexing._IndexSlice(object)
pandas.core.indexing._IndexSlice.__getitem__(self,arg)
pandas.core.indexing._LocIndexer(_LocationIndexer)
pandas.core.indexing._LocIndexer._get_partial_string_timestamp_match_key(self,key,labels)
pandas.core.indexing._LocIndexer._getitem_axis(self,key,axis=0)
pandas.core.indexing._LocIndexer._getitem_scalar(self,key)
pandas.core.indexing._LocIndexer._has_valid_type(self,key,axis)
pandas.core.indexing._LocIndexer._is_scalar_access(self,key)
pandas.core.indexing._LocationIndexer(_NDFrameIndexer)
pandas.core.indexing._LocationIndexer.__getitem__(self,key)
pandas.core.indexing._LocationIndexer._get_slice_axis(self,slice_obj,axis=0)
pandas.core.indexing._LocationIndexer._getbool_axis(self,key,axis=0)
pandas.core.indexing._LocationIndexer._getitem_axis(self,key,axis=0)
pandas.core.indexing._LocationIndexer._getitem_scalar(self,key)
pandas.core.indexing._LocationIndexer._is_scalar_access(self,key)
pandas.core.indexing._NDFrameIndexer(self,obj,name)
pandas.core.indexing._NDFrameIndexer.__getitem__(self,key)
pandas.core.indexing._NDFrameIndexer.__init__(self,obj,name)
pandas.core.indexing._NDFrameIndexer.__iter__(self)
pandas.core.indexing._NDFrameIndexer.__setitem__(self,key,value)
pandas.core.indexing._NDFrameIndexer._align_frame(self,indexer,df)
pandas.core.indexing._NDFrameIndexer._align_panel(self,indexer,df)
pandas.core.indexing._NDFrameIndexer._align_series(self,indexer,ser,multiindex_indexer=False)
pandas.core.indexing._NDFrameIndexer._convert_for_reindex(self,key,axis=0)
pandas.core.indexing._NDFrameIndexer._convert_range(self,key,is_setter=False)
pandas.core.indexing._NDFrameIndexer._convert_scalar_indexer(self,key,axis)
pandas.core.indexing._NDFrameIndexer._convert_slice_indexer(self,key,axis)
pandas.core.indexing._NDFrameIndexer._convert_to_indexer(self,obj,axis=0,is_setter=False)
pandas.core.indexing._NDFrameIndexer._convert_tuple(self,key,is_setter=False)
pandas.core.indexing._NDFrameIndexer._get_label(self,label,axis=0)
pandas.core.indexing._NDFrameIndexer._get_loc(self,key,axis=0)
pandas.core.indexing._NDFrameIndexer._get_setitem_indexer(self,key)
pandas.core.indexing._NDFrameIndexer._get_slice_axis(self,slice_obj,axis=0)
pandas.core.indexing._NDFrameIndexer._getitem_axis(self,key,axis=0)
pandas.core.indexing._NDFrameIndexer._getitem_iterable(self,key,axis=0)
pandas.core.indexing._NDFrameIndexer._getitem_lowerdim(self,tup)
pandas.core.indexing._NDFrameIndexer._getitem_nested_tuple(self,tup)
pandas.core.indexing._NDFrameIndexer._getitem_tuple(self,tup)
pandas.core.indexing._NDFrameIndexer._handle_lowerdim_multi_index_axis0(self,tup)
pandas.core.indexing._NDFrameIndexer._has_valid_positional_setitem_indexer(self,indexer)
pandas.core.indexing._NDFrameIndexer._has_valid_setitem_indexer(self,indexer)
pandas.core.indexing._NDFrameIndexer._has_valid_tuple(self,key)
pandas.core.indexing._NDFrameIndexer._has_valid_type(self,k,axis)
pandas.core.indexing._NDFrameIndexer._is_nested_tuple_indexer(self,tup)
pandas.core.indexing._NDFrameIndexer._multi_take(self,tup)
pandas.core.indexing._NDFrameIndexer._multi_take_opportunity(self,tup)
pandas.core.indexing._NDFrameIndexer._setitem_with_indexer(self,indexer,value)
pandas.core.indexing._NDFrameIndexer._should_validate_iterable(self,axis=0)
pandas.core.indexing._NDFrameIndexer._slice(self,obj,axis=0,kind=None)
pandas.core.indexing._NDFrameIndexer._tuplify(self,loc)
pandas.core.indexing._ScalarAccessIndexer(_NDFrameIndexer)
pandas.core.indexing._ScalarAccessIndexer.__getitem__(self,key)
pandas.core.indexing._ScalarAccessIndexer.__setitem__(self,key,value)
pandas.core.indexing._ScalarAccessIndexer._convert_key(self,key,is_setter=False)
pandas.core.indexing._iAtIndexer(_ScalarAccessIndexer)
pandas.core.indexing._iAtIndexer._convert_key(self,key,is_setter=False)
pandas.core.indexing._iAtIndexer._has_valid_setitem_indexer(self,indexer)
pandas.core.indexing._iLocIndexer(_LocationIndexer)
pandas.core.indexing._iLocIndexer._convert_to_indexer(self,obj,axis=0,is_setter=False)
pandas.core.indexing._iLocIndexer._get_list_axis(self,key,axis=0)
pandas.core.indexing._iLocIndexer._get_slice_axis(self,slice_obj,axis=0)
pandas.core.indexing._iLocIndexer._getitem_axis(self,key,axis=0)
pandas.core.indexing._iLocIndexer._getitem_scalar(self,key)
pandas.core.indexing._iLocIndexer._getitem_tuple(self,tup)
pandas.core.indexing._iLocIndexer._has_valid_setitem_indexer(self,indexer)
pandas.core.indexing._iLocIndexer._has_valid_type(self,key,axis)
pandas.core.indexing._iLocIndexer._is_scalar_access(self,key)
pandas.core.indexing._iLocIndexer._is_valid_integer(self,key,axis)
pandas.core.indexing._iLocIndexer._is_valid_list_like(self,key,axis)
pandas.core.indexing._maybe_numeric_slice(df,slice_,include_bool=False)
pandas.core.indexing._non_reducing_slice(slice_)
pandas.core.indexing.check_bool_indexer(ax,key)
pandas.core.indexing.convert_from_missing_indexer_tuple(indexer,axes)
pandas.core.indexing.convert_missing_indexer(indexer)
pandas.core.indexing.convert_to_index_sliceable(obj,key)
pandas.core.indexing.get_indexers_list()
pandas.core.indexing.is_index_slice(obj)
pandas.core.indexing.is_label_like(key)
pandas.core.indexing.is_list_like_indexer(key)
pandas.core.indexing.is_nested_tuple(tup,labels)
pandas.core.indexing.length_of_indexer(indexer,target=None)
pandas.core.indexing.maybe_convert_indices(indices,n)
pandas.core.indexing.maybe_convert_ix(*args)
pandas.core.indexing.maybe_droplevels(index,key)
pandas.core.indexing.need_slice(obj)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/sorting.py----------------------------------------
A:pandas.core.sorting.acc->long(1)
A:pandas.core.sorting.nlev->_int64_cut_off(shape)
A:pandas.core.sorting.stride->numpy.prod(shape[1:nlev], dtype='i8')
A:pandas.core.sorting.(comp_ids, obs_ids)->compress_group_index(out, sort=sort)
A:pandas.core.sorting.labels->pandas.core.algorithms.take_nd(reverse_indexer, labels, allow_fill=False)
A:pandas.core.sorting.(labels, shape)->map(list, zip(*map(maybe_lift, labels, shape)))
A:pandas.core.sorting.ids->get_group_index(labels, shape, sort=True, xnull=False)
A:pandas.core.sorting.the_prod->long(1)
A:pandas.core.sorting.lift->numpy.fromiter(((a == -1).any() for a in labels), dtype='i8')
A:pandas.core.sorting.out->decons_group_index(obs_ids, shape)
A:pandas.core.sorting.i->unique_label_indices(comp_ids)
A:pandas.core.sorting.(ids, obs)->compress_group_index(ids, sort=True)
A:pandas.core.sorting.ngroups->len(obs)
A:pandas.core.sorting.c->Categorical(key, ordered=True)
A:pandas.core.sorting.n->len(c.categories)
A:pandas.core.sorting.codes->numpy.where(mask, 0, n - codes)
A:pandas.core.sorting.items->numpy.asanyarray(items)
A:pandas.core.sorting.idx->numpy.arange(len(items))
A:pandas.core.sorting.mask->isnull(items)
A:pandas.core.sorting.indexer->numpy.concatenate([nan_idx, indexer])
A:pandas.core.sorting.self.comp_ids->comp_ids.astype(np.int64)
A:pandas.core.sorting.self.k->len(labels)
A:pandas.core.sorting.mapper->_KeyMapper(comp_ids, ngroups, levels, labels)
A:pandas.core.sorting.shape->list(map(len, keys))
A:pandas.core.sorting.group_index->_ensure_int64(group_index)
A:pandas.core.sorting.sorter->pandas.core.algorithms.take_nd(uniques, sorter, allow_fill=False).argsort()
A:pandas.core.sorting.count->len(group_index)
A:pandas.core.sorting.(sorter, _)->pandas._libs.algos.groupsort_indexer(_ensure_int64(group_index), ngroups)
A:pandas.core.sorting.size_hint->min(len(group_index), hashtable._SIZE_HINT_LIMIT)
A:pandas.core.sorting.table->pandas._libs.hashtable.Int64HashTable(size_hint)
A:pandas.core.sorting.(comp_ids, obs_group_ids)->pandas._libs.hashtable.Int64HashTable(size_hint).get_labels_groupby(group_index)
A:pandas.core.sorting.(obs_group_ids, comp_ids)->_reorder_by_uniques(obs_group_ids, comp_ids)
A:pandas.core.sorting.reverse_indexer->numpy.empty(len(sorter), dtype=np.int64)
A:pandas.core.sorting.uniques->pandas.core.algorithms.take_nd(uniques, sorter, allow_fill=False)
pandas.core.sorting._KeyMapper(self,comp_ids,ngroups,levels,labels)
pandas.core.sorting._KeyMapper.__init__(self,comp_ids,ngroups,levels,labels)
pandas.core.sorting._KeyMapper._populate_tables(self)
pandas.core.sorting._KeyMapper.get_key(self,comp_id)
pandas.core.sorting._reorder_by_uniques(uniques,labels)
pandas.core.sorting.compress_group_index(group_index,sort=True)
pandas.core.sorting.decons_group_index(comp_labels,shape)
pandas.core.sorting.decons_obs_group_ids(comp_ids,obs_ids,shape,labels,xnull)
pandas.core.sorting.get_compressed_ids(labels,sizes)
pandas.core.sorting.get_flattened_iterator(comp_ids,ngroups,levels,labels)
pandas.core.sorting.get_group_index(labels,shape,sort,xnull)
pandas.core.sorting.get_group_index_sorter(group_index,ngroups)
pandas.core.sorting.get_indexer_dict(label_list,keys)
pandas.core.sorting.indexer_from_factorized(labels,shape,compress=True)
pandas.core.sorting.is_int64_overflow_possible(shape)
pandas.core.sorting.lexsort_indexer(keys,orders=None,na_position='last')
pandas.core.sorting.nargsort(items,kind='quicksort',ascending=True,na_position='last')


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/panel4d.py----------------------------------------
A:pandas.core.panel4d.Panel4D->create_nd_panel_factory(klass_name='Panel4D', orders=['labels', 'items', 'major_axis', 'minor_axis'], slices={'labels': 'labels', 'items': 'items', 'major_axis': 'major_axis', 'minor_axis': 'minor_axis'}, slicer=Panel, aliases={'major': 'major_axis', 'minor': 'minor_axis'}, stat_axis=2, ns=dict(__doc__='\n    Panel4D is a 4-Dimensional named container very much like a Panel, but\n    having 4 named dimensions. It is intended as a test bed for more\n    N-Dimensional named containers.\n\n    DEPRECATED. Panel4D is deprecated and will be removed in a future version.\n    The recommended way to represent these types of n-dimensional data are with\n    the `xarray package <http://xarray.pydata.org/en/stable/>`__.\n    Pandas provides a `.to_xarray()` method to automate this conversion.\n\n    Parameters\n    ----------\n    data : ndarray (labels x items x major x minor), or dict of Panels\n\n    labels : Index or array-like : axis=0\n    items  : Index or array-like : axis=1\n    major_axis : Index or array-like: axis=2\n    minor_axis : Index or array-like: axis=3\n\n    dtype : dtype, default None\n    Data type to force, otherwise infer\n    copy : boolean, default False\n    Copy data from inputs. Only affects DataFrame / 2d ndarray input\n    '))
pandas.core.panel4d.panel4d_init(self,data=None,labels=None,items=None,major_axis=None,minor_axis=None,copy=False,dtype=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/internals.py----------------------------------------
A:pandas.core.internals.values->pandas.core.algorithms.take_nd(values, indexer, axis=ax, fill_value=fill_value)
A:pandas.core.internals.new_mgr_locs->numpy.concatenate([b.mgr_locs.as_array for b in blocks])
A:pandas.core.internals.name->pprint_thing(self.__class__.__name__)
A:pandas.core.internals.shape->tuple(shape)
A:pandas.core.internals.self.mgr_locs->self.mgr_locs.delete(loc)
A:pandas.core.internals.new_values->numpy.vstack([x.view('i8') for x in to_stack])
A:pandas.core.internals.loc->self.items.get_loc(item)
A:pandas.core.internals.self.values->SparseArray(v, sparse_index=self.sp_index, kind=self.kind, dtype=v.dtype, fill_value=self.values.fill_value, copy=False)
A:pandas.core.internals.result->op(a, b)
A:pandas.core.internals.inplace->validate_bool_kwarg(inplace, 'inplace')
A:pandas.core.internals.mask->numpy.zeros(np.prod(shape), dtype=bool)
A:pandas.core.internals.(values, _, value, _)->self._try_coerce_args(self.values, value)
A:pandas.core.internals.blocks->form_blocks(arrays, names, axes)
A:pandas.core.internals.nv->pandas._libs.tslib.cast_to_nanoseconds(v).astype(dtype)
A:pandas.core.internals.dtype->find_common_type([b.dtype for b in blocks])
A:pandas.core.internals.invalid_arg->"Expected value of kwarg 'errors' to be one of {}. Supplied value is '{}'".format(list(errors_legal_values), errors)
A:pandas.core.internals.newb->make_block(values=blk.values[slicer], klass=blk.__class__, fastpath=True, placement=blk.mgr_locs)
A:pandas.core.internals.(values, _, to_replace, _)->self._try_coerce_args(self.values, to_replace)
A:pandas.core.internals.arr_value->numpy.array(value)
A:pandas.core.internals.(dtype, _)->maybe_promote(n.dtype)
A:pandas.core.internals.l->len(values)
A:pandas.core.internals.indexer->maybe_convert_indices(indexer, length)
A:pandas.core.internals.block->make_block(array, klass=SparseBlock, fastpath=True, placement=[i])
A:pandas.core.internals.new->new.reshape(tuple(new_shape)).reshape(tuple(new_shape))
A:pandas.core.internals.new_shape->list(values.shape)
A:pandas.core.internals.n->numpy.repeat(np.array(n, ndmin=1), len(m))
A:pandas.core.internals.m->pandas.core.missing.clean_interp_method(method, **kwargs)
A:pandas.core.internals.r->self._try_cast_result(result.take(m.nonzero()[0], axis=axis))
A:pandas.core.internals.(values, _, fill_value, _)->self._try_coerce_args(values, fill_value)
A:pandas.core.internals.data->data.astype(np.float64).astype(np.float64)
A:pandas.core.internals.interp_values->numpy.apply_along_axis(func, axis, data)
A:pandas.core.internals.slc->pandas._libs.lib.indexer_as_slice(indexer)
A:pandas.core.internals.(new_values, fill_value)->maybe_upcast(new_values)
A:pandas.core.internals.axis_indexer[axis]->slice(periods, None)
A:pandas.core.internals.(values, values_mask, other, other_mask)->self._try_coerce_args(values, other)
A:pandas.core.internals.other->pandas._libs.lib.Timestamp(other)
A:pandas.core.internals.cond->cond.swapaxes(axis, 0).swapaxes(axis, 0)
A:pandas.core.internals.(values, _, _, _)->self._try_coerce_args(values, values)
A:pandas.core.internals.ax->Float64Index([qs])
A:pandas.core.internals.(new_values, _, new, _)->self._try_coerce_args(new_values, new)
A:pandas.core.internals.element->numpy.array(element)
A:pandas.core.internals.formatter->FloatArrayFormatter(values, na_rep=na_rep, float_format=float_format, decimal=decimal, quoting=quoting, fixed_width=False)
A:pandas.core.internals.value->_safe_reshape(value, (1,) + value.shape)
A:pandas.core.internals.values_mask->_block_shape(isnull(values), ndim=self.ndim)
A:pandas.core.internals.other_mask->isnull(other)
A:pandas.core.internals.rvalues->numpy.empty(values.shape, dtype=object)
A:pandas.core.internals.imask->(~mask).ravel()
A:pandas.core.internals.rvalues.flat[imask]->numpy.array([Timedelta(val)._repr_base(format='all') for val in values.ravel()[imask]], dtype=object)
A:pandas.core.internals.to_replace_values->numpy.atleast_1d(to_replace)
A:pandas.core.internals.new_shape[0]->len(self.items)
A:pandas.core.internals.to_rep_is_list->is_list_like(to_replace)
A:pandas.core.internals.value_is_list->is_list_like(value)
A:pandas.core.internals.result_blocks->_extend_blocks(applied, result_blocks)
A:pandas.core.internals.regex_re->is_re_compilable(regex)
A:pandas.core.internals.rx->re.compile(to_replace)
A:pandas.core.internals.f->numpy.vectorize(re_replacer, otypes=[self.dtype])
A:pandas.core.internals.filt->slice(None)
A:pandas.core.internals.new_values[filt]->f(new_values[filt])
A:pandas.core.internals.format->_get_format_datetime64_from_values(values, date_format)
A:pandas.core.internals.tz->getattr(other, 'tz', None)
A:pandas.core.internals.N->len(self.values.T)
A:pandas.core.internals.indexer[periods:]->numpy.arange(N - periods)
A:pandas.core.internals.indexer[:periods]->numpy.arange(-periods, N)
A:pandas.core.internals.self.blocks->tuple((blk for (i, blk) in enumerate(self.blocks) if i not in set(removed_blknos)))
A:pandas.core.internals.new_labels->self.axes[axis].take(indexer)
A:pandas.core.internals.old_len->len(self.axes[axis])
A:pandas.core.internals.new_len->len(new_labels)
A:pandas.core.internals.obj->self.copy(deep=copy)
A:pandas.core.internals.new_blknos->numpy.empty(self.nblocks, dtype=np.int64)
A:pandas.core.internals.new_blklocs->numpy.empty(self.shape[0], dtype=np.int64)
A:pandas.core.internals.new_blklocs[rl.indexer]->numpy.arange(len(rl))
A:pandas.core.internals.items->property(fget=_get_items)
A:pandas.core.internals.counts->numpy.bincount(arr.astype(np.int_))
A:pandas.core.internals.v->pandas._libs.tslib.cast_to_nanoseconds(v)
A:pandas.core.internals.dtypes->numpy.array([blk.dtype for blk in self.blocks])
A:pandas.core.internals.ftypes->numpy.array([blk.ftype for blk in self.blocks])
A:pandas.core.internals.output->pprint_thing(self.__class__.__name__)
A:pandas.core.internals.tot_items->sum((b.shape[0] for b in blocks))
A:pandas.core.internals.filter_locs->set(self.items.get_indexer_for(filter))
A:pandas.core.internals.aligned_args->dict(((k, kwargs[k]) for k in align_keys if hasattr(kwargs[k], 'reindex_axis')))
A:pandas.core.internals.axis->getattr(obj, '_info_axis_number', 0)
A:pandas.core.internals.kwargs[k]->self.copy(deep=copy).reindex_axis(b_items, axis=axis, copy=align_copy)
A:pandas.core.internals.applied->getattr(b, f)(**kwargs)
A:pandas.core.internals.bm->self.__class__(self.blocks, self.axes)
A:pandas.core.internals.(axe, block)->getattr(b, f)(axis=axis, **kwargs)
A:pandas.core.internals.ndim->set([b.ndim for b in blocks])
A:pandas.core.internals.new_axes->list(self.axes)
A:pandas.core.internals.new_axes[axis]->Index(np.concatenate([ax.values for ax in axes]))
A:pandas.core.internals.axes->list(self.axes)
A:pandas.core.internals.(dtype, val)->infer_dtype_from_scalar(scalar, pandas_dtype=True)
A:pandas.core.internals.new_rb->_extend_blocks(result, new_rb)
A:pandas.core.internals.(b, val)->_cast_scalar(b, d)
A:pandas.core.internals.inv_indexer->pandas._libs.lib.get_reverse_indexer(indexer, self.shape[0])
A:pandas.core.internals.b->b.copy(deep=copy).copy(deep=copy)
A:pandas.core.internals.b.mgr_locs->pandas.core.algorithms.take_1d(inv_indexer, b.mgr_locs.as_array, axis=0, allow_fill=False)
A:pandas.core.internals.axes[0]->self.items.take(indexer)
A:pandas.core.internals.new_blocks->_extend_blocks(merged_blocks, new_blocks)
A:pandas.core.internals.slicer->tuple(slicer)
A:pandas.core.internals.mgr->BlockManager(blocks, axes)
A:pandas.core.internals.itemmask->numpy.zeros(self.shape[0])
A:pandas.core.internals.result[rl.indexer]->blk.copy(deep=False).get_values(dtype)
A:pandas.core.internals.vals->vals.copy().copy()
A:pandas.core.internals.result[rl]->blk.copy(deep=False)._try_coerce_result(blk.iget((i, loc)))
A:pandas.core.internals.full_loc->list((ax.get_loc(x) for (ax, x) in zip(self.axes, tup)))
A:pandas.core.internals.is_deleted->numpy.zeros(self.nblocks, dtype=np.bool_)
A:pandas.core.internals.blk.mgr_locs->blk.copy(deep=False).mgr_locs.add(offset)
A:pandas.core.internals.value_is_extension_type->is_extension_type(value)
A:pandas.core.internals.blklocs->pandas.core.algorithms.take_1d(mgr._blklocs, ax0_indexer, fill_value=-1)
A:pandas.core.internals.self._blklocs[blk.mgr_locs.indexer]->numpy.arange(len(blk))
A:pandas.core.internals.new_blknos[~is_deleted]->numpy.arange(self.nblocks - len(removed_blknos))
A:pandas.core.internals.self._blknos->numpy.insert(self._blknos, loc, len(self.blocks))
A:pandas.core.internals.unfit_mgr_locs->numpy.concatenate(unfit_mgr_locs)
A:pandas.core.internals.unfit_count->len(unfit_mgr_locs)
A:pandas.core.internals.unfit_val_items->unfit_val_locs[0].append(unfit_val_locs[1:])
A:pandas.core.internals.self._blknos[unfit_mgr_locs]->len(self.blocks)
A:pandas.core.internals.self._blklocs[unfit_mgr_locs]->numpy.arange(unfit_count)
A:pandas.core.internals.new_axis->self.items.insert(loc, item)
A:pandas.core.internals.self._blklocs->numpy.insert(self._blklocs, loc, 0)
A:pandas.core.internals.new_index->_ensure_index(new_index)
A:pandas.core.internals.(new_index, indexer)->self.axes[axis].reindex(new_index, method=method, limit=limit)
A:pandas.core.internals.result.axes->list(self.axes)
A:pandas.core.internals.(sl_type, slobj, sllen)->_preprocess_slice_or_indexer(slice_or_indexer, self.shape[0], allow_fill=allow_fill)
A:pandas.core.internals.(_, fill_value)->maybe_promote(blk.dtype)
A:pandas.core.internals.blknos->pandas.core.algorithms.take_1d(mgr._blknos, ax0_indexer, fill_value=-1)
A:pandas.core.internals.newblk->blk.copy(deep=False).copy(deep=True)
A:pandas.core.internals.newblk.mgr_locs->slice(mgr_loc, mgr_loc + 1)
A:pandas.core.internals.block_shape->list(self.shape)
A:pandas.core.internals.block_shape[0]->len(placement)
A:pandas.core.internals.(dtype, fill_value)->maybe_promote(values.dtype)
A:pandas.core.internals.block_values->numpy.empty(shape, dtype=object)
A:pandas.core.internals.(l, r)->items_overlap_with_suffix(left=self.items, lsuffix=lsuffix, right=other.items, rsuffix=rsuffix)
A:pandas.core.internals.new_items->_concat_indexes([l, r])
A:pandas.core.internals.blk->blk.copy(deep=False).copy(deep=False)
A:pandas.core.internals.self_blocks->sorted(self.blocks, key=canonicalize)
A:pandas.core.internals.other_blocks->sorted(other.blocks, key=canonicalize)
A:pandas.core.internals.self.axes[0]->self.axes[0].delete(loc)
A:pandas.core.internals.passed->tuple(map(int, [tot_items] + list(block_shape)))
A:pandas.core.internals.implied->tuple(map(int, [len(ax) for ax in axes]))
A:pandas.core.internals.names_idx->Index(names)
A:pandas.core.internals.names_indexer->Index(names).get_indexer_for(axes[0])
A:pandas.core.internals.float_blocks->_multi_blockify(float_items)
A:pandas.core.internals.complex_blocks->_multi_blockify(complex_items)
A:pandas.core.internals.int_blocks->_multi_blockify(int_items)
A:pandas.core.internals.datetime_blocks->_simple_blockify(datetime_items, _NS_DTYPE)
A:pandas.core.internals.bool_blocks->_simple_blockify(bool_items, np.bool_)
A:pandas.core.internals.object_blocks->_simple_blockify(object_items, np.object_)
A:pandas.core.internals.sparse_blocks->_sparse_blockify(sparse_items)
A:pandas.core.internals.na_block->make_block(block_values, placement=extra_locs)
A:pandas.core.internals.(values, placement)->_stack_arrays(list(tup_block), dtype)
A:pandas.core.internals.grouper->itertools.groupby(sorted(blocks, key=gkey), gkey)
A:pandas.core.internals.array->_maybe_to_sparse(array)
A:pandas.core.internals.(placement, names, arrays)->zip(*tuples)
A:pandas.core.internals.stacked->numpy.empty(shape, dtype=dtype)
A:pandas.core.internals.stacked[i]->_asarray_compat(arr)
A:pandas.core.internals.merged_blocks->_merge_blocks(list(group_blocks), dtype=dtype, _can_consolidate=_can_consolidate)
A:pandas.core.internals.argsort->numpy.argsort(new_mgr_locs)
A:pandas.core.internals.is_a_array->isinstance(a, np.ndarray)
A:pandas.core.internals.is_b_array->isinstance(b, np.ndarray)
A:pandas.core.internals.selector->_factor_indexer(shape[1:], labels)
A:pandas.core.internals.pvalues->numpy.empty(panel_shape, dtype=dtype)
A:pandas.core.internals.to_rename->left.intersection(right)
A:pandas.core.internals.arr->arr.reshape(new_shape).reshape(new_shape)
A:pandas.core.internals.nn_at->nn.astype(v.dtype)
A:pandas.core.internals.(idx,)->numpy.where(np.squeeze(m))
A:pandas.core.internals.concat_plan->combine_concat_plans([get_mgr_concatenation_plan(mgr, indexers) for (mgr, indexers) in mgrs_indexers], concat_axis)
A:pandas.core.internals.upcast_classes->defaultdict(list)
A:pandas.core.internals.null_upcast_classes->defaultdict(list)
A:pandas.core.internals.g->numpy.find_common_type(upcast_classes, [])
A:pandas.core.internals.(empty_dtype, upcasted_na)->get_empty_dtype_and_na(join_units)
A:pandas.core.internals.concat_values->pandas.core.dtypes.concat._concat_compat(to_concat, axis=concat_axis)
A:pandas.core.internals.mgr_shape->tuple(mgr_shape)
A:pandas.core.internals.mgr_shape[ax]->len(indexer)
A:pandas.core.internals.ax0_indexer->indexers.pop(0)
A:pandas.core.internals.join_unit_indexers->indexers.copy()
A:pandas.core.internals.shape[0]->len(placements)
A:pandas.core.internals.unit->JoinUnit(blk, shape, join_unit_indexers)
A:pandas.core.internals.retval->next(seq, None)
A:pandas.core.internals.plans->list(map(iter, plans))
A:pandas.core.internals.next_items->list(map(_next_or_none, plans))
A:pandas.core.internals.(placements, units)->zip(*next_items)
A:pandas.core.internals.lengths->list(map(len, placements))
A:pandas.core.internals.next_items[:]->map(_next_or_none, plans)
A:pandas.core.internals.next_items[i]->_next_or_none(plans[i])
A:pandas.core.internals.extra_block->join_unit.block.getitem_block(slice(length, None))
A:pandas.core.internals.join_unit.block->join_unit.block.getitem_block(slice(length))
A:pandas.core.internals.extra_indexers->copy.copy(join_unit.indexers)
A:pandas.core.internals.values_flat->pandas.core.algorithms.take_nd(values, indexer, axis=ax, fill_value=fill_value).ravel(order='K')
A:pandas.core.internals.chunk_len->max(total_len // 40, 1000)
A:pandas.core.internals.missing_arr->numpy.empty(self.shape, dtype=empty_dtype)
pandas.core.internals.Block(self,values,placement,ndim=None,fastpath=False)
pandas.core.internals.Block.__getstate__(self)
pandas.core.internals.Block.__init__(self,values,placement,ndim=None,fastpath=False)
pandas.core.internals.Block.__len__(self)
pandas.core.internals.Block.__setstate__(self,state)
pandas.core.internals.Block.__unicode__(self)
pandas.core.internals.Block._astype(self,dtype,copy=False,errors='raise',values=None,klass=None,mgr=None,**kwargs)
pandas.core.internals.Block._can_hold_element(self,value)
pandas.core.internals.Block._consolidate_key(self)
pandas.core.internals.Block._interpolate(self,method=None,index=None,values=None,fill_value=None,axis=0,limit=None,limit_direction='forward',inplace=False,downcast=None,mgr=None,**kwargs)
pandas.core.internals.Block._interpolate_with_fill(self,method='pad',axis=0,inplace=False,limit=None,fill_value=None,coerce=False,downcast=None,mgr=None)
pandas.core.internals.Block._is_single_block(self)
pandas.core.internals.Block._maybe_downcast(self,blocks,downcast=None)
pandas.core.internals.Block._na_value(self)
pandas.core.internals.Block._replace_single(self,*args,**kwargs)
pandas.core.internals.Block._slice(self,slicer)
pandas.core.internals.Block._try_cast(self,value)
pandas.core.internals.Block._try_cast_result(self,result,dtype=None)
pandas.core.internals.Block._try_coerce_and_cast_result(self,result,dtype=None)
pandas.core.internals.Block._try_coerce_args(self,values,other)
pandas.core.internals.Block._try_coerce_result(self,result)
pandas.core.internals.Block._try_fill(self,value)
pandas.core.internals.Block._try_operate(self,values)
pandas.core.internals.Block.apply(self,func,mgr=None,**kwargs)
pandas.core.internals.Block.array_dtype(self)
pandas.core.internals.Block.astype(self,dtype,copy=False,errors='raise',values=None,**kwargs)
pandas.core.internals.Block.convert(self,copy=True,**kwargs)
pandas.core.internals.Block.copy(self,deep=True,mgr=None)
pandas.core.internals.Block.delete(self,loc)
pandas.core.internals.Block.diff(self,n,axis=1,mgr=None)
pandas.core.internals.Block.downcast(self,dtypes=None,mgr=None)
pandas.core.internals.Block.dtype(self)
pandas.core.internals.Block.equals(self,other)
pandas.core.internals.Block.eval(self,func,other,raise_on_error=True,try_cast=False,mgr=None)
pandas.core.internals.Block.external_values(self,dtype=None)
pandas.core.internals.Block.fill_value(self)
pandas.core.internals.Block.fillna(self,value,limit=None,inplace=False,downcast=None,mgr=None)
pandas.core.internals.Block.ftype(self)
pandas.core.internals.Block.get(self,item)
pandas.core.internals.Block.get_values(self,dtype=None)
pandas.core.internals.Block.getitem_block(self,slicer,new_mgr_locs=None)
pandas.core.internals.Block.iget(self,i)
pandas.core.internals.Block.internal_values(self,dtype=None)
pandas.core.internals.Block.interpolate(self,method='pad',axis=0,index=None,values=None,inplace=False,limit=None,limit_direction='forward',fill_value=None,coerce=False,downcast=None,mgr=None,**kwargs)
pandas.core.internals.Block.is_categorical_astype(self,dtype)
pandas.core.internals.Block.is_datelike(self)
pandas.core.internals.Block.is_view(self)
pandas.core.internals.Block.itemsize(self)
pandas.core.internals.Block.make_block(self,values,placement=None,ndim=None,**kwargs)
pandas.core.internals.Block.make_block_same_class(self,values,placement=None,fastpath=True,**kwargs)
pandas.core.internals.Block.make_block_scalar(self,values,**kwargs)
pandas.core.internals.Block.merge(self,other)
pandas.core.internals.Block.mgr_locs(self)
pandas.core.internals.Block.mgr_locs(self,new_mgr_locs)
pandas.core.internals.Block.putmask(self,mask,new,align=True,inplace=False,axis=0,transpose=False,mgr=None)
pandas.core.internals.Block.quantile(self,qs,interpolation='linear',axis=0,mgr=None)
pandas.core.internals.Block.reindex_axis(self,indexer,method=None,axis=1,fill_value=None,limit=None,mask_info=None)
pandas.core.internals.Block.replace(self,to_replace,value,inplace=False,filter=None,regex=False,convert=True,mgr=None)
pandas.core.internals.Block.reshape_nd(self,labels,shape,ref_items,mgr=None)
pandas.core.internals.Block.set(self,locs,values,check=False)
pandas.core.internals.Block.setitem(self,indexer,value,mgr=None)
pandas.core.internals.Block.shape(self)
pandas.core.internals.Block.shift(self,periods,axis=0,mgr=None)
pandas.core.internals.Block.take_nd(self,indexer,axis,new_mgr_locs=None,fill_tuple=None)
pandas.core.internals.Block.to_dense(self)
pandas.core.internals.Block.to_native_types(self,slicer=None,na_rep='nan',quoting=None,**kwargs)
pandas.core.internals.Block.to_object_block(self,mgr)
pandas.core.internals.Block.where(self,other,cond,align=True,raise_on_error=True,try_cast=False,axis=0,transpose=False,mgr=None)
pandas.core.internals.BlockManager(self,blocks,axes,do_integrity_check=True,fastpath=True)
pandas.core.internals.BlockManager.__contains__(self,item)
pandas.core.internals.BlockManager.__getstate__(self)
pandas.core.internals.BlockManager.__init__(self,blocks,axes,do_integrity_check=True,fastpath=True)
pandas.core.internals.BlockManager.__len__(self)
pandas.core.internals.BlockManager.__nonzero__(self)
pandas.core.internals.BlockManager.__setstate__(self,state)
pandas.core.internals.BlockManager.__unicode__(self)
pandas.core.internals.BlockManager._consolidate_check(self)
pandas.core.internals.BlockManager._consolidate_inplace(self)
pandas.core.internals.BlockManager._get_counts(self,f)
pandas.core.internals.BlockManager._get_items(self)
pandas.core.internals.BlockManager._interleave(self)
pandas.core.internals.BlockManager._is_indexed_like(self,other)
pandas.core.internals.BlockManager._is_single_block(self)
pandas.core.internals.BlockManager._make_na_block(self,placement,fill_value=None)
pandas.core.internals.BlockManager._post_setstate(self)
pandas.core.internals.BlockManager._rebuild_blknos_and_blklocs(self)
pandas.core.internals.BlockManager._slice_take_blocks_ax0(self,slice_or_indexer,fill_tuple=None)
pandas.core.internals.BlockManager._verify_integrity(self)
pandas.core.internals.BlockManager.add_prefix(self,prefix)
pandas.core.internals.BlockManager.add_suffix(self,suffix)
pandas.core.internals.BlockManager.apply(self,f,axes=None,filter=None,do_integrity_check=False,consolidate=True,**kwargs)
pandas.core.internals.BlockManager.as_matrix(self,items=None)
pandas.core.internals.BlockManager.astype(self,dtype,**kwargs)
pandas.core.internals.BlockManager.combine(self,blocks,copy=True)
pandas.core.internals.BlockManager.consolidate(self)
pandas.core.internals.BlockManager.convert(self,**kwargs)
pandas.core.internals.BlockManager.copy(self,deep=True,mgr=None)
pandas.core.internals.BlockManager.delete(self,item)
pandas.core.internals.BlockManager.diff(self,**kwargs)
pandas.core.internals.BlockManager.downcast(self,**kwargs)
pandas.core.internals.BlockManager.equals(self,other)
pandas.core.internals.BlockManager.eval(self,**kwargs)
pandas.core.internals.BlockManager.fast_xs(self,loc)
pandas.core.internals.BlockManager.fillna(self,**kwargs)
pandas.core.internals.BlockManager.get(self,item,fastpath=True)
pandas.core.internals.BlockManager.get_bool_data(self,copy=False)
pandas.core.internals.BlockManager.get_dtype_counts(self)
pandas.core.internals.BlockManager.get_dtypes(self)
pandas.core.internals.BlockManager.get_ftype_counts(self)
pandas.core.internals.BlockManager.get_ftypes(self)
pandas.core.internals.BlockManager.get_numeric_data(self,copy=False)
pandas.core.internals.BlockManager.get_scalar(self,tup)
pandas.core.internals.BlockManager.get_slice(self,slobj,axis=0)
pandas.core.internals.BlockManager.iget(self,i,fastpath=True)
pandas.core.internals.BlockManager.insert(self,loc,item,value,allow_duplicates=False)
pandas.core.internals.BlockManager.interpolate(self,**kwargs)
pandas.core.internals.BlockManager.is_consolidated(self)
pandas.core.internals.BlockManager.is_datelike_mixed_type(self)
pandas.core.internals.BlockManager.is_mixed_type(self)
pandas.core.internals.BlockManager.is_numeric_mixed_type(self)
pandas.core.internals.BlockManager.is_view(self)
pandas.core.internals.BlockManager.isnull(self,**kwargs)
pandas.core.internals.BlockManager.make_empty(self,axes=None)
pandas.core.internals.BlockManager.merge(self,other,lsuffix='',rsuffix='')
pandas.core.internals.BlockManager.nblocks(self)
pandas.core.internals.BlockManager.ndim(self)
pandas.core.internals.BlockManager.putmask(self,**kwargs)
pandas.core.internals.BlockManager.quantile(self,**kwargs)
pandas.core.internals.BlockManager.reduction(self,f,axis=0,consolidate=True,transposed=False,**kwargs)
pandas.core.internals.BlockManager.reindex_axis(self,new_index,axis,method=None,limit=None,fill_value=None,copy=True)
pandas.core.internals.BlockManager.reindex_indexer(self,new_axis,indexer,axis,fill_value=None,allow_dups=False,copy=True)
pandas.core.internals.BlockManager.rename_axis(self,mapper,axis,copy=True,level=None)
pandas.core.internals.BlockManager.replace(self,**kwargs)
pandas.core.internals.BlockManager.replace_list(self,src_list,dest_list,inplace=False,regex=False,mgr=None)
pandas.core.internals.BlockManager.reshape_nd(self,axes,**kwargs)
pandas.core.internals.BlockManager.set(self,item,value,check=False)
pandas.core.internals.BlockManager.set_axis(self,axis,new_labels)
pandas.core.internals.BlockManager.setitem(self,**kwargs)
pandas.core.internals.BlockManager.shape(self)
pandas.core.internals.BlockManager.shift(self,**kwargs)
pandas.core.internals.BlockManager.take(self,indexer,axis=1,verify=True,convert=True)
pandas.core.internals.BlockManager.where(self,**kwargs)
pandas.core.internals.BlockManager.xs(self,key,axis=1,copy=True,takeable=False)
pandas.core.internals.BoolBlock(NumericBlock)
pandas.core.internals.BoolBlock._can_hold_element(self,element)
pandas.core.internals.BoolBlock._try_cast(self,element)
pandas.core.internals.BoolBlock.replace(self,to_replace,value,inplace=False,filter=None,regex=False,convert=True,mgr=None)
pandas.core.internals.BoolBlock.should_store(self,value)
pandas.core.internals.CategoricalBlock(self,values,placement,fastpath=False,**kwargs)
pandas.core.internals.CategoricalBlock.__init__(self,values,placement,fastpath=False,**kwargs)
pandas.core.internals.CategoricalBlock._astype(self,dtype,copy=False,errors='raise',values=None,klass=None,mgr=None)
pandas.core.internals.CategoricalBlock._slice(self,slicer)
pandas.core.internals.CategoricalBlock._try_coerce_result(self,result)
pandas.core.internals.CategoricalBlock.array_dtype(self)
pandas.core.internals.CategoricalBlock.convert(self,copy=True,**kwargs)
pandas.core.internals.CategoricalBlock.fillna(self,value,limit=None,inplace=False,downcast=None,mgr=None)
pandas.core.internals.CategoricalBlock.interpolate(self,method='pad',axis=0,inplace=False,limit=None,fill_value=None,**kwargs)
pandas.core.internals.CategoricalBlock.is_view(self)
pandas.core.internals.CategoricalBlock.shift(self,periods,axis=0,mgr=None)
pandas.core.internals.CategoricalBlock.take_nd(self,indexer,axis=0,new_mgr_locs=None,fill_tuple=None)
pandas.core.internals.CategoricalBlock.to_dense(self)
pandas.core.internals.CategoricalBlock.to_native_types(self,slicer=None,na_rep='',quoting=None,**kwargs)
pandas.core.internals.ComplexBlock(FloatOrComplexBlock)
pandas.core.internals.ComplexBlock._can_hold_element(self,element)
pandas.core.internals.ComplexBlock._try_cast(self,element)
pandas.core.internals.ComplexBlock.should_store(self,value)
pandas.core.internals.DatetimeBlock(self,values,placement,fastpath=False,**kwargs)
pandas.core.internals.DatetimeBlock.__init__(self,values,placement,fastpath=False,**kwargs)
pandas.core.internals.DatetimeBlock._astype(self,dtype,mgr=None,**kwargs)
pandas.core.internals.DatetimeBlock._box_func(self)
pandas.core.internals.DatetimeBlock._can_hold_element(self,element)
pandas.core.internals.DatetimeBlock._try_cast(self,element)
pandas.core.internals.DatetimeBlock._try_coerce_args(self,values,other)
pandas.core.internals.DatetimeBlock._try_coerce_result(self,result)
pandas.core.internals.DatetimeBlock.set(self,locs,values,check=False)
pandas.core.internals.DatetimeBlock.should_store(self,value)
pandas.core.internals.DatetimeBlock.to_native_types(self,slicer=None,na_rep=None,date_format=None,quoting=None,**kwargs)
pandas.core.internals.DatetimeLikeBlockMixin(object)
pandas.core.internals.DatetimeLikeBlockMixin._na_value(self)
pandas.core.internals.DatetimeLikeBlockMixin._try_operate(self,values)
pandas.core.internals.DatetimeLikeBlockMixin.fill_value(self)
pandas.core.internals.DatetimeLikeBlockMixin.get_values(self,dtype=None)
pandas.core.internals.DatetimeTZBlock(self,values,placement,ndim=2,**kwargs)
pandas.core.internals.DatetimeTZBlock.__init__(self,values,placement,ndim=2,**kwargs)
pandas.core.internals.DatetimeTZBlock._box_func(self)
pandas.core.internals.DatetimeTZBlock._slice(self,slicer)
pandas.core.internals.DatetimeTZBlock._try_coerce_args(self,values,other)
pandas.core.internals.DatetimeTZBlock._try_coerce_result(self,result)
pandas.core.internals.DatetimeTZBlock.copy(self,deep=True,mgr=None)
pandas.core.internals.DatetimeTZBlock.external_values(self)
pandas.core.internals.DatetimeTZBlock.get_values(self,dtype=None)
pandas.core.internals.DatetimeTZBlock.shift(self,periods,axis=0,mgr=None)
pandas.core.internals.DatetimeTZBlock.to_object_block(self,mgr)
pandas.core.internals.FloatBlock(FloatOrComplexBlock)
pandas.core.internals.FloatBlock._can_hold_element(self,element)
pandas.core.internals.FloatBlock._try_cast(self,element)
pandas.core.internals.FloatBlock.should_store(self,value)
pandas.core.internals.FloatBlock.to_native_types(self,slicer=None,na_rep='',float_format=None,decimal='.',quoting=None,**kwargs)
pandas.core.internals.FloatOrComplexBlock(NumericBlock)
pandas.core.internals.FloatOrComplexBlock.equals(self,other)
pandas.core.internals.IntBlock(NumericBlock)
pandas.core.internals.IntBlock._can_hold_element(self,element)
pandas.core.internals.IntBlock._try_cast(self,element)
pandas.core.internals.IntBlock.should_store(self,value)
pandas.core.internals.JoinUnit(self,block,shape,indexers=None)
pandas.core.internals.JoinUnit.__init__(self,block,shape,indexers=None)
pandas.core.internals.JoinUnit.__repr__(self)
pandas.core.internals.JoinUnit.dtype(self)
pandas.core.internals.JoinUnit.get_reindexed_values(self,empty_dtype,upcasted_na)
pandas.core.internals.JoinUnit.is_null(self)
pandas.core.internals.JoinUnit.needs_filling(self)
pandas.core.internals.NonConsolidatableMixIn(self,values,placement,ndim=None,fastpath=False,**kwargs)
pandas.core.internals.NonConsolidatableMixIn.__init__(self,values,placement,ndim=None,fastpath=False,**kwargs)
pandas.core.internals.NonConsolidatableMixIn._slice(self,slicer)
pandas.core.internals.NonConsolidatableMixIn._try_cast_result(self,result,dtype=None)
pandas.core.internals.NonConsolidatableMixIn.get(self,item)
pandas.core.internals.NonConsolidatableMixIn.get_values(self,dtype=None)
pandas.core.internals.NonConsolidatableMixIn.iget(self,col)
pandas.core.internals.NonConsolidatableMixIn.putmask(self,mask,new,align=True,inplace=False,axis=0,transpose=False,mgr=None)
pandas.core.internals.NonConsolidatableMixIn.set(self,locs,values,check=False)
pandas.core.internals.NonConsolidatableMixIn.shape(self)
pandas.core.internals.NonConsolidatableMixIn.should_store(self,value)
pandas.core.internals.NumericBlock(Block)
pandas.core.internals.ObjectBlock(self,values,ndim=2,fastpath=False,placement=None,**kwargs)
pandas.core.internals.ObjectBlock.__init__(self,values,ndim=2,fastpath=False,placement=None,**kwargs)
pandas.core.internals.ObjectBlock._can_hold_element(self,element)
pandas.core.internals.ObjectBlock._maybe_downcast(self,blocks,downcast=None)
pandas.core.internals.ObjectBlock._replace_single(self,to_replace,value,inplace=False,filter=None,regex=False,convert=True,mgr=None)
pandas.core.internals.ObjectBlock._try_cast(self,element)
pandas.core.internals.ObjectBlock.convert(self,*args,**kwargs)
pandas.core.internals.ObjectBlock.is_bool(self)
pandas.core.internals.ObjectBlock.replace(self,to_replace,value,inplace=False,filter=None,regex=False,convert=True,mgr=None)
pandas.core.internals.ObjectBlock.set(self,locs,values,check=False)
pandas.core.internals.ObjectBlock.should_store(self,value)
pandas.core.internals.ScalarBlock(self,values)
pandas.core.internals.ScalarBlock.__init__(self,values)
pandas.core.internals.ScalarBlock.__len__(self)
pandas.core.internals.ScalarBlock.dtype(self)
pandas.core.internals.ScalarBlock.shape(self)
pandas.core.internals.SingleBlockManager(self,block,axis,do_integrity_check=False,fastpath=False)
pandas.core.internals.SingleBlockManager.__init__(self,block,axis,do_integrity_check=False,fastpath=False)
pandas.core.internals.SingleBlockManager._blklocs(self)
pandas.core.internals.SingleBlockManager._blknos(self)
pandas.core.internals.SingleBlockManager._block(self)
pandas.core.internals.SingleBlockManager._can_hold_na(self)
pandas.core.internals.SingleBlockManager._consolidate_check(self)
pandas.core.internals.SingleBlockManager._consolidate_inplace(self)
pandas.core.internals.SingleBlockManager._post_setstate(self)
pandas.core.internals.SingleBlockManager._values(self)
pandas.core.internals.SingleBlockManager.array_dtype(self)
pandas.core.internals.SingleBlockManager.asobject(self)
pandas.core.internals.SingleBlockManager.convert(self,**kwargs)
pandas.core.internals.SingleBlockManager.delete(self,item)
pandas.core.internals.SingleBlockManager.dtype(self)
pandas.core.internals.SingleBlockManager.external_values(self)
pandas.core.internals.SingleBlockManager.fast_xs(self,loc)
pandas.core.internals.SingleBlockManager.ftype(self)
pandas.core.internals.SingleBlockManager.get_dtype_counts(self)
pandas.core.internals.SingleBlockManager.get_dtypes(self)
pandas.core.internals.SingleBlockManager.get_ftype_counts(self)
pandas.core.internals.SingleBlockManager.get_ftypes(self)
pandas.core.internals.SingleBlockManager.get_slice(self,slobj,axis=0)
pandas.core.internals.SingleBlockManager.get_values(self)
pandas.core.internals.SingleBlockManager.index(self)
pandas.core.internals.SingleBlockManager.internal_values(self)
pandas.core.internals.SingleBlockManager.is_consolidated(self)
pandas.core.internals.SingleBlockManager.itemsize(self)
pandas.core.internals.SingleBlockManager.reindex(self,new_axis,indexer=None,method=None,fill_value=None,limit=None,copy=True)
pandas.core.internals.SparseBlock(NonConsolidatableMixIn,Block)
pandas.core.internals.SparseBlock.__len__(self)
pandas.core.internals.SparseBlock._astype(self,dtype,copy=False,raise_on_error=True,values=None,klass=None,mgr=None,**kwargs)
pandas.core.internals.SparseBlock.copy(self,deep=True,mgr=None)
pandas.core.internals.SparseBlock.fill_value(self)
pandas.core.internals.SparseBlock.fill_value(self,v)
pandas.core.internals.SparseBlock.fillna(self,value,limit=None,inplace=False,downcast=None,mgr=None)
pandas.core.internals.SparseBlock.interpolate(self,method='pad',axis=0,inplace=False,limit=None,fill_value=None,**kwargs)
pandas.core.internals.SparseBlock.itemsize(self)
pandas.core.internals.SparseBlock.kind(self)
pandas.core.internals.SparseBlock.make_block_same_class(self,values,placement,sparse_index=None,kind=None,dtype=None,fill_value=None,copy=False,fastpath=True,**kwargs)
pandas.core.internals.SparseBlock.reindex_axis(self,indexer,method=None,axis=1,fill_value=None,limit=None,mask_info=None)
pandas.core.internals.SparseBlock.shape(self)
pandas.core.internals.SparseBlock.shift(self,periods,axis=0,mgr=None)
pandas.core.internals.SparseBlock.sp_index(self)
pandas.core.internals.SparseBlock.sp_values(self)
pandas.core.internals.SparseBlock.sp_values(self,v)
pandas.core.internals.SparseBlock.sparse_reindex(self,new_index)
pandas.core.internals.SparseBlock.to_dense(self)
pandas.core.internals.TimeDeltaBlock(DatetimeLikeBlockMixin,IntBlock)
pandas.core.internals.TimeDeltaBlock._box_func(self)
pandas.core.internals.TimeDeltaBlock._try_coerce_args(self,values,other)
pandas.core.internals.TimeDeltaBlock._try_coerce_result(self,result)
pandas.core.internals.TimeDeltaBlock.fillna(self,value,**kwargs)
pandas.core.internals.TimeDeltaBlock.should_store(self,value)
pandas.core.internals.TimeDeltaBlock.to_native_types(self,slicer=None,na_rep=None,quoting=None,**kwargs)
pandas.core.internals._block2d_to_blocknd(values,placement,shape,labels,ref_items)
pandas.core.internals._block_shape(values,ndim=1,shape=None)
pandas.core.internals._concat_indexes(indexes)
pandas.core.internals._consolidate(blocks)
pandas.core.internals._extend_blocks(result,blocks=None)
pandas.core.internals._factor_indexer(shape,labels)
pandas.core.internals._fast_count_smallints(arr)
pandas.core.internals._get_blkno_placements(blknos,blk_count,group=True)
pandas.core.internals._interleaved_dtype(blocks)
pandas.core.internals._maybe_compare(a,b,op)
pandas.core.internals._merge_blocks(blocks,dtype=None,_can_consolidate=True)
pandas.core.internals._multi_blockify(tuples,dtype=None)
pandas.core.internals._preprocess_slice_or_indexer(slice_or_indexer,length,allow_fill)
pandas.core.internals._putmask_smart(v,m,n)
pandas.core.internals._safe_reshape(arr,new_shape)
pandas.core.internals._simple_blockify(tuples,dtype)
pandas.core.internals._sparse_blockify(tuples,dtype=None)
pandas.core.internals._stack_arrays(tuples,dtype)
pandas.core.internals._transform_index(index,func,level=None)
pandas.core.internals._vstack(to_stack,dtype)
pandas.core.internals.combine_concat_plans(plans,concat_axis)
pandas.core.internals.concatenate_block_managers(mgrs_indexers,axes,concat_axis,copy)
pandas.core.internals.concatenate_join_units(join_units,concat_axis,copy)
pandas.core.internals.construction_error(tot_items,block_shape,axes,e=None)
pandas.core.internals.create_block_manager_from_arrays(arrays,names,axes)
pandas.core.internals.create_block_manager_from_blocks(blocks,axes)
pandas.core.internals.form_blocks(arrays,names,axes)
pandas.core.internals.get_empty_dtype_and_na(join_units)
pandas.core.internals.get_mgr_concatenation_plan(mgr,indexers)
pandas.core.internals.items_overlap_with_suffix(left,lsuffix,right,rsuffix)
pandas.core.internals.make_block(values,placement,klass=None,ndim=None,dtype=None,fastpath=False)
pandas.core.internals.trim_join_unit(join_unit,length)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/resample.py----------------------------------------
A:pandas.core.resample._shared_docs_kwargs->dict()
A:pandas.core.resample.self.exclusions->set()
A:pandas.core.resample.result->self._deprecated(attr)._apply_loffset(result)
A:pandas.core.resample.__gt__->_make_deprecated_binop('__gt__')
A:pandas.core.resample.__ge__->_make_deprecated_binop('__ge__')
A:pandas.core.resample.__lt__->_make_deprecated_binop('__lt__')
A:pandas.core.resample.__le__->_make_deprecated_binop('__le__')
A:pandas.core.resample.__eq__->_make_deprecated_binop('__eq__')
A:pandas.core.resample.__ne__->_make_deprecated_binop('__ne__')
A:pandas.core.resample.__add____radd__->_make_deprecated_binop('__add__')
A:pandas.core.resample.__sub____rsub__->_make_deprecated_binop('__sub__')
A:pandas.core.resample.__mul____rmul__->_make_deprecated_binop('__mul__')
A:pandas.core.resample.__floordiv____rfloordiv__->_make_deprecated_binop('__floordiv__')
A:pandas.core.resample.__truediv____rtruediv__->_make_deprecated_binop('__truediv__')
A:pandas.core.resample.__div____rdiv__->_make_deprecated_binop('__div__')
A:pandas.core.resample.__neg__->_make_deprecated_unary(lambda x: -x, '__neg__')
A:pandas.core.resample.__pos__->_make_deprecated_unary(lambda x: x, '__pos__')
A:pandas.core.resample.__abs__->_make_deprecated_unary(lambda x: np.abs(x), '__abs__')
A:pandas.core.resample.__inv__->_make_deprecated_unary(lambda x: -x, '__inv__')
A:pandas.core.resample.matches_pattern->any((attr.startswith(x) for x in self._deprecated_valid_patterns))
A:pandas.core.resample.self->self._deprecated(attr)._deprecated(attr)
A:pandas.core.resample.obj->obj.to_timestamp(how=self.convention).to_timestamp(how=self.convention)
A:pandas.core.resample.(self.binner, self.grouper)->self._deprecated(attr)._deprecated(attr)._get_binner()
A:pandas.core.resample.(binner, bins, binlabels)->self._deprecated(attr)._deprecated(attr)._get_binner_for_time()
A:pandas.core.resample.bin_grouper->BinGrouper(bins, binlabels)
A:pandas.core.resample._agg_doc->dedent("\n\n    Examples\n    --------\n    >>> s = Series([1,2,3,4,5],\n                    index=pd.date_range('20130101',\n                                        periods=5,freq='s'))\n    2013-01-01 00:00:00    1\n    2013-01-01 00:00:01    2\n    2013-01-01 00:00:02    3\n    2013-01-01 00:00:03    4\n    2013-01-01 00:00:04    5\n    Freq: S, dtype: int64\n\n    >>> r = s.resample('2s')\n    DatetimeIndexResampler [freq=<2 * Seconds>, axis=0, closed=left,\n                            label=left, convention=start, base=0]\n\n    >>> r.agg(np.sum)\n    2013-01-01 00:00:00    3\n    2013-01-01 00:00:02    7\n    2013-01-01 00:00:04    5\n    Freq: 2S, dtype: int64\n\n    >>> r.agg(['sum','mean','max'])\n                         sum  mean  max\n    2013-01-01 00:00:00    3   1.5    2\n    2013-01-01 00:00:02    7   3.5    4\n    2013-01-01 00:00:04    5   5.0    5\n\n    >>> r.agg({'result' : lambda x: x.mean() / x.std(),\n               'total' : np.sum})\n                         total    result\n    2013-01-01 00:00:00      3  2.121320\n    2013-01-01 00:00:02      7  4.949747\n    2013-01-01 00:00:04      5       NaN\n\n    See also\n    --------\n    pandas.DataFrame.groupby.aggregate\n    pandas.DataFrame.resample.transform\n    pandas.DataFrame.aggregate\n\n    ")
A:pandas.core.resample.(result, how)->self._deprecated(attr)._deprecated(attr)._aggregate(arg, *args, **kwargs)
A:pandas.core.resample.grouped->PanelGroupBy(obj, grouper=grouper, axis=self.axis)
A:pandas.core.resample.method->'{0}()'.format(how)
A:pandas.core.resample.r->self._deprecated(attr)._deprecated(attr)._get_resampler(obj)
A:pandas.core.resample.parent->kwargs.pop('parent', None)
A:pandas.core.resample.groupby->kwargs.pop('groupby', None)
A:pandas.core.resample.self.groupby->copy.copy(parent.groupby)
A:pandas.core.resample.x->self._deprecated(attr)._deprecated(attr)._shallow_copy(x, groupby=self.groupby)
A:pandas.core.resample.res_index->self._deprecated(attr)._deprecated(attr)._adjust_binner_for_upsample(binner)
A:pandas.core.resample.result.index->self._deprecated(attr)._apply_loffset(result).index.to_period(self.freq)
A:pandas.core.resample.offset->to_offset(offset)
A:pandas.core.resample.start->ax[0].asfreq(self.freq, how=self.convention)
A:pandas.core.resample.end->ax[-1].asfreq(self.freq, how='end')
A:pandas.core.resample.new_index->self._deprecated(attr)._deprecated(attr)._get_new_index()
A:pandas.core.resample.memb->ax.asfreq(self.freq, how=self.convention)
A:pandas.core.resample.rng->numpy.arange(i8[0], i8[-1] + 1)
A:pandas.core.resample.bins->ax.searchsorted(end_stamps, side='left')
A:pandas.core.resample.grouper->grouper.take(indexer).take(indexer)
A:pandas.core.resample.indexer->self._deprecated(attr)._deprecated(attr).indexer.argsort(kind='quicksort')
A:pandas.core.resample.tg->TimeGrouper(freq=rule, **kwargs)
A:pandas.core.resample.kwargs['key']->kwargs.pop('on', None)
A:pandas.core.resample.resampler->TimeGrouper(freq=rule, **kwargs)._get_resampler(groupby.obj, kind=kind)
A:pandas.core.resample.freq->to_offset(freq)
A:pandas.core.resample.end_types->set(['M', 'A', 'Q', 'BM', 'BA', 'BQ', 'W'])
A:pandas.core.resample.self.convention->self._deprecated(attr)._deprecated(attr).convention.lower()
A:pandas.core.resample.loffset->to_offset(loffset)
A:pandas.core.resample.(binner, grouper, obj)->self._deprecated(attr)._deprecated(attr)._get_grouper(obj)
A:pandas.core.resample.binnerlabels->PeriodIndex(data=[], freq=self.freq, name=ax.name)
A:pandas.core.resample.(first, last)->_get_range_edges(first, last, self.freq, closed=self.closed, base=self.base)
A:pandas.core.resample.(binner, bin_edges)->self._deprecated(attr)._deprecated(attr)._adjust_bin_edges(binner, ax_values)
A:pandas.core.resample.binner->binner.insert(0, tslib.NaT).insert(0, tslib.NaT)
A:pandas.core.resample.labels->labels.insert(0, tslib.NaT).insert(0, tslib.NaT)
A:pandas.core.resample.day_nanos->_delta_to_nanoseconds(timedelta(1))
A:pandas.core.resample.labelsbinner->PeriodIndex(start=ax[0], end=ax[-1], freq=self.freq, name=ax.name)
A:pandas.core.resample.end_stamps->end_stamps.tz_localize(ax.tzinfo).tz_localize(ax.tzinfo)
A:pandas.core.resample.new_values->pandas.core.algorithms.take_1d(obj.values, indexer)
A:pandas.core.resample.is_day->isinstance(offset, Day)
A:pandas.core.resample.first->first.tz_localize(None).tz_localize(None)
A:pandas.core.resample.last->last.tz_localize(None).tz_localize(None)
A:pandas.core.resample.first_dst->bool(first.dst())
A:pandas.core.resample.last_dst->bool(last.dst())
A:pandas.core.resample.new_obj->obj.to_timestamp(how=self.convention).to_timestamp(how=self.convention).reindex(dti, method=method, fill_value=fill_value)
A:pandas.core.resample.new_obj.index->obj.to_timestamp(how=self.convention).to_timestamp(how=self.convention).reindex(dti, method=method, fill_value=fill_value).index.normalize()
A:pandas.core.resample.dti->date_range(obj.index[0], obj.index[-1], freq=freq)
pandas.core.resample.DatetimeIndexResampler(Resampler)
pandas.core.resample.DatetimeIndexResampler._adjust_binner_for_upsample(self,binner)
pandas.core.resample.DatetimeIndexResampler._downsample(self,how,**kwargs)
pandas.core.resample.DatetimeIndexResampler._get_binner_for_time(self)
pandas.core.resample.DatetimeIndexResampler._resampler_for_grouping(self)
pandas.core.resample.DatetimeIndexResampler._upsample(self,method,limit=None,fill_value=None)
pandas.core.resample.DatetimeIndexResampler._wrap_result(self,result)
pandas.core.resample.DatetimeIndexResamplerGroupby(_GroupByMixin,DatetimeIndexResampler)
pandas.core.resample.DatetimeIndexResamplerGroupby._constructor(self)
pandas.core.resample.PeriodIndexResampler(DatetimeIndexResampler)
pandas.core.resample.PeriodIndexResampler._convert_obj(self,obj)
pandas.core.resample.PeriodIndexResampler._downsample(self,how,**kwargs)
pandas.core.resample.PeriodIndexResampler._get_new_index(self)
pandas.core.resample.PeriodIndexResampler._resampler_for_grouping(self)
pandas.core.resample.PeriodIndexResampler._upsample(self,method,limit=None,fill_value=None)
pandas.core.resample.PeriodIndexResampler.aggregate(self,arg,*args,**kwargs)
pandas.core.resample.PeriodIndexResamplerGroupby(_GroupByMixin,PeriodIndexResampler)
pandas.core.resample.PeriodIndexResamplerGroupby._constructor(self)
pandas.core.resample.Resampler(self,obj,groupby=None,axis=0,kind=None,**kwargs)
pandas.core.resample.Resampler.__array__(self)
pandas.core.resample.Resampler.__getattr__(self,attr)
pandas.core.resample.Resampler.__getitem__(self,key)
pandas.core.resample.Resampler.__init__(self,obj,groupby=None,axis=0,kind=None,**kwargs)
pandas.core.resample.Resampler.__setattr__(self,attr,value)
pandas.core.resample.Resampler.__setitem__(self,attr,value)
pandas.core.resample.Resampler.__unicode__(self)
pandas.core.resample.Resampler._apply_loffset(self,result)
pandas.core.resample.Resampler._assure_grouper(self)
pandas.core.resample.Resampler._convert_obj(self,obj)
pandas.core.resample.Resampler._deprecated(self,op)
pandas.core.resample.Resampler._downsample(self,f)
pandas.core.resample.Resampler._from_selection(self)
pandas.core.resample.Resampler._get_binner(self)
pandas.core.resample.Resampler._get_binner_for_time(self)
pandas.core.resample.Resampler._get_resampler_for_grouping(self,groupby,**kwargs)
pandas.core.resample.Resampler._gotitem(self,key,ndim,subset=None)
pandas.core.resample.Resampler._groupby_and_aggregate(self,how,grouper=None,*args,**kwargs)
pandas.core.resample.Resampler._make_deprecated_binop(op)
pandas.core.resample.Resampler._make_deprecated_unary(op,name)
pandas.core.resample.Resampler._set_binner(self)
pandas.core.resample.Resampler._typ(self)
pandas.core.resample.Resampler._upsample(self,f,limit=None,fill_value=None)
pandas.core.resample.Resampler._wrap_result(self,result)
pandas.core.resample.Resampler.aggregate(self,arg,*args,**kwargs)
pandas.core.resample.Resampler.asfreq(self,fill_value=None)
pandas.core.resample.Resampler.ax(self)
pandas.core.resample.Resampler.backfill(self,limit=None)
pandas.core.resample.Resampler.fillna(self,method,limit=None)
pandas.core.resample.Resampler.interpolate(self,method='linear',axis=0,limit=None,inplace=False,limit_direction='forward',downcast=None,**kwargs)
pandas.core.resample.Resampler.obj(self)
pandas.core.resample.Resampler.pad(self,limit=None)
pandas.core.resample.Resampler.plot(self,*args,**kwargs)
pandas.core.resample.Resampler.std(self,ddof=1,*args,**kwargs)
pandas.core.resample.Resampler.transform(self,arg,*args,**kwargs)
pandas.core.resample.Resampler.var(self,ddof=1,*args,**kwargs)
pandas.core.resample.TimeGrouper(self,freq='Min',closed=None,label=None,how='mean',nperiods=None,axis=0,fill_method=None,limit=None,loffset=None,kind=None,convention=None,base=0,**kwargs)
pandas.core.resample.TimeGrouper.__init__(self,freq='Min',closed=None,label=None,how='mean',nperiods=None,axis=0,fill_method=None,limit=None,loffset=None,kind=None,convention=None,base=0,**kwargs)
pandas.core.resample.TimeGrouper._adjust_bin_edges(self,binner,ax_values)
pandas.core.resample.TimeGrouper._get_binner_for_grouping(self,obj)
pandas.core.resample.TimeGrouper._get_grouper(self,obj)
pandas.core.resample.TimeGrouper._get_resampler(self,obj,kind=None)
pandas.core.resample.TimeGrouper._get_time_bins(self,ax)
pandas.core.resample.TimeGrouper._get_time_delta_bins(self,ax)
pandas.core.resample.TimeGrouper._get_time_period_bins(self,ax)
pandas.core.resample.TimedeltaIndexResampler(DatetimeIndexResampler)
pandas.core.resample.TimedeltaIndexResampler._adjust_binner_for_upsample(self,binner)
pandas.core.resample.TimedeltaIndexResampler._get_binner_for_time(self)
pandas.core.resample.TimedeltaIndexResampler._resampler_for_grouping(self)
pandas.core.resample.TimedeltaIndexResamplerGroupby(_GroupByMixin,TimedeltaIndexResampler)
pandas.core.resample.TimedeltaIndexResamplerGroupby._constructor(self)
pandas.core.resample._GroupByMixin(self,obj,*args,**kwargs)
pandas.core.resample._GroupByMixin.__init__(self,obj,*args,**kwargs)
pandas.core.resample._GroupByMixin._apply(self,f,**kwargs)
pandas.core.resample._adjust_dates_anchored(first,last,offset,closed='right',base=0)
pandas.core.resample._get_range_edges(first,last,offset,closed='left',base=0)
pandas.core.resample._maybe_process_deprecations(r,how=None,fill_method=None,limit=None)
pandas.core.resample._take_new_index(obj,indexer,new_index,axis=0)
pandas.core.resample.asfreq(obj,freq,method=None,how=None,normalize=False,fill_value=None)
pandas.core.resample.get_resampler_for_grouping(groupby,rule,how=None,fill_method=None,limit=None,kind=None,**kwargs)
pandas.core.resample.resample(obj,kind=None,**kwds)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/series.py----------------------------------------
A:pandas.core.series._shared_doc_kwargs->dict(axes='index', klass='Series', axes_single_arg="{0, 'index'}", inplace='inplace : boolean, default False\n        If True, performs operation inplace and returns None.', unique='np.ndarray', duplicated='Series', optional_by='', versionadded_to_excel='\n    .. versionadded:: 0.20.0\n')
A:pandas.core.series._accessors->frozenset(['dt', 'cat', 'str'])
A:pandas.core.series.data->data.copy().copy()
A:pandas.core.series.index->_default_index(len(data))
A:pandas.core.series.dtype->pandas_dtype(dtype)
A:pandas.core.series.labels->_default_index(len(data))._sort_levels_monotonic()
A:pandas.core.series.__float__->_coerce_method(float)
A:pandas.core.series.__long__->_coerce_method(int)
A:pandas.core.series.__int__->_coerce_method(int)
A:pandas.core.series.self._data->self._data.putmask(mask=mask, new=other, inplace=True)
A:pandas.core.series.indexer->self._constructor(arg, index=arg.keys()).index.get_indexer(values)
A:pandas.core.series.slobj->self.index._convert_slice_indexer(slobj, kind=kind or 'getitem')
A:pandas.core.series.key->_asarray_tuplesafe(key)
A:pandas.core.series.result->remove_na(self)
A:pandas.core.series.new_key->self.index._convert_scalar_indexer(key, kind='getitem')
A:pandas.core.series.key_type->pandas._libs.lib.infer_dtype(key)
A:pandas.core.series.(indexer, new_index)->self.index.get_loc_level(key)
A:pandas.core.series.cacher_needs_updating->self._check_is_chained_assignment_possible()
A:pandas.core.series.new_index->self.index.to_period(freq=freq)
A:pandas.core.series.new_values->new_values.copy().copy()
A:pandas.core.series.inplace->validate_bool_kwarg(inplace, 'inplace')
A:pandas.core.series.df->self.to_frame()
A:pandas.core.series.buf->StringIO(u(''))
A:pandas.core.series.(width, height)->get_terminal_size()
A:pandas.core.series.show_dimensions->get_option('display.show_dimensions')
A:pandas.core.series.formatter->pandas.io.formats.format.SeriesFormatter(self, name=name, length=length, header=header, index=index, dtype=dtype, na_rep=na_rep, float_format=float_format, max_rows=max_rows)
A:pandas.core.series.level->self.index._get_level_number(level)
A:pandas.core.series.lab->numpy.array(self.index.labels[level], subok=False, copy=True)
A:pandas.core.series.lab[mask]cnt->len(lev)
A:pandas.core.series.lev->lev.insert(cnt, _get_na_value(lev.dtype.type)).insert(cnt, _get_na_value(lev.dtype.type))
A:pandas.core.series.out->numpy.bincount(obs, minlength=len(lev) or None)
A:pandas.core.series.skipna->pandas.compat.numpy.function.validate_argmax_with_skipna(skipna, args, kwargs)
A:pandas.core.series.i->numpy.ma.getmaskarray(data).argmin()
A:pandas.core.series.(this, other)->self.align(other, level=level, join='outer', copy=False)
A:pandas.core.series.common->self.index.union(other.index)
A:pandas.core.series.left->self.reindex(index=common, copy=False)
A:pandas.core.series.right->other.reindex_like(self).reindex(index=common, copy=False)
A:pandas.core.series.rvals->numpy.asarray(other)
A:pandas.core.series.sorter->_ensure_platform_int(sorter)
A:pandas.core.series.this_mask->isnull(this_vals)
A:pandas.core.series.other_mask->isnull(other_vals)
A:pandas.core.series.this_vals->this_vals.copy().copy()
A:pandas.core.series.other_vals->other_vals.copy().copy()
A:pandas.core.series.name->_maybe_match_name(self, other)
A:pandas.core.series.new_name->_maybe_match_name(self, other)
A:pandas.core.series.lv->self.get(idx, fill_value)
A:pandas.core.series.rv->set()
A:pandas.core.series.new_values[i]->func(lv, rv)
A:pandas.core.series.this->self.reindex(new_index, copy=False)
A:pandas.core.series.other->other.reindex_like(self).reindex_like(self)
A:pandas.core.series.rs_vals->pandas.core.common._where_compat(isnull(this), other._values, this._values)
A:pandas.core.series.mask->numpy.ma.getmaskarray(data)
A:pandas.core.series.axis->self._get_axis_number(axis or 0)
A:pandas.core.series.sortedIdx->numpy.empty(len(self), dtype=np.int32)
A:pandas.core.series.bad->isnull(arr)
A:pandas.core.series.idx->_default_index(len(self))
A:pandas.core.series.argsorted->_try_kind_sort(arr[good])
A:pandas.core.series.n->isnull(arr).sum()
A:pandas.core.series.(new_index, indexer)->_default_index(len(data)).sortlevel(level, ascending=ascending, sort_remaining=sort_remaining)
A:pandas.core.series.result[notmask]->numpy.argsort(values[notmask], kind=kind)
A:pandas.core.series.result.index->remove_na(self).index.reorder_levels(order)
A:pandas.core.series.arg->self._constructor(arg, index=arg.keys())
A:pandas.core.series._agg_doc->dedent("\n    Examples\n    --------\n\n    >>> s = Series(np.random.randn(10))\n\n    >>> s.agg('min')\n    -1.3018049988556679\n\n    >>> s.agg(['min', 'max'])\n    min   -1.301805\n    max    1.127688\n    dtype: float64\n\n    See also\n    --------\n    pandas.Series.apply\n    pandas.Series.transform\n\n    ")
A:pandas.core.series.(result, how)->self._aggregate(func, *args, **kwargs)
A:pandas.core.series.mapped->pandas._libs.lib.map_infer(values, f, convert=convert_dtype)
A:pandas.core.series.kwargs['inplace']->validate_bool_kwarg(kwargs.get('inplace', False), 'inplace')
A:pandas.core.series.v->super(Series, self).memory_usage(deep=deep)
A:pandas.core.series.indices->_ensure_platform_int(indices)
A:pandas.core.series.dt->pandas.core.base.AccessorProperty(CombinedDatetimelikeProperties, _make_dt_accessor)
A:pandas.core.series.cat->pandas.core.base.AccessorProperty(CategoricalAccessor, _make_cat_accessor)
A:pandas.core.series.(data, fill_value)->maybe_upcast(data, copy=True)
A:pandas.core.series.subarr->numpy.array(data, dtype=object, copy=copy)
A:pandas.core.series.(dtype, value)->infer_dtype_from_scalar(value)
A:pandas.core.series.value->maybe_cast_to_datetime(value, dtype)
A:pandas.core.series.Series.plot->pandas.core.base.AccessorProperty(_gfx.SeriesPlotMethods, _gfx.SeriesPlotMethods)
pandas.core.series.Series(self,data=None,index=None,dtype=None,name=None,copy=False,fastpath=False)
pandas.core.series.Series.__array__(self,result=None)
pandas.core.series.Series.__array_prepare__(self,result,context=None)
pandas.core.series.Series.__array_wrap__(self,result,context=None)
pandas.core.series.Series.__getitem__(self,key)
pandas.core.series.Series.__init__(self,data=None,index=None,dtype=None,name=None,copy=False,fastpath=False)
pandas.core.series.Series.__iter__(self)
pandas.core.series.Series.__len__(self)
pandas.core.series.Series.__setitem__(self,key,value)
pandas.core.series.Series.__unicode__(self)
pandas.core.series.Series._binop(self,other,func,level=None,fill_value=None)
pandas.core.series.Series._can_hold_na(self)
pandas.core.series.Series._constructor(self)
pandas.core.series.Series._constructor_expanddim(self)
pandas.core.series.Series._dir_additions(self)
pandas.core.series.Series._dir_deletions(self)
pandas.core.series.Series._get_values(self,indexer)
pandas.core.series.Series._get_values_tuple(self,key)
pandas.core.series.Series._get_with(self,key)
pandas.core.series.Series._gotitem(self,key,ndim,subset=None)
pandas.core.series.Series._is_mixed_type(self)
pandas.core.series.Series._ixs(self,i,axis=0)
pandas.core.series.Series._make_cat_accessor(self)
pandas.core.series.Series._make_dt_accessor(self)
pandas.core.series.Series._needs_reindex_multi(self,axes,method,level)
pandas.core.series.Series._reduce(self,op,name,axis=0,skipna=True,numeric_only=None,filter_type=None,**kwds)
pandas.core.series.Series._reindex_indexer(self,new_index,indexer,copy)
pandas.core.series.Series._set_axis(self,axis,labels,fastpath=False)
pandas.core.series.Series._set_labels(self,key,value)
pandas.core.series.Series._set_name(self,name,inplace=False)
pandas.core.series.Series._set_subtyp(self,is_all_dates)
pandas.core.series.Series._set_values(self,key,value)
pandas.core.series.Series._set_with(self,key,value)
pandas.core.series.Series._set_with_engine(self,key,value)
pandas.core.series.Series._slice(self,slobj,axis=0,kind=None)
pandas.core.series.Series._unpickle_series_compat(self,state)
pandas.core.series.Series._update_inplace(self,result,**kwargs)
pandas.core.series.Series._values(self)
pandas.core.series.Series.aggregate(self,func,axis=0,*args,**kwargs)
pandas.core.series.Series.align(self,other,join='outer',axis=None,level=None,copy=True,fill_value=None,method=None,limit=None,fill_axis=0,broadcast_axis=None)
pandas.core.series.Series.append(self,to_append,ignore_index=False,verify_integrity=False)
pandas.core.series.Series.apply(self,func,convert_dtype=True,args=(),**kwds)
pandas.core.series.Series.argsort(self,axis=0,kind='quicksort',order=None)
pandas.core.series.Series.asobject(self)
pandas.core.series.Series.autocorr(self,lag=1)
pandas.core.series.Series.axes(self)
pandas.core.series.Series.between(self,left,right,inclusive=True)
pandas.core.series.Series.combine(self,other,func,fill_value=nan)
pandas.core.series.Series.combine_first(self,other)
pandas.core.series.Series.compress(self,condition,*args,**kwargs)
pandas.core.series.Series.corr(self,other,method='pearson',min_periods=None)
pandas.core.series.Series.count(self,level=None)
pandas.core.series.Series.cov(self,other,min_periods=None)
pandas.core.series.Series.diff(self,periods=1)
pandas.core.series.Series.dot(self,other)
pandas.core.series.Series.drop_duplicates(self,keep='first',inplace=False)
pandas.core.series.Series.dropna(self,axis=0,inplace=False,**kwargs)
pandas.core.series.Series.dtype(self)
pandas.core.series.Series.dtypes(self)
pandas.core.series.Series.duplicated(self,keep='first')
pandas.core.series.Series.fillna(self,value=None,method=None,axis=None,inplace=False,limit=None,downcast=None,**kwargs)
pandas.core.series.Series.first_valid_index(self)
pandas.core.series.Series.from_array(cls,arr,index=None,name=None,dtype=None,copy=False,fastpath=False)
pandas.core.series.Series.from_csv(cls,path,sep=',',parse_dates=True,header=None,index_col=0,encoding=None,infer_datetime_format=False)
pandas.core.series.Series.ftype(self)
pandas.core.series.Series.ftypes(self)
pandas.core.series.Series.get_value(self,label,takeable=False)
pandas.core.series.Series.get_values(self)
pandas.core.series.Series.idxmax(self,axis=None,skipna=True,*args,**kwargs)
pandas.core.series.Series.idxmin(self,axis=None,skipna=True,*args,**kwargs)
pandas.core.series.Series.imag(self)
pandas.core.series.Series.imag(self,v)
pandas.core.series.Series.isin(self,values)
pandas.core.series.Series.iteritems(self)
pandas.core.series.Series.keys(self)
pandas.core.series.Series.last_valid_index(self)
pandas.core.series.Series.map(self,arg,na_action=None)
pandas.core.series.Series.memory_usage(self,index=True,deep=False)
pandas.core.series.Series.mode(self)
pandas.core.series.Series.name(self)
pandas.core.series.Series.name(self,value)
pandas.core.series.Series.nlargest(self,n=5,keep='first')
pandas.core.series.Series.nonzero(self)
pandas.core.series.Series.nsmallest(self,n=5,keep='first')
pandas.core.series.Series.put(self,*args,**kwargs)
pandas.core.series.Series.quantile(self,q=0.5,interpolation='linear')
pandas.core.series.Series.ravel(self,order='C')
pandas.core.series.Series.real(self)
pandas.core.series.Series.real(self,v)
pandas.core.series.Series.reindex(self,index=None,**kwargs)
pandas.core.series.Series.reindex_axis(self,labels,axis=0,**kwargs)
pandas.core.series.Series.rename(self,index=None,**kwargs)
pandas.core.series.Series.reorder_levels(self,order)
pandas.core.series.Series.repeat(self,repeats,*args,**kwargs)
pandas.core.series.Series.reset_index(self,level=None,drop=False,name=None,inplace=False)
pandas.core.series.Series.reshape(self,*args,**kwargs)
pandas.core.series.Series.round(self,decimals=0,*args,**kwargs)
pandas.core.series.Series.searchsorted(self,value,side='left',sorter=None)
pandas.core.series.Series.set_value(self,label,value,takeable=False)
pandas.core.series.Series.shift(self,periods=1,freq=None,axis=0)
pandas.core.series.Series.sort_index(self,axis=0,level=None,ascending=True,inplace=False,kind='quicksort',na_position='last',sort_remaining=True)
pandas.core.series.Series.sort_values(self,axis=0,ascending=True,inplace=False,kind='quicksort',na_position='last')
pandas.core.series.Series.sortlevel(self,level=0,ascending=True,sort_remaining=True)
pandas.core.series.Series.swaplevel(self,i=-2,j=-1,copy=True)
pandas.core.series.Series.take(self,indices,axis=0,convert=True,is_copy=False,**kwargs)
pandas.core.series.Series.to_csv(self,path=None,index=True,sep=',',na_rep='',float_format=None,header=False,index_label=None,mode='w',encoding=None,date_format=None,decimal='.')
pandas.core.series.Series.to_dict(self)
pandas.core.series.Series.to_excel(self,excel_writer,sheet_name='Sheet1',na_rep='',float_format=None,columns=None,header=True,index=True,index_label=None,startrow=0,startcol=0,engine=None,merge_cells=True,encoding=None,inf_rep='inf',verbose=True)
pandas.core.series.Series.to_frame(self,name=None)
pandas.core.series.Series.to_period(self,freq=None,copy=True)
pandas.core.series.Series.to_sparse(self,kind='block',fill_value=None)
pandas.core.series.Series.to_string(self,buf=None,na_rep='NaN',float_format=None,header=True,index=True,length=False,dtype=False,name=False,max_rows=None)
pandas.core.series.Series.to_timestamp(self,freq=None,how='start',copy=True)
pandas.core.series.Series.tolist(self)
pandas.core.series.Series.unique(self)
pandas.core.series.Series.unstack(self,level=-1,fill_value=None)
pandas.core.series.Series.update(self,other)
pandas.core.series.Series.values(self)
pandas.core.series.Series.view(self,dtype=None)
pandas.core.series._coerce_method(converter)
pandas.core.series._sanitize_array(data,index,dtype=None,copy=False,raise_cast_failure=False)
pandas.core.series._sanitize_index(data,index,copy=False)
pandas.core.series.remove_na(series)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/datetools.py----------------------------------------
A:pandas.core.datetools.day->DateOffset()
A:pandas.core.datetools.bday->BDay()
A:pandas.core.datetools.cday->CDay()
A:pandas.core.datetools.customBusinessDay->CustomBusinessDay()
A:pandas.core.datetools.customBusinessMonthEnd->CBMonthEnd()
A:pandas.core.datetools.customBusinessMonthBegin->CBMonthBegin()
A:pandas.core.datetools.monthEnd->MonthEnd()
A:pandas.core.datetools.yearEnd->YearEnd()
A:pandas.core.datetools.yearBegin->YearBegin()
A:pandas.core.datetools.bmonthEnd->BMonthEnd()
A:pandas.core.datetools.bmonthBegin->BMonthBegin()
A:pandas.core.datetools.bquarterEnd->BQuarterEnd()
A:pandas.core.datetools.quarterEnd->QuarterEnd()
A:pandas.core.datetools.byearEnd->BYearEnd()
A:pandas.core.datetools.week->Week()
A:pandas.core.datetools.thisMonthEnd->MonthEnd(0)
A:pandas.core.datetools.thisBMonthEnd->BMonthEnd(0)
A:pandas.core.datetools.thisYearEnd->YearEnd(0)
A:pandas.core.datetools.thisYearBegin->YearBegin(0)
A:pandas.core.datetools.thisBQuarterEnd->BQuarterEnd(0)
A:pandas.core.datetools.thisQuarterEnd->QuarterEnd(0)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/groupby.py----------------------------------------
A:pandas.core.groupby._plotting_methods->frozenset(['plot', 'boxplot', 'hist'])
A:pandas.core.groupby._cython_transforms->frozenset(['cumprod', 'cumsum', 'shift', 'cummin', 'cummax'])
A:pandas.core.groupby.(self.grouper, exclusions, self.obj)->_get_grouper(self.obj, [self.key], axis=self.axis, level=self.level, sort=self.sort)
A:pandas.core.groupby.ax->self._selected_obj._get_axis(self.axis)
A:pandas.core.groupby.level->numpy.arange(blocks[0].values.shape[1]).names.index(level)
A:pandas.core.groupby.indexerself.indexer->self._selected_obj._get_axis(self.axis).argsort(kind='mergesort')
A:pandas.core.groupby.obj->obj.swapaxes(0, 1).swapaxes(0, 1)
A:pandas.core.groupby.group_axis->obj.swapaxes(0, 1).swapaxes(0, 1)._get_axis(axis)
A:pandas.core.groupby._apply_whitelist->frozenset([])
A:pandas.core.groupby.self.mutated->kwargs.pop('mutated', False)
A:pandas.core.groupby.(grouper, exclusions, obj)->_get_grouper(obj, keys, axis=axis, level=level, sort=sort, mutated=self.mutated)
A:pandas.core.groupby.self.axis->obj.swapaxes(0, 1).swapaxes(0, 1)._get_axis_number(axis)
A:pandas.core.groupby.index_sample->next(iter(self.indices))
A:pandas.core.groupby.converter->get_converter(index_sample)
A:pandas.core.groupby.self._group_selection->self._selected_obj._get_axis(self.axis).difference(Index(groupers)).tolist()
A:pandas.core.groupby.index->numpy.arange(blocks[0].values.shape[1])
A:pandas.core.groupby.result->result.swapaxes(0, 2).swapaxes(0, 2)
A:pandas.core.groupby.plot->property(GroupByPlot)
A:pandas.core.groupby.is_callable->callable(getattr(self._selected_obj, name, None))
A:pandas.core.groupby.msg->"Cannot access{0}attribute {1!r} of {2!r} objects, try using the 'apply' method".format(kind, name, type(self).__name__)
A:pandas.core.groupby.f->getattr(klass, name)
A:pandas.core.groupby.kwargs_with_axis->kwargs.copy()
A:pandas.core.groupby.inds->self._get_index(name)
A:pandas.core.groupby.func->getattr(self, func)
A:pandas.core.groupby.(keys, values, mutated)->self.grouper.apply(f, self._selected_obj, self.axis)
A:pandas.core.groupby.sorter->numpy.lexsort((out if ascending else -out, left[0]))
A:pandas.core.groupby.rep->partial(np.repeat, repeats=np.add.reduceat(inc, idx))
A:pandas.core.groupby.out->numpy.bincount(ids[mask], minlength=ngroups or None)
A:pandas.core.groupby.rev->numpy.empty(count, dtype=np.intp)
A:pandas.core.groupby.rev[sorter]->numpy.arange(count, dtype=np.intp)
A:pandas.core.groupby.levels->ping.group_index.take(labels)
A:pandas.core.groupby.new->pandas.core.index.MultiIndex.from_arrays(list(levels))
A:pandas.core.groupby.output->func(group, *args, **kwargs)
A:pandas.core.groupby.is_numeric->is_numeric_dtype(values.dtype)
A:pandas.core.groupby.(result, names)->self.grouper.aggregate(obj.values, how)
A:pandas.core.groupby.output[name]->pandas.core.algorithms.take_nd(obj.values, indexer)
A:pandas.core.groupby.(result, counts)->BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated).get_result()
A:pandas.core.groupby.values->_ensure_categorical(self.grouper)
A:pandas.core.groupby.keys->self._get_group_keys()
A:pandas.core.groupby.indices->collections.defaultdict(list)
A:pandas.core.groupby.filtered->self._apply_filter(indices, dropna)
A:pandas.core.groupby.mask->notnull(res_r)
A:pandas.core.groupby.x->numpy.asarray(x)
A:pandas.core.groupby.result.name->getattr(self.obj, 'name', None)
A:pandas.core.groupby.cls.sum->groupby_function('sum', 'add', np.sum)
A:pandas.core.groupby.cls.prod->groupby_function('prod', 'prod', np.prod)
A:pandas.core.groupby.cls.min->groupby_function('min', 'min', np.min, numeric_only=False)
A:pandas.core.groupby.cls.max->groupby_function('max', 'max', np.max, numeric_only=False)
A:pandas.core.groupby.cls.first->groupby_function('first', 'first', first_compat, numeric_only=False, _convert=True)
A:pandas.core.groupby.cls.last->groupby_function('last', 'last', last_compat, numeric_only=False, _convert=True)
A:pandas.core.groupby.nth_values->numpy.array(nth_values, dtype=np.intp)
A:pandas.core.groupby.dropped->self.obj.dropna(how=dropna, axis=self.axis)
A:pandas.core.groupby.(grouper, _, _)->_get_grouper(dropped, key=self.keys, axis=self.axis, level=self.level, sort=self.sort, mutated=self.mutated)
A:pandas.core.groupby.grb->self.obj.dropna(how=dropna, axis=self.axis).groupby(grouper, as_index=self.as_index, sort=self.sort)
A:pandas.core.groupby.cumcounts->self._cumcount_array(ascending=ascending)
A:pandas.core.groupby.indexer->Index(keys).get_indexer(key_index)
A:pandas.core.groupby.splitter->get_splitter(obj, group_index, ngroups, axis=self.axis)
A:pandas.core.groupby.group_keys->self._get_group_keys()
A:pandas.core.groupby.f_name->pandas.core.common._get_callable_name(f)
A:pandas.core.groupby.(values, mutated)->get_splitter(obj, group_index, ngroups, axis=self.axis).fast_apply(f, group_keys)
A:pandas.core.groupby.group_axes->_get_axes(group)
A:pandas.core.groupby.res->res.squeeze().squeeze()
A:pandas.core.groupby.ids->_ensure_platform_int(ids)
A:pandas.core.groupby.to_groupby->Index(to_groupby)
A:pandas.core.groupby.(comp_ids, obs_group_ids)->self._get_compressed_labels()
A:pandas.core.groupby.ngroups->len(obs_group_ids)
A:pandas.core.groupby.comp_ids->numpy.repeat(np.r_[-1, np.arange(ngroups)], rep)
A:pandas.core.groupby.group_index->pandas.core.algorithms.take_nd(group_index, indexer, allow_fill=False)
A:pandas.core.groupby.labels->list(map(lambda lab: np.repeat(lab[diff], nbin), labels[:-1]))
A:pandas.core.groupby.funcafunc->get_func(ftype['name'])
A:pandas.core.groupby.arity->self._cython_arity.get(how, 1)
A:pandas.core.groupby.is_datetimelike->needs_i8_conversion(values.dtype)
A:pandas.core.groupby.(func, dtype_str)->self._get_cython_function(kind, how, values, is_numeric)
A:pandas.core.groupby.counts->numpy.zeros(ngroups, dtype=int)
A:pandas.core.groupby.names->set((v.name for v in values))
A:pandas.core.groupby.chunk->chunk.squeeze().squeeze()
A:pandas.core.groupby.dummy->obj.swapaxes(0, 1).swapaxes(0, 1)._get_values(slice(None, 0)).to_dense()
A:pandas.core.groupby.grouper->BaseGrouper(group_axis, groupings, sort=sort, mutated=mutated)
A:pandas.core.groupby.lenidx->len(values)
A:pandas.core.groupby.lenbin->len(binner)
A:pandas.core.groupby.bins->numpy.empty(lenbin - 1, dtype=np.int64)
A:pandas.core.groupby.self.bins->_ensure_int64(bins)
A:pandas.core.groupby.self.binlabels->_ensure_index(binlabels)
A:pandas.core.groupby.length->len(data)
A:pandas.core.groupby.indices[label]->list(range(i, bin))
A:pandas.core.groupby.obs_group_ids->numpy.arange(ngroups)
A:pandas.core.groupby._cython_functions->copy.deepcopy(BaseGrouper._cython_functions)
A:pandas.core.groupby.self.grouper->to_timedelta(self.grouper)
A:pandas.core.groupby.(self.grouper, self._labels, self._group_index)->numpy.arange(blocks[0].values.shape[1])._get_grouper_for_level(self.grouper, level)
A:pandas.core.groupby.self._group_index->CategoricalIndex(Categorical.from_codes(np.arange(len(c)), categories=c, ordered=self.grouper.ordered))
A:pandas.core.groupby.(labels, uniques)->pandas.core.algorithms.factorize(self.grouper, sort=self.sort)
A:pandas.core.groupby.uniques->Index(uniques, name=self.name)
A:pandas.core.groupby.nlevels->len(level)
A:pandas.core.groupby.(binner, grouper, obj)->key._get_grouper(obj)
A:pandas.core.groupby.any_callable->any((callable(g) or isinstance(g, dict) for g in keys))
A:pandas.core.groupby.any_groupers->any((isinstance(g, Grouper) for g in keys))
A:pandas.core.groupby.any_arraylike->any((isinstance(g, (list, tuple, Series, Index, np.ndarray)) for g in keys))
A:pandas.core.groupby.all_in_columns->all((g in obj.columns for g in keys))
A:pandas.core.groupby.(decl, args)->make_signature(f)
A:pandas.core.groupby._agg_doc->dedent("\n    Examples\n    --------\n\n    >>> df = pd.DataFrame({'A': [1, 1, 2, 2],\n    ...                    'B': [1, 2, 3, 4],\n    ...                    'C': np.random.randn(4)})\n\n    >>> df\n       A  B         C\n    0  1  1  0.362838\n    1  1  2  0.227877\n    2  2  3  1.267767\n    3  2  4 -0.562860\n\n    The aggregation is for each column.\n\n    >>> df.groupby('A').agg('min')\n       B         C\n    A\n    1  1  0.227877\n    2  3 -0.562860\n\n    Multiple aggregations\n\n    >>> df.groupby('A').agg(['min', 'max'])\n        B             C\n      min max       min       max\n    A\n    1   1   2  0.227877  0.362838\n    2   3   4 -0.562860  1.267767\n\n    Select a column for aggregation\n\n    >>> df.groupby('A').B.agg(['min', 'max'])\n       min  max\n    A\n    1    1    2\n    2    3    4\n\n    Different aggregations per column\n\n    >>> df.groupby('A').agg({'B': ['min', 'max'], 'C': 'sum'})\n        B             C\n      min max       sum\n    A\n    1   1   2  0.590716\n    2   3   4  0.704907\n\n    See also\n    --------\n    pandas.DataFrame.groupby.apply\n    pandas.DataFrame.groupby.transform\n    pandas.DataFrame.aggregate\n\n    ")
A:pandas.core.groupby._level->kwargs.pop('_level', None)
A:pandas.core.groupby.ret->concat(ret, axis=1)
A:pandas.core.groupby.cyfunc->self._is_cython_func(func_or_funcs)
A:pandas.core.groupby.columns->columns.take(inds).take(inds)
A:pandas.core.groupby.arg->lzip(columns, arg)
A:pandas.core.groupby.results[name]->obj.swapaxes(0, 1).swapaxes(0, 1).aggregate(func)
A:pandas.core.groupby.result[name]->self.get_group(name, obj=obj).apply(wrapper, axis=axis)
A:pandas.core.groupby.s->groupby(obj, self.grouper)
A:pandas.core.groupby.cast->(self.size().fillna(0) > 0).any()
A:pandas.core.groupby.b->wrapper(x, *args, **kwargs)
A:pandas.core.groupby.val->self.obj.get_values()
A:pandas.core.groupby.(val, _)->pandas.core.algorithms.factorize(val, sort=False)
A:pandas.core.groupby.(lab, lev)->pandas.core.algorithms.factorize(val, sort=True)
A:pandas.core.groupby.lab->lev.take(lab.cat.codes)
A:pandas.core.groupby.d->numpy.diff(np.r_[idx, len(ids)])
A:pandas.core.groupby.(mi, ml)->pandas.core.algorithms.factorize(m)
A:pandas.core.groupby.acc->rep(d)
A:pandas.core.groupby.mi->MultiIndex(levels=levels, labels=labels, names=names, verify_integrity=False)
A:pandas.core.groupby.diff->numpy.zeros(len(out), dtype='bool')
A:pandas.core.groupby.(_, idx)->_get_join_indexers(left, right, sort=False, how='left')
A:pandas.core.groupby.(new_items, new_blocks)->self._cython_agg_blocks(how, alt=alt, numeric_only=numeric_only)
A:pandas.core.groupby.new_axes->list(obj.axes)
A:pandas.core.groupby.mgr->BlockManager(blocks, [items, index])
A:pandas.core.groupby.new_obj->type(obj)(mgr)
A:pandas.core.groupby.(data, agg_axis)->self._get_data_to_aggregate()
A:pandas.core.groupby.data->self.get_group(name, obj=obj)
A:pandas.core.groupby.(result, _)->self.grouper.aggregate(block.values, how, axis=agg_axis)
A:pandas.core.groupby.newb->block.make_block_same_class(result)
A:pandas.core.groupby.new_items->self.get_group(name, obj=obj).items.take(np.sort(indexer))
A:pandas.core.groupby.deleted->numpy.concatenate(deleted_items)
A:pandas.core.groupby.ai->numpy.arange(len(data))
A:pandas.core.groupby.l->len(b.mgr_locs)
A:pandas.core.groupby.(result, how)->self._aggregate(arg, *args, _level=_level, **kwargs)
A:pandas.core.groupby.result.columns->Index(result.columns.levels[0], name=self._selected_obj.columns.name)
A:pandas.core.groupby.result.index->numpy.arange(len(result))
A:pandas.core.groupby.colg->SeriesGroupBy(data, selection=item, grouper=self.grouper)
A:pandas.core.groupby.result[item]->DataFrameGroupBy(obj[item], axis=self.axis - 1, grouper=self.grouper).aggregate(func, *args, **kwargs)
A:pandas.core.groupby.result_columns->result_columns.drop(cannot_agg).drop(cannot_agg)
A:pandas.core.groupby.output_keys->self._decide_output_index(output, agg_labels)
A:pandas.core.groupby.v->first_non_None_value(values)
A:pandas.core.groupby.key_index->Index(keys, name=key_names[0])
A:pandas.core.groupby.key_lookup->Index(keys)
A:pandas.core.groupby.applied_index->self._selected_obj._get_axis(self.axis)
A:pandas.core.groupby.all_indexed_same->_all_indexes_same([x.index for x in values])
A:pandas.core.groupby.stacked_values->numpy.vstack(map(np.asarray, values))
A:pandas.core.groupby.date_cols->date_cols.intersection(result.columns).intersection(result.columns)
A:pandas.core.groupby.result[date_cols]->result[date_cols]._convert(datetime=True, coerce=True)._convert(datetime=True, coerce=True)
A:pandas.core.groupby.gen->self.grouper.get_iterator(obj, axis=self.axis)
A:pandas.core.groupby.(fast_path, slow_path)->self._define_paths(func, *args, **kwargs)
A:pandas.core.groupby.(path, res)->self._choose_path(fast_path, slow_path, group)
A:pandas.core.groupby.r->DataFrame(np.concatenate([res.values] * len(group.index)).reshape(group.shape), columns=group.columns, index=group.index)
A:pandas.core.groupby.concatenated->concat(applied, join_axes=[concat_index], axis=self.axis, verify_integrity=False)
A:pandas.core.groupby.res_fast->fast_path(group)
A:pandas.core.groupby.res_r->res.squeeze().squeeze().values.ravel()
A:pandas.core.groupby.res_fast_r->fast_path(group).values.ravel()
A:pandas.core.groupby.output[col]->self[col].transform(wrapper)
A:pandas.core.groupby.izip->zip(*map(reversed, (self.grouper.names, self.grouper.get_group_levels(), [grp.in_axis for grp in self.grouper.groupings])))
A:pandas.core.groupby.agg_labels->self._obj_with_exclusions._get_axis(agg_axis)
A:pandas.core.groupby.(index, _)->pandas.core.index.MultiIndex.from_product(levels_list, names=self.grouper.names).sortlevel()
A:pandas.core.groupby.(g_nums, g_names)->zip(*in_axis_grps)
A:pandas.core.groupby.(data, _)->self._get_data_to_aggregate()
A:pandas.core.groupby.counter->partial(count_level_2d, labels=ids, max_bin=ngroups, axis=1)
A:pandas.core.groupby.blk->map(make_block, map(counter, val), loc)
A:pandas.core.groupby.results->concat(results, axis=1)
A:pandas.core.groupby.results.index->_default_index(len(results))
A:pandas.core.groupby.itemg->DataFrameGroupBy(obj[item], axis=self.axis - 1, grouper=self.grouper)
A:pandas.core.groupby.self.labels->_ensure_int64(labels)
A:pandas.core.groupby.sdata->self._get_sorted_data()
A:pandas.core.groupby.(starts, ends)->pandas._libs.lib.generate_slices(self.slabels, self.ngroups)
A:pandas.core.groupby.(results, mutated)->pandas._libs.lib.apply_frame_axis0(sdata, f, names, starts, ends)
A:pandas.core.groupby.sorted_axis->self.get_group(name, obj=obj).axes[self.axis].take(self.sort_idx)
A:pandas.core.groupby.sorted_data->self.get_group(name, obj=obj).reindex_axis(sorted_axis, axis=self.axis)
pandas.core.groupby.ArraySplitter(DataSplitter)
pandas.core.groupby.BaseGrouper(self,axis,groupings,sort=True,group_keys=True,mutated=False)
pandas.core.groupby.BaseGrouper.__init__(self,axis,groupings,sort=True,group_keys=True,mutated=False)
pandas.core.groupby.BaseGrouper.__iter__(self)
pandas.core.groupby.BaseGrouper._aggregate(self,result,counts,values,comp_ids,agg_func,is_numeric,is_datetimelike)
pandas.core.groupby.BaseGrouper._aggregate_series_fast(self,obj,func)
pandas.core.groupby.BaseGrouper._aggregate_series_pure_python(self,obj,func)
pandas.core.groupby.BaseGrouper._cython_operation(self,kind,values,how,axis)
pandas.core.groupby.BaseGrouper._get_compressed_labels(self)
pandas.core.groupby.BaseGrouper._get_cython_function(self,kind,how,values,is_numeric)
pandas.core.groupby.BaseGrouper._get_group_keys(self)
pandas.core.groupby.BaseGrouper._get_splitter(self,data,axis=0)
pandas.core.groupby.BaseGrouper._is_builtin_func(self,arg)
pandas.core.groupby.BaseGrouper._max_groupsize(self)
pandas.core.groupby.BaseGrouper._transform(self,result,values,comp_ids,transform_func,is_numeric,is_datetimelike)
pandas.core.groupby.BaseGrouper.agg_series(self,obj,func)
pandas.core.groupby.BaseGrouper.aggregate(self,values,how,axis=0)
pandas.core.groupby.BaseGrouper.apply(self,f,data,axis=0)
pandas.core.groupby.BaseGrouper.get_group_levels(self)
pandas.core.groupby.BaseGrouper.get_iterator(self,data,axis=0)
pandas.core.groupby.BaseGrouper.group_info(self)
pandas.core.groupby.BaseGrouper.groups(self)
pandas.core.groupby.BaseGrouper.indices(self)
pandas.core.groupby.BaseGrouper.is_monotonic(self)
pandas.core.groupby.BaseGrouper.labels(self)
pandas.core.groupby.BaseGrouper.levels(self)
pandas.core.groupby.BaseGrouper.names(self)
pandas.core.groupby.BaseGrouper.ngroups(self)
pandas.core.groupby.BaseGrouper.nkeys(self)
pandas.core.groupby.BaseGrouper.recons_labels(self)
pandas.core.groupby.BaseGrouper.result_index(self)
pandas.core.groupby.BaseGrouper.shape(self)
pandas.core.groupby.BaseGrouper.size(self)
pandas.core.groupby.BaseGrouper.transform(self,values,how,axis=0)
pandas.core.groupby.BinGrouper(self,bins,binlabels,filter_empty=False,mutated=False)
pandas.core.groupby.BinGrouper.__init__(self,bins,binlabels,filter_empty=False,mutated=False)
pandas.core.groupby.BinGrouper.agg_series(self,obj,func)
pandas.core.groupby.BinGrouper.get_iterator(self,data,axis=0)
pandas.core.groupby.BinGrouper.group_info(self)
pandas.core.groupby.BinGrouper.groupings(self)
pandas.core.groupby.BinGrouper.groups(self)
pandas.core.groupby.BinGrouper.indices(self)
pandas.core.groupby.BinGrouper.levels(self)
pandas.core.groupby.BinGrouper.names(self)
pandas.core.groupby.BinGrouper.ngroups(self)
pandas.core.groupby.BinGrouper.nkeys(self)
pandas.core.groupby.BinGrouper.result_index(self)
pandas.core.groupby.DataFrameGroupBy(NDFrameGroupBy)
pandas.core.groupby.DataFrameGroupBy._apply_to_column_groupbys(self,func)
pandas.core.groupby.DataFrameGroupBy._get_data_to_aggregate(self)
pandas.core.groupby.DataFrameGroupBy._gotitem(self,key,ndim,subset=None)
pandas.core.groupby.DataFrameGroupBy._insert_inaxis_grouper_inplace(self,result)
pandas.core.groupby.DataFrameGroupBy._iterate_column_groupbys(self)
pandas.core.groupby.DataFrameGroupBy._reindex_output(self,result)
pandas.core.groupby.DataFrameGroupBy._wrap_agged_blocks(self,items,blocks)
pandas.core.groupby.DataFrameGroupBy._wrap_aggregated_output(self,output,names=None)
pandas.core.groupby.DataFrameGroupBy._wrap_generic_output(self,result,obj)
pandas.core.groupby.DataFrameGroupBy._wrap_transformed_output(self,output,names=None)
pandas.core.groupby.DataFrameGroupBy.aggregate(self,arg,*args,**kwargs)
pandas.core.groupby.DataFrameGroupBy.count(self)
pandas.core.groupby.DataFrameGroupBy.nunique(self,dropna=True)
pandas.core.groupby.DataSplitter(self,data,labels,ngroups,axis=0)
pandas.core.groupby.DataSplitter.__init__(self,data,labels,ngroups,axis=0)
pandas.core.groupby.DataSplitter.__iter__(self)
pandas.core.groupby.DataSplitter._chop(self,sdata,slice_obj)
pandas.core.groupby.DataSplitter._get_sorted_data(self)
pandas.core.groupby.DataSplitter.apply(self,f)
pandas.core.groupby.DataSplitter.slabels(self)
pandas.core.groupby.DataSplitter.sort_idx(self)
pandas.core.groupby.FrameSplitter(self,data,labels,ngroups,axis=0)
pandas.core.groupby.FrameSplitter.__init__(self,data,labels,ngroups,axis=0)
pandas.core.groupby.FrameSplitter._chop(self,sdata,slice_obj)
pandas.core.groupby.FrameSplitter.fast_apply(self,f,names)
pandas.core.groupby.GroupBy(_GroupBy)
pandas.core.groupby.GroupBy._add_numeric_operations(cls)
pandas.core.groupby.GroupBy.backfill(self,limit=None)
pandas.core.groupby.GroupBy.count(self)
pandas.core.groupby.GroupBy.cumcount(self,ascending=True)
pandas.core.groupby.GroupBy.cummax(self,axis=0,**kwargs)
pandas.core.groupby.GroupBy.cummin(self,axis=0,**kwargs)
pandas.core.groupby.GroupBy.cumprod(self,axis=0,*args,**kwargs)
pandas.core.groupby.GroupBy.cumsum(self,axis=0,*args,**kwargs)
pandas.core.groupby.GroupBy.describe(self,**kwargs)
pandas.core.groupby.GroupBy.expanding(self,*args,**kwargs)
pandas.core.groupby.GroupBy.head(self,n=5)
pandas.core.groupby.GroupBy.mean(self,*args,**kwargs)
pandas.core.groupby.GroupBy.median(self,**kwargs)
pandas.core.groupby.GroupBy.nth(self,n,dropna=None)
pandas.core.groupby.GroupBy.ohlc(self)
pandas.core.groupby.GroupBy.pad(self,limit=None)
pandas.core.groupby.GroupBy.resample(self,rule,*args,**kwargs)
pandas.core.groupby.GroupBy.rolling(self,*args,**kwargs)
pandas.core.groupby.GroupBy.sem(self,ddof=1)
pandas.core.groupby.GroupBy.shift(self,periods=1,freq=None,axis=0)
pandas.core.groupby.GroupBy.size(self)
pandas.core.groupby.GroupBy.std(self,ddof=1,*args,**kwargs)
pandas.core.groupby.GroupBy.tail(self,n=5)
pandas.core.groupby.GroupBy.var(self,ddof=1,*args,**kwargs)
pandas.core.groupby.GroupByPlot(self,groupby)
pandas.core.groupby.GroupByPlot.__getattr__(self,name)
pandas.core.groupby.GroupByPlot.__init__(self,groupby)
pandas.core.groupby.Grouper(self,key=None,level=None,freq=None,axis=0,sort=False)
pandas.core.groupby.Grouper.__init__(self,key=None,level=None,freq=None,axis=0,sort=False)
pandas.core.groupby.Grouper._get_binner_for_grouping(self,obj)
pandas.core.groupby.Grouper._get_grouper(self,obj)
pandas.core.groupby.Grouper._set_grouper(self,obj,sort=False)
pandas.core.groupby.Grouper.ax(self)
pandas.core.groupby.Grouper.groups(self)
pandas.core.groupby.Grouping(self,index,grouper=None,obj=None,name=None,level=None,sort=True,in_axis=False)
pandas.core.groupby.Grouping.__init__(self,index,grouper=None,obj=None,name=None,level=None,sort=True,in_axis=False)
pandas.core.groupby.Grouping.__iter__(self)
pandas.core.groupby.Grouping.__repr__(self)
pandas.core.groupby.Grouping._make_labels(self)
pandas.core.groupby.Grouping.group_index(self)
pandas.core.groupby.Grouping.groups(self)
pandas.core.groupby.Grouping.indices(self)
pandas.core.groupby.Grouping.labels(self)
pandas.core.groupby.Grouping.ngroups(self)
pandas.core.groupby.NDArrayGroupBy(GroupBy)
pandas.core.groupby.NDFrameGroupBy(GroupBy)
pandas.core.groupby.NDFrameGroupBy._aggregate_generic(self,func,*args,**kwargs)
pandas.core.groupby.NDFrameGroupBy._aggregate_item_by_item(self,func,*args,**kwargs)
pandas.core.groupby.NDFrameGroupBy._choose_path(self,fast_path,slow_path,group)
pandas.core.groupby.NDFrameGroupBy._cython_agg_blocks(self,how,alt=None,numeric_only=True)
pandas.core.groupby.NDFrameGroupBy._cython_agg_general(self,how,alt=None,numeric_only=True)
pandas.core.groupby.NDFrameGroupBy._decide_output_index(self,output,labels)
pandas.core.groupby.NDFrameGroupBy._define_paths(self,func,*args,**kwargs)
pandas.core.groupby.NDFrameGroupBy._get_data_to_aggregate(self)
pandas.core.groupby.NDFrameGroupBy._iterate_slices(self)
pandas.core.groupby.NDFrameGroupBy._post_process_cython_aggregate(self,obj)
pandas.core.groupby.NDFrameGroupBy._transform_fast(self,result,obj)
pandas.core.groupby.NDFrameGroupBy._transform_general(self,func,*args,**kwargs)
pandas.core.groupby.NDFrameGroupBy._transform_item_by_item(self,obj,wrapper)
pandas.core.groupby.NDFrameGroupBy._wrap_agged_blocks(self,items,blocks)
pandas.core.groupby.NDFrameGroupBy._wrap_aggregated_output(self,output,names=None)
pandas.core.groupby.NDFrameGroupBy._wrap_applied_output(self,keys,values,not_indexed_same=False)
pandas.core.groupby.NDFrameGroupBy.aggregate(self,arg,*args,**kwargs)
pandas.core.groupby.NDFrameGroupBy.filter(self,func,dropna=True,*args,**kwargs)
pandas.core.groupby.NDFrameGroupBy.transform(self,func,*args,**kwargs)
pandas.core.groupby.NDFrameSplitter(self,data,labels,ngroups,axis=0)
pandas.core.groupby.NDFrameSplitter.__init__(self,data,labels,ngroups,axis=0)
pandas.core.groupby.NDFrameSplitter._chop(self,sdata,slice_obj)
pandas.core.groupby.NDFrameSplitter._get_sorted_data(self)
pandas.core.groupby.PanelGroupBy(NDFrameGroupBy)
pandas.core.groupby.PanelGroupBy._aggregate_item_by_item(self,func,*args,**kwargs)
pandas.core.groupby.PanelGroupBy._iterate_slices(self)
pandas.core.groupby.PanelGroupBy._wrap_aggregated_output(self,output,names=None)
pandas.core.groupby.PanelGroupBy._wrap_generic_output(self,result,obj)
pandas.core.groupby.PanelGroupBy.aggregate(self,arg,*args,**kwargs)
pandas.core.groupby.PanelGroupBy.aggregate(self,arg,*args,**kwargs)
pandas.core.groupby.SeriesGroupBy(GroupBy)
pandas.core.groupby.SeriesGroupBy._aggregate_multiple_funcs(self,arg,_level)
pandas.core.groupby.SeriesGroupBy._aggregate_named(self,func,*args,**kwargs)
pandas.core.groupby.SeriesGroupBy._apply_to_column_groupbys(self,func)
pandas.core.groupby.SeriesGroupBy._selection_name(self)
pandas.core.groupby.SeriesGroupBy._transform_fast(self,func)
pandas.core.groupby.SeriesGroupBy._wrap_aggregated_output(self,output,names=None)
pandas.core.groupby.SeriesGroupBy._wrap_applied_output(self,keys,values,not_indexed_same=False)
pandas.core.groupby.SeriesGroupBy._wrap_output(self,output,index,names=None)
pandas.core.groupby.SeriesGroupBy._wrap_transformed_output(self,output,names=None)
pandas.core.groupby.SeriesGroupBy.aggregate(self,func_or_funcs,*args,**kwargs)
pandas.core.groupby.SeriesGroupBy.count(self)
pandas.core.groupby.SeriesGroupBy.describe(self,**kwargs)
pandas.core.groupby.SeriesGroupBy.filter(self,func,dropna=True,*args,**kwargs)
pandas.core.groupby.SeriesGroupBy.nunique(self,dropna=True)
pandas.core.groupby.SeriesGroupBy.transform(self,func,*args,**kwargs)
pandas.core.groupby.SeriesGroupBy.value_counts(self,normalize=False,sort=True,ascending=False,bins=None,dropna=True)
pandas.core.groupby.SeriesSplitter(DataSplitter)
pandas.core.groupby.SeriesSplitter._chop(self,sdata,slice_obj)
pandas.core.groupby._GroupBy(self,obj,keys=None,axis=0,level=None,grouper=None,exclusions=None,selection=None,as_index=True,sort=True,group_keys=True,squeeze=False,**kwargs)
pandas.core.groupby._GroupBy.__getattr__(self,attr)
pandas.core.groupby._GroupBy.__init__(self,obj,keys=None,axis=0,level=None,grouper=None,exclusions=None,selection=None,as_index=True,sort=True,group_keys=True,squeeze=False,**kwargs)
pandas.core.groupby._GroupBy.__iter__(self)
pandas.core.groupby._GroupBy.__len__(self)
pandas.core.groupby._GroupBy.__unicode__(self)
pandas.core.groupby._GroupBy._apply_filter(self,indices,dropna)
pandas.core.groupby._GroupBy._assure_grouper(self)
pandas.core.groupby._GroupBy._concat_objects(self,keys,values,not_indexed_same=False)
pandas.core.groupby._GroupBy._cumcount_array(self,ascending=True)
pandas.core.groupby._GroupBy._cython_agg_general(self,how,alt=None,numeric_only=True)
pandas.core.groupby._GroupBy._cython_transform(self,how,numeric_only=True)
pandas.core.groupby._GroupBy._dir_additions(self)
pandas.core.groupby._GroupBy._get_index(self,name)
pandas.core.groupby._GroupBy._get_indices(self,names)
pandas.core.groupby._GroupBy._index_with_as_index(self,b)
pandas.core.groupby._GroupBy._iterate_slices(self)
pandas.core.groupby._GroupBy._make_wrapper(self,name)
pandas.core.groupby._GroupBy._python_agg_general(self,func,*args,**kwargs)
pandas.core.groupby._GroupBy._python_apply_general(self,f)
pandas.core.groupby._GroupBy._reset_group_selection(self)
pandas.core.groupby._GroupBy._selected_obj(self)
pandas.core.groupby._GroupBy._set_group_selection(self)
pandas.core.groupby._GroupBy._set_result_index_ordered(self,result)
pandas.core.groupby._GroupBy._try_cast(self,result,obj,numeric_only=False)
pandas.core.groupby._GroupBy._wrap_applied_output(self,*args,**kwargs)
pandas.core.groupby._GroupBy.apply(self,func,*args,**kwargs)
pandas.core.groupby._GroupBy.get_group(self,name,obj=None)
pandas.core.groupby._GroupBy.groups(self)
pandas.core.groupby._GroupBy.indices(self)
pandas.core.groupby._GroupBy.ngroups(self)
pandas.core.groupby._GroupBy.transform(self,func,*args,**kwargs)
pandas.core.groupby._convert_grouper(axis,grouper)
pandas.core.groupby._get_axes(group)
pandas.core.groupby._get_grouper(obj,key=None,axis=0,level=None,sort=True,mutated=False)
pandas.core.groupby._is_indexed_like(obj,axes)
pandas.core.groupby._is_label_like(val)
pandas.core.groupby._whitelist_method_generator(klass,whitelist)
pandas.core.groupby.generate_bins_generic(values,binner,closed)
pandas.core.groupby.get_splitter(data,*args,**kwargs)
pandas.core.groupby.groupby(obj,by,**kwds)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/panel.py----------------------------------------
A:pandas.core.panel._shared_doc_kwargs->dict(axes='items, major_axis, minor_axis', klass='Panel', axes_single_arg="{0, 1, 2, 'items', 'major_axis', 'minor_axis'}")
A:pandas.core.panel.n_time->len(time)
A:pandas.core.panel.n_panel->len(panels)
A:pandas.core.panel.u_panels->numpy.unique(panels)
A:pandas.core.panel.u_time->numpy.unique(time)
A:pandas.core.panel.time->numpy.tile(u_time, len(u_panels))
A:pandas.core.panel.panels->numpy.repeat(u_panels, len(u_time))
A:pandas.core.panel.(time, panels)->_ensure_like_indices(time, panels)
A:pandas.core.panel.dtype->self._validate_dtype(dtype)
A:pandas.core.panel.mgr->self._init_matrix(values, passed_axes, dtype=dtype, copy=False)
A:pandas.core.panel.(dtype, data)->infer_dtype_from_scalar(data)
A:pandas.core.panel.values->values.copy().copy()
A:pandas.core.panel.haxis->Index(ks)
A:pandas.core.panel.data->OrderedDict(((k, v) for (k, v) in compat.iteritems(data) if k in haxis))
A:pandas.core.panel.ks->list(sorted(ks))
A:pandas.core.panel.data[k]->self._constructor_sliced(v)
A:pandas.core.panel.raxes_sm->self._extract_axes_for_slice(self, raxes)
A:pandas.core.panel.vvalues->OrderedDict(((k, v) for (k, v) in compat.iteritems(data) if k in haxis)).get(h)
A:pandas.core.panel.d->self._construct_axes_dict()
A:pandas.core.panel.v->getattr(self, a)
A:pandas.core.panel.orient->orient.lower().lower()
A:pandas.core.panel.new_data->self._data.xs(i, axis=axis, copy=True, takeable=True)
A:pandas.core.panel.d[cls._info_axis_name]->Index(ks)
A:pandas.core.panel.key->pandas.core.common._apply_if_callable(key, self)
A:pandas.core.panel.loc->info.get_loc(key)
A:pandas.core.panel.result_index->maybe_droplevels(new_index, key)
A:pandas.core.panel.result->pandas.core.missing.fill_zeros(result, x, y, name, fill_zeros)
A:pandas.core.panel.ax->self._get_axis(indexer_axis)
A:pandas.core.panel.new_data[col]->func(self[col], other[col])
A:pandas.core.panel.class_name->str(self.__class__)
A:pandas.core.panel.output->'\n'.join([class_name, dims] + [axis_pretty(a) for a in self._AXIS_ORDERS])
A:pandas.core.panel.axis_name->self._get_axis_name(axis)
A:pandas.core.panel.writer->ExcelWriter(path, engine=engine)
A:pandas.core.panel.name->str(item)
A:pandas.core.panel.nargs->len(args)
A:pandas.core.panel.takeable->kwargs.pop('takeable', None)
A:pandas.core.panel.lower->self._get_item_cache(args[0])
A:pandas.core.panel.axes->kwargs.pop('axes', ())
A:pandas.core.panel.args->list(args)
A:pandas.core.panel.(likely_dtype, args[-1])->infer_dtype_from_scalar(args[-1])
A:pandas.core.panel.shape->numpy.array(self.shape).take(indlist)
A:pandas.core.panel.value->value.reindex(**self._construct_axes_dict_for_slice(self._AXIS_ORDERS[1:])).reindex(**self._construct_axes_dict_for_slice(self._AXIS_ORDERS[1:]))
A:pandas.core.panel.mat->mat.reshape(tuple([1]) + shape[1:]).reshape(tuple([1]) + shape[1:])
A:pandas.core.panel.(dtype, value)->infer_dtype_from_scalar(value)
A:pandas.core.panel.items->self.items.union(other.items)
A:pandas.core.panel.major->self.major_axis.union(other.major_axis)
A:pandas.core.panel.minor->self.minor_axis.union(other.minor_axis)
A:pandas.core.panel.wp->Panel(values, items, major, minor)
A:pandas.core.panel.axis->self._get_axis_name(axis)
A:pandas.core.panel.mask->numpy.isfinite(values)
A:pandas.core.panel.per_slice->numpy.prod(values.shape[:axis] + values.shape[axis + 1:])
A:pandas.core.panel.new_values->new_values.swapaxes(0, 2).swapaxes(0, 2)
A:pandas.core.panel.(index, columns)->self._get_plane_axes(axis)
A:pandas.core.panel.other->other.reindex(**{axis_name: axis_values}).reindex(**{axis_name: axis_values})
A:pandas.core.panel.this->self.reindex(major=join_major, minor=join_minor)
A:pandas.core.panel.result_values->func(this.values, other.values)
A:pandas.core.panel.axis_number->self._get_axis_number(axis_name)
A:pandas.core.panel.selector->slice(None, None)
A:pandas.core.panel.axis_idx->idx.to_hierarchical(n_repeat, n_shuffle)
A:pandas.core.panel.(major_labels, major_levels, major_names)->construct_index_parts(self.major_axis)
A:pandas.core.panel.(minor_labels, minor_levels, minor_names)->construct_index_parts(self.minor_axis, major=False)
A:pandas.core.panel.index->Index([])
A:pandas.core.panel.to_long->deprecate('to_long', to_frame)
A:pandas.core.panel.toLong->deprecate('toLong', to_frame)
A:pandas.core.panel.slice_axis->self._get_axis(axis)
A:pandas.core.panel.indexer->numpy.zeros(ndim, 'O')
A:pandas.core.panel.indlist->list(range(ndim))
A:pandas.core.panel.indexer[axis]->slice(None, None)
A:pandas.core.panel.points->cartesian_product(planes)
A:pandas.core.panel.pts->tuple([p[i] for p in points])
A:pandas.core.panel.obj->func(sliced)
A:pandas.core.panel.arr->arr.transpose(tuple(list(tranp))).transpose(tuple(list(tranp)))
A:pandas.core.panel.tranp->numpy.array([axis] + indlist).argsort()
A:pandas.core.panel.results->numpy.array(results).reshape(shape)
A:pandas.core.panel.indexer_axis->list(range(ndim))
A:pandas.core.panel.ndim->getattr(list(compat.itervalues(result))[0], 'ndim', 0)
A:pandas.core.panel.i->self._get_axis_number(axis)
A:pandas.core.panel.(join_major, join_minor)->self._get_join_index(other, how)
A:pandas.core.panel.merged_data->self.reindex(major=join_major, minor=join_minor)._data.merge(other._data, lsuffix, rsuffix)
A:pandas.core.panel.join_major->self.major_axis.union(other.major_axis)
A:pandas.core.panel.join_minor->self.minor_axis.union(other.minor_axis)
A:pandas.core.panel.adj_frames->OrderedDict()
A:pandas.core.panel.adj_frames[k]->self._constructor_sliced(v)
A:pandas.core.panel.axes_dict->dict([(a, ax) for (a, ax) in zip(axes, self._extract_axes(self, adj_frames, axes, intersect=intersect))])
A:pandas.core.panel.reindex_dict->dict([(self._AXIS_SLICEMAP[a], axes_dict[a]) for a in axes])
A:pandas.core.panel.result[key]->frame.reindex(**reindex_dict)
A:pandas.core.panel.lengths->list(set(raw_lengths))
A:pandas.core.panel.op_name->str(item).replace('__', '')
pandas.core.panel.LongPanel(self,*args,**kwargs)
pandas.core.panel.LongPanel.__init__(self,*args,**kwargs)
pandas.core.panel.Panel(self,data=None,items=None,major_axis=None,minor_axis=None,copy=False,dtype=None)
pandas.core.panel.Panel.__getitem__(self,key)
pandas.core.panel.Panel.__init__(self,data=None,items=None,major_axis=None,minor_axis=None,copy=False,dtype=None)
pandas.core.panel.Panel.__setitem__(self,key,value)
pandas.core.panel.Panel.__unicode__(self)
pandas.core.panel.Panel._add_aggregate_operations(cls,use_numexpr=True)
pandas.core.panel.Panel._apply_1d(self,func,axis)
pandas.core.panel.Panel._apply_2d(self,func,axis)
pandas.core.panel.Panel._box_item_values(self,key,values)
pandas.core.panel.Panel._combine(self,other,func,axis=0)
pandas.core.panel.Panel._combine_const(self,other,func)
pandas.core.panel.Panel._combine_frame(self,other,func,axis=0)
pandas.core.panel.Panel._combine_panel(self,other,func)
pandas.core.panel.Panel._compare_constructor(self,other,func)
pandas.core.panel.Panel._construct_return_type(self,result,axes=None)
pandas.core.panel.Panel._constructor(self)
pandas.core.panel.Panel._extract_axes(self,data,axes,**kwargs)
pandas.core.panel.Panel._extract_axes_for_slice(self,axes)
pandas.core.panel.Panel._extract_axis(self,data,axis=0,intersect=False)
pandas.core.panel.Panel._get_join_index(self,other,how)
pandas.core.panel.Panel._get_plane_axes(self,axis)
pandas.core.panel.Panel._get_plane_axes_index(self,axis)
pandas.core.panel.Panel._getitem_multilevel(self,key)
pandas.core.panel.Panel._homogenize_dict(self,frames,intersect=True,dtype=None)
pandas.core.panel.Panel._init_arrays(self,arrays,arr_names,axes)
pandas.core.panel.Panel._init_data(self,data,copy,dtype,**kwargs)
pandas.core.panel.Panel._init_dict(self,data,axes,dtype=None)
pandas.core.panel.Panel._init_matrix(self,data,axes,dtype=None,copy=False)
pandas.core.panel.Panel._ixs(self,i,axis=0)
pandas.core.panel.Panel._needs_reindex_multi(self,axes,method,level)
pandas.core.panel.Panel._prep_ndarray(self,values,copy=True)
pandas.core.panel.Panel._reduce(self,op,name,axis=0,skipna=True,numeric_only=None,filter_type=None,**kwds)
pandas.core.panel.Panel._unpickle_panel_compat(self,state)
pandas.core.panel.Panel._wrap_result(self,result,axis)
pandas.core.panel.Panel.align(self,other,**kwargs)
pandas.core.panel.Panel.apply(self,func,axis='major',**kwargs)
pandas.core.panel.Panel.as_matrix(self)
pandas.core.panel.Panel.conform(self,frame,axis='items')
pandas.core.panel.Panel.count(self,axis='major')
pandas.core.panel.Panel.dropna(self,axis=0,how='any',inplace=False)
pandas.core.panel.Panel.fillna(self,value=None,method=None,axis=None,inplace=False,limit=None,downcast=None,**kwargs)
pandas.core.panel.Panel.from_dict(cls,data,intersect=False,orient='items',dtype=None)
pandas.core.panel.Panel.get_value(self,*args,**kwargs)
pandas.core.panel.Panel.groupby(self,function,axis='major')
pandas.core.panel.Panel.head(self,n=5)
pandas.core.panel.Panel.join(self,other,how='left',lsuffix='',rsuffix='')
pandas.core.panel.Panel.major_xs(self,key)
pandas.core.panel.Panel.minor_xs(self,key)
pandas.core.panel.Panel.reindex(self,items=None,major_axis=None,minor_axis=None,**kwargs)
pandas.core.panel.Panel.reindex_axis(self,labels,axis=0,method=None,level=None,copy=True,limit=None,fill_value=np.nan)
pandas.core.panel.Panel.rename(self,items=None,major_axis=None,minor_axis=None,**kwargs)
pandas.core.panel.Panel.round(self,decimals=0,*args,**kwargs)
pandas.core.panel.Panel.set_value(self,*args,**kwargs)
pandas.core.panel.Panel.shift(self,periods=1,freq=None,axis='major')
pandas.core.panel.Panel.tail(self,n=5)
pandas.core.panel.Panel.to_excel(self,path,na_rep='',engine=None,**kwargs)
pandas.core.panel.Panel.to_frame(self,filter_observations=True)
pandas.core.panel.Panel.to_sparse(self,*args,**kwargs)
pandas.core.panel.Panel.transpose(self,*args,**kwargs)
pandas.core.panel.Panel.tshift(self,periods=1,freq=None,axis='major')
pandas.core.panel.Panel.update(self,other,join='left',overwrite=True,filter_func=None,raise_conflict=False)
pandas.core.panel.Panel.xs(self,key,axis=1)
pandas.core.panel.WidePanel(self,*args,**kwargs)
pandas.core.panel.WidePanel.__init__(self,*args,**kwargs)
pandas.core.panel._ensure_like_indices(time,panels)
pandas.core.panel.panel_index(time,panels,names=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/common.py----------------------------------------
A:pandas.core.common.a_has->hasattr(a, 'name')
A:pandas.core.common.b_has->hasattr(b, 'name')
A:pandas.core.common.value->pandas._libs.tslib.Timedelta(value)
A:pandas.core.common.key->numpy.asarray(_values_from_object(key))
A:pandas.core.common.arr->numpy.asarray(key)
A:pandas.core.common.(item1, item2)->kwargs.items()
A:pandas.core.common.listed->list(iterable)
A:pandas.core.common.seq_it->iter(seq)
A:pandas.core.common.seq_it_next->iter(seq)
A:pandas.core.common.r->ranges.pop()
A:pandas.core.common.result->numpy.empty(len(values), dtype=object)
A:pandas.core.common.k->key(value)
A:pandas.core.common.seq->set(seq)
A:pandas.core.common.values->list(values)
A:pandas.core.common.labels->_asarray_tuplesafe(labels)
A:pandas.core.common.new_vals->numpy.where(mask, arr1.view('i8'), arr2.view('i8'))
A:pandas.core.common.arr1->pandas._libs.tslib.ints_to_pydatetime(arr1.view('i8'))
A:pandas.core.common.arr2->pandas._libs.tslib.ints_to_pydatetime(arr2.view('i8'))
A:pandas.core.common.ip->get_ipython()
pandas.core.common.AbstractMethodError(self,class_instance)
pandas.core.common.AbstractMethodError.__init__(self,class_instance)
pandas.core.common.AbstractMethodError.__str__(self)
pandas.core.common.SettingWithCopyError(ValueError)
pandas.core.common.SettingWithCopyWarning(Warning)
pandas.core.common._all_none(*args)
pandas.core.common._all_not_none(*args)
pandas.core.common._any_none(*args)
pandas.core.common._apply_if_callable(maybe_callable,obj,**kwargs)
pandas.core.common._asarray_tuplesafe(values,dtype=None)
pandas.core.common._consensus_name_attr(objs)
pandas.core.common._count_not_none(*args)
pandas.core.common._default_index(n)
pandas.core.common._dict_compat(d)
pandas.core.common._get_callable_name(obj)
pandas.core.common._get_info_slice(obj,indexer)
pandas.core.common._index_labels_to_array(labels)
pandas.core.common._long_prod(vals)
pandas.core.common._maybe_box(indexer,values,obj,key)
pandas.core.common._maybe_box_datetimelike(value)
pandas.core.common._maybe_make_list(obj)
pandas.core.common._maybe_match_name(a,b)
pandas.core.common._mut_exclusive(**kwargs)
pandas.core.common._not_none(*args)
pandas.core.common._random_state(state=None)
pandas.core.common._try_sort(iterable)
pandas.core.common._where_compat(mask,arr1,arr2)
pandas.core.common.array_equivalent(*args,**kwargs)
pandas.core.common.difference(a,b)
pandas.core.common.flatten(l)
pandas.core.common.groupby(self,seq,key=lambdax:x)
pandas.core.common.groupby.__init__(self,seq,key=lambdax:x)
pandas.core.common.in_interactive_session()
pandas.core.common.in_ipnb()
pandas.core.common.in_ipython_frontend()
pandas.core.common.in_qtconsole()
pandas.core.common.intersection(*seqs)
pandas.core.common.is_bool_indexer(key)
pandas.core.common.is_full_slice(obj,l)
pandas.core.common.is_null_slice(obj)
pandas.core.common.iterpairs(seq)
pandas.core.common.map_indices_py(arr)
pandas.core.common.sentinel_factory()
pandas.core.common.split_ranges(mask)
pandas.core.common.union(*seqs)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/missing.py----------------------------------------
A:pandas.core.missing.(dtype, values_to_mask)->infer_dtype_from_array(values_to_mask)
A:pandas.core.missing.values_to_mask->numpy.array(values_to_mask, dtype=object)
A:pandas.core.missing.na_mask->isnull(values_to_mask)
A:pandas.core.missing.mask->((y == 0) & ~np.isnan(result)).ravel()
A:pandas.core.missing.method->clean_fill_method(method)
A:pandas.core.missing.order->kwargs.get('order')
A:pandas.core.missing.invalid->isnull(yvalues)
A:pandas.core.missing.result->result.reshape(shape).reshape(shape)
A:pandas.core.missing.limit_direction->limit_direction.lower().lower()
A:pandas.core.missing.ys->Series(yvalues)
A:pandas.core.missing.start_nans->set(range(ys.first_valid_index()))
A:pandas.core.missing.end_nans->set(range(1 + ys.last_valid_index(), len(valid)))
A:pandas.core.missing.violate_limit->sorted(_interp_limit(invalid, limit, limit))
A:pandas.core.missing.xvalues->getattr(xvalues, 'values', xvalues)
A:pandas.core.missing.yvalues->getattr(yvalues, 'values', yvalues)
A:pandas.core.missing.inds->inds.view(np.int64).view(np.int64)
A:pandas.core.missing.result[invalid]->_interpolate_scipy_wrapper(inds[valid], yvalues[valid], inds[invalid], method=method, fill_value=fill_value, bounds_error=bounds_error, order=order, **kwargs)
A:pandas.core.missing.new_x->new_x.copy().copy()
A:pandas.core.missing.terp->scipy.interpolate.UnivariateSpline(x, y, k=order, **kwargs)
A:pandas.core.missing.new_y->method(x, y, new_x, **kwargs)
A:pandas.core.missing.x->x.copy().copy()
A:pandas.core.missing.y->numpy.array(y)
A:pandas.core.missing.m->method(xi, yi.reshape(-1, 1), orders=order, extrapolate=extrapolate)
A:pandas.core.missing.P->scipy.interpolate.Akima1DInterpolator(xi, yi)
A:pandas.core.missing.values->_ensure_float64(values)
A:pandas.core.missing.view->arr.view(wrap_dtype)
A:pandas.core.missing._pad_1d_datetime->_interp_wrapper(algos.pad_inplace_int64, np.int64)
A:pandas.core.missing._pad_2d_datetime->_interp_wrapper(algos.pad_2d_inplace_int64, np.int64)
A:pandas.core.missing._backfill_1d_datetime->_interp_wrapper(algos.backfill_inplace_int64, np.int64)
A:pandas.core.missing._backfill_2d_datetime->_interp_wrapper(algos.backfill_2d_inplace_int64, np.int64)
A:pandas.core.missing._method->getattr(algos, 'backfill_2d_inplace_%s' % dtype.name, None)
A:pandas.core.missing.is_scalar_type->is_scalar(y)
A:pandas.core.missing.signs->numpy.sign(y if name.startswith(('r', '__r')) else x)
A:pandas.core.missing.nan_mask->((y == 0) & (x == 0)).ravel()
pandas.core.missing._akima_interpolate(xi,yi,x,der=0,axis=0)
pandas.core.missing._from_derivatives(xi,yi,x,order=None,der=0,extrapolate=False)
pandas.core.missing._interp_wrapper(f,wrap_dtype,na_override=None)
pandas.core.missing._interpolate_scipy_wrapper(x,y,new_x,method,fill_value=None,bounds_error=False,order=None,**kwargs)
pandas.core.missing.backfill_1d(values,limit=None,mask=None,dtype=None)
pandas.core.missing.backfill_2d(values,limit=None,mask=None,dtype=None)
pandas.core.missing.clean_fill_method(method,allow_nearest=False)
pandas.core.missing.clean_interp_method(method,**kwargs)
pandas.core.missing.clean_reindex_fill_method(method)
pandas.core.missing.fill_zeros(result,x,y,name,fill)
pandas.core.missing.get_fill_func(method)
pandas.core.missing.interpolate_1d(xvalues,yvalues,method='linear',limit=None,limit_direction='forward',fill_value=None,bounds_error=False,order=None,**kwargs)
pandas.core.missing.interpolate_2d(values,method='pad',axis=0,limit=None,fill_value=None,dtype=None)
pandas.core.missing.mask_missing(arr,values_to_mask)
pandas.core.missing.pad_1d(values,limit=None,mask=None,dtype=None)
pandas.core.missing.pad_2d(values,limit=None,mask=None,dtype=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/algorithms.py----------------------------------------
A:pandas.core.algorithms.values->getattr(series, method)(cur_n, keep=self.keep)
A:pandas.core.algorithms.inferred->pandas._libs.lib.infer_dtype(values)
A:pandas.core.algorithms.(values, dtype, ndtype)->_ensure_data(values)
A:pandas.core.algorithms.f->getattr(htable, 'mode_{dtype}'.format(dtype=ndtype))
A:pandas.core.algorithms.(htable, _, values, dtype, ndtype)->_get_hashtable_algo(values)
A:pandas.core.algorithms.(to_match, _, _)->_ensure_data(to_match, dtype)
A:pandas.core.algorithms.table->hash_klass(size_hint or len(values))
A:pandas.core.algorithms.result->_reconstruct_data(result, original.dtype, original)
A:pandas.core.algorithms.uniques->Index(uniques)
A:pandas.core.algorithms.(comps, dtype, _)->_ensure_data(comps)
A:pandas.core.algorithms.(values, _, _)->_ensure_data(values, dtype=dtype)
A:pandas.core.algorithms.comps->comps.astype(object).astype(object)
A:pandas.core.algorithms.checknull->isnull(values).any()
A:pandas.core.algorithms.str_pos->numpy.array([isinstance(x, string_types) for x in values], dtype=bool)
A:pandas.core.algorithms.nums->numpy.sort(values[~str_pos])
A:pandas.core.algorithms.strs->numpy.sort(values[str_pos])
A:pandas.core.algorithms.ordered->sort_mixed(values)
A:pandas.core.algorithms.sorter->_ensure_platform_int(t.lookup(ordered))
A:pandas.core.algorithms.labels->_ensure_platform_int(labels)
A:pandas.core.algorithms.((hash_klass, _), values)->_get_data_algo(values, _hashtables)
A:pandas.core.algorithms.t->hash_klass(len(values))
A:pandas.core.algorithms.reverse_indexer->numpy.empty(len(sorter), dtype=np.int_)
A:pandas.core.algorithms.new_labels->numpy.empty(len(sorter), dtype=np.int_).take(labels, mode='wrap')
A:pandas.core.algorithms.(values, dtype, _)->_ensure_data(values)
A:pandas.core.algorithms.((hash_klass, vec_klass), values)->_get_data_algo(values, _hashtables)
A:pandas.core.algorithms.(uniques, labels)->safe_sort(uniques, labels, na_sentinel=na_sentinel, assume_unique=True)
A:pandas.core.algorithms.name->getattr(values, 'name', None)
A:pandas.core.algorithms.ii->cut(values, bins, include_lowest=True)
A:pandas.core.algorithms.result.index->_reconstruct_data(result, original.dtype, original).index.astype('interval')
A:pandas.core.algorithms.counts->numpy.insert(counts, 0, mask.sum())
A:pandas.core.algorithms.(keys, counts)->f(values, dropna)
A:pandas.core.algorithms.keys->_reconstruct_data(keys, original.dtype, original)
A:pandas.core.algorithms.mask->isnull(x)
A:pandas.core.algorithms.(f, values)->_get_data_algo(values, _rank2d_functions)
A:pandas.core.algorithms.ranks->f(values, axis=axis, ties_method=method, ascending=ascending, na_option=na_option, pct=pct)
A:pandas.core.algorithms.out->numpy.empty(out_shape, dtype=dtype)
A:pandas.core.algorithms.b2->_broadcast(b, arr.shape)
A:pandas.core.algorithms.b2_mask->_broadcast(b_mask, arr.shape)
A:pandas.core.algorithms.not_nan->numpy.empty(arr.shape, dtype=bool)
A:pandas.core.algorithms.to_raise->((np.iinfo(np.int64).max - b2 < arr) & not_nan).any()
A:pandas.core.algorithms.x->numpy.asarray(x)
A:pandas.core.algorithms.score->_interpolate(values[int(idx)], values[int(idx) + 1], idx % 1)
A:pandas.core.algorithms.q->numpy.asarray(q, np.float64)
A:pandas.core.algorithms.dropped->self.obj.dropna()
A:pandas.core.algorithms.(arr, _, _)->_ensure_data(dropped.values)
A:pandas.core.algorithms.narr->len(arr)
A:pandas.core.algorithms.n->int(n)
A:pandas.core.algorithms.kth_val->pandas._libs.algos.kth_smallest(arr.copy(), n - 1)
A:pandas.core.algorithms.(ns,)->numpy.nonzero(arr <= kth_val)
A:pandas.core.algorithms.columns->list(columns)
A:pandas.core.algorithms.cur_frameframe->frame.take(indexer).reset_index(drop=True)
A:pandas.core.algorithms.indexer->_ensure_int64(indexer, copy=False)
A:pandas.core.algorithms.duplicated_filter->series.duplicated(keep=False)
A:pandas.core.algorithms.frame->frame.take(indexer).take(indexer)
A:pandas.core.algorithms.frame.index->original_index.take(indexer)
A:pandas.core.algorithms.arr->arr.view('i8').view('i8')
A:pandas.core.algorithms.fill_value->fill_wrap(fill_value)
A:pandas.core.algorithms.row_needs->row_mask.any()
A:pandas.core.algorithms.col_needs->col_mask.any()
A:pandas.core.algorithms.needs_masking->isnull(x).any()
A:pandas.core.algorithms.func->_convert_wrapper(func, out.dtype)
A:pandas.core.algorithms.(dtype, fill_value)->maybe_promote(arr.dtype, fill_value)
A:pandas.core.algorithms.out_shape->tuple(out_shape)
A:pandas.core.algorithms.out_shape[axis]->len(indexer)
A:pandas.core.algorithms.row_idx->_ensure_int64(row_idx)
A:pandas.core.algorithms.col_idx->_ensure_int64(col_idx)
A:pandas.core.algorithms.dtype->numpy.dtype(dtype)
A:pandas.core.algorithms.out_arr->TimedeltaIndex(out_arr.ravel().astype('int64')).asi8.reshape(out_arr.shape).astype('timedelta64[ns]')
A:pandas.core.algorithms.res_indexer->tuple(res_indexer)
A:pandas.core.algorithms.lag_indexer->tuple(lag_indexer)
A:pandas.core.algorithms.res->res.copy().copy()
A:pandas.core.algorithms.lag->lag.copy().copy()
pandas.core.algorithms.SelectN(self,obj,n,keep)
pandas.core.algorithms.SelectN.__init__(self,obj,n,keep)
pandas.core.algorithms.SelectN.is_valid_dtype_n_method(dtype)
pandas.core.algorithms.SelectN.nlargest(self)
pandas.core.algorithms.SelectN.nsmallest(self)
pandas.core.algorithms.SelectNFrame(self,obj,n,keep,columns)
pandas.core.algorithms.SelectNFrame.__init__(self,obj,n,keep,columns)
pandas.core.algorithms.SelectNFrame.compute(self,method)
pandas.core.algorithms.SelectNSeries(SelectN)
pandas.core.algorithms.SelectNSeries.compute(self,method)
pandas.core.algorithms._convert_wrapper(f,conv_dtype)
pandas.core.algorithms._ensure_arraylike(values)
pandas.core.algorithms._ensure_data(values,dtype=None)
pandas.core.algorithms._get_data_algo(values,func_map)
pandas.core.algorithms._get_hashtable_algo(values)
pandas.core.algorithms._get_take_nd_function(ndim,arr_dtype,out_dtype,axis=0,mask_info=None)
pandas.core.algorithms._reconstruct_data(values,dtype,original)
pandas.core.algorithms._take_2d_multi_object(arr,indexer,out,fill_value,mask_info)
pandas.core.algorithms._take_nd_object(arr,indexer,out,axis,fill_value,mask_info)
pandas.core.algorithms._value_counts_arraylike(values,dropna)
pandas.core.algorithms._view_wrapper(f,arr_dtype=None,out_dtype=None,fill_wrap=None)
pandas.core.algorithms.checked_add_with_arr(arr,b,arr_mask=None,b_mask=None)
pandas.core.algorithms.diff(arr,n,axis=0)
pandas.core.algorithms.duplicated(values,keep='first')
pandas.core.algorithms.factorize(values,sort=False,order=None,na_sentinel=-1,size_hint=None)
pandas.core.algorithms.isin(comps,values)
pandas.core.algorithms.match(to_match,values,na_sentinel=-1)
pandas.core.algorithms.mode(values)
pandas.core.algorithms.quantile(x,q,interpolation_method='fraction')
pandas.core.algorithms.rank(values,axis=0,method='average',na_option='keep',ascending=True,pct=False)
pandas.core.algorithms.safe_sort(values,labels=None,na_sentinel=-1,assume_unique=False)
pandas.core.algorithms.take_2d_multi(arr,indexer,out=None,fill_value=np.nan,mask_info=None,allow_fill=True)
pandas.core.algorithms.take_nd(arr,indexer,axis=0,out=None,fill_value=np.nan,mask_info=None,allow_fill=True)
pandas.core.algorithms.unique(values)
pandas.core.algorithms.value_counts(values,sort=True,ascending=False,normalize=False,bins=None,dropna=True)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/base.py----------------------------------------
A:pandas.core.base._shared_docs->dict()
A:pandas.core.base._indexops_doc_kwargs->dict(klass='IndexOpsMixin', inplace='', unique='IndexOpsMixin', duplicated='IndexOpsMixin')
A:pandas.core.base.encoding->get_option('display.encoding')
A:pandas.core.base.rv->set(dir(type(self)))
A:pandas.core.base.mem->mem.sum().sum()
A:pandas.core.base.f->self.__class__(subset, groupby=self._groupby[key], parent=self, **kwargs)._is_cython_func(arg)
A:pandas.core.base._internal_names_set->set(_internal_names)
A:pandas.core.base.bad_keys->list(set(key).difference(self.obj.columns))
A:pandas.core.base._axis->getattr(self, 'axis', 0)
A:pandas.core.base._level->dict([(attr, getattr(self, attr)) for attr in self._attributes]).pop('_level', None)
A:pandas.core.base.new_arg->pandas.compat.OrderedDict()
A:pandas.core.base.keys->list(compat.iterkeys(result))
A:pandas.core.base.colg->self.__class__(subset, groupby=self._groupby[key], parent=self, **kwargs)._gotitem(col, ndim=1, subset=obj[col])
A:pandas.core.base.result->unique1d(values)
A:pandas.core.base.result[fname]->func(fname, agg_how)
A:pandas.core.base.sl->set(self._selection_list)
A:pandas.core.base.obj->self.__class__(subset, groupby=self._groupby[key], parent=self, **kwargs)._selected_obj.copy()
A:pandas.core.base.kwargs[attr]->getattr(self, attr)
A:pandas.core.base.x->self.__class__(subset, groupby=self._groupby[key], parent=self, **kwargs)._shallow_copy(x, groupby=self._groupby)
A:pandas.core.base.kwargs->dict([(attr, getattr(self, attr)) for attr in self._attributes])
A:pandas.core.base.self->self.__class__(subset, groupby=self._groupby[key], parent=self, **kwargs).__class__(subset, groupby=self._groupby[key], parent=self, **kwargs)
A:pandas.core.base.T->property(transpose, doc='return the transpose, which is by definition self')
A:pandas.core.base.func->getattr(self, name, None)
A:pandas.core.base.uniqs->self.__class__(subset, groupby=self._groupby[key], parent=self, **kwargs).__class__(subset, groupby=self._groupby[key], parent=self, **kwargs).unique()
A:pandas.core.base.n->len(uniqs)
A:pandas.core.base.inplace->validate_bool_kwarg(inplace, 'inplace')
A:pandas.core.base.duplicated->self.__class__(subset, groupby=self._groupby[key], parent=self, **kwargs).__class__(subset, groupby=self._groupby[key], parent=self, **kwargs).duplicated(keep=keep)
pandas.core.base.AccessorProperty(self,accessor_cls,construct_accessor)
pandas.core.base.AccessorProperty.__delete__(self,instance)
pandas.core.base.AccessorProperty.__get__(self,instance,owner=None)
pandas.core.base.AccessorProperty.__init__(self,accessor_cls,construct_accessor)
pandas.core.base.AccessorProperty.__set__(self,instance,value)
pandas.core.base.DataError(GroupByError)
pandas.core.base.GroupByError(Exception)
pandas.core.base.GroupByMixin(object)
pandas.core.base.GroupByMixin._dispatch(name,*args,**kwargs)
pandas.core.base.GroupByMixin._gotitem(self,key,ndim,subset=None)
pandas.core.base.IndexOpsMixin(object)
pandas.core.base.IndexOpsMixin._reduce(self,op,name,axis=0,skipna=True,numeric_only=None,filter_type=None,**kwds)
pandas.core.base.IndexOpsMixin._update_inplace(self,result,**kwargs)
pandas.core.base.IndexOpsMixin._values(self)
pandas.core.base.IndexOpsMixin.argmax(self,axis=None)
pandas.core.base.IndexOpsMixin.argmin(self,axis=None)
pandas.core.base.IndexOpsMixin.base(self)
pandas.core.base.IndexOpsMixin.data(self)
pandas.core.base.IndexOpsMixin.drop_duplicates(self,keep='first',inplace=False)
pandas.core.base.IndexOpsMixin.duplicated(self,keep='first')
pandas.core.base.IndexOpsMixin.empty(self)
pandas.core.base.IndexOpsMixin.factorize(self,sort=False,na_sentinel=-1)
pandas.core.base.IndexOpsMixin.flags(self)
pandas.core.base.IndexOpsMixin.hasnans(self)
pandas.core.base.IndexOpsMixin.is_monotonic(self)
pandas.core.base.IndexOpsMixin.is_monotonic_decreasing(self)
pandas.core.base.IndexOpsMixin.is_unique(self)
pandas.core.base.IndexOpsMixin.item(self)
pandas.core.base.IndexOpsMixin.itemsize(self)
pandas.core.base.IndexOpsMixin.max(self)
pandas.core.base.IndexOpsMixin.memory_usage(self,deep=False)
pandas.core.base.IndexOpsMixin.min(self)
pandas.core.base.IndexOpsMixin.nbytes(self)
pandas.core.base.IndexOpsMixin.ndim(self)
pandas.core.base.IndexOpsMixin.nunique(self,dropna=True)
pandas.core.base.IndexOpsMixin.searchsorted(self,value,side='left',sorter=None)
pandas.core.base.IndexOpsMixin.shape(self)
pandas.core.base.IndexOpsMixin.size(self)
pandas.core.base.IndexOpsMixin.strides(self)
pandas.core.base.IndexOpsMixin.transpose(self,*args,**kwargs)
pandas.core.base.IndexOpsMixin.unique(self)
pandas.core.base.IndexOpsMixin.value_counts(self,normalize=False,sort=True,ascending=False,bins=None,dropna=True)
pandas.core.base.NoNewAttributesMixin(object)
pandas.core.base.NoNewAttributesMixin.__setattr__(self,key,value)
pandas.core.base.NoNewAttributesMixin._freeze(self)
pandas.core.base.PandasDelegate(PandasObject)
pandas.core.base.PandasDelegate._add_delegate_accessors(cls,delegate,accessors,typ,overwrite=False)
pandas.core.base.PandasDelegate._delegate_method(self,name,*args,**kwargs)
pandas.core.base.PandasDelegate._delegate_property_get(self,name,*args,**kwargs)
pandas.core.base.PandasDelegate._delegate_property_set(self,name,value,*args,**kwargs)
pandas.core.base.PandasObject(StringMixin)
pandas.core.base.PandasObject.__dir__(self)
pandas.core.base.PandasObject.__sizeof__(self)
pandas.core.base.PandasObject.__unicode__(self)
pandas.core.base.PandasObject._constructor(self)
pandas.core.base.PandasObject._dir_additions(self)
pandas.core.base.PandasObject._dir_deletions(self)
pandas.core.base.PandasObject._reset_cache(self,key=None)
pandas.core.base.SelectionMixin(object)
pandas.core.base.SelectionMixin.__getitem__(self,key)
pandas.core.base.SelectionMixin._aggregate(self,arg,*args,**kwargs)
pandas.core.base.SelectionMixin._aggregate_multiple_funcs(self,arg,_level,_axis)
pandas.core.base.SelectionMixin._gotitem(self,key,ndim,subset=None)
pandas.core.base.SelectionMixin._is_builtin_func(self,arg)
pandas.core.base.SelectionMixin._is_cython_func(self,arg)
pandas.core.base.SelectionMixin._obj_with_exclusions(self)
pandas.core.base.SelectionMixin._selected_obj(self)
pandas.core.base.SelectionMixin._selection_list(self)
pandas.core.base.SelectionMixin._selection_name(self)
pandas.core.base.SelectionMixin._shallow_copy(self,obj=None,obj_type=None,**kwargs)
pandas.core.base.SelectionMixin._try_aggregate_string_function(self,arg,*args,**kwargs)
pandas.core.base.SelectionMixin.aggregate(self,func,*args,**kwargs)
pandas.core.base.SelectionMixin.ndim(self)
pandas.core.base.SpecificationError(GroupByError)
pandas.core.base.StringMixin(object)
pandas.core.base.StringMixin.__bytes__(self)
pandas.core.base.StringMixin.__repr__(self)
pandas.core.base.StringMixin.__str__(self)
pandas.core.base.StringMixin.__unicode__(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/frame.py----------------------------------------
A:pandas.core.frame._shared_doc_kwargs->dict(axes='index, columns', klass='DataFrame', axes_single_arg="{0 or 'index', 1 or 'columns'}", optional_by='\n        by : str or list of str\n            Name or list of names which refer to the axis items.', versionadded_to_excel='')
A:pandas.core.frame.dtype->self.reindex(columns=combined_columns)._validate_dtype(dtype)
A:pandas.core.frame.mgr->mgr.copy().copy()
A:pandas.core.frame.mask->numpy.ma.getmaskarray(data[col])
A:pandas.core.frame.(data, fill_value)->maybe_upcast(data, copy=True)
A:pandas.core.frame.data->lmap(tuple, data)
A:pandas.core.frame.data_columns->list(data.dtype.names)
A:pandas.core.frame.(arrays, columns)->_to_arrays(data, columns)
A:pandas.core.frame.columns->_default_index(len(content))
A:pandas.core.frame.index->lrange(len(data))
A:pandas.core.frame.arr->maybe_cast_to_datetime(arr, dtype)
A:pandas.core.frame.exc->TypeError('DataFrame constructor called with incompatible data and dtype: %s' % e)
A:pandas.core.frame.(dtype, data)->infer_dtype_from_scalar(data)
A:pandas.core.frame.values->numpy.vstack(aligned_values)
A:pandas.core.frame.v->_sanitize_array(v, index, dtype=dtype, copy=False, raise_cast_failure=False)
A:pandas.core.frame.keys->_ensure_index(keys)
A:pandas.core.frame.columnsdata_names->Index(keys)
A:pandas.core.frame.(index, columns)->_get_axes(*values.shape)
A:pandas.core.frame.e->NotImplementedError('Handling exception with filter_type %s not implemented.' % filter_type)
A:pandas.core.frame.max_rows->get_option('display.max_info_rows', len(self) + 1)
A:pandas.core.frame.(width, height)->pandas.io.formats.console.get_console_size()
A:pandas.core.frame.max_columns->get_option('display.max_columns')
A:pandas.core.frame.nb_columns->len(self.columns)
A:pandas.core.frame.buf->StringIO(u(''))
A:pandas.core.frame.value->numpy.tile(value, (len(existing_piece.columns), 1))
A:pandas.core.frame.repr_width->max([len(l) for l in value.split('\n')])
A:pandas.core.frame.max_cols->get_option('display.max_info_columns', len(self.columns) + 1)
A:pandas.core.frame.show_dimensions->get_option('display.show_dimensions')
A:pandas.core.frame.(width, _)->pandas.io.formats.console.get_console_size()
A:pandas.core.frame.val->val.replace('>', '&gt;', 1).replace('>', '&gt;', 1)
A:pandas.core.frame.s->klass(v, index=columns, name=k)
A:pandas.core.frame.itertuple->collections.namedtuple(name, fields + list(self.columns), rename=True)
A:pandas.core.frame.common->self.reindex(columns=combined_columns).columns.union(other.index)
A:pandas.core.frame.left->left.copy().copy()
A:pandas.core.frame.right->right.copy().copy()
A:pandas.core.frame.rvals->numpy.asarray(other)
A:pandas.core.frame.result->self.reindex(columns=combined_columns)._constructor_sliced(result, name=q)
A:pandas.core.frame.orient->orient.lower().lower()
A:pandas.core.frame.first_row->next(data)
A:pandas.core.frame.columnsarr_columns->_ensure_index(sorted(data))
A:pandas.core.frame.(arrays, arr_columns)->_reorder_arrays(new_arrays, arr_columns, columns)
A:pandas.core.frame.arr_columns->_ensure_index([arr_columns[i] for i in indexer])
A:pandas.core.frame.exclude->set(exclude)
A:pandas.core.frame.i->_default_index(len(content)).get_loc(index)
A:pandas.core.frame.result_index->self._get_numeric_data()._get_axis(raxis).union(other._get_axis(raxis))
A:pandas.core.frame.ix_vals->lmap(np.array, zip(*self.index.values))
A:pandas.core.frame.index_names->list(self.index.names)
A:pandas.core.frame.names->lmap(compat.text_type, self.columns)
A:pandas.core.frame.(keys, values)->lzip(*items)
A:pandas.core.frame.idict->dict(items)
A:pandas.core.frame.selfsorted->self.reindex(columns=combined_columns).sort_index(level=0)
A:pandas.core.frame.major_axis->major_axis.copy().copy()
A:pandas.core.frame.minor_axis->minor_axis.copy().copy()
A:pandas.core.frame.new_mgr->self.reindex(columns=combined_columns).sort_index(level=0)._data.reshape_nd(axes=new_axes, labels=[major_labels, minor_labels], shape=shape, ref_items=selfsorted.columns)
A:pandas.core.frame.formatter->pandas.io.formats.format.DataFrameFormatter(self, buf=buf, columns=columns, col_space=col_space, na_rep=na_rep, header=header, index=index, formatters=formatters, float_format=float_format, bold_rows=bold_rows, sparsify=sparsify, index_names=index_names, escape=escape, decimal=decimal)
A:pandas.core.frame.writer->StataWriter(fname, self, convert_dates=convert_dates, encoding=encoding, byteorder=byteorder, time_stamp=time_stamp, data_label=data_label, write_index=write_index, variable_labels=variable_labels)
A:pandas.core.frame.longtable->get_option('display.latex.longtable')
A:pandas.core.frame.escape->get_option('display.latex.escape')
A:pandas.core.frame.multicolumn->get_option('display.latex.multicolumn')
A:pandas.core.frame.multicolumn_format->get_option('display.latex.multicolumn_format')
A:pandas.core.frame.multirow->get_option('display.latex.multirow')
A:pandas.core.frame.counts->pandas._libs.lib.count_level_2d(mask, labels, len(level_index), axis=0)
A:pandas.core.frame.col->self.reindex(columns=combined_columns).columns.get_loc(col)
A:pandas.core.frame.memory_usage->get_option('display.memory_usage')
A:pandas.core.frame.mem_usage->self.reindex(columns=combined_columns).memory_usage(index=True, deep=deep).sum()
A:pandas.core.frame.T->property(transpose)
A:pandas.core.frame.self._data->self.reindex(columns=combined_columns)._data.reindex_axis(value.index.copy(), axis=1, fill_value=np.nan)
A:pandas.core.frame.dm->dm.join(objects).join(objects)
A:pandas.core.frame.objects->DataFrame(ovals, index=index, columns=_unpickle_array(ocols), copy=False)
A:pandas.core.frame.series->series.astype(new_dtype).astype(new_dtype)
A:pandas.core.frame.new_values->pandas.core.algorithms.take_2d_multi(self.values, indexer, fill_value=fill_value)
A:pandas.core.frame.lab_slice->slice(label[0], label[-1])
A:pandas.core.frame.index_len->len(self.index)
A:pandas.core.frame.key->check_bool_indexer(self.index, key)
A:pandas.core.frame.is_mi_columns->isinstance(self.columns, MultiIndex)
A:pandas.core.frame.indexer->_ensure_index(arr_columns).get_indexer(columns)
A:pandas.core.frame.loc->self.reindex(columns=combined_columns).columns.get_loc(key)
A:pandas.core.frame.result_columns->maybe_droplevels(new_columns, key)
A:pandas.core.frame.inplace->validate_bool_kwarg(inplace, 'inplace')
A:pandas.core.frame.res->self.reindex(columns=combined_columns).eval(expr, **kwargs)
A:pandas.core.frame.resolvers->kwargs.pop('resolvers', None)
A:pandas.core.frame.index_resolvers->self.reindex(columns=combined_columns)._get_index_resolvers()
A:pandas.core.frame.selection->tuple(map(frozenset, (include, exclude)))
A:pandas.core.frame.(include, exclude)->map(lambda x: frozenset(map(_get_dtype_from_object, x)), selection)
A:pandas.core.frame.include_these->Series(not bool(include), index=self.columns)
A:pandas.core.frame.exclude_these->Series(not bool(exclude), index=self.columns)
A:pandas.core.frame.include_these[column]->any(map(f, include))
A:pandas.core.frame.results[k]->pandas.core.common._apply_if_callable(v, data)
A:pandas.core.frame.cols->maybe_droplevels(self.columns[loc], key)
A:pandas.core.frame.(dtype, value)->infer_dtype_from_scalar(value)
A:pandas.core.frame.result[item]->Series(self._data.iget(idx), index=self.index, name=item)
A:pandas.core.frame.n->getattr(s, 'name', None)
A:pandas.core.frame.ridx->self.reindex(columns=combined_columns).index.get_indexer(row_labels)
A:pandas.core.frame.cidx->self.reindex(columns=combined_columns).columns.get_indexer(col_labels)
A:pandas.core.frame.result[i]->self.reindex(columns=combined_columns).get_value(r, c)
A:pandas.core.frame.frame->self.reindex(columns=combined_columns)._get_numeric_data()
A:pandas.core.frame.(new_index, indexer)->self.reindex(columns=combined_columns).index.reindex(new_index, method=method, level=level, limit=limit, tolerance=tolerance)
A:pandas.core.frame.(new_columns, indexer)->self.reindex(columns=combined_columns).columns.reindex(new_columns, method=method, level=level, limit=limit, tolerance=tolerance)
A:pandas.core.frame.(new_index, row_indexer)->self.reindex(columns=combined_columns).index.reindex(axes['index'])
A:pandas.core.frame.(new_columns, col_indexer)->self.reindex(columns=combined_columns).columns.reindex(axes['columns'])
A:pandas.core.frame.level->frame._get_axis(axis)._get_level_number(level)
A:pandas.core.frame.duplicates->lrange(len(data)).get_duplicates()
A:pandas.core.frame.new_obj->self.reindex(columns=combined_columns).copy()
A:pandas.core.frame.(values, changed)->maybe_upcast_putmask(values, mask, np.nan)
A:pandas.core.frame.new_index->self.reindex(columns=combined_columns).index.droplevel(level)
A:pandas.core.frame.to_insert->lzip(self.index.levels, self.index.labels)
A:pandas.core.frame.multi_col->isinstance(self.columns, MultiIndex)
A:pandas.core.frame.lev_num->self.reindex(columns=combined_columns).columns._get_level_number(col_level)
A:pandas.core.frame.name->tuple(name_lst)
A:pandas.core.frame.level_values->_maybe_casted_values(lev, lab)
A:pandas.core.frame.axis->self.reindex(columns=combined_columns)._get_axis_number(axis)
A:pandas.core.frame.ax->boxplot(self, column=column, by=by, ax=ax, fontsize=fontsize, grid=grid, rot=rot, figsize=figsize, layout=layout, return_type=return_type, **kwds)
A:pandas.core.frame.indices->pandas.core.nanops.nanargmax(self.values, axis=axis, skipna=skipna)
A:pandas.core.frame.agg_obj->self.reindex(columns=combined_columns).take(indices, axis=agg_axis)
A:pandas.core.frame.count->self.reindex(columns=combined_columns).take(indices, axis=agg_axis).count(axis=agg_axis)
A:pandas.core.frame.duplicated->self.reindex(columns=combined_columns).duplicated(subset, keep=keep)
A:pandas.core.frame.(inds,)->(-duplicated).nonzero()
A:pandas.core.frame.new_data->OrderedDict()
A:pandas.core.frame.(labels, shape)->map(list, zip(*map(f, vals)))
A:pandas.core.frame.ids->get_group_index(labels, shape, sort=False, xnull=False)
A:pandas.core.frame.labels->lmap(tuple, data)._get_agg_axis(axis)
A:pandas.core.frame.(new_axis, indexer)->lmap(tuple, data)._get_agg_axis(axis).sortlevel(level, ascending=ascending, sort_remaining=sort_remaining)
A:pandas.core.frame.baxis->self.reindex(columns=combined_columns)._get_block_manager_axis(axis)
A:pandas.core.frame.new_data.axes[baxis]->OrderedDict().axes[baxis]._sort_levels_monotonic()
A:pandas.core.frame.result.index->self.reindex(columns=combined_columns)._constructor_sliced(result, name=q).index.reorder_levels(order)
A:pandas.core.frame.result.columns->self.reindex(columns=combined_columns)._constructor_sliced(result, name=q).columns.reorder_levels(order)
A:pandas.core.frame.(this, other)->self.reindex(columns=combined_columns).align(other, copy=False)
A:pandas.core.frame.left_mask->isnull(left)
A:pandas.core.frame.right_mask->isnull(right)
A:pandas.core.frame.r->_arith_op(this.iloc[:, i].values, other.iloc[:, i].values)
A:pandas.core.frame.(left, right)->self._get_numeric_data().align(other, join='inner', copy=False)
A:pandas.core.frame.(self, other)->self.reindex(columns=combined_columns).align(other, 'outer', level=level, copy=False)
A:pandas.core.frame.other_idxlen->len(other.index)
A:pandas.core.frame.new_columns->self._get_numeric_data().columns.union(other.columns)
A:pandas.core.frame.this_mask->isnull(series)
A:pandas.core.frame.other_mask->isnull(otherSeries)
A:pandas.core.frame.result[col]->this[col].copy()
A:pandas.core.frame.otherSeries->otherSeries.astype(new_dtype).astype(new_dtype)
A:pandas.core.frame.new_dtype->find_common_type([this_dtype, other_dtype])
A:pandas.core.frame.needs_i8_conversion_i->needs_i8_conversion(new_dtype)
A:pandas.core.frame.x_values->x_values.view('i8').view('i8')
A:pandas.core.frame.y_values->y_values.view('i8').view('i8')
A:pandas.core.frame.other->other._get_numeric_data()._get_numeric_data()
A:pandas.core.frame.mask_this->notnull(that)
A:pandas.core.frame.mask_that->notnull(this)
A:pandas.core.frame.self[col]->pandas.core.computation.expressions.where(mask, this, that, raise_on_error=True)
A:pandas.core.frame.bm_axis->self.reindex(columns=combined_columns)._get_block_manager_axis(axis)
A:pandas.core.frame._agg_doc->dedent("\n    Examples\n    --------\n\n    >>> df = pd.DataFrame(np.random.randn(10, 3), columns=['A', 'B', 'C'],\n    ...                   index=pd.date_range('1/1/2000', periods=10))\n    >>> df.iloc[3:7] = np.nan\n\n    Aggregate these functions across all columns\n\n    >>> df.agg(['sum', 'min'])\n                A         B         C\n    sum -0.182253 -0.614014 -2.909534\n    min -1.916563 -1.460076 -1.568297\n\n    Different aggregations per column\n\n    >>> df.agg({'A' : ['sum', 'min'], 'B' : ['min', 'max']})\n                A         B\n    max       NaN  1.514318\n    min -1.916563 -1.460076\n    sum -0.182253       NaN\n\n    See also\n    --------\n    pandas.DataFrame.apply\n    pandas.DataFrame.transform\n    pandas.DataFrame.groupby.aggregate\n    pandas.DataFrame.resample.aggregate\n    pandas.DataFrame.rolling.aggregate\n\n    ")
A:pandas.core.frame.(result, how)->self.reindex(columns=combined_columns)._aggregate(func, *args, axis=0, **kwargs)
A:pandas.core.frame.ignore_failures->kwds.pop('ignore_failures', False)
A:pandas.core.frame.results->f(self.values)
A:pandas.core.frame.empty_arr->numpy.empty(len(index), dtype=values.dtype)
A:pandas.core.frame.dummy->Series(empty_arr, index=self._get_axis(axis), dtype=values.dtype)
A:pandas.core.frame.results[i]->func(v)
A:pandas.core.frame.res_index->res_index.take(successes).take(successes)
A:pandas.core.frame.result_values->numpy.empty_like(target.values)
A:pandas.core.frame.result_values[:, i]->func(target[col])
A:pandas.core.frame.self->self.reindex(columns=combined_columns).reindex(columns=combined_columns)
A:pandas.core.frame.can_concat->all((df.index.is_unique for df in frames))
A:pandas.core.frame.joined->merge(joined, frame, how=how, left_index=True, right_index=True)
A:pandas.core.frame.numeric_df->self.reindex(columns=combined_columns).reindex(columns=combined_columns)._get_numeric_data()
A:pandas.core.frame.idx->maybe_droplevels(self.columns[loc], key).copy()
A:pandas.core.frame.correl->correl.reindex(result_index).reindex(result_index)
A:pandas.core.frame.corrf->pandas.core.nanops.get_corr_func(method)
A:pandas.core.frame.K->len(cols)
A:pandas.core.frame.c->corrf(ac, bc)
A:pandas.core.frame.baseCov->pandas._libs.algos.nancorr(_ensure_float64(mat), cov=True, minp=min_periods)
A:pandas.core.frame.this->self.reindex(columns=combined_columns).reindex(columns=combined_columns)._get_numeric_data()
A:pandas.core.frame.num->(ldem * rdem).sum()
A:pandas.core.frame.count_axis->self.reindex(columns=combined_columns)._get_numeric_data()._get_axis(axis)
A:pandas.core.frame.agg_axis->self.reindex(columns=combined_columns)._get_numeric_data()._get_agg_axis(axis)
A:pandas.core.frame._EMPTY_SERIES->Series([])
A:pandas.core.frame.arrays->_homogenize(arrays, index, dtype)
A:pandas.core.frame.lengths->list(set(raw_lengths))
A:pandas.core.frame.fdata->numpy.ma.getdata(data)
A:pandas.core.frame.(arr, fv)->maybe_upcast(arr, fill_value=fv, copy=True)
A:pandas.core.frame.content->list(lib.dicts_to_array(data, list(columns)).T)
A:pandas.core.frame.indexerindexer_cache[id(index)]->lrange(len(data)).get_indexer(columns)
A:pandas.core.frame.has_some_name->any([getattr(s, 'name', None) is not None for s in data])
A:pandas.core.frame.oindex->lrange(len(data)).astype('O')
A:pandas.core.frame.new_data[col]->OrderedDict().get(col, OrderedDict())
A:pandas.core.frame.DataFrame.plot->pandas.core.base.AccessorProperty(gfx.FramePlotMethods, gfx.FramePlotMethods)
pandas.core.frame.DataFrame(self,data=None,index=None,columns=None,dtype=None,copy=False)
pandas.core.frame.DataFrame.__getitem__(self,key)
pandas.core.frame.DataFrame.__init__(self,data=None,index=None,columns=None,dtype=None,copy=False)
pandas.core.frame.DataFrame.__len__(self)
pandas.core.frame.DataFrame.__setitem__(self,key,value)
pandas.core.frame.DataFrame.__unicode__(self)
pandas.core.frame.DataFrame._apply_broadcast(self,func,axis)
pandas.core.frame.DataFrame._apply_empty_result(self,func,axis,reduce,*args,**kwds)
pandas.core.frame.DataFrame._apply_raw(self,func,axis)
pandas.core.frame.DataFrame._apply_standard(self,func,axis,ignore_failures=False,reduce=True)
pandas.core.frame.DataFrame._box_col_values(self,values,items)
pandas.core.frame.DataFrame._box_item_values(self,key,values)
pandas.core.frame.DataFrame._combine_const(self,other,func,raise_on_error=True)
pandas.core.frame.DataFrame._combine_frame(self,other,func,fill_value=None,level=None)
pandas.core.frame.DataFrame._combine_match_columns(self,other,func,level=None,fill_value=None)
pandas.core.frame.DataFrame._combine_match_index(self,other,func,level=None,fill_value=None)
pandas.core.frame.DataFrame._combine_series(self,other,func,fill_value=None,axis=None,level=None)
pandas.core.frame.DataFrame._combine_series_infer(self,other,func,level=None,fill_value=None)
pandas.core.frame.DataFrame._compare_frame(self,other,func,str_rep)
pandas.core.frame.DataFrame._compare_frame_evaluate(self,other,func,str_rep)
pandas.core.frame.DataFrame._constructor(self)
pandas.core.frame.DataFrame._constructor_expanddim(self)
pandas.core.frame.DataFrame._count_level(self,level,axis=0,numeric_only=False)
pandas.core.frame.DataFrame._ensure_valid_index(self,value)
pandas.core.frame.DataFrame._flex_compare_frame(self,other,func,str_rep,level)
pandas.core.frame.DataFrame._from_arrays(cls,arrays,columns,index,dtype=None)
pandas.core.frame.DataFrame._get_agg_axis(self,axis_num)
pandas.core.frame.DataFrame._getitem_array(self,key)
pandas.core.frame.DataFrame._getitem_column(self,key)
pandas.core.frame.DataFrame._getitem_frame(self,key)
pandas.core.frame.DataFrame._getitem_multilevel(self,key)
pandas.core.frame.DataFrame._getitem_slice(self,key)
pandas.core.frame.DataFrame._gotitem(self,key,ndim,subset=None)
pandas.core.frame.DataFrame._info_repr(self)
pandas.core.frame.DataFrame._init_dict(self,data,index,columns,dtype=None)
pandas.core.frame.DataFrame._init_ndarray(self,values,index,columns,dtype=None,copy=False)
pandas.core.frame.DataFrame._ixs(self,i,axis=0)
pandas.core.frame.DataFrame._join_compat(self,other,on=None,how='left',lsuffix='',rsuffix='',sort=False)
pandas.core.frame.DataFrame._reduce(self,op,name,axis=0,skipna=True,numeric_only=None,filter_type=None,**kwds)
pandas.core.frame.DataFrame._reindex_axes(self,axes,level,limit,tolerance,method,fill_value,copy)
pandas.core.frame.DataFrame._reindex_columns(self,new_columns,method,copy,level,fill_value=NA,limit=None,tolerance=None)
pandas.core.frame.DataFrame._reindex_index(self,new_index,method,copy,level,fill_value=NA,limit=None,tolerance=None)
pandas.core.frame.DataFrame._reindex_multi(self,axes,copy,fill_value)
pandas.core.frame.DataFrame._repr_fits_horizontal_(self,ignore_width=False)
pandas.core.frame.DataFrame._repr_fits_vertical_(self)
pandas.core.frame.DataFrame._repr_html_(self)
pandas.core.frame.DataFrame._repr_latex_(self)
pandas.core.frame.DataFrame._sanitize_column(self,key,value,broadcast=True)
pandas.core.frame.DataFrame._series(self)
pandas.core.frame.DataFrame._set_item(self,key,value)
pandas.core.frame.DataFrame._setitem_array(self,key,value)
pandas.core.frame.DataFrame._setitem_frame(self,key,value)
pandas.core.frame.DataFrame._setitem_slice(self,key,value)
pandas.core.frame.DataFrame._unpickle_frame_compat(self,state)
pandas.core.frame.DataFrame._unpickle_matrix_compat(self,state)
pandas.core.frame.DataFrame.aggregate(self,func,axis=0,*args,**kwargs)
pandas.core.frame.DataFrame.align(self,other,join='outer',axis=None,level=None,copy=True,fill_value=None,method=None,limit=None,fill_axis=0,broadcast_axis=None)
pandas.core.frame.DataFrame.append(self,other,ignore_index=False,verify_integrity=False)
pandas.core.frame.DataFrame.apply(self,func,axis=0,broadcast=False,raw=False,reduce=None,args=(),**kwds)
pandas.core.frame.DataFrame.applymap(self,func)
pandas.core.frame.DataFrame.assign(self,**kwargs)
pandas.core.frame.DataFrame.axes(self)
pandas.core.frame.DataFrame.combine(self,other,func,fill_value=None,overwrite=True)
pandas.core.frame.DataFrame.combine_first(self,other)
pandas.core.frame.DataFrame.corr(self,method='pearson',min_periods=1)
pandas.core.frame.DataFrame.corrwith(self,other,axis=0,drop=False)
pandas.core.frame.DataFrame.count(self,axis=0,level=None,numeric_only=False)
pandas.core.frame.DataFrame.cov(self,min_periods=None)
pandas.core.frame.DataFrame.diff(self,periods=1,axis=0)
pandas.core.frame.DataFrame.dot(self,other)
pandas.core.frame.DataFrame.drop_duplicates(self,subset=None,keep='first',inplace=False)
pandas.core.frame.DataFrame.dropna(self,axis=0,how='any',thresh=None,subset=None,inplace=False)
pandas.core.frame.DataFrame.duplicated(self,subset=None,keep='first')
pandas.core.frame.DataFrame.eval(self,expr,inplace=None,**kwargs)
pandas.core.frame.DataFrame.fillna(self,value=None,method=None,axis=None,inplace=False,limit=None,downcast=None,**kwargs)
pandas.core.frame.DataFrame.first_valid_index(self)
pandas.core.frame.DataFrame.from_csv(cls,path,header=0,sep=',',index_col=0,parse_dates=True,encoding=None,tupleize_cols=False,infer_datetime_format=False)
pandas.core.frame.DataFrame.from_dict(cls,data,orient='columns',dtype=None)
pandas.core.frame.DataFrame.from_items(cls,items,columns=None,orient='columns')
pandas.core.frame.DataFrame.from_records(cls,data,index=None,exclude=None,columns=None,coerce_float=False,nrows=None)
pandas.core.frame.DataFrame.get_value(self,index,col,takeable=False)
pandas.core.frame.DataFrame.idxmax(self,axis=0,skipna=True)
pandas.core.frame.DataFrame.idxmin(self,axis=0,skipna=True)
pandas.core.frame.DataFrame.info(self,verbose=None,buf=None,max_cols=None,memory_usage=None,null_counts=None)
pandas.core.frame.DataFrame.insert(self,loc,column,value,allow_duplicates=False)
pandas.core.frame.DataFrame.isin(self,values)
pandas.core.frame.DataFrame.iteritems(self)
pandas.core.frame.DataFrame.iterrows(self)
pandas.core.frame.DataFrame.itertuples(self,index=True,name='Pandas')
pandas.core.frame.DataFrame.join(self,other,on=None,how='left',lsuffix='',rsuffix='',sort=False)
pandas.core.frame.DataFrame.last_valid_index(self)
pandas.core.frame.DataFrame.lookup(self,row_labels,col_labels)
pandas.core.frame.DataFrame.melt(self,id_vars=None,value_vars=None,var_name=None,value_name='value',col_level=None)
pandas.core.frame.DataFrame.memory_usage(self,index=True,deep=False)
pandas.core.frame.DataFrame.merge(self,right,how='inner',on=None,left_on=None,right_on=None,left_index=False,right_index=False,sort=False,suffixes=('_x','_y'),copy=True,indicator=False)
pandas.core.frame.DataFrame.mode(self,axis=0,numeric_only=False)
pandas.core.frame.DataFrame.nlargest(self,n,columns,keep='first')
pandas.core.frame.DataFrame.nsmallest(self,n,columns,keep='first')
pandas.core.frame.DataFrame.nunique(self,axis=0,dropna=True)
pandas.core.frame.DataFrame.pivot(self,index=None,columns=None,values=None)
pandas.core.frame.DataFrame.quantile(self,q=0.5,axis=0,numeric_only=True,interpolation='linear')
pandas.core.frame.DataFrame.query(self,expr,inplace=False,**kwargs)
pandas.core.frame.DataFrame.reindex(self,index=None,columns=None,**kwargs)
pandas.core.frame.DataFrame.reindex_axis(self,labels,axis=0,method=None,level=None,copy=True,limit=None,fill_value=np.nan)
pandas.core.frame.DataFrame.rename(self,index=None,columns=None,**kwargs)
pandas.core.frame.DataFrame.reorder_levels(self,order,axis=0)
pandas.core.frame.DataFrame.reset_index(self,level=None,drop=False,inplace=False,col_level=0,col_fill='')
pandas.core.frame.DataFrame.round(self,decimals=0,*args,**kwargs)
pandas.core.frame.DataFrame.select_dtypes(self,include=None,exclude=None)
pandas.core.frame.DataFrame.set_index(self,keys,drop=True,append=False,inplace=False,verify_integrity=False)
pandas.core.frame.DataFrame.set_value(self,index,col,value,takeable=False)
pandas.core.frame.DataFrame.shape(self)
pandas.core.frame.DataFrame.shift(self,periods=1,freq=None,axis=0)
pandas.core.frame.DataFrame.sort_index(self,axis=0,level=None,ascending=True,inplace=False,kind='quicksort',na_position='last',sort_remaining=True,by=None)
pandas.core.frame.DataFrame.sort_values(self,by,axis=0,ascending=True,inplace=False,kind='quicksort',na_position='last')
pandas.core.frame.DataFrame.sortlevel(self,level=0,axis=0,ascending=True,inplace=False,sort_remaining=True)
pandas.core.frame.DataFrame.stack(self,level=-1,dropna=True)
pandas.core.frame.DataFrame.style(self)
pandas.core.frame.DataFrame.swaplevel(self,i=-2,j=-1,axis=0)
pandas.core.frame.DataFrame.to_csv(self,path_or_buf=None,sep=',',na_rep='',float_format=None,columns=None,header=True,index=True,index_label=None,mode='w',encoding=None,compression=None,quoting=None,quotechar='"',line_terminator='\n',chunksize=None,tupleize_cols=False,date_format=None,doublequote=True,escapechar=None,decimal='.')
pandas.core.frame.DataFrame.to_dict(self,orient='dict')
pandas.core.frame.DataFrame.to_excel(self,excel_writer,sheet_name='Sheet1',na_rep='',float_format=None,columns=None,header=True,index=True,index_label=None,startrow=0,startcol=0,engine=None,merge_cells=True,encoding=None,inf_rep='inf',verbose=True,freeze_panes=None)
pandas.core.frame.DataFrame.to_feather(self,fname)
pandas.core.frame.DataFrame.to_gbq(self,destination_table,project_id,chunksize=10000,verbose=True,reauth=False,if_exists='fail',private_key=None)
pandas.core.frame.DataFrame.to_html(self,buf=None,columns=None,col_space=None,header=True,index=True,na_rep='NaN',formatters=None,float_format=None,sparsify=None,index_names=True,justify=None,bold_rows=True,classes=None,escape=True,max_rows=None,max_cols=None,show_dimensions=False,notebook=False,decimal='.',border=None)
pandas.core.frame.DataFrame.to_latex(self,buf=None,columns=None,col_space=None,header=True,index=True,na_rep='NaN',formatters=None,float_format=None,sparsify=None,index_names=True,bold_rows=True,column_format=None,longtable=None,escape=None,encoding=None,decimal='.',multicolumn=None,multicolumn_format=None,multirow=None)
pandas.core.frame.DataFrame.to_panel(self)
pandas.core.frame.DataFrame.to_period(self,freq=None,axis=0,copy=True)
pandas.core.frame.DataFrame.to_records(self,index=True,convert_datetime64=True)
pandas.core.frame.DataFrame.to_sparse(self,fill_value=None,kind='block')
pandas.core.frame.DataFrame.to_stata(self,fname,convert_dates=None,write_index=True,encoding='latin-1',byteorder=None,time_stamp=None,data_label=None,variable_labels=None)
pandas.core.frame.DataFrame.to_string(self,buf=None,columns=None,col_space=None,header=True,index=True,na_rep='NaN',formatters=None,float_format=None,sparsify=None,index_names=True,justify=None,line_width=None,max_rows=None,max_cols=None,show_dimensions=False)
pandas.core.frame.DataFrame.to_timestamp(self,freq=None,how='start',axis=0,copy=True)
pandas.core.frame.DataFrame.transpose(self,*args,**kwargs)
pandas.core.frame.DataFrame.unstack(self,level=-1,fill_value=None)
pandas.core.frame.DataFrame.update(self,other,join='left',overwrite=True,filter_func=None,raise_conflict=False)
pandas.core.frame._arrays_to_mgr(arrays,arr_names,index,columns,dtype=None)
pandas.core.frame._convert_object_array(content,columns,coerce_float=False,dtype=None)
pandas.core.frame._from_nested_dict(data)
pandas.core.frame._get_names_from_index(data)
pandas.core.frame._homogenize(data,index,dtype=None)
pandas.core.frame._list_of_dict_to_arrays(data,columns,coerce_float=False,dtype=None)
pandas.core.frame._list_of_series_to_arrays(data,columns,coerce_float=False,dtype=None)
pandas.core.frame._list_to_arrays(data,columns,coerce_float=False,dtype=None)
pandas.core.frame._masked_rec_array_to_mgr(data,index,columns,dtype,copy)
pandas.core.frame._prep_ndarray(values,copy=True)
pandas.core.frame._put_str(s,space)
pandas.core.frame._reorder_arrays(arrays,arr_columns,columns)
pandas.core.frame._to_arrays(data,columns,coerce_float=False,dtype=None)
pandas.core.frame.boxplot(self,column=None,by=None,ax=None,fontsize=None,rot=0,grid=True,figsize=None,layout=None,return_type=None,**kwds)
pandas.core.frame.extract_index(data)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/config.py----------------------------------------
A:pandas.core.config.DeprecatedOption->namedtuple('DeprecatedOption', 'key msg rkey removal_ver')
A:pandas.core.config.RegisteredOption->namedtuple('RegisteredOption', 'key defval doc validator cb')
A:pandas.core.config.keys->sorted(_registered_options.keys())
A:pandas.core.config.key->key.lower().lower()
A:pandas.core.config.(root, k)->_get_root(key)
A:pandas.core.config.nargs->len(args)
A:pandas.core.config.silent->kwargs.pop('silent', False)
A:pandas.core.config.o->_get_registered_option(k)
A:pandas.core.config.s->'\n'.join(ls)
A:pandas.core.config.prefix->object.__getattribute__(self, 'prefix')
A:pandas.core.config.opts_desc->_describe_option('all', _print_desc=False)
A:pandas.core.config.opts_list->pp_options_list(list(_registered_options.keys()))
A:pandas.core.config.get_option->wrap(get_option)
A:pandas.core.config.set_option->wrap(set_option)
A:pandas.core.config.reset_option->CallableDynamicDoc(_reset_option, _reset_option_tmpl)
A:pandas.core.config.describe_option->CallableDynamicDoc(_describe_option, _describe_option_tmpl)
A:pandas.core.config.options->DictWrapper(_global_config)
A:pandas.core.config.self.ops->list(zip(args[::2], args[1::2]))
A:pandas.core.config.path->key.lower().lower().split('.')
A:pandas.core.config._registered_options[key]->RegisteredOption(key=key, defval=defval, doc=doc, validator=validator, cb=cb)
A:pandas.core.config._deprecated_options[key]->DeprecatedOption(key, msg, rkey, removal_ver)
A:pandas.core.config.d->_get_deprecated_option(k)
A:pandas.core.config.ls->wrap(', '.join(ks), width, initial_indent=pfx, subsequent_indent='  ', break_long_words=False)
A:pandas.core.config.register_option->wrap(register_option)
A:pandas.core.config._type->tuple(_type)
A:pandas.core.config.type_repr->'|'.join(map(pprint_thing, _type))
A:pandas.core.config.pp_values->pp('|'.join(lmap(pp, legal_values)))
A:pandas.core.config.msg->'Value must be one of {0}'.format(pp_values)
A:pandas.core.config.is_int->is_type_factory(int)
A:pandas.core.config.is_bool->is_type_factory(bool)
A:pandas.core.config.is_float->is_type_factory(float)
A:pandas.core.config.is_str->is_type_factory(str)
A:pandas.core.config.is_unicode->is_type_factory(compat.text_type)
A:pandas.core.config.is_text->is_instance_factory((str, bytes))
pandas.core.config.CallableDynamicDoc(self,func,doc_tmpl)
pandas.core.config.CallableDynamicDoc.__doc__(self)
pandas.core.config.CallableDynamicDoc.__init__(self,func,doc_tmpl)
pandas.core.config.DictWrapper(self,d,prefix='')
pandas.core.config.DictWrapper.__dir__(self)
pandas.core.config.DictWrapper.__getattr__(self,key)
pandas.core.config.DictWrapper.__init__(self,d,prefix='')
pandas.core.config.DictWrapper.__setattr__(self,key,val)
pandas.core.config.OptionError(AttributeError,KeyError)
pandas.core.config._build_option_description(k)
pandas.core.config._describe_option(pat='',_print_desc=True)
pandas.core.config._get_deprecated_option(key)
pandas.core.config._get_option(pat,silent=False)
pandas.core.config._get_registered_option(key)
pandas.core.config._get_root(key)
pandas.core.config._get_single_key(pat,silent)
pandas.core.config._is_deprecated(key)
pandas.core.config._reset_option(pat,silent=False)
pandas.core.config._select_options(pat)
pandas.core.config._set_option(*args,**kwargs)
pandas.core.config._translate_key(key)
pandas.core.config._warn_if_deprecated(key)
pandas.core.config.config_prefix(prefix)
pandas.core.config.deprecate_option(key,msg=None,rkey=None,removal_ver=None)
pandas.core.config.get_default_val(pat)
pandas.core.config.is_callable(obj)
pandas.core.config.is_instance_factory(_type)
pandas.core.config.is_one_of_factory(legal_values)
pandas.core.config.is_type_factory(_type)
pandas.core.config.option_context(self,*args)
pandas.core.config.option_context.__enter__(self)
pandas.core.config.option_context.__exit__(self,*args)
pandas.core.config.option_context.__init__(self,*args)
pandas.core.config.pp_options_list(keys,width=80,_print=False)
pandas.core.config.register_option(key,defval,doc='',validator=None,cb=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/ops.py----------------------------------------
A:pandas.core.ops.new_methods->_create_methods(flex_arith_method, flex_comp_method, flex_bool_method, use_numexpr, default_axis='columns', special=False)
A:pandas.core.ops.new_methods['divmod']->arith_method(divmod, names('divmod'), None, default_axis=default_axis, construct_result=_construct_divmod_result)
A:pandas.core.ops.select->set(select)
A:pandas.core.ops.result->result.reshape(x.shape).reshape(x.shape)
A:pandas.core.ops.wrap_results->staticmethod(lambda x: x)
A:pandas.core.ops.is_timedelta_lhs->is_timedelta64_dtype(left)
A:pandas.core.ops.lvalues->getattr(lvalues, 'values', lvalues)
A:pandas.core.ops.rvalues->getattr(rvalues, 'values', rvalues)
A:pandas.core.ops.self.is_offset_lhs->self.fillna(fill_value)._is_offset(left)
A:pandas.core.ops.self.is_timedelta_lhs->is_timedelta64_dtype(lvalues)
A:pandas.core.ops.self.is_datetime64_lhs->is_datetime64_dtype(lvalues)
A:pandas.core.ops.self.is_datetime64tz_lhs->is_datetime64tz_dtype(lvalues)
A:pandas.core.ops.self.is_offset_rhs->self.fillna(fill_value)._is_offset(right)
A:pandas.core.ops.self.is_datetime64_rhs->is_datetime64_dtype(rvalues)
A:pandas.core.ops.self.is_datetime64tz_rhs->is_datetime64tz_dtype(rvalues)
A:pandas.core.ops.self.is_timedelta_rhs->is_timedelta64_dtype(rvalues)
A:pandas.core.ops.(self.lvalues, self.rvalues)->self.fillna(fill_value)._convert_for_datetime(lvalues, rvalues)
A:pandas.core.ops.values->self.fillna(fill_value).get_values()
A:pandas.core.ops.inferred_type->pandas._libs.lib.infer_dtype(values)
A:pandas.core.ops.(lvalues, rvalues)->_offset(lvalues, rvalues)
A:pandas.core.ops.(rvalues, lvalues)->_offset(rvalues, lvalues)
A:pandas.core.ops.x->_ensure_object(x)
A:pandas.core.ops.left->left.astype(object).astype(object)
A:pandas.core.ops.right->left.astype(object).astype(object)._constructor(right, index=left.index, columns=left.columns)
A:pandas.core.ops.(left, right)->_align_method_SERIES(left, right)
A:pandas.core.ops.dtype->numpy.find_common_type([x.dtype, y.dtype], [])
A:pandas.core.ops.result[mask]->op(np.array(list(xrav[mask])), y)
A:pandas.core.ops.mask->notnull(xrav)
A:pandas.core.ops.(result, changed)->maybe_upcast_putmask(result, ~mask, np.nan)
A:pandas.core.ops.converted->_Op.get_op(left, right, name, na_op)
A:pandas.core.ops.name->_maybe_match_name(self, other)
A:pandas.core.ops.y->bool(y)
A:pandas.core.ops.res->self.fillna(fill_value)._combine_const(other, func, raise_on_error=False)
A:pandas.core.ops.other->_align_method_FRAME(self, other, axis)
A:pandas.core.ops.is_self_int_dtype->is_integer_dtype(self.dtype)
A:pandas.core.ops.(self, other)->_align_method_SERIES(self, other, align_asobject=True)
A:pandas.core.ops.is_other_int_dtype->is_integer_dtype(other.dtype)
A:pandas.core.ops._op_names->list(_op_descriptions.keys())
A:pandas.core.ops._op_descriptions[reverse_op]->_op_descriptions[k].copy()
A:pandas.core.ops.op_name->_maybe_match_name(self, other).replace('__', '')
A:pandas.core.ops.self->self.fillna(fill_value).fillna(fill_value)
A:pandas.core.ops.series_flex_funcs->dict(flex_arith_method=_flex_method_SERIES, flex_comp_method=_flex_method_SERIES)
A:pandas.core.ops.series_special_funcs->dict(arith_method=_arith_method_SERIES, comp_method=_comp_method_SERIES, bool_method=_bool_method_SERIES, have_divmod=True)
A:pandas.core.ops.xrav->_ensure_object(x).ravel()
A:pandas.core.ops.yrav->bool(y).ravel()
A:pandas.core.ops.frame_flex_funcs->dict(flex_arith_method=_arith_method_FRAME, flex_comp_method=_flex_comp_method_FRAME)
A:pandas.core.ops.frame_special_funcs->dict(arith_method=_arith_method_FRAME, comp_method=_comp_method_FRAME, bool_method=_arith_method_FRAME)
A:pandas.core.ops.axis->self.fillna(fill_value).fillna(fill_value)._get_axis_number(axis)
A:pandas.core.ops.panel_special_funcs->dict(arith_method=_arith_method_PANEL, comp_method=_comp_method_PANEL, bool_method=_arith_method_PANEL)
pandas.core.ops._Op(self,left,right,name,na_op)
pandas.core.ops._Op.__init__(self,left,right,name,na_op)
pandas.core.ops._Op.get_op(cls,left,right,name,na_op)
pandas.core.ops._TimeOp(self,left,right,name,na_op)
pandas.core.ops._TimeOp.__init__(self,left,right,name,na_op)
pandas.core.ops._TimeOp._convert_for_datetime(self,lvalues,rvalues)
pandas.core.ops._TimeOp._convert_to_array(self,values,name=None,other=None)
pandas.core.ops._TimeOp._is_offset(self,arr_or_obj)
pandas.core.ops._TimeOp._validate(self,lvalues,rvalues,name)
pandas.core.ops._align_method_FRAME(left,right,axis)
pandas.core.ops._align_method_SERIES(left,right,align_asobject=False)
pandas.core.ops._arith_method_FRAME(op,name,str_rep=None,default_axis='columns',fill_zeros=None,**eval_kwargs)
pandas.core.ops._arith_method_PANEL(op,name,str_rep=None,fill_zeros=None,default_axis=None,**eval_kwargs)
pandas.core.ops._arith_method_SERIES(op,name,str_rep,fill_zeros=None,default_axis=None,construct_result=_construct_result,**eval_kwargs)
pandas.core.ops._bool_method_SERIES(op,name,str_rep)
pandas.core.ops._comp_method_FRAME(func,name,str_rep,masker=False)
pandas.core.ops._comp_method_OBJECT_ARRAY(op,x,y)
pandas.core.ops._comp_method_PANEL(op,name,str_rep=None,masker=False)
pandas.core.ops._comp_method_SERIES(op,name,str_rep,masker=False)
pandas.core.ops._construct_divmod_result(left,result,index,name,dtype)
pandas.core.ops._construct_result(left,result,index,name,dtype)
pandas.core.ops._create_methods(arith_method,comp_method,bool_method,use_numexpr,special=False,default_axis='columns',have_divmod=False)
pandas.core.ops._flex_comp_method_FRAME(op,name,str_rep=None,default_axis='columns',masker=False)
pandas.core.ops._flex_method_SERIES(op,name,str_rep,default_axis=None,fill_zeros=None,**eval_kwargs)
pandas.core.ops.add_flex_arithmetic_methods(cls,flex_arith_method,flex_comp_method=None,flex_bool_method=None,use_numexpr=True,force=False,select=None,exclude=None)
pandas.core.ops.add_methods(cls,new_methods,force,select,exclude)
pandas.core.ops.add_special_arithmetic_methods(cls,arith_method=None,comp_method=None,bool_method=None,use_numexpr=True,force=False,select=None,exclude=None,have_divmod=False)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/window.py----------------------------------------
A:pandas.core.window._shared_docs->dict(**_shared_docs)
A:pandas.core.window.exclusions->set()
A:pandas.core.window.obj->obj.reindex(columns=obj.columns.difference([self.on]), copy=False).reindex(columns=obj.columns.difference([self.on]), copy=False)
A:pandas.core.window.(obj, index)->self._shallow_copy(subset)._convert_freq(how)
A:pandas.core.window.blocks->obj.reindex(columns=obj.columns.difference([self.on]), copy=False).reindex(columns=obj.columns.difference([self.on]), copy=False).as_blocks(copy=False).values()
A:pandas.core.window.self->self._shallow_copy(subset)._shallow_copy(subset)
A:pandas.core.window.values->self._shallow_copy(subset)._shallow_copy(subset)._prep_values(b.values)
A:pandas.core.window.result->numpy.sqrt(x)
A:pandas.core.window.selection->_ensure_index(self._selection)
A:pandas.core.window.indexer->columns.take(sorted(indexer)).get_indexer(selection.tolist() + [name])
A:pandas.core.window.columns->columns.take(sorted(indexer)).take(sorted(indexer))
A:pandas.core.window.offset->_offset(window, self.center)
A:pandas.core.window.lead_indexer[self.axis]->slice(offset, None)
A:pandas.core.window.(result, how)->self._shallow_copy(subset)._shallow_copy(subset)._aggregate(arg, *args, **kwargs)
A:pandas.core.window._shared_docs['sum']->dedent('\n    %(name)s sum\n\n    Parameters\n    ----------\n    how : string, default None (DEPRECATED)\n        Method for down- or re-sampling')
A:pandas.core.window._shared_docs['mean']->dedent('\n    %(name)s mean\n\n    Parameters\n    ----------\n    how : string, default None (DEPRECATED)\n        Method for down- or re-sampling')
A:pandas.core.window.window->len(window)
A:pandas.core.window.win_type->_validate_win_type(self.win_type, kwargs)
A:pandas.core.window.(blocks, obj, index)->self._shallow_copy(subset)._shallow_copy(subset)._create_blocks(how=how)
A:pandas.core.window.additional_nans->numpy.array([np.NaN] * offset)
A:pandas.core.window.minp->_use_window(self.min_periods, window)
A:pandas.core.window._agg_doc->dedent("\n    Examples\n    --------\n\n    >>> df = pd.DataFrame(np.random.randn(10, 3), columns=['A', 'B', 'C'])\n    >>> df\n              A         B         C\n    0 -2.385977 -0.102758  0.438822\n    1 -1.004295  0.905829 -0.954544\n    2  0.735167 -0.165272 -1.619346\n    3 -0.702657 -1.340923 -0.706334\n    4 -0.246845  0.211596 -0.901819\n    5  2.463718  3.157577 -1.380906\n    6 -1.142255  2.340594 -0.039875\n    7  1.396598 -1.647453  1.677227\n    8 -0.543425  1.761277 -0.220481\n    9 -0.640505  0.289374 -1.550670\n\n    >>> df.ewm(alpha=0.5).mean()\n              A         B         C\n    0 -2.385977 -0.102758  0.438822\n    1 -1.464856  0.569633 -0.490089\n    2 -0.207700  0.149687 -1.135379\n    3 -0.471677 -0.645305 -0.906555\n    4 -0.355635 -0.203033 -0.904111\n    5  1.076417  1.503943 -1.146293\n    6 -0.041654  1.925562 -0.588728\n    7  0.680292  0.132049  0.548693\n    8  0.067236  0.948257  0.163353\n    9 -0.286980  0.618493 -0.694496\n\n    See also\n    --------\n    pandas.DataFrame.rolling.aggregate\n\n    ")
A:pandas.core.window.parent->kwargs.pop('parent', None)
A:pandas.core.window.groupby->kwargs.pop('groupby', None)
A:pandas.core.window.count->(X + Y).rolling(window=window, center=self.center).count(**kwargs)
A:pandas.core.window.corr->pandas.core.base.GroupByMixin._dispatch('corr', other=None, pairwise=None)
A:pandas.core.window.cov->_cov(x_values, y_values)
A:pandas.core.window.x->self._shallow_copy(subset)._shallow_copy(subset)._shallow_copy(x)
A:pandas.core.window.(index, indexi)->self._shallow_copy(subset)._shallow_copy(subset)._get_index()
A:pandas.core.window.cfunc->getattr(_window, func, None)
A:pandas.core.window.arg->_ensure_float64(arg)
A:pandas.core.window._shared_docs['apply']->dedent('\n    %(name)s function apply\n\n    Parameters\n    ----------\n    func : function\n        Must produce a single value from an ndarray input\n        \\*args and \\*\\*kwargs are passed to the function')
A:pandas.core.window._level->kwargs.pop('_level', None)
A:pandas.core.window._shared_docs['max']->dedent("\n    %(name)s maximum\n\n    Parameters\n    ----------\n    how : string, default 'max' (DEPRECATED)\n        Method for down- or re-sampling")
A:pandas.core.window._shared_docs['min']->dedent("\n    %(name)s minimum\n\n    Parameters\n    ----------\n    how : string, default 'min' (DEPRECATED)\n        Method for down- or re-sampling")
A:pandas.core.window._shared_docs['median']->dedent("\n    %(name)s median\n\n    Parameters\n    ----------\n    how : string, default 'median' (DEPRECATED)\n        Method for down- or re-sampling")
A:pandas.core.window._shared_docs['std']->dedent('\n    %(name)s standard deviation\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Delta Degrees of Freedom.  The divisor used in calculations\n        is ``N - ddof``, where ``N`` represents the number of elements.')
A:pandas.core.window._shared_docs['var']->dedent('\n    %(name)s variance\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Delta Degrees of Freedom.  The divisor used in calculations\n        is ``N - ddof``, where ``N`` represents the number of elements.')
A:pandas.core.window._shared_docs['quantile']->dedent('\n    %(name)s quantile\n\n    Parameters\n    ----------\n    quantile : float\n        0 <= quantile <= 1')
A:pandas.core.window._shared_docs['cov']->dedent('\n    %(name)s sample covariance\n\n    Parameters\n    ----------\n    other : Series, DataFrame, or ndarray, optional\n        if not supplied then will default to self and produce pairwise output\n    pairwise : bool, default None\n        If False then only matching columns between self and other will be used\n        and the output will be a DataFrame.\n        If True then all pairwise combinations will be calculated and the\n        output will be a MultiIndexed DataFrame in the case of DataFrame\n        inputs. In the case of missing elements, only complete pairwise\n        observations will be used.\n    ddof : int, default 1\n        Delta Degrees of Freedom.  The divisor used in calculations\n        is ``N - ddof``, where ``N`` represents the number of elements.')
A:pandas.core.window.other->self._shallow_copy(subset)._shallow_copy(subset)._shallow_copy(other)
A:pandas.core.window.X->self._shallow_copy(subset)._shallow_copy(subset)._shallow_copy(X)
A:pandas.core.window.Y->self._shallow_copy(subset)._shallow_copy(subset)._shallow_copy(Y)
A:pandas.core.window._shared_docs['corr']->dedent('\n    %(name)s sample correlation\n\n    Parameters\n    ----------\n    other : Series, DataFrame, or ndarray, optional\n        if not supplied then will default to self and produce pairwise output\n    pairwise : bool, default None\n        If False then only matching columns between self and other will be\n        used and the output will be a DataFrame.\n        If True then all pairwise combinations will be calculated and the\n        output will be a MultiIndex DataFrame in the case of DataFrame inputs.\n        In the case of missing elements, only complete pairwise observations\n        will be used.')
A:pandas.core.window.a->a.rolling(window=window, min_periods=self.min_periods, freq=self.freq, center=self.center).rolling(window=window, min_periods=self.min_periods, freq=self.freq, center=self.center)
A:pandas.core.window.b->b.rolling(window=window, min_periods=self.min_periods, freq=self.freq, center=self.center).rolling(window=window, min_periods=self.min_periods, freq=self.freq, center=self.center)
A:pandas.core.window.freq->self._shallow_copy(subset)._shallow_copy(subset)._validate_freq()
A:pandas.core.window.self._groupby.obj->self._shallow_copy(subset)._shallow_copy(subset)._groupby.obj.set_index(self._on)
A:pandas.core.window.self.com->_get_center_of_mass(com, span, halflife, alpha)
A:pandas.core.window.x_values->self._shallow_copy(subset)._shallow_copy(subset)._shallow_copy(X)._prep_values()
A:pandas.core.window.y_values->self._shallow_copy(subset)._shallow_copy(subset)._shallow_copy(Y)._prep_values()
A:pandas.core.window.x_var->_cov(x_values, x_values)
A:pandas.core.window.y_var->_cov(y_values, y_values)
A:pandas.core.window.(X, Y)->arg1.align(arg2, join='outer')
A:pandas.core.window.results[i]->f(*_prep_binary(arg1.iloc[:, i], arg2))
A:pandas.core.window.res_columns->arg1.columns.union(arg2.columns)
A:pandas.core.window.results[col]->f(X[col], Y[col])
A:pandas.core.window.results->defaultdict(dict)
A:pandas.core.window.results[i][j]->f(*_prep_binary(arg1.iloc[:, i], arg2.iloc[:, j]))
A:pandas.core.window.p->pandas.Panel.from_dict(results).swapaxes('items', 'major')
A:pandas.core.window.result.columns->Index(result.columns).set_names(arg2.columns.name)
A:pandas.core.window.result.index->numpy.sqrt(x).index.set_names([arg1.index.name, arg1.columns.name])
A:pandas.core.window.valid_count->len([x for x in [com, span, halflife, alpha] if x is not None])
pandas.core.window.EWM(self,obj,com=None,span=None,halflife=None,alpha=None,min_periods=0,freq=None,adjust=True,ignore_na=False,axis=0)
pandas.core.window.EWM.__init__(self,obj,com=None,span=None,halflife=None,alpha=None,min_periods=0,freq=None,adjust=True,ignore_na=False,axis=0)
pandas.core.window.EWM._apply(self,func,how=None,**kwargs)
pandas.core.window.EWM._constructor(self)
pandas.core.window.EWM.aggregate(self,arg,*args,**kwargs)
pandas.core.window.EWM.corr(self,other=None,pairwise=None,**kwargs)
pandas.core.window.EWM.cov(self,other=None,pairwise=None,bias=False,**kwargs)
pandas.core.window.EWM.mean(self,*args,**kwargs)
pandas.core.window.EWM.std(self,bias=False,*args,**kwargs)
pandas.core.window.EWM.var(self,bias=False,*args,**kwargs)
pandas.core.window.Expanding(self,obj,min_periods=1,freq=None,center=False,axis=0,**kwargs)
pandas.core.window.Expanding.__init__(self,obj,min_periods=1,freq=None,center=False,axis=0,**kwargs)
pandas.core.window.Expanding._constructor(self)
pandas.core.window.Expanding._get_window(self,other=None)
pandas.core.window.Expanding.aggregate(self,arg,*args,**kwargs)
pandas.core.window.Expanding.apply(self,func,args=(),kwargs={})
pandas.core.window.Expanding.corr(self,other=None,pairwise=None,**kwargs)
pandas.core.window.Expanding.count(self,**kwargs)
pandas.core.window.Expanding.cov(self,other=None,pairwise=None,ddof=1,**kwargs)
pandas.core.window.Expanding.kurt(self,**kwargs)
pandas.core.window.Expanding.max(self,*args,**kwargs)
pandas.core.window.Expanding.mean(self,*args,**kwargs)
pandas.core.window.Expanding.median(self,**kwargs)
pandas.core.window.Expanding.min(self,*args,**kwargs)
pandas.core.window.Expanding.quantile(self,quantile,**kwargs)
pandas.core.window.Expanding.skew(self,**kwargs)
pandas.core.window.Expanding.std(self,ddof=1,*args,**kwargs)
pandas.core.window.Expanding.sum(self,*args,**kwargs)
pandas.core.window.Expanding.var(self,ddof=1,*args,**kwargs)
pandas.core.window.ExpandingGroupby(_GroupByMixin,Expanding)
pandas.core.window.ExpandingGroupby._constructor(self)
pandas.core.window.Rolling(_Rolling_and_Expanding)
pandas.core.window.Rolling._on(self)
pandas.core.window.Rolling._validate_freq(self)
pandas.core.window.Rolling._validate_monotonic(self)
pandas.core.window.Rolling.aggregate(self,arg,*args,**kwargs)
pandas.core.window.Rolling.apply(self,func,args=(),kwargs={})
pandas.core.window.Rolling.corr(self,other=None,pairwise=None,**kwargs)
pandas.core.window.Rolling.count(self)
pandas.core.window.Rolling.cov(self,other=None,pairwise=None,ddof=1,**kwargs)
pandas.core.window.Rolling.is_datetimelike(self)
pandas.core.window.Rolling.kurt(self,**kwargs)
pandas.core.window.Rolling.max(self,*args,**kwargs)
pandas.core.window.Rolling.mean(self,*args,**kwargs)
pandas.core.window.Rolling.median(self,**kwargs)
pandas.core.window.Rolling.min(self,*args,**kwargs)
pandas.core.window.Rolling.quantile(self,quantile,**kwargs)
pandas.core.window.Rolling.skew(self,**kwargs)
pandas.core.window.Rolling.std(self,ddof=1,*args,**kwargs)
pandas.core.window.Rolling.sum(self,*args,**kwargs)
pandas.core.window.Rolling.validate(self)
pandas.core.window.Rolling.var(self,ddof=1,*args,**kwargs)
pandas.core.window.RollingGroupby(_GroupByMixin,Rolling)
pandas.core.window.RollingGroupby._constructor(self)
pandas.core.window.RollingGroupby._gotitem(self,key,ndim,subset=None)
pandas.core.window.RollingGroupby._validate_monotonic(self)
pandas.core.window.Window(_Window)
pandas.core.window.Window._apply_window(self,mean=True,how=None,**kwargs)
pandas.core.window.Window._prep_window(self,**kwargs)
pandas.core.window.Window.aggregate(self,arg,*args,**kwargs)
pandas.core.window.Window.mean(self,*args,**kwargs)
pandas.core.window.Window.sum(self,*args,**kwargs)
pandas.core.window.Window.validate(self)
pandas.core.window._GroupByMixin(self,obj,*args,**kwargs)
pandas.core.window._GroupByMixin.__init__(self,obj,*args,**kwargs)
pandas.core.window._GroupByMixin._apply(self,func,name,window=None,center=None,check_minp=None,how=None,**kwargs)
pandas.core.window._Rolling(_Window)
pandas.core.window._Rolling._apply(self,func,name=None,window=None,center=None,check_minp=None,how=None,**kwargs)
pandas.core.window._Rolling._constructor(self)
pandas.core.window._Rolling_and_Expanding(_Rolling)
pandas.core.window._Rolling_and_Expanding.apply(self,func,args=(),kwargs={})
pandas.core.window._Rolling_and_Expanding.corr(self,other=None,pairwise=None,**kwargs)
pandas.core.window._Rolling_and_Expanding.count(self)
pandas.core.window._Rolling_and_Expanding.cov(self,other=None,pairwise=None,ddof=1,**kwargs)
pandas.core.window._Rolling_and_Expanding.kurt(self,**kwargs)
pandas.core.window._Rolling_and_Expanding.max(self,how=None,*args,**kwargs)
pandas.core.window._Rolling_and_Expanding.mean(self,*args,**kwargs)
pandas.core.window._Rolling_and_Expanding.median(self,how=None,**kwargs)
pandas.core.window._Rolling_and_Expanding.min(self,how=None,*args,**kwargs)
pandas.core.window._Rolling_and_Expanding.quantile(self,quantile,**kwargs)
pandas.core.window._Rolling_and_Expanding.skew(self,**kwargs)
pandas.core.window._Rolling_and_Expanding.std(self,ddof=1,*args,**kwargs)
pandas.core.window._Rolling_and_Expanding.sum(self,*args,**kwargs)
pandas.core.window._Rolling_and_Expanding.var(self,ddof=1,*args,**kwargs)
pandas.core.window._Window(self,obj,window=None,min_periods=None,freq=None,center=False,win_type=None,axis=0,on=None,closed=None,**kwargs)
pandas.core.window._Window.__getattr__(self,attr)
pandas.core.window._Window.__init__(self,obj,window=None,min_periods=None,freq=None,center=False,win_type=None,axis=0,on=None,closed=None,**kwargs)
pandas.core.window._Window.__unicode__(self)
pandas.core.window._Window._center_window(self,result,window)
pandas.core.window._Window._constructor(self)
pandas.core.window._Window._convert_freq(self,how=None)
pandas.core.window._Window._create_blocks(self,how)
pandas.core.window._Window._dir_additions(self)
pandas.core.window._Window._get_index(self,index=None)
pandas.core.window._Window._get_window(self,other=None)
pandas.core.window._Window._gotitem(self,key,ndim,subset=None)
pandas.core.window._Window._on(self)
pandas.core.window._Window._prep_values(self,values=None,kill_inf=True,how=None)
pandas.core.window._Window._window_type(self)
pandas.core.window._Window._wrap_result(self,result,block=None,obj=None)
pandas.core.window._Window._wrap_results(self,results,blocks,obj)
pandas.core.window._Window.aggregate(self,arg,*args,**kwargs)
pandas.core.window._Window.is_datetimelike(self)
pandas.core.window._Window.is_freq_type(self)
pandas.core.window._Window.validate(self)
pandas.core.window._flex_binary_moment(arg1,arg2,f,pairwise=False)
pandas.core.window._get_center_of_mass(com,span,halflife,alpha)
pandas.core.window._offset(window,center)
pandas.core.window._prep_binary(arg1,arg2)
pandas.core.window._require_min_periods(p)
pandas.core.window._use_window(minp,window)
pandas.core.window._zsqrt(x)
pandas.core.window.ewm(obj,**kwds)
pandas.core.window.expanding(obj,**kwds)
pandas.core.window.rolling(obj,win_type=None,**kwds)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/generic.py----------------------------------------
A:pandas.core.generic._shared_docs->dict()
A:pandas.core.generic._shared_doc_kwargs->dict(axes='keywords for axes', klass='NDFrame', axes_single_arg='int or labels for object', args_transpose='axes to permute (int or label for object)', optional_by='\n        by : str or list of str\n            Name or list of names which refer to the axis items.')
A:pandas.core.generic.fill_f->pandas.core.missing.get_fill_func(method)
A:pandas.core.generic.mask->isnull(self)
A:pandas.core.generic.values->self._data.get(item)
A:pandas.core.generic.result->accum_func(y, axis)
A:pandas.core.generic._internal_names_set->set(_internal_names)
A:pandas.core.generic._accessors->frozenset([])
A:pandas.core.generic.data->self._get_numeric_data()
A:pandas.core.generic.payload->pandas.io.json.loads(data.to_json(orient='table'), object_pairs_hook=collections.OrderedDict)
A:pandas.core.generic.dtype->pandas_dtype(dtype)
A:pandas.core.generic.mgr->mgr.astype(dtype=dtype).astype(dtype=dtype)
A:pandas.core.generic.cls._AXIS_NUMBERS->dict(((a, i) for (i, a) in enumerate(axes)))
A:pandas.core.generic.cls._AXIS_LEN->len(axes)
A:pandas.core.generic.cls._AXIS_IALIASES->dict(((v, k) for (k, v) in cls._AXIS_ALIASES.items()))
A:pandas.core.generic.cls._AXIS_NAMES->dict(enumerate(axes))
A:pandas.core.generic.d->self._construct_axes_dict()
A:pandas.core.generic.args->list(args)
A:pandas.core.generic.alias->self._AXIS_IALIASES.get(a)
A:pandas.core.generic.kwargs[a]->list(args).pop(0)
A:pandas.core.generic.axes->dict([(a, kwargs.pop(a, None)) for a in self._AXIS_ORDERS])
A:pandas.core.generic.axis->self._get_axis_number(axis)
A:pandas.core.generic.name->self._get_axis_name(axis)
A:pandas.core.generic.axis_index->getattr(self, axis)
A:pandas.core.generic.key->'{prefix}level_{i}'.format(prefix=prefix, i=i)
A:pandas.core.generic.level_values->getattr(self, axis).get_level_values(level)
A:pandas.core.generic.s->getattr(self, axis).get_level_values(level).to_series()
A:pandas.core.generic.dindex->getattr(self, axis).to_series()
A:pandas.core.generic.ax->_tz_localize(ax, tz, ambiguous)
A:pandas.core.generic.(axes, kwargs)->self._construct_axes_from_arguments(args, kwargs)
A:pandas.core.generic.axes_names->tuple([self._get_axis_name(axes[a]) for a in self._AXIS_ORDERS])
A:pandas.core.generic.axes_numbers->tuple([self._get_axis_number(axes[a]) for a in self._AXIS_ORDERS])
A:pandas.core.generic.new_axes->self._construct_axes_dict_from(self, [self._get_axis(x) for x in axes_names])
A:pandas.core.generic.new_values->self._data.fast_xs(loc)
A:pandas.core.generic.i->indexer(self, name)
A:pandas.core.generic.j->self._get_axis_number(axis2)
A:pandas.core.generic.copy->kwargs.pop('copy', True)
A:pandas.core.generic.inplace->validate_bool_kwarg(inplace, 'inplace')
A:pandas.core.generic.level->_tz_localize(ax, tz, ambiguous)._get_level_number(level)
A:pandas.core.generic.v->self.squeeze()
A:pandas.core.generic.f->_get_rename_function(v)
A:pandas.core.generic.baxis->self._get_block_manager_axis(axis)
A:pandas.core.generic.result._data->accum_func(y, axis)._data.downcast()
A:pandas.core.generic.idx->self._get_axis(axis).set_names(name)
A:pandas.core.generic.renamed->self.copy(deep=True)
A:pandas.core.generic.arr->operator.inv(_values_from_object(self))
A:pandas.core.generic.meta->set(self._internal_names + self._metadata)
A:pandas.core.generic.typ->state.get('_typ')
A:pandas.core.generic.res->self._constructor(new_data).__finalize__(self)
A:pandas.core.generic.lower->self.take(item, axis=self._info_axis_number, convert=True)
A:pandas.core.generic.cacher->getattr(self, '_cacher', None)
A:pandas.core.generic.ref->self._get_cacher()
A:pandas.core.generic.self.is_copy->weakref.ref(ref)
A:pandas.core.generic.value->Series(value)
A:pandas.core.generic.new_data->self._data.copy()
A:pandas.core.generic.labels->self._get_axis(axis)
A:pandas.core.generic.(loc, new_ax)->self._get_axis(axis).get_loc_level(key, level=level, drop_level=drop_level)
A:pandas.core.generic.indexer->self.index.indexer_between_time(start_time, end_time, include_start=include_start, include_end=include_end)
A:pandas.core.generic.(loc, new_index)->self.index.get_loc_level(key, drop_level=drop_level)
A:pandas.core.generic.loc->self.index.searchsorted(where, side='right')
A:pandas.core.generic.(inds,)->self.index.searchsorted(where, side='right').nonzero()
A:pandas.core.generic.axis_name->self._get_axis_name(axis)
A:pandas.core.generic.axis_values->self._get_axis(axis_name)
A:pandas.core.generic.new_axis->self._get_axis(axis).take(sort_index)
A:pandas.core.generic.dropped->self.reindex(**{axis_name: new_axis})
A:pandas.core.generic.self._data->self._data.consolidate()
A:pandas.core.generic.sort_index->self._get_axis(axis).argsort()
A:pandas.core.generic.method->getattr(type(self), name)
A:pandas.core.generic.limit->kwargs.pop('limit', None)
A:pandas.core.generic.tolerance->kwargs.pop('tolerance', None)
A:pandas.core.generic.fill_value->kwargs.pop('fill_value', np.nan)
A:pandas.core.generic.(new_index, indexer)->self._get_axis(axis_name).reindex(labels, method, level, limit=limit)
A:pandas.core.generic.obj->obj._reindex_with_indexers({axis: [new_index, indexer]}, fill_value=fill_value, copy=copy, allow_dups=False)._reindex_with_indexers({axis: [new_index, indexer]}, fill_value=fill_value, copy=copy, allow_dups=False)
A:pandas.core.generic.index->self._get_axis(axis)
A:pandas.core.generic.nkw->sum([x is not None for x in [items, like, regex]])
A:pandas.core.generic.matcher->re.compile(regex)
A:pandas.core.generic.rs->pandas.core.common._random_state(random_state)
A:pandas.core.generic.weights->weights.fillna(0).fillna(0)
A:pandas.core.generic.n->int(round(frac * axis_length))
A:pandas.core.generic.locs->self.index.asof_locs(where, ~nulls.values)
A:pandas.core.generic.existing->getattr(self, name)
A:pandas.core.generic.blocks_before->len(self._data.blocks)
A:pandas.core.generic.cons_data->self._protect_consolidate(f)
A:pandas.core.generic.combined->self._data.combine(blocks, copy=copy)
A:pandas.core.generic.result[dtype]->self._constructor(combined).__finalize__(self)
A:pandas.core.generic.new_obj->self._slice(vslicer, axis=axis)
A:pandas.core.generic.items->list(compat.iteritems(to_replace))
A:pandas.core.generic.to_rep_dict[k]->list(keys)
A:pandas.core.generic.value_dict[k]->list(values)
A:pandas.core.generic.res[c]->res[c].replace(to_replace=src, value=value[c], inplace=False, regex=regex).replace(to_replace=src, value=value[c], inplace=False, regex=regex)
A:pandas.core.generic.msg->'Invalid "to_replace" type: {0!r}'.format(type(to_replace).__name__)
A:pandas.core.generic.where->to_datetime(where)
A:pandas.core.generic.is_series->isinstance(self, ABCSeries)
A:pandas.core.generic.is_list->is_list_like(where)
A:pandas.core.generic.r->resample(self, freq=rule, label=label, closed=closed, axis=axis, kind=kind, loffset=loffset, convention=convention, base=base, key=on, level=level)
A:pandas.core.generic.offset->to_offset(offset)
A:pandas.core.generic.end->self.index.searchsorted(end_date, side='left')
A:pandas.core.generic.start->self.index.searchsorted(start_date, side='right')
A:pandas.core.generic.ranks->self._constructor(ranks, **data._construct_axes_dict())
A:pandas.core.generic.df->cons(dict(((c, other) for c in self.columns)), **self._construct_axes_dict())
A:pandas.core.generic.(join_index, ilidx, iridx)->self.index.join(other.index, how=join, level=level, return_indexers=True)
A:pandas.core.generic.(join_columns, clidx, cridx)->self.columns.join(other.columns, how=join, level=level, return_indexers=True)
A:pandas.core.generic.left->left.fillna(fill_value, method=method, limit=limit, axis=fill_axis).fillna(fill_value, method=method, limit=limit, axis=fill_axis)
A:pandas.core.generic.right->right.fillna(fill_value, method=method, limit=limit).fillna(fill_value, method=method, limit=limit)
A:pandas.core.generic.(join_index, lidx, ridx)->self.columns.join(other.index, how=join, level=level, return_indexers=True)
A:pandas.core.generic.fdata->fdata.copy().copy()
A:pandas.core.generic.cond->pandas.core.common._apply_if_callable(cond, self)
A:pandas.core.generic.(cond, _)->pandas.core.common._apply_if_callable(cond, self).align(self, join='right', broadcast_axis=1)
A:pandas.core.generic.(_, other)->self.align(other, join='left', axis=axis, level=level, fill_value=np.nan)
A:pandas.core.generic.new_other->numpy.empty(len(icond), dtype=dtype)
A:pandas.core.generic.is_i8->needs_i8_conversion(self.dtype)
A:pandas.core.generic.other->pandas.core.common._apply_if_callable(other, self)
A:pandas.core.generic.(dtype, fill_value)->maybe_promote(other.dtype)
A:pandas.core.generic.block_axis->self._get_block_manager_axis(axis)
A:pandas.core.generic.vslicer->slice(-periods, None)
A:pandas.core.generic.islicer->slice(None, periods)
A:pandas.core.generic.freq->to_offset(freq)
A:pandas.core.generic.orig_freq->to_offset(index.freq)
A:pandas.core.generic.new_data.axes[block_axis]->self._get_axis(axis).shift(periods, freq)
A:pandas.core.generic.before->to_datetime(before)
A:pandas.core.generic.after->to_datetime(after)
A:pandas.core.generic.slicer[axis]->slice(before, after)
A:pandas.core.generic.ax_name->self._get_axis_name(axis)
A:pandas.core.generic.new_level->_tz_localize(ax.levels[level], tz, ambiguous)
A:pandas.core.generic.percentiles->numpy.array([0.25, 0.5, 0.75])
A:pandas.core.generic.unique_pcts->numpy.unique(percentiles)
A:pandas.core.generic.formatted_percentiles->format_percentiles(percentiles)
A:pandas.core.generic.objcounts->self._get_numeric_data().value_counts()
A:pandas.core.generic.count_unique->len(objcounts[objcounts != 0])
A:pandas.core.generic.asint->self._get_numeric_data().dropna().values.view('i8')
A:pandas.core.generic.ldesc_indexes->sorted([x.index for x in ldesc], key=len)
A:pandas.core.generic.d.columns->self._get_numeric_data().columns.copy()
A:pandas.core.generic.q->numpy.asarray(q)
A:pandas.core.generic.grouped->self.groupby(level=level, axis=axis)
A:pandas.core.generic.(axis_descr, name, name2)->_doc_parms(cls)
A:pandas.core.generic.cls.any->_make_logical_function(cls, 'any', name, name2, axis_descr, 'Return whether any element is True over requested axis', nanops.nanany)
A:pandas.core.generic.cls.all->_make_logical_function(cls, 'all', name, name2, axis_descr, 'Return whether all elements are True over requested axis', nanops.nanall)
A:pandas.core.generic.demeaned->self._get_numeric_data().sub(data.mean(axis=1), axis=0)
A:pandas.core.generic.cls.sem->_make_stat_function_ddof(cls, 'sem', name, name2, axis_descr, 'Return unbiased standard error of the mean over requested axis.\n\nNormalized by N-1 by default. This can be changed using the ddof argument', nanops.nansem)
A:pandas.core.generic.cls.var->_make_stat_function_ddof(cls, 'var', name, name2, axis_descr, 'Return unbiased variance over requested axis.\n\nNormalized by N-1 by default. This can be changed using the ddof argument', nanops.nanvar)
A:pandas.core.generic.cls.std->_make_stat_function_ddof(cls, 'std', name, name2, axis_descr, 'Return sample standard deviation over requested axis.\n\nNormalized by N-1 by default. This can be changed using the ddof argument', nanops.nanstd)
A:pandas.core.generic.cls.cummin->_make_cum_function(cls, 'cummin', name, name2, axis_descr, 'cumulative minimum', lambda y, axis: np.minimum.accumulate(y, axis), 'min', np.inf, np.nan)
A:pandas.core.generic.cls.cumsum->_make_cum_function(cls, 'cumsum', name, name2, axis_descr, 'cumulative sum', lambda y, axis: y.cumsum(axis), 'sum', 0.0, np.nan)
A:pandas.core.generic.cls.cumprod->_make_cum_function(cls, 'cumprod', name, name2, axis_descr, 'cumulative product', lambda y, axis: y.cumprod(axis), 'prod', 1.0, np.nan)
A:pandas.core.generic.cls.cummax->_make_cum_function(cls, 'cummax', name, name2, axis_descr, 'cumulative max', lambda y, axis: np.maximum.accumulate(y, axis), 'max', -np.inf, np.nan)
A:pandas.core.generic.cls.sum->_make_stat_function(cls, 'sum', name, name2, axis_descr, 'Return the sum of the values for the requested axis', nanops.nansum)
A:pandas.core.generic.cls.mean->_make_stat_function(cls, 'mean', name, name2, axis_descr, 'Return the mean of the values for the requested axis', nanops.nanmean)
A:pandas.core.generic.cls.skew->_make_stat_function(cls, 'skew', name, name2, axis_descr, 'Return unbiased skew over requested axis\nNormalized by N-1', nanops.nanskew)
A:pandas.core.generic.cls.kurt->_make_stat_function(cls, 'kurt', name, name2, axis_descr, "Return unbiased kurtosis over requested axis using Fisher's definition of\nkurtosis (kurtosis of normal == 0.0). Normalized by N-1\n", nanops.nankurt)
A:pandas.core.generic.cls.prod->_make_stat_function(cls, 'prod', name, name2, axis_descr, 'Return the product of the values for the requested axis', nanops.nanprod)
A:pandas.core.generic.cls.median->_make_stat_function(cls, 'median', name, name2, axis_descr, 'Return the median of the values for the requested axis', nanops.nanmedian)
A:pandas.core.generic.cls.max->_make_stat_function(cls, 'max', name, name2, axis_descr, 'This method returns the maximum of the values in the object.\n            If you want the *index* of the maximum, use ``idxmax``. This is\n            the equivalent of the ``numpy.ndarray`` method ``argmax``.', nanops.nanmax)
A:pandas.core.generic.cls.min->_make_stat_function(cls, 'min', name, name2, axis_descr, 'This method returns the minimum of the values in the object.\n            If you want the *index* of the minimum, use ``idxmin``. This is\n            the equivalent of the ``numpy.ndarray`` method ``argmin``.', nanops.nanmin)
A:pandas.core.generic.nmax->pandas.core.nanops.nanmax(values, axis, skipna)
A:pandas.core.generic.nmin->pandas.core.nanops.nanmin(values, axis, skipna)
A:pandas.core.generic.cls.ptp->_make_stat_function(cls, 'ptp', name, name2, axis_descr, 'Returns the difference between the maximum value and the\n            minimum value in the object. This is the equivalent of the\n            ``numpy.ndarray`` method ``ptp``.', nanptp)
A:pandas.core.generic.skipna->pandas.compat.numpy.function.validate_cum_func_with_skipna(skipna, args, kwargs, name)
A:pandas.core.generic.y->_values_from_object(self).copy()
pandas.core.generic.NDFrame(self,data,axes=None,copy=False,dtype=None,fastpath=False)
pandas.core.generic.NDFrame.__abs__(self)
pandas.core.generic.NDFrame.__array__(self,dtype=None)
pandas.core.generic.NDFrame.__array_wrap__(self,result,context=None)
pandas.core.generic.NDFrame.__contains__(self,key)
pandas.core.generic.NDFrame.__copy__(self,deep=True)
pandas.core.generic.NDFrame.__deepcopy__(self,memo=None)
pandas.core.generic.NDFrame.__delitem__(self,key)
pandas.core.generic.NDFrame.__finalize__(self,other,method=None,**kwargs)
pandas.core.generic.NDFrame.__getattr__(self,name)
pandas.core.generic.NDFrame.__getitem__(self,item)
pandas.core.generic.NDFrame.__getstate__(self)
pandas.core.generic.NDFrame.__hash__(self)
pandas.core.generic.NDFrame.__init__(self,data,axes=None,copy=False,dtype=None,fastpath=False)
pandas.core.generic.NDFrame.__invert__(self)
pandas.core.generic.NDFrame.__iter__(self)
pandas.core.generic.NDFrame.__len__(self)
pandas.core.generic.NDFrame.__neg__(self)
pandas.core.generic.NDFrame.__nonzero__(self)
pandas.core.generic.NDFrame.__round__(self,decimals=0)
pandas.core.generic.NDFrame.__setattr__(self,name,value)
pandas.core.generic.NDFrame.__setstate__(self,state)
pandas.core.generic.NDFrame.__unicode__(self)
pandas.core.generic.NDFrame._add_numeric_operations(cls)
pandas.core.generic.NDFrame._add_series_only_operations(cls)
pandas.core.generic.NDFrame._add_series_or_dataframe_operations(cls)
pandas.core.generic.NDFrame._agg_by_level(self,name,axis=0,level=0,skipna=True,**kwargs)
pandas.core.generic.NDFrame._align_frame(self,other,join='outer',axis=None,level=None,copy=True,fill_value=np.nan,method=None,limit=None,fill_axis=0)
pandas.core.generic.NDFrame._align_series(self,other,join='outer',axis=None,level=None,copy=True,fill_value=None,method=None,limit=None,fill_axis=0)
pandas.core.generic.NDFrame._box_item_values(self,key,values)
pandas.core.generic.NDFrame._check_inplace_setting(self,value)
pandas.core.generic.NDFrame._check_is_chained_assignment_possible(self)
pandas.core.generic.NDFrame._check_percentile(self,q)
pandas.core.generic.NDFrame._check_setitem_copy(self,stacklevel=4,t='setting',force=False)
pandas.core.generic.NDFrame._clear_item_cache(self,i=None)
pandas.core.generic.NDFrame._consolidate(self,inplace=False)
pandas.core.generic.NDFrame._consolidate_inplace(self)
pandas.core.generic.NDFrame._construct_axes_dict(self,axes=None,**kwargs)
pandas.core.generic.NDFrame._construct_axes_dict_for_slice(self,axes=None,**kwargs)
pandas.core.generic.NDFrame._construct_axes_dict_from(self,axes,**kwargs)
pandas.core.generic.NDFrame._construct_axes_from_arguments(self,args,kwargs,require_all=False)
pandas.core.generic.NDFrame._constructor(self)
pandas.core.generic.NDFrame._constructor_expanddim(self)
pandas.core.generic.NDFrame._constructor_sliced(self)
pandas.core.generic.NDFrame._convert(self,datetime=False,numeric=False,timedelta=False,coerce=False,copy=True)
pandas.core.generic.NDFrame._create_indexer(cls,name,indexer)
pandas.core.generic.NDFrame._dir_additions(self)
pandas.core.generic.NDFrame._expand_axes(self,key)
pandas.core.generic.NDFrame._from_axes(cls,data,axes,**kwargs)
pandas.core.generic.NDFrame._get_axis(self,axis)
pandas.core.generic.NDFrame._get_axis_name(self,axis)
pandas.core.generic.NDFrame._get_axis_number(self,axis)
pandas.core.generic.NDFrame._get_axis_resolvers(self,axis)
pandas.core.generic.NDFrame._get_block_manager_axis(self,axis)
pandas.core.generic.NDFrame._get_bool_data(self)
pandas.core.generic.NDFrame._get_cacher(self)
pandas.core.generic.NDFrame._get_index_resolvers(self)
pandas.core.generic.NDFrame._get_item_cache(self,item)
pandas.core.generic.NDFrame._get_numeric_data(self)
pandas.core.generic.NDFrame._get_values(self)
pandas.core.generic.NDFrame._iget_item_cache(self,item)
pandas.core.generic.NDFrame._indexed_same(self,other)
pandas.core.generic.NDFrame._info_axis(self)
pandas.core.generic.NDFrame._init_mgr(self,mgr,axes=None,dtype=None,copy=False)
pandas.core.generic.NDFrame._is_cached(self)
pandas.core.generic.NDFrame._is_datelike_mixed_type(self)
pandas.core.generic.NDFrame._is_mixed_type(self)
pandas.core.generic.NDFrame._is_numeric_mixed_type(self)
pandas.core.generic.NDFrame._is_view(self)
pandas.core.generic.NDFrame._maybe_cache_changed(self,item,value)
pandas.core.generic.NDFrame._maybe_update_cacher(self,clear=False,verify_is_copy=True)
pandas.core.generic.NDFrame._needs_reindex_multi(self,axes,method,level)
pandas.core.generic.NDFrame._obj_with_exclusions(self)
pandas.core.generic.NDFrame._protect_consolidate(self,f)
pandas.core.generic.NDFrame._reindex_axes(self,axes,level,limit,tolerance,method,fill_value,copy)
pandas.core.generic.NDFrame._reindex_axis(self,new_index,fill_method,axis,copy)
pandas.core.generic.NDFrame._reindex_multi(self,axes,copy,fill_value)
pandas.core.generic.NDFrame._reindex_with_indexers(self,reindexers,fill_value=np.nan,copy=False,allow_dups=False)
pandas.core.generic.NDFrame._repr_data_resource_(self)
pandas.core.generic.NDFrame._reset_cacher(self)
pandas.core.generic.NDFrame._selected_obj(self)
pandas.core.generic.NDFrame._set_as_cached(self,item,cacher)
pandas.core.generic.NDFrame._set_axis(self,axis,labels)
pandas.core.generic.NDFrame._set_axis_name(self,name,axis=0)
pandas.core.generic.NDFrame._set_is_copy(self,ref=None,copy=True)
pandas.core.generic.NDFrame._set_item(self,key,value)
pandas.core.generic.NDFrame._setup_axes(cls,axes,info_axis=None,stat_axis=None,aliases=None,slicers=None,axes_are_reversed=False,build_axes=True,ns=None)
pandas.core.generic.NDFrame._slice(self,slobj,axis=0,kind=None)
pandas.core.generic.NDFrame._stat_axis(self)
pandas.core.generic.NDFrame._update_inplace(self,result,verify_is_copy=True)
pandas.core.generic.NDFrame._validate_dtype(self,dtype)
pandas.core.generic.NDFrame._values(self)
pandas.core.generic.NDFrame._where(self,cond,other=np.nan,inplace=False,axis=None,level=None,try_cast=False,raise_on_error=True)
pandas.core.generic.NDFrame.abs(self)
pandas.core.generic.NDFrame.add_prefix(self,prefix)
pandas.core.generic.NDFrame.add_suffix(self,suffix)
pandas.core.generic.NDFrame.align(self,other,join='outer',axis=None,level=None,copy=True,fill_value=None,method=None,limit=None,fill_axis=0,broadcast_axis=None)
pandas.core.generic.NDFrame.as_blocks(self,copy=True)
pandas.core.generic.NDFrame.as_matrix(self,columns=None)
pandas.core.generic.NDFrame.asfreq(self,freq,method=None,how=None,normalize=False,fill_value=None)
pandas.core.generic.NDFrame.asof(self,where,subset=None)
pandas.core.generic.NDFrame.astype(self,dtype,copy=True,errors='raise',**kwargs)
pandas.core.generic.NDFrame.at_time(self,time,asof=False)
pandas.core.generic.NDFrame.axes(self)
pandas.core.generic.NDFrame.between_time(self,start_time,end_time,include_start=True,include_end=True)
pandas.core.generic.NDFrame.bfill(self,axis=None,inplace=False,limit=None,downcast=None)
pandas.core.generic.NDFrame.blocks(self)
pandas.core.generic.NDFrame.bool(self)
pandas.core.generic.NDFrame.clip(self,lower=None,upper=None,axis=None,*args,**kwargs)
pandas.core.generic.NDFrame.clip_lower(self,threshold,axis=None)
pandas.core.generic.NDFrame.clip_upper(self,threshold,axis=None)
pandas.core.generic.NDFrame.consolidate(self,inplace=False)
pandas.core.generic.NDFrame.convert_objects(self,convert_dates=True,convert_numeric=False,convert_timedeltas=True,copy=True)
pandas.core.generic.NDFrame.copy(self,deep=True)
pandas.core.generic.NDFrame.describe(self,percentiles=None,include=None,exclude=None)
pandas.core.generic.NDFrame.drop(self,labels,axis=0,level=None,inplace=False,errors='raise')
pandas.core.generic.NDFrame.dtypes(self)
pandas.core.generic.NDFrame.empty(self)
pandas.core.generic.NDFrame.equals(self,other)
pandas.core.generic.NDFrame.ffill(self,axis=None,inplace=False,limit=None,downcast=None)
pandas.core.generic.NDFrame.fillna(self,value=None,method=None,axis=None,inplace=False,limit=None,downcast=None)
pandas.core.generic.NDFrame.filter(self,items=None,like=None,regex=None,axis=None)
pandas.core.generic.NDFrame.first(self,offset)
pandas.core.generic.NDFrame.ftypes(self)
pandas.core.generic.NDFrame.get(self,key,default=None)
pandas.core.generic.NDFrame.get_dtype_counts(self)
pandas.core.generic.NDFrame.get_ftype_counts(self)
pandas.core.generic.NDFrame.get_values(self)
pandas.core.generic.NDFrame.groupby(self,by=None,axis=0,level=None,as_index=True,sort=True,group_keys=True,squeeze=False,**kwargs)
pandas.core.generic.NDFrame.head(self,n=5)
pandas.core.generic.NDFrame.interpolate(self,method='linear',axis=0,limit=None,inplace=False,limit_direction='forward',downcast=None,**kwargs)
pandas.core.generic.NDFrame.isnull(self)
pandas.core.generic.NDFrame.iteritems(self)
pandas.core.generic.NDFrame.keys(self)
pandas.core.generic.NDFrame.last(self,offset)
pandas.core.generic.NDFrame.mask(self,cond,other=np.nan,inplace=False,axis=None,level=None,try_cast=False,raise_on_error=True)
pandas.core.generic.NDFrame.ndim(self)
pandas.core.generic.NDFrame.notnull(self)
pandas.core.generic.NDFrame.pct_change(self,periods=1,fill_method='pad',limit=None,freq=None,**kwargs)
pandas.core.generic.NDFrame.pipe(self,func,*args,**kwargs)
pandas.core.generic.NDFrame.pop(self,item)
pandas.core.generic.NDFrame.rank(self,axis=0,method='average',numeric_only=None,na_option='keep',ascending=True,pct=False)
pandas.core.generic.NDFrame.reindex(self,*args,**kwargs)
pandas.core.generic.NDFrame.reindex_axis(self,labels,axis=0,method=None,level=None,copy=True,limit=None,fill_value=np.nan)
pandas.core.generic.NDFrame.reindex_like(self,other,method=None,copy=True,limit=None,tolerance=None)
pandas.core.generic.NDFrame.rename(self,*args,**kwargs)
pandas.core.generic.NDFrame.rename_axis(self,mapper,axis=0,copy=True,inplace=False)
pandas.core.generic.NDFrame.replace(self,to_replace=None,value=None,inplace=False,limit=None,regex=False,method='pad',axis=None)
pandas.core.generic.NDFrame.resample(self,rule,how=None,axis=0,fill_method=None,closed=None,label=None,convention='start',kind=None,loffset=None,limit=None,base=0,on=None,level=None)
pandas.core.generic.NDFrame.sample(self,n=None,frac=None,replace=False,weights=None,random_state=None,axis=None)
pandas.core.generic.NDFrame.select(self,crit,axis=0)
pandas.core.generic.NDFrame.set_axis(self,axis,labels)
pandas.core.generic.NDFrame.shape(self)
pandas.core.generic.NDFrame.shift(self,periods=1,freq=None,axis=0)
pandas.core.generic.NDFrame.size(self)
pandas.core.generic.NDFrame.slice_shift(self,periods=1,axis=0)
pandas.core.generic.NDFrame.sort_index(self,axis=0,level=None,ascending=True,inplace=False,kind='quicksort',na_position='last',sort_remaining=True)
pandas.core.generic.NDFrame.sort_values(self,by,axis=0,ascending=True,inplace=False,kind='quicksort',na_position='last')
pandas.core.generic.NDFrame.squeeze(self,axis=None)
pandas.core.generic.NDFrame.swapaxes(self,axis1,axis2,copy=True)
pandas.core.generic.NDFrame.swaplevel(self,i=-2,j=-1,axis=0)
pandas.core.generic.NDFrame.tail(self,n=5)
pandas.core.generic.NDFrame.take(self,indices,axis=0,convert=True,is_copy=True,**kwargs)
pandas.core.generic.NDFrame.to_clipboard(self,excel=None,sep=None,**kwargs)
pandas.core.generic.NDFrame.to_dense(self)
pandas.core.generic.NDFrame.to_hdf(self,path_or_buf,key,**kwargs)
pandas.core.generic.NDFrame.to_json(self,path_or_buf=None,orient=None,date_format=None,double_precision=10,force_ascii=True,date_unit='ms',default_handler=None,lines=False)
pandas.core.generic.NDFrame.to_msgpack(self,path_or_buf=None,encoding='utf-8',**kwargs)
pandas.core.generic.NDFrame.to_pickle(self,path,compression='infer')
pandas.core.generic.NDFrame.to_sql(self,name,con,flavor=None,schema=None,if_exists='fail',index=True,index_label=None,chunksize=None,dtype=None)
pandas.core.generic.NDFrame.to_xarray(self)
pandas.core.generic.NDFrame.transpose(self,*args,**kwargs)
pandas.core.generic.NDFrame.truncate(self,before=None,after=None,axis=None,copy=True)
pandas.core.generic.NDFrame.tshift(self,periods=1,freq=None,axis=0)
pandas.core.generic.NDFrame.tz_convert(self,tz,axis=0,level=None,copy=True)
pandas.core.generic.NDFrame.tz_localize(self,tz,axis=0,level=None,copy=True,ambiguous='raise')
pandas.core.generic.NDFrame.values(self)
pandas.core.generic.NDFrame.where(self,cond,other=np.nan,inplace=False,axis=None,level=None,try_cast=False,raise_on_error=True)
pandas.core.generic.NDFrame.xs(self,key,axis=0,level=None,drop_level=True)
pandas.core.generic._doc_parms(cls)
pandas.core.generic._make_cum_function(cls,name,name1,name2,axis_descr,desc,accum_func,accum_func_name,mask_a,mask_b)
pandas.core.generic._make_logical_function(cls,name,name1,name2,axis_descr,desc,f)
pandas.core.generic._make_stat_function(cls,name,name1,name2,axis_descr,desc,f)
pandas.core.generic._make_stat_function_ddof(cls,name,name1,name2,axis_descr,desc,f)
pandas.core.generic._single_replace(self,to_replace,method,inplace,limit)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/strings.py----------------------------------------
A:pandas.core.strings._shared_docs->dict()
A:pandas.core.strings.arrays->_get_array_list(arr, others)
A:pandas.core.strings.n->len(x)
A:pandas.core.strings.masks->numpy.array([isnull(x) for x in arrays])
A:pandas.core.strings.na_mask->numpy.logical_or.reduce(masks, axis=0)
A:pandas.core.strings.result->str_index(self._data, sub, start=start, end=end, side='right')
A:pandas.core.strings.tuples->zip(*[x[notmask] for x in arrays])
A:pandas.core.strings.x->numpy.where(masks[i], na_rep, x)
A:pandas.core.strings.arr->arr.fillna('').fillna('')
A:pandas.core.strings.mask->isnull(arr)
A:pandas.core.strings.regex->re.compile(pat)
A:pandas.core.strings.upper_pat->pat.upper()
A:pandas.core.strings.uppered->_na_map(lambda x: x.upper(), arr)
A:pandas.core.strings.is_compiled_re->is_re(pat)
A:pandas.core.strings.repeats->numpy.asarray(repeats, dtype=object)
A:pandas.core.strings.m->re.compile(pat).search(x)
A:pandas.core.strings.groups_or_na->_groups_or_na_fun(regex)
A:pandas.core.strings.name->getattr(result, 'name', None)
A:pandas.core.strings.names->dict(zip(regex.groupindex.values(), regex.groupindex.keys()))
A:pandas.core.strings.(result, name)->str_get_dummies(data, sep)
A:pandas.core.strings.result_key->tuple(subject_key + (match_i,))
A:pandas.core.strings.index->pandas.core.index.MultiIndex.from_tuples(index_list, names=arr.index.names + ['match'])
A:pandas.core.strings.tags->sorted(tags - set(['']))
A:pandas.core.strings.dummies->numpy.empty((len(arr), len(tags)), dtype=np.int64)
A:pandas.core.strings.dummies[:, i]->pandas._libs.lib.map_infer(arr.values, lambda x: pat in x)
A:pandas.core.strings.res->_na_map(f, arr)
A:pandas.core.strings.obj->slice(start, stop, step)
A:pandas.core.strings.tw->textwrap.TextWrapper(**kwargs)
A:pandas.core.strings.decoder->codecs.getdecoder(encoding)
A:pandas.core.strings.encoder->codecs.getencoder(encoding)
A:pandas.core.strings.self._is_categorical->is_categorical_dtype(data)
A:pandas.core.strings.g->self.get(i)
A:pandas.core.strings.count->_pat_wrapper(str_count, flags=True)
A:pandas.core.strings.startswith->_pat_wrapper(str_startswith, na=True)
A:pandas.core.strings.endswith->_pat_wrapper(str_endswith, na=True)
A:pandas.core.strings.findall->_pat_wrapper(str_findall, flags=True)
A:pandas.core.strings.len->_noarg_wrapper(len, docstring=_shared_docs['len'], dtype=int)
A:pandas.core.strings._shared_docs['lower']->dict(type='lowercase', method='lower')
A:pandas.core.strings._shared_docs['upper']->dict(type='uppercase', method='upper')
A:pandas.core.strings._shared_docs['title']->dict(type='titlecase', method='title')
A:pandas.core.strings._shared_docs['capitalize']->dict(type='be capitalized', method='capitalize')
A:pandas.core.strings._shared_docs['swapcase']->dict(type='be swapcased', method='swapcase')
A:pandas.core.strings.lower->_noarg_wrapper(lambda x: x.lower(), docstring=_shared_docs['casemethods'] % _shared_docs['lower'])
A:pandas.core.strings.upper->_noarg_wrapper(lambda x: x.upper(), docstring=_shared_docs['casemethods'] % _shared_docs['upper'])
A:pandas.core.strings.title->_noarg_wrapper(lambda x: x.title(), docstring=_shared_docs['casemethods'] % _shared_docs['title'])
A:pandas.core.strings.capitalize->_noarg_wrapper(lambda x: x.capitalize(), docstring=_shared_docs['casemethods'] % _shared_docs['capitalize'])
A:pandas.core.strings.swapcase->_noarg_wrapper(lambda x: x.swapcase(), docstring=_shared_docs['casemethods'] % _shared_docs['swapcase'])
A:pandas.core.strings._shared_docs['isalnum']->dict(type='alphanumeric', method='isalnum')
A:pandas.core.strings._shared_docs['isalpha']->dict(type='alphabetic', method='isalpha')
A:pandas.core.strings._shared_docs['isdigit']->dict(type='digits', method='isdigit')
A:pandas.core.strings._shared_docs['isspace']->dict(type='whitespace', method='isspace')
A:pandas.core.strings._shared_docs['islower']->dict(type='lowercase', method='islower')
A:pandas.core.strings._shared_docs['isupper']->dict(type='uppercase', method='isupper')
A:pandas.core.strings._shared_docs['istitle']->dict(type='titlecase', method='istitle')
A:pandas.core.strings._shared_docs['isnumeric']->dict(type='numeric', method='isnumeric')
A:pandas.core.strings._shared_docs['isdecimal']->dict(type='decimal', method='isdecimal')
A:pandas.core.strings.isalnum->_noarg_wrapper(lambda x: x.isalnum(), docstring=_shared_docs['ismethods'] % _shared_docs['isalnum'])
A:pandas.core.strings.isalpha->_noarg_wrapper(lambda x: x.isalpha(), docstring=_shared_docs['ismethods'] % _shared_docs['isalpha'])
A:pandas.core.strings.isdigit->_noarg_wrapper(lambda x: x.isdigit(), docstring=_shared_docs['ismethods'] % _shared_docs['isdigit'])
A:pandas.core.strings.isspace->_noarg_wrapper(lambda x: x.isspace(), docstring=_shared_docs['ismethods'] % _shared_docs['isspace'])
A:pandas.core.strings.islower->_noarg_wrapper(lambda x: x.islower(), docstring=_shared_docs['ismethods'] % _shared_docs['islower'])
A:pandas.core.strings.isupper->_noarg_wrapper(lambda x: x.isupper(), docstring=_shared_docs['ismethods'] % _shared_docs['isupper'])
A:pandas.core.strings.istitle->_noarg_wrapper(lambda x: x.istitle(), docstring=_shared_docs['ismethods'] % _shared_docs['istitle'])
A:pandas.core.strings.isnumeric->_noarg_wrapper(lambda x: compat.u_safe(x).isnumeric(), docstring=_shared_docs['ismethods'] % _shared_docs['isnumeric'])
A:pandas.core.strings.isdecimal->_noarg_wrapper(lambda x: compat.u_safe(x).isdecimal(), docstring=_shared_docs['ismethods'] % _shared_docs['isdecimal'])
A:pandas.core.strings.str->AccessorProperty(StringMethods, _make_str_accessor)
pandas.core.strings.StringAccessorMixin(object)
pandas.core.strings.StringAccessorMixin._dir_additions(self)
pandas.core.strings.StringAccessorMixin._dir_deletions(self)
pandas.core.strings.StringAccessorMixin._make_str_accessor(self)
pandas.core.strings.StringMethods(self,data)
pandas.core.strings.StringMethods.__getitem__(self,key)
pandas.core.strings.StringMethods.__init__(self,data)
pandas.core.strings.StringMethods.__iter__(self)
pandas.core.strings.StringMethods._wrap_result(self,result,use_codes=True,name=None,expand=None)
pandas.core.strings.StringMethods.cat(self,others=None,sep=None,na_rep=None)
pandas.core.strings.StringMethods.center(self,width,fillchar='')
pandas.core.strings.StringMethods.contains(self,pat,case=True,flags=0,na=np.nan,regex=True)
pandas.core.strings.StringMethods.decode(self,encoding,errors='strict')
pandas.core.strings.StringMethods.encode(self,encoding,errors='strict')
pandas.core.strings.StringMethods.extract(self,pat,flags=0,expand=None)
pandas.core.strings.StringMethods.extractall(self,pat,flags=0)
pandas.core.strings.StringMethods.find(self,sub,start=0,end=None)
pandas.core.strings.StringMethods.get(self,i)
pandas.core.strings.StringMethods.get_dummies(self,sep='|')
pandas.core.strings.StringMethods.index(self,sub,start=0,end=None)
pandas.core.strings.StringMethods.join(self,sep)
pandas.core.strings.StringMethods.ljust(self,width,fillchar='')
pandas.core.strings.StringMethods.lstrip(self,to_strip=None)
pandas.core.strings.StringMethods.match(self,pat,case=True,flags=0,na=np.nan,as_indexer=None)
pandas.core.strings.StringMethods.normalize(self,form)
pandas.core.strings.StringMethods.pad(self,width,side='left',fillchar='')
pandas.core.strings.StringMethods.partition(self,pat='',expand=True)
pandas.core.strings.StringMethods.repeat(self,repeats)
pandas.core.strings.StringMethods.replace(self,pat,repl,n=-1,case=None,flags=0)
pandas.core.strings.StringMethods.rfind(self,sub,start=0,end=None)
pandas.core.strings.StringMethods.rindex(self,sub,start=0,end=None)
pandas.core.strings.StringMethods.rjust(self,width,fillchar='')
pandas.core.strings.StringMethods.rpartition(self,pat='',expand=True)
pandas.core.strings.StringMethods.rsplit(self,pat=None,n=-1,expand=False)
pandas.core.strings.StringMethods.rstrip(self,to_strip=None)
pandas.core.strings.StringMethods.slice(self,start=None,stop=None,step=None)
pandas.core.strings.StringMethods.slice_replace(self,start=None,stop=None,repl=None)
pandas.core.strings.StringMethods.split(self,pat=None,n=-1,expand=False)
pandas.core.strings.StringMethods.strip(self,to_strip=None)
pandas.core.strings.StringMethods.translate(self,table,deletechars=None)
pandas.core.strings.StringMethods.wrap(self,width,**kwargs)
pandas.core.strings.StringMethods.zfill(self,width)
pandas.core.strings._get_array_list(arr,others)
pandas.core.strings._get_single_group_name(rx)
pandas.core.strings._groups_or_na_fun(regex)
pandas.core.strings._length_check(others)
pandas.core.strings._map(f,arr,na_mask=False,na_value=np.nan,dtype=object)
pandas.core.strings._na_map(f,arr,na_result=np.nan,dtype=object)
pandas.core.strings._noarg_wrapper(f,docstring=None,**kargs)
pandas.core.strings._pat_wrapper(f,flags=False,na=False,**kwargs)
pandas.core.strings._str_extract_frame(arr,pat,flags=0)
pandas.core.strings._str_extract_noexpand(arr,pat,flags=0)
pandas.core.strings.copy(source)
pandas.core.strings.str_cat(arr,others=None,sep=None,na_rep=None)
pandas.core.strings.str_contains(arr,pat,case=True,flags=0,na=np.nan,regex=True)
pandas.core.strings.str_count(arr,pat,flags=0)
pandas.core.strings.str_decode(arr,encoding,errors='strict')
pandas.core.strings.str_encode(arr,encoding,errors='strict')
pandas.core.strings.str_endswith(arr,pat,na=np.nan)
pandas.core.strings.str_extract(arr,pat,flags=0,expand=None)
pandas.core.strings.str_extractall(arr,pat,flags=0)
pandas.core.strings.str_find(arr,sub,start=0,end=None,side='left')
pandas.core.strings.str_findall(arr,pat,flags=0)
pandas.core.strings.str_get(arr,i)
pandas.core.strings.str_get_dummies(arr,sep='|')
pandas.core.strings.str_index(arr,sub,start=0,end=None,side='left')
pandas.core.strings.str_join(arr,sep)
pandas.core.strings.str_match(arr,pat,case=True,flags=0,na=np.nan,as_indexer=None)
pandas.core.strings.str_pad(arr,width,side='left',fillchar='')
pandas.core.strings.str_repeat(arr,repeats)
pandas.core.strings.str_replace(arr,pat,repl,n=-1,case=None,flags=0)
pandas.core.strings.str_rsplit(arr,pat=None,n=None)
pandas.core.strings.str_slice(arr,start=None,stop=None,step=None)
pandas.core.strings.str_slice_replace(arr,start=None,stop=None,repl=None)
pandas.core.strings.str_split(arr,pat=None,n=None)
pandas.core.strings.str_startswith(arr,pat,na=np.nan)
pandas.core.strings.str_strip(arr,to_strip=None,side='both')
pandas.core.strings.str_translate(arr,table,deletechars=None)
pandas.core.strings.str_wrap(arr,width,**kwargs)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/api.py----------------------------------------
A:pandas.core.api.datetools->_DeprecatedModule(deprmod='pandas.core.datetools', removals=_removals)
pandas.core.api.groupby(*args,**kwargs)
pandas.core.api.match(*args,**kwargs)
pandas.groupby(*args,**kwargs)
pandas.match(*args,**kwargs)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/panelnd.py----------------------------------------
A:pandas.core.panelnd.slicer->getattr(pandas, slicer)
A:pandas.core.panelnd.klass->type(klass_name, (slicer,), ns)
A:pandas.core.panelnd.axis_name->self._get_axis_name(axis)
A:pandas.core.panelnd.index->self._AXIS_ORDERS.index(axis)
A:pandas.core.panelnd.d->dict([(a, ax) for (a, ax) in zip(self._AXIS_ORDERS, new_axes)])
A:pandas.core.panelnd.this->self.reindex(**d)
A:pandas.core.panelnd.other->other.reindex(**d).reindex(**d)
A:pandas.core.panelnd.result_values->func(this.values, other.values)
pandas.core.panelnd.create_nd_panel_factory(klass_name,orders,slices,slicer,aliases=None,stat_axis=2,info_axis=0,ns=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/nanops.py----------------------------------------
A:pandas.core.nanops.self.dtypes->tuple((np.dtype(dtype).type for dtype in dtypes))
A:pandas.core.nanops.obj_iter->itertools.chain(args, compat.itervalues(kwargs))
A:pandas.core.nanops.bn_func->getattr(bn, bn_name)
A:pandas.core.nanops.result->result.astype('O').astype('O')
A:pandas.core.nanops.values->values.copy().copy()
A:pandas.core.nanops.mask->isnull(values)
A:pandas.core.nanops.dtype_ok->_na_ok_dtype(dtype)
A:pandas.core.nanops.fill_value->_get_fill_value(dtype, fill_value=fill_value, fill_value_typ=fill_value_typ)
A:pandas.core.nanops.(values, changed)->maybe_upcast_putmask(values, mask, fill_value)
A:pandas.core.nanops.(values, mask, dtype, _)->_get_values(values, skipna, fill_value_typ='+inf', isfinite=True)
A:pandas.core.nanops.(values, mask, dtype, dtype_max)->_get_values(values, skipna, fill_value_typ=fill_value_typ)
A:pandas.core.nanops.the_sum->_ensure_numeric(values.sum(axis, dtype=dtype_sum))
A:pandas.core.nanops.count->_get_counts(mask, axis, dtype=values.dtype)
A:pandas.core.nanops.shp->numpy.array(values.shape)
A:pandas.core.nanops.dims->numpy.arange(values.ndim)
A:pandas.core.nanops.ret->numpy.empty(shp[dims != axis])
A:pandas.core.nanops.dtype->_get_dtype(dtype)
A:pandas.core.nanops.(count, d)->_get_counts_nanvar(mask, axis, ddof)
A:pandas.core.nanops.avg->numpy.expand_dims(avg, axis)
A:pandas.core.nanops.sqr->_ensure_numeric((avg - values) ** 2)
A:pandas.core.nanops.var->nanvar(values, axis, skipna, ddof=ddof)
A:pandas.core.nanops.(count, _)->_get_counts_nanvar(mask, axis, ddof, values.dtype)
A:pandas.core.nanops.nanmin->_nanminmax('min', fill_value_typ='+inf')
A:pandas.core.nanops.nanmax->_nanminmax('max', fill_value_typ='-inf')
A:pandas.core.nanops.mean->numpy.expand_dims(mean, axis)
A:pandas.core.nanops.m2->adjusted2.sum(axis, dtype=np.float64)
A:pandas.core.nanops.m3->_zero_out_fperr(m3)
A:pandas.core.nanops.m4->adjusted4.sum(axis, dtype=np.float64)
A:pandas.core.nanops.numer->_zero_out_fperr(numer)
A:pandas.core.nanops.denom->_zero_out_fperr(denom)
A:pandas.core.nanops.na_mask->isnull(values).any(axis)
A:pandas.core.nanops.f->get_corr_func(method)
A:pandas.core.nanops.rs->kendalltau(a, b)
A:pandas.core.nanops.x->complex(x)
A:pandas.core.nanops.xmask->isnull(x)
A:pandas.core.nanops.ymask->isnull(y)
A:pandas.core.nanops.nangt->make_nancomp(operator.gt)
A:pandas.core.nanops.nange->make_nancomp(operator.ge)
A:pandas.core.nanops.nanlt->make_nancomp(operator.lt)
A:pandas.core.nanops.nanle->make_nancomp(operator.le)
A:pandas.core.nanops.naneq->make_nancomp(operator.eq)
A:pandas.core.nanops.nanne->make_nancomp(operator.ne)
pandas.core.nanops._bn_ok_dtype(dt,name)
pandas.core.nanops._ensure_numeric(x)
pandas.core.nanops._get_counts(mask,axis,dtype=float)
pandas.core.nanops._get_counts_nanvar(mask,axis,ddof,dtype=float)
pandas.core.nanops._get_fill_value(dtype,fill_value=None,fill_value_typ=None)
pandas.core.nanops._get_values(values,skipna,fill_value=None,fill_value_typ=None,isfinite=False,copy=True)
pandas.core.nanops._has_infs(result)
pandas.core.nanops._isfinite(values)
pandas.core.nanops._maybe_arg_null_out(result,axis,mask,skipna)
pandas.core.nanops._maybe_null_out(result,axis,mask)
pandas.core.nanops._na_ok_dtype(dtype)
pandas.core.nanops._nanminmax(meth,fill_value_typ)
pandas.core.nanops._view_if_needed(values)
pandas.core.nanops._wrap_results(result,dtype)
pandas.core.nanops._zero_out_fperr(arg)
pandas.core.nanops.bottleneck_switch(self,zero_value=None,**kwargs)
pandas.core.nanops.bottleneck_switch.__init__(self,zero_value=None,**kwargs)
pandas.core.nanops.disallow(self,*dtypes)
pandas.core.nanops.disallow.__init__(self,*dtypes)
pandas.core.nanops.disallow.check(self,obj)
pandas.core.nanops.get_corr_func(method)
pandas.core.nanops.make_nancomp(op)
pandas.core.nanops.nanall(values,axis=None,skipna=True)
pandas.core.nanops.nanany(values,axis=None,skipna=True)
pandas.core.nanops.nanargmax(values,axis=None,skipna=True)
pandas.core.nanops.nanargmin(values,axis=None,skipna=True)
pandas.core.nanops.nancorr(a,b,method='pearson',min_periods=None)
pandas.core.nanops.nancov(a,b,min_periods=None)
pandas.core.nanops.nankurt(values,axis=None,skipna=True)
pandas.core.nanops.nanmean(values,axis=None,skipna=True)
pandas.core.nanops.nanmedian(values,axis=None,skipna=True)
pandas.core.nanops.nanprod(values,axis=None,skipna=True)
pandas.core.nanops.nansem(values,axis=None,skipna=True,ddof=1)
pandas.core.nanops.nanskew(values,axis=None,skipna=True)
pandas.core.nanops.nanstd(values,axis=None,skipna=True,ddof=1)
pandas.core.nanops.nansum(values,axis=None,skipna=True)
pandas.core.nanops.nanvar(values,axis=None,skipna=True,ddof=1)
pandas.core.nanops.set_use_bottleneck(v=True)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/categorical.py----------------------------------------
A:pandas.core.categorical.f->getattr(self._codes, op)
A:pandas.core.categorical.ret->numpy.logical_or(ret, self._codes == nan_pos)
A:pandas.core.categorical.other->pandas._libs.lib.item_from_zerodim(other)
A:pandas.core.categorical.i->self.categories.get_loc(other)
A:pandas.core.categorical.dtype->getattr(self.categories, 'dtype_str', str(self.categories.dtype))
A:pandas.core.categorical.self._codes->coerce_indexer_dtype(codes, categories)
A:pandas.core.categorical.self._categories->self._validate_categories(categories, fastpath=isinstance(categories, ABCIndexClass))
A:pandas.core.categorical.values->_ensure_object(values)
A:pandas.core.categorical.(codes, categories)->factorize(values, sort=False)
A:pandas.core.categorical.categories->CategoricalIndex(values.categories, categories=values.categories, ordered=values.ordered)
A:pandas.core.categorical.codes->self._codes.repeat(repeats)
A:pandas.core.categorical.v->self._codes.view()
A:pandas.core.categorical.labels->property(fget=_get_labels, fset=_set_codes)
A:pandas.core.categorical.without_na->numpy.array([x for x in categories if notnull(x)])
A:pandas.core.categorical.with_na->numpy.array(categories)
A:pandas.core.categorical.cat->Categorical(values, ordered=True)
A:pandas.core.categorical.inplace->validate_bool_kwarg(inplace, 'inplace')
A:pandas.core.categorical.ordered->property(fget=_get_ordered)
A:pandas.core.categorical.new_categories->self.categories.map(mapper)
A:pandas.core.categorical.cat._codes->coerce_indexer_dtype(inv, self._categories)
A:pandas.core.categorical.cat._categories->Categorical(values, ordered=True).categories.take(idx)
A:pandas.core.categorical.removal_set->set(list(removals))
A:pandas.core.categorical.(idx, inv)->numpy.unique(cat._codes, return_inverse=True)
A:pandas.core.categorical.__eq__->_cat_compare_op('__eq__')
A:pandas.core.categorical.__ne__->_cat_compare_op('__ne__')
A:pandas.core.categorical.__lt__->_cat_compare_op('__lt__')
A:pandas.core.categorical.__gt__->_cat_compare_op('__gt__')
A:pandas.core.categorical.__le__->_cat_compare_op('__le__')
A:pandas.core.categorical.__ge__->_cat_compare_op('__ge__')
A:pandas.core.categorical.state['_categories']->self._validate_categories(state.pop('_levels'))
A:pandas.core.categorical.state['_codes']->coerce_indexer_dtype(state.pop('labels'), state['_categories'])
A:pandas.core.categorical.state['_ordered']->state.pop('ordered')
A:pandas.core.categorical.values_as_codes->_get_codes_for_values(Series(value).values, self.categories)
A:pandas.core.categorical.result->concat([counts, freqs], axis=1)
A:pandas.core.categorical.count->bincount(np.where(mask, code, ncat))
A:pandas.core.categorical.ix->self._constructor(ix, categories=cat, ordered=obj.ordered, fastpath=True)
A:pandas.core.categorical.ascending->pandas.compat.numpy.function.validate_argsort_with_ascending(ascending, args, kwargs)
A:pandas.core.categorical.n_nans->len(codes[na_mask])
A:pandas.core.categorical.new_codes->self._codes.repeat(repeats).copy()
A:pandas.core.categorical.values[mask]->self.categories.get_loc(value)
A:pandas.core.categorical.head->pandas.io.formats.format.format_array(self.categories[:num], None)
A:pandas.core.categorical.tail->pandas.io.formats.format.format_array(self.categories[-num:], None)
A:pandas.core.categorical.category_strs->self._repr_categories()
A:pandas.core.categorical.(width, height)->get_terminal_size()
A:pandas.core.categorical.cur_col_len->len(levheader)
A:pandas.core.categorical.formatter->pandas.io.formats.format.CategoricalFormatter(self, length=length, na_rep=na_rep, footer=footer)
A:pandas.core.categorical.indexer->indexer.astype(self._codes.dtype).astype(self._codes.dtype)
A:pandas.core.categorical.to_add->Index(rvalue).difference(self.categories)
A:pandas.core.categorical.key->numpy.asarray(key)
A:pandas.core.categorical.lindexer->self._maybe_coerce_indexer(lindexer)
A:pandas.core.categorical.(r, counts)->pandas._libs.algos.groupsort_indexer(self.codes.astype('int64'), categories.size)
A:pandas.core.categorical.counts->self.value_counts(dropna=False)
A:pandas.core.categorical.func->getattr(self, name, None)
A:pandas.core.categorical.pointer->self._codes.max(**kwargs)
A:pandas.core.categorical.unique_codes->unique1d(self.codes)
A:pandas.core.categorical.take_codes->sorted(take_codes)
A:pandas.core.categorical.method->getattr(self.categorical, name)
A:pandas.core.categorical.res->method(*args, **kwargs)
A:pandas.core.categorical.((hash_klass, vec_klass), vals)->_get_data_algo(values, _hashtables)
A:pandas.core.categorical.((_, _), cats)->_get_data_algo(categories, _hashtables)
A:pandas.core.categorical.t->hash_klass(len(cats))
pandas.core.categorical.Categorical(self,values,categories=None,ordered=False,fastpath=False)
pandas.core.categorical.Categorical.T(self)
pandas.core.categorical.Categorical.__array__(self,dtype=None)
pandas.core.categorical.Categorical.__getitem__(self,key)
pandas.core.categorical.Categorical.__init__(self,values,categories=None,ordered=False,fastpath=False)
pandas.core.categorical.Categorical.__iter__(self)
pandas.core.categorical.Categorical.__len__(self)
pandas.core.categorical.Categorical.__setitem__(self,key,value)
pandas.core.categorical.Categorical.__setstate__(self,state)
pandas.core.categorical.Categorical.__unicode__(self)
pandas.core.categorical.Categorical._codes_for_groupby(self,sort)
pandas.core.categorical.Categorical._constructor(self)
pandas.core.categorical.Categorical._get_categories(self)
pandas.core.categorical.Categorical._get_codes(self)
pandas.core.categorical.Categorical._get_labels(self)
pandas.core.categorical.Categorical._get_ordered(self)
pandas.core.categorical.Categorical._get_repr(self,length=True,na_rep='NaN',footer=True)
pandas.core.categorical.Categorical._maybe_coerce_indexer(self,indexer)
pandas.core.categorical.Categorical._reduce(self,op,name,axis=0,skipna=True,numeric_only=None,filter_type=None,**kwds)
pandas.core.categorical.Categorical._repr_categories(self)
pandas.core.categorical.Categorical._repr_categories_info(self)
pandas.core.categorical.Categorical._repr_footer(self)
pandas.core.categorical.Categorical._reverse_indexer(self)
pandas.core.categorical.Categorical._set_categories(self,categories,fastpath=False)
pandas.core.categorical.Categorical._set_codes(self,codes)
pandas.core.categorical.Categorical._slice(self,slicer)
pandas.core.categorical.Categorical._tidy_repr(self,max_vals=10,footer=True)
pandas.core.categorical.Categorical._validate_categories(cls,categories,fastpath=False)
pandas.core.categorical.Categorical._validate_ordered(cls,ordered)
pandas.core.categorical.Categorical._values_for_rank(self)
pandas.core.categorical.Categorical.add_categories(self,new_categories,inplace=False)
pandas.core.categorical.Categorical.argsort(self,ascending=True,*args,**kwargs)
pandas.core.categorical.Categorical.as_ordered(self,inplace=False)
pandas.core.categorical.Categorical.as_unordered(self,inplace=False)
pandas.core.categorical.Categorical.astype(self,dtype,copy=True)
pandas.core.categorical.Categorical.base(self)
pandas.core.categorical.Categorical.check_for_ordered(self,op)
pandas.core.categorical.Categorical.copy(self)
pandas.core.categorical.Categorical.describe(self)
pandas.core.categorical.Categorical.dropna(self)
pandas.core.categorical.Categorical.equals(self,other)
pandas.core.categorical.Categorical.fillna(self,value=None,method=None,limit=None)
pandas.core.categorical.Categorical.from_array(cls,data,**kwargs)
pandas.core.categorical.Categorical.from_codes(cls,codes,categories,ordered=False)
pandas.core.categorical.Categorical.get_values(self)
pandas.core.categorical.Categorical.is_dtype_equal(self,other)
pandas.core.categorical.Categorical.isnull(self)
pandas.core.categorical.Categorical.itemsize(self)
pandas.core.categorical.Categorical.map(self,mapper)
pandas.core.categorical.Categorical.max(self,numeric_only=None,**kwargs)
pandas.core.categorical.Categorical.memory_usage(self,deep=False)
pandas.core.categorical.Categorical.min(self,numeric_only=None,**kwargs)
pandas.core.categorical.Categorical.mode(self)
pandas.core.categorical.Categorical.nbytes(self)
pandas.core.categorical.Categorical.ndim(self)
pandas.core.categorical.Categorical.notnull(self)
pandas.core.categorical.Categorical.order(self,inplace=False,ascending=True,na_position='last')
pandas.core.categorical.Categorical.put(self,*args,**kwargs)
pandas.core.categorical.Categorical.ravel(self,order='C')
pandas.core.categorical.Categorical.remove_categories(self,removals,inplace=False)
pandas.core.categorical.Categorical.remove_unused_categories(self,inplace=False)
pandas.core.categorical.Categorical.rename_categories(self,new_categories,inplace=False)
pandas.core.categorical.Categorical.reorder_categories(self,new_categories,ordered=None,inplace=False)
pandas.core.categorical.Categorical.repeat(self,repeats,*args,**kwargs)
pandas.core.categorical.Categorical.reshape(self,new_shape,*args,**kwargs)
pandas.core.categorical.Categorical.searchsorted(self,value,side='left',sorter=None)
pandas.core.categorical.Categorical.set_categories(self,new_categories,ordered=None,rename=False,inplace=False)
pandas.core.categorical.Categorical.set_ordered(self,value,inplace=False)
pandas.core.categorical.Categorical.shape(self)
pandas.core.categorical.Categorical.shift(self,periods)
pandas.core.categorical.Categorical.size(self)
pandas.core.categorical.Categorical.sort(self,inplace=True,ascending=True,na_position='last',**kwargs)
pandas.core.categorical.Categorical.sort_values(self,inplace=False,ascending=True,na_position='last')
pandas.core.categorical.Categorical.take_nd(self,indexer,allow_fill=True,fill_value=None)
pandas.core.categorical.Categorical.to_dense(self)
pandas.core.categorical.Categorical.unique(self)
pandas.core.categorical.Categorical.value_counts(self,dropna=True)
pandas.core.categorical.Categorical.view(self)
pandas.core.categorical.CategoricalAccessor(self,values,index)
pandas.core.categorical.CategoricalAccessor.__init__(self,values,index)
pandas.core.categorical.CategoricalAccessor._delegate_method(self,name,*args,**kwargs)
pandas.core.categorical.CategoricalAccessor._delegate_property_get(self,name)
pandas.core.categorical.CategoricalAccessor._delegate_property_set(self,name,new_values)
pandas.core.categorical.CategoricalAccessor.codes(self)
pandas.core.categorical._cat_compare_op(op)
pandas.core.categorical._convert_to_list_like(list_like)
pandas.core.categorical._factorize_from_iterable(values)
pandas.core.categorical._factorize_from_iterables(iterables)
pandas.core.categorical._get_codes_for_values(values,categories)
pandas.core.categorical.maybe_to_categorical(array)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/config_init.py----------------------------------------
A:pandas.core.config_init.style_backup->dict([(k, plt.rcParams[k]) for k in mpl_stylesheet])
A:pandas.core.config_init.val->pandas.core.config.get_option(key)
A:pandas.core.config_init.default->options.pop(0)
A:pandas.core.config_init.doc->writer_engine_doc.format(ext=ext, default=default, others=options)
pandas.core.config_init.mpl_style_cb(key)
pandas.core.config_init.table_schema_cb(key)
pandas.core.config_init.use_bottleneck_cb(key)
pandas.core.config_init.use_inf_as_null_cb(key)
pandas.core.config_init.use_numexpr_cb(key)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/index.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/dtypes/concat.py----------------------------------------
A:pandas.core.dtypes.concat.typs->get_dtype_kinds(to_concat)
A:pandas.core.dtypes.concat.typ->str(arr.dtype)
A:pandas.core.dtypes.concat._contains_datetime->any((typ.startswith('datetime') for typ in typs))
A:pandas.core.dtypes.concat._contains_period->any((typ.startswith('period') for typ in typs))
A:pandas.core.dtypes.concat.res->_concat_compat(to_concat)
A:pandas.core.dtypes.concat.new_codes->numpy.concatenate(new_codes)
A:pandas.core.dtypes.concat.categories->categories.sort_values().sort_values()
A:pandas.core.dtypes.concat.indexer->categories.sort_values().sort_values().get_indexer(c.categories)
A:pandas.core.dtypes.concat.cats->first.categories.append([c.categories for c in to_union[1:]])
A:pandas.core.dtypes.concat.x->numpy.atleast_2d(x)
A:pandas.core.dtypes.concat.new_values->numpy.concatenate([x.asi8 for x in to_concat])
A:pandas.core.dtypes.concat.attribs->self._get_attributes_dict()
A:pandas.core.dtypes.concat.fill_values->set((c.fill_value for c in to_concat))
A:pandas.core.dtypes.concat.sp_values->numpy.concatenate(sp_values)
A:pandas.core.dtypes.concat.indices->numpy.concatenate(indices)
A:pandas.core.dtypes.concat.sp_index->_make_index(loc, indices, kind=to_concat[0].sp_index)
A:pandas.core.dtypes.concat.result->result.astype('object').astype('object')
pandas.core.dtypes.concat._concat_categorical(to_concat,axis=0)
pandas.core.dtypes.concat._concat_compat(to_concat,axis=0)
pandas.core.dtypes.concat._concat_datetime(to_concat,axis=0,typs=None)
pandas.core.dtypes.concat._concat_datetimetz(to_concat,name=None)
pandas.core.dtypes.concat._concat_index_asobject(to_concat,name=None)
pandas.core.dtypes.concat._concat_sparse(to_concat,axis=0,typs=None)
pandas.core.dtypes.concat._get_frame_result_type(result,objs)
pandas.core.dtypes.concat._get_series_result_type(result)
pandas.core.dtypes.concat.get_dtype_kinds(l)
pandas.core.dtypes.concat.union_categoricals(to_union,sort_categories=False,ignore_order=False)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/dtypes/inference.py----------------------------------------
pandas.core.dtypes.inference._iterable_not_string(obj)
pandas.core.dtypes.inference.is_dict_like(obj)
pandas.core.dtypes.inference.is_file_like(obj)
pandas.core.dtypes.inference.is_hashable(obj)
pandas.core.dtypes.inference.is_iterator(obj)
pandas.core.dtypes.inference.is_list_like(obj)
pandas.core.dtypes.inference.is_named_tuple(obj)
pandas.core.dtypes.inference.is_nested_list_like(obj)
pandas.core.dtypes.inference.is_number(obj)
pandas.core.dtypes.inference.is_re(obj)
pandas.core.dtypes.inference.is_re_compilable(obj)
pandas.core.dtypes.inference.is_sequence(obj)
pandas.core.dtypes.inference.is_string_like(obj)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/dtypes/dtypes.py----------------------------------------
A:pandas.core.dtypes.dtypes.shape->tuple()
A:pandas.core.dtypes.dtypes.encoding->get_option('display.encoding')
A:pandas.core.dtypes.dtypes.base->numpy.dtype('O')
A:pandas.core.dtypes.dtypes.c->object.__new__(cls)
A:pandas.core.dtypes.dtypes._match->re.compile('(I|i)nterval\\[(?P<subtype>.+)\\]')
A:pandas.core.dtypes.dtypes.m->cls._match.search(subtype)
A:pandas.core.dtypes.dtypes.u->object.__new__(cls)
A:pandas.core.dtypes.dtypes.freq->to_offset(freq)
A:pandas.core.dtypes.dtypes.subtype->pandas_dtype(subtype)
pandas.core.dtypes.dtypes.CategoricalDtype(cls)
pandas.core.dtypes.dtypes.CategoricalDtype.__eq__(self,other)
pandas.core.dtypes.dtypes.CategoricalDtype.__hash__(self)
pandas.core.dtypes.dtypes.CategoricalDtype.__new__(cls)
pandas.core.dtypes.dtypes.CategoricalDtype.construct_from_string(cls,string)
pandas.core.dtypes.dtypes.CategoricalDtypeType(type)
pandas.core.dtypes.dtypes.DatetimeTZDtype(cls,unit=None,tz=None)
pandas.core.dtypes.dtypes.DatetimeTZDtype.__eq__(self,other)
pandas.core.dtypes.dtypes.DatetimeTZDtype.__hash__(self)
pandas.core.dtypes.dtypes.DatetimeTZDtype.__new__(cls,unit=None,tz=None)
pandas.core.dtypes.dtypes.DatetimeTZDtype.__unicode__(self)
pandas.core.dtypes.dtypes.DatetimeTZDtype.construct_from_string(cls,string)
pandas.core.dtypes.dtypes.DatetimeTZDtype.name(self)
pandas.core.dtypes.dtypes.DatetimeTZDtypeType(type)
pandas.core.dtypes.dtypes.ExtensionDtype(object)
pandas.core.dtypes.dtypes.ExtensionDtype.__bytes__(self)
pandas.core.dtypes.dtypes.ExtensionDtype.__eq__(self,other)
pandas.core.dtypes.dtypes.ExtensionDtype.__getstate__(self)
pandas.core.dtypes.dtypes.ExtensionDtype.__hash__(self)
pandas.core.dtypes.dtypes.ExtensionDtype.__ne__(self,other)
pandas.core.dtypes.dtypes.ExtensionDtype.__repr__(self)
pandas.core.dtypes.dtypes.ExtensionDtype.__str__(self)
pandas.core.dtypes.dtypes.ExtensionDtype.__unicode__(self)
pandas.core.dtypes.dtypes.ExtensionDtype.is_dtype(cls,dtype)
pandas.core.dtypes.dtypes.ExtensionDtype.reset_cache(cls)
pandas.core.dtypes.dtypes.IntervalDtype(cls,subtype=None)
pandas.core.dtypes.dtypes.IntervalDtype.__eq__(self,other)
pandas.core.dtypes.dtypes.IntervalDtype.__hash__(self)
pandas.core.dtypes.dtypes.IntervalDtype.__new__(cls,subtype=None)
pandas.core.dtypes.dtypes.IntervalDtype.__unicode__(self)
pandas.core.dtypes.dtypes.IntervalDtype.construct_from_string(cls,string)
pandas.core.dtypes.dtypes.IntervalDtype.is_dtype(cls,dtype)
pandas.core.dtypes.dtypes.IntervalDtype.name(self)
pandas.core.dtypes.dtypes.IntervalDtypeType(type)
pandas.core.dtypes.dtypes.PeriodDtype(cls,freq=None)
pandas.core.dtypes.dtypes.PeriodDtype.__eq__(self,other)
pandas.core.dtypes.dtypes.PeriodDtype.__hash__(self)
pandas.core.dtypes.dtypes.PeriodDtype.__new__(cls,freq=None)
pandas.core.dtypes.dtypes.PeriodDtype.__unicode__(self)
pandas.core.dtypes.dtypes.PeriodDtype._parse_dtype_strict(cls,freq)
pandas.core.dtypes.dtypes.PeriodDtype.construct_from_string(cls,string)
pandas.core.dtypes.dtypes.PeriodDtype.is_dtype(cls,dtype)
pandas.core.dtypes.dtypes.PeriodDtype.name(self)
pandas.core.dtypes.dtypes.PeriodDtypeType(type)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/dtypes/common.py----------------------------------------
A:pandas.core.dtypes.common._POSSIBLY_CAST_DTYPES->set([np.dtype(t).name for t in ['O', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']])
A:pandas.core.dtypes.common._NS_DTYPE->numpy.dtype('M8[ns]')
A:pandas.core.dtypes.common._TD_DTYPE->numpy.dtype('m8[ns]')
A:pandas.core.dtypes.common._INT64_DTYPE->numpy.dtype(np.int64)
A:pandas.core.dtypes.common.arr->Categorical(arr)
A:pandas.core.dtypes.common.tipo->_get_dtype_type(arr_or_dtype)
A:pandas.core.dtypes.common.dtype->numpy.dtype(dtype)
A:pandas.core.dtypes.common.source->_get_dtype(source)
A:pandas.core.dtypes.common.target->_get_dtype(target)
A:pandas.core.dtypes.common.is_a_array->isinstance(a, np.ndarray)
A:pandas.core.dtypes.common.is_b_array->isinstance(b, np.ndarray)
A:pandas.core.dtypes.common.a->numpy.asarray(a)
A:pandas.core.dtypes.common.b->numpy.asarray(b)
A:pandas.core.dtypes.common._string_dtypes->frozenset(map(_get_dtype_from_object, (binary_type, text_type)))
A:pandas.core.dtypes.common.npdtype->numpy.dtype(dtype)
pandas.core.dtypes.common._coerce_to_dtype(dtype)
pandas.core.dtypes.common._ensure_categorical(arr)
pandas.core.dtypes.common._ensure_float(arr)
pandas.core.dtypes.common._get_dtype(arr_or_dtype)
pandas.core.dtypes.common._get_dtype_from_object(dtype)
pandas.core.dtypes.common._get_dtype_type(arr_or_dtype)
pandas.core.dtypes.common._is_unorderable_exception(e)
pandas.core.dtypes.common._validate_date_like_dtype(dtype)
pandas.core.dtypes.common.is_any_int_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_bool_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_categorical(arr)
pandas.core.dtypes.common.is_categorical_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_complex_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_datetime64_any_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_datetime64_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_datetime64_ns_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_datetime64tz_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_datetime_arraylike(arr)
pandas.core.dtypes.common.is_datetime_or_timedelta_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_datetimelike(arr)
pandas.core.dtypes.common.is_datetimelike_v_numeric(a,b)
pandas.core.dtypes.common.is_datetimelike_v_object(a,b)
pandas.core.dtypes.common.is_datetimetz(arr)
pandas.core.dtypes.common.is_dtype_equal(source,target)
pandas.core.dtypes.common.is_extension_type(arr)
pandas.core.dtypes.common.is_float_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_floating_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_int64_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_int_or_datetime_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_integer_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_interval_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_numeric_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_numeric_v_string_like(a,b)
pandas.core.dtypes.common.is_object_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_period(arr)
pandas.core.dtypes.common.is_period_arraylike(arr)
pandas.core.dtypes.common.is_period_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_scipy_sparse(arr)
pandas.core.dtypes.common.is_signed_integer_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_sparse(arr)
pandas.core.dtypes.common.is_string_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_string_like_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_timedelta64_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_timedelta64_ns_dtype(arr_or_dtype)
pandas.core.dtypes.common.is_unsigned_integer_dtype(arr_or_dtype)
pandas.core.dtypes.common.needs_i8_conversion(arr_or_dtype)
pandas.core.dtypes.common.pandas_dtype(dtype)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/dtypes/missing.py----------------------------------------
A:pandas.core.dtypes.missing.flag->get_option(key)
A:pandas.core.dtypes.missing.values->getattr(obj, 'values', obj)
A:pandas.core.dtypes.missing.result->Series(result, index=obj.index, name=obj.name, copy=False)
A:pandas.core.dtypes.missing.vec->pandas._libs.lib.isnullobj_old(values.ravel())
A:pandas.core.dtypes.missing.result[...]->pandas._libs.lib.isnullobj_old(values.ravel()).reshape(shape)
A:pandas.core.dtypes.missing.result[:]->pandas._libs.lib.isnullobj_old(values.ravel()).reshape(shape)
A:pandas.core.dtypes.missing.res->isnull(obj)
A:pandas.core.dtypes.missing.left->left.tolist().tolist()
A:pandas.core.dtypes.missing.right->right.tolist().tolist()
A:pandas.core.dtypes.missing.val->numpy.array(val, copy=False)
A:pandas.core.dtypes.missing.dtype->pandas_dtype(dtype)
pandas.core.dtypes.missing._infer_fill_value(val)
pandas.core.dtypes.missing._is_na_compat(arr,fill_value=np.nan)
pandas.core.dtypes.missing._isnull_ndarraylike(obj)
pandas.core.dtypes.missing._isnull_ndarraylike_old(obj)
pandas.core.dtypes.missing._isnull_new(obj)
pandas.core.dtypes.missing._isnull_old(obj)
pandas.core.dtypes.missing._maybe_fill(arr,fill_value=np.nan)
pandas.core.dtypes.missing._use_inf_as_null(key)
pandas.core.dtypes.missing.array_equivalent(left,right,strict_nan=False)
pandas.core.dtypes.missing.is_null_datelike_scalar(other)
pandas.core.dtypes.missing.isnull(obj)
pandas.core.dtypes.missing.na_value_for_dtype(dtype)
pandas.core.dtypes.missing.notnull(obj)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/dtypes/cast.py----------------------------------------
A:pandas.core.dtypes.cast.values->pandas._libs.lib.maybe_convert_objects(values, convert_timedelta=timedelta)
A:pandas.core.dtypes.cast.inferred_type->pandas._libs.lib.infer_datetimelike_array(_ensure_object(v))
A:pandas.core.dtypes.cast.dtype->numpy.dtype(dtype)
A:pandas.core.dtypes.cast.r->int(r)
A:pandas.core.dtypes.cast.arr->numpy.asarray(arr)
A:pandas.core.dtypes.cast.new_result->arr.astype(dtype).astype(np.float64).values.copy()
A:pandas.core.dtypes.cast.result->numpy.asarray(arr).astype(dtype).astype(np.float64)
A:pandas.core.dtypes.cast.other->numpy.array(other, dtype=result.dtype)
A:pandas.core.dtypes.cast.om_at->om.astype(result.dtype)
A:pandas.core.dtypes.cast.(r, _)->maybe_upcast(result, fill_value=other, copy=True)
A:pandas.core.dtypes.cast.(new_dtype, _)->maybe_promote(result.dtype, other)
A:pandas.core.dtypes.cast.val->pandas._libs.tslib.Timestamp(val)
A:pandas.core.dtypes.cast.inferred->pandas._libs.lib.infer_dtype(arr)
A:pandas.core.dtypes.cast.(new_dtype, fill_value)->maybe_promote(dtype, fill_value)
A:pandas.core.dtypes.cast.obj[item]->chunk.astype(np.object_)
A:pandas.core.dtypes.cast.(dtype, values)->infer_dtype_from_scalar(values)
A:pandas.core.dtypes.cast.l->len(categories)
A:pandas.core.dtypes.cast.mask->isnull(arr)
A:pandas.core.dtypes.cast.new_values->pandas._libs.lib.maybe_convert_numeric(values, set(), coerce_numeric=True)
A:pandas.core.dtypes.cast.conversion_count->sum((datetime, numeric, timedelta))
A:pandas.core.dtypes.cast.converted->pandas._libs.lib.maybe_convert_numeric(values, set(), coerce_numeric=True)
A:pandas.core.dtypes.cast.v->pandas._libs.tslib.array_to_datetime(v, errors='raise')
A:pandas.core.dtypes.cast.value->maybe_infer_to_datetimelike(value)
A:pandas.core.dtypes.cast.is_datetime64->is_datetime64_dtype(dtype)
A:pandas.core.dtypes.cast.is_datetime64tz->is_datetime64tz_dtype(dtype)
A:pandas.core.dtypes.cast.is_timedelta64->is_timedelta64_dtype(dtype)
A:pandas.core.dtypes.cast.ints->numpy.asarray(value).view('i8')
A:pandas.core.dtypes.cast.is_array->isinstance(value, np.ndarray)
A:pandas.core.dtypes.cast.has_bools->any((is_bool_dtype(t) for t in types))
A:pandas.core.dtypes.cast.has_ints->any((is_integer_dtype(t) for t in types))
A:pandas.core.dtypes.cast.has_floats->any((is_float_dtype(t) for t in types))
A:pandas.core.dtypes.cast.has_complex->any((is_complex_dtype(t) for t in types))
pandas.core.dtypes.cast.astype_nansafe(arr,dtype,copy=True)
pandas.core.dtypes.cast.coerce_indexer_dtype(indexer,categories)
pandas.core.dtypes.cast.coerce_to_dtypes(result,dtypes)
pandas.core.dtypes.cast.find_common_type(types)
pandas.core.dtypes.cast.infer_dtype_from_array(arr)
pandas.core.dtypes.cast.infer_dtype_from_scalar(val,pandas_dtype=False)
pandas.core.dtypes.cast.invalidate_string_dtypes(dtype_set)
pandas.core.dtypes.cast.is_nested_object(obj)
pandas.core.dtypes.cast.maybe_cast_item(obj,item,dtype)
pandas.core.dtypes.cast.maybe_cast_to_datetime(value,dtype,errors='raise')
pandas.core.dtypes.cast.maybe_castable(arr)
pandas.core.dtypes.cast.maybe_convert_objects(values,convert_dates=True,convert_numeric=True,convert_timedeltas=True,copy=True)
pandas.core.dtypes.cast.maybe_convert_platform(values)
pandas.core.dtypes.cast.maybe_convert_scalar(values)
pandas.core.dtypes.cast.maybe_convert_string_to_object(values)
pandas.core.dtypes.cast.maybe_downcast_to_dtype(result,dtype)
pandas.core.dtypes.cast.maybe_infer_to_datetimelike(value,convert_dates=False)
pandas.core.dtypes.cast.maybe_promote(dtype,fill_value=np.nan)
pandas.core.dtypes.cast.maybe_upcast(values,fill_value=np.nan,dtype=None,copy=False)
pandas.core.dtypes.cast.maybe_upcast_putmask(result,mask,other)
pandas.core.dtypes.cast.soft_convert_objects(values,datetime=True,numeric=True,timedelta=True,coerce=False,copy=True)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/dtypes/generic.py----------------------------------------
A:pandas.core.dtypes.generic.dct->dict(__instancecheck__=_check, __subclasscheck__=_check)
A:pandas.core.dtypes.generic.meta->type('ABCBase', (type,), dct)
A:pandas.core.dtypes.generic.ABCIndex->create_pandas_abc_type('ABCIndex', '_typ', ('index',))
A:pandas.core.dtypes.generic.ABCInt64Index->create_pandas_abc_type('ABCInt64Index', '_typ', ('int64index',))
A:pandas.core.dtypes.generic.ABCUInt64Index->create_pandas_abc_type('ABCUInt64Index', '_typ', ('uint64index',))
A:pandas.core.dtypes.generic.ABCRangeIndex->create_pandas_abc_type('ABCRangeIndex', '_typ', ('rangeindex',))
A:pandas.core.dtypes.generic.ABCFloat64Index->create_pandas_abc_type('ABCFloat64Index', '_typ', ('float64index',))
A:pandas.core.dtypes.generic.ABCMultiIndex->create_pandas_abc_type('ABCMultiIndex', '_typ', ('multiindex',))
A:pandas.core.dtypes.generic.ABCDatetimeIndex->create_pandas_abc_type('ABCDatetimeIndex', '_typ', ('datetimeindex',))
A:pandas.core.dtypes.generic.ABCTimedeltaIndex->create_pandas_abc_type('ABCTimedeltaIndex', '_typ', ('timedeltaindex',))
A:pandas.core.dtypes.generic.ABCPeriodIndex->create_pandas_abc_type('ABCPeriodIndex', '_typ', ('periodindex',))
A:pandas.core.dtypes.generic.ABCCategoricalIndex->create_pandas_abc_type('ABCCategoricalIndex', '_typ', ('categoricalindex',))
A:pandas.core.dtypes.generic.ABCIntervalIndex->create_pandas_abc_type('ABCIntervalIndex', '_typ', ('intervalindex',))
A:pandas.core.dtypes.generic.ABCIndexClass->create_pandas_abc_type('ABCIndexClass', '_typ', ('index', 'int64index', 'rangeindex', 'float64index', 'uint64index', 'multiindex', 'datetimeindex', 'timedeltaindex', 'periodindex', 'categoricalindex', 'intervalindex'))
A:pandas.core.dtypes.generic.ABCSeries->create_pandas_abc_type('ABCSeries', '_typ', ('series',))
A:pandas.core.dtypes.generic.ABCDataFrame->create_pandas_abc_type('ABCDataFrame', '_typ', ('dataframe',))
A:pandas.core.dtypes.generic.ABCPanel->create_pandas_abc_type('ABCPanel', '_typ', ('panel', 'panel4d'))
A:pandas.core.dtypes.generic.ABCSparseSeries->create_pandas_abc_type('ABCSparseSeries', '_subtyp', ('sparse_series', 'sparse_time_series'))
A:pandas.core.dtypes.generic.ABCSparseArray->create_pandas_abc_type('ABCSparseArray', '_subtyp', ('sparse_array', 'sparse_series'))
A:pandas.core.dtypes.generic.ABCCategorical->create_pandas_abc_type('ABCCategorical', '_typ', 'categorical')
A:pandas.core.dtypes.generic.ABCPeriod->create_pandas_abc_type('ABCPeriod', '_typ', ('period',))
A:pandas.core.dtypes.generic.ABCGeneric->_ABCGeneric('ABCGeneric', tuple(), {})
pandas.core.dtypes.generic._ABCGeneric(type)
pandas.core.dtypes.generic._ABCGeneric.__instancecheck__(cls,inst)
pandas.core.dtypes.generic.create_pandas_abc_type(name,attr,comp)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/dtypes/api.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/dtypes/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/tools/numeric.py----------------------------------------
A:pandas.core.tools.numeric.values->maybe_downcast_to_dtype(values, dtype)
A:pandas.core.tools.numeric.float_32_ind->typecodes.index(float_32_char)
pandas.core.tools.numeric.to_numeric(arg,errors='raise',downcast=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/tools/datetimes.py----------------------------------------
A:pandas.core.tools.datetimes.tz->_infer(end, start)
A:pandas.core.tools.datetimes.parsed_datetime->dt_str_parse(dt_str, dayfirst=dayfirst)
A:pandas.core.tools.datetimes.tokens->dt_str_split(dt_str)
A:pandas.core.tools.datetimes.found_attrs->set()
A:pandas.core.tools.datetimes.token_filled->tokens[i].zfill(padding)
A:pandas.core.tools.datetimes.guessed_format->''.join(output_format)
A:pandas.core.tools.datetimes.dt_str->''.join(tokens)
A:pandas.core.tools.datetimes.arg->_ensure_object(arg)
A:pandas.core.tools.datetimes.result->numpy.empty(carg.shape, dtype='M8[ns]')
A:pandas.core.tools.datetimes.format->_guess_time_format_for_array(arg)
A:pandas.core.tools.datetimes.format_is_iso8601->_format_is_iso(format)
A:pandas.core.tools.datetimes.(values, tz)->pandas._libs.tslib.datetime_to_datetime64(arg)
A:pandas.core.tools.datetimes.j0->pandas._libs.tslib.Timestamp(0).to_julian_date()
A:pandas.core.tools.datetimes.values->_convert_listlike(arg._values, format)
A:pandas.core.tools.datetimes.req->sorted(list(set(required) - set(unit_rev.keys())))
A:pandas.core.tools.datetimes.excess->sorted(list(set(unit_rev.keys()) - set(_unit_map.values())))
A:pandas.core.tools.datetimes.value->unit_rev.get(u)
A:pandas.core.tools.datetimes.carg->_ensure_object(arg).astype(np.float64)
A:pandas.core.tools.datetimes.parsed->pandas._libs.lib.try_parse_year_month_day(carg / 10000, carg / 100 % 100, carg % 100)
A:pandas.core.tools.datetimes.iresult->numpy.empty(carg.shape, dtype='M8[ns]').view('i8')
A:pandas.core.tools.datetimes.result[mask]->calc(carg[mask].astype(np.float64).astype(np.int64)).astype('M8[ns]')
A:pandas.core.tools.datetimes.dayfirst->get_option('display.date_dayfirst')
A:pandas.core.tools.datetimes.yearfirst->get_option('display.date_yearfirst')
A:pandas.core.tools.datetimes.time_object->datetime.datetime.strptime(element, time_format).time()
A:pandas.core.tools.datetimes.fmt->formats.pop(formats.index(time_format))
A:pandas.core.tools.datetimes.OLE_TIME_ZERO->datetime(1899, 12, 30, 0, 0, 0)
A:pandas.core.tools.datetimes.val->float(oledt)
pandas.core.tools.datetimes._assemble_from_unit_mappings(arg,errors)
pandas.core.tools.datetimes._attempt_YYYYMMDD(arg,errors)
pandas.core.tools.datetimes._format_is_iso(f)
pandas.core.tools.datetimes._guess_datetime_format(dt_str,dayfirst=False,dt_str_parse=compat.parse_date,dt_str_split=_DATEUTIL_LEXER_SPLIT)
pandas.core.tools.datetimes._guess_datetime_format_for_array(arr,**kwargs)
pandas.core.tools.datetimes._guess_time_format_for_array(arr)
pandas.core.tools.datetimes._infer_tzinfo(start,end)
pandas.core.tools.datetimes.format(dt)
pandas.core.tools.datetimes.ole2datetime(oledt)
pandas.core.tools.datetimes.parse_time_string(arg,freq=None,dayfirst=None,yearfirst=None)
pandas.core.tools.datetimes.to_datetime(arg,errors='raise',dayfirst=False,yearfirst=False,utc=None,box=True,format=None,exact=True,unit=None,infer_datetime_format=False,origin='unix')
pandas.core.tools.datetimes.to_time(arg,format=None,infer_time_format=False,errors='raise')


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/tools/timedeltas.py----------------------------------------
A:pandas.core.tools.timedeltas.unit->_validate_timedelta_unit(unit)
A:pandas.core.tools.timedeltas.values->_convert_listlike(arg._values, unit=unit, box=False, errors=errors)
A:pandas.core.tools.timedeltas.result->pandas._libs.tslib.Timedelta(result)
A:pandas.core.tools.timedeltas.arg->numpy.array(list(arg), dtype='O')
A:pandas.core.tools.timedeltas.value->TimedeltaIndex(value, unit='ns', name=name)
pandas.core.tools.timedeltas._coerce_scalar_to_timedelta_type(r,unit='ns',box=True,errors='raise')
pandas.core.tools.timedeltas._convert_listlike(arg,unit='ns',box=True,errors='raise',name=None)
pandas.core.tools.timedeltas._validate_timedelta_unit(arg)
pandas.core.tools.timedeltas.to_timedelta(arg,unit='ns',box=True,errors='raise')


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/tools/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/computation/pytables.py----------------------------------------
A:pandas.core.computation.pytables.res->pr(left.prune(klass), right.prune(klass))
A:pandas.core.computation.pytables.rhs->self.conform(self.rhs)
A:pandas.core.computation.pytables.val->bool(v).tostring(self.encoding)
A:pandas.core.computation.pytables.encoder->partial(pprint_thing_encoded, encoding=self.encoding)
A:pandas.core.computation.pytables.kind->_ensure_decoded(self.kind)
A:pandas.core.computation.pytables.meta->_ensure_decoded(self.meta)
A:pandas.core.computation.pytables.v->bool(v)
A:pandas.core.computation.pytables.metadata->pandas.core.common._values_from_object(self.metadata)
A:pandas.core.computation.pytables.result->pandas.core.common._values_from_object(self.metadata).searchsorted(v, side='left')
A:pandas.core.computation.pytables.f->list(self.filter)
A:pandas.core.computation.pytables.f[1]->self.generate_filter_op(invert=True)
A:pandas.core.computation.pytables.self.filter->self.terms.prune(FilterBinOp)
A:pandas.core.computation.pytables.filter_op->self.generate_filter_op()
A:pandas.core.computation.pytables.self.condition->self.terms.prune(ConditionBinOp)
A:pandas.core.computation.pytables.operand->operand.prune(klass).prune(klass)
A:pandas.core.computation.pytables.cmpr->ast.Compare(ops=[ast.Eq()], left=node.targets[0], comparators=[node.value])
A:pandas.core.computation.pytables.value->self.visit(node.value)
A:pandas.core.computation.pytables.slobj->self.visit(node.slice)
A:pandas.core.computation.pytables.resolved->self.visit(value)
A:pandas.core.computation.pytables.where->' & '.join(['(%s)' % w for w in where])
A:pandas.core.computation.pytables.local_dict->DeepChainMap()
A:pandas.core.computation.pytables.w->_validate_where(w)
A:pandas.core.computation.pytables.self.env->Scope(scope_level + 1, local_dict=local_dict)
A:pandas.core.computation.pytables.self._visitor->ExprVisitor(self.env, queryables=queryables, parser='pytables', engine='pytables', encoding=encoding)
A:pandas.core.computation.pytables.self.terms->self.parse()
pandas.core.computation.pytables.BinOp(self,op,lhs,rhs,queryables,encoding)
pandas.core.computation.pytables.BinOp.__init__(self,op,lhs,rhs,queryables,encoding)
pandas.core.computation.pytables.BinOp._disallow_scalar_only_bool_ops(self)
pandas.core.computation.pytables.BinOp.conform(self,rhs)
pandas.core.computation.pytables.BinOp.convert_value(self,v)
pandas.core.computation.pytables.BinOp.convert_values(self)
pandas.core.computation.pytables.BinOp.generate(self,v)
pandas.core.computation.pytables.BinOp.is_in_table(self)
pandas.core.computation.pytables.BinOp.is_valid(self)
pandas.core.computation.pytables.BinOp.kind(self)
pandas.core.computation.pytables.BinOp.meta(self)
pandas.core.computation.pytables.BinOp.metadata(self)
pandas.core.computation.pytables.BinOp.prune(self,klass)
pandas.core.computation.pytables.ConditionBinOp(BinOp)
pandas.core.computation.pytables.ConditionBinOp.__unicode__(self)
pandas.core.computation.pytables.ConditionBinOp.evaluate(self)
pandas.core.computation.pytables.ConditionBinOp.format(self)
pandas.core.computation.pytables.ConditionBinOp.invert(self)
pandas.core.computation.pytables.Constant(self,value,env,side=None,encoding=None)
pandas.core.computation.pytables.Constant.__init__(self,value,env,side=None,encoding=None)
pandas.core.computation.pytables.Constant._resolve_name(self)
pandas.core.computation.pytables.Expr(self,where,queryables=None,encoding=None,scope_level=0)
pandas.core.computation.pytables.Expr.__init__(self,where,queryables=None,encoding=None,scope_level=0)
pandas.core.computation.pytables.Expr.__unicode__(self)
pandas.core.computation.pytables.Expr.evaluate(self)
pandas.core.computation.pytables.ExprVisitor(self,env,engine,parser,**kwargs)
pandas.core.computation.pytables.ExprVisitor.__init__(self,env,engine,parser,**kwargs)
pandas.core.computation.pytables.ExprVisitor._rewrite_membership_op(self,node,left,right)
pandas.core.computation.pytables.ExprVisitor.translate_In(self,op)
pandas.core.computation.pytables.ExprVisitor.visit_Assign(self,node,**kwargs)
pandas.core.computation.pytables.ExprVisitor.visit_Attribute(self,node,**kwargs)
pandas.core.computation.pytables.ExprVisitor.visit_Index(self,node,**kwargs)
pandas.core.computation.pytables.ExprVisitor.visit_Subscript(self,node,**kwargs)
pandas.core.computation.pytables.ExprVisitor.visit_UnaryOp(self,node,**kwargs)
pandas.core.computation.pytables.FilterBinOp(BinOp)
pandas.core.computation.pytables.FilterBinOp.__unicode__(self)
pandas.core.computation.pytables.FilterBinOp.evaluate(self)
pandas.core.computation.pytables.FilterBinOp.format(self)
pandas.core.computation.pytables.FilterBinOp.generate_filter_op(self,invert=False)
pandas.core.computation.pytables.FilterBinOp.invert(self)
pandas.core.computation.pytables.JointConditionBinOp(ConditionBinOp)
pandas.core.computation.pytables.JointConditionBinOp.evaluate(self)
pandas.core.computation.pytables.JointFilterBinOp(FilterBinOp)
pandas.core.computation.pytables.JointFilterBinOp.evaluate(self)
pandas.core.computation.pytables.JointFilterBinOp.format(self)
pandas.core.computation.pytables.Scope(self,level,global_dict=None,local_dict=None,queryables=None)
pandas.core.computation.pytables.Scope.__init__(self,level,global_dict=None,local_dict=None,queryables=None)
pandas.core.computation.pytables.Term(self,name,env,side=None,encoding=None)
pandas.core.computation.pytables.Term.__init__(self,name,env,side=None,encoding=None)
pandas.core.computation.pytables.Term._resolve_name(self)
pandas.core.computation.pytables.Term.value(self)
pandas.core.computation.pytables.TermValue(self,value,converted,kind)
pandas.core.computation.pytables.TermValue.__init__(self,value,converted,kind)
pandas.core.computation.pytables.TermValue.tostring(self,encoding)
pandas.core.computation.pytables.UnaryOp(ops.UnaryOp)
pandas.core.computation.pytables.UnaryOp.prune(self,klass)
pandas.core.computation.pytables._validate_where(w)
pandas.core.computation.pytables.maybe_expression(s)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/computation/align.py----------------------------------------
A:pandas.core.computation.align.typ->type(terms.value)
A:pandas.core.computation.align.ndims->pandas.Series(dict(zip(term_index, term_dims)))
A:pandas.core.computation.align.naxes->len(axes)
A:pandas.core.computation.align.is_series->isinstance(value, pd.Series)
A:pandas.core.computation.align.axes[ax]->axes[ax].join(itm, how='outer').join(itm, how='outer')
A:pandas.core.computation.align.term_axis_size->len(ti.axes[axis])
A:pandas.core.computation.align.reindexer_size->len(reindexer)
A:pandas.core.computation.align.ordm->numpy.log10(max(1, abs(reindexer_size - term_axis_size)))
A:pandas.core.computation.align.f->partial(ti.reindex_axis, reindexer, axis=axis, copy=False)
A:pandas.core.computation.align.terms->list(flatten(terms))
A:pandas.core.computation.align.(typ, axes)->_align_core(terms)
A:pandas.core.computation.align.res_t->numpy.result_type(obj.dtype, dtype)
A:pandas.core.computation.align.ret_value->numpy.array([ret_value]).astype(res_t)
pandas.core.computation.align._align(terms)
pandas.core.computation.align._align_core(terms)
pandas.core.computation.align._align_core_single_unary_op(term)
pandas.core.computation.align._any_pandas_objects(terms)
pandas.core.computation.align._filter_special_cases(f)
pandas.core.computation.align._reconstruct_object(typ,obj,axes,dtype)
pandas.core.computation.align._zip_axes_from_type(typ,new_axes)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/computation/engines.py----------------------------------------
A:pandas.core.computation.engines._ne_builtins->frozenset(_mathops + _reductions)
A:pandas.core.computation.engines.s->self.convert()
A:pandas.core.computation.engines.(self.result_type, self.aligned_axes)->_align(self.expr.terms)
A:pandas.core.computation.engines.res->self._evaluate()
A:pandas.core.computation.engines.msg->pandas.compat.text_type(e)
pandas.core.computation.engines.AbstractEngine(self,expr)
pandas.core.computation.engines.AbstractEngine.__init__(self,expr)
pandas.core.computation.engines.AbstractEngine._evaluate(self)
pandas.core.computation.engines.AbstractEngine._is_aligned(self)
pandas.core.computation.engines.AbstractEngine.convert(self)
pandas.core.computation.engines.AbstractEngine.evaluate(self)
pandas.core.computation.engines.NumExprClobberingError(NameError)
pandas.core.computation.engines.NumExprEngine(self,expr)
pandas.core.computation.engines.NumExprEngine.__init__(self,expr)
pandas.core.computation.engines.NumExprEngine._evaluate(self)
pandas.core.computation.engines.NumExprEngine.convert(self)
pandas.core.computation.engines.PythonEngine(self,expr)
pandas.core.computation.engines.PythonEngine.__init__(self,expr)
pandas.core.computation.engines.PythonEngine._evaluate(self)
pandas.core.computation.engines.PythonEngine.evaluate(self)
pandas.core.computation.engines._check_ne_builtin_clash(expr)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/computation/expr.py----------------------------------------
A:pandas.core.computation.expr._is_list->_is_type(list)
A:pandas.core.computation.expr._is_str->_is_type(string_types)
A:pandas.core.computation.expr._all_nodes->frozenset(filter(lambda x: isinstance(x, type) and issubclass(x, ast.AST), (getattr(ast, node) for node in dir(ast))))
A:pandas.core.computation.expr._all_node_names->frozenset(map(lambda x: x.__name__, _all_nodes))
A:pandas.core.computation.expr._mod_nodes->_filter_nodes(ast.mod)
A:pandas.core.computation.expr._stmt_nodes->_filter_nodes(ast.stmt)
A:pandas.core.computation.expr._expr_nodes->_filter_nodes(ast.expr)
A:pandas.core.computation.expr._expr_context_nodes->_filter_nodes(ast.expr_context)
A:pandas.core.computation.expr._slice_nodes->_filter_nodes(ast.slice)
A:pandas.core.computation.expr._boolop_nodes->_filter_nodes(ast.boolop)
A:pandas.core.computation.expr._operator_nodes->_filter_nodes(ast.operator)
A:pandas.core.computation.expr._unary_op_nodes->_filter_nodes(ast.unaryop)
A:pandas.core.computation.expr._cmp_op_nodes->_filter_nodes(ast.cmpop)
A:pandas.core.computation.expr._comprehension_nodes->_filter_nodes(ast.comprehension)
A:pandas.core.computation.expr._handler_nodes->_filter_nodes(ast.excepthandler)
A:pandas.core.computation.expr._arguments_nodes->_filter_nodes(ast.arguments)
A:pandas.core.computation.expr._keyword_nodes->_filter_nodes(ast.keyword)
A:pandas.core.computation.expr._alias_nodes->_filter_nodes(ast.alias)
A:pandas.core.computation.expr._hacked_nodes->frozenset(['Assign', 'Module', 'Expr'])
A:pandas.core.computation.expr._unsupported_expr_nodes->frozenset(['Yield', 'GeneratorExp', 'IfExp', 'DictComp', 'SetComp', 'Repr', 'Lambda', 'Set', 'AST', 'Is', 'IsNot'])
A:pandas.core.computation.expr._msg->'cannot both support and not support {0}'.format(_unsupported_nodes & _base_supported_nodes)
A:pandas.core.computation.expr.new_method->_node_not_implemented(node, cls)
A:pandas.core.computation.expr.name->self.env.add_tmp(v)
A:pandas.core.computation.expr.ops->getattr(cls, '{0}_ops'.format(op_attr_name))
A:pandas.core.computation.expr.ops_map->getattr(cls, '{0}_op_nodes_map'.format(op_attr_name))
A:pandas.core.computation.expr.made_op->_op_maker(op_class, op)
A:pandas.core.computation.expr.binary_op_nodes_map->dict(zip(binary_ops, binary_op_nodes))
A:pandas.core.computation.expr.unary_op_nodes_map->dict(zip(unary_ops, unary_op_nodes))
A:pandas.core.computation.expr.clean->self.preparser(node)
A:pandas.core.computation.expr.node->ast.fix_missing_locations(ast.parse(clean))
A:pandas.core.computation.expr.visitor->getattr(self, method)
A:pandas.core.computation.expr.op_type->type(op_instance)
A:pandas.core.computation.expr.(left_list, right_list)->map(_is_list, (left, right))
A:pandas.core.computation.expr.(left_str, right_str)->map(_is_str, (left, right))
A:pandas.core.computation.expr.op_instance->self.rewrite_map[op_type]()
A:pandas.core.computation.expr.right->self.term_type(name, self.env)
A:pandas.core.computation.expr.left->self.term_type(name, self.env)
A:pandas.core.computation.expr.op->self.translate_In(ops[0])
A:pandas.core.computation.expr.(op, op_class, left, right)->self._maybe_transform_eq_ne(node)
A:pandas.core.computation.expr.f32->numpy.dtype(np.float32)
A:pandas.core.computation.expr.res->FuncNode(node.func.id)
A:pandas.core.computation.expr.(left, right)->self._maybe_downcast_constants(left, right)
A:pandas.core.computation.expr.operand->self.visit(node.operand)
A:pandas.core.computation.expr.value->self.visit(node.value)
A:pandas.core.computation.expr.slobj->self.visit(node.slice)
A:pandas.core.computation.expr.result->pandas.eval(slobj, local_dict=self.env, engine=self.engine, parser=self.parser)
A:pandas.core.computation.expr.lhs->self._try_visit_binop(x)
A:pandas.core.computation.expr.assigner->self.visit(node.targets[0], **kwargs)
A:pandas.core.computation.expr.self.assigner->getattr(assigner, 'name', assigner)
A:pandas.core.computation.expr.v->getattr(resolved, attr)
A:pandas.core.computation.expr.binop->ast.BinOp(op=op, left=node.left, right=comps[0])
A:pandas.core.computation.expr.new_node->self.visit(ast.Compare(comparators=[comp], left=left, ops=[self.translate_In(op)]))
A:pandas.core.computation.expr.rhs->self._try_visit_binop(y)
A:pandas.core.computation.expr.(op, op_class, lhs, rhs)->self._maybe_transform_eq_ne(node, lhs, rhs)
A:pandas.core.computation.expr._python_not_supported->frozenset(['Dict', 'BoolOp', 'In', 'NotIn'])
A:pandas.core.computation.expr._numexpr_supported_calls->frozenset(_reductions + _mathops)
A:pandas.core.computation.expr.self._visitor->_parsers[parser](self.env, self.engine, self.parser)
A:pandas.core.computation.expr.self.terms->self.parse()
pandas.core.computation.expr.BaseExprVisitor(self,env,engine,parser,preparser=_preparse)
pandas.core.computation.expr.BaseExprVisitor.__init__(self,env,engine,parser,preparser=_preparse)
pandas.core.computation.expr.BaseExprVisitor._maybe_downcast_constants(self,left,right)
pandas.core.computation.expr.BaseExprVisitor._maybe_eval(self,binop,eval_in_python)
pandas.core.computation.expr.BaseExprVisitor._maybe_evaluate_binop(self,op,op_class,lhs,rhs,eval_in_python=('in','notin'),maybe_eval_in_python=('==','!=','<','>','<=','>='))
pandas.core.computation.expr.BaseExprVisitor._maybe_transform_eq_ne(self,node,left=None,right=None)
pandas.core.computation.expr.BaseExprVisitor._rewrite_membership_op(self,node,left,right)
pandas.core.computation.expr.BaseExprVisitor._try_visit_binop(self,bop)
pandas.core.computation.expr.BaseExprVisitor.translate_In(self,op)
pandas.core.computation.expr.BaseExprVisitor.visit(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Assign(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Attribute(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_BinOp(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_BoolOp(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Call_35(self,node,side=None,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Call_legacy(self,node,side=None,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Compare(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Div(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Expr(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Index(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_List(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Module(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Name(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_NameConstant(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Num(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Slice(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Str(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_Subscript(self,node,**kwargs)
pandas.core.computation.expr.BaseExprVisitor.visit_UnaryOp(self,node,**kwargs)
pandas.core.computation.expr.Expr(self,expr,engine='numexpr',parser='pandas',env=None,truediv=True,level=0)
pandas.core.computation.expr.Expr.__init__(self,expr,engine='numexpr',parser='pandas',env=None,truediv=True,level=0)
pandas.core.computation.expr.Expr.__len__(self)
pandas.core.computation.expr.Expr.__unicode__(self)
pandas.core.computation.expr.Expr.assigner(self)
pandas.core.computation.expr.Expr.names(self)
pandas.core.computation.expr.Expr.parse(self)
pandas.core.computation.expr.PandasExprVisitor(self,env,engine,parser,preparser=partial(_preparse,f=compose(_replace_locals,_replace_booleans)))
pandas.core.computation.expr.PandasExprVisitor.__init__(self,env,engine,parser,preparser=partial(_preparse,f=compose(_replace_locals,_replace_booleans)))
pandas.core.computation.expr.PythonExprVisitor(self,env,engine,parser,preparser=lambdax:x)
pandas.core.computation.expr.PythonExprVisitor.__init__(self,env,engine,parser,preparser=lambdax:x)
pandas.core.computation.expr._filter_nodes(superclass,all_nodes=_all_nodes)
pandas.core.computation.expr._is_type(t)
pandas.core.computation.expr._node_not_implemented(node_name,cls)
pandas.core.computation.expr._op_maker(op_class,op_symbol)
pandas.core.computation.expr._preparse(source,f=compose(_replace_locals,_replace_booleans,_rewrite_assign))
pandas.core.computation.expr._replace_booleans(tok)
pandas.core.computation.expr._replace_locals(tok)
pandas.core.computation.expr._rewrite_assign(tok)
pandas.core.computation.expr.add_ops(op_classes)
pandas.core.computation.expr.disallow(nodes)
pandas.core.computation.expr.tokenize_string(source)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/computation/eval.py----------------------------------------
A:pandas.core.computation.eval.s->pprint_thing(expr)
A:pandas.core.computation.eval.inplace->validate_bool_kwarg(inplace, 'inplace')
A:pandas.core.computation.eval.expr->_convert_expression(expr)
A:pandas.core.computation.eval.engine->_check_engine(engine)
A:pandas.core.computation.eval.env->_ensure_scope(level + 1, global_dict=global_dict, local_dict=local_dict, resolvers=resolvers, target=target)
A:pandas.core.computation.eval.parsed_expr->Expr(expr, engine=engine, parser=parser, env=env, truediv=truediv)
A:pandas.core.computation.eval.eng_inst->eng(parsed_expr)
A:pandas.core.computation.eval.ret->eng(parsed_expr).evaluate()
A:pandas.core.computation.eval.target->_ensure_scope(level + 1, global_dict=global_dict, local_dict=local_dict, resolvers=resolvers, target=target).target.copy()
pandas.core.computation.eval._check_engine(engine)
pandas.core.computation.eval._check_expression(expr)
pandas.core.computation.eval._check_for_locals(expr,stack_level,parser)
pandas.core.computation.eval._check_parser(parser)
pandas.core.computation.eval._check_resolvers(resolvers)
pandas.core.computation.eval._convert_expression(expr)
pandas.core.computation.eval.eval(expr,parser='pandas',engine=None,truediv=True,local_dict=None,global_dict=None,resolvers=(),level=0,target=None,inplace=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/computation/common.py----------------------------------------
A:pandas.core.computation.common.s->s.decode(pd.get_option('display.encoding')).decode(pd.get_option('display.encoding'))
pandas.core.computation.common.NameResolutionError(NameError)
pandas.core.computation.common._ensure_decoded(s)
pandas.core.computation.common._result_type_many(*arrays_and_dtypes)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/computation/expressions.py----------------------------------------
A:pandas.core.computation.expressions.n->numexpr.detect_number_of_cores()
A:pandas.core.computation.expressions.dtypes->set()
A:pandas.core.computation.expressions.s->o.get_dtype_counts()
A:pandas.core.computation.expressions.a_value->getattr(a, 'values', a)
A:pandas.core.computation.expressions.b_value->getattr(b, 'values', b)
A:pandas.core.computation.expressions.result->_where_standard(cond, a, b, raise_on_error)
A:pandas.core.computation.expressions.cond_value->getattr(cond, 'values', cond)
pandas.core.computation.expressions._bool_arith_check(op_str,a,b,not_allowed=frozenset(('/','//','**')),unsupported=None)
pandas.core.computation.expressions._can_use_numexpr(op,op_str,a,b,dtype_check)
pandas.core.computation.expressions._evaluate_numexpr(op,op_str,a,b,raise_on_error=False,truediv=True,reversed=False,**eval_kwargs)
pandas.core.computation.expressions._evaluate_standard(op,op_str,a,b,raise_on_error=True,**eval_kwargs)
pandas.core.computation.expressions._has_bool_dtype(x)
pandas.core.computation.expressions._store_test_result(used_numexpr)
pandas.core.computation.expressions._where_numexpr(cond,a,b,raise_on_error=False)
pandas.core.computation.expressions._where_standard(cond,a,b,raise_on_error=True)
pandas.core.computation.expressions.evaluate(op,op_str,a,b,raise_on_error=False,use_numexpr=True,**eval_kwargs)
pandas.core.computation.expressions.get_test_result()
pandas.core.computation.expressions.set_numexpr_threads(n=None)
pandas.core.computation.expressions.set_test_mode(v=True)
pandas.core.computation.expressions.set_use_numexpr(v=True)
pandas.core.computation.expressions.where(cond,a,b,raise_on_error=False,use_numexpr=True)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/computation/ops.py----------------------------------------
A:pandas.core.computation.ops.tname->text_type(name)
A:pandas.core.computation.ops.self._value->self._resolve_name()
A:pandas.core.computation.ops.res->pandas.eval(self, local_dict=env, engine=engine, parser=parser)
A:pandas.core.computation.ops.self.op->_bool_op_map.get(op, op)
A:pandas.core.computation.ops.self.encoding->kwargs.get('encoding', None)
A:pandas.core.computation.ops.obj_dtype_set->frozenset([np.dtype('object')])
A:pandas.core.computation.ops._cmp_ops_dict->dict(zip(_cmp_ops_syms, _cmp_ops_funcs))
A:pandas.core.computation.ops._bool_ops_dict->dict(zip(_bool_ops_syms, _bool_ops_funcs))
A:pandas.core.computation.ops._arith_ops_dict->dict(zip(_arith_ops_syms, _arith_ops_funcs))
A:pandas.core.computation.ops._special_case_arith_ops_dict->dict(zip(_special_case_arith_ops_syms, _special_case_arith_ops_funcs))
A:pandas.core.computation.ops.dt->numpy.dtype(dtype)
A:pandas.core.computation.ops.new_value->numpy.dtype(dtype).type(term.value)
A:pandas.core.computation.ops.keys->list(_binary_ops_dict.keys())
A:pandas.core.computation.ops.left->self.lhs.evaluate(env, engine=engine, parser=parser, term_type=term_type, eval_in_python=eval_in_python)
A:pandas.core.computation.ops.right->self.rhs.evaluate(env, engine=engine, parser=parser, term_type=term_type, eval_in_python=eval_in_python)
A:pandas.core.computation.ops.name->env.add_tmp(res)
A:pandas.core.computation.ops.encoder->partial(pprint_thing_encoded, encoding=self.encoding)
A:pandas.core.computation.ops.v->v.tz_convert('UTC').tz_convert('UTC')
A:pandas.core.computation.ops._unary_ops_dict->dict(zip(_unary_ops_syms, _unary_ops_funcs))
A:pandas.core.computation.ops.operand->self.operand(env)
A:pandas.core.computation.ops.operands->map(str, self.operands)
A:pandas.core.computation.ops.self.func->getattr(np, name)
pandas.core.computation.ops.BinOp(self,op,lhs,rhs,**kwargs)
pandas.core.computation.ops.BinOp.__init__(self,op,lhs,rhs,**kwargs)
pandas.core.computation.ops.BinOp._disallow_scalar_only_bool_ops(self)
pandas.core.computation.ops.BinOp.convert_values(self)
pandas.core.computation.ops.BinOp.evaluate(self,env,engine,parser,term_type,eval_in_python)
pandas.core.computation.ops.Constant(self,value,env,side=None,encoding=None)
pandas.core.computation.ops.Constant.__init__(self,value,env,side=None,encoding=None)
pandas.core.computation.ops.Constant.__unicode__(self)
pandas.core.computation.ops.Constant._resolve_name(self)
pandas.core.computation.ops.Constant.name(self)
pandas.core.computation.ops.Div(self,lhs,rhs,truediv,*args,**kwargs)
pandas.core.computation.ops.Div.__init__(self,lhs,rhs,truediv,*args,**kwargs)
pandas.core.computation.ops.FuncNode(self,name)
pandas.core.computation.ops.FuncNode.__init__(self,name)
pandas.core.computation.ops.MathCall(self,func,args)
pandas.core.computation.ops.MathCall.__init__(self,func,args)
pandas.core.computation.ops.MathCall.__unicode__(self)
pandas.core.computation.ops.Op(self,op,operands,*args,**kwargs)
pandas.core.computation.ops.Op.__init__(self,op,operands,*args,**kwargs)
pandas.core.computation.ops.Op.__iter__(self)
pandas.core.computation.ops.Op.__unicode__(self)
pandas.core.computation.ops.Op.has_invalid_return_type(self)
pandas.core.computation.ops.Op.is_datetime(self)
pandas.core.computation.ops.Op.isscalar(self)
pandas.core.computation.ops.Op.operand_types(self)
pandas.core.computation.ops.Op.return_type(self)
pandas.core.computation.ops.Term(self,name,env,side=None,encoding=None)
pandas.core.computation.ops.Term.__init__(self,name,env,side=None,encoding=None)
pandas.core.computation.ops.Term.__unicode__(self)
pandas.core.computation.ops.Term._resolve_name(self)
pandas.core.computation.ops.Term.evaluate(self,*args,**kwargs)
pandas.core.computation.ops.Term.is_datetime(self)
pandas.core.computation.ops.Term.isscalar(self)
pandas.core.computation.ops.Term.local_name(self)
pandas.core.computation.ops.Term.name(self)
pandas.core.computation.ops.Term.name(self,new_name)
pandas.core.computation.ops.Term.ndim(self)
pandas.core.computation.ops.Term.raw(self)
pandas.core.computation.ops.Term.type(self)
pandas.core.computation.ops.Term.update(self,value)
pandas.core.computation.ops.Term.value(self)
pandas.core.computation.ops.Term.value(self,new_value)
pandas.core.computation.ops.UnaryOp(self,op,operand)
pandas.core.computation.ops.UnaryOp.__init__(self,op,operand)
pandas.core.computation.ops.UnaryOp.__unicode__(self)
pandas.core.computation.ops.UnaryOp.return_type(self)
pandas.core.computation.ops.UndefinedVariableError(self,name,is_local)
pandas.core.computation.ops.UndefinedVariableError.__init__(self,name,is_local)
pandas.core.computation.ops._cast_inplace(terms,acceptable_dtypes,dtype)
pandas.core.computation.ops._in(x,y)
pandas.core.computation.ops._not_in(x,y)
pandas.core.computation.ops.is_term(obj)
pandas.core.computation.ops.isnumeric(dtype)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/computation/scope.py----------------------------------------
A:pandas.core.computation.scope.hexin->ord(x)
A:pandas.core.computation.scope.packed->struct.pack('@P', id(obj))
A:pandas.core.computation.scope.sio->StringIO()
A:pandas.core.computation.scope.self.scope->self.scope.new_child(d)
A:pandas.core.computation.scope.frame->sys._getframe(self.level)
A:pandas.core.computation.scope.self.resolvers->DeepChainMap(*resolvers)
A:pandas.core.computation.scope.scope_keys->_get_pretty_string(list(self.scope.keys()))
A:pandas.core.computation.scope.res_keys->_get_pretty_string(list(self.resolvers.keys()))
A:pandas.core.computation.scope.variables->itertools.product(scopes, stack)
A:pandas.core.computation.scope.d->getattr(frame, 'f_' + scope)
A:pandas.core.computation.scope.stack->inspect.stack()
A:pandas.core.computation.scope.name->'{0}_{1}_{2}'.format(type(value).__name__, self.ntemps, _raw_hex_id(self))
pandas.core.computation.scope.Scope(self,level,global_dict=None,local_dict=None,resolvers=(),target=None)
pandas.core.computation.scope.Scope.__init__(self,level,global_dict=None,local_dict=None,resolvers=(),target=None)
pandas.core.computation.scope.Scope.__unicode__(self)
pandas.core.computation.scope.Scope._get_vars(self,stack,scopes)
pandas.core.computation.scope.Scope.add_tmp(self,value)
pandas.core.computation.scope.Scope.full_scope(self)
pandas.core.computation.scope.Scope.has_resolvers(self)
pandas.core.computation.scope.Scope.ntemps(self)
pandas.core.computation.scope.Scope.resolve(self,key,is_local)
pandas.core.computation.scope.Scope.swapkey(self,old_key,new_key,new_value=None)
pandas.core.computation.scope.Scope.update(self,level)
pandas.core.computation.scope._ensure_scope(level,global_dict=None,local_dict=None,resolvers=(),target=None,**kwargs)
pandas.core.computation.scope._get_pretty_string(obj)
pandas.core.computation.scope._raw_hex_id(obj)
pandas.core.computation.scope._replacer(x)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/computation/api.py----------------------------------------
pandas.Expr(*args,**kwargs)
pandas.core.computation.api.Expr(*args,**kwargs)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/computation/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/util/hashing.py----------------------------------------
A:pandas.core.util.hashing.first->next(arrays)
A:pandas.core.util.hashing.arrays->itertools.chain([h], index_iter)
A:pandas.core.util.hashing.mult->numpy.uint64(1000003)
A:pandas.core.util.hashing.h->_combine_hash_arrays(hashes, len(vals))
A:pandas.core.util.hashing.num_items->len(obj.columns)
A:pandas.core.util.hashing.hashes->itertools.chain(hashes, index_hash_generator)
A:pandas.core.util.hashing.vals->pandas._libs.hashing.hash_object_array(vals.astype(str).astype(object), hash_key, encoding)
A:pandas.core.util.hashing.hashed->hash_array(c.categories.values, encoding, hash_key, categorize=False)
A:pandas.core.util.hashing.mask->c.isnull()
A:pandas.core.util.hashing.result->numpy.zeros(len(mask), dtype='uint64')
A:pandas.core.util.hashing.(codes, categories)->factorize(vals, sort=False)
A:pandas.core.util.hashing.cat->Categorical(codes, Index(categories), ordered=False, fastpath=True)
pandas.core.util.hashing._combine_hash_arrays(arrays,num_items)
pandas.core.util.hashing._hash_categorical(c,encoding,hash_key)
pandas.core.util.hashing.hash_array(vals,encoding='utf8',hash_key=None,categorize=True)
pandas.core.util.hashing.hash_pandas_object(obj,index=True,encoding='utf8',hash_key=None,categorize=True)
pandas.core.util.hashing.hash_tuples(vals,encoding='utf8',hash_key=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/util/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/sparse/scipy_sparse.py----------------------------------------
A:pandas.core.sparse.scipy_sparse.whole->set(whole)
A:pandas.core.sparse.scipy_sparse.nonnull_labels->ss.dropna()
A:pandas.core.sparse.scipy_sparse.labels->sorted(list(labels))
A:pandas.core.sparse.scipy_sparse.d->OrderedDict(((k, i) for (i, k) in enumerate(labels)))
A:pandas.core.sparse.scipy_sparse.ilabels->list(zip(*[robust_get_level_values(i) for i in subset]))
A:pandas.core.sparse.scipy_sparse.labels_to_i->_get_index_subset_to_coord_dict(ss.index, levels, sort_labels=sort_labels)
A:pandas.core.sparse.scipy_sparse.labels_to_i.index->pandas.core.index.MultiIndex.from_tuples(labels_to_i.index)
A:pandas.core.sparse.scipy_sparse.i_coord->labels_to_i[values_ilabels].tolist()
A:pandas.core.sparse.scipy_sparse.i_labels->_get_index_subset_to_coord_dict(ss.index, levels, sort_labels=sort_labels).index.tolist()
A:pandas.core.sparse.scipy_sparse.(i_coord, i_labels)->get_indexers(row_levels)
A:pandas.core.sparse.scipy_sparse.(j_coord, j_labels)->get_indexers(column_levels)
A:pandas.core.sparse.scipy_sparse.(v, i, j, rows, columns)->_to_ijv(ss, row_levels=row_levels, column_levels=column_levels, sort_labels=sort_labels)
A:pandas.core.sparse.scipy_sparse.sparse_matrix->scipy.sparse.coo_matrix((v, (i, j)), shape=(len(rows), len(columns)))
A:pandas.core.sparse.scipy_sparse.s->s.reindex_axis(ind).reindex_axis(ind)
A:pandas.core.sparse.scipy_sparse.i->range(A.shape[0])
A:pandas.core.sparse.scipy_sparse.j->range(A.shape[1])
A:pandas.core.sparse.scipy_sparse.ind->pandas.core.index.MultiIndex.from_product([i, j])
pandas.core.sparse.scipy_sparse._check_is_partition(parts,whole)
pandas.core.sparse.scipy_sparse._coo_to_sparse_series(A,dense_index=False)
pandas.core.sparse.scipy_sparse._sparse_series_to_coo(ss,row_levels=(0,),column_levels=(1,),sort_labels=False)
pandas.core.sparse.scipy_sparse._to_ijv(ss,row_levels=(0,),column_levels=(1,),sort_labels=False)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/sparse/array.py----------------------------------------
A:pandas.core.sparse.array._sparray_doc_kwargs->dict(klass='SparseArray')
A:pandas.core.sparse.array.dtype->numpy.dtype(dtype)
A:pandas.core.sparse.array.other->SparseArray(other, fill_value=self.fill_value, dtype=dtype)
A:pandas.core.sparse.array.fill->op(_get_fill(left), _get_fill(right))
A:pandas.core.sparse.array.result->pandas.Series(counts, index=keys)
A:pandas.core.sparse.array.left->left.astype(dtype).astype(dtype)
A:pandas.core.sparse.array.right->right.astype(dtype).astype(dtype)
A:pandas.core.sparse.array.opname->'sparse_{name}_{dtype}'.format(name=name, dtype=dtype)
A:pandas.core.sparse.array.left_sp_values->left.astype(dtype).astype(dtype).sp_values.view(np.uint8)
A:pandas.core.sparse.array.right_sp_values->right.astype(dtype).astype(dtype).sp_values.view(np.uint8)
A:pandas.core.sparse.array.sparse_op->getattr(splib, opname)
A:pandas.core.sparse.array.(result, index, fill)->sparse_op(left_sp_values, left.sp_index, left.fill_value, right_sp_values, right.sp_index, right.fill_value)
A:pandas.core.sparse.array.fill_value->na_value_for_dtype(arr.dtype)
A:pandas.core.sparse.array.values->self.sp_values.copy()
A:pandas.core.sparse.array.is_sparse_array->isinstance(data, SparseArray)
A:pandas.core.sparse.array.data->data.astype(float).astype(float)
A:pandas.core.sparse.array.res->make_sparse(data, kind=kind, fill_value=fill_value)
A:pandas.core.sparse.array.subarr->numpy.asarray(values, dtype=dtype)
A:pandas.core.sparse.array.self.sp_index->getattr(obj, 'sp_index', None)
A:pandas.core.sparse.array.self._fill_value->getattr(obj, 'fill_value', None)
A:pandas.core.sparse.array.object_state->list(np.ndarray.__reduce__(self))
A:pandas.core.sparse.array.output->numpy.empty(len(self), dtype=self.dtype)
A:pandas.core.sparse.array.int_index->self.sp_index.to_int_index()
A:pandas.core.sparse.array.(new_dtype, fill_value)->maybe_promote(self.dtype, value)
A:pandas.core.sparse.array.key->numpy.asarray(key)
A:pandas.core.sparse.array.slobj->slice(i, j)
A:pandas.core.sparse.array.n->len(self)
A:pandas.core.sparse.array.sp_loc->self.sp_index.lookup(loc)
A:pandas.core.sparse.array.indices->notnull(arr).nonzero()[0].astype(np.int32)
A:pandas.core.sparse.array.locs->self.sp_index.lookup_array(indices)
A:pandas.core.sparse.array.indexer->numpy.empty(shape=(0,), dtype=np.int32)
A:pandas.core.sparse.array.new_values->self.sp_values.copy()
A:pandas.core.sparse.array.sp_index->_make_index(len(indices), indexer, kind=self.sp_index)
A:pandas.core.sparse.array.sp_values->astype_nansafe(self.sp_values, dtype, copy=copy)
A:pandas.core.sparse.array.valid_spvals->numpy.isfinite(sp_values).sum()
A:pandas.core.sparse.array.mask->notnull(arr)
A:pandas.core.sparse.array.value->float(value)
A:pandas.core.sparse.array.sp_sum->valid_vals.sum()
A:pandas.core.sparse.array.ct->len(valid_vals)
A:pandas.core.sparse.array.(keys, counts)->pandas.core.algorithms._value_counts_arraylike(self.sp_values, dropna=dropna)
A:pandas.core.sparse.array.keys->pandas.Index(keys)
A:pandas.core.sparse.array.counts->numpy.insert(counts, 0, fcounts)
A:pandas.core.sparse.array.array->array.values.copy().values.copy()
A:pandas.core.sparse.array.arr->arr.astype(object).astype(object)
A:pandas.core.sparse.array.length->len(arr)
A:pandas.core.sparse.array.index->IntIndex(length, indices)
A:pandas.core.sparse.array.(locs, lens)->pandas._libs.sparse.get_blocks(indices)
pandas.core.sparse.array.SparseArray(cls,data,sparse_index=None,index=None,kind='integer',fill_value=None,dtype=None,copy=False)
pandas.core.sparse.array.SparseArray.__array_finalize__(self,obj)
pandas.core.sparse.array.SparseArray.__array_wrap__(self,out_arr,context=None)
pandas.core.sparse.array.SparseArray.__getitem__(self,key)
pandas.core.sparse.array.SparseArray.__getslice__(self,i,j)
pandas.core.sparse.array.SparseArray.__iter__(self)
pandas.core.sparse.array.SparseArray.__len__(self)
pandas.core.sparse.array.SparseArray.__new__(cls,data,sparse_index=None,index=None,kind='integer',fill_value=None,dtype=None,copy=False)
pandas.core.sparse.array.SparseArray.__reduce__(self)
pandas.core.sparse.array.SparseArray.__setitem__(self,key,value)
pandas.core.sparse.array.SparseArray.__setslice__(self,i,j,value)
pandas.core.sparse.array.SparseArray.__setstate__(self,state)
pandas.core.sparse.array.SparseArray.__unicode__(self)
pandas.core.sparse.array.SparseArray._constructor(self)
pandas.core.sparse.array.SparseArray._get_val_at(self,loc)
pandas.core.sparse.array.SparseArray._null_fill_value(self)
pandas.core.sparse.array.SparseArray._simple_new(cls,data,sp_index,fill_value)
pandas.core.sparse.array.SparseArray._valid_sp_values(self)
pandas.core.sparse.array.SparseArray.astype(self,dtype=None,copy=True)
pandas.core.sparse.array.SparseArray.copy(self,deep=True)
pandas.core.sparse.array.SparseArray.count(self)
pandas.core.sparse.array.SparseArray.cumsum(self,axis=0,*args,**kwargs)
pandas.core.sparse.array.SparseArray.disable(self,other)
pandas.core.sparse.array.SparseArray.fill_value(self)
pandas.core.sparse.array.SparseArray.fill_value(self,value)
pandas.core.sparse.array.SparseArray.fillna(self,value,downcast=None)
pandas.core.sparse.array.SparseArray.get_values(self,fill=None)
pandas.core.sparse.array.SparseArray.kind(self)
pandas.core.sparse.array.SparseArray.mean(self,axis=0,*args,**kwargs)
pandas.core.sparse.array.SparseArray.sp_values(self)
pandas.core.sparse.array.SparseArray.sum(self,axis=0,*args,**kwargs)
pandas.core.sparse.array.SparseArray.take(self,indices,axis=0,allow_fill=True,fill_value=None,**kwargs)
pandas.core.sparse.array.SparseArray.to_dense(self,fill=None)
pandas.core.sparse.array.SparseArray.value_counts(self,dropna=True)
pandas.core.sparse.array.SparseArray.values(self)
pandas.core.sparse.array._arith_method(op,name,str_rep=None,default_axis=None,fill_zeros=None,**eval_kwargs)
pandas.core.sparse.array._get_fill(arr)
pandas.core.sparse.array._make_index(length,indices,kind)
pandas.core.sparse.array._maybe_to_dense(obj)
pandas.core.sparse.array._maybe_to_sparse(array)
pandas.core.sparse.array._sanitize_values(arr)
pandas.core.sparse.array._sparse_array_op(left,right,op,name,series=False)
pandas.core.sparse.array._wrap_result(name,data,sparse_index,fill_value,dtype=None)
pandas.core.sparse.array.make_sparse(arr,kind='block',fill_value=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/sparse/series.py----------------------------------------
A:pandas.core.sparse.series._shared_doc_kwargs->dict(axes='index', klass='SparseSeries', axes_single_arg="{0, 'index'}")
A:pandas.core.sparse.series.other->other.to_dense().to_dense()
A:pandas.core.sparse.series.new_values->pandas.core.sparse.array.SparseArray.take(self.values, indices)
A:pandas.core.sparse.series.(left, right)->left.align(right, join='outer', copy=False)
A:pandas.core.sparse.series.new_name->_maybe_match_name(left, right)
A:pandas.core.sparse.series.result->_sparse_array_op(left.values, right.values, op, name, series=True)
A:pandas.core.sparse.series.data->SingleBlockManager(data, index, fastpath=True)
A:pandas.core.sparse.series.index->self.index.take(int_index.indices)
A:pandas.core.sparse.series.res->make_sparse(data, kind=kind, fill_value=fill_value)
A:pandas.core.sparse.series.length->len(index)
A:pandas.core.sparse.series.sparse_index->IntIndex(length, index)
A:pandas.core.sparse.series.series_rep->pandas.core.series.Series.__unicode__(self)
A:pandas.core.sparse.series.fill_value->ufunc(self.fill_value, *args[1:])
A:pandas.core.sparse.series.self.name->getattr(obj, 'name', None)
A:pandas.core.sparse.series.self.fill_value->getattr(obj, 'fill_value', None)
A:pandas.core.sparse.series.key->self.index.get_loc(key)
A:pandas.core.sparse.series.loc->self.index.get_loc(label)
A:pandas.core.sparse.series.values->SparseArray(values, fill_value=self.fill_value, kind=self.kind)
A:pandas.core.sparse.series.self._data->SingleBlockManager(values, self.index)
A:pandas.core.sparse.series.values[key]->pandas._libs.index.convert_scalar(values, value)
A:pandas.core.sparse.series.int_index->self.sp_index.to_int_index()
A:pandas.core.sparse.series.new_data->SingleBlockManager(block, self.index)
A:pandas.core.sparse.series.block->self.block.sparse_reindex(new_index)
A:pandas.core.sparse.series.convert->pandas.compat.numpy.function.validate_take_with_convert(convert, args, kwargs)
A:pandas.core.sparse.series.new_index->self.index.take(indices)
A:pandas.core.sparse.series.axis->self._get_axis_number(axis or 0)
A:pandas.core.sparse.series.new_array->self.values.cumsum()
A:pandas.core.sparse.series.arr->self.values._simple_new(self.sp_values[start:end].copy(), new_sp_index, fill_value=np.nan)
A:pandas.core.sparse.series.dense_valid->self.to_dense().valid()
A:pandas.core.sparse.series.shifted->self.to_dense().shift(periods, freq=freq, axis=axis)
A:pandas.core.sparse.series.(start, end)->new_indices.searchsorted([0, int_index.length])
A:pandas.core.sparse.series.new_sp_index->_make_index(len(self), new_indices, self.sp_index)
A:pandas.core.sparse.series.dense_combined->self.to_dense().combine_first(other)
A:pandas.core.sparse.series.(A, rows, columns)->_sparse_series_to_coo(self, row_levels, column_levels, sort_labels=sort_labels)
pandas.core.sparse.series.SparseSeries(self,data=None,index=None,sparse_index=None,kind='block',fill_value=None,name=None,dtype=None,copy=False,fastpath=False)
pandas.core.sparse.series.SparseSeries.__array__(self,result=None)
pandas.core.sparse.series.SparseSeries.__array_finalize__(self,obj)
pandas.core.sparse.series.SparseSeries.__array_wrap__(self,result,context=None)
pandas.core.sparse.series.SparseSeries.__getitem__(self,key)
pandas.core.sparse.series.SparseSeries.__getstate__(self)
pandas.core.sparse.series.SparseSeries.__init__(self,data=None,index=None,sparse_index=None,kind='block',fill_value=None,name=None,dtype=None,copy=False,fastpath=False)
pandas.core.sparse.series.SparseSeries.__iter__(self)
pandas.core.sparse.series.SparseSeries.__len__(self)
pandas.core.sparse.series.SparseSeries.__unicode__(self)
pandas.core.sparse.series.SparseSeries._constructor(self)
pandas.core.sparse.series.SparseSeries._constructor_expanddim(self)
pandas.core.sparse.series.SparseSeries._get_val_at(self,loc)
pandas.core.sparse.series.SparseSeries._get_values(self,indexer)
pandas.core.sparse.series.SparseSeries._ixs(self,i,axis=0)
pandas.core.sparse.series.SparseSeries._reduce(self,op,name,axis=0,skipna=True,numeric_only=None,filter_type=None,**kwds)
pandas.core.sparse.series.SparseSeries._set_subtyp(self,is_all_dates)
pandas.core.sparse.series.SparseSeries._set_values(self,key,value)
pandas.core.sparse.series.SparseSeries._set_with_engine(self,key,value)
pandas.core.sparse.series.SparseSeries._unpickle_series_compat(self,state)
pandas.core.sparse.series.SparseSeries.abs(self)
pandas.core.sparse.series.SparseSeries.as_sparse_array(self,kind=None,fill_value=None,copy=False)
pandas.core.sparse.series.SparseSeries.block(self)
pandas.core.sparse.series.SparseSeries.combine_first(self,other)
pandas.core.sparse.series.SparseSeries.copy(self,deep=True)
pandas.core.sparse.series.SparseSeries.cumsum(self,axis=0,*args,**kwargs)
pandas.core.sparse.series.SparseSeries.density(self)
pandas.core.sparse.series.SparseSeries.dropna(self,axis=0,inplace=False,**kwargs)
pandas.core.sparse.series.SparseSeries.fill_value(self)
pandas.core.sparse.series.SparseSeries.fill_value(self,v)
pandas.core.sparse.series.SparseSeries.from_array(cls,arr,index=None,name=None,copy=False,fill_value=None,fastpath=False)
pandas.core.sparse.series.SparseSeries.from_coo(cls,A,dense_index=False)
pandas.core.sparse.series.SparseSeries.get(self,label,default=None)
pandas.core.sparse.series.SparseSeries.get_value(self,label,takeable=False)
pandas.core.sparse.series.SparseSeries.get_values(self)
pandas.core.sparse.series.SparseSeries.isnotnull(self)
pandas.core.sparse.series.SparseSeries.isnull(self)
pandas.core.sparse.series.SparseSeries.kind(self)
pandas.core.sparse.series.SparseSeries.npoints(self)
pandas.core.sparse.series.SparseSeries.reindex(self,index=None,method=None,copy=True,limit=None,**kwargs)
pandas.core.sparse.series.SparseSeries.set_value(self,label,value,takeable=False)
pandas.core.sparse.series.SparseSeries.shape(self)
pandas.core.sparse.series.SparseSeries.shift(self,periods,freq=None,axis=0)
pandas.core.sparse.series.SparseSeries.sp_index(self)
pandas.core.sparse.series.SparseSeries.sp_values(self)
pandas.core.sparse.series.SparseSeries.sparse_reindex(self,new_index)
pandas.core.sparse.series.SparseSeries.take(self,indices,axis=0,convert=True,*args,**kwargs)
pandas.core.sparse.series.SparseSeries.to_coo(self,row_levels=(0,),column_levels=(1,),sort_labels=False)
pandas.core.sparse.series.SparseSeries.to_dense(self,sparse_only=False)
pandas.core.sparse.series.SparseSeries.values(self)
pandas.core.sparse.series._arith_method(op,name,str_rep=None,default_axis=None,fill_zeros=None,**eval_kwargs)
pandas.core.sparse.series._sparse_series_op(left,right,op,name)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/sparse/frame.py----------------------------------------
A:pandas.core.sparse.frame._shared_doc_kwargs->dict(klass='SparseDataFrame')
A:pandas.core.sparse.frame.mgr->mgr.astype(dtype).astype(dtype)
A:pandas.core.sparse.frame.data->dict(((k, v.to_dense()) for (k, v) in compat.iteritems(self)))
A:pandas.core.sparse.frame.index->index.intersect(series.sp_index).intersect(series.sp_index)
A:pandas.core.sparse.frame.columns->_unpickle_array(cols)
A:pandas.core.sparse.frame.data[c]->SparseArray(np.nan, index=index, kind=self._default_kind, fill_value=self._default_fill_value)
A:pandas.core.sparse.frame.sdict->dict(((k, v) for (k, v) in compat.iteritems(self) if k in columns))
A:pandas.core.sparse.frame.v->sp_maker(v)
A:pandas.core.sparse.frame.nan_vec->numpy.empty(len(index))
A:pandas.core.sparse.frame.sdict[c]->sp_maker(nan_vec)
A:pandas.core.sparse.frame.(index, columns)->self._prep_index(data, index, columns)
A:pandas.core.sparse.frame.N->len(index)
A:pandas.core.sparse.frame.values->Series(data.data, index=data.row, copy=False)
A:pandas.core.sparse.frame.rows->numpy.concatenate(rows)
A:pandas.core.sparse.frame.(blocs, blens)->get_blocks(rows)
A:pandas.core.sparse.frame.sdict[columns[col]]->SparseSeries(rowvals.values, index=index, fill_value=fill_value, sparse_index=BlockIndex(N, blocs, blens))
A:pandas.core.sparse.frame.dtype->find_common_type(self.dtypes)
A:pandas.core.sparse.frame.cols->numpy.concatenate(cols)
A:pandas.core.sparse.frame.datas->numpy.concatenate(datas)
A:pandas.core.sparse.frame.series_dict->DataFrame()
A:pandas.core.sparse.frame.series_dict[col]->SparseSeries(sp_values, sparse_index=sp_index, fill_value=fv)
A:pandas.core.sparse.frame.self._data->to_manager(series_dict, columns, index)
A:pandas.core.sparse.frame.new_data[col]->func(self[col], float(other[col]))
A:pandas.core.sparse.frame.result->result.to_sparse(fill_value=this[col].fill_value).to_sparse(fill_value=this[col].fill_value)
A:pandas.core.sparse.frame.tot_nonsparse->sum([ser.sp_index.npoints for (_, ser) in compat.iteritems(self)])
A:pandas.core.sparse.frame.new_self->super(SparseDataFrame, self).fillna(value=value, method=method, axis=axis, inplace=inplace, limit=limit, downcast=downcast)
A:pandas.core.sparse.frame.clean->sp_maker(value, self.index)
A:pandas.core.sparse.frame.series->series.sparse_reindex(index).sparse_reindex(index)
A:pandas.core.sparse.frame.dense->self.to_dense().set_value(index, col, value, takeable=takeable)
A:pandas.core.sparse.frame.i->self.index.get_loc(key)
A:pandas.core.sparse.frame.(this, other)->self.rename(columns=lrenamer)._maybe_rename_join(other, lsuffix, rsuffix)
A:pandas.core.sparse.frame.dleft->this[col].to_dense()
A:pandas.core.sparse.frame.dright->other[col].to_dense()
A:pandas.core.sparse.frame.other_fill_value->getattr(other, 'default_fill_value', np.nan)
A:pandas.core.sparse.frame.new_index->self.index.union(other.index)
A:pandas.core.sparse.frame.this->self.rename(columns=lrenamer)
A:pandas.core.sparse.frame.other->other.rename(columns=rrenamer).rename(columns=rrenamer)
A:pandas.core.sparse.frame.fill_value->func(np.float64(self.default_fill_value), np.float64(other.fill_value))
A:pandas.core.sparse.frame.union->other.rename(columns=rrenamer).rename(columns=rrenamer).index.union(self.columns)
A:pandas.core.sparse.frame.intersection->other.rename(columns=rrenamer).rename(columns=rrenamer).index.intersection(self.columns)
A:pandas.core.sparse.frame.indexer->_ensure_platform_int(indexer)
A:pandas.core.sparse.frame.need_mask->mask.any()
A:pandas.core.sparse.frame.new->Series(data.data, index=data.row, copy=False).take(indexer)
A:pandas.core.sparse.frame.(new, fill_value)->maybe_upcast(new, fill_value=fill_value)
A:pandas.core.sparse.frame.(index, row_indexer)->reindexers.get(0, (None, None))
A:pandas.core.sparse.frame.(columns, col_indexer)->reindexers.get(1, (None, None))
A:pandas.core.sparse.frame.new_arrays[col]->pandas.core.algorithms.take_1d(self[col].get_values(), row_indexer, fill_value=fill_value)
A:pandas.core.sparse.frame.join_index->self.index.join(other.index, how=how)
A:pandas.core.sparse.frame.to_rename->self.columns.intersection(other.columns)
A:pandas.core.sparse.frame.T->property(transpose)
A:pandas.core.sparse.frame.axis->self._get_axis_number(axis)
A:pandas.core.sparse.frame.applied->func(v)
A:pandas.core.sparse.frame.applied.fill_value->func(v.fill_value)
A:pandas.core.sparse.frame.nobs->sum(lengths)
A:pandas.core.sparse.frame.minor_labels->numpy.repeat(np.arange(len(frame.columns)), lengths)
A:pandas.core.sparse.frame.int_index->series.sparse_reindex(index).sparse_reindex(index).sp_index.to_int_index()
A:pandas.core.sparse.frame.major_labels->numpy.concatenate(inds_to_concat)
A:pandas.core.sparse.frame.stacked_values->numpy.concatenate(vals_to_concat)
A:pandas.core.sparse.frame.lp->DataFrame(stacked_values.reshape((nobs, 1)), index=index, columns=['foo'])
pandas.core.sparse.frame.SparseDataFrame(self,data=None,index=None,columns=None,default_kind=None,default_fill_value=None,dtype=None,copy=False)
pandas.core.sparse.frame.SparseDataFrame.__array_wrap__(self,result)
pandas.core.sparse.frame.SparseDataFrame.__getitem__(self,key)
pandas.core.sparse.frame.SparseDataFrame.__getstate__(self)
pandas.core.sparse.frame.SparseDataFrame.__init__(self,data=None,index=None,columns=None,default_kind=None,default_fill_value=None,dtype=None,copy=False)
pandas.core.sparse.frame.SparseDataFrame._apply_columns(self,func)
pandas.core.sparse.frame.SparseDataFrame._combine_const(self,other,func,raise_on_error=True)
pandas.core.sparse.frame.SparseDataFrame._combine_frame(self,other,func,fill_value=None,level=None)
pandas.core.sparse.frame.SparseDataFrame._combine_match_columns(self,other,func,level=None,fill_value=None)
pandas.core.sparse.frame.SparseDataFrame._combine_match_index(self,other,func,level=None,fill_value=None)
pandas.core.sparse.frame.SparseDataFrame._constructor(self)
pandas.core.sparse.frame.SparseDataFrame._init_dict(self,data,index,columns,dtype=None)
pandas.core.sparse.frame.SparseDataFrame._init_matrix(self,data,index,columns,dtype=None)
pandas.core.sparse.frame.SparseDataFrame._init_spmatrix(self,data,index,columns,dtype=None,fill_value=None)
pandas.core.sparse.frame.SparseDataFrame._join_compat(self,other,on=None,how='left',lsuffix='',rsuffix='',sort=False)
pandas.core.sparse.frame.SparseDataFrame._join_index(self,other,how,lsuffix,rsuffix)
pandas.core.sparse.frame.SparseDataFrame._maybe_rename_join(self,other,lsuffix,rsuffix)
pandas.core.sparse.frame.SparseDataFrame._prep_index(self,data,index,columns)
pandas.core.sparse.frame.SparseDataFrame._reindex_columns(self,columns,method,copy,level,fill_value=None,limit=None,takeable=False)
pandas.core.sparse.frame.SparseDataFrame._reindex_index(self,index,method,copy,level,fill_value=np.nan,limit=None,takeable=False)
pandas.core.sparse.frame.SparseDataFrame._reindex_with_indexers(self,reindexers,method=None,fill_value=None,limit=None,copy=False,allow_dups=False)
pandas.core.sparse.frame.SparseDataFrame._sanitize_column(self,key,value,**kwargs)
pandas.core.sparse.frame.SparseDataFrame._slice(self,slobj,axis=0,kind=None)
pandas.core.sparse.frame.SparseDataFrame._unpickle_sparse_frame_compat(self,state)
pandas.core.sparse.frame.SparseDataFrame.apply(self,func,axis=0,broadcast=False,reduce=False)
pandas.core.sparse.frame.SparseDataFrame.applymap(self,func)
pandas.core.sparse.frame.SparseDataFrame.astype(self,dtype)
pandas.core.sparse.frame.SparseDataFrame.copy(self,deep=True)
pandas.core.sparse.frame.SparseDataFrame.count(self,axis=0,**kwds)
pandas.core.sparse.frame.SparseDataFrame.cumsum(self,axis=0,*args,**kwargs)
pandas.core.sparse.frame.SparseDataFrame.default_fill_value(self)
pandas.core.sparse.frame.SparseDataFrame.default_kind(self)
pandas.core.sparse.frame.SparseDataFrame.density(self)
pandas.core.sparse.frame.SparseDataFrame.fillna(self,value=None,method=None,axis=0,inplace=False,limit=None,downcast=None)
pandas.core.sparse.frame.SparseDataFrame.get_value(self,index,col,takeable=False)
pandas.core.sparse.frame.SparseDataFrame.isnotnull(self)
pandas.core.sparse.frame.SparseDataFrame.isnull(self)
pandas.core.sparse.frame.SparseDataFrame.set_value(self,index,col,value,takeable=False)
pandas.core.sparse.frame.SparseDataFrame.to_coo(self)
pandas.core.sparse.frame.SparseDataFrame.to_dense(self)
pandas.core.sparse.frame.SparseDataFrame.transpose(self,*args,**kwargs)
pandas.core.sparse.frame.SparseDataFrame.xs(self,key,axis=0,copy=False)
pandas.core.sparse.frame.homogenize(series_dict)
pandas.core.sparse.frame.stack_sparse_frame(frame)
pandas.core.sparse.frame.to_manager(sdf,columns,index)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/sparse/api.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/sparse/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/sparse/list.py----------------------------------------
A:pandas.core.sparse.list.contents->'\n'.join((repr(c) for c in self._chunks))
A:pandas.core.sparse.list.inplace->validate_bool_kwarg(inplace, 'inplace')
A:pandas.core.sparse.list.result->self.copy()
A:pandas.core.sparse.list.new_values->numpy.concatenate([c.sp_values for c in self._chunks])
A:pandas.core.sparse.list.new_index->_concat_sparse_indexes([c.sp_index for c in self._chunks])
A:pandas.core.sparse.list.new_arr->SparseArray(new_values, sparse_index=new_index, fill_value=self.fill_value)
A:pandas.core.sparse.list.new_splist->SparseList(fill_value=self.fill_value)
A:pandas.core.sparse.list.new_splist._chunks->list(self._chunks)
A:pandas.core.sparse.list.sparr->SparseArray(value, fill_value=self.fill_value)
pandas.core.sparse.list.SparseList(self,data=None,fill_value=np.nan)
pandas.core.sparse.list.SparseList.__getitem__(self,i)
pandas.core.sparse.list.SparseList.__init__(self,data=None,fill_value=np.nan)
pandas.core.sparse.list.SparseList.__len__(self)
pandas.core.sparse.list.SparseList.__setitem__(self,i,value)
pandas.core.sparse.list.SparseList.__unicode__(self)
pandas.core.sparse.list.SparseList._consolidate_inplace(self)
pandas.core.sparse.list.SparseList.append(self,value)
pandas.core.sparse.list.SparseList.consolidate(self,inplace=True)
pandas.core.sparse.list.SparseList.copy(self)
pandas.core.sparse.list.SparseList.is_consolidated(self)
pandas.core.sparse.list.SparseList.nchunks(self)
pandas.core.sparse.list.SparseList.to_array(self)
pandas.core.sparse.list._concat_sparse_indexes(indexes)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/reshape/util.py----------------------------------------
A:pandas.core.reshape.util.haystack->Index(haystack)
A:pandas.core.reshape.util.needles->Index(needles)
A:pandas.core.reshape.util.lenX->numpy.fromiter((len(x) for x in X), dtype=np.intp)
A:pandas.core.reshape.util.cumprodX->numpy.cumproduct(lenX)
A:pandas.core.reshape.util.a->numpy.roll(cumprodX, 1)
A:pandas.core.reshape.util.b->numpy.zeros_like(cumprodX)
pandas.core.reshape.util._compose2(f,g)
pandas.core.reshape.util.cartesian_product(X)
pandas.core.reshape.util.compose(*funcs)
pandas.core.reshape.util.match(needles,haystack)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/reshape/tile.py----------------------------------------
A:pandas.core.reshape.tile.(x_is_series, series_index, name, x)->_preprocess_for_cut(x)
A:pandas.core.reshape.tile.(x, dtype)->_coerce_to_type(x)
A:pandas.core.reshape.tile.x->numpy.asarray(x)
A:pandas.core.reshape.tile.bins->to_datetime(bins).view(np.int64)
A:pandas.core.reshape.tile.(fac, bins)->_bins_to_cuts(x, bins, labels=labels, precision=precision, include_lowest=True, dtype=dtype, duplicates=duplicates)
A:pandas.core.reshape.tile.quantiles->numpy.linspace(0, 1, q + 1)
A:pandas.core.reshape.tile.ids->_ensure_int64(bins.searchsorted(x, side=side))
A:pandas.core.reshape.tile.result->result.astype(np.float64).astype(np.float64)
A:pandas.core.reshape.tile.unique_bins->pandas.core.algorithms.unique(bins)
A:pandas.core.reshape.tile.has_nas->na_mask.any()
A:pandas.core.reshape.tile.labels->pandas.IntervalIndex.from_intervals([Interval(v, labels[0].right, closed='right')]).append(labels[1:])
A:pandas.core.reshape.tile.bins_dtype->infer_dtype(bins)
A:pandas.core.reshape.tile.precision->_infer_precision(precision, bins)
A:pandas.core.reshape.tile.v->adjust(labels[0].left)
A:pandas.core.reshape.tile.i->pandas.IntervalIndex.from_intervals([Interval(v, labels[0].right, closed='right')])
A:pandas.core.reshape.tile.x_is_series->isinstance(x, Series)
A:pandas.core.reshape.tile.fac->Series(fac, index=series_index, name=name)
A:pandas.core.reshape.tile.(frac, whole)->numpy.modf(x)
pandas.core.reshape.tile._bins_to_cuts(x,bins,right=True,labels=None,precision=3,include_lowest=False,dtype=None,duplicates='raise')
pandas.core.reshape.tile._coerce_to_type(x)
pandas.core.reshape.tile._convert_bin_to_numeric_type(bins,dtype)
pandas.core.reshape.tile._format_labels(bins,precision,right=True,include_lowest=False,dtype=None)
pandas.core.reshape.tile._infer_precision(base_precision,bins)
pandas.core.reshape.tile._postprocess_for_cut(fac,bins,retbins,x_is_series,series_index,name)
pandas.core.reshape.tile._preprocess_for_cut(x)
pandas.core.reshape.tile._round_frac(x,precision)
pandas.core.reshape.tile._trim_zeros(x)
pandas.core.reshape.tile.cut(x,bins,right=True,labels=None,retbins=False,precision=3,include_lowest=False)
pandas.core.reshape.tile.qcut(x,q,labels=None,retbins=False,precision=3,duplicates='raise')


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/reshape/pivot.py----------------------------------------
A:pandas.core.reshape.pivot.index->pandas.core.common._maybe_make_list(index)
A:pandas.core.reshape.pivot.columns->pandas.core.common._maybe_make_list(columns)
A:pandas.core.reshape.pivot.table->table.fillna(0).fillna(0)
A:pandas.core.reshape.pivot.values->list(values)
A:pandas.core.reshape.pivot.grouped->data.groupby(keys)
A:pandas.core.reshape.pivot.agged->data.groupby(keys).agg(aggfunc)
A:pandas.core.reshape.pivot.m->pandas.MultiIndex.from_arrays(cartesian_product(table.columns.levels), names=table.columns.names)
A:pandas.core.reshape.pivot.exception_msg->'Conflicting name "{0}" in margins'.format(margins_name)
A:pandas.core.reshape.pivot.grand_margin->_compute_grand_margin(data, values, aggfunc, margins_name)
A:pandas.core.reshape.pivot.marginal_result_set->_generate_marginal_results_without_values(table, data, rows, cols, aggfunc, margins_name)
A:pandas.core.reshape.pivot.row_margin->Series(np.nan, index=result.columns)
A:pandas.core.reshape.pivot.result->concat(table_pieces, axis=cat_axis)
A:pandas.core.reshape.pivot.result.index->concat(table_pieces, axis=cat_axis).index._to_safe_for_reshape()
A:pandas.core.reshape.pivot.grand_margin[k]->aggfunc(v)
A:pandas.core.reshape.pivot.margin->data.groupby(level=0, axis=0).apply(aggfunc)
A:pandas.core.reshape.pivot.all_key->_all_key()
A:pandas.core.reshape.pivot.piece->piece.copy().copy()
A:pandas.core.reshape.pivot.row_margin.index->Series(np.nan, index=result.columns).index.reorder_levels(new_order)
A:pandas.core.reshape.pivot.by->list(by)
A:pandas.core.reshape.pivot.rownames->_get_names(index, rownames, prefix='row')
A:pandas.core.reshape.pivot.colnames->_get_names(columns, colnames, prefix='col')
A:pandas.core.reshape.pivot.df->DataFrame(data)
A:pandas.core.reshape.pivot.column_margin->table.fillna(0).fillna(0).loc[:, 'All'].drop('All')
A:pandas.core.reshape.pivot.index_margin->table.fillna(0).fillna(0).loc['All', :].drop('All')
A:pandas.core.reshape.pivot.names->list(names)
pandas.core.reshape.pivot._add_margins(table,data,values,rows,cols,aggfunc,margins_name='All')
pandas.core.reshape.pivot._compute_grand_margin(data,values,aggfunc,margins_name='All')
pandas.core.reshape.pivot._convert_by(by)
pandas.core.reshape.pivot._generate_marginal_results(table,data,values,rows,cols,aggfunc,grand_margin,margins_name='All')
pandas.core.reshape.pivot._generate_marginal_results_without_values(table,data,rows,cols,aggfunc,margins_name='All')
pandas.core.reshape.pivot._get_names(arrs,names,prefix='row')
pandas.core.reshape.pivot._normalize(table,normalize,margins)
pandas.core.reshape.pivot.crosstab(index,columns,values=None,rownames=None,colnames=None,aggfunc=None,margins=False,dropna=True,normalize=False)
pandas.core.reshape.pivot.pivot_table(data,values=None,index=None,columns=None,aggfunc='mean',fill_value=None,margins=False,dropna=True,margins_name='All')


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/reshape/concat.py----------------------------------------
A:pandas.core.reshape.concat.op->_Concatenator(objs, axis=axis, join_axes=join_axes, ignore_index=ignore_index, join=join, keys=keys, levels=levels, names=names, verify_integrity=verify_integrity, copy=copy)
A:pandas.core.reshape.concat.keys->Index(clean_keys, name=name)
A:pandas.core.reshape.concat.objs->list(objs)
A:pandas.core.reshape.concat.name->pandas.core.common._consensus_name_attr(self.objs)
A:pandas.core.reshape.concat.ndims->set()
A:pandas.core.reshape.concat.max_ndim->max(ndims)
A:pandas.core.reshape.concat.axis->sample._get_axis_number(axis)
A:pandas.core.reshape.concat.self._is_frame->isinstance(sample, DataFrame)
A:pandas.core.reshape.concat.self._is_series->isinstance(sample, Series)
A:pandas.core.reshape.concat.obj->sample._constructor({name: obj})
A:pandas.core.reshape.concat.self.new_axes->self._get_new_axes()
A:pandas.core.reshape.concat.new_data->concatenate_block_managers(mgrs_indexers, self.new_axes, concat_axis=self.axis, copy=self.copy)
A:pandas.core.reshape.concat.cons->pandas.core.dtypes.concat._get_frame_result_type(new_data, self.objs)
A:pandas.core.reshape.concat.data->dict(zip(range(len(self.objs)), self.objs))
A:pandas.core.reshape.concat.df->cons(data, index=index)
A:pandas.core.reshape.concat.ndim->self._get_result_dim()
A:pandas.core.reshape.concat.new_axes[i]->self._get_comb_axis(i)
A:pandas.core.reshape.concat.indices->pandas.compat.lrange(ndim)
A:pandas.core.reshape.concat.new_axes[self.axis]->self._get_concat_axis()
A:pandas.core.reshape.concat.idx->pandas.core.common._default_index(sum((len(i) for i in indexes)))
A:pandas.core.reshape.concat.concat_axis->_make_concat_multiindex(indexes, self.keys, self.levels, self.names)
A:pandas.core.reshape.concat.overlap->_concat_indexes(indexes).get_duplicates()
A:pandas.core.reshape.concat.zipped->pandas.compat.lzip(*keys)
A:pandas.core.reshape.concat.(_, levels)->_factorize_from_iterables(zipped)
A:pandas.core.reshape.concat.i->level.get_loc(key)
A:pandas.core.reshape.concat.concat_index->_concat_indexes(indexes)
A:pandas.core.reshape.concat.(codes, categories)->_factorize_from_iterable(concat_index)
A:pandas.core.reshape.concat.names->list(names)
A:pandas.core.reshape.concat.n->len(new_index)
A:pandas.core.reshape.concat.kpieces->len(indexes)
A:pandas.core.reshape.concat.new_names->list(names)
A:pandas.core.reshape.concat.new_levels->list(levels)
A:pandas.core.reshape.concat.hlevel->_ensure_index(hlevel)
A:pandas.core.reshape.concat.mapped->level.get_indexer(hlevel)
pandas.core.reshape.concat._Concatenator(self,objs,axis=0,join='outer',join_axes=None,keys=None,levels=None,names=None,ignore_index=False,verify_integrity=False,copy=True)
pandas.core.reshape.concat._Concatenator.__init__(self,objs,axis=0,join='outer',join_axes=None,keys=None,levels=None,names=None,ignore_index=False,verify_integrity=False,copy=True)
pandas.core.reshape.concat._Concatenator._get_comb_axis(self,i)
pandas.core.reshape.concat._Concatenator._get_concat_axis(self)
pandas.core.reshape.concat._Concatenator._get_new_axes(self)
pandas.core.reshape.concat._Concatenator._get_result_dim(self)
pandas.core.reshape.concat._Concatenator._maybe_check_integrity(self,concat_index)
pandas.core.reshape.concat._Concatenator.get_result(self)
pandas.core.reshape.concat._concat_indexes(indexes)
pandas.core.reshape.concat._make_concat_multiindex(indexes,keys,levels=None,names=None)
pandas.core.reshape.concat.concat(objs,axis=0,join='outer',join_axes=None,ignore_index=False,keys=None,levels=None,names=None,verify_integrity=False,copy=True)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/reshape/api.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/reshape/merge.py----------------------------------------
A:pandas.core.reshape.merge.op->_AsOfMerge(left, right, on=on, left_on=left_on, right_on=right_on, left_index=left_index, right_index=right_index, by=by, left_by=left_by, right_by=right_by, suffixes=suffixes, how='asof', tolerance=tolerance, allow_exact_matches=allow_exact_matches, direction=direction)
A:pandas.core.reshape.merge.lby->left.copy().groupby(by, sort=False)
A:pandas.core.reshape.merge.right->right.copy().copy()
A:pandas.core.reshape.merge.rby->right.copy().copy().groupby(by, sort=False)
A:pandas.core.reshape.merge.rhs->right.copy().copy().take(rby.indices[key])
A:pandas.core.reshape.merge.lcols->lhs.columns.tolist()
A:pandas.core.reshape.merge.merged->_merge_pieces(lhs, rhs)
A:pandas.core.reshape.merge.merged.index->range(len(merged))
A:pandas.core.reshape.merge.result->typ(result_data).__finalize__(self, method=self._merge_type)
A:pandas.core.reshape.merge.(result, _)->_groupby_and_merge(right_by, on, right, left, lambda x, y: _merger(y, x), check_duplicates=False)
A:pandas.core.reshape.merge.self.on->pandas.core.common._maybe_make_list(on)
A:pandas.core.reshape.merge.self.left_on->pandas.core.common._maybe_make_list(left_on)
A:pandas.core.reshape.merge.self.right_on->pandas.core.common._maybe_make_list(right_on)
A:pandas.core.reshape.merge.msg->'incompatible tolerance, must be compat with type {0}'.format(type(lt))
A:pandas.core.reshape.merge.(self.left_join_keys, self.right_join_keys, self.join_names)->self._get_merge_keys()
A:pandas.core.reshape.merge.(self.left, self.right)->self._indicator_pre_merge(self.left, self.right)
A:pandas.core.reshape.merge.(join_index, left_indexer, right_indexer)->self._get_join_info()
A:pandas.core.reshape.merge.(llabels, rlabels)->items_overlap_with_suffix(ldata.items, lsuf, rdata.items, rsuf)
A:pandas.core.reshape.merge.result_data->concatenate_block_managers([(ldata, lindexers), (rdata, rindexers)], axes=[llabels.append(rlabels), join_index], concat_axis=0, copy=self.copy)
A:pandas.core.reshape.merge.columns->left.copy().columns.union(right.columns)
A:pandas.core.reshape.merge.left->left.copy().copy()
A:pandas.core.reshape.merge.left['_left_indicator']->left['_left_indicator'].astype('int8').astype('int8')
A:pandas.core.reshape.merge.right['_right_indicator']->right['_right_indicator'].astype('int8').astype('int8')
A:pandas.core.reshape.merge.result['_left_indicator']->result['_left_indicator'].fillna(0).fillna(0)
A:pandas.core.reshape.merge.result['_right_indicator']->result['_right_indicator'].fillna(0).fillna(0)
A:pandas.core.reshape.merge.result[self.indicator_name]->result[self.indicator_name].cat.rename_categories(['left_only', 'right_only', 'both'])
A:pandas.core.reshape.merge.keys->zip(self.join_names, self.left_on, self.right_on)
A:pandas.core.reshape.merge.left_has_missing->(left_indexer == -1).any()
A:pandas.core.reshape.merge.right_has_missing->(right_indexer == -1).any()
A:pandas.core.reshape.merge.lfill->na_value_for_dtype(take_left.dtype)
A:pandas.core.reshape.merge.lvals->pandas.core.algorithms.take_1d(take_left, left_indexer, fill_value=lfill)
A:pandas.core.reshape.merge.rfill->na_value_for_dtype(take_right.dtype)
A:pandas.core.reshape.merge.rvals->pandas.core.algorithms.take_1d(take_right, right_indexer, fill_value=rfill)
A:pandas.core.reshape.merge.key_col->Index(lvals).where(~mask, rvals)
A:pandas.core.reshape.merge.(join_index, right_indexer, left_indexer)->_left_join_on_index(right_ax, left_ax, self.right_join_keys, sort=self.sort)
A:pandas.core.reshape.merge.(left_indexer, right_indexer)->_get_single_indexer(jkey, right_ax, sort=sort)
A:pandas.core.reshape.merge.join_index->left_ax.take(left_indexer)
A:pandas.core.reshape.merge.left_indexer->numpy.array([-1] * len(join_index))
A:pandas.core.reshape.merge.right_indexer->numpy.array([-1] * len(join_index))
A:pandas.core.reshape.merge.self.left->self.left.assign(**{name: self.left[name].astype(object)})
A:pandas.core.reshape.merge.self.right->self.right.assign(**{name: self.right[name].astype(object)})
A:pandas.core.reshape.merge.common_cols->self.left.columns.intersection(self.right.columns)
A:pandas.core.reshape.merge.n->len(self.right_on)
A:pandas.core.reshape.merge.fkeys->partial(_factorize_keys, sort=sort)
A:pandas.core.reshape.merge.(llab, rlab, shape)->map(list, zip(*map(fkeys, left_keys, right_keys)))
A:pandas.core.reshape.merge.(lkey, rkey)->_get_join_keys(llab, rlab, shape, sort)
A:pandas.core.reshape.merge.(lkey, rkey, count)->_factorize_keys(lkey, rkey, sort=sort)
A:pandas.core.reshape.merge.kwargs->copy.copy(kwargs)
A:pandas.core.reshape.merge.left_join_indexer->pandas._libs.join.ffill_indexer(left_indexer)
A:pandas.core.reshape.merge.right_join_indexer->pandas._libs.join.ffill_indexer(right_indexer)
A:pandas.core.reshape.merge.ctype->_cython_types.get(type_name, 'object')
A:pandas.core.reshape.merge.(left_join_keys, right_join_keys, join_names)->super(_AsOfMerge, self)._get_merge_keys()
A:pandas.core.reshape.merge.labels->numpy.concatenate([left, right])
A:pandas.core.reshape.merge.labeled_dtypes->list(zip(labels, dtypes))
A:pandas.core.reshape.merge.left_values->left_values.view('i8').view('i8')
A:pandas.core.reshape.merge.right_values->right_values.view('i8').view('i8')
A:pandas.core.reshape.merge.left_by_values->by_type_caster(left_by_values)
A:pandas.core.reshape.merge.right_by_values->by_type_caster(right_by_values)
A:pandas.core.reshape.merge.by_type->_get_cython_type_upcast(left_by_values.dtype)
A:pandas.core.reshape.merge.on_type->_get_cython_type(left_values.dtype)
A:pandas.core.reshape.merge.func->_asof_function(self.direction, on_type)
A:pandas.core.reshape.merge.(rlab, llab, shape)->map(list, zip(*map(fkeys, index.levels, join_keys)))
A:pandas.core.reshape.merge.rlab->klass(max(len(lk), len(rk))).factorize(rk)
A:pandas.core.reshape.merge.(left_key, right_key, count)->_factorize_keys(join_key, index, sort=sort)
A:pandas.core.reshape.merge.(right_indexer, left_indexer)->pandas._libs.join.left_outer_join(y, x, max_groups)
A:pandas.core.reshape.merge.lk->_ensure_object(lk)
A:pandas.core.reshape.merge.rk->_ensure_object(rk)
A:pandas.core.reshape.merge.rizer->klass(max(len(lk), len(rk)))
A:pandas.core.reshape.merge.llab->klass(max(len(lk), len(rk))).factorize(lk)
A:pandas.core.reshape.merge.count->klass(max(len(lk), len(rk))).get_count()
A:pandas.core.reshape.merge.uniques->klass(max(len(lk), len(rk))).uniques.to_array()
A:pandas.core.reshape.merge.(llab, rlab)->_sort_labels(uniques, llab, rlab)
A:pandas.core.reshape.merge.lany->lmask.any()
A:pandas.core.reshape.merge.rany->rmask.any()
A:pandas.core.reshape.merge.l->len(left)
A:pandas.core.reshape.merge.(_, new_labels)->pandas.core.algorithms.safe_sort(uniques, labels, na_sentinel=-1)
A:pandas.core.reshape.merge.new_labels->_ensure_int64(new_labels)
A:pandas.core.reshape.merge.nlev->next(filter(pred, range(len(shape), 0, -1)))
A:pandas.core.reshape.merge.stride->numpy.prod(shape[1:nlev], dtype='i8')
pandas.core.reshape.merge.MergeError(ValueError)
pandas.core.reshape.merge._AsOfMerge(self,left,right,on=None,left_on=None,right_on=None,left_index=False,right_index=False,by=None,left_by=None,right_by=None,axis=1,suffixes=('_x','_y'),copy=True,fill_method=None,how='asof',tolerance=None,allow_exact_matches=True,direction='backward')
pandas.core.reshape.merge._AsOfMerge.__init__(self,left,right,on=None,left_on=None,right_on=None,left_index=False,right_index=False,by=None,left_by=None,right_by=None,axis=1,suffixes=('_x','_y'),copy=True,fill_method=None,how='asof',tolerance=None,allow_exact_matches=True,direction='backward')
pandas.core.reshape.merge._AsOfMerge._asof_key(self)
pandas.core.reshape.merge._AsOfMerge._get_join_indexers(self)
pandas.core.reshape.merge._AsOfMerge._get_merge_keys(self)
pandas.core.reshape.merge._AsOfMerge._validate_specification(self)
pandas.core.reshape.merge._MergeOperation(self,left,right,how='inner',on=None,left_on=None,right_on=None,axis=1,left_index=False,right_index=False,sort=True,suffixes=('_x','_y'),copy=True,indicator=False)
pandas.core.reshape.merge._MergeOperation.__init__(self,left,right,how='inner',on=None,left_on=None,right_on=None,axis=1,left_index=False,right_index=False,sort=True,suffixes=('_x','_y'),copy=True,indicator=False)
pandas.core.reshape.merge._MergeOperation._get_join_indexers(self)
pandas.core.reshape.merge._MergeOperation._get_join_info(self)
pandas.core.reshape.merge._MergeOperation._get_merge_keys(self)
pandas.core.reshape.merge._MergeOperation._indicator_post_merge(self,result)
pandas.core.reshape.merge._MergeOperation._indicator_pre_merge(self,left,right)
pandas.core.reshape.merge._MergeOperation._maybe_add_join_keys(self,result,left_indexer,right_indexer)
pandas.core.reshape.merge._MergeOperation._maybe_coerce_merge_keys(self)
pandas.core.reshape.merge._MergeOperation._validate_specification(self)
pandas.core.reshape.merge._MergeOperation.get_result(self)
pandas.core.reshape.merge._OrderedMerge(self,left,right,on=None,left_on=None,right_on=None,left_index=False,right_index=False,axis=1,suffixes=('_x','_y'),copy=True,fill_method=None,how='outer')
pandas.core.reshape.merge._OrderedMerge.__init__(self,left,right,on=None,left_on=None,right_on=None,left_index=False,right_index=False,axis=1,suffixes=('_x','_y'),copy=True,fill_method=None,how='outer')
pandas.core.reshape.merge._OrderedMerge.get_result(self)
pandas.core.reshape.merge._any(x)
pandas.core.reshape.merge._asof_by_function(direction,on_type,by_type)
pandas.core.reshape.merge._asof_function(direction,on_type)
pandas.core.reshape.merge._factorize_keys(lk,rk,sort=True)
pandas.core.reshape.merge._get_cython_type(dtype)
pandas.core.reshape.merge._get_cython_type_upcast(dtype)
pandas.core.reshape.merge._get_join_indexers(left_keys,right_keys,sort=False,how='inner',**kwargs)
pandas.core.reshape.merge._get_join_keys(llab,rlab,shape,sort)
pandas.core.reshape.merge._get_multiindex_indexer(join_keys,index,sort)
pandas.core.reshape.merge._get_single_indexer(join_key,index,sort=False)
pandas.core.reshape.merge._groupby_and_merge(by,on,left,right,_merge_pieces,check_duplicates=True)
pandas.core.reshape.merge._left_join_on_index(left_ax,right_ax,join_keys,sort=False)
pandas.core.reshape.merge._right_outer_join(x,y,max_groups)
pandas.core.reshape.merge._should_fill(lname,rname)
pandas.core.reshape.merge._sort_labels(uniques,left,right)
pandas.core.reshape.merge.merge(left,right,how='inner',on=None,left_on=None,right_on=None,left_index=False,right_index=False,sort=False,suffixes=('_x','_y'),copy=True,indicator=False)
pandas.core.reshape.merge.merge_asof(left,right,on=None,left_on=None,right_on=None,left_index=False,right_index=False,by=None,left_by=None,right_by=None,suffixes=('_x','_y'),tolerance=None,allow_exact_matches=True,direction='backward')
pandas.core.reshape.merge.merge_ordered(left,right,on=None,left_on=None,right_on=None,left_by=None,right_by=None,fill_method=None,suffixes=('_x','_y'),how='outer')
pandas.core.reshape.merge.ordered_merge(left,right,on=None,left_on=None,right_on=None,left_by=None,right_by=None,fill_method=None,suffixes=('_x','_y'))


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/reshape/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/reshape/reshape.py----------------------------------------
A:pandas.core.reshape.reshape.values->values.take(labels, axis=0).take(labels, axis=0)
A:pandas.core.reshape.reshape.msg->'Ambiguous reference to {0}. The column names are not unique.'.format(level)
A:pandas.core.reshape.reshape.self.level->self.index._get_level_number(level)
A:pandas.core.reshape.reshape.self.new_index_levels->list(index.levels)
A:pandas.core.reshape.reshape.self.new_index_names->list(index.names)
A:pandas.core.reshape.reshape.self.removed_name->self.new_index_names.pop(self.level)
A:pandas.core.reshape.reshape.self.removed_level->self.new_index_levels.pop(self.level)
A:pandas.core.reshape.reshape.labs->list(self.index.labels)
A:pandas.core.reshape.reshape.levs->list(self.index.levels)
A:pandas.core.reshape.reshape.(comp_index, obs_ids)->get_compressed_ids(remaining_labels, level_sizes)
A:pandas.core.reshape.reshape.ngroups->len(obs_ids)
A:pandas.core.reshape.reshape.indexer->_ensure_platform_int(indexer)
A:pandas.core.reshape.reshape.self.sorted_values->pandas.core.algorithms.take_nd(self.values, indexer, axis=0)
A:pandas.core.reshape.reshape.comp_index->_ensure_platform_int(comp_index)
A:pandas.core.reshape.reshape.mask->numpy.ones(len(mdata[pivot_cols[0]]), dtype=bool)
A:pandas.core.reshape.reshape.self.compressor->_ensure_platform_int(comp_index).searchsorted(np.arange(ngroups))
A:pandas.core.reshape.reshape.(values, value_mask)->self.get_new_values()
A:pandas.core.reshape.reshape.columns->self.get_new_columns()
A:pandas.core.reshape.reshape.index->numpy.arange(len(data))
A:pandas.core.reshape.reshape.(col_inds, obs_ids)->compress_group_index(self.sorted_labels[-1])
A:pandas.core.reshape.reshape.mask_all->numpy.ones(len(mdata[pivot_cols[0]]), dtype=bool).all()
A:pandas.core.reshape.reshape.new_values->frame.copy().values.ravel()
A:pandas.core.reshape.reshape.new_mask->numpy.zeros(result_shape, dtype=bool)
A:pandas.core.reshape.reshape.(dtype, fill_value)->maybe_promote(values.dtype, self.fill_value)
A:pandas.core.reshape.reshape.sorted_values->sorted_values.astype(name, copy=False).astype(name, copy=False)
A:pandas.core.reshape.reshape.f->getattr(_reshape, 'unstack_{}'.format(name))
A:pandas.core.reshape.reshape.width->len(self.value_columns)
A:pandas.core.reshape.reshape.propagator->numpy.repeat(np.arange(width), stride)
A:pandas.core.reshape.reshape.lev->lev.insert(len(lev), _get_na_value(lev.dtype.type)).insert(len(lev), _get_na_value(lev.dtype.type))
A:pandas.core.reshape.reshape.group_index->get_group_index(clabels, shape, sort=False, xnull=False)
A:pandas.core.reshape.reshape.(comp_ids, obs_ids)->compress_group_index(group_index, sort=False)
A:pandas.core.reshape.reshape.recons_labels->decons_obs_group_ids(comp_ids, obs_ids, shape, clabels, xnull=False)
A:pandas.core.reshape.reshape.dummy_index->MultiIndex(levels=rlevels + [obs_ids], labels=rlabels + [comp_ids], names=rnames + ['__placeholder__'], verify_integrity=False)
A:pandas.core.reshape.reshape.dummy->_get_dummies_1d(data[col], prefix=pre, prefix_sep=sep, dummy_na=dummy_na, sparse=sparse, drop_first=drop_first)
A:pandas.core.reshape.reshape.unstacked->_get_dummies_1d(data[col], prefix=pre, prefix_sep=sep, dummy_na=dummy_na, sparse=sparse, drop_first=drop_first).unstack('__placeholder__')
A:pandas.core.reshape.reshape.result->_get_dummies_1d(data, prefix, prefix_sep, dummy_na, sparse=sparse, drop_first=drop_first)
A:pandas.core.reshape.reshape.new_columns->new_columns.difference(drop_cols).difference(drop_cols)
A:pandas.core.reshape.reshape.indexed->Series(self[values].values, index=MultiIndex.from_arrays([index, self[columns]]))
A:pandas.core.reshape.reshape.hindex->pandas.core.index.MultiIndex.from_arrays([index, columns])
A:pandas.core.reshape.reshape.series->series.sort_index(level=0).sort_index(level=0)
A:pandas.core.reshape.reshape.unstacker->_Unstacker(obj.values, obj.index, level=level, value_columns=obj.columns, fill_value=fill_value)
A:pandas.core.reshape.reshape.new_index->MultiIndex(levels=new_levels, labels=new_labels, names=new_names, verify_integrity=False)
A:pandas.core.reshape.reshape.bunstacker->_Unstacker(blk.values.T, obj.index, level=level, value_columns=blk_items, fill_value=fill_value)
A:pandas.core.reshape.reshape.new_items->_Unstacker(blk.values.T, obj.index, level=level, value_columns=blk_items, fill_value=fill_value).get_new_columns()
A:pandas.core.reshape.reshape.new_placement->new_columns.difference(drop_cols).difference(drop_cols).get_indexer(new_items)
A:pandas.core.reshape.reshape.(new_values, mask)->_Unstacker(blk.values.T, obj.index, level=level, value_columns=blk_items, fill_value=fill_value).get_new_values()
A:pandas.core.reshape.reshape.mblk->make_block(mask.T, placement=new_placement)
A:pandas.core.reshape.reshape.newb->make_block(new_values.T, placement=new_placement)
A:pandas.core.reshape.reshape.mask_frame->DataFrame(BlockManager(mask_blocks, new_axes))
A:pandas.core.reshape.reshape.(codes, categories)->_factorize_from_iterable(index)
A:pandas.core.reshape.reshape.level_num->frame.copy().columns._get_level_number(level)
A:pandas.core.reshape.reshape.new_levels->list(this.index.levels)
A:pandas.core.reshape.reshape.(clev, clab)->factorize(frame.columns)
A:pandas.core.reshape.reshape.new_names->list(this.index.names)
A:pandas.core.reshape.reshape.(levels, (ilab, clab))->zip(*map(factorize, (frame.index, frame.columns)))
A:pandas.core.reshape.reshape.this->this.sort_index(level=level_to_sort, axis=1).sort_index(level=level_to_sort, axis=1)
A:pandas.core.reshape.reshape.lev1->_convert_level_number(i, roll_columns)
A:pandas.core.reshape.reshape.lev2->_convert_level_number(i + 1, roll_columns)
A:pandas.core.reshape.reshape.roll_columns->roll_columns.swaplevel(lev1, lev2).swaplevel(lev1, lev2)
A:pandas.core.reshape.reshape.level_to_sort->_convert_level_number(0, this.columns)
A:pandas.core.reshape.reshape.tuples->list(zip(*[lev.take(lab) for (lev, lab) in zip(this.columns.levels[:-1], this.columns.labels[:-1])]))
A:pandas.core.reshape.reshape.level_labels->sorted(set(this.columns.labels[-1]))
A:pandas.core.reshape.reshape.levsize->len(level_labels)
A:pandas.core.reshape.reshape.loc->this.sort_index(level=level_to_sort, axis=1).sort_index(level=level_to_sort, axis=1).columns.get_loc(key)
A:pandas.core.reshape.reshape.slice_len->len(loc)
A:pandas.core.reshape.reshape.chunk.columns->level_vals.take(chunk.columns.labels[-1])
A:pandas.core.reshape.reshape.new_data[key]->value_slice.ravel()
A:pandas.core.reshape.reshape.N->len(data)
A:pandas.core.reshape.reshape.id_vars->list(set(df.columns.tolist()).difference(value_vars_flattened))
A:pandas.core.reshape.reshape.value_vars->list(map(lambda stub: get_var_names(df, stub, sep, suffix), stubnames))
A:pandas.core.reshape.reshape.frame->frame.copy().copy()
A:pandas.core.reshape.reshape.frame.columns->frame.copy().copy().columns.get_level_values(col_level)
A:pandas.core.reshape.reshape.mdata[col]->numpy.tile(data[col].values, K)
A:pandas.core.reshape.reshape.mdata[value_name]->frame.copy().copy().values.ravel('F')
A:pandas.core.reshape.reshape.keys->list(groups.keys())
A:pandas.core.reshape.reshape.(keys, values)->zip(*groups)
A:pandas.core.reshape.reshape.all_cols->list(set.union(*[set(x) for x in values]))
A:pandas.core.reshape.reshape.id_cols->list(data.columns.difference(all_cols))
A:pandas.core.reshape.reshape.K->len(values[0])
A:pandas.core.reshape.reshape.mdata[target]->pandas.core.dtypes.concat._concat_compat(to_concat)
A:pandas.core.reshape.reshape.mdata->dict(((k, v[mask]) for (k, v) in compat.iteritems(mdata)))
A:pandas.core.reshape.reshape.regex->'^{0}{1}{2}'.format(re.escape(stub), re.escape(sep), suffix)
A:pandas.core.reshape.reshape.newdf->melt(df, id_vars=i, value_vars=value_vars, value_name=stub.rstrip(sep), var_name=j)
A:pandas.core.reshape.reshape.newdf[j]->newdf[j].str.replace(re.escape(stub + sep), '').str.replace(re.escape(stub + sep), '')
A:pandas.core.reshape.reshape.stubnames->list(stubnames)
A:pandas.core.reshape.reshape.i->list(i)
A:pandas.core.reshape.reshape.melted->melted[0].join(melted[1:], how='outer')
A:pandas.core.reshape.reshape.new->df[id_vars].merge(melted.reset_index(), on=i).set_index(i + [j])
A:pandas.core.reshape.reshape.prefix->cycle([prefix])
A:pandas.core.reshape.reshape.prefix_sep->cycle([prefix_sep])
A:pandas.core.reshape.reshape.(codes, levels)->_factorize_from_iterable(Series(data))
A:pandas.core.reshape.reshape.codes->codes.copy().copy()
A:pandas.core.reshape.reshape.codes[codes == -1]->len(levels)
A:pandas.core.reshape.reshape.levels->numpy.append(levels, np.nan)
A:pandas.core.reshape.reshape.number_of_cols->len(levels)
A:pandas.core.reshape.reshape.sarr->SparseArray(np.ones(len(ixs), dtype=np.uint8), sparse_index=IntIndex(N, ixs), fill_value=0, dtype=np.uint8)
A:pandas.core.reshape.reshape.sparse_series[col]->SparseSeries(data=sarr, index=index)
A:pandas.core.reshape.reshape.out->SparseDataFrame(sparse_series, index=index, columns=dummy_cols, default_fill_value=0, dtype=np.uint8)
A:pandas.core.reshape.reshape.dummy_mat->numpy.eye(number_of_cols, dtype=np.uint8).take(codes, axis=0)
A:pandas.core.reshape.reshape.num->numbers.get(axis, axis)
A:pandas.core.reshape.reshape.mapped_items->items.map(transform)
A:pandas.core.reshape.reshape.(labels, items)->_factorize_from_iterable(mapped_items.take(labels))
pandas.core.reshape.reshape._Unstacker(self,values,index,level=-1,value_columns=None,fill_value=None)
pandas.core.reshape.reshape._Unstacker.__init__(self,values,index,level=-1,value_columns=None,fill_value=None)
pandas.core.reshape.reshape._Unstacker._make_selectors(self)
pandas.core.reshape.reshape._Unstacker._make_sorted_values_labels(self)
pandas.core.reshape.reshape._Unstacker.get_new_columns(self)
pandas.core.reshape.reshape._Unstacker.get_new_index(self)
pandas.core.reshape.reshape._Unstacker.get_new_values(self)
pandas.core.reshape.reshape._Unstacker.get_result(self)
pandas.core.reshape.reshape._get_dummies_1d(data,prefix,prefix_sep='_',dummy_na=False,sparse=False,drop_first=False)
pandas.core.reshape.reshape._slow_pivot(index,columns,values)
pandas.core.reshape.reshape._stack_multi_columns(frame,level_num=-1,dropna=True)
pandas.core.reshape.reshape._unstack_frame(obj,level,fill_value=None)
pandas.core.reshape.reshape._unstack_multiple(data,clocs)
pandas.core.reshape.reshape.get_dummies(data,prefix=None,prefix_sep='_',dummy_na=False,columns=None,sparse=False,drop_first=False)
pandas.core.reshape.reshape.lreshape(data,groups,dropna=True,label=None)
pandas.core.reshape.reshape.make_axis_dummies(frame,axis='minor',transform=None)
pandas.core.reshape.reshape.melt(frame,id_vars=None,value_vars=None,var_name=None,value_name='value',col_level=None)
pandas.core.reshape.reshape.pivot(self,index=None,columns=None,values=None)
pandas.core.reshape.reshape.pivot_simple(index,columns,values)
pandas.core.reshape.reshape.stack(frame,level=-1,dropna=True)
pandas.core.reshape.reshape.stack_multiple(frame,level,dropna=True)
pandas.core.reshape.reshape.unstack(obj,level,fill_value=None)
pandas.core.reshape.reshape.wide_to_long(df,stubnames,i,j,sep='',suffix='\\d+')


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/indexes/category.py----------------------------------------
A:pandas.core.indexes.category._index_doc_kwargs->dict(ibase._index_doc_kwargs)
A:pandas.core.indexes.category.data->data.set_ordered(ordered).set_ordered(ordered)
A:pandas.core.indexes.category.cat->Categorical(values, categories=self.categories, ordered=self.ordered)
A:pandas.core.indexes.category.result->self._create_from_codes(codes, name=name)
A:pandas.core.indexes.category.values->numpy.where(cond, self.values, other)
A:pandas.core.indexes.category.other->self._create_categorical(self, other._values, categories=self.categories, ordered=self.ordered)
A:pandas.core.indexes.category.codes->numpy.concatenate([c.codes for c in to_concat])
A:pandas.core.indexes.category.k->self._convert_scalar_indexer(k, kind='getitem')
A:pandas.core.indexes.category.indexer->self.categories.get_indexer(np.asarray(keyarr))
A:pandas.core.indexes.category.target->pandas.core.indexes.base._ensure_index(target)
A:pandas.core.indexes.category.(indexer, missing)->self.get_indexer_non_unique(np.array(target))
A:pandas.core.indexes.category.new_target->self._shallow_copy(new_target)
A:pandas.core.indexes.category.cats->self.categories.get_indexer(target)
A:pandas.core.indexes.category.(new_target, indexer, _)->self._create_from_codes(codes, name=name)._reindex_non_unique(np.array(target))
A:pandas.core.indexes.category.(new_target, indexer)->self.reindex(target)
A:pandas.core.indexes.category.new_indexer->numpy.arange(len(self.take(indexer)))
A:pandas.core.indexes.category.method->getattr(self._values, name)
A:pandas.core.indexes.category.code_indexer->self.categories.get_indexer(target.categories)
A:pandas.core.indexes.category.(indexer, _)->self._engine.get_indexer_non_unique(codes)
A:pandas.core.indexes.category.keyarr->_asarray_tuplesafe(keyarr)
A:pandas.core.indexes.category.indices->_ensure_platform_int(indices)
A:pandas.core.indexes.category.taken->self._assert_take_fillable(self.codes, indices, allow_fill=allow_fill, fill_value=fill_value, na_value=-1)
A:pandas.core.indexes.category.code->self.categories.get_indexer([item])
A:pandas.core.indexes.category.cls.__eq__->_make_compare('__eq__')
A:pandas.core.indexes.category.cls.__ne__->_make_compare('__ne__')
A:pandas.core.indexes.category.cls.__lt__->_make_compare('__lt__')
A:pandas.core.indexes.category.cls.__gt__->_make_compare('__gt__')
A:pandas.core.indexes.category.cls.__le__->_make_compare('__le__')
A:pandas.core.indexes.category.cls.__ge__->_make_compare('__ge__')
A:pandas.core.indexes.category.res->method(*args, **kwargs)
pandas.core.indexes.category.CategoricalIndex(cls,data=None,categories=None,ordered=None,dtype=None,copy=False,name=None,fastpath=False,**kwargs)
pandas.core.indexes.category.CategoricalIndex.__array__(self,dtype=None)
pandas.core.indexes.category.CategoricalIndex.__contains__(self,key)
pandas.core.indexes.category.CategoricalIndex.__new__(cls,data=None,categories=None,ordered=None,dtype=None,copy=False,name=None,fastpath=False,**kwargs)
pandas.core.indexes.category.CategoricalIndex._add_accessors(cls)
pandas.core.indexes.category.CategoricalIndex._add_comparison_methods(cls)
pandas.core.indexes.category.CategoricalIndex._append_same_dtype(self,to_concat,name)
pandas.core.indexes.category.CategoricalIndex._can_reindex(self,indexer)
pandas.core.indexes.category.CategoricalIndex._codes_for_groupby(self,sort)
pandas.core.indexes.category.CategoricalIndex._convert_arr_indexer(self,keyarr)
pandas.core.indexes.category.CategoricalIndex._convert_index_indexer(self,keyarr)
pandas.core.indexes.category.CategoricalIndex._convert_list_indexer(self,keyarr,kind=None)
pandas.core.indexes.category.CategoricalIndex._convert_scalar_indexer(self,key,kind=None)
pandas.core.indexes.category.CategoricalIndex._create_categorical(self,data,categories=None,ordered=None)
pandas.core.indexes.category.CategoricalIndex._create_from_codes(self,codes,categories=None,ordered=None,name=None)
pandas.core.indexes.category.CategoricalIndex._delegate_method(self,name,*args,**kwargs)
pandas.core.indexes.category.CategoricalIndex._engine(self)
pandas.core.indexes.category.CategoricalIndex._format_attrs(self)
pandas.core.indexes.category.CategoricalIndex._formatter_func(self)
pandas.core.indexes.category.CategoricalIndex._is_dtype_compat(self,other)
pandas.core.indexes.category.CategoricalIndex._isnan(self)
pandas.core.indexes.category.CategoricalIndex._reindex_non_unique(self,target)
pandas.core.indexes.category.CategoricalIndex._reverse_indexer(self)
pandas.core.indexes.category.CategoricalIndex._shallow_copy(self,values=None,categories=None,ordered=None,**kwargs)
pandas.core.indexes.category.CategoricalIndex._simple_new(cls,values,name=None,categories=None,ordered=None,**kwargs)
pandas.core.indexes.category.CategoricalIndex._to_safe_for_reshape(self)
pandas.core.indexes.category.CategoricalIndex.argsort(self,*args,**kwargs)
pandas.core.indexes.category.CategoricalIndex.astype(self,dtype,copy=True)
pandas.core.indexes.category.CategoricalIndex.categories(self)
pandas.core.indexes.category.CategoricalIndex.codes(self)
pandas.core.indexes.category.CategoricalIndex.contains(self,key)
pandas.core.indexes.category.CategoricalIndex.delete(self,loc)
pandas.core.indexes.category.CategoricalIndex.duplicated(self,keep='first')
pandas.core.indexes.category.CategoricalIndex.equals(self,other)
pandas.core.indexes.category.CategoricalIndex.fillna(self,value,downcast=None)
pandas.core.indexes.category.CategoricalIndex.get_indexer(self,target,method=None,limit=None,tolerance=None)
pandas.core.indexes.category.CategoricalIndex.get_indexer_non_unique(self,target)
pandas.core.indexes.category.CategoricalIndex.get_loc(self,key,method=None)
pandas.core.indexes.category.CategoricalIndex.get_value(self,series,key)
pandas.core.indexes.category.CategoricalIndex.get_values(self)
pandas.core.indexes.category.CategoricalIndex.inferred_type(self)
pandas.core.indexes.category.CategoricalIndex.insert(self,loc,item)
pandas.core.indexes.category.CategoricalIndex.is_unique(self)
pandas.core.indexes.category.CategoricalIndex.map(self,mapper)
pandas.core.indexes.category.CategoricalIndex.ordered(self)
pandas.core.indexes.category.CategoricalIndex.reindex(self,target,method=None,level=None,limit=None,tolerance=None)
pandas.core.indexes.category.CategoricalIndex.take(self,indices,axis=0,allow_fill=True,fill_value=None,**kwargs)
pandas.core.indexes.category.CategoricalIndex.unique(self)
pandas.core.indexes.category.CategoricalIndex.values(self)
pandas.core.indexes.category.CategoricalIndex.where(self,cond,other=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/indexes/period.py----------------------------------------
A:pandas.core.indexes.period._index_doc_kwargs->dict(ibase._index_doc_kwargs)
A:pandas.core.indexes.period.(base, mult)->_gfc(freq)
A:pandas.core.indexes.period.result->self._apply_meta(result)
A:pandas.core.indexes.period.freq->pandas._libs.period.Period._maybe_convert_freq(freq)
A:pandas.core.indexes.period.func->getattr(self._values, opname)
A:pandas.core.indexes.period.(other_base, _)->_gfc(other.freq)
A:pandas.core.indexes.period.msg->_DIFFERENT_FREQ_INDEX.format(self.freqstr, other.freqstr)
A:pandas.core.indexes.period.other->Period(other, freq=self.freq)
A:pandas.core.indexes.period.values->numpy.array([formatter(dt) for dt in values])
A:pandas.core.indexes.period.__eq__->_period_index_cmp('__eq__')
A:pandas.core.indexes.period.__ne__->_period_index_cmp('__ne__', nat_result=True)
A:pandas.core.indexes.period.__lt__->_period_index_cmp('__lt__')
A:pandas.core.indexes.period.__gt__->_period_index_cmp('__gt__')
A:pandas.core.indexes.period.__le__->_period_index_cmp('__le__')
A:pandas.core.indexes.period.__ge__->_period_index_cmp('__ge__')
A:pandas.core.indexes.period.periods->int(periods)
A:pandas.core.indexes.period.dtype->pandas_dtype(dtype)
A:pandas.core.indexes.period.data->numpy.arange(start.ordinal, end.ordinal + 1, mult, dtype=np.int64)
A:pandas.core.indexes.period.(data, freq)->cls._generate_range(start, end, periods, freq, kwargs)
A:pandas.core.indexes.period.(base1, _)->_gfc(data.freq)
A:pandas.core.indexes.period.(base2, _)->_gfc(freq)
A:pandas.core.indexes.period.field_count->len(fields)
A:pandas.core.indexes.period.(subarr, freq)->_range_from_fields(freq=freq, **fields)
A:pandas.core.indexes.period.result.freq->pandas._libs.period.Period._maybe_convert_freq(freq)
A:pandas.core.indexes.period.where_idx->PeriodIndex(where_idx.values, freq=self.freq)
A:pandas.core.indexes.period.locs->numpy.where(locs > 0, locs - 1, 0)
A:pandas.core.indexes.period.first->mask.argmax()
A:pandas.core.indexes.period.how->_validate_end_alias(how)
A:pandas.core.indexes.period.(base1, mult1)->_gfc(self.freq)
A:pandas.core.indexes.period.(base2, mult2)->_gfc(freq)
A:pandas.core.indexes.period.new_data->new_data.astype(np.float64).astype(np.float64)
A:pandas.core.indexes.period.year->_field_accessor('year', 0, 'The year of the period')
A:pandas.core.indexes.period.month->_field_accessor('month', 3, 'The month as January=1, December=12')
A:pandas.core.indexes.period.day->_field_accessor('day', 4, 'The days of the period')
A:pandas.core.indexes.period.hour->_field_accessor('hour', 5, 'The hour of the period')
A:pandas.core.indexes.period.minute->_field_accessor('minute', 6, 'The minute of the period')
A:pandas.core.indexes.period.second->_field_accessor('second', 7, 'The second of the period')
A:pandas.core.indexes.period.weekofyear->_field_accessor('week', 8, 'The week ordinal of the year')
A:pandas.core.indexes.period.dayofweek->_field_accessor('dayofweek', 10, 'The day of the week with Monday=0, Sunday=6')
A:pandas.core.indexes.period.dayofyearday_of_year->_field_accessor('dayofyear', 9, 'The ordinal day of the year')
A:pandas.core.indexes.period.quarter->_field_accessor('quarter', 2, 'The quarter of the date')
A:pandas.core.indexes.period.qyear->_field_accessor('qyear', 1)
A:pandas.core.indexes.period.days_in_month->_field_accessor('days_in_month', 11, 'The number of days in the month')
A:pandas.core.indexes.period.offset->pandas.tseries.frequencies.to_offset(self.freq)
A:pandas.core.indexes.period.nanos->pandas._libs.tslib._delta_to_nanoseconds(other)
A:pandas.core.indexes.period.offset_nanos->pandas._libs.tslib._delta_to_nanoseconds(offset)
A:pandas.core.indexes.period.base->pandas.tseries.frequencies.get_base_alias(freqstr)
A:pandas.core.indexes.period.ordinal_delta->self._maybe_convert_timedelta(other)
A:pandas.core.indexes.period.s->pandas.core.common._values_from_object(series)
A:pandas.core.indexes.period.(asdt, parsed, reso)->parse_time_string(key, self.freq)
A:pandas.core.indexes.period.grp->pandas.tseries.frequencies.Resolution.get_freq_group(reso)
A:pandas.core.indexes.period.freqn->pandas.tseries.frequencies.get_freq_group(self.freq)
A:pandas.core.indexes.period.iv->Period(asdt, freq=(grp, 1))
A:pandas.core.indexes.period.pos->numpy.searchsorted(self._values, [ord1, ord2])
A:pandas.core.indexes.period.key->Period(key, freq=self.freq)
A:pandas.core.indexes.period.target->_ensure_index(target)
A:pandas.core.indexes.period.tolerance->pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._convert_tolerance(self, tolerance)
A:pandas.core.indexes.period.res->res.dropna().dropna()
A:pandas.core.indexes.period.(_, parsed, reso)->parse_time_string(label, self.freq)
A:pandas.core.indexes.period.bounds->self._parsed_string_to_bounds(reso, parsed)
A:pandas.core.indexes.period.t1->Period(year=parsed.year, month=parsed.month, day=parsed.day, hour=parsed.hour, minute=parsed.minute, second=parsed.second, freq='S')
A:pandas.core.indexes.period.(key, parsed, reso)->parse_time_string(key, self.freq)
A:pandas.core.indexes.period.(t1, t2)->self._parsed_string_to_bounds(reso, parsed)
A:pandas.core.indexes.period.idx->numpy.concatenate((self[:loc].asi8, np.array([item.ordinal]), self[loc:].asi8))
A:pandas.core.indexes.period.rawarr->PeriodIndex._from_ordinals(rawarr, freq=self.freq, name=self.name)
A:pandas.core.indexes.period.values[imask]->numpy.array([formatter(dt) for dt in values[imask]])
A:pandas.core.indexes.period.self.freq->pandas._libs.period.Period._maybe_convert_freq(own_state[1])
A:pandas.core.indexes.period.(_, mult)->_gfc(freq)
A:pandas.core.indexes.period.start->Period(start, freq)
A:pandas.core.indexes.period.end->Period(end, freq)
A:pandas.core.indexes.period.is_start_per->isinstance(start, Period)
A:pandas.core.indexes.period.is_end_per->isinstance(end, Period)
A:pandas.core.indexes.period.(year, quarter)->_make_field_arrays(year, quarter)
A:pandas.core.indexes.period.(y, m)->_quarter_to_myear(y, q, freq)
A:pandas.core.indexes.period.val->pandas._libs.period.period_ordinal(y, m, 1, 1, 1, 1, 0, 0, base)
A:pandas.core.indexes.period.arrays->_make_field_arrays(year, month, day, hour, minute, second)
A:pandas.core.indexes.period.length->len(x)
pandas.core.indexes.period.PeriodIndex(cls,data=None,ordinal=None,freq=None,start=None,end=None,periods=None,copy=False,name=None,tz=None,dtype=None,**kwargs)
pandas.core.indexes.period.PeriodIndex.__array__(self,dtype=None)
pandas.core.indexes.period.PeriodIndex.__array_wrap__(self,result,context=None)
pandas.core.indexes.period.PeriodIndex.__contains__(self,key)
pandas.core.indexes.period.PeriodIndex.__new__(cls,data=None,ordinal=None,freq=None,start=None,end=None,periods=None,copy=False,name=None,tz=None,dtype=None,**kwargs)
pandas.core.indexes.period.PeriodIndex.__setstate__(self,state)
pandas.core.indexes.period.PeriodIndex._add_delta(self,other)
pandas.core.indexes.period.PeriodIndex._apply_meta(self,rawarr)
pandas.core.indexes.period.PeriodIndex._assert_can_do_setop(self,other)
pandas.core.indexes.period.PeriodIndex._box_func(self)
pandas.core.indexes.period.PeriodIndex._coerce_scalar_to_index(self,item)
pandas.core.indexes.period.PeriodIndex._convert_tolerance(self,tolerance)
pandas.core.indexes.period.PeriodIndex._format_native_types(self,na_rep=u('NaT'),date_format=None,**kwargs)
pandas.core.indexes.period.PeriodIndex._formatter_func(self)
pandas.core.indexes.period.PeriodIndex._from_ordinals(cls,values,name=None,freq=None,**kwargs)
pandas.core.indexes.period.PeriodIndex._generate_range(cls,start,end,periods,freq,fields)
pandas.core.indexes.period.PeriodIndex._get_string_slice(self,key)
pandas.core.indexes.period.PeriodIndex._get_unique_index(self,dropna=False)
pandas.core.indexes.period.PeriodIndex._int64index(self)
pandas.core.indexes.period.PeriodIndex._maybe_cast_slice_bound(self,label,side,kind)
pandas.core.indexes.period.PeriodIndex._maybe_convert_timedelta(self,other)
pandas.core.indexes.period.PeriodIndex._mpl_repr(self)
pandas.core.indexes.period.PeriodIndex._parsed_string_to_bounds(self,reso,parsed)
pandas.core.indexes.period.PeriodIndex._shallow_copy(self,values=None,freq=None,**kwargs)
pandas.core.indexes.period.PeriodIndex._shallow_copy_with_infer(self,values=None,**kwargs)
pandas.core.indexes.period.PeriodIndex._simple_new(cls,values,name=None,freq=None,**kwargs)
pandas.core.indexes.period.PeriodIndex._sub_datelike(self,other)
pandas.core.indexes.period.PeriodIndex._sub_period(self,other)
pandas.core.indexes.period.PeriodIndex._to_embed(self,keep_tz=False)
pandas.core.indexes.period.PeriodIndex._values(self)
pandas.core.indexes.period.PeriodIndex._wrap_union_result(self,other,result)
pandas.core.indexes.period.PeriodIndex.asfreq(self,freq=None,how='E')
pandas.core.indexes.period.PeriodIndex.asi8(self)
pandas.core.indexes.period.PeriodIndex.asof_locs(self,where,mask)
pandas.core.indexes.period.PeriodIndex.astype(self,dtype,copy=True,how='start')
pandas.core.indexes.period.PeriodIndex.dtype(self)
pandas.core.indexes.period.PeriodIndex.end_time(self)
pandas.core.indexes.period.PeriodIndex.get_indexer(self,target,method=None,limit=None,tolerance=None)
pandas.core.indexes.period.PeriodIndex.get_loc(self,key,method=None,tolerance=None)
pandas.core.indexes.period.PeriodIndex.get_value(self,series,key)
pandas.core.indexes.period.PeriodIndex.inferred_type(self)
pandas.core.indexes.period.PeriodIndex.insert(self,loc,item)
pandas.core.indexes.period.PeriodIndex.is_all_dates(self)
pandas.core.indexes.period.PeriodIndex.is_full(self)
pandas.core.indexes.period.PeriodIndex.is_leap_year(self)
pandas.core.indexes.period.PeriodIndex.join(self,other,how='left',level=None,return_indexers=False)
pandas.core.indexes.period.PeriodIndex.searchsorted(self,value,side='left',sorter=None)
pandas.core.indexes.period.PeriodIndex.shift(self,n)
pandas.core.indexes.period.PeriodIndex.start_time(self)
pandas.core.indexes.period.PeriodIndex.to_datetime(self,dayfirst=False)
pandas.core.indexes.period.PeriodIndex.to_timestamp(self,freq=None,how='start')
pandas.core.indexes.period.PeriodIndex.tz_convert(self,tz)
pandas.core.indexes.period.PeriodIndex.tz_localize(self,tz,infer_dst=False)
pandas.core.indexes.period.PeriodIndex.values(self)
pandas.core.indexes.period._field_accessor(name,alias,docstring=None)
pandas.core.indexes.period._get_ordinal_range(start,end,periods,freq,mult=1)
pandas.core.indexes.period._make_field_arrays(*fields)
pandas.core.indexes.period._new_PeriodIndex(cls,**d)
pandas.core.indexes.period._period_index_cmp(opname,nat_result=False)
pandas.core.indexes.period._range_from_fields(year=None,month=None,quarter=None,day=None,hour=None,minute=None,second=None,freq=None)
pandas.core.indexes.period.dt64arr_to_periodarr(data,freq,tz)
pandas.core.indexes.period.period_range(start=None,end=None,periods=None,freq='D',name=None)
pandas.core.indexes.period.pnow(freq=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/indexes/numeric.py----------------------------------------
A:pandas.core.indexes.numeric._num_index_shared_docs->dict()
A:pandas.core.indexes.numeric.data->cls._coerce_to_ndarray(data)
A:pandas.core.indexes.numeric.subarr->numpy.array(data, dtype=cls._default_dtype, copy=copy)
A:pandas.core.indexes.numeric._int64_descr_args->dict(klass='Int64Index', ltype='integer', dtype='int64', extra='This is the default index type used\n    by the DataFrame and Series ctors when no explicit\n    index is provided by the user.\n')
A:pandas.core.indexes.numeric.key->self._maybe_cast_indexer(key)
A:pandas.core.indexes.numeric._uint64_descr_args->dict(klass='UInt64Index', ltype='unsigned integer', dtype='uint64', extra='')
A:pandas.core.indexes.numeric.keyarr->_asarray_tuplesafe(keyarr)
A:pandas.core.indexes.numeric._float64_descr_args->dict(klass='Float64Index', dtype='float64', ltype='float', extra='')
A:pandas.core.indexes.numeric.dtype->pandas_dtype(dtype)
A:pandas.core.indexes.numeric.values->self._values.astype('object', copy=copy)
A:pandas.core.indexes.numeric.formatter->FloatArrayFormatter(self.values, na_rep=na_rep, float_format=float_format, decimal=decimal, quoting=quoting, fixed_width=False)
A:pandas.core.indexes.numeric.k->_values_from_object(key)
A:pandas.core.indexes.numeric.loc->self.get_loc(k)
A:pandas.core.indexes.numeric.other->self._constructor(other)
pandas.core.indexes.numeric.Float64Index(NumericIndex)
pandas.core.indexes.numeric.Float64Index.__contains__(self,other)
pandas.core.indexes.numeric.Float64Index._convert_scalar_indexer(self,key,kind=None)
pandas.core.indexes.numeric.Float64Index._convert_slice_indexer(self,key,kind=None)
pandas.core.indexes.numeric.Float64Index._format_native_types(self,na_rep='',float_format=None,decimal='.',quoting=None,**kwargs)
pandas.core.indexes.numeric.Float64Index.astype(self,dtype,copy=True)
pandas.core.indexes.numeric.Float64Index.equals(self,other)
pandas.core.indexes.numeric.Float64Index.get_loc(self,key,method=None,tolerance=None)
pandas.core.indexes.numeric.Float64Index.get_value(self,series,key)
pandas.core.indexes.numeric.Float64Index.inferred_type(self)
pandas.core.indexes.numeric.Float64Index.is_unique(self)
pandas.core.indexes.numeric.Float64Index.isin(self,values,level=None)
pandas.core.indexes.numeric.Int64Index(NumericIndex)
pandas.core.indexes.numeric.Int64Index._assert_safe_casting(cls,data,subarr)
pandas.core.indexes.numeric.Int64Index._convert_scalar_indexer(self,key,kind=None)
pandas.core.indexes.numeric.Int64Index._wrap_joined_index(self,joined,other)
pandas.core.indexes.numeric.Int64Index.asi8(self)
pandas.core.indexes.numeric.Int64Index.inferred_type(self)
pandas.core.indexes.numeric.NumericIndex(cls,data=None,dtype=None,copy=False,name=None,fastpath=False)
pandas.core.indexes.numeric.NumericIndex.__new__(cls,data=None,dtype=None,copy=False,name=None,fastpath=False)
pandas.core.indexes.numeric.NumericIndex._assert_safe_casting(cls,data,subarr)
pandas.core.indexes.numeric.NumericIndex._convert_tolerance(self,tolerance)
pandas.core.indexes.numeric.NumericIndex._maybe_cast_slice_bound(self,label,side,kind)
pandas.core.indexes.numeric.NumericIndex.is_all_dates(self)
pandas.core.indexes.numeric.UInt64Index(NumericIndex)
pandas.core.indexes.numeric.UInt64Index._assert_safe_casting(cls,data,subarr)
pandas.core.indexes.numeric.UInt64Index._convert_arr_indexer(self,keyarr)
pandas.core.indexes.numeric.UInt64Index._convert_index_indexer(self,keyarr)
pandas.core.indexes.numeric.UInt64Index._convert_scalar_indexer(self,key,kind=None)
pandas.core.indexes.numeric.UInt64Index._wrap_joined_index(self,joined,other)
pandas.core.indexes.numeric.UInt64Index.asi8(self)
pandas.core.indexes.numeric.UInt64Index.inferred_type(self)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/indexes/datetimelike.py----------------------------------------
A:pandas.core.indexes.datetimelike._index_doc_kwargs->dict(ibase._index_doc_kwargs)
A:pandas.core.indexes.datetimelike.strftime.__doc__->'\n    Return an array of formatted strings specified by date_format, which\n    supports the same string format as the python standard library. Details\n    of the string format can be found in `python string format doc <{0}>`__\n\n    .. versionadded:: 0.17.0\n\n    Parameters\n    ----------\n    date_format : str\n        date format string (e.g. "%Y-%m-%d")\n\n    Returns\n    -------\n    ndarray of formatted strings\n    '.format('https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior')
A:pandas.core.indexes.datetimelike.values->_ensure_datetimelike_to_i8(self)
A:pandas.core.indexes.datetimelike.result->result.replace("'", '').replace("'", '')
A:pandas.core.indexes.datetimelike.attribs->self._get_attributes_dict()
A:pandas.core.indexes.datetimelike.other->numpy.array(other, copy=False).view('i8')
A:pandas.core.indexes.datetimelike.left->left.view('i8').view('i8')
A:pandas.core.indexes.datetimelike.right->right.view('i8').view('i8')
A:pandas.core.indexes.datetimelike.results->joinf(left, right)
A:pandas.core.indexes.datetimelike.join_index->join_index.view(dtype).view(dtype)
A:pandas.core.indexes.datetimelike.res->self.get_loc(key)
A:pandas.core.indexes.datetimelike.is_int->is_integer(key)
A:pandas.core.indexes.datetimelike.val->getitem(key)
A:pandas.core.indexes.datetimelike.key->pandas._libs.lib.maybe_booleans_to_slice(key.view(np.uint8))
A:pandas.core.indexes.datetimelike.is_period->isinstance(self, ABCPeriodIndex)
A:pandas.core.indexes.datetimelike._as->self.argsort()
A:pandas.core.indexes.datetimelike.sorted_index->self.take(_as)
A:pandas.core.indexes.datetimelike.sorted_values->numpy.sort(self._values)
A:pandas.core.indexes.datetimelike.indices->_ensure_int64(indices)
A:pandas.core.indexes.datetimelike.maybe_slice->pandas._libs.lib.maybe_indices_to_slice(indices, len(self))
A:pandas.core.indexes.datetimelike.taken->self._assert_take_fillable(self.asi8, indices, allow_fill=allow_fill, fill_value=fill_value, na_value=iNaT)
A:pandas.core.indexes.datetimelike.min_stamp->i8.copy().min()
A:pandas.core.indexes.datetimelike.i8->i8.copy().copy()
A:pandas.core.indexes.datetimelike.max_stamp->i8.copy().copy().max()
A:pandas.core.indexes.datetimelike.attrs->super(DatetimeIndexOpsMixin, self)._format_attrs()
A:pandas.core.indexes.datetimelike.is_flt->is_float(key)
A:pandas.core.indexes.datetimelike.inc->pandas._libs.tslib._delta_to_nanoseconds(other)
A:pandas.core.indexes.datetimelike.new_values->checked_add_with_arr(self_i8, other_i8, arr_mask=self._isnan, b_mask=other._isnan)
A:pandas.core.indexes.datetimelike.freq->pandas.tseries.frequencies.to_offset(freq)
A:pandas.core.indexes.datetimelike.new_data->numpy.concatenate([c.asi8 for c in to_concat])
pandas.core.indexes.datetimelike.DatelikeOps(object)
pandas.core.indexes.datetimelike.DatelikeOps.strftime(self,date_format)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin(object)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.__contains__(self,key)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.__getitem__(self,key)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.__iter__(self)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._add_datelike(self,other)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._add_datetimelike_methods(cls)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._add_delta(self,other)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._add_delta_td(self,other)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._add_delta_tdi(self,other)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._append_same_dtype(self,to_concat,name)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._box_func(self)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._box_values(self,values)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._convert_scalar_indexer(self,key,kind=None)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._convert_tolerance(self,tolerance)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._ensure_localized(self,result)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._evaluate_compare(self,other,op)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._format_attrs(self)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._format_with_header(self,header,**kwargs)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._formatter_func(self)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._isnan(self)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._join_i8_wrapper(joinf,dtype,with_indexers=True)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._maybe_mask_results(self,result,fill_value=None,convert=None)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._nat_new(self,box=True)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._resolution(self)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._sub_datelike(self,other)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin._sub_period(self,other)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.argmax(self,axis=None,*args,**kwargs)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.argmin(self,axis=None,*args,**kwargs)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.asobject(self)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.equals(self,other)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.freqstr(self)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.get_duplicates(self)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.inferred_freq(self)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.isin(self,values)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.map(self,f)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.max(self,axis=None,*args,**kwargs)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.min(self,axis=None,*args,**kwargs)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.repeat(self,repeats,*args,**kwargs)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.resolution(self)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.shift(self,n,freq=None)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.sort_values(self,return_indexer=False,ascending=True)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.summary(self,name=None)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.take(self,indices,axis=0,allow_fill=True,fill_value=None,**kwargs)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.tolist(self)
pandas.core.indexes.datetimelike.DatetimeIndexOpsMixin.where(self,cond,other=None)
pandas.core.indexes.datetimelike.TimelikeOps(object)
pandas.core.indexes.datetimelike.TimelikeOps._round(self,freq,rounder)
pandas.core.indexes.datetimelike.TimelikeOps.ceil(self,freq)
pandas.core.indexes.datetimelike.TimelikeOps.floor(self,freq)
pandas.core.indexes.datetimelike.TimelikeOps.round(self,freq,*args,**kwargs)
pandas.core.indexes.datetimelike._ensure_datetimelike_to_i8(other)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/indexes/datetimes.py----------------------------------------
A:pandas.core.indexes.datetimes.utc->_utc()
A:pandas.core.indexes.datetimes.values->self._engine.get_value(_values_from_object(series), key, tz=self.tz)
A:pandas.core.indexes.datetimes.result->self._shallow_copy(result._values, name=result.name, tz=result.tz, freq=None)
A:pandas.core.indexes.datetimes.func->getattr(super(DatetimeIndex, self), opname)
A:pandas.core.indexes.datetimes.other->DatetimeIndex(other)
A:pandas.core.indexes.datetimes._midnight->time(0, 0)
A:pandas.core.indexes.datetimes.tz->pandas._libs.tslib.maybe_get_tz(tz)
A:pandas.core.indexes.datetimes._inner_indexer->_join_i8_wrapper(libjoin.inner_join_indexer_int64)
A:pandas.core.indexes.datetimes._outer_indexer->_join_i8_wrapper(libjoin.outer_join_indexer_int64)
A:pandas.core.indexes.datetimes._left_indexer->_join_i8_wrapper(libjoin.left_join_indexer_int64)
A:pandas.core.indexes.datetimes._left_indexer_unique->_join_i8_wrapper(libjoin.left_join_indexer_unique_int64, with_indexers=False)
A:pandas.core.indexes.datetimes.__eq__->_dt_index_cmp('__eq__')
A:pandas.core.indexes.datetimes.__ne__->_dt_index_cmp('__ne__', nat_result=True)
A:pandas.core.indexes.datetimes.__lt__->_dt_index_cmp('__lt__')
A:pandas.core.indexes.datetimes.__gt__->_dt_index_cmp('__gt__')
A:pandas.core.indexes.datetimes.__le__->_dt_index_cmp('__le__')
A:pandas.core.indexes.datetimes.__ge__->_dt_index_cmp('__ge__')
A:pandas.core.indexes.datetimes.dayfirst->kwargs.pop('dayfirst', None)
A:pandas.core.indexes.datetimes.yearfirst->kwargs.pop('yearfirst', None)
A:pandas.core.indexes.datetimes.freq->CDay(holidays=holidays, weekmask=weekmask)
A:pandas.core.indexes.datetimes.periods->int(periods)
A:pandas.core.indexes.datetimes.dtype->pandas_dtype(dtype)
A:pandas.core.indexes.datetimes.dtz->getattr(dtype, 'tz', None)
A:pandas.core.indexes.datetimes.data->pandas.core.tools.datetimes.to_datetime(dates)
A:pandas.core.indexes.datetimes.subarr->cls._simple_new(subarr, name=name, freq=freq, tz=tz)
A:pandas.core.indexes.datetimes.ints->cls._simple_new(subarr, name=name, freq=freq, tz=tz).view('i8')
A:pandas.core.indexes.datetimes.on_freq->cls._generate(subarr[0], None, len(subarr), None, freq, tz=tz, ambiguous=ambiguous)
A:pandas.core.indexes.datetimes.subarr.offset->to_offset(inferred)
A:pandas.core.indexes.datetimes.start->start.to_pydatetime().to_pydatetime()
A:pandas.core.indexes.datetimes.end->end.to_pydatetime().to_pydatetime()
A:pandas.core.indexes.datetimes.inferred_tz->pandas._libs.tslib.maybe_get_tz(inferred_tz)
A:pandas.core.indexes.datetimes.index->cls._simple_new(index, name=name, freq=offset, tz=tz)
A:pandas.core.indexes.datetimes.indexer->self._engine.get_value(_values_from_object(series), key, tz=self.tz).argsort()
A:pandas.core.indexes.datetimes.n->len(indexer)
A:pandas.core.indexes.datetimes.reverse->numpy.empty(n, dtype=np.int_)
A:pandas.core.indexes.datetimes.result.tz->pandas._libs.tslib.maybe_get_tz(tz)
A:pandas.core.indexes.datetimes.vzone->pandas._libs.tslib.get_timezone(getattr(other, 'tzinfo', '__no_tz__'))
A:pandas.core.indexes.datetimes.xdr->generate_range(start=start, end=end, periods=periods, offset=offset)
A:pandas.core.indexes.datetimes.arr->pandas.core.tools.datetimes.to_datetime(list(xdr), box=False)
A:pandas.core.indexes.datetimes.cachedRange->DatetimeIndex._simple_new(arr)
A:pandas.core.indexes.datetimes.startLoc->DatetimeIndex._simple_new(arr).get_loc(start)
A:pandas.core.indexes.datetimes.formatter->_get_format_datetime64(is_dates_only=self._is_dates_only)
A:pandas.core.indexes.datetimes.d->dict(data=self._data)
A:pandas.core.indexes.datetimes.new_state->numpy.ndarray.__reduce__(data.astype('M8[ns]'))
A:pandas.core.indexes.datetimes.new_values->pandas._libs.tslib.date_normalize(self.asi8, self.tz)
A:pandas.core.indexes.datetimes.name->pandas.core.common._maybe_match_name(self, delta)
A:pandas.core.indexes.datetimes.format->_get_format_datetime64_from_values(self, date_format)
A:pandas.core.indexes.datetimes.snapped->numpy.empty(len(self), dtype=_NS_DTYPE)
A:pandas.core.indexes.datetimes.t0->CDay(holidays=holidays, weekmask=weekmask).rollback(s)
A:pandas.core.indexes.datetimes.t1->CDay(holidays=holidays, weekmask=weekmask).rollforward(s)
A:pandas.core.indexes.datetimes.(this, other)->self._maybe_utc_convert(other)
A:pandas.core.indexes.datetimes.result.offset->to_offset(result.inferred_freq)
A:pandas.core.indexes.datetimes.this->self.tz_convert('UTC')
A:pandas.core.indexes.datetimes.this.offset->to_offset(this.inferred_freq)
A:pandas.core.indexes.datetimes.joined->self._shallow_copy(joined)
A:pandas.core.indexes.datetimes.loc->pandas._libs.lib.maybe_indices_to_slice(_ensure_int64(np.array(loc)), len(self))
A:pandas.core.indexes.datetimes.dates->list(xdr)
A:pandas.core.indexes.datetimes.l->len(self)
A:pandas.core.indexes.datetimes.end_i->min((i + 1) * chunksize, l)
A:pandas.core.indexes.datetimes.converted->pandas._libs.tslib.ints_to_pydatetime(data[start_i:end_i], tz=self.tz, freq=self.freq, box=True)
A:pandas.core.indexes.datetimes.lslice->slice(*left.slice_locs(start, end))
A:pandas.core.indexes.datetimes.st->datetime(parsed.year, parsed.month, parsed.day, parsed.hour, parsed.minute, parsed.second, parsed.microsecond)
A:pandas.core.indexes.datetimes.(t1, t2)->self._parsed_string_to_bounds(reso, parsed)
A:pandas.core.indexes.datetimes.key->Timestamp(key, tz=tz)
A:pandas.core.indexes.datetimes.locs->self.indexer_at_time(key)
A:pandas.core.indexes.datetimes.tolerance->self._convert_tolerance(tolerance)
A:pandas.core.indexes.datetimes.stamp->Timestamp(key, tz=self.tz)
A:pandas.core.indexes.datetimes.(_, parsed, reso)->parse_time_string(key, freq)
A:pandas.core.indexes.datetimes.(lower, upper)->self._parsed_string_to_bounds(reso, parsed)
A:pandas.core.indexes.datetimes.start_casted->self._maybe_cast_slice_bound(start, 'left', kind)
A:pandas.core.indexes.datetimes.end_casted->self._maybe_cast_slice_bound(end, 'right', kind)
A:pandas.core.indexes.datetimes.year->numpy.asarray(self.year)
A:pandas.core.indexes.datetimes.month->numpy.asarray(self.month)
A:pandas.core.indexes.datetimes.day->numpy.asarray(self.day)
A:pandas.core.indexes.datetimes.hour->_field_accessor('hour', 'h', 'The hours of the datetime')
A:pandas.core.indexes.datetimes.minute->_field_accessor('minute', 'm', 'The minutes of the datetime')
A:pandas.core.indexes.datetimes.second->_field_accessor('second', 's', 'The seconds of the datetime')
A:pandas.core.indexes.datetimes.microsecond->_field_accessor('microsecond', 'us', 'The microseconds of the datetime')
A:pandas.core.indexes.datetimes.nanosecond->_field_accessor('nanosecond', 'ns', 'The nanoseconds of the datetime')
A:pandas.core.indexes.datetimes.weekofyear->_field_accessor('weekofyear', 'woy', 'The week ordinal of the year')
A:pandas.core.indexes.datetimes.dayofweek->_field_accessor('dayofweek', 'dow', 'The day of the week with Monday=0, Sunday=6')
A:pandas.core.indexes.datetimes.weekday_name->_field_accessor('weekday_name', 'weekday_name', 'The name of day in a week (ex: Friday)\n\n.. versionadded:: 0.18.1')
A:pandas.core.indexes.datetimes.dayofyear->_field_accessor('dayofyear', 'doy', 'The ordinal day of the year')
A:pandas.core.indexes.datetimes.quarter->_field_accessor('quarter', 'q', 'The quarter of the date')
A:pandas.core.indexes.datetimes.days_in_month->_field_accessor('days_in_month', 'dim', 'The number of days in the month\n\n.. versionadded:: 0.16.0')
A:pandas.core.indexes.datetimes.is_month_start->_field_accessor('is_month_start', 'is_month_start', 'Logical indicating if first day of month (defined by frequency)')
A:pandas.core.indexes.datetimes.is_month_end->_field_accessor('is_month_end', 'is_month_end', 'Logical indicating if last day of month (defined by frequency)')
A:pandas.core.indexes.datetimes.is_quarter_start->_field_accessor('is_quarter_start', 'is_quarter_start', 'Logical indicating if first day of quarter (defined by frequency)')
A:pandas.core.indexes.datetimes.is_quarter_end->_field_accessor('is_quarter_end', 'is_quarter_end', 'Logical indicating if last day of quarter (defined by frequency)')
A:pandas.core.indexes.datetimes.is_year_start->_field_accessor('is_year_start', 'is_year_start', 'Logical indicating if first day of year (defined by frequency)')
A:pandas.core.indexes.datetimes.is_year_end->_field_accessor('is_year_end', 'is_year_end', 'Logical indicating if last day of year (defined by frequency)')
A:pandas.core.indexes.datetimes.is_leap_year->_field_accessor('is_leap_year', 'is_leap_year', 'Logical indicating if the date belongs to a leap year')
A:pandas.core.indexes.datetimes.value->_to_m8(value, tz=self.tz)
A:pandas.core.indexes.datetimes.item->_to_m8(item, tz=self.tz)
A:pandas.core.indexes.datetimes.new_dates->new_dates.view(_NS_DTYPE).view(_NS_DTYPE)
A:pandas.core.indexes.datetimes.time->parse(time).time()
A:pandas.core.indexes.datetimes.time_micros->self._get_time_micros()
A:pandas.core.indexes.datetimes.micros->_time_to_micros(time)
A:pandas.core.indexes.datetimes.start_time->to_time(start_time)
A:pandas.core.indexes.datetimes.end_time->to_time(end_time)
A:pandas.core.indexes.datetimes.start_micros->_time_to_micros(start_time)
A:pandas.core.indexes.datetimes.end_micros->_time_to_micros(end_time)
A:pandas.core.indexes.datetimes.mask->join_op(lop(start_micros, time_micros), rop(time_micros, end_micros))
A:pandas.core.indexes.datetimes.holidays->kwargs.pop('holidays', [])
A:pandas.core.indexes.datetimes.weekmask->kwargs.pop('weekmask', 'Mon Tue Wed Thu Fri')
A:pandas.core.indexes.datetimes._CACHE_START->Timestamp(datetime(1950, 1, 1))
A:pandas.core.indexes.datetimes._CACHE_END->Timestamp(datetime(2030, 1, 1))
pandas.core.indexes.datetimes.DatetimeIndex(cls,data=None,freq=None,start=None,end=None,periods=None,copy=False,name=None,tz=None,verify_integrity=True,normalize=False,closed=None,ambiguous='raise',dtype=None,**kwargs)
pandas.core.indexes.datetimes.DatetimeIndex.__iter__(self)
pandas.core.indexes.datetimes.DatetimeIndex.__new__(cls,data=None,freq=None,start=None,end=None,periods=None,copy=False,name=None,tz=None,verify_integrity=True,normalize=False,closed=None,ambiguous='raise',dtype=None,**kwargs)
pandas.core.indexes.datetimes.DatetimeIndex.__reduce__(self)
pandas.core.indexes.datetimes.DatetimeIndex.__setstate__(self,state)
pandas.core.indexes.datetimes.DatetimeIndex._add_datelike(self,other)
pandas.core.indexes.datetimes.DatetimeIndex._add_delta(self,delta)
pandas.core.indexes.datetimes.DatetimeIndex._add_offset(self,offset)
pandas.core.indexes.datetimes.DatetimeIndex._box_func(self)
pandas.core.indexes.datetimes.DatetimeIndex._cached_range(cls,start=None,end=None,periods=None,offset=None,name=None)
pandas.core.indexes.datetimes.DatetimeIndex._can_fast_union(self,other)
pandas.core.indexes.datetimes.DatetimeIndex._convert_for_op(self,value)
pandas.core.indexes.datetimes.DatetimeIndex._fast_union(self,other)
pandas.core.indexes.datetimes.DatetimeIndex._format_native_types(self,na_rep='NaT',date_format=None,**kwargs)
pandas.core.indexes.datetimes.DatetimeIndex._formatter_func(self)
pandas.core.indexes.datetimes.DatetimeIndex._generate(cls,start,end,periods,name,offset,tz=None,normalize=False,ambiguous='raise',closed=None)
pandas.core.indexes.datetimes.DatetimeIndex._get_freq(self)
pandas.core.indexes.datetimes.DatetimeIndex._get_string_slice(self,key,use_lhs=True,use_rhs=True)
pandas.core.indexes.datetimes.DatetimeIndex._get_time_micros(self)
pandas.core.indexes.datetimes.DatetimeIndex._has_same_tz(self,other)
pandas.core.indexes.datetimes.DatetimeIndex._is_dates_only(self)
pandas.core.indexes.datetimes.DatetimeIndex._join_i8_wrapper(joinf,**kwargs)
pandas.core.indexes.datetimes.DatetimeIndex._local_timestamps(self)
pandas.core.indexes.datetimes.DatetimeIndex._maybe_cast_slice_bound(self,label,side,kind)
pandas.core.indexes.datetimes.DatetimeIndex._maybe_promote(self,other)
pandas.core.indexes.datetimes.DatetimeIndex._maybe_update_attributes(self,attrs)
pandas.core.indexes.datetimes.DatetimeIndex._maybe_utc_convert(self,other)
pandas.core.indexes.datetimes.DatetimeIndex._mpl_repr(self)
pandas.core.indexes.datetimes.DatetimeIndex._parsed_string_to_bounds(self,reso,parsed)
pandas.core.indexes.datetimes.DatetimeIndex._partial_date_slice(self,reso,parsed,use_lhs=True,use_rhs=True)
pandas.core.indexes.datetimes.DatetimeIndex._resolution(self)
pandas.core.indexes.datetimes.DatetimeIndex._set_freq(self,value)
pandas.core.indexes.datetimes.DatetimeIndex._simple_new(cls,values,name=None,freq=None,tz=None,dtype=None,**kwargs)
pandas.core.indexes.datetimes.DatetimeIndex._sub_datelike(self,other)
pandas.core.indexes.datetimes.DatetimeIndex._sub_datelike_dti(self,other)
pandas.core.indexes.datetimes.DatetimeIndex._timezone(self)
pandas.core.indexes.datetimes.DatetimeIndex._to_embed(self,keep_tz=False)
pandas.core.indexes.datetimes.DatetimeIndex._wrap_joined_index(self,joined,other)
pandas.core.indexes.datetimes.DatetimeIndex._wrap_union_result(self,other,result)
pandas.core.indexes.datetimes.DatetimeIndex.astype(self,dtype,copy=True)
pandas.core.indexes.datetimes.DatetimeIndex.date(self)
pandas.core.indexes.datetimes.DatetimeIndex.delete(self,loc)
pandas.core.indexes.datetimes.DatetimeIndex.dtype(self)
pandas.core.indexes.datetimes.DatetimeIndex.get_loc(self,key,method=None,tolerance=None)
pandas.core.indexes.datetimes.DatetimeIndex.get_value(self,series,key)
pandas.core.indexes.datetimes.DatetimeIndex.get_value_maybe_box(self,series,key)
pandas.core.indexes.datetimes.DatetimeIndex.indexer_at_time(self,time,asof=False)
pandas.core.indexes.datetimes.DatetimeIndex.indexer_between_time(self,start_time,end_time,include_start=True,include_end=True)
pandas.core.indexes.datetimes.DatetimeIndex.inferred_type(self)
pandas.core.indexes.datetimes.DatetimeIndex.insert(self,loc,item)
pandas.core.indexes.datetimes.DatetimeIndex.intersection(self,other)
pandas.core.indexes.datetimes.DatetimeIndex.is_all_dates(self)
pandas.core.indexes.datetimes.DatetimeIndex.is_normalized(self)
pandas.core.indexes.datetimes.DatetimeIndex.is_type_compatible(self,typ)
pandas.core.indexes.datetimes.DatetimeIndex.join(self,other,how='left',level=None,return_indexers=False,sort=False)
pandas.core.indexes.datetimes.DatetimeIndex.normalize(self)
pandas.core.indexes.datetimes.DatetimeIndex.searchsorted(self,value,side='left',sorter=None)
pandas.core.indexes.datetimes.DatetimeIndex.slice_indexer(self,start=None,end=None,step=None,kind=None)
pandas.core.indexes.datetimes.DatetimeIndex.snap(self,freq='S')
pandas.core.indexes.datetimes.DatetimeIndex.time(self)
pandas.core.indexes.datetimes.DatetimeIndex.to_datetime(self,dayfirst=False)
pandas.core.indexes.datetimes.DatetimeIndex.to_julian_date(self)
pandas.core.indexes.datetimes.DatetimeIndex.to_period(self,freq=None)
pandas.core.indexes.datetimes.DatetimeIndex.to_perioddelta(self,freq)
pandas.core.indexes.datetimes.DatetimeIndex.to_pydatetime(self)
pandas.core.indexes.datetimes.DatetimeIndex.to_series(self,keep_tz=False)
pandas.core.indexes.datetimes.DatetimeIndex.tz_convert(self,tz)
pandas.core.indexes.datetimes.DatetimeIndex.tz_localize(self,tz,ambiguous='raise',errors='raise')
pandas.core.indexes.datetimes.DatetimeIndex.tzinfo(self)
pandas.core.indexes.datetimes.DatetimeIndex.union(self,other)
pandas.core.indexes.datetimes.DatetimeIndex.union_many(self,others)
pandas.core.indexes.datetimes._dt_index_cmp(opname,nat_result=False)
pandas.core.indexes.datetimes._ensure_datetime64(other)
pandas.core.indexes.datetimes._field_accessor(name,field,docstring=None)
pandas.core.indexes.datetimes._generate_regular_range(start,end,periods,offset)
pandas.core.indexes.datetimes._in_range(start,end,rng_start,rng_end)
pandas.core.indexes.datetimes._naive_in_cache_range(start,end)
pandas.core.indexes.datetimes._new_DatetimeIndex(cls,d)
pandas.core.indexes.datetimes._time_to_micros(time)
pandas.core.indexes.datetimes._to_m8(key,tz=None)
pandas.core.indexes.datetimes._use_cached_range(offset,_normalized,start,end)
pandas.core.indexes.datetimes._utc()
pandas.core.indexes.datetimes.bdate_range(start=None,end=None,periods=None,freq='B',tz=None,normalize=True,name=None,closed=None,**kwargs)
pandas.core.indexes.datetimes.cdate_range(start=None,end=None,periods=None,freq='C',tz=None,normalize=True,name=None,closed=None,**kwargs)
pandas.core.indexes.datetimes.date_range(start=None,end=None,periods=None,freq='D',tz=None,normalize=False,name=None,closed=None,**kwargs)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/indexes/interval.py----------------------------------------
A:pandas.core.indexes.interval._index_doc_kwargs->dict(ibase._index_doc_kwargs)
A:pandas.core.indexes.interval._VALID_CLOSED->set(['left', 'right', 'both', 'neither'])
A:pandas.core.indexes.interval.dtype->getattr(label, 'dtype', type(label))
A:pandas.core.indexes.interval.left->self.copy()._maybe_cast_slice_bound(key.left, 'left', None)
A:pandas.core.indexes.interval.right->self.copy()._maybe_cast_slice_bound(key.right, 'right', None)
A:pandas.core.indexes.interval.data->numpy.asarray(data)
A:pandas.core.indexes.interval.result->getattr(self._multiindex, op_name)(other._multiindex)
A:pandas.core.indexes.interval.attributes->self.copy()._get_attributes_dict()
A:pandas.core.indexes.interval.left_mask->notnull(self.left)
A:pandas.core.indexes.interval.right_mask->notnull(self.right)
A:pandas.core.indexes.interval.self._mask->isnull(self.left)
A:pandas.core.indexes.interval.breaks->numpy.asarray(breaks)
A:pandas.core.indexes.interval.(left, right, closed)->intervals_to_interval_bounds(data)
A:pandas.core.indexes.interval.result[i]->Interval(left[i], right[i], closed)
A:pandas.core.indexes.interval.d->dict(left=self.left, right=self.right)
A:pandas.core.indexes.interval.self->self.copy().copy()
A:pandas.core.indexes.interval.locs->self.copy().copy().get_indexer_for(keyarr)
A:pandas.core.indexes.interval.key->self.copy().copy()._maybe_cast_slice_bound(key, 'left', None)
A:pandas.core.indexes.interval.label->_get_prev_label(label)
A:pandas.core.indexes.interval.start->self.copy().copy()._searchsorted_monotonic(key, 'left')
A:pandas.core.indexes.interval.stop->self.copy().copy()._searchsorted_monotonic(key, 'right')
A:pandas.core.indexes.interval.(start, stop)->self.copy().copy()._find_non_overlapping_monotonic_bounds(target)
A:pandas.core.indexes.interval.(left, right)->_get_interval_closed_bounds(key)
A:pandas.core.indexes.interval.loc->self.copy().copy().get_loc(key)
A:pandas.core.indexes.interval.target->self.copy().copy()._maybe_cast_indexed(_ensure_index(target))
A:pandas.core.indexes.interval.indexer->numpy.concatenate([self.get_loc(i) for i in target])
A:pandas.core.indexes.interval.lindexer->self.copy().copy()._engine.get_indexer(target.left.values)
A:pandas.core.indexes.interval.rindexer->self.copy().copy()._engine.get_indexer(target.right.values)
A:pandas.core.indexes.interval.n->min(max_seq_items // 2, 10)
A:pandas.core.indexes.interval.values->numpy.where(cond, self.values, other)
A:pandas.core.indexes.interval.new_left->taker(left.astype(float))
A:pandas.core.indexes.interval.new_right->taker(right.astype(float))
A:pandas.core.indexes.interval.other->self.copy().copy()._as_like_interval_index(other, msg)
A:pandas.core.indexes.interval.indices->_ensure_platform_int(indices)
A:pandas.core.indexes.interval.max_seq_items->min((get_option('display.max_seq_items') or n) // 10, 10)
A:pandas.core.indexes.interval.first->formatter(self[0])
A:pandas.core.indexes.interval.summary->'[{}]'.format(', '.join(tail))
A:pandas.core.indexes.interval.last->formatter(self[-1])
A:pandas.core.indexes.interval.union->_setop('union')
A:pandas.core.indexes.interval.intersection->_setop('intersection')
A:pandas.core.indexes.interval.difference->_setop('difference')
A:pandas.core.indexes.interval.symmetric_differnce->_setop('symmetric_difference')
A:pandas.core.indexes.interval.arr->numpy.array([start, end, freq])
pandas.core.indexes.interval.IntervalIndex(cls,data,closed='right',name=None,copy=False,dtype=None,fastpath=False,verify_integrity=True)
pandas.core.indexes.interval.IntervalIndex.__array__(self,result=None)
pandas.core.indexes.interval.IntervalIndex.__array_wrap__(self,result,context=None)
pandas.core.indexes.interval.IntervalIndex.__contains__(self,key)
pandas.core.indexes.interval.IntervalIndex.__getitem__(self,value)
pandas.core.indexes.interval.IntervalIndex.__len__(self)
pandas.core.indexes.interval.IntervalIndex.__new__(cls,data,closed='right',name=None,copy=False,dtype=None,fastpath=False,verify_integrity=True)
pandas.core.indexes.interval.IntervalIndex.__reduce__(self)
pandas.core.indexes.interval.IntervalIndex._append_same_dtype(self,to_concat,name)
pandas.core.indexes.interval.IntervalIndex._array_values(self)
pandas.core.indexes.interval.IntervalIndex._as_like_interval_index(self,other,error_msg)
pandas.core.indexes.interval.IntervalIndex._check_method(self,method)
pandas.core.indexes.interval.IntervalIndex._constructor(self)
pandas.core.indexes.interval.IntervalIndex._convert_list_indexer(self,keyarr,kind=None)
pandas.core.indexes.interval.IntervalIndex._convert_scalar_indexer(self,key,kind=None)
pandas.core.indexes.interval.IntervalIndex._engine(self)
pandas.core.indexes.interval.IntervalIndex._find_non_overlapping_monotonic_bounds(self,key)
pandas.core.indexes.interval.IntervalIndex._format_attrs(self)
pandas.core.indexes.interval.IntervalIndex._format_data(self)
pandas.core.indexes.interval.IntervalIndex._format_native_types(self,na_rep='',quoting=None,**kwargs)
pandas.core.indexes.interval.IntervalIndex._format_space(self)
pandas.core.indexes.interval.IntervalIndex._format_with_header(self,header,**kwargs)
pandas.core.indexes.interval.IntervalIndex._get_loc_only_exact_matches(self,key)
pandas.core.indexes.interval.IntervalIndex._get_reindexer(self,target)
pandas.core.indexes.interval.IntervalIndex._isnan(self)
pandas.core.indexes.interval.IntervalIndex._maybe_cast_indexed(self,key)
pandas.core.indexes.interval.IntervalIndex._maybe_cast_slice_bound(self,label,side,kind)
pandas.core.indexes.interval.IntervalIndex._multiindex(self)
pandas.core.indexes.interval.IntervalIndex._searchsorted_monotonic(self,label,side,exclude_label=False)
pandas.core.indexes.interval.IntervalIndex._setop(op_name)
pandas.core.indexes.interval.IntervalIndex._shallow_copy(self,left=None,right=None,**kwargs)
pandas.core.indexes.interval.IntervalIndex._simple_new(cls,left,right,closed=None,name=None,copy=False,verify_integrity=True)
pandas.core.indexes.interval.IntervalIndex._validate(self)
pandas.core.indexes.interval.IntervalIndex.argsort(self,*args,**kwargs)
pandas.core.indexes.interval.IntervalIndex.astype(self,dtype,copy=True)
pandas.core.indexes.interval.IntervalIndex.closed(self)
pandas.core.indexes.interval.IntervalIndex.contains(self,key)
pandas.core.indexes.interval.IntervalIndex.copy(self,deep=False,name=None)
pandas.core.indexes.interval.IntervalIndex.delete(self,loc)
pandas.core.indexes.interval.IntervalIndex.dtype(self)
pandas.core.indexes.interval.IntervalIndex.equals(self,other)
pandas.core.indexes.interval.IntervalIndex.from_arrays(cls,left,right,closed='right',name=None,copy=False)
pandas.core.indexes.interval.IntervalIndex.from_breaks(cls,breaks,closed='right',name=None,copy=False)
pandas.core.indexes.interval.IntervalIndex.from_intervals(cls,data,name=None,copy=False)
pandas.core.indexes.interval.IntervalIndex.from_tuples(cls,data,closed='right',name=None,copy=False)
pandas.core.indexes.interval.IntervalIndex.get_indexer(self,target,method=None,limit=None,tolerance=None)
pandas.core.indexes.interval.IntervalIndex.get_indexer_non_unique(self,target)
pandas.core.indexes.interval.IntervalIndex.get_loc(self,key,method=None)
pandas.core.indexes.interval.IntervalIndex.get_value(self,series,key)
pandas.core.indexes.interval.IntervalIndex.hasnans(self)
pandas.core.indexes.interval.IntervalIndex.inferred_type(self)
pandas.core.indexes.interval.IntervalIndex.insert(self,loc,item)
pandas.core.indexes.interval.IntervalIndex.is_monotonic(self)
pandas.core.indexes.interval.IntervalIndex.is_monotonic_decreasing(self)
pandas.core.indexes.interval.IntervalIndex.is_monotonic_increasing(self)
pandas.core.indexes.interval.IntervalIndex.is_non_overlapping_monotonic(self)
pandas.core.indexes.interval.IntervalIndex.is_unique(self)
pandas.core.indexes.interval.IntervalIndex.left(self)
pandas.core.indexes.interval.IntervalIndex.memory_usage(self,deep=False)
pandas.core.indexes.interval.IntervalIndex.mid(self)
pandas.core.indexes.interval.IntervalIndex.right(self)
pandas.core.indexes.interval.IntervalIndex.take(self,indices,axis=0,allow_fill=True,fill_value=None,**kwargs)
pandas.core.indexes.interval.IntervalIndex.to_tuples(self)
pandas.core.indexes.interval.IntervalIndex.values(self)
pandas.core.indexes.interval.IntervalIndex.where(self,cond,other=None)
pandas.core.indexes.interval._get_interval_closed_bounds(interval)
pandas.core.indexes.interval._get_next_label(label)
pandas.core.indexes.interval._get_prev_label(label)
pandas.core.indexes.interval._new_IntervalIndex(cls,d)
pandas.core.indexes.interval.interval_range(start=None,end=None,freq=None,periods=None,name=None,closed='right',**kwargs)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/indexes/range.py----------------------------------------
A:pandas.core.indexes.range.new_value->int(value)
A:pandas.core.indexes.range.start->_ensure_int(start, 'start')
A:pandas.core.indexes.range.stop->_ensure_int(stop, 'stop')
A:pandas.core.indexes.range.step->_ensure_int(step, 'step')
A:pandas.core.indexes.range.result->result.astype('float64').astype('float64')
A:pandas.core.indexes.range.d->self._get_attributes_dict()
A:pandas.core.indexes.range.attrs->self._maybe_update_attributes(attrs)
A:pandas.core.indexes.range.ls->len(self)
A:pandas.core.indexes.range.lo->len(other)
A:pandas.core.indexes.range.int_low->max(min(self._start, self._stop + 1), min(other._start, other._stop + 1))
A:pandas.core.indexes.range.int_high->min(max(self._stop, self._start + 1), max(other._stop, other._start + 1))
A:pandas.core.indexes.range.(gcd, s, t)->self._extended_gcd(self._step, other._step)
A:pandas.core.indexes.range.new_index->RangeIndex(tmp_start, int_high, new_step, fastpath=True)
A:pandas.core.indexes.range.new_index._start->RangeIndex(tmp_start, int_high, new_step, fastpath=True)._min_fitting_element(int_low)
A:pandas.core.indexes.range.step_sstep_o->abs(self._start - other._start)
A:pandas.core.indexes.range.start_r->min(start_s, start_o)
A:pandas.core.indexes.range.end_r->max(end_s, end_o)
A:pandas.core.indexes.range.n->int(key)
A:pandas.core.indexes.range.l->len(self)
A:pandas.core.indexes.range.other->self._validate_for_numeric_binop(other, op, opstr)
A:pandas.core.indexes.range.rstep->step(self._step, other)
A:pandas.core.indexes.range.rstart->op(self._start, other)
A:pandas.core.indexes.range.rstop->op(self._stop, other)
A:pandas.core.indexes.range.results->op(self, other)
A:pandas.core.indexes.range.cls.__add__cls.__radd__->_make_evaluate_binop(operator.add, '__add__')
A:pandas.core.indexes.range.cls.__sub__->_make_evaluate_binop(operator.sub, '__sub__')
A:pandas.core.indexes.range.cls.__rsub__->_make_evaluate_binop(operator.sub, '__sub__', reversed=True)
A:pandas.core.indexes.range.cls.__mul__cls.__rmul__->_make_evaluate_binop(operator.mul, '__mul__', step=operator.mul)
A:pandas.core.indexes.range.cls.__truediv__->_make_evaluate_binop(operator.truediv, '__truediv__', step=operator.truediv)
A:pandas.core.indexes.range.cls.__rtruediv__->_make_evaluate_binop(operator.truediv, '__truediv__', reversed=True, step=operator.truediv)
A:pandas.core.indexes.range.cls.__div__->_make_evaluate_binop(operator.div, '__div__', step=operator.div)
A:pandas.core.indexes.range.cls.__rdiv__->_make_evaluate_binop(operator.div, '__div__', reversed=True, step=operator.div)
pandas.core.indexes.range.RangeIndex(cls,start=None,stop=None,step=None,name=None,dtype=None,fastpath=False,copy=False,**kwargs)
pandas.core.indexes.range.RangeIndex.__floordiv__(self,other)
pandas.core.indexes.range.RangeIndex.__getitem__(self,key)
pandas.core.indexes.range.RangeIndex.__len__(self)
pandas.core.indexes.range.RangeIndex.__new__(cls,start=None,stop=None,step=None,name=None,dtype=None,fastpath=False,copy=False,**kwargs)
pandas.core.indexes.range.RangeIndex.__reduce__(self)
pandas.core.indexes.range.RangeIndex._add_numeric_methods_binary(cls)
pandas.core.indexes.range.RangeIndex._constructor(self)
pandas.core.indexes.range.RangeIndex._data(self)
pandas.core.indexes.range.RangeIndex._extended_gcd(self,a,b)
pandas.core.indexes.range.RangeIndex._format_attrs(self)
pandas.core.indexes.range.RangeIndex._format_data(self)
pandas.core.indexes.range.RangeIndex._get_data_as_items(self)
pandas.core.indexes.range.RangeIndex._int64index(self)
pandas.core.indexes.range.RangeIndex._max_fitting_element(self,upper_limit)
pandas.core.indexes.range.RangeIndex._min_fitting_element(self,lower_limit)
pandas.core.indexes.range.RangeIndex._shallow_copy(self,values=None,**kwargs)
pandas.core.indexes.range.RangeIndex._simple_new(cls,start,stop=None,step=None,name=None,dtype=None,**kwargs)
pandas.core.indexes.range.RangeIndex._validate_dtype(dtype)
pandas.core.indexes.range.RangeIndex.argsort(self,*args,**kwargs)
pandas.core.indexes.range.RangeIndex.copy(self,name=None,deep=False,dtype=None,**kwargs)
pandas.core.indexes.range.RangeIndex.dtype(self)
pandas.core.indexes.range.RangeIndex.equals(self,other)
pandas.core.indexes.range.RangeIndex.from_range(cls,data,name=None,dtype=None,**kwargs)
pandas.core.indexes.range.RangeIndex.has_duplicates(self)
pandas.core.indexes.range.RangeIndex.intersection(self,other)
pandas.core.indexes.range.RangeIndex.is_monotonic_decreasing(self)
pandas.core.indexes.range.RangeIndex.is_monotonic_increasing(self)
pandas.core.indexes.range.RangeIndex.is_unique(self)
pandas.core.indexes.range.RangeIndex.join(self,other,how='left',level=None,return_indexers=False,sort=False)
pandas.core.indexes.range.RangeIndex.memory_usage(self,deep=False)
pandas.core.indexes.range.RangeIndex.nbytes(self)
pandas.core.indexes.range.RangeIndex.size(self)
pandas.core.indexes.range.RangeIndex.tolist(self)
pandas.core.indexes.range.RangeIndex.union(self,other)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/indexes/base.py----------------------------------------
A:pandas.core.indexes.base._unsortable_types->frozenset(('mixed', 'mixed-integer'))
A:pandas.core.indexes.base._index_doc_kwargs->dict(klass='Index', inplace='', target_klass='Index', unique='Index', duplicated='np.ndarray')
A:pandas.core.indexes.base._index_shared_docs->dict()
A:pandas.core.indexes.base._o_dtype->numpy.dtype(object)
A:pandas.core.indexes.base.result->f(self.values)
A:pandas.core.indexes.base.inferred->pandas._libs.lib.infer_dtype(subarr)
A:pandas.core.indexes.base.data->numpy.empty(state)
A:pandas.core.indexes.base.msg->str(e)
A:pandas.core.indexes.base.subarr->_asarray_tuplesafe(data, dtype=object)
A:pandas.core.indexes.base.values->_ensure_categorical(values)
A:pandas.core.indexes.base.attributes->Index(self.asi8)._get_attributes_dict()
A:pandas.core.indexes.base.grouper->Index(self.asi8).map(mapper)
A:pandas.core.indexes.base.self._id->_Identity()
A:pandas.core.indexes.base.attrs->Index(self.asi8)._maybe_update_attributes(attrs)
A:pandas.core.indexes.base.res->numpy.empty(state).astype('u8', copy=False)
A:pandas.core.indexes.base.new_index->Index(self.asi8)._shallow_copy_with_infer(new_labels, freq=None)
A:pandas.core.indexes.base.names->set([obj.name for obj in to_concat])
A:pandas.core.indexes.base.space->Index(self.asi8)._format_space()
A:pandas.core.indexes.base.prepr->(u(',%s') % space).join([u('%s=%s') % (k, v) for (k, v) in attrs])
A:pandas.core.indexes.base.(display_width, _)->get_console_size()
A:pandas.core.indexes.base.n->min(max_seq_items // 2, 10)
A:pandas.core.indexes.base.adj->_get_adjustment()
A:pandas.core.indexes.base.first->isnull(self).argmax()
A:pandas.core.indexes.base.last->formatter(self[-1])
A:pandas.core.indexes.base.max_len->max(best_len(head), best_len(tail))
A:pandas.core.indexes.base.(summary, line)->_extend_line(summary, line, tail[-1], display_width - 2, space2)
A:pandas.core.indexes.base.parsed->pandas._libs.lib.try_parse_dates(self.values, parser=parser)
A:pandas.core.indexes.base.other->Index(self.asi8)._validate_for_numeric_binop(other, op, opstr)
A:pandas.core.indexes.base.idx->numpy.concatenate((_self[:loc], item, _self[loc:]))
A:pandas.core.indexes.base.head->head.format().format()
A:pandas.core.indexes.base.tail->tail.format().format()
A:pandas.core.indexes.base.i->Index(self.asi8).get_loc(start)
A:pandas.core.indexes.base.j->Index(self.asi8).get_loc(stop)
A:pandas.core.indexes.base.indexer->Index(self.asi8).get_indexer(labels)
A:pandas.core.indexes.base.keyarr->numpy.where(keyarr < 0, len(self) + keyarr, keyarr)
A:pandas.core.indexes.base.indexer[indexer < 0]->len(self)
A:pandas.core.indexes.base.counter->defaultdict(lambda : 0)
A:pandas.core.indexes.base.d->dict(data=self._data)
A:pandas.core.indexes.base.self._data->state.pop('data')
A:pandas.core.indexes.base.key->_values_from_object(key)
A:pandas.core.indexes.base.typs->pandas.core.dtypes.concat.get_dtype_kinds(to_concat)
A:pandas.core.indexes.base.indices->_ensure_platform_int(indices)
A:pandas.core.indexes.base.taken->Index(self.asi8)._validate_for_numeric_binop(other, op, opstr).take(indexer)
A:pandas.core.indexes.base.(w,)->Index(self.asi8)._isnan.nonzero()
A:pandas.core.indexes.base.mask->isnull(self)
A:pandas.core.indexes.base.loc->Index(self.asi8).get_indexer(labels).item()
A:pandas.core.indexes.base.locs->numpy.where(locs > 0, locs - 1, 0)
A:pandas.core.indexes.base._as->Index(self.asi8).argsort()
A:pandas.core.indexes.base.sorted_index->Index(self.asi8).take(_as)
A:pandas.core.indexes.base.this->Index(self.asi8).astype('O')
A:pandas.core.indexes.base.value_set->set(self._values)
A:pandas.core.indexes.base.(indexer,)->(indexer == -1).nonzero()
A:pandas.core.indexes.base.other_diff->pandas.core.algorithms.take_nd(other._values, indexer, allow_fill=False)
A:pandas.core.indexes.base.types->frozenset((self.inferred_type, other.inferred_type))
A:pandas.core.indexes.base.(other, result_name)->Index(self.asi8)._convert_can_do_setop(other)
A:pandas.core.indexes.base.label_diff->numpy.setdiff1d(np.arange(this.size), indexer, assume_unique=True)
A:pandas.core.indexes.base.the_diff->pandas.core.algorithms.safe_sort(the_diff)
A:pandas.core.indexes.base.(other, result_name_update)->Index(self.asi8)._convert_can_do_setop(other)
A:pandas.core.indexes.base.common_indexer->Index(self.asi8).get_indexer(labels).take((indexer != -1).nonzero()[0])
A:pandas.core.indexes.base.left_indexer->_get_leaf_sorter(new_labels[:level + 1])
A:pandas.core.indexes.base.left_diff->Index(self.asi8).astype('O').values.take(left_indexer)
A:pandas.core.indexes.base.right_diff->Index(self.asi8)._validate_for_numeric_binop(other, op, opstr).values.take(right_indexer)
A:pandas.core.indexes.base.attribs->Index(self.asi8)._get_attributes_dict()
A:pandas.core.indexes.base.sym_diff->deprecate('sym_diff', symmetric_difference)
A:pandas.core.indexes.base.s->_values_from_object(series)
A:pandas.core.indexes.base.k->Index(self.asi8)._convert_scalar_indexer(k, kind='getitem')
A:pandas.core.indexes.base.method->_ensure_platform_int(missing).clean_reindex_fill_method(method)
A:pandas.core.indexes.base.target->_ensure_index(target)
A:pandas.core.indexes.base.tolerance->Index(self.asi8)._convert_tolerance(tolerance)
A:pandas.core.indexes.base.(pself, ptarget)->Index(self.asi8)._maybe_promote(target)
A:pandas.core.indexes.base.indexer[nonexact]->Index(self.asi8)._searchsorted_monotonic(target[nonexact], side)
A:pandas.core.indexes.base.right_indexer->pandas.core.algorithms.take_nd(right_lev_indexer, join_index.labels[level], allow_fill=False)
A:pandas.core.indexes.base.left_distances->abs(self.values[left_indexer] - target)
A:pandas.core.indexes.base.right_distances->abs(self.values[right_indexer] - target)
A:pandas.core.indexes.base.distance->abs(self.values[indexer] - target)
A:pandas.core.indexes.base.self->Index(self.asi8)
A:pandas.core.indexes.base.(indexer, missing)->Index(self.asi8).get_indexer_non_unique(target)
A:pandas.core.indexes.base.(indexer, _)->Index(self.asi8).get_indexer_non_unique(target, **kwargs)
A:pandas.core.indexes.base.mapped_values->Index(self.asi8)._arrmap(self.values, mapper)
A:pandas.core.indexes.base.(_, indexer, _)->Index(self.asi8)._join_level(target, level, how='right', return_indexers=True)
A:pandas.core.indexes.base.new_labels->list(left.labels)
A:pandas.core.indexes.base.l->numpy.arange(len(indexer))
A:pandas.core.indexes.base.missing->_ensure_platform_int(missing)
A:pandas.core.indexes.base.missing_labels->_ensure_index(target).take(missing)
A:pandas.core.indexes.base.missing_indexer->_ensure_int64(l[~check])
A:pandas.core.indexes.base.cur_indexer->_ensure_int64(l[check])
A:pandas.core.indexes.base.new_indexer->numpy.arange(len(self.take(indexer)))
A:pandas.core.indexes.base.new_indexer[cur_indexer]->numpy.arange(len(cur_labels))
A:pandas.core.indexes.base.self_is_mi->isinstance(self, MultiIndex)
A:pandas.core.indexes.base.other_is_mi->isinstance(other, MultiIndex)
A:pandas.core.indexes.base.join_index->Index(self.asi8)._wrap_joined_index(join_index, other)
A:pandas.core.indexes.base.rindexer->Index(self.asi8)._validate_for_numeric_binop(other, op, opstr).get_indexer(join_index)
A:pandas.core.indexes.base.lindexer->Index(self.asi8).get_indexer(join_index)
A:pandas.core.indexes.base.how->{'right': 'left', 'left': 'right'}.get(how, how)
A:pandas.core.indexes.base.overlap->list(set(self_names) & set(other_names))
A:pandas.core.indexes.base.level->left._get_level_number(level)
A:pandas.core.indexes.base.(left_idx, right_idx)->_get_join_indexers([self.values], [other._values], how=how, sort=True)
A:pandas.core.indexes.base.left_idx->_ensure_platform_int(left_idx)
A:pandas.core.indexes.base.right_idx->_ensure_platform_int(right_idx)
A:pandas.core.indexes.base.lab->_ensure_int64(labels[-1])
A:pandas.core.indexes.base.(sorter, _)->pandas._libs.algos.groupsort_indexer(lab, 1 + lab.max())
A:pandas.core.indexes.base.(new_level, left_lev_indexer, right_lev_indexer)->old_level.join(right, how=how, return_indexers=True)
A:pandas.core.indexes.base.left_lev_indexer->_ensure_int64(left_lev_indexer)
A:pandas.core.indexes.base.rev_indexer->pandas._libs.lib.get_reverse_indexer(left_lev_indexer, len(old_level))
A:pandas.core.indexes.base.new_lev_labels->pandas.core.algorithms.take_nd(rev_indexer, left.labels[level], allow_fill=False)
A:pandas.core.indexes.base.new_levels->list(left.levels)
A:pandas.core.indexes.base.(left_indexer, counts)->pandas._libs.algos.groupsort_indexer(new_lev_labels, ngroups)
A:pandas.core.indexes.base.mask_all->isnull(self).all()
A:pandas.core.indexes.base.ridx->Index(self.asi8)._left_indexer_unique(sv, ov)
A:pandas.core.indexes.base.lidx->Index(self.asi8)._left_indexer_unique(ov, sv)
A:pandas.core.indexes.base.(join_index, lidx, ridx)->Index(self.asi8)._outer_indexer(sv, ov)
A:pandas.core.indexes.base.(join_index, ridx, lidx)->Index(self.asi8)._left_indexer(ov, sv)
A:pandas.core.indexes.base.(start_slice, end_slice)->Index(self.asi8).slice_locs(start, end, step=step, kind=kind)
A:pandas.core.indexes.base.ckey->int(key)
A:pandas.core.indexes.base.pos->self[::-1].searchsorted(label, side='right' if side == 'left' else 'right')
A:pandas.core.indexes.base.label->Index(self.asi8)._maybe_cast_slice_bound(label, side, kind)
A:pandas.core.indexes.base.slc->pandas._libs.lib.maybe_indices_to_slice(slc.astype('i8'), len(self))
A:pandas.core.indexes.base.start_slice->Index(self.asi8).get_slice_bound(start, 'left', kind)
A:pandas.core.indexes.base.end_slice->len(self)
A:pandas.core.indexes.base._self->numpy.asarray(self)
A:pandas.core.indexes.base.labels->pandas.core.common._index_labels_to_array(labels)
A:pandas.core.indexes.base.cls.__eq__->_make_compare(operator.eq)
A:pandas.core.indexes.base.cls.__ne__->_make_compare(operator.ne)
A:pandas.core.indexes.base.cls.__lt__->_make_compare(operator.lt)
A:pandas.core.indexes.base.cls.__gt__->_make_compare(operator.gt)
A:pandas.core.indexes.base.cls.__le__->_make_compare(operator.le)
A:pandas.core.indexes.base.cls.__ge__->_make_compare(operator.ge)
A:pandas.core.indexes.base.cls.__add__cls.__radd____iadd__->_make_invalid_op('__add__')
A:pandas.core.indexes.base.cls.__sub____isub__->_make_invalid_op('__sub__')
A:pandas.core.indexes.base.cls.__pow__cls.__rpow__->_make_invalid_op('__pow__')
A:pandas.core.indexes.base.cls.__mul__cls.__rmul__->_make_evaluate_binop(operator.mul, '__mul__')
A:pandas.core.indexes.base.cls.__floordiv__cls.__rfloordiv__->_make_invalid_op('__floordiv__')
A:pandas.core.indexes.base.cls.__truediv__cls.__rtruediv__->_make_invalid_op('__truediv__')
A:pandas.core.indexes.base.cls.__div__cls.__rdiv__->_make_invalid_op('__div__')
A:pandas.core.indexes.base.cls.__neg__->_make_evaluate_unary(lambda x: -x, '__neg__')
A:pandas.core.indexes.base.cls.__pos__->_make_evaluate_unary(lambda x: x, '__pos__')
A:pandas.core.indexes.base.cls.__abs__->_make_evaluate_unary(np.abs, '__abs__')
A:pandas.core.indexes.base.cls.__inv__->_make_evaluate_unary(lambda x: -x, '__inv__')
A:pandas.core.indexes.base.cls.__add__cls.__radd__->_make_evaluate_binop(operator.add, '__add__')
A:pandas.core.indexes.base.cls.__sub__->_make_evaluate_binop(operator.sub, '__sub__')
A:pandas.core.indexes.base.cls.__rsub__->_make_evaluate_binop(operator.sub, '__sub__', reversed=True)
A:pandas.core.indexes.base.cls.__rpow__->_make_evaluate_binop(operator.pow, '__pow__', reversed=True)
A:pandas.core.indexes.base.cls.__pow__->_make_evaluate_binop(operator.pow, '__pow__')
A:pandas.core.indexes.base.cls.__mod__->_make_evaluate_binop(operator.mod, '__mod__')
A:pandas.core.indexes.base.cls.__floordiv__->_make_evaluate_binop(operator.floordiv, '__floordiv__')
A:pandas.core.indexes.base.cls.__rfloordiv__->_make_evaluate_binop(operator.floordiv, '__floordiv__', reversed=True)
A:pandas.core.indexes.base.cls.__truediv__->_make_evaluate_binop(operator.truediv, '__truediv__')
A:pandas.core.indexes.base.cls.__rtruediv__->_make_evaluate_binop(operator.truediv, '__truediv__', reversed=True)
A:pandas.core.indexes.base.cls.__div__->_make_evaluate_binop(operator.div, '__div__')
A:pandas.core.indexes.base.cls.__rdiv__->_make_evaluate_binop(operator.div, '__div__', reversed=True)
A:pandas.core.indexes.base.cls.__divmod__->_make_evaluate_binop(divmod, '__divmod__', constructor=lambda result, **attrs: (Index(result[0], **attrs), Index(result[1], **attrs)))
A:pandas.core.indexes.base.cls.all->_make_invalid_op('all')
A:pandas.core.indexes.base.cls.any->_make_invalid_op('any')
A:pandas.core.indexes.base.index_like->copy(index_like)
A:pandas.core.indexes.base.(converted, all_arrays)->pandas._libs.lib.clean_index_list(index_like)
pandas.core.indexes.base.Index(cls,data=None,dtype=None,copy=False,name=None,fastpath=False,tupleize_cols=True,**kwargs)
pandas.core.indexes.base.Index.__add__(self,other)
pandas.core.indexes.base.Index.__and__(self,other)
pandas.core.indexes.base.Index.__array__(self,dtype=None)
pandas.core.indexes.base.Index.__array_wrap__(self,result,context=None)
pandas.core.indexes.base.Index.__contains__(self,key)
pandas.core.indexes.base.Index.__copy__(self,**kwargs)
pandas.core.indexes.base.Index.__deepcopy__(self,memo=None)
pandas.core.indexes.base.Index.__getitem__(self,key)
pandas.core.indexes.base.Index.__hash__(self)
pandas.core.indexes.base.Index.__iter__(self)
pandas.core.indexes.base.Index.__len__(self)
pandas.core.indexes.base.Index.__new__(cls,data=None,dtype=None,copy=False,name=None,fastpath=False,tupleize_cols=True,**kwargs)
pandas.core.indexes.base.Index.__nonzero__(self)
pandas.core.indexes.base.Index.__or__(self,other)
pandas.core.indexes.base.Index.__radd__(self,other)
pandas.core.indexes.base.Index.__reduce__(self)
pandas.core.indexes.base.Index.__setitem__(self,key,value)
pandas.core.indexes.base.Index.__setstate__(self,state)
pandas.core.indexes.base.Index.__sub__(self,other)
pandas.core.indexes.base.Index.__unicode__(self)
pandas.core.indexes.base.Index.__xor__(self,other)
pandas.core.indexes.base.Index._add_comparison_methods(cls)
pandas.core.indexes.base.Index._add_logical_methods(cls)
pandas.core.indexes.base.Index._add_logical_methods_disabled(cls)
pandas.core.indexes.base.Index._add_numeric_methods(cls)
pandas.core.indexes.base.Index._add_numeric_methods_add_sub_disabled(cls)
pandas.core.indexes.base.Index._add_numeric_methods_binary(cls)
pandas.core.indexes.base.Index._add_numeric_methods_disabled(cls)
pandas.core.indexes.base.Index._add_numeric_methods_unary(cls)
pandas.core.indexes.base.Index._append_same_dtype(self,to_concat,name)
pandas.core.indexes.base.Index._assert_can_do_op(self,value)
pandas.core.indexes.base.Index._assert_can_do_setop(self,other)
pandas.core.indexes.base.Index._assert_take_fillable(self,values,indices,allow_fill=True,fill_value=None,na_value=np.nan)
pandas.core.indexes.base.Index._can_reindex(self,indexer)
pandas.core.indexes.base.Index._cleanup(self)
pandas.core.indexes.base.Index._coerce_scalar_to_index(self,item)
pandas.core.indexes.base.Index._coerce_to_ndarray(cls,data)
pandas.core.indexes.base.Index._constructor(self)
pandas.core.indexes.base.Index._convert_arr_indexer(self,keyarr)
pandas.core.indexes.base.Index._convert_can_do_setop(self,other)
pandas.core.indexes.base.Index._convert_for_op(self,value)
pandas.core.indexes.base.Index._convert_index_indexer(self,keyarr)
pandas.core.indexes.base.Index._convert_list_indexer(self,keyarr,kind=None)
pandas.core.indexes.base.Index._convert_listlike_indexer(self,keyarr,kind=None)
pandas.core.indexes.base.Index._convert_scalar_indexer(self,key,kind=None)
pandas.core.indexes.base.Index._convert_slice_indexer(self,key,kind=None)
pandas.core.indexes.base.Index._convert_tolerance(self,tolerance)
pandas.core.indexes.base.Index._deepcopy_if_needed(self,orig,copy=False)
pandas.core.indexes.base.Index._engine(self)
pandas.core.indexes.base.Index._evaluate_with_datetime_like(self,other,op,opstr)
pandas.core.indexes.base.Index._evaluate_with_timedelta_like(self,other,op,opstr)
pandas.core.indexes.base.Index._evalute_compare(self,op)
pandas.core.indexes.base.Index._filter_indexer_tolerance(self,target,indexer,tolerance)
pandas.core.indexes.base.Index._format_attrs(self)
pandas.core.indexes.base.Index._format_data(self)
pandas.core.indexes.base.Index._format_native_types(self,na_rep='',quoting=None,**kwargs)
pandas.core.indexes.base.Index._format_space(self)
pandas.core.indexes.base.Index._format_with_header(self,header,na_rep='NaN',**kwargs)
pandas.core.indexes.base.Index._formatter_func(self)
pandas.core.indexes.base.Index._get_attributes_dict(self)
pandas.core.indexes.base.Index._get_consensus_name(self,other)
pandas.core.indexes.base.Index._get_fill_indexer(self,target,method,limit=None,tolerance=None)
pandas.core.indexes.base.Index._get_fill_indexer_searchsorted(self,target,method,limit=None)
pandas.core.indexes.base.Index._get_grouper_for_level(self,mapper,level=None)
pandas.core.indexes.base.Index._get_level_number(self,level)
pandas.core.indexes.base.Index._get_level_values(self,level)
pandas.core.indexes.base.Index._get_loc_only_exact_matches(self,key)
pandas.core.indexes.base.Index._get_names(self)
pandas.core.indexes.base.Index._get_nearest_indexer(self,target,limit,tolerance)
pandas.core.indexes.base.Index._get_string_slice(self,key,use_lhs=True,use_rhs=True)
pandas.core.indexes.base.Index._get_unique_index(self,dropna=False)
pandas.core.indexes.base.Index._has_complex_internals(self)
pandas.core.indexes.base.Index._invalid_indexer(self,form,key)
pandas.core.indexes.base.Index._is_memory_usage_qualified(self)
pandas.core.indexes.base.Index._isnan(self)
pandas.core.indexes.base.Index._join_level(self,other,level,how='left',return_indexers=False,keep_order=True)
pandas.core.indexes.base.Index._join_monotonic(self,other,how='left',return_indexers=False)
pandas.core.indexes.base.Index._join_multi(self,other,how,return_indexers=True)
pandas.core.indexes.base.Index._join_non_unique(self,other,how='left',return_indexers=False)
pandas.core.indexes.base.Index._maybe_cast_indexer(self,key)
pandas.core.indexes.base.Index._maybe_cast_slice_bound(self,label,side,kind)
pandas.core.indexes.base.Index._maybe_promote(self,other)
pandas.core.indexes.base.Index._maybe_update_attributes(self,attrs)
pandas.core.indexes.base.Index._mpl_repr(self)
pandas.core.indexes.base.Index._nan_idxs(self)
pandas.core.indexes.base.Index._reindex_non_unique(self,target)
pandas.core.indexes.base.Index._reset_identity(self)
pandas.core.indexes.base.Index._scalar_data_error(cls,data)
pandas.core.indexes.base.Index._searchsorted_monotonic(self,label,side='left')
pandas.core.indexes.base.Index._set_names(self,values,level=None)
pandas.core.indexes.base.Index._shallow_copy(self,values=None,**kwargs)
pandas.core.indexes.base.Index._shallow_copy_with_infer(self,values=None,**kwargs)
pandas.core.indexes.base.Index._simple_new(cls,values,name=None,dtype=None,**kwargs)
pandas.core.indexes.base.Index._sort_levels_monotonic(self)
pandas.core.indexes.base.Index._string_data_error(cls,data)
pandas.core.indexes.base.Index._to_embed(self,keep_tz=False)
pandas.core.indexes.base.Index._to_safe_for_reshape(self)
pandas.core.indexes.base.Index._try_convert_to_int_index(cls,data,copy,name)
pandas.core.indexes.base.Index._update_inplace(self,result,**kwargs)
pandas.core.indexes.base.Index._validate_for_numeric_binop(self,other,op,opstr)
pandas.core.indexes.base.Index._validate_for_numeric_unaryop(self,op,opstr)
pandas.core.indexes.base.Index._validate_index_level(self,level)
pandas.core.indexes.base.Index._validate_indexer(self,form,key,kind)
pandas.core.indexes.base.Index._validate_names(self,name=None,names=None,deep=False)
pandas.core.indexes.base.Index._wrap_joined_index(self,joined,other)
pandas.core.indexes.base.Index._wrap_union_result(self,other,result)
pandas.core.indexes.base.Index.append(self,other)
pandas.core.indexes.base.Index.argsort(self,*args,**kwargs)
pandas.core.indexes.base.Index.asof(self,label)
pandas.core.indexes.base.Index.asof_locs(self,where,mask)
pandas.core.indexes.base.Index.astype(self,dtype,copy=True)
pandas.core.indexes.base.Index.contains(self,key)
pandas.core.indexes.base.Index.copy(self,name=None,deep=False,dtype=None,**kwargs)
pandas.core.indexes.base.Index.delete(self,loc)
pandas.core.indexes.base.Index.difference(self,other)
pandas.core.indexes.base.Index.drop(self,labels,errors='raise')
pandas.core.indexes.base.Index.drop_duplicates(self,keep='first')
pandas.core.indexes.base.Index.dropna(self,how='any')
pandas.core.indexes.base.Index.dtype(self)
pandas.core.indexes.base.Index.dtype_str(self)
pandas.core.indexes.base.Index.duplicated(self,keep='first')
pandas.core.indexes.base.Index.equals(self,other)
pandas.core.indexes.base.Index.fillna(self,value=None,downcast=None)
pandas.core.indexes.base.Index.format(self,name=False,formatter=None,**kwargs)
pandas.core.indexes.base.Index.get_duplicates(self)
pandas.core.indexes.base.Index.get_indexer(self,target,method=None,limit=None,tolerance=None)
pandas.core.indexes.base.Index.get_indexer_for(self,target,**kwargs)
pandas.core.indexes.base.Index.get_indexer_non_unique(self,target)
pandas.core.indexes.base.Index.get_loc(self,key,method=None,tolerance=None)
pandas.core.indexes.base.Index.get_slice_bound(self,label,side,kind)
pandas.core.indexes.base.Index.get_value(self,series,key)
pandas.core.indexes.base.Index.get_values(self)
pandas.core.indexes.base.Index.groupby(self,values)
pandas.core.indexes.base.Index.has_duplicates(self)
pandas.core.indexes.base.Index.hasnans(self)
pandas.core.indexes.base.Index.holds_integer(self)
pandas.core.indexes.base.Index.identical(self,other)
pandas.core.indexes.base.Index.inferred_type(self)
pandas.core.indexes.base.Index.insert(self,loc,item)
pandas.core.indexes.base.Index.intersection(self,other)
pandas.core.indexes.base.Index.is_(self,other)
pandas.core.indexes.base.Index.is_all_dates(self)
pandas.core.indexes.base.Index.is_boolean(self)
pandas.core.indexes.base.Index.is_categorical(self)
pandas.core.indexes.base.Index.is_floating(self)
pandas.core.indexes.base.Index.is_integer(self)
pandas.core.indexes.base.Index.is_interval(self)
pandas.core.indexes.base.Index.is_lexsorted_for_tuple(self,tup)
pandas.core.indexes.base.Index.is_mixed(self)
pandas.core.indexes.base.Index.is_monotonic(self)
pandas.core.indexes.base.Index.is_monotonic_decreasing(self)
pandas.core.indexes.base.Index.is_monotonic_increasing(self)
pandas.core.indexes.base.Index.is_numeric(self)
pandas.core.indexes.base.Index.is_object(self)
pandas.core.indexes.base.Index.is_type_compatible(self,kind)
pandas.core.indexes.base.Index.is_unique(self)
pandas.core.indexes.base.Index.isin(self,values,level=None)
pandas.core.indexes.base.Index.isnull(self)
pandas.core.indexes.base.Index.join(self,other,how='left',level=None,return_indexers=False,sort=False)
pandas.core.indexes.base.Index.map(self,mapper)
pandas.core.indexes.base.Index.memory_usage(self,deep=False)
pandas.core.indexes.base.Index.nlevels(self)
pandas.core.indexes.base.Index.notnull(self)
pandas.core.indexes.base.Index.putmask(self,mask,value)
pandas.core.indexes.base.Index.ravel(self,order='C')
pandas.core.indexes.base.Index.reindex(self,target,method=None,level=None,limit=None,tolerance=None)
pandas.core.indexes.base.Index.rename(self,name,inplace=False)
pandas.core.indexes.base.Index.repeat(self,repeats,*args,**kwargs)
pandas.core.indexes.base.Index.reshape(self,*args,**kwargs)
pandas.core.indexes.base.Index.set_names(self,names,level=None,inplace=False)
pandas.core.indexes.base.Index.set_value(self,arr,key,value)
pandas.core.indexes.base.Index.shift(self,periods=1,freq=None)
pandas.core.indexes.base.Index.slice_indexer(self,start=None,end=None,step=None,kind=None)
pandas.core.indexes.base.Index.slice_locs(self,start=None,end=None,step=None,kind=None)
pandas.core.indexes.base.Index.sort(self,*args,**kwargs)
pandas.core.indexes.base.Index.sort_values(self,return_indexer=False,ascending=True)
pandas.core.indexes.base.Index.sortlevel(self,level=None,ascending=True,sort_remaining=None)
pandas.core.indexes.base.Index.summary(self,name=None)
pandas.core.indexes.base.Index.symmetric_difference(self,other,result_name=None)
pandas.core.indexes.base.Index.take(self,indices,axis=0,allow_fill=True,fill_value=None,**kwargs)
pandas.core.indexes.base.Index.to_datetime(self,dayfirst=False)
pandas.core.indexes.base.Index.to_native_types(self,slicer=None,**kwargs)
pandas.core.indexes.base.Index.to_series(self,**kwargs)
pandas.core.indexes.base.Index.tolist(self)
pandas.core.indexes.base.Index.union(self,other)
pandas.core.indexes.base.Index.unique(self)
pandas.core.indexes.base.Index.values(self)
pandas.core.indexes.base.Index.view(self,cls=None)
pandas.core.indexes.base.Index.where(self,cond,other=None)
pandas.core.indexes.base.InvalidIndexError(Exception)
pandas.core.indexes.base._ensure_has_len(seq)
pandas.core.indexes.base._ensure_index(index_like,copy=False)
pandas.core.indexes.base._get_na_value(dtype)
pandas.core.indexes.base._new_Index(cls,d)
pandas.core.indexes.base._trim_front(strings)
pandas.core.indexes.base._try_get_item(x)
pandas.core.indexes.base._validate_join_method(method)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/indexes/accessors.py----------------------------------------
A:pandas.core.indexes.accessors.result->Series(result, index=self.index, name=self.name)
A:pandas.core.indexes.accessors.method->getattr(self.values, name)
pandas.core.indexes.accessors.CombinedDatetimelikeProperties(DatetimeProperties,TimedeltaProperties)
pandas.core.indexes.accessors.DatetimeProperties(Properties)
pandas.core.indexes.accessors.DatetimeProperties.to_pydatetime(self)
pandas.core.indexes.accessors.PeriodProperties(Properties)
pandas.core.indexes.accessors.Properties(self,values,index,name,orig=None)
pandas.core.indexes.accessors.Properties.__init__(self,values,index,name,orig=None)
pandas.core.indexes.accessors.Properties._delegate_method(self,name,*args,**kwargs)
pandas.core.indexes.accessors.Properties._delegate_property_get(self,name)
pandas.core.indexes.accessors.Properties._delegate_property_set(self,name,value,*args,**kwargs)
pandas.core.indexes.accessors.TimedeltaProperties(Properties)
pandas.core.indexes.accessors.TimedeltaProperties.components(self)
pandas.core.indexes.accessors.TimedeltaProperties.to_pytimedelta(self)
pandas.core.indexes.accessors.is_datetimelike(data)
pandas.core.indexes.accessors.maybe_to_datetimelike(data,copy=False)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/indexes/multi.py----------------------------------------
A:pandas.core.indexes.multi._index_doc_kwargs->dict(ibase._index_doc_kwargs)
A:pandas.core.indexes.multi._names->FrozenList()
A:pandas.core.indexes.multi._levels->FrozenList()
A:pandas.core.indexes.multi._labels->FrozenList()
A:pandas.core.indexes.multi.result->Series(Index(indexer).isin(r).nonzero()[0])
A:pandas.core.indexes.multi.result.sortorder->int(sortorder)
A:pandas.core.indexes.multi.label_length->len(self.labels[0])
A:pandas.core.indexes.multi.new_levels->list(self.levels)
A:pandas.core.indexes.multi.new_levels[l]->_ensure_index(v, copy=copy)._shallow_copy()
A:pandas.core.indexes.multi.idx->lev.take(uniques).get_loc(lab)
A:pandas.core.indexes.multi.__set_levels->deprecate('setting `levels` directly', partial(set_levels, inplace=True, verify_integrity=True), alt_name='set_levels')
A:pandas.core.indexes.multi.levels->state.get('levels')
A:pandas.core.indexes.multi.new_labels->list(self.labels)
A:pandas.core.indexes.multi.new_labels[l]->_ensure_frozen(lab, lev, copy=copy)._shallow_copy()
A:pandas.core.indexes.multi.__set_labels->deprecate('setting labels directly', partial(set_labels, inplace=True, verify_integrity=True), alt_name='set_labels')
A:pandas.core.indexes.multi.labels->list(self.labels)
A:pandas.core.indexes.multi.name->kwargs.get('name')
A:pandas.core.indexes.multi.names->state.get('names')
A:pandas.core.indexes.multi.kwargs['names']->kwargs.pop('name', None)
A:pandas.core.indexes.multi.level_nbytes->sum((i.memory_usage(deep=deep) for i in self.levels))
A:pandas.core.indexes.multi.label_nbytes->sum((i.nbytes for i in self.labels))
A:pandas.core.indexes.multi.names_nbytes->sum((getsizeof(i) for i in self.names))
A:pandas.core.indexes.multi.level->level.insert(lev_loc, k).insert(lev_loc, k)
A:pandas.core.indexes.multi.nan_index->len(level)
A:pandas.core.indexes.multi.label->self._get_level_values(i)
A:pandas.core.indexes.multi.mi->MultiIndex(levels=new_levels, labels=new_labels, names=self.names, sortorder=self.sortorder, verify_integrity=False)
A:pandas.core.indexes.multi.level_values->self.levels[level].take(indexer)
A:pandas.core.indexes.multi.grouper->level_index.take(uniques).take(labels)
A:pandas.core.indexes.multi.(labels, uniques)->pandas.core.algorithms.factorize(indexer, sort=True)
A:pandas.core.indexes.multi.(ok_labels, uniques)->pandas.core.algorithms.factorize(indexer[mask], sort=True)
A:pandas.core.indexes.multi.level_index->level_index.take(uniques).take(uniques)
A:pandas.core.indexes.multi.count->self.names.count(level)
A:pandas.core.indexes.multi.box->hasattr(lev, '_box_values')
A:pandas.core.indexes.multi.taken->self._assert_take_fillable(self.labels, indices, allow_fill=allow_fill, fill_value=fill_value, na_value=-1)
A:pandas.core.indexes.multi.self._tuples->pandas._libs.lib.fast_zip(values)
A:pandas.core.indexes.multi.sort_order->numpy.lexsort(values)
A:pandas.core.indexes.multi.k->len(label_list)
A:pandas.core.indexes.multi.key->tuple(self[indexer].tolist()[0])
A:pandas.core.indexes.multi.shape->list(self.levshape)
A:pandas.core.indexes.multi.ids->get_group_index(self.labels, shape, sort=False, xnull=False)
A:pandas.core.indexes.multi.indexer->_update_indexer(_convert_to_indexer(self.get_loc_level(k, level=i, drop_level=False)[0]), indexer=indexer)
A:pandas.core.indexes.multi.s->_values_from_object(series)
A:pandas.core.indexes.multi.loc->level_index.take(uniques).take(uniques).get_loc(key)
A:pandas.core.indexes.multi.new_index->maybe_droplevels(indexer, [0], drop_level)
A:pandas.core.indexes.multi.filled->pandas.core.algorithms.take_1d(unique._values, labels, fill_value=unique._na_value)
A:pandas.core.indexes.multi.values->index.get_indexer(labels)
A:pandas.core.indexes.multi.formatted->formatted.tolist().tolist()
A:pandas.core.indexes.multi.sparsify->get_option('display.multi_sparse')
A:pandas.core.indexes.multi.result_levels->_sparsify(result_levels, start=int(names), sentinel=sentinel)
A:pandas.core.indexes.multi.adj->_get_adjustment()
A:pandas.core.indexes.multi.(labels, levels)->_factorize_from_iterables(iterables)
A:pandas.core.indexes.multi.arrays->lzip(*tuples)
A:pandas.core.indexes.multi.lev->lev.take(uniques).take(uniques)
A:pandas.core.indexes.multi.ri->pandas._libs.lib.get_reverse_indexer(indexer, len(indexer))
A:pandas.core.indexes.multi.lab->numpy.where(lab > u, lab - 1, lab)
A:pandas.core.indexes.multi.changed->numpy.ones(self.nlevels, dtype=bool)
A:pandas.core.indexes.multi.uniques->pandas.core.algorithms.unique(lab)
A:pandas.core.indexes.multi.diff->Index(np.arange(len(lev))).difference(uniques)
A:pandas.core.indexes.multi.unused->Index(np.arange(len(lev))).difference(uniques).sort_values(ascending=False)
A:pandas.core.indexes.multi.d->dict(levels=[lev for lev in self.levels], labels=[label for label in self.labels], sortorder=self.sortorder, names=list(self.names))
A:pandas.core.indexes.multi.sortorder->state.get('sortorder')
A:pandas.core.indexes.multi.indices->_ensure_platform_int(indices)
A:pandas.core.indexes.multi.label_values->new_label.values()
A:pandas.core.indexes.multi.new_tuples->numpy.concatenate(to_concat)
A:pandas.core.indexes.multi.msg->'unsupported indexer of type {}'.format(type(loc))
A:pandas.core.indexes.multi.i->list(self.labels).searchsorted(loc, side='left')
A:pandas.core.indexes.multi.new_names->list(self.names)
A:pandas.core.indexes.multi.j->list(self.labels).searchsorted(loc, side='right')
A:pandas.core.indexes.multi.primary->tuple((labels.pop(lev - i) for (i, lev) in enumerate(level)))
A:pandas.core.indexes.multi.primshp->tuple((shape.pop(lev - i) for (i, lev) in enumerate(level)))
A:pandas.core.indexes.multi.(indexer, keyarr)->super(MultiIndex, self)._convert_listlike_indexer(keyarr, kind=kind)
A:pandas.core.indexes.multi.(_, indexer)->self.reindex(keyarr, level=level)
A:pandas.core.indexes.multi.check->self.levels[0].get_indexer(keyarr)
A:pandas.core.indexes.multi.method->pandas.core.missing.clean_reindex_fill_method(method)
A:pandas.core.indexes.multi.target->target.copy(deep=False).copy(deep=False)
A:pandas.core.indexes.multi.attrs->lev.take(uniques).get_loc(lab)._get_attributes_dict()
A:pandas.core.indexes.multi.(target, indexer, _)->self._join_level(target, level, how='right', return_indexers=True, keep_order=False)
A:pandas.core.indexes.multi.n->len(self)
A:pandas.core.indexes.multi.zipped->zip(tup, self.levels, self.labels)
A:pandas.core.indexes.multi.mask->numpy.zeros(len(self), dtype=bool)
A:pandas.core.indexes.multi.keylen->len(key)
A:pandas.core.indexes.multi.(loc, new_index)->self.get_loc_level(k, level=lev)
A:pandas.core.indexes.multi.can_index_exactly->any(all_dates)
A:pandas.core.indexes.multi.r->numpy.arange(start, stop, step)
A:pandas.core.indexes.multi.mapper->Series(indexer)
A:pandas.core.indexes.multi.m->numpy.zeros(n, dtype=bool)
A:pandas.core.indexes.multi.start->level_index.take(uniques).take(uniques).get_loc(key.start)
A:pandas.core.indexes.multi.stop->level_index.take(uniques).take(uniques).get_loc(key.stop)
A:pandas.core.indexes.multi.startstop->level_index.take(uniques).take(uniques).slice_indexer(key.start, key.stop, key.step, kind='loc')
A:pandas.core.indexes.multi.idxrs->_convert_to_indexer(self._get_level_indexer(x, level=i, indexer=indexer))
A:pandas.core.indexes.multi.(i, j)->self.levels[0].slice_locs(before, after)
A:pandas.core.indexes.multi.(left, right)->self.slice_locs(before, after)
A:pandas.core.indexes.multi.svalues->pandas.core.algorithms.take_nd(np.asarray(self.levels[i]._values), slabels, allow_fill=False)
A:pandas.core.indexes.multi.ovalues->pandas.core.algorithms.take_nd(np.asarray(other.levels[i]._values), olabels, allow_fill=False)
A:pandas.core.indexes.multi.(other, result_names)->self._convert_can_do_setop(other)
A:pandas.core.indexes.multi.uniq_tuples->sorted(set(self_tuples) & set(other_tuples))
A:pandas.core.indexes.multi.difference->sorted(set(self._values) - set(other._values))
A:pandas.core.indexes.multi.other->MultiIndex.from_tuples(other)
A:pandas.core.indexes.multi.lev_loc->level.insert(lev_loc, k).insert(lev_loc, k).get_loc(k)
A:pandas.core.indexes.multi.inds->numpy.arange(len(self.levels[0]))
A:pandas.core.indexes.multi.self.__bounds->self.labels[0].searchsorted(inds)
A:pandas.core.indexes.multi.num->self._get_level_number(level)
A:pandas.core.indexes.multi.pivoted->lzip(*label_list)
pandas.core.indexes.multi.MultiIndex(cls,levels=None,labels=None,sortorder=None,names=None,copy=False,verify_integrity=True,_set_identity=True,name=None,**kwargs)
pandas.core.indexes.multi.MultiIndex.__array__(self,dtype=None)
pandas.core.indexes.multi.MultiIndex.__contains__(self,key)
pandas.core.indexes.multi.MultiIndex.__getitem__(self,key)
pandas.core.indexes.multi.MultiIndex.__getslice__(self,i,j)
pandas.core.indexes.multi.MultiIndex.__len__(self)
pandas.core.indexes.multi.MultiIndex.__new__(cls,levels=None,labels=None,sortorder=None,names=None,copy=False,verify_integrity=True,_set_identity=True,name=None,**kwargs)
pandas.core.indexes.multi.MultiIndex.__reduce__(self)
pandas.core.indexes.multi.MultiIndex.__setstate__(self,state)
pandas.core.indexes.multi.MultiIndex._assert_take_fillable(self,values,indices,allow_fill=True,fill_value=None,na_value=None)
pandas.core.indexes.multi.MultiIndex._bounds(self)
pandas.core.indexes.multi.MultiIndex._constructor(self)
pandas.core.indexes.multi.MultiIndex._convert_can_do_setop(self,other)
pandas.core.indexes.multi.MultiIndex._convert_listlike_indexer(self,keyarr,kind=None)
pandas.core.indexes.multi.MultiIndex._drop_from_level(self,labels,level)
pandas.core.indexes.multi.MultiIndex._engine(self)
pandas.core.indexes.multi.MultiIndex._format_attrs(self)
pandas.core.indexes.multi.MultiIndex._format_data(self)
pandas.core.indexes.multi.MultiIndex._format_native_types(self,na_rep='nan',**kwargs)
pandas.core.indexes.multi.MultiIndex._format_space(self)
pandas.core.indexes.multi.MultiIndex._from_elements(values,labels=None,levels=None,names=None,sortorder=None)
pandas.core.indexes.multi.MultiIndex._get_grouper_for_level(self,mapper,level)
pandas.core.indexes.multi.MultiIndex._get_labels(self)
pandas.core.indexes.multi.MultiIndex._get_labels_for_sorting(self)
pandas.core.indexes.multi.MultiIndex._get_level_indexer(self,key,level=0,indexer=None)
pandas.core.indexes.multi.MultiIndex._get_level_number(self,level)
pandas.core.indexes.multi.MultiIndex._get_level_values(self,level)
pandas.core.indexes.multi.MultiIndex._get_levels(self)
pandas.core.indexes.multi.MultiIndex._get_names(self)
pandas.core.indexes.multi.MultiIndex._has_complex_internals(self)
pandas.core.indexes.multi.MultiIndex._hashed_indexing_key(self,key)
pandas.core.indexes.multi.MultiIndex._hashed_values(self)
pandas.core.indexes.multi.MultiIndex._have_mixed_levels(self)
pandas.core.indexes.multi.MultiIndex._inferred_type_levels(self)
pandas.core.indexes.multi.MultiIndex._is_memory_usage_qualified(self)
pandas.core.indexes.multi.MultiIndex._is_v1(self)
pandas.core.indexes.multi.MultiIndex._is_v2(self)
pandas.core.indexes.multi.MultiIndex._nbytes(self,deep=False)
pandas.core.indexes.multi.MultiIndex._partial_tup_index(self,tup,side='left')
pandas.core.indexes.multi.MultiIndex._reference_duplicate_name(self,name)
pandas.core.indexes.multi.MultiIndex._set_labels(self,labels,level=None,copy=False,validate=True,verify_integrity=False)
pandas.core.indexes.multi.MultiIndex._set_levels(self,levels,level=None,copy=False,validate=True,verify_integrity=False)
pandas.core.indexes.multi.MultiIndex._set_names(self,names,level=None,validate=True)
pandas.core.indexes.multi.MultiIndex._shallow_copy(self,values=None,**kwargs)
pandas.core.indexes.multi.MultiIndex._shallow_copy_with_infer(self,values=None,**kwargs)
pandas.core.indexes.multi.MultiIndex._sort_levels_monotonic(self)
pandas.core.indexes.multi.MultiIndex._to_safe_for_reshape(self)
pandas.core.indexes.multi.MultiIndex._verify_integrity(self,labels=None,levels=None)
pandas.core.indexes.multi.MultiIndex._wrap_joined_index(self,joined,other)
pandas.core.indexes.multi.MultiIndex.append(self,other)
pandas.core.indexes.multi.MultiIndex.argsort(self,*args,**kwargs)
pandas.core.indexes.multi.MultiIndex.astype(self,dtype,copy=True)
pandas.core.indexes.multi.MultiIndex.copy(self,names=None,dtype=None,levels=None,labels=None,deep=False,_set_identity=False,**kwargs)
pandas.core.indexes.multi.MultiIndex.delete(self,loc)
pandas.core.indexes.multi.MultiIndex.difference(self,other)
pandas.core.indexes.multi.MultiIndex.drop(self,labels,level=None,errors='raise')
pandas.core.indexes.multi.MultiIndex.droplevel(self,level=0)
pandas.core.indexes.multi.MultiIndex.dropna(self,how='any')
pandas.core.indexes.multi.MultiIndex.dtype(self)
pandas.core.indexes.multi.MultiIndex.duplicated(self,keep='first')
pandas.core.indexes.multi.MultiIndex.equal_levels(self,other)
pandas.core.indexes.multi.MultiIndex.equals(self,other)
pandas.core.indexes.multi.MultiIndex.fillna(self,value=None,downcast=None)
pandas.core.indexes.multi.MultiIndex.format(self,space=2,sparsify=None,adjoin=True,names=False,na_rep=None,formatter=None)
pandas.core.indexes.multi.MultiIndex.from_arrays(cls,arrays,sortorder=None,names=None)
pandas.core.indexes.multi.MultiIndex.from_product(cls,iterables,sortorder=None,names=None)
pandas.core.indexes.multi.MultiIndex.from_tuples(cls,tuples,sortorder=None,names=None)
pandas.core.indexes.multi.MultiIndex.get_indexer(self,target,method=None,limit=None,tolerance=None)
pandas.core.indexes.multi.MultiIndex.get_indexer_non_unique(self,target)
pandas.core.indexes.multi.MultiIndex.get_level_values(self,level)
pandas.core.indexes.multi.MultiIndex.get_loc(self,key,method=None)
pandas.core.indexes.multi.MultiIndex.get_loc_level(self,key,level=0,drop_level=True)
pandas.core.indexes.multi.MultiIndex.get_locs(self,tup)
pandas.core.indexes.multi.MultiIndex.get_slice_bound(self,label,side,kind)
pandas.core.indexes.multi.MultiIndex.get_value(self,series,key)
pandas.core.indexes.multi.MultiIndex.inferred_type(self)
pandas.core.indexes.multi.MultiIndex.insert(self,loc,item)
pandas.core.indexes.multi.MultiIndex.intersection(self,other)
pandas.core.indexes.multi.MultiIndex.is_all_dates(self)
pandas.core.indexes.multi.MultiIndex.is_lexsorted(self)
pandas.core.indexes.multi.MultiIndex.is_lexsorted_for_tuple(self,tup)
pandas.core.indexes.multi.MultiIndex.is_monotonic(self)
pandas.core.indexes.multi.MultiIndex.is_monotonic_decreasing(self)
pandas.core.indexes.multi.MultiIndex.is_monotonic_increasing(self)
pandas.core.indexes.multi.MultiIndex.is_unique(self)
pandas.core.indexes.multi.MultiIndex.isin(self,values,level=None)
pandas.core.indexes.multi.MultiIndex.levshape(self)
pandas.core.indexes.multi.MultiIndex.lexsort_depth(self)
pandas.core.indexes.multi.MultiIndex.memory_usage(self,deep=False)
pandas.core.indexes.multi.MultiIndex.nbytes(self)
pandas.core.indexes.multi.MultiIndex.nlevels(self)
pandas.core.indexes.multi.MultiIndex.reindex(self,target,method=None,level=None,limit=None,tolerance=None)
pandas.core.indexes.multi.MultiIndex.remove_unused_levels(self)
pandas.core.indexes.multi.MultiIndex.reorder_levels(self,order)
pandas.core.indexes.multi.MultiIndex.repeat(self,repeats,*args,**kwargs)
pandas.core.indexes.multi.MultiIndex.set_labels(self,labels,level=None,inplace=False,verify_integrity=True)
pandas.core.indexes.multi.MultiIndex.set_levels(self,levels,level=None,inplace=False,verify_integrity=True)
pandas.core.indexes.multi.MultiIndex.slice_locs(self,start=None,end=None,step=None,kind=None)
pandas.core.indexes.multi.MultiIndex.sortlevel(self,level=0,ascending=True,sort_remaining=True)
pandas.core.indexes.multi.MultiIndex.swaplevel(self,i=-2,j=-1)
pandas.core.indexes.multi.MultiIndex.take(self,indices,axis=0,allow_fill=True,fill_value=None,**kwargs)
pandas.core.indexes.multi.MultiIndex.to_frame(self,index=True)
pandas.core.indexes.multi.MultiIndex.to_hierarchical(self,n_repeat,n_shuffle=1)
pandas.core.indexes.multi.MultiIndex.truncate(self,before=None,after=None)
pandas.core.indexes.multi.MultiIndex.union(self,other)
pandas.core.indexes.multi.MultiIndex.values(self)
pandas.core.indexes.multi.MultiIndex.view(self,cls=None)
pandas.core.indexes.multi.MultiIndex.where(self,cond,other=None)
pandas.core.indexes.multi._get_na_rep(dtype)
pandas.core.indexes.multi._sparsify(label_list,start=0,sentinel='')


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/indexes/frozen.py----------------------------------------
A:pandas.core.indexes.frozen.other->list(other)
A:pandas.core.indexes.frozen.res->numpy.array(data, dtype=dtype, copy=copy).view(cls)
A:pandas.core.indexes.frozen.arr->self.view(np.ndarray).copy()
A:pandas.core.indexes.frozen.prepr->pprint_thing(self, escape_chars=('\t', '\r', '\n'), quote_strings=True)
A:pandas.core.indexes.frozen.v->self.dtype.type(v)
A:pandas.core.indexes.frozen.array_like->array_like.copy().copy()
pandas.core.indexes.frozen.FrozenList(PandasObject,list)
pandas.core.indexes.frozen.FrozenList.__add__(self,other)
pandas.core.indexes.frozen.FrozenList.__eq__(self,other)
pandas.core.indexes.frozen.FrozenList.__getitem__(self,n)
pandas.core.indexes.frozen.FrozenList.__getslice__(self,i,j)
pandas.core.indexes.frozen.FrozenList.__hash__(self)
pandas.core.indexes.frozen.FrozenList.__mul__(self,other)
pandas.core.indexes.frozen.FrozenList.__radd__(self,other)
pandas.core.indexes.frozen.FrozenList.__reduce__(self)
pandas.core.indexes.frozen.FrozenList.__repr__(self)
pandas.core.indexes.frozen.FrozenList.__unicode__(self)
pandas.core.indexes.frozen.FrozenList._disabled(self,*args,**kwargs)
pandas.core.indexes.frozen.FrozenNDArray(cls,data,dtype=None,copy=False)
pandas.core.indexes.frozen.FrozenNDArray.__new__(cls,data,dtype=None,copy=False)
pandas.core.indexes.frozen.FrozenNDArray.__unicode__(self)
pandas.core.indexes.frozen.FrozenNDArray._disabled(self,*args,**kwargs)
pandas.core.indexes.frozen.FrozenNDArray._shallow_copy(self)
pandas.core.indexes.frozen.FrozenNDArray.searchsorted(self,v,side='left',sorter=None)
pandas.core.indexes.frozen.FrozenNDArray.values(self)
pandas.core.indexes.frozen._ensure_frozen(array_like,categories,copy=False)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/indexes/timedeltas.py----------------------------------------
A:pandas.core.indexes.timedeltas.func->getattr(super(TimedeltaIndex, self), opname)
A:pandas.core.indexes.timedeltas.other->TimedeltaIndex(other)
A:pandas.core.indexes.timedeltas.result->pandas.core.indexes.base.Index.intersection(self, other)
A:pandas.core.indexes.timedeltas._inner_indexer->_join_i8_wrapper(libjoin.inner_join_indexer_int64)
A:pandas.core.indexes.timedeltas._outer_indexer->_join_i8_wrapper(libjoin.outer_join_indexer_int64)
A:pandas.core.indexes.timedeltas._left_indexer->_join_i8_wrapper(libjoin.left_join_indexer_int64)
A:pandas.core.indexes.timedeltas._left_indexer_unique->_join_i8_wrapper(libjoin.left_join_indexer_unique_int64, with_indexers=False)
A:pandas.core.indexes.timedeltas.__eq__->_td_index_cmp('__eq__')
A:pandas.core.indexes.timedeltas.__ne__->_td_index_cmp('__ne__', nat_result=True)
A:pandas.core.indexes.timedeltas.__lt__->_td_index_cmp('__lt__')
A:pandas.core.indexes.timedeltas.__gt__->_td_index_cmp('__gt__')
A:pandas.core.indexes.timedeltas.__le__->_td_index_cmp('__le__')
A:pandas.core.indexes.timedeltas.__ge__->_td_index_cmp('__ge__')
A:pandas.core.indexes.timedeltas.freq->getattr(self, 'freqstr', getattr(self, 'inferred_freq', None))
A:pandas.core.indexes.timedeltas.periods->int(periods)
A:pandas.core.indexes.timedeltas.data->TimedeltaIndex._simple_new(data, None)
A:pandas.core.indexes.timedeltas.index->cls._simple_new(index, name=name, freq=offset)
A:pandas.core.indexes.timedeltas.on_freq->cls._generate(index[0], None, len(index), name, freq)
A:pandas.core.indexes.timedeltas.index.freq->to_offset(inferred)
A:pandas.core.indexes.timedeltas.start->Timedelta(start)
A:pandas.core.indexes.timedeltas.end->min(left[-1], right[-1])
A:pandas.core.indexes.timedeltas.values->self._engine.get_value(_values_from_object(series), key)
A:pandas.core.indexes.timedeltas.new_values->self._add_delta_tdi(delta)
A:pandas.core.indexes.timedeltas.name->pandas.core.common._maybe_match_name(self, delta)
A:pandas.core.indexes.timedeltas.result.flat[imask]->numpy.array([getattr(Timedelta(val), m) for val in values[imask]])
A:pandas.core.indexes.timedeltas.dtype->numpy.dtype(dtype)
A:pandas.core.indexes.timedeltas.result.freq->to_offset(result.inferred_freq)
A:pandas.core.indexes.timedeltas.joined->self._shallow_copy(joined, name=name)
A:pandas.core.indexes.timedeltas.loc->pandas._libs.lib.maybe_indices_to_slice(_ensure_int64(np.array(loc)), len(self))
A:pandas.core.indexes.timedeltas.dates->pandas.core.dtypes.concat._concat_compat((left.values, right_chunk))
A:pandas.core.indexes.timedeltas.lslice->slice(*left.slice_locs(start, end))
A:pandas.core.indexes.timedeltas.key->Timedelta(key)
A:pandas.core.indexes.timedeltas.tolerance->self._convert_tolerance(tolerance)
A:pandas.core.indexes.timedeltas.stamp->Timedelta(key)
A:pandas.core.indexes.timedeltas.parsed->_coerce_scalar_to_timedelta_type(label, box=True)
A:pandas.core.indexes.timedeltas.lbound->_coerce_scalar_to_timedelta_type(label, box=True).round(parsed.resolution)
A:pandas.core.indexes.timedeltas.value->_to_m8(value)
A:pandas.core.indexes.timedeltas.item->_to_m8(item)
A:pandas.core.indexes.timedeltas.new_tds->numpy.delete(self.asi8, loc)
pandas.core.indexes.timedeltas.TimedeltaIndex(cls,data=None,unit=None,freq=None,start=None,end=None,periods=None,copy=False,name=None,closed=None,verify_integrity=True,**kwargs)
pandas.core.indexes.timedeltas.TimedeltaIndex.__new__(cls,data=None,unit=None,freq=None,start=None,end=None,periods=None,copy=False,name=None,closed=None,verify_integrity=True,**kwargs)
pandas.core.indexes.timedeltas.TimedeltaIndex.__setstate__(self,state)
pandas.core.indexes.timedeltas.TimedeltaIndex._add_datelike(self,other)
pandas.core.indexes.timedeltas.TimedeltaIndex._add_delta(self,delta)
pandas.core.indexes.timedeltas.TimedeltaIndex._box_func(self)
pandas.core.indexes.timedeltas.TimedeltaIndex._can_fast_union(self,other)
pandas.core.indexes.timedeltas.TimedeltaIndex._evaluate_with_timedelta_like(self,other,op,opstr)
pandas.core.indexes.timedeltas.TimedeltaIndex._fast_union(self,other)
pandas.core.indexes.timedeltas.TimedeltaIndex._format_native_types(self,na_rep=u('NaT'),date_format=None,**kwargs)
pandas.core.indexes.timedeltas.TimedeltaIndex._formatter_func(self)
pandas.core.indexes.timedeltas.TimedeltaIndex._generate(cls,start,end,periods,name,offset,closed=None)
pandas.core.indexes.timedeltas.TimedeltaIndex._get_field(self,m)
pandas.core.indexes.timedeltas.TimedeltaIndex._get_string_slice(self,key,use_lhs=True,use_rhs=True)
pandas.core.indexes.timedeltas.TimedeltaIndex._join_i8_wrapper(joinf,**kwargs)
pandas.core.indexes.timedeltas.TimedeltaIndex._maybe_cast_slice_bound(self,label,side,kind)
pandas.core.indexes.timedeltas.TimedeltaIndex._maybe_promote(self,other)
pandas.core.indexes.timedeltas.TimedeltaIndex._maybe_update_attributes(self,attrs)
pandas.core.indexes.timedeltas.TimedeltaIndex._partial_td_slice(self,key,freq,use_lhs=True,use_rhs=True)
pandas.core.indexes.timedeltas.TimedeltaIndex._simple_new(cls,values,name=None,freq=None,**kwargs)
pandas.core.indexes.timedeltas.TimedeltaIndex._sub_datelike(self,other)
pandas.core.indexes.timedeltas.TimedeltaIndex._wrap_joined_index(self,joined,other)
pandas.core.indexes.timedeltas.TimedeltaIndex._wrap_union_result(self,other,result)
pandas.core.indexes.timedeltas.TimedeltaIndex.astype(self,dtype,copy=True)
pandas.core.indexes.timedeltas.TimedeltaIndex.components(self)
pandas.core.indexes.timedeltas.TimedeltaIndex.days(self)
pandas.core.indexes.timedeltas.TimedeltaIndex.delete(self,loc)
pandas.core.indexes.timedeltas.TimedeltaIndex.dtype(self)
pandas.core.indexes.timedeltas.TimedeltaIndex.get_loc(self,key,method=None,tolerance=None)
pandas.core.indexes.timedeltas.TimedeltaIndex.get_value(self,series,key)
pandas.core.indexes.timedeltas.TimedeltaIndex.get_value_maybe_box(self,series,key)
pandas.core.indexes.timedeltas.TimedeltaIndex.inferred_type(self)
pandas.core.indexes.timedeltas.TimedeltaIndex.insert(self,loc,item)
pandas.core.indexes.timedeltas.TimedeltaIndex.intersection(self,other)
pandas.core.indexes.timedeltas.TimedeltaIndex.is_all_dates(self)
pandas.core.indexes.timedeltas.TimedeltaIndex.is_type_compatible(self,typ)
pandas.core.indexes.timedeltas.TimedeltaIndex.join(self,other,how='left',level=None,return_indexers=False)
pandas.core.indexes.timedeltas.TimedeltaIndex.microseconds(self)
pandas.core.indexes.timedeltas.TimedeltaIndex.nanoseconds(self)
pandas.core.indexes.timedeltas.TimedeltaIndex.searchsorted(self,value,side='left',sorter=None)
pandas.core.indexes.timedeltas.TimedeltaIndex.seconds(self)
pandas.core.indexes.timedeltas.TimedeltaIndex.to_pytimedelta(self)
pandas.core.indexes.timedeltas.TimedeltaIndex.total_seconds(self)
pandas.core.indexes.timedeltas.TimedeltaIndex.union(self,other)
pandas.core.indexes.timedeltas._generate_regular_range(start,end,periods,offset)
pandas.core.indexes.timedeltas._is_convertible_to_index(other)
pandas.core.indexes.timedeltas._is_convertible_to_td(key)
pandas.core.indexes.timedeltas._td_index_cmp(opname,nat_result=False)
pandas.core.indexes.timedeltas._to_m8(key)
pandas.core.indexes.timedeltas.timedelta_range(start=None,end=None,periods=None,freq='D',name=None,closed=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/indexes/api.py----------------------------------------
A:pandas.core.indexes.api.indexes->_get_distinct_indexes(indexes)
A:pandas.core.indexes.api.index->index._shallow_copy(name=name)._shallow_copy(name=name)
A:pandas.core.indexes.api.union->_union_indexes(indexes)
A:pandas.core.indexes.api.result->result.union(other).union(other)
A:pandas.core.indexes.api.(indexes, kind)->_sanitize_and_check(indexes)
A:pandas.core.indexes.api.i->i.tolist().tolist()
A:pandas.core.indexes.api.kinds->list(set([type(index) for index in indexes]))
A:pandas.core.indexes.api.consensus_names->set([tuple(i.names) for i in indexes if any((n is not None for n in i.names))])
pandas.core.indexes.api._all_indexes_same(indexes)
pandas.core.indexes.api._get_combined_index(indexes,intersect=False)
pandas.core.indexes.api._get_consensus_names(indexes)
pandas.core.indexes.api._get_distinct_indexes(indexes)
pandas.core.indexes.api._sanitize_and_check(indexes)
pandas.core.indexes.api._union_indexes(indexes)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/core/indexes/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/types/concat.py----------------------------------------
pandas.types.concat.union_categoricals(to_union,sort_categories=False,ignore_order=False)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/types/common.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/types/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/errors/__init__.py----------------------------------------
pandas.errors.__init__.DtypeWarning(Warning)
pandas.errors.__init__.EmptyDataError(ValueError)
pandas.errors.__init__.ParserError(ValueError)
pandas.errors.__init__.ParserWarning(Warning)
pandas.errors.__init__.PerformanceWarning(Warning)
pandas.errors.__init__.UnsortedIndexError(KeyError)
pandas.errors.__init__.UnsupportedFunctionCall(ValueError)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/plotting/_core.py----------------------------------------
A:pandas.plotting._core.colors->_get_colors()
A:pandas.plotting._core.mpl_stylesheet['axes.prop_cycle']->cycler.cycler('color', colors)
A:pandas.plotting._core.value->self.kwds.copy().pop(attr, self._attr_defaults.get(attr, None))
A:pandas.plotting._core.xerr->self.kwds.copy().pop('xerr', None)
A:pandas.plotting._core.yerr->self.kwds.copy().pop('yerr', None)
A:pandas.plotting._core.self.errors[kw]->self._parse_errorbars(kw, err)
A:pandas.plotting._core.self.colormap->self.kwds.copy().pop('cmap')
A:pandas.plotting._core.data->data._get_numeric_data()._get_numeric_data()
A:pandas.plotting._core.(fig, axes)->_subplots(naxes=naxes, sharex=True, sharey=True, figsize=figsize, ax=ax, layout=layout)
A:pandas.plotting._core.fig->self.kwds.copy().pop('figure', plt.gcf() if plt.get_fignums() else plt.figure(figsize=figsize))
A:pandas.plotting._core.axes->_flatten(axes)
A:pandas.plotting._core.numeric_data->data._get_numeric_data()._get_numeric_data()._convert(datetime=True)._get_numeric_data()
A:pandas.plotting._core.ax->self.kwds.copy().pop('figure', plt.gcf() if plt.get_fignums() else plt.figure(figsize=figsize)).gca()
A:pandas.plotting._core.labels->self.kwds.copy().pop('labels', idx)
A:pandas.plotting._core.all_axes->self._get_subplots()
A:pandas.plotting._core.(nrows, ncols)->self._get_axes_layout()
A:pandas.plotting._core.msg->'The length of `title` must equal the number of columns if using `title` of type `list` and `subplots=True`.\nlength of title = {}\nnumber of columns = {}'.format(len(self.title), self.nseries)
A:pandas.plotting._core.name->self._get_index_name()
A:pandas.plotting._core.stringified->map(pprint_thing, self.data.columns.names)
A:pandas.plotting._core.(ax, leg)->self._get_ax_legend(self.axes[0])
A:pandas.plotting._core.title->ax.get_legend().get_title().get_text()
A:pandas.plotting._core.self.legend_handles->reversed(self.legend_handles)
A:pandas.plotting._core.self.legend_labels->reversed(self.legend_labels)
A:pandas.plotting._core.leg->self.kwds.copy().pop('figure', plt.gcf() if plt.get_fignums() else plt.figure(figsize=figsize)).gca().get_legend()
A:pandas.plotting._core.other_leg->other_ax.get_legend()
A:pandas.plotting._core.self.data->self.data.fillna(value=0)
A:pandas.plotting._core.x->self._get_xticks(convert_period=True)
A:pandas.plotting._core.mask->isnull(y)
A:pandas.plotting._core.y->remove_na(y)
A:pandas.plotting._core.kwds['xerr']->numpy.array(kwds.get('xerr'))
A:pandas.plotting._core.kwds['yerr']->numpy.array(kwds.get('yerr'))
A:pandas.plotting._core.style->self.style.get(label, style)
A:pandas.plotting._core.e->e.reindex_axis(data.index).reindex_axis(data.index)
A:pandas.plotting._core.err->numpy.tile([err], (self.nseries, len(self.data)))
A:pandas.plotting._core.x_set->set()
A:pandas.plotting._core.y_set->set()
A:pandas.plotting._core.points->self.kwds.copy().pop('figure', plt.gcf() if plt.get_fignums() else plt.figure(figsize=figsize)).gca().get_position().get_points()
A:pandas.plotting._core.cb->self.kwds.pop('colorbar', True)
A:pandas.plotting._core.cmap->self.plt.cm.get_cmap(cmap)
A:pandas.plotting._core.color->self.kwds.pop('color', None)
A:pandas.plotting._core.scatter->self.kwds.copy().pop('figure', plt.gcf() if plt.get_fignums() else plt.figure(figsize=figsize)).gca().scatter(data[x].values, data[y].values, c=c_values, label=label, cmap=cmap, **self.kwds)
A:pandas.plotting._core.kws->dict(ax=ax)
A:pandas.plotting._core.errors_x->self._get_errorbars(label=x, index=0, yerr=False)
A:pandas.plotting._core.errors_y->self._get_errorbars(label=y, index=0, xerr=False)
A:pandas.plotting._core.err_kwds->dict(errors_x, **errors_y)
A:pandas.plotting._core.self.x_compat->bool(self.kwds.pop('x_compat'))
A:pandas.plotting._core.it->self._iter_data()
A:pandas.plotting._core.stacking_id->self._get_stacking_id()
A:pandas.plotting._core.is_errorbar->any((e is not None for e in self.errors.values()))
A:pandas.plotting._core.kwds->self.kwds.copy()
A:pandas.plotting._core.(style, kwds)->self._apply_style_colors(colors, kwds, i, label)
A:pandas.plotting._core.errors->self._get_errorbars(label=label, index=i)
A:pandas.plotting._core.label->pprint_thing(label)
A:pandas.plotting._core.newlines->plotf(ax, x, y, style=style, column_num=i, stacking_id=stacking_id, is_errorbar=is_errorbar, **kwds)
A:pandas.plotting._core.lines->MPLPlot._plot(ax, ind, y, style=style, **kwds)
A:pandas.plotting._core.(left, right)->_get_xlim(lines)
A:pandas.plotting._core.y_values->cls._get_stacked_values(ax, stacking_id, y, kwds['label'])
A:pandas.plotting._core.(freq, data)->_maybe_resample(data, ax, kwds)
A:pandas.plotting._core.ax._stacker_pos_prior[stacking_id]->numpy.zeros(n)
A:pandas.plotting._core.ax._stacker_neg_prior[stacking_id]->numpy.zeros(n)
A:pandas.plotting._core.index_name->self._get_index_name()
A:pandas.plotting._core.line_kwds->self.kwds.copy().copy()
A:pandas.plotting._core.(xdata, y_values)->lines[0].get_data(orig=False)
A:pandas.plotting._core.start->numpy.zeros(len(y))
A:pandas.plotting._core.kwds['color']->lines[0].get_color()
A:pandas.plotting._core.rect->self._plot(ax, self.ax_pos + (i + 0.5) * w, y, w, start=start, label=label, log=self.log, **kwds)
A:pandas.plotting._core.alpha->self.kwds.get('alpha', None)
A:pandas.plotting._core.handle->Rectangle((0, 0), 1, 1, fc=handle.get_color(), alpha=alpha)
A:pandas.plotting._core.self.bar_width->kwargs.pop('width', 0.5)
A:pandas.plotting._core.pos->kwargs.pop('position', 0.5)
A:pandas.plotting._core.self.tick_pos->numpy.arange(len(data))
A:pandas.plotting._core.self.bottom->numpy.array(self.bottom)
A:pandas.plotting._core.self.left->numpy.array(self.left)
A:pandas.plotting._core.self.log->kwargs.pop('log', False)
A:pandas.plotting._core.ncolors->len(colors)
A:pandas.plotting._core.pos_priorneg_prior->numpy.zeros(len(self.data))
A:pandas.plotting._core.values->numpy.ravel(values)
A:pandas.plotting._core.(hist, self.bins)->numpy.histogram(values, bins=self.bins, range=self.kwds.get('range', None), weights=self.kwds.get('weights', None))
A:pandas.plotting._core.base->numpy.zeros(len(bins) - 1)
A:pandas.plotting._core.(n, bins, patches)->self.kwds.copy().pop('figure', plt.gcf() if plt.get_fignums() else plt.figure(figsize=figsize)).gca().hist(y, bins=bins, bottom=bottom, **kwds)
A:pandas.plotting._core.artists->self._plot(ax, y, column_num=i, stacking_id=stacking_id, **kwds)
A:pandas.plotting._core.ind->numpy.linspace(np.nanmin(y) - 0.5 * sample_range, np.nanmax(y) + 0.5 * sample_range, 1000)
A:pandas.plotting._core.gkde->gaussian_kde(y)
A:pandas.plotting._core.kwds['ind']->self._get_ind(y)
A:pandas.plotting._core.results->self.kwds.copy().pop('figure', plt.gcf() if plt.get_fignums() else plt.figure(figsize=figsize)).gca().pie(y, labels=blabels, **kwds)
A:pandas.plotting._core.BP->namedtuple('Boxplot', ['ax', 'lines'])
A:pandas.plotting._core.bp->self.kwds.copy().pop('figure', plt.gcf() if plt.get_fignums() else plt.figure(figsize=figsize)).gca().boxplot(values, **kwds)
A:pandas.plotting._core.self.color->self.kwds.pop('color')
A:pandas.plotting._core.boxes->self.color.get('boxes', self._boxes_c)
A:pandas.plotting._core.whiskers->self.color.get('whiskers', self._whiskers_c)
A:pandas.plotting._core.medians->self.color.get('medians', self._medians_c)
A:pandas.plotting._core.caps->self.color.get('caps', self._caps_c)
A:pandas.plotting._core.self._return_obj->Series()
A:pandas.plotting._core.(ret, bp)->self._plot(ax, y, column_num=0, return_type=self.return_type, **kwds)
A:pandas.plotting._core.kind->_get_standard_kind(kind.lower().strip())
A:pandas.plotting._core.plot_obj->klass(data, subplots=subplots, ax=ax, kind=kind, **kwds)
A:pandas.plotting._core.series->data[y].copy()
A:pandas.plotting._core._shared_doc_df_kwargs->dict(klass='DataFrame', klass_obj='df', klass_kind=df_kind, klass_coord=df_coord, klass_ax=df_ax, klass_unique=df_unique, klass_note=df_note)
A:pandas.plotting._core._shared_doc_series_kwargs->dict(klass='Series', klass_obj='s', klass_kind=series_kind, klass_coord=series_coord, klass_ax=series_ax, klass_unique=series_unique, klass_note=series_note)
A:pandas.plotting._core.result->Series(ax_values, index=columns)
A:pandas.plotting._core.naxes->len(columns)
A:pandas.plotting._core._axes->_flatten(axes)
A:pandas.plotting._core.ret->frames[0].join(frames[1:]).boxplot(column=column, fontsize=fontsize, rot=rot, grid=grid, ax=ax, figsize=figsize, layout=layout, **kwds)
A:pandas.plotting._core.d->group._get_numeric_data().boxplot(ax=ax, column=column, fontsize=fontsize, rot=rot, grid=grid, **kwds)
A:pandas.plotting._core.(keys, frames)->zip(*grouped)
A:pandas.plotting._core.df->frames[0].join(frames[1:])
A:pandas.plotting._core.grouped->data._get_numeric_data()._get_numeric_data().groupby(by)
A:pandas.plotting._core.group->group._get_numeric_data()._get_numeric_data()
A:pandas.plotting._core.columns->data._get_numeric_data()._get_numeric_data()._get_numeric_data().columns.difference(by)
A:pandas.plotting._core.(keys, values)->zip(*gp_col)
A:pandas.plotting._core.re_plotf->plotf(keys, values, ax, **kwargs)
pandas.plotting._core.AreaPlot(self,data,**kwargs)
pandas.plotting._core.AreaPlot.__init__(self,data,**kwargs)
pandas.plotting._core.AreaPlot._add_legend_handle(self,handle,label,index=None)
pandas.plotting._core.AreaPlot._plot(cls,ax,x,y,style=None,column_num=None,stacking_id=None,is_errorbar=False,**kwds)
pandas.plotting._core.AreaPlot._post_plot_logic(self,ax,data)
pandas.plotting._core.BarPlot(self,data,**kwargs)
pandas.plotting._core.BarPlot.__init__(self,data,**kwargs)
pandas.plotting._core.BarPlot._args_adjust(self)
pandas.plotting._core.BarPlot._decorate_ticks(self,ax,name,ticklabels,start_edge,end_edge)
pandas.plotting._core.BarPlot._make_plot(self)
pandas.plotting._core.BarPlot._plot(cls,ax,x,y,w,start=0,log=False,**kwds)
pandas.plotting._core.BarPlot._post_plot_logic(self,ax,data)
pandas.plotting._core.BarPlot._start_base(self)
pandas.plotting._core.BarhPlot(BarPlot)
pandas.plotting._core.BarhPlot._decorate_ticks(self,ax,name,ticklabels,start_edge,end_edge)
pandas.plotting._core.BarhPlot._plot(cls,ax,x,y,w,start=0,log=False,**kwds)
pandas.plotting._core.BarhPlot._start_base(self)
pandas.plotting._core.BasePlotMethods(self,data)
pandas.plotting._core.BasePlotMethods.__init__(self,data)
pandas.plotting._core.BoxPlot(self,data,return_type='axes',**kwargs)
pandas.plotting._core.BoxPlot.__init__(self,data,return_type='axes',**kwargs)
pandas.plotting._core.BoxPlot._args_adjust(self)
pandas.plotting._core.BoxPlot._get_colors(self,num_colors=None,color_kwds='color')
pandas.plotting._core.BoxPlot._make_legend(self)
pandas.plotting._core.BoxPlot._make_plot(self)
pandas.plotting._core.BoxPlot._plot(cls,ax,y,column_num=None,return_type='axes',**kwds)
pandas.plotting._core.BoxPlot._post_plot_logic(self,ax,data)
pandas.plotting._core.BoxPlot._set_ticklabels(self,ax,labels)
pandas.plotting._core.BoxPlot._validate_color_args(self)
pandas.plotting._core.BoxPlot.maybe_color_bp(self,bp)
pandas.plotting._core.BoxPlot.orientation(self)
pandas.plotting._core.BoxPlot.result(self)
pandas.plotting._core.FramePlotMethods(self,x=None,y=None,kind='line',ax=None,subplots=False,sharex=None,sharey=False,layout=None,figsize=None,use_index=True,title=None,grid=None,legend=True,style=None,logx=False,logy=False,loglog=False,xticks=None,yticks=None,xlim=None,ylim=None,rot=None,fontsize=None,colormap=None,table=False,yerr=None,xerr=None,secondary_y=False,sort_columns=False,**kwds)
pandas.plotting._core.FramePlotMethods.__call__(self,x=None,y=None,kind='line',ax=None,subplots=False,sharex=None,sharey=False,layout=None,figsize=None,use_index=True,title=None,grid=None,legend=True,style=None,logx=False,logy=False,loglog=False,xticks=None,yticks=None,xlim=None,ylim=None,rot=None,fontsize=None,colormap=None,table=False,yerr=None,xerr=None,secondary_y=False,sort_columns=False,**kwds)
pandas.plotting._core.FramePlotMethods.area(self,x=None,y=None,**kwds)
pandas.plotting._core.FramePlotMethods.bar(self,x=None,y=None,**kwds)
pandas.plotting._core.FramePlotMethods.barh(self,x=None,y=None,**kwds)
pandas.plotting._core.FramePlotMethods.box(self,by=None,**kwds)
pandas.plotting._core.FramePlotMethods.hexbin(self,x,y,C=None,reduce_C_function=None,gridsize=None,**kwds)
pandas.plotting._core.FramePlotMethods.hist(self,by=None,bins=10,**kwds)
pandas.plotting._core.FramePlotMethods.kde(self,**kwds)
pandas.plotting._core.FramePlotMethods.line(self,x=None,y=None,**kwds)
pandas.plotting._core.FramePlotMethods.pie(self,y=None,**kwds)
pandas.plotting._core.FramePlotMethods.scatter(self,x,y,s=None,c=None,**kwds)
pandas.plotting._core.HexBinPlot(self,data,x,y,C=None,**kwargs)
pandas.plotting._core.HexBinPlot.__init__(self,data,x,y,C=None,**kwargs)
pandas.plotting._core.HexBinPlot._make_legend(self)
pandas.plotting._core.HexBinPlot._make_plot(self)
pandas.plotting._core.HistPlot(self,data,bins=10,bottom=0,**kwargs)
pandas.plotting._core.HistPlot.__init__(self,data,bins=10,bottom=0,**kwargs)
pandas.plotting._core.HistPlot._args_adjust(self)
pandas.plotting._core.HistPlot._make_plot(self)
pandas.plotting._core.HistPlot._make_plot_keywords(self,kwds,y)
pandas.plotting._core.HistPlot._plot(cls,ax,y,style=None,bins=None,bottom=0,column_num=0,stacking_id=None,**kwds)
pandas.plotting._core.HistPlot._post_plot_logic(self,ax,data)
pandas.plotting._core.HistPlot.orientation(self)
pandas.plotting._core.KdePlot(self,data,bw_method=None,ind=None,**kwargs)
pandas.plotting._core.KdePlot.__init__(self,data,bw_method=None,ind=None,**kwargs)
pandas.plotting._core.KdePlot._args_adjust(self)
pandas.plotting._core.KdePlot._get_ind(self,y)
pandas.plotting._core.KdePlot._make_plot_keywords(self,kwds,y)
pandas.plotting._core.KdePlot._plot(cls,ax,y,style=None,bw_method=None,ind=None,column_num=None,stacking_id=None,**kwds)
pandas.plotting._core.KdePlot._post_plot_logic(self,ax,data)
pandas.plotting._core.LinePlot(self,data,**kwargs)
pandas.plotting._core.LinePlot.__init__(self,data,**kwargs)
pandas.plotting._core.LinePlot._get_stacked_values(cls,ax,stacking_id,values,label)
pandas.plotting._core.LinePlot._get_stacking_id(self)
pandas.plotting._core.LinePlot._initialize_stacker(cls,ax,stacking_id,n)
pandas.plotting._core.LinePlot._is_ts_plot(self)
pandas.plotting._core.LinePlot._make_plot(self)
pandas.plotting._core.LinePlot._plot(cls,ax,x,y,style=None,column_num=None,stacking_id=None,**kwds)
pandas.plotting._core.LinePlot._post_plot_logic(self,ax,data)
pandas.plotting._core.LinePlot._ts_plot(cls,ax,x,data,style=None,**kwds)
pandas.plotting._core.LinePlot._update_stacker(cls,ax,stacking_id,values)
pandas.plotting._core.LinePlot._use_dynamic_x(self)
pandas.plotting._core.MPLPlot(self,data,kind=None,by=None,subplots=False,sharex=None,sharey=False,use_index=True,figsize=None,grid=None,legend=True,rot=None,ax=None,fig=None,title=None,xlim=None,ylim=None,xticks=None,yticks=None,sort_columns=False,fontsize=None,secondary_y=False,colormap=None,table=False,layout=None,**kwds)
pandas.plotting._core.MPLPlot.__init__(self,data,kind=None,by=None,subplots=False,sharex=None,sharey=False,use_index=True,figsize=None,grid=None,legend=True,rot=None,ax=None,fig=None,title=None,xlim=None,ylim=None,xticks=None,yticks=None,sort_columns=False,fontsize=None,secondary_y=False,colormap=None,table=False,layout=None,**kwds)
pandas.plotting._core.MPLPlot._add_legend_handle(self,handle,label,index=None)
pandas.plotting._core.MPLPlot._add_table(self)
pandas.plotting._core.MPLPlot._adorn_subplots(self)
pandas.plotting._core.MPLPlot._apply_axis_properties(self,axis,rot=None,fontsize=None)
pandas.plotting._core.MPLPlot._apply_style_colors(self,colors,kwds,col_num,label)
pandas.plotting._core.MPLPlot._args_adjust(self)
pandas.plotting._core.MPLPlot._compute_plot_data(self)
pandas.plotting._core.MPLPlot._get_ax(self,i)
pandas.plotting._core.MPLPlot._get_ax_layer(cls,ax,primary=True)
pandas.plotting._core.MPLPlot._get_ax_legend(self,ax)
pandas.plotting._core.MPLPlot._get_axes_layout(self)
pandas.plotting._core.MPLPlot._get_colors(self,num_colors=None,color_kwds='color')
pandas.plotting._core.MPLPlot._get_errorbars(self,label=None,index=None,xerr=True,yerr=True)
pandas.plotting._core.MPLPlot._get_index_name(self)
pandas.plotting._core.MPLPlot._get_subplots(self)
pandas.plotting._core.MPLPlot._get_xticks(self,convert_period=False)
pandas.plotting._core.MPLPlot._has_plotted_object(self,ax)
pandas.plotting._core.MPLPlot._iter_data(self,data=None,keep_index=False,fillna=None)
pandas.plotting._core.MPLPlot._kind(self)
pandas.plotting._core.MPLPlot._make_legend(self)
pandas.plotting._core.MPLPlot._make_plot(self)
pandas.plotting._core.MPLPlot._maybe_right_yaxis(self,ax,axes_num)
pandas.plotting._core.MPLPlot._parse_errorbars(self,label,err)
pandas.plotting._core.MPLPlot._plot(cls,ax,x,y,style=None,is_errorbar=False,**kwds)
pandas.plotting._core.MPLPlot._post_plot_logic(self,ax,data)
pandas.plotting._core.MPLPlot._post_plot_logic_common(self,ax,data)
pandas.plotting._core.MPLPlot._setup_subplots(self)
pandas.plotting._core.MPLPlot._validate_color_args(self)
pandas.plotting._core.MPLPlot.draw(self)
pandas.plotting._core.MPLPlot.generate(self)
pandas.plotting._core.MPLPlot.legend_title(self)
pandas.plotting._core.MPLPlot.mpl_ge_1_3_1()
pandas.plotting._core.MPLPlot.mpl_ge_1_5_0()
pandas.plotting._core.MPLPlot.nseries(self)
pandas.plotting._core.MPLPlot.on_right(self,i)
pandas.plotting._core.MPLPlot.plt(self)
pandas.plotting._core.MPLPlot.result(self)
pandas.plotting._core.PiePlot(self,data,kind=None,**kwargs)
pandas.plotting._core.PiePlot.__init__(self,data,kind=None,**kwargs)
pandas.plotting._core.PiePlot._args_adjust(self)
pandas.plotting._core.PiePlot._make_plot(self)
pandas.plotting._core.PiePlot._validate_color_args(self)
pandas.plotting._core.PlanePlot(self,data,x,y,**kwargs)
pandas.plotting._core.PlanePlot.__init__(self,data,x,y,**kwargs)
pandas.plotting._core.PlanePlot._post_plot_logic(self,ax,data)
pandas.plotting._core.PlanePlot.nseries(self)
pandas.plotting._core.ScatterPlot(self,data,x,y,s=None,c=None,**kwargs)
pandas.plotting._core.ScatterPlot.__init__(self,data,x,y,s=None,c=None,**kwargs)
pandas.plotting._core.ScatterPlot._make_plot(self)
pandas.plotting._core.SeriesPlotMethods(self,kind='line',ax=None,figsize=None,use_index=True,title=None,grid=None,legend=False,style=None,logx=False,logy=False,loglog=False,xticks=None,yticks=None,xlim=None,ylim=None,rot=None,fontsize=None,colormap=None,table=False,yerr=None,xerr=None,label=None,secondary_y=False,**kwds)
pandas.plotting._core.SeriesPlotMethods.__call__(self,kind='line',ax=None,figsize=None,use_index=True,title=None,grid=None,legend=False,style=None,logx=False,logy=False,loglog=False,xticks=None,yticks=None,xlim=None,ylim=None,rot=None,fontsize=None,colormap=None,table=False,yerr=None,xerr=None,label=None,secondary_y=False,**kwds)
pandas.plotting._core.SeriesPlotMethods.area(self,**kwds)
pandas.plotting._core.SeriesPlotMethods.bar(self,**kwds)
pandas.plotting._core.SeriesPlotMethods.barh(self,**kwds)
pandas.plotting._core.SeriesPlotMethods.box(self,**kwds)
pandas.plotting._core.SeriesPlotMethods.hist(self,bins=10,**kwds)
pandas.plotting._core.SeriesPlotMethods.kde(self,**kwds)
pandas.plotting._core.SeriesPlotMethods.line(self,**kwds)
pandas.plotting._core.SeriesPlotMethods.pie(self,**kwds)
pandas.plotting._core._gca()
pandas.plotting._core._gcf()
pandas.plotting._core._get_standard_kind(kind)
pandas.plotting._core._grouped_plot(plotf,data,column=None,by=None,numeric_only=True,figsize=None,sharex=True,sharey=True,layout=None,rot=0,ax=None,**kwargs)
pandas.plotting._core._grouped_plot_by_column(plotf,data,columns=None,by=None,numeric_only=True,grid=False,figsize=None,ax=None,layout=None,return_type=None,**kwargs)
pandas.plotting._core._plot(data,x=None,y=None,subplots=False,ax=None,kind='line',**kwds)
pandas.plotting._core.boxplot(data,column=None,by=None,ax=None,fontsize=None,rot=0,grid=True,figsize=None,layout=None,return_type=None,**kwds)
pandas.plotting._core.boxplot_frame_groupby(grouped,subplots=True,column=None,fontsize=None,rot=0,grid=True,ax=None,figsize=None,layout=None,**kwds)
pandas.plotting._core.grouped_hist(data,column=None,by=None,ax=None,bins=50,figsize=None,layout=None,sharex=False,sharey=False,rot=90,grid=True,xlabelsize=None,xrot=None,ylabelsize=None,yrot=None,**kwargs)
pandas.plotting._core.hist_frame(data,column=None,by=None,grid=True,xlabelsize=None,xrot=None,ylabelsize=None,yrot=None,ax=None,sharex=False,sharey=False,figsize=None,layout=None,bins=10,**kwds)
pandas.plotting._core.hist_series(self,by=None,ax=None,grid=True,xlabelsize=None,xrot=None,ylabelsize=None,yrot=None,figsize=None,bins=10,**kwds)
pandas.plotting._core.plot_frame(data,x=None,y=None,kind='line',ax=None,subplots=False,sharex=None,sharey=False,layout=None,figsize=None,use_index=True,title=None,grid=None,legend=True,style=None,logx=False,logy=False,loglog=False,xticks=None,yticks=None,xlim=None,ylim=None,rot=None,fontsize=None,colormap=None,table=False,yerr=None,xerr=None,secondary_y=False,sort_columns=False,**kwds)
pandas.plotting._core.plot_series(data,kind='line',ax=None,figsize=None,use_index=True,title=None,grid=None,legend=False,style=None,logx=False,logy=False,loglog=False,xticks=None,yticks=None,xlim=None,ylim=None,rot=None,fontsize=None,colormap=None,table=False,yerr=None,xerr=None,label=None,secondary_y=False,**kwds)
pandas.plotting._core.scatter_plot(data,x,y,by=None,ax=None,figsize=None,grid=False,**kwargs)
pandas.plotting.boxplot(data,column=None,by=None,ax=None,fontsize=None,rot=0,grid=True,figsize=None,layout=None,return_type=None,**kwds)
pandas.plotting.boxplot_frame_groupby(grouped,subplots=True,column=None,fontsize=None,rot=0,grid=True,ax=None,figsize=None,layout=None,**kwds)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/plotting/_style.py----------------------------------------
A:pandas.plotting._style.colormap->matplotlib.cm.get_cmap(colormap)
A:pandas.plotting._style.colors->lmap(random_color, lrange(num_colors))
A:pandas.plotting._style.conv->matplotlib.colors.ColorConverter()
A:pandas.plotting._style.maybe_single_color->_maybe_valid_colors([colors])
A:pandas.plotting._style.maybe_color_cycle->_maybe_valid_colors(list(colors))
A:pandas.plotting._style.key->self._get_canonical_key(key)
A:pandas.plotting._style.plot_params->_Options()
pandas.plotting._style._Options(self,deprecated=False)
pandas.plotting._style._Options.__contains__(self,key)
pandas.plotting._style._Options.__delitem__(self,key)
pandas.plotting._style._Options.__getitem__(self,key)
pandas.plotting._style._Options.__init__(self,deprecated=False)
pandas.plotting._style._Options.__setitem__(self,key,value)
pandas.plotting._style._Options._get_canonical_key(self,key)
pandas.plotting._style._Options._warn_if_deprecated(self)
pandas.plotting._style._Options.reset(self)
pandas.plotting._style._Options.use(self,key,value)
pandas.plotting._style._get_standard_colors(num_colors=None,colormap=None,color_type='default',color=None)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/plotting/_tools.py----------------------------------------
A:pandas.plotting._tools.fig->fig.add_subplot(nrows, ncols, i + 1, **kwds).get_figure()
A:pandas.plotting._tools.data->DataFrame(data, columns=[data.name])
A:pandas.plotting._tools.table->matplotlib.table.table(ax, cellText=cellText, rowLabels=rowLabels, colLabels=colLabels, **kwargs)
A:pandas.plotting._tools.ax->fig.add_subplot(nrows, ncols, i + 1, **kwds).get_figure().add_subplot(nrows, ncols, i + 1, **kwds)
A:pandas.plotting._tools.(nrows, ncols)->_get_layout(naxes, layout=layout, layout_type=layout_type)
A:pandas.plotting._tools.axarr->numpy.empty(nplots, dtype=object)
A:pandas.plotting._tools.ax0->fig.add_subplot(nrows, ncols, i + 1, **kwds).get_figure().add_subplot(nrows, ncols, 1, **subplot_kw)
A:pandas.plotting._tools.kwds->subplot_kw.copy()
A:pandas.plotting._tools.axes->numpy.empty(nplots, dtype=object).reshape(nrows, ncols)
A:pandas.plotting._tools.layout->numpy.zeros((nrows + 1, ncols + 1), dtype=np.bool)
A:pandas.plotting._tools.layout[ax.rowNum, ax.colNum]->fig.add_subplot(nrows, ncols, i + 1, **kwds).get_figure().add_subplot(nrows, ncols, i + 1, **kwds).get_visible()
A:pandas.plotting._tools.lines->fig.add_subplot(nrows, ncols, i + 1, **kwds).get_figure().add_subplot(nrows, ncols, i + 1, **kwds).get_lines()
A:pandas.plotting._tools.x->l.get_xdata(orig=False)
A:pandas.plotting._tools.left->min(x[0], left)
A:pandas.plotting._tools.right->max(x[-1], right)
pandas.plotting._tools._flatten(axes)
pandas.plotting._tools._get_all_lines(ax)
pandas.plotting._tools._get_layout(nplots,layout=None,layout_type='box')
pandas.plotting._tools._get_xlim(lines)
pandas.plotting._tools._handle_shared_axes(axarr,nplots,naxes,nrows,ncols,sharex,sharey)
pandas.plotting._tools._remove_labels_from_axis(axis)
pandas.plotting._tools._set_ticks_props(axes,xlabelsize=None,xrot=None,ylabelsize=None,yrot=None)
pandas.plotting._tools._subplots(naxes=None,sharex=False,sharey=False,squeeze=True,subplot_kw=None,ax=None,layout=None,layout_type='box',**fig_kw)
pandas.plotting._tools.format_date_labels(ax,rot)
pandas.plotting._tools.table(ax,data,rowLabels=None,colLabels=None,**kwargs)
pandas.plotting.table(ax,data,rowLabels=None,colLabels=None,**kwargs)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/plotting/_compat.py----------------------------------------
pandas.plotting._compat._mpl_ge_1_3_1()
pandas.plotting._compat._mpl_ge_1_4_0()
pandas.plotting._compat._mpl_ge_1_5_0()
pandas.plotting._compat._mpl_ge_2_0_0()
pandas.plotting._compat._mpl_ge_2_0_1()
pandas.plotting._compat._mpl_le_1_2_1()
pandas.plotting._compat._mpl_le_2_0_0()


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/plotting/_converter.py----------------------------------------
A:pandas.plotting._converter.units.registry[lib.Timestamp]->DatetimeConverter()
A:pandas.plotting._converter.units.registry[Period]->PeriodConverter()
A:pandas.plotting._converter.units.registry[pydt.datetime]->DatetimeConverter()
A:pandas.plotting._converter.units.registry[pydt.date]->DatetimeConverter()
A:pandas.plotting._converter.units.registry[pydt.time]->TimeConverter()
A:pandas.plotting._converter.units.registry[np.datetime64]->DatetimeConverter()
A:pandas.plotting._converter.parsed->pandas.core.tools.datetimes.to_datetime(d)
A:pandas.plotting._converter.majloc->PandasAutoDateLocator(tz=tz)
A:pandas.plotting._converter.majfmt->PandasAutoDateFormatter(majloc, tz=tz)
A:pandas.plotting._converter.s->'{:02d}:{:02d}:{:02d}'.format(int(h), int(m), int(s))
A:pandas.plotting._converter.ms->int((x - s) * 1000.0)
A:pandas.plotting._converter.us->int((x - s) * 1000000.0 - ms)
A:pandas.plotting._converter.(m, s)->divmod(s, 60)
A:pandas.plotting._converter.(h, m)->divmod(m, 60)
A:pandas.plotting._converter.(_, h)->divmod(h, 24)
A:pandas.plotting._converter.values->_dt_to_float_ordinal(values)
A:pandas.plotting._converter.base->matplotlib.dates.date2num(dt)
A:pandas.plotting._converter.datemin->datetime.date(2000, 1, 1)
A:pandas.plotting._converter.datemax->datetime.date(2010, 1, 1)
A:pandas.plotting._converter.self._tz._utcoffset->self._tz.utcoffset(None)
A:pandas.plotting._converter.delta->relativedelta(dmax, dmin)
A:pandas.plotting._converter.locator->MilliSecondLocator(self.tz)
A:pandas.plotting._converter.unit->matplotlib.dates.RRuleLocator.get_unit_generic(freq)
A:pandas.plotting._converter.(dmin, dmax)->self.datalim_to_dt()
A:pandas.plotting._converter.(nmax, nmin)->matplotlib.dates.date2num((dmax, dmin))
A:pandas.plotting._converter.tz->self.tz.tzname(None)
A:pandas.plotting._converter.st->_from_ordinal(dates.date2num(dmin))
A:pandas.plotting._converter.ed->_from_ordinal(dates.date2num(dmax))
A:pandas.plotting._converter.locs->self._get_default_locs(vmin, vmax)
A:pandas.plotting._converter.lims->matplotlib.dates.date2num([dmin, dmax])
A:pandas.plotting._converter.vmin->matplotlib.dates.date2num(dmin)
A:pandas.plotting._converter.vmax->matplotlib.dates.date2num(dmax)
A:pandas.plotting._converter.ix->int(x)
A:pandas.plotting._converter.dt->dt.astimezone(tz).astimezone(tz)
A:pandas.plotting._converter.(hour, remainder)->divmod(24 * remainder, 1)
A:pandas.plotting._converter.(minute, remainder)->divmod(60 * remainder, 1)
A:pandas.plotting._converter.(second, remainder)->divmod(60 * remainder, 1)
A:pandas.plotting._converter.microsecond->int(1000000.0 * remainder)
A:pandas.plotting._converter.current->getattr(dates, period)
A:pandas.plotting._converter.previous->getattr(dates - 1, period)
A:pandas.plotting._converter.dates_->PeriodIndex(start=vmin, end=vmax, freq=freq)
A:pandas.plotting._converter.info->numpy.zeros(span, dtype=[('val', int), ('maj', bool), ('min', bool), ('fmt', '|S8')])
A:pandas.plotting._converter.day_start->period_break(dates_, 'day')
A:pandas.plotting._converter.month_start->period_break(dates_, 'month')
A:pandas.plotting._converter.year_start->period_break(dates_, 'year')
A:pandas.plotting._converter.hour_start->period_break(dates_, 'hour')
A:pandas.plotting._converter.minute_start->period_break(dates_, 'minute')
A:pandas.plotting._converter.week_start->period_break(dates_, 'week')
A:pandas.plotting._converter.quarter_start->(dates_ % 3 == 0).nonzero()
A:pandas.plotting._converter.(min_anndef, maj_anndef)->_get_default_annual_spacing(span)
A:pandas.plotting._converter.info['val']->numpy.arange(vmin, vmax + 1)
A:pandas.plotting._converter.freq->pandas.tseries.frequencies.get_freq(freq)
A:pandas.plotting._converter.fgroup->pandas.tseries.frequencies.get_freq_group(freq)
A:pandas.plotting._converter.self.finder->get_finder(freq)
A:pandas.plotting._converter.self.plot_obj.date_axis_info->self.finder(vmin, vmax, self.freq)
A:pandas.plotting._converter.vi->tuple(self.axis.get_view_interval())
A:pandas.plotting._converter.(d, m)->divmod(vmin, base)
A:pandas.plotting._converter.(vmin, vmax)->tuple(self.axis.get_view_interval())
A:pandas.plotting._converter.format->numpy.compress(info['maj'], info)
A:pandas.plotting._converter.self.formatdict->dict([(x, f) for (x, _, _, f) in format])
A:pandas.plotting._converter.(vmin, vmax)vi->tuple(self.axis.get_view_interval())
A:pandas.plotting._converter.fmt->self.formatdict.pop(x, '')
A:pandas.plotting._converter.(s, ns)->divmod(x, 1000000000.0)
A:pandas.plotting._converter.(d, h)->divmod(h, 24)
A:pandas.plotting._converter.decimals->int(ns * 10 ** (n_decimals - 9))
A:pandas.plotting._converter.n_decimals->int(np.ceil(np.log10(100 * 1000000000.0 / (vmax - vmin))))
pandas.plotting._converter.DatetimeConverter(dates.DateConverter)
pandas.plotting._converter.DatetimeConverter._convert_1d(values,unit,axis)
pandas.plotting._converter.DatetimeConverter.axisinfo(unit,axis)
pandas.plotting._converter.DatetimeConverter.convert(values,unit,axis)
pandas.plotting._converter.MilliSecondLocator(self,tz)
pandas.plotting._converter.MilliSecondLocator.__init__(self,tz)
pandas.plotting._converter.MilliSecondLocator._get_interval(self)
pandas.plotting._converter.MilliSecondLocator._get_unit(self)
pandas.plotting._converter.MilliSecondLocator.autoscale(self)
pandas.plotting._converter.MilliSecondLocator.get_unit_generic(freq)
pandas.plotting._converter.PandasAutoDateFormatter(self,locator,tz=None,defaultfmt='%Y-%m-%d')
pandas.plotting._converter.PandasAutoDateFormatter.__init__(self,locator,tz=None,defaultfmt='%Y-%m-%d')
pandas.plotting._converter.PandasAutoDateLocator(dates.AutoDateLocator)
pandas.plotting._converter.PandasAutoDateLocator._get_unit(self)
pandas.plotting._converter.PandasAutoDateLocator.get_locator(self,dmin,dmax)
pandas.plotting._converter.PeriodConverter(dates.DateConverter)
pandas.plotting._converter.PeriodConverter._convert_1d(values,units,axis)
pandas.plotting._converter.PeriodConverter.convert(values,units,axis)
pandas.plotting._converter.TimeConverter(units.ConversionInterface)
pandas.plotting._converter.TimeConverter.axisinfo(unit,axis)
pandas.plotting._converter.TimeConverter.convert(value,unit,axis)
pandas.plotting._converter.TimeConverter.default_units(x,axis)
pandas.plotting._converter.TimeFormatter(self,locs)
pandas.plotting._converter.TimeFormatter.__init__(self,locs)
pandas.plotting._converter.TimeSeries_DateFormatter(self,freq,minor_locator=False,dynamic_mode=True,plot_obj=None)
pandas.plotting._converter.TimeSeries_DateFormatter.__init__(self,freq,minor_locator=False,dynamic_mode=True,plot_obj=None)
pandas.plotting._converter.TimeSeries_DateFormatter._set_default_format(self,vmin,vmax)
pandas.plotting._converter.TimeSeries_DateFormatter.set_locs(self,locs)
pandas.plotting._converter.TimeSeries_DateLocator(self,freq,minor_locator=False,dynamic_mode=True,base=1,quarter=1,month=1,day=1,plot_obj=None)
pandas.plotting._converter.TimeSeries_DateLocator.__init__(self,freq,minor_locator=False,dynamic_mode=True,base=1,quarter=1,month=1,day=1,plot_obj=None)
pandas.plotting._converter.TimeSeries_DateLocator._get_default_locs(self,vmin,vmax)
pandas.plotting._converter.TimeSeries_DateLocator.autoscale(self)
pandas.plotting._converter.TimeSeries_TimedeltaFormatter(self,x,pos=0)
pandas.plotting._converter.TimeSeries_TimedeltaFormatter.__call__(self,x,pos=0)
pandas.plotting._converter.TimeSeries_TimedeltaFormatter.format_timedelta_ticks(x,pos,n_decimals)
pandas.plotting._converter._annual_finder(vmin,vmax,freq)
pandas.plotting._converter._daily_finder(vmin,vmax,freq)
pandas.plotting._converter._dt_to_float_ordinal(dt)
pandas.plotting._converter._from_ordinal(x,tz=None)
pandas.plotting._converter._get_default_annual_spacing(nyears)
pandas.plotting._converter._monthly_finder(vmin,vmax,freq)
pandas.plotting._converter._quarterly_finder(vmin,vmax,freq)
pandas.plotting._converter._to_ordinalf(tm)
pandas.plotting._converter.get_datevalue(date,freq)
pandas.plotting._converter.get_finder(freq)
pandas.plotting._converter.has_level_label(label_flags,vmin)
pandas.plotting._converter.period_break(dates,period)
pandas.plotting._converter.register()
pandas.plotting._converter.time2num(d)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/plotting/_misc.py----------------------------------------
A:pandas.plotting._misc.df->frame.drop(class_column, axis=1)
A:pandas.plotting._misc.(fig, axes)->_subplots(naxes=naxes, figsize=figsize, ax=ax, squeeze=False)
A:pandas.plotting._misc.mask->notnull(df)
A:pandas.plotting._misc.marker->_get_marker_compat(marker)
A:pandas.plotting._misc.gkde->gaussian_kde(y)
A:pandas.plotting._misc.ind->numpy.linspace(y.min(), y.max(), 1000)
A:pandas.plotting._misc.locs->locs.astype(int).astype(int)
A:pandas.plotting._misc.lim0->axes[0][0].get_ylim()
A:pandas.plotting._misc.a->min(series)
A:pandas.plotting._misc.b->max(series)
A:pandas.plotting._misc.n->len(series)
A:pandas.plotting._misc.classes->sorted(classes)
A:pandas.plotting._misc.ax->matplotlib.pyplot.gca(xlim=(1, n), ylim=(-1.0, 1.0))
A:pandas.plotting._misc.colors->dict(zip(classes, color_values))
A:pandas.plotting._misc.s->numpy.array([(np.cos(t), np.sin(t)) for t in [2.0 * np.pi * (i / float(m)) for i in range(m)]])
A:pandas.plotting._misc.row_->numpy.repeat(np.expand_dims(row, axis=1), 2, axis=1)
A:pandas.plotting._misc.coeffs->numpy.delete(np.copy(amplitudes), 0)
A:pandas.plotting._misc.trig_args->numpy.outer(harmonics, t)
A:pandas.plotting._misc.t->numpy.linspace(-pi, pi, samples)
A:pandas.plotting._misc.used_legends->set([])
A:pandas.plotting._misc.color_values->sorted(color_values)
A:pandas.plotting._misc.f->function(row)
A:pandas.plotting._misc.y->lmap(r, x)
A:pandas.plotting._misc.label->pprint_thing(kls)
A:pandas.plotting._misc.data->numpy.asarray(series)
A:pandas.plotting._misc.means->numpy.array([np.mean(sampling) for sampling in samplings])
A:pandas.plotting._misc.medians->numpy.array([np.median(sampling) for sampling in samplings])
A:pandas.plotting._misc.midranges->numpy.array([(min(sampling) + max(sampling)) * 0.5 for sampling in samplings])
A:pandas.plotting._misc.fig->matplotlib.pyplot.figure()
A:pandas.plotting._misc.x->lrange(ncols)
A:pandas.plotting._misc.ax1->matplotlib.pyplot.figure().add_subplot(2, 3, 1)
A:pandas.plotting._misc.ax2->matplotlib.pyplot.figure().add_subplot(2, 3, 2)
A:pandas.plotting._misc.ax3->matplotlib.pyplot.figure().add_subplot(2, 3, 3)
A:pandas.plotting._misc.ax4->matplotlib.pyplot.figure().add_subplot(2, 3, 4)
A:pandas.plotting._misc.ax5->matplotlib.pyplot.figure().add_subplot(2, 3, 5)
A:pandas.plotting._misc.ax6->matplotlib.pyplot.figure().add_subplot(2, 3, 6)
A:pandas.plotting._misc.ncols->len(df.columns)
A:pandas.plotting._misc.mean->numpy.mean(data)
pandas.plotting._misc._get_marker_compat(marker)
pandas.plotting._misc.andrews_curves(frame,class_column,ax=None,samples=200,color=None,colormap=None,**kwds)
pandas.plotting._misc.autocorrelation_plot(series,ax=None,**kwds)
pandas.plotting._misc.bootstrap_plot(series,fig=None,size=50,samples=500,**kwds)
pandas.plotting._misc.lag_plot(series,lag=1,ax=None,**kwds)
pandas.plotting._misc.parallel_coordinates(frame,class_column,cols=None,ax=None,color=None,use_columns=False,xticks=None,colormap=None,axvlines=True,axvlines_kwds=None,sort_labels=False,**kwds)
pandas.plotting._misc.radviz(frame,class_column,ax=None,color=None,colormap=None,**kwds)
pandas.plotting._misc.scatter_matrix(frame,alpha=0.5,figsize=None,ax=None,grid=False,diagonal='hist',marker='.',density_kwds=None,hist_kwds=None,range_padding=0.05,**kwds)
pandas.plotting.andrews_curves(frame,class_column,ax=None,samples=200,color=None,colormap=None,**kwds)
pandas.plotting.autocorrelation_plot(series,ax=None,**kwds)
pandas.plotting.bootstrap_plot(series,fig=None,size=50,samples=500,**kwds)
pandas.plotting.lag_plot(series,lag=1,ax=None,**kwds)
pandas.plotting.parallel_coordinates(frame,class_column,cols=None,ax=None,color=None,use_columns=False,xticks=None,colormap=None,axvlines=True,axvlines_kwds=None,sort_labels=False,**kwds)
pandas.plotting.radviz(frame,class_column,ax=None,color=None,colormap=None,**kwds)
pandas.plotting.scatter_matrix(frame,alpha=0.5,figsize=None,ax=None,grid=False,diagonal='hist',marker='.',density_kwds=None,hist_kwds=None,range_padding=0.05,**kwds)


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/plotting/__init__.py----------------------------------------


----------------------------------------/home/zhang/Packages/pandas/pandas0.20.1/plotting/_timeseries.py----------------------------------------
A:pandas.plotting._timeseries.ax->matplotlib.pyplot.gca()
A:pandas.plotting._timeseries.(freq, series)->_maybe_resample(series, ax, kwargs)
A:pandas.plotting._timeseries.lines->plotf(ax, series.index._mpl_repr(), series.values, **kwargs)
A:pandas.plotting._timeseries.(freq, ax_freq)->_get_freq(ax, series)
A:pandas.plotting._timeseries.series->series.copy().copy()
A:pandas.plotting._timeseries.series.index->series.copy().copy().index.asfreq(ax_freq, how='s')
A:pandas.plotting._timeseries.how->kwargs.pop('how', 'last')
A:pandas.plotting._timeseries.legend->matplotlib.pyplot.gca().get_legend()
A:pandas.plotting._timeseries.(lines, labels)->_replot_ax(ax, freq, kwargs)
A:pandas.plotting._timeseries.(rlines, rlabels)->_replot_ax(other_ax, freq, kwargs)
A:pandas.plotting._timeseries.title->matplotlib.pyplot.gca().get_legend().get_title().get_text()
A:pandas.plotting._timeseries.data->data.to_period(freq=freq).to_period(freq=freq)
A:pandas.plotting._timeseries.idx->series.copy().copy().index.asfreq(freq, how='S')
A:pandas.plotting._timeseries.xaxis->matplotlib.pyplot.gca().get_xaxis()
A:pandas.plotting._timeseries.ax_freq->_get_ax_freq(ax)
A:pandas.plotting._timeseries.shared_axes->matplotlib.pyplot.gca().get_shared_x_axes().get_siblings(ax)
A:pandas.plotting._timeseries.freq->pandas.tseries.frequencies.get_period_alias(freq)
A:pandas.plotting._timeseries.base->pandas.tseries.frequencies.get_freq(freq)
A:pandas.plotting._timeseries.weekdays->numpy.unique(data.index.dayofweek)
A:pandas.plotting._timeseries.(s, ns)->divmod(x, 1000000000.0)
A:pandas.plotting._timeseries.(m, s)->divmod(s, 60)
A:pandas.plotting._timeseries.(h, m)->divmod(m, 60)
A:pandas.plotting._timeseries.(d, h)->divmod(h, 24)
A:pandas.plotting._timeseries.decimals->int(ns * 10 ** (n_decimals - 9))
A:pandas.plotting._timeseries.s->'{:02d}:{:02d}:{:02d}'.format(int(h), int(m), int(s))
A:pandas.plotting._timeseries.majlocator->TimeSeries_DateLocator(freq, dynamic_mode=True, minor_locator=False, plot_obj=subplot)
A:pandas.plotting._timeseries.minlocator->TimeSeries_DateLocator(freq, dynamic_mode=True, minor_locator=True, plot_obj=subplot)
A:pandas.plotting._timeseries.majformatter->TimeSeries_DateFormatter(freq, dynamic_mode=True, minor_locator=False, plot_obj=subplot)
A:pandas.plotting._timeseries.minformatter->TimeSeries_DateFormatter(freq, dynamic_mode=True, minor_locator=True, plot_obj=subplot)
pandas.plotting._timeseries._decorate_axes(ax,freq,kwargs)
pandas.plotting._timeseries._get_ax_freq(ax)
pandas.plotting._timeseries._get_freq(ax,series)
pandas.plotting._timeseries._get_index_freq(data)
pandas.plotting._timeseries._is_sub(f1,f2)
pandas.plotting._timeseries._is_sup(f1,f2)
pandas.plotting._timeseries._maybe_convert_index(ax,data)
pandas.plotting._timeseries._maybe_resample(series,ax,kwargs)
pandas.plotting._timeseries._replot_ax(ax,freq,kwargs)
pandas.plotting._timeseries._upsample_others(ax,freq,kwargs)
pandas.plotting._timeseries._use_dynamic_x(ax,data)
pandas.plotting._timeseries.format_dateaxis(subplot,freq,index)
pandas.plotting._timeseries.format_timedelta_ticks(x,pos,n_decimals)
pandas.plotting._timeseries.tsplot(series,plotf,ax=None,**kwargs)

